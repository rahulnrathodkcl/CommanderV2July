
COMMANDER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0001aadc  00010000  00010000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0002aadc  0002aadc  0002aadc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000001fc  20000000  0002aae4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          0000076c  20000200  0002acf0  00030200  2**4
                  ALLOC
  4 .stack        00002004  2000096c  0002b45c  00030200  2**0
                  ALLOC
  5 .ARM.attributes 00000028  00000000  00000000  000301fc  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00030224  2**0
                  CONTENTS, READONLY
  7 .debug_info   0007f47f  00000000  00000000  0003027d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00008ab2  00000000  00000000  000af6fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000a9c5  00000000  00000000  000b81ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00001d68  00000000  00000000  000c2b73  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00001b70  00000000  00000000  000c48db  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00028798  00000000  00000000  000c644b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000279da  00000000  00000000  000eebe3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000a2538  00000000  00000000  001165bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00007398  00000000  00000000  001b8af8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00010000 <exception_table>:
   10000:	70 29 00 20 19 49 02 00 11 4a 02 00 11 4a 02 00     p). .I...J...J..
	...
   1002c:	01 e8 01 00 00 00 00 00 00 00 00 00 31 e9 01 00     ............1...
   1003c:	79 e9 01 00 11 4a 02 00 11 4a 02 00 71 10 02 00     y....J...J..q...
   1004c:	7d e1 01 00 99 20 02 00 11 4a 02 00 15 d7 01 00     }.... ...J......
   1005c:	11 4a 02 00 05 21 02 00 91 1e 02 00 a9 1e 02 00     .J...!..........
   1006c:	c1 1e 02 00 d9 1e 02 00 f1 1e 02 00 09 1f 02 00     ................
   1007c:	95 10 02 00 a9 10 02 00 bd 10 02 00 4d 11 02 00     ............M...
   1008c:	61 11 02 00 75 11 02 00 89 11 02 00 9d 11 02 00     a...u...........
   1009c:	f5 d4 01 00 5d 24 02 00 d9 d6 01 00 11 4a 02 00     ....]$.......J..
   100ac:	11 4a 02 00 00 00 00 00                             .J......

000100b4 <__do_global_dtors_aux>:
   100b4:	b510      	push	{r4, lr}
   100b6:	4c06      	ldr	r4, [pc, #24]	; (100d0 <__do_global_dtors_aux+0x1c>)
   100b8:	7823      	ldrb	r3, [r4, #0]
   100ba:	2b00      	cmp	r3, #0
   100bc:	d107      	bne.n	100ce <__do_global_dtors_aux+0x1a>
   100be:	4b05      	ldr	r3, [pc, #20]	; (100d4 <__do_global_dtors_aux+0x20>)
   100c0:	2b00      	cmp	r3, #0
   100c2:	d002      	beq.n	100ca <__do_global_dtors_aux+0x16>
   100c4:	4804      	ldr	r0, [pc, #16]	; (100d8 <__do_global_dtors_aux+0x24>)
   100c6:	e000      	b.n	100ca <__do_global_dtors_aux+0x16>
   100c8:	bf00      	nop
   100ca:	2301      	movs	r3, #1
   100cc:	7023      	strb	r3, [r4, #0]
   100ce:	bd10      	pop	{r4, pc}
   100d0:	20000200 	.word	0x20000200
   100d4:	00000000 	.word	0x00000000
   100d8:	0002aae4 	.word	0x0002aae4

000100dc <frame_dummy>:
   100dc:	4b08      	ldr	r3, [pc, #32]	; (10100 <frame_dummy+0x24>)
   100de:	b510      	push	{r4, lr}
   100e0:	2b00      	cmp	r3, #0
   100e2:	d003      	beq.n	100ec <frame_dummy+0x10>
   100e4:	4907      	ldr	r1, [pc, #28]	; (10104 <frame_dummy+0x28>)
   100e6:	4808      	ldr	r0, [pc, #32]	; (10108 <frame_dummy+0x2c>)
   100e8:	e000      	b.n	100ec <frame_dummy+0x10>
   100ea:	bf00      	nop
   100ec:	4807      	ldr	r0, [pc, #28]	; (1010c <frame_dummy+0x30>)
   100ee:	6803      	ldr	r3, [r0, #0]
   100f0:	2b00      	cmp	r3, #0
   100f2:	d100      	bne.n	100f6 <frame_dummy+0x1a>
   100f4:	bd10      	pop	{r4, pc}
   100f6:	4b06      	ldr	r3, [pc, #24]	; (10110 <frame_dummy+0x34>)
   100f8:	2b00      	cmp	r3, #0
   100fa:	d0fb      	beq.n	100f4 <frame_dummy+0x18>
   100fc:	4798      	blx	r3
   100fe:	e7f9      	b.n	100f4 <frame_dummy+0x18>
   10100:	00000000 	.word	0x00000000
   10104:	20000204 	.word	0x20000204
   10108:	0002aae4 	.word	0x0002aae4
   1010c:	0002aae4 	.word	0x0002aae4
   10110:	00000000 	.word	0x00000000

00010114 <configure_eeprom>:
#include "eeprom_driver.h"

void configure_eeprom(void)
{
   10114:	b590      	push	{r4, r7, lr}
   10116:	b083      	sub	sp, #12
   10118:	af00      	add	r7, sp, #0
	enum status_code error_code = eeprom_emulator_init();
   1011a:	1dfc      	adds	r4, r7, #7
   1011c:	4b0a      	ldr	r3, [pc, #40]	; (10148 <configure_eeprom+0x34>)
   1011e:	4798      	blx	r3
   10120:	0003      	movs	r3, r0
   10122:	7023      	strb	r3, [r4, #0]
	if (error_code == STATUS_ERR_NO_MEMORY)
   10124:	1dfb      	adds	r3, r7, #7
   10126:	781b      	ldrb	r3, [r3, #0]
   10128:	2b16      	cmp	r3, #22
   1012a:	d100      	bne.n	1012e <configure_eeprom+0x1a>
	{
		while (true);
   1012c:	e7fe      	b.n	1012c <configure_eeprom+0x18>
	}
	else if (error_code != STATUS_OK)
   1012e:	1dfb      	adds	r3, r7, #7
   10130:	781b      	ldrb	r3, [r3, #0]
   10132:	2b00      	cmp	r3, #0
   10134:	d003      	beq.n	1013e <configure_eeprom+0x2a>
	{
		eeprom_emulator_erase_memory();
   10136:	4b05      	ldr	r3, [pc, #20]	; (1014c <configure_eeprom+0x38>)
   10138:	4798      	blx	r3
		eeprom_emulator_init();
   1013a:	4b03      	ldr	r3, [pc, #12]	; (10148 <configure_eeprom+0x34>)
   1013c:	4798      	blx	r3
	}
}
   1013e:	46c0      	nop			; (mov r8, r8)
   10140:	46bd      	mov	sp, r7
   10142:	b003      	add	sp, #12
   10144:	bd90      	pop	{r4, r7, pc}
   10146:	46c0      	nop			; (mov r8, r8)
   10148:	000234d5 	.word	0x000234d5
   1014c:	000235bd 	.word	0x000235bd

00010150 <init_eeprom>:

void init_eeprom(void)
{
   10150:	b580      	push	{r7, lr}
   10152:	af00      	add	r7, sp, #0
	configure_eeprom();
   10154:	4bf6      	ldr	r3, [pc, #984]	; (10530 <init_eeprom+0x3e0>)
   10156:	4798      	blx	r3
	
	//////////////////////////////////////////////////////////////////////////
	eeprom_emulator_read_page(BOOTLOADER_PARAMETER_PAGE, page_data);
   10158:	4bf6      	ldr	r3, [pc, #984]	; (10534 <init_eeprom+0x3e4>)
   1015a:	0019      	movs	r1, r3
   1015c:	2000      	movs	r0, #0
   1015e:	4bf6      	ldr	r3, [pc, #984]	; (10538 <init_eeprom+0x3e8>)
   10160:	4798      	blx	r3
	memcpy(&bootloader_parameter,page_data,sizeof(bootloader_parameter));
   10162:	49f4      	ldr	r1, [pc, #976]	; (10534 <init_eeprom+0x3e4>)
   10164:	4bf5      	ldr	r3, [pc, #980]	; (1053c <init_eeprom+0x3ec>)
   10166:	2218      	movs	r2, #24
   10168:	0018      	movs	r0, r3
   1016a:	4bf5      	ldr	r3, [pc, #980]	; (10540 <init_eeprom+0x3f0>)
   1016c:	4798      	blx	r3
	if (bootloader_parameter.ucharFirst_Time_Write != 85)
   1016e:	4bf3      	ldr	r3, [pc, #972]	; (1053c <init_eeprom+0x3ec>)
   10170:	791b      	ldrb	r3, [r3, #4]
   10172:	2b55      	cmp	r3, #85	; 0x55
   10174:	d029      	beq.n	101ca <init_eeprom+0x7a>
	{
		bootloader_parameter.ulongintDiscard		   = 0;
   10176:	4bf1      	ldr	r3, [pc, #964]	; (1053c <init_eeprom+0x3ec>)
   10178:	2200      	movs	r2, #0
   1017a:	601a      	str	r2, [r3, #0]
		bootloader_parameter.ucharFirst_Time_Write	   = 85;
   1017c:	4bef      	ldr	r3, [pc, #956]	; (1053c <init_eeprom+0x3ec>)
   1017e:	2255      	movs	r2, #85	; 0x55
   10180:	711a      	strb	r2, [r3, #4]
		bootloader_parameter.firmware_download_pending = false;
   10182:	4bee      	ldr	r3, [pc, #952]	; (1053c <init_eeprom+0x3ec>)
   10184:	2200      	movs	r2, #0
   10186:	715a      	strb	r2, [r3, #5]
		bootloader_parameter.firmware_update_process_completed = false;
   10188:	4bec      	ldr	r3, [pc, #944]	; (1053c <init_eeprom+0x3ec>)
   1018a:	2200      	movs	r2, #0
   1018c:	719a      	strb	r2, [r3, #6]
		bootloader_parameter.firmware_update_error_code = 0;
   1018e:	4beb      	ldr	r3, [pc, #940]	; (1053c <init_eeprom+0x3ec>)
   10190:	2200      	movs	r2, #0
   10192:	71da      	strb	r2, [r3, #7]
		
		memset(bootloader_parameter.firmware_updater_mobile_no, '\0', sizeof(bootloader_parameter.firmware_updater_mobile_no));
   10194:	4beb      	ldr	r3, [pc, #940]	; (10544 <init_eeprom+0x3f4>)
   10196:	2210      	movs	r2, #16
   10198:	2100      	movs	r1, #0
   1019a:	0018      	movs	r0, r3
   1019c:	4bea      	ldr	r3, [pc, #936]	; (10548 <init_eeprom+0x3f8>)
   1019e:	4798      	blx	r3
		strcpy(bootloader_parameter.firmware_updater_mobile_no,"0000000000");
   101a0:	4be8      	ldr	r3, [pc, #928]	; (10544 <init_eeprom+0x3f4>)
   101a2:	4aea      	ldr	r2, [pc, #936]	; (1054c <init_eeprom+0x3fc>)
   101a4:	ca03      	ldmia	r2!, {r0, r1}
   101a6:	c303      	stmia	r3!, {r0, r1}
   101a8:	8811      	ldrh	r1, [r2, #0]
   101aa:	8019      	strh	r1, [r3, #0]
   101ac:	7892      	ldrb	r2, [r2, #2]
   101ae:	709a      	strb	r2, [r3, #2]
		
		memcpy(page_data,&bootloader_parameter,sizeof(bootloader_parameter));
   101b0:	49e2      	ldr	r1, [pc, #904]	; (1053c <init_eeprom+0x3ec>)
   101b2:	4be0      	ldr	r3, [pc, #896]	; (10534 <init_eeprom+0x3e4>)
   101b4:	2218      	movs	r2, #24
   101b6:	0018      	movs	r0, r3
   101b8:	4be1      	ldr	r3, [pc, #900]	; (10540 <init_eeprom+0x3f0>)
   101ba:	4798      	blx	r3
		eeprom_emulator_write_page(BOOTLOADER_PARAMETER_PAGE, page_data);
   101bc:	4bdd      	ldr	r3, [pc, #884]	; (10534 <init_eeprom+0x3e4>)
   101be:	0019      	movs	r1, r3
   101c0:	2000      	movs	r0, #0
   101c2:	4be3      	ldr	r3, [pc, #908]	; (10550 <init_eeprom+0x400>)
   101c4:	4798      	blx	r3
		eeprom_emulator_commit_page_buffer();
   101c6:	4be3      	ldr	r3, [pc, #908]	; (10554 <init_eeprom+0x404>)
   101c8:	4798      	blx	r3
	}
	
	eeprom_emulator_read_page(FTP_PATH_PARAMETER_PAGE, page_data);
   101ca:	4bda      	ldr	r3, [pc, #872]	; (10534 <init_eeprom+0x3e4>)
   101cc:	0019      	movs	r1, r3
   101ce:	2001      	movs	r0, #1
   101d0:	4bd9      	ldr	r3, [pc, #868]	; (10538 <init_eeprom+0x3e8>)
   101d2:	4798      	blx	r3
	memcpy(&ftp_path_parameter,page_data,sizeof(ftp_path_parameter));
   101d4:	49d7      	ldr	r1, [pc, #860]	; (10534 <init_eeprom+0x3e4>)
   101d6:	4be0      	ldr	r3, [pc, #896]	; (10558 <init_eeprom+0x408>)
   101d8:	2238      	movs	r2, #56	; 0x38
   101da:	0018      	movs	r0, r3
   101dc:	4bd8      	ldr	r3, [pc, #864]	; (10540 <init_eeprom+0x3f0>)
   101de:	4798      	blx	r3
	if (ftp_path_parameter.ucharFirst_Time_Write !=85)
   101e0:	4bdd      	ldr	r3, [pc, #884]	; (10558 <init_eeprom+0x408>)
   101e2:	791b      	ldrb	r3, [r3, #4]
   101e4:	2b55      	cmp	r3, #85	; 0x55
   101e6:	d02e      	beq.n	10246 <init_eeprom+0xf6>
	{
		ftp_path_parameter.ulongintDiscard			   = 0;
   101e8:	4bdb      	ldr	r3, [pc, #876]	; (10558 <init_eeprom+0x408>)
   101ea:	2200      	movs	r2, #0
   101ec:	601a      	str	r2, [r3, #0]
		ftp_path_parameter.ucharFirst_Time_Write	   = 85;
   101ee:	4bda      	ldr	r3, [pc, #872]	; (10558 <init_eeprom+0x408>)
   101f0:	2255      	movs	r2, #85	; 0x55
   101f2:	711a      	strb	r2, [r3, #4]
		
		memset(ftp_path_parameter.ftp_address, '\0', sizeof(ftp_path_parameter.ftp_address));
   101f4:	4bd9      	ldr	r3, [pc, #868]	; (1055c <init_eeprom+0x40c>)
   101f6:	221e      	movs	r2, #30
   101f8:	2100      	movs	r1, #0
   101fa:	0018      	movs	r0, r3
   101fc:	4bd2      	ldr	r3, [pc, #840]	; (10548 <init_eeprom+0x3f8>)
   101fe:	4798      	blx	r3
		strcpy(ftp_path_parameter.ftp_address,"ftp.drivehq.com");
   10200:	4ad6      	ldr	r2, [pc, #856]	; (1055c <init_eeprom+0x40c>)
   10202:	4bd7      	ldr	r3, [pc, #860]	; (10560 <init_eeprom+0x410>)
   10204:	0010      	movs	r0, r2
   10206:	0019      	movs	r1, r3
   10208:	2310      	movs	r3, #16
   1020a:	001a      	movs	r2, r3
   1020c:	4bcc      	ldr	r3, [pc, #816]	; (10540 <init_eeprom+0x3f0>)
   1020e:	4798      	blx	r3
		
		memset(ftp_path_parameter.ftp_path, '\0', sizeof(ftp_path_parameter.ftp_path));
   10210:	4bd4      	ldr	r3, [pc, #848]	; (10564 <init_eeprom+0x414>)
   10212:	2214      	movs	r2, #20
   10214:	2100      	movs	r1, #0
   10216:	0018      	movs	r0, r3
   10218:	4bcb      	ldr	r3, [pc, #812]	; (10548 <init_eeprom+0x3f8>)
   1021a:	4798      	blx	r3
		strcpy(ftp_path_parameter.ftp_path,"/firmware/");
   1021c:	4ad1      	ldr	r2, [pc, #836]	; (10564 <init_eeprom+0x414>)
   1021e:	4bd2      	ldr	r3, [pc, #840]	; (10568 <init_eeprom+0x418>)
   10220:	0010      	movs	r0, r2
   10222:	0019      	movs	r1, r3
   10224:	230b      	movs	r3, #11
   10226:	001a      	movs	r2, r3
   10228:	4bc5      	ldr	r3, [pc, #788]	; (10540 <init_eeprom+0x3f0>)
   1022a:	4798      	blx	r3
		
		memcpy(page_data,&ftp_path_parameter,sizeof(ftp_path_parameter));
   1022c:	49ca      	ldr	r1, [pc, #808]	; (10558 <init_eeprom+0x408>)
   1022e:	4bc1      	ldr	r3, [pc, #772]	; (10534 <init_eeprom+0x3e4>)
   10230:	2238      	movs	r2, #56	; 0x38
   10232:	0018      	movs	r0, r3
   10234:	4bc2      	ldr	r3, [pc, #776]	; (10540 <init_eeprom+0x3f0>)
   10236:	4798      	blx	r3
		eeprom_emulator_write_page(FTP_PATH_PARAMETER_PAGE, page_data);
   10238:	4bbe      	ldr	r3, [pc, #760]	; (10534 <init_eeprom+0x3e4>)
   1023a:	0019      	movs	r1, r3
   1023c:	2001      	movs	r0, #1
   1023e:	4bc4      	ldr	r3, [pc, #784]	; (10550 <init_eeprom+0x400>)
   10240:	4798      	blx	r3
		eeprom_emulator_commit_page_buffer();
   10242:	4bc4      	ldr	r3, [pc, #784]	; (10554 <init_eeprom+0x404>)
   10244:	4798      	blx	r3
	}
	
	eeprom_emulator_read_page(FTP_USER_PARAMETER_PAGE, page_data);
   10246:	4bbb      	ldr	r3, [pc, #748]	; (10534 <init_eeprom+0x3e4>)
   10248:	0019      	movs	r1, r3
   1024a:	2002      	movs	r0, #2
   1024c:	4bba      	ldr	r3, [pc, #744]	; (10538 <init_eeprom+0x3e8>)
   1024e:	4798      	blx	r3
	memcpy(&ftp_user_parameter,page_data,sizeof(ftp_user_parameter));
   10250:	49b8      	ldr	r1, [pc, #736]	; (10534 <init_eeprom+0x3e4>)
   10252:	4bc6      	ldr	r3, [pc, #792]	; (1056c <init_eeprom+0x41c>)
   10254:	2238      	movs	r2, #56	; 0x38
   10256:	0018      	movs	r0, r3
   10258:	4bb9      	ldr	r3, [pc, #740]	; (10540 <init_eeprom+0x3f0>)
   1025a:	4798      	blx	r3
	if (ftp_user_parameter.ucharFirst_Time_Write !=85)
   1025c:	4bc3      	ldr	r3, [pc, #780]	; (1056c <init_eeprom+0x41c>)
   1025e:	791b      	ldrb	r3, [r3, #4]
   10260:	2b55      	cmp	r3, #85	; 0x55
   10262:	d03c      	beq.n	102de <init_eeprom+0x18e>
	{
		ftp_user_parameter.ulongintDiscard			   = 0;
   10264:	4bc1      	ldr	r3, [pc, #772]	; (1056c <init_eeprom+0x41c>)
   10266:	2200      	movs	r2, #0
   10268:	601a      	str	r2, [r3, #0]
		ftp_user_parameter.ucharFirst_Time_Write	   = 85;
   1026a:	4bc0      	ldr	r3, [pc, #768]	; (1056c <init_eeprom+0x41c>)
   1026c:	2255      	movs	r2, #85	; 0x55
   1026e:	711a      	strb	r2, [r3, #4]
		
		memset(ftp_user_parameter.ftp_username, '\0', sizeof(ftp_user_parameter.ftp_username));
   10270:	4bbf      	ldr	r3, [pc, #764]	; (10570 <init_eeprom+0x420>)
   10272:	2210      	movs	r2, #16
   10274:	2100      	movs	r1, #0
   10276:	0018      	movs	r0, r3
   10278:	4bb3      	ldr	r3, [pc, #716]	; (10548 <init_eeprom+0x3f8>)
   1027a:	4798      	blx	r3
		strcpy(ftp_user_parameter.ftp_username,"rahulnrathodkcl");
   1027c:	4bbb      	ldr	r3, [pc, #748]	; (1056c <init_eeprom+0x41c>)
   1027e:	2205      	movs	r2, #5
   10280:	49bc      	ldr	r1, [pc, #752]	; (10574 <init_eeprom+0x424>)
   10282:	189b      	adds	r3, r3, r2
   10284:	2210      	movs	r2, #16
   10286:	0018      	movs	r0, r3
   10288:	4bad      	ldr	r3, [pc, #692]	; (10540 <init_eeprom+0x3f0>)
   1028a:	4798      	blx	r3
		
		memset(ftp_user_parameter.ftp_filename, '\0', sizeof(ftp_user_parameter.ftp_password));
   1028c:	4bba      	ldr	r3, [pc, #744]	; (10578 <init_eeprom+0x428>)
   1028e:	2210      	movs	r2, #16
   10290:	2100      	movs	r1, #0
   10292:	0018      	movs	r0, r3
   10294:	4bac      	ldr	r3, [pc, #688]	; (10548 <init_eeprom+0x3f8>)
   10296:	4798      	blx	r3
		strcpy(ftp_user_parameter.ftp_password,"123456789");
   10298:	4ab8      	ldr	r2, [pc, #736]	; (1057c <init_eeprom+0x42c>)
   1029a:	4bb9      	ldr	r3, [pc, #740]	; (10580 <init_eeprom+0x430>)
   1029c:	0010      	movs	r0, r2
   1029e:	0019      	movs	r1, r3
   102a0:	230a      	movs	r3, #10
   102a2:	001a      	movs	r2, r3
   102a4:	4ba6      	ldr	r3, [pc, #664]	; (10540 <init_eeprom+0x3f0>)
   102a6:	4798      	blx	r3
		
		memset(ftp_user_parameter.ftp_filename, '\0', sizeof(ftp_user_parameter.ftp_filename));
   102a8:	4bb3      	ldr	r3, [pc, #716]	; (10578 <init_eeprom+0x428>)
   102aa:	2210      	movs	r2, #16
   102ac:	2100      	movs	r1, #0
   102ae:	0018      	movs	r0, r3
   102b0:	4ba5      	ldr	r3, [pc, #660]	; (10548 <init_eeprom+0x3f8>)
   102b2:	4798      	blx	r3
		strcpy(ftp_user_parameter.ftp_filename,"firmware.bin");
   102b4:	4ab0      	ldr	r2, [pc, #704]	; (10578 <init_eeprom+0x428>)
   102b6:	4bb3      	ldr	r3, [pc, #716]	; (10584 <init_eeprom+0x434>)
   102b8:	0010      	movs	r0, r2
   102ba:	0019      	movs	r1, r3
   102bc:	230d      	movs	r3, #13
   102be:	001a      	movs	r2, r3
   102c0:	4b9f      	ldr	r3, [pc, #636]	; (10540 <init_eeprom+0x3f0>)
   102c2:	4798      	blx	r3
		
		memcpy(page_data,&ftp_user_parameter,sizeof(ftp_user_parameter));
   102c4:	49a9      	ldr	r1, [pc, #676]	; (1056c <init_eeprom+0x41c>)
   102c6:	4b9b      	ldr	r3, [pc, #620]	; (10534 <init_eeprom+0x3e4>)
   102c8:	2238      	movs	r2, #56	; 0x38
   102ca:	0018      	movs	r0, r3
   102cc:	4b9c      	ldr	r3, [pc, #624]	; (10540 <init_eeprom+0x3f0>)
   102ce:	4798      	blx	r3
		eeprom_emulator_write_page(FTP_USER_PARAMETER_PAGE, page_data);
   102d0:	4b98      	ldr	r3, [pc, #608]	; (10534 <init_eeprom+0x3e4>)
   102d2:	0019      	movs	r1, r3
   102d4:	2002      	movs	r0, #2
   102d6:	4b9e      	ldr	r3, [pc, #632]	; (10550 <init_eeprom+0x400>)
   102d8:	4798      	blx	r3
		eeprom_emulator_commit_page_buffer();
   102da:	4b9e      	ldr	r3, [pc, #632]	; (10554 <init_eeprom+0x404>)
   102dc:	4798      	blx	r3
	}
	//////////////////////////////////////////////////////////////////////////
	eeprom_emulator_read_page(USER_COUNTER_PAGE, page_data);
   102de:	4b95      	ldr	r3, [pc, #596]	; (10534 <init_eeprom+0x3e4>)
   102e0:	0019      	movs	r1, r3
   102e2:	2008      	movs	r0, #8
   102e4:	4b94      	ldr	r3, [pc, #592]	; (10538 <init_eeprom+0x3e8>)
   102e6:	4798      	blx	r3
	memcpy(&user_count_struct,page_data,sizeof(user_count_struct));
   102e8:	4aa7      	ldr	r2, [pc, #668]	; (10588 <init_eeprom+0x438>)
   102ea:	4b92      	ldr	r3, [pc, #584]	; (10534 <init_eeprom+0x3e4>)
   102ec:	0010      	movs	r0, r2
   102ee:	0019      	movs	r1, r3
   102f0:	2308      	movs	r3, #8
   102f2:	001a      	movs	r2, r3
   102f4:	4b92      	ldr	r3, [pc, #584]	; (10540 <init_eeprom+0x3f0>)
   102f6:	4798      	blx	r3
	if (user_count_struct.u8tfirst_time_write_ee != 85)
   102f8:	4ba3      	ldr	r3, [pc, #652]	; (10588 <init_eeprom+0x438>)
   102fa:	781b      	ldrb	r3, [r3, #0]
   102fc:	2b55      	cmp	r3, #85	; 0x55
   102fe:	d01d      	beq.n	1033c <init_eeprom+0x1ec>
	{
		user_count_struct.u8tfirst_time_write_ee = 85;
   10300:	4ba1      	ldr	r3, [pc, #644]	; (10588 <init_eeprom+0x438>)
   10302:	2255      	movs	r2, #85	; 0x55
   10304:	701a      	strb	r2, [r3, #0]
		user_count_struct.total_user_no_count    = 15;
   10306:	4ba0      	ldr	r3, [pc, #640]	; (10588 <init_eeprom+0x438>)
   10308:	220f      	movs	r2, #15
   1030a:	705a      	strb	r2, [r3, #1]
		user_count_struct.current_user_no_count  = 0;
   1030c:	4b9e      	ldr	r3, [pc, #632]	; (10588 <init_eeprom+0x438>)
   1030e:	2200      	movs	r2, #0
   10310:	709a      	strb	r2, [r3, #2]
		user_count_struct.primaryNumberIndex = 0;
   10312:	4b9d      	ldr	r3, [pc, #628]	; (10588 <init_eeprom+0x438>)
   10314:	2200      	movs	r2, #0
   10316:	70da      	strb	r2, [r3, #3]
		user_count_struct.secondaryNumberIndex = 1;
   10318:	4b9b      	ldr	r3, [pc, #620]	; (10588 <init_eeprom+0x438>)
   1031a:	2201      	movs	r2, #1
   1031c:	711a      	strb	r2, [r3, #4]
		
		
		memcpy(page_data,&user_count_struct,sizeof(user_count_struct));
   1031e:	4a85      	ldr	r2, [pc, #532]	; (10534 <init_eeprom+0x3e4>)
   10320:	4b99      	ldr	r3, [pc, #612]	; (10588 <init_eeprom+0x438>)
   10322:	0010      	movs	r0, r2
   10324:	0019      	movs	r1, r3
   10326:	2308      	movs	r3, #8
   10328:	001a      	movs	r2, r3
   1032a:	4b85      	ldr	r3, [pc, #532]	; (10540 <init_eeprom+0x3f0>)
   1032c:	4798      	blx	r3
		eeprom_emulator_write_page(USER_COUNTER_PAGE, page_data);
   1032e:	4b81      	ldr	r3, [pc, #516]	; (10534 <init_eeprom+0x3e4>)
   10330:	0019      	movs	r1, r3
   10332:	2008      	movs	r0, #8
   10334:	4b86      	ldr	r3, [pc, #536]	; (10550 <init_eeprom+0x400>)
   10336:	4798      	blx	r3
		eeprom_emulator_commit_page_buffer();
   10338:	4b86      	ldr	r3, [pc, #536]	; (10554 <init_eeprom+0x404>)
   1033a:	4798      	blx	r3
	}
	//////////////////////////////////////////////////////////////////////////
	config_mobile_no_ee(ADMIN_1_MOBILE_NUMBER_PAGE,"7041196959");
   1033c:	4b93      	ldr	r3, [pc, #588]	; (1058c <init_eeprom+0x43c>)
   1033e:	0019      	movs	r1, r3
   10340:	2003      	movs	r0, #3
   10342:	4b93      	ldr	r3, [pc, #588]	; (10590 <init_eeprom+0x440>)
   10344:	4798      	blx	r3
	config_mobile_no_ee(ADMIN_2_MOBILE_NUMBER_PAGE,"7698439201");
   10346:	4b93      	ldr	r3, [pc, #588]	; (10594 <init_eeprom+0x444>)
   10348:	0019      	movs	r1, r3
   1034a:	2004      	movs	r0, #4
   1034c:	4b90      	ldr	r3, [pc, #576]	; (10590 <init_eeprom+0x440>)
   1034e:	4798      	blx	r3
	config_mobile_no_ee(ADMIN_3_MOBILE_NUMBER_PAGE,"7383614214");
   10350:	4b91      	ldr	r3, [pc, #580]	; (10598 <init_eeprom+0x448>)
   10352:	0019      	movs	r1, r3
   10354:	2005      	movs	r0, #5
   10356:	4b8e      	ldr	r3, [pc, #568]	; (10590 <init_eeprom+0x440>)
   10358:	4798      	blx	r3
	config_mobile_no_ee(ADMIN_4_MOBILE_NUMBER_PAGE,"7383622678");
   1035a:	4b90      	ldr	r3, [pc, #576]	; (1059c <init_eeprom+0x44c>)
   1035c:	0019      	movs	r1, r3
   1035e:	2006      	movs	r0, #6
   10360:	4b8b      	ldr	r3, [pc, #556]	; (10590 <init_eeprom+0x440>)
   10362:	4798      	blx	r3
	//config_mobile_no_ee(ADMIN_5_MOBILE_NUMBER_PAGE,"9586135978");
	config_mobile_no_ee(ADMIN_5_MOBILE_NUMBER_PAGE,"9586135978");
   10364:	4b8e      	ldr	r3, [pc, #568]	; (105a0 <init_eeprom+0x450>)
   10366:	0019      	movs	r1, r3
   10368:	2007      	movs	r0, #7
   1036a:	4b89      	ldr	r3, [pc, #548]	; (10590 <init_eeprom+0x440>)
   1036c:	4798      	blx	r3
	//////////////////////////////////////////////////////////////////////////
	config_mobile_no_ee(USER_1_MOBILE_NUMBER_PAGE ,"0000000000");
   1036e:	4b77      	ldr	r3, [pc, #476]	; (1054c <init_eeprom+0x3fc>)
   10370:	0019      	movs	r1, r3
   10372:	2009      	movs	r0, #9
   10374:	4b86      	ldr	r3, [pc, #536]	; (10590 <init_eeprom+0x440>)
   10376:	4798      	blx	r3
	config_mobile_no_ee(USER_2_MOBILE_NUMBER_PAGE ,"0000000000");
   10378:	4b74      	ldr	r3, [pc, #464]	; (1054c <init_eeprom+0x3fc>)
   1037a:	0019      	movs	r1, r3
   1037c:	200a      	movs	r0, #10
   1037e:	4b84      	ldr	r3, [pc, #528]	; (10590 <init_eeprom+0x440>)
   10380:	4798      	blx	r3
	config_mobile_no_ee(USER_3_MOBILE_NUMBER_PAGE ,"0000000000");
   10382:	4b72      	ldr	r3, [pc, #456]	; (1054c <init_eeprom+0x3fc>)
   10384:	0019      	movs	r1, r3
   10386:	200b      	movs	r0, #11
   10388:	4b81      	ldr	r3, [pc, #516]	; (10590 <init_eeprom+0x440>)
   1038a:	4798      	blx	r3
	config_mobile_no_ee(USER_4_MOBILE_NUMBER_PAGE ,"0000000000");
   1038c:	4b6f      	ldr	r3, [pc, #444]	; (1054c <init_eeprom+0x3fc>)
   1038e:	0019      	movs	r1, r3
   10390:	200c      	movs	r0, #12
   10392:	4b7f      	ldr	r3, [pc, #508]	; (10590 <init_eeprom+0x440>)
   10394:	4798      	blx	r3
	config_mobile_no_ee(USER_5_MOBILE_NUMBER_PAGE ,"0000000000");
   10396:	4b6d      	ldr	r3, [pc, #436]	; (1054c <init_eeprom+0x3fc>)
   10398:	0019      	movs	r1, r3
   1039a:	200d      	movs	r0, #13
   1039c:	4b7c      	ldr	r3, [pc, #496]	; (10590 <init_eeprom+0x440>)
   1039e:	4798      	blx	r3
	config_mobile_no_ee(USER_6_MOBILE_NUMBER_PAGE ,"0000000000");
   103a0:	4b6a      	ldr	r3, [pc, #424]	; (1054c <init_eeprom+0x3fc>)
   103a2:	0019      	movs	r1, r3
   103a4:	200e      	movs	r0, #14
   103a6:	4b7a      	ldr	r3, [pc, #488]	; (10590 <init_eeprom+0x440>)
   103a8:	4798      	blx	r3
	config_mobile_no_ee(USER_7_MOBILE_NUMBER_PAGE ,"0000000000");
   103aa:	4b68      	ldr	r3, [pc, #416]	; (1054c <init_eeprom+0x3fc>)
   103ac:	0019      	movs	r1, r3
   103ae:	200f      	movs	r0, #15
   103b0:	4b77      	ldr	r3, [pc, #476]	; (10590 <init_eeprom+0x440>)
   103b2:	4798      	blx	r3
	config_mobile_no_ee(USER_8_MOBILE_NUMBER_PAGE ,"0000000000");
   103b4:	4b65      	ldr	r3, [pc, #404]	; (1054c <init_eeprom+0x3fc>)
   103b6:	0019      	movs	r1, r3
   103b8:	2010      	movs	r0, #16
   103ba:	4b75      	ldr	r3, [pc, #468]	; (10590 <init_eeprom+0x440>)
   103bc:	4798      	blx	r3
	config_mobile_no_ee(USER_9_MOBILE_NUMBER_PAGE ,"0000000000");
   103be:	4b63      	ldr	r3, [pc, #396]	; (1054c <init_eeprom+0x3fc>)
   103c0:	0019      	movs	r1, r3
   103c2:	2011      	movs	r0, #17
   103c4:	4b72      	ldr	r3, [pc, #456]	; (10590 <init_eeprom+0x440>)
   103c6:	4798      	blx	r3
	config_mobile_no_ee(USER_10_MOBILE_NUMBER_PAGE,"0000000000");
   103c8:	4b60      	ldr	r3, [pc, #384]	; (1054c <init_eeprom+0x3fc>)
   103ca:	0019      	movs	r1, r3
   103cc:	2012      	movs	r0, #18
   103ce:	4b70      	ldr	r3, [pc, #448]	; (10590 <init_eeprom+0x440>)
   103d0:	4798      	blx	r3
	config_mobile_no_ee(USER_11_MOBILE_NUMBER_PAGE,"0000000000");
   103d2:	4b5e      	ldr	r3, [pc, #376]	; (1054c <init_eeprom+0x3fc>)
   103d4:	0019      	movs	r1, r3
   103d6:	2013      	movs	r0, #19
   103d8:	4b6d      	ldr	r3, [pc, #436]	; (10590 <init_eeprom+0x440>)
   103da:	4798      	blx	r3
	config_mobile_no_ee(USER_12_MOBILE_NUMBER_PAGE,"0000000000");
   103dc:	4b5b      	ldr	r3, [pc, #364]	; (1054c <init_eeprom+0x3fc>)
   103de:	0019      	movs	r1, r3
   103e0:	2014      	movs	r0, #20
   103e2:	4b6b      	ldr	r3, [pc, #428]	; (10590 <init_eeprom+0x440>)
   103e4:	4798      	blx	r3
	config_mobile_no_ee(USER_13_MOBILE_NUMBER_PAGE,"0000000000");
   103e6:	4b59      	ldr	r3, [pc, #356]	; (1054c <init_eeprom+0x3fc>)
   103e8:	0019      	movs	r1, r3
   103ea:	2015      	movs	r0, #21
   103ec:	4b68      	ldr	r3, [pc, #416]	; (10590 <init_eeprom+0x440>)
   103ee:	4798      	blx	r3
	config_mobile_no_ee(USER_14_MOBILE_NUMBER_PAGE,"0000000000");
   103f0:	4b56      	ldr	r3, [pc, #344]	; (1054c <init_eeprom+0x3fc>)
   103f2:	0019      	movs	r1, r3
   103f4:	2016      	movs	r0, #22
   103f6:	4b66      	ldr	r3, [pc, #408]	; (10590 <init_eeprom+0x440>)
   103f8:	4798      	blx	r3
	config_mobile_no_ee(USER_15_MOBILE_NUMBER_PAGE,"0000000000");
   103fa:	4b54      	ldr	r3, [pc, #336]	; (1054c <init_eeprom+0x3fc>)
   103fc:	0019      	movs	r1, r3
   103fe:	2017      	movs	r0, #23
   10400:	4b63      	ldr	r3, [pc, #396]	; (10590 <init_eeprom+0x440>)
   10402:	4798      	blx	r3
	
	//////////////////////////////////////////////////////////////////////////
	eeprom_emulator_read_page(ALTARNATE_NUMBERS_PAGE, page_data);
   10404:	4b4b      	ldr	r3, [pc, #300]	; (10534 <init_eeprom+0x3e4>)
   10406:	0019      	movs	r1, r3
   10408:	2018      	movs	r0, #24
   1040a:	4b4b      	ldr	r3, [pc, #300]	; (10538 <init_eeprom+0x3e8>)
   1040c:	4798      	blx	r3
	memcpy(&alternateNumber_struct,page_data,sizeof(alternateNumber_struct));
   1040e:	4a65      	ldr	r2, [pc, #404]	; (105a4 <init_eeprom+0x454>)
   10410:	4b48      	ldr	r3, [pc, #288]	; (10534 <init_eeprom+0x3e4>)
   10412:	0010      	movs	r0, r2
   10414:	0019      	movs	r1, r3
   10416:	2318      	movs	r3, #24
   10418:	001a      	movs	r2, r3
   1041a:	4b49      	ldr	r3, [pc, #292]	; (10540 <init_eeprom+0x3f0>)
   1041c:	4798      	blx	r3
	if (alternateNumber_struct.u8tfirst_time_write_ee != 85)
   1041e:	4b61      	ldr	r3, [pc, #388]	; (105a4 <init_eeprom+0x454>)
   10420:	781b      	ldrb	r3, [r3, #0]
   10422:	2b55      	cmp	r3, #85	; 0x55
   10424:	d025      	beq.n	10472 <init_eeprom+0x322>
	{
		alternateNumber_struct.u8tfirst_time_write_ee = 85;
   10426:	4b5f      	ldr	r3, [pc, #380]	; (105a4 <init_eeprom+0x454>)
   10428:	2255      	movs	r2, #85	; 0x55
   1042a:	701a      	strb	r2, [r3, #0]
		
		alternateNumber_struct.alterNumberPresent = false;
   1042c:	4b5d      	ldr	r3, [pc, #372]	; (105a4 <init_eeprom+0x454>)
   1042e:	2200      	movs	r2, #0
   10430:	709a      	strb	r2, [r3, #2]
		alternateNumber_struct.alterNumberSetting = false;
   10432:	4b5c      	ldr	r3, [pc, #368]	; (105a4 <init_eeprom+0x454>)
   10434:	2200      	movs	r2, #0
   10436:	705a      	strb	r2, [r3, #1]
		
		memset(alternateNumber_struct.alternateNumber_ee, '\0', sizeof(alternateNumber_struct.alternateNumber_ee));
   10438:	4b5b      	ldr	r3, [pc, #364]	; (105a8 <init_eeprom+0x458>)
   1043a:	2214      	movs	r2, #20
   1043c:	2100      	movs	r1, #0
   1043e:	0018      	movs	r0, r3
   10440:	4b41      	ldr	r3, [pc, #260]	; (10548 <init_eeprom+0x3f8>)
   10442:	4798      	blx	r3
		strcpy(alternateNumber_struct.alternateNumber_ee,"0000000000");
   10444:	4a58      	ldr	r2, [pc, #352]	; (105a8 <init_eeprom+0x458>)
   10446:	4b41      	ldr	r3, [pc, #260]	; (1054c <init_eeprom+0x3fc>)
   10448:	0010      	movs	r0, r2
   1044a:	0019      	movs	r1, r3
   1044c:	230b      	movs	r3, #11
   1044e:	001a      	movs	r2, r3
   10450:	4b3b      	ldr	r3, [pc, #236]	; (10540 <init_eeprom+0x3f0>)
   10452:	4798      	blx	r3
		
		memcpy(page_data,&alternateNumber_struct,sizeof(alternateNumber_struct));
   10454:	4a37      	ldr	r2, [pc, #220]	; (10534 <init_eeprom+0x3e4>)
   10456:	4b53      	ldr	r3, [pc, #332]	; (105a4 <init_eeprom+0x454>)
   10458:	0010      	movs	r0, r2
   1045a:	0019      	movs	r1, r3
   1045c:	2318      	movs	r3, #24
   1045e:	001a      	movs	r2, r3
   10460:	4b37      	ldr	r3, [pc, #220]	; (10540 <init_eeprom+0x3f0>)
   10462:	4798      	blx	r3
		eeprom_emulator_write_page(ALTARNATE_NUMBERS_PAGE, page_data);
   10464:	4b33      	ldr	r3, [pc, #204]	; (10534 <init_eeprom+0x3e4>)
   10466:	0019      	movs	r1, r3
   10468:	2018      	movs	r0, #24
   1046a:	4b39      	ldr	r3, [pc, #228]	; (10550 <init_eeprom+0x400>)
   1046c:	4798      	blx	r3
		eeprom_emulator_commit_page_buffer();
   1046e:	4b39      	ldr	r3, [pc, #228]	; (10554 <init_eeprom+0x404>)
   10470:	4798      	blx	r3
	}
	//////////////////////////////////////////////////////////////////////////
	eeprom_emulator_read_page(M2M_NUMBERS_PAGE, page_data);
   10472:	4b30      	ldr	r3, [pc, #192]	; (10534 <init_eeprom+0x3e4>)
   10474:	0019      	movs	r1, r3
   10476:	2019      	movs	r0, #25
   10478:	4b2f      	ldr	r3, [pc, #188]	; (10538 <init_eeprom+0x3e8>)
   1047a:	4798      	blx	r3
	memcpy(&m2m_Numbers_struct,page_data,sizeof(m2m_Numbers_struct));
   1047c:	4a4b      	ldr	r2, [pc, #300]	; (105ac <init_eeprom+0x45c>)
   1047e:	4b2d      	ldr	r3, [pc, #180]	; (10534 <init_eeprom+0x3e4>)
   10480:	0010      	movs	r0, r2
   10482:	0019      	movs	r1, r3
   10484:	2330      	movs	r3, #48	; 0x30
   10486:	001a      	movs	r2, r3
   10488:	4b2d      	ldr	r3, [pc, #180]	; (10540 <init_eeprom+0x3f0>)
   1048a:	4798      	blx	r3
	if (m2m_Numbers_struct.u8tfirst_time_write_ee != 85)
   1048c:	4b47      	ldr	r3, [pc, #284]	; (105ac <init_eeprom+0x45c>)
   1048e:	781b      	ldrb	r3, [r3, #0]
   10490:	2b55      	cmp	r3, #85	; 0x55
   10492:	d03c      	beq.n	1050e <init_eeprom+0x3be>
	{
		m2m_Numbers_struct.u8tfirst_time_write_ee = 85;
   10494:	4b45      	ldr	r3, [pc, #276]	; (105ac <init_eeprom+0x45c>)
   10496:	2255      	movs	r2, #85	; 0x55
   10498:	701a      	strb	r2, [r3, #0]
		
		memset(m2m_Numbers_struct.m2mNumber_ee, '\0', sizeof(m2m_Numbers_struct.m2mNumber_ee));
   1049a:	4b45      	ldr	r3, [pc, #276]	; (105b0 <init_eeprom+0x460>)
   1049c:	2214      	movs	r2, #20
   1049e:	2100      	movs	r1, #0
   104a0:	0018      	movs	r0, r3
   104a2:	4b29      	ldr	r3, [pc, #164]	; (10548 <init_eeprom+0x3f8>)
   104a4:	4798      	blx	r3
		strcpy(m2m_Numbers_struct.m2mNumber_ee,"0000000000");
   104a6:	4a42      	ldr	r2, [pc, #264]	; (105b0 <init_eeprom+0x460>)
   104a8:	4b28      	ldr	r3, [pc, #160]	; (1054c <init_eeprom+0x3fc>)
   104aa:	0010      	movs	r0, r2
   104ac:	0019      	movs	r1, r3
   104ae:	230b      	movs	r3, #11
   104b0:	001a      	movs	r2, r3
   104b2:	4b23      	ldr	r3, [pc, #140]	; (10540 <init_eeprom+0x3f0>)
   104b4:	4798      	blx	r3
		
		memset(m2m_Numbers_struct.m2mremoteNumber_ee, '\0', sizeof(m2m_Numbers_struct.m2mremoteNumber_ee));
   104b6:	4b3f      	ldr	r3, [pc, #252]	; (105b4 <init_eeprom+0x464>)
   104b8:	2214      	movs	r2, #20
   104ba:	2100      	movs	r1, #0
   104bc:	0018      	movs	r0, r3
   104be:	4b22      	ldr	r3, [pc, #136]	; (10548 <init_eeprom+0x3f8>)
   104c0:	4798      	blx	r3
		strcpy(m2m_Numbers_struct.m2mremoteNumber_ee,"0000000000");
   104c2:	4a3c      	ldr	r2, [pc, #240]	; (105b4 <init_eeprom+0x464>)
   104c4:	4b21      	ldr	r3, [pc, #132]	; (1054c <init_eeprom+0x3fc>)
   104c6:	0010      	movs	r0, r2
   104c8:	0019      	movs	r1, r3
   104ca:	230b      	movs	r3, #11
   104cc:	001a      	movs	r2, r3
   104ce:	4b1c      	ldr	r3, [pc, #112]	; (10540 <init_eeprom+0x3f0>)
   104d0:	4798      	blx	r3
		
		m2m_Numbers_struct.m2mPresent			= false;
   104d2:	4b36      	ldr	r3, [pc, #216]	; (105ac <init_eeprom+0x45c>)
   104d4:	2200      	movs	r2, #0
   104d6:	705a      	strb	r2, [r3, #1]
		m2m_Numbers_struct.m2mVerified			= false;
   104d8:	4b34      	ldr	r3, [pc, #208]	; (105ac <init_eeprom+0x45c>)
   104da:	2200      	movs	r2, #0
   104dc:	709a      	strb	r2, [r3, #2]
		
		m2m_Numbers_struct.m2mRemotePresent		= false;
   104de:	4b33      	ldr	r3, [pc, #204]	; (105ac <init_eeprom+0x45c>)
   104e0:	2200      	movs	r2, #0
   104e2:	70da      	strb	r2, [r3, #3]
		m2m_Numbers_struct.m2mRemoteVerified	= false;
   104e4:	4b31      	ldr	r3, [pc, #196]	; (105ac <init_eeprom+0x45c>)
   104e6:	2200      	movs	r2, #0
   104e8:	711a      	strb	r2, [r3, #4]
		
		m2m_Numbers_struct.m2mSetting			= false;
   104ea:	4b30      	ldr	r3, [pc, #192]	; (105ac <init_eeprom+0x45c>)
   104ec:	2200      	movs	r2, #0
   104ee:	715a      	strb	r2, [r3, #5]
		
		memcpy(page_data,&m2m_Numbers_struct,sizeof(m2m_Numbers_struct));
   104f0:	4a10      	ldr	r2, [pc, #64]	; (10534 <init_eeprom+0x3e4>)
   104f2:	4b2e      	ldr	r3, [pc, #184]	; (105ac <init_eeprom+0x45c>)
   104f4:	0010      	movs	r0, r2
   104f6:	0019      	movs	r1, r3
   104f8:	2330      	movs	r3, #48	; 0x30
   104fa:	001a      	movs	r2, r3
   104fc:	4b10      	ldr	r3, [pc, #64]	; (10540 <init_eeprom+0x3f0>)
   104fe:	4798      	blx	r3
		eeprom_emulator_write_page(M2M_NUMBERS_PAGE, page_data);
   10500:	4b0c      	ldr	r3, [pc, #48]	; (10534 <init_eeprom+0x3e4>)
   10502:	0019      	movs	r1, r3
   10504:	2019      	movs	r0, #25
   10506:	4b12      	ldr	r3, [pc, #72]	; (10550 <init_eeprom+0x400>)
   10508:	4798      	blx	r3
		eeprom_emulator_commit_page_buffer();
   1050a:	4b12      	ldr	r3, [pc, #72]	; (10554 <init_eeprom+0x404>)
   1050c:	4798      	blx	r3
	}
	//////////////////////////////////////////////////////////////////////////
	eeprom_emulator_read_page(USER_SETTING_PARAMETERS_PAGE, page_data);
   1050e:	4b09      	ldr	r3, [pc, #36]	; (10534 <init_eeprom+0x3e4>)
   10510:	0019      	movs	r1, r3
   10512:	201a      	movs	r0, #26
   10514:	4b08      	ldr	r3, [pc, #32]	; (10538 <init_eeprom+0x3e8>)
   10516:	4798      	blx	r3
	memcpy(&user_settings_parameter_struct,page_data,sizeof(user_settings_parameter_struct));
   10518:	4906      	ldr	r1, [pc, #24]	; (10534 <init_eeprom+0x3e4>)
   1051a:	4b27      	ldr	r3, [pc, #156]	; (105b8 <init_eeprom+0x468>)
   1051c:	222c      	movs	r2, #44	; 0x2c
   1051e:	0018      	movs	r0, r3
   10520:	4b07      	ldr	r3, [pc, #28]	; (10540 <init_eeprom+0x3f0>)
   10522:	4798      	blx	r3
	if (user_settings_parameter_struct.u8tfirst_time_write_ee != 85)
   10524:	4b24      	ldr	r3, [pc, #144]	; (105b8 <init_eeprom+0x468>)
   10526:	781b      	ldrb	r3, [r3, #0]
   10528:	2b55      	cmp	r3, #85	; 0x55
   1052a:	d100      	bne.n	1052e <init_eeprom+0x3de>
   1052c:	e0a5      	b.n	1067a <init_eeprom+0x52a>
   1052e:	e045      	b.n	105bc <init_eeprom+0x46c>
   10530:	00010115 	.word	0x00010115
   10534:	20000594 	.word	0x20000594
   10538:	000236ed 	.word	0x000236ed
   1053c:	20000608 	.word	0x20000608
   10540:	000289c5 	.word	0x000289c5
   10544:	20000610 	.word	0x20000610
   10548:	000289fb 	.word	0x000289fb
   1054c:	000295fc 	.word	0x000295fc
   10550:	000235e1 	.word	0x000235e1
   10554:	00023789 	.word	0x00023789
   10558:	2000052c 	.word	0x2000052c
   1055c:	20000531 	.word	0x20000531
   10560:	00029608 	.word	0x00029608
   10564:	2000054f 	.word	0x2000054f
   10568:	00029618 	.word	0x00029618
   1056c:	200005d0 	.word	0x200005d0
   10570:	200005d5 	.word	0x200005d5
   10574:	00029624 	.word	0x00029624
   10578:	200005f5 	.word	0x200005f5
   1057c:	200005e5 	.word	0x200005e5
   10580:	00029634 	.word	0x00029634
   10584:	00029640 	.word	0x00029640
   10588:	20000620 	.word	0x20000620
   1058c:	00029650 	.word	0x00029650
   10590:	00010711 	.word	0x00010711
   10594:	0002965c 	.word	0x0002965c
   10598:	00029668 	.word	0x00029668
   1059c:	00029674 	.word	0x00029674
   105a0:	00029680 	.word	0x00029680
   105a4:	20000648 	.word	0x20000648
   105a8:	2000064c 	.word	0x2000064c
   105ac:	20000564 	.word	0x20000564
   105b0:	2000056c 	.word	0x2000056c
   105b4:	20000580 	.word	0x20000580
   105b8:	20000660 	.word	0x20000660
	{
		user_settings_parameter_struct.u8tfirst_time_write_ee		= 85;
   105bc:	4b4d      	ldr	r3, [pc, #308]	; (106f4 <init_eeprom+0x5a4>)
   105be:	2255      	movs	r2, #85	; 0x55
   105c0:	701a      	strb	r2, [r3, #0]
		
		user_settings_parameter_struct.autoStartAddress				= false;
   105c2:	4b4c      	ldr	r3, [pc, #304]	; (106f4 <init_eeprom+0x5a4>)
   105c4:	2200      	movs	r2, #0
   105c6:	705a      	strb	r2, [r3, #1]
		user_settings_parameter_struct.autoStartTimeAddress			= 50;
   105c8:	4b4a      	ldr	r3, [pc, #296]	; (106f4 <init_eeprom+0x5a4>)
   105ca:	2232      	movs	r2, #50	; 0x32
   105cc:	805a      	strh	r2, [r3, #2]
		user_settings_parameter_struct.dndAddress					= DND_OFF;
   105ce:	4b49      	ldr	r3, [pc, #292]	; (106f4 <init_eeprom+0x5a4>)
   105d0:	224f      	movs	r2, #79	; 0x4f
   105d2:	711a      	strb	r2, [r3, #4]
		user_settings_parameter_struct.responseAddress				= 'T';
   105d4:	4b47      	ldr	r3, [pc, #284]	; (106f4 <init_eeprom+0x5a4>)
   105d6:	2254      	movs	r2, #84	; 0x54
   105d8:	715a      	strb	r2, [r3, #5]
		user_settings_parameter_struct.starDeltaTimerAddress		= 2;
   105da:	4b46      	ldr	r3, [pc, #280]	; (106f4 <init_eeprom+0x5a4>)
   105dc:	2202      	movs	r2, #2
   105de:	80da      	strh	r2, [r3, #6]
		//user_settings_parameter_struct.bypassAddress				= false;
		user_settings_parameter_struct.eventStageAddress			= 0;
   105e0:	4b44      	ldr	r3, [pc, #272]	; (106f4 <init_eeprom+0x5a4>)
   105e2:	2200      	movs	r2, #0
   105e4:	721a      	strb	r2, [r3, #8]
		user_settings_parameter_struct.noCallAddress				= false;
   105e6:	4b43      	ldr	r3, [pc, #268]	; (106f4 <init_eeprom+0x5a4>)
   105e8:	2200      	movs	r2, #0
   105ea:	725a      	strb	r2, [r3, #9]
		user_settings_parameter_struct.noCallStartTimeHourAddress	= 0;
   105ec:	4b41      	ldr	r3, [pc, #260]	; (106f4 <init_eeprom+0x5a4>)
   105ee:	2200      	movs	r2, #0
   105f0:	729a      	strb	r2, [r3, #10]
		user_settings_parameter_struct.noCallStartTimeMinuteAddress = 0;
   105f2:	4b40      	ldr	r3, [pc, #256]	; (106f4 <init_eeprom+0x5a4>)
   105f4:	2200      	movs	r2, #0
   105f6:	72da      	strb	r2, [r3, #11]
		user_settings_parameter_struct.noCallStopTimeHourAddress	= 0;
   105f8:	4b3e      	ldr	r3, [pc, #248]	; (106f4 <init_eeprom+0x5a4>)
   105fa:	2200      	movs	r2, #0
   105fc:	731a      	strb	r2, [r3, #12]
		user_settings_parameter_struct.noCallStopTimeMinuteAddress	= 0;
   105fe:	4b3d      	ldr	r3, [pc, #244]	; (106f4 <init_eeprom+0x5a4>)
   10600:	2200      	movs	r2, #0
   10602:	735a      	strb	r2, [r3, #13]
		user_settings_parameter_struct.lowVoltAddress				= 0;
   10604:	4b3b      	ldr	r3, [pc, #236]	; (106f4 <init_eeprom+0x5a4>)
   10606:	2200      	movs	r2, #0
   10608:	739a      	strb	r2, [r3, #14]
		user_settings_parameter_struct.currentDetectionAddress		= false;
   1060a:	4b3a      	ldr	r3, [pc, #232]	; (106f4 <init_eeprom+0x5a4>)
   1060c:	2200      	movs	r2, #0
   1060e:	73da      	strb	r2, [r3, #15]
		user_settings_parameter_struct.normalLoadAddress			= 0;
   10610:	4b38      	ldr	r3, [pc, #224]	; (106f4 <init_eeprom+0x5a4>)
   10612:	2200      	movs	r2, #0
   10614:	611a      	str	r2, [r3, #16]
		user_settings_parameter_struct.overloadAddress				= 0;
   10616:	4b37      	ldr	r3, [pc, #220]	; (106f4 <init_eeprom+0x5a4>)
   10618:	2200      	movs	r2, #0
   1061a:	615a      	str	r2, [r3, #20]
		user_settings_parameter_struct.underloadAddress				= 0;
   1061c:	4b35      	ldr	r3, [pc, #212]	; (106f4 <init_eeprom+0x5a4>)
   1061e:	2200      	movs	r2, #0
   10620:	619a      	str	r2, [r3, #24]
		user_settings_parameter_struct.underloadPerAddress			= 85;
   10622:	4b34      	ldr	r3, [pc, #208]	; (106f4 <init_eeprom+0x5a4>)
   10624:	2255      	movs	r2, #85	; 0x55
   10626:	771a      	strb	r2, [r3, #28]
		user_settings_parameter_struct.overloadPerAddress			= 120;
   10628:	4b32      	ldr	r3, [pc, #200]	; (106f4 <init_eeprom+0x5a4>)
   1062a:	2278      	movs	r2, #120	; 0x78
   1062c:	775a      	strb	r2, [r3, #29]
		//user_settings_parameter_struct.jumperSettingAddress			= 1;
		user_settings_parameter_struct.preventOverFlowAddress		= false;
   1062e:	4b31      	ldr	r3, [pc, #196]	; (106f4 <init_eeprom+0x5a4>)
   10630:	2200      	movs	r2, #0
   10632:	779a      	strb	r2, [r3, #30]
		user_settings_parameter_struct.waterBypassAddress			= false;
   10634:	4b2f      	ldr	r3, [pc, #188]	; (106f4 <init_eeprom+0x5a4>)
   10636:	2200      	movs	r2, #0
   10638:	77da      	strb	r2, [r3, #31]
		
		user_settings_parameter_struct.detectSinglePhasing			= true;
   1063a:	4b2e      	ldr	r3, [pc, #184]	; (106f4 <init_eeprom+0x5a4>)
   1063c:	2220      	movs	r2, #32
   1063e:	2101      	movs	r1, #1
   10640:	5499      	strb	r1, [r3, r2]
		user_settings_parameter_struct.singlePhasingVoltage			= 80;
   10642:	4b2c      	ldr	r3, [pc, #176]	; (106f4 <init_eeprom+0x5a4>)
   10644:	2250      	movs	r2, #80	; 0x50
   10646:	845a      	strh	r2, [r3, #34]	; 0x22
		user_settings_parameter_struct.detectPhaseSequence			= true;
   10648:	4b2a      	ldr	r3, [pc, #168]	; (106f4 <init_eeprom+0x5a4>)
   1064a:	2224      	movs	r2, #36	; 0x24
   1064c:	2101      	movs	r1, #1
   1064e:	5499      	strb	r1, [r3, r2]
		user_settings_parameter_struct.detectMotorFeedback			= MOTORFEEDBACK_DETECTION_ON;
   10650:	4b28      	ldr	r3, [pc, #160]	; (106f4 <init_eeprom+0x5a4>)
   10652:	2225      	movs	r2, #37	; 0x25
   10654:	2102      	movs	r1, #2
   10656:	5499      	strb	r1, [r3, r2]
		user_settings_parameter_struct.over_under_DetectionMethod		= MOTOR_UNDEROVER_DETECTION_CURRENT;
   10658:	4b26      	ldr	r3, [pc, #152]	; (106f4 <init_eeprom+0x5a4>)
   1065a:	2226      	movs	r2, #38	; 0x26
   1065c:	2100      	movs	r1, #0
   1065e:	5499      	strb	r1, [r3, r2]

		memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
   10660:	4924      	ldr	r1, [pc, #144]	; (106f4 <init_eeprom+0x5a4>)
   10662:	4b25      	ldr	r3, [pc, #148]	; (106f8 <init_eeprom+0x5a8>)
   10664:	222c      	movs	r2, #44	; 0x2c
   10666:	0018      	movs	r0, r3
   10668:	4b24      	ldr	r3, [pc, #144]	; (106fc <init_eeprom+0x5ac>)
   1066a:	4798      	blx	r3
		eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
   1066c:	4b22      	ldr	r3, [pc, #136]	; (106f8 <init_eeprom+0x5a8>)
   1066e:	0019      	movs	r1, r3
   10670:	201a      	movs	r0, #26
   10672:	4b23      	ldr	r3, [pc, #140]	; (10700 <init_eeprom+0x5b0>)
   10674:	4798      	blx	r3
		eeprom_emulator_commit_page_buffer();
   10676:	4b23      	ldr	r3, [pc, #140]	; (10704 <init_eeprom+0x5b4>)
   10678:	4798      	blx	r3
	}
	//////////////////////////////////////////////////////////////////////////
	eeprom_emulator_read_page(FACTORY_SETTING_PARAMETERS_PAGE, page_data);
   1067a:	4b1f      	ldr	r3, [pc, #124]	; (106f8 <init_eeprom+0x5a8>)
   1067c:	0019      	movs	r1, r3
   1067e:	201b      	movs	r0, #27
   10680:	4b21      	ldr	r3, [pc, #132]	; (10708 <init_eeprom+0x5b8>)
   10682:	4798      	blx	r3
	memcpy(&factory_settings_parameter_struct,page_data,sizeof(factory_settings_parameter_struct));
   10684:	491c      	ldr	r1, [pc, #112]	; (106f8 <init_eeprom+0x5a8>)
   10686:	4b21      	ldr	r3, [pc, #132]	; (1070c <init_eeprom+0x5bc>)
   10688:	2210      	movs	r2, #16
   1068a:	0018      	movs	r0, r3
   1068c:	4b1b      	ldr	r3, [pc, #108]	; (106fc <init_eeprom+0x5ac>)
   1068e:	4798      	blx	r3
	if (factory_settings_parameter_struct.u8tfirst_time_write_ee != 85)
   10690:	4b1e      	ldr	r3, [pc, #120]	; (1070c <init_eeprom+0x5bc>)
   10692:	781b      	ldrb	r3, [r3, #0]
   10694:	2b55      	cmp	r3, #85	; 0x55
   10696:	d02a      	beq.n	106ee <init_eeprom+0x59e>
	{
		factory_settings_parameter_struct.u8tfirst_time_write_ee	= 85;
   10698:	4b1c      	ldr	r3, [pc, #112]	; (1070c <init_eeprom+0x5bc>)
   1069a:	2255      	movs	r2, #85	; 0x55
   1069c:	701a      	strb	r2, [r3, #0]
		factory_settings_parameter_struct.AMPERE_SPEAK				= true;
   1069e:	4b1b      	ldr	r3, [pc, #108]	; (1070c <init_eeprom+0x5bc>)
   106a0:	2201      	movs	r2, #1
   106a2:	709a      	strb	r2, [r3, #2]
		factory_settings_parameter_struct.ENABLE_CURRENT			= true;
   106a4:	4b19      	ldr	r3, [pc, #100]	; (1070c <init_eeprom+0x5bc>)
   106a6:	2201      	movs	r2, #1
   106a8:	705a      	strb	r2, [r3, #1]
		factory_settings_parameter_struct.DUAL_LEVEL			    = false;	//= true;
   106aa:	4b18      	ldr	r3, [pc, #96]	; (1070c <init_eeprom+0x5bc>)
   106ac:	2200      	movs	r2, #0
   106ae:	719a      	strb	r2, [r3, #6]
		factory_settings_parameter_struct.ENABLE_WATER				= false;	//= true;
   106b0:	4b16      	ldr	r3, [pc, #88]	; (1070c <init_eeprom+0x5bc>)
   106b2:	2200      	movs	r2, #0
   106b4:	715a      	strb	r2, [r3, #5]
		factory_settings_parameter_struct.ENABLE_GP					= false;	// = true;
   106b6:	4b15      	ldr	r3, [pc, #84]	; (1070c <init_eeprom+0x5bc>)
   106b8:	2200      	movs	r2, #0
   106ba:	711a      	strb	r2, [r3, #4]
		factory_settings_parameter_struct.ENABLE_M2M				= false;
   106bc:	4b13      	ldr	r3, [pc, #76]	; (1070c <init_eeprom+0x5bc>)
   106be:	2200      	movs	r2, #0
   106c0:	70da      	strb	r2, [r3, #3]
		factory_settings_parameter_struct.NOLEVELCHANGECALL			= false;
   106c2:	4b12      	ldr	r3, [pc, #72]	; (1070c <init_eeprom+0x5bc>)
   106c4:	2200      	movs	r2, #0
   106c6:	71da      	strb	r2, [r3, #7]
		
		factory_settings_parameter_struct.DeviceId_ee				= 0;
   106c8:	4b10      	ldr	r3, [pc, #64]	; (1070c <init_eeprom+0x5bc>)
   106ca:	2200      	movs	r2, #0
   106cc:	609a      	str	r2, [r3, #8]
		factory_settings_parameter_struct.dateCode					= 0;
   106ce:	4b0f      	ldr	r3, [pc, #60]	; (1070c <init_eeprom+0x5bc>)
   106d0:	2200      	movs	r2, #0
   106d2:	60da      	str	r2, [r3, #12]

		//memset(factory_settings_parameter_struct.DeviceID_ee, '\0', sizeof(factory_settings_parameter_struct.DeviceID_ee));
		//strcpy(factory_settings_parameter_struct.DeviceID_ee,"0000000000");
		
		memcpy(page_data,&factory_settings_parameter_struct,sizeof(factory_settings_parameter_struct));
   106d4:	490d      	ldr	r1, [pc, #52]	; (1070c <init_eeprom+0x5bc>)
   106d6:	4b08      	ldr	r3, [pc, #32]	; (106f8 <init_eeprom+0x5a8>)
   106d8:	2210      	movs	r2, #16
   106da:	0018      	movs	r0, r3
   106dc:	4b07      	ldr	r3, [pc, #28]	; (106fc <init_eeprom+0x5ac>)
   106de:	4798      	blx	r3
		eeprom_emulator_write_page(FACTORY_SETTING_PARAMETERS_PAGE, page_data);
   106e0:	4b05      	ldr	r3, [pc, #20]	; (106f8 <init_eeprom+0x5a8>)
   106e2:	0019      	movs	r1, r3
   106e4:	201b      	movs	r0, #27
   106e6:	4b06      	ldr	r3, [pc, #24]	; (10700 <init_eeprom+0x5b0>)
   106e8:	4798      	blx	r3
		eeprom_emulator_commit_page_buffer();
   106ea:	4b06      	ldr	r3, [pc, #24]	; (10704 <init_eeprom+0x5b4>)
   106ec:	4798      	blx	r3
	}
}
   106ee:	46c0      	nop			; (mov r8, r8)
   106f0:	46bd      	mov	sp, r7
   106f2:	bd80      	pop	{r7, pc}
   106f4:	20000660 	.word	0x20000660
   106f8:	20000594 	.word	0x20000594
   106fc:	000289c5 	.word	0x000289c5
   10700:	000235e1 	.word	0x000235e1
   10704:	00023789 	.word	0x00023789
   10708:	000236ed 	.word	0x000236ed
   1070c:	20000638 	.word	0x20000638

00010710 <config_mobile_no_ee>:

void config_mobile_no_ee(const uint8_t page_loc,const char *mobile_number)
{
   10710:	b580      	push	{r7, lr}
   10712:	b088      	sub	sp, #32
   10714:	af00      	add	r7, sp, #0
   10716:	0002      	movs	r2, r0
   10718:	6039      	str	r1, [r7, #0]
   1071a:	1dfb      	adds	r3, r7, #7
   1071c:	701a      	strb	r2, [r3, #0]
	struct mobile_no_struct mobile_no;
	memset(page_data, '\0', sizeof(page_data));
   1071e:	4b28      	ldr	r3, [pc, #160]	; (107c0 <config_mobile_no_ee+0xb0>)
   10720:	223c      	movs	r2, #60	; 0x3c
   10722:	2100      	movs	r1, #0
   10724:	0018      	movs	r0, r3
   10726:	4b27      	ldr	r3, [pc, #156]	; (107c4 <config_mobile_no_ee+0xb4>)
   10728:	4798      	blx	r3
	eeprom_emulator_read_page(page_loc, page_data);
   1072a:	4a25      	ldr	r2, [pc, #148]	; (107c0 <config_mobile_no_ee+0xb0>)
   1072c:	1dfb      	adds	r3, r7, #7
   1072e:	781b      	ldrb	r3, [r3, #0]
   10730:	0011      	movs	r1, r2
   10732:	0018      	movs	r0, r3
   10734:	4b24      	ldr	r3, [pc, #144]	; (107c8 <config_mobile_no_ee+0xb8>)
   10736:	4798      	blx	r3
	memcpy(&mobile_no,page_data,sizeof(mobile_no));
   10738:	2308      	movs	r3, #8
   1073a:	18fa      	adds	r2, r7, r3
   1073c:	4b20      	ldr	r3, [pc, #128]	; (107c0 <config_mobile_no_ee+0xb0>)
   1073e:	0010      	movs	r0, r2
   10740:	0019      	movs	r1, r3
   10742:	2318      	movs	r3, #24
   10744:	001a      	movs	r2, r3
   10746:	4b21      	ldr	r3, [pc, #132]	; (107cc <config_mobile_no_ee+0xbc>)
   10748:	4798      	blx	r3
	if (mobile_no.u8tfirst_time_write_ee != 85)
   1074a:	2308      	movs	r3, #8
   1074c:	18fb      	adds	r3, r7, r3
   1074e:	781b      	ldrb	r3, [r3, #0]
   10750:	2b55      	cmp	r3, #85	; 0x55
   10752:	d031      	beq.n	107b8 <config_mobile_no_ee+0xa8>
	{
		mobile_no.u8tfirst_time_write_ee = 85;
   10754:	2308      	movs	r3, #8
   10756:	18fb      	adds	r3, r7, r3
   10758:	2255      	movs	r2, #85	; 0x55
   1075a:	701a      	strb	r2, [r3, #0]
		mobile_no.dummy1 = 0;
   1075c:	2308      	movs	r3, #8
   1075e:	18fb      	adds	r3, r7, r3
   10760:	2200      	movs	r2, #0
   10762:	705a      	strb	r2, [r3, #1]
		mobile_no.dummy2 = 0;
   10764:	2308      	movs	r3, #8
   10766:	18fb      	adds	r3, r7, r3
   10768:	2200      	movs	r2, #0
   1076a:	709a      	strb	r2, [r3, #2]
		mobile_no.dummy3 = 0;
   1076c:	2308      	movs	r3, #8
   1076e:	18fb      	adds	r3, r7, r3
   10770:	2200      	movs	r2, #0
   10772:	70da      	strb	r2, [r3, #3]
		memset(mobile_no.mobile_no_ee, '\0', sizeof(mobile_no.mobile_no_ee));
   10774:	2308      	movs	r3, #8
   10776:	18fb      	adds	r3, r7, r3
   10778:	3304      	adds	r3, #4
   1077a:	2214      	movs	r2, #20
   1077c:	2100      	movs	r1, #0
   1077e:	0018      	movs	r0, r3
   10780:	4b10      	ldr	r3, [pc, #64]	; (107c4 <config_mobile_no_ee+0xb4>)
   10782:	4798      	blx	r3
		strcpy(mobile_no.mobile_no_ee,mobile_number);
   10784:	683a      	ldr	r2, [r7, #0]
   10786:	2308      	movs	r3, #8
   10788:	18fb      	adds	r3, r7, r3
   1078a:	3304      	adds	r3, #4
   1078c:	0011      	movs	r1, r2
   1078e:	0018      	movs	r0, r3
   10790:	4b0f      	ldr	r3, [pc, #60]	; (107d0 <config_mobile_no_ee+0xc0>)
   10792:	4798      	blx	r3
		
		memcpy(page_data,&mobile_no,sizeof(mobile_no));
   10794:	4a0a      	ldr	r2, [pc, #40]	; (107c0 <config_mobile_no_ee+0xb0>)
   10796:	2308      	movs	r3, #8
   10798:	18fb      	adds	r3, r7, r3
   1079a:	0010      	movs	r0, r2
   1079c:	0019      	movs	r1, r3
   1079e:	2318      	movs	r3, #24
   107a0:	001a      	movs	r2, r3
   107a2:	4b0a      	ldr	r3, [pc, #40]	; (107cc <config_mobile_no_ee+0xbc>)
   107a4:	4798      	blx	r3
		eeprom_emulator_write_page(page_loc, page_data);
   107a6:	4a06      	ldr	r2, [pc, #24]	; (107c0 <config_mobile_no_ee+0xb0>)
   107a8:	1dfb      	adds	r3, r7, #7
   107aa:	781b      	ldrb	r3, [r3, #0]
   107ac:	0011      	movs	r1, r2
   107ae:	0018      	movs	r0, r3
   107b0:	4b08      	ldr	r3, [pc, #32]	; (107d4 <config_mobile_no_ee+0xc4>)
   107b2:	4798      	blx	r3
		eeprom_emulator_commit_page_buffer();
   107b4:	4b08      	ldr	r3, [pc, #32]	; (107d8 <config_mobile_no_ee+0xc8>)
   107b6:	4798      	blx	r3
	}
}
   107b8:	46c0      	nop			; (mov r8, r8)
   107ba:	46bd      	mov	sp, r7
   107bc:	b008      	add	sp, #32
   107be:	bd80      	pop	{r7, pc}
   107c0:	20000594 	.word	0x20000594
   107c4:	000289fb 	.word	0x000289fb
   107c8:	000236ed 	.word	0x000236ed
   107cc:	000289c5 	.word	0x000289c5
   107d0:	00028c7b 	.word	0x00028c7b
   107d4:	000235e1 	.word	0x000235e1
   107d8:	00023789 	.word	0x00023789

000107dc <getNumbers>:


void getNumbers(char *string)
{
   107dc:	b580      	push	{r7, lr}
   107de:	b08a      	sub	sp, #40	; 0x28
   107e0:	af00      	add	r7, sp, #0
   107e2:	6078      	str	r0, [r7, #4]
	strcpy(string,"");
   107e4:	687b      	ldr	r3, [r7, #4]
   107e6:	2200      	movs	r2, #0
   107e8:	701a      	strb	r2, [r3, #0]
	
	for(uint8_t i=0;i<user_count_struct.current_user_no_count;i++)
   107ea:	2327      	movs	r3, #39	; 0x27
   107ec:	18fb      	adds	r3, r7, r3
   107ee:	2200      	movs	r2, #0
   107f0:	701a      	strb	r2, [r3, #0]
   107f2:	e063      	b.n	108bc <getNumbers+0xe0>
	{
		struct mobile_no_struct mobile_no;
		memset(page_data, '\0', sizeof(page_data));
   107f4:	4b37      	ldr	r3, [pc, #220]	; (108d4 <getNumbers+0xf8>)
   107f6:	223c      	movs	r2, #60	; 0x3c
   107f8:	2100      	movs	r1, #0
   107fa:	0018      	movs	r0, r3
   107fc:	4b36      	ldr	r3, [pc, #216]	; (108d8 <getNumbers+0xfc>)
   107fe:	4798      	blx	r3
		eeprom_emulator_read_page(USER_1_MOBILE_NUMBER_PAGE+i, page_data);
   10800:	2327      	movs	r3, #39	; 0x27
   10802:	18fb      	adds	r3, r7, r3
   10804:	781b      	ldrb	r3, [r3, #0]
   10806:	3309      	adds	r3, #9
   10808:	b2db      	uxtb	r3, r3
   1080a:	4a32      	ldr	r2, [pc, #200]	; (108d4 <getNumbers+0xf8>)
   1080c:	0011      	movs	r1, r2
   1080e:	0018      	movs	r0, r3
   10810:	4b32      	ldr	r3, [pc, #200]	; (108dc <getNumbers+0x100>)
   10812:	4798      	blx	r3
		memcpy(&mobile_no,page_data,sizeof(mobile_no));
   10814:	230c      	movs	r3, #12
   10816:	18fa      	adds	r2, r7, r3
   10818:	4b2e      	ldr	r3, [pc, #184]	; (108d4 <getNumbers+0xf8>)
   1081a:	0010      	movs	r0, r2
   1081c:	0019      	movs	r1, r3
   1081e:	2318      	movs	r3, #24
   10820:	001a      	movs	r2, r3
   10822:	4b2f      	ldr	r3, [pc, #188]	; (108e0 <getNumbers+0x104>)
   10824:	4798      	blx	r3
		if(i==user_count_struct.primaryNumberIndex)
   10826:	4b2f      	ldr	r3, [pc, #188]	; (108e4 <getNumbers+0x108>)
   10828:	78db      	ldrb	r3, [r3, #3]
   1082a:	2227      	movs	r2, #39	; 0x27
   1082c:	18ba      	adds	r2, r7, r2
   1082e:	7812      	ldrb	r2, [r2, #0]
   10830:	429a      	cmp	r2, r3
   10832:	d10f      	bne.n	10854 <getNumbers+0x78>
		{
			strcat(string,"P:");
   10834:	687b      	ldr	r3, [r7, #4]
   10836:	0018      	movs	r0, r3
   10838:	4b2b      	ldr	r3, [pc, #172]	; (108e8 <getNumbers+0x10c>)
   1083a:	4798      	blx	r3
   1083c:	0003      	movs	r3, r0
   1083e:	001a      	movs	r2, r3
   10840:	687b      	ldr	r3, [r7, #4]
   10842:	189a      	adds	r2, r3, r2
   10844:	4b29      	ldr	r3, [pc, #164]	; (108ec <getNumbers+0x110>)
   10846:	0010      	movs	r0, r2
   10848:	0019      	movs	r1, r3
   1084a:	2303      	movs	r3, #3
   1084c:	001a      	movs	r2, r3
   1084e:	4b24      	ldr	r3, [pc, #144]	; (108e0 <getNumbers+0x104>)
   10850:	4798      	blx	r3
   10852:	e015      	b.n	10880 <getNumbers+0xa4>
		}
		else if(i==user_count_struct.secondaryNumberIndex)
   10854:	4b23      	ldr	r3, [pc, #140]	; (108e4 <getNumbers+0x108>)
   10856:	791b      	ldrb	r3, [r3, #4]
   10858:	2227      	movs	r2, #39	; 0x27
   1085a:	18ba      	adds	r2, r7, r2
   1085c:	7812      	ldrb	r2, [r2, #0]
   1085e:	429a      	cmp	r2, r3
   10860:	d10e      	bne.n	10880 <getNumbers+0xa4>
		{
			strcat(string,"S:");
   10862:	687b      	ldr	r3, [r7, #4]
   10864:	0018      	movs	r0, r3
   10866:	4b20      	ldr	r3, [pc, #128]	; (108e8 <getNumbers+0x10c>)
   10868:	4798      	blx	r3
   1086a:	0003      	movs	r3, r0
   1086c:	001a      	movs	r2, r3
   1086e:	687b      	ldr	r3, [r7, #4]
   10870:	189a      	adds	r2, r3, r2
   10872:	4b1f      	ldr	r3, [pc, #124]	; (108f0 <getNumbers+0x114>)
   10874:	0010      	movs	r0, r2
   10876:	0019      	movs	r1, r3
   10878:	2303      	movs	r3, #3
   1087a:	001a      	movs	r2, r3
   1087c:	4b18      	ldr	r3, [pc, #96]	; (108e0 <getNumbers+0x104>)
   1087e:	4798      	blx	r3
		}
		strcat(string,mobile_no.mobile_no_ee);
   10880:	230c      	movs	r3, #12
   10882:	18fb      	adds	r3, r7, r3
   10884:	1d1a      	adds	r2, r3, #4
   10886:	687b      	ldr	r3, [r7, #4]
   10888:	0011      	movs	r1, r2
   1088a:	0018      	movs	r0, r3
   1088c:	4b19      	ldr	r3, [pc, #100]	; (108f4 <getNumbers+0x118>)
   1088e:	4798      	blx	r3
		strcat(string,"\n");
   10890:	687b      	ldr	r3, [r7, #4]
   10892:	0018      	movs	r0, r3
   10894:	4b14      	ldr	r3, [pc, #80]	; (108e8 <getNumbers+0x10c>)
   10896:	4798      	blx	r3
   10898:	0003      	movs	r3, r0
   1089a:	001a      	movs	r2, r3
   1089c:	687b      	ldr	r3, [r7, #4]
   1089e:	189a      	adds	r2, r3, r2
   108a0:	4b15      	ldr	r3, [pc, #84]	; (108f8 <getNumbers+0x11c>)
   108a2:	0010      	movs	r0, r2
   108a4:	0019      	movs	r1, r3
   108a6:	2302      	movs	r3, #2
   108a8:	001a      	movs	r2, r3
   108aa:	4b0d      	ldr	r3, [pc, #52]	; (108e0 <getNumbers+0x104>)
   108ac:	4798      	blx	r3
	for(uint8_t i=0;i<user_count_struct.current_user_no_count;i++)
   108ae:	2327      	movs	r3, #39	; 0x27
   108b0:	18fb      	adds	r3, r7, r3
   108b2:	781a      	ldrb	r2, [r3, #0]
   108b4:	2327      	movs	r3, #39	; 0x27
   108b6:	18fb      	adds	r3, r7, r3
   108b8:	3201      	adds	r2, #1
   108ba:	701a      	strb	r2, [r3, #0]
   108bc:	4b09      	ldr	r3, [pc, #36]	; (108e4 <getNumbers+0x108>)
   108be:	789b      	ldrb	r3, [r3, #2]
   108c0:	2227      	movs	r2, #39	; 0x27
   108c2:	18ba      	adds	r2, r7, r2
   108c4:	7812      	ldrb	r2, [r2, #0]
   108c6:	429a      	cmp	r2, r3
   108c8:	d394      	bcc.n	107f4 <getNumbers+0x18>
	}
}
   108ca:	46c0      	nop			; (mov r8, r8)
   108cc:	46bd      	mov	sp, r7
   108ce:	b00a      	add	sp, #40	; 0x28
   108d0:	bd80      	pop	{r7, pc}
   108d2:	46c0      	nop			; (mov r8, r8)
   108d4:	20000594 	.word	0x20000594
   108d8:	000289fb 	.word	0x000289fb
   108dc:	000236ed 	.word	0x000236ed
   108e0:	000289c5 	.word	0x000289c5
   108e4:	20000620 	.word	0x20000620
   108e8:	00028c8b 	.word	0x00028c8b
   108ec:	0002968c 	.word	0x0002968c
   108f0:	00029690 	.word	0x00029690
   108f4:	00028c45 	.word	0x00028c45
   108f8:	00029694 	.word	0x00029694

000108fc <getIndexedNumber>:

char *getIndexedNumber(char *IndexNo, uint8_t index)
{
   108fc:	b580      	push	{r7, lr}
   108fe:	b088      	sub	sp, #32
   10900:	af00      	add	r7, sp, #0
   10902:	6078      	str	r0, [r7, #4]
   10904:	000a      	movs	r2, r1
   10906:	1cfb      	adds	r3, r7, #3
   10908:	701a      	strb	r2, [r3, #0]
	strcpy(IndexNo,"");
   1090a:	687b      	ldr	r3, [r7, #4]
   1090c:	2200      	movs	r2, #0
   1090e:	701a      	strb	r2, [r3, #0]
	if(user_count_struct.current_user_no_count>index)
   10910:	4b15      	ldr	r3, [pc, #84]	; (10968 <getIndexedNumber+0x6c>)
   10912:	789b      	ldrb	r3, [r3, #2]
   10914:	1cfa      	adds	r2, r7, #3
   10916:	7812      	ldrb	r2, [r2, #0]
   10918:	429a      	cmp	r2, r3
   1091a:	d21f      	bcs.n	1095c <getIndexedNumber+0x60>
	{
		struct mobile_no_struct mobile_no;
		memset(page_data, '\0', sizeof(page_data));
   1091c:	4b13      	ldr	r3, [pc, #76]	; (1096c <getIndexedNumber+0x70>)
   1091e:	223c      	movs	r2, #60	; 0x3c
   10920:	2100      	movs	r1, #0
   10922:	0018      	movs	r0, r3
   10924:	4b12      	ldr	r3, [pc, #72]	; (10970 <getIndexedNumber+0x74>)
   10926:	4798      	blx	r3
		eeprom_emulator_read_page(USER_1_MOBILE_NUMBER_PAGE+index, page_data);
   10928:	1cfb      	adds	r3, r7, #3
   1092a:	781b      	ldrb	r3, [r3, #0]
   1092c:	3309      	adds	r3, #9
   1092e:	b2db      	uxtb	r3, r3
   10930:	4a0e      	ldr	r2, [pc, #56]	; (1096c <getIndexedNumber+0x70>)
   10932:	0011      	movs	r1, r2
   10934:	0018      	movs	r0, r3
   10936:	4b0f      	ldr	r3, [pc, #60]	; (10974 <getIndexedNumber+0x78>)
   10938:	4798      	blx	r3
		//eeprom_emulator_read_page(USER_1_MOBILE_NUMBER_PAGE+index-1, page_data);
		memcpy(&mobile_no,page_data,sizeof(mobile_no));
   1093a:	2308      	movs	r3, #8
   1093c:	18fa      	adds	r2, r7, r3
   1093e:	4b0b      	ldr	r3, [pc, #44]	; (1096c <getIndexedNumber+0x70>)
   10940:	0010      	movs	r0, r2
   10942:	0019      	movs	r1, r3
   10944:	2318      	movs	r3, #24
   10946:	001a      	movs	r2, r3
   10948:	4b0b      	ldr	r3, [pc, #44]	; (10978 <getIndexedNumber+0x7c>)
   1094a:	4798      	blx	r3
		strcat(IndexNo,mobile_no.mobile_no_ee);
   1094c:	2308      	movs	r3, #8
   1094e:	18fb      	adds	r3, r7, r3
   10950:	1d1a      	adds	r2, r3, #4
   10952:	687b      	ldr	r3, [r7, #4]
   10954:	0011      	movs	r1, r2
   10956:	0018      	movs	r0, r3
   10958:	4b08      	ldr	r3, [pc, #32]	; (1097c <getIndexedNumber+0x80>)
   1095a:	4798      	blx	r3
	}
	return IndexNo;
   1095c:	687b      	ldr	r3, [r7, #4]
}
   1095e:	0018      	movs	r0, r3
   10960:	46bd      	mov	sp, r7
   10962:	b008      	add	sp, #32
   10964:	bd80      	pop	{r7, pc}
   10966:	46c0      	nop			; (mov r8, r8)
   10968:	20000620 	.word	0x20000620
   1096c:	20000594 	.word	0x20000594
   10970:	000289fb 	.word	0x000289fb
   10974:	000236ed 	.word	0x000236ed
   10978:	000289c5 	.word	0x000289c5
   1097c:	00028c45 	.word	0x00028c45

00010980 <isPrimaryNumber>:

bool isPrimaryNumber(char *number)
{
   10980:	b580      	push	{r7, lr}
   10982:	b088      	sub	sp, #32
   10984:	af00      	add	r7, sp, #0
   10986:	6078      	str	r0, [r7, #4]
	if(user_count_struct.current_user_no_count > 0)
   10988:	4b14      	ldr	r3, [pc, #80]	; (109dc <isPrimaryNumber+0x5c>)
   1098a:	789b      	ldrb	r3, [r3, #2]
   1098c:	2b00      	cmp	r3, #0
   1098e:	d020      	beq.n	109d2 <isPrimaryNumber+0x52>
	{
		char primaryNumber[20] = {0};
   10990:	230c      	movs	r3, #12
   10992:	18fb      	adds	r3, r7, r3
   10994:	0018      	movs	r0, r3
   10996:	2314      	movs	r3, #20
   10998:	001a      	movs	r2, r3
   1099a:	2100      	movs	r1, #0
   1099c:	4b10      	ldr	r3, [pc, #64]	; (109e0 <isPrimaryNumber+0x60>)
   1099e:	4798      	blx	r3
		getIndexedNumber(&primaryNumber,user_count_struct.primaryNumberIndex);
   109a0:	4b0e      	ldr	r3, [pc, #56]	; (109dc <isPrimaryNumber+0x5c>)
   109a2:	78da      	ldrb	r2, [r3, #3]
   109a4:	230c      	movs	r3, #12
   109a6:	18fb      	adds	r3, r7, r3
   109a8:	0011      	movs	r1, r2
   109aa:	0018      	movs	r0, r3
   109ac:	4b0d      	ldr	r3, [pc, #52]	; (109e4 <isPrimaryNumber+0x64>)
   109ae:	4798      	blx	r3
		if(strstr(number,primaryNumber))
   109b0:	230c      	movs	r3, #12
   109b2:	18fa      	adds	r2, r7, r3
   109b4:	687b      	ldr	r3, [r7, #4]
   109b6:	0011      	movs	r1, r2
   109b8:	0018      	movs	r0, r3
   109ba:	4b0b      	ldr	r3, [pc, #44]	; (109e8 <isPrimaryNumber+0x68>)
   109bc:	4798      	blx	r3
   109be:	1e03      	subs	r3, r0, #0
   109c0:	d001      	beq.n	109c6 <isPrimaryNumber+0x46>
		{
			return true;
   109c2:	2301      	movs	r3, #1
   109c4:	e006      	b.n	109d4 <isPrimaryNumber+0x54>
		}
		else
		{
			return isAlterNumber(number);
   109c6:	687b      	ldr	r3, [r7, #4]
   109c8:	0018      	movs	r0, r3
   109ca:	4b08      	ldr	r3, [pc, #32]	; (109ec <isPrimaryNumber+0x6c>)
   109cc:	4798      	blx	r3
   109ce:	0003      	movs	r3, r0
   109d0:	e000      	b.n	109d4 <isPrimaryNumber+0x54>
		//else
		//{
		//return isAlterNumber(number);
		//}
	}
	return false;
   109d2:	2300      	movs	r3, #0
}
   109d4:	0018      	movs	r0, r3
   109d6:	46bd      	mov	sp, r7
   109d8:	b008      	add	sp, #32
   109da:	bd80      	pop	{r7, pc}
   109dc:	20000620 	.word	0x20000620
   109e0:	000289fb 	.word	0x000289fb
   109e4:	000108fd 	.word	0x000108fd
   109e8:	00028cbb 	.word	0x00028cbb
   109ec:	000109f1 	.word	0x000109f1

000109f0 <isAlterNumber>:

bool isAlterNumber(char *number)
{
   109f0:	b580      	push	{r7, lr}
   109f2:	b082      	sub	sp, #8
   109f4:	af00      	add	r7, sp, #0
   109f6:	6078      	str	r0, [r7, #4]
	if(user_count_struct.current_user_no_count > 0)
   109f8:	4b0b      	ldr	r3, [pc, #44]	; (10a28 <isAlterNumber+0x38>)
   109fa:	789b      	ldrb	r3, [r3, #2]
   109fc:	2b00      	cmp	r3, #0
   109fe:	d00d      	beq.n	10a1c <isAlterNumber+0x2c>
	{
		if ((alternateNumber_struct.alterNumberPresent) && (strstr(number, alternateNumber_struct.alternateNumber_ee)))
   10a00:	4b0a      	ldr	r3, [pc, #40]	; (10a2c <isAlterNumber+0x3c>)
   10a02:	789b      	ldrb	r3, [r3, #2]
   10a04:	2b00      	cmp	r3, #0
   10a06:	d009      	beq.n	10a1c <isAlterNumber+0x2c>
   10a08:	4a09      	ldr	r2, [pc, #36]	; (10a30 <isAlterNumber+0x40>)
   10a0a:	687b      	ldr	r3, [r7, #4]
   10a0c:	0011      	movs	r1, r2
   10a0e:	0018      	movs	r0, r3
   10a10:	4b08      	ldr	r3, [pc, #32]	; (10a34 <isAlterNumber+0x44>)
   10a12:	4798      	blx	r3
   10a14:	1e03      	subs	r3, r0, #0
   10a16:	d001      	beq.n	10a1c <isAlterNumber+0x2c>
		{
			return true;
   10a18:	2301      	movs	r3, #1
   10a1a:	e000      	b.n	10a1e <isAlterNumber+0x2e>
		}
	}
	return false;
   10a1c:	2300      	movs	r3, #0
}
   10a1e:	0018      	movs	r0, r3
   10a20:	46bd      	mov	sp, r7
   10a22:	b002      	add	sp, #8
   10a24:	bd80      	pop	{r7, pc}
   10a26:	46c0      	nop			; (mov r8, r8)
   10a28:	20000620 	.word	0x20000620
   10a2c:	20000648 	.word	0x20000648
   10a30:	2000064c 	.word	0x2000064c
   10a34:	00028cbb 	.word	0x00028cbb

00010a38 <isM2MNumber>:

bool isM2MNumber(char *number)
{
   10a38:	b580      	push	{r7, lr}
   10a3a:	b082      	sub	sp, #8
   10a3c:	af00      	add	r7, sp, #0
   10a3e:	6078      	str	r0, [r7, #4]
	if ((m2m_Numbers_struct.m2mPresent) && strstr(number,m2m_Numbers_struct.m2mNumber_ee))
   10a40:	4b09      	ldr	r3, [pc, #36]	; (10a68 <isM2MNumber+0x30>)
   10a42:	785b      	ldrb	r3, [r3, #1]
   10a44:	2b00      	cmp	r3, #0
   10a46:	d009      	beq.n	10a5c <isM2MNumber+0x24>
   10a48:	4a08      	ldr	r2, [pc, #32]	; (10a6c <isM2MNumber+0x34>)
   10a4a:	687b      	ldr	r3, [r7, #4]
   10a4c:	0011      	movs	r1, r2
   10a4e:	0018      	movs	r0, r3
   10a50:	4b07      	ldr	r3, [pc, #28]	; (10a70 <isM2MNumber+0x38>)
   10a52:	4798      	blx	r3
   10a54:	1e03      	subs	r3, r0, #0
   10a56:	d001      	beq.n	10a5c <isM2MNumber+0x24>
	{
		return true;
   10a58:	2301      	movs	r3, #1
   10a5a:	e000      	b.n	10a5e <isM2MNumber+0x26>
	}
	return false;
   10a5c:	2300      	movs	r3, #0
}
   10a5e:	0018      	movs	r0, r3
   10a60:	46bd      	mov	sp, r7
   10a62:	b002      	add	sp, #8
   10a64:	bd80      	pop	{r7, pc}
   10a66:	46c0      	nop			; (mov r8, r8)
   10a68:	20000564 	.word	0x20000564
   10a6c:	2000056c 	.word	0x2000056c
   10a70:	00028cbb 	.word	0x00028cbb

00010a74 <isM2MRemoteNumber>:

bool isM2MRemoteNumber(char *number)
{
   10a74:	b580      	push	{r7, lr}
   10a76:	b082      	sub	sp, #8
   10a78:	af00      	add	r7, sp, #0
   10a7a:	6078      	str	r0, [r7, #4]
	if ((m2m_Numbers_struct.m2mRemotePresent) && strstr(number,m2m_Numbers_struct.m2mremoteNumber_ee))
   10a7c:	4b09      	ldr	r3, [pc, #36]	; (10aa4 <isM2MRemoteNumber+0x30>)
   10a7e:	78db      	ldrb	r3, [r3, #3]
   10a80:	2b00      	cmp	r3, #0
   10a82:	d009      	beq.n	10a98 <isM2MRemoteNumber+0x24>
   10a84:	4a08      	ldr	r2, [pc, #32]	; (10aa8 <isM2MRemoteNumber+0x34>)
   10a86:	687b      	ldr	r3, [r7, #4]
   10a88:	0011      	movs	r1, r2
   10a8a:	0018      	movs	r0, r3
   10a8c:	4b07      	ldr	r3, [pc, #28]	; (10aac <isM2MRemoteNumber+0x38>)
   10a8e:	4798      	blx	r3
   10a90:	1e03      	subs	r3, r0, #0
   10a92:	d001      	beq.n	10a98 <isM2MRemoteNumber+0x24>
	{
		return true;
   10a94:	2301      	movs	r3, #1
   10a96:	e000      	b.n	10a9a <isM2MRemoteNumber+0x26>
	}
	return false;
   10a98:	2300      	movs	r3, #0
}
   10a9a:	0018      	movs	r0, r3
   10a9c:	46bd      	mov	sp, r7
   10a9e:	b002      	add	sp, #8
   10aa0:	bd80      	pop	{r7, pc}
   10aa2:	46c0      	nop			; (mov r8, r8)
   10aa4:	20000564 	.word	0x20000564
   10aa8:	20000580 	.word	0x20000580
   10aac:	00028cbb 	.word	0x00028cbb

00010ab0 <getM2MNumber>:

char *getM2MNumber(char *m2mNo)
{
   10ab0:	b580      	push	{r7, lr}
   10ab2:	b082      	sub	sp, #8
   10ab4:	af00      	add	r7, sp, #0
   10ab6:	6078      	str	r0, [r7, #4]
	if (m2m_Numbers_struct.m2mPresent)
   10ab8:	4b09      	ldr	r3, [pc, #36]	; (10ae0 <getM2MNumber+0x30>)
   10aba:	785b      	ldrb	r3, [r3, #1]
   10abc:	2b00      	cmp	r3, #0
   10abe:	d006      	beq.n	10ace <getM2MNumber+0x1e>
	{
		//strstr(m2mNo,m2m_Numbers_struct.m2mNumber_ee);
		strcpy(m2mNo,m2m_Numbers_struct.m2mNumber_ee);
   10ac0:	4a08      	ldr	r2, [pc, #32]	; (10ae4 <getM2MNumber+0x34>)
   10ac2:	687b      	ldr	r3, [r7, #4]
   10ac4:	0011      	movs	r1, r2
   10ac6:	0018      	movs	r0, r3
   10ac8:	4b07      	ldr	r3, [pc, #28]	; (10ae8 <getM2MNumber+0x38>)
   10aca:	4798      	blx	r3
   10acc:	e002      	b.n	10ad4 <getM2MNumber+0x24>
	}
	else
	{
		strcpy(m2mNo,"");
   10ace:	687b      	ldr	r3, [r7, #4]
   10ad0:	2200      	movs	r2, #0
   10ad2:	701a      	strb	r2, [r3, #0]
	}
	return m2mNo;
   10ad4:	687b      	ldr	r3, [r7, #4]
}
   10ad6:	0018      	movs	r0, r3
   10ad8:	46bd      	mov	sp, r7
   10ada:	b002      	add	sp, #8
   10adc:	bd80      	pop	{r7, pc}
   10ade:	46c0      	nop			; (mov r8, r8)
   10ae0:	20000564 	.word	0x20000564
   10ae4:	2000056c 	.word	0x2000056c
   10ae8:	00028c7b 	.word	0x00028c7b

00010aec <getM2MRemoteNumber>:

char *getM2MRemoteNumber(char *m2mNoRemotNo)
{
   10aec:	b580      	push	{r7, lr}
   10aee:	b082      	sub	sp, #8
   10af0:	af00      	add	r7, sp, #0
   10af2:	6078      	str	r0, [r7, #4]
	if (m2m_Numbers_struct.m2mRemotePresent)
   10af4:	4b09      	ldr	r3, [pc, #36]	; (10b1c <getM2MRemoteNumber+0x30>)
   10af6:	78db      	ldrb	r3, [r3, #3]
   10af8:	2b00      	cmp	r3, #0
   10afa:	d006      	beq.n	10b0a <getM2MRemoteNumber+0x1e>
	{
		strcpy(m2mNoRemotNo,m2m_Numbers_struct.m2mremoteNumber_ee);
   10afc:	4a08      	ldr	r2, [pc, #32]	; (10b20 <getM2MRemoteNumber+0x34>)
   10afe:	687b      	ldr	r3, [r7, #4]
   10b00:	0011      	movs	r1, r2
   10b02:	0018      	movs	r0, r3
   10b04:	4b07      	ldr	r3, [pc, #28]	; (10b24 <getM2MRemoteNumber+0x38>)
   10b06:	4798      	blx	r3
   10b08:	e002      	b.n	10b10 <getM2MRemoteNumber+0x24>
	}
	else
	{
		strcpy(m2mNoRemotNo,"");
   10b0a:	687b      	ldr	r3, [r7, #4]
   10b0c:	2200      	movs	r2, #0
   10b0e:	701a      	strb	r2, [r3, #0]
	}
	return m2mNoRemotNo;
   10b10:	687b      	ldr	r3, [r7, #4]
}
   10b12:	0018      	movs	r0, r3
   10b14:	46bd      	mov	sp, r7
   10b16:	b002      	add	sp, #8
   10b18:	bd80      	pop	{r7, pc}
   10b1a:	46c0      	nop			; (mov r8, r8)
   10b1c:	20000564 	.word	0x20000564
   10b20:	20000580 	.word	0x20000580
   10b24:	00028c7b 	.word	0x00028c7b

00010b28 <setM2MVerify>:

void setM2MVerify(bool flag)
{
   10b28:	b580      	push	{r7, lr}
   10b2a:	b082      	sub	sp, #8
   10b2c:	af00      	add	r7, sp, #0
   10b2e:	0002      	movs	r2, r0
   10b30:	1dfb      	adds	r3, r7, #7
   10b32:	701a      	strb	r2, [r3, #0]
	m2m_Numbers_struct.m2mVerified = (uint8_t)flag;
   10b34:	1dfb      	adds	r3, r7, #7
   10b36:	781a      	ldrb	r2, [r3, #0]
   10b38:	4b0a      	ldr	r3, [pc, #40]	; (10b64 <setM2MVerify+0x3c>)
   10b3a:	709a      	strb	r2, [r3, #2]
	memcpy(page_data,&m2m_Numbers_struct,sizeof(m2m_Numbers_struct));
   10b3c:	4a0a      	ldr	r2, [pc, #40]	; (10b68 <setM2MVerify+0x40>)
   10b3e:	4b09      	ldr	r3, [pc, #36]	; (10b64 <setM2MVerify+0x3c>)
   10b40:	0010      	movs	r0, r2
   10b42:	0019      	movs	r1, r3
   10b44:	2330      	movs	r3, #48	; 0x30
   10b46:	001a      	movs	r2, r3
   10b48:	4b08      	ldr	r3, [pc, #32]	; (10b6c <setM2MVerify+0x44>)
   10b4a:	4798      	blx	r3
	eeprom_emulator_write_page(M2M_NUMBERS_PAGE, page_data);
   10b4c:	4b06      	ldr	r3, [pc, #24]	; (10b68 <setM2MVerify+0x40>)
   10b4e:	0019      	movs	r1, r3
   10b50:	2019      	movs	r0, #25
   10b52:	4b07      	ldr	r3, [pc, #28]	; (10b70 <setM2MVerify+0x48>)
   10b54:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   10b56:	4b07      	ldr	r3, [pc, #28]	; (10b74 <setM2MVerify+0x4c>)
   10b58:	4798      	blx	r3
}
   10b5a:	46c0      	nop			; (mov r8, r8)
   10b5c:	46bd      	mov	sp, r7
   10b5e:	b002      	add	sp, #8
   10b60:	bd80      	pop	{r7, pc}
   10b62:	46c0      	nop			; (mov r8, r8)
   10b64:	20000564 	.word	0x20000564
   10b68:	20000594 	.word	0x20000594
   10b6c:	000289c5 	.word	0x000289c5
   10b70:	000235e1 	.word	0x000235e1
   10b74:	00023789 	.word	0x00023789

00010b78 <setM2MRemoteVerified>:

void setM2MRemoteVerified(bool flag)
{
   10b78:	b580      	push	{r7, lr}
   10b7a:	b082      	sub	sp, #8
   10b7c:	af00      	add	r7, sp, #0
   10b7e:	0002      	movs	r2, r0
   10b80:	1dfb      	adds	r3, r7, #7
   10b82:	701a      	strb	r2, [r3, #0]
	m2m_Numbers_struct.m2mRemoteVerified = (uint8_t)flag;
   10b84:	1dfb      	adds	r3, r7, #7
   10b86:	781a      	ldrb	r2, [r3, #0]
   10b88:	4b0a      	ldr	r3, [pc, #40]	; (10bb4 <setM2MRemoteVerified+0x3c>)
   10b8a:	711a      	strb	r2, [r3, #4]
	memcpy(page_data,&m2m_Numbers_struct,sizeof(m2m_Numbers_struct));
   10b8c:	4a0a      	ldr	r2, [pc, #40]	; (10bb8 <setM2MRemoteVerified+0x40>)
   10b8e:	4b09      	ldr	r3, [pc, #36]	; (10bb4 <setM2MRemoteVerified+0x3c>)
   10b90:	0010      	movs	r0, r2
   10b92:	0019      	movs	r1, r3
   10b94:	2330      	movs	r3, #48	; 0x30
   10b96:	001a      	movs	r2, r3
   10b98:	4b08      	ldr	r3, [pc, #32]	; (10bbc <setM2MRemoteVerified+0x44>)
   10b9a:	4798      	blx	r3
	eeprom_emulator_write_page(M2M_NUMBERS_PAGE, page_data);
   10b9c:	4b06      	ldr	r3, [pc, #24]	; (10bb8 <setM2MRemoteVerified+0x40>)
   10b9e:	0019      	movs	r1, r3
   10ba0:	2019      	movs	r0, #25
   10ba2:	4b07      	ldr	r3, [pc, #28]	; (10bc0 <setM2MRemoteVerified+0x48>)
   10ba4:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   10ba6:	4b07      	ldr	r3, [pc, #28]	; (10bc4 <setM2MRemoteVerified+0x4c>)
   10ba8:	4798      	blx	r3
}
   10baa:	46c0      	nop			; (mov r8, r8)
   10bac:	46bd      	mov	sp, r7
   10bae:	b002      	add	sp, #8
   10bb0:	bd80      	pop	{r7, pc}
   10bb2:	46c0      	nop			; (mov r8, r8)
   10bb4:	20000564 	.word	0x20000564
   10bb8:	20000594 	.word	0x20000594
   10bbc:	000289c5 	.word	0x000289c5
   10bc0:	000235e1 	.word	0x000235e1
   10bc4:	00023789 	.word	0x00023789

00010bc8 <saveM2MSettings>:

void saveM2MSettings(bool flag)
{
   10bc8:	b580      	push	{r7, lr}
   10bca:	b082      	sub	sp, #8
   10bcc:	af00      	add	r7, sp, #0
   10bce:	0002      	movs	r2, r0
   10bd0:	1dfb      	adds	r3, r7, #7
   10bd2:	701a      	strb	r2, [r3, #0]
	m2m_Numbers_struct.m2mSetting = (uint8_t)flag;
   10bd4:	1dfb      	adds	r3, r7, #7
   10bd6:	781a      	ldrb	r2, [r3, #0]
   10bd8:	4b0f      	ldr	r3, [pc, #60]	; (10c18 <saveM2MSettings+0x50>)
   10bda:	715a      	strb	r2, [r3, #5]
	if(!flag)					// m2m turned off
   10bdc:	1dfb      	adds	r3, r7, #7
   10bde:	781b      	ldrb	r3, [r3, #0]
   10be0:	2201      	movs	r2, #1
   10be2:	4053      	eors	r3, r2
   10be4:	b2db      	uxtb	r3, r3
   10be6:	2b00      	cmp	r3, #0
   10be8:	d002      	beq.n	10bf0 <saveM2MSettings+0x28>
	{
		m2m_Numbers_struct.m2mRemoteVerified=false;
   10bea:	4b0b      	ldr	r3, [pc, #44]	; (10c18 <saveM2MSettings+0x50>)
   10bec:	2200      	movs	r2, #0
   10bee:	711a      	strb	r2, [r3, #4]
	}
	memcpy(page_data,&m2m_Numbers_struct,sizeof(m2m_Numbers_struct));
   10bf0:	4a0a      	ldr	r2, [pc, #40]	; (10c1c <saveM2MSettings+0x54>)
   10bf2:	4b09      	ldr	r3, [pc, #36]	; (10c18 <saveM2MSettings+0x50>)
   10bf4:	0010      	movs	r0, r2
   10bf6:	0019      	movs	r1, r3
   10bf8:	2330      	movs	r3, #48	; 0x30
   10bfa:	001a      	movs	r2, r3
   10bfc:	4b08      	ldr	r3, [pc, #32]	; (10c20 <saveM2MSettings+0x58>)
   10bfe:	4798      	blx	r3
	eeprom_emulator_write_page(M2M_NUMBERS_PAGE, page_data);
   10c00:	4b06      	ldr	r3, [pc, #24]	; (10c1c <saveM2MSettings+0x54>)
   10c02:	0019      	movs	r1, r3
   10c04:	2019      	movs	r0, #25
   10c06:	4b07      	ldr	r3, [pc, #28]	; (10c24 <saveM2MSettings+0x5c>)
   10c08:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   10c0a:	4b07      	ldr	r3, [pc, #28]	; (10c28 <saveM2MSettings+0x60>)
   10c0c:	4798      	blx	r3
}
   10c0e:	46c0      	nop			; (mov r8, r8)
   10c10:	46bd      	mov	sp, r7
   10c12:	b002      	add	sp, #8
   10c14:	bd80      	pop	{r7, pc}
   10c16:	46c0      	nop			; (mov r8, r8)
   10c18:	20000564 	.word	0x20000564
   10c1c:	20000594 	.word	0x20000594
   10c20:	000289c5 	.word	0x000289c5
   10c24:	000235e1 	.word	0x000235e1
   10c28:	00023789 	.word	0x00023789

00010c2c <addM2MNumber>:

void addM2MNumber(char *no)
{
   10c2c:	b580      	push	{r7, lr}
   10c2e:	b082      	sub	sp, #8
   10c30:	af00      	add	r7, sp, #0
   10c32:	6078      	str	r0, [r7, #4]
	m2m_Numbers_struct.m2mPresent = true;
   10c34:	4b0f      	ldr	r3, [pc, #60]	; (10c74 <addM2MNumber+0x48>)
   10c36:	2201      	movs	r2, #1
   10c38:	705a      	strb	r2, [r3, #1]
	strcpy(m2m_Numbers_struct.m2mNumber_ee,no);
   10c3a:	687a      	ldr	r2, [r7, #4]
   10c3c:	4b0e      	ldr	r3, [pc, #56]	; (10c78 <addM2MNumber+0x4c>)
   10c3e:	0011      	movs	r1, r2
   10c40:	0018      	movs	r0, r3
   10c42:	4b0e      	ldr	r3, [pc, #56]	; (10c7c <addM2MNumber+0x50>)
   10c44:	4798      	blx	r3
	memcpy(page_data,&m2m_Numbers_struct,sizeof(m2m_Numbers_struct));
   10c46:	4a0e      	ldr	r2, [pc, #56]	; (10c80 <addM2MNumber+0x54>)
   10c48:	4b0a      	ldr	r3, [pc, #40]	; (10c74 <addM2MNumber+0x48>)
   10c4a:	0010      	movs	r0, r2
   10c4c:	0019      	movs	r1, r3
   10c4e:	2330      	movs	r3, #48	; 0x30
   10c50:	001a      	movs	r2, r3
   10c52:	4b0c      	ldr	r3, [pc, #48]	; (10c84 <addM2MNumber+0x58>)
   10c54:	4798      	blx	r3
	eeprom_emulator_write_page(M2M_NUMBERS_PAGE, page_data);
   10c56:	4b0a      	ldr	r3, [pc, #40]	; (10c80 <addM2MNumber+0x54>)
   10c58:	0019      	movs	r1, r3
   10c5a:	2019      	movs	r0, #25
   10c5c:	4b0a      	ldr	r3, [pc, #40]	; (10c88 <addM2MNumber+0x5c>)
   10c5e:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   10c60:	4b0a      	ldr	r3, [pc, #40]	; (10c8c <addM2MNumber+0x60>)
   10c62:	4798      	blx	r3
	setM2MVerify(false);
   10c64:	2000      	movs	r0, #0
   10c66:	4b0a      	ldr	r3, [pc, #40]	; (10c90 <addM2MNumber+0x64>)
   10c68:	4798      	blx	r3
}
   10c6a:	46c0      	nop			; (mov r8, r8)
   10c6c:	46bd      	mov	sp, r7
   10c6e:	b002      	add	sp, #8
   10c70:	bd80      	pop	{r7, pc}
   10c72:	46c0      	nop			; (mov r8, r8)
   10c74:	20000564 	.word	0x20000564
   10c78:	2000056c 	.word	0x2000056c
   10c7c:	00028c7b 	.word	0x00028c7b
   10c80:	20000594 	.word	0x20000594
   10c84:	000289c5 	.word	0x000289c5
   10c88:	000235e1 	.word	0x000235e1
   10c8c:	00023789 	.word	0x00023789
   10c90:	00010b29 	.word	0x00010b29

00010c94 <addM2MRemoteNumber>:

void addM2MRemoteNumber(char *no)
{
   10c94:	b580      	push	{r7, lr}
   10c96:	b082      	sub	sp, #8
   10c98:	af00      	add	r7, sp, #0
   10c9a:	6078      	str	r0, [r7, #4]
	m2m_Numbers_struct.m2mRemotePresent = true;
   10c9c:	4b10      	ldr	r3, [pc, #64]	; (10ce0 <addM2MRemoteNumber+0x4c>)
   10c9e:	2201      	movs	r2, #1
   10ca0:	70da      	strb	r2, [r3, #3]
	strcpy(m2m_Numbers_struct.m2mremoteNumber_ee,no);
   10ca2:	687a      	ldr	r2, [r7, #4]
   10ca4:	4b0f      	ldr	r3, [pc, #60]	; (10ce4 <addM2MRemoteNumber+0x50>)
   10ca6:	0011      	movs	r1, r2
   10ca8:	0018      	movs	r0, r3
   10caa:	4b0f      	ldr	r3, [pc, #60]	; (10ce8 <addM2MRemoteNumber+0x54>)
   10cac:	4798      	blx	r3
	memcpy(page_data,&m2m_Numbers_struct,sizeof(m2m_Numbers_struct));
   10cae:	4a0f      	ldr	r2, [pc, #60]	; (10cec <addM2MRemoteNumber+0x58>)
   10cb0:	4b0b      	ldr	r3, [pc, #44]	; (10ce0 <addM2MRemoteNumber+0x4c>)
   10cb2:	0010      	movs	r0, r2
   10cb4:	0019      	movs	r1, r3
   10cb6:	2330      	movs	r3, #48	; 0x30
   10cb8:	001a      	movs	r2, r3
   10cba:	4b0d      	ldr	r3, [pc, #52]	; (10cf0 <addM2MRemoteNumber+0x5c>)
   10cbc:	4798      	blx	r3
	eeprom_emulator_write_page(M2M_NUMBERS_PAGE, page_data);
   10cbe:	4b0b      	ldr	r3, [pc, #44]	; (10cec <addM2MRemoteNumber+0x58>)
   10cc0:	0019      	movs	r1, r3
   10cc2:	2019      	movs	r0, #25
   10cc4:	4b0b      	ldr	r3, [pc, #44]	; (10cf4 <addM2MRemoteNumber+0x60>)
   10cc6:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   10cc8:	4b0b      	ldr	r3, [pc, #44]	; (10cf8 <addM2MRemoteNumber+0x64>)
   10cca:	4798      	blx	r3
	setM2MRemoteVerified(false);
   10ccc:	2000      	movs	r0, #0
   10cce:	4b0b      	ldr	r3, [pc, #44]	; (10cfc <addM2MRemoteNumber+0x68>)
   10cd0:	4798      	blx	r3
	saveM2MSettings(false);
   10cd2:	2000      	movs	r0, #0
   10cd4:	4b0a      	ldr	r3, [pc, #40]	; (10d00 <addM2MRemoteNumber+0x6c>)
   10cd6:	4798      	blx	r3
}
   10cd8:	46c0      	nop			; (mov r8, r8)
   10cda:	46bd      	mov	sp, r7
   10cdc:	b002      	add	sp, #8
   10cde:	bd80      	pop	{r7, pc}
   10ce0:	20000564 	.word	0x20000564
   10ce4:	20000580 	.word	0x20000580
   10ce8:	00028c7b 	.word	0x00028c7b
   10cec:	20000594 	.word	0x20000594
   10cf0:	000289c5 	.word	0x000289c5
   10cf4:	000235e1 	.word	0x000235e1
   10cf8:	00023789 	.word	0x00023789
   10cfc:	00010b79 	.word	0x00010b79
   10d00:	00010bc9 	.word	0x00010bc9

00010d04 <getActiveNumber>:

char *getActiveNumber(char *ActiveNo)
{
   10d04:	b580      	push	{r7, lr}
   10d06:	b08e      	sub	sp, #56	; 0x38
   10d08:	af00      	add	r7, sp, #0
   10d0a:	6078      	str	r0, [r7, #4]
	if (user_count_struct.current_user_no_count > 0)
   10d0c:	4b28      	ldr	r3, [pc, #160]	; (10db0 <getActiveNumber+0xac>)
   10d0e:	789b      	ldrb	r3, [r3, #2]
   10d10:	2b00      	cmp	r3, #0
   10d12:	d02b      	beq.n	10d6c <getActiveNumber+0x68>
	{
		if ((alternateNumber_struct.alterNumberSetting))
   10d14:	4b27      	ldr	r3, [pc, #156]	; (10db4 <getActiveNumber+0xb0>)
   10d16:	785b      	ldrb	r3, [r3, #1]
   10d18:	2b00      	cmp	r3, #0
   10d1a:	d006      	beq.n	10d2a <getActiveNumber+0x26>
		{
			strcpy(ActiveNo,alternateNumber_struct.alternateNumber_ee);
   10d1c:	4a26      	ldr	r2, [pc, #152]	; (10db8 <getActiveNumber+0xb4>)
   10d1e:	687b      	ldr	r3, [r7, #4]
   10d20:	0011      	movs	r1, r2
   10d22:	0018      	movs	r0, r3
   10d24:	4b25      	ldr	r3, [pc, #148]	; (10dbc <getActiveNumber+0xb8>)
   10d26:	4798      	blx	r3
   10d28:	e03c      	b.n	10da4 <getActiveNumber+0xa0>
		}
		else
		{
			struct mobile_no_struct mobile_no;
			memset(page_data, '\0', sizeof(page_data));
   10d2a:	4b25      	ldr	r3, [pc, #148]	; (10dc0 <getActiveNumber+0xbc>)
   10d2c:	223c      	movs	r2, #60	; 0x3c
   10d2e:	2100      	movs	r1, #0
   10d30:	0018      	movs	r0, r3
   10d32:	4b24      	ldr	r3, [pc, #144]	; (10dc4 <getActiveNumber+0xc0>)
   10d34:	4798      	blx	r3
			eeprom_emulator_read_page(USER_1_MOBILE_NUMBER_PAGE+user_count_struct.primaryNumberIndex, page_data);
   10d36:	4b1e      	ldr	r3, [pc, #120]	; (10db0 <getActiveNumber+0xac>)
   10d38:	78db      	ldrb	r3, [r3, #3]
   10d3a:	3309      	adds	r3, #9
   10d3c:	b2db      	uxtb	r3, r3
   10d3e:	4a20      	ldr	r2, [pc, #128]	; (10dc0 <getActiveNumber+0xbc>)
   10d40:	0011      	movs	r1, r2
   10d42:	0018      	movs	r0, r3
   10d44:	4b20      	ldr	r3, [pc, #128]	; (10dc8 <getActiveNumber+0xc4>)
   10d46:	4798      	blx	r3
			memcpy(&mobile_no,page_data,sizeof(mobile_no));
   10d48:	2320      	movs	r3, #32
   10d4a:	18fa      	adds	r2, r7, r3
   10d4c:	4b1c      	ldr	r3, [pc, #112]	; (10dc0 <getActiveNumber+0xbc>)
   10d4e:	0010      	movs	r0, r2
   10d50:	0019      	movs	r1, r3
   10d52:	2318      	movs	r3, #24
   10d54:	001a      	movs	r2, r3
   10d56:	4b1d      	ldr	r3, [pc, #116]	; (10dcc <getActiveNumber+0xc8>)
   10d58:	4798      	blx	r3
			strcpy(ActiveNo,mobile_no.mobile_no_ee);
   10d5a:	2320      	movs	r3, #32
   10d5c:	18fb      	adds	r3, r7, r3
   10d5e:	1d1a      	adds	r2, r3, #4
   10d60:	687b      	ldr	r3, [r7, #4]
   10d62:	0011      	movs	r1, r2
   10d64:	0018      	movs	r0, r3
   10d66:	4b15      	ldr	r3, [pc, #84]	; (10dbc <getActiveNumber+0xb8>)
   10d68:	4798      	blx	r3
   10d6a:	e01b      	b.n	10da4 <getActiveNumber+0xa0>
		}
	}
	else																					// no effect of this portion as registerEvent checks for numbercount is > 0
	{
		struct mobile_no_struct mobile_no;
		memset(page_data, '\0', sizeof(page_data));
   10d6c:	4b14      	ldr	r3, [pc, #80]	; (10dc0 <getActiveNumber+0xbc>)
   10d6e:	223c      	movs	r2, #60	; 0x3c
   10d70:	2100      	movs	r1, #0
   10d72:	0018      	movs	r0, r3
   10d74:	4b13      	ldr	r3, [pc, #76]	; (10dc4 <getActiveNumber+0xc0>)
   10d76:	4798      	blx	r3
		eeprom_emulator_read_page(ADMIN_1_MOBILE_NUMBER_PAGE, page_data);
   10d78:	4b11      	ldr	r3, [pc, #68]	; (10dc0 <getActiveNumber+0xbc>)
   10d7a:	0019      	movs	r1, r3
   10d7c:	2003      	movs	r0, #3
   10d7e:	4b12      	ldr	r3, [pc, #72]	; (10dc8 <getActiveNumber+0xc4>)
   10d80:	4798      	blx	r3
		memcpy(&mobile_no,page_data,sizeof(mobile_no));
   10d82:	2308      	movs	r3, #8
   10d84:	18fa      	adds	r2, r7, r3
   10d86:	4b0e      	ldr	r3, [pc, #56]	; (10dc0 <getActiveNumber+0xbc>)
   10d88:	0010      	movs	r0, r2
   10d8a:	0019      	movs	r1, r3
   10d8c:	2318      	movs	r3, #24
   10d8e:	001a      	movs	r2, r3
   10d90:	4b0e      	ldr	r3, [pc, #56]	; (10dcc <getActiveNumber+0xc8>)
   10d92:	4798      	blx	r3
		strcpy(ActiveNo,mobile_no.mobile_no_ee);
   10d94:	2308      	movs	r3, #8
   10d96:	18fb      	adds	r3, r7, r3
   10d98:	1d1a      	adds	r2, r3, #4
   10d9a:	687b      	ldr	r3, [r7, #4]
   10d9c:	0011      	movs	r1, r2
   10d9e:	0018      	movs	r0, r3
   10da0:	4b06      	ldr	r3, [pc, #24]	; (10dbc <getActiveNumber+0xb8>)
   10da2:	4798      	blx	r3
	}
	
	return ActiveNo;
   10da4:	687b      	ldr	r3, [r7, #4]
}
   10da6:	0018      	movs	r0, r3
   10da8:	46bd      	mov	sp, r7
   10daa:	b00e      	add	sp, #56	; 0x38
   10dac:	bd80      	pop	{r7, pc}
   10dae:	46c0      	nop			; (mov r8, r8)
   10db0:	20000620 	.word	0x20000620
   10db4:	20000648 	.word	0x20000648
   10db8:	2000064c 	.word	0x2000064c
   10dbc:	00028c7b 	.word	0x00028c7b
   10dc0:	20000594 	.word	0x20000594
   10dc4:	000289fb 	.word	0x000289fb
   10dc8:	000236ed 	.word	0x000236ed
   10dcc:	000289c5 	.word	0x000289c5

00010dd0 <checkExists>:
uint8_t checkExists(char *number)
{
   10dd0:	b580      	push	{r7, lr}
   10dd2:	b08a      	sub	sp, #40	; 0x28
   10dd4:	af00      	add	r7, sp, #0
   10dd6:	6078      	str	r0, [r7, #4]
	if (user_count_struct.current_user_no_count > 0)
   10dd8:	4b33      	ldr	r3, [pc, #204]	; (10ea8 <checkExists+0xd8>)
   10dda:	789b      	ldrb	r3, [r3, #2]
   10ddc:	2b00      	cmp	r3, #0
   10dde:	d039      	beq.n	10e54 <checkExists+0x84>
		//if(isPrimaryNumber(number))
		//{
		//return 0;
		//}
		
		for (uint8_t i=0;i<user_count_struct.current_user_no_count;i++)
   10de0:	2327      	movs	r3, #39	; 0x27
   10de2:	18fb      	adds	r3, r7, r3
   10de4:	2200      	movs	r2, #0
   10de6:	701a      	strb	r2, [r3, #0]
   10de8:	e02d      	b.n	10e46 <checkExists+0x76>
		{
			struct mobile_no_struct mobile_no;
			memset(page_data, '\0', sizeof(page_data));
   10dea:	4b30      	ldr	r3, [pc, #192]	; (10eac <checkExists+0xdc>)
   10dec:	223c      	movs	r2, #60	; 0x3c
   10dee:	2100      	movs	r1, #0
   10df0:	0018      	movs	r0, r3
   10df2:	4b2f      	ldr	r3, [pc, #188]	; (10eb0 <checkExists+0xe0>)
   10df4:	4798      	blx	r3
			eeprom_emulator_read_page(USER_1_MOBILE_NUMBER_PAGE+i, page_data);
   10df6:	2327      	movs	r3, #39	; 0x27
   10df8:	18fb      	adds	r3, r7, r3
   10dfa:	781b      	ldrb	r3, [r3, #0]
   10dfc:	3309      	adds	r3, #9
   10dfe:	b2db      	uxtb	r3, r3
   10e00:	4a2a      	ldr	r2, [pc, #168]	; (10eac <checkExists+0xdc>)
   10e02:	0011      	movs	r1, r2
   10e04:	0018      	movs	r0, r3
   10e06:	4b2b      	ldr	r3, [pc, #172]	; (10eb4 <checkExists+0xe4>)
   10e08:	4798      	blx	r3
			memcpy(&mobile_no,page_data,sizeof(mobile_no));
   10e0a:	230c      	movs	r3, #12
   10e0c:	18fa      	adds	r2, r7, r3
   10e0e:	4b27      	ldr	r3, [pc, #156]	; (10eac <checkExists+0xdc>)
   10e10:	0010      	movs	r0, r2
   10e12:	0019      	movs	r1, r3
   10e14:	2318      	movs	r3, #24
   10e16:	001a      	movs	r2, r3
   10e18:	4b27      	ldr	r3, [pc, #156]	; (10eb8 <checkExists+0xe8>)
   10e1a:	4798      	blx	r3
			if (strstr(number,mobile_no.mobile_no_ee))
   10e1c:	230c      	movs	r3, #12
   10e1e:	18fb      	adds	r3, r7, r3
   10e20:	1d1a      	adds	r2, r3, #4
   10e22:	687b      	ldr	r3, [r7, #4]
   10e24:	0011      	movs	r1, r2
   10e26:	0018      	movs	r0, r3
   10e28:	4b24      	ldr	r3, [pc, #144]	; (10ebc <checkExists+0xec>)
   10e2a:	4798      	blx	r3
   10e2c:	1e03      	subs	r3, r0, #0
   10e2e:	d003      	beq.n	10e38 <checkExists+0x68>
			{
				return i;
   10e30:	2327      	movs	r3, #39	; 0x27
   10e32:	18fb      	adds	r3, r7, r3
   10e34:	781b      	ldrb	r3, [r3, #0]
   10e36:	e032      	b.n	10e9e <checkExists+0xce>
		for (uint8_t i=0;i<user_count_struct.current_user_no_count;i++)
   10e38:	2327      	movs	r3, #39	; 0x27
   10e3a:	18fb      	adds	r3, r7, r3
   10e3c:	781a      	ldrb	r2, [r3, #0]
   10e3e:	2327      	movs	r3, #39	; 0x27
   10e40:	18fb      	adds	r3, r7, r3
   10e42:	3201      	adds	r2, #1
   10e44:	701a      	strb	r2, [r3, #0]
   10e46:	4b18      	ldr	r3, [pc, #96]	; (10ea8 <checkExists+0xd8>)
   10e48:	789b      	ldrb	r3, [r3, #2]
   10e4a:	2227      	movs	r2, #39	; 0x27
   10e4c:	18ba      	adds	r2, r7, r2
   10e4e:	7812      	ldrb	r2, [r2, #0]
   10e50:	429a      	cmp	r2, r3
   10e52:	d3ca      	bcc.n	10dea <checkExists+0x1a>
			}
		}
	}

	if(isAlterNumber(number))
   10e54:	687b      	ldr	r3, [r7, #4]
   10e56:	0018      	movs	r0, r3
   10e58:	4b19      	ldr	r3, [pc, #100]	; (10ec0 <checkExists+0xf0>)
   10e5a:	4798      	blx	r3
   10e5c:	1e03      	subs	r3, r0, #0
   10e5e:	d001      	beq.n	10e64 <checkExists+0x94>
	{
		return 0xFD;
   10e60:	23fd      	movs	r3, #253	; 0xfd
   10e62:	e01c      	b.n	10e9e <checkExists+0xce>
	}

	if((m2m_Numbers_struct.m2mVerified) && isM2MNumber(number))
   10e64:	4b17      	ldr	r3, [pc, #92]	; (10ec4 <checkExists+0xf4>)
   10e66:	789b      	ldrb	r3, [r3, #2]
   10e68:	2b00      	cmp	r3, #0
   10e6a:	d007      	beq.n	10e7c <checkExists+0xac>
   10e6c:	687b      	ldr	r3, [r7, #4]
   10e6e:	0018      	movs	r0, r3
   10e70:	4b15      	ldr	r3, [pc, #84]	; (10ec8 <checkExists+0xf8>)
   10e72:	4798      	blx	r3
   10e74:	1e03      	subs	r3, r0, #0
   10e76:	d001      	beq.n	10e7c <checkExists+0xac>
	{
		return 0xFE;
   10e78:	23fe      	movs	r3, #254	; 0xfe
   10e7a:	e010      	b.n	10e9e <checkExists+0xce>
	}
	if (factory_settings_parameter_struct.ENABLE_M2M)
   10e7c:	4b13      	ldr	r3, [pc, #76]	; (10ecc <checkExists+0xfc>)
   10e7e:	78db      	ldrb	r3, [r3, #3]
   10e80:	2b00      	cmp	r3, #0
   10e82:	d00b      	beq.n	10e9c <checkExists+0xcc>
	{
		if ((m2m_Numbers_struct.m2mRemoteVerified) && isM2MRemoteNumber(number))
   10e84:	4b0f      	ldr	r3, [pc, #60]	; (10ec4 <checkExists+0xf4>)
   10e86:	791b      	ldrb	r3, [r3, #4]
   10e88:	2b00      	cmp	r3, #0
   10e8a:	d007      	beq.n	10e9c <checkExists+0xcc>
   10e8c:	687b      	ldr	r3, [r7, #4]
   10e8e:	0018      	movs	r0, r3
   10e90:	4b0f      	ldr	r3, [pc, #60]	; (10ed0 <checkExists+0x100>)
   10e92:	4798      	blx	r3
   10e94:	1e03      	subs	r3, r0, #0
   10e96:	d001      	beq.n	10e9c <checkExists+0xcc>
		{
			return 0xFE;
   10e98:	23fe      	movs	r3, #254	; 0xfe
   10e9a:	e000      	b.n	10e9e <checkExists+0xce>
		}
	}
	return 0xFF;
   10e9c:	23ff      	movs	r3, #255	; 0xff
}
   10e9e:	0018      	movs	r0, r3
   10ea0:	46bd      	mov	sp, r7
   10ea2:	b00a      	add	sp, #40	; 0x28
   10ea4:	bd80      	pop	{r7, pc}
   10ea6:	46c0      	nop			; (mov r8, r8)
   10ea8:	20000620 	.word	0x20000620
   10eac:	20000594 	.word	0x20000594
   10eb0:	000289fb 	.word	0x000289fb
   10eb4:	000236ed 	.word	0x000236ed
   10eb8:	000289c5 	.word	0x000289c5
   10ebc:	00028cbb 	.word	0x00028cbb
   10ec0:	000109f1 	.word	0x000109f1
   10ec4:	20000564 	.word	0x20000564
   10ec8:	00010a39 	.word	0x00010a39
   10ecc:	20000638 	.word	0x20000638
   10ed0:	00010a75 	.word	0x00010a75

00010ed4 <addNumber>:

bool addNumber(char *number)
{
   10ed4:	b580      	push	{r7, lr}
   10ed6:	b088      	sub	sp, #32
   10ed8:	af00      	add	r7, sp, #0
   10eda:	6078      	str	r0, [r7, #4]
	if (user_count_struct.current_user_no_count == user_count_struct.total_user_no_count)
   10edc:	4b33      	ldr	r3, [pc, #204]	; (10fac <addNumber+0xd8>)
   10ede:	789a      	ldrb	r2, [r3, #2]
   10ee0:	4b32      	ldr	r3, [pc, #200]	; (10fac <addNumber+0xd8>)
   10ee2:	785b      	ldrb	r3, [r3, #1]
   10ee4:	429a      	cmp	r2, r3
   10ee6:	d101      	bne.n	10eec <addNumber+0x18>
	{
		return false;
   10ee8:	2300      	movs	r3, #0
   10eea:	e05a      	b.n	10fa2 <addNumber+0xce>
	}
	else
	{
		if (checkExists(number) > 0xF0)
   10eec:	687b      	ldr	r3, [r7, #4]
   10eee:	0018      	movs	r0, r3
   10ef0:	4b2f      	ldr	r3, [pc, #188]	; (10fb0 <addNumber+0xdc>)
   10ef2:	4798      	blx	r3
   10ef4:	0003      	movs	r3, r0
   10ef6:	2bf0      	cmp	r3, #240	; 0xf0
   10ef8:	d952      	bls.n	10fa0 <addNumber+0xcc>
		{
			struct mobile_no_struct mobile_no;
			memset(page_data, '\0', sizeof(page_data));
   10efa:	4b2e      	ldr	r3, [pc, #184]	; (10fb4 <addNumber+0xe0>)
   10efc:	223c      	movs	r2, #60	; 0x3c
   10efe:	2100      	movs	r1, #0
   10f00:	0018      	movs	r0, r3
   10f02:	4b2d      	ldr	r3, [pc, #180]	; (10fb8 <addNumber+0xe4>)
   10f04:	4798      	blx	r3
			eeprom_emulator_read_page((USER_1_MOBILE_NUMBER_PAGE+user_count_struct.current_user_no_count), page_data);
   10f06:	4b29      	ldr	r3, [pc, #164]	; (10fac <addNumber+0xd8>)
   10f08:	789b      	ldrb	r3, [r3, #2]
   10f0a:	3309      	adds	r3, #9
   10f0c:	b2db      	uxtb	r3, r3
   10f0e:	4a29      	ldr	r2, [pc, #164]	; (10fb4 <addNumber+0xe0>)
   10f10:	0011      	movs	r1, r2
   10f12:	0018      	movs	r0, r3
   10f14:	4b29      	ldr	r3, [pc, #164]	; (10fbc <addNumber+0xe8>)
   10f16:	4798      	blx	r3
			memcpy(&mobile_no,page_data,sizeof(mobile_no));
   10f18:	2308      	movs	r3, #8
   10f1a:	18fa      	adds	r2, r7, r3
   10f1c:	4b25      	ldr	r3, [pc, #148]	; (10fb4 <addNumber+0xe0>)
   10f1e:	0010      	movs	r0, r2
   10f20:	0019      	movs	r1, r3
   10f22:	2318      	movs	r3, #24
   10f24:	001a      	movs	r2, r3
   10f26:	4b26      	ldr	r3, [pc, #152]	; (10fc0 <addNumber+0xec>)
   10f28:	4798      	blx	r3
			
			memset(mobile_no.mobile_no_ee, '\0', sizeof(mobile_no.mobile_no_ee));
   10f2a:	2308      	movs	r3, #8
   10f2c:	18fb      	adds	r3, r7, r3
   10f2e:	3304      	adds	r3, #4
   10f30:	2214      	movs	r2, #20
   10f32:	2100      	movs	r1, #0
   10f34:	0018      	movs	r0, r3
   10f36:	4b20      	ldr	r3, [pc, #128]	; (10fb8 <addNumber+0xe4>)
   10f38:	4798      	blx	r3
			strcpy(mobile_no.mobile_no_ee,number);
   10f3a:	687a      	ldr	r2, [r7, #4]
   10f3c:	2308      	movs	r3, #8
   10f3e:	18fb      	adds	r3, r7, r3
   10f40:	3304      	adds	r3, #4
   10f42:	0011      	movs	r1, r2
   10f44:	0018      	movs	r0, r3
   10f46:	4b1f      	ldr	r3, [pc, #124]	; (10fc4 <addNumber+0xf0>)
   10f48:	4798      	blx	r3
			
			memcpy(page_data,&mobile_no,sizeof(mobile_no));
   10f4a:	4a1a      	ldr	r2, [pc, #104]	; (10fb4 <addNumber+0xe0>)
   10f4c:	2308      	movs	r3, #8
   10f4e:	18fb      	adds	r3, r7, r3
   10f50:	0010      	movs	r0, r2
   10f52:	0019      	movs	r1, r3
   10f54:	2318      	movs	r3, #24
   10f56:	001a      	movs	r2, r3
   10f58:	4b19      	ldr	r3, [pc, #100]	; (10fc0 <addNumber+0xec>)
   10f5a:	4798      	blx	r3
			eeprom_emulator_write_page((USER_1_MOBILE_NUMBER_PAGE+user_count_struct.current_user_no_count), page_data);
   10f5c:	4b13      	ldr	r3, [pc, #76]	; (10fac <addNumber+0xd8>)
   10f5e:	789b      	ldrb	r3, [r3, #2]
   10f60:	3309      	adds	r3, #9
   10f62:	b2db      	uxtb	r3, r3
   10f64:	4a13      	ldr	r2, [pc, #76]	; (10fb4 <addNumber+0xe0>)
   10f66:	0011      	movs	r1, r2
   10f68:	0018      	movs	r0, r3
   10f6a:	4b17      	ldr	r3, [pc, #92]	; (10fc8 <addNumber+0xf4>)
   10f6c:	4798      	blx	r3
			eeprom_emulator_commit_page_buffer();
   10f6e:	4b17      	ldr	r3, [pc, #92]	; (10fcc <addNumber+0xf8>)
   10f70:	4798      	blx	r3
			
			user_count_struct.current_user_no_count++;
   10f72:	4b0e      	ldr	r3, [pc, #56]	; (10fac <addNumber+0xd8>)
   10f74:	789b      	ldrb	r3, [r3, #2]
   10f76:	3301      	adds	r3, #1
   10f78:	b2da      	uxtb	r2, r3
   10f7a:	4b0c      	ldr	r3, [pc, #48]	; (10fac <addNumber+0xd8>)
   10f7c:	709a      	strb	r2, [r3, #2]
			
			memcpy(page_data,&user_count_struct,sizeof(user_count_struct));
   10f7e:	4a0d      	ldr	r2, [pc, #52]	; (10fb4 <addNumber+0xe0>)
   10f80:	4b0a      	ldr	r3, [pc, #40]	; (10fac <addNumber+0xd8>)
   10f82:	0010      	movs	r0, r2
   10f84:	0019      	movs	r1, r3
   10f86:	2308      	movs	r3, #8
   10f88:	001a      	movs	r2, r3
   10f8a:	4b0d      	ldr	r3, [pc, #52]	; (10fc0 <addNumber+0xec>)
   10f8c:	4798      	blx	r3
			eeprom_emulator_write_page(USER_COUNTER_PAGE, page_data);
   10f8e:	4b09      	ldr	r3, [pc, #36]	; (10fb4 <addNumber+0xe0>)
   10f90:	0019      	movs	r1, r3
   10f92:	2008      	movs	r0, #8
   10f94:	4b0c      	ldr	r3, [pc, #48]	; (10fc8 <addNumber+0xf4>)
   10f96:	4798      	blx	r3
			eeprom_emulator_commit_page_buffer();
   10f98:	4b0c      	ldr	r3, [pc, #48]	; (10fcc <addNumber+0xf8>)
   10f9a:	4798      	blx	r3
			
			return true;
   10f9c:	2301      	movs	r3, #1
   10f9e:	e000      	b.n	10fa2 <addNumber+0xce>
		}
	}
	return false;
   10fa0:	2300      	movs	r3, #0
}
   10fa2:	0018      	movs	r0, r3
   10fa4:	46bd      	mov	sp, r7
   10fa6:	b008      	add	sp, #32
   10fa8:	bd80      	pop	{r7, pc}
   10faa:	46c0      	nop			; (mov r8, r8)
   10fac:	20000620 	.word	0x20000620
   10fb0:	00010dd1 	.word	0x00010dd1
   10fb4:	20000594 	.word	0x20000594
   10fb8:	000289fb 	.word	0x000289fb
   10fbc:	000236ed 	.word	0x000236ed
   10fc0:	000289c5 	.word	0x000289c5
   10fc4:	00028c7b 	.word	0x00028c7b
   10fc8:	000235e1 	.word	0x000235e1
   10fcc:	00023789 	.word	0x00023789

00010fd0 <removeNumber>:

bool removeNumber(char *numer)
{
   10fd0:	b590      	push	{r4, r7, lr}
   10fd2:	b085      	sub	sp, #20
   10fd4:	af00      	add	r7, sp, #0
   10fd6:	6078      	str	r0, [r7, #4]
	if (user_count_struct.current_user_no_count < 2)
   10fd8:	4b3d      	ldr	r3, [pc, #244]	; (110d0 <removeNumber+0x100>)
   10fda:	789b      	ldrb	r3, [r3, #2]
   10fdc:	2b01      	cmp	r3, #1
   10fde:	d801      	bhi.n	10fe4 <removeNumber+0x14>
	{
		return false;
   10fe0:	2300      	movs	r3, #0
   10fe2:	e071      	b.n	110c8 <removeNumber+0xf8>
	}
	else
	{
		uint8_t loc =  checkExists(numer);
   10fe4:	230e      	movs	r3, #14
   10fe6:	18fc      	adds	r4, r7, r3
   10fe8:	687b      	ldr	r3, [r7, #4]
   10fea:	0018      	movs	r0, r3
   10fec:	4b39      	ldr	r3, [pc, #228]	; (110d4 <removeNumber+0x104>)
   10fee:	4798      	blx	r3
   10ff0:	0003      	movs	r3, r0
   10ff2:	7023      	strb	r3, [r4, #0]
		if ((loc < user_count_struct.total_user_no_count) && (loc != user_count_struct.primaryNumberIndex))	//number is not special number(i.e. alter,m2m,m2mRemote) and not primary number
   10ff4:	4b36      	ldr	r3, [pc, #216]	; (110d0 <removeNumber+0x100>)
   10ff6:	785b      	ldrb	r3, [r3, #1]
   10ff8:	220e      	movs	r2, #14
   10ffa:	18ba      	adds	r2, r7, r2
   10ffc:	7812      	ldrb	r2, [r2, #0]
   10ffe:	429a      	cmp	r2, r3
   11000:	d261      	bcs.n	110c6 <removeNumber+0xf6>
   11002:	4b33      	ldr	r3, [pc, #204]	; (110d0 <removeNumber+0x100>)
   11004:	78db      	ldrb	r3, [r3, #3]
   11006:	220e      	movs	r2, #14
   11008:	18ba      	adds	r2, r7, r2
   1100a:	7812      	ldrb	r2, [r2, #0]
   1100c:	429a      	cmp	r2, r3
   1100e:	d05a      	beq.n	110c6 <removeNumber+0xf6>
		{
			for (uint8_t i=loc;i<(user_count_struct.current_user_no_count-1);i++)
   11010:	230f      	movs	r3, #15
   11012:	18fb      	adds	r3, r7, r3
   11014:	220e      	movs	r2, #14
   11016:	18ba      	adds	r2, r7, r2
   11018:	7812      	ldrb	r2, [r2, #0]
   1101a:	701a      	strb	r2, [r3, #0]
   1101c:	e022      	b.n	11064 <removeNumber+0x94>
			{
				memset(page_data, '\0', sizeof(page_data));
   1101e:	4b2e      	ldr	r3, [pc, #184]	; (110d8 <removeNumber+0x108>)
   11020:	223c      	movs	r2, #60	; 0x3c
   11022:	2100      	movs	r1, #0
   11024:	0018      	movs	r0, r3
   11026:	4b2d      	ldr	r3, [pc, #180]	; (110dc <removeNumber+0x10c>)
   11028:	4798      	blx	r3
				eeprom_emulator_read_page(USER_1_MOBILE_NUMBER_PAGE+i+1, page_data);
   1102a:	230f      	movs	r3, #15
   1102c:	18fb      	adds	r3, r7, r3
   1102e:	781b      	ldrb	r3, [r3, #0]
   11030:	330a      	adds	r3, #10
   11032:	b2db      	uxtb	r3, r3
   11034:	4a28      	ldr	r2, [pc, #160]	; (110d8 <removeNumber+0x108>)
   11036:	0011      	movs	r1, r2
   11038:	0018      	movs	r0, r3
   1103a:	4b29      	ldr	r3, [pc, #164]	; (110e0 <removeNumber+0x110>)
   1103c:	4798      	blx	r3
				eeprom_emulator_write_page(USER_1_MOBILE_NUMBER_PAGE+i, page_data);
   1103e:	230f      	movs	r3, #15
   11040:	18fb      	adds	r3, r7, r3
   11042:	781b      	ldrb	r3, [r3, #0]
   11044:	3309      	adds	r3, #9
   11046:	b2db      	uxtb	r3, r3
   11048:	4a23      	ldr	r2, [pc, #140]	; (110d8 <removeNumber+0x108>)
   1104a:	0011      	movs	r1, r2
   1104c:	0018      	movs	r0, r3
   1104e:	4b25      	ldr	r3, [pc, #148]	; (110e4 <removeNumber+0x114>)
   11050:	4798      	blx	r3
				eeprom_emulator_commit_page_buffer();
   11052:	4b25      	ldr	r3, [pc, #148]	; (110e8 <removeNumber+0x118>)
   11054:	4798      	blx	r3
			for (uint8_t i=loc;i<(user_count_struct.current_user_no_count-1);i++)
   11056:	230f      	movs	r3, #15
   11058:	18fb      	adds	r3, r7, r3
   1105a:	781a      	ldrb	r2, [r3, #0]
   1105c:	230f      	movs	r3, #15
   1105e:	18fb      	adds	r3, r7, r3
   11060:	3201      	adds	r2, #1
   11062:	701a      	strb	r2, [r3, #0]
   11064:	230f      	movs	r3, #15
   11066:	18fb      	adds	r3, r7, r3
   11068:	781a      	ldrb	r2, [r3, #0]
   1106a:	4b19      	ldr	r3, [pc, #100]	; (110d0 <removeNumber+0x100>)
   1106c:	789b      	ldrb	r3, [r3, #2]
   1106e:	3b01      	subs	r3, #1
   11070:	429a      	cmp	r2, r3
   11072:	dbd4      	blt.n	1101e <removeNumber+0x4e>
			}
			user_count_struct.current_user_no_count--;
   11074:	4b16      	ldr	r3, [pc, #88]	; (110d0 <removeNumber+0x100>)
   11076:	789b      	ldrb	r3, [r3, #2]
   11078:	3b01      	subs	r3, #1
   1107a:	b2da      	uxtb	r2, r3
   1107c:	4b14      	ldr	r3, [pc, #80]	; (110d0 <removeNumber+0x100>)
   1107e:	709a      	strb	r2, [r3, #2]
			
			if(loc==user_count_struct.secondaryNumberIndex || loc>user_count_struct.current_user_no_count-1)
   11080:	4b13      	ldr	r3, [pc, #76]	; (110d0 <removeNumber+0x100>)
   11082:	791b      	ldrb	r3, [r3, #4]
   11084:	220e      	movs	r2, #14
   11086:	18ba      	adds	r2, r7, r2
   11088:	7812      	ldrb	r2, [r2, #0]
   1108a:	429a      	cmp	r2, r3
   1108c:	d007      	beq.n	1109e <removeNumber+0xce>
   1108e:	230e      	movs	r3, #14
   11090:	18fb      	adds	r3, r7, r3
   11092:	781a      	ldrb	r2, [r3, #0]
   11094:	4b0e      	ldr	r3, [pc, #56]	; (110d0 <removeNumber+0x100>)
   11096:	789b      	ldrb	r3, [r3, #2]
   11098:	3b01      	subs	r3, #1
   1109a:	429a      	cmp	r2, r3
   1109c:	dd02      	ble.n	110a4 <removeNumber+0xd4>
			{
				user_count_struct.secondaryNumberIndex= 1;
   1109e:	4b0c      	ldr	r3, [pc, #48]	; (110d0 <removeNumber+0x100>)
   110a0:	2201      	movs	r2, #1
   110a2:	711a      	strb	r2, [r3, #4]
			}
			memcpy(page_data,&user_count_struct,sizeof(user_count_struct));
   110a4:	4a0c      	ldr	r2, [pc, #48]	; (110d8 <removeNumber+0x108>)
   110a6:	4b0a      	ldr	r3, [pc, #40]	; (110d0 <removeNumber+0x100>)
   110a8:	0010      	movs	r0, r2
   110aa:	0019      	movs	r1, r3
   110ac:	2308      	movs	r3, #8
   110ae:	001a      	movs	r2, r3
   110b0:	4b0e      	ldr	r3, [pc, #56]	; (110ec <removeNumber+0x11c>)
   110b2:	4798      	blx	r3
			eeprom_emulator_write_page(USER_COUNTER_PAGE, page_data);
   110b4:	4b08      	ldr	r3, [pc, #32]	; (110d8 <removeNumber+0x108>)
   110b6:	0019      	movs	r1, r3
   110b8:	2008      	movs	r0, #8
   110ba:	4b0a      	ldr	r3, [pc, #40]	; (110e4 <removeNumber+0x114>)
   110bc:	4798      	blx	r3
			eeprom_emulator_commit_page_buffer();
   110be:	4b0a      	ldr	r3, [pc, #40]	; (110e8 <removeNumber+0x118>)
   110c0:	4798      	blx	r3
			return true;
   110c2:	2301      	movs	r3, #1
   110c4:	e000      	b.n	110c8 <removeNumber+0xf8>
		}
	}
	return false;
   110c6:	2300      	movs	r3, #0
}
   110c8:	0018      	movs	r0, r3
   110ca:	46bd      	mov	sp, r7
   110cc:	b005      	add	sp, #20
   110ce:	bd90      	pop	{r4, r7, pc}
   110d0:	20000620 	.word	0x20000620
   110d4:	00010dd1 	.word	0x00010dd1
   110d8:	20000594 	.word	0x20000594
   110dc:	000289fb 	.word	0x000289fb
   110e0:	000236ed 	.word	0x000236ed
   110e4:	000235e1 	.word	0x000235e1
   110e8:	00023789 	.word	0x00023789
   110ec:	000289c5 	.word	0x000289c5

000110f0 <clearNumbers>:

void clearNumbers(bool admin)
{
   110f0:	b580      	push	{r7, lr}
   110f2:	b082      	sub	sp, #8
   110f4:	af00      	add	r7, sp, #0
   110f6:	0002      	movs	r2, r0
   110f8:	1dfb      	adds	r3, r7, #7
   110fa:	701a      	strb	r2, [r3, #0]
	if (admin)
   110fc:	1dfb      	adds	r3, r7, #7
   110fe:	781b      	ldrb	r3, [r3, #0]
   11100:	2b00      	cmp	r3, #0
   11102:	d003      	beq.n	1110c <clearNumbers+0x1c>
	{
		user_count_struct.current_user_no_count = 0;
   11104:	4b28      	ldr	r3, [pc, #160]	; (111a8 <clearNumbers+0xb8>)
   11106:	2200      	movs	r2, #0
   11108:	709a      	strb	r2, [r3, #2]
   1110a:	e018      	b.n	1113e <clearNumbers+0x4e>
	}
	else
	{
		memset(page_data, '\0', sizeof(page_data));
   1110c:	4b27      	ldr	r3, [pc, #156]	; (111ac <clearNumbers+0xbc>)
   1110e:	223c      	movs	r2, #60	; 0x3c
   11110:	2100      	movs	r1, #0
   11112:	0018      	movs	r0, r3
   11114:	4b26      	ldr	r3, [pc, #152]	; (111b0 <clearNumbers+0xc0>)
   11116:	4798      	blx	r3
		eeprom_emulator_read_page(USER_1_MOBILE_NUMBER_PAGE+user_count_struct.primaryNumberIndex, page_data);
   11118:	4b23      	ldr	r3, [pc, #140]	; (111a8 <clearNumbers+0xb8>)
   1111a:	78db      	ldrb	r3, [r3, #3]
   1111c:	3309      	adds	r3, #9
   1111e:	b2db      	uxtb	r3, r3
   11120:	4a22      	ldr	r2, [pc, #136]	; (111ac <clearNumbers+0xbc>)
   11122:	0011      	movs	r1, r2
   11124:	0018      	movs	r0, r3
   11126:	4b23      	ldr	r3, [pc, #140]	; (111b4 <clearNumbers+0xc4>)
   11128:	4798      	blx	r3
		eeprom_emulator_write_page(USER_1_MOBILE_NUMBER_PAGE, page_data);
   1112a:	4b20      	ldr	r3, [pc, #128]	; (111ac <clearNumbers+0xbc>)
   1112c:	0019      	movs	r1, r3
   1112e:	2009      	movs	r0, #9
   11130:	4b21      	ldr	r3, [pc, #132]	; (111b8 <clearNumbers+0xc8>)
   11132:	4798      	blx	r3
		eeprom_emulator_commit_page_buffer();
   11134:	4b21      	ldr	r3, [pc, #132]	; (111bc <clearNumbers+0xcc>)
   11136:	4798      	blx	r3

		user_count_struct.current_user_no_count = 1;
   11138:	4b1b      	ldr	r3, [pc, #108]	; (111a8 <clearNumbers+0xb8>)
   1113a:	2201      	movs	r2, #1
   1113c:	709a      	strb	r2, [r3, #2]
		
	}
	user_count_struct.primaryNumberIndex=0;
   1113e:	4b1a      	ldr	r3, [pc, #104]	; (111a8 <clearNumbers+0xb8>)
   11140:	2200      	movs	r2, #0
   11142:	70da      	strb	r2, [r3, #3]
	user_count_struct.secondaryNumberIndex=1;
   11144:	4b18      	ldr	r3, [pc, #96]	; (111a8 <clearNumbers+0xb8>)
   11146:	2201      	movs	r2, #1
   11148:	711a      	strb	r2, [r3, #4]

	memcpy(page_data,&user_count_struct,sizeof(user_count_struct));
   1114a:	4a18      	ldr	r2, [pc, #96]	; (111ac <clearNumbers+0xbc>)
   1114c:	4b16      	ldr	r3, [pc, #88]	; (111a8 <clearNumbers+0xb8>)
   1114e:	0010      	movs	r0, r2
   11150:	0019      	movs	r1, r3
   11152:	2308      	movs	r3, #8
   11154:	001a      	movs	r2, r3
   11156:	4b1a      	ldr	r3, [pc, #104]	; (111c0 <clearNumbers+0xd0>)
   11158:	4798      	blx	r3
	user_count_struct.primaryNumberIndex=0;
   1115a:	4b13      	ldr	r3, [pc, #76]	; (111a8 <clearNumbers+0xb8>)
   1115c:	2200      	movs	r2, #0
   1115e:	70da      	strb	r2, [r3, #3]
	user_count_struct.secondaryNumberIndex=1;
   11160:	4b11      	ldr	r3, [pc, #68]	; (111a8 <clearNumbers+0xb8>)
   11162:	2201      	movs	r2, #1
   11164:	711a      	strb	r2, [r3, #4]
	eeprom_emulator_write_page(USER_COUNTER_PAGE, page_data);
   11166:	4b11      	ldr	r3, [pc, #68]	; (111ac <clearNumbers+0xbc>)
   11168:	0019      	movs	r1, r3
   1116a:	2008      	movs	r0, #8
   1116c:	4b12      	ldr	r3, [pc, #72]	; (111b8 <clearNumbers+0xc8>)
   1116e:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   11170:	4b12      	ldr	r3, [pc, #72]	; (111bc <clearNumbers+0xcc>)
   11172:	4798      	blx	r3
	
	saveAlterNumberSetting(false);
   11174:	2000      	movs	r0, #0
   11176:	4b13      	ldr	r3, [pc, #76]	; (111c4 <clearNumbers+0xd4>)
   11178:	4798      	blx	r3
	
	alternateNumber_struct.alterNumberPresent = false;
   1117a:	4b13      	ldr	r3, [pc, #76]	; (111c8 <clearNumbers+0xd8>)
   1117c:	2200      	movs	r2, #0
   1117e:	709a      	strb	r2, [r3, #2]
	memcpy(page_data,&alternateNumber_struct,sizeof(alternateNumber_struct));
   11180:	4a0a      	ldr	r2, [pc, #40]	; (111ac <clearNumbers+0xbc>)
   11182:	4b11      	ldr	r3, [pc, #68]	; (111c8 <clearNumbers+0xd8>)
   11184:	0010      	movs	r0, r2
   11186:	0019      	movs	r1, r3
   11188:	2318      	movs	r3, #24
   1118a:	001a      	movs	r2, r3
   1118c:	4b0c      	ldr	r3, [pc, #48]	; (111c0 <clearNumbers+0xd0>)
   1118e:	4798      	blx	r3
	eeprom_emulator_write_page(ALTARNATE_NUMBERS_PAGE, page_data);
   11190:	4b06      	ldr	r3, [pc, #24]	; (111ac <clearNumbers+0xbc>)
   11192:	0019      	movs	r1, r3
   11194:	2018      	movs	r0, #24
   11196:	4b08      	ldr	r3, [pc, #32]	; (111b8 <clearNumbers+0xc8>)
   11198:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   1119a:	4b08      	ldr	r3, [pc, #32]	; (111bc <clearNumbers+0xcc>)
   1119c:	4798      	blx	r3
}
   1119e:	46c0      	nop			; (mov r8, r8)
   111a0:	46bd      	mov	sp, r7
   111a2:	b002      	add	sp, #8
   111a4:	bd80      	pop	{r7, pc}
   111a6:	46c0      	nop			; (mov r8, r8)
   111a8:	20000620 	.word	0x20000620
   111ac:	20000594 	.word	0x20000594
   111b0:	000289fb 	.word	0x000289fb
   111b4:	000236ed 	.word	0x000236ed
   111b8:	000235e1 	.word	0x000235e1
   111bc:	00023789 	.word	0x00023789
   111c0:	000289c5 	.word	0x000289c5
   111c4:	000111cd 	.word	0x000111cd
   111c8:	20000648 	.word	0x20000648

000111cc <saveAlterNumberSetting>:

void saveAlterNumberSetting(bool flag)
{
   111cc:	b580      	push	{r7, lr}
   111ce:	b082      	sub	sp, #8
   111d0:	af00      	add	r7, sp, #0
   111d2:	0002      	movs	r2, r0
   111d4:	1dfb      	adds	r3, r7, #7
   111d6:	701a      	strb	r2, [r3, #0]
	alternateNumber_struct.alterNumberSetting = flag;
   111d8:	1dfb      	adds	r3, r7, #7
   111da:	781a      	ldrb	r2, [r3, #0]
   111dc:	4b0a      	ldr	r3, [pc, #40]	; (11208 <saveAlterNumberSetting+0x3c>)
   111de:	705a      	strb	r2, [r3, #1]
	memcpy(page_data,&alternateNumber_struct,sizeof(alternateNumber_struct));
   111e0:	4a0a      	ldr	r2, [pc, #40]	; (1120c <saveAlterNumberSetting+0x40>)
   111e2:	4b09      	ldr	r3, [pc, #36]	; (11208 <saveAlterNumberSetting+0x3c>)
   111e4:	0010      	movs	r0, r2
   111e6:	0019      	movs	r1, r3
   111e8:	2318      	movs	r3, #24
   111ea:	001a      	movs	r2, r3
   111ec:	4b08      	ldr	r3, [pc, #32]	; (11210 <saveAlterNumberSetting+0x44>)
   111ee:	4798      	blx	r3
	eeprom_emulator_write_page(ALTARNATE_NUMBERS_PAGE, page_data);
   111f0:	4b06      	ldr	r3, [pc, #24]	; (1120c <saveAlterNumberSetting+0x40>)
   111f2:	0019      	movs	r1, r3
   111f4:	2018      	movs	r0, #24
   111f6:	4b07      	ldr	r3, [pc, #28]	; (11214 <saveAlterNumberSetting+0x48>)
   111f8:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   111fa:	4b07      	ldr	r3, [pc, #28]	; (11218 <saveAlterNumberSetting+0x4c>)
   111fc:	4798      	blx	r3
}
   111fe:	46c0      	nop			; (mov r8, r8)
   11200:	46bd      	mov	sp, r7
   11202:	b002      	add	sp, #8
   11204:	bd80      	pop	{r7, pc}
   11206:	46c0      	nop			; (mov r8, r8)
   11208:	20000648 	.word	0x20000648
   1120c:	20000594 	.word	0x20000594
   11210:	000289c5 	.word	0x000289c5
   11214:	000235e1 	.word	0x000235e1
   11218:	00023789 	.word	0x00023789

0001121c <addAlternateNumber>:

bool addAlternateNumber(char *numer)
{
   1121c:	b580      	push	{r7, lr}
   1121e:	b082      	sub	sp, #8
   11220:	af00      	add	r7, sp, #0
   11222:	6078      	str	r0, [r7, #4]
	if (user_count_struct.current_user_no_count > 0)
   11224:	4b11      	ldr	r3, [pc, #68]	; (1126c <addAlternateNumber+0x50>)
   11226:	789b      	ldrb	r3, [r3, #2]
   11228:	2b00      	cmp	r3, #0
   1122a:	d019      	beq.n	11260 <addAlternateNumber+0x44>
	{
		alternateNumber_struct.alterNumberPresent = true;
   1122c:	4b10      	ldr	r3, [pc, #64]	; (11270 <addAlternateNumber+0x54>)
   1122e:	2201      	movs	r2, #1
   11230:	709a      	strb	r2, [r3, #2]
		strcpy(alternateNumber_struct.alternateNumber_ee,numer);
   11232:	687a      	ldr	r2, [r7, #4]
   11234:	4b0f      	ldr	r3, [pc, #60]	; (11274 <addAlternateNumber+0x58>)
   11236:	0011      	movs	r1, r2
   11238:	0018      	movs	r0, r3
   1123a:	4b0f      	ldr	r3, [pc, #60]	; (11278 <addAlternateNumber+0x5c>)
   1123c:	4798      	blx	r3
		memcpy(page_data,&alternateNumber_struct,sizeof(alternateNumber_struct));
   1123e:	4a0f      	ldr	r2, [pc, #60]	; (1127c <addAlternateNumber+0x60>)
   11240:	4b0b      	ldr	r3, [pc, #44]	; (11270 <addAlternateNumber+0x54>)
   11242:	0010      	movs	r0, r2
   11244:	0019      	movs	r1, r3
   11246:	2318      	movs	r3, #24
   11248:	001a      	movs	r2, r3
   1124a:	4b0d      	ldr	r3, [pc, #52]	; (11280 <addAlternateNumber+0x64>)
   1124c:	4798      	blx	r3
		eeprom_emulator_write_page(ALTARNATE_NUMBERS_PAGE, page_data);
   1124e:	4b0b      	ldr	r3, [pc, #44]	; (1127c <addAlternateNumber+0x60>)
   11250:	0019      	movs	r1, r3
   11252:	2018      	movs	r0, #24
   11254:	4b0b      	ldr	r3, [pc, #44]	; (11284 <addAlternateNumber+0x68>)
   11256:	4798      	blx	r3
		eeprom_emulator_commit_page_buffer();
   11258:	4b0b      	ldr	r3, [pc, #44]	; (11288 <addAlternateNumber+0x6c>)
   1125a:	4798      	blx	r3
		
		return true;
   1125c:	2301      	movs	r3, #1
   1125e:	e000      	b.n	11262 <addAlternateNumber+0x46>
	}
	return false;
   11260:	2300      	movs	r3, #0
}
   11262:	0018      	movs	r0, r3
   11264:	46bd      	mov	sp, r7
   11266:	b002      	add	sp, #8
   11268:	bd80      	pop	{r7, pc}
   1126a:	46c0      	nop			; (mov r8, r8)
   1126c:	20000620 	.word	0x20000620
   11270:	20000648 	.word	0x20000648
   11274:	2000064c 	.word	0x2000064c
   11278:	00028c7b 	.word	0x00028c7b
   1127c:	20000594 	.word	0x20000594
   11280:	000289c5 	.word	0x000289c5
   11284:	000235e1 	.word	0x000235e1
   11288:	00023789 	.word	0x00023789

0001128c <saveAutoStartSettings>:

void saveAutoStartSettings(bool flag)
{
   1128c:	b580      	push	{r7, lr}
   1128e:	b082      	sub	sp, #8
   11290:	af00      	add	r7, sp, #0
   11292:	0002      	movs	r2, r0
   11294:	1dfb      	adds	r3, r7, #7
   11296:	701a      	strb	r2, [r3, #0]
	user_settings_parameter_struct.autoStartAddress = (uint8_t)flag;
   11298:	1dfb      	adds	r3, r7, #7
   1129a:	781a      	ldrb	r2, [r3, #0]
   1129c:	4b09      	ldr	r3, [pc, #36]	; (112c4 <saveAutoStartSettings+0x38>)
   1129e:	705a      	strb	r2, [r3, #1]
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
   112a0:	4908      	ldr	r1, [pc, #32]	; (112c4 <saveAutoStartSettings+0x38>)
   112a2:	4b09      	ldr	r3, [pc, #36]	; (112c8 <saveAutoStartSettings+0x3c>)
   112a4:	222c      	movs	r2, #44	; 0x2c
   112a6:	0018      	movs	r0, r3
   112a8:	4b08      	ldr	r3, [pc, #32]	; (112cc <saveAutoStartSettings+0x40>)
   112aa:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
   112ac:	4b06      	ldr	r3, [pc, #24]	; (112c8 <saveAutoStartSettings+0x3c>)
   112ae:	0019      	movs	r1, r3
   112b0:	201a      	movs	r0, #26
   112b2:	4b07      	ldr	r3, [pc, #28]	; (112d0 <saveAutoStartSettings+0x44>)
   112b4:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   112b6:	4b07      	ldr	r3, [pc, #28]	; (112d4 <saveAutoStartSettings+0x48>)
   112b8:	4798      	blx	r3
}
   112ba:	46c0      	nop			; (mov r8, r8)
   112bc:	46bd      	mov	sp, r7
   112be:	b002      	add	sp, #8
   112c0:	bd80      	pop	{r7, pc}
   112c2:	46c0      	nop			; (mov r8, r8)
   112c4:	20000660 	.word	0x20000660
   112c8:	20000594 	.word	0x20000594
   112cc:	000289c5 	.word	0x000289c5
   112d0:	000235e1 	.word	0x000235e1
   112d4:	00023789 	.word	0x00023789

000112d8 <saveAutoStartTimeSettings>:

void saveAutoStartTimeSettings(uint16_t value)
{
   112d8:	b580      	push	{r7, lr}
   112da:	b082      	sub	sp, #8
   112dc:	af00      	add	r7, sp, #0
   112de:	0002      	movs	r2, r0
   112e0:	1dbb      	adds	r3, r7, #6
   112e2:	801a      	strh	r2, [r3, #0]
	user_settings_parameter_struct.autoStartTimeAddress = value;
   112e4:	4b0a      	ldr	r3, [pc, #40]	; (11310 <saveAutoStartTimeSettings+0x38>)
   112e6:	1dba      	adds	r2, r7, #6
   112e8:	8812      	ldrh	r2, [r2, #0]
   112ea:	805a      	strh	r2, [r3, #2]
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
   112ec:	4908      	ldr	r1, [pc, #32]	; (11310 <saveAutoStartTimeSettings+0x38>)
   112ee:	4b09      	ldr	r3, [pc, #36]	; (11314 <saveAutoStartTimeSettings+0x3c>)
   112f0:	222c      	movs	r2, #44	; 0x2c
   112f2:	0018      	movs	r0, r3
   112f4:	4b08      	ldr	r3, [pc, #32]	; (11318 <saveAutoStartTimeSettings+0x40>)
   112f6:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
   112f8:	4b06      	ldr	r3, [pc, #24]	; (11314 <saveAutoStartTimeSettings+0x3c>)
   112fa:	0019      	movs	r1, r3
   112fc:	201a      	movs	r0, #26
   112fe:	4b07      	ldr	r3, [pc, #28]	; (1131c <saveAutoStartTimeSettings+0x44>)
   11300:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   11302:	4b07      	ldr	r3, [pc, #28]	; (11320 <saveAutoStartTimeSettings+0x48>)
   11304:	4798      	blx	r3
}
   11306:	46c0      	nop			; (mov r8, r8)
   11308:	46bd      	mov	sp, r7
   1130a:	b002      	add	sp, #8
   1130c:	bd80      	pop	{r7, pc}
   1130e:	46c0      	nop			; (mov r8, r8)
   11310:	20000660 	.word	0x20000660
   11314:	20000594 	.word	0x20000594
   11318:	000289c5 	.word	0x000289c5
   1131c:	000235e1 	.word	0x000235e1
   11320:	00023789 	.word	0x00023789

00011324 <saveDNDSettings>:

void saveDNDSettings(char flag)
{
   11324:	b580      	push	{r7, lr}
   11326:	b082      	sub	sp, #8
   11328:	af00      	add	r7, sp, #0
   1132a:	0002      	movs	r2, r0
   1132c:	1dfb      	adds	r3, r7, #7
   1132e:	701a      	strb	r2, [r3, #0]
	user_settings_parameter_struct.dndAddress = flag;
   11330:	4b0a      	ldr	r3, [pc, #40]	; (1135c <saveDNDSettings+0x38>)
   11332:	1dfa      	adds	r2, r7, #7
   11334:	7812      	ldrb	r2, [r2, #0]
   11336:	711a      	strb	r2, [r3, #4]
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
   11338:	4908      	ldr	r1, [pc, #32]	; (1135c <saveDNDSettings+0x38>)
   1133a:	4b09      	ldr	r3, [pc, #36]	; (11360 <saveDNDSettings+0x3c>)
   1133c:	222c      	movs	r2, #44	; 0x2c
   1133e:	0018      	movs	r0, r3
   11340:	4b08      	ldr	r3, [pc, #32]	; (11364 <saveDNDSettings+0x40>)
   11342:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
   11344:	4b06      	ldr	r3, [pc, #24]	; (11360 <saveDNDSettings+0x3c>)
   11346:	0019      	movs	r1, r3
   11348:	201a      	movs	r0, #26
   1134a:	4b07      	ldr	r3, [pc, #28]	; (11368 <saveDNDSettings+0x44>)
   1134c:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   1134e:	4b07      	ldr	r3, [pc, #28]	; (1136c <saveDNDSettings+0x48>)
   11350:	4798      	blx	r3
}
   11352:	46c0      	nop			; (mov r8, r8)
   11354:	46bd      	mov	sp, r7
   11356:	b002      	add	sp, #8
   11358:	bd80      	pop	{r7, pc}
   1135a:	46c0      	nop			; (mov r8, r8)
   1135c:	20000660 	.word	0x20000660
   11360:	20000594 	.word	0x20000594
   11364:	000289c5 	.word	0x000289c5
   11368:	000235e1 	.word	0x000235e1
   1136c:	00023789 	.word	0x00023789

00011370 <saveResponseSettings>:
//eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
//eeprom_emulator_commit_page_buffer();
//}

void saveResponseSettings(char response)
{
   11370:	b580      	push	{r7, lr}
   11372:	b082      	sub	sp, #8
   11374:	af00      	add	r7, sp, #0
   11376:	0002      	movs	r2, r0
   11378:	1dfb      	adds	r3, r7, #7
   1137a:	701a      	strb	r2, [r3, #0]
	user_settings_parameter_struct.responseAddress = response;
   1137c:	4b0a      	ldr	r3, [pc, #40]	; (113a8 <saveResponseSettings+0x38>)
   1137e:	1dfa      	adds	r2, r7, #7
   11380:	7812      	ldrb	r2, [r2, #0]
   11382:	715a      	strb	r2, [r3, #5]
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
   11384:	4908      	ldr	r1, [pc, #32]	; (113a8 <saveResponseSettings+0x38>)
   11386:	4b09      	ldr	r3, [pc, #36]	; (113ac <saveResponseSettings+0x3c>)
   11388:	222c      	movs	r2, #44	; 0x2c
   1138a:	0018      	movs	r0, r3
   1138c:	4b08      	ldr	r3, [pc, #32]	; (113b0 <saveResponseSettings+0x40>)
   1138e:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
   11390:	4b06      	ldr	r3, [pc, #24]	; (113ac <saveResponseSettings+0x3c>)
   11392:	0019      	movs	r1, r3
   11394:	201a      	movs	r0, #26
   11396:	4b07      	ldr	r3, [pc, #28]	; (113b4 <saveResponseSettings+0x44>)
   11398:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   1139a:	4b07      	ldr	r3, [pc, #28]	; (113b8 <saveResponseSettings+0x48>)
   1139c:	4798      	blx	r3
}
   1139e:	46c0      	nop			; (mov r8, r8)
   113a0:	46bd      	mov	sp, r7
   113a2:	b002      	add	sp, #8
   113a4:	bd80      	pop	{r7, pc}
   113a6:	46c0      	nop			; (mov r8, r8)
   113a8:	20000660 	.word	0x20000660
   113ac:	20000594 	.word	0x20000594
   113b0:	000289c5 	.word	0x000289c5
   113b4:	000235e1 	.word	0x000235e1
   113b8:	00023789 	.word	0x00023789

000113bc <saveNoCallSettings>:

void saveNoCallSettings(bool flag,uint8_t startHour,uint8_t startMinute,uint8_t stopHour,uint8_t stopMinute)
{
   113bc:	b5b0      	push	{r4, r5, r7, lr}
   113be:	b082      	sub	sp, #8
   113c0:	af00      	add	r7, sp, #0
   113c2:	0005      	movs	r5, r0
   113c4:	000c      	movs	r4, r1
   113c6:	0010      	movs	r0, r2
   113c8:	0019      	movs	r1, r3
   113ca:	1dfb      	adds	r3, r7, #7
   113cc:	1c2a      	adds	r2, r5, #0
   113ce:	701a      	strb	r2, [r3, #0]
   113d0:	1dbb      	adds	r3, r7, #6
   113d2:	1c22      	adds	r2, r4, #0
   113d4:	701a      	strb	r2, [r3, #0]
   113d6:	1d7b      	adds	r3, r7, #5
   113d8:	1c02      	adds	r2, r0, #0
   113da:	701a      	strb	r2, [r3, #0]
   113dc:	1d3b      	adds	r3, r7, #4
   113de:	1c0a      	adds	r2, r1, #0
   113e0:	701a      	strb	r2, [r3, #0]
	user_settings_parameter_struct.noCallAddress = (uint8_t)flag;
   113e2:	1dfb      	adds	r3, r7, #7
   113e4:	781a      	ldrb	r2, [r3, #0]
   113e6:	4b14      	ldr	r3, [pc, #80]	; (11438 <saveNoCallSettings+0x7c>)
   113e8:	725a      	strb	r2, [r3, #9]
	if (user_settings_parameter_struct.noCallAddress)
   113ea:	4b13      	ldr	r3, [pc, #76]	; (11438 <saveNoCallSettings+0x7c>)
   113ec:	7a5b      	ldrb	r3, [r3, #9]
   113ee:	2b00      	cmp	r3, #0
   113f0:	d010      	beq.n	11414 <saveNoCallSettings+0x58>
	{
		user_settings_parameter_struct.noCallStartTimeHourAddress = startHour;
   113f2:	4b11      	ldr	r3, [pc, #68]	; (11438 <saveNoCallSettings+0x7c>)
   113f4:	1dba      	adds	r2, r7, #6
   113f6:	7812      	ldrb	r2, [r2, #0]
   113f8:	729a      	strb	r2, [r3, #10]
		user_settings_parameter_struct.noCallStartTimeMinuteAddress = startMinute;
   113fa:	4b0f      	ldr	r3, [pc, #60]	; (11438 <saveNoCallSettings+0x7c>)
   113fc:	1d7a      	adds	r2, r7, #5
   113fe:	7812      	ldrb	r2, [r2, #0]
   11400:	72da      	strb	r2, [r3, #11]
		
		user_settings_parameter_struct.noCallStopTimeHourAddress = stopHour;
   11402:	4b0d      	ldr	r3, [pc, #52]	; (11438 <saveNoCallSettings+0x7c>)
   11404:	1d3a      	adds	r2, r7, #4
   11406:	7812      	ldrb	r2, [r2, #0]
   11408:	731a      	strb	r2, [r3, #12]
		user_settings_parameter_struct.noCallStopTimeMinuteAddress = stopMinute;
   1140a:	4b0b      	ldr	r3, [pc, #44]	; (11438 <saveNoCallSettings+0x7c>)
   1140c:	2218      	movs	r2, #24
   1140e:	18ba      	adds	r2, r7, r2
   11410:	7812      	ldrb	r2, [r2, #0]
   11412:	735a      	strb	r2, [r3, #13]
	}
	
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
   11414:	4908      	ldr	r1, [pc, #32]	; (11438 <saveNoCallSettings+0x7c>)
   11416:	4b09      	ldr	r3, [pc, #36]	; (1143c <saveNoCallSettings+0x80>)
   11418:	222c      	movs	r2, #44	; 0x2c
   1141a:	0018      	movs	r0, r3
   1141c:	4b08      	ldr	r3, [pc, #32]	; (11440 <saveNoCallSettings+0x84>)
   1141e:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
   11420:	4b06      	ldr	r3, [pc, #24]	; (1143c <saveNoCallSettings+0x80>)
   11422:	0019      	movs	r1, r3
   11424:	201a      	movs	r0, #26
   11426:	4b07      	ldr	r3, [pc, #28]	; (11444 <saveNoCallSettings+0x88>)
   11428:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   1142a:	4b07      	ldr	r3, [pc, #28]	; (11448 <saveNoCallSettings+0x8c>)
   1142c:	4798      	blx	r3
}
   1142e:	46c0      	nop			; (mov r8, r8)
   11430:	46bd      	mov	sp, r7
   11432:	b002      	add	sp, #8
   11434:	bdb0      	pop	{r4, r5, r7, pc}
   11436:	46c0      	nop			; (mov r8, r8)
   11438:	20000660 	.word	0x20000660
   1143c:	20000594 	.word	0x20000594
   11440:	000289c5 	.word	0x000289c5
   11444:	000235e1 	.word	0x000235e1
   11448:	00023789 	.word	0x00023789

0001144c <saveWaterBypassSettings>:

void saveWaterBypassSettings(bool flag)
{
   1144c:	b580      	push	{r7, lr}
   1144e:	b082      	sub	sp, #8
   11450:	af00      	add	r7, sp, #0
   11452:	0002      	movs	r2, r0
   11454:	1dfb      	adds	r3, r7, #7
   11456:	701a      	strb	r2, [r3, #0]
	user_settings_parameter_struct.waterBypassAddress = (uint8_t)flag;
   11458:	1dfb      	adds	r3, r7, #7
   1145a:	781a      	ldrb	r2, [r3, #0]
   1145c:	4b09      	ldr	r3, [pc, #36]	; (11484 <saveWaterBypassSettings+0x38>)
   1145e:	77da      	strb	r2, [r3, #31]
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
   11460:	4908      	ldr	r1, [pc, #32]	; (11484 <saveWaterBypassSettings+0x38>)
   11462:	4b09      	ldr	r3, [pc, #36]	; (11488 <saveWaterBypassSettings+0x3c>)
   11464:	222c      	movs	r2, #44	; 0x2c
   11466:	0018      	movs	r0, r3
   11468:	4b08      	ldr	r3, [pc, #32]	; (1148c <saveWaterBypassSettings+0x40>)
   1146a:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
   1146c:	4b06      	ldr	r3, [pc, #24]	; (11488 <saveWaterBypassSettings+0x3c>)
   1146e:	0019      	movs	r1, r3
   11470:	201a      	movs	r0, #26
   11472:	4b07      	ldr	r3, [pc, #28]	; (11490 <saveWaterBypassSettings+0x44>)
   11474:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   11476:	4b07      	ldr	r3, [pc, #28]	; (11494 <saveWaterBypassSettings+0x48>)
   11478:	4798      	blx	r3
}
   1147a:	46c0      	nop			; (mov r8, r8)
   1147c:	46bd      	mov	sp, r7
   1147e:	b002      	add	sp, #8
   11480:	bd80      	pop	{r7, pc}
   11482:	46c0      	nop			; (mov r8, r8)
   11484:	20000660 	.word	0x20000660
   11488:	20000594 	.word	0x20000594
   1148c:	000289c5 	.word	0x000289c5
   11490:	000235e1 	.word	0x000235e1
   11494:	00023789 	.word	0x00023789

00011498 <savePreventOverFlowSettings>:

void savePreventOverFlowSettings(bool flag)
{
   11498:	b580      	push	{r7, lr}
   1149a:	b082      	sub	sp, #8
   1149c:	af00      	add	r7, sp, #0
   1149e:	0002      	movs	r2, r0
   114a0:	1dfb      	adds	r3, r7, #7
   114a2:	701a      	strb	r2, [r3, #0]
	user_settings_parameter_struct.preventOverFlowAddress = (uint8_t)flag;
   114a4:	1dfb      	adds	r3, r7, #7
   114a6:	781a      	ldrb	r2, [r3, #0]
   114a8:	4b09      	ldr	r3, [pc, #36]	; (114d0 <savePreventOverFlowSettings+0x38>)
   114aa:	779a      	strb	r2, [r3, #30]
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
   114ac:	4908      	ldr	r1, [pc, #32]	; (114d0 <savePreventOverFlowSettings+0x38>)
   114ae:	4b09      	ldr	r3, [pc, #36]	; (114d4 <savePreventOverFlowSettings+0x3c>)
   114b0:	222c      	movs	r2, #44	; 0x2c
   114b2:	0018      	movs	r0, r3
   114b4:	4b08      	ldr	r3, [pc, #32]	; (114d8 <savePreventOverFlowSettings+0x40>)
   114b6:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
   114b8:	4b06      	ldr	r3, [pc, #24]	; (114d4 <savePreventOverFlowSettings+0x3c>)
   114ba:	0019      	movs	r1, r3
   114bc:	201a      	movs	r0, #26
   114be:	4b07      	ldr	r3, [pc, #28]	; (114dc <savePreventOverFlowSettings+0x44>)
   114c0:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   114c2:	4b07      	ldr	r3, [pc, #28]	; (114e0 <savePreventOverFlowSettings+0x48>)
   114c4:	4798      	blx	r3
}
   114c6:	46c0      	nop			; (mov r8, r8)
   114c8:	46bd      	mov	sp, r7
   114ca:	b002      	add	sp, #8
   114cc:	bd80      	pop	{r7, pc}
   114ce:	46c0      	nop			; (mov r8, r8)
   114d0:	20000660 	.word	0x20000660
   114d4:	20000594 	.word	0x20000594
   114d8:	000289c5 	.word	0x000289c5
   114dc:	000235e1 	.word	0x000235e1
   114e0:	00023789 	.word	0x00023789

000114e4 <setOverloadPer>:
//eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
//eeprom_emulator_commit_page_buffer();
//}

bool setOverloadPer(uint8_t overloadPerValue)
{
   114e4:	b580      	push	{r7, lr}
   114e6:	b082      	sub	sp, #8
   114e8:	af00      	add	r7, sp, #0
   114ea:	0002      	movs	r2, r0
   114ec:	1dfb      	adds	r3, r7, #7
   114ee:	701a      	strb	r2, [r3, #0]
	if(overloadPerValue>100)
   114f0:	1dfb      	adds	r3, r7, #7
   114f2:	781b      	ldrb	r3, [r3, #0]
   114f4:	2b64      	cmp	r3, #100	; 0x64
   114f6:	d918      	bls.n	1152a <setOverloadPer+0x46>
	{
		user_settings_parameter_struct.overloadPerAddress = overloadPerValue;
   114f8:	4b0e      	ldr	r3, [pc, #56]	; (11534 <setOverloadPer+0x50>)
   114fa:	1dfa      	adds	r2, r7, #7
   114fc:	7812      	ldrb	r2, [r2, #0]
   114fe:	775a      	strb	r2, [r3, #29]
		memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
   11500:	490c      	ldr	r1, [pc, #48]	; (11534 <setOverloadPer+0x50>)
   11502:	4b0d      	ldr	r3, [pc, #52]	; (11538 <setOverloadPer+0x54>)
   11504:	222c      	movs	r2, #44	; 0x2c
   11506:	0018      	movs	r0, r3
   11508:	4b0c      	ldr	r3, [pc, #48]	; (1153c <setOverloadPer+0x58>)
   1150a:	4798      	blx	r3
		eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
   1150c:	4b0a      	ldr	r3, [pc, #40]	; (11538 <setOverloadPer+0x54>)
   1150e:	0019      	movs	r1, r3
   11510:	201a      	movs	r0, #26
   11512:	4b0b      	ldr	r3, [pc, #44]	; (11540 <setOverloadPer+0x5c>)
   11514:	4798      	blx	r3
		eeprom_emulator_commit_page_buffer();
   11516:	4b0b      	ldr	r3, [pc, #44]	; (11544 <setOverloadPer+0x60>)
   11518:	4798      	blx	r3
		
		if (user_settings_parameter_struct.currentDetectionAddress)
   1151a:	4b06      	ldr	r3, [pc, #24]	; (11534 <setOverloadPer+0x50>)
   1151c:	7bdb      	ldrb	r3, [r3, #15]
   1151e:	2b00      	cmp	r3, #0
   11520:	d001      	beq.n	11526 <setOverloadPer+0x42>
		{
			calcCurrentValues();
   11522:	4b09      	ldr	r3, [pc, #36]	; (11548 <setOverloadPer+0x64>)
   11524:	4798      	blx	r3
		}
		return true;
   11526:	2301      	movs	r3, #1
   11528:	e000      	b.n	1152c <setOverloadPer+0x48>
	}
	return false;
   1152a:	2300      	movs	r3, #0
}
   1152c:	0018      	movs	r0, r3
   1152e:	46bd      	mov	sp, r7
   11530:	b002      	add	sp, #8
   11532:	bd80      	pop	{r7, pc}
   11534:	20000660 	.word	0x20000660
   11538:	20000594 	.word	0x20000594
   1153c:	000289c5 	.word	0x000289c5
   11540:	000235e1 	.word	0x000235e1
   11544:	00023789 	.word	0x00023789
   11548:	000116ed 	.word	0x000116ed

0001154c <setUnderloadPer>:

bool setUnderloadPer(uint8_t underloadPerValue)
{
   1154c:	b580      	push	{r7, lr}
   1154e:	b082      	sub	sp, #8
   11550:	af00      	add	r7, sp, #0
   11552:	0002      	movs	r2, r0
   11554:	1dfb      	adds	r3, r7, #7
   11556:	701a      	strb	r2, [r3, #0]
	if(underloadPerValue>0 && underloadPerValue <100)
   11558:	1dfb      	adds	r3, r7, #7
   1155a:	781b      	ldrb	r3, [r3, #0]
   1155c:	2b00      	cmp	r3, #0
   1155e:	d01c      	beq.n	1159a <setUnderloadPer+0x4e>
   11560:	1dfb      	adds	r3, r7, #7
   11562:	781b      	ldrb	r3, [r3, #0]
   11564:	2b63      	cmp	r3, #99	; 0x63
   11566:	d818      	bhi.n	1159a <setUnderloadPer+0x4e>
	{
		user_settings_parameter_struct.underloadPerAddress = underloadPerValue;
   11568:	4b0e      	ldr	r3, [pc, #56]	; (115a4 <setUnderloadPer+0x58>)
   1156a:	1dfa      	adds	r2, r7, #7
   1156c:	7812      	ldrb	r2, [r2, #0]
   1156e:	771a      	strb	r2, [r3, #28]
		memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
   11570:	490c      	ldr	r1, [pc, #48]	; (115a4 <setUnderloadPer+0x58>)
   11572:	4b0d      	ldr	r3, [pc, #52]	; (115a8 <setUnderloadPer+0x5c>)
   11574:	222c      	movs	r2, #44	; 0x2c
   11576:	0018      	movs	r0, r3
   11578:	4b0c      	ldr	r3, [pc, #48]	; (115ac <setUnderloadPer+0x60>)
   1157a:	4798      	blx	r3
		eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
   1157c:	4b0a      	ldr	r3, [pc, #40]	; (115a8 <setUnderloadPer+0x5c>)
   1157e:	0019      	movs	r1, r3
   11580:	201a      	movs	r0, #26
   11582:	4b0b      	ldr	r3, [pc, #44]	; (115b0 <setUnderloadPer+0x64>)
   11584:	4798      	blx	r3
		eeprom_emulator_commit_page_buffer();
   11586:	4b0b      	ldr	r3, [pc, #44]	; (115b4 <setUnderloadPer+0x68>)
   11588:	4798      	blx	r3
		if (user_settings_parameter_struct.currentDetectionAddress)
   1158a:	4b06      	ldr	r3, [pc, #24]	; (115a4 <setUnderloadPer+0x58>)
   1158c:	7bdb      	ldrb	r3, [r3, #15]
   1158e:	2b00      	cmp	r3, #0
   11590:	d001      	beq.n	11596 <setUnderloadPer+0x4a>
		{
			calcCurrentValues();
   11592:	4b09      	ldr	r3, [pc, #36]	; (115b8 <setUnderloadPer+0x6c>)
   11594:	4798      	blx	r3
		}
		return true;
   11596:	2301      	movs	r3, #1
   11598:	e000      	b.n	1159c <setUnderloadPer+0x50>
	}
	return false;
   1159a:	2300      	movs	r3, #0
}
   1159c:	0018      	movs	r0, r3
   1159e:	46bd      	mov	sp, r7
   115a0:	b002      	add	sp, #8
   115a2:	bd80      	pop	{r7, pc}
   115a4:	20000660 	.word	0x20000660
   115a8:	20000594 	.word	0x20000594
   115ac:	000289c5 	.word	0x000289c5
   115b0:	000235e1 	.word	0x000235e1
   115b4:	00023789 	.word	0x00023789
   115b8:	000116ed 	.word	0x000116ed

000115bc <saveSinglePhasingSettings>:

void saveSinglePhasingSettings(bool singlePhasing)
{
   115bc:	b580      	push	{r7, lr}
   115be:	b082      	sub	sp, #8
   115c0:	af00      	add	r7, sp, #0
   115c2:	0002      	movs	r2, r0
   115c4:	1dfb      	adds	r3, r7, #7
   115c6:	701a      	strb	r2, [r3, #0]
	user_settings_parameter_struct.detectSinglePhasing=singlePhasing;
   115c8:	1dfb      	adds	r3, r7, #7
   115ca:	7819      	ldrb	r1, [r3, #0]
   115cc:	4b09      	ldr	r3, [pc, #36]	; (115f4 <saveSinglePhasingSettings+0x38>)
   115ce:	2220      	movs	r2, #32
   115d0:	5499      	strb	r1, [r3, r2]
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
   115d2:	4908      	ldr	r1, [pc, #32]	; (115f4 <saveSinglePhasingSettings+0x38>)
   115d4:	4b08      	ldr	r3, [pc, #32]	; (115f8 <saveSinglePhasingSettings+0x3c>)
   115d6:	222c      	movs	r2, #44	; 0x2c
   115d8:	0018      	movs	r0, r3
   115da:	4b08      	ldr	r3, [pc, #32]	; (115fc <saveSinglePhasingSettings+0x40>)
   115dc:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
   115de:	4b06      	ldr	r3, [pc, #24]	; (115f8 <saveSinglePhasingSettings+0x3c>)
   115e0:	0019      	movs	r1, r3
   115e2:	201a      	movs	r0, #26
   115e4:	4b06      	ldr	r3, [pc, #24]	; (11600 <saveSinglePhasingSettings+0x44>)
   115e6:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   115e8:	4b06      	ldr	r3, [pc, #24]	; (11604 <saveSinglePhasingSettings+0x48>)
   115ea:	4798      	blx	r3
}
   115ec:	46c0      	nop			; (mov r8, r8)
   115ee:	46bd      	mov	sp, r7
   115f0:	b002      	add	sp, #8
   115f2:	bd80      	pop	{r7, pc}
   115f4:	20000660 	.word	0x20000660
   115f8:	20000594 	.word	0x20000594
   115fc:	000289c5 	.word	0x000289c5
   11600:	000235e1 	.word	0x000235e1
   11604:	00023789 	.word	0x00023789

00011608 <saveSinglePhasingVoltage>:

void saveSinglePhasingVoltage(uint16_t voltage)
{
   11608:	b580      	push	{r7, lr}
   1160a:	b082      	sub	sp, #8
   1160c:	af00      	add	r7, sp, #0
   1160e:	0002      	movs	r2, r0
   11610:	1dbb      	adds	r3, r7, #6
   11612:	801a      	strh	r2, [r3, #0]
	user_settings_parameter_struct.singlePhasingVoltage= voltage;
   11614:	4b0a      	ldr	r3, [pc, #40]	; (11640 <saveSinglePhasingVoltage+0x38>)
   11616:	1dba      	adds	r2, r7, #6
   11618:	8812      	ldrh	r2, [r2, #0]
   1161a:	845a      	strh	r2, [r3, #34]	; 0x22
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
   1161c:	4908      	ldr	r1, [pc, #32]	; (11640 <saveSinglePhasingVoltage+0x38>)
   1161e:	4b09      	ldr	r3, [pc, #36]	; (11644 <saveSinglePhasingVoltage+0x3c>)
   11620:	222c      	movs	r2, #44	; 0x2c
   11622:	0018      	movs	r0, r3
   11624:	4b08      	ldr	r3, [pc, #32]	; (11648 <saveSinglePhasingVoltage+0x40>)
   11626:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
   11628:	4b06      	ldr	r3, [pc, #24]	; (11644 <saveSinglePhasingVoltage+0x3c>)
   1162a:	0019      	movs	r1, r3
   1162c:	201a      	movs	r0, #26
   1162e:	4b07      	ldr	r3, [pc, #28]	; (1164c <saveSinglePhasingVoltage+0x44>)
   11630:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   11632:	4b07      	ldr	r3, [pc, #28]	; (11650 <saveSinglePhasingVoltage+0x48>)
   11634:	4798      	blx	r3
}
   11636:	46c0      	nop			; (mov r8, r8)
   11638:	46bd      	mov	sp, r7
   1163a:	b002      	add	sp, #8
   1163c:	bd80      	pop	{r7, pc}
   1163e:	46c0      	nop			; (mov r8, r8)
   11640:	20000660 	.word	0x20000660
   11644:	20000594 	.word	0x20000594
   11648:	000289c5 	.word	0x000289c5
   1164c:	000235e1 	.word	0x000235e1
   11650:	00023789 	.word	0x00023789

00011654 <savePhaseSequenceProtectionSettings>:

void savePhaseSequenceProtectionSettings(bool phaseSequenceSetting)
{
   11654:	b580      	push	{r7, lr}
   11656:	b082      	sub	sp, #8
   11658:	af00      	add	r7, sp, #0
   1165a:	0002      	movs	r2, r0
   1165c:	1dfb      	adds	r3, r7, #7
   1165e:	701a      	strb	r2, [r3, #0]
	user_settings_parameter_struct.detectPhaseSequence= phaseSequenceSetting;
   11660:	1dfb      	adds	r3, r7, #7
   11662:	7819      	ldrb	r1, [r3, #0]
   11664:	4b09      	ldr	r3, [pc, #36]	; (1168c <savePhaseSequenceProtectionSettings+0x38>)
   11666:	2224      	movs	r2, #36	; 0x24
   11668:	5499      	strb	r1, [r3, r2]
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
   1166a:	4908      	ldr	r1, [pc, #32]	; (1168c <savePhaseSequenceProtectionSettings+0x38>)
   1166c:	4b08      	ldr	r3, [pc, #32]	; (11690 <savePhaseSequenceProtectionSettings+0x3c>)
   1166e:	222c      	movs	r2, #44	; 0x2c
   11670:	0018      	movs	r0, r3
   11672:	4b08      	ldr	r3, [pc, #32]	; (11694 <savePhaseSequenceProtectionSettings+0x40>)
   11674:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
   11676:	4b06      	ldr	r3, [pc, #24]	; (11690 <savePhaseSequenceProtectionSettings+0x3c>)
   11678:	0019      	movs	r1, r3
   1167a:	201a      	movs	r0, #26
   1167c:	4b06      	ldr	r3, [pc, #24]	; (11698 <savePhaseSequenceProtectionSettings+0x44>)
   1167e:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   11680:	4b06      	ldr	r3, [pc, #24]	; (1169c <savePhaseSequenceProtectionSettings+0x48>)
   11682:	4798      	blx	r3
}
   11684:	46c0      	nop			; (mov r8, r8)
   11686:	46bd      	mov	sp, r7
   11688:	b002      	add	sp, #8
   1168a:	bd80      	pop	{r7, pc}
   1168c:	20000660 	.word	0x20000660
   11690:	20000594 	.word	0x20000594
   11694:	000289c5 	.word	0x000289c5
   11698:	000235e1 	.word	0x000235e1
   1169c:	00023789 	.word	0x00023789

000116a0 <saveMotorFeedbackDetectionSettings>:


void saveMotorFeedbackDetectionSettings(uint8_t motorFeedbackDetection)
{
   116a0:	b580      	push	{r7, lr}
   116a2:	b082      	sub	sp, #8
   116a4:	af00      	add	r7, sp, #0
   116a6:	0002      	movs	r2, r0
   116a8:	1dfb      	adds	r3, r7, #7
   116aa:	701a      	strb	r2, [r3, #0]
	user_settings_parameter_struct.detectMotorFeedback = motorFeedbackDetection;
   116ac:	4b0a      	ldr	r3, [pc, #40]	; (116d8 <saveMotorFeedbackDetectionSettings+0x38>)
   116ae:	1dfa      	adds	r2, r7, #7
   116b0:	2125      	movs	r1, #37	; 0x25
   116b2:	7812      	ldrb	r2, [r2, #0]
   116b4:	545a      	strb	r2, [r3, r1]
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
   116b6:	4908      	ldr	r1, [pc, #32]	; (116d8 <saveMotorFeedbackDetectionSettings+0x38>)
   116b8:	4b08      	ldr	r3, [pc, #32]	; (116dc <saveMotorFeedbackDetectionSettings+0x3c>)
   116ba:	222c      	movs	r2, #44	; 0x2c
   116bc:	0018      	movs	r0, r3
   116be:	4b08      	ldr	r3, [pc, #32]	; (116e0 <saveMotorFeedbackDetectionSettings+0x40>)
   116c0:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
   116c2:	4b06      	ldr	r3, [pc, #24]	; (116dc <saveMotorFeedbackDetectionSettings+0x3c>)
   116c4:	0019      	movs	r1, r3
   116c6:	201a      	movs	r0, #26
   116c8:	4b06      	ldr	r3, [pc, #24]	; (116e4 <saveMotorFeedbackDetectionSettings+0x44>)
   116ca:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   116cc:	4b06      	ldr	r3, [pc, #24]	; (116e8 <saveMotorFeedbackDetectionSettings+0x48>)
   116ce:	4798      	blx	r3
}
   116d0:	46c0      	nop			; (mov r8, r8)
   116d2:	46bd      	mov	sp, r7
   116d4:	b002      	add	sp, #8
   116d6:	bd80      	pop	{r7, pc}
   116d8:	20000660 	.word	0x20000660
   116dc:	20000594 	.word	0x20000594
   116e0:	000289c5 	.word	0x000289c5
   116e4:	000235e1 	.word	0x000235e1
   116e8:	00023789 	.word	0x00023789

000116ec <calcCurrentValues>:


void calcCurrentValues(void)
{
   116ec:	b590      	push	{r4, r7, lr}
   116ee:	b083      	sub	sp, #12
   116f0:	af00      	add	r7, sp, #0
	uint16_t temp = (user_settings_parameter_struct.normalLoadAddress * (float)user_settings_parameter_struct.underloadPerAddress) / 100.0;
   116f2:	4b2b      	ldr	r3, [pc, #172]	; (117a0 <calcCurrentValues+0xb4>)
   116f4:	691a      	ldr	r2, [r3, #16]
   116f6:	4b2b      	ldr	r3, [pc, #172]	; (117a4 <calcCurrentValues+0xb8>)
   116f8:	0010      	movs	r0, r2
   116fa:	4798      	blx	r3
   116fc:	1c04      	adds	r4, r0, #0
   116fe:	4b28      	ldr	r3, [pc, #160]	; (117a0 <calcCurrentValues+0xb4>)
   11700:	7f1a      	ldrb	r2, [r3, #28]
   11702:	4b28      	ldr	r3, [pc, #160]	; (117a4 <calcCurrentValues+0xb8>)
   11704:	0010      	movs	r0, r2
   11706:	4798      	blx	r3
   11708:	1c02      	adds	r2, r0, #0
   1170a:	4b27      	ldr	r3, [pc, #156]	; (117a8 <calcCurrentValues+0xbc>)
   1170c:	1c11      	adds	r1, r2, #0
   1170e:	1c20      	adds	r0, r4, #0
   11710:	4798      	blx	r3
   11712:	1c03      	adds	r3, r0, #0
   11714:	1c1a      	adds	r2, r3, #0
   11716:	4b25      	ldr	r3, [pc, #148]	; (117ac <calcCurrentValues+0xc0>)
   11718:	1c10      	adds	r0, r2, #0
   1171a:	4798      	blx	r3
   1171c:	4c24      	ldr	r4, [pc, #144]	; (117b0 <calcCurrentValues+0xc4>)
   1171e:	2200      	movs	r2, #0
   11720:	4b24      	ldr	r3, [pc, #144]	; (117b4 <calcCurrentValues+0xc8>)
   11722:	47a0      	blx	r4
   11724:	0003      	movs	r3, r0
   11726:	000c      	movs	r4, r1
   11728:	0019      	movs	r1, r3
   1172a:	0022      	movs	r2, r4
   1172c:	1dbc      	adds	r4, r7, #6
   1172e:	4b22      	ldr	r3, [pc, #136]	; (117b8 <calcCurrentValues+0xcc>)
   11730:	0008      	movs	r0, r1
   11732:	0011      	movs	r1, r2
   11734:	4798      	blx	r3
   11736:	0003      	movs	r3, r0
   11738:	8023      	strh	r3, [r4, #0]
	setUnderloadValue(temp);
   1173a:	1dbb      	adds	r3, r7, #6
   1173c:	881b      	ldrh	r3, [r3, #0]
   1173e:	0018      	movs	r0, r3
   11740:	4b1e      	ldr	r3, [pc, #120]	; (117bc <calcCurrentValues+0xd0>)
   11742:	4798      	blx	r3

	temp = (user_settings_parameter_struct.normalLoadAddress * (float)user_settings_parameter_struct.overloadPerAddress) / 100.0;
   11744:	4b16      	ldr	r3, [pc, #88]	; (117a0 <calcCurrentValues+0xb4>)
   11746:	691a      	ldr	r2, [r3, #16]
   11748:	4b16      	ldr	r3, [pc, #88]	; (117a4 <calcCurrentValues+0xb8>)
   1174a:	0010      	movs	r0, r2
   1174c:	4798      	blx	r3
   1174e:	1c04      	adds	r4, r0, #0
   11750:	4b13      	ldr	r3, [pc, #76]	; (117a0 <calcCurrentValues+0xb4>)
   11752:	7f5a      	ldrb	r2, [r3, #29]
   11754:	4b13      	ldr	r3, [pc, #76]	; (117a4 <calcCurrentValues+0xb8>)
   11756:	0010      	movs	r0, r2
   11758:	4798      	blx	r3
   1175a:	1c02      	adds	r2, r0, #0
   1175c:	4b12      	ldr	r3, [pc, #72]	; (117a8 <calcCurrentValues+0xbc>)
   1175e:	1c11      	adds	r1, r2, #0
   11760:	1c20      	adds	r0, r4, #0
   11762:	4798      	blx	r3
   11764:	1c03      	adds	r3, r0, #0
   11766:	1c1a      	adds	r2, r3, #0
   11768:	4b10      	ldr	r3, [pc, #64]	; (117ac <calcCurrentValues+0xc0>)
   1176a:	1c10      	adds	r0, r2, #0
   1176c:	4798      	blx	r3
   1176e:	4c10      	ldr	r4, [pc, #64]	; (117b0 <calcCurrentValues+0xc4>)
   11770:	2200      	movs	r2, #0
   11772:	4b10      	ldr	r3, [pc, #64]	; (117b4 <calcCurrentValues+0xc8>)
   11774:	47a0      	blx	r4
   11776:	0003      	movs	r3, r0
   11778:	000c      	movs	r4, r1
   1177a:	0019      	movs	r1, r3
   1177c:	0022      	movs	r2, r4
   1177e:	1dbc      	adds	r4, r7, #6
   11780:	4b0d      	ldr	r3, [pc, #52]	; (117b8 <calcCurrentValues+0xcc>)
   11782:	0008      	movs	r0, r1
   11784:	0011      	movs	r1, r2
   11786:	4798      	blx	r3
   11788:	0003      	movs	r3, r0
   1178a:	8023      	strh	r3, [r4, #0]
	setOverloadValue(temp);
   1178c:	1dbb      	adds	r3, r7, #6
   1178e:	881b      	ldrh	r3, [r3, #0]
   11790:	0018      	movs	r0, r3
   11792:	4b0b      	ldr	r3, [pc, #44]	; (117c0 <calcCurrentValues+0xd4>)
   11794:	4798      	blx	r3
}
   11796:	46c0      	nop			; (mov r8, r8)
   11798:	46bd      	mov	sp, r7
   1179a:	b003      	add	sp, #12
   1179c:	bd90      	pop	{r4, r7, pc}
   1179e:	46c0      	nop			; (mov r8, r8)
   117a0:	20000660 	.word	0x20000660
   117a4:	00026c0d 	.word	0x00026c0d
   117a8:	0002692d 	.word	0x0002692d
   117ac:	000287e9 	.word	0x000287e9
   117b0:	000272b9 	.word	0x000272b9
   117b4:	40590000 	.word	0x40590000
   117b8:	000264e1 	.word	0x000264e1
   117bc:	000117c5 	.word	0x000117c5
   117c0:	00011809 	.word	0x00011809

000117c4 <setUnderloadValue>:

void setUnderloadValue(uint32_t underValue)
{
   117c4:	b580      	push	{r7, lr}
   117c6:	b082      	sub	sp, #8
   117c8:	af00      	add	r7, sp, #0
   117ca:	6078      	str	r0, [r7, #4]
	user_settings_parameter_struct.underloadAddress = underValue;
   117cc:	4b09      	ldr	r3, [pc, #36]	; (117f4 <setUnderloadValue+0x30>)
   117ce:	687a      	ldr	r2, [r7, #4]
   117d0:	619a      	str	r2, [r3, #24]
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
   117d2:	4908      	ldr	r1, [pc, #32]	; (117f4 <setUnderloadValue+0x30>)
   117d4:	4b08      	ldr	r3, [pc, #32]	; (117f8 <setUnderloadValue+0x34>)
   117d6:	222c      	movs	r2, #44	; 0x2c
   117d8:	0018      	movs	r0, r3
   117da:	4b08      	ldr	r3, [pc, #32]	; (117fc <setUnderloadValue+0x38>)
   117dc:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
   117de:	4b06      	ldr	r3, [pc, #24]	; (117f8 <setUnderloadValue+0x34>)
   117e0:	0019      	movs	r1, r3
   117e2:	201a      	movs	r0, #26
   117e4:	4b06      	ldr	r3, [pc, #24]	; (11800 <setUnderloadValue+0x3c>)
   117e6:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   117e8:	4b06      	ldr	r3, [pc, #24]	; (11804 <setUnderloadValue+0x40>)
   117ea:	4798      	blx	r3
}
   117ec:	46c0      	nop			; (mov r8, r8)
   117ee:	46bd      	mov	sp, r7
   117f0:	b002      	add	sp, #8
   117f2:	bd80      	pop	{r7, pc}
   117f4:	20000660 	.word	0x20000660
   117f8:	20000594 	.word	0x20000594
   117fc:	000289c5 	.word	0x000289c5
   11800:	000235e1 	.word	0x000235e1
   11804:	00023789 	.word	0x00023789

00011808 <setOverloadValue>:

void setOverloadValue(uint32_t overValue)
{
   11808:	b580      	push	{r7, lr}
   1180a:	b082      	sub	sp, #8
   1180c:	af00      	add	r7, sp, #0
   1180e:	6078      	str	r0, [r7, #4]
	user_settings_parameter_struct.overloadAddress = overValue;
   11810:	4b09      	ldr	r3, [pc, #36]	; (11838 <setOverloadValue+0x30>)
   11812:	687a      	ldr	r2, [r7, #4]
   11814:	615a      	str	r2, [r3, #20]
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
   11816:	4908      	ldr	r1, [pc, #32]	; (11838 <setOverloadValue+0x30>)
   11818:	4b08      	ldr	r3, [pc, #32]	; (1183c <setOverloadValue+0x34>)
   1181a:	222c      	movs	r2, #44	; 0x2c
   1181c:	0018      	movs	r0, r3
   1181e:	4b08      	ldr	r3, [pc, #32]	; (11840 <setOverloadValue+0x38>)
   11820:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
   11822:	4b06      	ldr	r3, [pc, #24]	; (1183c <setOverloadValue+0x34>)
   11824:	0019      	movs	r1, r3
   11826:	201a      	movs	r0, #26
   11828:	4b06      	ldr	r3, [pc, #24]	; (11844 <setOverloadValue+0x3c>)
   1182a:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   1182c:	4b06      	ldr	r3, [pc, #24]	; (11848 <setOverloadValue+0x40>)
   1182e:	4798      	blx	r3
}
   11830:	46c0      	nop			; (mov r8, r8)
   11832:	46bd      	mov	sp, r7
   11834:	b002      	add	sp, #8
   11836:	bd80      	pop	{r7, pc}
   11838:	20000660 	.word	0x20000660
   1183c:	20000594 	.word	0x20000594
   11840:	000289c5 	.word	0x000289c5
   11844:	000235e1 	.word	0x000235e1
   11848:	00023789 	.word	0x00023789

0001184c <setNormalLoadValue>:

void setNormalLoadValue(uint32_t normalVal)
{
   1184c:	b580      	push	{r7, lr}
   1184e:	b082      	sub	sp, #8
   11850:	af00      	add	r7, sp, #0
   11852:	6078      	str	r0, [r7, #4]
	user_settings_parameter_struct.normalLoadAddress = normalVal;
   11854:	4b09      	ldr	r3, [pc, #36]	; (1187c <setNormalLoadValue+0x30>)
   11856:	687a      	ldr	r2, [r7, #4]
   11858:	611a      	str	r2, [r3, #16]
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
   1185a:	4908      	ldr	r1, [pc, #32]	; (1187c <setNormalLoadValue+0x30>)
   1185c:	4b08      	ldr	r3, [pc, #32]	; (11880 <setNormalLoadValue+0x34>)
   1185e:	222c      	movs	r2, #44	; 0x2c
   11860:	0018      	movs	r0, r3
   11862:	4b08      	ldr	r3, [pc, #32]	; (11884 <setNormalLoadValue+0x38>)
   11864:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
   11866:	4b06      	ldr	r3, [pc, #24]	; (11880 <setNormalLoadValue+0x34>)
   11868:	0019      	movs	r1, r3
   1186a:	201a      	movs	r0, #26
   1186c:	4b06      	ldr	r3, [pc, #24]	; (11888 <setNormalLoadValue+0x3c>)
   1186e:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   11870:	4b06      	ldr	r3, [pc, #24]	; (1188c <setNormalLoadValue+0x40>)
   11872:	4798      	blx	r3
}
   11874:	46c0      	nop			; (mov r8, r8)
   11876:	46bd      	mov	sp, r7
   11878:	b002      	add	sp, #8
   1187a:	bd80      	pop	{r7, pc}
   1187c:	20000660 	.word	0x20000660
   11880:	20000594 	.word	0x20000594
   11884:	000289c5 	.word	0x000289c5
   11888:	000235e1 	.word	0x000235e1
   1188c:	00023789 	.word	0x00023789

00011890 <setCurrentDetection>:

void setCurrentDetection(bool cValue)
{
   11890:	b580      	push	{r7, lr}
   11892:	b082      	sub	sp, #8
   11894:	af00      	add	r7, sp, #0
   11896:	0002      	movs	r2, r0
   11898:	1dfb      	adds	r3, r7, #7
   1189a:	701a      	strb	r2, [r3, #0]
	user_settings_parameter_struct.currentDetectionAddress = cValue;
   1189c:	1dfb      	adds	r3, r7, #7
   1189e:	781a      	ldrb	r2, [r3, #0]
   118a0:	4b09      	ldr	r3, [pc, #36]	; (118c8 <setCurrentDetection+0x38>)
   118a2:	73da      	strb	r2, [r3, #15]
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
   118a4:	4908      	ldr	r1, [pc, #32]	; (118c8 <setCurrentDetection+0x38>)
   118a6:	4b09      	ldr	r3, [pc, #36]	; (118cc <setCurrentDetection+0x3c>)
   118a8:	222c      	movs	r2, #44	; 0x2c
   118aa:	0018      	movs	r0, r3
   118ac:	4b08      	ldr	r3, [pc, #32]	; (118d0 <setCurrentDetection+0x40>)
   118ae:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
   118b0:	4b06      	ldr	r3, [pc, #24]	; (118cc <setCurrentDetection+0x3c>)
   118b2:	0019      	movs	r1, r3
   118b4:	201a      	movs	r0, #26
   118b6:	4b07      	ldr	r3, [pc, #28]	; (118d4 <setCurrentDetection+0x44>)
   118b8:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   118ba:	4b07      	ldr	r3, [pc, #28]	; (118d8 <setCurrentDetection+0x48>)
   118bc:	4798      	blx	r3
}
   118be:	46c0      	nop			; (mov r8, r8)
   118c0:	46bd      	mov	sp, r7
   118c2:	b002      	add	sp, #8
   118c4:	bd80      	pop	{r7, pc}
   118c6:	46c0      	nop			; (mov r8, r8)
   118c8:	20000660 	.word	0x20000660
   118cc:	20000594 	.word	0x20000594
   118d0:	000289c5 	.word	0x000289c5
   118d4:	000235e1 	.word	0x000235e1
   118d8:	00023789 	.word	0x00023789

000118dc <saveStarDeltaTimer>:
	//strcpy(deviceID,factory_settings_parameter_struct.DeviceID_ee);
	return deviceID;
}

void saveStarDeltaTimer(uint16_t StartDeltaTime)
{
   118dc:	b580      	push	{r7, lr}
   118de:	b082      	sub	sp, #8
   118e0:	af00      	add	r7, sp, #0
   118e2:	0002      	movs	r2, r0
   118e4:	1dbb      	adds	r3, r7, #6
   118e6:	801a      	strh	r2, [r3, #0]
	user_settings_parameter_struct.starDeltaTimerAddress = StartDeltaTime;
   118e8:	4b0a      	ldr	r3, [pc, #40]	; (11914 <saveStarDeltaTimer+0x38>)
   118ea:	1dba      	adds	r2, r7, #6
   118ec:	8812      	ldrh	r2, [r2, #0]
   118ee:	80da      	strh	r2, [r3, #6]
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
   118f0:	4908      	ldr	r1, [pc, #32]	; (11914 <saveStarDeltaTimer+0x38>)
   118f2:	4b09      	ldr	r3, [pc, #36]	; (11918 <saveStarDeltaTimer+0x3c>)
   118f4:	222c      	movs	r2, #44	; 0x2c
   118f6:	0018      	movs	r0, r3
   118f8:	4b08      	ldr	r3, [pc, #32]	; (1191c <saveStarDeltaTimer+0x40>)
   118fa:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
   118fc:	4b06      	ldr	r3, [pc, #24]	; (11918 <saveStarDeltaTimer+0x3c>)
   118fe:	0019      	movs	r1, r3
   11900:	201a      	movs	r0, #26
   11902:	4b07      	ldr	r3, [pc, #28]	; (11920 <saveStarDeltaTimer+0x44>)
   11904:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   11906:	4b07      	ldr	r3, [pc, #28]	; (11924 <saveStarDeltaTimer+0x48>)
   11908:	4798      	blx	r3
}
   1190a:	46c0      	nop			; (mov r8, r8)
   1190c:	46bd      	mov	sp, r7
   1190e:	b002      	add	sp, #8
   11910:	bd80      	pop	{r7, pc}
   11912:	46c0      	nop			; (mov r8, r8)
   11914:	20000660 	.word	0x20000660
   11918:	20000594 	.word	0x20000594
   1191c:	000289c5 	.word	0x000289c5
   11920:	000235e1 	.word	0x000235e1
   11924:	00023789 	.word	0x00023789

00011928 <saveEventStageSettings>:

void saveEventStageSettings(uint8_t data)
{
   11928:	b580      	push	{r7, lr}
   1192a:	b082      	sub	sp, #8
   1192c:	af00      	add	r7, sp, #0
   1192e:	0002      	movs	r2, r0
   11930:	1dfb      	adds	r3, r7, #7
   11932:	701a      	strb	r2, [r3, #0]
	user_settings_parameter_struct.eventStageAddress = data;
   11934:	4b0a      	ldr	r3, [pc, #40]	; (11960 <saveEventStageSettings+0x38>)
   11936:	1dfa      	adds	r2, r7, #7
   11938:	7812      	ldrb	r2, [r2, #0]
   1193a:	721a      	strb	r2, [r3, #8]
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
   1193c:	4908      	ldr	r1, [pc, #32]	; (11960 <saveEventStageSettings+0x38>)
   1193e:	4b09      	ldr	r3, [pc, #36]	; (11964 <saveEventStageSettings+0x3c>)
   11940:	222c      	movs	r2, #44	; 0x2c
   11942:	0018      	movs	r0, r3
   11944:	4b08      	ldr	r3, [pc, #32]	; (11968 <saveEventStageSettings+0x40>)
   11946:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
   11948:	4b06      	ldr	r3, [pc, #24]	; (11964 <saveEventStageSettings+0x3c>)
   1194a:	0019      	movs	r1, r3
   1194c:	201a      	movs	r0, #26
   1194e:	4b07      	ldr	r3, [pc, #28]	; (1196c <saveEventStageSettings+0x44>)
   11950:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   11952:	4b07      	ldr	r3, [pc, #28]	; (11970 <saveEventStageSettings+0x48>)
   11954:	4798      	blx	r3
}
   11956:	46c0      	nop			; (mov r8, r8)
   11958:	46bd      	mov	sp, r7
   1195a:	b002      	add	sp, #8
   1195c:	bd80      	pop	{r7, pc}
   1195e:	46c0      	nop			; (mov r8, r8)
   11960:	20000660 	.word	0x20000660
   11964:	20000594 	.word	0x20000594
   11968:	000289c5 	.word	0x000289c5
   1196c:	000235e1 	.word	0x000235e1
   11970:	00023789 	.word	0x00023789

00011974 <isAdmin>:

bool isAdmin(char *number)
{
   11974:	b580      	push	{r7, lr}
   11976:	b08a      	sub	sp, #40	; 0x28
   11978:	af00      	add	r7, sp, #0
   1197a:	6078      	str	r0, [r7, #4]
	for (uint8_t i=0;i<5;i++)
   1197c:	2327      	movs	r3, #39	; 0x27
   1197e:	18fb      	adds	r3, r7, r3
   11980:	2200      	movs	r2, #0
   11982:	701a      	strb	r2, [r3, #0]
   11984:	e02b      	b.n	119de <isAdmin+0x6a>
	{
		struct mobile_no_struct mobile_no;
		memset(page_data, '\0', sizeof(page_data));
   11986:	4b1b      	ldr	r3, [pc, #108]	; (119f4 <isAdmin+0x80>)
   11988:	223c      	movs	r2, #60	; 0x3c
   1198a:	2100      	movs	r1, #0
   1198c:	0018      	movs	r0, r3
   1198e:	4b1a      	ldr	r3, [pc, #104]	; (119f8 <isAdmin+0x84>)
   11990:	4798      	blx	r3
		eeprom_emulator_read_page(ADMIN_1_MOBILE_NUMBER_PAGE+i, page_data);
   11992:	2327      	movs	r3, #39	; 0x27
   11994:	18fb      	adds	r3, r7, r3
   11996:	781b      	ldrb	r3, [r3, #0]
   11998:	3303      	adds	r3, #3
   1199a:	b2db      	uxtb	r3, r3
   1199c:	4a15      	ldr	r2, [pc, #84]	; (119f4 <isAdmin+0x80>)
   1199e:	0011      	movs	r1, r2
   119a0:	0018      	movs	r0, r3
   119a2:	4b16      	ldr	r3, [pc, #88]	; (119fc <isAdmin+0x88>)
   119a4:	4798      	blx	r3
		memcpy(&mobile_no,page_data,sizeof(mobile_no));
   119a6:	230c      	movs	r3, #12
   119a8:	18fa      	adds	r2, r7, r3
   119aa:	4b12      	ldr	r3, [pc, #72]	; (119f4 <isAdmin+0x80>)
   119ac:	0010      	movs	r0, r2
   119ae:	0019      	movs	r1, r3
   119b0:	2318      	movs	r3, #24
   119b2:	001a      	movs	r2, r3
   119b4:	4b12      	ldr	r3, [pc, #72]	; (11a00 <isAdmin+0x8c>)
   119b6:	4798      	blx	r3
		
		if (strstr(number,mobile_no.mobile_no_ee))
   119b8:	230c      	movs	r3, #12
   119ba:	18fb      	adds	r3, r7, r3
   119bc:	1d1a      	adds	r2, r3, #4
   119be:	687b      	ldr	r3, [r7, #4]
   119c0:	0011      	movs	r1, r2
   119c2:	0018      	movs	r0, r3
   119c4:	4b0f      	ldr	r3, [pc, #60]	; (11a04 <isAdmin+0x90>)
   119c6:	4798      	blx	r3
   119c8:	1e03      	subs	r3, r0, #0
   119ca:	d001      	beq.n	119d0 <isAdmin+0x5c>
		{
			return true;
   119cc:	2301      	movs	r3, #1
   119ce:	e00c      	b.n	119ea <isAdmin+0x76>
	for (uint8_t i=0;i<5;i++)
   119d0:	2327      	movs	r3, #39	; 0x27
   119d2:	18fb      	adds	r3, r7, r3
   119d4:	781a      	ldrb	r2, [r3, #0]
   119d6:	2327      	movs	r3, #39	; 0x27
   119d8:	18fb      	adds	r3, r7, r3
   119da:	3201      	adds	r2, #1
   119dc:	701a      	strb	r2, [r3, #0]
   119de:	2327      	movs	r3, #39	; 0x27
   119e0:	18fb      	adds	r3, r7, r3
   119e2:	781b      	ldrb	r3, [r3, #0]
   119e4:	2b04      	cmp	r3, #4
   119e6:	d9ce      	bls.n	11986 <isAdmin+0x12>
		}
	}
	return false;
   119e8:	2300      	movs	r3, #0
}
   119ea:	0018      	movs	r0, r3
   119ec:	46bd      	mov	sp, r7
   119ee:	b00a      	add	sp, #40	; 0x28
   119f0:	bd80      	pop	{r7, pc}
   119f2:	46c0      	nop			; (mov r8, r8)
   119f4:	20000594 	.word	0x20000594
   119f8:	000289fb 	.word	0x000289fb
   119fc:	000236ed 	.word	0x000236ed
   11a00:	000289c5 	.word	0x000289c5
   11a04:	00028cbb 	.word	0x00028cbb

00011a08 <setPrimaryNumberIndex>:


void setPrimaryNumberIndex(uint8_t index)
{
   11a08:	b580      	push	{r7, lr}
   11a0a:	b082      	sub	sp, #8
   11a0c:	af00      	add	r7, sp, #0
   11a0e:	0002      	movs	r2, r0
   11a10:	1dfb      	adds	r3, r7, #7
   11a12:	701a      	strb	r2, [r3, #0]
	user_count_struct.primaryNumberIndex = index;
   11a14:	4b0b      	ldr	r3, [pc, #44]	; (11a44 <setPrimaryNumberIndex+0x3c>)
   11a16:	1dfa      	adds	r2, r7, #7
   11a18:	7812      	ldrb	r2, [r2, #0]
   11a1a:	70da      	strb	r2, [r3, #3]
	memcpy(page_data,&user_count_struct,sizeof(user_count_struct));
   11a1c:	4a0a      	ldr	r2, [pc, #40]	; (11a48 <setPrimaryNumberIndex+0x40>)
   11a1e:	4b09      	ldr	r3, [pc, #36]	; (11a44 <setPrimaryNumberIndex+0x3c>)
   11a20:	0010      	movs	r0, r2
   11a22:	0019      	movs	r1, r3
   11a24:	2308      	movs	r3, #8
   11a26:	001a      	movs	r2, r3
   11a28:	4b08      	ldr	r3, [pc, #32]	; (11a4c <setPrimaryNumberIndex+0x44>)
   11a2a:	4798      	blx	r3
	eeprom_emulator_write_page(USER_COUNTER_PAGE, page_data);
   11a2c:	4b06      	ldr	r3, [pc, #24]	; (11a48 <setPrimaryNumberIndex+0x40>)
   11a2e:	0019      	movs	r1, r3
   11a30:	2008      	movs	r0, #8
   11a32:	4b07      	ldr	r3, [pc, #28]	; (11a50 <setPrimaryNumberIndex+0x48>)
   11a34:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   11a36:	4b07      	ldr	r3, [pc, #28]	; (11a54 <setPrimaryNumberIndex+0x4c>)
   11a38:	4798      	blx	r3

}
   11a3a:	46c0      	nop			; (mov r8, r8)
   11a3c:	46bd      	mov	sp, r7
   11a3e:	b002      	add	sp, #8
   11a40:	bd80      	pop	{r7, pc}
   11a42:	46c0      	nop			; (mov r8, r8)
   11a44:	20000620 	.word	0x20000620
   11a48:	20000594 	.word	0x20000594
   11a4c:	000289c5 	.word	0x000289c5
   11a50:	000235e1 	.word	0x000235e1
   11a54:	00023789 	.word	0x00023789

00011a58 <setSecondaryNumberIndex>:

void setSecondaryNumberIndex(uint8_t index)
{
   11a58:	b580      	push	{r7, lr}
   11a5a:	b082      	sub	sp, #8
   11a5c:	af00      	add	r7, sp, #0
   11a5e:	0002      	movs	r2, r0
   11a60:	1dfb      	adds	r3, r7, #7
   11a62:	701a      	strb	r2, [r3, #0]
	user_count_struct.secondaryNumberIndex = index;
   11a64:	4b0b      	ldr	r3, [pc, #44]	; (11a94 <setSecondaryNumberIndex+0x3c>)
   11a66:	1dfa      	adds	r2, r7, #7
   11a68:	7812      	ldrb	r2, [r2, #0]
   11a6a:	711a      	strb	r2, [r3, #4]
	memcpy(page_data,&user_count_struct,sizeof(user_count_struct));
   11a6c:	4a0a      	ldr	r2, [pc, #40]	; (11a98 <setSecondaryNumberIndex+0x40>)
   11a6e:	4b09      	ldr	r3, [pc, #36]	; (11a94 <setSecondaryNumberIndex+0x3c>)
   11a70:	0010      	movs	r0, r2
   11a72:	0019      	movs	r1, r3
   11a74:	2308      	movs	r3, #8
   11a76:	001a      	movs	r2, r3
   11a78:	4b08      	ldr	r3, [pc, #32]	; (11a9c <setSecondaryNumberIndex+0x44>)
   11a7a:	4798      	blx	r3
	eeprom_emulator_write_page(USER_COUNTER_PAGE, page_data);
   11a7c:	4b06      	ldr	r3, [pc, #24]	; (11a98 <setSecondaryNumberIndex+0x40>)
   11a7e:	0019      	movs	r1, r3
   11a80:	2008      	movs	r0, #8
   11a82:	4b07      	ldr	r3, [pc, #28]	; (11aa0 <setSecondaryNumberIndex+0x48>)
   11a84:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   11a86:	4b07      	ldr	r3, [pc, #28]	; (11aa4 <setSecondaryNumberIndex+0x4c>)
   11a88:	4798      	blx	r3
}
   11a8a:	46c0      	nop			; (mov r8, r8)
   11a8c:	46bd      	mov	sp, r7
   11a8e:	b002      	add	sp, #8
   11a90:	bd80      	pop	{r7, pc}
   11a92:	46c0      	nop			; (mov r8, r8)
   11a94:	20000620 	.word	0x20000620
   11a98:	20000594 	.word	0x20000594
   11a9c:	000289c5 	.word	0x000289c5
   11aa0:	000235e1 	.word	0x000235e1
   11aa4:	00023789 	.word	0x00023789

00011aa8 <addPrimaryIndexedNumber>:

bool addPrimaryIndexedNumber(char *number)
{
   11aa8:	b590      	push	{r4, r7, lr}
   11aaa:	b085      	sub	sp, #20
   11aac:	af00      	add	r7, sp, #0
   11aae:	6078      	str	r0, [r7, #4]
	//checkUserExists would return a 1 based index,starting at 1 and not at 0
	uint8_t index = checkExists(number);
   11ab0:	230e      	movs	r3, #14
   11ab2:	18fc      	adds	r4, r7, r3
   11ab4:	687b      	ldr	r3, [r7, #4]
   11ab6:	0018      	movs	r0, r3
   11ab8:	4b21      	ldr	r3, [pc, #132]	; (11b40 <addPrimaryIndexedNumber+0x98>)
   11aba:	4798      	blx	r3
   11abc:	0003      	movs	r3, r0
   11abe:	7023      	strb	r3, [r4, #0]

	uint8_t newPrimaryIndex=0xFF;
   11ac0:	230f      	movs	r3, #15
   11ac2:	18fb      	adds	r3, r7, r3
   11ac4:	22ff      	movs	r2, #255	; 0xff
   11ac6:	701a      	strb	r2, [r3, #0]
	if(index >= user_count_struct.total_user_no_count)								//the numebr does not exists, need to add it
   11ac8:	4b1e      	ldr	r3, [pc, #120]	; (11b44 <addPrimaryIndexedNumber+0x9c>)
   11aca:	785b      	ldrb	r3, [r3, #1]
   11acc:	220e      	movs	r2, #14
   11ace:	18ba      	adds	r2, r7, r2
   11ad0:	7812      	ldrb	r2, [r2, #0]
   11ad2:	429a      	cmp	r2, r3
   11ad4:	d309      	bcc.n	11aea <addPrimaryIndexedNumber+0x42>
	{
		newPrimaryIndex = user_count_struct.current_user_no_count;
   11ad6:	230f      	movs	r3, #15
   11ad8:	18fb      	adds	r3, r7, r3
   11ada:	4a1a      	ldr	r2, [pc, #104]	; (11b44 <addPrimaryIndexedNumber+0x9c>)
   11adc:	7892      	ldrb	r2, [r2, #2]
   11ade:	701a      	strb	r2, [r3, #0]
		addNumber(number);
   11ae0:	687b      	ldr	r3, [r7, #4]
   11ae2:	0018      	movs	r0, r3
   11ae4:	4b18      	ldr	r3, [pc, #96]	; (11b48 <addPrimaryIndexedNumber+0xa0>)
   11ae6:	4798      	blx	r3
   11ae8:	e00c      	b.n	11b04 <addPrimaryIndexedNumber+0x5c>
	}
	else if(index<user_count_struct.total_user_no_count)
   11aea:	4b16      	ldr	r3, [pc, #88]	; (11b44 <addPrimaryIndexedNumber+0x9c>)
   11aec:	785b      	ldrb	r3, [r3, #1]
   11aee:	220e      	movs	r2, #14
   11af0:	18ba      	adds	r2, r7, r2
   11af2:	7812      	ldrb	r2, [r2, #0]
   11af4:	429a      	cmp	r2, r3
   11af6:	d205      	bcs.n	11b04 <addPrimaryIndexedNumber+0x5c>
	{
		newPrimaryIndex = index;
   11af8:	230f      	movs	r3, #15
   11afa:	18fb      	adds	r3, r7, r3
   11afc:	220e      	movs	r2, #14
   11afe:	18ba      	adds	r2, r7, r2
   11b00:	7812      	ldrb	r2, [r2, #0]
   11b02:	701a      	strb	r2, [r3, #0]
	}

	if(newPrimaryIndex < user_count_struct.total_user_no_count)
   11b04:	4b0f      	ldr	r3, [pc, #60]	; (11b44 <addPrimaryIndexedNumber+0x9c>)
   11b06:	785b      	ldrb	r3, [r3, #1]
   11b08:	220f      	movs	r2, #15
   11b0a:	18ba      	adds	r2, r7, r2
   11b0c:	7812      	ldrb	r2, [r2, #0]
   11b0e:	429a      	cmp	r2, r3
   11b10:	d210      	bcs.n	11b34 <addPrimaryIndexedNumber+0x8c>
	{
		// if current numbers present are more than 1, than set the previous primary number as secondary number
		if (user_count_struct.current_user_no_count>1)
   11b12:	4b0c      	ldr	r3, [pc, #48]	; (11b44 <addPrimaryIndexedNumber+0x9c>)
   11b14:	789b      	ldrb	r3, [r3, #2]
   11b16:	2b01      	cmp	r3, #1
   11b18:	d904      	bls.n	11b24 <addPrimaryIndexedNumber+0x7c>
		{
			setSecondaryNumberIndex(user_count_struct.primaryNumberIndex);
   11b1a:	4b0a      	ldr	r3, [pc, #40]	; (11b44 <addPrimaryIndexedNumber+0x9c>)
   11b1c:	78db      	ldrb	r3, [r3, #3]
   11b1e:	0018      	movs	r0, r3
   11b20:	4b0a      	ldr	r3, [pc, #40]	; (11b4c <addPrimaryIndexedNumber+0xa4>)
   11b22:	4798      	blx	r3
		}
		
		setPrimaryNumberIndex(newPrimaryIndex);
   11b24:	230f      	movs	r3, #15
   11b26:	18fb      	adds	r3, r7, r3
   11b28:	781b      	ldrb	r3, [r3, #0]
   11b2a:	0018      	movs	r0, r3
   11b2c:	4b08      	ldr	r3, [pc, #32]	; (11b50 <addPrimaryIndexedNumber+0xa8>)
   11b2e:	4798      	blx	r3
		return true;
   11b30:	2301      	movs	r3, #1
   11b32:	e000      	b.n	11b36 <addPrimaryIndexedNumber+0x8e>
	}

	return false;
   11b34:	2300      	movs	r3, #0
}
   11b36:	0018      	movs	r0, r3
   11b38:	46bd      	mov	sp, r7
   11b3a:	b005      	add	sp, #20
   11b3c:	bd90      	pop	{r4, r7, pc}
   11b3e:	46c0      	nop			; (mov r8, r8)
   11b40:	00010dd1 	.word	0x00010dd1
   11b44:	20000620 	.word	0x20000620
   11b48:	00010ed5 	.word	0x00010ed5
   11b4c:	00011a59 	.word	0x00011a59
   11b50:	00011a09 	.word	0x00011a09

00011b54 <addSecondaryIndexedNumber>:

bool addSecondaryIndexedNumber(char *number)
{
   11b54:	b590      	push	{r4, r7, lr}
   11b56:	b085      	sub	sp, #20
   11b58:	af00      	add	r7, sp, #0
   11b5a:	6078      	str	r0, [r7, #4]
	//check if any 2 numbers are present in system one of which would be primary, than only allow to add secondary number
	if(user_count_struct.current_user_no_count<2)
   11b5c:	4b21      	ldr	r3, [pc, #132]	; (11be4 <addSecondaryIndexedNumber+0x90>)
   11b5e:	789b      	ldrb	r3, [r3, #2]
   11b60:	2b01      	cmp	r3, #1
   11b62:	d801      	bhi.n	11b68 <addSecondaryIndexedNumber+0x14>
	return false;
   11b64:	2300      	movs	r3, #0
   11b66:	e039      	b.n	11bdc <addSecondaryIndexedNumber+0x88>

	//checkUserExists would return a 1 based index,starting at 1 and not at 0
	uint8_t index = checkExists(number);
   11b68:	230e      	movs	r3, #14
   11b6a:	18fc      	adds	r4, r7, r3
   11b6c:	687b      	ldr	r3, [r7, #4]
   11b6e:	0018      	movs	r0, r3
   11b70:	4b1d      	ldr	r3, [pc, #116]	; (11be8 <addSecondaryIndexedNumber+0x94>)
   11b72:	4798      	blx	r3
   11b74:	0003      	movs	r3, r0
   11b76:	7023      	strb	r3, [r4, #0]

	uint8_t newSecondaryIndex=0xFF;
   11b78:	230f      	movs	r3, #15
   11b7a:	18fb      	adds	r3, r7, r3
   11b7c:	22ff      	movs	r2, #255	; 0xff
   11b7e:	701a      	strb	r2, [r3, #0]
	if(index >= user_count_struct.total_user_no_count)								//number not present, need to add the number
   11b80:	4b18      	ldr	r3, [pc, #96]	; (11be4 <addSecondaryIndexedNumber+0x90>)
   11b82:	785b      	ldrb	r3, [r3, #1]
   11b84:	220e      	movs	r2, #14
   11b86:	18ba      	adds	r2, r7, r2
   11b88:	7812      	ldrb	r2, [r2, #0]
   11b8a:	429a      	cmp	r2, r3
   11b8c:	d309      	bcc.n	11ba2 <addSecondaryIndexedNumber+0x4e>
	{
		newSecondaryIndex = user_count_struct.current_user_no_count;
   11b8e:	230f      	movs	r3, #15
   11b90:	18fb      	adds	r3, r7, r3
   11b92:	4a14      	ldr	r2, [pc, #80]	; (11be4 <addSecondaryIndexedNumber+0x90>)
   11b94:	7892      	ldrb	r2, [r2, #2]
   11b96:	701a      	strb	r2, [r3, #0]
		addNumber(number);
   11b98:	687b      	ldr	r3, [r7, #4]
   11b9a:	0018      	movs	r0, r3
   11b9c:	4b13      	ldr	r3, [pc, #76]	; (11bec <addSecondaryIndexedNumber+0x98>)
   11b9e:	4798      	blx	r3
   11ba0:	e00c      	b.n	11bbc <addSecondaryIndexedNumber+0x68>
	}
	else if(index < user_count_struct.total_user_no_count)
   11ba2:	4b10      	ldr	r3, [pc, #64]	; (11be4 <addSecondaryIndexedNumber+0x90>)
   11ba4:	785b      	ldrb	r3, [r3, #1]
   11ba6:	220e      	movs	r2, #14
   11ba8:	18ba      	adds	r2, r7, r2
   11baa:	7812      	ldrb	r2, [r2, #0]
   11bac:	429a      	cmp	r2, r3
   11bae:	d205      	bcs.n	11bbc <addSecondaryIndexedNumber+0x68>
	{
		newSecondaryIndex = index;
   11bb0:	230f      	movs	r3, #15
   11bb2:	18fb      	adds	r3, r7, r3
   11bb4:	220e      	movs	r2, #14
   11bb6:	18ba      	adds	r2, r7, r2
   11bb8:	7812      	ldrb	r2, [r2, #0]
   11bba:	701a      	strb	r2, [r3, #0]
	}

	if(newSecondaryIndex < user_count_struct.total_user_no_count)
   11bbc:	4b09      	ldr	r3, [pc, #36]	; (11be4 <addSecondaryIndexedNumber+0x90>)
   11bbe:	785b      	ldrb	r3, [r3, #1]
   11bc0:	220f      	movs	r2, #15
   11bc2:	18ba      	adds	r2, r7, r2
   11bc4:	7812      	ldrb	r2, [r2, #0]
   11bc6:	429a      	cmp	r2, r3
   11bc8:	d207      	bcs.n	11bda <addSecondaryIndexedNumber+0x86>
	{
		setSecondaryNumberIndex(newSecondaryIndex);
   11bca:	230f      	movs	r3, #15
   11bcc:	18fb      	adds	r3, r7, r3
   11bce:	781b      	ldrb	r3, [r3, #0]
   11bd0:	0018      	movs	r0, r3
   11bd2:	4b07      	ldr	r3, [pc, #28]	; (11bf0 <addSecondaryIndexedNumber+0x9c>)
   11bd4:	4798      	blx	r3
		return true;
   11bd6:	2301      	movs	r3, #1
   11bd8:	e000      	b.n	11bdc <addSecondaryIndexedNumber+0x88>
	}
	return false;
   11bda:	2300      	movs	r3, #0
}
   11bdc:	0018      	movs	r0, r3
   11bde:	46bd      	mov	sp, r7
   11be0:	b005      	add	sp, #20
   11be2:	bd90      	pop	{r4, r7, pc}
   11be4:	20000620 	.word	0x20000620
   11be8:	00010dd1 	.word	0x00010dd1
   11bec:	00010ed5 	.word	0x00010ed5
   11bf0:	00011a59 	.word	0x00011a59

00011bf4 <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
   11bf4:	b580      	push	{r7, lr}
   11bf6:	b082      	sub	sp, #8
   11bf8:	af00      	add	r7, sp, #0
   11bfa:	0002      	movs	r2, r0
   11bfc:	1dfb      	adds	r3, r7, #7
   11bfe:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   11c00:	4b06      	ldr	r3, [pc, #24]	; (11c1c <system_interrupt_enable+0x28>)
   11c02:	1dfa      	adds	r2, r7, #7
   11c04:	7812      	ldrb	r2, [r2, #0]
   11c06:	0011      	movs	r1, r2
   11c08:	221f      	movs	r2, #31
   11c0a:	400a      	ands	r2, r1
   11c0c:	2101      	movs	r1, #1
   11c0e:	4091      	lsls	r1, r2
   11c10:	000a      	movs	r2, r1
   11c12:	601a      	str	r2, [r3, #0]
}
   11c14:	46c0      	nop			; (mov r8, r8)
   11c16:	46bd      	mov	sp, r7
   11c18:	b002      	add	sp, #8
   11c1a:	bd80      	pop	{r7, pc}
   11c1c:	e000e100 	.word	0xe000e100

00011c20 <system_interrupt_disable>:
 *
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
   11c20:	b580      	push	{r7, lr}
   11c22:	b082      	sub	sp, #8
   11c24:	af00      	add	r7, sp, #0
   11c26:	0002      	movs	r2, r0
   11c28:	1dfb      	adds	r3, r7, #7
   11c2a:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   11c2c:	4a07      	ldr	r2, [pc, #28]	; (11c4c <system_interrupt_disable+0x2c>)
   11c2e:	1dfb      	adds	r3, r7, #7
   11c30:	781b      	ldrb	r3, [r3, #0]
   11c32:	0019      	movs	r1, r3
   11c34:	231f      	movs	r3, #31
   11c36:	400b      	ands	r3, r1
   11c38:	2101      	movs	r1, #1
   11c3a:	4099      	lsls	r1, r3
   11c3c:	000b      	movs	r3, r1
   11c3e:	0019      	movs	r1, r3
   11c40:	2380      	movs	r3, #128	; 0x80
   11c42:	50d1      	str	r1, [r2, r3]
}
   11c44:	46c0      	nop			; (mov r8, r8)
   11c46:	46bd      	mov	sp, r7
   11c48:	b002      	add	sp, #8
   11c4a:	bd80      	pop	{r7, pc}
   11c4c:	e000e100 	.word	0xe000e100

00011c50 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
   11c50:	b580      	push	{r7, lr}
   11c52:	b084      	sub	sp, #16
   11c54:	af00      	add	r7, sp, #0
   11c56:	0002      	movs	r2, r0
   11c58:	1dfb      	adds	r3, r7, #7
   11c5a:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   11c5c:	230f      	movs	r3, #15
   11c5e:	18fb      	adds	r3, r7, r3
   11c60:	1dfa      	adds	r2, r7, #7
   11c62:	7812      	ldrb	r2, [r2, #0]
   11c64:	09d2      	lsrs	r2, r2, #7
   11c66:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   11c68:	230e      	movs	r3, #14
   11c6a:	18fb      	adds	r3, r7, r3
   11c6c:	1dfa      	adds	r2, r7, #7
   11c6e:	7812      	ldrb	r2, [r2, #0]
   11c70:	0952      	lsrs	r2, r2, #5
   11c72:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   11c74:	4b0d      	ldr	r3, [pc, #52]	; (11cac <system_pinmux_get_group_from_gpio_pin+0x5c>)
   11c76:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
   11c78:	230f      	movs	r3, #15
   11c7a:	18fb      	adds	r3, r7, r3
   11c7c:	781b      	ldrb	r3, [r3, #0]
   11c7e:	2b00      	cmp	r3, #0
   11c80:	d10f      	bne.n	11ca2 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   11c82:	230f      	movs	r3, #15
   11c84:	18fb      	adds	r3, r7, r3
   11c86:	781b      	ldrb	r3, [r3, #0]
   11c88:	009b      	lsls	r3, r3, #2
   11c8a:	2210      	movs	r2, #16
   11c8c:	4694      	mov	ip, r2
   11c8e:	44bc      	add	ip, r7
   11c90:	4463      	add	r3, ip
   11c92:	3b08      	subs	r3, #8
   11c94:	681a      	ldr	r2, [r3, #0]
   11c96:	230e      	movs	r3, #14
   11c98:	18fb      	adds	r3, r7, r3
   11c9a:	781b      	ldrb	r3, [r3, #0]
   11c9c:	01db      	lsls	r3, r3, #7
   11c9e:	18d3      	adds	r3, r2, r3
   11ca0:	e000      	b.n	11ca4 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
   11ca2:	2300      	movs	r3, #0
	}
}
   11ca4:	0018      	movs	r0, r3
   11ca6:	46bd      	mov	sp, r7
   11ca8:	b004      	add	sp, #16
   11caa:	bd80      	pop	{r7, pc}
   11cac:	41004400 	.word	0x41004400

00011cb0 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
   11cb0:	b580      	push	{r7, lr}
   11cb2:	b082      	sub	sp, #8
   11cb4:	af00      	add	r7, sp, #0
   11cb6:	0002      	movs	r2, r0
   11cb8:	1dfb      	adds	r3, r7, #7
   11cba:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   11cbc:	1dfb      	adds	r3, r7, #7
   11cbe:	781b      	ldrb	r3, [r3, #0]
   11cc0:	0018      	movs	r0, r3
   11cc2:	4b03      	ldr	r3, [pc, #12]	; (11cd0 <port_get_group_from_gpio_pin+0x20>)
   11cc4:	4798      	blx	r3
   11cc6:	0003      	movs	r3, r0
}
   11cc8:	0018      	movs	r0, r3
   11cca:	46bd      	mov	sp, r7
   11ccc:	b002      	add	sp, #8
   11cce:	bd80      	pop	{r7, pc}
   11cd0:	00011c51 	.word	0x00011c51

00011cd4 <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
   11cd4:	b580      	push	{r7, lr}
   11cd6:	b082      	sub	sp, #8
   11cd8:	af00      	add	r7, sp, #0
   11cda:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
   11cdc:	687b      	ldr	r3, [r7, #4]
   11cde:	2200      	movs	r2, #0
   11ce0:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   11ce2:	687b      	ldr	r3, [r7, #4]
   11ce4:	2201      	movs	r2, #1
   11ce6:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
   11ce8:	687b      	ldr	r3, [r7, #4]
   11cea:	2200      	movs	r2, #0
   11cec:	709a      	strb	r2, [r3, #2]
}
   11cee:	46c0      	nop			; (mov r8, r8)
   11cf0:	46bd      	mov	sp, r7
   11cf2:	b002      	add	sp, #8
   11cf4:	bd80      	pop	{r7, pc}
	...

00011cf8 <port_pin_get_input_level>:
 *
 *  \return Status of the port pin's input buffer.
 */
static inline bool port_pin_get_input_level(
		const uint8_t gpio_pin)
{
   11cf8:	b580      	push	{r7, lr}
   11cfa:	b084      	sub	sp, #16
   11cfc:	af00      	add	r7, sp, #0
   11cfe:	0002      	movs	r2, r0
   11d00:	1dfb      	adds	r3, r7, #7
   11d02:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   11d04:	1dfb      	adds	r3, r7, #7
   11d06:	781b      	ldrb	r3, [r3, #0]
   11d08:	0018      	movs	r0, r3
   11d0a:	4b0b      	ldr	r3, [pc, #44]	; (11d38 <port_pin_get_input_level+0x40>)
   11d0c:	4798      	blx	r3
   11d0e:	0003      	movs	r3, r0
   11d10:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   11d12:	1dfb      	adds	r3, r7, #7
   11d14:	781b      	ldrb	r3, [r3, #0]
   11d16:	221f      	movs	r2, #31
   11d18:	4013      	ands	r3, r2
   11d1a:	2201      	movs	r2, #1
   11d1c:	409a      	lsls	r2, r3
   11d1e:	0013      	movs	r3, r2
   11d20:	60bb      	str	r3, [r7, #8]

	return (port_base->IN.reg & pin_mask);
   11d22:	68fb      	ldr	r3, [r7, #12]
   11d24:	6a1b      	ldr	r3, [r3, #32]
   11d26:	68ba      	ldr	r2, [r7, #8]
   11d28:	4013      	ands	r3, r2
   11d2a:	1e5a      	subs	r2, r3, #1
   11d2c:	4193      	sbcs	r3, r2
   11d2e:	b2db      	uxtb	r3, r3
}
   11d30:	0018      	movs	r0, r3
   11d32:	46bd      	mov	sp, r7
   11d34:	b004      	add	sp, #16
   11d36:	bd80      	pop	{r7, pc}
   11d38:	00011cb1 	.word	0x00011cb1

00011d3c <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
   11d3c:	b580      	push	{r7, lr}
   11d3e:	b084      	sub	sp, #16
   11d40:	af00      	add	r7, sp, #0
   11d42:	0002      	movs	r2, r0
   11d44:	1dfb      	adds	r3, r7, #7
   11d46:	701a      	strb	r2, [r3, #0]
   11d48:	1dbb      	adds	r3, r7, #6
   11d4a:	1c0a      	adds	r2, r1, #0
   11d4c:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   11d4e:	1dfb      	adds	r3, r7, #7
   11d50:	781b      	ldrb	r3, [r3, #0]
   11d52:	0018      	movs	r0, r3
   11d54:	4b0d      	ldr	r3, [pc, #52]	; (11d8c <port_pin_set_output_level+0x50>)
   11d56:	4798      	blx	r3
   11d58:	0003      	movs	r3, r0
   11d5a:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   11d5c:	1dfb      	adds	r3, r7, #7
   11d5e:	781b      	ldrb	r3, [r3, #0]
   11d60:	221f      	movs	r2, #31
   11d62:	4013      	ands	r3, r2
   11d64:	2201      	movs	r2, #1
   11d66:	409a      	lsls	r2, r3
   11d68:	0013      	movs	r3, r2
   11d6a:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
   11d6c:	1dbb      	adds	r3, r7, #6
   11d6e:	781b      	ldrb	r3, [r3, #0]
   11d70:	2b00      	cmp	r3, #0
   11d72:	d003      	beq.n	11d7c <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   11d74:	68fb      	ldr	r3, [r7, #12]
   11d76:	68ba      	ldr	r2, [r7, #8]
   11d78:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
   11d7a:	e002      	b.n	11d82 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   11d7c:	68fb      	ldr	r3, [r7, #12]
   11d7e:	68ba      	ldr	r2, [r7, #8]
   11d80:	615a      	str	r2, [r3, #20]
}
   11d82:	46c0      	nop			; (mov r8, r8)
   11d84:	46bd      	mov	sp, r7
   11d86:	b004      	add	sp, #16
   11d88:	bd80      	pop	{r7, pc}
   11d8a:	46c0      	nop			; (mov r8, r8)
   11d8c:	00011cb1 	.word	0x00011cb1

00011d90 <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
   11d90:	b580      	push	{r7, lr}
   11d92:	b084      	sub	sp, #16
   11d94:	af00      	add	r7, sp, #0
   11d96:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
   11d98:	687b      	ldr	r3, [r7, #4]
   11d9a:	681b      	ldr	r3, [r3, #0]
   11d9c:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
   11d9e:	68fb      	ldr	r3, [r7, #12]
   11da0:	69db      	ldr	r3, [r3, #28]
   11da2:	1e5a      	subs	r2, r3, #1
   11da4:	4193      	sbcs	r3, r2
   11da6:	b2db      	uxtb	r3, r3
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
#endif
}
   11da8:	0018      	movs	r0, r3
   11daa:	46bd      	mov	sp, r7
   11dac:	b004      	add	sp, #16
   11dae:	bd80      	pop	{r7, pc}

00011db0 <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
   11db0:	b580      	push	{r7, lr}
   11db2:	b082      	sub	sp, #8
   11db4:	af00      	add	r7, sp, #0
   11db6:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
   11db8:	46c0      	nop			; (mov r8, r8)
   11dba:	687b      	ldr	r3, [r7, #4]
   11dbc:	0018      	movs	r0, r3
   11dbe:	4b04      	ldr	r3, [pc, #16]	; (11dd0 <_usart_wait_for_sync+0x20>)
   11dc0:	4798      	blx	r3
   11dc2:	1e03      	subs	r3, r0, #0
   11dc4:	d1f9      	bne.n	11dba <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
   11dc6:	46c0      	nop			; (mov r8, r8)
   11dc8:	46bd      	mov	sp, r7
   11dca:	b002      	add	sp, #8
   11dcc:	bd80      	pop	{r7, pc}
   11dce:	46c0      	nop			; (mov r8, r8)
   11dd0:	00011d91 	.word	0x00011d91

00011dd4 <usart_get_config_defaults>:
 *
 * \param[in,out] config  Pointer to configuration struct
 */
static inline void usart_get_config_defaults(
		struct usart_config *const config)
{
   11dd4:	b580      	push	{r7, lr}
   11dd6:	b082      	sub	sp, #8
   11dd8:	af00      	add	r7, sp, #0
   11dda:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
   11ddc:	687b      	ldr	r3, [r7, #4]
   11dde:	2280      	movs	r2, #128	; 0x80
   11de0:	05d2      	lsls	r2, r2, #23
   11de2:	601a      	str	r2, [r3, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
   11de4:	687b      	ldr	r3, [r7, #4]
   11de6:	2200      	movs	r2, #0
   11de8:	605a      	str	r2, [r3, #4]
	config->parity           = USART_PARITY_NONE;
   11dea:	687b      	ldr	r3, [r7, #4]
   11dec:	22ff      	movs	r2, #255	; 0xff
   11dee:	811a      	strh	r2, [r3, #8]
	config->stopbits         = USART_STOPBITS_1;
   11df0:	687b      	ldr	r3, [r7, #4]
   11df2:	2200      	movs	r2, #0
   11df4:	729a      	strb	r2, [r3, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
   11df6:	687b      	ldr	r3, [r7, #4]
   11df8:	2200      	movs	r2, #0
   11dfa:	72da      	strb	r2, [r3, #11]
	config->baudrate         = 9600;
   11dfc:	687b      	ldr	r3, [r7, #4]
   11dfe:	2296      	movs	r2, #150	; 0x96
   11e00:	0192      	lsls	r2, r2, #6
   11e02:	621a      	str	r2, [r3, #32]
	config->receiver_enable  = true;
   11e04:	687b      	ldr	r3, [r7, #4]
   11e06:	2224      	movs	r2, #36	; 0x24
   11e08:	2101      	movs	r1, #1
   11e0a:	5499      	strb	r1, [r3, r2]
	config->transmitter_enable = true;
   11e0c:	687b      	ldr	r3, [r7, #4]
   11e0e:	2225      	movs	r2, #37	; 0x25
   11e10:	2101      	movs	r1, #1
   11e12:	5499      	strb	r1, [r3, r2]
	config->clock_polarity_inverted = false;
   11e14:	687b      	ldr	r3, [r7, #4]
   11e16:	2226      	movs	r2, #38	; 0x26
   11e18:	2100      	movs	r1, #0
   11e1a:	5499      	strb	r1, [r3, r2]
	config->use_external_clock = false;
   11e1c:	687b      	ldr	r3, [r7, #4]
   11e1e:	2227      	movs	r2, #39	; 0x27
   11e20:	2100      	movs	r1, #0
   11e22:	5499      	strb	r1, [r3, r2]
	config->ext_clock_freq   = 0;
   11e24:	687b      	ldr	r3, [r7, #4]
   11e26:	2200      	movs	r2, #0
   11e28:	629a      	str	r2, [r3, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
   11e2a:	687b      	ldr	r3, [r7, #4]
   11e2c:	2288      	movs	r2, #136	; 0x88
   11e2e:	0352      	lsls	r2, r2, #13
   11e30:	60da      	str	r2, [r3, #12]
	config->run_in_standby   = false;
   11e32:	687b      	ldr	r3, [r7, #4]
   11e34:	222c      	movs	r2, #44	; 0x2c
   11e36:	2100      	movs	r1, #0
   11e38:	5499      	strb	r1, [r3, r2]
	config->generator_source = GCLK_GENERATOR_0;
   11e3a:	687b      	ldr	r3, [r7, #4]
   11e3c:	222d      	movs	r2, #45	; 0x2d
   11e3e:	2100      	movs	r1, #0
   11e40:	5499      	strb	r1, [r3, r2]
	config->pinmux_pad0      = PINMUX_DEFAULT;
   11e42:	687b      	ldr	r3, [r7, #4]
   11e44:	2200      	movs	r2, #0
   11e46:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad1      = PINMUX_DEFAULT;
   11e48:	687b      	ldr	r3, [r7, #4]
   11e4a:	2200      	movs	r2, #0
   11e4c:	635a      	str	r2, [r3, #52]	; 0x34
	config->pinmux_pad2      = PINMUX_DEFAULT;
   11e4e:	687b      	ldr	r3, [r7, #4]
   11e50:	2200      	movs	r2, #0
   11e52:	639a      	str	r2, [r3, #56]	; 0x38
	config->pinmux_pad3      = PINMUX_DEFAULT;
   11e54:	687b      	ldr	r3, [r7, #4]
   11e56:	2200      	movs	r2, #0
   11e58:	63da      	str	r2, [r3, #60]	; 0x3c
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
   11e5a:	687b      	ldr	r3, [r7, #4]
   11e5c:	2200      	movs	r2, #0
   11e5e:	615a      	str	r2, [r3, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
   11e60:	687b      	ldr	r3, [r7, #4]
   11e62:	2200      	movs	r2, #0
   11e64:	821a      	strh	r2, [r3, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
   11e66:	687b      	ldr	r3, [r7, #4]
   11e68:	2200      	movs	r2, #0
   11e6a:	76da      	strb	r2, [r3, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
   11e6c:	687b      	ldr	r3, [r7, #4]
   11e6e:	2200      	movs	r2, #0
   11e70:	761a      	strb	r2, [r3, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
   11e72:	687b      	ldr	r3, [r7, #4]
   11e74:	2200      	movs	r2, #0
   11e76:	771a      	strb	r2, [r3, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
   11e78:	687b      	ldr	r3, [r7, #4]
   11e7a:	2200      	movs	r2, #0
   11e7c:	765a      	strb	r2, [r3, #25]
	config->receive_pulse_length                    = 19;
   11e7e:	687b      	ldr	r3, [r7, #4]
   11e80:	2213      	movs	r2, #19
   11e82:	769a      	strb	r2, [r3, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
   11e84:	687b      	ldr	r3, [r7, #4]
   11e86:	2200      	movs	r2, #0
   11e88:	775a      	strb	r2, [r3, #29]
#endif
#ifdef FEATURE_USART_RS485
	config->rs485_guard_time = RS485_GUARD_TIME_0_BIT;
#endif
}
   11e8a:	46c0      	nop			; (mov r8, r8)
   11e8c:	46bd      	mov	sp, r7
   11e8e:	b002      	add	sp, #8
   11e90:	bd80      	pop	{r7, pc}
	...

00011e94 <usart_enable>:
 *
 * \param[in]  module  Pointer to USART software instance struct
 */
static inline void usart_enable(
		const struct usart_module *const module)
{
   11e94:	b580      	push	{r7, lr}
   11e96:	b084      	sub	sp, #16
   11e98:	af00      	add	r7, sp, #0
   11e9a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   11e9c:	687b      	ldr	r3, [r7, #4]
   11e9e:	681b      	ldr	r3, [r3, #0]
   11ea0:	60fb      	str	r3, [r7, #12]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   11ea2:	687b      	ldr	r3, [r7, #4]
   11ea4:	681b      	ldr	r3, [r3, #0]
   11ea6:	0018      	movs	r0, r3
   11ea8:	4b09      	ldr	r3, [pc, #36]	; (11ed0 <usart_enable+0x3c>)
   11eaa:	4798      	blx	r3
   11eac:	0003      	movs	r3, r0
   11eae:	0018      	movs	r0, r3
   11eb0:	4b08      	ldr	r3, [pc, #32]	; (11ed4 <usart_enable+0x40>)
   11eb2:	4798      	blx	r3
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   11eb4:	687b      	ldr	r3, [r7, #4]
   11eb6:	0018      	movs	r0, r3
   11eb8:	4b07      	ldr	r3, [pc, #28]	; (11ed8 <usart_enable+0x44>)
   11eba:	4798      	blx	r3

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
   11ebc:	68fb      	ldr	r3, [r7, #12]
   11ebe:	681b      	ldr	r3, [r3, #0]
   11ec0:	2202      	movs	r2, #2
   11ec2:	431a      	orrs	r2, r3
   11ec4:	68fb      	ldr	r3, [r7, #12]
   11ec6:	601a      	str	r2, [r3, #0]
}
   11ec8:	46c0      	nop			; (mov r8, r8)
   11eca:	46bd      	mov	sp, r7
   11ecc:	b004      	add	sp, #16
   11ece:	bd80      	pop	{r7, pc}
   11ed0:	00021e4d 	.word	0x00021e4d
   11ed4:	00011bf5 	.word	0x00011bf5
   11ed8:	00011db1 	.word	0x00011db1

00011edc <usart_disable>:
 *
 * \param[in]  module  Pointer to USART software instance struct
 */
static inline void usart_disable(
		const struct usart_module *const module)
{
   11edc:	b580      	push	{r7, lr}
   11ede:	b084      	sub	sp, #16
   11ee0:	af00      	add	r7, sp, #0
   11ee2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   11ee4:	687b      	ldr	r3, [r7, #4]
   11ee6:	681b      	ldr	r3, [r3, #0]
   11ee8:	60fb      	str	r3, [r7, #12]

#if USART_CALLBACK_MODE == true
	/* Disable Global interrupt for module */
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
   11eea:	687b      	ldr	r3, [r7, #4]
   11eec:	681b      	ldr	r3, [r3, #0]
   11eee:	0018      	movs	r0, r3
   11ef0:	4b0a      	ldr	r3, [pc, #40]	; (11f1c <usart_disable+0x40>)
   11ef2:	4798      	blx	r3
   11ef4:	0003      	movs	r3, r0
   11ef6:	0018      	movs	r0, r3
   11ef8:	4b09      	ldr	r3, [pc, #36]	; (11f20 <usart_disable+0x44>)
   11efa:	4798      	blx	r3
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   11efc:	687b      	ldr	r3, [r7, #4]
   11efe:	0018      	movs	r0, r3
   11f00:	4b08      	ldr	r3, [pc, #32]	; (11f24 <usart_disable+0x48>)
   11f02:	4798      	blx	r3

	/* Disable USART module */
	usart_hw->CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
   11f04:	68fb      	ldr	r3, [r7, #12]
   11f06:	681b      	ldr	r3, [r3, #0]
   11f08:	2202      	movs	r2, #2
   11f0a:	4393      	bics	r3, r2
   11f0c:	001a      	movs	r2, r3
   11f0e:	68fb      	ldr	r3, [r7, #12]
   11f10:	601a      	str	r2, [r3, #0]
}
   11f12:	46c0      	nop			; (mov r8, r8)
   11f14:	46bd      	mov	sp, r7
   11f16:	b004      	add	sp, #16
   11f18:	bd80      	pop	{r7, pc}
   11f1a:	46c0      	nop			; (mov r8, r8)
   11f1c:	00021e4d 	.word	0x00021e4d
   11f20:	00011c21 	.word	0x00011c21
   11f24:	00011db1 	.word	0x00011db1

00011f28 <usart_reset>:
 *
 * \param[in]  module  Pointer to the USART software instance struct
 */
static inline void usart_reset(
		const struct usart_module *const module)
{
   11f28:	b580      	push	{r7, lr}
   11f2a:	b084      	sub	sp, #16
   11f2c:	af00      	add	r7, sp, #0
   11f2e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   11f30:	687b      	ldr	r3, [r7, #4]
   11f32:	681b      	ldr	r3, [r3, #0]
   11f34:	60fb      	str	r3, [r7, #12]

	usart_disable(module);
   11f36:	687b      	ldr	r3, [r7, #4]
   11f38:	0018      	movs	r0, r3
   11f3a:	4b06      	ldr	r3, [pc, #24]	; (11f54 <usart_reset+0x2c>)
   11f3c:	4798      	blx	r3

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   11f3e:	687b      	ldr	r3, [r7, #4]
   11f40:	0018      	movs	r0, r3
   11f42:	4b05      	ldr	r3, [pc, #20]	; (11f58 <usart_reset+0x30>)
   11f44:	4798      	blx	r3

	/* Reset module */
	usart_hw->CTRLA.reg = SERCOM_USART_CTRLA_SWRST;
   11f46:	68fb      	ldr	r3, [r7, #12]
   11f48:	2201      	movs	r2, #1
   11f4a:	601a      	str	r2, [r3, #0]
}
   11f4c:	46c0      	nop			; (mov r8, r8)
   11f4e:	46bd      	mov	sp, r7
   11f50:	b004      	add	sp, #16
   11f52:	bd80      	pop	{r7, pc}
   11f54:	00011edd 	.word	0x00011edd
   11f58:	00011db1 	.word	0x00011db1

00011f5c <gsm_timer_callback>:
/** FreeRTOS timer callback function, fired when the a timer period has elapsed.
*
*  \param[in]  timer  ID of the timer that has expired.
*/
static void gsm_timer_callback(TimerHandle_t timer)
{
   11f5c:	b580      	push	{r7, lr}
   11f5e:	b082      	sub	sp, #8
   11f60:	af00      	add	r7, sp, #0
   11f62:	6078      	str	r0, [r7, #4]
}
   11f64:	46c0      	nop			; (mov r8, r8)
   11f66:	46bd      	mov	sp, r7
   11f68:	b002      	add	sp, #8
   11f6a:	bd80      	pop	{r7, pc}

00011f6c <Flush_RX_Buffer>:

void Flush_RX_Buffer(void)
{
   11f6c:	b580      	push	{r7, lr}
   11f6e:	b082      	sub	sp, #8
   11f70:	af00      	add	r7, sp, #0
	uint8_t ucharTemp_Value;
	portBASE_TYPE xStatus;
	while(1)
	{
		xStatus=xQueueReceive(gsm_rx_queue,&ucharTemp_Value,0);
   11f72:	4b09      	ldr	r3, [pc, #36]	; (11f98 <Flush_RX_Buffer+0x2c>)
   11f74:	681b      	ldr	r3, [r3, #0]
   11f76:	1cf9      	adds	r1, r7, #3
   11f78:	2200      	movs	r2, #0
   11f7a:	0018      	movs	r0, r3
   11f7c:	4b07      	ldr	r3, [pc, #28]	; (11f9c <Flush_RX_Buffer+0x30>)
   11f7e:	4798      	blx	r3
   11f80:	0003      	movs	r3, r0
   11f82:	607b      	str	r3, [r7, #4]
		if (xStatus==errQUEUE_EMPTY)
   11f84:	687b      	ldr	r3, [r7, #4]
   11f86:	2b00      	cmp	r3, #0
   11f88:	d000      	beq.n	11f8c <Flush_RX_Buffer+0x20>
		xStatus=xQueueReceive(gsm_rx_queue,&ucharTemp_Value,0);
   11f8a:	e7f2      	b.n	11f72 <Flush_RX_Buffer+0x6>
		{
			break;
   11f8c:	46c0      	nop			; (mov r8, r8)
		}
	}
}
   11f8e:	46c0      	nop			; (mov r8, r8)
   11f90:	46bd      	mov	sp, r7
   11f92:	b002      	add	sp, #8
   11f94:	bd80      	pop	{r7, pc}
   11f96:	46c0      	nop			; (mov r8, r8)
   11f98:	20000220 	.word	0x20000220
   11f9c:	0001f031 	.word	0x0001f031

00011fa0 <gsm_rx_handler>:

static void gsm_rx_handler(uint8_t instance)
{
   11fa0:	b590      	push	{r4, r7, lr}
   11fa2:	b085      	sub	sp, #20
   11fa4:	af00      	add	r7, sp, #0
   11fa6:	0002      	movs	r2, r0
   11fa8:	1dfb      	adds	r3, r7, #7
   11faa:	701a      	strb	r2, [r3, #0]
	SercomUsart *const usart_hw = &GSM_SERCOM->USART;
   11fac:	4b19      	ldr	r3, [pc, #100]	; (12014 <gsm_rx_handler+0x74>)
   11fae:	60fb      	str	r3, [r7, #12]
	UNUSED(instance);
	if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)
   11fb0:	68fb      	ldr	r3, [r7, #12]
   11fb2:	7e1b      	ldrb	r3, [r3, #24]
   11fb4:	b2db      	uxtb	r3, r3
   11fb6:	001a      	movs	r2, r3
   11fb8:	2304      	movs	r3, #4
   11fba:	4013      	ands	r3, r2
   11fbc:	d026      	beq.n	1200c <gsm_rx_handler+0x6c>
	{
		/* Check if a data reception error occurred */
		uint8_t rx_error = usart_hw->STATUS.reg &
   11fbe:	68fb      	ldr	r3, [r7, #12]
   11fc0:	8b5b      	ldrh	r3, [r3, #26]
   11fc2:	b29b      	uxth	r3, r3
   11fc4:	b2da      	uxtb	r2, r3
   11fc6:	230b      	movs	r3, #11
   11fc8:	18fb      	adds	r3, r7, r3
   11fca:	2106      	movs	r1, #6
   11fcc:	400a      	ands	r2, r1
   11fce:	701a      	strb	r2, [r3, #0]
		(SERCOM_USART_STATUS_FERR | SERCOM_USART_STATUS_BUFOVF);
		/* If error occurred clear the error flags, otherwise queue new data */
		if (rx_error)
   11fd0:	230b      	movs	r3, #11
   11fd2:	18fb      	adds	r3, r7, r3
   11fd4:	781b      	ldrb	r3, [r3, #0]
   11fd6:	2b00      	cmp	r3, #0
   11fd8:	d006      	beq.n	11fe8 <gsm_rx_handler+0x48>
		{
			usart_hw->STATUS.reg = rx_error;
   11fda:	230b      	movs	r3, #11
   11fdc:	18fb      	adds	r3, r7, r3
   11fde:	781b      	ldrb	r3, [r3, #0]
   11fe0:	b29a      	uxth	r2, r3
   11fe2:	68fb      	ldr	r3, [r7, #12]
   11fe4:	835a      	strh	r2, [r3, #26]
			uint8_t data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
			xQueueSendFromISR(gsm_rx_queue, &data, NULL);
			gsm_module_exit_sleep(true);
		}
	}
}
   11fe6:	e011      	b.n	1200c <gsm_rx_handler+0x6c>
			uint8_t data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
   11fe8:	68fb      	ldr	r3, [r7, #12]
   11fea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
   11fec:	b29b      	uxth	r3, r3
   11fee:	b2da      	uxtb	r2, r3
   11ff0:	230a      	movs	r3, #10
   11ff2:	18fb      	adds	r3, r7, r3
   11ff4:	701a      	strb	r2, [r3, #0]
			xQueueSendFromISR(gsm_rx_queue, &data, NULL);
   11ff6:	4b08      	ldr	r3, [pc, #32]	; (12018 <gsm_rx_handler+0x78>)
   11ff8:	6818      	ldr	r0, [r3, #0]
   11ffa:	230a      	movs	r3, #10
   11ffc:	18f9      	adds	r1, r7, r3
   11ffe:	2300      	movs	r3, #0
   12000:	2200      	movs	r2, #0
   12002:	4c06      	ldr	r4, [pc, #24]	; (1201c <gsm_rx_handler+0x7c>)
   12004:	47a0      	blx	r4
			gsm_module_exit_sleep(true);
   12006:	2001      	movs	r0, #1
   12008:	4b05      	ldr	r3, [pc, #20]	; (12020 <gsm_rx_handler+0x80>)
   1200a:	4798      	blx	r3
}
   1200c:	46c0      	nop			; (mov r8, r8)
   1200e:	46bd      	mov	sp, r7
   12010:	b005      	add	sp, #20
   12012:	bd90      	pop	{r4, r7, pc}
   12014:	42001400 	.word	0x42001400
   12018:	20000220 	.word	0x20000220
   1201c:	0001ef11 	.word	0x0001ef11
   12020:	0001220d 	.word	0x0001220d

00012024 <gsm_ring_detect_pin_callback>:

static void gsm_ring_detect_pin_callback(void)
{
   12024:	b580      	push	{r7, lr}
   12026:	af00      	add	r7, sp, #0
	isRinging = !port_pin_get_input_level(GSM_RING_PIN);
   12028:	2031      	movs	r0, #49	; 0x31
   1202a:	4b09      	ldr	r3, [pc, #36]	; (12050 <gsm_ring_detect_pin_callback+0x2c>)
   1202c:	4798      	blx	r3
   1202e:	0003      	movs	r3, r0
   12030:	1e5a      	subs	r2, r3, #1
   12032:	4193      	sbcs	r3, r2
   12034:	b2db      	uxtb	r3, r3
   12036:	2201      	movs	r2, #1
   12038:	4053      	eors	r3, r2
   1203a:	b2db      	uxtb	r3, r3
   1203c:	1c1a      	adds	r2, r3, #0
   1203e:	2301      	movs	r3, #1
   12040:	4013      	ands	r3, r2
   12042:	b2da      	uxtb	r2, r3
   12044:	4b03      	ldr	r3, [pc, #12]	; (12054 <gsm_ring_detect_pin_callback+0x30>)
   12046:	701a      	strb	r2, [r3, #0]
}
   12048:	46c0      	nop			; (mov r8, r8)
   1204a:	46bd      	mov	sp, r7
   1204c:	bd80      	pop	{r7, pc}
   1204e:	46c0      	nop			; (mov r8, r8)
   12050:	00011cf9 	.word	0x00011cf9
   12054:	20000696 	.word	0x20000696

00012058 <gsm_init>:

void gsm_init(void)
{
   12058:	b590      	push	{r4, r7, lr}
   1205a:	b097      	sub	sp, #92	; 0x5c
   1205c:	af02      	add	r7, sp, #8
	struct port_config gsm_pin_config;
	port_get_config_defaults(&gsm_pin_config);
   1205e:	234c      	movs	r3, #76	; 0x4c
   12060:	18fb      	adds	r3, r7, r3
   12062:	0018      	movs	r0, r3
   12064:	4b4d      	ldr	r3, [pc, #308]	; (1219c <gsm_init+0x144>)
   12066:	4798      	blx	r3
	
	/* Configure pin to control the GSM module sleep state */
	gsm_pin_config.direction = PORT_PIN_DIR_OUTPUT;
   12068:	234c      	movs	r3, #76	; 0x4c
   1206a:	18fb      	adds	r3, r7, r3
   1206c:	2201      	movs	r2, #1
   1206e:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(GSM_DTR_PIN, &gsm_pin_config);
   12070:	234c      	movs	r3, #76	; 0x4c
   12072:	18fb      	adds	r3, r7, r3
   12074:	0019      	movs	r1, r3
   12076:	2014      	movs	r0, #20
   12078:	4b49      	ldr	r3, [pc, #292]	; (121a0 <gsm_init+0x148>)
   1207a:	4798      	blx	r3
	port_pin_set_output_level(GSM_DTR_PIN, !GSM_DTR_PIN_ACTIVE);
   1207c:	2100      	movs	r1, #0
   1207e:	2014      	movs	r0, #20
   12080:	4b48      	ldr	r3, [pc, #288]	; (121a4 <gsm_init+0x14c>)
   12082:	4798      	blx	r3
	
	//////////////////////////////////////////////////////////////////////////
	struct extint_chan_conf config_extint_chan;
	extint_chan_get_config_defaults(&config_extint_chan);
   12084:	2340      	movs	r3, #64	; 0x40
   12086:	18fb      	adds	r3, r7, r3
   12088:	0018      	movs	r0, r3
   1208a:	4b47      	ldr	r3, [pc, #284]	; (121a8 <gsm_init+0x150>)
   1208c:	4798      	blx	r3
	config_extint_chan.gpio_pin = GSM_RING_EIC_PIN;
   1208e:	2340      	movs	r3, #64	; 0x40
   12090:	18fb      	adds	r3, r7, r3
   12092:	2231      	movs	r2, #49	; 0x31
   12094:	601a      	str	r2, [r3, #0]
	config_extint_chan.gpio_pin_mux = GSM_RING_EIC_MUX;
   12096:	2340      	movs	r3, #64	; 0x40
   12098:	18fb      	adds	r3, r7, r3
   1209a:	2200      	movs	r2, #0
   1209c:	605a      	str	r2, [r3, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
   1209e:	2340      	movs	r3, #64	; 0x40
   120a0:	18fb      	adds	r3, r7, r3
   120a2:	2201      	movs	r2, #1
   120a4:	721a      	strb	r2, [r3, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_BOTH;
   120a6:	2340      	movs	r3, #64	; 0x40
   120a8:	18fb      	adds	r3, r7, r3
   120aa:	2203      	movs	r2, #3
   120ac:	72da      	strb	r2, [r3, #11]
	extint_chan_set_config(GSM_RING_EIC_LINE, &config_extint_chan);
   120ae:	2340      	movs	r3, #64	; 0x40
   120b0:	18fb      	adds	r3, r7, r3
   120b2:	0019      	movs	r1, r3
   120b4:	2001      	movs	r0, #1
   120b6:	4b3d      	ldr	r3, [pc, #244]	; (121ac <gsm_init+0x154>)
   120b8:	4798      	blx	r3
	
	extint_chan_enable_callback(GSM_RING_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
   120ba:	2100      	movs	r1, #0
   120bc:	2001      	movs	r0, #1
   120be:	4b3c      	ldr	r3, [pc, #240]	; (121b0 <gsm_init+0x158>)
   120c0:	4798      	blx	r3
	extint_register_callback(gsm_ring_detect_pin_callback,GSM_RING_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
   120c2:	4b3c      	ldr	r3, [pc, #240]	; (121b4 <gsm_init+0x15c>)
   120c4:	2200      	movs	r2, #0
   120c6:	2101      	movs	r1, #1
   120c8:	0018      	movs	r0, r3
   120ca:	4b3b      	ldr	r3, [pc, #236]	; (121b8 <gsm_init+0x160>)
   120cc:	4798      	blx	r3
	//////////////////////////////////////////////////////////////////////////
	
	gsm_rx_queue = xQueueCreate(240, sizeof(uint8_t));
   120ce:	2200      	movs	r2, #0
   120d0:	2101      	movs	r1, #1
   120d2:	20f0      	movs	r0, #240	; 0xf0
   120d4:	4b39      	ldr	r3, [pc, #228]	; (121bc <gsm_init+0x164>)
   120d6:	4798      	blx	r3
   120d8:	0002      	movs	r2, r0
   120da:	4b39      	ldr	r3, [pc, #228]	; (121c0 <gsm_init+0x168>)
   120dc:	601a      	str	r2, [r3, #0]
	gsm_cmd_timeout_timer = xTimerCreate((const char *)"GSM Timeout",GSM_TIMEOUT_PERIOD_TICKS, pdFALSE, NULL, gsm_timer_callback);
   120de:	4939      	ldr	r1, [pc, #228]	; (121c4 <gsm_init+0x16c>)
   120e0:	4839      	ldr	r0, [pc, #228]	; (121c8 <gsm_init+0x170>)
   120e2:	4b3a      	ldr	r3, [pc, #232]	; (121cc <gsm_init+0x174>)
   120e4:	9300      	str	r3, [sp, #0]
   120e6:	2300      	movs	r3, #0
   120e8:	2200      	movs	r2, #0
   120ea:	4c39      	ldr	r4, [pc, #228]	; (121d0 <gsm_init+0x178>)
   120ec:	47a0      	blx	r4
   120ee:	0002      	movs	r2, r0
   120f0:	4b38      	ldr	r3, [pc, #224]	; (121d4 <gsm_init+0x17c>)
   120f2:	601a      	str	r2, [r3, #0]
	vSemaphoreCreateBinary(gsm_busy_semaphore);
   120f4:	2203      	movs	r2, #3
   120f6:	2100      	movs	r1, #0
   120f8:	2001      	movs	r0, #1
   120fa:	4b30      	ldr	r3, [pc, #192]	; (121bc <gsm_init+0x164>)
   120fc:	4798      	blx	r3
   120fe:	0002      	movs	r2, r0
   12100:	4b35      	ldr	r3, [pc, #212]	; (121d8 <gsm_init+0x180>)
   12102:	601a      	str	r2, [r3, #0]
   12104:	4b34      	ldr	r3, [pc, #208]	; (121d8 <gsm_init+0x180>)
   12106:	681b      	ldr	r3, [r3, #0]
   12108:	2b00      	cmp	r3, #0
   1210a:	d006      	beq.n	1211a <gsm_init+0xc2>
   1210c:	4b32      	ldr	r3, [pc, #200]	; (121d8 <gsm_init+0x180>)
   1210e:	6818      	ldr	r0, [r3, #0]
   12110:	2300      	movs	r3, #0
   12112:	2200      	movs	r2, #0
   12114:	2100      	movs	r1, #0
   12116:	4c31      	ldr	r4, [pc, #196]	; (121dc <gsm_init+0x184>)
   12118:	47a0      	blx	r4
	
	struct usart_config config_usart;
	usart_get_config_defaults(&config_usart);
   1211a:	003b      	movs	r3, r7
   1211c:	0018      	movs	r0, r3
   1211e:	4b30      	ldr	r3, [pc, #192]	; (121e0 <gsm_init+0x188>)
   12120:	4798      	blx	r3
	config_usart.baudrate		= GSM_BAUDRATE;
   12122:	003b      	movs	r3, r7
   12124:	22e1      	movs	r2, #225	; 0xe1
   12126:	0252      	lsls	r2, r2, #9
   12128:	621a      	str	r2, [r3, #32]
	config_usart.mux_setting	= GSM_SERCOM_MUX;
   1212a:	003b      	movs	r3, r7
   1212c:	2280      	movs	r2, #128	; 0x80
   1212e:	0352      	lsls	r2, r2, #13
   12130:	60da      	str	r2, [r3, #12]
	config_usart.pinmux_pad0	= GSM_SERCOM_PAD0_MUX;
   12132:	003b      	movs	r3, r7
   12134:	4a2b      	ldr	r2, [pc, #172]	; (121e4 <gsm_init+0x18c>)
   12136:	631a      	str	r2, [r3, #48]	; 0x30
	config_usart.pinmux_pad1	= GSM_SERCOM_PAD1_MUX;
   12138:	003b      	movs	r3, r7
   1213a:	4a2b      	ldr	r2, [pc, #172]	; (121e8 <gsm_init+0x190>)
   1213c:	635a      	str	r2, [r3, #52]	; 0x34
	config_usart.pinmux_pad2	= GSM_SERCOM_PAD2_MUX;
   1213e:	003b      	movs	r3, r7
   12140:	2201      	movs	r2, #1
   12142:	4252      	negs	r2, r2
   12144:	639a      	str	r2, [r3, #56]	; 0x38
	config_usart.pinmux_pad3	= GSM_SERCOM_PAD3_MUX;
   12146:	003b      	movs	r3, r7
   12148:	2201      	movs	r2, #1
   1214a:	4252      	negs	r2, r2
   1214c:	63da      	str	r2, [r3, #60]	; 0x3c
	config_usart.run_in_standby = true;
   1214e:	003b      	movs	r3, r7
   12150:	222c      	movs	r2, #44	; 0x2c
   12152:	2101      	movs	r1, #1
   12154:	5499      	strb	r1, [r3, r2]
	while (usart_init(&gsm_usart,GSM_SERCOM, &config_usart) != STATUS_OK)
   12156:	e003      	b.n	12160 <gsm_init+0x108>
	{
		usart_reset(&gsm_usart);
   12158:	4b24      	ldr	r3, [pc, #144]	; (121ec <gsm_init+0x194>)
   1215a:	0018      	movs	r0, r3
   1215c:	4b24      	ldr	r3, [pc, #144]	; (121f0 <gsm_init+0x198>)
   1215e:	4798      	blx	r3
	while (usart_init(&gsm_usart,GSM_SERCOM, &config_usart) != STATUS_OK)
   12160:	003a      	movs	r2, r7
   12162:	4924      	ldr	r1, [pc, #144]	; (121f4 <gsm_init+0x19c>)
   12164:	4b21      	ldr	r3, [pc, #132]	; (121ec <gsm_init+0x194>)
   12166:	0018      	movs	r0, r3
   12168:	4b23      	ldr	r3, [pc, #140]	; (121f8 <gsm_init+0x1a0>)
   1216a:	4798      	blx	r3
   1216c:	1e03      	subs	r3, r0, #0
   1216e:	d1f3      	bne.n	12158 <gsm_init+0x100>
	}
	usart_enable(&gsm_usart);
   12170:	4b1e      	ldr	r3, [pc, #120]	; (121ec <gsm_init+0x194>)
   12172:	0018      	movs	r0, r3
   12174:	4b21      	ldr	r3, [pc, #132]	; (121fc <gsm_init+0x1a4>)
   12176:	4798      	blx	r3
	_sercom_set_handler(_sercom_get_sercom_inst_index(GSM_SERCOM),gsm_rx_handler);
   12178:	4b1e      	ldr	r3, [pc, #120]	; (121f4 <gsm_init+0x19c>)
   1217a:	0018      	movs	r0, r3
   1217c:	4b20      	ldr	r3, [pc, #128]	; (12200 <gsm_init+0x1a8>)
   1217e:	4798      	blx	r3
   12180:	0003      	movs	r3, r0
   12182:	001a      	movs	r2, r3
   12184:	4b1f      	ldr	r3, [pc, #124]	; (12204 <gsm_init+0x1ac>)
   12186:	0019      	movs	r1, r3
   12188:	0010      	movs	r0, r2
   1218a:	4b1f      	ldr	r3, [pc, #124]	; (12208 <gsm_init+0x1b0>)
   1218c:	4798      	blx	r3
	GSM_SERCOM->USART.INTENSET.reg=SERCOM_USART_INTFLAG_RXC;
   1218e:	4b19      	ldr	r3, [pc, #100]	; (121f4 <gsm_init+0x19c>)
   12190:	2204      	movs	r2, #4
   12192:	759a      	strb	r2, [r3, #22]
}
   12194:	46c0      	nop			; (mov r8, r8)
   12196:	46bd      	mov	sp, r7
   12198:	b015      	add	sp, #84	; 0x54
   1219a:	bd90      	pop	{r4, r7, pc}
   1219c:	00011cd5 	.word	0x00011cd5
   121a0:	00022b61 	.word	0x00022b61
   121a4:	00011d3d 	.word	0x00011d3d
   121a8:	0001daf9 	.word	0x0001daf9
   121ac:	0001db2d 	.word	0x0001db2d
   121b0:	00022051 	.word	0x00022051
   121b4:	00012025 	.word	0x00012025
   121b8:	00021fed 	.word	0x00021fed
   121bc:	0001ec75 	.word	0x0001ec75
   121c0:	20000220 	.word	0x20000220
   121c4:	00001388 	.word	0x00001388
   121c8:	0002969c 	.word	0x0002969c
   121cc:	00011f5d 	.word	0x00011f5d
   121d0:	000209f9 	.word	0x000209f9
   121d4:	20000224 	.word	0x20000224
   121d8:	20000228 	.word	0x20000228
   121dc:	0001ed31 	.word	0x0001ed31
   121e0:	00011dd5 	.word	0x00011dd5
   121e4:	00160002 	.word	0x00160002
   121e8:	00170002 	.word	0x00170002
   121ec:	20000698 	.word	0x20000698
   121f0:	00011f29 	.word	0x00011f29
   121f4:	42001400 	.word	0x42001400
   121f8:	00021645 	.word	0x00021645
   121fc:	00011e95 	.word	0x00011e95
   12200:	0001e70d 	.word	0x0001e70d
   12204:	00011fa1 	.word	0x00011fa1
   12208:	00021de1 	.word	0x00021de1

0001220c <gsm_module_exit_sleep>:

void gsm_module_exit_sleep(bool calledFromRead)
{
   1220c:	b580      	push	{r7, lr}
   1220e:	b082      	sub	sp, #8
   12210:	af00      	add	r7, sp, #0
   12212:	0002      	movs	r2, r0
   12214:	1dfb      	adds	r3, r7, #7
   12216:	701a      	strb	r2, [r3, #0]
	if (!isGSMModuleAwake)
   12218:	4b10      	ldr	r3, [pc, #64]	; (1225c <gsm_module_exit_sleep+0x50>)
   1221a:	781b      	ldrb	r3, [r3, #0]
   1221c:	b2db      	uxtb	r3, r3
   1221e:	2201      	movs	r2, #1
   12220:	4053      	eors	r3, r2
   12222:	b2db      	uxtb	r3, r3
   12224:	2b00      	cmp	r3, #0
   12226:	d010      	beq.n	1224a <gsm_module_exit_sleep+0x3e>
	{
		port_pin_set_output_level(GSM_DTR_PIN, GSM_DTR_PIN_ACTIVE);
   12228:	2101      	movs	r1, #1
   1222a:	2014      	movs	r0, #20
   1222c:	4b0c      	ldr	r3, [pc, #48]	; (12260 <gsm_module_exit_sleep+0x54>)
   1222e:	4798      	blx	r3
		isGSMModuleAwake = true;
   12230:	4b0a      	ldr	r3, [pc, #40]	; (1225c <gsm_module_exit_sleep+0x50>)
   12232:	2201      	movs	r2, #1
   12234:	701a      	strb	r2, [r3, #0]
		if (!calledFromRead)
   12236:	1dfb      	adds	r3, r7, #7
   12238:	781b      	ldrb	r3, [r3, #0]
   1223a:	2201      	movs	r2, #1
   1223c:	4053      	eors	r3, r2
   1223e:	b2db      	uxtb	r3, r3
   12240:	2b00      	cmp	r3, #0
   12242:	d002      	beq.n	1224a <gsm_module_exit_sleep+0x3e>
		{
			vTaskDelay(100 / portTICK_PERIOD_MS);
   12244:	2064      	movs	r0, #100	; 0x64
   12246:	4b07      	ldr	r3, [pc, #28]	; (12264 <gsm_module_exit_sleep+0x58>)
   12248:	4798      	blx	r3
		}
	}
	
	lastGSMCommunicationTime=xTaskGetTickCount();
   1224a:	4b07      	ldr	r3, [pc, #28]	; (12268 <gsm_module_exit_sleep+0x5c>)
   1224c:	4798      	blx	r3
   1224e:	0002      	movs	r2, r0
   12250:	4b06      	ldr	r3, [pc, #24]	; (1226c <gsm_module_exit_sleep+0x60>)
   12252:	601a      	str	r2, [r3, #0]
}
   12254:	46c0      	nop			; (mov r8, r8)
   12256:	46bd      	mov	sp, r7
   12258:	b002      	add	sp, #8
   1225a:	bd80      	pop	{r7, pc}
   1225c:	2000068c 	.word	0x2000068c
   12260:	00011d3d 	.word	0x00011d3d
   12264:	0001fad9 	.word	0x0001fad9
   12268:	0001fe3d 	.word	0x0001fe3d
   1226c:	2000021c 	.word	0x2000021c

00012270 <gsm_module_enter_sleep>:

void gsm_module_enter_sleep(void)
{
   12270:	b580      	push	{r7, lr}
   12272:	af00      	add	r7, sp, #0
	port_pin_set_output_level(GSM_DTR_PIN, GSM_DTR_PIN_DEACTIVE);
   12274:	2100      	movs	r1, #0
   12276:	2014      	movs	r0, #20
   12278:	4b03      	ldr	r3, [pc, #12]	; (12288 <gsm_module_enter_sleep+0x18>)
   1227a:	4798      	blx	r3
	isGSMModuleAwake = false;
   1227c:	4b03      	ldr	r3, [pc, #12]	; (1228c <gsm_module_enter_sleep+0x1c>)
   1227e:	2200      	movs	r2, #0
   12280:	701a      	strb	r2, [r3, #0]
}
   12282:	46c0      	nop			; (mov r8, r8)
   12284:	46bd      	mov	sp, r7
   12286:	bd80      	pop	{r7, pc}
   12288:	00011d3d 	.word	0x00011d3d
   1228c:	2000068c 	.word	0x2000068c

00012290 <gsm_module_sleep_elligible>:

bool gsm_module_sleep_elligible(void)
{
   12290:	b580      	push	{r7, lr}
   12292:	b082      	sub	sp, #8
   12294:	af00      	add	r7, sp, #0
	if(isGSMModuleAwake)
   12296:	4b0e      	ldr	r3, [pc, #56]	; (122d0 <gsm_module_sleep_elligible+0x40>)
   12298:	781b      	ldrb	r3, [r3, #0]
   1229a:	b2db      	uxtb	r3, r3
   1229c:	2b00      	cmp	r3, #0
   1229e:	d011      	beq.n	122c4 <gsm_module_sleep_elligible+0x34>
	{
		bool ret=false;
   122a0:	1dfb      	adds	r3, r7, #7
   122a2:	2200      	movs	r2, #0
   122a4:	701a      	strb	r2, [r3, #0]
		ret= ((xTaskGetTickCount() - lastGSMCommunicationTime)>=20000L);
   122a6:	4b0b      	ldr	r3, [pc, #44]	; (122d4 <gsm_module_sleep_elligible+0x44>)
   122a8:	4798      	blx	r3
   122aa:	0002      	movs	r2, r0
   122ac:	4b0a      	ldr	r3, [pc, #40]	; (122d8 <gsm_module_sleep_elligible+0x48>)
   122ae:	681b      	ldr	r3, [r3, #0]
   122b0:	1ad2      	subs	r2, r2, r3
   122b2:	1dfb      	adds	r3, r7, #7
   122b4:	4909      	ldr	r1, [pc, #36]	; (122dc <gsm_module_sleep_elligible+0x4c>)
   122b6:	4291      	cmp	r1, r2
   122b8:	4192      	sbcs	r2, r2
   122ba:	4252      	negs	r2, r2
   122bc:	701a      	strb	r2, [r3, #0]
		return ret;
   122be:	1dfb      	adds	r3, r7, #7
   122c0:	781b      	ldrb	r3, [r3, #0]
   122c2:	e000      	b.n	122c6 <gsm_module_sleep_elligible+0x36>
	}
	return true;
   122c4:	2301      	movs	r3, #1
}
   122c6:	0018      	movs	r0, r3
   122c8:	46bd      	mov	sp, r7
   122ca:	b002      	add	sp, #8
   122cc:	bd80      	pop	{r7, pc}
   122ce:	46c0      	nop			; (mov r8, r8)
   122d0:	2000068c 	.word	0x2000068c
   122d4:	0001fe3d 	.word	0x0001fe3d
   122d8:	2000021c 	.word	0x2000021c
   122dc:	00004e1f 	.word	0x00004e1f

000122e0 <gsm_send_at_command>:

enum gsm_error gsm_send_at_command(const char *const atcommand,const char* aResponExit,const uint32_t aTimeoutMax,const uint8_t aLenOut, char *aResponOut)
{
   122e0:	b590      	push	{r4, r7, lr}
   122e2:	b08b      	sub	sp, #44	; 0x2c
   122e4:	af02      	add	r7, sp, #8
   122e6:	60f8      	str	r0, [r7, #12]
   122e8:	60b9      	str	r1, [r7, #8]
   122ea:	607a      	str	r2, [r7, #4]
   122ec:	001a      	movs	r2, r3
   122ee:	1cfb      	adds	r3, r7, #3
   122f0:	701a      	strb	r2, [r3, #0]
	
	/* Try to acquire the command lock; if already busy with a command, abort */
	if (xSemaphoreTake(gsm_busy_semaphore, 1) == pdFALSE)
   122f2:	4b66      	ldr	r3, [pc, #408]	; (1248c <gsm_send_at_command+0x1ac>)
   122f4:	681b      	ldr	r3, [r3, #0]
   122f6:	2101      	movs	r1, #1
   122f8:	0018      	movs	r0, r3
   122fa:	4b65      	ldr	r3, [pc, #404]	; (12490 <gsm_send_at_command+0x1b0>)
   122fc:	4798      	blx	r3
   122fe:	1e03      	subs	r3, r0, #0
   12300:	d101      	bne.n	12306 <gsm_send_at_command+0x26>
	{
		return GSM_ERROR_OPERATION_IN_PROGRESS;
   12302:	2302      	movs	r3, #2
   12304:	e0bd      	b.n	12482 <gsm_send_at_command+0x1a2>
	}
	
	
	/* Enable DTR and wait for the module to be ready to accept a command */
	gsm_module_exit_sleep(false);
   12306:	2000      	movs	r0, #0
   12308:	4b62      	ldr	r3, [pc, #392]	; (12494 <gsm_send_at_command+0x1b4>)
   1230a:	4798      	blx	r3
	/*                                                                      */
	
	//lastGSMCommandTime=xTaskGetTickCount();
	
	//////////////////////////////////////////////////////////////////////////
	Flush_RX_Buffer();
   1230c:	4b62      	ldr	r3, [pc, #392]	; (12498 <gsm_send_at_command+0x1b8>)
   1230e:	4798      	blx	r3
	//////////////////////////////////////////////////////////////////////////
	enum gsm_error err_no=GSM_ERROR_NONE;
   12310:	231f      	movs	r3, #31
   12312:	18fb      	adds	r3, r7, r3
   12314:	2200      	movs	r2, #0
   12316:	701a      	strb	r2, [r3, #0]
	
	uint8_t u8tRx_Index=0;
   12318:	231e      	movs	r3, #30
   1231a:	18fb      	adds	r3, r7, r3
   1231c:	2200      	movs	r2, #0
   1231e:	701a      	strb	r2, [r3, #0]
	char u8tTemp_Char=0;
   12320:	2313      	movs	r3, #19
   12322:	18fb      	adds	r3, r7, r3
   12324:	2200      	movs	r2, #0
   12326:	701a      	strb	r2, [r3, #0]
	portBASE_TYPE xStatus;

	char *aDataBuffer = (char*) calloc(MAX_BUFFER_TMP,sizeof(char));
   12328:	2101      	movs	r1, #1
   1232a:	20f0      	movs	r0, #240	; 0xf0
   1232c:	4b5b      	ldr	r3, [pc, #364]	; (1249c <gsm_send_at_command+0x1bc>)
   1232e:	4798      	blx	r3
   12330:	0003      	movs	r3, r0
   12332:	61bb      	str	r3, [r7, #24]
	
	//buffer created???
	if (aDataBuffer == NULL)
   12334:	69bb      	ldr	r3, [r7, #24]
   12336:	2b00      	cmp	r3, #0
   12338:	d101      	bne.n	1233e <gsm_send_at_command+0x5e>
	{
		//port_pin_set_output_level(GSM_DTR_PIN, !GSM_DTR_PIN_ACTIVE);
		return 0;
   1233a:	2300      	movs	r3, #0
   1233c:	e0a1      	b.n	12482 <gsm_send_at_command+0x1a2>
	}

	//reset to all 0
	memset(aDataBuffer, '\0', MAX_BUFFER_TMP);
   1233e:	69bb      	ldr	r3, [r7, #24]
   12340:	22f0      	movs	r2, #240	; 0xf0
   12342:	2100      	movs	r1, #0
   12344:	0018      	movs	r0, r3
   12346:	4b56      	ldr	r3, [pc, #344]	; (124a0 <gsm_send_at_command+0x1c0>)
   12348:	4798      	blx	r3
	
	/* Send the command to the GSM module when it is ready */
	usart_write_buffer_wait(&gsm_usart, (uint8_t *)atcommand, strlen(atcommand));
   1234a:	68fb      	ldr	r3, [r7, #12]
   1234c:	0018      	movs	r0, r3
   1234e:	4b55      	ldr	r3, [pc, #340]	; (124a4 <gsm_send_at_command+0x1c4>)
   12350:	4798      	blx	r3
   12352:	0003      	movs	r3, r0
   12354:	b29a      	uxth	r2, r3
   12356:	68f9      	ldr	r1, [r7, #12]
   12358:	4b53      	ldr	r3, [pc, #332]	; (124a8 <gsm_send_at_command+0x1c8>)
   1235a:	0018      	movs	r0, r3
   1235c:	4b53      	ldr	r3, [pc, #332]	; (124ac <gsm_send_at_command+0x1cc>)
   1235e:	4798      	blx	r3
	
	/* Start the timeout timer to ensure a timely response from the module */
	xTimerChangePeriod(gsm_cmd_timeout_timer,(aTimeoutMax / portTICK_PERIOD_MS),portMAX_DELAY);
   12360:	4b53      	ldr	r3, [pc, #332]	; (124b0 <gsm_send_at_command+0x1d0>)
   12362:	6818      	ldr	r0, [r3, #0]
   12364:	687a      	ldr	r2, [r7, #4]
   12366:	2301      	movs	r3, #1
   12368:	425b      	negs	r3, r3
   1236a:	9300      	str	r3, [sp, #0]
   1236c:	2300      	movs	r3, #0
   1236e:	2104      	movs	r1, #4
   12370:	4c50      	ldr	r4, [pc, #320]	; (124b4 <gsm_send_at_command+0x1d4>)
   12372:	47a0      	blx	r4
	
	while (true)
	{
		if(xTimerIsTimerActive(gsm_cmd_timeout_timer))
   12374:	4b4e      	ldr	r3, [pc, #312]	; (124b0 <gsm_send_at_command+0x1d0>)
   12376:	681b      	ldr	r3, [r3, #0]
   12378:	0018      	movs	r0, r3
   1237a:	4b4f      	ldr	r3, [pc, #316]	; (124b8 <gsm_send_at_command+0x1d8>)
   1237c:	4798      	blx	r3
   1237e:	1e03      	subs	r3, r0, #0
   12380:	d03e      	beq.n	12400 <gsm_send_at_command+0x120>
		{
			if (u8tRx_Index<240)
   12382:	231e      	movs	r3, #30
   12384:	18fb      	adds	r3, r7, r3
   12386:	781b      	ldrb	r3, [r3, #0]
   12388:	2bef      	cmp	r3, #239	; 0xef
   1238a:	d81c      	bhi.n	123c6 <gsm_send_at_command+0xe6>
			{
				xStatus=xQueueReceive(gsm_rx_queue,&u8tTemp_Char, 0);
   1238c:	4b4b      	ldr	r3, [pc, #300]	; (124bc <gsm_send_at_command+0x1dc>)
   1238e:	681b      	ldr	r3, [r3, #0]
   12390:	2213      	movs	r2, #19
   12392:	18b9      	adds	r1, r7, r2
   12394:	2200      	movs	r2, #0
   12396:	0018      	movs	r0, r3
   12398:	4b49      	ldr	r3, [pc, #292]	; (124c0 <gsm_send_at_command+0x1e0>)
   1239a:	4798      	blx	r3
   1239c:	0003      	movs	r3, r0
   1239e:	617b      	str	r3, [r7, #20]
				if(xStatus!=errQUEUE_EMPTY)
   123a0:	697b      	ldr	r3, [r7, #20]
   123a2:	2b00      	cmp	r3, #0
   123a4:	d00f      	beq.n	123c6 <gsm_send_at_command+0xe6>
				{
					aDataBuffer[u8tRx_Index] = u8tTemp_Char;
   123a6:	231e      	movs	r3, #30
   123a8:	18fb      	adds	r3, r7, r3
   123aa:	781b      	ldrb	r3, [r3, #0]
   123ac:	69ba      	ldr	r2, [r7, #24]
   123ae:	18d3      	adds	r3, r2, r3
   123b0:	2213      	movs	r2, #19
   123b2:	18ba      	adds	r2, r7, r2
   123b4:	7812      	ldrb	r2, [r2, #0]
   123b6:	701a      	strb	r2, [r3, #0]
					u8tRx_Index++;
   123b8:	231e      	movs	r3, #30
   123ba:	18fb      	adds	r3, r7, r3
   123bc:	781a      	ldrb	r2, [r3, #0]
   123be:	231e      	movs	r3, #30
   123c0:	18fb      	adds	r3, r7, r3
   123c2:	3201      	adds	r2, #1
   123c4:	701a      	strb	r2, [r3, #0]
				}
			}
			if (aResponExit != NULL)
   123c6:	68bb      	ldr	r3, [r7, #8]
   123c8:	2b00      	cmp	r3, #0
   123ca:	d00c      	beq.n	123e6 <gsm_send_at_command+0x106>
			{
				if (strstr((const char*)aDataBuffer, (const char*)aResponExit) != NULL)
   123cc:	68ba      	ldr	r2, [r7, #8]
   123ce:	69bb      	ldr	r3, [r7, #24]
   123d0:	0011      	movs	r1, r2
   123d2:	0018      	movs	r0, r3
   123d4:	4b3b      	ldr	r3, [pc, #236]	; (124c4 <gsm_send_at_command+0x1e4>)
   123d6:	4798      	blx	r3
   123d8:	1e03      	subs	r3, r0, #0
   123da:	d004      	beq.n	123e6 <gsm_send_at_command+0x106>
				{
					err_no = GSM_ERROR_NONE;
   123dc:	231f      	movs	r3, #31
   123de:	18fb      	adds	r3, r7, r3
   123e0:	2200      	movs	r2, #0
   123e2:	701a      	strb	r2, [r3, #0]
					break;
   123e4:	e024      	b.n	12430 <gsm_send_at_command+0x150>
				}
			}
			if (strstr((const char*)aDataBuffer, (const char*)RESPONS_ERROR) != NULL)
   123e6:	4a38      	ldr	r2, [pc, #224]	; (124c8 <gsm_send_at_command+0x1e8>)
   123e8:	69bb      	ldr	r3, [r7, #24]
   123ea:	0011      	movs	r1, r2
   123ec:	0018      	movs	r0, r3
   123ee:	4b35      	ldr	r3, [pc, #212]	; (124c4 <gsm_send_at_command+0x1e4>)
   123f0:	4798      	blx	r3
   123f2:	1e03      	subs	r3, r0, #0
   123f4:	d0be      	beq.n	12374 <gsm_send_at_command+0x94>
			{
				err_no = GSM_ERROR_COMMAND_ERROR;
   123f6:	231f      	movs	r3, #31
   123f8:	18fb      	adds	r3, r7, r3
   123fa:	220b      	movs	r2, #11
   123fc:	701a      	strb	r2, [r3, #0]
				break;
   123fe:	e017      	b.n	12430 <gsm_send_at_command+0x150>
			}
		}
		else
		{
			xTimerStop(gsm_cmd_timeout_timer, portMAX_DELAY);
   12400:	4b2b      	ldr	r3, [pc, #172]	; (124b0 <gsm_send_at_command+0x1d0>)
   12402:	6818      	ldr	r0, [r3, #0]
   12404:	2301      	movs	r3, #1
   12406:	425b      	negs	r3, r3
   12408:	9300      	str	r3, [sp, #0]
   1240a:	2300      	movs	r3, #0
   1240c:	2200      	movs	r2, #0
   1240e:	2103      	movs	r1, #3
   12410:	4c28      	ldr	r4, [pc, #160]	; (124b4 <gsm_send_at_command+0x1d4>)
   12412:	47a0      	blx	r4
			if (u8tRx_Index==0)
   12414:	231e      	movs	r3, #30
   12416:	18fb      	adds	r3, r7, r3
   12418:	781b      	ldrb	r3, [r3, #0]
   1241a:	2b00      	cmp	r3, #0
   1241c:	d104      	bne.n	12428 <gsm_send_at_command+0x148>
			{
				err_no = GSM_ERROR_TIMEOUT;
   1241e:	231f      	movs	r3, #31
   12420:	18fb      	adds	r3, r7, r3
   12422:	2207      	movs	r2, #7
   12424:	701a      	strb	r2, [r3, #0]
				break;
   12426:	e003      	b.n	12430 <gsm_send_at_command+0x150>
			}
			else
			{
				err_no = GSM_ERROR_UNKWON;
   12428:	231f      	movs	r3, #31
   1242a:	18fb      	adds	r3, r7, r3
   1242c:	2208      	movs	r2, #8
   1242e:	701a      	strb	r2, [r3, #0]
			}
		}
	}
	
	//copy it to the out
	if ((aLenOut != 0) && (aResponOut != NULL) && (aLenOut > u8tRx_Index) && (err_no==GSM_ERROR_NONE))
   12430:	1cfb      	adds	r3, r7, #3
   12432:	781b      	ldrb	r3, [r3, #0]
   12434:	2b00      	cmp	r3, #0
   12436:	d016      	beq.n	12466 <gsm_send_at_command+0x186>
   12438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1243a:	2b00      	cmp	r3, #0
   1243c:	d013      	beq.n	12466 <gsm_send_at_command+0x186>
   1243e:	1cfa      	adds	r2, r7, #3
   12440:	231e      	movs	r3, #30
   12442:	18fb      	adds	r3, r7, r3
   12444:	7812      	ldrb	r2, [r2, #0]
   12446:	781b      	ldrb	r3, [r3, #0]
   12448:	429a      	cmp	r2, r3
   1244a:	d90c      	bls.n	12466 <gsm_send_at_command+0x186>
   1244c:	231f      	movs	r3, #31
   1244e:	18fb      	adds	r3, r7, r3
   12450:	781b      	ldrb	r3, [r3, #0]
   12452:	2b00      	cmp	r3, #0
   12454:	d107      	bne.n	12466 <gsm_send_at_command+0x186>
	{
		memcpy(aResponOut, aDataBuffer, u8tRx_Index *sizeof(uint8_t));
   12456:	231e      	movs	r3, #30
   12458:	18fb      	adds	r3, r7, r3
   1245a:	781a      	ldrb	r2, [r3, #0]
   1245c:	69b9      	ldr	r1, [r7, #24]
   1245e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   12460:	0018      	movs	r0, r3
   12462:	4b1a      	ldr	r3, [pc, #104]	; (124cc <gsm_send_at_command+0x1ec>)
   12464:	4798      	blx	r3
	}
	
	//port_pin_set_output_level(GSM_DTR_PIN, !GSM_DTR_PIN_ACTIVE);
	
	xSemaphoreGive(gsm_busy_semaphore);
   12466:	4b09      	ldr	r3, [pc, #36]	; (1248c <gsm_send_at_command+0x1ac>)
   12468:	6818      	ldr	r0, [r3, #0]
   1246a:	2300      	movs	r3, #0
   1246c:	2200      	movs	r2, #0
   1246e:	2100      	movs	r1, #0
   12470:	4c17      	ldr	r4, [pc, #92]	; (124d0 <gsm_send_at_command+0x1f0>)
   12472:	47a0      	blx	r4
	free(aDataBuffer);
   12474:	69bb      	ldr	r3, [r7, #24]
   12476:	0018      	movs	r0, r3
   12478:	4b16      	ldr	r3, [pc, #88]	; (124d4 <gsm_send_at_command+0x1f4>)
   1247a:	4798      	blx	r3
	return err_no;
   1247c:	231f      	movs	r3, #31
   1247e:	18fb      	adds	r3, r7, r3
   12480:	781b      	ldrb	r3, [r3, #0]
}
   12482:	0018      	movs	r0, r3
   12484:	46bd      	mov	sp, r7
   12486:	b009      	add	sp, #36	; 0x24
   12488:	bd90      	pop	{r4, r7, pc}
   1248a:	46c0      	nop			; (mov r8, r8)
   1248c:	20000228 	.word	0x20000228
   12490:	0001f1d1 	.word	0x0001f1d1
   12494:	0001220d 	.word	0x0001220d
   12498:	00011f6d 	.word	0x00011f6d
   1249c:	000288ed 	.word	0x000288ed
   124a0:	000289fb 	.word	0x000289fb
   124a4:	00028c8b 	.word	0x00028c8b
   124a8:	20000698 	.word	0x20000698
   124ac:	0002191d 	.word	0x0002191d
   124b0:	20000224 	.word	0x20000224
   124b4:	00020a9d 	.word	0x00020a9d
   124b8:	00021019 	.word	0x00021019
   124bc:	20000220 	.word	0x20000220
   124c0:	0001f031 	.word	0x0001f031
   124c4:	00028cbb 	.word	0x00028cbb
   124c8:	000296a8 	.word	0x000296a8
   124cc:	000289c5 	.word	0x000289c5
   124d0:	0001ed31 	.word	0x0001ed31
   124d4:	0002898d 	.word	0x0002898d

000124d8 <gsm_check_module>:


enum gsm_error gsm_check_module(void)
{
   124d8:	b590      	push	{r4, r7, lr}
   124da:	b083      	sub	sp, #12
   124dc:	af02      	add	r7, sp, #8
	return gsm_send_at_command((const char*)("AT\r"),(const char*)RESPONS_OK,5000,0, NULL);
   124de:	4a06      	ldr	r2, [pc, #24]	; (124f8 <gsm_check_module+0x20>)
   124e0:	4906      	ldr	r1, [pc, #24]	; (124fc <gsm_check_module+0x24>)
   124e2:	4807      	ldr	r0, [pc, #28]	; (12500 <gsm_check_module+0x28>)
   124e4:	2300      	movs	r3, #0
   124e6:	9300      	str	r3, [sp, #0]
   124e8:	2300      	movs	r3, #0
   124ea:	4c06      	ldr	r4, [pc, #24]	; (12504 <gsm_check_module+0x2c>)
   124ec:	47a0      	blx	r4
   124ee:	0003      	movs	r3, r0
}
   124f0:	0018      	movs	r0, r3
   124f2:	46bd      	mov	sp, r7
   124f4:	b001      	add	sp, #4
   124f6:	bd90      	pop	{r4, r7, pc}
   124f8:	00001388 	.word	0x00001388
   124fc:	000296b0 	.word	0x000296b0
   12500:	000296b4 	.word	0x000296b4
   12504:	000122e1 	.word	0x000122e1

00012508 <gsm_is_network_registered>:
{
	return gsm_send_at_command((const char*)("AT+IFC=0,0\r"), (const char*)RESPONS_OK,5000,0, NULL);
}

enum gsm_error gsm_is_network_registered(void)
{
   12508:	b5b0      	push	{r4, r5, r7, lr}
   1250a:	b084      	sub	sp, #16
   1250c:	af02      	add	r7, sp, #8
	enum gsm_error errHomeNw;
	enum gsm_error errRomNw;
	errHomeNw = gsm_send_at_command((const char*)("AT+CREG?\r"), (const char*)"+CREG: 0,1",5000,0, NULL);
   1250e:	1dfc      	adds	r4, r7, #7
   12510:	4a12      	ldr	r2, [pc, #72]	; (1255c <gsm_is_network_registered+0x54>)
   12512:	4913      	ldr	r1, [pc, #76]	; (12560 <gsm_is_network_registered+0x58>)
   12514:	4813      	ldr	r0, [pc, #76]	; (12564 <gsm_is_network_registered+0x5c>)
   12516:	2300      	movs	r3, #0
   12518:	9300      	str	r3, [sp, #0]
   1251a:	2300      	movs	r3, #0
   1251c:	4d12      	ldr	r5, [pc, #72]	; (12568 <gsm_is_network_registered+0x60>)
   1251e:	47a8      	blx	r5
   12520:	0003      	movs	r3, r0
   12522:	7023      	strb	r3, [r4, #0]
	if (errHomeNw==GSM_ERROR_NONE)
   12524:	1dfb      	adds	r3, r7, #7
   12526:	781b      	ldrb	r3, [r3, #0]
   12528:	2b00      	cmp	r3, #0
   1252a:	d101      	bne.n	12530 <gsm_is_network_registered+0x28>
	{
		return GSM_NETWORK_REGISTERED;
   1252c:	2309      	movs	r3, #9
   1252e:	e011      	b.n	12554 <gsm_is_network_registered+0x4c>
	}
	else
	{
		errRomNw = gsm_send_at_command((const char*)("AT+CREG?\r"), (const char*)"+CREG: 0,5",5000,0, NULL);
   12530:	1dbc      	adds	r4, r7, #6
   12532:	4a0a      	ldr	r2, [pc, #40]	; (1255c <gsm_is_network_registered+0x54>)
   12534:	490d      	ldr	r1, [pc, #52]	; (1256c <gsm_is_network_registered+0x64>)
   12536:	480b      	ldr	r0, [pc, #44]	; (12564 <gsm_is_network_registered+0x5c>)
   12538:	2300      	movs	r3, #0
   1253a:	9300      	str	r3, [sp, #0]
   1253c:	2300      	movs	r3, #0
   1253e:	4d0a      	ldr	r5, [pc, #40]	; (12568 <gsm_is_network_registered+0x60>)
   12540:	47a8      	blx	r5
   12542:	0003      	movs	r3, r0
   12544:	7023      	strb	r3, [r4, #0]
		{
			if (errRomNw==GSM_ERROR_NONE)
   12546:	1dbb      	adds	r3, r7, #6
   12548:	781b      	ldrb	r3, [r3, #0]
   1254a:	2b00      	cmp	r3, #0
   1254c:	d101      	bne.n	12552 <gsm_is_network_registered+0x4a>
			{
				return GSM_NETWORK_REGISTERED;
   1254e:	2309      	movs	r3, #9
   12550:	e000      	b.n	12554 <gsm_is_network_registered+0x4c>
			}
			else
			{
				return GSM_NETWORK_NOT_REGISTERED;
   12552:	230a      	movs	r3, #10
			}
		}
	}
}
   12554:	0018      	movs	r0, r3
   12556:	46bd      	mov	sp, r7
   12558:	b002      	add	sp, #8
   1255a:	bdb0      	pop	{r4, r5, r7, pc}
   1255c:	00001388 	.word	0x00001388
   12560:	000296c4 	.word	0x000296c4
   12564:	000296d0 	.word	0x000296d0
   12568:	000122e1 	.word	0x000122e1
   1256c:	000296dc 	.word	0x000296dc

00012570 <gsm_set_baudrate>:

enum gsm_error gsm_set_baudrate(void)
{
   12570:	b590      	push	{r4, r7, lr}
   12572:	b089      	sub	sp, #36	; 0x24
   12574:	af02      	add	r7, sp, #8
	char baurate_at_command[20]={0};
   12576:	1d3b      	adds	r3, r7, #4
   12578:	0018      	movs	r0, r3
   1257a:	2314      	movs	r3, #20
   1257c:	001a      	movs	r2, r3
   1257e:	2100      	movs	r1, #0
   12580:	4b0a      	ldr	r3, [pc, #40]	; (125ac <gsm_set_baudrate+0x3c>)
   12582:	4798      	blx	r3
	
	sprintf(baurate_at_command, "AT+IPR=%d\r",GSM_BAUDRATE);
   12584:	23e1      	movs	r3, #225	; 0xe1
   12586:	025a      	lsls	r2, r3, #9
   12588:	4909      	ldr	r1, [pc, #36]	; (125b0 <gsm_set_baudrate+0x40>)
   1258a:	1d3b      	adds	r3, r7, #4
   1258c:	0018      	movs	r0, r3
   1258e:	4b09      	ldr	r3, [pc, #36]	; (125b4 <gsm_set_baudrate+0x44>)
   12590:	4798      	blx	r3
	
	return gsm_send_at_command((const char*)(baurate_at_command), (const char*)RESPONS_OK,5000,0, NULL);
   12592:	4a09      	ldr	r2, [pc, #36]	; (125b8 <gsm_set_baudrate+0x48>)
   12594:	4909      	ldr	r1, [pc, #36]	; (125bc <gsm_set_baudrate+0x4c>)
   12596:	1d38      	adds	r0, r7, #4
   12598:	2300      	movs	r3, #0
   1259a:	9300      	str	r3, [sp, #0]
   1259c:	2300      	movs	r3, #0
   1259e:	4c08      	ldr	r4, [pc, #32]	; (125c0 <gsm_set_baudrate+0x50>)
   125a0:	47a0      	blx	r4
   125a2:	0003      	movs	r3, r0
}
   125a4:	0018      	movs	r0, r3
   125a6:	46bd      	mov	sp, r7
   125a8:	b007      	add	sp, #28
   125aa:	bd90      	pop	{r4, r7, pc}
   125ac:	000289fb 	.word	0x000289fb
   125b0:	000296e8 	.word	0x000296e8
   125b4:	00028c01 	.word	0x00028c01
   125b8:	00001388 	.word	0x00001388
   125bc:	000296b0 	.word	0x000296b0
   125c0:	000122e1 	.word	0x000122e1

000125c4 <gsm_detect_simcard>:
{
	return gsm_send_at_command((const char*)("AT+CFUN=1,1\r"), (const char*)RESPONS_OK,10000,0, NULL);
}

enum gsm_error gsm_detect_simcard(void)
{
   125c4:	b590      	push	{r4, r7, lr}
   125c6:	b083      	sub	sp, #12
   125c8:	af02      	add	r7, sp, #8
	return gsm_send_at_command((const char*)("AT+CPIN?\r"), (const char*)"+CPIN: READY",5000,0, NULL);
   125ca:	4a06      	ldr	r2, [pc, #24]	; (125e4 <gsm_detect_simcard+0x20>)
   125cc:	4906      	ldr	r1, [pc, #24]	; (125e8 <gsm_detect_simcard+0x24>)
   125ce:	4807      	ldr	r0, [pc, #28]	; (125ec <gsm_detect_simcard+0x28>)
   125d0:	2300      	movs	r3, #0
   125d2:	9300      	str	r3, [sp, #0]
   125d4:	2300      	movs	r3, #0
   125d6:	4c06      	ldr	r4, [pc, #24]	; (125f0 <gsm_detect_simcard+0x2c>)
   125d8:	47a0      	blx	r4
   125da:	0003      	movs	r3, r0
}
   125dc:	0018      	movs	r0, r3
   125de:	46bd      	mov	sp, r7
   125e0:	b001      	add	sp, #4
   125e2:	bd90      	pop	{r4, r7, pc}
   125e4:	00001388 	.word	0x00001388
   125e8:	00029758 	.word	0x00029758
   125ec:	00029768 	.word	0x00029768
   125f0:	000122e1 	.word	0x000122e1

000125f4 <gsm_delete_all_sms>:

enum gsm_error gsm_delete_all_sms(void)
{
   125f4:	b590      	push	{r4, r7, lr}
   125f6:	b083      	sub	sp, #12
   125f8:	af02      	add	r7, sp, #8
	return gsm_send_at_command((const char*)("AT+CMGDA=\"DEL ALL\"\r"), (const char*)RESPONS_OK,25000,0, NULL);
   125fa:	4a06      	ldr	r2, [pc, #24]	; (12614 <gsm_delete_all_sms+0x20>)
   125fc:	4906      	ldr	r1, [pc, #24]	; (12618 <gsm_delete_all_sms+0x24>)
   125fe:	4807      	ldr	r0, [pc, #28]	; (1261c <gsm_delete_all_sms+0x28>)
   12600:	2300      	movs	r3, #0
   12602:	9300      	str	r3, [sp, #0]
   12604:	2300      	movs	r3, #0
   12606:	4c06      	ldr	r4, [pc, #24]	; (12620 <gsm_delete_all_sms+0x2c>)
   12608:	47a0      	blx	r4
   1260a:	0003      	movs	r3, r0
}
   1260c:	0018      	movs	r0, r3
   1260e:	46bd      	mov	sp, r7
   12610:	b001      	add	sp, #4
   12612:	bd90      	pop	{r4, r7, pc}
   12614:	000061a8 	.word	0x000061a8
   12618:	000296b0 	.word	0x000296b0
   1261c:	00029774 	.word	0x00029774
   12620:	000122e1 	.word	0x000122e1

00012624 <gsm_store_active_profile>:

enum gsm_error gsm_store_active_profile(void)
{
   12624:	b590      	push	{r4, r7, lr}
   12626:	b083      	sub	sp, #12
   12628:	af02      	add	r7, sp, #8
	return gsm_send_at_command((const char*)("AT&W\r"), (const char*)RESPONS_OK,5000,0, NULL);
   1262a:	4a06      	ldr	r2, [pc, #24]	; (12644 <gsm_store_active_profile+0x20>)
   1262c:	4906      	ldr	r1, [pc, #24]	; (12648 <gsm_store_active_profile+0x24>)
   1262e:	4807      	ldr	r0, [pc, #28]	; (1264c <gsm_store_active_profile+0x28>)
   12630:	2300      	movs	r3, #0
   12632:	9300      	str	r3, [sp, #0]
   12634:	2300      	movs	r3, #0
   12636:	4c06      	ldr	r4, [pc, #24]	; (12650 <gsm_store_active_profile+0x2c>)
   12638:	47a0      	blx	r4
   1263a:	0003      	movs	r3, r0
}
   1263c:	0018      	movs	r0, r3
   1263e:	46bd      	mov	sp, r7
   12640:	b001      	add	sp, #4
   12642:	bd90      	pop	{r4, r7, pc}
   12644:	00001388 	.word	0x00001388
   12648:	000296b0 	.word	0x000296b0
   1264c:	00029788 	.word	0x00029788
   12650:	000122e1 	.word	0x000122e1

00012654 <gsm_enable_calling_line_identification>:


enum gsm_error gsm_enable_calling_line_identification(void)
{
   12654:	b590      	push	{r4, r7, lr}
   12656:	b083      	sub	sp, #12
   12658:	af02      	add	r7, sp, #8
	return gsm_send_at_command((const char*)("AT+CLIP=1\r"), (const char*)RESPONS_OK,15000,0, NULL);
   1265a:	4a06      	ldr	r2, [pc, #24]	; (12674 <gsm_enable_calling_line_identification+0x20>)
   1265c:	4906      	ldr	r1, [pc, #24]	; (12678 <gsm_enable_calling_line_identification+0x24>)
   1265e:	4807      	ldr	r0, [pc, #28]	; (1267c <gsm_enable_calling_line_identification+0x28>)
   12660:	2300      	movs	r3, #0
   12662:	9300      	str	r3, [sp, #0]
   12664:	2300      	movs	r3, #0
   12666:	4c06      	ldr	r4, [pc, #24]	; (12680 <gsm_enable_calling_line_identification+0x2c>)
   12668:	47a0      	blx	r4
   1266a:	0003      	movs	r3, r0
}
   1266c:	0018      	movs	r0, r3
   1266e:	46bd      	mov	sp, r7
   12670:	b001      	add	sp, #4
   12672:	bd90      	pop	{r4, r7, pc}
   12674:	00003a98 	.word	0x00003a98
   12678:	000296b0 	.word	0x000296b0
   1267c:	00029790 	.word	0x00029790
   12680:	000122e1 	.word	0x000122e1

00012684 <gsm_enable_connected_line_identification_presentation>:

enum gsm_error gsm_enable_connected_line_identification_presentation(void)
{
   12684:	b590      	push	{r4, r7, lr}
   12686:	b083      	sub	sp, #12
   12688:	af02      	add	r7, sp, #8
	return gsm_send_at_command((const char*)("AT+COLP=1\r"), (const char*)RESPONS_OK,5000,0, NULL);
   1268a:	4a06      	ldr	r2, [pc, #24]	; (126a4 <gsm_enable_connected_line_identification_presentation+0x20>)
   1268c:	4906      	ldr	r1, [pc, #24]	; (126a8 <gsm_enable_connected_line_identification_presentation+0x24>)
   1268e:	4807      	ldr	r0, [pc, #28]	; (126ac <gsm_enable_connected_line_identification_presentation+0x28>)
   12690:	2300      	movs	r3, #0
   12692:	9300      	str	r3, [sp, #0]
   12694:	2300      	movs	r3, #0
   12696:	4c06      	ldr	r4, [pc, #24]	; (126b0 <gsm_enable_connected_line_identification_presentation+0x2c>)
   12698:	47a0      	blx	r4
   1269a:	0003      	movs	r3, r0
}
   1269c:	0018      	movs	r0, r3
   1269e:	46bd      	mov	sp, r7
   126a0:	b001      	add	sp, #4
   126a2:	bd90      	pop	{r4, r7, pc}
   126a4:	00001388 	.word	0x00001388
   126a8:	000296b0 	.word	0x000296b0
   126ac:	0002979c 	.word	0x0002979c
   126b0:	000122e1 	.word	0x000122e1

000126b4 <gsm_enable_list_current_calls_of_ME>:
	}
}


enum gsm_error gsm_enable_list_current_calls_of_ME(void)
{
   126b4:	b590      	push	{r4, r7, lr}
   126b6:	b083      	sub	sp, #12
   126b8:	af02      	add	r7, sp, #8
	return gsm_send_at_command((const char*)("AT+CLCC=1\r"), (const char*)RESPONS_OK,5000,0, NULL);
   126ba:	4a06      	ldr	r2, [pc, #24]	; (126d4 <gsm_enable_list_current_calls_of_ME+0x20>)
   126bc:	4906      	ldr	r1, [pc, #24]	; (126d8 <gsm_enable_list_current_calls_of_ME+0x24>)
   126be:	4807      	ldr	r0, [pc, #28]	; (126dc <gsm_enable_list_current_calls_of_ME+0x28>)
   126c0:	2300      	movs	r3, #0
   126c2:	9300      	str	r3, [sp, #0]
   126c4:	2300      	movs	r3, #0
   126c6:	4c06      	ldr	r4, [pc, #24]	; (126e0 <gsm_enable_list_current_calls_of_ME+0x2c>)
   126c8:	47a0      	blx	r4
   126ca:	0003      	movs	r3, r0
}
   126cc:	0018      	movs	r0, r3
   126ce:	46bd      	mov	sp, r7
   126d0:	b001      	add	sp, #4
   126d2:	bd90      	pop	{r4, r7, pc}
   126d4:	00001388 	.word	0x00001388
   126d8:	000296b0 	.word	0x000296b0
   126dc:	000297d0 	.word	0x000297d0
   126e0:	000122e1 	.word	0x000122e1

000126e4 <gsm_factory_reset>:

enum gsm_error gsm_factory_reset(void)
{
   126e4:	b590      	push	{r4, r7, lr}
   126e6:	b083      	sub	sp, #12
   126e8:	af02      	add	r7, sp, #8
	return gsm_send_at_command((const char*)("AT&F\r"), (const char*)RESPONS_OK,15000,0, NULL);
   126ea:	4a06      	ldr	r2, [pc, #24]	; (12704 <gsm_factory_reset+0x20>)
   126ec:	4906      	ldr	r1, [pc, #24]	; (12708 <gsm_factory_reset+0x24>)
   126ee:	4807      	ldr	r0, [pc, #28]	; (1270c <gsm_factory_reset+0x28>)
   126f0:	2300      	movs	r3, #0
   126f2:	9300      	str	r3, [sp, #0]
   126f4:	2300      	movs	r3, #0
   126f6:	4c06      	ldr	r4, [pc, #24]	; (12710 <gsm_factory_reset+0x2c>)
   126f8:	47a0      	blx	r4
   126fa:	0003      	movs	r3, r0
}
   126fc:	0018      	movs	r0, r3
   126fe:	46bd      	mov	sp, r7
   12700:	b001      	add	sp, #4
   12702:	bd90      	pop	{r4, r7, pc}
   12704:	00003a98 	.word	0x00003a98
   12708:	000296b0 	.word	0x000296b0
   1270c:	000297dc 	.word	0x000297dc
   12710:	000122e1 	.word	0x000122e1

00012714 <gsm_echo_off>:

enum gsm_error gsm_echo_off(void)
{
   12714:	b590      	push	{r4, r7, lr}
   12716:	b083      	sub	sp, #12
   12718:	af02      	add	r7, sp, #8
	return gsm_send_at_command((const char*)("ATE0\r"), (const char*)RESPONS_OK,5000,0, NULL);
   1271a:	4a06      	ldr	r2, [pc, #24]	; (12734 <gsm_echo_off+0x20>)
   1271c:	4906      	ldr	r1, [pc, #24]	; (12738 <gsm_echo_off+0x24>)
   1271e:	4807      	ldr	r0, [pc, #28]	; (1273c <gsm_echo_off+0x28>)
   12720:	2300      	movs	r3, #0
   12722:	9300      	str	r3, [sp, #0]
   12724:	2300      	movs	r3, #0
   12726:	4c06      	ldr	r4, [pc, #24]	; (12740 <gsm_echo_off+0x2c>)
   12728:	47a0      	blx	r4
   1272a:	0003      	movs	r3, r0
}
   1272c:	0018      	movs	r0, r3
   1272e:	46bd      	mov	sp, r7
   12730:	b001      	add	sp, #4
   12732:	bd90      	pop	{r4, r7, pc}
   12734:	00001388 	.word	0x00001388
   12738:	000296b0 	.word	0x000296b0
   1273c:	000297e4 	.word	0x000297e4
   12740:	000122e1 	.word	0x000122e1

00012744 <gsm_select_sms_message_formate_text_mode>:

enum gsm_error gsm_select_sms_message_formate_text_mode(void) //PDU:0,TEXT:1
{
   12744:	b590      	push	{r4, r7, lr}
   12746:	b083      	sub	sp, #12
   12748:	af02      	add	r7, sp, #8
	return gsm_send_at_command((const char*)("AT+CMGF=1\r"), (const char*)RESPONS_OK,5000,0, NULL);
   1274a:	4a06      	ldr	r2, [pc, #24]	; (12764 <gsm_select_sms_message_formate_text_mode+0x20>)
   1274c:	4906      	ldr	r1, [pc, #24]	; (12768 <gsm_select_sms_message_formate_text_mode+0x24>)
   1274e:	4807      	ldr	r0, [pc, #28]	; (1276c <gsm_select_sms_message_formate_text_mode+0x28>)
   12750:	2300      	movs	r3, #0
   12752:	9300      	str	r3, [sp, #0]
   12754:	2300      	movs	r3, #0
   12756:	4c06      	ldr	r4, [pc, #24]	; (12770 <gsm_select_sms_message_formate_text_mode+0x2c>)
   12758:	47a0      	blx	r4
   1275a:	0003      	movs	r3, r0
}
   1275c:	0018      	movs	r0, r3
   1275e:	46bd      	mov	sp, r7
   12760:	b001      	add	sp, #4
   12762:	bd90      	pop	{r4, r7, pc}
   12764:	00001388 	.word	0x00001388
   12768:	000296b0 	.word	0x000296b0
   1276c:	000297ec 	.word	0x000297ec
   12770:	000122e1 	.word	0x000122e1

00012774 <gsm_set_sms_text_mode_parameter>:

enum gsm_error gsm_set_sms_text_mode_parameter(void)
{
   12774:	b590      	push	{r4, r7, lr}
   12776:	b083      	sub	sp, #12
   12778:	af02      	add	r7, sp, #8
	return gsm_send_at_command((const char*)("AT+CSMP=17,167,0,0\r"), (const char*)RESPONS_OK,7000,0, NULL);
   1277a:	4a06      	ldr	r2, [pc, #24]	; (12794 <gsm_set_sms_text_mode_parameter+0x20>)
   1277c:	4906      	ldr	r1, [pc, #24]	; (12798 <gsm_set_sms_text_mode_parameter+0x24>)
   1277e:	4807      	ldr	r0, [pc, #28]	; (1279c <gsm_set_sms_text_mode_parameter+0x28>)
   12780:	2300      	movs	r3, #0
   12782:	9300      	str	r3, [sp, #0]
   12784:	2300      	movs	r3, #0
   12786:	4c06      	ldr	r4, [pc, #24]	; (127a0 <gsm_set_sms_text_mode_parameter+0x2c>)
   12788:	47a0      	blx	r4
   1278a:	0003      	movs	r3, r0
}
   1278c:	0018      	movs	r0, r3
   1278e:	46bd      	mov	sp, r7
   12790:	b001      	add	sp, #4
   12792:	bd90      	pop	{r4, r7, pc}
   12794:	00001b58 	.word	0x00001b58
   12798:	000296b0 	.word	0x000296b0
   1279c:	000297f8 	.word	0x000297f8
   127a0:	000122e1 	.word	0x000122e1

000127a4 <gsm_getsignalstrength>:
20--25   4
26--31   5

*/
uint8_t gsm_getsignalstrength(void)
{
   127a4:	b5b0      	push	{r4, r5, r7, lr}
   127a6:	b088      	sub	sp, #32
   127a8:	af02      	add	r7, sp, #8
	
	uint8_t sig_strength;
	
	const uint8_t MAX_BUFFER = 100;
   127aa:	2316      	movs	r3, #22
   127ac:	18fb      	adds	r3, r7, r3
   127ae:	2264      	movs	r2, #100	; 0x64
   127b0:	701a      	strb	r2, [r3, #0]
	char *cmdx = (char*) calloc(MAX_BUFFER,sizeof(char));
   127b2:	2316      	movs	r3, #22
   127b4:	18fb      	adds	r3, r7, r3
   127b6:	781b      	ldrb	r3, [r3, #0]
   127b8:	2101      	movs	r1, #1
   127ba:	0018      	movs	r0, r3
   127bc:	4b60      	ldr	r3, [pc, #384]	; (12940 <gsm_getsignalstrength+0x19c>)
   127be:	4798      	blx	r3
   127c0:	0003      	movs	r3, r0
   127c2:	613b      	str	r3, [r7, #16]
	if (cmdx == NULL)
   127c4:	693b      	ldr	r3, [r7, #16]
   127c6:	2b00      	cmp	r3, #0
   127c8:	d105      	bne.n	127d6 <gsm_getsignalstrength+0x32>
	{
		free(cmdx);
   127ca:	693b      	ldr	r3, [r7, #16]
   127cc:	0018      	movs	r0, r3
   127ce:	4b5d      	ldr	r3, [pc, #372]	; (12944 <gsm_getsignalstrength+0x1a0>)
   127d0:	4798      	blx	r3
		return 0;
   127d2:	2300      	movs	r3, #0
   127d4:	e0af      	b.n	12936 <gsm_getsignalstrength+0x192>
	}
	memset(cmdx, '\0', MAX_BUFFER);
   127d6:	2316      	movs	r3, #22
   127d8:	18fb      	adds	r3, r7, r3
   127da:	781a      	ldrb	r2, [r3, #0]
   127dc:	693b      	ldr	r3, [r7, #16]
   127de:	2100      	movs	r1, #0
   127e0:	0018      	movs	r0, r3
   127e2:	4b59      	ldr	r3, [pc, #356]	; (12948 <gsm_getsignalstrength+0x1a4>)
   127e4:	4798      	blx	r3
	enum gsm_error gsm_err =  gsm_send_at_command((const char*)("AT+CSQ\r"), (const char*)RESPONS_OK,5000,MAX_BUFFER,cmdx);
   127e6:	230f      	movs	r3, #15
   127e8:	18fc      	adds	r4, r7, r3
   127ea:	2316      	movs	r3, #22
   127ec:	18fb      	adds	r3, r7, r3
   127ee:	781a      	ldrb	r2, [r3, #0]
   127f0:	4d56      	ldr	r5, [pc, #344]	; (1294c <gsm_getsignalstrength+0x1a8>)
   127f2:	4957      	ldr	r1, [pc, #348]	; (12950 <gsm_getsignalstrength+0x1ac>)
   127f4:	4857      	ldr	r0, [pc, #348]	; (12954 <gsm_getsignalstrength+0x1b0>)
   127f6:	693b      	ldr	r3, [r7, #16]
   127f8:	9300      	str	r3, [sp, #0]
   127fa:	0013      	movs	r3, r2
   127fc:	002a      	movs	r2, r5
   127fe:	4d56      	ldr	r5, [pc, #344]	; (12958 <gsm_getsignalstrength+0x1b4>)
   12800:	47a8      	blx	r5
   12802:	0003      	movs	r3, r0
   12804:	7023      	strb	r3, [r4, #0]
	
	if(gsm_err == GSM_ERROR_NONE)
   12806:	230f      	movs	r3, #15
   12808:	18fb      	adds	r3, r7, r3
   1280a:	781b      	ldrb	r3, [r3, #0]
   1280c:	2b00      	cmp	r3, #0
   1280e:	d000      	beq.n	12812 <gsm_getsignalstrength+0x6e>
   12810:	e086      	b.n	12920 <gsm_getsignalstrength+0x17c>
	{
		if (strstr(cmdx,"99")==NULL)
   12812:	4a52      	ldr	r2, [pc, #328]	; (1295c <gsm_getsignalstrength+0x1b8>)
   12814:	693b      	ldr	r3, [r7, #16]
   12816:	0011      	movs	r1, r2
   12818:	0018      	movs	r0, r3
   1281a:	4b51      	ldr	r3, [pc, #324]	; (12960 <gsm_getsignalstrength+0x1bc>)
   1281c:	4798      	blx	r3
   1281e:	1e03      	subs	r3, r0, #0
   12820:	d000      	beq.n	12824 <gsm_getsignalstrength+0x80>
   12822:	e078      	b.n	12916 <gsm_getsignalstrength+0x172>
		{
			char *ptr_tocken;
			ptr_tocken = strtok(cmdx,":");
   12824:	4a4f      	ldr	r2, [pc, #316]	; (12964 <gsm_getsignalstrength+0x1c0>)
   12826:	693b      	ldr	r3, [r7, #16]
   12828:	0011      	movs	r1, r2
   1282a:	0018      	movs	r0, r3
   1282c:	4b4e      	ldr	r3, [pc, #312]	; (12968 <gsm_getsignalstrength+0x1c4>)
   1282e:	4798      	blx	r3
   12830:	0003      	movs	r3, r0
   12832:	60bb      	str	r3, [r7, #8]
			ptr_tocken = strtok(NULL,":");
   12834:	4b4b      	ldr	r3, [pc, #300]	; (12964 <gsm_getsignalstrength+0x1c0>)
   12836:	0019      	movs	r1, r3
   12838:	2000      	movs	r0, #0
   1283a:	4b4b      	ldr	r3, [pc, #300]	; (12968 <gsm_getsignalstrength+0x1c4>)
   1283c:	4798      	blx	r3
   1283e:	0003      	movs	r3, r0
   12840:	60bb      	str	r3, [r7, #8]
			ptr_tocken = strtok(ptr_tocken,",");
   12842:	4a4a      	ldr	r2, [pc, #296]	; (1296c <gsm_getsignalstrength+0x1c8>)
   12844:	68bb      	ldr	r3, [r7, #8]
   12846:	0011      	movs	r1, r2
   12848:	0018      	movs	r0, r3
   1284a:	4b47      	ldr	r3, [pc, #284]	; (12968 <gsm_getsignalstrength+0x1c4>)
   1284c:	4798      	blx	r3
   1284e:	0003      	movs	r3, r0
   12850:	60bb      	str	r3, [r7, #8]
			RemoveSpaces(ptr_tocken);
   12852:	68bb      	ldr	r3, [r7, #8]
   12854:	0018      	movs	r0, r3
   12856:	4b46      	ldr	r3, [pc, #280]	; (12970 <gsm_getsignalstrength+0x1cc>)
   12858:	4798      	blx	r3
			uint8_t nw = atoi(ptr_tocken);
   1285a:	68bb      	ldr	r3, [r7, #8]
   1285c:	0018      	movs	r0, r3
   1285e:	4b45      	ldr	r3, [pc, #276]	; (12974 <gsm_getsignalstrength+0x1d0>)
   12860:	4798      	blx	r3
   12862:	0002      	movs	r2, r0
   12864:	1dfb      	adds	r3, r7, #7
   12866:	701a      	strb	r2, [r3, #0]
			if (nw==0 || nw==1 || nw== 99)
   12868:	1dfb      	adds	r3, r7, #7
   1286a:	781b      	ldrb	r3, [r3, #0]
   1286c:	2b00      	cmp	r3, #0
   1286e:	d007      	beq.n	12880 <gsm_getsignalstrength+0xdc>
   12870:	1dfb      	adds	r3, r7, #7
   12872:	781b      	ldrb	r3, [r3, #0]
   12874:	2b01      	cmp	r3, #1
   12876:	d003      	beq.n	12880 <gsm_getsignalstrength+0xdc>
   12878:	1dfb      	adds	r3, r7, #7
   1287a:	781b      	ldrb	r3, [r3, #0]
   1287c:	2b63      	cmp	r3, #99	; 0x63
   1287e:	d104      	bne.n	1288a <gsm_getsignalstrength+0xe6>
			{
				sig_strength = 0;
   12880:	2317      	movs	r3, #23
   12882:	18fb      	adds	r3, r7, r3
   12884:	2200      	movs	r2, #0
   12886:	701a      	strb	r2, [r3, #0]
   12888:	e04e      	b.n	12928 <gsm_getsignalstrength+0x184>
			}
			else
			{
				if (nw>=2 && nw<=7)
   1288a:	1dfb      	adds	r3, r7, #7
   1288c:	781b      	ldrb	r3, [r3, #0]
   1288e:	2b01      	cmp	r3, #1
   12890:	d908      	bls.n	128a4 <gsm_getsignalstrength+0x100>
   12892:	1dfb      	adds	r3, r7, #7
   12894:	781b      	ldrb	r3, [r3, #0]
   12896:	2b07      	cmp	r3, #7
   12898:	d804      	bhi.n	128a4 <gsm_getsignalstrength+0x100>
				{
					sig_strength = 1;
   1289a:	2317      	movs	r3, #23
   1289c:	18fb      	adds	r3, r7, r3
   1289e:	2201      	movs	r2, #1
   128a0:	701a      	strb	r2, [r3, #0]
   128a2:	e041      	b.n	12928 <gsm_getsignalstrength+0x184>
				}
				else if (nw>=8 && nw<=13)
   128a4:	1dfb      	adds	r3, r7, #7
   128a6:	781b      	ldrb	r3, [r3, #0]
   128a8:	2b07      	cmp	r3, #7
   128aa:	d908      	bls.n	128be <gsm_getsignalstrength+0x11a>
   128ac:	1dfb      	adds	r3, r7, #7
   128ae:	781b      	ldrb	r3, [r3, #0]
   128b0:	2b0d      	cmp	r3, #13
   128b2:	d804      	bhi.n	128be <gsm_getsignalstrength+0x11a>
				{
					sig_strength = 2;
   128b4:	2317      	movs	r3, #23
   128b6:	18fb      	adds	r3, r7, r3
   128b8:	2202      	movs	r2, #2
   128ba:	701a      	strb	r2, [r3, #0]
   128bc:	e034      	b.n	12928 <gsm_getsignalstrength+0x184>
				}
				else if (nw>=14 && nw<=19)
   128be:	1dfb      	adds	r3, r7, #7
   128c0:	781b      	ldrb	r3, [r3, #0]
   128c2:	2b0d      	cmp	r3, #13
   128c4:	d908      	bls.n	128d8 <gsm_getsignalstrength+0x134>
   128c6:	1dfb      	adds	r3, r7, #7
   128c8:	781b      	ldrb	r3, [r3, #0]
   128ca:	2b13      	cmp	r3, #19
   128cc:	d804      	bhi.n	128d8 <gsm_getsignalstrength+0x134>
				{
					sig_strength = 3;
   128ce:	2317      	movs	r3, #23
   128d0:	18fb      	adds	r3, r7, r3
   128d2:	2203      	movs	r2, #3
   128d4:	701a      	strb	r2, [r3, #0]
   128d6:	e027      	b.n	12928 <gsm_getsignalstrength+0x184>
				}
				else if (nw>=20 && nw<=25)
   128d8:	1dfb      	adds	r3, r7, #7
   128da:	781b      	ldrb	r3, [r3, #0]
   128dc:	2b13      	cmp	r3, #19
   128de:	d908      	bls.n	128f2 <gsm_getsignalstrength+0x14e>
   128e0:	1dfb      	adds	r3, r7, #7
   128e2:	781b      	ldrb	r3, [r3, #0]
   128e4:	2b19      	cmp	r3, #25
   128e6:	d804      	bhi.n	128f2 <gsm_getsignalstrength+0x14e>
				{
					sig_strength = 4;
   128e8:	2317      	movs	r3, #23
   128ea:	18fb      	adds	r3, r7, r3
   128ec:	2204      	movs	r2, #4
   128ee:	701a      	strb	r2, [r3, #0]
   128f0:	e01a      	b.n	12928 <gsm_getsignalstrength+0x184>
				}
				else if (nw>=26 && nw<=31)
   128f2:	1dfb      	adds	r3, r7, #7
   128f4:	781b      	ldrb	r3, [r3, #0]
   128f6:	2b19      	cmp	r3, #25
   128f8:	d908      	bls.n	1290c <gsm_getsignalstrength+0x168>
   128fa:	1dfb      	adds	r3, r7, #7
   128fc:	781b      	ldrb	r3, [r3, #0]
   128fe:	2b1f      	cmp	r3, #31
   12900:	d804      	bhi.n	1290c <gsm_getsignalstrength+0x168>
				{
					sig_strength = 5;
   12902:	2317      	movs	r3, #23
   12904:	18fb      	adds	r3, r7, r3
   12906:	2205      	movs	r2, #5
   12908:	701a      	strb	r2, [r3, #0]
   1290a:	e00d      	b.n	12928 <gsm_getsignalstrength+0x184>
				}
				else
				{
					sig_strength = 0;
   1290c:	2317      	movs	r3, #23
   1290e:	18fb      	adds	r3, r7, r3
   12910:	2200      	movs	r2, #0
   12912:	701a      	strb	r2, [r3, #0]
   12914:	e008      	b.n	12928 <gsm_getsignalstrength+0x184>
				}
			}
		}
		else
		{
			sig_strength = 0;
   12916:	2317      	movs	r3, #23
   12918:	18fb      	adds	r3, r7, r3
   1291a:	2200      	movs	r2, #0
   1291c:	701a      	strb	r2, [r3, #0]
   1291e:	e003      	b.n	12928 <gsm_getsignalstrength+0x184>
		}
	}
	else
	{
		sig_strength = 0;
   12920:	2317      	movs	r3, #23
   12922:	18fb      	adds	r3, r7, r3
   12924:	2200      	movs	r2, #0
   12926:	701a      	strb	r2, [r3, #0]
	}
	
	free(cmdx);
   12928:	693b      	ldr	r3, [r7, #16]
   1292a:	0018      	movs	r0, r3
   1292c:	4b05      	ldr	r3, [pc, #20]	; (12944 <gsm_getsignalstrength+0x1a0>)
   1292e:	4798      	blx	r3
	
	return sig_strength;
   12930:	2317      	movs	r3, #23
   12932:	18fb      	adds	r3, r7, r3
   12934:	781b      	ldrb	r3, [r3, #0]
}
   12936:	0018      	movs	r0, r3
   12938:	46bd      	mov	sp, r7
   1293a:	b006      	add	sp, #24
   1293c:	bdb0      	pop	{r4, r5, r7, pc}
   1293e:	46c0      	nop			; (mov r8, r8)
   12940:	000288ed 	.word	0x000288ed
   12944:	0002898d 	.word	0x0002898d
   12948:	000289fb 	.word	0x000289fb
   1294c:	00001388 	.word	0x00001388
   12950:	000296b0 	.word	0x000296b0
   12954:	00029824 	.word	0x00029824
   12958:	000122e1 	.word	0x000122e1
   1295c:	0002982c 	.word	0x0002982c
   12960:	00028cbb 	.word	0x00028cbb
   12964:	000297c8 	.word	0x000297c8
   12968:	00028ced 	.word	0x00028ced
   1296c:	000297cc 	.word	0x000297cc
   12970:	00012979 	.word	0x00012979
   12974:	000288e1 	.word	0x000288e1

00012978 <RemoveSpaces>:

void RemoveSpaces(char* source)
{
   12978:	b580      	push	{r7, lr}
   1297a:	b084      	sub	sp, #16
   1297c:	af00      	add	r7, sp, #0
   1297e:	6078      	str	r0, [r7, #4]
	char* i = source;
   12980:	687b      	ldr	r3, [r7, #4]
   12982:	60fb      	str	r3, [r7, #12]
	char* j = source;
   12984:	687b      	ldr	r3, [r7, #4]
   12986:	60bb      	str	r3, [r7, #8]
	while(*j != 0)
   12988:	e00c      	b.n	129a4 <RemoveSpaces+0x2c>
	{
		*i = *j++;
   1298a:	68bb      	ldr	r3, [r7, #8]
   1298c:	1c5a      	adds	r2, r3, #1
   1298e:	60ba      	str	r2, [r7, #8]
   12990:	781a      	ldrb	r2, [r3, #0]
   12992:	68fb      	ldr	r3, [r7, #12]
   12994:	701a      	strb	r2, [r3, #0]
		if(*i != ' ')
   12996:	68fb      	ldr	r3, [r7, #12]
   12998:	781b      	ldrb	r3, [r3, #0]
   1299a:	2b20      	cmp	r3, #32
   1299c:	d002      	beq.n	129a4 <RemoveSpaces+0x2c>
		i++;
   1299e:	68fb      	ldr	r3, [r7, #12]
   129a0:	3301      	adds	r3, #1
   129a2:	60fb      	str	r3, [r7, #12]
	while(*j != 0)
   129a4:	68bb      	ldr	r3, [r7, #8]
   129a6:	781b      	ldrb	r3, [r3, #0]
   129a8:	2b00      	cmp	r3, #0
   129aa:	d1ee      	bne.n	1298a <RemoveSpaces+0x12>
	}
	*i = 0;
   129ac:	68fb      	ldr	r3, [r7, #12]
   129ae:	2200      	movs	r2, #0
   129b0:	701a      	strb	r2, [r3, #0]
}
   129b2:	46c0      	nop			; (mov r8, r8)
   129b4:	46bd      	mov	sp, r7
   129b6:	b004      	add	sp, #16
   129b8:	bd80      	pop	{r7, pc}
	...

000129bc <gsm_enable_new_sms_message_indications>:
{
	return gsm_send_at_command((const char*)("AT&F\r"), (const char*)RESPONS_OK,10000,0,NULL);
}

enum gsm_error gsm_enable_new_sms_message_indications(void)
{
   129bc:	b590      	push	{r4, r7, lr}
   129be:	b083      	sub	sp, #12
   129c0:	af02      	add	r7, sp, #8
	return gsm_send_at_command((const char*)("AT+CNMI=2,1,0,0,0\r"), (const char*)RESPONS_OK,5000,0,NULL);
   129c2:	4a06      	ldr	r2, [pc, #24]	; (129dc <gsm_enable_new_sms_message_indications+0x20>)
   129c4:	4906      	ldr	r1, [pc, #24]	; (129e0 <gsm_enable_new_sms_message_indications+0x24>)
   129c6:	4807      	ldr	r0, [pc, #28]	; (129e4 <gsm_enable_new_sms_message_indications+0x28>)
   129c8:	2300      	movs	r3, #0
   129ca:	9300      	str	r3, [sp, #0]
   129cc:	2300      	movs	r3, #0
   129ce:	4c06      	ldr	r4, [pc, #24]	; (129e8 <gsm_enable_new_sms_message_indications+0x2c>)
   129d0:	47a0      	blx	r4
   129d2:	0003      	movs	r3, r0
}
   129d4:	0018      	movs	r0, r3
   129d6:	46bd      	mov	sp, r7
   129d8:	b001      	add	sp, #4
   129da:	bd90      	pop	{r4, r7, pc}
   129dc:	00001388 	.word	0x00001388
   129e0:	000296b0 	.word	0x000296b0
   129e4:	00029830 	.word	0x00029830
   129e8:	000122e1 	.word	0x000122e1

000129ec <gsm_send_sms>:
{
	return gsm_send_at_command((const char*)("AT+CNMI=1,0,0,0,0\r"), (const char*)RESPONS_OK,5000,0,NULL);
}

enum gsm_error gsm_send_sms(const char *phone_number, const char *message)
{
   129ec:	b5b0      	push	{r4, r5, r7, lr}
   129ee:	b088      	sub	sp, #32
   129f0:	af02      	add	r7, sp, #8
   129f2:	6078      	str	r0, [r7, #4]
   129f4:	6039      	str	r1, [r7, #0]
	/* Double-check the message length is acceptable (160 byte max payload) */
	if (strlen(message) > 250)
   129f6:	683b      	ldr	r3, [r7, #0]
   129f8:	0018      	movs	r0, r3
   129fa:	4b3b      	ldr	r3, [pc, #236]	; (12ae8 <gsm_send_sms+0xfc>)
   129fc:	4798      	blx	r3
   129fe:	0003      	movs	r3, r0
   12a00:	2bfa      	cmp	r3, #250	; 0xfa
   12a02:	d901      	bls.n	12a08 <gsm_send_sms+0x1c>
	{
		return GSM_ERROR_MESSAGE_LENGTH;
   12a04:	2303      	movs	r3, #3
   12a06:	e06b      	b.n	12ae0 <gsm_send_sms+0xf4>
	}
	/* Double-check the recipient phone number length */
	if (strlen(phone_number) < 6)
   12a08:	687b      	ldr	r3, [r7, #4]
   12a0a:	0018      	movs	r0, r3
   12a0c:	4b36      	ldr	r3, [pc, #216]	; (12ae8 <gsm_send_sms+0xfc>)
   12a0e:	4798      	blx	r3
   12a10:	0003      	movs	r3, r0
   12a12:	2b05      	cmp	r3, #5
   12a14:	d801      	bhi.n	12a1a <gsm_send_sms+0x2e>
	{
		return GSM_ERROR_PHONE_NUMBER_LENGTH;
   12a16:	2304      	movs	r3, #4
   12a18:	e062      	b.n	12ae0 <gsm_send_sms+0xf4>
	}
	
	enum gsm_error err;
	const uint8_t MAX_BUFFER = 250;
   12a1a:	2317      	movs	r3, #23
   12a1c:	18fb      	adds	r3, r7, r3
   12a1e:	22fa      	movs	r2, #250	; 0xfa
   12a20:	701a      	strb	r2, [r3, #0]
	char *cmdx = (char*) calloc(MAX_BUFFER,sizeof(char));
   12a22:	2317      	movs	r3, #23
   12a24:	18fb      	adds	r3, r7, r3
   12a26:	781b      	ldrb	r3, [r3, #0]
   12a28:	2101      	movs	r1, #1
   12a2a:	0018      	movs	r0, r3
   12a2c:	4b2f      	ldr	r3, [pc, #188]	; (12aec <gsm_send_sms+0x100>)
   12a2e:	4798      	blx	r3
   12a30:	0003      	movs	r3, r0
   12a32:	613b      	str	r3, [r7, #16]
	//buffer created???
	if (cmdx == NULL)
   12a34:	693b      	ldr	r3, [r7, #16]
   12a36:	2b00      	cmp	r3, #0
   12a38:	d101      	bne.n	12a3e <gsm_send_sms+0x52>
	{
		return 0;
   12a3a:	2300      	movs	r3, #0
   12a3c:	e050      	b.n	12ae0 <gsm_send_sms+0xf4>
	}
	memset(cmdx, '\0', MAX_BUFFER);
   12a3e:	2317      	movs	r3, #23
   12a40:	18fb      	adds	r3, r7, r3
   12a42:	781a      	ldrb	r2, [r3, #0]
   12a44:	693b      	ldr	r3, [r7, #16]
   12a46:	2100      	movs	r1, #0
   12a48:	0018      	movs	r0, r3
   12a4a:	4b29      	ldr	r3, [pc, #164]	; (12af0 <gsm_send_sms+0x104>)
   12a4c:	4798      	blx	r3
	snprintf((char*)cmdx, MAX_BUFFER, "AT+CMGS=\"%s\"\r", phone_number);
   12a4e:	2317      	movs	r3, #23
   12a50:	18fb      	adds	r3, r7, r3
   12a52:	7819      	ldrb	r1, [r3, #0]
   12a54:	687b      	ldr	r3, [r7, #4]
   12a56:	4a27      	ldr	r2, [pc, #156]	; (12af4 <gsm_send_sms+0x108>)
   12a58:	6938      	ldr	r0, [r7, #16]
   12a5a:	4c27      	ldr	r4, [pc, #156]	; (12af8 <gsm_send_sms+0x10c>)
   12a5c:	47a0      	blx	r4
	if (gsm_send_at_command((const char*)cmdx, (const char*)">",60000, 0, NULL)==GSM_ERROR_NONE)
   12a5e:	4a27      	ldr	r2, [pc, #156]	; (12afc <gsm_send_sms+0x110>)
   12a60:	4927      	ldr	r1, [pc, #156]	; (12b00 <gsm_send_sms+0x114>)
   12a62:	6938      	ldr	r0, [r7, #16]
   12a64:	2300      	movs	r3, #0
   12a66:	9300      	str	r3, [sp, #0]
   12a68:	2300      	movs	r3, #0
   12a6a:	4c26      	ldr	r4, [pc, #152]	; (12b04 <gsm_send_sms+0x118>)
   12a6c:	47a0      	blx	r4
   12a6e:	1e03      	subs	r3, r0, #0
   12a70:	d131      	bne.n	12ad6 <gsm_send_sms+0xea>
	{
		vTaskDelay(500/portTICK_PERIOD_MS);		//todo: check if sms is reaching time is reduced than 30 seconds, if yes, than keep this statement, else remove it.
   12a72:	23fa      	movs	r3, #250	; 0xfa
   12a74:	005b      	lsls	r3, r3, #1
   12a76:	0018      	movs	r0, r3
   12a78:	4b23      	ldr	r3, [pc, #140]	; (12b08 <gsm_send_sms+0x11c>)
   12a7a:	4798      	blx	r3
		memset(cmdx, '\0', MAX_BUFFER);
   12a7c:	2317      	movs	r3, #23
   12a7e:	18fb      	adds	r3, r7, r3
   12a80:	781a      	ldrb	r2, [r3, #0]
   12a82:	693b      	ldr	r3, [r7, #16]
   12a84:	2100      	movs	r1, #0
   12a86:	0018      	movs	r0, r3
   12a88:	4b19      	ldr	r3, [pc, #100]	; (12af0 <gsm_send_sms+0x104>)
   12a8a:	4798      	blx	r3
		
		snprintf((char*)cmdx, MAX_BUFFER, "%s\x1A\x0D",message);
   12a8c:	2317      	movs	r3, #23
   12a8e:	18fb      	adds	r3, r7, r3
   12a90:	7819      	ldrb	r1, [r3, #0]
   12a92:	683b      	ldr	r3, [r7, #0]
   12a94:	4a1d      	ldr	r2, [pc, #116]	; (12b0c <gsm_send_sms+0x120>)
   12a96:	6938      	ldr	r0, [r7, #16]
   12a98:	4c17      	ldr	r4, [pc, #92]	; (12af8 <gsm_send_sms+0x10c>)
   12a9a:	47a0      	blx	r4
		
		err = gsm_send_at_command((const char*)cmdx, (const char*)RESPONS_OK,60000, 0, NULL);
   12a9c:	230f      	movs	r3, #15
   12a9e:	18fc      	adds	r4, r7, r3
   12aa0:	4a16      	ldr	r2, [pc, #88]	; (12afc <gsm_send_sms+0x110>)
   12aa2:	491b      	ldr	r1, [pc, #108]	; (12b10 <gsm_send_sms+0x124>)
   12aa4:	6938      	ldr	r0, [r7, #16]
   12aa6:	2300      	movs	r3, #0
   12aa8:	9300      	str	r3, [sp, #0]
   12aaa:	2300      	movs	r3, #0
   12aac:	4d15      	ldr	r5, [pc, #84]	; (12b04 <gsm_send_sms+0x118>)
   12aae:	47a8      	blx	r5
   12ab0:	0003      	movs	r3, r0
   12ab2:	7023      	strb	r3, [r4, #0]
		if (err == GSM_ERROR_NONE)
   12ab4:	230f      	movs	r3, #15
   12ab6:	18fb      	adds	r3, r7, r3
   12ab8:	781b      	ldrb	r3, [r3, #0]
   12aba:	2b00      	cmp	r3, #0
   12abc:	d105      	bne.n	12aca <gsm_send_sms+0xde>
		{
			free(cmdx);
   12abe:	693b      	ldr	r3, [r7, #16]
   12ac0:	0018      	movs	r0, r3
   12ac2:	4b14      	ldr	r3, [pc, #80]	; (12b14 <gsm_send_sms+0x128>)
   12ac4:	4798      	blx	r3
			return GSM_ERROR_NONE;
   12ac6:	2300      	movs	r3, #0
   12ac8:	e00a      	b.n	12ae0 <gsm_send_sms+0xf4>
		}
		else
		{
			free(cmdx);
   12aca:	693b      	ldr	r3, [r7, #16]
   12acc:	0018      	movs	r0, r3
   12ace:	4b11      	ldr	r3, [pc, #68]	; (12b14 <gsm_send_sms+0x128>)
   12ad0:	4798      	blx	r3
			return GSM_ERROR_SMS_SEND_FAILED;
   12ad2:	2306      	movs	r3, #6
   12ad4:	e004      	b.n	12ae0 <gsm_send_sms+0xf4>
		}
	}
	else
	{
		free(cmdx);
   12ad6:	693b      	ldr	r3, [r7, #16]
   12ad8:	0018      	movs	r0, r3
   12ada:	4b0e      	ldr	r3, [pc, #56]	; (12b14 <gsm_send_sms+0x128>)
   12adc:	4798      	blx	r3
		return GSM_ERROR_SMS_SEND_FAILED;
   12ade:	2306      	movs	r3, #6
	}
}
   12ae0:	0018      	movs	r0, r3
   12ae2:	46bd      	mov	sp, r7
   12ae4:	b006      	add	sp, #24
   12ae6:	bdb0      	pop	{r4, r5, r7, pc}
   12ae8:	00028c8b 	.word	0x00028c8b
   12aec:	000288ed 	.word	0x000288ed
   12af0:	000289fb 	.word	0x000289fb
   12af4:	00029858 	.word	0x00029858
   12af8:	00028b9d 	.word	0x00028b9d
   12afc:	0000ea60 	.word	0x0000ea60
   12b00:	00029868 	.word	0x00029868
   12b04:	000122e1 	.word	0x000122e1
   12b08:	0001fad9 	.word	0x0001fad9
   12b0c:	0002986c 	.word	0x0002986c
   12b10:	000296b0 	.word	0x000296b0
   12b14:	0002898d 	.word	0x0002898d

00012b18 <gsm_read_sms>:
	free(cmdx);
	return sms_index;
}

enum gsm_error gsm_read_sms(uint8_t position, char *phone_number, uint8_t max_phone_len, char *SMS_text, uint8_t max_SMS_len)
{
   12b18:	b590      	push	{r4, r7, lr}
   12b1a:	b08f      	sub	sp, #60	; 0x3c
   12b1c:	af02      	add	r7, sp, #8
   12b1e:	60b9      	str	r1, [r7, #8]
   12b20:	0011      	movs	r1, r2
   12b22:	607b      	str	r3, [r7, #4]
   12b24:	230f      	movs	r3, #15
   12b26:	18fb      	adds	r3, r7, r3
   12b28:	1c02      	adds	r2, r0, #0
   12b2a:	701a      	strb	r2, [r3, #0]
   12b2c:	230e      	movs	r3, #14
   12b2e:	18fb      	adds	r3, r7, r3
   12b30:	1c0a      	adds	r2, r1, #0
   12b32:	701a      	strb	r2, [r3, #0]
	const uint8_t MAX_BUFFER = 230;
   12b34:	232f      	movs	r3, #47	; 0x2f
   12b36:	18fb      	adds	r3, r7, r3
   12b38:	22e6      	movs	r2, #230	; 0xe6
   12b3a:	701a      	strb	r2, [r3, #0]
	char *cmdx = (char*) calloc(MAX_BUFFER,sizeof(char));
   12b3c:	232f      	movs	r3, #47	; 0x2f
   12b3e:	18fb      	adds	r3, r7, r3
   12b40:	781b      	ldrb	r3, [r3, #0]
   12b42:	2101      	movs	r1, #1
   12b44:	0018      	movs	r0, r3
   12b46:	4b6e      	ldr	r3, [pc, #440]	; (12d00 <gsm_read_sms+0x1e8>)
   12b48:	4798      	blx	r3
   12b4a:	0003      	movs	r3, r0
   12b4c:	62bb      	str	r3, [r7, #40]	; 0x28
	if (cmdx == NULL)
   12b4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   12b50:	2b00      	cmp	r3, #0
   12b52:	d105      	bne.n	12b60 <gsm_read_sms+0x48>
	{
		free(cmdx);
   12b54:	6abb      	ldr	r3, [r7, #40]	; 0x28
   12b56:	0018      	movs	r0, r3
   12b58:	4b6a      	ldr	r3, [pc, #424]	; (12d04 <gsm_read_sms+0x1ec>)
   12b5a:	4798      	blx	r3
		return 0;
   12b5c:	2300      	movs	r3, #0
   12b5e:	e0ca      	b.n	12cf6 <gsm_read_sms+0x1de>
	}
	memset(cmdx, '\0', MAX_BUFFER);
   12b60:	232f      	movs	r3, #47	; 0x2f
   12b62:	18fb      	adds	r3, r7, r3
   12b64:	781a      	ldrb	r2, [r3, #0]
   12b66:	6abb      	ldr	r3, [r7, #40]	; 0x28
   12b68:	2100      	movs	r1, #0
   12b6a:	0018      	movs	r0, r3
   12b6c:	4b66      	ldr	r3, [pc, #408]	; (12d08 <gsm_read_sms+0x1f0>)
   12b6e:	4798      	blx	r3
	
	uint8_t cmgr_at_command[10] = {0};
   12b70:	2310      	movs	r3, #16
   12b72:	18fb      	adds	r3, r7, r3
   12b74:	0018      	movs	r0, r3
   12b76:	230a      	movs	r3, #10
   12b78:	001a      	movs	r2, r3
   12b7a:	2100      	movs	r1, #0
   12b7c:	4b62      	ldr	r3, [pc, #392]	; (12d08 <gsm_read_sms+0x1f0>)
   12b7e:	4798      	blx	r3
	
	snprintf((char*)cmgr_at_command, MAX_BUFFER, "AT+CMGR=%d\r",position);
   12b80:	232f      	movs	r3, #47	; 0x2f
   12b82:	18fb      	adds	r3, r7, r3
   12b84:	7819      	ldrb	r1, [r3, #0]
   12b86:	230f      	movs	r3, #15
   12b88:	18fb      	adds	r3, r7, r3
   12b8a:	781b      	ldrb	r3, [r3, #0]
   12b8c:	4a5f      	ldr	r2, [pc, #380]	; (12d0c <gsm_read_sms+0x1f4>)
   12b8e:	2010      	movs	r0, #16
   12b90:	1838      	adds	r0, r7, r0
   12b92:	4c5f      	ldr	r4, [pc, #380]	; (12d10 <gsm_read_sms+0x1f8>)
   12b94:	47a0      	blx	r4
	
	if (gsm_send_at_command((const char*)cmgr_at_command, (const char*)RESPONS_OK,5000, MAX_BUFFER, cmdx)==GSM_ERROR_NONE)
   12b96:	232f      	movs	r3, #47	; 0x2f
   12b98:	18fb      	adds	r3, r7, r3
   12b9a:	781a      	ldrb	r2, [r3, #0]
   12b9c:	4c5d      	ldr	r4, [pc, #372]	; (12d14 <gsm_read_sms+0x1fc>)
   12b9e:	495e      	ldr	r1, [pc, #376]	; (12d18 <gsm_read_sms+0x200>)
   12ba0:	2310      	movs	r3, #16
   12ba2:	18f8      	adds	r0, r7, r3
   12ba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   12ba6:	9300      	str	r3, [sp, #0]
   12ba8:	0013      	movs	r3, r2
   12baa:	0022      	movs	r2, r4
   12bac:	4c5b      	ldr	r4, [pc, #364]	; (12d1c <gsm_read_sms+0x204>)
   12bae:	47a0      	blx	r4
   12bb0:	1e03      	subs	r3, r0, #0
   12bb2:	d000      	beq.n	12bb6 <gsm_read_sms+0x9e>
   12bb4:	e094      	b.n	12ce0 <gsm_read_sms+0x1c8>
	{
		char *strig_cmp;
		char *p_char;
		char *p_char1;
		strig_cmp = strstr(cmdx,"+CMGR");
   12bb6:	4a5a      	ldr	r2, [pc, #360]	; (12d20 <gsm_read_sms+0x208>)
   12bb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   12bba:	0011      	movs	r1, r2
   12bbc:	0018      	movs	r0, r3
   12bbe:	4b59      	ldr	r3, [pc, #356]	; (12d24 <gsm_read_sms+0x20c>)
   12bc0:	4798      	blx	r3
   12bc2:	0003      	movs	r3, r0
   12bc4:	627b      	str	r3, [r7, #36]	; 0x24
		if (strig_cmp != 0)
   12bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   12bc8:	2b00      	cmp	r3, #0
   12bca:	d100      	bne.n	12bce <gsm_read_sms+0xb6>
   12bcc:	e082      	b.n	12cd4 <gsm_read_sms+0x1bc>
		{
			p_char = strchr((char *)(cmdx),',');
   12bce:	6abb      	ldr	r3, [r7, #40]	; 0x28
   12bd0:	212c      	movs	r1, #44	; 0x2c
   12bd2:	0018      	movs	r0, r3
   12bd4:	4b54      	ldr	r3, [pc, #336]	; (12d28 <gsm_read_sms+0x210>)
   12bd6:	4798      	blx	r3
   12bd8:	0003      	movs	r3, r0
   12bda:	623b      	str	r3, [r7, #32]
			p_char1 = p_char+2;
   12bdc:	6a3b      	ldr	r3, [r7, #32]
   12bde:	3302      	adds	r3, #2
   12be0:	61fb      	str	r3, [r7, #28]
			p_char = strchr((char *)(p_char1),'"');
   12be2:	69fb      	ldr	r3, [r7, #28]
   12be4:	2122      	movs	r1, #34	; 0x22
   12be6:	0018      	movs	r0, r3
   12be8:	4b4f      	ldr	r3, [pc, #316]	; (12d28 <gsm_read_sms+0x210>)
   12bea:	4798      	blx	r3
   12bec:	0003      	movs	r3, r0
   12bee:	623b      	str	r3, [r7, #32]
			uint8_t len;
			if (p_char != NULL)
   12bf0:	6a3b      	ldr	r3, [r7, #32]
   12bf2:	2b00      	cmp	r3, #0
   12bf4:	d02a      	beq.n	12c4c <gsm_read_sms+0x134>
			{
				*p_char = 0;
   12bf6:	6a3b      	ldr	r3, [r7, #32]
   12bf8:	2200      	movs	r2, #0
   12bfa:	701a      	strb	r2, [r3, #0]
				len = strlen(p_char1);
   12bfc:	69fb      	ldr	r3, [r7, #28]
   12bfe:	0018      	movs	r0, r3
   12c00:	4b4a      	ldr	r3, [pc, #296]	; (12d2c <gsm_read_sms+0x214>)
   12c02:	4798      	blx	r3
   12c04:	0002      	movs	r2, r0
   12c06:	231b      	movs	r3, #27
   12c08:	18fb      	adds	r3, r7, r3
   12c0a:	701a      	strb	r2, [r3, #0]
				if(len < max_phone_len)
   12c0c:	231b      	movs	r3, #27
   12c0e:	18fa      	adds	r2, r7, r3
   12c10:	230e      	movs	r3, #14
   12c12:	18fb      	adds	r3, r7, r3
   12c14:	7812      	ldrb	r2, [r2, #0]
   12c16:	781b      	ldrb	r3, [r3, #0]
   12c18:	429a      	cmp	r2, r3
   12c1a:	d206      	bcs.n	12c2a <gsm_read_sms+0x112>
				{
					strcpy(phone_number, (char *)(p_char1));
   12c1c:	69fa      	ldr	r2, [r7, #28]
   12c1e:	68bb      	ldr	r3, [r7, #8]
   12c20:	0011      	movs	r1, r2
   12c22:	0018      	movs	r0, r3
   12c24:	4b42      	ldr	r3, [pc, #264]	; (12d30 <gsm_read_sms+0x218>)
   12c26:	4798      	blx	r3
   12c28:	e010      	b.n	12c4c <gsm_read_sms+0x134>
				}
				else
				{
					memcpy(phone_number,(char *)p_char1,(max_phone_len-1));
   12c2a:	230e      	movs	r3, #14
   12c2c:	18fb      	adds	r3, r7, r3
   12c2e:	781b      	ldrb	r3, [r3, #0]
   12c30:	3b01      	subs	r3, #1
   12c32:	001a      	movs	r2, r3
   12c34:	69f9      	ldr	r1, [r7, #28]
   12c36:	68bb      	ldr	r3, [r7, #8]
   12c38:	0018      	movs	r0, r3
   12c3a:	4b3e      	ldr	r3, [pc, #248]	; (12d34 <gsm_read_sms+0x21c>)
   12c3c:	4798      	blx	r3
					phone_number[max_phone_len]=0;
   12c3e:	230e      	movs	r3, #14
   12c40:	18fb      	adds	r3, r7, r3
   12c42:	781b      	ldrb	r3, [r3, #0]
   12c44:	68ba      	ldr	r2, [r7, #8]
   12c46:	18d3      	adds	r3, r2, r3
   12c48:	2200      	movs	r2, #0
   12c4a:	701a      	strb	r2, [r3, #0]
				}
			}
			p_char = strchr(p_char+1, 0x0a);
   12c4c:	6a3b      	ldr	r3, [r7, #32]
   12c4e:	3301      	adds	r3, #1
   12c50:	210a      	movs	r1, #10
   12c52:	0018      	movs	r0, r3
   12c54:	4b34      	ldr	r3, [pc, #208]	; (12d28 <gsm_read_sms+0x210>)
   12c56:	4798      	blx	r3
   12c58:	0003      	movs	r3, r0
   12c5a:	623b      	str	r3, [r7, #32]
			if (p_char != NULL)
   12c5c:	6a3b      	ldr	r3, [r7, #32]
   12c5e:	2b00      	cmp	r3, #0
   12c60:	d044      	beq.n	12cec <gsm_read_sms+0x1d4>
			{
				p_char++;
   12c62:	6a3b      	ldr	r3, [r7, #32]
   12c64:	3301      	adds	r3, #1
   12c66:	623b      	str	r3, [r7, #32]
				p_char1 = strchr((char *)(p_char), 0x0d);
   12c68:	6a3b      	ldr	r3, [r7, #32]
   12c6a:	210d      	movs	r1, #13
   12c6c:	0018      	movs	r0, r3
   12c6e:	4b2e      	ldr	r3, [pc, #184]	; (12d28 <gsm_read_sms+0x210>)
   12c70:	4798      	blx	r3
   12c72:	0003      	movs	r3, r0
   12c74:	61fb      	str	r3, [r7, #28]
				if (p_char1 != NULL)
   12c76:	69fb      	ldr	r3, [r7, #28]
   12c78:	2b00      	cmp	r3, #0
   12c7a:	d002      	beq.n	12c82 <gsm_read_sms+0x16a>
				{
					*p_char1 = 0;
   12c7c:	69fb      	ldr	r3, [r7, #28]
   12c7e:	2200      	movs	r2, #0
   12c80:	701a      	strb	r2, [r3, #0]
				}
				len = strlen(p_char);
   12c82:	6a3b      	ldr	r3, [r7, #32]
   12c84:	0018      	movs	r0, r3
   12c86:	4b29      	ldr	r3, [pc, #164]	; (12d2c <gsm_read_sms+0x214>)
   12c88:	4798      	blx	r3
   12c8a:	0002      	movs	r2, r0
   12c8c:	231b      	movs	r3, #27
   12c8e:	18fb      	adds	r3, r7, r3
   12c90:	701a      	strb	r2, [r3, #0]
				if (len < max_SMS_len)
   12c92:	231b      	movs	r3, #27
   12c94:	18fb      	adds	r3, r7, r3
   12c96:	2240      	movs	r2, #64	; 0x40
   12c98:	18b9      	adds	r1, r7, r2
   12c9a:	781a      	ldrb	r2, [r3, #0]
   12c9c:	780b      	ldrb	r3, [r1, #0]
   12c9e:	429a      	cmp	r2, r3
   12ca0:	d206      	bcs.n	12cb0 <gsm_read_sms+0x198>
				{
					strcpy(SMS_text, (char *)(p_char));
   12ca2:	6a3a      	ldr	r2, [r7, #32]
   12ca4:	687b      	ldr	r3, [r7, #4]
   12ca6:	0011      	movs	r1, r2
   12ca8:	0018      	movs	r0, r3
   12caa:	4b21      	ldr	r3, [pc, #132]	; (12d30 <gsm_read_sms+0x218>)
   12cac:	4798      	blx	r3
   12cae:	e01d      	b.n	12cec <gsm_read_sms+0x1d4>
				}
				else
				{
					memcpy(SMS_text, (char *)(p_char), (max_SMS_len-1));
   12cb0:	2340      	movs	r3, #64	; 0x40
   12cb2:	18fb      	adds	r3, r7, r3
   12cb4:	781b      	ldrb	r3, [r3, #0]
   12cb6:	3b01      	subs	r3, #1
   12cb8:	001a      	movs	r2, r3
   12cba:	6a39      	ldr	r1, [r7, #32]
   12cbc:	687b      	ldr	r3, [r7, #4]
   12cbe:	0018      	movs	r0, r3
   12cc0:	4b1c      	ldr	r3, [pc, #112]	; (12d34 <gsm_read_sms+0x21c>)
   12cc2:	4798      	blx	r3
					SMS_text[max_SMS_len] = 0;
   12cc4:	2340      	movs	r3, #64	; 0x40
   12cc6:	18fb      	adds	r3, r7, r3
   12cc8:	781b      	ldrb	r3, [r3, #0]
   12cca:	687a      	ldr	r2, [r7, #4]
   12ccc:	18d3      	adds	r3, r2, r3
   12cce:	2200      	movs	r2, #0
   12cd0:	701a      	strb	r2, [r3, #0]
   12cd2:	e00b      	b.n	12cec <gsm_read_sms+0x1d4>
				}
			}
		}
		else
		{
			free(cmdx);
   12cd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   12cd6:	0018      	movs	r0, r3
   12cd8:	4b0a      	ldr	r3, [pc, #40]	; (12d04 <gsm_read_sms+0x1ec>)
   12cda:	4798      	blx	r3
			return GSM_ERROR_SMS_NOT_AVAILABLE;
   12cdc:	230c      	movs	r3, #12
   12cde:	e00a      	b.n	12cf6 <gsm_read_sms+0x1de>
		}
	}
	else
	{
		free(cmdx);
   12ce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   12ce2:	0018      	movs	r0, r3
   12ce4:	4b07      	ldr	r3, [pc, #28]	; (12d04 <gsm_read_sms+0x1ec>)
   12ce6:	4798      	blx	r3
		return GSM_ERROR_SMS_NOT_AVAILABLE;
   12ce8:	230c      	movs	r3, #12
   12cea:	e004      	b.n	12cf6 <gsm_read_sms+0x1de>
	}
	free(cmdx);
   12cec:	6abb      	ldr	r3, [r7, #40]	; 0x28
   12cee:	0018      	movs	r0, r3
   12cf0:	4b04      	ldr	r3, [pc, #16]	; (12d04 <gsm_read_sms+0x1ec>)
   12cf2:	4798      	blx	r3
	return GSM_ERROR_NONE;
   12cf4:	2300      	movs	r3, #0
}
   12cf6:	0018      	movs	r0, r3
   12cf8:	46bd      	mov	sp, r7
   12cfa:	b00d      	add	sp, #52	; 0x34
   12cfc:	bd90      	pop	{r4, r7, pc}
   12cfe:	46c0      	nop			; (mov r8, r8)
   12d00:	000288ed 	.word	0x000288ed
   12d04:	0002898d 	.word	0x0002898d
   12d08:	000289fb 	.word	0x000289fb
   12d0c:	000298b8 	.word	0x000298b8
   12d10:	00028b9d 	.word	0x00028b9d
   12d14:	00001388 	.word	0x00001388
   12d18:	000296b0 	.word	0x000296b0
   12d1c:	000122e1 	.word	0x000122e1
   12d20:	000298c4 	.word	0x000298c4
   12d24:	00028cbb 	.word	0x00028cbb
   12d28:	00028c5f 	.word	0x00028c5f
   12d2c:	00028c8b 	.word	0x00028c8b
   12d30:	00028c7b 	.word	0x00028c7b
   12d34:	000289c5 	.word	0x000289c5

00012d38 <gsm_call_to_dial_a_number>:


enum gsm_error gsm_call_to_dial_a_number(const char *to)
{
   12d38:	b5b0      	push	{r4, r5, r7, lr}
   12d3a:	b088      	sub	sp, #32
   12d3c:	af02      	add	r7, sp, #8
   12d3e:	6078      	str	r0, [r7, #4]
	const uint8_t MAX_BUFFER = 30;
   12d40:	2317      	movs	r3, #23
   12d42:	18fb      	adds	r3, r7, r3
   12d44:	221e      	movs	r2, #30
   12d46:	701a      	strb	r2, [r3, #0]
	enum gsm_error err;
	char *cmdx = (char*) calloc(MAX_BUFFER,sizeof(char));
   12d48:	2317      	movs	r3, #23
   12d4a:	18fb      	adds	r3, r7, r3
   12d4c:	781b      	ldrb	r3, [r3, #0]
   12d4e:	2101      	movs	r1, #1
   12d50:	0018      	movs	r0, r3
   12d52:	4b18      	ldr	r3, [pc, #96]	; (12db4 <gsm_call_to_dial_a_number+0x7c>)
   12d54:	4798      	blx	r3
   12d56:	0003      	movs	r3, r0
   12d58:	613b      	str	r3, [r7, #16]
	
	//buffer created?
	if (cmdx == NULL)
   12d5a:	693b      	ldr	r3, [r7, #16]
   12d5c:	2b00      	cmp	r3, #0
   12d5e:	d101      	bne.n	12d64 <gsm_call_to_dial_a_number+0x2c>
	{
		return 0;
   12d60:	2300      	movs	r3, #0
   12d62:	e023      	b.n	12dac <gsm_call_to_dial_a_number+0x74>
	}
	
	//init string
	memset(cmdx, '\0', MAX_BUFFER);
   12d64:	2317      	movs	r3, #23
   12d66:	18fb      	adds	r3, r7, r3
   12d68:	781a      	ldrb	r2, [r3, #0]
   12d6a:	693b      	ldr	r3, [r7, #16]
   12d6c:	2100      	movs	r1, #0
   12d6e:	0018      	movs	r0, r3
   12d70:	4b11      	ldr	r3, [pc, #68]	; (12db8 <gsm_call_to_dial_a_number+0x80>)
   12d72:	4798      	blx	r3
	snprintf((char*)cmdx, MAX_BUFFER, "ATD%s;\r", to);
   12d74:	2317      	movs	r3, #23
   12d76:	18fb      	adds	r3, r7, r3
   12d78:	7819      	ldrb	r1, [r3, #0]
   12d7a:	687b      	ldr	r3, [r7, #4]
   12d7c:	4a0f      	ldr	r2, [pc, #60]	; (12dbc <gsm_call_to_dial_a_number+0x84>)
   12d7e:	6938      	ldr	r0, [r7, #16]
   12d80:	4c0f      	ldr	r4, [pc, #60]	; (12dc0 <gsm_call_to_dial_a_number+0x88>)
   12d82:	47a0      	blx	r4
	
	err = gsm_send_at_command((const char*)cmdx, (const char*)RESPONS_OK,2000,0, NULL);
   12d84:	230f      	movs	r3, #15
   12d86:	18fc      	adds	r4, r7, r3
   12d88:	23fa      	movs	r3, #250	; 0xfa
   12d8a:	00da      	lsls	r2, r3, #3
   12d8c:	490d      	ldr	r1, [pc, #52]	; (12dc4 <gsm_call_to_dial_a_number+0x8c>)
   12d8e:	6938      	ldr	r0, [r7, #16]
   12d90:	2300      	movs	r3, #0
   12d92:	9300      	str	r3, [sp, #0]
   12d94:	2300      	movs	r3, #0
   12d96:	4d0c      	ldr	r5, [pc, #48]	; (12dc8 <gsm_call_to_dial_a_number+0x90>)
   12d98:	47a8      	blx	r5
   12d9a:	0003      	movs	r3, r0
   12d9c:	7023      	strb	r3, [r4, #0]
	free(cmdx);
   12d9e:	693b      	ldr	r3, [r7, #16]
   12da0:	0018      	movs	r0, r3
   12da2:	4b0a      	ldr	r3, [pc, #40]	; (12dcc <gsm_call_to_dial_a_number+0x94>)
   12da4:	4798      	blx	r3
	return err;
   12da6:	230f      	movs	r3, #15
   12da8:	18fb      	adds	r3, r7, r3
   12daa:	781b      	ldrb	r3, [r3, #0]
	
}
   12dac:	0018      	movs	r0, r3
   12dae:	46bd      	mov	sp, r7
   12db0:	b006      	add	sp, #24
   12db2:	bdb0      	pop	{r4, r5, r7, pc}
   12db4:	000288ed 	.word	0x000288ed
   12db8:	000289fb 	.word	0x000289fb
   12dbc:	000298cc 	.word	0x000298cc
   12dc0:	00028b9d 	.word	0x00028b9d
   12dc4:	000296b0 	.word	0x000296b0
   12dc8:	000122e1 	.word	0x000122e1
   12dcc:	0002898d 	.word	0x0002898d

00012dd0 <gsm_answer_an_incomming_call>:

enum gsm_error gsm_answer_an_incomming_call(void)
{
   12dd0:	b590      	push	{r4, r7, lr}
   12dd2:	b083      	sub	sp, #12
   12dd4:	af02      	add	r7, sp, #8
	return gsm_send_at_command((const char*)("ATA\r"), (const char*)RESPONS_OK,5000,0, NULL);
   12dd6:	4a06      	ldr	r2, [pc, #24]	; (12df0 <gsm_answer_an_incomming_call+0x20>)
   12dd8:	4906      	ldr	r1, [pc, #24]	; (12df4 <gsm_answer_an_incomming_call+0x24>)
   12dda:	4807      	ldr	r0, [pc, #28]	; (12df8 <gsm_answer_an_incomming_call+0x28>)
   12ddc:	2300      	movs	r3, #0
   12dde:	9300      	str	r3, [sp, #0]
   12de0:	2300      	movs	r3, #0
   12de2:	4c06      	ldr	r4, [pc, #24]	; (12dfc <gsm_answer_an_incomming_call+0x2c>)
   12de4:	47a0      	blx	r4
   12de6:	0003      	movs	r3, r0
}
   12de8:	0018      	movs	r0, r3
   12dea:	46bd      	mov	sp, r7
   12dec:	b001      	add	sp, #4
   12dee:	bd90      	pop	{r4, r7, pc}
   12df0:	00001388 	.word	0x00001388
   12df4:	000296b0 	.word	0x000296b0
   12df8:	000298d4 	.word	0x000298d4
   12dfc:	000122e1 	.word	0x000122e1

00012e00 <gsm_enable_network_time_update>:


enum gsm_error gsm_enable_network_time_update(void)
{
   12e00:	b590      	push	{r4, r7, lr}
   12e02:	b083      	sub	sp, #12
   12e04:	af02      	add	r7, sp, #8
	return 	gsm_send_at_command((const char*)("AT+CLTS=1\r"), (const char*)RESPONS_OK,10000,0, NULL);
   12e06:	4a06      	ldr	r2, [pc, #24]	; (12e20 <gsm_enable_network_time_update+0x20>)
   12e08:	4906      	ldr	r1, [pc, #24]	; (12e24 <gsm_enable_network_time_update+0x24>)
   12e0a:	4807      	ldr	r0, [pc, #28]	; (12e28 <gsm_enable_network_time_update+0x28>)
   12e0c:	2300      	movs	r3, #0
   12e0e:	9300      	str	r3, [sp, #0]
   12e10:	2300      	movs	r3, #0
   12e12:	4c06      	ldr	r4, [pc, #24]	; (12e2c <gsm_enable_network_time_update+0x2c>)
   12e14:	47a0      	blx	r4
   12e16:	0003      	movs	r3, r0
}
   12e18:	0018      	movs	r0, r3
   12e1a:	46bd      	mov	sp, r7
   12e1c:	b001      	add	sp, #4
   12e1e:	bd90      	pop	{r4, r7, pc}
   12e20:	00002710 	.word	0x00002710
   12e24:	000296b0 	.word	0x000296b0
   12e28:	000298dc 	.word	0x000298dc
   12e2c:	000122e1 	.word	0x000122e1

00012e30 <gsm_enable_DTMF_detection>:
{
	return 	gsm_send_at_command((const char*)("AT+CLTS=0\r"), (const char*)RESPONS_OK,10000,0, NULL);
}

enum gsm_error gsm_enable_DTMF_detection(void)
{
   12e30:	b590      	push	{r4, r7, lr}
   12e32:	b083      	sub	sp, #12
   12e34:	af02      	add	r7, sp, #8
	return 	gsm_send_at_command((const char*)("AT+DDET=1\r"), (const char*)RESPONS_OK,5000,0, NULL);
   12e36:	4a06      	ldr	r2, [pc, #24]	; (12e50 <gsm_enable_DTMF_detection+0x20>)
   12e38:	4906      	ldr	r1, [pc, #24]	; (12e54 <gsm_enable_DTMF_detection+0x24>)
   12e3a:	4807      	ldr	r0, [pc, #28]	; (12e58 <gsm_enable_DTMF_detection+0x28>)
   12e3c:	2300      	movs	r3, #0
   12e3e:	9300      	str	r3, [sp, #0]
   12e40:	2300      	movs	r3, #0
   12e42:	4c06      	ldr	r4, [pc, #24]	; (12e5c <gsm_enable_DTMF_detection+0x2c>)
   12e44:	47a0      	blx	r4
   12e46:	0003      	movs	r3, r0
}
   12e48:	0018      	movs	r0, r3
   12e4a:	46bd      	mov	sp, r7
   12e4c:	b001      	add	sp, #4
   12e4e:	bd90      	pop	{r4, r7, pc}
   12e50:	00001388 	.word	0x00001388
   12e54:	000296b0 	.word	0x000296b0
   12e58:	000298f4 	.word	0x000298f4
   12e5c:	000122e1 	.word	0x000122e1

00012e60 <gsm_send_DTMF_Tone>:

enum gsm_error gsm_send_DTMF_Tone(char *tone)
{
   12e60:	b5b0      	push	{r4, r5, r7, lr}
   12e62:	b088      	sub	sp, #32
   12e64:	af02      	add	r7, sp, #8
   12e66:	6078      	str	r0, [r7, #4]
	const uint8_t MAX_BUFFER = 30;
   12e68:	2317      	movs	r3, #23
   12e6a:	18fb      	adds	r3, r7, r3
   12e6c:	221e      	movs	r2, #30
   12e6e:	701a      	strb	r2, [r3, #0]
	enum gsm_error err;
	char *cmdx = (char*) calloc(MAX_BUFFER,sizeof(char));
   12e70:	2317      	movs	r3, #23
   12e72:	18fb      	adds	r3, r7, r3
   12e74:	781b      	ldrb	r3, [r3, #0]
   12e76:	2101      	movs	r1, #1
   12e78:	0018      	movs	r0, r3
   12e7a:	4b18      	ldr	r3, [pc, #96]	; (12edc <gsm_send_DTMF_Tone+0x7c>)
   12e7c:	4798      	blx	r3
   12e7e:	0003      	movs	r3, r0
   12e80:	613b      	str	r3, [r7, #16]
	
	//buffer created?
	if (cmdx == NULL)
   12e82:	693b      	ldr	r3, [r7, #16]
   12e84:	2b00      	cmp	r3, #0
   12e86:	d101      	bne.n	12e8c <gsm_send_DTMF_Tone+0x2c>
	{
		return 0;
   12e88:	2300      	movs	r3, #0
   12e8a:	e022      	b.n	12ed2 <gsm_send_DTMF_Tone+0x72>
	}
	
	//init string
	memset(cmdx, '\0', MAX_BUFFER);
   12e8c:	2317      	movs	r3, #23
   12e8e:	18fb      	adds	r3, r7, r3
   12e90:	781a      	ldrb	r2, [r3, #0]
   12e92:	693b      	ldr	r3, [r7, #16]
   12e94:	2100      	movs	r1, #0
   12e96:	0018      	movs	r0, r3
   12e98:	4b11      	ldr	r3, [pc, #68]	; (12ee0 <gsm_send_DTMF_Tone+0x80>)
   12e9a:	4798      	blx	r3
	snprintf((char*)cmdx, MAX_BUFFER,"AT+VTS=\"%s\"\r",tone);
   12e9c:	2317      	movs	r3, #23
   12e9e:	18fb      	adds	r3, r7, r3
   12ea0:	7819      	ldrb	r1, [r3, #0]
   12ea2:	687b      	ldr	r3, [r7, #4]
   12ea4:	4a0f      	ldr	r2, [pc, #60]	; (12ee4 <gsm_send_DTMF_Tone+0x84>)
   12ea6:	6938      	ldr	r0, [r7, #16]
   12ea8:	4c0f      	ldr	r4, [pc, #60]	; (12ee8 <gsm_send_DTMF_Tone+0x88>)
   12eaa:	47a0      	blx	r4
	
	err = gsm_send_at_command((const char*)(cmdx), (const char*)RESPONS_OK,5000,0, NULL);
   12eac:	230f      	movs	r3, #15
   12eae:	18fc      	adds	r4, r7, r3
   12eb0:	4a0e      	ldr	r2, [pc, #56]	; (12eec <gsm_send_DTMF_Tone+0x8c>)
   12eb2:	490f      	ldr	r1, [pc, #60]	; (12ef0 <gsm_send_DTMF_Tone+0x90>)
   12eb4:	6938      	ldr	r0, [r7, #16]
   12eb6:	2300      	movs	r3, #0
   12eb8:	9300      	str	r3, [sp, #0]
   12eba:	2300      	movs	r3, #0
   12ebc:	4d0d      	ldr	r5, [pc, #52]	; (12ef4 <gsm_send_DTMF_Tone+0x94>)
   12ebe:	47a8      	blx	r5
   12ec0:	0003      	movs	r3, r0
   12ec2:	7023      	strb	r3, [r4, #0]
	free(cmdx);
   12ec4:	693b      	ldr	r3, [r7, #16]
   12ec6:	0018      	movs	r0, r3
   12ec8:	4b0b      	ldr	r3, [pc, #44]	; (12ef8 <gsm_send_DTMF_Tone+0x98>)
   12eca:	4798      	blx	r3
	return err;
   12ecc:	230f      	movs	r3, #15
   12ece:	18fb      	adds	r3, r7, r3
   12ed0:	781b      	ldrb	r3, [r3, #0]
}
   12ed2:	0018      	movs	r0, r3
   12ed4:	46bd      	mov	sp, r7
   12ed6:	b006      	add	sp, #24
   12ed8:	bdb0      	pop	{r4, r5, r7, pc}
   12eda:	46c0      	nop			; (mov r8, r8)
   12edc:	000288ed 	.word	0x000288ed
   12ee0:	000289fb 	.word	0x000289fb
   12ee4:	00029900 	.word	0x00029900
   12ee8:	00028b9d 	.word	0x00028b9d
   12eec:	00001388 	.word	0x00001388
   12ef0:	000296b0 	.word	0x000296b0
   12ef4:	000122e1 	.word	0x000122e1
   12ef8:	0002898d 	.word	0x0002898d

00012efc <gsm_hangup_call>:

enum gsm_error gsm_hangup_call(void)
{
   12efc:	b590      	push	{r4, r7, lr}
   12efe:	b083      	sub	sp, #12
   12f00:	af02      	add	r7, sp, #8
	return 	gsm_send_at_command((const char*)("AT+CHUP\r"), (const char*)RESPONS_OK,5000,0, NULL);
   12f02:	4a06      	ldr	r2, [pc, #24]	; (12f1c <gsm_hangup_call+0x20>)
   12f04:	4906      	ldr	r1, [pc, #24]	; (12f20 <gsm_hangup_call+0x24>)
   12f06:	4807      	ldr	r0, [pc, #28]	; (12f24 <gsm_hangup_call+0x28>)
   12f08:	2300      	movs	r3, #0
   12f0a:	9300      	str	r3, [sp, #0]
   12f0c:	2300      	movs	r3, #0
   12f0e:	4c06      	ldr	r4, [pc, #24]	; (12f28 <gsm_hangup_call+0x2c>)
   12f10:	47a0      	blx	r4
   12f12:	0003      	movs	r3, r0
}
   12f14:	0018      	movs	r0, r3
   12f16:	46bd      	mov	sp, r7
   12f18:	b001      	add	sp, #4
   12f1a:	bd90      	pop	{r4, r7, pc}
   12f1c:	00001388 	.word	0x00001388
   12f20:	000296b0 	.word	0x000296b0
   12f24:	00029910 	.word	0x00029910
   12f28:	000122e1 	.word	0x000122e1

00012f2c <gsm_disable_call_waiting>:

enum gsm_error gsm_disable_call_waiting(void)
{
   12f2c:	b590      	push	{r4, r7, lr}
   12f2e:	b083      	sub	sp, #12
   12f30:	af02      	add	r7, sp, #8
	return gsm_send_at_command((const char*)("AT+CCWA=0,0\r"), (const char*)RESPONS_OK,18000,0, NULL);
   12f32:	4a06      	ldr	r2, [pc, #24]	; (12f4c <gsm_disable_call_waiting+0x20>)
   12f34:	4906      	ldr	r1, [pc, #24]	; (12f50 <gsm_disable_call_waiting+0x24>)
   12f36:	4807      	ldr	r0, [pc, #28]	; (12f54 <gsm_disable_call_waiting+0x28>)
   12f38:	2300      	movs	r3, #0
   12f3a:	9300      	str	r3, [sp, #0]
   12f3c:	2300      	movs	r3, #0
   12f3e:	4c06      	ldr	r4, [pc, #24]	; (12f58 <gsm_disable_call_waiting+0x2c>)
   12f40:	47a0      	blx	r4
   12f42:	0003      	movs	r3, r0
}
   12f44:	0018      	movs	r0, r3
   12f46:	46bd      	mov	sp, r7
   12f48:	b001      	add	sp, #4
   12f4a:	bd90      	pop	{r4, r7, pc}
   12f4c:	00004650 	.word	0x00004650
   12f50:	000296b0 	.word	0x000296b0
   12f54:	0002991c 	.word	0x0002991c
   12f58:	000122e1 	.word	0x000122e1

00012f5c <gsm_stop_play_record_file>:
	return gsm_send_at_command((const char*)("AT+GSMBUSY=0\r"), (const char*)RESPONS_OK,5000,0, NULL);
}


enum gsm_error gsm_stop_play_record_file(void)
{
   12f5c:	b590      	push	{r4, r7, lr}
   12f5e:	b083      	sub	sp, #12
   12f60:	af02      	add	r7, sp, #8
	return gsm_send_at_command((const char*)("AT+CREC=5\r"), (const char*)RESPONS_OK,2000,0, NULL);
   12f62:	23fa      	movs	r3, #250	; 0xfa
   12f64:	00da      	lsls	r2, r3, #3
   12f66:	4906      	ldr	r1, [pc, #24]	; (12f80 <gsm_stop_play_record_file+0x24>)
   12f68:	4806      	ldr	r0, [pc, #24]	; (12f84 <gsm_stop_play_record_file+0x28>)
   12f6a:	2300      	movs	r3, #0
   12f6c:	9300      	str	r3, [sp, #0]
   12f6e:	2300      	movs	r3, #0
   12f70:	4c05      	ldr	r4, [pc, #20]	; (12f88 <gsm_stop_play_record_file+0x2c>)
   12f72:	47a0      	blx	r4
   12f74:	0003      	movs	r3, r0
}
   12f76:	0018      	movs	r0, r3
   12f78:	46bd      	mov	sp, r7
   12f7a:	b001      	add	sp, #4
   12f7c:	bd90      	pop	{r4, r7, pc}
   12f7e:	46c0      	nop			; (mov r8, r8)
   12f80:	000296b0 	.word	0x000296b0
   12f84:	0002994c 	.word	0x0002994c
   12f88:	000122e1 	.word	0x000122e1

00012f8c <gsm_play_record_file>:

enum gsm_error gsm_play_record_file(const char *filename,bool playInfinitely)
{
   12f8c:	b590      	push	{r4, r7, lr}
   12f8e:	b087      	sub	sp, #28
   12f90:	af02      	add	r7, sp, #8
   12f92:	6078      	str	r0, [r7, #4]
   12f94:	000a      	movs	r2, r1
   12f96:	1cfb      	adds	r3, r7, #3
   12f98:	701a      	strb	r2, [r3, #0]
	//AT+CREC=4,"C:\User\555.amr",0,100$0D
	
	uint8_t repeat = 0;
   12f9a:	230f      	movs	r3, #15
   12f9c:	18fb      	adds	r3, r7, r3
   12f9e:	2200      	movs	r2, #0
   12fa0:	701a      	strb	r2, [r3, #0]
	if (playInfinitely)
   12fa2:	1cfb      	adds	r3, r7, #3
   12fa4:	781b      	ldrb	r3, [r3, #0]
   12fa6:	2b00      	cmp	r3, #0
   12fa8:	d003      	beq.n	12fb2 <gsm_play_record_file+0x26>
	{
		repeat = 1;
   12faa:	230f      	movs	r3, #15
   12fac:	18fb      	adds	r3, r7, r3
   12fae:	2201      	movs	r2, #1
   12fb0:	701a      	strb	r2, [r3, #0]
	}
	
	const uint8_t MAX_BUFFER = 50;
   12fb2:	230e      	movs	r3, #14
   12fb4:	18fb      	adds	r3, r7, r3
   12fb6:	2232      	movs	r2, #50	; 0x32
   12fb8:	701a      	strb	r2, [r3, #0]
	char *cmdx = (char*) calloc(MAX_BUFFER,sizeof(char));
   12fba:	230e      	movs	r3, #14
   12fbc:	18fb      	adds	r3, r7, r3
   12fbe:	781b      	ldrb	r3, [r3, #0]
   12fc0:	2101      	movs	r1, #1
   12fc2:	0018      	movs	r0, r3
   12fc4:	4b17      	ldr	r3, [pc, #92]	; (13024 <gsm_play_record_file+0x98>)
   12fc6:	4798      	blx	r3
   12fc8:	0003      	movs	r3, r0
   12fca:	60bb      	str	r3, [r7, #8]
	//buffer created???
	if (cmdx == NULL)
   12fcc:	68bb      	ldr	r3, [r7, #8]
   12fce:	2b00      	cmp	r3, #0
   12fd0:	d101      	bne.n	12fd6 <gsm_play_record_file+0x4a>
	{
		return 0;
   12fd2:	2300      	movs	r3, #0
   12fd4:	e022      	b.n	1301c <gsm_play_record_file+0x90>
	}
	memset(cmdx, '\0', MAX_BUFFER);
   12fd6:	230e      	movs	r3, #14
   12fd8:	18fb      	adds	r3, r7, r3
   12fda:	781a      	ldrb	r2, [r3, #0]
   12fdc:	68bb      	ldr	r3, [r7, #8]
   12fde:	2100      	movs	r1, #0
   12fe0:	0018      	movs	r0, r3
   12fe2:	4b11      	ldr	r3, [pc, #68]	; (13028 <gsm_play_record_file+0x9c>)
   12fe4:	4798      	blx	r3
	
	snprintf((char*)cmdx, MAX_BUFFER, "AT+CREC=4,\"C:\\User\\%c.amr\",0,90,%u\r",filename,repeat);
   12fe6:	230e      	movs	r3, #14
   12fe8:	18fb      	adds	r3, r7, r3
   12fea:	7819      	ldrb	r1, [r3, #0]
   12fec:	230f      	movs	r3, #15
   12fee:	18fb      	adds	r3, r7, r3
   12ff0:	781b      	ldrb	r3, [r3, #0]
   12ff2:	687c      	ldr	r4, [r7, #4]
   12ff4:	4a0d      	ldr	r2, [pc, #52]	; (1302c <gsm_play_record_file+0xa0>)
   12ff6:	68b8      	ldr	r0, [r7, #8]
   12ff8:	9300      	str	r3, [sp, #0]
   12ffa:	0023      	movs	r3, r4
   12ffc:	4c0c      	ldr	r4, [pc, #48]	; (13030 <gsm_play_record_file+0xa4>)
   12ffe:	47a0      	blx	r4
	
	gsm_send_at_command((const char*)(cmdx), (const char*)RESPONS_OK,2000,0, NULL);
   13000:	23fa      	movs	r3, #250	; 0xfa
   13002:	00da      	lsls	r2, r3, #3
   13004:	490b      	ldr	r1, [pc, #44]	; (13034 <gsm_play_record_file+0xa8>)
   13006:	68b8      	ldr	r0, [r7, #8]
   13008:	2300      	movs	r3, #0
   1300a:	9300      	str	r3, [sp, #0]
   1300c:	2300      	movs	r3, #0
   1300e:	4c0a      	ldr	r4, [pc, #40]	; (13038 <gsm_play_record_file+0xac>)
   13010:	47a0      	blx	r4
	free(cmdx);
   13012:	68bb      	ldr	r3, [r7, #8]
   13014:	0018      	movs	r0, r3
   13016:	4b09      	ldr	r3, [pc, #36]	; (1303c <gsm_play_record_file+0xb0>)
   13018:	4798      	blx	r3
	return GSM_ERROR_NONE;
   1301a:	2300      	movs	r3, #0
	
}
   1301c:	0018      	movs	r0, r3
   1301e:	46bd      	mov	sp, r7
   13020:	b005      	add	sp, #20
   13022:	bd90      	pop	{r4, r7, pc}
   13024:	000288ed 	.word	0x000288ed
   13028:	000289fb 	.word	0x000289fb
   1302c:	00029958 	.word	0x00029958
   13030:	00028b9d 	.word	0x00028b9d
   13034:	000296b0 	.word	0x000296b0
   13038:	000122e1 	.word	0x000122e1
   1303c:	0002898d 	.word	0x0002898d

00013040 <gsm_get_internal_rtc_time>:

enum gsm_error gsm_get_internal_rtc_time(void)
{
   13040:	b5b0      	push	{r4, r5, r7, lr}
   13042:	b086      	sub	sp, #24
   13044:	af02      	add	r7, sp, #8
	const uint8_t MAX_BUFFER = 70;
   13046:	230f      	movs	r3, #15
   13048:	18fb      	adds	r3, r7, r3
   1304a:	2246      	movs	r2, #70	; 0x46
   1304c:	701a      	strb	r2, [r3, #0]
	char *cmdx = (char*) calloc(MAX_BUFFER,sizeof(char));
   1304e:	230f      	movs	r3, #15
   13050:	18fb      	adds	r3, r7, r3
   13052:	781b      	ldrb	r3, [r3, #0]
   13054:	2101      	movs	r1, #1
   13056:	0018      	movs	r0, r3
   13058:	4b57      	ldr	r3, [pc, #348]	; (131b8 <gsm_get_internal_rtc_time+0x178>)
   1305a:	4798      	blx	r3
   1305c:	0003      	movs	r3, r0
   1305e:	60bb      	str	r3, [r7, #8]
	if (cmdx == NULL)
   13060:	68bb      	ldr	r3, [r7, #8]
   13062:	2b00      	cmp	r3, #0
   13064:	d105      	bne.n	13072 <gsm_get_internal_rtc_time+0x32>
	{
		free(cmdx);
   13066:	68bb      	ldr	r3, [r7, #8]
   13068:	0018      	movs	r0, r3
   1306a:	4b54      	ldr	r3, [pc, #336]	; (131bc <gsm_get_internal_rtc_time+0x17c>)
   1306c:	4798      	blx	r3
		return 0;
   1306e:	2300      	movs	r3, #0
   13070:	e09d      	b.n	131ae <gsm_get_internal_rtc_time+0x16e>
	}
	memset(cmdx, '\0', MAX_BUFFER);
   13072:	230f      	movs	r3, #15
   13074:	18fb      	adds	r3, r7, r3
   13076:	781a      	ldrb	r2, [r3, #0]
   13078:	68bb      	ldr	r3, [r7, #8]
   1307a:	2100      	movs	r1, #0
   1307c:	0018      	movs	r0, r3
   1307e:	4b50      	ldr	r3, [pc, #320]	; (131c0 <gsm_get_internal_rtc_time+0x180>)
   13080:	4798      	blx	r3
	
	enum gsm_error err;
	err = gsm_send_at_command((const char*)"AT+CCLK?\r", (const char*)RESPONS_OK,5000,MAX_BUFFER, cmdx);
   13082:	1dfc      	adds	r4, r7, #7
   13084:	230f      	movs	r3, #15
   13086:	18fb      	adds	r3, r7, r3
   13088:	781a      	ldrb	r2, [r3, #0]
   1308a:	4d4e      	ldr	r5, [pc, #312]	; (131c4 <gsm_get_internal_rtc_time+0x184>)
   1308c:	494e      	ldr	r1, [pc, #312]	; (131c8 <gsm_get_internal_rtc_time+0x188>)
   1308e:	484f      	ldr	r0, [pc, #316]	; (131cc <gsm_get_internal_rtc_time+0x18c>)
   13090:	68bb      	ldr	r3, [r7, #8]
   13092:	9300      	str	r3, [sp, #0]
   13094:	0013      	movs	r3, r2
   13096:	002a      	movs	r2, r5
   13098:	4d4d      	ldr	r5, [pc, #308]	; (131d0 <gsm_get_internal_rtc_time+0x190>)
   1309a:	47a8      	blx	r5
   1309c:	0003      	movs	r3, r0
   1309e:	7023      	strb	r3, [r4, #0]
	if(err==GSM_ERROR_NONE)
   130a0:	1dfb      	adds	r3, r7, #7
   130a2:	781b      	ldrb	r3, [r3, #0]
   130a4:	2b00      	cmp	r3, #0
   130a6:	d16a      	bne.n	1317e <gsm_get_internal_rtc_time+0x13e>
	{
		char *cclktocken;
		cclktocken = strtok(cmdx,"\"");
   130a8:	4a4a      	ldr	r2, [pc, #296]	; (131d4 <gsm_get_internal_rtc_time+0x194>)
   130aa:	68bb      	ldr	r3, [r7, #8]
   130ac:	0011      	movs	r1, r2
   130ae:	0018      	movs	r0, r3
   130b0:	4b49      	ldr	r3, [pc, #292]	; (131d8 <gsm_get_internal_rtc_time+0x198>)
   130b2:	4798      	blx	r3
   130b4:	0003      	movs	r3, r0
   130b6:	603b      	str	r3, [r7, #0]
		cclktocken = strtok(NULL,"\"");
   130b8:	4b46      	ldr	r3, [pc, #280]	; (131d4 <gsm_get_internal_rtc_time+0x194>)
   130ba:	0019      	movs	r1, r3
   130bc:	2000      	movs	r0, #0
   130be:	4b46      	ldr	r3, [pc, #280]	; (131d8 <gsm_get_internal_rtc_time+0x198>)
   130c0:	4798      	blx	r3
   130c2:	0003      	movs	r3, r0
   130c4:	603b      	str	r3, [r7, #0]
		
		cclktocken = strtok(cclktocken,"/");
   130c6:	4a45      	ldr	r2, [pc, #276]	; (131dc <gsm_get_internal_rtc_time+0x19c>)
   130c8:	683b      	ldr	r3, [r7, #0]
   130ca:	0011      	movs	r1, r2
   130cc:	0018      	movs	r0, r3
   130ce:	4b42      	ldr	r3, [pc, #264]	; (131d8 <gsm_get_internal_rtc_time+0x198>)
   130d0:	4798      	blx	r3
   130d2:	0003      	movs	r3, r0
   130d4:	603b      	str	r3, [r7, #0]
		struct_internal_rtc.Network_year = atoi(cclktocken);
   130d6:	683b      	ldr	r3, [r7, #0]
   130d8:	0018      	movs	r0, r3
   130da:	4b41      	ldr	r3, [pc, #260]	; (131e0 <gsm_get_internal_rtc_time+0x1a0>)
   130dc:	4798      	blx	r3
   130de:	0003      	movs	r3, r0
   130e0:	b2da      	uxtb	r2, r3
   130e2:	4b40      	ldr	r3, [pc, #256]	; (131e4 <gsm_get_internal_rtc_time+0x1a4>)
   130e4:	701a      	strb	r2, [r3, #0]
		
		cclktocken = strtok(NULL,"/");
   130e6:	4b3d      	ldr	r3, [pc, #244]	; (131dc <gsm_get_internal_rtc_time+0x19c>)
   130e8:	0019      	movs	r1, r3
   130ea:	2000      	movs	r0, #0
   130ec:	4b3a      	ldr	r3, [pc, #232]	; (131d8 <gsm_get_internal_rtc_time+0x198>)
   130ee:	4798      	blx	r3
   130f0:	0003      	movs	r3, r0
   130f2:	603b      	str	r3, [r7, #0]
		struct_internal_rtc.Network_month = atoi(cclktocken);
   130f4:	683b      	ldr	r3, [r7, #0]
   130f6:	0018      	movs	r0, r3
   130f8:	4b39      	ldr	r3, [pc, #228]	; (131e0 <gsm_get_internal_rtc_time+0x1a0>)
   130fa:	4798      	blx	r3
   130fc:	0003      	movs	r3, r0
   130fe:	b2da      	uxtb	r2, r3
   13100:	4b38      	ldr	r3, [pc, #224]	; (131e4 <gsm_get_internal_rtc_time+0x1a4>)
   13102:	705a      	strb	r2, [r3, #1]
		
		cclktocken = strtok(NULL,",");
   13104:	4b38      	ldr	r3, [pc, #224]	; (131e8 <gsm_get_internal_rtc_time+0x1a8>)
   13106:	0019      	movs	r1, r3
   13108:	2000      	movs	r0, #0
   1310a:	4b33      	ldr	r3, [pc, #204]	; (131d8 <gsm_get_internal_rtc_time+0x198>)
   1310c:	4798      	blx	r3
   1310e:	0003      	movs	r3, r0
   13110:	603b      	str	r3, [r7, #0]
		struct_internal_rtc.Network_date = atoi(cclktocken);
   13112:	683b      	ldr	r3, [r7, #0]
   13114:	0018      	movs	r0, r3
   13116:	4b32      	ldr	r3, [pc, #200]	; (131e0 <gsm_get_internal_rtc_time+0x1a0>)
   13118:	4798      	blx	r3
   1311a:	0003      	movs	r3, r0
   1311c:	b2da      	uxtb	r2, r3
   1311e:	4b31      	ldr	r3, [pc, #196]	; (131e4 <gsm_get_internal_rtc_time+0x1a4>)
   13120:	709a      	strb	r2, [r3, #2]
		
		cclktocken = strtok(NULL,":");
   13122:	4b32      	ldr	r3, [pc, #200]	; (131ec <gsm_get_internal_rtc_time+0x1ac>)
   13124:	0019      	movs	r1, r3
   13126:	2000      	movs	r0, #0
   13128:	4b2b      	ldr	r3, [pc, #172]	; (131d8 <gsm_get_internal_rtc_time+0x198>)
   1312a:	4798      	blx	r3
   1312c:	0003      	movs	r3, r0
   1312e:	603b      	str	r3, [r7, #0]
		struct_internal_rtc.Network_hour = atoi(cclktocken);
   13130:	683b      	ldr	r3, [r7, #0]
   13132:	0018      	movs	r0, r3
   13134:	4b2a      	ldr	r3, [pc, #168]	; (131e0 <gsm_get_internal_rtc_time+0x1a0>)
   13136:	4798      	blx	r3
   13138:	0003      	movs	r3, r0
   1313a:	b2da      	uxtb	r2, r3
   1313c:	4b29      	ldr	r3, [pc, #164]	; (131e4 <gsm_get_internal_rtc_time+0x1a4>)
   1313e:	70da      	strb	r2, [r3, #3]
		
		cclktocken = strtok(NULL,":");
   13140:	4b2a      	ldr	r3, [pc, #168]	; (131ec <gsm_get_internal_rtc_time+0x1ac>)
   13142:	0019      	movs	r1, r3
   13144:	2000      	movs	r0, #0
   13146:	4b24      	ldr	r3, [pc, #144]	; (131d8 <gsm_get_internal_rtc_time+0x198>)
   13148:	4798      	blx	r3
   1314a:	0003      	movs	r3, r0
   1314c:	603b      	str	r3, [r7, #0]
		struct_internal_rtc.Network_minute = atoi(cclktocken);
   1314e:	683b      	ldr	r3, [r7, #0]
   13150:	0018      	movs	r0, r3
   13152:	4b23      	ldr	r3, [pc, #140]	; (131e0 <gsm_get_internal_rtc_time+0x1a0>)
   13154:	4798      	blx	r3
   13156:	0003      	movs	r3, r0
   13158:	b2da      	uxtb	r2, r3
   1315a:	4b22      	ldr	r3, [pc, #136]	; (131e4 <gsm_get_internal_rtc_time+0x1a4>)
   1315c:	711a      	strb	r2, [r3, #4]
		
		cclktocken = strtok(NULL,"+");
   1315e:	4b24      	ldr	r3, [pc, #144]	; (131f0 <gsm_get_internal_rtc_time+0x1b0>)
   13160:	0019      	movs	r1, r3
   13162:	2000      	movs	r0, #0
   13164:	4b1c      	ldr	r3, [pc, #112]	; (131d8 <gsm_get_internal_rtc_time+0x198>)
   13166:	4798      	blx	r3
   13168:	0003      	movs	r3, r0
   1316a:	603b      	str	r3, [r7, #0]
		struct_internal_rtc.Network_second = atoi(cclktocken);
   1316c:	683b      	ldr	r3, [r7, #0]
   1316e:	0018      	movs	r0, r3
   13170:	4b1b      	ldr	r3, [pc, #108]	; (131e0 <gsm_get_internal_rtc_time+0x1a0>)
   13172:	4798      	blx	r3
   13174:	0003      	movs	r3, r0
   13176:	b2da      	uxtb	r2, r3
   13178:	4b1a      	ldr	r3, [pc, #104]	; (131e4 <gsm_get_internal_rtc_time+0x1a4>)
   1317a:	715a      	strb	r2, [r3, #5]
   1317c:	e011      	b.n	131a2 <gsm_get_internal_rtc_time+0x162>
	}
	else
	{
		struct_internal_rtc.Network_year = 0;
   1317e:	4b19      	ldr	r3, [pc, #100]	; (131e4 <gsm_get_internal_rtc_time+0x1a4>)
   13180:	2200      	movs	r2, #0
   13182:	701a      	strb	r2, [r3, #0]
		struct_internal_rtc.Network_month = 0;
   13184:	4b17      	ldr	r3, [pc, #92]	; (131e4 <gsm_get_internal_rtc_time+0x1a4>)
   13186:	2200      	movs	r2, #0
   13188:	705a      	strb	r2, [r3, #1]
		struct_internal_rtc.Network_date = 0;
   1318a:	4b16      	ldr	r3, [pc, #88]	; (131e4 <gsm_get_internal_rtc_time+0x1a4>)
   1318c:	2200      	movs	r2, #0
   1318e:	709a      	strb	r2, [r3, #2]
		struct_internal_rtc.Network_hour = 0;
   13190:	4b14      	ldr	r3, [pc, #80]	; (131e4 <gsm_get_internal_rtc_time+0x1a4>)
   13192:	2200      	movs	r2, #0
   13194:	70da      	strb	r2, [r3, #3]
		struct_internal_rtc.Network_minute = 0;
   13196:	4b13      	ldr	r3, [pc, #76]	; (131e4 <gsm_get_internal_rtc_time+0x1a4>)
   13198:	2200      	movs	r2, #0
   1319a:	711a      	strb	r2, [r3, #4]
		struct_internal_rtc.Network_second = 0;
   1319c:	4b11      	ldr	r3, [pc, #68]	; (131e4 <gsm_get_internal_rtc_time+0x1a4>)
   1319e:	2200      	movs	r2, #0
   131a0:	715a      	strb	r2, [r3, #5]
	}
	
	free(cmdx);
   131a2:	68bb      	ldr	r3, [r7, #8]
   131a4:	0018      	movs	r0, r3
   131a6:	4b05      	ldr	r3, [pc, #20]	; (131bc <gsm_get_internal_rtc_time+0x17c>)
   131a8:	4798      	blx	r3
	return err;
   131aa:	1dfb      	adds	r3, r7, #7
   131ac:	781b      	ldrb	r3, [r3, #0]
}
   131ae:	0018      	movs	r0, r3
   131b0:	46bd      	mov	sp, r7
   131b2:	b004      	add	sp, #16
   131b4:	bdb0      	pop	{r4, r5, r7, pc}
   131b6:	46c0      	nop			; (mov r8, r8)
   131b8:	000288ed 	.word	0x000288ed
   131bc:	0002898d 	.word	0x0002898d
   131c0:	000289fb 	.word	0x000289fb
   131c4:	00001388 	.word	0x00001388
   131c8:	000296b0 	.word	0x000296b0
   131cc:	0002997c 	.word	0x0002997c
   131d0:	000122e1 	.word	0x000122e1
   131d4:	00029988 	.word	0x00029988
   131d8:	00028ced 	.word	0x00028ced
   131dc:	0002998c 	.word	0x0002998c
   131e0:	000288e1 	.word	0x000288e1
   131e4:	20000690 	.word	0x20000690
   131e8:	000297cc 	.word	0x000297cc
   131ec:	000297c8 	.word	0x000297c8
   131f0:	00029990 	.word	0x00029990

000131f4 <gsm_config_module>:


enum gsm_error gsm_config_module(void)
{
   131f4:	b580      	push	{r7, lr}
   131f6:	af00      	add	r7, sp, #0
	if (gsm_check_module() == GSM_ERROR_NONE)
   131f8:	4b31      	ldr	r3, [pc, #196]	; (132c0 <gsm_config_module+0xcc>)
   131fa:	4798      	blx	r3
   131fc:	1e03      	subs	r3, r0, #0
   131fe:	d000      	beq.n	13202 <gsm_config_module+0xe>
   13200:	e058      	b.n	132b4 <gsm_config_module+0xc0>
	{
		if (gsm_factory_reset() == GSM_ERROR_NONE)
   13202:	4b30      	ldr	r3, [pc, #192]	; (132c4 <gsm_config_module+0xd0>)
   13204:	4798      	blx	r3
   13206:	1e03      	subs	r3, r0, #0
   13208:	d000      	beq.n	1320c <gsm_config_module+0x18>
   1320a:	e051      	b.n	132b0 <gsm_config_module+0xbc>
		{
			vTaskDelay(2000/portTICK_PERIOD_MS);
   1320c:	23fa      	movs	r3, #250	; 0xfa
   1320e:	00db      	lsls	r3, r3, #3
   13210:	0018      	movs	r0, r3
   13212:	4b2d      	ldr	r3, [pc, #180]	; (132c8 <gsm_config_module+0xd4>)
   13214:	4798      	blx	r3
			
			if (gsm_detect_simcard() == GSM_ERROR_NONE)
   13216:	4b2d      	ldr	r3, [pc, #180]	; (132cc <gsm_config_module+0xd8>)
   13218:	4798      	blx	r3
   1321a:	1e03      	subs	r3, r0, #0
   1321c:	d146      	bne.n	132ac <gsm_config_module+0xb8>
			{
				if (gsm_echo_off() == GSM_ERROR_NONE)
   1321e:	4b2c      	ldr	r3, [pc, #176]	; (132d0 <gsm_config_module+0xdc>)
   13220:	4798      	blx	r3
   13222:	1e03      	subs	r3, r0, #0
   13224:	d148      	bne.n	132b8 <gsm_config_module+0xc4>
				{
					if (gsm_set_baudrate() == GSM_ERROR_NONE)
   13226:	4b2b      	ldr	r3, [pc, #172]	; (132d4 <gsm_config_module+0xe0>)
   13228:	4798      	blx	r3
   1322a:	1e03      	subs	r3, r0, #0
   1322c:	d13c      	bne.n	132a8 <gsm_config_module+0xb4>
					{
						vTaskDelay(2000/portTICK_PERIOD_MS);
   1322e:	23fa      	movs	r3, #250	; 0xfa
   13230:	00db      	lsls	r3, r3, #3
   13232:	0018      	movs	r0, r3
   13234:	4b24      	ldr	r3, [pc, #144]	; (132c8 <gsm_config_module+0xd4>)
   13236:	4798      	blx	r3
						
						if (gsm_enable_calling_line_identification()==GSM_ERROR_NONE)
   13238:	4b27      	ldr	r3, [pc, #156]	; (132d8 <gsm_config_module+0xe4>)
   1323a:	4798      	blx	r3
   1323c:	1e03      	subs	r3, r0, #0
   1323e:	d131      	bne.n	132a4 <gsm_config_module+0xb0>
						{
							if (gsm_enable_connected_line_identification_presentation() == GSM_ERROR_NONE)
   13240:	4b26      	ldr	r3, [pc, #152]	; (132dc <gsm_config_module+0xe8>)
   13242:	4798      	blx	r3
   13244:	1e03      	subs	r3, r0, #0
   13246:	d12b      	bne.n	132a0 <gsm_config_module+0xac>
							{
								if (gsm_enable_list_current_calls_of_ME() == GSM_ERROR_NONE)
   13248:	4b25      	ldr	r3, [pc, #148]	; (132e0 <gsm_config_module+0xec>)
   1324a:	4798      	blx	r3
   1324c:	1e03      	subs	r3, r0, #0
   1324e:	d125      	bne.n	1329c <gsm_config_module+0xa8>
								{
									if (gsm_select_sms_message_formate_text_mode() == GSM_ERROR_NONE)
   13250:	4b24      	ldr	r3, [pc, #144]	; (132e4 <gsm_config_module+0xf0>)
   13252:	4798      	blx	r3
   13254:	1e03      	subs	r3, r0, #0
   13256:	d11f      	bne.n	13298 <gsm_config_module+0xa4>
									{
										if (gsm_set_sms_text_mode_parameter() == GSM_ERROR_NONE)
   13258:	4b23      	ldr	r3, [pc, #140]	; (132e8 <gsm_config_module+0xf4>)
   1325a:	4798      	blx	r3
   1325c:	1e03      	subs	r3, r0, #0
   1325e:	d119      	bne.n	13294 <gsm_config_module+0xa0>
										{
											if (gsm_enable_new_sms_message_indications() == GSM_ERROR_NONE)
   13260:	4b22      	ldr	r3, [pc, #136]	; (132ec <gsm_config_module+0xf8>)
   13262:	4798      	blx	r3
   13264:	1e03      	subs	r3, r0, #0
   13266:	d113      	bne.n	13290 <gsm_config_module+0x9c>
											{
												if (gsm_enable_network_time_update() == GSM_ERROR_NONE)
   13268:	4b21      	ldr	r3, [pc, #132]	; (132f0 <gsm_config_module+0xfc>)
   1326a:	4798      	blx	r3
   1326c:	1e03      	subs	r3, r0, #0
   1326e:	d10d      	bne.n	1328c <gsm_config_module+0x98>
												{
													if (gsm_enable_DTMF_detection() == GSM_ERROR_NONE)
   13270:	4b20      	ldr	r3, [pc, #128]	; (132f4 <gsm_config_module+0x100>)
   13272:	4798      	blx	r3
   13274:	1e03      	subs	r3, r0, #0
   13276:	d107      	bne.n	13288 <gsm_config_module+0x94>
													{
														//if (gsm_enable_sleep_mode()==GSM_ERROR_NONE)
														{
															if (gsm_store_active_profile() == GSM_ERROR_NONE)
   13278:	4b1f      	ldr	r3, [pc, #124]	; (132f8 <gsm_config_module+0x104>)
   1327a:	4798      	blx	r3
   1327c:	1e03      	subs	r3, r0, #0
   1327e:	d101      	bne.n	13284 <gsm_config_module+0x90>
															{
																return GSM_ERROR_NONE;
   13280:	2300      	movs	r3, #0
   13282:	e01a      	b.n	132ba <gsm_config_module+0xc6>
															}
															else
															{
																return GSM_ERROR_CONFIG_FAILED;
   13284:	2310      	movs	r3, #16
   13286:	e018      	b.n	132ba <gsm_config_module+0xc6>
															//	return GSM_ERROR_CONFIG_FAILED;
														}
													}
													else
													{
														return GSM_ERROR_CONFIG_FAILED;
   13288:	2310      	movs	r3, #16
   1328a:	e016      	b.n	132ba <gsm_config_module+0xc6>
													}
												}
												else
												{
													return GSM_ERROR_CONFIG_FAILED;
   1328c:	2310      	movs	r3, #16
   1328e:	e014      	b.n	132ba <gsm_config_module+0xc6>
												}
											}
											else
											{
												return GSM_ERROR_CONFIG_FAILED;
   13290:	2310      	movs	r3, #16
   13292:	e012      	b.n	132ba <gsm_config_module+0xc6>
											}
										}
										else
										{
											return GSM_ERROR_CONFIG_FAILED;
   13294:	2310      	movs	r3, #16
   13296:	e010      	b.n	132ba <gsm_config_module+0xc6>
										}
									}
									else
									{
										return GSM_ERROR_CONFIG_FAILED;
   13298:	2310      	movs	r3, #16
   1329a:	e00e      	b.n	132ba <gsm_config_module+0xc6>
									}
								}
								else
								{
									return GSM_ERROR_CONFIG_FAILED;
   1329c:	2310      	movs	r3, #16
   1329e:	e00c      	b.n	132ba <gsm_config_module+0xc6>
								}
							}
							else
							{
								return GSM_ERROR_CONFIG_FAILED;
   132a0:	2310      	movs	r3, #16
   132a2:	e00a      	b.n	132ba <gsm_config_module+0xc6>
							}
						}
						else
						{
							return GSM_ERROR_CONFIG_FAILED;
   132a4:	2310      	movs	r3, #16
   132a6:	e008      	b.n	132ba <gsm_config_module+0xc6>
						}
					}
					else
					{
						return GSM_ERROR_CONFIG_FAILED;
   132a8:	2310      	movs	r3, #16
   132aa:	e006      	b.n	132ba <gsm_config_module+0xc6>
					}
				}
			}
			else
			{
				return GSM_ERROR_CONFIG_FAILED;
   132ac:	2310      	movs	r3, #16
   132ae:	e004      	b.n	132ba <gsm_config_module+0xc6>
			}
		}
		else
		{
			return GSM_ERROR_CONFIG_FAILED;
   132b0:	2310      	movs	r3, #16
   132b2:	e002      	b.n	132ba <gsm_config_module+0xc6>
		}
	}
	else
	{
		return GSM_ERROR_CONFIG_FAILED;
   132b4:	2310      	movs	r3, #16
   132b6:	e000      	b.n	132ba <gsm_config_module+0xc6>
	}
	
	return GSM_ERROR_CONFIG_FAILED;
   132b8:	2310      	movs	r3, #16
}
   132ba:	0018      	movs	r0, r3
   132bc:	46bd      	mov	sp, r7
   132be:	bd80      	pop	{r7, pc}
   132c0:	000124d9 	.word	0x000124d9
   132c4:	000126e5 	.word	0x000126e5
   132c8:	0001fad9 	.word	0x0001fad9
   132cc:	000125c5 	.word	0x000125c5
   132d0:	00012715 	.word	0x00012715
   132d4:	00012571 	.word	0x00012571
   132d8:	00012655 	.word	0x00012655
   132dc:	00012685 	.word	0x00012685
   132e0:	000126b5 	.word	0x000126b5
   132e4:	00012745 	.word	0x00012745
   132e8:	00012775 	.word	0x00012775
   132ec:	000129bd 	.word	0x000129bd
   132f0:	00012e01 	.word	0x00012e01
   132f4:	00012e31 	.word	0x00012e31
   132f8:	00012625 	.word	0x00012625

000132fc <gsm_read_response_line>:

bool gsm_read_response_line(char *buffer,uint8_t length)
{
   132fc:	b580      	push	{r7, lr}
   132fe:	b084      	sub	sp, #16
   13300:	af00      	add	r7, sp, #0
   13302:	6078      	str	r0, [r7, #4]
   13304:	000a      	movs	r2, r1
   13306:	1cfb      	adds	r3, r7, #3
   13308:	701a      	strb	r2, [r3, #0]
	bool line_non_empty = false;
   1330a:	230f      	movs	r3, #15
   1330c:	18fb      	adds	r3, r7, r3
   1330e:	2200      	movs	r2, #0
   13310:	701a      	strb	r2, [r3, #0]
	while (length > 1)
   13312:	e026      	b.n	13362 <gsm_read_response_line+0x66>
	{
		
		uint8_t curr_rx;
		/* Fetch next buffered character received from the module */
		if (xQueueReceive(gsm_rx_queue, &curr_rx, 500 / portTICK_PERIOD_MS) == pdFALSE)
   13314:	4b1b      	ldr	r3, [pc, #108]	; (13384 <gsm_read_response_line+0x88>)
   13316:	6818      	ldr	r0, [r3, #0]
   13318:	23fa      	movs	r3, #250	; 0xfa
   1331a:	005a      	lsls	r2, r3, #1
   1331c:	230e      	movs	r3, #14
   1331e:	18fb      	adds	r3, r7, r3
   13320:	0019      	movs	r1, r3
   13322:	4b19      	ldr	r3, [pc, #100]	; (13388 <gsm_read_response_line+0x8c>)
   13324:	4798      	blx	r3
   13326:	1e03      	subs	r3, r0, #0
   13328:	d101      	bne.n	1332e <gsm_read_response_line+0x32>
		{
			return false;
   1332a:	2300      	movs	r3, #0
   1332c:	e025      	b.n	1337a <gsm_read_response_line+0x7e>
		}

		if (curr_rx == '\n')
   1332e:	230e      	movs	r3, #14
   13330:	18fb      	adds	r3, r7, r3
   13332:	781b      	ldrb	r3, [r3, #0]
   13334:	2b0a      	cmp	r3, #10
   13336:	d014      	beq.n	13362 <gsm_read_response_line+0x66>
		{
			/* Ignore newline characters */
		}
		else if (curr_rx != '\r')
   13338:	230e      	movs	r3, #14
   1333a:	18fb      	adds	r3, r7, r3
   1333c:	781b      	ldrb	r3, [r3, #0]
   1333e:	2b0d      	cmp	r3, #13
   13340:	d014      	beq.n	1336c <gsm_read_response_line+0x70>
		{
			/* Non end-of-command CR character */
			*(buffer++) = curr_rx;
   13342:	687b      	ldr	r3, [r7, #4]
   13344:	1c5a      	adds	r2, r3, #1
   13346:	607a      	str	r2, [r7, #4]
   13348:	220e      	movs	r2, #14
   1334a:	18ba      	adds	r2, r7, r2
   1334c:	7812      	ldrb	r2, [r2, #0]
   1334e:	701a      	strb	r2, [r3, #0]
			length--;
   13350:	1cfb      	adds	r3, r7, #3
   13352:	781a      	ldrb	r2, [r3, #0]
   13354:	1cfb      	adds	r3, r7, #3
   13356:	3a01      	subs	r2, #1
   13358:	701a      	strb	r2, [r3, #0]
			line_non_empty = true;
   1335a:	230f      	movs	r3, #15
   1335c:	18fb      	adds	r3, r7, r3
   1335e:	2201      	movs	r2, #1
   13360:	701a      	strb	r2, [r3, #0]
	while (length > 1)
   13362:	1cfb      	adds	r3, r7, #3
   13364:	781b      	ldrb	r3, [r3, #0]
   13366:	2b01      	cmp	r3, #1
   13368:	d8d4      	bhi.n	13314 <gsm_read_response_line+0x18>
   1336a:	e000      	b.n	1336e <gsm_read_response_line+0x72>
		}
		else
		{
			/* End of command, finished reading line */
			break;
   1336c:	46c0      	nop			; (mov r8, r8)
		}
	}

	*(buffer) = '\0';
   1336e:	687b      	ldr	r3, [r7, #4]
   13370:	2200      	movs	r2, #0
   13372:	701a      	strb	r2, [r3, #0]
	return line_non_empty;
   13374:	230f      	movs	r3, #15
   13376:	18fb      	adds	r3, r7, r3
   13378:	781b      	ldrb	r3, [r3, #0]
}
   1337a:	0018      	movs	r0, r3
   1337c:	46bd      	mov	sp, r7
   1337e:	b004      	add	sp, #16
   13380:	bd80      	pop	{r7, pc}
   13382:	46c0      	nop			; (mov r8, r8)
   13384:	20000220 	.word	0x20000220
   13388:	0001f031 	.word	0x0001f031

0001338c <gsm_responseLine_isNew_SMS_Received>:

char gsm_responseLine_isNew_SMS_Received(char *response)
{
   1338c:	b580      	push	{r7, lr}
   1338e:	b084      	sub	sp, #16
   13390:	af00      	add	r7, sp, #0
   13392:	6078      	str	r0, [r7, #4]
	
	char sms_index = 0;
   13394:	230f      	movs	r3, #15
   13396:	18fb      	adds	r3, r7, r3
   13398:	2200      	movs	r2, #0
   1339a:	701a      	strb	r2, [r3, #0]
	
	if (strstr(response,"+CMTI:"))
   1339c:	4a17      	ldr	r2, [pc, #92]	; (133fc <gsm_responseLine_isNew_SMS_Received+0x70>)
   1339e:	687b      	ldr	r3, [r7, #4]
   133a0:	0011      	movs	r1, r2
   133a2:	0018      	movs	r0, r3
   133a4:	4b16      	ldr	r3, [pc, #88]	; (13400 <gsm_responseLine_isNew_SMS_Received+0x74>)
   133a6:	4798      	blx	r3
   133a8:	1e03      	subs	r3, r0, #0
   133aa:	d01b      	beq.n	133e4 <gsm_responseLine_isNew_SMS_Received+0x58>
	{
		char *ptr_tocken;
		ptr_tocken = strtok(response,",");
   133ac:	4a15      	ldr	r2, [pc, #84]	; (13404 <gsm_responseLine_isNew_SMS_Received+0x78>)
   133ae:	687b      	ldr	r3, [r7, #4]
   133b0:	0011      	movs	r1, r2
   133b2:	0018      	movs	r0, r3
   133b4:	4b14      	ldr	r3, [pc, #80]	; (13408 <gsm_responseLine_isNew_SMS_Received+0x7c>)
   133b6:	4798      	blx	r3
   133b8:	0003      	movs	r3, r0
   133ba:	60bb      	str	r3, [r7, #8]
		ptr_tocken = strtok(NULL,",");
   133bc:	4b11      	ldr	r3, [pc, #68]	; (13404 <gsm_responseLine_isNew_SMS_Received+0x78>)
   133be:	0019      	movs	r1, r3
   133c0:	2000      	movs	r0, #0
   133c2:	4b11      	ldr	r3, [pc, #68]	; (13408 <gsm_responseLine_isNew_SMS_Received+0x7c>)
   133c4:	4798      	blx	r3
   133c6:	0003      	movs	r3, r0
   133c8:	60bb      	str	r3, [r7, #8]
		
		RemoveSpaces(ptr_tocken);
   133ca:	68bb      	ldr	r3, [r7, #8]
   133cc:	0018      	movs	r0, r3
   133ce:	4b0f      	ldr	r3, [pc, #60]	; (1340c <gsm_responseLine_isNew_SMS_Received+0x80>)
   133d0:	4798      	blx	r3
		
		sms_index = atoi(ptr_tocken);
   133d2:	68bb      	ldr	r3, [r7, #8]
   133d4:	0018      	movs	r0, r3
   133d6:	4b0e      	ldr	r3, [pc, #56]	; (13410 <gsm_responseLine_isNew_SMS_Received+0x84>)
   133d8:	4798      	blx	r3
   133da:	0002      	movs	r2, r0
   133dc:	230f      	movs	r3, #15
   133de:	18fb      	adds	r3, r7, r3
   133e0:	701a      	strb	r2, [r3, #0]
   133e2:	e003      	b.n	133ec <gsm_responseLine_isNew_SMS_Received+0x60>
		
	}
	else
	{
		sms_index =  0;
   133e4:	230f      	movs	r3, #15
   133e6:	18fb      	adds	r3, r7, r3
   133e8:	2200      	movs	r2, #0
   133ea:	701a      	strb	r2, [r3, #0]
	}
	
	return sms_index;
   133ec:	230f      	movs	r3, #15
   133ee:	18fb      	adds	r3, r7, r3
   133f0:	781b      	ldrb	r3, [r3, #0]
}
   133f2:	0018      	movs	r0, r3
   133f4:	46bd      	mov	sp, r7
   133f6:	b004      	add	sp, #16
   133f8:	bd80      	pop	{r7, pc}
   133fa:	46c0      	nop			; (mov r8, r8)
   133fc:	00029994 	.word	0x00029994
   13400:	00028cbb 	.word	0x00028cbb
   13404:	000297cc 	.word	0x000297cc
   13408:	00028ced 	.word	0x00028ced
   1340c:	00012979 	.word	0x00012979
   13410:	000288e1 	.word	0x000288e1

00013414 <gsm_responseLine_isRinging>:

bool gsm_responseLine_isRinging(char *response)
{
   13414:	b580      	push	{r7, lr}
   13416:	b082      	sub	sp, #8
   13418:	af00      	add	r7, sp, #0
   1341a:	6078      	str	r0, [r7, #4]
	if (strstr(response,"RING"))
   1341c:	4a07      	ldr	r2, [pc, #28]	; (1343c <gsm_responseLine_isRinging+0x28>)
   1341e:	687b      	ldr	r3, [r7, #4]
   13420:	0011      	movs	r1, r2
   13422:	0018      	movs	r0, r3
   13424:	4b06      	ldr	r3, [pc, #24]	; (13440 <gsm_responseLine_isRinging+0x2c>)
   13426:	4798      	blx	r3
   13428:	1e03      	subs	r3, r0, #0
   1342a:	d001      	beq.n	13430 <gsm_responseLine_isRinging+0x1c>
	{
		return true;
   1342c:	2301      	movs	r3, #1
   1342e:	e000      	b.n	13432 <gsm_responseLine_isRinging+0x1e>
	}
	else
	{
		return false;
   13430:	2300      	movs	r3, #0
	}
}
   13432:	0018      	movs	r0, r3
   13434:	46bd      	mov	sp, r7
   13436:	b002      	add	sp, #8
   13438:	bd80      	pop	{r7, pc}
   1343a:	46c0      	nop			; (mov r8, r8)
   1343c:	0002999c 	.word	0x0002999c
   13440:	00028cbb 	.word	0x00028cbb

00013444 <gsm_responseLine_get_IncommingCallNo>:

bool gsm_responseLine_get_IncommingCallNo(char *response,char *phone_number)
{
   13444:	b580      	push	{r7, lr}
   13446:	b084      	sub	sp, #16
   13448:	af00      	add	r7, sp, #0
   1344a:	6078      	str	r0, [r7, #4]
   1344c:	6039      	str	r1, [r7, #0]
	if(strstr(response,"+CLIP"))
   1344e:	4a1e      	ldr	r2, [pc, #120]	; (134c8 <gsm_responseLine_get_IncommingCallNo+0x84>)
   13450:	687b      	ldr	r3, [r7, #4]
   13452:	0011      	movs	r1, r2
   13454:	0018      	movs	r0, r3
   13456:	4b1d      	ldr	r3, [pc, #116]	; (134cc <gsm_responseLine_get_IncommingCallNo+0x88>)
   13458:	4798      	blx	r3
   1345a:	1e03      	subs	r3, r0, #0
   1345c:	d02e      	beq.n	134bc <gsm_responseLine_get_IncommingCallNo+0x78>
	{
		char *ptr_tocken;
		ptr_tocken = strtok(response,":");
   1345e:	4a1c      	ldr	r2, [pc, #112]	; (134d0 <gsm_responseLine_get_IncommingCallNo+0x8c>)
   13460:	687b      	ldr	r3, [r7, #4]
   13462:	0011      	movs	r1, r2
   13464:	0018      	movs	r0, r3
   13466:	4b1b      	ldr	r3, [pc, #108]	; (134d4 <gsm_responseLine_get_IncommingCallNo+0x90>)
   13468:	4798      	blx	r3
   1346a:	0003      	movs	r3, r0
   1346c:	60fb      	str	r3, [r7, #12]
		ptr_tocken = strtok(NULL,",");
   1346e:	4b1a      	ldr	r3, [pc, #104]	; (134d8 <gsm_responseLine_get_IncommingCallNo+0x94>)
   13470:	0019      	movs	r1, r3
   13472:	2000      	movs	r0, #0
   13474:	4b17      	ldr	r3, [pc, #92]	; (134d4 <gsm_responseLine_get_IncommingCallNo+0x90>)
   13476:	4798      	blx	r3
   13478:	0003      	movs	r3, r0
   1347a:	60fb      	str	r3, [r7, #12]
		ptr_tocken = strtok(ptr_tocken,"\"");
   1347c:	4a17      	ldr	r2, [pc, #92]	; (134dc <gsm_responseLine_get_IncommingCallNo+0x98>)
   1347e:	68fb      	ldr	r3, [r7, #12]
   13480:	0011      	movs	r1, r2
   13482:	0018      	movs	r0, r3
   13484:	4b13      	ldr	r3, [pc, #76]	; (134d4 <gsm_responseLine_get_IncommingCallNo+0x90>)
   13486:	4798      	blx	r3
   13488:	0003      	movs	r3, r0
   1348a:	60fb      	str	r3, [r7, #12]
		ptr_tocken = strtok(NULL,"\"");
   1348c:	4b13      	ldr	r3, [pc, #76]	; (134dc <gsm_responseLine_get_IncommingCallNo+0x98>)
   1348e:	0019      	movs	r1, r3
   13490:	2000      	movs	r0, #0
   13492:	4b10      	ldr	r3, [pc, #64]	; (134d4 <gsm_responseLine_get_IncommingCallNo+0x90>)
   13494:	4798      	blx	r3
   13496:	0003      	movs	r3, r0
   13498:	60fb      	str	r3, [r7, #12]
		
		if (!strstr(ptr_tocken,"+"))
   1349a:	68fb      	ldr	r3, [r7, #12]
   1349c:	212b      	movs	r1, #43	; 0x2b
   1349e:	0018      	movs	r0, r3
   134a0:	4b0f      	ldr	r3, [pc, #60]	; (134e0 <gsm_responseLine_get_IncommingCallNo+0x9c>)
   134a2:	4798      	blx	r3
   134a4:	1e03      	subs	r3, r0, #0
   134a6:	d101      	bne.n	134ac <gsm_responseLine_get_IncommingCallNo+0x68>
		{
			return false;
   134a8:	2300      	movs	r3, #0
   134aa:	e008      	b.n	134be <gsm_responseLine_get_IncommingCallNo+0x7a>
		}
		strcpy(phone_number, (char *)(ptr_tocken));
   134ac:	68fa      	ldr	r2, [r7, #12]
   134ae:	683b      	ldr	r3, [r7, #0]
   134b0:	0011      	movs	r1, r2
   134b2:	0018      	movs	r0, r3
   134b4:	4b0b      	ldr	r3, [pc, #44]	; (134e4 <gsm_responseLine_get_IncommingCallNo+0xa0>)
   134b6:	4798      	blx	r3
		return true;
   134b8:	2301      	movs	r3, #1
   134ba:	e000      	b.n	134be <gsm_responseLine_get_IncommingCallNo+0x7a>
	}
	else
	{
		return false;
   134bc:	2300      	movs	r3, #0
	}
}
   134be:	0018      	movs	r0, r3
   134c0:	46bd      	mov	sp, r7
   134c2:	b004      	add	sp, #16
   134c4:	bd80      	pop	{r7, pc}
   134c6:	46c0      	nop			; (mov r8, r8)
   134c8:	000299a4 	.word	0x000299a4
   134cc:	00028cbb 	.word	0x00028cbb
   134d0:	000297c8 	.word	0x000297c8
   134d4:	00028ced 	.word	0x00028ced
   134d8:	000297cc 	.word	0x000297cc
   134dc:	00029988 	.word	0x00029988
   134e0:	00028c5f 	.word	0x00028c5f
   134e4:	00028c7b 	.word	0x00028c7b

000134e8 <gsm_responseLine_isCallCut>:

bool gsm_responseLine_isCallCut(char *response)
{
   134e8:	b580      	push	{r7, lr}
   134ea:	b082      	sub	sp, #8
   134ec:	af00      	add	r7, sp, #0
   134ee:	6078      	str	r0, [r7, #4]
	if (strstr(response,"NO CARRIER"))
   134f0:	4a16      	ldr	r2, [pc, #88]	; (1354c <gsm_responseLine_isCallCut+0x64>)
   134f2:	687b      	ldr	r3, [r7, #4]
   134f4:	0011      	movs	r1, r2
   134f6:	0018      	movs	r0, r3
   134f8:	4b15      	ldr	r3, [pc, #84]	; (13550 <gsm_responseLine_isCallCut+0x68>)
   134fa:	4798      	blx	r3
   134fc:	1e03      	subs	r3, r0, #0
   134fe:	d001      	beq.n	13504 <gsm_responseLine_isCallCut+0x1c>
	{
		return true;
   13500:	2301      	movs	r3, #1
   13502:	e01e      	b.n	13542 <gsm_responseLine_isCallCut+0x5a>
	}
	else if (strstr(response,"BUSY"))
   13504:	4a13      	ldr	r2, [pc, #76]	; (13554 <gsm_responseLine_isCallCut+0x6c>)
   13506:	687b      	ldr	r3, [r7, #4]
   13508:	0011      	movs	r1, r2
   1350a:	0018      	movs	r0, r3
   1350c:	4b10      	ldr	r3, [pc, #64]	; (13550 <gsm_responseLine_isCallCut+0x68>)
   1350e:	4798      	blx	r3
   13510:	1e03      	subs	r3, r0, #0
   13512:	d001      	beq.n	13518 <gsm_responseLine_isCallCut+0x30>
	{
		return true;
   13514:	2301      	movs	r3, #1
   13516:	e014      	b.n	13542 <gsm_responseLine_isCallCut+0x5a>
	}
	else if (strstr(response,"NO ANSWER"))
   13518:	4a0f      	ldr	r2, [pc, #60]	; (13558 <gsm_responseLine_isCallCut+0x70>)
   1351a:	687b      	ldr	r3, [r7, #4]
   1351c:	0011      	movs	r1, r2
   1351e:	0018      	movs	r0, r3
   13520:	4b0b      	ldr	r3, [pc, #44]	; (13550 <gsm_responseLine_isCallCut+0x68>)
   13522:	4798      	blx	r3
   13524:	1e03      	subs	r3, r0, #0
   13526:	d001      	beq.n	1352c <gsm_responseLine_isCallCut+0x44>
	{
		return true;
   13528:	2301      	movs	r3, #1
   1352a:	e00a      	b.n	13542 <gsm_responseLine_isCallCut+0x5a>
	}
	else if (strstr(response,"ERROR"))
   1352c:	4a0b      	ldr	r2, [pc, #44]	; (1355c <gsm_responseLine_isCallCut+0x74>)
   1352e:	687b      	ldr	r3, [r7, #4]
   13530:	0011      	movs	r1, r2
   13532:	0018      	movs	r0, r3
   13534:	4b06      	ldr	r3, [pc, #24]	; (13550 <gsm_responseLine_isCallCut+0x68>)
   13536:	4798      	blx	r3
   13538:	1e03      	subs	r3, r0, #0
   1353a:	d001      	beq.n	13540 <gsm_responseLine_isCallCut+0x58>
	{
		return true;
   1353c:	2301      	movs	r3, #1
   1353e:	e000      	b.n	13542 <gsm_responseLine_isCallCut+0x5a>
	}
	else
	{
		return false;
   13540:	2300      	movs	r3, #0
	}
}
   13542:	0018      	movs	r0, r3
   13544:	46bd      	mov	sp, r7
   13546:	b002      	add	sp, #8
   13548:	bd80      	pop	{r7, pc}
   1354a:	46c0      	nop			; (mov r8, r8)
   1354c:	000299ac 	.word	0x000299ac
   13550:	00028cbb 	.word	0x00028cbb
   13554:	000299b8 	.word	0x000299b8
   13558:	000299c0 	.word	0x000299c0
   1355c:	000296a8 	.word	0x000296a8

00013560 <gsm_responseLine_isNew_DTMF_Command_Received>:

bool gsm_responseLine_isNew_DTMF_Command_Received(char *response)
{
   13560:	b580      	push	{r7, lr}
   13562:	b082      	sub	sp, #8
   13564:	af00      	add	r7, sp, #0
   13566:	6078      	str	r0, [r7, #4]
	if (strstr(response,"+DTMF:"))
   13568:	4a07      	ldr	r2, [pc, #28]	; (13588 <gsm_responseLine_isNew_DTMF_Command_Received+0x28>)
   1356a:	687b      	ldr	r3, [r7, #4]
   1356c:	0011      	movs	r1, r2
   1356e:	0018      	movs	r0, r3
   13570:	4b06      	ldr	r3, [pc, #24]	; (1358c <gsm_responseLine_isNew_DTMF_Command_Received+0x2c>)
   13572:	4798      	blx	r3
   13574:	1e03      	subs	r3, r0, #0
   13576:	d001      	beq.n	1357c <gsm_responseLine_isNew_DTMF_Command_Received+0x1c>
	{
		return true;
   13578:	2301      	movs	r3, #1
   1357a:	e000      	b.n	1357e <gsm_responseLine_isNew_DTMF_Command_Received+0x1e>
	}
	else
	{
		return false;
   1357c:	2300      	movs	r3, #0
	}
}
   1357e:	0018      	movs	r0, r3
   13580:	46bd      	mov	sp, r7
   13582:	b002      	add	sp, #8
   13584:	bd80      	pop	{r7, pc}
   13586:	46c0      	nop			; (mov r8, r8)
   13588:	000299cc 	.word	0x000299cc
   1358c:	00028cbb 	.word	0x00028cbb

00013590 <gsm_responseLine_is_StopSound_Received>:

bool gsm_responseLine_is_StopSound_Received(char *response)
{
   13590:	b580      	push	{r7, lr}
   13592:	b082      	sub	sp, #8
   13594:	af00      	add	r7, sp, #0
   13596:	6078      	str	r0, [r7, #4]
	if (strstr(response,"+CREC: 0"))
   13598:	4a07      	ldr	r2, [pc, #28]	; (135b8 <gsm_responseLine_is_StopSound_Received+0x28>)
   1359a:	687b      	ldr	r3, [r7, #4]
   1359c:	0011      	movs	r1, r2
   1359e:	0018      	movs	r0, r3
   135a0:	4b06      	ldr	r3, [pc, #24]	; (135bc <gsm_responseLine_is_StopSound_Received+0x2c>)
   135a2:	4798      	blx	r3
   135a4:	1e03      	subs	r3, r0, #0
   135a6:	d001      	beq.n	135ac <gsm_responseLine_is_StopSound_Received+0x1c>
	{
		return true;
   135a8:	2301      	movs	r3, #1
   135aa:	e000      	b.n	135ae <gsm_responseLine_is_StopSound_Received+0x1e>
	}
	else
	{
		return false;
   135ac:	2300      	movs	r3, #0
	}
}
   135ae:	0018      	movs	r0, r3
   135b0:	46bd      	mov	sp, r7
   135b2:	b002      	add	sp, #8
   135b4:	bd80      	pop	{r7, pc}
   135b6:	46c0      	nop			; (mov r8, r8)
   135b8:	000299d4 	.word	0x000299d4
   135bc:	00028cbb 	.word	0x00028cbb

000135c0 <system_pinmux_get_group_from_gpio_pin>:
{
   135c0:	b580      	push	{r7, lr}
   135c2:	b084      	sub	sp, #16
   135c4:	af00      	add	r7, sp, #0
   135c6:	0002      	movs	r2, r0
   135c8:	1dfb      	adds	r3, r7, #7
   135ca:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   135cc:	230f      	movs	r3, #15
   135ce:	18fb      	adds	r3, r7, r3
   135d0:	1dfa      	adds	r2, r7, #7
   135d2:	7812      	ldrb	r2, [r2, #0]
   135d4:	09d2      	lsrs	r2, r2, #7
   135d6:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   135d8:	230e      	movs	r3, #14
   135da:	18fb      	adds	r3, r7, r3
   135dc:	1dfa      	adds	r2, r7, #7
   135de:	7812      	ldrb	r2, [r2, #0]
   135e0:	0952      	lsrs	r2, r2, #5
   135e2:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   135e4:	4b0d      	ldr	r3, [pc, #52]	; (1361c <system_pinmux_get_group_from_gpio_pin+0x5c>)
   135e6:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   135e8:	230f      	movs	r3, #15
   135ea:	18fb      	adds	r3, r7, r3
   135ec:	781b      	ldrb	r3, [r3, #0]
   135ee:	2b00      	cmp	r3, #0
   135f0:	d10f      	bne.n	13612 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   135f2:	230f      	movs	r3, #15
   135f4:	18fb      	adds	r3, r7, r3
   135f6:	781b      	ldrb	r3, [r3, #0]
   135f8:	009b      	lsls	r3, r3, #2
   135fa:	2210      	movs	r2, #16
   135fc:	4694      	mov	ip, r2
   135fe:	44bc      	add	ip, r7
   13600:	4463      	add	r3, ip
   13602:	3b08      	subs	r3, #8
   13604:	681a      	ldr	r2, [r3, #0]
   13606:	230e      	movs	r3, #14
   13608:	18fb      	adds	r3, r7, r3
   1360a:	781b      	ldrb	r3, [r3, #0]
   1360c:	01db      	lsls	r3, r3, #7
   1360e:	18d3      	adds	r3, r2, r3
   13610:	e000      	b.n	13614 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   13612:	2300      	movs	r3, #0
}
   13614:	0018      	movs	r0, r3
   13616:	46bd      	mov	sp, r7
   13618:	b004      	add	sp, #16
   1361a:	bd80      	pop	{r7, pc}
   1361c:	41004400 	.word	0x41004400

00013620 <port_get_group_from_gpio_pin>:
{
   13620:	b580      	push	{r7, lr}
   13622:	b082      	sub	sp, #8
   13624:	af00      	add	r7, sp, #0
   13626:	0002      	movs	r2, r0
   13628:	1dfb      	adds	r3, r7, #7
   1362a:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   1362c:	1dfb      	adds	r3, r7, #7
   1362e:	781b      	ldrb	r3, [r3, #0]
   13630:	0018      	movs	r0, r3
   13632:	4b03      	ldr	r3, [pc, #12]	; (13640 <port_get_group_from_gpio_pin+0x20>)
   13634:	4798      	blx	r3
   13636:	0003      	movs	r3, r0
}
   13638:	0018      	movs	r0, r3
   1363a:	46bd      	mov	sp, r7
   1363c:	b002      	add	sp, #8
   1363e:	bd80      	pop	{r7, pc}
   13640:	000135c1 	.word	0x000135c1

00013644 <port_get_config_defaults>:
{
   13644:	b580      	push	{r7, lr}
   13646:	b082      	sub	sp, #8
   13648:	af00      	add	r7, sp, #0
   1364a:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
   1364c:	687b      	ldr	r3, [r7, #4]
   1364e:	2200      	movs	r2, #0
   13650:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   13652:	687b      	ldr	r3, [r7, #4]
   13654:	2201      	movs	r2, #1
   13656:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
   13658:	687b      	ldr	r3, [r7, #4]
   1365a:	2200      	movs	r2, #0
   1365c:	709a      	strb	r2, [r3, #2]
}
   1365e:	46c0      	nop			; (mov r8, r8)
   13660:	46bd      	mov	sp, r7
   13662:	b002      	add	sp, #8
   13664:	bd80      	pop	{r7, pc}
	...

00013668 <port_pin_set_output_level>:
{
   13668:	b580      	push	{r7, lr}
   1366a:	b084      	sub	sp, #16
   1366c:	af00      	add	r7, sp, #0
   1366e:	0002      	movs	r2, r0
   13670:	1dfb      	adds	r3, r7, #7
   13672:	701a      	strb	r2, [r3, #0]
   13674:	1dbb      	adds	r3, r7, #6
   13676:	1c0a      	adds	r2, r1, #0
   13678:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   1367a:	1dfb      	adds	r3, r7, #7
   1367c:	781b      	ldrb	r3, [r3, #0]
   1367e:	0018      	movs	r0, r3
   13680:	4b0d      	ldr	r3, [pc, #52]	; (136b8 <port_pin_set_output_level+0x50>)
   13682:	4798      	blx	r3
   13684:	0003      	movs	r3, r0
   13686:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   13688:	1dfb      	adds	r3, r7, #7
   1368a:	781b      	ldrb	r3, [r3, #0]
   1368c:	221f      	movs	r2, #31
   1368e:	4013      	ands	r3, r2
   13690:	2201      	movs	r2, #1
   13692:	409a      	lsls	r2, r3
   13694:	0013      	movs	r3, r2
   13696:	60bb      	str	r3, [r7, #8]
	if (level) {
   13698:	1dbb      	adds	r3, r7, #6
   1369a:	781b      	ldrb	r3, [r3, #0]
   1369c:	2b00      	cmp	r3, #0
   1369e:	d003      	beq.n	136a8 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   136a0:	68fb      	ldr	r3, [r7, #12]
   136a2:	68ba      	ldr	r2, [r7, #8]
   136a4:	619a      	str	r2, [r3, #24]
}
   136a6:	e002      	b.n	136ae <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   136a8:	68fb      	ldr	r3, [r7, #12]
   136aa:	68ba      	ldr	r2, [r7, #8]
   136ac:	615a      	str	r2, [r3, #20]
}
   136ae:	46c0      	nop			; (mov r8, r8)
   136b0:	46bd      	mov	sp, r7
   136b2:	b004      	add	sp, #16
   136b4:	bd80      	pop	{r7, pc}
   136b6:	46c0      	nop			; (mov r8, r8)
   136b8:	00013621 	.word	0x00013621

000136bc <LCD_init>:
#include <asf.h>
#include "lcd_driver.h"


void LCD_init()
{
   136bc:	b5f0      	push	{r4, r5, r6, r7, lr}
   136be:	b08b      	sub	sp, #44	; 0x2c
   136c0:	af00      	add	r7, sp, #0
	uint8_t cols = LCD_COLS;
   136c2:	230b      	movs	r3, #11
   136c4:	2218      	movs	r2, #24
   136c6:	4694      	mov	ip, r2
   136c8:	44bc      	add	ip, r7
   136ca:	4463      	add	r3, ip
   136cc:	2210      	movs	r2, #16
   136ce:	701a      	strb	r2, [r3, #0]
	uint8_t lines = LCD_ROWS;
   136d0:	230a      	movs	r3, #10
   136d2:	2218      	movs	r2, #24
   136d4:	4694      	mov	ip, r2
   136d6:	44bc      	add	ip, r7
   136d8:	4463      	add	r3, ip
   136da:	2202      	movs	r2, #2
   136dc:	701a      	strb	r2, [r3, #0]
	delay_init();
   136de:	4b90      	ldr	r3, [pc, #576]	; (13920 <LCD_init+0x264>)
   136e0:	4798      	blx	r3
	_rs_pin     = LCD_RS_PIN;
   136e2:	4b90      	ldr	r3, [pc, #576]	; (13924 <LCD_init+0x268>)
   136e4:	223f      	movs	r2, #63	; 0x3f
   136e6:	701a      	strb	r2, [r3, #0]
	_enable_pin = LCD_EN_PIN;
   136e8:	4b8f      	ldr	r3, [pc, #572]	; (13928 <LCD_init+0x26c>)
   136ea:	223e      	movs	r2, #62	; 0x3e
   136ec:	701a      	strb	r2, [r3, #0]
	
	_data_pins[0] = LCD_DATA_LINE_D4_PIN;
   136ee:	4b8f      	ldr	r3, [pc, #572]	; (1392c <LCD_init+0x270>)
   136f0:	2221      	movs	r2, #33	; 0x21
   136f2:	701a      	strb	r2, [r3, #0]
	_data_pins[1] = LCD_DATA_LINE_D5_PIN;
   136f4:	4b8d      	ldr	r3, [pc, #564]	; (1392c <LCD_init+0x270>)
   136f6:	2220      	movs	r2, #32
   136f8:	705a      	strb	r2, [r3, #1]
	_data_pins[2] = LCD_DATA_LINE_D6_PIN;
   136fa:	4b8c      	ldr	r3, [pc, #560]	; (1392c <LCD_init+0x270>)
   136fc:	2223      	movs	r2, #35	; 0x23
   136fe:	709a      	strb	r2, [r3, #2]
	_data_pins[3] = LCD_DATA_LINE_D7_PIN;
   13700:	4b8a      	ldr	r3, [pc, #552]	; (1392c <LCD_init+0x270>)
   13702:	2222      	movs	r2, #34	; 0x22
   13704:	70da      	strb	r2, [r3, #3]

	_displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
   13706:	4b8a      	ldr	r3, [pc, #552]	; (13930 <LCD_init+0x274>)
   13708:	2200      	movs	r2, #0
   1370a:	701a      	strb	r2, [r3, #0]
	
	if (lines > 1)
   1370c:	230a      	movs	r3, #10
   1370e:	2218      	movs	r2, #24
   13710:	4694      	mov	ip, r2
   13712:	44bc      	add	ip, r7
   13714:	4463      	add	r3, ip
   13716:	781b      	ldrb	r3, [r3, #0]
   13718:	2b01      	cmp	r3, #1
   1371a:	d906      	bls.n	1372a <LCD_init+0x6e>
	{
		_displayfunction |= LCD_2LINE;
   1371c:	4b84      	ldr	r3, [pc, #528]	; (13930 <LCD_init+0x274>)
   1371e:	781b      	ldrb	r3, [r3, #0]
   13720:	2208      	movs	r2, #8
   13722:	4313      	orrs	r3, r2
   13724:	b2da      	uxtb	r2, r3
   13726:	4b82      	ldr	r3, [pc, #520]	; (13930 <LCD_init+0x274>)
   13728:	701a      	strb	r2, [r3, #0]
	}
	_numlines = lines;
   1372a:	4b82      	ldr	r3, [pc, #520]	; (13934 <LCD_init+0x278>)
   1372c:	220a      	movs	r2, #10
   1372e:	2118      	movs	r1, #24
   13730:	468c      	mov	ip, r1
   13732:	44bc      	add	ip, r7
   13734:	4462      	add	r2, ip
   13736:	7812      	ldrb	r2, [r2, #0]
   13738:	701a      	strb	r2, [r3, #0]
	LCD_setRowOffsets(0x00, 0x40, 0x00 + cols, 0x40 + cols);
   1373a:	230b      	movs	r3, #11
   1373c:	2218      	movs	r2, #24
   1373e:	4694      	mov	ip, r2
   13740:	44bc      	add	ip, r7
   13742:	4463      	add	r3, ip
   13744:	781a      	ldrb	r2, [r3, #0]
   13746:	230b      	movs	r3, #11
   13748:	2118      	movs	r1, #24
   1374a:	468c      	mov	ip, r1
   1374c:	44bc      	add	ip, r7
   1374e:	4463      	add	r3, ip
   13750:	781b      	ldrb	r3, [r3, #0]
   13752:	3340      	adds	r3, #64	; 0x40
   13754:	2140      	movs	r1, #64	; 0x40
   13756:	2000      	movs	r0, #0
   13758:	4c77      	ldr	r4, [pc, #476]	; (13938 <LCD_init+0x27c>)
   1375a:	47a0      	blx	r4
	struct port_config config_port_pin;
	port_get_config_defaults(&config_port_pin);
   1375c:	231c      	movs	r3, #28
   1375e:	18fb      	adds	r3, r7, r3
   13760:	0018      	movs	r0, r3
   13762:	4b76      	ldr	r3, [pc, #472]	; (1393c <LCD_init+0x280>)
   13764:	4798      	blx	r3
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
   13766:	231c      	movs	r3, #28
   13768:	18fb      	adds	r3, r7, r3
   1376a:	2201      	movs	r2, #1
   1376c:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(_rs_pin,&config_port_pin);
   1376e:	4b6d      	ldr	r3, [pc, #436]	; (13924 <LCD_init+0x268>)
   13770:	781b      	ldrb	r3, [r3, #0]
   13772:	221c      	movs	r2, #28
   13774:	18ba      	adds	r2, r7, r2
   13776:	0011      	movs	r1, r2
   13778:	0018      	movs	r0, r3
   1377a:	4b71      	ldr	r3, [pc, #452]	; (13940 <LCD_init+0x284>)
   1377c:	4798      	blx	r3
	port_pin_set_config(_enable_pin,&config_port_pin);
   1377e:	4b6a      	ldr	r3, [pc, #424]	; (13928 <LCD_init+0x26c>)
   13780:	781b      	ldrb	r3, [r3, #0]
   13782:	221c      	movs	r2, #28
   13784:	18ba      	adds	r2, r7, r2
   13786:	0011      	movs	r1, r2
   13788:	0018      	movs	r0, r3
   1378a:	4b6d      	ldr	r3, [pc, #436]	; (13940 <LCD_init+0x284>)
   1378c:	4798      	blx	r3
	//port_pin_set_config(LCD_BACKLIGHT,&config_port_pin);
	
	for (int i=0; i<4; ++i)
   1378e:	2300      	movs	r3, #0
   13790:	627b      	str	r3, [r7, #36]	; 0x24
   13792:	e00c      	b.n	137ae <LCD_init+0xf2>
	{
		port_pin_set_config(_data_pins[i],&config_port_pin);
   13794:	4a65      	ldr	r2, [pc, #404]	; (1392c <LCD_init+0x270>)
   13796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   13798:	18d3      	adds	r3, r2, r3
   1379a:	781b      	ldrb	r3, [r3, #0]
   1379c:	221c      	movs	r2, #28
   1379e:	18ba      	adds	r2, r7, r2
   137a0:	0011      	movs	r1, r2
   137a2:	0018      	movs	r0, r3
   137a4:	4b66      	ldr	r3, [pc, #408]	; (13940 <LCD_init+0x284>)
   137a6:	4798      	blx	r3
	for (int i=0; i<4; ++i)
   137a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   137aa:	3301      	adds	r3, #1
   137ac:	627b      	str	r3, [r7, #36]	; 0x24
   137ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   137b0:	2b03      	cmp	r3, #3
   137b2:	ddef      	ble.n	13794 <LCD_init+0xd8>
	}
	delay_us(50000);
   137b4:	2000      	movs	r0, #0
   137b6:	4b63      	ldr	r3, [pc, #396]	; (13944 <LCD_init+0x288>)
   137b8:	4798      	blx	r3
   137ba:	0003      	movs	r3, r0
   137bc:	613b      	str	r3, [r7, #16]
   137be:	2300      	movs	r3, #0
   137c0:	617b      	str	r3, [r7, #20]
   137c2:	4c61      	ldr	r4, [pc, #388]	; (13948 <LCD_init+0x28c>)
   137c4:	4a61      	ldr	r2, [pc, #388]	; (1394c <LCD_init+0x290>)
   137c6:	2300      	movs	r3, #0
   137c8:	6938      	ldr	r0, [r7, #16]
   137ca:	6979      	ldr	r1, [r7, #20]
   137cc:	47a0      	blx	r4
   137ce:	0003      	movs	r3, r0
   137d0:	000c      	movs	r4, r1
   137d2:	0019      	movs	r1, r3
   137d4:	0022      	movs	r2, r4
   137d6:	4b5e      	ldr	r3, [pc, #376]	; (13950 <LCD_init+0x294>)
   137d8:	2400      	movs	r4, #0
   137da:	18c9      	adds	r1, r1, r3
   137dc:	4162      	adcs	r2, r4
   137de:	0008      	movs	r0, r1
   137e0:	0011      	movs	r1, r2
   137e2:	4c5c      	ldr	r4, [pc, #368]	; (13954 <LCD_init+0x298>)
   137e4:	4a5c      	ldr	r2, [pc, #368]	; (13958 <LCD_init+0x29c>)
   137e6:	2300      	movs	r3, #0
   137e8:	47a0      	blx	r4
   137ea:	0003      	movs	r3, r0
   137ec:	000c      	movs	r4, r1
   137ee:	0018      	movs	r0, r3
   137f0:	4b5a      	ldr	r3, [pc, #360]	; (1395c <LCD_init+0x2a0>)
   137f2:	4798      	blx	r3
	port_pin_set_output_level(_rs_pin,LOW);
   137f4:	4b4b      	ldr	r3, [pc, #300]	; (13924 <LCD_init+0x268>)
   137f6:	781b      	ldrb	r3, [r3, #0]
   137f8:	2100      	movs	r1, #0
   137fa:	0018      	movs	r0, r3
   137fc:	4b58      	ldr	r3, [pc, #352]	; (13960 <LCD_init+0x2a4>)
   137fe:	4798      	blx	r3
	port_pin_set_output_level(_enable_pin,LOW);
   13800:	4b49      	ldr	r3, [pc, #292]	; (13928 <LCD_init+0x26c>)
   13802:	781b      	ldrb	r3, [r3, #0]
   13804:	2100      	movs	r1, #0
   13806:	0018      	movs	r0, r3
   13808:	4b55      	ldr	r3, [pc, #340]	; (13960 <LCD_init+0x2a4>)
   1380a:	4798      	blx	r3
	//port_pin_set_output_level(LCD_BACKLIGHT,LOW);
	
	 write4bits(0x03);
   1380c:	2003      	movs	r0, #3
   1380e:	4b55      	ldr	r3, [pc, #340]	; (13964 <LCD_init+0x2a8>)
   13810:	4798      	blx	r3
	 delay_us(4500); 
   13812:	2000      	movs	r0, #0
   13814:	4b4b      	ldr	r3, [pc, #300]	; (13944 <LCD_init+0x288>)
   13816:	4798      	blx	r3
   13818:	0003      	movs	r3, r0
   1381a:	60bb      	str	r3, [r7, #8]
   1381c:	2300      	movs	r3, #0
   1381e:	60fb      	str	r3, [r7, #12]
   13820:	4c49      	ldr	r4, [pc, #292]	; (13948 <LCD_init+0x28c>)
   13822:	4a51      	ldr	r2, [pc, #324]	; (13968 <LCD_init+0x2ac>)
   13824:	2300      	movs	r3, #0
   13826:	68b8      	ldr	r0, [r7, #8]
   13828:	68f9      	ldr	r1, [r7, #12]
   1382a:	47a0      	blx	r4
   1382c:	0003      	movs	r3, r0
   1382e:	000c      	movs	r4, r1
   13830:	0019      	movs	r1, r3
   13832:	0022      	movs	r2, r4
   13834:	4b46      	ldr	r3, [pc, #280]	; (13950 <LCD_init+0x294>)
   13836:	2400      	movs	r4, #0
   13838:	18c9      	adds	r1, r1, r3
   1383a:	4162      	adcs	r2, r4
   1383c:	0008      	movs	r0, r1
   1383e:	0011      	movs	r1, r2
   13840:	4c44      	ldr	r4, [pc, #272]	; (13954 <LCD_init+0x298>)
   13842:	4a45      	ldr	r2, [pc, #276]	; (13958 <LCD_init+0x29c>)
   13844:	2300      	movs	r3, #0
   13846:	47a0      	blx	r4
   13848:	0003      	movs	r3, r0
   1384a:	000c      	movs	r4, r1
   1384c:	0018      	movs	r0, r3
   1384e:	4b43      	ldr	r3, [pc, #268]	; (1395c <LCD_init+0x2a0>)
   13850:	4798      	blx	r3
	 
	 write4bits(0x03);
   13852:	2003      	movs	r0, #3
   13854:	4b43      	ldr	r3, [pc, #268]	; (13964 <LCD_init+0x2a8>)
   13856:	4798      	blx	r3
	 delay_us(4500); 
   13858:	2000      	movs	r0, #0
   1385a:	4b3a      	ldr	r3, [pc, #232]	; (13944 <LCD_init+0x288>)
   1385c:	4798      	blx	r3
   1385e:	0003      	movs	r3, r0
   13860:	603b      	str	r3, [r7, #0]
   13862:	2300      	movs	r3, #0
   13864:	607b      	str	r3, [r7, #4]
   13866:	4c38      	ldr	r4, [pc, #224]	; (13948 <LCD_init+0x28c>)
   13868:	4a3f      	ldr	r2, [pc, #252]	; (13968 <LCD_init+0x2ac>)
   1386a:	2300      	movs	r3, #0
   1386c:	6838      	ldr	r0, [r7, #0]
   1386e:	6879      	ldr	r1, [r7, #4]
   13870:	47a0      	blx	r4
   13872:	0003      	movs	r3, r0
   13874:	000c      	movs	r4, r1
   13876:	0019      	movs	r1, r3
   13878:	0022      	movs	r2, r4
   1387a:	4b35      	ldr	r3, [pc, #212]	; (13950 <LCD_init+0x294>)
   1387c:	2400      	movs	r4, #0
   1387e:	18c9      	adds	r1, r1, r3
   13880:	4162      	adcs	r2, r4
   13882:	0008      	movs	r0, r1
   13884:	0011      	movs	r1, r2
   13886:	4c33      	ldr	r4, [pc, #204]	; (13954 <LCD_init+0x298>)
   13888:	4a33      	ldr	r2, [pc, #204]	; (13958 <LCD_init+0x29c>)
   1388a:	2300      	movs	r3, #0
   1388c:	47a0      	blx	r4
   1388e:	0003      	movs	r3, r0
   13890:	000c      	movs	r4, r1
   13892:	0018      	movs	r0, r3
   13894:	4b31      	ldr	r3, [pc, #196]	; (1395c <LCD_init+0x2a0>)
   13896:	4798      	blx	r3
	
	 write4bits(0x03);
   13898:	2003      	movs	r0, #3
   1389a:	4b32      	ldr	r3, [pc, #200]	; (13964 <LCD_init+0x2a8>)
   1389c:	4798      	blx	r3
	 delay_us(150);
   1389e:	2000      	movs	r0, #0
   138a0:	4b28      	ldr	r3, [pc, #160]	; (13944 <LCD_init+0x288>)
   138a2:	4798      	blx	r3
   138a4:	0003      	movs	r3, r0
   138a6:	001d      	movs	r5, r3
   138a8:	2300      	movs	r3, #0
   138aa:	001e      	movs	r6, r3
   138ac:	4c26      	ldr	r4, [pc, #152]	; (13948 <LCD_init+0x28c>)
   138ae:	2296      	movs	r2, #150	; 0x96
   138b0:	2300      	movs	r3, #0
   138b2:	0028      	movs	r0, r5
   138b4:	0031      	movs	r1, r6
   138b6:	47a0      	blx	r4
   138b8:	0003      	movs	r3, r0
   138ba:	000c      	movs	r4, r1
   138bc:	0019      	movs	r1, r3
   138be:	0022      	movs	r2, r4
   138c0:	4b23      	ldr	r3, [pc, #140]	; (13950 <LCD_init+0x294>)
   138c2:	2400      	movs	r4, #0
   138c4:	18c9      	adds	r1, r1, r3
   138c6:	4162      	adcs	r2, r4
   138c8:	0008      	movs	r0, r1
   138ca:	0011      	movs	r1, r2
   138cc:	4c21      	ldr	r4, [pc, #132]	; (13954 <LCD_init+0x298>)
   138ce:	4a22      	ldr	r2, [pc, #136]	; (13958 <LCD_init+0x29c>)
   138d0:	2300      	movs	r3, #0
   138d2:	47a0      	blx	r4
   138d4:	0003      	movs	r3, r0
   138d6:	000c      	movs	r4, r1
   138d8:	0018      	movs	r0, r3
   138da:	4b20      	ldr	r3, [pc, #128]	; (1395c <LCD_init+0x2a0>)
   138dc:	4798      	blx	r3

	 write4bits(0x02);
   138de:	2002      	movs	r0, #2
   138e0:	4b20      	ldr	r3, [pc, #128]	; (13964 <LCD_init+0x2a8>)
   138e2:	4798      	blx	r3

	 command(LCD_FUNCTIONSET | _displayfunction);
   138e4:	4b12      	ldr	r3, [pc, #72]	; (13930 <LCD_init+0x274>)
   138e6:	781b      	ldrb	r3, [r3, #0]
   138e8:	2220      	movs	r2, #32
   138ea:	4313      	orrs	r3, r2
   138ec:	b2db      	uxtb	r3, r3
   138ee:	0018      	movs	r0, r3
   138f0:	4b1e      	ldr	r3, [pc, #120]	; (1396c <LCD_init+0x2b0>)
   138f2:	4798      	blx	r3
	 
	_displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
   138f4:	4b1e      	ldr	r3, [pc, #120]	; (13970 <LCD_init+0x2b4>)
   138f6:	2204      	movs	r2, #4
   138f8:	701a      	strb	r2, [r3, #0]
	LCD_display();
   138fa:	4b1e      	ldr	r3, [pc, #120]	; (13974 <LCD_init+0x2b8>)
   138fc:	4798      	blx	r3
	LCD_clear();
   138fe:	4b1e      	ldr	r3, [pc, #120]	; (13978 <LCD_init+0x2bc>)
   13900:	4798      	blx	r3
	_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
   13902:	4b1e      	ldr	r3, [pc, #120]	; (1397c <LCD_init+0x2c0>)
   13904:	2202      	movs	r2, #2
   13906:	701a      	strb	r2, [r3, #0]
	command(LCD_ENTRYMODESET | _displaymode);
   13908:	4b1c      	ldr	r3, [pc, #112]	; (1397c <LCD_init+0x2c0>)
   1390a:	781b      	ldrb	r3, [r3, #0]
   1390c:	2204      	movs	r2, #4
   1390e:	4313      	orrs	r3, r2
   13910:	b2db      	uxtb	r3, r3
   13912:	0018      	movs	r0, r3
   13914:	4b15      	ldr	r3, [pc, #84]	; (1396c <LCD_init+0x2b0>)
   13916:	4798      	blx	r3
}
   13918:	46c0      	nop			; (mov r8, r8)
   1391a:	46bd      	mov	sp, r7
   1391c:	b00b      	add	sp, #44	; 0x2c
   1391e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13920:	0002250d 	.word	0x0002250d
   13924:	200006db 	.word	0x200006db
   13928:	200006da 	.word	0x200006da
   1392c:	200006d4 	.word	0x200006d4
   13930:	200006d9 	.word	0x200006d9
   13934:	200006d2 	.word	0x200006d2
   13938:	00013a2d 	.word	0x00013a2d
   1393c:	00013645 	.word	0x00013645
   13940:	00022b61 	.word	0x00022b61
   13944:	000244cd 	.word	0x000244cd
   13948:	0002648d 	.word	0x0002648d
   1394c:	0000c350 	.word	0x0000c350
   13950:	006acfbf 	.word	0x006acfbf
   13954:	0002644d 	.word	0x0002644d
   13958:	006acfc0 	.word	0x006acfc0
   1395c:	20000001 	.word	0x20000001
   13960:	00013669 	.word	0x00013669
   13964:	00013a69 	.word	0x00013a69
   13968:	00001194 	.word	0x00001194
   1396c:	00013bad 	.word	0x00013bad
   13970:	200006d1 	.word	0x200006d1
   13974:	00013d95 	.word	0x00013d95
   13978:	00013c4d 	.word	0x00013c4d
   1397c:	200006d8 	.word	0x200006d8

00013980 <LCD_PWR_CONFIG>:

void LCD_PWR_CONFIG()
{
   13980:	b580      	push	{r7, lr}
   13982:	b082      	sub	sp, #8
   13984:	af00      	add	r7, sp, #0
	struct port_config pin_conf_gsm_status;
	port_get_config_defaults(&pin_conf_gsm_status);
   13986:	1d3b      	adds	r3, r7, #4
   13988:	0018      	movs	r0, r3
   1398a:	4b08      	ldr	r3, [pc, #32]	; (139ac <LCD_PWR_CONFIG+0x2c>)
   1398c:	4798      	blx	r3
	pin_conf_gsm_status.direction  = PORT_PIN_DIR_OUTPUT;
   1398e:	1d3b      	adds	r3, r7, #4
   13990:	2201      	movs	r2, #1
   13992:	701a      	strb	r2, [r3, #0]
	pin_conf_gsm_status.input_pull = PORT_PIN_PULL_NONE;
   13994:	1d3b      	adds	r3, r7, #4
   13996:	2200      	movs	r2, #0
   13998:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(LCD_PWR_CNTRL, &pin_conf_gsm_status);
   1399a:	1d3b      	adds	r3, r7, #4
   1399c:	0019      	movs	r1, r3
   1399e:	2024      	movs	r0, #36	; 0x24
   139a0:	4b03      	ldr	r3, [pc, #12]	; (139b0 <LCD_PWR_CONFIG+0x30>)
   139a2:	4798      	blx	r3
}
   139a4:	46c0      	nop			; (mov r8, r8)
   139a6:	46bd      	mov	sp, r7
   139a8:	b002      	add	sp, #8
   139aa:	bd80      	pop	{r7, pc}
   139ac:	00013645 	.word	0x00013645
   139b0:	00022b61 	.word	0x00022b61

000139b4 <LCD_PWR_EN>:

void LCD_PWR_EN()
{
   139b4:	b580      	push	{r7, lr}
   139b6:	af00      	add	r7, sp, #0
	port_pin_set_output_level(LCD_PWR_CNTRL,HIGH);
   139b8:	2101      	movs	r1, #1
   139ba:	2024      	movs	r0, #36	; 0x24
   139bc:	4b02      	ldr	r3, [pc, #8]	; (139c8 <LCD_PWR_EN+0x14>)
   139be:	4798      	blx	r3
}
   139c0:	46c0      	nop			; (mov r8, r8)
   139c2:	46bd      	mov	sp, r7
   139c4:	bd80      	pop	{r7, pc}
   139c6:	46c0      	nop			; (mov r8, r8)
   139c8:	00013669 	.word	0x00013669

000139cc <LCD_PWR_DIS>:
void LCD_PWR_DIS()
{
   139cc:	b580      	push	{r7, lr}
   139ce:	b082      	sub	sp, #8
   139d0:	af00      	add	r7, sp, #0
	port_pin_set_output_level(LCD_PWR_CNTRL,LOW);
   139d2:	2100      	movs	r1, #0
   139d4:	2024      	movs	r0, #36	; 0x24
   139d6:	4b11      	ldr	r3, [pc, #68]	; (13a1c <LCD_PWR_DIS+0x50>)
   139d8:	4798      	blx	r3
	
	for (int i = 0; i < 4; i++)
   139da:	2300      	movs	r3, #0
   139dc:	607b      	str	r3, [r7, #4]
   139de:	e00a      	b.n	139f6 <LCD_PWR_DIS+0x2a>
	{
		port_pin_set_output_level(_data_pins[i],LOW);
   139e0:	4a0f      	ldr	r2, [pc, #60]	; (13a20 <LCD_PWR_DIS+0x54>)
   139e2:	687b      	ldr	r3, [r7, #4]
   139e4:	18d3      	adds	r3, r2, r3
   139e6:	781b      	ldrb	r3, [r3, #0]
   139e8:	2100      	movs	r1, #0
   139ea:	0018      	movs	r0, r3
   139ec:	4b0b      	ldr	r3, [pc, #44]	; (13a1c <LCD_PWR_DIS+0x50>)
   139ee:	4798      	blx	r3
	for (int i = 0; i < 4; i++)
   139f0:	687b      	ldr	r3, [r7, #4]
   139f2:	3301      	adds	r3, #1
   139f4:	607b      	str	r3, [r7, #4]
   139f6:	687b      	ldr	r3, [r7, #4]
   139f8:	2b03      	cmp	r3, #3
   139fa:	ddf1      	ble.n	139e0 <LCD_PWR_DIS+0x14>
	}
	
	port_pin_set_output_level(_enable_pin, LOW);
   139fc:	4b09      	ldr	r3, [pc, #36]	; (13a24 <LCD_PWR_DIS+0x58>)
   139fe:	781b      	ldrb	r3, [r3, #0]
   13a00:	2100      	movs	r1, #0
   13a02:	0018      	movs	r0, r3
   13a04:	4b05      	ldr	r3, [pc, #20]	; (13a1c <LCD_PWR_DIS+0x50>)
   13a06:	4798      	blx	r3
	
	port_pin_set_output_level(_rs_pin, LOW);
   13a08:	4b07      	ldr	r3, [pc, #28]	; (13a28 <LCD_PWR_DIS+0x5c>)
   13a0a:	781b      	ldrb	r3, [r3, #0]
   13a0c:	2100      	movs	r1, #0
   13a0e:	0018      	movs	r0, r3
   13a10:	4b02      	ldr	r3, [pc, #8]	; (13a1c <LCD_PWR_DIS+0x50>)
   13a12:	4798      	blx	r3
	
}
   13a14:	46c0      	nop			; (mov r8, r8)
   13a16:	46bd      	mov	sp, r7
   13a18:	b002      	add	sp, #8
   13a1a:	bd80      	pop	{r7, pc}
   13a1c:	00013669 	.word	0x00013669
   13a20:	200006d4 	.word	0x200006d4
   13a24:	200006da 	.word	0x200006da
   13a28:	200006db 	.word	0x200006db

00013a2c <LCD_setRowOffsets>:

void LCD_setRowOffsets(int row0, int row1, int row2, int row3)
{
   13a2c:	b580      	push	{r7, lr}
   13a2e:	b084      	sub	sp, #16
   13a30:	af00      	add	r7, sp, #0
   13a32:	60f8      	str	r0, [r7, #12]
   13a34:	60b9      	str	r1, [r7, #8]
   13a36:	607a      	str	r2, [r7, #4]
   13a38:	603b      	str	r3, [r7, #0]
	_row_offsets[0] = row0;
   13a3a:	68fb      	ldr	r3, [r7, #12]
   13a3c:	b2da      	uxtb	r2, r3
   13a3e:	4b09      	ldr	r3, [pc, #36]	; (13a64 <LCD_setRowOffsets+0x38>)
   13a40:	701a      	strb	r2, [r3, #0]
	_row_offsets[1] = row1;
   13a42:	68bb      	ldr	r3, [r7, #8]
   13a44:	b2da      	uxtb	r2, r3
   13a46:	4b07      	ldr	r3, [pc, #28]	; (13a64 <LCD_setRowOffsets+0x38>)
   13a48:	705a      	strb	r2, [r3, #1]
	_row_offsets[2] = row2;
   13a4a:	687b      	ldr	r3, [r7, #4]
   13a4c:	b2da      	uxtb	r2, r3
   13a4e:	4b05      	ldr	r3, [pc, #20]	; (13a64 <LCD_setRowOffsets+0x38>)
   13a50:	709a      	strb	r2, [r3, #2]
	_row_offsets[3] = row3;
   13a52:	683b      	ldr	r3, [r7, #0]
   13a54:	b2da      	uxtb	r2, r3
   13a56:	4b03      	ldr	r3, [pc, #12]	; (13a64 <LCD_setRowOffsets+0x38>)
   13a58:	70da      	strb	r2, [r3, #3]
}
   13a5a:	46c0      	nop			; (mov r8, r8)
   13a5c:	46bd      	mov	sp, r7
   13a5e:	b004      	add	sp, #16
   13a60:	bd80      	pop	{r7, pc}
   13a62:	46c0      	nop			; (mov r8, r8)
   13a64:	200006cc 	.word	0x200006cc

00013a68 <write4bits>:

void write4bits(uint8_t value)
{
   13a68:	b580      	push	{r7, lr}
   13a6a:	b084      	sub	sp, #16
   13a6c:	af00      	add	r7, sp, #0
   13a6e:	0002      	movs	r2, r0
   13a70:	1dfb      	adds	r3, r7, #7
   13a72:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 4; i++) 
   13a74:	2300      	movs	r3, #0
   13a76:	60fb      	str	r3, [r7, #12]
   13a78:	e013      	b.n	13aa2 <write4bits+0x3a>
	{
		port_pin_set_output_level(_data_pins[i], (value >> i) & 0x01);
   13a7a:	4a0e      	ldr	r2, [pc, #56]	; (13ab4 <write4bits+0x4c>)
   13a7c:	68fb      	ldr	r3, [r7, #12]
   13a7e:	18d3      	adds	r3, r2, r3
   13a80:	7818      	ldrb	r0, [r3, #0]
   13a82:	1dfb      	adds	r3, r7, #7
   13a84:	781a      	ldrb	r2, [r3, #0]
   13a86:	68fb      	ldr	r3, [r7, #12]
   13a88:	411a      	asrs	r2, r3
   13a8a:	0013      	movs	r3, r2
   13a8c:	2201      	movs	r2, #1
   13a8e:	4013      	ands	r3, r2
   13a90:	1e5a      	subs	r2, r3, #1
   13a92:	4193      	sbcs	r3, r2
   13a94:	b2db      	uxtb	r3, r3
   13a96:	0019      	movs	r1, r3
   13a98:	4b07      	ldr	r3, [pc, #28]	; (13ab8 <write4bits+0x50>)
   13a9a:	4798      	blx	r3
	for (int i = 0; i < 4; i++) 
   13a9c:	68fb      	ldr	r3, [r7, #12]
   13a9e:	3301      	adds	r3, #1
   13aa0:	60fb      	str	r3, [r7, #12]
   13aa2:	68fb      	ldr	r3, [r7, #12]
   13aa4:	2b03      	cmp	r3, #3
   13aa6:	dde8      	ble.n	13a7a <write4bits+0x12>
	}
	pulseEnable();
   13aa8:	4b04      	ldr	r3, [pc, #16]	; (13abc <write4bits+0x54>)
   13aaa:	4798      	blx	r3
}
   13aac:	46c0      	nop			; (mov r8, r8)
   13aae:	46bd      	mov	sp, r7
   13ab0:	b004      	add	sp, #16
   13ab2:	bd80      	pop	{r7, pc}
   13ab4:	200006d4 	.word	0x200006d4
   13ab8:	00013669 	.word	0x00013669
   13abc:	00013ac1 	.word	0x00013ac1

00013ac0 <pulseEnable>:



void pulseEnable(void)
{
   13ac0:	b5f0      	push	{r4, r5, r6, r7, lr}
   13ac2:	b085      	sub	sp, #20
   13ac4:	af00      	add	r7, sp, #0
 	port_pin_set_output_level(_enable_pin, LOW);
   13ac6:	4b31      	ldr	r3, [pc, #196]	; (13b8c <pulseEnable+0xcc>)
   13ac8:	781b      	ldrb	r3, [r3, #0]
   13aca:	2100      	movs	r1, #0
   13acc:	0018      	movs	r0, r3
   13ace:	4b30      	ldr	r3, [pc, #192]	; (13b90 <pulseEnable+0xd0>)
   13ad0:	4798      	blx	r3
 	delay_us(1);
   13ad2:	2000      	movs	r0, #0
   13ad4:	4b2f      	ldr	r3, [pc, #188]	; (13b94 <pulseEnable+0xd4>)
   13ad6:	4798      	blx	r3
   13ad8:	0003      	movs	r3, r0
   13ada:	60bb      	str	r3, [r7, #8]
   13adc:	2300      	movs	r3, #0
   13ade:	60fb      	str	r3, [r7, #12]
   13ae0:	4b2d      	ldr	r3, [pc, #180]	; (13b98 <pulseEnable+0xd8>)
   13ae2:	2400      	movs	r4, #0
   13ae4:	68b8      	ldr	r0, [r7, #8]
   13ae6:	68f9      	ldr	r1, [r7, #12]
   13ae8:	18c0      	adds	r0, r0, r3
   13aea:	4161      	adcs	r1, r4
   13aec:	4c2b      	ldr	r4, [pc, #172]	; (13b9c <pulseEnable+0xdc>)
   13aee:	4a2c      	ldr	r2, [pc, #176]	; (13ba0 <pulseEnable+0xe0>)
   13af0:	2300      	movs	r3, #0
   13af2:	47a0      	blx	r4
   13af4:	0003      	movs	r3, r0
   13af6:	000c      	movs	r4, r1
   13af8:	0018      	movs	r0, r3
   13afa:	4b2a      	ldr	r3, [pc, #168]	; (13ba4 <pulseEnable+0xe4>)
   13afc:	4798      	blx	r3
 	port_pin_set_output_level(_enable_pin, HIGH);
   13afe:	4b23      	ldr	r3, [pc, #140]	; (13b8c <pulseEnable+0xcc>)
   13b00:	781b      	ldrb	r3, [r3, #0]
   13b02:	2101      	movs	r1, #1
   13b04:	0018      	movs	r0, r3
   13b06:	4b22      	ldr	r3, [pc, #136]	; (13b90 <pulseEnable+0xd0>)
   13b08:	4798      	blx	r3
 	delay_us(1);
   13b0a:	2000      	movs	r0, #0
   13b0c:	4b21      	ldr	r3, [pc, #132]	; (13b94 <pulseEnable+0xd4>)
   13b0e:	4798      	blx	r3
   13b10:	0003      	movs	r3, r0
   13b12:	001d      	movs	r5, r3
   13b14:	2300      	movs	r3, #0
   13b16:	001e      	movs	r6, r3
   13b18:	4b1f      	ldr	r3, [pc, #124]	; (13b98 <pulseEnable+0xd8>)
   13b1a:	2400      	movs	r4, #0
   13b1c:	0028      	movs	r0, r5
   13b1e:	0031      	movs	r1, r6
   13b20:	18c0      	adds	r0, r0, r3
   13b22:	4161      	adcs	r1, r4
   13b24:	4c1d      	ldr	r4, [pc, #116]	; (13b9c <pulseEnable+0xdc>)
   13b26:	4a1e      	ldr	r2, [pc, #120]	; (13ba0 <pulseEnable+0xe0>)
   13b28:	2300      	movs	r3, #0
   13b2a:	47a0      	blx	r4
   13b2c:	0003      	movs	r3, r0
   13b2e:	000c      	movs	r4, r1
   13b30:	0018      	movs	r0, r3
   13b32:	4b1c      	ldr	r3, [pc, #112]	; (13ba4 <pulseEnable+0xe4>)
   13b34:	4798      	blx	r3
 	port_pin_set_output_level(_enable_pin, LOW);
   13b36:	4b15      	ldr	r3, [pc, #84]	; (13b8c <pulseEnable+0xcc>)
   13b38:	781b      	ldrb	r3, [r3, #0]
   13b3a:	2100      	movs	r1, #0
   13b3c:	0018      	movs	r0, r3
   13b3e:	4b14      	ldr	r3, [pc, #80]	; (13b90 <pulseEnable+0xd0>)
   13b40:	4798      	blx	r3
 	delay_us(100);
   13b42:	2000      	movs	r0, #0
   13b44:	4b13      	ldr	r3, [pc, #76]	; (13b94 <pulseEnable+0xd4>)
   13b46:	4798      	blx	r3
   13b48:	0003      	movs	r3, r0
   13b4a:	603b      	str	r3, [r7, #0]
   13b4c:	2300      	movs	r3, #0
   13b4e:	607b      	str	r3, [r7, #4]
   13b50:	4c15      	ldr	r4, [pc, #84]	; (13ba8 <pulseEnable+0xe8>)
   13b52:	2264      	movs	r2, #100	; 0x64
   13b54:	2300      	movs	r3, #0
   13b56:	6838      	ldr	r0, [r7, #0]
   13b58:	6879      	ldr	r1, [r7, #4]
   13b5a:	47a0      	blx	r4
   13b5c:	0003      	movs	r3, r0
   13b5e:	000c      	movs	r4, r1
   13b60:	0019      	movs	r1, r3
   13b62:	0022      	movs	r2, r4
   13b64:	4b0c      	ldr	r3, [pc, #48]	; (13b98 <pulseEnable+0xd8>)
   13b66:	2400      	movs	r4, #0
   13b68:	18c9      	adds	r1, r1, r3
   13b6a:	4162      	adcs	r2, r4
   13b6c:	0008      	movs	r0, r1
   13b6e:	0011      	movs	r1, r2
   13b70:	4c0a      	ldr	r4, [pc, #40]	; (13b9c <pulseEnable+0xdc>)
   13b72:	4a0b      	ldr	r2, [pc, #44]	; (13ba0 <pulseEnable+0xe0>)
   13b74:	2300      	movs	r3, #0
   13b76:	47a0      	blx	r4
   13b78:	0003      	movs	r3, r0
   13b7a:	000c      	movs	r4, r1
   13b7c:	0018      	movs	r0, r3
   13b7e:	4b09      	ldr	r3, [pc, #36]	; (13ba4 <pulseEnable+0xe4>)
   13b80:	4798      	blx	r3

	//port_pin_set_output_level(_enable_pin, HIGH);
	//delay_us(1);
	//port_pin_set_output_level(_enable_pin, LOW);
	//delay_us(500);
}
   13b82:	46c0      	nop			; (mov r8, r8)
   13b84:	46bd      	mov	sp, r7
   13b86:	b005      	add	sp, #20
   13b88:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13b8a:	46c0      	nop			; (mov r8, r8)
   13b8c:	200006da 	.word	0x200006da
   13b90:	00013669 	.word	0x00013669
   13b94:	000244cd 	.word	0x000244cd
   13b98:	006acfbf 	.word	0x006acfbf
   13b9c:	0002644d 	.word	0x0002644d
   13ba0:	006acfc0 	.word	0x006acfc0
   13ba4:	20000001 	.word	0x20000001
   13ba8:	0002648d 	.word	0x0002648d

00013bac <command>:

inline void command(uint8_t value) 
{
   13bac:	b580      	push	{r7, lr}
   13bae:	b082      	sub	sp, #8
   13bb0:	af00      	add	r7, sp, #0
   13bb2:	0002      	movs	r2, r0
   13bb4:	1dfb      	adds	r3, r7, #7
   13bb6:	701a      	strb	r2, [r3, #0]
	send(value, LOW);
   13bb8:	1dfb      	adds	r3, r7, #7
   13bba:	781b      	ldrb	r3, [r3, #0]
   13bbc:	2100      	movs	r1, #0
   13bbe:	0018      	movs	r0, r3
   13bc0:	4b02      	ldr	r3, [pc, #8]	; (13bcc <command+0x20>)
   13bc2:	4798      	blx	r3
}
   13bc4:	46c0      	nop			; (mov r8, r8)
   13bc6:	46bd      	mov	sp, r7
   13bc8:	b002      	add	sp, #8
   13bca:	bd80      	pop	{r7, pc}
   13bcc:	00013bf9 	.word	0x00013bf9

00013bd0 <LCD_write>:

inline size_t LCD_write(uint8_t value)
{
   13bd0:	b580      	push	{r7, lr}
   13bd2:	b082      	sub	sp, #8
   13bd4:	af00      	add	r7, sp, #0
   13bd6:	0002      	movs	r2, r0
   13bd8:	1dfb      	adds	r3, r7, #7
   13bda:	701a      	strb	r2, [r3, #0]
	send(value, HIGH);
   13bdc:	1dfb      	adds	r3, r7, #7
   13bde:	781b      	ldrb	r3, [r3, #0]
   13be0:	2101      	movs	r1, #1
   13be2:	0018      	movs	r0, r3
   13be4:	4b03      	ldr	r3, [pc, #12]	; (13bf4 <LCD_write+0x24>)
   13be6:	4798      	blx	r3
	return 1;
   13be8:	2301      	movs	r3, #1
}
   13bea:	0018      	movs	r0, r3
   13bec:	46bd      	mov	sp, r7
   13bee:	b002      	add	sp, #8
   13bf0:	bd80      	pop	{r7, pc}
   13bf2:	46c0      	nop			; (mov r8, r8)
   13bf4:	00013bf9 	.word	0x00013bf9

00013bf8 <send>:

void send(uint8_t value, uint8_t mode) 
{
   13bf8:	b580      	push	{r7, lr}
   13bfa:	b082      	sub	sp, #8
   13bfc:	af00      	add	r7, sp, #0
   13bfe:	0002      	movs	r2, r0
   13c00:	1dfb      	adds	r3, r7, #7
   13c02:	701a      	strb	r2, [r3, #0]
   13c04:	1dbb      	adds	r3, r7, #6
   13c06:	1c0a      	adds	r2, r1, #0
   13c08:	701a      	strb	r2, [r3, #0]
	port_pin_set_output_level(_rs_pin, mode);
   13c0a:	4b0d      	ldr	r3, [pc, #52]	; (13c40 <send+0x48>)
   13c0c:	781a      	ldrb	r2, [r3, #0]
   13c0e:	1dbb      	adds	r3, r7, #6
   13c10:	781b      	ldrb	r3, [r3, #0]
   13c12:	1e59      	subs	r1, r3, #1
   13c14:	418b      	sbcs	r3, r1
   13c16:	b2db      	uxtb	r3, r3
   13c18:	0019      	movs	r1, r3
   13c1a:	0010      	movs	r0, r2
   13c1c:	4b09      	ldr	r3, [pc, #36]	; (13c44 <send+0x4c>)
   13c1e:	4798      	blx	r3
	
	{
		write4bits(value>>4);
   13c20:	1dfb      	adds	r3, r7, #7
   13c22:	781b      	ldrb	r3, [r3, #0]
   13c24:	091b      	lsrs	r3, r3, #4
   13c26:	b2db      	uxtb	r3, r3
   13c28:	0018      	movs	r0, r3
   13c2a:	4b07      	ldr	r3, [pc, #28]	; (13c48 <send+0x50>)
   13c2c:	4798      	blx	r3
		write4bits(value);
   13c2e:	1dfb      	adds	r3, r7, #7
   13c30:	781b      	ldrb	r3, [r3, #0]
   13c32:	0018      	movs	r0, r3
   13c34:	4b04      	ldr	r3, [pc, #16]	; (13c48 <send+0x50>)
   13c36:	4798      	blx	r3
	}
}
   13c38:	46c0      	nop			; (mov r8, r8)
   13c3a:	46bd      	mov	sp, r7
   13c3c:	b002      	add	sp, #8
   13c3e:	bd80      	pop	{r7, pc}
   13c40:	200006db 	.word	0x200006db
   13c44:	00013669 	.word	0x00013669
   13c48:	00013a69 	.word	0x00013a69

00013c4c <LCD_clear>:

void LCD_clear(void)
{
   13c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13c4e:	af00      	add	r7, sp, #0
	command(LCD_CLEARDISPLAY);
   13c50:	2001      	movs	r0, #1
   13c52:	4b13      	ldr	r3, [pc, #76]	; (13ca0 <LCD_clear+0x54>)
   13c54:	4798      	blx	r3
	delay_us(2000);
   13c56:	2000      	movs	r0, #0
   13c58:	4b12      	ldr	r3, [pc, #72]	; (13ca4 <LCD_clear+0x58>)
   13c5a:	4798      	blx	r3
   13c5c:	0003      	movs	r3, r0
   13c5e:	001d      	movs	r5, r3
   13c60:	2300      	movs	r3, #0
   13c62:	001e      	movs	r6, r3
   13c64:	4c10      	ldr	r4, [pc, #64]	; (13ca8 <LCD_clear+0x5c>)
   13c66:	22fa      	movs	r2, #250	; 0xfa
   13c68:	00d2      	lsls	r2, r2, #3
   13c6a:	2300      	movs	r3, #0
   13c6c:	0028      	movs	r0, r5
   13c6e:	0031      	movs	r1, r6
   13c70:	47a0      	blx	r4
   13c72:	0003      	movs	r3, r0
   13c74:	000c      	movs	r4, r1
   13c76:	0019      	movs	r1, r3
   13c78:	0022      	movs	r2, r4
   13c7a:	4b0c      	ldr	r3, [pc, #48]	; (13cac <LCD_clear+0x60>)
   13c7c:	2400      	movs	r4, #0
   13c7e:	18c9      	adds	r1, r1, r3
   13c80:	4162      	adcs	r2, r4
   13c82:	0008      	movs	r0, r1
   13c84:	0011      	movs	r1, r2
   13c86:	4c0a      	ldr	r4, [pc, #40]	; (13cb0 <LCD_clear+0x64>)
   13c88:	4a0a      	ldr	r2, [pc, #40]	; (13cb4 <LCD_clear+0x68>)
   13c8a:	2300      	movs	r3, #0
   13c8c:	47a0      	blx	r4
   13c8e:	0003      	movs	r3, r0
   13c90:	000c      	movs	r4, r1
   13c92:	0018      	movs	r0, r3
   13c94:	4b08      	ldr	r3, [pc, #32]	; (13cb8 <LCD_clear+0x6c>)
   13c96:	4798      	blx	r3
}
   13c98:	46c0      	nop			; (mov r8, r8)
   13c9a:	46bd      	mov	sp, r7
   13c9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   13c9e:	46c0      	nop			; (mov r8, r8)
   13ca0:	00013bad 	.word	0x00013bad
   13ca4:	000244cd 	.word	0x000244cd
   13ca8:	0002648d 	.word	0x0002648d
   13cac:	006acfbf 	.word	0x006acfbf
   13cb0:	0002644d 	.word	0x0002644d
   13cb4:	006acfc0 	.word	0x006acfc0
   13cb8:	20000001 	.word	0x20000001

00013cbc <LCD_Create_Custom_createChar>:


void LCD_Create_Custom_createChar(uint8_t location, uint8_t charmap[]) 
{
   13cbc:	b580      	push	{r7, lr}
   13cbe:	b084      	sub	sp, #16
   13cc0:	af00      	add	r7, sp, #0
   13cc2:	0002      	movs	r2, r0
   13cc4:	6039      	str	r1, [r7, #0]
   13cc6:	1dfb      	adds	r3, r7, #7
   13cc8:	701a      	strb	r2, [r3, #0]
	location &= 0x7;
   13cca:	1dfb      	adds	r3, r7, #7
   13ccc:	1dfa      	adds	r2, r7, #7
   13cce:	7812      	ldrb	r2, [r2, #0]
   13cd0:	2107      	movs	r1, #7
   13cd2:	400a      	ands	r2, r1
   13cd4:	701a      	strb	r2, [r3, #0]
	command(LCD_SETCGRAMADDR | (location << 3));
   13cd6:	1dfb      	adds	r3, r7, #7
   13cd8:	781b      	ldrb	r3, [r3, #0]
   13cda:	00db      	lsls	r3, r3, #3
   13cdc:	b25b      	sxtb	r3, r3
   13cde:	2240      	movs	r2, #64	; 0x40
   13ce0:	4313      	orrs	r3, r2
   13ce2:	b25b      	sxtb	r3, r3
   13ce4:	b2db      	uxtb	r3, r3
   13ce6:	0018      	movs	r0, r3
   13ce8:	4b0a      	ldr	r3, [pc, #40]	; (13d14 <LCD_Create_Custom_createChar+0x58>)
   13cea:	4798      	blx	r3
	for (int i=0; i<8; i++)
   13cec:	2300      	movs	r3, #0
   13cee:	60fb      	str	r3, [r7, #12]
   13cf0:	e009      	b.n	13d06 <LCD_Create_Custom_createChar+0x4a>
	{
		LCD_write(charmap[i]);
   13cf2:	68fb      	ldr	r3, [r7, #12]
   13cf4:	683a      	ldr	r2, [r7, #0]
   13cf6:	18d3      	adds	r3, r2, r3
   13cf8:	781b      	ldrb	r3, [r3, #0]
   13cfa:	0018      	movs	r0, r3
   13cfc:	4b06      	ldr	r3, [pc, #24]	; (13d18 <LCD_Create_Custom_createChar+0x5c>)
   13cfe:	4798      	blx	r3
	for (int i=0; i<8; i++)
   13d00:	68fb      	ldr	r3, [r7, #12]
   13d02:	3301      	adds	r3, #1
   13d04:	60fb      	str	r3, [r7, #12]
   13d06:	68fb      	ldr	r3, [r7, #12]
   13d08:	2b07      	cmp	r3, #7
   13d0a:	ddf2      	ble.n	13cf2 <LCD_Create_Custom_createChar+0x36>
	}
}
   13d0c:	46c0      	nop			; (mov r8, r8)
   13d0e:	46bd      	mov	sp, r7
   13d10:	b004      	add	sp, #16
   13d12:	bd80      	pop	{r7, pc}
   13d14:	00013bad 	.word	0x00013bad
   13d18:	00013bd1 	.word	0x00013bd1

00013d1c <LCD_setCursor>:
	command(LCD_RETURNHOME);
	delay_us(2000);
}

void LCD_setCursor(uint8_t col, uint8_t row)
{
   13d1c:	b580      	push	{r7, lr}
   13d1e:	b084      	sub	sp, #16
   13d20:	af00      	add	r7, sp, #0
   13d22:	0002      	movs	r2, r0
   13d24:	1dfb      	adds	r3, r7, #7
   13d26:	701a      	strb	r2, [r3, #0]
   13d28:	1dbb      	adds	r3, r7, #6
   13d2a:	1c0a      	adds	r2, r1, #0
   13d2c:	701a      	strb	r2, [r3, #0]
	const size_t max_lines = sizeof(_row_offsets) / sizeof(*_row_offsets);
   13d2e:	2304      	movs	r3, #4
   13d30:	60fb      	str	r3, [r7, #12]
	if ( row >= max_lines ) 
   13d32:	1dbb      	adds	r3, r7, #6
   13d34:	781a      	ldrb	r2, [r3, #0]
   13d36:	68fb      	ldr	r3, [r7, #12]
   13d38:	429a      	cmp	r2, r3
   13d3a:	d304      	bcc.n	13d46 <LCD_setCursor+0x2a>
	{
		row = max_lines - 1; 
   13d3c:	68fb      	ldr	r3, [r7, #12]
   13d3e:	b2da      	uxtb	r2, r3
   13d40:	1dbb      	adds	r3, r7, #6
   13d42:	3a01      	subs	r2, #1
   13d44:	701a      	strb	r2, [r3, #0]
	}
	if ( row >= _numlines )
   13d46:	4b10      	ldr	r3, [pc, #64]	; (13d88 <LCD_setCursor+0x6c>)
   13d48:	781b      	ldrb	r3, [r3, #0]
   13d4a:	1dba      	adds	r2, r7, #6
   13d4c:	7812      	ldrb	r2, [r2, #0]
   13d4e:	429a      	cmp	r2, r3
   13d50:	d304      	bcc.n	13d5c <LCD_setCursor+0x40>
	{
		row = _numlines - 1;
   13d52:	4b0d      	ldr	r3, [pc, #52]	; (13d88 <LCD_setCursor+0x6c>)
   13d54:	781a      	ldrb	r2, [r3, #0]
   13d56:	1dbb      	adds	r3, r7, #6
   13d58:	3a01      	subs	r2, #1
   13d5a:	701a      	strb	r2, [r3, #0]
	}
	command(LCD_SETDDRAMADDR | (col + _row_offsets[row]));
   13d5c:	1dbb      	adds	r3, r7, #6
   13d5e:	781b      	ldrb	r3, [r3, #0]
   13d60:	4a0a      	ldr	r2, [pc, #40]	; (13d8c <LCD_setCursor+0x70>)
   13d62:	5cd2      	ldrb	r2, [r2, r3]
   13d64:	1dfb      	adds	r3, r7, #7
   13d66:	781b      	ldrb	r3, [r3, #0]
   13d68:	18d3      	adds	r3, r2, r3
   13d6a:	b2db      	uxtb	r3, r3
   13d6c:	b25b      	sxtb	r3, r3
   13d6e:	2280      	movs	r2, #128	; 0x80
   13d70:	4252      	negs	r2, r2
   13d72:	4313      	orrs	r3, r2
   13d74:	b25b      	sxtb	r3, r3
   13d76:	b2db      	uxtb	r3, r3
   13d78:	0018      	movs	r0, r3
   13d7a:	4b05      	ldr	r3, [pc, #20]	; (13d90 <LCD_setCursor+0x74>)
   13d7c:	4798      	blx	r3
}
   13d7e:	46c0      	nop			; (mov r8, r8)
   13d80:	46bd      	mov	sp, r7
   13d82:	b004      	add	sp, #16
   13d84:	bd80      	pop	{r7, pc}
   13d86:	46c0      	nop			; (mov r8, r8)
   13d88:	200006d2 	.word	0x200006d2
   13d8c:	200006cc 	.word	0x200006cc
   13d90:	00013bad 	.word	0x00013bad

00013d94 <LCD_display>:
{
	_displaycontrol &= ~LCD_DISPLAYON;
	command(LCD_DISPLAYCONTROL | _displaycontrol);
}
void LCD_display(void) 
{
   13d94:	b580      	push	{r7, lr}
   13d96:	af00      	add	r7, sp, #0
	_displaycontrol |= LCD_DISPLAYON;
   13d98:	4b08      	ldr	r3, [pc, #32]	; (13dbc <LCD_display+0x28>)
   13d9a:	781b      	ldrb	r3, [r3, #0]
   13d9c:	2204      	movs	r2, #4
   13d9e:	4313      	orrs	r3, r2
   13da0:	b2da      	uxtb	r2, r3
   13da2:	4b06      	ldr	r3, [pc, #24]	; (13dbc <LCD_display+0x28>)
   13da4:	701a      	strb	r2, [r3, #0]
	command(LCD_DISPLAYCONTROL | _displaycontrol);
   13da6:	4b05      	ldr	r3, [pc, #20]	; (13dbc <LCD_display+0x28>)
   13da8:	781b      	ldrb	r3, [r3, #0]
   13daa:	2208      	movs	r2, #8
   13dac:	4313      	orrs	r3, r2
   13dae:	b2db      	uxtb	r3, r3
   13db0:	0018      	movs	r0, r3
   13db2:	4b03      	ldr	r3, [pc, #12]	; (13dc0 <LCD_display+0x2c>)
   13db4:	4798      	blx	r3
}
   13db6:	46c0      	nop			; (mov r8, r8)
   13db8:	46bd      	mov	sp, r7
   13dba:	bd80      	pop	{r7, pc}
   13dbc:	200006d1 	.word	0x200006d1
   13dc0:	00013bad 	.word	0x00013bad

00013dc4 <Buffer_writer>:

//////////////////////////////////////////////////////////////////////////


size_t Buffer_writer(const char *buffer)
{
   13dc4:	b580      	push	{r7, lr}
   13dc6:	b084      	sub	sp, #16
   13dc8:	af00      	add	r7, sp, #0
   13dca:	6078      	str	r0, [r7, #4]
	size_t size = strlen(buffer);
   13dcc:	687b      	ldr	r3, [r7, #4]
   13dce:	0018      	movs	r0, r3
   13dd0:	4b0f      	ldr	r3, [pc, #60]	; (13e10 <Buffer_writer+0x4c>)
   13dd2:	4798      	blx	r3
   13dd4:	0003      	movs	r3, r0
   13dd6:	60fb      	str	r3, [r7, #12]
	size_t n = 0;
   13dd8:	2300      	movs	r3, #0
   13dda:	60bb      	str	r3, [r7, #8]
	while (size--) {
   13ddc:	e00b      	b.n	13df6 <Buffer_writer+0x32>
		if (LCD_write(*buffer++)) n++;
   13dde:	687b      	ldr	r3, [r7, #4]
   13de0:	1c5a      	adds	r2, r3, #1
   13de2:	607a      	str	r2, [r7, #4]
   13de4:	781b      	ldrb	r3, [r3, #0]
   13de6:	0018      	movs	r0, r3
   13de8:	4b0a      	ldr	r3, [pc, #40]	; (13e14 <Buffer_writer+0x50>)
   13dea:	4798      	blx	r3
   13dec:	1e03      	subs	r3, r0, #0
   13dee:	d008      	beq.n	13e02 <Buffer_writer+0x3e>
   13df0:	68bb      	ldr	r3, [r7, #8]
   13df2:	3301      	adds	r3, #1
   13df4:	60bb      	str	r3, [r7, #8]
	while (size--) {
   13df6:	68fb      	ldr	r3, [r7, #12]
   13df8:	1e5a      	subs	r2, r3, #1
   13dfa:	60fa      	str	r2, [r7, #12]
   13dfc:	2b00      	cmp	r3, #0
   13dfe:	d1ee      	bne.n	13dde <Buffer_writer+0x1a>
   13e00:	e000      	b.n	13e04 <Buffer_writer+0x40>
		else break;
   13e02:	46c0      	nop			; (mov r8, r8)
	}
	return n;
   13e04:	68bb      	ldr	r3, [r7, #8]
}
   13e06:	0018      	movs	r0, r3
   13e08:	46bd      	mov	sp, r7
   13e0a:	b004      	add	sp, #16
   13e0c:	bd80      	pop	{r7, pc}
   13e0e:	46c0      	nop			; (mov r8, r8)
   13e10:	00028c8b 	.word	0x00028c8b
   13e14:	00013bd1 	.word	0x00013bd1

00013e18 <lcd_printf>:
	return n;
}


void lcd_printf(const  char *fmt, ...)
{
   13e18:	b40f      	push	{r0, r1, r2, r3}
   13e1a:	b580      	push	{r7, lr}
   13e1c:	b084      	sub	sp, #16
   13e1e:	af00      	add	r7, sp, #0
	int num_chars;
	char *lcd_buff;
	num_chars = strlen(fmt) + 3;
   13e20:	69bb      	ldr	r3, [r7, #24]
   13e22:	0018      	movs	r0, r3
   13e24:	4b11      	ldr	r3, [pc, #68]	; (13e6c <lcd_printf+0x54>)
   13e26:	4798      	blx	r3
   13e28:	0003      	movs	r3, r0
   13e2a:	3303      	adds	r3, #3
   13e2c:	60fb      	str	r3, [r7, #12]
	lcd_buff = (char *)malloc(sizeof(char) * num_chars);
   13e2e:	68fb      	ldr	r3, [r7, #12]
   13e30:	0018      	movs	r0, r3
   13e32:	4b0f      	ldr	r3, [pc, #60]	; (13e70 <lcd_printf+0x58>)
   13e34:	4798      	blx	r3
   13e36:	0003      	movs	r3, r0
   13e38:	60bb      	str	r3, [r7, #8]
	va_list args;
	va_start(args, fmt);
   13e3a:	231c      	movs	r3, #28
   13e3c:	18fb      	adds	r3, r7, r3
   13e3e:	607b      	str	r3, [r7, #4]
	vsprintf(lcd_buff,fmt,args);
   13e40:	687a      	ldr	r2, [r7, #4]
   13e42:	69b9      	ldr	r1, [r7, #24]
   13e44:	68bb      	ldr	r3, [r7, #8]
   13e46:	0018      	movs	r0, r3
   13e48:	4b0a      	ldr	r3, [pc, #40]	; (13e74 <lcd_printf+0x5c>)
   13e4a:	4798      	blx	r3
	Buffer_writer(lcd_buff);
   13e4c:	68bb      	ldr	r3, [r7, #8]
   13e4e:	0018      	movs	r0, r3
   13e50:	4b09      	ldr	r3, [pc, #36]	; (13e78 <lcd_printf+0x60>)
   13e52:	4798      	blx	r3
	va_end(args);
	free(lcd_buff);
   13e54:	68bb      	ldr	r3, [r7, #8]
   13e56:	0018      	movs	r0, r3
   13e58:	4b08      	ldr	r3, [pc, #32]	; (13e7c <lcd_printf+0x64>)
   13e5a:	4798      	blx	r3
}
   13e5c:	46c0      	nop			; (mov r8, r8)
   13e5e:	46bd      	mov	sp, r7
   13e60:	b004      	add	sp, #16
   13e62:	bc80      	pop	{r7}
   13e64:	bc08      	pop	{r3}
   13e66:	b004      	add	sp, #16
   13e68:	4718      	bx	r3
   13e6a:	46c0      	nop			; (mov r8, r8)
   13e6c:	00028c8b 	.word	0x00028c8b
   13e70:	00028979 	.word	0x00028979
   13e74:	00028f79 	.word	0x00028f79
   13e78:	00013dc5 	.word	0x00013dc5
   13e7c:	0002898d 	.word	0x0002898d

00013e80 <StringtoUpperCase>:
#include "yalgo.h"
#include "itoa.h"


void StringtoUpperCase(char *str)
{
   13e80:	b580      	push	{r7, lr}
   13e82:	b084      	sub	sp, #16
   13e84:	af00      	add	r7, sp, #0
   13e86:	6078      	str	r0, [r7, #4]
	if (!str) return;
   13e88:	687b      	ldr	r3, [r7, #4]
   13e8a:	2b00      	cmp	r3, #0
   13e8c:	d028      	beq.n	13ee0 <StringtoUpperCase+0x60>
	for (char *p = str; *p; p++) {
   13e8e:	687b      	ldr	r3, [r7, #4]
   13e90:	60fb      	str	r3, [r7, #12]
   13e92:	e020      	b.n	13ed6 <StringtoUpperCase+0x56>
		*p = toupper(*p);
   13e94:	230b      	movs	r3, #11
   13e96:	18fb      	adds	r3, r7, r3
   13e98:	68fa      	ldr	r2, [r7, #12]
   13e9a:	7812      	ldrb	r2, [r2, #0]
   13e9c:	701a      	strb	r2, [r3, #0]
   13e9e:	4b12      	ldr	r3, [pc, #72]	; (13ee8 <StringtoUpperCase+0x68>)
   13ea0:	4798      	blx	r3
   13ea2:	0002      	movs	r2, r0
   13ea4:	230b      	movs	r3, #11
   13ea6:	18fb      	adds	r3, r7, r3
   13ea8:	781b      	ldrb	r3, [r3, #0]
   13eaa:	3301      	adds	r3, #1
   13eac:	18d3      	adds	r3, r2, r3
   13eae:	781b      	ldrb	r3, [r3, #0]
   13eb0:	001a      	movs	r2, r3
   13eb2:	2303      	movs	r3, #3
   13eb4:	4013      	ands	r3, r2
   13eb6:	2b02      	cmp	r3, #2
   13eb8:	d104      	bne.n	13ec4 <StringtoUpperCase+0x44>
   13eba:	230b      	movs	r3, #11
   13ebc:	18fb      	adds	r3, r7, r3
   13ebe:	781b      	ldrb	r3, [r3, #0]
   13ec0:	3b20      	subs	r3, #32
   13ec2:	e002      	b.n	13eca <StringtoUpperCase+0x4a>
   13ec4:	230b      	movs	r3, #11
   13ec6:	18fb      	adds	r3, r7, r3
   13ec8:	781b      	ldrb	r3, [r3, #0]
   13eca:	b2da      	uxtb	r2, r3
   13ecc:	68fb      	ldr	r3, [r7, #12]
   13ece:	701a      	strb	r2, [r3, #0]
	for (char *p = str; *p; p++) {
   13ed0:	68fb      	ldr	r3, [r7, #12]
   13ed2:	3301      	adds	r3, #1
   13ed4:	60fb      	str	r3, [r7, #12]
   13ed6:	68fb      	ldr	r3, [r7, #12]
   13ed8:	781b      	ldrb	r3, [r3, #0]
   13eda:	2b00      	cmp	r3, #0
   13edc:	d1da      	bne.n	13e94 <StringtoUpperCase+0x14>
   13ede:	e000      	b.n	13ee2 <StringtoUpperCase+0x62>
	if (!str) return;
   13ee0:	46c0      	nop			; (mov r8, r8)
	}
}
   13ee2:	46bd      	mov	sp, r7
   13ee4:	b004      	add	sp, #16
   13ee6:	bd80      	pop	{r7, pc}
   13ee8:	0002895d 	.word	0x0002895d

00013eec <StringstartsWith>:

bool StringstartsWith(const char *str,const char *pre)
{
   13eec:	b580      	push	{r7, lr}
   13eee:	b084      	sub	sp, #16
   13ef0:	af00      	add	r7, sp, #0
   13ef2:	6078      	str	r0, [r7, #4]
   13ef4:	6039      	str	r1, [r7, #0]
	size_t lenpre = strlen(pre),
   13ef6:	683b      	ldr	r3, [r7, #0]
   13ef8:	0018      	movs	r0, r3
   13efa:	4b10      	ldr	r3, [pc, #64]	; (13f3c <StringstartsWith+0x50>)
   13efc:	4798      	blx	r3
   13efe:	0003      	movs	r3, r0
   13f00:	60fb      	str	r3, [r7, #12]
	lenstr = strlen(str);
   13f02:	687b      	ldr	r3, [r7, #4]
   13f04:	0018      	movs	r0, r3
   13f06:	4b0d      	ldr	r3, [pc, #52]	; (13f3c <StringstartsWith+0x50>)
   13f08:	4798      	blx	r3
   13f0a:	0003      	movs	r3, r0
   13f0c:	60bb      	str	r3, [r7, #8]
	return lenstr < lenpre ? false : strncmp(pre, str, lenpre) == 0;
   13f0e:	68ba      	ldr	r2, [r7, #8]
   13f10:	68fb      	ldr	r3, [r7, #12]
   13f12:	429a      	cmp	r2, r3
   13f14:	d309      	bcc.n	13f2a <StringstartsWith+0x3e>
   13f16:	68fa      	ldr	r2, [r7, #12]
   13f18:	6879      	ldr	r1, [r7, #4]
   13f1a:	683b      	ldr	r3, [r7, #0]
   13f1c:	0018      	movs	r0, r3
   13f1e:	4b08      	ldr	r3, [pc, #32]	; (13f40 <StringstartsWith+0x54>)
   13f20:	4798      	blx	r3
   13f22:	1e03      	subs	r3, r0, #0
   13f24:	d101      	bne.n	13f2a <StringstartsWith+0x3e>
   13f26:	2301      	movs	r3, #1
   13f28:	e000      	b.n	13f2c <StringstartsWith+0x40>
   13f2a:	2300      	movs	r3, #0
   13f2c:	1c1a      	adds	r2, r3, #0
   13f2e:	2301      	movs	r3, #1
   13f30:	4013      	ands	r3, r2
   13f32:	b2db      	uxtb	r3, r3
}
   13f34:	0018      	movs	r0, r3
   13f36:	46bd      	mov	sp, r7
   13f38:	b004      	add	sp, #16
   13f3a:	bd80      	pop	{r7, pc}
   13f3c:	00028c8b 	.word	0x00028c8b
   13f40:	00028c99 	.word	0x00028c99

00013f44 <NVIC_SystemReset>:
/** \brief  System Reset

    The function initiates a system reset request to reset the MCU.
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
   13f44:	b580      	push	{r7, lr}
   13f46:	af00      	add	r7, sp, #0
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
   13f48:	f3bf 8f4f 	dsb	sy
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
   13f4c:	4b02      	ldr	r3, [pc, #8]	; (13f58 <NVIC_SystemReset+0x14>)
   13f4e:	4a03      	ldr	r2, [pc, #12]	; (13f5c <NVIC_SystemReset+0x18>)
   13f50:	60da      	str	r2, [r3, #12]
   13f52:	f3bf 8f4f 	dsb	sy
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                     /* Ensure completion of memory access */
  while(1);                                                    /* wait until reset */
   13f56:	e7fe      	b.n	13f56 <NVIC_SystemReset+0x12>
   13f58:	e000ed00 	.word	0xe000ed00
   13f5c:	05fa0004 	.word	0x05fa0004

00013f60 <system_pinmux_get_group_from_gpio_pin>:
{
   13f60:	b580      	push	{r7, lr}
   13f62:	b084      	sub	sp, #16
   13f64:	af00      	add	r7, sp, #0
   13f66:	0002      	movs	r2, r0
   13f68:	1dfb      	adds	r3, r7, #7
   13f6a:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   13f6c:	230f      	movs	r3, #15
   13f6e:	18fb      	adds	r3, r7, r3
   13f70:	1dfa      	adds	r2, r7, #7
   13f72:	7812      	ldrb	r2, [r2, #0]
   13f74:	09d2      	lsrs	r2, r2, #7
   13f76:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   13f78:	230e      	movs	r3, #14
   13f7a:	18fb      	adds	r3, r7, r3
   13f7c:	1dfa      	adds	r2, r7, #7
   13f7e:	7812      	ldrb	r2, [r2, #0]
   13f80:	0952      	lsrs	r2, r2, #5
   13f82:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   13f84:	4b0d      	ldr	r3, [pc, #52]	; (13fbc <system_pinmux_get_group_from_gpio_pin+0x5c>)
   13f86:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   13f88:	230f      	movs	r3, #15
   13f8a:	18fb      	adds	r3, r7, r3
   13f8c:	781b      	ldrb	r3, [r3, #0]
   13f8e:	2b00      	cmp	r3, #0
   13f90:	d10f      	bne.n	13fb2 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   13f92:	230f      	movs	r3, #15
   13f94:	18fb      	adds	r3, r7, r3
   13f96:	781b      	ldrb	r3, [r3, #0]
   13f98:	009b      	lsls	r3, r3, #2
   13f9a:	2210      	movs	r2, #16
   13f9c:	4694      	mov	ip, r2
   13f9e:	44bc      	add	ip, r7
   13fa0:	4463      	add	r3, ip
   13fa2:	3b08      	subs	r3, #8
   13fa4:	681a      	ldr	r2, [r3, #0]
   13fa6:	230e      	movs	r3, #14
   13fa8:	18fb      	adds	r3, r7, r3
   13faa:	781b      	ldrb	r3, [r3, #0]
   13fac:	01db      	lsls	r3, r3, #7
   13fae:	18d3      	adds	r3, r2, r3
   13fb0:	e000      	b.n	13fb4 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   13fb2:	2300      	movs	r3, #0
}
   13fb4:	0018      	movs	r0, r3
   13fb6:	46bd      	mov	sp, r7
   13fb8:	b004      	add	sp, #16
   13fba:	bd80      	pop	{r7, pc}
   13fbc:	41004400 	.word	0x41004400

00013fc0 <system_reset>:
 * Resets the MCU and all associated peripherals and registers, except RTC, all 32KHz sources,
 * WDT (if ALWAYSON is set) and GCLK (if WRTLOCK is set).
 *
 */
static inline void system_reset(void)
{
   13fc0:	b580      	push	{r7, lr}
   13fc2:	af00      	add	r7, sp, #0
	NVIC_SystemReset();
   13fc4:	4b02      	ldr	r3, [pc, #8]	; (13fd0 <system_reset+0x10>)
   13fc6:	4798      	blx	r3
}
   13fc8:	46c0      	nop			; (mov r8, r8)
   13fca:	46bd      	mov	sp, r7
   13fcc:	bd80      	pop	{r7, pc}
   13fce:	46c0      	nop			; (mov r8, r8)
   13fd0:	00013f45 	.word	0x00013f45

00013fd4 <port_get_group_from_gpio_pin>:
{
   13fd4:	b580      	push	{r7, lr}
   13fd6:	b082      	sub	sp, #8
   13fd8:	af00      	add	r7, sp, #0
   13fda:	0002      	movs	r2, r0
   13fdc:	1dfb      	adds	r3, r7, #7
   13fde:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   13fe0:	1dfb      	adds	r3, r7, #7
   13fe2:	781b      	ldrb	r3, [r3, #0]
   13fe4:	0018      	movs	r0, r3
   13fe6:	4b03      	ldr	r3, [pc, #12]	; (13ff4 <port_get_group_from_gpio_pin+0x20>)
   13fe8:	4798      	blx	r3
   13fea:	0003      	movs	r3, r0
}
   13fec:	0018      	movs	r0, r3
   13fee:	46bd      	mov	sp, r7
   13ff0:	b002      	add	sp, #8
   13ff2:	bd80      	pop	{r7, pc}
   13ff4:	00013f61 	.word	0x00013f61

00013ff8 <port_get_config_defaults>:
{
   13ff8:	b580      	push	{r7, lr}
   13ffa:	b082      	sub	sp, #8
   13ffc:	af00      	add	r7, sp, #0
   13ffe:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
   14000:	687b      	ldr	r3, [r7, #4]
   14002:	2200      	movs	r2, #0
   14004:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   14006:	687b      	ldr	r3, [r7, #4]
   14008:	2201      	movs	r2, #1
   1400a:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
   1400c:	687b      	ldr	r3, [r7, #4]
   1400e:	2200      	movs	r2, #0
   14010:	709a      	strb	r2, [r3, #2]
}
   14012:	46c0      	nop			; (mov r8, r8)
   14014:	46bd      	mov	sp, r7
   14016:	b002      	add	sp, #8
   14018:	bd80      	pop	{r7, pc}
	...

0001401c <port_pin_get_input_level>:
{
   1401c:	b580      	push	{r7, lr}
   1401e:	b084      	sub	sp, #16
   14020:	af00      	add	r7, sp, #0
   14022:	0002      	movs	r2, r0
   14024:	1dfb      	adds	r3, r7, #7
   14026:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   14028:	1dfb      	adds	r3, r7, #7
   1402a:	781b      	ldrb	r3, [r3, #0]
   1402c:	0018      	movs	r0, r3
   1402e:	4b0b      	ldr	r3, [pc, #44]	; (1405c <port_pin_get_input_level+0x40>)
   14030:	4798      	blx	r3
   14032:	0003      	movs	r3, r0
   14034:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   14036:	1dfb      	adds	r3, r7, #7
   14038:	781b      	ldrb	r3, [r3, #0]
   1403a:	221f      	movs	r2, #31
   1403c:	4013      	ands	r3, r2
   1403e:	2201      	movs	r2, #1
   14040:	409a      	lsls	r2, r3
   14042:	0013      	movs	r3, r2
   14044:	60bb      	str	r3, [r7, #8]
	return (port_base->IN.reg & pin_mask);
   14046:	68fb      	ldr	r3, [r7, #12]
   14048:	6a1b      	ldr	r3, [r3, #32]
   1404a:	68ba      	ldr	r2, [r7, #8]
   1404c:	4013      	ands	r3, r2
   1404e:	1e5a      	subs	r2, r3, #1
   14050:	4193      	sbcs	r3, r2
   14052:	b2db      	uxtb	r3, r3
}
   14054:	0018      	movs	r0, r3
   14056:	46bd      	mov	sp, r7
   14058:	b004      	add	sp, #16
   1405a:	bd80      	pop	{r7, pc}
   1405c:	00013fd5 	.word	0x00013fd5

00014060 <port_pin_set_output_level>:
{
   14060:	b580      	push	{r7, lr}
   14062:	b084      	sub	sp, #16
   14064:	af00      	add	r7, sp, #0
   14066:	0002      	movs	r2, r0
   14068:	1dfb      	adds	r3, r7, #7
   1406a:	701a      	strb	r2, [r3, #0]
   1406c:	1dbb      	adds	r3, r7, #6
   1406e:	1c0a      	adds	r2, r1, #0
   14070:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   14072:	1dfb      	adds	r3, r7, #7
   14074:	781b      	ldrb	r3, [r3, #0]
   14076:	0018      	movs	r0, r3
   14078:	4b0d      	ldr	r3, [pc, #52]	; (140b0 <port_pin_set_output_level+0x50>)
   1407a:	4798      	blx	r3
   1407c:	0003      	movs	r3, r0
   1407e:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   14080:	1dfb      	adds	r3, r7, #7
   14082:	781b      	ldrb	r3, [r3, #0]
   14084:	221f      	movs	r2, #31
   14086:	4013      	ands	r3, r2
   14088:	2201      	movs	r2, #1
   1408a:	409a      	lsls	r2, r3
   1408c:	0013      	movs	r3, r2
   1408e:	60bb      	str	r3, [r7, #8]
	if (level) {
   14090:	1dbb      	adds	r3, r7, #6
   14092:	781b      	ldrb	r3, [r3, #0]
   14094:	2b00      	cmp	r3, #0
   14096:	d003      	beq.n	140a0 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   14098:	68fb      	ldr	r3, [r7, #12]
   1409a:	68ba      	ldr	r2, [r7, #8]
   1409c:	619a      	str	r2, [r3, #24]
}
   1409e:	e002      	b.n	140a6 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   140a0:	68fb      	ldr	r3, [r7, #12]
   140a2:	68ba      	ldr	r2, [r7, #8]
   140a4:	615a      	str	r2, [r3, #20]
}
   140a6:	46c0      	nop			; (mov r8, r8)
   140a8:	46bd      	mov	sp, r7
   140aa:	b004      	add	sp, #16
   140ac:	bd80      	pop	{r7, pc}
   140ae:	46c0      	nop			; (mov r8, r8)
   140b0:	00013fd5 	.word	0x00013fd5

000140b4 <setObtainEvent>:

static void vTask_GSM_service(void *params);


void setObtainEvent(void)
{
   140b4:	b580      	push	{r7, lr}
   140b6:	af00      	add	r7, sp, #0
	if (!obtainNewEvent  && xTaskGetTickCount() - obtainEventTimer > 1000)
   140b8:	4b0b      	ldr	r3, [pc, #44]	; (140e8 <setObtainEvent+0x34>)
   140ba:	781b      	ldrb	r3, [r3, #0]
   140bc:	2201      	movs	r2, #1
   140be:	4053      	eors	r3, r2
   140c0:	b2db      	uxtb	r3, r3
   140c2:	2b00      	cmp	r3, #0
   140c4:	d00c      	beq.n	140e0 <setObtainEvent+0x2c>
   140c6:	4b09      	ldr	r3, [pc, #36]	; (140ec <setObtainEvent+0x38>)
   140c8:	4798      	blx	r3
   140ca:	0002      	movs	r2, r0
   140cc:	4b08      	ldr	r3, [pc, #32]	; (140f0 <setObtainEvent+0x3c>)
   140ce:	681b      	ldr	r3, [r3, #0]
   140d0:	1ad2      	subs	r2, r2, r3
   140d2:	23fa      	movs	r3, #250	; 0xfa
   140d4:	009b      	lsls	r3, r3, #2
   140d6:	429a      	cmp	r2, r3
   140d8:	d902      	bls.n	140e0 <setObtainEvent+0x2c>
	{
		obtainNewEvent = true;
   140da:	4b03      	ldr	r3, [pc, #12]	; (140e8 <setObtainEvent+0x34>)
   140dc:	2201      	movs	r2, #1
   140de:	701a      	strb	r2, [r3, #0]
	}
}
   140e0:	46c0      	nop			; (mov r8, r8)
   140e2:	46bd      	mov	sp, r7
   140e4:	bd80      	pop	{r7, pc}
   140e6:	46c0      	nop			; (mov r8, r8)
   140e8:	20000766 	.word	0x20000766
   140ec:	0001fe3d 	.word	0x0001fe3d
   140f0:	200007f0 	.word	0x200007f0

000140f4 <operateOnStagedEvent>:

void operateOnStagedEvent(void)
{
   140f4:	b580      	push	{r7, lr}
   140f6:	b082      	sub	sp, #8
   140f8:	af00      	add	r7, sp, #0
	uint8_t temp1= 1;
   140fa:	1dfb      	adds	r3, r7, #7
   140fc:	2201      	movs	r2, #1
   140fe:	701a      	strb	r2, [r3, #0]
	if(eventStaged)
   14100:	4b23      	ldr	r3, [pc, #140]	; (14190 <operateOnStagedEvent+0x9c>)
   14102:	781b      	ldrb	r3, [r3, #0]
   14104:	2b00      	cmp	r3, #0
   14106:	d003      	beq.n	14110 <operateOnStagedEvent+0x1c>
	{
		temp1 = user_settings_parameter_struct.eventStageAddress;
   14108:	1dfb      	adds	r3, r7, #7
   1410a:	4a22      	ldr	r2, [pc, #136]	; (14194 <operateOnStagedEvent+0xa0>)
   1410c:	7a12      	ldrb	r2, [r2, #8]
   1410e:	701a      	strb	r2, [r3, #0]
	}
	
	if(obtainNewEvent && (retries==1 || (xTaskGetTickCount()-tempEventStageTime>((unsigned long)temp1*60000L))))
   14110:	4b21      	ldr	r3, [pc, #132]	; (14198 <operateOnStagedEvent+0xa4>)
   14112:	781b      	ldrb	r3, [r3, #0]
   14114:	2b00      	cmp	r3, #0
   14116:	d037      	beq.n	14188 <operateOnStagedEvent+0x94>
   14118:	4b20      	ldr	r3, [pc, #128]	; (1419c <operateOnStagedEvent+0xa8>)
   1411a:	781b      	ldrb	r3, [r3, #0]
   1411c:	2b01      	cmp	r3, #1
   1411e:	d00b      	beq.n	14138 <operateOnStagedEvent+0x44>
   14120:	4b1f      	ldr	r3, [pc, #124]	; (141a0 <operateOnStagedEvent+0xac>)
   14122:	4798      	blx	r3
   14124:	0002      	movs	r2, r0
   14126:	4b1f      	ldr	r3, [pc, #124]	; (141a4 <operateOnStagedEvent+0xb0>)
   14128:	681b      	ldr	r3, [r3, #0]
   1412a:	1ad2      	subs	r2, r2, r3
   1412c:	1dfb      	adds	r3, r7, #7
   1412e:	781b      	ldrb	r3, [r3, #0]
   14130:	491d      	ldr	r1, [pc, #116]	; (141a8 <operateOnStagedEvent+0xb4>)
   14132:	434b      	muls	r3, r1
   14134:	429a      	cmp	r2, r3
   14136:	d927      	bls.n	14188 <operateOnStagedEvent+0x94>
	{
		if (factory_settings_parameter_struct.ENABLE_M2M)
   14138:	4b1c      	ldr	r3, [pc, #112]	; (141ac <operateOnStagedEvent+0xb8>)
   1413a:	78db      	ldrb	r3, [r3, #3]
   1413c:	2b00      	cmp	r3, #0
   1413e:	d01a      	beq.n	14176 <operateOnStagedEvent+0x82>
		{
			if (eventStaged)
   14140:	4b13      	ldr	r3, [pc, #76]	; (14190 <operateOnStagedEvent+0x9c>)
   14142:	781b      	ldrb	r3, [r3, #0]
   14144:	2b00      	cmp	r3, #0
   14146:	d007      	beq.n	14158 <operateOnStagedEvent+0x64>
			{
				actionType=stagedEventType;
   14148:	4b19      	ldr	r3, [pc, #100]	; (141b0 <operateOnStagedEvent+0xbc>)
   1414a:	781a      	ldrb	r2, [r3, #0]
   1414c:	4b19      	ldr	r3, [pc, #100]	; (141b4 <operateOnStagedEvent+0xc0>)
   1414e:	701a      	strb	r2, [r3, #0]
				eventStaged=false;
   14150:	4b0f      	ldr	r3, [pc, #60]	; (14190 <operateOnStagedEvent+0x9c>)
   14152:	2200      	movs	r2, #0
   14154:	701a      	strb	r2, [r3, #0]
   14156:	e015      	b.n	14184 <operateOnStagedEvent+0x90>
			}
			else if (m2mEventStaged)
   14158:	4b17      	ldr	r3, [pc, #92]	; (141b8 <operateOnStagedEvent+0xc4>)
   1415a:	781b      	ldrb	r3, [r3, #0]
   1415c:	2b00      	cmp	r3, #0
   1415e:	d011      	beq.n	14184 <operateOnStagedEvent+0x90>
			{
				m2mEventNo=stagedEventType;
   14160:	4b13      	ldr	r3, [pc, #76]	; (141b0 <operateOnStagedEvent+0xbc>)
   14162:	781a      	ldrb	r2, [r3, #0]
   14164:	4b15      	ldr	r3, [pc, #84]	; (141bc <operateOnStagedEvent+0xc8>)
   14166:	701a      	strb	r2, [r3, #0]
				m2mEvent=true;
   14168:	4b15      	ldr	r3, [pc, #84]	; (141c0 <operateOnStagedEvent+0xcc>)
   1416a:	2201      	movs	r2, #1
   1416c:	701a      	strb	r2, [r3, #0]
				m2mEventStaged=false;
   1416e:	4b12      	ldr	r3, [pc, #72]	; (141b8 <operateOnStagedEvent+0xc4>)
   14170:	2200      	movs	r2, #0
   14172:	701a      	strb	r2, [r3, #0]
   14174:	e006      	b.n	14184 <operateOnStagedEvent+0x90>
			}
		}
		else
		{
			actionType=stagedEventType;
   14176:	4b0e      	ldr	r3, [pc, #56]	; (141b0 <operateOnStagedEvent+0xbc>)
   14178:	781a      	ldrb	r2, [r3, #0]
   1417a:	4b0e      	ldr	r3, [pc, #56]	; (141b4 <operateOnStagedEvent+0xc0>)
   1417c:	701a      	strb	r2, [r3, #0]
			eventStaged=false;
   1417e:	4b04      	ldr	r3, [pc, #16]	; (14190 <operateOnStagedEvent+0x9c>)
   14180:	2200      	movs	r2, #0
   14182:	701a      	strb	r2, [r3, #0]
		}
		makeResponseAction();
   14184:	4b0f      	ldr	r3, [pc, #60]	; (141c4 <operateOnStagedEvent+0xd0>)
   14186:	4798      	blx	r3
	}
}
   14188:	46c0      	nop			; (mov r8, r8)
   1418a:	46bd      	mov	sp, r7
   1418c:	b002      	add	sp, #8
   1418e:	bd80      	pop	{r7, pc}
   14190:	200007b6 	.word	0x200007b6
   14194:	20000660 	.word	0x20000660
   14198:	20000766 	.word	0x20000766
   1419c:	200006e1 	.word	0x200006e1
   141a0:	0001fe3d 	.word	0x0001fe3d
   141a4:	200007d0 	.word	0x200007d0
   141a8:	0000ea60 	.word	0x0000ea60
   141ac:	20000638 	.word	0x20000638
   141b0:	20000768 	.word	0x20000768
   141b4:	2000075b 	.word	0x2000075b
   141b8:	2000077a 	.word	0x2000077a
   141bc:	20000729 	.word	0x20000729
   141c0:	2000073b 	.word	0x2000073b
   141c4:	000141c9 	.word	0x000141c9

000141c8 <makeResponseAction>:

void makeResponseAction(void)
{
   141c8:	b580      	push	{r7, lr}
   141ca:	af00      	add	r7, sp, #0
	if(user_settings_parameter_struct.responseAddress != 'N' || m2mEvent)
   141cc:	4b07      	ldr	r3, [pc, #28]	; (141ec <makeResponseAction+0x24>)
   141ce:	795b      	ldrb	r3, [r3, #5]
   141d0:	2b4e      	cmp	r3, #78	; 0x4e
   141d2:	d103      	bne.n	141dc <makeResponseAction+0x14>
   141d4:	4b06      	ldr	r3, [pc, #24]	; (141f0 <makeResponseAction+0x28>)
   141d6:	781b      	ldrb	r3, [r3, #0]
   141d8:	2b00      	cmp	r3, #0
   141da:	d004      	beq.n	141e6 <makeResponseAction+0x1e>
	{
		freezeIncomingCalls = true;
   141dc:	4b05      	ldr	r3, [pc, #20]	; (141f4 <makeResponseAction+0x2c>)
   141de:	2201      	movs	r2, #1
   141e0:	701a      	strb	r2, [r3, #0]
		//acceptCommands();
		makeCall();
   141e2:	4b05      	ldr	r3, [pc, #20]	; (141f8 <makeResponseAction+0x30>)
   141e4:	4798      	blx	r3
	}
}
   141e6:	46c0      	nop			; (mov r8, r8)
   141e8:	46bd      	mov	sp, r7
   141ea:	bd80      	pop	{r7, pc}
   141ec:	20000660 	.word	0x20000660
   141f0:	2000073b 	.word	0x2000073b
   141f4:	2000073c 	.word	0x2000073c
   141f8:	00014431 	.word	0x00014431

000141fc <endCall>:

void endCall(void)
{
   141fc:	b580      	push	{r7, lr}
   141fe:	af00      	add	r7, sp, #0
	nr  = 0;
   14200:	4b6d      	ldr	r3, [pc, #436]	; (143b8 <endCall+0x1bc>)
   14202:	2200      	movs	r2, #0
   14204:	701a      	strb	r2, [r3, #0]
	inCall=false;
   14206:	4b6d      	ldr	r3, [pc, #436]	; (143bc <endCall+0x1c0>)
   14208:	2200      	movs	r2, #0
   1420a:	701a      	strb	r2, [r3, #0]
	
	gsm_hangup_call();
   1420c:	4b6c      	ldr	r3, [pc, #432]	; (143c0 <endCall+0x1c4>)
   1420e:	4798      	blx	r3
	setCallStateOnLCD(LCDCALLSTATE_IDLE,NULL,false);
   14210:	2200      	movs	r2, #0
   14212:	2100      	movs	r1, #0
   14214:	2000      	movs	r0, #0
   14216:	4b6b      	ldr	r3, [pc, #428]	; (143c4 <endCall+0x1c8>)
   14218:	4798      	blx	r3
	//unsigned long temp = xTaskGetTickCount();
	vTaskDelay(1000);
   1421a:	23fa      	movs	r3, #250	; 0xfa
   1421c:	009b      	lsls	r3, r3, #2
   1421e:	0018      	movs	r0, r3
   14220:	4b69      	ldr	r3, [pc, #420]	; (143c8 <endCall+0x1cc>)
   14222:	4798      	blx	r3
	freezeIncomingCalls = false;
   14224:	4b69      	ldr	r3, [pc, #420]	; (143cc <endCall+0x1d0>)
   14226:	2200      	movs	r2, #0
   14228:	701a      	strb	r2, [r3, #0]
	if (factory_settings_parameter_struct.ENABLE_CURRENT)
   1422a:	4b69      	ldr	r3, [pc, #420]	; (143d0 <endCall+0x1d4>)
   1422c:	785b      	ldrb	r3, [r3, #1]
   1422e:	2b00      	cmp	r3, #0
   14230:	d002      	beq.n	14238 <endCall+0x3c>
	{
		zeroPressed=false;
   14232:	4b68      	ldr	r3, [pc, #416]	; (143d4 <endCall+0x1d8>)
   14234:	2200      	movs	r2, #0
   14236:	701a      	strb	r2, [r3, #0]
	}
	
	if ((factory_settings_parameter_struct.ENABLE_M2M == true)?
   14238:	4b65      	ldr	r3, [pc, #404]	; (143d0 <endCall+0x1d4>)
   1423a:	78db      	ldrb	r3, [r3, #3]
   1423c:	2b01      	cmp	r3, #1
   1423e:	d11d      	bne.n	1427c <endCall+0x80>
	((currentStatus == 'N' || currentStatus == 'R') && currentCallStatus == 'O' && !m2mEvent):
   14240:	4b65      	ldr	r3, [pc, #404]	; (143d8 <endCall+0x1dc>)
   14242:	781b      	ldrb	r3, [r3, #0]
   14244:	b2db      	uxtb	r3, r3
   14246:	2b4e      	cmp	r3, #78	; 0x4e
   14248:	d004      	beq.n	14254 <endCall+0x58>
   1424a:	4b63      	ldr	r3, [pc, #396]	; (143d8 <endCall+0x1dc>)
   1424c:	781b      	ldrb	r3, [r3, #0]
   1424e:	b2db      	uxtb	r3, r3
   14250:	2b52      	cmp	r3, #82	; 0x52
   14252:	d10d      	bne.n	14270 <endCall+0x74>
   14254:	4b61      	ldr	r3, [pc, #388]	; (143dc <endCall+0x1e0>)
   14256:	781b      	ldrb	r3, [r3, #0]
   14258:	b2db      	uxtb	r3, r3
   1425a:	2b4f      	cmp	r3, #79	; 0x4f
   1425c:	d108      	bne.n	14270 <endCall+0x74>
   1425e:	4b60      	ldr	r3, [pc, #384]	; (143e0 <endCall+0x1e4>)
   14260:	781b      	ldrb	r3, [r3, #0]
   14262:	2201      	movs	r2, #1
   14264:	4053      	eors	r3, r2
   14266:	b2db      	uxtb	r3, r3
   14268:	2b00      	cmp	r3, #0
   1426a:	d001      	beq.n	14270 <endCall+0x74>
   1426c:	2301      	movs	r3, #1
   1426e:	e000      	b.n	14272 <endCall+0x76>
   14270:	2300      	movs	r3, #0
	if ((factory_settings_parameter_struct.ENABLE_M2M == true)?
   14272:	1c1a      	adds	r2, r3, #0
   14274:	2301      	movs	r3, #1
   14276:	4013      	ands	r3, r2
   14278:	b2db      	uxtb	r3, r3
   1427a:	e015      	b.n	142a8 <endCall+0xac>
	((currentStatus == 'N' || currentStatus == 'R') && currentCallStatus == 'O'))
   1427c:	4b56      	ldr	r3, [pc, #344]	; (143d8 <endCall+0x1dc>)
   1427e:	781b      	ldrb	r3, [r3, #0]
   14280:	b2db      	uxtb	r3, r3
   14282:	2b4e      	cmp	r3, #78	; 0x4e
   14284:	d004      	beq.n	14290 <endCall+0x94>
   14286:	4b54      	ldr	r3, [pc, #336]	; (143d8 <endCall+0x1dc>)
   14288:	781b      	ldrb	r3, [r3, #0]
   1428a:	b2db      	uxtb	r3, r3
   1428c:	2b52      	cmp	r3, #82	; 0x52
   1428e:	d106      	bne.n	1429e <endCall+0xa2>
   14290:	4b52      	ldr	r3, [pc, #328]	; (143dc <endCall+0x1e0>)
   14292:	781b      	ldrb	r3, [r3, #0]
   14294:	b2db      	uxtb	r3, r3
   14296:	2b4f      	cmp	r3, #79	; 0x4f
   14298:	d101      	bne.n	1429e <endCall+0xa2>
   1429a:	2301      	movs	r3, #1
   1429c:	e000      	b.n	142a0 <endCall+0xa4>
   1429e:	2300      	movs	r3, #0
	if ((factory_settings_parameter_struct.ENABLE_M2M == true)?
   142a0:	1c1a      	adds	r2, r3, #0
   142a2:	2301      	movs	r3, #1
   142a4:	4013      	ands	r3, r2
   142a6:	b2db      	uxtb	r3, r3
   142a8:	2b00      	cmp	r3, #0
   142aa:	d021      	beq.n	142f0 <endCall+0xf4>
	{
		if((retries==0) && !callAccepted && (user_settings_parameter_struct.responseAddress=='T') && (user_count_struct.current_user_no_count>1))
   142ac:	4b4d      	ldr	r3, [pc, #308]	; (143e4 <endCall+0x1e8>)
   142ae:	781b      	ldrb	r3, [r3, #0]
   142b0:	2b00      	cmp	r3, #0
   142b2:	d11d      	bne.n	142f0 <endCall+0xf4>
   142b4:	4b4c      	ldr	r3, [pc, #304]	; (143e8 <endCall+0x1ec>)
   142b6:	781b      	ldrb	r3, [r3, #0]
   142b8:	2201      	movs	r2, #1
   142ba:	4053      	eors	r3, r2
   142bc:	b2db      	uxtb	r3, r3
   142be:	2b00      	cmp	r3, #0
   142c0:	d016      	beq.n	142f0 <endCall+0xf4>
   142c2:	4b4a      	ldr	r3, [pc, #296]	; (143ec <endCall+0x1f0>)
   142c4:	795b      	ldrb	r3, [r3, #5]
   142c6:	2b54      	cmp	r3, #84	; 0x54
   142c8:	d112      	bne.n	142f0 <endCall+0xf4>
   142ca:	4b49      	ldr	r3, [pc, #292]	; (143f0 <endCall+0x1f4>)
   142cc:	789b      	ldrb	r3, [r3, #2]
   142ce:	2b01      	cmp	r3, #1
   142d0:	d90e      	bls.n	142f0 <endCall+0xf4>
		{
			retries=1;
   142d2:	4b44      	ldr	r3, [pc, #272]	; (143e4 <endCall+0x1e8>)
   142d4:	2201      	movs	r2, #1
   142d6:	701a      	strb	r2, [r3, #0]
			eventStaged=true;
   142d8:	4b46      	ldr	r3, [pc, #280]	; (143f4 <endCall+0x1f8>)
   142da:	2201      	movs	r2, #1
   142dc:	701a      	strb	r2, [r3, #0]
			tempEventStageTime=xTaskGetTickCount();
   142de:	4b46      	ldr	r3, [pc, #280]	; (143f8 <endCall+0x1fc>)
   142e0:	4798      	blx	r3
   142e2:	0002      	movs	r2, r0
   142e4:	4b45      	ldr	r3, [pc, #276]	; (143fc <endCall+0x200>)
   142e6:	601a      	str	r2, [r3, #0]
			stagedEventType=actionType;
   142e8:	4b45      	ldr	r3, [pc, #276]	; (14400 <endCall+0x204>)
   142ea:	781a      	ldrb	r2, [r3, #0]
   142ec:	4b45      	ldr	r3, [pc, #276]	; (14404 <endCall+0x208>)
   142ee:	701a      	strb	r2, [r3, #0]
		}
	}
	
	if (factory_settings_parameter_struct.ENABLE_M2M)
   142f0:	4b37      	ldr	r3, [pc, #220]	; (143d0 <endCall+0x1d4>)
   142f2:	78db      	ldrb	r3, [r3, #3]
   142f4:	2b00      	cmp	r3, #0
   142f6:	d047      	beq.n	14388 <endCall+0x18c>
	{
		if((currentStatus == 'I' || currentStatus=='R') && currentCallStatus == 'O' && m2mEvent && m2m_Numbers_struct.m2mSetting)
   142f8:	4b37      	ldr	r3, [pc, #220]	; (143d8 <endCall+0x1dc>)
   142fa:	781b      	ldrb	r3, [r3, #0]
   142fc:	b2db      	uxtb	r3, r3
   142fe:	2b49      	cmp	r3, #73	; 0x49
   14300:	d004      	beq.n	1430c <endCall+0x110>
   14302:	4b35      	ldr	r3, [pc, #212]	; (143d8 <endCall+0x1dc>)
   14304:	781b      	ldrb	r3, [r3, #0]
   14306:	b2db      	uxtb	r3, r3
   14308:	2b52      	cmp	r3, #82	; 0x52
   1430a:	d137      	bne.n	1437c <endCall+0x180>
   1430c:	4b33      	ldr	r3, [pc, #204]	; (143dc <endCall+0x1e0>)
   1430e:	781b      	ldrb	r3, [r3, #0]
   14310:	b2db      	uxtb	r3, r3
   14312:	2b4f      	cmp	r3, #79	; 0x4f
   14314:	d132      	bne.n	1437c <endCall+0x180>
   14316:	4b32      	ldr	r3, [pc, #200]	; (143e0 <endCall+0x1e4>)
   14318:	781b      	ldrb	r3, [r3, #0]
   1431a:	2b00      	cmp	r3, #0
   1431c:	d02e      	beq.n	1437c <endCall+0x180>
   1431e:	4b3a      	ldr	r3, [pc, #232]	; (14408 <endCall+0x20c>)
   14320:	795b      	ldrb	r3, [r3, #5]
   14322:	2b00      	cmp	r3, #0
   14324:	d02a      	beq.n	1437c <endCall+0x180>
		{
			m2mEventCalls++;
   14326:	4b39      	ldr	r3, [pc, #228]	; (1440c <endCall+0x210>)
   14328:	781b      	ldrb	r3, [r3, #0]
   1432a:	3301      	adds	r3, #1
   1432c:	b2da      	uxtb	r2, r3
   1432e:	4b37      	ldr	r3, [pc, #220]	; (1440c <endCall+0x210>)
   14330:	701a      	strb	r2, [r3, #0]
			if(m2mAck)
   14332:	4b37      	ldr	r3, [pc, #220]	; (14410 <endCall+0x214>)
   14334:	781b      	ldrb	r3, [r3, #0]
   14336:	2b00      	cmp	r3, #0
   14338:	d006      	beq.n	14348 <endCall+0x14c>
			{
				setM2MEventState(m2mEventNo,ME_CLEARED);
   1433a:	4b36      	ldr	r3, [pc, #216]	; (14414 <endCall+0x218>)
   1433c:	781b      	ldrb	r3, [r3, #0]
   1433e:	2100      	movs	r1, #0
   14340:	0018      	movs	r0, r3
   14342:	4b35      	ldr	r3, [pc, #212]	; (14418 <endCall+0x21c>)
   14344:	4798      	blx	r3
   14346:	e016      	b.n	14376 <endCall+0x17a>
			}
			else
			{
				if(m2mEventCalls<2)
   14348:	4b30      	ldr	r3, [pc, #192]	; (1440c <endCall+0x210>)
   1434a:	781b      	ldrb	r3, [r3, #0]
   1434c:	2b01      	cmp	r3, #1
   1434e:	d80c      	bhi.n	1436a <endCall+0x16e>
				{
					tempEventStageTime=xTaskGetTickCount();
   14350:	4b29      	ldr	r3, [pc, #164]	; (143f8 <endCall+0x1fc>)
   14352:	4798      	blx	r3
   14354:	0002      	movs	r2, r0
   14356:	4b29      	ldr	r3, [pc, #164]	; (143fc <endCall+0x200>)
   14358:	601a      	str	r2, [r3, #0]
					stagedEventType=m2mEventNo;
   1435a:	4b2e      	ldr	r3, [pc, #184]	; (14414 <endCall+0x218>)
   1435c:	781a      	ldrb	r2, [r3, #0]
   1435e:	4b29      	ldr	r3, [pc, #164]	; (14404 <endCall+0x208>)
   14360:	701a      	strb	r2, [r3, #0]
					m2mEventStaged=true;
   14362:	4b2e      	ldr	r3, [pc, #184]	; (1441c <endCall+0x220>)
   14364:	2201      	movs	r2, #1
   14366:	701a      	strb	r2, [r3, #0]
   14368:	e005      	b.n	14376 <endCall+0x17a>
				}
				else
				{
					setM2MEventState(m2mEventNo,ME_NOTAVAILABLE);
   1436a:	4b2a      	ldr	r3, [pc, #168]	; (14414 <endCall+0x218>)
   1436c:	781b      	ldrb	r3, [r3, #0]
   1436e:	2103      	movs	r1, #3
   14370:	0018      	movs	r0, r3
   14372:	4b29      	ldr	r3, [pc, #164]	; (14418 <endCall+0x21c>)
   14374:	4798      	blx	r3
				}
			}
			m2mEvent = false;
   14376:	4b1a      	ldr	r3, [pc, #104]	; (143e0 <endCall+0x1e4>)
   14378:	2200      	movs	r2, #0
   1437a:	701a      	strb	r2, [r3, #0]
		}
		keyPressed=false;
   1437c:	4b28      	ldr	r3, [pc, #160]	; (14420 <endCall+0x224>)
   1437e:	2200      	movs	r2, #0
   14380:	701a      	strb	r2, [r3, #0]
		m2mAck=false;
   14382:	4b23      	ldr	r3, [pc, #140]	; (14410 <endCall+0x214>)
   14384:	2200      	movs	r2, #0
   14386:	701a      	strb	r2, [r3, #0]
	}
	callAccepted = false;
   14388:	4b17      	ldr	r3, [pc, #92]	; (143e8 <endCall+0x1ec>)
   1438a:	2200      	movs	r2, #0
   1438c:	701a      	strb	r2, [r3, #0]
	currentStatus = 'N';
   1438e:	4b12      	ldr	r3, [pc, #72]	; (143d8 <endCall+0x1dc>)
   14390:	224e      	movs	r2, #78	; 0x4e
   14392:	701a      	strb	r2, [r3, #0]
	currentCallStatus = 'N';
   14394:	4b11      	ldr	r3, [pc, #68]	; (143dc <endCall+0x1e0>)
   14396:	224e      	movs	r2, #78	; 0x4e
   14398:	701a      	strb	r2, [r3, #0]

	isRegisteredNumber=false;
   1439a:	4b22      	ldr	r3, [pc, #136]	; (14424 <endCall+0x228>)
   1439c:	2200      	movs	r2, #0
   1439e:	701a      	strb	r2, [r3, #0]
	obtainEventTimer = xTaskGetTickCount();
   143a0:	4b15      	ldr	r3, [pc, #84]	; (143f8 <endCall+0x1fc>)
   143a2:	4798      	blx	r3
   143a4:	0002      	movs	r2, r0
   143a6:	4b20      	ldr	r3, [pc, #128]	; (14428 <endCall+0x22c>)
   143a8:	601a      	str	r2, [r3, #0]
	obtainNewEvent = false;
   143aa:	4b20      	ldr	r3, [pc, #128]	; (1442c <endCall+0x230>)
   143ac:	2200      	movs	r2, #0
   143ae:	701a      	strb	r2, [r3, #0]
}
   143b0:	46c0      	nop			; (mov r8, r8)
   143b2:	46bd      	mov	sp, r7
   143b4:	bd80      	pop	{r7, pc}
   143b6:	46c0      	nop			; (mov r8, r8)
   143b8:	200006e0 	.word	0x200006e0
   143bc:	20000788 	.word	0x20000788
   143c0:	00012efd 	.word	0x00012efd
   143c4:	0001c729 	.word	0x0001c729
   143c8:	0001fad9 	.word	0x0001fad9
   143cc:	2000073c 	.word	0x2000073c
   143d0:	20000638 	.word	0x20000638
   143d4:	200007eb 	.word	0x200007eb
   143d8:	200007c0 	.word	0x200007c0
   143dc:	2000077b 	.word	0x2000077b
   143e0:	2000073b 	.word	0x2000073b
   143e4:	200006e1 	.word	0x200006e1
   143e8:	2000078a 	.word	0x2000078a
   143ec:	20000660 	.word	0x20000660
   143f0:	20000620 	.word	0x20000620
   143f4:	200007b6 	.word	0x200007b6
   143f8:	0001fe3d 	.word	0x0001fe3d
   143fc:	200007d0 	.word	0x200007d0
   14400:	2000075b 	.word	0x2000075b
   14404:	20000768 	.word	0x20000768
   14408:	20000564 	.word	0x20000564
   1440c:	200007b7 	.word	0x200007b7
   14410:	20000728 	.word	0x20000728
   14414:	20000729 	.word	0x20000729
   14418:	0001b63d 	.word	0x0001b63d
   1441c:	2000077a 	.word	0x2000077a
   14420:	200007b4 	.word	0x200007b4
   14424:	20000784 	.word	0x20000784
   14428:	200007f0 	.word	0x200007f0
   1442c:	20000766 	.word	0x20000766

00014430 <makeCall>:


void makeCall(void)
{
   14430:	b580      	push	{r7, lr}
   14432:	b086      	sub	sp, #24
   14434:	af00      	add	r7, sp, #0
	inCall=true;
   14436:	4b20      	ldr	r3, [pc, #128]	; (144b8 <makeCall+0x88>)
   14438:	2201      	movs	r2, #1
   1443a:	701a      	strb	r2, [r3, #0]
	
	char command[20] = {0};
   1443c:	1d3b      	adds	r3, r7, #4
   1443e:	0018      	movs	r0, r3
   14440:	2314      	movs	r3, #20
   14442:	001a      	movs	r2, r3
   14444:	2100      	movs	r1, #0
   14446:	4b1d      	ldr	r3, [pc, #116]	; (144bc <makeCall+0x8c>)
   14448:	4798      	blx	r3
	
	if(m2m_Numbers_struct.m2mSetting && m2mEvent)
   1444a:	4b1d      	ldr	r3, [pc, #116]	; (144c0 <makeCall+0x90>)
   1444c:	795b      	ldrb	r3, [r3, #5]
   1444e:	2b00      	cmp	r3, #0
   14450:	d008      	beq.n	14464 <makeCall+0x34>
   14452:	4b1c      	ldr	r3, [pc, #112]	; (144c4 <makeCall+0x94>)
   14454:	781b      	ldrb	r3, [r3, #0]
   14456:	2b00      	cmp	r3, #0
   14458:	d004      	beq.n	14464 <makeCall+0x34>
	{
		getM2MRemoteNumber(command);
   1445a:	1d3b      	adds	r3, r7, #4
   1445c:	0018      	movs	r0, r3
   1445e:	4b1a      	ldr	r3, [pc, #104]	; (144c8 <makeCall+0x98>)
   14460:	4798      	blx	r3
   14462:	e00f      	b.n	14484 <makeCall+0x54>
	}
	else
	{
		if(retries)
   14464:	4b19      	ldr	r3, [pc, #100]	; (144cc <makeCall+0x9c>)
   14466:	781b      	ldrb	r3, [r3, #0]
   14468:	2b00      	cmp	r3, #0
   1446a:	d007      	beq.n	1447c <makeCall+0x4c>
		{
			getIndexedNumber(command,user_count_struct.secondaryNumberIndex);
   1446c:	4b18      	ldr	r3, [pc, #96]	; (144d0 <makeCall+0xa0>)
   1446e:	791a      	ldrb	r2, [r3, #4]
   14470:	1d3b      	adds	r3, r7, #4
   14472:	0011      	movs	r1, r2
   14474:	0018      	movs	r0, r3
   14476:	4b17      	ldr	r3, [pc, #92]	; (144d4 <makeCall+0xa4>)
   14478:	4798      	blx	r3
   1447a:	e003      	b.n	14484 <makeCall+0x54>
		}
		else
		{
			getActiveNumber(command);
   1447c:	1d3b      	adds	r3, r7, #4
   1447e:	0018      	movs	r0, r3
   14480:	4b15      	ldr	r3, [pc, #84]	; (144d8 <makeCall+0xa8>)
   14482:	4798      	blx	r3
		}
	}
	gsm_call_to_dial_a_number(command);
   14484:	1d3b      	adds	r3, r7, #4
   14486:	0018      	movs	r0, r3
   14488:	4b14      	ldr	r3, [pc, #80]	; (144dc <makeCall+0xac>)
   1448a:	4798      	blx	r3
	setCallStateOnLCD(LCDCALLSTATE_OUTGOING,command,false);
   1448c:	1d3b      	adds	r3, r7, #4
   1448e:	2200      	movs	r2, #0
   14490:	0019      	movs	r1, r3
   14492:	2003      	movs	r0, #3
   14494:	4b12      	ldr	r3, [pc, #72]	; (144e0 <makeCall+0xb0>)
   14496:	4798      	blx	r3
	callCutWait = xTaskGetTickCount();
   14498:	4b12      	ldr	r3, [pc, #72]	; (144e4 <makeCall+0xb4>)
   1449a:	4798      	blx	r3
   1449c:	0002      	movs	r2, r0
   1449e:	4b12      	ldr	r3, [pc, #72]	; (144e8 <makeCall+0xb8>)
   144a0:	601a      	str	r2, [r3, #0]
	currentStatus = 'R';
   144a2:	4b12      	ldr	r3, [pc, #72]	; (144ec <makeCall+0xbc>)
   144a4:	2252      	movs	r2, #82	; 0x52
   144a6:	701a      	strb	r2, [r3, #0]
	currentCallStatus = 'O';
   144a8:	4b11      	ldr	r3, [pc, #68]	; (144f0 <makeCall+0xc0>)
   144aa:	224f      	movs	r2, #79	; 0x4f
   144ac:	701a      	strb	r2, [r3, #0]
}
   144ae:	46c0      	nop			; (mov r8, r8)
   144b0:	46bd      	mov	sp, r7
   144b2:	b006      	add	sp, #24
   144b4:	bd80      	pop	{r7, pc}
   144b6:	46c0      	nop			; (mov r8, r8)
   144b8:	20000788 	.word	0x20000788
   144bc:	000289fb 	.word	0x000289fb
   144c0:	20000564 	.word	0x20000564
   144c4:	2000073b 	.word	0x2000073b
   144c8:	00010aed 	.word	0x00010aed
   144cc:	200006e1 	.word	0x200006e1
   144d0:	20000620 	.word	0x20000620
   144d4:	000108fd 	.word	0x000108fd
   144d8:	00010d05 	.word	0x00010d05
   144dc:	00012d39 	.word	0x00012d39
   144e0:	0001c729 	.word	0x0001c729
   144e4:	0001fe3d 	.word	0x0001fe3d
   144e8:	200007f4 	.word	0x200007f4
   144ec:	200007c0 	.word	0x200007c0
   144f0:	2000077b 	.word	0x2000077b

000144f4 <acceptCall>:

void acceptCall(void)
{
   144f4:	b580      	push	{r7, lr}
   144f6:	af00      	add	r7, sp, #0
	isRegisteredNumber=false;   //clear flag for next call, in case any error occures and endCall() is not called for ending the call
   144f8:	4b0a      	ldr	r3, [pc, #40]	; (14524 <acceptCall+0x30>)
   144fa:	2200      	movs	r2, #0
   144fc:	701a      	strb	r2, [r3, #0]
	callAccepted = true;
   144fe:	4b0a      	ldr	r3, [pc, #40]	; (14528 <acceptCall+0x34>)
   14500:	2201      	movs	r2, #1
   14502:	701a      	strb	r2, [r3, #0]
	gsm_answer_an_incomming_call();
   14504:	4b09      	ldr	r3, [pc, #36]	; (1452c <acceptCall+0x38>)
   14506:	4798      	blx	r3
	currentStatus = 'I';
   14508:	4b09      	ldr	r3, [pc, #36]	; (14530 <acceptCall+0x3c>)
   1450a:	2249      	movs	r2, #73	; 0x49
   1450c:	701a      	strb	r2, [r3, #0]
	currentCallStatus = 'I';
   1450e:	4b09      	ldr	r3, [pc, #36]	; (14534 <acceptCall+0x40>)
   14510:	2249      	movs	r2, #73	; 0x49
   14512:	701a      	strb	r2, [r3, #0]
	playSound('M',true);
   14514:	2101      	movs	r1, #1
   14516:	204d      	movs	r0, #77	; 0x4d
   14518:	4b07      	ldr	r3, [pc, #28]	; (14538 <acceptCall+0x44>)
   1451a:	4798      	blx	r3
	//displayInIncomingCall
}
   1451c:	46c0      	nop			; (mov r8, r8)
   1451e:	46bd      	mov	sp, r7
   14520:	bd80      	pop	{r7, pc}
   14522:	46c0      	nop			; (mov r8, r8)
   14524:	20000784 	.word	0x20000784
   14528:	2000078a 	.word	0x2000078a
   1452c:	00012dd1 	.word	0x00012dd1
   14530:	200007c0 	.word	0x200007c0
   14534:	2000077b 	.word	0x2000077b
   14538:	0001453d 	.word	0x0001453d

0001453c <playSound>:

//void playSound(char actionType, bool newAction=true)
void playSound(char actionTypeT, bool newAction)
{
   1453c:	b580      	push	{r7, lr}
   1453e:	b082      	sub	sp, #8
   14540:	af00      	add	r7, sp, #0
   14542:	0002      	movs	r2, r0
   14544:	1dfb      	adds	r3, r7, #7
   14546:	701a      	strb	r2, [r3, #0]
   14548:	1dbb      	adds	r3, r7, #6
   1454a:	1c0a      	adds	r2, r1, #0
   1454c:	701a      	strb	r2, [r3, #0]
	gsm_stop_play_record_file();
   1454e:	4b14      	ldr	r3, [pc, #80]	; (145a0 <playSound+0x64>)
   14550:	4798      	blx	r3
	bplaySound = true;
   14552:	4b14      	ldr	r3, [pc, #80]	; (145a4 <playSound+0x68>)
   14554:	2201      	movs	r2, #1
   14556:	701a      	strb	r2, [r3, #0]
	if (newAction)
   14558:	1dbb      	adds	r3, r7, #6
   1455a:	781b      	ldrb	r3, [r3, #0]
   1455c:	2b00      	cmp	r3, #0
   1455e:	d016      	beq.n	1458e <playSound+0x52>
	{
		maxPlayingFiles=1;
   14560:	4b11      	ldr	r3, [pc, #68]	; (145a8 <playSound+0x6c>)
   14562:	2201      	movs	r2, #1
   14564:	701a      	strb	r2, [r3, #0]
		currentPlayingFileIndex=0;
   14566:	4b11      	ldr	r3, [pc, #68]	; (145ac <playSound+0x70>)
   14568:	2200      	movs	r2, #0
   1456a:	701a      	strb	r2, [r3, #0]
		playFilesList[currentPlayingFileIndex]=actionTypeT;
   1456c:	4b0f      	ldr	r3, [pc, #60]	; (145ac <playSound+0x70>)
   1456e:	781b      	ldrb	r3, [r3, #0]
   14570:	0019      	movs	r1, r3
   14572:	4b0f      	ldr	r3, [pc, #60]	; (145b0 <playSound+0x74>)
   14574:	1dfa      	adds	r2, r7, #7
   14576:	7812      	ldrb	r2, [r2, #0]
   14578:	545a      	strb	r2, [r3, r1]
		playFilesList[currentPlayingFileIndex+1]='\0';
   1457a:	4b0c      	ldr	r3, [pc, #48]	; (145ac <playSound+0x70>)
   1457c:	781b      	ldrb	r3, [r3, #0]
   1457e:	3301      	adds	r3, #1
   14580:	4a0b      	ldr	r2, [pc, #44]	; (145b0 <playSound+0x74>)
   14582:	2100      	movs	r1, #0
   14584:	54d1      	strb	r1, [r2, r3]
		actionType = actionTypeT;
   14586:	4b0b      	ldr	r3, [pc, #44]	; (145b4 <playSound+0x78>)
   14588:	1dfa      	adds	r2, r7, #7
   1458a:	7812      	ldrb	r2, [r2, #0]
   1458c:	701a      	strb	r2, [r3, #0]
	}
	playFile = actionTypeT;
   1458e:	4b0a      	ldr	r3, [pc, #40]	; (145b8 <playSound+0x7c>)
   14590:	1dfa      	adds	r2, r7, #7
   14592:	7812      	ldrb	r2, [r2, #0]
   14594:	701a      	strb	r2, [r3, #0]
}
   14596:	46c0      	nop			; (mov r8, r8)
   14598:	46bd      	mov	sp, r7
   1459a:	b002      	add	sp, #8
   1459c:	bd80      	pop	{r7, pc}
   1459e:	46c0      	nop			; (mov r8, r8)
   145a0:	00012f5d 	.word	0x00012f5d
   145a4:	20000841 	.word	0x20000841
   145a8:	200007b8 	.word	0x200007b8
   145ac:	200007a8 	.word	0x200007a8
   145b0:	20000744 	.word	0x20000744
   145b4:	2000075b 	.word	0x2000075b
   145b8:	200007a7 	.word	0x200007a7

000145bc <playSoundElligible>:

bool playSoundElligible(void)
{
   145bc:	b580      	push	{r7, lr}
   145be:	af00      	add	r7, sp, #0
	return (bplaySound && ((xTaskGetTickCount() - soundWait) > (soundWaitTime * 100)));
   145c0:	4b0d      	ldr	r3, [pc, #52]	; (145f8 <playSoundElligible+0x3c>)
   145c2:	781b      	ldrb	r3, [r3, #0]
   145c4:	2b00      	cmp	r3, #0
   145c6:	d00e      	beq.n	145e6 <playSoundElligible+0x2a>
   145c8:	4b0c      	ldr	r3, [pc, #48]	; (145fc <playSoundElligible+0x40>)
   145ca:	4798      	blx	r3
   145cc:	0002      	movs	r2, r0
   145ce:	4b0c      	ldr	r3, [pc, #48]	; (14600 <playSoundElligible+0x44>)
   145d0:	681b      	ldr	r3, [r3, #0]
   145d2:	1ad3      	subs	r3, r2, r3
   145d4:	4a0b      	ldr	r2, [pc, #44]	; (14604 <playSoundElligible+0x48>)
   145d6:	7812      	ldrb	r2, [r2, #0]
   145d8:	0011      	movs	r1, r2
   145da:	2264      	movs	r2, #100	; 0x64
   145dc:	434a      	muls	r2, r1
   145de:	4293      	cmp	r3, r2
   145e0:	d901      	bls.n	145e6 <playSoundElligible+0x2a>
   145e2:	2301      	movs	r3, #1
   145e4:	e000      	b.n	145e8 <playSoundElligible+0x2c>
   145e6:	2300      	movs	r3, #0
   145e8:	1c1a      	adds	r2, r3, #0
   145ea:	2301      	movs	r3, #1
   145ec:	4013      	ands	r3, r2
   145ee:	b2db      	uxtb	r3, r3
}
   145f0:	0018      	movs	r0, r3
   145f2:	46bd      	mov	sp, r7
   145f4:	bd80      	pop	{r7, pc}
   145f6:	46c0      	nop			; (mov r8, r8)
   145f8:	20000841 	.word	0x20000841
   145fc:	0001fe3d 	.word	0x0001fe3d
   14600:	2000081c 	.word	0x2000081c
   14604:	200007b9 	.word	0x200007b9

00014608 <triggerPlaySound>:

void triggerPlaySound(void)
{
   14608:	b580      	push	{r7, lr}
   1460a:	af00      	add	r7, sp, #0
	if(maxPlayingFiles>1)
   1460c:	4b0b      	ldr	r3, [pc, #44]	; (1463c <triggerPlaySound+0x34>)
   1460e:	781b      	ldrb	r3, [r3, #0]
   14610:	2b01      	cmp	r3, #1
   14612:	d906      	bls.n	14622 <triggerPlaySound+0x1a>
	{
		gsm_play_record_file((char*)playFile,false);
   14614:	4b0a      	ldr	r3, [pc, #40]	; (14640 <triggerPlaySound+0x38>)
   14616:	781b      	ldrb	r3, [r3, #0]
   14618:	2100      	movs	r1, #0
   1461a:	0018      	movs	r0, r3
   1461c:	4b09      	ldr	r3, [pc, #36]	; (14644 <triggerPlaySound+0x3c>)
   1461e:	4798      	blx	r3
   14620:	e005      	b.n	1462e <triggerPlaySound+0x26>
	}
	else
	{
		gsm_play_record_file((char*)playFile,true);
   14622:	4b07      	ldr	r3, [pc, #28]	; (14640 <triggerPlaySound+0x38>)
   14624:	781b      	ldrb	r3, [r3, #0]
   14626:	2101      	movs	r1, #1
   14628:	0018      	movs	r0, r3
   1462a:	4b06      	ldr	r3, [pc, #24]	; (14644 <triggerPlaySound+0x3c>)
   1462c:	4798      	blx	r3
	}
	bplaySound = false;
   1462e:	4b06      	ldr	r3, [pc, #24]	; (14648 <triggerPlaySound+0x40>)
   14630:	2200      	movs	r2, #0
   14632:	701a      	strb	r2, [r3, #0]
}
   14634:	46c0      	nop			; (mov r8, r8)
   14636:	46bd      	mov	sp, r7
   14638:	bd80      	pop	{r7, pc}
   1463a:	46c0      	nop			; (mov r8, r8)
   1463c:	200007b8 	.word	0x200007b8
   14640:	200007a7 	.word	0x200007a7
   14644:	00012f8d 	.word	0x00012f8d
   14648:	20000841 	.word	0x20000841

0001464c <playSoundAgain>:

void playSoundAgain(char *string)
{
   1464c:	b580      	push	{r7, lr}
   1464e:	b082      	sub	sp, #8
   14650:	af00      	add	r7, sp, #0
   14652:	6078      	str	r0, [r7, #4]
	if (!bplaySound && gsm_responseLine_is_StopSound_Received(string))
   14654:	4b18      	ldr	r3, [pc, #96]	; (146b8 <playSoundAgain+0x6c>)
   14656:	781b      	ldrb	r3, [r3, #0]
   14658:	2201      	movs	r2, #1
   1465a:	4053      	eors	r3, r2
   1465c:	b2db      	uxtb	r3, r3
   1465e:	2b00      	cmp	r3, #0
   14660:	d025      	beq.n	146ae <playSoundAgain+0x62>
   14662:	687b      	ldr	r3, [r7, #4]
   14664:	0018      	movs	r0, r3
   14666:	4b15      	ldr	r3, [pc, #84]	; (146bc <playSoundAgain+0x70>)
   14668:	4798      	blx	r3
   1466a:	1e03      	subs	r3, r0, #0
   1466c:	d01f      	beq.n	146ae <playSoundAgain+0x62>
	{
		if(maxPlayingFiles>1)
   1466e:	4b14      	ldr	r3, [pc, #80]	; (146c0 <playSoundAgain+0x74>)
   14670:	781b      	ldrb	r3, [r3, #0]
   14672:	2b01      	cmp	r3, #1
   14674:	d91b      	bls.n	146ae <playSoundAgain+0x62>
		{
			if(currentPlayingFileIndex<maxPlayingFiles-1)
   14676:	4b13      	ldr	r3, [pc, #76]	; (146c4 <playSoundAgain+0x78>)
   14678:	781b      	ldrb	r3, [r3, #0]
   1467a:	001a      	movs	r2, r3
   1467c:	4b10      	ldr	r3, [pc, #64]	; (146c0 <playSoundAgain+0x74>)
   1467e:	781b      	ldrb	r3, [r3, #0]
   14680:	3b01      	subs	r3, #1
   14682:	429a      	cmp	r2, r3
   14684:	da0f      	bge.n	146a6 <playSoundAgain+0x5a>
			{
				playSound(playFilesList[++currentPlayingFileIndex],false);
   14686:	4b0f      	ldr	r3, [pc, #60]	; (146c4 <playSoundAgain+0x78>)
   14688:	781b      	ldrb	r3, [r3, #0]
   1468a:	3301      	adds	r3, #1
   1468c:	b2da      	uxtb	r2, r3
   1468e:	4b0d      	ldr	r3, [pc, #52]	; (146c4 <playSoundAgain+0x78>)
   14690:	701a      	strb	r2, [r3, #0]
   14692:	4b0c      	ldr	r3, [pc, #48]	; (146c4 <playSoundAgain+0x78>)
   14694:	781b      	ldrb	r3, [r3, #0]
   14696:	001a      	movs	r2, r3
   14698:	4b0b      	ldr	r3, [pc, #44]	; (146c8 <playSoundAgain+0x7c>)
   1469a:	5c9b      	ldrb	r3, [r3, r2]
   1469c:	2100      	movs	r1, #0
   1469e:	0018      	movs	r0, r3
   146a0:	4b0a      	ldr	r3, [pc, #40]	; (146cc <playSoundAgain+0x80>)
   146a2:	4798      	blx	r3
			{
				playSound('M',true);
			}
		}
	}
}
   146a4:	e003      	b.n	146ae <playSoundAgain+0x62>
				playSound('M',true);
   146a6:	2101      	movs	r1, #1
   146a8:	204d      	movs	r0, #77	; 0x4d
   146aa:	4b08      	ldr	r3, [pc, #32]	; (146cc <playSoundAgain+0x80>)
   146ac:	4798      	blx	r3
}
   146ae:	46c0      	nop			; (mov r8, r8)
   146b0:	46bd      	mov	sp, r7
   146b2:	b002      	add	sp, #8
   146b4:	bd80      	pop	{r7, pc}
   146b6:	46c0      	nop			; (mov r8, r8)
   146b8:	20000841 	.word	0x20000841
   146bc:	00013591 	.word	0x00013591
   146c0:	200007b8 	.word	0x200007b8
   146c4:	200007a8 	.word	0x200007a8
   146c8:	20000744 	.word	0x20000744
   146cc:	0001453d 	.word	0x0001453d

000146d0 <playRepeatedFiles>:

void playRepeatedFiles(char *fileList)
{
   146d0:	b580      	push	{r7, lr}
   146d2:	b082      	sub	sp, #8
   146d4:	af00      	add	r7, sp, #0
   146d6:	6078      	str	r0, [r7, #4]
	if(strlen(fileList)<15)
   146d8:	687b      	ldr	r3, [r7, #4]
   146da:	0018      	movs	r0, r3
   146dc:	4b14      	ldr	r3, [pc, #80]	; (14730 <playRepeatedFiles+0x60>)
   146de:	4798      	blx	r3
   146e0:	0003      	movs	r3, r0
   146e2:	2b0e      	cmp	r3, #14
   146e4:	d81f      	bhi.n	14726 <playRepeatedFiles+0x56>
	{
		currentPlayingFileIndex=0;
   146e6:	4b13      	ldr	r3, [pc, #76]	; (14734 <playRepeatedFiles+0x64>)
   146e8:	2200      	movs	r2, #0
   146ea:	701a      	strb	r2, [r3, #0]
		maxPlayingFiles=strlen(fileList);
   146ec:	687b      	ldr	r3, [r7, #4]
   146ee:	0018      	movs	r0, r3
   146f0:	4b0f      	ldr	r3, [pc, #60]	; (14730 <playRepeatedFiles+0x60>)
   146f2:	4798      	blx	r3
   146f4:	0003      	movs	r3, r0
   146f6:	b2da      	uxtb	r2, r3
   146f8:	4b0f      	ldr	r3, [pc, #60]	; (14738 <playRepeatedFiles+0x68>)
   146fa:	701a      	strb	r2, [r3, #0]
		strcpy(playFilesList,fileList);
   146fc:	687a      	ldr	r2, [r7, #4]
   146fe:	4b0f      	ldr	r3, [pc, #60]	; (1473c <playRepeatedFiles+0x6c>)
   14700:	0011      	movs	r1, r2
   14702:	0018      	movs	r0, r3
   14704:	4b0e      	ldr	r3, [pc, #56]	; (14740 <playRepeatedFiles+0x70>)
   14706:	4798      	blx	r3
		soundWait = xTaskGetTickCount();
   14708:	4b0e      	ldr	r3, [pc, #56]	; (14744 <playRepeatedFiles+0x74>)
   1470a:	4798      	blx	r3
   1470c:	0002      	movs	r2, r0
   1470e:	4b0e      	ldr	r3, [pc, #56]	; (14748 <playRepeatedFiles+0x78>)
   14710:	601a      	str	r2, [r3, #0]
		playFile = playFilesList[currentPlayingFileIndex];
   14712:	4b08      	ldr	r3, [pc, #32]	; (14734 <playRepeatedFiles+0x64>)
   14714:	781b      	ldrb	r3, [r3, #0]
   14716:	001a      	movs	r2, r3
   14718:	4b08      	ldr	r3, [pc, #32]	; (1473c <playRepeatedFiles+0x6c>)
   1471a:	5c9a      	ldrb	r2, [r3, r2]
   1471c:	4b0b      	ldr	r3, [pc, #44]	; (1474c <playRepeatedFiles+0x7c>)
   1471e:	701a      	strb	r2, [r3, #0]
		bplaySound = true;
   14720:	4b0b      	ldr	r3, [pc, #44]	; (14750 <playRepeatedFiles+0x80>)
   14722:	2201      	movs	r2, #1
   14724:	701a      	strb	r2, [r3, #0]
	}
}
   14726:	46c0      	nop			; (mov r8, r8)
   14728:	46bd      	mov	sp, r7
   1472a:	b002      	add	sp, #8
   1472c:	bd80      	pop	{r7, pc}
   1472e:	46c0      	nop			; (mov r8, r8)
   14730:	00028c8b 	.word	0x00028c8b
   14734:	200007a8 	.word	0x200007a8
   14738:	200007b8 	.word	0x200007b8
   1473c:	20000744 	.word	0x20000744
   14740:	00028c7b 	.word	0x00028c7b
   14744:	0001fe3d 	.word	0x0001fe3d
   14748:	2000081c 	.word	0x2000081c
   1474c:	200007a7 	.word	0x200007a7
   14750:	20000841 	.word	0x20000841

00014754 <callTimerExpire>:

bool callTimerExpire(void)
{
   14754:	b580      	push	{r7, lr}
   14756:	af00      	add	r7, sp, #0
	return ((xTaskGetTickCount() - callCutWait) >= (callCutWaitTime * 100));
   14758:	4b09      	ldr	r3, [pc, #36]	; (14780 <callTimerExpire+0x2c>)
   1475a:	4798      	blx	r3
   1475c:	0002      	movs	r2, r0
   1475e:	4b09      	ldr	r3, [pc, #36]	; (14784 <callTimerExpire+0x30>)
   14760:	681b      	ldr	r3, [r3, #0]
   14762:	1ad2      	subs	r2, r2, r3
   14764:	4b08      	ldr	r3, [pc, #32]	; (14788 <callTimerExpire+0x34>)
   14766:	881b      	ldrh	r3, [r3, #0]
   14768:	0019      	movs	r1, r3
   1476a:	2364      	movs	r3, #100	; 0x64
   1476c:	434b      	muls	r3, r1
   1476e:	0019      	movs	r1, r3
   14770:	2300      	movs	r3, #0
   14772:	428a      	cmp	r2, r1
   14774:	415b      	adcs	r3, r3
   14776:	b2db      	uxtb	r3, r3
}
   14778:	0018      	movs	r0, r3
   1477a:	46bd      	mov	sp, r7
   1477c:	bd80      	pop	{r7, pc}
   1477e:	46c0      	nop			; (mov r8, r8)
   14780:	0001fe3d 	.word	0x0001fe3d
   14784:	200007f4 	.word	0x200007f4
   14788:	2000075c 	.word	0x2000075c

0001478c <OutGoingcallState>:

char OutGoingcallState(char *response)
{
   1478c:	b580      	push	{r7, lr}
   1478e:	b082      	sub	sp, #8
   14790:	af00      	add	r7, sp, #0
   14792:	6078      	str	r0, [r7, #4]
	if(strstr(response,"+CLCC: 1,0,2"))
   14794:	4a16      	ldr	r2, [pc, #88]	; (147f0 <OutGoingcallState+0x64>)
   14796:	687b      	ldr	r3, [r7, #4]
   14798:	0011      	movs	r1, r2
   1479a:	0018      	movs	r0, r3
   1479c:	4b15      	ldr	r3, [pc, #84]	; (147f4 <OutGoingcallState+0x68>)
   1479e:	4798      	blx	r3
   147a0:	1e03      	subs	r3, r0, #0
   147a2:	d001      	beq.n	147a8 <OutGoingcallState+0x1c>
	{
		return 'D';								//dialling
   147a4:	2344      	movs	r3, #68	; 0x44
   147a6:	e01e      	b.n	147e6 <OutGoingcallState+0x5a>
	}
	else if (strstr(response,"+CLCC: 1,0,3"))
   147a8:	4a13      	ldr	r2, [pc, #76]	; (147f8 <OutGoingcallState+0x6c>)
   147aa:	687b      	ldr	r3, [r7, #4]
   147ac:	0011      	movs	r1, r2
   147ae:	0018      	movs	r0, r3
   147b0:	4b10      	ldr	r3, [pc, #64]	; (147f4 <OutGoingcallState+0x68>)
   147b2:	4798      	blx	r3
   147b4:	1e03      	subs	r3, r0, #0
   147b6:	d001      	beq.n	147bc <OutGoingcallState+0x30>
	{
		return 'R';								//alerting
   147b8:	2352      	movs	r3, #82	; 0x52
   147ba:	e014      	b.n	147e6 <OutGoingcallState+0x5a>
	}
	else if (strstr(response,"+CLCC: 1,0,0"))
   147bc:	4a0f      	ldr	r2, [pc, #60]	; (147fc <OutGoingcallState+0x70>)
   147be:	687b      	ldr	r3, [r7, #4]
   147c0:	0011      	movs	r1, r2
   147c2:	0018      	movs	r0, r3
   147c4:	4b0b      	ldr	r3, [pc, #44]	; (147f4 <OutGoingcallState+0x68>)
   147c6:	4798      	blx	r3
   147c8:	1e03      	subs	r3, r0, #0
   147ca:	d001      	beq.n	147d0 <OutGoingcallState+0x44>
	{
		return 'I';								//active call
   147cc:	2349      	movs	r3, #73	; 0x49
   147ce:	e00a      	b.n	147e6 <OutGoingcallState+0x5a>
	}
	else if (strstr(response,"+CLCC: 1,0,6"))
   147d0:	4a0b      	ldr	r2, [pc, #44]	; (14800 <OutGoingcallState+0x74>)
   147d2:	687b      	ldr	r3, [r7, #4]
   147d4:	0011      	movs	r1, r2
   147d6:	0018      	movs	r0, r3
   147d8:	4b06      	ldr	r3, [pc, #24]	; (147f4 <OutGoingcallState+0x68>)
   147da:	4798      	blx	r3
   147dc:	1e03      	subs	r3, r0, #0
   147de:	d001      	beq.n	147e4 <OutGoingcallState+0x58>
	{
		return 'E';								//call ended
   147e0:	2345      	movs	r3, #69	; 0x45
   147e2:	e000      	b.n	147e6 <OutGoingcallState+0x5a>
	}
	else
	{
		return 'N';
   147e4:	234e      	movs	r3, #78	; 0x4e
	}
}
   147e6:	0018      	movs	r0, r3
   147e8:	46bd      	mov	sp, r7
   147ea:	b002      	add	sp, #8
   147ec:	bd80      	pop	{r7, pc}
   147ee:	46c0      	nop			; (mov r8, r8)
   147f0:	00029bf4 	.word	0x00029bf4
   147f4:	00028cbb 	.word	0x00028cbb
   147f8:	00029c04 	.word	0x00029c04
   147fc:	00029c14 	.word	0x00029c14
   14800:	00029c24 	.word	0x00029c24

00014804 <registerEvent>:

bool registerEvent(char eventType)
{
   14804:	b580      	push	{r7, lr}
   14806:	b082      	sub	sp, #8
   14808:	af00      	add	r7, sp, #0
   1480a:	0002      	movs	r2, r0
   1480c:	1dfb      	adds	r3, r7, #7
   1480e:	701a      	strb	r2, [r3, #0]
	//if(isSIMReset())
	//{
	//return false;
	//}
	if(user_count_struct.current_user_no_count==0 || user_settings_parameter_struct.responseAddress=='N')
   14810:	4b34      	ldr	r3, [pc, #208]	; (148e4 <registerEvent+0xe0>)
   14812:	789b      	ldrb	r3, [r3, #2]
   14814:	2b00      	cmp	r3, #0
   14816:	d003      	beq.n	14820 <registerEvent+0x1c>
   14818:	4b33      	ldr	r3, [pc, #204]	; (148e8 <registerEvent+0xe4>)
   1481a:	795b      	ldrb	r3, [r3, #5]
   1481c:	2b4e      	cmp	r3, #78	; 0x4e
   1481e:	d101      	bne.n	14824 <registerEvent+0x20>
	{
		return true;
   14820:	2301      	movs	r3, #1
   14822:	e05b      	b.n	148dc <registerEvent+0xd8>
	}
	if (!initialized)
   14824:	4b31      	ldr	r3, [pc, #196]	; (148ec <registerEvent+0xe8>)
   14826:	781b      	ldrb	r3, [r3, #0]
   14828:	b2db      	uxtb	r3, r3
   1482a:	2201      	movs	r2, #1
   1482c:	4053      	eors	r3, r2
   1482e:	b2db      	uxtb	r3, r3
   14830:	2b00      	cmp	r3, #0
   14832:	d001      	beq.n	14838 <registerEvent+0x34>
	{
		return true;
   14834:	2301      	movs	r3, #1
   14836:	e051      	b.n	148dc <registerEvent+0xd8>
	}
	if(!eventStaged && actionType==eventType)
   14838:	4b2d      	ldr	r3, [pc, #180]	; (148f0 <registerEvent+0xec>)
   1483a:	781b      	ldrb	r3, [r3, #0]
   1483c:	2201      	movs	r2, #1
   1483e:	4053      	eors	r3, r2
   14840:	b2db      	uxtb	r3, r3
   14842:	2b00      	cmp	r3, #0
   14844:	d007      	beq.n	14856 <registerEvent+0x52>
   14846:	4b2b      	ldr	r3, [pc, #172]	; (148f4 <registerEvent+0xf0>)
   14848:	781b      	ldrb	r3, [r3, #0]
   1484a:	1dfa      	adds	r2, r7, #7
   1484c:	7812      	ldrb	r2, [r2, #0]
   1484e:	429a      	cmp	r2, r3
   14850:	d101      	bne.n	14856 <registerEvent+0x52>
	{
		return true;
   14852:	2301      	movs	r3, #1
   14854:	e042      	b.n	148dc <registerEvent+0xd8>
	}
	//if ((factory_settings_parameter_struct.ENABLE_M2M==true)?
	//(currentStatus == 'N' && currentCallStatus == 'N' && obtainNewEvent && !eventStaged && !m2mEventStaged):
	//(currentStatus == 'N' && currentCallStatus == 'N' && obtainNewEvent && !eventStaged))
	if(currentStatus == 'N' && currentCallStatus == 'N' && obtainNewEvent && !eventStaged && !m2mEventStaged)
   14856:	4b28      	ldr	r3, [pc, #160]	; (148f8 <registerEvent+0xf4>)
   14858:	781b      	ldrb	r3, [r3, #0]
   1485a:	b2db      	uxtb	r3, r3
   1485c:	2b4e      	cmp	r3, #78	; 0x4e
   1485e:	d13c      	bne.n	148da <registerEvent+0xd6>
   14860:	4b26      	ldr	r3, [pc, #152]	; (148fc <registerEvent+0xf8>)
   14862:	781b      	ldrb	r3, [r3, #0]
   14864:	b2db      	uxtb	r3, r3
   14866:	2b4e      	cmp	r3, #78	; 0x4e
   14868:	d137      	bne.n	148da <registerEvent+0xd6>
   1486a:	4b25      	ldr	r3, [pc, #148]	; (14900 <registerEvent+0xfc>)
   1486c:	781b      	ldrb	r3, [r3, #0]
   1486e:	2b00      	cmp	r3, #0
   14870:	d033      	beq.n	148da <registerEvent+0xd6>
   14872:	4b1f      	ldr	r3, [pc, #124]	; (148f0 <registerEvent+0xec>)
   14874:	781b      	ldrb	r3, [r3, #0]
   14876:	2201      	movs	r2, #1
   14878:	4053      	eors	r3, r2
   1487a:	b2db      	uxtb	r3, r3
   1487c:	2b00      	cmp	r3, #0
   1487e:	d02c      	beq.n	148da <registerEvent+0xd6>
   14880:	4b20      	ldr	r3, [pc, #128]	; (14904 <registerEvent+0x100>)
   14882:	781b      	ldrb	r3, [r3, #0]
   14884:	2201      	movs	r2, #1
   14886:	4053      	eors	r3, r2
   14888:	b2db      	uxtb	r3, r3
   1488a:	2b00      	cmp	r3, #0
   1488c:	d025      	beq.n	148da <registerEvent+0xd6>
	{
		if(user_settings_parameter_struct.noCallAddress && checkNoCallTime())
   1488e:	4b16      	ldr	r3, [pc, #88]	; (148e8 <registerEvent+0xe4>)
   14890:	7a5b      	ldrb	r3, [r3, #9]
   14892:	2b00      	cmp	r3, #0
   14894:	d005      	beq.n	148a2 <registerEvent+0x9e>
   14896:	4b1c      	ldr	r3, [pc, #112]	; (14908 <registerEvent+0x104>)
   14898:	4798      	blx	r3
   1489a:	1e03      	subs	r3, r0, #0
   1489c:	d001      	beq.n	148a2 <registerEvent+0x9e>
		{
			return true;
   1489e:	2301      	movs	r3, #1
   148a0:	e01c      	b.n	148dc <registerEvent+0xd8>
		}
		retries=0;
   148a2:	4b1a      	ldr	r3, [pc, #104]	; (1490c <registerEvent+0x108>)
   148a4:	2200      	movs	r2, #0
   148a6:	701a      	strb	r2, [r3, #0]
		if(user_settings_parameter_struct.eventStageAddress>0x00)
   148a8:	4b0f      	ldr	r3, [pc, #60]	; (148e8 <registerEvent+0xe4>)
   148aa:	7a1b      	ldrb	r3, [r3, #8]
   148ac:	2b00      	cmp	r3, #0
   148ae:	d00c      	beq.n	148ca <registerEvent+0xc6>
		{
			tempEventStageTime=xTaskGetTickCount();
   148b0:	4b17      	ldr	r3, [pc, #92]	; (14910 <registerEvent+0x10c>)
   148b2:	4798      	blx	r3
   148b4:	0002      	movs	r2, r0
   148b6:	4b17      	ldr	r3, [pc, #92]	; (14914 <registerEvent+0x110>)
   148b8:	601a      	str	r2, [r3, #0]
			stagedEventType=eventType;
   148ba:	4b17      	ldr	r3, [pc, #92]	; (14918 <registerEvent+0x114>)
   148bc:	1dfa      	adds	r2, r7, #7
   148be:	7812      	ldrb	r2, [r2, #0]
   148c0:	701a      	strb	r2, [r3, #0]
			eventStaged=true;
   148c2:	4b0b      	ldr	r3, [pc, #44]	; (148f0 <registerEvent+0xec>)
   148c4:	2201      	movs	r2, #1
   148c6:	701a      	strb	r2, [r3, #0]
   148c8:	e005      	b.n	148d6 <registerEvent+0xd2>
		}
		else
		{
			actionType = eventType;
   148ca:	4b0a      	ldr	r3, [pc, #40]	; (148f4 <registerEvent+0xf0>)
   148cc:	1dfa      	adds	r2, r7, #7
   148ce:	7812      	ldrb	r2, [r2, #0]
   148d0:	701a      	strb	r2, [r3, #0]
			makeResponseAction();
   148d2:	4b12      	ldr	r3, [pc, #72]	; (1491c <registerEvent+0x118>)
   148d4:	4798      	blx	r3
		}
		return true;
   148d6:	2301      	movs	r3, #1
   148d8:	e000      	b.n	148dc <registerEvent+0xd8>
	}
	else
	{
		return false;
   148da:	2300      	movs	r3, #0
	}
}
   148dc:	0018      	movs	r0, r3
   148de:	46bd      	mov	sp, r7
   148e0:	b002      	add	sp, #8
   148e2:	bd80      	pop	{r7, pc}
   148e4:	20000620 	.word	0x20000620
   148e8:	20000660 	.word	0x20000660
   148ec:	20000789 	.word	0x20000789
   148f0:	200007b6 	.word	0x200007b6
   148f4:	2000075b 	.word	0x2000075b
   148f8:	200007c0 	.word	0x200007c0
   148fc:	2000077b 	.word	0x2000077b
   14900:	20000766 	.word	0x20000766
   14904:	2000077a 	.word	0x2000077a
   14908:	00016d8d 	.word	0x00016d8d
   1490c:	200006e1 	.word	0x200006e1
   14910:	0001fe3d 	.word	0x0001fe3d
   14914:	200007d0 	.word	0x200007d0
   14918:	20000768 	.word	0x20000768
   1491c:	000141c9 	.word	0x000141c9

00014920 <registerM2MEvent>:

void registerM2MEvent(uint8_t eventNo)
{
   14920:	b580      	push	{r7, lr}
   14922:	b082      	sub	sp, #8
   14924:	af00      	add	r7, sp, #0
   14926:	0002      	movs	r2, r0
   14928:	1dfb      	adds	r3, r7, #7
   1492a:	701a      	strb	r2, [r3, #0]
	if (!initialized)
   1492c:	4b20      	ldr	r3, [pc, #128]	; (149b0 <registerM2MEvent+0x90>)
   1492e:	781b      	ldrb	r3, [r3, #0]
   14930:	b2db      	uxtb	r3, r3
   14932:	2201      	movs	r2, #1
   14934:	4053      	eors	r3, r2
   14936:	b2db      	uxtb	r3, r3
   14938:	2b00      	cmp	r3, #0
   1493a:	d006      	beq.n	1494a <registerM2MEvent+0x2a>
	{
		setM2MEventState(eventNo,ME_CLEARED);
   1493c:	1dfb      	adds	r3, r7, #7
   1493e:	781b      	ldrb	r3, [r3, #0]
   14940:	2100      	movs	r1, #0
   14942:	0018      	movs	r0, r3
   14944:	4b1b      	ldr	r3, [pc, #108]	; (149b4 <registerM2MEvent+0x94>)
   14946:	4798      	blx	r3
		return;
   14948:	e02e      	b.n	149a8 <registerM2MEvent+0x88>
	}

	if (currentStatus == 'N' && currentCallStatus == 'N' && obtainNewEvent && !eventStaged && !m2mEventStaged)
   1494a:	4b1b      	ldr	r3, [pc, #108]	; (149b8 <registerM2MEvent+0x98>)
   1494c:	781b      	ldrb	r3, [r3, #0]
   1494e:	b2db      	uxtb	r3, r3
   14950:	2b4e      	cmp	r3, #78	; 0x4e
   14952:	d129      	bne.n	149a8 <registerM2MEvent+0x88>
   14954:	4b19      	ldr	r3, [pc, #100]	; (149bc <registerM2MEvent+0x9c>)
   14956:	781b      	ldrb	r3, [r3, #0]
   14958:	b2db      	uxtb	r3, r3
   1495a:	2b4e      	cmp	r3, #78	; 0x4e
   1495c:	d124      	bne.n	149a8 <registerM2MEvent+0x88>
   1495e:	4b18      	ldr	r3, [pc, #96]	; (149c0 <registerM2MEvent+0xa0>)
   14960:	781b      	ldrb	r3, [r3, #0]
   14962:	2b00      	cmp	r3, #0
   14964:	d020      	beq.n	149a8 <registerM2MEvent+0x88>
   14966:	4b17      	ldr	r3, [pc, #92]	; (149c4 <registerM2MEvent+0xa4>)
   14968:	781b      	ldrb	r3, [r3, #0]
   1496a:	2201      	movs	r2, #1
   1496c:	4053      	eors	r3, r2
   1496e:	b2db      	uxtb	r3, r3
   14970:	2b00      	cmp	r3, #0
   14972:	d019      	beq.n	149a8 <registerM2MEvent+0x88>
   14974:	4b14      	ldr	r3, [pc, #80]	; (149c8 <registerM2MEvent+0xa8>)
   14976:	781b      	ldrb	r3, [r3, #0]
   14978:	2201      	movs	r2, #1
   1497a:	4053      	eors	r3, r2
   1497c:	b2db      	uxtb	r3, r3
   1497e:	2b00      	cmp	r3, #0
   14980:	d012      	beq.n	149a8 <registerM2MEvent+0x88>
	{
		setM2MEventState(eventNo,ME_SERVICING);
   14982:	1dfb      	adds	r3, r7, #7
   14984:	781b      	ldrb	r3, [r3, #0]
   14986:	2102      	movs	r1, #2
   14988:	0018      	movs	r0, r3
   1498a:	4b0a      	ldr	r3, [pc, #40]	; (149b4 <registerM2MEvent+0x94>)
   1498c:	4798      	blx	r3
		m2mEvent=true;
   1498e:	4b0f      	ldr	r3, [pc, #60]	; (149cc <registerM2MEvent+0xac>)
   14990:	2201      	movs	r2, #1
   14992:	701a      	strb	r2, [r3, #0]
		m2mEventNo = eventNo;
   14994:	4b0e      	ldr	r3, [pc, #56]	; (149d0 <registerM2MEvent+0xb0>)
   14996:	1dfa      	adds	r2, r7, #7
   14998:	7812      	ldrb	r2, [r2, #0]
   1499a:	701a      	strb	r2, [r3, #0]
		m2mEventCalls=0;
   1499c:	4b0d      	ldr	r3, [pc, #52]	; (149d4 <registerM2MEvent+0xb4>)
   1499e:	2200      	movs	r2, #0
   149a0:	701a      	strb	r2, [r3, #0]
		makeResponseAction();
   149a2:	4b0d      	ldr	r3, [pc, #52]	; (149d8 <registerM2MEvent+0xb8>)
   149a4:	4798      	blx	r3
		return;
   149a6:	46c0      	nop			; (mov r8, r8)
	}
}
   149a8:	46bd      	mov	sp, r7
   149aa:	b002      	add	sp, #8
   149ac:	bd80      	pop	{r7, pc}
   149ae:	46c0      	nop			; (mov r8, r8)
   149b0:	20000789 	.word	0x20000789
   149b4:	0001b63d 	.word	0x0001b63d
   149b8:	200007c0 	.word	0x200007c0
   149bc:	2000077b 	.word	0x2000077b
   149c0:	20000766 	.word	0x20000766
   149c4:	200007b6 	.word	0x200007b6
   149c8:	2000077a 	.word	0x2000077a
   149cc:	2000073b 	.word	0x2000073b
   149d0:	20000729 	.word	0x20000729
   149d4:	200007b7 	.word	0x200007b7
   149d8:	000141c9 	.word	0x000141c9

000149dc <setMotorMGRResponse>:

void setMotorMGRResponse(char response)
{
   149dc:	b580      	push	{r7, lr}
   149de:	b082      	sub	sp, #8
   149e0:	af00      	add	r7, sp, #0
   149e2:	0002      	movs	r2, r0
   149e4:	1dfb      	adds	r3, r7, #7
   149e6:	701a      	strb	r2, [r3, #0]
	if(currentStatus!='I')    // not in Call than return.
   149e8:	4b07      	ldr	r3, [pc, #28]	; (14a08 <setMotorMGRResponse+0x2c>)
   149ea:	781b      	ldrb	r3, [r3, #0]
   149ec:	b2db      	uxtb	r3, r3
   149ee:	2b49      	cmp	r3, #73	; 0x49
   149f0:	d106      	bne.n	14a00 <setMotorMGRResponse+0x24>
	{
		return;
	}
	playSound(response,true);
   149f2:	1dfb      	adds	r3, r7, #7
   149f4:	781b      	ldrb	r3, [r3, #0]
   149f6:	2101      	movs	r1, #1
   149f8:	0018      	movs	r0, r3
   149fa:	4b04      	ldr	r3, [pc, #16]	; (14a0c <setMotorMGRResponse+0x30>)
   149fc:	4798      	blx	r3
   149fe:	e000      	b.n	14a02 <setMotorMGRResponse+0x26>
		return;
   14a00:	46c0      	nop			; (mov r8, r8)
}
   14a02:	46bd      	mov	sp, r7
   14a04:	b002      	add	sp, #8
   14a06:	bd80      	pop	{r7, pc}
   14a08:	200007c0 	.word	0x200007c0
   14a0c:	0001453d 	.word	0x0001453d

00014a10 <checkRespSMS>:

void checkRespSMS(char t1)
{
   14a10:	b580      	push	{r7, lr}
   14a12:	b082      	sub	sp, #8
   14a14:	af00      	add	r7, sp, #0
   14a16:	0002      	movs	r2, r0
   14a18:	1dfb      	adds	r3, r7, #7
   14a1a:	701a      	strb	r2, [r3, #0]
	if (!callAccepted && user_settings_parameter_struct.responseAddress=='A')
   14a1c:	4b0c      	ldr	r3, [pc, #48]	; (14a50 <checkRespSMS+0x40>)
   14a1e:	781b      	ldrb	r3, [r3, #0]
   14a20:	2201      	movs	r2, #1
   14a22:	4053      	eors	r3, r2
   14a24:	b2db      	uxtb	r3, r3
   14a26:	2b00      	cmp	r3, #0
   14a28:	d00d      	beq.n	14a46 <checkRespSMS+0x36>
   14a2a:	4b0a      	ldr	r3, [pc, #40]	; (14a54 <checkRespSMS+0x44>)
   14a2c:	795b      	ldrb	r3, [r3, #5]
   14a2e:	2b41      	cmp	r3, #65	; 0x41
   14a30:	d109      	bne.n	14a46 <checkRespSMS+0x36>
	{
		actionType = t1;
   14a32:	4b09      	ldr	r3, [pc, #36]	; (14a58 <checkRespSMS+0x48>)
   14a34:	1dfa      	adds	r2, r7, #7
   14a36:	7812      	ldrb	r2, [r2, #0]
   14a38:	701a      	strb	r2, [r3, #0]
		sendSMS("",false,false);
   14a3a:	4b08      	ldr	r3, [pc, #32]	; (14a5c <checkRespSMS+0x4c>)
   14a3c:	2200      	movs	r2, #0
   14a3e:	2100      	movs	r1, #0
   14a40:	0018      	movs	r0, r3
   14a42:	4b07      	ldr	r3, [pc, #28]	; (14a60 <checkRespSMS+0x50>)
   14a44:	4798      	blx	r3
	}
}
   14a46:	46c0      	nop			; (mov r8, r8)
   14a48:	46bd      	mov	sp, r7
   14a4a:	b002      	add	sp, #8
   14a4c:	bd80      	pop	{r7, pc}
   14a4e:	46c0      	nop			; (mov r8, r8)
   14a50:	2000078a 	.word	0x2000078a
   14a54:	20000660 	.word	0x20000660
   14a58:	2000075b 	.word	0x2000075b
   14a5c:	00029c34 	.word	0x00029c34
   14a60:	00016e71 	.word	0x00016e71

00014a64 <subDTMF>:

void subDTMF(void)
{
   14a64:	b580      	push	{r7, lr}
   14a66:	af00      	add	r7, sp, #0
	gsm_stop_play_record_file();
   14a68:	4b04      	ldr	r3, [pc, #16]	; (14a7c <subDTMF+0x18>)
   14a6a:	4798      	blx	r3
	callCutWait = xTaskGetTickCount();
   14a6c:	4b04      	ldr	r3, [pc, #16]	; (14a80 <subDTMF+0x1c>)
   14a6e:	4798      	blx	r3
   14a70:	0002      	movs	r2, r0
   14a72:	4b04      	ldr	r3, [pc, #16]	; (14a84 <subDTMF+0x20>)
   14a74:	601a      	str	r2, [r3, #0]
}
   14a76:	46c0      	nop			; (mov r8, r8)
   14a78:	46bd      	mov	sp, r7
   14a7a:	bd80      	pop	{r7, pc}
   14a7c:	00012f5d 	.word	0x00012f5d
   14a80:	0001fe3d 	.word	0x0001fe3d
   14a84:	200007f4 	.word	0x200007f4

00014a88 <processOnDTMF>:

void processOnDTMF(char *dtmf_cmd)
{
   14a88:	b580      	push	{r7, lr}
   14a8a:	b084      	sub	sp, #16
   14a8c:	af00      	add	r7, sp, #0
   14a8e:	6078      	str	r0, [r7, #4]
	char dtmf = dtmf_cmd[0];
   14a90:	230f      	movs	r3, #15
   14a92:	18fb      	adds	r3, r7, r3
   14a94:	687a      	ldr	r2, [r7, #4]
   14a96:	7812      	ldrb	r2, [r2, #0]
   14a98:	701a      	strb	r2, [r3, #0]
	
	//LCD_clear();
	//lcd_printf("%c",dtmf);
	if (factory_settings_parameter_struct.ENABLE_M2M)
   14a9a:	4b6a      	ldr	r3, [pc, #424]	; (14c44 <processOnDTMF+0x1bc>)
   14a9c:	78db      	ldrb	r3, [r3, #3]
   14a9e:	2b00      	cmp	r3, #0
   14aa0:	d010      	beq.n	14ac4 <processOnDTMF+0x3c>
	{
		if (m2mEvent)
   14aa2:	4b69      	ldr	r3, [pc, #420]	; (14c48 <processOnDTMF+0x1c0>)
   14aa4:	781b      	ldrb	r3, [r3, #0]
   14aa6:	2b00      	cmp	r3, #0
   14aa8:	d100      	bne.n	14aac <processOnDTMF+0x24>
   14aaa:	e0c7      	b.n	14c3c <processOnDTMF+0x1b4>
		{
			if(dtmf == 'A')
   14aac:	230f      	movs	r3, #15
   14aae:	18fb      	adds	r3, r7, r3
   14ab0:	781b      	ldrb	r3, [r3, #0]
   14ab2:	2b41      	cmp	r3, #65	; 0x41
   14ab4:	d000      	beq.n	14ab8 <processOnDTMF+0x30>
   14ab6:	e0c1      	b.n	14c3c <processOnDTMF+0x1b4>
			{
				m2mAck=true;
   14ab8:	4b64      	ldr	r3, [pc, #400]	; (14c4c <processOnDTMF+0x1c4>)
   14aba:	2201      	movs	r2, #1
   14abc:	701a      	strb	r2, [r3, #0]
				gsm_hangup_call();
   14abe:	4b64      	ldr	r3, [pc, #400]	; (14c50 <processOnDTMF+0x1c8>)
   14ac0:	4798      	blx	r3
		{
			subDTMF();
			voltageOnCall();
		}
	}
}
   14ac2:	e0bb      	b.n	14c3c <processOnDTMF+0x1b4>
		if (dtmf == '1') //Motor On
   14ac4:	230f      	movs	r3, #15
   14ac6:	18fb      	adds	r3, r7, r3
   14ac8:	781b      	ldrb	r3, [r3, #0]
   14aca:	2b31      	cmp	r3, #49	; 0x31
   14acc:	d106      	bne.n	14adc <processOnDTMF+0x54>
			subDTMF();
   14ace:	4b61      	ldr	r3, [pc, #388]	; (14c54 <processOnDTMF+0x1cc>)
   14ad0:	4798      	blx	r3
			startMotor(true,false);
   14ad2:	2100      	movs	r1, #0
   14ad4:	2001      	movs	r0, #1
   14ad6:	4b60      	ldr	r3, [pc, #384]	; (14c58 <processOnDTMF+0x1d0>)
   14ad8:	4798      	blx	r3
}
   14ada:	e0af      	b.n	14c3c <processOnDTMF+0x1b4>
		else if (dtmf == '2') //Motor Off
   14adc:	230f      	movs	r3, #15
   14ade:	18fb      	adds	r3, r7, r3
   14ae0:	781b      	ldrb	r3, [r3, #0]
   14ae2:	2b32      	cmp	r3, #50	; 0x32
   14ae4:	d107      	bne.n	14af6 <processOnDTMF+0x6e>
			subDTMF();
   14ae6:	4b5b      	ldr	r3, [pc, #364]	; (14c54 <processOnDTMF+0x1cc>)
   14ae8:	4798      	blx	r3
			stopMotor(true,false,false);
   14aea:	2200      	movs	r2, #0
   14aec:	2100      	movs	r1, #0
   14aee:	2001      	movs	r0, #1
   14af0:	4b5a      	ldr	r3, [pc, #360]	; (14c5c <processOnDTMF+0x1d4>)
   14af2:	4798      	blx	r3
}
   14af4:	e0a2      	b.n	14c3c <processOnDTMF+0x1b4>
		else if (dtmf == '3') //Status
   14af6:	230f      	movs	r3, #15
   14af8:	18fb      	adds	r3, r7, r3
   14afa:	781b      	ldrb	r3, [r3, #0]
   14afc:	2b33      	cmp	r3, #51	; 0x33
   14afe:	d104      	bne.n	14b0a <processOnDTMF+0x82>
			subDTMF();
   14b00:	4b54      	ldr	r3, [pc, #336]	; (14c54 <processOnDTMF+0x1cc>)
   14b02:	4798      	blx	r3
			statusOnCall();
   14b04:	4b56      	ldr	r3, [pc, #344]	; (14c60 <processOnDTMF+0x1d8>)
   14b06:	4798      	blx	r3
}
   14b08:	e098      	b.n	14c3c <processOnDTMF+0x1b4>
		else if (dtmf == '4') //underground status
   14b0a:	230f      	movs	r3, #15
   14b0c:	18fb      	adds	r3, r7, r3
   14b0e:	781b      	ldrb	r3, [r3, #0]
   14b10:	2b34      	cmp	r3, #52	; 0x34
   14b12:	d10a      	bne.n	14b2a <processOnDTMF+0xa2>
			if (factory_settings_parameter_struct.ENABLE_WATER)
   14b14:	4b4b      	ldr	r3, [pc, #300]	; (14c44 <processOnDTMF+0x1bc>)
   14b16:	795b      	ldrb	r3, [r3, #5]
   14b18:	2b00      	cmp	r3, #0
   14b1a:	d100      	bne.n	14b1e <processOnDTMF+0x96>
   14b1c:	e08e      	b.n	14c3c <processOnDTMF+0x1b4>
				subDTMF();
   14b1e:	4b4d      	ldr	r3, [pc, #308]	; (14c54 <processOnDTMF+0x1cc>)
   14b20:	4798      	blx	r3
				waterStatusOnCall(false);
   14b22:	2000      	movs	r0, #0
   14b24:	4b4f      	ldr	r3, [pc, #316]	; (14c64 <processOnDTMF+0x1dc>)
   14b26:	4798      	blx	r3
}
   14b28:	e088      	b.n	14c3c <processOnDTMF+0x1b4>
		else if (dtmf == '5') //overHead Status
   14b2a:	230f      	movs	r3, #15
   14b2c:	18fb      	adds	r3, r7, r3
   14b2e:	781b      	ldrb	r3, [r3, #0]
   14b30:	2b35      	cmp	r3, #53	; 0x35
   14b32:	d10a      	bne.n	14b4a <processOnDTMF+0xc2>
			if (factory_settings_parameter_struct.ENABLE_GP)
   14b34:	4b43      	ldr	r3, [pc, #268]	; (14c44 <processOnDTMF+0x1bc>)
   14b36:	791b      	ldrb	r3, [r3, #4]
   14b38:	2b00      	cmp	r3, #0
   14b3a:	d100      	bne.n	14b3e <processOnDTMF+0xb6>
   14b3c:	e07e      	b.n	14c3c <processOnDTMF+0x1b4>
				subDTMF();
   14b3e:	4b45      	ldr	r3, [pc, #276]	; (14c54 <processOnDTMF+0x1cc>)
   14b40:	4798      	blx	r3
				overHeadWaterStatusOnCall(false);
   14b42:	2000      	movs	r0, #0
   14b44:	4b48      	ldr	r3, [pc, #288]	; (14c68 <processOnDTMF+0x1e0>)
   14b46:	4798      	blx	r3
}
   14b48:	e078      	b.n	14c3c <processOnDTMF+0x1b4>
		else if(dtmf == '0')
   14b4a:	230f      	movs	r3, #15
   14b4c:	18fb      	adds	r3, r7, r3
   14b4e:	781b      	ldrb	r3, [r3, #0]
   14b50:	2b30      	cmp	r3, #48	; 0x30
   14b52:	d114      	bne.n	14b7e <processOnDTMF+0xf6>
			if (factory_settings_parameter_struct.ENABLE_CURRENT)
   14b54:	4b3b      	ldr	r3, [pc, #236]	; (14c44 <processOnDTMF+0x1bc>)
   14b56:	785b      	ldrb	r3, [r3, #1]
   14b58:	2b00      	cmp	r3, #0
   14b5a:	d100      	bne.n	14b5e <processOnDTMF+0xd6>
   14b5c:	e06e      	b.n	14c3c <processOnDTMF+0x1b4>
				if(zeroPressed)
   14b5e:	4b43      	ldr	r3, [pc, #268]	; (14c6c <processOnDTMF+0x1e4>)
   14b60:	781b      	ldrb	r3, [r3, #0]
   14b62:	2b00      	cmp	r3, #0
   14b64:	d007      	beq.n	14b76 <processOnDTMF+0xee>
					autoSetCurrent();   //to enable or disable current detection
   14b66:	4b42      	ldr	r3, [pc, #264]	; (14c70 <processOnDTMF+0x1e8>)
   14b68:	4798      	blx	r3
					subDTMF();
   14b6a:	4b3a      	ldr	r3, [pc, #232]	; (14c54 <processOnDTMF+0x1cc>)
   14b6c:	4798      	blx	r3
					zeroPressed=false;
   14b6e:	4b3f      	ldr	r3, [pc, #252]	; (14c6c <processOnDTMF+0x1e4>)
   14b70:	2200      	movs	r2, #0
   14b72:	701a      	strb	r2, [r3, #0]
}
   14b74:	e062      	b.n	14c3c <processOnDTMF+0x1b4>
					zeroPressed=true;
   14b76:	4b3d      	ldr	r3, [pc, #244]	; (14c6c <processOnDTMF+0x1e4>)
   14b78:	2201      	movs	r2, #1
   14b7a:	701a      	strb	r2, [r3, #0]
}
   14b7c:	e05e      	b.n	14c3c <processOnDTMF+0x1b4>
		else if (dtmf == '7') //Speak Current Ampere On Call
   14b7e:	230f      	movs	r3, #15
   14b80:	18fb      	adds	r3, r7, r3
   14b82:	781b      	ldrb	r3, [r3, #0]
   14b84:	2b37      	cmp	r3, #55	; 0x37
   14b86:	d108      	bne.n	14b9a <processOnDTMF+0x112>
			if (factory_settings_parameter_struct.AMPERE_SPEAK)
   14b88:	4b2e      	ldr	r3, [pc, #184]	; (14c44 <processOnDTMF+0x1bc>)
   14b8a:	789b      	ldrb	r3, [r3, #2]
   14b8c:	2b00      	cmp	r3, #0
   14b8e:	d055      	beq.n	14c3c <processOnDTMF+0x1b4>
				subDTMF();
   14b90:	4b30      	ldr	r3, [pc, #192]	; (14c54 <processOnDTMF+0x1cc>)
   14b92:	4798      	blx	r3
				speakAmpere();
   14b94:	4b37      	ldr	r3, [pc, #220]	; (14c74 <processOnDTMF+0x1ec>)
   14b96:	4798      	blx	r3
}
   14b98:	e050      	b.n	14c3c <processOnDTMF+0x1b4>
		else if(dtmf=='D')
   14b9a:	230f      	movs	r3, #15
   14b9c:	18fb      	adds	r3, r7, r3
   14b9e:	781b      	ldrb	r3, [r3, #0]
   14ba0:	2b44      	cmp	r3, #68	; 0x44
   14ba2:	d10d      	bne.n	14bc0 <processOnDTMF+0x138>
			saveAutoStartSettings(true);  //set AutoStart to True in EEPROM
   14ba4:	2001      	movs	r0, #1
   14ba6:	4b34      	ldr	r3, [pc, #208]	; (14c78 <processOnDTMF+0x1f0>)
   14ba8:	4798      	blx	r3
			resetAutoStart(true);
   14baa:	2001      	movs	r0, #1
   14bac:	4b33      	ldr	r3, [pc, #204]	; (14c7c <processOnDTMF+0x1f4>)
   14bae:	4798      	blx	r3
			startMotor(false,false);
   14bb0:	2100      	movs	r1, #0
   14bb2:	2000      	movs	r0, #0
   14bb4:	4b28      	ldr	r3, [pc, #160]	; (14c58 <processOnDTMF+0x1d0>)
   14bb6:	4798      	blx	r3
			sendDTMFTone(0xFF);
   14bb8:	20ff      	movs	r0, #255	; 0xff
   14bba:	4b31      	ldr	r3, [pc, #196]	; (14c80 <processOnDTMF+0x1f8>)
   14bbc:	4798      	blx	r3
}
   14bbe:	e03d      	b.n	14c3c <processOnDTMF+0x1b4>
		else if(dtmf=='C')
   14bc0:	230f      	movs	r3, #15
   14bc2:	18fb      	adds	r3, r7, r3
   14bc4:	781b      	ldrb	r3, [r3, #0]
   14bc6:	2b43      	cmp	r3, #67	; 0x43
   14bc8:	d10b      	bne.n	14be2 <processOnDTMF+0x15a>
			saveAutoStartSettings(false);  //set AutoStart to false in EEPROM
   14bca:	2000      	movs	r0, #0
   14bcc:	4b2a      	ldr	r3, [pc, #168]	; (14c78 <processOnDTMF+0x1f0>)
   14bce:	4798      	blx	r3
			stopMotor(false,false,true);
   14bd0:	2201      	movs	r2, #1
   14bd2:	2100      	movs	r1, #0
   14bd4:	2000      	movs	r0, #0
   14bd6:	4b21      	ldr	r3, [pc, #132]	; (14c5c <processOnDTMF+0x1d4>)
   14bd8:	4798      	blx	r3
			sendDTMFTone(0xFF);
   14bda:	20ff      	movs	r0, #255	; 0xff
   14bdc:	4b28      	ldr	r3, [pc, #160]	; (14c80 <processOnDTMF+0x1f8>)
   14bde:	4798      	blx	r3
}
   14be0:	e02c      	b.n	14c3c <processOnDTMF+0x1b4>
		else if (dtmf == '8') //Set AUTOTIMER ON
   14be2:	230f      	movs	r3, #15
   14be4:	18fb      	adds	r3, r7, r3
   14be6:	781b      	ldrb	r3, [r3, #0]
   14be8:	2b38      	cmp	r3, #56	; 0x38
   14bea:	d10c      	bne.n	14c06 <processOnDTMF+0x17e>
			subDTMF();
   14bec:	4b19      	ldr	r3, [pc, #100]	; (14c54 <processOnDTMF+0x1cc>)
   14bee:	4798      	blx	r3
			saveAutoStartSettings(true);  //set AutoStart to True in EEPROM
   14bf0:	2001      	movs	r0, #1
   14bf2:	4b21      	ldr	r3, [pc, #132]	; (14c78 <processOnDTMF+0x1f0>)
   14bf4:	4798      	blx	r3
			resetAutoStart(true);
   14bf6:	2001      	movs	r0, #1
   14bf8:	4b20      	ldr	r3, [pc, #128]	; (14c7c <processOnDTMF+0x1f4>)
   14bfa:	4798      	blx	r3
			playSound(')',true);     // playFile AutoStart is On
   14bfc:	2101      	movs	r1, #1
   14bfe:	2029      	movs	r0, #41	; 0x29
   14c00:	4b20      	ldr	r3, [pc, #128]	; (14c84 <processOnDTMF+0x1fc>)
   14c02:	4798      	blx	r3
}
   14c04:	e01a      	b.n	14c3c <processOnDTMF+0x1b4>
		else if (dtmf == '9') //Set AUTOTIMER OFF
   14c06:	230f      	movs	r3, #15
   14c08:	18fb      	adds	r3, r7, r3
   14c0a:	781b      	ldrb	r3, [r3, #0]
   14c0c:	2b39      	cmp	r3, #57	; 0x39
   14c0e:	d10c      	bne.n	14c2a <processOnDTMF+0x1a2>
			subDTMF();
   14c10:	4b10      	ldr	r3, [pc, #64]	; (14c54 <processOnDTMF+0x1cc>)
   14c12:	4798      	blx	r3
			saveAutoStartSettings(false);  //set AUtoStart to False in EEPROM
   14c14:	2000      	movs	r0, #0
   14c16:	4b18      	ldr	r3, [pc, #96]	; (14c78 <processOnDTMF+0x1f0>)
   14c18:	4798      	blx	r3
			resetAutoStart(true);
   14c1a:	2001      	movs	r0, #1
   14c1c:	4b17      	ldr	r3, [pc, #92]	; (14c7c <processOnDTMF+0x1f4>)
   14c1e:	4798      	blx	r3
			playSound('[',true); //playFile autoStart is turned oFF
   14c20:	2101      	movs	r1, #1
   14c22:	205b      	movs	r0, #91	; 0x5b
   14c24:	4b17      	ldr	r3, [pc, #92]	; (14c84 <processOnDTMF+0x1fc>)
   14c26:	4798      	blx	r3
}
   14c28:	e008      	b.n	14c3c <processOnDTMF+0x1b4>
		else if(dtmf == '*')
   14c2a:	230f      	movs	r3, #15
   14c2c:	18fb      	adds	r3, r7, r3
   14c2e:	781b      	ldrb	r3, [r3, #0]
   14c30:	2b2a      	cmp	r3, #42	; 0x2a
   14c32:	d103      	bne.n	14c3c <processOnDTMF+0x1b4>
			subDTMF();
   14c34:	4b07      	ldr	r3, [pc, #28]	; (14c54 <processOnDTMF+0x1cc>)
   14c36:	4798      	blx	r3
			voltageOnCall();
   14c38:	4b13      	ldr	r3, [pc, #76]	; (14c88 <processOnDTMF+0x200>)
   14c3a:	4798      	blx	r3
}
   14c3c:	46c0      	nop			; (mov r8, r8)
   14c3e:	46bd      	mov	sp, r7
   14c40:	b004      	add	sp, #16
   14c42:	bd80      	pop	{r7, pc}
   14c44:	20000638 	.word	0x20000638
   14c48:	2000073b 	.word	0x2000073b
   14c4c:	20000728 	.word	0x20000728
   14c50:	00012efd 	.word	0x00012efd
   14c54:	00014a65 	.word	0x00014a65
   14c58:	0001aef1 	.word	0x0001aef1
   14c5c:	0001b0b5 	.word	0x0001b0b5
   14c60:	0001b4ed 	.word	0x0001b4ed
   14c64:	00019045 	.word	0x00019045
   14c68:	00018efd 	.word	0x00018efd
   14c6c:	200007eb 	.word	0x200007eb
   14c70:	00019b0d 	.word	0x00019b0d
   14c74:	00019c01 	.word	0x00019c01
   14c78:	0001128d 	.word	0x0001128d
   14c7c:	0001aabd 	.word	0x0001aabd
   14c80:	0001702d 	.word	0x0001702d
   14c84:	0001453d 	.word	0x0001453d
   14c88:	0001b5fd 	.word	0x0001b5fd

00014c8c <processOnSMS>:

void processOnSMS(char *received_command, bool admin,bool response_sms_processed_cmd,bool alterNumber, char *phone_number)
{
   14c8c:	b5f0      	push	{r4, r5, r6, r7, lr}
   14c8e:	46c6      	mov	lr, r8
   14c90:	b500      	push	{lr}
   14c92:	b0d2      	sub	sp, #328	; 0x148
   14c94:	af06      	add	r7, sp, #24
   14c96:	60f8      	str	r0, [r7, #12]
   14c98:	000c      	movs	r4, r1
   14c9a:	0010      	movs	r0, r2
   14c9c:	0019      	movs	r1, r3
   14c9e:	4beb      	ldr	r3, [pc, #940]	; (1504c <processOnSMS+0x3c0>)
   14ca0:	2294      	movs	r2, #148	; 0x94
   14ca2:	0052      	lsls	r2, r2, #1
   14ca4:	4694      	mov	ip, r2
   14ca6:	2208      	movs	r2, #8
   14ca8:	4690      	mov	r8, r2
   14caa:	44b8      	add	r8, r7
   14cac:	44c4      	add	ip, r8
   14cae:	4463      	add	r3, ip
   14cb0:	1c22      	adds	r2, r4, #0
   14cb2:	701a      	strb	r2, [r3, #0]
   14cb4:	4be6      	ldr	r3, [pc, #920]	; (15050 <processOnSMS+0x3c4>)
   14cb6:	2294      	movs	r2, #148	; 0x94
   14cb8:	0052      	lsls	r2, r2, #1
   14cba:	4694      	mov	ip, r2
   14cbc:	2208      	movs	r2, #8
   14cbe:	4690      	mov	r8, r2
   14cc0:	44b8      	add	r8, r7
   14cc2:	44c4      	add	ip, r8
   14cc4:	4463      	add	r3, ip
   14cc6:	1c02      	adds	r2, r0, #0
   14cc8:	701a      	strb	r2, [r3, #0]
   14cca:	4be2      	ldr	r3, [pc, #904]	; (15054 <processOnSMS+0x3c8>)
   14ccc:	2294      	movs	r2, #148	; 0x94
   14cce:	0052      	lsls	r2, r2, #1
   14cd0:	4694      	mov	ip, r2
   14cd2:	2208      	movs	r2, #8
   14cd4:	4690      	mov	r8, r2
   14cd6:	44b8      	add	r8, r7
   14cd8:	44c4      	add	ip, r8
   14cda:	4463      	add	r3, ip
   14cdc:	1c0a      	adds	r2, r1, #0
   14cde:	701a      	strb	r2, [r3, #0]
	char *copy_received_command;
	char resep_msg[250];
	bool incomingSMSProcessed=false;
   14ce0:	2328      	movs	r3, #40	; 0x28
   14ce2:	33ff      	adds	r3, #255	; 0xff
   14ce4:	2208      	movs	r2, #8
   14ce6:	4694      	mov	ip, r2
   14ce8:	44bc      	add	ip, r7
   14cea:	4463      	add	r3, ip
   14cec:	2200      	movs	r2, #0
   14cee:	701a      	strb	r2, [r3, #0]

	copy_received_command = received_command;
   14cf0:	68fb      	ldr	r3, [r7, #12]
   14cf2:	228c      	movs	r2, #140	; 0x8c
   14cf4:	0052      	lsls	r2, r2, #1
   14cf6:	2108      	movs	r1, #8
   14cf8:	468c      	mov	ip, r1
   14cfa:	44bc      	add	ip, r7
   14cfc:	4462      	add	r2, ip
   14cfe:	6013      	str	r3, [r2, #0]
	
	if(alterNumber)
   14d00:	4bd4      	ldr	r3, [pc, #848]	; (15054 <processOnSMS+0x3c8>)
   14d02:	2294      	movs	r2, #148	; 0x94
   14d04:	0052      	lsls	r2, r2, #1
   14d06:	4694      	mov	ip, r2
   14d08:	2208      	movs	r2, #8
   14d0a:	4690      	mov	r8, r2
   14d0c:	44b8      	add	r8, r7
   14d0e:	44c4      	add	ip, r8
   14d10:	4463      	add	r3, ip
   14d12:	781b      	ldrb	r3, [r3, #0]
   14d14:	2b00      	cmp	r3, #0
   14d16:	d00e      	beq.n	14d36 <processOnSMS+0xaa>
	{
		if(!StringstartsWith(received_command,"AMON"))
   14d18:	4acf      	ldr	r2, [pc, #828]	; (15058 <processOnSMS+0x3cc>)
   14d1a:	68fb      	ldr	r3, [r7, #12]
   14d1c:	0011      	movs	r1, r2
   14d1e:	0018      	movs	r0, r3
   14d20:	4bce      	ldr	r3, [pc, #824]	; (1505c <processOnSMS+0x3d0>)
   14d22:	4798      	blx	r3
   14d24:	0003      	movs	r3, r0
   14d26:	001a      	movs	r2, r3
   14d28:	2301      	movs	r3, #1
   14d2a:	4053      	eors	r3, r2
   14d2c:	b2db      	uxtb	r3, r3
   14d2e:	2b00      	cmp	r3, #0
   14d30:	d001      	beq.n	14d36 <processOnSMS+0xaa>
   14d32:	f001 ff69 	bl	16c08 <processOnSMS+0x1f7c>
		return;
	}
	
	if (StringstartsWith(received_command,"PRGUPD"))
   14d36:	4aca      	ldr	r2, [pc, #808]	; (15060 <processOnSMS+0x3d4>)
   14d38:	68fb      	ldr	r3, [r7, #12]
   14d3a:	0011      	movs	r1, r2
   14d3c:	0018      	movs	r0, r3
   14d3e:	4bc7      	ldr	r3, [pc, #796]	; (1505c <processOnSMS+0x3d0>)
   14d40:	4798      	blx	r3
   14d42:	1e03      	subs	r3, r0, #0
   14d44:	d014      	beq.n	14d70 <processOnSMS+0xe4>
	{
		//if (admin)
		{
			bootloader_parameter.firmware_download_pending = true;
   14d46:	4bc7      	ldr	r3, [pc, #796]	; (15064 <processOnSMS+0x3d8>)
   14d48:	2201      	movs	r2, #1
   14d4a:	715a      	strb	r2, [r3, #5]
			memcpy(page_data,&bootloader_parameter,sizeof(bootloader_parameter));
   14d4c:	49c5      	ldr	r1, [pc, #788]	; (15064 <processOnSMS+0x3d8>)
   14d4e:	4bc6      	ldr	r3, [pc, #792]	; (15068 <processOnSMS+0x3dc>)
   14d50:	2218      	movs	r2, #24
   14d52:	0018      	movs	r0, r3
   14d54:	4bc5      	ldr	r3, [pc, #788]	; (1506c <processOnSMS+0x3e0>)
   14d56:	4798      	blx	r3
			eeprom_emulator_write_page(BOOTLOADER_PARAMETER_PAGE, page_data);
   14d58:	4bc3      	ldr	r3, [pc, #780]	; (15068 <processOnSMS+0x3dc>)
   14d5a:	0019      	movs	r1, r3
   14d5c:	2000      	movs	r0, #0
   14d5e:	4bc4      	ldr	r3, [pc, #784]	; (15070 <processOnSMS+0x3e4>)
   14d60:	4798      	blx	r3
			eeprom_emulator_commit_page_buffer();
   14d62:	4bc4      	ldr	r3, [pc, #784]	; (15074 <processOnSMS+0x3e8>)
   14d64:	4798      	blx	r3
			vTaskDelay(100);
   14d66:	2064      	movs	r0, #100	; 0x64
   14d68:	4bc3      	ldr	r3, [pc, #780]	; (15078 <processOnSMS+0x3ec>)
   14d6a:	4798      	blx	r3
			system_reset();
   14d6c:	4bc3      	ldr	r3, [pc, #780]	; (1507c <processOnSMS+0x3f0>)
   14d6e:	4798      	blx	r3
		}
	}
	
	if (StringstartsWith(received_command,"WAIT"))
   14d70:	4ac3      	ldr	r2, [pc, #780]	; (15080 <processOnSMS+0x3f4>)
   14d72:	68fb      	ldr	r3, [r7, #12]
   14d74:	0011      	movs	r1, r2
   14d76:	0018      	movs	r0, r3
   14d78:	4bb8      	ldr	r3, [pc, #736]	; (1505c <processOnSMS+0x3d0>)
   14d7a:	4798      	blx	r3
   14d7c:	1e03      	subs	r3, r0, #0
   14d7e:	d047      	beq.n	14e10 <processOnSMS+0x184>
	{
		enum gsm_error err = gsm_disable_call_waiting();
   14d80:	2318      	movs	r3, #24
   14d82:	33ff      	adds	r3, #255	; 0xff
   14d84:	2208      	movs	r2, #8
   14d86:	18ba      	adds	r2, r7, r2
   14d88:	18d4      	adds	r4, r2, r3
   14d8a:	4bbe      	ldr	r3, [pc, #760]	; (15084 <processOnSMS+0x3f8>)
   14d8c:	4798      	blx	r3
   14d8e:	0003      	movs	r3, r0
   14d90:	7023      	strb	r3, [r4, #0]
		incomingSMSProcessed=true;
   14d92:	2328      	movs	r3, #40	; 0x28
   14d94:	33ff      	adds	r3, #255	; 0xff
   14d96:	2208      	movs	r2, #8
   14d98:	4694      	mov	ip, r2
   14d9a:	44bc      	add	ip, r7
   14d9c:	4463      	add	r3, ip
   14d9e:	2201      	movs	r2, #1
   14da0:	701a      	strb	r2, [r3, #0]
		if (response_sms_processed_cmd == true)
   14da2:	4bab      	ldr	r3, [pc, #684]	; (15050 <processOnSMS+0x3c4>)
   14da4:	2294      	movs	r2, #148	; 0x94
   14da6:	0052      	lsls	r2, r2, #1
   14da8:	4694      	mov	ip, r2
   14daa:	2208      	movs	r2, #8
   14dac:	4690      	mov	r8, r2
   14dae:	44b8      	add	r8, r7
   14db0:	44c4      	add	ip, r8
   14db2:	4463      	add	r3, ip
   14db4:	781b      	ldrb	r3, [r3, #0]
   14db6:	2b00      	cmp	r3, #0
   14db8:	d101      	bne.n	14dbe <processOnSMS+0x132>
   14dba:	f001 fedf 	bl	16b7c <processOnSMS+0x1ef0>
		{
			if (err == GSM_ERROR_NONE)
   14dbe:	2318      	movs	r3, #24
   14dc0:	33ff      	adds	r3, #255	; 0xff
   14dc2:	2208      	movs	r2, #8
   14dc4:	4694      	mov	ip, r2
   14dc6:	44bc      	add	ip, r7
   14dc8:	4463      	add	r3, ip
   14dca:	781b      	ldrb	r3, [r3, #0]
   14dcc:	2b00      	cmp	r3, #0
   14dce:	d10d      	bne.n	14dec <processOnSMS+0x160>
			{
				strcpy(resep_msg,"GSM CALL WAITTING DISABLE : SUCCESS");
   14dd0:	230c      	movs	r3, #12
   14dd2:	2208      	movs	r2, #8
   14dd4:	4694      	mov	ip, r2
   14dd6:	44bc      	add	ip, r7
   14dd8:	4463      	add	r3, ip
   14dda:	4aab      	ldr	r2, [pc, #684]	; (15088 <processOnSMS+0x3fc>)
   14ddc:	ca13      	ldmia	r2!, {r0, r1, r4}
   14dde:	c313      	stmia	r3!, {r0, r1, r4}
   14de0:	ca13      	ldmia	r2!, {r0, r1, r4}
   14de2:	c313      	stmia	r3!, {r0, r1, r4}
   14de4:	ca13      	ldmia	r2!, {r0, r1, r4}
   14de6:	c313      	stmia	r3!, {r0, r1, r4}
   14de8:	f001 fec8 	bl	16b7c <processOnSMS+0x1ef0>
			}
			else
			{
				strcpy(resep_msg,"GSM CALL WAITTING DISABLE : FAILED");
   14dec:	230c      	movs	r3, #12
   14dee:	2208      	movs	r2, #8
   14df0:	4694      	mov	ip, r2
   14df2:	44bc      	add	ip, r7
   14df4:	4463      	add	r3, ip
   14df6:	4aa5      	ldr	r2, [pc, #660]	; (1508c <processOnSMS+0x400>)
   14df8:	ca13      	ldmia	r2!, {r0, r1, r4}
   14dfa:	c313      	stmia	r3!, {r0, r1, r4}
   14dfc:	ca13      	ldmia	r2!, {r0, r1, r4}
   14dfe:	c313      	stmia	r3!, {r0, r1, r4}
   14e00:	ca03      	ldmia	r2!, {r0, r1}
   14e02:	c303      	stmia	r3!, {r0, r1}
   14e04:	8811      	ldrh	r1, [r2, #0]
   14e06:	8019      	strh	r1, [r3, #0]
   14e08:	7892      	ldrb	r2, [r2, #2]
   14e0a:	709a      	strb	r2, [r3, #2]
   14e0c:	f001 feb6 	bl	16b7c <processOnSMS+0x1ef0>
			}
		}
	}
	else if (StringstartsWith(received_command,"CLEARALL"))
   14e10:	4a9f      	ldr	r2, [pc, #636]	; (15090 <processOnSMS+0x404>)
   14e12:	68fb      	ldr	r3, [r7, #12]
   14e14:	0011      	movs	r1, r2
   14e16:	0018      	movs	r0, r3
   14e18:	4b90      	ldr	r3, [pc, #576]	; (1505c <processOnSMS+0x3d0>)
   14e1a:	4798      	blx	r3
   14e1c:	1e03      	subs	r3, r0, #0
   14e1e:	d030      	beq.n	14e82 <processOnSMS+0x1f6>
	{
		clearNumbers(admin);
   14e20:	4b8a      	ldr	r3, [pc, #552]	; (1504c <processOnSMS+0x3c0>)
   14e22:	2294      	movs	r2, #148	; 0x94
   14e24:	0052      	lsls	r2, r2, #1
   14e26:	4694      	mov	ip, r2
   14e28:	2208      	movs	r2, #8
   14e2a:	4690      	mov	r8, r2
   14e2c:	44b8      	add	r8, r7
   14e2e:	44c4      	add	ip, r8
   14e30:	4463      	add	r3, ip
   14e32:	781b      	ldrb	r3, [r3, #0]
   14e34:	0018      	movs	r0, r3
   14e36:	4b97      	ldr	r3, [pc, #604]	; (15094 <processOnSMS+0x408>)
   14e38:	4798      	blx	r3
		incomingSMSProcessed=true;
   14e3a:	2328      	movs	r3, #40	; 0x28
   14e3c:	33ff      	adds	r3, #255	; 0xff
   14e3e:	2208      	movs	r2, #8
   14e40:	4694      	mov	ip, r2
   14e42:	44bc      	add	ip, r7
   14e44:	4463      	add	r3, ip
   14e46:	2201      	movs	r2, #1
   14e48:	701a      	strb	r2, [r3, #0]
		if (response_sms_processed_cmd == true)
   14e4a:	4b81      	ldr	r3, [pc, #516]	; (15050 <processOnSMS+0x3c4>)
   14e4c:	2294      	movs	r2, #148	; 0x94
   14e4e:	0052      	lsls	r2, r2, #1
   14e50:	4694      	mov	ip, r2
   14e52:	2208      	movs	r2, #8
   14e54:	4690      	mov	r8, r2
   14e56:	44b8      	add	r8, r7
   14e58:	44c4      	add	ip, r8
   14e5a:	4463      	add	r3, ip
   14e5c:	781b      	ldrb	r3, [r3, #0]
   14e5e:	2b00      	cmp	r3, #0
   14e60:	d101      	bne.n	14e66 <processOnSMS+0x1da>
   14e62:	f001 fe8b 	bl	16b7c <processOnSMS+0x1ef0>
		{
			strcpy(resep_msg,"ALL USER NUMBERS CLEARED");
   14e66:	230c      	movs	r3, #12
   14e68:	2208      	movs	r2, #8
   14e6a:	4694      	mov	ip, r2
   14e6c:	44bc      	add	ip, r7
   14e6e:	4463      	add	r3, ip
   14e70:	4a89      	ldr	r2, [pc, #548]	; (15098 <processOnSMS+0x40c>)
   14e72:	ca13      	ldmia	r2!, {r0, r1, r4}
   14e74:	c313      	stmia	r3!, {r0, r1, r4}
   14e76:	ca13      	ldmia	r2!, {r0, r1, r4}
   14e78:	c313      	stmia	r3!, {r0, r1, r4}
   14e7a:	7812      	ldrb	r2, [r2, #0]
   14e7c:	701a      	strb	r2, [r3, #0]
   14e7e:	f001 fe7d 	bl	16b7c <processOnSMS+0x1ef0>
		}
	}
	else if (StringstartsWith(received_command,"DEFAULT"))
   14e82:	4a86      	ldr	r2, [pc, #536]	; (1509c <processOnSMS+0x410>)
   14e84:	68fb      	ldr	r3, [r7, #12]
   14e86:	0011      	movs	r1, r2
   14e88:	0018      	movs	r0, r3
   14e8a:	4b74      	ldr	r3, [pc, #464]	; (1505c <processOnSMS+0x3d0>)
   14e8c:	4798      	blx	r3
   14e8e:	1e03      	subs	r3, r0, #0
   14e90:	d065      	beq.n	14f5e <processOnSMS+0x2d2>
	{
		saveAutoStartSettings(false);
   14e92:	2000      	movs	r0, #0
   14e94:	4b82      	ldr	r3, [pc, #520]	; (150a0 <processOnSMS+0x414>)
   14e96:	4798      	blx	r3
		if (factory_settings_parameter_struct.ENABLE_WATER)
   14e98:	4b82      	ldr	r3, [pc, #520]	; (150a4 <processOnSMS+0x418>)
   14e9a:	795b      	ldrb	r3, [r3, #5]
   14e9c:	2b00      	cmp	r3, #0
   14e9e:	d00d      	beq.n	14ebc <processOnSMS+0x230>
		{
			saveWaterBypassSettings(false);
   14ea0:	2000      	movs	r0, #0
   14ea2:	4b81      	ldr	r3, [pc, #516]	; (150a8 <processOnSMS+0x41c>)
   14ea4:	4798      	blx	r3
			if (factory_settings_parameter_struct.ENABLE_M2M)
   14ea6:	4b7f      	ldr	r3, [pc, #508]	; (150a4 <processOnSMS+0x418>)
   14ea8:	78db      	ldrb	r3, [r3, #3]
   14eaa:	2b00      	cmp	r3, #0
   14eac:	d003      	beq.n	14eb6 <processOnSMS+0x22a>
			{
				saveM2MSettings(false);
   14eae:	2000      	movs	r0, #0
   14eb0:	4b7e      	ldr	r3, [pc, #504]	; (150ac <processOnSMS+0x420>)
   14eb2:	4798      	blx	r3
   14eb4:	e002      	b.n	14ebc <processOnSMS+0x230>
			}
			else
			{
				savePreventOverFlowSettings(false);
   14eb6:	2000      	movs	r0, #0
   14eb8:	4b7d      	ldr	r3, [pc, #500]	; (150b0 <processOnSMS+0x424>)
   14eba:	4798      	blx	r3
			}
		}
		if (factory_settings_parameter_struct.ENABLE_CURRENT)
   14ebc:	4b79      	ldr	r3, [pc, #484]	; (150a4 <processOnSMS+0x418>)
   14ebe:	785b      	ldrb	r3, [r3, #1]
   14ec0:	2b00      	cmp	r3, #0
   14ec2:	d008      	beq.n	14ed6 <processOnSMS+0x24a>
		{
			setOverloadPer(120);
   14ec4:	2078      	movs	r0, #120	; 0x78
   14ec6:	4b7b      	ldr	r3, [pc, #492]	; (150b4 <processOnSMS+0x428>)
   14ec8:	4798      	blx	r3
			setUnderloadPer(85);
   14eca:	2055      	movs	r0, #85	; 0x55
   14ecc:	4b7a      	ldr	r3, [pc, #488]	; (150b8 <processOnSMS+0x42c>)
   14ece:	4798      	blx	r3
			setCurrentDetection(false);
   14ed0:	2000      	movs	r0, #0
   14ed2:	4b7a      	ldr	r3, [pc, #488]	; (150bc <processOnSMS+0x430>)
   14ed4:	4798      	blx	r3
		}
		saveEventStageSettings(0);
   14ed6:	2000      	movs	r0, #0
   14ed8:	4b79      	ldr	r3, [pc, #484]	; (150c0 <processOnSMS+0x434>)
   14eda:	4798      	blx	r3
		//saveBypassSettings(false);
		saveDNDSettings(false);
   14edc:	2000      	movs	r0, #0
   14ede:	4b79      	ldr	r3, [pc, #484]	; (150c4 <processOnSMS+0x438>)
   14ee0:	4798      	blx	r3
		saveResponseSettings('C');
   14ee2:	2043      	movs	r0, #67	; 0x43
   14ee4:	4b78      	ldr	r3, [pc, #480]	; (150c8 <processOnSMS+0x43c>)
   14ee6:	4798      	blx	r3
		saveAutoStartTimeSettings(50);
   14ee8:	2032      	movs	r0, #50	; 0x32
   14eea:	4b78      	ldr	r3, [pc, #480]	; (150cc <processOnSMS+0x440>)
   14eec:	4798      	blx	r3
		saveStarDeltaTimer(2);
   14eee:	2002      	movs	r0, #2
   14ef0:	4b77      	ldr	r3, [pc, #476]	; (150d0 <processOnSMS+0x444>)
   14ef2:	4798      	blx	r3
		
		saveSinglePhasingSettings(true);
   14ef4:	2001      	movs	r0, #1
   14ef6:	4b77      	ldr	r3, [pc, #476]	; (150d4 <processOnSMS+0x448>)
   14ef8:	4798      	blx	r3
		saveSinglePhasingVoltage(80);
   14efa:	2050      	movs	r0, #80	; 0x50
   14efc:	4b76      	ldr	r3, [pc, #472]	; (150d8 <processOnSMS+0x44c>)
   14efe:	4798      	blx	r3
		savePhaseSequenceProtectionSettings(true);
   14f00:	2001      	movs	r0, #1
   14f02:	4b76      	ldr	r3, [pc, #472]	; (150dc <processOnSMS+0x450>)
   14f04:	4798      	blx	r3
		setPrimaryNumberIndex(0);
   14f06:	2000      	movs	r0, #0
   14f08:	4b75      	ldr	r3, [pc, #468]	; (150e0 <processOnSMS+0x454>)
   14f0a:	4798      	blx	r3
		setSecondaryNumberIndex(1);
   14f0c:	2001      	movs	r0, #1
   14f0e:	4b75      	ldr	r3, [pc, #468]	; (150e4 <processOnSMS+0x458>)
   14f10:	4798      	blx	r3
		
		incomingSMSProcessed=true;
   14f12:	2328      	movs	r3, #40	; 0x28
   14f14:	33ff      	adds	r3, #255	; 0xff
   14f16:	2208      	movs	r2, #8
   14f18:	4694      	mov	ip, r2
   14f1a:	44bc      	add	ip, r7
   14f1c:	4463      	add	r3, ip
   14f1e:	2201      	movs	r2, #1
   14f20:	701a      	strb	r2, [r3, #0]
		
		if (response_sms_processed_cmd == true)
   14f22:	4b4b      	ldr	r3, [pc, #300]	; (15050 <processOnSMS+0x3c4>)
   14f24:	2294      	movs	r2, #148	; 0x94
   14f26:	0052      	lsls	r2, r2, #1
   14f28:	4694      	mov	ip, r2
   14f2a:	2208      	movs	r2, #8
   14f2c:	4690      	mov	r8, r2
   14f2e:	44b8      	add	r8, r7
   14f30:	44c4      	add	ip, r8
   14f32:	4463      	add	r3, ip
   14f34:	781b      	ldrb	r3, [r3, #0]
   14f36:	2b00      	cmp	r3, #0
   14f38:	d101      	bne.n	14f3e <processOnSMS+0x2b2>
   14f3a:	f001 fe1f 	bl	16b7c <processOnSMS+0x1ef0>
		{
			strcpy(resep_msg,"ALL SETTINGS ARE NOW FACTORY DEFAULT");
   14f3e:	230c      	movs	r3, #12
   14f40:	2208      	movs	r2, #8
   14f42:	4694      	mov	ip, r2
   14f44:	44bc      	add	ip, r7
   14f46:	4463      	add	r3, ip
   14f48:	4a67      	ldr	r2, [pc, #412]	; (150e8 <processOnSMS+0x45c>)
   14f4a:	ca13      	ldmia	r2!, {r0, r1, r4}
   14f4c:	c313      	stmia	r3!, {r0, r1, r4}
   14f4e:	ca13      	ldmia	r2!, {r0, r1, r4}
   14f50:	c313      	stmia	r3!, {r0, r1, r4}
   14f52:	ca13      	ldmia	r2!, {r0, r1, r4}
   14f54:	c313      	stmia	r3!, {r0, r1, r4}
   14f56:	7812      	ldrb	r2, [r2, #0]
   14f58:	701a      	strb	r2, [r3, #0]
   14f5a:	f001 fe0f 	bl	16b7c <processOnSMS+0x1ef0>
		}
	}
	else if (StringstartsWith(received_command,"NUM"))
   14f5e:	4a63      	ldr	r2, [pc, #396]	; (150ec <processOnSMS+0x460>)
   14f60:	68fb      	ldr	r3, [r7, #12]
   14f62:	0011      	movs	r1, r2
   14f64:	0018      	movs	r0, r3
   14f66:	4b3d      	ldr	r3, [pc, #244]	; (1505c <processOnSMS+0x3d0>)
   14f68:	4798      	blx	r3
   14f6a:	1e03      	subs	r3, r0, #0
   14f6c:	d038      	beq.n	14fe0 <processOnSMS+0x354>
	{
		response_sms_processed_cmd = true;
   14f6e:	4b38      	ldr	r3, [pc, #224]	; (15050 <processOnSMS+0x3c4>)
   14f70:	2294      	movs	r2, #148	; 0x94
   14f72:	0052      	lsls	r2, r2, #1
   14f74:	4694      	mov	ip, r2
   14f76:	2208      	movs	r2, #8
   14f78:	4690      	mov	r8, r2
   14f7a:	44b8      	add	r8, r7
   14f7c:	44c4      	add	ip, r8
   14f7e:	4463      	add	r3, ip
   14f80:	2201      	movs	r2, #1
   14f82:	701a      	strb	r2, [r3, #0]
		incomingSMSProcessed=true;
   14f84:	2328      	movs	r3, #40	; 0x28
   14f86:	33ff      	adds	r3, #255	; 0xff
   14f88:	2208      	movs	r2, #8
   14f8a:	4694      	mov	ip, r2
   14f8c:	44bc      	add	ip, r7
   14f8e:	4463      	add	r3, ip
   14f90:	2201      	movs	r2, #1
   14f92:	701a      	strb	r2, [r3, #0]
		
		memset(resep_msg, '\0', sizeof(resep_msg));
   14f94:	230c      	movs	r3, #12
   14f96:	2208      	movs	r2, #8
   14f98:	4694      	mov	ip, r2
   14f9a:	44bc      	add	ip, r7
   14f9c:	4463      	add	r3, ip
   14f9e:	22fa      	movs	r2, #250	; 0xfa
   14fa0:	2100      	movs	r1, #0
   14fa2:	0018      	movs	r0, r3
   14fa4:	4b52      	ldr	r3, [pc, #328]	; (150f0 <processOnSMS+0x464>)
   14fa6:	4798      	blx	r3
		if (user_count_struct.current_user_no_count==0)
   14fa8:	4b52      	ldr	r3, [pc, #328]	; (150f4 <processOnSMS+0x468>)
   14faa:	789b      	ldrb	r3, [r3, #2]
   14fac:	2b00      	cmp	r3, #0
   14fae:	d10d      	bne.n	14fcc <processOnSMS+0x340>
		{
			strcpy(resep_msg,"No Numbers Exists");
   14fb0:	230c      	movs	r3, #12
   14fb2:	2208      	movs	r2, #8
   14fb4:	4694      	mov	ip, r2
   14fb6:	44bc      	add	ip, r7
   14fb8:	4463      	add	r3, ip
   14fba:	4a4f      	ldr	r2, [pc, #316]	; (150f8 <processOnSMS+0x46c>)
   14fbc:	ca13      	ldmia	r2!, {r0, r1, r4}
   14fbe:	c313      	stmia	r3!, {r0, r1, r4}
   14fc0:	6811      	ldr	r1, [r2, #0]
   14fc2:	6019      	str	r1, [r3, #0]
   14fc4:	8892      	ldrh	r2, [r2, #4]
   14fc6:	809a      	strh	r2, [r3, #4]
   14fc8:	f001 fdd8 	bl	16b7c <processOnSMS+0x1ef0>
		}
		else
		{
			getNumbers(resep_msg);
   14fcc:	230c      	movs	r3, #12
   14fce:	2208      	movs	r2, #8
   14fd0:	4694      	mov	ip, r2
   14fd2:	44bc      	add	ip, r7
   14fd4:	4463      	add	r3, ip
   14fd6:	0018      	movs	r0, r3
   14fd8:	4b48      	ldr	r3, [pc, #288]	; (150fc <processOnSMS+0x470>)
   14fda:	4798      	blx	r3
   14fdc:	f001 fdce 	bl	16b7c <processOnSMS+0x1ef0>
		}
	}
	else if (StringstartsWith(received_command,"RESET"))
   14fe0:	4a47      	ldr	r2, [pc, #284]	; (15100 <processOnSMS+0x474>)
   14fe2:	68fb      	ldr	r3, [r7, #12]
   14fe4:	0011      	movs	r1, r2
   14fe6:	0018      	movs	r0, r3
   14fe8:	4b1c      	ldr	r3, [pc, #112]	; (1505c <processOnSMS+0x3d0>)
   14fea:	4798      	blx	r3
   14fec:	1e03      	subs	r3, r0, #0
   14fee:	d003      	beq.n	14ff8 <processOnSMS+0x36c>
	{
		system_reset();
   14ff0:	4b22      	ldr	r3, [pc, #136]	; (1507c <processOnSMS+0x3f0>)
   14ff2:	4798      	blx	r3
   14ff4:	f001 fdc2 	bl	16b7c <processOnSMS+0x1ef0>
	}
	else if (StringstartsWith(received_command,"DID"))
   14ff8:	4a42      	ldr	r2, [pc, #264]	; (15104 <processOnSMS+0x478>)
   14ffa:	68fb      	ldr	r3, [r7, #12]
   14ffc:	0011      	movs	r1, r2
   14ffe:	0018      	movs	r0, r3
   15000:	4b16      	ldr	r3, [pc, #88]	; (1505c <processOnSMS+0x3d0>)
   15002:	4798      	blx	r3
   15004:	1e03      	subs	r3, r0, #0
   15006:	d100      	bne.n	1500a <processOnSMS+0x37e>
   15008:	e082      	b.n	15110 <processOnSMS+0x484>
	{
		response_sms_processed_cmd=true;
   1500a:	4b11      	ldr	r3, [pc, #68]	; (15050 <processOnSMS+0x3c4>)
   1500c:	2294      	movs	r2, #148	; 0x94
   1500e:	0052      	lsls	r2, r2, #1
   15010:	4694      	mov	ip, r2
   15012:	2208      	movs	r2, #8
   15014:	4690      	mov	r8, r2
   15016:	44b8      	add	r8, r7
   15018:	44c4      	add	ip, r8
   1501a:	4463      	add	r3, ip
   1501c:	2201      	movs	r2, #1
   1501e:	701a      	strb	r2, [r3, #0]
		incomingSMSProcessed=true;
   15020:	2328      	movs	r3, #40	; 0x28
   15022:	33ff      	adds	r3, #255	; 0xff
   15024:	2208      	movs	r2, #8
   15026:	4694      	mov	ip, r2
   15028:	44bc      	add	ip, r7
   1502a:	4463      	add	r3, ip
   1502c:	2201      	movs	r2, #1
   1502e:	701a      	strb	r2, [r3, #0]
		sprintf(resep_msg,"%lu",factory_settings_parameter_struct.DeviceId_ee);
   15030:	4b1c      	ldr	r3, [pc, #112]	; (150a4 <processOnSMS+0x418>)
   15032:	689a      	ldr	r2, [r3, #8]
   15034:	4934      	ldr	r1, [pc, #208]	; (15108 <processOnSMS+0x47c>)
   15036:	230c      	movs	r3, #12
   15038:	2008      	movs	r0, #8
   1503a:	4684      	mov	ip, r0
   1503c:	44bc      	add	ip, r7
   1503e:	4463      	add	r3, ip
   15040:	0018      	movs	r0, r3
   15042:	4b32      	ldr	r3, [pc, #200]	; (1510c <processOnSMS+0x480>)
   15044:	4798      	blx	r3
   15046:	f001 fd99 	bl	16b7c <processOnSMS+0x1ef0>
   1504a:	46c0      	nop			; (mov r8, r8)
   1504c:	fffffedb 	.word	0xfffffedb
   15050:	fffffeda 	.word	0xfffffeda
   15054:	fffffed9 	.word	0xfffffed9
   15058:	00029c38 	.word	0x00029c38
   1505c:	00013eed 	.word	0x00013eed
   15060:	00029c40 	.word	0x00029c40
   15064:	20000608 	.word	0x20000608
   15068:	20000594 	.word	0x20000594
   1506c:	000289c5 	.word	0x000289c5
   15070:	000235e1 	.word	0x000235e1
   15074:	00023789 	.word	0x00023789
   15078:	0001fad9 	.word	0x0001fad9
   1507c:	00013fc1 	.word	0x00013fc1
   15080:	00029c48 	.word	0x00029c48
   15084:	00012f2d 	.word	0x00012f2d
   15088:	00029c50 	.word	0x00029c50
   1508c:	00029c74 	.word	0x00029c74
   15090:	00029c98 	.word	0x00029c98
   15094:	000110f1 	.word	0x000110f1
   15098:	00029ca4 	.word	0x00029ca4
   1509c:	00029cc0 	.word	0x00029cc0
   150a0:	0001128d 	.word	0x0001128d
   150a4:	20000638 	.word	0x20000638
   150a8:	0001144d 	.word	0x0001144d
   150ac:	00010bc9 	.word	0x00010bc9
   150b0:	00011499 	.word	0x00011499
   150b4:	000114e5 	.word	0x000114e5
   150b8:	0001154d 	.word	0x0001154d
   150bc:	00011891 	.word	0x00011891
   150c0:	00011929 	.word	0x00011929
   150c4:	00011325 	.word	0x00011325
   150c8:	00011371 	.word	0x00011371
   150cc:	000112d9 	.word	0x000112d9
   150d0:	000118dd 	.word	0x000118dd
   150d4:	000115bd 	.word	0x000115bd
   150d8:	00011609 	.word	0x00011609
   150dc:	00011655 	.word	0x00011655
   150e0:	00011a09 	.word	0x00011a09
   150e4:	00011a59 	.word	0x00011a59
   150e8:	00029cc8 	.word	0x00029cc8
   150ec:	00029cf0 	.word	0x00029cf0
   150f0:	000289fb 	.word	0x000289fb
   150f4:	20000620 	.word	0x20000620
   150f8:	00029cf4 	.word	0x00029cf4
   150fc:	000107dd 	.word	0x000107dd
   15100:	00029d08 	.word	0x00029d08
   15104:	00029d10 	.word	0x00029d10
   15108:	00029d14 	.word	0x00029d14
   1510c:	00028c01 	.word	0x00028c01
		//sprintf(resep_msg,"Software:%s\nModel:%d\nDeviceId:%lu\nHW:%d",
		//SOFTWARE_VER,factory_parameter_struct.u16tmodelNo,factory_parameter_struct.u32deviceId,
		//factory_parameter_struct.u16thardwareVer);

	}
	else if (StringstartsWith(received_command,"AUTOON"))
   15110:	4aec      	ldr	r2, [pc, #944]	; (154c4 <processOnSMS+0x838>)
   15112:	68fb      	ldr	r3, [r7, #12]
   15114:	0011      	movs	r1, r2
   15116:	0018      	movs	r0, r3
   15118:	4beb      	ldr	r3, [pc, #940]	; (154c8 <processOnSMS+0x83c>)
   1511a:	4798      	blx	r3
   1511c:	1e03      	subs	r3, r0, #0
   1511e:	d027      	beq.n	15170 <processOnSMS+0x4e4>
	{
		saveAutoStartSettings(true);
   15120:	2001      	movs	r0, #1
   15122:	4bea      	ldr	r3, [pc, #936]	; (154cc <processOnSMS+0x840>)
   15124:	4798      	blx	r3
		resetAutoStart(true);
   15126:	2001      	movs	r0, #1
   15128:	4be9      	ldr	r3, [pc, #932]	; (154d0 <processOnSMS+0x844>)
   1512a:	4798      	blx	r3
		
		incomingSMSProcessed=true;
   1512c:	2328      	movs	r3, #40	; 0x28
   1512e:	33ff      	adds	r3, #255	; 0xff
   15130:	2208      	movs	r2, #8
   15132:	4694      	mov	ip, r2
   15134:	44bc      	add	ip, r7
   15136:	4463      	add	r3, ip
   15138:	2201      	movs	r2, #1
   1513a:	701a      	strb	r2, [r3, #0]
		
		if (response_sms_processed_cmd == true)
   1513c:	4be5      	ldr	r3, [pc, #916]	; (154d4 <processOnSMS+0x848>)
   1513e:	2294      	movs	r2, #148	; 0x94
   15140:	0052      	lsls	r2, r2, #1
   15142:	4694      	mov	ip, r2
   15144:	2208      	movs	r2, #8
   15146:	4690      	mov	r8, r2
   15148:	44b8      	add	r8, r7
   1514a:	44c4      	add	ip, r8
   1514c:	4463      	add	r3, ip
   1514e:	781b      	ldrb	r3, [r3, #0]
   15150:	2b00      	cmp	r3, #0
   15152:	d101      	bne.n	15158 <processOnSMS+0x4cc>
   15154:	f001 fd12 	bl	16b7c <processOnSMS+0x1ef0>
		{
			strcpy(resep_msg,"MOTOR AUTOON ON");
   15158:	230c      	movs	r3, #12
   1515a:	2208      	movs	r2, #8
   1515c:	4694      	mov	ip, r2
   1515e:	44bc      	add	ip, r7
   15160:	4463      	add	r3, ip
   15162:	4add      	ldr	r2, [pc, #884]	; (154d8 <processOnSMS+0x84c>)
   15164:	ca13      	ldmia	r2!, {r0, r1, r4}
   15166:	c313      	stmia	r3!, {r0, r1, r4}
   15168:	6812      	ldr	r2, [r2, #0]
   1516a:	601a      	str	r2, [r3, #0]
   1516c:	f001 fd06 	bl	16b7c <processOnSMS+0x1ef0>
		}
	}
	else if (StringstartsWith(received_command,"AUTOOFF"))
   15170:	4ada      	ldr	r2, [pc, #872]	; (154dc <processOnSMS+0x850>)
   15172:	68fb      	ldr	r3, [r7, #12]
   15174:	0011      	movs	r1, r2
   15176:	0018      	movs	r0, r3
   15178:	4bd3      	ldr	r3, [pc, #844]	; (154c8 <processOnSMS+0x83c>)
   1517a:	4798      	blx	r3
   1517c:	1e03      	subs	r3, r0, #0
   1517e:	d029      	beq.n	151d4 <processOnSMS+0x548>
	{
		saveAutoStartSettings(false);
   15180:	2000      	movs	r0, #0
   15182:	4bd2      	ldr	r3, [pc, #840]	; (154cc <processOnSMS+0x840>)
   15184:	4798      	blx	r3
		resetAutoStart(true);
   15186:	2001      	movs	r0, #1
   15188:	4bd1      	ldr	r3, [pc, #836]	; (154d0 <processOnSMS+0x844>)
   1518a:	4798      	blx	r3
		
		incomingSMSProcessed=true;
   1518c:	2328      	movs	r3, #40	; 0x28
   1518e:	33ff      	adds	r3, #255	; 0xff
   15190:	2208      	movs	r2, #8
   15192:	4694      	mov	ip, r2
   15194:	44bc      	add	ip, r7
   15196:	4463      	add	r3, ip
   15198:	2201      	movs	r2, #1
   1519a:	701a      	strb	r2, [r3, #0]
		
		if (response_sms_processed_cmd == true)
   1519c:	4bcd      	ldr	r3, [pc, #820]	; (154d4 <processOnSMS+0x848>)
   1519e:	2294      	movs	r2, #148	; 0x94
   151a0:	0052      	lsls	r2, r2, #1
   151a2:	4694      	mov	ip, r2
   151a4:	2208      	movs	r2, #8
   151a6:	4690      	mov	r8, r2
   151a8:	44b8      	add	r8, r7
   151aa:	44c4      	add	ip, r8
   151ac:	4463      	add	r3, ip
   151ae:	781b      	ldrb	r3, [r3, #0]
   151b0:	2b00      	cmp	r3, #0
   151b2:	d101      	bne.n	151b8 <processOnSMS+0x52c>
   151b4:	f001 fce2 	bl	16b7c <processOnSMS+0x1ef0>
		{
			strcpy(resep_msg,"MOTOR AUTOON OFF");
   151b8:	230c      	movs	r3, #12
   151ba:	2208      	movs	r2, #8
   151bc:	4694      	mov	ip, r2
   151be:	44bc      	add	ip, r7
   151c0:	4463      	add	r3, ip
   151c2:	4ac7      	ldr	r2, [pc, #796]	; (154e0 <processOnSMS+0x854>)
   151c4:	ca13      	ldmia	r2!, {r0, r1, r4}
   151c6:	c313      	stmia	r3!, {r0, r1, r4}
   151c8:	6811      	ldr	r1, [r2, #0]
   151ca:	6019      	str	r1, [r3, #0]
   151cc:	7912      	ldrb	r2, [r2, #4]
   151ce:	711a      	strb	r2, [r3, #4]
   151d0:	f001 fcd4 	bl	16b7c <processOnSMS+0x1ef0>
		}
	}
	else if (StringstartsWith(received_command,"WBYPON"))
   151d4:	4ac3      	ldr	r2, [pc, #780]	; (154e4 <processOnSMS+0x858>)
   151d6:	68fb      	ldr	r3, [r7, #12]
   151d8:	0011      	movs	r1, r2
   151da:	0018      	movs	r0, r3
   151dc:	4bba      	ldr	r3, [pc, #744]	; (154c8 <processOnSMS+0x83c>)
   151de:	4798      	blx	r3
   151e0:	1e03      	subs	r3, r0, #0
   151e2:	d02a      	beq.n	1523a <processOnSMS+0x5ae>
	{
		
		if (factory_settings_parameter_struct.ENABLE_WATER)
   151e4:	4bc0      	ldr	r3, [pc, #768]	; (154e8 <processOnSMS+0x85c>)
   151e6:	795b      	ldrb	r3, [r3, #5]
   151e8:	2b00      	cmp	r3, #0
   151ea:	d101      	bne.n	151f0 <processOnSMS+0x564>
   151ec:	f001 fcc6 	bl	16b7c <processOnSMS+0x1ef0>
		{
			incomingSMSProcessed=true;
   151f0:	2328      	movs	r3, #40	; 0x28
   151f2:	33ff      	adds	r3, #255	; 0xff
   151f4:	2208      	movs	r2, #8
   151f6:	4694      	mov	ip, r2
   151f8:	44bc      	add	ip, r7
   151fa:	4463      	add	r3, ip
   151fc:	2201      	movs	r2, #1
   151fe:	701a      	strb	r2, [r3, #0]
			saveWaterBypassSettings(true);
   15200:	2001      	movs	r0, #1
   15202:	4bba      	ldr	r3, [pc, #744]	; (154ec <processOnSMS+0x860>)
   15204:	4798      	blx	r3
			if (response_sms_processed_cmd == true)
   15206:	4bb3      	ldr	r3, [pc, #716]	; (154d4 <processOnSMS+0x848>)
   15208:	2294      	movs	r2, #148	; 0x94
   1520a:	0052      	lsls	r2, r2, #1
   1520c:	4694      	mov	ip, r2
   1520e:	2208      	movs	r2, #8
   15210:	4690      	mov	r8, r2
   15212:	44b8      	add	r8, r7
   15214:	44c4      	add	ip, r8
   15216:	4463      	add	r3, ip
   15218:	781b      	ldrb	r3, [r3, #0]
   1521a:	2b00      	cmp	r3, #0
   1521c:	d101      	bne.n	15222 <processOnSMS+0x596>
   1521e:	f001 fcad 	bl	16b7c <processOnSMS+0x1ef0>
			{
				strcpy(resep_msg,"WATER BYPASS ON");
   15222:	230c      	movs	r3, #12
   15224:	2208      	movs	r2, #8
   15226:	4694      	mov	ip, r2
   15228:	44bc      	add	ip, r7
   1522a:	4463      	add	r3, ip
   1522c:	4ab0      	ldr	r2, [pc, #704]	; (154f0 <processOnSMS+0x864>)
   1522e:	ca13      	ldmia	r2!, {r0, r1, r4}
   15230:	c313      	stmia	r3!, {r0, r1, r4}
   15232:	6812      	ldr	r2, [r2, #0]
   15234:	601a      	str	r2, [r3, #0]
   15236:	f001 fca1 	bl	16b7c <processOnSMS+0x1ef0>
			}
		}
	}
	else if (StringstartsWith(received_command,"WBYPOFF"))
   1523a:	4aae      	ldr	r2, [pc, #696]	; (154f4 <processOnSMS+0x868>)
   1523c:	68fb      	ldr	r3, [r7, #12]
   1523e:	0011      	movs	r1, r2
   15240:	0018      	movs	r0, r3
   15242:	4ba1      	ldr	r3, [pc, #644]	; (154c8 <processOnSMS+0x83c>)
   15244:	4798      	blx	r3
   15246:	1e03      	subs	r3, r0, #0
   15248:	d02c      	beq.n	152a4 <processOnSMS+0x618>
	{
		if (factory_settings_parameter_struct.ENABLE_WATER)
   1524a:	4ba7      	ldr	r3, [pc, #668]	; (154e8 <processOnSMS+0x85c>)
   1524c:	795b      	ldrb	r3, [r3, #5]
   1524e:	2b00      	cmp	r3, #0
   15250:	d101      	bne.n	15256 <processOnSMS+0x5ca>
   15252:	f001 fc93 	bl	16b7c <processOnSMS+0x1ef0>
		{
			incomingSMSProcessed=true;
   15256:	2328      	movs	r3, #40	; 0x28
   15258:	33ff      	adds	r3, #255	; 0xff
   1525a:	2208      	movs	r2, #8
   1525c:	4694      	mov	ip, r2
   1525e:	44bc      	add	ip, r7
   15260:	4463      	add	r3, ip
   15262:	2201      	movs	r2, #1
   15264:	701a      	strb	r2, [r3, #0]
			saveWaterBypassSettings(false);
   15266:	2000      	movs	r0, #0
   15268:	4ba0      	ldr	r3, [pc, #640]	; (154ec <processOnSMS+0x860>)
   1526a:	4798      	blx	r3
			if (response_sms_processed_cmd == true)
   1526c:	4b99      	ldr	r3, [pc, #612]	; (154d4 <processOnSMS+0x848>)
   1526e:	2294      	movs	r2, #148	; 0x94
   15270:	0052      	lsls	r2, r2, #1
   15272:	4694      	mov	ip, r2
   15274:	2208      	movs	r2, #8
   15276:	4690      	mov	r8, r2
   15278:	44b8      	add	r8, r7
   1527a:	44c4      	add	ip, r8
   1527c:	4463      	add	r3, ip
   1527e:	781b      	ldrb	r3, [r3, #0]
   15280:	2b00      	cmp	r3, #0
   15282:	d101      	bne.n	15288 <processOnSMS+0x5fc>
   15284:	f001 fc7a 	bl	16b7c <processOnSMS+0x1ef0>
			{
				strcpy(resep_msg,"WATER BYPASS OFF");
   15288:	230c      	movs	r3, #12
   1528a:	2208      	movs	r2, #8
   1528c:	4694      	mov	ip, r2
   1528e:	44bc      	add	ip, r7
   15290:	4463      	add	r3, ip
   15292:	4a99      	ldr	r2, [pc, #612]	; (154f8 <processOnSMS+0x86c>)
   15294:	ca13      	ldmia	r2!, {r0, r1, r4}
   15296:	c313      	stmia	r3!, {r0, r1, r4}
   15298:	6811      	ldr	r1, [r2, #0]
   1529a:	6019      	str	r1, [r3, #0]
   1529c:	7912      	ldrb	r2, [r2, #4]
   1529e:	711a      	strb	r2, [r3, #4]
   152a0:	f001 fc6c 	bl	16b7c <processOnSMS+0x1ef0>
			}
		}
	}
	else if (StringstartsWith(received_command,"SPPON"))
   152a4:	4a95      	ldr	r2, [pc, #596]	; (154fc <processOnSMS+0x870>)
   152a6:	68fb      	ldr	r3, [r7, #12]
   152a8:	0011      	movs	r1, r2
   152aa:	0018      	movs	r0, r3
   152ac:	4b86      	ldr	r3, [pc, #536]	; (154c8 <processOnSMS+0x83c>)
   152ae:	4798      	blx	r3
   152b0:	1e03      	subs	r3, r0, #0
   152b2:	d026      	beq.n	15302 <processOnSMS+0x676>
	{
		saveSinglePhasingSettings(true);
   152b4:	2001      	movs	r0, #1
   152b6:	4b92      	ldr	r3, [pc, #584]	; (15500 <processOnSMS+0x874>)
   152b8:	4798      	blx	r3
		incomingSMSProcessed=true;
   152ba:	2328      	movs	r3, #40	; 0x28
   152bc:	33ff      	adds	r3, #255	; 0xff
   152be:	2208      	movs	r2, #8
   152c0:	4694      	mov	ip, r2
   152c2:	44bc      	add	ip, r7
   152c4:	4463      	add	r3, ip
   152c6:	2201      	movs	r2, #1
   152c8:	701a      	strb	r2, [r3, #0]

		if (response_sms_processed_cmd == true)
   152ca:	4b82      	ldr	r3, [pc, #520]	; (154d4 <processOnSMS+0x848>)
   152cc:	2294      	movs	r2, #148	; 0x94
   152ce:	0052      	lsls	r2, r2, #1
   152d0:	4694      	mov	ip, r2
   152d2:	2208      	movs	r2, #8
   152d4:	4690      	mov	r8, r2
   152d6:	44b8      	add	r8, r7
   152d8:	44c4      	add	ip, r8
   152da:	4463      	add	r3, ip
   152dc:	781b      	ldrb	r3, [r3, #0]
   152de:	2b00      	cmp	r3, #0
   152e0:	d101      	bne.n	152e6 <processOnSMS+0x65a>
   152e2:	f001 fc4b 	bl	16b7c <processOnSMS+0x1ef0>
		{
			strcpy(resep_msg,"SPP ON");
   152e6:	230c      	movs	r3, #12
   152e8:	2208      	movs	r2, #8
   152ea:	4694      	mov	ip, r2
   152ec:	44bc      	add	ip, r7
   152ee:	4463      	add	r3, ip
   152f0:	4a84      	ldr	r2, [pc, #528]	; (15504 <processOnSMS+0x878>)
   152f2:	6811      	ldr	r1, [r2, #0]
   152f4:	6019      	str	r1, [r3, #0]
   152f6:	8891      	ldrh	r1, [r2, #4]
   152f8:	8099      	strh	r1, [r3, #4]
   152fa:	7992      	ldrb	r2, [r2, #6]
   152fc:	719a      	strb	r2, [r3, #6]
   152fe:	f001 fc3d 	bl	16b7c <processOnSMS+0x1ef0>
		}
	}
	else if (StringstartsWith(received_command,"SPPOFF"))
   15302:	4a81      	ldr	r2, [pc, #516]	; (15508 <processOnSMS+0x87c>)
   15304:	68fb      	ldr	r3, [r7, #12]
   15306:	0011      	movs	r1, r2
   15308:	0018      	movs	r0, r3
   1530a:	4b6f      	ldr	r3, [pc, #444]	; (154c8 <processOnSMS+0x83c>)
   1530c:	4798      	blx	r3
   1530e:	1e03      	subs	r3, r0, #0
   15310:	d022      	beq.n	15358 <processOnSMS+0x6cc>
	{
		saveSinglePhasingSettings(false);
   15312:	2000      	movs	r0, #0
   15314:	4b7a      	ldr	r3, [pc, #488]	; (15500 <processOnSMS+0x874>)
   15316:	4798      	blx	r3
		incomingSMSProcessed=true;
   15318:	2328      	movs	r3, #40	; 0x28
   1531a:	33ff      	adds	r3, #255	; 0xff
   1531c:	2208      	movs	r2, #8
   1531e:	4694      	mov	ip, r2
   15320:	44bc      	add	ip, r7
   15322:	4463      	add	r3, ip
   15324:	2201      	movs	r2, #1
   15326:	701a      	strb	r2, [r3, #0]

		if (response_sms_processed_cmd == true)
   15328:	4b6a      	ldr	r3, [pc, #424]	; (154d4 <processOnSMS+0x848>)
   1532a:	2294      	movs	r2, #148	; 0x94
   1532c:	0052      	lsls	r2, r2, #1
   1532e:	4694      	mov	ip, r2
   15330:	2208      	movs	r2, #8
   15332:	4690      	mov	r8, r2
   15334:	44b8      	add	r8, r7
   15336:	44c4      	add	ip, r8
   15338:	4463      	add	r3, ip
   1533a:	781b      	ldrb	r3, [r3, #0]
   1533c:	2b00      	cmp	r3, #0
   1533e:	d101      	bne.n	15344 <processOnSMS+0x6b8>
   15340:	f001 fc1c 	bl	16b7c <processOnSMS+0x1ef0>
		{
			strcpy(resep_msg,"SPP OFF");
   15344:	230c      	movs	r3, #12
   15346:	2208      	movs	r2, #8
   15348:	4694      	mov	ip, r2
   1534a:	44bc      	add	ip, r7
   1534c:	4463      	add	r3, ip
   1534e:	4a6f      	ldr	r2, [pc, #444]	; (1550c <processOnSMS+0x880>)
   15350:	ca03      	ldmia	r2!, {r0, r1}
   15352:	c303      	stmia	r3!, {r0, r1}
   15354:	f001 fc12 	bl	16b7c <processOnSMS+0x1ef0>
		}
	}
	else if(StringstartsWith(received_command,"SPPV"))
   15358:	4a6d      	ldr	r2, [pc, #436]	; (15510 <processOnSMS+0x884>)
   1535a:	68fb      	ldr	r3, [r7, #12]
   1535c:	0011      	movs	r1, r2
   1535e:	0018      	movs	r0, r3
   15360:	4b59      	ldr	r3, [pc, #356]	; (154c8 <processOnSMS+0x83c>)
   15362:	4798      	blx	r3
   15364:	1e03      	subs	r3, r0, #0
   15366:	d055      	beq.n	15414 <processOnSMS+0x788>
	{
		memmove(received_command,received_command+4,strlen(received_command));
   15368:	68fb      	ldr	r3, [r7, #12]
   1536a:	1d1c      	adds	r4, r3, #4
   1536c:	68fb      	ldr	r3, [r7, #12]
   1536e:	0018      	movs	r0, r3
   15370:	4b68      	ldr	r3, [pc, #416]	; (15514 <processOnSMS+0x888>)
   15372:	4798      	blx	r3
   15374:	0002      	movs	r2, r0
   15376:	68fb      	ldr	r3, [r7, #12]
   15378:	0021      	movs	r1, r4
   1537a:	0018      	movs	r0, r3
   1537c:	4b66      	ldr	r3, [pc, #408]	; (15518 <processOnSMS+0x88c>)
   1537e:	4798      	blx	r3
		uint8_t sppVoltage = atoi(received_command);
   15380:	68fb      	ldr	r3, [r7, #12]
   15382:	0018      	movs	r0, r3
   15384:	4b65      	ldr	r3, [pc, #404]	; (1551c <processOnSMS+0x890>)
   15386:	4798      	blx	r3
   15388:	0002      	movs	r2, r0
   1538a:	2393      	movs	r3, #147	; 0x93
   1538c:	005b      	lsls	r3, r3, #1
   1538e:	2108      	movs	r1, #8
   15390:	468c      	mov	ip, r1
   15392:	44bc      	add	ip, r7
   15394:	4463      	add	r3, ip
   15396:	701a      	strb	r2, [r3, #0]
		if(sppVoltage<20) sppVoltage=20;
   15398:	2393      	movs	r3, #147	; 0x93
   1539a:	005b      	lsls	r3, r3, #1
   1539c:	2208      	movs	r2, #8
   1539e:	4694      	mov	ip, r2
   153a0:	44bc      	add	ip, r7
   153a2:	4463      	add	r3, ip
   153a4:	781b      	ldrb	r3, [r3, #0]
   153a6:	2b13      	cmp	r3, #19
   153a8:	d807      	bhi.n	153ba <processOnSMS+0x72e>
   153aa:	2393      	movs	r3, #147	; 0x93
   153ac:	005b      	lsls	r3, r3, #1
   153ae:	2208      	movs	r2, #8
   153b0:	4694      	mov	ip, r2
   153b2:	44bc      	add	ip, r7
   153b4:	4463      	add	r3, ip
   153b6:	2214      	movs	r2, #20
   153b8:	701a      	strb	r2, [r3, #0]
		if(sppVoltage>440) sppVoltage=440;
		saveSinglePhasingVoltage(sppVoltage);
   153ba:	2393      	movs	r3, #147	; 0x93
   153bc:	005b      	lsls	r3, r3, #1
   153be:	2208      	movs	r2, #8
   153c0:	4694      	mov	ip, r2
   153c2:	44bc      	add	ip, r7
   153c4:	4463      	add	r3, ip
   153c6:	781b      	ldrb	r3, [r3, #0]
   153c8:	b29b      	uxth	r3, r3
   153ca:	0018      	movs	r0, r3
   153cc:	4b54      	ldr	r3, [pc, #336]	; (15520 <processOnSMS+0x894>)
   153ce:	4798      	blx	r3
		
		incomingSMSProcessed=true;
   153d0:	2328      	movs	r3, #40	; 0x28
   153d2:	33ff      	adds	r3, #255	; 0xff
   153d4:	2208      	movs	r2, #8
   153d6:	4694      	mov	ip, r2
   153d8:	44bc      	add	ip, r7
   153da:	4463      	add	r3, ip
   153dc:	2201      	movs	r2, #1
   153de:	701a      	strb	r2, [r3, #0]
		
		
		if (response_sms_processed_cmd == true)
   153e0:	4b3c      	ldr	r3, [pc, #240]	; (154d4 <processOnSMS+0x848>)
   153e2:	2294      	movs	r2, #148	; 0x94
   153e4:	0052      	lsls	r2, r2, #1
   153e6:	4694      	mov	ip, r2
   153e8:	2208      	movs	r2, #8
   153ea:	4690      	mov	r8, r2
   153ec:	44b8      	add	r8, r7
   153ee:	44c4      	add	ip, r8
   153f0:	4463      	add	r3, ip
   153f2:	781b      	ldrb	r3, [r3, #0]
   153f4:	2b00      	cmp	r3, #0
   153f6:	d101      	bne.n	153fc <processOnSMS+0x770>
   153f8:	f001 fbc0 	bl	16b7c <processOnSMS+0x1ef0>
		{
			strcpy(resep_msg,"SPP VOLT SET");
   153fc:	230c      	movs	r3, #12
   153fe:	2208      	movs	r2, #8
   15400:	4694      	mov	ip, r2
   15402:	44bc      	add	ip, r7
   15404:	4463      	add	r3, ip
   15406:	4a47      	ldr	r2, [pc, #284]	; (15524 <processOnSMS+0x898>)
   15408:	ca13      	ldmia	r2!, {r0, r1, r4}
   1540a:	c313      	stmia	r3!, {r0, r1, r4}
   1540c:	7812      	ldrb	r2, [r2, #0]
   1540e:	701a      	strb	r2, [r3, #0]
   15410:	f001 fbb4 	bl	16b7c <processOnSMS+0x1ef0>
		}
	}
	else if(StringstartsWith(received_command,"SEQON"))
   15414:	4a44      	ldr	r2, [pc, #272]	; (15528 <processOnSMS+0x89c>)
   15416:	68fb      	ldr	r3, [r7, #12]
   15418:	0011      	movs	r1, r2
   1541a:	0018      	movs	r0, r3
   1541c:	4b2a      	ldr	r3, [pc, #168]	; (154c8 <processOnSMS+0x83c>)
   1541e:	4798      	blx	r3
   15420:	1e03      	subs	r3, r0, #0
   15422:	d022      	beq.n	1546a <processOnSMS+0x7de>
	{
		savePhaseSequenceProtectionSettings(true);
   15424:	2001      	movs	r0, #1
   15426:	4b41      	ldr	r3, [pc, #260]	; (1552c <processOnSMS+0x8a0>)
   15428:	4798      	blx	r3
		
		incomingSMSProcessed=true;
   1542a:	2328      	movs	r3, #40	; 0x28
   1542c:	33ff      	adds	r3, #255	; 0xff
   1542e:	2208      	movs	r2, #8
   15430:	4694      	mov	ip, r2
   15432:	44bc      	add	ip, r7
   15434:	4463      	add	r3, ip
   15436:	2201      	movs	r2, #1
   15438:	701a      	strb	r2, [r3, #0]
		
		if (response_sms_processed_cmd == true)
   1543a:	4b26      	ldr	r3, [pc, #152]	; (154d4 <processOnSMS+0x848>)
   1543c:	2294      	movs	r2, #148	; 0x94
   1543e:	0052      	lsls	r2, r2, #1
   15440:	4694      	mov	ip, r2
   15442:	2208      	movs	r2, #8
   15444:	4690      	mov	r8, r2
   15446:	44b8      	add	r8, r7
   15448:	44c4      	add	ip, r8
   1544a:	4463      	add	r3, ip
   1544c:	781b      	ldrb	r3, [r3, #0]
   1544e:	2b00      	cmp	r3, #0
   15450:	d101      	bne.n	15456 <processOnSMS+0x7ca>
   15452:	f001 fb93 	bl	16b7c <processOnSMS+0x1ef0>
		{
			strcpy(resep_msg,"SEQP ON");
   15456:	230c      	movs	r3, #12
   15458:	2208      	movs	r2, #8
   1545a:	4694      	mov	ip, r2
   1545c:	44bc      	add	ip, r7
   1545e:	4463      	add	r3, ip
   15460:	4a33      	ldr	r2, [pc, #204]	; (15530 <processOnSMS+0x8a4>)
   15462:	ca03      	ldmia	r2!, {r0, r1}
   15464:	c303      	stmia	r3!, {r0, r1}
   15466:	f001 fb89 	bl	16b7c <processOnSMS+0x1ef0>
		}
	}
	else if(StringstartsWith(received_command,"SEQOFF"))
   1546a:	4a32      	ldr	r2, [pc, #200]	; (15534 <processOnSMS+0x8a8>)
   1546c:	68fb      	ldr	r3, [r7, #12]
   1546e:	0011      	movs	r1, r2
   15470:	0018      	movs	r0, r3
   15472:	4b15      	ldr	r3, [pc, #84]	; (154c8 <processOnSMS+0x83c>)
   15474:	4798      	blx	r3
   15476:	1e03      	subs	r3, r0, #0
   15478:	d060      	beq.n	1553c <processOnSMS+0x8b0>
	{
		savePhaseSequenceProtectionSettings(false);
   1547a:	2000      	movs	r0, #0
   1547c:	4b2b      	ldr	r3, [pc, #172]	; (1552c <processOnSMS+0x8a0>)
   1547e:	4798      	blx	r3

		incomingSMSProcessed=true;
   15480:	2328      	movs	r3, #40	; 0x28
   15482:	33ff      	adds	r3, #255	; 0xff
   15484:	2208      	movs	r2, #8
   15486:	4694      	mov	ip, r2
   15488:	44bc      	add	ip, r7
   1548a:	4463      	add	r3, ip
   1548c:	2201      	movs	r2, #1
   1548e:	701a      	strb	r2, [r3, #0]

		if (response_sms_processed_cmd == true)
   15490:	4b10      	ldr	r3, [pc, #64]	; (154d4 <processOnSMS+0x848>)
   15492:	2294      	movs	r2, #148	; 0x94
   15494:	0052      	lsls	r2, r2, #1
   15496:	4694      	mov	ip, r2
   15498:	2208      	movs	r2, #8
   1549a:	4690      	mov	r8, r2
   1549c:	44b8      	add	r8, r7
   1549e:	44c4      	add	ip, r8
   154a0:	4463      	add	r3, ip
   154a2:	781b      	ldrb	r3, [r3, #0]
   154a4:	2b00      	cmp	r3, #0
   154a6:	d101      	bne.n	154ac <processOnSMS+0x820>
   154a8:	f001 fb68 	bl	16b7c <processOnSMS+0x1ef0>
		{
			strcpy(resep_msg,"SEQP OFF");
   154ac:	230c      	movs	r3, #12
   154ae:	2208      	movs	r2, #8
   154b0:	4694      	mov	ip, r2
   154b2:	44bc      	add	ip, r7
   154b4:	4463      	add	r3, ip
   154b6:	4a20      	ldr	r2, [pc, #128]	; (15538 <processOnSMS+0x8ac>)
   154b8:	ca03      	ldmia	r2!, {r0, r1}
   154ba:	c303      	stmia	r3!, {r0, r1}
   154bc:	7812      	ldrb	r2, [r2, #0]
   154be:	701a      	strb	r2, [r3, #0]
   154c0:	f001 fb5c 	bl	16b7c <processOnSMS+0x1ef0>
   154c4:	00029d18 	.word	0x00029d18
   154c8:	00013eed 	.word	0x00013eed
   154cc:	0001128d 	.word	0x0001128d
   154d0:	0001aabd 	.word	0x0001aabd
   154d4:	fffffeda 	.word	0xfffffeda
   154d8:	00029d20 	.word	0x00029d20
   154dc:	00029d30 	.word	0x00029d30
   154e0:	00029d38 	.word	0x00029d38
   154e4:	00029d4c 	.word	0x00029d4c
   154e8:	20000638 	.word	0x20000638
   154ec:	0001144d 	.word	0x0001144d
   154f0:	00029d54 	.word	0x00029d54
   154f4:	00029d64 	.word	0x00029d64
   154f8:	00029d6c 	.word	0x00029d6c
   154fc:	00029d80 	.word	0x00029d80
   15500:	000115bd 	.word	0x000115bd
   15504:	00029d88 	.word	0x00029d88
   15508:	00029d90 	.word	0x00029d90
   1550c:	00029d98 	.word	0x00029d98
   15510:	00029da0 	.word	0x00029da0
   15514:	00028c8b 	.word	0x00028c8b
   15518:	000289d7 	.word	0x000289d7
   1551c:	000288e1 	.word	0x000288e1
   15520:	00011609 	.word	0x00011609
   15524:	00029da8 	.word	0x00029da8
   15528:	00029db8 	.word	0x00029db8
   1552c:	00011655 	.word	0x00011655
   15530:	00029dc0 	.word	0x00029dc0
   15534:	00029dc8 	.word	0x00029dc8
   15538:	00029dd0 	.word	0x00029dd0
		}
	}
	else if (StringstartsWith(received_command,"DND"))
   1553c:	4aec      	ldr	r2, [pc, #944]	; (158f0 <processOnSMS+0xc64>)
   1553e:	68fb      	ldr	r3, [r7, #12]
   15540:	0011      	movs	r1, r2
   15542:	0018      	movs	r0, r3
   15544:	4beb      	ldr	r3, [pc, #940]	; (158f4 <processOnSMS+0xc68>)
   15546:	4798      	blx	r3
   15548:	1e03      	subs	r3, r0, #0
   1554a:	d06c      	beq.n	15626 <processOnSMS+0x99a>
	{
		if (strlen(received_command)>3)
   1554c:	68fb      	ldr	r3, [r7, #12]
   1554e:	0018      	movs	r0, r3
   15550:	4be9      	ldr	r3, [pc, #932]	; (158f8 <processOnSMS+0xc6c>)
   15552:	4798      	blx	r3
   15554:	0003      	movs	r3, r0
   15556:	2b03      	cmp	r3, #3
   15558:	d801      	bhi.n	1555e <processOnSMS+0x8d2>
   1555a:	f001 fb0f 	bl	16b7c <processOnSMS+0x1ef0>
		{
			memmove(received_command,received_command+3,strlen(received_command));
   1555e:	68fb      	ldr	r3, [r7, #12]
   15560:	1cdc      	adds	r4, r3, #3
   15562:	68fb      	ldr	r3, [r7, #12]
   15564:	0018      	movs	r0, r3
   15566:	4be4      	ldr	r3, [pc, #912]	; (158f8 <processOnSMS+0xc6c>)
   15568:	4798      	blx	r3
   1556a:	0002      	movs	r2, r0
   1556c:	68fb      	ldr	r3, [r7, #12]
   1556e:	0021      	movs	r1, r4
   15570:	0018      	movs	r0, r3
   15572:	4be2      	ldr	r3, [pc, #904]	; (158fc <processOnSMS+0xc70>)
   15574:	4798      	blx	r3
			if(received_command[0]=='L' || received_command[0]=='S' || received_command[0]=='O')
   15576:	68fb      	ldr	r3, [r7, #12]
   15578:	781b      	ldrb	r3, [r3, #0]
   1557a:	2b4c      	cmp	r3, #76	; 0x4c
   1557c:	d009      	beq.n	15592 <processOnSMS+0x906>
   1557e:	68fb      	ldr	r3, [r7, #12]
   15580:	781b      	ldrb	r3, [r3, #0]
   15582:	2b53      	cmp	r3, #83	; 0x53
   15584:	d005      	beq.n	15592 <processOnSMS+0x906>
   15586:	68fb      	ldr	r3, [r7, #12]
   15588:	781b      	ldrb	r3, [r3, #0]
   1558a:	2b4f      	cmp	r3, #79	; 0x4f
   1558c:	d001      	beq.n	15592 <processOnSMS+0x906>
   1558e:	f001 faf5 	bl	16b7c <processOnSMS+0x1ef0>
			{
				saveDNDSettings((char)received_command);  //save specific RESPONSE settings
   15592:	68fb      	ldr	r3, [r7, #12]
   15594:	b2db      	uxtb	r3, r3
   15596:	0018      	movs	r0, r3
   15598:	4bd9      	ldr	r3, [pc, #868]	; (15900 <processOnSMS+0xc74>)
   1559a:	4798      	blx	r3
				
				incomingSMSProcessed=true;
   1559c:	2328      	movs	r3, #40	; 0x28
   1559e:	33ff      	adds	r3, #255	; 0xff
   155a0:	2208      	movs	r2, #8
   155a2:	4694      	mov	ip, r2
   155a4:	44bc      	add	ip, r7
   155a6:	4463      	add	r3, ip
   155a8:	2201      	movs	r2, #1
   155aa:	701a      	strb	r2, [r3, #0]
				
				if (response_sms_processed_cmd == true)
   155ac:	4bd5      	ldr	r3, [pc, #852]	; (15904 <processOnSMS+0xc78>)
   155ae:	2294      	movs	r2, #148	; 0x94
   155b0:	0052      	lsls	r2, r2, #1
   155b2:	4694      	mov	ip, r2
   155b4:	2208      	movs	r2, #8
   155b6:	4690      	mov	r8, r2
   155b8:	44b8      	add	r8, r7
   155ba:	44c4      	add	ip, r8
   155bc:	4463      	add	r3, ip
   155be:	781b      	ldrb	r3, [r3, #0]
   155c0:	2b00      	cmp	r3, #0
   155c2:	d101      	bne.n	155c8 <processOnSMS+0x93c>
   155c4:	f001 fada 	bl	16b7c <processOnSMS+0x1ef0>
				{
					strcpy(resep_msg,"DND : ");
   155c8:	230c      	movs	r3, #12
   155ca:	2208      	movs	r2, #8
   155cc:	4694      	mov	ip, r2
   155ce:	44bc      	add	ip, r7
   155d0:	4463      	add	r3, ip
   155d2:	4acd      	ldr	r2, [pc, #820]	; (15908 <processOnSMS+0xc7c>)
   155d4:	6811      	ldr	r1, [r2, #0]
   155d6:	6019      	str	r1, [r3, #0]
   155d8:	8891      	ldrh	r1, [r2, #4]
   155da:	8099      	strh	r1, [r3, #4]
   155dc:	7992      	ldrb	r2, [r2, #6]
   155de:	719a      	strb	r2, [r3, #6]
					strcat(resep_msg,received_command);
   155e0:	68fa      	ldr	r2, [r7, #12]
   155e2:	230c      	movs	r3, #12
   155e4:	2108      	movs	r1, #8
   155e6:	468c      	mov	ip, r1
   155e8:	44bc      	add	ip, r7
   155ea:	4463      	add	r3, ip
   155ec:	0011      	movs	r1, r2
   155ee:	0018      	movs	r0, r3
   155f0:	4bc6      	ldr	r3, [pc, #792]	; (1590c <processOnSMS+0xc80>)
   155f2:	4798      	blx	r3
					strcat(resep_msg," OK");
   155f4:	230c      	movs	r3, #12
   155f6:	2208      	movs	r2, #8
   155f8:	4694      	mov	ip, r2
   155fa:	44bc      	add	ip, r7
   155fc:	4463      	add	r3, ip
   155fe:	0018      	movs	r0, r3
   15600:	4bbd      	ldr	r3, [pc, #756]	; (158f8 <processOnSMS+0xc6c>)
   15602:	4798      	blx	r3
   15604:	0003      	movs	r3, r0
   15606:	001a      	movs	r2, r3
   15608:	230c      	movs	r3, #12
   1560a:	2108      	movs	r1, #8
   1560c:	468c      	mov	ip, r1
   1560e:	44bc      	add	ip, r7
   15610:	4463      	add	r3, ip
   15612:	189a      	adds	r2, r3, r2
   15614:	4bbe      	ldr	r3, [pc, #760]	; (15910 <processOnSMS+0xc84>)
   15616:	0010      	movs	r0, r2
   15618:	0019      	movs	r1, r3
   1561a:	2304      	movs	r3, #4
   1561c:	001a      	movs	r2, r3
   1561e:	4bbd      	ldr	r3, [pc, #756]	; (15914 <processOnSMS+0xc88>)
   15620:	4798      	blx	r3
   15622:	f001 faab 	bl	16b7c <processOnSMS+0x1ef0>
				}
			}
		}
	}
	else if (StringstartsWith(received_command,"FDBK"))
   15626:	4abc      	ldr	r2, [pc, #752]	; (15918 <processOnSMS+0xc8c>)
   15628:	68fb      	ldr	r3, [r7, #12]
   1562a:	0011      	movs	r1, r2
   1562c:	0018      	movs	r0, r3
   1562e:	4bb1      	ldr	r3, [pc, #708]	; (158f4 <processOnSMS+0xc68>)
   15630:	4798      	blx	r3
   15632:	1e03      	subs	r3, r0, #0
   15634:	d072      	beq.n	1571c <processOnSMS+0xa90>
	{
		if (strlen(received_command)>4)
   15636:	68fb      	ldr	r3, [r7, #12]
   15638:	0018      	movs	r0, r3
   1563a:	4baf      	ldr	r3, [pc, #700]	; (158f8 <processOnSMS+0xc6c>)
   1563c:	4798      	blx	r3
   1563e:	0003      	movs	r3, r0
   15640:	2b04      	cmp	r3, #4
   15642:	d801      	bhi.n	15648 <processOnSMS+0x9bc>
   15644:	f001 fa9a 	bl	16b7c <processOnSMS+0x1ef0>
		{
			memmove(received_command,received_command+4,strlen(received_command));
   15648:	68fb      	ldr	r3, [r7, #12]
   1564a:	1d1c      	adds	r4, r3, #4
   1564c:	68fb      	ldr	r3, [r7, #12]
   1564e:	0018      	movs	r0, r3
   15650:	4ba9      	ldr	r3, [pc, #676]	; (158f8 <processOnSMS+0xc6c>)
   15652:	4798      	blx	r3
   15654:	0002      	movs	r2, r0
   15656:	68fb      	ldr	r3, [r7, #12]
   15658:	0021      	movs	r1, r4
   1565a:	0018      	movs	r0, r3
   1565c:	4ba7      	ldr	r3, [pc, #668]	; (158fc <processOnSMS+0xc70>)
   1565e:	4798      	blx	r3
			uint8_t fdbkValue = atoi(received_command);
   15660:	68fb      	ldr	r3, [r7, #12]
   15662:	0018      	movs	r0, r3
   15664:	4bad      	ldr	r3, [pc, #692]	; (1591c <processOnSMS+0xc90>)
   15666:	4798      	blx	r3
   15668:	0002      	movs	r2, r0
   1566a:	2326      	movs	r3, #38	; 0x26
   1566c:	33ff      	adds	r3, #255	; 0xff
   1566e:	2108      	movs	r1, #8
   15670:	468c      	mov	ip, r1
   15672:	44bc      	add	ip, r7
   15674:	4463      	add	r3, ip
   15676:	701a      	strb	r2, [r3, #0]
			if (fdbkValue <= MOTORFEEDBACK_DETECTION_ON)
   15678:	2326      	movs	r3, #38	; 0x26
   1567a:	33ff      	adds	r3, #255	; 0xff
   1567c:	2208      	movs	r2, #8
   1567e:	4694      	mov	ip, r2
   15680:	44bc      	add	ip, r7
   15682:	4463      	add	r3, ip
   15684:	781b      	ldrb	r3, [r3, #0]
   15686:	2b02      	cmp	r3, #2
   15688:	d901      	bls.n	1568e <processOnSMS+0xa02>
   1568a:	f001 fa77 	bl	16b7c <processOnSMS+0x1ef0>
			{
				if (fdbkValue == MOTORFEEDBACK_DETECTION_CURRENT)
   1568e:	2326      	movs	r3, #38	; 0x26
   15690:	33ff      	adds	r3, #255	; 0xff
   15692:	2208      	movs	r2, #8
   15694:	4694      	mov	ip, r2
   15696:	44bc      	add	ip, r7
   15698:	4463      	add	r3, ip
   1569a:	781b      	ldrb	r3, [r3, #0]
   1569c:	2b01      	cmp	r3, #1
   1569e:	d10b      	bne.n	156b8 <processOnSMS+0xa2c>
				{
					if (!factory_settings_parameter_struct.ENABLE_CURRENT)
   156a0:	4b9f      	ldr	r3, [pc, #636]	; (15920 <processOnSMS+0xc94>)
   156a2:	785b      	ldrb	r3, [r3, #1]
   156a4:	2b00      	cmp	r3, #0
   156a6:	d107      	bne.n	156b8 <processOnSMS+0xa2c>
					{
						fdbkValue=MOTORFEEDBACK_DETECTION_OFF;
   156a8:	2326      	movs	r3, #38	; 0x26
   156aa:	33ff      	adds	r3, #255	; 0xff
   156ac:	2208      	movs	r2, #8
   156ae:	4694      	mov	ip, r2
   156b0:	44bc      	add	ip, r7
   156b2:	4463      	add	r3, ip
   156b4:	2200      	movs	r2, #0
   156b6:	701a      	strb	r2, [r3, #0]
					}
				}
				saveMotorFeedbackDetectionSettings(fdbkValue);
   156b8:	2326      	movs	r3, #38	; 0x26
   156ba:	33ff      	adds	r3, #255	; 0xff
   156bc:	2208      	movs	r2, #8
   156be:	4694      	mov	ip, r2
   156c0:	44bc      	add	ip, r7
   156c2:	4463      	add	r3, ip
   156c4:	781b      	ldrb	r3, [r3, #0]
   156c6:	0018      	movs	r0, r3
   156c8:	4b96      	ldr	r3, [pc, #600]	; (15924 <processOnSMS+0xc98>)
   156ca:	4798      	blx	r3
				incomingSMSProcessed=true;
   156cc:	2328      	movs	r3, #40	; 0x28
   156ce:	33ff      	adds	r3, #255	; 0xff
   156d0:	2208      	movs	r2, #8
   156d2:	4694      	mov	ip, r2
   156d4:	44bc      	add	ip, r7
   156d6:	4463      	add	r3, ip
   156d8:	2201      	movs	r2, #1
   156da:	701a      	strb	r2, [r3, #0]
				
				if (response_sms_processed_cmd == true)
   156dc:	4b89      	ldr	r3, [pc, #548]	; (15904 <processOnSMS+0xc78>)
   156de:	2294      	movs	r2, #148	; 0x94
   156e0:	0052      	lsls	r2, r2, #1
   156e2:	4694      	mov	ip, r2
   156e4:	2208      	movs	r2, #8
   156e6:	4690      	mov	r8, r2
   156e8:	44b8      	add	r8, r7
   156ea:	44c4      	add	ip, r8
   156ec:	4463      	add	r3, ip
   156ee:	781b      	ldrb	r3, [r3, #0]
   156f0:	2b00      	cmp	r3, #0
   156f2:	d101      	bne.n	156f8 <processOnSMS+0xa6c>
   156f4:	f001 fa42 	bl	16b7c <processOnSMS+0x1ef0>
				{
					sprintf(resep_msg,"FDBK : %d", fdbkValue);
   156f8:	2326      	movs	r3, #38	; 0x26
   156fa:	33ff      	adds	r3, #255	; 0xff
   156fc:	2208      	movs	r2, #8
   156fe:	4694      	mov	ip, r2
   15700:	44bc      	add	ip, r7
   15702:	4463      	add	r3, ip
   15704:	781a      	ldrb	r2, [r3, #0]
   15706:	4988      	ldr	r1, [pc, #544]	; (15928 <processOnSMS+0xc9c>)
   15708:	230c      	movs	r3, #12
   1570a:	2008      	movs	r0, #8
   1570c:	4684      	mov	ip, r0
   1570e:	44bc      	add	ip, r7
   15710:	4463      	add	r3, ip
   15712:	0018      	movs	r0, r3
   15714:	4b85      	ldr	r3, [pc, #532]	; (1592c <processOnSMS+0xca0>)
   15716:	4798      	blx	r3
   15718:	f001 fa30 	bl	16b7c <processOnSMS+0x1ef0>
				}
			}
		}
	}
	else if (StringstartsWith(received_command,"UOMETHOD"))
   1571c:	4a84      	ldr	r2, [pc, #528]	; (15930 <processOnSMS+0xca4>)
   1571e:	68fb      	ldr	r3, [r7, #12]
   15720:	0011      	movs	r1, r2
   15722:	0018      	movs	r0, r3
   15724:	4b73      	ldr	r3, [pc, #460]	; (158f4 <processOnSMS+0xc68>)
   15726:	4798      	blx	r3
   15728:	1e03      	subs	r3, r0, #0
   1572a:	d06b      	beq.n	15804 <processOnSMS+0xb78>
	{
		if (strlen(received_command)>8)
   1572c:	68fb      	ldr	r3, [r7, #12]
   1572e:	0018      	movs	r0, r3
   15730:	4b71      	ldr	r3, [pc, #452]	; (158f8 <processOnSMS+0xc6c>)
   15732:	4798      	blx	r3
   15734:	0003      	movs	r3, r0
   15736:	2b08      	cmp	r3, #8
   15738:	d801      	bhi.n	1573e <processOnSMS+0xab2>
   1573a:	f001 fa1f 	bl	16b7c <processOnSMS+0x1ef0>
		{
			memmove(received_command,received_command+8,strlen(received_command));
   1573e:	68fb      	ldr	r3, [r7, #12]
   15740:	3308      	adds	r3, #8
   15742:	001c      	movs	r4, r3
   15744:	68fb      	ldr	r3, [r7, #12]
   15746:	0018      	movs	r0, r3
   15748:	4b6b      	ldr	r3, [pc, #428]	; (158f8 <processOnSMS+0xc6c>)
   1574a:	4798      	blx	r3
   1574c:	0002      	movs	r2, r0
   1574e:	68fb      	ldr	r3, [r7, #12]
   15750:	0021      	movs	r1, r4
   15752:	0018      	movs	r0, r3
   15754:	4b69      	ldr	r3, [pc, #420]	; (158fc <processOnSMS+0xc70>)
   15756:	4798      	blx	r3
			
			if(factory_settings_parameter_struct.ENABLE_CURRENT && (received_command[0]=='P' || received_command[0]=='C'))
   15758:	4b71      	ldr	r3, [pc, #452]	; (15920 <processOnSMS+0xc94>)
   1575a:	785b      	ldrb	r3, [r3, #1]
   1575c:	2b00      	cmp	r3, #0
   1575e:	d101      	bne.n	15764 <processOnSMS+0xad8>
   15760:	f001 fa0c 	bl	16b7c <processOnSMS+0x1ef0>
   15764:	68fb      	ldr	r3, [r7, #12]
   15766:	781b      	ldrb	r3, [r3, #0]
   15768:	2b50      	cmp	r3, #80	; 0x50
   1576a:	d005      	beq.n	15778 <processOnSMS+0xaec>
   1576c:	68fb      	ldr	r3, [r7, #12]
   1576e:	781b      	ldrb	r3, [r3, #0]
   15770:	2b43      	cmp	r3, #67	; 0x43
   15772:	d001      	beq.n	15778 <processOnSMS+0xaec>
   15774:	f001 fa02 	bl	16b7c <processOnSMS+0x1ef0>
			{
				saveResponseSettings((char)received_command);  //save specific RESPONSE settings
   15778:	68fb      	ldr	r3, [r7, #12]
   1577a:	b2db      	uxtb	r3, r3
   1577c:	0018      	movs	r0, r3
   1577e:	4b6d      	ldr	r3, [pc, #436]	; (15934 <processOnSMS+0xca8>)
   15780:	4798      	blx	r3
				
				incomingSMSProcessed=true;
   15782:	2328      	movs	r3, #40	; 0x28
   15784:	33ff      	adds	r3, #255	; 0xff
   15786:	2208      	movs	r2, #8
   15788:	4694      	mov	ip, r2
   1578a:	44bc      	add	ip, r7
   1578c:	4463      	add	r3, ip
   1578e:	2201      	movs	r2, #1
   15790:	701a      	strb	r2, [r3, #0]
				
				if (response_sms_processed_cmd == true)
   15792:	4b5c      	ldr	r3, [pc, #368]	; (15904 <processOnSMS+0xc78>)
   15794:	2294      	movs	r2, #148	; 0x94
   15796:	0052      	lsls	r2, r2, #1
   15798:	4694      	mov	ip, r2
   1579a:	2208      	movs	r2, #8
   1579c:	4690      	mov	r8, r2
   1579e:	44b8      	add	r8, r7
   157a0:	44c4      	add	ip, r8
   157a2:	4463      	add	r3, ip
   157a4:	781b      	ldrb	r3, [r3, #0]
   157a6:	2b00      	cmp	r3, #0
   157a8:	d101      	bne.n	157ae <processOnSMS+0xb22>
   157aa:	f001 f9e7 	bl	16b7c <processOnSMS+0x1ef0>
				{
					strcpy(resep_msg,"UOMETHOD : ");
   157ae:	230c      	movs	r3, #12
   157b0:	2208      	movs	r2, #8
   157b2:	4694      	mov	ip, r2
   157b4:	44bc      	add	ip, r7
   157b6:	4463      	add	r3, ip
   157b8:	4a5f      	ldr	r2, [pc, #380]	; (15938 <processOnSMS+0xcac>)
   157ba:	ca13      	ldmia	r2!, {r0, r1, r4}
   157bc:	c313      	stmia	r3!, {r0, r1, r4}
					strcat(resep_msg,received_command);
   157be:	68fa      	ldr	r2, [r7, #12]
   157c0:	230c      	movs	r3, #12
   157c2:	2108      	movs	r1, #8
   157c4:	468c      	mov	ip, r1
   157c6:	44bc      	add	ip, r7
   157c8:	4463      	add	r3, ip
   157ca:	0011      	movs	r1, r2
   157cc:	0018      	movs	r0, r3
   157ce:	4b4f      	ldr	r3, [pc, #316]	; (1590c <processOnSMS+0xc80>)
   157d0:	4798      	blx	r3
					strcat(resep_msg," OK");
   157d2:	230c      	movs	r3, #12
   157d4:	2208      	movs	r2, #8
   157d6:	4694      	mov	ip, r2
   157d8:	44bc      	add	ip, r7
   157da:	4463      	add	r3, ip
   157dc:	0018      	movs	r0, r3
   157de:	4b46      	ldr	r3, [pc, #280]	; (158f8 <processOnSMS+0xc6c>)
   157e0:	4798      	blx	r3
   157e2:	0003      	movs	r3, r0
   157e4:	001a      	movs	r2, r3
   157e6:	230c      	movs	r3, #12
   157e8:	2108      	movs	r1, #8
   157ea:	468c      	mov	ip, r1
   157ec:	44bc      	add	ip, r7
   157ee:	4463      	add	r3, ip
   157f0:	189a      	adds	r2, r3, r2
   157f2:	4b47      	ldr	r3, [pc, #284]	; (15910 <processOnSMS+0xc84>)
   157f4:	0010      	movs	r0, r2
   157f6:	0019      	movs	r1, r3
   157f8:	2304      	movs	r3, #4
   157fa:	001a      	movs	r2, r3
   157fc:	4b45      	ldr	r3, [pc, #276]	; (15914 <processOnSMS+0xc88>)
   157fe:	4798      	blx	r3
   15800:	f001 f9bc 	bl	16b7c <processOnSMS+0x1ef0>
				}
			}
		}
	}
	else if (StringstartsWith(received_command,"RESP"))
   15804:	4a4d      	ldr	r2, [pc, #308]	; (1593c <processOnSMS+0xcb0>)
   15806:	68fb      	ldr	r3, [r7, #12]
   15808:	0011      	movs	r1, r2
   1580a:	0018      	movs	r0, r3
   1580c:	4b39      	ldr	r3, [pc, #228]	; (158f4 <processOnSMS+0xc68>)
   1580e:	4798      	blx	r3
   15810:	1e03      	subs	r3, r0, #0
   15812:	d100      	bne.n	15816 <processOnSMS+0xb8a>
   15814:	e096      	b.n	15944 <processOnSMS+0xcb8>
	{
		if (strlen(received_command)>4)
   15816:	68fb      	ldr	r3, [r7, #12]
   15818:	0018      	movs	r0, r3
   1581a:	4b37      	ldr	r3, [pc, #220]	; (158f8 <processOnSMS+0xc6c>)
   1581c:	4798      	blx	r3
   1581e:	0003      	movs	r3, r0
   15820:	2b04      	cmp	r3, #4
   15822:	d801      	bhi.n	15828 <processOnSMS+0xb9c>
   15824:	f001 f9aa 	bl	16b7c <processOnSMS+0x1ef0>
		{
			memmove(received_command,received_command+4,strlen(received_command));
   15828:	68fb      	ldr	r3, [r7, #12]
   1582a:	1d1c      	adds	r4, r3, #4
   1582c:	68fb      	ldr	r3, [r7, #12]
   1582e:	0018      	movs	r0, r3
   15830:	4b31      	ldr	r3, [pc, #196]	; (158f8 <processOnSMS+0xc6c>)
   15832:	4798      	blx	r3
   15834:	0002      	movs	r2, r0
   15836:	68fb      	ldr	r3, [r7, #12]
   15838:	0021      	movs	r1, r4
   1583a:	0018      	movs	r0, r3
   1583c:	4b2f      	ldr	r3, [pc, #188]	; (158fc <processOnSMS+0xc70>)
   1583e:	4798      	blx	r3
			if(received_command[0]=='C' || received_command[0]=='A' || received_command[0]=='T' || received_command[0]=='N')
   15840:	68fb      	ldr	r3, [r7, #12]
   15842:	781b      	ldrb	r3, [r3, #0]
   15844:	2b43      	cmp	r3, #67	; 0x43
   15846:	d00d      	beq.n	15864 <processOnSMS+0xbd8>
   15848:	68fb      	ldr	r3, [r7, #12]
   1584a:	781b      	ldrb	r3, [r3, #0]
   1584c:	2b41      	cmp	r3, #65	; 0x41
   1584e:	d009      	beq.n	15864 <processOnSMS+0xbd8>
   15850:	68fb      	ldr	r3, [r7, #12]
   15852:	781b      	ldrb	r3, [r3, #0]
   15854:	2b54      	cmp	r3, #84	; 0x54
   15856:	d005      	beq.n	15864 <processOnSMS+0xbd8>
   15858:	68fb      	ldr	r3, [r7, #12]
   1585a:	781b      	ldrb	r3, [r3, #0]
   1585c:	2b4e      	cmp	r3, #78	; 0x4e
   1585e:	d001      	beq.n	15864 <processOnSMS+0xbd8>
   15860:	f001 f98c 	bl	16b7c <processOnSMS+0x1ef0>
			{
				saveResponseSettings((char)received_command);  //save specific RESPONSE settings
   15864:	68fb      	ldr	r3, [r7, #12]
   15866:	b2db      	uxtb	r3, r3
   15868:	0018      	movs	r0, r3
   1586a:	4b32      	ldr	r3, [pc, #200]	; (15934 <processOnSMS+0xca8>)
   1586c:	4798      	blx	r3
				
				incomingSMSProcessed=true;
   1586e:	2328      	movs	r3, #40	; 0x28
   15870:	33ff      	adds	r3, #255	; 0xff
   15872:	2208      	movs	r2, #8
   15874:	4694      	mov	ip, r2
   15876:	44bc      	add	ip, r7
   15878:	4463      	add	r3, ip
   1587a:	2201      	movs	r2, #1
   1587c:	701a      	strb	r2, [r3, #0]
				
				if (response_sms_processed_cmd == true)
   1587e:	4b21      	ldr	r3, [pc, #132]	; (15904 <processOnSMS+0xc78>)
   15880:	2294      	movs	r2, #148	; 0x94
   15882:	0052      	lsls	r2, r2, #1
   15884:	4694      	mov	ip, r2
   15886:	2208      	movs	r2, #8
   15888:	4690      	mov	r8, r2
   1588a:	44b8      	add	r8, r7
   1588c:	44c4      	add	ip, r8
   1588e:	4463      	add	r3, ip
   15890:	781b      	ldrb	r3, [r3, #0]
   15892:	2b00      	cmp	r3, #0
   15894:	d101      	bne.n	1589a <processOnSMS+0xc0e>
   15896:	f001 f971 	bl	16b7c <processOnSMS+0x1ef0>
				{
					strcpy(resep_msg,"RESP : ");
   1589a:	230c      	movs	r3, #12
   1589c:	2208      	movs	r2, #8
   1589e:	4694      	mov	ip, r2
   158a0:	44bc      	add	ip, r7
   158a2:	4463      	add	r3, ip
   158a4:	4a26      	ldr	r2, [pc, #152]	; (15940 <processOnSMS+0xcb4>)
   158a6:	ca03      	ldmia	r2!, {r0, r1}
   158a8:	c303      	stmia	r3!, {r0, r1}
					strcat(resep_msg,received_command);
   158aa:	68fa      	ldr	r2, [r7, #12]
   158ac:	230c      	movs	r3, #12
   158ae:	2108      	movs	r1, #8
   158b0:	468c      	mov	ip, r1
   158b2:	44bc      	add	ip, r7
   158b4:	4463      	add	r3, ip
   158b6:	0011      	movs	r1, r2
   158b8:	0018      	movs	r0, r3
   158ba:	4b14      	ldr	r3, [pc, #80]	; (1590c <processOnSMS+0xc80>)
   158bc:	4798      	blx	r3
					strcat(resep_msg," OK");
   158be:	230c      	movs	r3, #12
   158c0:	2208      	movs	r2, #8
   158c2:	4694      	mov	ip, r2
   158c4:	44bc      	add	ip, r7
   158c6:	4463      	add	r3, ip
   158c8:	0018      	movs	r0, r3
   158ca:	4b0b      	ldr	r3, [pc, #44]	; (158f8 <processOnSMS+0xc6c>)
   158cc:	4798      	blx	r3
   158ce:	0003      	movs	r3, r0
   158d0:	001a      	movs	r2, r3
   158d2:	230c      	movs	r3, #12
   158d4:	2108      	movs	r1, #8
   158d6:	468c      	mov	ip, r1
   158d8:	44bc      	add	ip, r7
   158da:	4463      	add	r3, ip
   158dc:	189a      	adds	r2, r3, r2
   158de:	4b0c      	ldr	r3, [pc, #48]	; (15910 <processOnSMS+0xc84>)
   158e0:	0010      	movs	r0, r2
   158e2:	0019      	movs	r1, r3
   158e4:	2304      	movs	r3, #4
   158e6:	001a      	movs	r2, r3
   158e8:	4b0a      	ldr	r3, [pc, #40]	; (15914 <processOnSMS+0xc88>)
   158ea:	4798      	blx	r3
   158ec:	f001 f946 	bl	16b7c <processOnSMS+0x1ef0>
   158f0:	00029ddc 	.word	0x00029ddc
   158f4:	00013eed 	.word	0x00013eed
   158f8:	00028c8b 	.word	0x00028c8b
   158fc:	000289d7 	.word	0x000289d7
   15900:	00011325 	.word	0x00011325
   15904:	fffffeda 	.word	0xfffffeda
   15908:	00029de0 	.word	0x00029de0
   1590c:	00028c45 	.word	0x00028c45
   15910:	00029de8 	.word	0x00029de8
   15914:	000289c5 	.word	0x000289c5
   15918:	00029dec 	.word	0x00029dec
   1591c:	000288e1 	.word	0x000288e1
   15920:	20000638 	.word	0x20000638
   15924:	000116a1 	.word	0x000116a1
   15928:	00029df4 	.word	0x00029df4
   1592c:	00028c01 	.word	0x00028c01
   15930:	00029e00 	.word	0x00029e00
   15934:	00011371 	.word	0x00011371
   15938:	00029e0c 	.word	0x00029e0c
   1593c:	00029e18 	.word	0x00029e18
   15940:	00029e20 	.word	0x00029e20
	}
	//else if (StringstartsWith(received_command,"SJMP"))
	//{
	//strcpy(resep_msg,"New hardware does not required Jumper Setting");
	//}
	else if (StringstartsWith(received_command,"OVR"))
   15944:	4aef      	ldr	r2, [pc, #956]	; (15d04 <processOnSMS+0x1078>)
   15946:	68fb      	ldr	r3, [r7, #12]
   15948:	0011      	movs	r1, r2
   1594a:	0018      	movs	r0, r3
   1594c:	4bee      	ldr	r3, [pc, #952]	; (15d08 <processOnSMS+0x107c>)
   1594e:	4798      	blx	r3
   15950:	1e03      	subs	r3, r0, #0
   15952:	d050      	beq.n	159f6 <processOnSMS+0xd6a>
	{
		memmove(received_command,received_command+3,strlen(received_command));
   15954:	68fb      	ldr	r3, [r7, #12]
   15956:	1cdc      	adds	r4, r3, #3
   15958:	68fb      	ldr	r3, [r7, #12]
   1595a:	0018      	movs	r0, r3
   1595c:	4beb      	ldr	r3, [pc, #940]	; (15d0c <processOnSMS+0x1080>)
   1595e:	4798      	blx	r3
   15960:	0002      	movs	r2, r0
   15962:	68fb      	ldr	r3, [r7, #12]
   15964:	0021      	movs	r1, r4
   15966:	0018      	movs	r0, r3
   15968:	4be9      	ldr	r3, [pc, #932]	; (15d10 <processOnSMS+0x1084>)
   1596a:	4798      	blx	r3
		uint8_t ovr_per = atoi(received_command);
   1596c:	68fb      	ldr	r3, [r7, #12]
   1596e:	0018      	movs	r0, r3
   15970:	4be8      	ldr	r3, [pc, #928]	; (15d14 <processOnSMS+0x1088>)
   15972:	4798      	blx	r3
   15974:	0002      	movs	r2, r0
   15976:	238b      	movs	r3, #139	; 0x8b
   15978:	005b      	lsls	r3, r3, #1
   1597a:	2108      	movs	r1, #8
   1597c:	468c      	mov	ip, r1
   1597e:	44bc      	add	ip, r7
   15980:	4463      	add	r3, ip
   15982:	701a      	strb	r2, [r3, #0]
		if(ovr_per>104)
   15984:	238b      	movs	r3, #139	; 0x8b
   15986:	005b      	lsls	r3, r3, #1
   15988:	2208      	movs	r2, #8
   1598a:	4694      	mov	ip, r2
   1598c:	44bc      	add	ip, r7
   1598e:	4463      	add	r3, ip
   15990:	781b      	ldrb	r3, [r3, #0]
   15992:	2b68      	cmp	r3, #104	; 0x68
   15994:	d801      	bhi.n	1599a <processOnSMS+0xd0e>
   15996:	f001 f8f1 	bl	16b7c <processOnSMS+0x1ef0>
		{
			setOverloadPer(ovr_per);
   1599a:	238b      	movs	r3, #139	; 0x8b
   1599c:	005b      	lsls	r3, r3, #1
   1599e:	2208      	movs	r2, #8
   159a0:	4694      	mov	ip, r2
   159a2:	44bc      	add	ip, r7
   159a4:	4463      	add	r3, ip
   159a6:	781b      	ldrb	r3, [r3, #0]
   159a8:	0018      	movs	r0, r3
   159aa:	4bdb      	ldr	r3, [pc, #876]	; (15d18 <processOnSMS+0x108c>)
   159ac:	4798      	blx	r3
			incomingSMSProcessed=true;
   159ae:	2328      	movs	r3, #40	; 0x28
   159b0:	33ff      	adds	r3, #255	; 0xff
   159b2:	2208      	movs	r2, #8
   159b4:	4694      	mov	ip, r2
   159b6:	44bc      	add	ip, r7
   159b8:	4463      	add	r3, ip
   159ba:	2201      	movs	r2, #1
   159bc:	701a      	strb	r2, [r3, #0]
			
			if (response_sms_processed_cmd == true)
   159be:	4bd7      	ldr	r3, [pc, #860]	; (15d1c <processOnSMS+0x1090>)
   159c0:	2294      	movs	r2, #148	; 0x94
   159c2:	0052      	lsls	r2, r2, #1
   159c4:	4694      	mov	ip, r2
   159c6:	2208      	movs	r2, #8
   159c8:	4690      	mov	r8, r2
   159ca:	44b8      	add	r8, r7
   159cc:	44c4      	add	ip, r8
   159ce:	4463      	add	r3, ip
   159d0:	781b      	ldrb	r3, [r3, #0]
   159d2:	2b00      	cmp	r3, #0
   159d4:	d101      	bne.n	159da <processOnSMS+0xd4e>
   159d6:	f001 f8d1 	bl	16b7c <processOnSMS+0x1ef0>
			{
				strcpy(resep_msg,"OVR SET OK");
   159da:	230c      	movs	r3, #12
   159dc:	2208      	movs	r2, #8
   159de:	4694      	mov	ip, r2
   159e0:	44bc      	add	ip, r7
   159e2:	4463      	add	r3, ip
   159e4:	4ace      	ldr	r2, [pc, #824]	; (15d20 <processOnSMS+0x1094>)
   159e6:	ca03      	ldmia	r2!, {r0, r1}
   159e8:	c303      	stmia	r3!, {r0, r1}
   159ea:	8811      	ldrh	r1, [r2, #0]
   159ec:	8019      	strh	r1, [r3, #0]
   159ee:	7892      	ldrb	r2, [r2, #2]
   159f0:	709a      	strb	r2, [r3, #2]
   159f2:	f001 f8c3 	bl	16b7c <processOnSMS+0x1ef0>
			}
		}
	}
	else if (StringstartsWith(received_command,"UNDR"))
   159f6:	4acb      	ldr	r2, [pc, #812]	; (15d24 <processOnSMS+0x1098>)
   159f8:	68fb      	ldr	r3, [r7, #12]
   159fa:	0011      	movs	r1, r2
   159fc:	0018      	movs	r0, r3
   159fe:	4bc2      	ldr	r3, [pc, #776]	; (15d08 <processOnSMS+0x107c>)
   15a00:	4798      	blx	r3
   15a02:	1e03      	subs	r3, r0, #0
   15a04:	d057      	beq.n	15ab6 <processOnSMS+0xe2a>
	{
		memmove(received_command,received_command+4,strlen(received_command));
   15a06:	68fb      	ldr	r3, [r7, #12]
   15a08:	1d1c      	adds	r4, r3, #4
   15a0a:	68fb      	ldr	r3, [r7, #12]
   15a0c:	0018      	movs	r0, r3
   15a0e:	4bbf      	ldr	r3, [pc, #764]	; (15d0c <processOnSMS+0x1080>)
   15a10:	4798      	blx	r3
   15a12:	0002      	movs	r2, r0
   15a14:	68fb      	ldr	r3, [r7, #12]
   15a16:	0021      	movs	r1, r4
   15a18:	0018      	movs	r0, r3
   15a1a:	4bbd      	ldr	r3, [pc, #756]	; (15d10 <processOnSMS+0x1084>)
   15a1c:	4798      	blx	r3
		uint8_t undr_per = atoi(received_command);
   15a1e:	68fb      	ldr	r3, [r7, #12]
   15a20:	0018      	movs	r0, r3
   15a22:	4bbc      	ldr	r3, [pc, #752]	; (15d14 <processOnSMS+0x1088>)
   15a24:	4798      	blx	r3
   15a26:	0002      	movs	r2, r0
   15a28:	2316      	movs	r3, #22
   15a2a:	33ff      	adds	r3, #255	; 0xff
   15a2c:	2108      	movs	r1, #8
   15a2e:	468c      	mov	ip, r1
   15a30:	44bc      	add	ip, r7
   15a32:	4463      	add	r3, ip
   15a34:	701a      	strb	r2, [r3, #0]
		if(undr_per<98 && undr_per>0)
   15a36:	2316      	movs	r3, #22
   15a38:	33ff      	adds	r3, #255	; 0xff
   15a3a:	2208      	movs	r2, #8
   15a3c:	4694      	mov	ip, r2
   15a3e:	44bc      	add	ip, r7
   15a40:	4463      	add	r3, ip
   15a42:	781b      	ldrb	r3, [r3, #0]
   15a44:	2b61      	cmp	r3, #97	; 0x61
   15a46:	d901      	bls.n	15a4c <processOnSMS+0xdc0>
   15a48:	f001 f898 	bl	16b7c <processOnSMS+0x1ef0>
   15a4c:	2316      	movs	r3, #22
   15a4e:	33ff      	adds	r3, #255	; 0xff
   15a50:	2208      	movs	r2, #8
   15a52:	4694      	mov	ip, r2
   15a54:	44bc      	add	ip, r7
   15a56:	4463      	add	r3, ip
   15a58:	781b      	ldrb	r3, [r3, #0]
   15a5a:	2b00      	cmp	r3, #0
   15a5c:	d101      	bne.n	15a62 <processOnSMS+0xdd6>
   15a5e:	f001 f88d 	bl	16b7c <processOnSMS+0x1ef0>
		{

			setUnderloadPer(undr_per);
   15a62:	2316      	movs	r3, #22
   15a64:	33ff      	adds	r3, #255	; 0xff
   15a66:	2208      	movs	r2, #8
   15a68:	4694      	mov	ip, r2
   15a6a:	44bc      	add	ip, r7
   15a6c:	4463      	add	r3, ip
   15a6e:	781b      	ldrb	r3, [r3, #0]
   15a70:	0018      	movs	r0, r3
   15a72:	4bad      	ldr	r3, [pc, #692]	; (15d28 <processOnSMS+0x109c>)
   15a74:	4798      	blx	r3

			incomingSMSProcessed=true;
   15a76:	2328      	movs	r3, #40	; 0x28
   15a78:	33ff      	adds	r3, #255	; 0xff
   15a7a:	2208      	movs	r2, #8
   15a7c:	4694      	mov	ip, r2
   15a7e:	44bc      	add	ip, r7
   15a80:	4463      	add	r3, ip
   15a82:	2201      	movs	r2, #1
   15a84:	701a      	strb	r2, [r3, #0]

			if (response_sms_processed_cmd == true)
   15a86:	4ba5      	ldr	r3, [pc, #660]	; (15d1c <processOnSMS+0x1090>)
   15a88:	2294      	movs	r2, #148	; 0x94
   15a8a:	0052      	lsls	r2, r2, #1
   15a8c:	4694      	mov	ip, r2
   15a8e:	2208      	movs	r2, #8
   15a90:	4690      	mov	r8, r2
   15a92:	44b8      	add	r8, r7
   15a94:	44c4      	add	ip, r8
   15a96:	4463      	add	r3, ip
   15a98:	781b      	ldrb	r3, [r3, #0]
   15a9a:	2b00      	cmp	r3, #0
   15a9c:	d101      	bne.n	15aa2 <processOnSMS+0xe16>
   15a9e:	f001 f86d 	bl	16b7c <processOnSMS+0x1ef0>
			{
				strcpy(resep_msg,"UNDR SET OK");
   15aa2:	230c      	movs	r3, #12
   15aa4:	2208      	movs	r2, #8
   15aa6:	4694      	mov	ip, r2
   15aa8:	44bc      	add	ip, r7
   15aaa:	4463      	add	r3, ip
   15aac:	4a9f      	ldr	r2, [pc, #636]	; (15d2c <processOnSMS+0x10a0>)
   15aae:	ca13      	ldmia	r2!, {r0, r1, r4}
   15ab0:	c313      	stmia	r3!, {r0, r1, r4}
   15ab2:	f001 f863 	bl	16b7c <processOnSMS+0x1ef0>
			}
		}
	}
	else if (StringstartsWith(received_command,"ASTAT"))
   15ab6:	4a9e      	ldr	r2, [pc, #632]	; (15d30 <processOnSMS+0x10a4>)
   15ab8:	68fb      	ldr	r3, [r7, #12]
   15aba:	0011      	movs	r1, r2
   15abc:	0018      	movs	r0, r3
   15abe:	4b92      	ldr	r3, [pc, #584]	; (15d08 <processOnSMS+0x107c>)
   15ac0:	4798      	blx	r3
   15ac2:	1e03      	subs	r3, r0, #0
   15ac4:	d040      	beq.n	15b48 <processOnSMS+0xebc>
	{
		if(factory_settings_parameter_struct.ENABLE_CURRENT)
   15ac6:	4b9b      	ldr	r3, [pc, #620]	; (15d34 <processOnSMS+0x10a8>)
   15ac8:	785b      	ldrb	r3, [r3, #1]
   15aca:	2b00      	cmp	r3, #0
   15acc:	d101      	bne.n	15ad2 <processOnSMS+0xe46>
   15ace:	f001 f855 	bl	16b7c <processOnSMS+0x1ef0>
		{
			sprintf(resep_msg,"C:%u.%u\nN:%u\nO:%u\nU:%u\nOP:%u\nUP:%u",
			Analog_Parameter_Struct.Motor_Current_IntPart,
   15ad2:	4b99      	ldr	r3, [pc, #612]	; (15d38 <processOnSMS+0x10ac>)
   15ad4:	8a9b      	ldrh	r3, [r3, #20]
   15ad6:	b29b      	uxth	r3, r3
			sprintf(resep_msg,"C:%u.%u\nN:%u\nO:%u\nU:%u\nOP:%u\nUP:%u",
   15ad8:	607b      	str	r3, [r7, #4]
			Analog_Parameter_Struct.Motor_Current_DecPart,
   15ada:	4b97      	ldr	r3, [pc, #604]	; (15d38 <processOnSMS+0x10ac>)
   15adc:	8adb      	ldrh	r3, [r3, #22]
   15ade:	b29b      	uxth	r3, r3
			sprintf(resep_msg,"C:%u.%u\nN:%u\nO:%u\nU:%u\nOP:%u\nUP:%u",
   15ae0:	603b      	str	r3, [r7, #0]
   15ae2:	4b96      	ldr	r3, [pc, #600]	; (15d3c <processOnSMS+0x10b0>)
   15ae4:	691a      	ldr	r2, [r3, #16]
   15ae6:	4b95      	ldr	r3, [pc, #596]	; (15d3c <processOnSMS+0x10b0>)
   15ae8:	6959      	ldr	r1, [r3, #20]
   15aea:	4b94      	ldr	r3, [pc, #592]	; (15d3c <processOnSMS+0x10b0>)
   15aec:	699b      	ldr	r3, [r3, #24]
   15aee:	4698      	mov	r8, r3
			user_settings_parameter_struct.normalLoadAddress,
			user_settings_parameter_struct.overloadAddress,
			user_settings_parameter_struct.underloadAddress,
			user_settings_parameter_struct.overloadPerAddress,
   15af0:	4892      	ldr	r0, [pc, #584]	; (15d3c <processOnSMS+0x10b0>)
   15af2:	7f40      	ldrb	r0, [r0, #29]
			sprintf(resep_msg,"C:%u.%u\nN:%u\nO:%u\nU:%u\nOP:%u\nUP:%u",
   15af4:	0005      	movs	r5, r0
			user_settings_parameter_struct.underloadPerAddress);
   15af6:	4891      	ldr	r0, [pc, #580]	; (15d3c <processOnSMS+0x10b0>)
   15af8:	7f00      	ldrb	r0, [r0, #28]
			sprintf(resep_msg,"C:%u.%u\nN:%u\nO:%u\nU:%u\nOP:%u\nUP:%u",
   15afa:	0006      	movs	r6, r0
   15afc:	4c90      	ldr	r4, [pc, #576]	; (15d40 <processOnSMS+0x10b4>)
   15afe:	200c      	movs	r0, #12
   15b00:	2308      	movs	r3, #8
   15b02:	469c      	mov	ip, r3
   15b04:	44bc      	add	ip, r7
   15b06:	4460      	add	r0, ip
   15b08:	9604      	str	r6, [sp, #16]
   15b0a:	9503      	str	r5, [sp, #12]
   15b0c:	4643      	mov	r3, r8
   15b0e:	9302      	str	r3, [sp, #8]
   15b10:	9101      	str	r1, [sp, #4]
   15b12:	9200      	str	r2, [sp, #0]
   15b14:	683b      	ldr	r3, [r7, #0]
   15b16:	687a      	ldr	r2, [r7, #4]
   15b18:	0021      	movs	r1, r4
   15b1a:	4c8a      	ldr	r4, [pc, #552]	; (15d44 <processOnSMS+0x10b8>)
   15b1c:	47a0      	blx	r4
			response_sms_processed_cmd = true;
   15b1e:	4b7f      	ldr	r3, [pc, #508]	; (15d1c <processOnSMS+0x1090>)
   15b20:	2294      	movs	r2, #148	; 0x94
   15b22:	0052      	lsls	r2, r2, #1
   15b24:	4694      	mov	ip, r2
   15b26:	2208      	movs	r2, #8
   15b28:	4690      	mov	r8, r2
   15b2a:	44b8      	add	r8, r7
   15b2c:	44c4      	add	ip, r8
   15b2e:	4463      	add	r3, ip
   15b30:	2201      	movs	r2, #1
   15b32:	701a      	strb	r2, [r3, #0]
			incomingSMSProcessed=true;
   15b34:	2328      	movs	r3, #40	; 0x28
   15b36:	33ff      	adds	r3, #255	; 0xff
   15b38:	2208      	movs	r2, #8
   15b3a:	4694      	mov	ip, r2
   15b3c:	44bc      	add	ip, r7
   15b3e:	4463      	add	r3, ip
   15b40:	2201      	movs	r2, #1
   15b42:	701a      	strb	r2, [r3, #0]
   15b44:	f001 f81a 	bl	16b7c <processOnSMS+0x1ef0>

		}

	}
	else if (StringstartsWith(received_command,"OVFON"))
   15b48:	4a7f      	ldr	r2, [pc, #508]	; (15d48 <processOnSMS+0x10bc>)
   15b4a:	68fb      	ldr	r3, [r7, #12]
   15b4c:	0011      	movs	r1, r2
   15b4e:	0018      	movs	r0, r3
   15b50:	4b6d      	ldr	r3, [pc, #436]	; (15d08 <processOnSMS+0x107c>)
   15b52:	4798      	blx	r3
   15b54:	1e03      	subs	r3, r0, #0
   15b56:	d032      	beq.n	15bbe <processOnSMS+0xf32>
	{
		if (factory_settings_parameter_struct.ENABLE_WATER && !(factory_settings_parameter_struct.ENABLE_M2M))
   15b58:	4b76      	ldr	r3, [pc, #472]	; (15d34 <processOnSMS+0x10a8>)
   15b5a:	795b      	ldrb	r3, [r3, #5]
   15b5c:	2b00      	cmp	r3, #0
   15b5e:	d101      	bne.n	15b64 <processOnSMS+0xed8>
   15b60:	f001 f80c 	bl	16b7c <processOnSMS+0x1ef0>
   15b64:	4b73      	ldr	r3, [pc, #460]	; (15d34 <processOnSMS+0x10a8>)
   15b66:	78db      	ldrb	r3, [r3, #3]
   15b68:	2b00      	cmp	r3, #0
   15b6a:	d001      	beq.n	15b70 <processOnSMS+0xee4>
   15b6c:	f001 f806 	bl	16b7c <processOnSMS+0x1ef0>
		{
			savePreventOverFlowSettings(true);  //set DND to False in EEPROM
   15b70:	2001      	movs	r0, #1
   15b72:	4b76      	ldr	r3, [pc, #472]	; (15d4c <processOnSMS+0x10c0>)
   15b74:	4798      	blx	r3
			
			incomingSMSProcessed=true;
   15b76:	2328      	movs	r3, #40	; 0x28
   15b78:	33ff      	adds	r3, #255	; 0xff
   15b7a:	2208      	movs	r2, #8
   15b7c:	4694      	mov	ip, r2
   15b7e:	44bc      	add	ip, r7
   15b80:	4463      	add	r3, ip
   15b82:	2201      	movs	r2, #1
   15b84:	701a      	strb	r2, [r3, #0]
			
			if(response_sms_processed_cmd == true)
   15b86:	4b65      	ldr	r3, [pc, #404]	; (15d1c <processOnSMS+0x1090>)
   15b88:	2294      	movs	r2, #148	; 0x94
   15b8a:	0052      	lsls	r2, r2, #1
   15b8c:	4694      	mov	ip, r2
   15b8e:	2208      	movs	r2, #8
   15b90:	4690      	mov	r8, r2
   15b92:	44b8      	add	r8, r7
   15b94:	44c4      	add	ip, r8
   15b96:	4463      	add	r3, ip
   15b98:	781b      	ldrb	r3, [r3, #0]
   15b9a:	2b00      	cmp	r3, #0
   15b9c:	d101      	bne.n	15ba2 <processOnSMS+0xf16>
   15b9e:	f000 ffed 	bl	16b7c <processOnSMS+0x1ef0>
			{
				strcpy(resep_msg,"PREVENT OVERFLOW SETTING ON");
   15ba2:	230c      	movs	r3, #12
   15ba4:	2208      	movs	r2, #8
   15ba6:	4694      	mov	ip, r2
   15ba8:	44bc      	add	ip, r7
   15baa:	4463      	add	r3, ip
   15bac:	4a68      	ldr	r2, [pc, #416]	; (15d50 <processOnSMS+0x10c4>)
   15bae:	ca13      	ldmia	r2!, {r0, r1, r4}
   15bb0:	c313      	stmia	r3!, {r0, r1, r4}
   15bb2:	ca13      	ldmia	r2!, {r0, r1, r4}
   15bb4:	c313      	stmia	r3!, {r0, r1, r4}
   15bb6:	6812      	ldr	r2, [r2, #0]
   15bb8:	601a      	str	r2, [r3, #0]
   15bba:	f000 ffdf 	bl	16b7c <processOnSMS+0x1ef0>
			}
		}
	}
	else if (StringstartsWith(received_command,"OVFOFF"))
   15bbe:	4a65      	ldr	r2, [pc, #404]	; (15d54 <processOnSMS+0x10c8>)
   15bc0:	68fb      	ldr	r3, [r7, #12]
   15bc2:	0011      	movs	r1, r2
   15bc4:	0018      	movs	r0, r3
   15bc6:	4b50      	ldr	r3, [pc, #320]	; (15d08 <processOnSMS+0x107c>)
   15bc8:	4798      	blx	r3
   15bca:	1e03      	subs	r3, r0, #0
   15bcc:	d034      	beq.n	15c38 <processOnSMS+0xfac>
	{
		if (factory_settings_parameter_struct.ENABLE_WATER && !(factory_settings_parameter_struct.ENABLE_M2M))
   15bce:	4b59      	ldr	r3, [pc, #356]	; (15d34 <processOnSMS+0x10a8>)
   15bd0:	795b      	ldrb	r3, [r3, #5]
   15bd2:	2b00      	cmp	r3, #0
   15bd4:	d101      	bne.n	15bda <processOnSMS+0xf4e>
   15bd6:	f000 ffd1 	bl	16b7c <processOnSMS+0x1ef0>
   15bda:	4b56      	ldr	r3, [pc, #344]	; (15d34 <processOnSMS+0x10a8>)
   15bdc:	78db      	ldrb	r3, [r3, #3]
   15bde:	2b00      	cmp	r3, #0
   15be0:	d001      	beq.n	15be6 <processOnSMS+0xf5a>
   15be2:	f000 ffcb 	bl	16b7c <processOnSMS+0x1ef0>
		{
			savePreventOverFlowSettings(false);  //set DND to False in EEPROM
   15be6:	2000      	movs	r0, #0
   15be8:	4b58      	ldr	r3, [pc, #352]	; (15d4c <processOnSMS+0x10c0>)
   15bea:	4798      	blx	r3

			incomingSMSProcessed=true;
   15bec:	2328      	movs	r3, #40	; 0x28
   15bee:	33ff      	adds	r3, #255	; 0xff
   15bf0:	2208      	movs	r2, #8
   15bf2:	4694      	mov	ip, r2
   15bf4:	44bc      	add	ip, r7
   15bf6:	4463      	add	r3, ip
   15bf8:	2201      	movs	r2, #1
   15bfa:	701a      	strb	r2, [r3, #0]

			if(response_sms_processed_cmd == true)
   15bfc:	4b47      	ldr	r3, [pc, #284]	; (15d1c <processOnSMS+0x1090>)
   15bfe:	2294      	movs	r2, #148	; 0x94
   15c00:	0052      	lsls	r2, r2, #1
   15c02:	4694      	mov	ip, r2
   15c04:	2208      	movs	r2, #8
   15c06:	4690      	mov	r8, r2
   15c08:	44b8      	add	r8, r7
   15c0a:	44c4      	add	ip, r8
   15c0c:	4463      	add	r3, ip
   15c0e:	781b      	ldrb	r3, [r3, #0]
   15c10:	2b00      	cmp	r3, #0
   15c12:	d101      	bne.n	15c18 <processOnSMS+0xf8c>
   15c14:	f000 ffb2 	bl	16b7c <processOnSMS+0x1ef0>
			{
				strcpy(resep_msg,"PREVENT OVERFLOW SETTING OFF");
   15c18:	230c      	movs	r3, #12
   15c1a:	2208      	movs	r2, #8
   15c1c:	4694      	mov	ip, r2
   15c1e:	44bc      	add	ip, r7
   15c20:	4463      	add	r3, ip
   15c22:	4a4d      	ldr	r2, [pc, #308]	; (15d58 <processOnSMS+0x10cc>)
   15c24:	ca13      	ldmia	r2!, {r0, r1, r4}
   15c26:	c313      	stmia	r3!, {r0, r1, r4}
   15c28:	ca13      	ldmia	r2!, {r0, r1, r4}
   15c2a:	c313      	stmia	r3!, {r0, r1, r4}
   15c2c:	6811      	ldr	r1, [r2, #0]
   15c2e:	6019      	str	r1, [r3, #0]
   15c30:	7912      	ldrb	r2, [r2, #4]
   15c32:	711a      	strb	r2, [r3, #4]
   15c34:	f000 ffa2 	bl	16b7c <processOnSMS+0x1ef0>
			}
		}
	}
	else if (StringstartsWith(received_command,"M2MON"))
   15c38:	4a48      	ldr	r2, [pc, #288]	; (15d5c <processOnSMS+0x10d0>)
   15c3a:	68fb      	ldr	r3, [r7, #12]
   15c3c:	0011      	movs	r1, r2
   15c3e:	0018      	movs	r0, r3
   15c40:	4b31      	ldr	r3, [pc, #196]	; (15d08 <processOnSMS+0x107c>)
   15c42:	4798      	blx	r3
   15c44:	1e03      	subs	r3, r0, #0
   15c46:	d100      	bne.n	15c4a <processOnSMS+0xfbe>
   15c48:	e092      	b.n	15d70 <processOnSMS+0x10e4>
	{
		if (factory_settings_parameter_struct.ENABLE_M2M)
   15c4a:	4b3a      	ldr	r3, [pc, #232]	; (15d34 <processOnSMS+0x10a8>)
   15c4c:	78db      	ldrb	r3, [r3, #3]
   15c4e:	2b00      	cmp	r3, #0
   15c50:	d101      	bne.n	15c56 <processOnSMS+0xfca>
   15c52:	f000 ff93 	bl	16b7c <processOnSMS+0x1ef0>
		{
			incomingSMSProcessed=true;
   15c56:	2328      	movs	r3, #40	; 0x28
   15c58:	33ff      	adds	r3, #255	; 0xff
   15c5a:	2208      	movs	r2, #8
   15c5c:	4694      	mov	ip, r2
   15c5e:	44bc      	add	ip, r7
   15c60:	4463      	add	r3, ip
   15c62:	2201      	movs	r2, #1
   15c64:	701a      	strb	r2, [r3, #0]
			
			if(m2m_Numbers_struct.m2mRemotePresent)
   15c66:	4b3e      	ldr	r3, [pc, #248]	; (15d60 <processOnSMS+0x10d4>)
   15c68:	78db      	ldrb	r3, [r3, #3]
   15c6a:	2b00      	cmp	r3, #0
   15c6c:	d02f      	beq.n	15cce <processOnSMS+0x1042>
			{
				if(!m2m_Numbers_struct.m2mRemoteVerified)
   15c6e:	4b3c      	ldr	r3, [pc, #240]	; (15d60 <processOnSMS+0x10d4>)
   15c70:	791b      	ldrb	r3, [r3, #4]
   15c72:	2b00      	cmp	r3, #0
   15c74:	d10e      	bne.n	15c94 <processOnSMS+0x1008>
				{
					response_sms_processed_cmd = false;
   15c76:	4b29      	ldr	r3, [pc, #164]	; (15d1c <processOnSMS+0x1090>)
   15c78:	2294      	movs	r2, #148	; 0x94
   15c7a:	0052      	lsls	r2, r2, #1
   15c7c:	4694      	mov	ip, r2
   15c7e:	2208      	movs	r2, #8
   15c80:	4690      	mov	r8, r2
   15c82:	44b8      	add	r8, r7
   15c84:	44c4      	add	ip, r8
   15c86:	4463      	add	r3, ip
   15c88:	2200      	movs	r2, #0
   15c8a:	701a      	strb	r2, [r3, #0]
					verifyRemoteNumber();
   15c8c:	4b35      	ldr	r3, [pc, #212]	; (15d64 <processOnSMS+0x10d8>)
   15c8e:	4798      	blx	r3
   15c90:	f000 ff74 	bl	16b7c <processOnSMS+0x1ef0>
				}
				else
				{
					response_sms_processed_cmd = true;
   15c94:	4b21      	ldr	r3, [pc, #132]	; (15d1c <processOnSMS+0x1090>)
   15c96:	2294      	movs	r2, #148	; 0x94
   15c98:	0052      	lsls	r2, r2, #1
   15c9a:	4694      	mov	ip, r2
   15c9c:	2208      	movs	r2, #8
   15c9e:	4690      	mov	r8, r2
   15ca0:	44b8      	add	r8, r7
   15ca2:	44c4      	add	ip, r8
   15ca4:	4463      	add	r3, ip
   15ca6:	2201      	movs	r2, #1
   15ca8:	701a      	strb	r2, [r3, #0]
					strcpy(resep_msg,"M2M Turned On, Remote Number Already Verified");
   15caa:	230c      	movs	r3, #12
   15cac:	2208      	movs	r2, #8
   15cae:	4694      	mov	ip, r2
   15cb0:	44bc      	add	ip, r7
   15cb2:	4463      	add	r3, ip
   15cb4:	4a2c      	ldr	r2, [pc, #176]	; (15d68 <processOnSMS+0x10dc>)
   15cb6:	ca13      	ldmia	r2!, {r0, r1, r4}
   15cb8:	c313      	stmia	r3!, {r0, r1, r4}
   15cba:	ca13      	ldmia	r2!, {r0, r1, r4}
   15cbc:	c313      	stmia	r3!, {r0, r1, r4}
   15cbe:	ca13      	ldmia	r2!, {r0, r1, r4}
   15cc0:	c313      	stmia	r3!, {r0, r1, r4}
   15cc2:	ca03      	ldmia	r2!, {r0, r1}
   15cc4:	c303      	stmia	r3!, {r0, r1}
   15cc6:	8812      	ldrh	r2, [r2, #0]
   15cc8:	801a      	strh	r2, [r3, #0]
   15cca:	f000 ff57 	bl	16b7c <processOnSMS+0x1ef0>
				}
			}
			else
			{
				response_sms_processed_cmd=true;
   15cce:	4b13      	ldr	r3, [pc, #76]	; (15d1c <processOnSMS+0x1090>)
   15cd0:	2294      	movs	r2, #148	; 0x94
   15cd2:	0052      	lsls	r2, r2, #1
   15cd4:	4694      	mov	ip, r2
   15cd6:	2208      	movs	r2, #8
   15cd8:	4690      	mov	r8, r2
   15cda:	44b8      	add	r8, r7
   15cdc:	44c4      	add	ip, r8
   15cde:	4463      	add	r3, ip
   15ce0:	2201      	movs	r2, #1
   15ce2:	701a      	strb	r2, [r3, #0]
				strcpy(resep_msg,"Error: M2M Remote Number Not Present");
   15ce4:	230c      	movs	r3, #12
   15ce6:	2208      	movs	r2, #8
   15ce8:	4694      	mov	ip, r2
   15cea:	44bc      	add	ip, r7
   15cec:	4463      	add	r3, ip
   15cee:	4a1f      	ldr	r2, [pc, #124]	; (15d6c <processOnSMS+0x10e0>)
   15cf0:	ca13      	ldmia	r2!, {r0, r1, r4}
   15cf2:	c313      	stmia	r3!, {r0, r1, r4}
   15cf4:	ca13      	ldmia	r2!, {r0, r1, r4}
   15cf6:	c313      	stmia	r3!, {r0, r1, r4}
   15cf8:	ca13      	ldmia	r2!, {r0, r1, r4}
   15cfa:	c313      	stmia	r3!, {r0, r1, r4}
   15cfc:	7812      	ldrb	r2, [r2, #0]
   15cfe:	701a      	strb	r2, [r3, #0]
   15d00:	f000 ff3c 	bl	16b7c <processOnSMS+0x1ef0>
   15d04:	00029e28 	.word	0x00029e28
   15d08:	00013eed 	.word	0x00013eed
   15d0c:	00028c8b 	.word	0x00028c8b
   15d10:	000289d7 	.word	0x000289d7
   15d14:	000288e1 	.word	0x000288e1
   15d18:	000114e5 	.word	0x000114e5
   15d1c:	fffffeda 	.word	0xfffffeda
   15d20:	00029e2c 	.word	0x00029e2c
   15d24:	00029e38 	.word	0x00029e38
   15d28:	0001154d 	.word	0x0001154d
   15d2c:	00029e40 	.word	0x00029e40
   15d30:	00029e4c 	.word	0x00029e4c
   15d34:	20000638 	.word	0x20000638
   15d38:	200006e4 	.word	0x200006e4
   15d3c:	20000660 	.word	0x20000660
   15d40:	00029e54 	.word	0x00029e54
   15d44:	00028c01 	.word	0x00028c01
   15d48:	00029e78 	.word	0x00029e78
   15d4c:	00011499 	.word	0x00011499
   15d50:	00029e80 	.word	0x00029e80
   15d54:	00029e9c 	.word	0x00029e9c
   15d58:	00029ea4 	.word	0x00029ea4
   15d5c:	00029ec4 	.word	0x00029ec4
   15d60:	20000564 	.word	0x20000564
   15d64:	00016e51 	.word	0x00016e51
   15d68:	00029ecc 	.word	0x00029ecc
   15d6c:	00029efc 	.word	0x00029efc
			}
		}
	}
	else if (StringstartsWith(received_command,"M2MOFF"))
   15d70:	4ab3      	ldr	r2, [pc, #716]	; (16040 <processOnSMS+0x13b4>)
   15d72:	68fb      	ldr	r3, [r7, #12]
   15d74:	0011      	movs	r1, r2
   15d76:	0018      	movs	r0, r3
   15d78:	4bb2      	ldr	r3, [pc, #712]	; (16044 <processOnSMS+0x13b8>)
   15d7a:	4798      	blx	r3
   15d7c:	1e03      	subs	r3, r0, #0
   15d7e:	d02a      	beq.n	15dd6 <processOnSMS+0x114a>
	{
		if (factory_settings_parameter_struct.ENABLE_M2M)
   15d80:	4bb1      	ldr	r3, [pc, #708]	; (16048 <processOnSMS+0x13bc>)
   15d82:	78db      	ldrb	r3, [r3, #3]
   15d84:	2b00      	cmp	r3, #0
   15d86:	d101      	bne.n	15d8c <processOnSMS+0x1100>
   15d88:	f000 fef8 	bl	16b7c <processOnSMS+0x1ef0>
		{
			incomingSMSProcessed=true;
   15d8c:	2328      	movs	r3, #40	; 0x28
   15d8e:	33ff      	adds	r3, #255	; 0xff
   15d90:	2208      	movs	r2, #8
   15d92:	4694      	mov	ip, r2
   15d94:	44bc      	add	ip, r7
   15d96:	4463      	add	r3, ip
   15d98:	2201      	movs	r2, #1
   15d9a:	701a      	strb	r2, [r3, #0]
			
			saveM2MSettings(false);
   15d9c:	2000      	movs	r0, #0
   15d9e:	4bab      	ldr	r3, [pc, #684]	; (1604c <processOnSMS+0x13c0>)
   15da0:	4798      	blx	r3
			if(response_sms_processed_cmd == true)
   15da2:	4bab      	ldr	r3, [pc, #684]	; (16050 <processOnSMS+0x13c4>)
   15da4:	2294      	movs	r2, #148	; 0x94
   15da6:	0052      	lsls	r2, r2, #1
   15da8:	4694      	mov	ip, r2
   15daa:	2208      	movs	r2, #8
   15dac:	4690      	mov	r8, r2
   15dae:	44b8      	add	r8, r7
   15db0:	44c4      	add	ip, r8
   15db2:	4463      	add	r3, ip
   15db4:	781b      	ldrb	r3, [r3, #0]
   15db6:	2b00      	cmp	r3, #0
   15db8:	d101      	bne.n	15dbe <processOnSMS+0x1132>
   15dba:	f000 fedf 	bl	16b7c <processOnSMS+0x1ef0>
			{
				strcpy(resep_msg,"M2M SETTING OFF");
   15dbe:	230c      	movs	r3, #12
   15dc0:	2208      	movs	r2, #8
   15dc2:	4694      	mov	ip, r2
   15dc4:	44bc      	add	ip, r7
   15dc6:	4463      	add	r3, ip
   15dc8:	4aa2      	ldr	r2, [pc, #648]	; (16054 <processOnSMS+0x13c8>)
   15dca:	ca13      	ldmia	r2!, {r0, r1, r4}
   15dcc:	c313      	stmia	r3!, {r0, r1, r4}
   15dce:	6812      	ldr	r2, [r2, #0]
   15dd0:	601a      	str	r2, [r3, #0]
   15dd2:	f000 fed3 	bl	16b7c <processOnSMS+0x1ef0>
			}
		}
	}
	else if (StringstartsWith(received_command,"STATUS"))
   15dd6:	4aa0      	ldr	r2, [pc, #640]	; (16058 <processOnSMS+0x13cc>)
   15dd8:	68fb      	ldr	r3, [r7, #12]
   15dda:	0011      	movs	r1, r2
   15ddc:	0018      	movs	r0, r3
   15dde:	4b99      	ldr	r3, [pc, #612]	; (16044 <processOnSMS+0x13b8>)
   15de0:	4798      	blx	r3
   15de2:	1e03      	subs	r3, r0, #0
   15de4:	d01c      	beq.n	15e20 <processOnSMS+0x1194>
	{
		incomingSMSProcessed=true;
   15de6:	2328      	movs	r3, #40	; 0x28
   15de8:	33ff      	adds	r3, #255	; 0xff
   15dea:	2208      	movs	r2, #8
   15dec:	4694      	mov	ip, r2
   15dee:	44bc      	add	ip, r7
   15df0:	4463      	add	r3, ip
   15df2:	2201      	movs	r2, #1
   15df4:	701a      	strb	r2, [r3, #0]
		response_sms_processed_cmd=true;
   15df6:	4b96      	ldr	r3, [pc, #600]	; (16050 <processOnSMS+0x13c4>)
   15df8:	2294      	movs	r2, #148	; 0x94
   15dfa:	0052      	lsls	r2, r2, #1
   15dfc:	4694      	mov	ip, r2
   15dfe:	2208      	movs	r2, #8
   15e00:	4690      	mov	r8, r2
   15e02:	44b8      	add	r8, r7
   15e04:	44c4      	add	ip, r8
   15e06:	4463      	add	r3, ip
   15e08:	2201      	movs	r2, #1
   15e0a:	701a      	strb	r2, [r3, #0]
		
		buildStatusMessage(&resep_msg);
   15e0c:	230c      	movs	r3, #12
   15e0e:	2208      	movs	r2, #8
   15e10:	4694      	mov	ip, r2
   15e12:	44bc      	add	ip, r7
   15e14:	4463      	add	r3, ip
   15e16:	0018      	movs	r0, r3
   15e18:	4b90      	ldr	r3, [pc, #576]	; (1605c <processOnSMS+0x13d0>)
   15e1a:	4798      	blx	r3
   15e1c:	f000 feae 	bl	16b7c <processOnSMS+0x1ef0>
	}
	else if (StringstartsWith(received_command,"AMON") && (admin || alterNumber))
   15e20:	4a8f      	ldr	r2, [pc, #572]	; (16060 <processOnSMS+0x13d4>)
   15e22:	68fb      	ldr	r3, [r7, #12]
   15e24:	0011      	movs	r1, r2
   15e26:	0018      	movs	r0, r3
   15e28:	4b86      	ldr	r3, [pc, #536]	; (16044 <processOnSMS+0x13b8>)
   15e2a:	4798      	blx	r3
   15e2c:	1e03      	subs	r3, r0, #0
   15e2e:	d05e      	beq.n	15eee <processOnSMS+0x1262>
   15e30:	4b8c      	ldr	r3, [pc, #560]	; (16064 <processOnSMS+0x13d8>)
   15e32:	2294      	movs	r2, #148	; 0x94
   15e34:	0052      	lsls	r2, r2, #1
   15e36:	4694      	mov	ip, r2
   15e38:	2208      	movs	r2, #8
   15e3a:	4690      	mov	r8, r2
   15e3c:	44b8      	add	r8, r7
   15e3e:	44c4      	add	ip, r8
   15e40:	4463      	add	r3, ip
   15e42:	781b      	ldrb	r3, [r3, #0]
   15e44:	2b00      	cmp	r3, #0
   15e46:	d10b      	bne.n	15e60 <processOnSMS+0x11d4>
   15e48:	4b87      	ldr	r3, [pc, #540]	; (16068 <processOnSMS+0x13dc>)
   15e4a:	2294      	movs	r2, #148	; 0x94
   15e4c:	0052      	lsls	r2, r2, #1
   15e4e:	4694      	mov	ip, r2
   15e50:	2208      	movs	r2, #8
   15e52:	4690      	mov	r8, r2
   15e54:	44b8      	add	r8, r7
   15e56:	44c4      	add	ip, r8
   15e58:	4463      	add	r3, ip
   15e5a:	781b      	ldrb	r3, [r3, #0]
   15e5c:	2b00      	cmp	r3, #0
   15e5e:	d046      	beq.n	15eee <processOnSMS+0x1262>
	{
		incomingSMSProcessed=true;
   15e60:	2328      	movs	r3, #40	; 0x28
   15e62:	33ff      	adds	r3, #255	; 0xff
   15e64:	2208      	movs	r2, #8
   15e66:	4694      	mov	ip, r2
   15e68:	44bc      	add	ip, r7
   15e6a:	4463      	add	r3, ip
   15e6c:	2201      	movs	r2, #1
   15e6e:	701a      	strb	r2, [r3, #0]
		
		if (alternateNumber_struct.alterNumberPresent)
   15e70:	4b7e      	ldr	r3, [pc, #504]	; (1606c <processOnSMS+0x13e0>)
   15e72:	789b      	ldrb	r3, [r3, #2]
   15e74:	2b00      	cmp	r3, #0
   15e76:	d01c      	beq.n	15eb2 <processOnSMS+0x1226>
		{
			saveAlterNumberSetting(true);
   15e78:	2001      	movs	r0, #1
   15e7a:	4b7d      	ldr	r3, [pc, #500]	; (16070 <processOnSMS+0x13e4>)
   15e7c:	4798      	blx	r3
			if(response_sms_processed_cmd == true)
   15e7e:	4b74      	ldr	r3, [pc, #464]	; (16050 <processOnSMS+0x13c4>)
   15e80:	2294      	movs	r2, #148	; 0x94
   15e82:	0052      	lsls	r2, r2, #1
   15e84:	4694      	mov	ip, r2
   15e86:	2208      	movs	r2, #8
   15e88:	4690      	mov	r8, r2
   15e8a:	44b8      	add	r8, r7
   15e8c:	44c4      	add	ip, r8
   15e8e:	4463      	add	r3, ip
   15e90:	781b      	ldrb	r3, [r3, #0]
   15e92:	2b00      	cmp	r3, #0
   15e94:	d101      	bne.n	15e9a <processOnSMS+0x120e>
   15e96:	f000 fe70 	bl	16b7a <processOnSMS+0x1eee>
			{
				strcpy(resep_msg,"ALTERNATE NUMBER ON");
   15e9a:	230c      	movs	r3, #12
   15e9c:	2208      	movs	r2, #8
   15e9e:	4694      	mov	ip, r2
   15ea0:	44bc      	add	ip, r7
   15ea2:	4463      	add	r3, ip
   15ea4:	4a73      	ldr	r2, [pc, #460]	; (16074 <processOnSMS+0x13e8>)
   15ea6:	ca13      	ldmia	r2!, {r0, r1, r4}
   15ea8:	c313      	stmia	r3!, {r0, r1, r4}
   15eaa:	ca03      	ldmia	r2!, {r0, r1}
   15eac:	c303      	stmia	r3!, {r0, r1}
		if (alternateNumber_struct.alterNumberPresent)
   15eae:	f000 fe64 	bl	16b7a <processOnSMS+0x1eee>
			}
		}
		else
		{
			if(response_sms_processed_cmd == true)
   15eb2:	4b67      	ldr	r3, [pc, #412]	; (16050 <processOnSMS+0x13c4>)
   15eb4:	2294      	movs	r2, #148	; 0x94
   15eb6:	0052      	lsls	r2, r2, #1
   15eb8:	4694      	mov	ip, r2
   15eba:	2208      	movs	r2, #8
   15ebc:	4690      	mov	r8, r2
   15ebe:	44b8      	add	r8, r7
   15ec0:	44c4      	add	ip, r8
   15ec2:	4463      	add	r3, ip
   15ec4:	781b      	ldrb	r3, [r3, #0]
   15ec6:	2b00      	cmp	r3, #0
   15ec8:	d101      	bne.n	15ece <processOnSMS+0x1242>
   15eca:	f000 fe56 	bl	16b7a <processOnSMS+0x1eee>
			{
				strcpy(resep_msg,"ALTERNATE NUMBER NOT PRESENT");
   15ece:	230c      	movs	r3, #12
   15ed0:	2208      	movs	r2, #8
   15ed2:	4694      	mov	ip, r2
   15ed4:	44bc      	add	ip, r7
   15ed6:	4463      	add	r3, ip
   15ed8:	4a67      	ldr	r2, [pc, #412]	; (16078 <processOnSMS+0x13ec>)
   15eda:	ca13      	ldmia	r2!, {r0, r1, r4}
   15edc:	c313      	stmia	r3!, {r0, r1, r4}
   15ede:	ca13      	ldmia	r2!, {r0, r1, r4}
   15ee0:	c313      	stmia	r3!, {r0, r1, r4}
   15ee2:	6811      	ldr	r1, [r2, #0]
   15ee4:	6019      	str	r1, [r3, #0]
   15ee6:	7912      	ldrb	r2, [r2, #4]
   15ee8:	711a      	strb	r2, [r3, #4]
		if (alternateNumber_struct.alterNumberPresent)
   15eea:	f000 fe46 	bl	16b7a <processOnSMS+0x1eee>
			}
		}
	}
	else if (StringstartsWith(received_command,"AMOFF"))
   15eee:	4a63      	ldr	r2, [pc, #396]	; (1607c <processOnSMS+0x13f0>)
   15ef0:	68fb      	ldr	r3, [r7, #12]
   15ef2:	0011      	movs	r1, r2
   15ef4:	0018      	movs	r0, r3
   15ef6:	4b53      	ldr	r3, [pc, #332]	; (16044 <processOnSMS+0x13b8>)
   15ef8:	4798      	blx	r3
   15efa:	1e03      	subs	r3, r0, #0
   15efc:	d026      	beq.n	15f4c <processOnSMS+0x12c0>
	{
		saveAlterNumberSetting(false);
   15efe:	2000      	movs	r0, #0
   15f00:	4b5b      	ldr	r3, [pc, #364]	; (16070 <processOnSMS+0x13e4>)
   15f02:	4798      	blx	r3
		incomingSMSProcessed=true;
   15f04:	2328      	movs	r3, #40	; 0x28
   15f06:	33ff      	adds	r3, #255	; 0xff
   15f08:	2208      	movs	r2, #8
   15f0a:	4694      	mov	ip, r2
   15f0c:	44bc      	add	ip, r7
   15f0e:	4463      	add	r3, ip
   15f10:	2201      	movs	r2, #1
   15f12:	701a      	strb	r2, [r3, #0]
		
		if (response_sms_processed_cmd == true)
   15f14:	4b4e      	ldr	r3, [pc, #312]	; (16050 <processOnSMS+0x13c4>)
   15f16:	2294      	movs	r2, #148	; 0x94
   15f18:	0052      	lsls	r2, r2, #1
   15f1a:	4694      	mov	ip, r2
   15f1c:	2208      	movs	r2, #8
   15f1e:	4690      	mov	r8, r2
   15f20:	44b8      	add	r8, r7
   15f22:	44c4      	add	ip, r8
   15f24:	4463      	add	r3, ip
   15f26:	781b      	ldrb	r3, [r3, #0]
   15f28:	2b00      	cmp	r3, #0
   15f2a:	d101      	bne.n	15f30 <processOnSMS+0x12a4>
   15f2c:	f000 fe26 	bl	16b7c <processOnSMS+0x1ef0>
		{
			strcpy(resep_msg,"ALTERNATE MOBILE NUMBER OFF");
   15f30:	230c      	movs	r3, #12
   15f32:	2208      	movs	r2, #8
   15f34:	4694      	mov	ip, r2
   15f36:	44bc      	add	ip, r7
   15f38:	4463      	add	r3, ip
   15f3a:	4a51      	ldr	r2, [pc, #324]	; (16080 <processOnSMS+0x13f4>)
   15f3c:	ca13      	ldmia	r2!, {r0, r1, r4}
   15f3e:	c313      	stmia	r3!, {r0, r1, r4}
   15f40:	ca13      	ldmia	r2!, {r0, r1, r4}
   15f42:	c313      	stmia	r3!, {r0, r1, r4}
   15f44:	6812      	ldr	r2, [r2, #0]
   15f46:	601a      	str	r2, [r3, #0]
   15f48:	f000 fe18 	bl	16b7c <processOnSMS+0x1ef0>
		}
	}
	else if (StringstartsWith(received_command,"NCOFF"))
   15f4c:	4a4d      	ldr	r2, [pc, #308]	; (16084 <processOnSMS+0x13f8>)
   15f4e:	68fb      	ldr	r3, [r7, #12]
   15f50:	0011      	movs	r1, r2
   15f52:	0018      	movs	r0, r3
   15f54:	4b3b      	ldr	r3, [pc, #236]	; (16044 <processOnSMS+0x13b8>)
   15f56:	4798      	blx	r3
   15f58:	1e03      	subs	r3, r0, #0
   15f5a:	d029      	beq.n	15fb0 <processOnSMS+0x1324>
	{
		saveNoCallSettings(false,0,0,0,0);
   15f5c:	2300      	movs	r3, #0
   15f5e:	9300      	str	r3, [sp, #0]
   15f60:	2300      	movs	r3, #0
   15f62:	2200      	movs	r2, #0
   15f64:	2100      	movs	r1, #0
   15f66:	2000      	movs	r0, #0
   15f68:	4c47      	ldr	r4, [pc, #284]	; (16088 <processOnSMS+0x13fc>)
   15f6a:	47a0      	blx	r4
		incomingSMSProcessed=true;
   15f6c:	2328      	movs	r3, #40	; 0x28
   15f6e:	33ff      	adds	r3, #255	; 0xff
   15f70:	2208      	movs	r2, #8
   15f72:	4694      	mov	ip, r2
   15f74:	44bc      	add	ip, r7
   15f76:	4463      	add	r3, ip
   15f78:	2201      	movs	r2, #1
   15f7a:	701a      	strb	r2, [r3, #0]

		if (response_sms_processed_cmd == true)
   15f7c:	4b34      	ldr	r3, [pc, #208]	; (16050 <processOnSMS+0x13c4>)
   15f7e:	2294      	movs	r2, #148	; 0x94
   15f80:	0052      	lsls	r2, r2, #1
   15f82:	4694      	mov	ip, r2
   15f84:	2208      	movs	r2, #8
   15f86:	4690      	mov	r8, r2
   15f88:	44b8      	add	r8, r7
   15f8a:	44c4      	add	ip, r8
   15f8c:	4463      	add	r3, ip
   15f8e:	781b      	ldrb	r3, [r3, #0]
   15f90:	2b00      	cmp	r3, #0
   15f92:	d101      	bne.n	15f98 <processOnSMS+0x130c>
   15f94:	f000 fdf2 	bl	16b7c <processOnSMS+0x1ef0>
		{
			strcpy(resep_msg,"NO CALL SETTING OFF");
   15f98:	230c      	movs	r3, #12
   15f9a:	2208      	movs	r2, #8
   15f9c:	4694      	mov	ip, r2
   15f9e:	44bc      	add	ip, r7
   15fa0:	4463      	add	r3, ip
   15fa2:	4a3a      	ldr	r2, [pc, #232]	; (1608c <processOnSMS+0x1400>)
   15fa4:	ca13      	ldmia	r2!, {r0, r1, r4}
   15fa6:	c313      	stmia	r3!, {r0, r1, r4}
   15fa8:	ca03      	ldmia	r2!, {r0, r1}
   15faa:	c303      	stmia	r3!, {r0, r1}
   15fac:	f000 fde6 	bl	16b7c <processOnSMS+0x1ef0>
		}
	}
	else if (StringstartsWith(received_command,"GETTIME"))
   15fb0:	4a37      	ldr	r2, [pc, #220]	; (16090 <processOnSMS+0x1404>)
   15fb2:	68fb      	ldr	r3, [r7, #12]
   15fb4:	0011      	movs	r1, r2
   15fb6:	0018      	movs	r0, r3
   15fb8:	4b22      	ldr	r3, [pc, #136]	; (16044 <processOnSMS+0x13b8>)
   15fba:	4798      	blx	r3
   15fbc:	1e03      	subs	r3, r0, #0
   15fbe:	d073      	beq.n	160a8 <processOnSMS+0x141c>
	{
		uint8_t globalHours,globalMinutes;
		getSystemTime(&globalHours,&globalMinutes);
   15fc0:	230a      	movs	r3, #10
   15fc2:	2208      	movs	r2, #8
   15fc4:	18ba      	adds	r2, r7, r2
   15fc6:	18d2      	adds	r2, r2, r3
   15fc8:	230b      	movs	r3, #11
   15fca:	2108      	movs	r1, #8
   15fcc:	468c      	mov	ip, r1
   15fce:	44bc      	add	ip, r7
   15fd0:	4463      	add	r3, ip
   15fd2:	0011      	movs	r1, r2
   15fd4:	0018      	movs	r0, r3
   15fd6:	4b2f      	ldr	r3, [pc, #188]	; (16094 <processOnSMS+0x1408>)
   15fd8:	4798      	blx	r3
		
		sprintf(resep_msg,"TIME : %u:%u",
   15fda:	4b2f      	ldr	r3, [pc, #188]	; (16098 <processOnSMS+0x140c>)
   15fdc:	2294      	movs	r2, #148	; 0x94
   15fde:	0052      	lsls	r2, r2, #1
   15fe0:	4694      	mov	ip, r2
   15fe2:	2208      	movs	r2, #8
   15fe4:	4690      	mov	r8, r2
   15fe6:	44b8      	add	r8, r7
   15fe8:	44c4      	add	ip, r8
   15fea:	4463      	add	r3, ip
   15fec:	781b      	ldrb	r3, [r3, #0]
   15fee:	001a      	movs	r2, r3
   15ff0:	4b2a      	ldr	r3, [pc, #168]	; (1609c <processOnSMS+0x1410>)
   15ff2:	2194      	movs	r1, #148	; 0x94
   15ff4:	0049      	lsls	r1, r1, #1
   15ff6:	468c      	mov	ip, r1
   15ff8:	2108      	movs	r1, #8
   15ffa:	4688      	mov	r8, r1
   15ffc:	44b8      	add	r8, r7
   15ffe:	44c4      	add	ip, r8
   16000:	4463      	add	r3, ip
   16002:	781b      	ldrb	r3, [r3, #0]
   16004:	4926      	ldr	r1, [pc, #152]	; (160a0 <processOnSMS+0x1414>)
   16006:	200c      	movs	r0, #12
   16008:	2408      	movs	r4, #8
   1600a:	46a4      	mov	ip, r4
   1600c:	44bc      	add	ip, r7
   1600e:	4460      	add	r0, ip
   16010:	4c24      	ldr	r4, [pc, #144]	; (160a4 <processOnSMS+0x1418>)
   16012:	47a0      	blx	r4
		globalHours,globalMinutes);

		incomingSMSProcessed=true;
   16014:	2328      	movs	r3, #40	; 0x28
   16016:	33ff      	adds	r3, #255	; 0xff
   16018:	2208      	movs	r2, #8
   1601a:	4694      	mov	ip, r2
   1601c:	44bc      	add	ip, r7
   1601e:	4463      	add	r3, ip
   16020:	2201      	movs	r2, #1
   16022:	701a      	strb	r2, [r3, #0]

		response_sms_processed_cmd = true;
   16024:	4b0a      	ldr	r3, [pc, #40]	; (16050 <processOnSMS+0x13c4>)
   16026:	2294      	movs	r2, #148	; 0x94
   16028:	0052      	lsls	r2, r2, #1
   1602a:	4694      	mov	ip, r2
   1602c:	2208      	movs	r2, #8
   1602e:	4690      	mov	r8, r2
   16030:	44b8      	add	r8, r7
   16032:	44c4      	add	ip, r8
   16034:	4463      	add	r3, ip
   16036:	2201      	movs	r2, #1
   16038:	701a      	strb	r2, [r3, #0]
   1603a:	f000 fd9f 	bl	16b7c <processOnSMS+0x1ef0>
   1603e:	46c0      	nop			; (mov r8, r8)
   16040:	00029f24 	.word	0x00029f24
   16044:	00013eed 	.word	0x00013eed
   16048:	20000638 	.word	0x20000638
   1604c:	00010bc9 	.word	0x00010bc9
   16050:	fffffeda 	.word	0xfffffeda
   16054:	00029f2c 	.word	0x00029f2c
   16058:	00029f3c 	.word	0x00029f3c
   1605c:	00016c45 	.word	0x00016c45
   16060:	00029c38 	.word	0x00029c38
   16064:	fffffedb 	.word	0xfffffedb
   16068:	fffffed9 	.word	0xfffffed9
   1606c:	20000648 	.word	0x20000648
   16070:	000111cd 	.word	0x000111cd
   16074:	00029f44 	.word	0x00029f44
   16078:	00029f58 	.word	0x00029f58
   1607c:	00029f78 	.word	0x00029f78
   16080:	00029f80 	.word	0x00029f80
   16084:	00029f9c 	.word	0x00029f9c
   16088:	000113bd 	.word	0x000113bd
   1608c:	00029fa4 	.word	0x00029fa4
   16090:	00029fb8 	.word	0x00029fb8
   16094:	00017089 	.word	0x00017089
   16098:	fffffee3 	.word	0xfffffee3
   1609c:	fffffee2 	.word	0xfffffee2
   160a0:	00029fc0 	.word	0x00029fc0
   160a4:	00028c01 	.word	0x00028c01
	}
	else if (StringstartsWith(received_command,"SETTIME"))
   160a8:	4ada      	ldr	r2, [pc, #872]	; (16414 <processOnSMS+0x1788>)
   160aa:	68fb      	ldr	r3, [r7, #12]
   160ac:	0011      	movs	r1, r2
   160ae:	0018      	movs	r0, r3
   160b0:	4bd9      	ldr	r3, [pc, #868]	; (16418 <processOnSMS+0x178c>)
   160b2:	4798      	blx	r3
   160b4:	1e03      	subs	r3, r0, #0
   160b6:	d001      	beq.n	160bc <processOnSMS+0x1430>
   160b8:	f000 fd60 	bl	16b7c <processOnSMS+0x1ef0>
		//todo: implement
		//set internal RTC of Either MCU or SIM800 to check no call time
		

	}
	else if (StringstartsWith(received_command,"NCTIME"))
   160bc:	4ad7      	ldr	r2, [pc, #860]	; (1641c <processOnSMS+0x1790>)
   160be:	68fb      	ldr	r3, [r7, #12]
   160c0:	0011      	movs	r1, r2
   160c2:	0018      	movs	r0, r3
   160c4:	4bd4      	ldr	r3, [pc, #848]	; (16418 <processOnSMS+0x178c>)
   160c6:	4798      	blx	r3
   160c8:	1e03      	subs	r3, r0, #0
   160ca:	d100      	bne.n	160ce <processOnSMS+0x1442>
   160cc:	e13c      	b.n	16348 <processOnSMS+0x16bc>
	{
		char *ptrclcc;
		uint8_t startHH, startMM, stopHH, stopMM;

		ptrclcc = strtok(received_command,"-");
   160ce:	4ad4      	ldr	r2, [pc, #848]	; (16420 <processOnSMS+0x1794>)
   160d0:	68fb      	ldr	r3, [r7, #12]
   160d2:	0011      	movs	r1, r2
   160d4:	0018      	movs	r0, r3
   160d6:	4bd3      	ldr	r3, [pc, #844]	; (16424 <processOnSMS+0x1798>)
   160d8:	4798      	blx	r3
   160da:	0003      	movs	r3, r0
   160dc:	2288      	movs	r2, #136	; 0x88
   160de:	0052      	lsls	r2, r2, #1
   160e0:	2108      	movs	r1, #8
   160e2:	468c      	mov	ip, r1
   160e4:	44bc      	add	ip, r7
   160e6:	4462      	add	r2, ip
   160e8:	6013      	str	r3, [r2, #0]
		ptrclcc = strtok(NULL,":");
   160ea:	4bcf      	ldr	r3, [pc, #828]	; (16428 <processOnSMS+0x179c>)
   160ec:	0019      	movs	r1, r3
   160ee:	2000      	movs	r0, #0
   160f0:	4bcc      	ldr	r3, [pc, #816]	; (16424 <processOnSMS+0x1798>)
   160f2:	4798      	blx	r3
   160f4:	0003      	movs	r3, r0
   160f6:	2288      	movs	r2, #136	; 0x88
   160f8:	0052      	lsls	r2, r2, #1
   160fa:	2108      	movs	r1, #8
   160fc:	468c      	mov	ip, r1
   160fe:	44bc      	add	ip, r7
   16100:	4462      	add	r2, ip
   16102:	6013      	str	r3, [r2, #0]
		startHH=atoi(*ptrclcc);
   16104:	2388      	movs	r3, #136	; 0x88
   16106:	005b      	lsls	r3, r3, #1
   16108:	2208      	movs	r2, #8
   1610a:	4694      	mov	ip, r2
   1610c:	44bc      	add	ip, r7
   1610e:	4463      	add	r3, ip
   16110:	681b      	ldr	r3, [r3, #0]
   16112:	781b      	ldrb	r3, [r3, #0]
   16114:	0018      	movs	r0, r3
   16116:	4bc5      	ldr	r3, [pc, #788]	; (1642c <processOnSMS+0x17a0>)
   16118:	4798      	blx	r3
   1611a:	0002      	movs	r2, r0
   1611c:	2310      	movs	r3, #16
   1611e:	33ff      	adds	r3, #255	; 0xff
   16120:	2108      	movs	r1, #8
   16122:	468c      	mov	ip, r1
   16124:	44bc      	add	ip, r7
   16126:	4463      	add	r3, ip
   16128:	701a      	strb	r2, [r3, #0]
		ptrclcc = strtok(NULL,"-");
   1612a:	4bbd      	ldr	r3, [pc, #756]	; (16420 <processOnSMS+0x1794>)
   1612c:	0019      	movs	r1, r3
   1612e:	2000      	movs	r0, #0
   16130:	4bbc      	ldr	r3, [pc, #752]	; (16424 <processOnSMS+0x1798>)
   16132:	4798      	blx	r3
   16134:	0003      	movs	r3, r0
   16136:	2288      	movs	r2, #136	; 0x88
   16138:	0052      	lsls	r2, r2, #1
   1613a:	2108      	movs	r1, #8
   1613c:	468c      	mov	ip, r1
   1613e:	44bc      	add	ip, r7
   16140:	4462      	add	r2, ip
   16142:	6013      	str	r3, [r2, #0]
		startMM=atoi(*ptrclcc);
   16144:	2388      	movs	r3, #136	; 0x88
   16146:	005b      	lsls	r3, r3, #1
   16148:	2208      	movs	r2, #8
   1614a:	4694      	mov	ip, r2
   1614c:	44bc      	add	ip, r7
   1614e:	4463      	add	r3, ip
   16150:	681b      	ldr	r3, [r3, #0]
   16152:	781b      	ldrb	r3, [r3, #0]
   16154:	0018      	movs	r0, r3
   16156:	4bb5      	ldr	r3, [pc, #724]	; (1642c <processOnSMS+0x17a0>)
   16158:	4798      	blx	r3
   1615a:	0002      	movs	r2, r0
   1615c:	2387      	movs	r3, #135	; 0x87
   1615e:	005b      	lsls	r3, r3, #1
   16160:	2108      	movs	r1, #8
   16162:	468c      	mov	ip, r1
   16164:	44bc      	add	ip, r7
   16166:	4463      	add	r3, ip
   16168:	701a      	strb	r2, [r3, #0]
		ptrclcc = strtok(NULL,":");
   1616a:	4baf      	ldr	r3, [pc, #700]	; (16428 <processOnSMS+0x179c>)
   1616c:	0019      	movs	r1, r3
   1616e:	2000      	movs	r0, #0
   16170:	4bac      	ldr	r3, [pc, #688]	; (16424 <processOnSMS+0x1798>)
   16172:	4798      	blx	r3
   16174:	0003      	movs	r3, r0
   16176:	2288      	movs	r2, #136	; 0x88
   16178:	0052      	lsls	r2, r2, #1
   1617a:	2108      	movs	r1, #8
   1617c:	468c      	mov	ip, r1
   1617e:	44bc      	add	ip, r7
   16180:	4462      	add	r2, ip
   16182:	6013      	str	r3, [r2, #0]
		stopHH=atoi(*ptrclcc);
   16184:	2388      	movs	r3, #136	; 0x88
   16186:	005b      	lsls	r3, r3, #1
   16188:	2208      	movs	r2, #8
   1618a:	4694      	mov	ip, r2
   1618c:	44bc      	add	ip, r7
   1618e:	4463      	add	r3, ip
   16190:	681b      	ldr	r3, [r3, #0]
   16192:	781b      	ldrb	r3, [r3, #0]
   16194:	0018      	movs	r0, r3
   16196:	4ba5      	ldr	r3, [pc, #660]	; (1642c <processOnSMS+0x17a0>)
   16198:	4798      	blx	r3
   1619a:	0002      	movs	r2, r0
   1619c:	230e      	movs	r3, #14
   1619e:	33ff      	adds	r3, #255	; 0xff
   161a0:	2108      	movs	r1, #8
   161a2:	468c      	mov	ip, r1
   161a4:	44bc      	add	ip, r7
   161a6:	4463      	add	r3, ip
   161a8:	701a      	strb	r2, [r3, #0]
		ptrclcc = strtok(NULL,":");
   161aa:	4b9f      	ldr	r3, [pc, #636]	; (16428 <processOnSMS+0x179c>)
   161ac:	0019      	movs	r1, r3
   161ae:	2000      	movs	r0, #0
   161b0:	4b9c      	ldr	r3, [pc, #624]	; (16424 <processOnSMS+0x1798>)
   161b2:	4798      	blx	r3
   161b4:	0003      	movs	r3, r0
   161b6:	2288      	movs	r2, #136	; 0x88
   161b8:	0052      	lsls	r2, r2, #1
   161ba:	2108      	movs	r1, #8
   161bc:	468c      	mov	ip, r1
   161be:	44bc      	add	ip, r7
   161c0:	4462      	add	r2, ip
   161c2:	6013      	str	r3, [r2, #0]
		stopMM=atoi(*ptrclcc);
   161c4:	2388      	movs	r3, #136	; 0x88
   161c6:	005b      	lsls	r3, r3, #1
   161c8:	2208      	movs	r2, #8
   161ca:	4694      	mov	ip, r2
   161cc:	44bc      	add	ip, r7
   161ce:	4463      	add	r3, ip
   161d0:	681b      	ldr	r3, [r3, #0]
   161d2:	781b      	ldrb	r3, [r3, #0]
   161d4:	0018      	movs	r0, r3
   161d6:	4b95      	ldr	r3, [pc, #596]	; (1642c <processOnSMS+0x17a0>)
   161d8:	4798      	blx	r3
   161da:	0002      	movs	r2, r0
   161dc:	2386      	movs	r3, #134	; 0x86
   161de:	005b      	lsls	r3, r3, #1
   161e0:	2108      	movs	r1, #8
   161e2:	468c      	mov	ip, r1
   161e4:	44bc      	add	ip, r7
   161e6:	4463      	add	r3, ip
   161e8:	701a      	strb	r2, [r3, #0]

		if(startHH>=0 && startHH<24 && startMM>=0 && startMM<60)
   161ea:	2310      	movs	r3, #16
   161ec:	33ff      	adds	r3, #255	; 0xff
   161ee:	2208      	movs	r2, #8
   161f0:	4694      	mov	ip, r2
   161f2:	44bc      	add	ip, r7
   161f4:	4463      	add	r3, ip
   161f6:	781b      	ldrb	r3, [r3, #0]
   161f8:	2b17      	cmp	r3, #23
   161fa:	d901      	bls.n	16200 <processOnSMS+0x1574>
   161fc:	f000 fcbe 	bl	16b7c <processOnSMS+0x1ef0>
   16200:	2387      	movs	r3, #135	; 0x87
   16202:	005b      	lsls	r3, r3, #1
   16204:	2208      	movs	r2, #8
   16206:	4694      	mov	ip, r2
   16208:	44bc      	add	ip, r7
   1620a:	4463      	add	r3, ip
   1620c:	781b      	ldrb	r3, [r3, #0]
   1620e:	2b3b      	cmp	r3, #59	; 0x3b
   16210:	d901      	bls.n	16216 <processOnSMS+0x158a>
   16212:	f000 fcb3 	bl	16b7c <processOnSMS+0x1ef0>
		{
			if(stopHH>=0 && stopHH<24 && stopMM>=0 && stopMM<60)
   16216:	230e      	movs	r3, #14
   16218:	33ff      	adds	r3, #255	; 0xff
   1621a:	2208      	movs	r2, #8
   1621c:	4694      	mov	ip, r2
   1621e:	44bc      	add	ip, r7
   16220:	4463      	add	r3, ip
   16222:	781b      	ldrb	r3, [r3, #0]
   16224:	2b17      	cmp	r3, #23
   16226:	d901      	bls.n	1622c <processOnSMS+0x15a0>
   16228:	f000 fca8 	bl	16b7c <processOnSMS+0x1ef0>
   1622c:	2386      	movs	r3, #134	; 0x86
   1622e:	005b      	lsls	r3, r3, #1
   16230:	2208      	movs	r2, #8
   16232:	4694      	mov	ip, r2
   16234:	44bc      	add	ip, r7
   16236:	4463      	add	r3, ip
   16238:	781b      	ldrb	r3, [r3, #0]
   1623a:	2b3b      	cmp	r3, #59	; 0x3b
   1623c:	d901      	bls.n	16242 <processOnSMS+0x15b6>
   1623e:	f000 fc9d 	bl	16b7c <processOnSMS+0x1ef0>
			{
				incomingSMSProcessed=true;
   16242:	2328      	movs	r3, #40	; 0x28
   16244:	33ff      	adds	r3, #255	; 0xff
   16246:	2208      	movs	r2, #8
   16248:	4694      	mov	ip, r2
   1624a:	44bc      	add	ip, r7
   1624c:	4463      	add	r3, ip
   1624e:	2201      	movs	r2, #1
   16250:	701a      	strb	r2, [r3, #0]
				
				if(startHH==stopHH && startMM==stopMM)
   16252:	2310      	movs	r3, #16
   16254:	33ff      	adds	r3, #255	; 0xff
   16256:	2208      	movs	r2, #8
   16258:	18ba      	adds	r2, r7, r2
   1625a:	18d2      	adds	r2, r2, r3
   1625c:	230e      	movs	r3, #14
   1625e:	33ff      	adds	r3, #255	; 0xff
   16260:	2108      	movs	r1, #8
   16262:	468c      	mov	ip, r1
   16264:	44bc      	add	ip, r7
   16266:	4463      	add	r3, ip
   16268:	7812      	ldrb	r2, [r2, #0]
   1626a:	781b      	ldrb	r3, [r3, #0]
   1626c:	429a      	cmp	r2, r3
   1626e:	d130      	bne.n	162d2 <processOnSMS+0x1646>
   16270:	2387      	movs	r3, #135	; 0x87
   16272:	005b      	lsls	r3, r3, #1
   16274:	2208      	movs	r2, #8
   16276:	18ba      	adds	r2, r7, r2
   16278:	18d2      	adds	r2, r2, r3
   1627a:	2386      	movs	r3, #134	; 0x86
   1627c:	005b      	lsls	r3, r3, #1
   1627e:	2108      	movs	r1, #8
   16280:	468c      	mov	ip, r1
   16282:	44bc      	add	ip, r7
   16284:	4463      	add	r3, ip
   16286:	7812      	ldrb	r2, [r2, #0]
   16288:	781b      	ldrb	r3, [r3, #0]
   1628a:	429a      	cmp	r2, r3
   1628c:	d121      	bne.n	162d2 <processOnSMS+0x1646>
				{
					saveNoCallSettings(false,0,0,0,0);
   1628e:	2300      	movs	r3, #0
   16290:	9300      	str	r3, [sp, #0]
   16292:	2300      	movs	r3, #0
   16294:	2200      	movs	r2, #0
   16296:	2100      	movs	r1, #0
   16298:	2000      	movs	r0, #0
   1629a:	4c65      	ldr	r4, [pc, #404]	; (16430 <processOnSMS+0x17a4>)
   1629c:	47a0      	blx	r4
					if(response_sms_processed_cmd)
   1629e:	4b65      	ldr	r3, [pc, #404]	; (16434 <processOnSMS+0x17a8>)
   162a0:	2294      	movs	r2, #148	; 0x94
   162a2:	0052      	lsls	r2, r2, #1
   162a4:	4694      	mov	ip, r2
   162a6:	2208      	movs	r2, #8
   162a8:	4690      	mov	r8, r2
   162aa:	44b8      	add	r8, r7
   162ac:	44c4      	add	ip, r8
   162ae:	4463      	add	r3, ip
   162b0:	781b      	ldrb	r3, [r3, #0]
   162b2:	2b00      	cmp	r3, #0
   162b4:	d101      	bne.n	162ba <processOnSMS+0x162e>
   162b6:	f000 fc61 	bl	16b7c <processOnSMS+0x1ef0>
					{
						strcpy(resep_msg,"NO CALL SETTING OFF");
   162ba:	230c      	movs	r3, #12
   162bc:	2208      	movs	r2, #8
   162be:	4694      	mov	ip, r2
   162c0:	44bc      	add	ip, r7
   162c2:	4463      	add	r3, ip
   162c4:	4a5c      	ldr	r2, [pc, #368]	; (16438 <processOnSMS+0x17ac>)
   162c6:	ca13      	ldmia	r2!, {r0, r1, r4}
   162c8:	c313      	stmia	r3!, {r0, r1, r4}
   162ca:	ca03      	ldmia	r2!, {r0, r1}
   162cc:	c303      	stmia	r3!, {r0, r1}
					if(response_sms_processed_cmd)
   162ce:	f000 fc55 	bl	16b7c <processOnSMS+0x1ef0>
					}
				}
				else
				{
					saveNoCallSettings(true,startHH,startMM,stopHH,stopMM);
   162d2:	230e      	movs	r3, #14
   162d4:	33ff      	adds	r3, #255	; 0xff
   162d6:	2208      	movs	r2, #8
   162d8:	4694      	mov	ip, r2
   162da:	44bc      	add	ip, r7
   162dc:	4463      	add	r3, ip
   162de:	7818      	ldrb	r0, [r3, #0]
   162e0:	2387      	movs	r3, #135	; 0x87
   162e2:	005b      	lsls	r3, r3, #1
   162e4:	2208      	movs	r2, #8
   162e6:	4694      	mov	ip, r2
   162e8:	44bc      	add	ip, r7
   162ea:	4463      	add	r3, ip
   162ec:	781a      	ldrb	r2, [r3, #0]
   162ee:	2310      	movs	r3, #16
   162f0:	33ff      	adds	r3, #255	; 0xff
   162f2:	2108      	movs	r1, #8
   162f4:	468c      	mov	ip, r1
   162f6:	44bc      	add	ip, r7
   162f8:	4463      	add	r3, ip
   162fa:	7819      	ldrb	r1, [r3, #0]
   162fc:	2386      	movs	r3, #134	; 0x86
   162fe:	005b      	lsls	r3, r3, #1
   16300:	2408      	movs	r4, #8
   16302:	46a4      	mov	ip, r4
   16304:	44bc      	add	ip, r7
   16306:	4463      	add	r3, ip
   16308:	781b      	ldrb	r3, [r3, #0]
   1630a:	9300      	str	r3, [sp, #0]
   1630c:	0003      	movs	r3, r0
   1630e:	2001      	movs	r0, #1
   16310:	4c47      	ldr	r4, [pc, #284]	; (16430 <processOnSMS+0x17a4>)
   16312:	47a0      	blx	r4
					if(response_sms_processed_cmd)
   16314:	4b47      	ldr	r3, [pc, #284]	; (16434 <processOnSMS+0x17a8>)
   16316:	2294      	movs	r2, #148	; 0x94
   16318:	0052      	lsls	r2, r2, #1
   1631a:	4694      	mov	ip, r2
   1631c:	2208      	movs	r2, #8
   1631e:	4690      	mov	r8, r2
   16320:	44b8      	add	r8, r7
   16322:	44c4      	add	ip, r8
   16324:	4463      	add	r3, ip
   16326:	781b      	ldrb	r3, [r3, #0]
   16328:	2b00      	cmp	r3, #0
   1632a:	d101      	bne.n	16330 <processOnSMS+0x16a4>
   1632c:	f000 fc26 	bl	16b7c <processOnSMS+0x1ef0>
					{
						strcpy(resep_msg,"NO CALL TIMINGS SET");
   16330:	230c      	movs	r3, #12
   16332:	2208      	movs	r2, #8
   16334:	4694      	mov	ip, r2
   16336:	44bc      	add	ip, r7
   16338:	4463      	add	r3, ip
   1633a:	4a40      	ldr	r2, [pc, #256]	; (1643c <processOnSMS+0x17b0>)
   1633c:	ca13      	ldmia	r2!, {r0, r1, r4}
   1633e:	c313      	stmia	r3!, {r0, r1, r4}
   16340:	ca03      	ldmia	r2!, {r0, r1}
   16342:	c303      	stmia	r3!, {r0, r1}
   16344:	f000 fc1a 	bl	16b7c <processOnSMS+0x1ef0>
					}
				}
			}
		}
	}
	else if (StringstartsWith(received_command,"STAGE"))
   16348:	4a3d      	ldr	r2, [pc, #244]	; (16440 <processOnSMS+0x17b4>)
   1634a:	68fb      	ldr	r3, [r7, #12]
   1634c:	0011      	movs	r1, r2
   1634e:	0018      	movs	r0, r3
   16350:	4b31      	ldr	r3, [pc, #196]	; (16418 <processOnSMS+0x178c>)
   16352:	4798      	blx	r3
   16354:	1e03      	subs	r3, r0, #0
   16356:	d100      	bne.n	1635a <processOnSMS+0x16ce>
   16358:	e07e      	b.n	16458 <processOnSMS+0x17cc>
	{
		memmove(received_command,received_command+5,strlen(received_command));
   1635a:	68fb      	ldr	r3, [r7, #12]
   1635c:	1d5c      	adds	r4, r3, #5
   1635e:	68fb      	ldr	r3, [r7, #12]
   16360:	0018      	movs	r0, r3
   16362:	4b38      	ldr	r3, [pc, #224]	; (16444 <processOnSMS+0x17b8>)
   16364:	4798      	blx	r3
   16366:	0002      	movs	r2, r0
   16368:	68fb      	ldr	r3, [r7, #12]
   1636a:	0021      	movs	r1, r4
   1636c:	0018      	movs	r0, r3
   1636e:	4b36      	ldr	r3, [pc, #216]	; (16448 <processOnSMS+0x17bc>)
   16370:	4798      	blx	r3
		uint16_t stageLevel = atoi(received_command);
   16372:	68fb      	ldr	r3, [r7, #12]
   16374:	0018      	movs	r0, r3
   16376:	4b2d      	ldr	r3, [pc, #180]	; (1642c <processOnSMS+0x17a0>)
   16378:	4798      	blx	r3
   1637a:	0002      	movs	r2, r0
   1637c:	2391      	movs	r3, #145	; 0x91
   1637e:	005b      	lsls	r3, r3, #1
   16380:	2108      	movs	r1, #8
   16382:	468c      	mov	ip, r1
   16384:	44bc      	add	ip, r7
   16386:	4463      	add	r3, ip
   16388:	801a      	strh	r2, [r3, #0]
		if (stageLevel < 0) stageLevel = 0;
		if (stageLevel > 5) stageLevel = 5;
   1638a:	2391      	movs	r3, #145	; 0x91
   1638c:	005b      	lsls	r3, r3, #1
   1638e:	2208      	movs	r2, #8
   16390:	4694      	mov	ip, r2
   16392:	44bc      	add	ip, r7
   16394:	4463      	add	r3, ip
   16396:	881b      	ldrh	r3, [r3, #0]
   16398:	2b05      	cmp	r3, #5
   1639a:	d907      	bls.n	163ac <processOnSMS+0x1720>
   1639c:	2391      	movs	r3, #145	; 0x91
   1639e:	005b      	lsls	r3, r3, #1
   163a0:	2208      	movs	r2, #8
   163a2:	4694      	mov	ip, r2
   163a4:	44bc      	add	ip, r7
   163a6:	4463      	add	r3, ip
   163a8:	2205      	movs	r2, #5
   163aa:	801a      	strh	r2, [r3, #0]
		saveEventStageSettings(stageLevel);  //Store in EEPROM the EVENT STAGE
   163ac:	2391      	movs	r3, #145	; 0x91
   163ae:	005b      	lsls	r3, r3, #1
   163b0:	2208      	movs	r2, #8
   163b2:	4694      	mov	ip, r2
   163b4:	44bc      	add	ip, r7
   163b6:	4463      	add	r3, ip
   163b8:	881b      	ldrh	r3, [r3, #0]
   163ba:	b2db      	uxtb	r3, r3
   163bc:	0018      	movs	r0, r3
   163be:	4b23      	ldr	r3, [pc, #140]	; (1644c <processOnSMS+0x17c0>)
   163c0:	4798      	blx	r3
		
		incomingSMSProcessed=true;
   163c2:	2328      	movs	r3, #40	; 0x28
   163c4:	33ff      	adds	r3, #255	; 0xff
   163c6:	2208      	movs	r2, #8
   163c8:	4694      	mov	ip, r2
   163ca:	44bc      	add	ip, r7
   163cc:	4463      	add	r3, ip
   163ce:	2201      	movs	r2, #1
   163d0:	701a      	strb	r2, [r3, #0]
		
		if(response_sms_processed_cmd)
   163d2:	4b18      	ldr	r3, [pc, #96]	; (16434 <processOnSMS+0x17a8>)
   163d4:	2294      	movs	r2, #148	; 0x94
   163d6:	0052      	lsls	r2, r2, #1
   163d8:	4694      	mov	ip, r2
   163da:	2208      	movs	r2, #8
   163dc:	4690      	mov	r8, r2
   163de:	44b8      	add	r8, r7
   163e0:	44c4      	add	ip, r8
   163e2:	4463      	add	r3, ip
   163e4:	781b      	ldrb	r3, [r3, #0]
   163e6:	2b00      	cmp	r3, #0
   163e8:	d101      	bne.n	163ee <processOnSMS+0x1762>
   163ea:	f000 fbc7 	bl	16b7c <processOnSMS+0x1ef0>
		{
			sprintf(resep_msg,"CALL STAGE SET TO : %d", stageLevel);
   163ee:	2391      	movs	r3, #145	; 0x91
   163f0:	005b      	lsls	r3, r3, #1
   163f2:	2208      	movs	r2, #8
   163f4:	4694      	mov	ip, r2
   163f6:	44bc      	add	ip, r7
   163f8:	4463      	add	r3, ip
   163fa:	881a      	ldrh	r2, [r3, #0]
   163fc:	4914      	ldr	r1, [pc, #80]	; (16450 <processOnSMS+0x17c4>)
   163fe:	230c      	movs	r3, #12
   16400:	2008      	movs	r0, #8
   16402:	4684      	mov	ip, r0
   16404:	44bc      	add	ip, r7
   16406:	4463      	add	r3, ip
   16408:	0018      	movs	r0, r3
   1640a:	4b12      	ldr	r3, [pc, #72]	; (16454 <processOnSMS+0x17c8>)
   1640c:	4798      	blx	r3
   1640e:	f000 fbb5 	bl	16b7c <processOnSMS+0x1ef0>
   16412:	46c0      	nop			; (mov r8, r8)
   16414:	00029fd0 	.word	0x00029fd0
   16418:	00013eed 	.word	0x00013eed
   1641c:	00029fd8 	.word	0x00029fd8
   16420:	00029fe0 	.word	0x00029fe0
   16424:	00028ced 	.word	0x00028ced
   16428:	00029fe4 	.word	0x00029fe4
   1642c:	000288e1 	.word	0x000288e1
   16430:	000113bd 	.word	0x000113bd
   16434:	fffffeda 	.word	0xfffffeda
   16438:	00029fa4 	.word	0x00029fa4
   1643c:	00029fe8 	.word	0x00029fe8
   16440:	00029ffc 	.word	0x00029ffc
   16444:	00028c8b 	.word	0x00028c8b
   16448:	000289d7 	.word	0x000289d7
   1644c:	00011929 	.word	0x00011929
   16450:	0002a004 	.word	0x0002a004
   16454:	00028c01 	.word	0x00028c01
		}
	}
	else if (StringstartsWith(received_command,"STARTIME"))
   16458:	4aa6      	ldr	r2, [pc, #664]	; (166f4 <processOnSMS+0x1a68>)
   1645a:	68fb      	ldr	r3, [r7, #12]
   1645c:	0011      	movs	r1, r2
   1645e:	0018      	movs	r0, r3
   16460:	4ba5      	ldr	r3, [pc, #660]	; (166f8 <processOnSMS+0x1a6c>)
   16462:	4798      	blx	r3
   16464:	1e03      	subs	r3, r0, #0
   16466:	d06d      	beq.n	16544 <processOnSMS+0x18b8>
	{
		memmove(received_command,received_command+8,strlen(received_command));
   16468:	68fb      	ldr	r3, [r7, #12]
   1646a:	3308      	adds	r3, #8
   1646c:	001c      	movs	r4, r3
   1646e:	68fb      	ldr	r3, [r7, #12]
   16470:	0018      	movs	r0, r3
   16472:	4ba2      	ldr	r3, [pc, #648]	; (166fc <processOnSMS+0x1a70>)
   16474:	4798      	blx	r3
   16476:	0002      	movs	r2, r0
   16478:	68fb      	ldr	r3, [r7, #12]
   1647a:	0021      	movs	r1, r4
   1647c:	0018      	movs	r0, r3
   1647e:	4ba0      	ldr	r3, [pc, #640]	; (16700 <processOnSMS+0x1a74>)
   16480:	4798      	blx	r3
		uint16_t STARTIME = atoi(received_command);
   16482:	68fb      	ldr	r3, [r7, #12]
   16484:	0018      	movs	r0, r3
   16486:	4b9f      	ldr	r3, [pc, #636]	; (16704 <processOnSMS+0x1a78>)
   16488:	4798      	blx	r3
   1648a:	0002      	movs	r2, r0
   1648c:	2390      	movs	r3, #144	; 0x90
   1648e:	005b      	lsls	r3, r3, #1
   16490:	2108      	movs	r1, #8
   16492:	468c      	mov	ip, r1
   16494:	44bc      	add	ip, r7
   16496:	4463      	add	r3, ip
   16498:	801a      	strh	r2, [r3, #0]
		if (STARTIME < 2)
   1649a:	2390      	movs	r3, #144	; 0x90
   1649c:	005b      	lsls	r3, r3, #1
   1649e:	2208      	movs	r2, #8
   164a0:	4694      	mov	ip, r2
   164a2:	44bc      	add	ip, r7
   164a4:	4463      	add	r3, ip
   164a6:	881b      	ldrh	r3, [r3, #0]
   164a8:	2b01      	cmp	r3, #1
   164aa:	d807      	bhi.n	164bc <processOnSMS+0x1830>
		{
			STARTIME = 2;
   164ac:	2390      	movs	r3, #144	; 0x90
   164ae:	005b      	lsls	r3, r3, #1
   164b0:	2208      	movs	r2, #8
   164b2:	4694      	mov	ip, r2
   164b4:	44bc      	add	ip, r7
   164b6:	4463      	add	r3, ip
   164b8:	2202      	movs	r2, #2
   164ba:	801a      	strh	r2, [r3, #0]
		}
		if (STARTIME > 1200)
   164bc:	2390      	movs	r3, #144	; 0x90
   164be:	005b      	lsls	r3, r3, #1
   164c0:	2208      	movs	r2, #8
   164c2:	4694      	mov	ip, r2
   164c4:	44bc      	add	ip, r7
   164c6:	4463      	add	r3, ip
   164c8:	881a      	ldrh	r2, [r3, #0]
   164ca:	2396      	movs	r3, #150	; 0x96
   164cc:	00db      	lsls	r3, r3, #3
   164ce:	429a      	cmp	r2, r3
   164d0:	d908      	bls.n	164e4 <processOnSMS+0x1858>
		{
			STARTIME = 1200;
   164d2:	2390      	movs	r3, #144	; 0x90
   164d4:	005b      	lsls	r3, r3, #1
   164d6:	2208      	movs	r2, #8
   164d8:	4694      	mov	ip, r2
   164da:	44bc      	add	ip, r7
   164dc:	4463      	add	r3, ip
   164de:	2296      	movs	r2, #150	; 0x96
   164e0:	00d2      	lsls	r2, r2, #3
   164e2:	801a      	strh	r2, [r3, #0]
		}
		saveStarDeltaTimer(STARTIME);
   164e4:	2390      	movs	r3, #144	; 0x90
   164e6:	005b      	lsls	r3, r3, #1
   164e8:	2208      	movs	r2, #8
   164ea:	4694      	mov	ip, r2
   164ec:	44bc      	add	ip, r7
   164ee:	4463      	add	r3, ip
   164f0:	881b      	ldrh	r3, [r3, #0]
   164f2:	0018      	movs	r0, r3
   164f4:	4b84      	ldr	r3, [pc, #528]	; (16708 <processOnSMS+0x1a7c>)
   164f6:	4798      	blx	r3
		
		incomingSMSProcessed=true;
   164f8:	2328      	movs	r3, #40	; 0x28
   164fa:	33ff      	adds	r3, #255	; 0xff
   164fc:	2208      	movs	r2, #8
   164fe:	4694      	mov	ip, r2
   16500:	44bc      	add	ip, r7
   16502:	4463      	add	r3, ip
   16504:	2201      	movs	r2, #1
   16506:	701a      	strb	r2, [r3, #0]
		
		if (response_sms_processed_cmd == true)
   16508:	4b80      	ldr	r3, [pc, #512]	; (1670c <processOnSMS+0x1a80>)
   1650a:	2294      	movs	r2, #148	; 0x94
   1650c:	0052      	lsls	r2, r2, #1
   1650e:	4694      	mov	ip, r2
   16510:	2208      	movs	r2, #8
   16512:	4690      	mov	r8, r2
   16514:	44b8      	add	r8, r7
   16516:	44c4      	add	ip, r8
   16518:	4463      	add	r3, ip
   1651a:	781b      	ldrb	r3, [r3, #0]
   1651c:	2b00      	cmp	r3, #0
   1651e:	d100      	bne.n	16522 <processOnSMS+0x1896>
   16520:	e32c      	b.n	16b7c <processOnSMS+0x1ef0>
		{
			sprintf(resep_msg," STARTIME SET TO : %d",STARTIME);
   16522:	2390      	movs	r3, #144	; 0x90
   16524:	005b      	lsls	r3, r3, #1
   16526:	2208      	movs	r2, #8
   16528:	4694      	mov	ip, r2
   1652a:	44bc      	add	ip, r7
   1652c:	4463      	add	r3, ip
   1652e:	881a      	ldrh	r2, [r3, #0]
   16530:	4977      	ldr	r1, [pc, #476]	; (16710 <processOnSMS+0x1a84>)
   16532:	230c      	movs	r3, #12
   16534:	2008      	movs	r0, #8
   16536:	4684      	mov	ip, r0
   16538:	44bc      	add	ip, r7
   1653a:	4463      	add	r3, ip
   1653c:	0018      	movs	r0, r3
   1653e:	4b75      	ldr	r3, [pc, #468]	; (16714 <processOnSMS+0x1a88>)
   16540:	4798      	blx	r3
   16542:	e31b      	b.n	16b7c <processOnSMS+0x1ef0>
		}
	}
	else if (StringstartsWith(received_command,"AUTOTIME"))
   16544:	4a74      	ldr	r2, [pc, #464]	; (16718 <processOnSMS+0x1a8c>)
   16546:	68fb      	ldr	r3, [r7, #12]
   16548:	0011      	movs	r1, r2
   1654a:	0018      	movs	r0, r3
   1654c:	4b6a      	ldr	r3, [pc, #424]	; (166f8 <processOnSMS+0x1a6c>)
   1654e:	4798      	blx	r3
   16550:	1e03      	subs	r3, r0, #0
   16552:	d06d      	beq.n	16630 <processOnSMS+0x19a4>
	{
		memmove(received_command,received_command+8,strlen(received_command));
   16554:	68fb      	ldr	r3, [r7, #12]
   16556:	3308      	adds	r3, #8
   16558:	001c      	movs	r4, r3
   1655a:	68fb      	ldr	r3, [r7, #12]
   1655c:	0018      	movs	r0, r3
   1655e:	4b67      	ldr	r3, [pc, #412]	; (166fc <processOnSMS+0x1a70>)
   16560:	4798      	blx	r3
   16562:	0002      	movs	r2, r0
   16564:	68fb      	ldr	r3, [r7, #12]
   16566:	0021      	movs	r1, r4
   16568:	0018      	movs	r0, r3
   1656a:	4b65      	ldr	r3, [pc, #404]	; (16700 <processOnSMS+0x1a74>)
   1656c:	4798      	blx	r3
		uint16_t AUTOTIME = atoi(received_command);
   1656e:	68fb      	ldr	r3, [r7, #12]
   16570:	0018      	movs	r0, r3
   16572:	4b64      	ldr	r3, [pc, #400]	; (16704 <processOnSMS+0x1a78>)
   16574:	4798      	blx	r3
   16576:	0002      	movs	r2, r0
   16578:	238f      	movs	r3, #143	; 0x8f
   1657a:	005b      	lsls	r3, r3, #1
   1657c:	2108      	movs	r1, #8
   1657e:	468c      	mov	ip, r1
   16580:	44bc      	add	ip, r7
   16582:	4463      	add	r3, ip
   16584:	801a      	strh	r2, [r3, #0]
		if (AUTOTIME < 50)
   16586:	238f      	movs	r3, #143	; 0x8f
   16588:	005b      	lsls	r3, r3, #1
   1658a:	2208      	movs	r2, #8
   1658c:	4694      	mov	ip, r2
   1658e:	44bc      	add	ip, r7
   16590:	4463      	add	r3, ip
   16592:	881b      	ldrh	r3, [r3, #0]
   16594:	2b31      	cmp	r3, #49	; 0x31
   16596:	d807      	bhi.n	165a8 <processOnSMS+0x191c>
		{
			AUTOTIME = 50;
   16598:	238f      	movs	r3, #143	; 0x8f
   1659a:	005b      	lsls	r3, r3, #1
   1659c:	2208      	movs	r2, #8
   1659e:	4694      	mov	ip, r2
   165a0:	44bc      	add	ip, r7
   165a2:	4463      	add	r3, ip
   165a4:	2232      	movs	r2, #50	; 0x32
   165a6:	801a      	strh	r2, [r3, #0]
		}
		if (AUTOTIME > 28800)
   165a8:	238f      	movs	r3, #143	; 0x8f
   165aa:	005b      	lsls	r3, r3, #1
   165ac:	2208      	movs	r2, #8
   165ae:	4694      	mov	ip, r2
   165b0:	44bc      	add	ip, r7
   165b2:	4463      	add	r3, ip
   165b4:	881a      	ldrh	r2, [r3, #0]
   165b6:	23e1      	movs	r3, #225	; 0xe1
   165b8:	01db      	lsls	r3, r3, #7
   165ba:	429a      	cmp	r2, r3
   165bc:	d908      	bls.n	165d0 <processOnSMS+0x1944>
		{
			AUTOTIME = 28800;
   165be:	238f      	movs	r3, #143	; 0x8f
   165c0:	005b      	lsls	r3, r3, #1
   165c2:	2208      	movs	r2, #8
   165c4:	4694      	mov	ip, r2
   165c6:	44bc      	add	ip, r7
   165c8:	4463      	add	r3, ip
   165ca:	22e1      	movs	r2, #225	; 0xe1
   165cc:	01d2      	lsls	r2, r2, #7
   165ce:	801a      	strh	r2, [r3, #0]
		}
		saveAutoStartTimeSettings(AUTOTIME);
   165d0:	238f      	movs	r3, #143	; 0x8f
   165d2:	005b      	lsls	r3, r3, #1
   165d4:	2208      	movs	r2, #8
   165d6:	4694      	mov	ip, r2
   165d8:	44bc      	add	ip, r7
   165da:	4463      	add	r3, ip
   165dc:	881b      	ldrh	r3, [r3, #0]
   165de:	0018      	movs	r0, r3
   165e0:	4b4e      	ldr	r3, [pc, #312]	; (1671c <processOnSMS+0x1a90>)
   165e2:	4798      	blx	r3
		incomingSMSProcessed=true;
   165e4:	2328      	movs	r3, #40	; 0x28
   165e6:	33ff      	adds	r3, #255	; 0xff
   165e8:	2208      	movs	r2, #8
   165ea:	4694      	mov	ip, r2
   165ec:	44bc      	add	ip, r7
   165ee:	4463      	add	r3, ip
   165f0:	2201      	movs	r2, #1
   165f2:	701a      	strb	r2, [r3, #0]
		
		if (response_sms_processed_cmd == true)
   165f4:	4b45      	ldr	r3, [pc, #276]	; (1670c <processOnSMS+0x1a80>)
   165f6:	2294      	movs	r2, #148	; 0x94
   165f8:	0052      	lsls	r2, r2, #1
   165fa:	4694      	mov	ip, r2
   165fc:	2208      	movs	r2, #8
   165fe:	4690      	mov	r8, r2
   16600:	44b8      	add	r8, r7
   16602:	44c4      	add	ip, r8
   16604:	4463      	add	r3, ip
   16606:	781b      	ldrb	r3, [r3, #0]
   16608:	2b00      	cmp	r3, #0
   1660a:	d100      	bne.n	1660e <processOnSMS+0x1982>
   1660c:	e2b6      	b.n	16b7c <processOnSMS+0x1ef0>
		{
			sprintf(resep_msg," AUTOTIME SET TO : %d",AUTOTIME);
   1660e:	238f      	movs	r3, #143	; 0x8f
   16610:	005b      	lsls	r3, r3, #1
   16612:	2208      	movs	r2, #8
   16614:	4694      	mov	ip, r2
   16616:	44bc      	add	ip, r7
   16618:	4463      	add	r3, ip
   1661a:	881a      	ldrh	r2, [r3, #0]
   1661c:	4940      	ldr	r1, [pc, #256]	; (16720 <processOnSMS+0x1a94>)
   1661e:	230c      	movs	r3, #12
   16620:	2008      	movs	r0, #8
   16622:	4684      	mov	ip, r0
   16624:	44bc      	add	ip, r7
   16626:	4463      	add	r3, ip
   16628:	0018      	movs	r0, r3
   1662a:	4b3a      	ldr	r3, [pc, #232]	; (16714 <processOnSMS+0x1a88>)
   1662c:	4798      	blx	r3
   1662e:	e2a5      	b.n	16b7c <processOnSMS+0x1ef0>
		}
	}
	else if (StringstartsWith(received_command,"BAL"))
   16630:	4a3c      	ldr	r2, [pc, #240]	; (16724 <processOnSMS+0x1a98>)
   16632:	68fb      	ldr	r3, [r7, #12]
   16634:	0011      	movs	r1, r2
   16636:	0018      	movs	r0, r3
   16638:	4b2f      	ldr	r3, [pc, #188]	; (166f8 <processOnSMS+0x1a6c>)
   1663a:	4798      	blx	r3
   1663c:	1e03      	subs	r3, r0, #0
   1663e:	d000      	beq.n	16642 <processOnSMS+0x19b6>
   16640:	e29c      	b.n	16b7c <processOnSMS+0x1ef0>
		// The received sms will be like BAL*141# for vodafone
		// We need to extract the URC number and check the balance, and send it to user
		//todo: implement mechanism to check current balance of sim card
		
	}
	else if(StringstartsWith(received_command,"MP+"))
   16642:	4a39      	ldr	r2, [pc, #228]	; (16728 <processOnSMS+0x1a9c>)
   16644:	68fb      	ldr	r3, [r7, #12]
   16646:	0011      	movs	r1, r2
   16648:	0018      	movs	r0, r3
   1664a:	4b2b      	ldr	r3, [pc, #172]	; (166f8 <processOnSMS+0x1a6c>)
   1664c:	4798      	blx	r3
   1664e:	1e03      	subs	r3, r0, #0
   16650:	d023      	beq.n	1669a <processOnSMS+0x1a0e>
	{
		memmove(received_command,received_command+3,strlen(received_command));
   16652:	68fb      	ldr	r3, [r7, #12]
   16654:	1cdc      	adds	r4, r3, #3
   16656:	68fb      	ldr	r3, [r7, #12]
   16658:	0018      	movs	r0, r3
   1665a:	4b28      	ldr	r3, [pc, #160]	; (166fc <processOnSMS+0x1a70>)
   1665c:	4798      	blx	r3
   1665e:	0002      	movs	r2, r0
   16660:	68fb      	ldr	r3, [r7, #12]
   16662:	0021      	movs	r1, r4
   16664:	0018      	movs	r0, r3
   16666:	4b26      	ldr	r3, [pc, #152]	; (16700 <processOnSMS+0x1a74>)
   16668:	4798      	blx	r3
		if(addPrimaryIndexedNumber(received_command))
   1666a:	68fb      	ldr	r3, [r7, #12]
   1666c:	0018      	movs	r0, r3
   1666e:	4b2f      	ldr	r3, [pc, #188]	; (1672c <processOnSMS+0x1aa0>)
   16670:	4798      	blx	r3
   16672:	1e03      	subs	r3, r0, #0
   16674:	d100      	bne.n	16678 <processOnSMS+0x19ec>
   16676:	e281      	b.n	16b7c <processOnSMS+0x1ef0>
		{
			incomingSMSProcessed=true;
   16678:	2328      	movs	r3, #40	; 0x28
   1667a:	33ff      	adds	r3, #255	; 0xff
   1667c:	2208      	movs	r2, #8
   1667e:	4694      	mov	ip, r2
   16680:	44bc      	add	ip, r7
   16682:	4463      	add	r3, ip
   16684:	2201      	movs	r2, #1
   16686:	701a      	strb	r2, [r3, #0]
			strcpy(resep_msg,"P NO ADDDED");
   16688:	230c      	movs	r3, #12
   1668a:	2208      	movs	r2, #8
   1668c:	4694      	mov	ip, r2
   1668e:	44bc      	add	ip, r7
   16690:	4463      	add	r3, ip
   16692:	4a27      	ldr	r2, [pc, #156]	; (16730 <processOnSMS+0x1aa4>)
   16694:	ca13      	ldmia	r2!, {r0, r1, r4}
   16696:	c313      	stmia	r3!, {r0, r1, r4}
   16698:	e270      	b.n	16b7c <processOnSMS+0x1ef0>
		}
	}
	else if(StringstartsWith(received_command,"MS+"))
   1669a:	4a26      	ldr	r2, [pc, #152]	; (16734 <processOnSMS+0x1aa8>)
   1669c:	68fb      	ldr	r3, [r7, #12]
   1669e:	0011      	movs	r1, r2
   166a0:	0018      	movs	r0, r3
   166a2:	4b15      	ldr	r3, [pc, #84]	; (166f8 <processOnSMS+0x1a6c>)
   166a4:	4798      	blx	r3
   166a6:	1e03      	subs	r3, r0, #0
   166a8:	d04a      	beq.n	16740 <processOnSMS+0x1ab4>
	{
		memmove(received_command,received_command+3,strlen(received_command));
   166aa:	68fb      	ldr	r3, [r7, #12]
   166ac:	1cdc      	adds	r4, r3, #3
   166ae:	68fb      	ldr	r3, [r7, #12]
   166b0:	0018      	movs	r0, r3
   166b2:	4b12      	ldr	r3, [pc, #72]	; (166fc <processOnSMS+0x1a70>)
   166b4:	4798      	blx	r3
   166b6:	0002      	movs	r2, r0
   166b8:	68fb      	ldr	r3, [r7, #12]
   166ba:	0021      	movs	r1, r4
   166bc:	0018      	movs	r0, r3
   166be:	4b10      	ldr	r3, [pc, #64]	; (16700 <processOnSMS+0x1a74>)
   166c0:	4798      	blx	r3
		if(addSecondaryIndexedNumber(received_command))
   166c2:	68fb      	ldr	r3, [r7, #12]
   166c4:	0018      	movs	r0, r3
   166c6:	4b1c      	ldr	r3, [pc, #112]	; (16738 <processOnSMS+0x1aac>)
   166c8:	4798      	blx	r3
   166ca:	1e03      	subs	r3, r0, #0
   166cc:	d100      	bne.n	166d0 <processOnSMS+0x1a44>
   166ce:	e255      	b.n	16b7c <processOnSMS+0x1ef0>
		{
			incomingSMSProcessed=true;
   166d0:	2328      	movs	r3, #40	; 0x28
   166d2:	33ff      	adds	r3, #255	; 0xff
   166d4:	2208      	movs	r2, #8
   166d6:	4694      	mov	ip, r2
   166d8:	44bc      	add	ip, r7
   166da:	4463      	add	r3, ip
   166dc:	2201      	movs	r2, #1
   166de:	701a      	strb	r2, [r3, #0]
			strcpy(resep_msg,"S NO ADDDED");
   166e0:	230c      	movs	r3, #12
   166e2:	2208      	movs	r2, #8
   166e4:	4694      	mov	ip, r2
   166e6:	44bc      	add	ip, r7
   166e8:	4463      	add	r3, ip
   166ea:	4a14      	ldr	r2, [pc, #80]	; (1673c <processOnSMS+0x1ab0>)
   166ec:	ca13      	ldmia	r2!, {r0, r1, r4}
   166ee:	c313      	stmia	r3!, {r0, r1, r4}
   166f0:	e244      	b.n	16b7c <processOnSMS+0x1ef0>
   166f2:	46c0      	nop			; (mov r8, r8)
   166f4:	0002a01c 	.word	0x0002a01c
   166f8:	00013eed 	.word	0x00013eed
   166fc:	00028c8b 	.word	0x00028c8b
   16700:	000289d7 	.word	0x000289d7
   16704:	000288e1 	.word	0x000288e1
   16708:	000118dd 	.word	0x000118dd
   1670c:	fffffeda 	.word	0xfffffeda
   16710:	0002a028 	.word	0x0002a028
   16714:	00028c01 	.word	0x00028c01
   16718:	0002a040 	.word	0x0002a040
   1671c:	000112d9 	.word	0x000112d9
   16720:	0002a04c 	.word	0x0002a04c
   16724:	0002a064 	.word	0x0002a064
   16728:	0002a068 	.word	0x0002a068
   1672c:	00011aa9 	.word	0x00011aa9
   16730:	0002a06c 	.word	0x0002a06c
   16734:	0002a078 	.word	0x0002a078
   16738:	00011b55 	.word	0x00011b55
   1673c:	0002a07c 	.word	0x0002a07c
		}
	}
	else if (StringstartsWith(received_command,"M+"))
   16740:	4adb      	ldr	r2, [pc, #876]	; (16ab0 <processOnSMS+0x1e24>)
   16742:	68fb      	ldr	r3, [r7, #12]
   16744:	0011      	movs	r1, r2
   16746:	0018      	movs	r0, r3
   16748:	4bda      	ldr	r3, [pc, #872]	; (16ab4 <processOnSMS+0x1e28>)
   1674a:	4798      	blx	r3
   1674c:	1e03      	subs	r3, r0, #0
   1674e:	d100      	bne.n	16752 <processOnSMS+0x1ac6>
   16750:	e091      	b.n	16876 <processOnSMS+0x1bea>
	{
		memmove(received_command,received_command+2,strlen(received_command));
   16752:	68fb      	ldr	r3, [r7, #12]
   16754:	1c9c      	adds	r4, r3, #2
   16756:	68fb      	ldr	r3, [r7, #12]
   16758:	0018      	movs	r0, r3
   1675a:	4bd7      	ldr	r3, [pc, #860]	; (16ab8 <processOnSMS+0x1e2c>)
   1675c:	4798      	blx	r3
   1675e:	0002      	movs	r2, r0
   16760:	68fb      	ldr	r3, [r7, #12]
   16762:	0021      	movs	r1, r4
   16764:	0018      	movs	r0, r3
   16766:	4bd5      	ldr	r3, [pc, #852]	; (16abc <processOnSMS+0x1e30>)
   16768:	4798      	blx	r3
		bool result = addNumber(received_command);
   1676a:	230c      	movs	r3, #12
   1676c:	33ff      	adds	r3, #255	; 0xff
   1676e:	2208      	movs	r2, #8
   16770:	18ba      	adds	r2, r7, r2
   16772:	18d4      	adds	r4, r2, r3
   16774:	68fb      	ldr	r3, [r7, #12]
   16776:	0018      	movs	r0, r3
   16778:	4bd1      	ldr	r3, [pc, #836]	; (16ac0 <processOnSMS+0x1e34>)
   1677a:	4798      	blx	r3
   1677c:	0003      	movs	r3, r0
   1677e:	7023      	strb	r3, [r4, #0]
		if(result)
   16780:	230c      	movs	r3, #12
   16782:	33ff      	adds	r3, #255	; 0xff
   16784:	2208      	movs	r2, #8
   16786:	4694      	mov	ip, r2
   16788:	44bc      	add	ip, r7
   1678a:	4463      	add	r3, ip
   1678c:	781b      	ldrb	r3, [r3, #0]
   1678e:	2b00      	cmp	r3, #0
   16790:	d100      	bne.n	16794 <processOnSMS+0x1b08>
   16792:	e1f3      	b.n	16b7c <processOnSMS+0x1ef0>
		{
			incomingSMSProcessed=true;
   16794:	2328      	movs	r3, #40	; 0x28
   16796:	33ff      	adds	r3, #255	; 0xff
   16798:	2208      	movs	r2, #8
   1679a:	4694      	mov	ip, r2
   1679c:	44bc      	add	ip, r7
   1679e:	4463      	add	r3, ip
   167a0:	2201      	movs	r2, #1
   167a2:	701a      	strb	r2, [r3, #0]
			if (response_sms_processed_cmd == true)
   167a4:	4bc7      	ldr	r3, [pc, #796]	; (16ac4 <processOnSMS+0x1e38>)
   167a6:	2294      	movs	r2, #148	; 0x94
   167a8:	0052      	lsls	r2, r2, #1
   167aa:	4694      	mov	ip, r2
   167ac:	2208      	movs	r2, #8
   167ae:	4690      	mov	r8, r2
   167b0:	44b8      	add	r8, r7
   167b2:	44c4      	add	ip, r8
   167b4:	4463      	add	r3, ip
   167b6:	781b      	ldrb	r3, [r3, #0]
   167b8:	2b00      	cmp	r3, #0
   167ba:	d100      	bne.n	167be <processOnSMS+0x1b32>
   167bc:	e1de      	b.n	16b7c <processOnSMS+0x1ef0>
			{
				strcpy(resep_msg,"MOBILE NO:");
   167be:	230c      	movs	r3, #12
   167c0:	2208      	movs	r2, #8
   167c2:	4694      	mov	ip, r2
   167c4:	44bc      	add	ip, r7
   167c6:	4463      	add	r3, ip
   167c8:	4abf      	ldr	r2, [pc, #764]	; (16ac8 <processOnSMS+0x1e3c>)
   167ca:	ca03      	ldmia	r2!, {r0, r1}
   167cc:	c303      	stmia	r3!, {r0, r1}
   167ce:	8811      	ldrh	r1, [r2, #0]
   167d0:	8019      	strh	r1, [r3, #0]
   167d2:	7892      	ldrb	r2, [r2, #2]
   167d4:	709a      	strb	r2, [r3, #2]
				strcat(resep_msg,"\n");
   167d6:	230c      	movs	r3, #12
   167d8:	2208      	movs	r2, #8
   167da:	4694      	mov	ip, r2
   167dc:	44bc      	add	ip, r7
   167de:	4463      	add	r3, ip
   167e0:	0018      	movs	r0, r3
   167e2:	4bb5      	ldr	r3, [pc, #724]	; (16ab8 <processOnSMS+0x1e2c>)
   167e4:	4798      	blx	r3
   167e6:	0003      	movs	r3, r0
   167e8:	001a      	movs	r2, r3
   167ea:	230c      	movs	r3, #12
   167ec:	2108      	movs	r1, #8
   167ee:	468c      	mov	ip, r1
   167f0:	44bc      	add	ip, r7
   167f2:	4463      	add	r3, ip
   167f4:	189a      	adds	r2, r3, r2
   167f6:	4bb5      	ldr	r3, [pc, #724]	; (16acc <processOnSMS+0x1e40>)
   167f8:	0010      	movs	r0, r2
   167fa:	0019      	movs	r1, r3
   167fc:	2302      	movs	r3, #2
   167fe:	001a      	movs	r2, r3
   16800:	4bb3      	ldr	r3, [pc, #716]	; (16ad0 <processOnSMS+0x1e44>)
   16802:	4798      	blx	r3
				strcat(resep_msg,received_command);
   16804:	68fa      	ldr	r2, [r7, #12]
   16806:	230c      	movs	r3, #12
   16808:	2108      	movs	r1, #8
   1680a:	468c      	mov	ip, r1
   1680c:	44bc      	add	ip, r7
   1680e:	4463      	add	r3, ip
   16810:	0011      	movs	r1, r2
   16812:	0018      	movs	r0, r3
   16814:	4baf      	ldr	r3, [pc, #700]	; (16ad4 <processOnSMS+0x1e48>)
   16816:	4798      	blx	r3
				strcat(resep_msg,"\n");
   16818:	230c      	movs	r3, #12
   1681a:	2208      	movs	r2, #8
   1681c:	4694      	mov	ip, r2
   1681e:	44bc      	add	ip, r7
   16820:	4463      	add	r3, ip
   16822:	0018      	movs	r0, r3
   16824:	4ba4      	ldr	r3, [pc, #656]	; (16ab8 <processOnSMS+0x1e2c>)
   16826:	4798      	blx	r3
   16828:	0003      	movs	r3, r0
   1682a:	001a      	movs	r2, r3
   1682c:	230c      	movs	r3, #12
   1682e:	2108      	movs	r1, #8
   16830:	468c      	mov	ip, r1
   16832:	44bc      	add	ip, r7
   16834:	4463      	add	r3, ip
   16836:	189a      	adds	r2, r3, r2
   16838:	4ba4      	ldr	r3, [pc, #656]	; (16acc <processOnSMS+0x1e40>)
   1683a:	0010      	movs	r0, r2
   1683c:	0019      	movs	r1, r3
   1683e:	2302      	movs	r3, #2
   16840:	001a      	movs	r2, r3
   16842:	4ba3      	ldr	r3, [pc, #652]	; (16ad0 <processOnSMS+0x1e44>)
   16844:	4798      	blx	r3
				strcat(resep_msg,"ADDED SUCCESSFULLY");
   16846:	230c      	movs	r3, #12
   16848:	2208      	movs	r2, #8
   1684a:	4694      	mov	ip, r2
   1684c:	44bc      	add	ip, r7
   1684e:	4463      	add	r3, ip
   16850:	0018      	movs	r0, r3
   16852:	4b99      	ldr	r3, [pc, #612]	; (16ab8 <processOnSMS+0x1e2c>)
   16854:	4798      	blx	r3
   16856:	0003      	movs	r3, r0
   16858:	001a      	movs	r2, r3
   1685a:	230c      	movs	r3, #12
   1685c:	2108      	movs	r1, #8
   1685e:	468c      	mov	ip, r1
   16860:	44bc      	add	ip, r7
   16862:	4463      	add	r3, ip
   16864:	189a      	adds	r2, r3, r2
   16866:	4b9c      	ldr	r3, [pc, #624]	; (16ad8 <processOnSMS+0x1e4c>)
   16868:	0010      	movs	r0, r2
   1686a:	0019      	movs	r1, r3
   1686c:	2313      	movs	r3, #19
   1686e:	001a      	movs	r2, r3
   16870:	4b97      	ldr	r3, [pc, #604]	; (16ad0 <processOnSMS+0x1e44>)
   16872:	4798      	blx	r3
   16874:	e182      	b.n	16b7c <processOnSMS+0x1ef0>
			}
		}
	}
	else if (StringstartsWith(received_command,"M-"))
   16876:	4a99      	ldr	r2, [pc, #612]	; (16adc <processOnSMS+0x1e50>)
   16878:	68fb      	ldr	r3, [r7, #12]
   1687a:	0011      	movs	r1, r2
   1687c:	0018      	movs	r0, r3
   1687e:	4b8d      	ldr	r3, [pc, #564]	; (16ab4 <processOnSMS+0x1e28>)
   16880:	4798      	blx	r3
   16882:	1e03      	subs	r3, r0, #0
   16884:	d100      	bne.n	16888 <processOnSMS+0x1bfc>
   16886:	e091      	b.n	169ac <processOnSMS+0x1d20>
	{
		memmove(received_command,received_command+2,strlen(received_command));
   16888:	68fb      	ldr	r3, [r7, #12]
   1688a:	1c9c      	adds	r4, r3, #2
   1688c:	68fb      	ldr	r3, [r7, #12]
   1688e:	0018      	movs	r0, r3
   16890:	4b89      	ldr	r3, [pc, #548]	; (16ab8 <processOnSMS+0x1e2c>)
   16892:	4798      	blx	r3
   16894:	0002      	movs	r2, r0
   16896:	68fb      	ldr	r3, [r7, #12]
   16898:	0021      	movs	r1, r4
   1689a:	0018      	movs	r0, r3
   1689c:	4b87      	ldr	r3, [pc, #540]	; (16abc <processOnSMS+0x1e30>)
   1689e:	4798      	blx	r3
		bool result = removeNumber(received_command);
   168a0:	2385      	movs	r3, #133	; 0x85
   168a2:	005b      	lsls	r3, r3, #1
   168a4:	2208      	movs	r2, #8
   168a6:	18ba      	adds	r2, r7, r2
   168a8:	18d4      	adds	r4, r2, r3
   168aa:	68fb      	ldr	r3, [r7, #12]
   168ac:	0018      	movs	r0, r3
   168ae:	4b8c      	ldr	r3, [pc, #560]	; (16ae0 <processOnSMS+0x1e54>)
   168b0:	4798      	blx	r3
   168b2:	0003      	movs	r3, r0
   168b4:	7023      	strb	r3, [r4, #0]
		if(result)
   168b6:	2385      	movs	r3, #133	; 0x85
   168b8:	005b      	lsls	r3, r3, #1
   168ba:	2208      	movs	r2, #8
   168bc:	4694      	mov	ip, r2
   168be:	44bc      	add	ip, r7
   168c0:	4463      	add	r3, ip
   168c2:	781b      	ldrb	r3, [r3, #0]
   168c4:	2b00      	cmp	r3, #0
   168c6:	d100      	bne.n	168ca <processOnSMS+0x1c3e>
   168c8:	e158      	b.n	16b7c <processOnSMS+0x1ef0>
		{
			incomingSMSProcessed=true;
   168ca:	2328      	movs	r3, #40	; 0x28
   168cc:	33ff      	adds	r3, #255	; 0xff
   168ce:	2208      	movs	r2, #8
   168d0:	4694      	mov	ip, r2
   168d2:	44bc      	add	ip, r7
   168d4:	4463      	add	r3, ip
   168d6:	2201      	movs	r2, #1
   168d8:	701a      	strb	r2, [r3, #0]
			
			if (response_sms_processed_cmd == true)
   168da:	4b7a      	ldr	r3, [pc, #488]	; (16ac4 <processOnSMS+0x1e38>)
   168dc:	2294      	movs	r2, #148	; 0x94
   168de:	0052      	lsls	r2, r2, #1
   168e0:	4694      	mov	ip, r2
   168e2:	2208      	movs	r2, #8
   168e4:	4690      	mov	r8, r2
   168e6:	44b8      	add	r8, r7
   168e8:	44c4      	add	ip, r8
   168ea:	4463      	add	r3, ip
   168ec:	781b      	ldrb	r3, [r3, #0]
   168ee:	2b00      	cmp	r3, #0
   168f0:	d100      	bne.n	168f4 <processOnSMS+0x1c68>
   168f2:	e143      	b.n	16b7c <processOnSMS+0x1ef0>
			{
				strcpy(resep_msg,"MOBILE NO:");
   168f4:	230c      	movs	r3, #12
   168f6:	2208      	movs	r2, #8
   168f8:	4694      	mov	ip, r2
   168fa:	44bc      	add	ip, r7
   168fc:	4463      	add	r3, ip
   168fe:	4a72      	ldr	r2, [pc, #456]	; (16ac8 <processOnSMS+0x1e3c>)
   16900:	ca03      	ldmia	r2!, {r0, r1}
   16902:	c303      	stmia	r3!, {r0, r1}
   16904:	8811      	ldrh	r1, [r2, #0]
   16906:	8019      	strh	r1, [r3, #0]
   16908:	7892      	ldrb	r2, [r2, #2]
   1690a:	709a      	strb	r2, [r3, #2]
				strcat(resep_msg,"\n");
   1690c:	230c      	movs	r3, #12
   1690e:	2208      	movs	r2, #8
   16910:	4694      	mov	ip, r2
   16912:	44bc      	add	ip, r7
   16914:	4463      	add	r3, ip
   16916:	0018      	movs	r0, r3
   16918:	4b67      	ldr	r3, [pc, #412]	; (16ab8 <processOnSMS+0x1e2c>)
   1691a:	4798      	blx	r3
   1691c:	0003      	movs	r3, r0
   1691e:	001a      	movs	r2, r3
   16920:	230c      	movs	r3, #12
   16922:	2108      	movs	r1, #8
   16924:	468c      	mov	ip, r1
   16926:	44bc      	add	ip, r7
   16928:	4463      	add	r3, ip
   1692a:	189a      	adds	r2, r3, r2
   1692c:	4b67      	ldr	r3, [pc, #412]	; (16acc <processOnSMS+0x1e40>)
   1692e:	0010      	movs	r0, r2
   16930:	0019      	movs	r1, r3
   16932:	2302      	movs	r3, #2
   16934:	001a      	movs	r2, r3
   16936:	4b66      	ldr	r3, [pc, #408]	; (16ad0 <processOnSMS+0x1e44>)
   16938:	4798      	blx	r3
				strcat(resep_msg,received_command);
   1693a:	68fa      	ldr	r2, [r7, #12]
   1693c:	230c      	movs	r3, #12
   1693e:	2108      	movs	r1, #8
   16940:	468c      	mov	ip, r1
   16942:	44bc      	add	ip, r7
   16944:	4463      	add	r3, ip
   16946:	0011      	movs	r1, r2
   16948:	0018      	movs	r0, r3
   1694a:	4b62      	ldr	r3, [pc, #392]	; (16ad4 <processOnSMS+0x1e48>)
   1694c:	4798      	blx	r3
				strcat(resep_msg,"\n");
   1694e:	230c      	movs	r3, #12
   16950:	2208      	movs	r2, #8
   16952:	4694      	mov	ip, r2
   16954:	44bc      	add	ip, r7
   16956:	4463      	add	r3, ip
   16958:	0018      	movs	r0, r3
   1695a:	4b57      	ldr	r3, [pc, #348]	; (16ab8 <processOnSMS+0x1e2c>)
   1695c:	4798      	blx	r3
   1695e:	0003      	movs	r3, r0
   16960:	001a      	movs	r2, r3
   16962:	230c      	movs	r3, #12
   16964:	2108      	movs	r1, #8
   16966:	468c      	mov	ip, r1
   16968:	44bc      	add	ip, r7
   1696a:	4463      	add	r3, ip
   1696c:	189a      	adds	r2, r3, r2
   1696e:	4b57      	ldr	r3, [pc, #348]	; (16acc <processOnSMS+0x1e40>)
   16970:	0010      	movs	r0, r2
   16972:	0019      	movs	r1, r3
   16974:	2302      	movs	r3, #2
   16976:	001a      	movs	r2, r3
   16978:	4b55      	ldr	r3, [pc, #340]	; (16ad0 <processOnSMS+0x1e44>)
   1697a:	4798      	blx	r3
				strcat(resep_msg,"REMOVED SUCCESSFULLY");
   1697c:	230c      	movs	r3, #12
   1697e:	2208      	movs	r2, #8
   16980:	4694      	mov	ip, r2
   16982:	44bc      	add	ip, r7
   16984:	4463      	add	r3, ip
   16986:	0018      	movs	r0, r3
   16988:	4b4b      	ldr	r3, [pc, #300]	; (16ab8 <processOnSMS+0x1e2c>)
   1698a:	4798      	blx	r3
   1698c:	0003      	movs	r3, r0
   1698e:	001a      	movs	r2, r3
   16990:	230c      	movs	r3, #12
   16992:	2108      	movs	r1, #8
   16994:	468c      	mov	ip, r1
   16996:	44bc      	add	ip, r7
   16998:	4463      	add	r3, ip
   1699a:	189a      	adds	r2, r3, r2
   1699c:	4b51      	ldr	r3, [pc, #324]	; (16ae4 <processOnSMS+0x1e58>)
   1699e:	0010      	movs	r0, r2
   169a0:	0019      	movs	r1, r3
   169a2:	2315      	movs	r3, #21
   169a4:	001a      	movs	r2, r3
   169a6:	4b4a      	ldr	r3, [pc, #296]	; (16ad0 <processOnSMS+0x1e44>)
   169a8:	4798      	blx	r3
   169aa:	e0e7      	b.n	16b7c <processOnSMS+0x1ef0>
			}
		}
	}
	else if (StringstartsWith(received_command,"AM+"))
   169ac:	4a4e      	ldr	r2, [pc, #312]	; (16ae8 <processOnSMS+0x1e5c>)
   169ae:	68fb      	ldr	r3, [r7, #12]
   169b0:	0011      	movs	r1, r2
   169b2:	0018      	movs	r0, r3
   169b4:	4b3f      	ldr	r3, [pc, #252]	; (16ab4 <processOnSMS+0x1e28>)
   169b6:	4798      	blx	r3
   169b8:	1e03      	subs	r3, r0, #0
   169ba:	d042      	beq.n	16a42 <processOnSMS+0x1db6>
	{
		//if (isNumeric(str))
		{
			memmove(received_command,received_command+3,strlen(received_command));
   169bc:	68fb      	ldr	r3, [r7, #12]
   169be:	1cdc      	adds	r4, r3, #3
   169c0:	68fb      	ldr	r3, [r7, #12]
   169c2:	0018      	movs	r0, r3
   169c4:	4b3c      	ldr	r3, [pc, #240]	; (16ab8 <processOnSMS+0x1e2c>)
   169c6:	4798      	blx	r3
   169c8:	0002      	movs	r2, r0
   169ca:	68fb      	ldr	r3, [r7, #12]
   169cc:	0021      	movs	r1, r4
   169ce:	0018      	movs	r0, r3
   169d0:	4b3a      	ldr	r3, [pc, #232]	; (16abc <processOnSMS+0x1e30>)
   169d2:	4798      	blx	r3
			bool result  = addAlternateNumber(received_command);
   169d4:	230a      	movs	r3, #10
   169d6:	33ff      	adds	r3, #255	; 0xff
   169d8:	2208      	movs	r2, #8
   169da:	18ba      	adds	r2, r7, r2
   169dc:	18d4      	adds	r4, r2, r3
   169de:	68fb      	ldr	r3, [r7, #12]
   169e0:	0018      	movs	r0, r3
   169e2:	4b42      	ldr	r3, [pc, #264]	; (16aec <processOnSMS+0x1e60>)
   169e4:	4798      	blx	r3
   169e6:	0003      	movs	r3, r0
   169e8:	7023      	strb	r3, [r4, #0]
			incomingSMSProcessed=true;
   169ea:	2328      	movs	r3, #40	; 0x28
   169ec:	33ff      	adds	r3, #255	; 0xff
   169ee:	2208      	movs	r2, #8
   169f0:	4694      	mov	ip, r2
   169f2:	44bc      	add	ip, r7
   169f4:	4463      	add	r3, ip
   169f6:	2201      	movs	r2, #1
   169f8:	701a      	strb	r2, [r3, #0]
			if(result)
   169fa:	230a      	movs	r3, #10
   169fc:	33ff      	adds	r3, #255	; 0xff
   169fe:	2208      	movs	r2, #8
   16a00:	4694      	mov	ip, r2
   16a02:	44bc      	add	ip, r7
   16a04:	4463      	add	r3, ip
   16a06:	781b      	ldrb	r3, [r3, #0]
   16a08:	2b00      	cmp	r3, #0
   16a0a:	d100      	bne.n	16a0e <processOnSMS+0x1d82>
   16a0c:	e0b6      	b.n	16b7c <processOnSMS+0x1ef0>
			{
				if (response_sms_processed_cmd == true)
   16a0e:	4b2d      	ldr	r3, [pc, #180]	; (16ac4 <processOnSMS+0x1e38>)
   16a10:	2294      	movs	r2, #148	; 0x94
   16a12:	0052      	lsls	r2, r2, #1
   16a14:	4694      	mov	ip, r2
   16a16:	2208      	movs	r2, #8
   16a18:	4690      	mov	r8, r2
   16a1a:	44b8      	add	r8, r7
   16a1c:	44c4      	add	ip, r8
   16a1e:	4463      	add	r3, ip
   16a20:	781b      	ldrb	r3, [r3, #0]
   16a22:	2b00      	cmp	r3, #0
   16a24:	d100      	bne.n	16a28 <processOnSMS+0x1d9c>
   16a26:	e0a9      	b.n	16b7c <processOnSMS+0x1ef0>
				{
					strcpy(resep_msg,"ALTERNATE MOBILE NO ADD SUCCESS");
   16a28:	230c      	movs	r3, #12
   16a2a:	2208      	movs	r2, #8
   16a2c:	4694      	mov	ip, r2
   16a2e:	44bc      	add	ip, r7
   16a30:	4463      	add	r3, ip
   16a32:	4a2f      	ldr	r2, [pc, #188]	; (16af0 <processOnSMS+0x1e64>)
   16a34:	ca13      	ldmia	r2!, {r0, r1, r4}
   16a36:	c313      	stmia	r3!, {r0, r1, r4}
   16a38:	ca13      	ldmia	r2!, {r0, r1, r4}
   16a3a:	c313      	stmia	r3!, {r0, r1, r4}
   16a3c:	ca03      	ldmia	r2!, {r0, r1}
   16a3e:	c303      	stmia	r3!, {r0, r1}
   16a40:	e09c      	b.n	16b7c <processOnSMS+0x1ef0>
				}
			}
		}
	}
	else if (StringstartsWith(received_command,"MM+"))
   16a42:	4a2c      	ldr	r2, [pc, #176]	; (16af4 <processOnSMS+0x1e68>)
   16a44:	68fb      	ldr	r3, [r7, #12]
   16a46:	0011      	movs	r1, r2
   16a48:	0018      	movs	r0, r3
   16a4a:	4b1a      	ldr	r3, [pc, #104]	; (16ab4 <processOnSMS+0x1e28>)
   16a4c:	4798      	blx	r3
   16a4e:	1e03      	subs	r3, r0, #0
   16a50:	d056      	beq.n	16b00 <processOnSMS+0x1e74>
	{
		//if (isNumeric(str))
		{
			memmove(received_command,received_command+3,strlen(received_command));
   16a52:	68fb      	ldr	r3, [r7, #12]
   16a54:	1cdc      	adds	r4, r3, #3
   16a56:	68fb      	ldr	r3, [r7, #12]
   16a58:	0018      	movs	r0, r3
   16a5a:	4b17      	ldr	r3, [pc, #92]	; (16ab8 <processOnSMS+0x1e2c>)
   16a5c:	4798      	blx	r3
   16a5e:	0002      	movs	r2, r0
   16a60:	68fb      	ldr	r3, [r7, #12]
   16a62:	0021      	movs	r1, r4
   16a64:	0018      	movs	r0, r3
   16a66:	4b15      	ldr	r3, [pc, #84]	; (16abc <processOnSMS+0x1e30>)
   16a68:	4798      	blx	r3
			addM2MNumber(received_command);
   16a6a:	68fb      	ldr	r3, [r7, #12]
   16a6c:	0018      	movs	r0, r3
   16a6e:	4b22      	ldr	r3, [pc, #136]	; (16af8 <processOnSMS+0x1e6c>)
   16a70:	4798      	blx	r3
			incomingSMSProcessed=true;
   16a72:	2328      	movs	r3, #40	; 0x28
   16a74:	33ff      	adds	r3, #255	; 0xff
   16a76:	2208      	movs	r2, #8
   16a78:	4694      	mov	ip, r2
   16a7a:	44bc      	add	ip, r7
   16a7c:	4463      	add	r3, ip
   16a7e:	2201      	movs	r2, #1
   16a80:	701a      	strb	r2, [r3, #0]

			if (response_sms_processed_cmd == true)
   16a82:	4b10      	ldr	r3, [pc, #64]	; (16ac4 <processOnSMS+0x1e38>)
   16a84:	2294      	movs	r2, #148	; 0x94
   16a86:	0052      	lsls	r2, r2, #1
   16a88:	4694      	mov	ip, r2
   16a8a:	2208      	movs	r2, #8
   16a8c:	4690      	mov	r8, r2
   16a8e:	44b8      	add	r8, r7
   16a90:	44c4      	add	ip, r8
   16a92:	4463      	add	r3, ip
   16a94:	781b      	ldrb	r3, [r3, #0]
   16a96:	2b00      	cmp	r3, #0
   16a98:	d070      	beq.n	16b7c <processOnSMS+0x1ef0>
			{
				strcpy(resep_msg,"M2M NO. ADDED");
   16a9a:	230c      	movs	r3, #12
   16a9c:	2208      	movs	r2, #8
   16a9e:	4694      	mov	ip, r2
   16aa0:	44bc      	add	ip, r7
   16aa2:	4463      	add	r3, ip
   16aa4:	4a15      	ldr	r2, [pc, #84]	; (16afc <processOnSMS+0x1e70>)
   16aa6:	ca13      	ldmia	r2!, {r0, r1, r4}
   16aa8:	c313      	stmia	r3!, {r0, r1, r4}
   16aaa:	8812      	ldrh	r2, [r2, #0]
   16aac:	801a      	strh	r2, [r3, #0]
   16aae:	e065      	b.n	16b7c <processOnSMS+0x1ef0>
   16ab0:	0002a088 	.word	0x0002a088
   16ab4:	00013eed 	.word	0x00013eed
   16ab8:	00028c8b 	.word	0x00028c8b
   16abc:	000289d7 	.word	0x000289d7
   16ac0:	00010ed5 	.word	0x00010ed5
   16ac4:	fffffeda 	.word	0xfffffeda
   16ac8:	0002a08c 	.word	0x0002a08c
   16acc:	0002a098 	.word	0x0002a098
   16ad0:	000289c5 	.word	0x000289c5
   16ad4:	00028c45 	.word	0x00028c45
   16ad8:	0002a09c 	.word	0x0002a09c
   16adc:	0002a0b0 	.word	0x0002a0b0
   16ae0:	00010fd1 	.word	0x00010fd1
   16ae4:	0002a0b4 	.word	0x0002a0b4
   16ae8:	0002a0cc 	.word	0x0002a0cc
   16aec:	0001121d 	.word	0x0001121d
   16af0:	0002a0d0 	.word	0x0002a0d0
   16af4:	0002a0f0 	.word	0x0002a0f0
   16af8:	00010c2d 	.word	0x00010c2d
   16afc:	0002a0f4 	.word	0x0002a0f4
			}
		}
	}
	
	else if (StringstartsWith(received_command,"MR+"))
   16b00:	4a44      	ldr	r2, [pc, #272]	; (16c14 <processOnSMS+0x1f88>)
   16b02:	68fb      	ldr	r3, [r7, #12]
   16b04:	0011      	movs	r1, r2
   16b06:	0018      	movs	r0, r3
   16b08:	4b43      	ldr	r3, [pc, #268]	; (16c18 <processOnSMS+0x1f8c>)
   16b0a:	4798      	blx	r3
   16b0c:	1e03      	subs	r3, r0, #0
   16b0e:	d035      	beq.n	16b7c <processOnSMS+0x1ef0>
	{
		//if (isNumeric(str))
		if(factory_settings_parameter_struct.ENABLE_M2M)
   16b10:	4b42      	ldr	r3, [pc, #264]	; (16c1c <processOnSMS+0x1f90>)
   16b12:	78db      	ldrb	r3, [r3, #3]
   16b14:	2b00      	cmp	r3, #0
   16b16:	d031      	beq.n	16b7c <processOnSMS+0x1ef0>
		{
			memmove(received_command,received_command+3,strlen(received_command));
   16b18:	68fb      	ldr	r3, [r7, #12]
   16b1a:	1cdc      	adds	r4, r3, #3
   16b1c:	68fb      	ldr	r3, [r7, #12]
   16b1e:	0018      	movs	r0, r3
   16b20:	4b3f      	ldr	r3, [pc, #252]	; (16c20 <processOnSMS+0x1f94>)
   16b22:	4798      	blx	r3
   16b24:	0002      	movs	r2, r0
   16b26:	68fb      	ldr	r3, [r7, #12]
   16b28:	0021      	movs	r1, r4
   16b2a:	0018      	movs	r0, r3
   16b2c:	4b3d      	ldr	r3, [pc, #244]	; (16c24 <processOnSMS+0x1f98>)
   16b2e:	4798      	blx	r3
			incomingSMSProcessed=true;
   16b30:	2328      	movs	r3, #40	; 0x28
   16b32:	33ff      	adds	r3, #255	; 0xff
   16b34:	2208      	movs	r2, #8
   16b36:	4694      	mov	ip, r2
   16b38:	44bc      	add	ip, r7
   16b3a:	4463      	add	r3, ip
   16b3c:	2201      	movs	r2, #1
   16b3e:	701a      	strb	r2, [r3, #0]
			
			addM2MRemoteNumber(received_command);
   16b40:	68fb      	ldr	r3, [r7, #12]
   16b42:	0018      	movs	r0, r3
   16b44:	4b38      	ldr	r3, [pc, #224]	; (16c28 <processOnSMS+0x1f9c>)
   16b46:	4798      	blx	r3
			if (response_sms_processed_cmd == true)
   16b48:	4b38      	ldr	r3, [pc, #224]	; (16c2c <processOnSMS+0x1fa0>)
   16b4a:	2294      	movs	r2, #148	; 0x94
   16b4c:	0052      	lsls	r2, r2, #1
   16b4e:	4694      	mov	ip, r2
   16b50:	2208      	movs	r2, #8
   16b52:	4690      	mov	r8, r2
   16b54:	44b8      	add	r8, r7
   16b56:	44c4      	add	ip, r8
   16b58:	4463      	add	r3, ip
   16b5a:	781b      	ldrb	r3, [r3, #0]
   16b5c:	2b00      	cmp	r3, #0
   16b5e:	d00d      	beq.n	16b7c <processOnSMS+0x1ef0>
			{
				strcpy(resep_msg,"M2M REMOTE NO. ADDED");
   16b60:	230c      	movs	r3, #12
   16b62:	2208      	movs	r2, #8
   16b64:	4694      	mov	ip, r2
   16b66:	44bc      	add	ip, r7
   16b68:	4463      	add	r3, ip
   16b6a:	4a31      	ldr	r2, [pc, #196]	; (16c30 <processOnSMS+0x1fa4>)
   16b6c:	ca13      	ldmia	r2!, {r0, r1, r4}
   16b6e:	c313      	stmia	r3!, {r0, r1, r4}
   16b70:	ca03      	ldmia	r2!, {r0, r1}
   16b72:	c303      	stmia	r3!, {r0, r1}
   16b74:	7812      	ldrb	r2, [r2, #0]
   16b76:	701a      	strb	r2, [r3, #0]
   16b78:	e000      	b.n	16b7c <processOnSMS+0x1ef0>
		if (alternateNumber_struct.alterNumberPresent)
   16b7a:	46c0      	nop			; (mov r8, r8)
			}
		}
	}
	
	if (response_sms_processed_cmd == true)
   16b7c:	4b2b      	ldr	r3, [pc, #172]	; (16c2c <processOnSMS+0x1fa0>)
   16b7e:	2294      	movs	r2, #148	; 0x94
   16b80:	0052      	lsls	r2, r2, #1
   16b82:	4694      	mov	ip, r2
   16b84:	2208      	movs	r2, #8
   16b86:	4690      	mov	r8, r2
   16b88:	44b8      	add	r8, r7
   16b8a:	44c4      	add	ip, r8
   16b8c:	4463      	add	r3, ip
   16b8e:	781b      	ldrb	r3, [r3, #0]
   16b90:	2b00      	cmp	r3, #0
   16b92:	d03a      	beq.n	16c0a <processOnSMS+0x1f7e>
	{
		if(!incomingSMSProcessed)
   16b94:	2328      	movs	r3, #40	; 0x28
   16b96:	33ff      	adds	r3, #255	; 0xff
   16b98:	2208      	movs	r2, #8
   16b9a:	4694      	mov	ip, r2
   16b9c:	44bc      	add	ip, r7
   16b9e:	4463      	add	r3, ip
   16ba0:	781b      	ldrb	r3, [r3, #0]
   16ba2:	2201      	movs	r2, #1
   16ba4:	4053      	eors	r3, r2
   16ba6:	b2db      	uxtb	r3, r3
   16ba8:	2b00      	cmp	r3, #0
   16baa:	d011      	beq.n	16bd0 <processOnSMS+0x1f44>
		{
			sprintf(resep_msg,"ERROR : %s",*copy_received_command);
   16bac:	238c      	movs	r3, #140	; 0x8c
   16bae:	005b      	lsls	r3, r3, #1
   16bb0:	2208      	movs	r2, #8
   16bb2:	4694      	mov	ip, r2
   16bb4:	44bc      	add	ip, r7
   16bb6:	4463      	add	r3, ip
   16bb8:	681b      	ldr	r3, [r3, #0]
   16bba:	781b      	ldrb	r3, [r3, #0]
   16bbc:	001a      	movs	r2, r3
   16bbe:	491d      	ldr	r1, [pc, #116]	; (16c34 <processOnSMS+0x1fa8>)
   16bc0:	230c      	movs	r3, #12
   16bc2:	2008      	movs	r0, #8
   16bc4:	4684      	mov	ip, r0
   16bc6:	44bc      	add	ip, r7
   16bc8:	4463      	add	r3, ip
   16bca:	0018      	movs	r0, r3
   16bcc:	4b1a      	ldr	r3, [pc, #104]	; (16c38 <processOnSMS+0x1fac>)
   16bce:	4798      	blx	r3
		}
		setCallStateOnLCD(LCDCALLSTATE_OUTGOINGSMS,phone_number,false);
   16bd0:	23a0      	movs	r3, #160	; 0xa0
   16bd2:	005b      	lsls	r3, r3, #1
   16bd4:	2208      	movs	r2, #8
   16bd6:	4694      	mov	ip, r2
   16bd8:	44bc      	add	ip, r7
   16bda:	4463      	add	r3, ip
   16bdc:	681b      	ldr	r3, [r3, #0]
   16bde:	2200      	movs	r2, #0
   16be0:	0019      	movs	r1, r3
   16be2:	2005      	movs	r0, #5
   16be4:	4b15      	ldr	r3, [pc, #84]	; (16c3c <processOnSMS+0x1fb0>)
   16be6:	4798      	blx	r3
		gsm_send_sms(phone_number,resep_msg);
   16be8:	230c      	movs	r3, #12
   16bea:	2208      	movs	r2, #8
   16bec:	18ba      	adds	r2, r7, r2
   16bee:	18d2      	adds	r2, r2, r3
   16bf0:	23a0      	movs	r3, #160	; 0xa0
   16bf2:	005b      	lsls	r3, r3, #1
   16bf4:	2108      	movs	r1, #8
   16bf6:	468c      	mov	ip, r1
   16bf8:	44bc      	add	ip, r7
   16bfa:	4463      	add	r3, ip
   16bfc:	681b      	ldr	r3, [r3, #0]
   16bfe:	0011      	movs	r1, r2
   16c00:	0018      	movs	r0, r3
   16c02:	4b0f      	ldr	r3, [pc, #60]	; (16c40 <processOnSMS+0x1fb4>)
   16c04:	4798      	blx	r3
   16c06:	e000      	b.n	16c0a <processOnSMS+0x1f7e>
		return;
   16c08:	46c0      	nop			; (mov r8, r8)
	}
}
   16c0a:	46bd      	mov	sp, r7
   16c0c:	b04c      	add	sp, #304	; 0x130
   16c0e:	bc04      	pop	{r2}
   16c10:	4690      	mov	r8, r2
   16c12:	bdf0      	pop	{r4, r5, r6, r7, pc}
   16c14:	0002a104 	.word	0x0002a104
   16c18:	00013eed 	.word	0x00013eed
   16c1c:	20000638 	.word	0x20000638
   16c20:	00028c8b 	.word	0x00028c8b
   16c24:	000289d7 	.word	0x000289d7
   16c28:	00010c95 	.word	0x00010c95
   16c2c:	fffffeda 	.word	0xfffffeda
   16c30:	0002a108 	.word	0x0002a108
   16c34:	0002a120 	.word	0x0002a120
   16c38:	00028c01 	.word	0x00028c01
   16c3c:	0001c729 	.word	0x0001c729
   16c40:	000129ed 	.word	0x000129ed

00016c44 <buildStatusMessage>:

void buildStatusMessage(char *resep_msg)
{
   16c44:	b5f0      	push	{r4, r5, r6, r7, lr}
   16c46:	b091      	sub	sp, #68	; 0x44
   16c48:	af06      	add	r7, sp, #24
   16c4a:	6078      	str	r0, [r7, #4]
	uint8_t network= gsm_getsignalstrength();
   16c4c:	2327      	movs	r3, #39	; 0x27
   16c4e:	18fc      	adds	r4, r7, r3
   16c50:	4b32      	ldr	r3, [pc, #200]	; (16d1c <buildStatusMessage+0xd8>)
   16c52:	4798      	blx	r3
   16c54:	0003      	movs	r3, r0
   16c56:	7023      	strb	r3, [r4, #0]
	char strACState[10],strSeq[7],strMotor[5];
	switch(structThreePhase_state.u8t_phase_ac_state)
   16c58:	4b31      	ldr	r3, [pc, #196]	; (16d20 <buildStatusMessage+0xdc>)
   16c5a:	785b      	ldrb	r3, [r3, #1]
   16c5c:	b2db      	uxtb	r3, r3
   16c5e:	2b02      	cmp	r3, #2
   16c60:	d009      	beq.n	16c76 <buildStatusMessage+0x32>
   16c62:	2b03      	cmp	r3, #3
   16c64:	d10d      	bne.n	16c82 <buildStatusMessage+0x3e>
	{
		case AC_3PH:
		sprintf(strACState,(const uint8_t*)("ON"));
   16c66:	231c      	movs	r3, #28
   16c68:	18fb      	adds	r3, r7, r3
   16c6a:	4a2e      	ldr	r2, [pc, #184]	; (16d24 <buildStatusMessage+0xe0>)
   16c6c:	8811      	ldrh	r1, [r2, #0]
   16c6e:	8019      	strh	r1, [r3, #0]
   16c70:	7892      	ldrb	r2, [r2, #2]
   16c72:	709a      	strb	r2, [r3, #2]
		break;
   16c74:	e00a      	b.n	16c8c <buildStatusMessage+0x48>
		case AC_2PH:
		sprintf(strACState,(const uint8_t*)("2 PHASE"));
   16c76:	231c      	movs	r3, #28
   16c78:	18fb      	adds	r3, r7, r3
   16c7a:	4a2b      	ldr	r2, [pc, #172]	; (16d28 <buildStatusMessage+0xe4>)
   16c7c:	ca03      	ldmia	r2!, {r0, r1}
   16c7e:	c303      	stmia	r3!, {r0, r1}
		break;
   16c80:	e004      	b.n	16c8c <buildStatusMessage+0x48>
		default:
		sprintf(strACState,(const uint8_t*)("OFF"));
   16c82:	231c      	movs	r3, #28
   16c84:	18fb      	adds	r3, r7, r3
   16c86:	4a29      	ldr	r2, [pc, #164]	; (16d2c <buildStatusMessage+0xe8>)
   16c88:	601a      	str	r2, [r3, #0]
		break;
   16c8a:	46c0      	nop			; (mov r8, r8)
	}
	
	if(structThreePhase_state.u8t_phase_sequence_flag == THREEPHASE_OK)
   16c8c:	4b24      	ldr	r3, [pc, #144]	; (16d20 <buildStatusMessage+0xdc>)
   16c8e:	781b      	ldrb	r3, [r3, #0]
   16c90:	b2db      	uxtb	r3, r3
   16c92:	2b02      	cmp	r3, #2
   16c94:	d107      	bne.n	16ca6 <buildStatusMessage+0x62>
	{
		sprintf(strSeq,(const uint8_t*)("OK"));
   16c96:	2314      	movs	r3, #20
   16c98:	18fb      	adds	r3, r7, r3
   16c9a:	4a25      	ldr	r2, [pc, #148]	; (16d30 <buildStatusMessage+0xec>)
   16c9c:	8811      	ldrh	r1, [r2, #0]
   16c9e:	8019      	strh	r1, [r3, #0]
   16ca0:	7892      	ldrb	r2, [r2, #2]
   16ca2:	709a      	strb	r2, [r3, #2]
   16ca4:	e006      	b.n	16cb4 <buildStatusMessage+0x70>
	}
	else
	{
		sprintf(strSeq,(const uint8_t*)("ERROR"));
   16ca6:	2314      	movs	r3, #20
   16ca8:	18fb      	adds	r3, r7, r3
   16caa:	4a22      	ldr	r2, [pc, #136]	; (16d34 <buildStatusMessage+0xf0>)
   16cac:	6811      	ldr	r1, [r2, #0]
   16cae:	6019      	str	r1, [r3, #0]
   16cb0:	8892      	ldrh	r2, [r2, #4]
   16cb2:	809a      	strh	r2, [r3, #4]
	}
	
	if(getMotorState())
   16cb4:	4b20      	ldr	r3, [pc, #128]	; (16d38 <buildStatusMessage+0xf4>)
   16cb6:	4798      	blx	r3
   16cb8:	1e03      	subs	r3, r0, #0
   16cba:	d007      	beq.n	16ccc <buildStatusMessage+0x88>
	{
		sprintf(strMotor,(const uint8_t*)("ON"));
   16cbc:	230c      	movs	r3, #12
   16cbe:	18fb      	adds	r3, r7, r3
   16cc0:	4a18      	ldr	r2, [pc, #96]	; (16d24 <buildStatusMessage+0xe0>)
   16cc2:	8811      	ldrh	r1, [r2, #0]
   16cc4:	8019      	strh	r1, [r3, #0]
   16cc6:	7892      	ldrb	r2, [r2, #2]
   16cc8:	709a      	strb	r2, [r3, #2]
   16cca:	e003      	b.n	16cd4 <buildStatusMessage+0x90>
	}
	else
	{
		sprintf(strMotor,(const uint8_t*)("OFF"));
   16ccc:	230c      	movs	r3, #12
   16cce:	18fb      	adds	r3, r7, r3
   16cd0:	4a16      	ldr	r2, [pc, #88]	; (16d2c <buildStatusMessage+0xe8>)
   16cd2:	601a      	str	r2, [r3, #0]
	}
	
	sprintf(resep_msg,"RY: %d YB: %d BR: %d\nAC: %s\nSequence: %s\nMotor: %s\nCurrent: %dA\nNetwork: %d",
   16cd4:	4b19      	ldr	r3, [pc, #100]	; (16d3c <buildStatusMessage+0xf8>)
   16cd6:	681c      	ldr	r4, [r3, #0]
   16cd8:	4b18      	ldr	r3, [pc, #96]	; (16d3c <buildStatusMessage+0xf8>)
   16cda:	685d      	ldr	r5, [r3, #4]
   16cdc:	4b17      	ldr	r3, [pc, #92]	; (16d3c <buildStatusMessage+0xf8>)
   16cde:	689b      	ldr	r3, [r3, #8]
	Analog_Parameter_Struct.PhaseRY_Voltage,Analog_Parameter_Struct.PhaseYB_Voltage,Analog_Parameter_Struct.PhaseBR_Voltage,
	strACState,strSeq,strMotor,Analog_Parameter_Struct.Motor_Current_IntPart,network);
   16ce0:	4a16      	ldr	r2, [pc, #88]	; (16d3c <buildStatusMessage+0xf8>)
   16ce2:	8a92      	ldrh	r2, [r2, #20]
   16ce4:	b292      	uxth	r2, r2
	sprintf(resep_msg,"RY: %d YB: %d BR: %d\nAC: %s\nSequence: %s\nMotor: %s\nCurrent: %dA\nNetwork: %d",
   16ce6:	0016      	movs	r6, r2
   16ce8:	2227      	movs	r2, #39	; 0x27
   16cea:	18ba      	adds	r2, r7, r2
   16cec:	7812      	ldrb	r2, [r2, #0]
   16cee:	4914      	ldr	r1, [pc, #80]	; (16d40 <buildStatusMessage+0xfc>)
   16cf0:	6878      	ldr	r0, [r7, #4]
   16cf2:	9205      	str	r2, [sp, #20]
   16cf4:	9604      	str	r6, [sp, #16]
   16cf6:	220c      	movs	r2, #12
   16cf8:	18ba      	adds	r2, r7, r2
   16cfa:	9203      	str	r2, [sp, #12]
   16cfc:	2214      	movs	r2, #20
   16cfe:	18ba      	adds	r2, r7, r2
   16d00:	9202      	str	r2, [sp, #8]
   16d02:	221c      	movs	r2, #28
   16d04:	18ba      	adds	r2, r7, r2
   16d06:	9201      	str	r2, [sp, #4]
   16d08:	9300      	str	r3, [sp, #0]
   16d0a:	002b      	movs	r3, r5
   16d0c:	0022      	movs	r2, r4
   16d0e:	4c0d      	ldr	r4, [pc, #52]	; (16d44 <buildStatusMessage+0x100>)
   16d10:	47a0      	blx	r4
}
   16d12:	46c0      	nop			; (mov r8, r8)
   16d14:	46bd      	mov	sp, r7
   16d16:	b00b      	add	sp, #44	; 0x2c
   16d18:	bdf0      	pop	{r4, r5, r6, r7, pc}
   16d1a:	46c0      	nop			; (mov r8, r8)
   16d1c:	000127a5 	.word	0x000127a5
   16d20:	20000740 	.word	0x20000740
   16d24:	0002a12c 	.word	0x0002a12c
   16d28:	0002a130 	.word	0x0002a130
   16d2c:	0046464f 	.word	0x0046464f
   16d30:	0002a138 	.word	0x0002a138
   16d34:	0002a13c 	.word	0x0002a13c
   16d38:	0001a795 	.word	0x0001a795
   16d3c:	200006e4 	.word	0x200006e4
   16d40:	0002a144 	.word	0x0002a144
   16d44:	00028c01 	.word	0x00028c01

00016d48 <checkNumber>:


bool checkNumber(char *number)
{
   16d48:	b580      	push	{r7, lr}
   16d4a:	b082      	sub	sp, #8
   16d4c:	af00      	add	r7, sp, #0
   16d4e:	6078      	str	r0, [r7, #4]
	if ((isAdmin(number)) || (checkExists(number)<user_count_struct.total_user_no_count))
   16d50:	687b      	ldr	r3, [r7, #4]
   16d52:	0018      	movs	r0, r3
   16d54:	4b0a      	ldr	r3, [pc, #40]	; (16d80 <checkNumber+0x38>)
   16d56:	4798      	blx	r3
   16d58:	1e03      	subs	r3, r0, #0
   16d5a:	d109      	bne.n	16d70 <checkNumber+0x28>
   16d5c:	687b      	ldr	r3, [r7, #4]
   16d5e:	0018      	movs	r0, r3
   16d60:	4b08      	ldr	r3, [pc, #32]	; (16d84 <checkNumber+0x3c>)
   16d62:	4798      	blx	r3
   16d64:	0003      	movs	r3, r0
   16d66:	001a      	movs	r2, r3
   16d68:	4b07      	ldr	r3, [pc, #28]	; (16d88 <checkNumber+0x40>)
   16d6a:	785b      	ldrb	r3, [r3, #1]
   16d6c:	429a      	cmp	r2, r3
   16d6e:	d201      	bcs.n	16d74 <checkNumber+0x2c>
	{
		return true;
   16d70:	2301      	movs	r3, #1
   16d72:	e000      	b.n	16d76 <checkNumber+0x2e>
	}
	else
	{
		return false;
   16d74:	2300      	movs	r3, #0
	}
}
   16d76:	0018      	movs	r0, r3
   16d78:	46bd      	mov	sp, r7
   16d7a:	b002      	add	sp, #8
   16d7c:	bd80      	pop	{r7, pc}
   16d7e:	46c0      	nop			; (mov r8, r8)
   16d80:	00011975 	.word	0x00011975
   16d84:	00010dd1 	.word	0x00010dd1
   16d88:	20000620 	.word	0x20000620

00016d8c <checkNoCallTime>:

bool checkNoCallTime(void)
{
   16d8c:	b580      	push	{r7, lr}
   16d8e:	b082      	sub	sp, #8
   16d90:	af00      	add	r7, sp, #0
	uint8_t globalHours, globalMinutes;
	getSystemTime(&globalHours,&globalMinutes);
   16d92:	1dba      	adds	r2, r7, #6
   16d94:	1dfb      	adds	r3, r7, #7
   16d96:	0011      	movs	r1, r2
   16d98:	0018      	movs	r0, r3
   16d9a:	4b2b      	ldr	r3, [pc, #172]	; (16e48 <checkNoCallTime+0xbc>)
   16d9c:	4798      	blx	r3
	if(globalHours >= (user_settings_parameter_struct.noCallStartTimeHourAddress) && globalHours <=(user_settings_parameter_struct.noCallStopTimeHourAddress))
   16d9e:	4b2b      	ldr	r3, [pc, #172]	; (16e4c <checkNoCallTime+0xc0>)
   16da0:	7a9a      	ldrb	r2, [r3, #10]
   16da2:	1dfb      	adds	r3, r7, #7
   16da4:	781b      	ldrb	r3, [r3, #0]
   16da6:	429a      	cmp	r2, r3
   16da8:	d849      	bhi.n	16e3e <checkNoCallTime+0xb2>
   16daa:	4b28      	ldr	r3, [pc, #160]	; (16e4c <checkNoCallTime+0xc0>)
   16dac:	7b1a      	ldrb	r2, [r3, #12]
   16dae:	1dfb      	adds	r3, r7, #7
   16db0:	781b      	ldrb	r3, [r3, #0]
   16db2:	429a      	cmp	r2, r3
   16db4:	d343      	bcc.n	16e3e <checkNoCallTime+0xb2>
	{
		if(user_settings_parameter_struct.noCallStartTimeHourAddress==user_settings_parameter_struct.noCallStopTimeHourAddress)
   16db6:	4b25      	ldr	r3, [pc, #148]	; (16e4c <checkNoCallTime+0xc0>)
   16db8:	7a9a      	ldrb	r2, [r3, #10]
   16dba:	4b24      	ldr	r3, [pc, #144]	; (16e4c <checkNoCallTime+0xc0>)
   16dbc:	7b1b      	ldrb	r3, [r3, #12]
   16dbe:	429a      	cmp	r2, r3
   16dc0:	d10f      	bne.n	16de2 <checkNoCallTime+0x56>
		{
			if(globalMinutes>=(user_settings_parameter_struct.noCallStartTimeMinuteAddress) && globalMinutes<=(user_settings_parameter_struct.noCallStopTimeMinuteAddress))
   16dc2:	4b22      	ldr	r3, [pc, #136]	; (16e4c <checkNoCallTime+0xc0>)
   16dc4:	7ada      	ldrb	r2, [r3, #11]
   16dc6:	1dbb      	adds	r3, r7, #6
   16dc8:	781b      	ldrb	r3, [r3, #0]
   16dca:	429a      	cmp	r2, r3
   16dcc:	d807      	bhi.n	16dde <checkNoCallTime+0x52>
   16dce:	4b1f      	ldr	r3, [pc, #124]	; (16e4c <checkNoCallTime+0xc0>)
   16dd0:	7b5a      	ldrb	r2, [r3, #13]
   16dd2:	1dbb      	adds	r3, r7, #6
   16dd4:	781b      	ldrb	r3, [r3, #0]
   16dd6:	429a      	cmp	r2, r3
   16dd8:	d301      	bcc.n	16dde <checkNoCallTime+0x52>
			return true;
   16dda:	2301      	movs	r3, #1
   16ddc:	e030      	b.n	16e40 <checkNoCallTime+0xb4>
			else
			return false;
   16dde:	2300      	movs	r3, #0
   16de0:	e02e      	b.n	16e40 <checkNoCallTime+0xb4>
		}
		if(globalHours==user_settings_parameter_struct.noCallStartTimeHourAddress)
   16de2:	4b1a      	ldr	r3, [pc, #104]	; (16e4c <checkNoCallTime+0xc0>)
   16de4:	7a9a      	ldrb	r2, [r3, #10]
   16de6:	1dfb      	adds	r3, r7, #7
   16de8:	781b      	ldrb	r3, [r3, #0]
   16dea:	429a      	cmp	r2, r3
   16dec:	d109      	bne.n	16e02 <checkNoCallTime+0x76>
		{
			if(globalMinutes>=user_settings_parameter_struct.noCallStartTimeMinuteAddress)
   16dee:	4b17      	ldr	r3, [pc, #92]	; (16e4c <checkNoCallTime+0xc0>)
   16df0:	7ada      	ldrb	r2, [r3, #11]
   16df2:	1dbb      	adds	r3, r7, #6
   16df4:	781b      	ldrb	r3, [r3, #0]
   16df6:	429a      	cmp	r2, r3
   16df8:	d801      	bhi.n	16dfe <checkNoCallTime+0x72>
			return true;
   16dfa:	2301      	movs	r3, #1
   16dfc:	e020      	b.n	16e40 <checkNoCallTime+0xb4>
			else
			return false;
   16dfe:	2300      	movs	r3, #0
   16e00:	e01e      	b.n	16e40 <checkNoCallTime+0xb4>
		}
		if(globalHours==user_settings_parameter_struct.noCallStopTimeHourAddress)
   16e02:	4b12      	ldr	r3, [pc, #72]	; (16e4c <checkNoCallTime+0xc0>)
   16e04:	7b1a      	ldrb	r2, [r3, #12]
   16e06:	1dfb      	adds	r3, r7, #7
   16e08:	781b      	ldrb	r3, [r3, #0]
   16e0a:	429a      	cmp	r2, r3
   16e0c:	d109      	bne.n	16e22 <checkNoCallTime+0x96>
		{
			if(globalMinutes<=(user_settings_parameter_struct.noCallStopTimeMinuteAddress))
   16e0e:	4b0f      	ldr	r3, [pc, #60]	; (16e4c <checkNoCallTime+0xc0>)
   16e10:	7b5a      	ldrb	r2, [r3, #13]
   16e12:	1dbb      	adds	r3, r7, #6
   16e14:	781b      	ldrb	r3, [r3, #0]
   16e16:	429a      	cmp	r2, r3
   16e18:	d301      	bcc.n	16e1e <checkNoCallTime+0x92>
			return true;
   16e1a:	2301      	movs	r3, #1
   16e1c:	e010      	b.n	16e40 <checkNoCallTime+0xb4>
			else
			return false;
   16e1e:	2300      	movs	r3, #0
   16e20:	e00e      	b.n	16e40 <checkNoCallTime+0xb4>
		}
		if(globalHours > (user_settings_parameter_struct.noCallStartTimeHourAddress) && globalHours < (user_settings_parameter_struct.noCallStopTimeHourAddress))
   16e22:	4b0a      	ldr	r3, [pc, #40]	; (16e4c <checkNoCallTime+0xc0>)
   16e24:	7a9a      	ldrb	r2, [r3, #10]
   16e26:	1dfb      	adds	r3, r7, #7
   16e28:	781b      	ldrb	r3, [r3, #0]
   16e2a:	429a      	cmp	r2, r3
   16e2c:	d207      	bcs.n	16e3e <checkNoCallTime+0xb2>
   16e2e:	4b07      	ldr	r3, [pc, #28]	; (16e4c <checkNoCallTime+0xc0>)
   16e30:	7b1a      	ldrb	r2, [r3, #12]
   16e32:	1dfb      	adds	r3, r7, #7
   16e34:	781b      	ldrb	r3, [r3, #0]
   16e36:	429a      	cmp	r2, r3
   16e38:	d901      	bls.n	16e3e <checkNoCallTime+0xb2>
		return true;
   16e3a:	2301      	movs	r3, #1
   16e3c:	e000      	b.n	16e40 <checkNoCallTime+0xb4>
	}
	return false;
   16e3e:	2300      	movs	r3, #0
}
   16e40:	0018      	movs	r0, r3
   16e42:	46bd      	mov	sp, r7
   16e44:	b002      	add	sp, #8
   16e46:	bd80      	pop	{r7, pc}
   16e48:	00017089 	.word	0x00017089
   16e4c:	20000660 	.word	0x20000660

00016e50 <verifyRemoteNumber>:

void verifyRemoteNumber(void)
{
   16e50:	b580      	push	{r7, lr}
   16e52:	af00      	add	r7, sp, #0
	sendSMS(("VMM01"),true,SEND_TO_M2M_REMOTE);
   16e54:	4b04      	ldr	r3, [pc, #16]	; (16e68 <verifyRemoteNumber+0x18>)
   16e56:	2201      	movs	r2, #1
   16e58:	2101      	movs	r1, #1
   16e5a:	0018      	movs	r0, r3
   16e5c:	4b03      	ldr	r3, [pc, #12]	; (16e6c <verifyRemoteNumber+0x1c>)
   16e5e:	4798      	blx	r3
}
   16e60:	46c0      	nop			; (mov r8, r8)
   16e62:	46bd      	mov	sp, r7
   16e64:	bd80      	pop	{r7, pc}
   16e66:	46c0      	nop			; (mov r8, r8)
   16e68:	0002a190 	.word	0x0002a190
   16e6c:	00016e71 	.word	0x00016e71

00016e70 <sendSMS>:

void sendSMS(char *msg, bool predefMsg, uint8_t isM2M)  ////void sendSMS(char *msg, bool predefMsg = false, uint8_t isM2M);
{
   16e70:	b580      	push	{r7, lr}
   16e72:	b08e      	sub	sp, #56	; 0x38
   16e74:	af00      	add	r7, sp, #0
   16e76:	6078      	str	r0, [r7, #4]
   16e78:	0008      	movs	r0, r1
   16e7a:	0011      	movs	r1, r2
   16e7c:	1cfb      	adds	r3, r7, #3
   16e7e:	1c02      	adds	r2, r0, #0
   16e80:	701a      	strb	r2, [r3, #0]
   16e82:	1cbb      	adds	r3, r7, #2
   16e84:	1c0a      	adds	r2, r1, #0
   16e86:	701a      	strb	r2, [r3, #0]
	inCall=true;
   16e88:	4b55      	ldr	r3, [pc, #340]	; (16fe0 <sendSMS+0x170>)
   16e8a:	2201      	movs	r2, #1
   16e8c:	701a      	strb	r2, [r3, #0]
	if (!predefMsg)
   16e8e:	1cfb      	adds	r3, r7, #3
   16e90:	781b      	ldrb	r3, [r3, #0]
   16e92:	2201      	movs	r2, #1
   16e94:	4053      	eors	r3, r2
   16e96:	b2db      	uxtb	r3, r3
   16e98:	2b00      	cmp	r3, #0
   16e9a:	d048      	beq.n	16f2e <sendSMS+0xbe>
	{
		switch(actionType)
   16e9c:	4b51      	ldr	r3, [pc, #324]	; (16fe4 <sendSMS+0x174>)
   16e9e:	781b      	ldrb	r3, [r3, #0]
   16ea0:	3b43      	subs	r3, #67	; 0x43
   16ea2:	2b12      	cmp	r3, #18
   16ea4:	d900      	bls.n	16ea8 <sendSMS+0x38>
   16ea6:	e096      	b.n	16fd6 <sendSMS+0x166>
   16ea8:	009a      	lsls	r2, r3, #2
   16eaa:	4b4f      	ldr	r3, [pc, #316]	; (16fe8 <sendSMS+0x178>)
   16eac:	18d3      	adds	r3, r2, r3
   16eae:	681b      	ldr	r3, [r3, #0]
   16eb0:	469f      	mov	pc, r3
		{
			case 'S':
			strcat(msg,STR_MOTOR);
   16eb2:	687b      	ldr	r3, [r7, #4]
   16eb4:	0018      	movs	r0, r3
   16eb6:	4b4d      	ldr	r3, [pc, #308]	; (16fec <sendSMS+0x17c>)
   16eb8:	4798      	blx	r3
   16eba:	0003      	movs	r3, r0
   16ebc:	001a      	movs	r2, r3
   16ebe:	687b      	ldr	r3, [r7, #4]
   16ec0:	189a      	adds	r2, r3, r2
   16ec2:	4b4b      	ldr	r3, [pc, #300]	; (16ff0 <sendSMS+0x180>)
   16ec4:	0010      	movs	r0, r2
   16ec6:	0019      	movs	r1, r3
   16ec8:	2307      	movs	r3, #7
   16eca:	001a      	movs	r2, r3
   16ecc:	4b49      	ldr	r3, [pc, #292]	; (16ff4 <sendSMS+0x184>)
   16ece:	4798      	blx	r3
			strcat(msg,STR_ON);
   16ed0:	687b      	ldr	r3, [r7, #4]
   16ed2:	0018      	movs	r0, r3
   16ed4:	4b45      	ldr	r3, [pc, #276]	; (16fec <sendSMS+0x17c>)
   16ed6:	4798      	blx	r3
   16ed8:	0003      	movs	r3, r0
   16eda:	001a      	movs	r2, r3
   16edc:	687b      	ldr	r3, [r7, #4]
   16ede:	189a      	adds	r2, r3, r2
   16ee0:	4b45      	ldr	r3, [pc, #276]	; (16ff8 <sendSMS+0x188>)
   16ee2:	0010      	movs	r0, r2
   16ee4:	0019      	movs	r1, r3
   16ee6:	2303      	movs	r3, #3
   16ee8:	001a      	movs	r2, r3
   16eea:	4b42      	ldr	r3, [pc, #264]	; (16ff4 <sendSMS+0x184>)
   16eec:	4798      	blx	r3
			break;
   16eee:	e01e      	b.n	16f2e <sendSMS+0xbe>
			case 'O':
			case 'U':
			case 'C':
			case 'F':
			strcat(msg,STR_MOTOR);
   16ef0:	687b      	ldr	r3, [r7, #4]
   16ef2:	0018      	movs	r0, r3
   16ef4:	4b3d      	ldr	r3, [pc, #244]	; (16fec <sendSMS+0x17c>)
   16ef6:	4798      	blx	r3
   16ef8:	0003      	movs	r3, r0
   16efa:	001a      	movs	r2, r3
   16efc:	687b      	ldr	r3, [r7, #4]
   16efe:	189a      	adds	r2, r3, r2
   16f00:	4b3b      	ldr	r3, [pc, #236]	; (16ff0 <sendSMS+0x180>)
   16f02:	0010      	movs	r0, r2
   16f04:	0019      	movs	r1, r3
   16f06:	2307      	movs	r3, #7
   16f08:	001a      	movs	r2, r3
   16f0a:	4b3a      	ldr	r3, [pc, #232]	; (16ff4 <sendSMS+0x184>)
   16f0c:	4798      	blx	r3
			strcat(msg,STR_OFF);
   16f0e:	687b      	ldr	r3, [r7, #4]
   16f10:	0018      	movs	r0, r3
   16f12:	4b36      	ldr	r3, [pc, #216]	; (16fec <sendSMS+0x17c>)
   16f14:	4798      	blx	r3
   16f16:	0003      	movs	r3, r0
   16f18:	001a      	movs	r2, r3
   16f1a:	687b      	ldr	r3, [r7, #4]
   16f1c:	189a      	adds	r2, r3, r2
   16f1e:	4b37      	ldr	r3, [pc, #220]	; (16ffc <sendSMS+0x18c>)
   16f20:	0010      	movs	r0, r2
   16f22:	0019      	movs	r1, r3
   16f24:	2304      	movs	r3, #4
   16f26:	001a      	movs	r2, r3
   16f28:	4b32      	ldr	r3, [pc, #200]	; (16ff4 <sendSMS+0x184>)
   16f2a:	4798      	blx	r3
			break;
   16f2c:	46c0      	nop			; (mov r8, r8)
		}
	}
	
	char phone_number[20];
	
	if(isM2M==SEND_TO_M2M_MASTER)
   16f2e:	1cbb      	adds	r3, r7, #2
   16f30:	781b      	ldrb	r3, [r3, #0]
   16f32:	2b02      	cmp	r3, #2
   16f34:	d105      	bne.n	16f42 <sendSMS+0xd2>
	{
		getM2MNumber(phone_number);
   16f36:	2324      	movs	r3, #36	; 0x24
   16f38:	18fb      	adds	r3, r7, r3
   16f3a:	0018      	movs	r0, r3
   16f3c:	4b30      	ldr	r3, [pc, #192]	; (17000 <sendSMS+0x190>)
   16f3e:	4798      	blx	r3
   16f40:	e034      	b.n	16fac <sendSMS+0x13c>
	}
	else if (isM2M==SEND_TO_M2M_REMOTE)
   16f42:	1cbb      	adds	r3, r7, #2
   16f44:	781b      	ldrb	r3, [r3, #0]
   16f46:	2b01      	cmp	r3, #1
   16f48:	d109      	bne.n	16f5e <sendSMS+0xee>
	{
		if (factory_settings_parameter_struct.ENABLE_M2M)
   16f4a:	4b2e      	ldr	r3, [pc, #184]	; (17004 <sendSMS+0x194>)
   16f4c:	78db      	ldrb	r3, [r3, #3]
   16f4e:	2b00      	cmp	r3, #0
   16f50:	d02c      	beq.n	16fac <sendSMS+0x13c>
		{
			getM2MRemoteNumber(phone_number);
   16f52:	2324      	movs	r3, #36	; 0x24
   16f54:	18fb      	adds	r3, r7, r3
   16f56:	0018      	movs	r0, r3
   16f58:	4b2b      	ldr	r3, [pc, #172]	; (17008 <sendSMS+0x198>)
   16f5a:	4798      	blx	r3
   16f5c:	e026      	b.n	16fac <sendSMS+0x13c>
		}
	}
	else
	{
		if (isMsgFromAdmin)
   16f5e:	4b2b      	ldr	r3, [pc, #172]	; (1700c <sendSMS+0x19c>)
   16f60:	781b      	ldrb	r3, [r3, #0]
   16f62:	2b00      	cmp	r3, #0
   16f64:	d01d      	beq.n	16fa2 <sendSMS+0x132>
		{
			struct mobile_no_struct mobile_no;
			memset(page_data, '\0', sizeof(page_data));
   16f66:	4b2a      	ldr	r3, [pc, #168]	; (17010 <sendSMS+0x1a0>)
   16f68:	223c      	movs	r2, #60	; 0x3c
   16f6a:	2100      	movs	r1, #0
   16f6c:	0018      	movs	r0, r3
   16f6e:	4b29      	ldr	r3, [pc, #164]	; (17014 <sendSMS+0x1a4>)
   16f70:	4798      	blx	r3
			eeprom_emulator_read_page(ADMIN_1_MOBILE_NUMBER_PAGE, page_data);
   16f72:	4b27      	ldr	r3, [pc, #156]	; (17010 <sendSMS+0x1a0>)
   16f74:	0019      	movs	r1, r3
   16f76:	2003      	movs	r0, #3
   16f78:	4b27      	ldr	r3, [pc, #156]	; (17018 <sendSMS+0x1a8>)
   16f7a:	4798      	blx	r3
			memcpy(&mobile_no,page_data,sizeof(mobile_no));
   16f7c:	230c      	movs	r3, #12
   16f7e:	18fa      	adds	r2, r7, r3
   16f80:	4b23      	ldr	r3, [pc, #140]	; (17010 <sendSMS+0x1a0>)
   16f82:	0010      	movs	r0, r2
   16f84:	0019      	movs	r1, r3
   16f86:	2318      	movs	r3, #24
   16f88:	001a      	movs	r2, r3
   16f8a:	4b1a      	ldr	r3, [pc, #104]	; (16ff4 <sendSMS+0x184>)
   16f8c:	4798      	blx	r3
			strcpy(phone_number,mobile_no.mobile_no_ee);
   16f8e:	230c      	movs	r3, #12
   16f90:	18fb      	adds	r3, r7, r3
   16f92:	1d1a      	adds	r2, r3, #4
   16f94:	2324      	movs	r3, #36	; 0x24
   16f96:	18fb      	adds	r3, r7, r3
   16f98:	0011      	movs	r1, r2
   16f9a:	0018      	movs	r0, r3
   16f9c:	4b1f      	ldr	r3, [pc, #124]	; (1701c <sendSMS+0x1ac>)
   16f9e:	4798      	blx	r3
   16fa0:	e004      	b.n	16fac <sendSMS+0x13c>
		}
		else
		{
			getActiveNumber(phone_number);
   16fa2:	2324      	movs	r3, #36	; 0x24
   16fa4:	18fb      	adds	r3, r7, r3
   16fa6:	0018      	movs	r0, r3
   16fa8:	4b1d      	ldr	r3, [pc, #116]	; (17020 <sendSMS+0x1b0>)
   16faa:	4798      	blx	r3
		}
	}
	setCallStateOnLCD(LCDCALLSTATE_OUTGOINGSMS,phone_number,false);
   16fac:	2324      	movs	r3, #36	; 0x24
   16fae:	18fb      	adds	r3, r7, r3
   16fb0:	2200      	movs	r2, #0
   16fb2:	0019      	movs	r1, r3
   16fb4:	2005      	movs	r0, #5
   16fb6:	4b1b      	ldr	r3, [pc, #108]	; (17024 <sendSMS+0x1b4>)
   16fb8:	4798      	blx	r3
	gsm_send_sms(phone_number,msg);
   16fba:	687a      	ldr	r2, [r7, #4]
   16fbc:	2324      	movs	r3, #36	; 0x24
   16fbe:	18fb      	adds	r3, r7, r3
   16fc0:	0011      	movs	r1, r2
   16fc2:	0018      	movs	r0, r3
   16fc4:	4b18      	ldr	r3, [pc, #96]	; (17028 <sendSMS+0x1b8>)
   16fc6:	4798      	blx	r3
	isMsgFromAdmin = false;
   16fc8:	4b10      	ldr	r3, [pc, #64]	; (1700c <sendSMS+0x19c>)
   16fca:	2200      	movs	r2, #0
   16fcc:	701a      	strb	r2, [r3, #0]
	inCall=false;
   16fce:	4b04      	ldr	r3, [pc, #16]	; (16fe0 <sendSMS+0x170>)
   16fd0:	2200      	movs	r2, #0
   16fd2:	701a      	strb	r2, [r3, #0]
   16fd4:	e000      	b.n	16fd8 <sendSMS+0x168>
			return;
   16fd6:	46c0      	nop			; (mov r8, r8)
}
   16fd8:	46bd      	mov	sp, r7
   16fda:	b00e      	add	sp, #56	; 0x38
   16fdc:	bd80      	pop	{r7, pc}
   16fde:	46c0      	nop			; (mov r8, r8)
   16fe0:	20000788 	.word	0x20000788
   16fe4:	2000075b 	.word	0x2000075b
   16fe8:	0002a1cc 	.word	0x0002a1cc
   16fec:	00028c8b 	.word	0x00028c8b
   16ff0:	0002a198 	.word	0x0002a198
   16ff4:	000289c5 	.word	0x000289c5
   16ff8:	0002a12c 	.word	0x0002a12c
   16ffc:	0002a1a0 	.word	0x0002a1a0
   17000:	00010ab1 	.word	0x00010ab1
   17004:	20000638 	.word	0x20000638
   17008:	00010aed 	.word	0x00010aed
   1700c:	2000076a 	.word	0x2000076a
   17010:	20000594 	.word	0x20000594
   17014:	000289fb 	.word	0x000289fb
   17018:	000236ed 	.word	0x000236ed
   1701c:	00028c7b 	.word	0x00028c7b
   17020:	00010d05 	.word	0x00010d05
   17024:	0001c729 	.word	0x0001c729
   17028:	000129ed 	.word	0x000129ed

0001702c <sendDTMFTone>:

void sendDTMFTone(uint8_t eventNo)
{
   1702c:	b580      	push	{r7, lr}
   1702e:	b082      	sub	sp, #8
   17030:	af00      	add	r7, sp, #0
   17032:	0002      	movs	r2, r0
   17034:	1dfb      	adds	r3, r7, #7
   17036:	701a      	strb	r2, [r3, #0]
	if(eventNo==0xFF)
   17038:	1dfb      	adds	r3, r7, #7
   1703a:	781b      	ldrb	r3, [r3, #0]
   1703c:	2bff      	cmp	r3, #255	; 0xff
   1703e:	d103      	bne.n	17048 <sendDTMFTone+0x1c>
	{
		gsm_send_DTMF_Tone('A');
   17040:	2041      	movs	r0, #65	; 0x41
   17042:	4b0f      	ldr	r3, [pc, #60]	; (17080 <sendDTMFTone+0x54>)
   17044:	4798      	blx	r3
	}
	else if (eventNo==1 && factory_settings_parameter_struct.ENABLE_M2M)
	{
		gsm_send_DTMF_Tone('C');
	}
}
   17046:	e016      	b.n	17076 <sendDTMFTone+0x4a>
	else if (eventNo==0 && factory_settings_parameter_struct.ENABLE_M2M)
   17048:	1dfb      	adds	r3, r7, #7
   1704a:	781b      	ldrb	r3, [r3, #0]
   1704c:	2b00      	cmp	r3, #0
   1704e:	d107      	bne.n	17060 <sendDTMFTone+0x34>
   17050:	4b0c      	ldr	r3, [pc, #48]	; (17084 <sendDTMFTone+0x58>)
   17052:	78db      	ldrb	r3, [r3, #3]
   17054:	2b00      	cmp	r3, #0
   17056:	d003      	beq.n	17060 <sendDTMFTone+0x34>
		gsm_send_DTMF_Tone('D');
   17058:	2044      	movs	r0, #68	; 0x44
   1705a:	4b09      	ldr	r3, [pc, #36]	; (17080 <sendDTMFTone+0x54>)
   1705c:	4798      	blx	r3
}
   1705e:	e00a      	b.n	17076 <sendDTMFTone+0x4a>
	else if (eventNo==1 && factory_settings_parameter_struct.ENABLE_M2M)
   17060:	1dfb      	adds	r3, r7, #7
   17062:	781b      	ldrb	r3, [r3, #0]
   17064:	2b01      	cmp	r3, #1
   17066:	d106      	bne.n	17076 <sendDTMFTone+0x4a>
   17068:	4b06      	ldr	r3, [pc, #24]	; (17084 <sendDTMFTone+0x58>)
   1706a:	78db      	ldrb	r3, [r3, #3]
   1706c:	2b00      	cmp	r3, #0
   1706e:	d002      	beq.n	17076 <sendDTMFTone+0x4a>
		gsm_send_DTMF_Tone('C');
   17070:	2043      	movs	r0, #67	; 0x43
   17072:	4b03      	ldr	r3, [pc, #12]	; (17080 <sendDTMFTone+0x54>)
   17074:	4798      	blx	r3
}
   17076:	46c0      	nop			; (mov r8, r8)
   17078:	46bd      	mov	sp, r7
   1707a:	b002      	add	sp, #8
   1707c:	bd80      	pop	{r7, pc}
   1707e:	46c0      	nop			; (mov r8, r8)
   17080:	00012e61 	.word	0x00012e61
   17084:	20000638 	.word	0x20000638

00017088 <getSystemTime>:

void getSystemTime(uint8_t *Hours, uint8_t *Minutes)
{
   17088:	b580      	push	{r7, lr}
   1708a:	b082      	sub	sp, #8
   1708c:	af00      	add	r7, sp, #0
   1708e:	6078      	str	r0, [r7, #4]
   17090:	6039      	str	r1, [r7, #0]
	if (gsm_get_internal_rtc_time() == GSM_ERROR_NONE)
   17092:	4b09      	ldr	r3, [pc, #36]	; (170b8 <getSystemTime+0x30>)
   17094:	4798      	blx	r3
   17096:	1e03      	subs	r3, r0, #0
   17098:	d109      	bne.n	170ae <getSystemTime+0x26>
	{
		*Hours = struct_internal_rtc.Network_hour;
   1709a:	4b08      	ldr	r3, [pc, #32]	; (170bc <getSystemTime+0x34>)
   1709c:	78db      	ldrb	r3, [r3, #3]
   1709e:	b2da      	uxtb	r2, r3
   170a0:	687b      	ldr	r3, [r7, #4]
   170a2:	701a      	strb	r2, [r3, #0]
		*Minutes = struct_internal_rtc.Network_minute;
   170a4:	4b05      	ldr	r3, [pc, #20]	; (170bc <getSystemTime+0x34>)
   170a6:	791b      	ldrb	r3, [r3, #4]
   170a8:	b2da      	uxtb	r2, r3
   170aa:	683b      	ldr	r3, [r7, #0]
   170ac:	701a      	strb	r2, [r3, #0]
	}
}
   170ae:	46c0      	nop			; (mov r8, r8)
   170b0:	46bd      	mov	sp, r7
   170b2:	b002      	add	sp, #8
   170b4:	bd80      	pop	{r7, pc}
   170b6:	46c0      	nop			; (mov r8, r8)
   170b8:	00013041 	.word	0x00013041
   170bc:	20000690 	.word	0x20000690

000170c0 <vTask_GSM_service>:
#define GSM_PWR_AS_OP	GSM_PWR_DDR|=GSM_PWR_POS
#define GSM_PWR_ON		GSM_PWR_PORT|=GSM_PWR_POS
#define GSM_PWR_OFF		GSM_PWR_PORT&=~(GSM_PWR_POS)
//////////////////////////////////////////////////////////////////////////
static void vTask_GSM_service(void *params)
{
   170c0:	b590      	push	{r4, r7, lr}
   170c2:	b0cf      	sub	sp, #316	; 0x13c
   170c4:	af02      	add	r7, sp, #8
   170c6:	6078      	str	r0, [r7, #4]
	
	uint32_t network_update_time = 0;
   170c8:	2300      	movs	r3, #0
   170ca:	2296      	movs	r2, #150	; 0x96
   170cc:	0052      	lsls	r2, r2, #1
   170ce:	18ba      	adds	r2, r7, r2
   170d0:	6013      	str	r3, [r2, #0]
	
	GSM_PWR_AS_OP;
   170d2:	4bd8      	ldr	r3, [pc, #864]	; (17434 <vTask_GSM_service+0x374>)
   170d4:	4ad7      	ldr	r2, [pc, #860]	; (17434 <vTask_GSM_service+0x374>)
   170d6:	6812      	ldr	r2, [r2, #0]
   170d8:	2180      	movs	r1, #128	; 0x80
   170da:	0249      	lsls	r1, r1, #9
   170dc:	430a      	orrs	r2, r1
   170de:	601a      	str	r2, [r3, #0]
	
	struct port_config pin_conf_gsm_status;
	port_get_config_defaults(&pin_conf_gsm_status);
   170e0:	2388      	movs	r3, #136	; 0x88
   170e2:	005b      	lsls	r3, r3, #1
   170e4:	18fb      	adds	r3, r7, r3
   170e6:	0018      	movs	r0, r3
   170e8:	4bd3      	ldr	r3, [pc, #844]	; (17438 <vTask_GSM_service+0x378>)
   170ea:	4798      	blx	r3
	pin_conf_gsm_status.direction  = PORT_PIN_DIR_INPUT;
   170ec:	2388      	movs	r3, #136	; 0x88
   170ee:	005b      	lsls	r3, r3, #1
   170f0:	18fb      	adds	r3, r7, r3
   170f2:	2200      	movs	r2, #0
   170f4:	701a      	strb	r2, [r3, #0]
	pin_conf_gsm_status.input_pull = PORT_PIN_PULL_NONE;
   170f6:	2388      	movs	r3, #136	; 0x88
   170f8:	005b      	lsls	r3, r3, #1
   170fa:	18fb      	adds	r3, r7, r3
   170fc:	2200      	movs	r2, #0
   170fe:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(GSM_STATUS_POSITION, &pin_conf_gsm_status);
   17100:	2388      	movs	r3, #136	; 0x88
   17102:	005b      	lsls	r3, r3, #1
   17104:	18fb      	adds	r3, r7, r3
   17106:	0019      	movs	r1, r3
   17108:	201b      	movs	r0, #27
   1710a:	4bcc      	ldr	r3, [pc, #816]	; (1743c <vTask_GSM_service+0x37c>)
   1710c:	4798      	blx	r3
	
	gsm_init();
   1710e:	4bcc      	ldr	r3, [pc, #816]	; (17440 <vTask_GSM_service+0x380>)
   17110:	4798      	blx	r3
	
	initialized = false;
   17112:	4bcc      	ldr	r3, [pc, #816]	; (17444 <vTask_GSM_service+0x384>)
   17114:	2200      	movs	r2, #0
   17116:	701a      	strb	r2, [r3, #0]
	
	
	inCall=false;
   17118:	4bcb      	ldr	r3, [pc, #812]	; (17448 <vTask_GSM_service+0x388>)
   1711a:	2200      	movs	r2, #0
   1711c:	701a      	strb	r2, [r3, #0]
	simReInit=false;
   1711e:	4bcb      	ldr	r3, [pc, #812]	; (1744c <vTask_GSM_service+0x38c>)
   17120:	2200      	movs	r2, #0
   17122:	701a      	strb	r2, [r3, #0]
	
	bool boolGsm_config_flag			=false;
   17124:	232c      	movs	r3, #44	; 0x2c
   17126:	33ff      	adds	r3, #255	; 0xff
   17128:	18fb      	adds	r3, r7, r3
   1712a:	2200      	movs	r2, #0
   1712c:	701a      	strb	r2, [r3, #0]
	bool boolOne_Time_Msg_Delete_Flag   =false;
   1712e:	2395      	movs	r3, #149	; 0x95
   17130:	005b      	lsls	r3, r3, #1
   17132:	18fb      	adds	r3, r7, r3
   17134:	2200      	movs	r2, #0
   17136:	701a      	strb	r2, [r3, #0]
	
	Signal_Strength = 0;
   17138:	4bc5      	ldr	r3, [pc, #788]	; (17450 <vTask_GSM_service+0x390>)
   1713a:	2200      	movs	r2, #0
   1713c:	701a      	strb	r2, [r3, #0]
	
	soundWaitTime = 5;
   1713e:	4bc5      	ldr	r3, [pc, #788]	; (17454 <vTask_GSM_service+0x394>)
   17140:	2205      	movs	r2, #5
   17142:	701a      	strb	r2, [r3, #0]
	bplaySound = false;
   17144:	4bc4      	ldr	r3, [pc, #784]	; (17458 <vTask_GSM_service+0x398>)
   17146:	2200      	movs	r2, #0
   17148:	701a      	strb	r2, [r3, #0]
	
	//actionType = 'N';
	callCutWaitTime = 580;
   1714a:	4bc4      	ldr	r3, [pc, #784]	; (1745c <vTask_GSM_service+0x39c>)
   1714c:	2291      	movs	r2, #145	; 0x91
   1714e:	0092      	lsls	r2, r2, #2
   17150:	801a      	strh	r2, [r3, #0]
	nr = 0;
   17152:	4bc3      	ldr	r3, [pc, #780]	; (17460 <vTask_GSM_service+0x3a0>)
   17154:	2200      	movs	r2, #0
   17156:	701a      	strb	r2, [r3, #0]
	currentStatus = 'N';
   17158:	4bc2      	ldr	r3, [pc, #776]	; (17464 <vTask_GSM_service+0x3a4>)
   1715a:	224e      	movs	r2, #78	; 0x4e
   1715c:	701a      	strb	r2, [r3, #0]
	currentCallStatus = 'N';
   1715e:	4bc2      	ldr	r3, [pc, #776]	; (17468 <vTask_GSM_service+0x3a8>)
   17160:	224e      	movs	r2, #78	; 0x4e
   17162:	701a      	strb	r2, [r3, #0]
	callAccepted = false;
   17164:	4bc1      	ldr	r3, [pc, #772]	; (1746c <vTask_GSM_service+0x3ac>)
   17166:	2200      	movs	r2, #0
   17168:	701a      	strb	r2, [r3, #0]
	freezeIncomingCalls = false;
   1716a:	4bc1      	ldr	r3, [pc, #772]	; (17470 <vTask_GSM_service+0x3b0>)
   1716c:	2200      	movs	r2, #0
   1716e:	701a      	strb	r2, [r3, #0]
	obtainNewEvent = true;
   17170:	4bc0      	ldr	r3, [pc, #768]	; (17474 <vTask_GSM_service+0x3b4>)
   17172:	2201      	movs	r2, #1
   17174:	701a      	strb	r2, [r3, #0]
	isMsgFromAdmin = false;
   17176:	4bc0      	ldr	r3, [pc, #768]	; (17478 <vTask_GSM_service+0x3b8>)
   17178:	2200      	movs	r2, #0
   1717a:	701a      	strb	r2, [r3, #0]
	eventStaged=false;
   1717c:	4bbf      	ldr	r3, [pc, #764]	; (1747c <vTask_GSM_service+0x3bc>)
   1717e:	2200      	movs	r2, #0
   17180:	701a      	strb	r2, [r3, #0]
	stagedEventType = 'N';
   17182:	4bbf      	ldr	r3, [pc, #764]	; (17480 <vTask_GSM_service+0x3c0>)
   17184:	224e      	movs	r2, #78	; 0x4e
   17186:	701a      	strb	r2, [r3, #0]
	isRegisteredNumber=false;
   17188:	4bbe      	ldr	r3, [pc, #760]	; (17484 <vTask_GSM_service+0x3c4>)
   1718a:	2200      	movs	r2, #0
   1718c:	701a      	strb	r2, [r3, #0]
	retries=0;
   1718e:	4bbe      	ldr	r3, [pc, #760]	; (17488 <vTask_GSM_service+0x3c8>)
   17190:	2200      	movs	r2, #0
   17192:	701a      	strb	r2, [r3, #0]
	
	isGSMModuleAwake=false;
   17194:	4bbd      	ldr	r3, [pc, #756]	; (1748c <vTask_GSM_service+0x3cc>)
   17196:	2200      	movs	r2, #0
   17198:	701a      	strb	r2, [r3, #0]
	port_pin_set_output_level(GSM_DTR_PIN, GSM_DTR_PIN_ACTIVE);
   1719a:	2101      	movs	r1, #1
   1719c:	2014      	movs	r0, #20
   1719e:	4bbc      	ldr	r3, [pc, #752]	; (17490 <vTask_GSM_service+0x3d0>)
   171a0:	4798      	blx	r3
	lastGSMCommunicationTime=0;
   171a2:	4bbc      	ldr	r3, [pc, #752]	; (17494 <vTask_GSM_service+0x3d4>)
   171a4:	2200      	movs	r2, #0
   171a6:	601a      	str	r2, [r3, #0]
	gsm_module_exit_sleep(false);				//to switch DTR pin so that sim remains active 
   171a8:	2000      	movs	r0, #0
   171aa:	4bbb      	ldr	r3, [pc, #748]	; (17498 <vTask_GSM_service+0x3d8>)
   171ac:	4798      	blx	r3
				
	if (factory_settings_parameter_struct.ENABLE_CURRENT)
   171ae:	4bbb      	ldr	r3, [pc, #748]	; (1749c <vTask_GSM_service+0x3dc>)
   171b0:	785b      	ldrb	r3, [r3, #1]
   171b2:	2b00      	cmp	r3, #0
   171b4:	d002      	beq.n	171bc <vTask_GSM_service+0xfc>
	{
		zeroPressed=false;
   171b6:	4bba      	ldr	r3, [pc, #744]	; (174a0 <vTask_GSM_service+0x3e0>)
   171b8:	2200      	movs	r2, #0
   171ba:	701a      	strb	r2, [r3, #0]
	}
	if (factory_settings_parameter_struct.ENABLE_M2M)
   171bc:	4bb7      	ldr	r3, [pc, #732]	; (1749c <vTask_GSM_service+0x3dc>)
   171be:	78db      	ldrb	r3, [r3, #3]
   171c0:	2b00      	cmp	r3, #0
   171c2:	d012      	beq.n	171ea <vTask_GSM_service+0x12a>
	{
		m2mAck=false;
   171c4:	4bb7      	ldr	r3, [pc, #732]	; (174a4 <vTask_GSM_service+0x3e4>)
   171c6:	2200      	movs	r2, #0
   171c8:	701a      	strb	r2, [r3, #0]
		m2mEventCalls=m2mEventNo=0;
   171ca:	4bb7      	ldr	r3, [pc, #732]	; (174a8 <vTask_GSM_service+0x3e8>)
   171cc:	2200      	movs	r2, #0
   171ce:	701a      	strb	r2, [r3, #0]
   171d0:	4bb5      	ldr	r3, [pc, #724]	; (174a8 <vTask_GSM_service+0x3e8>)
   171d2:	781a      	ldrb	r2, [r3, #0]
   171d4:	4bb5      	ldr	r3, [pc, #724]	; (174ac <vTask_GSM_service+0x3ec>)
   171d6:	701a      	strb	r2, [r3, #0]
		m2mEventStaged=false;
   171d8:	4bb5      	ldr	r3, [pc, #724]	; (174b0 <vTask_GSM_service+0x3f0>)
   171da:	2200      	movs	r2, #0
   171dc:	701a      	strb	r2, [r3, #0]
		m2mEvent=false;
   171de:	4bb5      	ldr	r3, [pc, #724]	; (174b4 <vTask_GSM_service+0x3f4>)
   171e0:	2200      	movs	r2, #0
   171e2:	701a      	strb	r2, [r3, #0]
		keyPressed=false;
   171e4:	4bb4      	ldr	r3, [pc, #720]	; (174b8 <vTask_GSM_service+0x3f8>)
   171e6:	2200      	movs	r2, #0
   171e8:	701a      	strb	r2, [r3, #0]
	}
	
	if(GSM_STATUS_OK)
   171ea:	201b      	movs	r0, #27
   171ec:	4bb3      	ldr	r3, [pc, #716]	; (174bc <vTask_GSM_service+0x3fc>)
   171ee:	4798      	blx	r3
   171f0:	1e03      	subs	r3, r0, #0
   171f2:	d01e      	beq.n	17232 <vTask_GSM_service+0x172>
	{
		boolGsm_config_flag			=false;
   171f4:	232c      	movs	r3, #44	; 0x2c
   171f6:	33ff      	adds	r3, #255	; 0xff
   171f8:	18fb      	adds	r3, r7, r3
   171fa:	2200      	movs	r2, #0
   171fc:	701a      	strb	r2, [r3, #0]
		boolOne_Time_Msg_Delete_Flag   =false;
   171fe:	2395      	movs	r3, #149	; 0x95
   17200:	005b      	lsls	r3, r3, #1
   17202:	18fb      	adds	r3, r7, r3
   17204:	2200      	movs	r2, #0
   17206:	701a      	strb	r2, [r3, #0]
		
		GSM_PWR_ON;
   17208:	4bad      	ldr	r3, [pc, #692]	; (174c0 <vTask_GSM_service+0x400>)
   1720a:	4aad      	ldr	r2, [pc, #692]	; (174c0 <vTask_GSM_service+0x400>)
   1720c:	6812      	ldr	r2, [r2, #0]
   1720e:	2180      	movs	r1, #128	; 0x80
   17210:	0249      	lsls	r1, r1, #9
   17212:	430a      	orrs	r2, r1
   17214:	601a      	str	r2, [r3, #0]
		vTaskDelay(3000);
   17216:	4bab      	ldr	r3, [pc, #684]	; (174c4 <vTask_GSM_service+0x404>)
   17218:	0018      	movs	r0, r3
   1721a:	4bab      	ldr	r3, [pc, #684]	; (174c8 <vTask_GSM_service+0x408>)
   1721c:	4798      	blx	r3
		GSM_PWR_OFF;
   1721e:	4ba8      	ldr	r3, [pc, #672]	; (174c0 <vTask_GSM_service+0x400>)
   17220:	4aa7      	ldr	r2, [pc, #668]	; (174c0 <vTask_GSM_service+0x400>)
   17222:	6812      	ldr	r2, [r2, #0]
   17224:	49a9      	ldr	r1, [pc, #676]	; (174cc <vTask_GSM_service+0x40c>)
   17226:	400a      	ands	r2, r1
   17228:	601a      	str	r2, [r3, #0]
		vTaskDelay(5000);
   1722a:	4ba9      	ldr	r3, [pc, #676]	; (174d0 <vTask_GSM_service+0x410>)
   1722c:	0018      	movs	r0, r3
   1722e:	4ba6      	ldr	r3, [pc, #664]	; (174c8 <vTask_GSM_service+0x408>)
   17230:	4798      	blx	r3
	}
	
	for (;;)
	{
		if (GSM_STATUS_OK)
   17232:	201b      	movs	r0, #27
   17234:	4ba1      	ldr	r3, [pc, #644]	; (174bc <vTask_GSM_service+0x3fc>)
   17236:	4798      	blx	r3
   17238:	1e03      	subs	r3, r0, #0
   1723a:	d101      	bne.n	17240 <vTask_GSM_service+0x180>
   1723c:	f000 fc76 	bl	17b2c <vTask_GSM_service+0xa6c>
		{
			if (boolGsm_config_flag == false)
   17240:	232c      	movs	r3, #44	; 0x2c
   17242:	33ff      	adds	r3, #255	; 0xff
   17244:	18fb      	adds	r3, r7, r3
   17246:	781b      	ldrb	r3, [r3, #0]
   17248:	2201      	movs	r2, #1
   1724a:	4053      	eors	r3, r2
   1724c:	b2db      	uxtb	r3, r3
   1724e:	2b00      	cmp	r3, #0
   17250:	d038      	beq.n	172c4 <vTask_GSM_service+0x204>
			{
				
				if (gsm_is_network_registered() == GSM_NETWORK_REGISTERED)
   17252:	4ba0      	ldr	r3, [pc, #640]	; (174d4 <vTask_GSM_service+0x414>)
   17254:	4798      	blx	r3
   17256:	0003      	movs	r3, r0
   17258:	2b09      	cmp	r3, #9
   1725a:	d12d      	bne.n	172b8 <vTask_GSM_service+0x1f8>
				{
					if(gsm_config_module()==GSM_ERROR_NONE)
   1725c:	4b9e      	ldr	r3, [pc, #632]	; (174d8 <vTask_GSM_service+0x418>)
   1725e:	4798      	blx	r3
   17260:	1e03      	subs	r3, r0, #0
   17262:	d123      	bne.n	172ac <vTask_GSM_service+0x1ec>
					{
						for (uint8_t i=0;i<20;i++)
   17264:	232a      	movs	r3, #42	; 0x2a
   17266:	33ff      	adds	r3, #255	; 0xff
   17268:	18fb      	adds	r3, r7, r3
   1726a:	2200      	movs	r2, #0
   1726c:	701a      	strb	r2, [r3, #0]
   1726e:	e011      	b.n	17294 <vTask_GSM_service+0x1d4>
						{
							Signal_Strength = gsm_getsignalstrength();
   17270:	4b9a      	ldr	r3, [pc, #616]	; (174dc <vTask_GSM_service+0x41c>)
   17272:	4798      	blx	r3
   17274:	0003      	movs	r3, r0
   17276:	001a      	movs	r2, r3
   17278:	4b75      	ldr	r3, [pc, #468]	; (17450 <vTask_GSM_service+0x390>)
   1727a:	701a      	strb	r2, [r3, #0]
							vTaskDelay(50);
   1727c:	2032      	movs	r0, #50	; 0x32
   1727e:	4b92      	ldr	r3, [pc, #584]	; (174c8 <vTask_GSM_service+0x408>)
   17280:	4798      	blx	r3
						for (uint8_t i=0;i<20;i++)
   17282:	232a      	movs	r3, #42	; 0x2a
   17284:	33ff      	adds	r3, #255	; 0xff
   17286:	18fb      	adds	r3, r7, r3
   17288:	781a      	ldrb	r2, [r3, #0]
   1728a:	232a      	movs	r3, #42	; 0x2a
   1728c:	33ff      	adds	r3, #255	; 0xff
   1728e:	18fb      	adds	r3, r7, r3
   17290:	3201      	adds	r2, #1
   17292:	701a      	strb	r2, [r3, #0]
   17294:	232a      	movs	r3, #42	; 0x2a
   17296:	33ff      	adds	r3, #255	; 0xff
   17298:	18fb      	adds	r3, r7, r3
   1729a:	781b      	ldrb	r3, [r3, #0]
   1729c:	2b13      	cmp	r3, #19
   1729e:	d9e7      	bls.n	17270 <vTask_GSM_service+0x1b0>
						}
						boolGsm_config_flag = true;
   172a0:	232c      	movs	r3, #44	; 0x2c
   172a2:	33ff      	adds	r3, #255	; 0xff
   172a4:	18fb      	adds	r3, r7, r3
   172a6:	2201      	movs	r2, #1
   172a8:	701a      	strb	r2, [r3, #0]
   172aa:	e7c2      	b.n	17232 <vTask_GSM_service+0x172>
					}
					else
					{
						boolGsm_config_flag = false;
   172ac:	232c      	movs	r3, #44	; 0x2c
   172ae:	33ff      	adds	r3, #255	; 0xff
   172b0:	18fb      	adds	r3, r7, r3
   172b2:	2200      	movs	r2, #0
   172b4:	701a      	strb	r2, [r3, #0]
   172b6:	e7bc      	b.n	17232 <vTask_GSM_service+0x172>
					}
				}
				else
				{
					vTaskDelay(2000/portTICK_PERIOD_MS);
   172b8:	23fa      	movs	r3, #250	; 0xfa
   172ba:	00db      	lsls	r3, r3, #3
   172bc:	0018      	movs	r0, r3
   172be:	4b82      	ldr	r3, [pc, #520]	; (174c8 <vTask_GSM_service+0x408>)
   172c0:	4798      	blx	r3
   172c2:	e7b6      	b.n	17232 <vTask_GSM_service+0x172>
				}
			}
			else
			{
				if ((boolOne_Time_Msg_Delete_Flag == false) && (boolGsm_config_flag == true))
   172c4:	2395      	movs	r3, #149	; 0x95
   172c6:	005b      	lsls	r3, r3, #1
   172c8:	18fb      	adds	r3, r7, r3
   172ca:	781b      	ldrb	r3, [r3, #0]
   172cc:	2201      	movs	r2, #1
   172ce:	4053      	eors	r3, r2
   172d0:	b2db      	uxtb	r3, r3
   172d2:	2b00      	cmp	r3, #0
   172d4:	d01a      	beq.n	1730c <vTask_GSM_service+0x24c>
   172d6:	232c      	movs	r3, #44	; 0x2c
   172d8:	33ff      	adds	r3, #255	; 0xff
   172da:	18fb      	adds	r3, r7, r3
   172dc:	781b      	ldrb	r3, [r3, #0]
   172de:	2b00      	cmp	r3, #0
   172e0:	d014      	beq.n	1730c <vTask_GSM_service+0x24c>
				{
					if (gsm_delete_all_sms() == GSM_ERROR_NONE)
   172e2:	4b7f      	ldr	r3, [pc, #508]	; (174e0 <vTask_GSM_service+0x420>)
   172e4:	4798      	blx	r3
   172e6:	1e03      	subs	r3, r0, #0
   172e8:	d109      	bne.n	172fe <vTask_GSM_service+0x23e>
					{
						boolOne_Time_Msg_Delete_Flag = true;
   172ea:	2395      	movs	r3, #149	; 0x95
   172ec:	005b      	lsls	r3, r3, #1
   172ee:	18fb      	adds	r3, r7, r3
   172f0:	2201      	movs	r2, #1
   172f2:	701a      	strb	r2, [r3, #0]
						initialized = true;
   172f4:	4b53      	ldr	r3, [pc, #332]	; (17444 <vTask_GSM_service+0x384>)
   172f6:	2201      	movs	r2, #1
   172f8:	701a      	strb	r2, [r3, #0]
					if (gsm_delete_all_sms() == GSM_ERROR_NONE)
   172fa:	f000 fc3c 	bl	17b76 <vTask_GSM_service+0xab6>
					}
					else
					{
						boolOne_Time_Msg_Delete_Flag = false;
   172fe:	2395      	movs	r3, #149	; 0x95
   17300:	005b      	lsls	r3, r3, #1
   17302:	18fb      	adds	r3, r7, r3
   17304:	2200      	movs	r2, #0
   17306:	701a      	strb	r2, [r3, #0]
					if (gsm_delete_all_sms() == GSM_ERROR_NONE)
   17308:	f000 fc35 	bl	17b76 <vTask_GSM_service+0xab6>
					}
				}
				else
				{
					if(!getACPowerState() &&  isGSMModuleAwake && gsm_module_sleep_elligible())
   1730c:	4b75      	ldr	r3, [pc, #468]	; (174e4 <vTask_GSM_service+0x424>)
   1730e:	4798      	blx	r3
   17310:	0003      	movs	r3, r0
   17312:	001a      	movs	r2, r3
   17314:	2301      	movs	r3, #1
   17316:	4053      	eors	r3, r2
   17318:	b2db      	uxtb	r3, r3
   1731a:	2b00      	cmp	r3, #0
   1731c:	d00a      	beq.n	17334 <vTask_GSM_service+0x274>
   1731e:	4b5b      	ldr	r3, [pc, #364]	; (1748c <vTask_GSM_service+0x3cc>)
   17320:	781b      	ldrb	r3, [r3, #0]
   17322:	b2db      	uxtb	r3, r3
   17324:	2b00      	cmp	r3, #0
   17326:	d005      	beq.n	17334 <vTask_GSM_service+0x274>
   17328:	4b6f      	ldr	r3, [pc, #444]	; (174e8 <vTask_GSM_service+0x428>)
   1732a:	4798      	blx	r3
   1732c:	1e03      	subs	r3, r0, #0
   1732e:	d001      	beq.n	17334 <vTask_GSM_service+0x274>
					{
						gsm_module_enter_sleep();
   17330:	4b6e      	ldr	r3, [pc, #440]	; (174ec <vTask_GSM_service+0x42c>)
   17332:	4798      	blx	r3
					}
					
					if (currentStatus == 'N' && currentCallStatus == 'N')
   17334:	4b4b      	ldr	r3, [pc, #300]	; (17464 <vTask_GSM_service+0x3a4>)
   17336:	781b      	ldrb	r3, [r3, #0]
   17338:	b2db      	uxtb	r3, r3
   1733a:	2b4e      	cmp	r3, #78	; 0x4e
   1733c:	d12f      	bne.n	1739e <vTask_GSM_service+0x2de>
   1733e:	4b4a      	ldr	r3, [pc, #296]	; (17468 <vTask_GSM_service+0x3a8>)
   17340:	781b      	ldrb	r3, [r3, #0]
   17342:	b2db      	uxtb	r3, r3
   17344:	2b4e      	cmp	r3, #78	; 0x4e
   17346:	d12a      	bne.n	1739e <vTask_GSM_service+0x2de>
					{
						if(isGSMModuleAwake)
   17348:	4b50      	ldr	r3, [pc, #320]	; (1748c <vTask_GSM_service+0x3cc>)
   1734a:	781b      	ldrb	r3, [r3, #0]
   1734c:	b2db      	uxtb	r3, r3
   1734e:	2b00      	cmp	r3, #0
   17350:	d017      	beq.n	17382 <vTask_GSM_service+0x2c2>
						{
							////Update network
							if (xTaskGetTickCount() - network_update_time>= (1*30*1000))
   17352:	4b67      	ldr	r3, [pc, #412]	; (174f0 <vTask_GSM_service+0x430>)
   17354:	4798      	blx	r3
   17356:	0002      	movs	r2, r0
   17358:	2396      	movs	r3, #150	; 0x96
   1735a:	005b      	lsls	r3, r3, #1
   1735c:	18fb      	adds	r3, r7, r3
   1735e:	681b      	ldr	r3, [r3, #0]
   17360:	1ad3      	subs	r3, r2, r3
   17362:	4a64      	ldr	r2, [pc, #400]	; (174f4 <vTask_GSM_service+0x434>)
   17364:	4293      	cmp	r3, r2
   17366:	d90c      	bls.n	17382 <vTask_GSM_service+0x2c2>
							{
								network_update_time = xTaskGetTickCount();
   17368:	4b61      	ldr	r3, [pc, #388]	; (174f0 <vTask_GSM_service+0x430>)
   1736a:	4798      	blx	r3
   1736c:	0003      	movs	r3, r0
   1736e:	2296      	movs	r2, #150	; 0x96
   17370:	0052      	lsls	r2, r2, #1
   17372:	18ba      	adds	r2, r7, r2
   17374:	6013      	str	r3, [r2, #0]
								Signal_Strength = gsm_getsignalstrength();
   17376:	4b59      	ldr	r3, [pc, #356]	; (174dc <vTask_GSM_service+0x41c>)
   17378:	4798      	blx	r3
   1737a:	0003      	movs	r3, r0
   1737c:	001a      	movs	r2, r3
   1737e:	4b34      	ldr	r3, [pc, #208]	; (17450 <vTask_GSM_service+0x390>)
   17380:	701a      	strb	r2, [r3, #0]
							}
						}
						
						setObtainEvent();
   17382:	4b5d      	ldr	r3, [pc, #372]	; (174f8 <vTask_GSM_service+0x438>)
   17384:	4798      	blx	r3
						if (eventStaged || m2mEventStaged)
   17386:	4b3d      	ldr	r3, [pc, #244]	; (1747c <vTask_GSM_service+0x3bc>)
   17388:	781b      	ldrb	r3, [r3, #0]
   1738a:	2b00      	cmp	r3, #0
   1738c:	d104      	bne.n	17398 <vTask_GSM_service+0x2d8>
   1738e:	4b48      	ldr	r3, [pc, #288]	; (174b0 <vTask_GSM_service+0x3f0>)
   17390:	781b      	ldrb	r3, [r3, #0]
   17392:	2b00      	cmp	r3, #0
   17394:	d100      	bne.n	17398 <vTask_GSM_service+0x2d8>
   17396:	e0c3      	b.n	17520 <vTask_GSM_service+0x460>
						{
							operateOnStagedEvent();
   17398:	4b58      	ldr	r3, [pc, #352]	; (174fc <vTask_GSM_service+0x43c>)
   1739a:	4798      	blx	r3
						if (eventStaged || m2mEventStaged)
   1739c:	e0c0      	b.n	17520 <vTask_GSM_service+0x460>
						}
					}
					else if (currentStatus == 'I' || currentStatus == 'R')
   1739e:	4b31      	ldr	r3, [pc, #196]	; (17464 <vTask_GSM_service+0x3a4>)
   173a0:	781b      	ldrb	r3, [r3, #0]
   173a2:	b2db      	uxtb	r3, r3
   173a4:	2b49      	cmp	r3, #73	; 0x49
   173a6:	d005      	beq.n	173b4 <vTask_GSM_service+0x2f4>
   173a8:	4b2e      	ldr	r3, [pc, #184]	; (17464 <vTask_GSM_service+0x3a4>)
   173aa:	781b      	ldrb	r3, [r3, #0]
   173ac:	b2db      	uxtb	r3, r3
   173ae:	2b52      	cmp	r3, #82	; 0x52
   173b0:	d000      	beq.n	173b4 <vTask_GSM_service+0x2f4>
   173b2:	e0b6      	b.n	17522 <vTask_GSM_service+0x462>
					{
						if (callTimerExpire())
   173b4:	4b52      	ldr	r3, [pc, #328]	; (17500 <vTask_GSM_service+0x440>)
   173b6:	4798      	blx	r3
   173b8:	1e03      	subs	r3, r0, #0
   173ba:	d00e      	beq.n	173da <vTask_GSM_service+0x31a>
						{
							char t1 = actionType;
   173bc:	2326      	movs	r3, #38	; 0x26
   173be:	33ff      	adds	r3, #255	; 0xff
   173c0:	18fb      	adds	r3, r7, r3
   173c2:	4a50      	ldr	r2, [pc, #320]	; (17504 <vTask_GSM_service+0x444>)
   173c4:	7812      	ldrb	r2, [r2, #0]
   173c6:	701a      	strb	r2, [r3, #0]
							endCall();
   173c8:	4b4f      	ldr	r3, [pc, #316]	; (17508 <vTask_GSM_service+0x448>)
   173ca:	4798      	blx	r3
							checkRespSMS(t1);
   173cc:	2326      	movs	r3, #38	; 0x26
   173ce:	33ff      	adds	r3, #255	; 0xff
   173d0:	18fb      	adds	r3, r7, r3
   173d2:	781b      	ldrb	r3, [r3, #0]
   173d4:	0018      	movs	r0, r3
   173d6:	4b4d      	ldr	r3, [pc, #308]	; (1750c <vTask_GSM_service+0x44c>)
   173d8:	4798      	blx	r3
						}
						if (factory_settings_parameter_struct.ENABLE_M2M)
   173da:	4b30      	ldr	r3, [pc, #192]	; (1749c <vTask_GSM_service+0x3dc>)
   173dc:	78db      	ldrb	r3, [r3, #3]
   173de:	2b00      	cmp	r3, #0
   173e0:	d020      	beq.n	17424 <vTask_GSM_service+0x364>
						{
							if(m2mEvent && callAccepted)
   173e2:	4b34      	ldr	r3, [pc, #208]	; (174b4 <vTask_GSM_service+0x3f4>)
   173e4:	781b      	ldrb	r3, [r3, #0]
   173e6:	2b00      	cmp	r3, #0
   173e8:	d01c      	beq.n	17424 <vTask_GSM_service+0x364>
   173ea:	4b20      	ldr	r3, [pc, #128]	; (1746c <vTask_GSM_service+0x3ac>)
   173ec:	781b      	ldrb	r3, [r3, #0]
   173ee:	2b00      	cmp	r3, #0
   173f0:	d018      	beq.n	17424 <vTask_GSM_service+0x364>
							{
								if(!keyPressed &&  xTaskGetTickCount() - callCutWait > 2000)
   173f2:	4b31      	ldr	r3, [pc, #196]	; (174b8 <vTask_GSM_service+0x3f8>)
   173f4:	781b      	ldrb	r3, [r3, #0]
   173f6:	2201      	movs	r2, #1
   173f8:	4053      	eors	r3, r2
   173fa:	b2db      	uxtb	r3, r3
   173fc:	2b00      	cmp	r3, #0
   173fe:	d011      	beq.n	17424 <vTask_GSM_service+0x364>
   17400:	4b3b      	ldr	r3, [pc, #236]	; (174f0 <vTask_GSM_service+0x430>)
   17402:	4798      	blx	r3
   17404:	0002      	movs	r2, r0
   17406:	4b42      	ldr	r3, [pc, #264]	; (17510 <vTask_GSM_service+0x450>)
   17408:	681b      	ldr	r3, [r3, #0]
   1740a:	1ad2      	subs	r2, r2, r3
   1740c:	23fa      	movs	r3, #250	; 0xfa
   1740e:	00db      	lsls	r3, r3, #3
   17410:	429a      	cmp	r2, r3
   17412:	d907      	bls.n	17424 <vTask_GSM_service+0x364>
								{
									keyPressed=true;
   17414:	4b28      	ldr	r3, [pc, #160]	; (174b8 <vTask_GSM_service+0x3f8>)
   17416:	2201      	movs	r2, #1
   17418:	701a      	strb	r2, [r3, #0]
									sendDTMFTone(m2mEventNo);
   1741a:	4b23      	ldr	r3, [pc, #140]	; (174a8 <vTask_GSM_service+0x3e8>)
   1741c:	781b      	ldrb	r3, [r3, #0]
   1741e:	0018      	movs	r0, r3
   17420:	4b3c      	ldr	r3, [pc, #240]	; (17514 <vTask_GSM_service+0x454>)
   17422:	4798      	blx	r3
								}
							}
						}
						if (playSoundElligible())
   17424:	4b3c      	ldr	r3, [pc, #240]	; (17518 <vTask_GSM_service+0x458>)
   17426:	4798      	blx	r3
   17428:	1e03      	subs	r3, r0, #0
   1742a:	d07a      	beq.n	17522 <vTask_GSM_service+0x462>
						{
							triggerPlaySound();
   1742c:	4b3b      	ldr	r3, [pc, #236]	; (1751c <vTask_GSM_service+0x45c>)
   1742e:	4798      	blx	r3
   17430:	e077      	b.n	17522 <vTask_GSM_service+0x462>
   17432:	46c0      	nop			; (mov r8, r8)
   17434:	41004480 	.word	0x41004480
   17438:	00013ff9 	.word	0x00013ff9
   1743c:	00022b61 	.word	0x00022b61
   17440:	00012059 	.word	0x00012059
   17444:	20000789 	.word	0x20000789
   17448:	20000788 	.word	0x20000788
   1744c:	20000773 	.word	0x20000773
   17450:	20000775 	.word	0x20000775
   17454:	200007b9 	.word	0x200007b9
   17458:	20000841 	.word	0x20000841
   1745c:	2000075c 	.word	0x2000075c
   17460:	200006e0 	.word	0x200006e0
   17464:	200007c0 	.word	0x200007c0
   17468:	2000077b 	.word	0x2000077b
   1746c:	2000078a 	.word	0x2000078a
   17470:	2000073c 	.word	0x2000073c
   17474:	20000766 	.word	0x20000766
   17478:	2000076a 	.word	0x2000076a
   1747c:	200007b6 	.word	0x200007b6
   17480:	20000768 	.word	0x20000768
   17484:	20000784 	.word	0x20000784
   17488:	200006e1 	.word	0x200006e1
   1748c:	2000068c 	.word	0x2000068c
   17490:	00014061 	.word	0x00014061
   17494:	2000022c 	.word	0x2000022c
   17498:	0001220d 	.word	0x0001220d
   1749c:	20000638 	.word	0x20000638
   174a0:	200007eb 	.word	0x200007eb
   174a4:	20000728 	.word	0x20000728
   174a8:	20000729 	.word	0x20000729
   174ac:	200007b7 	.word	0x200007b7
   174b0:	2000077a 	.word	0x2000077a
   174b4:	2000073b 	.word	0x2000073b
   174b8:	200007b4 	.word	0x200007b4
   174bc:	0001401d 	.word	0x0001401d
   174c0:	41004490 	.word	0x41004490
   174c4:	00000bb8 	.word	0x00000bb8
   174c8:	0001fad9 	.word	0x0001fad9
   174cc:	fffeffff 	.word	0xfffeffff
   174d0:	00001388 	.word	0x00001388
   174d4:	00012509 	.word	0x00012509
   174d8:	000131f5 	.word	0x000131f5
   174dc:	000127a5 	.word	0x000127a5
   174e0:	000125f5 	.word	0x000125f5
   174e4:	0001a6f9 	.word	0x0001a6f9
   174e8:	00012291 	.word	0x00012291
   174ec:	00012271 	.word	0x00012271
   174f0:	0001fe3d 	.word	0x0001fe3d
   174f4:	0000752f 	.word	0x0000752f
   174f8:	000140b5 	.word	0x000140b5
   174fc:	000140f5 	.word	0x000140f5
   17500:	00014755 	.word	0x00014755
   17504:	2000075b 	.word	0x2000075b
   17508:	000141fd 	.word	0x000141fd
   1750c:	00014a11 	.word	0x00014a11
   17510:	200007f4 	.word	0x200007f4
   17514:	0001702d 	.word	0x0001702d
   17518:	000145bd 	.word	0x000145bd
   1751c:	00014609 	.word	0x00014609
						if (eventStaged || m2mEventStaged)
   17520:	46c0      	nop			; (mov r8, r8)
						}
					}
					//////////////////////////////////////////////////////////////////////////
					char response[64] = {0};
   17522:	4bde      	ldr	r3, [pc, #888]	; (1789c <vTask_GSM_service+0x7dc>)
   17524:	2298      	movs	r2, #152	; 0x98
   17526:	0052      	lsls	r2, r2, #1
   17528:	4694      	mov	ip, r2
   1752a:	44bc      	add	ip, r7
   1752c:	4463      	add	r3, ip
   1752e:	0018      	movs	r0, r3
   17530:	2340      	movs	r3, #64	; 0x40
   17532:	001a      	movs	r2, r3
   17534:	2100      	movs	r1, #0
   17536:	4bda      	ldr	r3, [pc, #872]	; (178a0 <vTask_GSM_service+0x7e0>)
   17538:	4798      	blx	r3
					if (gsm_read_response_line(response,sizeof(response)))
   1753a:	230c      	movs	r3, #12
   1753c:	18fb      	adds	r3, r7, r3
   1753e:	2140      	movs	r1, #64	; 0x40
   17540:	0018      	movs	r0, r3
   17542:	4bd8      	ldr	r3, [pc, #864]	; (178a4 <vTask_GSM_service+0x7e4>)
   17544:	4798      	blx	r3
   17546:	1e03      	subs	r3, r0, #0
   17548:	d100      	bne.n	1754c <vTask_GSM_service+0x48c>
   1754a:	e672      	b.n	17232 <vTask_GSM_service+0x172>
					{
						uint8_t sms_index;
						sms_index = gsm_responseLine_isNew_SMS_Received(response);
   1754c:	2392      	movs	r3, #146	; 0x92
   1754e:	005b      	lsls	r3, r3, #1
   17550:	18fc      	adds	r4, r7, r3
   17552:	230c      	movs	r3, #12
   17554:	18fb      	adds	r3, r7, r3
   17556:	0018      	movs	r0, r3
   17558:	4bd3      	ldr	r3, [pc, #844]	; (178a8 <vTask_GSM_service+0x7e8>)
   1755a:	4798      	blx	r3
   1755c:	0003      	movs	r3, r0
   1755e:	7023      	strb	r3, [r4, #0]
						if (sms_index>0)
   17560:	2392      	movs	r3, #146	; 0x92
   17562:	005b      	lsls	r3, r3, #1
   17564:	18fb      	adds	r3, r7, r3
   17566:	781b      	ldrb	r3, [r3, #0]
   17568:	2b00      	cmp	r3, #0
   1756a:	d100      	bne.n	1756e <vTask_GSM_service+0x4ae>
   1756c:	e0d5      	b.n	1771a <vTask_GSM_service+0x65a>
						{
							char phone_number[15];
							char Received_SMS[160];
							gsm_read_sms(sms_index,phone_number,15,Received_SMS,160);
   1756e:	234c      	movs	r3, #76	; 0x4c
   17570:	18fa      	adds	r2, r7, r3
   17572:	1c79      	adds	r1, r7, #1
   17574:	31ff      	adds	r1, #255	; 0xff
   17576:	2392      	movs	r3, #146	; 0x92
   17578:	005b      	lsls	r3, r3, #1
   1757a:	18fb      	adds	r3, r7, r3
   1757c:	7818      	ldrb	r0, [r3, #0]
   1757e:	23a0      	movs	r3, #160	; 0xa0
   17580:	9300      	str	r3, [sp, #0]
   17582:	0013      	movs	r3, r2
   17584:	220f      	movs	r2, #15
   17586:	4cc9      	ldr	r4, [pc, #804]	; (178ac <vTask_GSM_service+0x7ec>)
   17588:	47a0      	blx	r4
							bool admin = isAdmin(phone_number);
   1758a:	2324      	movs	r3, #36	; 0x24
   1758c:	33ff      	adds	r3, #255	; 0xff
   1758e:	18fc      	adds	r4, r7, r3
   17590:	1c7b      	adds	r3, r7, #1
   17592:	33ff      	adds	r3, #255	; 0xff
   17594:	0018      	movs	r0, r3
   17596:	4bc6      	ldr	r3, [pc, #792]	; (178b0 <vTask_GSM_service+0x7f0>)
   17598:	4798      	blx	r3
   1759a:	0003      	movs	r3, r0
   1759c:	7023      	strb	r3, [r4, #0]
							bool primaryUser = isPrimaryNumber(phone_number);
   1759e:	2391      	movs	r3, #145	; 0x91
   175a0:	005b      	lsls	r3, r3, #1
   175a2:	18fc      	adds	r4, r7, r3
   175a4:	1c7b      	adds	r3, r7, #1
   175a6:	33ff      	adds	r3, #255	; 0xff
   175a8:	0018      	movs	r0, r3
   175aa:	4bc2      	ldr	r3, [pc, #776]	; (178b4 <vTask_GSM_service+0x7f4>)
   175ac:	4798      	blx	r3
   175ae:	0003      	movs	r3, r0
   175b0:	7023      	strb	r3, [r4, #0]
							bool alterUsr = isAlterNumber(phone_number);
   175b2:	2322      	movs	r3, #34	; 0x22
   175b4:	33ff      	adds	r3, #255	; 0xff
   175b6:	18fc      	adds	r4, r7, r3
   175b8:	1c7b      	adds	r3, r7, #1
   175ba:	33ff      	adds	r3, #255	; 0xff
   175bc:	0018      	movs	r0, r3
   175be:	4bbe      	ldr	r3, [pc, #760]	; (178b8 <vTask_GSM_service+0x7f8>)
   175c0:	4798      	blx	r3
   175c2:	0003      	movs	r3, r0
   175c4:	7023      	strb	r3, [r4, #0]
							bool response_sms_processed_cmd = true;
   175c6:	2394      	movs	r3, #148	; 0x94
   175c8:	005b      	lsls	r3, r3, #1
   175ca:	18fb      	adds	r3, r7, r3
   175cc:	2201      	movs	r2, #1
   175ce:	701a      	strb	r2, [r3, #0]
							
							if(isAdmin)
							{
								setCallStateOnLCD(LCDCALLSTATE_INCOMINGSMS,"ADMIN",false);
   175d0:	4bba      	ldr	r3, [pc, #744]	; (178bc <vTask_GSM_service+0x7fc>)
   175d2:	2200      	movs	r2, #0
   175d4:	0019      	movs	r1, r3
   175d6:	2004      	movs	r0, #4
   175d8:	4bb9      	ldr	r3, [pc, #740]	; (178c0 <vTask_GSM_service+0x800>)
   175da:	4798      	blx	r3
							else
							{
								setCallStateOnLCD(LCDCALLSTATE_INCOMINGSMS,phone_number,false);
							}
							
							StringtoUpperCase(Received_SMS);
   175dc:	234c      	movs	r3, #76	; 0x4c
   175de:	18fb      	adds	r3, r7, r3
   175e0:	0018      	movs	r0, r3
   175e2:	4bb8      	ldr	r3, [pc, #736]	; (178c4 <vTask_GSM_service+0x804>)
   175e4:	4798      	blx	r3
							//{
								//memmove(Received_SMS,Received_SMS+7,strlen(Received_SMS));		//discard passPhrase
								//admin = true;													//set admin as true as passCode matches
							//}

							if (admin || primaryUser || alterUsr)
   175e6:	2324      	movs	r3, #36	; 0x24
   175e8:	33ff      	adds	r3, #255	; 0xff
   175ea:	18fb      	adds	r3, r7, r3
   175ec:	781b      	ldrb	r3, [r3, #0]
   175ee:	2b00      	cmp	r3, #0
   175f0:	d10b      	bne.n	1760a <vTask_GSM_service+0x54a>
   175f2:	2391      	movs	r3, #145	; 0x91
   175f4:	005b      	lsls	r3, r3, #1
   175f6:	18fb      	adds	r3, r7, r3
   175f8:	781b      	ldrb	r3, [r3, #0]
   175fa:	2b00      	cmp	r3, #0
   175fc:	d105      	bne.n	1760a <vTask_GSM_service+0x54a>
   175fe:	2322      	movs	r3, #34	; 0x22
   17600:	33ff      	adds	r3, #255	; 0xff
   17602:	18fb      	adds	r3, r7, r3
   17604:	781b      	ldrb	r3, [r3, #0]
   17606:	2b00      	cmp	r3, #0
   17608:	d031      	beq.n	1766e <vTask_GSM_service+0x5ae>
							{
								if(StringstartsWith(Received_SMS,"#"))
   1760a:	4aaf      	ldr	r2, [pc, #700]	; (178c8 <vTask_GSM_service+0x808>)
   1760c:	234c      	movs	r3, #76	; 0x4c
   1760e:	18fb      	adds	r3, r7, r3
   17610:	0011      	movs	r1, r2
   17612:	0018      	movs	r0, r3
   17614:	4bad      	ldr	r3, [pc, #692]	; (178cc <vTask_GSM_service+0x80c>)
   17616:	4798      	blx	r3
   17618:	1e03      	subs	r3, r0, #0
   1761a:	d013      	beq.n	17644 <vTask_GSM_service+0x584>
								{
									memmove(Received_SMS, Received_SMS+1, strlen(Received_SMS));  //this will remove '#'
   1761c:	234c      	movs	r3, #76	; 0x4c
   1761e:	18fc      	adds	r4, r7, r3
   17620:	3401      	adds	r4, #1
   17622:	234c      	movs	r3, #76	; 0x4c
   17624:	18fb      	adds	r3, r7, r3
   17626:	0018      	movs	r0, r3
   17628:	4ba9      	ldr	r3, [pc, #676]	; (178d0 <vTask_GSM_service+0x810>)
   1762a:	4798      	blx	r3
   1762c:	0002      	movs	r2, r0
   1762e:	234c      	movs	r3, #76	; 0x4c
   17630:	18fb      	adds	r3, r7, r3
   17632:	0021      	movs	r1, r4
   17634:	0018      	movs	r0, r3
   17636:	4ba7      	ldr	r3, [pc, #668]	; (178d4 <vTask_GSM_service+0x814>)
   17638:	4798      	blx	r3
									response_sms_processed_cmd=false;
   1763a:	2394      	movs	r3, #148	; 0x94
   1763c:	005b      	lsls	r3, r3, #1
   1763e:	18fb      	adds	r3, r7, r3
   17640:	2200      	movs	r2, #0
   17642:	701a      	strb	r2, [r3, #0]
								}
								processOnSMS(Received_SMS,admin,response_sms_processed_cmd,alterUsr,phone_number);
   17644:	2322      	movs	r3, #34	; 0x22
   17646:	33ff      	adds	r3, #255	; 0xff
   17648:	18fb      	adds	r3, r7, r3
   1764a:	781c      	ldrb	r4, [r3, #0]
   1764c:	2394      	movs	r3, #148	; 0x94
   1764e:	005b      	lsls	r3, r3, #1
   17650:	18fb      	adds	r3, r7, r3
   17652:	781a      	ldrb	r2, [r3, #0]
   17654:	2324      	movs	r3, #36	; 0x24
   17656:	33ff      	adds	r3, #255	; 0xff
   17658:	18fb      	adds	r3, r7, r3
   1765a:	7819      	ldrb	r1, [r3, #0]
   1765c:	234c      	movs	r3, #76	; 0x4c
   1765e:	18f8      	adds	r0, r7, r3
   17660:	1c7b      	adds	r3, r7, #1
   17662:	33ff      	adds	r3, #255	; 0xff
   17664:	9300      	str	r3, [sp, #0]
   17666:	0023      	movs	r3, r4
   17668:	4c9b      	ldr	r4, [pc, #620]	; (178d8 <vTask_GSM_service+0x818>)
   1766a:	47a0      	blx	r4
   1766c:	e053      	b.n	17716 <vTask_GSM_service+0x656>
							}
							else if(isM2MNumber(phone_number))
   1766e:	1c7b      	adds	r3, r7, #1
   17670:	33ff      	adds	r3, #255	; 0xff
   17672:	0018      	movs	r0, r3
   17674:	4b99      	ldr	r3, [pc, #612]	; (178dc <vTask_GSM_service+0x81c>)
   17676:	4798      	blx	r3
   17678:	1e03      	subs	r3, r0, #0
   1767a:	d01f      	beq.n	176bc <vTask_GSM_service+0x5fc>
							{
								if(StringstartsWith(Received_SMS,"VMM01"))
   1767c:	4a98      	ldr	r2, [pc, #608]	; (178e0 <vTask_GSM_service+0x820>)
   1767e:	234c      	movs	r3, #76	; 0x4c
   17680:	18fb      	adds	r3, r7, r3
   17682:	0011      	movs	r1, r2
   17684:	0018      	movs	r0, r3
   17686:	4b91      	ldr	r3, [pc, #580]	; (178cc <vTask_GSM_service+0x80c>)
   17688:	4798      	blx	r3
   1768a:	1e03      	subs	r3, r0, #0
   1768c:	d043      	beq.n	17716 <vTask_GSM_service+0x656>
								{
									setM2MVerify(true);
   1768e:	2001      	movs	r0, #1
   17690:	4b94      	ldr	r3, [pc, #592]	; (178e4 <vTask_GSM_service+0x824>)
   17692:	4798      	blx	r3
									getM2MNumber(phone_number);
   17694:	1c7b      	adds	r3, r7, #1
   17696:	33ff      	adds	r3, #255	; 0xff
   17698:	0018      	movs	r0, r3
   1769a:	4b93      	ldr	r3, [pc, #588]	; (178e8 <vTask_GSM_service+0x828>)
   1769c:	4798      	blx	r3
									setCallStateOnLCD(LCDCALLSTATE_OUTGOINGSMS,phone_number,false);
   1769e:	1c7b      	adds	r3, r7, #1
   176a0:	33ff      	adds	r3, #255	; 0xff
   176a2:	2200      	movs	r2, #0
   176a4:	0019      	movs	r1, r3
   176a6:	2005      	movs	r0, #5
   176a8:	4b85      	ldr	r3, [pc, #532]	; (178c0 <vTask_GSM_service+0x800>)
   176aa:	4798      	blx	r3
									gsm_send_sms(phone_number,"VMR02");
   176ac:	4a8f      	ldr	r2, [pc, #572]	; (178ec <vTask_GSM_service+0x82c>)
   176ae:	1c7b      	adds	r3, r7, #1
   176b0:	33ff      	adds	r3, #255	; 0xff
   176b2:	0011      	movs	r1, r2
   176b4:	0018      	movs	r0, r3
   176b6:	4b8e      	ldr	r3, [pc, #568]	; (178f0 <vTask_GSM_service+0x830>)
   176b8:	4798      	blx	r3
   176ba:	e02c      	b.n	17716 <vTask_GSM_service+0x656>
								}
							}
							else if(factory_settings_parameter_struct.ENABLE_M2M && isM2MRemoteNumber(phone_number))
   176bc:	4b8d      	ldr	r3, [pc, #564]	; (178f4 <vTask_GSM_service+0x834>)
   176be:	78db      	ldrb	r3, [r3, #3]
   176c0:	2b00      	cmp	r3, #0
   176c2:	d028      	beq.n	17716 <vTask_GSM_service+0x656>
   176c4:	1c7b      	adds	r3, r7, #1
   176c6:	33ff      	adds	r3, #255	; 0xff
   176c8:	0018      	movs	r0, r3
   176ca:	4b8b      	ldr	r3, [pc, #556]	; (178f8 <vTask_GSM_service+0x838>)
   176cc:	4798      	blx	r3
   176ce:	1e03      	subs	r3, r0, #0
   176d0:	d021      	beq.n	17716 <vTask_GSM_service+0x656>
							{
								if(StringstartsWith(Received_SMS,"VMR02"))
   176d2:	4a86      	ldr	r2, [pc, #536]	; (178ec <vTask_GSM_service+0x82c>)
   176d4:	234c      	movs	r3, #76	; 0x4c
   176d6:	18fb      	adds	r3, r7, r3
   176d8:	0011      	movs	r1, r2
   176da:	0018      	movs	r0, r3
   176dc:	4b7b      	ldr	r3, [pc, #492]	; (178cc <vTask_GSM_service+0x80c>)
   176de:	4798      	blx	r3
   176e0:	1e03      	subs	r3, r0, #0
   176e2:	d018      	beq.n	17716 <vTask_GSM_service+0x656>
								{
									setM2MRemoteVerified(true);
   176e4:	2001      	movs	r0, #1
   176e6:	4b85      	ldr	r3, [pc, #532]	; (178fc <vTask_GSM_service+0x83c>)
   176e8:	4798      	blx	r3
									saveM2MSettings(true);
   176ea:	2001      	movs	r0, #1
   176ec:	4b84      	ldr	r3, [pc, #528]	; (17900 <vTask_GSM_service+0x840>)
   176ee:	4798      	blx	r3
									getActiveNumber(phone_number);
   176f0:	1c7b      	adds	r3, r7, #1
   176f2:	33ff      	adds	r3, #255	; 0xff
   176f4:	0018      	movs	r0, r3
   176f6:	4b83      	ldr	r3, [pc, #524]	; (17904 <vTask_GSM_service+0x844>)
   176f8:	4798      	blx	r3
									setCallStateOnLCD(LCDCALLSTATE_OUTGOINGSMS,phone_number,false);
   176fa:	1c7b      	adds	r3, r7, #1
   176fc:	33ff      	adds	r3, #255	; 0xff
   176fe:	2200      	movs	r2, #0
   17700:	0019      	movs	r1, r3
   17702:	2005      	movs	r0, #5
   17704:	4b6e      	ldr	r3, [pc, #440]	; (178c0 <vTask_GSM_service+0x800>)
   17706:	4798      	blx	r3
									gsm_send_sms(phone_number,"M2M TURNED ON");
   17708:	4a7f      	ldr	r2, [pc, #508]	; (17908 <vTask_GSM_service+0x848>)
   1770a:	1c7b      	adds	r3, r7, #1
   1770c:	33ff      	adds	r3, #255	; 0xff
   1770e:	0011      	movs	r1, r2
   17710:	0018      	movs	r0, r3
   17712:	4b77      	ldr	r3, [pc, #476]	; (178f0 <vTask_GSM_service+0x830>)
   17714:	4798      	blx	r3
								}
							}
							gsm_delete_all_sms();
   17716:	4b7d      	ldr	r3, [pc, #500]	; (1790c <vTask_GSM_service+0x84c>)
   17718:	4798      	blx	r3
						}


						if (!freezeIncomingCalls &&  (currentStatus == 'N' || currentStatus == 'R') && (currentCallStatus == 'N' || currentCallStatus == 'I')) //Ringing Incoming Call
   1771a:	4b7d      	ldr	r3, [pc, #500]	; (17910 <vTask_GSM_service+0x850>)
   1771c:	781b      	ldrb	r3, [r3, #0]
   1771e:	2201      	movs	r2, #1
   17720:	4053      	eors	r3, r2
   17722:	b2db      	uxtb	r3, r3
   17724:	2b00      	cmp	r3, #0
   17726:	d100      	bne.n	1772a <vTask_GSM_service+0x66a>
   17728:	e099      	b.n	1785e <vTask_GSM_service+0x79e>
   1772a:	4b7a      	ldr	r3, [pc, #488]	; (17914 <vTask_GSM_service+0x854>)
   1772c:	781b      	ldrb	r3, [r3, #0]
   1772e:	b2db      	uxtb	r3, r3
   17730:	2b4e      	cmp	r3, #78	; 0x4e
   17732:	d005      	beq.n	17740 <vTask_GSM_service+0x680>
   17734:	4b77      	ldr	r3, [pc, #476]	; (17914 <vTask_GSM_service+0x854>)
   17736:	781b      	ldrb	r3, [r3, #0]
   17738:	b2db      	uxtb	r3, r3
   1773a:	2b52      	cmp	r3, #82	; 0x52
   1773c:	d000      	beq.n	17740 <vTask_GSM_service+0x680>
   1773e:	e08e      	b.n	1785e <vTask_GSM_service+0x79e>
   17740:	4b75      	ldr	r3, [pc, #468]	; (17918 <vTask_GSM_service+0x858>)
   17742:	781b      	ldrb	r3, [r3, #0]
   17744:	b2db      	uxtb	r3, r3
   17746:	2b4e      	cmp	r3, #78	; 0x4e
   17748:	d005      	beq.n	17756 <vTask_GSM_service+0x696>
   1774a:	4b73      	ldr	r3, [pc, #460]	; (17918 <vTask_GSM_service+0x858>)
   1774c:	781b      	ldrb	r3, [r3, #0]
   1774e:	b2db      	uxtb	r3, r3
   17750:	2b49      	cmp	r3, #73	; 0x49
   17752:	d000      	beq.n	17756 <vTask_GSM_service+0x696>
   17754:	e083      	b.n	1785e <vTask_GSM_service+0x79e>
						{
							if (gsm_responseLine_isRinging(response))
   17756:	230c      	movs	r3, #12
   17758:	18fb      	adds	r3, r7, r3
   1775a:	0018      	movs	r0, r3
   1775c:	4b6f      	ldr	r3, [pc, #444]	; (1791c <vTask_GSM_service+0x85c>)
   1775e:	4798      	blx	r3
   17760:	1e03      	subs	r3, r0, #0
   17762:	d071      	beq.n	17848 <vTask_GSM_service+0x788>
							{
								currentStatus = 'R';
   17764:	4b6b      	ldr	r3, [pc, #428]	; (17914 <vTask_GSM_service+0x854>)
   17766:	2252      	movs	r2, #82	; 0x52
   17768:	701a      	strb	r2, [r3, #0]
								currentCallStatus = 'I';
   1776a:	4b6b      	ldr	r3, [pc, #428]	; (17918 <vTask_GSM_service+0x858>)
   1776c:	2249      	movs	r2, #73	; 0x49
   1776e:	701a      	strb	r2, [r3, #0]
								char incoming_caller[20]={0};
   17770:	23ec      	movs	r3, #236	; 0xec
   17772:	18fb      	adds	r3, r7, r3
   17774:	0018      	movs	r0, r3
   17776:	2314      	movs	r3, #20
   17778:	001a      	movs	r2, r3
   1777a:	2100      	movs	r1, #0
   1777c:	4b48      	ldr	r3, [pc, #288]	; (178a0 <vTask_GSM_service+0x7e0>)
   1777e:	4798      	blx	r3
								inCall = true;
   17780:	4b67      	ldr	r3, [pc, #412]	; (17920 <vTask_GSM_service+0x860>)
   17782:	2201      	movs	r2, #1
   17784:	701a      	strb	r2, [r3, #0]
								
								bool new_call = false;
   17786:	2328      	movs	r3, #40	; 0x28
   17788:	33ff      	adds	r3, #255	; 0xff
   1778a:	18fb      	adds	r3, r7, r3
   1778c:	2200      	movs	r2, #0
   1778e:	701a      	strb	r2, [r3, #0]
								for (uint8_t i=0;i<4;i++)
   17790:	2393      	movs	r3, #147	; 0x93
   17792:	005b      	lsls	r3, r3, #1
   17794:	18fb      	adds	r3, r7, r3
   17796:	2200      	movs	r2, #0
   17798:	701a      	strb	r2, [r3, #0]
   1779a:	e02f      	b.n	177fc <vTask_GSM_service+0x73c>
								{
									vTaskDelay(500/portTICK_PERIOD_MS);
   1779c:	23fa      	movs	r3, #250	; 0xfa
   1779e:	005b      	lsls	r3, r3, #1
   177a0:	0018      	movs	r0, r3
   177a2:	4b60      	ldr	r3, [pc, #384]	; (17924 <vTask_GSM_service+0x864>)
   177a4:	4798      	blx	r3
									gsm_read_response_line(response,sizeof(response));
   177a6:	230c      	movs	r3, #12
   177a8:	18fb      	adds	r3, r7, r3
   177aa:	2140      	movs	r1, #64	; 0x40
   177ac:	0018      	movs	r0, r3
   177ae:	4b3d      	ldr	r3, [pc, #244]	; (178a4 <vTask_GSM_service+0x7e4>)
   177b0:	4798      	blx	r3
									if (gsm_responseLine_get_IncommingCallNo(response,incoming_caller))
   177b2:	23ec      	movs	r3, #236	; 0xec
   177b4:	18fa      	adds	r2, r7, r3
   177b6:	230c      	movs	r3, #12
   177b8:	18fb      	adds	r3, r7, r3
   177ba:	0011      	movs	r1, r2
   177bc:	0018      	movs	r0, r3
   177be:	4b5a      	ldr	r3, [pc, #360]	; (17928 <vTask_GSM_service+0x868>)
   177c0:	4798      	blx	r3
   177c2:	1e03      	subs	r3, r0, #0
   177c4:	d011      	beq.n	177ea <vTask_GSM_service+0x72a>
									{
										setCallStateOnLCD(LCDCALLSTATE_RINGING,incoming_caller,false);
   177c6:	23ec      	movs	r3, #236	; 0xec
   177c8:	18fb      	adds	r3, r7, r3
   177ca:	2200      	movs	r2, #0
   177cc:	0019      	movs	r1, r3
   177ce:	2001      	movs	r0, #1
   177d0:	4b3b      	ldr	r3, [pc, #236]	; (178c0 <vTask_GSM_service+0x800>)
   177d2:	4798      	blx	r3
										new_call = true;
   177d4:	2328      	movs	r3, #40	; 0x28
   177d6:	33ff      	adds	r3, #255	; 0xff
   177d8:	18fb      	adds	r3, r7, r3
   177da:	2201      	movs	r2, #1
   177dc:	701a      	strb	r2, [r3, #0]
										callCutWait = xTaskGetTickCount();
   177de:	4b53      	ldr	r3, [pc, #332]	; (1792c <vTask_GSM_service+0x86c>)
   177e0:	4798      	blx	r3
   177e2:	0002      	movs	r2, r0
   177e4:	4b52      	ldr	r3, [pc, #328]	; (17930 <vTask_GSM_service+0x870>)
   177e6:	601a      	str	r2, [r3, #0]
										break;
   177e8:	e00e      	b.n	17808 <vTask_GSM_service+0x748>
								for (uint8_t i=0;i<4;i++)
   177ea:	2393      	movs	r3, #147	; 0x93
   177ec:	005b      	lsls	r3, r3, #1
   177ee:	18fb      	adds	r3, r7, r3
   177f0:	781a      	ldrb	r2, [r3, #0]
   177f2:	2393      	movs	r3, #147	; 0x93
   177f4:	005b      	lsls	r3, r3, #1
   177f6:	18fb      	adds	r3, r7, r3
   177f8:	3201      	adds	r2, #1
   177fa:	701a      	strb	r2, [r3, #0]
   177fc:	2393      	movs	r3, #147	; 0x93
   177fe:	005b      	lsls	r3, r3, #1
   17800:	18fb      	adds	r3, r7, r3
   17802:	781b      	ldrb	r3, [r3, #0]
   17804:	2b03      	cmp	r3, #3
   17806:	d9c9      	bls.n	1779c <vTask_GSM_service+0x6dc>
									}
								}
								if (new_call)
   17808:	2328      	movs	r3, #40	; 0x28
   1780a:	33ff      	adds	r3, #255	; 0xff
   1780c:	18fb      	adds	r3, r7, r3
   1780e:	781b      	ldrb	r3, [r3, #0]
   17810:	2b00      	cmp	r3, #0
   17812:	d100      	bne.n	17816 <vTask_GSM_service+0x756>
   17814:	e1ab      	b.n	17b6e <vTask_GSM_service+0xaae>
								{
									new_call = false;
   17816:	2328      	movs	r3, #40	; 0x28
   17818:	33ff      	adds	r3, #255	; 0xff
   1781a:	18fb      	adds	r3, r7, r3
   1781c:	2200      	movs	r2, #0
   1781e:	701a      	strb	r2, [r3, #0]
									if (checkNumber(incoming_caller))
   17820:	23ec      	movs	r3, #236	; 0xec
   17822:	18fb      	adds	r3, r7, r3
   17824:	0018      	movs	r0, r3
   17826:	4b43      	ldr	r3, [pc, #268]	; (17934 <vTask_GSM_service+0x874>)
   17828:	4798      	blx	r3
   1782a:	1e03      	subs	r3, r0, #0
   1782c:	d009      	beq.n	17842 <vTask_GSM_service+0x782>
									{
										acceptCall();
   1782e:	4b42      	ldr	r3, [pc, #264]	; (17938 <vTask_GSM_service+0x878>)
   17830:	4798      	blx	r3
										setCallStateOnLCD(LCDCALLSTATE_INCALL,incoming_caller,false);
   17832:	23ec      	movs	r3, #236	; 0xec
   17834:	18fb      	adds	r3, r7, r3
   17836:	2200      	movs	r2, #0
   17838:	0019      	movs	r1, r3
   1783a:	2002      	movs	r0, #2
   1783c:	4b20      	ldr	r3, [pc, #128]	; (178c0 <vTask_GSM_service+0x800>)
   1783e:	4798      	blx	r3
							if (gsm_responseLine_isRinging(response))
   17840:	e195      	b.n	17b6e <vTask_GSM_service+0xaae>
									}
									else
									{
										endCall();
   17842:	4b3e      	ldr	r3, [pc, #248]	; (1793c <vTask_GSM_service+0x87c>)
   17844:	4798      	blx	r3
							if (gsm_responseLine_isRinging(response))
   17846:	e192      	b.n	17b6e <vTask_GSM_service+0xaae>
									}
								}
							}
							else if (gsm_responseLine_isCallCut(response))
   17848:	230c      	movs	r3, #12
   1784a:	18fb      	adds	r3, r7, r3
   1784c:	0018      	movs	r0, r3
   1784e:	4b3c      	ldr	r3, [pc, #240]	; (17940 <vTask_GSM_service+0x880>)
   17850:	4798      	blx	r3
   17852:	1e03      	subs	r3, r0, #0
   17854:	d100      	bne.n	17858 <vTask_GSM_service+0x798>
   17856:	e18a      	b.n	17b6e <vTask_GSM_service+0xaae>
							{
								endCall();
   17858:	4b38      	ldr	r3, [pc, #224]	; (1793c <vTask_GSM_service+0x87c>)
   1785a:	4798      	blx	r3
							if (gsm_responseLine_isRinging(response))
   1785c:	e187      	b.n	17b6e <vTask_GSM_service+0xaae>
							}
						}
						else if (!freezeIncomingCalls && currentStatus == 'I' && currentCallStatus == 'I') //IN CALL INCOMING CALL
   1785e:	4b2c      	ldr	r3, [pc, #176]	; (17910 <vTask_GSM_service+0x850>)
   17860:	781b      	ldrb	r3, [r3, #0]
   17862:	2201      	movs	r2, #1
   17864:	4053      	eors	r3, r2
   17866:	b2db      	uxtb	r3, r3
   17868:	2b00      	cmp	r3, #0
   1786a:	d100      	bne.n	1786e <vTask_GSM_service+0x7ae>
   1786c:	e09c      	b.n	179a8 <vTask_GSM_service+0x8e8>
   1786e:	4b29      	ldr	r3, [pc, #164]	; (17914 <vTask_GSM_service+0x854>)
   17870:	781b      	ldrb	r3, [r3, #0]
   17872:	b2db      	uxtb	r3, r3
   17874:	2b49      	cmp	r3, #73	; 0x49
   17876:	d000      	beq.n	1787a <vTask_GSM_service+0x7ba>
   17878:	e096      	b.n	179a8 <vTask_GSM_service+0x8e8>
   1787a:	4b27      	ldr	r3, [pc, #156]	; (17918 <vTask_GSM_service+0x858>)
   1787c:	781b      	ldrb	r3, [r3, #0]
   1787e:	b2db      	uxtb	r3, r3
   17880:	2b49      	cmp	r3, #73	; 0x49
   17882:	d000      	beq.n	17886 <vTask_GSM_service+0x7c6>
   17884:	e090      	b.n	179a8 <vTask_GSM_service+0x8e8>
						{
							if (gsm_responseLine_isCallCut(response))
   17886:	230c      	movs	r3, #12
   17888:	18fb      	adds	r3, r7, r3
   1788a:	0018      	movs	r0, r3
   1788c:	4b2c      	ldr	r3, [pc, #176]	; (17940 <vTask_GSM_service+0x880>)
   1788e:	4798      	blx	r3
   17890:	1e03      	subs	r3, r0, #0
   17892:	d057      	beq.n	17944 <vTask_GSM_service+0x884>
							{
								endCall();
   17894:	4b29      	ldr	r3, [pc, #164]	; (1793c <vTask_GSM_service+0x87c>)
   17896:	4798      	blx	r3
							if (gsm_responseLine_isCallCut(response))
   17898:	e16d      	b.n	17b76 <vTask_GSM_service+0xab6>
   1789a:	46c0      	nop			; (mov r8, r8)
   1789c:	fffffedc 	.word	0xfffffedc
   178a0:	000289fb 	.word	0x000289fb
   178a4:	000132fd 	.word	0x000132fd
   178a8:	0001338d 	.word	0x0001338d
   178ac:	00012b19 	.word	0x00012b19
   178b0:	00011975 	.word	0x00011975
   178b4:	00010981 	.word	0x00010981
   178b8:	000109f1 	.word	0x000109f1
   178bc:	0002a1a4 	.word	0x0002a1a4
   178c0:	0001c729 	.word	0x0001c729
   178c4:	00013e81 	.word	0x00013e81
   178c8:	0002a1ac 	.word	0x0002a1ac
   178cc:	00013eed 	.word	0x00013eed
   178d0:	00028c8b 	.word	0x00028c8b
   178d4:	000289d7 	.word	0x000289d7
   178d8:	00014c8d 	.word	0x00014c8d
   178dc:	00010a39 	.word	0x00010a39
   178e0:	0002a190 	.word	0x0002a190
   178e4:	00010b29 	.word	0x00010b29
   178e8:	00010ab1 	.word	0x00010ab1
   178ec:	0002a1b0 	.word	0x0002a1b0
   178f0:	000129ed 	.word	0x000129ed
   178f4:	20000638 	.word	0x20000638
   178f8:	00010a75 	.word	0x00010a75
   178fc:	00010b79 	.word	0x00010b79
   17900:	00010bc9 	.word	0x00010bc9
   17904:	00010d05 	.word	0x00010d05
   17908:	0002a1b8 	.word	0x0002a1b8
   1790c:	000125f5 	.word	0x000125f5
   17910:	2000073c 	.word	0x2000073c
   17914:	200007c0 	.word	0x200007c0
   17918:	2000077b 	.word	0x2000077b
   1791c:	00013415 	.word	0x00013415
   17920:	20000788 	.word	0x20000788
   17924:	0001fad9 	.word	0x0001fad9
   17928:	00013445 	.word	0x00013445
   1792c:	0001fe3d 	.word	0x0001fe3d
   17930:	200007f4 	.word	0x200007f4
   17934:	00016d49 	.word	0x00016d49
   17938:	000144f5 	.word	0x000144f5
   1793c:	000141fd 	.word	0x000141fd
   17940:	000134e9 	.word	0x000134e9
							}
							else if(gsm_responseLine_isNew_DTMF_Command_Received(response))
   17944:	230c      	movs	r3, #12
   17946:	18fb      	adds	r3, r7, r3
   17948:	0018      	movs	r0, r3
   1794a:	4b8c      	ldr	r3, [pc, #560]	; (17b7c <vTask_GSM_service+0xabc>)
   1794c:	4798      	blx	r3
   1794e:	1e03      	subs	r3, r0, #0
   17950:	d024      	beq.n	1799c <vTask_GSM_service+0x8dc>
							{
								char *dtmf_tocken;
								dtmf_tocken = strtok(response,": ");
   17952:	4a8b      	ldr	r2, [pc, #556]	; (17b80 <vTask_GSM_service+0xac0>)
   17954:	230c      	movs	r3, #12
   17956:	18fb      	adds	r3, r7, r3
   17958:	0011      	movs	r1, r2
   1795a:	0018      	movs	r0, r3
   1795c:	4b89      	ldr	r3, [pc, #548]	; (17b84 <vTask_GSM_service+0xac4>)
   1795e:	4798      	blx	r3
   17960:	0003      	movs	r3, r0
   17962:	228e      	movs	r2, #142	; 0x8e
   17964:	0052      	lsls	r2, r2, #1
   17966:	18ba      	adds	r2, r7, r2
   17968:	6013      	str	r3, [r2, #0]
								dtmf_tocken = strtok(NULL,": ");
   1796a:	4b85      	ldr	r3, [pc, #532]	; (17b80 <vTask_GSM_service+0xac0>)
   1796c:	0019      	movs	r1, r3
   1796e:	2000      	movs	r0, #0
   17970:	4b84      	ldr	r3, [pc, #528]	; (17b84 <vTask_GSM_service+0xac4>)
   17972:	4798      	blx	r3
   17974:	0003      	movs	r3, r0
   17976:	228e      	movs	r2, #142	; 0x8e
   17978:	0052      	lsls	r2, r2, #1
   1797a:	18ba      	adds	r2, r7, r2
   1797c:	6013      	str	r3, [r2, #0]
								RemoveSpaces(dtmf_tocken);
   1797e:	238e      	movs	r3, #142	; 0x8e
   17980:	005b      	lsls	r3, r3, #1
   17982:	18fb      	adds	r3, r7, r3
   17984:	681b      	ldr	r3, [r3, #0]
   17986:	0018      	movs	r0, r3
   17988:	4b7f      	ldr	r3, [pc, #508]	; (17b88 <vTask_GSM_service+0xac8>)
   1798a:	4798      	blx	r3
								processOnDTMF(dtmf_tocken);
   1798c:	238e      	movs	r3, #142	; 0x8e
   1798e:	005b      	lsls	r3, r3, #1
   17990:	18fb      	adds	r3, r7, r3
   17992:	681b      	ldr	r3, [r3, #0]
   17994:	0018      	movs	r0, r3
   17996:	4b7d      	ldr	r3, [pc, #500]	; (17b8c <vTask_GSM_service+0xacc>)
   17998:	4798      	blx	r3
							if (gsm_responseLine_isCallCut(response))
   1799a:	e0ec      	b.n	17b76 <vTask_GSM_service+0xab6>
							}
							else
							{
								playSoundAgain(response);
   1799c:	230c      	movs	r3, #12
   1799e:	18fb      	adds	r3, r7, r3
   179a0:	0018      	movs	r0, r3
   179a2:	4b7b      	ldr	r3, [pc, #492]	; (17b90 <vTask_GSM_service+0xad0>)
   179a4:	4798      	blx	r3
							if (gsm_responseLine_isCallCut(response))
   179a6:	e0e6      	b.n	17b76 <vTask_GSM_service+0xab6>
							}
						}
						else if ((currentStatus == 'N' || currentStatus == 'R') && currentCallStatus == 'O') // OUTGOING CALL
   179a8:	4b7a      	ldr	r3, [pc, #488]	; (17b94 <vTask_GSM_service+0xad4>)
   179aa:	781b      	ldrb	r3, [r3, #0]
   179ac:	b2db      	uxtb	r3, r3
   179ae:	2b4e      	cmp	r3, #78	; 0x4e
   179b0:	d004      	beq.n	179bc <vTask_GSM_service+0x8fc>
   179b2:	4b78      	ldr	r3, [pc, #480]	; (17b94 <vTask_GSM_service+0xad4>)
   179b4:	781b      	ldrb	r3, [r3, #0]
   179b6:	b2db      	uxtb	r3, r3
   179b8:	2b52      	cmp	r3, #82	; 0x52
   179ba:	d163      	bne.n	17a84 <vTask_GSM_service+0x9c4>
   179bc:	4b76      	ldr	r3, [pc, #472]	; (17b98 <vTask_GSM_service+0xad8>)
   179be:	781b      	ldrb	r3, [r3, #0]
   179c0:	b2db      	uxtb	r3, r3
   179c2:	2b4f      	cmp	r3, #79	; 0x4f
   179c4:	d15e      	bne.n	17a84 <vTask_GSM_service+0x9c4>
						{
							if (OutGoingcallState(response) == 'R')
   179c6:	230c      	movs	r3, #12
   179c8:	18fb      	adds	r3, r7, r3
   179ca:	0018      	movs	r0, r3
   179cc:	4b73      	ldr	r3, [pc, #460]	; (17b9c <vTask_GSM_service+0xadc>)
   179ce:	4798      	blx	r3
   179d0:	0003      	movs	r3, r0
   179d2:	2b52      	cmp	r3, #82	; 0x52
   179d4:	d10b      	bne.n	179ee <vTask_GSM_service+0x92e>
							{
								callCutWait = xTaskGetTickCount();
   179d6:	4b72      	ldr	r3, [pc, #456]	; (17ba0 <vTask_GSM_service+0xae0>)
   179d8:	4798      	blx	r3
   179da:	0002      	movs	r2, r0
   179dc:	4b71      	ldr	r3, [pc, #452]	; (17ba4 <vTask_GSM_service+0xae4>)
   179de:	601a      	str	r2, [r3, #0]
								currentStatus = 'R';
   179e0:	4b6c      	ldr	r3, [pc, #432]	; (17b94 <vTask_GSM_service+0xad4>)
   179e2:	2252      	movs	r2, #82	; 0x52
   179e4:	701a      	strb	r2, [r3, #0]
								currentCallStatus = 'O';
   179e6:	4b6c      	ldr	r3, [pc, #432]	; (17b98 <vTask_GSM_service+0xad8>)
   179e8:	224f      	movs	r2, #79	; 0x4f
   179ea:	701a      	strb	r2, [r3, #0]
							if (OutGoingcallState(response) == 'R')
   179ec:	e0c2      	b.n	17b74 <vTask_GSM_service+0xab4>
							}
							else if (gsm_responseLine_isCallCut(response) || OutGoingcallState(response) == 'E') //
   179ee:	230c      	movs	r3, #12
   179f0:	18fb      	adds	r3, r7, r3
   179f2:	0018      	movs	r0, r3
   179f4:	4b6c      	ldr	r3, [pc, #432]	; (17ba8 <vTask_GSM_service+0xae8>)
   179f6:	4798      	blx	r3
   179f8:	1e03      	subs	r3, r0, #0
   179fa:	d107      	bne.n	17a0c <vTask_GSM_service+0x94c>
   179fc:	230c      	movs	r3, #12
   179fe:	18fb      	adds	r3, r7, r3
   17a00:	0018      	movs	r0, r3
   17a02:	4b66      	ldr	r3, [pc, #408]	; (17b9c <vTask_GSM_service+0xadc>)
   17a04:	4798      	blx	r3
   17a06:	0003      	movs	r3, r0
   17a08:	2b45      	cmp	r3, #69	; 0x45
   17a0a:	d110      	bne.n	17a2e <vTask_GSM_service+0x96e>
							{
								char t1 = actionType;
   17a0c:	231c      	movs	r3, #28
   17a0e:	33ff      	adds	r3, #255	; 0xff
   17a10:	18fb      	adds	r3, r7, r3
   17a12:	4a66      	ldr	r2, [pc, #408]	; (17bac <vTask_GSM_service+0xaec>)
   17a14:	7812      	ldrb	r2, [r2, #0]
   17a16:	701a      	strb	r2, [r3, #0]
								endCall();
   17a18:	4b65      	ldr	r3, [pc, #404]	; (17bb0 <vTask_GSM_service+0xaf0>)
   17a1a:	4798      	blx	r3
								checkRespSMS(t1);
   17a1c:	231c      	movs	r3, #28
   17a1e:	33ff      	adds	r3, #255	; 0xff
   17a20:	18fb      	adds	r3, r7, r3
   17a22:	781b      	ldrb	r3, [r3, #0]
   17a24:	0018      	movs	r0, r3
   17a26:	4b63      	ldr	r3, [pc, #396]	; (17bb4 <vTask_GSM_service+0xaf4>)
   17a28:	4798      	blx	r3
							{
   17a2a:	46c0      	nop			; (mov r8, r8)
							if (OutGoingcallState(response) == 'R')
   17a2c:	e0a2      	b.n	17b74 <vTask_GSM_service+0xab4>
							}
							else if (OutGoingcallState(response) == 'I')
   17a2e:	230c      	movs	r3, #12
   17a30:	18fb      	adds	r3, r7, r3
   17a32:	0018      	movs	r0, r3
   17a34:	4b59      	ldr	r3, [pc, #356]	; (17b9c <vTask_GSM_service+0xadc>)
   17a36:	4798      	blx	r3
   17a38:	0003      	movs	r3, r0
   17a3a:	2b49      	cmp	r3, #73	; 0x49
   17a3c:	d000      	beq.n	17a40 <vTask_GSM_service+0x980>
   17a3e:	e099      	b.n	17b74 <vTask_GSM_service+0xab4>
							{
								callCutWait = xTaskGetTickCount();
   17a40:	4b57      	ldr	r3, [pc, #348]	; (17ba0 <vTask_GSM_service+0xae0>)
   17a42:	4798      	blx	r3
   17a44:	0002      	movs	r2, r0
   17a46:	4b57      	ldr	r3, [pc, #348]	; (17ba4 <vTask_GSM_service+0xae4>)
   17a48:	601a      	str	r2, [r3, #0]
								currentStatus = 'I';
   17a4a:	4b52      	ldr	r3, [pc, #328]	; (17b94 <vTask_GSM_service+0xad4>)
   17a4c:	2249      	movs	r2, #73	; 0x49
   17a4e:	701a      	strb	r2, [r3, #0]
								currentCallStatus = 'O';
   17a50:	4b51      	ldr	r3, [pc, #324]	; (17b98 <vTask_GSM_service+0xad8>)
   17a52:	224f      	movs	r2, #79	; 0x4f
   17a54:	701a      	strb	r2, [r3, #0]
								callAccepted = true;
   17a56:	4b58      	ldr	r3, [pc, #352]	; (17bb8 <vTask_GSM_service+0xaf8>)
   17a58:	2201      	movs	r2, #1
   17a5a:	701a      	strb	r2, [r3, #0]
								setCallStateOnLCD(LCDCALLSTATE_INCALL,NULL,true);
   17a5c:	2201      	movs	r2, #1
   17a5e:	2100      	movs	r1, #0
   17a60:	2002      	movs	r0, #2
   17a62:	4b56      	ldr	r3, [pc, #344]	; (17bbc <vTask_GSM_service+0xafc>)
   17a64:	4798      	blx	r3
								if (!m2mEvent)
   17a66:	4b56      	ldr	r3, [pc, #344]	; (17bc0 <vTask_GSM_service+0xb00>)
   17a68:	781b      	ldrb	r3, [r3, #0]
   17a6a:	2201      	movs	r2, #1
   17a6c:	4053      	eors	r3, r2
   17a6e:	b2db      	uxtb	r3, r3
   17a70:	2b00      	cmp	r3, #0
   17a72:	d100      	bne.n	17a76 <vTask_GSM_service+0x9b6>
   17a74:	e07e      	b.n	17b74 <vTask_GSM_service+0xab4>
								{
									playSound(actionType,true);
   17a76:	4b4d      	ldr	r3, [pc, #308]	; (17bac <vTask_GSM_service+0xaec>)
   17a78:	781b      	ldrb	r3, [r3, #0]
   17a7a:	2101      	movs	r1, #1
   17a7c:	0018      	movs	r0, r3
   17a7e:	4b51      	ldr	r3, [pc, #324]	; (17bc4 <vTask_GSM_service+0xb04>)
   17a80:	4798      	blx	r3
							if (OutGoingcallState(response) == 'R')
   17a82:	e077      	b.n	17b74 <vTask_GSM_service+0xab4>
								}
							}
						}
						else if (currentStatus == 'I' && currentCallStatus == 'O') //IN CALL OUTGOING CALL
   17a84:	4b43      	ldr	r3, [pc, #268]	; (17b94 <vTask_GSM_service+0xad4>)
   17a86:	781b      	ldrb	r3, [r3, #0]
   17a88:	b2db      	uxtb	r3, r3
   17a8a:	2b49      	cmp	r3, #73	; 0x49
   17a8c:	d001      	beq.n	17a92 <vTask_GSM_service+0x9d2>
   17a8e:	f7ff fbd0 	bl	17232 <vTask_GSM_service+0x172>
   17a92:	4b41      	ldr	r3, [pc, #260]	; (17b98 <vTask_GSM_service+0xad8>)
   17a94:	781b      	ldrb	r3, [r3, #0]
   17a96:	b2db      	uxtb	r3, r3
   17a98:	2b4f      	cmp	r3, #79	; 0x4f
   17a9a:	d001      	beq.n	17aa0 <vTask_GSM_service+0x9e0>
   17a9c:	f7ff fbc9 	bl	17232 <vTask_GSM_service+0x172>
						{
							if (gsm_responseLine_isCallCut(response) || OutGoingcallState(response) == 'E')
   17aa0:	230c      	movs	r3, #12
   17aa2:	18fb      	adds	r3, r7, r3
   17aa4:	0018      	movs	r0, r3
   17aa6:	4b40      	ldr	r3, [pc, #256]	; (17ba8 <vTask_GSM_service+0xae8>)
   17aa8:	4798      	blx	r3
   17aaa:	1e03      	subs	r3, r0, #0
   17aac:	d107      	bne.n	17abe <vTask_GSM_service+0x9fe>
   17aae:	230c      	movs	r3, #12
   17ab0:	18fb      	adds	r3, r7, r3
   17ab2:	0018      	movs	r0, r3
   17ab4:	4b39      	ldr	r3, [pc, #228]	; (17b9c <vTask_GSM_service+0xadc>)
   17ab6:	4798      	blx	r3
   17ab8:	0003      	movs	r3, r0
   17aba:	2b45      	cmp	r3, #69	; 0x45
   17abc:	d102      	bne.n	17ac4 <vTask_GSM_service+0xa04>
							{
								endCall();
   17abe:	4b3c      	ldr	r3, [pc, #240]	; (17bb0 <vTask_GSM_service+0xaf0>)
   17ac0:	4798      	blx	r3
   17ac2:	e058      	b.n	17b76 <vTask_GSM_service+0xab6>
							}
							else if (gsm_responseLine_isNew_DTMF_Command_Received(response))
   17ac4:	230c      	movs	r3, #12
   17ac6:	18fb      	adds	r3, r7, r3
   17ac8:	0018      	movs	r0, r3
   17aca:	4b2c      	ldr	r3, [pc, #176]	; (17b7c <vTask_GSM_service+0xabc>)
   17acc:	4798      	blx	r3
   17ace:	1e03      	subs	r3, r0, #0
   17ad0:	d025      	beq.n	17b1e <vTask_GSM_service+0xa5e>
							{
								char *dtmf_tocken;
								dtmf_tocken = strtok(response,": ");
   17ad2:	4a2b      	ldr	r2, [pc, #172]	; (17b80 <vTask_GSM_service+0xac0>)
   17ad4:	230c      	movs	r3, #12
   17ad6:	18fb      	adds	r3, r7, r3
   17ad8:	0011      	movs	r1, r2
   17ada:	0018      	movs	r0, r3
   17adc:	4b29      	ldr	r3, [pc, #164]	; (17b84 <vTask_GSM_service+0xac4>)
   17ade:	4798      	blx	r3
   17ae0:	0003      	movs	r3, r0
   17ae2:	228a      	movs	r2, #138	; 0x8a
   17ae4:	0052      	lsls	r2, r2, #1
   17ae6:	18ba      	adds	r2, r7, r2
   17ae8:	6013      	str	r3, [r2, #0]
								dtmf_tocken = strtok(NULL,": ");
   17aea:	4b25      	ldr	r3, [pc, #148]	; (17b80 <vTask_GSM_service+0xac0>)
   17aec:	0019      	movs	r1, r3
   17aee:	2000      	movs	r0, #0
   17af0:	4b24      	ldr	r3, [pc, #144]	; (17b84 <vTask_GSM_service+0xac4>)
   17af2:	4798      	blx	r3
   17af4:	0003      	movs	r3, r0
   17af6:	228a      	movs	r2, #138	; 0x8a
   17af8:	0052      	lsls	r2, r2, #1
   17afa:	18ba      	adds	r2, r7, r2
   17afc:	6013      	str	r3, [r2, #0]
								RemoveSpaces(dtmf_tocken);
   17afe:	238a      	movs	r3, #138	; 0x8a
   17b00:	005b      	lsls	r3, r3, #1
   17b02:	18fb      	adds	r3, r7, r3
   17b04:	681b      	ldr	r3, [r3, #0]
   17b06:	0018      	movs	r0, r3
   17b08:	4b1f      	ldr	r3, [pc, #124]	; (17b88 <vTask_GSM_service+0xac8>)
   17b0a:	4798      	blx	r3
								processOnDTMF(dtmf_tocken);
   17b0c:	238a      	movs	r3, #138	; 0x8a
   17b0e:	005b      	lsls	r3, r3, #1
   17b10:	18fb      	adds	r3, r7, r3
   17b12:	681b      	ldr	r3, [r3, #0]
   17b14:	0018      	movs	r0, r3
   17b16:	4b1d      	ldr	r3, [pc, #116]	; (17b8c <vTask_GSM_service+0xacc>)
   17b18:	4798      	blx	r3
   17b1a:	f7ff fb8a 	bl	17232 <vTask_GSM_service+0x172>
							}
							else
							{
								playSoundAgain(response);
   17b1e:	230c      	movs	r3, #12
   17b20:	18fb      	adds	r3, r7, r3
   17b22:	0018      	movs	r0, r3
   17b24:	4b1a      	ldr	r3, [pc, #104]	; (17b90 <vTask_GSM_service+0xad0>)
   17b26:	4798      	blx	r3
   17b28:	f7ff fb83 	bl	17232 <vTask_GSM_service+0x172>
				}
			}
		}
		else
		{
			boolGsm_config_flag			=false;
   17b2c:	232c      	movs	r3, #44	; 0x2c
   17b2e:	33ff      	adds	r3, #255	; 0xff
   17b30:	18fb      	adds	r3, r7, r3
   17b32:	2200      	movs	r2, #0
   17b34:	701a      	strb	r2, [r3, #0]
			boolOne_Time_Msg_Delete_Flag   =false;
   17b36:	2395      	movs	r3, #149	; 0x95
   17b38:	005b      	lsls	r3, r3, #1
   17b3a:	18fb      	adds	r3, r7, r3
   17b3c:	2200      	movs	r2, #0
   17b3e:	701a      	strb	r2, [r3, #0]
			
			GSM_PWR_ON;
   17b40:	4b21      	ldr	r3, [pc, #132]	; (17bc8 <vTask_GSM_service+0xb08>)
   17b42:	4a21      	ldr	r2, [pc, #132]	; (17bc8 <vTask_GSM_service+0xb08>)
   17b44:	6812      	ldr	r2, [r2, #0]
   17b46:	2180      	movs	r1, #128	; 0x80
   17b48:	0249      	lsls	r1, r1, #9
   17b4a:	430a      	orrs	r2, r1
   17b4c:	601a      	str	r2, [r3, #0]
			vTaskDelay(3000);
   17b4e:	4b1f      	ldr	r3, [pc, #124]	; (17bcc <vTask_GSM_service+0xb0c>)
   17b50:	0018      	movs	r0, r3
   17b52:	4b1f      	ldr	r3, [pc, #124]	; (17bd0 <vTask_GSM_service+0xb10>)
   17b54:	4798      	blx	r3
			GSM_PWR_OFF;
   17b56:	4b1c      	ldr	r3, [pc, #112]	; (17bc8 <vTask_GSM_service+0xb08>)
   17b58:	4a1b      	ldr	r2, [pc, #108]	; (17bc8 <vTask_GSM_service+0xb08>)
   17b5a:	6812      	ldr	r2, [r2, #0]
   17b5c:	491d      	ldr	r1, [pc, #116]	; (17bd4 <vTask_GSM_service+0xb14>)
   17b5e:	400a      	ands	r2, r1
   17b60:	601a      	str	r2, [r3, #0]
			vTaskDelay(5000);
   17b62:	4b1d      	ldr	r3, [pc, #116]	; (17bd8 <vTask_GSM_service+0xb18>)
   17b64:	0018      	movs	r0, r3
   17b66:	4b1a      	ldr	r3, [pc, #104]	; (17bd0 <vTask_GSM_service+0xb10>)
   17b68:	4798      	blx	r3
   17b6a:	f7ff fb62 	bl	17232 <vTask_GSM_service+0x172>
							if (gsm_responseLine_isRinging(response))
   17b6e:	46c0      	nop			; (mov r8, r8)
   17b70:	f7ff fb5f 	bl	17232 <vTask_GSM_service+0x172>
							if (OutGoingcallState(response) == 'R')
   17b74:	46c0      	nop			; (mov r8, r8)
		if (GSM_STATUS_OK)
   17b76:	f7ff fb5c 	bl	17232 <vTask_GSM_service+0x172>
   17b7a:	46c0      	nop			; (mov r8, r8)
   17b7c:	00013561 	.word	0x00013561
   17b80:	0002a1c8 	.word	0x0002a1c8
   17b84:	00028ced 	.word	0x00028ced
   17b88:	00012979 	.word	0x00012979
   17b8c:	00014a89 	.word	0x00014a89
   17b90:	0001464d 	.word	0x0001464d
   17b94:	200007c0 	.word	0x200007c0
   17b98:	2000077b 	.word	0x2000077b
   17b9c:	0001478d 	.word	0x0001478d
   17ba0:	0001fe3d 	.word	0x0001fe3d
   17ba4:	200007f4 	.word	0x200007f4
   17ba8:	000134e9 	.word	0x000134e9
   17bac:	2000075b 	.word	0x2000075b
   17bb0:	000141fd 	.word	0x000141fd
   17bb4:	00014a11 	.word	0x00014a11
   17bb8:	2000078a 	.word	0x2000078a
   17bbc:	0001c729 	.word	0x0001c729
   17bc0:	2000073b 	.word	0x2000073b
   17bc4:	0001453d 	.word	0x0001453d
   17bc8:	41004490 	.word	0x41004490
   17bcc:	00000bb8 	.word	0x00000bb8
   17bd0:	0001fad9 	.word	0x0001fad9
   17bd4:	fffeffff 	.word	0xfffeffff
   17bd8:	00001388 	.word	0x00001388

00017bdc <start_gsm_service>:
		}
	}
}
void start_gsm_service(void)
{
   17bdc:	b590      	push	{r4, r7, lr}
   17bde:	b083      	sub	sp, #12
   17be0:	af02      	add	r7, sp, #8
	xTaskCreate(vTask_GSM_service,NULL,(uint16_t)940,NULL,1,NULL);
   17be2:	23eb      	movs	r3, #235	; 0xeb
   17be4:	009a      	lsls	r2, r3, #2
   17be6:	4806      	ldr	r0, [pc, #24]	; (17c00 <start_gsm_service+0x24>)
   17be8:	2300      	movs	r3, #0
   17bea:	9301      	str	r3, [sp, #4]
   17bec:	2301      	movs	r3, #1
   17bee:	9300      	str	r3, [sp, #0]
   17bf0:	2300      	movs	r3, #0
   17bf2:	2100      	movs	r1, #0
   17bf4:	4c03      	ldr	r4, [pc, #12]	; (17c04 <start_gsm_service+0x28>)
   17bf6:	47a0      	blx	r4
}
   17bf8:	46c0      	nop			; (mov r8, r8)
   17bfa:	46bd      	mov	sp, r7
   17bfc:	b001      	add	sp, #4
   17bfe:	bd90      	pop	{r4, r7, pc}
   17c00:	000170c1 	.word	0x000170c1
   17c04:	0001f799 	.word	0x0001f799

00017c08 <busy>:

bool busy(void)
{
   17c08:	b580      	push	{r7, lr}
   17c0a:	af00      	add	r7, sp, #0
	return (inCall || isRinging  /*|| inInterrupt*/);
   17c0c:	4b09      	ldr	r3, [pc, #36]	; (17c34 <busy+0x2c>)
   17c0e:	781b      	ldrb	r3, [r3, #0]
   17c10:	2b00      	cmp	r3, #0
   17c12:	d104      	bne.n	17c1e <busy+0x16>
   17c14:	4b08      	ldr	r3, [pc, #32]	; (17c38 <busy+0x30>)
   17c16:	781b      	ldrb	r3, [r3, #0]
   17c18:	b2db      	uxtb	r3, r3
   17c1a:	2b00      	cmp	r3, #0
   17c1c:	d001      	beq.n	17c22 <busy+0x1a>
   17c1e:	2301      	movs	r3, #1
   17c20:	e000      	b.n	17c24 <busy+0x1c>
   17c22:	2300      	movs	r3, #0
   17c24:	1c1a      	adds	r2, r3, #0
   17c26:	2301      	movs	r3, #1
   17c28:	4013      	ands	r3, r2
   17c2a:	b2db      	uxtb	r3, r3
}
   17c2c:	0018      	movs	r0, r3
   17c2e:	46bd      	mov	sp, r7
   17c30:	bd80      	pop	{r7, pc}
   17c32:	46c0      	nop			; (mov r8, r8)
   17c34:	20000788 	.word	0x20000788
   17c38:	20000696 	.word	0x20000696

00017c3c <checkNotInCall>:

bool checkNotInCall(void)
{
   17c3c:	b580      	push	{r7, lr}
   17c3e:	af00      	add	r7, sp, #0
	return ( /*!sendCUSDResponse     &&*/  currentStatus=='N'
   17c40:	4b13      	ldr	r3, [pc, #76]	; (17c90 <checkNotInCall+0x54>)
   17c42:	781b      	ldrb	r3, [r3, #0]
   17c44:	b2db      	uxtb	r3, r3
	&&  currentCallStatus=='N'  &&  obtainNewEvent
	&&  !freezeIncomingCalls && !busy());
   17c46:	2b4e      	cmp	r3, #78	; 0x4e
   17c48:	d11a      	bne.n	17c80 <checkNotInCall+0x44>
	&&  currentCallStatus=='N'  &&  obtainNewEvent
   17c4a:	4b12      	ldr	r3, [pc, #72]	; (17c94 <checkNotInCall+0x58>)
   17c4c:	781b      	ldrb	r3, [r3, #0]
   17c4e:	b2db      	uxtb	r3, r3
   17c50:	2b4e      	cmp	r3, #78	; 0x4e
   17c52:	d115      	bne.n	17c80 <checkNotInCall+0x44>
   17c54:	4b10      	ldr	r3, [pc, #64]	; (17c98 <checkNotInCall+0x5c>)
   17c56:	781b      	ldrb	r3, [r3, #0]
   17c58:	2b00      	cmp	r3, #0
   17c5a:	d011      	beq.n	17c80 <checkNotInCall+0x44>
	&&  !freezeIncomingCalls && !busy());
   17c5c:	4b0f      	ldr	r3, [pc, #60]	; (17c9c <checkNotInCall+0x60>)
   17c5e:	781b      	ldrb	r3, [r3, #0]
   17c60:	2201      	movs	r2, #1
   17c62:	4053      	eors	r3, r2
   17c64:	b2db      	uxtb	r3, r3
   17c66:	2b00      	cmp	r3, #0
   17c68:	d00a      	beq.n	17c80 <checkNotInCall+0x44>
   17c6a:	4b0d      	ldr	r3, [pc, #52]	; (17ca0 <checkNotInCall+0x64>)
   17c6c:	4798      	blx	r3
   17c6e:	0003      	movs	r3, r0
   17c70:	001a      	movs	r2, r3
   17c72:	2301      	movs	r3, #1
   17c74:	4053      	eors	r3, r2
   17c76:	b2db      	uxtb	r3, r3
   17c78:	2b00      	cmp	r3, #0
   17c7a:	d001      	beq.n	17c80 <checkNotInCall+0x44>
   17c7c:	2301      	movs	r3, #1
   17c7e:	e000      	b.n	17c82 <checkNotInCall+0x46>
   17c80:	2300      	movs	r3, #0
   17c82:	1c1a      	adds	r2, r3, #0
   17c84:	2301      	movs	r3, #1
   17c86:	4013      	ands	r3, r2
   17c88:	b2db      	uxtb	r3, r3
}
   17c8a:	0018      	movs	r0, r3
   17c8c:	46bd      	mov	sp, r7
   17c8e:	bd80      	pop	{r7, pc}
   17c90:	200007c0 	.word	0x200007c0
   17c94:	2000077b 	.word	0x2000077b
   17c98:	20000766 	.word	0x20000766
   17c9c:	2000073c 	.word	0x2000073c
   17ca0:	00017c09 	.word	0x00017c09

00017ca4 <gsm_checkSleepElligible>:

bool gsm_checkSleepElligible(void)
{
   17ca4:	b580      	push	{r7, lr}
   17ca6:	af00      	add	r7, sp, #0
	if (factory_settings_parameter_struct.ENABLE_M2M)
   17ca8:	4b21      	ldr	r3, [pc, #132]	; (17d30 <gsm_checkSleepElligible+0x8c>)
   17caa:	78db      	ldrb	r3, [r3, #3]
   17cac:	2b00      	cmp	r3, #0
   17cae:	d021      	beq.n	17cf4 <gsm_checkSleepElligible+0x50>
	{
		return(!isGSMModuleAwake  && checkNotInCall() && !m2mEventStaged && !eventStaged);
   17cb0:	4b20      	ldr	r3, [pc, #128]	; (17d34 <gsm_checkSleepElligible+0x90>)
   17cb2:	781b      	ldrb	r3, [r3, #0]
   17cb4:	b2db      	uxtb	r3, r3
   17cb6:	2201      	movs	r2, #1
   17cb8:	4053      	eors	r3, r2
   17cba:	b2db      	uxtb	r3, r3
   17cbc:	2b00      	cmp	r3, #0
   17cbe:	d013      	beq.n	17ce8 <gsm_checkSleepElligible+0x44>
   17cc0:	4b1d      	ldr	r3, [pc, #116]	; (17d38 <gsm_checkSleepElligible+0x94>)
   17cc2:	4798      	blx	r3
   17cc4:	1e03      	subs	r3, r0, #0
   17cc6:	d00f      	beq.n	17ce8 <gsm_checkSleepElligible+0x44>
   17cc8:	4b1c      	ldr	r3, [pc, #112]	; (17d3c <gsm_checkSleepElligible+0x98>)
   17cca:	781b      	ldrb	r3, [r3, #0]
   17ccc:	2201      	movs	r2, #1
   17cce:	4053      	eors	r3, r2
   17cd0:	b2db      	uxtb	r3, r3
   17cd2:	2b00      	cmp	r3, #0
   17cd4:	d008      	beq.n	17ce8 <gsm_checkSleepElligible+0x44>
   17cd6:	4b1a      	ldr	r3, [pc, #104]	; (17d40 <gsm_checkSleepElligible+0x9c>)
   17cd8:	781b      	ldrb	r3, [r3, #0]
   17cda:	2201      	movs	r2, #1
   17cdc:	4053      	eors	r3, r2
   17cde:	b2db      	uxtb	r3, r3
   17ce0:	2b00      	cmp	r3, #0
   17ce2:	d001      	beq.n	17ce8 <gsm_checkSleepElligible+0x44>
   17ce4:	2301      	movs	r3, #1
   17ce6:	e000      	b.n	17cea <gsm_checkSleepElligible+0x46>
   17ce8:	2300      	movs	r3, #0
   17cea:	1c1a      	adds	r2, r3, #0
   17cec:	2301      	movs	r3, #1
   17cee:	4013      	ands	r3, r2
   17cf0:	b2db      	uxtb	r3, r3
   17cf2:	e019      	b.n	17d28 <gsm_checkSleepElligible+0x84>
	}
	else
	{
		return(!isGSMModuleAwake  && checkNotInCall() && !eventStaged);
   17cf4:	4b0f      	ldr	r3, [pc, #60]	; (17d34 <gsm_checkSleepElligible+0x90>)
   17cf6:	781b      	ldrb	r3, [r3, #0]
   17cf8:	b2db      	uxtb	r3, r3
   17cfa:	2201      	movs	r2, #1
   17cfc:	4053      	eors	r3, r2
   17cfe:	b2db      	uxtb	r3, r3
   17d00:	2b00      	cmp	r3, #0
   17d02:	d00c      	beq.n	17d1e <gsm_checkSleepElligible+0x7a>
   17d04:	4b0c      	ldr	r3, [pc, #48]	; (17d38 <gsm_checkSleepElligible+0x94>)
   17d06:	4798      	blx	r3
   17d08:	1e03      	subs	r3, r0, #0
   17d0a:	d008      	beq.n	17d1e <gsm_checkSleepElligible+0x7a>
   17d0c:	4b0c      	ldr	r3, [pc, #48]	; (17d40 <gsm_checkSleepElligible+0x9c>)
   17d0e:	781b      	ldrb	r3, [r3, #0]
   17d10:	2201      	movs	r2, #1
   17d12:	4053      	eors	r3, r2
   17d14:	b2db      	uxtb	r3, r3
   17d16:	2b00      	cmp	r3, #0
   17d18:	d001      	beq.n	17d1e <gsm_checkSleepElligible+0x7a>
   17d1a:	2301      	movs	r3, #1
   17d1c:	e000      	b.n	17d20 <gsm_checkSleepElligible+0x7c>
   17d1e:	2300      	movs	r3, #0
   17d20:	1c1a      	adds	r2, r3, #0
   17d22:	2301      	movs	r3, #1
   17d24:	4013      	ands	r3, r2
   17d26:	b2db      	uxtb	r3, r3
	}
   17d28:	0018      	movs	r0, r3
   17d2a:	46bd      	mov	sp, r7
   17d2c:	bd80      	pop	{r7, pc}
   17d2e:	46c0      	nop			; (mov r8, r8)
   17d30:	20000638 	.word	0x20000638
   17d34:	2000068c 	.word	0x2000068c
   17d38:	00017c3d 	.word	0x00017c3d
   17d3c:	2000077a 	.word	0x2000077a
   17d40:	200007b6 	.word	0x200007b6

00017d44 <lcd_displaying_task>:
static QueueHandle_t xfour_Second_Queue;
static TimerHandle_t four_Second_timeout_timer=NULL;
static void four_second_timer_callback(TimerHandle_t timer);

static void lcd_displaying_task(void *params)
{
   17d44:	b590      	push	{r4, r7, lr}
   17d46:	b093      	sub	sp, #76	; 0x4c
   17d48:	af02      	add	r7, sp, #8
   17d4a:	6078      	str	r0, [r7, #4]
	UNUSED(params);
	
	lcd_in_sleep = false;
   17d4c:	4bde      	ldr	r3, [pc, #888]	; (180c8 <lcd_displaying_task+0x384>)
   17d4e:	2200      	movs	r2, #0
   17d50:	701a      	strb	r2, [r3, #0]
	setNetworkCharacter=true;
   17d52:	4bde      	ldr	r3, [pc, #888]	; (180cc <lcd_displaying_task+0x388>)
   17d54:	2201      	movs	r2, #1
   17d56:	701a      	strb	r2, [r3, #0]
	LCD_PWR_CONFIG();
   17d58:	4bdd      	ldr	r3, [pc, #884]	; (180d0 <lcd_displaying_task+0x38c>)
   17d5a:	4798      	blx	r3
	LCD_PWR_EN();
   17d5c:	4bdd      	ldr	r3, [pc, #884]	; (180d4 <lcd_displaying_task+0x390>)
   17d5e:	4798      	blx	r3
	vTaskDelay(500);
   17d60:	23fa      	movs	r3, #250	; 0xfa
   17d62:	005b      	lsls	r3, r3, #1
   17d64:	0018      	movs	r0, r3
   17d66:	4bdc      	ldr	r3, [pc, #880]	; (180d8 <lcd_displaying_task+0x394>)
   17d68:	4798      	blx	r3
	
	LCD_init();
   17d6a:	4bdc      	ldr	r3, [pc, #880]	; (180dc <lcd_displaying_task+0x398>)
   17d6c:	4798      	blx	r3
	
	uint8_t screen=1;
   17d6e:	233f      	movs	r3, #63	; 0x3f
   17d70:	18fb      	adds	r3, r7, r3
   17d72:	2201      	movs	r2, #1
   17d74:	701a      	strb	r2, [r3, #0]
	bool four_sec_timer_is_active = true;
   17d76:	233d      	movs	r3, #61	; 0x3d
   17d78:	18fb      	adds	r3, r7, r3
   17d7a:	2201      	movs	r2, #1
   17d7c:	701a      	strb	r2, [r3, #0]
	bool two_sec_timer_is_active = false;
   17d7e:	233c      	movs	r3, #60	; 0x3c
   17d80:	18fb      	adds	r3, r7, r3
   17d82:	2200      	movs	r2, #0
   17d84:	701a      	strb	r2, [r3, #0]
	
	uint8_t time=0;
   17d86:	233a      	movs	r3, #58	; 0x3a
   17d88:	18fb      	adds	r3, r7, r3
   17d8a:	2200      	movs	r2, #0
   17d8c:	701a      	strb	r2, [r3, #0]
	
	
	
	
	LCD_clear();
   17d8e:	4bd4      	ldr	r3, [pc, #848]	; (180e0 <lcd_displaying_task+0x39c>)
   17d90:	4798      	blx	r3
	LCD_setCursor(0,0);
   17d92:	2100      	movs	r1, #0
   17d94:	2000      	movs	r0, #0
   17d96:	4bd3      	ldr	r3, [pc, #844]	; (180e4 <lcd_displaying_task+0x3a0>)
   17d98:	4798      	blx	r3
	lcd_printf(" KRISHNA  SMART ");
   17d9a:	4bd3      	ldr	r3, [pc, #844]	; (180e8 <lcd_displaying_task+0x3a4>)
   17d9c:	0018      	movs	r0, r3
   17d9e:	4bd3      	ldr	r3, [pc, #844]	; (180ec <lcd_displaying_task+0x3a8>)
   17da0:	4798      	blx	r3
	LCD_setCursor(0,1);
   17da2:	2101      	movs	r1, #1
   17da4:	2000      	movs	r0, #0
   17da6:	4bcf      	ldr	r3, [pc, #828]	; (180e4 <lcd_displaying_task+0x3a0>)
   17da8:	4798      	blx	r3
	lcd_printf("   TECHNOLOGY   ");
   17daa:	4bd1      	ldr	r3, [pc, #836]	; (180f0 <lcd_displaying_task+0x3ac>)
   17dac:	0018      	movs	r0, r3
   17dae:	4bcf      	ldr	r3, [pc, #828]	; (180ec <lcd_displaying_task+0x3a8>)
   17db0:	4798      	blx	r3
	vTaskDelay(3000);
   17db2:	4bd0      	ldr	r3, [pc, #832]	; (180f4 <lcd_displaying_task+0x3b0>)
   17db4:	0018      	movs	r0, r3
   17db6:	4bc8      	ldr	r3, [pc, #800]	; (180d8 <lcd_displaying_task+0x394>)
   17db8:	4798      	blx	r3
	
	LCD_clear();
   17dba:	4bc9      	ldr	r3, [pc, #804]	; (180e0 <lcd_displaying_task+0x39c>)
   17dbc:	4798      	blx	r3
	LCD_setCursor(0,0);
   17dbe:	2100      	movs	r1, #0
   17dc0:	2000      	movs	r0, #0
   17dc2:	4bc8      	ldr	r3, [pc, #800]	; (180e4 <lcd_displaying_task+0x3a0>)
   17dc4:	4798      	blx	r3
	lcd_printf("  SOFTWARE VER  ");
   17dc6:	4bcc      	ldr	r3, [pc, #816]	; (180f8 <lcd_displaying_task+0x3b4>)
   17dc8:	0018      	movs	r0, r3
   17dca:	4bc8      	ldr	r3, [pc, #800]	; (180ec <lcd_displaying_task+0x3a8>)
   17dcc:	4798      	blx	r3
	LCD_setCursor(0,1);
   17dce:	2101      	movs	r1, #1
   17dd0:	2000      	movs	r0, #0
   17dd2:	4bc4      	ldr	r3, [pc, #784]	; (180e4 <lcd_displaying_task+0x3a0>)
   17dd4:	4798      	blx	r3
	lcd_printf("%s",VERSION_NO);
   17dd6:	4ac9      	ldr	r2, [pc, #804]	; (180fc <lcd_displaying_task+0x3b8>)
   17dd8:	4bc9      	ldr	r3, [pc, #804]	; (18100 <lcd_displaying_task+0x3bc>)
   17dda:	0011      	movs	r1, r2
   17ddc:	0018      	movs	r0, r3
   17dde:	4bc3      	ldr	r3, [pc, #780]	; (180ec <lcd_displaying_task+0x3a8>)
   17de0:	4798      	blx	r3
	vTaskDelay(2000);
   17de2:	23fa      	movs	r3, #250	; 0xfa
   17de4:	00db      	lsls	r3, r3, #3
   17de6:	0018      	movs	r0, r3
   17de8:	4bbb      	ldr	r3, [pc, #748]	; (180d8 <lcd_displaying_task+0x394>)
   17dea:	4798      	blx	r3
	
	four_Second_timeout_timer = xTimerCreate(NULL,(1 * 4000 / portTICK_PERIOD_MS), pdTRUE, NULL, four_second_timer_callback);
   17dec:	23fa      	movs	r3, #250	; 0xfa
   17dee:	0119      	lsls	r1, r3, #4
   17df0:	4bc4      	ldr	r3, [pc, #784]	; (18104 <lcd_displaying_task+0x3c0>)
   17df2:	9300      	str	r3, [sp, #0]
   17df4:	2300      	movs	r3, #0
   17df6:	2201      	movs	r2, #1
   17df8:	2000      	movs	r0, #0
   17dfa:	4cc3      	ldr	r4, [pc, #780]	; (18108 <lcd_displaying_task+0x3c4>)
   17dfc:	47a0      	blx	r4
   17dfe:	0002      	movs	r2, r0
   17e00:	4bc2      	ldr	r3, [pc, #776]	; (1810c <lcd_displaying_task+0x3c8>)
   17e02:	601a      	str	r2, [r3, #0]
	xTimerStart( four_Second_timeout_timer, 0 );
   17e04:	4bc1      	ldr	r3, [pc, #772]	; (1810c <lcd_displaying_task+0x3c8>)
   17e06:	681c      	ldr	r4, [r3, #0]
   17e08:	4bc1      	ldr	r3, [pc, #772]	; (18110 <lcd_displaying_task+0x3cc>)
   17e0a:	4798      	blx	r3
   17e0c:	0002      	movs	r2, r0
   17e0e:	2300      	movs	r3, #0
   17e10:	9300      	str	r3, [sp, #0]
   17e12:	2300      	movs	r3, #0
   17e14:	2101      	movs	r1, #1
   17e16:	0020      	movs	r0, r4
   17e18:	4cbe      	ldr	r4, [pc, #760]	; (18114 <lcd_displaying_task+0x3d0>)
   17e1a:	47a0      	blx	r4
	
	
	for (;;)
	{
		if (lcd_in_sleep)
   17e1c:	4baa      	ldr	r3, [pc, #680]	; (180c8 <lcd_displaying_task+0x384>)
   17e1e:	781b      	ldrb	r3, [r3, #0]
   17e20:	b2db      	uxtb	r3, r3
   17e22:	2b00      	cmp	r3, #0
   17e24:	d009      	beq.n	17e3a <lcd_displaying_task+0xf6>
		{
			lcd_in_sleep = false;
   17e26:	4ba8      	ldr	r3, [pc, #672]	; (180c8 <lcd_displaying_task+0x384>)
   17e28:	2200      	movs	r2, #0
   17e2a:	701a      	strb	r2, [r3, #0]
			LCD_PWR_EN();
   17e2c:	4ba9      	ldr	r3, [pc, #676]	; (180d4 <lcd_displaying_task+0x390>)
   17e2e:	4798      	blx	r3
			vTaskDelay(100);
   17e30:	2064      	movs	r0, #100	; 0x64
   17e32:	4ba9      	ldr	r3, [pc, #676]	; (180d8 <lcd_displaying_task+0x394>)
   17e34:	4798      	blx	r3
			LCD_init();
   17e36:	4ba9      	ldr	r3, [pc, #676]	; (180dc <lcd_displaying_task+0x398>)
   17e38:	4798      	blx	r3
		}
		
		if(setNetworkCharacter)
   17e3a:	4ba4      	ldr	r3, [pc, #656]	; (180cc <lcd_displaying_task+0x388>)
   17e3c:	781b      	ldrb	r3, [r3, #0]
   17e3e:	b2db      	uxtb	r3, r3
   17e40:	2b00      	cmp	r3, #0
   17e42:	d047      	beq.n	17ed4 <lcd_displaying_task+0x190>
		{
			setNetworkCharacter=false;
   17e44:	4ba1      	ldr	r3, [pc, #644]	; (180cc <lcd_displaying_task+0x388>)
   17e46:	2200      	movs	r2, #0
   17e48:	701a      	strb	r2, [r3, #0]
			byte Network_0[8]={
   17e4a:	2330      	movs	r3, #48	; 0x30
   17e4c:	18fb      	adds	r3, r7, r3
   17e4e:	0018      	movs	r0, r3
   17e50:	2308      	movs	r3, #8
   17e52:	001a      	movs	r2, r3
   17e54:	2100      	movs	r1, #0
   17e56:	4bb0      	ldr	r3, [pc, #704]	; (18118 <lcd_displaying_task+0x3d4>)
   17e58:	4798      	blx	r3
				0B00000,
				0B00000,
				0B00000
			};
			
			byte Network_1[8]={
   17e5a:	2328      	movs	r3, #40	; 0x28
   17e5c:	18fb      	adds	r3, r7, r3
   17e5e:	4aaf      	ldr	r2, [pc, #700]	; (1811c <lcd_displaying_task+0x3d8>)
   17e60:	ca03      	ldmia	r2!, {r0, r1}
   17e62:	c303      	stmia	r3!, {r0, r1}
				0B00000,
				0B00000,
				0B11111,
				0B11111
			};
			byte Network_2[8]={
   17e64:	2320      	movs	r3, #32
   17e66:	18fb      	adds	r3, r7, r3
   17e68:	4aad      	ldr	r2, [pc, #692]	; (18120 <lcd_displaying_task+0x3dc>)
   17e6a:	ca03      	ldmia	r2!, {r0, r1}
   17e6c:	c303      	stmia	r3!, {r0, r1}
				0B00000,
				0B11111,
				0B11111,
				0B11111
			};
			byte Network_3[8]={
   17e6e:	2318      	movs	r3, #24
   17e70:	18fb      	adds	r3, r7, r3
   17e72:	4aac      	ldr	r2, [pc, #688]	; (18124 <lcd_displaying_task+0x3e0>)
   17e74:	ca03      	ldmia	r2!, {r0, r1}
   17e76:	c303      	stmia	r3!, {r0, r1}
				0B11111,
				0B11111,
				0B11111,
				0B11111
			};
			byte Network_4[8]={
   17e78:	2310      	movs	r3, #16
   17e7a:	18fb      	adds	r3, r7, r3
   17e7c:	4aaa      	ldr	r2, [pc, #680]	; (18128 <lcd_displaying_task+0x3e4>)
   17e7e:	ca03      	ldmia	r2!, {r0, r1}
   17e80:	c303      	stmia	r3!, {r0, r1}
				0B11111,
				0B11111,
				0B11111
			};

			byte Network_5[8]={
   17e82:	2308      	movs	r3, #8
   17e84:	18fb      	adds	r3, r7, r3
   17e86:	4aa9      	ldr	r2, [pc, #676]	; (1812c <lcd_displaying_task+0x3e8>)
   17e88:	ca03      	ldmia	r2!, {r0, r1}
   17e8a:	c303      	stmia	r3!, {r0, r1}
				0B11111,
				0B11111,
				0B11111
			};
			
			LCD_Create_Custom_createChar(0,Network_0);
   17e8c:	2330      	movs	r3, #48	; 0x30
   17e8e:	18fb      	adds	r3, r7, r3
   17e90:	0019      	movs	r1, r3
   17e92:	2000      	movs	r0, #0
   17e94:	4ba6      	ldr	r3, [pc, #664]	; (18130 <lcd_displaying_task+0x3ec>)
   17e96:	4798      	blx	r3
			LCD_Create_Custom_createChar(1,Network_1);
   17e98:	2328      	movs	r3, #40	; 0x28
   17e9a:	18fb      	adds	r3, r7, r3
   17e9c:	0019      	movs	r1, r3
   17e9e:	2001      	movs	r0, #1
   17ea0:	4ba3      	ldr	r3, [pc, #652]	; (18130 <lcd_displaying_task+0x3ec>)
   17ea2:	4798      	blx	r3
			LCD_Create_Custom_createChar(2,Network_2);
   17ea4:	2320      	movs	r3, #32
   17ea6:	18fb      	adds	r3, r7, r3
   17ea8:	0019      	movs	r1, r3
   17eaa:	2002      	movs	r0, #2
   17eac:	4ba0      	ldr	r3, [pc, #640]	; (18130 <lcd_displaying_task+0x3ec>)
   17eae:	4798      	blx	r3
			LCD_Create_Custom_createChar(3,Network_3);
   17eb0:	2318      	movs	r3, #24
   17eb2:	18fb      	adds	r3, r7, r3
   17eb4:	0019      	movs	r1, r3
   17eb6:	2003      	movs	r0, #3
   17eb8:	4b9d      	ldr	r3, [pc, #628]	; (18130 <lcd_displaying_task+0x3ec>)
   17eba:	4798      	blx	r3
			LCD_Create_Custom_createChar(4,Network_4);
   17ebc:	2310      	movs	r3, #16
   17ebe:	18fb      	adds	r3, r7, r3
   17ec0:	0019      	movs	r1, r3
   17ec2:	2004      	movs	r0, #4
   17ec4:	4b9a      	ldr	r3, [pc, #616]	; (18130 <lcd_displaying_task+0x3ec>)
   17ec6:	4798      	blx	r3
			LCD_Create_Custom_createChar(5,Network_5);
   17ec8:	2308      	movs	r3, #8
   17eca:	18fb      	adds	r3, r7, r3
   17ecc:	0019      	movs	r1, r3
   17ece:	2005      	movs	r0, #5
   17ed0:	4b97      	ldr	r3, [pc, #604]	; (18130 <lcd_displaying_task+0x3ec>)
   17ed2:	4798      	blx	r3

			
		}
		
		
		if(firstEvent)
   17ed4:	4b97      	ldr	r3, [pc, #604]	; (18134 <lcd_displaying_task+0x3f0>)
   17ed6:	781b      	ldrb	r3, [r3, #0]
   17ed8:	b2db      	uxtb	r3, r3
   17eda:	2b00      	cmp	r3, #0
   17edc:	d010      	beq.n	17f00 <lcd_displaying_task+0x1bc>
		{
			LCD_setCursor(0,0);
   17ede:	2100      	movs	r1, #0
   17ee0:	2000      	movs	r0, #0
   17ee2:	4b80      	ldr	r3, [pc, #512]	; (180e4 <lcd_displaying_task+0x3a0>)
   17ee4:	4798      	blx	r3
			lcd_printf("Initializing... ");
   17ee6:	4b94      	ldr	r3, [pc, #592]	; (18138 <lcd_displaying_task+0x3f4>)
   17ee8:	0018      	movs	r0, r3
   17eea:	4b80      	ldr	r3, [pc, #512]	; (180ec <lcd_displaying_task+0x3a8>)
   17eec:	4798      	blx	r3
			LCD_setCursor(0,1);
   17eee:	2101      	movs	r1, #1
   17ef0:	2000      	movs	r0, #0
   17ef2:	4b7c      	ldr	r3, [pc, #496]	; (180e4 <lcd_displaying_task+0x3a0>)
   17ef4:	4798      	blx	r3
			lcd_printf("COMMANDER v2    ");
   17ef6:	4b91      	ldr	r3, [pc, #580]	; (1813c <lcd_displaying_task+0x3f8>)
   17ef8:	0018      	movs	r0, r3
   17efa:	4b7c      	ldr	r3, [pc, #496]	; (180ec <lcd_displaying_task+0x3a8>)
   17efc:	4798      	blx	r3
   17efe:	e22c      	b.n	1835a <lcd_displaying_task+0x616>
		}
		else
		{
			switch(screen)
   17f00:	233f      	movs	r3, #63	; 0x3f
   17f02:	18fb      	adds	r3, r7, r3
   17f04:	781b      	ldrb	r3, [r3, #0]
   17f06:	2b07      	cmp	r3, #7
   17f08:	d900      	bls.n	17f0c <lcd_displaying_task+0x1c8>
   17f0a:	e226      	b.n	1835a <lcd_displaying_task+0x616>
   17f0c:	009a      	lsls	r2, r3, #2
   17f0e:	4b8c      	ldr	r3, [pc, #560]	; (18140 <lcd_displaying_task+0x3fc>)
   17f10:	18d3      	adds	r3, r2, r3
   17f12:	681b      	ldr	r3, [r3, #0]
   17f14:	469f      	mov	pc, r3
			{
				case  1:
				{
					LCD_setCursor(0,0);
   17f16:	2100      	movs	r1, #0
   17f18:	2000      	movs	r0, #0
   17f1a:	4b72      	ldr	r3, [pc, #456]	; (180e4 <lcd_displaying_task+0x3a0>)
   17f1c:	4798      	blx	r3
					lcd_printf("VRY   VYB   VBR ");
   17f1e:	4b89      	ldr	r3, [pc, #548]	; (18144 <lcd_displaying_task+0x400>)
   17f20:	0018      	movs	r0, r3
   17f22:	4b72      	ldr	r3, [pc, #456]	; (180ec <lcd_displaying_task+0x3a8>)
   17f24:	4798      	blx	r3
					LCD_setCursor(0,1);
   17f26:	2101      	movs	r1, #1
   17f28:	2000      	movs	r0, #0
   17f2a:	4b6e      	ldr	r3, [pc, #440]	; (180e4 <lcd_displaying_task+0x3a0>)
   17f2c:	4798      	blx	r3
					lcd_printf("%03lu   ",(Analog_Parameter_Struct.PhaseRY_Voltage));
   17f2e:	4b86      	ldr	r3, [pc, #536]	; (18148 <lcd_displaying_task+0x404>)
   17f30:	681a      	ldr	r2, [r3, #0]
   17f32:	4b86      	ldr	r3, [pc, #536]	; (1814c <lcd_displaying_task+0x408>)
   17f34:	0011      	movs	r1, r2
   17f36:	0018      	movs	r0, r3
   17f38:	4b6c      	ldr	r3, [pc, #432]	; (180ec <lcd_displaying_task+0x3a8>)
   17f3a:	4798      	blx	r3
					lcd_printf("%03lu   ",(Analog_Parameter_Struct.PhaseYB_Voltage));
   17f3c:	4b82      	ldr	r3, [pc, #520]	; (18148 <lcd_displaying_task+0x404>)
   17f3e:	685a      	ldr	r2, [r3, #4]
   17f40:	4b82      	ldr	r3, [pc, #520]	; (1814c <lcd_displaying_task+0x408>)
   17f42:	0011      	movs	r1, r2
   17f44:	0018      	movs	r0, r3
   17f46:	4b69      	ldr	r3, [pc, #420]	; (180ec <lcd_displaying_task+0x3a8>)
   17f48:	4798      	blx	r3
					lcd_printf("%03lu ",(Analog_Parameter_Struct.PhaseBR_Voltage));
   17f4a:	4b7f      	ldr	r3, [pc, #508]	; (18148 <lcd_displaying_task+0x404>)
   17f4c:	689a      	ldr	r2, [r3, #8]
   17f4e:	4b80      	ldr	r3, [pc, #512]	; (18150 <lcd_displaying_task+0x40c>)
   17f50:	0011      	movs	r1, r2
   17f52:	0018      	movs	r0, r3
   17f54:	4b65      	ldr	r3, [pc, #404]	; (180ec <lcd_displaying_task+0x3a8>)
   17f56:	4798      	blx	r3
					break;
   17f58:	e1ff      	b.n	1835a <lcd_displaying_task+0x616>
				}
				case  2:
				{
					if(!getMotorState())
   17f5a:	4b7e      	ldr	r3, [pc, #504]	; (18154 <lcd_displaying_task+0x410>)
   17f5c:	4798      	blx	r3
   17f5e:	0003      	movs	r3, r0
   17f60:	001a      	movs	r2, r3
   17f62:	2301      	movs	r3, #1
   17f64:	4053      	eors	r3, r2
   17f66:	b2db      	uxtb	r3, r3
   17f68:	2b00      	cmp	r3, #0
   17f6a:	d010      	beq.n	17f8e <lcd_displaying_task+0x24a>
					{
						LCD_setCursor(0,0);
   17f6c:	2100      	movs	r1, #0
   17f6e:	2000      	movs	r0, #0
   17f70:	4b5c      	ldr	r3, [pc, #368]	; (180e4 <lcd_displaying_task+0x3a0>)
   17f72:	4798      	blx	r3
						lcd_printf("MOTOR:  OFF     ");
   17f74:	4b78      	ldr	r3, [pc, #480]	; (18158 <lcd_displaying_task+0x414>)
   17f76:	0018      	movs	r0, r3
   17f78:	4b5c      	ldr	r3, [pc, #368]	; (180ec <lcd_displaying_task+0x3a8>)
   17f7a:	4798      	blx	r3
						LCD_setCursor(0,1);
   17f7c:	2101      	movs	r1, #1
   17f7e:	2000      	movs	r0, #0
   17f80:	4b58      	ldr	r3, [pc, #352]	; (180e4 <lcd_displaying_task+0x3a0>)
   17f82:	4798      	blx	r3
						lcd_printf("                ");
   17f84:	4b75      	ldr	r3, [pc, #468]	; (1815c <lcd_displaying_task+0x418>)
   17f86:	0018      	movs	r0, r3
   17f88:	4b58      	ldr	r3, [pc, #352]	; (180ec <lcd_displaying_task+0x3a8>)
   17f8a:	4798      	blx	r3
						LCD_setCursor(0,0);
						lcd_printf("MOTOR CURRENT:  ");
						LCD_setCursor(0,1);
						lcd_printf("%03lu.%02lu            ",(Analog_Parameter_Struct.Motor_Current_IntPart),(Analog_Parameter_Struct.Motor_Current_DecPart));
					}
					break;
   17f8c:	e1e5      	b.n	1835a <lcd_displaying_task+0x616>
						LCD_setCursor(0,0);
   17f8e:	2100      	movs	r1, #0
   17f90:	2000      	movs	r0, #0
   17f92:	4b54      	ldr	r3, [pc, #336]	; (180e4 <lcd_displaying_task+0x3a0>)
   17f94:	4798      	blx	r3
						lcd_printf("MOTOR CURRENT:  ");
   17f96:	4b72      	ldr	r3, [pc, #456]	; (18160 <lcd_displaying_task+0x41c>)
   17f98:	0018      	movs	r0, r3
   17f9a:	4b54      	ldr	r3, [pc, #336]	; (180ec <lcd_displaying_task+0x3a8>)
   17f9c:	4798      	blx	r3
						LCD_setCursor(0,1);
   17f9e:	2101      	movs	r1, #1
   17fa0:	2000      	movs	r0, #0
   17fa2:	4b50      	ldr	r3, [pc, #320]	; (180e4 <lcd_displaying_task+0x3a0>)
   17fa4:	4798      	blx	r3
						lcd_printf("%03lu.%02lu            ",(Analog_Parameter_Struct.Motor_Current_IntPart),(Analog_Parameter_Struct.Motor_Current_DecPart));
   17fa6:	4b68      	ldr	r3, [pc, #416]	; (18148 <lcd_displaying_task+0x404>)
   17fa8:	8a9b      	ldrh	r3, [r3, #20]
   17faa:	b29b      	uxth	r3, r3
   17fac:	0019      	movs	r1, r3
   17fae:	4b66      	ldr	r3, [pc, #408]	; (18148 <lcd_displaying_task+0x404>)
   17fb0:	8adb      	ldrh	r3, [r3, #22]
   17fb2:	b29b      	uxth	r3, r3
   17fb4:	001a      	movs	r2, r3
   17fb6:	4b6b      	ldr	r3, [pc, #428]	; (18164 <lcd_displaying_task+0x420>)
   17fb8:	0018      	movs	r0, r3
   17fba:	4b4c      	ldr	r3, [pc, #304]	; (180ec <lcd_displaying_task+0x3a8>)
   17fbc:	4798      	blx	r3
					break;
   17fbe:	e1cc      	b.n	1835a <lcd_displaying_task+0x616>
				}
				case  3:
				{
					if(!getMotorState())
   17fc0:	4b64      	ldr	r3, [pc, #400]	; (18154 <lcd_displaying_task+0x410>)
   17fc2:	4798      	blx	r3
   17fc4:	0003      	movs	r3, r0
   17fc6:	001a      	movs	r2, r3
   17fc8:	2301      	movs	r3, #1
   17fca:	4053      	eors	r3, r2
   17fcc:	b2db      	uxtb	r3, r3
   17fce:	2b00      	cmp	r3, #0
   17fd0:	d010      	beq.n	17ff4 <lcd_displaying_task+0x2b0>
					{
						LCD_setCursor(0,0);
   17fd2:	2100      	movs	r1, #0
   17fd4:	2000      	movs	r0, #0
   17fd6:	4b43      	ldr	r3, [pc, #268]	; (180e4 <lcd_displaying_task+0x3a0>)
   17fd8:	4798      	blx	r3
						lcd_printf("MOTOR:  OFF     ");
   17fda:	4b5f      	ldr	r3, [pc, #380]	; (18158 <lcd_displaying_task+0x414>)
   17fdc:	0018      	movs	r0, r3
   17fde:	4b43      	ldr	r3, [pc, #268]	; (180ec <lcd_displaying_task+0x3a8>)
   17fe0:	4798      	blx	r3
						LCD_setCursor(0,1);
   17fe2:	2101      	movs	r1, #1
   17fe4:	2000      	movs	r0, #0
   17fe6:	4b3f      	ldr	r3, [pc, #252]	; (180e4 <lcd_displaying_task+0x3a0>)
   17fe8:	4798      	blx	r3
						lcd_printf("                ");
   17fea:	4b5c      	ldr	r3, [pc, #368]	; (1815c <lcd_displaying_task+0x418>)
   17fec:	0018      	movs	r0, r3
   17fee:	4b3f      	ldr	r3, [pc, #252]	; (180ec <lcd_displaying_task+0x3a8>)
   17ff0:	4798      	blx	r3
						LCD_setCursor(0,0);
						lcd_printf("MOTOR WATTAGE:  ");
						LCD_setCursor(0,1);
						lcd_printf("%03lu.%02lu kW         ",(Analog_Parameter_Struct.Motor_Power_IntPart),(Analog_Parameter_Struct.Motor_Power_DecPart));
					}
					break;
   17ff2:	e1b2      	b.n	1835a <lcd_displaying_task+0x616>
						LCD_setCursor(0,0);
   17ff4:	2100      	movs	r1, #0
   17ff6:	2000      	movs	r0, #0
   17ff8:	4b3a      	ldr	r3, [pc, #232]	; (180e4 <lcd_displaying_task+0x3a0>)
   17ffa:	4798      	blx	r3
						lcd_printf("MOTOR WATTAGE:  ");
   17ffc:	4b5a      	ldr	r3, [pc, #360]	; (18168 <lcd_displaying_task+0x424>)
   17ffe:	0018      	movs	r0, r3
   18000:	4b3a      	ldr	r3, [pc, #232]	; (180ec <lcd_displaying_task+0x3a8>)
   18002:	4798      	blx	r3
						LCD_setCursor(0,1);
   18004:	2101      	movs	r1, #1
   18006:	2000      	movs	r0, #0
   18008:	4b36      	ldr	r3, [pc, #216]	; (180e4 <lcd_displaying_task+0x3a0>)
   1800a:	4798      	blx	r3
						lcd_printf("%03lu.%02lu kW         ",(Analog_Parameter_Struct.Motor_Power_IntPart),(Analog_Parameter_Struct.Motor_Power_DecPart));
   1800c:	4b4e      	ldr	r3, [pc, #312]	; (18148 <lcd_displaying_task+0x404>)
   1800e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
   18010:	b29b      	uxth	r3, r3
   18012:	0019      	movs	r1, r3
   18014:	4b4c      	ldr	r3, [pc, #304]	; (18148 <lcd_displaying_task+0x404>)
   18016:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   18018:	4b54      	ldr	r3, [pc, #336]	; (1816c <lcd_displaying_task+0x428>)
   1801a:	0018      	movs	r0, r3
   1801c:	4b33      	ldr	r3, [pc, #204]	; (180ec <lcd_displaying_task+0x3a8>)
   1801e:	4798      	blx	r3
					break;
   18020:	e19b      	b.n	1835a <lcd_displaying_task+0x616>
				}
				case 4:
				{
					LCD_setCursor(0,0);
   18022:	2100      	movs	r1, #0
   18024:	2000      	movs	r0, #0
   18026:	4b2f      	ldr	r3, [pc, #188]	; (180e4 <lcd_displaying_task+0x3a0>)
   18028:	4798      	blx	r3
					lcd_printf("3 PHASE SEQ:");
   1802a:	4b51      	ldr	r3, [pc, #324]	; (18170 <lcd_displaying_task+0x42c>)
   1802c:	0018      	movs	r0, r3
   1802e:	4b2f      	ldr	r3, [pc, #188]	; (180ec <lcd_displaying_task+0x3a8>)
   18030:	4798      	blx	r3
					if (structThreePhase_state.u8t_phase_sequence_flag == THREEPHASE_OK)
   18032:	4b50      	ldr	r3, [pc, #320]	; (18174 <lcd_displaying_task+0x430>)
   18034:	781b      	ldrb	r3, [r3, #0]
   18036:	b2db      	uxtb	r3, r3
   18038:	2b02      	cmp	r3, #2
   1803a:	d104      	bne.n	18046 <lcd_displaying_task+0x302>
					{
						lcd_printf(" OK ");
   1803c:	4b4e      	ldr	r3, [pc, #312]	; (18178 <lcd_displaying_task+0x434>)
   1803e:	0018      	movs	r0, r3
   18040:	4b2a      	ldr	r3, [pc, #168]	; (180ec <lcd_displaying_task+0x3a8>)
   18042:	4798      	blx	r3
   18044:	e003      	b.n	1804e <lcd_displaying_task+0x30a>
					}
					else
					{
						lcd_printf(" ERR");
   18046:	4b4d      	ldr	r3, [pc, #308]	; (1817c <lcd_displaying_task+0x438>)
   18048:	0018      	movs	r0, r3
   1804a:	4b28      	ldr	r3, [pc, #160]	; (180ec <lcd_displaying_task+0x3a8>)
   1804c:	4798      	blx	r3
					}
					LCD_setCursor(0,1);
   1804e:	2101      	movs	r1, #1
   18050:	2000      	movs	r0, #0
   18052:	4b24      	ldr	r3, [pc, #144]	; (180e4 <lcd_displaying_task+0x3a0>)
   18054:	4798      	blx	r3
					lcd_printf("PHASE STATE:");
   18056:	4b4a      	ldr	r3, [pc, #296]	; (18180 <lcd_displaying_task+0x43c>)
   18058:	0018      	movs	r0, r3
   1805a:	4b24      	ldr	r3, [pc, #144]	; (180ec <lcd_displaying_task+0x3a8>)
   1805c:	4798      	blx	r3
					if (structThreePhase_state.u8t_phase_ac_state == AC_3PH)
   1805e:	4b45      	ldr	r3, [pc, #276]	; (18174 <lcd_displaying_task+0x430>)
   18060:	785b      	ldrb	r3, [r3, #1]
   18062:	b2db      	uxtb	r3, r3
   18064:	2b03      	cmp	r3, #3
   18066:	d104      	bne.n	18072 <lcd_displaying_task+0x32e>
					{
						lcd_printf(" 3PH ");
   18068:	4b46      	ldr	r3, [pc, #280]	; (18184 <lcd_displaying_task+0x440>)
   1806a:	0018      	movs	r0, r3
   1806c:	4b1f      	ldr	r3, [pc, #124]	; (180ec <lcd_displaying_task+0x3a8>)
   1806e:	4798      	blx	r3
					}
					else
					{
						lcd_printf(" OFF");
					}
					break;
   18070:	e173      	b.n	1835a <lcd_displaying_task+0x616>
					else if(structThreePhase_state.u8t_phase_ac_state == AC_2PH)
   18072:	4b40      	ldr	r3, [pc, #256]	; (18174 <lcd_displaying_task+0x430>)
   18074:	785b      	ldrb	r3, [r3, #1]
   18076:	b2db      	uxtb	r3, r3
   18078:	2b02      	cmp	r3, #2
   1807a:	d104      	bne.n	18086 <lcd_displaying_task+0x342>
						lcd_printf(" 2PH ");
   1807c:	4b42      	ldr	r3, [pc, #264]	; (18188 <lcd_displaying_task+0x444>)
   1807e:	0018      	movs	r0, r3
   18080:	4b1a      	ldr	r3, [pc, #104]	; (180ec <lcd_displaying_task+0x3a8>)
   18082:	4798      	blx	r3
					break;
   18084:	e169      	b.n	1835a <lcd_displaying_task+0x616>
						lcd_printf(" OFF");
   18086:	4b41      	ldr	r3, [pc, #260]	; (1818c <lcd_displaying_task+0x448>)
   18088:	0018      	movs	r0, r3
   1808a:	4b18      	ldr	r3, [pc, #96]	; (180ec <lcd_displaying_task+0x3a8>)
   1808c:	4798      	blx	r3
					break;
   1808e:	e164      	b.n	1835a <lcd_displaying_task+0x616>
				}
				case 5:
				{
					LCD_setCursor(0,0);
   18090:	2100      	movs	r1, #0
   18092:	2000      	movs	r0, #0
   18094:	4b13      	ldr	r3, [pc, #76]	; (180e4 <lcd_displaying_task+0x3a0>)
   18096:	4798      	blx	r3
					lcd_printf("O-LEVEL : ");
   18098:	4b3d      	ldr	r3, [pc, #244]	; (18190 <lcd_displaying_task+0x44c>)
   1809a:	0018      	movs	r0, r3
   1809c:	4b13      	ldr	r3, [pc, #76]	; (180ec <lcd_displaying_task+0x3a8>)
   1809e:	4798      	blx	r3
					if (overheadLevel == OVERHEADHIGHLEVEL)
   180a0:	4b3c      	ldr	r3, [pc, #240]	; (18194 <lcd_displaying_task+0x450>)
   180a2:	781b      	ldrb	r3, [r3, #0]
   180a4:	b2db      	uxtb	r3, r3
   180a6:	2b02      	cmp	r3, #2
   180a8:	d104      	bne.n	180b4 <lcd_displaying_task+0x370>
					{
						lcd_printf("HIGH  ");
   180aa:	4b3b      	ldr	r3, [pc, #236]	; (18198 <lcd_displaying_task+0x454>)
   180ac:	0018      	movs	r0, r3
   180ae:	4b0f      	ldr	r3, [pc, #60]	; (180ec <lcd_displaying_task+0x3a8>)
   180b0:	4798      	blx	r3
   180b2:	e07e      	b.n	181b2 <lcd_displaying_task+0x46e>
					}
					else if (overheadLevel == OVERHEADMIDLEVEL)
   180b4:	4b37      	ldr	r3, [pc, #220]	; (18194 <lcd_displaying_task+0x450>)
   180b6:	781b      	ldrb	r3, [r3, #0]
   180b8:	b2db      	uxtb	r3, r3
   180ba:	2b01      	cmp	r3, #1
   180bc:	d170      	bne.n	181a0 <lcd_displaying_task+0x45c>
					{
						lcd_printf("MID   ");
   180be:	4b37      	ldr	r3, [pc, #220]	; (1819c <lcd_displaying_task+0x458>)
   180c0:	0018      	movs	r0, r3
   180c2:	4b0a      	ldr	r3, [pc, #40]	; (180ec <lcd_displaying_task+0x3a8>)
   180c4:	4798      	blx	r3
   180c6:	e074      	b.n	181b2 <lcd_displaying_task+0x46e>
   180c8:	20000843 	.word	0x20000843
   180cc:	20000844 	.word	0x20000844
   180d0:	00013981 	.word	0x00013981
   180d4:	000139b5 	.word	0x000139b5
   180d8:	0001fad9 	.word	0x0001fad9
   180dc:	000136bd 	.word	0x000136bd
   180e0:	00013c4d 	.word	0x00013c4d
   180e4:	00013d1d 	.word	0x00013d1d
   180e8:	0002a218 	.word	0x0002a218
   180ec:	00013e19 	.word	0x00013e19
   180f0:	0002a22c 	.word	0x0002a22c
   180f4:	00000bb8 	.word	0x00000bb8
   180f8:	0002a240 	.word	0x0002a240
   180fc:	0002a254 	.word	0x0002a254
   18100:	0002a268 	.word	0x0002a268
   18104:	00018505 	.word	0x00018505
   18108:	000209f9 	.word	0x000209f9
   1810c:	20000238 	.word	0x20000238
   18110:	0001fe3d 	.word	0x0001fe3d
   18114:	00020a9d 	.word	0x00020a9d
   18118:	000289fb 	.word	0x000289fb
   1811c:	0002a450 	.word	0x0002a450
   18120:	0002a458 	.word	0x0002a458
   18124:	0002a460 	.word	0x0002a460
   18128:	0002a468 	.word	0x0002a468
   1812c:	0002a470 	.word	0x0002a470
   18130:	00013cbd 	.word	0x00013cbd
   18134:	20000769 	.word	0x20000769
   18138:	0002a26c 	.word	0x0002a26c
   1813c:	0002a280 	.word	0x0002a280
   18140:	0002a478 	.word	0x0002a478
   18144:	0002a294 	.word	0x0002a294
   18148:	200006e4 	.word	0x200006e4
   1814c:	0002a2a8 	.word	0x0002a2a8
   18150:	0002a2b4 	.word	0x0002a2b4
   18154:	0001a795 	.word	0x0001a795
   18158:	0002a2bc 	.word	0x0002a2bc
   1815c:	0002a2d0 	.word	0x0002a2d0
   18160:	0002a2e4 	.word	0x0002a2e4
   18164:	0002a2f8 	.word	0x0002a2f8
   18168:	0002a310 	.word	0x0002a310
   1816c:	0002a324 	.word	0x0002a324
   18170:	0002a33c 	.word	0x0002a33c
   18174:	20000740 	.word	0x20000740
   18178:	0002a34c 	.word	0x0002a34c
   1817c:	0002a354 	.word	0x0002a354
   18180:	0002a35c 	.word	0x0002a35c
   18184:	0002a36c 	.word	0x0002a36c
   18188:	0002a374 	.word	0x0002a374
   1818c:	0002a37c 	.word	0x0002a37c
   18190:	0002a384 	.word	0x0002a384
   18194:	2000077c 	.word	0x2000077c
   18198:	0002a390 	.word	0x0002a390
   1819c:	0002a398 	.word	0x0002a398
					}
					else if (overheadLevel == OVERHEADCRITICALLEVEL)
   181a0:	4ba6      	ldr	r3, [pc, #664]	; (1843c <lcd_displaying_task+0x6f8>)
   181a2:	781b      	ldrb	r3, [r3, #0]
   181a4:	b2db      	uxtb	r3, r3
   181a6:	2b00      	cmp	r3, #0
   181a8:	d103      	bne.n	181b2 <lcd_displaying_task+0x46e>
					{
						lcd_printf("LOW   ");
   181aa:	4ba5      	ldr	r3, [pc, #660]	; (18440 <lcd_displaying_task+0x6fc>)
   181ac:	0018      	movs	r0, r3
   181ae:	4ba5      	ldr	r3, [pc, #660]	; (18444 <lcd_displaying_task+0x700>)
   181b0:	4798      	blx	r3
					}
					LCD_setCursor(0,1);
   181b2:	2101      	movs	r1, #1
   181b4:	2000      	movs	r0, #0
   181b6:	4ba4      	ldr	r3, [pc, #656]	; (18448 <lcd_displaying_task+0x704>)
   181b8:	4798      	blx	r3
					lcd_printf("U-LEVEL : ");
   181ba:	4ba4      	ldr	r3, [pc, #656]	; (1844c <lcd_displaying_task+0x708>)
   181bc:	0018      	movs	r0, r3
   181be:	4ba1      	ldr	r3, [pc, #644]	; (18444 <lcd_displaying_task+0x700>)
   181c0:	4798      	blx	r3
					if (undergroundLevel == CRITICALLEVEL)
   181c2:	4ba3      	ldr	r3, [pc, #652]	; (18450 <lcd_displaying_task+0x70c>)
   181c4:	781b      	ldrb	r3, [r3, #0]
   181c6:	2b00      	cmp	r3, #0
   181c8:	d104      	bne.n	181d4 <lcd_displaying_task+0x490>
					{
						lcd_printf("CRTCL ");
   181ca:	4ba2      	ldr	r3, [pc, #648]	; (18454 <lcd_displaying_task+0x710>)
   181cc:	0018      	movs	r0, r3
   181ce:	4b9d      	ldr	r3, [pc, #628]	; (18444 <lcd_displaying_task+0x700>)
   181d0:	4798      	blx	r3
					}
					else if (undergroundLevel == HIGHLEVEL)
					{
						lcd_printf("HIGH  ");
					}
					break;
   181d2:	e0bf      	b.n	18354 <lcd_displaying_task+0x610>
					else if (undergroundLevel == LOWLEVEL)
   181d4:	4b9e      	ldr	r3, [pc, #632]	; (18450 <lcd_displaying_task+0x70c>)
   181d6:	781b      	ldrb	r3, [r3, #0]
   181d8:	2b01      	cmp	r3, #1
   181da:	d104      	bne.n	181e6 <lcd_displaying_task+0x4a2>
						lcd_printf("LOW   ");
   181dc:	4b98      	ldr	r3, [pc, #608]	; (18440 <lcd_displaying_task+0x6fc>)
   181de:	0018      	movs	r0, r3
   181e0:	4b98      	ldr	r3, [pc, #608]	; (18444 <lcd_displaying_task+0x700>)
   181e2:	4798      	blx	r3
					break;
   181e4:	e0b6      	b.n	18354 <lcd_displaying_task+0x610>
					else if (undergroundLevel == MIDLEVEL)
   181e6:	4b9a      	ldr	r3, [pc, #616]	; (18450 <lcd_displaying_task+0x70c>)
   181e8:	781b      	ldrb	r3, [r3, #0]
   181ea:	2b02      	cmp	r3, #2
   181ec:	d104      	bne.n	181f8 <lcd_displaying_task+0x4b4>
						lcd_printf("MID   ");
   181ee:	4b9a      	ldr	r3, [pc, #616]	; (18458 <lcd_displaying_task+0x714>)
   181f0:	0018      	movs	r0, r3
   181f2:	4b94      	ldr	r3, [pc, #592]	; (18444 <lcd_displaying_task+0x700>)
   181f4:	4798      	blx	r3
					break;
   181f6:	e0ad      	b.n	18354 <lcd_displaying_task+0x610>
					else if (undergroundLevel == HIGHLEVEL)
   181f8:	4b95      	ldr	r3, [pc, #596]	; (18450 <lcd_displaying_task+0x70c>)
   181fa:	781b      	ldrb	r3, [r3, #0]
   181fc:	2b03      	cmp	r3, #3
   181fe:	d000      	beq.n	18202 <lcd_displaying_task+0x4be>
   18200:	e0a8      	b.n	18354 <lcd_displaying_task+0x610>
						lcd_printf("HIGH  ");
   18202:	4b96      	ldr	r3, [pc, #600]	; (1845c <lcd_displaying_task+0x718>)
   18204:	0018      	movs	r0, r3
   18206:	4b8f      	ldr	r3, [pc, #572]	; (18444 <lcd_displaying_task+0x700>)
   18208:	4798      	blx	r3
					break;
   1820a:	e0a3      	b.n	18354 <lcd_displaying_task+0x610>
				}
				case 6:
				{
					LCD_setCursor(0,0);
   1820c:	2100      	movs	r1, #0
   1820e:	2000      	movs	r0, #0
   18210:	4b8d      	ldr	r3, [pc, #564]	; (18448 <lcd_displaying_task+0x704>)
   18212:	4798      	blx	r3
					lcd_printf("BatteryPer: %u%% ",Analog_Parameter_Struct.Battery_percentage);
   18214:	4b92      	ldr	r3, [pc, #584]	; (18460 <lcd_displaying_task+0x71c>)
   18216:	7f1b      	ldrb	r3, [r3, #28]
   18218:	b2db      	uxtb	r3, r3
   1821a:	001a      	movs	r2, r3
   1821c:	4b91      	ldr	r3, [pc, #580]	; (18464 <lcd_displaying_task+0x720>)
   1821e:	0011      	movs	r1, r2
   18220:	0018      	movs	r0, r3
   18222:	4b88      	ldr	r3, [pc, #544]	; (18444 <lcd_displaying_task+0x700>)
   18224:	4798      	blx	r3
					LCD_setCursor(0,1);
   18226:	2101      	movs	r1, #1
   18228:	2000      	movs	r0, #0
   1822a:	4b87      	ldr	r3, [pc, #540]	; (18448 <lcd_displaying_task+0x704>)
   1822c:	4798      	blx	r3
					lcd_printf("SIGNAL : ");
   1822e:	4b8e      	ldr	r3, [pc, #568]	; (18468 <lcd_displaying_task+0x724>)
   18230:	0018      	movs	r0, r3
   18232:	4b84      	ldr	r3, [pc, #528]	; (18444 <lcd_displaying_task+0x700>)
   18234:	4798      	blx	r3
					LCD_setCursor(9,1);
   18236:	2101      	movs	r1, #1
   18238:	2009      	movs	r0, #9
   1823a:	4b83      	ldr	r3, [pc, #524]	; (18448 <lcd_displaying_task+0x704>)
   1823c:	4798      	blx	r3
					lcd_printf("       ");
   1823e:	4b8b      	ldr	r3, [pc, #556]	; (1846c <lcd_displaying_task+0x728>)
   18240:	0018      	movs	r0, r3
   18242:	4b80      	ldr	r3, [pc, #512]	; (18444 <lcd_displaying_task+0x700>)
   18244:	4798      	blx	r3
					LCD_setCursor(9,1);
   18246:	2101      	movs	r1, #1
   18248:	2009      	movs	r0, #9
   1824a:	4b7f      	ldr	r3, [pc, #508]	; (18448 <lcd_displaying_task+0x704>)
   1824c:	4798      	blx	r3
					
					uint8_t tempSignal = Signal_Strength;
   1824e:	233b      	movs	r3, #59	; 0x3b
   18250:	18fb      	adds	r3, r7, r3
   18252:	4a87      	ldr	r2, [pc, #540]	; (18470 <lcd_displaying_task+0x72c>)
   18254:	7812      	ldrb	r2, [r2, #0]
   18256:	701a      	strb	r2, [r3, #0]
					for (uint8_t i=0;i<=tempSignal;i++)
   18258:	233e      	movs	r3, #62	; 0x3e
   1825a:	18fb      	adds	r3, r7, r3
   1825c:	2200      	movs	r2, #0
   1825e:	701a      	strb	r2, [r3, #0]
   18260:	e00c      	b.n	1827c <lcd_displaying_task+0x538>
					{
						LCD_write(i);
   18262:	233e      	movs	r3, #62	; 0x3e
   18264:	18fb      	adds	r3, r7, r3
   18266:	781b      	ldrb	r3, [r3, #0]
   18268:	0018      	movs	r0, r3
   1826a:	4b82      	ldr	r3, [pc, #520]	; (18474 <lcd_displaying_task+0x730>)
   1826c:	4798      	blx	r3
					for (uint8_t i=0;i<=tempSignal;i++)
   1826e:	233e      	movs	r3, #62	; 0x3e
   18270:	18fb      	adds	r3, r7, r3
   18272:	781a      	ldrb	r2, [r3, #0]
   18274:	233e      	movs	r3, #62	; 0x3e
   18276:	18fb      	adds	r3, r7, r3
   18278:	3201      	adds	r2, #1
   1827a:	701a      	strb	r2, [r3, #0]
   1827c:	233e      	movs	r3, #62	; 0x3e
   1827e:	18fa      	adds	r2, r7, r3
   18280:	233b      	movs	r3, #59	; 0x3b
   18282:	18fb      	adds	r3, r7, r3
   18284:	7812      	ldrb	r2, [r2, #0]
   18286:	781b      	ldrb	r3, [r3, #0]
   18288:	429a      	cmp	r2, r3
   1828a:	d9ea      	bls.n	18262 <lcd_displaying_task+0x51e>
					}

					break;
   1828c:	e065      	b.n	1835a <lcd_displaying_task+0x616>
				}
				case 7:
				{
					LCD_setCursor(0,0);
   1828e:	2100      	movs	r1, #0
   18290:	2000      	movs	r0, #0
   18292:	4b6d      	ldr	r3, [pc, #436]	; (18448 <lcd_displaying_task+0x704>)
   18294:	4798      	blx	r3
					switch(callStateOnLCD)
   18296:	4b78      	ldr	r3, [pc, #480]	; (18478 <lcd_displaying_task+0x734>)
   18298:	781b      	ldrb	r3, [r3, #0]
   1829a:	2b05      	cmp	r3, #5
   1829c:	d85c      	bhi.n	18358 <lcd_displaying_task+0x614>
   1829e:	009a      	lsls	r2, r3, #2
   182a0:	4b76      	ldr	r3, [pc, #472]	; (1847c <lcd_displaying_task+0x738>)
   182a2:	18d3      	adds	r3, r2, r3
   182a4:	681b      	ldr	r3, [r3, #0]
   182a6:	469f      	mov	pc, r3
					{
						case LCDCALLSTATE_RINGING:
						{
							lcd_printf("INCOMING CALL.. ");
   182a8:	4b75      	ldr	r3, [pc, #468]	; (18480 <lcd_displaying_task+0x73c>)
   182aa:	0018      	movs	r0, r3
   182ac:	4b65      	ldr	r3, [pc, #404]	; (18444 <lcd_displaying_task+0x700>)
   182ae:	4798      	blx	r3
							LCD_setCursor(0,1);
   182b0:	2101      	movs	r1, #1
   182b2:	2000      	movs	r0, #0
   182b4:	4b64      	ldr	r3, [pc, #400]	; (18448 <lcd_displaying_task+0x704>)
   182b6:	4798      	blx	r3
							lcd_printf("%-16s",numberOnLCD);
   182b8:	4a72      	ldr	r2, [pc, #456]	; (18484 <lcd_displaying_task+0x740>)
   182ba:	4b73      	ldr	r3, [pc, #460]	; (18488 <lcd_displaying_task+0x744>)
   182bc:	0011      	movs	r1, r2
   182be:	0018      	movs	r0, r3
   182c0:	4b60      	ldr	r3, [pc, #384]	; (18444 <lcd_displaying_task+0x700>)
   182c2:	4798      	blx	r3
							break;
   182c4:	e045      	b.n	18352 <lcd_displaying_task+0x60e>
						}
						case LCDCALLSTATE_INCALL:
						{
							lcd_printf("IN CALL...      ");
   182c6:	4b71      	ldr	r3, [pc, #452]	; (1848c <lcd_displaying_task+0x748>)
   182c8:	0018      	movs	r0, r3
   182ca:	4b5e      	ldr	r3, [pc, #376]	; (18444 <lcd_displaying_task+0x700>)
   182cc:	4798      	blx	r3
							LCD_setCursor(0,1);
   182ce:	2101      	movs	r1, #1
   182d0:	2000      	movs	r0, #0
   182d2:	4b5d      	ldr	r3, [pc, #372]	; (18448 <lcd_displaying_task+0x704>)
   182d4:	4798      	blx	r3
							lcd_printf("%-16s",numberOnLCD);
   182d6:	4a6b      	ldr	r2, [pc, #428]	; (18484 <lcd_displaying_task+0x740>)
   182d8:	4b6b      	ldr	r3, [pc, #428]	; (18488 <lcd_displaying_task+0x744>)
   182da:	0011      	movs	r1, r2
   182dc:	0018      	movs	r0, r3
   182de:	4b59      	ldr	r3, [pc, #356]	; (18444 <lcd_displaying_task+0x700>)
   182e0:	4798      	blx	r3
							break;
   182e2:	e036      	b.n	18352 <lcd_displaying_task+0x60e>
						}
						case LCDCALLSTATE_OUTGOING:
						{
							lcd_printf("DIALING...      ");
   182e4:	4b6a      	ldr	r3, [pc, #424]	; (18490 <lcd_displaying_task+0x74c>)
   182e6:	0018      	movs	r0, r3
   182e8:	4b56      	ldr	r3, [pc, #344]	; (18444 <lcd_displaying_task+0x700>)
   182ea:	4798      	blx	r3
							LCD_setCursor(0,1);
   182ec:	2101      	movs	r1, #1
   182ee:	2000      	movs	r0, #0
   182f0:	4b55      	ldr	r3, [pc, #340]	; (18448 <lcd_displaying_task+0x704>)
   182f2:	4798      	blx	r3
							lcd_printf("%-16s",numberOnLCD);
   182f4:	4a63      	ldr	r2, [pc, #396]	; (18484 <lcd_displaying_task+0x740>)
   182f6:	4b64      	ldr	r3, [pc, #400]	; (18488 <lcd_displaying_task+0x744>)
   182f8:	0011      	movs	r1, r2
   182fa:	0018      	movs	r0, r3
   182fc:	4b51      	ldr	r3, [pc, #324]	; (18444 <lcd_displaying_task+0x700>)
   182fe:	4798      	blx	r3
							break;
   18300:	e027      	b.n	18352 <lcd_displaying_task+0x60e>
						}
						case LCDCALLSTATE_INCOMINGSMS:
						{
							lcd_printf("INCOMING SMS... ");
   18302:	4b64      	ldr	r3, [pc, #400]	; (18494 <lcd_displaying_task+0x750>)
   18304:	0018      	movs	r0, r3
   18306:	4b4f      	ldr	r3, [pc, #316]	; (18444 <lcd_displaying_task+0x700>)
   18308:	4798      	blx	r3
							LCD_setCursor(0,1);
   1830a:	2101      	movs	r1, #1
   1830c:	2000      	movs	r0, #0
   1830e:	4b4e      	ldr	r3, [pc, #312]	; (18448 <lcd_displaying_task+0x704>)
   18310:	4798      	blx	r3
							lcd_printf("%-16s",numberOnLCD);
   18312:	4a5c      	ldr	r2, [pc, #368]	; (18484 <lcd_displaying_task+0x740>)
   18314:	4b5c      	ldr	r3, [pc, #368]	; (18488 <lcd_displaying_task+0x744>)
   18316:	0011      	movs	r1, r2
   18318:	0018      	movs	r0, r3
   1831a:	4b4a      	ldr	r3, [pc, #296]	; (18444 <lcd_displaying_task+0x700>)
   1831c:	4798      	blx	r3
							setCallStateOnLCD(LCDCALLSTATE_IDLE,NULL,false);
   1831e:	2200      	movs	r2, #0
   18320:	2100      	movs	r1, #0
   18322:	2000      	movs	r0, #0
   18324:	4b5c      	ldr	r3, [pc, #368]	; (18498 <lcd_displaying_task+0x754>)
   18326:	4798      	blx	r3
							break;
   18328:	e013      	b.n	18352 <lcd_displaying_task+0x60e>
						}
						case LCDCALLSTATE_OUTGOINGSMS:
						{
							lcd_printf("OUTGOING SMS... ");
   1832a:	4b5c      	ldr	r3, [pc, #368]	; (1849c <lcd_displaying_task+0x758>)
   1832c:	0018      	movs	r0, r3
   1832e:	4b45      	ldr	r3, [pc, #276]	; (18444 <lcd_displaying_task+0x700>)
   18330:	4798      	blx	r3
							LCD_setCursor(0,1);
   18332:	2101      	movs	r1, #1
   18334:	2000      	movs	r0, #0
   18336:	4b44      	ldr	r3, [pc, #272]	; (18448 <lcd_displaying_task+0x704>)
   18338:	4798      	blx	r3
							lcd_printf("%-16s",numberOnLCD);
   1833a:	4a52      	ldr	r2, [pc, #328]	; (18484 <lcd_displaying_task+0x740>)
   1833c:	4b52      	ldr	r3, [pc, #328]	; (18488 <lcd_displaying_task+0x744>)
   1833e:	0011      	movs	r1, r2
   18340:	0018      	movs	r0, r3
   18342:	4b40      	ldr	r3, [pc, #256]	; (18444 <lcd_displaying_task+0x700>)
   18344:	4798      	blx	r3
							setCallStateOnLCD(LCDCALLSTATE_IDLE,NULL,false);
   18346:	2200      	movs	r2, #0
   18348:	2100      	movs	r1, #0
   1834a:	2000      	movs	r0, #0
   1834c:	4b52      	ldr	r3, [pc, #328]	; (18498 <lcd_displaying_task+0x754>)
   1834e:	4798      	blx	r3
							break;
   18350:	46c0      	nop			; (mov r8, r8)
						}
					}
					break;
   18352:	e001      	b.n	18358 <lcd_displaying_task+0x614>
					break;
   18354:	46c0      	nop			; (mov r8, r8)
   18356:	e000      	b.n	1835a <lcd_displaying_task+0x616>
					break;
   18358:	46c0      	nop			; (mov r8, r8)
				}
			}
		}
		
		if (xQueueReceive(xfour_Second_Queue,&time,0))
   1835a:	4b51      	ldr	r3, [pc, #324]	; (184a0 <lcd_displaying_task+0x75c>)
   1835c:	681b      	ldr	r3, [r3, #0]
   1835e:	223a      	movs	r2, #58	; 0x3a
   18360:	18b9      	adds	r1, r7, r2
   18362:	2200      	movs	r2, #0
   18364:	0018      	movs	r0, r3
   18366:	4b4f      	ldr	r3, [pc, #316]	; (184a4 <lcd_displaying_task+0x760>)
   18368:	4798      	blx	r3
   1836a:	1e03      	subs	r3, r0, #0
   1836c:	d057      	beq.n	1841e <lcd_displaying_task+0x6da>
		{
			xTimerChangePeriod( four_Second_timeout_timer, 4000/portTICK_PERIOD_MS, portMAX_DELAY);
   1836e:	4b4e      	ldr	r3, [pc, #312]	; (184a8 <lcd_displaying_task+0x764>)
   18370:	6818      	ldr	r0, [r3, #0]
   18372:	23fa      	movs	r3, #250	; 0xfa
   18374:	011a      	lsls	r2, r3, #4
   18376:	2301      	movs	r3, #1
   18378:	425b      	negs	r3, r3
   1837a:	9300      	str	r3, [sp, #0]
   1837c:	2300      	movs	r3, #0
   1837e:	2104      	movs	r1, #4
   18380:	4c4a      	ldr	r4, [pc, #296]	; (184ac <lcd_displaying_task+0x768>)
   18382:	47a0      	blx	r4
			if(varPauseDisplay==false)
   18384:	4b4a      	ldr	r3, [pc, #296]	; (184b0 <lcd_displaying_task+0x76c>)
   18386:	781b      	ldrb	r3, [r3, #0]
   18388:	b2db      	uxtb	r3, r3
   1838a:	2201      	movs	r2, #1
   1838c:	4053      	eors	r3, r2
   1838e:	b2db      	uxtb	r3, r3
   18390:	2b00      	cmp	r3, #0
   18392:	d044      	beq.n	1841e <lcd_displaying_task+0x6da>
			{
				screen++;
   18394:	233f      	movs	r3, #63	; 0x3f
   18396:	18fb      	adds	r3, r7, r3
   18398:	781a      	ldrb	r2, [r3, #0]
   1839a:	233f      	movs	r3, #63	; 0x3f
   1839c:	18fb      	adds	r3, r7, r3
   1839e:	3201      	adds	r2, #1
   183a0:	701a      	strb	r2, [r3, #0]
				if(!getMotorState() && screen==3)
   183a2:	4b44      	ldr	r3, [pc, #272]	; (184b4 <lcd_displaying_task+0x770>)
   183a4:	4798      	blx	r3
   183a6:	0003      	movs	r3, r0
   183a8:	001a      	movs	r2, r3
   183aa:	2301      	movs	r3, #1
   183ac:	4053      	eors	r3, r2
   183ae:	b2db      	uxtb	r3, r3
   183b0:	2b00      	cmp	r3, #0
   183b2:	d00b      	beq.n	183cc <lcd_displaying_task+0x688>
   183b4:	233f      	movs	r3, #63	; 0x3f
   183b6:	18fb      	adds	r3, r7, r3
   183b8:	781b      	ldrb	r3, [r3, #0]
   183ba:	2b03      	cmp	r3, #3
   183bc:	d106      	bne.n	183cc <lcd_displaying_task+0x688>
				{
					screen++;
   183be:	233f      	movs	r3, #63	; 0x3f
   183c0:	18fb      	adds	r3, r7, r3
   183c2:	781a      	ldrb	r2, [r3, #0]
   183c4:	233f      	movs	r3, #63	; 0x3f
   183c6:	18fb      	adds	r3, r7, r3
   183c8:	3201      	adds	r2, #1
   183ca:	701a      	strb	r2, [r3, #0]
				}
				
				if(!factory_settings_parameter_struct.ENABLE_WATER && screen==5)
   183cc:	4b3a      	ldr	r3, [pc, #232]	; (184b8 <lcd_displaying_task+0x774>)
   183ce:	795b      	ldrb	r3, [r3, #5]
   183d0:	2b00      	cmp	r3, #0
   183d2:	d10b      	bne.n	183ec <lcd_displaying_task+0x6a8>
   183d4:	233f      	movs	r3, #63	; 0x3f
   183d6:	18fb      	adds	r3, r7, r3
   183d8:	781b      	ldrb	r3, [r3, #0]
   183da:	2b05      	cmp	r3, #5
   183dc:	d106      	bne.n	183ec <lcd_displaying_task+0x6a8>
				{
					screen++;
   183de:	233f      	movs	r3, #63	; 0x3f
   183e0:	18fb      	adds	r3, r7, r3
   183e2:	781a      	ldrb	r2, [r3, #0]
   183e4:	233f      	movs	r3, #63	; 0x3f
   183e6:	18fb      	adds	r3, r7, r3
   183e8:	3201      	adds	r2, #1
   183ea:	701a      	strb	r2, [r3, #0]
				}
				
				{
					if(callStateOnLCD==LCDCALLSTATE_IDLE && screen==7)
   183ec:	4b22      	ldr	r3, [pc, #136]	; (18478 <lcd_displaying_task+0x734>)
   183ee:	781b      	ldrb	r3, [r3, #0]
   183f0:	2b00      	cmp	r3, #0
   183f2:	d10c      	bne.n	1840e <lcd_displaying_task+0x6ca>
   183f4:	233f      	movs	r3, #63	; 0x3f
   183f6:	18fb      	adds	r3, r7, r3
   183f8:	781b      	ldrb	r3, [r3, #0]
   183fa:	2b07      	cmp	r3, #7
   183fc:	d107      	bne.n	1840e <lcd_displaying_task+0x6ca>
					{
						screen++;
   183fe:	233f      	movs	r3, #63	; 0x3f
   18400:	18fb      	adds	r3, r7, r3
   18402:	781a      	ldrb	r2, [r3, #0]
   18404:	233f      	movs	r3, #63	; 0x3f
   18406:	18fb      	adds	r3, r7, r3
   18408:	3201      	adds	r2, #1
   1840a:	701a      	strb	r2, [r3, #0]
   1840c:	e007      	b.n	1841e <lcd_displaying_task+0x6da>
					}
					else if(callStateOnLCD!=LCDCALLSTATE_IDLE)
   1840e:	4b1a      	ldr	r3, [pc, #104]	; (18478 <lcd_displaying_task+0x734>)
   18410:	781b      	ldrb	r3, [r3, #0]
   18412:	2b00      	cmp	r3, #0
   18414:	d003      	beq.n	1841e <lcd_displaying_task+0x6da>
					{
						screen=7;
   18416:	233f      	movs	r3, #63	; 0x3f
   18418:	18fb      	adds	r3, r7, r3
   1841a:	2207      	movs	r2, #7
   1841c:	701a      	strb	r2, [r3, #0]
					}
				}
			}
		}
		
		if (screen>7)
   1841e:	233f      	movs	r3, #63	; 0x3f
   18420:	18fb      	adds	r3, r7, r3
   18422:	781b      	ldrb	r3, [r3, #0]
   18424:	2b07      	cmp	r3, #7
   18426:	d903      	bls.n	18430 <lcd_displaying_task+0x6ec>
		{
			screen=1;
   18428:	233f      	movs	r3, #63	; 0x3f
   1842a:	18fb      	adds	r3, r7, r3
   1842c:	2201      	movs	r2, #1
   1842e:	701a      	strb	r2, [r3, #0]
		}
		
		vTaskDelay(500);
   18430:	23fa      	movs	r3, #250	; 0xfa
   18432:	005b      	lsls	r3, r3, #1
   18434:	0018      	movs	r0, r3
   18436:	4b21      	ldr	r3, [pc, #132]	; (184bc <lcd_displaying_task+0x778>)
   18438:	4798      	blx	r3
		if (lcd_in_sleep)
   1843a:	e4ef      	b.n	17e1c <lcd_displaying_task+0xd8>
   1843c:	2000077c 	.word	0x2000077c
   18440:	0002a3a0 	.word	0x0002a3a0
   18444:	00013e19 	.word	0x00013e19
   18448:	00013d1d 	.word	0x00013d1d
   1844c:	0002a3a8 	.word	0x0002a3a8
   18450:	20000838 	.word	0x20000838
   18454:	0002a3b4 	.word	0x0002a3b4
   18458:	0002a398 	.word	0x0002a398
   1845c:	0002a390 	.word	0x0002a390
   18460:	200006e4 	.word	0x200006e4
   18464:	0002a3bc 	.word	0x0002a3bc
   18468:	0002a3d0 	.word	0x0002a3d0
   1846c:	0002a3dc 	.word	0x0002a3dc
   18470:	20000775 	.word	0x20000775
   18474:	00013bd1 	.word	0x00013bd1
   18478:	200007b5 	.word	0x200007b5
   1847c:	0002a498 	.word	0x0002a498
   18480:	0002a3e4 	.word	0x0002a3e4
   18484:	20000824 	.word	0x20000824
   18488:	0002a3f8 	.word	0x0002a3f8
   1848c:	0002a400 	.word	0x0002a400
   18490:	0002a414 	.word	0x0002a414
   18494:	0002a428 	.word	0x0002a428
   18498:	0001c729 	.word	0x0001c729
   1849c:	0002a43c 	.word	0x0002a43c
   184a0:	20000234 	.word	0x20000234
   184a4:	0001f031 	.word	0x0001f031
   184a8:	20000238 	.word	0x20000238
   184ac:	00020a9d 	.word	0x00020a9d
   184b0:	20000230 	.word	0x20000230
   184b4:	0001a795 	.word	0x0001a795
   184b8:	20000638 	.word	0x20000638
   184bc:	0001fad9 	.word	0x0001fad9

000184c0 <start_lcd_service>:
	}
}


void start_lcd_service(void)
{
   184c0:	b590      	push	{r4, r7, lr}
   184c2:	b083      	sub	sp, #12
   184c4:	af02      	add	r7, sp, #8
	xfour_Second_Queue=xQueueCreate(1,sizeof(uint8_t));
   184c6:	2200      	movs	r2, #0
   184c8:	2101      	movs	r1, #1
   184ca:	2001      	movs	r0, #1
   184cc:	4b09      	ldr	r3, [pc, #36]	; (184f4 <start_lcd_service+0x34>)
   184ce:	4798      	blx	r3
   184d0:	0002      	movs	r2, r0
   184d2:	4b09      	ldr	r3, [pc, #36]	; (184f8 <start_lcd_service+0x38>)
   184d4:	601a      	str	r2, [r3, #0]
	xTaskCreate(lcd_displaying_task,NULL,(uint16_t)400,NULL,1,NULL);
   184d6:	23c8      	movs	r3, #200	; 0xc8
   184d8:	005a      	lsls	r2, r3, #1
   184da:	4808      	ldr	r0, [pc, #32]	; (184fc <start_lcd_service+0x3c>)
   184dc:	2300      	movs	r3, #0
   184de:	9301      	str	r3, [sp, #4]
   184e0:	2301      	movs	r3, #1
   184e2:	9300      	str	r3, [sp, #0]
   184e4:	2300      	movs	r3, #0
   184e6:	2100      	movs	r1, #0
   184e8:	4c05      	ldr	r4, [pc, #20]	; (18500 <start_lcd_service+0x40>)
   184ea:	47a0      	blx	r4
	
}
   184ec:	46c0      	nop			; (mov r8, r8)
   184ee:	46bd      	mov	sp, r7
   184f0:	b001      	add	sp, #4
   184f2:	bd90      	pop	{r4, r7, pc}
   184f4:	0001ec75 	.word	0x0001ec75
   184f8:	20000234 	.word	0x20000234
   184fc:	00017d45 	.word	0x00017d45
   18500:	0001f799 	.word	0x0001f799

00018504 <four_second_timer_callback>:

static void four_second_timer_callback(TimerHandle_t timer)
{
   18504:	b590      	push	{r4, r7, lr}
   18506:	b085      	sub	sp, #20
   18508:	af00      	add	r7, sp, #0
   1850a:	6078      	str	r0, [r7, #4]
	uint8_t ucharfour_Second=1;
   1850c:	230f      	movs	r3, #15
   1850e:	18fb      	adds	r3, r7, r3
   18510:	2201      	movs	r2, #1
   18512:	701a      	strb	r2, [r3, #0]
	xQueueSendFromISR(xfour_Second_Queue,&ucharfour_Second,0);
   18514:	4b05      	ldr	r3, [pc, #20]	; (1852c <four_second_timer_callback+0x28>)
   18516:	6818      	ldr	r0, [r3, #0]
   18518:	230f      	movs	r3, #15
   1851a:	18f9      	adds	r1, r7, r3
   1851c:	2300      	movs	r3, #0
   1851e:	2200      	movs	r2, #0
   18520:	4c03      	ldr	r4, [pc, #12]	; (18530 <four_second_timer_callback+0x2c>)
   18522:	47a0      	blx	r4
}
   18524:	46c0      	nop			; (mov r8, r8)
   18526:	46bd      	mov	sp, r7
   18528:	b005      	add	sp, #20
   1852a:	bd90      	pop	{r4, r7, pc}
   1852c:	20000234 	.word	0x20000234
   18530:	0001ef11 	.word	0x0001ef11

00018534 <ac_is_syncing>:
 * \retval false If the module has completed synchronization
 * \retval ture If the module synchronization is ongoing
 */
static inline bool ac_is_syncing(
        struct ac_module *const module_inst)
{
   18534:	b580      	push	{r7, lr}
   18536:	b084      	sub	sp, #16
   18538:	af00      	add	r7, sp, #0
   1853a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);

	Ac *const ac_module = module_inst->hw;
   1853c:	687b      	ldr	r3, [r7, #4]
   1853e:	681b      	ldr	r3, [r3, #0]
   18540:	60fb      	str	r3, [r7, #12]
		return true;
	}

	return false;
#else
	if (ac_module->STATUSB.reg & AC_STATUSB_SYNCBUSY) {
   18542:	68fb      	ldr	r3, [r7, #12]
   18544:	7a5b      	ldrb	r3, [r3, #9]
   18546:	b2db      	uxtb	r3, r3
   18548:	b25b      	sxtb	r3, r3
   1854a:	2b00      	cmp	r3, #0
   1854c:	da01      	bge.n	18552 <ac_is_syncing+0x1e>
		return true;
   1854e:	2301      	movs	r3, #1
   18550:	e000      	b.n	18554 <ac_is_syncing+0x20>
	}

	return false;
   18552:	2300      	movs	r3, #0
#endif
}
   18554:	0018      	movs	r0, r3
   18556:	46bd      	mov	sp, r7
   18558:	b004      	add	sp, #16
   1855a:	bd80      	pop	{r7, pc}

0001855c <ac_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void ac_get_config_defaults(
		struct ac_config *const config)
{
   1855c:	b580      	push	{r7, lr}
   1855e:	b084      	sub	sp, #16
   18560:	af00      	add	r7, sp, #0
   18562:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);
#ifdef FEATURE_AC_RUN_IN_STANDY_PAIR_COMPARATOR
	/* Default configuration values */
	for (uint32_t i = 0; i < AC_PAIRS; i++) {
   18564:	2300      	movs	r3, #0
   18566:	60fb      	str	r3, [r7, #12]
   18568:	e007      	b.n	1857a <ac_get_config_defaults+0x1e>
		config->run_in_standby[i] = false;
   1856a:	687a      	ldr	r2, [r7, #4]
   1856c:	68fb      	ldr	r3, [r7, #12]
   1856e:	18d3      	adds	r3, r2, r3
   18570:	2200      	movs	r2, #0
   18572:	701a      	strb	r2, [r3, #0]
	for (uint32_t i = 0; i < AC_PAIRS; i++) {
   18574:	68fb      	ldr	r3, [r7, #12]
   18576:	3301      	adds	r3, #1
   18578:	60fb      	str	r3, [r7, #12]
   1857a:	68fb      	ldr	r3, [r7, #12]
   1857c:	2b00      	cmp	r3, #0
   1857e:	d0f4      	beq.n	1856a <ac_get_config_defaults+0xe>
	}
#endif
#if (SAMD) || (SAMHA1) || (SAMHA0) || (SAMR21)
	config->dig_source_generator = GCLK_GENERATOR_0;
   18580:	687b      	ldr	r3, [r7, #4]
   18582:	2200      	movs	r2, #0
   18584:	705a      	strb	r2, [r3, #1]
	config->ana_source_generator = GCLK_GENERATOR_3;
   18586:	687b      	ldr	r3, [r7, #4]
   18588:	2203      	movs	r2, #3
   1858a:	709a      	strb	r2, [r3, #2]
#else
	config->source_generator = GCLK_GENERATOR_0;
#endif
}
   1858c:	46c0      	nop			; (mov r8, r8)
   1858e:	46bd      	mov	sp, r7
   18590:	b004      	add	sp, #16
   18592:	bd80      	pop	{r7, pc}

00018594 <ac_enable>:
 *
 * \param[in] module_inst  Software instance for the Analog Comparator peripheral
 */
static inline void ac_enable(
		struct ac_module *const module_inst)
{
   18594:	b580      	push	{r7, lr}
   18596:	b084      	sub	sp, #16
   18598:	af00      	add	r7, sp, #0
   1859a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Ac *const ac_module = module_inst->hw;
   1859c:	687b      	ldr	r3, [r7, #4]
   1859e:	681b      	ldr	r3, [r3, #0]
   185a0:	60fb      	str	r3, [r7, #12]

	while (ac_is_syncing(module_inst)) {
   185a2:	46c0      	nop			; (mov r8, r8)
   185a4:	687b      	ldr	r3, [r7, #4]
   185a6:	0018      	movs	r0, r3
   185a8:	4b07      	ldr	r3, [pc, #28]	; (185c8 <ac_enable+0x34>)
   185aa:	4798      	blx	r3
   185ac:	1e03      	subs	r3, r0, #0
   185ae:	d1f9      	bne.n	185a4 <ac_enable+0x10>
		/* Wait until synchronization is complete */
	}

	/* Write the new comparator module control configuration */
	ac_module->CTRLA.reg |= AC_CTRLA_ENABLE;
   185b0:	68fb      	ldr	r3, [r7, #12]
   185b2:	781b      	ldrb	r3, [r3, #0]
   185b4:	b2db      	uxtb	r3, r3
   185b6:	2202      	movs	r2, #2
   185b8:	4313      	orrs	r3, r2
   185ba:	b2da      	uxtb	r2, r3
   185bc:	68fb      	ldr	r3, [r7, #12]
   185be:	701a      	strb	r2, [r3, #0]
}
   185c0:	46c0      	nop			; (mov r8, r8)
   185c2:	46bd      	mov	sp, r7
   185c4:	b004      	add	sp, #16
   185c6:	bd80      	pop	{r7, pc}
   185c8:	00018535 	.word	0x00018535

000185cc <ac_enable_events>:
 *  \param[in] events       Struct containing flags of events to enable
 */
static inline void ac_enable_events(
		struct ac_module *const module_inst,
		struct ac_events *const events)
{
   185cc:	b580      	push	{r7, lr}
   185ce:	b086      	sub	sp, #24
   185d0:	af00      	add	r7, sp, #0
   185d2:	6078      	str	r0, [r7, #4]
   185d4:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(events);

	Ac *const ac_module = module_inst->hw;
   185d6:	687b      	ldr	r3, [r7, #4]
   185d8:	681b      	ldr	r3, [r3, #0]
   185da:	60fb      	str	r3, [r7, #12]

	uint32_t event_mask = 0;
   185dc:	2300      	movs	r3, #0
   185de:	617b      	str	r3, [r7, #20]

	/* Configure window output events for each comparator pair */
	for (uint8_t i = 0; i < AC_PAIRS; i++) {
   185e0:	2313      	movs	r3, #19
   185e2:	18fb      	adds	r3, r7, r3
   185e4:	2200      	movs	r2, #0
   185e6:	701a      	strb	r2, [r3, #0]
   185e8:	e017      	b.n	1861a <ac_enable_events+0x4e>
		if (events->generate_event_on_window[i] == true) {
   185ea:	2313      	movs	r3, #19
   185ec:	18fb      	adds	r3, r7, r3
   185ee:	781b      	ldrb	r3, [r3, #0]
   185f0:	683a      	ldr	r2, [r7, #0]
   185f2:	5cd3      	ldrb	r3, [r2, r3]
   185f4:	2b00      	cmp	r3, #0
   185f6:	d009      	beq.n	1860c <ac_enable_events+0x40>
			event_mask |= (AC_EVCTRL_WINEO0 << i);
   185f8:	2313      	movs	r3, #19
   185fa:	18fb      	adds	r3, r7, r3
   185fc:	781b      	ldrb	r3, [r3, #0]
   185fe:	2210      	movs	r2, #16
   18600:	409a      	lsls	r2, r3
   18602:	0013      	movs	r3, r2
   18604:	001a      	movs	r2, r3
   18606:	697b      	ldr	r3, [r7, #20]
   18608:	4313      	orrs	r3, r2
   1860a:	617b      	str	r3, [r7, #20]
	for (uint8_t i = 0; i < AC_PAIRS; i++) {
   1860c:	2313      	movs	r3, #19
   1860e:	18fb      	adds	r3, r7, r3
   18610:	781a      	ldrb	r2, [r3, #0]
   18612:	2313      	movs	r3, #19
   18614:	18fb      	adds	r3, r7, r3
   18616:	3201      	adds	r2, #1
   18618:	701a      	strb	r2, [r3, #0]
   1861a:	2313      	movs	r3, #19
   1861c:	18fb      	adds	r3, r7, r3
   1861e:	781b      	ldrb	r3, [r3, #0]
   18620:	2b00      	cmp	r3, #0
   18622:	d0e2      	beq.n	185ea <ac_enable_events+0x1e>
		}
	}

	/* Configure sample input/output events for each comparator */
	for (uint8_t i = 0; i < AC_NUM_CMP; i++) {
   18624:	2312      	movs	r3, #18
   18626:	18fb      	adds	r3, r7, r3
   18628:	2200      	movs	r2, #0
   1862a:	701a      	strb	r2, [r3, #0]
   1862c:	e02b      	b.n	18686 <ac_enable_events+0xba>
		if (events->on_event_sample[i] == true) {
   1862e:	2312      	movs	r3, #18
   18630:	18fb      	adds	r3, r7, r3
   18632:	781b      	ldrb	r3, [r3, #0]
   18634:	683a      	ldr	r2, [r7, #0]
   18636:	18d3      	adds	r3, r2, r3
   18638:	78db      	ldrb	r3, [r3, #3]
   1863a:	2b00      	cmp	r3, #0
   1863c:	d00a      	beq.n	18654 <ac_enable_events+0x88>
			event_mask |= (AC_EVCTRL_COMPEI0 << i);
   1863e:	2312      	movs	r3, #18
   18640:	18fb      	adds	r3, r7, r3
   18642:	781b      	ldrb	r3, [r3, #0]
   18644:	2280      	movs	r2, #128	; 0x80
   18646:	0052      	lsls	r2, r2, #1
   18648:	409a      	lsls	r2, r3
   1864a:	0013      	movs	r3, r2
   1864c:	001a      	movs	r2, r3
   1864e:	697b      	ldr	r3, [r7, #20]
   18650:	4313      	orrs	r3, r2
   18652:	617b      	str	r3, [r7, #20]
		}

		if (events->generate_event_on_state[i] == true) {
   18654:	2312      	movs	r3, #18
   18656:	18fb      	adds	r3, r7, r3
   18658:	781b      	ldrb	r3, [r3, #0]
   1865a:	683a      	ldr	r2, [r7, #0]
   1865c:	18d3      	adds	r3, r2, r3
   1865e:	785b      	ldrb	r3, [r3, #1]
   18660:	2b00      	cmp	r3, #0
   18662:	d009      	beq.n	18678 <ac_enable_events+0xac>
			event_mask |= (AC_EVCTRL_COMPEO0 << i);
   18664:	2312      	movs	r3, #18
   18666:	18fb      	adds	r3, r7, r3
   18668:	781b      	ldrb	r3, [r3, #0]
   1866a:	2201      	movs	r2, #1
   1866c:	409a      	lsls	r2, r3
   1866e:	0013      	movs	r3, r2
   18670:	001a      	movs	r2, r3
   18672:	697b      	ldr	r3, [r7, #20]
   18674:	4313      	orrs	r3, r2
   18676:	617b      	str	r3, [r7, #20]
	for (uint8_t i = 0; i < AC_NUM_CMP; i++) {
   18678:	2312      	movs	r3, #18
   1867a:	18fb      	adds	r3, r7, r3
   1867c:	781a      	ldrb	r2, [r3, #0]
   1867e:	2312      	movs	r3, #18
   18680:	18fb      	adds	r3, r7, r3
   18682:	3201      	adds	r2, #1
   18684:	701a      	strb	r2, [r3, #0]
   18686:	2312      	movs	r3, #18
   18688:	18fb      	adds	r3, r7, r3
   1868a:	781b      	ldrb	r3, [r3, #0]
   1868c:	2b01      	cmp	r3, #1
   1868e:	d9ce      	bls.n	1862e <ac_enable_events+0x62>
		}
	}

	ac_module->EVCTRL.reg |= event_mask;
   18690:	68fb      	ldr	r3, [r7, #12]
   18692:	885b      	ldrh	r3, [r3, #2]
   18694:	b29a      	uxth	r2, r3
   18696:	697b      	ldr	r3, [r7, #20]
   18698:	b29b      	uxth	r3, r3
   1869a:	4313      	orrs	r3, r2
   1869c:	b29a      	uxth	r2, r3
   1869e:	68fb      	ldr	r3, [r7, #12]
   186a0:	805a      	strh	r2, [r3, #2]
}
   186a2:	46c0      	nop			; (mov r8, r8)
   186a4:	46bd      	mov	sp, r7
   186a6:	b006      	add	sp, #24
   186a8:	bd80      	pop	{r7, pc}
	...

000186ac <ac_chan_enable>:
 *  \param[in] channel      Comparator channel to enable
 */
static inline void ac_chan_enable(
		struct ac_module *const module_inst,
		const enum ac_chan_channel channel)
{
   186ac:	b580      	push	{r7, lr}
   186ae:	b084      	sub	sp, #16
   186b0:	af00      	add	r7, sp, #0
   186b2:	6078      	str	r0, [r7, #4]
   186b4:	000a      	movs	r2, r1
   186b6:	1cfb      	adds	r3, r7, #3
   186b8:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Ac *const ac_module = module_inst->hw;
   186ba:	687b      	ldr	r3, [r7, #4]
   186bc:	681b      	ldr	r3, [r3, #0]
   186be:	60fb      	str	r3, [r7, #12]

	while (ac_is_syncing(module_inst)) {
   186c0:	46c0      	nop			; (mov r8, r8)
   186c2:	687b      	ldr	r3, [r7, #4]
   186c4:	0018      	movs	r0, r3
   186c6:	4b0b      	ldr	r3, [pc, #44]	; (186f4 <ac_chan_enable+0x48>)
   186c8:	4798      	blx	r3
   186ca:	1e03      	subs	r3, r0, #0
   186cc:	d1f9      	bne.n	186c2 <ac_chan_enable+0x16>
		/* Wait until synchronization is complete */
	}

	/* Write the new comparator module control configuration */
	ac_module->COMPCTRL[(uint8_t)channel].reg |= AC_COMPCTRL_ENABLE;
   186ce:	1cfb      	adds	r3, r7, #3
   186d0:	781a      	ldrb	r2, [r3, #0]
   186d2:	1cfb      	adds	r3, r7, #3
   186d4:	7819      	ldrb	r1, [r3, #0]
   186d6:	68fb      	ldr	r3, [r7, #12]
   186d8:	3104      	adds	r1, #4
   186da:	0089      	lsls	r1, r1, #2
   186dc:	58cb      	ldr	r3, [r1, r3]
   186de:	2101      	movs	r1, #1
   186e0:	4319      	orrs	r1, r3
   186e2:	68fb      	ldr	r3, [r7, #12]
   186e4:	3204      	adds	r2, #4
   186e6:	0092      	lsls	r2, r2, #2
   186e8:	50d1      	str	r1, [r2, r3]
}
   186ea:	46c0      	nop			; (mov r8, r8)
   186ec:	46bd      	mov	sp, r7
   186ee:	b004      	add	sp, #16
   186f0:	bd80      	pop	{r7, pc}
   186f2:	46c0      	nop			; (mov r8, r8)
   186f4:	00018535 	.word	0x00018535

000186f8 <ac_chan_is_ready>:
 *  \return Comparator channel readiness state.
 */
static inline bool ac_chan_is_ready(
		struct ac_module *const module_inst,
		const enum ac_chan_channel channel)
{
   186f8:	b580      	push	{r7, lr}
   186fa:	b084      	sub	sp, #16
   186fc:	af00      	add	r7, sp, #0
   186fe:	6078      	str	r0, [r7, #4]
   18700:	000a      	movs	r2, r1
   18702:	1cfb      	adds	r3, r7, #3
   18704:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Ac *const ac_module = module_inst->hw;
   18706:	687b      	ldr	r3, [r7, #4]
   18708:	681b      	ldr	r3, [r3, #0]
   1870a:	60fb      	str	r3, [r7, #12]

	return (ac_module->STATUSB.reg & (AC_STATUSB_READY0 << (uint8_t)channel));
   1870c:	68fb      	ldr	r3, [r7, #12]
   1870e:	7a5b      	ldrb	r3, [r3, #9]
   18710:	b2db      	uxtb	r3, r3
   18712:	0019      	movs	r1, r3
   18714:	1cfb      	adds	r3, r7, #3
   18716:	781b      	ldrb	r3, [r3, #0]
   18718:	2201      	movs	r2, #1
   1871a:	409a      	lsls	r2, r3
   1871c:	0013      	movs	r3, r2
   1871e:	400b      	ands	r3, r1
   18720:	1e5a      	subs	r2, r3, #1
   18722:	4193      	sbcs	r3, r2
   18724:	b2db      	uxtb	r3, r3
}
   18726:	0018      	movs	r0, r3
   18728:	46bd      	mov	sp, r7
   1872a:	b004      	add	sp, #16
   1872c:	bd80      	pop	{r7, pc}
	...

00018730 <ac_chan_get_status>:
 *  \return Bit mask of comparator channel status flags.
 */
static inline uint8_t ac_chan_get_status(
		struct ac_module *const module_inst,
		const enum ac_chan_channel channel)
{
   18730:	b580      	push	{r7, lr}
   18732:	b084      	sub	sp, #16
   18734:	af00      	add	r7, sp, #0
   18736:	6078      	str	r0, [r7, #4]
   18738:	000a      	movs	r2, r1
   1873a:	1cfb      	adds	r3, r7, #3
   1873c:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Ac *const ac_module = module_inst->hw;
   1873e:	687b      	ldr	r3, [r7, #4]
   18740:	681b      	ldr	r3, [r3, #0]
   18742:	60bb      	str	r3, [r7, #8]

	uint8_t status_mask = 0;
   18744:	230f      	movs	r3, #15
   18746:	18fb      	adds	r3, r7, r3
   18748:	2200      	movs	r2, #0
   1874a:	701a      	strb	r2, [r3, #0]

	if (ac_module->INTFLAG.reg & (1 << channel)) {
   1874c:	68bb      	ldr	r3, [r7, #8]
   1874e:	799b      	ldrb	r3, [r3, #6]
   18750:	b2db      	uxtb	r3, r3
   18752:	001a      	movs	r2, r3
   18754:	1cfb      	adds	r3, r7, #3
   18756:	781b      	ldrb	r3, [r3, #0]
   18758:	411a      	asrs	r2, r3
   1875a:	0013      	movs	r3, r2
   1875c:	2201      	movs	r2, #1
   1875e:	4013      	ands	r3, r2
   18760:	d003      	beq.n	1876a <ac_chan_get_status+0x3a>
		status_mask = AC_CHAN_STATUS_INTERRUPT_SET;
   18762:	230f      	movs	r3, #15
   18764:	18fb      	adds	r3, r7, r3
   18766:	2208      	movs	r2, #8
   18768:	701a      	strb	r2, [r3, #0]
	}

	if (ac_chan_is_ready(module_inst, channel) == false) {
   1876a:	1cfb      	adds	r3, r7, #3
   1876c:	781a      	ldrb	r2, [r3, #0]
   1876e:	687b      	ldr	r3, [r7, #4]
   18770:	0011      	movs	r1, r2
   18772:	0018      	movs	r0, r3
   18774:	4b1b      	ldr	r3, [pc, #108]	; (187e4 <ac_chan_get_status+0xb4>)
   18776:	4798      	blx	r3
   18778:	0003      	movs	r3, r0
   1877a:	001a      	movs	r2, r3
   1877c:	2301      	movs	r3, #1
   1877e:	4053      	eors	r3, r2
   18780:	b2db      	uxtb	r3, r3
   18782:	2b00      	cmp	r3, #0
   18784:	d00b      	beq.n	1879e <ac_chan_get_status+0x6e>
		status_mask |= AC_CHAN_STATUS_UNKNOWN;
   18786:	230f      	movs	r3, #15
   18788:	18fb      	adds	r3, r7, r3
   1878a:	220f      	movs	r2, #15
   1878c:	18ba      	adds	r2, r7, r2
   1878e:	7812      	ldrb	r2, [r2, #0]
   18790:	2101      	movs	r1, #1
   18792:	430a      	orrs	r2, r1
   18794:	701a      	strb	r2, [r3, #0]
		return status_mask;
   18796:	230f      	movs	r3, #15
   18798:	18fb      	adds	r3, r7, r3
   1879a:	781b      	ldrb	r3, [r3, #0]
   1879c:	e01e      	b.n	187dc <ac_chan_get_status+0xac>
	}

	if (ac_module->STATUSA.reg & (AC_STATUSA_STATE0 << (uint8_t)channel)) {
   1879e:	68bb      	ldr	r3, [r7, #8]
   187a0:	7a1b      	ldrb	r3, [r3, #8]
   187a2:	b2db      	uxtb	r3, r3
   187a4:	001a      	movs	r2, r3
   187a6:	1cfb      	adds	r3, r7, #3
   187a8:	781b      	ldrb	r3, [r3, #0]
   187aa:	411a      	asrs	r2, r3
   187ac:	0013      	movs	r3, r2
   187ae:	2201      	movs	r2, #1
   187b0:	4013      	ands	r3, r2
   187b2:	d008      	beq.n	187c6 <ac_chan_get_status+0x96>
		status_mask |= AC_CHAN_STATUS_POS_ABOVE_NEG;
   187b4:	230f      	movs	r3, #15
   187b6:	18fb      	adds	r3, r7, r3
   187b8:	220f      	movs	r2, #15
   187ba:	18ba      	adds	r2, r7, r2
   187bc:	7812      	ldrb	r2, [r2, #0]
   187be:	2104      	movs	r1, #4
   187c0:	430a      	orrs	r2, r1
   187c2:	701a      	strb	r2, [r3, #0]
   187c4:	e007      	b.n	187d6 <ac_chan_get_status+0xa6>
	} else {
		status_mask |= AC_CHAN_STATUS_NEG_ABOVE_POS;
   187c6:	230f      	movs	r3, #15
   187c8:	18fb      	adds	r3, r7, r3
   187ca:	220f      	movs	r2, #15
   187cc:	18ba      	adds	r2, r7, r2
   187ce:	7812      	ldrb	r2, [r2, #0]
   187d0:	2102      	movs	r1, #2
   187d2:	430a      	orrs	r2, r1
   187d4:	701a      	strb	r2, [r3, #0]
	}
	return status_mask;
   187d6:	230f      	movs	r3, #15
   187d8:	18fb      	adds	r3, r7, r3
   187da:	781b      	ldrb	r3, [r3, #0]
}
   187dc:	0018      	movs	r0, r3
   187de:	46bd      	mov	sp, r7
   187e0:	b004      	add	sp, #16
   187e2:	bd80      	pop	{r7, pc}
   187e4:	000186f9 	.word	0x000186f9

000187e8 <system_interrupt_enable>:
{
   187e8:	b580      	push	{r7, lr}
   187ea:	b082      	sub	sp, #8
   187ec:	af00      	add	r7, sp, #0
   187ee:	0002      	movs	r2, r0
   187f0:	1dfb      	adds	r3, r7, #7
   187f2:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   187f4:	4b06      	ldr	r3, [pc, #24]	; (18810 <system_interrupt_enable+0x28>)
   187f6:	1dfa      	adds	r2, r7, #7
   187f8:	7812      	ldrb	r2, [r2, #0]
   187fa:	0011      	movs	r1, r2
   187fc:	221f      	movs	r2, #31
   187fe:	400a      	ands	r2, r1
   18800:	2101      	movs	r1, #1
   18802:	4091      	lsls	r1, r2
   18804:	000a      	movs	r2, r1
   18806:	601a      	str	r2, [r3, #0]
}
   18808:	46c0      	nop			; (mov r8, r8)
   1880a:	46bd      	mov	sp, r7
   1880c:	b002      	add	sp, #8
   1880e:	bd80      	pop	{r7, pc}
   18810:	e000e100 	.word	0xe000e100

00018814 <ac_enable_callback>:
 * \param[in]     callback_type Callback type given by an enum
 */
static inline void ac_enable_callback(
		struct ac_module *const module,
		const enum ac_callback callback_type)
{
   18814:	b580      	push	{r7, lr}
   18816:	b084      	sub	sp, #16
   18818:	af00      	add	r7, sp, #0
   1881a:	6078      	str	r0, [r7, #4]
   1881c:	000a      	movs	r2, r1
   1881e:	1cfb      	adds	r3, r7, #3
   18820:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

	/* Set software flag for the callback */
	module->enable_callback_mask |= (1 << callback_type);
   18822:	687b      	ldr	r3, [r7, #4]
   18824:	7e5b      	ldrb	r3, [r3, #25]
   18826:	b25a      	sxtb	r2, r3
   18828:	1cfb      	adds	r3, r7, #3
   1882a:	781b      	ldrb	r3, [r3, #0]
   1882c:	2101      	movs	r1, #1
   1882e:	4099      	lsls	r1, r3
   18830:	000b      	movs	r3, r1
   18832:	b25b      	sxtb	r3, r3
   18834:	4313      	orrs	r3, r2
   18836:	b25b      	sxtb	r3, r3
   18838:	b2da      	uxtb	r2, r3
   1883a:	687b      	ldr	r3, [r7, #4]
   1883c:	765a      	strb	r2, [r3, #25]

	uint32_t inenset_temp = 0;
   1883e:	2300      	movs	r3, #0
   18840:	60fb      	str	r3, [r7, #12]

	switch (callback_type)
   18842:	1cfb      	adds	r3, r7, #3
   18844:	781b      	ldrb	r3, [r3, #0]
   18846:	2b01      	cmp	r3, #1
   18848:	d009      	beq.n	1885e <ac_enable_callback+0x4a>
   1884a:	2b04      	cmp	r3, #4
   1884c:	d00c      	beq.n	18868 <ac_enable_callback+0x54>
   1884e:	2b00      	cmp	r3, #0
   18850:	d000      	beq.n	18854 <ac_enable_callback+0x40>
			inenset_temp |= AC_INTFLAG_WIN1;
			break;
#  endif
#endif
		default:
			break;
   18852:	e00e      	b.n	18872 <ac_enable_callback+0x5e>
			inenset_temp |= AC_INTFLAG_COMP0;
   18854:	68fb      	ldr	r3, [r7, #12]
   18856:	2201      	movs	r2, #1
   18858:	4313      	orrs	r3, r2
   1885a:	60fb      	str	r3, [r7, #12]
			break;
   1885c:	e009      	b.n	18872 <ac_enable_callback+0x5e>
			inenset_temp |= AC_INTFLAG_COMP1;
   1885e:	68fb      	ldr	r3, [r7, #12]
   18860:	2202      	movs	r2, #2
   18862:	4313      	orrs	r3, r2
   18864:	60fb      	str	r3, [r7, #12]
			break;
   18866:	e004      	b.n	18872 <ac_enable_callback+0x5e>
			inenset_temp |= AC_INTFLAG_WIN0;
   18868:	68fb      	ldr	r3, [r7, #12]
   1886a:	2210      	movs	r2, #16
   1886c:	4313      	orrs	r3, r2
   1886e:	60fb      	str	r3, [r7, #12]
			break;
   18870:	46c0      	nop			; (mov r8, r8)
	}

	/* Enable the interrupt for the callback */
	module->hw->INTENSET.reg = inenset_temp;
   18872:	687b      	ldr	r3, [r7, #4]
   18874:	681b      	ldr	r3, [r3, #0]
   18876:	68fa      	ldr	r2, [r7, #12]
   18878:	b2d2      	uxtb	r2, r2
   1887a:	715a      	strb	r2, [r3, #5]

#if (AC_INST_NUM == 1)
	/* Enable interrupts for AC module */
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_AC);
   1887c:	2018      	movs	r0, #24
   1887e:	4b03      	ldr	r3, [pc, #12]	; (1888c <ac_enable_callback+0x78>)
   18880:	4798      	blx	r3
#elif (AC_INST_NUM > 1)
	system_interrupt_enable(_ac_interrupt_get_interrupt_vector(_ac_get_inst_index(module->hw)));
#endif /* (AC_INST_NUM > 1) */
}
   18882:	46c0      	nop			; (mov r8, r8)
   18884:	46bd      	mov	sp, r7
   18886:	b004      	add	sp, #16
   18888:	bd80      	pop	{r7, pc}
   1888a:	46c0      	nop			; (mov r8, r8)
   1888c:	000187e9 	.word	0x000187e9

00018890 <system_pinmux_get_group_from_gpio_pin>:
{
   18890:	b580      	push	{r7, lr}
   18892:	b084      	sub	sp, #16
   18894:	af00      	add	r7, sp, #0
   18896:	0002      	movs	r2, r0
   18898:	1dfb      	adds	r3, r7, #7
   1889a:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   1889c:	230f      	movs	r3, #15
   1889e:	18fb      	adds	r3, r7, r3
   188a0:	1dfa      	adds	r2, r7, #7
   188a2:	7812      	ldrb	r2, [r2, #0]
   188a4:	09d2      	lsrs	r2, r2, #7
   188a6:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   188a8:	230e      	movs	r3, #14
   188aa:	18fb      	adds	r3, r7, r3
   188ac:	1dfa      	adds	r2, r7, #7
   188ae:	7812      	ldrb	r2, [r2, #0]
   188b0:	0952      	lsrs	r2, r2, #5
   188b2:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   188b4:	4b0d      	ldr	r3, [pc, #52]	; (188ec <system_pinmux_get_group_from_gpio_pin+0x5c>)
   188b6:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   188b8:	230f      	movs	r3, #15
   188ba:	18fb      	adds	r3, r7, r3
   188bc:	781b      	ldrb	r3, [r3, #0]
   188be:	2b00      	cmp	r3, #0
   188c0:	d10f      	bne.n	188e2 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   188c2:	230f      	movs	r3, #15
   188c4:	18fb      	adds	r3, r7, r3
   188c6:	781b      	ldrb	r3, [r3, #0]
   188c8:	009b      	lsls	r3, r3, #2
   188ca:	2210      	movs	r2, #16
   188cc:	4694      	mov	ip, r2
   188ce:	44bc      	add	ip, r7
   188d0:	4463      	add	r3, ip
   188d2:	3b08      	subs	r3, #8
   188d4:	681a      	ldr	r2, [r3, #0]
   188d6:	230e      	movs	r3, #14
   188d8:	18fb      	adds	r3, r7, r3
   188da:	781b      	ldrb	r3, [r3, #0]
   188dc:	01db      	lsls	r3, r3, #7
   188de:	18d3      	adds	r3, r2, r3
   188e0:	e000      	b.n	188e4 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   188e2:	2300      	movs	r3, #0
}
   188e4:	0018      	movs	r0, r3
   188e6:	46bd      	mov	sp, r7
   188e8:	b004      	add	sp, #16
   188ea:	bd80      	pop	{r7, pc}
   188ec:	41004400 	.word	0x41004400

000188f0 <adc_is_syncing>:
 * \retval true if the module synchronization is ongoing
 * \retval false if the module has completed synchronization
 */
static inline bool adc_is_syncing(
	struct adc_module *const module_inst)
{
   188f0:	b580      	push	{r7, lr}
   188f2:	b084      	sub	sp, #16
   188f4:	af00      	add	r7, sp, #0
   188f6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
   188f8:	687b      	ldr	r3, [r7, #4]
   188fa:	681b      	ldr	r3, [r3, #0]
   188fc:	60fb      	str	r3, [r7, #12]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
   188fe:	68fb      	ldr	r3, [r7, #12]
   18900:	7e5b      	ldrb	r3, [r3, #25]
   18902:	b2db      	uxtb	r3, r3
   18904:	b25b      	sxtb	r3, r3
   18906:	2b00      	cmp	r3, #0
   18908:	da01      	bge.n	1890e <adc_is_syncing+0x1e>
		return true;
   1890a:	2301      	movs	r3, #1
   1890c:	e000      	b.n	18910 <adc_is_syncing+0x20>
	}

	return false;
   1890e:	2300      	movs	r3, #0
}
   18910:	0018      	movs	r0, r3
   18912:	46bd      	mov	sp, r7
   18914:	b004      	add	sp, #16
   18916:	bd80      	pop	{r7, pc}

00018918 <adc_get_status>:
 *                                  window range
 * \retval ADC_STATUS_OVERRUN       ADC result has overrun
 */
static inline uint32_t adc_get_status(
		struct adc_module *const module_inst)
{
   18918:	b580      	push	{r7, lr}
   1891a:	b086      	sub	sp, #24
   1891c:	af00      	add	r7, sp, #0
   1891e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
   18920:	687b      	ldr	r3, [r7, #4]
   18922:	681b      	ldr	r3, [r3, #0]
   18924:	613b      	str	r3, [r7, #16]

	uint32_t int_flags = adc_module->INTFLAG.reg;
   18926:	693b      	ldr	r3, [r7, #16]
   18928:	7e1b      	ldrb	r3, [r3, #24]
   1892a:	b2db      	uxtb	r3, r3
   1892c:	60fb      	str	r3, [r7, #12]

	uint32_t status_flags = 0;
   1892e:	2300      	movs	r3, #0
   18930:	617b      	str	r3, [r7, #20]

	/* Check for ADC Result Ready */
	if (int_flags & ADC_INTFLAG_RESRDY) {
   18932:	68fb      	ldr	r3, [r7, #12]
   18934:	2201      	movs	r2, #1
   18936:	4013      	ands	r3, r2
   18938:	d003      	beq.n	18942 <adc_get_status+0x2a>
		status_flags |= ADC_STATUS_RESULT_READY;
   1893a:	697b      	ldr	r3, [r7, #20]
   1893c:	2201      	movs	r2, #1
   1893e:	4313      	orrs	r3, r2
   18940:	617b      	str	r3, [r7, #20]
	}

	/* Check for ADC Window Match */
	if (int_flags & ADC_INTFLAG_WINMON) {
   18942:	68fb      	ldr	r3, [r7, #12]
   18944:	2204      	movs	r2, #4
   18946:	4013      	ands	r3, r2
   18948:	d003      	beq.n	18952 <adc_get_status+0x3a>
		status_flags |= ADC_STATUS_WINDOW;
   1894a:	697b      	ldr	r3, [r7, #20]
   1894c:	2202      	movs	r2, #2
   1894e:	4313      	orrs	r3, r2
   18950:	617b      	str	r3, [r7, #20]
	}

	/* Check for ADC Overrun */
	if (int_flags & ADC_INTFLAG_OVERRUN) {
   18952:	68fb      	ldr	r3, [r7, #12]
   18954:	2202      	movs	r2, #2
   18956:	4013      	ands	r3, r2
   18958:	d003      	beq.n	18962 <adc_get_status+0x4a>
		status_flags |= ADC_STATUS_OVERRUN;
   1895a:	697b      	ldr	r3, [r7, #20]
   1895c:	2204      	movs	r2, #4
   1895e:	4313      	orrs	r3, r2
   18960:	617b      	str	r3, [r7, #20]
	}

	return status_flags;
   18962:	697b      	ldr	r3, [r7, #20]
}
   18964:	0018      	movs	r0, r3
   18966:	46bd      	mov	sp, r7
   18968:	b006      	add	sp, #24
   1896a:	bd80      	pop	{r7, pc}

0001896c <adc_clear_status>:
 * \param[in] status_flags  Bitmask of \c ADC_STATUS_* flags to clear
 */
static inline void adc_clear_status(
		struct adc_module *const module_inst,
		const uint32_t status_flags)
{
   1896c:	b580      	push	{r7, lr}
   1896e:	b084      	sub	sp, #16
   18970:	af00      	add	r7, sp, #0
   18972:	6078      	str	r0, [r7, #4]
   18974:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
   18976:	687b      	ldr	r3, [r7, #4]
   18978:	681b      	ldr	r3, [r3, #0]
   1897a:	60bb      	str	r3, [r7, #8]

	uint32_t int_flags = 0;
   1897c:	2300      	movs	r3, #0
   1897e:	60fb      	str	r3, [r7, #12]

	/* Check for ADC Result Ready */
	if (status_flags & ADC_STATUS_RESULT_READY) {
   18980:	683b      	ldr	r3, [r7, #0]
   18982:	2201      	movs	r2, #1
   18984:	4013      	ands	r3, r2
   18986:	d003      	beq.n	18990 <adc_clear_status+0x24>
		int_flags |= ADC_INTFLAG_RESRDY;
   18988:	68fb      	ldr	r3, [r7, #12]
   1898a:	2201      	movs	r2, #1
   1898c:	4313      	orrs	r3, r2
   1898e:	60fb      	str	r3, [r7, #12]
	}

	/* Check for ADC Window Match */
	if (status_flags & ADC_STATUS_WINDOW) {
   18990:	683b      	ldr	r3, [r7, #0]
   18992:	2202      	movs	r2, #2
   18994:	4013      	ands	r3, r2
   18996:	d003      	beq.n	189a0 <adc_clear_status+0x34>
		int_flags |= ADC_INTFLAG_WINMON;
   18998:	68fb      	ldr	r3, [r7, #12]
   1899a:	2204      	movs	r2, #4
   1899c:	4313      	orrs	r3, r2
   1899e:	60fb      	str	r3, [r7, #12]
	}

	/* Check for ADC Overrun */
	if (status_flags & ADC_STATUS_OVERRUN) {
   189a0:	683b      	ldr	r3, [r7, #0]
   189a2:	2204      	movs	r2, #4
   189a4:	4013      	ands	r3, r2
   189a6:	d003      	beq.n	189b0 <adc_clear_status+0x44>
		int_flags |= ADC_INTFLAG_OVERRUN;
   189a8:	68fb      	ldr	r3, [r7, #12]
   189aa:	2202      	movs	r2, #2
   189ac:	4313      	orrs	r3, r2
   189ae:	60fb      	str	r3, [r7, #12]
	}

	/* Clear interrupt flag */
	adc_module->INTFLAG.reg = int_flags;
   189b0:	68fb      	ldr	r3, [r7, #12]
   189b2:	b2da      	uxtb	r2, r3
   189b4:	68bb      	ldr	r3, [r7, #8]
   189b6:	761a      	strb	r2, [r3, #24]
}
   189b8:	46c0      	nop			; (mov r8, r8)
   189ba:	46bd      	mov	sp, r7
   189bc:	b004      	add	sp, #16
   189be:	bd80      	pop	{r7, pc}

000189c0 <adc_enable>:
 *
 * \param[in] module_inst  Pointer to the ADC software instance struct
 */
static inline enum status_code adc_enable(
		struct adc_module *const module_inst)
{
   189c0:	b580      	push	{r7, lr}
   189c2:	b084      	sub	sp, #16
   189c4:	af00      	add	r7, sp, #0
   189c6:	6078      	str	r0, [r7, #4]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
   189c8:	687b      	ldr	r3, [r7, #4]
   189ca:	681b      	ldr	r3, [r3, #0]
   189cc:	60fb      	str	r3, [r7, #12]

	while (adc_is_syncing(module_inst)) {
   189ce:	46c0      	nop			; (mov r8, r8)
   189d0:	687b      	ldr	r3, [r7, #4]
   189d2:	0018      	movs	r0, r3
   189d4:	4b10      	ldr	r3, [pc, #64]	; (18a18 <adc_enable+0x58>)
   189d6:	4798      	blx	r3
   189d8:	1e03      	subs	r3, r0, #0
   189da:	d1f9      	bne.n	189d0 <adc_enable+0x10>
	system_interrupt_enable(_adc_interrupt_get_interrupt_vector(
			_adc_get_inst_index(adc_module)));
#   elif (SAMC20)
		system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_ADC0);
#	else
		system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_ADC);
   189dc:	2017      	movs	r0, #23
   189de:	4b0f      	ldr	r3, [pc, #60]	; (18a1c <adc_enable+0x5c>)
   189e0:	4798      	blx	r3
#   endif
#endif

	/* Disbale interrupt */
	adc_module->INTENCLR.reg = ADC_INTENCLR_MASK;
   189e2:	68fb      	ldr	r3, [r7, #12]
   189e4:	220f      	movs	r2, #15
   189e6:	759a      	strb	r2, [r3, #22]
	/* Clear interrupt flag */
	adc_module->INTFLAG.reg = ADC_INTFLAG_MASK;
   189e8:	68fb      	ldr	r3, [r7, #12]
   189ea:	220f      	movs	r2, #15
   189ec:	761a      	strb	r2, [r3, #24]

	adc_module->CTRLA.reg |= ADC_CTRLA_ENABLE;
   189ee:	68fb      	ldr	r3, [r7, #12]
   189f0:	781b      	ldrb	r3, [r3, #0]
   189f2:	b2db      	uxtb	r3, r3
   189f4:	2202      	movs	r2, #2
   189f6:	4313      	orrs	r3, r2
   189f8:	b2da      	uxtb	r2, r3
   189fa:	68fb      	ldr	r3, [r7, #12]
   189fc:	701a      	strb	r2, [r3, #0]

	while (adc_is_syncing(module_inst)) {
   189fe:	46c0      	nop			; (mov r8, r8)
   18a00:	687b      	ldr	r3, [r7, #4]
   18a02:	0018      	movs	r0, r3
   18a04:	4b04      	ldr	r3, [pc, #16]	; (18a18 <adc_enable+0x58>)
   18a06:	4798      	blx	r3
   18a08:	1e03      	subs	r3, r0, #0
   18a0a:	d1f9      	bne.n	18a00 <adc_enable+0x40>
		/* Wait for synchronization */
	}
	return STATUS_OK;
   18a0c:	2300      	movs	r3, #0
}
   18a0e:	0018      	movs	r0, r3
   18a10:	46bd      	mov	sp, r7
   18a12:	b004      	add	sp, #16
   18a14:	bd80      	pop	{r7, pc}
   18a16:	46c0      	nop			; (mov r8, r8)
   18a18:	000188f1 	.word	0x000188f1
   18a1c:	000187e9 	.word	0x000187e9

00018a20 <adc_start_conversion>:
 *
 * \param[in] module_inst  Pointer to the ADC software instance struct
 */
static inline void adc_start_conversion(
		struct adc_module *const module_inst)
{
   18a20:	b580      	push	{r7, lr}
   18a22:	b084      	sub	sp, #16
   18a24:	af00      	add	r7, sp, #0
   18a26:	6078      	str	r0, [r7, #4]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
   18a28:	687b      	ldr	r3, [r7, #4]
   18a2a:	681b      	ldr	r3, [r3, #0]
   18a2c:	60fb      	str	r3, [r7, #12]

	while (adc_is_syncing(module_inst)) {
   18a2e:	46c0      	nop			; (mov r8, r8)
   18a30:	687b      	ldr	r3, [r7, #4]
   18a32:	0018      	movs	r0, r3
   18a34:	4b0b      	ldr	r3, [pc, #44]	; (18a64 <adc_start_conversion+0x44>)
   18a36:	4798      	blx	r3
   18a38:	1e03      	subs	r3, r0, #0
   18a3a:	d1f9      	bne.n	18a30 <adc_start_conversion+0x10>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
   18a3c:	68fb      	ldr	r3, [r7, #12]
   18a3e:	7b1b      	ldrb	r3, [r3, #12]
   18a40:	b2db      	uxtb	r3, r3
   18a42:	2202      	movs	r2, #2
   18a44:	4313      	orrs	r3, r2
   18a46:	b2da      	uxtb	r2, r3
   18a48:	68fb      	ldr	r3, [r7, #12]
   18a4a:	731a      	strb	r2, [r3, #12]

	while (adc_is_syncing(module_inst)) {
   18a4c:	46c0      	nop			; (mov r8, r8)
   18a4e:	687b      	ldr	r3, [r7, #4]
   18a50:	0018      	movs	r0, r3
   18a52:	4b04      	ldr	r3, [pc, #16]	; (18a64 <adc_start_conversion+0x44>)
   18a54:	4798      	blx	r3
   18a56:	1e03      	subs	r3, r0, #0
   18a58:	d1f9      	bne.n	18a4e <adc_start_conversion+0x2e>
		/* Wait for synchronization */
	}
}
   18a5a:	46c0      	nop			; (mov r8, r8)
   18a5c:	46bd      	mov	sp, r7
   18a5e:	b004      	add	sp, #16
   18a60:	bd80      	pop	{r7, pc}
   18a62:	46c0      	nop			; (mov r8, r8)
   18a64:	000188f1 	.word	0x000188f1

00018a68 <adc_read>:
 *                             ADC module before the result was read by the software
 */
static inline enum status_code adc_read(
		struct adc_module *const module_inst,
		uint16_t *result)
{
   18a68:	b580      	push	{r7, lr}
   18a6a:	b084      	sub	sp, #16
   18a6c:	af00      	add	r7, sp, #0
   18a6e:	6078      	str	r0, [r7, #4]
   18a70:	6039      	str	r1, [r7, #0]
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(result);

	if (!(adc_get_status(module_inst) & ADC_STATUS_RESULT_READY)) {
   18a72:	687b      	ldr	r3, [r7, #4]
   18a74:	0018      	movs	r0, r3
   18a76:	4b18      	ldr	r3, [pc, #96]	; (18ad8 <adc_read+0x70>)
   18a78:	4798      	blx	r3
   18a7a:	0002      	movs	r2, r0
   18a7c:	2301      	movs	r3, #1
   18a7e:	4013      	ands	r3, r2
   18a80:	d101      	bne.n	18a86 <adc_read+0x1e>
		/* Result not ready */
		return STATUS_BUSY;
   18a82:	2305      	movs	r3, #5
   18a84:	e023      	b.n	18ace <adc_read+0x66>
	}

	Adc *const adc_module = module_inst->hw;
   18a86:	687b      	ldr	r3, [r7, #4]
   18a88:	681b      	ldr	r3, [r3, #0]
   18a8a:	60fb      	str	r3, [r7, #12]

#if (SAMD) || (SAMHA1) || (SAMHA0) || (SAMR21)
	while (adc_is_syncing(module_inst)) {
   18a8c:	46c0      	nop			; (mov r8, r8)
   18a8e:	687b      	ldr	r3, [r7, #4]
   18a90:	0018      	movs	r0, r3
   18a92:	4b12      	ldr	r3, [pc, #72]	; (18adc <adc_read+0x74>)
   18a94:	4798      	blx	r3
   18a96:	1e03      	subs	r3, r0, #0
   18a98:	d1f9      	bne.n	18a8e <adc_read+0x26>
		/* Wait for synchronization */
	}
#endif

	/* Get ADC result */
	*result = adc_module->RESULT.reg;
   18a9a:	68fb      	ldr	r3, [r7, #12]
   18a9c:	8b5b      	ldrh	r3, [r3, #26]
   18a9e:	b29a      	uxth	r2, r3
   18aa0:	683b      	ldr	r3, [r7, #0]
   18aa2:	801a      	strh	r2, [r3, #0]

	/* Reset ready flag */
	adc_clear_status(module_inst, ADC_STATUS_RESULT_READY);
   18aa4:	687b      	ldr	r3, [r7, #4]
   18aa6:	2101      	movs	r1, #1
   18aa8:	0018      	movs	r0, r3
   18aaa:	4b0d      	ldr	r3, [pc, #52]	; (18ae0 <adc_read+0x78>)
   18aac:	4798      	blx	r3

	if (adc_get_status(module_inst) & ADC_STATUS_OVERRUN) {
   18aae:	687b      	ldr	r3, [r7, #4]
   18ab0:	0018      	movs	r0, r3
   18ab2:	4b09      	ldr	r3, [pc, #36]	; (18ad8 <adc_read+0x70>)
   18ab4:	4798      	blx	r3
   18ab6:	0002      	movs	r2, r0
   18ab8:	2304      	movs	r3, #4
   18aba:	4013      	ands	r3, r2
   18abc:	d006      	beq.n	18acc <adc_read+0x64>
		adc_clear_status(module_inst, ADC_STATUS_OVERRUN);
   18abe:	687b      	ldr	r3, [r7, #4]
   18ac0:	2104      	movs	r1, #4
   18ac2:	0018      	movs	r0, r3
   18ac4:	4b06      	ldr	r3, [pc, #24]	; (18ae0 <adc_read+0x78>)
   18ac6:	4798      	blx	r3
		return STATUS_ERR_OVERFLOW;
   18ac8:	231e      	movs	r3, #30
   18aca:	e000      	b.n	18ace <adc_read+0x66>
	}

	return STATUS_OK;
   18acc:	2300      	movs	r3, #0
}
   18ace:	0018      	movs	r0, r3
   18ad0:	46bd      	mov	sp, r7
   18ad2:	b004      	add	sp, #16
   18ad4:	bd80      	pop	{r7, pc}
   18ad6:	46c0      	nop			; (mov r8, r8)
   18ad8:	00018919 	.word	0x00018919
   18adc:	000188f1 	.word	0x000188f1
   18ae0:	0001896d 	.word	0x0001896d

00018ae4 <adc_set_positive_input>:
 * \param[in] positive_input  Positive input pin
 */
static inline void adc_set_positive_input(
		struct adc_module *const module_inst,
		const enum adc_positive_input positive_input)
{
   18ae4:	b580      	push	{r7, lr}
   18ae6:	b084      	sub	sp, #16
   18ae8:	af00      	add	r7, sp, #0
   18aea:	6078      	str	r0, [r7, #4]
   18aec:	000a      	movs	r2, r1
   18aee:	1cfb      	adds	r3, r7, #3
   18af0:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
   18af2:	687b      	ldr	r3, [r7, #4]
   18af4:	681b      	ldr	r3, [r3, #0]
   18af6:	60fb      	str	r3, [r7, #12]

	while (adc_is_syncing(module_inst)) {
   18af8:	46c0      	nop			; (mov r8, r8)
   18afa:	687b      	ldr	r3, [r7, #4]
   18afc:	0018      	movs	r0, r3
   18afe:	4b0c      	ldr	r3, [pc, #48]	; (18b30 <adc_set_positive_input+0x4c>)
   18b00:	4798      	blx	r3
   18b02:	1e03      	subs	r3, r0, #0
   18b04:	d1f9      	bne.n	18afa <adc_set_positive_input+0x16>
		/* Wait for synchronization */
	}

	/* Set positive input pin */
	adc_module->INPUTCTRL.reg =
			(adc_module->INPUTCTRL.reg & ~ADC_INPUTCTRL_MUXPOS_Msk) |
   18b06:	68fb      	ldr	r3, [r7, #12]
   18b08:	691b      	ldr	r3, [r3, #16]
   18b0a:	221f      	movs	r2, #31
   18b0c:	4393      	bics	r3, r2
   18b0e:	001a      	movs	r2, r3
   18b10:	1cfb      	adds	r3, r7, #3
   18b12:	781b      	ldrb	r3, [r3, #0]
   18b14:	431a      	orrs	r2, r3
	adc_module->INPUTCTRL.reg =
   18b16:	68fb      	ldr	r3, [r7, #12]
   18b18:	611a      	str	r2, [r3, #16]
			(positive_input);

	while (adc_is_syncing(module_inst)) {
   18b1a:	46c0      	nop			; (mov r8, r8)
   18b1c:	687b      	ldr	r3, [r7, #4]
   18b1e:	0018      	movs	r0, r3
   18b20:	4b03      	ldr	r3, [pc, #12]	; (18b30 <adc_set_positive_input+0x4c>)
   18b22:	4798      	blx	r3
   18b24:	1e03      	subs	r3, r0, #0
   18b26:	d1f9      	bne.n	18b1c <adc_set_positive_input+0x38>
		/* Wait for synchronization */
	}
}
   18b28:	46c0      	nop			; (mov r8, r8)
   18b2a:	46bd      	mov	sp, r7
   18b2c:	b004      	add	sp, #16
   18b2e:	bd80      	pop	{r7, pc}
   18b30:	000188f1 	.word	0x000188f1

00018b34 <adc_enable_interrupt>:
 * \param[in] module_inst Pointer to the ADC software instance struct
 * \param[in] interrupt Interrupt to enable
 */
static inline void adc_enable_interrupt(struct adc_module *const module_inst,
		enum adc_interrupt_flag interrupt)
{
   18b34:	b580      	push	{r7, lr}
   18b36:	b084      	sub	sp, #16
   18b38:	af00      	add	r7, sp, #0
   18b3a:	6078      	str	r0, [r7, #4]
   18b3c:	000a      	movs	r2, r1
   18b3e:	1cfb      	adds	r3, r7, #3
   18b40:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
   18b42:	687b      	ldr	r3, [r7, #4]
   18b44:	681b      	ldr	r3, [r3, #0]
   18b46:	60fb      	str	r3, [r7, #12]
	/* Enable interrupt */
	adc_module->INTENSET.reg = interrupt;
   18b48:	68fb      	ldr	r3, [r7, #12]
   18b4a:	1cfa      	adds	r2, r7, #3
   18b4c:	7812      	ldrb	r2, [r2, #0]
   18b4e:	75da      	strb	r2, [r3, #23]
}
   18b50:	46c0      	nop			; (mov r8, r8)
   18b52:	46bd      	mov	sp, r7
   18b54:	b004      	add	sp, #16
   18b56:	bd80      	pop	{r7, pc}

00018b58 <adc_enable_callback>:
 *
 */
static inline void adc_enable_callback(
		struct adc_module *const module,
		enum adc_callback callback_type)
{
   18b58:	b580      	push	{r7, lr}
   18b5a:	b082      	sub	sp, #8
   18b5c:	af00      	add	r7, sp, #0
   18b5e:	6078      	str	r0, [r7, #4]
   18b60:	000a      	movs	r2, r1
   18b62:	1cfb      	adds	r3, r7, #3
   18b64:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->enabled_callback_mask |= (1 << callback_type);
   18b66:	687b      	ldr	r3, [r7, #4]
   18b68:	7edb      	ldrb	r3, [r3, #27]
   18b6a:	b25a      	sxtb	r2, r3
   18b6c:	1cfb      	adds	r3, r7, #3
   18b6e:	781b      	ldrb	r3, [r3, #0]
   18b70:	2101      	movs	r1, #1
   18b72:	4099      	lsls	r1, r3
   18b74:	000b      	movs	r3, r1
   18b76:	b25b      	sxtb	r3, r3
   18b78:	4313      	orrs	r3, r2
   18b7a:	b25b      	sxtb	r3, r3
   18b7c:	b2da      	uxtb	r2, r3
   18b7e:	687b      	ldr	r3, [r7, #4]
   18b80:	76da      	strb	r2, [r3, #27]

	/* Enable window interrupt if this is a window callback */
	if (callback_type == ADC_CALLBACK_WINDOW) {
   18b82:	1cfb      	adds	r3, r7, #3
   18b84:	781b      	ldrb	r3, [r3, #0]
   18b86:	2b01      	cmp	r3, #1
   18b88:	d104      	bne.n	18b94 <adc_enable_callback+0x3c>
		adc_enable_interrupt(module, ADC_INTERRUPT_WINDOW);
   18b8a:	687b      	ldr	r3, [r7, #4]
   18b8c:	2104      	movs	r1, #4
   18b8e:	0018      	movs	r0, r3
   18b90:	4b07      	ldr	r3, [pc, #28]	; (18bb0 <adc_enable_callback+0x58>)
   18b92:	4798      	blx	r3
	}
	/* Enable overrun interrupt if error callback is registered */
	if (callback_type == ADC_CALLBACK_ERROR) {
   18b94:	1cfb      	adds	r3, r7, #3
   18b96:	781b      	ldrb	r3, [r3, #0]
   18b98:	2b02      	cmp	r3, #2
   18b9a:	d104      	bne.n	18ba6 <adc_enable_callback+0x4e>
		adc_enable_interrupt(module, ADC_INTERRUPT_OVERRUN);
   18b9c:	687b      	ldr	r3, [r7, #4]
   18b9e:	2102      	movs	r1, #2
   18ba0:	0018      	movs	r0, r3
   18ba2:	4b03      	ldr	r3, [pc, #12]	; (18bb0 <adc_enable_callback+0x58>)
   18ba4:	4798      	blx	r3
	}
}
   18ba6:	46c0      	nop			; (mov r8, r8)
   18ba8:	46bd      	mov	sp, r7
   18baa:	b002      	add	sp, #8
   18bac:	bd80      	pop	{r7, pc}
   18bae:	46c0      	nop			; (mov r8, r8)
   18bb0:	00018b35 	.word	0x00018b35

00018bb4 <port_get_group_from_gpio_pin>:
{
   18bb4:	b580      	push	{r7, lr}
   18bb6:	b082      	sub	sp, #8
   18bb8:	af00      	add	r7, sp, #0
   18bba:	0002      	movs	r2, r0
   18bbc:	1dfb      	adds	r3, r7, #7
   18bbe:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   18bc0:	1dfb      	adds	r3, r7, #7
   18bc2:	781b      	ldrb	r3, [r3, #0]
   18bc4:	0018      	movs	r0, r3
   18bc6:	4b03      	ldr	r3, [pc, #12]	; (18bd4 <port_get_group_from_gpio_pin+0x20>)
   18bc8:	4798      	blx	r3
   18bca:	0003      	movs	r3, r0
}
   18bcc:	0018      	movs	r0, r3
   18bce:	46bd      	mov	sp, r7
   18bd0:	b002      	add	sp, #8
   18bd2:	bd80      	pop	{r7, pc}
   18bd4:	00018891 	.word	0x00018891

00018bd8 <port_get_config_defaults>:
{
   18bd8:	b580      	push	{r7, lr}
   18bda:	b082      	sub	sp, #8
   18bdc:	af00      	add	r7, sp, #0
   18bde:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
   18be0:	687b      	ldr	r3, [r7, #4]
   18be2:	2200      	movs	r2, #0
   18be4:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   18be6:	687b      	ldr	r3, [r7, #4]
   18be8:	2201      	movs	r2, #1
   18bea:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
   18bec:	687b      	ldr	r3, [r7, #4]
   18bee:	2200      	movs	r2, #0
   18bf0:	709a      	strb	r2, [r3, #2]
}
   18bf2:	46c0      	nop			; (mov r8, r8)
   18bf4:	46bd      	mov	sp, r7
   18bf6:	b002      	add	sp, #8
   18bf8:	bd80      	pop	{r7, pc}
	...

00018bfc <port_pin_get_input_level>:
{
   18bfc:	b580      	push	{r7, lr}
   18bfe:	b084      	sub	sp, #16
   18c00:	af00      	add	r7, sp, #0
   18c02:	0002      	movs	r2, r0
   18c04:	1dfb      	adds	r3, r7, #7
   18c06:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   18c08:	1dfb      	adds	r3, r7, #7
   18c0a:	781b      	ldrb	r3, [r3, #0]
   18c0c:	0018      	movs	r0, r3
   18c0e:	4b0b      	ldr	r3, [pc, #44]	; (18c3c <port_pin_get_input_level+0x40>)
   18c10:	4798      	blx	r3
   18c12:	0003      	movs	r3, r0
   18c14:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   18c16:	1dfb      	adds	r3, r7, #7
   18c18:	781b      	ldrb	r3, [r3, #0]
   18c1a:	221f      	movs	r2, #31
   18c1c:	4013      	ands	r3, r2
   18c1e:	2201      	movs	r2, #1
   18c20:	409a      	lsls	r2, r3
   18c22:	0013      	movs	r3, r2
   18c24:	60bb      	str	r3, [r7, #8]
	return (port_base->IN.reg & pin_mask);
   18c26:	68fb      	ldr	r3, [r7, #12]
   18c28:	6a1b      	ldr	r3, [r3, #32]
   18c2a:	68ba      	ldr	r2, [r7, #8]
   18c2c:	4013      	ands	r3, r2
   18c2e:	1e5a      	subs	r2, r3, #1
   18c30:	4193      	sbcs	r3, r2
   18c32:	b2db      	uxtb	r3, r3
}
   18c34:	0018      	movs	r0, r3
   18c36:	46bd      	mov	sp, r7
   18c38:	b004      	add	sp, #16
   18c3a:	bd80      	pop	{r7, pc}
   18c3c:	00018bb5 	.word	0x00018bb5

00018c40 <port_pin_set_output_level>:
{
   18c40:	b580      	push	{r7, lr}
   18c42:	b084      	sub	sp, #16
   18c44:	af00      	add	r7, sp, #0
   18c46:	0002      	movs	r2, r0
   18c48:	1dfb      	adds	r3, r7, #7
   18c4a:	701a      	strb	r2, [r3, #0]
   18c4c:	1dbb      	adds	r3, r7, #6
   18c4e:	1c0a      	adds	r2, r1, #0
   18c50:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   18c52:	1dfb      	adds	r3, r7, #7
   18c54:	781b      	ldrb	r3, [r3, #0]
   18c56:	0018      	movs	r0, r3
   18c58:	4b0d      	ldr	r3, [pc, #52]	; (18c90 <port_pin_set_output_level+0x50>)
   18c5a:	4798      	blx	r3
   18c5c:	0003      	movs	r3, r0
   18c5e:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   18c60:	1dfb      	adds	r3, r7, #7
   18c62:	781b      	ldrb	r3, [r3, #0]
   18c64:	221f      	movs	r2, #31
   18c66:	4013      	ands	r3, r2
   18c68:	2201      	movs	r2, #1
   18c6a:	409a      	lsls	r2, r3
   18c6c:	0013      	movs	r3, r2
   18c6e:	60bb      	str	r3, [r7, #8]
	if (level) {
   18c70:	1dbb      	adds	r3, r7, #6
   18c72:	781b      	ldrb	r3, [r3, #0]
   18c74:	2b00      	cmp	r3, #0
   18c76:	d003      	beq.n	18c80 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   18c78:	68fb      	ldr	r3, [r7, #12]
   18c7a:	68ba      	ldr	r2, [r7, #8]
   18c7c:	619a      	str	r2, [r3, #24]
}
   18c7e:	e002      	b.n	18c86 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   18c80:	68fb      	ldr	r3, [r7, #12]
   18c82:	68ba      	ldr	r2, [r7, #8]
   18c84:	615a      	str	r2, [r3, #20]
}
   18c86:	46c0      	nop			; (mov r8, r8)
   18c88:	46bd      	mov	sp, r7
   18c8a:	b004      	add	sp, #16
   18c8c:	bd80      	pop	{r7, pc}
   18c8e:	46c0      	nop			; (mov r8, r8)
   18c90:	00018bb5 	.word	0x00018bb5

00018c94 <_extint_get_eic_from_channel>:
 *
 * \return Base address of the associated EIC module.
 */
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
   18c94:	b580      	push	{r7, lr}
   18c96:	b084      	sub	sp, #16
   18c98:	af00      	add	r7, sp, #0
   18c9a:	0002      	movs	r2, r0
   18c9c:	1dfb      	adds	r3, r7, #7
   18c9e:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
   18ca0:	230f      	movs	r3, #15
   18ca2:	18fb      	adds	r3, r7, r3
   18ca4:	1dfa      	adds	r2, r7, #7
   18ca6:	7812      	ldrb	r2, [r2, #0]
   18ca8:	0952      	lsrs	r2, r2, #5
   18caa:	701a      	strb	r2, [r3, #0]

	if (eic_index < EIC_INST_NUM) {
   18cac:	230f      	movs	r3, #15
   18cae:	18fb      	adds	r3, r7, r3
   18cb0:	781b      	ldrb	r3, [r3, #0]
   18cb2:	2b00      	cmp	r3, #0
   18cb4:	d10c      	bne.n	18cd0 <_extint_get_eic_from_channel+0x3c>
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   18cb6:	4b09      	ldr	r3, [pc, #36]	; (18cdc <_extint_get_eic_from_channel+0x48>)
   18cb8:	60bb      	str	r3, [r7, #8]

		return eics[eic_index];
   18cba:	230f      	movs	r3, #15
   18cbc:	18fb      	adds	r3, r7, r3
   18cbe:	781b      	ldrb	r3, [r3, #0]
   18cc0:	009b      	lsls	r3, r3, #2
   18cc2:	2210      	movs	r2, #16
   18cc4:	4694      	mov	ip, r2
   18cc6:	44bc      	add	ip, r7
   18cc8:	4463      	add	r3, ip
   18cca:	3b08      	subs	r3, #8
   18ccc:	681b      	ldr	r3, [r3, #0]
   18cce:	e000      	b.n	18cd2 <_extint_get_eic_from_channel+0x3e>
	} else {
		Assert(false);
		return NULL;
   18cd0:	2300      	movs	r3, #0
	}
}
   18cd2:	0018      	movs	r0, r3
   18cd4:	46bd      	mov	sp, r7
   18cd6:	b004      	add	sp, #16
   18cd8:	bd80      	pop	{r7, pc}
   18cda:	46c0      	nop			; (mov r8, r8)
   18cdc:	40001800 	.word	0x40001800

00018ce0 <extint_chan_clear_detected>:
 *
 *  \param[in] channel  External Interrupt channel index to check
 */
static inline void extint_chan_clear_detected(
		const uint8_t channel)
{
   18ce0:	b580      	push	{r7, lr}
   18ce2:	b084      	sub	sp, #16
   18ce4:	af00      	add	r7, sp, #0
   18ce6:	0002      	movs	r2, r0
   18ce8:	1dfb      	adds	r3, r7, #7
   18cea:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
   18cec:	1dfb      	adds	r3, r7, #7
   18cee:	781b      	ldrb	r3, [r3, #0]
   18cf0:	0018      	movs	r0, r3
   18cf2:	4b09      	ldr	r3, [pc, #36]	; (18d18 <extint_chan_clear_detected+0x38>)
   18cf4:	4798      	blx	r3
   18cf6:	0003      	movs	r3, r0
   18cf8:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
   18cfa:	1dfb      	adds	r3, r7, #7
   18cfc:	781b      	ldrb	r3, [r3, #0]
   18cfe:	221f      	movs	r2, #31
   18d00:	4013      	ands	r3, r2
   18d02:	2201      	movs	r2, #1
   18d04:	409a      	lsls	r2, r3
   18d06:	0013      	movs	r3, r2
   18d08:	60bb      	str	r3, [r7, #8]

	eic_module->INTFLAG.reg = eic_mask;
   18d0a:	68fb      	ldr	r3, [r7, #12]
   18d0c:	68ba      	ldr	r2, [r7, #8]
   18d0e:	611a      	str	r2, [r3, #16]
}
   18d10:	46c0      	nop			; (mov r8, r8)
   18d12:	46bd      	mov	sp, r7
   18d14:	b004      	add	sp, #16
   18d16:	bd80      	pop	{r7, pc}
   18d18:	00018c95 	.word	0x00018c95

00018d1c <rtc_count_get_config_defaults>:
 *  \param[out] config  Configuration structure to be initialized to default
 *                      values
 */
static inline void rtc_count_get_config_defaults(
		struct rtc_count_config *const config)
{
   18d1c:	b580      	push	{r7, lr}
   18d1e:	b084      	sub	sp, #16
   18d20:	af00      	add	r7, sp, #0
   18d22:	6078      	str	r0, [r7, #4]
	/* Sanity check argument */
	Assert(config);

	/* Set default into configuration structure */
	config->prescaler           = RTC_COUNT_PRESCALER_DIV_1024;
   18d24:	687b      	ldr	r3, [r7, #4]
   18d26:	22a0      	movs	r2, #160	; 0xa0
   18d28:	0112      	lsls	r2, r2, #4
   18d2a:	801a      	strh	r2, [r3, #0]
	config->mode                = RTC_COUNT_MODE_32BIT;
   18d2c:	687b      	ldr	r3, [r7, #4]
   18d2e:	2201      	movs	r2, #1
   18d30:	709a      	strb	r2, [r3, #2]
	config->clear_on_match      = false;
   18d32:	687b      	ldr	r3, [r7, #4]
   18d34:	2200      	movs	r2, #0
   18d36:	70da      	strb	r2, [r3, #3]

#ifdef FEATURE_RTC_CONTINUOUSLY_UPDATED
	config->continuously_update = false;
   18d38:	687b      	ldr	r3, [r7, #4]
   18d3a:	2200      	movs	r2, #0
   18d3c:	711a      	strb	r2, [r3, #4]
#endif
#if (SAML21XXXB) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30) || (SAMR34) || (SAMR35)
	config->enable_read_sync    = true;
#endif

	for (uint8_t i = 0; i < RTC_NUM_OF_COMP16; i++) {
   18d3e:	230f      	movs	r3, #15
   18d40:	18fb      	adds	r3, r7, r3
   18d42:	2200      	movs	r2, #0
   18d44:	701a      	strb	r2, [r3, #0]
   18d46:	e00e      	b.n	18d66 <rtc_count_get_config_defaults+0x4a>
		config->compare_values[i] = 0;
   18d48:	230f      	movs	r3, #15
   18d4a:	18fb      	adds	r3, r7, r3
   18d4c:	781a      	ldrb	r2, [r3, #0]
   18d4e:	687b      	ldr	r3, [r7, #4]
   18d50:	3202      	adds	r2, #2
   18d52:	0092      	lsls	r2, r2, #2
   18d54:	2100      	movs	r1, #0
   18d56:	50d1      	str	r1, [r2, r3]
	for (uint8_t i = 0; i < RTC_NUM_OF_COMP16; i++) {
   18d58:	230f      	movs	r3, #15
   18d5a:	18fb      	adds	r3, r7, r3
   18d5c:	781a      	ldrb	r2, [r3, #0]
   18d5e:	230f      	movs	r3, #15
   18d60:	18fb      	adds	r3, r7, r3
   18d62:	3201      	adds	r2, #1
   18d64:	701a      	strb	r2, [r3, #0]
   18d66:	230f      	movs	r3, #15
   18d68:	18fb      	adds	r3, r7, r3
   18d6a:	781b      	ldrb	r3, [r3, #0]
   18d6c:	2b01      	cmp	r3, #1
   18d6e:	d9eb      	bls.n	18d48 <rtc_count_get_config_defaults+0x2c>
	}
}
   18d70:	46c0      	nop			; (mov r8, r8)
   18d72:	46bd      	mov	sp, r7
   18d74:	b004      	add	sp, #16
   18d76:	bd80      	pop	{r7, pc}

00018d78 <rtc_count_enable_events>:
 *  \param[in] events    Struct containing flags of events to enable
 */
static inline void rtc_count_enable_events(
		struct rtc_module *const module,
		struct rtc_count_events *const events)
{
   18d78:	b580      	push	{r7, lr}
   18d7a:	b086      	sub	sp, #24
   18d7c:	af00      	add	r7, sp, #0
   18d7e:	6078      	str	r0, [r7, #4]
   18d80:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   18d82:	687b      	ldr	r3, [r7, #4]
   18d84:	681b      	ldr	r3, [r3, #0]
   18d86:	60fb      	str	r3, [r7, #12]

	uint32_t event_mask = 0;
   18d88:	2300      	movs	r3, #0
   18d8a:	617b      	str	r3, [r7, #20]

	/* Check if the user has requested an overflow event */
	if (events->generate_event_on_overflow) {
   18d8c:	683b      	ldr	r3, [r7, #0]
   18d8e:	781b      	ldrb	r3, [r3, #0]
   18d90:	2b00      	cmp	r3, #0
   18d92:	d004      	beq.n	18d9e <rtc_count_enable_events+0x26>
		event_mask |= RTC_MODE0_EVCTRL_OVFEO;
   18d94:	697b      	ldr	r3, [r7, #20]
   18d96:	2280      	movs	r2, #128	; 0x80
   18d98:	0212      	lsls	r2, r2, #8
   18d9a:	4313      	orrs	r3, r2
   18d9c:	617b      	str	r3, [r7, #20]
	}

	/* Check if the user has requested any compare events */
	for (uint8_t i = 0; i < RTC_NUM_OF_COMP16; i++) {
   18d9e:	2313      	movs	r3, #19
   18da0:	18fb      	adds	r3, r7, r3
   18da2:	2200      	movs	r2, #0
   18da4:	701a      	strb	r2, [r3, #0]
   18da6:	e01c      	b.n	18de2 <rtc_count_enable_events+0x6a>
		if (events->generate_event_on_compare[i]) {
   18da8:	2313      	movs	r3, #19
   18daa:	18fb      	adds	r3, r7, r3
   18dac:	781b      	ldrb	r3, [r3, #0]
   18dae:	683a      	ldr	r2, [r7, #0]
   18db0:	18d3      	adds	r3, r2, r3
   18db2:	785b      	ldrb	r3, [r3, #1]
   18db4:	2b00      	cmp	r3, #0
   18db6:	d00d      	beq.n	18dd4 <rtc_count_enable_events+0x5c>
			event_mask |= RTC_MODE0_EVCTRL_CMPEO(1 << i);
   18db8:	2313      	movs	r3, #19
   18dba:	18fb      	adds	r3, r7, r3
   18dbc:	781b      	ldrb	r3, [r3, #0]
   18dbe:	2201      	movs	r2, #1
   18dc0:	409a      	lsls	r2, r3
   18dc2:	0013      	movs	r3, r2
   18dc4:	021b      	lsls	r3, r3, #8
   18dc6:	001a      	movs	r2, r3
   18dc8:	2380      	movs	r3, #128	; 0x80
   18dca:	005b      	lsls	r3, r3, #1
   18dcc:	4013      	ands	r3, r2
   18dce:	697a      	ldr	r2, [r7, #20]
   18dd0:	4313      	orrs	r3, r2
   18dd2:	617b      	str	r3, [r7, #20]
	for (uint8_t i = 0; i < RTC_NUM_OF_COMP16; i++) {
   18dd4:	2313      	movs	r3, #19
   18dd6:	18fb      	adds	r3, r7, r3
   18dd8:	781a      	ldrb	r2, [r3, #0]
   18dda:	2313      	movs	r3, #19
   18ddc:	18fb      	adds	r3, r7, r3
   18dde:	3201      	adds	r2, #1
   18de0:	701a      	strb	r2, [r3, #0]
   18de2:	2313      	movs	r3, #19
   18de4:	18fb      	adds	r3, r7, r3
   18de6:	781b      	ldrb	r3, [r3, #0]
   18de8:	2b01      	cmp	r3, #1
   18dea:	d9dd      	bls.n	18da8 <rtc_count_enable_events+0x30>
		}
	}

	/* Check if the user has requested any periodic events */
	for (uint8_t i = 0; i < 8; i++) {
   18dec:	2312      	movs	r3, #18
   18dee:	18fb      	adds	r3, r7, r3
   18df0:	2200      	movs	r2, #0
   18df2:	701a      	strb	r2, [r3, #0]
   18df4:	e01a      	b.n	18e2c <rtc_count_enable_events+0xb4>
		if (events->generate_event_on_periodic[i]) {
   18df6:	2312      	movs	r3, #18
   18df8:	18fb      	adds	r3, r7, r3
   18dfa:	781b      	ldrb	r3, [r3, #0]
   18dfc:	683a      	ldr	r2, [r7, #0]
   18dfe:	18d3      	adds	r3, r2, r3
   18e00:	78db      	ldrb	r3, [r3, #3]
   18e02:	2b00      	cmp	r3, #0
   18e04:	d00b      	beq.n	18e1e <rtc_count_enable_events+0xa6>
			event_mask |= RTC_MODE0_EVCTRL_PEREO(1 << i);
   18e06:	2312      	movs	r3, #18
   18e08:	18fb      	adds	r3, r7, r3
   18e0a:	781b      	ldrb	r3, [r3, #0]
   18e0c:	2201      	movs	r2, #1
   18e0e:	409a      	lsls	r2, r3
   18e10:	0013      	movs	r3, r2
   18e12:	001a      	movs	r2, r3
   18e14:	23ff      	movs	r3, #255	; 0xff
   18e16:	4013      	ands	r3, r2
   18e18:	697a      	ldr	r2, [r7, #20]
   18e1a:	4313      	orrs	r3, r2
   18e1c:	617b      	str	r3, [r7, #20]
	for (uint8_t i = 0; i < 8; i++) {
   18e1e:	2312      	movs	r3, #18
   18e20:	18fb      	adds	r3, r7, r3
   18e22:	781a      	ldrb	r2, [r3, #0]
   18e24:	2312      	movs	r3, #18
   18e26:	18fb      	adds	r3, r7, r3
   18e28:	3201      	adds	r2, #1
   18e2a:	701a      	strb	r2, [r3, #0]
   18e2c:	2312      	movs	r3, #18
   18e2e:	18fb      	adds	r3, r7, r3
   18e30:	781b      	ldrb	r3, [r3, #0]
   18e32:	2b07      	cmp	r3, #7
   18e34:	d9df      	bls.n	18df6 <rtc_count_enable_events+0x7e>
		event_mask |= RTC_MODE0_EVCTRL_TAMPEVEI;
	}
#endif

	/* Enable given event(s). */
	rtc_module->MODE0.EVCTRL.reg |= event_mask;
   18e36:	68fb      	ldr	r3, [r7, #12]
   18e38:	889b      	ldrh	r3, [r3, #4]
   18e3a:	b29a      	uxth	r2, r3
   18e3c:	697b      	ldr	r3, [r7, #20]
   18e3e:	b29b      	uxth	r3, r3
   18e40:	4313      	orrs	r3, r2
   18e42:	b29a      	uxth	r2, r3
   18e44:	68fb      	ldr	r3, [r7, #12]
   18e46:	809a      	strh	r2, [r3, #4]
}
   18e48:	46c0      	nop			; (mov r8, r8)
   18e4a:	46bd      	mov	sp, r7
   18e4c:	b006      	add	sp, #24
   18e4e:	bd80      	pop	{r7, pc}

00018e50 <readOverHeadWaterSensorState>:
simEventTemp[9]		: lost AC power in 1 phase						A
*/


void readOverHeadWaterSensorState(bool *olow,bool *ohigh)
{
   18e50:	b580      	push	{r7, lr}
   18e52:	b082      	sub	sp, #8
   18e54:	af00      	add	r7, sp, #0
   18e56:	6078      	str	r0, [r7, #4]
   18e58:	6039      	str	r1, [r7, #0]
	*olow = port_pin_get_input_level(OVERHEAD_TANK_LL_PIN);
   18e5a:	200d      	movs	r0, #13
   18e5c:	4b08      	ldr	r3, [pc, #32]	; (18e80 <readOverHeadWaterSensorState+0x30>)
   18e5e:	4798      	blx	r3
   18e60:	0003      	movs	r3, r0
   18e62:	001a      	movs	r2, r3
   18e64:	687b      	ldr	r3, [r7, #4]
   18e66:	701a      	strb	r2, [r3, #0]
	//*omid = port_pin_get_input_level(OVERHEAD_TANK_ML_PIN);
	*ohigh = port_pin_get_input_level(OVERHEAD_TANK_HL_PIN);
   18e68:	202f      	movs	r0, #47	; 0x2f
   18e6a:	4b05      	ldr	r3, [pc, #20]	; (18e80 <readOverHeadWaterSensorState+0x30>)
   18e6c:	4798      	blx	r3
   18e6e:	0003      	movs	r3, r0
   18e70:	001a      	movs	r2, r3
   18e72:	683b      	ldr	r3, [r7, #0]
   18e74:	701a      	strb	r2, [r3, #0]
}
   18e76:	46c0      	nop			; (mov r8, r8)
   18e78:	46bd      	mov	sp, r7
   18e7a:	b002      	add	sp, #8
   18e7c:	bd80      	pop	{r7, pc}
   18e7e:	46c0      	nop			; (mov r8, r8)
   18e80:	00018bfd 	.word	0x00018bfd

00018e84 <updateOverheadLevel>:

void updateOverheadLevel(uint8_t level)
{
   18e84:	b580      	push	{r7, lr}
   18e86:	b082      	sub	sp, #8
   18e88:	af00      	add	r7, sp, #0
   18e8a:	0002      	movs	r2, r0
   18e8c:	1dfb      	adds	r3, r7, #7
   18e8e:	701a      	strb	r2, [r3, #0]
	overheadLevel=level;
   18e90:	4b03      	ldr	r3, [pc, #12]	; (18ea0 <updateOverheadLevel+0x1c>)
   18e92:	1dfa      	adds	r2, r7, #7
   18e94:	7812      	ldrb	r2, [r2, #0]
   18e96:	701a      	strb	r2, [r3, #0]
}
   18e98:	46c0      	nop			; (mov r8, r8)
   18e9a:	46bd      	mov	sp, r7
   18e9c:	b002      	add	sp, #8
   18e9e:	bd80      	pop	{r7, pc}
   18ea0:	2000077c 	.word	0x2000077c

00018ea4 <getOverHeadWaterSensorState>:

uint8_t getOverHeadWaterSensorState(void)
{
   18ea4:	b580      	push	{r7, lr}
   18ea6:	b082      	sub	sp, #8
   18ea8:	af00      	add	r7, sp, #0
	bool olow,omid,ohigh;
	readOverHeadWaterSensorState(&olow,&ohigh);
   18eaa:	1d7a      	adds	r2, r7, #5
   18eac:	1dbb      	adds	r3, r7, #6
   18eae:	0011      	movs	r1, r2
   18eb0:	0018      	movs	r0, r3
   18eb2:	4b11      	ldr	r3, [pc, #68]	; (18ef8 <getOverHeadWaterSensorState+0x54>)
   18eb4:	4798      	blx	r3
	uint8_t ans=0;
   18eb6:	1dfb      	adds	r3, r7, #7
   18eb8:	2200      	movs	r2, #0
   18eba:	701a      	strb	r2, [r3, #0]
	if(!olow)
   18ebc:	1dbb      	adds	r3, r7, #6
   18ebe:	781b      	ldrb	r3, [r3, #0]
   18ec0:	2201      	movs	r2, #1
   18ec2:	4053      	eors	r3, r2
   18ec4:	b2db      	uxtb	r3, r3
   18ec6:	2b00      	cmp	r3, #0
   18ec8:	d010      	beq.n	18eec <getOverHeadWaterSensorState+0x48>
	{
		ans++;
   18eca:	1dfb      	adds	r3, r7, #7
   18ecc:	781a      	ldrb	r2, [r3, #0]
   18ece:	1dfb      	adds	r3, r7, #7
   18ed0:	3201      	adds	r2, #1
   18ed2:	701a      	strb	r2, [r3, #0]
		//if(!omid)
		{
			//ans++;
			if (!ohigh)
   18ed4:	1d7b      	adds	r3, r7, #5
   18ed6:	781b      	ldrb	r3, [r3, #0]
   18ed8:	2201      	movs	r2, #1
   18eda:	4053      	eors	r3, r2
   18edc:	b2db      	uxtb	r3, r3
   18ede:	2b00      	cmp	r3, #0
   18ee0:	d004      	beq.n	18eec <getOverHeadWaterSensorState+0x48>
			{
				ans++;
   18ee2:	1dfb      	adds	r3, r7, #7
   18ee4:	781a      	ldrb	r2, [r3, #0]
   18ee6:	1dfb      	adds	r3, r7, #7
   18ee8:	3201      	adds	r2, #1
   18eea:	701a      	strb	r2, [r3, #0]
			}
		}
	}
	return ans;
   18eec:	1dfb      	adds	r3, r7, #7
   18eee:	781b      	ldrb	r3, [r3, #0]
}
   18ef0:	0018      	movs	r0, r3
   18ef2:	46bd      	mov	sp, r7
   18ef4:	b002      	add	sp, #8
   18ef6:	bd80      	pop	{r7, pc}
   18ef8:	00018e51 	.word	0x00018e51

00018efc <overHeadWaterStatusOnCall>:

void overHeadWaterStatusOnCall(bool current)
{
   18efc:	b590      	push	{r4, r7, lr}
   18efe:	b085      	sub	sp, #20
   18f00:	af00      	add	r7, sp, #0
   18f02:	0002      	movs	r2, r0
   18f04:	1dfb      	adds	r3, r7, #7
   18f06:	701a      	strb	r2, [r3, #0]
	uint8_t temp = getOverHeadWaterSensorState();
   18f08:	230f      	movs	r3, #15
   18f0a:	18fc      	adds	r4, r7, r3
   18f0c:	4b15      	ldr	r3, [pc, #84]	; (18f64 <overHeadWaterStatusOnCall+0x68>)
   18f0e:	4798      	blx	r3
   18f10:	0003      	movs	r3, r0
   18f12:	7023      	strb	r3, [r4, #0]
	if(current)
   18f14:	1dfb      	adds	r3, r7, #7
   18f16:	781b      	ldrb	r3, [r3, #0]
   18f18:	2b00      	cmp	r3, #0
   18f1a:	d004      	beq.n	18f26 <overHeadWaterStatusOnCall+0x2a>
	temp = overheadLevel;
   18f1c:	230f      	movs	r3, #15
   18f1e:	18fb      	adds	r3, r7, r3
   18f20:	4a11      	ldr	r2, [pc, #68]	; (18f68 <overHeadWaterStatusOnCall+0x6c>)
   18f22:	7812      	ldrb	r2, [r2, #0]
   18f24:	701a      	strb	r2, [r3, #0]
	if(temp == OVERHEADHIGHLEVEL)
   18f26:	230f      	movs	r3, #15
   18f28:	18fb      	adds	r3, r7, r3
   18f2a:	781b      	ldrb	r3, [r3, #0]
   18f2c:	2b02      	cmp	r3, #2
   18f2e:	d103      	bne.n	18f38 <overHeadWaterStatusOnCall+0x3c>
	{
		setMotorMGRResponse('V');
   18f30:	2056      	movs	r0, #86	; 0x56
   18f32:	4b0e      	ldr	r3, [pc, #56]	; (18f6c <overHeadWaterStatusOnCall+0x70>)
   18f34:	4798      	blx	r3
	}
	else if (temp == OVERHEADCRITICALLEVEL)
	{
		setMotorMGRResponse('W');
	}
}
   18f36:	e010      	b.n	18f5a <overHeadWaterStatusOnCall+0x5e>
	else if(temp == OVERHEADMIDLEVEL)
   18f38:	230f      	movs	r3, #15
   18f3a:	18fb      	adds	r3, r7, r3
   18f3c:	781b      	ldrb	r3, [r3, #0]
   18f3e:	2b01      	cmp	r3, #1
   18f40:	d103      	bne.n	18f4a <overHeadWaterStatusOnCall+0x4e>
		setMotorMGRResponse('X');
   18f42:	2058      	movs	r0, #88	; 0x58
   18f44:	4b09      	ldr	r3, [pc, #36]	; (18f6c <overHeadWaterStatusOnCall+0x70>)
   18f46:	4798      	blx	r3
}
   18f48:	e007      	b.n	18f5a <overHeadWaterStatusOnCall+0x5e>
	else if (temp == OVERHEADCRITICALLEVEL)
   18f4a:	230f      	movs	r3, #15
   18f4c:	18fb      	adds	r3, r7, r3
   18f4e:	781b      	ldrb	r3, [r3, #0]
   18f50:	2b00      	cmp	r3, #0
   18f52:	d102      	bne.n	18f5a <overHeadWaterStatusOnCall+0x5e>
		setMotorMGRResponse('W');
   18f54:	2057      	movs	r0, #87	; 0x57
   18f56:	4b05      	ldr	r3, [pc, #20]	; (18f6c <overHeadWaterStatusOnCall+0x70>)
   18f58:	4798      	blx	r3
}
   18f5a:	46c0      	nop			; (mov r8, r8)
   18f5c:	46bd      	mov	sp, r7
   18f5e:	b005      	add	sp, #20
   18f60:	bd90      	pop	{r4, r7, pc}
   18f62:	46c0      	nop			; (mov r8, r8)
   18f64:	00018ea5 	.word	0x00018ea5
   18f68:	2000077c 	.word	0x2000077c
   18f6c:	000149dd 	.word	0x000149dd

00018f70 <readWaterSensorState>:

void readWaterSensorState(bool *low,bool *mid,bool *high)
{
   18f70:	b580      	push	{r7, lr}
   18f72:	b084      	sub	sp, #16
   18f74:	af00      	add	r7, sp, #0
   18f76:	60f8      	str	r0, [r7, #12]
   18f78:	60b9      	str	r1, [r7, #8]
   18f7a:	607a      	str	r2, [r7, #4]
	*low = port_pin_get_input_level(UNDERGRUND_TANK_LL_PIN);
   18f7c:	2037      	movs	r0, #55	; 0x37
   18f7e:	4b0c      	ldr	r3, [pc, #48]	; (18fb0 <readWaterSensorState+0x40>)
   18f80:	4798      	blx	r3
   18f82:	0003      	movs	r3, r0
   18f84:	001a      	movs	r2, r3
   18f86:	68fb      	ldr	r3, [r7, #12]
   18f88:	701a      	strb	r2, [r3, #0]
	*mid = port_pin_get_input_level(UNDERGRUND_TANK_ML_PIN);
   18f8a:	200f      	movs	r0, #15
   18f8c:	4b08      	ldr	r3, [pc, #32]	; (18fb0 <readWaterSensorState+0x40>)
   18f8e:	4798      	blx	r3
   18f90:	0003      	movs	r3, r0
   18f92:	001a      	movs	r2, r3
   18f94:	68bb      	ldr	r3, [r7, #8]
   18f96:	701a      	strb	r2, [r3, #0]
	*high = port_pin_get_input_level(UNDERGRUND_TANK_HL_PIN);
   18f98:	200e      	movs	r0, #14
   18f9a:	4b05      	ldr	r3, [pc, #20]	; (18fb0 <readWaterSensorState+0x40>)
   18f9c:	4798      	blx	r3
   18f9e:	0003      	movs	r3, r0
   18fa0:	001a      	movs	r2, r3
   18fa2:	687b      	ldr	r3, [r7, #4]
   18fa4:	701a      	strb	r2, [r3, #0]
}
   18fa6:	46c0      	nop			; (mov r8, r8)
   18fa8:	46bd      	mov	sp, r7
   18faa:	b004      	add	sp, #16
   18fac:	bd80      	pop	{r7, pc}
   18fae:	46c0      	nop			; (mov r8, r8)
   18fb0:	00018bfd 	.word	0x00018bfd

00018fb4 <updateUndergroundLevel>:

void updateUndergroundLevel(uint8_t level)
{
   18fb4:	b580      	push	{r7, lr}
   18fb6:	b082      	sub	sp, #8
   18fb8:	af00      	add	r7, sp, #0
   18fba:	0002      	movs	r2, r0
   18fbc:	1dfb      	adds	r3, r7, #7
   18fbe:	701a      	strb	r2, [r3, #0]
	undergroundLevel=level;
   18fc0:	4b03      	ldr	r3, [pc, #12]	; (18fd0 <updateUndergroundLevel+0x1c>)
   18fc2:	1dfa      	adds	r2, r7, #7
   18fc4:	7812      	ldrb	r2, [r2, #0]
   18fc6:	701a      	strb	r2, [r3, #0]
}
   18fc8:	46c0      	nop			; (mov r8, r8)
   18fca:	46bd      	mov	sp, r7
   18fcc:	b002      	add	sp, #8
   18fce:	bd80      	pop	{r7, pc}
   18fd0:	20000838 	.word	0x20000838

00018fd4 <getWaterSensorState>:

uint8_t getWaterSensorState(void)
{
   18fd4:	b580      	push	{r7, lr}
   18fd6:	b082      	sub	sp, #8
   18fd8:	af00      	add	r7, sp, #0
	bool l,m,h;
	readWaterSensorState(&l,&m,&h);
   18fda:	1d3a      	adds	r2, r7, #4
   18fdc:	1d79      	adds	r1, r7, #5
   18fde:	1dbb      	adds	r3, r7, #6
   18fe0:	0018      	movs	r0, r3
   18fe2:	4b17      	ldr	r3, [pc, #92]	; (19040 <getWaterSensorState+0x6c>)
   18fe4:	4798      	blx	r3
	uint8_t ans=0;
   18fe6:	1dfb      	adds	r3, r7, #7
   18fe8:	2200      	movs	r2, #0
   18fea:	701a      	strb	r2, [r3, #0]

	if(!l)
   18fec:	1dbb      	adds	r3, r7, #6
   18fee:	781b      	ldrb	r3, [r3, #0]
   18ff0:	2201      	movs	r2, #1
   18ff2:	4053      	eors	r3, r2
   18ff4:	b2db      	uxtb	r3, r3
   18ff6:	2b00      	cmp	r3, #0
   18ff8:	d01c      	beq.n	19034 <getWaterSensorState+0x60>
	{
		ans++;
   18ffa:	1dfb      	adds	r3, r7, #7
   18ffc:	781a      	ldrb	r2, [r3, #0]
   18ffe:	1dfb      	adds	r3, r7, #7
   19000:	3201      	adds	r2, #1
   19002:	701a      	strb	r2, [r3, #0]
		if(!m)
   19004:	1d7b      	adds	r3, r7, #5
   19006:	781b      	ldrb	r3, [r3, #0]
   19008:	2201      	movs	r2, #1
   1900a:	4053      	eors	r3, r2
   1900c:	b2db      	uxtb	r3, r3
   1900e:	2b00      	cmp	r3, #0
   19010:	d010      	beq.n	19034 <getWaterSensorState+0x60>
		{
			ans++;
   19012:	1dfb      	adds	r3, r7, #7
   19014:	781a      	ldrb	r2, [r3, #0]
   19016:	1dfb      	adds	r3, r7, #7
   19018:	3201      	adds	r2, #1
   1901a:	701a      	strb	r2, [r3, #0]
			if(!h)
   1901c:	1d3b      	adds	r3, r7, #4
   1901e:	781b      	ldrb	r3, [r3, #0]
   19020:	2201      	movs	r2, #1
   19022:	4053      	eors	r3, r2
   19024:	b2db      	uxtb	r3, r3
   19026:	2b00      	cmp	r3, #0
   19028:	d004      	beq.n	19034 <getWaterSensorState+0x60>
			{
				ans++;
   1902a:	1dfb      	adds	r3, r7, #7
   1902c:	781a      	ldrb	r2, [r3, #0]
   1902e:	1dfb      	adds	r3, r7, #7
   19030:	3201      	adds	r2, #1
   19032:	701a      	strb	r2, [r3, #0]
			}
		}
	}
	return ans;
   19034:	1dfb      	adds	r3, r7, #7
   19036:	781b      	ldrb	r3, [r3, #0]
}
   19038:	0018      	movs	r0, r3
   1903a:	46bd      	mov	sp, r7
   1903c:	b002      	add	sp, #8
   1903e:	bd80      	pop	{r7, pc}
   19040:	00018f71 	.word	0x00018f71

00019044 <waterStatusOnCall>:

void waterStatusOnCall(bool current)
{
   19044:	b590      	push	{r4, r7, lr}
   19046:	b085      	sub	sp, #20
   19048:	af00      	add	r7, sp, #0
   1904a:	0002      	movs	r2, r0
   1904c:	1dfb      	adds	r3, r7, #7
   1904e:	701a      	strb	r2, [r3, #0]
	uint8_t temp = getWaterSensorState();
   19050:	230f      	movs	r3, #15
   19052:	18fc      	adds	r4, r7, r3
   19054:	4b19      	ldr	r3, [pc, #100]	; (190bc <waterStatusOnCall+0x78>)
   19056:	4798      	blx	r3
   19058:	0003      	movs	r3, r0
   1905a:	7023      	strb	r3, [r4, #0]
	if(current)
   1905c:	1dfb      	adds	r3, r7, #7
   1905e:	781b      	ldrb	r3, [r3, #0]
   19060:	2b00      	cmp	r3, #0
   19062:	d004      	beq.n	1906e <waterStatusOnCall+0x2a>
	temp = undergroundLevel;
   19064:	230f      	movs	r3, #15
   19066:	18fb      	adds	r3, r7, r3
   19068:	4a15      	ldr	r2, [pc, #84]	; (190c0 <waterStatusOnCall+0x7c>)
   1906a:	7812      	ldrb	r2, [r2, #0]
   1906c:	701a      	strb	r2, [r3, #0]

	if(temp==CRITICALLEVEL)
   1906e:	230f      	movs	r3, #15
   19070:	18fb      	adds	r3, r7, r3
   19072:	781b      	ldrb	r3, [r3, #0]
   19074:	2b00      	cmp	r3, #0
   19076:	d103      	bne.n	19080 <waterStatusOnCall+0x3c>
	{
		setMotorMGRResponse('T');	//water level insufficient
   19078:	2054      	movs	r0, #84	; 0x54
   1907a:	4b12      	ldr	r3, [pc, #72]	; (190c4 <waterStatusOnCall+0x80>)
   1907c:	4798      	blx	r3
	}
	else if(temp==HIGHLEVEL)
	{
		setMotorMGRResponse('E');	//well is full
	}
}
   1907e:	e019      	b.n	190b4 <waterStatusOnCall+0x70>
	else if(temp==LOWLEVEL)
   19080:	230f      	movs	r3, #15
   19082:	18fb      	adds	r3, r7, r3
   19084:	781b      	ldrb	r3, [r3, #0]
   19086:	2b01      	cmp	r3, #1
   19088:	d103      	bne.n	19092 <waterStatusOnCall+0x4e>
		setMotorMGRResponse('Q');	//water below 2nd sensor
   1908a:	2051      	movs	r0, #81	; 0x51
   1908c:	4b0d      	ldr	r3, [pc, #52]	; (190c4 <waterStatusOnCall+0x80>)
   1908e:	4798      	blx	r3
}
   19090:	e010      	b.n	190b4 <waterStatusOnCall+0x70>
	else if(temp==MIDLEVEL)
   19092:	230f      	movs	r3, #15
   19094:	18fb      	adds	r3, r7, r3
   19096:	781b      	ldrb	r3, [r3, #0]
   19098:	2b02      	cmp	r3, #2
   1909a:	d103      	bne.n	190a4 <waterStatusOnCall+0x60>
		setMotorMGRResponse('R');	//water below 1st sensor
   1909c:	2052      	movs	r0, #82	; 0x52
   1909e:	4b09      	ldr	r3, [pc, #36]	; (190c4 <waterStatusOnCall+0x80>)
   190a0:	4798      	blx	r3
}
   190a2:	e007      	b.n	190b4 <waterStatusOnCall+0x70>
	else if(temp==HIGHLEVEL)
   190a4:	230f      	movs	r3, #15
   190a6:	18fb      	adds	r3, r7, r3
   190a8:	781b      	ldrb	r3, [r3, #0]
   190aa:	2b03      	cmp	r3, #3
   190ac:	d102      	bne.n	190b4 <waterStatusOnCall+0x70>
		setMotorMGRResponse('E');	//well is full
   190ae:	2045      	movs	r0, #69	; 0x45
   190b0:	4b04      	ldr	r3, [pc, #16]	; (190c4 <waterStatusOnCall+0x80>)
   190b2:	4798      	blx	r3
}
   190b4:	46c0      	nop			; (mov r8, r8)
   190b6:	46bd      	mov	sp, r7
   190b8:	b005      	add	sp, #20
   190ba:	bd90      	pop	{r4, r7, pc}
   190bc:	00018fd5 	.word	0x00018fd5
   190c0:	20000838 	.word	0x20000838
   190c4:	000149dd 	.word	0x000149dd

000190c8 <Water_Level_Task>:

static void Water_Level_Task(void *params)
{
   190c8:	b590      	push	{r4, r7, lr}
   190ca:	b085      	sub	sp, #20
   190cc:	af00      	add	r7, sp, #0
   190ce:	6078      	str	r0, [r7, #4]
	UNUSED(params);
	
	struct port_config water_level_sensor_pin_config;
	port_get_config_defaults(&water_level_sensor_pin_config);
   190d0:	2308      	movs	r3, #8
   190d2:	18fb      	adds	r3, r7, r3
   190d4:	0018      	movs	r0, r3
   190d6:	4b8b      	ldr	r3, [pc, #556]	; (19304 <Water_Level_Task+0x23c>)
   190d8:	4798      	blx	r3
	
	water_level_sensor_pin_config.direction = PORT_PIN_DIR_INPUT;
   190da:	2308      	movs	r3, #8
   190dc:	18fb      	adds	r3, r7, r3
   190de:	2200      	movs	r2, #0
   190e0:	701a      	strb	r2, [r3, #0]
	water_level_sensor_pin_config.input_pull = PORT_PIN_PULL_UP;
   190e2:	2308      	movs	r3, #8
   190e4:	18fb      	adds	r3, r7, r3
   190e6:	2201      	movs	r2, #1
   190e8:	705a      	strb	r2, [r3, #1]
	
	port_pin_set_config(OVERHEAD_TANK_HL_PIN,	&water_level_sensor_pin_config);
   190ea:	2308      	movs	r3, #8
   190ec:	18fb      	adds	r3, r7, r3
   190ee:	0019      	movs	r1, r3
   190f0:	202f      	movs	r0, #47	; 0x2f
   190f2:	4b85      	ldr	r3, [pc, #532]	; (19308 <Water_Level_Task+0x240>)
   190f4:	4798      	blx	r3
	port_pin_set_config(OVERHEAD_TANK_ML_PIN,	&water_level_sensor_pin_config);
   190f6:	2308      	movs	r3, #8
   190f8:	18fb      	adds	r3, r7, r3
   190fa:	0019      	movs	r1, r3
   190fc:	200c      	movs	r0, #12
   190fe:	4b82      	ldr	r3, [pc, #520]	; (19308 <Water_Level_Task+0x240>)
   19100:	4798      	blx	r3
	port_pin_set_config(OVERHEAD_TANK_LL_PIN,	&water_level_sensor_pin_config);
   19102:	2308      	movs	r3, #8
   19104:	18fb      	adds	r3, r7, r3
   19106:	0019      	movs	r1, r3
   19108:	200d      	movs	r0, #13
   1910a:	4b7f      	ldr	r3, [pc, #508]	; (19308 <Water_Level_Task+0x240>)
   1910c:	4798      	blx	r3
	port_pin_set_config(UNDERGRUND_TANK_HL_PIN, &water_level_sensor_pin_config);
   1910e:	2308      	movs	r3, #8
   19110:	18fb      	adds	r3, r7, r3
   19112:	0019      	movs	r1, r3
   19114:	200e      	movs	r0, #14
   19116:	4b7c      	ldr	r3, [pc, #496]	; (19308 <Water_Level_Task+0x240>)
   19118:	4798      	blx	r3
	port_pin_set_config(UNDERGRUND_TANK_ML_PIN, &water_level_sensor_pin_config);
   1911a:	2308      	movs	r3, #8
   1911c:	18fb      	adds	r3, r7, r3
   1911e:	0019      	movs	r1, r3
   19120:	200f      	movs	r0, #15
   19122:	4b79      	ldr	r3, [pc, #484]	; (19308 <Water_Level_Task+0x240>)
   19124:	4798      	blx	r3
	port_pin_set_config(UNDERGRUND_TANK_LL_PIN, &water_level_sensor_pin_config);
   19126:	2308      	movs	r3, #8
   19128:	18fb      	adds	r3, r7, r3
   1912a:	0019      	movs	r1, r3
   1912c:	2037      	movs	r0, #55	; 0x37
   1912e:	4b76      	ldr	r3, [pc, #472]	; (19308 <Water_Level_Task+0x240>)
   19130:	4798      	blx	r3
	
	undergroundLevel = MIDLEVEL;
   19132:	4b76      	ldr	r3, [pc, #472]	; (1930c <Water_Level_Task+0x244>)
   19134:	2202      	movs	r2, #2
   19136:	701a      	strb	r2, [r3, #0]
	tempUndergroundLevel = MIDLEVEL;
   19138:	4b75      	ldr	r3, [pc, #468]	; (19310 <Water_Level_Task+0x248>)
   1913a:	2202      	movs	r2, #2
   1913c:	701a      	strb	r2, [r3, #0]
	
	overheadLevel = OVERHEADMIDLEVEL;
   1913e:	4b75      	ldr	r3, [pc, #468]	; (19314 <Water_Level_Task+0x24c>)
   19140:	2201      	movs	r2, #1
   19142:	701a      	strb	r2, [r3, #0]
	tempOverheadLevel = OVERHEADMIDLEVEL;
   19144:	4b74      	ldr	r3, [pc, #464]	; (19318 <Water_Level_Task+0x250>)
   19146:	2201      	movs	r2, #1
   19148:	701a      	strb	r2, [r3, #0]
	tempWaterEventCount = 0;
   1914a:	4b74      	ldr	r3, [pc, #464]	; (1931c <Water_Level_Task+0x254>)
   1914c:	2200      	movs	r2, #0
   1914e:	701a      	strb	r2, [r3, #0]
	
	uint8_t j = 0;
   19150:	230f      	movs	r3, #15
   19152:	18fb      	adds	r3, r7, r3
   19154:	2200      	movs	r2, #0
   19156:	701a      	strb	r2, [r3, #0]
	if (factory_settings_parameter_struct.ENABLE_GP)
   19158:	4b71      	ldr	r3, [pc, #452]	; (19320 <Water_Level_Task+0x258>)
   1915a:	791b      	ldrb	r3, [r3, #4]
   1915c:	2b00      	cmp	r3, #0
   1915e:	d004      	beq.n	1916a <Water_Level_Task+0xa2>
	{
		j = 19;
   19160:	230f      	movs	r3, #15
   19162:	18fb      	adds	r3, r7, r3
   19164:	2213      	movs	r2, #19
   19166:	701a      	strb	r2, [r3, #0]
   19168:	e003      	b.n	19172 <Water_Level_Task+0xaa>
	}
	else
	{
		j= 17;
   1916a:	230f      	movs	r3, #15
   1916c:	18fb      	adds	r3, r7, r3
   1916e:	2211      	movs	r2, #17
   19170:	701a      	strb	r2, [r3, #0]
	}
	for (uint8_t i=12;i<j;i++)
   19172:	230e      	movs	r3, #14
   19174:	18fb      	adds	r3, r7, r3
   19176:	220c      	movs	r2, #12
   19178:	701a      	strb	r2, [r3, #0]
   1917a:	e00c      	b.n	19196 <Water_Level_Task+0xce>
	{
		simEventTemp[i] = true;
   1917c:	230e      	movs	r3, #14
   1917e:	18fb      	adds	r3, r7, r3
   19180:	781b      	ldrb	r3, [r3, #0]
   19182:	4a68      	ldr	r2, [pc, #416]	; (19324 <Water_Level_Task+0x25c>)
   19184:	2101      	movs	r1, #1
   19186:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i=12;i<j;i++)
   19188:	230e      	movs	r3, #14
   1918a:	18fb      	adds	r3, r7, r3
   1918c:	781a      	ldrb	r2, [r3, #0]
   1918e:	230e      	movs	r3, #14
   19190:	18fb      	adds	r3, r7, r3
   19192:	3201      	adds	r2, #1
   19194:	701a      	strb	r2, [r3, #0]
   19196:	230e      	movs	r3, #14
   19198:	18fa      	adds	r2, r7, r3
   1919a:	230f      	movs	r3, #15
   1919c:	18fb      	adds	r3, r7, r3
   1919e:	7812      	ldrb	r2, [r2, #0]
   191a0:	781b      	ldrb	r3, [r3, #0]
   191a2:	429a      	cmp	r2, r3
   191a4:	d3ea      	bcc.n	1917c <Water_Level_Task+0xb4>
	}
	simEvent[12] = 'I';
   191a6:	4b60      	ldr	r3, [pc, #384]	; (19328 <Water_Level_Task+0x260>)
   191a8:	2249      	movs	r2, #73	; 0x49
   191aa:	731a      	strb	r2, [r3, #12]
	simEvent[13] = 'D';
   191ac:	4b5e      	ldr	r3, [pc, #376]	; (19328 <Water_Level_Task+0x260>)
   191ae:	2244      	movs	r2, #68	; 0x44
   191b0:	735a      	strb	r2, [r3, #13]
	simEvent[14] = 'H';
   191b2:	4b5d      	ldr	r3, [pc, #372]	; (19328 <Water_Level_Task+0x260>)
   191b4:	2248      	movs	r2, #72	; 0x48
   191b6:	739a      	strb	r2, [r3, #14]
	simEvent[15] = 'E';
   191b8:	4b5b      	ldr	r3, [pc, #364]	; (19328 <Water_Level_Task+0x260>)
   191ba:	2245      	movs	r2, #69	; 0x45
   191bc:	73da      	strb	r2, [r3, #15]
	simEvent[16] = 'Z';
   191be:	4b5a      	ldr	r3, [pc, #360]	; (19328 <Water_Level_Task+0x260>)
   191c0:	225a      	movs	r2, #90	; 0x5a
   191c2:	741a      	strb	r2, [r3, #16]
	if (factory_settings_parameter_struct.ENABLE_GP)
   191c4:	4b56      	ldr	r3, [pc, #344]	; (19320 <Water_Level_Task+0x258>)
   191c6:	791b      	ldrb	r3, [r3, #4]
   191c8:	2b00      	cmp	r3, #0
   191ca:	d005      	beq.n	191d8 <Water_Level_Task+0x110>
	{
		simEvent[17] = 'V';
   191cc:	4b56      	ldr	r3, [pc, #344]	; (19328 <Water_Level_Task+0x260>)
   191ce:	2256      	movs	r2, #86	; 0x56
   191d0:	745a      	strb	r2, [r3, #17]
		simEvent[18] = 'W';
   191d2:	4b55      	ldr	r3, [pc, #340]	; (19328 <Water_Level_Task+0x260>)
   191d4:	2257      	movs	r2, #87	; 0x57
   191d6:	749a      	strb	r2, [r3, #18]
	}
	if (factory_settings_parameter_struct.ENABLE_M2M)
   191d8:	4b51      	ldr	r3, [pc, #324]	; (19320 <Water_Level_Task+0x258>)
   191da:	78db      	ldrb	r3, [r3, #3]
   191dc:	2b00      	cmp	r3, #0
   191de:	d00b      	beq.n	191f8 <Water_Level_Task+0x130>
	{
		m2mEvent_arr[0] = ME_CLEARED;
   191e0:	4b52      	ldr	r3, [pc, #328]	; (1932c <Water_Level_Task+0x264>)
   191e2:	2200      	movs	r2, #0
   191e4:	701a      	strb	r2, [r3, #0]
		m2mEvent_arr[1] = ME_CLEARED;
   191e6:	4b51      	ldr	r3, [pc, #324]	; (1932c <Water_Level_Task+0x264>)
   191e8:	2200      	movs	r2, #0
   191ea:	705a      	strb	r2, [r3, #1]
		
		mapTable[0] = 13;
   191ec:	4b50      	ldr	r3, [pc, #320]	; (19330 <Water_Level_Task+0x268>)
   191ee:	220d      	movs	r2, #13
   191f0:	701a      	strb	r2, [r3, #0]
		mapTable[1] = 15;
   191f2:	4b4f      	ldr	r3, [pc, #316]	; (19330 <Water_Level_Task+0x268>)
   191f4:	220f      	movs	r2, #15
   191f6:	705a      	strb	r2, [r3, #1]
	}
	
	
	for (;;)
	{
		bool result=false;
   191f8:	230c      	movs	r3, #12
   191fa:	18fb      	adds	r3, r7, r3
   191fc:	2200      	movs	r2, #0
   191fe:	701a      	strb	r2, [r3, #0]
		
		if (!(user_settings_parameter_struct.waterBypassAddress))
   19200:	4b4c      	ldr	r3, [pc, #304]	; (19334 <Water_Level_Task+0x26c>)
   19202:	7fdb      	ldrb	r3, [r3, #31]
   19204:	2b00      	cmp	r3, #0
   19206:	d000      	beq.n	1920a <Water_Level_Task+0x142>
   19208:	e073      	b.n	192f2 <Water_Level_Task+0x22a>
		{
			uint8_t uLevel;
			uint8_t oLevel;
			uLevel = getWaterSensorState();
   1920a:	230b      	movs	r3, #11
   1920c:	18fc      	adds	r4, r7, r3
   1920e:	4b4a      	ldr	r3, [pc, #296]	; (19338 <Water_Level_Task+0x270>)
   19210:	4798      	blx	r3
   19212:	0003      	movs	r3, r0
   19214:	7023      	strb	r3, [r4, #0]
			
			if (factory_settings_parameter_struct.ENABLE_GP)
   19216:	4b42      	ldr	r3, [pc, #264]	; (19320 <Water_Level_Task+0x258>)
   19218:	791b      	ldrb	r3, [r3, #4]
   1921a:	2b00      	cmp	r3, #0
   1921c:	d005      	beq.n	1922a <Water_Level_Task+0x162>
			{
				oLevel =getOverHeadWaterSensorState();
   1921e:	230d      	movs	r3, #13
   19220:	18fc      	adds	r4, r7, r3
   19222:	4b46      	ldr	r3, [pc, #280]	; (1933c <Water_Level_Task+0x274>)
   19224:	4798      	blx	r3
   19226:	0003      	movs	r3, r0
   19228:	7023      	strb	r3, [r4, #0]
			}
			
			if ((factory_settings_parameter_struct.ENABLE_GP == true)?
   1922a:	4b3d      	ldr	r3, [pc, #244]	; (19320 <Water_Level_Task+0x258>)
   1922c:	791b      	ldrb	r3, [r3, #4]
   1922e:	2b01      	cmp	r3, #1
   19230:	d125      	bne.n	1927e <Water_Level_Task+0x1b6>
			((uLevel!=undergroundLevel && uLevel==tempUndergroundLevel) ||(oLevel!=overheadLevel && oLevel==tempOverheadLevel)):
   19232:	4b36      	ldr	r3, [pc, #216]	; (1930c <Water_Level_Task+0x244>)
   19234:	781b      	ldrb	r3, [r3, #0]
   19236:	220b      	movs	r2, #11
   19238:	18ba      	adds	r2, r7, r2
   1923a:	7812      	ldrb	r2, [r2, #0]
   1923c:	429a      	cmp	r2, r3
   1923e:	d006      	beq.n	1924e <Water_Level_Task+0x186>
   19240:	4b33      	ldr	r3, [pc, #204]	; (19310 <Water_Level_Task+0x248>)
   19242:	781b      	ldrb	r3, [r3, #0]
   19244:	220b      	movs	r2, #11
   19246:	18ba      	adds	r2, r7, r2
   19248:	7812      	ldrb	r2, [r2, #0]
   1924a:	429a      	cmp	r2, r3
   1924c:	d00f      	beq.n	1926e <Water_Level_Task+0x1a6>
   1924e:	4b31      	ldr	r3, [pc, #196]	; (19314 <Water_Level_Task+0x24c>)
   19250:	781b      	ldrb	r3, [r3, #0]
   19252:	b2db      	uxtb	r3, r3
   19254:	220d      	movs	r2, #13
   19256:	18ba      	adds	r2, r7, r2
   19258:	7812      	ldrb	r2, [r2, #0]
   1925a:	429a      	cmp	r2, r3
   1925c:	d009      	beq.n	19272 <Water_Level_Task+0x1aa>
   1925e:	4b2e      	ldr	r3, [pc, #184]	; (19318 <Water_Level_Task+0x250>)
   19260:	781b      	ldrb	r3, [r3, #0]
   19262:	b2db      	uxtb	r3, r3
   19264:	220d      	movs	r2, #13
   19266:	18ba      	adds	r2, r7, r2
   19268:	7812      	ldrb	r2, [r2, #0]
   1926a:	429a      	cmp	r2, r3
   1926c:	d101      	bne.n	19272 <Water_Level_Task+0x1aa>
   1926e:	2301      	movs	r3, #1
   19270:	e000      	b.n	19274 <Water_Level_Task+0x1ac>
   19272:	2300      	movs	r3, #0
			if ((factory_settings_parameter_struct.ENABLE_GP == true)?
   19274:	1c1a      	adds	r2, r3, #0
   19276:	2301      	movs	r3, #1
   19278:	4013      	ands	r3, r2
   1927a:	b2db      	uxtb	r3, r3
   1927c:	e014      	b.n	192a8 <Water_Level_Task+0x1e0>
			((uLevel!=undergroundLevel && uLevel==tempUndergroundLevel))
   1927e:	4b23      	ldr	r3, [pc, #140]	; (1930c <Water_Level_Task+0x244>)
   19280:	781b      	ldrb	r3, [r3, #0]
   19282:	220b      	movs	r2, #11
   19284:	18ba      	adds	r2, r7, r2
   19286:	7812      	ldrb	r2, [r2, #0]
   19288:	429a      	cmp	r2, r3
   1928a:	d008      	beq.n	1929e <Water_Level_Task+0x1d6>
   1928c:	4b20      	ldr	r3, [pc, #128]	; (19310 <Water_Level_Task+0x248>)
   1928e:	781b      	ldrb	r3, [r3, #0]
   19290:	220b      	movs	r2, #11
   19292:	18ba      	adds	r2, r7, r2
   19294:	7812      	ldrb	r2, [r2, #0]
   19296:	429a      	cmp	r2, r3
   19298:	d101      	bne.n	1929e <Water_Level_Task+0x1d6>
   1929a:	2301      	movs	r3, #1
   1929c:	e000      	b.n	192a0 <Water_Level_Task+0x1d8>
   1929e:	2300      	movs	r3, #0
			if ((factory_settings_parameter_struct.ENABLE_GP == true)?
   192a0:	1c1a      	adds	r2, r3, #0
   192a2:	2301      	movs	r3, #1
   192a4:	4013      	ands	r3, r2
   192a6:	b2db      	uxtb	r3, r3
   192a8:	2b00      	cmp	r3, #0
   192aa:	d010      	beq.n	192ce <Water_Level_Task+0x206>
			)
			{
				tempWaterEventCount++;
   192ac:	4b1b      	ldr	r3, [pc, #108]	; (1931c <Water_Level_Task+0x254>)
   192ae:	781b      	ldrb	r3, [r3, #0]
   192b0:	3301      	adds	r3, #1
   192b2:	b2da      	uxtb	r2, r3
   192b4:	4b19      	ldr	r3, [pc, #100]	; (1931c <Water_Level_Task+0x254>)
   192b6:	701a      	strb	r2, [r3, #0]
				if(tempWaterEventCount>9)
   192b8:	4b18      	ldr	r3, [pc, #96]	; (1931c <Water_Level_Task+0x254>)
   192ba:	781b      	ldrb	r3, [r3, #0]
   192bc:	2b09      	cmp	r3, #9
   192be:	d909      	bls.n	192d4 <Water_Level_Task+0x20c>
				{
					operateOnWaterEvent();
   192c0:	4b1f      	ldr	r3, [pc, #124]	; (19340 <Water_Level_Task+0x278>)
   192c2:	4798      	blx	r3
					result=true;
   192c4:	230c      	movs	r3, #12
   192c6:	18fb      	adds	r3, r7, r3
   192c8:	2201      	movs	r2, #1
   192ca:	701a      	strb	r2, [r3, #0]
   192cc:	e002      	b.n	192d4 <Water_Level_Task+0x20c>
				}
			}
			else
			{
				tempWaterEventCount=0;
   192ce:	4b13      	ldr	r3, [pc, #76]	; (1931c <Water_Level_Task+0x254>)
   192d0:	2200      	movs	r2, #0
   192d2:	701a      	strb	r2, [r3, #0]
			}
			tempUndergroundLevel=uLevel;
   192d4:	4b0e      	ldr	r3, [pc, #56]	; (19310 <Water_Level_Task+0x248>)
   192d6:	220b      	movs	r2, #11
   192d8:	18ba      	adds	r2, r7, r2
   192da:	7812      	ldrb	r2, [r2, #0]
   192dc:	701a      	strb	r2, [r3, #0]
			if (factory_settings_parameter_struct.ENABLE_GP)
   192de:	4b10      	ldr	r3, [pc, #64]	; (19320 <Water_Level_Task+0x258>)
   192e0:	791b      	ldrb	r3, [r3, #4]
   192e2:	2b00      	cmp	r3, #0
   192e4:	d009      	beq.n	192fa <Water_Level_Task+0x232>
			{
				tempOverheadLevel=oLevel;
   192e6:	4b0c      	ldr	r3, [pc, #48]	; (19318 <Water_Level_Task+0x250>)
   192e8:	220d      	movs	r2, #13
   192ea:	18ba      	adds	r2, r7, r2
   192ec:	7812      	ldrb	r2, [r2, #0]
   192ee:	701a      	strb	r2, [r3, #0]
   192f0:	e003      	b.n	192fa <Water_Level_Task+0x232>
			}
		}
		else
		{
			vTaskDelay(5000/portTICK_PERIOD_MS);
   192f2:	4b14      	ldr	r3, [pc, #80]	; (19344 <Water_Level_Task+0x27c>)
   192f4:	0018      	movs	r0, r3
   192f6:	4b14      	ldr	r3, [pc, #80]	; (19348 <Water_Level_Task+0x280>)
   192f8:	4798      	blx	r3
		}
		vTaskDelay(100/portTICK_PERIOD_MS);
   192fa:	2064      	movs	r0, #100	; 0x64
   192fc:	4b12      	ldr	r3, [pc, #72]	; (19348 <Water_Level_Task+0x280>)
   192fe:	4798      	blx	r3
	{
   19300:	e77a      	b.n	191f8 <Water_Level_Task+0x130>
   19302:	46c0      	nop			; (mov r8, r8)
   19304:	00018bd9 	.word	0x00018bd9
   19308:	00022b61 	.word	0x00022b61
   1930c:	20000838 	.word	0x20000838
   19310:	20000765 	.word	0x20000765
   19314:	2000077c 	.word	0x2000077c
   19318:	2000075a 	.word	0x2000075a
   1931c:	20000778 	.word	0x20000778
   19320:	20000638 	.word	0x20000638
   19324:	20000714 	.word	0x20000714
   19328:	200007d8 	.word	0x200007d8
   1932c:	200007a4 	.word	0x200007a4
   19330:	20000738 	.word	0x20000738
   19334:	20000660 	.word	0x20000660
   19338:	00018fd5 	.word	0x00018fd5
   1933c:	00018ea5 	.word	0x00018ea5
   19340:	0001934d 	.word	0x0001934d
   19344:	00001388 	.word	0x00001388
   19348:	0001fad9 	.word	0x0001fad9

0001934c <operateOnWaterEvent>:
	}
}

void operateOnWaterEvent(void)
{
   1934c:	b580      	push	{r7, lr}
   1934e:	b082      	sub	sp, #8
   19350:	af00      	add	r7, sp, #0
	uint8_t uLevel = tempUndergroundLevel;
   19352:	1dfb      	adds	r3, r7, #7
   19354:	4abb      	ldr	r2, [pc, #748]	; (19644 <operateOnWaterEvent+0x2f8>)
   19356:	7812      	ldrb	r2, [r2, #0]
   19358:	701a      	strb	r2, [r3, #0]
	uint8_t oLevel = tempOverheadLevel;
   1935a:	1dbb      	adds	r3, r7, #6
   1935c:	4aba      	ldr	r2, [pc, #744]	; (19648 <operateOnWaterEvent+0x2fc>)
   1935e:	7812      	ldrb	r2, [r2, #0]
   19360:	701a      	strb	r2, [r3, #0]
	if(uLevel == undergroundLevel)
   19362:	4bba      	ldr	r3, [pc, #744]	; (1964c <operateOnWaterEvent+0x300>)
   19364:	781b      	ldrb	r3, [r3, #0]
   19366:	1dfa      	adds	r2, r7, #7
   19368:	7812      	ldrb	r2, [r2, #0]
   1936a:	429a      	cmp	r2, r3
   1936c:	d10c      	bne.n	19388 <operateOnWaterEvent+0x3c>
	{
		if (factory_settings_parameter_struct.ENABLE_GP)
   1936e:	4bb8      	ldr	r3, [pc, #736]	; (19650 <operateOnWaterEvent+0x304>)
   19370:	791b      	ldrb	r3, [r3, #4]
   19372:	2b00      	cmp	r3, #0
   19374:	d000      	beq.n	19378 <operateOnWaterEvent+0x2c>
   19376:	e15e      	b.n	19636 <operateOnWaterEvent+0x2ea>
		{
			return;
		}
		else
		{
			if(oLevel==overheadLevel)
   19378:	4bb6      	ldr	r3, [pc, #728]	; (19654 <operateOnWaterEvent+0x308>)
   1937a:	781b      	ldrb	r3, [r3, #0]
   1937c:	b2db      	uxtb	r3, r3
   1937e:	1dba      	adds	r2, r7, #6
   19380:	7812      	ldrb	r2, [r2, #0]
   19382:	429a      	cmp	r2, r3
   19384:	d100      	bne.n	19388 <operateOnWaterEvent+0x3c>
   19386:	e158      	b.n	1963a <operateOnWaterEvent+0x2ee>
			{
				return;
			}
		}
	}
	if (getMotorState())
   19388:	4bb3      	ldr	r3, [pc, #716]	; (19658 <operateOnWaterEvent+0x30c>)
   1938a:	4798      	blx	r3
   1938c:	1e03      	subs	r3, r0, #0
   1938e:	d100      	bne.n	19392 <operateOnWaterEvent+0x46>
   19390:	e0c3      	b.n	1951a <operateOnWaterEvent+0x1ce>
	{
		if ((uLevel == CRITICALLEVEL) && (undergroundLevel>CRITICALLEVEL))	//no water in well
   19392:	1dfb      	adds	r3, r7, #7
   19394:	781b      	ldrb	r3, [r3, #0]
   19396:	2b00      	cmp	r3, #0
   19398:	d122      	bne.n	193e0 <operateOnWaterEvent+0x94>
   1939a:	4bac      	ldr	r3, [pc, #688]	; (1964c <operateOnWaterEvent+0x300>)
   1939c:	781b      	ldrb	r3, [r3, #0]
   1939e:	2b00      	cmp	r3, #0
   193a0:	d01e      	beq.n	193e0 <operateOnWaterEvent+0x94>
		{
			stopMotor(false,true,false);
   193a2:	2200      	movs	r2, #0
   193a4:	2101      	movs	r1, #1
   193a6:	2000      	movs	r0, #0
   193a8:	4bac      	ldr	r3, [pc, #688]	; (1965c <operateOnWaterEvent+0x310>)
   193aa:	4798      	blx	r3
			simEventTemp[12] = registerEvent('I');	//report To SIM Motor Off due to insufficient water level
   193ac:	2049      	movs	r0, #73	; 0x49
   193ae:	4bac      	ldr	r3, [pc, #688]	; (19660 <operateOnWaterEvent+0x314>)
   193b0:	4798      	blx	r3
   193b2:	0003      	movs	r3, r0
   193b4:	001a      	movs	r2, r3
   193b6:	4bab      	ldr	r3, [pc, #684]	; (19664 <operateOnWaterEvent+0x318>)
   193b8:	731a      	strb	r2, [r3, #12]
			if (factory_settings_parameter_struct.ENABLE_M2M)
   193ba:	4ba5      	ldr	r3, [pc, #660]	; (19650 <operateOnWaterEvent+0x304>)
   193bc:	78db      	ldrb	r3, [r3, #3]
   193be:	2b00      	cmp	r3, #0
   193c0:	d100      	bne.n	193c4 <operateOnWaterEvent+0x78>
   193c2:	e071      	b.n	194a8 <operateOnWaterEvent+0x15c>
			{
				if ((m2m_Numbers_struct.m2mSetting) && (undergroundLevel>LOWLEVEL))
   193c4:	4ba8      	ldr	r3, [pc, #672]	; (19668 <operateOnWaterEvent+0x31c>)
   193c6:	795b      	ldrb	r3, [r3, #5]
   193c8:	2b00      	cmp	r3, #0
   193ca:	d100      	bne.n	193ce <operateOnWaterEvent+0x82>
   193cc:	e06c      	b.n	194a8 <operateOnWaterEvent+0x15c>
   193ce:	4b9f      	ldr	r3, [pc, #636]	; (1964c <operateOnWaterEvent+0x300>)
   193d0:	781b      	ldrb	r3, [r3, #0]
   193d2:	2b01      	cmp	r3, #1
   193d4:	d800      	bhi.n	193d8 <operateOnWaterEvent+0x8c>
   193d6:	e067      	b.n	194a8 <operateOnWaterEvent+0x15c>
				{
					m2mEvent_arr[0] = ME_WAITREGISTER;
   193d8:	4ba4      	ldr	r3, [pc, #656]	; (1966c <operateOnWaterEvent+0x320>)
   193da:	2201      	movs	r2, #1
   193dc:	701a      	strb	r2, [r3, #0]
			if (factory_settings_parameter_struct.ENABLE_M2M)
   193de:	e063      	b.n	194a8 <operateOnWaterEvent+0x15c>
				}
			}
		}
		else if (uLevel==HIGHLEVEL && undergroundLevel<HIGHLEVEL)
   193e0:	1dfb      	adds	r3, r7, #7
   193e2:	781b      	ldrb	r3, [r3, #0]
   193e4:	2b03      	cmp	r3, #3
   193e6:	d12f      	bne.n	19448 <operateOnWaterEvent+0xfc>
   193e8:	4b98      	ldr	r3, [pc, #608]	; (1964c <operateOnWaterEvent+0x300>)
   193ea:	781b      	ldrb	r3, [r3, #0]
   193ec:	2b02      	cmp	r3, #2
   193ee:	d82b      	bhi.n	19448 <operateOnWaterEvent+0xfc>
		{
			if (factory_settings_parameter_struct.ENABLE_M2M)
   193f0:	4b97      	ldr	r3, [pc, #604]	; (19650 <operateOnWaterEvent+0x304>)
   193f2:	78db      	ldrb	r3, [r3, #3]
   193f4:	2b00      	cmp	r3, #0
   193f6:	d05a      	beq.n	194ae <operateOnWaterEvent+0x162>
			{
				if (m2m_Numbers_struct.m2mSetting)
   193f8:	4b9b      	ldr	r3, [pc, #620]	; (19668 <operateOnWaterEvent+0x31c>)
   193fa:	795b      	ldrb	r3, [r3, #5]
   193fc:	2b00      	cmp	r3, #0
   193fe:	d003      	beq.n	19408 <operateOnWaterEvent+0xbc>
				{
					m2mEvent_arr[1] = ME_WAITREGISTER;
   19400:	4b9a      	ldr	r3, [pc, #616]	; (1966c <operateOnWaterEvent+0x320>)
   19402:	2201      	movs	r2, #1
   19404:	705a      	strb	r2, [r3, #1]
   19406:	e006      	b.n	19416 <operateOnWaterEvent+0xca>
				}
				else
				{
					simEventTemp[15] = registerEvent('E');	//report To SIM well is full.
   19408:	2045      	movs	r0, #69	; 0x45
   1940a:	4b95      	ldr	r3, [pc, #596]	; (19660 <operateOnWaterEvent+0x314>)
   1940c:	4798      	blx	r3
   1940e:	0003      	movs	r3, r0
   19410:	001a      	movs	r2, r3
   19412:	4b94      	ldr	r3, [pc, #592]	; (19664 <operateOnWaterEvent+0x318>)
   19414:	73da      	strb	r2, [r3, #15]
				}
				if (user_settings_parameter_struct.preventOverFlowAddress)
   19416:	4b96      	ldr	r3, [pc, #600]	; (19670 <operateOnWaterEvent+0x324>)
   19418:	7f9b      	ldrb	r3, [r3, #30]
   1941a:	2b00      	cmp	r3, #0
   1941c:	d00c      	beq.n	19438 <operateOnWaterEvent+0xec>
				{
					stopMotor(false,true,false);
   1941e:	2200      	movs	r2, #0
   19420:	2101      	movs	r1, #1
   19422:	2000      	movs	r0, #0
   19424:	4b8d      	ldr	r3, [pc, #564]	; (1965c <operateOnWaterEvent+0x310>)
   19426:	4798      	blx	r3
					simEventTemp[14] = registerEvent('H'); //report To SIM well is full, so stopped motor
   19428:	2048      	movs	r0, #72	; 0x48
   1942a:	4b8d      	ldr	r3, [pc, #564]	; (19660 <operateOnWaterEvent+0x314>)
   1942c:	4798      	blx	r3
   1942e:	0003      	movs	r3, r0
   19430:	001a      	movs	r2, r3
   19432:	4b8c      	ldr	r3, [pc, #560]	; (19664 <operateOnWaterEvent+0x318>)
   19434:	739a      	strb	r2, [r3, #14]
			if (factory_settings_parameter_struct.ENABLE_M2M)
   19436:	e03a      	b.n	194ae <operateOnWaterEvent+0x162>
				}
				else
				{
					simEventTemp[15] = registerEvent('E'); //report To SIM well is full.
   19438:	2045      	movs	r0, #69	; 0x45
   1943a:	4b89      	ldr	r3, [pc, #548]	; (19660 <operateOnWaterEvent+0x314>)
   1943c:	4798      	blx	r3
   1943e:	0003      	movs	r3, r0
   19440:	001a      	movs	r2, r3
   19442:	4b88      	ldr	r3, [pc, #544]	; (19664 <operateOnWaterEvent+0x318>)
   19444:	73da      	strb	r2, [r3, #15]
			if (factory_settings_parameter_struct.ENABLE_M2M)
   19446:	e032      	b.n	194ae <operateOnWaterEvent+0x162>
				}
			}
		}
		else if ((uLevel==LOWLEVEL) && (undergroundLevel>LOWLEVEL))		// decrease in water level
   19448:	1dfb      	adds	r3, r7, #7
   1944a:	781b      	ldrb	r3, [r3, #0]
   1944c:	2b01      	cmp	r3, #1
   1944e:	d11b      	bne.n	19488 <operateOnWaterEvent+0x13c>
   19450:	4b7e      	ldr	r3, [pc, #504]	; (1964c <operateOnWaterEvent+0x300>)
   19452:	781b      	ldrb	r3, [r3, #0]
   19454:	2b01      	cmp	r3, #1
   19456:	d917      	bls.n	19488 <operateOnWaterEvent+0x13c>
		{
			if (factory_settings_parameter_struct.ENABLE_M2M)
   19458:	4b7d      	ldr	r3, [pc, #500]	; (19650 <operateOnWaterEvent+0x304>)
   1945a:	78db      	ldrb	r3, [r3, #3]
   1945c:	2b00      	cmp	r3, #0
   1945e:	d007      	beq.n	19470 <operateOnWaterEvent+0x124>
			{
				if (m2m_Numbers_struct.m2mSetting)
   19460:	4b81      	ldr	r3, [pc, #516]	; (19668 <operateOnWaterEvent+0x31c>)
   19462:	795b      	ldrb	r3, [r3, #5]
   19464:	2b00      	cmp	r3, #0
   19466:	d021      	beq.n	194ac <operateOnWaterEvent+0x160>
				{
					m2mEvent_arr[0] = ME_WAITREGISTER;
   19468:	4b80      	ldr	r3, [pc, #512]	; (1966c <operateOnWaterEvent+0x320>)
   1946a:	2201      	movs	r2, #1
   1946c:	701a      	strb	r2, [r3, #0]
			if (factory_settings_parameter_struct.ENABLE_M2M)
   1946e:	e01d      	b.n	194ac <operateOnWaterEvent+0x160>
				}
			}
			else
			{
				if (factory_settings_parameter_struct.NOLEVELCHANGECALL)
   19470:	4b77      	ldr	r3, [pc, #476]	; (19650 <operateOnWaterEvent+0x304>)
   19472:	79db      	ldrb	r3, [r3, #7]
   19474:	2b00      	cmp	r3, #0
   19476:	d019      	beq.n	194ac <operateOnWaterEvent+0x160>
				{
					simEventTemp[13] = registerEvent('D'); //report To SIM water level is decrease..
   19478:	2044      	movs	r0, #68	; 0x44
   1947a:	4b79      	ldr	r3, [pc, #484]	; (19660 <operateOnWaterEvent+0x314>)
   1947c:	4798      	blx	r3
   1947e:	0003      	movs	r3, r0
   19480:	001a      	movs	r2, r3
   19482:	4b78      	ldr	r3, [pc, #480]	; (19664 <operateOnWaterEvent+0x318>)
   19484:	735a      	strb	r2, [r3, #13]
			if (factory_settings_parameter_struct.ENABLE_M2M)
   19486:	e011      	b.n	194ac <operateOnWaterEvent+0x160>
				}
			}
		}
		else if (uLevel==MIDLEVEL && undergroundLevel<MIDLEVEL)		// increase in water level
   19488:	1dfb      	adds	r3, r7, #7
   1948a:	781b      	ldrb	r3, [r3, #0]
   1948c:	2b02      	cmp	r3, #2
   1948e:	d10e      	bne.n	194ae <operateOnWaterEvent+0x162>
   19490:	4b6e      	ldr	r3, [pc, #440]	; (1964c <operateOnWaterEvent+0x300>)
   19492:	781b      	ldrb	r3, [r3, #0]
   19494:	2b01      	cmp	r3, #1
   19496:	d80a      	bhi.n	194ae <operateOnWaterEvent+0x162>
		{
			simEventTemp[16] = registerEvent('Z'); //report To SIM water level is increasing..
   19498:	205a      	movs	r0, #90	; 0x5a
   1949a:	4b71      	ldr	r3, [pc, #452]	; (19660 <operateOnWaterEvent+0x314>)
   1949c:	4798      	blx	r3
   1949e:	0003      	movs	r3, r0
   194a0:	001a      	movs	r2, r3
   194a2:	4b70      	ldr	r3, [pc, #448]	; (19664 <operateOnWaterEvent+0x318>)
   194a4:	741a      	strb	r2, [r3, #16]
   194a6:	e002      	b.n	194ae <operateOnWaterEvent+0x162>
			if (factory_settings_parameter_struct.ENABLE_M2M)
   194a8:	46c0      	nop			; (mov r8, r8)
   194aa:	e000      	b.n	194ae <operateOnWaterEvent+0x162>
			if (factory_settings_parameter_struct.ENABLE_M2M)
   194ac:	46c0      	nop			; (mov r8, r8)
		}
		if (factory_settings_parameter_struct.ENABLE_GP)
   194ae:	4b68      	ldr	r3, [pc, #416]	; (19650 <operateOnWaterEvent+0x304>)
   194b0:	791b      	ldrb	r3, [r3, #4]
   194b2:	2b00      	cmp	r3, #0
   194b4:	d100      	bne.n	194b8 <operateOnWaterEvent+0x16c>
   194b6:	e0af      	b.n	19618 <operateOnWaterEvent+0x2cc>
		{
			if(oLevel!=overheadLevel)
   194b8:	4b66      	ldr	r3, [pc, #408]	; (19654 <operateOnWaterEvent+0x308>)
   194ba:	781b      	ldrb	r3, [r3, #0]
   194bc:	b2db      	uxtb	r3, r3
   194be:	1dba      	adds	r2, r7, #6
   194c0:	7812      	ldrb	r2, [r2, #0]
   194c2:	429a      	cmp	r2, r3
   194c4:	d100      	bne.n	194c8 <operateOnWaterEvent+0x17c>
   194c6:	e0a7      	b.n	19618 <operateOnWaterEvent+0x2cc>
			{
				if(oLevel==OVERHEADHIGHLEVEL && overheadLevel<OVERHEADHIGHLEVEL)		////overhead tank is full
   194c8:	1dbb      	adds	r3, r7, #6
   194ca:	781b      	ldrb	r3, [r3, #0]
   194cc:	2b02      	cmp	r3, #2
   194ce:	d111      	bne.n	194f4 <operateOnWaterEvent+0x1a8>
   194d0:	4b60      	ldr	r3, [pc, #384]	; (19654 <operateOnWaterEvent+0x308>)
   194d2:	781b      	ldrb	r3, [r3, #0]
   194d4:	b2db      	uxtb	r3, r3
   194d6:	2b01      	cmp	r3, #1
   194d8:	d80c      	bhi.n	194f4 <operateOnWaterEvent+0x1a8>
				{
					stopMotor(false,true,false);
   194da:	2200      	movs	r2, #0
   194dc:	2101      	movs	r1, #1
   194de:	2000      	movs	r0, #0
   194e0:	4b5e      	ldr	r3, [pc, #376]	; (1965c <operateOnWaterEvent+0x310>)
   194e2:	4798      	blx	r3
					simEventTemp[17] = registerEvent('V'); //report To SIM Motor Off due to overhead tank full
   194e4:	2056      	movs	r0, #86	; 0x56
   194e6:	4b5e      	ldr	r3, [pc, #376]	; (19660 <operateOnWaterEvent+0x314>)
   194e8:	4798      	blx	r3
   194ea:	0003      	movs	r3, r0
   194ec:	001a      	movs	r2, r3
   194ee:	4b5d      	ldr	r3, [pc, #372]	; (19664 <operateOnWaterEvent+0x318>)
   194f0:	745a      	strb	r2, [r3, #17]
   194f2:	e091      	b.n	19618 <operateOnWaterEvent+0x2cc>
				}
				else if (oLevel==OVERHEADCRITICALLEVEL && overheadLevel>OVERHEADCRITICALLEVEL)	// overhead tank empty.
   194f4:	1dbb      	adds	r3, r7, #6
   194f6:	781b      	ldrb	r3, [r3, #0]
   194f8:	2b00      	cmp	r3, #0
   194fa:	d000      	beq.n	194fe <operateOnWaterEvent+0x1b2>
   194fc:	e08c      	b.n	19618 <operateOnWaterEvent+0x2cc>
   194fe:	4b55      	ldr	r3, [pc, #340]	; (19654 <operateOnWaterEvent+0x308>)
   19500:	781b      	ldrb	r3, [r3, #0]
   19502:	b2db      	uxtb	r3, r3
   19504:	2b00      	cmp	r3, #0
   19506:	d100      	bne.n	1950a <operateOnWaterEvent+0x1be>
   19508:	e086      	b.n	19618 <operateOnWaterEvent+0x2cc>
				{
					simEventTemp[18] = registerEvent('W'); //report To SIM , overhead tank empty.
   1950a:	2057      	movs	r0, #87	; 0x57
   1950c:	4b54      	ldr	r3, [pc, #336]	; (19660 <operateOnWaterEvent+0x314>)
   1950e:	4798      	blx	r3
   19510:	0003      	movs	r3, r0
   19512:	001a      	movs	r2, r3
   19514:	4b53      	ldr	r3, [pc, #332]	; (19664 <operateOnWaterEvent+0x318>)
   19516:	749a      	strb	r2, [r3, #18]
   19518:	e07e      	b.n	19618 <operateOnWaterEvent+0x2cc>
			}
		}
	}
	else
	{
		if (factory_settings_parameter_struct.ENABLE_M2M)
   1951a:	4b4d      	ldr	r3, [pc, #308]	; (19650 <operateOnWaterEvent+0x304>)
   1951c:	78db      	ldrb	r3, [r3, #3]
   1951e:	2b00      	cmp	r3, #0
   19520:	d027      	beq.n	19572 <operateOnWaterEvent+0x226>
		{
			if(m2m_Numbers_struct.m2mSetting && uLevel<MIDLEVEL && undergroundLevel>=MIDLEVEL)	//level is decreased
   19522:	4b51      	ldr	r3, [pc, #324]	; (19668 <operateOnWaterEvent+0x31c>)
   19524:	795b      	ldrb	r3, [r3, #5]
   19526:	2b00      	cmp	r3, #0
   19528:	d00b      	beq.n	19542 <operateOnWaterEvent+0x1f6>
   1952a:	1dfb      	adds	r3, r7, #7
   1952c:	781b      	ldrb	r3, [r3, #0]
   1952e:	2b01      	cmp	r3, #1
   19530:	d807      	bhi.n	19542 <operateOnWaterEvent+0x1f6>
   19532:	4b46      	ldr	r3, [pc, #280]	; (1964c <operateOnWaterEvent+0x300>)
   19534:	781b      	ldrb	r3, [r3, #0]
   19536:	2b01      	cmp	r3, #1
   19538:	d903      	bls.n	19542 <operateOnWaterEvent+0x1f6>
			{
				m2mEvent_arr[0] = ME_WAITREGISTER;
   1953a:	4b4c      	ldr	r3, [pc, #304]	; (1966c <operateOnWaterEvent+0x320>)
   1953c:	2201      	movs	r2, #1
   1953e:	701a      	strb	r2, [r3, #0]
   19540:	e04b      	b.n	195da <operateOnWaterEvent+0x28e>
			}
			else if (uLevel==HIGHLEVEL && undergroundLevel<HIGHLEVEL)			//well is full
   19542:	1dfb      	adds	r3, r7, #7
   19544:	781b      	ldrb	r3, [r3, #0]
   19546:	2b03      	cmp	r3, #3
   19548:	d147      	bne.n	195da <operateOnWaterEvent+0x28e>
   1954a:	4b40      	ldr	r3, [pc, #256]	; (1964c <operateOnWaterEvent+0x300>)
   1954c:	781b      	ldrb	r3, [r3, #0]
   1954e:	2b02      	cmp	r3, #2
   19550:	d843      	bhi.n	195da <operateOnWaterEvent+0x28e>
			{
				if(m2m_Numbers_struct.m2mSetting)
   19552:	4b45      	ldr	r3, [pc, #276]	; (19668 <operateOnWaterEvent+0x31c>)
   19554:	795b      	ldrb	r3, [r3, #5]
   19556:	2b00      	cmp	r3, #0
   19558:	d003      	beq.n	19562 <operateOnWaterEvent+0x216>
				{
					m2mEvent_arr[1] = ME_WAITREGISTER;
   1955a:	4b44      	ldr	r3, [pc, #272]	; (1966c <operateOnWaterEvent+0x320>)
   1955c:	2201      	movs	r2, #1
   1955e:	705a      	strb	r2, [r3, #1]
   19560:	e03b      	b.n	195da <operateOnWaterEvent+0x28e>
				}
				else
				{
					simEventTemp[15] = registerEvent('E'); //report To SIM well is full.
   19562:	2045      	movs	r0, #69	; 0x45
   19564:	4b3e      	ldr	r3, [pc, #248]	; (19660 <operateOnWaterEvent+0x314>)
   19566:	4798      	blx	r3
   19568:	0003      	movs	r3, r0
   1956a:	001a      	movs	r2, r3
   1956c:	4b3d      	ldr	r3, [pc, #244]	; (19664 <operateOnWaterEvent+0x318>)
   1956e:	73da      	strb	r2, [r3, #15]
   19570:	e033      	b.n	195da <operateOnWaterEvent+0x28e>
				}
			}
		}
		else if(uLevel==HIGHLEVEL && undergroundLevel<HIGHLEVEL)		//well is full
   19572:	1dfb      	adds	r3, r7, #7
   19574:	781b      	ldrb	r3, [r3, #0]
   19576:	2b03      	cmp	r3, #3
   19578:	d10b      	bne.n	19592 <operateOnWaterEvent+0x246>
   1957a:	4b34      	ldr	r3, [pc, #208]	; (1964c <operateOnWaterEvent+0x300>)
   1957c:	781b      	ldrb	r3, [r3, #0]
   1957e:	2b02      	cmp	r3, #2
   19580:	d807      	bhi.n	19592 <operateOnWaterEvent+0x246>
		{
			simEventTemp[15] = registerEvent('E'); //report To SIM well is full.
   19582:	2045      	movs	r0, #69	; 0x45
   19584:	4b36      	ldr	r3, [pc, #216]	; (19660 <operateOnWaterEvent+0x314>)
   19586:	4798      	blx	r3
   19588:	0003      	movs	r3, r0
   1958a:	001a      	movs	r2, r3
   1958c:	4b35      	ldr	r3, [pc, #212]	; (19664 <operateOnWaterEvent+0x318>)
   1958e:	73da      	strb	r2, [r3, #15]
   19590:	e023      	b.n	195da <operateOnWaterEvent+0x28e>
		}
		else if (uLevel==MIDLEVEL && undergroundLevel<MIDLEVEL)		// underground level is increasing
   19592:	1dfb      	adds	r3, r7, #7
   19594:	781b      	ldrb	r3, [r3, #0]
   19596:	2b02      	cmp	r3, #2
   19598:	d11f      	bne.n	195da <operateOnWaterEvent+0x28e>
   1959a:	4b2c      	ldr	r3, [pc, #176]	; (1964c <operateOnWaterEvent+0x300>)
   1959c:	781b      	ldrb	r3, [r3, #0]
   1959e:	2b01      	cmp	r3, #1
   195a0:	d81b      	bhi.n	195da <operateOnWaterEvent+0x28e>
		{
			if (factory_settings_parameter_struct.ENABLE_GP)
   195a2:	4b2b      	ldr	r3, [pc, #172]	; (19650 <operateOnWaterEvent+0x304>)
   195a4:	791b      	ldrb	r3, [r3, #4]
   195a6:	2b00      	cmp	r3, #0
   195a8:	d00d      	beq.n	195c6 <operateOnWaterEvent+0x27a>
			{
				if (factory_settings_parameter_struct.DUAL_LEVEL)
   195aa:	4b29      	ldr	r3, [pc, #164]	; (19650 <operateOnWaterEvent+0x304>)
   195ac:	799b      	ldrb	r3, [r3, #6]
   195ae:	2b00      	cmp	r3, #0
   195b0:	d009      	beq.n	195c6 <operateOnWaterEvent+0x27a>
				{
					if(oLevel<OVERHEADHIGHLEVEL)
   195b2:	1dbb      	adds	r3, r7, #6
   195b4:	781b      	ldrb	r3, [r3, #0]
   195b6:	2b01      	cmp	r3, #1
   195b8:	d805      	bhi.n	195c6 <operateOnWaterEvent+0x27a>
					{
						if(user_settings_parameter_struct.autoStartAddress)			//autoStart is ON
   195ba:	4b2d      	ldr	r3, [pc, #180]	; (19670 <operateOnWaterEvent+0x324>)
   195bc:	785b      	ldrb	r3, [r3, #1]
   195be:	2b00      	cmp	r3, #0
   195c0:	d001      	beq.n	195c6 <operateOnWaterEvent+0x27a>
						{
							triggerAutoStart();
   195c2:	4b2c      	ldr	r3, [pc, #176]	; (19674 <operateOnWaterEvent+0x328>)
   195c4:	4798      	blx	r3
						}
					}
				}
			}
			if (factory_settings_parameter_struct.DUAL_LEVEL)
   195c6:	4b22      	ldr	r3, [pc, #136]	; (19650 <operateOnWaterEvent+0x304>)
   195c8:	799b      	ldrb	r3, [r3, #6]
   195ca:	2b00      	cmp	r3, #0
   195cc:	d005      	beq.n	195da <operateOnWaterEvent+0x28e>
			{
				if(user_settings_parameter_struct.autoStartAddress)			//autoStart is ON
   195ce:	4b28      	ldr	r3, [pc, #160]	; (19670 <operateOnWaterEvent+0x324>)
   195d0:	785b      	ldrb	r3, [r3, #1]
   195d2:	2b00      	cmp	r3, #0
   195d4:	d001      	beq.n	195da <operateOnWaterEvent+0x28e>
				{
					triggerAutoStart();
   195d6:	4b27      	ldr	r3, [pc, #156]	; (19674 <operateOnWaterEvent+0x328>)
   195d8:	4798      	blx	r3
				}
			}
		}
		if (factory_settings_parameter_struct.ENABLE_GP)
   195da:	4b1d      	ldr	r3, [pc, #116]	; (19650 <operateOnWaterEvent+0x304>)
   195dc:	791b      	ldrb	r3, [r3, #4]
   195de:	2b00      	cmp	r3, #0
   195e0:	d01a      	beq.n	19618 <operateOnWaterEvent+0x2cc>
		{
			if (oLevel==OVERHEADCRITICALLEVEL && overheadLevel>OVERHEADCRITICALLEVEL && uLevel>CRITICALLEVEL) // overhead tank is empty, and underground not low
   195e2:	1dbb      	adds	r3, r7, #6
   195e4:	781b      	ldrb	r3, [r3, #0]
   195e6:	2b00      	cmp	r3, #0
   195e8:	d116      	bne.n	19618 <operateOnWaterEvent+0x2cc>
   195ea:	4b1a      	ldr	r3, [pc, #104]	; (19654 <operateOnWaterEvent+0x308>)
   195ec:	781b      	ldrb	r3, [r3, #0]
   195ee:	b2db      	uxtb	r3, r3
   195f0:	2b00      	cmp	r3, #0
   195f2:	d011      	beq.n	19618 <operateOnWaterEvent+0x2cc>
   195f4:	1dfb      	adds	r3, r7, #7
   195f6:	781b      	ldrb	r3, [r3, #0]
   195f8:	2b00      	cmp	r3, #0
   195fa:	d00d      	beq.n	19618 <operateOnWaterEvent+0x2cc>
			{
				if(user_settings_parameter_struct.autoStartAddress)		//autoStart is ON
   195fc:	4b1c      	ldr	r3, [pc, #112]	; (19670 <operateOnWaterEvent+0x324>)
   195fe:	785b      	ldrb	r3, [r3, #1]
   19600:	2b00      	cmp	r3, #0
   19602:	d002      	beq.n	1960a <operateOnWaterEvent+0x2be>
				{
					triggerAutoStart();
   19604:	4b1b      	ldr	r3, [pc, #108]	; (19674 <operateOnWaterEvent+0x328>)
   19606:	4798      	blx	r3
   19608:	e006      	b.n	19618 <operateOnWaterEvent+0x2cc>
				}
				else
				{
					simEventTemp[18] = registerEvent('W'); //report To SIM overhead tank is empty.
   1960a:	2057      	movs	r0, #87	; 0x57
   1960c:	4b14      	ldr	r3, [pc, #80]	; (19660 <operateOnWaterEvent+0x314>)
   1960e:	4798      	blx	r3
   19610:	0003      	movs	r3, r0
   19612:	001a      	movs	r2, r3
   19614:	4b13      	ldr	r3, [pc, #76]	; (19664 <operateOnWaterEvent+0x318>)
   19616:	749a      	strb	r2, [r3, #18]
				}
			}
		}
	}
	if (factory_settings_parameter_struct.ENABLE_GP)
   19618:	4b0d      	ldr	r3, [pc, #52]	; (19650 <operateOnWaterEvent+0x304>)
   1961a:	791b      	ldrb	r3, [r3, #4]
   1961c:	2b00      	cmp	r3, #0
   1961e:	d004      	beq.n	1962a <operateOnWaterEvent+0x2de>
	{
		updateOverheadLevel(oLevel);
   19620:	1dbb      	adds	r3, r7, #6
   19622:	781b      	ldrb	r3, [r3, #0]
   19624:	0018      	movs	r0, r3
   19626:	4b14      	ldr	r3, [pc, #80]	; (19678 <operateOnWaterEvent+0x32c>)
   19628:	4798      	blx	r3
	}
	updateUndergroundLevel(uLevel);
   1962a:	1dfb      	adds	r3, r7, #7
   1962c:	781b      	ldrb	r3, [r3, #0]
   1962e:	0018      	movs	r0, r3
   19630:	4b12      	ldr	r3, [pc, #72]	; (1967c <operateOnWaterEvent+0x330>)
   19632:	4798      	blx	r3
   19634:	e002      	b.n	1963c <operateOnWaterEvent+0x2f0>
			return;
   19636:	46c0      	nop			; (mov r8, r8)
   19638:	e000      	b.n	1963c <operateOnWaterEvent+0x2f0>
				return;
   1963a:	46c0      	nop			; (mov r8, r8)
}
   1963c:	46bd      	mov	sp, r7
   1963e:	b002      	add	sp, #8
   19640:	bd80      	pop	{r7, pc}
   19642:	46c0      	nop			; (mov r8, r8)
   19644:	20000765 	.word	0x20000765
   19648:	2000075a 	.word	0x2000075a
   1964c:	20000838 	.word	0x20000838
   19650:	20000638 	.word	0x20000638
   19654:	2000077c 	.word	0x2000077c
   19658:	0001a795 	.word	0x0001a795
   1965c:	0001b0b5 	.word	0x0001b0b5
   19660:	00014805 	.word	0x00014805
   19664:	20000714 	.word	0x20000714
   19668:	20000564 	.word	0x20000564
   1966c:	200007a4 	.word	0x200007a4
   19670:	20000660 	.word	0x20000660
   19674:	0001ab15 	.word	0x0001ab15
   19678:	00018e85 	.word	0x00018e85
   1967c:	00018fb5 	.word	0x00018fb5

00019680 <Configure_ADC0>:

void Configure_ADC0(void)
{
   19680:	b580      	push	{r7, lr}
   19682:	b08c      	sub	sp, #48	; 0x30
   19684:	af00      	add	r7, sp, #0
	struct adc_config config;
	adc_get_config_defaults(&config);
   19686:	003b      	movs	r3, r7
   19688:	0018      	movs	r0, r3
   1968a:	4b1a      	ldr	r3, [pc, #104]	; (196f4 <Configure_ADC0+0x74>)
   1968c:	4798      	blx	r3
	config.positive_input = ADC_POSITIVE_INPUT_PIN19;
   1968e:	003b      	movs	r3, r7
   19690:	2213      	movs	r2, #19
   19692:	731a      	strb	r2, [r3, #12]
	config.negative_input = ADC_NEGATIVE_INPUT_GND;
   19694:	003b      	movs	r3, r7
   19696:	22c0      	movs	r2, #192	; 0xc0
   19698:	0152      	lsls	r2, r2, #5
   1969a:	81da      	strh	r2, [r3, #14]
	config.reference      = ADC_REFERENCE_AREFA;//ADC_REFERENCE_INT1V;
   1969c:	003b      	movs	r3, r7
   1969e:	2203      	movs	r2, #3
   196a0:	705a      	strb	r2, [r3, #1]
	config.clock_source   = GCLK_GENERATOR_3;
   196a2:	003b      	movs	r3, r7
   196a4:	2203      	movs	r2, #3
   196a6:	701a      	strb	r2, [r3, #0]
	config.gain_factor    = ADC_GAIN_FACTOR_1X;
   196a8:	003b      	movs	r3, r7
   196aa:	2200      	movs	r2, #0
   196ac:	609a      	str	r2, [r3, #8]
	config.resolution	= ADC_RESOLUTION_12BIT;
   196ae:	003b      	movs	r3, r7
   196b0:	2200      	movs	r2, #0
   196b2:	711a      	strb	r2, [r3, #4]
	
	config.clock_prescaler = ADC_CLOCK_PRESCALER_DIV64; //125kHz adc clock (8MHz/64)
   196b4:	003b      	movs	r3, r7
   196b6:	2280      	movs	r2, #128	; 0x80
   196b8:	00d2      	lsls	r2, r2, #3
   196ba:	805a      	strh	r2, [r3, #2]
	
	config.run_in_standby = true;
   196bc:	003b      	movs	r3, r7
   196be:	2201      	movs	r2, #1
   196c0:	755a      	strb	r2, [r3, #21]
	
	adc_init(&adc_inst, ADC, &config);// Initialize the ADC
   196c2:	003a      	movs	r2, r7
   196c4:	490c      	ldr	r1, [pc, #48]	; (196f8 <Configure_ADC0+0x78>)
   196c6:	4b0d      	ldr	r3, [pc, #52]	; (196fc <Configure_ADC0+0x7c>)
   196c8:	0018      	movs	r0, r3
   196ca:	4b0d      	ldr	r3, [pc, #52]	; (19700 <Configure_ADC0+0x80>)
   196cc:	4798      	blx	r3
	
	/************************************************************************/
	/*ADC Callback Setup                                                    */
	adc_register_callback(&adc_inst, adc_buffer_complete_callback, ADC_CALLBACK_READ_BUFFER);
   196ce:	490d      	ldr	r1, [pc, #52]	; (19704 <Configure_ADC0+0x84>)
   196d0:	4b0a      	ldr	r3, [pc, #40]	; (196fc <Configure_ADC0+0x7c>)
   196d2:	2200      	movs	r2, #0
   196d4:	0018      	movs	r0, r3
   196d6:	4b0c      	ldr	r3, [pc, #48]	; (19708 <Configure_ADC0+0x88>)
   196d8:	4798      	blx	r3
	adc_enable_callback(&adc_inst, ADC_CALLBACK_READ_BUFFER);
   196da:	4b08      	ldr	r3, [pc, #32]	; (196fc <Configure_ADC0+0x7c>)
   196dc:	2100      	movs	r1, #0
   196de:	0018      	movs	r0, r3
   196e0:	4b0a      	ldr	r3, [pc, #40]	; (1970c <Configure_ADC0+0x8c>)
   196e2:	4798      	blx	r3
	/************************************************************************/
	
	adc_enable(&adc_inst);
   196e4:	4b05      	ldr	r3, [pc, #20]	; (196fc <Configure_ADC0+0x7c>)
   196e6:	0018      	movs	r0, r3
   196e8:	4b09      	ldr	r3, [pc, #36]	; (19710 <Configure_ADC0+0x90>)
   196ea:	4798      	blx	r3
}
   196ec:	46c0      	nop			; (mov r8, r8)
   196ee:	46bd      	mov	sp, r7
   196f0:	b00c      	add	sp, #48	; 0x30
   196f2:	bd80      	pop	{r7, pc}
   196f4:	0001cbb9 	.word	0x0001cbb9
   196f8:	42004000 	.word	0x42004000
   196fc:	200007fc 	.word	0x200007fc
   19700:	0001d209 	.word	0x0001d209
   19704:	00019715 	.word	0x00019715
   19708:	0001d509 	.word	0x0001d509
   1970c:	00018b59 	.word	0x00018b59
   19710:	000189c1 	.word	0x000189c1

00019714 <adc_buffer_complete_callback>:

void adc_buffer_complete_callback(const struct adc_module *const module)
{
   19714:	b580      	push	{r7, lr}
   19716:	b082      	sub	sp, #8
   19718:	af00      	add	r7, sp, #0
   1971a:	6078      	str	r0, [r7, #4]
	adc_read_buffer_done = true;
   1971c:	4b06      	ldr	r3, [pc, #24]	; (19738 <adc_buffer_complete_callback+0x24>)
   1971e:	2201      	movs	r2, #1
   19720:	701a      	strb	r2, [r3, #0]
	vTaskNotifyGiveFromISR(motorTask,NULL);
   19722:	4b06      	ldr	r3, [pc, #24]	; (1973c <adc_buffer_complete_callback+0x28>)
   19724:	681b      	ldr	r3, [r3, #0]
   19726:	2100      	movs	r1, #0
   19728:	0018      	movs	r0, r3
   1972a:	4b05      	ldr	r3, [pc, #20]	; (19740 <adc_buffer_complete_callback+0x2c>)
   1972c:	4798      	blx	r3
}
   1972e:	46c0      	nop			; (mov r8, r8)
   19730:	46bd      	mov	sp, r7
   19732:	b002      	add	sp, #8
   19734:	bd80      	pop	{r7, pc}
   19736:	46c0      	nop			; (mov r8, r8)
   19738:	2000073d 	.word	0x2000073d
   1973c:	20000250 	.word	0x20000250
   19740:	000207e5 	.word	0x000207e5

00019744 <Read_ADC0>:

uint32_t Read_ADC0(uint32_t adc_pin,uint16_t samples)
{
   19744:	b580      	push	{r7, lr}
   19746:	b084      	sub	sp, #16
   19748:	af00      	add	r7, sp, #0
   1974a:	6078      	str	r0, [r7, #4]
   1974c:	000a      	movs	r2, r1
   1974e:	1cbb      	adds	r3, r7, #2
   19750:	801a      	strh	r2, [r3, #0]
	adc_set_positive_input(&adc_inst, adc_pin);
   19752:	687b      	ldr	r3, [r7, #4]
   19754:	b2da      	uxtb	r2, r3
   19756:	4b24      	ldr	r3, [pc, #144]	; (197e8 <Read_ADC0+0xa4>)
   19758:	0011      	movs	r1, r2
   1975a:	0018      	movs	r0, r3
   1975c:	4b23      	ldr	r3, [pc, #140]	; (197ec <Read_ADC0+0xa8>)
   1975e:	4798      	blx	r3
	uint16_t current_value = 0;
   19760:	2308      	movs	r3, #8
   19762:	18fb      	adds	r3, r7, r3
   19764:	2200      	movs	r2, #0
   19766:	801a      	strh	r2, [r3, #0]
	uint32_t total_value = 0;
   19768:	2300      	movs	r3, #0
   1976a:	60fb      	str	r3, [r7, #12]
	for (uint16_t uintLoop=0;uintLoop<samples;uintLoop++)
   1976c:	230a      	movs	r3, #10
   1976e:	18fb      	adds	r3, r7, r3
   19770:	2200      	movs	r2, #0
   19772:	801a      	strh	r2, [r3, #0]
   19774:	e026      	b.n	197c4 <Read_ADC0+0x80>
	{
		current_value = 0;
   19776:	2308      	movs	r3, #8
   19778:	18fb      	adds	r3, r7, r3
   1977a:	2200      	movs	r2, #0
   1977c:	801a      	strh	r2, [r3, #0]
		adc_start_conversion(&adc_inst);
   1977e:	4b1a      	ldr	r3, [pc, #104]	; (197e8 <Read_ADC0+0xa4>)
   19780:	0018      	movs	r0, r3
   19782:	4b1b      	ldr	r3, [pc, #108]	; (197f0 <Read_ADC0+0xac>)
   19784:	4798      	blx	r3
		while((adc_get_status(&adc_inst) & ADC_STATUS_RESULT_READY) != 1);
   19786:	46c0      	nop			; (mov r8, r8)
   19788:	4b17      	ldr	r3, [pc, #92]	; (197e8 <Read_ADC0+0xa4>)
   1978a:	0018      	movs	r0, r3
   1978c:	4b19      	ldr	r3, [pc, #100]	; (197f4 <Read_ADC0+0xb0>)
   1978e:	4798      	blx	r3
   19790:	0002      	movs	r2, r0
   19792:	2301      	movs	r3, #1
   19794:	4013      	ands	r3, r2
   19796:	2b01      	cmp	r3, #1
   19798:	d1f6      	bne.n	19788 <Read_ADC0+0x44>
		adc_read(&adc_inst, &current_value);
   1979a:	2308      	movs	r3, #8
   1979c:	18fa      	adds	r2, r7, r3
   1979e:	4b12      	ldr	r3, [pc, #72]	; (197e8 <Read_ADC0+0xa4>)
   197a0:	0011      	movs	r1, r2
   197a2:	0018      	movs	r0, r3
   197a4:	4b14      	ldr	r3, [pc, #80]	; (197f8 <Read_ADC0+0xb4>)
   197a6:	4798      	blx	r3
		total_value+=current_value;
   197a8:	2308      	movs	r3, #8
   197aa:	18fb      	adds	r3, r7, r3
   197ac:	881b      	ldrh	r3, [r3, #0]
   197ae:	001a      	movs	r2, r3
   197b0:	68fb      	ldr	r3, [r7, #12]
   197b2:	189b      	adds	r3, r3, r2
   197b4:	60fb      	str	r3, [r7, #12]
	for (uint16_t uintLoop=0;uintLoop<samples;uintLoop++)
   197b6:	230a      	movs	r3, #10
   197b8:	18fb      	adds	r3, r7, r3
   197ba:	881a      	ldrh	r2, [r3, #0]
   197bc:	230a      	movs	r3, #10
   197be:	18fb      	adds	r3, r7, r3
   197c0:	3201      	adds	r2, #1
   197c2:	801a      	strh	r2, [r3, #0]
   197c4:	230a      	movs	r3, #10
   197c6:	18fa      	adds	r2, r7, r3
   197c8:	1cbb      	adds	r3, r7, #2
   197ca:	8812      	ldrh	r2, [r2, #0]
   197cc:	881b      	ldrh	r3, [r3, #0]
   197ce:	429a      	cmp	r2, r3
   197d0:	d3d1      	bcc.n	19776 <Read_ADC0+0x32>
	}
	
	return (total_value/samples);
   197d2:	1cbb      	adds	r3, r7, #2
   197d4:	881a      	ldrh	r2, [r3, #0]
   197d6:	4b09      	ldr	r3, [pc, #36]	; (197fc <Read_ADC0+0xb8>)
   197d8:	0011      	movs	r1, r2
   197da:	68f8      	ldr	r0, [r7, #12]
   197dc:	4798      	blx	r3
   197de:	0003      	movs	r3, r0
}
   197e0:	0018      	movs	r0, r3
   197e2:	46bd      	mov	sp, r7
   197e4:	b004      	add	sp, #16
   197e6:	bd80      	pop	{r7, pc}
   197e8:	200007fc 	.word	0x200007fc
   197ec:	00018ae5 	.word	0x00018ae5
   197f0:	00018a21 	.word	0x00018a21
   197f4:	00018919 	.word	0x00018919
   197f8:	00018a69 	.word	0x00018a69
   197fc:	000260e5 	.word	0x000260e5

00019800 <Read_Voltage_ADC0>:


uint32_t Read_Voltage_ADC0(uint32_t adc_pin)
{
   19800:	b5f0      	push	{r4, r5, r6, r7, lr}
   19802:	b099      	sub	sp, #100	; 0x64
   19804:	af00      	add	r7, sp, #0
   19806:	6378      	str	r0, [r7, #52]	; 0x34
   19808:	466b      	mov	r3, sp
   1980a:	633b      	str	r3, [r7, #48]	; 0x30
	delay_ms(5);
   1980c:	2000      	movs	r0, #0
   1980e:	4ba3      	ldr	r3, [pc, #652]	; (19a9c <Read_Voltage_ADC0+0x29c>)
   19810:	4798      	blx	r3
   19812:	0003      	movs	r3, r0
   19814:	61bb      	str	r3, [r7, #24]
   19816:	2300      	movs	r3, #0
   19818:	61fb      	str	r3, [r7, #28]
   1981a:	69b8      	ldr	r0, [r7, #24]
   1981c:	69f9      	ldr	r1, [r7, #28]
   1981e:	0003      	movs	r3, r0
   19820:	000c      	movs	r4, r1
   19822:	0f9a      	lsrs	r2, r3, #30
   19824:	00a6      	lsls	r6, r4, #2
   19826:	4316      	orrs	r6, r2
   19828:	009d      	lsls	r5, r3, #2
   1982a:	000a      	movs	r2, r1
   1982c:	0001      	movs	r1, r0
   1982e:	1949      	adds	r1, r1, r5
   19830:	4172      	adcs	r2, r6
   19832:	4b9b      	ldr	r3, [pc, #620]	; (19aa0 <Read_Voltage_ADC0+0x2a0>)
   19834:	2400      	movs	r4, #0
   19836:	18c9      	adds	r1, r1, r3
   19838:	4162      	adcs	r2, r4
   1983a:	0008      	movs	r0, r1
   1983c:	0011      	movs	r1, r2
   1983e:	4c99      	ldr	r4, [pc, #612]	; (19aa4 <Read_Voltage_ADC0+0x2a4>)
   19840:	4a99      	ldr	r2, [pc, #612]	; (19aa8 <Read_Voltage_ADC0+0x2a8>)
   19842:	2300      	movs	r3, #0
   19844:	47a0      	blx	r4
   19846:	0003      	movs	r3, r0
   19848:	000c      	movs	r4, r1
   1984a:	0018      	movs	r0, r3
   1984c:	4b97      	ldr	r3, [pc, #604]	; (19aac <Read_Voltage_ADC0+0x2ac>)
   1984e:	4798      	blx	r3
	
	adc_set_positive_input(&adc_inst, adc_pin);
   19850:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   19852:	b2db      	uxtb	r3, r3
   19854:	4a96      	ldr	r2, [pc, #600]	; (19ab0 <Read_Voltage_ADC0+0x2b0>)
   19856:	0019      	movs	r1, r3
   19858:	0010      	movs	r0, r2
   1985a:	4b96      	ldr	r3, [pc, #600]	; (19ab4 <Read_Voltage_ADC0+0x2b4>)
   1985c:	4798      	blx	r3
	//read 500 samples
	
	uint16_t no_of_samples = 544;  //272 samples contain one full cycle
   1985e:	2328      	movs	r3, #40	; 0x28
   19860:	2230      	movs	r2, #48	; 0x30
   19862:	18ba      	adds	r2, r7, r2
   19864:	18d2      	adds	r2, r2, r3
   19866:	2388      	movs	r3, #136	; 0x88
   19868:	009b      	lsls	r3, r3, #2
   1986a:	8013      	strh	r3, [r2, #0]
	uint16_t samples_buffer[no_of_samples];
   1986c:	2328      	movs	r3, #40	; 0x28
   1986e:	2230      	movs	r2, #48	; 0x30
   19870:	4694      	mov	ip, r2
   19872:	44bc      	add	ip, r7
   19874:	4463      	add	r3, ip
   19876:	881a      	ldrh	r2, [r3, #0]
   19878:	0013      	movs	r3, r2
   1987a:	3b01      	subs	r3, #1
   1987c:	657b      	str	r3, [r7, #84]	; 0x54
   1987e:	613a      	str	r2, [r7, #16]
   19880:	2300      	movs	r3, #0
   19882:	617b      	str	r3, [r7, #20]
   19884:	6938      	ldr	r0, [r7, #16]
   19886:	6979      	ldr	r1, [r7, #20]
   19888:	0003      	movs	r3, r0
   1988a:	0f1b      	lsrs	r3, r3, #28
   1988c:	000c      	movs	r4, r1
   1988e:	0124      	lsls	r4, r4, #4
   19890:	62fc      	str	r4, [r7, #44]	; 0x2c
   19892:	6afc      	ldr	r4, [r7, #44]	; 0x2c
   19894:	431c      	orrs	r4, r3
   19896:	62fc      	str	r4, [r7, #44]	; 0x2c
   19898:	0003      	movs	r3, r0
   1989a:	011b      	lsls	r3, r3, #4
   1989c:	62bb      	str	r3, [r7, #40]	; 0x28
   1989e:	60ba      	str	r2, [r7, #8]
   198a0:	2300      	movs	r3, #0
   198a2:	60fb      	str	r3, [r7, #12]
   198a4:	68b8      	ldr	r0, [r7, #8]
   198a6:	68f9      	ldr	r1, [r7, #12]
   198a8:	0003      	movs	r3, r0
   198aa:	0f1b      	lsrs	r3, r3, #28
   198ac:	000c      	movs	r4, r1
   198ae:	0124      	lsls	r4, r4, #4
   198b0:	627c      	str	r4, [r7, #36]	; 0x24
   198b2:	6a7c      	ldr	r4, [r7, #36]	; 0x24
   198b4:	431c      	orrs	r4, r3
   198b6:	627c      	str	r4, [r7, #36]	; 0x24
   198b8:	0003      	movs	r3, r0
   198ba:	011b      	lsls	r3, r3, #4
   198bc:	623b      	str	r3, [r7, #32]
   198be:	0013      	movs	r3, r2
   198c0:	005b      	lsls	r3, r3, #1
   198c2:	3301      	adds	r3, #1
   198c4:	3307      	adds	r3, #7
   198c6:	08db      	lsrs	r3, r3, #3
   198c8:	00db      	lsls	r3, r3, #3
   198ca:	466a      	mov	r2, sp
   198cc:	1ad3      	subs	r3, r2, r3
   198ce:	469d      	mov	sp, r3
   198d0:	466b      	mov	r3, sp
   198d2:	3301      	adds	r3, #1
   198d4:	085b      	lsrs	r3, r3, #1
   198d6:	005b      	lsls	r3, r3, #1
   198d8:	653b      	str	r3, [r7, #80]	; 0x50
	uint32_t temp = xTaskGetTickCount();
   198da:	4b77      	ldr	r3, [pc, #476]	; (19ab8 <Read_Voltage_ADC0+0x2b8>)
   198dc:	4798      	blx	r3
   198de:	0003      	movs	r3, r0
   198e0:	64fb      	str	r3, [r7, #76]	; 0x4c
	
	/************************************************************************/
	/*Using Buffered ADC to take Readings                                   */
	/************************************************************************/
	adc_read_buffer_done = false;
   198e2:	4b76      	ldr	r3, [pc, #472]	; (19abc <Read_Voltage_ADC0+0x2bc>)
   198e4:	2200      	movs	r2, #0
   198e6:	701a      	strb	r2, [r3, #0]
	
	while(adc_read_buffer_job(&adc_inst, samples_buffer, no_of_samples)!=STATUS_OK)
   198e8:	46c0      	nop			; (mov r8, r8)
   198ea:	6d39      	ldr	r1, [r7, #80]	; 0x50
   198ec:	2328      	movs	r3, #40	; 0x28
   198ee:	2230      	movs	r2, #48	; 0x30
   198f0:	4694      	mov	ip, r2
   198f2:	44bc      	add	ip, r7
   198f4:	4463      	add	r3, ip
   198f6:	881a      	ldrh	r2, [r3, #0]
   198f8:	4b6d      	ldr	r3, [pc, #436]	; (19ab0 <Read_Voltage_ADC0+0x2b0>)
   198fa:	0018      	movs	r0, r3
   198fc:	4b70      	ldr	r3, [pc, #448]	; (19ac0 <Read_Voltage_ADC0+0x2c0>)
   198fe:	4798      	blx	r3
   19900:	1e03      	subs	r3, r0, #0
   19902:	d1f2      	bne.n	198ea <Read_Voltage_ADC0+0xea>
	{}
	ulTaskNotifyTake(pdTRUE,100/portTICK_PERIOD_MS);
   19904:	2164      	movs	r1, #100	; 0x64
   19906:	2001      	movs	r0, #1
   19908:	4b6e      	ldr	r3, [pc, #440]	; (19ac4 <Read_Voltage_ADC0+0x2c4>)
   1990a:	4798      	blx	r3
	//while (adc_read(&adc_inst, &samples_buffer[i]) != STATUS_OK) {
	//}
	//}

	
	if(adc_read_buffer_done)
   1990c:	4b6b      	ldr	r3, [pc, #428]	; (19abc <Read_Voltage_ADC0+0x2bc>)
   1990e:	781b      	ldrb	r3, [r3, #0]
   19910:	2b00      	cmp	r3, #0
   19912:	d100      	bne.n	19916 <Read_Voltage_ADC0+0x116>
   19914:	e0bb      	b.n	19a8e <Read_Voltage_ADC0+0x28e>
	{
		uint32_t square = 0;
   19916:	2300      	movs	r3, #0
   19918:	65fb      	str	r3, [r7, #92]	; 0x5c
		double  mean = 0.0;
   1991a:	2300      	movs	r3, #0
   1991c:	2400      	movs	r4, #0
   1991e:	643b      	str	r3, [r7, #64]	; 0x40
   19920:	647c      	str	r4, [r7, #68]	; 0x44
		double  root = 0.0;
   19922:	2300      	movs	r3, #0
   19924:	2400      	movs	r4, #0
   19926:	63bb      	str	r3, [r7, #56]	; 0x38
   19928:	63fc      	str	r4, [r7, #60]	; 0x3c
		
		for (uint16_t i = 0; i < no_of_samples; i++)
   1992a:	232a      	movs	r3, #42	; 0x2a
   1992c:	2230      	movs	r2, #48	; 0x30
   1992e:	4694      	mov	ip, r2
   19930:	44bc      	add	ip, r7
   19932:	4463      	add	r3, ip
   19934:	2200      	movs	r2, #0
   19936:	801a      	strh	r2, [r3, #0]
   19938:	e032      	b.n	199a0 <Read_Voltage_ADC0+0x1a0>
		{
			square += pow(samples_buffer[i], 2);
   1993a:	232a      	movs	r3, #42	; 0x2a
   1993c:	2230      	movs	r2, #48	; 0x30
   1993e:	4694      	mov	ip, r2
   19940:	44bc      	add	ip, r7
   19942:	4463      	add	r3, ip
   19944:	881a      	ldrh	r2, [r3, #0]
   19946:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   19948:	0052      	lsls	r2, r2, #1
   1994a:	5ad2      	ldrh	r2, [r2, r3]
   1994c:	4b5e      	ldr	r3, [pc, #376]	; (19ac8 <Read_Voltage_ADC0+0x2c8>)
   1994e:	0010      	movs	r0, r2
   19950:	4798      	blx	r3
   19952:	2300      	movs	r3, #0
   19954:	2480      	movs	r4, #128	; 0x80
   19956:	05e4      	lsls	r4, r4, #23
   19958:	001a      	movs	r2, r3
   1995a:	0023      	movs	r3, r4
   1995c:	4c5b      	ldr	r4, [pc, #364]	; (19acc <Read_Voltage_ADC0+0x2cc>)
   1995e:	47a0      	blx	r4
   19960:	0005      	movs	r5, r0
   19962:	000e      	movs	r6, r1
   19964:	4b58      	ldr	r3, [pc, #352]	; (19ac8 <Read_Voltage_ADC0+0x2c8>)
   19966:	6df8      	ldr	r0, [r7, #92]	; 0x5c
   19968:	4798      	blx	r3
   1996a:	4c59      	ldr	r4, [pc, #356]	; (19ad0 <Read_Voltage_ADC0+0x2d0>)
   1996c:	002a      	movs	r2, r5
   1996e:	0033      	movs	r3, r6
   19970:	47a0      	blx	r4
   19972:	0003      	movs	r3, r0
   19974:	000c      	movs	r4, r1
   19976:	0019      	movs	r1, r3
   19978:	0022      	movs	r2, r4
   1997a:	4b56      	ldr	r3, [pc, #344]	; (19ad4 <Read_Voltage_ADC0+0x2d4>)
   1997c:	0008      	movs	r0, r1
   1997e:	0011      	movs	r1, r2
   19980:	4798      	blx	r3
   19982:	0003      	movs	r3, r0
   19984:	65fb      	str	r3, [r7, #92]	; 0x5c
		for (uint16_t i = 0; i < no_of_samples; i++)
   19986:	232a      	movs	r3, #42	; 0x2a
   19988:	2230      	movs	r2, #48	; 0x30
   1998a:	4694      	mov	ip, r2
   1998c:	44bc      	add	ip, r7
   1998e:	4463      	add	r3, ip
   19990:	881a      	ldrh	r2, [r3, #0]
   19992:	232a      	movs	r3, #42	; 0x2a
   19994:	2130      	movs	r1, #48	; 0x30
   19996:	468c      	mov	ip, r1
   19998:	44bc      	add	ip, r7
   1999a:	4463      	add	r3, ip
   1999c:	3201      	adds	r2, #1
   1999e:	801a      	strh	r2, [r3, #0]
   199a0:	232a      	movs	r3, #42	; 0x2a
   199a2:	2230      	movs	r2, #48	; 0x30
   199a4:	18ba      	adds	r2, r7, r2
   199a6:	18d2      	adds	r2, r2, r3
   199a8:	2328      	movs	r3, #40	; 0x28
   199aa:	2130      	movs	r1, #48	; 0x30
   199ac:	468c      	mov	ip, r1
   199ae:	44bc      	add	ip, r7
   199b0:	4463      	add	r3, ip
   199b2:	8812      	ldrh	r2, [r2, #0]
   199b4:	881b      	ldrh	r3, [r3, #0]
   199b6:	429a      	cmp	r2, r3
   199b8:	d3bf      	bcc.n	1993a <Read_Voltage_ADC0+0x13a>
		}
		
		mean = (square / (float)(no_of_samples));
   199ba:	4b47      	ldr	r3, [pc, #284]	; (19ad8 <Read_Voltage_ADC0+0x2d8>)
   199bc:	6df8      	ldr	r0, [r7, #92]	; 0x5c
   199be:	4798      	blx	r3
   199c0:	1c04      	adds	r4, r0, #0
   199c2:	2328      	movs	r3, #40	; 0x28
   199c4:	2230      	movs	r2, #48	; 0x30
   199c6:	4694      	mov	ip, r2
   199c8:	44bc      	add	ip, r7
   199ca:	4463      	add	r3, ip
   199cc:	881a      	ldrh	r2, [r3, #0]
   199ce:	4b42      	ldr	r3, [pc, #264]	; (19ad8 <Read_Voltage_ADC0+0x2d8>)
   199d0:	0010      	movs	r0, r2
   199d2:	4798      	blx	r3
   199d4:	1c02      	adds	r2, r0, #0
   199d6:	4b41      	ldr	r3, [pc, #260]	; (19adc <Read_Voltage_ADC0+0x2dc>)
   199d8:	1c11      	adds	r1, r2, #0
   199da:	1c20      	adds	r0, r4, #0
   199dc:	4798      	blx	r3
   199de:	1c03      	adds	r3, r0, #0
   199e0:	1c1a      	adds	r2, r3, #0
   199e2:	4b3f      	ldr	r3, [pc, #252]	; (19ae0 <Read_Voltage_ADC0+0x2e0>)
   199e4:	1c10      	adds	r0, r2, #0
   199e6:	4798      	blx	r3
   199e8:	0003      	movs	r3, r0
   199ea:	000c      	movs	r4, r1
   199ec:	643b      	str	r3, [r7, #64]	; 0x40
   199ee:	647c      	str	r4, [r7, #68]	; 0x44
		// Calculate Root.
		root = sqrt(mean);
   199f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   199f2:	6c7c      	ldr	r4, [r7, #68]	; 0x44
   199f4:	0018      	movs	r0, r3
   199f6:	0021      	movs	r1, r4
   199f8:	4b3a      	ldr	r3, [pc, #232]	; (19ae4 <Read_Voltage_ADC0+0x2e4>)
   199fa:	4798      	blx	r3
   199fc:	0003      	movs	r3, r0
   199fe:	000c      	movs	r4, r1
   19a00:	63bb      	str	r3, [r7, #56]	; 0x38
   19a02:	63fc      	str	r4, [r7, #60]	; 0x3c

		//
		temp = (root-20)*655/1000;
   19a04:	4c38      	ldr	r4, [pc, #224]	; (19ae8 <Read_Voltage_ADC0+0x2e8>)
   19a06:	2200      	movs	r2, #0
   19a08:	4b38      	ldr	r3, [pc, #224]	; (19aec <Read_Voltage_ADC0+0x2ec>)
   19a0a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
   19a0c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   19a0e:	47a0      	blx	r4
   19a10:	0003      	movs	r3, r0
   19a12:	000c      	movs	r4, r1
   19a14:	0018      	movs	r0, r3
   19a16:	0021      	movs	r1, r4
   19a18:	4c35      	ldr	r4, [pc, #212]	; (19af0 <Read_Voltage_ADC0+0x2f0>)
   19a1a:	2200      	movs	r2, #0
   19a1c:	4b35      	ldr	r3, [pc, #212]	; (19af4 <Read_Voltage_ADC0+0x2f4>)
   19a1e:	47a0      	blx	r4
   19a20:	0003      	movs	r3, r0
   19a22:	000c      	movs	r4, r1
   19a24:	0018      	movs	r0, r3
   19a26:	0021      	movs	r1, r4
   19a28:	4c33      	ldr	r4, [pc, #204]	; (19af8 <Read_Voltage_ADC0+0x2f8>)
   19a2a:	2200      	movs	r2, #0
   19a2c:	4b33      	ldr	r3, [pc, #204]	; (19afc <Read_Voltage_ADC0+0x2fc>)
   19a2e:	47a0      	blx	r4
   19a30:	0003      	movs	r3, r0
   19a32:	000c      	movs	r4, r1
   19a34:	0019      	movs	r1, r3
   19a36:	0022      	movs	r2, r4
   19a38:	4b26      	ldr	r3, [pc, #152]	; (19ad4 <Read_Voltage_ADC0+0x2d4>)
   19a3a:	0008      	movs	r0, r1
   19a3c:	0011      	movs	r1, r2
   19a3e:	4798      	blx	r3
   19a40:	0003      	movs	r3, r0
   19a42:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (abs(Analog_Parameter_Struct.PhaseRY_Voltage - temp)> 80)
   19a44:	4b2e      	ldr	r3, [pc, #184]	; (19b00 <Read_Voltage_ADC0+0x300>)
   19a46:	681a      	ldr	r2, [r3, #0]
   19a48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   19a4a:	1ad3      	subs	r3, r2, r3
   19a4c:	17da      	asrs	r2, r3, #31
   19a4e:	189b      	adds	r3, r3, r2
   19a50:	4053      	eors	r3, r2
   19a52:	2b50      	cmp	r3, #80	; 0x50
   19a54:	dd15      	ble.n	19a82 <Read_Voltage_ADC0+0x282>
		{
			delay_us(1);
   19a56:	2000      	movs	r0, #0
   19a58:	4b10      	ldr	r3, [pc, #64]	; (19a9c <Read_Voltage_ADC0+0x29c>)
   19a5a:	4798      	blx	r3
   19a5c:	0003      	movs	r3, r0
   19a5e:	603b      	str	r3, [r7, #0]
   19a60:	2300      	movs	r3, #0
   19a62:	607b      	str	r3, [r7, #4]
   19a64:	4b27      	ldr	r3, [pc, #156]	; (19b04 <Read_Voltage_ADC0+0x304>)
   19a66:	2400      	movs	r4, #0
   19a68:	6838      	ldr	r0, [r7, #0]
   19a6a:	6879      	ldr	r1, [r7, #4]
   19a6c:	18c0      	adds	r0, r0, r3
   19a6e:	4161      	adcs	r1, r4
   19a70:	4c0c      	ldr	r4, [pc, #48]	; (19aa4 <Read_Voltage_ADC0+0x2a4>)
   19a72:	4a25      	ldr	r2, [pc, #148]	; (19b08 <Read_Voltage_ADC0+0x308>)
   19a74:	2300      	movs	r3, #0
   19a76:	47a0      	blx	r4
   19a78:	0003      	movs	r3, r0
   19a7a:	000c      	movs	r4, r1
   19a7c:	0018      	movs	r0, r3
   19a7e:	4b0b      	ldr	r3, [pc, #44]	; (19aac <Read_Voltage_ADC0+0x2ac>)
   19a80:	4798      	blx	r3
		}
		//
		
		return (uint32_t)root;
   19a82:	4b14      	ldr	r3, [pc, #80]	; (19ad4 <Read_Voltage_ADC0+0x2d4>)
   19a84:	6bb8      	ldr	r0, [r7, #56]	; 0x38
   19a86:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   19a88:	4798      	blx	r3
   19a8a:	0003      	movs	r3, r0
   19a8c:	e000      	b.n	19a90 <Read_Voltage_ADC0+0x290>
	}
	else
	{
		return 0;
   19a8e:	2300      	movs	r3, #0
   19a90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   19a92:	4695      	mov	sp, r2
	//}
	//}
	//}
	//
	//return samples_buffer[5]; //0,1,2,3,4 are considered as voltage spikes
}
   19a94:	0018      	movs	r0, r3
   19a96:	46bd      	mov	sp, r7
   19a98:	b019      	add	sp, #100	; 0x64
   19a9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   19a9c:	000244cd 	.word	0x000244cd
   19aa0:	00001b57 	.word	0x00001b57
   19aa4:	0002644d 	.word	0x0002644d
   19aa8:	00001b58 	.word	0x00001b58
   19aac:	20000001 	.word	0x20000001
   19ab0:	200007fc 	.word	0x200007fc
   19ab4:	00018ae5 	.word	0x00018ae5
   19ab8:	0001fe3d 	.word	0x0001fe3d
   19abc:	2000073d 	.word	0x2000073d
   19ac0:	0001d549 	.word	0x0001d549
   19ac4:	00020751 	.word	0x00020751
   19ac8:	00028779 	.word	0x00028779
   19acc:	00024e51 	.word	0x00024e51
   19ad0:	00026c99 	.word	0x00026c99
   19ad4:	000264e1 	.word	0x000264e1
   19ad8:	00026c0d 	.word	0x00026c0d
   19adc:	0002669d 	.word	0x0002669d
   19ae0:	000287e9 	.word	0x000287e9
   19ae4:	000251a9 	.word	0x000251a9
   19ae8:	00028021 	.word	0x00028021
   19aec:	40340000 	.word	0x40340000
   19af0:	00027b21 	.word	0x00027b21
   19af4:	40847800 	.word	0x40847800
   19af8:	000272b9 	.word	0x000272b9
   19afc:	408f4000 	.word	0x408f4000
   19b00:	200006e4 	.word	0x200006e4
   19b04:	006acfbf 	.word	0x006acfbf
   19b08:	006acfc0 	.word	0x006acfc0

00019b0c <autoSetCurrent>:

void autoSetCurrent(void)
{
   19b0c:	b580      	push	{r7, lr}
   19b0e:	b084      	sub	sp, #16
   19b10:	af00      	add	r7, sp, #0
	if(getMotorState() && !startSequenceOn && !starDeltaTimerOn && !stopSequenceOn && getAllPhaseState())
   19b12:	4b2e      	ldr	r3, [pc, #184]	; (19bcc <autoSetCurrent+0xc0>)
   19b14:	4798      	blx	r3
   19b16:	1e03      	subs	r3, r0, #0
   19b18:	d04e      	beq.n	19bb8 <autoSetCurrent+0xac>
   19b1a:	4b2d      	ldr	r3, [pc, #180]	; (19bd0 <autoSetCurrent+0xc4>)
   19b1c:	781b      	ldrb	r3, [r3, #0]
   19b1e:	2201      	movs	r2, #1
   19b20:	4053      	eors	r3, r2
   19b22:	b2db      	uxtb	r3, r3
   19b24:	2b00      	cmp	r3, #0
   19b26:	d047      	beq.n	19bb8 <autoSetCurrent+0xac>
   19b28:	4b2a      	ldr	r3, [pc, #168]	; (19bd4 <autoSetCurrent+0xc8>)
   19b2a:	781b      	ldrb	r3, [r3, #0]
   19b2c:	2201      	movs	r2, #1
   19b2e:	4053      	eors	r3, r2
   19b30:	b2db      	uxtb	r3, r3
   19b32:	2b00      	cmp	r3, #0
   19b34:	d040      	beq.n	19bb8 <autoSetCurrent+0xac>
   19b36:	4b28      	ldr	r3, [pc, #160]	; (19bd8 <autoSetCurrent+0xcc>)
   19b38:	781b      	ldrb	r3, [r3, #0]
   19b3a:	2201      	movs	r2, #1
   19b3c:	4053      	eors	r3, r2
   19b3e:	b2db      	uxtb	r3, r3
   19b40:	2b00      	cmp	r3, #0
   19b42:	d039      	beq.n	19bb8 <autoSetCurrent+0xac>
   19b44:	4b25      	ldr	r3, [pc, #148]	; (19bdc <autoSetCurrent+0xd0>)
   19b46:	4798      	blx	r3
   19b48:	1e03      	subs	r3, r0, #0
   19b4a:	d035      	beq.n	19bb8 <autoSetCurrent+0xac>
	{
		uint32_t ADCcurrent = Analog_Parameter_Struct.Motor_Current;
   19b4c:	4b24      	ldr	r3, [pc, #144]	; (19be0 <autoSetCurrent+0xd4>)
   19b4e:	691b      	ldr	r3, [r3, #16]
   19b50:	60fb      	str	r3, [r7, #12]
		//ADCcurrent = Read_ADC0(ADC_POSITIVE_INPUT_PIN16,200);
		//xSemaphoreGive(xADC_Semaphore);
		//}
		
		
		if(ADCcurrent<250)     //ADC VALUE FOR 2.5A
   19b52:	68fb      	ldr	r3, [r7, #12]
   19b54:	2bf9      	cmp	r3, #249	; 0xf9
   19b56:	d806      	bhi.n	19b66 <autoSetCurrent+0x5a>
		{
			setCurrentDetection(false);
   19b58:	2000      	movs	r0, #0
   19b5a:	4b22      	ldr	r3, [pc, #136]	; (19be4 <autoSetCurrent+0xd8>)
   19b5c:	4798      	blx	r3
			setMotorMGRResponse('Y');		//ampere cleared
   19b5e:	2059      	movs	r0, #89	; 0x59
   19b60:	4b21      	ldr	r3, [pc, #132]	; (19be8 <autoSetCurrent+0xdc>)
   19b62:	4798      	blx	r3
			return;
   19b64:	e02e      	b.n	19bc4 <autoSetCurrent+0xb8>
		}
		
		uint32_t tempUnder = ADCcurrent  * user_settings_parameter_struct.underloadPerAddress / 100;
   19b66:	4b21      	ldr	r3, [pc, #132]	; (19bec <autoSetCurrent+0xe0>)
   19b68:	7f1b      	ldrb	r3, [r3, #28]
   19b6a:	001a      	movs	r2, r3
   19b6c:	68fb      	ldr	r3, [r7, #12]
   19b6e:	435a      	muls	r2, r3
   19b70:	4b1f      	ldr	r3, [pc, #124]	; (19bf0 <autoSetCurrent+0xe4>)
   19b72:	2164      	movs	r1, #100	; 0x64
   19b74:	0010      	movs	r0, r2
   19b76:	4798      	blx	r3
   19b78:	0003      	movs	r3, r0
   19b7a:	60bb      	str	r3, [r7, #8]
		uint32_t tempOver = ADCcurrent  * user_settings_parameter_struct.overloadPerAddress / 100;
   19b7c:	4b1b      	ldr	r3, [pc, #108]	; (19bec <autoSetCurrent+0xe0>)
   19b7e:	7f5b      	ldrb	r3, [r3, #29]
   19b80:	001a      	movs	r2, r3
   19b82:	68fb      	ldr	r3, [r7, #12]
   19b84:	435a      	muls	r2, r3
   19b86:	4b1a      	ldr	r3, [pc, #104]	; (19bf0 <autoSetCurrent+0xe4>)
   19b88:	2164      	movs	r1, #100	; 0x64
   19b8a:	0010      	movs	r0, r2
   19b8c:	4798      	blx	r3
   19b8e:	0003      	movs	r3, r0
   19b90:	607b      	str	r3, [r7, #4]

		setNormalLoadValue(ADCcurrent);
   19b92:	68fb      	ldr	r3, [r7, #12]
   19b94:	0018      	movs	r0, r3
   19b96:	4b17      	ldr	r3, [pc, #92]	; (19bf4 <autoSetCurrent+0xe8>)
   19b98:	4798      	blx	r3
		setUnderloadValue(tempUnder);
   19b9a:	68bb      	ldr	r3, [r7, #8]
   19b9c:	0018      	movs	r0, r3
   19b9e:	4b16      	ldr	r3, [pc, #88]	; (19bf8 <autoSetCurrent+0xec>)
   19ba0:	4798      	blx	r3
		setOverloadValue(tempOver);
   19ba2:	687b      	ldr	r3, [r7, #4]
   19ba4:	0018      	movs	r0, r3
   19ba6:	4b15      	ldr	r3, [pc, #84]	; (19bfc <autoSetCurrent+0xf0>)
   19ba8:	4798      	blx	r3
		setCurrentDetection(true);
   19baa:	2001      	movs	r0, #1
   19bac:	4b0d      	ldr	r3, [pc, #52]	; (19be4 <autoSetCurrent+0xd8>)
   19bae:	4798      	blx	r3
		setMotorMGRResponse('K');		//ampere settings complete
   19bb0:	204b      	movs	r0, #75	; 0x4b
   19bb2:	4b0d      	ldr	r3, [pc, #52]	; (19be8 <autoSetCurrent+0xdc>)
   19bb4:	4798      	blx	r3
	{
   19bb6:	e005      	b.n	19bc4 <autoSetCurrent+0xb8>
	}
	else
	{
		setCurrentDetection(false);
   19bb8:	2000      	movs	r0, #0
   19bba:	4b0a      	ldr	r3, [pc, #40]	; (19be4 <autoSetCurrent+0xd8>)
   19bbc:	4798      	blx	r3
		setMotorMGRResponse('Y');		//ampere cleared
   19bbe:	2059      	movs	r0, #89	; 0x59
   19bc0:	4b09      	ldr	r3, [pc, #36]	; (19be8 <autoSetCurrent+0xdc>)
   19bc2:	4798      	blx	r3
	}
}
   19bc4:	46bd      	mov	sp, r7
   19bc6:	b004      	add	sp, #16
   19bc8:	bd80      	pop	{r7, pc}
   19bca:	46c0      	nop			; (mov r8, r8)
   19bcc:	0001a795 	.word	0x0001a795
   19bd0:	20000785 	.word	0x20000785
   19bd4:	20000787 	.word	0x20000787
   19bd8:	20000774 	.word	0x20000774
   19bdc:	0001a72d 	.word	0x0001a72d
   19be0:	200006e4 	.word	0x200006e4
   19be4:	00011891 	.word	0x00011891
   19be8:	000149dd 	.word	0x000149dd
   19bec:	20000660 	.word	0x20000660
   19bf0:	000260e5 	.word	0x000260e5
   19bf4:	0001184d 	.word	0x0001184d
   19bf8:	000117c5 	.word	0x000117c5
   19bfc:	00011809 	.word	0x00011809

00019c00 <speakAmpere>:

void speakAmpere(void)
{
   19c00:	b580      	push	{r7, lr}
   19c02:	b084      	sub	sp, #16
   19c04:	af00      	add	r7, sp, #0
	if(getMotorState())
   19c06:	4b0d      	ldr	r3, [pc, #52]	; (19c3c <speakAmpere+0x3c>)
   19c08:	4798      	blx	r3
   19c0a:	1e03      	subs	r3, r0, #0
   19c0c:	d00f      	beq.n	19c2e <speakAmpere+0x2e>
	{
		char cTemp[8];
		
		uint32_t ADCcurrent = Analog_Parameter_Struct.Motor_Current_IntPart;
   19c0e:	4b0c      	ldr	r3, [pc, #48]	; (19c40 <speakAmpere+0x40>)
   19c10:	8a9b      	ldrh	r3, [r3, #20]
   19c12:	b29b      	uxth	r3, r3
   19c14:	60fb      	str	r3, [r7, #12]
		//xSemaphoreGive(xADC_Semaphore);
		//ADCcurrent = (ADCcurrent*7225)/100000;
		//xSemaphoreGive(xADC_Semaphore);
		//}
		
		utoa(ADCcurrent, cTemp, 10);
   19c16:	1d39      	adds	r1, r7, #4
   19c18:	68fb      	ldr	r3, [r7, #12]
   19c1a:	220a      	movs	r2, #10
   19c1c:	0018      	movs	r0, r3
   19c1e:	4b09      	ldr	r3, [pc, #36]	; (19c44 <speakAmpere+0x44>)
   19c20:	4798      	blx	r3
		playRepeatedFiles(cTemp);
   19c22:	1d3b      	adds	r3, r7, #4
   19c24:	0018      	movs	r0, r3
   19c26:	4b08      	ldr	r3, [pc, #32]	; (19c48 <speakAmpere+0x48>)
   19c28:	4798      	blx	r3
		return;
   19c2a:	46c0      	nop			; (mov r8, r8)
   19c2c:	e002      	b.n	19c34 <speakAmpere+0x34>
	}
	setMotorMGRResponse('-');
   19c2e:	202d      	movs	r0, #45	; 0x2d
   19c30:	4b06      	ldr	r3, [pc, #24]	; (19c4c <speakAmpere+0x4c>)
   19c32:	4798      	blx	r3
}
   19c34:	46bd      	mov	sp, r7
   19c36:	b004      	add	sp, #16
   19c38:	bd80      	pop	{r7, pc}
   19c3a:	46c0      	nop			; (mov r8, r8)
   19c3c:	0001a795 	.word	0x0001a795
   19c40:	200006e4 	.word	0x200006e4
   19c44:	00028f41 	.word	0x00028f41
   19c48:	000146d1 	.word	0x000146d1
   19c4c:	000149dd 	.word	0x000149dd

00019c50 <PR2_ISR>:

void PR2_ISR(void)
{
   19c50:	b5f0      	push	{r4, r5, r6, r7, lr}
   19c52:	b08b      	sub	sp, #44	; 0x2c
   19c54:	af00      	add	r7, sp, #0
	if (ucharPhase_Seq_Check_Flag==1)
   19c56:	4b77      	ldr	r3, [pc, #476]	; (19e34 <PR2_ISR+0x1e4>)
   19c58:	781b      	ldrb	r3, [r3, #0]
   19c5a:	b2db      	uxtb	r3, r3
   19c5c:	2b01      	cmp	r3, #1
   19c5e:	d000      	beq.n	19c62 <PR2_ISR+0x12>
   19c60:	e0e3      	b.n	19e2a <PR2_ISR+0x1da>
	{
		ucharPhase_1_Timer_Counter=0;
   19c62:	4b75      	ldr	r3, [pc, #468]	; (19e38 <PR2_ISR+0x1e8>)
   19c64:	2200      	movs	r2, #0
   19c66:	701a      	strb	r2, [r3, #0]
		delay_ms(5);
   19c68:	2000      	movs	r0, #0
   19c6a:	4b74      	ldr	r3, [pc, #464]	; (19e3c <PR2_ISR+0x1ec>)
   19c6c:	4798      	blx	r3
   19c6e:	0003      	movs	r3, r0
   19c70:	60bb      	str	r3, [r7, #8]
   19c72:	2300      	movs	r3, #0
   19c74:	60fb      	str	r3, [r7, #12]
   19c76:	68bb      	ldr	r3, [r7, #8]
   19c78:	68fc      	ldr	r4, [r7, #12]
   19c7a:	0f9a      	lsrs	r2, r3, #30
   19c7c:	00a0      	lsls	r0, r4, #2
   19c7e:	61f8      	str	r0, [r7, #28]
   19c80:	69f8      	ldr	r0, [r7, #28]
   19c82:	4310      	orrs	r0, r2
   19c84:	61f8      	str	r0, [r7, #28]
   19c86:	009b      	lsls	r3, r3, #2
   19c88:	61bb      	str	r3, [r7, #24]
   19c8a:	69bb      	ldr	r3, [r7, #24]
   19c8c:	69fc      	ldr	r4, [r7, #28]
   19c8e:	68b9      	ldr	r1, [r7, #8]
   19c90:	68fa      	ldr	r2, [r7, #12]
   19c92:	185b      	adds	r3, r3, r1
   19c94:	4154      	adcs	r4, r2
   19c96:	496a      	ldr	r1, [pc, #424]	; (19e40 <PR2_ISR+0x1f0>)
   19c98:	2200      	movs	r2, #0
   19c9a:	185b      	adds	r3, r3, r1
   19c9c:	4154      	adcs	r4, r2
   19c9e:	0018      	movs	r0, r3
   19ca0:	0021      	movs	r1, r4
   19ca2:	4c68      	ldr	r4, [pc, #416]	; (19e44 <PR2_ISR+0x1f4>)
   19ca4:	4a68      	ldr	r2, [pc, #416]	; (19e48 <PR2_ISR+0x1f8>)
   19ca6:	2300      	movs	r3, #0
   19ca8:	47a0      	blx	r4
   19caa:	0003      	movs	r3, r0
   19cac:	000c      	movs	r4, r1
   19cae:	0018      	movs	r0, r3
   19cb0:	4b66      	ldr	r3, [pc, #408]	; (19e4c <PR2_ISR+0x1fc>)
   19cb2:	4798      	blx	r3
		volatile unsigned char ucharHigh_Flag=0,ucharLow_Flag=0,ucharHigh_To_Low_Flag=0,ucharLow_To_High_Flag=0;
   19cb4:	2323      	movs	r3, #35	; 0x23
   19cb6:	18fb      	adds	r3, r7, r3
   19cb8:	2200      	movs	r2, #0
   19cba:	701a      	strb	r2, [r3, #0]
   19cbc:	2322      	movs	r3, #34	; 0x22
   19cbe:	18fb      	adds	r3, r7, r3
   19cc0:	2200      	movs	r2, #0
   19cc2:	701a      	strb	r2, [r3, #0]
   19cc4:	2321      	movs	r3, #33	; 0x21
   19cc6:	18fb      	adds	r3, r7, r3
   19cc8:	2200      	movs	r2, #0
   19cca:	701a      	strb	r2, [r3, #0]
   19ccc:	2320      	movs	r3, #32
   19cce:	18fb      	adds	r3, r7, r3
   19cd0:	2200      	movs	r2, #0
   19cd2:	701a      	strb	r2, [r3, #0]
		if (port_pin_get_input_level(PR2_PIN)==HIGH)
   19cd4:	202b      	movs	r0, #43	; 0x2b
   19cd6:	4b5e      	ldr	r3, [pc, #376]	; (19e50 <PR2_ISR+0x200>)
   19cd8:	4798      	blx	r3
   19cda:	1e03      	subs	r3, r0, #0
   19cdc:	d100      	bne.n	19ce0 <PR2_ISR+0x90>
   19cde:	e08e      	b.n	19dfe <PR2_ISR+0x1ae>
		{
			for (unsigned int uintLoop=0;uintLoop<120;uintLoop++)
   19ce0:	2300      	movs	r3, #0
   19ce2:	627b      	str	r3, [r7, #36]	; 0x24
   19ce4:	e085      	b.n	19df2 <PR2_ISR+0x1a2>
			{
				delay_us(25);
   19ce6:	2000      	movs	r0, #0
   19ce8:	4b54      	ldr	r3, [pc, #336]	; (19e3c <PR2_ISR+0x1ec>)
   19cea:	4798      	blx	r3
   19cec:	0003      	movs	r3, r0
   19cee:	603b      	str	r3, [r7, #0]
   19cf0:	2300      	movs	r3, #0
   19cf2:	607b      	str	r3, [r7, #4]
   19cf4:	6838      	ldr	r0, [r7, #0]
   19cf6:	6879      	ldr	r1, [r7, #4]
   19cf8:	0003      	movs	r3, r0
   19cfa:	000c      	movs	r4, r1
   19cfc:	0f9a      	lsrs	r2, r3, #30
   19cfe:	00a6      	lsls	r6, r4, #2
   19d00:	4316      	orrs	r6, r2
   19d02:	009d      	lsls	r5, r3, #2
   19d04:	0003      	movs	r3, r0
   19d06:	000c      	movs	r4, r1
   19d08:	195b      	adds	r3, r3, r5
   19d0a:	4174      	adcs	r4, r6
   19d0c:	0f9a      	lsrs	r2, r3, #30
   19d0e:	00a1      	lsls	r1, r4, #2
   19d10:	6179      	str	r1, [r7, #20]
   19d12:	6979      	ldr	r1, [r7, #20]
   19d14:	4311      	orrs	r1, r2
   19d16:	6179      	str	r1, [r7, #20]
   19d18:	009a      	lsls	r2, r3, #2
   19d1a:	613a      	str	r2, [r7, #16]
   19d1c:	6939      	ldr	r1, [r7, #16]
   19d1e:	697a      	ldr	r2, [r7, #20]
   19d20:	185b      	adds	r3, r3, r1
   19d22:	4154      	adcs	r4, r2
   19d24:	494b      	ldr	r1, [pc, #300]	; (19e54 <PR2_ISR+0x204>)
   19d26:	2200      	movs	r2, #0
   19d28:	185b      	adds	r3, r3, r1
   19d2a:	4154      	adcs	r4, r2
   19d2c:	0018      	movs	r0, r3
   19d2e:	0021      	movs	r1, r4
   19d30:	4c44      	ldr	r4, [pc, #272]	; (19e44 <PR2_ISR+0x1f4>)
   19d32:	4a49      	ldr	r2, [pc, #292]	; (19e58 <PR2_ISR+0x208>)
   19d34:	2300      	movs	r3, #0
   19d36:	47a0      	blx	r4
   19d38:	0003      	movs	r3, r0
   19d3a:	000c      	movs	r4, r1
   19d3c:	0018      	movs	r0, r3
   19d3e:	4b43      	ldr	r3, [pc, #268]	; (19e4c <PR2_ISR+0x1fc>)
   19d40:	4798      	blx	r3
				if ((port_pin_get_input_level(PR1_PIN)==HIGH)&&(ucharHigh_Flag==0))
   19d42:	202a      	movs	r0, #42	; 0x2a
   19d44:	4b42      	ldr	r3, [pc, #264]	; (19e50 <PR2_ISR+0x200>)
   19d46:	4798      	blx	r3
   19d48:	1e03      	subs	r3, r0, #0
   19d4a:	d014      	beq.n	19d76 <PR2_ISR+0x126>
   19d4c:	2323      	movs	r3, #35	; 0x23
   19d4e:	18fb      	adds	r3, r7, r3
   19d50:	781b      	ldrb	r3, [r3, #0]
   19d52:	b2db      	uxtb	r3, r3
   19d54:	2b00      	cmp	r3, #0
   19d56:	d10e      	bne.n	19d76 <PR2_ISR+0x126>
				{
					ucharHigh_Flag=1;
   19d58:	2323      	movs	r3, #35	; 0x23
   19d5a:	18fb      	adds	r3, r7, r3
   19d5c:	2201      	movs	r2, #1
   19d5e:	701a      	strb	r2, [r3, #0]
					if (ucharLow_Flag==1)
   19d60:	2322      	movs	r3, #34	; 0x22
   19d62:	18fb      	adds	r3, r7, r3
   19d64:	781b      	ldrb	r3, [r3, #0]
   19d66:	b2db      	uxtb	r3, r3
   19d68:	2b01      	cmp	r3, #1
   19d6a:	d104      	bne.n	19d76 <PR2_ISR+0x126>
					{
						ucharLow_To_High_Flag=1;
   19d6c:	2320      	movs	r3, #32
   19d6e:	18fb      	adds	r3, r7, r3
   19d70:	2201      	movs	r2, #1
   19d72:	701a      	strb	r2, [r3, #0]
						break;
   19d74:	e043      	b.n	19dfe <PR2_ISR+0x1ae>
					}
				}
				if ((port_pin_get_input_level(PR1_PIN)==LOW)&&(ucharLow_Flag==0))
   19d76:	202a      	movs	r0, #42	; 0x2a
   19d78:	4b35      	ldr	r3, [pc, #212]	; (19e50 <PR2_ISR+0x200>)
   19d7a:	4798      	blx	r3
   19d7c:	0003      	movs	r3, r0
   19d7e:	001a      	movs	r2, r3
   19d80:	2301      	movs	r3, #1
   19d82:	4053      	eors	r3, r2
   19d84:	b2db      	uxtb	r3, r3
   19d86:	2b00      	cmp	r3, #0
   19d88:	d013      	beq.n	19db2 <PR2_ISR+0x162>
   19d8a:	2322      	movs	r3, #34	; 0x22
   19d8c:	18fb      	adds	r3, r7, r3
   19d8e:	781b      	ldrb	r3, [r3, #0]
   19d90:	b2db      	uxtb	r3, r3
   19d92:	2b00      	cmp	r3, #0
   19d94:	d10d      	bne.n	19db2 <PR2_ISR+0x162>
				{
					ucharLow_Flag=1;
   19d96:	2322      	movs	r3, #34	; 0x22
   19d98:	18fb      	adds	r3, r7, r3
   19d9a:	2201      	movs	r2, #1
   19d9c:	701a      	strb	r2, [r3, #0]
					if (ucharHigh_Flag==1)
   19d9e:	2323      	movs	r3, #35	; 0x23
   19da0:	18fb      	adds	r3, r7, r3
   19da2:	781b      	ldrb	r3, [r3, #0]
   19da4:	b2db      	uxtb	r3, r3
   19da6:	2b01      	cmp	r3, #1
   19da8:	d103      	bne.n	19db2 <PR2_ISR+0x162>
					{
						ucharHigh_To_Low_Flag=1;
   19daa:	2321      	movs	r3, #33	; 0x21
   19dac:	18fb      	adds	r3, r7, r3
   19dae:	2201      	movs	r2, #1
   19db0:	701a      	strb	r2, [r3, #0]
					}
				}
				if (ucharHigh_To_Low_Flag==1)
   19db2:	2321      	movs	r3, #33	; 0x21
   19db4:	18fb      	adds	r3, r7, r3
   19db6:	781b      	ldrb	r3, [r3, #0]
   19db8:	b2db      	uxtb	r3, r3
   19dba:	2b01      	cmp	r3, #1
   19dbc:	d10c      	bne.n	19dd8 <PR2_ISR+0x188>
				{
					// LCD takes data from structThreePhase_state, which should have latest sequence data.
					structThreePhase_state.u8t_phase_sequence_flag = THREEPHASE_OK;
   19dbe:	4b27      	ldr	r3, [pc, #156]	; (19e5c <PR2_ISR+0x20c>)
   19dc0:	2202      	movs	r2, #2
   19dc2:	701a      	strb	r2, [r3, #0]
					ucharPhase_Seq_Err_Flag=2;//0=undefined, 1=error, 2=ok
   19dc4:	4b26      	ldr	r3, [pc, #152]	; (19e60 <PR2_ISR+0x210>)
   19dc6:	2202      	movs	r2, #2
   19dc8:	701a      	strb	r2, [r3, #0]
					ucharPhase_Seq_Err_Counter=0;
   19dca:	4b26      	ldr	r3, [pc, #152]	; (19e64 <PR2_ISR+0x214>)
   19dcc:	2200      	movs	r2, #0
   19dce:	701a      	strb	r2, [r3, #0]
					ucharPhase_Seq_Check_Flag=0;
   19dd0:	4b18      	ldr	r3, [pc, #96]	; (19e34 <PR2_ISR+0x1e4>)
   19dd2:	2200      	movs	r2, #0
   19dd4:	701a      	strb	r2, [r3, #0]
					break;
   19dd6:	e012      	b.n	19dfe <PR2_ISR+0x1ae>
				}
				if ((port_pin_get_input_level(PR2_PIN)==LOW))
   19dd8:	202b      	movs	r0, #43	; 0x2b
   19dda:	4b1d      	ldr	r3, [pc, #116]	; (19e50 <PR2_ISR+0x200>)
   19ddc:	4798      	blx	r3
   19dde:	0003      	movs	r3, r0
   19de0:	001a      	movs	r2, r3
   19de2:	2301      	movs	r3, #1
   19de4:	4053      	eors	r3, r2
   19de6:	b2db      	uxtb	r3, r3
   19de8:	2b00      	cmp	r3, #0
   19dea:	d107      	bne.n	19dfc <PR2_ISR+0x1ac>
			for (unsigned int uintLoop=0;uintLoop<120;uintLoop++)
   19dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   19dee:	3301      	adds	r3, #1
   19df0:	627b      	str	r3, [r7, #36]	; 0x24
   19df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   19df4:	2b77      	cmp	r3, #119	; 0x77
   19df6:	d800      	bhi.n	19dfa <PR2_ISR+0x1aa>
   19df8:	e775      	b.n	19ce6 <PR2_ISR+0x96>
   19dfa:	e000      	b.n	19dfe <PR2_ISR+0x1ae>
				{
					break;
   19dfc:	46c0      	nop			; (mov r8, r8)
				}
			}
		}
		if (++ucharPhase_Seq_Err_Counter>2)
   19dfe:	4b19      	ldr	r3, [pc, #100]	; (19e64 <PR2_ISR+0x214>)
   19e00:	781b      	ldrb	r3, [r3, #0]
   19e02:	b2db      	uxtb	r3, r3
   19e04:	3301      	adds	r3, #1
   19e06:	b2db      	uxtb	r3, r3
   19e08:	4a16      	ldr	r2, [pc, #88]	; (19e64 <PR2_ISR+0x214>)
   19e0a:	1c19      	adds	r1, r3, #0
   19e0c:	7011      	strb	r1, [r2, #0]
   19e0e:	2b02      	cmp	r3, #2
   19e10:	d90b      	bls.n	19e2a <PR2_ISR+0x1da>
		{
			ucharPhase_Seq_Err_Counter=0;
   19e12:	4b14      	ldr	r3, [pc, #80]	; (19e64 <PR2_ISR+0x214>)
   19e14:	2200      	movs	r2, #0
   19e16:	701a      	strb	r2, [r3, #0]
			structThreePhase_state.u8t_phase_sequence_flag = THREEPHASE_ERROR;
   19e18:	4b10      	ldr	r3, [pc, #64]	; (19e5c <PR2_ISR+0x20c>)
   19e1a:	2201      	movs	r2, #1
   19e1c:	701a      	strb	r2, [r3, #0]
			ucharPhase_Seq_Err_Flag=1;//0=undefined, 1=error, 2=ok
   19e1e:	4b10      	ldr	r3, [pc, #64]	; (19e60 <PR2_ISR+0x210>)
   19e20:	2201      	movs	r2, #1
   19e22:	701a      	strb	r2, [r3, #0]
			ucharPhase_Seq_Check_Flag=0;
   19e24:	4b03      	ldr	r3, [pc, #12]	; (19e34 <PR2_ISR+0x1e4>)
   19e26:	2200      	movs	r2, #0
   19e28:	701a      	strb	r2, [r3, #0]
		}
	}
}
   19e2a:	46c0      	nop			; (mov r8, r8)
   19e2c:	46bd      	mov	sp, r7
   19e2e:	b00b      	add	sp, #44	; 0x2c
   19e30:	bdf0      	pop	{r4, r5, r6, r7, pc}
   19e32:	46c0      	nop			; (mov r8, r8)
   19e34:	2000000c 	.word	0x2000000c
   19e38:	2000025c 	.word	0x2000025c
   19e3c:	000244cd 	.word	0x000244cd
   19e40:	00001b57 	.word	0x00001b57
   19e44:	0002644d 	.word	0x0002644d
   19e48:	00001b58 	.word	0x00001b58
   19e4c:	20000001 	.word	0x20000001
   19e50:	00018bfd 	.word	0x00018bfd
   19e54:	006acfbf 	.word	0x006acfbf
   19e58:	006acfc0 	.word	0x006acfc0
   19e5c:	20000740 	.word	0x20000740
   19e60:	20000258 	.word	0x20000258
   19e64:	20000259 	.word	0x20000259

00019e68 <vTask_10ms_Timer>:

static void vTask_10ms_Timer(void *params)
{
   19e68:	b580      	push	{r7, lr}
   19e6a:	b084      	sub	sp, #16
   19e6c:	af00      	add	r7, sp, #0
   19e6e:	6078      	str	r0, [r7, #4]
	TickType_t xLastExecutionGsm_Send_Time;
	xLastExecutionGsm_Send_Time = xTaskGetTickCount();
   19e70:	4b12      	ldr	r3, [pc, #72]	; (19ebc <vTask_10ms_Timer+0x54>)
   19e72:	4798      	blx	r3
   19e74:	0003      	movs	r3, r0
   19e76:	60fb      	str	r3, [r7, #12]
	//--------------------------------
	for( ;; )
	{
		vTaskDelayUntil(&xLastExecutionGsm_Send_Time, (10/portTICK_PERIOD_MS));
   19e78:	230c      	movs	r3, #12
   19e7a:	18fb      	adds	r3, r7, r3
   19e7c:	210a      	movs	r1, #10
   19e7e:	0018      	movs	r0, r3
   19e80:	4b0f      	ldr	r3, [pc, #60]	; (19ec0 <vTask_10ms_Timer+0x58>)
   19e82:	4798      	blx	r3
		if(ucharPhase_Seq_Check_Flag==1)
   19e84:	4b0f      	ldr	r3, [pc, #60]	; (19ec4 <vTask_10ms_Timer+0x5c>)
   19e86:	781b      	ldrb	r3, [r3, #0]
   19e88:	b2db      	uxtb	r3, r3
   19e8a:	2b01      	cmp	r3, #1
   19e8c:	d1f4      	bne.n	19e78 <vTask_10ms_Timer+0x10>
		{
			if(++ucharPhase_1_Timer_Counter>=20)
   19e8e:	4b0e      	ldr	r3, [pc, #56]	; (19ec8 <vTask_10ms_Timer+0x60>)
   19e90:	781b      	ldrb	r3, [r3, #0]
   19e92:	3301      	adds	r3, #1
   19e94:	b2da      	uxtb	r2, r3
   19e96:	4b0c      	ldr	r3, [pc, #48]	; (19ec8 <vTask_10ms_Timer+0x60>)
   19e98:	701a      	strb	r2, [r3, #0]
   19e9a:	4b0b      	ldr	r3, [pc, #44]	; (19ec8 <vTask_10ms_Timer+0x60>)
   19e9c:	781b      	ldrb	r3, [r3, #0]
   19e9e:	2b13      	cmp	r3, #19
   19ea0:	d9ea      	bls.n	19e78 <vTask_10ms_Timer+0x10>
			{
				ucharPhase_1_Timer_Counter=0;
   19ea2:	4b09      	ldr	r3, [pc, #36]	; (19ec8 <vTask_10ms_Timer+0x60>)
   19ea4:	2200      	movs	r2, #0
   19ea6:	701a      	strb	r2, [r3, #0]
				structThreePhase_state.u8t_phase_sequence_flag = THREEPHASE_ERROR;
   19ea8:	4b08      	ldr	r3, [pc, #32]	; (19ecc <vTask_10ms_Timer+0x64>)
   19eaa:	2201      	movs	r2, #1
   19eac:	701a      	strb	r2, [r3, #0]
				ucharPhase_Seq_Err_Flag=1;//0=undefined, 1=error, 2=ok
   19eae:	4b08      	ldr	r3, [pc, #32]	; (19ed0 <vTask_10ms_Timer+0x68>)
   19eb0:	2201      	movs	r2, #1
   19eb2:	701a      	strb	r2, [r3, #0]
				ucharPhase_Seq_Check_Flag=0;
   19eb4:	4b03      	ldr	r3, [pc, #12]	; (19ec4 <vTask_10ms_Timer+0x5c>)
   19eb6:	2200      	movs	r2, #0
   19eb8:	701a      	strb	r2, [r3, #0]
		vTaskDelayUntil(&xLastExecutionGsm_Send_Time, (10/portTICK_PERIOD_MS));
   19eba:	e7dd      	b.n	19e78 <vTask_10ms_Timer+0x10>
   19ebc:	0001fe3d 	.word	0x0001fe3d
   19ec0:	0001fa11 	.word	0x0001fa11
   19ec4:	2000000c 	.word	0x2000000c
   19ec8:	2000025c 	.word	0x2000025c
   19ecc:	20000740 	.word	0x20000740
   19ed0:	20000258 	.word	0x20000258

00019ed4 <vTask_100ms_Timer>:
		}
	}
}

static void vTask_100ms_Timer(void *params)
{
   19ed4:	b580      	push	{r7, lr}
   19ed6:	b084      	sub	sp, #16
   19ed8:	af00      	add	r7, sp, #0
   19eda:	6078      	str	r0, [r7, #4]
	TickType_t xLastExecutionGsm_Send_Time;
	xLastExecutionGsm_Send_Time = xTaskGetTickCount();
   19edc:	4b17      	ldr	r3, [pc, #92]	; (19f3c <vTask_100ms_Timer+0x68>)
   19ede:	4798      	blx	r3
   19ee0:	0003      	movs	r3, r0
   19ee2:	60fb      	str	r3, [r7, #12]
	//--------------------------------
	for( ;; )
	{
		vTaskDelayUntil(&xLastExecutionGsm_Send_Time, (100/portTICK_PERIOD_MS));
   19ee4:	230c      	movs	r3, #12
   19ee6:	18fb      	adds	r3, r7, r3
   19ee8:	2164      	movs	r1, #100	; 0x64
   19eea:	0018      	movs	r0, r3
   19eec:	4b14      	ldr	r3, [pc, #80]	; (19f40 <vTask_100ms_Timer+0x6c>)
   19eee:	4798      	blx	r3
		
		////////
		//Voltaqe Detect Timer Counter, Reset every 500ms to 0, which triggers the New Voltage Reading Acquisition from ADC.
		if(ucharVoltage_Detect_Timer_Counter++>4)
   19ef0:	4b14      	ldr	r3, [pc, #80]	; (19f44 <vTask_100ms_Timer+0x70>)
   19ef2:	781b      	ldrb	r3, [r3, #0]
   19ef4:	b2db      	uxtb	r3, r3
   19ef6:	1c5a      	adds	r2, r3, #1
   19ef8:	b2d1      	uxtb	r1, r2
   19efa:	4a12      	ldr	r2, [pc, #72]	; (19f44 <vTask_100ms_Timer+0x70>)
   19efc:	7011      	strb	r1, [r2, #0]
   19efe:	2b04      	cmp	r3, #4
   19f00:	d905      	bls.n	19f0e <vTask_100ms_Timer+0x3a>
		{
			ucharVoltage_Detect_Timer_Counter=0;
   19f02:	4b10      	ldr	r3, [pc, #64]	; (19f44 <vTask_100ms_Timer+0x70>)
   19f04:	2200      	movs	r2, #0
   19f06:	701a      	strb	r2, [r3, #0]
			//Add Flag to enable detection of current, as the Voltage Detect Timer Counter won't be 0, as voltage reading takes 100ms Time.
			ucharCurrent_Detect_Flag=1;
   19f08:	4b0f      	ldr	r3, [pc, #60]	; (19f48 <vTask_100ms_Timer+0x74>)
   19f0a:	2201      	movs	r2, #1
   19f0c:	701a      	strb	r2, [r3, #0]
			
		}
		/////////
		if (ucharPhase_Seq_Timer_Counter++>4)
   19f0e:	4b0f      	ldr	r3, [pc, #60]	; (19f4c <vTask_100ms_Timer+0x78>)
   19f10:	781b      	ldrb	r3, [r3, #0]
   19f12:	b2db      	uxtb	r3, r3
   19f14:	1c5a      	adds	r2, r3, #1
   19f16:	b2d1      	uxtb	r1, r2
   19f18:	4a0c      	ldr	r2, [pc, #48]	; (19f4c <vTask_100ms_Timer+0x78>)
   19f1a:	7011      	strb	r1, [r2, #0]
   19f1c:	2b04      	cmp	r3, #4
   19f1e:	d9e1      	bls.n	19ee4 <vTask_100ms_Timer+0x10>
		{
			ucharPhase_Seq_Timer_Counter=0;
   19f20:	4b0a      	ldr	r3, [pc, #40]	; (19f4c <vTask_100ms_Timer+0x78>)
   19f22:	2200      	movs	r2, #0
   19f24:	701a      	strb	r2, [r3, #0]
			ucharPhase_Seq_Check_Flag=1;//0=not check, 1=Check
   19f26:	4b0a      	ldr	r3, [pc, #40]	; (19f50 <vTask_100ms_Timer+0x7c>)
   19f28:	2201      	movs	r2, #1
   19f2a:	701a      	strb	r2, [r3, #0]
			ucharPhase_1_Timer_Counter=0;
   19f2c:	4b09      	ldr	r3, [pc, #36]	; (19f54 <vTask_100ms_Timer+0x80>)
   19f2e:	2200      	movs	r2, #0
   19f30:	701a      	strb	r2, [r3, #0]
			extint_chan_clear_detected(11);
   19f32:	200b      	movs	r0, #11
   19f34:	4b08      	ldr	r3, [pc, #32]	; (19f58 <vTask_100ms_Timer+0x84>)
   19f36:	4798      	blx	r3
		vTaskDelayUntil(&xLastExecutionGsm_Send_Time, (100/portTICK_PERIOD_MS));
   19f38:	e7d4      	b.n	19ee4 <vTask_100ms_Timer+0x10>
   19f3a:	46c0      	nop			; (mov r8, r8)
   19f3c:	0001fe3d 	.word	0x0001fe3d
   19f40:	0001fa11 	.word	0x0001fa11
   19f44:	2000000d 	.word	0x2000000d
   19f48:	2000025b 	.word	0x2000025b
   19f4c:	2000025a 	.word	0x2000025a
   19f50:	2000000c 	.word	0x2000000c
   19f54:	2000025c 	.word	0x2000025c
   19f58:	00018ce1 	.word	0x00018ce1

00019f5c <should_Detect_New_Voltage>:
		}
	}
}

//Function to check if new Voltage reading should be acquired from the ADC, by checking the timer Variable for reading Voltage with 0.
bool should_Detect_New_Voltage(void) {
   19f5c:	b580      	push	{r7, lr}
   19f5e:	af00      	add	r7, sp, #0
	return (ucharVoltage_Detect_Timer_Counter == 0);
   19f60:	4b04      	ldr	r3, [pc, #16]	; (19f74 <should_Detect_New_Voltage+0x18>)
   19f62:	781b      	ldrb	r3, [r3, #0]
   19f64:	b2db      	uxtb	r3, r3
   19f66:	425a      	negs	r2, r3
   19f68:	4153      	adcs	r3, r2
   19f6a:	b2db      	uxtb	r3, r3
}
   19f6c:	0018      	movs	r0, r3
   19f6e:	46bd      	mov	sp, r7
   19f70:	bd80      	pop	{r7, pc}
   19f72:	46c0      	nop			; (mov r8, r8)
   19f74:	2000000d 	.word	0x2000000d

00019f78 <detect_battery_voltage_and_percentage>:

void detect_battery_voltage_and_percentage(void)
{
   19f78:	b590      	push	{r4, r7, lr}
   19f7a:	b083      	sub	sp, #12
   19f7c:	af00      	add	r7, sp, #0
	if(xSemaphoreTake(xADC_Semaphore,portMAX_DELAY)== pdTRUE)
   19f7e:	4b25      	ldr	r3, [pc, #148]	; (1a014 <detect_battery_voltage_and_percentage+0x9c>)
   19f80:	681a      	ldr	r2, [r3, #0]
   19f82:	2301      	movs	r3, #1
   19f84:	425b      	negs	r3, r3
   19f86:	0019      	movs	r1, r3
   19f88:	0010      	movs	r0, r2
   19f8a:	4b23      	ldr	r3, [pc, #140]	; (1a018 <detect_battery_voltage_and_percentage+0xa0>)
   19f8c:	4798      	blx	r3
   19f8e:	0003      	movs	r3, r0
   19f90:	2b01      	cmp	r3, #1
   19f92:	d13b      	bne.n	1a00c <detect_battery_voltage_and_percentage+0x94>
	{
		uint32_t bat_v = Read_ADC0(ADC_POSITIVE_INPUT_PIN7,200);
   19f94:	21c8      	movs	r1, #200	; 0xc8
   19f96:	2007      	movs	r0, #7
   19f98:	4b20      	ldr	r3, [pc, #128]	; (1a01c <detect_battery_voltage_and_percentage+0xa4>)
   19f9a:	4798      	blx	r3
   19f9c:	0003      	movs	r3, r0
   19f9e:	603b      	str	r3, [r7, #0]
		Analog_Parameter_Struct.Battery_Voltage = (bat_v * 1457)/1000;
   19fa0:	683b      	ldr	r3, [r7, #0]
   19fa2:	4a1f      	ldr	r2, [pc, #124]	; (1a020 <detect_battery_voltage_and_percentage+0xa8>)
   19fa4:	435a      	muls	r2, r3
   19fa6:	0010      	movs	r0, r2
   19fa8:	4b1e      	ldr	r3, [pc, #120]	; (1a024 <detect_battery_voltage_and_percentage+0xac>)
   19faa:	22fa      	movs	r2, #250	; 0xfa
   19fac:	0091      	lsls	r1, r2, #2
   19fae:	4798      	blx	r3
   19fb0:	0003      	movs	r3, r0
   19fb2:	001a      	movs	r2, r3
   19fb4:	4b1c      	ldr	r3, [pc, #112]	; (1a028 <detect_battery_voltage_and_percentage+0xb0>)
   19fb6:	619a      	str	r2, [r3, #24]
		uint8_t bat_per = 0;
   19fb8:	1dfb      	adds	r3, r7, #7
   19fba:	2200      	movs	r2, #0
   19fbc:	701a      	strb	r2, [r3, #0]
		
		if (Analog_Parameter_Struct.Battery_Voltage <= 3300)
   19fbe:	4b1a      	ldr	r3, [pc, #104]	; (1a028 <detect_battery_voltage_and_percentage+0xb0>)
   19fc0:	699b      	ldr	r3, [r3, #24]
   19fc2:	4a1a      	ldr	r2, [pc, #104]	; (1a02c <detect_battery_voltage_and_percentage+0xb4>)
   19fc4:	4293      	cmp	r3, r2
   19fc6:	d803      	bhi.n	19fd0 <detect_battery_voltage_and_percentage+0x58>
		{
			bat_per = 0;
   19fc8:	1dfb      	adds	r3, r7, #7
   19fca:	2200      	movs	r2, #0
   19fcc:	701a      	strb	r2, [r3, #0]
   19fce:	e012      	b.n	19ff6 <detect_battery_voltage_and_percentage+0x7e>
		}
		else
		{
			//bat_per = ((((float)Analog_Parameter_Struct.Battery_Voltage/1000)-3.3)*100)/0.9;
			bat_per = (Analog_Parameter_Struct.Battery_Voltage-3300)/9;
   19fd0:	4b15      	ldr	r3, [pc, #84]	; (1a028 <detect_battery_voltage_and_percentage+0xb0>)
   19fd2:	699b      	ldr	r3, [r3, #24]
   19fd4:	4a16      	ldr	r2, [pc, #88]	; (1a030 <detect_battery_voltage_and_percentage+0xb8>)
   19fd6:	189a      	adds	r2, r3, r2
   19fd8:	4b12      	ldr	r3, [pc, #72]	; (1a024 <detect_battery_voltage_and_percentage+0xac>)
   19fda:	2109      	movs	r1, #9
   19fdc:	0010      	movs	r0, r2
   19fde:	4798      	blx	r3
   19fe0:	0003      	movs	r3, r0
   19fe2:	001a      	movs	r2, r3
   19fe4:	1dfb      	adds	r3, r7, #7
   19fe6:	701a      	strb	r2, [r3, #0]
			if (bat_per>100) bat_per=100;
   19fe8:	1dfb      	adds	r3, r7, #7
   19fea:	781b      	ldrb	r3, [r3, #0]
   19fec:	2b64      	cmp	r3, #100	; 0x64
   19fee:	d902      	bls.n	19ff6 <detect_battery_voltage_and_percentage+0x7e>
   19ff0:	1dfb      	adds	r3, r7, #7
   19ff2:	2264      	movs	r2, #100	; 0x64
   19ff4:	701a      	strb	r2, [r3, #0]
		}
		
		Analog_Parameter_Struct.Battery_percentage = bat_per;
   19ff6:	4b0c      	ldr	r3, [pc, #48]	; (1a028 <detect_battery_voltage_and_percentage+0xb0>)
   19ff8:	1dfa      	adds	r2, r7, #7
   19ffa:	7812      	ldrb	r2, [r2, #0]
   19ffc:	771a      	strb	r2, [r3, #28]
		
		xSemaphoreGive(xADC_Semaphore);
   19ffe:	4b05      	ldr	r3, [pc, #20]	; (1a014 <detect_battery_voltage_and_percentage+0x9c>)
   1a000:	6818      	ldr	r0, [r3, #0]
   1a002:	2300      	movs	r3, #0
   1a004:	2200      	movs	r2, #0
   1a006:	2100      	movs	r1, #0
   1a008:	4c0a      	ldr	r4, [pc, #40]	; (1a034 <detect_battery_voltage_and_percentage+0xbc>)
   1a00a:	47a0      	blx	r4
	}
}
   1a00c:	46c0      	nop			; (mov r8, r8)
   1a00e:	46bd      	mov	sp, r7
   1a010:	b003      	add	sp, #12
   1a012:	bd90      	pop	{r4, r7, pc}
   1a014:	20000244 	.word	0x20000244
   1a018:	0001f1d1 	.word	0x0001f1d1
   1a01c:	00019745 	.word	0x00019745
   1a020:	000005b1 	.word	0x000005b1
   1a024:	000260e5 	.word	0x000260e5
   1a028:	200006e4 	.word	0x200006e4
   1a02c:	00000ce4 	.word	0x00000ce4
   1a030:	fffff31c 	.word	0xfffff31c
   1a034:	0001ed31 	.word	0x0001ed31

0001a038 <initPhaseRMStruct>:

void initPhaseRMStruct(struct rmsVoltage *phaseRMSStruct)
{
   1a038:	b580      	push	{r7, lr}
   1a03a:	b084      	sub	sp, #16
   1a03c:	af00      	add	r7, sp, #0
   1a03e:	6078      	str	r0, [r7, #4]
	phaseRMSStruct->hasZeroReading = true;
   1a040:	687b      	ldr	r3, [r7, #4]
   1a042:	2201      	movs	r2, #1
   1a044:	72da      	strb	r2, [r3, #11]
	phaseRMSStruct->index=0;
   1a046:	687b      	ldr	r3, [r7, #4]
   1a048:	2200      	movs	r2, #0
   1a04a:	729a      	strb	r2, [r3, #10]
	phaseRMSStruct->rmsVoltage=0;
   1a04c:	687b      	ldr	r3, [r7, #4]
   1a04e:	2200      	movs	r2, #0
   1a050:	811a      	strh	r2, [r3, #8]
	for (uint8_t cnt =0;cnt< NO_RMS_VOLTAGE_READINGS;cnt++)
   1a052:	230f      	movs	r3, #15
   1a054:	18fb      	adds	r3, r7, r3
   1a056:	2200      	movs	r2, #0
   1a058:	701a      	strb	r2, [r3, #0]
   1a05a:	e00d      	b.n	1a078 <initPhaseRMStruct+0x40>
	{
		phaseRMSStruct->voltRange[cnt]=0;
   1a05c:	230f      	movs	r3, #15
   1a05e:	18fb      	adds	r3, r7, r3
   1a060:	781a      	ldrb	r2, [r3, #0]
   1a062:	687b      	ldr	r3, [r7, #4]
   1a064:	0052      	lsls	r2, r2, #1
   1a066:	2100      	movs	r1, #0
   1a068:	52d1      	strh	r1, [r2, r3]
	for (uint8_t cnt =0;cnt< NO_RMS_VOLTAGE_READINGS;cnt++)
   1a06a:	230f      	movs	r3, #15
   1a06c:	18fb      	adds	r3, r7, r3
   1a06e:	781a      	ldrb	r2, [r3, #0]
   1a070:	230f      	movs	r3, #15
   1a072:	18fb      	adds	r3, r7, r3
   1a074:	3201      	adds	r2, #1
   1a076:	701a      	strb	r2, [r3, #0]
   1a078:	230f      	movs	r3, #15
   1a07a:	18fb      	adds	r3, r7, r3
   1a07c:	781b      	ldrb	r3, [r3, #0]
   1a07e:	2b03      	cmp	r3, #3
   1a080:	d9ec      	bls.n	1a05c <initPhaseRMStruct+0x24>
	}
}
   1a082:	46c0      	nop			; (mov r8, r8)
   1a084:	46bd      	mov	sp, r7
   1a086:	b004      	add	sp, #16
   1a088:	bd80      	pop	{r7, pc}
	...

0001a08c <updateRMSValues>:

void updateRMSValues(struct rmsVoltage *phaseRMSStruct)
{
   1a08c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a08e:	b089      	sub	sp, #36	; 0x24
   1a090:	af00      	add	r7, sp, #0
   1a092:	6078      	str	r0, [r7, #4]
	uint8_t cnt;
	uint32_t result=0;
   1a094:	2300      	movs	r3, #0
   1a096:	61bb      	str	r3, [r7, #24]
	double mean = 0.0;
   1a098:	2300      	movs	r3, #0
   1a09a:	2400      	movs	r4, #0
   1a09c:	613b      	str	r3, [r7, #16]
   1a09e:	617c      	str	r4, [r7, #20]
	double root = 0.0;
   1a0a0:	2300      	movs	r3, #0
   1a0a2:	2400      	movs	r4, #0
   1a0a4:	60bb      	str	r3, [r7, #8]
   1a0a6:	60fc      	str	r4, [r7, #12]
	phaseRMSStruct->hasZeroReading=false;
   1a0a8:	687b      	ldr	r3, [r7, #4]
   1a0aa:	2200      	movs	r2, #0
   1a0ac:	72da      	strb	r2, [r3, #11]
	for(cnt=0;cnt<NO_RMS_VOLTAGE_READINGS;cnt++)
   1a0ae:	231f      	movs	r3, #31
   1a0b0:	18fb      	adds	r3, r7, r3
   1a0b2:	2200      	movs	r2, #0
   1a0b4:	701a      	strb	r2, [r3, #0]
   1a0b6:	e036      	b.n	1a126 <updateRMSValues+0x9a>
	{
		if(phaseRMSStruct->voltRange[cnt]==0)
   1a0b8:	231f      	movs	r3, #31
   1a0ba:	18fb      	adds	r3, r7, r3
   1a0bc:	781a      	ldrb	r2, [r3, #0]
   1a0be:	687b      	ldr	r3, [r7, #4]
   1a0c0:	0052      	lsls	r2, r2, #1
   1a0c2:	5ad3      	ldrh	r3, [r2, r3]
   1a0c4:	2b00      	cmp	r3, #0
   1a0c6:	d102      	bne.n	1a0ce <updateRMSValues+0x42>
		{
			phaseRMSStruct->hasZeroReading=true;
   1a0c8:	687b      	ldr	r3, [r7, #4]
   1a0ca:	2201      	movs	r2, #1
   1a0cc:	72da      	strb	r2, [r3, #11]
		}
		result= result + pow(phaseRMSStruct->voltRange[cnt],2);
   1a0ce:	4b31      	ldr	r3, [pc, #196]	; (1a194 <updateRMSValues+0x108>)
   1a0d0:	69b8      	ldr	r0, [r7, #24]
   1a0d2:	4798      	blx	r3
   1a0d4:	0005      	movs	r5, r0
   1a0d6:	000e      	movs	r6, r1
   1a0d8:	231f      	movs	r3, #31
   1a0da:	18fb      	adds	r3, r7, r3
   1a0dc:	781a      	ldrb	r2, [r3, #0]
   1a0de:	687b      	ldr	r3, [r7, #4]
   1a0e0:	0052      	lsls	r2, r2, #1
   1a0e2:	5ad2      	ldrh	r2, [r2, r3]
   1a0e4:	4b2b      	ldr	r3, [pc, #172]	; (1a194 <updateRMSValues+0x108>)
   1a0e6:	0010      	movs	r0, r2
   1a0e8:	4798      	blx	r3
   1a0ea:	2300      	movs	r3, #0
   1a0ec:	2480      	movs	r4, #128	; 0x80
   1a0ee:	05e4      	lsls	r4, r4, #23
   1a0f0:	001a      	movs	r2, r3
   1a0f2:	0023      	movs	r3, r4
   1a0f4:	4c28      	ldr	r4, [pc, #160]	; (1a198 <updateRMSValues+0x10c>)
   1a0f6:	47a0      	blx	r4
   1a0f8:	0002      	movs	r2, r0
   1a0fa:	000b      	movs	r3, r1
   1a0fc:	4c27      	ldr	r4, [pc, #156]	; (1a19c <updateRMSValues+0x110>)
   1a0fe:	0028      	movs	r0, r5
   1a100:	0031      	movs	r1, r6
   1a102:	47a0      	blx	r4
   1a104:	0003      	movs	r3, r0
   1a106:	000c      	movs	r4, r1
   1a108:	0019      	movs	r1, r3
   1a10a:	0022      	movs	r2, r4
   1a10c:	4b24      	ldr	r3, [pc, #144]	; (1a1a0 <updateRMSValues+0x114>)
   1a10e:	0008      	movs	r0, r1
   1a110:	0011      	movs	r1, r2
   1a112:	4798      	blx	r3
   1a114:	0003      	movs	r3, r0
   1a116:	61bb      	str	r3, [r7, #24]
	for(cnt=0;cnt<NO_RMS_VOLTAGE_READINGS;cnt++)
   1a118:	231f      	movs	r3, #31
   1a11a:	18fb      	adds	r3, r7, r3
   1a11c:	781a      	ldrb	r2, [r3, #0]
   1a11e:	231f      	movs	r3, #31
   1a120:	18fb      	adds	r3, r7, r3
   1a122:	3201      	adds	r2, #1
   1a124:	701a      	strb	r2, [r3, #0]
   1a126:	231f      	movs	r3, #31
   1a128:	18fb      	adds	r3, r7, r3
   1a12a:	781b      	ldrb	r3, [r3, #0]
   1a12c:	2b03      	cmp	r3, #3
   1a12e:	d9c3      	bls.n	1a0b8 <updateRMSValues+0x2c>
	}
	mean= result / (float)NO_RMS_VOLTAGE_READINGS;
   1a130:	4b1c      	ldr	r3, [pc, #112]	; (1a1a4 <updateRMSValues+0x118>)
   1a132:	69b8      	ldr	r0, [r7, #24]
   1a134:	4798      	blx	r3
   1a136:	1c02      	adds	r2, r0, #0
   1a138:	4b1b      	ldr	r3, [pc, #108]	; (1a1a8 <updateRMSValues+0x11c>)
   1a13a:	2181      	movs	r1, #129	; 0x81
   1a13c:	05c9      	lsls	r1, r1, #23
   1a13e:	1c10      	adds	r0, r2, #0
   1a140:	4798      	blx	r3
   1a142:	1c03      	adds	r3, r0, #0
   1a144:	1c1a      	adds	r2, r3, #0
   1a146:	4b19      	ldr	r3, [pc, #100]	; (1a1ac <updateRMSValues+0x120>)
   1a148:	1c10      	adds	r0, r2, #0
   1a14a:	4798      	blx	r3
   1a14c:	0003      	movs	r3, r0
   1a14e:	000c      	movs	r4, r1
   1a150:	613b      	str	r3, [r7, #16]
   1a152:	617c      	str	r4, [r7, #20]
	root = (uint32_t) (sqrt(mean));
   1a154:	693b      	ldr	r3, [r7, #16]
   1a156:	697c      	ldr	r4, [r7, #20]
   1a158:	0018      	movs	r0, r3
   1a15a:	0021      	movs	r1, r4
   1a15c:	4b14      	ldr	r3, [pc, #80]	; (1a1b0 <updateRMSValues+0x124>)
   1a15e:	4798      	blx	r3
   1a160:	000a      	movs	r2, r1
   1a162:	0001      	movs	r1, r0
   1a164:	4b0e      	ldr	r3, [pc, #56]	; (1a1a0 <updateRMSValues+0x114>)
   1a166:	0008      	movs	r0, r1
   1a168:	0011      	movs	r1, r2
   1a16a:	4798      	blx	r3
   1a16c:	0002      	movs	r2, r0
   1a16e:	4b09      	ldr	r3, [pc, #36]	; (1a194 <updateRMSValues+0x108>)
   1a170:	0010      	movs	r0, r2
   1a172:	4798      	blx	r3
   1a174:	0003      	movs	r3, r0
   1a176:	000c      	movs	r4, r1
   1a178:	60bb      	str	r3, [r7, #8]
   1a17a:	60fc      	str	r4, [r7, #12]
	
	phaseRMSStruct->rmsVoltage = (uint16_t) root;
   1a17c:	4b08      	ldr	r3, [pc, #32]	; (1a1a0 <updateRMSValues+0x114>)
   1a17e:	68b8      	ldr	r0, [r7, #8]
   1a180:	68f9      	ldr	r1, [r7, #12]
   1a182:	4798      	blx	r3
   1a184:	0003      	movs	r3, r0
   1a186:	b29a      	uxth	r2, r3
   1a188:	687b      	ldr	r3, [r7, #4]
   1a18a:	811a      	strh	r2, [r3, #8]
}
   1a18c:	46c0      	nop			; (mov r8, r8)
   1a18e:	46bd      	mov	sp, r7
   1a190:	b009      	add	sp, #36	; 0x24
   1a192:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1a194:	00028779 	.word	0x00028779
   1a198:	00024e51 	.word	0x00024e51
   1a19c:	00026c99 	.word	0x00026c99
   1a1a0:	000264e1 	.word	0x000264e1
   1a1a4:	00026c0d 	.word	0x00026c0d
   1a1a8:	0002669d 	.word	0x0002669d
   1a1ac:	000287e9 	.word	0x000287e9
   1a1b0:	000251a9 	.word	0x000251a9

0001a1b4 <filterVoltage>:

uint16_t filterVoltage(enum phaseReading phase,uint16_t voltReading)
{
   1a1b4:	b590      	push	{r4, r7, lr}
   1a1b6:	b085      	sub	sp, #20
   1a1b8:	af00      	add	r7, sp, #0
   1a1ba:	0002      	movs	r2, r0
   1a1bc:	1dfb      	adds	r3, r7, #7
   1a1be:	701a      	strb	r2, [r3, #0]
   1a1c0:	1d3b      	adds	r3, r7, #4
   1a1c2:	1c0a      	adds	r2, r1, #0
   1a1c4:	801a      	strh	r2, [r3, #0]
	struct rmsVoltage *p1;
	if(phase==PHASE_RY)
   1a1c6:	1dfb      	adds	r3, r7, #7
   1a1c8:	781b      	ldrb	r3, [r3, #0]
   1a1ca:	2b00      	cmp	r3, #0
   1a1cc:	d102      	bne.n	1a1d4 <filterVoltage+0x20>
	{
		p1 = &struct_rmsRY;
   1a1ce:	4b28      	ldr	r3, [pc, #160]	; (1a270 <filterVoltage+0xbc>)
   1a1d0:	60fb      	str	r3, [r7, #12]
   1a1d2:	e00c      	b.n	1a1ee <filterVoltage+0x3a>
	}
	else if(phase==PHASE_YB)
   1a1d4:	1dfb      	adds	r3, r7, #7
   1a1d6:	781b      	ldrb	r3, [r3, #0]
   1a1d8:	2b01      	cmp	r3, #1
   1a1da:	d102      	bne.n	1a1e2 <filterVoltage+0x2e>
	{
		p1 = &struct_rmsYB;
   1a1dc:	4b25      	ldr	r3, [pc, #148]	; (1a274 <filterVoltage+0xc0>)
   1a1de:	60fb      	str	r3, [r7, #12]
   1a1e0:	e005      	b.n	1a1ee <filterVoltage+0x3a>
	}
	else if(phase==PHASE_BR)
   1a1e2:	1dfb      	adds	r3, r7, #7
   1a1e4:	781b      	ldrb	r3, [r3, #0]
   1a1e6:	2b02      	cmp	r3, #2
   1a1e8:	d101      	bne.n	1a1ee <filterVoltage+0x3a>
	{
		p1 = &struct_rmsBR;
   1a1ea:	4b23      	ldr	r3, [pc, #140]	; (1a278 <filterVoltage+0xc4>)
   1a1ec:	60fb      	str	r3, [r7, #12]
	}
	
	p1->voltRange[p1->index%NO_RMS_VOLTAGE_READINGS]=voltReading;
   1a1ee:	68fb      	ldr	r3, [r7, #12]
   1a1f0:	7a9b      	ldrb	r3, [r3, #10]
   1a1f2:	001a      	movs	r2, r3
   1a1f4:	2303      	movs	r3, #3
   1a1f6:	401a      	ands	r2, r3
   1a1f8:	68fb      	ldr	r3, [r7, #12]
   1a1fa:	0052      	lsls	r2, r2, #1
   1a1fc:	1d39      	adds	r1, r7, #4
   1a1fe:	8809      	ldrh	r1, [r1, #0]
   1a200:	52d1      	strh	r1, [r2, r3]
	p1->index = ((p1->index) + 1 )%NO_RMS_VOLTAGE_READINGS;
   1a202:	68fb      	ldr	r3, [r7, #12]
   1a204:	7a9b      	ldrb	r3, [r3, #10]
   1a206:	3301      	adds	r3, #1
   1a208:	4a1c      	ldr	r2, [pc, #112]	; (1a27c <filterVoltage+0xc8>)
   1a20a:	4013      	ands	r3, r2
   1a20c:	d504      	bpl.n	1a218 <filterVoltage+0x64>
   1a20e:	3b01      	subs	r3, #1
   1a210:	2204      	movs	r2, #4
   1a212:	4252      	negs	r2, r2
   1a214:	4313      	orrs	r3, r2
   1a216:	3301      	adds	r3, #1
   1a218:	b2da      	uxtb	r2, r3
   1a21a:	68fb      	ldr	r3, [r7, #12]
   1a21c:	729a      	strb	r2, [r3, #10]
	
	updateRMSValues(p1);
   1a21e:	68fb      	ldr	r3, [r7, #12]
   1a220:	0018      	movs	r0, r3
   1a222:	4b17      	ldr	r3, [pc, #92]	; (1a280 <filterVoltage+0xcc>)
   1a224:	4798      	blx	r3
					
	//if(voltReading > p1->rmsVoltage)
	{
		if(p1->hasZeroReading)
   1a226:	68fb      	ldr	r3, [r7, #12]
   1a228:	7adb      	ldrb	r3, [r3, #11]
   1a22a:	2b00      	cmp	r3, #0
   1a22c:	d002      	beq.n	1a234 <filterVoltage+0x80>
		{
			return voltReading;
   1a22e:	1d3b      	adds	r3, r7, #4
   1a230:	881b      	ldrh	r3, [r3, #0]
   1a232:	e019      	b.n	1a268 <filterVoltage+0xb4>
		
		//if ((voltReading - p1->rmsVoltage)>(p1->rmsVoltage * 6/100))
		//{
			//return p1->rmsVoltage;
		//}
		if((p1->rmsVoltage - voltReading)<(p1->rmsVoltage * 10/100))
   1a234:	68fb      	ldr	r3, [r7, #12]
   1a236:	891b      	ldrh	r3, [r3, #8]
   1a238:	001a      	movs	r2, r3
   1a23a:	1d3b      	adds	r3, r7, #4
   1a23c:	881b      	ldrh	r3, [r3, #0]
   1a23e:	1ad4      	subs	r4, r2, r3
   1a240:	68fb      	ldr	r3, [r7, #12]
   1a242:	891b      	ldrh	r3, [r3, #8]
   1a244:	001a      	movs	r2, r3
   1a246:	0013      	movs	r3, r2
   1a248:	009b      	lsls	r3, r3, #2
   1a24a:	189b      	adds	r3, r3, r2
   1a24c:	005b      	lsls	r3, r3, #1
   1a24e:	001a      	movs	r2, r3
   1a250:	4b0c      	ldr	r3, [pc, #48]	; (1a284 <filterVoltage+0xd0>)
   1a252:	2164      	movs	r1, #100	; 0x64
   1a254:	0010      	movs	r0, r2
   1a256:	4798      	blx	r3
   1a258:	0003      	movs	r3, r0
   1a25a:	429c      	cmp	r4, r3
   1a25c:	da02      	bge.n	1a264 <filterVoltage+0xb0>
		{
			return p1->rmsVoltage;
   1a25e:	68fb      	ldr	r3, [r7, #12]
   1a260:	891b      	ldrh	r3, [r3, #8]
   1a262:	e001      	b.n	1a268 <filterVoltage+0xb4>
		}
		else
		{
			return voltReading;
   1a264:	1d3b      	adds	r3, r7, #4
   1a266:	881b      	ldrh	r3, [r3, #0]
		}
	}
	
	return voltReading;
}
   1a268:	0018      	movs	r0, r3
   1a26a:	46bd      	mov	sp, r7
   1a26c:	b005      	add	sp, #20
   1a26e:	bd90      	pop	{r4, r7, pc}
   1a270:	20000798 	.word	0x20000798
   1a274:	2000072c 	.word	0x2000072c
   1a278:	200007c4 	.word	0x200007c4
   1a27c:	80000003 	.word	0x80000003
   1a280:	0001a08d 	.word	0x0001a08d
   1a284:	000261f9 	.word	0x000261f9

0001a288 <detect_Three_Phase_Voltage>:

//Function to save the 3 phase voltage from ADC in to the structure, ADC values are filtered, and multiplied by factor here.
void detect_Three_Phase_Voltage(void) {
   1a288:	b590      	push	{r4, r7, lr}
   1a28a:	b085      	sub	sp, #20
   1a28c:	af00      	add	r7, sp, #0
	
	if(xSemaphoreTake(xADC_Semaphore,portMAX_DELAY)== pdTRUE)
   1a28e:	4b48      	ldr	r3, [pc, #288]	; (1a3b0 <detect_Three_Phase_Voltage+0x128>)
   1a290:	681a      	ldr	r2, [r3, #0]
   1a292:	2301      	movs	r3, #1
   1a294:	425b      	negs	r3, r3
   1a296:	0019      	movs	r1, r3
   1a298:	0010      	movs	r0, r2
   1a29a:	4b46      	ldr	r3, [pc, #280]	; (1a3b4 <detect_Three_Phase_Voltage+0x12c>)
   1a29c:	4798      	blx	r3
   1a29e:	0003      	movs	r3, r0
   1a2a0:	2b01      	cmp	r3, #1
   1a2a2:	d000      	beq.n	1a2a6 <detect_Three_Phase_Voltage+0x1e>
   1a2a4:	e080      	b.n	1a3a8 <detect_Three_Phase_Voltage+0x120>
	{
		//int32_t adcRY = Read_ADC0(ADC_POSITIVE_INPUT_PIN19,2000);
		int32_t adcRY = Read_Voltage_ADC0(ADC_POSITIVE_INPUT_PIN19);
   1a2a6:	2013      	movs	r0, #19
   1a2a8:	4b43      	ldr	r3, [pc, #268]	; (1a3b8 <detect_Three_Phase_Voltage+0x130>)
   1a2aa:	4798      	blx	r3
   1a2ac:	0003      	movs	r3, r0
   1a2ae:	60fb      	str	r3, [r7, #12]
		adcRY = (adcRY-10);
   1a2b0:	68fb      	ldr	r3, [r7, #12]
   1a2b2:	3b0a      	subs	r3, #10
   1a2b4:	60fb      	str	r3, [r7, #12]
		if (adcRY<0)
   1a2b6:	68fb      	ldr	r3, [r7, #12]
   1a2b8:	2b00      	cmp	r3, #0
   1a2ba:	da02      	bge.n	1a2c2 <detect_Three_Phase_Voltage+0x3a>
		{
			adcRY = 0;
   1a2bc:	2300      	movs	r3, #0
   1a2be:	60fb      	str	r3, [r7, #12]
   1a2c0:	e00f      	b.n	1a2e2 <detect_Three_Phase_Voltage+0x5a>
		}
		else
		{
			adcRY = (((adcRY-10)*655)/1000);
   1a2c2:	68fb      	ldr	r3, [r7, #12]
   1a2c4:	3b0a      	subs	r3, #10
   1a2c6:	4a3d      	ldr	r2, [pc, #244]	; (1a3bc <detect_Three_Phase_Voltage+0x134>)
   1a2c8:	435a      	muls	r2, r3
   1a2ca:	0010      	movs	r0, r2
   1a2cc:	4b3c      	ldr	r3, [pc, #240]	; (1a3c0 <detect_Three_Phase_Voltage+0x138>)
   1a2ce:	22fa      	movs	r2, #250	; 0xfa
   1a2d0:	0091      	lsls	r1, r2, #2
   1a2d2:	4798      	blx	r3
   1a2d4:	0003      	movs	r3, r0
   1a2d6:	60fb      	str	r3, [r7, #12]
			if (adcRY<0)
   1a2d8:	68fb      	ldr	r3, [r7, #12]
   1a2da:	2b00      	cmp	r3, #0
   1a2dc:	da01      	bge.n	1a2e2 <detect_Three_Phase_Voltage+0x5a>
			{
				adcRY = 0;
   1a2de:	2300      	movs	r3, #0
   1a2e0:	60fb      	str	r3, [r7, #12]
			}
		}
		//int32_t adcYB = Read_ADC0(ADC_POSITIVE_INPUT_PIN18,2000);
		int32_t adcYB = Read_Voltage_ADC0(ADC_POSITIVE_INPUT_PIN18);
   1a2e2:	2012      	movs	r0, #18
   1a2e4:	4b34      	ldr	r3, [pc, #208]	; (1a3b8 <detect_Three_Phase_Voltage+0x130>)
   1a2e6:	4798      	blx	r3
   1a2e8:	0003      	movs	r3, r0
   1a2ea:	60bb      	str	r3, [r7, #8]
		adcYB = (adcYB-10);
   1a2ec:	68bb      	ldr	r3, [r7, #8]
   1a2ee:	3b0a      	subs	r3, #10
   1a2f0:	60bb      	str	r3, [r7, #8]
		if (adcYB<0)
   1a2f2:	68bb      	ldr	r3, [r7, #8]
   1a2f4:	2b00      	cmp	r3, #0
   1a2f6:	da02      	bge.n	1a2fe <detect_Three_Phase_Voltage+0x76>
		{
			adcYB = 0;
   1a2f8:	2300      	movs	r3, #0
   1a2fa:	60bb      	str	r3, [r7, #8]
   1a2fc:	e00f      	b.n	1a31e <detect_Three_Phase_Voltage+0x96>
		}
		else
		{
			adcYB = (((adcYB-10)*655)/1000);
   1a2fe:	68bb      	ldr	r3, [r7, #8]
   1a300:	3b0a      	subs	r3, #10
   1a302:	4a2e      	ldr	r2, [pc, #184]	; (1a3bc <detect_Three_Phase_Voltage+0x134>)
   1a304:	435a      	muls	r2, r3
   1a306:	0010      	movs	r0, r2
   1a308:	4b2d      	ldr	r3, [pc, #180]	; (1a3c0 <detect_Three_Phase_Voltage+0x138>)
   1a30a:	22fa      	movs	r2, #250	; 0xfa
   1a30c:	0091      	lsls	r1, r2, #2
   1a30e:	4798      	blx	r3
   1a310:	0003      	movs	r3, r0
   1a312:	60bb      	str	r3, [r7, #8]
			if (adcYB<0)
   1a314:	68bb      	ldr	r3, [r7, #8]
   1a316:	2b00      	cmp	r3, #0
   1a318:	da01      	bge.n	1a31e <detect_Three_Phase_Voltage+0x96>
			{
				adcYB = 0;
   1a31a:	2300      	movs	r3, #0
   1a31c:	60bb      	str	r3, [r7, #8]
			}
		}

		//int32_t adcBR =  Read_ADC0(ADC_POSITIVE_INPUT_PIN17,2000);
		int32_t adcBR = Read_Voltage_ADC0(ADC_POSITIVE_INPUT_PIN17);
   1a31e:	2011      	movs	r0, #17
   1a320:	4b25      	ldr	r3, [pc, #148]	; (1a3b8 <detect_Three_Phase_Voltage+0x130>)
   1a322:	4798      	blx	r3
   1a324:	0003      	movs	r3, r0
   1a326:	607b      	str	r3, [r7, #4]
		adcBR = (adcBR-12);
   1a328:	687b      	ldr	r3, [r7, #4]
   1a32a:	3b0c      	subs	r3, #12
   1a32c:	607b      	str	r3, [r7, #4]
		if (adcBR<0)
   1a32e:	687b      	ldr	r3, [r7, #4]
   1a330:	2b00      	cmp	r3, #0
   1a332:	da02      	bge.n	1a33a <detect_Three_Phase_Voltage+0xb2>
		{
			adcBR = 0;
   1a334:	2300      	movs	r3, #0
   1a336:	607b      	str	r3, [r7, #4]
   1a338:	e00f      	b.n	1a35a <detect_Three_Phase_Voltage+0xd2>
		}
		else
		{
			adcBR = (((adcBR-12)*670)/1000);
   1a33a:	687b      	ldr	r3, [r7, #4]
   1a33c:	3b0c      	subs	r3, #12
   1a33e:	4a21      	ldr	r2, [pc, #132]	; (1a3c4 <detect_Three_Phase_Voltage+0x13c>)
   1a340:	435a      	muls	r2, r3
   1a342:	0010      	movs	r0, r2
   1a344:	4b1e      	ldr	r3, [pc, #120]	; (1a3c0 <detect_Three_Phase_Voltage+0x138>)
   1a346:	22fa      	movs	r2, #250	; 0xfa
   1a348:	0091      	lsls	r1, r2, #2
   1a34a:	4798      	blx	r3
   1a34c:	0003      	movs	r3, r0
   1a34e:	607b      	str	r3, [r7, #4]
			if (adcBR<0)
   1a350:	687b      	ldr	r3, [r7, #4]
   1a352:	2b00      	cmp	r3, #0
   1a354:	da01      	bge.n	1a35a <detect_Three_Phase_Voltage+0xd2>
			{
				adcBR = 0;
   1a356:	2300      	movs	r3, #0
   1a358:	607b      	str	r3, [r7, #4]
			}
		}
		
		Analog_Parameter_Struct.PhaseRY_Voltage = filterVoltage(PHASE_RY,adcRY);
   1a35a:	68fb      	ldr	r3, [r7, #12]
   1a35c:	b29b      	uxth	r3, r3
   1a35e:	0019      	movs	r1, r3
   1a360:	2000      	movs	r0, #0
   1a362:	4b19      	ldr	r3, [pc, #100]	; (1a3c8 <detect_Three_Phase_Voltage+0x140>)
   1a364:	4798      	blx	r3
   1a366:	0003      	movs	r3, r0
   1a368:	001a      	movs	r2, r3
   1a36a:	4b18      	ldr	r3, [pc, #96]	; (1a3cc <detect_Three_Phase_Voltage+0x144>)
   1a36c:	601a      	str	r2, [r3, #0]
		Analog_Parameter_Struct.PhaseYB_Voltage = filterVoltage(PHASE_YB,adcYB);
   1a36e:	68bb      	ldr	r3, [r7, #8]
   1a370:	b29b      	uxth	r3, r3
   1a372:	0019      	movs	r1, r3
   1a374:	2001      	movs	r0, #1
   1a376:	4b14      	ldr	r3, [pc, #80]	; (1a3c8 <detect_Three_Phase_Voltage+0x140>)
   1a378:	4798      	blx	r3
   1a37a:	0003      	movs	r3, r0
   1a37c:	001a      	movs	r2, r3
   1a37e:	4b13      	ldr	r3, [pc, #76]	; (1a3cc <detect_Three_Phase_Voltage+0x144>)
   1a380:	605a      	str	r2, [r3, #4]
		Analog_Parameter_Struct.PhaseBR_Voltage = filterVoltage(PHASE_BR,adcBR);
   1a382:	687b      	ldr	r3, [r7, #4]
   1a384:	b29b      	uxth	r3, r3
   1a386:	0019      	movs	r1, r3
   1a388:	2002      	movs	r0, #2
   1a38a:	4b0f      	ldr	r3, [pc, #60]	; (1a3c8 <detect_Three_Phase_Voltage+0x140>)
   1a38c:	4798      	blx	r3
   1a38e:	0003      	movs	r3, r0
   1a390:	001a      	movs	r2, r3
   1a392:	4b0e      	ldr	r3, [pc, #56]	; (1a3cc <detect_Three_Phase_Voltage+0x144>)
   1a394:	609a      	str	r2, [r3, #8]
		
		//Analog_Parameter_Struct.PhaseRY_Voltage = adcRY;
		//Analog_Parameter_Struct.PhaseYB_Voltage = adcYB;
		//Analog_Parameter_Struct.PhaseBR_Voltage = adcBR;
		
		set_Three_Phase_State_From_Voltage();
   1a396:	4b0e      	ldr	r3, [pc, #56]	; (1a3d0 <detect_Three_Phase_Voltage+0x148>)
   1a398:	4798      	blx	r3
		xSemaphoreGive(xADC_Semaphore);
   1a39a:	4b05      	ldr	r3, [pc, #20]	; (1a3b0 <detect_Three_Phase_Voltage+0x128>)
   1a39c:	6818      	ldr	r0, [r3, #0]
   1a39e:	2300      	movs	r3, #0
   1a3a0:	2200      	movs	r2, #0
   1a3a2:	2100      	movs	r1, #0
   1a3a4:	4c0b      	ldr	r4, [pc, #44]	; (1a3d4 <detect_Three_Phase_Voltage+0x14c>)
   1a3a6:	47a0      	blx	r4
	}
}
   1a3a8:	46c0      	nop			; (mov r8, r8)
   1a3aa:	46bd      	mov	sp, r7
   1a3ac:	b005      	add	sp, #20
   1a3ae:	bd90      	pop	{r4, r7, pc}
   1a3b0:	20000244 	.word	0x20000244
   1a3b4:	0001f1d1 	.word	0x0001f1d1
   1a3b8:	00019801 	.word	0x00019801
   1a3bc:	0000028f 	.word	0x0000028f
   1a3c0:	000261f9 	.word	0x000261f9
   1a3c4:	0000029e 	.word	0x0000029e
   1a3c8:	0001a1b5 	.word	0x0001a1b5
   1a3cc:	200006e4 	.word	0x200006e4
   1a3d0:	0001a3d9 	.word	0x0001a3d9
   1a3d4:	0001ed31 	.word	0x0001ed31

0001a3d8 <set_Three_Phase_State_From_Voltage>:

//Function to set the Three Phase State from acquired voltage
void set_Three_Phase_State_From_Voltage(void) {
   1a3d8:	b580      	push	{r7, lr}
   1a3da:	b082      	sub	sp, #8
   1a3dc:	af00      	add	r7, sp, #0
	
	uint8_t temp_phase_state = structThreePhase_state.u8t_phase_ac_state;		//save last AC Phase State, in case AC Phase State is going to change
   1a3de:	1dfb      	adds	r3, r7, #7
   1a3e0:	4a2a      	ldr	r2, [pc, #168]	; (1a48c <set_Three_Phase_State_From_Voltage+0xb4>)
   1a3e2:	7852      	ldrb	r2, [r2, #1]
   1a3e4:	701a      	strb	r2, [r3, #0]
	
	
	if ((Analog_Parameter_Struct.PhaseRY_Voltage < 40) &&
   1a3e6:	4b2a      	ldr	r3, [pc, #168]	; (1a490 <set_Three_Phase_State_From_Voltage+0xb8>)
   1a3e8:	681b      	ldr	r3, [r3, #0]
   1a3ea:	2b27      	cmp	r3, #39	; 0x27
   1a3ec:	d80b      	bhi.n	1a406 <set_Three_Phase_State_From_Voltage+0x2e>
	(Analog_Parameter_Struct.PhaseYB_Voltage < 40) &&
   1a3ee:	4b28      	ldr	r3, [pc, #160]	; (1a490 <set_Three_Phase_State_From_Voltage+0xb8>)
   1a3f0:	685b      	ldr	r3, [r3, #4]
	if ((Analog_Parameter_Struct.PhaseRY_Voltage < 40) &&
   1a3f2:	2b27      	cmp	r3, #39	; 0x27
   1a3f4:	d807      	bhi.n	1a406 <set_Three_Phase_State_From_Voltage+0x2e>
	(Analog_Parameter_Struct.PhaseBR_Voltage < 40))				// if All phase volt, less than 40
   1a3f6:	4b26      	ldr	r3, [pc, #152]	; (1a490 <set_Three_Phase_State_From_Voltage+0xb8>)
   1a3f8:	689b      	ldr	r3, [r3, #8]
	(Analog_Parameter_Struct.PhaseYB_Voltage < 40) &&
   1a3fa:	2b27      	cmp	r3, #39	; 0x27
   1a3fc:	d803      	bhi.n	1a406 <set_Three_Phase_State_From_Voltage+0x2e>
	{
		structThreePhase_state.u8t_phase_ac_state = AC_OFF; //no phase is present, light is cut off
   1a3fe:	4b23      	ldr	r3, [pc, #140]	; (1a48c <set_Three_Phase_State_From_Voltage+0xb4>)
   1a400:	2200      	movs	r2, #0
   1a402:	705a      	strb	r2, [r3, #1]
   1a404:	e02a      	b.n	1a45c <set_Three_Phase_State_From_Voltage+0x84>
	}
	else if((abs(Analog_Parameter_Struct.PhaseRY_Voltage-Analog_Parameter_Struct.PhaseYB_Voltage)>user_settings_parameter_struct.singlePhasingVoltage) ||
   1a406:	4b22      	ldr	r3, [pc, #136]	; (1a490 <set_Three_Phase_State_From_Voltage+0xb8>)
   1a408:	681a      	ldr	r2, [r3, #0]
   1a40a:	4b21      	ldr	r3, [pc, #132]	; (1a490 <set_Three_Phase_State_From_Voltage+0xb8>)
   1a40c:	685b      	ldr	r3, [r3, #4]
   1a40e:	1ad3      	subs	r3, r2, r3
   1a410:	17da      	asrs	r2, r3, #31
   1a412:	189b      	adds	r3, r3, r2
   1a414:	4053      	eors	r3, r2
   1a416:	4a1f      	ldr	r2, [pc, #124]	; (1a494 <set_Three_Phase_State_From_Voltage+0xbc>)
   1a418:	8c52      	ldrh	r2, [r2, #34]	; 0x22
   1a41a:	4293      	cmp	r3, r2
   1a41c:	dc17      	bgt.n	1a44e <set_Three_Phase_State_From_Voltage+0x76>
	(abs(Analog_Parameter_Struct.PhaseYB_Voltage-Analog_Parameter_Struct.PhaseBR_Voltage)>user_settings_parameter_struct.singlePhasingVoltage) ||
   1a41e:	4b1c      	ldr	r3, [pc, #112]	; (1a490 <set_Three_Phase_State_From_Voltage+0xb8>)
   1a420:	685a      	ldr	r2, [r3, #4]
   1a422:	4b1b      	ldr	r3, [pc, #108]	; (1a490 <set_Three_Phase_State_From_Voltage+0xb8>)
   1a424:	689b      	ldr	r3, [r3, #8]
   1a426:	1ad3      	subs	r3, r2, r3
   1a428:	17da      	asrs	r2, r3, #31
   1a42a:	189b      	adds	r3, r3, r2
   1a42c:	4053      	eors	r3, r2
   1a42e:	4a19      	ldr	r2, [pc, #100]	; (1a494 <set_Three_Phase_State_From_Voltage+0xbc>)
   1a430:	8c52      	ldrh	r2, [r2, #34]	; 0x22
	else if((abs(Analog_Parameter_Struct.PhaseRY_Voltage-Analog_Parameter_Struct.PhaseYB_Voltage)>user_settings_parameter_struct.singlePhasingVoltage) ||
   1a432:	4293      	cmp	r3, r2
   1a434:	dc0b      	bgt.n	1a44e <set_Three_Phase_State_From_Voltage+0x76>
	(abs(Analog_Parameter_Struct.PhaseBR_Voltage-Analog_Parameter_Struct.PhaseRY_Voltage)>user_settings_parameter_struct.singlePhasingVoltage))  // if diff betweeen any 2 phases > 80
   1a436:	4b16      	ldr	r3, [pc, #88]	; (1a490 <set_Three_Phase_State_From_Voltage+0xb8>)
   1a438:	689a      	ldr	r2, [r3, #8]
   1a43a:	4b15      	ldr	r3, [pc, #84]	; (1a490 <set_Three_Phase_State_From_Voltage+0xb8>)
   1a43c:	681b      	ldr	r3, [r3, #0]
   1a43e:	1ad3      	subs	r3, r2, r3
   1a440:	17da      	asrs	r2, r3, #31
   1a442:	189b      	adds	r3, r3, r2
   1a444:	4053      	eors	r3, r2
   1a446:	4a13      	ldr	r2, [pc, #76]	; (1a494 <set_Three_Phase_State_From_Voltage+0xbc>)
   1a448:	8c52      	ldrh	r2, [r2, #34]	; 0x22
	(abs(Analog_Parameter_Struct.PhaseYB_Voltage-Analog_Parameter_Struct.PhaseBR_Voltage)>user_settings_parameter_struct.singlePhasingVoltage) ||
   1a44a:	4293      	cmp	r3, r2
   1a44c:	dd03      	ble.n	1a456 <set_Three_Phase_State_From_Voltage+0x7e>
	{
		structThreePhase_state.u8t_phase_ac_state = AC_2PH;//Single phasing Occured
   1a44e:	4b0f      	ldr	r3, [pc, #60]	; (1a48c <set_Three_Phase_State_From_Voltage+0xb4>)
   1a450:	2202      	movs	r2, #2
   1a452:	705a      	strb	r2, [r3, #1]
   1a454:	e002      	b.n	1a45c <set_Three_Phase_State_From_Voltage+0x84>
	}
	else  //all Phase are present
	{
		structThreePhase_state.u8t_phase_ac_state = AC_3PH;
   1a456:	4b0d      	ldr	r3, [pc, #52]	; (1a48c <set_Three_Phase_State_From_Voltage+0xb4>)
   1a458:	2203      	movs	r2, #3
   1a45a:	705a      	strb	r2, [r3, #1]
	}
	
	if (current_three_phase_state != structThreePhase_state.u8t_phase_ac_state)
   1a45c:	4b0b      	ldr	r3, [pc, #44]	; (1a48c <set_Three_Phase_State_From_Voltage+0xb4>)
   1a45e:	785b      	ldrb	r3, [r3, #1]
   1a460:	b2da      	uxtb	r2, r3
   1a462:	4b0d      	ldr	r3, [pc, #52]	; (1a498 <set_Three_Phase_State_From_Voltage+0xc0>)
   1a464:	781b      	ldrb	r3, [r3, #0]
   1a466:	b2db      	uxtb	r3, r3
   1a468:	429a      	cmp	r2, r3
   1a46a:	d00b      	beq.n	1a484 <set_Three_Phase_State_From_Voltage+0xac>
	{
		last_three_phase_state  = 	temp_phase_state;								//assign saved temp AC Phase State to last_three_phase_state
   1a46c:	4b0b      	ldr	r3, [pc, #44]	; (1a49c <set_Three_Phase_State_From_Voltage+0xc4>)
   1a46e:	1dfa      	adds	r2, r7, #7
   1a470:	7812      	ldrb	r2, [r2, #0]
   1a472:	701a      	strb	r2, [r3, #0]
		current_three_phase_state = structThreePhase_state.u8t_phase_ac_state;
   1a474:	4b05      	ldr	r3, [pc, #20]	; (1a48c <set_Three_Phase_State_From_Voltage+0xb4>)
   1a476:	785b      	ldrb	r3, [r3, #1]
   1a478:	b2da      	uxtb	r2, r3
   1a47a:	4b07      	ldr	r3, [pc, #28]	; (1a498 <set_Three_Phase_State_From_Voltage+0xc0>)
   1a47c:	701a      	strb	r2, [r3, #0]
		eventOccured = true;
   1a47e:	4b08      	ldr	r3, [pc, #32]	; (1a4a0 <set_Three_Phase_State_From_Voltage+0xc8>)
   1a480:	2201      	movs	r2, #1
   1a482:	701a      	strb	r2, [r3, #0]
	}
}
   1a484:	46c0      	nop			; (mov r8, r8)
   1a486:	46bd      	mov	sp, r7
   1a488:	b002      	add	sp, #8
   1a48a:	bd80      	pop	{r7, pc}
   1a48c:	20000740 	.word	0x20000740
   1a490:	200006e4 	.word	0x200006e4
   1a494:	20000660 	.word	0x20000660
   1a498:	20000820 	.word	0x20000820
   1a49c:	20000727 	.word	0x20000727
   1a4a0:	2000072a 	.word	0x2000072a

0001a4a4 <detect_Motor_Current>:

//Function to detect the Motor Current, From ADC, Average it (using ADC_0) , and store it in the Analog_Parameter_Struct
void detect_Motor_Current(void){
   1a4a4:	b590      	push	{r4, r7, lr}
   1a4a6:	b083      	sub	sp, #12
   1a4a8:	af00      	add	r7, sp, #0
	if(xSemaphoreTake(xADC_Semaphore,portMAX_DELAY)== pdTRUE)
   1a4aa:	4b33      	ldr	r3, [pc, #204]	; (1a578 <detect_Motor_Current+0xd4>)
   1a4ac:	681a      	ldr	r2, [r3, #0]
   1a4ae:	2301      	movs	r3, #1
   1a4b0:	425b      	negs	r3, r3
   1a4b2:	0019      	movs	r1, r3
   1a4b4:	0010      	movs	r0, r2
   1a4b6:	4b31      	ldr	r3, [pc, #196]	; (1a57c <detect_Motor_Current+0xd8>)
   1a4b8:	4798      	blx	r3
   1a4ba:	0003      	movs	r3, r0
   1a4bc:	2b01      	cmp	r3, #1
   1a4be:	d157      	bne.n	1a570 <detect_Motor_Current+0xcc>
	{
		uint32_t ADCcurrent = Read_ADC0(ADC_POSITIVE_INPUT_PIN16,200);
   1a4c0:	21c8      	movs	r1, #200	; 0xc8
   1a4c2:	2010      	movs	r0, #16
   1a4c4:	4b2e      	ldr	r3, [pc, #184]	; (1a580 <detect_Motor_Current+0xdc>)
   1a4c6:	4798      	blx	r3
   1a4c8:	0003      	movs	r3, r0
   1a4ca:	607b      	str	r3, [r7, #4]
		
		
		if(ADCcurrent>15)
   1a4cc:	687b      	ldr	r3, [r7, #4]
   1a4ce:	2b0f      	cmp	r3, #15
   1a4d0:	d906      	bls.n	1a4e0 <detect_Motor_Current+0x3c>
		{
			ADCcurrent = abs(ADCcurrent - 15);
   1a4d2:	687b      	ldr	r3, [r7, #4]
   1a4d4:	3b0f      	subs	r3, #15
   1a4d6:	17da      	asrs	r2, r3, #31
   1a4d8:	189b      	adds	r3, r3, r2
   1a4da:	4053      	eors	r3, r2
   1a4dc:	607b      	str	r3, [r7, #4]
   1a4de:	e004      	b.n	1a4ea <detect_Motor_Current+0x46>
		}
		else if(ADCcurrent <= 15)
   1a4e0:	687b      	ldr	r3, [r7, #4]
   1a4e2:	2b0f      	cmp	r3, #15
   1a4e4:	d801      	bhi.n	1a4ea <detect_Motor_Current+0x46>
		{
			ADCcurrent = 0;
   1a4e6:	2300      	movs	r3, #0
   1a4e8:	607b      	str	r3, [r7, #4]
		}
		
		xSemaphoreGive(xADC_Semaphore);
   1a4ea:	4b23      	ldr	r3, [pc, #140]	; (1a578 <detect_Motor_Current+0xd4>)
   1a4ec:	6818      	ldr	r0, [r3, #0]
   1a4ee:	2300      	movs	r3, #0
   1a4f0:	2200      	movs	r2, #0
   1a4f2:	2100      	movs	r1, #0
   1a4f4:	4c23      	ldr	r4, [pc, #140]	; (1a584 <detect_Motor_Current+0xe0>)
   1a4f6:	47a0      	blx	r4
		Analog_Parameter_Struct.Motor_Current_ADC_Value = ADCcurrent;				// does ADCcurrent here have ADC Value of Current ?
   1a4f8:	4b23      	ldr	r3, [pc, #140]	; (1a588 <detect_Motor_Current+0xe4>)
   1a4fa:	687a      	ldr	r2, [r7, #4]
   1a4fc:	60da      	str	r2, [r3, #12]
		//ADCcurrent = (ADCcurrent*7225)/1000;
		ADCcurrent = (ADCcurrent*3425)/1000;
   1a4fe:	687b      	ldr	r3, [r7, #4]
   1a500:	4a22      	ldr	r2, [pc, #136]	; (1a58c <detect_Motor_Current+0xe8>)
   1a502:	435a      	muls	r2, r3
   1a504:	0010      	movs	r0, r2
   1a506:	4b22      	ldr	r3, [pc, #136]	; (1a590 <detect_Motor_Current+0xec>)
   1a508:	22fa      	movs	r2, #250	; 0xfa
   1a50a:	0091      	lsls	r1, r2, #2
   1a50c:	4798      	blx	r3
   1a50e:	0003      	movs	r3, r0
   1a510:	607b      	str	r3, [r7, #4]
		if(ADCcurrent<1200 && ADCcurrent!=0)
   1a512:	687b      	ldr	r3, [r7, #4]
   1a514:	4a1f      	ldr	r2, [pc, #124]	; (1a594 <detect_Motor_Current+0xf0>)
   1a516:	4293      	cmp	r3, r2
   1a518:	d810      	bhi.n	1a53c <detect_Motor_Current+0x98>
   1a51a:	687b      	ldr	r3, [r7, #4]
   1a51c:	2b00      	cmp	r3, #0
   1a51e:	d00d      	beq.n	1a53c <detect_Motor_Current+0x98>
		{
			ADCcurrent = ADCcurrent + (((1200-ADCcurrent)*272)/1000);
   1a520:	687b      	ldr	r3, [r7, #4]
   1a522:	4a1d      	ldr	r2, [pc, #116]	; (1a598 <detect_Motor_Current+0xf4>)
   1a524:	4353      	muls	r3, r2
   1a526:	4a1d      	ldr	r2, [pc, #116]	; (1a59c <detect_Motor_Current+0xf8>)
   1a528:	1898      	adds	r0, r3, r2
   1a52a:	4b19      	ldr	r3, [pc, #100]	; (1a590 <detect_Motor_Current+0xec>)
   1a52c:	22fa      	movs	r2, #250	; 0xfa
   1a52e:	0091      	lsls	r1, r2, #2
   1a530:	4798      	blx	r3
   1a532:	0003      	movs	r3, r0
   1a534:	001a      	movs	r2, r3
   1a536:	687b      	ldr	r3, [r7, #4]
   1a538:	189b      	adds	r3, r3, r2
   1a53a:	607b      	str	r3, [r7, #4]
		}
		Analog_Parameter_Struct.Motor_Current = ADCcurrent;
   1a53c:	4b12      	ldr	r3, [pc, #72]	; (1a588 <detect_Motor_Current+0xe4>)
   1a53e:	687a      	ldr	r2, [r7, #4]
   1a540:	611a      	str	r2, [r3, #16]
		Analog_Parameter_Struct.Motor_Current_IntPart = ADCcurrent/100;
   1a542:	687a      	ldr	r2, [r7, #4]
   1a544:	4b12      	ldr	r3, [pc, #72]	; (1a590 <detect_Motor_Current+0xec>)
   1a546:	2164      	movs	r1, #100	; 0x64
   1a548:	0010      	movs	r0, r2
   1a54a:	4798      	blx	r3
   1a54c:	0003      	movs	r3, r0
   1a54e:	b29a      	uxth	r2, r3
   1a550:	4b0d      	ldr	r3, [pc, #52]	; (1a588 <detect_Motor_Current+0xe4>)
   1a552:	829a      	strh	r2, [r3, #20]
		Analog_Parameter_Struct.Motor_Current_DecPart = ADCcurrent%100;
   1a554:	687a      	ldr	r2, [r7, #4]
   1a556:	4b12      	ldr	r3, [pc, #72]	; (1a5a0 <detect_Motor_Current+0xfc>)
   1a558:	2164      	movs	r1, #100	; 0x64
   1a55a:	0010      	movs	r0, r2
   1a55c:	4798      	blx	r3
   1a55e:	000b      	movs	r3, r1
   1a560:	b29a      	uxth	r2, r3
   1a562:	4b09      	ldr	r3, [pc, #36]	; (1a588 <detect_Motor_Current+0xe4>)
   1a564:	82da      	strh	r2, [r3, #22]
		ucharCurrent_Detect_Flag = 0;												//reset the flag, to disable current reading for next 500ms
   1a566:	4b0f      	ldr	r3, [pc, #60]	; (1a5a4 <detect_Motor_Current+0x100>)
   1a568:	2200      	movs	r2, #0
   1a56a:	701a      	strb	r2, [r3, #0]
		calcPowerConsumption();
   1a56c:	4b0e      	ldr	r3, [pc, #56]	; (1a5a8 <detect_Motor_Current+0x104>)
   1a56e:	4798      	blx	r3
	}
}
   1a570:	46c0      	nop			; (mov r8, r8)
   1a572:	46bd      	mov	sp, r7
   1a574:	b003      	add	sp, #12
   1a576:	bd90      	pop	{r4, r7, pc}
   1a578:	20000244 	.word	0x20000244
   1a57c:	0001f1d1 	.word	0x0001f1d1
   1a580:	00019745 	.word	0x00019745
   1a584:	0001ed31 	.word	0x0001ed31
   1a588:	200006e4 	.word	0x200006e4
   1a58c:	00000d61 	.word	0x00000d61
   1a590:	000260e5 	.word	0x000260e5
   1a594:	000004af 	.word	0x000004af
   1a598:	fffffef0 	.word	0xfffffef0
   1a59c:	0004fb00 	.word	0x0004fb00
   1a5a0:	000261f1 	.word	0x000261f1
   1a5a4:	2000025b 	.word	0x2000025b
   1a5a8:	0001a5ad 	.word	0x0001a5ad

0001a5ac <calcPowerConsumption>:

/************************************************************************/
/* To Calculate Power Consumption of Motor                              */
/************************************************************************/
void calcPowerConsumption(void) 
{
   1a5ac:	b590      	push	{r4, r7, lr}
   1a5ae:	b085      	sub	sp, #20
   1a5b0:	af00      	add	r7, sp, #0
	uint16_t avgVotlage = Analog_Parameter_Struct.PhaseRY_Voltage + Analog_Parameter_Struct.PhaseYB_Voltage + Analog_Parameter_Struct.PhaseBR_Voltage;
   1a5b2:	4b39      	ldr	r3, [pc, #228]	; (1a698 <calcPowerConsumption+0xec>)
   1a5b4:	681b      	ldr	r3, [r3, #0]
   1a5b6:	b29a      	uxth	r2, r3
   1a5b8:	4b37      	ldr	r3, [pc, #220]	; (1a698 <calcPowerConsumption+0xec>)
   1a5ba:	685b      	ldr	r3, [r3, #4]
   1a5bc:	b29b      	uxth	r3, r3
   1a5be:	18d3      	adds	r3, r2, r3
   1a5c0:	b299      	uxth	r1, r3
   1a5c2:	4b35      	ldr	r3, [pc, #212]	; (1a698 <calcPowerConsumption+0xec>)
   1a5c4:	689b      	ldr	r3, [r3, #8]
   1a5c6:	b29a      	uxth	r2, r3
   1a5c8:	230e      	movs	r3, #14
   1a5ca:	18fb      	adds	r3, r7, r3
   1a5cc:	188a      	adds	r2, r1, r2
   1a5ce:	801a      	strh	r2, [r3, #0]
	
	double result = (avgVotlage/(float)3) * (Analog_Parameter_Struct.Motor_Current/(float)100);
   1a5d0:	230e      	movs	r3, #14
   1a5d2:	18fb      	adds	r3, r7, r3
   1a5d4:	881a      	ldrh	r2, [r3, #0]
   1a5d6:	4b31      	ldr	r3, [pc, #196]	; (1a69c <calcPowerConsumption+0xf0>)
   1a5d8:	0010      	movs	r0, r2
   1a5da:	4798      	blx	r3
   1a5dc:	1c02      	adds	r2, r0, #0
   1a5de:	4b30      	ldr	r3, [pc, #192]	; (1a6a0 <calcPowerConsumption+0xf4>)
   1a5e0:	4930      	ldr	r1, [pc, #192]	; (1a6a4 <calcPowerConsumption+0xf8>)
   1a5e2:	1c10      	adds	r0, r2, #0
   1a5e4:	4798      	blx	r3
   1a5e6:	1c03      	adds	r3, r0, #0
   1a5e8:	1c1c      	adds	r4, r3, #0
   1a5ea:	4b2b      	ldr	r3, [pc, #172]	; (1a698 <calcPowerConsumption+0xec>)
   1a5ec:	691a      	ldr	r2, [r3, #16]
   1a5ee:	4b2e      	ldr	r3, [pc, #184]	; (1a6a8 <calcPowerConsumption+0xfc>)
   1a5f0:	0010      	movs	r0, r2
   1a5f2:	4798      	blx	r3
   1a5f4:	1c02      	adds	r2, r0, #0
   1a5f6:	4b2a      	ldr	r3, [pc, #168]	; (1a6a0 <calcPowerConsumption+0xf4>)
   1a5f8:	492c      	ldr	r1, [pc, #176]	; (1a6ac <calcPowerConsumption+0x100>)
   1a5fa:	1c10      	adds	r0, r2, #0
   1a5fc:	4798      	blx	r3
   1a5fe:	1c03      	adds	r3, r0, #0
   1a600:	1c1a      	adds	r2, r3, #0
   1a602:	4b2b      	ldr	r3, [pc, #172]	; (1a6b0 <calcPowerConsumption+0x104>)
   1a604:	1c11      	adds	r1, r2, #0
   1a606:	1c20      	adds	r0, r4, #0
   1a608:	4798      	blx	r3
   1a60a:	1c03      	adds	r3, r0, #0
   1a60c:	1c1a      	adds	r2, r3, #0
   1a60e:	4b29      	ldr	r3, [pc, #164]	; (1a6b4 <calcPowerConsumption+0x108>)
   1a610:	1c10      	adds	r0, r2, #0
   1a612:	4798      	blx	r3
   1a614:	0003      	movs	r3, r0
   1a616:	000c      	movs	r4, r1
   1a618:	603b      	str	r3, [r7, #0]
   1a61a:	607c      	str	r4, [r7, #4]
	result = sqrt(3) * result * 85 / (float)100;
   1a61c:	4c26      	ldr	r4, [pc, #152]	; (1a6b8 <calcPowerConsumption+0x10c>)
   1a61e:	4a27      	ldr	r2, [pc, #156]	; (1a6bc <calcPowerConsumption+0x110>)
   1a620:	4b27      	ldr	r3, [pc, #156]	; (1a6c0 <calcPowerConsumption+0x114>)
   1a622:	6838      	ldr	r0, [r7, #0]
   1a624:	6879      	ldr	r1, [r7, #4]
   1a626:	47a0      	blx	r4
   1a628:	0003      	movs	r3, r0
   1a62a:	000c      	movs	r4, r1
   1a62c:	0018      	movs	r0, r3
   1a62e:	0021      	movs	r1, r4
   1a630:	4c21      	ldr	r4, [pc, #132]	; (1a6b8 <calcPowerConsumption+0x10c>)
   1a632:	2200      	movs	r2, #0
   1a634:	4b23      	ldr	r3, [pc, #140]	; (1a6c4 <calcPowerConsumption+0x118>)
   1a636:	47a0      	blx	r4
   1a638:	0003      	movs	r3, r0
   1a63a:	000c      	movs	r4, r1
   1a63c:	0018      	movs	r0, r3
   1a63e:	0021      	movs	r1, r4
   1a640:	4c21      	ldr	r4, [pc, #132]	; (1a6c8 <calcPowerConsumption+0x11c>)
   1a642:	2200      	movs	r2, #0
   1a644:	4b21      	ldr	r3, [pc, #132]	; (1a6cc <calcPowerConsumption+0x120>)
   1a646:	47a0      	blx	r4
   1a648:	0003      	movs	r3, r0
   1a64a:	000c      	movs	r4, r1
   1a64c:	603b      	str	r3, [r7, #0]
   1a64e:	607c      	str	r4, [r7, #4]

	Analog_Parameter_Struct.Motor_Power = (uint32_t) result;
   1a650:	4b1f      	ldr	r3, [pc, #124]	; (1a6d0 <calcPowerConsumption+0x124>)
   1a652:	6838      	ldr	r0, [r7, #0]
   1a654:	6879      	ldr	r1, [r7, #4]
   1a656:	4798      	blx	r3
   1a658:	0002      	movs	r2, r0
   1a65a:	4b0f      	ldr	r3, [pc, #60]	; (1a698 <calcPowerConsumption+0xec>)
   1a65c:	621a      	str	r2, [r3, #32]
	Analog_Parameter_Struct.Motor_Power_IntPart = (uint32_t) result / 1000;
   1a65e:	4b1c      	ldr	r3, [pc, #112]	; (1a6d0 <calcPowerConsumption+0x124>)
   1a660:	6838      	ldr	r0, [r7, #0]
   1a662:	6879      	ldr	r1, [r7, #4]
   1a664:	4798      	blx	r3
   1a666:	4b1b      	ldr	r3, [pc, #108]	; (1a6d4 <calcPowerConsumption+0x128>)
   1a668:	22fa      	movs	r2, #250	; 0xfa
   1a66a:	0091      	lsls	r1, r2, #2
   1a66c:	4798      	blx	r3
   1a66e:	0003      	movs	r3, r0
   1a670:	b29a      	uxth	r2, r3
   1a672:	4b09      	ldr	r3, [pc, #36]	; (1a698 <calcPowerConsumption+0xec>)
   1a674:	849a      	strh	r2, [r3, #36]	; 0x24
	Analog_Parameter_Struct.Motor_Power_DecPart =  (uint32_t) result % 1000;
   1a676:	4b16      	ldr	r3, [pc, #88]	; (1a6d0 <calcPowerConsumption+0x124>)
   1a678:	6838      	ldr	r0, [r7, #0]
   1a67a:	6879      	ldr	r1, [r7, #4]
   1a67c:	4798      	blx	r3
   1a67e:	4b16      	ldr	r3, [pc, #88]	; (1a6d8 <calcPowerConsumption+0x12c>)
   1a680:	22fa      	movs	r2, #250	; 0xfa
   1a682:	0091      	lsls	r1, r2, #2
   1a684:	4798      	blx	r3
   1a686:	000b      	movs	r3, r1
   1a688:	001a      	movs	r2, r3
   1a68a:	4b03      	ldr	r3, [pc, #12]	; (1a698 <calcPowerConsumption+0xec>)
   1a68c:	629a      	str	r2, [r3, #40]	; 0x28
}
   1a68e:	46c0      	nop			; (mov r8, r8)
   1a690:	46bd      	mov	sp, r7
   1a692:	b005      	add	sp, #20
   1a694:	bd90      	pop	{r4, r7, pc}
   1a696:	46c0      	nop			; (mov r8, r8)
   1a698:	200006e4 	.word	0x200006e4
   1a69c:	00026b6d 	.word	0x00026b6d
   1a6a0:	0002669d 	.word	0x0002669d
   1a6a4:	40400000 	.word	0x40400000
   1a6a8:	00026c0d 	.word	0x00026c0d
   1a6ac:	42c80000 	.word	0x42c80000
   1a6b0:	0002692d 	.word	0x0002692d
   1a6b4:	000287e9 	.word	0x000287e9
   1a6b8:	00027b21 	.word	0x00027b21
   1a6bc:	e8584caa 	.word	0xe8584caa
   1a6c0:	3ffbb67a 	.word	0x3ffbb67a
   1a6c4:	40554000 	.word	0x40554000
   1a6c8:	000272b9 	.word	0x000272b9
   1a6cc:	40590000 	.word	0x40590000
   1a6d0:	000264e1 	.word	0x000264e1
   1a6d4:	000260e5 	.word	0x000260e5
   1a6d8:	000261f1 	.word	0x000261f1

0001a6dc <should_Detect_New_Current>:

//Function to check if the New Current Reading should be read
bool should_Detect_New_Current(void){
   1a6dc:	b580      	push	{r7, lr}
   1a6de:	af00      	add	r7, sp, #0
	
	//todo : add all the conditions checks i.e. motor ON, current consumption ON etc. , and should get new reading every 500ms
	
	return (ucharCurrent_Detect_Flag == 1);
   1a6e0:	4b04      	ldr	r3, [pc, #16]	; (1a6f4 <should_Detect_New_Current+0x18>)
   1a6e2:	781b      	ldrb	r3, [r3, #0]
   1a6e4:	b2db      	uxtb	r3, r3
   1a6e6:	3b01      	subs	r3, #1
   1a6e8:	425a      	negs	r2, r3
   1a6ea:	4153      	adcs	r3, r2
   1a6ec:	b2db      	uxtb	r3, r3
	
	//return (should_Detect_New_Voltage());
}
   1a6ee:	0018      	movs	r0, r3
   1a6f0:	46bd      	mov	sp, r7
   1a6f2:	bd80      	pop	{r7, pc}
   1a6f4:	2000025b 	.word	0x2000025b

0001a6f8 <getACPowerState>:

bool getACPowerState(void)
{
   1a6f8:	b580      	push	{r7, lr}
   1a6fa:	af00      	add	r7, sp, #0
	//return false;
	return phaseAC;
   1a6fc:	4b02      	ldr	r3, [pc, #8]	; (1a708 <getACPowerState+0x10>)
   1a6fe:	781b      	ldrb	r3, [r3, #0]
   1a700:	b2db      	uxtb	r3, r3
}
   1a702:	0018      	movs	r0, r3
   1a704:	46bd      	mov	sp, r7
   1a706:	bd80      	pop	{r7, pc}
   1a708:	200007a6 	.word	0x200007a6

0001a70c <setACPowerState>:

void setACPowerState(bool state)
{
   1a70c:	b580      	push	{r7, lr}
   1a70e:	b082      	sub	sp, #8
   1a710:	af00      	add	r7, sp, #0
   1a712:	0002      	movs	r2, r0
   1a714:	1dfb      	adds	r3, r7, #7
   1a716:	701a      	strb	r2, [r3, #0]
	phaseAC = state;
   1a718:	4b03      	ldr	r3, [pc, #12]	; (1a728 <setACPowerState+0x1c>)
   1a71a:	1dfa      	adds	r2, r7, #7
   1a71c:	7812      	ldrb	r2, [r2, #0]
   1a71e:	701a      	strb	r2, [r3, #0]
}
   1a720:	46c0      	nop			; (mov r8, r8)
   1a722:	46bd      	mov	sp, r7
   1a724:	b002      	add	sp, #8
   1a726:	bd80      	pop	{r7, pc}
   1a728:	200007a6 	.word	0x200007a6

0001a72c <getAllPhaseState>:

uint8_t getAllPhaseState(void)
{
   1a72c:	b580      	push	{r7, lr}
   1a72e:	af00      	add	r7, sp, #0
	return allPhase;
   1a730:	4b02      	ldr	r3, [pc, #8]	; (1a73c <getAllPhaseState+0x10>)
   1a732:	781b      	ldrb	r3, [r3, #0]
   1a734:	b2db      	uxtb	r3, r3
	//}
	//else
	//{
	//return allPhase;
	//}
}
   1a736:	0018      	movs	r0, r3
   1a738:	46bd      	mov	sp, r7
   1a73a:	bd80      	pop	{r7, pc}
   1a73c:	20000759 	.word	0x20000759

0001a740 <setAllPhaseState>:

void setAllPhaseState(uint8_t state)
{
   1a740:	b580      	push	{r7, lr}
   1a742:	b082      	sub	sp, #8
   1a744:	af00      	add	r7, sp, #0
   1a746:	0002      	movs	r2, r0
   1a748:	1dfb      	adds	r3, r7, #7
   1a74a:	701a      	strb	r2, [r3, #0]
	allPhase = state;
   1a74c:	4b03      	ldr	r3, [pc, #12]	; (1a75c <setAllPhaseState+0x1c>)
   1a74e:	1dfa      	adds	r2, r7, #7
   1a750:	7812      	ldrb	r2, [r2, #0]
   1a752:	701a      	strb	r2, [r3, #0]
}
   1a754:	46c0      	nop			; (mov r8, r8)
   1a756:	46bd      	mov	sp, r7
   1a758:	b002      	add	sp, #8
   1a75a:	bd80      	pop	{r7, pc}
   1a75c:	20000759 	.word	0x20000759

0001a760 <getPhaseSequence>:

bool getPhaseSequence()
{
   1a760:	b580      	push	{r7, lr}
   1a762:	af00      	add	r7, sp, #0
	return vBoolPhaseSeq;
   1a764:	4b02      	ldr	r3, [pc, #8]	; (1a770 <getPhaseSequence+0x10>)
   1a766:	781b      	ldrb	r3, [r3, #0]
   1a768:	b2db      	uxtb	r3, r3
}
   1a76a:	0018      	movs	r0, r3
   1a76c:	46bd      	mov	sp, r7
   1a76e:	bd80      	pop	{r7, pc}
   1a770:	20000767 	.word	0x20000767

0001a774 <setPhaseSequence>:

void setPhaseSequence(bool phaseSequence)
{
   1a774:	b580      	push	{r7, lr}
   1a776:	b082      	sub	sp, #8
   1a778:	af00      	add	r7, sp, #0
   1a77a:	0002      	movs	r2, r0
   1a77c:	1dfb      	adds	r3, r7, #7
   1a77e:	701a      	strb	r2, [r3, #0]
	vBoolPhaseSeq=phaseSequence;
   1a780:	4b03      	ldr	r3, [pc, #12]	; (1a790 <setPhaseSequence+0x1c>)
   1a782:	1dfa      	adds	r2, r7, #7
   1a784:	7812      	ldrb	r2, [r2, #0]
   1a786:	701a      	strb	r2, [r3, #0]
}
   1a788:	46c0      	nop			; (mov r8, r8)
   1a78a:	46bd      	mov	sp, r7
   1a78c:	b002      	add	sp, #8
   1a78e:	bd80      	pop	{r7, pc}
   1a790:	20000767 	.word	0x20000767

0001a794 <getMotorState>:


bool getMotorState(void)
{
   1a794:	b580      	push	{r7, lr}
   1a796:	af00      	add	r7, sp, #0
	return mFeedback;
   1a798:	4b02      	ldr	r3, [pc, #8]	; (1a7a4 <getMotorState+0x10>)
   1a79a:	781b      	ldrb	r3, [r3, #0]
   1a79c:	b2db      	uxtb	r3, r3
}
   1a79e:	0018      	movs	r0, r3
   1a7a0:	46bd      	mov	sp, r7
   1a7a2:	bd80      	pop	{r7, pc}
   1a7a4:	2000073a 	.word	0x2000073a

0001a7a8 <setMotorState>:

void setMotorState(bool state)
{
   1a7a8:	b580      	push	{r7, lr}
   1a7aa:	b082      	sub	sp, #8
   1a7ac:	af00      	add	r7, sp, #0
   1a7ae:	0002      	movs	r2, r0
   1a7b0:	1dfb      	adds	r3, r7, #7
   1a7b2:	701a      	strb	r2, [r3, #0]
	mFeedback = state;
   1a7b4:	4b0a      	ldr	r3, [pc, #40]	; (1a7e0 <setMotorState+0x38>)
   1a7b6:	1dfa      	adds	r2, r7, #7
   1a7b8:	7812      	ldrb	r2, [r2, #0]
   1a7ba:	701a      	strb	r2, [r3, #0]
	if (state)
   1a7bc:	1dfb      	adds	r3, r7, #7
   1a7be:	781b      	ldrb	r3, [r3, #0]
   1a7c0:	2b00      	cmp	r3, #0
   1a7c2:	d004      	beq.n	1a7ce <setMotorState+0x26>
	{
		MOTOR_ON_LED_ON;
   1a7c4:	2100      	movs	r1, #0
   1a7c6:	2005      	movs	r0, #5
   1a7c8:	4b06      	ldr	r3, [pc, #24]	; (1a7e4 <setMotorState+0x3c>)
   1a7ca:	4798      	blx	r3
	}
	else
	{
		MOTOR_ON_LED_OFF;
	}
}
   1a7cc:	e003      	b.n	1a7d6 <setMotorState+0x2e>
		MOTOR_ON_LED_OFF;
   1a7ce:	2101      	movs	r1, #1
   1a7d0:	2005      	movs	r0, #5
   1a7d2:	4b04      	ldr	r3, [pc, #16]	; (1a7e4 <setMotorState+0x3c>)
   1a7d4:	4798      	blx	r3
}
   1a7d6:	46c0      	nop			; (mov r8, r8)
   1a7d8:	46bd      	mov	sp, r7
   1a7da:	b002      	add	sp, #8
   1a7dc:	bd80      	pop	{r7, pc}
   1a7de:	46c0      	nop			; (mov r8, r8)
   1a7e0:	2000073a 	.word	0x2000073a
   1a7e4:	00018c41 	.word	0x00018c41

0001a7e8 <getMotorState_from_pin>:

bool getMotorState_from_pin(void)
{
   1a7e8:	b590      	push	{r4, r7, lr}
   1a7ea:	b083      	sub	sp, #12
   1a7ec:	af00      	add	r7, sp, #0
	uint8_t p1;
	bool p2, p3, p4;
	readSensorState(&p1, &p2, &p3, &p4);
   1a7ee:	1d3b      	adds	r3, r7, #4
   1a7f0:	1d7a      	adds	r2, r7, #5
   1a7f2:	1db9      	adds	r1, r7, #6
   1a7f4:	1df8      	adds	r0, r7, #7
   1a7f6:	4c06      	ldr	r4, [pc, #24]	; (1a810 <getMotorState_from_pin+0x28>)
   1a7f8:	47a0      	blx	r4
	setMotorState(p3);
   1a7fa:	1d7b      	adds	r3, r7, #5
   1a7fc:	781b      	ldrb	r3, [r3, #0]
   1a7fe:	0018      	movs	r0, r3
   1a800:	4b04      	ldr	r3, [pc, #16]	; (1a814 <getMotorState_from_pin+0x2c>)
   1a802:	4798      	blx	r3
	return p3;
   1a804:	1d7b      	adds	r3, r7, #5
   1a806:	781b      	ldrb	r3, [r3, #0]
}
   1a808:	0018      	movs	r0, r3
   1a80a:	46bd      	mov	sp, r7
   1a80c:	b003      	add	sp, #12
   1a80e:	bd90      	pop	{r4, r7, pc}
   1a810:	0001a819 	.word	0x0001a819
   1a814:	0001a7a9 	.word	0x0001a7a9

0001a818 <readSensorState>:



void readSensorState(uint8_t *allPhase, bool *phaseSeq,bool *motor, bool *acPhase)
{
   1a818:	b590      	push	{r4, r7, lr}
   1a81a:	b087      	sub	sp, #28
   1a81c:	af00      	add	r7, sp, #0
   1a81e:	60f8      	str	r0, [r7, #12]
   1a820:	60b9      	str	r1, [r7, #8]
   1a822:	607a      	str	r2, [r7, #4]
   1a824:	603b      	str	r3, [r7, #0]
	*allPhase = structThreePhase_state.u8t_phase_ac_state;
   1a826:	4b3f      	ldr	r3, [pc, #252]	; (1a924 <readSensorState+0x10c>)
   1a828:	785b      	ldrb	r3, [r3, #1]
   1a82a:	b2da      	uxtb	r2, r3
   1a82c:	68fb      	ldr	r3, [r7, #12]
   1a82e:	701a      	strb	r2, [r3, #0]
	//*phaseSeq = structThreePhase_state.u8t_phase_sequence_flag;
	if(structThreePhase_state.u8t_phase_sequence_flag == THREEPHASE_OK)
   1a830:	4b3c      	ldr	r3, [pc, #240]	; (1a924 <readSensorState+0x10c>)
   1a832:	781b      	ldrb	r3, [r3, #0]
   1a834:	b2db      	uxtb	r3, r3
   1a836:	2b02      	cmp	r3, #2
   1a838:	d103      	bne.n	1a842 <readSensorState+0x2a>
	{
		*phaseSeq=true;
   1a83a:	68bb      	ldr	r3, [r7, #8]
   1a83c:	2201      	movs	r2, #1
   1a83e:	701a      	strb	r2, [r3, #0]
   1a840:	e002      	b.n	1a848 <readSensorState+0x30>
	}
	else
	{
		*phaseSeq = false;
   1a842:	68bb      	ldr	r3, [r7, #8]
   1a844:	2200      	movs	r2, #0
   1a846:	701a      	strb	r2, [r3, #0]
	//{
	//*p1 = false;
	//}

	// If MotorFeedback Detection is disabled
	if (user_settings_parameter_struct.detectMotorFeedback == MOTORFEEDBACK_DETECTION_OFF)
   1a848:	4b37      	ldr	r3, [pc, #220]	; (1a928 <readSensorState+0x110>)
   1a84a:	2225      	movs	r2, #37	; 0x25
   1a84c:	5c9b      	ldrb	r3, [r3, r2]
   1a84e:	2b00      	cmp	r3, #0
   1a850:	d106      	bne.n	1a860 <readSensorState+0x48>
	{
		*motor  = getMotorState();
   1a852:	4b36      	ldr	r3, [pc, #216]	; (1a92c <readSensorState+0x114>)
   1a854:	4798      	blx	r3
   1a856:	0003      	movs	r3, r0
   1a858:	001a      	movs	r2, r3
   1a85a:	687b      	ldr	r3, [r7, #4]
   1a85c:	701a      	strb	r2, [r3, #0]
   1a85e:	e030      	b.n	1a8c2 <readSensorState+0xaa>
	}
	// If Motor Feedback is to be detected using Current
	else if(user_settings_parameter_struct.detectMotorFeedback == MOTORFEEDBACK_DETECTION_CURRENT)
   1a860:	4b31      	ldr	r3, [pc, #196]	; (1a928 <readSensorState+0x110>)
   1a862:	2225      	movs	r2, #37	; 0x25
   1a864:	5c9b      	ldrb	r3, [r3, r2]
   1a866:	2b01      	cmp	r3, #1
   1a868:	d106      	bne.n	1a878 <readSensorState+0x60>
	{
		*motor = checkMotorStatusUsingCurrent();
   1a86a:	4b31      	ldr	r3, [pc, #196]	; (1a930 <readSensorState+0x118>)
   1a86c:	4798      	blx	r3
   1a86e:	0003      	movs	r3, r0
   1a870:	001a      	movs	r2, r3
   1a872:	687b      	ldr	r3, [r7, #4]
   1a874:	701a      	strb	r2, [r3, #0]
   1a876:	e024      	b.n	1a8c2 <readSensorState+0xaa>
		
	}
	// if Motor Feedback is to be detected using HW Feedback Circuit
	else if(user_settings_parameter_struct.detectMotorFeedback == MOTORFEEDBACK_DETECTION_ON)
   1a878:	4b2b      	ldr	r3, [pc, #172]	; (1a928 <readSensorState+0x110>)
   1a87a:	2225      	movs	r2, #37	; 0x25
   1a87c:	5c9b      	ldrb	r3, [r3, r2]
   1a87e:	2b02      	cmp	r3, #2
   1a880:	d11f      	bne.n	1a8c2 <readSensorState+0xaa>
	{
		*motor  = !(port_pin_get_input_level(PIN_MOTOR_FEEDBACK));
   1a882:	202e      	movs	r0, #46	; 0x2e
   1a884:	4b2b      	ldr	r3, [pc, #172]	; (1a934 <readSensorState+0x11c>)
   1a886:	4798      	blx	r3
   1a888:	0003      	movs	r3, r0
   1a88a:	1e5a      	subs	r2, r3, #1
   1a88c:	4193      	sbcs	r3, r2
   1a88e:	b2db      	uxtb	r3, r3
   1a890:	2201      	movs	r2, #1
   1a892:	4053      	eors	r3, r2
   1a894:	b2db      	uxtb	r3, r3
   1a896:	1c1a      	adds	r2, r3, #0
   1a898:	2301      	movs	r3, #1
   1a89a:	4013      	ands	r3, r2
   1a89c:	b2da      	uxtb	r2, r3
   1a89e:	687b      	ldr	r3, [r7, #4]
   1a8a0:	701a      	strb	r2, [r3, #0]
		*motor  = !(port_pin_get_input_level(PIN_MOTOR_FEEDBACK));
   1a8a2:	202e      	movs	r0, #46	; 0x2e
   1a8a4:	4b23      	ldr	r3, [pc, #140]	; (1a934 <readSensorState+0x11c>)
   1a8a6:	4798      	blx	r3
   1a8a8:	0003      	movs	r3, r0
   1a8aa:	1e5a      	subs	r2, r3, #1
   1a8ac:	4193      	sbcs	r3, r2
   1a8ae:	b2db      	uxtb	r3, r3
   1a8b0:	2201      	movs	r2, #1
   1a8b2:	4053      	eors	r3, r2
   1a8b4:	b2db      	uxtb	r3, r3
   1a8b6:	1c1a      	adds	r2, r3, #0
   1a8b8:	2301      	movs	r3, #1
   1a8ba:	4013      	ands	r3, r2
   1a8bc:	b2da      	uxtb	r2, r3
   1a8be:	687b      	ldr	r3, [r7, #4]
   1a8c0:	701a      	strb	r2, [r3, #0]
	}


	
	uint8_t last_comparison = AC_CHAN_STATUS_UNKNOWN;
   1a8c2:	2317      	movs	r3, #23
   1a8c4:	18fb      	adds	r3, r7, r3
   1a8c6:	2201      	movs	r2, #1
   1a8c8:	701a      	strb	r2, [r3, #0]
	
	last_comparison = ac_chan_get_status(&ac_instance,AC_CHAN_CHANNEL_0);
   1a8ca:	2317      	movs	r3, #23
   1a8cc:	18fc      	adds	r4, r7, r3
   1a8ce:	4b1a      	ldr	r3, [pc, #104]	; (1a938 <readSensorState+0x120>)
   1a8d0:	2100      	movs	r1, #0
   1a8d2:	0018      	movs	r0, r3
   1a8d4:	4b19      	ldr	r3, [pc, #100]	; (1a93c <readSensorState+0x124>)
   1a8d6:	4798      	blx	r3
   1a8d8:	0003      	movs	r3, r0
   1a8da:	7023      	strb	r3, [r4, #0]
	vTaskDelay(500/portTICK_PERIOD_MS);
   1a8dc:	23fa      	movs	r3, #250	; 0xfa
   1a8de:	005b      	lsls	r3, r3, #1
   1a8e0:	0018      	movs	r0, r3
   1a8e2:	4b17      	ldr	r3, [pc, #92]	; (1a940 <readSensorState+0x128>)
   1a8e4:	4798      	blx	r3
	last_comparison = ac_chan_get_status(&ac_instance,AC_CHAN_CHANNEL_0); //read again
   1a8e6:	2317      	movs	r3, #23
   1a8e8:	18fc      	adds	r4, r7, r3
   1a8ea:	4b13      	ldr	r3, [pc, #76]	; (1a938 <readSensorState+0x120>)
   1a8ec:	2100      	movs	r1, #0
   1a8ee:	0018      	movs	r0, r3
   1a8f0:	4b12      	ldr	r3, [pc, #72]	; (1a93c <readSensorState+0x124>)
   1a8f2:	4798      	blx	r3
   1a8f4:	0003      	movs	r3, r0
   1a8f6:	7023      	strb	r3, [r4, #0]
	
	if (last_comparison & AC_CHAN_STATUS_POS_ABOVE_NEG)
   1a8f8:	2317      	movs	r3, #23
   1a8fa:	18fb      	adds	r3, r7, r3
   1a8fc:	781b      	ldrb	r3, [r3, #0]
   1a8fe:	2204      	movs	r2, #4
   1a900:	4013      	ands	r3, r2
   1a902:	d003      	beq.n	1a90c <readSensorState+0xf4>
	{
		isACpowerAvailable = true;
   1a904:	4b0f      	ldr	r3, [pc, #60]	; (1a944 <readSensorState+0x12c>)
   1a906:	2201      	movs	r2, #1
   1a908:	701a      	strb	r2, [r3, #0]
   1a90a:	e002      	b.n	1a912 <readSensorState+0xfa>
	}
	else
	{
		isACpowerAvailable = false;
   1a90c:	4b0d      	ldr	r3, [pc, #52]	; (1a944 <readSensorState+0x12c>)
   1a90e:	2200      	movs	r2, #0
   1a910:	701a      	strb	r2, [r3, #0]
	}
	
	*acPhase =  isACpowerAvailable;
   1a912:	4b0c      	ldr	r3, [pc, #48]	; (1a944 <readSensorState+0x12c>)
   1a914:	781b      	ldrb	r3, [r3, #0]
   1a916:	b2da      	uxtb	r2, r3
   1a918:	683b      	ldr	r3, [r7, #0]
   1a91a:	701a      	strb	r2, [r3, #0]
}
   1a91c:	46c0      	nop			; (mov r8, r8)
   1a91e:	46bd      	mov	sp, r7
   1a920:	b007      	add	sp, #28
   1a922:	bd90      	pop	{r4, r7, pc}
   1a924:	20000740 	.word	0x20000740
   1a928:	20000660 	.word	0x20000660
   1a92c:	0001a795 	.word	0x0001a795
   1a930:	0001a949 	.word	0x0001a949
   1a934:	00018bfd 	.word	0x00018bfd
   1a938:	20000868 	.word	0x20000868
   1a93c:	00018731 	.word	0x00018731
   1a940:	0001fad9 	.word	0x0001fad9
   1a944:	20000779 	.word	0x20000779

0001a948 <checkMotorStatusUsingCurrent>:

bool checkMotorStatusUsingCurrent(void)
{
   1a948:	b580      	push	{r7, lr}
   1a94a:	af00      	add	r7, sp, #0
	if(stopMotorCommandGiven)
   1a94c:	4b0e      	ldr	r3, [pc, #56]	; (1a988 <checkMotorStatusUsingCurrent+0x40>)
   1a94e:	781b      	ldrb	r3, [r3, #0]
   1a950:	2b00      	cmp	r3, #0
   1a952:	d00d      	beq.n	1a970 <checkMotorStatusUsingCurrent+0x28>
	{
		if(Analog_Parameter_Struct.Motor_Current_IntPart <= (fdbkRefCurrent/2))
   1a954:	4b0d      	ldr	r3, [pc, #52]	; (1a98c <checkMotorStatusUsingCurrent+0x44>)
   1a956:	8a9b      	ldrh	r3, [r3, #20]
   1a958:	b29a      	uxth	r2, r3
   1a95a:	4b0d      	ldr	r3, [pc, #52]	; (1a990 <checkMotorStatusUsingCurrent+0x48>)
   1a95c:	781b      	ldrb	r3, [r3, #0]
   1a95e:	085b      	lsrs	r3, r3, #1
   1a960:	b2db      	uxtb	r3, r3
   1a962:	b29b      	uxth	r3, r3
   1a964:	429a      	cmp	r2, r3
   1a966:	d801      	bhi.n	1a96c <checkMotorStatusUsingCurrent+0x24>
		{
			return false;
   1a968:	2300      	movs	r3, #0
   1a96a:	e009      	b.n	1a980 <checkMotorStatusUsingCurrent+0x38>
		}
		else
		{
			return true;
   1a96c:	2301      	movs	r3, #1
   1a96e:	e007      	b.n	1a980 <checkMotorStatusUsingCurrent+0x38>
		}
	}
	else
	{
		if (Analog_Parameter_Struct.Motor_Current_IntPart > 4)
   1a970:	4b06      	ldr	r3, [pc, #24]	; (1a98c <checkMotorStatusUsingCurrent+0x44>)
   1a972:	8a9b      	ldrh	r3, [r3, #20]
   1a974:	b29b      	uxth	r3, r3
   1a976:	2b04      	cmp	r3, #4
   1a978:	d901      	bls.n	1a97e <checkMotorStatusUsingCurrent+0x36>
		{
			return true;
   1a97a:	2301      	movs	r3, #1
   1a97c:	e000      	b.n	1a980 <checkMotorStatusUsingCurrent+0x38>
		}
		else
		{
			return false;
   1a97e:	2300      	movs	r3, #0
		}
	}
}
   1a980:	0018      	movs	r0, r3
   1a982:	46bd      	mov	sp, r7
   1a984:	bd80      	pop	{r7, pc}
   1a986:	46c0      	nop			; (mov r8, r8)
   1a988:	20000840 	.word	0x20000840
   1a98c:	200006e4 	.word	0x200006e4
   1a990:	200007d4 	.word	0x200007d4

0001a994 <detectMotorStateChangeUsingCurrent>:

bool detectMotorStateChangeUsingCurrent(void)
{
   1a994:	b5b0      	push	{r4, r5, r7, lr}
   1a996:	af00      	add	r7, sp, #0
	if (getMotorState() != checkMotorStatusUsingCurrent())
   1a998:	4b07      	ldr	r3, [pc, #28]	; (1a9b8 <detectMotorStateChangeUsingCurrent+0x24>)
   1a99a:	4798      	blx	r3
   1a99c:	0003      	movs	r3, r0
   1a99e:	001c      	movs	r4, r3
   1a9a0:	4b06      	ldr	r3, [pc, #24]	; (1a9bc <detectMotorStateChangeUsingCurrent+0x28>)
   1a9a2:	4798      	blx	r3
   1a9a4:	0003      	movs	r3, r0
   1a9a6:	429c      	cmp	r4, r3
   1a9a8:	d001      	beq.n	1a9ae <detectMotorStateChangeUsingCurrent+0x1a>
	{
		return true;
   1a9aa:	2301      	movs	r3, #1
   1a9ac:	e000      	b.n	1a9b0 <detectMotorStateChangeUsingCurrent+0x1c>
	}
	else
	{
		return false;
   1a9ae:	2300      	movs	r3, #0
	}
}
   1a9b0:	0018      	movs	r0, r3
   1a9b2:	46bd      	mov	sp, r7
   1a9b4:	bdb0      	pop	{r4, r5, r7, pc}
   1a9b6:	46c0      	nop			; (mov r8, r8)
   1a9b8:	0001a795 	.word	0x0001a795
   1a9bc:	0001a949 	.word	0x0001a949

0001a9c0 <updateSensorState>:


void updateSensorState(uint8_t var3PhaseState, bool var3PhaseSeq, bool motorState, bool acPhaseState)
{
   1a9c0:	b5b0      	push	{r4, r5, r7, lr}
   1a9c2:	b084      	sub	sp, #16
   1a9c4:	af00      	add	r7, sp, #0
   1a9c6:	0005      	movs	r5, r0
   1a9c8:	000c      	movs	r4, r1
   1a9ca:	0010      	movs	r0, r2
   1a9cc:	0019      	movs	r1, r3
   1a9ce:	1dfb      	adds	r3, r7, #7
   1a9d0:	1c2a      	adds	r2, r5, #0
   1a9d2:	701a      	strb	r2, [r3, #0]
   1a9d4:	1dbb      	adds	r3, r7, #6
   1a9d6:	1c22      	adds	r2, r4, #0
   1a9d8:	701a      	strb	r2, [r3, #0]
   1a9da:	1d7b      	adds	r3, r7, #5
   1a9dc:	1c02      	adds	r2, r0, #0
   1a9de:	701a      	strb	r2, [r3, #0]
   1a9e0:	1d3b      	adds	r3, r7, #4
   1a9e2:	1c0a      	adds	r2, r1, #0
   1a9e4:	701a      	strb	r2, [r3, #0]
	setAllPhaseState(var3PhaseState); // allPhase = p1;
   1a9e6:	1dfb      	adds	r3, r7, #7
   1a9e8:	781b      	ldrb	r3, [r3, #0]
   1a9ea:	0018      	movs	r0, r3
   1a9ec:	4b29      	ldr	r3, [pc, #164]	; (1aa94 <updateSensorState+0xd4>)
   1a9ee:	4798      	blx	r3
	setPhaseSequence(var3PhaseSeq);
   1a9f0:	1dbb      	adds	r3, r7, #6
   1a9f2:	781b      	ldrb	r3, [r3, #0]
   1a9f4:	0018      	movs	r0, r3
   1a9f6:	4b28      	ldr	r3, [pc, #160]	; (1aa98 <updateSensorState+0xd8>)
   1a9f8:	4798      	blx	r3
	setMotorState(motorState); // mFeedback = p2;
   1a9fa:	1d7b      	adds	r3, r7, #5
   1a9fc:	781b      	ldrb	r3, [r3, #0]
   1a9fe:	0018      	movs	r0, r3
   1aa00:	4b26      	ldr	r3, [pc, #152]	; (1aa9c <updateSensorState+0xdc>)
   1aa02:	4798      	blx	r3
	setACPowerState(acPhaseState); // phaseAC = p4;
   1aa04:	1d3b      	adds	r3, r7, #4
   1aa06:	781b      	ldrb	r3, [r3, #0]
   1aa08:	0018      	movs	r0, r3
   1aa0a:	4b25      	ldr	r3, [pc, #148]	; (1aaa0 <updateSensorState+0xe0>)
   1aa0c:	4798      	blx	r3
	
	if(getAllPhaseState()==AC_3PH && getACPowerState())
   1aa0e:	4b25      	ldr	r3, [pc, #148]	; (1aaa4 <updateSensorState+0xe4>)
   1aa10:	4798      	blx	r3
   1aa12:	0003      	movs	r3, r0
   1aa14:	2b03      	cmp	r3, #3
   1aa16:	d12e      	bne.n	1aa76 <updateSensorState+0xb6>
   1aa18:	4b23      	ldr	r3, [pc, #140]	; (1aaa8 <updateSensorState+0xe8>)
   1aa1a:	4798      	blx	r3
   1aa1c:	1e03      	subs	r3, r0, #0
   1aa1e:	d02a      	beq.n	1aa76 <updateSensorState+0xb6>
	{
		bool tempPhaseSequence = true;									// init temp variable with default value as correct sequence
   1aa20:	230f      	movs	r3, #15
   1aa22:	18fb      	adds	r3, r7, r3
   1aa24:	2201      	movs	r2, #1
   1aa26:	701a      	strb	r2, [r3, #0]

		if(user_settings_parameter_struct.detectPhaseSequence)			// if detection of Phase Sequence is enabled
   1aa28:	4b20      	ldr	r3, [pc, #128]	; (1aaac <updateSensorState+0xec>)
   1aa2a:	2224      	movs	r2, #36	; 0x24
   1aa2c:	5c9b      	ldrb	r3, [r3, r2]
   1aa2e:	2b00      	cmp	r3, #0
   1aa30:	d005      	beq.n	1aa3e <updateSensorState+0x7e>
		{
			tempPhaseSequence = getPhaseSequence();						// save the current phase sequence  in temp varialbe for further use
   1aa32:	230f      	movs	r3, #15
   1aa34:	18fc      	adds	r4, r7, r3
   1aa36:	4b1e      	ldr	r3, [pc, #120]	; (1aab0 <updateSensorState+0xf0>)
   1aa38:	4798      	blx	r3
   1aa3a:	0003      	movs	r3, r0
   1aa3c:	7023      	strb	r3, [r4, #0]
		}

		if(tempPhaseSequence)											// check if sequence is correct
   1aa3e:	230f      	movs	r3, #15
   1aa40:	18fb      	adds	r3, r7, r3
   1aa42:	781b      	ldrb	r3, [r3, #0]
   1aa44:	2b00      	cmp	r3, #0
   1aa46:	d004      	beq.n	1aa52 <updateSensorState+0x92>
		{
			THREEPHASE_OK_LED_ON;
   1aa48:	2100      	movs	r1, #0
   1aa4a:	2027      	movs	r0, #39	; 0x27
   1aa4c:	4b19      	ldr	r3, [pc, #100]	; (1aab4 <updateSensorState+0xf4>)
   1aa4e:	4798      	blx	r3
   1aa50:	e003      	b.n	1aa5a <updateSensorState+0x9a>
		}
		else
		{
			THREEPHASE_OK_LED_OFF;
   1aa52:	2101      	movs	r1, #1
   1aa54:	2027      	movs	r0, #39	; 0x27
   1aa56:	4b17      	ldr	r3, [pc, #92]	; (1aab4 <updateSensorState+0xf4>)
   1aa58:	4798      	blx	r3
		}
		
		if((bool)user_settings_parameter_struct.autoStartAddress)
   1aa5a:	4b14      	ldr	r3, [pc, #80]	; (1aaac <updateSensorState+0xec>)
   1aa5c:	785b      	ldrb	r3, [r3, #1]
   1aa5e:	2b00      	cmp	r3, #0
   1aa60:	d004      	beq.n	1aa6c <updateSensorState+0xac>
		{
			AUTO_ON_LED_ON;
   1aa62:	2100      	movs	r1, #0
   1aa64:	2028      	movs	r0, #40	; 0x28
   1aa66:	4b13      	ldr	r3, [pc, #76]	; (1aab4 <updateSensorState+0xf4>)
   1aa68:	4798      	blx	r3
	{
   1aa6a:	e00f      	b.n	1aa8c <updateSensorState+0xcc>
		}
		else
		{
			AUTO_ON_LED_OFF;
   1aa6c:	2101      	movs	r1, #1
   1aa6e:	2028      	movs	r0, #40	; 0x28
   1aa70:	4b10      	ldr	r3, [pc, #64]	; (1aab4 <updateSensorState+0xf4>)
   1aa72:	4798      	blx	r3
	{
   1aa74:	e00a      	b.n	1aa8c <updateSensorState+0xcc>
		}
	}
	else
	{
		THREEPHASE_OK_LED_OFF;
   1aa76:	2101      	movs	r1, #1
   1aa78:	2027      	movs	r0, #39	; 0x27
   1aa7a:	4b0e      	ldr	r3, [pc, #56]	; (1aab4 <updateSensorState+0xf4>)
   1aa7c:	4798      	blx	r3
		AUTO_ON_LED_OFF;
   1aa7e:	2101      	movs	r1, #1
   1aa80:	2028      	movs	r0, #40	; 0x28
   1aa82:	4b0c      	ldr	r3, [pc, #48]	; (1aab4 <updateSensorState+0xf4>)
   1aa84:	4798      	blx	r3
		startTimerOn=false;
   1aa86:	4b0c      	ldr	r3, [pc, #48]	; (1aab8 <updateSensorState+0xf8>)
   1aa88:	2200      	movs	r2, #0
   1aa8a:	701a      	strb	r2, [r3, #0]
	//
	//if (!getACPowerState() || !getAllPhaseState())
	//{
	//startTimerOn = false;
	//}
}
   1aa8c:	46c0      	nop			; (mov r8, r8)
   1aa8e:	46bd      	mov	sp, r7
   1aa90:	b004      	add	sp, #16
   1aa92:	bdb0      	pop	{r4, r5, r7, pc}
   1aa94:	0001a741 	.word	0x0001a741
   1aa98:	0001a775 	.word	0x0001a775
   1aa9c:	0001a7a9 	.word	0x0001a7a9
   1aaa0:	0001a70d 	.word	0x0001a70d
   1aaa4:	0001a72d 	.word	0x0001a72d
   1aaa8:	0001a6f9 	.word	0x0001a6f9
   1aaac:	20000660 	.word	0x20000660
   1aab0:	0001a761 	.word	0x0001a761
   1aab4:	00018c41 	.word	0x00018c41
   1aab8:	20000786 	.word	0x20000786

0001aabc <resetAutoStart>:

void resetAutoStart(bool setChange)
{
   1aabc:	b580      	push	{r7, lr}
   1aabe:	b082      	sub	sp, #8
   1aac0:	af00      	add	r7, sp, #0
   1aac2:	0002      	movs	r2, r0
   1aac4:	1dfb      	adds	r3, r7, #7
   1aac6:	701a      	strb	r2, [r3, #0]
	if (!(bool)user_settings_parameter_struct.autoStartAddress)
   1aac8:	4b0e      	ldr	r3, [pc, #56]	; (1ab04 <resetAutoStart+0x48>)
   1aaca:	785b      	ldrb	r3, [r3, #1]
   1aacc:	2b00      	cmp	r3, #0
   1aace:	d107      	bne.n	1aae0 <resetAutoStart+0x24>
	{
		startTimerOn=false;
   1aad0:	4b0d      	ldr	r3, [pc, #52]	; (1ab08 <resetAutoStart+0x4c>)
   1aad2:	2200      	movs	r2, #0
   1aad4:	701a      	strb	r2, [r3, #0]
		AUTO_ON_LED_OFF;
   1aad6:	2101      	movs	r1, #1
   1aad8:	2028      	movs	r0, #40	; 0x28
   1aada:	4b0c      	ldr	r3, [pc, #48]	; (1ab0c <resetAutoStart+0x50>)
   1aadc:	4798      	blx	r3
		if (setChange)
		{
			triggerAutoStart();
		}
	}
}
   1aade:	e00d      	b.n	1aafc <resetAutoStart+0x40>
	else if ((bool)user_settings_parameter_struct.autoStartAddress)
   1aae0:	4b08      	ldr	r3, [pc, #32]	; (1ab04 <resetAutoStart+0x48>)
   1aae2:	785b      	ldrb	r3, [r3, #1]
   1aae4:	2b00      	cmp	r3, #0
   1aae6:	d009      	beq.n	1aafc <resetAutoStart+0x40>
		AUTO_ON_LED_ON;
   1aae8:	2100      	movs	r1, #0
   1aaea:	2028      	movs	r0, #40	; 0x28
   1aaec:	4b07      	ldr	r3, [pc, #28]	; (1ab0c <resetAutoStart+0x50>)
   1aaee:	4798      	blx	r3
		if (setChange)
   1aaf0:	1dfb      	adds	r3, r7, #7
   1aaf2:	781b      	ldrb	r3, [r3, #0]
   1aaf4:	2b00      	cmp	r3, #0
   1aaf6:	d001      	beq.n	1aafc <resetAutoStart+0x40>
			triggerAutoStart();
   1aaf8:	4b05      	ldr	r3, [pc, #20]	; (1ab10 <resetAutoStart+0x54>)
   1aafa:	4798      	blx	r3
}
   1aafc:	46c0      	nop			; (mov r8, r8)
   1aafe:	46bd      	mov	sp, r7
   1ab00:	b002      	add	sp, #8
   1ab02:	bd80      	pop	{r7, pc}
   1ab04:	20000660 	.word	0x20000660
   1ab08:	20000786 	.word	0x20000786
   1ab0c:	00018c41 	.word	0x00018c41
   1ab10:	0001ab15 	.word	0x0001ab15

0001ab14 <triggerAutoStart>:

void triggerAutoStart(void)
{
   1ab14:	b580      	push	{r7, lr}
   1ab16:	af00      	add	r7, sp, #0
	if (!getMotorState())
   1ab18:	4b0d      	ldr	r3, [pc, #52]	; (1ab50 <triggerAutoStart+0x3c>)
   1ab1a:	4798      	blx	r3
   1ab1c:	0003      	movs	r3, r0
   1ab1e:	001a      	movs	r2, r3
   1ab20:	2301      	movs	r3, #1
   1ab22:	4053      	eors	r3, r2
   1ab24:	b2db      	uxtb	r3, r3
   1ab26:	2b00      	cmp	r3, #0
   1ab28:	d00f      	beq.n	1ab4a <triggerAutoStart+0x36>
	{
		if (getAllPhaseState() && getACPowerState())
   1ab2a:	4b0a      	ldr	r3, [pc, #40]	; (1ab54 <triggerAutoStart+0x40>)
   1ab2c:	4798      	blx	r3
   1ab2e:	1e03      	subs	r3, r0, #0
   1ab30:	d00b      	beq.n	1ab4a <triggerAutoStart+0x36>
   1ab32:	4b09      	ldr	r3, [pc, #36]	; (1ab58 <triggerAutoStart+0x44>)
   1ab34:	4798      	blx	r3
   1ab36:	1e03      	subs	r3, r0, #0
   1ab38:	d007      	beq.n	1ab4a <triggerAutoStart+0x36>
		{
			startTimerOn = true;
   1ab3a:	4b08      	ldr	r3, [pc, #32]	; (1ab5c <triggerAutoStart+0x48>)
   1ab3c:	2201      	movs	r2, #1
   1ab3e:	701a      	strb	r2, [r3, #0]
			tempStartTimer = xTaskGetTickCount();
   1ab40:	4b07      	ldr	r3, [pc, #28]	; (1ab60 <triggerAutoStart+0x4c>)
   1ab42:	4798      	blx	r3
   1ab44:	0002      	movs	r2, r0
   1ab46:	4b07      	ldr	r3, [pc, #28]	; (1ab64 <triggerAutoStart+0x50>)
   1ab48:	601a      	str	r2, [r3, #0]
		}
	}
}
   1ab4a:	46c0      	nop			; (mov r8, r8)
   1ab4c:	46bd      	mov	sp, r7
   1ab4e:	bd80      	pop	{r7, pc}
   1ab50:	0001a795 	.word	0x0001a795
   1ab54:	0001a72d 	.word	0x0001a72d
   1ab58:	0001a6f9 	.word	0x0001a6f9
   1ab5c:	20000786 	.word	0x20000786
   1ab60:	0001fe3d 	.word	0x0001fe3d
   1ab64:	2000078c 	.word	0x2000078c

0001ab68 <operateOnEvent>:

void operateOnEvent(void)
{
   1ab68:	b590      	push	{r4, r7, lr}
   1ab6a:	b083      	sub	sp, #12
   1ab6c:	af00      	add	r7, sp, #0
	uint8_t t3Phase;
	//bool t3Phase, tMotor, tacPhase;
	bool tPhaseSeq, tMotor, tacPhase;
	readSensorState(&t3Phase, &tPhaseSeq, &tMotor, &tacPhase);
   1ab6e:	1d3b      	adds	r3, r7, #4
   1ab70:	1d7a      	adds	r2, r7, #5
   1ab72:	1db9      	adds	r1, r7, #6
   1ab74:	1df8      	adds	r0, r7, #7
   1ab76:	4c67      	ldr	r4, [pc, #412]	; (1ad14 <operateOnEvent+0x1ac>)
   1ab78:	47a0      	blx	r4
	eventOccured = false;
   1ab7a:	4b67      	ldr	r3, [pc, #412]	; (1ad18 <operateOnEvent+0x1b0>)
   1ab7c:	2200      	movs	r2, #0
   1ab7e:	701a      	strb	r2, [r3, #0]
	
	//todo: add current phase Sequence and previous phase sequence is equals check here
	if ((t3Phase == getAllPhaseState()) && (tMotor == getMotorState()) && (tacPhase == getACPowerState()))
   1ab80:	4b66      	ldr	r3, [pc, #408]	; (1ad1c <operateOnEvent+0x1b4>)
   1ab82:	4798      	blx	r3
   1ab84:	0003      	movs	r3, r0
   1ab86:	001a      	movs	r2, r3
   1ab88:	1dfb      	adds	r3, r7, #7
   1ab8a:	781b      	ldrb	r3, [r3, #0]
   1ab8c:	429a      	cmp	r2, r3
   1ab8e:	d110      	bne.n	1abb2 <operateOnEvent+0x4a>
   1ab90:	4b63      	ldr	r3, [pc, #396]	; (1ad20 <operateOnEvent+0x1b8>)
   1ab92:	4798      	blx	r3
   1ab94:	0003      	movs	r3, r0
   1ab96:	001a      	movs	r2, r3
   1ab98:	1d7b      	adds	r3, r7, #5
   1ab9a:	781b      	ldrb	r3, [r3, #0]
   1ab9c:	429a      	cmp	r2, r3
   1ab9e:	d108      	bne.n	1abb2 <operateOnEvent+0x4a>
   1aba0:	4b60      	ldr	r3, [pc, #384]	; (1ad24 <operateOnEvent+0x1bc>)
   1aba2:	4798      	blx	r3
   1aba4:	0003      	movs	r3, r0
   1aba6:	001a      	movs	r2, r3
   1aba8:	1d3b      	adds	r3, r7, #4
   1abaa:	781b      	ldrb	r3, [r3, #0]
   1abac:	429a      	cmp	r2, r3
   1abae:	d100      	bne.n	1abb2 <operateOnEvent+0x4a>
   1abb0:	e0ab      	b.n	1ad0a <operateOnEvent+0x1a2>
	{
		return;
	}
	if (getMotorState())	//motorOn
   1abb2:	4b5b      	ldr	r3, [pc, #364]	; (1ad20 <operateOnEvent+0x1b8>)
   1abb4:	4798      	blx	r3
   1abb6:	1e03      	subs	r3, r0, #0
   1abb8:	d100      	bne.n	1abbc <operateOnEvent+0x54>
   1abba:	e066      	b.n	1ac8a <operateOnEvent+0x122>
	{
		if (t3Phase==AC_OFF && !tMotor && !tacPhase)	//acPower Cut Off
   1abbc:	1dfb      	adds	r3, r7, #7
   1abbe:	781b      	ldrb	r3, [r3, #0]
   1abc0:	2b00      	cmp	r3, #0
   1abc2:	d11e      	bne.n	1ac02 <operateOnEvent+0x9a>
   1abc4:	1d7b      	adds	r3, r7, #5
   1abc6:	781b      	ldrb	r3, [r3, #0]
   1abc8:	2201      	movs	r2, #1
   1abca:	4053      	eors	r3, r2
   1abcc:	b2db      	uxtb	r3, r3
   1abce:	2b00      	cmp	r3, #0
   1abd0:	d017      	beq.n	1ac02 <operateOnEvent+0x9a>
   1abd2:	1d3b      	adds	r3, r7, #4
   1abd4:	781b      	ldrb	r3, [r3, #0]
   1abd6:	2201      	movs	r2, #1
   1abd8:	4053      	eors	r3, r2
   1abda:	b2db      	uxtb	r3, r3
   1abdc:	2b00      	cmp	r3, #0
   1abde:	d010      	beq.n	1ac02 <operateOnEvent+0x9a>
		{
			stopMotor(false,true,false);
   1abe0:	2200      	movs	r2, #0
   1abe2:	2101      	movs	r1, #1
   1abe4:	2000      	movs	r0, #0
   1abe6:	4b50      	ldr	r3, [pc, #320]	; (1ad28 <operateOnEvent+0x1c0>)
   1abe8:	4798      	blx	r3
			THREEPHASE_OK_LED_OFF;
   1abea:	2101      	movs	r1, #1
   1abec:	2027      	movs	r0, #39	; 0x27
   1abee:	4b4f      	ldr	r3, [pc, #316]	; (1ad2c <operateOnEvent+0x1c4>)
   1abf0:	4798      	blx	r3
			simEventTemp[6] = registerEvent('C'); //report To SIM Motor Off due to POWER CUT OFF
   1abf2:	2043      	movs	r0, #67	; 0x43
   1abf4:	4b4e      	ldr	r3, [pc, #312]	; (1ad30 <operateOnEvent+0x1c8>)
   1abf6:	4798      	blx	r3
   1abf8:	0003      	movs	r3, r0
   1abfa:	001a      	movs	r2, r3
   1abfc:	4b4d      	ldr	r3, [pc, #308]	; (1ad34 <operateOnEvent+0x1cc>)
   1abfe:	719a      	strb	r2, [r3, #6]
   1ac00:	e078      	b.n	1acf4 <operateOnEvent+0x18c>
		}
		////////////////////////////////////////Unknown Motor Off Check ////////////////////////////////////////
		
		else if ((tacPhase && getACPowerState()) &&																										//AC PHASE PRESENT
   1ac02:	1d3b      	adds	r3, r7, #4
   1ac04:	781b      	ldrb	r3, [r3, #0]
   1ac06:	2b00      	cmp	r3, #0
   1ac08:	d029      	beq.n	1ac5e <operateOnEvent+0xf6>
   1ac0a:	4b46      	ldr	r3, [pc, #280]	; (1ad24 <operateOnEvent+0x1bc>)
   1ac0c:	4798      	blx	r3
   1ac0e:	1e03      	subs	r3, r0, #0
   1ac10:	d025      	beq.n	1ac5e <operateOnEvent+0xf6>
		((user_settings_parameter_struct.detectSinglePhasing && t3Phase==AC_3PH && getAllPhaseState()==AC_3PH) ||								//IF SPP ON, 3 phase old and current is present
   1ac12:	4b49      	ldr	r3, [pc, #292]	; (1ad38 <operateOnEvent+0x1d0>)
   1ac14:	2220      	movs	r2, #32
   1ac16:	5c9b      	ldrb	r3, [r3, r2]
		else if ((tacPhase && getACPowerState()) &&																										//AC PHASE PRESENT
   1ac18:	2b00      	cmp	r3, #0
   1ac1a:	d008      	beq.n	1ac2e <operateOnEvent+0xc6>
		((user_settings_parameter_struct.detectSinglePhasing && t3Phase==AC_3PH && getAllPhaseState()==AC_3PH) ||								//IF SPP ON, 3 phase old and current is present
   1ac1c:	1dfb      	adds	r3, r7, #7
   1ac1e:	781b      	ldrb	r3, [r3, #0]
   1ac20:	2b03      	cmp	r3, #3
   1ac22:	d104      	bne.n	1ac2e <operateOnEvent+0xc6>
   1ac24:	4b3d      	ldr	r3, [pc, #244]	; (1ad1c <operateOnEvent+0x1b4>)
   1ac26:	4798      	blx	r3
   1ac28:	0003      	movs	r3, r0
   1ac2a:	2b03      	cmp	r3, #3
   1ac2c:	d00d      	beq.n	1ac4a <operateOnEvent+0xe2>
		(!user_settings_parameter_struct.detectSinglePhasing) && t3Phase>=AC_2PH && getAllPhaseState()>=AC_2PH) &&							//IF SPP OFF, 3 phase old and current is >= 2 phase
   1ac2e:	4b42      	ldr	r3, [pc, #264]	; (1ad38 <operateOnEvent+0x1d0>)
   1ac30:	2220      	movs	r2, #32
   1ac32:	5c9b      	ldrb	r3, [r3, r2]
		((user_settings_parameter_struct.detectSinglePhasing && t3Phase==AC_3PH && getAllPhaseState()==AC_3PH) ||								//IF SPP ON, 3 phase old and current is present
   1ac34:	2b00      	cmp	r3, #0
   1ac36:	d112      	bne.n	1ac5e <operateOnEvent+0xf6>
		(!user_settings_parameter_struct.detectSinglePhasing) && t3Phase>=AC_2PH && getAllPhaseState()>=AC_2PH) &&							//IF SPP OFF, 3 phase old and current is >= 2 phase
   1ac38:	1dfb      	adds	r3, r7, #7
   1ac3a:	781b      	ldrb	r3, [r3, #0]
   1ac3c:	2b01      	cmp	r3, #1
   1ac3e:	d90e      	bls.n	1ac5e <operateOnEvent+0xf6>
   1ac40:	4b36      	ldr	r3, [pc, #216]	; (1ad1c <operateOnEvent+0x1b4>)
   1ac42:	4798      	blx	r3
   1ac44:	0003      	movs	r3, r0
   1ac46:	2b01      	cmp	r3, #1
   1ac48:	d909      	bls.n	1ac5e <operateOnEvent+0xf6>
		(!tMotor))																																// AND MOTOR HAS TURNED OFF
   1ac4a:	1d7b      	adds	r3, r7, #5
   1ac4c:	781b      	ldrb	r3, [r3, #0]
   1ac4e:	2201      	movs	r2, #1
   1ac50:	4053      	eors	r3, r2
   1ac52:	b2db      	uxtb	r3, r3
		(!user_settings_parameter_struct.detectSinglePhasing) && t3Phase>=AC_2PH && getAllPhaseState()>=AC_2PH) &&							//IF SPP OFF, 3 phase old and current is >= 2 phase
   1ac54:	2b00      	cmp	r3, #0
   1ac56:	d002      	beq.n	1ac5e <operateOnEvent+0xf6>
		{
			unknownMotorOff();
   1ac58:	4b38      	ldr	r3, [pc, #224]	; (1ad3c <operateOnEvent+0x1d4>)
   1ac5a:	4798      	blx	r3
   1ac5c:	e04a      	b.n	1acf4 <operateOnEvent+0x18c>
		}
		///////////////////////// SINGLE PHASING CHECK /////////////////////////
		else if (user_settings_parameter_struct.detectSinglePhasing &&																						//SPP IS ON
   1ac5e:	4b36      	ldr	r3, [pc, #216]	; (1ad38 <operateOnEvent+0x1d0>)
   1ac60:	2220      	movs	r2, #32
   1ac62:	5c9b      	ldrb	r3, [r3, r2]
   1ac64:	2b00      	cmp	r3, #0
   1ac66:	d045      	beq.n	1acf4 <operateOnEvent+0x18c>
		t3Phase==AC_2PH &&																														// Only 2 Phase Present
   1ac68:	1dfb      	adds	r3, r7, #7
   1ac6a:	781b      	ldrb	r3, [r3, #0]
		else if (user_settings_parameter_struct.detectSinglePhasing &&																						//SPP IS ON
   1ac6c:	2b02      	cmp	r3, #2
   1ac6e:	d141      	bne.n	1acf4 <operateOnEvent+0x18c>
		t3Phase==AC_2PH &&																														// Only 2 Phase Present
   1ac70:	1d3b      	adds	r3, r7, #4
   1ac72:	781b      	ldrb	r3, [r3, #0]
   1ac74:	2b00      	cmp	r3, #0
   1ac76:	d03d      	beq.n	1acf4 <operateOnEvent+0x18c>
		tacPhase) ////single phasing occured																									// AC Phase is Present
		{
			tempSinglePhasingTimer = xTaskGetTickCount();
   1ac78:	4b31      	ldr	r3, [pc, #196]	; (1ad40 <operateOnEvent+0x1d8>)
   1ac7a:	4798      	blx	r3
   1ac7c:	0002      	movs	r2, r0
   1ac7e:	4b31      	ldr	r3, [pc, #196]	; (1ad44 <operateOnEvent+0x1dc>)
   1ac80:	601a      	str	r2, [r3, #0]
			singlePhasingTimerOn = true;
   1ac82:	4b31      	ldr	r3, [pc, #196]	; (1ad48 <operateOnEvent+0x1e0>)
   1ac84:	2201      	movs	r2, #1
   1ac86:	701a      	strb	r2, [r3, #0]
   1ac88:	e034      	b.n	1acf4 <operateOnEvent+0x18c>
		}
	}
	else
	{
		if (tMotor)		// motor turn on manually
   1ac8a:	1d7b      	adds	r3, r7, #5
   1ac8c:	781b      	ldrb	r3, [r3, #0]
   1ac8e:	2b00      	cmp	r3, #0
   1ac90:	d028      	beq.n	1ace4 <operateOnEvent+0x17c>
		{
			if (t3Phase==AC_3PH && tPhaseSeq && tacPhase)
   1ac92:	1dfb      	adds	r3, r7, #7
   1ac94:	781b      	ldrb	r3, [r3, #0]
   1ac96:	2b03      	cmp	r3, #3
   1ac98:	d11e      	bne.n	1acd8 <operateOnEvent+0x170>
   1ac9a:	1dbb      	adds	r3, r7, #6
   1ac9c:	781b      	ldrb	r3, [r3, #0]
   1ac9e:	2b00      	cmp	r3, #0
   1aca0:	d01a      	beq.n	1acd8 <operateOnEvent+0x170>
   1aca2:	1d3b      	adds	r3, r7, #4
   1aca4:	781b      	ldrb	r3, [r3, #0]
   1aca6:	2b00      	cmp	r3, #0
   1aca8:	d016      	beq.n	1acd8 <operateOnEvent+0x170>
			{
				if (startTimerOn)
   1acaa:	4b28      	ldr	r3, [pc, #160]	; (1ad4c <operateOnEvent+0x1e4>)
   1acac:	781b      	ldrb	r3, [r3, #0]
   1acae:	2b00      	cmp	r3, #0
   1acb0:	d002      	beq.n	1acb8 <operateOnEvent+0x150>
				{
					startTimerOn = false;
   1acb2:	4b26      	ldr	r3, [pc, #152]	; (1ad4c <operateOnEvent+0x1e4>)
   1acb4:	2200      	movs	r2, #0
   1acb6:	701a      	strb	r2, [r3, #0]
				}
				THREEPHASE_OK_LED_ON;
   1acb8:	2100      	movs	r1, #0
   1acba:	2027      	movs	r0, #39	; 0x27
   1acbc:	4b1b      	ldr	r3, [pc, #108]	; (1ad2c <operateOnEvent+0x1c4>)
   1acbe:	4798      	blx	r3
				simEventTemp[7] = registerEvent('S');	//register To SIM Motor has started
   1acc0:	2053      	movs	r0, #83	; 0x53
   1acc2:	4b1b      	ldr	r3, [pc, #108]	; (1ad30 <operateOnEvent+0x1c8>)
   1acc4:	4798      	blx	r3
   1acc6:	0003      	movs	r3, r0
   1acc8:	001a      	movs	r2, r3
   1acca:	4b1a      	ldr	r3, [pc, #104]	; (1ad34 <operateOnEvent+0x1cc>)
   1accc:	71da      	strb	r2, [r3, #7]
				startMotor(true,true);
   1acce:	2101      	movs	r1, #1
   1acd0:	2001      	movs	r0, #1
   1acd2:	4b1f      	ldr	r3, [pc, #124]	; (1ad50 <operateOnEvent+0x1e8>)
   1acd4:	4798      	blx	r3
   1acd6:	e00d      	b.n	1acf4 <operateOnEvent+0x18c>
			}
			else
			{
				stopMotor(false,true,false);
   1acd8:	2200      	movs	r2, #0
   1acda:	2101      	movs	r1, #1
   1acdc:	2000      	movs	r0, #0
   1acde:	4b12      	ldr	r3, [pc, #72]	; (1ad28 <operateOnEvent+0x1c0>)
   1ace0:	4798      	blx	r3
   1ace2:	e007      	b.n	1acf4 <operateOnEvent+0x18c>
			}
		}
		else
		{
			waitStableLineOn = true;
   1ace4:	4b1b      	ldr	r3, [pc, #108]	; (1ad54 <operateOnEvent+0x1ec>)
   1ace6:	2201      	movs	r2, #1
   1ace8:	701a      	strb	r2, [r3, #0]
			waitStableLineTimer = xTaskGetTickCount();
   1acea:	4b15      	ldr	r3, [pc, #84]	; (1ad40 <operateOnEvent+0x1d8>)
   1acec:	4798      	blx	r3
   1acee:	0002      	movs	r2, r0
   1acf0:	4b19      	ldr	r3, [pc, #100]	; (1ad58 <operateOnEvent+0x1f0>)
   1acf2:	601a      	str	r2, [r3, #0]
		}
	}
	updateSensorState(t3Phase,tPhaseSeq, tMotor,tacPhase);
   1acf4:	1dfb      	adds	r3, r7, #7
   1acf6:	7818      	ldrb	r0, [r3, #0]
   1acf8:	1dbb      	adds	r3, r7, #6
   1acfa:	7819      	ldrb	r1, [r3, #0]
   1acfc:	1d7b      	adds	r3, r7, #5
   1acfe:	781a      	ldrb	r2, [r3, #0]
   1ad00:	1d3b      	adds	r3, r7, #4
   1ad02:	781b      	ldrb	r3, [r3, #0]
   1ad04:	4c15      	ldr	r4, [pc, #84]	; (1ad5c <operateOnEvent+0x1f4>)
   1ad06:	47a0      	blx	r4
   1ad08:	e000      	b.n	1ad0c <operateOnEvent+0x1a4>
		return;
   1ad0a:	46c0      	nop			; (mov r8, r8)
}
   1ad0c:	46bd      	mov	sp, r7
   1ad0e:	b003      	add	sp, #12
   1ad10:	bd90      	pop	{r4, r7, pc}
   1ad12:	46c0      	nop			; (mov r8, r8)
   1ad14:	0001a819 	.word	0x0001a819
   1ad18:	2000072a 	.word	0x2000072a
   1ad1c:	0001a72d 	.word	0x0001a72d
   1ad20:	0001a795 	.word	0x0001a795
   1ad24:	0001a6f9 	.word	0x0001a6f9
   1ad28:	0001b0b5 	.word	0x0001b0b5
   1ad2c:	00018c41 	.word	0x00018c41
   1ad30:	00014805 	.word	0x00014805
   1ad34:	20000714 	.word	0x20000714
   1ad38:	20000660 	.word	0x20000660
   1ad3c:	0001b1d5 	.word	0x0001b1d5
   1ad40:	0001fe3d 	.word	0x0001fe3d
   1ad44:	2000076c 	.word	0x2000076c
   1ad48:	2000077d 	.word	0x2000077d
   1ad4c:	20000786 	.word	0x20000786
   1ad50:	0001aef1 	.word	0x0001aef1
   1ad54:	200007ed 	.word	0x200007ed
   1ad58:	200007b0 	.word	0x200007b0
   1ad5c:	0001a9c1 	.word	0x0001a9c1

0001ad60 <checkLineSensors>:

uint8_t checkLineSensors(void)
{
   1ad60:	b580      	push	{r7, lr}
   1ad62:	af00      	add	r7, sp, #0
	return structThreePhase_state.u8t_phase_ac_state;
   1ad64:	4b02      	ldr	r3, [pc, #8]	; (1ad70 <checkLineSensors+0x10>)
   1ad66:	785b      	ldrb	r3, [r3, #1]
   1ad68:	b2db      	uxtb	r3, r3
}
   1ad6a:	0018      	movs	r0, r3
   1ad6c:	46bd      	mov	sp, r7
   1ad6e:	bd80      	pop	{r7, pc}
   1ad70:	20000740 	.word	0x20000740

0001ad74 <operateOnStableLine>:

void operateOnStableLine(void)
{
   1ad74:	b590      	push	{r4, r7, lr}
   1ad76:	b083      	sub	sp, #12
   1ad78:	af00      	add	r7, sp, #0
	waitStableLineOn = false;
   1ad7a:	4b41      	ldr	r3, [pc, #260]	; (1ae80 <operateOnStableLine+0x10c>)
   1ad7c:	2200      	movs	r2, #0
   1ad7e:	701a      	strb	r2, [r3, #0]
	uint8_t temp = checkLineSensors();
   1ad80:	1dbc      	adds	r4, r7, #6
   1ad82:	4b40      	ldr	r3, [pc, #256]	; (1ae84 <operateOnStableLine+0x110>)
   1ad84:	4798      	blx	r3
   1ad86:	0003      	movs	r3, r0
   1ad88:	7023      	strb	r3, [r4, #0]
	if (temp == AC_3PH)
   1ad8a:	1dbb      	adds	r3, r7, #6
   1ad8c:	781b      	ldrb	r3, [r3, #0]
   1ad8e:	2b03      	cmp	r3, #3
   1ad90:	d133      	bne.n	1adfa <operateOnStableLine+0x86>
	{
		bool tempPhaseSeq = true;													//Set Temp Phase Seq to True
   1ad92:	1dfb      	adds	r3, r7, #7
   1ad94:	2201      	movs	r2, #1
   1ad96:	701a      	strb	r2, [r3, #0]
		if(user_settings_parameter_struct.detectPhaseSequence)						// if Sequence Detection is needed
   1ad98:	4b3b      	ldr	r3, [pc, #236]	; (1ae88 <operateOnStableLine+0x114>)
   1ad9a:	2224      	movs	r2, #36	; 0x24
   1ad9c:	5c9b      	ldrb	r3, [r3, r2]
   1ad9e:	2b00      	cmp	r3, #0
   1ada0:	d004      	beq.n	1adac <operateOnStableLine+0x38>
		{
			tempPhaseSeq = getPhaseSequence();										// set current phase seq to the temp variable
   1ada2:	1dfc      	adds	r4, r7, #7
   1ada4:	4b39      	ldr	r3, [pc, #228]	; (1ae8c <operateOnStableLine+0x118>)
   1ada6:	4798      	blx	r3
   1ada8:	0003      	movs	r3, r0
   1adaa:	7023      	strb	r3, [r4, #0]
		}
		
		if(tempPhaseSeq)															// if correct phase seq than
   1adac:	1dfb      	adds	r3, r7, #7
   1adae:	781b      	ldrb	r3, [r3, #0]
   1adb0:	2b00      	cmp	r3, #0
   1adb2:	d016      	beq.n	1ade2 <operateOnStableLine+0x6e>
		{
			THREEPHASE_OK_LED_ON;
   1adb4:	2100      	movs	r1, #0
   1adb6:	2027      	movs	r0, #39	; 0x27
   1adb8:	4b35      	ldr	r3, [pc, #212]	; (1ae90 <operateOnStableLine+0x11c>)
   1adba:	4798      	blx	r3
			if (user_settings_parameter_struct.autoStartAddress)
   1adbc:	4b32      	ldr	r3, [pc, #200]	; (1ae88 <operateOnStableLine+0x114>)
   1adbe:	785b      	ldrb	r3, [r3, #1]
   1adc0:	2b00      	cmp	r3, #0
   1adc2:	d002      	beq.n	1adca <operateOnStableLine+0x56>
			{
				triggerAutoStart();
   1adc4:	4b33      	ldr	r3, [pc, #204]	; (1ae94 <operateOnStableLine+0x120>)
   1adc6:	4798      	blx	r3
		(last_three_phase_state == AC_3PH && user_settings_parameter_struct.dndAddress != DND_LIGHT))			//PREVIOSULY 3 PHASE, and NOT ON FOR ALL EVENTS
		{
			simEventTemp[5] = registerEvent('L'); //register To SIM AC Power OFF
		}
	}
}
   1adc8:	e055      	b.n	1ae76 <operateOnStableLine+0x102>
				if (user_settings_parameter_struct.dndAddress!=DND_LIGHT)			//DND IS OFF FOR ALL 3 PHASE LIGHT EVENTS, DND IS ON FOR SINGLE PHASING EVENTS
   1adca:	4b2f      	ldr	r3, [pc, #188]	; (1ae88 <operateOnStableLine+0x114>)
   1adcc:	791b      	ldrb	r3, [r3, #4]
   1adce:	2b4c      	cmp	r3, #76	; 0x4c
   1add0:	d051      	beq.n	1ae76 <operateOnStableLine+0x102>
					simEventTemp[4] = registerEvent('G');							//register TO SIM AC power ON
   1add2:	2047      	movs	r0, #71	; 0x47
   1add4:	4b30      	ldr	r3, [pc, #192]	; (1ae98 <operateOnStableLine+0x124>)
   1add6:	4798      	blx	r3
   1add8:	0003      	movs	r3, r0
   1adda:	001a      	movs	r2, r3
   1addc:	4b2f      	ldr	r3, [pc, #188]	; (1ae9c <operateOnStableLine+0x128>)
   1adde:	711a      	strb	r2, [r3, #4]
}
   1ade0:	e049      	b.n	1ae76 <operateOnStableLine+0x102>
			THREEPHASE_OK_LED_OFF;
   1ade2:	2101      	movs	r1, #1
   1ade4:	2027      	movs	r0, #39	; 0x27
   1ade6:	4b2a      	ldr	r3, [pc, #168]	; (1ae90 <operateOnStableLine+0x11c>)
   1ade8:	4798      	blx	r3
			simEventTemp[9] = registerEvent('A');								//incorrect sequence
   1adea:	2041      	movs	r0, #65	; 0x41
   1adec:	4b2a      	ldr	r3, [pc, #168]	; (1ae98 <operateOnStableLine+0x124>)
   1adee:	4798      	blx	r3
   1adf0:	0003      	movs	r3, r0
   1adf2:	001a      	movs	r2, r3
   1adf4:	4b29      	ldr	r3, [pc, #164]	; (1ae9c <operateOnStableLine+0x128>)
   1adf6:	725a      	strb	r2, [r3, #9]
}
   1adf8:	e03d      	b.n	1ae76 <operateOnStableLine+0x102>
	else if (temp == AC_2PH) //Got Power in 2 phase
   1adfa:	1dbb      	adds	r3, r7, #6
   1adfc:	781b      	ldrb	r3, [r3, #0]
   1adfe:	2b02      	cmp	r3, #2
   1ae00:	d114      	bne.n	1ae2c <operateOnStableLine+0xb8>
		THREEPHASE_OK_LED_OFF;
   1ae02:	2101      	movs	r1, #1
   1ae04:	2027      	movs	r0, #39	; 0x27
   1ae06:	4b22      	ldr	r3, [pc, #136]	; (1ae90 <operateOnStableLine+0x11c>)
   1ae08:	4798      	blx	r3
		if (user_settings_parameter_struct.dndAddress == DND_OFF &&					//DND IS OFF FOR ALL KIND OF EVENTS
   1ae0a:	4b1f      	ldr	r3, [pc, #124]	; (1ae88 <operateOnStableLine+0x114>)
   1ae0c:	791b      	ldrb	r3, [r3, #4]
   1ae0e:	2b4f      	cmp	r3, #79	; 0x4f
   1ae10:	d131      	bne.n	1ae76 <operateOnStableLine+0x102>
		!user_settings_parameter_struct.detectSinglePhasing)					//SINGLE PHASING PROTECTION IS ON
   1ae12:	4b1d      	ldr	r3, [pc, #116]	; (1ae88 <operateOnStableLine+0x114>)
   1ae14:	2220      	movs	r2, #32
   1ae16:	5c9b      	ldrb	r3, [r3, r2]
		if (user_settings_parameter_struct.dndAddress == DND_OFF &&					//DND IS OFF FOR ALL KIND OF EVENTS
   1ae18:	2b00      	cmp	r3, #0
   1ae1a:	d12c      	bne.n	1ae76 <operateOnStableLine+0x102>
			simEventTemp[9] = registerEvent('A'); //register TO SIM 2 phase power ON
   1ae1c:	2041      	movs	r0, #65	; 0x41
   1ae1e:	4b1e      	ldr	r3, [pc, #120]	; (1ae98 <operateOnStableLine+0x124>)
   1ae20:	4798      	blx	r3
   1ae22:	0003      	movs	r3, r0
   1ae24:	001a      	movs	r2, r3
   1ae26:	4b1d      	ldr	r3, [pc, #116]	; (1ae9c <operateOnStableLine+0x128>)
   1ae28:	725a      	strb	r2, [r3, #9]
}
   1ae2a:	e024      	b.n	1ae76 <operateOnStableLine+0x102>
	else if (temp == AC_OFF)	//Lost Power in All Phase
   1ae2c:	1dbb      	adds	r3, r7, #6
   1ae2e:	781b      	ldrb	r3, [r3, #0]
   1ae30:	2b00      	cmp	r3, #0
   1ae32:	d120      	bne.n	1ae76 <operateOnStableLine+0x102>
		THREEPHASE_OK_LED_OFF;
   1ae34:	2101      	movs	r1, #1
   1ae36:	2027      	movs	r0, #39	; 0x27
   1ae38:	4b15      	ldr	r3, [pc, #84]	; (1ae90 <operateOnStableLine+0x11c>)
   1ae3a:	4798      	blx	r3
		if ((user_settings_parameter_struct.dndAddress == DND_OFF) ||												//DND IS OFF FOR ALL EVENTS
   1ae3c:	4b12      	ldr	r3, [pc, #72]	; (1ae88 <operateOnStableLine+0x114>)
   1ae3e:	791b      	ldrb	r3, [r3, #4]
   1ae40:	2b4f      	cmp	r3, #79	; 0x4f
   1ae42:	d011      	beq.n	1ae68 <operateOnStableLine+0xf4>
		(last_three_phase_state == AC_2PH && user_settings_parameter_struct.dndAddress == DND_OFF) ||			//PREVIOUSLY SINGLE PHASING , and DND OFF FOR ALL EVENTS
   1ae44:	4b16      	ldr	r3, [pc, #88]	; (1aea0 <operateOnStableLine+0x12c>)
   1ae46:	781b      	ldrb	r3, [r3, #0]
   1ae48:	b2db      	uxtb	r3, r3
		if ((user_settings_parameter_struct.dndAddress == DND_OFF) ||												//DND IS OFF FOR ALL EVENTS
   1ae4a:	2b02      	cmp	r3, #2
   1ae4c:	d103      	bne.n	1ae56 <operateOnStableLine+0xe2>
		(last_three_phase_state == AC_2PH && user_settings_parameter_struct.dndAddress == DND_OFF) ||			//PREVIOUSLY SINGLE PHASING , and DND OFF FOR ALL EVENTS
   1ae4e:	4b0e      	ldr	r3, [pc, #56]	; (1ae88 <operateOnStableLine+0x114>)
   1ae50:	791b      	ldrb	r3, [r3, #4]
   1ae52:	2b4f      	cmp	r3, #79	; 0x4f
   1ae54:	d008      	beq.n	1ae68 <operateOnStableLine+0xf4>
		(last_three_phase_state == AC_3PH && user_settings_parameter_struct.dndAddress != DND_LIGHT))			//PREVIOSULY 3 PHASE, and NOT ON FOR ALL EVENTS
   1ae56:	4b12      	ldr	r3, [pc, #72]	; (1aea0 <operateOnStableLine+0x12c>)
   1ae58:	781b      	ldrb	r3, [r3, #0]
   1ae5a:	b2db      	uxtb	r3, r3
		(last_three_phase_state == AC_2PH && user_settings_parameter_struct.dndAddress == DND_OFF) ||			//PREVIOUSLY SINGLE PHASING , and DND OFF FOR ALL EVENTS
   1ae5c:	2b03      	cmp	r3, #3
   1ae5e:	d10a      	bne.n	1ae76 <operateOnStableLine+0x102>
		(last_three_phase_state == AC_3PH && user_settings_parameter_struct.dndAddress != DND_LIGHT))			//PREVIOSULY 3 PHASE, and NOT ON FOR ALL EVENTS
   1ae60:	4b09      	ldr	r3, [pc, #36]	; (1ae88 <operateOnStableLine+0x114>)
   1ae62:	791b      	ldrb	r3, [r3, #4]
   1ae64:	2b4c      	cmp	r3, #76	; 0x4c
   1ae66:	d006      	beq.n	1ae76 <operateOnStableLine+0x102>
			simEventTemp[5] = registerEvent('L'); //register To SIM AC Power OFF
   1ae68:	204c      	movs	r0, #76	; 0x4c
   1ae6a:	4b0b      	ldr	r3, [pc, #44]	; (1ae98 <operateOnStableLine+0x124>)
   1ae6c:	4798      	blx	r3
   1ae6e:	0003      	movs	r3, r0
   1ae70:	001a      	movs	r2, r3
   1ae72:	4b0a      	ldr	r3, [pc, #40]	; (1ae9c <operateOnStableLine+0x128>)
   1ae74:	715a      	strb	r2, [r3, #5]
}
   1ae76:	46c0      	nop			; (mov r8, r8)
   1ae78:	46bd      	mov	sp, r7
   1ae7a:	b003      	add	sp, #12
   1ae7c:	bd90      	pop	{r4, r7, pc}
   1ae7e:	46c0      	nop			; (mov r8, r8)
   1ae80:	200007ed 	.word	0x200007ed
   1ae84:	0001ad61 	.word	0x0001ad61
   1ae88:	20000660 	.word	0x20000660
   1ae8c:	0001a761 	.word	0x0001a761
   1ae90:	00018c41 	.word	0x00018c41
   1ae94:	0001ab15 	.word	0x0001ab15
   1ae98:	00014805 	.word	0x00014805
   1ae9c:	20000714 	.word	0x20000714
   1aea0:	20000727 	.word	0x20000727

0001aea4 <waitStableLineOver>:

bool waitStableLineOver(void)
{
   1aea4:	b580      	push	{r7, lr}
   1aea6:	af00      	add	r7, sp, #0
	return (waitStableLineOn && xTaskGetTickCount() - waitStableLineTimer >= (waitStableLineTime * 100));
   1aea8:	4b0d      	ldr	r3, [pc, #52]	; (1aee0 <waitStableLineOver+0x3c>)
   1aeaa:	781b      	ldrb	r3, [r3, #0]
   1aeac:	2b00      	cmp	r3, #0
   1aeae:	d00e      	beq.n	1aece <waitStableLineOver+0x2a>
   1aeb0:	4b0c      	ldr	r3, [pc, #48]	; (1aee4 <waitStableLineOver+0x40>)
   1aeb2:	4798      	blx	r3
   1aeb4:	0002      	movs	r2, r0
   1aeb6:	4b0c      	ldr	r3, [pc, #48]	; (1aee8 <waitStableLineOver+0x44>)
   1aeb8:	681b      	ldr	r3, [r3, #0]
   1aeba:	1ad3      	subs	r3, r2, r3
   1aebc:	4a0b      	ldr	r2, [pc, #44]	; (1aeec <waitStableLineOver+0x48>)
   1aebe:	7812      	ldrb	r2, [r2, #0]
   1aec0:	0011      	movs	r1, r2
   1aec2:	2264      	movs	r2, #100	; 0x64
   1aec4:	434a      	muls	r2, r1
   1aec6:	4293      	cmp	r3, r2
   1aec8:	d301      	bcc.n	1aece <waitStableLineOver+0x2a>
   1aeca:	2301      	movs	r3, #1
   1aecc:	e000      	b.n	1aed0 <waitStableLineOver+0x2c>
   1aece:	2300      	movs	r3, #0
   1aed0:	1c1a      	adds	r2, r3, #0
   1aed2:	2301      	movs	r3, #1
   1aed4:	4013      	ands	r3, r2
   1aed6:	b2db      	uxtb	r3, r3
}
   1aed8:	0018      	movs	r0, r3
   1aeda:	46bd      	mov	sp, r7
   1aedc:	bd80      	pop	{r7, pc}
   1aede:	46c0      	nop			; (mov r8, r8)
   1aee0:	200007ed 	.word	0x200007ed
   1aee4:	0001fe3d 	.word	0x0001fe3d
   1aee8:	200007b0 	.word	0x200007b0
   1aeec:	200007c1 	.word	0x200007c1

0001aef0 <startMotor>:


void startMotor(bool commanded, bool forcedStart)
{
   1aef0:	b580      	push	{r7, lr}
   1aef2:	b082      	sub	sp, #8
   1aef4:	af00      	add	r7, sp, #0
   1aef6:	0002      	movs	r2, r0
   1aef8:	1dfb      	adds	r3, r7, #7
   1aefa:	701a      	strb	r2, [r3, #0]
   1aefc:	1dbb      	adds	r3, r7, #6
   1aefe:	1c0a      	adds	r2, r1, #0
   1af00:	701a      	strb	r2, [r3, #0]
	startTimerOn = false;
   1af02:	4b57      	ldr	r3, [pc, #348]	; (1b060 <startMotor+0x170>)
   1af04:	2200      	movs	r2, #0
   1af06:	701a      	strb	r2, [r3, #0]
	
	if (forcedStart || (getACPowerState() &&																														//AC Phase is Presnet
   1af08:	1dbb      	adds	r3, r7, #6
   1af0a:	781b      	ldrb	r3, [r3, #0]
   1af0c:	2b00      	cmp	r3, #0
   1af0e:	d124      	bne.n	1af5a <startMotor+0x6a>
   1af10:	4b54      	ldr	r3, [pc, #336]	; (1b064 <startMotor+0x174>)
   1af12:	4798      	blx	r3
   1af14:	1e03      	subs	r3, r0, #0
   1af16:	d100      	bne.n	1af1a <startMotor+0x2a>
   1af18:	e08e      	b.n	1b038 <startMotor+0x148>
	((getAllPhaseState()==AC_3PH) || (getAllPhaseState()==AC_2PH && !user_settings_parameter_struct.detectSinglePhasing)) &&				//3 phase is present, or SPP is OFF and 2 phase is present
   1af1a:	4b53      	ldr	r3, [pc, #332]	; (1b068 <startMotor+0x178>)
   1af1c:	4798      	blx	r3
   1af1e:	0003      	movs	r3, r0
	if (forcedStart || (getACPowerState() &&																														//AC Phase is Presnet
   1af20:	2b03      	cmp	r3, #3
   1af22:	d00b      	beq.n	1af3c <startMotor+0x4c>
	((getAllPhaseState()==AC_3PH) || (getAllPhaseState()==AC_2PH && !user_settings_parameter_struct.detectSinglePhasing)) &&				//3 phase is present, or SPP is OFF and 2 phase is present
   1af24:	4b50      	ldr	r3, [pc, #320]	; (1b068 <startMotor+0x178>)
   1af26:	4798      	blx	r3
   1af28:	0003      	movs	r3, r0
   1af2a:	2b02      	cmp	r3, #2
   1af2c:	d000      	beq.n	1af30 <startMotor+0x40>
   1af2e:	e083      	b.n	1b038 <startMotor+0x148>
   1af30:	4b4e      	ldr	r3, [pc, #312]	; (1b06c <startMotor+0x17c>)
   1af32:	2220      	movs	r2, #32
   1af34:	5c9b      	ldrb	r3, [r3, r2]
   1af36:	2b00      	cmp	r3, #0
   1af38:	d000      	beq.n	1af3c <startMotor+0x4c>
   1af3a:	e07d      	b.n	1b038 <startMotor+0x148>
	((user_settings_parameter_struct.detectPhaseSequence && getPhaseSequence()) || (!user_settings_parameter_struct.detectPhaseSequence))))	//Phase Sequnce Protection is ON and correct phase seq, or Phase Seq Protection is off
   1af3c:	4b4b      	ldr	r3, [pc, #300]	; (1b06c <startMotor+0x17c>)
   1af3e:	2224      	movs	r2, #36	; 0x24
   1af40:	5c9b      	ldrb	r3, [r3, r2]
	((getAllPhaseState()==AC_3PH) || (getAllPhaseState()==AC_2PH && !user_settings_parameter_struct.detectSinglePhasing)) &&				//3 phase is present, or SPP is OFF and 2 phase is present
   1af42:	2b00      	cmp	r3, #0
   1af44:	d003      	beq.n	1af4e <startMotor+0x5e>
	((user_settings_parameter_struct.detectPhaseSequence && getPhaseSequence()) || (!user_settings_parameter_struct.detectPhaseSequence))))	//Phase Sequnce Protection is ON and correct phase seq, or Phase Seq Protection is off
   1af46:	4b4a      	ldr	r3, [pc, #296]	; (1b070 <startMotor+0x180>)
   1af48:	4798      	blx	r3
   1af4a:	1e03      	subs	r3, r0, #0
   1af4c:	d105      	bne.n	1af5a <startMotor+0x6a>
   1af4e:	4b47      	ldr	r3, [pc, #284]	; (1b06c <startMotor+0x17c>)
   1af50:	2224      	movs	r2, #36	; 0x24
   1af52:	5c9b      	ldrb	r3, [r3, r2]
   1af54:	2b00      	cmp	r3, #0
   1af56:	d000      	beq.n	1af5a <startMotor+0x6a>
   1af58:	e06e      	b.n	1b038 <startMotor+0x148>
	{
		if (!getMotorState())
   1af5a:	4b46      	ldr	r3, [pc, #280]	; (1b074 <startMotor+0x184>)
   1af5c:	4798      	blx	r3
   1af5e:	0003      	movs	r3, r0
   1af60:	001a      	movs	r2, r3
   1af62:	2301      	movs	r3, #1
   1af64:	4053      	eors	r3, r2
   1af66:	b2db      	uxtb	r3, r3
   1af68:	2b00      	cmp	r3, #0
   1af6a:	d05d      	beq.n	1b028 <startMotor+0x138>
		{
			if (factory_settings_parameter_struct.ENABLE_WATER)
   1af6c:	4b42      	ldr	r3, [pc, #264]	; (1b078 <startMotor+0x188>)
   1af6e:	795b      	ldrb	r3, [r3, #5]
   1af70:	2b00      	cmp	r3, #0
   1af72:	d034      	beq.n	1afde <startMotor+0xee>
			{
				if(!(user_settings_parameter_struct.waterBypassAddress) && getWaterSensorState()==CRITICALLEVEL)
   1af74:	4b3d      	ldr	r3, [pc, #244]	; (1b06c <startMotor+0x17c>)
   1af76:	7fdb      	ldrb	r3, [r3, #31]
   1af78:	2b00      	cmp	r3, #0
   1af7a:	d113      	bne.n	1afa4 <startMotor+0xb4>
   1af7c:	4b3f      	ldr	r3, [pc, #252]	; (1b07c <startMotor+0x18c>)
   1af7e:	4798      	blx	r3
   1af80:	1e03      	subs	r3, r0, #0
   1af82:	d10f      	bne.n	1afa4 <startMotor+0xb4>
				{
					if (commanded)
   1af84:	1dfb      	adds	r3, r7, #7
   1af86:	781b      	ldrb	r3, [r3, #0]
   1af88:	2b00      	cmp	r3, #0
   1af8a:	d003      	beq.n	1af94 <startMotor+0xa4>
					{
						setMotorMGRResponse('T');	//cannot start motor due to some problem
   1af8c:	2054      	movs	r0, #84	; 0x54
   1af8e:	4b3c      	ldr	r3, [pc, #240]	; (1b080 <startMotor+0x190>)
   1af90:	4798      	blx	r3
					}
					else
					{
						simEventTemp[0] = registerEvent('N');//register To SIM motor not started due to ANY REASON
					}
					return;
   1af92:	e062      	b.n	1b05a <startMotor+0x16a>
						simEventTemp[0] = registerEvent('N');//register To SIM motor not started due to ANY REASON
   1af94:	204e      	movs	r0, #78	; 0x4e
   1af96:	4b3b      	ldr	r3, [pc, #236]	; (1b084 <startMotor+0x194>)
   1af98:	4798      	blx	r3
   1af9a:	0003      	movs	r3, r0
   1af9c:	001a      	movs	r2, r3
   1af9e:	4b3a      	ldr	r3, [pc, #232]	; (1b088 <startMotor+0x198>)
   1afa0:	701a      	strb	r2, [r3, #0]
					return;
   1afa2:	e05a      	b.n	1b05a <startMotor+0x16a>
				}
				
				if (factory_settings_parameter_struct.ENABLE_GP)
   1afa4:	4b34      	ldr	r3, [pc, #208]	; (1b078 <startMotor+0x188>)
   1afa6:	791b      	ldrb	r3, [r3, #4]
   1afa8:	2b00      	cmp	r3, #0
   1afaa:	d018      	beq.n	1afde <startMotor+0xee>
				{
					if(!(user_settings_parameter_struct.waterBypassAddress) && getOverHeadWaterSensorState()==OVERHEADHIGHLEVEL)
   1afac:	4b2f      	ldr	r3, [pc, #188]	; (1b06c <startMotor+0x17c>)
   1afae:	7fdb      	ldrb	r3, [r3, #31]
   1afb0:	2b00      	cmp	r3, #0
   1afb2:	d114      	bne.n	1afde <startMotor+0xee>
   1afb4:	4b35      	ldr	r3, [pc, #212]	; (1b08c <startMotor+0x19c>)
   1afb6:	4798      	blx	r3
   1afb8:	0003      	movs	r3, r0
   1afba:	2b02      	cmp	r3, #2
   1afbc:	d10f      	bne.n	1afde <startMotor+0xee>
					{
						if(commanded)
   1afbe:	1dfb      	adds	r3, r7, #7
   1afc0:	781b      	ldrb	r3, [r3, #0]
   1afc2:	2b00      	cmp	r3, #0
   1afc4:	d003      	beq.n	1afce <startMotor+0xde>
						{
							setMotorMGRResponse('V');	//cannot start motor as OverHead Tank Full.
   1afc6:	2056      	movs	r0, #86	; 0x56
   1afc8:	4b2d      	ldr	r3, [pc, #180]	; (1b080 <startMotor+0x190>)
   1afca:	4798      	blx	r3
						}
						else
						{
							simEventTemp[17] = registerEvent('V');//register To SIM motor not started due to ANY REASON
						}
						return;
   1afcc:	e045      	b.n	1b05a <startMotor+0x16a>
							simEventTemp[17] = registerEvent('V');//register To SIM motor not started due to ANY REASON
   1afce:	2056      	movs	r0, #86	; 0x56
   1afd0:	4b2c      	ldr	r3, [pc, #176]	; (1b084 <startMotor+0x194>)
   1afd2:	4798      	blx	r3
   1afd4:	0003      	movs	r3, r0
   1afd6:	001a      	movs	r2, r3
   1afd8:	4b2b      	ldr	r3, [pc, #172]	; (1b088 <startMotor+0x198>)
   1afda:	745a      	strb	r2, [r3, #17]
						return;
   1afdc:	e03d      	b.n	1b05a <startMotor+0x16a>
					}
				}
			}

			STOP_RELAY_ON;
   1afde:	2101      	movs	r1, #1
   1afe0:	202c      	movs	r0, #44	; 0x2c
   1afe2:	4b2b      	ldr	r3, [pc, #172]	; (1b090 <startMotor+0x1a0>)
   1afe4:	4798      	blx	r3
			START_RELAY_ON;
   1afe6:	2101      	movs	r1, #1
   1afe8:	202d      	movs	r0, #45	; 0x2d
   1afea:	4b29      	ldr	r3, [pc, #164]	; (1b090 <startMotor+0x1a0>)
   1afec:	4798      	blx	r3
			stopMotorCommandGiven=false;
   1afee:	4b29      	ldr	r3, [pc, #164]	; (1b094 <startMotor+0x1a4>)
   1aff0:	2200      	movs	r2, #0
   1aff2:	701a      	strb	r2, [r3, #0]
			//MOTOR_ON_LED_ON;
			tempStartSequenceTimer = xTaskGetTickCount();
   1aff4:	4b28      	ldr	r3, [pc, #160]	; (1b098 <startMotor+0x1a8>)
   1aff6:	4798      	blx	r3
   1aff8:	0002      	movs	r2, r0
   1affa:	4b28      	ldr	r3, [pc, #160]	; (1b09c <startMotor+0x1ac>)
   1affc:	601a      	str	r2, [r3, #0]
			startSequenceOn = true;
   1affe:	4b28      	ldr	r3, [pc, #160]	; (1b0a0 <startMotor+0x1b0>)
   1b000:	2201      	movs	r2, #1
   1b002:	701a      	strb	r2, [r3, #0]
			setMotorState(true);
   1b004:	2001      	movs	r0, #1
   1b006:	4b27      	ldr	r3, [pc, #156]	; (1b0a4 <startMotor+0x1b4>)
   1b008:	4798      	blx	r3
			if (factory_settings_parameter_struct.ENABLE_CURRENT)
   1b00a:	4b1b      	ldr	r3, [pc, #108]	; (1b078 <startMotor+0x188>)
   1b00c:	785b      	ldrb	r3, [r3, #1]
   1b00e:	2b00      	cmp	r3, #0
   1b010:	d005      	beq.n	1b01e <startMotor+0x12e>
			{
				enableCurrentBuffer=false;
   1b012:	4b25      	ldr	r3, [pc, #148]	; (1b0a8 <startMotor+0x1b8>)
   1b014:	2200      	movs	r2, #0
   1b016:	701a      	strb	r2, [r3, #0]
				lastCurrentReading=CR_NORMAL;
   1b018:	4b24      	ldr	r3, [pc, #144]	; (1b0ac <startMotor+0x1bc>)
   1b01a:	2200      	movs	r2, #0
   1b01c:	701a      	strb	r2, [r3, #0]
			}
			gotOnCommand = commanded;
   1b01e:	4b24      	ldr	r3, [pc, #144]	; (1b0b0 <startMotor+0x1c0>)
   1b020:	1dfa      	adds	r2, r7, #7
   1b022:	7812      	ldrb	r2, [r2, #0]
   1b024:	701a      	strb	r2, [r3, #0]
		if (!getMotorState())
   1b026:	e017      	b.n	1b058 <startMotor+0x168>
		}
		else
		{
			if (commanded)
   1b028:	1dfb      	adds	r3, r7, #7
   1b02a:	781b      	ldrb	r3, [r3, #0]
   1b02c:	2b00      	cmp	r3, #0
   1b02e:	d013      	beq.n	1b058 <startMotor+0x168>
			{
				setMotorMGRResponse('+');		//motor is already on
   1b030:	202b      	movs	r0, #43	; 0x2b
   1b032:	4b13      	ldr	r3, [pc, #76]	; (1b080 <startMotor+0x190>)
   1b034:	4798      	blx	r3
		if (!getMotorState())
   1b036:	e00f      	b.n	1b058 <startMotor+0x168>
			}
		}
	}
	else
	{
		if (commanded)
   1b038:	1dfb      	adds	r3, r7, #7
   1b03a:	781b      	ldrb	r3, [r3, #0]
   1b03c:	2b00      	cmp	r3, #0
   1b03e:	d003      	beq.n	1b048 <startMotor+0x158>
		{
			setMotorMGRResponse('N');	//cannot start motor due to some problem
   1b040:	204e      	movs	r0, #78	; 0x4e
   1b042:	4b0f      	ldr	r3, [pc, #60]	; (1b080 <startMotor+0x190>)
   1b044:	4798      	blx	r3
   1b046:	e008      	b.n	1b05a <startMotor+0x16a>
		}
		else
		{
			simEventTemp[0] = registerEvent('N');//register To SIM motor not started due to ANY REASON
   1b048:	204e      	movs	r0, #78	; 0x4e
   1b04a:	4b0e      	ldr	r3, [pc, #56]	; (1b084 <startMotor+0x194>)
   1b04c:	4798      	blx	r3
   1b04e:	0003      	movs	r3, r0
   1b050:	001a      	movs	r2, r3
   1b052:	4b0d      	ldr	r3, [pc, #52]	; (1b088 <startMotor+0x198>)
   1b054:	701a      	strb	r2, [r3, #0]
   1b056:	e000      	b.n	1b05a <startMotor+0x16a>
		if (!getMotorState())
   1b058:	46c0      	nop			; (mov r8, r8)
		}
	}
}
   1b05a:	46bd      	mov	sp, r7
   1b05c:	b002      	add	sp, #8
   1b05e:	bd80      	pop	{r7, pc}
   1b060:	20000786 	.word	0x20000786
   1b064:	0001a6f9 	.word	0x0001a6f9
   1b068:	0001a72d 	.word	0x0001a72d
   1b06c:	20000660 	.word	0x20000660
   1b070:	0001a761 	.word	0x0001a761
   1b074:	0001a795 	.word	0x0001a795
   1b078:	20000638 	.word	0x20000638
   1b07c:	00018fd5 	.word	0x00018fd5
   1b080:	000149dd 	.word	0x000149dd
   1b084:	00014805 	.word	0x00014805
   1b088:	20000714 	.word	0x20000714
   1b08c:	00018ea5 	.word	0x00018ea5
   1b090:	00018c41 	.word	0x00018c41
   1b094:	20000840 	.word	0x20000840
   1b098:	0001fe3d 	.word	0x0001fe3d
   1b09c:	20000780 	.word	0x20000780
   1b0a0:	20000785 	.word	0x20000785
   1b0a4:	0001a7a9 	.word	0x0001a7a9
   1b0a8:	20000758 	.word	0x20000758
   1b0ac:	20000772 	.word	0x20000772
   1b0b0:	20000710 	.word	0x20000710

0001b0b4 <stopMotor>:

void stopMotor(bool commanded, bool forceStop,bool offButton)
{
   1b0b4:	b590      	push	{r4, r7, lr}
   1b0b6:	b083      	sub	sp, #12
   1b0b8:	af00      	add	r7, sp, #0
   1b0ba:	0004      	movs	r4, r0
   1b0bc:	0008      	movs	r0, r1
   1b0be:	0011      	movs	r1, r2
   1b0c0:	1dfb      	adds	r3, r7, #7
   1b0c2:	1c22      	adds	r2, r4, #0
   1b0c4:	701a      	strb	r2, [r3, #0]
   1b0c6:	1dbb      	adds	r3, r7, #6
   1b0c8:	1c02      	adds	r2, r0, #0
   1b0ca:	701a      	strb	r2, [r3, #0]
   1b0cc:	1d7b      	adds	r3, r7, #5
   1b0ce:	1c0a      	adds	r2, r1, #0
   1b0d0:	701a      	strb	r2, [r3, #0]
	if (forceStop || getMotorState())
   1b0d2:	1dbb      	adds	r3, r7, #6
   1b0d4:	781b      	ldrb	r3, [r3, #0]
   1b0d6:	2b00      	cmp	r3, #0
   1b0d8:	d103      	bne.n	1b0e2 <stopMotor+0x2e>
   1b0da:	4b20      	ldr	r3, [pc, #128]	; (1b15c <stopMotor+0xa8>)
   1b0dc:	4798      	blx	r3
   1b0de:	1e03      	subs	r3, r0, #0
   1b0e0:	d02f      	beq.n	1b142 <stopMotor+0x8e>
	{
		singlePhasingTimerOn = false;
   1b0e2:	4b1f      	ldr	r3, [pc, #124]	; (1b160 <stopMotor+0xac>)
   1b0e4:	2200      	movs	r2, #0
   1b0e6:	701a      	strb	r2, [r3, #0]
		if (user_settings_parameter_struct.detectMotorFeedback == MOTORFEEDBACK_DETECTION_CURRENT)
   1b0e8:	4b1e      	ldr	r3, [pc, #120]	; (1b164 <stopMotor+0xb0>)
   1b0ea:	2225      	movs	r2, #37	; 0x25
   1b0ec:	5c9b      	ldrb	r3, [r3, r2]
   1b0ee:	2b01      	cmp	r3, #1
   1b0f0:	d105      	bne.n	1b0fe <stopMotor+0x4a>
		{
			fdbkRefCurrent = Analog_Parameter_Struct.Motor_Current_IntPart;
   1b0f2:	4b1d      	ldr	r3, [pc, #116]	; (1b168 <stopMotor+0xb4>)
   1b0f4:	8a9b      	ldrh	r3, [r3, #20]
   1b0f6:	b29b      	uxth	r3, r3
   1b0f8:	b2da      	uxtb	r2, r3
   1b0fa:	4b1c      	ldr	r3, [pc, #112]	; (1b16c <stopMotor+0xb8>)
   1b0fc:	701a      	strb	r2, [r3, #0]
		}
		STOP_RELAY_OFF;
   1b0fe:	2100      	movs	r1, #0
   1b100:	202c      	movs	r0, #44	; 0x2c
   1b102:	4b1b      	ldr	r3, [pc, #108]	; (1b170 <stopMotor+0xbc>)
   1b104:	4798      	blx	r3
		stopMotorCommandGiven=true;
   1b106:	4b1b      	ldr	r3, [pc, #108]	; (1b174 <stopMotor+0xc0>)
   1b108:	2201      	movs	r2, #1
   1b10a:	701a      	strb	r2, [r3, #0]
		tempStopSequenceTimer = xTaskGetTickCount();
   1b10c:	4b1a      	ldr	r3, [pc, #104]	; (1b178 <stopMotor+0xc4>)
   1b10e:	4798      	blx	r3
   1b110:	0002      	movs	r2, r0
   1b112:	4b1a      	ldr	r3, [pc, #104]	; (1b17c <stopMotor+0xc8>)
   1b114:	601a      	str	r2, [r3, #0]
		stopSequenceOn = true;
   1b116:	4b1a      	ldr	r3, [pc, #104]	; (1b180 <stopMotor+0xcc>)
   1b118:	2201      	movs	r2, #1
   1b11a:	701a      	strb	r2, [r3, #0]
		setMotorState(false);
   1b11c:	2000      	movs	r0, #0
   1b11e:	4b19      	ldr	r3, [pc, #100]	; (1b184 <stopMotor+0xd0>)
   1b120:	4798      	blx	r3
		gotOffCommand = commanded;
   1b122:	4b19      	ldr	r3, [pc, #100]	; (1b188 <stopMotor+0xd4>)
   1b124:	1dfa      	adds	r2, r7, #7
   1b126:	7812      	ldrb	r2, [r2, #0]
   1b128:	701a      	strb	r2, [r3, #0]
		offButtonPressed=offButton;
   1b12a:	4b18      	ldr	r3, [pc, #96]	; (1b18c <stopMotor+0xd8>)
   1b12c:	1d7a      	adds	r2, r7, #5
   1b12e:	7812      	ldrb	r2, [r2, #0]
   1b130:	701a      	strb	r2, [r3, #0]
		if (factory_settings_parameter_struct.ENABLE_CURRENT)
   1b132:	4b17      	ldr	r3, [pc, #92]	; (1b190 <stopMotor+0xdc>)
   1b134:	785b      	ldrb	r3, [r3, #1]
   1b136:	2b00      	cmp	r3, #0
   1b138:	d00b      	beq.n	1b152 <stopMotor+0x9e>
		{
			lastCurrentReading=CR_NORMAL;			//to make the current readings normal
   1b13a:	4b16      	ldr	r3, [pc, #88]	; (1b194 <stopMotor+0xe0>)
   1b13c:	2200      	movs	r2, #0
   1b13e:	701a      	strb	r2, [r3, #0]
		if (factory_settings_parameter_struct.ENABLE_CURRENT)
   1b140:	e007      	b.n	1b152 <stopMotor+0x9e>
		}
	}
	else
	{
		if (commanded)
   1b142:	1dfb      	adds	r3, r7, #7
   1b144:	781b      	ldrb	r3, [r3, #0]
   1b146:	2b00      	cmp	r3, #0
   1b148:	d003      	beq.n	1b152 <stopMotor+0x9e>
		{
			setMotorMGRResponse('-');	//motor is already off
   1b14a:	202d      	movs	r0, #45	; 0x2d
   1b14c:	4b12      	ldr	r3, [pc, #72]	; (1b198 <stopMotor+0xe4>)
   1b14e:	4798      	blx	r3
		}
	}
}
   1b150:	e7ff      	b.n	1b152 <stopMotor+0x9e>
   1b152:	46c0      	nop			; (mov r8, r8)
   1b154:	46bd      	mov	sp, r7
   1b156:	b003      	add	sp, #12
   1b158:	bd90      	pop	{r4, r7, pc}
   1b15a:	46c0      	nop			; (mov r8, r8)
   1b15c:	0001a795 	.word	0x0001a795
   1b160:	2000077d 	.word	0x2000077d
   1b164:	20000660 	.word	0x20000660
   1b168:	200006e4 	.word	0x200006e4
   1b16c:	200007d4 	.word	0x200007d4
   1b170:	00018c41 	.word	0x00018c41
   1b174:	20000840 	.word	0x20000840
   1b178:	0001fe3d 	.word	0x0001fe3d
   1b17c:	20000794 	.word	0x20000794
   1b180:	20000774 	.word	0x20000774
   1b184:	0001a7a9 	.word	0x0001a7a9
   1b188:	200007ec 	.word	0x200007ec
   1b18c:	20000790 	.word	0x20000790
   1b190:	20000638 	.word	0x20000638
   1b194:	20000772 	.word	0x20000772
   1b198:	000149dd 	.word	0x000149dd

0001b19c <startMotorTimerOver>:

bool startMotorTimerOver(void)
{
   1b19c:	b580      	push	{r7, lr}
   1b19e:	af00      	add	r7, sp, #0
	return (xTaskGetTickCount() - tempStartTimer >= (((unsigned long int)user_settings_parameter_struct.autoStartTimeAddress * 1000)));
   1b1a0:	4b09      	ldr	r3, [pc, #36]	; (1b1c8 <startMotorTimerOver+0x2c>)
   1b1a2:	4798      	blx	r3
   1b1a4:	0002      	movs	r2, r0
   1b1a6:	4b09      	ldr	r3, [pc, #36]	; (1b1cc <startMotorTimerOver+0x30>)
   1b1a8:	681b      	ldr	r3, [r3, #0]
   1b1aa:	1ad1      	subs	r1, r2, r3
   1b1ac:	4b08      	ldr	r3, [pc, #32]	; (1b1d0 <startMotorTimerOver+0x34>)
   1b1ae:	885b      	ldrh	r3, [r3, #2]
   1b1b0:	001a      	movs	r2, r3
   1b1b2:	23fa      	movs	r3, #250	; 0xfa
   1b1b4:	009b      	lsls	r3, r3, #2
   1b1b6:	435a      	muls	r2, r3
   1b1b8:	2300      	movs	r3, #0
   1b1ba:	4291      	cmp	r1, r2
   1b1bc:	415b      	adcs	r3, r3
   1b1be:	b2db      	uxtb	r3, r3
}
   1b1c0:	0018      	movs	r0, r3
   1b1c2:	46bd      	mov	sp, r7
   1b1c4:	bd80      	pop	{r7, pc}
   1b1c6:	46c0      	nop			; (mov r8, r8)
   1b1c8:	0001fe3d 	.word	0x0001fe3d
   1b1cc:	2000078c 	.word	0x2000078c
   1b1d0:	20000660 	.word	0x20000660

0001b1d4 <unknownMotorOff>:

void unknownMotorOff(void)
{
   1b1d4:	b580      	push	{r7, lr}
   1b1d6:	af00      	add	r7, sp, #0
	// waitCheckACTimerOn = false;
	//report to SIM Motor Off due to Unknown Reason
	stopMotor(false,true,false);
   1b1d8:	2200      	movs	r2, #0
   1b1da:	2101      	movs	r1, #1
   1b1dc:	2000      	movs	r0, #0
   1b1de:	4b06      	ldr	r3, [pc, #24]	; (1b1f8 <unknownMotorOff+0x24>)
   1b1e0:	4798      	blx	r3
	simEventTemp[2] = registerEvent('_');
   1b1e2:	205f      	movs	r0, #95	; 0x5f
   1b1e4:	4b05      	ldr	r3, [pc, #20]	; (1b1fc <unknownMotorOff+0x28>)
   1b1e6:	4798      	blx	r3
   1b1e8:	0003      	movs	r3, r0
   1b1ea:	001a      	movs	r2, r3
   1b1ec:	4b04      	ldr	r3, [pc, #16]	; (1b200 <unknownMotorOff+0x2c>)
   1b1ee:	709a      	strb	r2, [r3, #2]
}
   1b1f0:	46c0      	nop			; (mov r8, r8)
   1b1f2:	46bd      	mov	sp, r7
   1b1f4:	bd80      	pop	{r7, pc}
   1b1f6:	46c0      	nop			; (mov r8, r8)
   1b1f8:	0001b0b5 	.word	0x0001b0b5
   1b1fc:	00014805 	.word	0x00014805
   1b200:	20000714 	.word	0x20000714

0001b204 <singlePhasingTimerOver>:

bool singlePhasingTimerOver(void)
{
   1b204:	b580      	push	{r7, lr}
   1b206:	af00      	add	r7, sp, #0
	return (singlePhasingTimerOn && xTaskGetTickCount() - tempSinglePhasingTimer > ((unsigned int)singlePhasingTime * 100));
   1b208:	4b0d      	ldr	r3, [pc, #52]	; (1b240 <singlePhasingTimerOver+0x3c>)
   1b20a:	781b      	ldrb	r3, [r3, #0]
   1b20c:	2b00      	cmp	r3, #0
   1b20e:	d00e      	beq.n	1b22e <singlePhasingTimerOver+0x2a>
   1b210:	4b0c      	ldr	r3, [pc, #48]	; (1b244 <singlePhasingTimerOver+0x40>)
   1b212:	4798      	blx	r3
   1b214:	0002      	movs	r2, r0
   1b216:	4b0c      	ldr	r3, [pc, #48]	; (1b248 <singlePhasingTimerOver+0x44>)
   1b218:	681b      	ldr	r3, [r3, #0]
   1b21a:	1ad2      	subs	r2, r2, r3
   1b21c:	4b0b      	ldr	r3, [pc, #44]	; (1b24c <singlePhasingTimerOver+0x48>)
   1b21e:	781b      	ldrb	r3, [r3, #0]
   1b220:	0019      	movs	r1, r3
   1b222:	2364      	movs	r3, #100	; 0x64
   1b224:	434b      	muls	r3, r1
   1b226:	429a      	cmp	r2, r3
   1b228:	d901      	bls.n	1b22e <singlePhasingTimerOver+0x2a>
   1b22a:	2301      	movs	r3, #1
   1b22c:	e000      	b.n	1b230 <singlePhasingTimerOver+0x2c>
   1b22e:	2300      	movs	r3, #0
   1b230:	1c1a      	adds	r2, r3, #0
   1b232:	2301      	movs	r3, #1
   1b234:	4013      	ands	r3, r2
   1b236:	b2db      	uxtb	r3, r3
}
   1b238:	0018      	movs	r0, r3
   1b23a:	46bd      	mov	sp, r7
   1b23c:	bd80      	pop	{r7, pc}
   1b23e:	46c0      	nop			; (mov r8, r8)
   1b240:	2000077d 	.word	0x2000077d
   1b244:	0001fe3d 	.word	0x0001fe3d
   1b248:	2000076c 	.word	0x2000076c
   1b24c:	20000764 	.word	0x20000764

0001b250 <operateOnSinglePhasing>:

void operateOnSinglePhasing(void)
{
   1b250:	b580      	push	{r7, lr}
   1b252:	af00      	add	r7, sp, #0
	THREEPHASE_OK_LED_OFF;
   1b254:	2101      	movs	r1, #1
   1b256:	2027      	movs	r0, #39	; 0x27
   1b258:	4b08      	ldr	r3, [pc, #32]	; (1b27c <operateOnSinglePhasing+0x2c>)
   1b25a:	4798      	blx	r3
	stopMotor(false,true,false);
   1b25c:	2200      	movs	r2, #0
   1b25e:	2101      	movs	r1, #1
   1b260:	2000      	movs	r0, #0
   1b262:	4b07      	ldr	r3, [pc, #28]	; (1b280 <operateOnSinglePhasing+0x30>)
   1b264:	4798      	blx	r3
	simEventTemp[3] = registerEvent('F');
   1b266:	2046      	movs	r0, #70	; 0x46
   1b268:	4b06      	ldr	r3, [pc, #24]	; (1b284 <operateOnSinglePhasing+0x34>)
   1b26a:	4798      	blx	r3
   1b26c:	0003      	movs	r3, r0
   1b26e:	001a      	movs	r2, r3
   1b270:	4b05      	ldr	r3, [pc, #20]	; (1b288 <operateOnSinglePhasing+0x38>)
   1b272:	70da      	strb	r2, [r3, #3]
}
   1b274:	46c0      	nop			; (mov r8, r8)
   1b276:	46bd      	mov	sp, r7
   1b278:	bd80      	pop	{r7, pc}
   1b27a:	46c0      	nop			; (mov r8, r8)
   1b27c:	00018c41 	.word	0x00018c41
   1b280:	0001b0b5 	.word	0x0001b0b5
   1b284:	00014805 	.word	0x00014805
   1b288:	20000714 	.word	0x20000714

0001b28c <terminateStopRelay>:

void terminateStopRelay(void)
{
   1b28c:	b580      	push	{r7, lr}
   1b28e:	af00      	add	r7, sp, #0
	if (stopSequenceOn && xTaskGetTickCount() - tempStopSequenceTimer > (stopSequenceTimerTime * 100))
   1b290:	4b28      	ldr	r3, [pc, #160]	; (1b334 <terminateStopRelay+0xa8>)
   1b292:	781b      	ldrb	r3, [r3, #0]
   1b294:	2b00      	cmp	r3, #0
   1b296:	d04a      	beq.n	1b32e <terminateStopRelay+0xa2>
   1b298:	4b27      	ldr	r3, [pc, #156]	; (1b338 <terminateStopRelay+0xac>)
   1b29a:	4798      	blx	r3
   1b29c:	0002      	movs	r2, r0
   1b29e:	4b27      	ldr	r3, [pc, #156]	; (1b33c <terminateStopRelay+0xb0>)
   1b2a0:	681b      	ldr	r3, [r3, #0]
   1b2a2:	1ad3      	subs	r3, r2, r3
   1b2a4:	4a26      	ldr	r2, [pc, #152]	; (1b340 <terminateStopRelay+0xb4>)
   1b2a6:	7812      	ldrb	r2, [r2, #0]
   1b2a8:	0011      	movs	r1, r2
   1b2aa:	2264      	movs	r2, #100	; 0x64
   1b2ac:	434a      	muls	r2, r1
   1b2ae:	4293      	cmp	r3, r2
   1b2b0:	d93d      	bls.n	1b32e <terminateStopRelay+0xa2>
	{
		//if ((bool)(user_settings_parameter_struct.autoStartAddress) && getACPowerState())
		//{
		//STOP_RELAY_ON;
		//}
		stopSequenceOn = false;
   1b2b2:	4b20      	ldr	r3, [pc, #128]	; (1b334 <terminateStopRelay+0xa8>)
   1b2b4:	2200      	movs	r2, #0
   1b2b6:	701a      	strb	r2, [r3, #0]
		stopMotorCommandGiven=true;
   1b2b8:	4b22      	ldr	r3, [pc, #136]	; (1b344 <terminateStopRelay+0xb8>)
   1b2ba:	2201      	movs	r2, #1
   1b2bc:	701a      	strb	r2, [r3, #0]
		if(!getMotorState_from_pin())															//motor has turned off OR NOT
   1b2be:	4b22      	ldr	r3, [pc, #136]	; (1b348 <terminateStopRelay+0xbc>)
   1b2c0:	4798      	blx	r3
   1b2c2:	0003      	movs	r3, r0
   1b2c4:	001a      	movs	r2, r3
   1b2c6:	2301      	movs	r3, #1
   1b2c8:	4053      	eors	r3, r2
   1b2ca:	b2db      	uxtb	r3, r3
   1b2cc:	2b00      	cmp	r3, #0
   1b2ce:	d019      	beq.n	1b304 <terminateStopRelay+0x78>
		{
			if (gotOffCommand)
   1b2d0:	4b1e      	ldr	r3, [pc, #120]	; (1b34c <terminateStopRelay+0xc0>)
   1b2d2:	781b      	ldrb	r3, [r3, #0]
   1b2d4:	2b00      	cmp	r3, #0
   1b2d6:	d006      	beq.n	1b2e6 <terminateStopRelay+0x5a>
			{
				gotOffCommand = false;
   1b2d8:	4b1c      	ldr	r3, [pc, #112]	; (1b34c <terminateStopRelay+0xc0>)
   1b2da:	2200      	movs	r2, #0
   1b2dc:	701a      	strb	r2, [r3, #0]
				setMotorMGRResponse('O');		//motor has stopped
   1b2de:	204f      	movs	r0, #79	; 0x4f
   1b2e0:	4b1b      	ldr	r3, [pc, #108]	; (1b350 <terminateStopRelay+0xc4>)
   1b2e2:	4798      	blx	r3
   1b2e4:	e020      	b.n	1b328 <terminateStopRelay+0x9c>
			}
			else if(offButtonPressed)
   1b2e6:	4b1b      	ldr	r3, [pc, #108]	; (1b354 <terminateStopRelay+0xc8>)
   1b2e8:	781b      	ldrb	r3, [r3, #0]
   1b2ea:	2b00      	cmp	r3, #0
   1b2ec:	d01c      	beq.n	1b328 <terminateStopRelay+0x9c>
			{
				offButtonPressed=false;
   1b2ee:	4b19      	ldr	r3, [pc, #100]	; (1b354 <terminateStopRelay+0xc8>)
   1b2f0:	2200      	movs	r2, #0
   1b2f2:	701a      	strb	r2, [r3, #0]
				simEventTemp[8] = registerEvent('O'); //register TO SIM motor has turned off
   1b2f4:	204f      	movs	r0, #79	; 0x4f
   1b2f6:	4b18      	ldr	r3, [pc, #96]	; (1b358 <terminateStopRelay+0xcc>)
   1b2f8:	4798      	blx	r3
   1b2fa:	0003      	movs	r3, r0
   1b2fc:	001a      	movs	r2, r3
   1b2fe:	4b17      	ldr	r3, [pc, #92]	; (1b35c <terminateStopRelay+0xd0>)
   1b300:	721a      	strb	r2, [r3, #8]
   1b302:	e011      	b.n	1b328 <terminateStopRelay+0x9c>
			}
		}
		else
		{
			if (gotOffCommand)
   1b304:	4b11      	ldr	r3, [pc, #68]	; (1b34c <terminateStopRelay+0xc0>)
   1b306:	781b      	ldrb	r3, [r3, #0]
   1b308:	2b00      	cmp	r3, #0
   1b30a:	d006      	beq.n	1b31a <terminateStopRelay+0x8e>
			{
				gotOffCommand = false;
   1b30c:	4b0f      	ldr	r3, [pc, #60]	; (1b34c <terminateStopRelay+0xc0>)
   1b30e:	2200      	movs	r2, #0
   1b310:	701a      	strb	r2, [r3, #0]
				setMotorMGRResponse('P');		//cannot turn off motor
   1b312:	2050      	movs	r0, #80	; 0x50
   1b314:	4b0e      	ldr	r3, [pc, #56]	; (1b350 <terminateStopRelay+0xc4>)
   1b316:	4798      	blx	r3
   1b318:	e006      	b.n	1b328 <terminateStopRelay+0x9c>
			}
			else
			{
				simEventTemp[1] = registerEvent('P');
   1b31a:	2050      	movs	r0, #80	; 0x50
   1b31c:	4b0e      	ldr	r3, [pc, #56]	; (1b358 <terminateStopRelay+0xcc>)
   1b31e:	4798      	blx	r3
   1b320:	0003      	movs	r3, r0
   1b322:	001a      	movs	r2, r3
   1b324:	4b0d      	ldr	r3, [pc, #52]	; (1b35c <terminateStopRelay+0xd0>)
   1b326:	705a      	strb	r2, [r3, #1]
			}
		}
		offButtonPressed=false;
   1b328:	4b0a      	ldr	r3, [pc, #40]	; (1b354 <terminateStopRelay+0xc8>)
   1b32a:	2200      	movs	r2, #0
   1b32c:	701a      	strb	r2, [r3, #0]
	}
}
   1b32e:	46c0      	nop			; (mov r8, r8)
   1b330:	46bd      	mov	sp, r7
   1b332:	bd80      	pop	{r7, pc}
   1b334:	20000774 	.word	0x20000774
   1b338:	0001fe3d 	.word	0x0001fe3d
   1b33c:	20000794 	.word	0x20000794
   1b340:	20000842 	.word	0x20000842
   1b344:	20000840 	.word	0x20000840
   1b348:	0001a7e9 	.word	0x0001a7e9
   1b34c:	200007ec 	.word	0x200007ec
   1b350:	000149dd 	.word	0x000149dd
   1b354:	20000790 	.word	0x20000790
   1b358:	00014805 	.word	0x00014805
   1b35c:	20000714 	.word	0x20000714

0001b360 <terminateStarDeltaTimer>:

void terminateStarDeltaTimer(void)
{
   1b360:	b580      	push	{r7, lr}
   1b362:	af00      	add	r7, sp, #0
	if(starDeltaTimerOn && xTaskGetTickCount() - tempStartSequenceTimer > ((unsigned long int)(user_settings_parameter_struct.starDeltaTimerAddress) *1000L))
   1b364:	4b13      	ldr	r3, [pc, #76]	; (1b3b4 <terminateStarDeltaTimer+0x54>)
   1b366:	781b      	ldrb	r3, [r3, #0]
   1b368:	2b00      	cmp	r3, #0
   1b36a:	d020      	beq.n	1b3ae <terminateStarDeltaTimer+0x4e>
   1b36c:	4b12      	ldr	r3, [pc, #72]	; (1b3b8 <terminateStarDeltaTimer+0x58>)
   1b36e:	4798      	blx	r3
   1b370:	0002      	movs	r2, r0
   1b372:	4b12      	ldr	r3, [pc, #72]	; (1b3bc <terminateStarDeltaTimer+0x5c>)
   1b374:	681b      	ldr	r3, [r3, #0]
   1b376:	1ad2      	subs	r2, r2, r3
   1b378:	4b11      	ldr	r3, [pc, #68]	; (1b3c0 <terminateStarDeltaTimer+0x60>)
   1b37a:	88db      	ldrh	r3, [r3, #6]
   1b37c:	0019      	movs	r1, r3
   1b37e:	23fa      	movs	r3, #250	; 0xfa
   1b380:	009b      	lsls	r3, r3, #2
   1b382:	434b      	muls	r3, r1
   1b384:	429a      	cmp	r2, r3
   1b386:	d912      	bls.n	1b3ae <terminateStarDeltaTimer+0x4e>
	{
		START_RELAY_OFF;
   1b388:	2100      	movs	r1, #0
   1b38a:	202d      	movs	r0, #45	; 0x2d
   1b38c:	4b0d      	ldr	r3, [pc, #52]	; (1b3c4 <terminateStarDeltaTimer+0x64>)
   1b38e:	4798      	blx	r3
		starDeltaTimerOn=false;
   1b390:	4b08      	ldr	r3, [pc, #32]	; (1b3b4 <terminateStarDeltaTimer+0x54>)
   1b392:	2200      	movs	r2, #0
   1b394:	701a      	strb	r2, [r3, #0]
		if (factory_settings_parameter_struct.ENABLE_CURRENT)
   1b396:	4b0c      	ldr	r3, [pc, #48]	; (1b3c8 <terminateStarDeltaTimer+0x68>)
   1b398:	785b      	ldrb	r3, [r3, #1]
   1b39a:	2b00      	cmp	r3, #0
   1b39c:	d007      	beq.n	1b3ae <terminateStarDeltaTimer+0x4e>
		{
			enableCurrentBuffer=true;
   1b39e:	4b0b      	ldr	r3, [pc, #44]	; (1b3cc <terminateStarDeltaTimer+0x6c>)
   1b3a0:	2201      	movs	r2, #1
   1b3a2:	701a      	strb	r2, [r3, #0]
			tempStartSequenceTimer=xTaskGetTickCount();
   1b3a4:	4b04      	ldr	r3, [pc, #16]	; (1b3b8 <terminateStarDeltaTimer+0x58>)
   1b3a6:	4798      	blx	r3
   1b3a8:	0002      	movs	r2, r0
   1b3aa:	4b04      	ldr	r3, [pc, #16]	; (1b3bc <terminateStarDeltaTimer+0x5c>)
   1b3ac:	601a      	str	r2, [r3, #0]
		}
	}
}
   1b3ae:	46c0      	nop			; (mov r8, r8)
   1b3b0:	46bd      	mov	sp, r7
   1b3b2:	bd80      	pop	{r7, pc}
   1b3b4:	20000787 	.word	0x20000787
   1b3b8:	0001fe3d 	.word	0x0001fe3d
   1b3bc:	20000780 	.word	0x20000780
   1b3c0:	20000660 	.word	0x20000660
   1b3c4:	00018c41 	.word	0x00018c41
   1b3c8:	20000638 	.word	0x20000638
   1b3cc:	20000758 	.word	0x20000758

0001b3d0 <terminateStartRelay>:

void terminateStartRelay(void)
{
   1b3d0:	b590      	push	{r4, r7, lr}
   1b3d2:	b083      	sub	sp, #12
   1b3d4:	af00      	add	r7, sp, #0
	if (startSequenceOn &&  xTaskGetTickCount() - tempStartSequenceTimer > (startSequenceTimerTime * 100))
   1b3d6:	4b36      	ldr	r3, [pc, #216]	; (1b4b0 <terminateStartRelay+0xe0>)
   1b3d8:	781b      	ldrb	r3, [r3, #0]
   1b3da:	2b00      	cmp	r3, #0
   1b3dc:	d064      	beq.n	1b4a8 <terminateStartRelay+0xd8>
   1b3de:	4b35      	ldr	r3, [pc, #212]	; (1b4b4 <terminateStartRelay+0xe4>)
   1b3e0:	4798      	blx	r3
   1b3e2:	0002      	movs	r2, r0
   1b3e4:	4b34      	ldr	r3, [pc, #208]	; (1b4b8 <terminateStartRelay+0xe8>)
   1b3e6:	681b      	ldr	r3, [r3, #0]
   1b3e8:	1ad3      	subs	r3, r2, r3
   1b3ea:	4a34      	ldr	r2, [pc, #208]	; (1b4bc <terminateStartRelay+0xec>)
   1b3ec:	7812      	ldrb	r2, [r2, #0]
   1b3ee:	0011      	movs	r1, r2
   1b3f0:	2264      	movs	r2, #100	; 0x64
   1b3f2:	434a      	muls	r2, r1
   1b3f4:	4293      	cmp	r3, r2
   1b3f6:	d957      	bls.n	1b4a8 <terminateStartRelay+0xd8>
	{
		if(((unsigned int)user_settings_parameter_struct.starDeltaTimerAddress *10) <= startSequenceTimerTime)
   1b3f8:	4b31      	ldr	r3, [pc, #196]	; (1b4c0 <terminateStartRelay+0xf0>)
   1b3fa:	88db      	ldrh	r3, [r3, #6]
   1b3fc:	001a      	movs	r2, r3
   1b3fe:	0013      	movs	r3, r2
   1b400:	009b      	lsls	r3, r3, #2
   1b402:	189b      	adds	r3, r3, r2
   1b404:	005b      	lsls	r3, r3, #1
   1b406:	001a      	movs	r2, r3
   1b408:	4b2c      	ldr	r3, [pc, #176]	; (1b4bc <terminateStartRelay+0xec>)
   1b40a:	781b      	ldrb	r3, [r3, #0]
   1b40c:	429a      	cmp	r2, r3
   1b40e:	d810      	bhi.n	1b432 <terminateStartRelay+0x62>
		{
			START_RELAY_OFF;
   1b410:	2100      	movs	r1, #0
   1b412:	202d      	movs	r0, #45	; 0x2d
   1b414:	4b2b      	ldr	r3, [pc, #172]	; (1b4c4 <terminateStartRelay+0xf4>)
   1b416:	4798      	blx	r3
			tempStartSequenceTimer=xTaskGetTickCount();
   1b418:	4b26      	ldr	r3, [pc, #152]	; (1b4b4 <terminateStartRelay+0xe4>)
   1b41a:	4798      	blx	r3
   1b41c:	0002      	movs	r2, r0
   1b41e:	4b26      	ldr	r3, [pc, #152]	; (1b4b8 <terminateStartRelay+0xe8>)
   1b420:	601a      	str	r2, [r3, #0]
			if (factory_settings_parameter_struct.ENABLE_CURRENT)
   1b422:	4b29      	ldr	r3, [pc, #164]	; (1b4c8 <terminateStartRelay+0xf8>)
   1b424:	785b      	ldrb	r3, [r3, #1]
   1b426:	2b00      	cmp	r3, #0
   1b428:	d006      	beq.n	1b438 <terminateStartRelay+0x68>
			{
				enableCurrentBuffer=true;
   1b42a:	4b28      	ldr	r3, [pc, #160]	; (1b4cc <terminateStartRelay+0xfc>)
   1b42c:	2201      	movs	r2, #1
   1b42e:	701a      	strb	r2, [r3, #0]
   1b430:	e002      	b.n	1b438 <terminateStartRelay+0x68>
			}
		}
		else
		{
			starDeltaTimerOn=true;
   1b432:	4b27      	ldr	r3, [pc, #156]	; (1b4d0 <terminateStartRelay+0x100>)
   1b434:	2201      	movs	r2, #1
   1b436:	701a      	strb	r2, [r3, #0]
		}
		startSequenceOn = false;
   1b438:	4b1d      	ldr	r3, [pc, #116]	; (1b4b0 <terminateStartRelay+0xe0>)
   1b43a:	2200      	movs	r2, #0
   1b43c:	701a      	strb	r2, [r3, #0]
		bool motor = getMotorState_from_pin();
   1b43e:	1dfc      	adds	r4, r7, #7
   1b440:	4b24      	ldr	r3, [pc, #144]	; (1b4d4 <terminateStartRelay+0x104>)
   1b442:	4798      	blx	r3
   1b444:	0003      	movs	r3, r0
   1b446:	7023      	strb	r3, [r4, #0]
		if (gotOnCommand)
   1b448:	4b23      	ldr	r3, [pc, #140]	; (1b4d8 <terminateStartRelay+0x108>)
   1b44a:	781b      	ldrb	r3, [r3, #0]
   1b44c:	2b00      	cmp	r3, #0
   1b44e:	d013      	beq.n	1b478 <terminateStartRelay+0xa8>
		{
			gotOnCommand = false;
   1b450:	4b21      	ldr	r3, [pc, #132]	; (1b4d8 <terminateStartRelay+0x108>)
   1b452:	2200      	movs	r2, #0
   1b454:	701a      	strb	r2, [r3, #0]
			if (motor)
   1b456:	1dfb      	adds	r3, r7, #7
   1b458:	781b      	ldrb	r3, [r3, #0]
   1b45a:	2b00      	cmp	r3, #0
   1b45c:	d003      	beq.n	1b466 <terminateStartRelay+0x96>
			{
				setMotorMGRResponse('S'); // motor has started
   1b45e:	2053      	movs	r0, #83	; 0x53
   1b460:	4b1e      	ldr	r3, [pc, #120]	; (1b4dc <terminateStartRelay+0x10c>)
   1b462:	4798      	blx	r3
				stopMotor(false,true,false);
				simEventTemp[0] = registerEvent('N');//register To SIM motor not started due to ANY REASON
			}
		}
	}
}
   1b464:	e020      	b.n	1b4a8 <terminateStartRelay+0xd8>
				stopMotor(false,true,false);
   1b466:	2200      	movs	r2, #0
   1b468:	2101      	movs	r1, #1
   1b46a:	2000      	movs	r0, #0
   1b46c:	4b1c      	ldr	r3, [pc, #112]	; (1b4e0 <terminateStartRelay+0x110>)
   1b46e:	4798      	blx	r3
				setMotorMGRResponse('N');	//cannot start motor due to some problem
   1b470:	204e      	movs	r0, #78	; 0x4e
   1b472:	4b1a      	ldr	r3, [pc, #104]	; (1b4dc <terminateStartRelay+0x10c>)
   1b474:	4798      	blx	r3
}
   1b476:	e017      	b.n	1b4a8 <terminateStartRelay+0xd8>
			if (motor)
   1b478:	1dfb      	adds	r3, r7, #7
   1b47a:	781b      	ldrb	r3, [r3, #0]
   1b47c:	2b00      	cmp	r3, #0
   1b47e:	d007      	beq.n	1b490 <terminateStartRelay+0xc0>
				simEventTemp[7] = registerEvent('S');// ;//register To SIM Motor has started
   1b480:	2053      	movs	r0, #83	; 0x53
   1b482:	4b18      	ldr	r3, [pc, #96]	; (1b4e4 <terminateStartRelay+0x114>)
   1b484:	4798      	blx	r3
   1b486:	0003      	movs	r3, r0
   1b488:	001a      	movs	r2, r3
   1b48a:	4b17      	ldr	r3, [pc, #92]	; (1b4e8 <terminateStartRelay+0x118>)
   1b48c:	71da      	strb	r2, [r3, #7]
}
   1b48e:	e00b      	b.n	1b4a8 <terminateStartRelay+0xd8>
				stopMotor(false,true,false);
   1b490:	2200      	movs	r2, #0
   1b492:	2101      	movs	r1, #1
   1b494:	2000      	movs	r0, #0
   1b496:	4b12      	ldr	r3, [pc, #72]	; (1b4e0 <terminateStartRelay+0x110>)
   1b498:	4798      	blx	r3
				simEventTemp[0] = registerEvent('N');//register To SIM motor not started due to ANY REASON
   1b49a:	204e      	movs	r0, #78	; 0x4e
   1b49c:	4b11      	ldr	r3, [pc, #68]	; (1b4e4 <terminateStartRelay+0x114>)
   1b49e:	4798      	blx	r3
   1b4a0:	0003      	movs	r3, r0
   1b4a2:	001a      	movs	r2, r3
   1b4a4:	4b10      	ldr	r3, [pc, #64]	; (1b4e8 <terminateStartRelay+0x118>)
   1b4a6:	701a      	strb	r2, [r3, #0]
}
   1b4a8:	46c0      	nop			; (mov r8, r8)
   1b4aa:	46bd      	mov	sp, r7
   1b4ac:	b003      	add	sp, #12
   1b4ae:	bd90      	pop	{r4, r7, pc}
   1b4b0:	20000785 	.word	0x20000785
   1b4b4:	0001fe3d 	.word	0x0001fe3d
   1b4b8:	20000780 	.word	0x20000780
   1b4bc:	200007f8 	.word	0x200007f8
   1b4c0:	20000660 	.word	0x20000660
   1b4c4:	00018c41 	.word	0x00018c41
   1b4c8:	20000638 	.word	0x20000638
   1b4cc:	20000758 	.word	0x20000758
   1b4d0:	20000787 	.word	0x20000787
   1b4d4:	0001a7e9 	.word	0x0001a7e9
   1b4d8:	20000710 	.word	0x20000710
   1b4dc:	000149dd 	.word	0x000149dd
   1b4e0:	0001b0b5 	.word	0x0001b0b5
   1b4e4:	00014805 	.word	0x00014805
   1b4e8:	20000714 	.word	0x20000714

0001b4ec <statusOnCall>:

void statusOnCall(void)
{
   1b4ec:	b590      	push	{r4, r7, lr}
   1b4ee:	b083      	sub	sp, #12
   1b4f0:	af00      	add	r7, sp, #0
	char status[5];
	uint8_t index=0;
   1b4f2:	1dfb      	adds	r3, r7, #7
   1b4f4:	2200      	movs	r2, #0
   1b4f6:	701a      	strb	r2, [r3, #0]
	uint8_t b = checkLineSensors();
   1b4f8:	1dbc      	adds	r4, r7, #6
   1b4fa:	4b3b      	ldr	r3, [pc, #236]	; (1b5e8 <statusOnCall+0xfc>)
   1b4fc:	4798      	blx	r3
   1b4fe:	0003      	movs	r3, r0
   1b500:	7023      	strb	r3, [r4, #0]
	if (b == AC_OFF)
   1b502:	1dbb      	adds	r3, r7, #6
   1b504:	781b      	ldrb	r3, [r3, #0]
   1b506:	2b00      	cmp	r3, #0
   1b508:	d109      	bne.n	1b51e <statusOnCall+0x32>
	{
		status[index++]='L';
   1b50a:	1dfb      	adds	r3, r7, #7
   1b50c:	781b      	ldrb	r3, [r3, #0]
   1b50e:	1dfa      	adds	r2, r7, #7
   1b510:	1c59      	adds	r1, r3, #1
   1b512:	7011      	strb	r1, [r2, #0]
   1b514:	001a      	movs	r2, r3
   1b516:	003b      	movs	r3, r7
   1b518:	214c      	movs	r1, #76	; 0x4c
   1b51a:	5499      	strb	r1, [r3, r2]
   1b51c:	e03b      	b.n	1b596 <statusOnCall+0xaa>
		// sim1->setMotorMGRResponse('L');	//motor off, no light
	}
	else if (b == AC_2PH)	//power only in 2 phase
   1b51e:	1dbb      	adds	r3, r7, #6
   1b520:	781b      	ldrb	r3, [r3, #0]
   1b522:	2b02      	cmp	r3, #2
   1b524:	d109      	bne.n	1b53a <statusOnCall+0x4e>
	{
		status[index++]='A';
   1b526:	1dfb      	adds	r3, r7, #7
   1b528:	781b      	ldrb	r3, [r3, #0]
   1b52a:	1dfa      	adds	r2, r7, #7
   1b52c:	1c59      	adds	r1, r3, #1
   1b52e:	7011      	strb	r1, [r2, #0]
   1b530:	001a      	movs	r2, r3
   1b532:	003b      	movs	r3, r7
   1b534:	2141      	movs	r1, #65	; 0x41
   1b536:	5499      	strb	r1, [r3, r2]
   1b538:	e02d      	b.n	1b596 <statusOnCall+0xaa>
		// sim1->setMotorMGRResponse('A');
	}
	else if (b == AC_3PH)
   1b53a:	1dbb      	adds	r3, r7, #6
   1b53c:	781b      	ldrb	r3, [r3, #0]
   1b53e:	2b03      	cmp	r3, #3
   1b540:	d129      	bne.n	1b596 <statusOnCall+0xaa>
	{
		bool temp = getMotorState_from_pin();
   1b542:	1d7c      	adds	r4, r7, #5
   1b544:	4b29      	ldr	r3, [pc, #164]	; (1b5ec <statusOnCall+0x100>)
   1b546:	4798      	blx	r3
   1b548:	0003      	movs	r3, r0
   1b54a:	7023      	strb	r3, [r4, #0]
		if (temp)
   1b54c:	1d7b      	adds	r3, r7, #5
   1b54e:	781b      	ldrb	r3, [r3, #0]
   1b550:	2b00      	cmp	r3, #0
   1b552:	d009      	beq.n	1b568 <statusOnCall+0x7c>
		{
			status[index++]='+';
   1b554:	1dfb      	adds	r3, r7, #7
   1b556:	781b      	ldrb	r3, [r3, #0]
   1b558:	1dfa      	adds	r2, r7, #7
   1b55a:	1c59      	adds	r1, r3, #1
   1b55c:	7011      	strb	r1, [r2, #0]
   1b55e:	001a      	movs	r2, r3
   1b560:	003b      	movs	r3, r7
   1b562:	212b      	movs	r1, #43	; 0x2b
   1b564:	5499      	strb	r1, [r3, r2]
   1b566:	e016      	b.n	1b596 <statusOnCall+0xaa>
			// sim1->setMotorMGRResponse('+');	//motor is on
		}
		else
		{
			status[index++]='_';
   1b568:	1dfb      	adds	r3, r7, #7
   1b56a:	781b      	ldrb	r3, [r3, #0]
   1b56c:	1dfa      	adds	r2, r7, #7
   1b56e:	1c59      	adds	r1, r3, #1
   1b570:	7011      	strb	r1, [r2, #0]
   1b572:	001a      	movs	r2, r3
   1b574:	003b      	movs	r3, r7
   1b576:	215f      	movs	r1, #95	; 0x5f
   1b578:	5499      	strb	r1, [r3, r2]
			
			//Play File for Wrong Phase Sequence if phase seq is wrong
			if(structThreePhase_state.u8t_phase_sequence_flag !=THREEPHASE_OK)					//3 phase sequence is incorrect
   1b57a:	4b1d      	ldr	r3, [pc, #116]	; (1b5f0 <statusOnCall+0x104>)
   1b57c:	781b      	ldrb	r3, [r3, #0]
   1b57e:	b2db      	uxtb	r3, r3
   1b580:	2b02      	cmp	r3, #2
   1b582:	d008      	beq.n	1b596 <statusOnCall+0xaa>
			{
				//todo: replace A(single Phasing) in below statement with Character for Wrong Phase Sequence Event
				status[index++]='A';
   1b584:	1dfb      	adds	r3, r7, #7
   1b586:	781b      	ldrb	r3, [r3, #0]
   1b588:	1dfa      	adds	r2, r7, #7
   1b58a:	1c59      	adds	r1, r3, #1
   1b58c:	7011      	strb	r1, [r2, #0]
   1b58e:	001a      	movs	r2, r3
   1b590:	003b      	movs	r3, r7
   1b592:	2141      	movs	r1, #65	; 0x41
   1b594:	5499      	strb	r1, [r3, r2]

			// sim1->setMotorMGRResponse('_');	//motor off, light on
		}
	}

	if(user_settings_parameter_struct.autoStartAddress)
   1b596:	4b17      	ldr	r3, [pc, #92]	; (1b5f4 <statusOnCall+0x108>)
   1b598:	785b      	ldrb	r3, [r3, #1]
   1b59a:	2b00      	cmp	r3, #0
   1b59c:	d009      	beq.n	1b5b2 <statusOnCall+0xc6>
	{
		status[index++]=')';
   1b59e:	1dfb      	adds	r3, r7, #7
   1b5a0:	781b      	ldrb	r3, [r3, #0]
   1b5a2:	1dfa      	adds	r2, r7, #7
   1b5a4:	1c59      	adds	r1, r3, #1
   1b5a6:	7011      	strb	r1, [r2, #0]
   1b5a8:	001a      	movs	r2, r3
   1b5aa:	003b      	movs	r3, r7
   1b5ac:	2129      	movs	r1, #41	; 0x29
   1b5ae:	5499      	strb	r1, [r3, r2]
   1b5b0:	e008      	b.n	1b5c4 <statusOnCall+0xd8>
	}
	else
	{
		status[index++]='[';
   1b5b2:	1dfb      	adds	r3, r7, #7
   1b5b4:	781b      	ldrb	r3, [r3, #0]
   1b5b6:	1dfa      	adds	r2, r7, #7
   1b5b8:	1c59      	adds	r1, r3, #1
   1b5ba:	7011      	strb	r1, [r2, #0]
   1b5bc:	001a      	movs	r2, r3
   1b5be:	003b      	movs	r3, r7
   1b5c0:	215b      	movs	r1, #91	; 0x5b
   1b5c2:	5499      	strb	r1, [r3, r2]
	}
	
	status[index++]='\0';
   1b5c4:	1dfb      	adds	r3, r7, #7
   1b5c6:	781b      	ldrb	r3, [r3, #0]
   1b5c8:	1dfa      	adds	r2, r7, #7
   1b5ca:	1c59      	adds	r1, r3, #1
   1b5cc:	7011      	strb	r1, [r2, #0]
   1b5ce:	001a      	movs	r2, r3
   1b5d0:	003b      	movs	r3, r7
   1b5d2:	2100      	movs	r1, #0
   1b5d4:	5499      	strb	r1, [r3, r2]

	playRepeatedFiles(status);
   1b5d6:	003b      	movs	r3, r7
   1b5d8:	0018      	movs	r0, r3
   1b5da:	4b07      	ldr	r3, [pc, #28]	; (1b5f8 <statusOnCall+0x10c>)
   1b5dc:	4798      	blx	r3
}
   1b5de:	46c0      	nop			; (mov r8, r8)
   1b5e0:	46bd      	mov	sp, r7
   1b5e2:	b003      	add	sp, #12
   1b5e4:	bd90      	pop	{r4, r7, pc}
   1b5e6:	46c0      	nop			; (mov r8, r8)
   1b5e8:	0001ad61 	.word	0x0001ad61
   1b5ec:	0001a7e9 	.word	0x0001a7e9
   1b5f0:	20000740 	.word	0x20000740
   1b5f4:	20000660 	.word	0x20000660
   1b5f8:	000146d1 	.word	0x000146d1

0001b5fc <voltageOnCall>:

void voltageOnCall(void)
{
   1b5fc:	b590      	push	{r4, r7, lr}
   1b5fe:	b087      	sub	sp, #28
   1b600:	af02      	add	r7, sp, #8
	char voltFiles[13];
	//change the below string seq to speak R Y B instead of 0
	sprintf(voltFiles,"]%lu{%lu}%lu",Analog_Parameter_Struct.PhaseRY_Voltage,Analog_Parameter_Struct.PhaseYB_Voltage,Analog_Parameter_Struct.PhaseBR_Voltage);
   1b602:	4b0a      	ldr	r3, [pc, #40]	; (1b62c <voltageOnCall+0x30>)
   1b604:	681a      	ldr	r2, [r3, #0]
   1b606:	4b09      	ldr	r3, [pc, #36]	; (1b62c <voltageOnCall+0x30>)
   1b608:	685c      	ldr	r4, [r3, #4]
   1b60a:	4b08      	ldr	r3, [pc, #32]	; (1b62c <voltageOnCall+0x30>)
   1b60c:	689b      	ldr	r3, [r3, #8]
   1b60e:	4908      	ldr	r1, [pc, #32]	; (1b630 <voltageOnCall+0x34>)
   1b610:	0038      	movs	r0, r7
   1b612:	9300      	str	r3, [sp, #0]
   1b614:	0023      	movs	r3, r4
   1b616:	4c07      	ldr	r4, [pc, #28]	; (1b634 <voltageOnCall+0x38>)
   1b618:	47a0      	blx	r4
	playRepeatedFiles(voltFiles);
   1b61a:	003b      	movs	r3, r7
   1b61c:	0018      	movs	r0, r3
   1b61e:	4b06      	ldr	r3, [pc, #24]	; (1b638 <voltageOnCall+0x3c>)
   1b620:	4798      	blx	r3
}
   1b622:	46c0      	nop			; (mov r8, r8)
   1b624:	46bd      	mov	sp, r7
   1b626:	b005      	add	sp, #20
   1b628:	bd90      	pop	{r4, r7, pc}
   1b62a:	46c0      	nop			; (mov r8, r8)
   1b62c:	200006e4 	.word	0x200006e4
   1b630:	0002a4b0 	.word	0x0002a4b0
   1b634:	00028c01 	.word	0x00028c01
   1b638:	000146d1 	.word	0x000146d1

0001b63c <setM2MEventState>:

void setM2MEventState(uint8_t eventNo, uint8_t state)
{
   1b63c:	b580      	push	{r7, lr}
   1b63e:	b082      	sub	sp, #8
   1b640:	af00      	add	r7, sp, #0
   1b642:	0002      	movs	r2, r0
   1b644:	1dfb      	adds	r3, r7, #7
   1b646:	701a      	strb	r2, [r3, #0]
   1b648:	1dbb      	adds	r3, r7, #6
   1b64a:	1c0a      	adds	r2, r1, #0
   1b64c:	701a      	strb	r2, [r3, #0]
	if(m2mEvent_arr[eventNo]==ME_SERVICING)
   1b64e:	1dfb      	adds	r3, r7, #7
   1b650:	781b      	ldrb	r3, [r3, #0]
   1b652:	4a0e      	ldr	r2, [pc, #56]	; (1b68c <setM2MEventState+0x50>)
   1b654:	5cd3      	ldrb	r3, [r2, r3]
   1b656:	2b02      	cmp	r3, #2
   1b658:	d10e      	bne.n	1b678 <setM2MEventState+0x3c>
	{
		if(state==ME_NOTAVAILABLE)
   1b65a:	1dbb      	adds	r3, r7, #6
   1b65c:	781b      	ldrb	r3, [r3, #0]
   1b65e:	2b03      	cmp	r3, #3
   1b660:	d10a      	bne.n	1b678 <setM2MEventState+0x3c>
		{
			state=ME_CLEARED;
   1b662:	1dbb      	adds	r3, r7, #6
   1b664:	2200      	movs	r2, #0
   1b666:	701a      	strb	r2, [r3, #0]
			simEventTemp[mapTable[eventNo]]=false;	//regsiter relevant Normal Event
   1b668:	1dfb      	adds	r3, r7, #7
   1b66a:	781b      	ldrb	r3, [r3, #0]
   1b66c:	4a08      	ldr	r2, [pc, #32]	; (1b690 <setM2MEventState+0x54>)
   1b66e:	5cd3      	ldrb	r3, [r2, r3]
   1b670:	001a      	movs	r2, r3
   1b672:	4b08      	ldr	r3, [pc, #32]	; (1b694 <setM2MEventState+0x58>)
   1b674:	2100      	movs	r1, #0
   1b676:	5499      	strb	r1, [r3, r2]
		}
	}
	m2mEvent_arr[eventNo]=state;
   1b678:	1dfb      	adds	r3, r7, #7
   1b67a:	781b      	ldrb	r3, [r3, #0]
   1b67c:	4a03      	ldr	r2, [pc, #12]	; (1b68c <setM2MEventState+0x50>)
   1b67e:	1db9      	adds	r1, r7, #6
   1b680:	7809      	ldrb	r1, [r1, #0]
   1b682:	54d1      	strb	r1, [r2, r3]
}
   1b684:	46c0      	nop			; (mov r8, r8)
   1b686:	46bd      	mov	sp, r7
   1b688:	b002      	add	sp, #8
   1b68a:	bd80      	pop	{r7, pc}
   1b68c:	200007a4 	.word	0x200007a4
   1b690:	20000738 	.word	0x20000738
   1b694:	20000714 	.word	0x20000714

0001b698 <M2MEventManager>:

void M2MEventManager(void)
{
   1b698:	b580      	push	{r7, lr}
   1b69a:	b082      	sub	sp, #8
   1b69c:	af00      	add	r7, sp, #0
	uint8_t j=2;
   1b69e:	1dfb      	adds	r3, r7, #7
   1b6a0:	2202      	movs	r2, #2
   1b6a2:	701a      	strb	r2, [r3, #0]
	while(j--)
   1b6a4:	e00a      	b.n	1b6bc <M2MEventManager+0x24>
	{
		if(m2mEvent_arr[j]==ME_WAITREGISTER)
   1b6a6:	1dfb      	adds	r3, r7, #7
   1b6a8:	781b      	ldrb	r3, [r3, #0]
   1b6aa:	4a0a      	ldr	r2, [pc, #40]	; (1b6d4 <M2MEventManager+0x3c>)
   1b6ac:	5cd3      	ldrb	r3, [r2, r3]
   1b6ae:	2b01      	cmp	r3, #1
   1b6b0:	d104      	bne.n	1b6bc <M2MEventManager+0x24>
		{
			registerM2MEvent(j);
   1b6b2:	1dfb      	adds	r3, r7, #7
   1b6b4:	781b      	ldrb	r3, [r3, #0]
   1b6b6:	0018      	movs	r0, r3
   1b6b8:	4b07      	ldr	r3, [pc, #28]	; (1b6d8 <M2MEventManager+0x40>)
   1b6ba:	4798      	blx	r3
	while(j--)
   1b6bc:	1dfb      	adds	r3, r7, #7
   1b6be:	781b      	ldrb	r3, [r3, #0]
   1b6c0:	1dfa      	adds	r2, r7, #7
   1b6c2:	1e59      	subs	r1, r3, #1
   1b6c4:	7011      	strb	r1, [r2, #0]
   1b6c6:	2b00      	cmp	r3, #0
   1b6c8:	d1ed      	bne.n	1b6a6 <M2MEventManager+0xe>
		}
	}
}
   1b6ca:	46c0      	nop			; (mov r8, r8)
   1b6cc:	46bd      	mov	sp, r7
   1b6ce:	b002      	add	sp, #8
   1b6d0:	bd80      	pop	{r7, pc}
   1b6d2:	46c0      	nop			; (mov r8, r8)
   1b6d4:	200007a4 	.word	0x200007a4
   1b6d8:	00014921 	.word	0x00014921

0001b6dc <SIMEventManager>:

void SIMEventManager(void)
{
   1b6dc:	b590      	push	{r4, r7, lr}
   1b6de:	b083      	sub	sp, #12
   1b6e0:	af00      	add	r7, sp, #0
	uint8_t i = 0;
   1b6e2:	1dfb      	adds	r3, r7, #7
   1b6e4:	2200      	movs	r2, #0
   1b6e6:	701a      	strb	r2, [r3, #0]
	if (factory_settings_parameter_struct.ENABLE_WATER)
   1b6e8:	4b1e      	ldr	r3, [pc, #120]	; (1b764 <SIMEventManager+0x88>)
   1b6ea:	795b      	ldrb	r3, [r3, #5]
   1b6ec:	2b00      	cmp	r3, #0
   1b6ee:	d00b      	beq.n	1b708 <SIMEventManager+0x2c>
	{
		if (factory_settings_parameter_struct.ENABLE_GP)
   1b6f0:	4b1c      	ldr	r3, [pc, #112]	; (1b764 <SIMEventManager+0x88>)
   1b6f2:	791b      	ldrb	r3, [r3, #4]
   1b6f4:	2b00      	cmp	r3, #0
   1b6f6:	d003      	beq.n	1b700 <SIMEventManager+0x24>
		{
			i = 19;
   1b6f8:	1dfb      	adds	r3, r7, #7
   1b6fa:	2213      	movs	r2, #19
   1b6fc:	701a      	strb	r2, [r3, #0]
   1b6fe:	e025      	b.n	1b74c <SIMEventManager+0x70>
		}
		else
		{
			i = 17;
   1b700:	1dfb      	adds	r3, r7, #7
   1b702:	2211      	movs	r2, #17
   1b704:	701a      	strb	r2, [r3, #0]
   1b706:	e021      	b.n	1b74c <SIMEventManager+0x70>
		}
	}
	else
	{
		if (factory_settings_parameter_struct.ENABLE_CURRENT)
   1b708:	4b16      	ldr	r3, [pc, #88]	; (1b764 <SIMEventManager+0x88>)
   1b70a:	785b      	ldrb	r3, [r3, #1]
   1b70c:	2b00      	cmp	r3, #0
   1b70e:	d003      	beq.n	1b718 <SIMEventManager+0x3c>
		{
			i = 14;
   1b710:	1dfb      	adds	r3, r7, #7
   1b712:	220e      	movs	r2, #14
   1b714:	701a      	strb	r2, [r3, #0]
   1b716:	e019      	b.n	1b74c <SIMEventManager+0x70>
		}
		else
		{
			i = 12;
   1b718:	1dfb      	adds	r3, r7, #7
   1b71a:	220c      	movs	r2, #12
   1b71c:	701a      	strb	r2, [r3, #0]
		}
	}
	
	while(i--)
   1b71e:	e015      	b.n	1b74c <SIMEventManager+0x70>
	{
		if (!simEventTemp[i])
   1b720:	1dfb      	adds	r3, r7, #7
   1b722:	781b      	ldrb	r3, [r3, #0]
   1b724:	4a10      	ldr	r2, [pc, #64]	; (1b768 <SIMEventManager+0x8c>)
   1b726:	5cd3      	ldrb	r3, [r2, r3]
   1b728:	2201      	movs	r2, #1
   1b72a:	4053      	eors	r3, r2
   1b72c:	b2db      	uxtb	r3, r3
   1b72e:	2b00      	cmp	r3, #0
   1b730:	d00c      	beq.n	1b74c <SIMEventManager+0x70>
		simEventTemp[i] = registerEvent(simEvent[i]);
   1b732:	1dfb      	adds	r3, r7, #7
   1b734:	781c      	ldrb	r4, [r3, #0]
   1b736:	1dfb      	adds	r3, r7, #7
   1b738:	781b      	ldrb	r3, [r3, #0]
   1b73a:	4a0c      	ldr	r2, [pc, #48]	; (1b76c <SIMEventManager+0x90>)
   1b73c:	5cd3      	ldrb	r3, [r2, r3]
   1b73e:	0018      	movs	r0, r3
   1b740:	4b0b      	ldr	r3, [pc, #44]	; (1b770 <SIMEventManager+0x94>)
   1b742:	4798      	blx	r3
   1b744:	0003      	movs	r3, r0
   1b746:	001a      	movs	r2, r3
   1b748:	4b07      	ldr	r3, [pc, #28]	; (1b768 <SIMEventManager+0x8c>)
   1b74a:	551a      	strb	r2, [r3, r4]
	while(i--)
   1b74c:	1dfb      	adds	r3, r7, #7
   1b74e:	781b      	ldrb	r3, [r3, #0]
   1b750:	1dfa      	adds	r2, r7, #7
   1b752:	1e59      	subs	r1, r3, #1
   1b754:	7011      	strb	r1, [r2, #0]
   1b756:	2b00      	cmp	r3, #0
   1b758:	d1e2      	bne.n	1b720 <SIMEventManager+0x44>
	}
}
   1b75a:	46c0      	nop			; (mov r8, r8)
   1b75c:	46bd      	mov	sp, r7
   1b75e:	b003      	add	sp, #12
   1b760:	bd90      	pop	{r4, r7, pc}
   1b762:	46c0      	nop			; (mov r8, r8)
   1b764:	20000638 	.word	0x20000638
   1b768:	20000714 	.word	0x20000714
   1b76c:	200007d8 	.word	0x200007d8
   1b770:	00014805 	.word	0x00014805

0001b774 <checkCurrentConsumption>:


void checkCurrentConsumption(void)
{
   1b774:	b580      	push	{r7, lr}
   1b776:	b084      	sub	sp, #16
   1b778:	af00      	add	r7, sp, #0
	if(startSequenceOn || stopSequenceOn || !getMotorState() || !(user_settings_parameter_struct.currentDetectionAddress))
   1b77a:	4b78      	ldr	r3, [pc, #480]	; (1b95c <checkCurrentConsumption+0x1e8>)
   1b77c:	781b      	ldrb	r3, [r3, #0]
   1b77e:	2b00      	cmp	r3, #0
   1b780:	d000      	beq.n	1b784 <checkCurrentConsumption+0x10>
   1b782:	e0e6      	b.n	1b952 <checkCurrentConsumption+0x1de>
   1b784:	4b76      	ldr	r3, [pc, #472]	; (1b960 <checkCurrentConsumption+0x1ec>)
   1b786:	781b      	ldrb	r3, [r3, #0]
   1b788:	2b00      	cmp	r3, #0
   1b78a:	d000      	beq.n	1b78e <checkCurrentConsumption+0x1a>
   1b78c:	e0e1      	b.n	1b952 <checkCurrentConsumption+0x1de>
   1b78e:	4b75      	ldr	r3, [pc, #468]	; (1b964 <checkCurrentConsumption+0x1f0>)
   1b790:	4798      	blx	r3
   1b792:	0003      	movs	r3, r0
   1b794:	001a      	movs	r2, r3
   1b796:	2301      	movs	r3, #1
   1b798:	4053      	eors	r3, r2
   1b79a:	b2db      	uxtb	r3, r3
   1b79c:	2b00      	cmp	r3, #0
   1b79e:	d000      	beq.n	1b7a2 <checkCurrentConsumption+0x2e>
   1b7a0:	e0d7      	b.n	1b952 <checkCurrentConsumption+0x1de>
   1b7a2:	4b71      	ldr	r3, [pc, #452]	; (1b968 <checkCurrentConsumption+0x1f4>)
   1b7a4:	7bdb      	ldrb	r3, [r3, #15]
   1b7a6:	2b00      	cmp	r3, #0
   1b7a8:	d100      	bne.n	1b7ac <checkCurrentConsumption+0x38>
   1b7aa:	e0d2      	b.n	1b952 <checkCurrentConsumption+0x1de>
	{
		return;
	}
	//|| ((xTaskGetTickCount()-lastCurrentReadingTime)<500))
	
	if(enableCurrentBuffer && xTaskGetTickCount()-tempStartSequenceTimer>30000)
   1b7ac:	4b6f      	ldr	r3, [pc, #444]	; (1b96c <checkCurrentConsumption+0x1f8>)
   1b7ae:	781b      	ldrb	r3, [r3, #0]
   1b7b0:	2b00      	cmp	r3, #0
   1b7b2:	d00b      	beq.n	1b7cc <checkCurrentConsumption+0x58>
   1b7b4:	4b6e      	ldr	r3, [pc, #440]	; (1b970 <checkCurrentConsumption+0x1fc>)
   1b7b6:	4798      	blx	r3
   1b7b8:	0002      	movs	r2, r0
   1b7ba:	4b6e      	ldr	r3, [pc, #440]	; (1b974 <checkCurrentConsumption+0x200>)
   1b7bc:	681b      	ldr	r3, [r3, #0]
   1b7be:	1ad3      	subs	r3, r2, r3
   1b7c0:	4a6d      	ldr	r2, [pc, #436]	; (1b978 <checkCurrentConsumption+0x204>)
   1b7c2:	4293      	cmp	r3, r2
   1b7c4:	d902      	bls.n	1b7cc <checkCurrentConsumption+0x58>
	{
		enableCurrentBuffer=false;
   1b7c6:	4b69      	ldr	r3, [pc, #420]	; (1b96c <checkCurrentConsumption+0x1f8>)
   1b7c8:	2200      	movs	r2, #0
   1b7ca:	701a      	strb	r2, [r3, #0]
	}
	
	//lastCurrentReadingTime=xTaskGetTickCount();
	
	uint32_t ADCcurrent = Analog_Parameter_Struct.Motor_Current;
   1b7cc:	4b6b      	ldr	r3, [pc, #428]	; (1b97c <checkCurrentConsumption+0x208>)
   1b7ce:	691b      	ldr	r3, [r3, #16]
   1b7d0:	607b      	str	r3, [r7, #4]
	//{
	//ADCcurrent = Read_ADC0(ADC_POSITIVE_INPUT_PIN16,200);
	//xSemaphoreGive(xADC_Semaphore);
	//}
	
	uint32_t temp = ADCcurrent;
   1b7d2:	687b      	ldr	r3, [r7, #4]
   1b7d4:	603b      	str	r3, [r7, #0]
	
	uint32_t overLoadDetectValue=12000;
   1b7d6:	4b6a      	ldr	r3, [pc, #424]	; (1b980 <checkCurrentConsumption+0x20c>)
   1b7d8:	60fb      	str	r3, [r7, #12]
	
	uint8_t temp2;
	
	if(enableCurrentBuffer && temp>(user_settings_parameter_struct.normalLoadAddress<<1))    //more than double  <<1 gives mulile of 2 value (double the orignal value)
   1b7da:	4b64      	ldr	r3, [pc, #400]	; (1b96c <checkCurrentConsumption+0x1f8>)
   1b7dc:	781b      	ldrb	r3, [r3, #0]
   1b7de:	2b00      	cmp	r3, #0
   1b7e0:	d00c      	beq.n	1b7fc <checkCurrentConsumption+0x88>
   1b7e2:	4b61      	ldr	r3, [pc, #388]	; (1b968 <checkCurrentConsumption+0x1f4>)
   1b7e4:	691b      	ldr	r3, [r3, #16]
   1b7e6:	005a      	lsls	r2, r3, #1
   1b7e8:	683b      	ldr	r3, [r7, #0]
   1b7ea:	429a      	cmp	r2, r3
   1b7ec:	d206      	bcs.n	1b7fc <checkCurrentConsumption+0x88>
	{
		temp2 = CR_OVER2;
   1b7ee:	230b      	movs	r3, #11
   1b7f0:	18fb      	adds	r3, r7, r3
   1b7f2:	2202      	movs	r2, #2
   1b7f4:	701a      	strb	r2, [r3, #0]
		overLoadDetectValue=18000;
   1b7f6:	4b63      	ldr	r3, [pc, #396]	; (1b984 <checkCurrentConsumption+0x210>)
   1b7f8:	60fb      	str	r3, [r7, #12]
   1b7fa:	e06b      	b.n	1b8d4 <checkCurrentConsumption+0x160>
	}
	else if(!enableCurrentBuffer && temp>(user_settings_parameter_struct.normalLoadAddress<<1))			//more than double
   1b7fc:	4b5b      	ldr	r3, [pc, #364]	; (1b96c <checkCurrentConsumption+0x1f8>)
   1b7fe:	781b      	ldrb	r3, [r3, #0]
   1b800:	2201      	movs	r2, #1
   1b802:	4053      	eors	r3, r2
   1b804:	b2db      	uxtb	r3, r3
   1b806:	2b00      	cmp	r3, #0
   1b808:	d00d      	beq.n	1b826 <checkCurrentConsumption+0xb2>
   1b80a:	4b57      	ldr	r3, [pc, #348]	; (1b968 <checkCurrentConsumption+0x1f4>)
   1b80c:	691b      	ldr	r3, [r3, #16]
   1b80e:	005a      	lsls	r2, r3, #1
   1b810:	683b      	ldr	r3, [r7, #0]
   1b812:	429a      	cmp	r2, r3
   1b814:	d207      	bcs.n	1b826 <checkCurrentConsumption+0xb2>
	{
		temp2 = CR_OVER;
   1b816:	230b      	movs	r3, #11
   1b818:	18fb      	adds	r3, r7, r3
   1b81a:	2201      	movs	r2, #1
   1b81c:	701a      	strb	r2, [r3, #0]
		overLoadDetectValue=overLoadDetectValue>>2;
   1b81e:	68fb      	ldr	r3, [r7, #12]
   1b820:	089b      	lsrs	r3, r3, #2
   1b822:	60fb      	str	r3, [r7, #12]
   1b824:	e056      	b.n	1b8d4 <checkCurrentConsumption+0x160>
	}
	else if(!enableCurrentBuffer && temp> (user_settings_parameter_struct.normalLoadAddress+(user_settings_parameter_struct.normalLoadAddress>>1))) // more than 1.5
   1b826:	4b51      	ldr	r3, [pc, #324]	; (1b96c <checkCurrentConsumption+0x1f8>)
   1b828:	781b      	ldrb	r3, [r3, #0]
   1b82a:	2201      	movs	r2, #1
   1b82c:	4053      	eors	r3, r2
   1b82e:	b2db      	uxtb	r3, r3
   1b830:	2b00      	cmp	r3, #0
   1b832:	d010      	beq.n	1b856 <checkCurrentConsumption+0xe2>
   1b834:	4b4c      	ldr	r3, [pc, #304]	; (1b968 <checkCurrentConsumption+0x1f4>)
   1b836:	691a      	ldr	r2, [r3, #16]
   1b838:	4b4b      	ldr	r3, [pc, #300]	; (1b968 <checkCurrentConsumption+0x1f4>)
   1b83a:	691b      	ldr	r3, [r3, #16]
   1b83c:	085b      	lsrs	r3, r3, #1
   1b83e:	18d2      	adds	r2, r2, r3
   1b840:	683b      	ldr	r3, [r7, #0]
   1b842:	429a      	cmp	r2, r3
   1b844:	d207      	bcs.n	1b856 <checkCurrentConsumption+0xe2>
	{
		temp2 = CR_OVER;
   1b846:	230b      	movs	r3, #11
   1b848:	18fb      	adds	r3, r7, r3
   1b84a:	2201      	movs	r2, #1
   1b84c:	701a      	strb	r2, [r3, #0]
		overLoadDetectValue=overLoadDetectValue>>1;
   1b84e:	68fb      	ldr	r3, [r7, #12]
   1b850:	085b      	lsrs	r3, r3, #1
   1b852:	60fb      	str	r3, [r7, #12]
   1b854:	e03e      	b.n	1b8d4 <checkCurrentConsumption+0x160>
	}
	else if (!enableCurrentBuffer && temp>user_settings_parameter_struct.overloadAddress)		// more than 1.25 to 1.5
   1b856:	4b45      	ldr	r3, [pc, #276]	; (1b96c <checkCurrentConsumption+0x1f8>)
   1b858:	781b      	ldrb	r3, [r3, #0]
   1b85a:	2201      	movs	r2, #1
   1b85c:	4053      	eors	r3, r2
   1b85e:	b2db      	uxtb	r3, r3
   1b860:	2b00      	cmp	r3, #0
   1b862:	d009      	beq.n	1b878 <checkCurrentConsumption+0x104>
   1b864:	4b40      	ldr	r3, [pc, #256]	; (1b968 <checkCurrentConsumption+0x1f4>)
   1b866:	695a      	ldr	r2, [r3, #20]
   1b868:	683b      	ldr	r3, [r7, #0]
   1b86a:	429a      	cmp	r2, r3
   1b86c:	d204      	bcs.n	1b878 <checkCurrentConsumption+0x104>
	{
		temp2 = CR_OVER;
   1b86e:	230b      	movs	r3, #11
   1b870:	18fb      	adds	r3, r7, r3
   1b872:	2201      	movs	r2, #1
   1b874:	701a      	strb	r2, [r3, #0]
   1b876:	e02d      	b.n	1b8d4 <checkCurrentConsumption+0x160>
	}
	else if(!enableCurrentBuffer && temp < user_settings_parameter_struct.underloadAddress)		// only consider noLoad after 30 secs
   1b878:	4b3c      	ldr	r3, [pc, #240]	; (1b96c <checkCurrentConsumption+0x1f8>)
   1b87a:	781b      	ldrb	r3, [r3, #0]
   1b87c:	2201      	movs	r2, #1
   1b87e:	4053      	eors	r3, r2
   1b880:	b2db      	uxtb	r3, r3
   1b882:	2b00      	cmp	r3, #0
   1b884:	d00c      	beq.n	1b8a0 <checkCurrentConsumption+0x12c>
   1b886:	4b38      	ldr	r3, [pc, #224]	; (1b968 <checkCurrentConsumption+0x1f4>)
   1b888:	699a      	ldr	r2, [r3, #24]
   1b88a:	683b      	ldr	r3, [r7, #0]
   1b88c:	429a      	cmp	r2, r3
   1b88e:	d907      	bls.n	1b8a0 <checkCurrentConsumption+0x12c>
	{
		temp2 = CR_UNDER;
   1b890:	230b      	movs	r3, #11
   1b892:	18fb      	adds	r3, r7, r3
   1b894:	2202      	movs	r2, #2
   1b896:	701a      	strb	r2, [r3, #0]
		overLoadDetectValue=overLoadDetectValue>>2;
   1b898:	68fb      	ldr	r3, [r7, #12]
   1b89a:	089b      	lsrs	r3, r3, #2
   1b89c:	60fb      	str	r3, [r7, #12]
   1b89e:	e019      	b.n	1b8d4 <checkCurrentConsumption+0x160>
	}
	else if(starDeltaTimerOn && enableCurrentBuffer && temp < (user_settings_parameter_struct.underloadAddress>>1))
   1b8a0:	4b39      	ldr	r3, [pc, #228]	; (1b988 <checkCurrentConsumption+0x214>)
   1b8a2:	781b      	ldrb	r3, [r3, #0]
   1b8a4:	2b00      	cmp	r3, #0
   1b8a6:	d011      	beq.n	1b8cc <checkCurrentConsumption+0x158>
   1b8a8:	4b30      	ldr	r3, [pc, #192]	; (1b96c <checkCurrentConsumption+0x1f8>)
   1b8aa:	781b      	ldrb	r3, [r3, #0]
   1b8ac:	2b00      	cmp	r3, #0
   1b8ae:	d00d      	beq.n	1b8cc <checkCurrentConsumption+0x158>
   1b8b0:	4b2d      	ldr	r3, [pc, #180]	; (1b968 <checkCurrentConsumption+0x1f4>)
   1b8b2:	699b      	ldr	r3, [r3, #24]
   1b8b4:	085a      	lsrs	r2, r3, #1
   1b8b6:	683b      	ldr	r3, [r7, #0]
   1b8b8:	429a      	cmp	r2, r3
   1b8ba:	d907      	bls.n	1b8cc <checkCurrentConsumption+0x158>
	{
		temp2 = CR_UNDER;
   1b8bc:	230b      	movs	r3, #11
   1b8be:	18fb      	adds	r3, r7, r3
   1b8c0:	2202      	movs	r2, #2
   1b8c2:	701a      	strb	r2, [r3, #0]
		overLoadDetectValue=overLoadDetectValue>>2;
   1b8c4:	68fb      	ldr	r3, [r7, #12]
   1b8c6:	089b      	lsrs	r3, r3, #2
   1b8c8:	60fb      	str	r3, [r7, #12]
   1b8ca:	e003      	b.n	1b8d4 <checkCurrentConsumption+0x160>
	}
	else
	{
		temp2= CR_NORMAL;
   1b8cc:	230b      	movs	r3, #11
   1b8ce:	18fb      	adds	r3, r7, r3
   1b8d0:	2200      	movs	r2, #0
   1b8d2:	701a      	strb	r2, [r3, #0]
	}
	if(lastCurrentReading == temp2)
   1b8d4:	4b2d      	ldr	r3, [pc, #180]	; (1b98c <checkCurrentConsumption+0x218>)
   1b8d6:	781b      	ldrb	r3, [r3, #0]
   1b8d8:	220b      	movs	r2, #11
   1b8da:	18ba      	adds	r2, r7, r2
   1b8dc:	7812      	ldrb	r2, [r2, #0]
   1b8de:	429a      	cmp	r2, r3
   1b8e0:	d12c      	bne.n	1b93c <checkCurrentConsumption+0x1c8>
	{
		if(xTaskGetTickCount()-currentEventFilterTempTime>overLoadDetectValue)
   1b8e2:	4b23      	ldr	r3, [pc, #140]	; (1b970 <checkCurrentConsumption+0x1fc>)
   1b8e4:	4798      	blx	r3
   1b8e6:	0002      	movs	r2, r0
   1b8e8:	4b29      	ldr	r3, [pc, #164]	; (1b990 <checkCurrentConsumption+0x21c>)
   1b8ea:	681b      	ldr	r3, [r3, #0]
   1b8ec:	1ad2      	subs	r2, r2, r3
   1b8ee:	68fb      	ldr	r3, [r7, #12]
   1b8f0:	429a      	cmp	r2, r3
   1b8f2:	d92f      	bls.n	1b954 <checkCurrentConsumption+0x1e0>
		{
			if(temp2==CR_OVER)
   1b8f4:	230b      	movs	r3, #11
   1b8f6:	18fb      	adds	r3, r7, r3
   1b8f8:	781b      	ldrb	r3, [r3, #0]
   1b8fa:	2b01      	cmp	r3, #1
   1b8fc:	d10c      	bne.n	1b918 <checkCurrentConsumption+0x1a4>
			{
				stopMotor(false,true,false);
   1b8fe:	2200      	movs	r2, #0
   1b900:	2101      	movs	r1, #1
   1b902:	2000      	movs	r0, #0
   1b904:	4b23      	ldr	r3, [pc, #140]	; (1b994 <checkCurrentConsumption+0x220>)
   1b906:	4798      	blx	r3
				simEventTemp[12] = registerEvent('B');			//register overload Event
   1b908:	2042      	movs	r0, #66	; 0x42
   1b90a:	4b23      	ldr	r3, [pc, #140]	; (1b998 <checkCurrentConsumption+0x224>)
   1b90c:	4798      	blx	r3
   1b90e:	0003      	movs	r3, r0
   1b910:	001a      	movs	r2, r3
   1b912:	4b22      	ldr	r3, [pc, #136]	; (1b99c <checkCurrentConsumption+0x228>)
   1b914:	731a      	strb	r2, [r3, #12]
   1b916:	e01d      	b.n	1b954 <checkCurrentConsumption+0x1e0>
			}
			else if(temp2==CR_UNDER)
   1b918:	230b      	movs	r3, #11
   1b91a:	18fb      	adds	r3, r7, r3
   1b91c:	781b      	ldrb	r3, [r3, #0]
   1b91e:	2b02      	cmp	r3, #2
   1b920:	d118      	bne.n	1b954 <checkCurrentConsumption+0x1e0>
			{
				stopMotor(false,true,false);
   1b922:	2200      	movs	r2, #0
   1b924:	2101      	movs	r1, #1
   1b926:	2000      	movs	r0, #0
   1b928:	4b1a      	ldr	r3, [pc, #104]	; (1b994 <checkCurrentConsumption+0x220>)
   1b92a:	4798      	blx	r3
				simEventTemp[13] = registerEvent('J');			// register Underload Event
   1b92c:	204a      	movs	r0, #74	; 0x4a
   1b92e:	4b1a      	ldr	r3, [pc, #104]	; (1b998 <checkCurrentConsumption+0x224>)
   1b930:	4798      	blx	r3
   1b932:	0003      	movs	r3, r0
   1b934:	001a      	movs	r2, r3
   1b936:	4b19      	ldr	r3, [pc, #100]	; (1b99c <checkCurrentConsumption+0x228>)
   1b938:	735a      	strb	r2, [r3, #13]
   1b93a:	e00b      	b.n	1b954 <checkCurrentConsumption+0x1e0>
			}
		}
	}
	else
	{
		currentEventFilterTempTime = xTaskGetTickCount();
   1b93c:	4b0c      	ldr	r3, [pc, #48]	; (1b970 <checkCurrentConsumption+0x1fc>)
   1b93e:	4798      	blx	r3
   1b940:	0002      	movs	r2, r0
   1b942:	4b13      	ldr	r3, [pc, #76]	; (1b990 <checkCurrentConsumption+0x21c>)
   1b944:	601a      	str	r2, [r3, #0]
		lastCurrentReading=temp2;
   1b946:	4b11      	ldr	r3, [pc, #68]	; (1b98c <checkCurrentConsumption+0x218>)
   1b948:	220b      	movs	r2, #11
   1b94a:	18ba      	adds	r2, r7, r2
   1b94c:	7812      	ldrb	r2, [r2, #0]
   1b94e:	701a      	strb	r2, [r3, #0]
   1b950:	e000      	b.n	1b954 <checkCurrentConsumption+0x1e0>
		return;
   1b952:	46c0      	nop			; (mov r8, r8)
	}
}
   1b954:	46bd      	mov	sp, r7
   1b956:	b004      	add	sp, #16
   1b958:	bd80      	pop	{r7, pc}
   1b95a:	46c0      	nop			; (mov r8, r8)
   1b95c:	20000785 	.word	0x20000785
   1b960:	20000774 	.word	0x20000774
   1b964:	0001a795 	.word	0x0001a795
   1b968:	20000660 	.word	0x20000660
   1b96c:	20000758 	.word	0x20000758
   1b970:	0001fe3d 	.word	0x0001fe3d
   1b974:	20000780 	.word	0x20000780
   1b978:	00007530 	.word	0x00007530
   1b97c:	200006e4 	.word	0x200006e4
   1b980:	00002ee0 	.word	0x00002ee0
   1b984:	00004650 	.word	0x00004650
   1b988:	20000787 	.word	0x20000787
   1b98c:	20000772 	.word	0x20000772
   1b990:	20000760 	.word	0x20000760
   1b994:	0001b0b5 	.word	0x0001b0b5
   1b998:	00014805 	.word	0x00014805
   1b99c:	20000714 	.word	0x20000714

0001b9a0 <button_detect_pin_callback>:

static void button_detect_pin_callback(void)
{
   1b9a0:	b580      	push	{r7, lr}
   1b9a2:	af00      	add	r7, sp, #0
	buttonEventOccured = true;
   1b9a4:	4b02      	ldr	r3, [pc, #8]	; (1b9b0 <button_detect_pin_callback+0x10>)
   1b9a6:	2201      	movs	r2, #1
   1b9a8:	701a      	strb	r2, [r3, #0]
	//	xTaskNotifyGive(fiftymsTask);
}
   1b9aa:	46c0      	nop			; (mov r8, r8)
   1b9ac:	46bd      	mov	sp, r7
   1b9ae:	bd80      	pop	{r7, pc}
   1b9b0:	20000242 	.word	0x20000242

0001b9b4 <vTask_MOTORCONTROL>:

static void vTask_MOTORCONTROL(void *params)
{
   1b9b4:	b590      	push	{r4, r7, lr}
   1b9b6:	b087      	sub	sp, #28
   1b9b8:	af00      	add	r7, sp, #0
   1b9ba:	6078      	str	r0, [r7, #4]
	UNUSED(params);
	
	Configure_ADC0();
   1b9bc:	4bc5      	ldr	r3, [pc, #788]	; (1bcd4 <vTask_MOTORCONTROL+0x320>)
   1b9be:	4798      	blx	r3
	
	configure_ac();
   1b9c0:	4bc5      	ldr	r3, [pc, #788]	; (1bcd8 <vTask_MOTORCONTROL+0x324>)
   1b9c2:	4798      	blx	r3
	configure_rtc();
   1b9c4:	4bc5      	ldr	r3, [pc, #788]	; (1bcdc <vTask_MOTORCONTROL+0x328>)
   1b9c6:	4798      	blx	r3
	configure_event();
   1b9c8:	4bc5      	ldr	r3, [pc, #788]	; (1bce0 <vTask_MOTORCONTROL+0x32c>)
   1b9ca:	4798      	blx	r3
	
	//////////////////////////////////////////////////////////////////////////
	gotOffCommand = false;
   1b9cc:	4bc5      	ldr	r3, [pc, #788]	; (1bce4 <vTask_MOTORCONTROL+0x330>)
   1b9ce:	2200      	movs	r2, #0
   1b9d0:	701a      	strb	r2, [r3, #0]
	gotOnCommand = false;
   1b9d2:	4bc5      	ldr	r3, [pc, #788]	; (1bce8 <vTask_MOTORCONTROL+0x334>)
   1b9d4:	2200      	movs	r2, #0
   1b9d6:	701a      	strb	r2, [r3, #0]

	//////////////////////////////////////////////////////////////////////////
	eventOccured = false;
   1b9d8:	4bc4      	ldr	r3, [pc, #784]	; (1bcec <vTask_MOTORCONTROL+0x338>)
   1b9da:	2200      	movs	r2, #0
   1b9dc:	701a      	strb	r2, [r3, #0]
	
	uint8_t last_comparison = AC_CHAN_STATUS_UNKNOWN;
   1b9de:	2315      	movs	r3, #21
   1b9e0:	18fb      	adds	r3, r7, r3
   1b9e2:	2201      	movs	r2, #1
   1b9e4:	701a      	strb	r2, [r3, #0]
	
	//sets the variable to store current ticks, so that we can delay first event operation
	uint32_t delayForFirstEvent = xTaskGetTickCount();
   1b9e6:	4bc2      	ldr	r3, [pc, #776]	; (1bcf0 <vTask_MOTORCONTROL+0x33c>)
   1b9e8:	4798      	blx	r3
   1b9ea:	0003      	movs	r3, r0
   1b9ec:	613b      	str	r3, [r7, #16]
	firstEvent = true;
   1b9ee:	4bc1      	ldr	r3, [pc, #772]	; (1bcf4 <vTask_MOTORCONTROL+0x340>)
   1b9f0:	2201      	movs	r2, #1
   1b9f2:	701a      	strb	r2, [r3, #0]
	
	last_comparison = ac_chan_get_status(&ac_instance,AC_CHAN_CHANNEL_0);
   1b9f4:	2315      	movs	r3, #21
   1b9f6:	18fc      	adds	r4, r7, r3
   1b9f8:	4bbf      	ldr	r3, [pc, #764]	; (1bcf8 <vTask_MOTORCONTROL+0x344>)
   1b9fa:	2100      	movs	r1, #0
   1b9fc:	0018      	movs	r0, r3
   1b9fe:	4bbf      	ldr	r3, [pc, #764]	; (1bcfc <vTask_MOTORCONTROL+0x348>)
   1ba00:	4798      	blx	r3
   1ba02:	0003      	movs	r3, r0
   1ba04:	7023      	strb	r3, [r4, #0]
	vTaskDelay(500/portTICK_PERIOD_MS);
   1ba06:	23fa      	movs	r3, #250	; 0xfa
   1ba08:	005b      	lsls	r3, r3, #1
   1ba0a:	0018      	movs	r0, r3
   1ba0c:	4bbc      	ldr	r3, [pc, #752]	; (1bd00 <vTask_MOTORCONTROL+0x34c>)
   1ba0e:	4798      	blx	r3
	last_comparison = ac_chan_get_status(&ac_instance,AC_CHAN_CHANNEL_0); //read again
   1ba10:	2315      	movs	r3, #21
   1ba12:	18fc      	adds	r4, r7, r3
   1ba14:	4bb8      	ldr	r3, [pc, #736]	; (1bcf8 <vTask_MOTORCONTROL+0x344>)
   1ba16:	2100      	movs	r1, #0
   1ba18:	0018      	movs	r0, r3
   1ba1a:	4bb8      	ldr	r3, [pc, #736]	; (1bcfc <vTask_MOTORCONTROL+0x348>)
   1ba1c:	4798      	blx	r3
   1ba1e:	0003      	movs	r3, r0
   1ba20:	7023      	strb	r3, [r4, #0]
	
	if (last_comparison & AC_CHAN_STATUS_POS_ABOVE_NEG)
   1ba22:	2315      	movs	r3, #21
   1ba24:	18fb      	adds	r3, r7, r3
   1ba26:	781b      	ldrb	r3, [r3, #0]
   1ba28:	2204      	movs	r2, #4
   1ba2a:	4013      	ands	r3, r2
   1ba2c:	d003      	beq.n	1ba36 <vTask_MOTORCONTROL+0x82>
	{
		isACpowerAvailable = true;
   1ba2e:	4bb5      	ldr	r3, [pc, #724]	; (1bd04 <vTask_MOTORCONTROL+0x350>)
   1ba30:	2201      	movs	r2, #1
   1ba32:	701a      	strb	r2, [r3, #0]
   1ba34:	e002      	b.n	1ba3c <vTask_MOTORCONTROL+0x88>
	}
	else
	{
		isACpowerAvailable = false;
   1ba36:	4bb3      	ldr	r3, [pc, #716]	; (1bd04 <vTask_MOTORCONTROL+0x350>)
   1ba38:	2200      	movs	r2, #0
   1ba3a:	701a      	strb	r2, [r3, #0]
	}
	
	current_three_phase_state = AC_OFF;
   1ba3c:	4bb2      	ldr	r3, [pc, #712]	; (1bd08 <vTask_MOTORCONTROL+0x354>)
   1ba3e:	2200      	movs	r2, #0
   1ba40:	701a      	strb	r2, [r3, #0]
	//////////////////////////////////////////////////////////////////////////
	
	startTimerOn = false;
   1ba42:	4bb2      	ldr	r3, [pc, #712]	; (1bd0c <vTask_MOTORCONTROL+0x358>)
   1ba44:	2200      	movs	r2, #0
   1ba46:	701a      	strb	r2, [r3, #0]

	singlePhasingTime = 10;
   1ba48:	4bb1      	ldr	r3, [pc, #708]	; (1bd10 <vTask_MOTORCONTROL+0x35c>)
   1ba4a:	220a      	movs	r2, #10
   1ba4c:	701a      	strb	r2, [r3, #0]
	singlePhasingTimerOn = false;
   1ba4e:	4bb1      	ldr	r3, [pc, #708]	; (1bd14 <vTask_MOTORCONTROL+0x360>)
   1ba50:	2200      	movs	r2, #0
   1ba52:	701a      	strb	r2, [r3, #0]

	startSequenceTimerTime = 20;
   1ba54:	4bb0      	ldr	r3, [pc, #704]	; (1bd18 <vTask_MOTORCONTROL+0x364>)
   1ba56:	2214      	movs	r2, #20
   1ba58:	701a      	strb	r2, [r3, #0]
	starDeltaTimerOn=false;
   1ba5a:	4bb0      	ldr	r3, [pc, #704]	; (1bd1c <vTask_MOTORCONTROL+0x368>)
   1ba5c:	2200      	movs	r2, #0
   1ba5e:	701a      	strb	r2, [r3, #0]
	startSequenceOn = false;
   1ba60:	4baf      	ldr	r3, [pc, #700]	; (1bd20 <vTask_MOTORCONTROL+0x36c>)
   1ba62:	2200      	movs	r2, #0
   1ba64:	701a      	strb	r2, [r3, #0]

	stopSequenceTimerTime = 20;
   1ba66:	4baf      	ldr	r3, [pc, #700]	; (1bd24 <vTask_MOTORCONTROL+0x370>)
   1ba68:	2214      	movs	r2, #20
   1ba6a:	701a      	strb	r2, [r3, #0]
	stopSequenceOn = false;
   1ba6c:	4bae      	ldr	r3, [pc, #696]	; (1bd28 <vTask_MOTORCONTROL+0x374>)
   1ba6e:	2200      	movs	r2, #0
   1ba70:	701a      	strb	r2, [r3, #0]
	
	setAllPhaseState(false); // allPhase = false;
   1ba72:	2000      	movs	r0, #0
   1ba74:	4bad      	ldr	r3, [pc, #692]	; (1bd2c <vTask_MOTORCONTROL+0x378>)
   1ba76:	4798      	blx	r3
	setMotorState(false);// mFeedback = false;
   1ba78:	2000      	movs	r0, #0
   1ba7a:	4bad      	ldr	r3, [pc, #692]	; (1bd30 <vTask_MOTORCONTROL+0x37c>)
   1ba7c:	4798      	blx	r3
	setACPowerState(false);//  phaseAC = false;
   1ba7e:	2000      	movs	r0, #0
   1ba80:	4bac      	ldr	r3, [pc, #688]	; (1bd34 <vTask_MOTORCONTROL+0x380>)
   1ba82:	4798      	blx	r3

	initPhaseRMStruct(&struct_rmsRY);
   1ba84:	4bac      	ldr	r3, [pc, #688]	; (1bd38 <vTask_MOTORCONTROL+0x384>)
   1ba86:	0018      	movs	r0, r3
   1ba88:	4bac      	ldr	r3, [pc, #688]	; (1bd3c <vTask_MOTORCONTROL+0x388>)
   1ba8a:	4798      	blx	r3
	initPhaseRMStruct(&struct_rmsYB);
   1ba8c:	4bac      	ldr	r3, [pc, #688]	; (1bd40 <vTask_MOTORCONTROL+0x38c>)
   1ba8e:	0018      	movs	r0, r3
   1ba90:	4baa      	ldr	r3, [pc, #680]	; (1bd3c <vTask_MOTORCONTROL+0x388>)
   1ba92:	4798      	blx	r3
	initPhaseRMStruct(&struct_rmsBR);
   1ba94:	4bab      	ldr	r3, [pc, #684]	; (1bd44 <vTask_MOTORCONTROL+0x390>)
   1ba96:	0018      	movs	r0, r3
   1ba98:	4ba8      	ldr	r3, [pc, #672]	; (1bd3c <vTask_MOTORCONTROL+0x388>)
   1ba9a:	4798      	blx	r3
	
	lastPressTime=0;
   1ba9c:	4baa      	ldr	r3, [pc, #680]	; (1bd48 <vTask_MOTORCONTROL+0x394>)
   1ba9e:	2200      	movs	r2, #0
   1baa0:	601a      	str	r2, [r3, #0]
	lastButtonEvent=0;
   1baa2:	4baa      	ldr	r3, [pc, #680]	; (1bd4c <vTask_MOTORCONTROL+0x398>)
   1baa4:	2200      	movs	r2, #0
   1baa6:	701a      	strb	r2, [r3, #0]
	
	uint8_t i= 0;
   1baa8:	2317      	movs	r3, #23
   1baaa:	18fb      	adds	r3, r7, r3
   1baac:	2200      	movs	r2, #0
   1baae:	701a      	strb	r2, [r3, #0]
	if (factory_settings_parameter_struct.ENABLE_CURRENT)
   1bab0:	4ba7      	ldr	r3, [pc, #668]	; (1bd50 <vTask_MOTORCONTROL+0x39c>)
   1bab2:	785b      	ldrb	r3, [r3, #1]
   1bab4:	2b00      	cmp	r3, #0
   1bab6:	d004      	beq.n	1bac2 <vTask_MOTORCONTROL+0x10e>
	{
		i=14;
   1bab8:	2317      	movs	r3, #23
   1baba:	18fb      	adds	r3, r7, r3
   1babc:	220e      	movs	r2, #14
   1babe:	701a      	strb	r2, [r3, #0]
   1bac0:	e00a      	b.n	1bad8 <vTask_MOTORCONTROL+0x124>
	}
	else
	{
		i = 12;
   1bac2:	2317      	movs	r3, #23
   1bac4:	18fb      	adds	r3, r7, r3
   1bac6:	220c      	movs	r2, #12
   1bac8:	701a      	strb	r2, [r3, #0]
	}
	while(i--)
   1baca:	e005      	b.n	1bad8 <vTask_MOTORCONTROL+0x124>
	{
		simEventTemp[i] = true;
   1bacc:	2317      	movs	r3, #23
   1bace:	18fb      	adds	r3, r7, r3
   1bad0:	781b      	ldrb	r3, [r3, #0]
   1bad2:	4aa0      	ldr	r2, [pc, #640]	; (1bd54 <vTask_MOTORCONTROL+0x3a0>)
   1bad4:	2101      	movs	r1, #1
   1bad6:	54d1      	strb	r1, [r2, r3]
	while(i--)
   1bad8:	2317      	movs	r3, #23
   1bada:	18fb      	adds	r3, r7, r3
   1badc:	781b      	ldrb	r3, [r3, #0]
   1bade:	2217      	movs	r2, #23
   1bae0:	18ba      	adds	r2, r7, r2
   1bae2:	1e59      	subs	r1, r3, #1
   1bae4:	7011      	strb	r1, [r2, #0]
   1bae6:	2b00      	cmp	r3, #0
   1bae8:	d1f0      	bne.n	1bacc <vTask_MOTORCONTROL+0x118>
	}
	simEvent[0] = 'N';
   1baea:	4b9b      	ldr	r3, [pc, #620]	; (1bd58 <vTask_MOTORCONTROL+0x3a4>)
   1baec:	224e      	movs	r2, #78	; 0x4e
   1baee:	701a      	strb	r2, [r3, #0]
	simEvent[1] = 'P';
   1baf0:	4b99      	ldr	r3, [pc, #612]	; (1bd58 <vTask_MOTORCONTROL+0x3a4>)
   1baf2:	2250      	movs	r2, #80	; 0x50
   1baf4:	705a      	strb	r2, [r3, #1]
	simEvent[2] = '_';					//chnage the recording when playing from flash, as sim800c does not have enough space right now.
   1baf6:	4b98      	ldr	r3, [pc, #608]	; (1bd58 <vTask_MOTORCONTROL+0x3a4>)
   1baf8:	225f      	movs	r2, #95	; 0x5f
   1bafa:	709a      	strb	r2, [r3, #2]
	simEvent[3] = 'F';
   1bafc:	4b96      	ldr	r3, [pc, #600]	; (1bd58 <vTask_MOTORCONTROL+0x3a4>)
   1bafe:	2246      	movs	r2, #70	; 0x46
   1bb00:	70da      	strb	r2, [r3, #3]
	simEvent[4] = 'G';
   1bb02:	4b95      	ldr	r3, [pc, #596]	; (1bd58 <vTask_MOTORCONTROL+0x3a4>)
   1bb04:	2247      	movs	r2, #71	; 0x47
   1bb06:	711a      	strb	r2, [r3, #4]
	simEvent[5] = 'L';
   1bb08:	4b93      	ldr	r3, [pc, #588]	; (1bd58 <vTask_MOTORCONTROL+0x3a4>)
   1bb0a:	224c      	movs	r2, #76	; 0x4c
   1bb0c:	715a      	strb	r2, [r3, #5]
	simEvent[6] = 'C';
   1bb0e:	4b92      	ldr	r3, [pc, #584]	; (1bd58 <vTask_MOTORCONTROL+0x3a4>)
   1bb10:	2243      	movs	r2, #67	; 0x43
   1bb12:	719a      	strb	r2, [r3, #6]
	simEvent[7] = 'S';
   1bb14:	4b90      	ldr	r3, [pc, #576]	; (1bd58 <vTask_MOTORCONTROL+0x3a4>)
   1bb16:	2253      	movs	r2, #83	; 0x53
   1bb18:	71da      	strb	r2, [r3, #7]
	simEvent[8] = 'O';
   1bb1a:	4b8f      	ldr	r3, [pc, #572]	; (1bd58 <vTask_MOTORCONTROL+0x3a4>)
   1bb1c:	224f      	movs	r2, #79	; 0x4f
   1bb1e:	721a      	strb	r2, [r3, #8]
	simEvent[9] = 'A';
   1bb20:	4b8d      	ldr	r3, [pc, #564]	; (1bd58 <vTask_MOTORCONTROL+0x3a4>)
   1bb22:	2241      	movs	r2, #65	; 0x41
   1bb24:	725a      	strb	r2, [r3, #9]

	simEvent[10] = ')';		//AUTO ON EVENT
   1bb26:	4b8c      	ldr	r3, [pc, #560]	; (1bd58 <vTask_MOTORCONTROL+0x3a4>)
   1bb28:	2229      	movs	r2, #41	; 0x29
   1bb2a:	729a      	strb	r2, [r3, #10]
	simEvent[11] = '[';		//AUTO OFF EVENT
   1bb2c:	4b8a      	ldr	r3, [pc, #552]	; (1bd58 <vTask_MOTORCONTROL+0x3a4>)
   1bb2e:	225b      	movs	r2, #91	; 0x5b
   1bb30:	72da      	strb	r2, [r3, #11]
	
	if (factory_settings_parameter_struct.ENABLE_CURRENT)
   1bb32:	4b87      	ldr	r3, [pc, #540]	; (1bd50 <vTask_MOTORCONTROL+0x39c>)
   1bb34:	785b      	ldrb	r3, [r3, #1]
   1bb36:	2b00      	cmp	r3, #0
   1bb38:	d005      	beq.n	1bb46 <vTask_MOTORCONTROL+0x192>
	{
		simEvent[12] = 'B';		//Overload Event
   1bb3a:	4b87      	ldr	r3, [pc, #540]	; (1bd58 <vTask_MOTORCONTROL+0x3a4>)
   1bb3c:	2242      	movs	r2, #66	; 0x42
   1bb3e:	731a      	strb	r2, [r3, #12]
		simEvent[13] = 'J';		//Underload EVENT
   1bb40:	4b85      	ldr	r3, [pc, #532]	; (1bd58 <vTask_MOTORCONTROL+0x3a4>)
   1bb42:	224a      	movs	r2, #74	; 0x4a
   1bb44:	735a      	strb	r2, [r3, #13]
	}
	//////////////////////////////////////////////////////////////////////////
	
	resetAutoStart(true);
   1bb46:	2001      	movs	r0, #1
   1bb48:	4b84      	ldr	r3, [pc, #528]	; (1bd5c <vTask_MOTORCONTROL+0x3a8>)
   1bb4a:	4798      	blx	r3
	eventOccured=true;
   1bb4c:	4b67      	ldr	r3, [pc, #412]	; (1bcec <vTask_MOTORCONTROL+0x338>)
   1bb4e:	2201      	movs	r2, #1
   1bb50:	701a      	strb	r2, [r3, #0]
	//////////////////////////////

	
	for (;;)
	{
		xSemaphoreTake(xButton_Semaphore, portMAX_DELAY);
   1bb52:	4b83      	ldr	r3, [pc, #524]	; (1bd60 <vTask_MOTORCONTROL+0x3ac>)
   1bb54:	681a      	ldr	r2, [r3, #0]
   1bb56:	2301      	movs	r3, #1
   1bb58:	425b      	negs	r3, r3
   1bb5a:	0019      	movs	r1, r3
   1bb5c:	0010      	movs	r0, r2
   1bb5e:	4b81      	ldr	r3, [pc, #516]	; (1bd64 <vTask_MOTORCONTROL+0x3b0>)
   1bb60:	4798      	blx	r3
		if(taskPSet)
   1bb62:	4b81      	ldr	r3, [pc, #516]	; (1bd68 <vTask_MOTORCONTROL+0x3b4>)
   1bb64:	781b      	ldrb	r3, [r3, #0]
   1bb66:	2b00      	cmp	r3, #0
   1bb68:	d006      	beq.n	1bb78 <vTask_MOTORCONTROL+0x1c4>
		{
			vTaskPrioritySet(NULL,1);
   1bb6a:	2101      	movs	r1, #1
   1bb6c:	2000      	movs	r0, #0
   1bb6e:	4b7f      	ldr	r3, [pc, #508]	; (1bd6c <vTask_MOTORCONTROL+0x3b8>)
   1bb70:	4798      	blx	r3
			taskPSet=false;
   1bb72:	4b7d      	ldr	r3, [pc, #500]	; (1bd68 <vTask_MOTORCONTROL+0x3b4>)
   1bb74:	2200      	movs	r2, #0
   1bb76:	701a      	strb	r2, [r3, #0]
		}
		xSemaphoreGive(xButton_Semaphore);
   1bb78:	4b79      	ldr	r3, [pc, #484]	; (1bd60 <vTask_MOTORCONTROL+0x3ac>)
   1bb7a:	6818      	ldr	r0, [r3, #0]
   1bb7c:	2300      	movs	r3, #0
   1bb7e:	2200      	movs	r2, #0
   1bb80:	2100      	movs	r1, #0
   1bb82:	4c7b      	ldr	r4, [pc, #492]	; (1bd70 <vTask_MOTORCONTROL+0x3bc>)
   1bb84:	47a0      	blx	r4
		
		if(!startSequenceOn && !stopSequenceOn)
   1bb86:	4b66      	ldr	r3, [pc, #408]	; (1bd20 <vTask_MOTORCONTROL+0x36c>)
   1bb88:	781b      	ldrb	r3, [r3, #0]
   1bb8a:	2201      	movs	r2, #1
   1bb8c:	4053      	eors	r3, r2
   1bb8e:	b2db      	uxtb	r3, r3
   1bb90:	2b00      	cmp	r3, #0
   1bb92:	d046      	beq.n	1bc22 <vTask_MOTORCONTROL+0x26e>
   1bb94:	4b64      	ldr	r3, [pc, #400]	; (1bd28 <vTask_MOTORCONTROL+0x374>)
   1bb96:	781b      	ldrb	r3, [r3, #0]
   1bb98:	2201      	movs	r2, #1
   1bb9a:	4053      	eors	r3, r2
   1bb9c:	b2db      	uxtb	r3, r3
   1bb9e:	2b00      	cmp	r3, #0
   1bba0:	d03f      	beq.n	1bc22 <vTask_MOTORCONTROL+0x26e>
		{
			uint8_t tempEventOccured=eventOccured;
   1bba2:	4b52      	ldr	r3, [pc, #328]	; (1bcec <vTask_MOTORCONTROL+0x338>)
   1bba4:	781b      	ldrb	r3, [r3, #0]
   1bba6:	b2da      	uxtb	r2, r3
   1bba8:	230f      	movs	r3, #15
   1bbaa:	18fb      	adds	r3, r7, r3
   1bbac:	701a      	strb	r2, [r3, #0]
			uint8_t tempButtonEventOccured=buttonEventOccured;
   1bbae:	4b71      	ldr	r3, [pc, #452]	; (1bd74 <vTask_MOTORCONTROL+0x3c0>)
   1bbb0:	781b      	ldrb	r3, [r3, #0]
   1bbb2:	b2da      	uxtb	r2, r3
   1bbb4:	230e      	movs	r3, #14
   1bbb6:	18fb      	adds	r3, r7, r3
   1bbb8:	701a      	strb	r2, [r3, #0]
			
			
			if(tempEventOccured)
   1bbba:	230f      	movs	r3, #15
   1bbbc:	18fb      	adds	r3, r7, r3
   1bbbe:	781b      	ldrb	r3, [r3, #0]
   1bbc0:	2b00      	cmp	r3, #0
   1bbc2:	d027      	beq.n	1bc14 <vTask_MOTORCONTROL+0x260>
			{
				if(firstEvent)
   1bbc4:	4b4b      	ldr	r3, [pc, #300]	; (1bcf4 <vTask_MOTORCONTROL+0x340>)
   1bbc6:	781b      	ldrb	r3, [r3, #0]
   1bbc8:	b2db      	uxtb	r3, r3
   1bbca:	2b00      	cmp	r3, #0
   1bbcc:	d00b      	beq.n	1bbe6 <vTask_MOTORCONTROL+0x232>
				{
					if(xTaskGetTickCount()-delayForFirstEvent>35000L)
   1bbce:	4b48      	ldr	r3, [pc, #288]	; (1bcf0 <vTask_MOTORCONTROL+0x33c>)
   1bbd0:	4798      	blx	r3
   1bbd2:	0002      	movs	r2, r0
   1bbd4:	693b      	ldr	r3, [r7, #16]
   1bbd6:	1ad3      	subs	r3, r2, r3
   1bbd8:	4a67      	ldr	r2, [pc, #412]	; (1bd78 <vTask_MOTORCONTROL+0x3c4>)
   1bbda:	4293      	cmp	r3, r2
   1bbdc:	d91a      	bls.n	1bc14 <vTask_MOTORCONTROL+0x260>
					{
						firstEvent = false;
   1bbde:	4b45      	ldr	r3, [pc, #276]	; (1bcf4 <vTask_MOTORCONTROL+0x340>)
   1bbe0:	2200      	movs	r2, #0
   1bbe2:	701a      	strb	r2, [r3, #0]
   1bbe4:	e016      	b.n	1bc14 <vTask_MOTORCONTROL+0x260>
					}
				}
				else
				{
					
					if(motorFeedbackEvent)
   1bbe6:	4b65      	ldr	r3, [pc, #404]	; (1bd7c <vTask_MOTORCONTROL+0x3c8>)
   1bbe8:	781b      	ldrb	r3, [r3, #0]
   1bbea:	b2db      	uxtb	r3, r3
   1bbec:	2b00      	cmp	r3, #0
   1bbee:	d00f      	beq.n	1bc10 <vTask_MOTORCONTROL+0x25c>
					{
						if((xTaskGetTickCount()-motorFeedbackEventTime>1800))
   1bbf0:	4b3f      	ldr	r3, [pc, #252]	; (1bcf0 <vTask_MOTORCONTROL+0x33c>)
   1bbf2:	4798      	blx	r3
   1bbf4:	0002      	movs	r2, r0
   1bbf6:	4b62      	ldr	r3, [pc, #392]	; (1bd80 <vTask_MOTORCONTROL+0x3cc>)
   1bbf8:	681b      	ldr	r3, [r3, #0]
   1bbfa:	1ad2      	subs	r2, r2, r3
   1bbfc:	23e1      	movs	r3, #225	; 0xe1
   1bbfe:	00db      	lsls	r3, r3, #3
   1bc00:	429a      	cmp	r2, r3
   1bc02:	d907      	bls.n	1bc14 <vTask_MOTORCONTROL+0x260>
						{
							motorFeedbackEvent=false;
   1bc04:	4b5d      	ldr	r3, [pc, #372]	; (1bd7c <vTask_MOTORCONTROL+0x3c8>)
   1bc06:	2200      	movs	r2, #0
   1bc08:	701a      	strb	r2, [r3, #0]
							operateOnEvent();
   1bc0a:	4b5e      	ldr	r3, [pc, #376]	; (1bd84 <vTask_MOTORCONTROL+0x3d0>)
   1bc0c:	4798      	blx	r3
   1bc0e:	e001      	b.n	1bc14 <vTask_MOTORCONTROL+0x260>
						}
					}
					else
					{
						operateOnEvent();
   1bc10:	4b5c      	ldr	r3, [pc, #368]	; (1bd84 <vTask_MOTORCONTROL+0x3d0>)
   1bc12:	4798      	blx	r3
			//if(tempButtonEventOccured)
			//{
			//operateOnButtonEvent();
			//}
			
			if(lastButtonEvent)
   1bc14:	4b4d      	ldr	r3, [pc, #308]	; (1bd4c <vTask_MOTORCONTROL+0x398>)
   1bc16:	781b      	ldrb	r3, [r3, #0]
   1bc18:	b2db      	uxtb	r3, r3
   1bc1a:	2b00      	cmp	r3, #0
   1bc1c:	d001      	beq.n	1bc22 <vTask_MOTORCONTROL+0x26e>
			{
				buttonFilter();
   1bc1e:	4b5a      	ldr	r3, [pc, #360]	; (1bd88 <vTask_MOTORCONTROL+0x3d4>)
   1bc20:	4798      	blx	r3
			}
		}
		//// check if it is the time for new Voltage reading and if so than get new Voltage Reading.
		if(should_Detect_New_Voltage()) {
   1bc22:	4b5a      	ldr	r3, [pc, #360]	; (1bd8c <vTask_MOTORCONTROL+0x3d8>)
   1bc24:	4798      	blx	r3
   1bc26:	1e03      	subs	r3, r0, #0
   1bc28:	d003      	beq.n	1bc32 <vTask_MOTORCONTROL+0x27e>
			detect_battery_voltage_and_percentage();
   1bc2a:	4b59      	ldr	r3, [pc, #356]	; (1bd90 <vTask_MOTORCONTROL+0x3dc>)
   1bc2c:	4798      	blx	r3
			detect_Three_Phase_Voltage();
   1bc2e:	4b59      	ldr	r3, [pc, #356]	; (1bd94 <vTask_MOTORCONTROL+0x3e0>)
   1bc30:	4798      	blx	r3
		}
		////////
		
		// To check if new reading of motor current is needed, and get new reading, and update in Analog_Parameter_Struct
		
		if (factory_settings_parameter_struct.ENABLE_CURRENT)
   1bc32:	4b47      	ldr	r3, [pc, #284]	; (1bd50 <vTask_MOTORCONTROL+0x39c>)
   1bc34:	785b      	ldrb	r3, [r3, #1]
   1bc36:	2b00      	cmp	r3, #0
   1bc38:	d013      	beq.n	1bc62 <vTask_MOTORCONTROL+0x2ae>
		{
			if(should_Detect_New_Current()) {
   1bc3a:	4b57      	ldr	r3, [pc, #348]	; (1bd98 <vTask_MOTORCONTROL+0x3e4>)
   1bc3c:	4798      	blx	r3
   1bc3e:	1e03      	subs	r3, r0, #0
   1bc40:	d00f      	beq.n	1bc62 <vTask_MOTORCONTROL+0x2ae>
				detect_Motor_Current();
   1bc42:	4b56      	ldr	r3, [pc, #344]	; (1bd9c <vTask_MOTORCONTROL+0x3e8>)
   1bc44:	4798      	blx	r3
				if (user_settings_parameter_struct.detectMotorFeedback== MOTORFEEDBACK_DETECTION_CURRENT)
   1bc46:	4b56      	ldr	r3, [pc, #344]	; (1bda0 <vTask_MOTORCONTROL+0x3ec>)
   1bc48:	2225      	movs	r2, #37	; 0x25
   1bc4a:	5c9b      	ldrb	r3, [r3, r2]
   1bc4c:	2b01      	cmp	r3, #1
   1bc4e:	d106      	bne.n	1bc5e <vTask_MOTORCONTROL+0x2aa>
				{
					if(detectMotorStateChangeUsingCurrent())
   1bc50:	4b54      	ldr	r3, [pc, #336]	; (1bda4 <vTask_MOTORCONTROL+0x3f0>)
   1bc52:	4798      	blx	r3
   1bc54:	1e03      	subs	r3, r0, #0
   1bc56:	d002      	beq.n	1bc5e <vTask_MOTORCONTROL+0x2aa>
					{
						eventOccured=true;
   1bc58:	4b24      	ldr	r3, [pc, #144]	; (1bcec <vTask_MOTORCONTROL+0x338>)
   1bc5a:	2201      	movs	r2, #1
   1bc5c:	701a      	strb	r2, [r3, #0]
					}
				}
				
				checkCurrentConsumption();
   1bc5e:	4b52      	ldr	r3, [pc, #328]	; (1bda8 <vTask_MOTORCONTROL+0x3f4>)
   1bc60:	4798      	blx	r3
			}
		}
		///////
		if (waitStableLineOn && waitStableLineOver())
   1bc62:	4b52      	ldr	r3, [pc, #328]	; (1bdac <vTask_MOTORCONTROL+0x3f8>)
   1bc64:	781b      	ldrb	r3, [r3, #0]
   1bc66:	2b00      	cmp	r3, #0
   1bc68:	d005      	beq.n	1bc76 <vTask_MOTORCONTROL+0x2c2>
   1bc6a:	4b51      	ldr	r3, [pc, #324]	; (1bdb0 <vTask_MOTORCONTROL+0x3fc>)
   1bc6c:	4798      	blx	r3
   1bc6e:	1e03      	subs	r3, r0, #0
   1bc70:	d001      	beq.n	1bc76 <vTask_MOTORCONTROL+0x2c2>
		{
			operateOnStableLine();
   1bc72:	4b50      	ldr	r3, [pc, #320]	; (1bdb4 <vTask_MOTORCONTROL+0x400>)
   1bc74:	4798      	blx	r3
		}
		
		if(stopMotorCommandGiven && xTaskGetTickCount()-tempStopSequenceTimer>5000)
   1bc76:	4b50      	ldr	r3, [pc, #320]	; (1bdb8 <vTask_MOTORCONTROL+0x404>)
   1bc78:	781b      	ldrb	r3, [r3, #0]
   1bc7a:	2b00      	cmp	r3, #0
   1bc7c:	d00b      	beq.n	1bc96 <vTask_MOTORCONTROL+0x2e2>
   1bc7e:	4b1c      	ldr	r3, [pc, #112]	; (1bcf0 <vTask_MOTORCONTROL+0x33c>)
   1bc80:	4798      	blx	r3
   1bc82:	0002      	movs	r2, r0
   1bc84:	4b4d      	ldr	r3, [pc, #308]	; (1bdbc <vTask_MOTORCONTROL+0x408>)
   1bc86:	681b      	ldr	r3, [r3, #0]
   1bc88:	1ad3      	subs	r3, r2, r3
   1bc8a:	4a4d      	ldr	r2, [pc, #308]	; (1bdc0 <vTask_MOTORCONTROL+0x40c>)
   1bc8c:	4293      	cmp	r3, r2
   1bc8e:	d902      	bls.n	1bc96 <vTask_MOTORCONTROL+0x2e2>
		{
			stopMotorCommandGiven=false;
   1bc90:	4b49      	ldr	r3, [pc, #292]	; (1bdb8 <vTask_MOTORCONTROL+0x404>)
   1bc92:	2200      	movs	r2, #0
   1bc94:	701a      	strb	r2, [r3, #0]
		}
		
		if(singlePhasingTimerOn)
   1bc96:	4b1f      	ldr	r3, [pc, #124]	; (1bd14 <vTask_MOTORCONTROL+0x360>)
   1bc98:	781b      	ldrb	r3, [r3, #0]
   1bc9a:	2b00      	cmp	r3, #0
   1bc9c:	d100      	bne.n	1bca0 <vTask_MOTORCONTROL+0x2ec>
   1bc9e:	e09a      	b.n	1bdd6 <vTask_MOTORCONTROL+0x422>
		{
			bool b;
			if (structThreePhase_state.u8t_phase_ac_state != AC_3PH)
   1bca0:	4b48      	ldr	r3, [pc, #288]	; (1bdc4 <vTask_MOTORCONTROL+0x410>)
   1bca2:	785b      	ldrb	r3, [r3, #1]
   1bca4:	b2db      	uxtb	r3, r3
   1bca6:	2b03      	cmp	r3, #3
   1bca8:	d003      	beq.n	1bcb2 <vTask_MOTORCONTROL+0x2fe>
			{
				b = false;
   1bcaa:	2316      	movs	r3, #22
   1bcac:	18fb      	adds	r3, r7, r3
   1bcae:	2200      	movs	r2, #0
   1bcb0:	701a      	strb	r2, [r3, #0]
			}
			if(!b)		//3 phase pin is low
   1bcb2:	2316      	movs	r3, #22
   1bcb4:	18fb      	adds	r3, r7, r3
   1bcb6:	781b      	ldrb	r3, [r3, #0]
   1bcb8:	2201      	movs	r2, #1
   1bcba:	4053      	eors	r3, r2
   1bcbc:	b2db      	uxtb	r3, r3
   1bcbe:	2b00      	cmp	r3, #0
   1bcc0:	d100      	bne.n	1bcc4 <vTask_MOTORCONTROL+0x310>
   1bcc2:	e085      	b.n	1bdd0 <vTask_MOTORCONTROL+0x41c>
			{
				if(singlePhasingTimerOver())
   1bcc4:	4b40      	ldr	r3, [pc, #256]	; (1bdc8 <vTask_MOTORCONTROL+0x414>)
   1bcc6:	4798      	blx	r3
   1bcc8:	1e03      	subs	r3, r0, #0
   1bcca:	d100      	bne.n	1bcce <vTask_MOTORCONTROL+0x31a>
   1bccc:	e083      	b.n	1bdd6 <vTask_MOTORCONTROL+0x422>
				{
					operateOnSinglePhasing();
   1bcce:	4b3f      	ldr	r3, [pc, #252]	; (1bdcc <vTask_MOTORCONTROL+0x418>)
   1bcd0:	4798      	blx	r3
   1bcd2:	e080      	b.n	1bdd6 <vTask_MOTORCONTROL+0x422>
   1bcd4:	00019681 	.word	0x00019681
   1bcd8:	0001c2dd 	.word	0x0001c2dd
   1bcdc:	0001c3d1 	.word	0x0001c3d1
   1bce0:	0001c4ad 	.word	0x0001c4ad
   1bce4:	200007ec 	.word	0x200007ec
   1bce8:	20000710 	.word	0x20000710
   1bcec:	2000072a 	.word	0x2000072a
   1bcf0:	0001fe3d 	.word	0x0001fe3d
   1bcf4:	20000769 	.word	0x20000769
   1bcf8:	20000868 	.word	0x20000868
   1bcfc:	00018731 	.word	0x00018731
   1bd00:	0001fad9 	.word	0x0001fad9
   1bd04:	20000779 	.word	0x20000779
   1bd08:	20000820 	.word	0x20000820
   1bd0c:	20000786 	.word	0x20000786
   1bd10:	20000764 	.word	0x20000764
   1bd14:	2000077d 	.word	0x2000077d
   1bd18:	200007f8 	.word	0x200007f8
   1bd1c:	20000787 	.word	0x20000787
   1bd20:	20000785 	.word	0x20000785
   1bd24:	20000842 	.word	0x20000842
   1bd28:	20000774 	.word	0x20000774
   1bd2c:	0001a741 	.word	0x0001a741
   1bd30:	0001a7a9 	.word	0x0001a7a9
   1bd34:	0001a70d 	.word	0x0001a70d
   1bd38:	20000798 	.word	0x20000798
   1bd3c:	0001a039 	.word	0x0001a039
   1bd40:	2000072c 	.word	0x2000072c
   1bd44:	200007c4 	.word	0x200007c4
   1bd48:	2000023c 	.word	0x2000023c
   1bd4c:	20000240 	.word	0x20000240
   1bd50:	20000638 	.word	0x20000638
   1bd54:	20000714 	.word	0x20000714
   1bd58:	200007d8 	.word	0x200007d8
   1bd5c:	0001aabd 	.word	0x0001aabd
   1bd60:	20000248 	.word	0x20000248
   1bd64:	0001f1d1 	.word	0x0001f1d1
   1bd68:	2000024c 	.word	0x2000024c
   1bd6c:	0001fb35 	.word	0x0001fb35
   1bd70:	0001ed31 	.word	0x0001ed31
   1bd74:	20000242 	.word	0x20000242
   1bd78:	000088b8 	.word	0x000088b8
   1bd7c:	20000776 	.word	0x20000776
   1bd80:	2000083c 	.word	0x2000083c
   1bd84:	0001ab69 	.word	0x0001ab69
   1bd88:	0001c5b9 	.word	0x0001c5b9
   1bd8c:	00019f5d 	.word	0x00019f5d
   1bd90:	00019f79 	.word	0x00019f79
   1bd94:	0001a289 	.word	0x0001a289
   1bd98:	0001a6dd 	.word	0x0001a6dd
   1bd9c:	0001a4a5 	.word	0x0001a4a5
   1bda0:	20000660 	.word	0x20000660
   1bda4:	0001a995 	.word	0x0001a995
   1bda8:	0001b775 	.word	0x0001b775
   1bdac:	200007ed 	.word	0x200007ed
   1bdb0:	0001aea5 	.word	0x0001aea5
   1bdb4:	0001ad75 	.word	0x0001ad75
   1bdb8:	20000840 	.word	0x20000840
   1bdbc:	20000794 	.word	0x20000794
   1bdc0:	00001388 	.word	0x00001388
   1bdc4:	20000740 	.word	0x20000740
   1bdc8:	0001b205 	.word	0x0001b205
   1bdcc:	0001b251 	.word	0x0001b251
				}
			}
			else
			{
				singlePhasingTimerOn=false;
   1bdd0:	4b15      	ldr	r3, [pc, #84]	; (1be28 <vTask_MOTORCONTROL+0x474>)
   1bdd2:	2200      	movs	r2, #0
   1bdd4:	701a      	strb	r2, [r3, #0]
			}
		}
		if (startTimerOn)
   1bdd6:	4b15      	ldr	r3, [pc, #84]	; (1be2c <vTask_MOTORCONTROL+0x478>)
   1bdd8:	781b      	ldrb	r3, [r3, #0]
   1bdda:	2b00      	cmp	r3, #0
   1bddc:	d007      	beq.n	1bdee <vTask_MOTORCONTROL+0x43a>
		{
			if (startMotorTimerOver())
   1bdde:	4b14      	ldr	r3, [pc, #80]	; (1be30 <vTask_MOTORCONTROL+0x47c>)
   1bde0:	4798      	blx	r3
   1bde2:	1e03      	subs	r3, r0, #0
   1bde4:	d003      	beq.n	1bdee <vTask_MOTORCONTROL+0x43a>
			{
				startMotor(false,false);
   1bde6:	2100      	movs	r1, #0
   1bde8:	2000      	movs	r0, #0
   1bdea:	4b12      	ldr	r3, [pc, #72]	; (1be34 <vTask_MOTORCONTROL+0x480>)
   1bdec:	4798      	blx	r3
			}
		}
		if (startSequenceOn)
   1bdee:	4b12      	ldr	r3, [pc, #72]	; (1be38 <vTask_MOTORCONTROL+0x484>)
   1bdf0:	781b      	ldrb	r3, [r3, #0]
   1bdf2:	2b00      	cmp	r3, #0
   1bdf4:	d001      	beq.n	1bdfa <vTask_MOTORCONTROL+0x446>
		{
			terminateStartRelay();
   1bdf6:	4b11      	ldr	r3, [pc, #68]	; (1be3c <vTask_MOTORCONTROL+0x488>)
   1bdf8:	4798      	blx	r3
		}
		if(starDeltaTimerOn)
   1bdfa:	4b11      	ldr	r3, [pc, #68]	; (1be40 <vTask_MOTORCONTROL+0x48c>)
   1bdfc:	781b      	ldrb	r3, [r3, #0]
   1bdfe:	2b00      	cmp	r3, #0
   1be00:	d001      	beq.n	1be06 <vTask_MOTORCONTROL+0x452>
		{
			terminateStarDeltaTimer();
   1be02:	4b10      	ldr	r3, [pc, #64]	; (1be44 <vTask_MOTORCONTROL+0x490>)
   1be04:	4798      	blx	r3
		}
		if(stopSequenceOn)
   1be06:	4b10      	ldr	r3, [pc, #64]	; (1be48 <vTask_MOTORCONTROL+0x494>)
   1be08:	781b      	ldrb	r3, [r3, #0]
   1be0a:	2b00      	cmp	r3, #0
   1be0c:	d001      	beq.n	1be12 <vTask_MOTORCONTROL+0x45e>
		{
			terminateStopRelay();
   1be0e:	4b0f      	ldr	r3, [pc, #60]	; (1be4c <vTask_MOTORCONTROL+0x498>)
   1be10:	4798      	blx	r3
		}
		
		SIMEventManager();
   1be12:	4b0f      	ldr	r3, [pc, #60]	; (1be50 <vTask_MOTORCONTROL+0x49c>)
   1be14:	4798      	blx	r3
		if (factory_settings_parameter_struct.ENABLE_M2M)
   1be16:	4b0f      	ldr	r3, [pc, #60]	; (1be54 <vTask_MOTORCONTROL+0x4a0>)
   1be18:	78db      	ldrb	r3, [r3, #3]
   1be1a:	2b00      	cmp	r3, #0
   1be1c:	d100      	bne.n	1be20 <vTask_MOTORCONTROL+0x46c>
   1be1e:	e698      	b.n	1bb52 <vTask_MOTORCONTROL+0x19e>
		{
			M2MEventManager();
   1be20:	4b0d      	ldr	r3, [pc, #52]	; (1be58 <vTask_MOTORCONTROL+0x4a4>)
   1be22:	4798      	blx	r3
		xSemaphoreTake(xButton_Semaphore, portMAX_DELAY);
   1be24:	e695      	b.n	1bb52 <vTask_MOTORCONTROL+0x19e>
   1be26:	46c0      	nop			; (mov r8, r8)
   1be28:	2000077d 	.word	0x2000077d
   1be2c:	20000786 	.word	0x20000786
   1be30:	0001b19d 	.word	0x0001b19d
   1be34:	0001aef1 	.word	0x0001aef1
   1be38:	20000785 	.word	0x20000785
   1be3c:	0001b3d1 	.word	0x0001b3d1
   1be40:	20000787 	.word	0x20000787
   1be44:	0001b361 	.word	0x0001b361
   1be48:	20000774 	.word	0x20000774
   1be4c:	0001b28d 	.word	0x0001b28d
   1be50:	0001b6dd 	.word	0x0001b6dd
   1be54:	20000638 	.word	0x20000638
   1be58:	0001b699 	.word	0x0001b699

0001be5c <start_motor_service>:
		}
	}
}

void start_motor_service(void)
{
   1be5c:	b590      	push	{r4, r7, lr}
   1be5e:	b08b      	sub	sp, #44	; 0x2c
   1be60:	af02      	add	r7, sp, #8
	struct extint_chan_conf config_extint_chan_isr;
	extint_chan_get_config_defaults(&config_extint_chan_isr);
   1be62:	2314      	movs	r3, #20
   1be64:	18fb      	adds	r3, r7, r3
   1be66:	0018      	movs	r0, r3
   1be68:	4bad      	ldr	r3, [pc, #692]	; (1c120 <start_motor_service+0x2c4>)
   1be6a:	4798      	blx	r3
	config_extint_chan_isr.gpio_pin           = PIN_PB11A_EIC_EXTINT11;
   1be6c:	2314      	movs	r3, #20
   1be6e:	18fb      	adds	r3, r7, r3
   1be70:	222b      	movs	r2, #43	; 0x2b
   1be72:	601a      	str	r2, [r3, #0]
	config_extint_chan_isr.gpio_pin_mux       = MUX_PB11A_EIC_EXTINT11;
   1be74:	2314      	movs	r3, #20
   1be76:	18fb      	adds	r3, r7, r3
   1be78:	2200      	movs	r2, #0
   1be7a:	605a      	str	r2, [r3, #4]
	config_extint_chan_isr.gpio_pin_pull      = EXTINT_PULL_UP;
   1be7c:	2314      	movs	r3, #20
   1be7e:	18fb      	adds	r3, r7, r3
   1be80:	2201      	movs	r2, #1
   1be82:	721a      	strb	r2, [r3, #8]
	config_extint_chan_isr.detection_criteria = EXTINT_DETECT_RISING;
   1be84:	2314      	movs	r3, #20
   1be86:	18fb      	adds	r3, r7, r3
   1be88:	2201      	movs	r2, #1
   1be8a:	72da      	strb	r2, [r3, #11]
	config_extint_chan_isr.wake_if_sleeping   = false;
   1be8c:	2314      	movs	r3, #20
   1be8e:	18fb      	adds	r3, r7, r3
   1be90:	2200      	movs	r2, #0
   1be92:	725a      	strb	r2, [r3, #9]
	extint_chan_set_config(11, &config_extint_chan_isr);
   1be94:	2314      	movs	r3, #20
   1be96:	18fb      	adds	r3, r7, r3
   1be98:	0019      	movs	r1, r3
   1be9a:	200b      	movs	r0, #11
   1be9c:	4ba1      	ldr	r3, [pc, #644]	; (1c124 <start_motor_service+0x2c8>)
   1be9e:	4798      	blx	r3
	
	extint_register_callback(PR2_ISR,11,EXTINT_CALLBACK_TYPE_DETECT);
   1bea0:	4ba1      	ldr	r3, [pc, #644]	; (1c128 <start_motor_service+0x2cc>)
   1bea2:	2200      	movs	r2, #0
   1bea4:	210b      	movs	r1, #11
   1bea6:	0018      	movs	r0, r3
   1bea8:	4ba0      	ldr	r3, [pc, #640]	; (1c12c <start_motor_service+0x2d0>)
   1beaa:	4798      	blx	r3
	extint_chan_enable_callback(11,EXTINT_CALLBACK_TYPE_DETECT);
   1beac:	2100      	movs	r1, #0
   1beae:	200b      	movs	r0, #11
   1beb0:	4b9f      	ldr	r3, [pc, #636]	; (1c130 <start_motor_service+0x2d4>)
   1beb2:	4798      	blx	r3
	
	struct port_config pin_confg;
	port_get_config_defaults(&pin_confg);
   1beb4:	2310      	movs	r3, #16
   1beb6:	18fb      	adds	r3, r7, r3
   1beb8:	0018      	movs	r0, r3
   1beba:	4b9e      	ldr	r3, [pc, #632]	; (1c134 <start_motor_service+0x2d8>)
   1bebc:	4798      	blx	r3
	pin_confg.direction = PORT_PIN_DIR_INPUT;
   1bebe:	2310      	movs	r3, #16
   1bec0:	18fb      	adds	r3, r7, r3
   1bec2:	2200      	movs	r2, #0
   1bec4:	701a      	strb	r2, [r3, #0]
	pin_confg.input_pull = PORT_PIN_PULL_UP;
   1bec6:	2310      	movs	r3, #16
   1bec8:	18fb      	adds	r3, r7, r3
   1beca:	2201      	movs	r2, #1
   1becc:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(PR1_PIN, &pin_confg);
   1bece:	2310      	movs	r3, #16
   1bed0:	18fb      	adds	r3, r7, r3
   1bed2:	0019      	movs	r1, r3
   1bed4:	202a      	movs	r0, #42	; 0x2a
   1bed6:	4b98      	ldr	r3, [pc, #608]	; (1c138 <start_motor_service+0x2dc>)
   1bed8:	4798      	blx	r3
	
	//Transferring the below statement from LCD_SERVICE to here, as it solves the problem of the device hanging.
	// Whenever xSemaphoreTake is executed on xADC_Semaphore in task other than which xADC_Semaphore is defined in, than the MCU hangs.
	vSemaphoreCreateBinary(xADC_Semaphore);
   1beda:	2203      	movs	r2, #3
   1bedc:	2100      	movs	r1, #0
   1bede:	2001      	movs	r0, #1
   1bee0:	4b96      	ldr	r3, [pc, #600]	; (1c13c <start_motor_service+0x2e0>)
   1bee2:	4798      	blx	r3
   1bee4:	0002      	movs	r2, r0
   1bee6:	4b96      	ldr	r3, [pc, #600]	; (1c140 <start_motor_service+0x2e4>)
   1bee8:	601a      	str	r2, [r3, #0]
   1beea:	4b95      	ldr	r3, [pc, #596]	; (1c140 <start_motor_service+0x2e4>)
   1beec:	681b      	ldr	r3, [r3, #0]
   1beee:	2b00      	cmp	r3, #0
   1bef0:	d006      	beq.n	1bf00 <start_motor_service+0xa4>
   1bef2:	4b93      	ldr	r3, [pc, #588]	; (1c140 <start_motor_service+0x2e4>)
   1bef4:	6818      	ldr	r0, [r3, #0]
   1bef6:	2300      	movs	r3, #0
   1bef8:	2200      	movs	r2, #0
   1befa:	2100      	movs	r1, #0
   1befc:	4c91      	ldr	r4, [pc, #580]	; (1c144 <start_motor_service+0x2e8>)
   1befe:	47a0      	blx	r4
	
	vSemaphoreCreateBinary(xButton_Semaphore);
   1bf00:	2203      	movs	r2, #3
   1bf02:	2100      	movs	r1, #0
   1bf04:	2001      	movs	r0, #1
   1bf06:	4b8d      	ldr	r3, [pc, #564]	; (1c13c <start_motor_service+0x2e0>)
   1bf08:	4798      	blx	r3
   1bf0a:	0002      	movs	r2, r0
   1bf0c:	4b8e      	ldr	r3, [pc, #568]	; (1c148 <start_motor_service+0x2ec>)
   1bf0e:	601a      	str	r2, [r3, #0]
   1bf10:	4b8d      	ldr	r3, [pc, #564]	; (1c148 <start_motor_service+0x2ec>)
   1bf12:	681b      	ldr	r3, [r3, #0]
   1bf14:	2b00      	cmp	r3, #0
   1bf16:	d006      	beq.n	1bf26 <start_motor_service+0xca>
   1bf18:	4b8b      	ldr	r3, [pc, #556]	; (1c148 <start_motor_service+0x2ec>)
   1bf1a:	6818      	ldr	r0, [r3, #0]
   1bf1c:	2300      	movs	r3, #0
   1bf1e:	2200      	movs	r2, #0
   1bf20:	2100      	movs	r1, #0
   1bf22:	4c88      	ldr	r4, [pc, #544]	; (1c144 <start_motor_service+0x2e8>)
   1bf24:	47a0      	blx	r4
	
	////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////
	struct port_config config_pins;
	port_get_config_defaults(&config_pins);
   1bf26:	230c      	movs	r3, #12
   1bf28:	18fb      	adds	r3, r7, r3
   1bf2a:	0018      	movs	r0, r3
   1bf2c:	4b81      	ldr	r3, [pc, #516]	; (1c134 <start_motor_service+0x2d8>)
   1bf2e:	4798      	blx	r3
	
	config_pins.direction = PORT_PIN_DIR_OUTPUT;
   1bf30:	230c      	movs	r3, #12
   1bf32:	18fb      	adds	r3, r7, r3
   1bf34:	2201      	movs	r2, #1
   1bf36:	701a      	strb	r2, [r3, #0]
	config_pins.input_pull = PORT_PIN_PULL_NONE;
   1bf38:	230c      	movs	r3, #12
   1bf3a:	18fb      	adds	r3, r7, r3
   1bf3c:	2200      	movs	r2, #0
   1bf3e:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(START_RELAY_PIN,&config_pins);
   1bf40:	230c      	movs	r3, #12
   1bf42:	18fb      	adds	r3, r7, r3
   1bf44:	0019      	movs	r1, r3
   1bf46:	202d      	movs	r0, #45	; 0x2d
   1bf48:	4b7b      	ldr	r3, [pc, #492]	; (1c138 <start_motor_service+0x2dc>)
   1bf4a:	4798      	blx	r3
	port_pin_set_config(STOP_RELAY_PIN,&config_pins);
   1bf4c:	230c      	movs	r3, #12
   1bf4e:	18fb      	adds	r3, r7, r3
   1bf50:	0019      	movs	r1, r3
   1bf52:	202c      	movs	r0, #44	; 0x2c
   1bf54:	4b78      	ldr	r3, [pc, #480]	; (1c138 <start_motor_service+0x2dc>)
   1bf56:	4798      	blx	r3
	port_pin_set_config(AUTO_ON_LED_PIN,&config_pins);
   1bf58:	230c      	movs	r3, #12
   1bf5a:	18fb      	adds	r3, r7, r3
   1bf5c:	0019      	movs	r1, r3
   1bf5e:	2028      	movs	r0, #40	; 0x28
   1bf60:	4b75      	ldr	r3, [pc, #468]	; (1c138 <start_motor_service+0x2dc>)
   1bf62:	4798      	blx	r3
	port_pin_set_config(THREEPHASE_OK_LED_PIN,&config_pins);
   1bf64:	230c      	movs	r3, #12
   1bf66:	18fb      	adds	r3, r7, r3
   1bf68:	0019      	movs	r1, r3
   1bf6a:	2027      	movs	r0, #39	; 0x27
   1bf6c:	4b72      	ldr	r3, [pc, #456]	; (1c138 <start_motor_service+0x2dc>)
   1bf6e:	4798      	blx	r3
	port_pin_set_config(MOTOR_ON_LED_PIN,&config_pins);
   1bf70:	230c      	movs	r3, #12
   1bf72:	18fb      	adds	r3, r7, r3
   1bf74:	0019      	movs	r1, r3
   1bf76:	2005      	movs	r0, #5
   1bf78:	4b6f      	ldr	r3, [pc, #444]	; (1c138 <start_motor_service+0x2dc>)
   1bf7a:	4798      	blx	r3
	
	AUTO_ON_LED_OFF;
   1bf7c:	2101      	movs	r1, #1
   1bf7e:	2028      	movs	r0, #40	; 0x28
   1bf80:	4b72      	ldr	r3, [pc, #456]	; (1c14c <start_motor_service+0x2f0>)
   1bf82:	4798      	blx	r3
	MOTOR_ON_LED_OFF;
   1bf84:	2101      	movs	r1, #1
   1bf86:	2005      	movs	r0, #5
   1bf88:	4b70      	ldr	r3, [pc, #448]	; (1c14c <start_motor_service+0x2f0>)
   1bf8a:	4798      	blx	r3
	THREEPHASE_OK_LED_OFF;
   1bf8c:	2101      	movs	r1, #1
   1bf8e:	2027      	movs	r0, #39	; 0x27
   1bf90:	4b6e      	ldr	r3, [pc, #440]	; (1c14c <start_motor_service+0x2f0>)
   1bf92:	4798      	blx	r3
	//port_pin_set_config(PIN_MOTOR_FEEDBACK,&config_pins);
	
	
	
	struct extint_chan_conf config_extint_chan;
	extint_chan_get_config_defaults(&config_extint_chan);
   1bf94:	003b      	movs	r3, r7
   1bf96:	0018      	movs	r0, r3
   1bf98:	4b61      	ldr	r3, [pc, #388]	; (1c120 <start_motor_service+0x2c4>)
   1bf9a:	4798      	blx	r3
	
	config_extint_chan.gpio_pin = MOTOR_FEEDBACK_EIC_PIN;
   1bf9c:	003b      	movs	r3, r7
   1bf9e:	222e      	movs	r2, #46	; 0x2e
   1bfa0:	601a      	str	r2, [r3, #0]
	config_extint_chan.gpio_pin_mux = MOTOR_FEEDBACK_EIC_MUX;
   1bfa2:	003b      	movs	r3, r7
   1bfa4:	2200      	movs	r2, #0
   1bfa6:	605a      	str	r2, [r3, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_NONE;
   1bfa8:	003b      	movs	r3, r7
   1bfaa:	2200      	movs	r2, #0
   1bfac:	721a      	strb	r2, [r3, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_BOTH;
   1bfae:	003b      	movs	r3, r7
   1bfb0:	2203      	movs	r2, #3
   1bfb2:	72da      	strb	r2, [r3, #11]
	extint_chan_set_config(MOTOR_FEEDBACK_EIC_LINE, &config_extint_chan);
   1bfb4:	003b      	movs	r3, r7
   1bfb6:	0019      	movs	r1, r3
   1bfb8:	200e      	movs	r0, #14
   1bfba:	4b5a      	ldr	r3, [pc, #360]	; (1c124 <start_motor_service+0x2c8>)
   1bfbc:	4798      	blx	r3
	
	extint_chan_enable_callback(MOTOR_FEEDBACK_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
   1bfbe:	2100      	movs	r1, #0
   1bfc0:	200e      	movs	r0, #14
   1bfc2:	4b5b      	ldr	r3, [pc, #364]	; (1c130 <start_motor_service+0x2d4>)
   1bfc4:	4798      	blx	r3
	extint_register_callback(motor_feedback_callback,MOTOR_FEEDBACK_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
   1bfc6:	4b62      	ldr	r3, [pc, #392]	; (1c150 <start_motor_service+0x2f4>)
   1bfc8:	2200      	movs	r2, #0
   1bfca:	210e      	movs	r1, #14
   1bfcc:	0018      	movs	r0, r3
   1bfce:	4b57      	ldr	r3, [pc, #348]	; (1c12c <start_motor_service+0x2d0>)
   1bfd0:	4798      	blx	r3
	
	//////////////////////////////////////////////////////////////////////////
	
	config_extint_chan.gpio_pin = START_BUTTON_EIC_PIN;
   1bfd2:	003b      	movs	r3, r7
   1bfd4:	2226      	movs	r2, #38	; 0x26
   1bfd6:	601a      	str	r2, [r3, #0]
	config_extint_chan.gpio_pin_mux = START_BUTTON_EIC_MUX;
   1bfd8:	003b      	movs	r3, r7
   1bfda:	2200      	movs	r2, #0
   1bfdc:	605a      	str	r2, [r3, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
   1bfde:	003b      	movs	r3, r7
   1bfe0:	2201      	movs	r2, #1
   1bfe2:	721a      	strb	r2, [r3, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
   1bfe4:	003b      	movs	r3, r7
   1bfe6:	2202      	movs	r2, #2
   1bfe8:	72da      	strb	r2, [r3, #11]
	extint_chan_set_config(START_BUTTON_EIC_LINE, &config_extint_chan);
   1bfea:	003b      	movs	r3, r7
   1bfec:	0019      	movs	r1, r3
   1bfee:	2006      	movs	r0, #6
   1bff0:	4b4c      	ldr	r3, [pc, #304]	; (1c124 <start_motor_service+0x2c8>)
   1bff2:	4798      	blx	r3
	
	extint_chan_enable_callback(START_BUTTON_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
   1bff4:	2100      	movs	r1, #0
   1bff6:	2006      	movs	r0, #6
   1bff8:	4b4d      	ldr	r3, [pc, #308]	; (1c130 <start_motor_service+0x2d4>)
   1bffa:	4798      	blx	r3
	extint_register_callback(button_detect_pin_callback,START_BUTTON_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
   1bffc:	4b55      	ldr	r3, [pc, #340]	; (1c154 <start_motor_service+0x2f8>)
   1bffe:	2200      	movs	r2, #0
   1c000:	2106      	movs	r1, #6
   1c002:	0018      	movs	r0, r3
   1c004:	4b49      	ldr	r3, [pc, #292]	; (1c12c <start_motor_service+0x2d0>)
   1c006:	4798      	blx	r3
	//////////////////////////////////////////////////////////////////////////
	config_extint_chan.gpio_pin = STOP_BUTTON_EIC_PIN;
   1c008:	003b      	movs	r3, r7
   1c00a:	2225      	movs	r2, #37	; 0x25
   1c00c:	601a      	str	r2, [r3, #0]
	config_extint_chan.gpio_pin_mux = STOP_BUTTON_EIC_MUX;
   1c00e:	003b      	movs	r3, r7
   1c010:	2200      	movs	r2, #0
   1c012:	605a      	str	r2, [r3, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
   1c014:	003b      	movs	r3, r7
   1c016:	2201      	movs	r2, #1
   1c018:	721a      	strb	r2, [r3, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
   1c01a:	003b      	movs	r3, r7
   1c01c:	2202      	movs	r2, #2
   1c01e:	72da      	strb	r2, [r3, #11]
	extint_chan_set_config(STOP_BUTTON_EIC_LINE, &config_extint_chan);
   1c020:	003b      	movs	r3, r7
   1c022:	0019      	movs	r1, r3
   1c024:	2005      	movs	r0, #5
   1c026:	4b3f      	ldr	r3, [pc, #252]	; (1c124 <start_motor_service+0x2c8>)
   1c028:	4798      	blx	r3
	extint_chan_enable_callback(STOP_BUTTON_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
   1c02a:	2100      	movs	r1, #0
   1c02c:	2005      	movs	r0, #5
   1c02e:	4b40      	ldr	r3, [pc, #256]	; (1c130 <start_motor_service+0x2d4>)
   1c030:	4798      	blx	r3
	extint_register_callback(button_detect_pin_callback,STOP_BUTTON_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
   1c032:	4b48      	ldr	r3, [pc, #288]	; (1c154 <start_motor_service+0x2f8>)
   1c034:	2200      	movs	r2, #0
   1c036:	2105      	movs	r1, #5
   1c038:	0018      	movs	r0, r3
   1c03a:	4b3c      	ldr	r3, [pc, #240]	; (1c12c <start_motor_service+0x2d0>)
   1c03c:	4798      	blx	r3
	//////////////////////////////////////////////////////////////////////////
	config_extint_chan.gpio_pin = AUTO_BUTTON_EIC_PIN;
   1c03e:	003b      	movs	r3, r7
   1c040:	221c      	movs	r2, #28
   1c042:	601a      	str	r2, [r3, #0]
	config_extint_chan.gpio_pin_mux = AUTO_BUTTON_EIC_MUX;
   1c044:	003b      	movs	r3, r7
   1c046:	2200      	movs	r2, #0
   1c048:	605a      	str	r2, [r3, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
   1c04a:	003b      	movs	r3, r7
   1c04c:	2201      	movs	r2, #1
   1c04e:	721a      	strb	r2, [r3, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
   1c050:	003b      	movs	r3, r7
   1c052:	2202      	movs	r2, #2
   1c054:	72da      	strb	r2, [r3, #11]
	extint_chan_set_config(AUTO_BUTTON_EIC_LINE, &config_extint_chan);
   1c056:	003b      	movs	r3, r7
   1c058:	0019      	movs	r1, r3
   1c05a:	2008      	movs	r0, #8
   1c05c:	4b31      	ldr	r3, [pc, #196]	; (1c124 <start_motor_service+0x2c8>)
   1c05e:	4798      	blx	r3
	extint_chan_enable_callback(AUTO_BUTTON_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
   1c060:	2100      	movs	r1, #0
   1c062:	2008      	movs	r0, #8
   1c064:	4b32      	ldr	r3, [pc, #200]	; (1c130 <start_motor_service+0x2d4>)
   1c066:	4798      	blx	r3
	extint_register_callback(button_detect_pin_callback,AUTO_BUTTON_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
   1c068:	4b3a      	ldr	r3, [pc, #232]	; (1c154 <start_motor_service+0x2f8>)
   1c06a:	2200      	movs	r2, #0
   1c06c:	2108      	movs	r1, #8
   1c06e:	0018      	movs	r0, r3
   1c070:	4b2e      	ldr	r3, [pc, #184]	; (1c12c <start_motor_service+0x2d0>)
   1c072:	4798      	blx	r3
	//////////////////////////////////////////////////////////////////////////
	config_extint_chan.gpio_pin = LCD_SHOW_BUTTON_EIC_PIN;
   1c074:	003b      	movs	r3, r7
   1c076:	2229      	movs	r2, #41	; 0x29
   1c078:	601a      	str	r2, [r3, #0]
	config_extint_chan.gpio_pin_mux = LCD_SHOW_BUTTON_EIC_MUX;
   1c07a:	003b      	movs	r3, r7
   1c07c:	2200      	movs	r2, #0
   1c07e:	605a      	str	r2, [r3, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
   1c080:	003b      	movs	r3, r7
   1c082:	2201      	movs	r2, #1
   1c084:	721a      	strb	r2, [r3, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
   1c086:	003b      	movs	r3, r7
   1c088:	2202      	movs	r2, #2
   1c08a:	72da      	strb	r2, [r3, #11]
	extint_chan_set_config(LCD_SHOW_BUTTON_EIC_LINE, &config_extint_chan);
   1c08c:	003b      	movs	r3, r7
   1c08e:	0019      	movs	r1, r3
   1c090:	2009      	movs	r0, #9
   1c092:	4b24      	ldr	r3, [pc, #144]	; (1c124 <start_motor_service+0x2c8>)
   1c094:	4798      	blx	r3
	extint_chan_enable_callback(LCD_SHOW_BUTTON_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
   1c096:	2100      	movs	r1, #0
   1c098:	2009      	movs	r0, #9
   1c09a:	4b25      	ldr	r3, [pc, #148]	; (1c130 <start_motor_service+0x2d4>)
   1c09c:	4798      	blx	r3
	extint_register_callback(button_detect_pin_callback,LCD_SHOW_BUTTON_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
   1c09e:	4b2d      	ldr	r3, [pc, #180]	; (1c154 <start_motor_service+0x2f8>)
   1c0a0:	2200      	movs	r2, #0
   1c0a2:	2109      	movs	r1, #9
   1c0a4:	0018      	movs	r0, r3
   1c0a6:	4b21      	ldr	r3, [pc, #132]	; (1c12c <start_motor_service+0x2d0>)
   1c0a8:	4798      	blx	r3
	////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////
	
	xTaskCreate(vTask_10ms_Timer,NULL,configMINIMAL_STACK_SIZE, NULL,1,NULL);
   1c0aa:	482b      	ldr	r0, [pc, #172]	; (1c158 <start_motor_service+0x2fc>)
   1c0ac:	2300      	movs	r3, #0
   1c0ae:	9301      	str	r3, [sp, #4]
   1c0b0:	2301      	movs	r3, #1
   1c0b2:	9300      	str	r3, [sp, #0]
   1c0b4:	2300      	movs	r3, #0
   1c0b6:	2282      	movs	r2, #130	; 0x82
   1c0b8:	2100      	movs	r1, #0
   1c0ba:	4c28      	ldr	r4, [pc, #160]	; (1c15c <start_motor_service+0x300>)
   1c0bc:	47a0      	blx	r4
	xTaskCreate(vTask_100ms_Timer,NULL,configMINIMAL_STACK_SIZE, NULL,1,NULL);
   1c0be:	4828      	ldr	r0, [pc, #160]	; (1c160 <start_motor_service+0x304>)
   1c0c0:	2300      	movs	r3, #0
   1c0c2:	9301      	str	r3, [sp, #4]
   1c0c4:	2301      	movs	r3, #1
   1c0c6:	9300      	str	r3, [sp, #0]
   1c0c8:	2300      	movs	r3, #0
   1c0ca:	2282      	movs	r2, #130	; 0x82
   1c0cc:	2100      	movs	r1, #0
   1c0ce:	4c23      	ldr	r4, [pc, #140]	; (1c15c <start_motor_service+0x300>)
   1c0d0:	47a0      	blx	r4
	xTaskCreate(vTask_50ms_Timer,NULL,configMINIMAL_STACK_SIZE, NULL,1,&fiftymsTask);
   1c0d2:	4824      	ldr	r0, [pc, #144]	; (1c164 <start_motor_service+0x308>)
   1c0d4:	4b24      	ldr	r3, [pc, #144]	; (1c168 <start_motor_service+0x30c>)
   1c0d6:	9301      	str	r3, [sp, #4]
   1c0d8:	2301      	movs	r3, #1
   1c0da:	9300      	str	r3, [sp, #0]
   1c0dc:	2300      	movs	r3, #0
   1c0de:	2282      	movs	r2, #130	; 0x82
   1c0e0:	2100      	movs	r1, #0
   1c0e2:	4c1e      	ldr	r4, [pc, #120]	; (1c15c <start_motor_service+0x300>)
   1c0e4:	47a0      	blx	r4
	
	if(factory_settings_parameter_struct.ENABLE_WATER)
   1c0e6:	4b21      	ldr	r3, [pc, #132]	; (1c16c <start_motor_service+0x310>)
   1c0e8:	795b      	ldrb	r3, [r3, #5]
   1c0ea:	2b00      	cmp	r3, #0
   1c0ec:	d00a      	beq.n	1c104 <start_motor_service+0x2a8>
	{
		xTaskCreate(Water_Level_Task,NULL,(uint16_t)700,NULL,1,NULL);
   1c0ee:	23af      	movs	r3, #175	; 0xaf
   1c0f0:	009a      	lsls	r2, r3, #2
   1c0f2:	481f      	ldr	r0, [pc, #124]	; (1c170 <start_motor_service+0x314>)
   1c0f4:	2300      	movs	r3, #0
   1c0f6:	9301      	str	r3, [sp, #4]
   1c0f8:	2301      	movs	r3, #1
   1c0fa:	9300      	str	r3, [sp, #0]
   1c0fc:	2300      	movs	r3, #0
   1c0fe:	2100      	movs	r1, #0
   1c100:	4c16      	ldr	r4, [pc, #88]	; (1c15c <start_motor_service+0x300>)
   1c102:	47a0      	blx	r4
	}
	
	xTaskCreate(vTask_MOTORCONTROL,NULL,(uint16_t)750,NULL,1, &motorTask);
   1c104:	4a1b      	ldr	r2, [pc, #108]	; (1c174 <start_motor_service+0x318>)
   1c106:	481c      	ldr	r0, [pc, #112]	; (1c178 <start_motor_service+0x31c>)
   1c108:	4b1c      	ldr	r3, [pc, #112]	; (1c17c <start_motor_service+0x320>)
   1c10a:	9301      	str	r3, [sp, #4]
   1c10c:	2301      	movs	r3, #1
   1c10e:	9300      	str	r3, [sp, #0]
   1c110:	2300      	movs	r3, #0
   1c112:	2100      	movs	r1, #0
   1c114:	4c11      	ldr	r4, [pc, #68]	; (1c15c <start_motor_service+0x300>)
   1c116:	47a0      	blx	r4

}
   1c118:	46c0      	nop			; (mov r8, r8)
   1c11a:	46bd      	mov	sp, r7
   1c11c:	b009      	add	sp, #36	; 0x24
   1c11e:	bd90      	pop	{r4, r7, pc}
   1c120:	0001daf9 	.word	0x0001daf9
   1c124:	0001db2d 	.word	0x0001db2d
   1c128:	00019c51 	.word	0x00019c51
   1c12c:	00021fed 	.word	0x00021fed
   1c130:	00022051 	.word	0x00022051
   1c134:	00018bd9 	.word	0x00018bd9
   1c138:	00022b61 	.word	0x00022b61
   1c13c:	0001ec75 	.word	0x0001ec75
   1c140:	20000244 	.word	0x20000244
   1c144:	0001ed31 	.word	0x0001ed31
   1c148:	20000248 	.word	0x20000248
   1c14c:	00018c41 	.word	0x00018c41
   1c150:	0001c47d 	.word	0x0001c47d
   1c154:	0001b9a1 	.word	0x0001b9a1
   1c158:	00019e69 	.word	0x00019e69
   1c15c:	0001f799 	.word	0x0001f799
   1c160:	00019ed5 	.word	0x00019ed5
   1c164:	0001c78d 	.word	0x0001c78d
   1c168:	20000254 	.word	0x20000254
   1c16c:	20000638 	.word	0x20000638
   1c170:	000190c9 	.word	0x000190c9
   1c174:	000002ee 	.word	0x000002ee
   1c178:	0001b9b5 	.word	0x0001b9b5
   1c17c:	20000250 	.word	0x20000250

0001c180 <motor_checkSleepElligible>:

bool motor_checkSleepElligible(void)
{
   1c180:	b580      	push	{r7, lr}
   1c182:	b082      	sub	sp, #8
   1c184:	af00      	add	r7, sp, #0
	uint8_t j = 0;
   1c186:	1dfb      	adds	r3, r7, #7
   1c188:	2200      	movs	r2, #0
   1c18a:	701a      	strb	r2, [r3, #0]
	if (factory_settings_parameter_struct.ENABLE_WATER)
   1c18c:	4b48      	ldr	r3, [pc, #288]	; (1c2b0 <motor_checkSleepElligible+0x130>)
   1c18e:	795b      	ldrb	r3, [r3, #5]
   1c190:	2b00      	cmp	r3, #0
   1c192:	d00b      	beq.n	1c1ac <motor_checkSleepElligible+0x2c>
	{
		if (factory_settings_parameter_struct.ENABLE_GP)
   1c194:	4b46      	ldr	r3, [pc, #280]	; (1c2b0 <motor_checkSleepElligible+0x130>)
   1c196:	791b      	ldrb	r3, [r3, #4]
   1c198:	2b00      	cmp	r3, #0
   1c19a:	d003      	beq.n	1c1a4 <motor_checkSleepElligible+0x24>
		{
			j = 19;
   1c19c:	1dfb      	adds	r3, r7, #7
   1c19e:	2213      	movs	r2, #19
   1c1a0:	701a      	strb	r2, [r3, #0]
   1c1a2:	e00e      	b.n	1c1c2 <motor_checkSleepElligible+0x42>
		}
		else
		{
			j = 17;
   1c1a4:	1dfb      	adds	r3, r7, #7
   1c1a6:	2211      	movs	r2, #17
   1c1a8:	701a      	strb	r2, [r3, #0]
   1c1aa:	e00a      	b.n	1c1c2 <motor_checkSleepElligible+0x42>
		}
	}
	else
	{
		if (factory_settings_parameter_struct.ENABLE_CURRENT)
   1c1ac:	4b40      	ldr	r3, [pc, #256]	; (1c2b0 <motor_checkSleepElligible+0x130>)
   1c1ae:	785b      	ldrb	r3, [r3, #1]
   1c1b0:	2b00      	cmp	r3, #0
   1c1b2:	d003      	beq.n	1c1bc <motor_checkSleepElligible+0x3c>
		{
			j = 14;
   1c1b4:	1dfb      	adds	r3, r7, #7
   1c1b6:	220e      	movs	r2, #14
   1c1b8:	701a      	strb	r2, [r3, #0]
   1c1ba:	e002      	b.n	1c1c2 <motor_checkSleepElligible+0x42>
		}
		else
		{
			j = 12;
   1c1bc:	1dfb      	adds	r3, r7, #7
   1c1be:	220c      	movs	r2, #12
   1c1c0:	701a      	strb	r2, [r3, #0]
		}
	}
	
	bool event=true;
   1c1c2:	1dbb      	adds	r3, r7, #6
   1c1c4:	2201      	movs	r2, #1
   1c1c6:	701a      	strb	r2, [r3, #0]
	while(j--)
   1c1c8:	e00c      	b.n	1c1e4 <motor_checkSleepElligible+0x64>
	{
		if(!simEventTemp[j])
   1c1ca:	1dfb      	adds	r3, r7, #7
   1c1cc:	781b      	ldrb	r3, [r3, #0]
   1c1ce:	4a39      	ldr	r2, [pc, #228]	; (1c2b4 <motor_checkSleepElligible+0x134>)
   1c1d0:	5cd3      	ldrb	r3, [r2, r3]
   1c1d2:	2201      	movs	r2, #1
   1c1d4:	4053      	eors	r3, r2
   1c1d6:	b2db      	uxtb	r3, r3
   1c1d8:	2b00      	cmp	r3, #0
   1c1da:	d003      	beq.n	1c1e4 <motor_checkSleepElligible+0x64>
		{
			event=false;
   1c1dc:	1dbb      	adds	r3, r7, #6
   1c1de:	2200      	movs	r2, #0
   1c1e0:	701a      	strb	r2, [r3, #0]
			break;
   1c1e2:	e006      	b.n	1c1f2 <motor_checkSleepElligible+0x72>
	while(j--)
   1c1e4:	1dfb      	adds	r3, r7, #7
   1c1e6:	781b      	ldrb	r3, [r3, #0]
   1c1e8:	1dfa      	adds	r2, r7, #7
   1c1ea:	1e59      	subs	r1, r3, #1
   1c1ec:	7011      	strb	r1, [r2, #0]
   1c1ee:	2b00      	cmp	r3, #0
   1c1f0:	d1eb      	bne.n	1c1ca <motor_checkSleepElligible+0x4a>
		}
	}
	if (factory_settings_parameter_struct.ENABLE_M2M)
   1c1f2:	4b2f      	ldr	r3, [pc, #188]	; (1c2b0 <motor_checkSleepElligible+0x130>)
   1c1f4:	78db      	ldrb	r3, [r3, #3]
   1c1f6:	2b00      	cmp	r3, #0
   1c1f8:	d00e      	beq.n	1c218 <motor_checkSleepElligible+0x98>
	{
		if(event && m2mEvent_arr[0] == ME_WAITREGISTER || m2mEvent_arr[1]==ME_WAITREGISTER)
   1c1fa:	1dbb      	adds	r3, r7, #6
   1c1fc:	781b      	ldrb	r3, [r3, #0]
   1c1fe:	2b00      	cmp	r3, #0
   1c200:	d003      	beq.n	1c20a <motor_checkSleepElligible+0x8a>
   1c202:	4b2d      	ldr	r3, [pc, #180]	; (1c2b8 <motor_checkSleepElligible+0x138>)
   1c204:	781b      	ldrb	r3, [r3, #0]
   1c206:	2b01      	cmp	r3, #1
   1c208:	d003      	beq.n	1c212 <motor_checkSleepElligible+0x92>
   1c20a:	4b2b      	ldr	r3, [pc, #172]	; (1c2b8 <motor_checkSleepElligible+0x138>)
   1c20c:	785b      	ldrb	r3, [r3, #1]
   1c20e:	2b01      	cmp	r3, #1
   1c210:	d102      	bne.n	1c218 <motor_checkSleepElligible+0x98>
		{
			event = false;
   1c212:	1dbb      	adds	r3, r7, #6
   1c214:	2200      	movs	r2, #0
   1c216:	701a      	strb	r2, [r3, #0]
		}
	}
	
	return (!getACPowerState() && !eventOccured && event && !waitStableLineOn && !singlePhasingTimerOn
   1c218:	4b28      	ldr	r3, [pc, #160]	; (1c2bc <motor_checkSleepElligible+0x13c>)
   1c21a:	4798      	blx	r3
   1c21c:	0003      	movs	r3, r0
   1c21e:	001a      	movs	r2, r3
   1c220:	2301      	movs	r3, #1
   1c222:	4053      	eors	r3, r2
   1c224:	b2db      	uxtb	r3, r3
	&& !startTimerOn && !startSequenceOn && !stopSequenceOn && !firstEvent);
   1c226:	2b00      	cmp	r3, #0
   1c228:	d038      	beq.n	1c29c <motor_checkSleepElligible+0x11c>
	return (!getACPowerState() && !eventOccured && event && !waitStableLineOn && !singlePhasingTimerOn
   1c22a:	4b25      	ldr	r3, [pc, #148]	; (1c2c0 <motor_checkSleepElligible+0x140>)
   1c22c:	781b      	ldrb	r3, [r3, #0]
   1c22e:	b2db      	uxtb	r3, r3
   1c230:	2201      	movs	r2, #1
   1c232:	4053      	eors	r3, r2
   1c234:	b2db      	uxtb	r3, r3
   1c236:	2b00      	cmp	r3, #0
   1c238:	d030      	beq.n	1c29c <motor_checkSleepElligible+0x11c>
   1c23a:	1dbb      	adds	r3, r7, #6
   1c23c:	781b      	ldrb	r3, [r3, #0]
   1c23e:	2b00      	cmp	r3, #0
   1c240:	d02c      	beq.n	1c29c <motor_checkSleepElligible+0x11c>
   1c242:	4b20      	ldr	r3, [pc, #128]	; (1c2c4 <motor_checkSleepElligible+0x144>)
   1c244:	781b      	ldrb	r3, [r3, #0]
   1c246:	2201      	movs	r2, #1
   1c248:	4053      	eors	r3, r2
   1c24a:	b2db      	uxtb	r3, r3
   1c24c:	2b00      	cmp	r3, #0
   1c24e:	d025      	beq.n	1c29c <motor_checkSleepElligible+0x11c>
   1c250:	4b1d      	ldr	r3, [pc, #116]	; (1c2c8 <motor_checkSleepElligible+0x148>)
   1c252:	781b      	ldrb	r3, [r3, #0]
   1c254:	2201      	movs	r2, #1
   1c256:	4053      	eors	r3, r2
   1c258:	b2db      	uxtb	r3, r3
   1c25a:	2b00      	cmp	r3, #0
   1c25c:	d01e      	beq.n	1c29c <motor_checkSleepElligible+0x11c>
	&& !startTimerOn && !startSequenceOn && !stopSequenceOn && !firstEvent);
   1c25e:	4b1b      	ldr	r3, [pc, #108]	; (1c2cc <motor_checkSleepElligible+0x14c>)
   1c260:	781b      	ldrb	r3, [r3, #0]
   1c262:	2201      	movs	r2, #1
   1c264:	4053      	eors	r3, r2
   1c266:	b2db      	uxtb	r3, r3
   1c268:	2b00      	cmp	r3, #0
   1c26a:	d017      	beq.n	1c29c <motor_checkSleepElligible+0x11c>
   1c26c:	4b18      	ldr	r3, [pc, #96]	; (1c2d0 <motor_checkSleepElligible+0x150>)
   1c26e:	781b      	ldrb	r3, [r3, #0]
   1c270:	2201      	movs	r2, #1
   1c272:	4053      	eors	r3, r2
   1c274:	b2db      	uxtb	r3, r3
   1c276:	2b00      	cmp	r3, #0
   1c278:	d010      	beq.n	1c29c <motor_checkSleepElligible+0x11c>
   1c27a:	4b16      	ldr	r3, [pc, #88]	; (1c2d4 <motor_checkSleepElligible+0x154>)
   1c27c:	781b      	ldrb	r3, [r3, #0]
   1c27e:	2201      	movs	r2, #1
   1c280:	4053      	eors	r3, r2
   1c282:	b2db      	uxtb	r3, r3
   1c284:	2b00      	cmp	r3, #0
   1c286:	d009      	beq.n	1c29c <motor_checkSleepElligible+0x11c>
   1c288:	4b13      	ldr	r3, [pc, #76]	; (1c2d8 <motor_checkSleepElligible+0x158>)
   1c28a:	781b      	ldrb	r3, [r3, #0]
   1c28c:	b2db      	uxtb	r3, r3
   1c28e:	2201      	movs	r2, #1
   1c290:	4053      	eors	r3, r2
   1c292:	b2db      	uxtb	r3, r3
   1c294:	2b00      	cmp	r3, #0
   1c296:	d001      	beq.n	1c29c <motor_checkSleepElligible+0x11c>
   1c298:	2301      	movs	r3, #1
   1c29a:	e000      	b.n	1c29e <motor_checkSleepElligible+0x11e>
   1c29c:	2300      	movs	r3, #0
   1c29e:	1c1a      	adds	r2, r3, #0
   1c2a0:	2301      	movs	r3, #1
   1c2a2:	4013      	ands	r3, r2
   1c2a4:	b2db      	uxtb	r3, r3
	
}
   1c2a6:	0018      	movs	r0, r3
   1c2a8:	46bd      	mov	sp, r7
   1c2aa:	b002      	add	sp, #8
   1c2ac:	bd80      	pop	{r7, pc}
   1c2ae:	46c0      	nop			; (mov r8, r8)
   1c2b0:	20000638 	.word	0x20000638
   1c2b4:	20000714 	.word	0x20000714
   1c2b8:	200007a4 	.word	0x200007a4
   1c2bc:	0001a6f9 	.word	0x0001a6f9
   1c2c0:	2000072a 	.word	0x2000072a
   1c2c4:	200007ed 	.word	0x200007ed
   1c2c8:	2000077d 	.word	0x2000077d
   1c2cc:	20000786 	.word	0x20000786
   1c2d0:	20000785 	.word	0x20000785
   1c2d4:	20000774 	.word	0x20000774
   1c2d8:	20000769 	.word	0x20000769

0001c2dc <configure_ac>:


void configure_ac(void)
{
   1c2dc:	b580      	push	{r7, lr}
   1c2de:	b08a      	sub	sp, #40	; 0x28
   1c2e0:	af00      	add	r7, sp, #0
	struct ac_config conf_ac;
	struct ac_events conf_ac_events = {{0}};
   1c2e2:	231c      	movs	r3, #28
   1c2e4:	18fb      	adds	r3, r7, r3
   1c2e6:	0018      	movs	r0, r3
   1c2e8:	2305      	movs	r3, #5
   1c2ea:	001a      	movs	r2, r3
   1c2ec:	2100      	movs	r1, #0
   1c2ee:	4b2c      	ldr	r3, [pc, #176]	; (1c3a0 <configure_ac+0xc4>)
   1c2f0:	4798      	blx	r3
	
	struct ac_chan_config conf_ac_channel;
	struct port_config pin_conf;
	
	ac_get_config_defaults(&conf_ac);
   1c2f2:	2324      	movs	r3, #36	; 0x24
   1c2f4:	18fb      	adds	r3, r7, r3
   1c2f6:	0018      	movs	r0, r3
   1c2f8:	4b2a      	ldr	r3, [pc, #168]	; (1c3a4 <configure_ac+0xc8>)
   1c2fa:	4798      	blx	r3
	conf_ac.run_in_standby[0] = true;
   1c2fc:	2324      	movs	r3, #36	; 0x24
   1c2fe:	18fb      	adds	r3, r7, r3
   1c300:	2201      	movs	r2, #1
   1c302:	701a      	strb	r2, [r3, #0]
	conf_ac.dig_source_generator = GCLK_GENERATOR_6;
   1c304:	2324      	movs	r3, #36	; 0x24
   1c306:	18fb      	adds	r3, r7, r3
   1c308:	2206      	movs	r2, #6
   1c30a:	705a      	strb	r2, [r3, #1]
	ac_init(&ac_instance, AC, &conf_ac);
   1c30c:	2324      	movs	r3, #36	; 0x24
   1c30e:	18fa      	adds	r2, r7, r3
   1c310:	4925      	ldr	r1, [pc, #148]	; (1c3a8 <configure_ac+0xcc>)
   1c312:	4b26      	ldr	r3, [pc, #152]	; (1c3ac <configure_ac+0xd0>)
   1c314:	0018      	movs	r0, r3
   1c316:	4b26      	ldr	r3, [pc, #152]	; (1c3b0 <configure_ac+0xd4>)
   1c318:	4798      	blx	r3
	
	conf_ac_channel.sample_mode = AC_CHAN_MODE_CONTINUOUS;
   1c31a:	1d3b      	adds	r3, r7, #4
   1c31c:	2200      	movs	r2, #0
   1c31e:	701a      	strb	r2, [r3, #0]
	conf_ac_channel.filter = AC_CHAN_FILTER_NONE;
   1c320:	1d3b      	adds	r3, r7, #4
   1c322:	2200      	movs	r2, #0
   1c324:	605a      	str	r2, [r3, #4]
	conf_ac_channel.enable_hysteresis = false;
   1c326:	1d3b      	adds	r3, r7, #4
   1c328:	2200      	movs	r2, #0
   1c32a:	721a      	strb	r2, [r3, #8]
	conf_ac_channel.output_mode = AC_CHAN_OUTPUT_INTERNAL;
   1c32c:	1d3b      	adds	r3, r7, #4
   1c32e:	2200      	movs	r2, #0
   1c330:	60da      	str	r2, [r3, #12]
	conf_ac_channel.positive_input = AC_CHAN_POS_MUX_PIN0;
   1c332:	1d3b      	adds	r3, r7, #4
   1c334:	2200      	movs	r2, #0
   1c336:	821a      	strh	r2, [r3, #16]
	conf_ac_channel.negative_input = AC_CHAN_NEG_MUX_SCALED_VCC;
   1c338:	1d3b      	adds	r3, r7, #4
   1c33a:	22a0      	movs	r2, #160	; 0xa0
   1c33c:	00d2      	lsls	r2, r2, #3
   1c33e:	825a      	strh	r2, [r3, #18]
	/* Detect threshold 0.515625V */
	conf_ac_channel.vcc_scale_factor = 45;
   1c340:	1d3b      	adds	r3, r7, #4
   1c342:	222d      	movs	r2, #45	; 0x2d
   1c344:	751a      	strb	r2, [r3, #20]
	conf_ac_channel.interrupt_selection = AC_CHAN_INTERRUPT_SELECTION_TOGGLE;
   1c346:	1d3b      	adds	r3, r7, #4
   1c348:	2200      	movs	r2, #0
   1c34a:	755a      	strb	r2, [r3, #21]
	ac_chan_set_config(&ac_instance, AC_CHAN_CHANNEL_0, &conf_ac_channel);
   1c34c:	1d3a      	adds	r2, r7, #4
   1c34e:	4b17      	ldr	r3, [pc, #92]	; (1c3ac <configure_ac+0xd0>)
   1c350:	2100      	movs	r1, #0
   1c352:	0018      	movs	r0, r3
   1c354:	4b17      	ldr	r3, [pc, #92]	; (1c3b4 <configure_ac+0xd8>)
   1c356:	4798      	blx	r3
	ac_chan_enable(&ac_instance, AC_CHAN_CHANNEL_0);
   1c358:	4b14      	ldr	r3, [pc, #80]	; (1c3ac <configure_ac+0xd0>)
   1c35a:	2100      	movs	r1, #0
   1c35c:	0018      	movs	r0, r3
   1c35e:	4b16      	ldr	r3, [pc, #88]	; (1c3b8 <configure_ac+0xdc>)
   1c360:	4798      	blx	r3
	
	conf_ac_events.on_event_sample[0] = true;
   1c362:	231c      	movs	r3, #28
   1c364:	18fb      	adds	r3, r7, r3
   1c366:	2201      	movs	r2, #1
   1c368:	70da      	strb	r2, [r3, #3]
	ac_enable_events(&ac_instance ,&conf_ac_events);
   1c36a:	231c      	movs	r3, #28
   1c36c:	18fa      	adds	r2, r7, r3
   1c36e:	4b0f      	ldr	r3, [pc, #60]	; (1c3ac <configure_ac+0xd0>)
   1c370:	0011      	movs	r1, r2
   1c372:	0018      	movs	r0, r3
   1c374:	4b11      	ldr	r3, [pc, #68]	; (1c3bc <configure_ac+0xe0>)
   1c376:	4798      	blx	r3
	
	ac_enable(&ac_instance);
   1c378:	4b0c      	ldr	r3, [pc, #48]	; (1c3ac <configure_ac+0xd0>)
   1c37a:	0018      	movs	r0, r3
   1c37c:	4b10      	ldr	r3, [pc, #64]	; (1c3c0 <configure_ac+0xe4>)
   1c37e:	4798      	blx	r3
	
	ac_register_callback(&ac_instance, ac_detect_callback,AC_CALLBACK_COMPARATOR_0);
   1c380:	4910      	ldr	r1, [pc, #64]	; (1c3c4 <configure_ac+0xe8>)
   1c382:	4b0a      	ldr	r3, [pc, #40]	; (1c3ac <configure_ac+0xd0>)
   1c384:	2200      	movs	r2, #0
   1c386:	0018      	movs	r0, r3
   1c388:	4b0f      	ldr	r3, [pc, #60]	; (1c3c8 <configure_ac+0xec>)
   1c38a:	4798      	blx	r3
	ac_enable_callback(&ac_instance, AC_CALLBACK_COMPARATOR_0);
   1c38c:	4b07      	ldr	r3, [pc, #28]	; (1c3ac <configure_ac+0xd0>)
   1c38e:	2100      	movs	r1, #0
   1c390:	0018      	movs	r0, r3
   1c392:	4b0e      	ldr	r3, [pc, #56]	; (1c3cc <configure_ac+0xf0>)
   1c394:	4798      	blx	r3
}
   1c396:	46c0      	nop			; (mov r8, r8)
   1c398:	46bd      	mov	sp, r7
   1c39a:	b00a      	add	sp, #40	; 0x28
   1c39c:	bd80      	pop	{r7, pc}
   1c39e:	46c0      	nop			; (mov r8, r8)
   1c3a0:	000289fb 	.word	0x000289fb
   1c3a4:	0001855d 	.word	0x0001855d
   1c3a8:	42004400 	.word	0x42004400
   1c3ac:	20000868 	.word	0x20000868
   1c3b0:	0001c921 	.word	0x0001c921
   1c3b4:	0001ca01 	.word	0x0001ca01
   1c3b8:	000186ad 	.word	0x000186ad
   1c3bc:	000185cd 	.word	0x000185cd
   1c3c0:	00018595 	.word	0x00018595
   1c3c4:	0001c461 	.word	0x0001c461
   1c3c8:	00022419 	.word	0x00022419
   1c3cc:	00018815 	.word	0x00018815

0001c3d0 <configure_rtc>:

void configure_rtc(void)
{
   1c3d0:	b580      	push	{r7, lr}
   1c3d2:	b088      	sub	sp, #32
   1c3d4:	af00      	add	r7, sp, #0
	struct rtc_count_config conf_rtc_count;
	struct rtc_count_events conf_rtc_events = {0};
   1c3d6:	1d3b      	adds	r3, r7, #4
   1c3d8:	0018      	movs	r0, r3
   1c3da:	230b      	movs	r3, #11
   1c3dc:	001a      	movs	r2, r3
   1c3de:	2100      	movs	r1, #0
   1c3e0:	4b17      	ldr	r3, [pc, #92]	; (1c440 <configure_rtc+0x70>)
   1c3e2:	4798      	blx	r3
	
	rtc_count_get_config_defaults(&conf_rtc_count);
   1c3e4:	2310      	movs	r3, #16
   1c3e6:	18fb      	adds	r3, r7, r3
   1c3e8:	0018      	movs	r0, r3
   1c3ea:	4b16      	ldr	r3, [pc, #88]	; (1c444 <configure_rtc+0x74>)
   1c3ec:	4798      	blx	r3
	conf_rtc_count.prescaler  = RTC_COUNT_PRESCALER_DIV_1;
   1c3ee:	2310      	movs	r3, #16
   1c3f0:	18fb      	adds	r3, r7, r3
   1c3f2:	2200      	movs	r2, #0
   1c3f4:	801a      	strh	r2, [r3, #0]
	conf_rtc_count.mode       = RTC_COUNT_MODE_16BIT;
   1c3f6:	2310      	movs	r3, #16
   1c3f8:	18fb      	adds	r3, r7, r3
   1c3fa:	2200      	movs	r2, #0
   1c3fc:	709a      	strb	r2, [r3, #2]
	conf_rtc_count.continuously_update =  true;
   1c3fe:	2310      	movs	r3, #16
   1c400:	18fb      	adds	r3, r7, r3
   1c402:	2201      	movs	r2, #1
   1c404:	711a      	strb	r2, [r3, #4]
	rtc_count_init(&rtc_instance, RTC, &conf_rtc_count);
   1c406:	2310      	movs	r3, #16
   1c408:	18fa      	adds	r2, r7, r3
   1c40a:	490f      	ldr	r1, [pc, #60]	; (1c448 <configure_rtc+0x78>)
   1c40c:	4b0f      	ldr	r3, [pc, #60]	; (1c44c <configure_rtc+0x7c>)
   1c40e:	0018      	movs	r0, r3
   1c410:	4b0f      	ldr	r3, [pc, #60]	; (1c450 <configure_rtc+0x80>)
   1c412:	4798      	blx	r3
	rtc_count_set_period(&rtc_instance, 10);
   1c414:	4b0d      	ldr	r3, [pc, #52]	; (1c44c <configure_rtc+0x7c>)
   1c416:	210a      	movs	r1, #10
   1c418:	0018      	movs	r0, r3
   1c41a:	4b0e      	ldr	r3, [pc, #56]	; (1c454 <configure_rtc+0x84>)
   1c41c:	4798      	blx	r3
	conf_rtc_events.generate_event_on_overflow = true;
   1c41e:	1d3b      	adds	r3, r7, #4
   1c420:	2201      	movs	r2, #1
   1c422:	701a      	strb	r2, [r3, #0]
	
	rtc_count_enable_events(&rtc_instance, &conf_rtc_events);
   1c424:	1d3a      	adds	r2, r7, #4
   1c426:	4b09      	ldr	r3, [pc, #36]	; (1c44c <configure_rtc+0x7c>)
   1c428:	0011      	movs	r1, r2
   1c42a:	0018      	movs	r0, r3
   1c42c:	4b0a      	ldr	r3, [pc, #40]	; (1c458 <configure_rtc+0x88>)
   1c42e:	4798      	blx	r3
	rtc_count_enable(&rtc_instance);
   1c430:	4b06      	ldr	r3, [pc, #24]	; (1c44c <configure_rtc+0x7c>)
   1c432:	0018      	movs	r0, r3
   1c434:	4b09      	ldr	r3, [pc, #36]	; (1c45c <configure_rtc+0x8c>)
   1c436:	4798      	blx	r3
}
   1c438:	46c0      	nop			; (mov r8, r8)
   1c43a:	46bd      	mov	sp, r7
   1c43c:	b008      	add	sp, #32
   1c43e:	bd80      	pop	{r7, pc}
   1c440:	000289fb 	.word	0x000289fb
   1c444:	00018d1d 	.word	0x00018d1d
   1c448:	40001400 	.word	0x40001400
   1c44c:	20000848 	.word	0x20000848
   1c450:	0001df49 	.word	0x0001df49
   1c454:	0001e065 	.word	0x0001e065
   1c458:	00018d79 	.word	0x00018d79
   1c45c:	0001dd21 	.word	0x0001dd21

0001c460 <ac_detect_callback>:

void ac_detect_callback(struct ac_module *const module_inst)
{
   1c460:	b580      	push	{r7, lr}
   1c462:	b082      	sub	sp, #8
   1c464:	af00      	add	r7, sp, #0
   1c466:	6078      	str	r0, [r7, #4]
	eventOccured = true;
   1c468:	4b03      	ldr	r3, [pc, #12]	; (1c478 <ac_detect_callback+0x18>)
   1c46a:	2201      	movs	r2, #1
   1c46c:	701a      	strb	r2, [r3, #0]
}
   1c46e:	46c0      	nop			; (mov r8, r8)
   1c470:	46bd      	mov	sp, r7
   1c472:	b002      	add	sp, #8
   1c474:	bd80      	pop	{r7, pc}
   1c476:	46c0      	nop			; (mov r8, r8)
   1c478:	2000072a 	.word	0x2000072a

0001c47c <motor_feedback_callback>:

static void motor_feedback_callback(void)
{
   1c47c:	b580      	push	{r7, lr}
   1c47e:	af00      	add	r7, sp, #0
	eventOccured = true;
   1c480:	4b06      	ldr	r3, [pc, #24]	; (1c49c <motor_feedback_callback+0x20>)
   1c482:	2201      	movs	r2, #1
   1c484:	701a      	strb	r2, [r3, #0]
	motorFeedbackEvent=true;
   1c486:	4b06      	ldr	r3, [pc, #24]	; (1c4a0 <motor_feedback_callback+0x24>)
   1c488:	2201      	movs	r2, #1
   1c48a:	701a      	strb	r2, [r3, #0]
	motorFeedbackEventTime=xTaskGetTickCountFromISR();
   1c48c:	4b05      	ldr	r3, [pc, #20]	; (1c4a4 <motor_feedback_callback+0x28>)
   1c48e:	4798      	blx	r3
   1c490:	0002      	movs	r2, r0
   1c492:	4b05      	ldr	r3, [pc, #20]	; (1c4a8 <motor_feedback_callback+0x2c>)
   1c494:	601a      	str	r2, [r3, #0]
}
   1c496:	46c0      	nop			; (mov r8, r8)
   1c498:	46bd      	mov	sp, r7
   1c49a:	bd80      	pop	{r7, pc}
   1c49c:	2000072a 	.word	0x2000072a
   1c4a0:	20000776 	.word	0x20000776
   1c4a4:	0001fe59 	.word	0x0001fe59
   1c4a8:	2000083c 	.word	0x2000083c

0001c4ac <configure_event>:

void configure_event(void)
{
   1c4ac:	b580      	push	{r7, lr}
   1c4ae:	b082      	sub	sp, #8
   1c4b0:	af00      	add	r7, sp, #0
	struct events_config conf_event;
	events_get_config_defaults(&conf_event);
   1c4b2:	1d3b      	adds	r3, r7, #4
   1c4b4:	0018      	movs	r0, r3
   1c4b6:	4b0d      	ldr	r3, [pc, #52]	; (1c4ec <configure_event+0x40>)
   1c4b8:	4798      	blx	r3
	conf_event.generator = EVSYS_ID_GEN_RTC_OVF;
   1c4ba:	1d3b      	adds	r3, r7, #4
   1c4bc:	2203      	movs	r2, #3
   1c4be:	709a      	strb	r2, [r3, #2]
	conf_event.edge_detect = EVENTS_EDGE_DETECT_NONE;
   1c4c0:	1d3b      	adds	r3, r7, #4
   1c4c2:	2200      	movs	r2, #0
   1c4c4:	701a      	strb	r2, [r3, #0]
	conf_event.path       = EVENTS_PATH_ASYNCHRONOUS;
   1c4c6:	1d3b      	adds	r3, r7, #4
   1c4c8:	2202      	movs	r2, #2
   1c4ca:	705a      	strb	r2, [r3, #1]
	
	events_allocate(&resource, &conf_event);
   1c4cc:	1d3a      	adds	r2, r7, #4
   1c4ce:	4b08      	ldr	r3, [pc, #32]	; (1c4f0 <configure_event+0x44>)
   1c4d0:	0011      	movs	r1, r2
   1c4d2:	0018      	movs	r0, r3
   1c4d4:	4b07      	ldr	r3, [pc, #28]	; (1c4f4 <configure_event+0x48>)
   1c4d6:	4798      	blx	r3
	events_attach_user(&resource, EVSYS_ID_USER_AC_SOC_0);
   1c4d8:	4b05      	ldr	r3, [pc, #20]	; (1c4f0 <configure_event+0x44>)
   1c4da:	2119      	movs	r1, #25
   1c4dc:	0018      	movs	r0, r3
   1c4de:	4b06      	ldr	r3, [pc, #24]	; (1c4f8 <configure_event+0x4c>)
   1c4e0:	4798      	blx	r3
}
   1c4e2:	46c0      	nop			; (mov r8, r8)
   1c4e4:	46bd      	mov	sp, r7
   1c4e6:	b002      	add	sp, #8
   1c4e8:	bd80      	pop	{r7, pc}
   1c4ea:	46c0      	nop			; (mov r8, r8)
   1c4ec:	000222d9 	.word	0x000222d9
   1c4f0:	20000860 	.word	0x20000860
   1c4f4:	00022301 	.word	0x00022301
   1c4f8:	000223c9 	.word	0x000223c9

0001c4fc <operateOnButtonEvent>:

void operateOnButtonEvent(void)
{
   1c4fc:	b580      	push	{r7, lr}
   1c4fe:	af00      	add	r7, sp, #0
	buttonEventOccured=false;
   1c500:	4b28      	ldr	r3, [pc, #160]	; (1c5a4 <operateOnButtonEvent+0xa8>)
   1c502:	2200      	movs	r2, #0
   1c504:	701a      	strb	r2, [r3, #0]
	if (START_BUTTON_INPUT_COMES)
   1c506:	2026      	movs	r0, #38	; 0x26
   1c508:	4b27      	ldr	r3, [pc, #156]	; (1c5a8 <operateOnButtonEvent+0xac>)
   1c50a:	4798      	blx	r3
   1c50c:	0003      	movs	r3, r0
   1c50e:	001a      	movs	r2, r3
   1c510:	2301      	movs	r3, #1
   1c512:	4053      	eors	r3, r2
   1c514:	b2db      	uxtb	r3, r3
   1c516:	2b00      	cmp	r3, #0
   1c518:	d008      	beq.n	1c52c <operateOnButtonEvent+0x30>
	{
		lastPressTime=xTaskGetTickCount();
   1c51a:	4b24      	ldr	r3, [pc, #144]	; (1c5ac <operateOnButtonEvent+0xb0>)
   1c51c:	4798      	blx	r3
   1c51e:	0002      	movs	r2, r0
   1c520:	4b23      	ldr	r3, [pc, #140]	; (1c5b0 <operateOnButtonEvent+0xb4>)
   1c522:	601a      	str	r2, [r3, #0]
		lastButtonEvent=BTNEVENTSTART;
   1c524:	4b23      	ldr	r3, [pc, #140]	; (1c5b4 <operateOnButtonEvent+0xb8>)
   1c526:	2201      	movs	r2, #1
   1c528:	701a      	strb	r2, [r3, #0]
	else if(LCDSHOW_BUTTON_INPUT_COMES)
	{
		lastPressTime= xTaskGetTickCount();
		lastButtonEvent=BTNEVENTLCDSHOW;
	}
}
   1c52a:	e037      	b.n	1c59c <operateOnButtonEvent+0xa0>
	else if (STOP_BUTTON_INPUT_COMES)
   1c52c:	2025      	movs	r0, #37	; 0x25
   1c52e:	4b1e      	ldr	r3, [pc, #120]	; (1c5a8 <operateOnButtonEvent+0xac>)
   1c530:	4798      	blx	r3
   1c532:	0003      	movs	r3, r0
   1c534:	001a      	movs	r2, r3
   1c536:	2301      	movs	r3, #1
   1c538:	4053      	eors	r3, r2
   1c53a:	b2db      	uxtb	r3, r3
   1c53c:	2b00      	cmp	r3, #0
   1c53e:	d008      	beq.n	1c552 <operateOnButtonEvent+0x56>
		lastPressTime=xTaskGetTickCount();
   1c540:	4b1a      	ldr	r3, [pc, #104]	; (1c5ac <operateOnButtonEvent+0xb0>)
   1c542:	4798      	blx	r3
   1c544:	0002      	movs	r2, r0
   1c546:	4b1a      	ldr	r3, [pc, #104]	; (1c5b0 <operateOnButtonEvent+0xb4>)
   1c548:	601a      	str	r2, [r3, #0]
		lastButtonEvent=BTNEVENTSTOP;
   1c54a:	4b1a      	ldr	r3, [pc, #104]	; (1c5b4 <operateOnButtonEvent+0xb8>)
   1c54c:	2202      	movs	r2, #2
   1c54e:	701a      	strb	r2, [r3, #0]
}
   1c550:	e024      	b.n	1c59c <operateOnButtonEvent+0xa0>
	else if (AUTO_BUTTON_INPUT_COMES)
   1c552:	201c      	movs	r0, #28
   1c554:	4b14      	ldr	r3, [pc, #80]	; (1c5a8 <operateOnButtonEvent+0xac>)
   1c556:	4798      	blx	r3
   1c558:	0003      	movs	r3, r0
   1c55a:	001a      	movs	r2, r3
   1c55c:	2301      	movs	r3, #1
   1c55e:	4053      	eors	r3, r2
   1c560:	b2db      	uxtb	r3, r3
   1c562:	2b00      	cmp	r3, #0
   1c564:	d008      	beq.n	1c578 <operateOnButtonEvent+0x7c>
		lastPressTime=xTaskGetTickCount();
   1c566:	4b11      	ldr	r3, [pc, #68]	; (1c5ac <operateOnButtonEvent+0xb0>)
   1c568:	4798      	blx	r3
   1c56a:	0002      	movs	r2, r0
   1c56c:	4b10      	ldr	r3, [pc, #64]	; (1c5b0 <operateOnButtonEvent+0xb4>)
   1c56e:	601a      	str	r2, [r3, #0]
		lastButtonEvent=BTNEVENTAUTO;
   1c570:	4b10      	ldr	r3, [pc, #64]	; (1c5b4 <operateOnButtonEvent+0xb8>)
   1c572:	2203      	movs	r2, #3
   1c574:	701a      	strb	r2, [r3, #0]
}
   1c576:	e011      	b.n	1c59c <operateOnButtonEvent+0xa0>
	else if(LCDSHOW_BUTTON_INPUT_COMES)
   1c578:	2029      	movs	r0, #41	; 0x29
   1c57a:	4b0b      	ldr	r3, [pc, #44]	; (1c5a8 <operateOnButtonEvent+0xac>)
   1c57c:	4798      	blx	r3
   1c57e:	0003      	movs	r3, r0
   1c580:	001a      	movs	r2, r3
   1c582:	2301      	movs	r3, #1
   1c584:	4053      	eors	r3, r2
   1c586:	b2db      	uxtb	r3, r3
   1c588:	2b00      	cmp	r3, #0
   1c58a:	d007      	beq.n	1c59c <operateOnButtonEvent+0xa0>
		lastPressTime= xTaskGetTickCount();
   1c58c:	4b07      	ldr	r3, [pc, #28]	; (1c5ac <operateOnButtonEvent+0xb0>)
   1c58e:	4798      	blx	r3
   1c590:	0002      	movs	r2, r0
   1c592:	4b07      	ldr	r3, [pc, #28]	; (1c5b0 <operateOnButtonEvent+0xb4>)
   1c594:	601a      	str	r2, [r3, #0]
		lastButtonEvent=BTNEVENTLCDSHOW;
   1c596:	4b07      	ldr	r3, [pc, #28]	; (1c5b4 <operateOnButtonEvent+0xb8>)
   1c598:	2204      	movs	r2, #4
   1c59a:	701a      	strb	r2, [r3, #0]
}
   1c59c:	46c0      	nop			; (mov r8, r8)
   1c59e:	46bd      	mov	sp, r7
   1c5a0:	bd80      	pop	{r7, pc}
   1c5a2:	46c0      	nop			; (mov r8, r8)
   1c5a4:	20000242 	.word	0x20000242
   1c5a8:	00018bfd 	.word	0x00018bfd
   1c5ac:	0001fe3d 	.word	0x0001fe3d
   1c5b0:	2000023c 	.word	0x2000023c
   1c5b4:	20000240 	.word	0x20000240

0001c5b8 <buttonFilter>:

void buttonFilter(void)
{
   1c5b8:	b580      	push	{r7, lr}
   1c5ba:	af00      	add	r7, sp, #0
	//&& xTaskGetTickCount() - lastPressTime > 30
	if(lastButtonEvent>0)
   1c5bc:	4b47      	ldr	r3, [pc, #284]	; (1c6dc <buttonFilter+0x124>)
   1c5be:	781b      	ldrb	r3, [r3, #0]
   1c5c0:	b2db      	uxtb	r3, r3
   1c5c2:	2b00      	cmp	r3, #0
   1c5c4:	d100      	bne.n	1c5c8 <buttonFilter+0x10>
   1c5c6:	e086      	b.n	1c6d6 <buttonFilter+0x11e>
	{
		if(lastButtonEvent==BTNEVENTSTART && START_BUTTON_INPUT_COMES)
   1c5c8:	4b44      	ldr	r3, [pc, #272]	; (1c6dc <buttonFilter+0x124>)
   1c5ca:	781b      	ldrb	r3, [r3, #0]
   1c5cc:	b2db      	uxtb	r3, r3
   1c5ce:	2b01      	cmp	r3, #1
   1c5d0:	d111      	bne.n	1c5f6 <buttonFilter+0x3e>
   1c5d2:	2026      	movs	r0, #38	; 0x26
   1c5d4:	4b42      	ldr	r3, [pc, #264]	; (1c6e0 <buttonFilter+0x128>)
   1c5d6:	4798      	blx	r3
   1c5d8:	0003      	movs	r3, r0
   1c5da:	001a      	movs	r2, r3
   1c5dc:	2301      	movs	r3, #1
   1c5de:	4053      	eors	r3, r2
   1c5e0:	b2db      	uxtb	r3, r3
   1c5e2:	2b00      	cmp	r3, #0
   1c5e4:	d007      	beq.n	1c5f6 <buttonFilter+0x3e>
		{
			lastButtonEvent=0;
   1c5e6:	4b3d      	ldr	r3, [pc, #244]	; (1c6dc <buttonFilter+0x124>)
   1c5e8:	2200      	movs	r2, #0
   1c5ea:	701a      	strb	r2, [r3, #0]
			startMotor(false,false);
   1c5ec:	2100      	movs	r1, #0
   1c5ee:	2000      	movs	r0, #0
   1c5f0:	4b3c      	ldr	r3, [pc, #240]	; (1c6e4 <buttonFilter+0x12c>)
   1c5f2:	4798      	blx	r3
   1c5f4:	e06f      	b.n	1c6d6 <buttonFilter+0x11e>
		}
		else if(lastButtonEvent==BTNEVENTSTOP && STOP_BUTTON_INPUT_COMES)
   1c5f6:	4b39      	ldr	r3, [pc, #228]	; (1c6dc <buttonFilter+0x124>)
   1c5f8:	781b      	ldrb	r3, [r3, #0]
   1c5fa:	b2db      	uxtb	r3, r3
   1c5fc:	2b02      	cmp	r3, #2
   1c5fe:	d112      	bne.n	1c626 <buttonFilter+0x6e>
   1c600:	2025      	movs	r0, #37	; 0x25
   1c602:	4b37      	ldr	r3, [pc, #220]	; (1c6e0 <buttonFilter+0x128>)
   1c604:	4798      	blx	r3
   1c606:	0003      	movs	r3, r0
   1c608:	001a      	movs	r2, r3
   1c60a:	2301      	movs	r3, #1
   1c60c:	4053      	eors	r3, r2
   1c60e:	b2db      	uxtb	r3, r3
   1c610:	2b00      	cmp	r3, #0
   1c612:	d008      	beq.n	1c626 <buttonFilter+0x6e>
		{
			lastButtonEvent=0;
   1c614:	4b31      	ldr	r3, [pc, #196]	; (1c6dc <buttonFilter+0x124>)
   1c616:	2200      	movs	r2, #0
   1c618:	701a      	strb	r2, [r3, #0]
			stopMotor(false,false,true);
   1c61a:	2201      	movs	r2, #1
   1c61c:	2100      	movs	r1, #0
   1c61e:	2000      	movs	r0, #0
   1c620:	4b31      	ldr	r3, [pc, #196]	; (1c6e8 <buttonFilter+0x130>)
   1c622:	4798      	blx	r3
   1c624:	e057      	b.n	1c6d6 <buttonFilter+0x11e>
		}
		else if(lastButtonEvent==BTNEVENTAUTO && AUTO_BUTTON_INPUT_COMES)
   1c626:	4b2d      	ldr	r3, [pc, #180]	; (1c6dc <buttonFilter+0x124>)
   1c628:	781b      	ldrb	r3, [r3, #0]
   1c62a:	b2db      	uxtb	r3, r3
   1c62c:	2b03      	cmp	r3, #3
   1c62e:	d12b      	bne.n	1c688 <buttonFilter+0xd0>
   1c630:	201c      	movs	r0, #28
   1c632:	4b2b      	ldr	r3, [pc, #172]	; (1c6e0 <buttonFilter+0x128>)
   1c634:	4798      	blx	r3
   1c636:	0003      	movs	r3, r0
   1c638:	001a      	movs	r2, r3
   1c63a:	2301      	movs	r3, #1
   1c63c:	4053      	eors	r3, r2
   1c63e:	b2db      	uxtb	r3, r3
   1c640:	2b00      	cmp	r3, #0
   1c642:	d021      	beq.n	1c688 <buttonFilter+0xd0>
		{
			lastButtonEvent=0;
   1c644:	4b25      	ldr	r3, [pc, #148]	; (1c6dc <buttonFilter+0x124>)
   1c646:	2200      	movs	r2, #0
   1c648:	701a      	strb	r2, [r3, #0]
			saveAutoStartSettings(!((bool)user_settings_parameter_struct.autoStartAddress));  //set AutoStart to True in EEPROM
   1c64a:	4b28      	ldr	r3, [pc, #160]	; (1c6ec <buttonFilter+0x134>)
   1c64c:	785b      	ldrb	r3, [r3, #1]
   1c64e:	425a      	negs	r2, r3
   1c650:	4153      	adcs	r3, r2
   1c652:	b2db      	uxtb	r3, r3
   1c654:	0018      	movs	r0, r3
   1c656:	4b26      	ldr	r3, [pc, #152]	; (1c6f0 <buttonFilter+0x138>)
   1c658:	4798      	blx	r3
			resetAutoStart(true);
   1c65a:	2001      	movs	r0, #1
   1c65c:	4b25      	ldr	r3, [pc, #148]	; (1c6f4 <buttonFilter+0x13c>)
   1c65e:	4798      	blx	r3
			if(user_settings_parameter_struct.autoStartAddress)
   1c660:	4b22      	ldr	r3, [pc, #136]	; (1c6ec <buttonFilter+0x134>)
   1c662:	785b      	ldrb	r3, [r3, #1]
   1c664:	2b00      	cmp	r3, #0
   1c666:	d007      	beq.n	1c678 <buttonFilter+0xc0>
			{
				simEventTemp[10] = registerEvent(')');
   1c668:	2029      	movs	r0, #41	; 0x29
   1c66a:	4b23      	ldr	r3, [pc, #140]	; (1c6f8 <buttonFilter+0x140>)
   1c66c:	4798      	blx	r3
   1c66e:	0003      	movs	r3, r0
   1c670:	001a      	movs	r2, r3
   1c672:	4b22      	ldr	r3, [pc, #136]	; (1c6fc <buttonFilter+0x144>)
   1c674:	729a      	strb	r2, [r3, #10]
			if(user_settings_parameter_struct.autoStartAddress)
   1c676:	e02e      	b.n	1c6d6 <buttonFilter+0x11e>
			}
			else
			{
				simEventTemp[11] = registerEvent('[');
   1c678:	205b      	movs	r0, #91	; 0x5b
   1c67a:	4b1f      	ldr	r3, [pc, #124]	; (1c6f8 <buttonFilter+0x140>)
   1c67c:	4798      	blx	r3
   1c67e:	0003      	movs	r3, r0
   1c680:	001a      	movs	r2, r3
   1c682:	4b1e      	ldr	r3, [pc, #120]	; (1c6fc <buttonFilter+0x144>)
   1c684:	72da      	strb	r2, [r3, #11]
			if(user_settings_parameter_struct.autoStartAddress)
   1c686:	e026      	b.n	1c6d6 <buttonFilter+0x11e>
			}
		}
		else if(lastButtonEvent==BTNEVENTLCDSHOW && LCDSHOW_BUTTON_INPUT_COMES)
   1c688:	4b14      	ldr	r3, [pc, #80]	; (1c6dc <buttonFilter+0x124>)
   1c68a:	781b      	ldrb	r3, [r3, #0]
   1c68c:	b2db      	uxtb	r3, r3
   1c68e:	2b04      	cmp	r3, #4
   1c690:	d11d      	bne.n	1c6ce <buttonFilter+0x116>
   1c692:	2029      	movs	r0, #41	; 0x29
   1c694:	4b12      	ldr	r3, [pc, #72]	; (1c6e0 <buttonFilter+0x128>)
   1c696:	4798      	blx	r3
   1c698:	0003      	movs	r3, r0
   1c69a:	001a      	movs	r2, r3
   1c69c:	2301      	movs	r3, #1
   1c69e:	4053      	eors	r3, r2
   1c6a0:	b2db      	uxtb	r3, r3
   1c6a2:	2b00      	cmp	r3, #0
   1c6a4:	d013      	beq.n	1c6ce <buttonFilter+0x116>
		{
			lastButtonEvent=0;
   1c6a6:	4b0d      	ldr	r3, [pc, #52]	; (1c6dc <buttonFilter+0x124>)
   1c6a8:	2200      	movs	r2, #0
   1c6aa:	701a      	strb	r2, [r3, #0]
			setDisplayPause(!varPauseDisplay);
   1c6ac:	4b14      	ldr	r3, [pc, #80]	; (1c700 <buttonFilter+0x148>)
   1c6ae:	781b      	ldrb	r3, [r3, #0]
   1c6b0:	b2db      	uxtb	r3, r3
   1c6b2:	1e5a      	subs	r2, r3, #1
   1c6b4:	4193      	sbcs	r3, r2
   1c6b6:	b2db      	uxtb	r3, r3
   1c6b8:	2201      	movs	r2, #1
   1c6ba:	4053      	eors	r3, r2
   1c6bc:	b2db      	uxtb	r3, r3
   1c6be:	1c1a      	adds	r2, r3, #0
   1c6c0:	2301      	movs	r3, #1
   1c6c2:	4013      	ands	r3, r2
   1c6c4:	b2db      	uxtb	r3, r3
   1c6c6:	0018      	movs	r0, r3
   1c6c8:	4b0e      	ldr	r3, [pc, #56]	; (1c704 <buttonFilter+0x14c>)
   1c6ca:	4798      	blx	r3
   1c6cc:	e003      	b.n	1c6d6 <buttonFilter+0x11e>
		}
		else
		{
			lastButtonEvent=0;
   1c6ce:	4b03      	ldr	r3, [pc, #12]	; (1c6dc <buttonFilter+0x124>)
   1c6d0:	2200      	movs	r2, #0
   1c6d2:	701a      	strb	r2, [r3, #0]
		}
	}
}
   1c6d4:	e7ff      	b.n	1c6d6 <buttonFilter+0x11e>
   1c6d6:	46c0      	nop			; (mov r8, r8)
   1c6d8:	46bd      	mov	sp, r7
   1c6da:	bd80      	pop	{r7, pc}
   1c6dc:	20000240 	.word	0x20000240
   1c6e0:	00018bfd 	.word	0x00018bfd
   1c6e4:	0001aef1 	.word	0x0001aef1
   1c6e8:	0001b0b5 	.word	0x0001b0b5
   1c6ec:	20000660 	.word	0x20000660
   1c6f0:	0001128d 	.word	0x0001128d
   1c6f4:	0001aabd 	.word	0x0001aabd
   1c6f8:	00014805 	.word	0x00014805
   1c6fc:	20000714 	.word	0x20000714
   1c700:	20000241 	.word	0x20000241
   1c704:	0001c709 	.word	0x0001c709

0001c708 <setDisplayPause>:
//}
//}


void setDisplayPause(bool value)
{
   1c708:	b580      	push	{r7, lr}
   1c70a:	b082      	sub	sp, #8
   1c70c:	af00      	add	r7, sp, #0
   1c70e:	0002      	movs	r2, r0
   1c710:	1dfb      	adds	r3, r7, #7
   1c712:	701a      	strb	r2, [r3, #0]
	varPauseDisplay=value;
   1c714:	4b03      	ldr	r3, [pc, #12]	; (1c724 <setDisplayPause+0x1c>)
   1c716:	1dfa      	adds	r2, r7, #7
   1c718:	7812      	ldrb	r2, [r2, #0]
   1c71a:	701a      	strb	r2, [r3, #0]
}
   1c71c:	46c0      	nop			; (mov r8, r8)
   1c71e:	46bd      	mov	sp, r7
   1c720:	b002      	add	sp, #8
   1c722:	bd80      	pop	{r7, pc}
   1c724:	20000241 	.word	0x20000241

0001c728 <setCallStateOnLCD>:

void setCallStateOnLCD(uint8_t callState,char* number,bool usePrevious)
{
   1c728:	b580      	push	{r7, lr}
   1c72a:	b082      	sub	sp, #8
   1c72c:	af00      	add	r7, sp, #0
   1c72e:	6039      	str	r1, [r7, #0]
   1c730:	0011      	movs	r1, r2
   1c732:	1dfb      	adds	r3, r7, #7
   1c734:	1c02      	adds	r2, r0, #0
   1c736:	701a      	strb	r2, [r3, #0]
   1c738:	1dbb      	adds	r3, r7, #6
   1c73a:	1c0a      	adds	r2, r1, #0
   1c73c:	701a      	strb	r2, [r3, #0]
	callStateOnLCD = callState;
   1c73e:	4b0f      	ldr	r3, [pc, #60]	; (1c77c <setCallStateOnLCD+0x54>)
   1c740:	1dfa      	adds	r2, r7, #7
   1c742:	7812      	ldrb	r2, [r2, #0]
   1c744:	701a      	strb	r2, [r3, #0]

	if(!usePrevious)
   1c746:	1dbb      	adds	r3, r7, #6
   1c748:	781b      	ldrb	r3, [r3, #0]
   1c74a:	2201      	movs	r2, #1
   1c74c:	4053      	eors	r3, r2
   1c74e:	b2db      	uxtb	r3, r3
   1c750:	2b00      	cmp	r3, #0
   1c752:	d00f      	beq.n	1c774 <setCallStateOnLCD+0x4c>
	{
		memset(numberOnLCD, '\0', sizeof(numberOnLCD));
   1c754:	4b0a      	ldr	r3, [pc, #40]	; (1c780 <setCallStateOnLCD+0x58>)
   1c756:	2214      	movs	r2, #20
   1c758:	2100      	movs	r1, #0
   1c75a:	0018      	movs	r0, r3
   1c75c:	4b09      	ldr	r3, [pc, #36]	; (1c784 <setCallStateOnLCD+0x5c>)
   1c75e:	4798      	blx	r3
		if(callStateOnLCD!=LCDCALLSTATE_IDLE)
   1c760:	4b06      	ldr	r3, [pc, #24]	; (1c77c <setCallStateOnLCD+0x54>)
   1c762:	781b      	ldrb	r3, [r3, #0]
   1c764:	2b00      	cmp	r3, #0
   1c766:	d005      	beq.n	1c774 <setCallStateOnLCD+0x4c>
		{
			strcpy(numberOnLCD,number);
   1c768:	683a      	ldr	r2, [r7, #0]
   1c76a:	4b05      	ldr	r3, [pc, #20]	; (1c780 <setCallStateOnLCD+0x58>)
   1c76c:	0011      	movs	r1, r2
   1c76e:	0018      	movs	r0, r3
   1c770:	4b05      	ldr	r3, [pc, #20]	; (1c788 <setCallStateOnLCD+0x60>)
   1c772:	4798      	blx	r3
			//sprintf(numberOnLCD,"%s",number);
		}
	}
}
   1c774:	46c0      	nop			; (mov r8, r8)
   1c776:	46bd      	mov	sp, r7
   1c778:	b002      	add	sp, #8
   1c77a:	bd80      	pop	{r7, pc}
   1c77c:	200007b5 	.word	0x200007b5
   1c780:	20000824 	.word	0x20000824
   1c784:	000289fb 	.word	0x000289fb
   1c788:	00028c7b 	.word	0x00028c7b

0001c78c <vTask_50ms_Timer>:

static void vTask_50ms_Timer(void *params)
{
   1c78c:	b590      	push	{r4, r7, lr}
   1c78e:	b085      	sub	sp, #20
   1c790:	af00      	add	r7, sp, #0
   1c792:	6078      	str	r0, [r7, #4]
	TickType_t xLastExecutionGsm_Send_Time;
	xLastExecutionGsm_Send_Time = xTaskGetTickCount();
   1c794:	4b17      	ldr	r3, [pc, #92]	; (1c7f4 <vTask_50ms_Timer+0x68>)
   1c796:	4798      	blx	r3
   1c798:	0003      	movs	r3, r0
   1c79a:	60fb      	str	r3, [r7, #12]
	//--------------------------------
	for( ;; )
	{
		vTaskDelayUntil(&xLastExecutionGsm_Send_Time, (25/portTICK_PERIOD_MS));
   1c79c:	230c      	movs	r3, #12
   1c79e:	18fb      	adds	r3, r7, r3
   1c7a0:	2119      	movs	r1, #25
   1c7a2:	0018      	movs	r0, r3
   1c7a4:	4b14      	ldr	r3, [pc, #80]	; (1c7f8 <vTask_50ms_Timer+0x6c>)
   1c7a6:	4798      	blx	r3
		if(buttonEventOccured)
   1c7a8:	4b14      	ldr	r3, [pc, #80]	; (1c7fc <vTask_50ms_Timer+0x70>)
   1c7aa:	781b      	ldrb	r3, [r3, #0]
   1c7ac:	b2db      	uxtb	r3, r3
   1c7ae:	2b00      	cmp	r3, #0
   1c7b0:	d001      	beq.n	1c7b6 <vTask_50ms_Timer+0x2a>
		{
			operateOnButtonEvent();
   1c7b2:	4b13      	ldr	r3, [pc, #76]	; (1c800 <vTask_50ms_Timer+0x74>)
   1c7b4:	4798      	blx	r3
		}

		xSemaphoreTake(xButton_Semaphore,portMAX_DELAY);
   1c7b6:	4b13      	ldr	r3, [pc, #76]	; (1c804 <vTask_50ms_Timer+0x78>)
   1c7b8:	681a      	ldr	r2, [r3, #0]
   1c7ba:	2301      	movs	r3, #1
   1c7bc:	425b      	negs	r3, r3
   1c7be:	0019      	movs	r1, r3
   1c7c0:	0010      	movs	r0, r2
   1c7c2:	4b11      	ldr	r3, [pc, #68]	; (1c808 <vTask_50ms_Timer+0x7c>)
   1c7c4:	4798      	blx	r3
		if(lastButtonEvent>0)
   1c7c6:	4b11      	ldr	r3, [pc, #68]	; (1c80c <vTask_50ms_Timer+0x80>)
   1c7c8:	781b      	ldrb	r3, [r3, #0]
   1c7ca:	b2db      	uxtb	r3, r3
   1c7cc:	2b00      	cmp	r3, #0
   1c7ce:	d008      	beq.n	1c7e2 <vTask_50ms_Timer+0x56>
		{
			taskPSet=true;
   1c7d0:	4b0f      	ldr	r3, [pc, #60]	; (1c810 <vTask_50ms_Timer+0x84>)
   1c7d2:	2201      	movs	r2, #1
   1c7d4:	701a      	strb	r2, [r3, #0]
			vTaskPrioritySet(motorTask,2);
   1c7d6:	4b0f      	ldr	r3, [pc, #60]	; (1c814 <vTask_50ms_Timer+0x88>)
   1c7d8:	681b      	ldr	r3, [r3, #0]
   1c7da:	2102      	movs	r1, #2
   1c7dc:	0018      	movs	r0, r3
   1c7de:	4b0e      	ldr	r3, [pc, #56]	; (1c818 <vTask_50ms_Timer+0x8c>)
   1c7e0:	4798      	blx	r3
		}
		xSemaphoreGive(xButton_Semaphore);
   1c7e2:	4b08      	ldr	r3, [pc, #32]	; (1c804 <vTask_50ms_Timer+0x78>)
   1c7e4:	6818      	ldr	r0, [r3, #0]
   1c7e6:	2300      	movs	r3, #0
   1c7e8:	2200      	movs	r2, #0
   1c7ea:	2100      	movs	r1, #0
   1c7ec:	4c0b      	ldr	r4, [pc, #44]	; (1c81c <vTask_50ms_Timer+0x90>)
   1c7ee:	47a0      	blx	r4
		vTaskDelayUntil(&xLastExecutionGsm_Send_Time, (25/portTICK_PERIOD_MS));
   1c7f0:	e7d4      	b.n	1c79c <vTask_50ms_Timer+0x10>
   1c7f2:	46c0      	nop			; (mov r8, r8)
   1c7f4:	0001fe3d 	.word	0x0001fe3d
   1c7f8:	0001fa11 	.word	0x0001fa11
   1c7fc:	20000242 	.word	0x20000242
   1c800:	0001c4fd 	.word	0x0001c4fd
   1c804:	20000248 	.word	0x20000248
   1c808:	0001f1d1 	.word	0x0001f1d1
   1c80c:	20000240 	.word	0x20000240
   1c810:	2000024c 	.word	0x2000024c
   1c814:	20000250 	.word	0x20000250
   1c818:	0001fb35 	.word	0x0001fb35
   1c81c:	0001ed31 	.word	0x0001ed31

0001c820 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
   1c820:	b580      	push	{r7, lr}
   1c822:	b082      	sub	sp, #8
   1c824:	af00      	add	r7, sp, #0
   1c826:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
   1c828:	687b      	ldr	r3, [r7, #4]
   1c82a:	2200      	movs	r2, #0
   1c82c:	701a      	strb	r2, [r3, #0]
}
   1c82e:	46c0      	nop			; (mov r8, r8)
   1c830:	46bd      	mov	sp, r7
   1c832:	b002      	add	sp, #8
   1c834:	bd80      	pop	{r7, pc}
	...

0001c838 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
   1c838:	b580      	push	{r7, lr}
   1c83a:	b082      	sub	sp, #8
   1c83c:	af00      	add	r7, sp, #0
   1c83e:	0002      	movs	r2, r0
   1c840:	6039      	str	r1, [r7, #0]
   1c842:	1dfb      	adds	r3, r7, #7
   1c844:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   1c846:	1dfb      	adds	r3, r7, #7
   1c848:	781b      	ldrb	r3, [r3, #0]
   1c84a:	2b01      	cmp	r3, #1
   1c84c:	d00a      	beq.n	1c864 <system_apb_clock_set_mask+0x2c>
   1c84e:	2b02      	cmp	r3, #2
   1c850:	d00f      	beq.n	1c872 <system_apb_clock_set_mask+0x3a>
   1c852:	2b00      	cmp	r3, #0
   1c854:	d114      	bne.n	1c880 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
   1c856:	4b0e      	ldr	r3, [pc, #56]	; (1c890 <system_apb_clock_set_mask+0x58>)
   1c858:	4a0d      	ldr	r2, [pc, #52]	; (1c890 <system_apb_clock_set_mask+0x58>)
   1c85a:	6991      	ldr	r1, [r2, #24]
   1c85c:	683a      	ldr	r2, [r7, #0]
   1c85e:	430a      	orrs	r2, r1
   1c860:	619a      	str	r2, [r3, #24]
			break;
   1c862:	e00f      	b.n	1c884 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
   1c864:	4b0a      	ldr	r3, [pc, #40]	; (1c890 <system_apb_clock_set_mask+0x58>)
   1c866:	4a0a      	ldr	r2, [pc, #40]	; (1c890 <system_apb_clock_set_mask+0x58>)
   1c868:	69d1      	ldr	r1, [r2, #28]
   1c86a:	683a      	ldr	r2, [r7, #0]
   1c86c:	430a      	orrs	r2, r1
   1c86e:	61da      	str	r2, [r3, #28]
			break;
   1c870:	e008      	b.n	1c884 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
   1c872:	4b07      	ldr	r3, [pc, #28]	; (1c890 <system_apb_clock_set_mask+0x58>)
   1c874:	4a06      	ldr	r2, [pc, #24]	; (1c890 <system_apb_clock_set_mask+0x58>)
   1c876:	6a11      	ldr	r1, [r2, #32]
   1c878:	683a      	ldr	r2, [r7, #0]
   1c87a:	430a      	orrs	r2, r1
   1c87c:	621a      	str	r2, [r3, #32]
			break;
   1c87e:	e001      	b.n	1c884 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
   1c880:	2317      	movs	r3, #23
   1c882:	e000      	b.n	1c886 <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
   1c884:	2300      	movs	r3, #0
}
   1c886:	0018      	movs	r0, r3
   1c888:	46bd      	mov	sp, r7
   1c88a:	b002      	add	sp, #8
   1c88c:	bd80      	pop	{r7, pc}
   1c88e:	46c0      	nop			; (mov r8, r8)
   1c890:	40000400 	.word	0x40000400

0001c894 <ac_is_syncing>:
{
   1c894:	b580      	push	{r7, lr}
   1c896:	b084      	sub	sp, #16
   1c898:	af00      	add	r7, sp, #0
   1c89a:	6078      	str	r0, [r7, #4]
	Ac *const ac_module = module_inst->hw;
   1c89c:	687b      	ldr	r3, [r7, #4]
   1c89e:	681b      	ldr	r3, [r3, #0]
   1c8a0:	60fb      	str	r3, [r7, #12]
	if (ac_module->STATUSB.reg & AC_STATUSB_SYNCBUSY) {
   1c8a2:	68fb      	ldr	r3, [r7, #12]
   1c8a4:	7a5b      	ldrb	r3, [r3, #9]
   1c8a6:	b2db      	uxtb	r3, r3
   1c8a8:	b25b      	sxtb	r3, r3
   1c8aa:	2b00      	cmp	r3, #0
   1c8ac:	da01      	bge.n	1c8b2 <ac_is_syncing+0x1e>
		return true;
   1c8ae:	2301      	movs	r3, #1
   1c8b0:	e000      	b.n	1c8b4 <ac_is_syncing+0x20>
	return false;
   1c8b2:	2300      	movs	r3, #0
}
   1c8b4:	0018      	movs	r0, r3
   1c8b6:	46bd      	mov	sp, r7
   1c8b8:	b004      	add	sp, #16
   1c8ba:	bd80      	pop	{r7, pc}

0001c8bc <_ac_set_config>:
#include "ac.h"

static enum status_code _ac_set_config(
		struct ac_module *const module_inst,
		struct ac_config *const config)
{
   1c8bc:	b580      	push	{r7, lr}
   1c8be:	b086      	sub	sp, #24
   1c8c0:	af00      	add	r7, sp, #0
   1c8c2:	6078      	str	r0, [r7, #4]
   1c8c4:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(config);

	Ac *const ac_module = module_inst->hw;
   1c8c6:	687b      	ldr	r3, [r7, #4]
   1c8c8:	681b      	ldr	r3, [r3, #0]
   1c8ca:	60fb      	str	r3, [r7, #12]

	/* Use a temporary register for computing the control bits */
	uint32_t ctrla_temp = 0;
   1c8cc:	2300      	movs	r3, #0
   1c8ce:	617b      	str	r3, [r7, #20]

	/* Check if the comparators should be enabled during sleep */
	for (uint32_t i = 0; i < AC_PAIRS; i++) {
   1c8d0:	2300      	movs	r3, #0
   1c8d2:	613b      	str	r3, [r7, #16]
   1c8d4:	e00f      	b.n	1c8f6 <_ac_set_config+0x3a>
		if (config->run_in_standby[i] == true) {
   1c8d6:	683a      	ldr	r2, [r7, #0]
   1c8d8:	693b      	ldr	r3, [r7, #16]
   1c8da:	18d3      	adds	r3, r2, r3
   1c8dc:	781b      	ldrb	r3, [r3, #0]
   1c8de:	2b00      	cmp	r3, #0
   1c8e0:	d006      	beq.n	1c8f0 <_ac_set_config+0x34>
			ctrla_temp |= (AC_CTRLA_RUNSTDBY_Msk << i);
   1c8e2:	2204      	movs	r2, #4
   1c8e4:	693b      	ldr	r3, [r7, #16]
   1c8e6:	409a      	lsls	r2, r3
   1c8e8:	0013      	movs	r3, r2
   1c8ea:	697a      	ldr	r2, [r7, #20]
   1c8ec:	4313      	orrs	r3, r2
   1c8ee:	617b      	str	r3, [r7, #20]
	for (uint32_t i = 0; i < AC_PAIRS; i++) {
   1c8f0:	693b      	ldr	r3, [r7, #16]
   1c8f2:	3301      	adds	r3, #1
   1c8f4:	613b      	str	r3, [r7, #16]
   1c8f6:	693b      	ldr	r3, [r7, #16]
   1c8f8:	2b00      	cmp	r3, #0
   1c8fa:	d0ec      	beq.n	1c8d6 <_ac_set_config+0x1a>
		}
	}

	while (ac_is_syncing(module_inst)) {
   1c8fc:	46c0      	nop			; (mov r8, r8)
   1c8fe:	687b      	ldr	r3, [r7, #4]
   1c900:	0018      	movs	r0, r3
   1c902:	4b06      	ldr	r3, [pc, #24]	; (1c91c <_ac_set_config+0x60>)
   1c904:	4798      	blx	r3
   1c906:	1e03      	subs	r3, r0, #0
   1c908:	d1f9      	bne.n	1c8fe <_ac_set_config+0x42>
		/* Wait until synchronization is complete */
	}

	/* Write the new comparator module control configuration */
	ac_module->CTRLA.reg = ctrla_temp;
   1c90a:	697b      	ldr	r3, [r7, #20]
   1c90c:	b2da      	uxtb	r2, r3
   1c90e:	68fb      	ldr	r3, [r7, #12]
   1c910:	701a      	strb	r2, [r3, #0]

	return STATUS_OK;
   1c912:	2300      	movs	r3, #0
}
   1c914:	0018      	movs	r0, r3
   1c916:	46bd      	mov	sp, r7
   1c918:	b006      	add	sp, #24
   1c91a:	bd80      	pop	{r7, pc}
   1c91c:	0001c895 	.word	0x0001c895

0001c920 <ac_init>:
 */
enum status_code ac_init(
		struct ac_module *const module_inst,
		Ac *const hw,
		struct ac_config *const config)
{
   1c920:	b580      	push	{r7, lr}
   1c922:	b086      	sub	sp, #24
   1c924:	af00      	add	r7, sp, #0
   1c926:	60f8      	str	r0, [r7, #12]
   1c928:	60b9      	str	r1, [r7, #8]
   1c92a:	607a      	str	r2, [r7, #4]
	Assert(module_inst);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module_inst->hw = hw;
   1c92c:	68fb      	ldr	r3, [r7, #12]
   1c92e:	68ba      	ldr	r2, [r7, #8]
   1c930:	601a      	str	r2, [r3, #0]

	/* Turn on the digital interface clock and GCLK */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   1c932:	2314      	movs	r3, #20
   1c934:	18fb      	adds	r3, r7, r3
   1c936:	0018      	movs	r0, r3
   1c938:	4b2a      	ldr	r3, [pc, #168]	; (1c9e4 <ac_init+0xc4>)
   1c93a:	4798      	blx	r3

	if (hw == AC) {
   1c93c:	68bb      	ldr	r3, [r7, #8]
   1c93e:	4a2a      	ldr	r2, [pc, #168]	; (1c9e8 <ac_init+0xc8>)
   1c940:	4293      	cmp	r3, r2
   1c942:	d121      	bne.n	1c988 <ac_init+0x68>
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_AC);
   1c944:	2380      	movs	r3, #128	; 0x80
   1c946:	029b      	lsls	r3, r3, #10
   1c948:	0019      	movs	r1, r3
   1c94a:	2002      	movs	r0, #2
   1c94c:	4b27      	ldr	r3, [pc, #156]	; (1c9ec <ac_init+0xcc>)
   1c94e:	4798      	blx	r3
		gclk_chan_conf.source_generator = config->dig_source_generator;
   1c950:	687b      	ldr	r3, [r7, #4]
   1c952:	785a      	ldrb	r2, [r3, #1]
   1c954:	2314      	movs	r3, #20
   1c956:	18fb      	adds	r3, r7, r3
   1c958:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(AC_GCLK_ID_DIG, &gclk_chan_conf);
   1c95a:	2314      	movs	r3, #20
   1c95c:	18fb      	adds	r3, r7, r3
   1c95e:	0019      	movs	r1, r3
   1c960:	201f      	movs	r0, #31
   1c962:	4b23      	ldr	r3, [pc, #140]	; (1c9f0 <ac_init+0xd0>)
   1c964:	4798      	blx	r3
		system_gclk_chan_enable(AC_GCLK_ID_DIG);
   1c966:	201f      	movs	r0, #31
   1c968:	4b22      	ldr	r3, [pc, #136]	; (1c9f4 <ac_init+0xd4>)
   1c96a:	4798      	blx	r3
		gclk_chan_conf.source_generator = config->ana_source_generator;
   1c96c:	687b      	ldr	r3, [r7, #4]
   1c96e:	789a      	ldrb	r2, [r3, #2]
   1c970:	2314      	movs	r3, #20
   1c972:	18fb      	adds	r3, r7, r3
   1c974:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(AC_GCLK_ID_ANA, &gclk_chan_conf);
   1c976:	2314      	movs	r3, #20
   1c978:	18fb      	adds	r3, r7, r3
   1c97a:	0019      	movs	r1, r3
   1c97c:	2020      	movs	r0, #32
   1c97e:	4b1c      	ldr	r3, [pc, #112]	; (1c9f0 <ac_init+0xd0>)
   1c980:	4798      	blx	r3
		system_gclk_chan_enable(AC_GCLK_ID_ANA);
   1c982:	2020      	movs	r0, #32
   1c984:	4b1b      	ldr	r3, [pc, #108]	; (1c9f4 <ac_init+0xd4>)
   1c986:	4798      	blx	r3
#  error This driver is not support more than three AC instances.
#endif

#if AC_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint8_t i = 0; i < AC_CALLBACK_N; i++) {
   1c988:	2317      	movs	r3, #23
   1c98a:	18fb      	adds	r3, r7, r3
   1c98c:	2200      	movs	r2, #0
   1c98e:	701a      	strb	r2, [r3, #0]
   1c990:	e00f      	b.n	1c9b2 <ac_init+0x92>
		module_inst->callback[i]        = NULL;
   1c992:	2317      	movs	r3, #23
   1c994:	18fb      	adds	r3, r7, r3
   1c996:	781b      	ldrb	r3, [r3, #0]
   1c998:	68fa      	ldr	r2, [r7, #12]
   1c99a:	009b      	lsls	r3, r3, #2
   1c99c:	18d3      	adds	r3, r2, r3
   1c99e:	3304      	adds	r3, #4
   1c9a0:	2200      	movs	r2, #0
   1c9a2:	601a      	str	r2, [r3, #0]
	for (uint8_t i = 0; i < AC_CALLBACK_N; i++) {
   1c9a4:	2317      	movs	r3, #23
   1c9a6:	18fb      	adds	r3, r7, r3
   1c9a8:	781a      	ldrb	r2, [r3, #0]
   1c9aa:	2317      	movs	r3, #23
   1c9ac:	18fb      	adds	r3, r7, r3
   1c9ae:	3201      	adds	r2, #1
   1c9b0:	701a      	strb	r2, [r3, #0]
   1c9b2:	2317      	movs	r3, #23
   1c9b4:	18fb      	adds	r3, r7, r3
   1c9b6:	781b      	ldrb	r3, [r3, #0]
   1c9b8:	2b04      	cmp	r3, #4
   1c9ba:	d9ea      	bls.n	1c992 <ac_init+0x72>
	}

	/* Initialize software flags*/
	module_inst->register_callback_mask = 0x00;
   1c9bc:	68fb      	ldr	r3, [r7, #12]
   1c9be:	2200      	movs	r2, #0
   1c9c0:	761a      	strb	r2, [r3, #24]
	module_inst->enable_callback_mask   = 0x00;
   1c9c2:	68fb      	ldr	r3, [r7, #12]
   1c9c4:	2200      	movs	r2, #0
   1c9c6:	765a      	strb	r2, [r3, #25]

#  if (AC_INST_NUM == 1)
	_ac_instance[0] = module_inst;
   1c9c8:	4b0b      	ldr	r3, [pc, #44]	; (1c9f8 <ac_init+0xd8>)
   1c9ca:	68fa      	ldr	r2, [r7, #12]
   1c9cc:	601a      	str	r2, [r3, #0]
	_ac_instance[_ac_get_inst_index(hw)] = module_inst;
#  endif
#endif

	/* Write configuration to module */
	return _ac_set_config(module_inst, config);
   1c9ce:	687a      	ldr	r2, [r7, #4]
   1c9d0:	68fb      	ldr	r3, [r7, #12]
   1c9d2:	0011      	movs	r1, r2
   1c9d4:	0018      	movs	r0, r3
   1c9d6:	4b09      	ldr	r3, [pc, #36]	; (1c9fc <ac_init+0xdc>)
   1c9d8:	4798      	blx	r3
   1c9da:	0003      	movs	r3, r0
}
   1c9dc:	0018      	movs	r0, r3
   1c9de:	46bd      	mov	sp, r7
   1c9e0:	b006      	add	sp, #24
   1c9e2:	bd80      	pop	{r7, pc}
   1c9e4:	0001c821 	.word	0x0001c821
   1c9e8:	42004400 	.word	0x42004400
   1c9ec:	0001c839 	.word	0x0001c839
   1c9f0:	000245a5 	.word	0x000245a5
   1c9f4:	000245e9 	.word	0x000245e9
   1c9f8:	20000964 	.word	0x20000964
   1c9fc:	0001c8bd 	.word	0x0001c8bd

0001ca00 <ac_chan_set_config>:
 */
enum status_code ac_chan_set_config(
		struct ac_module *const module_inst,
		const enum ac_chan_channel channel,
		struct ac_chan_config *const config)
{
   1ca00:	b580      	push	{r7, lr}
   1ca02:	b086      	sub	sp, #24
   1ca04:	af00      	add	r7, sp, #0
   1ca06:	60f8      	str	r0, [r7, #12]
   1ca08:	607a      	str	r2, [r7, #4]
   1ca0a:	230b      	movs	r3, #11
   1ca0c:	18fb      	adds	r3, r7, r3
   1ca0e:	1c0a      	adds	r2, r1, #0
   1ca10:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(config);

	Ac *const ac_module = module_inst->hw;
   1ca12:	68fb      	ldr	r3, [r7, #12]
   1ca14:	681b      	ldr	r3, [r3, #0]
   1ca16:	613b      	str	r3, [r7, #16]

	/* Use a temporary variable to compute the comparator configuration */
	uint32_t compctrl_temp = 0;
   1ca18:	2300      	movs	r3, #0
   1ca1a:	617b      	str	r3, [r7, #20]

	/* Enable output filter mode */
	compctrl_temp |= config->filter;
   1ca1c:	687b      	ldr	r3, [r7, #4]
   1ca1e:	685b      	ldr	r3, [r3, #4]
   1ca20:	697a      	ldr	r2, [r7, #20]
   1ca22:	4313      	orrs	r3, r2
   1ca24:	617b      	str	r3, [r7, #20]

	/* Enable output hysteresis if required */
	if (config->enable_hysteresis == true) {
   1ca26:	687b      	ldr	r3, [r7, #4]
   1ca28:	7a1b      	ldrb	r3, [r3, #8]
   1ca2a:	2b00      	cmp	r3, #0
   1ca2c:	d004      	beq.n	1ca38 <ac_chan_set_config+0x38>
		compctrl_temp |= AC_COMPCTRL_HYST;
   1ca2e:	697b      	ldr	r3, [r7, #20]
   1ca30:	2280      	movs	r2, #128	; 0x80
   1ca32:	0312      	lsls	r2, r2, #12
   1ca34:	4313      	orrs	r3, r2
   1ca36:	617b      	str	r3, [r7, #20]
	}

	/* Set output signal routing mode */
	compctrl_temp |= config->output_mode;
   1ca38:	687b      	ldr	r3, [r7, #4]
   1ca3a:	68db      	ldr	r3, [r3, #12]
   1ca3c:	697a      	ldr	r2, [r7, #20]
   1ca3e:	4313      	orrs	r3, r2
   1ca40:	617b      	str	r3, [r7, #20]

	/* Configure comparator positive and negative pin MUX configurations */
	compctrl_temp |=
			(uint32_t)config->positive_input |
   1ca42:	687b      	ldr	r3, [r7, #4]
   1ca44:	8a1a      	ldrh	r2, [r3, #16]
			(uint32_t)config->negative_input;
   1ca46:	687b      	ldr	r3, [r7, #4]
   1ca48:	8a5b      	ldrh	r3, [r3, #18]
			(uint32_t)config->positive_input |
   1ca4a:	4313      	orrs	r3, r2
   1ca4c:	b29b      	uxth	r3, r3
   1ca4e:	001a      	movs	r2, r3
	compctrl_temp |=
   1ca50:	697b      	ldr	r3, [r7, #20]
   1ca52:	4313      	orrs	r3, r2
   1ca54:	617b      	str	r3, [r7, #20]

	/* Set sampling mode (single shot or continuous) */
	compctrl_temp |= config->sample_mode;
   1ca56:	687b      	ldr	r3, [r7, #4]
   1ca58:	781b      	ldrb	r3, [r3, #0]
   1ca5a:	001a      	movs	r2, r3
   1ca5c:	697b      	ldr	r3, [r7, #20]
   1ca5e:	4313      	orrs	r3, r2
   1ca60:	617b      	str	r3, [r7, #20]

	/* Set channel interrupt selection */
	compctrl_temp |= config->interrupt_selection;
   1ca62:	687b      	ldr	r3, [r7, #4]
   1ca64:	7d5b      	ldrb	r3, [r3, #21]
   1ca66:	001a      	movs	r2, r3
   1ca68:	697b      	ldr	r3, [r7, #20]
   1ca6a:	4313      	orrs	r3, r2
   1ca6c:	617b      	str	r3, [r7, #20]

	while (ac_is_syncing(module_inst)) {
   1ca6e:	46c0      	nop			; (mov r8, r8)
   1ca70:	68fb      	ldr	r3, [r7, #12]
   1ca72:	0018      	movs	r0, r3
   1ca74:	4b0e      	ldr	r3, [pc, #56]	; (1cab0 <ac_chan_set_config+0xb0>)
   1ca76:	4798      	blx	r3
   1ca78:	1e03      	subs	r3, r0, #0
   1ca7a:	d1f9      	bne.n	1ca70 <ac_chan_set_config+0x70>
		/* Wait until synchronization is complete */
	}

	/* Write the final configuration to the module's control register */
	ac_module->COMPCTRL[(uint8_t)channel].reg = compctrl_temp;
   1ca7c:	230b      	movs	r3, #11
   1ca7e:	18fb      	adds	r3, r7, r3
   1ca80:	781a      	ldrb	r2, [r3, #0]
   1ca82:	693b      	ldr	r3, [r7, #16]
   1ca84:	3204      	adds	r2, #4
   1ca86:	0092      	lsls	r2, r2, #2
   1ca88:	6979      	ldr	r1, [r7, #20]
   1ca8a:	50d1      	str	r1, [r2, r3]

	/* Configure VCC voltage scaling for the comparator */
	ac_module->SCALER[(uint8_t)channel].reg   = config->vcc_scale_factor - 1;
   1ca8c:	230b      	movs	r3, #11
   1ca8e:	18fb      	adds	r3, r7, r3
   1ca90:	781b      	ldrb	r3, [r3, #0]
   1ca92:	687a      	ldr	r2, [r7, #4]
   1ca94:	7d12      	ldrb	r2, [r2, #20]
   1ca96:	3a01      	subs	r2, #1
   1ca98:	b2d0      	uxtb	r0, r2
   1ca9a:	693a      	ldr	r2, [r7, #16]
   1ca9c:	2120      	movs	r1, #32
   1ca9e:	18d3      	adds	r3, r2, r3
   1caa0:	185b      	adds	r3, r3, r1
   1caa2:	1c02      	adds	r2, r0, #0
   1caa4:	701a      	strb	r2, [r3, #0]

	return STATUS_OK;
   1caa6:	2300      	movs	r3, #0
}
   1caa8:	0018      	movs	r0, r3
   1caaa:	46bd      	mov	sp, r7
   1caac:	b006      	add	sp, #24
   1caae:	bd80      	pop	{r7, pc}
   1cab0:	0001c895 	.word	0x0001c895

0001cab4 <system_gclk_chan_get_config_defaults>:
{
   1cab4:	b580      	push	{r7, lr}
   1cab6:	b082      	sub	sp, #8
   1cab8:	af00      	add	r7, sp, #0
   1caba:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   1cabc:	687b      	ldr	r3, [r7, #4]
   1cabe:	2200      	movs	r2, #0
   1cac0:	701a      	strb	r2, [r3, #0]
}
   1cac2:	46c0      	nop			; (mov r8, r8)
   1cac4:	46bd      	mov	sp, r7
   1cac6:	b002      	add	sp, #8
   1cac8:	bd80      	pop	{r7, pc}
	...

0001cacc <system_apb_clock_set_mask>:
{
   1cacc:	b580      	push	{r7, lr}
   1cace:	b082      	sub	sp, #8
   1cad0:	af00      	add	r7, sp, #0
   1cad2:	0002      	movs	r2, r0
   1cad4:	6039      	str	r1, [r7, #0]
   1cad6:	1dfb      	adds	r3, r7, #7
   1cad8:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   1cada:	1dfb      	adds	r3, r7, #7
   1cadc:	781b      	ldrb	r3, [r3, #0]
   1cade:	2b01      	cmp	r3, #1
   1cae0:	d00a      	beq.n	1caf8 <system_apb_clock_set_mask+0x2c>
   1cae2:	2b02      	cmp	r3, #2
   1cae4:	d00f      	beq.n	1cb06 <system_apb_clock_set_mask+0x3a>
   1cae6:	2b00      	cmp	r3, #0
   1cae8:	d114      	bne.n	1cb14 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   1caea:	4b0e      	ldr	r3, [pc, #56]	; (1cb24 <system_apb_clock_set_mask+0x58>)
   1caec:	4a0d      	ldr	r2, [pc, #52]	; (1cb24 <system_apb_clock_set_mask+0x58>)
   1caee:	6991      	ldr	r1, [r2, #24]
   1caf0:	683a      	ldr	r2, [r7, #0]
   1caf2:	430a      	orrs	r2, r1
   1caf4:	619a      	str	r2, [r3, #24]
			break;
   1caf6:	e00f      	b.n	1cb18 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   1caf8:	4b0a      	ldr	r3, [pc, #40]	; (1cb24 <system_apb_clock_set_mask+0x58>)
   1cafa:	4a0a      	ldr	r2, [pc, #40]	; (1cb24 <system_apb_clock_set_mask+0x58>)
   1cafc:	69d1      	ldr	r1, [r2, #28]
   1cafe:	683a      	ldr	r2, [r7, #0]
   1cb00:	430a      	orrs	r2, r1
   1cb02:	61da      	str	r2, [r3, #28]
			break;
   1cb04:	e008      	b.n	1cb18 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   1cb06:	4b07      	ldr	r3, [pc, #28]	; (1cb24 <system_apb_clock_set_mask+0x58>)
   1cb08:	4a06      	ldr	r2, [pc, #24]	; (1cb24 <system_apb_clock_set_mask+0x58>)
   1cb0a:	6a11      	ldr	r1, [r2, #32]
   1cb0c:	683a      	ldr	r2, [r7, #0]
   1cb0e:	430a      	orrs	r2, r1
   1cb10:	621a      	str	r2, [r3, #32]
			break;
   1cb12:	e001      	b.n	1cb18 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   1cb14:	2317      	movs	r3, #23
   1cb16:	e000      	b.n	1cb1a <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   1cb18:	2300      	movs	r3, #0
}
   1cb1a:	0018      	movs	r0, r3
   1cb1c:	46bd      	mov	sp, r7
   1cb1e:	b002      	add	sp, #8
   1cb20:	bd80      	pop	{r7, pc}
   1cb22:	46c0      	nop			; (mov r8, r8)
   1cb24:	40000400 	.word	0x40000400

0001cb28 <system_pinmux_get_config_defaults>:
{
   1cb28:	b580      	push	{r7, lr}
   1cb2a:	b082      	sub	sp, #8
   1cb2c:	af00      	add	r7, sp, #0
   1cb2e:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   1cb30:	687b      	ldr	r3, [r7, #4]
   1cb32:	2280      	movs	r2, #128	; 0x80
   1cb34:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   1cb36:	687b      	ldr	r3, [r7, #4]
   1cb38:	2200      	movs	r2, #0
   1cb3a:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   1cb3c:	687b      	ldr	r3, [r7, #4]
   1cb3e:	2201      	movs	r2, #1
   1cb40:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   1cb42:	687b      	ldr	r3, [r7, #4]
   1cb44:	2200      	movs	r2, #0
   1cb46:	70da      	strb	r2, [r3, #3]
}
   1cb48:	46c0      	nop			; (mov r8, r8)
   1cb4a:	46bd      	mov	sp, r7
   1cb4c:	b002      	add	sp, #8
   1cb4e:	bd80      	pop	{r7, pc}

0001cb50 <system_voltage_reference_enable>:
 *
 * \param[in] vref  Voltage reference to enable
 */
static inline void system_voltage_reference_enable(
		const enum system_voltage_reference vref)
{
   1cb50:	b580      	push	{r7, lr}
   1cb52:	b082      	sub	sp, #8
   1cb54:	af00      	add	r7, sp, #0
   1cb56:	0002      	movs	r2, r0
   1cb58:	1dfb      	adds	r3, r7, #7
   1cb5a:	701a      	strb	r2, [r3, #0]
	switch (vref) {
   1cb5c:	1dfb      	adds	r3, r7, #7
   1cb5e:	781b      	ldrb	r3, [r3, #0]
   1cb60:	2b00      	cmp	r3, #0
   1cb62:	d002      	beq.n	1cb6a <system_voltage_reference_enable+0x1a>
   1cb64:	2b01      	cmp	r3, #1
   1cb66:	d007      	beq.n	1cb78 <system_voltage_reference_enable+0x28>
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_BGOUTEN;
			break;

		default:
			Assert(false);
			return;
   1cb68:	e00d      	b.n	1cb86 <system_voltage_reference_enable+0x36>
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_TSEN;
   1cb6a:	4b08      	ldr	r3, [pc, #32]	; (1cb8c <system_voltage_reference_enable+0x3c>)
   1cb6c:	4a07      	ldr	r2, [pc, #28]	; (1cb8c <system_voltage_reference_enable+0x3c>)
   1cb6e:	6c12      	ldr	r2, [r2, #64]	; 0x40
   1cb70:	2102      	movs	r1, #2
   1cb72:	430a      	orrs	r2, r1
   1cb74:	641a      	str	r2, [r3, #64]	; 0x40
			break;
   1cb76:	e006      	b.n	1cb86 <system_voltage_reference_enable+0x36>
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_BGOUTEN;
   1cb78:	4b04      	ldr	r3, [pc, #16]	; (1cb8c <system_voltage_reference_enable+0x3c>)
   1cb7a:	4a04      	ldr	r2, [pc, #16]	; (1cb8c <system_voltage_reference_enable+0x3c>)
   1cb7c:	6c12      	ldr	r2, [r2, #64]	; 0x40
   1cb7e:	2104      	movs	r1, #4
   1cb80:	430a      	orrs	r2, r1
   1cb82:	641a      	str	r2, [r3, #64]	; 0x40
			break;
   1cb84:	46c0      	nop			; (mov r8, r8)
	}
}
   1cb86:	46bd      	mov	sp, r7
   1cb88:	b002      	add	sp, #8
   1cb8a:	bd80      	pop	{r7, pc}
   1cb8c:	40000800 	.word	0x40000800

0001cb90 <adc_is_syncing>:
{
   1cb90:	b580      	push	{r7, lr}
   1cb92:	b084      	sub	sp, #16
   1cb94:	af00      	add	r7, sp, #0
   1cb96:	6078      	str	r0, [r7, #4]
	Adc *const adc_module = module_inst->hw;
   1cb98:	687b      	ldr	r3, [r7, #4]
   1cb9a:	681b      	ldr	r3, [r3, #0]
   1cb9c:	60fb      	str	r3, [r7, #12]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
   1cb9e:	68fb      	ldr	r3, [r7, #12]
   1cba0:	7e5b      	ldrb	r3, [r3, #25]
   1cba2:	b2db      	uxtb	r3, r3
   1cba4:	b25b      	sxtb	r3, r3
   1cba6:	2b00      	cmp	r3, #0
   1cba8:	da01      	bge.n	1cbae <adc_is_syncing+0x1e>
		return true;
   1cbaa:	2301      	movs	r3, #1
   1cbac:	e000      	b.n	1cbb0 <adc_is_syncing+0x20>
	return false;
   1cbae:	2300      	movs	r3, #0
}
   1cbb0:	0018      	movs	r0, r3
   1cbb2:	46bd      	mov	sp, r7
   1cbb4:	b004      	add	sp, #16
   1cbb6:	bd80      	pop	{r7, pc}

0001cbb8 <adc_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration struct to initialize to
 *                     default values
 */
void adc_get_config_defaults(struct adc_config *const config)
{
   1cbb8:	b580      	push	{r7, lr}
   1cbba:	b082      	sub	sp, #8
   1cbbc:	af00      	add	r7, sp, #0
   1cbbe:	6078      	str	r0, [r7, #4]
	Assert(config);
	config->clock_source                  = GCLK_GENERATOR_0;
   1cbc0:	687b      	ldr	r3, [r7, #4]
   1cbc2:	2200      	movs	r2, #0
   1cbc4:	701a      	strb	r2, [r3, #0]
	config->reference                     = ADC_REFERENCE_INT1V;
   1cbc6:	687b      	ldr	r3, [r7, #4]
   1cbc8:	2200      	movs	r2, #0
   1cbca:	705a      	strb	r2, [r3, #1]
	config->clock_prescaler               = ADC_CLOCK_PRESCALER_DIV4;
   1cbcc:	687b      	ldr	r3, [r7, #4]
   1cbce:	2200      	movs	r2, #0
   1cbd0:	805a      	strh	r2, [r3, #2]
	config->resolution                    = ADC_RESOLUTION_12BIT;
   1cbd2:	687b      	ldr	r3, [r7, #4]
   1cbd4:	2200      	movs	r2, #0
   1cbd6:	711a      	strb	r2, [r3, #4]
	config->window.window_mode            = ADC_WINDOW_MODE_DISABLE;
   1cbd8:	687b      	ldr	r3, [r7, #4]
   1cbda:	2200      	movs	r2, #0
   1cbdc:	761a      	strb	r2, [r3, #24]
	config->window.window_upper_value     = 0;
   1cbde:	687b      	ldr	r3, [r7, #4]
   1cbe0:	2200      	movs	r2, #0
   1cbe2:	621a      	str	r2, [r3, #32]
	config->window.window_lower_value     = 0;
   1cbe4:	687b      	ldr	r3, [r7, #4]
   1cbe6:	2200      	movs	r2, #0
   1cbe8:	61da      	str	r2, [r3, #28]
	config->gain_factor                   = ADC_GAIN_FACTOR_1X;
   1cbea:	687b      	ldr	r3, [r7, #4]
   1cbec:	2200      	movs	r2, #0
   1cbee:	609a      	str	r2, [r3, #8]
#if SAMR21
	config->positive_input                = ADC_POSITIVE_INPUT_PIN6 ;
#else
 	config->positive_input                = ADC_POSITIVE_INPUT_PIN0 ;
   1cbf0:	687b      	ldr	r3, [r7, #4]
   1cbf2:	2200      	movs	r2, #0
   1cbf4:	731a      	strb	r2, [r3, #12]
#endif
	config->negative_input                = ADC_NEGATIVE_INPUT_GND ;
   1cbf6:	687b      	ldr	r3, [r7, #4]
   1cbf8:	22c0      	movs	r2, #192	; 0xc0
   1cbfa:	0152      	lsls	r2, r2, #5
   1cbfc:	81da      	strh	r2, [r3, #14]
	config->accumulate_samples            = ADC_ACCUMULATE_DISABLE;
   1cbfe:	687b      	ldr	r3, [r7, #4]
   1cc00:	2200      	movs	r2, #0
   1cc02:	741a      	strb	r2, [r3, #16]
	config->divide_result                 = ADC_DIVIDE_RESULT_DISABLE;
   1cc04:	687b      	ldr	r3, [r7, #4]
   1cc06:	2200      	movs	r2, #0
   1cc08:	745a      	strb	r2, [r3, #17]
	config->left_adjust                   = false;
   1cc0a:	687b      	ldr	r3, [r7, #4]
   1cc0c:	2200      	movs	r2, #0
   1cc0e:	749a      	strb	r2, [r3, #18]
	config->differential_mode             = false;
   1cc10:	687b      	ldr	r3, [r7, #4]
   1cc12:	2200      	movs	r2, #0
   1cc14:	74da      	strb	r2, [r3, #19]
	config->freerunning                   = false;
   1cc16:	687b      	ldr	r3, [r7, #4]
   1cc18:	2200      	movs	r2, #0
   1cc1a:	751a      	strb	r2, [r3, #20]
	config->event_action                  = ADC_EVENT_ACTION_DISABLED;
   1cc1c:	687b      	ldr	r3, [r7, #4]
   1cc1e:	222a      	movs	r2, #42	; 0x2a
   1cc20:	2100      	movs	r1, #0
   1cc22:	5499      	strb	r1, [r3, r2]
	config->run_in_standby                = false;
   1cc24:	687b      	ldr	r3, [r7, #4]
   1cc26:	2200      	movs	r2, #0
   1cc28:	755a      	strb	r2, [r3, #21]
	config->reference_compensation_enable = false;
   1cc2a:	687b      	ldr	r3, [r7, #4]
   1cc2c:	2200      	movs	r2, #0
   1cc2e:	759a      	strb	r2, [r3, #22]
	config->correction.correction_enable  = false;
   1cc30:	687b      	ldr	r3, [r7, #4]
   1cc32:	2224      	movs	r2, #36	; 0x24
   1cc34:	2100      	movs	r1, #0
   1cc36:	5499      	strb	r1, [r3, r2]
	config->correction.gain_correction    = ADC_GAINCORR_RESETVALUE;
   1cc38:	687b      	ldr	r3, [r7, #4]
   1cc3a:	2200      	movs	r2, #0
   1cc3c:	84da      	strh	r2, [r3, #38]	; 0x26
	config->correction.offset_correction  = ADC_OFFSETCORR_RESETVALUE;
   1cc3e:	687b      	ldr	r3, [r7, #4]
   1cc40:	2200      	movs	r2, #0
   1cc42:	851a      	strh	r2, [r3, #40]	; 0x28
	config->sample_length                 = 0;
   1cc44:	687b      	ldr	r3, [r7, #4]
   1cc46:	2200      	movs	r2, #0
   1cc48:	75da      	strb	r2, [r3, #23]
	config->pin_scan.offset_start_scan    = 0;
   1cc4a:	687b      	ldr	r3, [r7, #4]
   1cc4c:	222b      	movs	r2, #43	; 0x2b
   1cc4e:	2100      	movs	r1, #0
   1cc50:	5499      	strb	r1, [r3, r2]
	config->pin_scan.inputs_to_scan       = 0;
   1cc52:	687b      	ldr	r3, [r7, #4]
   1cc54:	222c      	movs	r2, #44	; 0x2c
   1cc56:	2100      	movs	r1, #0
   1cc58:	5499      	strb	r1, [r3, r2]
}
   1cc5a:	46c0      	nop			; (mov r8, r8)
   1cc5c:	46bd      	mov	sp, r7
   1cc5e:	b002      	add	sp, #8
   1cc60:	bd80      	pop	{r7, pc}
	...

0001cc64 <_adc_configure_ain_pin>:
* the ADC access to the analog signal
*
* \param [in] pin AINxx pin to configure
*/
static inline void _adc_configure_ain_pin(uint32_t pin)
{
   1cc64:	b580      	push	{r7, lr}
   1cc66:	b098      	sub	sp, #96	; 0x60
   1cc68:	af00      	add	r7, sp, #0
   1cc6a:	6078      	str	r0, [r7, #4]
#define PIN_INVALID_ADC_AIN    0xFFFFUL

	/* Pinmapping table for AINxx -> GPIO pin number */
	const uint32_t pinmapping[] = {
   1cc6c:	230c      	movs	r3, #12
   1cc6e:	18fa      	adds	r2, r7, r3
   1cc70:	4b15      	ldr	r3, [pc, #84]	; (1ccc8 <_adc_configure_ain_pin+0x64>)
   1cc72:	0010      	movs	r0, r2
   1cc74:	0019      	movs	r1, r3
   1cc76:	2350      	movs	r3, #80	; 0x50
   1cc78:	001a      	movs	r2, r3
   1cc7a:	4b14      	ldr	r3, [pc, #80]	; (1cccc <_adc_configure_ain_pin+0x68>)
   1cc7c:	4798      	blx	r3
#else
#  error ADC pin mappings are not defined for this device.
#endif
		};

	uint32_t pin_map_result = PIN_INVALID_ADC_AIN;
   1cc7e:	4b14      	ldr	r3, [pc, #80]	; (1ccd0 <_adc_configure_ain_pin+0x6c>)
   1cc80:	65fb      	str	r3, [r7, #92]	; 0x5c

	if (pin <= ADC_EXTCHANNEL_MSB) {
   1cc82:	687b      	ldr	r3, [r7, #4]
   1cc84:	2b13      	cmp	r3, #19
   1cc86:	d81a      	bhi.n	1ccbe <_adc_configure_ain_pin+0x5a>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
   1cc88:	230c      	movs	r3, #12
   1cc8a:	18fb      	adds	r3, r7, r3
   1cc8c:	687a      	ldr	r2, [r7, #4]
   1cc8e:	0092      	lsls	r2, r2, #2
   1cc90:	58d3      	ldr	r3, [r2, r3]
   1cc92:	65fb      	str	r3, [r7, #92]	; 0x5c

		Assert(pin_map_result != PIN_INVALID_ADC_AIN);

		struct system_pinmux_config config;
		system_pinmux_get_config_defaults(&config);
   1cc94:	2308      	movs	r3, #8
   1cc96:	18fb      	adds	r3, r7, r3
   1cc98:	0018      	movs	r0, r3
   1cc9a:	4b0e      	ldr	r3, [pc, #56]	; (1ccd4 <_adc_configure_ain_pin+0x70>)
   1cc9c:	4798      	blx	r3

		/* Analog functions are all on MUX setting B */
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
   1cc9e:	2308      	movs	r3, #8
   1cca0:	18fb      	adds	r3, r7, r3
   1cca2:	2200      	movs	r2, #0
   1cca4:	709a      	strb	r2, [r3, #2]
		config.mux_position = 1;
   1cca6:	2308      	movs	r3, #8
   1cca8:	18fb      	adds	r3, r7, r3
   1ccaa:	2201      	movs	r2, #1
   1ccac:	701a      	strb	r2, [r3, #0]

		system_pinmux_pin_set_config(pin_map_result, &config);
   1ccae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   1ccb0:	b2db      	uxtb	r3, r3
   1ccb2:	2208      	movs	r2, #8
   1ccb4:	18ba      	adds	r2, r7, r2
   1ccb6:	0011      	movs	r1, r2
   1ccb8:	0018      	movs	r0, r3
   1ccba:	4b07      	ldr	r3, [pc, #28]	; (1ccd8 <_adc_configure_ain_pin+0x74>)
   1ccbc:	4798      	blx	r3
	}
}
   1ccbe:	46c0      	nop			; (mov r8, r8)
   1ccc0:	46bd      	mov	sp, r7
   1ccc2:	b018      	add	sp, #96	; 0x60
   1ccc4:	bd80      	pop	{r7, pc}
   1ccc6:	46c0      	nop			; (mov r8, r8)
   1ccc8:	0002a4c0 	.word	0x0002a4c0
   1cccc:	000289c5 	.word	0x000289c5
   1ccd0:	0000ffff 	.word	0x0000ffff
   1ccd4:	0001cb29 	.word	0x0001cb29
   1ccd8:	00024891 	.word	0x00024891

0001ccdc <_adc_set_config>:
 * \retval STATUS_ERR_INVALID_ARG  Invalid argument(s) were provided
 */
static enum status_code _adc_set_config(
		struct adc_module *const module_inst,
		struct adc_config *const config)
{
   1ccdc:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ccde:	b089      	sub	sp, #36	; 0x24
   1cce0:	af00      	add	r7, sp, #0
   1cce2:	6078      	str	r0, [r7, #4]
   1cce4:	6039      	str	r1, [r7, #0]
	uint8_t adjres = 0;
   1cce6:	231f      	movs	r3, #31
   1cce8:	18fb      	adds	r3, r7, r3
   1ccea:	2200      	movs	r2, #0
   1ccec:	701a      	strb	r2, [r3, #0]
	uint32_t resolution = ADC_RESOLUTION_16BIT;
   1ccee:	2310      	movs	r3, #16
   1ccf0:	61bb      	str	r3, [r7, #24]
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
   1ccf2:	2317      	movs	r3, #23
   1ccf4:	18fb      	adds	r3, r7, r3
   1ccf6:	2200      	movs	r2, #0
   1ccf8:	701a      	strb	r2, [r3, #0]
#if SAMD20
	uint8_t revision_num = ((REG_DSU_DID & DSU_DID_REVISION_Msk) >> DSU_DID_REVISION_Pos);
#endif

	/* Get the hardware module pointer */
	Adc *const adc_module = module_inst->hw;
   1ccfa:	687b      	ldr	r3, [r7, #4]
   1ccfc:	681b      	ldr	r3, [r3, #0]
   1ccfe:	613b      	str	r3, [r7, #16]

	/* Configure GCLK channel and enable clock */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   1cd00:	230c      	movs	r3, #12
   1cd02:	18fb      	adds	r3, r7, r3
   1cd04:	0018      	movs	r0, r3
   1cd06:	4bce      	ldr	r3, [pc, #824]	; (1d040 <_adc_set_config+0x364>)
   1cd08:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->clock_source;
   1cd0a:	683b      	ldr	r3, [r7, #0]
   1cd0c:	781a      	ldrb	r2, [r3, #0]
   1cd0e:	230c      	movs	r3, #12
   1cd10:	18fb      	adds	r3, r7, r3
   1cd12:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(ADC_GCLK_ID, &gclk_chan_conf);
   1cd14:	230c      	movs	r3, #12
   1cd16:	18fb      	adds	r3, r7, r3
   1cd18:	0019      	movs	r1, r3
   1cd1a:	201e      	movs	r0, #30
   1cd1c:	4bc9      	ldr	r3, [pc, #804]	; (1d044 <_adc_set_config+0x368>)
   1cd1e:	4798      	blx	r3
	system_gclk_chan_enable(ADC_GCLK_ID);
   1cd20:	201e      	movs	r0, #30
   1cd22:	4bc9      	ldr	r3, [pc, #804]	; (1d048 <_adc_set_config+0x36c>)
   1cd24:	4798      	blx	r3

	/* Setup pinmuxing for analog inputs */
	if (config->pin_scan.inputs_to_scan != 0) {
   1cd26:	683b      	ldr	r3, [r7, #0]
   1cd28:	222c      	movs	r2, #44	; 0x2c
   1cd2a:	5c9b      	ldrb	r3, [r3, r2]
   1cd2c:	2b00      	cmp	r3, #0
   1cd2e:	d040      	beq.n	1cdb2 <_adc_set_config+0xd6>
		uint8_t offset = config->pin_scan.offset_start_scan;
   1cd30:	2316      	movs	r3, #22
   1cd32:	18fb      	adds	r3, r7, r3
   1cd34:	683a      	ldr	r2, [r7, #0]
   1cd36:	212b      	movs	r1, #43	; 0x2b
   1cd38:	5c52      	ldrb	r2, [r2, r1]
   1cd3a:	701a      	strb	r2, [r3, #0]
		uint8_t start_pin =
				offset +(uint8_t)config->positive_input;
   1cd3c:	683b      	ldr	r3, [r7, #0]
   1cd3e:	7b19      	ldrb	r1, [r3, #12]
		uint8_t start_pin =
   1cd40:	2315      	movs	r3, #21
   1cd42:	18fb      	adds	r3, r7, r3
   1cd44:	2216      	movs	r2, #22
   1cd46:	18ba      	adds	r2, r7, r2
   1cd48:	7812      	ldrb	r2, [r2, #0]
   1cd4a:	188a      	adds	r2, r1, r2
   1cd4c:	701a      	strb	r2, [r3, #0]
		uint8_t end_pin =
				start_pin + config->pin_scan.inputs_to_scan;
   1cd4e:	683b      	ldr	r3, [r7, #0]
   1cd50:	222c      	movs	r2, #44	; 0x2c
   1cd52:	5c99      	ldrb	r1, [r3, r2]
		uint8_t end_pin =
   1cd54:	230f      	movs	r3, #15
   1cd56:	18fb      	adds	r3, r7, r3
   1cd58:	2215      	movs	r2, #21
   1cd5a:	18ba      	adds	r2, r7, r2
   1cd5c:	7812      	ldrb	r2, [r2, #0]
   1cd5e:	188a      	adds	r2, r1, r2
   1cd60:	701a      	strb	r2, [r3, #0]

		while (start_pin < end_pin) {
   1cd62:	e018      	b.n	1cd96 <_adc_set_config+0xba>
			_adc_configure_ain_pin((offset % 16)+(uint8_t)config->positive_input);
   1cd64:	2316      	movs	r3, #22
   1cd66:	18fb      	adds	r3, r7, r3
   1cd68:	781b      	ldrb	r3, [r3, #0]
   1cd6a:	220f      	movs	r2, #15
   1cd6c:	4013      	ands	r3, r2
   1cd6e:	683a      	ldr	r2, [r7, #0]
   1cd70:	7b12      	ldrb	r2, [r2, #12]
   1cd72:	189b      	adds	r3, r3, r2
   1cd74:	0018      	movs	r0, r3
   1cd76:	4bb5      	ldr	r3, [pc, #724]	; (1d04c <_adc_set_config+0x370>)
   1cd78:	4798      	blx	r3
			start_pin++;
   1cd7a:	2315      	movs	r3, #21
   1cd7c:	18fb      	adds	r3, r7, r3
   1cd7e:	781a      	ldrb	r2, [r3, #0]
   1cd80:	2315      	movs	r3, #21
   1cd82:	18fb      	adds	r3, r7, r3
   1cd84:	3201      	adds	r2, #1
   1cd86:	701a      	strb	r2, [r3, #0]
			offset++;
   1cd88:	2316      	movs	r3, #22
   1cd8a:	18fb      	adds	r3, r7, r3
   1cd8c:	781a      	ldrb	r2, [r3, #0]
   1cd8e:	2316      	movs	r3, #22
   1cd90:	18fb      	adds	r3, r7, r3
   1cd92:	3201      	adds	r2, #1
   1cd94:	701a      	strb	r2, [r3, #0]
		while (start_pin < end_pin) {
   1cd96:	2315      	movs	r3, #21
   1cd98:	18fa      	adds	r2, r7, r3
   1cd9a:	230f      	movs	r3, #15
   1cd9c:	18fb      	adds	r3, r7, r3
   1cd9e:	7812      	ldrb	r2, [r2, #0]
   1cda0:	781b      	ldrb	r3, [r3, #0]
   1cda2:	429a      	cmp	r2, r3
   1cda4:	d3de      	bcc.n	1cd64 <_adc_set_config+0x88>
		}
		_adc_configure_ain_pin(config->negative_input);
   1cda6:	683b      	ldr	r3, [r7, #0]
   1cda8:	89db      	ldrh	r3, [r3, #14]
   1cdaa:	0018      	movs	r0, r3
   1cdac:	4ba7      	ldr	r3, [pc, #668]	; (1d04c <_adc_set_config+0x370>)
   1cdae:	4798      	blx	r3
   1cdb0:	e009      	b.n	1cdc6 <_adc_set_config+0xea>
	} else {
		_adc_configure_ain_pin(config->positive_input);
   1cdb2:	683b      	ldr	r3, [r7, #0]
   1cdb4:	7b1b      	ldrb	r3, [r3, #12]
   1cdb6:	0018      	movs	r0, r3
   1cdb8:	4ba4      	ldr	r3, [pc, #656]	; (1d04c <_adc_set_config+0x370>)
   1cdba:	4798      	blx	r3
		_adc_configure_ain_pin(config->negative_input);
   1cdbc:	683b      	ldr	r3, [r7, #0]
   1cdbe:	89db      	ldrh	r3, [r3, #14]
   1cdc0:	0018      	movs	r0, r3
   1cdc2:	4ba2      	ldr	r3, [pc, #648]	; (1d04c <_adc_set_config+0x370>)
   1cdc4:	4798      	blx	r3
	}

	/* Configure run in standby */
	adc_module->CTRLA.reg = (config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos);
   1cdc6:	683b      	ldr	r3, [r7, #0]
   1cdc8:	7d5b      	ldrb	r3, [r3, #21]
   1cdca:	009b      	lsls	r3, r3, #2
   1cdcc:	b2da      	uxtb	r2, r3
   1cdce:	693b      	ldr	r3, [r7, #16]
   1cdd0:	701a      	strb	r2, [r3, #0]

	/* Configure reference */
	adc_module->REFCTRL.reg =
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
   1cdd2:	683b      	ldr	r3, [r7, #0]
   1cdd4:	7d9b      	ldrb	r3, [r3, #22]
   1cdd6:	01db      	lsls	r3, r3, #7
   1cdd8:	b25a      	sxtb	r2, r3
			(config->reference);
   1cdda:	683b      	ldr	r3, [r7, #0]
   1cddc:	785b      	ldrb	r3, [r3, #1]
   1cdde:	b25b      	sxtb	r3, r3
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
   1cde0:	4313      	orrs	r3, r2
   1cde2:	b25b      	sxtb	r3, r3
   1cde4:	b2da      	uxtb	r2, r3
	adc_module->REFCTRL.reg =
   1cde6:	693b      	ldr	r3, [r7, #16]
   1cde8:	705a      	strb	r2, [r3, #1]

	/* Set adjusting result and number of samples */
	switch (config->resolution) {
   1cdea:	683b      	ldr	r3, [r7, #0]
   1cdec:	791b      	ldrb	r3, [r3, #4]
   1cdee:	2b34      	cmp	r3, #52	; 0x34
   1cdf0:	d846      	bhi.n	1ce80 <_adc_set_config+0x1a4>
   1cdf2:	009a      	lsls	r2, r3, #2
   1cdf4:	4b96      	ldr	r3, [pc, #600]	; (1d050 <_adc_set_config+0x374>)
   1cdf6:	18d3      	adds	r3, r2, r3
   1cdf8:	681b      	ldr	r3, [r3, #0]
   1cdfa:	469f      	mov	pc, r3

	case ADC_RESOLUTION_CUSTOM:
		adjres = config->divide_result;
   1cdfc:	231f      	movs	r3, #31
   1cdfe:	18fb      	adds	r3, r7, r3
   1ce00:	683a      	ldr	r2, [r7, #0]
   1ce02:	7c52      	ldrb	r2, [r2, #17]
   1ce04:	701a      	strb	r2, [r3, #0]
		accumulate = config->accumulate_samples;
   1ce06:	2317      	movs	r3, #23
   1ce08:	18fb      	adds	r3, r7, r3
   1ce0a:	683a      	ldr	r2, [r7, #0]
   1ce0c:	7c12      	ldrb	r2, [r2, #16]
   1ce0e:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
   1ce10:	2310      	movs	r3, #16
   1ce12:	61bb      	str	r3, [r7, #24]
		break;
   1ce14:	e036      	b.n	1ce84 <_adc_set_config+0x1a8>

	case ADC_RESOLUTION_13BIT:
		/* Increase resolution by 1 bit */
		adjres = ADC_DIVIDE_RESULT_2;
   1ce16:	231f      	movs	r3, #31
   1ce18:	18fb      	adds	r3, r7, r3
   1ce1a:	2201      	movs	r2, #1
   1ce1c:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_4;
   1ce1e:	2317      	movs	r3, #23
   1ce20:	18fb      	adds	r3, r7, r3
   1ce22:	2202      	movs	r2, #2
   1ce24:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
   1ce26:	2310      	movs	r3, #16
   1ce28:	61bb      	str	r3, [r7, #24]
		break;
   1ce2a:	e02b      	b.n	1ce84 <_adc_set_config+0x1a8>

	case ADC_RESOLUTION_14BIT:
		/* Increase resolution by 2 bit */
		adjres = ADC_DIVIDE_RESULT_4;
   1ce2c:	231f      	movs	r3, #31
   1ce2e:	18fb      	adds	r3, r7, r3
   1ce30:	2202      	movs	r2, #2
   1ce32:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_16;
   1ce34:	2317      	movs	r3, #23
   1ce36:	18fb      	adds	r3, r7, r3
   1ce38:	2204      	movs	r2, #4
   1ce3a:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
   1ce3c:	2310      	movs	r3, #16
   1ce3e:	61bb      	str	r3, [r7, #24]
		break;
   1ce40:	e020      	b.n	1ce84 <_adc_set_config+0x1a8>
		resolution = ADC_RESOLUTION_16BIT;
		break;
#else
	case ADC_RESOLUTION_15BIT:
		/* Increase resolution by 3 bit */
		adjres = ADC_DIVIDE_RESULT_2;
   1ce42:	231f      	movs	r3, #31
   1ce44:	18fb      	adds	r3, r7, r3
   1ce46:	2201      	movs	r2, #1
   1ce48:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_64;
   1ce4a:	2317      	movs	r3, #23
   1ce4c:	18fb      	adds	r3, r7, r3
   1ce4e:	2206      	movs	r2, #6
   1ce50:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
   1ce52:	2310      	movs	r3, #16
   1ce54:	61bb      	str	r3, [r7, #24]
		break;
   1ce56:	e015      	b.n	1ce84 <_adc_set_config+0x1a8>

	case ADC_RESOLUTION_16BIT:
		/* Increase resolution by 4 bit */
		adjres = ADC_DIVIDE_RESULT_DISABLE;
   1ce58:	231f      	movs	r3, #31
   1ce5a:	18fb      	adds	r3, r7, r3
   1ce5c:	2200      	movs	r2, #0
   1ce5e:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_256;
   1ce60:	2317      	movs	r3, #23
   1ce62:	18fb      	adds	r3, r7, r3
   1ce64:	2208      	movs	r2, #8
   1ce66:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
   1ce68:	2310      	movs	r3, #16
   1ce6a:	61bb      	str	r3, [r7, #24]
		break;
   1ce6c:	e00a      	b.n	1ce84 <_adc_set_config+0x1a8>
#endif
	case ADC_RESOLUTION_8BIT:
		/* 8-bit result register */
		resolution = ADC_RESOLUTION_8BIT;
   1ce6e:	2330      	movs	r3, #48	; 0x30
   1ce70:	61bb      	str	r3, [r7, #24]
		break;
   1ce72:	e007      	b.n	1ce84 <_adc_set_config+0x1a8>
	case ADC_RESOLUTION_10BIT:
		/* 10-bit result register */
		resolution = ADC_RESOLUTION_10BIT;
   1ce74:	2320      	movs	r3, #32
   1ce76:	61bb      	str	r3, [r7, #24]
		break;
   1ce78:	e004      	b.n	1ce84 <_adc_set_config+0x1a8>
	case ADC_RESOLUTION_12BIT:
		/* 12-bit result register */
		resolution = ADC_RESOLUTION_12BIT;
   1ce7a:	2300      	movs	r3, #0
   1ce7c:	61bb      	str	r3, [r7, #24]
		break;
   1ce7e:	e001      	b.n	1ce84 <_adc_set_config+0x1a8>

	default:
		/* Unknown. Abort. */
		return STATUS_ERR_INVALID_ARG;
   1ce80:	2317      	movs	r3, #23
   1ce82:	e1ae      	b.n	1d1e2 <_adc_set_config+0x506>
	}

	adc_module->AVGCTRL.reg = ADC_AVGCTRL_ADJRES(adjres) | accumulate;
   1ce84:	231f      	movs	r3, #31
   1ce86:	18fb      	adds	r3, r7, r3
   1ce88:	781b      	ldrb	r3, [r3, #0]
   1ce8a:	011b      	lsls	r3, r3, #4
   1ce8c:	b2db      	uxtb	r3, r3
   1ce8e:	2270      	movs	r2, #112	; 0x70
   1ce90:	4013      	ands	r3, r2
   1ce92:	b2da      	uxtb	r2, r3
   1ce94:	2317      	movs	r3, #23
   1ce96:	18fb      	adds	r3, r7, r3
   1ce98:	781b      	ldrb	r3, [r3, #0]
   1ce9a:	4313      	orrs	r3, r2
   1ce9c:	b2da      	uxtb	r2, r3
   1ce9e:	693b      	ldr	r3, [r7, #16]
   1cea0:	709a      	strb	r2, [r3, #2]

	/* Check validity of sample length value */
	if (config->sample_length > 63) {
   1cea2:	683b      	ldr	r3, [r7, #0]
   1cea4:	7ddb      	ldrb	r3, [r3, #23]
   1cea6:	2b3f      	cmp	r3, #63	; 0x3f
   1cea8:	d901      	bls.n	1ceae <_adc_set_config+0x1d2>
		return STATUS_ERR_INVALID_ARG;
   1ceaa:	2317      	movs	r3, #23
   1ceac:	e199      	b.n	1d1e2 <_adc_set_config+0x506>
	} else {
		/* Configure sample length */
		adc_module->SAMPCTRL.reg =
				(config->sample_length << ADC_SAMPCTRL_SAMPLEN_Pos);
   1ceae:	683b      	ldr	r3, [r7, #0]
   1ceb0:	7dda      	ldrb	r2, [r3, #23]
		adc_module->SAMPCTRL.reg =
   1ceb2:	693b      	ldr	r3, [r7, #16]
   1ceb4:	70da      	strb	r2, [r3, #3]
	}

	while (adc_is_syncing(module_inst)) {
   1ceb6:	46c0      	nop			; (mov r8, r8)
   1ceb8:	687b      	ldr	r3, [r7, #4]
   1ceba:	0018      	movs	r0, r3
   1cebc:	4b65      	ldr	r3, [pc, #404]	; (1d054 <_adc_set_config+0x378>)
   1cebe:	4798      	blx	r3
   1cec0:	1e03      	subs	r3, r0, #0
   1cec2:	d1f9      	bne.n	1ceb8 <_adc_set_config+0x1dc>
		/* Wait for synchronization */
	}

	/* Configure CTRLB */
	adc_module->CTRLB.reg =
			config->clock_prescaler |
   1cec4:	683b      	ldr	r3, [r7, #0]
   1cec6:	885a      	ldrh	r2, [r3, #2]
   1cec8:	69bb      	ldr	r3, [r7, #24]
   1ceca:	b29b      	uxth	r3, r3
   1cecc:	4313      	orrs	r3, r2
   1cece:	b29a      	uxth	r2, r3
			resolution |
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
   1ced0:	683b      	ldr	r3, [r7, #0]
   1ced2:	2124      	movs	r1, #36	; 0x24
   1ced4:	5c5b      	ldrb	r3, [r3, r1]
   1ced6:	b29b      	uxth	r3, r3
   1ced8:	00db      	lsls	r3, r3, #3
   1ceda:	b29b      	uxth	r3, r3
			resolution |
   1cedc:	4313      	orrs	r3, r2
   1cede:	b29a      	uxth	r2, r3
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
   1cee0:	683b      	ldr	r3, [r7, #0]
   1cee2:	7d1b      	ldrb	r3, [r3, #20]
   1cee4:	b29b      	uxth	r3, r3
   1cee6:	009b      	lsls	r3, r3, #2
   1cee8:	b29b      	uxth	r3, r3
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
   1ceea:	4313      	orrs	r3, r2
   1ceec:	b29a      	uxth	r2, r3
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
   1ceee:	683b      	ldr	r3, [r7, #0]
   1cef0:	7c9b      	ldrb	r3, [r3, #18]
   1cef2:	b29b      	uxth	r3, r3
   1cef4:	18db      	adds	r3, r3, r3
   1cef6:	b29b      	uxth	r3, r3
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
   1cef8:	4313      	orrs	r3, r2
   1cefa:	b29a      	uxth	r2, r3
			(config->differential_mode << ADC_CTRLB_DIFFMODE_Pos);
   1cefc:	683b      	ldr	r3, [r7, #0]
   1cefe:	7cdb      	ldrb	r3, [r3, #19]
   1cf00:	b29b      	uxth	r3, r3
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
   1cf02:	4313      	orrs	r3, r2
   1cf04:	b29a      	uxth	r2, r3
	adc_module->CTRLB.reg =
   1cf06:	693b      	ldr	r3, [r7, #16]
   1cf08:	809a      	strh	r2, [r3, #4]

	/* Check validity of window thresholds */
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
   1cf0a:	683b      	ldr	r3, [r7, #0]
   1cf0c:	7e1b      	ldrb	r3, [r3, #24]
   1cf0e:	2b00      	cmp	r3, #0
   1cf10:	d100      	bne.n	1cf14 <_adc_set_config+0x238>
   1cf12:	e0c4      	b.n	1d09e <_adc_set_config+0x3c2>
		switch (resolution) {
   1cf14:	69bb      	ldr	r3, [r7, #24]
   1cf16:	2b10      	cmp	r3, #16
   1cf18:	d100      	bne.n	1cf1c <_adc_set_config+0x240>
   1cf1a:	e076      	b.n	1d00a <_adc_set_config+0x32e>
   1cf1c:	d802      	bhi.n	1cf24 <_adc_set_config+0x248>
   1cf1e:	2b00      	cmp	r3, #0
   1cf20:	d04d      	beq.n	1cfbe <_adc_set_config+0x2e2>
   1cf22:	e0bc      	b.n	1d09e <_adc_set_config+0x3c2>
   1cf24:	2b20      	cmp	r3, #32
   1cf26:	d023      	beq.n	1cf70 <_adc_set_config+0x294>
   1cf28:	2b30      	cmp	r3, #48	; 0x30
   1cf2a:	d000      	beq.n	1cf2e <_adc_set_config+0x252>
   1cf2c:	e0b7      	b.n	1d09e <_adc_set_config+0x3c2>
		case ADC_RESOLUTION_8BIT:
			if (config->differential_mode &&
   1cf2e:	683b      	ldr	r3, [r7, #0]
   1cf30:	7cdb      	ldrb	r3, [r3, #19]
   1cf32:	2b00      	cmp	r3, #0
   1cf34:	d011      	beq.n	1cf5a <_adc_set_config+0x27e>
					(config->window.window_lower_value > 127 ||
   1cf36:	683b      	ldr	r3, [r7, #0]
   1cf38:	69db      	ldr	r3, [r3, #28]
			if (config->differential_mode &&
   1cf3a:	2b7f      	cmp	r3, #127	; 0x7f
   1cf3c:	dc0b      	bgt.n	1cf56 <_adc_set_config+0x27a>
					config->window.window_lower_value < -128 ||
   1cf3e:	683b      	ldr	r3, [r7, #0]
   1cf40:	69db      	ldr	r3, [r3, #28]
					(config->window.window_lower_value > 127 ||
   1cf42:	3380      	adds	r3, #128	; 0x80
   1cf44:	db07      	blt.n	1cf56 <_adc_set_config+0x27a>
					config->window.window_upper_value > 127 ||
   1cf46:	683b      	ldr	r3, [r7, #0]
   1cf48:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_lower_value < -128 ||
   1cf4a:	2b7f      	cmp	r3, #127	; 0x7f
   1cf4c:	dc03      	bgt.n	1cf56 <_adc_set_config+0x27a>
					config->window.window_upper_value < -128)) {
   1cf4e:	683b      	ldr	r3, [r7, #0]
   1cf50:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_upper_value > 127 ||
   1cf52:	3380      	adds	r3, #128	; 0x80
   1cf54:	da01      	bge.n	1cf5a <_adc_set_config+0x27e>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
   1cf56:	2317      	movs	r3, #23
   1cf58:	e143      	b.n	1d1e2 <_adc_set_config+0x506>
			} else if (config->window.window_lower_value > 255 ||
   1cf5a:	683b      	ldr	r3, [r7, #0]
   1cf5c:	69db      	ldr	r3, [r3, #28]
   1cf5e:	2bff      	cmp	r3, #255	; 0xff
   1cf60:	dc04      	bgt.n	1cf6c <_adc_set_config+0x290>
					config->window.window_upper_value > 255){
   1cf62:	683b      	ldr	r3, [r7, #0]
   1cf64:	6a1b      	ldr	r3, [r3, #32]
			} else if (config->window.window_lower_value > 255 ||
   1cf66:	2bff      	cmp	r3, #255	; 0xff
   1cf68:	dc00      	bgt.n	1cf6c <_adc_set_config+0x290>
   1cf6a:	e091      	b.n	1d090 <_adc_set_config+0x3b4>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
   1cf6c:	2317      	movs	r3, #23
   1cf6e:	e138      	b.n	1d1e2 <_adc_set_config+0x506>
			}
			break;
		case ADC_RESOLUTION_10BIT:
			if (config->differential_mode &&
   1cf70:	683b      	ldr	r3, [r7, #0]
   1cf72:	7cdb      	ldrb	r3, [r3, #19]
   1cf74:	2b00      	cmp	r3, #0
   1cf76:	d015      	beq.n	1cfa4 <_adc_set_config+0x2c8>
					(config->window.window_lower_value > 511 ||
   1cf78:	683b      	ldr	r3, [r7, #0]
   1cf7a:	69db      	ldr	r3, [r3, #28]
			if (config->differential_mode &&
   1cf7c:	4a36      	ldr	r2, [pc, #216]	; (1d058 <_adc_set_config+0x37c>)
   1cf7e:	4293      	cmp	r3, r2
   1cf80:	dc0e      	bgt.n	1cfa0 <_adc_set_config+0x2c4>
					config->window.window_lower_value < -512 ||
   1cf82:	683b      	ldr	r3, [r7, #0]
   1cf84:	69db      	ldr	r3, [r3, #28]
					(config->window.window_lower_value > 511 ||
   1cf86:	4a35      	ldr	r2, [pc, #212]	; (1d05c <_adc_set_config+0x380>)
   1cf88:	4293      	cmp	r3, r2
   1cf8a:	db09      	blt.n	1cfa0 <_adc_set_config+0x2c4>
					config->window.window_upper_value > 511 ||
   1cf8c:	683b      	ldr	r3, [r7, #0]
   1cf8e:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_lower_value < -512 ||
   1cf90:	4a31      	ldr	r2, [pc, #196]	; (1d058 <_adc_set_config+0x37c>)
   1cf92:	4293      	cmp	r3, r2
   1cf94:	dc04      	bgt.n	1cfa0 <_adc_set_config+0x2c4>
					config->window.window_upper_value < -512)) {
   1cf96:	683b      	ldr	r3, [r7, #0]
   1cf98:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_upper_value > 511 ||
   1cf9a:	4a30      	ldr	r2, [pc, #192]	; (1d05c <_adc_set_config+0x380>)
   1cf9c:	4293      	cmp	r3, r2
   1cf9e:	da01      	bge.n	1cfa4 <_adc_set_config+0x2c8>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
   1cfa0:	2317      	movs	r3, #23
   1cfa2:	e11e      	b.n	1d1e2 <_adc_set_config+0x506>
			} else if (config->window.window_lower_value > 1023 ||
   1cfa4:	683b      	ldr	r3, [r7, #0]
   1cfa6:	69db      	ldr	r3, [r3, #28]
   1cfa8:	4a2d      	ldr	r2, [pc, #180]	; (1d060 <_adc_set_config+0x384>)
   1cfaa:	4293      	cmp	r3, r2
   1cfac:	dc05      	bgt.n	1cfba <_adc_set_config+0x2de>
					config->window.window_upper_value > 1023){
   1cfae:	683b      	ldr	r3, [r7, #0]
   1cfb0:	6a1b      	ldr	r3, [r3, #32]
			} else if (config->window.window_lower_value > 1023 ||
   1cfb2:	4a2b      	ldr	r2, [pc, #172]	; (1d060 <_adc_set_config+0x384>)
   1cfb4:	4293      	cmp	r3, r2
   1cfb6:	dc00      	bgt.n	1cfba <_adc_set_config+0x2de>
   1cfb8:	e06c      	b.n	1d094 <_adc_set_config+0x3b8>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
   1cfba:	2317      	movs	r3, #23
   1cfbc:	e111      	b.n	1d1e2 <_adc_set_config+0x506>
			}
			break;
		case ADC_RESOLUTION_12BIT:
			if (config->differential_mode &&
   1cfbe:	683b      	ldr	r3, [r7, #0]
   1cfc0:	7cdb      	ldrb	r3, [r3, #19]
   1cfc2:	2b00      	cmp	r3, #0
   1cfc4:	d015      	beq.n	1cff2 <_adc_set_config+0x316>
					(config->window.window_lower_value > 2047 ||
   1cfc6:	683b      	ldr	r3, [r7, #0]
   1cfc8:	69db      	ldr	r3, [r3, #28]
			if (config->differential_mode &&
   1cfca:	4a26      	ldr	r2, [pc, #152]	; (1d064 <_adc_set_config+0x388>)
   1cfcc:	4293      	cmp	r3, r2
   1cfce:	dc0e      	bgt.n	1cfee <_adc_set_config+0x312>
					config->window.window_lower_value < -2048 ||
   1cfd0:	683b      	ldr	r3, [r7, #0]
   1cfd2:	69db      	ldr	r3, [r3, #28]
					(config->window.window_lower_value > 2047 ||
   1cfd4:	4a24      	ldr	r2, [pc, #144]	; (1d068 <_adc_set_config+0x38c>)
   1cfd6:	4293      	cmp	r3, r2
   1cfd8:	db09      	blt.n	1cfee <_adc_set_config+0x312>
					config->window.window_upper_value > 2047 ||
   1cfda:	683b      	ldr	r3, [r7, #0]
   1cfdc:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_lower_value < -2048 ||
   1cfde:	4a21      	ldr	r2, [pc, #132]	; (1d064 <_adc_set_config+0x388>)
   1cfe0:	4293      	cmp	r3, r2
   1cfe2:	dc04      	bgt.n	1cfee <_adc_set_config+0x312>
					config->window.window_upper_value < -2048)) {
   1cfe4:	683b      	ldr	r3, [r7, #0]
   1cfe6:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_upper_value > 2047 ||
   1cfe8:	4a1f      	ldr	r2, [pc, #124]	; (1d068 <_adc_set_config+0x38c>)
   1cfea:	4293      	cmp	r3, r2
   1cfec:	da01      	bge.n	1cff2 <_adc_set_config+0x316>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
   1cfee:	2317      	movs	r3, #23
   1cff0:	e0f7      	b.n	1d1e2 <_adc_set_config+0x506>
			} else if (config->window.window_lower_value > 4095 ||
   1cff2:	683b      	ldr	r3, [r7, #0]
   1cff4:	69db      	ldr	r3, [r3, #28]
   1cff6:	4a1d      	ldr	r2, [pc, #116]	; (1d06c <_adc_set_config+0x390>)
   1cff8:	4293      	cmp	r3, r2
   1cffa:	dc04      	bgt.n	1d006 <_adc_set_config+0x32a>
					config->window.window_upper_value > 4095){
   1cffc:	683b      	ldr	r3, [r7, #0]
   1cffe:	6a1b      	ldr	r3, [r3, #32]
			} else if (config->window.window_lower_value > 4095 ||
   1d000:	4a1a      	ldr	r2, [pc, #104]	; (1d06c <_adc_set_config+0x390>)
   1d002:	4293      	cmp	r3, r2
   1d004:	dd48      	ble.n	1d098 <_adc_set_config+0x3bc>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
   1d006:	2317      	movs	r3, #23
   1d008:	e0eb      	b.n	1d1e2 <_adc_set_config+0x506>
			}
			break;
		case ADC_RESOLUTION_16BIT:
			if (config->differential_mode &&
   1d00a:	683b      	ldr	r3, [r7, #0]
   1d00c:	7cdb      	ldrb	r3, [r3, #19]
   1d00e:	2b00      	cmp	r3, #0
   1d010:	d032      	beq.n	1d078 <_adc_set_config+0x39c>
					(config->window.window_lower_value > 32767 ||
   1d012:	683b      	ldr	r3, [r7, #0]
   1d014:	69db      	ldr	r3, [r3, #28]
			if (config->differential_mode &&
   1d016:	4a16      	ldr	r2, [pc, #88]	; (1d070 <_adc_set_config+0x394>)
   1d018:	4293      	cmp	r3, r2
   1d01a:	dc0e      	bgt.n	1d03a <_adc_set_config+0x35e>
					config->window.window_lower_value < -32768 ||
   1d01c:	683b      	ldr	r3, [r7, #0]
   1d01e:	69db      	ldr	r3, [r3, #28]
					(config->window.window_lower_value > 32767 ||
   1d020:	4a14      	ldr	r2, [pc, #80]	; (1d074 <_adc_set_config+0x398>)
   1d022:	4293      	cmp	r3, r2
   1d024:	db09      	blt.n	1d03a <_adc_set_config+0x35e>
					config->window.window_upper_value > 32767 ||
   1d026:	683b      	ldr	r3, [r7, #0]
   1d028:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_lower_value < -32768 ||
   1d02a:	4a11      	ldr	r2, [pc, #68]	; (1d070 <_adc_set_config+0x394>)
   1d02c:	4293      	cmp	r3, r2
   1d02e:	dc04      	bgt.n	1d03a <_adc_set_config+0x35e>
					config->window.window_upper_value < -32768)) {
   1d030:	683b      	ldr	r3, [r7, #0]
   1d032:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_upper_value > 32767 ||
   1d034:	4a0f      	ldr	r2, [pc, #60]	; (1d074 <_adc_set_config+0x398>)
   1d036:	4293      	cmp	r3, r2
   1d038:	da1e      	bge.n	1d078 <_adc_set_config+0x39c>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
   1d03a:	2317      	movs	r3, #23
   1d03c:	e0d1      	b.n	1d1e2 <_adc_set_config+0x506>
   1d03e:	46c0      	nop			; (mov r8, r8)
   1d040:	0001cab5 	.word	0x0001cab5
   1d044:	000245a5 	.word	0x000245a5
   1d048:	000245e9 	.word	0x000245e9
   1d04c:	0001cc65 	.word	0x0001cc65
   1d050:	0002a510 	.word	0x0002a510
   1d054:	0001cb91 	.word	0x0001cb91
   1d058:	000001ff 	.word	0x000001ff
   1d05c:	fffffe00 	.word	0xfffffe00
   1d060:	000003ff 	.word	0x000003ff
   1d064:	000007ff 	.word	0x000007ff
   1d068:	fffff800 	.word	0xfffff800
   1d06c:	00000fff 	.word	0x00000fff
   1d070:	00007fff 	.word	0x00007fff
   1d074:	ffff8000 	.word	0xffff8000
			} else if (config->window.window_lower_value > 65535 ||
   1d078:	683b      	ldr	r3, [r7, #0]
   1d07a:	69db      	ldr	r3, [r3, #28]
   1d07c:	4a5b      	ldr	r2, [pc, #364]	; (1d1ec <_adc_set_config+0x510>)
   1d07e:	4293      	cmp	r3, r2
   1d080:	dc04      	bgt.n	1d08c <_adc_set_config+0x3b0>
					config->window.window_upper_value > 65535){
   1d082:	683b      	ldr	r3, [r7, #0]
   1d084:	6a1b      	ldr	r3, [r3, #32]
			} else if (config->window.window_lower_value > 65535 ||
   1d086:	4a59      	ldr	r2, [pc, #356]	; (1d1ec <_adc_set_config+0x510>)
   1d088:	4293      	cmp	r3, r2
   1d08a:	dd07      	ble.n	1d09c <_adc_set_config+0x3c0>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
   1d08c:	2317      	movs	r3, #23
   1d08e:	e0a8      	b.n	1d1e2 <_adc_set_config+0x506>
			break;
   1d090:	46c0      	nop			; (mov r8, r8)
   1d092:	e004      	b.n	1d09e <_adc_set_config+0x3c2>
			break;
   1d094:	46c0      	nop			; (mov r8, r8)
   1d096:	e002      	b.n	1d09e <_adc_set_config+0x3c2>
			break;
   1d098:	46c0      	nop			; (mov r8, r8)
   1d09a:	e000      	b.n	1d09e <_adc_set_config+0x3c2>
			}
			break;
   1d09c:	46c0      	nop			; (mov r8, r8)
		}
	}

	while (adc_is_syncing(module_inst)) {
   1d09e:	46c0      	nop			; (mov r8, r8)
   1d0a0:	687b      	ldr	r3, [r7, #4]
   1d0a2:	0018      	movs	r0, r3
   1d0a4:	4b52      	ldr	r3, [pc, #328]	; (1d1f0 <_adc_set_config+0x514>)
   1d0a6:	4798      	blx	r3
   1d0a8:	1e03      	subs	r3, r0, #0
   1d0aa:	d1f9      	bne.n	1d0a0 <_adc_set_config+0x3c4>
		/* Wait for synchronization */
	}

	/* Configure window mode */
	adc_module->WINCTRL.reg = config->window.window_mode;
   1d0ac:	683b      	ldr	r3, [r7, #0]
   1d0ae:	7e1a      	ldrb	r2, [r3, #24]
   1d0b0:	693b      	ldr	r3, [r7, #16]
   1d0b2:	721a      	strb	r2, [r3, #8]

	while (adc_is_syncing(module_inst)) {
   1d0b4:	46c0      	nop			; (mov r8, r8)
   1d0b6:	687b      	ldr	r3, [r7, #4]
   1d0b8:	0018      	movs	r0, r3
   1d0ba:	4b4d      	ldr	r3, [pc, #308]	; (1d1f0 <_adc_set_config+0x514>)
   1d0bc:	4798      	blx	r3
   1d0be:	1e03      	subs	r3, r0, #0
   1d0c0:	d1f9      	bne.n	1d0b6 <_adc_set_config+0x3da>
		/* Wait for synchronization */
	}

	/* Configure lower threshold */
	adc_module->WINLT.reg =
			config->window.window_lower_value << ADC_WINLT_WINLT_Pos;
   1d0c2:	683b      	ldr	r3, [r7, #0]
   1d0c4:	69db      	ldr	r3, [r3, #28]
	adc_module->WINLT.reg =
   1d0c6:	b29a      	uxth	r2, r3
   1d0c8:	693b      	ldr	r3, [r7, #16]
   1d0ca:	839a      	strh	r2, [r3, #28]

	while (adc_is_syncing(module_inst)) {
   1d0cc:	46c0      	nop			; (mov r8, r8)
   1d0ce:	687b      	ldr	r3, [r7, #4]
   1d0d0:	0018      	movs	r0, r3
   1d0d2:	4b47      	ldr	r3, [pc, #284]	; (1d1f0 <_adc_set_config+0x514>)
   1d0d4:	4798      	blx	r3
   1d0d6:	1e03      	subs	r3, r0, #0
   1d0d8:	d1f9      	bne.n	1d0ce <_adc_set_config+0x3f2>
		/* Wait for synchronization */
	}

	/* Configure lower threshold */
	adc_module->WINUT.reg = config->window.window_upper_value <<
   1d0da:	683b      	ldr	r3, [r7, #0]
   1d0dc:	6a1b      	ldr	r3, [r3, #32]
   1d0de:	b29a      	uxth	r2, r3
   1d0e0:	693b      	ldr	r3, [r7, #16]
   1d0e2:	841a      	strh	r2, [r3, #32]
			ADC_WINUT_WINUT_Pos;

	uint8_t inputs_to_scan = config->pin_scan.inputs_to_scan;
   1d0e4:	2314      	movs	r3, #20
   1d0e6:	18fb      	adds	r3, r7, r3
   1d0e8:	683a      	ldr	r2, [r7, #0]
   1d0ea:	212c      	movs	r1, #44	; 0x2c
   1d0ec:	5c52      	ldrb	r2, [r2, r1]
   1d0ee:	701a      	strb	r2, [r3, #0]
	if (inputs_to_scan > 0) {
   1d0f0:	2314      	movs	r3, #20
   1d0f2:	18fb      	adds	r3, r7, r3
   1d0f4:	781b      	ldrb	r3, [r3, #0]
   1d0f6:	2b00      	cmp	r3, #0
   1d0f8:	d006      	beq.n	1d108 <_adc_set_config+0x42c>
		/*
		* Number of input sources included is the value written to INPUTSCAN
		* plus 1.
		*/
		inputs_to_scan--;
   1d0fa:	2314      	movs	r3, #20
   1d0fc:	18fb      	adds	r3, r7, r3
   1d0fe:	781a      	ldrb	r2, [r3, #0]
   1d100:	2314      	movs	r3, #20
   1d102:	18fb      	adds	r3, r7, r3
   1d104:	3a01      	subs	r2, #1
   1d106:	701a      	strb	r2, [r3, #0]
	}

	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
   1d108:	2314      	movs	r3, #20
   1d10a:	18fb      	adds	r3, r7, r3
   1d10c:	781b      	ldrb	r3, [r3, #0]
   1d10e:	2b0f      	cmp	r3, #15
   1d110:	d804      	bhi.n	1d11c <_adc_set_config+0x440>
			config->pin_scan.offset_start_scan > (ADC_INPUTCTRL_INPUTOFFSET_Msk >> ADC_INPUTCTRL_INPUTOFFSET_Pos)) {
   1d112:	683b      	ldr	r3, [r7, #0]
   1d114:	222b      	movs	r2, #43	; 0x2b
   1d116:	5c9b      	ldrb	r3, [r3, r2]
	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
   1d118:	2b0f      	cmp	r3, #15
   1d11a:	d901      	bls.n	1d120 <_adc_set_config+0x444>
		/* Invalid number of input pins or input offset */
		return STATUS_ERR_INVALID_ARG;
   1d11c:	2317      	movs	r3, #23
   1d11e:	e060      	b.n	1d1e2 <_adc_set_config+0x506>
	}

	while (adc_is_syncing(module_inst)) {
   1d120:	46c0      	nop			; (mov r8, r8)
   1d122:	687b      	ldr	r3, [r7, #4]
   1d124:	0018      	movs	r0, r3
   1d126:	4b32      	ldr	r3, [pc, #200]	; (1d1f0 <_adc_set_config+0x514>)
   1d128:	4798      	blx	r3
   1d12a:	1e03      	subs	r3, r0, #0
   1d12c:	d1f9      	bne.n	1d122 <_adc_set_config+0x446>
		/* Wait for synchronization */
	}

	/* Configure pin scan mode and positive and negative input pins */
	adc_module->INPUTCTRL.reg =
			config->gain_factor |
   1d12e:	683b      	ldr	r3, [r7, #0]
   1d130:	689b      	ldr	r3, [r3, #8]
			(config->pin_scan.offset_start_scan <<
   1d132:	683a      	ldr	r2, [r7, #0]
   1d134:	212b      	movs	r1, #43	; 0x2b
   1d136:	5c52      	ldrb	r2, [r2, r1]
   1d138:	0512      	lsls	r2, r2, #20
			config->gain_factor |
   1d13a:	4313      	orrs	r3, r2
			ADC_INPUTCTRL_INPUTOFFSET_Pos) |
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
   1d13c:	2214      	movs	r2, #20
   1d13e:	18ba      	adds	r2, r7, r2
   1d140:	7812      	ldrb	r2, [r2, #0]
   1d142:	0412      	lsls	r2, r2, #16
			ADC_INPUTCTRL_INPUTOFFSET_Pos) |
   1d144:	4313      	orrs	r3, r2
			config->negative_input |
   1d146:	683a      	ldr	r2, [r7, #0]
   1d148:	89d2      	ldrh	r2, [r2, #14]
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
   1d14a:	4313      	orrs	r3, r2
			config->positive_input;
   1d14c:	683a      	ldr	r2, [r7, #0]
   1d14e:	7b12      	ldrb	r2, [r2, #12]
			config->negative_input |
   1d150:	431a      	orrs	r2, r3
	adc_module->INPUTCTRL.reg =
   1d152:	693b      	ldr	r3, [r7, #16]
   1d154:	611a      	str	r2, [r3, #16]

	/* Configure events */
	adc_module->EVCTRL.reg = config->event_action;
   1d156:	683b      	ldr	r3, [r7, #0]
   1d158:	222a      	movs	r2, #42	; 0x2a
   1d15a:	5c9a      	ldrb	r2, [r3, r2]
   1d15c:	693b      	ldr	r3, [r7, #16]
   1d15e:	751a      	strb	r2, [r3, #20]

	/* Disable all interrupts */
	adc_module->INTENCLR.reg =
   1d160:	693b      	ldr	r3, [r7, #16]
   1d162:	220f      	movs	r2, #15
   1d164:	759a      	strb	r2, [r3, #22]
			(1 << ADC_INTENCLR_SYNCRDY_Pos) | (1 << ADC_INTENCLR_WINMON_Pos) |
			(1 << ADC_INTENCLR_OVERRUN_Pos) | (1 << ADC_INTENCLR_RESRDY_Pos);

	if (config->correction.correction_enable){
   1d166:	683b      	ldr	r3, [r7, #0]
   1d168:	2224      	movs	r2, #36	; 0x24
   1d16a:	5c9b      	ldrb	r3, [r3, r2]
   1d16c:	2b00      	cmp	r3, #0
   1d16e:	d01e      	beq.n	1d1ae <_adc_set_config+0x4d2>
		/* Make sure gain_correction value is valid */
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
   1d170:	683b      	ldr	r3, [r7, #0]
   1d172:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
   1d174:	4a1f      	ldr	r2, [pc, #124]	; (1d1f4 <_adc_set_config+0x518>)
   1d176:	4293      	cmp	r3, r2
   1d178:	d901      	bls.n	1d17e <_adc_set_config+0x4a2>
			return STATUS_ERR_INVALID_ARG;
   1d17a:	2317      	movs	r3, #23
   1d17c:	e031      	b.n	1d1e2 <_adc_set_config+0x506>
		} else {
			/* Set gain correction value */
			adc_module->GAINCORR.reg = config->correction.gain_correction <<
   1d17e:	683b      	ldr	r3, [r7, #0]
   1d180:	8cda      	ldrh	r2, [r3, #38]	; 0x26
   1d182:	693b      	ldr	r3, [r7, #16]
   1d184:	849a      	strh	r2, [r3, #36]	; 0x24
					ADC_GAINCORR_GAINCORR_Pos;
		}

		/* Make sure offset correction value is valid */
		if (config->correction.offset_correction > 2047 ||
   1d186:	683b      	ldr	r3, [r7, #0]
   1d188:	2228      	movs	r2, #40	; 0x28
   1d18a:	5e9b      	ldrsh	r3, [r3, r2]
   1d18c:	4a1a      	ldr	r2, [pc, #104]	; (1d1f8 <_adc_set_config+0x51c>)
   1d18e:	4293      	cmp	r3, r2
   1d190:	dc05      	bgt.n	1d19e <_adc_set_config+0x4c2>
				config->correction.offset_correction < -2048) {
   1d192:	683b      	ldr	r3, [r7, #0]
   1d194:	2228      	movs	r2, #40	; 0x28
   1d196:	5e9b      	ldrsh	r3, [r3, r2]
		if (config->correction.offset_correction > 2047 ||
   1d198:	4a18      	ldr	r2, [pc, #96]	; (1d1fc <_adc_set_config+0x520>)
   1d19a:	4293      	cmp	r3, r2
   1d19c:	da01      	bge.n	1d1a2 <_adc_set_config+0x4c6>
			return STATUS_ERR_INVALID_ARG;
   1d19e:	2317      	movs	r3, #23
   1d1a0:	e01f      	b.n	1d1e2 <_adc_set_config+0x506>
		} else {
			/* Set offset correction value */
			adc_module->OFFSETCORR.reg = config->correction.offset_correction <<
   1d1a2:	683b      	ldr	r3, [r7, #0]
   1d1a4:	2228      	movs	r2, #40	; 0x28
   1d1a6:	5e9b      	ldrsh	r3, [r3, r2]
   1d1a8:	b29a      	uxth	r2, r3
   1d1aa:	693b      	ldr	r3, [r7, #16]
   1d1ac:	84da      	strh	r2, [r3, #38]	; 0x26
		}
	}

	/* Load in the fixed device ADC calibration constants */
	adc_module->CALIB.reg =
			ADC_CALIB_BIAS_CAL(
   1d1ae:	4b14      	ldr	r3, [pc, #80]	; (1d200 <_adc_set_config+0x524>)
   1d1b0:	681b      	ldr	r3, [r3, #0]
   1d1b2:	08db      	lsrs	r3, r3, #3
   1d1b4:	b29b      	uxth	r3, r3
   1d1b6:	021b      	lsls	r3, r3, #8
   1d1b8:	b29a      	uxth	r2, r3
   1d1ba:	23e0      	movs	r3, #224	; 0xe0
   1d1bc:	00db      	lsls	r3, r3, #3
   1d1be:	4013      	ands	r3, r2
   1d1c0:	b29a      	uxth	r2, r3
				(*(uint32_t *)ADC_FUSES_BIASCAL_ADDR >> ADC_FUSES_BIASCAL_Pos)
			) |
			ADC_CALIB_LINEARITY_CAL(
   1d1c2:	4b10      	ldr	r3, [pc, #64]	; (1d204 <_adc_set_config+0x528>)
   1d1c4:	685c      	ldr	r4, [r3, #4]
   1d1c6:	681b      	ldr	r3, [r3, #0]
   1d1c8:	0161      	lsls	r1, r4, #5
   1d1ca:	0edd      	lsrs	r5, r3, #27
   1d1cc:	430d      	orrs	r5, r1
   1d1ce:	0ee6      	lsrs	r6, r4, #27
   1d1d0:	b2ab      	uxth	r3, r5
   1d1d2:	21ff      	movs	r1, #255	; 0xff
   1d1d4:	400b      	ands	r3, r1
   1d1d6:	b29b      	uxth	r3, r3
			) |
   1d1d8:	4313      	orrs	r3, r2
   1d1da:	b29a      	uxth	r2, r3
	adc_module->CALIB.reg =
   1d1dc:	693b      	ldr	r3, [r7, #16]
   1d1de:	851a      	strh	r2, [r3, #40]	; 0x28
				(*(uint64_t *)ADC_FUSES_LINEARITY_0_ADDR >> ADC_FUSES_LINEARITY_0_Pos)
			);

	return STATUS_OK;
   1d1e0:	2300      	movs	r3, #0
}
   1d1e2:	0018      	movs	r0, r3
   1d1e4:	46bd      	mov	sp, r7
   1d1e6:	b009      	add	sp, #36	; 0x24
   1d1e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1d1ea:	46c0      	nop			; (mov r8, r8)
   1d1ec:	0000ffff 	.word	0x0000ffff
   1d1f0:	0001cb91 	.word	0x0001cb91
   1d1f4:	00000fff 	.word	0x00000fff
   1d1f8:	000007ff 	.word	0x000007ff
   1d1fc:	fffff800 	.word	0xfffff800
   1d200:	00806024 	.word	0x00806024
   1d204:	00806020 	.word	0x00806020

0001d208 <adc_init>:
 */
enum status_code adc_init(
		struct adc_module *const module_inst,
		Adc *hw,
		struct adc_config *config)
{
   1d208:	b580      	push	{r7, lr}
   1d20a:	b086      	sub	sp, #24
   1d20c:	af00      	add	r7, sp, #0
   1d20e:	60f8      	str	r0, [r7, #12]
   1d210:	60b9      	str	r1, [r7, #8]
   1d212:	607a      	str	r2, [r7, #4]
	Assert(module_inst);
	Assert(hw);
	Assert(config);

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
   1d214:	68fb      	ldr	r3, [r7, #12]
   1d216:	68ba      	ldr	r2, [r7, #8]
   1d218:	601a      	str	r2, [r3, #0]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_ADC);
   1d21a:	2380      	movs	r3, #128	; 0x80
   1d21c:	025b      	lsls	r3, r3, #9
   1d21e:	0019      	movs	r1, r3
   1d220:	2002      	movs	r0, #2
   1d222:	4b32      	ldr	r3, [pc, #200]	; (1d2ec <adc_init+0xe4>)
   1d224:	4798      	blx	r3

	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
   1d226:	68bb      	ldr	r3, [r7, #8]
   1d228:	781b      	ldrb	r3, [r3, #0]
   1d22a:	b2db      	uxtb	r3, r3
   1d22c:	001a      	movs	r2, r3
   1d22e:	2301      	movs	r3, #1
   1d230:	4013      	ands	r3, r2
   1d232:	d001      	beq.n	1d238 <adc_init+0x30>
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
   1d234:	2305      	movs	r3, #5
   1d236:	e055      	b.n	1d2e4 <adc_init+0xdc>
	}

	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
   1d238:	68bb      	ldr	r3, [r7, #8]
   1d23a:	781b      	ldrb	r3, [r3, #0]
   1d23c:	b2db      	uxtb	r3, r3
   1d23e:	001a      	movs	r2, r3
   1d240:	2302      	movs	r3, #2
   1d242:	4013      	ands	r3, r2
   1d244:	d001      	beq.n	1d24a <adc_init+0x42>
		/* Module must be disabled before initialization. Abort. */
		return STATUS_ERR_DENIED;
   1d246:	231c      	movs	r3, #28
   1d248:	e04c      	b.n	1d2e4 <adc_init+0xdc>
	}

	/* Store the selected reference for later use */
	module_inst->reference = config->reference;
   1d24a:	687b      	ldr	r3, [r7, #4]
   1d24c:	785a      	ldrb	r2, [r3, #1]
   1d24e:	68fb      	ldr	r3, [r7, #12]
   1d250:	711a      	strb	r2, [r3, #4]

	/* Make sure bandgap is enabled if requested by the config */
	if (module_inst->reference == ADC_REFERENCE_INT1V) {
   1d252:	68fb      	ldr	r3, [r7, #12]
   1d254:	791b      	ldrb	r3, [r3, #4]
   1d256:	2b00      	cmp	r3, #0
   1d258:	d102      	bne.n	1d260 <adc_init+0x58>
		system_voltage_reference_enable(SYSTEM_VOLTAGE_REFERENCE_BANDGAP);
   1d25a:	2001      	movs	r0, #1
   1d25c:	4b24      	ldr	r3, [pc, #144]	; (1d2f0 <adc_init+0xe8>)
   1d25e:	4798      	blx	r3
	}

#if ADC_CALLBACK_MODE == true
	for (uint8_t i = 0; i < ADC_CALLBACK_N; i++) {
   1d260:	2317      	movs	r3, #23
   1d262:	18fb      	adds	r3, r7, r3
   1d264:	2200      	movs	r2, #0
   1d266:	701a      	strb	r2, [r3, #0]
   1d268:	e00e      	b.n	1d288 <adc_init+0x80>
		module_inst->callback[i] = NULL;
   1d26a:	2317      	movs	r3, #23
   1d26c:	18fb      	adds	r3, r7, r3
   1d26e:	781a      	ldrb	r2, [r3, #0]
   1d270:	68fb      	ldr	r3, [r7, #12]
   1d272:	3202      	adds	r2, #2
   1d274:	0092      	lsls	r2, r2, #2
   1d276:	2100      	movs	r1, #0
   1d278:	50d1      	str	r1, [r2, r3]
	for (uint8_t i = 0; i < ADC_CALLBACK_N; i++) {
   1d27a:	2317      	movs	r3, #23
   1d27c:	18fb      	adds	r3, r7, r3
   1d27e:	781a      	ldrb	r2, [r3, #0]
   1d280:	2317      	movs	r3, #23
   1d282:	18fb      	adds	r3, r7, r3
   1d284:	3201      	adds	r2, #1
   1d286:	701a      	strb	r2, [r3, #0]
   1d288:	2317      	movs	r3, #23
   1d28a:	18fb      	adds	r3, r7, r3
   1d28c:	781b      	ldrb	r3, [r3, #0]
   1d28e:	2b02      	cmp	r3, #2
   1d290:	d9eb      	bls.n	1d26a <adc_init+0x62>
	};

	module_inst->registered_callback_mask = 0;
   1d292:	68fb      	ldr	r3, [r7, #12]
   1d294:	2200      	movs	r2, #0
   1d296:	769a      	strb	r2, [r3, #26]
	module_inst->enabled_callback_mask = 0;
   1d298:	68fb      	ldr	r3, [r7, #12]
   1d29a:	2200      	movs	r2, #0
   1d29c:	76da      	strb	r2, [r3, #27]
	module_inst->remaining_conversions = 0;
   1d29e:	68fb      	ldr	r3, [r7, #12]
   1d2a0:	2200      	movs	r2, #0
   1d2a2:	831a      	strh	r2, [r3, #24]
	module_inst->job_status = STATUS_OK;
   1d2a4:	68fb      	ldr	r3, [r7, #12]
   1d2a6:	2200      	movs	r2, #0
   1d2a8:	771a      	strb	r2, [r3, #28]

	_adc_instances[0] = module_inst;
   1d2aa:	4b12      	ldr	r3, [pc, #72]	; (1d2f4 <adc_init+0xec>)
   1d2ac:	68fa      	ldr	r2, [r7, #12]
   1d2ae:	601a      	str	r2, [r3, #0]

	if (config->event_action == ADC_EVENT_ACTION_DISABLED &&
   1d2b0:	687b      	ldr	r3, [r7, #4]
   1d2b2:	222a      	movs	r2, #42	; 0x2a
   1d2b4:	5c9b      	ldrb	r3, [r3, r2]
   1d2b6:	2b00      	cmp	r3, #0
   1d2b8:	d10a      	bne.n	1d2d0 <adc_init+0xc8>
			!config->freerunning) {
   1d2ba:	687b      	ldr	r3, [r7, #4]
   1d2bc:	7d1b      	ldrb	r3, [r3, #20]
   1d2be:	2201      	movs	r2, #1
   1d2c0:	4053      	eors	r3, r2
   1d2c2:	b2db      	uxtb	r3, r3
	if (config->event_action == ADC_EVENT_ACTION_DISABLED &&
   1d2c4:	2b00      	cmp	r3, #0
   1d2c6:	d003      	beq.n	1d2d0 <adc_init+0xc8>
		module_inst->software_trigger = true;
   1d2c8:	68fb      	ldr	r3, [r7, #12]
   1d2ca:	2201      	movs	r2, #1
   1d2cc:	775a      	strb	r2, [r3, #29]
   1d2ce:	e002      	b.n	1d2d6 <adc_init+0xce>
	} else {
		module_inst->software_trigger = false;
   1d2d0:	68fb      	ldr	r3, [r7, #12]
   1d2d2:	2200      	movs	r2, #0
   1d2d4:	775a      	strb	r2, [r3, #29]
	}
#endif

	/* Write configuration to module */
	return _adc_set_config(module_inst, config);
   1d2d6:	687a      	ldr	r2, [r7, #4]
   1d2d8:	68fb      	ldr	r3, [r7, #12]
   1d2da:	0011      	movs	r1, r2
   1d2dc:	0018      	movs	r0, r3
   1d2de:	4b06      	ldr	r3, [pc, #24]	; (1d2f8 <adc_init+0xf0>)
   1d2e0:	4798      	blx	r3
   1d2e2:	0003      	movs	r3, r0
}
   1d2e4:	0018      	movs	r0, r3
   1d2e6:	46bd      	mov	sp, r7
   1d2e8:	b006      	add	sp, #24
   1d2ea:	bd80      	pop	{r7, pc}
   1d2ec:	0001cacd 	.word	0x0001cacd
   1d2f0:	0001cb51 	.word	0x0001cb51
   1d2f4:	20000884 	.word	0x20000884
   1d2f8:	0001ccdd 	.word	0x0001ccdd

0001d2fc <adc_is_syncing>:
{
   1d2fc:	b580      	push	{r7, lr}
   1d2fe:	b084      	sub	sp, #16
   1d300:	af00      	add	r7, sp, #0
   1d302:	6078      	str	r0, [r7, #4]
	Adc *const adc_module = module_inst->hw;
   1d304:	687b      	ldr	r3, [r7, #4]
   1d306:	681b      	ldr	r3, [r3, #0]
   1d308:	60fb      	str	r3, [r7, #12]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
   1d30a:	68fb      	ldr	r3, [r7, #12]
   1d30c:	7e5b      	ldrb	r3, [r3, #25]
   1d30e:	b2db      	uxtb	r3, r3
   1d310:	b25b      	sxtb	r3, r3
   1d312:	2b00      	cmp	r3, #0
   1d314:	da01      	bge.n	1d31a <adc_is_syncing+0x1e>
		return true;
   1d316:	2301      	movs	r3, #1
   1d318:	e000      	b.n	1d31c <adc_is_syncing+0x20>
	return false;
   1d31a:	2300      	movs	r3, #0
}
   1d31c:	0018      	movs	r0, r3
   1d31e:	46bd      	mov	sp, r7
   1d320:	b004      	add	sp, #16
   1d322:	bd80      	pop	{r7, pc}

0001d324 <adc_start_conversion>:
{
   1d324:	b580      	push	{r7, lr}
   1d326:	b084      	sub	sp, #16
   1d328:	af00      	add	r7, sp, #0
   1d32a:	6078      	str	r0, [r7, #4]
	Adc *const adc_module = module_inst->hw;
   1d32c:	687b      	ldr	r3, [r7, #4]
   1d32e:	681b      	ldr	r3, [r3, #0]
   1d330:	60fb      	str	r3, [r7, #12]
	while (adc_is_syncing(module_inst)) {
   1d332:	46c0      	nop			; (mov r8, r8)
   1d334:	687b      	ldr	r3, [r7, #4]
   1d336:	0018      	movs	r0, r3
   1d338:	4b0b      	ldr	r3, [pc, #44]	; (1d368 <adc_start_conversion+0x44>)
   1d33a:	4798      	blx	r3
   1d33c:	1e03      	subs	r3, r0, #0
   1d33e:	d1f9      	bne.n	1d334 <adc_start_conversion+0x10>
	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
   1d340:	68fb      	ldr	r3, [r7, #12]
   1d342:	7b1b      	ldrb	r3, [r3, #12]
   1d344:	b2db      	uxtb	r3, r3
   1d346:	2202      	movs	r2, #2
   1d348:	4313      	orrs	r3, r2
   1d34a:	b2da      	uxtb	r2, r3
   1d34c:	68fb      	ldr	r3, [r7, #12]
   1d34e:	731a      	strb	r2, [r3, #12]
	while (adc_is_syncing(module_inst)) {
   1d350:	46c0      	nop			; (mov r8, r8)
   1d352:	687b      	ldr	r3, [r7, #4]
   1d354:	0018      	movs	r0, r3
   1d356:	4b04      	ldr	r3, [pc, #16]	; (1d368 <adc_start_conversion+0x44>)
   1d358:	4798      	blx	r3
   1d35a:	1e03      	subs	r3, r0, #0
   1d35c:	d1f9      	bne.n	1d352 <adc_start_conversion+0x2e>
}
   1d35e:	46c0      	nop			; (mov r8, r8)
   1d360:	46bd      	mov	sp, r7
   1d362:	b004      	add	sp, #16
   1d364:	bd80      	pop	{r7, pc}
   1d366:	46c0      	nop			; (mov r8, r8)
   1d368:	0001d2fd 	.word	0x0001d2fd

0001d36c <adc_enable_interrupt>:
{
   1d36c:	b580      	push	{r7, lr}
   1d36e:	b084      	sub	sp, #16
   1d370:	af00      	add	r7, sp, #0
   1d372:	6078      	str	r0, [r7, #4]
   1d374:	000a      	movs	r2, r1
   1d376:	1cfb      	adds	r3, r7, #3
   1d378:	701a      	strb	r2, [r3, #0]
	Adc *const adc_module = module_inst->hw;
   1d37a:	687b      	ldr	r3, [r7, #4]
   1d37c:	681b      	ldr	r3, [r3, #0]
   1d37e:	60fb      	str	r3, [r7, #12]
	adc_module->INTENSET.reg = interrupt;
   1d380:	68fb      	ldr	r3, [r7, #12]
   1d382:	1cfa      	adds	r2, r7, #3
   1d384:	7812      	ldrb	r2, [r2, #0]
   1d386:	75da      	strb	r2, [r3, #23]
}
   1d388:	46c0      	nop			; (mov r8, r8)
   1d38a:	46bd      	mov	sp, r7
   1d38c:	b004      	add	sp, #16
   1d38e:	bd80      	pop	{r7, pc}

0001d390 <adc_disable_interrupt>:
 * \param[in] module_inst Pointer to the ADC software instance struct
 * \param[in] interrupt Interrupt to disable
 */
static inline void adc_disable_interrupt(struct adc_module *const module_inst,
		enum adc_interrupt_flag interrupt)
{
   1d390:	b580      	push	{r7, lr}
   1d392:	b084      	sub	sp, #16
   1d394:	af00      	add	r7, sp, #0
   1d396:	6078      	str	r0, [r7, #4]
   1d398:	000a      	movs	r2, r1
   1d39a:	1cfb      	adds	r3, r7, #3
   1d39c:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
   1d39e:	687b      	ldr	r3, [r7, #4]
   1d3a0:	681b      	ldr	r3, [r3, #0]
   1d3a2:	60fb      	str	r3, [r7, #12]
	/* Enable interrupt */
	adc_module->INTENCLR.reg = interrupt;
   1d3a4:	68fb      	ldr	r3, [r7, #12]
   1d3a6:	1cfa      	adds	r2, r7, #3
   1d3a8:	7812      	ldrb	r2, [r2, #0]
   1d3aa:	759a      	strb	r2, [r3, #22]
}
   1d3ac:	46c0      	nop			; (mov r8, r8)
   1d3ae:	46bd      	mov	sp, r7
   1d3b0:	b004      	add	sp, #16
   1d3b2:	bd80      	pop	{r7, pc}

0001d3b4 <_adc_interrupt_handler>:
#include "adc_callback.h"

struct adc_module *_adc_instances[ADC_INST_NUM];

static void _adc_interrupt_handler(const uint8_t instance)
{
   1d3b4:	b580      	push	{r7, lr}
   1d3b6:	b084      	sub	sp, #16
   1d3b8:	af00      	add	r7, sp, #0
   1d3ba:	0002      	movs	r2, r0
   1d3bc:	1dfb      	adds	r3, r7, #7
   1d3be:	701a      	strb	r2, [r3, #0]
	struct adc_module *module = _adc_instances[instance];
   1d3c0:	1dfb      	adds	r3, r7, #7
   1d3c2:	781a      	ldrb	r2, [r3, #0]
   1d3c4:	4b47      	ldr	r3, [pc, #284]	; (1d4e4 <_adc_interrupt_handler+0x130>)
   1d3c6:	0092      	lsls	r2, r2, #2
   1d3c8:	58d3      	ldr	r3, [r2, r3]
   1d3ca:	60fb      	str	r3, [r7, #12]

	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->INTFLAG.reg & module->hw->INTENSET.reg;
   1d3cc:	68fb      	ldr	r3, [r7, #12]
   1d3ce:	681b      	ldr	r3, [r3, #0]
   1d3d0:	7e1b      	ldrb	r3, [r3, #24]
   1d3d2:	b2da      	uxtb	r2, r3
   1d3d4:	68fb      	ldr	r3, [r7, #12]
   1d3d6:	681b      	ldr	r3, [r3, #0]
   1d3d8:	7ddb      	ldrb	r3, [r3, #23]
   1d3da:	b2db      	uxtb	r3, r3
   1d3dc:	4013      	ands	r3, r2
   1d3de:	b2db      	uxtb	r3, r3
   1d3e0:	60bb      	str	r3, [r7, #8]

	if (flags & ADC_INTFLAG_RESRDY) {
   1d3e2:	68bb      	ldr	r3, [r7, #8]
   1d3e4:	2201      	movs	r2, #1
   1d3e6:	4013      	ands	r3, r2
   1d3e8:	d045      	beq.n	1d476 <_adc_interrupt_handler+0xc2>
		/* clear interrupt flag */
		module->hw->INTFLAG.reg = ADC_INTFLAG_RESRDY;
   1d3ea:	68fb      	ldr	r3, [r7, #12]
   1d3ec:	681b      	ldr	r3, [r3, #0]
   1d3ee:	2201      	movs	r2, #1
   1d3f0:	761a      	strb	r2, [r3, #24]

		while (adc_is_syncing(module)) {
   1d3f2:	46c0      	nop			; (mov r8, r8)
   1d3f4:	68fb      	ldr	r3, [r7, #12]
   1d3f6:	0018      	movs	r0, r3
   1d3f8:	4b3b      	ldr	r3, [pc, #236]	; (1d4e8 <_adc_interrupt_handler+0x134>)
   1d3fa:	4798      	blx	r3
   1d3fc:	1e03      	subs	r3, r0, #0
   1d3fe:	d1f9      	bne.n	1d3f4 <_adc_interrupt_handler+0x40>
			/* Wait for synchronization */
		}

		/* store ADC result in job buffer */
		*(module->job_buffer++) = module->hw->RESULT.reg;
   1d400:	68fb      	ldr	r3, [r7, #12]
   1d402:	695b      	ldr	r3, [r3, #20]
   1d404:	1c99      	adds	r1, r3, #2
   1d406:	68fa      	ldr	r2, [r7, #12]
   1d408:	6151      	str	r1, [r2, #20]
   1d40a:	68fa      	ldr	r2, [r7, #12]
   1d40c:	6812      	ldr	r2, [r2, #0]
   1d40e:	8b52      	ldrh	r2, [r2, #26]
   1d410:	b292      	uxth	r2, r2
   1d412:	801a      	strh	r2, [r3, #0]

		if (--module->remaining_conversions > 0) {
   1d414:	68fb      	ldr	r3, [r7, #12]
   1d416:	8b1b      	ldrh	r3, [r3, #24]
   1d418:	b29b      	uxth	r3, r3
   1d41a:	3b01      	subs	r3, #1
   1d41c:	b29b      	uxth	r3, r3
   1d41e:	68fa      	ldr	r2, [r7, #12]
   1d420:	1c19      	adds	r1, r3, #0
   1d422:	8311      	strh	r1, [r2, #24]
   1d424:	2b00      	cmp	r3, #0
   1d426:	d008      	beq.n	1d43a <_adc_interrupt_handler+0x86>
			if (module->software_trigger == true) {
   1d428:	68fb      	ldr	r3, [r7, #12]
   1d42a:	7f5b      	ldrb	r3, [r3, #29]
   1d42c:	2b00      	cmp	r3, #0
   1d42e:	d022      	beq.n	1d476 <_adc_interrupt_handler+0xc2>
				adc_start_conversion(module);
   1d430:	68fb      	ldr	r3, [r7, #12]
   1d432:	0018      	movs	r0, r3
   1d434:	4b2d      	ldr	r3, [pc, #180]	; (1d4ec <_adc_interrupt_handler+0x138>)
   1d436:	4798      	blx	r3
   1d438:	e01d      	b.n	1d476 <_adc_interrupt_handler+0xc2>
			}
		} else {
			adc_disable_interrupt(module, ADC_INTERRUPT_RESULT_READY);
   1d43a:	68fb      	ldr	r3, [r7, #12]
   1d43c:	2101      	movs	r1, #1
   1d43e:	0018      	movs	r0, r3
   1d440:	4b2b      	ldr	r3, [pc, #172]	; (1d4f0 <_adc_interrupt_handler+0x13c>)
   1d442:	4798      	blx	r3
			if (module->job_status == STATUS_BUSY) {
   1d444:	68fb      	ldr	r3, [r7, #12]
   1d446:	7f1b      	ldrb	r3, [r3, #28]
   1d448:	b2db      	uxtb	r3, r3
   1d44a:	2b05      	cmp	r3, #5
   1d44c:	d113      	bne.n	1d476 <_adc_interrupt_handler+0xc2>
				/* job is complete. update status,disable interrupt
					*and call callback */
				module->job_status = STATUS_OK;
   1d44e:	68fb      	ldr	r3, [r7, #12]
   1d450:	2200      	movs	r2, #0
   1d452:	771a      	strb	r2, [r3, #28]

				if ((module->enabled_callback_mask &
   1d454:	68fb      	ldr	r3, [r7, #12]
   1d456:	7edb      	ldrb	r3, [r3, #27]
   1d458:	001a      	movs	r2, r3
   1d45a:	2301      	movs	r3, #1
   1d45c:	4013      	ands	r3, r2
   1d45e:	d00a      	beq.n	1d476 <_adc_interrupt_handler+0xc2>
						(1 << ADC_CALLBACK_READ_BUFFER)) &&
					(module->registered_callback_mask &
   1d460:	68fb      	ldr	r3, [r7, #12]
   1d462:	7e9b      	ldrb	r3, [r3, #26]
   1d464:	001a      	movs	r2, r3
   1d466:	2301      	movs	r3, #1
   1d468:	4013      	ands	r3, r2
						(1 << ADC_CALLBACK_READ_BUFFER)) &&
   1d46a:	d004      	beq.n	1d476 <_adc_interrupt_handler+0xc2>
						(1 << ADC_CALLBACK_READ_BUFFER))) {
					(module->callback[ADC_CALLBACK_READ_BUFFER])(module);
   1d46c:	68fb      	ldr	r3, [r7, #12]
   1d46e:	689b      	ldr	r3, [r3, #8]
   1d470:	68fa      	ldr	r2, [r7, #12]
   1d472:	0010      	movs	r0, r2
   1d474:	4798      	blx	r3
				}
			}
		}
	}

	if (flags & ADC_INTFLAG_WINMON) {
   1d476:	68bb      	ldr	r3, [r7, #8]
   1d478:	2204      	movs	r2, #4
   1d47a:	4013      	ands	r3, r2
   1d47c:	d014      	beq.n	1d4a8 <_adc_interrupt_handler+0xf4>
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
   1d47e:	68fb      	ldr	r3, [r7, #12]
   1d480:	681b      	ldr	r3, [r3, #0]
   1d482:	2204      	movs	r2, #4
   1d484:	761a      	strb	r2, [r3, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
   1d486:	68fb      	ldr	r3, [r7, #12]
   1d488:	7edb      	ldrb	r3, [r3, #27]
   1d48a:	001a      	movs	r2, r3
   1d48c:	2302      	movs	r3, #2
   1d48e:	4013      	ands	r3, r2
   1d490:	d00a      	beq.n	1d4a8 <_adc_interrupt_handler+0xf4>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_WINDOW))) {
   1d492:	68fb      	ldr	r3, [r7, #12]
   1d494:	7e9b      	ldrb	r3, [r3, #26]
   1d496:	001a      	movs	r2, r3
   1d498:	2302      	movs	r3, #2
   1d49a:	4013      	ands	r3, r2
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
   1d49c:	d004      	beq.n	1d4a8 <_adc_interrupt_handler+0xf4>
			(module->callback[ADC_CALLBACK_WINDOW])(module);
   1d49e:	68fb      	ldr	r3, [r7, #12]
   1d4a0:	68db      	ldr	r3, [r3, #12]
   1d4a2:	68fa      	ldr	r2, [r7, #12]
   1d4a4:	0010      	movs	r0, r2
   1d4a6:	4798      	blx	r3
		}

	}

	if (flags & ADC_INTFLAG_OVERRUN) {
   1d4a8:	68bb      	ldr	r3, [r7, #8]
   1d4aa:	2202      	movs	r2, #2
   1d4ac:	4013      	ands	r3, r2
   1d4ae:	d014      	beq.n	1d4da <_adc_interrupt_handler+0x126>
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
   1d4b0:	68fb      	ldr	r3, [r7, #12]
   1d4b2:	681b      	ldr	r3, [r3, #0]
   1d4b4:	2202      	movs	r2, #2
   1d4b6:	761a      	strb	r2, [r3, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
   1d4b8:	68fb      	ldr	r3, [r7, #12]
   1d4ba:	7edb      	ldrb	r3, [r3, #27]
   1d4bc:	001a      	movs	r2, r3
   1d4be:	2304      	movs	r3, #4
   1d4c0:	4013      	ands	r3, r2
   1d4c2:	d00a      	beq.n	1d4da <_adc_interrupt_handler+0x126>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_ERROR))) {
   1d4c4:	68fb      	ldr	r3, [r7, #12]
   1d4c6:	7e9b      	ldrb	r3, [r3, #26]
   1d4c8:	001a      	movs	r2, r3
   1d4ca:	2304      	movs	r3, #4
   1d4cc:	4013      	ands	r3, r2
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
   1d4ce:	d004      	beq.n	1d4da <_adc_interrupt_handler+0x126>
			(module->callback[ADC_CALLBACK_ERROR])(module);
   1d4d0:	68fb      	ldr	r3, [r7, #12]
   1d4d2:	691b      	ldr	r3, [r3, #16]
   1d4d4:	68fa      	ldr	r2, [r7, #12]
   1d4d6:	0010      	movs	r0, r2
   1d4d8:	4798      	blx	r3
		}
	}
}
   1d4da:	46c0      	nop			; (mov r8, r8)
   1d4dc:	46bd      	mov	sp, r7
   1d4de:	b004      	add	sp, #16
   1d4e0:	bd80      	pop	{r7, pc}
   1d4e2:	46c0      	nop			; (mov r8, r8)
   1d4e4:	20000884 	.word	0x20000884
   1d4e8:	0001d2fd 	.word	0x0001d2fd
   1d4ec:	0001d325 	.word	0x0001d325
   1d4f0:	0001d391 	.word	0x0001d391

0001d4f4 <ADC_Handler>:

/** Interrupt handler for the ADC module. */
void ADC_Handler(void)
{
   1d4f4:	b580      	push	{r7, lr}
   1d4f6:	af00      	add	r7, sp, #0
	_adc_interrupt_handler(0);
   1d4f8:	2000      	movs	r0, #0
   1d4fa:	4b02      	ldr	r3, [pc, #8]	; (1d504 <ADC_Handler+0x10>)
   1d4fc:	4798      	blx	r3
}
   1d4fe:	46c0      	nop			; (mov r8, r8)
   1d500:	46bd      	mov	sp, r7
   1d502:	bd80      	pop	{r7, pc}
   1d504:	0001d3b5 	.word	0x0001d3b5

0001d508 <adc_register_callback>:
 */
void adc_register_callback(
		struct adc_module *const module,
		adc_callback_t callback_func,
		enum adc_callback callback_type)
{
   1d508:	b580      	push	{r7, lr}
   1d50a:	b084      	sub	sp, #16
   1d50c:	af00      	add	r7, sp, #0
   1d50e:	60f8      	str	r0, [r7, #12]
   1d510:	60b9      	str	r1, [r7, #8]
   1d512:	1dfb      	adds	r3, r7, #7
   1d514:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
   1d516:	1dfb      	adds	r3, r7, #7
   1d518:	781a      	ldrb	r2, [r3, #0]
   1d51a:	68fb      	ldr	r3, [r7, #12]
   1d51c:	3202      	adds	r2, #2
   1d51e:	0092      	lsls	r2, r2, #2
   1d520:	68b9      	ldr	r1, [r7, #8]
   1d522:	50d1      	str	r1, [r2, r3]

	/* Set the bit corresponding to the callback_type */
	module->registered_callback_mask |= (1 << callback_type);
   1d524:	68fb      	ldr	r3, [r7, #12]
   1d526:	7e9b      	ldrb	r3, [r3, #26]
   1d528:	b25a      	sxtb	r2, r3
   1d52a:	1dfb      	adds	r3, r7, #7
   1d52c:	781b      	ldrb	r3, [r3, #0]
   1d52e:	2101      	movs	r1, #1
   1d530:	4099      	lsls	r1, r3
   1d532:	000b      	movs	r3, r1
   1d534:	b25b      	sxtb	r3, r3
   1d536:	4313      	orrs	r3, r2
   1d538:	b25b      	sxtb	r3, r3
   1d53a:	b2da      	uxtb	r2, r3
   1d53c:	68fb      	ldr	r3, [r7, #12]
   1d53e:	769a      	strb	r2, [r3, #26]
}
   1d540:	46c0      	nop			; (mov r8, r8)
   1d542:	46bd      	mov	sp, r7
   1d544:	b004      	add	sp, #16
   1d546:	bd80      	pop	{r7, pc}

0001d548 <adc_read_buffer_job>:
 */
enum status_code adc_read_buffer_job(
		struct adc_module *const module_inst,
		uint16_t *buffer,
		uint16_t samples)
{
   1d548:	b580      	push	{r7, lr}
   1d54a:	b084      	sub	sp, #16
   1d54c:	af00      	add	r7, sp, #0
   1d54e:	60f8      	str	r0, [r7, #12]
   1d550:	60b9      	str	r1, [r7, #8]
   1d552:	1dbb      	adds	r3, r7, #6
   1d554:	801a      	strh	r2, [r3, #0]
	Assert(module_inst);
	Assert(samples);
	Assert(buffer);

	if(module_inst->remaining_conversions != 0 ||
   1d556:	68fb      	ldr	r3, [r7, #12]
   1d558:	8b1b      	ldrh	r3, [r3, #24]
   1d55a:	b29b      	uxth	r3, r3
   1d55c:	2b00      	cmp	r3, #0
   1d55e:	d104      	bne.n	1d56a <adc_read_buffer_job+0x22>
			module_inst->job_status == STATUS_BUSY){
   1d560:	68fb      	ldr	r3, [r7, #12]
   1d562:	7f1b      	ldrb	r3, [r3, #28]
   1d564:	b2db      	uxtb	r3, r3
	if(module_inst->remaining_conversions != 0 ||
   1d566:	2b05      	cmp	r3, #5
   1d568:	d101      	bne.n	1d56e <adc_read_buffer_job+0x26>
		return STATUS_BUSY;
   1d56a:	2305      	movs	r3, #5
   1d56c:	e017      	b.n	1d59e <adc_read_buffer_job+0x56>
	}

	module_inst->job_status = STATUS_BUSY;
   1d56e:	68fb      	ldr	r3, [r7, #12]
   1d570:	2205      	movs	r2, #5
   1d572:	771a      	strb	r2, [r3, #28]
	module_inst->remaining_conversions = samples;
   1d574:	68fb      	ldr	r3, [r7, #12]
   1d576:	1dba      	adds	r2, r7, #6
   1d578:	8812      	ldrh	r2, [r2, #0]
   1d57a:	831a      	strh	r2, [r3, #24]
	module_inst->job_buffer = buffer;
   1d57c:	68fb      	ldr	r3, [r7, #12]
   1d57e:	68ba      	ldr	r2, [r7, #8]
   1d580:	615a      	str	r2, [r3, #20]

	adc_enable_interrupt(module_inst, ADC_INTERRUPT_RESULT_READY);
   1d582:	68fb      	ldr	r3, [r7, #12]
   1d584:	2101      	movs	r1, #1
   1d586:	0018      	movs	r0, r3
   1d588:	4b07      	ldr	r3, [pc, #28]	; (1d5a8 <adc_read_buffer_job+0x60>)
   1d58a:	4798      	blx	r3

	if(module_inst->software_trigger == true) {
   1d58c:	68fb      	ldr	r3, [r7, #12]
   1d58e:	7f5b      	ldrb	r3, [r3, #29]
   1d590:	2b00      	cmp	r3, #0
   1d592:	d003      	beq.n	1d59c <adc_read_buffer_job+0x54>
		adc_start_conversion(module_inst);
   1d594:	68fb      	ldr	r3, [r7, #12]
   1d596:	0018      	movs	r0, r3
   1d598:	4b04      	ldr	r3, [pc, #16]	; (1d5ac <adc_read_buffer_job+0x64>)
   1d59a:	4798      	blx	r3
	}

	return STATUS_OK;
   1d59c:	2300      	movs	r3, #0
}
   1d59e:	0018      	movs	r0, r3
   1d5a0:	46bd      	mov	sp, r7
   1d5a2:	b004      	add	sp, #16
   1d5a4:	bd80      	pop	{r7, pc}
   1d5a6:	46c0      	nop			; (mov r8, r8)
   1d5a8:	0001d36d 	.word	0x0001d36d
   1d5ac:	0001d325 	.word	0x0001d325

0001d5b0 <system_interrupt_disable>:
{
   1d5b0:	b580      	push	{r7, lr}
   1d5b2:	b082      	sub	sp, #8
   1d5b4:	af00      	add	r7, sp, #0
   1d5b6:	0002      	movs	r2, r0
   1d5b8:	1dfb      	adds	r3, r7, #7
   1d5ba:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   1d5bc:	4a07      	ldr	r2, [pc, #28]	; (1d5dc <system_interrupt_disable+0x2c>)
   1d5be:	1dfb      	adds	r3, r7, #7
   1d5c0:	781b      	ldrb	r3, [r3, #0]
   1d5c2:	0019      	movs	r1, r3
   1d5c4:	231f      	movs	r3, #31
   1d5c6:	400b      	ands	r3, r1
   1d5c8:	2101      	movs	r1, #1
   1d5ca:	4099      	lsls	r1, r3
   1d5cc:	000b      	movs	r3, r1
   1d5ce:	0019      	movs	r1, r3
   1d5d0:	2380      	movs	r3, #128	; 0x80
   1d5d2:	50d1      	str	r1, [r2, r3]
}
   1d5d4:	46c0      	nop			; (mov r8, r8)
   1d5d6:	46bd      	mov	sp, r7
   1d5d8:	b002      	add	sp, #8
   1d5da:	bd80      	pop	{r7, pc}
   1d5dc:	e000e100 	.word	0xe000e100

0001d5e0 <_dac_interrupt_handler>:
 *  Internal handler for DAC module interrupts.
 *
 * \param[in] instance  DAC instance number
 */
static void _dac_interrupt_handler(const uint8_t instance)
{
   1d5e0:	b580      	push	{r7, lr}
   1d5e2:	b084      	sub	sp, #16
   1d5e4:	af00      	add	r7, sp, #0
   1d5e6:	0002      	movs	r2, r0
   1d5e8:	1dfb      	adds	r3, r7, #7
   1d5ea:	701a      	strb	r2, [r3, #0]
	struct dac_module *module = _dac_instances[instance];
   1d5ec:	1dfb      	adds	r3, r7, #7
   1d5ee:	781a      	ldrb	r2, [r3, #0]
   1d5f0:	4b37      	ldr	r3, [pc, #220]	; (1d6d0 <_dac_interrupt_handler+0xf0>)
   1d5f2:	0092      	lsls	r2, r2, #2
   1d5f4:	58d3      	ldr	r3, [r2, r3]
   1d5f6:	60fb      	str	r3, [r7, #12]
	Dac *const dac_hw = module->hw;
   1d5f8:	68fb      	ldr	r3, [r7, #12]
   1d5fa:	681b      	ldr	r3, [r3, #0]
   1d5fc:	60bb      	str	r3, [r7, #8]

	if (dac_hw->INTFLAG.reg & DAC_INTFLAG_UNDERRUN) {
   1d5fe:	68bb      	ldr	r3, [r7, #8]
   1d600:	799b      	ldrb	r3, [r3, #6]
   1d602:	b2db      	uxtb	r3, r3
   1d604:	001a      	movs	r2, r3
   1d606:	2301      	movs	r3, #1
   1d608:	4013      	ands	r3, r2
   1d60a:	d00e      	beq.n	1d62a <_dac_interrupt_handler+0x4a>
		dac_hw->INTFLAG.reg = DAC_INTFLAG_UNDERRUN;
   1d60c:	68bb      	ldr	r3, [r7, #8]
   1d60e:	2201      	movs	r2, #1
   1d610:	719a      	strb	r2, [r3, #6]

		if ((module->callback) &&
   1d612:	68fb      	ldr	r3, [r7, #12]
   1d614:	3314      	adds	r3, #20
   1d616:	2b00      	cmp	r3, #0
   1d618:	d007      	beq.n	1d62a <_dac_interrupt_handler+0x4a>
			 (module->callback_enable[DAC_CALLBACK_DATA_UNDERRUN])){
   1d61a:	68fb      	ldr	r3, [r7, #12]
   1d61c:	7c5b      	ldrb	r3, [r3, #17]
		if ((module->callback) &&
   1d61e:	2b00      	cmp	r3, #0
   1d620:	d003      	beq.n	1d62a <_dac_interrupt_handler+0x4a>
			module->callback[DAC_CALLBACK_DATA_UNDERRUN](0);
   1d622:	68fb      	ldr	r3, [r7, #12]
   1d624:	699b      	ldr	r3, [r3, #24]
   1d626:	2000      	movs	r0, #0
   1d628:	4798      	blx	r3
		}
	}

	if (dac_hw->INTFLAG.reg & DAC_INTFLAG_EMPTY) {
   1d62a:	68bb      	ldr	r3, [r7, #8]
   1d62c:	799b      	ldrb	r3, [r3, #6]
   1d62e:	b2db      	uxtb	r3, r3
   1d630:	001a      	movs	r2, r3
   1d632:	2302      	movs	r3, #2
   1d634:	4013      	ands	r3, r2
   1d636:	d047      	beq.n	1d6c8 <_dac_interrupt_handler+0xe8>
		dac_hw->INTFLAG.reg = DAC_INTFLAG_EMPTY;
   1d638:	68bb      	ldr	r3, [r7, #8]
   1d63a:	2202      	movs	r2, #2
   1d63c:	719a      	strb	r2, [r3, #6]

		/* If in a write buffer job */
		if (module->remaining_conversions) {
   1d63e:	68fb      	ldr	r3, [r7, #12]
   1d640:	899b      	ldrh	r3, [r3, #12]
   1d642:	b29b      	uxth	r3, r3
   1d644:	2b00      	cmp	r3, #0
   1d646:	d033      	beq.n	1d6b0 <_dac_interrupt_handler+0xd0>

			/* Fill the data buffer with next data in write buffer */
			dac_hw->DATABUF.reg =
				module->job_buffer[module->transferred_conversions++];
   1d648:	68fb      	ldr	r3, [r7, #12]
   1d64a:	689a      	ldr	r2, [r3, #8]
   1d64c:	68fb      	ldr	r3, [r7, #12]
   1d64e:	89db      	ldrh	r3, [r3, #14]
   1d650:	b29b      	uxth	r3, r3
   1d652:	1c59      	adds	r1, r3, #1
   1d654:	b288      	uxth	r0, r1
   1d656:	68f9      	ldr	r1, [r7, #12]
   1d658:	81c8      	strh	r0, [r1, #14]
   1d65a:	005b      	lsls	r3, r3, #1
   1d65c:	18d3      	adds	r3, r2, r3
   1d65e:	881b      	ldrh	r3, [r3, #0]
   1d660:	b29a      	uxth	r2, r3
			dac_hw->DATABUF.reg =
   1d662:	68bb      	ldr	r3, [r7, #8]
   1d664:	819a      	strh	r2, [r3, #12]

			/* Write buffer size decrement */
			module->remaining_conversions --;
   1d666:	68fb      	ldr	r3, [r7, #12]
   1d668:	899b      	ldrh	r3, [r3, #12]
   1d66a:	b29b      	uxth	r3, r3
   1d66c:	3b01      	subs	r3, #1
   1d66e:	b29a      	uxth	r2, r3
   1d670:	68fb      	ldr	r3, [r7, #12]
   1d672:	819a      	strh	r2, [r3, #12]

			/* If in a write buffer job and all the data are converted */
			if (module->remaining_conversions == 0) {
   1d674:	68fb      	ldr	r3, [r7, #12]
   1d676:	899b      	ldrh	r3, [r3, #12]
   1d678:	b29b      	uxth	r3, r3
   1d67a:	2b00      	cmp	r3, #0
   1d67c:	d118      	bne.n	1d6b0 <_dac_interrupt_handler+0xd0>
				module->job_status = STATUS_OK;
   1d67e:	68fb      	ldr	r3, [r7, #12]
   1d680:	2220      	movs	r2, #32
   1d682:	2100      	movs	r1, #0
   1d684:	5499      	strb	r1, [r3, r2]

				/* Disable interrupt */
				dac_hw->INTENCLR.reg = DAC_INTENCLR_EMPTY;
   1d686:	68bb      	ldr	r3, [r7, #8]
   1d688:	2202      	movs	r2, #2
   1d68a:	711a      	strb	r2, [r3, #4]
				dac_hw->INTFLAG.reg = DAC_INTFLAG_EMPTY;
   1d68c:	68bb      	ldr	r3, [r7, #8]
   1d68e:	2202      	movs	r2, #2
   1d690:	719a      	strb	r2, [r3, #6]
				system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_DAC);
   1d692:	2019      	movs	r0, #25
   1d694:	4b0f      	ldr	r3, [pc, #60]	; (1d6d4 <_dac_interrupt_handler+0xf4>)
   1d696:	4798      	blx	r3

				if ((module->callback) &&
   1d698:	68fb      	ldr	r3, [r7, #12]
   1d69a:	3314      	adds	r3, #20
   1d69c:	2b00      	cmp	r3, #0
   1d69e:	d007      	beq.n	1d6b0 <_dac_interrupt_handler+0xd0>
					 (module->callback_enable[DAC_CALLBACK_TRANSFER_COMPLETE])) {
   1d6a0:	68fb      	ldr	r3, [r7, #12]
   1d6a2:	7c9b      	ldrb	r3, [r3, #18]
				if ((module->callback) &&
   1d6a4:	2b00      	cmp	r3, #0
   1d6a6:	d003      	beq.n	1d6b0 <_dac_interrupt_handler+0xd0>
					module->callback[DAC_CALLBACK_TRANSFER_COMPLETE](0);
   1d6a8:	68fb      	ldr	r3, [r7, #12]
   1d6aa:	69db      	ldr	r3, [r3, #28]
   1d6ac:	2000      	movs	r0, #0
   1d6ae:	4798      	blx	r3
				}
			}
		}

		if ((module->callback) &&
   1d6b0:	68fb      	ldr	r3, [r7, #12]
   1d6b2:	3314      	adds	r3, #20
   1d6b4:	2b00      	cmp	r3, #0
   1d6b6:	d007      	beq.n	1d6c8 <_dac_interrupt_handler+0xe8>
			 (module->callback_enable[DAC_CALLBACK_DATA_EMPTY])) {
   1d6b8:	68fb      	ldr	r3, [r7, #12]
   1d6ba:	7c1b      	ldrb	r3, [r3, #16]
		if ((module->callback) &&
   1d6bc:	2b00      	cmp	r3, #0
   1d6be:	d003      	beq.n	1d6c8 <_dac_interrupt_handler+0xe8>
			module->callback[DAC_CALLBACK_DATA_EMPTY](0);
   1d6c0:	68fb      	ldr	r3, [r7, #12]
   1d6c2:	695b      	ldr	r3, [r3, #20]
   1d6c4:	2000      	movs	r0, #0
   1d6c6:	4798      	blx	r3
		}
	}
}
   1d6c8:	46c0      	nop			; (mov r8, r8)
   1d6ca:	46bd      	mov	sp, r7
   1d6cc:	b004      	add	sp, #16
   1d6ce:	bd80      	pop	{r7, pc}
   1d6d0:	20000888 	.word	0x20000888
   1d6d4:	0001d5b1 	.word	0x0001d5b1

0001d6d8 <DAC_Handler>:

/** Handler for the DAC hardware module interrupt. */
void DAC_Handler(void)
{
   1d6d8:	b580      	push	{r7, lr}
   1d6da:	af00      	add	r7, sp, #0
	_dac_interrupt_handler(0);
   1d6dc:	2000      	movs	r0, #0
   1d6de:	4b02      	ldr	r3, [pc, #8]	; (1d6e8 <DAC_Handler+0x10>)
   1d6e0:	4798      	blx	r3
}
   1d6e2:	46c0      	nop			; (mov r8, r8)
   1d6e4:	46bd      	mov	sp, r7
   1d6e6:	bd80      	pop	{r7, pc}
   1d6e8:	0001d5e1 	.word	0x0001d5e1

0001d6ec <system_interrupt_enter_critical_section>:
{
   1d6ec:	b580      	push	{r7, lr}
   1d6ee:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
   1d6f0:	4b02      	ldr	r3, [pc, #8]	; (1d6fc <system_interrupt_enter_critical_section+0x10>)
   1d6f2:	4798      	blx	r3
}
   1d6f4:	46c0      	nop			; (mov r8, r8)
   1d6f6:	46bd      	mov	sp, r7
   1d6f8:	bd80      	pop	{r7, pc}
   1d6fa:	46c0      	nop			; (mov r8, r8)
   1d6fc:	000237ed 	.word	0x000237ed

0001d700 <system_interrupt_leave_critical_section>:
{
   1d700:	b580      	push	{r7, lr}
   1d702:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
   1d704:	4b02      	ldr	r3, [pc, #8]	; (1d710 <system_interrupt_leave_critical_section+0x10>)
   1d706:	4798      	blx	r3
}
   1d708:	46c0      	nop			; (mov r8, r8)
   1d70a:	46bd      	mov	sp, r7
   1d70c:	bd80      	pop	{r7, pc}
   1d70e:	46c0      	nop			; (mov r8, r8)
   1d710:	00023841 	.word	0x00023841

0001d714 <DMAC_Handler>:
/**
 * \brief DMA interrupt service routine.
 *
 */
void DMAC_Handler( void )
{
   1d714:	b580      	push	{r7, lr}
   1d716:	b086      	sub	sp, #24
   1d718:	af00      	add	r7, sp, #0
	struct dma_resource *resource;
	uint8_t isr;
	uint32_t write_size;
	uint32_t total_size;

	system_interrupt_enter_critical_section();
   1d71a:	4b49      	ldr	r3, [pc, #292]	; (1d840 <DMAC_Handler+0x12c>)
   1d71c:	4798      	blx	r3

	/* Get Pending channel */
	active_channel =  DMAC->INTPEND.reg & DMAC_INTPEND_ID_Msk;
   1d71e:	4b49      	ldr	r3, [pc, #292]	; (1d844 <DMAC_Handler+0x130>)
   1d720:	8c1b      	ldrh	r3, [r3, #32]
   1d722:	b29b      	uxth	r3, r3
   1d724:	b2da      	uxtb	r2, r3
   1d726:	2317      	movs	r3, #23
   1d728:	18fb      	adds	r3, r7, r3
   1d72a:	210f      	movs	r1, #15
   1d72c:	400a      	ands	r2, r1
   1d72e:	701a      	strb	r2, [r3, #0]

	Assert(_dma_active_resource[active_channel]);

	/* Get active DMA resource based on channel */
	resource = _dma_active_resource[active_channel];
   1d730:	2317      	movs	r3, #23
   1d732:	18fb      	adds	r3, r7, r3
   1d734:	781a      	ldrb	r2, [r3, #0]
   1d736:	4b44      	ldr	r3, [pc, #272]	; (1d848 <DMAC_Handler+0x134>)
   1d738:	0092      	lsls	r2, r2, #2
   1d73a:	58d3      	ldr	r3, [r2, r3]
   1d73c:	613b      	str	r3, [r7, #16]

	/* Select the active channel */
	DMAC->CHID.reg = DMAC_CHID_ID(resource->channel_id);
   1d73e:	4a41      	ldr	r2, [pc, #260]	; (1d844 <DMAC_Handler+0x130>)
   1d740:	693b      	ldr	r3, [r7, #16]
   1d742:	781b      	ldrb	r3, [r3, #0]
   1d744:	210f      	movs	r1, #15
   1d746:	400b      	ands	r3, r1
   1d748:	b2d9      	uxtb	r1, r3
   1d74a:	233f      	movs	r3, #63	; 0x3f
   1d74c:	54d1      	strb	r1, [r2, r3]
	isr = DMAC->CHINTFLAG.reg;
   1d74e:	493d      	ldr	r1, [pc, #244]	; (1d844 <DMAC_Handler+0x130>)
   1d750:	230f      	movs	r3, #15
   1d752:	18fb      	adds	r3, r7, r3
   1d754:	224e      	movs	r2, #78	; 0x4e
   1d756:	5c8a      	ldrb	r2, [r1, r2]
   1d758:	701a      	strb	r2, [r3, #0]

	/* Calculate block transfer size of the DMA transfer */
	total_size = descriptor_section[resource->channel_id].BTCNT.reg;
   1d75a:	693b      	ldr	r3, [r7, #16]
   1d75c:	781b      	ldrb	r3, [r3, #0]
   1d75e:	4a3b      	ldr	r2, [pc, #236]	; (1d84c <DMAC_Handler+0x138>)
   1d760:	011b      	lsls	r3, r3, #4
   1d762:	18d3      	adds	r3, r2, r3
   1d764:	3302      	adds	r3, #2
   1d766:	881b      	ldrh	r3, [r3, #0]
   1d768:	b29b      	uxth	r3, r3
   1d76a:	60bb      	str	r3, [r7, #8]
	write_size = _write_back_section[resource->channel_id].BTCNT.reg;
   1d76c:	693b      	ldr	r3, [r7, #16]
   1d76e:	781b      	ldrb	r3, [r3, #0]
   1d770:	4a37      	ldr	r2, [pc, #220]	; (1d850 <DMAC_Handler+0x13c>)
   1d772:	011b      	lsls	r3, r3, #4
   1d774:	18d3      	adds	r3, r2, r3
   1d776:	3302      	adds	r3, #2
   1d778:	881b      	ldrh	r3, [r3, #0]
   1d77a:	b29b      	uxth	r3, r3
   1d77c:	607b      	str	r3, [r7, #4]
	resource->transfered_size = total_size - write_size;
   1d77e:	68ba      	ldr	r2, [r7, #8]
   1d780:	687b      	ldr	r3, [r7, #4]
   1d782:	1ad2      	subs	r2, r2, r3
   1d784:	693b      	ldr	r3, [r7, #16]
   1d786:	615a      	str	r2, [r3, #20]

	/* DMA channel interrupt handler */
	if (isr & DMAC_CHINTENCLR_TERR) {
   1d788:	230f      	movs	r3, #15
   1d78a:	18fb      	adds	r3, r7, r3
   1d78c:	781b      	ldrb	r3, [r3, #0]
   1d78e:	2201      	movs	r2, #1
   1d790:	4013      	ands	r3, r2
   1d792:	d016      	beq.n	1d7c2 <DMAC_Handler+0xae>
		/* Clear transfer error flag */
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_TERR;
   1d794:	4a2b      	ldr	r2, [pc, #172]	; (1d844 <DMAC_Handler+0x130>)
   1d796:	234e      	movs	r3, #78	; 0x4e
   1d798:	2101      	movs	r1, #1
   1d79a:	54d1      	strb	r1, [r2, r3]

		/* Set I/O ERROR status */
		resource->job_status = STATUS_ERR_IO;
   1d79c:	693b      	ldr	r3, [r7, #16]
   1d79e:	2210      	movs	r2, #16
   1d7a0:	745a      	strb	r2, [r3, #17]

		/* Execute the callback function */
		if ((resource->callback_enable & (1<<DMA_CALLBACK_TRANSFER_ERROR)) &&
   1d7a2:	693b      	ldr	r3, [r7, #16]
   1d7a4:	7c1b      	ldrb	r3, [r3, #16]
   1d7a6:	001a      	movs	r2, r3
   1d7a8:	2301      	movs	r3, #1
   1d7aa:	4013      	ands	r3, r2
   1d7ac:	d042      	beq.n	1d834 <DMAC_Handler+0x120>
				(resource->callback[DMA_CALLBACK_TRANSFER_ERROR])) {
   1d7ae:	693b      	ldr	r3, [r7, #16]
   1d7b0:	685b      	ldr	r3, [r3, #4]
		if ((resource->callback_enable & (1<<DMA_CALLBACK_TRANSFER_ERROR)) &&
   1d7b2:	2b00      	cmp	r3, #0
   1d7b4:	d03e      	beq.n	1d834 <DMAC_Handler+0x120>
			resource->callback[DMA_CALLBACK_TRANSFER_ERROR](resource);
   1d7b6:	693b      	ldr	r3, [r7, #16]
   1d7b8:	685b      	ldr	r3, [r3, #4]
   1d7ba:	693a      	ldr	r2, [r7, #16]
   1d7bc:	0010      	movs	r0, r2
   1d7be:	4798      	blx	r3
   1d7c0:	e038      	b.n	1d834 <DMAC_Handler+0x120>
		}
	} else if (isr & DMAC_CHINTENCLR_TCMPL) {
   1d7c2:	230f      	movs	r3, #15
   1d7c4:	18fb      	adds	r3, r7, r3
   1d7c6:	781b      	ldrb	r3, [r3, #0]
   1d7c8:	2202      	movs	r2, #2
   1d7ca:	4013      	ands	r3, r2
   1d7cc:	d016      	beq.n	1d7fc <DMAC_Handler+0xe8>
		/* Clear the transfer complete flag */
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_TCMPL;
   1d7ce:	4a1d      	ldr	r2, [pc, #116]	; (1d844 <DMAC_Handler+0x130>)
   1d7d0:	234e      	movs	r3, #78	; 0x4e
   1d7d2:	2102      	movs	r1, #2
   1d7d4:	54d1      	strb	r1, [r2, r3]

		/* Set job status */
		resource->job_status = STATUS_OK;
   1d7d6:	693b      	ldr	r3, [r7, #16]
   1d7d8:	2200      	movs	r2, #0
   1d7da:	745a      	strb	r2, [r3, #17]

		/* Execute the callback function */
		if ((resource->callback_enable & (1 << DMA_CALLBACK_TRANSFER_DONE)) &&
   1d7dc:	693b      	ldr	r3, [r7, #16]
   1d7de:	7c1b      	ldrb	r3, [r3, #16]
   1d7e0:	001a      	movs	r2, r3
   1d7e2:	2302      	movs	r3, #2
   1d7e4:	4013      	ands	r3, r2
   1d7e6:	d025      	beq.n	1d834 <DMAC_Handler+0x120>
				(resource->callback[DMA_CALLBACK_TRANSFER_DONE])) {
   1d7e8:	693b      	ldr	r3, [r7, #16]
   1d7ea:	689b      	ldr	r3, [r3, #8]
		if ((resource->callback_enable & (1 << DMA_CALLBACK_TRANSFER_DONE)) &&
   1d7ec:	2b00      	cmp	r3, #0
   1d7ee:	d021      	beq.n	1d834 <DMAC_Handler+0x120>
			resource->callback[DMA_CALLBACK_TRANSFER_DONE](resource);
   1d7f0:	693b      	ldr	r3, [r7, #16]
   1d7f2:	689b      	ldr	r3, [r3, #8]
   1d7f4:	693a      	ldr	r2, [r7, #16]
   1d7f6:	0010      	movs	r0, r2
   1d7f8:	4798      	blx	r3
   1d7fa:	e01b      	b.n	1d834 <DMAC_Handler+0x120>
		}
	} else if (isr & DMAC_CHINTENCLR_SUSP) {
   1d7fc:	230f      	movs	r3, #15
   1d7fe:	18fb      	adds	r3, r7, r3
   1d800:	781b      	ldrb	r3, [r3, #0]
   1d802:	2204      	movs	r2, #4
   1d804:	4013      	ands	r3, r2
   1d806:	d015      	beq.n	1d834 <DMAC_Handler+0x120>
		/* Clear channel suspend flag */
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_SUSP;
   1d808:	4a0e      	ldr	r2, [pc, #56]	; (1d844 <DMAC_Handler+0x130>)
   1d80a:	234e      	movs	r3, #78	; 0x4e
   1d80c:	2104      	movs	r1, #4
   1d80e:	54d1      	strb	r1, [r2, r3]

		/* Set job status */
		resource->job_status = STATUS_SUSPEND;
   1d810:	693b      	ldr	r3, [r7, #16]
   1d812:	2206      	movs	r2, #6
   1d814:	745a      	strb	r2, [r3, #17]

		/* Execute the callback function */
		if ((resource->callback_enable & (1 << DMA_CALLBACK_CHANNEL_SUSPEND)) &&
   1d816:	693b      	ldr	r3, [r7, #16]
   1d818:	7c1b      	ldrb	r3, [r3, #16]
   1d81a:	001a      	movs	r2, r3
   1d81c:	2304      	movs	r3, #4
   1d81e:	4013      	ands	r3, r2
   1d820:	d008      	beq.n	1d834 <DMAC_Handler+0x120>
			(resource->callback[DMA_CALLBACK_CHANNEL_SUSPEND])){
   1d822:	693b      	ldr	r3, [r7, #16]
   1d824:	68db      	ldr	r3, [r3, #12]
		if ((resource->callback_enable & (1 << DMA_CALLBACK_CHANNEL_SUSPEND)) &&
   1d826:	2b00      	cmp	r3, #0
   1d828:	d004      	beq.n	1d834 <DMAC_Handler+0x120>
			resource->callback[DMA_CALLBACK_CHANNEL_SUSPEND](resource);
   1d82a:	693b      	ldr	r3, [r7, #16]
   1d82c:	68db      	ldr	r3, [r3, #12]
   1d82e:	693a      	ldr	r2, [r7, #16]
   1d830:	0010      	movs	r0, r2
   1d832:	4798      	blx	r3
		}
	}

	system_interrupt_leave_critical_section();
   1d834:	4b07      	ldr	r3, [pc, #28]	; (1d854 <DMAC_Handler+0x140>)
   1d836:	4798      	blx	r3
}
   1d838:	46c0      	nop			; (mov r8, r8)
   1d83a:	46bd      	mov	sp, r7
   1d83c:	b006      	add	sp, #24
   1d83e:	bd80      	pop	{r7, pc}
   1d840:	0001d6ed 	.word	0x0001d6ed
   1d844:	41004800 	.word	0x41004800
   1d848:	200002b0 	.word	0x200002b0
   1d84c:	20000890 	.word	0x20000890
   1d850:	20000260 	.word	0x20000260
   1d854:	0001d701 	.word	0x0001d701

0001d858 <system_gclk_chan_get_config_defaults>:
{
   1d858:	b580      	push	{r7, lr}
   1d85a:	b082      	sub	sp, #8
   1d85c:	af00      	add	r7, sp, #0
   1d85e:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   1d860:	687b      	ldr	r3, [r7, #4]
   1d862:	2200      	movs	r2, #0
   1d864:	701a      	strb	r2, [r3, #0]
}
   1d866:	46c0      	nop			; (mov r8, r8)
   1d868:	46bd      	mov	sp, r7
   1d86a:	b002      	add	sp, #8
   1d86c:	bd80      	pop	{r7, pc}
	...

0001d870 <system_apb_clock_set_mask>:
{
   1d870:	b580      	push	{r7, lr}
   1d872:	b082      	sub	sp, #8
   1d874:	af00      	add	r7, sp, #0
   1d876:	0002      	movs	r2, r0
   1d878:	6039      	str	r1, [r7, #0]
   1d87a:	1dfb      	adds	r3, r7, #7
   1d87c:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   1d87e:	1dfb      	adds	r3, r7, #7
   1d880:	781b      	ldrb	r3, [r3, #0]
   1d882:	2b01      	cmp	r3, #1
   1d884:	d00a      	beq.n	1d89c <system_apb_clock_set_mask+0x2c>
   1d886:	2b02      	cmp	r3, #2
   1d888:	d00f      	beq.n	1d8aa <system_apb_clock_set_mask+0x3a>
   1d88a:	2b00      	cmp	r3, #0
   1d88c:	d114      	bne.n	1d8b8 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   1d88e:	4b0e      	ldr	r3, [pc, #56]	; (1d8c8 <system_apb_clock_set_mask+0x58>)
   1d890:	4a0d      	ldr	r2, [pc, #52]	; (1d8c8 <system_apb_clock_set_mask+0x58>)
   1d892:	6991      	ldr	r1, [r2, #24]
   1d894:	683a      	ldr	r2, [r7, #0]
   1d896:	430a      	orrs	r2, r1
   1d898:	619a      	str	r2, [r3, #24]
			break;
   1d89a:	e00f      	b.n	1d8bc <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   1d89c:	4b0a      	ldr	r3, [pc, #40]	; (1d8c8 <system_apb_clock_set_mask+0x58>)
   1d89e:	4a0a      	ldr	r2, [pc, #40]	; (1d8c8 <system_apb_clock_set_mask+0x58>)
   1d8a0:	69d1      	ldr	r1, [r2, #28]
   1d8a2:	683a      	ldr	r2, [r7, #0]
   1d8a4:	430a      	orrs	r2, r1
   1d8a6:	61da      	str	r2, [r3, #28]
			break;
   1d8a8:	e008      	b.n	1d8bc <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   1d8aa:	4b07      	ldr	r3, [pc, #28]	; (1d8c8 <system_apb_clock_set_mask+0x58>)
   1d8ac:	4a06      	ldr	r2, [pc, #24]	; (1d8c8 <system_apb_clock_set_mask+0x58>)
   1d8ae:	6a11      	ldr	r1, [r2, #32]
   1d8b0:	683a      	ldr	r2, [r7, #0]
   1d8b2:	430a      	orrs	r2, r1
   1d8b4:	621a      	str	r2, [r3, #32]
			break;
   1d8b6:	e001      	b.n	1d8bc <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   1d8b8:	2317      	movs	r3, #23
   1d8ba:	e000      	b.n	1d8be <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   1d8bc:	2300      	movs	r3, #0
}
   1d8be:	0018      	movs	r0, r3
   1d8c0:	46bd      	mov	sp, r7
   1d8c2:	b002      	add	sp, #8
   1d8c4:	bd80      	pop	{r7, pc}
   1d8c6:	46c0      	nop			; (mov r8, r8)
   1d8c8:	40000400 	.word	0x40000400

0001d8cc <system_pinmux_get_config_defaults>:
{
   1d8cc:	b580      	push	{r7, lr}
   1d8ce:	b082      	sub	sp, #8
   1d8d0:	af00      	add	r7, sp, #0
   1d8d2:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   1d8d4:	687b      	ldr	r3, [r7, #4]
   1d8d6:	2280      	movs	r2, #128	; 0x80
   1d8d8:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   1d8da:	687b      	ldr	r3, [r7, #4]
   1d8dc:	2200      	movs	r2, #0
   1d8de:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   1d8e0:	687b      	ldr	r3, [r7, #4]
   1d8e2:	2201      	movs	r2, #1
   1d8e4:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   1d8e6:	687b      	ldr	r3, [r7, #4]
   1d8e8:	2200      	movs	r2, #0
   1d8ea:	70da      	strb	r2, [r3, #3]
}
   1d8ec:	46c0      	nop			; (mov r8, r8)
   1d8ee:	46bd      	mov	sp, r7
   1d8f0:	b002      	add	sp, #8
   1d8f2:	bd80      	pop	{r7, pc}

0001d8f4 <system_interrupt_enable>:
{
   1d8f4:	b580      	push	{r7, lr}
   1d8f6:	b082      	sub	sp, #8
   1d8f8:	af00      	add	r7, sp, #0
   1d8fa:	0002      	movs	r2, r0
   1d8fc:	1dfb      	adds	r3, r7, #7
   1d8fe:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   1d900:	4b06      	ldr	r3, [pc, #24]	; (1d91c <system_interrupt_enable+0x28>)
   1d902:	1dfa      	adds	r2, r7, #7
   1d904:	7812      	ldrb	r2, [r2, #0]
   1d906:	0011      	movs	r1, r2
   1d908:	221f      	movs	r2, #31
   1d90a:	400a      	ands	r2, r1
   1d90c:	2101      	movs	r1, #1
   1d90e:	4091      	lsls	r1, r2
   1d910:	000a      	movs	r2, r1
   1d912:	601a      	str	r2, [r3, #0]
}
   1d914:	46c0      	nop			; (mov r8, r8)
   1d916:	46bd      	mov	sp, r7
   1d918:	b002      	add	sp, #8
   1d91a:	bd80      	pop	{r7, pc}
   1d91c:	e000e100 	.word	0xe000e100

0001d920 <_extint_get_eic_from_channel>:
{
   1d920:	b580      	push	{r7, lr}
   1d922:	b084      	sub	sp, #16
   1d924:	af00      	add	r7, sp, #0
   1d926:	0002      	movs	r2, r0
   1d928:	1dfb      	adds	r3, r7, #7
   1d92a:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
   1d92c:	230f      	movs	r3, #15
   1d92e:	18fb      	adds	r3, r7, r3
   1d930:	1dfa      	adds	r2, r7, #7
   1d932:	7812      	ldrb	r2, [r2, #0]
   1d934:	0952      	lsrs	r2, r2, #5
   1d936:	701a      	strb	r2, [r3, #0]
	if (eic_index < EIC_INST_NUM) {
   1d938:	230f      	movs	r3, #15
   1d93a:	18fb      	adds	r3, r7, r3
   1d93c:	781b      	ldrb	r3, [r3, #0]
   1d93e:	2b00      	cmp	r3, #0
   1d940:	d10c      	bne.n	1d95c <_extint_get_eic_from_channel+0x3c>
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   1d942:	4b09      	ldr	r3, [pc, #36]	; (1d968 <_extint_get_eic_from_channel+0x48>)
   1d944:	60bb      	str	r3, [r7, #8]
		return eics[eic_index];
   1d946:	230f      	movs	r3, #15
   1d948:	18fb      	adds	r3, r7, r3
   1d94a:	781b      	ldrb	r3, [r3, #0]
   1d94c:	009b      	lsls	r3, r3, #2
   1d94e:	2210      	movs	r2, #16
   1d950:	4694      	mov	ip, r2
   1d952:	44bc      	add	ip, r7
   1d954:	4463      	add	r3, ip
   1d956:	3b08      	subs	r3, #8
   1d958:	681b      	ldr	r3, [r3, #0]
   1d95a:	e000      	b.n	1d95e <_extint_get_eic_from_channel+0x3e>
		return NULL;
   1d95c:	2300      	movs	r3, #0
}
   1d95e:	0018      	movs	r0, r3
   1d960:	46bd      	mov	sp, r7
   1d962:	b004      	add	sp, #16
   1d964:	bd80      	pop	{r7, pc}
   1d966:	46c0      	nop			; (mov r8, r8)
   1d968:	40001800 	.word	0x40001800

0001d96c <extint_is_syncing>:
 *
 * \retval true  If the module synchronization is ongoing
 * \retval false If the module has completed synchronization
 */
static inline bool extint_is_syncing(void)
{
   1d96c:	b580      	push	{r7, lr}
   1d96e:	b082      	sub	sp, #8
   1d970:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   1d972:	4b0f      	ldr	r3, [pc, #60]	; (1d9b0 <extint_is_syncing+0x44>)
   1d974:	603b      	str	r3, [r7, #0]

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   1d976:	2300      	movs	r3, #0
   1d978:	607b      	str	r3, [r7, #4]
   1d97a:	e011      	b.n	1d9a0 <extint_is_syncing+0x34>
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
   1d97c:	687b      	ldr	r3, [r7, #4]
   1d97e:	009b      	lsls	r3, r3, #2
   1d980:	2208      	movs	r2, #8
   1d982:	4694      	mov	ip, r2
   1d984:	44bc      	add	ip, r7
   1d986:	4463      	add	r3, ip
   1d988:	3b08      	subs	r3, #8
   1d98a:	681b      	ldr	r3, [r3, #0]
   1d98c:	785b      	ldrb	r3, [r3, #1]
   1d98e:	b2db      	uxtb	r3, r3
   1d990:	b25b      	sxtb	r3, r3
   1d992:	2b00      	cmp	r3, #0
   1d994:	da01      	bge.n	1d99a <extint_is_syncing+0x2e>
			return true;
   1d996:	2301      	movs	r3, #1
   1d998:	e006      	b.n	1d9a8 <extint_is_syncing+0x3c>
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   1d99a:	687b      	ldr	r3, [r7, #4]
   1d99c:	3301      	adds	r3, #1
   1d99e:	607b      	str	r3, [r7, #4]
   1d9a0:	687b      	ldr	r3, [r7, #4]
   1d9a2:	2b00      	cmp	r3, #0
   1d9a4:	d0ea      	beq.n	1d97c <extint_is_syncing+0x10>
		}
	}
	return false;
   1d9a6:	2300      	movs	r3, #0
}
   1d9a8:	0018      	movs	r0, r3
   1d9aa:	46bd      	mov	sp, r7
   1d9ac:	b002      	add	sp, #8
   1d9ae:	bd80      	pop	{r7, pc}
   1d9b0:	40001800 	.word	0x40001800

0001d9b4 <_system_extint_init>:
 * \note When SYSTEM module is used, this function will be invoked by
 * \ref system_init() automatically if the module is included.
 */
void _system_extint_init(void);
void _system_extint_init(void)
{
   1d9b4:	b580      	push	{r7, lr}
   1d9b6:	b084      	sub	sp, #16
   1d9b8:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   1d9ba:	4b2d      	ldr	r3, [pc, #180]	; (1da70 <_system_extint_init+0xbc>)
   1d9bc:	607b      	str	r3, [r7, #4]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_EIC);
   1d9be:	2140      	movs	r1, #64	; 0x40
   1d9c0:	2000      	movs	r0, #0
   1d9c2:	4b2c      	ldr	r3, [pc, #176]	; (1da74 <_system_extint_init+0xc0>)
   1d9c4:	4798      	blx	r3

	/* Configure the generic clock for the module and enable it */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   1d9c6:	003b      	movs	r3, r7
   1d9c8:	0018      	movs	r0, r3
   1d9ca:	4b2b      	ldr	r3, [pc, #172]	; (1da78 <_system_extint_init+0xc4>)
   1d9cc:	4798      	blx	r3
	gclk_chan_conf.source_generator = EXTINT_CLOCK_SOURCE;
   1d9ce:	003b      	movs	r3, r7
   1d9d0:	2206      	movs	r2, #6
   1d9d2:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
   1d9d4:	003b      	movs	r3, r7
   1d9d6:	0019      	movs	r1, r3
   1d9d8:	2005      	movs	r0, #5
   1d9da:	4b28      	ldr	r3, [pc, #160]	; (1da7c <_system_extint_init+0xc8>)
   1d9dc:	4798      	blx	r3

	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);
   1d9de:	2005      	movs	r0, #5
   1d9e0:	4b27      	ldr	r3, [pc, #156]	; (1da80 <_system_extint_init+0xcc>)
   1d9e2:	4798      	blx	r3

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   1d9e4:	2300      	movs	r3, #0
   1d9e6:	60fb      	str	r3, [r7, #12]
   1d9e8:	e018      	b.n	1da1c <_system_extint_init+0x68>
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
   1d9ea:	68fb      	ldr	r3, [r7, #12]
   1d9ec:	009b      	lsls	r3, r3, #2
   1d9ee:	2210      	movs	r2, #16
   1d9f0:	4694      	mov	ip, r2
   1d9f2:	44bc      	add	ip, r7
   1d9f4:	4463      	add	r3, ip
   1d9f6:	3b0c      	subs	r3, #12
   1d9f8:	681a      	ldr	r2, [r3, #0]
   1d9fa:	68fb      	ldr	r3, [r7, #12]
   1d9fc:	009b      	lsls	r3, r3, #2
   1d9fe:	2110      	movs	r1, #16
   1da00:	468c      	mov	ip, r1
   1da02:	44bc      	add	ip, r7
   1da04:	4463      	add	r3, ip
   1da06:	3b0c      	subs	r3, #12
   1da08:	681b      	ldr	r3, [r3, #0]
   1da0a:	781b      	ldrb	r3, [r3, #0]
   1da0c:	b2db      	uxtb	r3, r3
   1da0e:	2101      	movs	r1, #1
   1da10:	430b      	orrs	r3, r1
   1da12:	b2db      	uxtb	r3, r3
   1da14:	7013      	strb	r3, [r2, #0]
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   1da16:	68fb      	ldr	r3, [r7, #12]
   1da18:	3301      	adds	r3, #1
   1da1a:	60fb      	str	r3, [r7, #12]
   1da1c:	68fb      	ldr	r3, [r7, #12]
   1da1e:	2b00      	cmp	r3, #0
   1da20:	d0e3      	beq.n	1d9ea <_system_extint_init+0x36>
	}

	while (extint_is_syncing()) {
   1da22:	46c0      	nop			; (mov r8, r8)
   1da24:	4b17      	ldr	r3, [pc, #92]	; (1da84 <_system_extint_init+0xd0>)
   1da26:	4798      	blx	r3
   1da28:	1e03      	subs	r3, r0, #0
   1da2a:	d1fb      	bne.n	1da24 <_system_extint_init+0x70>
	}

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
   1da2c:	230b      	movs	r3, #11
   1da2e:	18fb      	adds	r3, r7, r3
   1da30:	2200      	movs	r2, #0
   1da32:	701a      	strb	r2, [r3, #0]
   1da34:	e00d      	b.n	1da52 <_system_extint_init+0x9e>
		_extint_dev.callbacks[j] = NULL;
   1da36:	230b      	movs	r3, #11
   1da38:	18fb      	adds	r3, r7, r3
   1da3a:	781a      	ldrb	r2, [r3, #0]
   1da3c:	4b12      	ldr	r3, [pc, #72]	; (1da88 <_system_extint_init+0xd4>)
   1da3e:	0092      	lsls	r2, r2, #2
   1da40:	2100      	movs	r1, #0
   1da42:	50d1      	str	r1, [r2, r3]
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
   1da44:	230b      	movs	r3, #11
   1da46:	18fb      	adds	r3, r7, r3
   1da48:	781a      	ldrb	r2, [r3, #0]
   1da4a:	230b      	movs	r3, #11
   1da4c:	18fb      	adds	r3, r7, r3
   1da4e:	3201      	adds	r2, #1
   1da50:	701a      	strb	r2, [r3, #0]
   1da52:	230b      	movs	r3, #11
   1da54:	18fb      	adds	r3, r7, r3
   1da56:	781b      	ldrb	r3, [r3, #0]
   1da58:	2b0f      	cmp	r3, #15
   1da5a:	d9ec      	bls.n	1da36 <_system_extint_init+0x82>
	}
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EIC);
   1da5c:	2004      	movs	r0, #4
   1da5e:	4b0b      	ldr	r3, [pc, #44]	; (1da8c <_system_extint_init+0xd8>)
   1da60:	4798      	blx	r3
#endif

	/* Enables the driver for further use */
	_extint_enable();
   1da62:	4b0b      	ldr	r3, [pc, #44]	; (1da90 <_system_extint_init+0xdc>)
   1da64:	4798      	blx	r3
}
   1da66:	46c0      	nop			; (mov r8, r8)
   1da68:	46bd      	mov	sp, r7
   1da6a:	b004      	add	sp, #16
   1da6c:	bd80      	pop	{r7, pc}
   1da6e:	46c0      	nop			; (mov r8, r8)
   1da70:	40001800 	.word	0x40001800
   1da74:	0001d871 	.word	0x0001d871
   1da78:	0001d859 	.word	0x0001d859
   1da7c:	000245a5 	.word	0x000245a5
   1da80:	000245e9 	.word	0x000245e9
   1da84:	0001d96d 	.word	0x0001d96d
   1da88:	200008e0 	.word	0x200008e0
   1da8c:	0001d8f5 	.word	0x0001d8f5
   1da90:	0001da95 	.word	0x0001da95

0001da94 <_extint_enable>:
 *
 * Enables EIC modules.
 * Registered callback list will not be affected if callback mode is used.
 */
void _extint_enable(void)
{
   1da94:	b580      	push	{r7, lr}
   1da96:	b082      	sub	sp, #8
   1da98:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   1da9a:	4b15      	ldr	r3, [pc, #84]	; (1daf0 <_extint_enable+0x5c>)
   1da9c:	603b      	str	r3, [r7, #0]

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   1da9e:	2300      	movs	r3, #0
   1daa0:	607b      	str	r3, [r7, #4]
   1daa2:	e018      	b.n	1dad6 <_extint_enable+0x42>
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
   1daa4:	687b      	ldr	r3, [r7, #4]
   1daa6:	009b      	lsls	r3, r3, #2
   1daa8:	2208      	movs	r2, #8
   1daaa:	4694      	mov	ip, r2
   1daac:	44bc      	add	ip, r7
   1daae:	4463      	add	r3, ip
   1dab0:	3b08      	subs	r3, #8
   1dab2:	681a      	ldr	r2, [r3, #0]
   1dab4:	687b      	ldr	r3, [r7, #4]
   1dab6:	009b      	lsls	r3, r3, #2
   1dab8:	2108      	movs	r1, #8
   1daba:	468c      	mov	ip, r1
   1dabc:	44bc      	add	ip, r7
   1dabe:	4463      	add	r3, ip
   1dac0:	3b08      	subs	r3, #8
   1dac2:	681b      	ldr	r3, [r3, #0]
   1dac4:	781b      	ldrb	r3, [r3, #0]
   1dac6:	b2db      	uxtb	r3, r3
   1dac8:	2102      	movs	r1, #2
   1daca:	430b      	orrs	r3, r1
   1dacc:	b2db      	uxtb	r3, r3
   1dace:	7013      	strb	r3, [r2, #0]
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   1dad0:	687b      	ldr	r3, [r7, #4]
   1dad2:	3301      	adds	r3, #1
   1dad4:	607b      	str	r3, [r7, #4]
   1dad6:	687b      	ldr	r3, [r7, #4]
   1dad8:	2b00      	cmp	r3, #0
   1dada:	d0e3      	beq.n	1daa4 <_extint_enable+0x10>
	}

	while (extint_is_syncing()) {
   1dadc:	46c0      	nop			; (mov r8, r8)
   1dade:	4b05      	ldr	r3, [pc, #20]	; (1daf4 <_extint_enable+0x60>)
   1dae0:	4798      	blx	r3
   1dae2:	1e03      	subs	r3, r0, #0
   1dae4:	d1fb      	bne.n	1dade <_extint_enable+0x4a>
		/* Wait for all hardware modules to complete synchronization */
	}
}
   1dae6:	46c0      	nop			; (mov r8, r8)
   1dae8:	46bd      	mov	sp, r7
   1daea:	b002      	add	sp, #8
   1daec:	bd80      	pop	{r7, pc}
   1daee:	46c0      	nop			; (mov r8, r8)
   1daf0:	40001800 	.word	0x40001800
   1daf4:	0001d96d 	.word	0x0001d96d

0001daf8 <extint_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
void extint_chan_get_config_defaults(
		struct extint_chan_conf *const config)
{
   1daf8:	b580      	push	{r7, lr}
   1dafa:	b082      	sub	sp, #8
   1dafc:	af00      	add	r7, sp, #0
   1dafe:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
   1db00:	687b      	ldr	r3, [r7, #4]
   1db02:	2200      	movs	r2, #0
   1db04:	601a      	str	r2, [r3, #0]
	config->gpio_pin_mux        = 0;
   1db06:	687b      	ldr	r3, [r7, #4]
   1db08:	2200      	movs	r2, #0
   1db0a:	605a      	str	r2, [r3, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
   1db0c:	687b      	ldr	r3, [r7, #4]
   1db0e:	2201      	movs	r2, #1
   1db10:	721a      	strb	r2, [r3, #8]
	config->wake_if_sleeping    = true;
   1db12:	687b      	ldr	r3, [r7, #4]
   1db14:	2201      	movs	r2, #1
   1db16:	725a      	strb	r2, [r3, #9]
	config->filter_input_signal = false;
   1db18:	687b      	ldr	r3, [r7, #4]
   1db1a:	2200      	movs	r2, #0
   1db1c:	729a      	strb	r2, [r3, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
   1db1e:	687b      	ldr	r3, [r7, #4]
   1db20:	2202      	movs	r2, #2
   1db22:	72da      	strb	r2, [r3, #11]
}
   1db24:	46c0      	nop			; (mov r8, r8)
   1db26:	46bd      	mov	sp, r7
   1db28:	b002      	add	sp, #8
   1db2a:	bd80      	pop	{r7, pc}

0001db2c <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
   1db2c:	b580      	push	{r7, lr}
   1db2e:	b086      	sub	sp, #24
   1db30:	af00      	add	r7, sp, #0
   1db32:	0002      	movs	r2, r0
   1db34:	6039      	str	r1, [r7, #0]
   1db36:	1dfb      	adds	r3, r7, #7
   1db38:	701a      	strb	r2, [r3, #0]
	Assert(!(!system_gclk_gen_is_enabled(EXTINT_CLOCK_SOURCE) &&
		_extint_is_gclk_required(config->filter_input_signal,
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
   1db3a:	2308      	movs	r3, #8
   1db3c:	18fb      	adds	r3, r7, r3
   1db3e:	0018      	movs	r0, r3
   1db40:	4b36      	ldr	r3, [pc, #216]	; (1dc1c <extint_chan_set_config+0xf0>)
   1db42:	4798      	blx	r3

	pinmux_config.mux_position = config->gpio_pin_mux;
   1db44:	683b      	ldr	r3, [r7, #0]
   1db46:	685b      	ldr	r3, [r3, #4]
   1db48:	b2da      	uxtb	r2, r3
   1db4a:	2308      	movs	r3, #8
   1db4c:	18fb      	adds	r3, r7, r3
   1db4e:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   1db50:	2308      	movs	r3, #8
   1db52:	18fb      	adds	r3, r7, r3
   1db54:	2200      	movs	r2, #0
   1db56:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
   1db58:	683b      	ldr	r3, [r7, #0]
   1db5a:	7a1a      	ldrb	r2, [r3, #8]
   1db5c:	2308      	movs	r3, #8
   1db5e:	18fb      	adds	r3, r7, r3
   1db60:	709a      	strb	r2, [r3, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
   1db62:	683b      	ldr	r3, [r7, #0]
   1db64:	681b      	ldr	r3, [r3, #0]
   1db66:	b2db      	uxtb	r3, r3
   1db68:	2208      	movs	r2, #8
   1db6a:	18ba      	adds	r2, r7, r2
   1db6c:	0011      	movs	r1, r2
   1db6e:	0018      	movs	r0, r3
   1db70:	4b2b      	ldr	r3, [pc, #172]	; (1dc20 <extint_chan_set_config+0xf4>)
   1db72:	4798      	blx	r3

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);
   1db74:	1dfb      	adds	r3, r7, #7
   1db76:	781b      	ldrb	r3, [r3, #0]
   1db78:	0018      	movs	r0, r3
   1db7a:	4b2a      	ldr	r3, [pc, #168]	; (1dc24 <extint_chan_set_config+0xf8>)
   1db7c:	4798      	blx	r3
   1db7e:	0003      	movs	r3, r0
   1db80:	613b      	str	r3, [r7, #16]

	uint32_t config_pos = (4 * (channel % 8));
   1db82:	1dfb      	adds	r3, r7, #7
   1db84:	781b      	ldrb	r3, [r3, #0]
   1db86:	2207      	movs	r2, #7
   1db88:	4013      	ands	r3, r2
   1db8a:	009b      	lsls	r3, r3, #2
   1db8c:	60fb      	str	r3, [r7, #12]
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
   1db8e:	683b      	ldr	r3, [r7, #0]
   1db90:	7adb      	ldrb	r3, [r3, #11]
   1db92:	617b      	str	r3, [r7, #20]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
   1db94:	683b      	ldr	r3, [r7, #0]
   1db96:	7a9b      	ldrb	r3, [r3, #10]
   1db98:	2b00      	cmp	r3, #0
   1db9a:	d003      	beq.n	1dba4 <extint_chan_set_config+0x78>
		new_config |= EIC_CONFIG_FILTEN0;
   1db9c:	697b      	ldr	r3, [r7, #20]
   1db9e:	2208      	movs	r2, #8
   1dba0:	4313      	orrs	r3, r2
   1dba2:	617b      	str	r3, [r7, #20]
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
   1dba4:	1dfb      	adds	r3, r7, #7
   1dba6:	781b      	ldrb	r3, [r3, #0]
   1dba8:	08db      	lsrs	r3, r3, #3
   1dbaa:	b2db      	uxtb	r3, r3
   1dbac:	0018      	movs	r0, r3
		= (EIC_module->CONFIG[channel / 8].reg &
   1dbae:	1dfb      	adds	r3, r7, #7
   1dbb0:	781b      	ldrb	r3, [r3, #0]
   1dbb2:	08db      	lsrs	r3, r3, #3
   1dbb4:	b2db      	uxtb	r3, r3
   1dbb6:	001a      	movs	r2, r3
   1dbb8:	693b      	ldr	r3, [r7, #16]
   1dbba:	3206      	adds	r2, #6
   1dbbc:	0092      	lsls	r2, r2, #2
   1dbbe:	58d3      	ldr	r3, [r2, r3]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
   1dbc0:	210f      	movs	r1, #15
   1dbc2:	68fa      	ldr	r2, [r7, #12]
   1dbc4:	4091      	lsls	r1, r2
   1dbc6:	000a      	movs	r2, r1
   1dbc8:	43d2      	mvns	r2, r2
		= (EIC_module->CONFIG[channel / 8].reg &
   1dbca:	401a      	ands	r2, r3
			(new_config << config_pos);
   1dbcc:	6979      	ldr	r1, [r7, #20]
   1dbce:	68fb      	ldr	r3, [r7, #12]
   1dbd0:	4099      	lsls	r1, r3
   1dbd2:	000b      	movs	r3, r1
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
   1dbd4:	431a      	orrs	r2, r3
   1dbd6:	0011      	movs	r1, r2
		= (EIC_module->CONFIG[channel / 8].reg &
   1dbd8:	693b      	ldr	r3, [r7, #16]
   1dbda:	1d82      	adds	r2, r0, #6
   1dbdc:	0092      	lsls	r2, r2, #2
   1dbde:	50d1      	str	r1, [r2, r3]

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
   1dbe0:	683b      	ldr	r3, [r7, #0]
   1dbe2:	7a5b      	ldrb	r3, [r3, #9]
   1dbe4:	2b00      	cmp	r3, #0
   1dbe6:	d00a      	beq.n	1dbfe <extint_chan_set_config+0xd2>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
   1dbe8:	693b      	ldr	r3, [r7, #16]
   1dbea:	695a      	ldr	r2, [r3, #20]
   1dbec:	1dfb      	adds	r3, r7, #7
   1dbee:	781b      	ldrb	r3, [r3, #0]
   1dbf0:	2101      	movs	r1, #1
   1dbf2:	4099      	lsls	r1, r3
   1dbf4:	000b      	movs	r3, r1
   1dbf6:	431a      	orrs	r2, r3
   1dbf8:	693b      	ldr	r3, [r7, #16]
   1dbfa:	615a      	str	r2, [r3, #20]
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
	}
}
   1dbfc:	e00a      	b.n	1dc14 <extint_chan_set_config+0xe8>
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
   1dbfe:	693b      	ldr	r3, [r7, #16]
   1dc00:	695b      	ldr	r3, [r3, #20]
   1dc02:	1dfa      	adds	r2, r7, #7
   1dc04:	7812      	ldrb	r2, [r2, #0]
   1dc06:	2101      	movs	r1, #1
   1dc08:	4091      	lsls	r1, r2
   1dc0a:	000a      	movs	r2, r1
   1dc0c:	43d2      	mvns	r2, r2
   1dc0e:	401a      	ands	r2, r3
   1dc10:	693b      	ldr	r3, [r7, #16]
   1dc12:	615a      	str	r2, [r3, #20]
}
   1dc14:	46c0      	nop			; (mov r8, r8)
   1dc16:	46bd      	mov	sp, r7
   1dc18:	b006      	add	sp, #24
   1dc1a:	bd80      	pop	{r7, pc}
   1dc1c:	0001d8cd 	.word	0x0001d8cd
   1dc20:	00024891 	.word	0x00024891
   1dc24:	0001d921 	.word	0x0001d921

0001dc28 <system_gclk_chan_get_config_defaults>:
{
   1dc28:	b580      	push	{r7, lr}
   1dc2a:	b082      	sub	sp, #8
   1dc2c:	af00      	add	r7, sp, #0
   1dc2e:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   1dc30:	687b      	ldr	r3, [r7, #4]
   1dc32:	2200      	movs	r2, #0
   1dc34:	701a      	strb	r2, [r3, #0]
}
   1dc36:	46c0      	nop			; (mov r8, r8)
   1dc38:	46bd      	mov	sp, r7
   1dc3a:	b002      	add	sp, #8
   1dc3c:	bd80      	pop	{r7, pc}
	...

0001dc40 <system_apb_clock_set_mask>:
{
   1dc40:	b580      	push	{r7, lr}
   1dc42:	b082      	sub	sp, #8
   1dc44:	af00      	add	r7, sp, #0
   1dc46:	0002      	movs	r2, r0
   1dc48:	6039      	str	r1, [r7, #0]
   1dc4a:	1dfb      	adds	r3, r7, #7
   1dc4c:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   1dc4e:	1dfb      	adds	r3, r7, #7
   1dc50:	781b      	ldrb	r3, [r3, #0]
   1dc52:	2b01      	cmp	r3, #1
   1dc54:	d00a      	beq.n	1dc6c <system_apb_clock_set_mask+0x2c>
   1dc56:	2b02      	cmp	r3, #2
   1dc58:	d00f      	beq.n	1dc7a <system_apb_clock_set_mask+0x3a>
   1dc5a:	2b00      	cmp	r3, #0
   1dc5c:	d114      	bne.n	1dc88 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   1dc5e:	4b0e      	ldr	r3, [pc, #56]	; (1dc98 <system_apb_clock_set_mask+0x58>)
   1dc60:	4a0d      	ldr	r2, [pc, #52]	; (1dc98 <system_apb_clock_set_mask+0x58>)
   1dc62:	6991      	ldr	r1, [r2, #24]
   1dc64:	683a      	ldr	r2, [r7, #0]
   1dc66:	430a      	orrs	r2, r1
   1dc68:	619a      	str	r2, [r3, #24]
			break;
   1dc6a:	e00f      	b.n	1dc8c <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   1dc6c:	4b0a      	ldr	r3, [pc, #40]	; (1dc98 <system_apb_clock_set_mask+0x58>)
   1dc6e:	4a0a      	ldr	r2, [pc, #40]	; (1dc98 <system_apb_clock_set_mask+0x58>)
   1dc70:	69d1      	ldr	r1, [r2, #28]
   1dc72:	683a      	ldr	r2, [r7, #0]
   1dc74:	430a      	orrs	r2, r1
   1dc76:	61da      	str	r2, [r3, #28]
			break;
   1dc78:	e008      	b.n	1dc8c <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   1dc7a:	4b07      	ldr	r3, [pc, #28]	; (1dc98 <system_apb_clock_set_mask+0x58>)
   1dc7c:	4a06      	ldr	r2, [pc, #24]	; (1dc98 <system_apb_clock_set_mask+0x58>)
   1dc7e:	6a11      	ldr	r1, [r2, #32]
   1dc80:	683a      	ldr	r2, [r7, #0]
   1dc82:	430a      	orrs	r2, r1
   1dc84:	621a      	str	r2, [r3, #32]
			break;
   1dc86:	e001      	b.n	1dc8c <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   1dc88:	2317      	movs	r3, #23
   1dc8a:	e000      	b.n	1dc8e <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   1dc8c:	2300      	movs	r3, #0
}
   1dc8e:	0018      	movs	r0, r3
   1dc90:	46bd      	mov	sp, r7
   1dc92:	b002      	add	sp, #8
   1dc94:	bd80      	pop	{r7, pc}
   1dc96:	46c0      	nop			; (mov r8, r8)
   1dc98:	40000400 	.word	0x40000400

0001dc9c <system_interrupt_enable>:
{
   1dc9c:	b580      	push	{r7, lr}
   1dc9e:	b082      	sub	sp, #8
   1dca0:	af00      	add	r7, sp, #0
   1dca2:	0002      	movs	r2, r0
   1dca4:	1dfb      	adds	r3, r7, #7
   1dca6:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   1dca8:	4b06      	ldr	r3, [pc, #24]	; (1dcc4 <system_interrupt_enable+0x28>)
   1dcaa:	1dfa      	adds	r2, r7, #7
   1dcac:	7812      	ldrb	r2, [r2, #0]
   1dcae:	0011      	movs	r1, r2
   1dcb0:	221f      	movs	r2, #31
   1dcb2:	400a      	ands	r2, r1
   1dcb4:	2101      	movs	r1, #1
   1dcb6:	4091      	lsls	r1, r2
   1dcb8:	000a      	movs	r2, r1
   1dcba:	601a      	str	r2, [r3, #0]
}
   1dcbc:	46c0      	nop			; (mov r8, r8)
   1dcbe:	46bd      	mov	sp, r7
   1dcc0:	b002      	add	sp, #8
   1dcc2:	bd80      	pop	{r7, pc}
   1dcc4:	e000e100 	.word	0xe000e100

0001dcc8 <system_interrupt_disable>:
{
   1dcc8:	b580      	push	{r7, lr}
   1dcca:	b082      	sub	sp, #8
   1dccc:	af00      	add	r7, sp, #0
   1dcce:	0002      	movs	r2, r0
   1dcd0:	1dfb      	adds	r3, r7, #7
   1dcd2:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   1dcd4:	4a07      	ldr	r2, [pc, #28]	; (1dcf4 <system_interrupt_disable+0x2c>)
   1dcd6:	1dfb      	adds	r3, r7, #7
   1dcd8:	781b      	ldrb	r3, [r3, #0]
   1dcda:	0019      	movs	r1, r3
   1dcdc:	231f      	movs	r3, #31
   1dcde:	400b      	ands	r3, r1
   1dce0:	2101      	movs	r1, #1
   1dce2:	4099      	lsls	r1, r3
   1dce4:	000b      	movs	r3, r1
   1dce6:	0019      	movs	r1, r3
   1dce8:	2380      	movs	r3, #128	; 0x80
   1dcea:	50d1      	str	r1, [r2, r3]
}
   1dcec:	46c0      	nop			; (mov r8, r8)
   1dcee:	46bd      	mov	sp, r7
   1dcf0:	b002      	add	sp, #8
   1dcf2:	bd80      	pop	{r7, pc}
   1dcf4:	e000e100 	.word	0xe000e100

0001dcf8 <rtc_count_is_syncing>:
 *
 * \retval true  if the module synchronization is ongoing
 * \retval false if the module has completed synchronization
 */
static bool rtc_count_is_syncing(struct rtc_module *const module)
{
   1dcf8:	b580      	push	{r7, lr}
   1dcfa:	b084      	sub	sp, #16
   1dcfc:	af00      	add	r7, sp, #0
   1dcfe:	6078      	str	r0, [r7, #4]
 	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   1dd00:	687b      	ldr	r3, [r7, #4]
   1dd02:	681b      	ldr	r3, [r3, #0]
   1dd04:	60fb      	str	r3, [r7, #12]

        if (rtc_module->MODE0.STATUS.reg & RTC_STATUS_SYNCBUSY) {
   1dd06:	68fb      	ldr	r3, [r7, #12]
   1dd08:	7a9b      	ldrb	r3, [r3, #10]
   1dd0a:	b2db      	uxtb	r3, r3
   1dd0c:	b25b      	sxtb	r3, r3
   1dd0e:	2b00      	cmp	r3, #0
   1dd10:	da01      	bge.n	1dd16 <rtc_count_is_syncing+0x1e>
                return true;
   1dd12:	2301      	movs	r3, #1
   1dd14:	e000      	b.n	1dd18 <rtc_count_is_syncing+0x20>
        }

        return false;
   1dd16:	2300      	movs	r3, #0
}
   1dd18:	0018      	movs	r0, r3
   1dd1a:	46bd      	mov	sp, r7
   1dd1c:	b004      	add	sp, #16
   1dd1e:	bd80      	pop	{r7, pc}

0001dd20 <rtc_count_enable>:
 * module configuration parameters cannot be altered while the module is enabled.
 *
 * \param[in,out]  module  RTC hardware module
 */
void rtc_count_enable(struct rtc_module *const module)
{
   1dd20:	b580      	push	{r7, lr}
   1dd22:	b084      	sub	sp, #16
   1dd24:	af00      	add	r7, sp, #0
   1dd26:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   1dd28:	687b      	ldr	r3, [r7, #4]
   1dd2a:	681b      	ldr	r3, [r3, #0]
   1dd2c:	60fb      	str	r3, [r7, #12]

#if RTC_COUNT_ASYNC == true
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_RTC);
   1dd2e:	2003      	movs	r0, #3
   1dd30:	4b0a      	ldr	r3, [pc, #40]	; (1dd5c <rtc_count_enable+0x3c>)
   1dd32:	4798      	blx	r3
#endif

	while (rtc_count_is_syncing(module)) {
   1dd34:	46c0      	nop			; (mov r8, r8)
   1dd36:	687b      	ldr	r3, [r7, #4]
   1dd38:	0018      	movs	r0, r3
   1dd3a:	4b09      	ldr	r3, [pc, #36]	; (1dd60 <rtc_count_enable+0x40>)
   1dd3c:	4798      	blx	r3
   1dd3e:	1e03      	subs	r3, r0, #0
   1dd40:	d1f9      	bne.n	1dd36 <rtc_count_enable+0x16>
		/* Wait for synchronization */
	}

	/* Enable RTC module. */
	rtc_module->MODE0.CTRL.reg |= RTC_MODE0_CTRL_ENABLE;
   1dd42:	68fb      	ldr	r3, [r7, #12]
   1dd44:	881b      	ldrh	r3, [r3, #0]
   1dd46:	b29b      	uxth	r3, r3
   1dd48:	2202      	movs	r2, #2
   1dd4a:	4313      	orrs	r3, r2
   1dd4c:	b29a      	uxth	r2, r3
   1dd4e:	68fb      	ldr	r3, [r7, #12]
   1dd50:	801a      	strh	r2, [r3, #0]
}
   1dd52:	46c0      	nop			; (mov r8, r8)
   1dd54:	46bd      	mov	sp, r7
   1dd56:	b004      	add	sp, #16
   1dd58:	bd80      	pop	{r7, pc}
   1dd5a:	46c0      	nop			; (mov r8, r8)
   1dd5c:	0001dc9d 	.word	0x0001dc9d
   1dd60:	0001dcf9 	.word	0x0001dcf9

0001dd64 <rtc_count_disable>:
 * Disables the RTC module.
 *
 * \param[in,out]  module  RTC hardware module
 */
void rtc_count_disable(struct rtc_module *const module)
{
   1dd64:	b580      	push	{r7, lr}
   1dd66:	b084      	sub	sp, #16
   1dd68:	af00      	add	r7, sp, #0
   1dd6a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   1dd6c:	687b      	ldr	r3, [r7, #4]
   1dd6e:	681b      	ldr	r3, [r3, #0]
   1dd70:	60fb      	str	r3, [r7, #12]

#if RTC_COUNT_ASYNC == true
	system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_RTC);
   1dd72:	2003      	movs	r0, #3
   1dd74:	4b0d      	ldr	r3, [pc, #52]	; (1ddac <rtc_count_disable+0x48>)
   1dd76:	4798      	blx	r3
#endif

	while (rtc_count_is_syncing(module)) {
   1dd78:	46c0      	nop			; (mov r8, r8)
   1dd7a:	687b      	ldr	r3, [r7, #4]
   1dd7c:	0018      	movs	r0, r3
   1dd7e:	4b0c      	ldr	r3, [pc, #48]	; (1ddb0 <rtc_count_disable+0x4c>)
   1dd80:	4798      	blx	r3
   1dd82:	1e03      	subs	r3, r0, #0
   1dd84:	d1f9      	bne.n	1dd7a <rtc_count_disable+0x16>
		/* Wait for synchronization */
	}

	/* Disbale interrupt */
	rtc_module->MODE0.INTENCLR.reg = RTC_MODE0_INTENCLR_MASK;
   1dd86:	68fb      	ldr	r3, [r7, #12]
   1dd88:	22c1      	movs	r2, #193	; 0xc1
   1dd8a:	719a      	strb	r2, [r3, #6]
	/* Clear interrupt flag */
	rtc_module->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_MASK;
   1dd8c:	68fb      	ldr	r3, [r7, #12]
   1dd8e:	22c1      	movs	r2, #193	; 0xc1
   1dd90:	721a      	strb	r2, [r3, #8]

	/* Disable RTC module. */
	rtc_module->MODE0.CTRL.reg &= ~RTC_MODE0_CTRL_ENABLE;
   1dd92:	68fb      	ldr	r3, [r7, #12]
   1dd94:	881b      	ldrh	r3, [r3, #0]
   1dd96:	b29b      	uxth	r3, r3
   1dd98:	2202      	movs	r2, #2
   1dd9a:	4393      	bics	r3, r2
   1dd9c:	b29a      	uxth	r2, r3
   1dd9e:	68fb      	ldr	r3, [r7, #12]
   1dda0:	801a      	strh	r2, [r3, #0]
}
   1dda2:	46c0      	nop			; (mov r8, r8)
   1dda4:	46bd      	mov	sp, r7
   1dda6:	b004      	add	sp, #16
   1dda8:	bd80      	pop	{r7, pc}
   1ddaa:	46c0      	nop			; (mov r8, r8)
   1ddac:	0001dcc9 	.word	0x0001dcc9
   1ddb0:	0001dcf9 	.word	0x0001dcf9

0001ddb4 <rtc_count_reset>:
 * Resets the RTC to hardware defaults.
 *
 * \param[in,out]  module  Pointer to the software instance struct
 */
void rtc_count_reset(struct rtc_module *const module)
{
   1ddb4:	b580      	push	{r7, lr}
   1ddb6:	b084      	sub	sp, #16
   1ddb8:	af00      	add	r7, sp, #0
   1ddba:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   1ddbc:	687b      	ldr	r3, [r7, #4]
   1ddbe:	681b      	ldr	r3, [r3, #0]
   1ddc0:	60fb      	str	r3, [r7, #12]

	/* Disable module before reset. */
	rtc_count_disable(module);
   1ddc2:	687b      	ldr	r3, [r7, #4]
   1ddc4:	0018      	movs	r0, r3
   1ddc6:	4b0d      	ldr	r3, [pc, #52]	; (1ddfc <rtc_count_reset+0x48>)
   1ddc8:	4798      	blx	r3

#if RTC_COUNT_ASYNC == true
	module->registered_callback = 0;
   1ddca:	687b      	ldr	r3, [r7, #4]
   1ddcc:	2200      	movs	r2, #0
   1ddce:	829a      	strh	r2, [r3, #20]
	module->enabled_callback    = 0;
   1ddd0:	687b      	ldr	r3, [r7, #4]
   1ddd2:	2200      	movs	r2, #0
   1ddd4:	82da      	strh	r2, [r3, #22]
#endif

	while (rtc_count_is_syncing(module)) {
   1ddd6:	46c0      	nop			; (mov r8, r8)
   1ddd8:	687b      	ldr	r3, [r7, #4]
   1ddda:	0018      	movs	r0, r3
   1dddc:	4b08      	ldr	r3, [pc, #32]	; (1de00 <rtc_count_reset+0x4c>)
   1ddde:	4798      	blx	r3
   1dde0:	1e03      	subs	r3, r0, #0
   1dde2:	d1f9      	bne.n	1ddd8 <rtc_count_reset+0x24>
		/* Wait for synchronization */
	}

	/* Initiate software reset. */
	rtc_module->MODE0.CTRL.reg |= RTC_MODE0_CTRL_SWRST;
   1dde4:	68fb      	ldr	r3, [r7, #12]
   1dde6:	881b      	ldrh	r3, [r3, #0]
   1dde8:	b29b      	uxth	r3, r3
   1ddea:	2201      	movs	r2, #1
   1ddec:	4313      	orrs	r3, r2
   1ddee:	b29a      	uxth	r2, r3
   1ddf0:	68fb      	ldr	r3, [r7, #12]
   1ddf2:	801a      	strh	r2, [r3, #0]
}
   1ddf4:	46c0      	nop			; (mov r8, r8)
   1ddf6:	46bd      	mov	sp, r7
   1ddf8:	b004      	add	sp, #16
   1ddfa:	bd80      	pop	{r7, pc}
   1ddfc:	0001dd65 	.word	0x0001dd65
   1de00:	0001dcf9 	.word	0x0001dcf9

0001de04 <_rtc_count_set_config>:
 * \retval STATUS_ERR_INVALID_ARG  If invalid argument(s) were given.
 */
static enum status_code _rtc_count_set_config(
		struct rtc_module *const module,
		const struct rtc_count_config *const config)
{
   1de04:	b580      	push	{r7, lr}
   1de06:	b084      	sub	sp, #16
   1de08:	af00      	add	r7, sp, #0
   1de0a:	6078      	str	r0, [r7, #4]
   1de0c:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   1de0e:	687b      	ldr	r3, [r7, #4]
   1de10:	681b      	ldr	r3, [r3, #0]
   1de12:	60bb      	str	r3, [r7, #8]

	rtc_module->MODE0.CTRL.reg = RTC_MODE0_CTRL_MODE(0) | config->prescaler;
   1de14:	683b      	ldr	r3, [r7, #0]
   1de16:	881a      	ldrh	r2, [r3, #0]
   1de18:	68bb      	ldr	r3, [r7, #8]
   1de1a:	801a      	strh	r2, [r3, #0]

	/* Set mode and clear on match if applicable. */
	switch (config->mode) {
   1de1c:	683b      	ldr	r3, [r7, #0]
   1de1e:	789b      	ldrb	r3, [r3, #2]
   1de20:	2b00      	cmp	r3, #0
   1de22:	d03a      	beq.n	1de9a <_rtc_count_set_config+0x96>
   1de24:	2b01      	cmp	r3, #1
   1de26:	d000      	beq.n	1de2a <_rtc_count_set_config+0x26>
   1de28:	e06c      	b.n	1df04 <_rtc_count_set_config+0x100>
		case RTC_COUNT_MODE_32BIT:
			/* Set 32bit mode and clear on match if applicable. */
			rtc_module->MODE0.CTRL.reg |= RTC_MODE0_CTRL_MODE(0);
   1de2a:	68bb      	ldr	r3, [r7, #8]
   1de2c:	881b      	ldrh	r3, [r3, #0]
   1de2e:	b29a      	uxth	r2, r3
   1de30:	68bb      	ldr	r3, [r7, #8]
   1de32:	801a      	strh	r2, [r3, #0]

			/* Check if clear on compare match should be set. */
			if (config->clear_on_match) {
   1de34:	683b      	ldr	r3, [r7, #0]
   1de36:	78db      	ldrb	r3, [r3, #3]
   1de38:	2b00      	cmp	r3, #0
   1de3a:	d007      	beq.n	1de4c <_rtc_count_set_config+0x48>
				/* Set clear on match. */
				rtc_module->MODE0.CTRL.reg |= RTC_MODE0_CTRL_MATCHCLR;
   1de3c:	68bb      	ldr	r3, [r7, #8]
   1de3e:	881b      	ldrh	r3, [r3, #0]
   1de40:	b29b      	uxth	r3, r3
   1de42:	2280      	movs	r2, #128	; 0x80
   1de44:	4313      	orrs	r3, r2
   1de46:	b29a      	uxth	r2, r3
   1de48:	68bb      	ldr	r3, [r7, #8]
   1de4a:	801a      	strh	r2, [r3, #0]
			}
			/* Set compare values. */
			for (uint8_t i = 0; i < RTC_NUM_OF_COMP32; i++) {
   1de4c:	230f      	movs	r3, #15
   1de4e:	18fb      	adds	r3, r7, r3
   1de50:	2200      	movs	r2, #0
   1de52:	701a      	strb	r2, [r3, #0]
   1de54:	e01b      	b.n	1de8e <_rtc_count_set_config+0x8a>
				while (rtc_count_is_syncing(module)) {
   1de56:	46c0      	nop			; (mov r8, r8)
   1de58:	687b      	ldr	r3, [r7, #4]
   1de5a:	0018      	movs	r0, r3
   1de5c:	4b37      	ldr	r3, [pc, #220]	; (1df3c <_rtc_count_set_config+0x138>)
   1de5e:	4798      	blx	r3
   1de60:	1e03      	subs	r3, r0, #0
   1de62:	d1f9      	bne.n	1de58 <_rtc_count_set_config+0x54>
					/* Wait for synchronization */
				}

				rtc_count_set_compare(module, config->compare_values[i],
   1de64:	230f      	movs	r3, #15
   1de66:	18fb      	adds	r3, r7, r3
   1de68:	781a      	ldrb	r2, [r3, #0]
   1de6a:	683b      	ldr	r3, [r7, #0]
   1de6c:	3202      	adds	r2, #2
   1de6e:	0092      	lsls	r2, r2, #2
   1de70:	58d1      	ldr	r1, [r2, r3]
   1de72:	230f      	movs	r3, #15
   1de74:	18fb      	adds	r3, r7, r3
   1de76:	781a      	ldrb	r2, [r3, #0]
   1de78:	687b      	ldr	r3, [r7, #4]
   1de7a:	0018      	movs	r0, r3
   1de7c:	4b30      	ldr	r3, [pc, #192]	; (1df40 <_rtc_count_set_config+0x13c>)
   1de7e:	4798      	blx	r3
			for (uint8_t i = 0; i < RTC_NUM_OF_COMP32; i++) {
   1de80:	230f      	movs	r3, #15
   1de82:	18fb      	adds	r3, r7, r3
   1de84:	781a      	ldrb	r2, [r3, #0]
   1de86:	230f      	movs	r3, #15
   1de88:	18fb      	adds	r3, r7, r3
   1de8a:	3201      	adds	r2, #1
   1de8c:	701a      	strb	r2, [r3, #0]
   1de8e:	230f      	movs	r3, #15
   1de90:	18fb      	adds	r3, r7, r3
   1de92:	781b      	ldrb	r3, [r3, #0]
   1de94:	2b00      	cmp	r3, #0
   1de96:	d0de      	beq.n	1de56 <_rtc_count_set_config+0x52>
						(enum rtc_count_compare)i);
			}
			break;
   1de98:	e036      	b.n	1df08 <_rtc_count_set_config+0x104>

		case RTC_COUNT_MODE_16BIT:
			/* Set 16bit mode. */
			rtc_module->MODE1.CTRL.reg |= RTC_MODE1_CTRL_MODE(1);
   1de9a:	68bb      	ldr	r3, [r7, #8]
   1de9c:	881b      	ldrh	r3, [r3, #0]
   1de9e:	b29b      	uxth	r3, r3
   1dea0:	2204      	movs	r2, #4
   1dea2:	4313      	orrs	r3, r2
   1dea4:	b29a      	uxth	r2, r3
   1dea6:	68bb      	ldr	r3, [r7, #8]
   1dea8:	801a      	strh	r2, [r3, #0]

			/* Check if match on clear is set, and return invalid
			 * argument if set. */
			if (config->clear_on_match) {
   1deaa:	683b      	ldr	r3, [r7, #0]
   1deac:	78db      	ldrb	r3, [r3, #3]
   1deae:	2b00      	cmp	r3, #0
   1deb0:	d001      	beq.n	1deb6 <_rtc_count_set_config+0xb2>
				Assert(false);
				return STATUS_ERR_INVALID_ARG;
   1deb2:	2317      	movs	r3, #23
   1deb4:	e03e      	b.n	1df34 <_rtc_count_set_config+0x130>
			}
			/* Set compare values. */
			for (uint8_t i = 0; i < RTC_NUM_OF_COMP16; i++) {
   1deb6:	230e      	movs	r3, #14
   1deb8:	18fb      	adds	r3, r7, r3
   1deba:	2200      	movs	r2, #0
   1debc:	701a      	strb	r2, [r3, #0]
   1debe:	e01b      	b.n	1def8 <_rtc_count_set_config+0xf4>
				while (rtc_count_is_syncing(module)) {
   1dec0:	46c0      	nop			; (mov r8, r8)
   1dec2:	687b      	ldr	r3, [r7, #4]
   1dec4:	0018      	movs	r0, r3
   1dec6:	4b1d      	ldr	r3, [pc, #116]	; (1df3c <_rtc_count_set_config+0x138>)
   1dec8:	4798      	blx	r3
   1deca:	1e03      	subs	r3, r0, #0
   1decc:	d1f9      	bne.n	1dec2 <_rtc_count_set_config+0xbe>
					/* Wait for synchronization */
				}

				rtc_count_set_compare(module, config->compare_values[i],
   1dece:	230e      	movs	r3, #14
   1ded0:	18fb      	adds	r3, r7, r3
   1ded2:	781a      	ldrb	r2, [r3, #0]
   1ded4:	683b      	ldr	r3, [r7, #0]
   1ded6:	3202      	adds	r2, #2
   1ded8:	0092      	lsls	r2, r2, #2
   1deda:	58d1      	ldr	r1, [r2, r3]
   1dedc:	230e      	movs	r3, #14
   1dede:	18fb      	adds	r3, r7, r3
   1dee0:	781a      	ldrb	r2, [r3, #0]
   1dee2:	687b      	ldr	r3, [r7, #4]
   1dee4:	0018      	movs	r0, r3
   1dee6:	4b16      	ldr	r3, [pc, #88]	; (1df40 <_rtc_count_set_config+0x13c>)
   1dee8:	4798      	blx	r3
			for (uint8_t i = 0; i < RTC_NUM_OF_COMP16; i++) {
   1deea:	230e      	movs	r3, #14
   1deec:	18fb      	adds	r3, r7, r3
   1deee:	781a      	ldrb	r2, [r3, #0]
   1def0:	230e      	movs	r3, #14
   1def2:	18fb      	adds	r3, r7, r3
   1def4:	3201      	adds	r2, #1
   1def6:	701a      	strb	r2, [r3, #0]
   1def8:	230e      	movs	r3, #14
   1defa:	18fb      	adds	r3, r7, r3
   1defc:	781b      	ldrb	r3, [r3, #0]
   1defe:	2b01      	cmp	r3, #1
   1df00:	d9de      	bls.n	1dec0 <_rtc_count_set_config+0xbc>
						(enum rtc_count_compare)i);
			}
			break;
   1df02:	e001      	b.n	1df08 <_rtc_count_set_config+0x104>
		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
   1df04:	2317      	movs	r3, #23
   1df06:	e015      	b.n	1df34 <_rtc_count_set_config+0x130>
	}

	/* Check to set continuously clock read update mode. */
	if (config->continuously_update) {
   1df08:	683b      	ldr	r3, [r7, #0]
   1df0a:	791b      	ldrb	r3, [r3, #4]
   1df0c:	2b00      	cmp	r3, #0
   1df0e:	d010      	beq.n	1df32 <_rtc_count_set_config+0x12e>
		/* Set continuously mode. */
		rtc_module->MODE0.READREQ.reg |= RTC_READREQ_RCONT;
   1df10:	68bb      	ldr	r3, [r7, #8]
   1df12:	885b      	ldrh	r3, [r3, #2]
   1df14:	b29b      	uxth	r3, r3
   1df16:	2280      	movs	r2, #128	; 0x80
   1df18:	01d2      	lsls	r2, r2, #7
   1df1a:	4313      	orrs	r3, r2
   1df1c:	b29a      	uxth	r2, r3
   1df1e:	68bb      	ldr	r3, [r7, #8]
   1df20:	805a      	strh	r2, [r3, #2]
		rtc_module->MODE0.READREQ.reg |= RTC_READREQ_RREQ;
   1df22:	68bb      	ldr	r3, [r7, #8]
   1df24:	885b      	ldrh	r3, [r3, #2]
   1df26:	b29b      	uxth	r3, r3
   1df28:	4a06      	ldr	r2, [pc, #24]	; (1df44 <_rtc_count_set_config+0x140>)
   1df2a:	4313      	orrs	r3, r2
   1df2c:	b29a      	uxth	r2, r3
   1df2e:	68bb      	ldr	r3, [r7, #8]
   1df30:	805a      	strh	r2, [r3, #2]
	}

	/* Return status OK if everything was configured. */
	return STATUS_OK;
   1df32:	2300      	movs	r3, #0
}
   1df34:	0018      	movs	r0, r3
   1df36:	46bd      	mov	sp, r7
   1df38:	b004      	add	sp, #16
   1df3a:	bd80      	pop	{r7, pc}
   1df3c:	0001dcf9 	.word	0x0001dcf9
   1df40:	0001dfd9 	.word	0x0001dfd9
   1df44:	ffff8000 	.word	0xffff8000

0001df48 <rtc_count_init>:
 */
enum status_code rtc_count_init(
		struct rtc_module *const module,
		Rtc *const hw,
		const struct rtc_count_config *const config)
{
   1df48:	b580      	push	{r7, lr}
   1df4a:	b086      	sub	sp, #24
   1df4c:	af00      	add	r7, sp, #0
   1df4e:	60f8      	str	r0, [r7, #12]
   1df50:	60b9      	str	r1, [r7, #8]
   1df52:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
   1df54:	68fb      	ldr	r3, [r7, #12]
   1df56:	68ba      	ldr	r2, [r7, #8]
   1df58:	601a      	str	r2, [r3, #0]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_RTC);
   1df5a:	2120      	movs	r1, #32
   1df5c:	2000      	movs	r0, #0
   1df5e:	4b17      	ldr	r3, [pc, #92]	; (1dfbc <rtc_count_init+0x74>)
   1df60:	4798      	blx	r3

	/* Set up GCLK */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   1df62:	2314      	movs	r3, #20
   1df64:	18fb      	adds	r3, r7, r3
   1df66:	0018      	movs	r0, r3
   1df68:	4b15      	ldr	r3, [pc, #84]	; (1dfc0 <rtc_count_init+0x78>)
   1df6a:	4798      	blx	r3
	gclk_chan_conf.source_generator = GCLK_GENERATOR_2;
   1df6c:	2314      	movs	r3, #20
   1df6e:	18fb      	adds	r3, r7, r3
   1df70:	2202      	movs	r2, #2
   1df72:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(RTC_GCLK_ID, &gclk_chan_conf);
   1df74:	2314      	movs	r3, #20
   1df76:	18fb      	adds	r3, r7, r3
   1df78:	0019      	movs	r1, r3
   1df7a:	2004      	movs	r0, #4
   1df7c:	4b11      	ldr	r3, [pc, #68]	; (1dfc4 <rtc_count_init+0x7c>)
   1df7e:	4798      	blx	r3
	system_gclk_chan_enable(RTC_GCLK_ID);
   1df80:	2004      	movs	r0, #4
   1df82:	4b11      	ldr	r3, [pc, #68]	; (1dfc8 <rtc_count_init+0x80>)
   1df84:	4798      	blx	r3

	/* Reset module to hardware defaults. */
	rtc_count_reset(module);
   1df86:	68fb      	ldr	r3, [r7, #12]
   1df88:	0018      	movs	r0, r3
   1df8a:	4b10      	ldr	r3, [pc, #64]	; (1dfcc <rtc_count_init+0x84>)
   1df8c:	4798      	blx	r3

	/* Save conf_struct internally for continued use. */
	module->mode                = config->mode;
   1df8e:	687b      	ldr	r3, [r7, #4]
   1df90:	789a      	ldrb	r2, [r3, #2]
   1df92:	68fb      	ldr	r3, [r7, #12]
   1df94:	711a      	strb	r2, [r3, #4]
	module->continuously_update = config->continuously_update;
   1df96:	687b      	ldr	r3, [r7, #4]
   1df98:	791a      	ldrb	r2, [r3, #4]
   1df9a:	68fb      	ldr	r3, [r7, #12]
   1df9c:	715a      	strb	r2, [r3, #5]

#  if (RTC_INST_NUM == 1)
	_rtc_instance[0] = module;
   1df9e:	4b0c      	ldr	r3, [pc, #48]	; (1dfd0 <rtc_count_init+0x88>)
   1dfa0:	68fa      	ldr	r2, [r7, #12]
   1dfa2:	601a      	str	r2, [r3, #0]
	/* Register this instance for callbacks*/
	_rtc_instance[_rtc_get_inst_index(hw)] = module;
#  endif

	/* Set config and return status. */
	return _rtc_count_set_config(module, config);
   1dfa4:	687a      	ldr	r2, [r7, #4]
   1dfa6:	68fb      	ldr	r3, [r7, #12]
   1dfa8:	0011      	movs	r1, r2
   1dfaa:	0018      	movs	r0, r3
   1dfac:	4b09      	ldr	r3, [pc, #36]	; (1dfd4 <rtc_count_init+0x8c>)
   1dfae:	4798      	blx	r3
   1dfb0:	0003      	movs	r3, r0
}
   1dfb2:	0018      	movs	r0, r3
   1dfb4:	46bd      	mov	sp, r7
   1dfb6:	b006      	add	sp, #24
   1dfb8:	bd80      	pop	{r7, pc}
   1dfba:	46c0      	nop			; (mov r8, r8)
   1dfbc:	0001dc41 	.word	0x0001dc41
   1dfc0:	0001dc29 	.word	0x0001dc29
   1dfc4:	000245a5 	.word	0x000245a5
   1dfc8:	000245e9 	.word	0x000245e9
   1dfcc:	0001ddb5 	.word	0x0001ddb5
   1dfd0:	20000920 	.word	0x20000920
   1dfd4:	0001de05 	.word	0x0001de05

0001dfd8 <rtc_count_set_compare>:
 */
enum status_code rtc_count_set_compare(
		struct rtc_module *const module,
		const uint32_t comp_value,
		const enum rtc_count_compare comp_index)
{
   1dfd8:	b580      	push	{r7, lr}
   1dfda:	b086      	sub	sp, #24
   1dfdc:	af00      	add	r7, sp, #0
   1dfde:	60f8      	str	r0, [r7, #12]
   1dfe0:	60b9      	str	r1, [r7, #8]
   1dfe2:	1dfb      	adds	r3, r7, #7
   1dfe4:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   1dfe6:	68fb      	ldr	r3, [r7, #12]
   1dfe8:	681b      	ldr	r3, [r3, #0]
   1dfea:	617b      	str	r3, [r7, #20]

	while (rtc_count_is_syncing(module)) {
   1dfec:	46c0      	nop			; (mov r8, r8)
   1dfee:	68fb      	ldr	r3, [r7, #12]
   1dff0:	0018      	movs	r0, r3
   1dff2:	4b1a      	ldr	r3, [pc, #104]	; (1e05c <rtc_count_set_compare+0x84>)
   1dff4:	4798      	blx	r3
   1dff6:	1e03      	subs	r3, r0, #0
   1dff8:	d1f9      	bne.n	1dfee <rtc_count_set_compare+0x16>
		/* Wait for synchronization */
	}

	/* Set compare values based on operation mode. */
	switch (module->mode) {
   1dffa:	68fb      	ldr	r3, [r7, #12]
   1dffc:	791b      	ldrb	r3, [r3, #4]
   1dffe:	2b00      	cmp	r3, #0
   1e000:	d00f      	beq.n	1e022 <rtc_count_set_compare+0x4a>
   1e002:	2b01      	cmp	r3, #1
   1e004:	d122      	bne.n	1e04c <rtc_count_set_compare+0x74>
		case RTC_COUNT_MODE_32BIT:
			/* Check sanity of comp_index. */
			if ((uint32_t)comp_index > RTC_NUM_OF_COMP32) {
   1e006:	1dfb      	adds	r3, r7, #7
   1e008:	781b      	ldrb	r3, [r3, #0]
   1e00a:	2b01      	cmp	r3, #1
   1e00c:	d901      	bls.n	1e012 <rtc_count_set_compare+0x3a>
				return STATUS_ERR_INVALID_ARG;
   1e00e:	2317      	movs	r3, #23
   1e010:	e01f      	b.n	1e052 <rtc_count_set_compare+0x7a>
			}

			/* Set compare value for COMP. */
			rtc_module->MODE0.COMP[comp_index].reg = comp_value;
   1e012:	1dfb      	adds	r3, r7, #7
   1e014:	781a      	ldrb	r2, [r3, #0]
   1e016:	697b      	ldr	r3, [r7, #20]
   1e018:	3206      	adds	r2, #6
   1e01a:	0092      	lsls	r2, r2, #2
   1e01c:	68b9      	ldr	r1, [r7, #8]
   1e01e:	50d1      	str	r1, [r2, r3]

			break;
   1e020:	e016      	b.n	1e050 <rtc_count_set_compare+0x78>

		case RTC_COUNT_MODE_16BIT:
			/* Check sanity of comp_index. */
			if ((uint32_t)comp_index > RTC_NUM_OF_COMP16) {
   1e022:	1dfb      	adds	r3, r7, #7
   1e024:	781b      	ldrb	r3, [r3, #0]
   1e026:	2b02      	cmp	r3, #2
   1e028:	d901      	bls.n	1e02e <rtc_count_set_compare+0x56>
				return STATUS_ERR_INVALID_ARG;
   1e02a:	2317      	movs	r3, #23
   1e02c:	e011      	b.n	1e052 <rtc_count_set_compare+0x7a>
			}

			/* Check that 16-bit value is provided. */
			if (comp_value > 0xffff) {
   1e02e:	68bb      	ldr	r3, [r7, #8]
   1e030:	4a0b      	ldr	r2, [pc, #44]	; (1e060 <rtc_count_set_compare+0x88>)
   1e032:	4293      	cmp	r3, r2
   1e034:	d901      	bls.n	1e03a <rtc_count_set_compare+0x62>
				Assert(false);
				return STATUS_ERR_INVALID_ARG;
   1e036:	2317      	movs	r3, #23
   1e038:	e00b      	b.n	1e052 <rtc_count_set_compare+0x7a>
			}

			/* Set compare value for COMP. */
			rtc_module->MODE1.COMP[comp_index].reg = comp_value & 0xffff;
   1e03a:	1dfb      	adds	r3, r7, #7
   1e03c:	781a      	ldrb	r2, [r3, #0]
   1e03e:	68bb      	ldr	r3, [r7, #8]
   1e040:	b299      	uxth	r1, r3
   1e042:	697b      	ldr	r3, [r7, #20]
   1e044:	320c      	adds	r2, #12
   1e046:	0052      	lsls	r2, r2, #1
   1e048:	52d1      	strh	r1, [r2, r3]

			break;
   1e04a:	e001      	b.n	1e050 <rtc_count_set_compare+0x78>

		default:
			Assert(false);
			return STATUS_ERR_BAD_FORMAT;
   1e04c:	231a      	movs	r3, #26
   1e04e:	e000      	b.n	1e052 <rtc_count_set_compare+0x7a>
	}

	/* Return status if everything is OK. */
	return STATUS_OK;
   1e050:	2300      	movs	r3, #0
}
   1e052:	0018      	movs	r0, r3
   1e054:	46bd      	mov	sp, r7
   1e056:	b006      	add	sp, #24
   1e058:	bd80      	pop	{r7, pc}
   1e05a:	46c0      	nop			; (mov r8, r8)
   1e05c:	0001dcf9 	.word	0x0001dcf9
   1e060:	0000ffff 	.word	0x0000ffff

0001e064 <rtc_count_set_period>:
 * \retval STATUS_ERR_UNSUPPORTED_DEV  If module is not operated in 16-bit mode
 */
enum status_code rtc_count_set_period(
		struct rtc_module *const module,
		const uint16_t period_value)
{
   1e064:	b580      	push	{r7, lr}
   1e066:	b084      	sub	sp, #16
   1e068:	af00      	add	r7, sp, #0
   1e06a:	6078      	str	r0, [r7, #4]
   1e06c:	000a      	movs	r2, r1
   1e06e:	1cbb      	adds	r3, r7, #2
   1e070:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   1e072:	687b      	ldr	r3, [r7, #4]
   1e074:	681b      	ldr	r3, [r3, #0]
   1e076:	60fb      	str	r3, [r7, #12]

	/* Check that correct mode is set. */
	if (module->mode != RTC_COUNT_MODE_16BIT) {
   1e078:	687b      	ldr	r3, [r7, #4]
   1e07a:	791b      	ldrb	r3, [r3, #4]
   1e07c:	2b00      	cmp	r3, #0
   1e07e:	d001      	beq.n	1e084 <rtc_count_set_period+0x20>
		return STATUS_ERR_UNSUPPORTED_DEV;
   1e080:	2315      	movs	r3, #21
   1e082:	e00b      	b.n	1e09c <rtc_count_set_period+0x38>
	}

	while (rtc_count_is_syncing(module)) {
   1e084:	46c0      	nop			; (mov r8, r8)
   1e086:	687b      	ldr	r3, [r7, #4]
   1e088:	0018      	movs	r0, r3
   1e08a:	4b06      	ldr	r3, [pc, #24]	; (1e0a4 <rtc_count_set_period+0x40>)
   1e08c:	4798      	blx	r3
   1e08e:	1e03      	subs	r3, r0, #0
   1e090:	d1f9      	bne.n	1e086 <rtc_count_set_period+0x22>
		/* Wait for synchronization */
	}

	/* Write value to register. */
	rtc_module->MODE1.PER.reg = period_value;
   1e092:	68fb      	ldr	r3, [r7, #12]
   1e094:	1cba      	adds	r2, r7, #2
   1e096:	8812      	ldrh	r2, [r2, #0]
   1e098:	829a      	strh	r2, [r3, #20]

	return STATUS_OK;
   1e09a:	2300      	movs	r3, #0
}
   1e09c:	0018      	movs	r0, r3
   1e09e:	46bd      	mov	sp, r7
   1e0a0:	b004      	add	sp, #16
   1e0a2:	bd80      	pop	{r7, pc}
   1e0a4:	0001dcf9 	.word	0x0001dcf9

0001e0a8 <_rtc_interrupt_handler>:
 * \internal Interrupt handler for RTC
 *
 * \param [in] instance_index  Default value 0
 */
static void _rtc_interrupt_handler(const uint32_t instance_index)
{
   1e0a8:	b580      	push	{r7, lr}
   1e0aa:	b086      	sub	sp, #24
   1e0ac:	af00      	add	r7, sp, #0
   1e0ae:	6078      	str	r0, [r7, #4]
	struct rtc_module *module = _rtc_instance[instance_index];
   1e0b0:	4b31      	ldr	r3, [pc, #196]	; (1e178 <_rtc_interrupt_handler+0xd0>)
   1e0b2:	687a      	ldr	r2, [r7, #4]
   1e0b4:	0092      	lsls	r2, r2, #2
   1e0b6:	58d3      	ldr	r3, [r2, r3]
   1e0b8:	617b      	str	r3, [r7, #20]

	Rtc *const rtc_module = module->hw;
   1e0ba:	697b      	ldr	r3, [r7, #20]
   1e0bc:	681b      	ldr	r3, [r3, #0]
   1e0be:	613b      	str	r3, [r7, #16]

	/* Combine callback registered and enabled masks */
	uint16_t callback_mask = module->enabled_callback;
   1e0c0:	230e      	movs	r3, #14
   1e0c2:	18fb      	adds	r3, r7, r3
   1e0c4:	697a      	ldr	r2, [r7, #20]
   1e0c6:	8ad2      	ldrh	r2, [r2, #22]
   1e0c8:	801a      	strh	r2, [r3, #0]
	callback_mask &= module->registered_callback;
   1e0ca:	697b      	ldr	r3, [r7, #20]
   1e0cc:	8a9b      	ldrh	r3, [r3, #20]
   1e0ce:	b29a      	uxth	r2, r3
   1e0d0:	230e      	movs	r3, #14
   1e0d2:	18fb      	adds	r3, r7, r3
   1e0d4:	210e      	movs	r1, #14
   1e0d6:	1879      	adds	r1, r7, r1
   1e0d8:	8809      	ldrh	r1, [r1, #0]
   1e0da:	400a      	ands	r2, r1
   1e0dc:	801a      	strh	r2, [r3, #0]

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = rtc_module->MODE0.INTFLAG.reg;
   1e0de:	693b      	ldr	r3, [r7, #16]
   1e0e0:	7a1b      	ldrb	r3, [r3, #8]
   1e0e2:	b2da      	uxtb	r2, r3
   1e0e4:	230c      	movs	r3, #12
   1e0e6:	18fb      	adds	r3, r7, r3
   1e0e8:	801a      	strh	r2, [r3, #0]
	interrupt_status &= rtc_module->MODE0.INTENSET.reg;
   1e0ea:	693b      	ldr	r3, [r7, #16]
   1e0ec:	79db      	ldrb	r3, [r3, #7]
   1e0ee:	b2db      	uxtb	r3, r3
   1e0f0:	b29a      	uxth	r2, r3
   1e0f2:	230c      	movs	r3, #12
   1e0f4:	18fb      	adds	r3, r7, r3
   1e0f6:	210c      	movs	r1, #12
   1e0f8:	1879      	adds	r1, r7, r1
   1e0fa:	8809      	ldrh	r1, [r1, #0]
   1e0fc:	400a      	ands	r2, r1
   1e0fe:	801a      	strh	r2, [r3, #0]

	if (interrupt_status & RTC_MODE0_INTFLAG_OVF) {
   1e100:	230c      	movs	r3, #12
   1e102:	18fb      	adds	r3, r7, r3
   1e104:	881b      	ldrh	r3, [r3, #0]
   1e106:	2280      	movs	r2, #128	; 0x80
   1e108:	4013      	ands	r3, r2
   1e10a:	d00c      	beq.n	1e126 <_rtc_interrupt_handler+0x7e>
		/* Overflow interrupt */
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_OVERFLOW)) {
   1e10c:	230e      	movs	r3, #14
   1e10e:	18fb      	adds	r3, r7, r3
   1e110:	881b      	ldrh	r3, [r3, #0]
   1e112:	2204      	movs	r2, #4
   1e114:	4013      	ands	r3, r2
   1e116:	d002      	beq.n	1e11e <_rtc_interrupt_handler+0x76>
			module->callbacks[RTC_COUNT_CALLBACK_OVERFLOW]();
   1e118:	697b      	ldr	r3, [r7, #20]
   1e11a:	691b      	ldr	r3, [r3, #16]
   1e11c:	4798      	blx	r3
		}

		/* Clear interrupt flag */
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_OVF;
   1e11e:	693b      	ldr	r3, [r7, #16]
   1e120:	2280      	movs	r2, #128	; 0x80
   1e122:	721a      	strb	r2, [r3, #8]
		}
		/* Clear interrupt flag */
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_CMP(1 << 5);
		#endif
	}
}
   1e124:	e024      	b.n	1e170 <_rtc_interrupt_handler+0xc8>
	} else if (interrupt_status & RTC_MODE1_INTFLAG_CMP(1 << 0)) {
   1e126:	230c      	movs	r3, #12
   1e128:	18fb      	adds	r3, r7, r3
   1e12a:	881b      	ldrh	r3, [r3, #0]
   1e12c:	2201      	movs	r2, #1
   1e12e:	4013      	ands	r3, r2
   1e130:	d00c      	beq.n	1e14c <_rtc_interrupt_handler+0xa4>
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_COMPARE_0)) {
   1e132:	230e      	movs	r3, #14
   1e134:	18fb      	adds	r3, r7, r3
   1e136:	881b      	ldrh	r3, [r3, #0]
   1e138:	2201      	movs	r2, #1
   1e13a:	4013      	ands	r3, r2
   1e13c:	d002      	beq.n	1e144 <_rtc_interrupt_handler+0x9c>
			module->callbacks[RTC_COUNT_CALLBACK_COMPARE_0]();
   1e13e:	697b      	ldr	r3, [r7, #20]
   1e140:	689b      	ldr	r3, [r3, #8]
   1e142:	4798      	blx	r3
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_CMP(1 << 0);
   1e144:	693b      	ldr	r3, [r7, #16]
   1e146:	2201      	movs	r2, #1
   1e148:	721a      	strb	r2, [r3, #8]
}
   1e14a:	e011      	b.n	1e170 <_rtc_interrupt_handler+0xc8>
	} else if (interrupt_status & RTC_MODE1_INTFLAG_CMP(1 << 1)) {
   1e14c:	230c      	movs	r3, #12
   1e14e:	18fb      	adds	r3, r7, r3
   1e150:	881b      	ldrh	r3, [r3, #0]
   1e152:	2202      	movs	r2, #2
   1e154:	4013      	ands	r3, r2
   1e156:	d00b      	beq.n	1e170 <_rtc_interrupt_handler+0xc8>
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_COMPARE_1)) {
   1e158:	230e      	movs	r3, #14
   1e15a:	18fb      	adds	r3, r7, r3
   1e15c:	881b      	ldrh	r3, [r3, #0]
   1e15e:	2202      	movs	r2, #2
   1e160:	4013      	ands	r3, r2
   1e162:	d002      	beq.n	1e16a <_rtc_interrupt_handler+0xc2>
			module->callbacks[RTC_COUNT_CALLBACK_COMPARE_1]();
   1e164:	697b      	ldr	r3, [r7, #20]
   1e166:	68db      	ldr	r3, [r3, #12]
   1e168:	4798      	blx	r3
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_CMP(1 << 1);
   1e16a:	693b      	ldr	r3, [r7, #16]
   1e16c:	2202      	movs	r2, #2
   1e16e:	721a      	strb	r2, [r3, #8]
}
   1e170:	46c0      	nop			; (mov r8, r8)
   1e172:	46bd      	mov	sp, r7
   1e174:	b006      	add	sp, #24
   1e176:	bd80      	pop	{r7, pc}
   1e178:	20000920 	.word	0x20000920

0001e17c <RTC_Handler>:
/**
 * \internal ISR handler for RTC
 */
#if (RTC_INST_NUM == 1)
void RTC_Handler(void)
{
   1e17c:	b580      	push	{r7, lr}
   1e17e:	af00      	add	r7, sp, #0
	_rtc_interrupt_handler(0);
   1e180:	2000      	movs	r0, #0
   1e182:	4b02      	ldr	r3, [pc, #8]	; (1e18c <RTC_Handler+0x10>)
   1e184:	4798      	blx	r3
}
   1e186:	46c0      	nop			; (mov r8, r8)
   1e188:	46bd      	mov	sp, r7
   1e18a:	bd80      	pop	{r7, pc}
   1e18c:	0001e0a9 	.word	0x0001e0a9

0001e190 <system_gclk_chan_get_config_defaults>:
{
   1e190:	b580      	push	{r7, lr}
   1e192:	b082      	sub	sp, #8
   1e194:	af00      	add	r7, sp, #0
   1e196:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   1e198:	687b      	ldr	r3, [r7, #4]
   1e19a:	2200      	movs	r2, #0
   1e19c:	701a      	strb	r2, [r3, #0]
}
   1e19e:	46c0      	nop			; (mov r8, r8)
   1e1a0:	46bd      	mov	sp, r7
   1e1a2:	b002      	add	sp, #8
   1e1a4:	bd80      	pop	{r7, pc}

0001e1a6 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
   1e1a6:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e1a8:	b08d      	sub	sp, #52	; 0x34
   1e1aa:	af00      	add	r7, sp, #0
   1e1ac:	60b8      	str	r0, [r7, #8]
   1e1ae:	60f9      	str	r1, [r7, #12]
   1e1b0:	603a      	str	r2, [r7, #0]
   1e1b2:	607b      	str	r3, [r7, #4]
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
   1e1b4:	2300      	movs	r3, #0
   1e1b6:	2400      	movs	r4, #0
   1e1b8:	623b      	str	r3, [r7, #32]
   1e1ba:	627c      	str	r4, [r7, #36]	; 0x24
   1e1bc:	2300      	movs	r3, #0
   1e1be:	2400      	movs	r4, #0
   1e1c0:	61bb      	str	r3, [r7, #24]
   1e1c2:	61fc      	str	r4, [r7, #28]
	for (i = 63; i >= 0; i--) {
   1e1c4:	233f      	movs	r3, #63	; 0x3f
   1e1c6:	62fb      	str	r3, [r7, #44]	; 0x2c
   1e1c8:	e053      	b.n	1e272 <long_division+0xcc>
		bit_shift = (uint64_t)1 << i;
   1e1ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1e1cc:	3b20      	subs	r3, #32
   1e1ce:	2b00      	cmp	r3, #0
   1e1d0:	db04      	blt.n	1e1dc <long_division+0x36>
   1e1d2:	2201      	movs	r2, #1
   1e1d4:	409a      	lsls	r2, r3
   1e1d6:	0013      	movs	r3, r2
   1e1d8:	617b      	str	r3, [r7, #20]
   1e1da:	e00b      	b.n	1e1f4 <long_division+0x4e>
   1e1dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1e1de:	2220      	movs	r2, #32
   1e1e0:	1ad3      	subs	r3, r2, r3
   1e1e2:	2201      	movs	r2, #1
   1e1e4:	40da      	lsrs	r2, r3
   1e1e6:	0013      	movs	r3, r2
   1e1e8:	2100      	movs	r1, #0
   1e1ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   1e1ec:	4091      	lsls	r1, r2
   1e1ee:	000a      	movs	r2, r1
   1e1f0:	4313      	orrs	r3, r2
   1e1f2:	617b      	str	r3, [r7, #20]
   1e1f4:	2201      	movs	r2, #1
   1e1f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1e1f8:	409a      	lsls	r2, r3
   1e1fa:	0013      	movs	r3, r2
   1e1fc:	613b      	str	r3, [r7, #16]

		r = r << 1;
   1e1fe:	69bb      	ldr	r3, [r7, #24]
   1e200:	69fc      	ldr	r4, [r7, #28]
   1e202:	18db      	adds	r3, r3, r3
   1e204:	4164      	adcs	r4, r4
   1e206:	61bb      	str	r3, [r7, #24]
   1e208:	61fc      	str	r4, [r7, #28]

		if (n & bit_shift) {
   1e20a:	68bb      	ldr	r3, [r7, #8]
   1e20c:	693a      	ldr	r2, [r7, #16]
   1e20e:	401a      	ands	r2, r3
   1e210:	0015      	movs	r5, r2
   1e212:	68fb      	ldr	r3, [r7, #12]
   1e214:	697a      	ldr	r2, [r7, #20]
   1e216:	401a      	ands	r2, r3
   1e218:	0016      	movs	r6, r2
   1e21a:	002b      	movs	r3, r5
   1e21c:	4333      	orrs	r3, r6
   1e21e:	d007      	beq.n	1e230 <long_division+0x8a>
			r |= 0x01;
   1e220:	69bb      	ldr	r3, [r7, #24]
   1e222:	2201      	movs	r2, #1
   1e224:	4313      	orrs	r3, r2
   1e226:	61bb      	str	r3, [r7, #24]
   1e228:	69fb      	ldr	r3, [r7, #28]
   1e22a:	2200      	movs	r2, #0
   1e22c:	4313      	orrs	r3, r2
   1e22e:	61fb      	str	r3, [r7, #28]
		}

		if (r >= d) {
   1e230:	687a      	ldr	r2, [r7, #4]
   1e232:	69fb      	ldr	r3, [r7, #28]
   1e234:	429a      	cmp	r2, r3
   1e236:	d819      	bhi.n	1e26c <long_division+0xc6>
   1e238:	687a      	ldr	r2, [r7, #4]
   1e23a:	69fb      	ldr	r3, [r7, #28]
   1e23c:	429a      	cmp	r2, r3
   1e23e:	d103      	bne.n	1e248 <long_division+0xa2>
   1e240:	683a      	ldr	r2, [r7, #0]
   1e242:	69bb      	ldr	r3, [r7, #24]
   1e244:	429a      	cmp	r2, r3
   1e246:	d811      	bhi.n	1e26c <long_division+0xc6>
			r = r - d;
   1e248:	69b9      	ldr	r1, [r7, #24]
   1e24a:	69fa      	ldr	r2, [r7, #28]
   1e24c:	683b      	ldr	r3, [r7, #0]
   1e24e:	687c      	ldr	r4, [r7, #4]
   1e250:	1ac9      	subs	r1, r1, r3
   1e252:	41a2      	sbcs	r2, r4
   1e254:	000b      	movs	r3, r1
   1e256:	0014      	movs	r4, r2
   1e258:	61bb      	str	r3, [r7, #24]
   1e25a:	61fc      	str	r4, [r7, #28]
			q |= bit_shift;
   1e25c:	6a3a      	ldr	r2, [r7, #32]
   1e25e:	693b      	ldr	r3, [r7, #16]
   1e260:	4313      	orrs	r3, r2
   1e262:	623b      	str	r3, [r7, #32]
   1e264:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1e266:	697b      	ldr	r3, [r7, #20]
   1e268:	4313      	orrs	r3, r2
   1e26a:	627b      	str	r3, [r7, #36]	; 0x24
	for (i = 63; i >= 0; i--) {
   1e26c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1e26e:	3b01      	subs	r3, #1
   1e270:	62fb      	str	r3, [r7, #44]	; 0x2c
   1e272:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1e274:	2b00      	cmp	r3, #0
   1e276:	daa8      	bge.n	1e1ca <long_division+0x24>
		}
	}

	return q;
   1e278:	6a3b      	ldr	r3, [r7, #32]
   1e27a:	6a7c      	ldr	r4, [r7, #36]	; 0x24
}
   1e27c:	0018      	movs	r0, r3
   1e27e:	0021      	movs	r1, r4
   1e280:	46bd      	mov	sp, r7
   1e282:	b00d      	add	sp, #52	; 0x34
   1e284:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001e286 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
   1e286:	b580      	push	{r7, lr}
   1e288:	b086      	sub	sp, #24
   1e28a:	af00      	add	r7, sp, #0
   1e28c:	60f8      	str	r0, [r7, #12]
   1e28e:	60b9      	str	r1, [r7, #8]
   1e290:	607a      	str	r2, [r7, #4]
	/* Baud value variable */
	uint16_t baud_calculated = 0;
   1e292:	2316      	movs	r3, #22
   1e294:	18fb      	adds	r3, r7, r3
   1e296:	2200      	movs	r2, #0
   1e298:	801a      	strh	r2, [r3, #0]
	uint32_t clock_value = external_clock;
   1e29a:	68bb      	ldr	r3, [r7, #8]
   1e29c:	613b      	str	r3, [r7, #16]


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
   1e29e:	68bb      	ldr	r3, [r7, #8]
   1e2a0:	085a      	lsrs	r2, r3, #1
   1e2a2:	68fb      	ldr	r3, [r7, #12]
   1e2a4:	429a      	cmp	r2, r3
   1e2a6:	d201      	bcs.n	1e2ac <_sercom_get_sync_baud_val+0x26>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   1e2a8:	2340      	movs	r3, #64	; 0x40
   1e2aa:	e026      	b.n	1e2fa <_sercom_get_sync_baud_val+0x74>
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
   1e2ac:	68bb      	ldr	r3, [r7, #8]
   1e2ae:	085b      	lsrs	r3, r3, #1
   1e2b0:	613b      	str	r3, [r7, #16]
	while (clock_value >= baudrate) {
   1e2b2:	e00a      	b.n	1e2ca <_sercom_get_sync_baud_val+0x44>
		clock_value = clock_value - baudrate;
   1e2b4:	693a      	ldr	r2, [r7, #16]
   1e2b6:	68fb      	ldr	r3, [r7, #12]
   1e2b8:	1ad3      	subs	r3, r2, r3
   1e2ba:	613b      	str	r3, [r7, #16]
		baud_calculated++;
   1e2bc:	2316      	movs	r3, #22
   1e2be:	18fb      	adds	r3, r7, r3
   1e2c0:	881a      	ldrh	r2, [r3, #0]
   1e2c2:	2316      	movs	r3, #22
   1e2c4:	18fb      	adds	r3, r7, r3
   1e2c6:	3201      	adds	r2, #1
   1e2c8:	801a      	strh	r2, [r3, #0]
	while (clock_value >= baudrate) {
   1e2ca:	693a      	ldr	r2, [r7, #16]
   1e2cc:	68fb      	ldr	r3, [r7, #12]
   1e2ce:	429a      	cmp	r2, r3
   1e2d0:	d2f0      	bcs.n	1e2b4 <_sercom_get_sync_baud_val+0x2e>
	}
	baud_calculated = baud_calculated - 1;
   1e2d2:	2316      	movs	r3, #22
   1e2d4:	18fb      	adds	r3, r7, r3
   1e2d6:	2216      	movs	r2, #22
   1e2d8:	18ba      	adds	r2, r7, r2
   1e2da:	8812      	ldrh	r2, [r2, #0]
   1e2dc:	3a01      	subs	r2, #1
   1e2de:	801a      	strh	r2, [r3, #0]

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
   1e2e0:	2316      	movs	r3, #22
   1e2e2:	18fb      	adds	r3, r7, r3
   1e2e4:	881b      	ldrh	r3, [r3, #0]
   1e2e6:	2bff      	cmp	r3, #255	; 0xff
   1e2e8:	d901      	bls.n	1e2ee <_sercom_get_sync_baud_val+0x68>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   1e2ea:	2340      	movs	r3, #64	; 0x40
   1e2ec:	e005      	b.n	1e2fa <_sercom_get_sync_baud_val+0x74>
	} else {
		*baudvalue = baud_calculated;
   1e2ee:	687b      	ldr	r3, [r7, #4]
   1e2f0:	2216      	movs	r2, #22
   1e2f2:	18ba      	adds	r2, r7, r2
   1e2f4:	8812      	ldrh	r2, [r2, #0]
   1e2f6:	801a      	strh	r2, [r3, #0]
		return STATUS_OK;
   1e2f8:	2300      	movs	r3, #0
	}
}
   1e2fa:	0018      	movs	r0, r3
   1e2fc:	46bd      	mov	sp, r7
   1e2fe:	b006      	add	sp, #24
   1e300:	bd80      	pop	{r7, pc}
	...

0001e304 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
   1e304:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e306:	b0a1      	sub	sp, #132	; 0x84
   1e308:	af00      	add	r7, sp, #0
   1e30a:	64f8      	str	r0, [r7, #76]	; 0x4c
   1e30c:	64b9      	str	r1, [r7, #72]	; 0x48
   1e30e:	647a      	str	r2, [r7, #68]	; 0x44
   1e310:	2243      	movs	r2, #67	; 0x43
   1e312:	18ba      	adds	r2, r7, r2
   1e314:	7013      	strb	r3, [r2, #0]
	/* Temporary variables  */
	uint64_t ratio = 0;
   1e316:	2300      	movs	r3, #0
   1e318:	2400      	movs	r4, #0
   1e31a:	673b      	str	r3, [r7, #112]	; 0x70
   1e31c:	677c      	str	r4, [r7, #116]	; 0x74
	uint64_t scale = 0;
   1e31e:	2300      	movs	r3, #0
   1e320:	2400      	movs	r4, #0
   1e322:	66bb      	str	r3, [r7, #104]	; 0x68
   1e324:	66fc      	str	r4, [r7, #108]	; 0x6c
	uint64_t baud_calculated = 0;
   1e326:	2300      	movs	r3, #0
   1e328:	2400      	movs	r4, #0
   1e32a:	67bb      	str	r3, [r7, #120]	; 0x78
   1e32c:	67fc      	str	r4, [r7, #124]	; 0x7c
	uint8_t baud_fp;
	uint32_t baud_int = 0;
   1e32e:	2300      	movs	r3, #0
   1e330:	667b      	str	r3, [r7, #100]	; 0x64
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
   1e332:	2358      	movs	r3, #88	; 0x58
   1e334:	2240      	movs	r2, #64	; 0x40
   1e336:	4694      	mov	ip, r2
   1e338:	44bc      	add	ip, r7
   1e33a:	4463      	add	r3, ip
   1e33c:	781a      	ldrb	r2, [r3, #0]
   1e33e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1e340:	435a      	muls	r2, r3
   1e342:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1e344:	429a      	cmp	r2, r3
   1e346:	d901      	bls.n	1e34c <_sercom_get_async_baud_val+0x48>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   1e348:	2340      	movs	r3, #64	; 0x40
   1e34a:	e0b3      	b.n	1e4b4 <_sercom_get_async_baud_val+0x1b0>
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
   1e34c:	2343      	movs	r3, #67	; 0x43
   1e34e:	18fb      	adds	r3, r7, r3
   1e350:	781b      	ldrb	r3, [r3, #0]
   1e352:	2b00      	cmp	r3, #0
   1e354:	d13d      	bne.n	1e3d2 <_sercom_get_async_baud_val+0xce>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
   1e356:	2358      	movs	r3, #88	; 0x58
   1e358:	2240      	movs	r2, #64	; 0x40
   1e35a:	4694      	mov	ip, r2
   1e35c:	44bc      	add	ip, r7
   1e35e:	4463      	add	r3, ip
   1e360:	781b      	ldrb	r3, [r3, #0]
   1e362:	b2db      	uxtb	r3, r3
   1e364:	613b      	str	r3, [r7, #16]
   1e366:	2300      	movs	r3, #0
   1e368:	617b      	str	r3, [r7, #20]
   1e36a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1e36c:	60bb      	str	r3, [r7, #8]
   1e36e:	2300      	movs	r3, #0
   1e370:	60fb      	str	r3, [r7, #12]
   1e372:	4c52      	ldr	r4, [pc, #328]	; (1e4bc <_sercom_get_async_baud_val+0x1b8>)
   1e374:	68ba      	ldr	r2, [r7, #8]
   1e376:	68fb      	ldr	r3, [r7, #12]
   1e378:	6938      	ldr	r0, [r7, #16]
   1e37a:	6979      	ldr	r1, [r7, #20]
   1e37c:	47a0      	blx	r4
   1e37e:	0003      	movs	r3, r0
   1e380:	000c      	movs	r4, r1
   1e382:	001b      	movs	r3, r3
   1e384:	65fb      	str	r3, [r7, #92]	; 0x5c
   1e386:	2300      	movs	r3, #0
   1e388:	65bb      	str	r3, [r7, #88]	; 0x58
		ratio = long_division(temp1, peripheral_clock);
   1e38a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1e38c:	603b      	str	r3, [r7, #0]
   1e38e:	2300      	movs	r3, #0
   1e390:	607b      	str	r3, [r7, #4]
   1e392:	6db8      	ldr	r0, [r7, #88]	; 0x58
   1e394:	6df9      	ldr	r1, [r7, #92]	; 0x5c
   1e396:	683a      	ldr	r2, [r7, #0]
   1e398:	687b      	ldr	r3, [r7, #4]
   1e39a:	4c49      	ldr	r4, [pc, #292]	; (1e4c0 <_sercom_get_async_baud_val+0x1bc>)
   1e39c:	47a0      	blx	r4
   1e39e:	0003      	movs	r3, r0
   1e3a0:	000c      	movs	r4, r1
   1e3a2:	673b      	str	r3, [r7, #112]	; 0x70
   1e3a4:	677c      	str	r4, [r7, #116]	; 0x74
		scale = ((uint64_t)1 << SHIFT) - ratio;
   1e3a6:	2100      	movs	r1, #0
   1e3a8:	2201      	movs	r2, #1
   1e3aa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   1e3ac:	6f7c      	ldr	r4, [r7, #116]	; 0x74
   1e3ae:	1ac9      	subs	r1, r1, r3
   1e3b0:	41a2      	sbcs	r2, r4
   1e3b2:	000b      	movs	r3, r1
   1e3b4:	0014      	movs	r4, r2
   1e3b6:	66bb      	str	r3, [r7, #104]	; 0x68
   1e3b8:	66fc      	str	r4, [r7, #108]	; 0x6c
		baud_calculated = (65536 * scale) >> SHIFT;
   1e3ba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   1e3bc:	0c1b      	lsrs	r3, r3, #16
   1e3be:	6efa      	ldr	r2, [r7, #108]	; 0x6c
   1e3c0:	0416      	lsls	r6, r2, #16
   1e3c2:	431e      	orrs	r6, r3
   1e3c4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   1e3c6:	041d      	lsls	r5, r3, #16
   1e3c8:	0033      	movs	r3, r6
   1e3ca:	67bb      	str	r3, [r7, #120]	; 0x78
   1e3cc:	2300      	movs	r3, #0
   1e3ce:	67fb      	str	r3, [r7, #124]	; 0x7c
   1e3d0:	e06a      	b.n	1e4a8 <_sercom_get_async_baud_val+0x1a4>
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
   1e3d2:	2343      	movs	r3, #67	; 0x43
   1e3d4:	18fb      	adds	r3, r7, r3
   1e3d6:	781b      	ldrb	r3, [r3, #0]
   1e3d8:	2b01      	cmp	r3, #1
   1e3da:	d165      	bne.n	1e4a8 <_sercom_get_async_baud_val+0x1a4>
		temp1 = ((uint64_t)baudrate * sample_num);
   1e3dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1e3de:	633b      	str	r3, [r7, #48]	; 0x30
   1e3e0:	2300      	movs	r3, #0
   1e3e2:	637b      	str	r3, [r7, #52]	; 0x34
   1e3e4:	2358      	movs	r3, #88	; 0x58
   1e3e6:	2240      	movs	r2, #64	; 0x40
   1e3e8:	4694      	mov	ip, r2
   1e3ea:	44bc      	add	ip, r7
   1e3ec:	4463      	add	r3, ip
   1e3ee:	781b      	ldrb	r3, [r3, #0]
   1e3f0:	b2db      	uxtb	r3, r3
   1e3f2:	62bb      	str	r3, [r7, #40]	; 0x28
   1e3f4:	2300      	movs	r3, #0
   1e3f6:	62fb      	str	r3, [r7, #44]	; 0x2c
   1e3f8:	4c30      	ldr	r4, [pc, #192]	; (1e4bc <_sercom_get_async_baud_val+0x1b8>)
   1e3fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1e3fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1e3fe:	6b38      	ldr	r0, [r7, #48]	; 0x30
   1e400:	6b79      	ldr	r1, [r7, #52]	; 0x34
   1e402:	47a0      	blx	r4
   1e404:	0003      	movs	r3, r0
   1e406:	000c      	movs	r4, r1
   1e408:	65bb      	str	r3, [r7, #88]	; 0x58
   1e40a:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_int = long_division( peripheral_clock, temp1);
   1e40c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1e40e:	623b      	str	r3, [r7, #32]
   1e410:	2300      	movs	r3, #0
   1e412:	627b      	str	r3, [r7, #36]	; 0x24
   1e414:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   1e416:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
   1e418:	001a      	movs	r2, r3
   1e41a:	0023      	movs	r3, r4
   1e41c:	6a38      	ldr	r0, [r7, #32]
   1e41e:	6a79      	ldr	r1, [r7, #36]	; 0x24
   1e420:	4c27      	ldr	r4, [pc, #156]	; (1e4c0 <_sercom_get_async_baud_val+0x1bc>)
   1e422:	47a0      	blx	r4
   1e424:	0003      	movs	r3, r0
   1e426:	000c      	movs	r4, r1
   1e428:	667b      	str	r3, [r7, #100]	; 0x64
		if(baud_int > BAUD_INT_MAX) {
   1e42a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
   1e42c:	2380      	movs	r3, #128	; 0x80
   1e42e:	019b      	lsls	r3, r3, #6
   1e430:	429a      	cmp	r2, r3
   1e432:	d901      	bls.n	1e438 <_sercom_get_async_baud_val+0x134>
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   1e434:	2340      	movs	r3, #64	; 0x40
   1e436:	e03d      	b.n	1e4b4 <_sercom_get_async_baud_val+0x1b0>
		}
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
   1e438:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1e43a:	61bb      	str	r3, [r7, #24]
   1e43c:	2300      	movs	r3, #0
   1e43e:	61fb      	str	r3, [r7, #28]
   1e440:	69b9      	ldr	r1, [r7, #24]
   1e442:	69fa      	ldr	r2, [r7, #28]
   1e444:	000b      	movs	r3, r1
   1e446:	0f5b      	lsrs	r3, r3, #29
   1e448:	0010      	movs	r0, r2
   1e44a:	00c0      	lsls	r0, r0, #3
   1e44c:	63f8      	str	r0, [r7, #60]	; 0x3c
   1e44e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   1e450:	4318      	orrs	r0, r3
   1e452:	63f8      	str	r0, [r7, #60]	; 0x3c
   1e454:	000b      	movs	r3, r1
   1e456:	00db      	lsls	r3, r3, #3
   1e458:	63bb      	str	r3, [r7, #56]	; 0x38
   1e45a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   1e45c:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
   1e45e:	001a      	movs	r2, r3
   1e460:	0023      	movs	r3, r4
   1e462:	6bb8      	ldr	r0, [r7, #56]	; 0x38
   1e464:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   1e466:	4c16      	ldr	r4, [pc, #88]	; (1e4c0 <_sercom_get_async_baud_val+0x1bc>)
   1e468:	47a0      	blx	r4
   1e46a:	0003      	movs	r3, r0
   1e46c:	000c      	movs	r4, r1
   1e46e:	65bb      	str	r3, [r7, #88]	; 0x58
   1e470:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_fp = temp1 - 8 * baud_int;
   1e472:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   1e474:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
   1e476:	b2d9      	uxtb	r1, r3
   1e478:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   1e47a:	b2db      	uxtb	r3, r3
   1e47c:	00db      	lsls	r3, r3, #3
   1e47e:	b2da      	uxtb	r2, r3
   1e480:	2317      	movs	r3, #23
   1e482:	2040      	movs	r0, #64	; 0x40
   1e484:	4684      	mov	ip, r0
   1e486:	44bc      	add	ip, r7
   1e488:	4463      	add	r3, ip
   1e48a:	1a8a      	subs	r2, r1, r2
   1e48c:	701a      	strb	r2, [r3, #0]
		baud_calculated = baud_int | (baud_fp << 13);
   1e48e:	2317      	movs	r3, #23
   1e490:	2240      	movs	r2, #64	; 0x40
   1e492:	4694      	mov	ip, r2
   1e494:	44bc      	add	ip, r7
   1e496:	4463      	add	r3, ip
   1e498:	781b      	ldrb	r3, [r3, #0]
   1e49a:	035b      	lsls	r3, r3, #13
   1e49c:	001a      	movs	r2, r3
   1e49e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   1e4a0:	4313      	orrs	r3, r2
   1e4a2:	67bb      	str	r3, [r7, #120]	; 0x78
   1e4a4:	2300      	movs	r3, #0
   1e4a6:	67fb      	str	r3, [r7, #124]	; 0x7c
	}

	*baudval = baud_calculated;
   1e4a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   1e4aa:	6ffc      	ldr	r4, [r7, #124]	; 0x7c
   1e4ac:	b29a      	uxth	r2, r3
   1e4ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1e4b0:	801a      	strh	r2, [r3, #0]
	return STATUS_OK;
   1e4b2:	2300      	movs	r3, #0
}
   1e4b4:	0018      	movs	r0, r3
   1e4b6:	46bd      	mov	sp, r7
   1e4b8:	b021      	add	sp, #132	; 0x84
   1e4ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1e4bc:	0002648d 	.word	0x0002648d
   1e4c0:	0001e1a7 	.word	0x0001e1a7

0001e4c4 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
   1e4c4:	b580      	push	{r7, lr}
   1e4c6:	b084      	sub	sp, #16
   1e4c8:	af00      	add	r7, sp, #0
   1e4ca:	0002      	movs	r2, r0
   1e4cc:	1dfb      	adds	r3, r7, #7
   1e4ce:	701a      	strb	r2, [r3, #0]
   1e4d0:	1dbb      	adds	r3, r7, #6
   1e4d2:	1c0a      	adds	r2, r1, #0
   1e4d4:	701a      	strb	r2, [r3, #0]
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
   1e4d6:	4b1a      	ldr	r3, [pc, #104]	; (1e540 <sercom_set_gclk_generator+0x7c>)
   1e4d8:	781b      	ldrb	r3, [r3, #0]
   1e4da:	2201      	movs	r2, #1
   1e4dc:	4053      	eors	r3, r2
   1e4de:	b2db      	uxtb	r3, r3
   1e4e0:	2b00      	cmp	r3, #0
   1e4e2:	d103      	bne.n	1e4ec <sercom_set_gclk_generator+0x28>
   1e4e4:	1dbb      	adds	r3, r7, #6
   1e4e6:	781b      	ldrb	r3, [r3, #0]
   1e4e8:	2b00      	cmp	r3, #0
   1e4ea:	d01b      	beq.n	1e524 <sercom_set_gclk_generator+0x60>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   1e4ec:	230c      	movs	r3, #12
   1e4ee:	18fb      	adds	r3, r7, r3
   1e4f0:	0018      	movs	r0, r3
   1e4f2:	4b14      	ldr	r3, [pc, #80]	; (1e544 <sercom_set_gclk_generator+0x80>)
   1e4f4:	4798      	blx	r3
		gclk_chan_conf.source_generator = generator_source;
   1e4f6:	230c      	movs	r3, #12
   1e4f8:	18fb      	adds	r3, r7, r3
   1e4fa:	1dfa      	adds	r2, r7, #7
   1e4fc:	7812      	ldrb	r2, [r2, #0]
   1e4fe:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
   1e500:	230c      	movs	r3, #12
   1e502:	18fb      	adds	r3, r7, r3
   1e504:	0019      	movs	r1, r3
   1e506:	2013      	movs	r0, #19
   1e508:	4b0f      	ldr	r3, [pc, #60]	; (1e548 <sercom_set_gclk_generator+0x84>)
   1e50a:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
   1e50c:	2013      	movs	r0, #19
   1e50e:	4b0f      	ldr	r3, [pc, #60]	; (1e54c <sercom_set_gclk_generator+0x88>)
   1e510:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
   1e512:	4b0b      	ldr	r3, [pc, #44]	; (1e540 <sercom_set_gclk_generator+0x7c>)
   1e514:	1dfa      	adds	r2, r7, #7
   1e516:	7812      	ldrb	r2, [r2, #0]
   1e518:	705a      	strb	r2, [r3, #1]
		_sercom_config.generator_is_set = true;
   1e51a:	4b09      	ldr	r3, [pc, #36]	; (1e540 <sercom_set_gclk_generator+0x7c>)
   1e51c:	2201      	movs	r2, #1
   1e51e:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
   1e520:	2300      	movs	r3, #0
   1e522:	e008      	b.n	1e536 <sercom_set_gclk_generator+0x72>
	} else if (generator_source == _sercom_config.generator_source) {
   1e524:	4b06      	ldr	r3, [pc, #24]	; (1e540 <sercom_set_gclk_generator+0x7c>)
   1e526:	785b      	ldrb	r3, [r3, #1]
   1e528:	1dfa      	adds	r2, r7, #7
   1e52a:	7812      	ldrb	r2, [r2, #0]
   1e52c:	429a      	cmp	r2, r3
   1e52e:	d101      	bne.n	1e534 <sercom_set_gclk_generator+0x70>
		/* Return status OK if same config */
		return STATUS_OK;
   1e530:	2300      	movs	r3, #0
   1e532:	e000      	b.n	1e536 <sercom_set_gclk_generator+0x72>
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
   1e534:	231d      	movs	r3, #29
}
   1e536:	0018      	movs	r0, r3
   1e538:	46bd      	mov	sp, r7
   1e53a:	b004      	add	sp, #16
   1e53c:	bd80      	pop	{r7, pc}
   1e53e:	46c0      	nop			; (mov r8, r8)
   1e540:	200002c4 	.word	0x200002c4
   1e544:	0001e191 	.word	0x0001e191
   1e548:	000245a5 	.word	0x000245a5
   1e54c:	000245e9 	.word	0x000245e9

0001e550 <_sercom_get_default_pad>:
 *
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
   1e550:	b580      	push	{r7, lr}
   1e552:	b082      	sub	sp, #8
   1e554:	af00      	add	r7, sp, #0
   1e556:	6078      	str	r0, [r7, #4]
   1e558:	000a      	movs	r2, r1
   1e55a:	1cfb      	adds	r3, r7, #3
   1e55c:	701a      	strb	r2, [r3, #0]
	switch ((uintptr_t)sercom_module) {
   1e55e:	687b      	ldr	r3, [r7, #4]
   1e560:	4a4d      	ldr	r2, [pc, #308]	; (1e698 <_sercom_get_default_pad+0x148>)
   1e562:	4293      	cmp	r3, r2
   1e564:	d03f      	beq.n	1e5e6 <_sercom_get_default_pad+0x96>
   1e566:	4a4c      	ldr	r2, [pc, #304]	; (1e698 <_sercom_get_default_pad+0x148>)
   1e568:	4293      	cmp	r3, r2
   1e56a:	d806      	bhi.n	1e57a <_sercom_get_default_pad+0x2a>
   1e56c:	4a4b      	ldr	r2, [pc, #300]	; (1e69c <_sercom_get_default_pad+0x14c>)
   1e56e:	4293      	cmp	r3, r2
   1e570:	d00f      	beq.n	1e592 <_sercom_get_default_pad+0x42>
   1e572:	4a4b      	ldr	r2, [pc, #300]	; (1e6a0 <_sercom_get_default_pad+0x150>)
   1e574:	4293      	cmp	r3, r2
   1e576:	d021      	beq.n	1e5bc <_sercom_get_default_pad+0x6c>
   1e578:	e089      	b.n	1e68e <_sercom_get_default_pad+0x13e>
   1e57a:	4a4a      	ldr	r2, [pc, #296]	; (1e6a4 <_sercom_get_default_pad+0x154>)
   1e57c:	4293      	cmp	r3, r2
   1e57e:	d100      	bne.n	1e582 <_sercom_get_default_pad+0x32>
   1e580:	e05b      	b.n	1e63a <_sercom_get_default_pad+0xea>
   1e582:	4a49      	ldr	r2, [pc, #292]	; (1e6a8 <_sercom_get_default_pad+0x158>)
   1e584:	4293      	cmp	r3, r2
   1e586:	d100      	bne.n	1e58a <_sercom_get_default_pad+0x3a>
   1e588:	e06c      	b.n	1e664 <_sercom_get_default_pad+0x114>
   1e58a:	4a48      	ldr	r2, [pc, #288]	; (1e6ac <_sercom_get_default_pad+0x15c>)
   1e58c:	4293      	cmp	r3, r2
   1e58e:	d03f      	beq.n	1e610 <_sercom_get_default_pad+0xc0>
   1e590:	e07d      	b.n	1e68e <_sercom_get_default_pad+0x13e>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
   1e592:	1cfb      	adds	r3, r7, #3
   1e594:	781b      	ldrb	r3, [r3, #0]
   1e596:	2b01      	cmp	r3, #1
   1e598:	d00a      	beq.n	1e5b0 <_sercom_get_default_pad+0x60>
   1e59a:	dc02      	bgt.n	1e5a2 <_sercom_get_default_pad+0x52>
   1e59c:	2b00      	cmp	r3, #0
   1e59e:	d005      	beq.n	1e5ac <_sercom_get_default_pad+0x5c>
   1e5a0:	e075      	b.n	1e68e <_sercom_get_default_pad+0x13e>
   1e5a2:	2b02      	cmp	r3, #2
   1e5a4:	d006      	beq.n	1e5b4 <_sercom_get_default_pad+0x64>
   1e5a6:	2b03      	cmp	r3, #3
   1e5a8:	d006      	beq.n	1e5b8 <_sercom_get_default_pad+0x68>
   1e5aa:	e070      	b.n	1e68e <_sercom_get_default_pad+0x13e>
   1e5ac:	4b40      	ldr	r3, [pc, #256]	; (1e6b0 <_sercom_get_default_pad+0x160>)
   1e5ae:	e06f      	b.n	1e690 <_sercom_get_default_pad+0x140>
   1e5b0:	4b40      	ldr	r3, [pc, #256]	; (1e6b4 <_sercom_get_default_pad+0x164>)
   1e5b2:	e06d      	b.n	1e690 <_sercom_get_default_pad+0x140>
   1e5b4:	4b40      	ldr	r3, [pc, #256]	; (1e6b8 <_sercom_get_default_pad+0x168>)
   1e5b6:	e06b      	b.n	1e690 <_sercom_get_default_pad+0x140>
   1e5b8:	4b40      	ldr	r3, [pc, #256]	; (1e6bc <_sercom_get_default_pad+0x16c>)
   1e5ba:	e069      	b.n	1e690 <_sercom_get_default_pad+0x140>
   1e5bc:	1cfb      	adds	r3, r7, #3
   1e5be:	781b      	ldrb	r3, [r3, #0]
   1e5c0:	2b01      	cmp	r3, #1
   1e5c2:	d00a      	beq.n	1e5da <_sercom_get_default_pad+0x8a>
   1e5c4:	dc02      	bgt.n	1e5cc <_sercom_get_default_pad+0x7c>
   1e5c6:	2b00      	cmp	r3, #0
   1e5c8:	d005      	beq.n	1e5d6 <_sercom_get_default_pad+0x86>
   1e5ca:	e060      	b.n	1e68e <_sercom_get_default_pad+0x13e>
   1e5cc:	2b02      	cmp	r3, #2
   1e5ce:	d006      	beq.n	1e5de <_sercom_get_default_pad+0x8e>
   1e5d0:	2b03      	cmp	r3, #3
   1e5d2:	d006      	beq.n	1e5e2 <_sercom_get_default_pad+0x92>
   1e5d4:	e05b      	b.n	1e68e <_sercom_get_default_pad+0x13e>
   1e5d6:	2303      	movs	r3, #3
   1e5d8:	e05a      	b.n	1e690 <_sercom_get_default_pad+0x140>
   1e5da:	4b39      	ldr	r3, [pc, #228]	; (1e6c0 <_sercom_get_default_pad+0x170>)
   1e5dc:	e058      	b.n	1e690 <_sercom_get_default_pad+0x140>
   1e5de:	4b39      	ldr	r3, [pc, #228]	; (1e6c4 <_sercom_get_default_pad+0x174>)
   1e5e0:	e056      	b.n	1e690 <_sercom_get_default_pad+0x140>
   1e5e2:	4b39      	ldr	r3, [pc, #228]	; (1e6c8 <_sercom_get_default_pad+0x178>)
   1e5e4:	e054      	b.n	1e690 <_sercom_get_default_pad+0x140>
   1e5e6:	1cfb      	adds	r3, r7, #3
   1e5e8:	781b      	ldrb	r3, [r3, #0]
   1e5ea:	2b01      	cmp	r3, #1
   1e5ec:	d00a      	beq.n	1e604 <_sercom_get_default_pad+0xb4>
   1e5ee:	dc02      	bgt.n	1e5f6 <_sercom_get_default_pad+0xa6>
   1e5f0:	2b00      	cmp	r3, #0
   1e5f2:	d005      	beq.n	1e600 <_sercom_get_default_pad+0xb0>
   1e5f4:	e04b      	b.n	1e68e <_sercom_get_default_pad+0x13e>
   1e5f6:	2b02      	cmp	r3, #2
   1e5f8:	d006      	beq.n	1e608 <_sercom_get_default_pad+0xb8>
   1e5fa:	2b03      	cmp	r3, #3
   1e5fc:	d006      	beq.n	1e60c <_sercom_get_default_pad+0xbc>
   1e5fe:	e046      	b.n	1e68e <_sercom_get_default_pad+0x13e>
   1e600:	4b32      	ldr	r3, [pc, #200]	; (1e6cc <_sercom_get_default_pad+0x17c>)
   1e602:	e045      	b.n	1e690 <_sercom_get_default_pad+0x140>
   1e604:	4b32      	ldr	r3, [pc, #200]	; (1e6d0 <_sercom_get_default_pad+0x180>)
   1e606:	e043      	b.n	1e690 <_sercom_get_default_pad+0x140>
   1e608:	4b32      	ldr	r3, [pc, #200]	; (1e6d4 <_sercom_get_default_pad+0x184>)
   1e60a:	e041      	b.n	1e690 <_sercom_get_default_pad+0x140>
   1e60c:	4b32      	ldr	r3, [pc, #200]	; (1e6d8 <_sercom_get_default_pad+0x188>)
   1e60e:	e03f      	b.n	1e690 <_sercom_get_default_pad+0x140>
   1e610:	1cfb      	adds	r3, r7, #3
   1e612:	781b      	ldrb	r3, [r3, #0]
   1e614:	2b01      	cmp	r3, #1
   1e616:	d00a      	beq.n	1e62e <_sercom_get_default_pad+0xde>
   1e618:	dc02      	bgt.n	1e620 <_sercom_get_default_pad+0xd0>
   1e61a:	2b00      	cmp	r3, #0
   1e61c:	d005      	beq.n	1e62a <_sercom_get_default_pad+0xda>
   1e61e:	e036      	b.n	1e68e <_sercom_get_default_pad+0x13e>
   1e620:	2b02      	cmp	r3, #2
   1e622:	d006      	beq.n	1e632 <_sercom_get_default_pad+0xe2>
   1e624:	2b03      	cmp	r3, #3
   1e626:	d006      	beq.n	1e636 <_sercom_get_default_pad+0xe6>
   1e628:	e031      	b.n	1e68e <_sercom_get_default_pad+0x13e>
   1e62a:	4b2c      	ldr	r3, [pc, #176]	; (1e6dc <_sercom_get_default_pad+0x18c>)
   1e62c:	e030      	b.n	1e690 <_sercom_get_default_pad+0x140>
   1e62e:	4b2c      	ldr	r3, [pc, #176]	; (1e6e0 <_sercom_get_default_pad+0x190>)
   1e630:	e02e      	b.n	1e690 <_sercom_get_default_pad+0x140>
   1e632:	4b2c      	ldr	r3, [pc, #176]	; (1e6e4 <_sercom_get_default_pad+0x194>)
   1e634:	e02c      	b.n	1e690 <_sercom_get_default_pad+0x140>
   1e636:	4b2c      	ldr	r3, [pc, #176]	; (1e6e8 <_sercom_get_default_pad+0x198>)
   1e638:	e02a      	b.n	1e690 <_sercom_get_default_pad+0x140>
   1e63a:	1cfb      	adds	r3, r7, #3
   1e63c:	781b      	ldrb	r3, [r3, #0]
   1e63e:	2b01      	cmp	r3, #1
   1e640:	d00a      	beq.n	1e658 <_sercom_get_default_pad+0x108>
   1e642:	dc02      	bgt.n	1e64a <_sercom_get_default_pad+0xfa>
   1e644:	2b00      	cmp	r3, #0
   1e646:	d005      	beq.n	1e654 <_sercom_get_default_pad+0x104>
   1e648:	e021      	b.n	1e68e <_sercom_get_default_pad+0x13e>
   1e64a:	2b02      	cmp	r3, #2
   1e64c:	d006      	beq.n	1e65c <_sercom_get_default_pad+0x10c>
   1e64e:	2b03      	cmp	r3, #3
   1e650:	d006      	beq.n	1e660 <_sercom_get_default_pad+0x110>
   1e652:	e01c      	b.n	1e68e <_sercom_get_default_pad+0x13e>
   1e654:	4b25      	ldr	r3, [pc, #148]	; (1e6ec <_sercom_get_default_pad+0x19c>)
   1e656:	e01b      	b.n	1e690 <_sercom_get_default_pad+0x140>
   1e658:	4b25      	ldr	r3, [pc, #148]	; (1e6f0 <_sercom_get_default_pad+0x1a0>)
   1e65a:	e019      	b.n	1e690 <_sercom_get_default_pad+0x140>
   1e65c:	4b25      	ldr	r3, [pc, #148]	; (1e6f4 <_sercom_get_default_pad+0x1a4>)
   1e65e:	e017      	b.n	1e690 <_sercom_get_default_pad+0x140>
   1e660:	4b25      	ldr	r3, [pc, #148]	; (1e6f8 <_sercom_get_default_pad+0x1a8>)
   1e662:	e015      	b.n	1e690 <_sercom_get_default_pad+0x140>
   1e664:	1cfb      	adds	r3, r7, #3
   1e666:	781b      	ldrb	r3, [r3, #0]
   1e668:	2b01      	cmp	r3, #1
   1e66a:	d00a      	beq.n	1e682 <_sercom_get_default_pad+0x132>
   1e66c:	dc02      	bgt.n	1e674 <_sercom_get_default_pad+0x124>
   1e66e:	2b00      	cmp	r3, #0
   1e670:	d005      	beq.n	1e67e <_sercom_get_default_pad+0x12e>
   1e672:	e00c      	b.n	1e68e <_sercom_get_default_pad+0x13e>
   1e674:	2b02      	cmp	r3, #2
   1e676:	d006      	beq.n	1e686 <_sercom_get_default_pad+0x136>
   1e678:	2b03      	cmp	r3, #3
   1e67a:	d006      	beq.n	1e68a <_sercom_get_default_pad+0x13a>
   1e67c:	e007      	b.n	1e68e <_sercom_get_default_pad+0x13e>
   1e67e:	4b1f      	ldr	r3, [pc, #124]	; (1e6fc <_sercom_get_default_pad+0x1ac>)
   1e680:	e006      	b.n	1e690 <_sercom_get_default_pad+0x140>
   1e682:	4b1f      	ldr	r3, [pc, #124]	; (1e700 <_sercom_get_default_pad+0x1b0>)
   1e684:	e004      	b.n	1e690 <_sercom_get_default_pad+0x140>
   1e686:	4b1f      	ldr	r3, [pc, #124]	; (1e704 <_sercom_get_default_pad+0x1b4>)
   1e688:	e002      	b.n	1e690 <_sercom_get_default_pad+0x140>
   1e68a:	4b1f      	ldr	r3, [pc, #124]	; (1e708 <_sercom_get_default_pad+0x1b8>)
   1e68c:	e000      	b.n	1e690 <_sercom_get_default_pad+0x140>
	}

	Assert(false);
	return 0;
   1e68e:	2300      	movs	r3, #0
}
   1e690:	0018      	movs	r0, r3
   1e692:	46bd      	mov	sp, r7
   1e694:	b002      	add	sp, #8
   1e696:	bd80      	pop	{r7, pc}
   1e698:	42001000 	.word	0x42001000
   1e69c:	42000800 	.word	0x42000800
   1e6a0:	42000c00 	.word	0x42000c00
   1e6a4:	42001800 	.word	0x42001800
   1e6a8:	42001c00 	.word	0x42001c00
   1e6ac:	42001400 	.word	0x42001400
   1e6b0:	00040003 	.word	0x00040003
   1e6b4:	00050003 	.word	0x00050003
   1e6b8:	00060003 	.word	0x00060003
   1e6bc:	00070003 	.word	0x00070003
   1e6c0:	00010003 	.word	0x00010003
   1e6c4:	001e0003 	.word	0x001e0003
   1e6c8:	001f0003 	.word	0x001f0003
   1e6cc:	00080003 	.word	0x00080003
   1e6d0:	00090003 	.word	0x00090003
   1e6d4:	000a0003 	.word	0x000a0003
   1e6d8:	000b0003 	.word	0x000b0003
   1e6dc:	00100003 	.word	0x00100003
   1e6e0:	00110003 	.word	0x00110003
   1e6e4:	00120003 	.word	0x00120003
   1e6e8:	00130003 	.word	0x00130003
   1e6ec:	000c0003 	.word	0x000c0003
   1e6f0:	000d0003 	.word	0x000d0003
   1e6f4:	000e0003 	.word	0x000e0003
   1e6f8:	000f0003 	.word	0x000f0003
   1e6fc:	00160003 	.word	0x00160003
   1e700:	00170003 	.word	0x00170003
   1e704:	00180003 	.word	0x00180003
   1e708:	00190003 	.word	0x00190003

0001e70c <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
   1e70c:	b590      	push	{r4, r7, lr}
   1e70e:	b08b      	sub	sp, #44	; 0x2c
   1e710:	af00      	add	r7, sp, #0
   1e712:	6078      	str	r0, [r7, #4]
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
   1e714:	230c      	movs	r3, #12
   1e716:	18fb      	adds	r3, r7, r3
   1e718:	4a0f      	ldr	r2, [pc, #60]	; (1e758 <_sercom_get_sercom_inst_index+0x4c>)
   1e71a:	ca13      	ldmia	r2!, {r0, r1, r4}
   1e71c:	c313      	stmia	r3!, {r0, r1, r4}
   1e71e:	ca13      	ldmia	r2!, {r0, r1, r4}
   1e720:	c313      	stmia	r3!, {r0, r1, r4}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   1e722:	2300      	movs	r3, #0
   1e724:	627b      	str	r3, [r7, #36]	; 0x24
   1e726:	e00e      	b.n	1e746 <_sercom_get_sercom_inst_index+0x3a>
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
   1e728:	230c      	movs	r3, #12
   1e72a:	18fb      	adds	r3, r7, r3
   1e72c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1e72e:	0092      	lsls	r2, r2, #2
   1e730:	58d3      	ldr	r3, [r2, r3]
   1e732:	001a      	movs	r2, r3
   1e734:	687b      	ldr	r3, [r7, #4]
   1e736:	429a      	cmp	r2, r3
   1e738:	d102      	bne.n	1e740 <_sercom_get_sercom_inst_index+0x34>
			return i;
   1e73a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1e73c:	b2db      	uxtb	r3, r3
   1e73e:	e006      	b.n	1e74e <_sercom_get_sercom_inst_index+0x42>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   1e740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1e742:	3301      	adds	r3, #1
   1e744:	627b      	str	r3, [r7, #36]	; 0x24
   1e746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1e748:	2b05      	cmp	r3, #5
   1e74a:	d9ed      	bls.n	1e728 <_sercom_get_sercom_inst_index+0x1c>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
   1e74c:	2300      	movs	r3, #0
}
   1e74e:	0018      	movs	r0, r3
   1e750:	46bd      	mov	sp, r7
   1e752:	b00b      	add	sp, #44	; 0x2c
   1e754:	bd90      	pop	{r4, r7, pc}
   1e756:	46c0      	nop			; (mov r8, r8)
   1e758:	0002a5e4 	.word	0x0002a5e4

0001e75c <system_cpu_clock_get_hz>:
{
   1e75c:	b580      	push	{r7, lr}
   1e75e:	af00      	add	r7, sp, #0
	return (system_gclk_gen_get_hz(GCLK_GENERATOR_0) >> PM->CPUSEL.reg);
   1e760:	2000      	movs	r0, #0
   1e762:	4b05      	ldr	r3, [pc, #20]	; (1e778 <system_cpu_clock_get_hz+0x1c>)
   1e764:	4798      	blx	r3
   1e766:	0002      	movs	r2, r0
   1e768:	4b04      	ldr	r3, [pc, #16]	; (1e77c <system_cpu_clock_get_hz+0x20>)
   1e76a:	7a1b      	ldrb	r3, [r3, #8]
   1e76c:	b2db      	uxtb	r3, r3
   1e76e:	40da      	lsrs	r2, r3
   1e770:	0013      	movs	r3, r2
}
   1e772:	0018      	movs	r0, r3
   1e774:	46bd      	mov	sp, r7
   1e776:	bd80      	pop	{r7, pc}
   1e778:	000244cd 	.word	0x000244cd
   1e77c:	40000400 	.word	0x40000400

0001e780 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
   1e780:	b580      	push	{r7, lr}
   1e782:	b084      	sub	sp, #16
   1e784:	af00      	add	r7, sp, #0
   1e786:	60f8      	str	r0, [r7, #12]
   1e788:	60b9      	str	r1, [r7, #8]
   1e78a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
   1e78c:	68fb      	ldr	r3, [r7, #12]
   1e78e:	3b04      	subs	r3, #4
   1e790:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
   1e792:	68fb      	ldr	r3, [r7, #12]
   1e794:	2280      	movs	r2, #128	; 0x80
   1e796:	0452      	lsls	r2, r2, #17
   1e798:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
   1e79a:	68fb      	ldr	r3, [r7, #12]
   1e79c:	3b04      	subs	r3, #4
   1e79e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
   1e7a0:	68ba      	ldr	r2, [r7, #8]
   1e7a2:	68fb      	ldr	r3, [r7, #12]
   1e7a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
   1e7a6:	68fb      	ldr	r3, [r7, #12]
   1e7a8:	3b04      	subs	r3, #4
   1e7aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
   1e7ac:	4a08      	ldr	r2, [pc, #32]	; (1e7d0 <pxPortInitialiseStack+0x50>)
   1e7ae:	68fb      	ldr	r3, [r7, #12]
   1e7b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
   1e7b2:	68fb      	ldr	r3, [r7, #12]
   1e7b4:	3b14      	subs	r3, #20
   1e7b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
   1e7b8:	687a      	ldr	r2, [r7, #4]
   1e7ba:	68fb      	ldr	r3, [r7, #12]
   1e7bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
   1e7be:	68fb      	ldr	r3, [r7, #12]
   1e7c0:	3b20      	subs	r3, #32
   1e7c2:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
   1e7c4:	68fb      	ldr	r3, [r7, #12]
}
   1e7c6:	0018      	movs	r0, r3
   1e7c8:	46bd      	mov	sp, r7
   1e7ca:	b004      	add	sp, #16
   1e7cc:	bd80      	pop	{r7, pc}
   1e7ce:	46c0      	nop			; (mov r8, r8)
   1e7d0:	0001e7d5 	.word	0x0001e7d5

0001e7d4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
   1e7d4:	b580      	push	{r7, lr}
   1e7d6:	b082      	sub	sp, #8
   1e7d8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
   1e7da:	2300      	movs	r3, #0
   1e7dc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
   1e7de:	4b07      	ldr	r3, [pc, #28]	; (1e7fc <prvTaskExitError+0x28>)
   1e7e0:	681b      	ldr	r3, [r3, #0]
   1e7e2:	3301      	adds	r3, #1
   1e7e4:	d001      	beq.n	1e7ea <prvTaskExitError+0x16>
   1e7e6:	b672      	cpsid	i
   1e7e8:	e7fe      	b.n	1e7e8 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
   1e7ea:	b672      	cpsid	i
	while( ulDummy == 0 )
   1e7ec:	46c0      	nop			; (mov r8, r8)
   1e7ee:	687b      	ldr	r3, [r7, #4]
   1e7f0:	2b00      	cmp	r3, #0
   1e7f2:	d0fc      	beq.n	1e7ee <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
   1e7f4:	46c0      	nop			; (mov r8, r8)
   1e7f6:	46bd      	mov	sp, r7
   1e7f8:	b002      	add	sp, #8
   1e7fa:	bd80      	pop	{r7, pc}
   1e7fc:	20000010 	.word	0x20000010

0001e800 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
   1e800:	b580      	push	{r7, lr}
   1e802:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
   1e804:	46c0      	nop			; (mov r8, r8)
   1e806:	46bd      	mov	sp, r7
   1e808:	bd80      	pop	{r7, pc}
   1e80a:	0000      	movs	r0, r0
   1e80c:	0000      	movs	r0, r0
	...

0001e810 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
   1e810:	4a0b      	ldr	r2, [pc, #44]	; (1e840 <pxCurrentTCBConst2>)
   1e812:	6813      	ldr	r3, [r2, #0]
   1e814:	6818      	ldr	r0, [r3, #0]
   1e816:	3020      	adds	r0, #32
   1e818:	f380 8809 	msr	PSP, r0
   1e81c:	2002      	movs	r0, #2
   1e81e:	f380 8814 	msr	CONTROL, r0
   1e822:	f3bf 8f6f 	isb	sy
   1e826:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
   1e828:	46ae      	mov	lr, r5
   1e82a:	bc08      	pop	{r3}
   1e82c:	bc04      	pop	{r2}
   1e82e:	b662      	cpsie	i
   1e830:	4718      	bx	r3
   1e832:	46c0      	nop			; (mov r8, r8)
   1e834:	46c0      	nop			; (mov r8, r8)
   1e836:	46c0      	nop			; (mov r8, r8)
   1e838:	46c0      	nop			; (mov r8, r8)
   1e83a:	46c0      	nop			; (mov r8, r8)
   1e83c:	46c0      	nop			; (mov r8, r8)
   1e83e:	46c0      	nop			; (mov r8, r8)

0001e840 <pxCurrentTCBConst2>:
   1e840:	200002c8 	.word	0x200002c8
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
   1e844:	46c0      	nop			; (mov r8, r8)
   1e846:	46c0      	nop			; (mov r8, r8)

0001e848 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
   1e848:	b580      	push	{r7, lr}
   1e84a:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
   1e84c:	4b0e      	ldr	r3, [pc, #56]	; (1e888 <xPortStartScheduler+0x40>)
   1e84e:	4a0e      	ldr	r2, [pc, #56]	; (1e888 <xPortStartScheduler+0x40>)
   1e850:	6812      	ldr	r2, [r2, #0]
   1e852:	21ff      	movs	r1, #255	; 0xff
   1e854:	0409      	lsls	r1, r1, #16
   1e856:	430a      	orrs	r2, r1
   1e858:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
   1e85a:	4b0b      	ldr	r3, [pc, #44]	; (1e888 <xPortStartScheduler+0x40>)
   1e85c:	4a0a      	ldr	r2, [pc, #40]	; (1e888 <xPortStartScheduler+0x40>)
   1e85e:	6812      	ldr	r2, [r2, #0]
   1e860:	21ff      	movs	r1, #255	; 0xff
   1e862:	0609      	lsls	r1, r1, #24
   1e864:	430a      	orrs	r2, r1
   1e866:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
   1e868:	4b08      	ldr	r3, [pc, #32]	; (1e88c <xPortStartScheduler+0x44>)
   1e86a:	4798      	blx	r3

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
   1e86c:	4b08      	ldr	r3, [pc, #32]	; (1e890 <xPortStartScheduler+0x48>)
   1e86e:	2200      	movs	r2, #0
   1e870:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
   1e872:	4b08      	ldr	r3, [pc, #32]	; (1e894 <xPortStartScheduler+0x4c>)
   1e874:	4798      	blx	r3
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
   1e876:	4b08      	ldr	r3, [pc, #32]	; (1e898 <xPortStartScheduler+0x50>)
   1e878:	4798      	blx	r3
	prvTaskExitError();
   1e87a:	4b08      	ldr	r3, [pc, #32]	; (1e89c <xPortStartScheduler+0x54>)
   1e87c:	4798      	blx	r3

	/* Should not get here! */
	return 0;
   1e87e:	2300      	movs	r3, #0
}
   1e880:	0018      	movs	r0, r3
   1e882:	46bd      	mov	sp, r7
   1e884:	bd80      	pop	{r7, pc}
   1e886:	46c0      	nop			; (mov r8, r8)
   1e888:	e000ed20 	.word	0xe000ed20
   1e88c:	0001e9b9 	.word	0x0001e9b9
   1e890:	20000010 	.word	0x20000010
   1e894:	0001e811 	.word	0x0001e811
   1e898:	0001ffed 	.word	0x0001ffed
   1e89c:	0001e7d5 	.word	0x0001e7d5

0001e8a0 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
   1e8a0:	b580      	push	{r7, lr}
   1e8a2:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
   1e8a4:	4b05      	ldr	r3, [pc, #20]	; (1e8bc <vPortYield+0x1c>)
   1e8a6:	2280      	movs	r2, #128	; 0x80
   1e8a8:	0552      	lsls	r2, r2, #21
   1e8aa:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
   1e8ac:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
   1e8b0:	f3bf 8f6f 	isb	sy
}
   1e8b4:	46c0      	nop			; (mov r8, r8)
   1e8b6:	46bd      	mov	sp, r7
   1e8b8:	bd80      	pop	{r7, pc}
   1e8ba:	46c0      	nop			; (mov r8, r8)
   1e8bc:	e000ed04 	.word	0xe000ed04

0001e8c0 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
   1e8c0:	b580      	push	{r7, lr}
   1e8c2:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
   1e8c4:	b672      	cpsid	i
    uxCriticalNesting++;
   1e8c6:	4b06      	ldr	r3, [pc, #24]	; (1e8e0 <vPortEnterCritical+0x20>)
   1e8c8:	681b      	ldr	r3, [r3, #0]
   1e8ca:	1c5a      	adds	r2, r3, #1
   1e8cc:	4b04      	ldr	r3, [pc, #16]	; (1e8e0 <vPortEnterCritical+0x20>)
   1e8ce:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
   1e8d0:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
   1e8d4:	f3bf 8f6f 	isb	sy
}
   1e8d8:	46c0      	nop			; (mov r8, r8)
   1e8da:	46bd      	mov	sp, r7
   1e8dc:	bd80      	pop	{r7, pc}
   1e8de:	46c0      	nop			; (mov r8, r8)
   1e8e0:	20000010 	.word	0x20000010

0001e8e4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
   1e8e4:	b580      	push	{r7, lr}
   1e8e6:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
   1e8e8:	4b09      	ldr	r3, [pc, #36]	; (1e910 <vPortExitCritical+0x2c>)
   1e8ea:	681b      	ldr	r3, [r3, #0]
   1e8ec:	2b00      	cmp	r3, #0
   1e8ee:	d101      	bne.n	1e8f4 <vPortExitCritical+0x10>
   1e8f0:	b672      	cpsid	i
   1e8f2:	e7fe      	b.n	1e8f2 <vPortExitCritical+0xe>
    uxCriticalNesting--;
   1e8f4:	4b06      	ldr	r3, [pc, #24]	; (1e910 <vPortExitCritical+0x2c>)
   1e8f6:	681b      	ldr	r3, [r3, #0]
   1e8f8:	1e5a      	subs	r2, r3, #1
   1e8fa:	4b05      	ldr	r3, [pc, #20]	; (1e910 <vPortExitCritical+0x2c>)
   1e8fc:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
   1e8fe:	4b04      	ldr	r3, [pc, #16]	; (1e910 <vPortExitCritical+0x2c>)
   1e900:	681b      	ldr	r3, [r3, #0]
   1e902:	2b00      	cmp	r3, #0
   1e904:	d100      	bne.n	1e908 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
   1e906:	b662      	cpsie	i
    }
}
   1e908:	46c0      	nop			; (mov r8, r8)
   1e90a:	46bd      	mov	sp, r7
   1e90c:	bd80      	pop	{r7, pc}
   1e90e:	46c0      	nop			; (mov r8, r8)
   1e910:	20000010 	.word	0x20000010

0001e914 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
   1e914:	f3ef 8010 	mrs	r0, PRIMASK
   1e918:	b672      	cpsid	i
   1e91a:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
   1e91c:	46c0      	nop			; (mov r8, r8)
   1e91e:	0018      	movs	r0, r3

0001e920 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
   1e920:	f380 8810 	msr	PRIMASK, r0
   1e924:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
   1e926:	46c0      	nop			; (mov r8, r8)
	...

0001e930 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
   1e930:	f3ef 8009 	mrs	r0, PSP
   1e934:	4b0e      	ldr	r3, [pc, #56]	; (1e970 <pxCurrentTCBConst>)
   1e936:	681a      	ldr	r2, [r3, #0]
   1e938:	3820      	subs	r0, #32
   1e93a:	6010      	str	r0, [r2, #0]
   1e93c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
   1e93e:	4644      	mov	r4, r8
   1e940:	464d      	mov	r5, r9
   1e942:	4656      	mov	r6, sl
   1e944:	465f      	mov	r7, fp
   1e946:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
   1e948:	b508      	push	{r3, lr}
   1e94a:	b672      	cpsid	i
   1e94c:	f001 fb4e 	bl	1ffec <vTaskSwitchContext>
   1e950:	b662      	cpsie	i
   1e952:	bc0c      	pop	{r2, r3}
   1e954:	6811      	ldr	r1, [r2, #0]
   1e956:	6808      	ldr	r0, [r1, #0]
   1e958:	3010      	adds	r0, #16
   1e95a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
   1e95c:	46a0      	mov	r8, r4
   1e95e:	46a9      	mov	r9, r5
   1e960:	46b2      	mov	sl, r6
   1e962:	46bb      	mov	fp, r7
   1e964:	f380 8809 	msr	PSP, r0
   1e968:	3820      	subs	r0, #32
   1e96a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
   1e96c:	4718      	bx	r3
   1e96e:	46c0      	nop			; (mov r8, r8)

0001e970 <pxCurrentTCBConst>:
   1e970:	200002c8 	.word	0x200002c8
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
   1e974:	46c0      	nop			; (mov r8, r8)
   1e976:	46c0      	nop			; (mov r8, r8)

0001e978 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
   1e978:	b580      	push	{r7, lr}
   1e97a:	b082      	sub	sp, #8
   1e97c:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
   1e97e:	4b0a      	ldr	r3, [pc, #40]	; (1e9a8 <SysTick_Handler+0x30>)
   1e980:	4798      	blx	r3
   1e982:	0003      	movs	r3, r0
   1e984:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
   1e986:	4b09      	ldr	r3, [pc, #36]	; (1e9ac <SysTick_Handler+0x34>)
   1e988:	4798      	blx	r3
   1e98a:	1e03      	subs	r3, r0, #0
   1e98c:	d003      	beq.n	1e996 <SysTick_Handler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
   1e98e:	4b08      	ldr	r3, [pc, #32]	; (1e9b0 <SysTick_Handler+0x38>)
   1e990:	2280      	movs	r2, #128	; 0x80
   1e992:	0552      	lsls	r2, r2, #21
   1e994:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
   1e996:	687b      	ldr	r3, [r7, #4]
   1e998:	0018      	movs	r0, r3
   1e99a:	4b06      	ldr	r3, [pc, #24]	; (1e9b4 <SysTick_Handler+0x3c>)
   1e99c:	4798      	blx	r3
}
   1e99e:	46c0      	nop			; (mov r8, r8)
   1e9a0:	46bd      	mov	sp, r7
   1e9a2:	b002      	add	sp, #8
   1e9a4:	bd80      	pop	{r7, pc}
   1e9a6:	46c0      	nop			; (mov r8, r8)
   1e9a8:	0001e915 	.word	0x0001e915
   1e9ac:	0001fe79 	.word	0x0001fe79
   1e9b0:	e000ed04 	.word	0xe000ed04
   1e9b4:	0001e921 	.word	0x0001e921

0001e9b8 <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
   1e9b8:	b5b0      	push	{r4, r5, r7, lr}
   1e9ba:	af00      	add	r7, sp, #0
	/* Stop and reset the SysTick. */
	*(portNVIC_SYSTICK_CTRL) = 0UL;
   1e9bc:	4b0a      	ldr	r3, [pc, #40]	; (1e9e8 <prvSetupTimerInterrupt+0x30>)
   1e9be:	2200      	movs	r2, #0
   1e9c0:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSTICK_CURRENT_VALUE) = 0UL;
   1e9c2:	4b0a      	ldr	r3, [pc, #40]	; (1e9ec <prvSetupTimerInterrupt+0x34>)
   1e9c4:	2200      	movs	r2, #0
   1e9c6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
   1e9c8:	4c09      	ldr	r4, [pc, #36]	; (1e9f0 <prvSetupTimerInterrupt+0x38>)
   1e9ca:	4b0a      	ldr	r3, [pc, #40]	; (1e9f4 <prvSetupTimerInterrupt+0x3c>)
   1e9cc:	4798      	blx	r3
   1e9ce:	4b0a      	ldr	r3, [pc, #40]	; (1e9f8 <prvSetupTimerInterrupt+0x40>)
   1e9d0:	22fa      	movs	r2, #250	; 0xfa
   1e9d2:	0091      	lsls	r1, r2, #2
   1e9d4:	4798      	blx	r3
   1e9d6:	0003      	movs	r3, r0
   1e9d8:	3b01      	subs	r3, #1
   1e9da:	6023      	str	r3, [r4, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
   1e9dc:	4b02      	ldr	r3, [pc, #8]	; (1e9e8 <prvSetupTimerInterrupt+0x30>)
   1e9de:	2207      	movs	r2, #7
   1e9e0:	601a      	str	r2, [r3, #0]
}
   1e9e2:	46c0      	nop			; (mov r8, r8)
   1e9e4:	46bd      	mov	sp, r7
   1e9e6:	bdb0      	pop	{r4, r5, r7, pc}
   1e9e8:	e000e010 	.word	0xe000e010
   1e9ec:	e000e018 	.word	0xe000e018
   1e9f0:	e000e014 	.word	0xe000e014
   1e9f4:	0001e75d 	.word	0x0001e75d
   1e9f8:	000260e5 	.word	0x000260e5

0001e9fc <pvPortMalloc>:
#endif

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
   1e9fc:	b580      	push	{r7, lr}
   1e9fe:	b084      	sub	sp, #16
   1ea00:	af00      	add	r7, sp, #0
   1ea02:	6078      	str	r0, [r7, #4]
void *pvReturn;

	vTaskSuspendAll();
   1ea04:	4b07      	ldr	r3, [pc, #28]	; (1ea24 <pvPortMalloc+0x28>)
   1ea06:	4798      	blx	r3
	{
		pvReturn = malloc( xWantedSize );
   1ea08:	687b      	ldr	r3, [r7, #4]
   1ea0a:	0018      	movs	r0, r3
   1ea0c:	4b06      	ldr	r3, [pc, #24]	; (1ea28 <pvPortMalloc+0x2c>)
   1ea0e:	4798      	blx	r3
   1ea10:	0003      	movs	r3, r0
   1ea12:	60fb      	str	r3, [r7, #12]
		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
   1ea14:	4b05      	ldr	r3, [pc, #20]	; (1ea2c <pvPortMalloc+0x30>)
   1ea16:	4798      	blx	r3
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
   1ea18:	68fb      	ldr	r3, [r7, #12]
}
   1ea1a:	0018      	movs	r0, r3
   1ea1c:	46bd      	mov	sp, r7
   1ea1e:	b004      	add	sp, #16
   1ea20:	bd80      	pop	{r7, pc}
   1ea22:	46c0      	nop			; (mov r8, r8)
   1ea24:	0001fcf1 	.word	0x0001fcf1
   1ea28:	00028979 	.word	0x00028979
   1ea2c:	0001fd09 	.word	0x0001fd09

0001ea30 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
   1ea30:	b580      	push	{r7, lr}
   1ea32:	b082      	sub	sp, #8
   1ea34:	af00      	add	r7, sp, #0
   1ea36:	6078      	str	r0, [r7, #4]
	if( pv )
   1ea38:	687b      	ldr	r3, [r7, #4]
   1ea3a:	2b00      	cmp	r3, #0
   1ea3c:	d007      	beq.n	1ea4e <vPortFree+0x1e>
	{
		vTaskSuspendAll();
   1ea3e:	4b06      	ldr	r3, [pc, #24]	; (1ea58 <vPortFree+0x28>)
   1ea40:	4798      	blx	r3
		{
			free( pv );
   1ea42:	687b      	ldr	r3, [r7, #4]
   1ea44:	0018      	movs	r0, r3
   1ea46:	4b05      	ldr	r3, [pc, #20]	; (1ea5c <vPortFree+0x2c>)
   1ea48:	4798      	blx	r3
			traceFREE( pv, 0 );
		}
		( void ) xTaskResumeAll();
   1ea4a:	4b05      	ldr	r3, [pc, #20]	; (1ea60 <vPortFree+0x30>)
   1ea4c:	4798      	blx	r3
	}
}
   1ea4e:	46c0      	nop			; (mov r8, r8)
   1ea50:	46bd      	mov	sp, r7
   1ea52:	b002      	add	sp, #8
   1ea54:	bd80      	pop	{r7, pc}
   1ea56:	46c0      	nop			; (mov r8, r8)
   1ea58:	0001fcf1 	.word	0x0001fcf1
   1ea5c:	0002898d 	.word	0x0002898d
   1ea60:	0001fd09 	.word	0x0001fd09

0001ea64 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
   1ea64:	b580      	push	{r7, lr}
   1ea66:	b082      	sub	sp, #8
   1ea68:	af00      	add	r7, sp, #0
   1ea6a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   1ea6c:	687b      	ldr	r3, [r7, #4]
   1ea6e:	3308      	adds	r3, #8
   1ea70:	001a      	movs	r2, r3
   1ea72:	687b      	ldr	r3, [r7, #4]
   1ea74:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
   1ea76:	687b      	ldr	r3, [r7, #4]
   1ea78:	2201      	movs	r2, #1
   1ea7a:	4252      	negs	r2, r2
   1ea7c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   1ea7e:	687b      	ldr	r3, [r7, #4]
   1ea80:	3308      	adds	r3, #8
   1ea82:	001a      	movs	r2, r3
   1ea84:	687b      	ldr	r3, [r7, #4]
   1ea86:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   1ea88:	687b      	ldr	r3, [r7, #4]
   1ea8a:	3308      	adds	r3, #8
   1ea8c:	001a      	movs	r2, r3
   1ea8e:	687b      	ldr	r3, [r7, #4]
   1ea90:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
   1ea92:	687b      	ldr	r3, [r7, #4]
   1ea94:	2200      	movs	r2, #0
   1ea96:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
   1ea98:	46c0      	nop			; (mov r8, r8)
   1ea9a:	46bd      	mov	sp, r7
   1ea9c:	b002      	add	sp, #8
   1ea9e:	bd80      	pop	{r7, pc}

0001eaa0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
   1eaa0:	b580      	push	{r7, lr}
   1eaa2:	b082      	sub	sp, #8
   1eaa4:	af00      	add	r7, sp, #0
   1eaa6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
   1eaa8:	687b      	ldr	r3, [r7, #4]
   1eaaa:	2200      	movs	r2, #0
   1eaac:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
   1eaae:	46c0      	nop			; (mov r8, r8)
   1eab0:	46bd      	mov	sp, r7
   1eab2:	b002      	add	sp, #8
   1eab4:	bd80      	pop	{r7, pc}

0001eab6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
   1eab6:	b580      	push	{r7, lr}
   1eab8:	b084      	sub	sp, #16
   1eaba:	af00      	add	r7, sp, #0
   1eabc:	6078      	str	r0, [r7, #4]
   1eabe:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
   1eac0:	687b      	ldr	r3, [r7, #4]
   1eac2:	685b      	ldr	r3, [r3, #4]
   1eac4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
   1eac6:	683b      	ldr	r3, [r7, #0]
   1eac8:	68fa      	ldr	r2, [r7, #12]
   1eaca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
   1eacc:	68fb      	ldr	r3, [r7, #12]
   1eace:	689a      	ldr	r2, [r3, #8]
   1ead0:	683b      	ldr	r3, [r7, #0]
   1ead2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
   1ead4:	68fb      	ldr	r3, [r7, #12]
   1ead6:	689b      	ldr	r3, [r3, #8]
   1ead8:	683a      	ldr	r2, [r7, #0]
   1eada:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
   1eadc:	68fb      	ldr	r3, [r7, #12]
   1eade:	683a      	ldr	r2, [r7, #0]
   1eae0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   1eae2:	683b      	ldr	r3, [r7, #0]
   1eae4:	687a      	ldr	r2, [r7, #4]
   1eae6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
   1eae8:	687b      	ldr	r3, [r7, #4]
   1eaea:	681b      	ldr	r3, [r3, #0]
   1eaec:	1c5a      	adds	r2, r3, #1
   1eaee:	687b      	ldr	r3, [r7, #4]
   1eaf0:	601a      	str	r2, [r3, #0]
}
   1eaf2:	46c0      	nop			; (mov r8, r8)
   1eaf4:	46bd      	mov	sp, r7
   1eaf6:	b004      	add	sp, #16
   1eaf8:	bd80      	pop	{r7, pc}

0001eafa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
   1eafa:	b580      	push	{r7, lr}
   1eafc:	b084      	sub	sp, #16
   1eafe:	af00      	add	r7, sp, #0
   1eb00:	6078      	str	r0, [r7, #4]
   1eb02:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
   1eb04:	683b      	ldr	r3, [r7, #0]
   1eb06:	681b      	ldr	r3, [r3, #0]
   1eb08:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
   1eb0a:	68bb      	ldr	r3, [r7, #8]
   1eb0c:	3301      	adds	r3, #1
   1eb0e:	d103      	bne.n	1eb18 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
   1eb10:	687b      	ldr	r3, [r7, #4]
   1eb12:	691b      	ldr	r3, [r3, #16]
   1eb14:	60fb      	str	r3, [r7, #12]
   1eb16:	e00c      	b.n	1eb32 <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   1eb18:	687b      	ldr	r3, [r7, #4]
   1eb1a:	3308      	adds	r3, #8
   1eb1c:	60fb      	str	r3, [r7, #12]
   1eb1e:	e002      	b.n	1eb26 <vListInsert+0x2c>
   1eb20:	68fb      	ldr	r3, [r7, #12]
   1eb22:	685b      	ldr	r3, [r3, #4]
   1eb24:	60fb      	str	r3, [r7, #12]
   1eb26:	68fb      	ldr	r3, [r7, #12]
   1eb28:	685b      	ldr	r3, [r3, #4]
   1eb2a:	681a      	ldr	r2, [r3, #0]
   1eb2c:	68bb      	ldr	r3, [r7, #8]
   1eb2e:	429a      	cmp	r2, r3
   1eb30:	d9f6      	bls.n	1eb20 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
   1eb32:	68fb      	ldr	r3, [r7, #12]
   1eb34:	685a      	ldr	r2, [r3, #4]
   1eb36:	683b      	ldr	r3, [r7, #0]
   1eb38:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
   1eb3a:	683b      	ldr	r3, [r7, #0]
   1eb3c:	685b      	ldr	r3, [r3, #4]
   1eb3e:	683a      	ldr	r2, [r7, #0]
   1eb40:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
   1eb42:	683b      	ldr	r3, [r7, #0]
   1eb44:	68fa      	ldr	r2, [r7, #12]
   1eb46:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
   1eb48:	68fb      	ldr	r3, [r7, #12]
   1eb4a:	683a      	ldr	r2, [r7, #0]
   1eb4c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   1eb4e:	683b      	ldr	r3, [r7, #0]
   1eb50:	687a      	ldr	r2, [r7, #4]
   1eb52:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
   1eb54:	687b      	ldr	r3, [r7, #4]
   1eb56:	681b      	ldr	r3, [r3, #0]
   1eb58:	1c5a      	adds	r2, r3, #1
   1eb5a:	687b      	ldr	r3, [r7, #4]
   1eb5c:	601a      	str	r2, [r3, #0]
}
   1eb5e:	46c0      	nop			; (mov r8, r8)
   1eb60:	46bd      	mov	sp, r7
   1eb62:	b004      	add	sp, #16
   1eb64:	bd80      	pop	{r7, pc}

0001eb66 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
   1eb66:	b580      	push	{r7, lr}
   1eb68:	b084      	sub	sp, #16
   1eb6a:	af00      	add	r7, sp, #0
   1eb6c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
   1eb6e:	687b      	ldr	r3, [r7, #4]
   1eb70:	691b      	ldr	r3, [r3, #16]
   1eb72:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
   1eb74:	687b      	ldr	r3, [r7, #4]
   1eb76:	685b      	ldr	r3, [r3, #4]
   1eb78:	687a      	ldr	r2, [r7, #4]
   1eb7a:	6892      	ldr	r2, [r2, #8]
   1eb7c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
   1eb7e:	687b      	ldr	r3, [r7, #4]
   1eb80:	689b      	ldr	r3, [r3, #8]
   1eb82:	687a      	ldr	r2, [r7, #4]
   1eb84:	6852      	ldr	r2, [r2, #4]
   1eb86:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
   1eb88:	68fb      	ldr	r3, [r7, #12]
   1eb8a:	685a      	ldr	r2, [r3, #4]
   1eb8c:	687b      	ldr	r3, [r7, #4]
   1eb8e:	429a      	cmp	r2, r3
   1eb90:	d103      	bne.n	1eb9a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
   1eb92:	687b      	ldr	r3, [r7, #4]
   1eb94:	689a      	ldr	r2, [r3, #8]
   1eb96:	68fb      	ldr	r3, [r7, #12]
   1eb98:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
   1eb9a:	687b      	ldr	r3, [r7, #4]
   1eb9c:	2200      	movs	r2, #0
   1eb9e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
   1eba0:	68fb      	ldr	r3, [r7, #12]
   1eba2:	681b      	ldr	r3, [r3, #0]
   1eba4:	1e5a      	subs	r2, r3, #1
   1eba6:	68fb      	ldr	r3, [r7, #12]
   1eba8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
   1ebaa:	68fb      	ldr	r3, [r7, #12]
   1ebac:	681b      	ldr	r3, [r3, #0]
}
   1ebae:	0018      	movs	r0, r3
   1ebb0:	46bd      	mov	sp, r7
   1ebb2:	b004      	add	sp, #16
   1ebb4:	bd80      	pop	{r7, pc}
	...

0001ebb8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
   1ebb8:	b580      	push	{r7, lr}
   1ebba:	b084      	sub	sp, #16
   1ebbc:	af00      	add	r7, sp, #0
   1ebbe:	6078      	str	r0, [r7, #4]
   1ebc0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1ebc2:	687b      	ldr	r3, [r7, #4]
   1ebc4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
   1ebc6:	68fb      	ldr	r3, [r7, #12]
   1ebc8:	2b00      	cmp	r3, #0
   1ebca:	d101      	bne.n	1ebd0 <xQueueGenericReset+0x18>
   1ebcc:	b672      	cpsid	i
   1ebce:	e7fe      	b.n	1ebce <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
   1ebd0:	4b23      	ldr	r3, [pc, #140]	; (1ec60 <xQueueGenericReset+0xa8>)
   1ebd2:	4798      	blx	r3
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
   1ebd4:	68fb      	ldr	r3, [r7, #12]
   1ebd6:	681a      	ldr	r2, [r3, #0]
   1ebd8:	68fb      	ldr	r3, [r7, #12]
   1ebda:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
   1ebdc:	68fb      	ldr	r3, [r7, #12]
   1ebde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1ebe0:	434b      	muls	r3, r1
   1ebe2:	18d2      	adds	r2, r2, r3
   1ebe4:	68fb      	ldr	r3, [r7, #12]
   1ebe6:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
   1ebe8:	68fb      	ldr	r3, [r7, #12]
   1ebea:	2200      	movs	r2, #0
   1ebec:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
   1ebee:	68fb      	ldr	r3, [r7, #12]
   1ebf0:	681a      	ldr	r2, [r3, #0]
   1ebf2:	68fb      	ldr	r3, [r7, #12]
   1ebf4:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
   1ebf6:	68fb      	ldr	r3, [r7, #12]
   1ebf8:	681a      	ldr	r2, [r3, #0]
   1ebfa:	68fb      	ldr	r3, [r7, #12]
   1ebfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1ebfe:	1e59      	subs	r1, r3, #1
   1ec00:	68fb      	ldr	r3, [r7, #12]
   1ec02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1ec04:	434b      	muls	r3, r1
   1ec06:	18d2      	adds	r2, r2, r3
   1ec08:	68fb      	ldr	r3, [r7, #12]
   1ec0a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
   1ec0c:	68fb      	ldr	r3, [r7, #12]
   1ec0e:	2244      	movs	r2, #68	; 0x44
   1ec10:	21ff      	movs	r1, #255	; 0xff
   1ec12:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
   1ec14:	68fb      	ldr	r3, [r7, #12]
   1ec16:	2245      	movs	r2, #69	; 0x45
   1ec18:	21ff      	movs	r1, #255	; 0xff
   1ec1a:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
   1ec1c:	683b      	ldr	r3, [r7, #0]
   1ec1e:	2b00      	cmp	r3, #0
   1ec20:	d10d      	bne.n	1ec3e <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   1ec22:	68fb      	ldr	r3, [r7, #12]
   1ec24:	691b      	ldr	r3, [r3, #16]
   1ec26:	2b00      	cmp	r3, #0
   1ec28:	d013      	beq.n	1ec52 <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1ec2a:	68fb      	ldr	r3, [r7, #12]
   1ec2c:	3310      	adds	r3, #16
   1ec2e:	0018      	movs	r0, r3
   1ec30:	4b0c      	ldr	r3, [pc, #48]	; (1ec64 <xQueueGenericReset+0xac>)
   1ec32:	4798      	blx	r3
   1ec34:	1e03      	subs	r3, r0, #0
   1ec36:	d00c      	beq.n	1ec52 <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
   1ec38:	4b0b      	ldr	r3, [pc, #44]	; (1ec68 <xQueueGenericReset+0xb0>)
   1ec3a:	4798      	blx	r3
   1ec3c:	e009      	b.n	1ec52 <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
   1ec3e:	68fb      	ldr	r3, [r7, #12]
   1ec40:	3310      	adds	r3, #16
   1ec42:	0018      	movs	r0, r3
   1ec44:	4b09      	ldr	r3, [pc, #36]	; (1ec6c <xQueueGenericReset+0xb4>)
   1ec46:	4798      	blx	r3
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
   1ec48:	68fb      	ldr	r3, [r7, #12]
   1ec4a:	3324      	adds	r3, #36	; 0x24
   1ec4c:	0018      	movs	r0, r3
   1ec4e:	4b07      	ldr	r3, [pc, #28]	; (1ec6c <xQueueGenericReset+0xb4>)
   1ec50:	4798      	blx	r3
		}
	}
	taskEXIT_CRITICAL();
   1ec52:	4b07      	ldr	r3, [pc, #28]	; (1ec70 <xQueueGenericReset+0xb8>)
   1ec54:	4798      	blx	r3

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
   1ec56:	2301      	movs	r3, #1
}
   1ec58:	0018      	movs	r0, r3
   1ec5a:	46bd      	mov	sp, r7
   1ec5c:	b004      	add	sp, #16
   1ec5e:	bd80      	pop	{r7, pc}
   1ec60:	0001e8c1 	.word	0x0001e8c1
   1ec64:	00020129 	.word	0x00020129
   1ec68:	0001e8a1 	.word	0x0001e8a1
   1ec6c:	0001ea65 	.word	0x0001ea65
   1ec70:	0001e8e5 	.word	0x0001e8e5

0001ec74 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
   1ec74:	b590      	push	{r4, r7, lr}
   1ec76:	b08b      	sub	sp, #44	; 0x2c
   1ec78:	af02      	add	r7, sp, #8
   1ec7a:	60f8      	str	r0, [r7, #12]
   1ec7c:	60b9      	str	r1, [r7, #8]
   1ec7e:	1dfb      	adds	r3, r7, #7
   1ec80:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
   1ec82:	68fb      	ldr	r3, [r7, #12]
   1ec84:	2b00      	cmp	r3, #0
   1ec86:	d101      	bne.n	1ec8c <xQueueGenericCreate+0x18>
   1ec88:	b672      	cpsid	i
   1ec8a:	e7fe      	b.n	1ec8a <xQueueGenericCreate+0x16>

		if( uxItemSize == ( UBaseType_t ) 0 )
   1ec8c:	68bb      	ldr	r3, [r7, #8]
   1ec8e:	2b00      	cmp	r3, #0
   1ec90:	d102      	bne.n	1ec98 <xQueueGenericCreate+0x24>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
   1ec92:	2300      	movs	r3, #0
   1ec94:	61fb      	str	r3, [r7, #28]
   1ec96:	e003      	b.n	1eca0 <xQueueGenericCreate+0x2c>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1ec98:	68fb      	ldr	r3, [r7, #12]
   1ec9a:	68ba      	ldr	r2, [r7, #8]
   1ec9c:	4353      	muls	r3, r2
   1ec9e:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
   1eca0:	69fb      	ldr	r3, [r7, #28]
   1eca2:	334c      	adds	r3, #76	; 0x4c
   1eca4:	0018      	movs	r0, r3
   1eca6:	4b0c      	ldr	r3, [pc, #48]	; (1ecd8 <xQueueGenericCreate+0x64>)
   1eca8:	4798      	blx	r3
   1ecaa:	0003      	movs	r3, r0
   1ecac:	61bb      	str	r3, [r7, #24]

		if( pxNewQueue != NULL )
   1ecae:	69bb      	ldr	r3, [r7, #24]
   1ecb0:	2b00      	cmp	r3, #0
   1ecb2:	d00c      	beq.n	1ecce <xQueueGenericCreate+0x5a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
   1ecb4:	69bb      	ldr	r3, [r7, #24]
   1ecb6:	334c      	adds	r3, #76	; 0x4c
   1ecb8:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
   1ecba:	1dfb      	adds	r3, r7, #7
   1ecbc:	781c      	ldrb	r4, [r3, #0]
   1ecbe:	697a      	ldr	r2, [r7, #20]
   1ecc0:	68b9      	ldr	r1, [r7, #8]
   1ecc2:	68f8      	ldr	r0, [r7, #12]
   1ecc4:	69bb      	ldr	r3, [r7, #24]
   1ecc6:	9300      	str	r3, [sp, #0]
   1ecc8:	0023      	movs	r3, r4
   1ecca:	4c04      	ldr	r4, [pc, #16]	; (1ecdc <xQueueGenericCreate+0x68>)
   1eccc:	47a0      	blx	r4
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
   1ecce:	69bb      	ldr	r3, [r7, #24]
	}
   1ecd0:	0018      	movs	r0, r3
   1ecd2:	46bd      	mov	sp, r7
   1ecd4:	b009      	add	sp, #36	; 0x24
   1ecd6:	bd90      	pop	{r4, r7, pc}
   1ecd8:	0001e9fd 	.word	0x0001e9fd
   1ecdc:	0001ece1 	.word	0x0001ece1

0001ece0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
   1ece0:	b580      	push	{r7, lr}
   1ece2:	b084      	sub	sp, #16
   1ece4:	af00      	add	r7, sp, #0
   1ece6:	60f8      	str	r0, [r7, #12]
   1ece8:	60b9      	str	r1, [r7, #8]
   1ecea:	607a      	str	r2, [r7, #4]
   1ecec:	001a      	movs	r2, r3
   1ecee:	1cfb      	adds	r3, r7, #3
   1ecf0:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
   1ecf2:	68bb      	ldr	r3, [r7, #8]
   1ecf4:	2b00      	cmp	r3, #0
   1ecf6:	d103      	bne.n	1ed00 <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
   1ecf8:	69bb      	ldr	r3, [r7, #24]
   1ecfa:	69ba      	ldr	r2, [r7, #24]
   1ecfc:	601a      	str	r2, [r3, #0]
   1ecfe:	e002      	b.n	1ed06 <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
   1ed00:	69bb      	ldr	r3, [r7, #24]
   1ed02:	687a      	ldr	r2, [r7, #4]
   1ed04:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
   1ed06:	69bb      	ldr	r3, [r7, #24]
   1ed08:	68fa      	ldr	r2, [r7, #12]
   1ed0a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
   1ed0c:	69bb      	ldr	r3, [r7, #24]
   1ed0e:	68ba      	ldr	r2, [r7, #8]
   1ed10:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
   1ed12:	69bb      	ldr	r3, [r7, #24]
   1ed14:	2101      	movs	r1, #1
   1ed16:	0018      	movs	r0, r3
   1ed18:	4b04      	ldr	r3, [pc, #16]	; (1ed2c <prvInitialiseNewQueue+0x4c>)
   1ed1a:	4798      	blx	r3
	}
	#endif /* configUSE_TRACE_FACILITY */

	#if( configUSE_QUEUE_SETS == 1 )
	{
		pxNewQueue->pxQueueSetContainer = NULL;
   1ed1c:	69bb      	ldr	r3, [r7, #24]
   1ed1e:	2200      	movs	r2, #0
   1ed20:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
   1ed22:	46c0      	nop			; (mov r8, r8)
   1ed24:	46bd      	mov	sp, r7
   1ed26:	b004      	add	sp, #16
   1ed28:	bd80      	pop	{r7, pc}
   1ed2a:	46c0      	nop			; (mov r8, r8)
   1ed2c:	0001ebb9 	.word	0x0001ebb9

0001ed30 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
   1ed30:	b580      	push	{r7, lr}
   1ed32:	b08a      	sub	sp, #40	; 0x28
   1ed34:	af00      	add	r7, sp, #0
   1ed36:	60f8      	str	r0, [r7, #12]
   1ed38:	60b9      	str	r1, [r7, #8]
   1ed3a:	607a      	str	r2, [r7, #4]
   1ed3c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
   1ed3e:	2300      	movs	r3, #0
   1ed40:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1ed42:	68fb      	ldr	r3, [r7, #12]
   1ed44:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
   1ed46:	6a3b      	ldr	r3, [r7, #32]
   1ed48:	2b00      	cmp	r3, #0
   1ed4a:	d101      	bne.n	1ed50 <xQueueGenericSend+0x20>
   1ed4c:	b672      	cpsid	i
   1ed4e:	e7fe      	b.n	1ed4e <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   1ed50:	68bb      	ldr	r3, [r7, #8]
   1ed52:	2b00      	cmp	r3, #0
   1ed54:	d103      	bne.n	1ed5e <xQueueGenericSend+0x2e>
   1ed56:	6a3b      	ldr	r3, [r7, #32]
   1ed58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1ed5a:	2b00      	cmp	r3, #0
   1ed5c:	d101      	bne.n	1ed62 <xQueueGenericSend+0x32>
   1ed5e:	2301      	movs	r3, #1
   1ed60:	e000      	b.n	1ed64 <xQueueGenericSend+0x34>
   1ed62:	2300      	movs	r3, #0
   1ed64:	2b00      	cmp	r3, #0
   1ed66:	d101      	bne.n	1ed6c <xQueueGenericSend+0x3c>
   1ed68:	b672      	cpsid	i
   1ed6a:	e7fe      	b.n	1ed6a <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
   1ed6c:	683b      	ldr	r3, [r7, #0]
   1ed6e:	2b02      	cmp	r3, #2
   1ed70:	d103      	bne.n	1ed7a <xQueueGenericSend+0x4a>
   1ed72:	6a3b      	ldr	r3, [r7, #32]
   1ed74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1ed76:	2b01      	cmp	r3, #1
   1ed78:	d101      	bne.n	1ed7e <xQueueGenericSend+0x4e>
   1ed7a:	2301      	movs	r3, #1
   1ed7c:	e000      	b.n	1ed80 <xQueueGenericSend+0x50>
   1ed7e:	2300      	movs	r3, #0
   1ed80:	2b00      	cmp	r3, #0
   1ed82:	d101      	bne.n	1ed88 <xQueueGenericSend+0x58>
   1ed84:	b672      	cpsid	i
   1ed86:	e7fe      	b.n	1ed86 <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   1ed88:	4b53      	ldr	r3, [pc, #332]	; (1eed8 <xQueueGenericSend+0x1a8>)
   1ed8a:	4798      	blx	r3
   1ed8c:	1e03      	subs	r3, r0, #0
   1ed8e:	d102      	bne.n	1ed96 <xQueueGenericSend+0x66>
   1ed90:	687b      	ldr	r3, [r7, #4]
   1ed92:	2b00      	cmp	r3, #0
   1ed94:	d101      	bne.n	1ed9a <xQueueGenericSend+0x6a>
   1ed96:	2301      	movs	r3, #1
   1ed98:	e000      	b.n	1ed9c <xQueueGenericSend+0x6c>
   1ed9a:	2300      	movs	r3, #0
   1ed9c:	2b00      	cmp	r3, #0
   1ed9e:	d101      	bne.n	1eda4 <xQueueGenericSend+0x74>
   1eda0:	b672      	cpsid	i
   1eda2:	e7fe      	b.n	1eda2 <xQueueGenericSend+0x72>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
   1eda4:	4b4d      	ldr	r3, [pc, #308]	; (1eedc <xQueueGenericSend+0x1ac>)
   1eda6:	4798      	blx	r3
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
   1eda8:	6a3b      	ldr	r3, [r7, #32]
   1edaa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1edac:	6a3b      	ldr	r3, [r7, #32]
   1edae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1edb0:	429a      	cmp	r2, r3
   1edb2:	d302      	bcc.n	1edba <xQueueGenericSend+0x8a>
   1edb4:	683b      	ldr	r3, [r7, #0]
   1edb6:	2b02      	cmp	r3, #2
   1edb8:	d12d      	bne.n	1ee16 <xQueueGenericSend+0xe6>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   1edba:	683a      	ldr	r2, [r7, #0]
   1edbc:	68b9      	ldr	r1, [r7, #8]
   1edbe:	6a3b      	ldr	r3, [r7, #32]
   1edc0:	0018      	movs	r0, r3
   1edc2:	4b47      	ldr	r3, [pc, #284]	; (1eee0 <xQueueGenericSend+0x1b0>)
   1edc4:	4798      	blx	r3
   1edc6:	0003      	movs	r3, r0
   1edc8:	61fb      	str	r3, [r7, #28]

				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
   1edca:	6a3b      	ldr	r3, [r7, #32]
   1edcc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1edce:	2b00      	cmp	r3, #0
   1edd0:	d00a      	beq.n	1ede8 <xQueueGenericSend+0xb8>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
   1edd2:	683a      	ldr	r2, [r7, #0]
   1edd4:	6a3b      	ldr	r3, [r7, #32]
   1edd6:	0011      	movs	r1, r2
   1edd8:	0018      	movs	r0, r3
   1edda:	4b42      	ldr	r3, [pc, #264]	; (1eee4 <xQueueGenericSend+0x1b4>)
   1eddc:	4798      	blx	r3
   1edde:	1e03      	subs	r3, r0, #0
   1ede0:	d015      	beq.n	1ee0e <xQueueGenericSend+0xde>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock. A context switch is required. */
							queueYIELD_IF_USING_PREEMPTION();
   1ede2:	4b41      	ldr	r3, [pc, #260]	; (1eee8 <xQueueGenericSend+0x1b8>)
   1ede4:	4798      	blx	r3
   1ede6:	e012      	b.n	1ee0e <xQueueGenericSend+0xde>
					}
					else
					{
						/* If there was a task waiting for data to arrive on the
						queue then unblock it now. */
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   1ede8:	6a3b      	ldr	r3, [r7, #32]
   1edea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1edec:	2b00      	cmp	r3, #0
   1edee:	d009      	beq.n	1ee04 <xQueueGenericSend+0xd4>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1edf0:	6a3b      	ldr	r3, [r7, #32]
   1edf2:	3324      	adds	r3, #36	; 0x24
   1edf4:	0018      	movs	r0, r3
   1edf6:	4b3d      	ldr	r3, [pc, #244]	; (1eeec <xQueueGenericSend+0x1bc>)
   1edf8:	4798      	blx	r3
   1edfa:	1e03      	subs	r3, r0, #0
   1edfc:	d007      	beq.n	1ee0e <xQueueGenericSend+0xde>
							{
								/* The unblocked task has a priority higher than
								our own so yield immediately.  Yes it is ok to
								do this from within the critical section - the
								kernel takes care of that. */
								queueYIELD_IF_USING_PREEMPTION();
   1edfe:	4b3a      	ldr	r3, [pc, #232]	; (1eee8 <xQueueGenericSend+0x1b8>)
   1ee00:	4798      	blx	r3
   1ee02:	e004      	b.n	1ee0e <xQueueGenericSend+0xde>
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
						}
						else if( xYieldRequired != pdFALSE )
   1ee04:	69fb      	ldr	r3, [r7, #28]
   1ee06:	2b00      	cmp	r3, #0
   1ee08:	d001      	beq.n	1ee0e <xQueueGenericSend+0xde>
						{
							/* This path is a special case that will only get
							executed if the task was holding multiple mutexes
							and the mutexes were given back in an order that is
							different to that in which they were taken. */
							queueYIELD_IF_USING_PREEMPTION();
   1ee0a:	4b37      	ldr	r3, [pc, #220]	; (1eee8 <xQueueGenericSend+0x1b8>)
   1ee0c:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
   1ee0e:	4b38      	ldr	r3, [pc, #224]	; (1eef0 <xQueueGenericSend+0x1c0>)
   1ee10:	4798      	blx	r3
				return pdPASS;
   1ee12:	2301      	movs	r3, #1
   1ee14:	e05c      	b.n	1eed0 <xQueueGenericSend+0x1a0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
   1ee16:	687b      	ldr	r3, [r7, #4]
   1ee18:	2b00      	cmp	r3, #0
   1ee1a:	d103      	bne.n	1ee24 <xQueueGenericSend+0xf4>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   1ee1c:	4b34      	ldr	r3, [pc, #208]	; (1eef0 <xQueueGenericSend+0x1c0>)
   1ee1e:	4798      	blx	r3

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
   1ee20:	2300      	movs	r3, #0
   1ee22:	e055      	b.n	1eed0 <xQueueGenericSend+0x1a0>
				}
				else if( xEntryTimeSet == pdFALSE )
   1ee24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1ee26:	2b00      	cmp	r3, #0
   1ee28:	d106      	bne.n	1ee38 <xQueueGenericSend+0x108>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
   1ee2a:	2314      	movs	r3, #20
   1ee2c:	18fb      	adds	r3, r7, r3
   1ee2e:	0018      	movs	r0, r3
   1ee30:	4b30      	ldr	r3, [pc, #192]	; (1eef4 <xQueueGenericSend+0x1c4>)
   1ee32:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
   1ee34:	2301      	movs	r3, #1
   1ee36:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
   1ee38:	4b2d      	ldr	r3, [pc, #180]	; (1eef0 <xQueueGenericSend+0x1c0>)
   1ee3a:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   1ee3c:	4b2e      	ldr	r3, [pc, #184]	; (1eef8 <xQueueGenericSend+0x1c8>)
   1ee3e:	4798      	blx	r3
		prvLockQueue( pxQueue );
   1ee40:	4b26      	ldr	r3, [pc, #152]	; (1eedc <xQueueGenericSend+0x1ac>)
   1ee42:	4798      	blx	r3
   1ee44:	6a3b      	ldr	r3, [r7, #32]
   1ee46:	2244      	movs	r2, #68	; 0x44
   1ee48:	5c9b      	ldrb	r3, [r3, r2]
   1ee4a:	b25b      	sxtb	r3, r3
   1ee4c:	3301      	adds	r3, #1
   1ee4e:	d103      	bne.n	1ee58 <xQueueGenericSend+0x128>
   1ee50:	6a3b      	ldr	r3, [r7, #32]
   1ee52:	2244      	movs	r2, #68	; 0x44
   1ee54:	2100      	movs	r1, #0
   1ee56:	5499      	strb	r1, [r3, r2]
   1ee58:	6a3b      	ldr	r3, [r7, #32]
   1ee5a:	2245      	movs	r2, #69	; 0x45
   1ee5c:	5c9b      	ldrb	r3, [r3, r2]
   1ee5e:	b25b      	sxtb	r3, r3
   1ee60:	3301      	adds	r3, #1
   1ee62:	d103      	bne.n	1ee6c <xQueueGenericSend+0x13c>
   1ee64:	6a3b      	ldr	r3, [r7, #32]
   1ee66:	2245      	movs	r2, #69	; 0x45
   1ee68:	2100      	movs	r1, #0
   1ee6a:	5499      	strb	r1, [r3, r2]
   1ee6c:	4b20      	ldr	r3, [pc, #128]	; (1eef0 <xQueueGenericSend+0x1c0>)
   1ee6e:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   1ee70:	1d3a      	adds	r2, r7, #4
   1ee72:	2314      	movs	r3, #20
   1ee74:	18fb      	adds	r3, r7, r3
   1ee76:	0011      	movs	r1, r2
   1ee78:	0018      	movs	r0, r3
   1ee7a:	4b20      	ldr	r3, [pc, #128]	; (1eefc <xQueueGenericSend+0x1cc>)
   1ee7c:	4798      	blx	r3
   1ee7e:	1e03      	subs	r3, r0, #0
   1ee80:	d11f      	bne.n	1eec2 <xQueueGenericSend+0x192>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
   1ee82:	6a3b      	ldr	r3, [r7, #32]
   1ee84:	0018      	movs	r0, r3
   1ee86:	4b1e      	ldr	r3, [pc, #120]	; (1ef00 <xQueueGenericSend+0x1d0>)
   1ee88:	4798      	blx	r3
   1ee8a:	1e03      	subs	r3, r0, #0
   1ee8c:	d012      	beq.n	1eeb4 <xQueueGenericSend+0x184>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
   1ee8e:	6a3b      	ldr	r3, [r7, #32]
   1ee90:	3310      	adds	r3, #16
   1ee92:	687a      	ldr	r2, [r7, #4]
   1ee94:	0011      	movs	r1, r2
   1ee96:	0018      	movs	r0, r3
   1ee98:	4b1a      	ldr	r3, [pc, #104]	; (1ef04 <xQueueGenericSend+0x1d4>)
   1ee9a:	4798      	blx	r3
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
   1ee9c:	6a3b      	ldr	r3, [r7, #32]
   1ee9e:	0018      	movs	r0, r3
   1eea0:	4b19      	ldr	r3, [pc, #100]	; (1ef08 <xQueueGenericSend+0x1d8>)
   1eea2:	4798      	blx	r3
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
   1eea4:	4b19      	ldr	r3, [pc, #100]	; (1ef0c <xQueueGenericSend+0x1dc>)
   1eea6:	4798      	blx	r3
   1eea8:	1e03      	subs	r3, r0, #0
   1eeaa:	d000      	beq.n	1eeae <xQueueGenericSend+0x17e>
   1eeac:	e77a      	b.n	1eda4 <xQueueGenericSend+0x74>
				{
					portYIELD_WITHIN_API();
   1eeae:	4b0e      	ldr	r3, [pc, #56]	; (1eee8 <xQueueGenericSend+0x1b8>)
   1eeb0:	4798      	blx	r3
   1eeb2:	e777      	b.n	1eda4 <xQueueGenericSend+0x74>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
   1eeb4:	6a3b      	ldr	r3, [r7, #32]
   1eeb6:	0018      	movs	r0, r3
   1eeb8:	4b13      	ldr	r3, [pc, #76]	; (1ef08 <xQueueGenericSend+0x1d8>)
   1eeba:	4798      	blx	r3
				( void ) xTaskResumeAll();
   1eebc:	4b13      	ldr	r3, [pc, #76]	; (1ef0c <xQueueGenericSend+0x1dc>)
   1eebe:	4798      	blx	r3
   1eec0:	e770      	b.n	1eda4 <xQueueGenericSend+0x74>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
   1eec2:	6a3b      	ldr	r3, [r7, #32]
   1eec4:	0018      	movs	r0, r3
   1eec6:	4b10      	ldr	r3, [pc, #64]	; (1ef08 <xQueueGenericSend+0x1d8>)
   1eec8:	4798      	blx	r3
			( void ) xTaskResumeAll();
   1eeca:	4b10      	ldr	r3, [pc, #64]	; (1ef0c <xQueueGenericSend+0x1dc>)
   1eecc:	4798      	blx	r3

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
   1eece:	2300      	movs	r3, #0
		}
	}
}
   1eed0:	0018      	movs	r0, r3
   1eed2:	46bd      	mov	sp, r7
   1eed4:	b00a      	add	sp, #40	; 0x28
   1eed6:	bd80      	pop	{r7, pc}
   1eed8:	00020461 	.word	0x00020461
   1eedc:	0001e8c1 	.word	0x0001e8c1
   1eee0:	0001f3f1 	.word	0x0001f3f1
   1eee4:	0001f6f5 	.word	0x0001f6f5
   1eee8:	0001e8a1 	.word	0x0001e8a1
   1eeec:	00020129 	.word	0x00020129
   1eef0:	0001e8e5 	.word	0x0001e8e5
   1eef4:	000201e9 	.word	0x000201e9
   1eef8:	0001fcf1 	.word	0x0001fcf1
   1eefc:	00020211 	.word	0x00020211
   1ef00:	0001f645 	.word	0x0001f645
   1ef04:	00020091 	.word	0x00020091
   1ef08:	0001f521 	.word	0x0001f521
   1ef0c:	0001fd09 	.word	0x0001fd09

0001ef10 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
   1ef10:	b580      	push	{r7, lr}
   1ef12:	b088      	sub	sp, #32
   1ef14:	af00      	add	r7, sp, #0
   1ef16:	60f8      	str	r0, [r7, #12]
   1ef18:	60b9      	str	r1, [r7, #8]
   1ef1a:	607a      	str	r2, [r7, #4]
   1ef1c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1ef1e:	68fb      	ldr	r3, [r7, #12]
   1ef20:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
   1ef22:	69bb      	ldr	r3, [r7, #24]
   1ef24:	2b00      	cmp	r3, #0
   1ef26:	d101      	bne.n	1ef2c <xQueueGenericSendFromISR+0x1c>
   1ef28:	b672      	cpsid	i
   1ef2a:	e7fe      	b.n	1ef2a <xQueueGenericSendFromISR+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   1ef2c:	68bb      	ldr	r3, [r7, #8]
   1ef2e:	2b00      	cmp	r3, #0
   1ef30:	d103      	bne.n	1ef3a <xQueueGenericSendFromISR+0x2a>
   1ef32:	69bb      	ldr	r3, [r7, #24]
   1ef34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1ef36:	2b00      	cmp	r3, #0
   1ef38:	d101      	bne.n	1ef3e <xQueueGenericSendFromISR+0x2e>
   1ef3a:	2301      	movs	r3, #1
   1ef3c:	e000      	b.n	1ef40 <xQueueGenericSendFromISR+0x30>
   1ef3e:	2300      	movs	r3, #0
   1ef40:	2b00      	cmp	r3, #0
   1ef42:	d101      	bne.n	1ef48 <xQueueGenericSendFromISR+0x38>
   1ef44:	b672      	cpsid	i
   1ef46:	e7fe      	b.n	1ef46 <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
   1ef48:	683b      	ldr	r3, [r7, #0]
   1ef4a:	2b02      	cmp	r3, #2
   1ef4c:	d103      	bne.n	1ef56 <xQueueGenericSendFromISR+0x46>
   1ef4e:	69bb      	ldr	r3, [r7, #24]
   1ef50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1ef52:	2b01      	cmp	r3, #1
   1ef54:	d101      	bne.n	1ef5a <xQueueGenericSendFromISR+0x4a>
   1ef56:	2301      	movs	r3, #1
   1ef58:	e000      	b.n	1ef5c <xQueueGenericSendFromISR+0x4c>
   1ef5a:	2300      	movs	r3, #0
   1ef5c:	2b00      	cmp	r3, #0
   1ef5e:	d101      	bne.n	1ef64 <xQueueGenericSendFromISR+0x54>
   1ef60:	b672      	cpsid	i
   1ef62:	e7fe      	b.n	1ef62 <xQueueGenericSendFromISR+0x52>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   1ef64:	4b2d      	ldr	r3, [pc, #180]	; (1f01c <xQueueGenericSendFromISR+0x10c>)
   1ef66:	4798      	blx	r3
   1ef68:	0003      	movs	r3, r0
   1ef6a:	617b      	str	r3, [r7, #20]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
   1ef6c:	69bb      	ldr	r3, [r7, #24]
   1ef6e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1ef70:	69bb      	ldr	r3, [r7, #24]
   1ef72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1ef74:	429a      	cmp	r2, r3
   1ef76:	d302      	bcc.n	1ef7e <xQueueGenericSendFromISR+0x6e>
   1ef78:	683b      	ldr	r3, [r7, #0]
   1ef7a:	2b02      	cmp	r3, #2
   1ef7c:	d142      	bne.n	1f004 <xQueueGenericSendFromISR+0xf4>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
   1ef7e:	2313      	movs	r3, #19
   1ef80:	18fb      	adds	r3, r7, r3
   1ef82:	69ba      	ldr	r2, [r7, #24]
   1ef84:	2145      	movs	r1, #69	; 0x45
   1ef86:	5c52      	ldrb	r2, [r2, r1]
   1ef88:	701a      	strb	r2, [r3, #0]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   1ef8a:	683a      	ldr	r2, [r7, #0]
   1ef8c:	68b9      	ldr	r1, [r7, #8]
   1ef8e:	69bb      	ldr	r3, [r7, #24]
   1ef90:	0018      	movs	r0, r3
   1ef92:	4b23      	ldr	r3, [pc, #140]	; (1f020 <xQueueGenericSendFromISR+0x110>)
   1ef94:	4798      	blx	r3

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
   1ef96:	2313      	movs	r3, #19
   1ef98:	18fb      	adds	r3, r7, r3
   1ef9a:	781b      	ldrb	r3, [r3, #0]
   1ef9c:	b25b      	sxtb	r3, r3
   1ef9e:	3301      	adds	r3, #1
   1efa0:	d124      	bne.n	1efec <xQueueGenericSendFromISR+0xdc>
			{
				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
   1efa2:	69bb      	ldr	r3, [r7, #24]
   1efa4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1efa6:	2b00      	cmp	r3, #0
   1efa8:	d00e      	beq.n	1efc8 <xQueueGenericSendFromISR+0xb8>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
   1efaa:	683a      	ldr	r2, [r7, #0]
   1efac:	69bb      	ldr	r3, [r7, #24]
   1efae:	0011      	movs	r1, r2
   1efb0:	0018      	movs	r0, r3
   1efb2:	4b1c      	ldr	r3, [pc, #112]	; (1f024 <xQueueGenericSendFromISR+0x114>)
   1efb4:	4798      	blx	r3
   1efb6:	1e03      	subs	r3, r0, #0
   1efb8:	d021      	beq.n	1effe <xQueueGenericSendFromISR+0xee>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock.  A context switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
   1efba:	687b      	ldr	r3, [r7, #4]
   1efbc:	2b00      	cmp	r3, #0
   1efbe:	d01e      	beq.n	1effe <xQueueGenericSendFromISR+0xee>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
   1efc0:	687b      	ldr	r3, [r7, #4]
   1efc2:	2201      	movs	r2, #1
   1efc4:	601a      	str	r2, [r3, #0]
   1efc6:	e01a      	b.n	1effe <xQueueGenericSendFromISR+0xee>
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   1efc8:	69bb      	ldr	r3, [r7, #24]
   1efca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1efcc:	2b00      	cmp	r3, #0
   1efce:	d016      	beq.n	1effe <xQueueGenericSendFromISR+0xee>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1efd0:	69bb      	ldr	r3, [r7, #24]
   1efd2:	3324      	adds	r3, #36	; 0x24
   1efd4:	0018      	movs	r0, r3
   1efd6:	4b14      	ldr	r3, [pc, #80]	; (1f028 <xQueueGenericSendFromISR+0x118>)
   1efd8:	4798      	blx	r3
   1efda:	1e03      	subs	r3, r0, #0
   1efdc:	d00f      	beq.n	1effe <xQueueGenericSendFromISR+0xee>
							{
								/* The task waiting has a higher priority so
								record that a context switch is required. */
								if( pxHigherPriorityTaskWoken != NULL )
   1efde:	687b      	ldr	r3, [r7, #4]
   1efe0:	2b00      	cmp	r3, #0
   1efe2:	d00c      	beq.n	1effe <xQueueGenericSendFromISR+0xee>
								{
									*pxHigherPriorityTaskWoken = pdTRUE;
   1efe4:	687b      	ldr	r3, [r7, #4]
   1efe6:	2201      	movs	r2, #1
   1efe8:	601a      	str	r2, [r3, #0]
   1efea:	e008      	b.n	1effe <xQueueGenericSendFromISR+0xee>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
   1efec:	2313      	movs	r3, #19
   1efee:	18fb      	adds	r3, r7, r3
   1eff0:	781b      	ldrb	r3, [r3, #0]
   1eff2:	3301      	adds	r3, #1
   1eff4:	b2db      	uxtb	r3, r3
   1eff6:	b259      	sxtb	r1, r3
   1eff8:	69bb      	ldr	r3, [r7, #24]
   1effa:	2245      	movs	r2, #69	; 0x45
   1effc:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
   1effe:	2301      	movs	r3, #1
   1f000:	61fb      	str	r3, [r7, #28]
		{
   1f002:	e001      	b.n	1f008 <xQueueGenericSendFromISR+0xf8>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
   1f004:	2300      	movs	r3, #0
   1f006:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
   1f008:	697b      	ldr	r3, [r7, #20]
   1f00a:	0018      	movs	r0, r3
   1f00c:	4b07      	ldr	r3, [pc, #28]	; (1f02c <xQueueGenericSendFromISR+0x11c>)
   1f00e:	4798      	blx	r3

	return xReturn;
   1f010:	69fb      	ldr	r3, [r7, #28]
}
   1f012:	0018      	movs	r0, r3
   1f014:	46bd      	mov	sp, r7
   1f016:	b008      	add	sp, #32
   1f018:	bd80      	pop	{r7, pc}
   1f01a:	46c0      	nop			; (mov r8, r8)
   1f01c:	0001e915 	.word	0x0001e915
   1f020:	0001f3f1 	.word	0x0001f3f1
   1f024:	0001f6f5 	.word	0x0001f6f5
   1f028:	00020129 	.word	0x00020129
   1f02c:	0001e921 	.word	0x0001e921

0001f030 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
   1f030:	b580      	push	{r7, lr}
   1f032:	b08a      	sub	sp, #40	; 0x28
   1f034:	af00      	add	r7, sp, #0
   1f036:	60f8      	str	r0, [r7, #12]
   1f038:	60b9      	str	r1, [r7, #8]
   1f03a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
   1f03c:	2300      	movs	r3, #0
   1f03e:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1f040:	68fb      	ldr	r3, [r7, #12]
   1f042:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
   1f044:	6a3b      	ldr	r3, [r7, #32]
   1f046:	2b00      	cmp	r3, #0
   1f048:	d101      	bne.n	1f04e <xQueueReceive+0x1e>
   1f04a:	b672      	cpsid	i
   1f04c:	e7fe      	b.n	1f04c <xQueueReceive+0x1c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
   1f04e:	68bb      	ldr	r3, [r7, #8]
   1f050:	2b00      	cmp	r3, #0
   1f052:	d103      	bne.n	1f05c <xQueueReceive+0x2c>
   1f054:	6a3b      	ldr	r3, [r7, #32]
   1f056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1f058:	2b00      	cmp	r3, #0
   1f05a:	d101      	bne.n	1f060 <xQueueReceive+0x30>
   1f05c:	2301      	movs	r3, #1
   1f05e:	e000      	b.n	1f062 <xQueueReceive+0x32>
   1f060:	2300      	movs	r3, #0
   1f062:	2b00      	cmp	r3, #0
   1f064:	d101      	bne.n	1f06a <xQueueReceive+0x3a>
   1f066:	b672      	cpsid	i
   1f068:	e7fe      	b.n	1f068 <xQueueReceive+0x38>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   1f06a:	4b4c      	ldr	r3, [pc, #304]	; (1f19c <xQueueReceive+0x16c>)
   1f06c:	4798      	blx	r3
   1f06e:	1e03      	subs	r3, r0, #0
   1f070:	d102      	bne.n	1f078 <xQueueReceive+0x48>
   1f072:	687b      	ldr	r3, [r7, #4]
   1f074:	2b00      	cmp	r3, #0
   1f076:	d101      	bne.n	1f07c <xQueueReceive+0x4c>
   1f078:	2301      	movs	r3, #1
   1f07a:	e000      	b.n	1f07e <xQueueReceive+0x4e>
   1f07c:	2300      	movs	r3, #0
   1f07e:	2b00      	cmp	r3, #0
   1f080:	d101      	bne.n	1f086 <xQueueReceive+0x56>
   1f082:	b672      	cpsid	i
   1f084:	e7fe      	b.n	1f084 <xQueueReceive+0x54>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
   1f086:	4b46      	ldr	r3, [pc, #280]	; (1f1a0 <xQueueReceive+0x170>)
   1f088:	4798      	blx	r3
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
   1f08a:	6a3b      	ldr	r3, [r7, #32]
   1f08c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1f08e:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
   1f090:	69fb      	ldr	r3, [r7, #28]
   1f092:	2b00      	cmp	r3, #0
   1f094:	d01a      	beq.n	1f0cc <xQueueReceive+0x9c>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
   1f096:	68ba      	ldr	r2, [r7, #8]
   1f098:	6a3b      	ldr	r3, [r7, #32]
   1f09a:	0011      	movs	r1, r2
   1f09c:	0018      	movs	r0, r3
   1f09e:	4b41      	ldr	r3, [pc, #260]	; (1f1a4 <xQueueReceive+0x174>)
   1f0a0:	4798      	blx	r3
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
   1f0a2:	69fb      	ldr	r3, [r7, #28]
   1f0a4:	1e5a      	subs	r2, r3, #1
   1f0a6:	6a3b      	ldr	r3, [r7, #32]
   1f0a8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   1f0aa:	6a3b      	ldr	r3, [r7, #32]
   1f0ac:	691b      	ldr	r3, [r3, #16]
   1f0ae:	2b00      	cmp	r3, #0
   1f0b0:	d008      	beq.n	1f0c4 <xQueueReceive+0x94>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1f0b2:	6a3b      	ldr	r3, [r7, #32]
   1f0b4:	3310      	adds	r3, #16
   1f0b6:	0018      	movs	r0, r3
   1f0b8:	4b3b      	ldr	r3, [pc, #236]	; (1f1a8 <xQueueReceive+0x178>)
   1f0ba:	4798      	blx	r3
   1f0bc:	1e03      	subs	r3, r0, #0
   1f0be:	d001      	beq.n	1f0c4 <xQueueReceive+0x94>
					{
						queueYIELD_IF_USING_PREEMPTION();
   1f0c0:	4b3a      	ldr	r3, [pc, #232]	; (1f1ac <xQueueReceive+0x17c>)
   1f0c2:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
   1f0c4:	4b3a      	ldr	r3, [pc, #232]	; (1f1b0 <xQueueReceive+0x180>)
   1f0c6:	4798      	blx	r3
				return pdPASS;
   1f0c8:	2301      	movs	r3, #1
   1f0ca:	e062      	b.n	1f192 <xQueueReceive+0x162>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
   1f0cc:	687b      	ldr	r3, [r7, #4]
   1f0ce:	2b00      	cmp	r3, #0
   1f0d0:	d103      	bne.n	1f0da <xQueueReceive+0xaa>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   1f0d2:	4b37      	ldr	r3, [pc, #220]	; (1f1b0 <xQueueReceive+0x180>)
   1f0d4:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
   1f0d6:	2300      	movs	r3, #0
   1f0d8:	e05b      	b.n	1f192 <xQueueReceive+0x162>
				}
				else if( xEntryTimeSet == pdFALSE )
   1f0da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1f0dc:	2b00      	cmp	r3, #0
   1f0de:	d106      	bne.n	1f0ee <xQueueReceive+0xbe>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
   1f0e0:	2314      	movs	r3, #20
   1f0e2:	18fb      	adds	r3, r7, r3
   1f0e4:	0018      	movs	r0, r3
   1f0e6:	4b33      	ldr	r3, [pc, #204]	; (1f1b4 <xQueueReceive+0x184>)
   1f0e8:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
   1f0ea:	2301      	movs	r3, #1
   1f0ec:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
   1f0ee:	4b30      	ldr	r3, [pc, #192]	; (1f1b0 <xQueueReceive+0x180>)
   1f0f0:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   1f0f2:	4b31      	ldr	r3, [pc, #196]	; (1f1b8 <xQueueReceive+0x188>)
   1f0f4:	4798      	blx	r3
		prvLockQueue( pxQueue );
   1f0f6:	4b2a      	ldr	r3, [pc, #168]	; (1f1a0 <xQueueReceive+0x170>)
   1f0f8:	4798      	blx	r3
   1f0fa:	6a3b      	ldr	r3, [r7, #32]
   1f0fc:	2244      	movs	r2, #68	; 0x44
   1f0fe:	5c9b      	ldrb	r3, [r3, r2]
   1f100:	b25b      	sxtb	r3, r3
   1f102:	3301      	adds	r3, #1
   1f104:	d103      	bne.n	1f10e <xQueueReceive+0xde>
   1f106:	6a3b      	ldr	r3, [r7, #32]
   1f108:	2244      	movs	r2, #68	; 0x44
   1f10a:	2100      	movs	r1, #0
   1f10c:	5499      	strb	r1, [r3, r2]
   1f10e:	6a3b      	ldr	r3, [r7, #32]
   1f110:	2245      	movs	r2, #69	; 0x45
   1f112:	5c9b      	ldrb	r3, [r3, r2]
   1f114:	b25b      	sxtb	r3, r3
   1f116:	3301      	adds	r3, #1
   1f118:	d103      	bne.n	1f122 <xQueueReceive+0xf2>
   1f11a:	6a3b      	ldr	r3, [r7, #32]
   1f11c:	2245      	movs	r2, #69	; 0x45
   1f11e:	2100      	movs	r1, #0
   1f120:	5499      	strb	r1, [r3, r2]
   1f122:	4b23      	ldr	r3, [pc, #140]	; (1f1b0 <xQueueReceive+0x180>)
   1f124:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   1f126:	1d3a      	adds	r2, r7, #4
   1f128:	2314      	movs	r3, #20
   1f12a:	18fb      	adds	r3, r7, r3
   1f12c:	0011      	movs	r1, r2
   1f12e:	0018      	movs	r0, r3
   1f130:	4b22      	ldr	r3, [pc, #136]	; (1f1bc <xQueueReceive+0x18c>)
   1f132:	4798      	blx	r3
   1f134:	1e03      	subs	r3, r0, #0
   1f136:	d11e      	bne.n	1f176 <xQueueReceive+0x146>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   1f138:	6a3b      	ldr	r3, [r7, #32]
   1f13a:	0018      	movs	r0, r3
   1f13c:	4b20      	ldr	r3, [pc, #128]	; (1f1c0 <xQueueReceive+0x190>)
   1f13e:	4798      	blx	r3
   1f140:	1e03      	subs	r3, r0, #0
   1f142:	d011      	beq.n	1f168 <xQueueReceive+0x138>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   1f144:	6a3b      	ldr	r3, [r7, #32]
   1f146:	3324      	adds	r3, #36	; 0x24
   1f148:	687a      	ldr	r2, [r7, #4]
   1f14a:	0011      	movs	r1, r2
   1f14c:	0018      	movs	r0, r3
   1f14e:	4b1d      	ldr	r3, [pc, #116]	; (1f1c4 <xQueueReceive+0x194>)
   1f150:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
   1f152:	6a3b      	ldr	r3, [r7, #32]
   1f154:	0018      	movs	r0, r3
   1f156:	4b1c      	ldr	r3, [pc, #112]	; (1f1c8 <xQueueReceive+0x198>)
   1f158:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   1f15a:	4b1c      	ldr	r3, [pc, #112]	; (1f1cc <xQueueReceive+0x19c>)
   1f15c:	4798      	blx	r3
   1f15e:	1e03      	subs	r3, r0, #0
   1f160:	d191      	bne.n	1f086 <xQueueReceive+0x56>
				{
					portYIELD_WITHIN_API();
   1f162:	4b12      	ldr	r3, [pc, #72]	; (1f1ac <xQueueReceive+0x17c>)
   1f164:	4798      	blx	r3
   1f166:	e78e      	b.n	1f086 <xQueueReceive+0x56>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
   1f168:	6a3b      	ldr	r3, [r7, #32]
   1f16a:	0018      	movs	r0, r3
   1f16c:	4b16      	ldr	r3, [pc, #88]	; (1f1c8 <xQueueReceive+0x198>)
   1f16e:	4798      	blx	r3
				( void ) xTaskResumeAll();
   1f170:	4b16      	ldr	r3, [pc, #88]	; (1f1cc <xQueueReceive+0x19c>)
   1f172:	4798      	blx	r3
   1f174:	e787      	b.n	1f086 <xQueueReceive+0x56>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
   1f176:	6a3b      	ldr	r3, [r7, #32]
   1f178:	0018      	movs	r0, r3
   1f17a:	4b13      	ldr	r3, [pc, #76]	; (1f1c8 <xQueueReceive+0x198>)
   1f17c:	4798      	blx	r3
			( void ) xTaskResumeAll();
   1f17e:	4b13      	ldr	r3, [pc, #76]	; (1f1cc <xQueueReceive+0x19c>)
   1f180:	4798      	blx	r3

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   1f182:	6a3b      	ldr	r3, [r7, #32]
   1f184:	0018      	movs	r0, r3
   1f186:	4b0e      	ldr	r3, [pc, #56]	; (1f1c0 <xQueueReceive+0x190>)
   1f188:	4798      	blx	r3
   1f18a:	1e03      	subs	r3, r0, #0
   1f18c:	d100      	bne.n	1f190 <xQueueReceive+0x160>
   1f18e:	e77a      	b.n	1f086 <xQueueReceive+0x56>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
   1f190:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
   1f192:	0018      	movs	r0, r3
   1f194:	46bd      	mov	sp, r7
   1f196:	b00a      	add	sp, #40	; 0x28
   1f198:	bd80      	pop	{r7, pc}
   1f19a:	46c0      	nop			; (mov r8, r8)
   1f19c:	00020461 	.word	0x00020461
   1f1a0:	0001e8c1 	.word	0x0001e8c1
   1f1a4:	0001f4d1 	.word	0x0001f4d1
   1f1a8:	00020129 	.word	0x00020129
   1f1ac:	0001e8a1 	.word	0x0001e8a1
   1f1b0:	0001e8e5 	.word	0x0001e8e5
   1f1b4:	000201e9 	.word	0x000201e9
   1f1b8:	0001fcf1 	.word	0x0001fcf1
   1f1bc:	00020211 	.word	0x00020211
   1f1c0:	0001f611 	.word	0x0001f611
   1f1c4:	00020091 	.word	0x00020091
   1f1c8:	0001f521 	.word	0x0001f521
   1f1cc:	0001fd09 	.word	0x0001fd09

0001f1d0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
   1f1d0:	b580      	push	{r7, lr}
   1f1d2:	b08a      	sub	sp, #40	; 0x28
   1f1d4:	af00      	add	r7, sp, #0
   1f1d6:	6078      	str	r0, [r7, #4]
   1f1d8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
   1f1da:	2300      	movs	r3, #0
   1f1dc:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1f1de:	687b      	ldr	r3, [r7, #4]
   1f1e0:	61fb      	str	r3, [r7, #28]

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
   1f1e2:	2300      	movs	r3, #0
   1f1e4:	623b      	str	r3, [r7, #32]
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
   1f1e6:	69fb      	ldr	r3, [r7, #28]
   1f1e8:	2b00      	cmp	r3, #0
   1f1ea:	d101      	bne.n	1f1f0 <xQueueSemaphoreTake+0x20>
   1f1ec:	b672      	cpsid	i
   1f1ee:	e7fe      	b.n	1f1ee <xQueueSemaphoreTake+0x1e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
   1f1f0:	69fb      	ldr	r3, [r7, #28]
   1f1f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1f1f4:	2b00      	cmp	r3, #0
   1f1f6:	d001      	beq.n	1f1fc <xQueueSemaphoreTake+0x2c>
   1f1f8:	b672      	cpsid	i
   1f1fa:	e7fe      	b.n	1f1fa <xQueueSemaphoreTake+0x2a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   1f1fc:	4b61      	ldr	r3, [pc, #388]	; (1f384 <xQueueSemaphoreTake+0x1b4>)
   1f1fe:	4798      	blx	r3
   1f200:	1e03      	subs	r3, r0, #0
   1f202:	d102      	bne.n	1f20a <xQueueSemaphoreTake+0x3a>
   1f204:	683b      	ldr	r3, [r7, #0]
   1f206:	2b00      	cmp	r3, #0
   1f208:	d101      	bne.n	1f20e <xQueueSemaphoreTake+0x3e>
   1f20a:	2301      	movs	r3, #1
   1f20c:	e000      	b.n	1f210 <xQueueSemaphoreTake+0x40>
   1f20e:	2300      	movs	r3, #0
   1f210:	2b00      	cmp	r3, #0
   1f212:	d101      	bne.n	1f218 <xQueueSemaphoreTake+0x48>
   1f214:	b672      	cpsid	i
   1f216:	e7fe      	b.n	1f216 <xQueueSemaphoreTake+0x46>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
   1f218:	4b5b      	ldr	r3, [pc, #364]	; (1f388 <xQueueSemaphoreTake+0x1b8>)
   1f21a:	4798      	blx	r3
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
   1f21c:	69fb      	ldr	r3, [r7, #28]
   1f21e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1f220:	61bb      	str	r3, [r7, #24]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
   1f222:	69bb      	ldr	r3, [r7, #24]
   1f224:	2b00      	cmp	r3, #0
   1f226:	d01d      	beq.n	1f264 <xQueueSemaphoreTake+0x94>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
   1f228:	69bb      	ldr	r3, [r7, #24]
   1f22a:	1e5a      	subs	r2, r3, #1
   1f22c:	69fb      	ldr	r3, [r7, #28]
   1f22e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   1f230:	69fb      	ldr	r3, [r7, #28]
   1f232:	681b      	ldr	r3, [r3, #0]
   1f234:	2b00      	cmp	r3, #0
   1f236:	d104      	bne.n	1f242 <xQueueSemaphoreTake+0x72>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
   1f238:	4b54      	ldr	r3, [pc, #336]	; (1f38c <xQueueSemaphoreTake+0x1bc>)
   1f23a:	4798      	blx	r3
   1f23c:	0002      	movs	r2, r0
   1f23e:	69fb      	ldr	r3, [r7, #28]
   1f240:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   1f242:	69fb      	ldr	r3, [r7, #28]
   1f244:	691b      	ldr	r3, [r3, #16]
   1f246:	2b00      	cmp	r3, #0
   1f248:	d008      	beq.n	1f25c <xQueueSemaphoreTake+0x8c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1f24a:	69fb      	ldr	r3, [r7, #28]
   1f24c:	3310      	adds	r3, #16
   1f24e:	0018      	movs	r0, r3
   1f250:	4b4f      	ldr	r3, [pc, #316]	; (1f390 <xQueueSemaphoreTake+0x1c0>)
   1f252:	4798      	blx	r3
   1f254:	1e03      	subs	r3, r0, #0
   1f256:	d001      	beq.n	1f25c <xQueueSemaphoreTake+0x8c>
					{
						queueYIELD_IF_USING_PREEMPTION();
   1f258:	4b4e      	ldr	r3, [pc, #312]	; (1f394 <xQueueSemaphoreTake+0x1c4>)
   1f25a:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
   1f25c:	4b4e      	ldr	r3, [pc, #312]	; (1f398 <xQueueSemaphoreTake+0x1c8>)
   1f25e:	4798      	blx	r3
				return pdPASS;
   1f260:	2301      	movs	r3, #1
   1f262:	e08b      	b.n	1f37c <xQueueSemaphoreTake+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
   1f264:	683b      	ldr	r3, [r7, #0]
   1f266:	2b00      	cmp	r3, #0
   1f268:	d108      	bne.n	1f27c <xQueueSemaphoreTake+0xac>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
   1f26a:	6a3b      	ldr	r3, [r7, #32]
   1f26c:	2b00      	cmp	r3, #0
   1f26e:	d001      	beq.n	1f274 <xQueueSemaphoreTake+0xa4>
   1f270:	b672      	cpsid	i
   1f272:	e7fe      	b.n	1f272 <xQueueSemaphoreTake+0xa2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
   1f274:	4b48      	ldr	r3, [pc, #288]	; (1f398 <xQueueSemaphoreTake+0x1c8>)
   1f276:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
   1f278:	2300      	movs	r3, #0
   1f27a:	e07f      	b.n	1f37c <xQueueSemaphoreTake+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
   1f27c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1f27e:	2b00      	cmp	r3, #0
   1f280:	d106      	bne.n	1f290 <xQueueSemaphoreTake+0xc0>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
   1f282:	230c      	movs	r3, #12
   1f284:	18fb      	adds	r3, r7, r3
   1f286:	0018      	movs	r0, r3
   1f288:	4b44      	ldr	r3, [pc, #272]	; (1f39c <xQueueSemaphoreTake+0x1cc>)
   1f28a:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
   1f28c:	2301      	movs	r3, #1
   1f28e:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
   1f290:	4b41      	ldr	r3, [pc, #260]	; (1f398 <xQueueSemaphoreTake+0x1c8>)
   1f292:	4798      	blx	r3

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
   1f294:	4b42      	ldr	r3, [pc, #264]	; (1f3a0 <xQueueSemaphoreTake+0x1d0>)
   1f296:	4798      	blx	r3
		prvLockQueue( pxQueue );
   1f298:	4b3b      	ldr	r3, [pc, #236]	; (1f388 <xQueueSemaphoreTake+0x1b8>)
   1f29a:	4798      	blx	r3
   1f29c:	69fb      	ldr	r3, [r7, #28]
   1f29e:	2244      	movs	r2, #68	; 0x44
   1f2a0:	5c9b      	ldrb	r3, [r3, r2]
   1f2a2:	b25b      	sxtb	r3, r3
   1f2a4:	3301      	adds	r3, #1
   1f2a6:	d103      	bne.n	1f2b0 <xQueueSemaphoreTake+0xe0>
   1f2a8:	69fb      	ldr	r3, [r7, #28]
   1f2aa:	2244      	movs	r2, #68	; 0x44
   1f2ac:	2100      	movs	r1, #0
   1f2ae:	5499      	strb	r1, [r3, r2]
   1f2b0:	69fb      	ldr	r3, [r7, #28]
   1f2b2:	2245      	movs	r2, #69	; 0x45
   1f2b4:	5c9b      	ldrb	r3, [r3, r2]
   1f2b6:	b25b      	sxtb	r3, r3
   1f2b8:	3301      	adds	r3, #1
   1f2ba:	d103      	bne.n	1f2c4 <xQueueSemaphoreTake+0xf4>
   1f2bc:	69fb      	ldr	r3, [r7, #28]
   1f2be:	2245      	movs	r2, #69	; 0x45
   1f2c0:	2100      	movs	r1, #0
   1f2c2:	5499      	strb	r1, [r3, r2]
   1f2c4:	4b34      	ldr	r3, [pc, #208]	; (1f398 <xQueueSemaphoreTake+0x1c8>)
   1f2c6:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   1f2c8:	003a      	movs	r2, r7
   1f2ca:	230c      	movs	r3, #12
   1f2cc:	18fb      	adds	r3, r7, r3
   1f2ce:	0011      	movs	r1, r2
   1f2d0:	0018      	movs	r0, r3
   1f2d2:	4b34      	ldr	r3, [pc, #208]	; (1f3a4 <xQueueSemaphoreTake+0x1d4>)
   1f2d4:	4798      	blx	r3
   1f2d6:	1e03      	subs	r3, r0, #0
   1f2d8:	d12e      	bne.n	1f338 <xQueueSemaphoreTake+0x168>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   1f2da:	69fb      	ldr	r3, [r7, #28]
   1f2dc:	0018      	movs	r0, r3
   1f2de:	4b32      	ldr	r3, [pc, #200]	; (1f3a8 <xQueueSemaphoreTake+0x1d8>)
   1f2e0:	4798      	blx	r3
   1f2e2:	1e03      	subs	r3, r0, #0
   1f2e4:	d021      	beq.n	1f32a <xQueueSemaphoreTake+0x15a>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   1f2e6:	69fb      	ldr	r3, [r7, #28]
   1f2e8:	681b      	ldr	r3, [r3, #0]
   1f2ea:	2b00      	cmp	r3, #0
   1f2ec:	d10a      	bne.n	1f304 <xQueueSemaphoreTake+0x134>
					{
						taskENTER_CRITICAL();
   1f2ee:	4b26      	ldr	r3, [pc, #152]	; (1f388 <xQueueSemaphoreTake+0x1b8>)
   1f2f0:	4798      	blx	r3
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
   1f2f2:	69fb      	ldr	r3, [r7, #28]
   1f2f4:	685b      	ldr	r3, [r3, #4]
   1f2f6:	0018      	movs	r0, r3
   1f2f8:	4b2c      	ldr	r3, [pc, #176]	; (1f3ac <xQueueSemaphoreTake+0x1dc>)
   1f2fa:	4798      	blx	r3
   1f2fc:	0003      	movs	r3, r0
   1f2fe:	623b      	str	r3, [r7, #32]
						}
						taskEXIT_CRITICAL();
   1f300:	4b25      	ldr	r3, [pc, #148]	; (1f398 <xQueueSemaphoreTake+0x1c8>)
   1f302:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   1f304:	69fb      	ldr	r3, [r7, #28]
   1f306:	3324      	adds	r3, #36	; 0x24
   1f308:	683a      	ldr	r2, [r7, #0]
   1f30a:	0011      	movs	r1, r2
   1f30c:	0018      	movs	r0, r3
   1f30e:	4b28      	ldr	r3, [pc, #160]	; (1f3b0 <xQueueSemaphoreTake+0x1e0>)
   1f310:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
   1f312:	69fb      	ldr	r3, [r7, #28]
   1f314:	0018      	movs	r0, r3
   1f316:	4b27      	ldr	r3, [pc, #156]	; (1f3b4 <xQueueSemaphoreTake+0x1e4>)
   1f318:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   1f31a:	4b27      	ldr	r3, [pc, #156]	; (1f3b8 <xQueueSemaphoreTake+0x1e8>)
   1f31c:	4798      	blx	r3
   1f31e:	1e03      	subs	r3, r0, #0
   1f320:	d000      	beq.n	1f324 <xQueueSemaphoreTake+0x154>
   1f322:	e779      	b.n	1f218 <xQueueSemaphoreTake+0x48>
				{
					portYIELD_WITHIN_API();
   1f324:	4b1b      	ldr	r3, [pc, #108]	; (1f394 <xQueueSemaphoreTake+0x1c4>)
   1f326:	4798      	blx	r3
   1f328:	e776      	b.n	1f218 <xQueueSemaphoreTake+0x48>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
   1f32a:	69fb      	ldr	r3, [r7, #28]
   1f32c:	0018      	movs	r0, r3
   1f32e:	4b21      	ldr	r3, [pc, #132]	; (1f3b4 <xQueueSemaphoreTake+0x1e4>)
   1f330:	4798      	blx	r3
				( void ) xTaskResumeAll();
   1f332:	4b21      	ldr	r3, [pc, #132]	; (1f3b8 <xQueueSemaphoreTake+0x1e8>)
   1f334:	4798      	blx	r3
   1f336:	e76f      	b.n	1f218 <xQueueSemaphoreTake+0x48>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
   1f338:	69fb      	ldr	r3, [r7, #28]
   1f33a:	0018      	movs	r0, r3
   1f33c:	4b1d      	ldr	r3, [pc, #116]	; (1f3b4 <xQueueSemaphoreTake+0x1e4>)
   1f33e:	4798      	blx	r3
			( void ) xTaskResumeAll();
   1f340:	4b1d      	ldr	r3, [pc, #116]	; (1f3b8 <xQueueSemaphoreTake+0x1e8>)
   1f342:	4798      	blx	r3

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   1f344:	69fb      	ldr	r3, [r7, #28]
   1f346:	0018      	movs	r0, r3
   1f348:	4b17      	ldr	r3, [pc, #92]	; (1f3a8 <xQueueSemaphoreTake+0x1d8>)
   1f34a:	4798      	blx	r3
   1f34c:	1e03      	subs	r3, r0, #0
   1f34e:	d100      	bne.n	1f352 <xQueueSemaphoreTake+0x182>
   1f350:	e762      	b.n	1f218 <xQueueSemaphoreTake+0x48>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
   1f352:	6a3b      	ldr	r3, [r7, #32]
   1f354:	2b00      	cmp	r3, #0
   1f356:	d010      	beq.n	1f37a <xQueueSemaphoreTake+0x1aa>
					{
						taskENTER_CRITICAL();
   1f358:	4b0b      	ldr	r3, [pc, #44]	; (1f388 <xQueueSemaphoreTake+0x1b8>)
   1f35a:	4798      	blx	r3
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
   1f35c:	69fb      	ldr	r3, [r7, #28]
   1f35e:	0018      	movs	r0, r3
   1f360:	4b16      	ldr	r3, [pc, #88]	; (1f3bc <xQueueSemaphoreTake+0x1ec>)
   1f362:	4798      	blx	r3
   1f364:	0003      	movs	r3, r0
   1f366:	617b      	str	r3, [r7, #20]
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
   1f368:	69fb      	ldr	r3, [r7, #28]
   1f36a:	685b      	ldr	r3, [r3, #4]
   1f36c:	697a      	ldr	r2, [r7, #20]
   1f36e:	0011      	movs	r1, r2
   1f370:	0018      	movs	r0, r3
   1f372:	4b13      	ldr	r3, [pc, #76]	; (1f3c0 <xQueueSemaphoreTake+0x1f0>)
   1f374:	4798      	blx	r3
						}
						taskEXIT_CRITICAL();
   1f376:	4b08      	ldr	r3, [pc, #32]	; (1f398 <xQueueSemaphoreTake+0x1c8>)
   1f378:	4798      	blx	r3
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
   1f37a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
   1f37c:	0018      	movs	r0, r3
   1f37e:	46bd      	mov	sp, r7
   1f380:	b00a      	add	sp, #40	; 0x28
   1f382:	bd80      	pop	{r7, pc}
   1f384:	00020461 	.word	0x00020461
   1f388:	0001e8c1 	.word	0x0001e8c1
   1f38c:	0002072d 	.word	0x0002072d
   1f390:	00020129 	.word	0x00020129
   1f394:	0001e8a1 	.word	0x0001e8a1
   1f398:	0001e8e5 	.word	0x0001e8e5
   1f39c:	000201e9 	.word	0x000201e9
   1f3a0:	0001fcf1 	.word	0x0001fcf1
   1f3a4:	00020211 	.word	0x00020211
   1f3a8:	0001f611 	.word	0x0001f611
   1f3ac:	00020499 	.word	0x00020499
   1f3b0:	00020091 	.word	0x00020091
   1f3b4:	0001f521 	.word	0x0001f521
   1f3b8:	0001fd09 	.word	0x0001fd09
   1f3bc:	0001f3c5 	.word	0x0001f3c5
   1f3c0:	0002063d 	.word	0x0002063d

0001f3c4 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
   1f3c4:	b580      	push	{r7, lr}
   1f3c6:	b084      	sub	sp, #16
   1f3c8:	af00      	add	r7, sp, #0
   1f3ca:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
   1f3cc:	687b      	ldr	r3, [r7, #4]
   1f3ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1f3d0:	2b00      	cmp	r3, #0
   1f3d2:	d006      	beq.n	1f3e2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
   1f3d4:	687b      	ldr	r3, [r7, #4]
   1f3d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1f3d8:	681b      	ldr	r3, [r3, #0]
   1f3da:	2205      	movs	r2, #5
   1f3dc:	1ad3      	subs	r3, r2, r3
   1f3de:	60fb      	str	r3, [r7, #12]
   1f3e0:	e001      	b.n	1f3e6 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
   1f3e2:	2300      	movs	r3, #0
   1f3e4:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
   1f3e6:	68fb      	ldr	r3, [r7, #12]
	}
   1f3e8:	0018      	movs	r0, r3
   1f3ea:	46bd      	mov	sp, r7
   1f3ec:	b004      	add	sp, #16
   1f3ee:	bd80      	pop	{r7, pc}

0001f3f0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
   1f3f0:	b580      	push	{r7, lr}
   1f3f2:	b086      	sub	sp, #24
   1f3f4:	af00      	add	r7, sp, #0
   1f3f6:	60f8      	str	r0, [r7, #12]
   1f3f8:	60b9      	str	r1, [r7, #8]
   1f3fa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
   1f3fc:	2300      	movs	r3, #0
   1f3fe:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
   1f400:	68fb      	ldr	r3, [r7, #12]
   1f402:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1f404:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
   1f406:	68fb      	ldr	r3, [r7, #12]
   1f408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1f40a:	2b00      	cmp	r3, #0
   1f40c:	d10e      	bne.n	1f42c <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   1f40e:	68fb      	ldr	r3, [r7, #12]
   1f410:	681b      	ldr	r3, [r3, #0]
   1f412:	2b00      	cmp	r3, #0
   1f414:	d14e      	bne.n	1f4b4 <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
   1f416:	68fb      	ldr	r3, [r7, #12]
   1f418:	685b      	ldr	r3, [r3, #4]
   1f41a:	0018      	movs	r0, r3
   1f41c:	4b2a      	ldr	r3, [pc, #168]	; (1f4c8 <prvCopyDataToQueue+0xd8>)
   1f41e:	4798      	blx	r3
   1f420:	0003      	movs	r3, r0
   1f422:	617b      	str	r3, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
   1f424:	68fb      	ldr	r3, [r7, #12]
   1f426:	2200      	movs	r2, #0
   1f428:	605a      	str	r2, [r3, #4]
   1f42a:	e043      	b.n	1f4b4 <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
   1f42c:	687b      	ldr	r3, [r7, #4]
   1f42e:	2b00      	cmp	r3, #0
   1f430:	d119      	bne.n	1f466 <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
   1f432:	68fb      	ldr	r3, [r7, #12]
   1f434:	6898      	ldr	r0, [r3, #8]
   1f436:	68fb      	ldr	r3, [r7, #12]
   1f438:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   1f43a:	68bb      	ldr	r3, [r7, #8]
   1f43c:	0019      	movs	r1, r3
   1f43e:	4b23      	ldr	r3, [pc, #140]	; (1f4cc <prvCopyDataToQueue+0xdc>)
   1f440:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
   1f442:	68fb      	ldr	r3, [r7, #12]
   1f444:	689a      	ldr	r2, [r3, #8]
   1f446:	68fb      	ldr	r3, [r7, #12]
   1f448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1f44a:	18d2      	adds	r2, r2, r3
   1f44c:	68fb      	ldr	r3, [r7, #12]
   1f44e:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   1f450:	68fb      	ldr	r3, [r7, #12]
   1f452:	689a      	ldr	r2, [r3, #8]
   1f454:	68fb      	ldr	r3, [r7, #12]
   1f456:	685b      	ldr	r3, [r3, #4]
   1f458:	429a      	cmp	r2, r3
   1f45a:	d32b      	bcc.n	1f4b4 <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
   1f45c:	68fb      	ldr	r3, [r7, #12]
   1f45e:	681a      	ldr	r2, [r3, #0]
   1f460:	68fb      	ldr	r3, [r7, #12]
   1f462:	609a      	str	r2, [r3, #8]
   1f464:	e026      	b.n	1f4b4 <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1f466:	68fb      	ldr	r3, [r7, #12]
   1f468:	68d8      	ldr	r0, [r3, #12]
   1f46a:	68fb      	ldr	r3, [r7, #12]
   1f46c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   1f46e:	68bb      	ldr	r3, [r7, #8]
   1f470:	0019      	movs	r1, r3
   1f472:	4b16      	ldr	r3, [pc, #88]	; (1f4cc <prvCopyDataToQueue+0xdc>)
   1f474:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
   1f476:	68fb      	ldr	r3, [r7, #12]
   1f478:	68da      	ldr	r2, [r3, #12]
   1f47a:	68fb      	ldr	r3, [r7, #12]
   1f47c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1f47e:	425b      	negs	r3, r3
   1f480:	18d2      	adds	r2, r2, r3
   1f482:	68fb      	ldr	r3, [r7, #12]
   1f484:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   1f486:	68fb      	ldr	r3, [r7, #12]
   1f488:	68da      	ldr	r2, [r3, #12]
   1f48a:	68fb      	ldr	r3, [r7, #12]
   1f48c:	681b      	ldr	r3, [r3, #0]
   1f48e:	429a      	cmp	r2, r3
   1f490:	d207      	bcs.n	1f4a2 <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
   1f492:	68fb      	ldr	r3, [r7, #12]
   1f494:	685a      	ldr	r2, [r3, #4]
   1f496:	68fb      	ldr	r3, [r7, #12]
   1f498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1f49a:	425b      	negs	r3, r3
   1f49c:	18d2      	adds	r2, r2, r3
   1f49e:	68fb      	ldr	r3, [r7, #12]
   1f4a0:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
   1f4a2:	687b      	ldr	r3, [r7, #4]
   1f4a4:	2b02      	cmp	r3, #2
   1f4a6:	d105      	bne.n	1f4b4 <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
   1f4a8:	693b      	ldr	r3, [r7, #16]
   1f4aa:	2b00      	cmp	r3, #0
   1f4ac:	d002      	beq.n	1f4b4 <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
   1f4ae:	693b      	ldr	r3, [r7, #16]
   1f4b0:	3b01      	subs	r3, #1
   1f4b2:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
   1f4b4:	693b      	ldr	r3, [r7, #16]
   1f4b6:	1c5a      	adds	r2, r3, #1
   1f4b8:	68fb      	ldr	r3, [r7, #12]
   1f4ba:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
   1f4bc:	697b      	ldr	r3, [r7, #20]
}
   1f4be:	0018      	movs	r0, r3
   1f4c0:	46bd      	mov	sp, r7
   1f4c2:	b006      	add	sp, #24
   1f4c4:	bd80      	pop	{r7, pc}
   1f4c6:	46c0      	nop			; (mov r8, r8)
   1f4c8:	0002057d 	.word	0x0002057d
   1f4cc:	000289c5 	.word	0x000289c5

0001f4d0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
   1f4d0:	b580      	push	{r7, lr}
   1f4d2:	b082      	sub	sp, #8
   1f4d4:	af00      	add	r7, sp, #0
   1f4d6:	6078      	str	r0, [r7, #4]
   1f4d8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
   1f4da:	687b      	ldr	r3, [r7, #4]
   1f4dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1f4de:	2b00      	cmp	r3, #0
   1f4e0:	d018      	beq.n	1f514 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
   1f4e2:	687b      	ldr	r3, [r7, #4]
   1f4e4:	68da      	ldr	r2, [r3, #12]
   1f4e6:	687b      	ldr	r3, [r7, #4]
   1f4e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1f4ea:	18d2      	adds	r2, r2, r3
   1f4ec:	687b      	ldr	r3, [r7, #4]
   1f4ee:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
   1f4f0:	687b      	ldr	r3, [r7, #4]
   1f4f2:	68da      	ldr	r2, [r3, #12]
   1f4f4:	687b      	ldr	r3, [r7, #4]
   1f4f6:	685b      	ldr	r3, [r3, #4]
   1f4f8:	429a      	cmp	r2, r3
   1f4fa:	d303      	bcc.n	1f504 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
   1f4fc:	687b      	ldr	r3, [r7, #4]
   1f4fe:	681a      	ldr	r2, [r3, #0]
   1f500:	687b      	ldr	r3, [r7, #4]
   1f502:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
   1f504:	687b      	ldr	r3, [r7, #4]
   1f506:	68d9      	ldr	r1, [r3, #12]
   1f508:	687b      	ldr	r3, [r7, #4]
   1f50a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   1f50c:	683b      	ldr	r3, [r7, #0]
   1f50e:	0018      	movs	r0, r3
   1f510:	4b02      	ldr	r3, [pc, #8]	; (1f51c <prvCopyDataFromQueue+0x4c>)
   1f512:	4798      	blx	r3
	}
}
   1f514:	46c0      	nop			; (mov r8, r8)
   1f516:	46bd      	mov	sp, r7
   1f518:	b002      	add	sp, #8
   1f51a:	bd80      	pop	{r7, pc}
   1f51c:	000289c5 	.word	0x000289c5

0001f520 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
   1f520:	b580      	push	{r7, lr}
   1f522:	b084      	sub	sp, #16
   1f524:	af00      	add	r7, sp, #0
   1f526:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
   1f528:	4b34      	ldr	r3, [pc, #208]	; (1f5fc <prvUnlockQueue+0xdc>)
   1f52a:	4798      	blx	r3
	{
		int8_t cTxLock = pxQueue->cTxLock;
   1f52c:	230f      	movs	r3, #15
   1f52e:	18fb      	adds	r3, r7, r3
   1f530:	687a      	ldr	r2, [r7, #4]
   1f532:	2145      	movs	r1, #69	; 0x45
   1f534:	5c52      	ldrb	r2, [r2, r1]
   1f536:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
   1f538:	e022      	b.n	1f580 <prvUnlockQueue+0x60>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			#if ( configUSE_QUEUE_SETS == 1 )
			{
				if( pxQueue->pxQueueSetContainer != NULL )
   1f53a:	687b      	ldr	r3, [r7, #4]
   1f53c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1f53e:	2b00      	cmp	r3, #0
   1f540:	d009      	beq.n	1f556 <prvUnlockQueue+0x36>
				{
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
   1f542:	687b      	ldr	r3, [r7, #4]
   1f544:	2100      	movs	r1, #0
   1f546:	0018      	movs	r0, r3
   1f548:	4b2d      	ldr	r3, [pc, #180]	; (1f600 <prvUnlockQueue+0xe0>)
   1f54a:	4798      	blx	r3
   1f54c:	1e03      	subs	r3, r0, #0
   1f54e:	d00f      	beq.n	1f570 <prvUnlockQueue+0x50>
					{
						/* The queue is a member of a queue set, and posting to
						the queue set caused a higher priority task to unblock.
						A context switch is required. */
						vTaskMissedYield();
   1f550:	4b2c      	ldr	r3, [pc, #176]	; (1f604 <prvUnlockQueue+0xe4>)
   1f552:	4798      	blx	r3
   1f554:	e00c      	b.n	1f570 <prvUnlockQueue+0x50>
				else
				{
					/* Tasks that are removed from the event list will get
					added to the pending ready list as the scheduler is still
					suspended. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   1f556:	687b      	ldr	r3, [r7, #4]
   1f558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1f55a:	2b00      	cmp	r3, #0
   1f55c:	d017      	beq.n	1f58e <prvUnlockQueue+0x6e>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1f55e:	687b      	ldr	r3, [r7, #4]
   1f560:	3324      	adds	r3, #36	; 0x24
   1f562:	0018      	movs	r0, r3
   1f564:	4b28      	ldr	r3, [pc, #160]	; (1f608 <prvUnlockQueue+0xe8>)
   1f566:	4798      	blx	r3
   1f568:	1e03      	subs	r3, r0, #0
   1f56a:	d001      	beq.n	1f570 <prvUnlockQueue+0x50>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							vTaskMissedYield();
   1f56c:	4b25      	ldr	r3, [pc, #148]	; (1f604 <prvUnlockQueue+0xe4>)
   1f56e:	4798      	blx	r3
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
   1f570:	230f      	movs	r3, #15
   1f572:	18fb      	adds	r3, r7, r3
   1f574:	781b      	ldrb	r3, [r3, #0]
   1f576:	3b01      	subs	r3, #1
   1f578:	b2da      	uxtb	r2, r3
   1f57a:	230f      	movs	r3, #15
   1f57c:	18fb      	adds	r3, r7, r3
   1f57e:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
   1f580:	230f      	movs	r3, #15
   1f582:	18fb      	adds	r3, r7, r3
   1f584:	781b      	ldrb	r3, [r3, #0]
   1f586:	b25b      	sxtb	r3, r3
   1f588:	2b00      	cmp	r3, #0
   1f58a:	dcd6      	bgt.n	1f53a <prvUnlockQueue+0x1a>
   1f58c:	e000      	b.n	1f590 <prvUnlockQueue+0x70>
						break;
   1f58e:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
   1f590:	687b      	ldr	r3, [r7, #4]
   1f592:	2245      	movs	r2, #69	; 0x45
   1f594:	21ff      	movs	r1, #255	; 0xff
   1f596:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
   1f598:	4b1c      	ldr	r3, [pc, #112]	; (1f60c <prvUnlockQueue+0xec>)
   1f59a:	4798      	blx	r3

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
   1f59c:	4b17      	ldr	r3, [pc, #92]	; (1f5fc <prvUnlockQueue+0xdc>)
   1f59e:	4798      	blx	r3
	{
		int8_t cRxLock = pxQueue->cRxLock;
   1f5a0:	230e      	movs	r3, #14
   1f5a2:	18fb      	adds	r3, r7, r3
   1f5a4:	687a      	ldr	r2, [r7, #4]
   1f5a6:	2144      	movs	r1, #68	; 0x44
   1f5a8:	5c52      	ldrb	r2, [r2, r1]
   1f5aa:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
   1f5ac:	e014      	b.n	1f5d8 <prvUnlockQueue+0xb8>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   1f5ae:	687b      	ldr	r3, [r7, #4]
   1f5b0:	691b      	ldr	r3, [r3, #16]
   1f5b2:	2b00      	cmp	r3, #0
   1f5b4:	d017      	beq.n	1f5e6 <prvUnlockQueue+0xc6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1f5b6:	687b      	ldr	r3, [r7, #4]
   1f5b8:	3310      	adds	r3, #16
   1f5ba:	0018      	movs	r0, r3
   1f5bc:	4b12      	ldr	r3, [pc, #72]	; (1f608 <prvUnlockQueue+0xe8>)
   1f5be:	4798      	blx	r3
   1f5c0:	1e03      	subs	r3, r0, #0
   1f5c2:	d001      	beq.n	1f5c8 <prvUnlockQueue+0xa8>
				{
					vTaskMissedYield();
   1f5c4:	4b0f      	ldr	r3, [pc, #60]	; (1f604 <prvUnlockQueue+0xe4>)
   1f5c6:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
   1f5c8:	230e      	movs	r3, #14
   1f5ca:	18fb      	adds	r3, r7, r3
   1f5cc:	781b      	ldrb	r3, [r3, #0]
   1f5ce:	3b01      	subs	r3, #1
   1f5d0:	b2da      	uxtb	r2, r3
   1f5d2:	230e      	movs	r3, #14
   1f5d4:	18fb      	adds	r3, r7, r3
   1f5d6:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
   1f5d8:	230e      	movs	r3, #14
   1f5da:	18fb      	adds	r3, r7, r3
   1f5dc:	781b      	ldrb	r3, [r3, #0]
   1f5de:	b25b      	sxtb	r3, r3
   1f5e0:	2b00      	cmp	r3, #0
   1f5e2:	dce4      	bgt.n	1f5ae <prvUnlockQueue+0x8e>
   1f5e4:	e000      	b.n	1f5e8 <prvUnlockQueue+0xc8>
			}
			else
			{
				break;
   1f5e6:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
   1f5e8:	687b      	ldr	r3, [r7, #4]
   1f5ea:	2244      	movs	r2, #68	; 0x44
   1f5ec:	21ff      	movs	r1, #255	; 0xff
   1f5ee:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
   1f5f0:	4b06      	ldr	r3, [pc, #24]	; (1f60c <prvUnlockQueue+0xec>)
   1f5f2:	4798      	blx	r3
}
   1f5f4:	46c0      	nop			; (mov r8, r8)
   1f5f6:	46bd      	mov	sp, r7
   1f5f8:	b004      	add	sp, #16
   1f5fa:	bd80      	pop	{r7, pc}
   1f5fc:	0001e8c1 	.word	0x0001e8c1
   1f600:	0001f6f5 	.word	0x0001f6f5
   1f604:	000202bd 	.word	0x000202bd
   1f608:	00020129 	.word	0x00020129
   1f60c:	0001e8e5 	.word	0x0001e8e5

0001f610 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
   1f610:	b580      	push	{r7, lr}
   1f612:	b084      	sub	sp, #16
   1f614:	af00      	add	r7, sp, #0
   1f616:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
   1f618:	4b08      	ldr	r3, [pc, #32]	; (1f63c <prvIsQueueEmpty+0x2c>)
   1f61a:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
   1f61c:	687b      	ldr	r3, [r7, #4]
   1f61e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1f620:	2b00      	cmp	r3, #0
   1f622:	d102      	bne.n	1f62a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
   1f624:	2301      	movs	r3, #1
   1f626:	60fb      	str	r3, [r7, #12]
   1f628:	e001      	b.n	1f62e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
   1f62a:	2300      	movs	r3, #0
   1f62c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
   1f62e:	4b04      	ldr	r3, [pc, #16]	; (1f640 <prvIsQueueEmpty+0x30>)
   1f630:	4798      	blx	r3

	return xReturn;
   1f632:	68fb      	ldr	r3, [r7, #12]
}
   1f634:	0018      	movs	r0, r3
   1f636:	46bd      	mov	sp, r7
   1f638:	b004      	add	sp, #16
   1f63a:	bd80      	pop	{r7, pc}
   1f63c:	0001e8c1 	.word	0x0001e8c1
   1f640:	0001e8e5 	.word	0x0001e8e5

0001f644 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
   1f644:	b580      	push	{r7, lr}
   1f646:	b084      	sub	sp, #16
   1f648:	af00      	add	r7, sp, #0
   1f64a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
   1f64c:	4b09      	ldr	r3, [pc, #36]	; (1f674 <prvIsQueueFull+0x30>)
   1f64e:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
   1f650:	687b      	ldr	r3, [r7, #4]
   1f652:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1f654:	687b      	ldr	r3, [r7, #4]
   1f656:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1f658:	429a      	cmp	r2, r3
   1f65a:	d102      	bne.n	1f662 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
   1f65c:	2301      	movs	r3, #1
   1f65e:	60fb      	str	r3, [r7, #12]
   1f660:	e001      	b.n	1f666 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
   1f662:	2300      	movs	r3, #0
   1f664:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
   1f666:	4b04      	ldr	r3, [pc, #16]	; (1f678 <prvIsQueueFull+0x34>)
   1f668:	4798      	blx	r3

	return xReturn;
   1f66a:	68fb      	ldr	r3, [r7, #12]
}
   1f66c:	0018      	movs	r0, r3
   1f66e:	46bd      	mov	sp, r7
   1f670:	b004      	add	sp, #16
   1f672:	bd80      	pop	{r7, pc}
   1f674:	0001e8c1 	.word	0x0001e8c1
   1f678:	0001e8e5 	.word	0x0001e8e5

0001f67c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
   1f67c:	b580      	push	{r7, lr}
   1f67e:	b086      	sub	sp, #24
   1f680:	af00      	add	r7, sp, #0
   1f682:	60f8      	str	r0, [r7, #12]
   1f684:	60b9      	str	r1, [r7, #8]
   1f686:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1f688:	68fb      	ldr	r3, [r7, #12]
   1f68a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
   1f68c:	4b15      	ldr	r3, [pc, #84]	; (1f6e4 <vQueueWaitForMessageRestricted+0x68>)
   1f68e:	4798      	blx	r3
   1f690:	697b      	ldr	r3, [r7, #20]
   1f692:	2244      	movs	r2, #68	; 0x44
   1f694:	5c9b      	ldrb	r3, [r3, r2]
   1f696:	b25b      	sxtb	r3, r3
   1f698:	3301      	adds	r3, #1
   1f69a:	d103      	bne.n	1f6a4 <vQueueWaitForMessageRestricted+0x28>
   1f69c:	697b      	ldr	r3, [r7, #20]
   1f69e:	2244      	movs	r2, #68	; 0x44
   1f6a0:	2100      	movs	r1, #0
   1f6a2:	5499      	strb	r1, [r3, r2]
   1f6a4:	697b      	ldr	r3, [r7, #20]
   1f6a6:	2245      	movs	r2, #69	; 0x45
   1f6a8:	5c9b      	ldrb	r3, [r3, r2]
   1f6aa:	b25b      	sxtb	r3, r3
   1f6ac:	3301      	adds	r3, #1
   1f6ae:	d103      	bne.n	1f6b8 <vQueueWaitForMessageRestricted+0x3c>
   1f6b0:	697b      	ldr	r3, [r7, #20]
   1f6b2:	2245      	movs	r2, #69	; 0x45
   1f6b4:	2100      	movs	r1, #0
   1f6b6:	5499      	strb	r1, [r3, r2]
   1f6b8:	4b0b      	ldr	r3, [pc, #44]	; (1f6e8 <vQueueWaitForMessageRestricted+0x6c>)
   1f6ba:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
   1f6bc:	697b      	ldr	r3, [r7, #20]
   1f6be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1f6c0:	2b00      	cmp	r3, #0
   1f6c2:	d106      	bne.n	1f6d2 <vQueueWaitForMessageRestricted+0x56>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
   1f6c4:	697b      	ldr	r3, [r7, #20]
   1f6c6:	3324      	adds	r3, #36	; 0x24
   1f6c8:	687a      	ldr	r2, [r7, #4]
   1f6ca:	68b9      	ldr	r1, [r7, #8]
   1f6cc:	0018      	movs	r0, r3
   1f6ce:	4b07      	ldr	r3, [pc, #28]	; (1f6ec <vQueueWaitForMessageRestricted+0x70>)
   1f6d0:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
   1f6d2:	697b      	ldr	r3, [r7, #20]
   1f6d4:	0018      	movs	r0, r3
   1f6d6:	4b06      	ldr	r3, [pc, #24]	; (1f6f0 <vQueueWaitForMessageRestricted+0x74>)
   1f6d8:	4798      	blx	r3
	}
   1f6da:	46c0      	nop			; (mov r8, r8)
   1f6dc:	46bd      	mov	sp, r7
   1f6de:	b006      	add	sp, #24
   1f6e0:	bd80      	pop	{r7, pc}
   1f6e2:	46c0      	nop			; (mov r8, r8)
   1f6e4:	0001e8c1 	.word	0x0001e8c1
   1f6e8:	0001e8e5 	.word	0x0001e8e5
   1f6ec:	000200d5 	.word	0x000200d5
   1f6f0:	0001f521 	.word	0x0001f521

0001f6f4 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
   1f6f4:	b580      	push	{r7, lr}
   1f6f6:	b086      	sub	sp, #24
   1f6f8:	af00      	add	r7, sp, #0
   1f6fa:	6078      	str	r0, [r7, #4]
   1f6fc:	6039      	str	r1, [r7, #0]
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
   1f6fe:	687b      	ldr	r3, [r7, #4]
   1f700:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1f702:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
   1f704:	2300      	movs	r3, #0
   1f706:	617b      	str	r3, [r7, #20]

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
   1f708:	693b      	ldr	r3, [r7, #16]
   1f70a:	2b00      	cmp	r3, #0
   1f70c:	d101      	bne.n	1f712 <prvNotifyQueueSetContainer+0x1e>
   1f70e:	b672      	cpsid	i
   1f710:	e7fe      	b.n	1f710 <prvNotifyQueueSetContainer+0x1c>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
   1f712:	693b      	ldr	r3, [r7, #16]
   1f714:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1f716:	693b      	ldr	r3, [r7, #16]
   1f718:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1f71a:	429a      	cmp	r2, r3
   1f71c:	d301      	bcc.n	1f722 <prvNotifyQueueSetContainer+0x2e>
   1f71e:	b672      	cpsid	i
   1f720:	e7fe      	b.n	1f720 <prvNotifyQueueSetContainer+0x2c>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
   1f722:	693b      	ldr	r3, [r7, #16]
   1f724:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1f726:	693b      	ldr	r3, [r7, #16]
   1f728:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1f72a:	429a      	cmp	r2, r3
   1f72c:	d22a      	bcs.n	1f784 <prvNotifyQueueSetContainer+0x90>
		{
			const int8_t cTxLock = pxQueueSetContainer->cTxLock;
   1f72e:	230f      	movs	r3, #15
   1f730:	18fb      	adds	r3, r7, r3
   1f732:	693a      	ldr	r2, [r7, #16]
   1f734:	2145      	movs	r1, #69	; 0x45
   1f736:	5c52      	ldrb	r2, [r2, r1]
   1f738:	701a      	strb	r2, [r3, #0]

			traceQUEUE_SEND( pxQueueSetContainer );

			/* The data copied is the handle of the queue that contains data. */
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
   1f73a:	683a      	ldr	r2, [r7, #0]
   1f73c:	1d39      	adds	r1, r7, #4
   1f73e:	693b      	ldr	r3, [r7, #16]
   1f740:	0018      	movs	r0, r3
   1f742:	4b13      	ldr	r3, [pc, #76]	; (1f790 <prvNotifyQueueSetContainer+0x9c>)
   1f744:	4798      	blx	r3
   1f746:	0003      	movs	r3, r0
   1f748:	617b      	str	r3, [r7, #20]

			if( cTxLock == queueUNLOCKED )
   1f74a:	230f      	movs	r3, #15
   1f74c:	18fb      	adds	r3, r7, r3
   1f74e:	781b      	ldrb	r3, [r3, #0]
   1f750:	b25b      	sxtb	r3, r3
   1f752:	3301      	adds	r3, #1
   1f754:	d10d      	bne.n	1f772 <prvNotifyQueueSetContainer+0x7e>
			{
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
   1f756:	693b      	ldr	r3, [r7, #16]
   1f758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1f75a:	2b00      	cmp	r3, #0
   1f75c:	d012      	beq.n	1f784 <prvNotifyQueueSetContainer+0x90>
				{
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
   1f75e:	693b      	ldr	r3, [r7, #16]
   1f760:	3324      	adds	r3, #36	; 0x24
   1f762:	0018      	movs	r0, r3
   1f764:	4b0b      	ldr	r3, [pc, #44]	; (1f794 <prvNotifyQueueSetContainer+0xa0>)
   1f766:	4798      	blx	r3
   1f768:	1e03      	subs	r3, r0, #0
   1f76a:	d00b      	beq.n	1f784 <prvNotifyQueueSetContainer+0x90>
					{
						/* The task waiting has a higher priority. */
						xReturn = pdTRUE;
   1f76c:	2301      	movs	r3, #1
   1f76e:	617b      	str	r3, [r7, #20]
   1f770:	e008      	b.n	1f784 <prvNotifyQueueSetContainer+0x90>
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else
			{
				pxQueueSetContainer->cTxLock = ( int8_t ) ( cTxLock + 1 );
   1f772:	230f      	movs	r3, #15
   1f774:	18fb      	adds	r3, r7, r3
   1f776:	781b      	ldrb	r3, [r3, #0]
   1f778:	3301      	adds	r3, #1
   1f77a:	b2db      	uxtb	r3, r3
   1f77c:	b259      	sxtb	r1, r3
   1f77e:	693b      	ldr	r3, [r7, #16]
   1f780:	2245      	movs	r2, #69	; 0x45
   1f782:	5499      	strb	r1, [r3, r2]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
   1f784:	697b      	ldr	r3, [r7, #20]
	}
   1f786:	0018      	movs	r0, r3
   1f788:	46bd      	mov	sp, r7
   1f78a:	b006      	add	sp, #24
   1f78c:	bd80      	pop	{r7, pc}
   1f78e:	46c0      	nop			; (mov r8, r8)
   1f790:	0001f3f1 	.word	0x0001f3f1
   1f794:	00020129 	.word	0x00020129

0001f798 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
   1f798:	b590      	push	{r4, r7, lr}
   1f79a:	b08d      	sub	sp, #52	; 0x34
   1f79c:	af04      	add	r7, sp, #16
   1f79e:	60f8      	str	r0, [r7, #12]
   1f7a0:	60b9      	str	r1, [r7, #8]
   1f7a2:	603b      	str	r3, [r7, #0]
   1f7a4:	1dbb      	adds	r3, r7, #6
   1f7a6:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1f7a8:	1dbb      	adds	r3, r7, #6
   1f7aa:	881b      	ldrh	r3, [r3, #0]
   1f7ac:	009b      	lsls	r3, r3, #2
   1f7ae:	0018      	movs	r0, r3
   1f7b0:	4b1d      	ldr	r3, [pc, #116]	; (1f828 <xTaskCreate+0x90>)
   1f7b2:	4798      	blx	r3
   1f7b4:	0003      	movs	r3, r0
   1f7b6:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
   1f7b8:	697b      	ldr	r3, [r7, #20]
   1f7ba:	2b00      	cmp	r3, #0
   1f7bc:	d010      	beq.n	1f7e0 <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
   1f7be:	2050      	movs	r0, #80	; 0x50
   1f7c0:	4b19      	ldr	r3, [pc, #100]	; (1f828 <xTaskCreate+0x90>)
   1f7c2:	4798      	blx	r3
   1f7c4:	0003      	movs	r3, r0
   1f7c6:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
   1f7c8:	69fb      	ldr	r3, [r7, #28]
   1f7ca:	2b00      	cmp	r3, #0
   1f7cc:	d003      	beq.n	1f7d6 <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
   1f7ce:	69fb      	ldr	r3, [r7, #28]
   1f7d0:	697a      	ldr	r2, [r7, #20]
   1f7d2:	631a      	str	r2, [r3, #48]	; 0x30
   1f7d4:	e006      	b.n	1f7e4 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
   1f7d6:	697b      	ldr	r3, [r7, #20]
   1f7d8:	0018      	movs	r0, r3
   1f7da:	4b14      	ldr	r3, [pc, #80]	; (1f82c <xTaskCreate+0x94>)
   1f7dc:	4798      	blx	r3
   1f7de:	e001      	b.n	1f7e4 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
   1f7e0:	2300      	movs	r3, #0
   1f7e2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
   1f7e4:	69fb      	ldr	r3, [r7, #28]
   1f7e6:	2b00      	cmp	r3, #0
   1f7e8:	d016      	beq.n	1f818 <xTaskCreate+0x80>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
   1f7ea:	1dbb      	adds	r3, r7, #6
   1f7ec:	881a      	ldrh	r2, [r3, #0]
   1f7ee:	683c      	ldr	r4, [r7, #0]
   1f7f0:	68b9      	ldr	r1, [r7, #8]
   1f7f2:	68f8      	ldr	r0, [r7, #12]
   1f7f4:	2300      	movs	r3, #0
   1f7f6:	9303      	str	r3, [sp, #12]
   1f7f8:	69fb      	ldr	r3, [r7, #28]
   1f7fa:	9302      	str	r3, [sp, #8]
   1f7fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1f7fe:	9301      	str	r3, [sp, #4]
   1f800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1f802:	9300      	str	r3, [sp, #0]
   1f804:	0023      	movs	r3, r4
   1f806:	4c0a      	ldr	r4, [pc, #40]	; (1f830 <xTaskCreate+0x98>)
   1f808:	47a0      	blx	r4
			prvAddNewTaskToReadyList( pxNewTCB );
   1f80a:	69fb      	ldr	r3, [r7, #28]
   1f80c:	0018      	movs	r0, r3
   1f80e:	4b09      	ldr	r3, [pc, #36]	; (1f834 <xTaskCreate+0x9c>)
   1f810:	4798      	blx	r3
			xReturn = pdPASS;
   1f812:	2301      	movs	r3, #1
   1f814:	61bb      	str	r3, [r7, #24]
   1f816:	e002      	b.n	1f81e <xTaskCreate+0x86>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
   1f818:	2301      	movs	r3, #1
   1f81a:	425b      	negs	r3, r3
   1f81c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
   1f81e:	69bb      	ldr	r3, [r7, #24]
	}
   1f820:	0018      	movs	r0, r3
   1f822:	46bd      	mov	sp, r7
   1f824:	b009      	add	sp, #36	; 0x24
   1f826:	bd90      	pop	{r4, r7, pc}
   1f828:	0001e9fd 	.word	0x0001e9fd
   1f82c:	0001ea31 	.word	0x0001ea31
   1f830:	0001f839 	.word	0x0001f839
   1f834:	0001f935 	.word	0x0001f935

0001f838 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
   1f838:	b580      	push	{r7, lr}
   1f83a:	b086      	sub	sp, #24
   1f83c:	af00      	add	r7, sp, #0
   1f83e:	60f8      	str	r0, [r7, #12]
   1f840:	60b9      	str	r1, [r7, #8]
   1f842:	607a      	str	r2, [r7, #4]
   1f844:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
   1f846:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1f848:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   1f84a:	687b      	ldr	r3, [r7, #4]
   1f84c:	4936      	ldr	r1, [pc, #216]	; (1f928 <prvInitialiseNewTask+0xf0>)
   1f84e:	468c      	mov	ip, r1
   1f850:	4463      	add	r3, ip
   1f852:	009b      	lsls	r3, r3, #2
   1f854:	18d3      	adds	r3, r2, r3
   1f856:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
   1f858:	693b      	ldr	r3, [r7, #16]
   1f85a:	2207      	movs	r2, #7
   1f85c:	4393      	bics	r3, r2
   1f85e:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
   1f860:	693b      	ldr	r3, [r7, #16]
   1f862:	2207      	movs	r2, #7
   1f864:	4013      	ands	r3, r2
   1f866:	d001      	beq.n	1f86c <prvInitialiseNewTask+0x34>
   1f868:	b672      	cpsid	i
   1f86a:	e7fe      	b.n	1f86a <prvInitialiseNewTask+0x32>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
   1f86c:	2300      	movs	r3, #0
   1f86e:	617b      	str	r3, [r7, #20]
   1f870:	e013      	b.n	1f89a <prvInitialiseNewTask+0x62>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
   1f872:	68ba      	ldr	r2, [r7, #8]
   1f874:	697b      	ldr	r3, [r7, #20]
   1f876:	18d3      	adds	r3, r2, r3
   1f878:	7818      	ldrb	r0, [r3, #0]
   1f87a:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1f87c:	2134      	movs	r1, #52	; 0x34
   1f87e:	697b      	ldr	r3, [r7, #20]
   1f880:	18d3      	adds	r3, r2, r3
   1f882:	185b      	adds	r3, r3, r1
   1f884:	1c02      	adds	r2, r0, #0
   1f886:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
   1f888:	68ba      	ldr	r2, [r7, #8]
   1f88a:	697b      	ldr	r3, [r7, #20]
   1f88c:	18d3      	adds	r3, r2, r3
   1f88e:	781b      	ldrb	r3, [r3, #0]
   1f890:	2b00      	cmp	r3, #0
   1f892:	d006      	beq.n	1f8a2 <prvInitialiseNewTask+0x6a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
   1f894:	697b      	ldr	r3, [r7, #20]
   1f896:	3301      	adds	r3, #1
   1f898:	617b      	str	r3, [r7, #20]
   1f89a:	697b      	ldr	r3, [r7, #20]
   1f89c:	2b09      	cmp	r3, #9
   1f89e:	d9e8      	bls.n	1f872 <prvInitialiseNewTask+0x3a>
   1f8a0:	e000      	b.n	1f8a4 <prvInitialiseNewTask+0x6c>
		{
			break;
   1f8a2:	46c0      	nop			; (mov r8, r8)
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
   1f8a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1f8a6:	223d      	movs	r2, #61	; 0x3d
   1f8a8:	2100      	movs	r1, #0
   1f8aa:	5499      	strb	r1, [r3, r2]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
   1f8ac:	6a3b      	ldr	r3, [r7, #32]
   1f8ae:	2b04      	cmp	r3, #4
   1f8b0:	d901      	bls.n	1f8b6 <prvInitialiseNewTask+0x7e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
   1f8b2:	2304      	movs	r3, #4
   1f8b4:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
   1f8b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1f8b8:	6a3a      	ldr	r2, [r7, #32]
   1f8ba:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
   1f8bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1f8be:	6a3a      	ldr	r2, [r7, #32]
   1f8c0:	641a      	str	r2, [r3, #64]	; 0x40
		pxNewTCB->uxMutexesHeld = 0;
   1f8c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1f8c4:	2200      	movs	r2, #0
   1f8c6:	645a      	str	r2, [r3, #68]	; 0x44
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
   1f8c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1f8ca:	3304      	adds	r3, #4
   1f8cc:	0018      	movs	r0, r3
   1f8ce:	4b17      	ldr	r3, [pc, #92]	; (1f92c <prvInitialiseNewTask+0xf4>)
   1f8d0:	4798      	blx	r3
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
   1f8d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1f8d4:	3318      	adds	r3, #24
   1f8d6:	0018      	movs	r0, r3
   1f8d8:	4b14      	ldr	r3, [pc, #80]	; (1f92c <prvInitialiseNewTask+0xf4>)
   1f8da:	4798      	blx	r3

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
   1f8dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1f8de:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1f8e0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1f8e2:	6a3b      	ldr	r3, [r7, #32]
   1f8e4:	2205      	movs	r2, #5
   1f8e6:	1ad2      	subs	r2, r2, r3
   1f8e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1f8ea:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
   1f8ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1f8ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1f8f0:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
   1f8f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1f8f4:	2200      	movs	r2, #0
   1f8f6:	649a      	str	r2, [r3, #72]	; 0x48
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
   1f8f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1f8fa:	224c      	movs	r2, #76	; 0x4c
   1f8fc:	2100      	movs	r1, #0
   1f8fe:	5499      	strb	r1, [r3, r2]
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
   1f900:	683a      	ldr	r2, [r7, #0]
   1f902:	68f9      	ldr	r1, [r7, #12]
   1f904:	693b      	ldr	r3, [r7, #16]
   1f906:	0018      	movs	r0, r3
   1f908:	4b09      	ldr	r3, [pc, #36]	; (1f930 <prvInitialiseNewTask+0xf8>)
   1f90a:	4798      	blx	r3
   1f90c:	0002      	movs	r2, r0
   1f90e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1f910:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
   1f912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1f914:	2b00      	cmp	r3, #0
   1f916:	d002      	beq.n	1f91e <prvInitialiseNewTask+0xe6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
   1f918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1f91a:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1f91c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
   1f91e:	46c0      	nop			; (mov r8, r8)
   1f920:	46bd      	mov	sp, r7
   1f922:	b006      	add	sp, #24
   1f924:	bd80      	pop	{r7, pc}
   1f926:	46c0      	nop			; (mov r8, r8)
   1f928:	3fffffff 	.word	0x3fffffff
   1f92c:	0001eaa1 	.word	0x0001eaa1
   1f930:	0001e781 	.word	0x0001e781

0001f934 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
   1f934:	b580      	push	{r7, lr}
   1f936:	b082      	sub	sp, #8
   1f938:	af00      	add	r7, sp, #0
   1f93a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
   1f93c:	4b29      	ldr	r3, [pc, #164]	; (1f9e4 <prvAddNewTaskToReadyList+0xb0>)
   1f93e:	4798      	blx	r3
	{
		uxCurrentNumberOfTasks++;
   1f940:	4b29      	ldr	r3, [pc, #164]	; (1f9e8 <prvAddNewTaskToReadyList+0xb4>)
   1f942:	681b      	ldr	r3, [r3, #0]
   1f944:	1c5a      	adds	r2, r3, #1
   1f946:	4b28      	ldr	r3, [pc, #160]	; (1f9e8 <prvAddNewTaskToReadyList+0xb4>)
   1f948:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
   1f94a:	4b28      	ldr	r3, [pc, #160]	; (1f9ec <prvAddNewTaskToReadyList+0xb8>)
   1f94c:	681b      	ldr	r3, [r3, #0]
   1f94e:	2b00      	cmp	r3, #0
   1f950:	d109      	bne.n	1f966 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
   1f952:	4b26      	ldr	r3, [pc, #152]	; (1f9ec <prvAddNewTaskToReadyList+0xb8>)
   1f954:	687a      	ldr	r2, [r7, #4]
   1f956:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
   1f958:	4b23      	ldr	r3, [pc, #140]	; (1f9e8 <prvAddNewTaskToReadyList+0xb4>)
   1f95a:	681b      	ldr	r3, [r3, #0]
   1f95c:	2b01      	cmp	r3, #1
   1f95e:	d110      	bne.n	1f982 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
   1f960:	4b23      	ldr	r3, [pc, #140]	; (1f9f0 <prvAddNewTaskToReadyList+0xbc>)
   1f962:	4798      	blx	r3
   1f964:	e00d      	b.n	1f982 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
   1f966:	4b23      	ldr	r3, [pc, #140]	; (1f9f4 <prvAddNewTaskToReadyList+0xc0>)
   1f968:	681b      	ldr	r3, [r3, #0]
   1f96a:	2b00      	cmp	r3, #0
   1f96c:	d109      	bne.n	1f982 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
   1f96e:	4b1f      	ldr	r3, [pc, #124]	; (1f9ec <prvAddNewTaskToReadyList+0xb8>)
   1f970:	681b      	ldr	r3, [r3, #0]
   1f972:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1f974:	687b      	ldr	r3, [r7, #4]
   1f976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1f978:	429a      	cmp	r2, r3
   1f97a:	d802      	bhi.n	1f982 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
   1f97c:	4b1b      	ldr	r3, [pc, #108]	; (1f9ec <prvAddNewTaskToReadyList+0xb8>)
   1f97e:	687a      	ldr	r2, [r7, #4]
   1f980:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
   1f982:	4b1d      	ldr	r3, [pc, #116]	; (1f9f8 <prvAddNewTaskToReadyList+0xc4>)
   1f984:	681b      	ldr	r3, [r3, #0]
   1f986:	1c5a      	adds	r2, r3, #1
   1f988:	4b1b      	ldr	r3, [pc, #108]	; (1f9f8 <prvAddNewTaskToReadyList+0xc4>)
   1f98a:	601a      	str	r2, [r3, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
   1f98c:	687b      	ldr	r3, [r7, #4]
   1f98e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1f990:	4b1a      	ldr	r3, [pc, #104]	; (1f9fc <prvAddNewTaskToReadyList+0xc8>)
   1f992:	681b      	ldr	r3, [r3, #0]
   1f994:	429a      	cmp	r2, r3
   1f996:	d903      	bls.n	1f9a0 <prvAddNewTaskToReadyList+0x6c>
   1f998:	687b      	ldr	r3, [r7, #4]
   1f99a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1f99c:	4b17      	ldr	r3, [pc, #92]	; (1f9fc <prvAddNewTaskToReadyList+0xc8>)
   1f99e:	601a      	str	r2, [r3, #0]
   1f9a0:	687b      	ldr	r3, [r7, #4]
   1f9a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1f9a4:	0013      	movs	r3, r2
   1f9a6:	009b      	lsls	r3, r3, #2
   1f9a8:	189b      	adds	r3, r3, r2
   1f9aa:	009b      	lsls	r3, r3, #2
   1f9ac:	4a14      	ldr	r2, [pc, #80]	; (1fa00 <prvAddNewTaskToReadyList+0xcc>)
   1f9ae:	189a      	adds	r2, r3, r2
   1f9b0:	687b      	ldr	r3, [r7, #4]
   1f9b2:	3304      	adds	r3, #4
   1f9b4:	0019      	movs	r1, r3
   1f9b6:	0010      	movs	r0, r2
   1f9b8:	4b12      	ldr	r3, [pc, #72]	; (1fa04 <prvAddNewTaskToReadyList+0xd0>)
   1f9ba:	4798      	blx	r3

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
   1f9bc:	4b12      	ldr	r3, [pc, #72]	; (1fa08 <prvAddNewTaskToReadyList+0xd4>)
   1f9be:	4798      	blx	r3

	if( xSchedulerRunning != pdFALSE )
   1f9c0:	4b0c      	ldr	r3, [pc, #48]	; (1f9f4 <prvAddNewTaskToReadyList+0xc0>)
   1f9c2:	681b      	ldr	r3, [r3, #0]
   1f9c4:	2b00      	cmp	r3, #0
   1f9c6:	d008      	beq.n	1f9da <prvAddNewTaskToReadyList+0xa6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
   1f9c8:	4b08      	ldr	r3, [pc, #32]	; (1f9ec <prvAddNewTaskToReadyList+0xb8>)
   1f9ca:	681b      	ldr	r3, [r3, #0]
   1f9cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1f9ce:	687b      	ldr	r3, [r7, #4]
   1f9d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1f9d2:	429a      	cmp	r2, r3
   1f9d4:	d201      	bcs.n	1f9da <prvAddNewTaskToReadyList+0xa6>
		{
			taskYIELD_IF_USING_PREEMPTION();
   1f9d6:	4b0d      	ldr	r3, [pc, #52]	; (1fa0c <prvAddNewTaskToReadyList+0xd8>)
   1f9d8:	4798      	blx	r3
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
   1f9da:	46c0      	nop			; (mov r8, r8)
   1f9dc:	46bd      	mov	sp, r7
   1f9de:	b002      	add	sp, #8
   1f9e0:	bd80      	pop	{r7, pc}
   1f9e2:	46c0      	nop			; (mov r8, r8)
   1f9e4:	0001e8c1 	.word	0x0001e8c1
   1f9e8:	200003a0 	.word	0x200003a0
   1f9ec:	200002c8 	.word	0x200002c8
   1f9f0:	000202f9 	.word	0x000202f9
   1f9f4:	200003ac 	.word	0x200003ac
   1f9f8:	200003bc 	.word	0x200003bc
   1f9fc:	200003a8 	.word	0x200003a8
   1fa00:	200002cc 	.word	0x200002cc
   1fa04:	0001eab7 	.word	0x0001eab7
   1fa08:	0001e8e5 	.word	0x0001e8e5
   1fa0c:	0001e8a1 	.word	0x0001e8a1

0001fa10 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
   1fa10:	b580      	push	{r7, lr}
   1fa12:	b086      	sub	sp, #24
   1fa14:	af00      	add	r7, sp, #0
   1fa16:	6078      	str	r0, [r7, #4]
   1fa18:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
   1fa1a:	2300      	movs	r3, #0
   1fa1c:	617b      	str	r3, [r7, #20]

		configASSERT( pxPreviousWakeTime );
   1fa1e:	687b      	ldr	r3, [r7, #4]
   1fa20:	2b00      	cmp	r3, #0
   1fa22:	d101      	bne.n	1fa28 <vTaskDelayUntil+0x18>
   1fa24:	b672      	cpsid	i
   1fa26:	e7fe      	b.n	1fa26 <vTaskDelayUntil+0x16>
		configASSERT( ( xTimeIncrement > 0U ) );
   1fa28:	683b      	ldr	r3, [r7, #0]
   1fa2a:	2b00      	cmp	r3, #0
   1fa2c:	d101      	bne.n	1fa32 <vTaskDelayUntil+0x22>
   1fa2e:	b672      	cpsid	i
   1fa30:	e7fe      	b.n	1fa30 <vTaskDelayUntil+0x20>
		configASSERT( uxSchedulerSuspended == 0 );
   1fa32:	4b23      	ldr	r3, [pc, #140]	; (1fac0 <vTaskDelayUntil+0xb0>)
   1fa34:	681b      	ldr	r3, [r3, #0]
   1fa36:	2b00      	cmp	r3, #0
   1fa38:	d001      	beq.n	1fa3e <vTaskDelayUntil+0x2e>
   1fa3a:	b672      	cpsid	i
   1fa3c:	e7fe      	b.n	1fa3c <vTaskDelayUntil+0x2c>

		vTaskSuspendAll();
   1fa3e:	4b21      	ldr	r3, [pc, #132]	; (1fac4 <vTaskDelayUntil+0xb4>)
   1fa40:	4798      	blx	r3
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
   1fa42:	4b21      	ldr	r3, [pc, #132]	; (1fac8 <vTaskDelayUntil+0xb8>)
   1fa44:	681b      	ldr	r3, [r3, #0]
   1fa46:	613b      	str	r3, [r7, #16]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
   1fa48:	687b      	ldr	r3, [r7, #4]
   1fa4a:	681a      	ldr	r2, [r3, #0]
   1fa4c:	683b      	ldr	r3, [r7, #0]
   1fa4e:	18d3      	adds	r3, r2, r3
   1fa50:	60fb      	str	r3, [r7, #12]

			if( xConstTickCount < *pxPreviousWakeTime )
   1fa52:	687b      	ldr	r3, [r7, #4]
   1fa54:	681a      	ldr	r2, [r3, #0]
   1fa56:	693b      	ldr	r3, [r7, #16]
   1fa58:	429a      	cmp	r2, r3
   1fa5a:	d90b      	bls.n	1fa74 <vTaskDelayUntil+0x64>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
   1fa5c:	687b      	ldr	r3, [r7, #4]
   1fa5e:	681a      	ldr	r2, [r3, #0]
   1fa60:	68fb      	ldr	r3, [r7, #12]
   1fa62:	429a      	cmp	r2, r3
   1fa64:	d911      	bls.n	1fa8a <vTaskDelayUntil+0x7a>
   1fa66:	68fa      	ldr	r2, [r7, #12]
   1fa68:	693b      	ldr	r3, [r7, #16]
   1fa6a:	429a      	cmp	r2, r3
   1fa6c:	d90d      	bls.n	1fa8a <vTaskDelayUntil+0x7a>
				{
					xShouldDelay = pdTRUE;
   1fa6e:	2301      	movs	r3, #1
   1fa70:	617b      	str	r3, [r7, #20]
   1fa72:	e00a      	b.n	1fa8a <vTaskDelayUntil+0x7a>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
   1fa74:	687b      	ldr	r3, [r7, #4]
   1fa76:	681a      	ldr	r2, [r3, #0]
   1fa78:	68fb      	ldr	r3, [r7, #12]
   1fa7a:	429a      	cmp	r2, r3
   1fa7c:	d803      	bhi.n	1fa86 <vTaskDelayUntil+0x76>
   1fa7e:	68fa      	ldr	r2, [r7, #12]
   1fa80:	693b      	ldr	r3, [r7, #16]
   1fa82:	429a      	cmp	r2, r3
   1fa84:	d901      	bls.n	1fa8a <vTaskDelayUntil+0x7a>
				{
					xShouldDelay = pdTRUE;
   1fa86:	2301      	movs	r3, #1
   1fa88:	617b      	str	r3, [r7, #20]
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
   1fa8a:	687b      	ldr	r3, [r7, #4]
   1fa8c:	68fa      	ldr	r2, [r7, #12]
   1fa8e:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
   1fa90:	697b      	ldr	r3, [r7, #20]
   1fa92:	2b00      	cmp	r3, #0
   1fa94:	d006      	beq.n	1faa4 <vTaskDelayUntil+0x94>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
   1fa96:	68fa      	ldr	r2, [r7, #12]
   1fa98:	693b      	ldr	r3, [r7, #16]
   1fa9a:	1ad3      	subs	r3, r2, r3
   1fa9c:	2100      	movs	r1, #0
   1fa9e:	0018      	movs	r0, r3
   1faa0:	4b0a      	ldr	r3, [pc, #40]	; (1facc <vTaskDelayUntil+0xbc>)
   1faa2:	4798      	blx	r3
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
   1faa4:	4b0a      	ldr	r3, [pc, #40]	; (1fad0 <vTaskDelayUntil+0xc0>)
   1faa6:	4798      	blx	r3
   1faa8:	0003      	movs	r3, r0
   1faaa:	60bb      	str	r3, [r7, #8]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
   1faac:	68bb      	ldr	r3, [r7, #8]
   1faae:	2b00      	cmp	r3, #0
   1fab0:	d101      	bne.n	1fab6 <vTaskDelayUntil+0xa6>
		{
			portYIELD_WITHIN_API();
   1fab2:	4b08      	ldr	r3, [pc, #32]	; (1fad4 <vTaskDelayUntil+0xc4>)
   1fab4:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
   1fab6:	46c0      	nop			; (mov r8, r8)
   1fab8:	46bd      	mov	sp, r7
   1faba:	b006      	add	sp, #24
   1fabc:	bd80      	pop	{r7, pc}
   1fabe:	46c0      	nop			; (mov r8, r8)
   1fac0:	200003c8 	.word	0x200003c8
   1fac4:	0001fcf1 	.word	0x0001fcf1
   1fac8:	200003a4 	.word	0x200003a4
   1facc:	000208e9 	.word	0x000208e9
   1fad0:	0001fd09 	.word	0x0001fd09
   1fad4:	0001e8a1 	.word	0x0001e8a1

0001fad8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
   1fad8:	b580      	push	{r7, lr}
   1fada:	b084      	sub	sp, #16
   1fadc:	af00      	add	r7, sp, #0
   1fade:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
   1fae0:	2300      	movs	r3, #0
   1fae2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
   1fae4:	687b      	ldr	r3, [r7, #4]
   1fae6:	2b00      	cmp	r3, #0
   1fae8:	d010      	beq.n	1fb0c <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
   1faea:	4b0d      	ldr	r3, [pc, #52]	; (1fb20 <vTaskDelay+0x48>)
   1faec:	681b      	ldr	r3, [r3, #0]
   1faee:	2b00      	cmp	r3, #0
   1faf0:	d001      	beq.n	1faf6 <vTaskDelay+0x1e>
   1faf2:	b672      	cpsid	i
   1faf4:	e7fe      	b.n	1faf4 <vTaskDelay+0x1c>
			vTaskSuspendAll();
   1faf6:	4b0b      	ldr	r3, [pc, #44]	; (1fb24 <vTaskDelay+0x4c>)
   1faf8:	4798      	blx	r3
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
   1fafa:	687b      	ldr	r3, [r7, #4]
   1fafc:	2100      	movs	r1, #0
   1fafe:	0018      	movs	r0, r3
   1fb00:	4b09      	ldr	r3, [pc, #36]	; (1fb28 <vTaskDelay+0x50>)
   1fb02:	4798      	blx	r3
			}
			xAlreadyYielded = xTaskResumeAll();
   1fb04:	4b09      	ldr	r3, [pc, #36]	; (1fb2c <vTaskDelay+0x54>)
   1fb06:	4798      	blx	r3
   1fb08:	0003      	movs	r3, r0
   1fb0a:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
   1fb0c:	68fb      	ldr	r3, [r7, #12]
   1fb0e:	2b00      	cmp	r3, #0
   1fb10:	d101      	bne.n	1fb16 <vTaskDelay+0x3e>
		{
			portYIELD_WITHIN_API();
   1fb12:	4b07      	ldr	r3, [pc, #28]	; (1fb30 <vTaskDelay+0x58>)
   1fb14:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
   1fb16:	46c0      	nop			; (mov r8, r8)
   1fb18:	46bd      	mov	sp, r7
   1fb1a:	b004      	add	sp, #16
   1fb1c:	bd80      	pop	{r7, pc}
   1fb1e:	46c0      	nop			; (mov r8, r8)
   1fb20:	200003c8 	.word	0x200003c8
   1fb24:	0001fcf1 	.word	0x0001fcf1
   1fb28:	000208e9 	.word	0x000208e9
   1fb2c:	0001fd09 	.word	0x0001fd09
   1fb30:	0001e8a1 	.word	0x0001e8a1

0001fb34 <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
	{
   1fb34:	b580      	push	{r7, lr}
   1fb36:	b086      	sub	sp, #24
   1fb38:	af00      	add	r7, sp, #0
   1fb3a:	6078      	str	r0, [r7, #4]
   1fb3c:	6039      	str	r1, [r7, #0]
	TCB_t *pxTCB;
	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
	BaseType_t xYieldRequired = pdFALSE;
   1fb3e:	2300      	movs	r3, #0
   1fb40:	617b      	str	r3, [r7, #20]

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
   1fb42:	683b      	ldr	r3, [r7, #0]
   1fb44:	2b04      	cmp	r3, #4
   1fb46:	d901      	bls.n	1fb4c <vTaskPrioritySet+0x18>
   1fb48:	b672      	cpsid	i
   1fb4a:	e7fe      	b.n	1fb4a <vTaskPrioritySet+0x16>

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
   1fb4c:	683b      	ldr	r3, [r7, #0]
   1fb4e:	2b04      	cmp	r3, #4
   1fb50:	d901      	bls.n	1fb56 <vTaskPrioritySet+0x22>
		{
			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
   1fb52:	2304      	movs	r3, #4
   1fb54:	603b      	str	r3, [r7, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		taskENTER_CRITICAL();
   1fb56:	4b3d      	ldr	r3, [pc, #244]	; (1fc4c <vTaskPrioritySet+0x118>)
   1fb58:	4798      	blx	r3
		{
			/* If null is passed in here then it is the priority of the calling
			task that is being changed. */
			pxTCB = prvGetTCBFromHandle( xTask );
   1fb5a:	687b      	ldr	r3, [r7, #4]
   1fb5c:	2b00      	cmp	r3, #0
   1fb5e:	d102      	bne.n	1fb66 <vTaskPrioritySet+0x32>
   1fb60:	4b3b      	ldr	r3, [pc, #236]	; (1fc50 <vTaskPrioritySet+0x11c>)
   1fb62:	681b      	ldr	r3, [r3, #0]
   1fb64:	e000      	b.n	1fb68 <vTaskPrioritySet+0x34>
   1fb66:	687b      	ldr	r3, [r7, #4]
   1fb68:	613b      	str	r3, [r7, #16]

			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentBasePriority = pxTCB->uxBasePriority;
   1fb6a:	693b      	ldr	r3, [r7, #16]
   1fb6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1fb6e:	60fb      	str	r3, [r7, #12]
			{
				uxCurrentBasePriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentBasePriority != uxNewPriority )
   1fb70:	68fa      	ldr	r2, [r7, #12]
   1fb72:	683b      	ldr	r3, [r7, #0]
   1fb74:	429a      	cmp	r2, r3
   1fb76:	d062      	beq.n	1fc3e <vTaskPrioritySet+0x10a>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentBasePriority )
   1fb78:	683a      	ldr	r2, [r7, #0]
   1fb7a:	68fb      	ldr	r3, [r7, #12]
   1fb7c:	429a      	cmp	r2, r3
   1fb7e:	d90d      	bls.n	1fb9c <vTaskPrioritySet+0x68>
				{
					if( pxTCB != pxCurrentTCB )
   1fb80:	4b33      	ldr	r3, [pc, #204]	; (1fc50 <vTaskPrioritySet+0x11c>)
   1fb82:	681b      	ldr	r3, [r3, #0]
   1fb84:	693a      	ldr	r2, [r7, #16]
   1fb86:	429a      	cmp	r2, r3
   1fb88:	d00f      	beq.n	1fbaa <vTaskPrioritySet+0x76>
					{
						/* The priority of a task other than the currently
						running task is being raised.  Is the priority being
						raised above that of the running task? */
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
   1fb8a:	4b31      	ldr	r3, [pc, #196]	; (1fc50 <vTaskPrioritySet+0x11c>)
   1fb8c:	681b      	ldr	r3, [r3, #0]
   1fb8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1fb90:	683b      	ldr	r3, [r7, #0]
   1fb92:	429a      	cmp	r2, r3
   1fb94:	d809      	bhi.n	1fbaa <vTaskPrioritySet+0x76>
						{
							xYieldRequired = pdTRUE;
   1fb96:	2301      	movs	r3, #1
   1fb98:	617b      	str	r3, [r7, #20]
   1fb9a:	e006      	b.n	1fbaa <vTaskPrioritySet+0x76>
						/* The priority of the running task is being raised,
						but the running task must already be the highest
						priority task able to run so no yield is required. */
					}
				}
				else if( pxTCB == pxCurrentTCB )
   1fb9c:	4b2c      	ldr	r3, [pc, #176]	; (1fc50 <vTaskPrioritySet+0x11c>)
   1fb9e:	681b      	ldr	r3, [r3, #0]
   1fba0:	693a      	ldr	r2, [r7, #16]
   1fba2:	429a      	cmp	r2, r3
   1fba4:	d101      	bne.n	1fbaa <vTaskPrioritySet+0x76>
				{
					/* Setting the priority of the running task down means
					there may now be another task of higher priority that
					is ready to execute. */
					xYieldRequired = pdTRUE;
   1fba6:	2301      	movs	r3, #1
   1fba8:	617b      	str	r3, [r7, #20]
				}

				/* Remember the ready list the task might be referenced from
				before its uxPriority member is changed so the
				taskRESET_READY_PRIORITY() macro can function correctly. */
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
   1fbaa:	693b      	ldr	r3, [r7, #16]
   1fbac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1fbae:	60bb      	str	r3, [r7, #8]

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
   1fbb0:	693b      	ldr	r3, [r7, #16]
   1fbb2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   1fbb4:	693b      	ldr	r3, [r7, #16]
   1fbb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1fbb8:	429a      	cmp	r2, r3
   1fbba:	d102      	bne.n	1fbc2 <vTaskPrioritySet+0x8e>
					{
						pxTCB->uxPriority = uxNewPriority;
   1fbbc:	693b      	ldr	r3, [r7, #16]
   1fbbe:	683a      	ldr	r2, [r7, #0]
   1fbc0:	62da      	str	r2, [r3, #44]	; 0x2c
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
   1fbc2:	693b      	ldr	r3, [r7, #16]
   1fbc4:	683a      	ldr	r2, [r7, #0]
   1fbc6:	641a      	str	r2, [r3, #64]	; 0x40
				}
				#endif

				/* Only reset the event list item value if the value is not
				being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
   1fbc8:	693b      	ldr	r3, [r7, #16]
   1fbca:	699b      	ldr	r3, [r3, #24]
   1fbcc:	2b00      	cmp	r3, #0
   1fbce:	db04      	blt.n	1fbda <vTaskPrioritySet+0xa6>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1fbd0:	683b      	ldr	r3, [r7, #0]
   1fbd2:	2205      	movs	r2, #5
   1fbd4:	1ad2      	subs	r2, r2, r3
   1fbd6:	693b      	ldr	r3, [r7, #16]
   1fbd8:	619a      	str	r2, [r3, #24]

				/* If the task is in the blocked or suspended list we need do
				nothing more than change its priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the list appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
   1fbda:	693b      	ldr	r3, [r7, #16]
   1fbdc:	6959      	ldr	r1, [r3, #20]
   1fbde:	68ba      	ldr	r2, [r7, #8]
   1fbe0:	0013      	movs	r3, r2
   1fbe2:	009b      	lsls	r3, r3, #2
   1fbe4:	189b      	adds	r3, r3, r2
   1fbe6:	009b      	lsls	r3, r3, #2
   1fbe8:	4a1a      	ldr	r2, [pc, #104]	; (1fc54 <vTaskPrioritySet+0x120>)
   1fbea:	189b      	adds	r3, r3, r2
   1fbec:	4299      	cmp	r1, r3
   1fbee:	d101      	bne.n	1fbf4 <vTaskPrioritySet+0xc0>
   1fbf0:	2301      	movs	r3, #1
   1fbf2:	e000      	b.n	1fbf6 <vTaskPrioritySet+0xc2>
   1fbf4:	2300      	movs	r3, #0
   1fbf6:	2b00      	cmp	r3, #0
   1fbf8:	d01c      	beq.n	1fc34 <vTaskPrioritySet+0x100>
				{
					/* The task is currently in its ready list - remove before
					adding it to it's new ready list.  As we are in a critical
					section we can do this even if the scheduler is suspended. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   1fbfa:	693b      	ldr	r3, [r7, #16]
   1fbfc:	3304      	adds	r3, #4
   1fbfe:	0018      	movs	r0, r3
   1fc00:	4b15      	ldr	r3, [pc, #84]	; (1fc58 <vTaskPrioritySet+0x124>)
   1fc02:	4798      	blx	r3
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					prvAddTaskToReadyList( pxTCB );
   1fc04:	693b      	ldr	r3, [r7, #16]
   1fc06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1fc08:	4b14      	ldr	r3, [pc, #80]	; (1fc5c <vTaskPrioritySet+0x128>)
   1fc0a:	681b      	ldr	r3, [r3, #0]
   1fc0c:	429a      	cmp	r2, r3
   1fc0e:	d903      	bls.n	1fc18 <vTaskPrioritySet+0xe4>
   1fc10:	693b      	ldr	r3, [r7, #16]
   1fc12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1fc14:	4b11      	ldr	r3, [pc, #68]	; (1fc5c <vTaskPrioritySet+0x128>)
   1fc16:	601a      	str	r2, [r3, #0]
   1fc18:	693b      	ldr	r3, [r7, #16]
   1fc1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1fc1c:	0013      	movs	r3, r2
   1fc1e:	009b      	lsls	r3, r3, #2
   1fc20:	189b      	adds	r3, r3, r2
   1fc22:	009b      	lsls	r3, r3, #2
   1fc24:	4a0b      	ldr	r2, [pc, #44]	; (1fc54 <vTaskPrioritySet+0x120>)
   1fc26:	189a      	adds	r2, r3, r2
   1fc28:	693b      	ldr	r3, [r7, #16]
   1fc2a:	3304      	adds	r3, #4
   1fc2c:	0019      	movs	r1, r3
   1fc2e:	0010      	movs	r0, r2
   1fc30:	4b0b      	ldr	r3, [pc, #44]	; (1fc60 <vTaskPrioritySet+0x12c>)
   1fc32:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldRequired != pdFALSE )
   1fc34:	697b      	ldr	r3, [r7, #20]
   1fc36:	2b00      	cmp	r3, #0
   1fc38:	d001      	beq.n	1fc3e <vTaskPrioritySet+0x10a>
				{
					taskYIELD_IF_USING_PREEMPTION();
   1fc3a:	4b0a      	ldr	r3, [pc, #40]	; (1fc64 <vTaskPrioritySet+0x130>)
   1fc3c:	4798      	blx	r3
				/* Remove compiler warning about unused variables when the port
				optimised task selection is not being used. */
				( void ) uxPriorityUsedOnEntry;
			}
		}
		taskEXIT_CRITICAL();
   1fc3e:	4b0a      	ldr	r3, [pc, #40]	; (1fc68 <vTaskPrioritySet+0x134>)
   1fc40:	4798      	blx	r3
	}
   1fc42:	46c0      	nop			; (mov r8, r8)
   1fc44:	46bd      	mov	sp, r7
   1fc46:	b006      	add	sp, #24
   1fc48:	bd80      	pop	{r7, pc}
   1fc4a:	46c0      	nop			; (mov r8, r8)
   1fc4c:	0001e8c1 	.word	0x0001e8c1
   1fc50:	200002c8 	.word	0x200002c8
   1fc54:	200002cc 	.word	0x200002cc
   1fc58:	0001eb67 	.word	0x0001eb67
   1fc5c:	200003a8 	.word	0x200003a8
   1fc60:	0001eab7 	.word	0x0001eab7
   1fc64:	0001e8a1 	.word	0x0001e8a1
   1fc68:	0001e8e5 	.word	0x0001e8e5

0001fc6c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
   1fc6c:	b590      	push	{r4, r7, lr}
   1fc6e:	b085      	sub	sp, #20
   1fc70:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
   1fc72:	4916      	ldr	r1, [pc, #88]	; (1fccc <vTaskStartScheduler+0x60>)
   1fc74:	4816      	ldr	r0, [pc, #88]	; (1fcd0 <vTaskStartScheduler+0x64>)
   1fc76:	4b17      	ldr	r3, [pc, #92]	; (1fcd4 <vTaskStartScheduler+0x68>)
   1fc78:	9301      	str	r3, [sp, #4]
   1fc7a:	2300      	movs	r3, #0
   1fc7c:	9300      	str	r3, [sp, #0]
   1fc7e:	2300      	movs	r3, #0
   1fc80:	2282      	movs	r2, #130	; 0x82
   1fc82:	4c15      	ldr	r4, [pc, #84]	; (1fcd8 <vTaskStartScheduler+0x6c>)
   1fc84:	47a0      	blx	r4
   1fc86:	0003      	movs	r3, r0
   1fc88:	607b      	str	r3, [r7, #4]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
   1fc8a:	687b      	ldr	r3, [r7, #4]
   1fc8c:	2b01      	cmp	r3, #1
   1fc8e:	d103      	bne.n	1fc98 <vTaskStartScheduler+0x2c>
		{
			xReturn = xTimerCreateTimerTask();
   1fc90:	4b12      	ldr	r3, [pc, #72]	; (1fcdc <vTaskStartScheduler+0x70>)
   1fc92:	4798      	blx	r3
   1fc94:	0003      	movs	r3, r0
   1fc96:	607b      	str	r3, [r7, #4]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
   1fc98:	687b      	ldr	r3, [r7, #4]
   1fc9a:	2b01      	cmp	r3, #1
   1fc9c:	d10d      	bne.n	1fcba <vTaskStartScheduler+0x4e>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
   1fc9e:	b672      	cpsid	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
   1fca0:	4b0f      	ldr	r3, [pc, #60]	; (1fce0 <vTaskStartScheduler+0x74>)
   1fca2:	2201      	movs	r2, #1
   1fca4:	4252      	negs	r2, r2
   1fca6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
   1fca8:	4b0e      	ldr	r3, [pc, #56]	; (1fce4 <vTaskStartScheduler+0x78>)
   1fcaa:	2201      	movs	r2, #1
   1fcac:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
   1fcae:	4b0e      	ldr	r3, [pc, #56]	; (1fce8 <vTaskStartScheduler+0x7c>)
   1fcb0:	2200      	movs	r2, #0
   1fcb2:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
   1fcb4:	4b0d      	ldr	r3, [pc, #52]	; (1fcec <vTaskStartScheduler+0x80>)
   1fcb6:	4798      	blx	r3
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
   1fcb8:	e004      	b.n	1fcc4 <vTaskStartScheduler+0x58>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
   1fcba:	687b      	ldr	r3, [r7, #4]
   1fcbc:	3301      	adds	r3, #1
   1fcbe:	d101      	bne.n	1fcc4 <vTaskStartScheduler+0x58>
   1fcc0:	b672      	cpsid	i
   1fcc2:	e7fe      	b.n	1fcc2 <vTaskStartScheduler+0x56>
}
   1fcc4:	46c0      	nop			; (mov r8, r8)
   1fcc6:	46bd      	mov	sp, r7
   1fcc8:	b003      	add	sp, #12
   1fcca:	bd90      	pop	{r4, r7, pc}
   1fccc:	0002a5fc 	.word	0x0002a5fc
   1fcd0:	000202d1 	.word	0x000202d1
   1fcd4:	200003c4 	.word	0x200003c4
   1fcd8:	0001f799 	.word	0x0001f799
   1fcdc:	0002099d 	.word	0x0002099d
   1fce0:	200003c0 	.word	0x200003c0
   1fce4:	200003ac 	.word	0x200003ac
   1fce8:	200003a4 	.word	0x200003a4
   1fcec:	0001e849 	.word	0x0001e849

0001fcf0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
   1fcf0:	b580      	push	{r7, lr}
   1fcf2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
   1fcf4:	4b03      	ldr	r3, [pc, #12]	; (1fd04 <vTaskSuspendAll+0x14>)
   1fcf6:	681b      	ldr	r3, [r3, #0]
   1fcf8:	1c5a      	adds	r2, r3, #1
   1fcfa:	4b02      	ldr	r3, [pc, #8]	; (1fd04 <vTaskSuspendAll+0x14>)
   1fcfc:	601a      	str	r2, [r3, #0]
}
   1fcfe:	46c0      	nop			; (mov r8, r8)
   1fd00:	46bd      	mov	sp, r7
   1fd02:	bd80      	pop	{r7, pc}
   1fd04:	200003c8 	.word	0x200003c8

0001fd08 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
   1fd08:	b580      	push	{r7, lr}
   1fd0a:	b084      	sub	sp, #16
   1fd0c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
   1fd0e:	2300      	movs	r3, #0
   1fd10:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
   1fd12:	2300      	movs	r3, #0
   1fd14:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
   1fd16:	4b3a      	ldr	r3, [pc, #232]	; (1fe00 <xTaskResumeAll+0xf8>)
   1fd18:	681b      	ldr	r3, [r3, #0]
   1fd1a:	2b00      	cmp	r3, #0
   1fd1c:	d101      	bne.n	1fd22 <xTaskResumeAll+0x1a>
   1fd1e:	b672      	cpsid	i
   1fd20:	e7fe      	b.n	1fd20 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
   1fd22:	4b38      	ldr	r3, [pc, #224]	; (1fe04 <xTaskResumeAll+0xfc>)
   1fd24:	4798      	blx	r3
	{
		--uxSchedulerSuspended;
   1fd26:	4b36      	ldr	r3, [pc, #216]	; (1fe00 <xTaskResumeAll+0xf8>)
   1fd28:	681b      	ldr	r3, [r3, #0]
   1fd2a:	1e5a      	subs	r2, r3, #1
   1fd2c:	4b34      	ldr	r3, [pc, #208]	; (1fe00 <xTaskResumeAll+0xf8>)
   1fd2e:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   1fd30:	4b33      	ldr	r3, [pc, #204]	; (1fe00 <xTaskResumeAll+0xf8>)
   1fd32:	681b      	ldr	r3, [r3, #0]
   1fd34:	2b00      	cmp	r3, #0
   1fd36:	d15b      	bne.n	1fdf0 <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
   1fd38:	4b33      	ldr	r3, [pc, #204]	; (1fe08 <xTaskResumeAll+0x100>)
   1fd3a:	681b      	ldr	r3, [r3, #0]
   1fd3c:	2b00      	cmp	r3, #0
   1fd3e:	d057      	beq.n	1fdf0 <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
   1fd40:	e02f      	b.n	1fda2 <xTaskResumeAll+0x9a>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
   1fd42:	4b32      	ldr	r3, [pc, #200]	; (1fe0c <xTaskResumeAll+0x104>)
   1fd44:	68db      	ldr	r3, [r3, #12]
   1fd46:	68db      	ldr	r3, [r3, #12]
   1fd48:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   1fd4a:	68fb      	ldr	r3, [r7, #12]
   1fd4c:	3318      	adds	r3, #24
   1fd4e:	0018      	movs	r0, r3
   1fd50:	4b2f      	ldr	r3, [pc, #188]	; (1fe10 <xTaskResumeAll+0x108>)
   1fd52:	4798      	blx	r3
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   1fd54:	68fb      	ldr	r3, [r7, #12]
   1fd56:	3304      	adds	r3, #4
   1fd58:	0018      	movs	r0, r3
   1fd5a:	4b2d      	ldr	r3, [pc, #180]	; (1fe10 <xTaskResumeAll+0x108>)
   1fd5c:	4798      	blx	r3
					prvAddTaskToReadyList( pxTCB );
   1fd5e:	68fb      	ldr	r3, [r7, #12]
   1fd60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1fd62:	4b2c      	ldr	r3, [pc, #176]	; (1fe14 <xTaskResumeAll+0x10c>)
   1fd64:	681b      	ldr	r3, [r3, #0]
   1fd66:	429a      	cmp	r2, r3
   1fd68:	d903      	bls.n	1fd72 <xTaskResumeAll+0x6a>
   1fd6a:	68fb      	ldr	r3, [r7, #12]
   1fd6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1fd6e:	4b29      	ldr	r3, [pc, #164]	; (1fe14 <xTaskResumeAll+0x10c>)
   1fd70:	601a      	str	r2, [r3, #0]
   1fd72:	68fb      	ldr	r3, [r7, #12]
   1fd74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1fd76:	0013      	movs	r3, r2
   1fd78:	009b      	lsls	r3, r3, #2
   1fd7a:	189b      	adds	r3, r3, r2
   1fd7c:	009b      	lsls	r3, r3, #2
   1fd7e:	4a26      	ldr	r2, [pc, #152]	; (1fe18 <xTaskResumeAll+0x110>)
   1fd80:	189a      	adds	r2, r3, r2
   1fd82:	68fb      	ldr	r3, [r7, #12]
   1fd84:	3304      	adds	r3, #4
   1fd86:	0019      	movs	r1, r3
   1fd88:	0010      	movs	r0, r2
   1fd8a:	4b24      	ldr	r3, [pc, #144]	; (1fe1c <xTaskResumeAll+0x114>)
   1fd8c:	4798      	blx	r3

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   1fd8e:	68fb      	ldr	r3, [r7, #12]
   1fd90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1fd92:	4b23      	ldr	r3, [pc, #140]	; (1fe20 <xTaskResumeAll+0x118>)
   1fd94:	681b      	ldr	r3, [r3, #0]
   1fd96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1fd98:	429a      	cmp	r2, r3
   1fd9a:	d302      	bcc.n	1fda2 <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
   1fd9c:	4b21      	ldr	r3, [pc, #132]	; (1fe24 <xTaskResumeAll+0x11c>)
   1fd9e:	2201      	movs	r2, #1
   1fda0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
   1fda2:	4b1a      	ldr	r3, [pc, #104]	; (1fe0c <xTaskResumeAll+0x104>)
   1fda4:	681b      	ldr	r3, [r3, #0]
   1fda6:	2b00      	cmp	r3, #0
   1fda8:	d1cb      	bne.n	1fd42 <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
   1fdaa:	68fb      	ldr	r3, [r7, #12]
   1fdac:	2b00      	cmp	r3, #0
   1fdae:	d001      	beq.n	1fdb4 <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
   1fdb0:	4b1d      	ldr	r3, [pc, #116]	; (1fe28 <xTaskResumeAll+0x120>)
   1fdb2:	4798      	blx	r3
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
   1fdb4:	4b1d      	ldr	r3, [pc, #116]	; (1fe2c <xTaskResumeAll+0x124>)
   1fdb6:	681b      	ldr	r3, [r3, #0]
   1fdb8:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
   1fdba:	687b      	ldr	r3, [r7, #4]
   1fdbc:	2b00      	cmp	r3, #0
   1fdbe:	d00f      	beq.n	1fde0 <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
   1fdc0:	4b1b      	ldr	r3, [pc, #108]	; (1fe30 <xTaskResumeAll+0x128>)
   1fdc2:	4798      	blx	r3
   1fdc4:	1e03      	subs	r3, r0, #0
   1fdc6:	d002      	beq.n	1fdce <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
   1fdc8:	4b16      	ldr	r3, [pc, #88]	; (1fe24 <xTaskResumeAll+0x11c>)
   1fdca:	2201      	movs	r2, #1
   1fdcc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
   1fdce:	687b      	ldr	r3, [r7, #4]
   1fdd0:	3b01      	subs	r3, #1
   1fdd2:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
   1fdd4:	687b      	ldr	r3, [r7, #4]
   1fdd6:	2b00      	cmp	r3, #0
   1fdd8:	d1f2      	bne.n	1fdc0 <xTaskResumeAll+0xb8>

						uxPendedTicks = 0;
   1fdda:	4b14      	ldr	r3, [pc, #80]	; (1fe2c <xTaskResumeAll+0x124>)
   1fddc:	2200      	movs	r2, #0
   1fdde:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
   1fde0:	4b10      	ldr	r3, [pc, #64]	; (1fe24 <xTaskResumeAll+0x11c>)
   1fde2:	681b      	ldr	r3, [r3, #0]
   1fde4:	2b00      	cmp	r3, #0
   1fde6:	d003      	beq.n	1fdf0 <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
   1fde8:	2301      	movs	r3, #1
   1fdea:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
   1fdec:	4b11      	ldr	r3, [pc, #68]	; (1fe34 <xTaskResumeAll+0x12c>)
   1fdee:	4798      	blx	r3
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
   1fdf0:	4b11      	ldr	r3, [pc, #68]	; (1fe38 <xTaskResumeAll+0x130>)
   1fdf2:	4798      	blx	r3

	return xAlreadyYielded;
   1fdf4:	68bb      	ldr	r3, [r7, #8]
}
   1fdf6:	0018      	movs	r0, r3
   1fdf8:	46bd      	mov	sp, r7
   1fdfa:	b004      	add	sp, #16
   1fdfc:	bd80      	pop	{r7, pc}
   1fdfe:	46c0      	nop			; (mov r8, r8)
   1fe00:	200003c8 	.word	0x200003c8
   1fe04:	0001e8c1 	.word	0x0001e8c1
   1fe08:	200003a0 	.word	0x200003a0
   1fe0c:	20000360 	.word	0x20000360
   1fe10:	0001eb67 	.word	0x0001eb67
   1fe14:	200003a8 	.word	0x200003a8
   1fe18:	200002cc 	.word	0x200002cc
   1fe1c:	0001eab7 	.word	0x0001eab7
   1fe20:	200002c8 	.word	0x200002c8
   1fe24:	200003b4 	.word	0x200003b4
   1fe28:	00020419 	.word	0x00020419
   1fe2c:	200003b0 	.word	0x200003b0
   1fe30:	0001fe79 	.word	0x0001fe79
   1fe34:	0001e8a1 	.word	0x0001e8a1
   1fe38:	0001e8e5 	.word	0x0001e8e5

0001fe3c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
   1fe3c:	b580      	push	{r7, lr}
   1fe3e:	b082      	sub	sp, #8
   1fe40:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
   1fe42:	4b04      	ldr	r3, [pc, #16]	; (1fe54 <xTaskGetTickCount+0x18>)
   1fe44:	681b      	ldr	r3, [r3, #0]
   1fe46:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
   1fe48:	687b      	ldr	r3, [r7, #4]
}
   1fe4a:	0018      	movs	r0, r3
   1fe4c:	46bd      	mov	sp, r7
   1fe4e:	b002      	add	sp, #8
   1fe50:	bd80      	pop	{r7, pc}
   1fe52:	46c0      	nop			; (mov r8, r8)
   1fe54:	200003a4 	.word	0x200003a4

0001fe58 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
   1fe58:	b580      	push	{r7, lr}
   1fe5a:	b082      	sub	sp, #8
   1fe5c:	af00      	add	r7, sp, #0
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
   1fe5e:	2300      	movs	r3, #0
   1fe60:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
   1fe62:	4b04      	ldr	r3, [pc, #16]	; (1fe74 <xTaskGetTickCountFromISR+0x1c>)
   1fe64:	681b      	ldr	r3, [r3, #0]
   1fe66:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
   1fe68:	683b      	ldr	r3, [r7, #0]
}
   1fe6a:	0018      	movs	r0, r3
   1fe6c:	46bd      	mov	sp, r7
   1fe6e:	b002      	add	sp, #8
   1fe70:	bd80      	pop	{r7, pc}
   1fe72:	46c0      	nop			; (mov r8, r8)
   1fe74:	200003a4 	.word	0x200003a4

0001fe78 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
   1fe78:	b580      	push	{r7, lr}
   1fe7a:	b086      	sub	sp, #24
   1fe7c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
   1fe7e:	2300      	movs	r3, #0
   1fe80:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   1fe82:	4b4c      	ldr	r3, [pc, #304]	; (1ffb4 <xTaskIncrementTick+0x13c>)
   1fe84:	681b      	ldr	r3, [r3, #0]
   1fe86:	2b00      	cmp	r3, #0
   1fe88:	d000      	beq.n	1fe8c <xTaskIncrementTick+0x14>
   1fe8a:	e083      	b.n	1ff94 <xTaskIncrementTick+0x11c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
   1fe8c:	4b4a      	ldr	r3, [pc, #296]	; (1ffb8 <xTaskIncrementTick+0x140>)
   1fe8e:	681b      	ldr	r3, [r3, #0]
   1fe90:	3301      	adds	r3, #1
   1fe92:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
   1fe94:	4b48      	ldr	r3, [pc, #288]	; (1ffb8 <xTaskIncrementTick+0x140>)
   1fe96:	693a      	ldr	r2, [r7, #16]
   1fe98:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
   1fe9a:	693b      	ldr	r3, [r7, #16]
   1fe9c:	2b00      	cmp	r3, #0
   1fe9e:	d117      	bne.n	1fed0 <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
   1fea0:	4b46      	ldr	r3, [pc, #280]	; (1ffbc <xTaskIncrementTick+0x144>)
   1fea2:	681b      	ldr	r3, [r3, #0]
   1fea4:	681b      	ldr	r3, [r3, #0]
   1fea6:	2b00      	cmp	r3, #0
   1fea8:	d001      	beq.n	1feae <xTaskIncrementTick+0x36>
   1feaa:	b672      	cpsid	i
   1feac:	e7fe      	b.n	1feac <xTaskIncrementTick+0x34>
   1feae:	4b43      	ldr	r3, [pc, #268]	; (1ffbc <xTaskIncrementTick+0x144>)
   1feb0:	681b      	ldr	r3, [r3, #0]
   1feb2:	60fb      	str	r3, [r7, #12]
   1feb4:	4b42      	ldr	r3, [pc, #264]	; (1ffc0 <xTaskIncrementTick+0x148>)
   1feb6:	681a      	ldr	r2, [r3, #0]
   1feb8:	4b40      	ldr	r3, [pc, #256]	; (1ffbc <xTaskIncrementTick+0x144>)
   1feba:	601a      	str	r2, [r3, #0]
   1febc:	4b40      	ldr	r3, [pc, #256]	; (1ffc0 <xTaskIncrementTick+0x148>)
   1febe:	68fa      	ldr	r2, [r7, #12]
   1fec0:	601a      	str	r2, [r3, #0]
   1fec2:	4b40      	ldr	r3, [pc, #256]	; (1ffc4 <xTaskIncrementTick+0x14c>)
   1fec4:	681b      	ldr	r3, [r3, #0]
   1fec6:	1c5a      	adds	r2, r3, #1
   1fec8:	4b3e      	ldr	r3, [pc, #248]	; (1ffc4 <xTaskIncrementTick+0x14c>)
   1feca:	601a      	str	r2, [r3, #0]
   1fecc:	4b3e      	ldr	r3, [pc, #248]	; (1ffc8 <xTaskIncrementTick+0x150>)
   1fece:	4798      	blx	r3

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
   1fed0:	4b3e      	ldr	r3, [pc, #248]	; (1ffcc <xTaskIncrementTick+0x154>)
   1fed2:	681b      	ldr	r3, [r3, #0]
   1fed4:	693a      	ldr	r2, [r7, #16]
   1fed6:	429a      	cmp	r2, r3
   1fed8:	d34e      	bcc.n	1ff78 <xTaskIncrementTick+0x100>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   1feda:	4b38      	ldr	r3, [pc, #224]	; (1ffbc <xTaskIncrementTick+0x144>)
   1fedc:	681b      	ldr	r3, [r3, #0]
   1fede:	681b      	ldr	r3, [r3, #0]
   1fee0:	2b00      	cmp	r3, #0
   1fee2:	d101      	bne.n	1fee8 <xTaskIncrementTick+0x70>
   1fee4:	2301      	movs	r3, #1
   1fee6:	e000      	b.n	1feea <xTaskIncrementTick+0x72>
   1fee8:	2300      	movs	r3, #0
   1feea:	2b00      	cmp	r3, #0
   1feec:	d004      	beq.n	1fef8 <xTaskIncrementTick+0x80>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1feee:	4b37      	ldr	r3, [pc, #220]	; (1ffcc <xTaskIncrementTick+0x154>)
   1fef0:	2201      	movs	r2, #1
   1fef2:	4252      	negs	r2, r2
   1fef4:	601a      	str	r2, [r3, #0]
					break;
   1fef6:	e03f      	b.n	1ff78 <xTaskIncrementTick+0x100>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   1fef8:	4b30      	ldr	r3, [pc, #192]	; (1ffbc <xTaskIncrementTick+0x144>)
   1fefa:	681b      	ldr	r3, [r3, #0]
   1fefc:	68db      	ldr	r3, [r3, #12]
   1fefe:	68db      	ldr	r3, [r3, #12]
   1ff00:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
   1ff02:	68bb      	ldr	r3, [r7, #8]
   1ff04:	685b      	ldr	r3, [r3, #4]
   1ff06:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
   1ff08:	693a      	ldr	r2, [r7, #16]
   1ff0a:	687b      	ldr	r3, [r7, #4]
   1ff0c:	429a      	cmp	r2, r3
   1ff0e:	d203      	bcs.n	1ff18 <xTaskIncrementTick+0xa0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
   1ff10:	4b2e      	ldr	r3, [pc, #184]	; (1ffcc <xTaskIncrementTick+0x154>)
   1ff12:	687a      	ldr	r2, [r7, #4]
   1ff14:	601a      	str	r2, [r3, #0]
						break;
   1ff16:	e02f      	b.n	1ff78 <xTaskIncrementTick+0x100>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   1ff18:	68bb      	ldr	r3, [r7, #8]
   1ff1a:	3304      	adds	r3, #4
   1ff1c:	0018      	movs	r0, r3
   1ff1e:	4b2c      	ldr	r3, [pc, #176]	; (1ffd0 <xTaskIncrementTick+0x158>)
   1ff20:	4798      	blx	r3

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
   1ff22:	68bb      	ldr	r3, [r7, #8]
   1ff24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1ff26:	2b00      	cmp	r3, #0
   1ff28:	d004      	beq.n	1ff34 <xTaskIncrementTick+0xbc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   1ff2a:	68bb      	ldr	r3, [r7, #8]
   1ff2c:	3318      	adds	r3, #24
   1ff2e:	0018      	movs	r0, r3
   1ff30:	4b27      	ldr	r3, [pc, #156]	; (1ffd0 <xTaskIncrementTick+0x158>)
   1ff32:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
   1ff34:	68bb      	ldr	r3, [r7, #8]
   1ff36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1ff38:	4b26      	ldr	r3, [pc, #152]	; (1ffd4 <xTaskIncrementTick+0x15c>)
   1ff3a:	681b      	ldr	r3, [r3, #0]
   1ff3c:	429a      	cmp	r2, r3
   1ff3e:	d903      	bls.n	1ff48 <xTaskIncrementTick+0xd0>
   1ff40:	68bb      	ldr	r3, [r7, #8]
   1ff42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1ff44:	4b23      	ldr	r3, [pc, #140]	; (1ffd4 <xTaskIncrementTick+0x15c>)
   1ff46:	601a      	str	r2, [r3, #0]
   1ff48:	68bb      	ldr	r3, [r7, #8]
   1ff4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1ff4c:	0013      	movs	r3, r2
   1ff4e:	009b      	lsls	r3, r3, #2
   1ff50:	189b      	adds	r3, r3, r2
   1ff52:	009b      	lsls	r3, r3, #2
   1ff54:	4a20      	ldr	r2, [pc, #128]	; (1ffd8 <xTaskIncrementTick+0x160>)
   1ff56:	189a      	adds	r2, r3, r2
   1ff58:	68bb      	ldr	r3, [r7, #8]
   1ff5a:	3304      	adds	r3, #4
   1ff5c:	0019      	movs	r1, r3
   1ff5e:	0010      	movs	r0, r2
   1ff60:	4b1e      	ldr	r3, [pc, #120]	; (1ffdc <xTaskIncrementTick+0x164>)
   1ff62:	4798      	blx	r3
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   1ff64:	68bb      	ldr	r3, [r7, #8]
   1ff66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1ff68:	4b1d      	ldr	r3, [pc, #116]	; (1ffe0 <xTaskIncrementTick+0x168>)
   1ff6a:	681b      	ldr	r3, [r3, #0]
   1ff6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1ff6e:	429a      	cmp	r2, r3
   1ff70:	d3b3      	bcc.n	1feda <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
   1ff72:	2301      	movs	r3, #1
   1ff74:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   1ff76:	e7b0      	b.n	1feda <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
   1ff78:	4b19      	ldr	r3, [pc, #100]	; (1ffe0 <xTaskIncrementTick+0x168>)
   1ff7a:	681b      	ldr	r3, [r3, #0]
   1ff7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1ff7e:	4916      	ldr	r1, [pc, #88]	; (1ffd8 <xTaskIncrementTick+0x160>)
   1ff80:	0013      	movs	r3, r2
   1ff82:	009b      	lsls	r3, r3, #2
   1ff84:	189b      	adds	r3, r3, r2
   1ff86:	009b      	lsls	r3, r3, #2
   1ff88:	585b      	ldr	r3, [r3, r1]
   1ff8a:	2b01      	cmp	r3, #1
   1ff8c:	d907      	bls.n	1ff9e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
   1ff8e:	2301      	movs	r3, #1
   1ff90:	617b      	str	r3, [r7, #20]
   1ff92:	e004      	b.n	1ff9e <xTaskIncrementTick+0x126>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
   1ff94:	4b13      	ldr	r3, [pc, #76]	; (1ffe4 <xTaskIncrementTick+0x16c>)
   1ff96:	681b      	ldr	r3, [r3, #0]
   1ff98:	1c5a      	adds	r2, r3, #1
   1ff9a:	4b12      	ldr	r3, [pc, #72]	; (1ffe4 <xTaskIncrementTick+0x16c>)
   1ff9c:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
   1ff9e:	4b12      	ldr	r3, [pc, #72]	; (1ffe8 <xTaskIncrementTick+0x170>)
   1ffa0:	681b      	ldr	r3, [r3, #0]
   1ffa2:	2b00      	cmp	r3, #0
   1ffa4:	d001      	beq.n	1ffaa <xTaskIncrementTick+0x132>
		{
			xSwitchRequired = pdTRUE;
   1ffa6:	2301      	movs	r3, #1
   1ffa8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
   1ffaa:	697b      	ldr	r3, [r7, #20]
}
   1ffac:	0018      	movs	r0, r3
   1ffae:	46bd      	mov	sp, r7
   1ffb0:	b006      	add	sp, #24
   1ffb2:	bd80      	pop	{r7, pc}
   1ffb4:	200003c8 	.word	0x200003c8
   1ffb8:	200003a4 	.word	0x200003a4
   1ffbc:	20000358 	.word	0x20000358
   1ffc0:	2000035c 	.word	0x2000035c
   1ffc4:	200003b8 	.word	0x200003b8
   1ffc8:	00020419 	.word	0x00020419
   1ffcc:	200003c0 	.word	0x200003c0
   1ffd0:	0001eb67 	.word	0x0001eb67
   1ffd4:	200003a8 	.word	0x200003a8
   1ffd8:	200002cc 	.word	0x200002cc
   1ffdc:	0001eab7 	.word	0x0001eab7
   1ffe0:	200002c8 	.word	0x200002c8
   1ffe4:	200003b0 	.word	0x200003b0
   1ffe8:	200003b4 	.word	0x200003b4

0001ffec <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
   1ffec:	b580      	push	{r7, lr}
   1ffee:	b082      	sub	sp, #8
   1fff0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
   1fff2:	4b22      	ldr	r3, [pc, #136]	; (2007c <vTaskSwitchContext+0x90>)
   1fff4:	681b      	ldr	r3, [r3, #0]
   1fff6:	2b00      	cmp	r3, #0
   1fff8:	d003      	beq.n	20002 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
   1fffa:	4b21      	ldr	r3, [pc, #132]	; (20080 <vTaskSwitchContext+0x94>)
   1fffc:	2201      	movs	r2, #1
   1fffe:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
   20000:	e037      	b.n	20072 <vTaskSwitchContext+0x86>
		xYieldPending = pdFALSE;
   20002:	4b1f      	ldr	r3, [pc, #124]	; (20080 <vTaskSwitchContext+0x94>)
   20004:	2200      	movs	r2, #0
   20006:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
   20008:	4b1e      	ldr	r3, [pc, #120]	; (20084 <vTaskSwitchContext+0x98>)
   2000a:	681b      	ldr	r3, [r3, #0]
   2000c:	607b      	str	r3, [r7, #4]
   2000e:	e007      	b.n	20020 <vTaskSwitchContext+0x34>
   20010:	687b      	ldr	r3, [r7, #4]
   20012:	2b00      	cmp	r3, #0
   20014:	d101      	bne.n	2001a <vTaskSwitchContext+0x2e>
   20016:	b672      	cpsid	i
   20018:	e7fe      	b.n	20018 <vTaskSwitchContext+0x2c>
   2001a:	687b      	ldr	r3, [r7, #4]
   2001c:	3b01      	subs	r3, #1
   2001e:	607b      	str	r3, [r7, #4]
   20020:	4919      	ldr	r1, [pc, #100]	; (20088 <vTaskSwitchContext+0x9c>)
   20022:	687a      	ldr	r2, [r7, #4]
   20024:	0013      	movs	r3, r2
   20026:	009b      	lsls	r3, r3, #2
   20028:	189b      	adds	r3, r3, r2
   2002a:	009b      	lsls	r3, r3, #2
   2002c:	585b      	ldr	r3, [r3, r1]
   2002e:	2b00      	cmp	r3, #0
   20030:	d0ee      	beq.n	20010 <vTaskSwitchContext+0x24>
   20032:	687a      	ldr	r2, [r7, #4]
   20034:	0013      	movs	r3, r2
   20036:	009b      	lsls	r3, r3, #2
   20038:	189b      	adds	r3, r3, r2
   2003a:	009b      	lsls	r3, r3, #2
   2003c:	4a12      	ldr	r2, [pc, #72]	; (20088 <vTaskSwitchContext+0x9c>)
   2003e:	189b      	adds	r3, r3, r2
   20040:	603b      	str	r3, [r7, #0]
   20042:	683b      	ldr	r3, [r7, #0]
   20044:	685b      	ldr	r3, [r3, #4]
   20046:	685a      	ldr	r2, [r3, #4]
   20048:	683b      	ldr	r3, [r7, #0]
   2004a:	605a      	str	r2, [r3, #4]
   2004c:	683b      	ldr	r3, [r7, #0]
   2004e:	685a      	ldr	r2, [r3, #4]
   20050:	683b      	ldr	r3, [r7, #0]
   20052:	3308      	adds	r3, #8
   20054:	429a      	cmp	r2, r3
   20056:	d104      	bne.n	20062 <vTaskSwitchContext+0x76>
   20058:	683b      	ldr	r3, [r7, #0]
   2005a:	685b      	ldr	r3, [r3, #4]
   2005c:	685a      	ldr	r2, [r3, #4]
   2005e:	683b      	ldr	r3, [r7, #0]
   20060:	605a      	str	r2, [r3, #4]
   20062:	683b      	ldr	r3, [r7, #0]
   20064:	685b      	ldr	r3, [r3, #4]
   20066:	68da      	ldr	r2, [r3, #12]
   20068:	4b08      	ldr	r3, [pc, #32]	; (2008c <vTaskSwitchContext+0xa0>)
   2006a:	601a      	str	r2, [r3, #0]
   2006c:	4b05      	ldr	r3, [pc, #20]	; (20084 <vTaskSwitchContext+0x98>)
   2006e:	687a      	ldr	r2, [r7, #4]
   20070:	601a      	str	r2, [r3, #0]
}
   20072:	46c0      	nop			; (mov r8, r8)
   20074:	46bd      	mov	sp, r7
   20076:	b002      	add	sp, #8
   20078:	bd80      	pop	{r7, pc}
   2007a:	46c0      	nop			; (mov r8, r8)
   2007c:	200003c8 	.word	0x200003c8
   20080:	200003b4 	.word	0x200003b4
   20084:	200003a8 	.word	0x200003a8
   20088:	200002cc 	.word	0x200002cc
   2008c:	200002c8 	.word	0x200002c8

00020090 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
   20090:	b580      	push	{r7, lr}
   20092:	b082      	sub	sp, #8
   20094:	af00      	add	r7, sp, #0
   20096:	6078      	str	r0, [r7, #4]
   20098:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
   2009a:	687b      	ldr	r3, [r7, #4]
   2009c:	2b00      	cmp	r3, #0
   2009e:	d101      	bne.n	200a4 <vTaskPlaceOnEventList+0x14>
   200a0:	b672      	cpsid	i
   200a2:	e7fe      	b.n	200a2 <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
   200a4:	4b08      	ldr	r3, [pc, #32]	; (200c8 <vTaskPlaceOnEventList+0x38>)
   200a6:	681b      	ldr	r3, [r3, #0]
   200a8:	3318      	adds	r3, #24
   200aa:	001a      	movs	r2, r3
   200ac:	687b      	ldr	r3, [r7, #4]
   200ae:	0011      	movs	r1, r2
   200b0:	0018      	movs	r0, r3
   200b2:	4b06      	ldr	r3, [pc, #24]	; (200cc <vTaskPlaceOnEventList+0x3c>)
   200b4:	4798      	blx	r3

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
   200b6:	683b      	ldr	r3, [r7, #0]
   200b8:	2101      	movs	r1, #1
   200ba:	0018      	movs	r0, r3
   200bc:	4b04      	ldr	r3, [pc, #16]	; (200d0 <vTaskPlaceOnEventList+0x40>)
   200be:	4798      	blx	r3
}
   200c0:	46c0      	nop			; (mov r8, r8)
   200c2:	46bd      	mov	sp, r7
   200c4:	b002      	add	sp, #8
   200c6:	bd80      	pop	{r7, pc}
   200c8:	200002c8 	.word	0x200002c8
   200cc:	0001eafb 	.word	0x0001eafb
   200d0:	000208e9 	.word	0x000208e9

000200d4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
   200d4:	b580      	push	{r7, lr}
   200d6:	b084      	sub	sp, #16
   200d8:	af00      	add	r7, sp, #0
   200da:	60f8      	str	r0, [r7, #12]
   200dc:	60b9      	str	r1, [r7, #8]
   200de:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
   200e0:	68fb      	ldr	r3, [r7, #12]
   200e2:	2b00      	cmp	r3, #0
   200e4:	d101      	bne.n	200ea <vTaskPlaceOnEventListRestricted+0x16>
   200e6:	b672      	cpsid	i
   200e8:	e7fe      	b.n	200e8 <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
   200ea:	4b0c      	ldr	r3, [pc, #48]	; (2011c <vTaskPlaceOnEventListRestricted+0x48>)
   200ec:	681b      	ldr	r3, [r3, #0]
   200ee:	3318      	adds	r3, #24
   200f0:	001a      	movs	r2, r3
   200f2:	68fb      	ldr	r3, [r7, #12]
   200f4:	0011      	movs	r1, r2
   200f6:	0018      	movs	r0, r3
   200f8:	4b09      	ldr	r3, [pc, #36]	; (20120 <vTaskPlaceOnEventListRestricted+0x4c>)
   200fa:	4798      	blx	r3

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
   200fc:	687b      	ldr	r3, [r7, #4]
   200fe:	2b00      	cmp	r3, #0
   20100:	d002      	beq.n	20108 <vTaskPlaceOnEventListRestricted+0x34>
		{
			xTicksToWait = portMAX_DELAY;
   20102:	2301      	movs	r3, #1
   20104:	425b      	negs	r3, r3
   20106:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
   20108:	687a      	ldr	r2, [r7, #4]
   2010a:	68bb      	ldr	r3, [r7, #8]
   2010c:	0011      	movs	r1, r2
   2010e:	0018      	movs	r0, r3
   20110:	4b04      	ldr	r3, [pc, #16]	; (20124 <vTaskPlaceOnEventListRestricted+0x50>)
   20112:	4798      	blx	r3
	}
   20114:	46c0      	nop			; (mov r8, r8)
   20116:	46bd      	mov	sp, r7
   20118:	b004      	add	sp, #16
   2011a:	bd80      	pop	{r7, pc}
   2011c:	200002c8 	.word	0x200002c8
   20120:	0001eab7 	.word	0x0001eab7
   20124:	000208e9 	.word	0x000208e9

00020128 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
   20128:	b580      	push	{r7, lr}
   2012a:	b084      	sub	sp, #16
   2012c:	af00      	add	r7, sp, #0
   2012e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
   20130:	687b      	ldr	r3, [r7, #4]
   20132:	68db      	ldr	r3, [r3, #12]
   20134:	68db      	ldr	r3, [r3, #12]
   20136:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
   20138:	68bb      	ldr	r3, [r7, #8]
   2013a:	2b00      	cmp	r3, #0
   2013c:	d101      	bne.n	20142 <xTaskRemoveFromEventList+0x1a>
   2013e:	b672      	cpsid	i
   20140:	e7fe      	b.n	20140 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
   20142:	68bb      	ldr	r3, [r7, #8]
   20144:	3318      	adds	r3, #24
   20146:	0018      	movs	r0, r3
   20148:	4b1f      	ldr	r3, [pc, #124]	; (201c8 <xTaskRemoveFromEventList+0xa0>)
   2014a:	4798      	blx	r3

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   2014c:	4b1f      	ldr	r3, [pc, #124]	; (201cc <xTaskRemoveFromEventList+0xa4>)
   2014e:	681b      	ldr	r3, [r3, #0]
   20150:	2b00      	cmp	r3, #0
   20152:	d11d      	bne.n	20190 <xTaskRemoveFromEventList+0x68>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
   20154:	68bb      	ldr	r3, [r7, #8]
   20156:	3304      	adds	r3, #4
   20158:	0018      	movs	r0, r3
   2015a:	4b1b      	ldr	r3, [pc, #108]	; (201c8 <xTaskRemoveFromEventList+0xa0>)
   2015c:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
   2015e:	68bb      	ldr	r3, [r7, #8]
   20160:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   20162:	4b1b      	ldr	r3, [pc, #108]	; (201d0 <xTaskRemoveFromEventList+0xa8>)
   20164:	681b      	ldr	r3, [r3, #0]
   20166:	429a      	cmp	r2, r3
   20168:	d903      	bls.n	20172 <xTaskRemoveFromEventList+0x4a>
   2016a:	68bb      	ldr	r3, [r7, #8]
   2016c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2016e:	4b18      	ldr	r3, [pc, #96]	; (201d0 <xTaskRemoveFromEventList+0xa8>)
   20170:	601a      	str	r2, [r3, #0]
   20172:	68bb      	ldr	r3, [r7, #8]
   20174:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   20176:	0013      	movs	r3, r2
   20178:	009b      	lsls	r3, r3, #2
   2017a:	189b      	adds	r3, r3, r2
   2017c:	009b      	lsls	r3, r3, #2
   2017e:	4a15      	ldr	r2, [pc, #84]	; (201d4 <xTaskRemoveFromEventList+0xac>)
   20180:	189a      	adds	r2, r3, r2
   20182:	68bb      	ldr	r3, [r7, #8]
   20184:	3304      	adds	r3, #4
   20186:	0019      	movs	r1, r3
   20188:	0010      	movs	r0, r2
   2018a:	4b13      	ldr	r3, [pc, #76]	; (201d8 <xTaskRemoveFromEventList+0xb0>)
   2018c:	4798      	blx	r3
   2018e:	e007      	b.n	201a0 <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
   20190:	68bb      	ldr	r3, [r7, #8]
   20192:	3318      	adds	r3, #24
   20194:	001a      	movs	r2, r3
   20196:	4b11      	ldr	r3, [pc, #68]	; (201dc <xTaskRemoveFromEventList+0xb4>)
   20198:	0011      	movs	r1, r2
   2019a:	0018      	movs	r0, r3
   2019c:	4b0e      	ldr	r3, [pc, #56]	; (201d8 <xTaskRemoveFromEventList+0xb0>)
   2019e:	4798      	blx	r3
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
   201a0:	68bb      	ldr	r3, [r7, #8]
   201a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   201a4:	4b0e      	ldr	r3, [pc, #56]	; (201e0 <xTaskRemoveFromEventList+0xb8>)
   201a6:	681b      	ldr	r3, [r3, #0]
   201a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   201aa:	429a      	cmp	r2, r3
   201ac:	d905      	bls.n	201ba <xTaskRemoveFromEventList+0x92>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
   201ae:	2301      	movs	r3, #1
   201b0:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
   201b2:	4b0c      	ldr	r3, [pc, #48]	; (201e4 <xTaskRemoveFromEventList+0xbc>)
   201b4:	2201      	movs	r2, #1
   201b6:	601a      	str	r2, [r3, #0]
   201b8:	e001      	b.n	201be <xTaskRemoveFromEventList+0x96>
	}
	else
	{
		xReturn = pdFALSE;
   201ba:	2300      	movs	r3, #0
   201bc:	60fb      	str	r3, [r7, #12]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
   201be:	68fb      	ldr	r3, [r7, #12]
}
   201c0:	0018      	movs	r0, r3
   201c2:	46bd      	mov	sp, r7
   201c4:	b004      	add	sp, #16
   201c6:	bd80      	pop	{r7, pc}
   201c8:	0001eb67 	.word	0x0001eb67
   201cc:	200003c8 	.word	0x200003c8
   201d0:	200003a8 	.word	0x200003a8
   201d4:	200002cc 	.word	0x200002cc
   201d8:	0001eab7 	.word	0x0001eab7
   201dc:	20000360 	.word	0x20000360
   201e0:	200002c8 	.word	0x200002c8
   201e4:	200003b4 	.word	0x200003b4

000201e8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
   201e8:	b580      	push	{r7, lr}
   201ea:	b082      	sub	sp, #8
   201ec:	af00      	add	r7, sp, #0
   201ee:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
   201f0:	4b05      	ldr	r3, [pc, #20]	; (20208 <vTaskInternalSetTimeOutState+0x20>)
   201f2:	681a      	ldr	r2, [r3, #0]
   201f4:	687b      	ldr	r3, [r7, #4]
   201f6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
   201f8:	4b04      	ldr	r3, [pc, #16]	; (2020c <vTaskInternalSetTimeOutState+0x24>)
   201fa:	681a      	ldr	r2, [r3, #0]
   201fc:	687b      	ldr	r3, [r7, #4]
   201fe:	605a      	str	r2, [r3, #4]
}
   20200:	46c0      	nop			; (mov r8, r8)
   20202:	46bd      	mov	sp, r7
   20204:	b002      	add	sp, #8
   20206:	bd80      	pop	{r7, pc}
   20208:	200003b8 	.word	0x200003b8
   2020c:	200003a4 	.word	0x200003a4

00020210 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
   20210:	b580      	push	{r7, lr}
   20212:	b086      	sub	sp, #24
   20214:	af00      	add	r7, sp, #0
   20216:	6078      	str	r0, [r7, #4]
   20218:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
   2021a:	687b      	ldr	r3, [r7, #4]
   2021c:	2b00      	cmp	r3, #0
   2021e:	d101      	bne.n	20224 <xTaskCheckForTimeOut+0x14>
   20220:	b672      	cpsid	i
   20222:	e7fe      	b.n	20222 <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
   20224:	683b      	ldr	r3, [r7, #0]
   20226:	2b00      	cmp	r3, #0
   20228:	d101      	bne.n	2022e <xTaskCheckForTimeOut+0x1e>
   2022a:	b672      	cpsid	i
   2022c:	e7fe      	b.n	2022c <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
   2022e:	4b1e      	ldr	r3, [pc, #120]	; (202a8 <xTaskCheckForTimeOut+0x98>)
   20230:	4798      	blx	r3
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
   20232:	4b1e      	ldr	r3, [pc, #120]	; (202ac <xTaskCheckForTimeOut+0x9c>)
   20234:	681b      	ldr	r3, [r3, #0]
   20236:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
   20238:	687b      	ldr	r3, [r7, #4]
   2023a:	685b      	ldr	r3, [r3, #4]
   2023c:	693a      	ldr	r2, [r7, #16]
   2023e:	1ad3      	subs	r3, r2, r3
   20240:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
   20242:	683b      	ldr	r3, [r7, #0]
   20244:	681b      	ldr	r3, [r3, #0]
   20246:	3301      	adds	r3, #1
   20248:	d102      	bne.n	20250 <xTaskCheckForTimeOut+0x40>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
   2024a:	2300      	movs	r3, #0
   2024c:	617b      	str	r3, [r7, #20]
   2024e:	e024      	b.n	2029a <xTaskCheckForTimeOut+0x8a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
   20250:	687b      	ldr	r3, [r7, #4]
   20252:	681a      	ldr	r2, [r3, #0]
   20254:	4b16      	ldr	r3, [pc, #88]	; (202b0 <xTaskCheckForTimeOut+0xa0>)
   20256:	681b      	ldr	r3, [r3, #0]
   20258:	429a      	cmp	r2, r3
   2025a:	d007      	beq.n	2026c <xTaskCheckForTimeOut+0x5c>
   2025c:	687b      	ldr	r3, [r7, #4]
   2025e:	685a      	ldr	r2, [r3, #4]
   20260:	693b      	ldr	r3, [r7, #16]
   20262:	429a      	cmp	r2, r3
   20264:	d802      	bhi.n	2026c <xTaskCheckForTimeOut+0x5c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
   20266:	2301      	movs	r3, #1
   20268:	617b      	str	r3, [r7, #20]
   2026a:	e016      	b.n	2029a <xTaskCheckForTimeOut+0x8a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
   2026c:	683b      	ldr	r3, [r7, #0]
   2026e:	681a      	ldr	r2, [r3, #0]
   20270:	68fb      	ldr	r3, [r7, #12]
   20272:	429a      	cmp	r2, r3
   20274:	d90c      	bls.n	20290 <xTaskCheckForTimeOut+0x80>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
   20276:	683b      	ldr	r3, [r7, #0]
   20278:	681a      	ldr	r2, [r3, #0]
   2027a:	68fb      	ldr	r3, [r7, #12]
   2027c:	1ad2      	subs	r2, r2, r3
   2027e:	683b      	ldr	r3, [r7, #0]
   20280:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
   20282:	687b      	ldr	r3, [r7, #4]
   20284:	0018      	movs	r0, r3
   20286:	4b0b      	ldr	r3, [pc, #44]	; (202b4 <xTaskCheckForTimeOut+0xa4>)
   20288:	4798      	blx	r3
			xReturn = pdFALSE;
   2028a:	2300      	movs	r3, #0
   2028c:	617b      	str	r3, [r7, #20]
   2028e:	e004      	b.n	2029a <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			*pxTicksToWait = 0;
   20290:	683b      	ldr	r3, [r7, #0]
   20292:	2200      	movs	r2, #0
   20294:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
   20296:	2301      	movs	r3, #1
   20298:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
   2029a:	4b07      	ldr	r3, [pc, #28]	; (202b8 <xTaskCheckForTimeOut+0xa8>)
   2029c:	4798      	blx	r3

	return xReturn;
   2029e:	697b      	ldr	r3, [r7, #20]
}
   202a0:	0018      	movs	r0, r3
   202a2:	46bd      	mov	sp, r7
   202a4:	b006      	add	sp, #24
   202a6:	bd80      	pop	{r7, pc}
   202a8:	0001e8c1 	.word	0x0001e8c1
   202ac:	200003a4 	.word	0x200003a4
   202b0:	200003b8 	.word	0x200003b8
   202b4:	000201e9 	.word	0x000201e9
   202b8:	0001e8e5 	.word	0x0001e8e5

000202bc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
   202bc:	b580      	push	{r7, lr}
   202be:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
   202c0:	4b02      	ldr	r3, [pc, #8]	; (202cc <vTaskMissedYield+0x10>)
   202c2:	2201      	movs	r2, #1
   202c4:	601a      	str	r2, [r3, #0]
}
   202c6:	46c0      	nop			; (mov r8, r8)
   202c8:	46bd      	mov	sp, r7
   202ca:	bd80      	pop	{r7, pc}
   202cc:	200003b4 	.word	0x200003b4

000202d0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
   202d0:	b580      	push	{r7, lr}
   202d2:	b082      	sub	sp, #8
   202d4:	af00      	add	r7, sp, #0
   202d6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
   202d8:	4b04      	ldr	r3, [pc, #16]	; (202ec <prvIdleTask+0x1c>)
   202da:	4798      	blx	r3

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
   202dc:	4b04      	ldr	r3, [pc, #16]	; (202f0 <prvIdleTask+0x20>)
   202de:	681b      	ldr	r3, [r3, #0]
   202e0:	2b01      	cmp	r3, #1
   202e2:	d9f9      	bls.n	202d8 <prvIdleTask+0x8>
			{
				taskYIELD();
   202e4:	4b03      	ldr	r3, [pc, #12]	; (202f4 <prvIdleTask+0x24>)
   202e6:	4798      	blx	r3
		prvCheckTasksWaitingTermination();
   202e8:	e7f6      	b.n	202d8 <prvIdleTask+0x8>
   202ea:	46c0      	nop			; (mov r8, r8)
   202ec:	00020385 	.word	0x00020385
   202f0:	200002cc 	.word	0x200002cc
   202f4:	0001e8a1 	.word	0x0001e8a1

000202f8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
   202f8:	b580      	push	{r7, lr}
   202fa:	b082      	sub	sp, #8
   202fc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
   202fe:	2300      	movs	r3, #0
   20300:	607b      	str	r3, [r7, #4]
   20302:	e00c      	b.n	2031e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
   20304:	687a      	ldr	r2, [r7, #4]
   20306:	0013      	movs	r3, r2
   20308:	009b      	lsls	r3, r3, #2
   2030a:	189b      	adds	r3, r3, r2
   2030c:	009b      	lsls	r3, r3, #2
   2030e:	4a14      	ldr	r2, [pc, #80]	; (20360 <prvInitialiseTaskLists+0x68>)
   20310:	189b      	adds	r3, r3, r2
   20312:	0018      	movs	r0, r3
   20314:	4b13      	ldr	r3, [pc, #76]	; (20364 <prvInitialiseTaskLists+0x6c>)
   20316:	4798      	blx	r3
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
   20318:	687b      	ldr	r3, [r7, #4]
   2031a:	3301      	adds	r3, #1
   2031c:	607b      	str	r3, [r7, #4]
   2031e:	687b      	ldr	r3, [r7, #4]
   20320:	2b04      	cmp	r3, #4
   20322:	d9ef      	bls.n	20304 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
   20324:	4b10      	ldr	r3, [pc, #64]	; (20368 <prvInitialiseTaskLists+0x70>)
   20326:	0018      	movs	r0, r3
   20328:	4b0e      	ldr	r3, [pc, #56]	; (20364 <prvInitialiseTaskLists+0x6c>)
   2032a:	4798      	blx	r3
	vListInitialise( &xDelayedTaskList2 );
   2032c:	4b0f      	ldr	r3, [pc, #60]	; (2036c <prvInitialiseTaskLists+0x74>)
   2032e:	0018      	movs	r0, r3
   20330:	4b0c      	ldr	r3, [pc, #48]	; (20364 <prvInitialiseTaskLists+0x6c>)
   20332:	4798      	blx	r3
	vListInitialise( &xPendingReadyList );
   20334:	4b0e      	ldr	r3, [pc, #56]	; (20370 <prvInitialiseTaskLists+0x78>)
   20336:	0018      	movs	r0, r3
   20338:	4b0a      	ldr	r3, [pc, #40]	; (20364 <prvInitialiseTaskLists+0x6c>)
   2033a:	4798      	blx	r3

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
   2033c:	4b0d      	ldr	r3, [pc, #52]	; (20374 <prvInitialiseTaskLists+0x7c>)
   2033e:	0018      	movs	r0, r3
   20340:	4b08      	ldr	r3, [pc, #32]	; (20364 <prvInitialiseTaskLists+0x6c>)
   20342:	4798      	blx	r3
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
   20344:	4b0c      	ldr	r3, [pc, #48]	; (20378 <prvInitialiseTaskLists+0x80>)
   20346:	0018      	movs	r0, r3
   20348:	4b06      	ldr	r3, [pc, #24]	; (20364 <prvInitialiseTaskLists+0x6c>)
   2034a:	4798      	blx	r3
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
   2034c:	4b0b      	ldr	r3, [pc, #44]	; (2037c <prvInitialiseTaskLists+0x84>)
   2034e:	4a06      	ldr	r2, [pc, #24]	; (20368 <prvInitialiseTaskLists+0x70>)
   20350:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
   20352:	4b0b      	ldr	r3, [pc, #44]	; (20380 <prvInitialiseTaskLists+0x88>)
   20354:	4a05      	ldr	r2, [pc, #20]	; (2036c <prvInitialiseTaskLists+0x74>)
   20356:	601a      	str	r2, [r3, #0]
}
   20358:	46c0      	nop			; (mov r8, r8)
   2035a:	46bd      	mov	sp, r7
   2035c:	b002      	add	sp, #8
   2035e:	bd80      	pop	{r7, pc}
   20360:	200002cc 	.word	0x200002cc
   20364:	0001ea65 	.word	0x0001ea65
   20368:	20000330 	.word	0x20000330
   2036c:	20000344 	.word	0x20000344
   20370:	20000360 	.word	0x20000360
   20374:	20000374 	.word	0x20000374
   20378:	2000038c 	.word	0x2000038c
   2037c:	20000358 	.word	0x20000358
   20380:	2000035c 	.word	0x2000035c

00020384 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
   20384:	b580      	push	{r7, lr}
   20386:	b082      	sub	sp, #8
   20388:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
   2038a:	e01a      	b.n	203c2 <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
   2038c:	4b11      	ldr	r3, [pc, #68]	; (203d4 <prvCheckTasksWaitingTermination+0x50>)
   2038e:	4798      	blx	r3
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
   20390:	4b11      	ldr	r3, [pc, #68]	; (203d8 <prvCheckTasksWaitingTermination+0x54>)
   20392:	68db      	ldr	r3, [r3, #12]
   20394:	68db      	ldr	r3, [r3, #12]
   20396:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   20398:	687b      	ldr	r3, [r7, #4]
   2039a:	3304      	adds	r3, #4
   2039c:	0018      	movs	r0, r3
   2039e:	4b0f      	ldr	r3, [pc, #60]	; (203dc <prvCheckTasksWaitingTermination+0x58>)
   203a0:	4798      	blx	r3
				--uxCurrentNumberOfTasks;
   203a2:	4b0f      	ldr	r3, [pc, #60]	; (203e0 <prvCheckTasksWaitingTermination+0x5c>)
   203a4:	681b      	ldr	r3, [r3, #0]
   203a6:	1e5a      	subs	r2, r3, #1
   203a8:	4b0d      	ldr	r3, [pc, #52]	; (203e0 <prvCheckTasksWaitingTermination+0x5c>)
   203aa:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
   203ac:	4b0d      	ldr	r3, [pc, #52]	; (203e4 <prvCheckTasksWaitingTermination+0x60>)
   203ae:	681b      	ldr	r3, [r3, #0]
   203b0:	1e5a      	subs	r2, r3, #1
   203b2:	4b0c      	ldr	r3, [pc, #48]	; (203e4 <prvCheckTasksWaitingTermination+0x60>)
   203b4:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
   203b6:	4b0c      	ldr	r3, [pc, #48]	; (203e8 <prvCheckTasksWaitingTermination+0x64>)
   203b8:	4798      	blx	r3

			prvDeleteTCB( pxTCB );
   203ba:	687b      	ldr	r3, [r7, #4]
   203bc:	0018      	movs	r0, r3
   203be:	4b0b      	ldr	r3, [pc, #44]	; (203ec <prvCheckTasksWaitingTermination+0x68>)
   203c0:	4798      	blx	r3
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
   203c2:	4b08      	ldr	r3, [pc, #32]	; (203e4 <prvCheckTasksWaitingTermination+0x60>)
   203c4:	681b      	ldr	r3, [r3, #0]
   203c6:	2b00      	cmp	r3, #0
   203c8:	d1e0      	bne.n	2038c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
   203ca:	46c0      	nop			; (mov r8, r8)
   203cc:	46bd      	mov	sp, r7
   203ce:	b002      	add	sp, #8
   203d0:	bd80      	pop	{r7, pc}
   203d2:	46c0      	nop			; (mov r8, r8)
   203d4:	0001e8c1 	.word	0x0001e8c1
   203d8:	20000374 	.word	0x20000374
   203dc:	0001eb67 	.word	0x0001eb67
   203e0:	200003a0 	.word	0x200003a0
   203e4:	20000388 	.word	0x20000388
   203e8:	0001e8e5 	.word	0x0001e8e5
   203ec:	000203f1 	.word	0x000203f1

000203f0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
   203f0:	b580      	push	{r7, lr}
   203f2:	b082      	sub	sp, #8
   203f4:	af00      	add	r7, sp, #0
   203f6:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
   203f8:	687b      	ldr	r3, [r7, #4]
   203fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   203fc:	0018      	movs	r0, r3
   203fe:	4b05      	ldr	r3, [pc, #20]	; (20414 <prvDeleteTCB+0x24>)
   20400:	4798      	blx	r3
			vPortFree( pxTCB );
   20402:	687b      	ldr	r3, [r7, #4]
   20404:	0018      	movs	r0, r3
   20406:	4b03      	ldr	r3, [pc, #12]	; (20414 <prvDeleteTCB+0x24>)
   20408:	4798      	blx	r3
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
   2040a:	46c0      	nop			; (mov r8, r8)
   2040c:	46bd      	mov	sp, r7
   2040e:	b002      	add	sp, #8
   20410:	bd80      	pop	{r7, pc}
   20412:	46c0      	nop			; (mov r8, r8)
   20414:	0001ea31 	.word	0x0001ea31

00020418 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
   20418:	b580      	push	{r7, lr}
   2041a:	b082      	sub	sp, #8
   2041c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   2041e:	4b0e      	ldr	r3, [pc, #56]	; (20458 <prvResetNextTaskUnblockTime+0x40>)
   20420:	681b      	ldr	r3, [r3, #0]
   20422:	681b      	ldr	r3, [r3, #0]
   20424:	2b00      	cmp	r3, #0
   20426:	d101      	bne.n	2042c <prvResetNextTaskUnblockTime+0x14>
   20428:	2301      	movs	r3, #1
   2042a:	e000      	b.n	2042e <prvResetNextTaskUnblockTime+0x16>
   2042c:	2300      	movs	r3, #0
   2042e:	2b00      	cmp	r3, #0
   20430:	d004      	beq.n	2043c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
   20432:	4b0a      	ldr	r3, [pc, #40]	; (2045c <prvResetNextTaskUnblockTime+0x44>)
   20434:	2201      	movs	r2, #1
   20436:	4252      	negs	r2, r2
   20438:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
   2043a:	e008      	b.n	2044e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   2043c:	4b06      	ldr	r3, [pc, #24]	; (20458 <prvResetNextTaskUnblockTime+0x40>)
   2043e:	681b      	ldr	r3, [r3, #0]
   20440:	68db      	ldr	r3, [r3, #12]
   20442:	68db      	ldr	r3, [r3, #12]
   20444:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
   20446:	687b      	ldr	r3, [r7, #4]
   20448:	685a      	ldr	r2, [r3, #4]
   2044a:	4b04      	ldr	r3, [pc, #16]	; (2045c <prvResetNextTaskUnblockTime+0x44>)
   2044c:	601a      	str	r2, [r3, #0]
}
   2044e:	46c0      	nop			; (mov r8, r8)
   20450:	46bd      	mov	sp, r7
   20452:	b002      	add	sp, #8
   20454:	bd80      	pop	{r7, pc}
   20456:	46c0      	nop			; (mov r8, r8)
   20458:	20000358 	.word	0x20000358
   2045c:	200003c0 	.word	0x200003c0

00020460 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
   20460:	b580      	push	{r7, lr}
   20462:	b082      	sub	sp, #8
   20464:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
   20466:	4b0a      	ldr	r3, [pc, #40]	; (20490 <xTaskGetSchedulerState+0x30>)
   20468:	681b      	ldr	r3, [r3, #0]
   2046a:	2b00      	cmp	r3, #0
   2046c:	d102      	bne.n	20474 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
   2046e:	2301      	movs	r3, #1
   20470:	607b      	str	r3, [r7, #4]
   20472:	e008      	b.n	20486 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   20474:	4b07      	ldr	r3, [pc, #28]	; (20494 <xTaskGetSchedulerState+0x34>)
   20476:	681b      	ldr	r3, [r3, #0]
   20478:	2b00      	cmp	r3, #0
   2047a:	d102      	bne.n	20482 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
   2047c:	2302      	movs	r3, #2
   2047e:	607b      	str	r3, [r7, #4]
   20480:	e001      	b.n	20486 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
   20482:	2300      	movs	r3, #0
   20484:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
   20486:	687b      	ldr	r3, [r7, #4]
	}
   20488:	0018      	movs	r0, r3
   2048a:	46bd      	mov	sp, r7
   2048c:	b002      	add	sp, #8
   2048e:	bd80      	pop	{r7, pc}
   20490:	200003ac 	.word	0x200003ac
   20494:	200003c8 	.word	0x200003c8

00020498 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
   20498:	b580      	push	{r7, lr}
   2049a:	b084      	sub	sp, #16
   2049c:	af00      	add	r7, sp, #0
   2049e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
   204a0:	687b      	ldr	r3, [r7, #4]
   204a2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
   204a4:	2300      	movs	r3, #0
   204a6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
   204a8:	687b      	ldr	r3, [r7, #4]
   204aa:	2b00      	cmp	r3, #0
   204ac:	d056      	beq.n	2055c <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
   204ae:	68bb      	ldr	r3, [r7, #8]
   204b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   204b2:	4b2d      	ldr	r3, [pc, #180]	; (20568 <xTaskPriorityInherit+0xd0>)
   204b4:	681b      	ldr	r3, [r3, #0]
   204b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   204b8:	429a      	cmp	r2, r3
   204ba:	d246      	bcs.n	2054a <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
   204bc:	68bb      	ldr	r3, [r7, #8]
   204be:	699b      	ldr	r3, [r3, #24]
   204c0:	2b00      	cmp	r3, #0
   204c2:	db06      	blt.n	204d2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   204c4:	4b28      	ldr	r3, [pc, #160]	; (20568 <xTaskPriorityInherit+0xd0>)
   204c6:	681b      	ldr	r3, [r3, #0]
   204c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   204ca:	2205      	movs	r2, #5
   204cc:	1ad2      	subs	r2, r2, r3
   204ce:	68bb      	ldr	r3, [r7, #8]
   204d0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
   204d2:	68bb      	ldr	r3, [r7, #8]
   204d4:	6959      	ldr	r1, [r3, #20]
   204d6:	68bb      	ldr	r3, [r7, #8]
   204d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   204da:	0013      	movs	r3, r2
   204dc:	009b      	lsls	r3, r3, #2
   204de:	189b      	adds	r3, r3, r2
   204e0:	009b      	lsls	r3, r3, #2
   204e2:	4a22      	ldr	r2, [pc, #136]	; (2056c <xTaskPriorityInherit+0xd4>)
   204e4:	189b      	adds	r3, r3, r2
   204e6:	4299      	cmp	r1, r3
   204e8:	d101      	bne.n	204ee <xTaskPriorityInherit+0x56>
   204ea:	2301      	movs	r3, #1
   204ec:	e000      	b.n	204f0 <xTaskPriorityInherit+0x58>
   204ee:	2300      	movs	r3, #0
   204f0:	2b00      	cmp	r3, #0
   204f2:	d022      	beq.n	2053a <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   204f4:	68bb      	ldr	r3, [r7, #8]
   204f6:	3304      	adds	r3, #4
   204f8:	0018      	movs	r0, r3
   204fa:	4b1d      	ldr	r3, [pc, #116]	; (20570 <xTaskPriorityInherit+0xd8>)
   204fc:	4798      	blx	r3
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
   204fe:	4b1a      	ldr	r3, [pc, #104]	; (20568 <xTaskPriorityInherit+0xd0>)
   20500:	681b      	ldr	r3, [r3, #0]
   20502:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   20504:	68bb      	ldr	r3, [r7, #8]
   20506:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
   20508:	68bb      	ldr	r3, [r7, #8]
   2050a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2050c:	4b19      	ldr	r3, [pc, #100]	; (20574 <xTaskPriorityInherit+0xdc>)
   2050e:	681b      	ldr	r3, [r3, #0]
   20510:	429a      	cmp	r2, r3
   20512:	d903      	bls.n	2051c <xTaskPriorityInherit+0x84>
   20514:	68bb      	ldr	r3, [r7, #8]
   20516:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   20518:	4b16      	ldr	r3, [pc, #88]	; (20574 <xTaskPriorityInherit+0xdc>)
   2051a:	601a      	str	r2, [r3, #0]
   2051c:	68bb      	ldr	r3, [r7, #8]
   2051e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   20520:	0013      	movs	r3, r2
   20522:	009b      	lsls	r3, r3, #2
   20524:	189b      	adds	r3, r3, r2
   20526:	009b      	lsls	r3, r3, #2
   20528:	4a10      	ldr	r2, [pc, #64]	; (2056c <xTaskPriorityInherit+0xd4>)
   2052a:	189a      	adds	r2, r3, r2
   2052c:	68bb      	ldr	r3, [r7, #8]
   2052e:	3304      	adds	r3, #4
   20530:	0019      	movs	r1, r3
   20532:	0010      	movs	r0, r2
   20534:	4b10      	ldr	r3, [pc, #64]	; (20578 <xTaskPriorityInherit+0xe0>)
   20536:	4798      	blx	r3
   20538:	e004      	b.n	20544 <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
   2053a:	4b0b      	ldr	r3, [pc, #44]	; (20568 <xTaskPriorityInherit+0xd0>)
   2053c:	681b      	ldr	r3, [r3, #0]
   2053e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   20540:	68bb      	ldr	r3, [r7, #8]
   20542:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
   20544:	2301      	movs	r3, #1
   20546:	60fb      	str	r3, [r7, #12]
   20548:	e008      	b.n	2055c <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
   2054a:	68bb      	ldr	r3, [r7, #8]
   2054c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   2054e:	4b06      	ldr	r3, [pc, #24]	; (20568 <xTaskPriorityInherit+0xd0>)
   20550:	681b      	ldr	r3, [r3, #0]
   20552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   20554:	429a      	cmp	r2, r3
   20556:	d201      	bcs.n	2055c <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
   20558:	2301      	movs	r3, #1
   2055a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
   2055c:	68fb      	ldr	r3, [r7, #12]
	}
   2055e:	0018      	movs	r0, r3
   20560:	46bd      	mov	sp, r7
   20562:	b004      	add	sp, #16
   20564:	bd80      	pop	{r7, pc}
   20566:	46c0      	nop			; (mov r8, r8)
   20568:	200002c8 	.word	0x200002c8
   2056c:	200002cc 	.word	0x200002cc
   20570:	0001eb67 	.word	0x0001eb67
   20574:	200003a8 	.word	0x200003a8
   20578:	0001eab7 	.word	0x0001eab7

0002057c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
   2057c:	b580      	push	{r7, lr}
   2057e:	b084      	sub	sp, #16
   20580:	af00      	add	r7, sp, #0
   20582:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
   20584:	687b      	ldr	r3, [r7, #4]
   20586:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
   20588:	2300      	movs	r3, #0
   2058a:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
   2058c:	687b      	ldr	r3, [r7, #4]
   2058e:	2b00      	cmp	r3, #0
   20590:	d044      	beq.n	2061c <xTaskPriorityDisinherit+0xa0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
   20592:	4b25      	ldr	r3, [pc, #148]	; (20628 <xTaskPriorityDisinherit+0xac>)
   20594:	681b      	ldr	r3, [r3, #0]
   20596:	68ba      	ldr	r2, [r7, #8]
   20598:	429a      	cmp	r2, r3
   2059a:	d001      	beq.n	205a0 <xTaskPriorityDisinherit+0x24>
   2059c:	b672      	cpsid	i
   2059e:	e7fe      	b.n	2059e <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
   205a0:	68bb      	ldr	r3, [r7, #8]
   205a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   205a4:	2b00      	cmp	r3, #0
   205a6:	d101      	bne.n	205ac <xTaskPriorityDisinherit+0x30>
   205a8:	b672      	cpsid	i
   205aa:	e7fe      	b.n	205aa <xTaskPriorityDisinherit+0x2e>
			( pxTCB->uxMutexesHeld )--;
   205ac:	68bb      	ldr	r3, [r7, #8]
   205ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   205b0:	1e5a      	subs	r2, r3, #1
   205b2:	68bb      	ldr	r3, [r7, #8]
   205b4:	645a      	str	r2, [r3, #68]	; 0x44

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
   205b6:	68bb      	ldr	r3, [r7, #8]
   205b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   205ba:	68bb      	ldr	r3, [r7, #8]
   205bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   205be:	429a      	cmp	r2, r3
   205c0:	d02c      	beq.n	2061c <xTaskPriorityDisinherit+0xa0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
   205c2:	68bb      	ldr	r3, [r7, #8]
   205c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   205c6:	2b00      	cmp	r3, #0
   205c8:	d128      	bne.n	2061c <xTaskPriorityDisinherit+0xa0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   205ca:	68bb      	ldr	r3, [r7, #8]
   205cc:	3304      	adds	r3, #4
   205ce:	0018      	movs	r0, r3
   205d0:	4b16      	ldr	r3, [pc, #88]	; (2062c <xTaskPriorityDisinherit+0xb0>)
   205d2:	4798      	blx	r3
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
   205d4:	68bb      	ldr	r3, [r7, #8]
   205d6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   205d8:	68bb      	ldr	r3, [r7, #8]
   205da:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   205dc:	68bb      	ldr	r3, [r7, #8]
   205de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   205e0:	2205      	movs	r2, #5
   205e2:	1ad2      	subs	r2, r2, r3
   205e4:	68bb      	ldr	r3, [r7, #8]
   205e6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
   205e8:	68bb      	ldr	r3, [r7, #8]
   205ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   205ec:	4b10      	ldr	r3, [pc, #64]	; (20630 <xTaskPriorityDisinherit+0xb4>)
   205ee:	681b      	ldr	r3, [r3, #0]
   205f0:	429a      	cmp	r2, r3
   205f2:	d903      	bls.n	205fc <xTaskPriorityDisinherit+0x80>
   205f4:	68bb      	ldr	r3, [r7, #8]
   205f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   205f8:	4b0d      	ldr	r3, [pc, #52]	; (20630 <xTaskPriorityDisinherit+0xb4>)
   205fa:	601a      	str	r2, [r3, #0]
   205fc:	68bb      	ldr	r3, [r7, #8]
   205fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   20600:	0013      	movs	r3, r2
   20602:	009b      	lsls	r3, r3, #2
   20604:	189b      	adds	r3, r3, r2
   20606:	009b      	lsls	r3, r3, #2
   20608:	4a0a      	ldr	r2, [pc, #40]	; (20634 <xTaskPriorityDisinherit+0xb8>)
   2060a:	189a      	adds	r2, r3, r2
   2060c:	68bb      	ldr	r3, [r7, #8]
   2060e:	3304      	adds	r3, #4
   20610:	0019      	movs	r1, r3
   20612:	0010      	movs	r0, r2
   20614:	4b08      	ldr	r3, [pc, #32]	; (20638 <xTaskPriorityDisinherit+0xbc>)
   20616:	4798      	blx	r3
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
   20618:	2301      	movs	r3, #1
   2061a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
   2061c:	68fb      	ldr	r3, [r7, #12]
	}
   2061e:	0018      	movs	r0, r3
   20620:	46bd      	mov	sp, r7
   20622:	b004      	add	sp, #16
   20624:	bd80      	pop	{r7, pc}
   20626:	46c0      	nop			; (mov r8, r8)
   20628:	200002c8 	.word	0x200002c8
   2062c:	0001eb67 	.word	0x0001eb67
   20630:	200003a8 	.word	0x200003a8
   20634:	200002cc 	.word	0x200002cc
   20638:	0001eab7 	.word	0x0001eab7

0002063c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
   2063c:	b580      	push	{r7, lr}
   2063e:	b086      	sub	sp, #24
   20640:	af00      	add	r7, sp, #0
   20642:	6078      	str	r0, [r7, #4]
   20644:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
   20646:	687b      	ldr	r3, [r7, #4]
   20648:	613b      	str	r3, [r7, #16]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
   2064a:	2301      	movs	r3, #1
   2064c:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
   2064e:	687b      	ldr	r3, [r7, #4]
   20650:	2b00      	cmp	r3, #0
   20652:	d05d      	beq.n	20710 <vTaskPriorityDisinheritAfterTimeout+0xd4>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
   20654:	693b      	ldr	r3, [r7, #16]
   20656:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   20658:	2b00      	cmp	r3, #0
   2065a:	d101      	bne.n	20660 <vTaskPriorityDisinheritAfterTimeout+0x24>
   2065c:	b672      	cpsid	i
   2065e:	e7fe      	b.n	2065e <vTaskPriorityDisinheritAfterTimeout+0x22>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
   20660:	693b      	ldr	r3, [r7, #16]
   20662:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   20664:	683b      	ldr	r3, [r7, #0]
   20666:	429a      	cmp	r2, r3
   20668:	d202      	bcs.n	20670 <vTaskPriorityDisinheritAfterTimeout+0x34>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
   2066a:	683b      	ldr	r3, [r7, #0]
   2066c:	617b      	str	r3, [r7, #20]
   2066e:	e002      	b.n	20676 <vTaskPriorityDisinheritAfterTimeout+0x3a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
   20670:	693b      	ldr	r3, [r7, #16]
   20672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   20674:	617b      	str	r3, [r7, #20]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
   20676:	693b      	ldr	r3, [r7, #16]
   20678:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2067a:	697b      	ldr	r3, [r7, #20]
   2067c:	429a      	cmp	r2, r3
   2067e:	d047      	beq.n	20710 <vTaskPriorityDisinheritAfterTimeout+0xd4>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
   20680:	693b      	ldr	r3, [r7, #16]
   20682:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   20684:	68fb      	ldr	r3, [r7, #12]
   20686:	429a      	cmp	r2, r3
   20688:	d142      	bne.n	20710 <vTaskPriorityDisinheritAfterTimeout+0xd4>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
   2068a:	4b23      	ldr	r3, [pc, #140]	; (20718 <vTaskPriorityDisinheritAfterTimeout+0xdc>)
   2068c:	681b      	ldr	r3, [r3, #0]
   2068e:	693a      	ldr	r2, [r7, #16]
   20690:	429a      	cmp	r2, r3
   20692:	d101      	bne.n	20698 <vTaskPriorityDisinheritAfterTimeout+0x5c>
   20694:	b672      	cpsid	i
   20696:	e7fe      	b.n	20696 <vTaskPriorityDisinheritAfterTimeout+0x5a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
   20698:	693b      	ldr	r3, [r7, #16]
   2069a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   2069c:	60bb      	str	r3, [r7, #8]
					pxTCB->uxPriority = uxPriorityToUse;
   2069e:	693b      	ldr	r3, [r7, #16]
   206a0:	697a      	ldr	r2, [r7, #20]
   206a2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
   206a4:	693b      	ldr	r3, [r7, #16]
   206a6:	699b      	ldr	r3, [r3, #24]
   206a8:	2b00      	cmp	r3, #0
   206aa:	db04      	blt.n	206b6 <vTaskPriorityDisinheritAfterTimeout+0x7a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   206ac:	697b      	ldr	r3, [r7, #20]
   206ae:	2205      	movs	r2, #5
   206b0:	1ad2      	subs	r2, r2, r3
   206b2:	693b      	ldr	r3, [r7, #16]
   206b4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
   206b6:	693b      	ldr	r3, [r7, #16]
   206b8:	6959      	ldr	r1, [r3, #20]
   206ba:	68ba      	ldr	r2, [r7, #8]
   206bc:	0013      	movs	r3, r2
   206be:	009b      	lsls	r3, r3, #2
   206c0:	189b      	adds	r3, r3, r2
   206c2:	009b      	lsls	r3, r3, #2
   206c4:	4a15      	ldr	r2, [pc, #84]	; (2071c <vTaskPriorityDisinheritAfterTimeout+0xe0>)
   206c6:	189b      	adds	r3, r3, r2
   206c8:	4299      	cmp	r1, r3
   206ca:	d101      	bne.n	206d0 <vTaskPriorityDisinheritAfterTimeout+0x94>
   206cc:	2301      	movs	r3, #1
   206ce:	e000      	b.n	206d2 <vTaskPriorityDisinheritAfterTimeout+0x96>
   206d0:	2300      	movs	r3, #0
   206d2:	2b00      	cmp	r3, #0
   206d4:	d01c      	beq.n	20710 <vTaskPriorityDisinheritAfterTimeout+0xd4>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   206d6:	693b      	ldr	r3, [r7, #16]
   206d8:	3304      	adds	r3, #4
   206da:	0018      	movs	r0, r3
   206dc:	4b10      	ldr	r3, [pc, #64]	; (20720 <vTaskPriorityDisinheritAfterTimeout+0xe4>)
   206de:	4798      	blx	r3
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
   206e0:	693b      	ldr	r3, [r7, #16]
   206e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   206e4:	4b0f      	ldr	r3, [pc, #60]	; (20724 <vTaskPriorityDisinheritAfterTimeout+0xe8>)
   206e6:	681b      	ldr	r3, [r3, #0]
   206e8:	429a      	cmp	r2, r3
   206ea:	d903      	bls.n	206f4 <vTaskPriorityDisinheritAfterTimeout+0xb8>
   206ec:	693b      	ldr	r3, [r7, #16]
   206ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   206f0:	4b0c      	ldr	r3, [pc, #48]	; (20724 <vTaskPriorityDisinheritAfterTimeout+0xe8>)
   206f2:	601a      	str	r2, [r3, #0]
   206f4:	693b      	ldr	r3, [r7, #16]
   206f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   206f8:	0013      	movs	r3, r2
   206fa:	009b      	lsls	r3, r3, #2
   206fc:	189b      	adds	r3, r3, r2
   206fe:	009b      	lsls	r3, r3, #2
   20700:	4a06      	ldr	r2, [pc, #24]	; (2071c <vTaskPriorityDisinheritAfterTimeout+0xe0>)
   20702:	189a      	adds	r2, r3, r2
   20704:	693b      	ldr	r3, [r7, #16]
   20706:	3304      	adds	r3, #4
   20708:	0019      	movs	r1, r3
   2070a:	0010      	movs	r0, r2
   2070c:	4b06      	ldr	r3, [pc, #24]	; (20728 <vTaskPriorityDisinheritAfterTimeout+0xec>)
   2070e:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
   20710:	46c0      	nop			; (mov r8, r8)
   20712:	46bd      	mov	sp, r7
   20714:	b006      	add	sp, #24
   20716:	bd80      	pop	{r7, pc}
   20718:	200002c8 	.word	0x200002c8
   2071c:	200002cc 	.word	0x200002cc
   20720:	0001eb67 	.word	0x0001eb67
   20724:	200003a8 	.word	0x200003a8
   20728:	0001eab7 	.word	0x0001eab7

0002072c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
   2072c:	b580      	push	{r7, lr}
   2072e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
   20730:	4b06      	ldr	r3, [pc, #24]	; (2074c <pvTaskIncrementMutexHeldCount+0x20>)
   20732:	681b      	ldr	r3, [r3, #0]
   20734:	2b00      	cmp	r3, #0
   20736:	d004      	beq.n	20742 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
   20738:	4b04      	ldr	r3, [pc, #16]	; (2074c <pvTaskIncrementMutexHeldCount+0x20>)
   2073a:	681b      	ldr	r3, [r3, #0]
   2073c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   2073e:	3201      	adds	r2, #1
   20740:	645a      	str	r2, [r3, #68]	; 0x44
		}

		return pxCurrentTCB;
   20742:	4b02      	ldr	r3, [pc, #8]	; (2074c <pvTaskIncrementMutexHeldCount+0x20>)
   20744:	681b      	ldr	r3, [r3, #0]
	}
   20746:	0018      	movs	r0, r3
   20748:	46bd      	mov	sp, r7
   2074a:	bd80      	pop	{r7, pc}
   2074c:	200002c8 	.word	0x200002c8

00020750 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
   20750:	b580      	push	{r7, lr}
   20752:	b084      	sub	sp, #16
   20754:	af00      	add	r7, sp, #0
   20756:	6078      	str	r0, [r7, #4]
   20758:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
   2075a:	4b1d      	ldr	r3, [pc, #116]	; (207d0 <ulTaskNotifyTake+0x80>)
   2075c:	4798      	blx	r3
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
   2075e:	4b1d      	ldr	r3, [pc, #116]	; (207d4 <ulTaskNotifyTake+0x84>)
   20760:	681b      	ldr	r3, [r3, #0]
   20762:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   20764:	2b00      	cmp	r3, #0
   20766:	d10e      	bne.n	20786 <ulTaskNotifyTake+0x36>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
   20768:	4b1a      	ldr	r3, [pc, #104]	; (207d4 <ulTaskNotifyTake+0x84>)
   2076a:	681b      	ldr	r3, [r3, #0]
   2076c:	224c      	movs	r2, #76	; 0x4c
   2076e:	2101      	movs	r1, #1
   20770:	5499      	strb	r1, [r3, r2]

				if( xTicksToWait > ( TickType_t ) 0 )
   20772:	683b      	ldr	r3, [r7, #0]
   20774:	2b00      	cmp	r3, #0
   20776:	d006      	beq.n	20786 <ulTaskNotifyTake+0x36>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
   20778:	683b      	ldr	r3, [r7, #0]
   2077a:	2101      	movs	r1, #1
   2077c:	0018      	movs	r0, r3
   2077e:	4b16      	ldr	r3, [pc, #88]	; (207d8 <ulTaskNotifyTake+0x88>)
   20780:	4798      	blx	r3

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
   20782:	4b16      	ldr	r3, [pc, #88]	; (207dc <ulTaskNotifyTake+0x8c>)
   20784:	4798      	blx	r3
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
   20786:	4b16      	ldr	r3, [pc, #88]	; (207e0 <ulTaskNotifyTake+0x90>)
   20788:	4798      	blx	r3

		taskENTER_CRITICAL();
   2078a:	4b11      	ldr	r3, [pc, #68]	; (207d0 <ulTaskNotifyTake+0x80>)
   2078c:	4798      	blx	r3
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
   2078e:	4b11      	ldr	r3, [pc, #68]	; (207d4 <ulTaskNotifyTake+0x84>)
   20790:	681b      	ldr	r3, [r3, #0]
   20792:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   20794:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
   20796:	68fb      	ldr	r3, [r7, #12]
   20798:	2b00      	cmp	r3, #0
   2079a:	d00c      	beq.n	207b6 <ulTaskNotifyTake+0x66>
			{
				if( xClearCountOnExit != pdFALSE )
   2079c:	687b      	ldr	r3, [r7, #4]
   2079e:	2b00      	cmp	r3, #0
   207a0:	d004      	beq.n	207ac <ulTaskNotifyTake+0x5c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
   207a2:	4b0c      	ldr	r3, [pc, #48]	; (207d4 <ulTaskNotifyTake+0x84>)
   207a4:	681b      	ldr	r3, [r3, #0]
   207a6:	2200      	movs	r2, #0
   207a8:	649a      	str	r2, [r3, #72]	; 0x48
   207aa:	e004      	b.n	207b6 <ulTaskNotifyTake+0x66>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
   207ac:	4b09      	ldr	r3, [pc, #36]	; (207d4 <ulTaskNotifyTake+0x84>)
   207ae:	681b      	ldr	r3, [r3, #0]
   207b0:	68fa      	ldr	r2, [r7, #12]
   207b2:	3a01      	subs	r2, #1
   207b4:	649a      	str	r2, [r3, #72]	; 0x48
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
   207b6:	4b07      	ldr	r3, [pc, #28]	; (207d4 <ulTaskNotifyTake+0x84>)
   207b8:	681b      	ldr	r3, [r3, #0]
   207ba:	224c      	movs	r2, #76	; 0x4c
   207bc:	2100      	movs	r1, #0
   207be:	5499      	strb	r1, [r3, r2]
		}
		taskEXIT_CRITICAL();
   207c0:	4b07      	ldr	r3, [pc, #28]	; (207e0 <ulTaskNotifyTake+0x90>)
   207c2:	4798      	blx	r3

		return ulReturn;
   207c4:	68fb      	ldr	r3, [r7, #12]
	}
   207c6:	0018      	movs	r0, r3
   207c8:	46bd      	mov	sp, r7
   207ca:	b004      	add	sp, #16
   207cc:	bd80      	pop	{r7, pc}
   207ce:	46c0      	nop			; (mov r8, r8)
   207d0:	0001e8c1 	.word	0x0001e8c1
   207d4:	200002c8 	.word	0x200002c8
   207d8:	000208e9 	.word	0x000208e9
   207dc:	0001e8a1 	.word	0x0001e8a1
   207e0:	0001e8e5 	.word	0x0001e8e5

000207e4 <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
   207e4:	b580      	push	{r7, lr}
   207e6:	b086      	sub	sp, #24
   207e8:	af00      	add	r7, sp, #0
   207ea:	6078      	str	r0, [r7, #4]
   207ec:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
   207ee:	687b      	ldr	r3, [r7, #4]
   207f0:	2b00      	cmp	r3, #0
   207f2:	d101      	bne.n	207f8 <vTaskNotifyGiveFromISR+0x14>
   207f4:	b672      	cpsid	i
   207f6:	e7fe      	b.n	207f6 <vTaskNotifyGiveFromISR+0x12>
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		pxTCB = ( TCB_t * ) xTaskToNotify;
   207f8:	687b      	ldr	r3, [r7, #4]
   207fa:	617b      	str	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   207fc:	4b30      	ldr	r3, [pc, #192]	; (208c0 <vTaskNotifyGiveFromISR+0xdc>)
   207fe:	4798      	blx	r3
   20800:	0003      	movs	r3, r0
   20802:	613b      	str	r3, [r7, #16]
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
   20804:	230f      	movs	r3, #15
   20806:	18fb      	adds	r3, r7, r3
   20808:	697a      	ldr	r2, [r7, #20]
   2080a:	214c      	movs	r1, #76	; 0x4c
   2080c:	5c52      	ldrb	r2, [r2, r1]
   2080e:	701a      	strb	r2, [r3, #0]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
   20810:	697b      	ldr	r3, [r7, #20]
   20812:	224c      	movs	r2, #76	; 0x4c
   20814:	2102      	movs	r1, #2
   20816:	5499      	strb	r1, [r3, r2]

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
   20818:	697b      	ldr	r3, [r7, #20]
   2081a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   2081c:	1c5a      	adds	r2, r3, #1
   2081e:	697b      	ldr	r3, [r7, #20]
   20820:	649a      	str	r2, [r3, #72]	; 0x48

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
   20822:	230f      	movs	r3, #15
   20824:	18fb      	adds	r3, r7, r3
   20826:	781b      	ldrb	r3, [r3, #0]
   20828:	2b01      	cmp	r3, #1
   2082a:	d140      	bne.n	208ae <vTaskNotifyGiveFromISR+0xca>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
   2082c:	697b      	ldr	r3, [r7, #20]
   2082e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   20830:	2b00      	cmp	r3, #0
   20832:	d001      	beq.n	20838 <vTaskNotifyGiveFromISR+0x54>
   20834:	b672      	cpsid	i
   20836:	e7fe      	b.n	20836 <vTaskNotifyGiveFromISR+0x52>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   20838:	4b22      	ldr	r3, [pc, #136]	; (208c4 <vTaskNotifyGiveFromISR+0xe0>)
   2083a:	681b      	ldr	r3, [r3, #0]
   2083c:	2b00      	cmp	r3, #0
   2083e:	d11d      	bne.n	2087c <vTaskNotifyGiveFromISR+0x98>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   20840:	697b      	ldr	r3, [r7, #20]
   20842:	3304      	adds	r3, #4
   20844:	0018      	movs	r0, r3
   20846:	4b20      	ldr	r3, [pc, #128]	; (208c8 <vTaskNotifyGiveFromISR+0xe4>)
   20848:	4798      	blx	r3
					prvAddTaskToReadyList( pxTCB );
   2084a:	697b      	ldr	r3, [r7, #20]
   2084c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2084e:	4b1f      	ldr	r3, [pc, #124]	; (208cc <vTaskNotifyGiveFromISR+0xe8>)
   20850:	681b      	ldr	r3, [r3, #0]
   20852:	429a      	cmp	r2, r3
   20854:	d903      	bls.n	2085e <vTaskNotifyGiveFromISR+0x7a>
   20856:	697b      	ldr	r3, [r7, #20]
   20858:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2085a:	4b1c      	ldr	r3, [pc, #112]	; (208cc <vTaskNotifyGiveFromISR+0xe8>)
   2085c:	601a      	str	r2, [r3, #0]
   2085e:	697b      	ldr	r3, [r7, #20]
   20860:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   20862:	0013      	movs	r3, r2
   20864:	009b      	lsls	r3, r3, #2
   20866:	189b      	adds	r3, r3, r2
   20868:	009b      	lsls	r3, r3, #2
   2086a:	4a19      	ldr	r2, [pc, #100]	; (208d0 <vTaskNotifyGiveFromISR+0xec>)
   2086c:	189a      	adds	r2, r3, r2
   2086e:	697b      	ldr	r3, [r7, #20]
   20870:	3304      	adds	r3, #4
   20872:	0019      	movs	r1, r3
   20874:	0010      	movs	r0, r2
   20876:	4b17      	ldr	r3, [pc, #92]	; (208d4 <vTaskNotifyGiveFromISR+0xf0>)
   20878:	4798      	blx	r3
   2087a:	e007      	b.n	2088c <vTaskNotifyGiveFromISR+0xa8>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
   2087c:	697b      	ldr	r3, [r7, #20]
   2087e:	3318      	adds	r3, #24
   20880:	001a      	movs	r2, r3
   20882:	4b15      	ldr	r3, [pc, #84]	; (208d8 <vTaskNotifyGiveFromISR+0xf4>)
   20884:	0011      	movs	r1, r2
   20886:	0018      	movs	r0, r3
   20888:	4b12      	ldr	r3, [pc, #72]	; (208d4 <vTaskNotifyGiveFromISR+0xf0>)
   2088a:	4798      	blx	r3
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
   2088c:	697b      	ldr	r3, [r7, #20]
   2088e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   20890:	4b12      	ldr	r3, [pc, #72]	; (208dc <vTaskNotifyGiveFromISR+0xf8>)
   20892:	681b      	ldr	r3, [r3, #0]
   20894:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   20896:	429a      	cmp	r2, r3
   20898:	d909      	bls.n	208ae <vTaskNotifyGiveFromISR+0xca>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
   2089a:	683b      	ldr	r3, [r7, #0]
   2089c:	2b00      	cmp	r3, #0
   2089e:	d003      	beq.n	208a8 <vTaskNotifyGiveFromISR+0xc4>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
   208a0:	683b      	ldr	r3, [r7, #0]
   208a2:	2201      	movs	r2, #1
   208a4:	601a      	str	r2, [r3, #0]
   208a6:	e002      	b.n	208ae <vTaskNotifyGiveFromISR+0xca>
					else
					{
						/* Mark that a yield is pending in case the user is not
						using the "xHigherPriorityTaskWoken" parameter in an ISR
						safe FreeRTOS function. */
						xYieldPending = pdTRUE;
   208a8:	4b0d      	ldr	r3, [pc, #52]	; (208e0 <vTaskNotifyGiveFromISR+0xfc>)
   208aa:	2201      	movs	r2, #1
   208ac:	601a      	str	r2, [r3, #0]
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
   208ae:	693b      	ldr	r3, [r7, #16]
   208b0:	0018      	movs	r0, r3
   208b2:	4b0c      	ldr	r3, [pc, #48]	; (208e4 <vTaskNotifyGiveFromISR+0x100>)
   208b4:	4798      	blx	r3
	}
   208b6:	46c0      	nop			; (mov r8, r8)
   208b8:	46bd      	mov	sp, r7
   208ba:	b006      	add	sp, #24
   208bc:	bd80      	pop	{r7, pc}
   208be:	46c0      	nop			; (mov r8, r8)
   208c0:	0001e915 	.word	0x0001e915
   208c4:	200003c8 	.word	0x200003c8
   208c8:	0001eb67 	.word	0x0001eb67
   208cc:	200003a8 	.word	0x200003a8
   208d0:	200002cc 	.word	0x200002cc
   208d4:	0001eab7 	.word	0x0001eab7
   208d8:	20000360 	.word	0x20000360
   208dc:	200002c8 	.word	0x200002c8
   208e0:	200003b4 	.word	0x200003b4
   208e4:	0001e921 	.word	0x0001e921

000208e8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
   208e8:	b580      	push	{r7, lr}
   208ea:	b084      	sub	sp, #16
   208ec:	af00      	add	r7, sp, #0
   208ee:	6078      	str	r0, [r7, #4]
   208f0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
   208f2:	4b21      	ldr	r3, [pc, #132]	; (20978 <prvAddCurrentTaskToDelayedList+0x90>)
   208f4:	681b      	ldr	r3, [r3, #0]
   208f6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   208f8:	4b20      	ldr	r3, [pc, #128]	; (2097c <prvAddCurrentTaskToDelayedList+0x94>)
   208fa:	681b      	ldr	r3, [r3, #0]
   208fc:	3304      	adds	r3, #4
   208fe:	0018      	movs	r0, r3
   20900:	4b1f      	ldr	r3, [pc, #124]	; (20980 <prvAddCurrentTaskToDelayedList+0x98>)
   20902:	4798      	blx	r3
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
   20904:	687b      	ldr	r3, [r7, #4]
   20906:	3301      	adds	r3, #1
   20908:	d10b      	bne.n	20922 <prvAddCurrentTaskToDelayedList+0x3a>
   2090a:	683b      	ldr	r3, [r7, #0]
   2090c:	2b00      	cmp	r3, #0
   2090e:	d008      	beq.n	20922 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
   20910:	4b1a      	ldr	r3, [pc, #104]	; (2097c <prvAddCurrentTaskToDelayedList+0x94>)
   20912:	681b      	ldr	r3, [r3, #0]
   20914:	1d1a      	adds	r2, r3, #4
   20916:	4b1b      	ldr	r3, [pc, #108]	; (20984 <prvAddCurrentTaskToDelayedList+0x9c>)
   20918:	0011      	movs	r1, r2
   2091a:	0018      	movs	r0, r3
   2091c:	4b1a      	ldr	r3, [pc, #104]	; (20988 <prvAddCurrentTaskToDelayedList+0xa0>)
   2091e:	4798      	blx	r3

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
   20920:	e026      	b.n	20970 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
   20922:	68fa      	ldr	r2, [r7, #12]
   20924:	687b      	ldr	r3, [r7, #4]
   20926:	18d3      	adds	r3, r2, r3
   20928:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
   2092a:	4b14      	ldr	r3, [pc, #80]	; (2097c <prvAddCurrentTaskToDelayedList+0x94>)
   2092c:	681b      	ldr	r3, [r3, #0]
   2092e:	68ba      	ldr	r2, [r7, #8]
   20930:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
   20932:	68ba      	ldr	r2, [r7, #8]
   20934:	68fb      	ldr	r3, [r7, #12]
   20936:	429a      	cmp	r2, r3
   20938:	d209      	bcs.n	2094e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
   2093a:	4b14      	ldr	r3, [pc, #80]	; (2098c <prvAddCurrentTaskToDelayedList+0xa4>)
   2093c:	681a      	ldr	r2, [r3, #0]
   2093e:	4b0f      	ldr	r3, [pc, #60]	; (2097c <prvAddCurrentTaskToDelayedList+0x94>)
   20940:	681b      	ldr	r3, [r3, #0]
   20942:	3304      	adds	r3, #4
   20944:	0019      	movs	r1, r3
   20946:	0010      	movs	r0, r2
   20948:	4b11      	ldr	r3, [pc, #68]	; (20990 <prvAddCurrentTaskToDelayedList+0xa8>)
   2094a:	4798      	blx	r3
}
   2094c:	e010      	b.n	20970 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
   2094e:	4b11      	ldr	r3, [pc, #68]	; (20994 <prvAddCurrentTaskToDelayedList+0xac>)
   20950:	681a      	ldr	r2, [r3, #0]
   20952:	4b0a      	ldr	r3, [pc, #40]	; (2097c <prvAddCurrentTaskToDelayedList+0x94>)
   20954:	681b      	ldr	r3, [r3, #0]
   20956:	3304      	adds	r3, #4
   20958:	0019      	movs	r1, r3
   2095a:	0010      	movs	r0, r2
   2095c:	4b0c      	ldr	r3, [pc, #48]	; (20990 <prvAddCurrentTaskToDelayedList+0xa8>)
   2095e:	4798      	blx	r3
				if( xTimeToWake < xNextTaskUnblockTime )
   20960:	4b0d      	ldr	r3, [pc, #52]	; (20998 <prvAddCurrentTaskToDelayedList+0xb0>)
   20962:	681b      	ldr	r3, [r3, #0]
   20964:	68ba      	ldr	r2, [r7, #8]
   20966:	429a      	cmp	r2, r3
   20968:	d202      	bcs.n	20970 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
   2096a:	4b0b      	ldr	r3, [pc, #44]	; (20998 <prvAddCurrentTaskToDelayedList+0xb0>)
   2096c:	68ba      	ldr	r2, [r7, #8]
   2096e:	601a      	str	r2, [r3, #0]
}
   20970:	46c0      	nop			; (mov r8, r8)
   20972:	46bd      	mov	sp, r7
   20974:	b004      	add	sp, #16
   20976:	bd80      	pop	{r7, pc}
   20978:	200003a4 	.word	0x200003a4
   2097c:	200002c8 	.word	0x200002c8
   20980:	0001eb67 	.word	0x0001eb67
   20984:	2000038c 	.word	0x2000038c
   20988:	0001eab7 	.word	0x0001eab7
   2098c:	2000035c 	.word	0x2000035c
   20990:	0001eafb 	.word	0x0001eafb
   20994:	20000358 	.word	0x20000358
   20998:	200003c0 	.word	0x200003c0

0002099c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
   2099c:	b590      	push	{r4, r7, lr}
   2099e:	b085      	sub	sp, #20
   209a0:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
   209a2:	2300      	movs	r3, #0
   209a4:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
   209a6:	4b0e      	ldr	r3, [pc, #56]	; (209e0 <xTimerCreateTimerTask+0x44>)
   209a8:	4798      	blx	r3

	if( xTimerQueue != NULL )
   209aa:	4b0e      	ldr	r3, [pc, #56]	; (209e4 <xTimerCreateTimerTask+0x48>)
   209ac:	681b      	ldr	r3, [r3, #0]
   209ae:	2b00      	cmp	r3, #0
   209b0:	d00c      	beq.n	209cc <xTimerCreateTimerTask+0x30>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
   209b2:	2382      	movs	r3, #130	; 0x82
   209b4:	005a      	lsls	r2, r3, #1
   209b6:	490c      	ldr	r1, [pc, #48]	; (209e8 <xTimerCreateTimerTask+0x4c>)
   209b8:	480c      	ldr	r0, [pc, #48]	; (209ec <xTimerCreateTimerTask+0x50>)
   209ba:	4b0d      	ldr	r3, [pc, #52]	; (209f0 <xTimerCreateTimerTask+0x54>)
   209bc:	9301      	str	r3, [sp, #4]
   209be:	2304      	movs	r3, #4
   209c0:	9300      	str	r3, [sp, #0]
   209c2:	2300      	movs	r3, #0
   209c4:	4c0b      	ldr	r4, [pc, #44]	; (209f4 <xTimerCreateTimerTask+0x58>)
   209c6:	47a0      	blx	r4
   209c8:	0003      	movs	r3, r0
   209ca:	607b      	str	r3, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
   209cc:	687b      	ldr	r3, [r7, #4]
   209ce:	2b00      	cmp	r3, #0
   209d0:	d101      	bne.n	209d6 <xTimerCreateTimerTask+0x3a>
   209d2:	b672      	cpsid	i
   209d4:	e7fe      	b.n	209d4 <xTimerCreateTimerTask+0x38>
	return xReturn;
   209d6:	687b      	ldr	r3, [r7, #4]
}
   209d8:	0018      	movs	r0, r3
   209da:	46bd      	mov	sp, r7
   209dc:	b003      	add	sp, #12
   209de:	bd90      	pop	{r4, r7, pc}
   209e0:	00020fad 	.word	0x00020fad
   209e4:	200003fc 	.word	0x200003fc
   209e8:	0002a604 	.word	0x0002a604
   209ec:	00020bc1 	.word	0x00020bc1
   209f0:	20000400 	.word	0x20000400
   209f4:	0001f799 	.word	0x0001f799

000209f8 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
   209f8:	b590      	push	{r4, r7, lr}
   209fa:	b089      	sub	sp, #36	; 0x24
   209fc:	af02      	add	r7, sp, #8
   209fe:	60f8      	str	r0, [r7, #12]
   20a00:	60b9      	str	r1, [r7, #8]
   20a02:	607a      	str	r2, [r7, #4]
   20a04:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
   20a06:	2028      	movs	r0, #40	; 0x28
   20a08:	4b0b      	ldr	r3, [pc, #44]	; (20a38 <xTimerCreate+0x40>)
   20a0a:	4798      	blx	r3
   20a0c:	0003      	movs	r3, r0
   20a0e:	617b      	str	r3, [r7, #20]

		if( pxNewTimer != NULL )
   20a10:	697b      	ldr	r3, [r7, #20]
   20a12:	2b00      	cmp	r3, #0
   20a14:	d00a      	beq.n	20a2c <xTimerCreate+0x34>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
   20a16:	683c      	ldr	r4, [r7, #0]
   20a18:	687a      	ldr	r2, [r7, #4]
   20a1a:	68b9      	ldr	r1, [r7, #8]
   20a1c:	68f8      	ldr	r0, [r7, #12]
   20a1e:	697b      	ldr	r3, [r7, #20]
   20a20:	9301      	str	r3, [sp, #4]
   20a22:	6abb      	ldr	r3, [r7, #40]	; 0x28
   20a24:	9300      	str	r3, [sp, #0]
   20a26:	0023      	movs	r3, r4
   20a28:	4c04      	ldr	r4, [pc, #16]	; (20a3c <xTimerCreate+0x44>)
   20a2a:	47a0      	blx	r4
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */
		}

		return pxNewTimer;
   20a2c:	697b      	ldr	r3, [r7, #20]
	}
   20a2e:	0018      	movs	r0, r3
   20a30:	46bd      	mov	sp, r7
   20a32:	b007      	add	sp, #28
   20a34:	bd90      	pop	{r4, r7, pc}
   20a36:	46c0      	nop			; (mov r8, r8)
   20a38:	0001e9fd 	.word	0x0001e9fd
   20a3c:	00020a41 	.word	0x00020a41

00020a40 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
   20a40:	b580      	push	{r7, lr}
   20a42:	b084      	sub	sp, #16
   20a44:	af00      	add	r7, sp, #0
   20a46:	60f8      	str	r0, [r7, #12]
   20a48:	60b9      	str	r1, [r7, #8]
   20a4a:	607a      	str	r2, [r7, #4]
   20a4c:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
   20a4e:	68bb      	ldr	r3, [r7, #8]
   20a50:	2b00      	cmp	r3, #0
   20a52:	d101      	bne.n	20a58 <prvInitialiseNewTimer+0x18>
   20a54:	b672      	cpsid	i
   20a56:	e7fe      	b.n	20a56 <prvInitialiseNewTimer+0x16>

	if( pxNewTimer != NULL )
   20a58:	69fb      	ldr	r3, [r7, #28]
   20a5a:	2b00      	cmp	r3, #0
   20a5c:	d015      	beq.n	20a8a <prvInitialiseNewTimer+0x4a>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
   20a5e:	4b0d      	ldr	r3, [pc, #52]	; (20a94 <prvInitialiseNewTimer+0x54>)
   20a60:	4798      	blx	r3

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
   20a62:	69fb      	ldr	r3, [r7, #28]
   20a64:	68fa      	ldr	r2, [r7, #12]
   20a66:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
   20a68:	69fb      	ldr	r3, [r7, #28]
   20a6a:	68ba      	ldr	r2, [r7, #8]
   20a6c:	619a      	str	r2, [r3, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
   20a6e:	69fb      	ldr	r3, [r7, #28]
   20a70:	687a      	ldr	r2, [r7, #4]
   20a72:	61da      	str	r2, [r3, #28]
		pxNewTimer->pvTimerID = pvTimerID;
   20a74:	69fb      	ldr	r3, [r7, #28]
   20a76:	683a      	ldr	r2, [r7, #0]
   20a78:	621a      	str	r2, [r3, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
   20a7a:	69fb      	ldr	r3, [r7, #28]
   20a7c:	69ba      	ldr	r2, [r7, #24]
   20a7e:	625a      	str	r2, [r3, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
   20a80:	69fb      	ldr	r3, [r7, #28]
   20a82:	3304      	adds	r3, #4
   20a84:	0018      	movs	r0, r3
   20a86:	4b04      	ldr	r3, [pc, #16]	; (20a98 <prvInitialiseNewTimer+0x58>)
   20a88:	4798      	blx	r3
		traceTIMER_CREATE( pxNewTimer );
	}
}
   20a8a:	46c0      	nop			; (mov r8, r8)
   20a8c:	46bd      	mov	sp, r7
   20a8e:	b004      	add	sp, #16
   20a90:	bd80      	pop	{r7, pc}
   20a92:	46c0      	nop			; (mov r8, r8)
   20a94:	00020fad 	.word	0x00020fad
   20a98:	0001eaa1 	.word	0x0001eaa1

00020a9c <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
   20a9c:	b590      	push	{r4, r7, lr}
   20a9e:	b08b      	sub	sp, #44	; 0x2c
   20aa0:	af00      	add	r7, sp, #0
   20aa2:	60f8      	str	r0, [r7, #12]
   20aa4:	60b9      	str	r1, [r7, #8]
   20aa6:	607a      	str	r2, [r7, #4]
   20aa8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
   20aaa:	2300      	movs	r3, #0
   20aac:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
   20aae:	68fb      	ldr	r3, [r7, #12]
   20ab0:	2b00      	cmp	r3, #0
   20ab2:	d101      	bne.n	20ab8 <xTimerGenericCommand+0x1c>
   20ab4:	b672      	cpsid	i
   20ab6:	e7fe      	b.n	20ab6 <xTimerGenericCommand+0x1a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
   20ab8:	4b1e      	ldr	r3, [pc, #120]	; (20b34 <xTimerGenericCommand+0x98>)
   20aba:	681b      	ldr	r3, [r3, #0]
   20abc:	2b00      	cmp	r3, #0
   20abe:	d033      	beq.n	20b28 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
   20ac0:	2314      	movs	r3, #20
   20ac2:	18fb      	adds	r3, r7, r3
   20ac4:	68ba      	ldr	r2, [r7, #8]
   20ac6:	601a      	str	r2, [r3, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
   20ac8:	2314      	movs	r3, #20
   20aca:	18fb      	adds	r3, r7, r3
   20acc:	687a      	ldr	r2, [r7, #4]
   20ace:	605a      	str	r2, [r3, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
   20ad0:	2314      	movs	r3, #20
   20ad2:	18fb      	adds	r3, r7, r3
   20ad4:	68fa      	ldr	r2, [r7, #12]
   20ad6:	609a      	str	r2, [r3, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
   20ad8:	68bb      	ldr	r3, [r7, #8]
   20ada:	2b05      	cmp	r3, #5
   20adc:	dc1a      	bgt.n	20b14 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
   20ade:	4b16      	ldr	r3, [pc, #88]	; (20b38 <xTimerGenericCommand+0x9c>)
   20ae0:	4798      	blx	r3
   20ae2:	0003      	movs	r3, r0
   20ae4:	2b02      	cmp	r3, #2
   20ae6:	d10a      	bne.n	20afe <xTimerGenericCommand+0x62>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
   20ae8:	4b12      	ldr	r3, [pc, #72]	; (20b34 <xTimerGenericCommand+0x98>)
   20aea:	6818      	ldr	r0, [r3, #0]
   20aec:	6bba      	ldr	r2, [r7, #56]	; 0x38
   20aee:	2314      	movs	r3, #20
   20af0:	18f9      	adds	r1, r7, r3
   20af2:	2300      	movs	r3, #0
   20af4:	4c11      	ldr	r4, [pc, #68]	; (20b3c <xTimerGenericCommand+0xa0>)
   20af6:	47a0      	blx	r4
   20af8:	0003      	movs	r3, r0
   20afa:	627b      	str	r3, [r7, #36]	; 0x24
   20afc:	e014      	b.n	20b28 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
   20afe:	4b0d      	ldr	r3, [pc, #52]	; (20b34 <xTimerGenericCommand+0x98>)
   20b00:	6818      	ldr	r0, [r3, #0]
   20b02:	2314      	movs	r3, #20
   20b04:	18f9      	adds	r1, r7, r3
   20b06:	2300      	movs	r3, #0
   20b08:	2200      	movs	r2, #0
   20b0a:	4c0c      	ldr	r4, [pc, #48]	; (20b3c <xTimerGenericCommand+0xa0>)
   20b0c:	47a0      	blx	r4
   20b0e:	0003      	movs	r3, r0
   20b10:	627b      	str	r3, [r7, #36]	; 0x24
   20b12:	e009      	b.n	20b28 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
   20b14:	4b07      	ldr	r3, [pc, #28]	; (20b34 <xTimerGenericCommand+0x98>)
   20b16:	6818      	ldr	r0, [r3, #0]
   20b18:	683a      	ldr	r2, [r7, #0]
   20b1a:	2314      	movs	r3, #20
   20b1c:	18f9      	adds	r1, r7, r3
   20b1e:	2300      	movs	r3, #0
   20b20:	4c07      	ldr	r4, [pc, #28]	; (20b40 <xTimerGenericCommand+0xa4>)
   20b22:	47a0      	blx	r4
   20b24:	0003      	movs	r3, r0
   20b26:	627b      	str	r3, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
   20b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   20b2a:	0018      	movs	r0, r3
   20b2c:	46bd      	mov	sp, r7
   20b2e:	b00b      	add	sp, #44	; 0x2c
   20b30:	bd90      	pop	{r4, r7, pc}
   20b32:	46c0      	nop			; (mov r8, r8)
   20b34:	200003fc 	.word	0x200003fc
   20b38:	00020461 	.word	0x00020461
   20b3c:	0001ed31 	.word	0x0001ed31
   20b40:	0001ef11 	.word	0x0001ef11

00020b44 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
   20b44:	b590      	push	{r4, r7, lr}
   20b46:	b087      	sub	sp, #28
   20b48:	af02      	add	r7, sp, #8
   20b4a:	6078      	str	r0, [r7, #4]
   20b4c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   20b4e:	4b18      	ldr	r3, [pc, #96]	; (20bb0 <prvProcessExpiredTimer+0x6c>)
   20b50:	681b      	ldr	r3, [r3, #0]
   20b52:	68db      	ldr	r3, [r3, #12]
   20b54:	68db      	ldr	r3, [r3, #12]
   20b56:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   20b58:	68fb      	ldr	r3, [r7, #12]
   20b5a:	3304      	adds	r3, #4
   20b5c:	0018      	movs	r0, r3
   20b5e:	4b15      	ldr	r3, [pc, #84]	; (20bb4 <prvProcessExpiredTimer+0x70>)
   20b60:	4798      	blx	r3
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   20b62:	68fb      	ldr	r3, [r7, #12]
   20b64:	69db      	ldr	r3, [r3, #28]
   20b66:	2b01      	cmp	r3, #1
   20b68:	d119      	bne.n	20b9e <prvProcessExpiredTimer+0x5a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
   20b6a:	68fb      	ldr	r3, [r7, #12]
   20b6c:	699a      	ldr	r2, [r3, #24]
   20b6e:	687b      	ldr	r3, [r7, #4]
   20b70:	18d1      	adds	r1, r2, r3
   20b72:	687b      	ldr	r3, [r7, #4]
   20b74:	683a      	ldr	r2, [r7, #0]
   20b76:	68f8      	ldr	r0, [r7, #12]
   20b78:	4c0f      	ldr	r4, [pc, #60]	; (20bb8 <prvProcessExpiredTimer+0x74>)
   20b7a:	47a0      	blx	r4
   20b7c:	1e03      	subs	r3, r0, #0
   20b7e:	d00e      	beq.n	20b9e <prvProcessExpiredTimer+0x5a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
   20b80:	687a      	ldr	r2, [r7, #4]
   20b82:	68f8      	ldr	r0, [r7, #12]
   20b84:	2300      	movs	r3, #0
   20b86:	9300      	str	r3, [sp, #0]
   20b88:	2300      	movs	r3, #0
   20b8a:	2100      	movs	r1, #0
   20b8c:	4c0b      	ldr	r4, [pc, #44]	; (20bbc <prvProcessExpiredTimer+0x78>)
   20b8e:	47a0      	blx	r4
   20b90:	0003      	movs	r3, r0
   20b92:	60bb      	str	r3, [r7, #8]
			configASSERT( xResult );
   20b94:	68bb      	ldr	r3, [r7, #8]
   20b96:	2b00      	cmp	r3, #0
   20b98:	d101      	bne.n	20b9e <prvProcessExpiredTimer+0x5a>
   20b9a:	b672      	cpsid	i
   20b9c:	e7fe      	b.n	20b9c <prvProcessExpiredTimer+0x58>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   20b9e:	68fb      	ldr	r3, [r7, #12]
   20ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   20ba2:	68fa      	ldr	r2, [r7, #12]
   20ba4:	0010      	movs	r0, r2
   20ba6:	4798      	blx	r3
}
   20ba8:	46c0      	nop			; (mov r8, r8)
   20baa:	46bd      	mov	sp, r7
   20bac:	b005      	add	sp, #20
   20bae:	bd90      	pop	{r4, r7, pc}
   20bb0:	200003f4 	.word	0x200003f4
   20bb4:	0001eb67 	.word	0x0001eb67
   20bb8:	00020d21 	.word	0x00020d21
   20bbc:	00020a9d 	.word	0x00020a9d

00020bc0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
   20bc0:	b580      	push	{r7, lr}
   20bc2:	b084      	sub	sp, #16
   20bc4:	af00      	add	r7, sp, #0
   20bc6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
   20bc8:	2308      	movs	r3, #8
   20bca:	18fb      	adds	r3, r7, r3
   20bcc:	0018      	movs	r0, r3
   20bce:	4b06      	ldr	r3, [pc, #24]	; (20be8 <prvTimerTask+0x28>)
   20bd0:	4798      	blx	r3
   20bd2:	0003      	movs	r3, r0
   20bd4:	60fb      	str	r3, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
   20bd6:	68ba      	ldr	r2, [r7, #8]
   20bd8:	68fb      	ldr	r3, [r7, #12]
   20bda:	0011      	movs	r1, r2
   20bdc:	0018      	movs	r0, r3
   20bde:	4b03      	ldr	r3, [pc, #12]	; (20bec <prvTimerTask+0x2c>)
   20be0:	4798      	blx	r3

		/* Empty the command queue. */
		prvProcessReceivedCommands();
   20be2:	4b03      	ldr	r3, [pc, #12]	; (20bf0 <prvTimerTask+0x30>)
   20be4:	4798      	blx	r3
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
   20be6:	e7ef      	b.n	20bc8 <prvTimerTask+0x8>
   20be8:	00020c99 	.word	0x00020c99
   20bec:	00020bf5 	.word	0x00020bf5
   20bf0:	00020da9 	.word	0x00020da9

00020bf4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
   20bf4:	b580      	push	{r7, lr}
   20bf6:	b084      	sub	sp, #16
   20bf8:	af00      	add	r7, sp, #0
   20bfa:	6078      	str	r0, [r7, #4]
   20bfc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
   20bfe:	4b1e      	ldr	r3, [pc, #120]	; (20c78 <prvProcessTimerOrBlockTask+0x84>)
   20c00:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   20c02:	2308      	movs	r3, #8
   20c04:	18fb      	adds	r3, r7, r3
   20c06:	0018      	movs	r0, r3
   20c08:	4b1c      	ldr	r3, [pc, #112]	; (20c7c <prvProcessTimerOrBlockTask+0x88>)
   20c0a:	4798      	blx	r3
   20c0c:	0003      	movs	r3, r0
   20c0e:	60fb      	str	r3, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
   20c10:	68bb      	ldr	r3, [r7, #8]
   20c12:	2b00      	cmp	r3, #0
   20c14:	d129      	bne.n	20c6a <prvProcessTimerOrBlockTask+0x76>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
   20c16:	683b      	ldr	r3, [r7, #0]
   20c18:	2b00      	cmp	r3, #0
   20c1a:	d10c      	bne.n	20c36 <prvProcessTimerOrBlockTask+0x42>
   20c1c:	687a      	ldr	r2, [r7, #4]
   20c1e:	68fb      	ldr	r3, [r7, #12]
   20c20:	429a      	cmp	r2, r3
   20c22:	d808      	bhi.n	20c36 <prvProcessTimerOrBlockTask+0x42>
			{
				( void ) xTaskResumeAll();
   20c24:	4b16      	ldr	r3, [pc, #88]	; (20c80 <prvProcessTimerOrBlockTask+0x8c>)
   20c26:	4798      	blx	r3
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
   20c28:	68fa      	ldr	r2, [r7, #12]
   20c2a:	687b      	ldr	r3, [r7, #4]
   20c2c:	0011      	movs	r1, r2
   20c2e:	0018      	movs	r0, r3
   20c30:	4b14      	ldr	r3, [pc, #80]	; (20c84 <prvProcessTimerOrBlockTask+0x90>)
   20c32:	4798      	blx	r3
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
   20c34:	e01b      	b.n	20c6e <prvProcessTimerOrBlockTask+0x7a>
				if( xListWasEmpty != pdFALSE )
   20c36:	683b      	ldr	r3, [r7, #0]
   20c38:	2b00      	cmp	r3, #0
   20c3a:	d006      	beq.n	20c4a <prvProcessTimerOrBlockTask+0x56>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
   20c3c:	4b12      	ldr	r3, [pc, #72]	; (20c88 <prvProcessTimerOrBlockTask+0x94>)
   20c3e:	681b      	ldr	r3, [r3, #0]
   20c40:	681b      	ldr	r3, [r3, #0]
   20c42:	425a      	negs	r2, r3
   20c44:	4153      	adcs	r3, r2
   20c46:	b2db      	uxtb	r3, r3
   20c48:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
   20c4a:	4b10      	ldr	r3, [pc, #64]	; (20c8c <prvProcessTimerOrBlockTask+0x98>)
   20c4c:	6818      	ldr	r0, [r3, #0]
   20c4e:	687a      	ldr	r2, [r7, #4]
   20c50:	68fb      	ldr	r3, [r7, #12]
   20c52:	1ad3      	subs	r3, r2, r3
   20c54:	683a      	ldr	r2, [r7, #0]
   20c56:	0019      	movs	r1, r3
   20c58:	4b0d      	ldr	r3, [pc, #52]	; (20c90 <prvProcessTimerOrBlockTask+0x9c>)
   20c5a:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   20c5c:	4b08      	ldr	r3, [pc, #32]	; (20c80 <prvProcessTimerOrBlockTask+0x8c>)
   20c5e:	4798      	blx	r3
   20c60:	1e03      	subs	r3, r0, #0
   20c62:	d104      	bne.n	20c6e <prvProcessTimerOrBlockTask+0x7a>
					portYIELD_WITHIN_API();
   20c64:	4b0b      	ldr	r3, [pc, #44]	; (20c94 <prvProcessTimerOrBlockTask+0xa0>)
   20c66:	4798      	blx	r3
}
   20c68:	e001      	b.n	20c6e <prvProcessTimerOrBlockTask+0x7a>
			( void ) xTaskResumeAll();
   20c6a:	4b05      	ldr	r3, [pc, #20]	; (20c80 <prvProcessTimerOrBlockTask+0x8c>)
   20c6c:	4798      	blx	r3
}
   20c6e:	46c0      	nop			; (mov r8, r8)
   20c70:	46bd      	mov	sp, r7
   20c72:	b004      	add	sp, #16
   20c74:	bd80      	pop	{r7, pc}
   20c76:	46c0      	nop			; (mov r8, r8)
   20c78:	0001fcf1 	.word	0x0001fcf1
   20c7c:	00020cd9 	.word	0x00020cd9
   20c80:	0001fd09 	.word	0x0001fd09
   20c84:	00020b45 	.word	0x00020b45
   20c88:	200003f8 	.word	0x200003f8
   20c8c:	200003fc 	.word	0x200003fc
   20c90:	0001f67d 	.word	0x0001f67d
   20c94:	0001e8a1 	.word	0x0001e8a1

00020c98 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
   20c98:	b580      	push	{r7, lr}
   20c9a:	b084      	sub	sp, #16
   20c9c:	af00      	add	r7, sp, #0
   20c9e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
   20ca0:	4b0c      	ldr	r3, [pc, #48]	; (20cd4 <prvGetNextExpireTime+0x3c>)
   20ca2:	681b      	ldr	r3, [r3, #0]
   20ca4:	681b      	ldr	r3, [r3, #0]
   20ca6:	425a      	negs	r2, r3
   20ca8:	4153      	adcs	r3, r2
   20caa:	b2db      	uxtb	r3, r3
   20cac:	001a      	movs	r2, r3
   20cae:	687b      	ldr	r3, [r7, #4]
   20cb0:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
   20cb2:	687b      	ldr	r3, [r7, #4]
   20cb4:	681b      	ldr	r3, [r3, #0]
   20cb6:	2b00      	cmp	r3, #0
   20cb8:	d105      	bne.n	20cc6 <prvGetNextExpireTime+0x2e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   20cba:	4b06      	ldr	r3, [pc, #24]	; (20cd4 <prvGetNextExpireTime+0x3c>)
   20cbc:	681b      	ldr	r3, [r3, #0]
   20cbe:	68db      	ldr	r3, [r3, #12]
   20cc0:	681b      	ldr	r3, [r3, #0]
   20cc2:	60fb      	str	r3, [r7, #12]
   20cc4:	e001      	b.n	20cca <prvGetNextExpireTime+0x32>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
   20cc6:	2300      	movs	r3, #0
   20cc8:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
   20cca:	68fb      	ldr	r3, [r7, #12]
}
   20ccc:	0018      	movs	r0, r3
   20cce:	46bd      	mov	sp, r7
   20cd0:	b004      	add	sp, #16
   20cd2:	bd80      	pop	{r7, pc}
   20cd4:	200003f4 	.word	0x200003f4

00020cd8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
   20cd8:	b580      	push	{r7, lr}
   20cda:	b084      	sub	sp, #16
   20cdc:	af00      	add	r7, sp, #0
   20cde:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
   20ce0:	4b0c      	ldr	r3, [pc, #48]	; (20d14 <prvSampleTimeNow+0x3c>)
   20ce2:	4798      	blx	r3
   20ce4:	0003      	movs	r3, r0
   20ce6:	60fb      	str	r3, [r7, #12]

	if( xTimeNow < xLastTime )
   20ce8:	4b0b      	ldr	r3, [pc, #44]	; (20d18 <prvSampleTimeNow+0x40>)
   20cea:	681b      	ldr	r3, [r3, #0]
   20cec:	68fa      	ldr	r2, [r7, #12]
   20cee:	429a      	cmp	r2, r3
   20cf0:	d205      	bcs.n	20cfe <prvSampleTimeNow+0x26>
	{
		prvSwitchTimerLists();
   20cf2:	4b0a      	ldr	r3, [pc, #40]	; (20d1c <prvSampleTimeNow+0x44>)
   20cf4:	4798      	blx	r3
		*pxTimerListsWereSwitched = pdTRUE;
   20cf6:	687b      	ldr	r3, [r7, #4]
   20cf8:	2201      	movs	r2, #1
   20cfa:	601a      	str	r2, [r3, #0]
   20cfc:	e002      	b.n	20d04 <prvSampleTimeNow+0x2c>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
   20cfe:	687b      	ldr	r3, [r7, #4]
   20d00:	2200      	movs	r2, #0
   20d02:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
   20d04:	4b04      	ldr	r3, [pc, #16]	; (20d18 <prvSampleTimeNow+0x40>)
   20d06:	68fa      	ldr	r2, [r7, #12]
   20d08:	601a      	str	r2, [r3, #0]

	return xTimeNow;
   20d0a:	68fb      	ldr	r3, [r7, #12]
}
   20d0c:	0018      	movs	r0, r3
   20d0e:	46bd      	mov	sp, r7
   20d10:	b004      	add	sp, #16
   20d12:	bd80      	pop	{r7, pc}
   20d14:	0001fe3d 	.word	0x0001fe3d
   20d18:	20000404 	.word	0x20000404
   20d1c:	00020eed 	.word	0x00020eed

00020d20 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
   20d20:	b580      	push	{r7, lr}
   20d22:	b086      	sub	sp, #24
   20d24:	af00      	add	r7, sp, #0
   20d26:	60f8      	str	r0, [r7, #12]
   20d28:	60b9      	str	r1, [r7, #8]
   20d2a:	607a      	str	r2, [r7, #4]
   20d2c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
   20d2e:	2300      	movs	r3, #0
   20d30:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
   20d32:	68fb      	ldr	r3, [r7, #12]
   20d34:	68ba      	ldr	r2, [r7, #8]
   20d36:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   20d38:	68fb      	ldr	r3, [r7, #12]
   20d3a:	68fa      	ldr	r2, [r7, #12]
   20d3c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
   20d3e:	68ba      	ldr	r2, [r7, #8]
   20d40:	687b      	ldr	r3, [r7, #4]
   20d42:	429a      	cmp	r2, r3
   20d44:	d812      	bhi.n	20d6c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   20d46:	687a      	ldr	r2, [r7, #4]
   20d48:	683b      	ldr	r3, [r7, #0]
   20d4a:	1ad2      	subs	r2, r2, r3
   20d4c:	68fb      	ldr	r3, [r7, #12]
   20d4e:	699b      	ldr	r3, [r3, #24]
   20d50:	429a      	cmp	r2, r3
   20d52:	d302      	bcc.n	20d5a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
   20d54:	2301      	movs	r3, #1
   20d56:	617b      	str	r3, [r7, #20]
   20d58:	e01b      	b.n	20d92 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
   20d5a:	4b10      	ldr	r3, [pc, #64]	; (20d9c <prvInsertTimerInActiveList+0x7c>)
   20d5c:	681a      	ldr	r2, [r3, #0]
   20d5e:	68fb      	ldr	r3, [r7, #12]
   20d60:	3304      	adds	r3, #4
   20d62:	0019      	movs	r1, r3
   20d64:	0010      	movs	r0, r2
   20d66:	4b0e      	ldr	r3, [pc, #56]	; (20da0 <prvInsertTimerInActiveList+0x80>)
   20d68:	4798      	blx	r3
   20d6a:	e012      	b.n	20d92 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
   20d6c:	687a      	ldr	r2, [r7, #4]
   20d6e:	683b      	ldr	r3, [r7, #0]
   20d70:	429a      	cmp	r2, r3
   20d72:	d206      	bcs.n	20d82 <prvInsertTimerInActiveList+0x62>
   20d74:	68ba      	ldr	r2, [r7, #8]
   20d76:	683b      	ldr	r3, [r7, #0]
   20d78:	429a      	cmp	r2, r3
   20d7a:	d302      	bcc.n	20d82 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
   20d7c:	2301      	movs	r3, #1
   20d7e:	617b      	str	r3, [r7, #20]
   20d80:	e007      	b.n	20d92 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   20d82:	4b08      	ldr	r3, [pc, #32]	; (20da4 <prvInsertTimerInActiveList+0x84>)
   20d84:	681a      	ldr	r2, [r3, #0]
   20d86:	68fb      	ldr	r3, [r7, #12]
   20d88:	3304      	adds	r3, #4
   20d8a:	0019      	movs	r1, r3
   20d8c:	0010      	movs	r0, r2
   20d8e:	4b04      	ldr	r3, [pc, #16]	; (20da0 <prvInsertTimerInActiveList+0x80>)
   20d90:	4798      	blx	r3
		}
	}

	return xProcessTimerNow;
   20d92:	697b      	ldr	r3, [r7, #20]
}
   20d94:	0018      	movs	r0, r3
   20d96:	46bd      	mov	sp, r7
   20d98:	b006      	add	sp, #24
   20d9a:	bd80      	pop	{r7, pc}
   20d9c:	200003f8 	.word	0x200003f8
   20da0:	0001eafb 	.word	0x0001eafb
   20da4:	200003f4 	.word	0x200003f4

00020da8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
   20da8:	b590      	push	{r4, r7, lr}
   20daa:	b08d      	sub	sp, #52	; 0x34
   20dac:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
   20dae:	e07e      	b.n	20eae <prvProcessReceivedCommands+0x106>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
   20db0:	2308      	movs	r3, #8
   20db2:	18fb      	adds	r3, r7, r3
   20db4:	681b      	ldr	r3, [r3, #0]
   20db6:	2b00      	cmp	r3, #0
   20db8:	da10      	bge.n	20ddc <prvProcessReceivedCommands+0x34>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
   20dba:	2308      	movs	r3, #8
   20dbc:	18fb      	adds	r3, r7, r3
   20dbe:	3304      	adds	r3, #4
   20dc0:	627b      	str	r3, [r7, #36]	; 0x24

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
   20dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   20dc4:	2b00      	cmp	r3, #0
   20dc6:	d101      	bne.n	20dcc <prvProcessReceivedCommands+0x24>
   20dc8:	b672      	cpsid	i
   20dca:	e7fe      	b.n	20dca <prvProcessReceivedCommands+0x22>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
   20dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   20dce:	681a      	ldr	r2, [r3, #0]
   20dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   20dd2:	6858      	ldr	r0, [r3, #4]
   20dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   20dd6:	689b      	ldr	r3, [r3, #8]
   20dd8:	0019      	movs	r1, r3
   20dda:	4790      	blx	r2
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
   20ddc:	2308      	movs	r3, #8
   20dde:	18fb      	adds	r3, r7, r3
   20de0:	681b      	ldr	r3, [r3, #0]
   20de2:	2b00      	cmp	r3, #0
   20de4:	db63      	blt.n	20eae <prvProcessReceivedCommands+0x106>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
   20de6:	2308      	movs	r3, #8
   20de8:	18fb      	adds	r3, r7, r3
   20dea:	689b      	ldr	r3, [r3, #8]
   20dec:	623b      	str	r3, [r7, #32]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
   20dee:	6a3b      	ldr	r3, [r7, #32]
   20df0:	695b      	ldr	r3, [r3, #20]
   20df2:	2b00      	cmp	r3, #0
   20df4:	d004      	beq.n	20e00 <prvProcessReceivedCommands+0x58>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   20df6:	6a3b      	ldr	r3, [r7, #32]
   20df8:	3304      	adds	r3, #4
   20dfa:	0018      	movs	r0, r3
   20dfc:	4b33      	ldr	r3, [pc, #204]	; (20ecc <prvProcessReceivedCommands+0x124>)
   20dfe:	4798      	blx	r3
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   20e00:	1d3b      	adds	r3, r7, #4
   20e02:	0018      	movs	r0, r3
   20e04:	4b32      	ldr	r3, [pc, #200]	; (20ed0 <prvProcessReceivedCommands+0x128>)
   20e06:	4798      	blx	r3
   20e08:	0003      	movs	r3, r0
   20e0a:	61fb      	str	r3, [r7, #28]

			switch( xMessage.xMessageID )
   20e0c:	2308      	movs	r3, #8
   20e0e:	18fb      	adds	r3, r7, r3
   20e10:	681b      	ldr	r3, [r3, #0]
   20e12:	2b09      	cmp	r3, #9
   20e14:	d84a      	bhi.n	20eac <prvProcessReceivedCommands+0x104>
   20e16:	009a      	lsls	r2, r3, #2
   20e18:	4b2e      	ldr	r3, [pc, #184]	; (20ed4 <prvProcessReceivedCommands+0x12c>)
   20e1a:	18d3      	adds	r3, r2, r3
   20e1c:	681b      	ldr	r3, [r3, #0]
   20e1e:	469f      	mov	pc, r3
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
   20e20:	2308      	movs	r3, #8
   20e22:	18fb      	adds	r3, r7, r3
   20e24:	685a      	ldr	r2, [r3, #4]
   20e26:	6a3b      	ldr	r3, [r7, #32]
   20e28:	699b      	ldr	r3, [r3, #24]
   20e2a:	18d1      	adds	r1, r2, r3
   20e2c:	2308      	movs	r3, #8
   20e2e:	18fb      	adds	r3, r7, r3
   20e30:	685b      	ldr	r3, [r3, #4]
   20e32:	69fa      	ldr	r2, [r7, #28]
   20e34:	6a38      	ldr	r0, [r7, #32]
   20e36:	4c28      	ldr	r4, [pc, #160]	; (20ed8 <prvProcessReceivedCommands+0x130>)
   20e38:	47a0      	blx	r4
   20e3a:	1e03      	subs	r3, r0, #0
   20e3c:	d037      	beq.n	20eae <prvProcessReceivedCommands+0x106>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   20e3e:	6a3b      	ldr	r3, [r7, #32]
   20e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   20e42:	6a3a      	ldr	r2, [r7, #32]
   20e44:	0010      	movs	r0, r2
   20e46:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   20e48:	6a3b      	ldr	r3, [r7, #32]
   20e4a:	69db      	ldr	r3, [r3, #28]
   20e4c:	2b01      	cmp	r3, #1
   20e4e:	d12e      	bne.n	20eae <prvProcessReceivedCommands+0x106>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
   20e50:	2308      	movs	r3, #8
   20e52:	18fb      	adds	r3, r7, r3
   20e54:	685a      	ldr	r2, [r3, #4]
   20e56:	6a3b      	ldr	r3, [r7, #32]
   20e58:	699b      	ldr	r3, [r3, #24]
   20e5a:	18d2      	adds	r2, r2, r3
   20e5c:	6a38      	ldr	r0, [r7, #32]
   20e5e:	2300      	movs	r3, #0
   20e60:	9300      	str	r3, [sp, #0]
   20e62:	2300      	movs	r3, #0
   20e64:	2100      	movs	r1, #0
   20e66:	4c1d      	ldr	r4, [pc, #116]	; (20edc <prvProcessReceivedCommands+0x134>)
   20e68:	47a0      	blx	r4
   20e6a:	0003      	movs	r3, r0
   20e6c:	61bb      	str	r3, [r7, #24]
							configASSERT( xResult );
   20e6e:	69bb      	ldr	r3, [r7, #24]
   20e70:	2b00      	cmp	r3, #0
   20e72:	d11c      	bne.n	20eae <prvProcessReceivedCommands+0x106>
   20e74:	b672      	cpsid	i
   20e76:	e7fe      	b.n	20e76 <prvProcessReceivedCommands+0xce>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
   20e78:	2308      	movs	r3, #8
   20e7a:	18fb      	adds	r3, r7, r3
   20e7c:	685a      	ldr	r2, [r3, #4]
   20e7e:	6a3b      	ldr	r3, [r7, #32]
   20e80:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
   20e82:	6a3b      	ldr	r3, [r7, #32]
   20e84:	699b      	ldr	r3, [r3, #24]
   20e86:	2b00      	cmp	r3, #0
   20e88:	d101      	bne.n	20e8e <prvProcessReceivedCommands+0xe6>
   20e8a:	b672      	cpsid	i
   20e8c:	e7fe      	b.n	20e8c <prvProcessReceivedCommands+0xe4>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
   20e8e:	6a3b      	ldr	r3, [r7, #32]
   20e90:	699a      	ldr	r2, [r3, #24]
   20e92:	69fb      	ldr	r3, [r7, #28]
   20e94:	18d1      	adds	r1, r2, r3
   20e96:	69fb      	ldr	r3, [r7, #28]
   20e98:	69fa      	ldr	r2, [r7, #28]
   20e9a:	6a38      	ldr	r0, [r7, #32]
   20e9c:	4c0e      	ldr	r4, [pc, #56]	; (20ed8 <prvProcessReceivedCommands+0x130>)
   20e9e:	47a0      	blx	r4
					break;
   20ea0:	e005      	b.n	20eae <prvProcessReceivedCommands+0x106>
					allocated. */
					#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
					{
						/* The timer can only have been allocated dynamically -
						free it again. */
						vPortFree( pxTimer );
   20ea2:	6a3b      	ldr	r3, [r7, #32]
   20ea4:	0018      	movs	r0, r3
   20ea6:	4b0e      	ldr	r3, [pc, #56]	; (20ee0 <prvProcessReceivedCommands+0x138>)
   20ea8:	4798      	blx	r3
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
   20eaa:	e000      	b.n	20eae <prvProcessReceivedCommands+0x106>

				default	:
					/* Don't expect to get here. */
					break;
   20eac:	46c0      	nop			; (mov r8, r8)
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
   20eae:	4b0d      	ldr	r3, [pc, #52]	; (20ee4 <prvProcessReceivedCommands+0x13c>)
   20eb0:	681b      	ldr	r3, [r3, #0]
   20eb2:	2208      	movs	r2, #8
   20eb4:	18b9      	adds	r1, r7, r2
   20eb6:	2200      	movs	r2, #0
   20eb8:	0018      	movs	r0, r3
   20eba:	4b0b      	ldr	r3, [pc, #44]	; (20ee8 <prvProcessReceivedCommands+0x140>)
   20ebc:	4798      	blx	r3
   20ebe:	1e03      	subs	r3, r0, #0
   20ec0:	d000      	beq.n	20ec4 <prvProcessReceivedCommands+0x11c>
   20ec2:	e775      	b.n	20db0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
   20ec4:	46c0      	nop			; (mov r8, r8)
   20ec6:	46bd      	mov	sp, r7
   20ec8:	b00b      	add	sp, #44	; 0x2c
   20eca:	bd90      	pop	{r4, r7, pc}
   20ecc:	0001eb67 	.word	0x0001eb67
   20ed0:	00020cd9 	.word	0x00020cd9
   20ed4:	0002a60c 	.word	0x0002a60c
   20ed8:	00020d21 	.word	0x00020d21
   20edc:	00020a9d 	.word	0x00020a9d
   20ee0:	0001ea31 	.word	0x0001ea31
   20ee4:	200003fc 	.word	0x200003fc
   20ee8:	0001f031 	.word	0x0001f031

00020eec <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
   20eec:	b590      	push	{r4, r7, lr}
   20eee:	b089      	sub	sp, #36	; 0x24
   20ef0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   20ef2:	e03e      	b.n	20f72 <prvSwitchTimerLists+0x86>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   20ef4:	4b28      	ldr	r3, [pc, #160]	; (20f98 <prvSwitchTimerLists+0xac>)
   20ef6:	681b      	ldr	r3, [r3, #0]
   20ef8:	68db      	ldr	r3, [r3, #12]
   20efa:	681b      	ldr	r3, [r3, #0]
   20efc:	617b      	str	r3, [r7, #20]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   20efe:	4b26      	ldr	r3, [pc, #152]	; (20f98 <prvSwitchTimerLists+0xac>)
   20f00:	681b      	ldr	r3, [r3, #0]
   20f02:	68db      	ldr	r3, [r3, #12]
   20f04:	68db      	ldr	r3, [r3, #12]
   20f06:	613b      	str	r3, [r7, #16]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   20f08:	693b      	ldr	r3, [r7, #16]
   20f0a:	3304      	adds	r3, #4
   20f0c:	0018      	movs	r0, r3
   20f0e:	4b23      	ldr	r3, [pc, #140]	; (20f9c <prvSwitchTimerLists+0xb0>)
   20f10:	4798      	blx	r3
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   20f12:	693b      	ldr	r3, [r7, #16]
   20f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   20f16:	693a      	ldr	r2, [r7, #16]
   20f18:	0010      	movs	r0, r2
   20f1a:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   20f1c:	693b      	ldr	r3, [r7, #16]
   20f1e:	69db      	ldr	r3, [r3, #28]
   20f20:	2b01      	cmp	r3, #1
   20f22:	d126      	bne.n	20f72 <prvSwitchTimerLists+0x86>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
   20f24:	693b      	ldr	r3, [r7, #16]
   20f26:	699a      	ldr	r2, [r3, #24]
   20f28:	697b      	ldr	r3, [r7, #20]
   20f2a:	18d3      	adds	r3, r2, r3
   20f2c:	60fb      	str	r3, [r7, #12]
			if( xReloadTime > xNextExpireTime )
   20f2e:	68fa      	ldr	r2, [r7, #12]
   20f30:	697b      	ldr	r3, [r7, #20]
   20f32:	429a      	cmp	r2, r3
   20f34:	d90e      	bls.n	20f54 <prvSwitchTimerLists+0x68>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
   20f36:	693b      	ldr	r3, [r7, #16]
   20f38:	68fa      	ldr	r2, [r7, #12]
   20f3a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   20f3c:	693b      	ldr	r3, [r7, #16]
   20f3e:	693a      	ldr	r2, [r7, #16]
   20f40:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   20f42:	4b15      	ldr	r3, [pc, #84]	; (20f98 <prvSwitchTimerLists+0xac>)
   20f44:	681a      	ldr	r2, [r3, #0]
   20f46:	693b      	ldr	r3, [r7, #16]
   20f48:	3304      	adds	r3, #4
   20f4a:	0019      	movs	r1, r3
   20f4c:	0010      	movs	r0, r2
   20f4e:	4b14      	ldr	r3, [pc, #80]	; (20fa0 <prvSwitchTimerLists+0xb4>)
   20f50:	4798      	blx	r3
   20f52:	e00e      	b.n	20f72 <prvSwitchTimerLists+0x86>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
   20f54:	697a      	ldr	r2, [r7, #20]
   20f56:	6938      	ldr	r0, [r7, #16]
   20f58:	2300      	movs	r3, #0
   20f5a:	9300      	str	r3, [sp, #0]
   20f5c:	2300      	movs	r3, #0
   20f5e:	2100      	movs	r1, #0
   20f60:	4c10      	ldr	r4, [pc, #64]	; (20fa4 <prvSwitchTimerLists+0xb8>)
   20f62:	47a0      	blx	r4
   20f64:	0003      	movs	r3, r0
   20f66:	60bb      	str	r3, [r7, #8]
				configASSERT( xResult );
   20f68:	68bb      	ldr	r3, [r7, #8]
   20f6a:	2b00      	cmp	r3, #0
   20f6c:	d101      	bne.n	20f72 <prvSwitchTimerLists+0x86>
   20f6e:	b672      	cpsid	i
   20f70:	e7fe      	b.n	20f70 <prvSwitchTimerLists+0x84>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   20f72:	4b09      	ldr	r3, [pc, #36]	; (20f98 <prvSwitchTimerLists+0xac>)
   20f74:	681b      	ldr	r3, [r3, #0]
   20f76:	681b      	ldr	r3, [r3, #0]
   20f78:	2b00      	cmp	r3, #0
   20f7a:	d1bb      	bne.n	20ef4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
   20f7c:	4b06      	ldr	r3, [pc, #24]	; (20f98 <prvSwitchTimerLists+0xac>)
   20f7e:	681b      	ldr	r3, [r3, #0]
   20f80:	607b      	str	r3, [r7, #4]
	pxCurrentTimerList = pxOverflowTimerList;
   20f82:	4b09      	ldr	r3, [pc, #36]	; (20fa8 <prvSwitchTimerLists+0xbc>)
   20f84:	681a      	ldr	r2, [r3, #0]
   20f86:	4b04      	ldr	r3, [pc, #16]	; (20f98 <prvSwitchTimerLists+0xac>)
   20f88:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
   20f8a:	4b07      	ldr	r3, [pc, #28]	; (20fa8 <prvSwitchTimerLists+0xbc>)
   20f8c:	687a      	ldr	r2, [r7, #4]
   20f8e:	601a      	str	r2, [r3, #0]
}
   20f90:	46c0      	nop			; (mov r8, r8)
   20f92:	46bd      	mov	sp, r7
   20f94:	b007      	add	sp, #28
   20f96:	bd90      	pop	{r4, r7, pc}
   20f98:	200003f4 	.word	0x200003f4
   20f9c:	0001eb67 	.word	0x0001eb67
   20fa0:	0001eafb 	.word	0x0001eafb
   20fa4:	00020a9d 	.word	0x00020a9d
   20fa8:	200003f8 	.word	0x200003f8

00020fac <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
   20fac:	b580      	push	{r7, lr}
   20fae:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
   20fb0:	4b10      	ldr	r3, [pc, #64]	; (20ff4 <prvCheckForValidListAndQueue+0x48>)
   20fb2:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
   20fb4:	4b10      	ldr	r3, [pc, #64]	; (20ff8 <prvCheckForValidListAndQueue+0x4c>)
   20fb6:	681b      	ldr	r3, [r3, #0]
   20fb8:	2b00      	cmp	r3, #0
   20fba:	d115      	bne.n	20fe8 <prvCheckForValidListAndQueue+0x3c>
		{
			vListInitialise( &xActiveTimerList1 );
   20fbc:	4b0f      	ldr	r3, [pc, #60]	; (20ffc <prvCheckForValidListAndQueue+0x50>)
   20fbe:	0018      	movs	r0, r3
   20fc0:	4b0f      	ldr	r3, [pc, #60]	; (21000 <prvCheckForValidListAndQueue+0x54>)
   20fc2:	4798      	blx	r3
			vListInitialise( &xActiveTimerList2 );
   20fc4:	4b0f      	ldr	r3, [pc, #60]	; (21004 <prvCheckForValidListAndQueue+0x58>)
   20fc6:	0018      	movs	r0, r3
   20fc8:	4b0d      	ldr	r3, [pc, #52]	; (21000 <prvCheckForValidListAndQueue+0x54>)
   20fca:	4798      	blx	r3
			pxCurrentTimerList = &xActiveTimerList1;
   20fcc:	4b0e      	ldr	r3, [pc, #56]	; (21008 <prvCheckForValidListAndQueue+0x5c>)
   20fce:	4a0b      	ldr	r2, [pc, #44]	; (20ffc <prvCheckForValidListAndQueue+0x50>)
   20fd0:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
   20fd2:	4b0e      	ldr	r3, [pc, #56]	; (2100c <prvCheckForValidListAndQueue+0x60>)
   20fd4:	4a0b      	ldr	r2, [pc, #44]	; (21004 <prvCheckForValidListAndQueue+0x58>)
   20fd6:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
   20fd8:	2200      	movs	r2, #0
   20fda:	2110      	movs	r1, #16
   20fdc:	2005      	movs	r0, #5
   20fde:	4b0c      	ldr	r3, [pc, #48]	; (21010 <prvCheckForValidListAndQueue+0x64>)
   20fe0:	4798      	blx	r3
   20fe2:	0002      	movs	r2, r0
   20fe4:	4b04      	ldr	r3, [pc, #16]	; (20ff8 <prvCheckForValidListAndQueue+0x4c>)
   20fe6:	601a      	str	r2, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
   20fe8:	4b0a      	ldr	r3, [pc, #40]	; (21014 <prvCheckForValidListAndQueue+0x68>)
   20fea:	4798      	blx	r3
}
   20fec:	46c0      	nop			; (mov r8, r8)
   20fee:	46bd      	mov	sp, r7
   20ff0:	bd80      	pop	{r7, pc}
   20ff2:	46c0      	nop			; (mov r8, r8)
   20ff4:	0001e8c1 	.word	0x0001e8c1
   20ff8:	200003fc 	.word	0x200003fc
   20ffc:	200003cc 	.word	0x200003cc
   21000:	0001ea65 	.word	0x0001ea65
   21004:	200003e0 	.word	0x200003e0
   21008:	200003f4 	.word	0x200003f4
   2100c:	200003f8 	.word	0x200003f8
   21010:	0001ec75 	.word	0x0001ec75
   21014:	0001e8e5 	.word	0x0001e8e5

00021018 <xTimerIsTimerActive>:
/*-----------------------------------------------------------*/

BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )
{
   21018:	b580      	push	{r7, lr}
   2101a:	b084      	sub	sp, #16
   2101c:	af00      	add	r7, sp, #0
   2101e:	6078      	str	r0, [r7, #4]
BaseType_t xTimerIsInActiveList;
Timer_t *pxTimer = ( Timer_t * ) xTimer;
   21020:	687b      	ldr	r3, [r7, #4]
   21022:	60fb      	str	r3, [r7, #12]

	configASSERT( xTimer );
   21024:	687b      	ldr	r3, [r7, #4]
   21026:	2b00      	cmp	r3, #0
   21028:	d101      	bne.n	2102e <xTimerIsTimerActive+0x16>
   2102a:	b672      	cpsid	i
   2102c:	e7fe      	b.n	2102c <xTimerIsTimerActive+0x14>

	/* Is the timer in the list of active timers? */
	taskENTER_CRITICAL();
   2102e:	4b07      	ldr	r3, [pc, #28]	; (2104c <xTimerIsTimerActive+0x34>)
   21030:	4798      	blx	r3
	{
		/* Checking to see if it is in the NULL list in effect checks to see if
		it is referenced from either the current or the overflow timer lists in
		one go, but the logic has to be reversed, hence the '!'. */
		xTimerIsInActiveList = ( BaseType_t ) !( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) ); /*lint !e961. Cast is only redundant when NULL is passed into the macro. */
   21032:	68fb      	ldr	r3, [r7, #12]
   21034:	695b      	ldr	r3, [r3, #20]
   21036:	1e5a      	subs	r2, r3, #1
   21038:	4193      	sbcs	r3, r2
   2103a:	b2db      	uxtb	r3, r3
   2103c:	60bb      	str	r3, [r7, #8]
	}
	taskEXIT_CRITICAL();
   2103e:	4b04      	ldr	r3, [pc, #16]	; (21050 <xTimerIsTimerActive+0x38>)
   21040:	4798      	blx	r3

	return xTimerIsInActiveList;
   21042:	68bb      	ldr	r3, [r7, #8]
} /*lint !e818 Can't be pointer to const due to the typedef. */
   21044:	0018      	movs	r0, r3
   21046:	46bd      	mov	sp, r7
   21048:	b004      	add	sp, #16
   2104a:	bd80      	pop	{r7, pc}
   2104c:	0001e8c1 	.word	0x0001e8c1
   21050:	0001e8e5 	.word	0x0001e8e5

00021054 <wdt_clear_early_warning>:
 *
 *  Clears the Watchdog timer early warning period elapsed flag, so that a new
 *  early warning period can be detected.
 */
static inline void wdt_clear_early_warning(void)
{
   21054:	b580      	push	{r7, lr}
   21056:	b082      	sub	sp, #8
   21058:	af00      	add	r7, sp, #0
	Wdt *const WDT_module = WDT;
   2105a:	4b04      	ldr	r3, [pc, #16]	; (2106c <wdt_clear_early_warning+0x18>)
   2105c:	607b      	str	r3, [r7, #4]

	WDT_module->INTFLAG.reg = WDT_INTFLAG_EW;
   2105e:	687b      	ldr	r3, [r7, #4]
   21060:	2201      	movs	r2, #1
   21062:	719a      	strb	r2, [r3, #6]
}
   21064:	46c0      	nop			; (mov r8, r8)
   21066:	46bd      	mov	sp, r7
   21068:	b002      	add	sp, #8
   2106a:	bd80      	pop	{r7, pc}
   2106c:	40001000 	.word	0x40001000

00021070 <WDT_Handler>:
	}
}

/** Handler for the WDT hardware module interrupt. */
void WDT_Handler(void)
{
   21070:	b580      	push	{r7, lr}
   21072:	af00      	add	r7, sp, #0
	wdt_clear_early_warning();
   21074:	4b05      	ldr	r3, [pc, #20]	; (2108c <WDT_Handler+0x1c>)
   21076:	4798      	blx	r3

	if (wdt_early_warning_callback) {
   21078:	4b05      	ldr	r3, [pc, #20]	; (21090 <WDT_Handler+0x20>)
   2107a:	681b      	ldr	r3, [r3, #0]
   2107c:	2b00      	cmp	r3, #0
   2107e:	d002      	beq.n	21086 <WDT_Handler+0x16>
		wdt_early_warning_callback();
   21080:	4b03      	ldr	r3, [pc, #12]	; (21090 <WDT_Handler+0x20>)
   21082:	681b      	ldr	r3, [r3, #0]
   21084:	4798      	blx	r3
	}
}
   21086:	46c0      	nop			; (mov r8, r8)
   21088:	46bd      	mov	sp, r7
   2108a:	bd80      	pop	{r7, pc}
   2108c:	00021055 	.word	0x00021055
   21090:	20000924 	.word	0x20000924

00021094 <TCC0_Handler>:
		void TCC##n##_Handler(void) \
		{ \
			_tcc_interrupt_handler(n); \
		}

MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
   21094:	b580      	push	{r7, lr}
   21096:	af00      	add	r7, sp, #0
   21098:	2000      	movs	r0, #0
   2109a:	4b02      	ldr	r3, [pc, #8]	; (210a4 <TCC0_Handler+0x10>)
   2109c:	4798      	blx	r3
   2109e:	46c0      	nop			; (mov r8, r8)
   210a0:	46bd      	mov	sp, r7
   210a2:	bd80      	pop	{r7, pc}
   210a4:	000210d1 	.word	0x000210d1

000210a8 <TCC1_Handler>:
   210a8:	b580      	push	{r7, lr}
   210aa:	af00      	add	r7, sp, #0
   210ac:	2001      	movs	r0, #1
   210ae:	4b02      	ldr	r3, [pc, #8]	; (210b8 <TCC1_Handler+0x10>)
   210b0:	4798      	blx	r3
   210b2:	46c0      	nop			; (mov r8, r8)
   210b4:	46bd      	mov	sp, r7
   210b6:	bd80      	pop	{r7, pc}
   210b8:	000210d1 	.word	0x000210d1

000210bc <TCC2_Handler>:
   210bc:	b580      	push	{r7, lr}
   210be:	af00      	add	r7, sp, #0
   210c0:	2002      	movs	r0, #2
   210c2:	4b02      	ldr	r3, [pc, #8]	; (210cc <TCC2_Handler+0x10>)
   210c4:	4798      	blx	r3
   210c6:	46c0      	nop			; (mov r8, r8)
   210c8:	46bd      	mov	sp, r7
   210ca:	bd80      	pop	{r7, pc}
   210cc:	000210d1 	.word	0x000210d1

000210d0 <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
   210d0:	b580      	push	{r7, lr}
   210d2:	b086      	sub	sp, #24
   210d4:	af00      	add	r7, sp, #0
   210d6:	0002      	movs	r2, r0
   210d8:	1dfb      	adds	r3, r7, #7
   210da:	701a      	strb	r2, [r3, #0]
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
			(struct tcc_module *)_tcc_instances[module_index];
   210dc:	1dfb      	adds	r3, r7, #7
   210de:	781a      	ldrb	r2, [r3, #0]
	struct tcc_module *module =
   210e0:	4b18      	ldr	r3, [pc, #96]	; (21144 <_tcc_interrupt_handler+0x74>)
   210e2:	0092      	lsls	r2, r2, #2
   210e4:	58d3      	ldr	r3, [r2, r3]
   210e6:	613b      	str	r3, [r7, #16]

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
   210e8:	693b      	ldr	r3, [r7, #16]
   210ea:	681b      	ldr	r3, [r3, #0]
   210ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
			module->register_callback_mask &
   210ee:	693b      	ldr	r3, [r7, #16]
   210f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
   210f2:	401a      	ands	r2, r3
			module->enable_callback_mask);
   210f4:	693b      	ldr	r3, [r7, #16]
   210f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
   210f8:	4013      	ands	r3, r2
   210fa:	60fb      	str	r3, [r7, #12]

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
   210fc:	2300      	movs	r3, #0
   210fe:	617b      	str	r3, [r7, #20]
   21100:	e019      	b.n	21136 <_tcc_interrupt_handler+0x66>
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
   21102:	4b11      	ldr	r3, [pc, #68]	; (21148 <_tcc_interrupt_handler+0x78>)
   21104:	697a      	ldr	r2, [r7, #20]
   21106:	0092      	lsls	r2, r2, #2
   21108:	58d3      	ldr	r3, [r2, r3]
   2110a:	68fa      	ldr	r2, [r7, #12]
   2110c:	4013      	ands	r3, r2
   2110e:	d00f      	beq.n	21130 <_tcc_interrupt_handler+0x60>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
   21110:	693a      	ldr	r2, [r7, #16]
   21112:	697b      	ldr	r3, [r7, #20]
   21114:	009b      	lsls	r3, r3, #2
   21116:	18d3      	adds	r3, r2, r3
   21118:	3304      	adds	r3, #4
   2111a:	681b      	ldr	r3, [r3, #0]
   2111c:	693a      	ldr	r2, [r7, #16]
   2111e:	0010      	movs	r0, r2
   21120:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
   21122:	693b      	ldr	r3, [r7, #16]
   21124:	681b      	ldr	r3, [r3, #0]
   21126:	4a08      	ldr	r2, [pc, #32]	; (21148 <_tcc_interrupt_handler+0x78>)
   21128:	6979      	ldr	r1, [r7, #20]
   2112a:	0089      	lsls	r1, r1, #2
   2112c:	588a      	ldr	r2, [r1, r2]
   2112e:	62da      	str	r2, [r3, #44]	; 0x2c
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
   21130:	697b      	ldr	r3, [r7, #20]
   21132:	3301      	adds	r3, #1
   21134:	617b      	str	r3, [r7, #20]
   21136:	697b      	ldr	r3, [r7, #20]
   21138:	2b0b      	cmp	r3, #11
   2113a:	dde2      	ble.n	21102 <_tcc_interrupt_handler+0x32>
		}
	}
}
   2113c:	46c0      	nop			; (mov r8, r8)
   2113e:	46bd      	mov	sp, r7
   21140:	b006      	add	sp, #24
   21142:	bd80      	pop	{r7, pc}
   21144:	20000928 	.word	0x20000928
   21148:	0002a634 	.word	0x0002a634

0002114c <TC3_Handler>:
#if (SAML21E) || (SAML21G) || (SAMR30E) || (SAMR30G)
	_TC_INTERRUPT_HANDLER(0,0)
	_TC_INTERRUPT_HANDLER(1,1)
	_TC_INTERRUPT_HANDLER(4,2)
#else
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
   2114c:	b580      	push	{r7, lr}
   2114e:	af00      	add	r7, sp, #0
   21150:	2000      	movs	r0, #0
   21152:	4b02      	ldr	r3, [pc, #8]	; (2115c <TC3_Handler+0x10>)
   21154:	4798      	blx	r3
   21156:	46c0      	nop			; (mov r8, r8)
   21158:	46bd      	mov	sp, r7
   2115a:	bd80      	pop	{r7, pc}
   2115c:	000211b1 	.word	0x000211b1

00021160 <TC4_Handler>:
   21160:	b580      	push	{r7, lr}
   21162:	af00      	add	r7, sp, #0
   21164:	2001      	movs	r0, #1
   21166:	4b02      	ldr	r3, [pc, #8]	; (21170 <TC4_Handler+0x10>)
   21168:	4798      	blx	r3
   2116a:	46c0      	nop			; (mov r8, r8)
   2116c:	46bd      	mov	sp, r7
   2116e:	bd80      	pop	{r7, pc}
   21170:	000211b1 	.word	0x000211b1

00021174 <TC5_Handler>:
   21174:	b580      	push	{r7, lr}
   21176:	af00      	add	r7, sp, #0
   21178:	2002      	movs	r0, #2
   2117a:	4b02      	ldr	r3, [pc, #8]	; (21184 <TC5_Handler+0x10>)
   2117c:	4798      	blx	r3
   2117e:	46c0      	nop			; (mov r8, r8)
   21180:	46bd      	mov	sp, r7
   21182:	bd80      	pop	{r7, pc}
   21184:	000211b1 	.word	0x000211b1

00021188 <TC6_Handler>:
   21188:	b580      	push	{r7, lr}
   2118a:	af00      	add	r7, sp, #0
   2118c:	2003      	movs	r0, #3
   2118e:	4b02      	ldr	r3, [pc, #8]	; (21198 <TC6_Handler+0x10>)
   21190:	4798      	blx	r3
   21192:	46c0      	nop			; (mov r8, r8)
   21194:	46bd      	mov	sp, r7
   21196:	bd80      	pop	{r7, pc}
   21198:	000211b1 	.word	0x000211b1

0002119c <TC7_Handler>:
   2119c:	b580      	push	{r7, lr}
   2119e:	af00      	add	r7, sp, #0
   211a0:	2004      	movs	r0, #4
   211a2:	4b02      	ldr	r3, [pc, #8]	; (211ac <TC7_Handler+0x10>)
   211a4:	4798      	blx	r3
   211a6:	46c0      	nop			; (mov r8, r8)
   211a8:	46bd      	mov	sp, r7
   211aa:	bd80      	pop	{r7, pc}
   211ac:	000211b1 	.word	0x000211b1

000211b0 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
   211b0:	b580      	push	{r7, lr}
   211b2:	b084      	sub	sp, #16
   211b4:	af00      	add	r7, sp, #0
   211b6:	0002      	movs	r2, r0
   211b8:	1dfb      	adds	r3, r7, #7
   211ba:	701a      	strb	r2, [r3, #0]
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
			= (struct tc_module *)_tc_instances[instance];
   211bc:	1dfb      	adds	r3, r7, #7
   211be:	781a      	ldrb	r2, [r3, #0]
	struct tc_module *module
   211c0:	4b28      	ldr	r3, [pc, #160]	; (21264 <_tc_interrupt_handler+0xb4>)
   211c2:	0092      	lsls	r2, r2, #2
   211c4:	58d3      	ldr	r3, [r2, r3]
   211c6:	60fb      	str	r3, [r7, #12]

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
   211c8:	68fb      	ldr	r3, [r7, #12]
   211ca:	681b      	ldr	r3, [r3, #0]
   211cc:	7b9b      	ldrb	r3, [r3, #14]
   211ce:	b2db      	uxtb	r3, r3
			module->register_callback_mask &
   211d0:	68fa      	ldr	r2, [r7, #12]
   211d2:	7e12      	ldrb	r2, [r2, #24]
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
   211d4:	4013      	ands	r3, r2
   211d6:	b2da      	uxtb	r2, r3
			module->enable_callback_mask;
   211d8:	68fb      	ldr	r3, [r7, #12]
   211da:	7e59      	ldrb	r1, [r3, #25]
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
   211dc:	230b      	movs	r3, #11
   211de:	18fb      	adds	r3, r7, r3
   211e0:	400a      	ands	r2, r1
   211e2:	701a      	strb	r2, [r3, #0]

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
   211e4:	230b      	movs	r3, #11
   211e6:	18fb      	adds	r3, r7, r3
   211e8:	781b      	ldrb	r3, [r3, #0]
   211ea:	2201      	movs	r2, #1
   211ec:	4013      	ands	r3, r2
   211ee:	d008      	beq.n	21202 <_tc_interrupt_handler+0x52>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
   211f0:	68fb      	ldr	r3, [r7, #12]
   211f2:	689b      	ldr	r3, [r3, #8]
   211f4:	68fa      	ldr	r2, [r7, #12]
   211f6:	0010      	movs	r0, r2
   211f8:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
   211fa:	68fb      	ldr	r3, [r7, #12]
   211fc:	681b      	ldr	r3, [r3, #0]
   211fe:	2201      	movs	r2, #1
   21200:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
   21202:	230b      	movs	r3, #11
   21204:	18fb      	adds	r3, r7, r3
   21206:	781b      	ldrb	r3, [r3, #0]
   21208:	2202      	movs	r2, #2
   2120a:	4013      	ands	r3, r2
   2120c:	d008      	beq.n	21220 <_tc_interrupt_handler+0x70>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_ERROR])(module);
   2120e:	68fb      	ldr	r3, [r7, #12]
   21210:	68db      	ldr	r3, [r3, #12]
   21212:	68fa      	ldr	r2, [r7, #12]
   21214:	0010      	movs	r0, r2
   21216:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
   21218:	68fb      	ldr	r3, [r7, #12]
   2121a:	681b      	ldr	r3, [r3, #0]
   2121c:	2202      	movs	r2, #2
   2121e:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
   21220:	230b      	movs	r3, #11
   21222:	18fb      	adds	r3, r7, r3
   21224:	781b      	ldrb	r3, [r3, #0]
   21226:	2210      	movs	r2, #16
   21228:	4013      	ands	r3, r2
   2122a:	d008      	beq.n	2123e <_tc_interrupt_handler+0x8e>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
   2122c:	68fb      	ldr	r3, [r7, #12]
   2122e:	691b      	ldr	r3, [r3, #16]
   21230:	68fa      	ldr	r2, [r7, #12]
   21232:	0010      	movs	r0, r2
   21234:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
   21236:	68fb      	ldr	r3, [r7, #12]
   21238:	681b      	ldr	r3, [r3, #0]
   2123a:	2210      	movs	r2, #16
   2123c:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
   2123e:	230b      	movs	r3, #11
   21240:	18fb      	adds	r3, r7, r3
   21242:	781b      	ldrb	r3, [r3, #0]
   21244:	2220      	movs	r2, #32
   21246:	4013      	ands	r3, r2
   21248:	d008      	beq.n	2125c <_tc_interrupt_handler+0xac>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
   2124a:	68fb      	ldr	r3, [r7, #12]
   2124c:	695b      	ldr	r3, [r3, #20]
   2124e:	68fa      	ldr	r2, [r7, #12]
   21250:	0010      	movs	r0, r2
   21252:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
   21254:	68fb      	ldr	r3, [r7, #12]
   21256:	681b      	ldr	r3, [r3, #0]
   21258:	2220      	movs	r2, #32
   2125a:	739a      	strb	r2, [r3, #14]
	}
}
   2125c:	46c0      	nop			; (mov r8, r8)
   2125e:	46bd      	mov	sp, r7
   21260:	b004      	add	sp, #16
   21262:	bd80      	pop	{r7, pc}
   21264:	20000934 	.word	0x20000934

00021268 <system_gclk_chan_get_config_defaults>:
{
   21268:	b580      	push	{r7, lr}
   2126a:	b082      	sub	sp, #8
   2126c:	af00      	add	r7, sp, #0
   2126e:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   21270:	687b      	ldr	r3, [r7, #4]
   21272:	2200      	movs	r2, #0
   21274:	701a      	strb	r2, [r3, #0]
}
   21276:	46c0      	nop			; (mov r8, r8)
   21278:	46bd      	mov	sp, r7
   2127a:	b002      	add	sp, #8
   2127c:	bd80      	pop	{r7, pc}
	...

00021280 <system_apb_clock_set_mask>:
{
   21280:	b580      	push	{r7, lr}
   21282:	b082      	sub	sp, #8
   21284:	af00      	add	r7, sp, #0
   21286:	0002      	movs	r2, r0
   21288:	6039      	str	r1, [r7, #0]
   2128a:	1dfb      	adds	r3, r7, #7
   2128c:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   2128e:	1dfb      	adds	r3, r7, #7
   21290:	781b      	ldrb	r3, [r3, #0]
   21292:	2b01      	cmp	r3, #1
   21294:	d00a      	beq.n	212ac <system_apb_clock_set_mask+0x2c>
   21296:	2b02      	cmp	r3, #2
   21298:	d00f      	beq.n	212ba <system_apb_clock_set_mask+0x3a>
   2129a:	2b00      	cmp	r3, #0
   2129c:	d114      	bne.n	212c8 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   2129e:	4b0e      	ldr	r3, [pc, #56]	; (212d8 <system_apb_clock_set_mask+0x58>)
   212a0:	4a0d      	ldr	r2, [pc, #52]	; (212d8 <system_apb_clock_set_mask+0x58>)
   212a2:	6991      	ldr	r1, [r2, #24]
   212a4:	683a      	ldr	r2, [r7, #0]
   212a6:	430a      	orrs	r2, r1
   212a8:	619a      	str	r2, [r3, #24]
			break;
   212aa:	e00f      	b.n	212cc <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   212ac:	4b0a      	ldr	r3, [pc, #40]	; (212d8 <system_apb_clock_set_mask+0x58>)
   212ae:	4a0a      	ldr	r2, [pc, #40]	; (212d8 <system_apb_clock_set_mask+0x58>)
   212b0:	69d1      	ldr	r1, [r2, #28]
   212b2:	683a      	ldr	r2, [r7, #0]
   212b4:	430a      	orrs	r2, r1
   212b6:	61da      	str	r2, [r3, #28]
			break;
   212b8:	e008      	b.n	212cc <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   212ba:	4b07      	ldr	r3, [pc, #28]	; (212d8 <system_apb_clock_set_mask+0x58>)
   212bc:	4a06      	ldr	r2, [pc, #24]	; (212d8 <system_apb_clock_set_mask+0x58>)
   212be:	6a11      	ldr	r1, [r2, #32]
   212c0:	683a      	ldr	r2, [r7, #0]
   212c2:	430a      	orrs	r2, r1
   212c4:	621a      	str	r2, [r3, #32]
			break;
   212c6:	e001      	b.n	212cc <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   212c8:	2317      	movs	r3, #23
   212ca:	e000      	b.n	212ce <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   212cc:	2300      	movs	r3, #0
}
   212ce:	0018      	movs	r0, r3
   212d0:	46bd      	mov	sp, r7
   212d2:	b002      	add	sp, #8
   212d4:	bd80      	pop	{r7, pc}
   212d6:	46c0      	nop			; (mov r8, r8)
   212d8:	40000400 	.word	0x40000400

000212dc <system_pinmux_get_config_defaults>:
{
   212dc:	b580      	push	{r7, lr}
   212de:	b082      	sub	sp, #8
   212e0:	af00      	add	r7, sp, #0
   212e2:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   212e4:	687b      	ldr	r3, [r7, #4]
   212e6:	2280      	movs	r2, #128	; 0x80
   212e8:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   212ea:	687b      	ldr	r3, [r7, #4]
   212ec:	2200      	movs	r2, #0
   212ee:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   212f0:	687b      	ldr	r3, [r7, #4]
   212f2:	2201      	movs	r2, #1
   212f4:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   212f6:	687b      	ldr	r3, [r7, #4]
   212f8:	2200      	movs	r2, #0
   212fa:	70da      	strb	r2, [r3, #3]
}
   212fc:	46c0      	nop			; (mov r8, r8)
   212fe:	46bd      	mov	sp, r7
   21300:	b002      	add	sp, #8
   21302:	bd80      	pop	{r7, pc}

00021304 <system_is_debugger_present>:
 * \retval true  Debugger is connected to the system
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
   21304:	b580      	push	{r7, lr}
   21306:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
   21308:	4b05      	ldr	r3, [pc, #20]	; (21320 <system_is_debugger_present+0x1c>)
   2130a:	789b      	ldrb	r3, [r3, #2]
   2130c:	b2db      	uxtb	r3, r3
   2130e:	001a      	movs	r2, r3
   21310:	2302      	movs	r3, #2
   21312:	4013      	ands	r3, r2
   21314:	1e5a      	subs	r2, r3, #1
   21316:	4193      	sbcs	r3, r2
   21318:	b2db      	uxtb	r3, r3
}
   2131a:	0018      	movs	r0, r3
   2131c:	46bd      	mov	sp, r7
   2131e:	bd80      	pop	{r7, pc}
   21320:	41002000 	.word	0x41002000

00021324 <usart_is_syncing>:
{
   21324:	b580      	push	{r7, lr}
   21326:	b084      	sub	sp, #16
   21328:	af00      	add	r7, sp, #0
   2132a:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
   2132c:	687b      	ldr	r3, [r7, #4]
   2132e:	681b      	ldr	r3, [r3, #0]
   21330:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
   21332:	68fb      	ldr	r3, [r7, #12]
   21334:	69db      	ldr	r3, [r3, #28]
   21336:	1e5a      	subs	r2, r3, #1
   21338:	4193      	sbcs	r3, r2
   2133a:	b2db      	uxtb	r3, r3
}
   2133c:	0018      	movs	r0, r3
   2133e:	46bd      	mov	sp, r7
   21340:	b004      	add	sp, #16
   21342:	bd80      	pop	{r7, pc}

00021344 <_usart_wait_for_sync>:
{
   21344:	b580      	push	{r7, lr}
   21346:	b082      	sub	sp, #8
   21348:	af00      	add	r7, sp, #0
   2134a:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
   2134c:	46c0      	nop			; (mov r8, r8)
   2134e:	687b      	ldr	r3, [r7, #4]
   21350:	0018      	movs	r0, r3
   21352:	4b04      	ldr	r3, [pc, #16]	; (21364 <_usart_wait_for_sync+0x20>)
   21354:	4798      	blx	r3
   21356:	1e03      	subs	r3, r0, #0
   21358:	d1f9      	bne.n	2134e <_usart_wait_for_sync+0xa>
}
   2135a:	46c0      	nop			; (mov r8, r8)
   2135c:	46bd      	mov	sp, r7
   2135e:	b002      	add	sp, #8
   21360:	bd80      	pop	{r7, pc}
   21362:	46c0      	nop			; (mov r8, r8)
   21364:	00021325 	.word	0x00021325

00021368 <_usart_set_config>:
 * Set Configuration of the USART module
 */
static enum status_code _usart_set_config(
		struct usart_module *const module,
		const struct usart_config *const config)
{
   21368:	b5b0      	push	{r4, r5, r7, lr}
   2136a:	b08c      	sub	sp, #48	; 0x30
   2136c:	af02      	add	r7, sp, #8
   2136e:	6078      	str	r0, [r7, #4]
   21370:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   21372:	687b      	ldr	r3, [r7, #4]
   21374:	681b      	ldr	r3, [r3, #0]
   21376:	61bb      	str	r3, [r7, #24]

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   21378:	687b      	ldr	r3, [r7, #4]
   2137a:	681b      	ldr	r3, [r3, #0]
   2137c:	0018      	movs	r0, r3
   2137e:	4bab      	ldr	r3, [pc, #684]	; (2162c <_usart_set_config+0x2c4>)
   21380:	4798      	blx	r3
   21382:	0003      	movs	r3, r0
   21384:	617b      	str	r3, [r7, #20]
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#else
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   21386:	697b      	ldr	r3, [r7, #20]
   21388:	3314      	adds	r3, #20
   2138a:	613b      	str	r3, [r7, #16]
#endif

	/* Cache new register values to minimize the number of register writes */
	uint32_t ctrla = 0;
   2138c:	2300      	movs	r3, #0
   2138e:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t ctrlb = 0;
   21390:	2300      	movs	r3, #0
   21392:	623b      	str	r3, [r7, #32]
#ifdef FEATURE_USART_ISO7816
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
   21394:	230a      	movs	r3, #10
   21396:	18fb      	adds	r3, r7, r3
   21398:	2200      	movs	r2, #0
   2139a:	801a      	strh	r2, [r3, #0]
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   2139c:	231f      	movs	r3, #31
   2139e:	18fb      	adds	r3, r7, r3
   213a0:	2200      	movs	r2, #0
   213a2:	701a      	strb	r2, [r3, #0]
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
   213a4:	231e      	movs	r3, #30
   213a6:	18fb      	adds	r3, r7, r3
   213a8:	2210      	movs	r2, #16
   213aa:	701a      	strb	r2, [r3, #0]

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
   213ac:	683b      	ldr	r3, [r7, #0]
   213ae:	8a1b      	ldrh	r3, [r3, #16]
   213b0:	2280      	movs	r2, #128	; 0x80
   213b2:	01d2      	lsls	r2, r2, #7
   213b4:	4293      	cmp	r3, r2
   213b6:	d01c      	beq.n	213f2 <_usart_set_config+0x8a>
   213b8:	2280      	movs	r2, #128	; 0x80
   213ba:	01d2      	lsls	r2, r2, #7
   213bc:	4293      	cmp	r3, r2
   213be:	dc06      	bgt.n	213ce <_usart_set_config+0x66>
   213c0:	2b00      	cmp	r3, #0
   213c2:	d00d      	beq.n	213e0 <_usart_set_config+0x78>
   213c4:	2280      	movs	r2, #128	; 0x80
   213c6:	0192      	lsls	r2, r2, #6
   213c8:	4293      	cmp	r3, r2
   213ca:	d024      	beq.n	21416 <_usart_set_config+0xae>
   213cc:	e035      	b.n	2143a <_usart_set_config+0xd2>
   213ce:	22c0      	movs	r2, #192	; 0xc0
   213d0:	01d2      	lsls	r2, r2, #7
   213d2:	4293      	cmp	r3, r2
   213d4:	d028      	beq.n	21428 <_usart_set_config+0xc0>
   213d6:	2280      	movs	r2, #128	; 0x80
   213d8:	0212      	lsls	r2, r2, #8
   213da:	4293      	cmp	r3, r2
   213dc:	d012      	beq.n	21404 <_usart_set_config+0x9c>
   213de:	e02c      	b.n	2143a <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   213e0:	231f      	movs	r3, #31
   213e2:	18fb      	adds	r3, r7, r3
   213e4:	2200      	movs	r2, #0
   213e6:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
   213e8:	231e      	movs	r3, #30
   213ea:	18fb      	adds	r3, r7, r3
   213ec:	2210      	movs	r2, #16
   213ee:	701a      	strb	r2, [r3, #0]
			break;
   213f0:	e023      	b.n	2143a <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   213f2:	231f      	movs	r3, #31
   213f4:	18fb      	adds	r3, r7, r3
   213f6:	2200      	movs	r2, #0
   213f8:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
   213fa:	231e      	movs	r3, #30
   213fc:	18fb      	adds	r3, r7, r3
   213fe:	2208      	movs	r2, #8
   21400:	701a      	strb	r2, [r3, #0]
			break;
   21402:	e01a      	b.n	2143a <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   21404:	231f      	movs	r3, #31
   21406:	18fb      	adds	r3, r7, r3
   21408:	2200      	movs	r2, #0
   2140a:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
   2140c:	231e      	movs	r3, #30
   2140e:	18fb      	adds	r3, r7, r3
   21410:	2203      	movs	r2, #3
   21412:	701a      	strb	r2, [r3, #0]
			break;
   21414:	e011      	b.n	2143a <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
   21416:	231f      	movs	r3, #31
   21418:	18fb      	adds	r3, r7, r3
   2141a:	2201      	movs	r2, #1
   2141c:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
   2141e:	231e      	movs	r3, #30
   21420:	18fb      	adds	r3, r7, r3
   21422:	2210      	movs	r2, #16
   21424:	701a      	strb	r2, [r3, #0]
			break;
   21426:	e008      	b.n	2143a <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
   21428:	231f      	movs	r3, #31
   2142a:	18fb      	adds	r3, r7, r3
   2142c:	2201      	movs	r2, #1
   2142e:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
   21430:	231e      	movs	r3, #30
   21432:	18fb      	adds	r3, r7, r3
   21434:	2208      	movs	r2, #8
   21436:	701a      	strb	r2, [r3, #0]
			break;
   21438:	46c0      	nop			; (mov r8, r8)
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
   2143a:	683b      	ldr	r3, [r7, #0]
   2143c:	681a      	ldr	r2, [r3, #0]
		(uint32_t)config->mux_setting |
   2143e:	683b      	ldr	r3, [r7, #0]
   21440:	68db      	ldr	r3, [r3, #12]
	ctrla = (uint32_t)config->data_order |
   21442:	431a      	orrs	r2, r3
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
   21444:	683b      	ldr	r3, [r7, #0]
   21446:	695b      	ldr	r3, [r3, #20]
		(uint32_t)config->mux_setting |
   21448:	4313      	orrs	r3, r2
		config->sample_rate |
   2144a:	683a      	ldr	r2, [r7, #0]
   2144c:	8a12      	ldrh	r2, [r2, #16]
		config->sample_adjustment |
   2144e:	4313      	orrs	r3, r2
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
   21450:	683a      	ldr	r2, [r7, #0]
   21452:	7e12      	ldrb	r2, [r2, #24]
   21454:	0212      	lsls	r2, r2, #8
		config->sample_rate |
   21456:	4313      	orrs	r3, r2
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
   21458:	683a      	ldr	r2, [r7, #0]
   2145a:	2126      	movs	r1, #38	; 0x26
   2145c:	5c52      	ldrb	r2, [r2, r1]
   2145e:	0752      	lsls	r2, r2, #29
	ctrla = (uint32_t)config->data_order |
   21460:	4313      	orrs	r3, r2
   21462:	627b      	str	r3, [r7, #36]	; 0x24

	enum status_code status_code = STATUS_OK;
   21464:	231d      	movs	r3, #29
   21466:	18fb      	adds	r3, r7, r3
   21468:	2200      	movs	r2, #0
   2146a:	701a      	strb	r2, [r3, #0]

	transfer_mode = (uint32_t)config->transfer_mode;
   2146c:	683b      	ldr	r3, [r7, #0]
   2146e:	685b      	ldr	r3, [r3, #4]
   21470:	60fb      	str	r3, [r7, #12]
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
   21472:	68fb      	ldr	r3, [r7, #12]
   21474:	2b00      	cmp	r3, #0
   21476:	d01e      	beq.n	214b6 <_usart_set_config+0x14e>
   21478:	2280      	movs	r2, #128	; 0x80
   2147a:	0552      	lsls	r2, r2, #21
   2147c:	4293      	cmp	r3, r2
   2147e:	d14f      	bne.n	21520 <_usart_set_config+0x1b8>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
   21480:	683b      	ldr	r3, [r7, #0]
   21482:	2227      	movs	r2, #39	; 0x27
   21484:	5c9b      	ldrb	r3, [r3, r2]
   21486:	2201      	movs	r2, #1
   21488:	4053      	eors	r3, r2
   2148a:	b2db      	uxtb	r3, r3
   2148c:	2b00      	cmp	r3, #0
   2148e:	d046      	beq.n	2151e <_usart_set_config+0x1b6>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
   21490:	683b      	ldr	r3, [r7, #0]
   21492:	6a1d      	ldr	r5, [r3, #32]
   21494:	693b      	ldr	r3, [r7, #16]
   21496:	b2db      	uxtb	r3, r3
   21498:	0018      	movs	r0, r3
   2149a:	4b65      	ldr	r3, [pc, #404]	; (21630 <_usart_set_config+0x2c8>)
   2149c:	4798      	blx	r3
   2149e:	0001      	movs	r1, r0
   214a0:	231d      	movs	r3, #29
   214a2:	18fc      	adds	r4, r7, r3
   214a4:	230a      	movs	r3, #10
   214a6:	18fb      	adds	r3, r7, r3
   214a8:	001a      	movs	r2, r3
   214aa:	0028      	movs	r0, r5
   214ac:	4b61      	ldr	r3, [pc, #388]	; (21634 <_usart_set_config+0x2cc>)
   214ae:	4798      	blx	r3
   214b0:	0003      	movs	r3, r0
   214b2:	7023      	strb	r3, [r4, #0]
						system_gclk_chan_get_hz(gclk_index), &baud);
			}

			break;
   214b4:	e033      	b.n	2151e <_usart_set_config+0x1b6>

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
   214b6:	683b      	ldr	r3, [r7, #0]
   214b8:	2227      	movs	r2, #39	; 0x27
   214ba:	5c9b      	ldrb	r3, [r3, r2]
   214bc:	2b00      	cmp	r3, #0
   214be:	d014      	beq.n	214ea <_usart_set_config+0x182>
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
   214c0:	683b      	ldr	r3, [r7, #0]
   214c2:	6a18      	ldr	r0, [r3, #32]
   214c4:	683b      	ldr	r3, [r7, #0]
   214c6:	6a99      	ldr	r1, [r3, #40]	; 0x28
				status_code =
   214c8:	231d      	movs	r3, #29
   214ca:	18fc      	adds	r4, r7, r3
   214cc:	231f      	movs	r3, #31
   214ce:	18fb      	adds	r3, r7, r3
   214d0:	781d      	ldrb	r5, [r3, #0]
   214d2:	230a      	movs	r3, #10
   214d4:	18fa      	adds	r2, r7, r3
   214d6:	231e      	movs	r3, #30
   214d8:	18fb      	adds	r3, r7, r3
   214da:	781b      	ldrb	r3, [r3, #0]
   214dc:	9300      	str	r3, [sp, #0]
   214de:	002b      	movs	r3, r5
   214e0:	4d55      	ldr	r5, [pc, #340]	; (21638 <_usart_set_config+0x2d0>)
   214e2:	47a8      	blx	r5
   214e4:	0003      	movs	r3, r0
   214e6:	7023      	strb	r3, [r4, #0]
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							system_gclk_chan_get_hz(gclk_index), &baud, mode, sample_num);
			}

			break;
   214e8:	e01a      	b.n	21520 <_usart_set_config+0x1b8>
						_sercom_get_async_baud_val(config->baudrate,
   214ea:	683b      	ldr	r3, [r7, #0]
   214ec:	6a1d      	ldr	r5, [r3, #32]
   214ee:	693b      	ldr	r3, [r7, #16]
   214f0:	b2db      	uxtb	r3, r3
   214f2:	0018      	movs	r0, r3
   214f4:	4b4e      	ldr	r3, [pc, #312]	; (21630 <_usart_set_config+0x2c8>)
   214f6:	4798      	blx	r3
				status_code =
   214f8:	231d      	movs	r3, #29
   214fa:	18fc      	adds	r4, r7, r3
   214fc:	231f      	movs	r3, #31
   214fe:	18fb      	adds	r3, r7, r3
   21500:	7819      	ldrb	r1, [r3, #0]
   21502:	230a      	movs	r3, #10
   21504:	18fa      	adds	r2, r7, r3
   21506:	231e      	movs	r3, #30
   21508:	18fb      	adds	r3, r7, r3
   2150a:	781b      	ldrb	r3, [r3, #0]
   2150c:	9300      	str	r3, [sp, #0]
   2150e:	000b      	movs	r3, r1
   21510:	0001      	movs	r1, r0
   21512:	0028      	movs	r0, r5
   21514:	4d48      	ldr	r5, [pc, #288]	; (21638 <_usart_set_config+0x2d0>)
   21516:	47a8      	blx	r5
   21518:	0003      	movs	r3, r0
   2151a:	7023      	strb	r3, [r4, #0]
			break;
   2151c:	e000      	b.n	21520 <_usart_set_config+0x1b8>
			break;
   2151e:	46c0      	nop			; (mov r8, r8)
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
   21520:	231d      	movs	r3, #29
   21522:	18fb      	adds	r3, r7, r3
   21524:	781b      	ldrb	r3, [r3, #0]
   21526:	2b00      	cmp	r3, #0
   21528:	d003      	beq.n	21532 <_usart_set_config+0x1ca>
		/* Abort */
		return status_code;
   2152a:	231d      	movs	r3, #29
   2152c:	18fb      	adds	r3, r7, r3
   2152e:	781b      	ldrb	r3, [r3, #0]
   21530:	e077      	b.n	21622 <_usart_set_config+0x2ba>
#ifdef FEATURE_USART_ISO7816
	}
#endif

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
   21532:	683b      	ldr	r3, [r7, #0]
   21534:	7e5b      	ldrb	r3, [r3, #25]
   21536:	2b00      	cmp	r3, #0
   21538:	d003      	beq.n	21542 <_usart_set_config+0x1da>
		usart_hw->RXPL.reg = config->receive_pulse_length;
   2153a:	683b      	ldr	r3, [r7, #0]
   2153c:	7e9a      	ldrb	r2, [r3, #26]
   2153e:	69bb      	ldr	r3, [r7, #24]
   21540:	739a      	strb	r2, [r3, #14]
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   21542:	687b      	ldr	r3, [r7, #4]
   21544:	0018      	movs	r0, r3
   21546:	4b3d      	ldr	r3, [pc, #244]	; (2163c <_usart_set_config+0x2d4>)
   21548:	4798      	blx	r3

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
   2154a:	230a      	movs	r3, #10
   2154c:	18fb      	adds	r3, r7, r3
   2154e:	881a      	ldrh	r2, [r3, #0]
   21550:	69bb      	ldr	r3, [r7, #24]
   21552:	819a      	strh	r2, [r3, #12]

	/* Set sample mode */
	ctrla |= transfer_mode;
   21554:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   21556:	68fb      	ldr	r3, [r7, #12]
   21558:	4313      	orrs	r3, r2
   2155a:	627b      	str	r3, [r7, #36]	; 0x24

	if (config->use_external_clock == false) {
   2155c:	683b      	ldr	r3, [r7, #0]
   2155e:	2227      	movs	r2, #39	; 0x27
   21560:	5c9b      	ldrb	r3, [r3, r2]
   21562:	2201      	movs	r2, #1
   21564:	4053      	eors	r3, r2
   21566:	b2db      	uxtb	r3, r3
   21568:	2b00      	cmp	r3, #0
   2156a:	d003      	beq.n	21574 <_usart_set_config+0x20c>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
   2156c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2156e:	2204      	movs	r2, #4
   21570:	4313      	orrs	r3, r2
   21572:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
   21574:	683b      	ldr	r3, [r7, #0]
   21576:	7e5b      	ldrb	r3, [r3, #25]
   21578:	029a      	lsls	r2, r3, #10
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
   2157a:	683b      	ldr	r3, [r7, #0]
   2157c:	7f1b      	ldrb	r3, [r3, #28]
   2157e:	025b      	lsls	r3, r3, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
   21580:	431a      	orrs	r2, r3
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
   21582:	683b      	ldr	r3, [r7, #0]
   21584:	7f5b      	ldrb	r3, [r3, #29]
   21586:	021b      	lsls	r3, r3, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
   21588:	431a      	orrs	r2, r3
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
   2158a:	683b      	ldr	r3, [r7, #0]
   2158c:	2124      	movs	r1, #36	; 0x24
   2158e:	5c5b      	ldrb	r3, [r3, r1]
   21590:	045b      	lsls	r3, r3, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
   21592:	431a      	orrs	r2, r3
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
   21594:	683b      	ldr	r3, [r7, #0]
   21596:	2125      	movs	r1, #37	; 0x25
   21598:	5c5b      	ldrb	r3, [r3, r1]
   2159a:	041b      	lsls	r3, r3, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
   2159c:	4313      	orrs	r3, r2
	ctrlb =  
   2159e:	623b      	str	r3, [r7, #32]
				ctrlb |= USART_STOPBITS_1;
				break;		
		}
	} else {
#endif
	ctrlb |= (uint32_t)config->stopbits;
   215a0:	683b      	ldr	r3, [r7, #0]
   215a2:	7a9b      	ldrb	r3, [r3, #10]
   215a4:	001a      	movs	r2, r3
   215a6:	6a3b      	ldr	r3, [r7, #32]
   215a8:	4313      	orrs	r3, r2
   215aa:	623b      	str	r3, [r7, #32]
	ctrlb |= (uint32_t)config->character_size;
   215ac:	683b      	ldr	r3, [r7, #0]
   215ae:	7adb      	ldrb	r3, [r3, #11]
   215b0:	001a      	movs	r2, r3
   215b2:	6a3b      	ldr	r3, [r7, #32]
   215b4:	4313      	orrs	r3, r2
   215b6:	623b      	str	r3, [r7, #32]
	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
   215b8:	683b      	ldr	r3, [r7, #0]
   215ba:	891b      	ldrh	r3, [r3, #8]
   215bc:	2bff      	cmp	r3, #255	; 0xff
   215be:	d00b      	beq.n	215d8 <_usart_set_config+0x270>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
   215c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   215c2:	2280      	movs	r2, #128	; 0x80
   215c4:	0452      	lsls	r2, r2, #17
   215c6:	4313      	orrs	r3, r2
   215c8:	627b      	str	r3, [r7, #36]	; 0x24
		ctrlb |= config->parity;
   215ca:	683b      	ldr	r3, [r7, #0]
   215cc:	891b      	ldrh	r3, [r3, #8]
   215ce:	001a      	movs	r2, r3
   215d0:	6a3b      	ldr	r3, [r7, #32]
   215d2:	4313      	orrs	r3, r2
   215d4:	623b      	str	r3, [r7, #32]
   215d6:	e008      	b.n	215ea <_usart_set_config+0x282>
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
   215d8:	683b      	ldr	r3, [r7, #0]
   215da:	7edb      	ldrb	r3, [r3, #27]
   215dc:	2b00      	cmp	r3, #0
   215de:	d004      	beq.n	215ea <_usart_set_config+0x282>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
   215e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   215e2:	2280      	movs	r2, #128	; 0x80
   215e4:	04d2      	lsls	r2, r2, #19
   215e6:	4313      	orrs	r3, r2
   215e8:	627b      	str	r3, [r7, #36]	; 0x24
		ctrla |= config->lin_node;
	}
#endif

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
   215ea:	683b      	ldr	r3, [r7, #0]
   215ec:	222c      	movs	r2, #44	; 0x2c
   215ee:	5c9b      	ldrb	r3, [r3, r2]
   215f0:	2b00      	cmp	r3, #0
   215f2:	d103      	bne.n	215fc <_usart_set_config+0x294>
   215f4:	4b12      	ldr	r3, [pc, #72]	; (21640 <_usart_set_config+0x2d8>)
   215f6:	4798      	blx	r3
   215f8:	1e03      	subs	r3, r0, #0
   215fa:	d003      	beq.n	21604 <_usart_set_config+0x29c>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
   215fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   215fe:	2280      	movs	r2, #128	; 0x80
   21600:	4313      	orrs	r3, r2
   21602:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   21604:	687b      	ldr	r3, [r7, #4]
   21606:	0018      	movs	r0, r3
   21608:	4b0c      	ldr	r3, [pc, #48]	; (2163c <_usart_set_config+0x2d4>)
   2160a:	4798      	blx	r3

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
   2160c:	69bb      	ldr	r3, [r7, #24]
   2160e:	6a3a      	ldr	r2, [r7, #32]
   21610:	605a      	str	r2, [r3, #4]

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   21612:	687b      	ldr	r3, [r7, #4]
   21614:	0018      	movs	r0, r3
   21616:	4b09      	ldr	r3, [pc, #36]	; (2163c <_usart_set_config+0x2d4>)
   21618:	4798      	blx	r3

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
   2161a:	69bb      	ldr	r3, [r7, #24]
   2161c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2161e:	601a      	str	r2, [r3, #0]
		_usart_wait_for_sync(module);
		usart_hw->CTRLC.reg = ctrlc;
	}
#endif

	return STATUS_OK;
   21620:	2300      	movs	r3, #0
}
   21622:	0018      	movs	r0, r3
   21624:	46bd      	mov	sp, r7
   21626:	b00a      	add	sp, #40	; 0x28
   21628:	bdb0      	pop	{r4, r5, r7, pc}
   2162a:	46c0      	nop			; (mov r8, r8)
   2162c:	0001e70d 	.word	0x0001e70d
   21630:	000246c9 	.word	0x000246c9
   21634:	0001e287 	.word	0x0001e287
   21638:	0001e305 	.word	0x0001e305
   2163c:	00021345 	.word	0x00021345
   21640:	00021305 	.word	0x00021305

00021644 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
   21644:	b590      	push	{r4, r7, lr}
   21646:	b093      	sub	sp, #76	; 0x4c
   21648:	af00      	add	r7, sp, #0
   2164a:	60f8      	str	r0, [r7, #12]
   2164c:	60b9      	str	r1, [r7, #8]
   2164e:	607a      	str	r2, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(hw);
	Assert(config);

	enum status_code status_code = STATUS_OK;
   21650:	233b      	movs	r3, #59	; 0x3b
   21652:	18fb      	adds	r3, r7, r3
   21654:	2200      	movs	r2, #0
   21656:	701a      	strb	r2, [r3, #0]

	/* Assign module pointer to software instance struct */
	module->hw = hw;
   21658:	68fb      	ldr	r3, [r7, #12]
   2165a:	68ba      	ldr	r2, [r7, #8]
   2165c:	601a      	str	r2, [r3, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   2165e:	68fb      	ldr	r3, [r7, #12]
   21660:	681b      	ldr	r3, [r3, #0]
   21662:	637b      	str	r3, [r7, #52]	; 0x34

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   21664:	68fb      	ldr	r3, [r7, #12]
   21666:	681b      	ldr	r3, [r3, #0]
   21668:	0018      	movs	r0, r3
   2166a:	4b86      	ldr	r3, [pc, #536]	; (21884 <usart_init+0x240>)
   2166c:	4798      	blx	r3
   2166e:	0003      	movs	r3, r0
   21670:	633b      	str	r3, [r7, #48]	; 0x30
		gclk_index	= SERCOM5_GCLK_ID_CORE;
    } else {
    	gclk_index	= sercom_index + SERCOM0_GCLK_ID_CORE;
    }
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
   21672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   21674:	3302      	adds	r3, #2
   21676:	62fb      	str	r3, [r7, #44]	; 0x2c
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   21678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2167a:	3314      	adds	r3, #20
   2167c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
   2167e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   21680:	681b      	ldr	r3, [r3, #0]
   21682:	2201      	movs	r2, #1
   21684:	4013      	ands	r3, r2
   21686:	d001      	beq.n	2168c <usart_init+0x48>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
   21688:	2305      	movs	r3, #5
   2168a:	e0f6      	b.n	2187a <usart_init+0x236>
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
   2168c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2168e:	681b      	ldr	r3, [r3, #0]
   21690:	2202      	movs	r2, #2
   21692:	4013      	ands	r3, r2
   21694:	d001      	beq.n	2169a <usart_init+0x56>
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
   21696:	231c      	movs	r3, #28
   21698:	e0ef      	b.n	2187a <usart_init+0x236>
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
   2169a:	2201      	movs	r2, #1
   2169c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2169e:	409a      	lsls	r2, r3
   216a0:	0013      	movs	r3, r2
   216a2:	0019      	movs	r1, r3
   216a4:	2002      	movs	r0, #2
   216a6:	4b78      	ldr	r3, [pc, #480]	; (21888 <usart_init+0x244>)
   216a8:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   216aa:	2324      	movs	r3, #36	; 0x24
   216ac:	18fb      	adds	r3, r7, r3
   216ae:	0018      	movs	r0, r3
   216b0:	4b76      	ldr	r3, [pc, #472]	; (2188c <usart_init+0x248>)
   216b2:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
   216b4:	687b      	ldr	r3, [r7, #4]
   216b6:	222d      	movs	r2, #45	; 0x2d
   216b8:	5c9a      	ldrb	r2, [r3, r2]
   216ba:	2324      	movs	r3, #36	; 0x24
   216bc:	18fb      	adds	r3, r7, r3
   216be:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
   216c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   216c2:	b2db      	uxtb	r3, r3
   216c4:	2224      	movs	r2, #36	; 0x24
   216c6:	18ba      	adds	r2, r7, r2
   216c8:	0011      	movs	r1, r2
   216ca:	0018      	movs	r0, r3
   216cc:	4b70      	ldr	r3, [pc, #448]	; (21890 <usart_init+0x24c>)
   216ce:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
   216d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   216d2:	b2db      	uxtb	r3, r3
   216d4:	0018      	movs	r0, r3
   216d6:	4b6f      	ldr	r3, [pc, #444]	; (21894 <usart_init+0x250>)
   216d8:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
   216da:	687b      	ldr	r3, [r7, #4]
   216dc:	222d      	movs	r2, #45	; 0x2d
   216de:	5c9b      	ldrb	r3, [r3, r2]
   216e0:	2100      	movs	r1, #0
   216e2:	0018      	movs	r0, r3
   216e4:	4b6c      	ldr	r3, [pc, #432]	; (21898 <usart_init+0x254>)
   216e6:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
   216e8:	687b      	ldr	r3, [r7, #4]
   216ea:	7ada      	ldrb	r2, [r3, #11]
   216ec:	68fb      	ldr	r3, [r7, #12]
   216ee:	715a      	strb	r2, [r3, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
   216f0:	687b      	ldr	r3, [r7, #4]
   216f2:	2224      	movs	r2, #36	; 0x24
   216f4:	5c9a      	ldrb	r2, [r3, r2]
   216f6:	68fb      	ldr	r3, [r7, #12]
   216f8:	719a      	strb	r2, [r3, #6]
	module->transmitter_enabled = config->transmitter_enable;
   216fa:	687b      	ldr	r3, [r7, #4]
   216fc:	2225      	movs	r2, #37	; 0x25
   216fe:	5c9a      	ldrb	r2, [r3, r2]
   21700:	68fb      	ldr	r3, [r7, #12]
   21702:	71da      	strb	r2, [r3, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
   21704:	687b      	ldr	r3, [r7, #4]
   21706:	7eda      	ldrb	r2, [r3, #27]
   21708:	68fb      	ldr	r3, [r7, #12]
   2170a:	721a      	strb	r2, [r3, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
   2170c:	687b      	ldr	r3, [r7, #4]
   2170e:	7f1a      	ldrb	r2, [r3, #28]
   21710:	68fb      	ldr	r3, [r7, #12]
   21712:	725a      	strb	r2, [r3, #9]
#endif
#ifdef FEATURE_USART_ISO7816
	module->iso7816_mode_enabled = config->iso7816_config.enabled;
#endif
	/* Set configuration according to the config struct */
	status_code = _usart_set_config(module, config);
   21714:	233b      	movs	r3, #59	; 0x3b
   21716:	18fc      	adds	r4, r7, r3
   21718:	687a      	ldr	r2, [r7, #4]
   2171a:	68fb      	ldr	r3, [r7, #12]
   2171c:	0011      	movs	r1, r2
   2171e:	0018      	movs	r0, r3
   21720:	4b5e      	ldr	r3, [pc, #376]	; (2189c <usart_init+0x258>)
   21722:	4798      	blx	r3
   21724:	0003      	movs	r3, r0
   21726:	7023      	strb	r3, [r4, #0]
	if(status_code != STATUS_OK) {
   21728:	233b      	movs	r3, #59	; 0x3b
   2172a:	18fb      	adds	r3, r7, r3
   2172c:	781b      	ldrb	r3, [r3, #0]
   2172e:	2b00      	cmp	r3, #0
   21730:	d003      	beq.n	2173a <usart_init+0xf6>
		return status_code;
   21732:	233b      	movs	r3, #59	; 0x3b
   21734:	18fb      	adds	r3, r7, r3
   21736:	781b      	ldrb	r3, [r3, #0]
   21738:	e09f      	b.n	2187a <usart_init+0x236>
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
   2173a:	2320      	movs	r3, #32
   2173c:	18fb      	adds	r3, r7, r3
   2173e:	0018      	movs	r0, r3
   21740:	4b57      	ldr	r3, [pc, #348]	; (218a0 <usart_init+0x25c>)
   21742:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
   21744:	2320      	movs	r3, #32
   21746:	18fb      	adds	r3, r7, r3
   21748:	2200      	movs	r2, #0
   2174a:	705a      	strb	r2, [r3, #1]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
   2174c:	2320      	movs	r3, #32
   2174e:	18fb      	adds	r3, r7, r3
   21750:	2200      	movs	r2, #0
   21752:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
   21754:	687b      	ldr	r3, [r7, #4]
   21756:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
   21758:	2310      	movs	r3, #16
   2175a:	18fb      	adds	r3, r7, r3
   2175c:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
   2175e:	687b      	ldr	r3, [r7, #4]
   21760:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	uint32_t pad_pinmuxes[] = {
   21762:	2310      	movs	r3, #16
   21764:	18fb      	adds	r3, r7, r3
   21766:	605a      	str	r2, [r3, #4]
			config->pinmux_pad2, config->pinmux_pad3
   21768:	687b      	ldr	r3, [r7, #4]
   2176a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
	uint32_t pad_pinmuxes[] = {
   2176c:	2310      	movs	r3, #16
   2176e:	18fb      	adds	r3, r7, r3
   21770:	609a      	str	r2, [r3, #8]
			config->pinmux_pad2, config->pinmux_pad3
   21772:	687b      	ldr	r3, [r7, #4]
   21774:	6bda      	ldr	r2, [r3, #60]	; 0x3c
	uint32_t pad_pinmuxes[] = {
   21776:	2310      	movs	r3, #16
   21778:	18fb      	adds	r3, r7, r3
   2177a:	60da      	str	r2, [r3, #12]
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
   2177c:	2347      	movs	r3, #71	; 0x47
   2177e:	18fb      	adds	r3, r7, r3
   21780:	2200      	movs	r2, #0
   21782:	701a      	strb	r2, [r3, #0]
   21784:	e02c      	b.n	217e0 <usart_init+0x19c>
		uint32_t current_pinmux = pad_pinmuxes[pad];
   21786:	2347      	movs	r3, #71	; 0x47
   21788:	18fb      	adds	r3, r7, r3
   2178a:	781a      	ldrb	r2, [r3, #0]
   2178c:	2310      	movs	r3, #16
   2178e:	18fb      	adds	r3, r7, r3
   21790:	0092      	lsls	r2, r2, #2
   21792:	58d3      	ldr	r3, [r2, r3]
   21794:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
   21796:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   21798:	2b00      	cmp	r3, #0
   2179a:	d109      	bne.n	217b0 <usart_init+0x16c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
   2179c:	2347      	movs	r3, #71	; 0x47
   2179e:	18fb      	adds	r3, r7, r3
   217a0:	781a      	ldrb	r2, [r3, #0]
   217a2:	68bb      	ldr	r3, [r7, #8]
   217a4:	0011      	movs	r1, r2
   217a6:	0018      	movs	r0, r3
   217a8:	4b3e      	ldr	r3, [pc, #248]	; (218a4 <usart_init+0x260>)
   217aa:	4798      	blx	r3
   217ac:	0003      	movs	r3, r0
   217ae:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
   217b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   217b2:	3301      	adds	r3, #1
   217b4:	d00d      	beq.n	217d2 <usart_init+0x18e>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
   217b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   217b8:	b2da      	uxtb	r2, r3
   217ba:	2320      	movs	r3, #32
   217bc:	18fb      	adds	r3, r7, r3
   217be:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
   217c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   217c2:	0c1b      	lsrs	r3, r3, #16
   217c4:	b2db      	uxtb	r3, r3
   217c6:	2220      	movs	r2, #32
   217c8:	18ba      	adds	r2, r7, r2
   217ca:	0011      	movs	r1, r2
   217cc:	0018      	movs	r0, r3
   217ce:	4b36      	ldr	r3, [pc, #216]	; (218a8 <usart_init+0x264>)
   217d0:	4798      	blx	r3
	for (uint8_t pad = 0; pad < 4; pad++) {
   217d2:	2347      	movs	r3, #71	; 0x47
   217d4:	18fb      	adds	r3, r7, r3
   217d6:	781a      	ldrb	r2, [r3, #0]
   217d8:	2347      	movs	r3, #71	; 0x47
   217da:	18fb      	adds	r3, r7, r3
   217dc:	3201      	adds	r2, #1
   217de:	701a      	strb	r2, [r3, #0]
   217e0:	2347      	movs	r3, #71	; 0x47
   217e2:	18fb      	adds	r3, r7, r3
   217e4:	781b      	ldrb	r3, [r3, #0]
   217e6:	2b03      	cmp	r3, #3
   217e8:	d9cd      	bls.n	21786 <usart_init+0x142>
		}
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
   217ea:	2300      	movs	r3, #0
   217ec:	63fb      	str	r3, [r7, #60]	; 0x3c
   217ee:	e00a      	b.n	21806 <usart_init+0x1c2>
		module->callback[i]            = NULL;
   217f0:	68fa      	ldr	r2, [r7, #12]
   217f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   217f4:	3302      	adds	r3, #2
   217f6:	009b      	lsls	r3, r3, #2
   217f8:	18d3      	adds	r3, r2, r3
   217fa:	3304      	adds	r3, #4
   217fc:	2200      	movs	r2, #0
   217fe:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
   21800:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   21802:	3301      	adds	r3, #1
   21804:	63fb      	str	r3, [r7, #60]	; 0x3c
   21806:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   21808:	2b05      	cmp	r3, #5
   2180a:	d9f1      	bls.n	217f0 <usart_init+0x1ac>
	}

	module->tx_buffer_ptr              = NULL;
   2180c:	68fb      	ldr	r3, [r7, #12]
   2180e:	2200      	movs	r2, #0
   21810:	629a      	str	r2, [r3, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
   21812:	68fb      	ldr	r3, [r7, #12]
   21814:	2200      	movs	r2, #0
   21816:	625a      	str	r2, [r3, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
   21818:	68fb      	ldr	r3, [r7, #12]
   2181a:	2200      	movs	r2, #0
   2181c:	85da      	strh	r2, [r3, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
   2181e:	68fb      	ldr	r3, [r7, #12]
   21820:	2200      	movs	r2, #0
   21822:	859a      	strh	r2, [r3, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
   21824:	68fb      	ldr	r3, [r7, #12]
   21826:	2230      	movs	r2, #48	; 0x30
   21828:	2100      	movs	r1, #0
   2182a:	5499      	strb	r1, [r3, r2]
	module->callback_enable_mask       = 0x00;
   2182c:	68fb      	ldr	r3, [r7, #12]
   2182e:	2231      	movs	r2, #49	; 0x31
   21830:	2100      	movs	r1, #0
   21832:	5499      	strb	r1, [r3, r2]
	module->rx_status                  = STATUS_OK;
   21834:	68fb      	ldr	r3, [r7, #12]
   21836:	2232      	movs	r2, #50	; 0x32
   21838:	2100      	movs	r1, #0
   2183a:	5499      	strb	r1, [r3, r2]
	module->tx_status                  = STATUS_OK;
   2183c:	68fb      	ldr	r3, [r7, #12]
   2183e:	2233      	movs	r2, #51	; 0x33
   21840:	2100      	movs	r1, #0
   21842:	5499      	strb	r1, [r3, r2]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
   21844:	68fb      	ldr	r3, [r7, #12]
   21846:	681b      	ldr	r3, [r3, #0]
   21848:	2227      	movs	r2, #39	; 0x27
   2184a:	18bc      	adds	r4, r7, r2
   2184c:	0018      	movs	r0, r3
   2184e:	4b0d      	ldr	r3, [pc, #52]	; (21884 <usart_init+0x240>)
   21850:	4798      	blx	r3
   21852:	0003      	movs	r3, r0
   21854:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
   21856:	4a15      	ldr	r2, [pc, #84]	; (218ac <usart_init+0x268>)
   21858:	2327      	movs	r3, #39	; 0x27
   2185a:	18fb      	adds	r3, r7, r3
   2185c:	781b      	ldrb	r3, [r3, #0]
   2185e:	0011      	movs	r1, r2
   21860:	0018      	movs	r0, r3
   21862:	4b13      	ldr	r3, [pc, #76]	; (218b0 <usart_init+0x26c>)
   21864:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
   21866:	2327      	movs	r3, #39	; 0x27
   21868:	18fb      	adds	r3, r7, r3
   2186a:	781a      	ldrb	r2, [r3, #0]
   2186c:	4b11      	ldr	r3, [pc, #68]	; (218b4 <usart_init+0x270>)
   2186e:	0092      	lsls	r2, r2, #2
   21870:	68f9      	ldr	r1, [r7, #12]
   21872:	50d1      	str	r1, [r2, r3]
#endif

	return status_code;
   21874:	233b      	movs	r3, #59	; 0x3b
   21876:	18fb      	adds	r3, r7, r3
   21878:	781b      	ldrb	r3, [r3, #0]
}
   2187a:	0018      	movs	r0, r3
   2187c:	46bd      	mov	sp, r7
   2187e:	b013      	add	sp, #76	; 0x4c
   21880:	bd90      	pop	{r4, r7, pc}
   21882:	46c0      	nop			; (mov r8, r8)
   21884:	0001e70d 	.word	0x0001e70d
   21888:	00021281 	.word	0x00021281
   2188c:	00021269 	.word	0x00021269
   21890:	000245a5 	.word	0x000245a5
   21894:	000245e9 	.word	0x000245e9
   21898:	0001e4c5 	.word	0x0001e4c5
   2189c:	00021369 	.word	0x00021369
   218a0:	000212dd 	.word	0x000212dd
   218a4:	0001e551 	.word	0x0001e551
   218a8:	00024891 	.word	0x00024891
   218ac:	00021a8d 	.word	0x00021a8d
   218b0:	00021de1 	.word	0x00021de1
   218b4:	20000948 	.word	0x20000948

000218b8 <usart_write_wait>:
 * \retval STATUS_ERR_DENIED If the transmitter is not enabled
 */
enum status_code usart_write_wait(
		struct usart_module *const module,
		const uint16_t tx_data)
{
   218b8:	b580      	push	{r7, lr}
   218ba:	b084      	sub	sp, #16
   218bc:	af00      	add	r7, sp, #0
   218be:	6078      	str	r0, [r7, #4]
   218c0:	000a      	movs	r2, r1
   218c2:	1cbb      	adds	r3, r7, #2
   218c4:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   218c6:	687b      	ldr	r3, [r7, #4]
   218c8:	681b      	ldr	r3, [r3, #0]
   218ca:	60fb      	str	r3, [r7, #12]

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
   218cc:	687b      	ldr	r3, [r7, #4]
   218ce:	79db      	ldrb	r3, [r3, #7]
   218d0:	2201      	movs	r2, #1
   218d2:	4053      	eors	r3, r2
   218d4:	b2db      	uxtb	r3, r3
   218d6:	2b00      	cmp	r3, #0
   218d8:	d001      	beq.n	218de <usart_write_wait+0x26>
		return STATUS_ERR_DENIED;
   218da:	231c      	movs	r3, #28
   218dc:	e017      	b.n	2190e <usart_write_wait+0x56>
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
   218de:	687b      	ldr	r3, [r7, #4]
   218e0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
   218e2:	b29b      	uxth	r3, r3
   218e4:	2b00      	cmp	r3, #0
   218e6:	d001      	beq.n	218ec <usart_write_wait+0x34>
		return STATUS_BUSY;
   218e8:	2305      	movs	r3, #5
   218ea:	e010      	b.n	2190e <usart_write_wait+0x56>
		return STATUS_BUSY;
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   218ec:	687b      	ldr	r3, [r7, #4]
   218ee:	0018      	movs	r0, r3
   218f0:	4b09      	ldr	r3, [pc, #36]	; (21918 <usart_write_wait+0x60>)
   218f2:	4798      	blx	r3

	/* Write data to USART module */
	usart_hw->DATA.reg = tx_data;
   218f4:	68fb      	ldr	r3, [r7, #12]
   218f6:	1cba      	adds	r2, r7, #2
   218f8:	8812      	ldrh	r2, [r2, #0]
   218fa:	851a      	strh	r2, [r3, #40]	; 0x28

	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
   218fc:	46c0      	nop			; (mov r8, r8)
   218fe:	68fb      	ldr	r3, [r7, #12]
   21900:	7e1b      	ldrb	r3, [r3, #24]
   21902:	b2db      	uxtb	r3, r3
   21904:	001a      	movs	r2, r3
   21906:	2302      	movs	r3, #2
   21908:	4013      	ands	r3, r2
   2190a:	d0f8      	beq.n	218fe <usart_write_wait+0x46>
		/* Wait until data is sent */
	}

	return STATUS_OK;
   2190c:	2300      	movs	r3, #0
}
   2190e:	0018      	movs	r0, r3
   21910:	46bd      	mov	sp, r7
   21912:	b004      	add	sp, #16
   21914:	bd80      	pop	{r7, pc}
   21916:	46c0      	nop			; (mov r8, r8)
   21918:	00021345 	.word	0x00021345

0002191c <usart_write_buffer_wait>:
 */
enum status_code usart_write_buffer_wait(
		struct usart_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
   2191c:	b580      	push	{r7, lr}
   2191e:	b08a      	sub	sp, #40	; 0x28
   21920:	af00      	add	r7, sp, #0
   21922:	60f8      	str	r0, [r7, #12]
   21924:	60b9      	str	r1, [r7, #8]
   21926:	1dbb      	adds	r3, r7, #6
   21928:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
   2192a:	1dbb      	adds	r3, r7, #6
   2192c:	881b      	ldrh	r3, [r3, #0]
   2192e:	2b00      	cmp	r3, #0
   21930:	d101      	bne.n	21936 <usart_write_buffer_wait+0x1a>
		return STATUS_ERR_INVALID_ARG;
   21932:	2317      	movs	r3, #23
   21934:	e07e      	b.n	21a34 <usart_write_buffer_wait+0x118>
	}

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
   21936:	68fb      	ldr	r3, [r7, #12]
   21938:	79db      	ldrb	r3, [r3, #7]
   2193a:	2201      	movs	r2, #1
   2193c:	4053      	eors	r3, r2
   2193e:	b2db      	uxtb	r3, r3
   21940:	2b00      	cmp	r3, #0
   21942:	d001      	beq.n	21948 <usart_write_buffer_wait+0x2c>
		return STATUS_ERR_DENIED;
   21944:	231c      	movs	r3, #28
   21946:	e075      	b.n	21a34 <usart_write_buffer_wait+0x118>
	}

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   21948:	68fb      	ldr	r3, [r7, #12]
   2194a:	681b      	ldr	r3, [r3, #0]
   2194c:	617b      	str	r3, [r7, #20]

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   2194e:	68fb      	ldr	r3, [r7, #12]
   21950:	0018      	movs	r0, r3
   21952:	4b3a      	ldr	r3, [pc, #232]	; (21a3c <usart_write_buffer_wait+0x120>)
   21954:	4798      	blx	r3

	uint16_t tx_pos = 0;
   21956:	2326      	movs	r3, #38	; 0x26
   21958:	18fb      	adds	r3, r7, r3
   2195a:	2200      	movs	r2, #0
   2195c:	801a      	strh	r2, [r3, #0]

	/* Blocks while buffer is being transferred */
	while (length--) {
   2195e:	e048      	b.n	219f2 <usart_write_buffer_wait+0xd6>
		/* Wait for the USART to be ready for new data and abort
		* operation if it doesn't get ready within the timeout*/
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
   21960:	2300      	movs	r3, #0
   21962:	623b      	str	r3, [r7, #32]
   21964:	e00f      	b.n	21986 <usart_write_buffer_wait+0x6a>
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
   21966:	697b      	ldr	r3, [r7, #20]
   21968:	7e1b      	ldrb	r3, [r3, #24]
   2196a:	b2db      	uxtb	r3, r3
   2196c:	001a      	movs	r2, r3
   2196e:	2301      	movs	r3, #1
   21970:	4013      	ands	r3, r2
   21972:	d10d      	bne.n	21990 <usart_write_buffer_wait+0x74>
				break;
			} else if (i == USART_TIMEOUT) {
   21974:	6a3b      	ldr	r3, [r7, #32]
   21976:	4a32      	ldr	r2, [pc, #200]	; (21a40 <usart_write_buffer_wait+0x124>)
   21978:	4293      	cmp	r3, r2
   2197a:	d101      	bne.n	21980 <usart_write_buffer_wait+0x64>
				return STATUS_ERR_TIMEOUT;
   2197c:	2312      	movs	r3, #18
   2197e:	e059      	b.n	21a34 <usart_write_buffer_wait+0x118>
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
   21980:	6a3b      	ldr	r3, [r7, #32]
   21982:	3301      	adds	r3, #1
   21984:	623b      	str	r3, [r7, #32]
   21986:	6a3b      	ldr	r3, [r7, #32]
   21988:	4a2d      	ldr	r2, [pc, #180]	; (21a40 <usart_write_buffer_wait+0x124>)
   2198a:	4293      	cmp	r3, r2
   2198c:	d9eb      	bls.n	21966 <usart_write_buffer_wait+0x4a>
   2198e:	e000      	b.n	21992 <usart_write_buffer_wait+0x76>
				break;
   21990:	46c0      	nop			; (mov r8, r8)
			}
		}

		/* Data to send is at least 8 bits long */
		uint16_t data_to_send = tx_data[tx_pos++];
   21992:	2326      	movs	r3, #38	; 0x26
   21994:	18fb      	adds	r3, r7, r3
   21996:	881b      	ldrh	r3, [r3, #0]
   21998:	2226      	movs	r2, #38	; 0x26
   2199a:	18ba      	adds	r2, r7, r2
   2199c:	1c59      	adds	r1, r3, #1
   2199e:	8011      	strh	r1, [r2, #0]
   219a0:	001a      	movs	r2, r3
   219a2:	68bb      	ldr	r3, [r7, #8]
   219a4:	189b      	adds	r3, r3, r2
   219a6:	781a      	ldrb	r2, [r3, #0]
   219a8:	231e      	movs	r3, #30
   219aa:	18fb      	adds	r3, r7, r3
   219ac:	801a      	strh	r2, [r3, #0]

		/* Check if the character size exceeds 8 bit */
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
   219ae:	68fb      	ldr	r3, [r7, #12]
   219b0:	795b      	ldrb	r3, [r3, #5]
   219b2:	2b01      	cmp	r3, #1
   219b4:	d115      	bne.n	219e2 <usart_write_buffer_wait+0xc6>
			data_to_send |= (tx_data[tx_pos++] << 8);
   219b6:	2326      	movs	r3, #38	; 0x26
   219b8:	18fb      	adds	r3, r7, r3
   219ba:	881b      	ldrh	r3, [r3, #0]
   219bc:	2226      	movs	r2, #38	; 0x26
   219be:	18ba      	adds	r2, r7, r2
   219c0:	1c59      	adds	r1, r3, #1
   219c2:	8011      	strh	r1, [r2, #0]
   219c4:	001a      	movs	r2, r3
   219c6:	68bb      	ldr	r3, [r7, #8]
   219c8:	189b      	adds	r3, r3, r2
   219ca:	781b      	ldrb	r3, [r3, #0]
   219cc:	021b      	lsls	r3, r3, #8
   219ce:	b21a      	sxth	r2, r3
   219d0:	231e      	movs	r3, #30
   219d2:	18fb      	adds	r3, r7, r3
   219d4:	2100      	movs	r1, #0
   219d6:	5e5b      	ldrsh	r3, [r3, r1]
   219d8:	4313      	orrs	r3, r2
   219da:	b21a      	sxth	r2, r3
   219dc:	231e      	movs	r3, #30
   219de:	18fb      	adds	r3, r7, r3
   219e0:	801a      	strh	r2, [r3, #0]
		}

		/* Send the data through the USART module */
		usart_write_wait(module, data_to_send);
   219e2:	231e      	movs	r3, #30
   219e4:	18fb      	adds	r3, r7, r3
   219e6:	881a      	ldrh	r2, [r3, #0]
   219e8:	68fb      	ldr	r3, [r7, #12]
   219ea:	0011      	movs	r1, r2
   219ec:	0018      	movs	r0, r3
   219ee:	4b15      	ldr	r3, [pc, #84]	; (21a44 <usart_write_buffer_wait+0x128>)
   219f0:	4798      	blx	r3
	while (length--) {
   219f2:	1dbb      	adds	r3, r7, #6
   219f4:	881b      	ldrh	r3, [r3, #0]
   219f6:	1dba      	adds	r2, r7, #6
   219f8:	1e59      	subs	r1, r3, #1
   219fa:	8011      	strh	r1, [r2, #0]
   219fc:	2b00      	cmp	r3, #0
   219fe:	d1af      	bne.n	21960 <usart_write_buffer_wait+0x44>
	}

	/* Wait until Transmit is complete or timeout */
	for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
   21a00:	2300      	movs	r3, #0
   21a02:	61bb      	str	r3, [r7, #24]
   21a04:	e00f      	b.n	21a26 <usart_write_buffer_wait+0x10a>
		if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) {
   21a06:	697b      	ldr	r3, [r7, #20]
   21a08:	7e1b      	ldrb	r3, [r3, #24]
   21a0a:	b2db      	uxtb	r3, r3
   21a0c:	001a      	movs	r2, r3
   21a0e:	2302      	movs	r3, #2
   21a10:	4013      	ands	r3, r2
   21a12:	d10d      	bne.n	21a30 <usart_write_buffer_wait+0x114>
			break;
		} else if (i == USART_TIMEOUT) {
   21a14:	69bb      	ldr	r3, [r7, #24]
   21a16:	4a0a      	ldr	r2, [pc, #40]	; (21a40 <usart_write_buffer_wait+0x124>)
   21a18:	4293      	cmp	r3, r2
   21a1a:	d101      	bne.n	21a20 <usart_write_buffer_wait+0x104>
			return STATUS_ERR_TIMEOUT;
   21a1c:	2312      	movs	r3, #18
   21a1e:	e009      	b.n	21a34 <usart_write_buffer_wait+0x118>
	for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
   21a20:	69bb      	ldr	r3, [r7, #24]
   21a22:	3301      	adds	r3, #1
   21a24:	61bb      	str	r3, [r7, #24]
   21a26:	69bb      	ldr	r3, [r7, #24]
   21a28:	4a05      	ldr	r2, [pc, #20]	; (21a40 <usart_write_buffer_wait+0x124>)
   21a2a:	4293      	cmp	r3, r2
   21a2c:	d9eb      	bls.n	21a06 <usart_write_buffer_wait+0xea>
   21a2e:	e000      	b.n	21a32 <usart_write_buffer_wait+0x116>
			break;
   21a30:	46c0      	nop			; (mov r8, r8)
		}
	}

	return STATUS_OK;
   21a32:	2300      	movs	r3, #0
}
   21a34:	0018      	movs	r0, r3
   21a36:	46bd      	mov	sp, r7
   21a38:	b00a      	add	sp, #40	; 0x28
   21a3a:	bd80      	pop	{r7, pc}
   21a3c:	00021345 	.word	0x00021345
   21a40:	0000ffff 	.word	0x0000ffff
   21a44:	000218b9 	.word	0x000218b9

00021a48 <usart_is_syncing>:
{
   21a48:	b580      	push	{r7, lr}
   21a4a:	b084      	sub	sp, #16
   21a4c:	af00      	add	r7, sp, #0
   21a4e:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
   21a50:	687b      	ldr	r3, [r7, #4]
   21a52:	681b      	ldr	r3, [r3, #0]
   21a54:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
   21a56:	68fb      	ldr	r3, [r7, #12]
   21a58:	69db      	ldr	r3, [r3, #28]
   21a5a:	1e5a      	subs	r2, r3, #1
   21a5c:	4193      	sbcs	r3, r2
   21a5e:	b2db      	uxtb	r3, r3
}
   21a60:	0018      	movs	r0, r3
   21a62:	46bd      	mov	sp, r7
   21a64:	b004      	add	sp, #16
   21a66:	bd80      	pop	{r7, pc}

00021a68 <_usart_wait_for_sync>:
{
   21a68:	b580      	push	{r7, lr}
   21a6a:	b082      	sub	sp, #8
   21a6c:	af00      	add	r7, sp, #0
   21a6e:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
   21a70:	46c0      	nop			; (mov r8, r8)
   21a72:	687b      	ldr	r3, [r7, #4]
   21a74:	0018      	movs	r0, r3
   21a76:	4b04      	ldr	r3, [pc, #16]	; (21a88 <_usart_wait_for_sync+0x20>)
   21a78:	4798      	blx	r3
   21a7a:	1e03      	subs	r3, r0, #0
   21a7c:	d1f9      	bne.n	21a72 <_usart_wait_for_sync+0xa>
}
   21a7e:	46c0      	nop			; (mov r8, r8)
   21a80:	46bd      	mov	sp, r7
   21a82:	b002      	add	sp, #8
   21a84:	bd80      	pop	{r7, pc}
   21a86:	46c0      	nop			; (mov r8, r8)
   21a88:	00021a49 	.word	0x00021a49

00021a8c <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
   21a8c:	b580      	push	{r7, lr}
   21a8e:	b088      	sub	sp, #32
   21a90:	af00      	add	r7, sp, #0
   21a92:	0002      	movs	r2, r0
   21a94:	1dfb      	adds	r3, r7, #7
   21a96:	701a      	strb	r2, [r3, #0]
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
		= (struct usart_module *)_sercom_instances[instance];
   21a98:	1dfb      	adds	r3, r7, #7
   21a9a:	781a      	ldrb	r2, [r3, #0]
	struct usart_module *module
   21a9c:	4ba3      	ldr	r3, [pc, #652]	; (21d2c <_usart_interrupt_handler+0x2a0>)
   21a9e:	0092      	lsls	r2, r2, #2
   21aa0:	58d3      	ldr	r3, [r2, r3]
   21aa2:	61bb      	str	r3, [r7, #24]

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
   21aa4:	69bb      	ldr	r3, [r7, #24]
   21aa6:	681b      	ldr	r3, [r3, #0]
	SercomUsart *const usart_hw
   21aa8:	617b      	str	r3, [r7, #20]

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);
   21aaa:	69bb      	ldr	r3, [r7, #24]
   21aac:	0018      	movs	r0, r3
   21aae:	4ba0      	ldr	r3, [pc, #640]	; (21d30 <_usart_interrupt_handler+0x2a4>)
   21ab0:	4798      	blx	r3

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
   21ab2:	697b      	ldr	r3, [r7, #20]
   21ab4:	7e1b      	ldrb	r3, [r3, #24]
   21ab6:	b2da      	uxtb	r2, r3
   21ab8:	2312      	movs	r3, #18
   21aba:	18fb      	adds	r3, r7, r3
   21abc:	801a      	strh	r2, [r3, #0]
	interrupt_status &= usart_hw->INTENSET.reg;
   21abe:	697b      	ldr	r3, [r7, #20]
   21ac0:	7d9b      	ldrb	r3, [r3, #22]
   21ac2:	b2db      	uxtb	r3, r3
   21ac4:	b29a      	uxth	r2, r3
   21ac6:	2312      	movs	r3, #18
   21ac8:	18fb      	adds	r3, r7, r3
   21aca:	2112      	movs	r1, #18
   21acc:	1879      	adds	r1, r7, r1
   21ace:	8809      	ldrh	r1, [r1, #0]
   21ad0:	400a      	ands	r2, r1
   21ad2:	801a      	strh	r2, [r3, #0]
	callback_status = module->callback_reg_mask &
   21ad4:	69bb      	ldr	r3, [r7, #24]
   21ad6:	2230      	movs	r2, #48	; 0x30
   21ad8:	5c9b      	ldrb	r3, [r3, r2]
			module->callback_enable_mask;
   21ada:	69ba      	ldr	r2, [r7, #24]
   21adc:	2131      	movs	r1, #49	; 0x31
   21ade:	5c52      	ldrb	r2, [r2, r1]
	callback_status = module->callback_reg_mask &
   21ae0:	4013      	ands	r3, r2
   21ae2:	b2da      	uxtb	r2, r3
   21ae4:	2310      	movs	r3, #16
   21ae6:	18fb      	adds	r3, r7, r3
   21ae8:	801a      	strh	r2, [r3, #0]

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
   21aea:	2312      	movs	r3, #18
   21aec:	18fb      	adds	r3, r7, r3
   21aee:	881b      	ldrh	r3, [r3, #0]
   21af0:	2201      	movs	r2, #1
   21af2:	4013      	ands	r3, r2
   21af4:	d044      	beq.n	21b80 <_usart_interrupt_handler+0xf4>
		if (module->remaining_tx_buffer_length) {
   21af6:	69bb      	ldr	r3, [r7, #24]
   21af8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
   21afa:	b29b      	uxth	r3, r3
   21afc:	2b00      	cmp	r3, #0
   21afe:	d03c      	beq.n	21b7a <_usart_interrupt_handler+0xee>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
   21b00:	69bb      	ldr	r3, [r7, #24]
   21b02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   21b04:	781b      	ldrb	r3, [r3, #0]
   21b06:	b2da      	uxtb	r2, r3
   21b08:	231c      	movs	r3, #28
   21b0a:	18fb      	adds	r3, r7, r3
   21b0c:	801a      	strh	r2, [r3, #0]
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
   21b0e:	69bb      	ldr	r3, [r7, #24]
   21b10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   21b12:	1c5a      	adds	r2, r3, #1
   21b14:	69bb      	ldr	r3, [r7, #24]
   21b16:	629a      	str	r2, [r3, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
   21b18:	69bb      	ldr	r3, [r7, #24]
   21b1a:	795b      	ldrb	r3, [r3, #5]
   21b1c:	2b01      	cmp	r3, #1
   21b1e:	d113      	bne.n	21b48 <_usart_interrupt_handler+0xbc>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
   21b20:	69bb      	ldr	r3, [r7, #24]
   21b22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   21b24:	781b      	ldrb	r3, [r3, #0]
   21b26:	b2db      	uxtb	r3, r3
   21b28:	021b      	lsls	r3, r3, #8
   21b2a:	b21a      	sxth	r2, r3
   21b2c:	231c      	movs	r3, #28
   21b2e:	18fb      	adds	r3, r7, r3
   21b30:	2100      	movs	r1, #0
   21b32:	5e5b      	ldrsh	r3, [r3, r1]
   21b34:	4313      	orrs	r3, r2
   21b36:	b21a      	sxth	r2, r3
   21b38:	231c      	movs	r3, #28
   21b3a:	18fb      	adds	r3, r7, r3
   21b3c:	801a      	strh	r2, [r3, #0]
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
   21b3e:	69bb      	ldr	r3, [r7, #24]
   21b40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   21b42:	1c5a      	adds	r2, r3, #1
   21b44:	69bb      	ldr	r3, [r7, #24]
   21b46:	629a      	str	r2, [r3, #40]	; 0x28
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
   21b48:	231c      	movs	r3, #28
   21b4a:	18fb      	adds	r3, r7, r3
   21b4c:	881b      	ldrh	r3, [r3, #0]
   21b4e:	05db      	lsls	r3, r3, #23
   21b50:	0ddb      	lsrs	r3, r3, #23
   21b52:	b29a      	uxth	r2, r3
   21b54:	697b      	ldr	r3, [r7, #20]
   21b56:	851a      	strh	r2, [r3, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
   21b58:	69bb      	ldr	r3, [r7, #24]
   21b5a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
   21b5c:	b29b      	uxth	r3, r3
   21b5e:	3b01      	subs	r3, #1
   21b60:	b29b      	uxth	r3, r3
   21b62:	69ba      	ldr	r2, [r7, #24]
   21b64:	1c19      	adds	r1, r3, #0
   21b66:	85d1      	strh	r1, [r2, #46]	; 0x2e
   21b68:	2b00      	cmp	r3, #0
   21b6a:	d109      	bne.n	21b80 <_usart_interrupt_handler+0xf4>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
   21b6c:	697b      	ldr	r3, [r7, #20]
   21b6e:	2201      	movs	r2, #1
   21b70:	751a      	strb	r2, [r3, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
   21b72:	697b      	ldr	r3, [r7, #20]
   21b74:	2202      	movs	r2, #2
   21b76:	759a      	strb	r2, [r3, #22]
   21b78:	e002      	b.n	21b80 <_usart_interrupt_handler+0xf4>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
   21b7a:	697b      	ldr	r3, [r7, #20]
   21b7c:	2201      	movs	r2, #1
   21b7e:	751a      	strb	r2, [r3, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
   21b80:	2312      	movs	r3, #18
   21b82:	18fb      	adds	r3, r7, r3
   21b84:	881b      	ldrh	r3, [r3, #0]
   21b86:	2202      	movs	r2, #2
   21b88:	4013      	ands	r3, r2
   21b8a:	d011      	beq.n	21bb0 <_usart_interrupt_handler+0x124>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
   21b8c:	697b      	ldr	r3, [r7, #20]
   21b8e:	2202      	movs	r2, #2
   21b90:	751a      	strb	r2, [r3, #20]
		module->tx_status = STATUS_OK;
   21b92:	69bb      	ldr	r3, [r7, #24]
   21b94:	2233      	movs	r2, #51	; 0x33
   21b96:	2100      	movs	r1, #0
   21b98:	5499      	strb	r1, [r3, r2]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
   21b9a:	2310      	movs	r3, #16
   21b9c:	18fb      	adds	r3, r7, r3
   21b9e:	881b      	ldrh	r3, [r3, #0]
   21ba0:	2201      	movs	r2, #1
   21ba2:	4013      	ands	r3, r2
   21ba4:	d004      	beq.n	21bb0 <_usart_interrupt_handler+0x124>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
   21ba6:	69bb      	ldr	r3, [r7, #24]
   21ba8:	68db      	ldr	r3, [r3, #12]
   21baa:	69ba      	ldr	r2, [r7, #24]
   21bac:	0010      	movs	r0, r2
   21bae:	4798      	blx	r3
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
   21bb0:	2312      	movs	r3, #18
   21bb2:	18fb      	adds	r3, r7, r3
   21bb4:	881b      	ldrh	r3, [r3, #0]
   21bb6:	2204      	movs	r2, #4
   21bb8:	4013      	ands	r3, r2
   21bba:	d100      	bne.n	21bbe <_usart_interrupt_handler+0x132>
   21bbc:	e0bd      	b.n	21d3a <_usart_interrupt_handler+0x2ae>

		if (module->remaining_rx_buffer_length) {
   21bbe:	69bb      	ldr	r3, [r7, #24]
   21bc0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
   21bc2:	b29b      	uxth	r3, r3
   21bc4:	2b00      	cmp	r3, #0
   21bc6:	d100      	bne.n	21bca <_usart_interrupt_handler+0x13e>
   21bc8:	e0b4      	b.n	21d34 <_usart_interrupt_handler+0x2a8>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
   21bca:	697b      	ldr	r3, [r7, #20]
   21bcc:	8b5b      	ldrh	r3, [r3, #26]
   21bce:	b29b      	uxth	r3, r3
   21bd0:	b2da      	uxtb	r2, r3
   21bd2:	231f      	movs	r3, #31
   21bd4:	18fb      	adds	r3, r7, r3
   21bd6:	213f      	movs	r1, #63	; 0x3f
   21bd8:	400a      	ands	r2, r1
   21bda:	701a      	strb	r2, [r3, #0]
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
   21bdc:	231f      	movs	r3, #31
   21bde:	18fb      	adds	r3, r7, r3
   21be0:	781b      	ldrb	r3, [r3, #0]
   21be2:	2208      	movs	r2, #8
   21be4:	4013      	ands	r3, r2
   21be6:	d007      	beq.n	21bf8 <_usart_interrupt_handler+0x16c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
   21be8:	231f      	movs	r3, #31
   21bea:	18fb      	adds	r3, r7, r3
   21bec:	221f      	movs	r2, #31
   21bee:	18ba      	adds	r2, r7, r2
   21bf0:	7812      	ldrb	r2, [r2, #0]
   21bf2:	2108      	movs	r1, #8
   21bf4:	438a      	bics	r2, r1
   21bf6:	701a      	strb	r2, [r3, #0]
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
   21bf8:	231f      	movs	r3, #31
   21bfa:	18fb      	adds	r3, r7, r3
   21bfc:	781b      	ldrb	r3, [r3, #0]
   21bfe:	2b00      	cmp	r3, #0
   21c00:	d050      	beq.n	21ca4 <_usart_interrupt_handler+0x218>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
   21c02:	231f      	movs	r3, #31
   21c04:	18fb      	adds	r3, r7, r3
   21c06:	781b      	ldrb	r3, [r3, #0]
   21c08:	2202      	movs	r2, #2
   21c0a:	4013      	ands	r3, r2
   21c0c:	d007      	beq.n	21c1e <_usart_interrupt_handler+0x192>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
   21c0e:	69bb      	ldr	r3, [r7, #24]
   21c10:	2232      	movs	r2, #50	; 0x32
   21c12:	211a      	movs	r1, #26
   21c14:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
   21c16:	697b      	ldr	r3, [r7, #20]
   21c18:	2202      	movs	r2, #2
   21c1a:	835a      	strh	r2, [r3, #26]
   21c1c:	e036      	b.n	21c8c <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
   21c1e:	231f      	movs	r3, #31
   21c20:	18fb      	adds	r3, r7, r3
   21c22:	781b      	ldrb	r3, [r3, #0]
   21c24:	2204      	movs	r2, #4
   21c26:	4013      	ands	r3, r2
   21c28:	d007      	beq.n	21c3a <_usart_interrupt_handler+0x1ae>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
   21c2a:	69bb      	ldr	r3, [r7, #24]
   21c2c:	2232      	movs	r2, #50	; 0x32
   21c2e:	211e      	movs	r1, #30
   21c30:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
   21c32:	697b      	ldr	r3, [r7, #20]
   21c34:	2204      	movs	r2, #4
   21c36:	835a      	strh	r2, [r3, #26]
   21c38:	e028      	b.n	21c8c <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
   21c3a:	231f      	movs	r3, #31
   21c3c:	18fb      	adds	r3, r7, r3
   21c3e:	781b      	ldrb	r3, [r3, #0]
   21c40:	2201      	movs	r2, #1
   21c42:	4013      	ands	r3, r2
   21c44:	d007      	beq.n	21c56 <_usart_interrupt_handler+0x1ca>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
   21c46:	69bb      	ldr	r3, [r7, #24]
   21c48:	2232      	movs	r2, #50	; 0x32
   21c4a:	2113      	movs	r1, #19
   21c4c:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
   21c4e:	697b      	ldr	r3, [r7, #20]
   21c50:	2201      	movs	r2, #1
   21c52:	835a      	strh	r2, [r3, #26]
   21c54:	e01a      	b.n	21c8c <_usart_interrupt_handler+0x200>
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) {
   21c56:	231f      	movs	r3, #31
   21c58:	18fb      	adds	r3, r7, r3
   21c5a:	781b      	ldrb	r3, [r3, #0]
   21c5c:	2210      	movs	r2, #16
   21c5e:	4013      	ands	r3, r2
   21c60:	d007      	beq.n	21c72 <_usart_interrupt_handler+0x1e6>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
   21c62:	69bb      	ldr	r3, [r7, #24]
   21c64:	2232      	movs	r2, #50	; 0x32
   21c66:	2142      	movs	r1, #66	; 0x42
   21c68:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
   21c6a:	697b      	ldr	r3, [r7, #20]
   21c6c:	2210      	movs	r2, #16
   21c6e:	835a      	strh	r2, [r3, #26]
   21c70:	e00c      	b.n	21c8c <_usart_interrupt_handler+0x200>
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) {
   21c72:	231f      	movs	r3, #31
   21c74:	18fb      	adds	r3, r7, r3
   21c76:	781b      	ldrb	r3, [r3, #0]
   21c78:	2220      	movs	r2, #32
   21c7a:	4013      	ands	r3, r2
   21c7c:	d006      	beq.n	21c8c <_usart_interrupt_handler+0x200>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
   21c7e:	69bb      	ldr	r3, [r7, #24]
   21c80:	2232      	movs	r2, #50	; 0x32
   21c82:	2141      	movs	r1, #65	; 0x41
   21c84:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
   21c86:	697b      	ldr	r3, [r7, #20]
   21c88:	2220      	movs	r2, #32
   21c8a:	835a      	strh	r2, [r3, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
						& (1 << USART_CALLBACK_ERROR)) {
   21c8c:	2310      	movs	r3, #16
   21c8e:	18fb      	adds	r3, r7, r3
   21c90:	881b      	ldrh	r3, [r3, #0]
   21c92:	2204      	movs	r2, #4
   21c94:	4013      	ands	r3, r2
				if (callback_status
   21c96:	d050      	beq.n	21d3a <_usart_interrupt_handler+0x2ae>
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
   21c98:	69bb      	ldr	r3, [r7, #24]
   21c9a:	695b      	ldr	r3, [r3, #20]
   21c9c:	69ba      	ldr	r2, [r7, #24]
   21c9e:	0010      	movs	r0, r2
   21ca0:	4798      	blx	r3
   21ca2:	e04a      	b.n	21d3a <_usart_interrupt_handler+0x2ae>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
   21ca4:	697b      	ldr	r3, [r7, #20]
   21ca6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
   21ca8:	b29a      	uxth	r2, r3
   21caa:	230e      	movs	r3, #14
   21cac:	18fb      	adds	r3, r7, r3
   21cae:	05d2      	lsls	r2, r2, #23
   21cb0:	0dd2      	lsrs	r2, r2, #23
   21cb2:	801a      	strh	r2, [r3, #0]

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
   21cb4:	69bb      	ldr	r3, [r7, #24]
   21cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   21cb8:	220e      	movs	r2, #14
   21cba:	18ba      	adds	r2, r7, r2
   21cbc:	8812      	ldrh	r2, [r2, #0]
   21cbe:	b2d2      	uxtb	r2, r2
   21cc0:	701a      	strb	r2, [r3, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
   21cc2:	69bb      	ldr	r3, [r7, #24]
   21cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   21cc6:	1c5a      	adds	r2, r3, #1
   21cc8:	69bb      	ldr	r3, [r7, #24]
   21cca:	625a      	str	r2, [r3, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
   21ccc:	69bb      	ldr	r3, [r7, #24]
   21cce:	795b      	ldrb	r3, [r3, #5]
   21cd0:	2b01      	cmp	r3, #1
   21cd2:	d10d      	bne.n	21cf0 <_usart_interrupt_handler+0x264>
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
   21cd4:	69bb      	ldr	r3, [r7, #24]
   21cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   21cd8:	220e      	movs	r2, #14
   21cda:	18ba      	adds	r2, r7, r2
   21cdc:	8812      	ldrh	r2, [r2, #0]
   21cde:	0a12      	lsrs	r2, r2, #8
   21ce0:	b292      	uxth	r2, r2
   21ce2:	b2d2      	uxtb	r2, r2
   21ce4:	701a      	strb	r2, [r3, #0]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
   21ce6:	69bb      	ldr	r3, [r7, #24]
   21ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   21cea:	1c5a      	adds	r2, r3, #1
   21cec:	69bb      	ldr	r3, [r7, #24]
   21cee:	625a      	str	r2, [r3, #36]	; 0x24
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
   21cf0:	69bb      	ldr	r3, [r7, #24]
   21cf2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
   21cf4:	b29b      	uxth	r3, r3
   21cf6:	3b01      	subs	r3, #1
   21cf8:	b29b      	uxth	r3, r3
   21cfa:	69ba      	ldr	r2, [r7, #24]
   21cfc:	1c19      	adds	r1, r3, #0
   21cfe:	8591      	strh	r1, [r2, #44]	; 0x2c
   21d00:	2b00      	cmp	r3, #0
   21d02:	d11a      	bne.n	21d3a <_usart_interrupt_handler+0x2ae>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
   21d04:	697b      	ldr	r3, [r7, #20]
   21d06:	2204      	movs	r2, #4
   21d08:	751a      	strb	r2, [r3, #20]
					module->rx_status = STATUS_OK;
   21d0a:	69bb      	ldr	r3, [r7, #24]
   21d0c:	2232      	movs	r2, #50	; 0x32
   21d0e:	2100      	movs	r1, #0
   21d10:	5499      	strb	r1, [r3, r2]

					/* Run callback if registered and enabled */
					if (callback_status
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
   21d12:	2310      	movs	r3, #16
   21d14:	18fb      	adds	r3, r7, r3
   21d16:	881b      	ldrh	r3, [r3, #0]
   21d18:	2202      	movs	r2, #2
   21d1a:	4013      	ands	r3, r2
					if (callback_status
   21d1c:	d00d      	beq.n	21d3a <_usart_interrupt_handler+0x2ae>
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
   21d1e:	69bb      	ldr	r3, [r7, #24]
   21d20:	691b      	ldr	r3, [r3, #16]
   21d22:	69ba      	ldr	r2, [r7, #24]
   21d24:	0010      	movs	r0, r2
   21d26:	4798      	blx	r3
   21d28:	e007      	b.n	21d3a <_usart_interrupt_handler+0x2ae>
   21d2a:	46c0      	nop			; (mov r8, r8)
   21d2c:	20000948 	.word	0x20000948
   21d30:	00021a69 	.word	0x00021a69
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
   21d34:	697b      	ldr	r3, [r7, #20]
   21d36:	2204      	movs	r2, #4
   21d38:	751a      	strb	r2, [r3, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
   21d3a:	2312      	movs	r3, #18
   21d3c:	18fb      	adds	r3, r7, r3
   21d3e:	881b      	ldrh	r3, [r3, #0]
   21d40:	2210      	movs	r2, #16
   21d42:	4013      	ands	r3, r2
   21d44:	d010      	beq.n	21d68 <_usart_interrupt_handler+0x2dc>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
   21d46:	697b      	ldr	r3, [r7, #20]
   21d48:	2210      	movs	r2, #16
   21d4a:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
   21d4c:	697b      	ldr	r3, [r7, #20]
   21d4e:	2210      	movs	r2, #16
   21d50:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
   21d52:	2310      	movs	r3, #16
   21d54:	18fb      	adds	r3, r7, r3
   21d56:	881b      	ldrh	r3, [r3, #0]
   21d58:	2210      	movs	r2, #16
   21d5a:	4013      	ands	r3, r2
   21d5c:	d004      	beq.n	21d68 <_usart_interrupt_handler+0x2dc>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
   21d5e:	69bb      	ldr	r3, [r7, #24]
   21d60:	69db      	ldr	r3, [r3, #28]
   21d62:	69ba      	ldr	r2, [r7, #24]
   21d64:	0010      	movs	r0, r2
   21d66:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
   21d68:	2312      	movs	r3, #18
   21d6a:	18fb      	adds	r3, r7, r3
   21d6c:	881b      	ldrh	r3, [r3, #0]
   21d6e:	2220      	movs	r2, #32
   21d70:	4013      	ands	r3, r2
   21d72:	d010      	beq.n	21d96 <_usart_interrupt_handler+0x30a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
   21d74:	697b      	ldr	r3, [r7, #20]
   21d76:	2220      	movs	r2, #32
   21d78:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
   21d7a:	697b      	ldr	r3, [r7, #20]
   21d7c:	2220      	movs	r2, #32
   21d7e:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
   21d80:	2310      	movs	r3, #16
   21d82:	18fb      	adds	r3, r7, r3
   21d84:	881b      	ldrh	r3, [r3, #0]
   21d86:	2208      	movs	r2, #8
   21d88:	4013      	ands	r3, r2
   21d8a:	d004      	beq.n	21d96 <_usart_interrupt_handler+0x30a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
   21d8c:	69bb      	ldr	r3, [r7, #24]
   21d8e:	699b      	ldr	r3, [r3, #24]
   21d90:	69ba      	ldr	r2, [r7, #24]
   21d92:	0010      	movs	r0, r2
   21d94:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
   21d96:	2312      	movs	r3, #18
   21d98:	18fb      	adds	r3, r7, r3
   21d9a:	881b      	ldrh	r3, [r3, #0]
   21d9c:	2208      	movs	r2, #8
   21d9e:	4013      	ands	r3, r2
   21da0:	d010      	beq.n	21dc4 <_usart_interrupt_handler+0x338>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
   21da2:	697b      	ldr	r3, [r7, #20]
   21da4:	2208      	movs	r2, #8
   21da6:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
   21da8:	697b      	ldr	r3, [r7, #20]
   21daa:	2208      	movs	r2, #8
   21dac:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
   21dae:	2310      	movs	r3, #16
   21db0:	18fb      	adds	r3, r7, r3
   21db2:	881b      	ldrh	r3, [r3, #0]
   21db4:	2220      	movs	r2, #32
   21db6:	4013      	ands	r3, r2
   21db8:	d004      	beq.n	21dc4 <_usart_interrupt_handler+0x338>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
   21dba:	69bb      	ldr	r3, [r7, #24]
   21dbc:	6a1b      	ldr	r3, [r3, #32]
   21dbe:	69ba      	ldr	r2, [r7, #24]
   21dc0:	0010      	movs	r0, r2
   21dc2:	4798      	blx	r3
		}
	}
#endif
}
   21dc4:	46c0      	nop			; (mov r8, r8)
   21dc6:	46bd      	mov	sp, r7
   21dc8:	b008      	add	sp, #32
   21dca:	bd80      	pop	{r7, pc}

00021dcc <_sercom_default_handler>:
 *
 * \param[in] instance SERCOM instance used.
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
   21dcc:	b580      	push	{r7, lr}
   21dce:	b082      	sub	sp, #8
   21dd0:	af00      	add	r7, sp, #0
   21dd2:	0002      	movs	r2, r0
   21dd4:	1dfb      	adds	r3, r7, #7
   21dd6:	701a      	strb	r2, [r3, #0]
	Assert(false);
}
   21dd8:	46c0      	nop			; (mov r8, r8)
   21dda:	46bd      	mov	sp, r7
   21ddc:	b002      	add	sp, #8
   21dde:	bd80      	pop	{r7, pc}

00021de0 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
   21de0:	b580      	push	{r7, lr}
   21de2:	b084      	sub	sp, #16
   21de4:	af00      	add	r7, sp, #0
   21de6:	0002      	movs	r2, r0
   21de8:	6039      	str	r1, [r7, #0]
   21dea:	1dfb      	adds	r3, r7, #7
   21dec:	701a      	strb	r2, [r3, #0]
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
   21dee:	4b13      	ldr	r3, [pc, #76]	; (21e3c <_sercom_set_handler+0x5c>)
   21df0:	781b      	ldrb	r3, [r3, #0]
   21df2:	2201      	movs	r2, #1
   21df4:	4053      	eors	r3, r2
   21df6:	b2db      	uxtb	r3, r3
   21df8:	2b00      	cmp	r3, #0
   21dfa:	d015      	beq.n	21e28 <_sercom_set_handler+0x48>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   21dfc:	2300      	movs	r3, #0
   21dfe:	60fb      	str	r3, [r7, #12]
   21e00:	e00c      	b.n	21e1c <_sercom_set_handler+0x3c>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
   21e02:	4b0f      	ldr	r3, [pc, #60]	; (21e40 <_sercom_set_handler+0x60>)
   21e04:	68fa      	ldr	r2, [r7, #12]
   21e06:	0092      	lsls	r2, r2, #2
   21e08:	490e      	ldr	r1, [pc, #56]	; (21e44 <_sercom_set_handler+0x64>)
   21e0a:	50d1      	str	r1, [r2, r3]
			_sercom_instances[i] = NULL;
   21e0c:	4b0e      	ldr	r3, [pc, #56]	; (21e48 <_sercom_set_handler+0x68>)
   21e0e:	68fa      	ldr	r2, [r7, #12]
   21e10:	0092      	lsls	r2, r2, #2
   21e12:	2100      	movs	r1, #0
   21e14:	50d1      	str	r1, [r2, r3]
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   21e16:	68fb      	ldr	r3, [r7, #12]
   21e18:	3301      	adds	r3, #1
   21e1a:	60fb      	str	r3, [r7, #12]
   21e1c:	68fb      	ldr	r3, [r7, #12]
   21e1e:	2b05      	cmp	r3, #5
   21e20:	d9ef      	bls.n	21e02 <_sercom_set_handler+0x22>
		}

		_handler_table_initialized = true;
   21e22:	4b06      	ldr	r3, [pc, #24]	; (21e3c <_sercom_set_handler+0x5c>)
   21e24:	2201      	movs	r2, #1
   21e26:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
   21e28:	1dfb      	adds	r3, r7, #7
   21e2a:	781a      	ldrb	r2, [r3, #0]
   21e2c:	4b04      	ldr	r3, [pc, #16]	; (21e40 <_sercom_set_handler+0x60>)
   21e2e:	0092      	lsls	r2, r2, #2
   21e30:	6839      	ldr	r1, [r7, #0]
   21e32:	50d1      	str	r1, [r2, r3]
}
   21e34:	46c0      	nop			; (mov r8, r8)
   21e36:	46bd      	mov	sp, r7
   21e38:	b004      	add	sp, #16
   21e3a:	bd80      	pop	{r7, pc}
   21e3c:	20000408 	.word	0x20000408
   21e40:	2000040c 	.word	0x2000040c
   21e44:	00021dcd 	.word	0x00021dcd
   21e48:	20000948 	.word	0x20000948

00021e4c <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
   21e4c:	b590      	push	{r4, r7, lr}
   21e4e:	b085      	sub	sp, #20
   21e50:	af00      	add	r7, sp, #0
   21e52:	6078      	str	r0, [r7, #4]
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
   21e54:	2308      	movs	r3, #8
   21e56:	18fb      	adds	r3, r7, r3
   21e58:	4a0b      	ldr	r2, [pc, #44]	; (21e88 <_sercom_get_interrupt_vector+0x3c>)
   21e5a:	6811      	ldr	r1, [r2, #0]
   21e5c:	6019      	str	r1, [r3, #0]
   21e5e:	8892      	ldrh	r2, [r2, #4]
   21e60:	809a      	strh	r2, [r3, #4]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
   21e62:	230f      	movs	r3, #15
   21e64:	18fc      	adds	r4, r7, r3
   21e66:	687b      	ldr	r3, [r7, #4]
   21e68:	0018      	movs	r0, r3
   21e6a:	4b08      	ldr	r3, [pc, #32]	; (21e8c <_sercom_get_interrupt_vector+0x40>)
   21e6c:	4798      	blx	r3
   21e6e:	0003      	movs	r3, r0
   21e70:	7023      	strb	r3, [r4, #0]

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
   21e72:	230f      	movs	r3, #15
   21e74:	18fb      	adds	r3, r7, r3
   21e76:	781b      	ldrb	r3, [r3, #0]
   21e78:	2208      	movs	r2, #8
   21e7a:	18ba      	adds	r2, r7, r2
   21e7c:	5cd3      	ldrb	r3, [r2, r3]
   21e7e:	b25b      	sxtb	r3, r3
}
   21e80:	0018      	movs	r0, r3
   21e82:	46bd      	mov	sp, r7
   21e84:	b005      	add	sp, #20
   21e86:	bd90      	pop	{r4, r7, pc}
   21e88:	0002a664 	.word	0x0002a664
   21e8c:	0001e70d 	.word	0x0001e70d

00021e90 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
   21e90:	b580      	push	{r7, lr}
   21e92:	af00      	add	r7, sp, #0
   21e94:	4b03      	ldr	r3, [pc, #12]	; (21ea4 <SERCOM0_Handler+0x14>)
   21e96:	681b      	ldr	r3, [r3, #0]
   21e98:	2000      	movs	r0, #0
   21e9a:	4798      	blx	r3
   21e9c:	46c0      	nop			; (mov r8, r8)
   21e9e:	46bd      	mov	sp, r7
   21ea0:	bd80      	pop	{r7, pc}
   21ea2:	46c0      	nop			; (mov r8, r8)
   21ea4:	2000040c 	.word	0x2000040c

00021ea8 <SERCOM1_Handler>:
   21ea8:	b580      	push	{r7, lr}
   21eaa:	af00      	add	r7, sp, #0
   21eac:	4b03      	ldr	r3, [pc, #12]	; (21ebc <SERCOM1_Handler+0x14>)
   21eae:	685b      	ldr	r3, [r3, #4]
   21eb0:	2001      	movs	r0, #1
   21eb2:	4798      	blx	r3
   21eb4:	46c0      	nop			; (mov r8, r8)
   21eb6:	46bd      	mov	sp, r7
   21eb8:	bd80      	pop	{r7, pc}
   21eba:	46c0      	nop			; (mov r8, r8)
   21ebc:	2000040c 	.word	0x2000040c

00021ec0 <SERCOM2_Handler>:
   21ec0:	b580      	push	{r7, lr}
   21ec2:	af00      	add	r7, sp, #0
   21ec4:	4b03      	ldr	r3, [pc, #12]	; (21ed4 <SERCOM2_Handler+0x14>)
   21ec6:	689b      	ldr	r3, [r3, #8]
   21ec8:	2002      	movs	r0, #2
   21eca:	4798      	blx	r3
   21ecc:	46c0      	nop			; (mov r8, r8)
   21ece:	46bd      	mov	sp, r7
   21ed0:	bd80      	pop	{r7, pc}
   21ed2:	46c0      	nop			; (mov r8, r8)
   21ed4:	2000040c 	.word	0x2000040c

00021ed8 <SERCOM3_Handler>:
   21ed8:	b580      	push	{r7, lr}
   21eda:	af00      	add	r7, sp, #0
   21edc:	4b03      	ldr	r3, [pc, #12]	; (21eec <SERCOM3_Handler+0x14>)
   21ede:	68db      	ldr	r3, [r3, #12]
   21ee0:	2003      	movs	r0, #3
   21ee2:	4798      	blx	r3
   21ee4:	46c0      	nop			; (mov r8, r8)
   21ee6:	46bd      	mov	sp, r7
   21ee8:	bd80      	pop	{r7, pc}
   21eea:	46c0      	nop			; (mov r8, r8)
   21eec:	2000040c 	.word	0x2000040c

00021ef0 <SERCOM4_Handler>:
   21ef0:	b580      	push	{r7, lr}
   21ef2:	af00      	add	r7, sp, #0
   21ef4:	4b03      	ldr	r3, [pc, #12]	; (21f04 <SERCOM4_Handler+0x14>)
   21ef6:	691b      	ldr	r3, [r3, #16]
   21ef8:	2004      	movs	r0, #4
   21efa:	4798      	blx	r3
   21efc:	46c0      	nop			; (mov r8, r8)
   21efe:	46bd      	mov	sp, r7
   21f00:	bd80      	pop	{r7, pc}
   21f02:	46c0      	nop			; (mov r8, r8)
   21f04:	2000040c 	.word	0x2000040c

00021f08 <SERCOM5_Handler>:
   21f08:	b580      	push	{r7, lr}
   21f0a:	af00      	add	r7, sp, #0
   21f0c:	4b03      	ldr	r3, [pc, #12]	; (21f1c <SERCOM5_Handler+0x14>)
   21f0e:	695b      	ldr	r3, [r3, #20]
   21f10:	2005      	movs	r0, #5
   21f12:	4798      	blx	r3
   21f14:	46c0      	nop			; (mov r8, r8)
   21f16:	46bd      	mov	sp, r7
   21f18:	bd80      	pop	{r7, pc}
   21f1a:	46c0      	nop			; (mov r8, r8)
   21f1c:	2000040c 	.word	0x2000040c

00021f20 <_extint_get_eic_from_channel>:
{
   21f20:	b580      	push	{r7, lr}
   21f22:	b084      	sub	sp, #16
   21f24:	af00      	add	r7, sp, #0
   21f26:	0002      	movs	r2, r0
   21f28:	1dfb      	adds	r3, r7, #7
   21f2a:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
   21f2c:	230f      	movs	r3, #15
   21f2e:	18fb      	adds	r3, r7, r3
   21f30:	1dfa      	adds	r2, r7, #7
   21f32:	7812      	ldrb	r2, [r2, #0]
   21f34:	0952      	lsrs	r2, r2, #5
   21f36:	701a      	strb	r2, [r3, #0]
	if (eic_index < EIC_INST_NUM) {
   21f38:	230f      	movs	r3, #15
   21f3a:	18fb      	adds	r3, r7, r3
   21f3c:	781b      	ldrb	r3, [r3, #0]
   21f3e:	2b00      	cmp	r3, #0
   21f40:	d10c      	bne.n	21f5c <_extint_get_eic_from_channel+0x3c>
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   21f42:	4b09      	ldr	r3, [pc, #36]	; (21f68 <_extint_get_eic_from_channel+0x48>)
   21f44:	60bb      	str	r3, [r7, #8]
		return eics[eic_index];
   21f46:	230f      	movs	r3, #15
   21f48:	18fb      	adds	r3, r7, r3
   21f4a:	781b      	ldrb	r3, [r3, #0]
   21f4c:	009b      	lsls	r3, r3, #2
   21f4e:	2210      	movs	r2, #16
   21f50:	4694      	mov	ip, r2
   21f52:	44bc      	add	ip, r7
   21f54:	4463      	add	r3, ip
   21f56:	3b08      	subs	r3, #8
   21f58:	681b      	ldr	r3, [r3, #0]
   21f5a:	e000      	b.n	21f5e <_extint_get_eic_from_channel+0x3e>
		return NULL;
   21f5c:	2300      	movs	r3, #0
}
   21f5e:	0018      	movs	r0, r3
   21f60:	46bd      	mov	sp, r7
   21f62:	b004      	add	sp, #16
   21f64:	bd80      	pop	{r7, pc}
   21f66:	46c0      	nop			; (mov r8, r8)
   21f68:	40001800 	.word	0x40001800

00021f6c <extint_chan_is_detected>:
{
   21f6c:	b580      	push	{r7, lr}
   21f6e:	b084      	sub	sp, #16
   21f70:	af00      	add	r7, sp, #0
   21f72:	0002      	movs	r2, r0
   21f74:	1dfb      	adds	r3, r7, #7
   21f76:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
   21f78:	1dfb      	adds	r3, r7, #7
   21f7a:	781b      	ldrb	r3, [r3, #0]
   21f7c:	0018      	movs	r0, r3
   21f7e:	4b0b      	ldr	r3, [pc, #44]	; (21fac <extint_chan_is_detected+0x40>)
   21f80:	4798      	blx	r3
   21f82:	0003      	movs	r3, r0
   21f84:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
   21f86:	1dfb      	adds	r3, r7, #7
   21f88:	781b      	ldrb	r3, [r3, #0]
   21f8a:	221f      	movs	r2, #31
   21f8c:	4013      	ands	r3, r2
   21f8e:	2201      	movs	r2, #1
   21f90:	409a      	lsls	r2, r3
   21f92:	0013      	movs	r3, r2
   21f94:	60bb      	str	r3, [r7, #8]
	return (eic_module->INTFLAG.reg & eic_mask);
   21f96:	68fb      	ldr	r3, [r7, #12]
   21f98:	691b      	ldr	r3, [r3, #16]
   21f9a:	68ba      	ldr	r2, [r7, #8]
   21f9c:	4013      	ands	r3, r2
   21f9e:	1e5a      	subs	r2, r3, #1
   21fa0:	4193      	sbcs	r3, r2
   21fa2:	b2db      	uxtb	r3, r3
}
   21fa4:	0018      	movs	r0, r3
   21fa6:	46bd      	mov	sp, r7
   21fa8:	b004      	add	sp, #16
   21faa:	bd80      	pop	{r7, pc}
   21fac:	00021f21 	.word	0x00021f21

00021fb0 <extint_chan_clear_detected>:
{
   21fb0:	b580      	push	{r7, lr}
   21fb2:	b084      	sub	sp, #16
   21fb4:	af00      	add	r7, sp, #0
   21fb6:	0002      	movs	r2, r0
   21fb8:	1dfb      	adds	r3, r7, #7
   21fba:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
   21fbc:	1dfb      	adds	r3, r7, #7
   21fbe:	781b      	ldrb	r3, [r3, #0]
   21fc0:	0018      	movs	r0, r3
   21fc2:	4b09      	ldr	r3, [pc, #36]	; (21fe8 <extint_chan_clear_detected+0x38>)
   21fc4:	4798      	blx	r3
   21fc6:	0003      	movs	r3, r0
   21fc8:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
   21fca:	1dfb      	adds	r3, r7, #7
   21fcc:	781b      	ldrb	r3, [r3, #0]
   21fce:	221f      	movs	r2, #31
   21fd0:	4013      	ands	r3, r2
   21fd2:	2201      	movs	r2, #1
   21fd4:	409a      	lsls	r2, r3
   21fd6:	0013      	movs	r3, r2
   21fd8:	60bb      	str	r3, [r7, #8]
	eic_module->INTFLAG.reg = eic_mask;
   21fda:	68fb      	ldr	r3, [r7, #12]
   21fdc:	68ba      	ldr	r2, [r7, #8]
   21fde:	611a      	str	r2, [r3, #16]
}
   21fe0:	46c0      	nop			; (mov r8, r8)
   21fe2:	46bd      	mov	sp, r7
   21fe4:	b004      	add	sp, #16
   21fe6:	bd80      	pop	{r7, pc}
   21fe8:	00021f21 	.word	0x00021f21

00021fec <extint_register_callback>:
 */
enum status_code extint_register_callback(
	const extint_callback_t callback,
	const uint8_t channel,
	const enum extint_callback_type type)
{
   21fec:	b580      	push	{r7, lr}
   21fee:	b082      	sub	sp, #8
   21ff0:	af00      	add	r7, sp, #0
   21ff2:	6078      	str	r0, [r7, #4]
   21ff4:	0008      	movs	r0, r1
   21ff6:	0011      	movs	r1, r2
   21ff8:	1cfb      	adds	r3, r7, #3
   21ffa:	1c02      	adds	r2, r0, #0
   21ffc:	701a      	strb	r2, [r3, #0]
   21ffe:	1cbb      	adds	r3, r7, #2
   22000:	1c0a      	adds	r2, r1, #0
   22002:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
   22004:	1cbb      	adds	r3, r7, #2
   22006:	781b      	ldrb	r3, [r3, #0]
   22008:	2b00      	cmp	r3, #0
   2200a:	d001      	beq.n	22010 <extint_register_callback+0x24>
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
   2200c:	2317      	movs	r3, #23
   2200e:	e019      	b.n	22044 <extint_register_callback+0x58>
	}

	if (_extint_dev.callbacks[channel] == NULL) {
   22010:	1cfb      	adds	r3, r7, #3
   22012:	781a      	ldrb	r2, [r3, #0]
   22014:	4b0d      	ldr	r3, [pc, #52]	; (2204c <extint_register_callback+0x60>)
   22016:	0092      	lsls	r2, r2, #2
   22018:	58d3      	ldr	r3, [r2, r3]
   2201a:	2b00      	cmp	r3, #0
   2201c:	d107      	bne.n	2202e <extint_register_callback+0x42>
		_extint_dev.callbacks[channel] = callback;
   2201e:	1cfb      	adds	r3, r7, #3
   22020:	781a      	ldrb	r2, [r3, #0]
   22022:	4b0a      	ldr	r3, [pc, #40]	; (2204c <extint_register_callback+0x60>)
   22024:	0092      	lsls	r2, r2, #2
   22026:	6879      	ldr	r1, [r7, #4]
   22028:	50d1      	str	r1, [r2, r3]
		return STATUS_OK;
   2202a:	2300      	movs	r3, #0
   2202c:	e00a      	b.n	22044 <extint_register_callback+0x58>
	} else if (_extint_dev.callbacks[channel] == callback) {
   2202e:	1cfb      	adds	r3, r7, #3
   22030:	781a      	ldrb	r2, [r3, #0]
   22032:	4b06      	ldr	r3, [pc, #24]	; (2204c <extint_register_callback+0x60>)
   22034:	0092      	lsls	r2, r2, #2
   22036:	58d2      	ldr	r2, [r2, r3]
   22038:	687b      	ldr	r3, [r7, #4]
   2203a:	429a      	cmp	r2, r3
   2203c:	d101      	bne.n	22042 <extint_register_callback+0x56>
		return STATUS_OK;
   2203e:	2300      	movs	r3, #0
   22040:	e000      	b.n	22044 <extint_register_callback+0x58>
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
   22042:	231d      	movs	r3, #29
}
   22044:	0018      	movs	r0, r3
   22046:	46bd      	mov	sp, r7
   22048:	b002      	add	sp, #8
   2204a:	bd80      	pop	{r7, pc}
   2204c:	200008e0 	.word	0x200008e0

00022050 <extint_chan_enable_callback>:
 * \retval STATUS_ERR_INVALID_ARG  If an invalid callback type was supplied
 */
enum status_code extint_chan_enable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
   22050:	b580      	push	{r7, lr}
   22052:	b084      	sub	sp, #16
   22054:	af00      	add	r7, sp, #0
   22056:	0002      	movs	r2, r0
   22058:	1dfb      	adds	r3, r7, #7
   2205a:	701a      	strb	r2, [r3, #0]
   2205c:	1dbb      	adds	r3, r7, #6
   2205e:	1c0a      	adds	r2, r1, #0
   22060:	701a      	strb	r2, [r3, #0]
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
   22062:	1dbb      	adds	r3, r7, #6
   22064:	781b      	ldrb	r3, [r3, #0]
   22066:	2b00      	cmp	r3, #0
   22068:	d10e      	bne.n	22088 <extint_chan_enable_callback+0x38>
		Eic *const eic = _extint_get_eic_from_channel(channel);
   2206a:	1dfb      	adds	r3, r7, #7
   2206c:	781b      	ldrb	r3, [r3, #0]
   2206e:	0018      	movs	r0, r3
   22070:	4b08      	ldr	r3, [pc, #32]	; (22094 <extint_chan_enable_callback+0x44>)
   22072:	4798      	blx	r3
   22074:	0003      	movs	r3, r0
   22076:	60fb      	str	r3, [r7, #12]

		eic->INTENSET.reg = (1UL << channel);
   22078:	1dfb      	adds	r3, r7, #7
   2207a:	781b      	ldrb	r3, [r3, #0]
   2207c:	2201      	movs	r2, #1
   2207e:	409a      	lsls	r2, r3
   22080:	68fb      	ldr	r3, [r7, #12]
   22082:	60da      	str	r2, [r3, #12]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
   22084:	2300      	movs	r3, #0
   22086:	e000      	b.n	2208a <extint_chan_enable_callback+0x3a>
		return STATUS_ERR_INVALID_ARG;
   22088:	2317      	movs	r3, #23
}
   2208a:	0018      	movs	r0, r3
   2208c:	46bd      	mov	sp, r7
   2208e:	b004      	add	sp, #16
   22090:	bd80      	pop	{r7, pc}
   22092:	46c0      	nop			; (mov r8, r8)
   22094:	00021f21 	.word	0x00021f21

00022098 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
   22098:	b580      	push	{r7, lr}
   2209a:	af00      	add	r7, sp, #0
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
   2209c:	4b15      	ldr	r3, [pc, #84]	; (220f4 <EIC_Handler+0x5c>)
   2209e:	2200      	movs	r2, #0
   220a0:	701a      	strb	r2, [r3, #0]
   220a2:	e020      	b.n	220e6 <EIC_Handler+0x4e>
		if (extint_chan_is_detected(_current_channel)) {
   220a4:	4b13      	ldr	r3, [pc, #76]	; (220f4 <EIC_Handler+0x5c>)
   220a6:	781b      	ldrb	r3, [r3, #0]
   220a8:	0018      	movs	r0, r3
   220aa:	4b13      	ldr	r3, [pc, #76]	; (220f8 <EIC_Handler+0x60>)
   220ac:	4798      	blx	r3
   220ae:	1e03      	subs	r3, r0, #0
   220b0:	d013      	beq.n	220da <EIC_Handler+0x42>
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
   220b2:	4b10      	ldr	r3, [pc, #64]	; (220f4 <EIC_Handler+0x5c>)
   220b4:	781b      	ldrb	r3, [r3, #0]
   220b6:	0018      	movs	r0, r3
   220b8:	4b10      	ldr	r3, [pc, #64]	; (220fc <EIC_Handler+0x64>)
   220ba:	4798      	blx	r3
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
   220bc:	4b0d      	ldr	r3, [pc, #52]	; (220f4 <EIC_Handler+0x5c>)
   220be:	781b      	ldrb	r3, [r3, #0]
   220c0:	001a      	movs	r2, r3
   220c2:	4b0f      	ldr	r3, [pc, #60]	; (22100 <EIC_Handler+0x68>)
   220c4:	0092      	lsls	r2, r2, #2
   220c6:	58d3      	ldr	r3, [r2, r3]
   220c8:	2b00      	cmp	r3, #0
   220ca:	d006      	beq.n	220da <EIC_Handler+0x42>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
   220cc:	4b09      	ldr	r3, [pc, #36]	; (220f4 <EIC_Handler+0x5c>)
   220ce:	781b      	ldrb	r3, [r3, #0]
   220d0:	001a      	movs	r2, r3
   220d2:	4b0b      	ldr	r3, [pc, #44]	; (22100 <EIC_Handler+0x68>)
   220d4:	0092      	lsls	r2, r2, #2
   220d6:	58d3      	ldr	r3, [r2, r3]
   220d8:	4798      	blx	r3
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
   220da:	4b06      	ldr	r3, [pc, #24]	; (220f4 <EIC_Handler+0x5c>)
   220dc:	781b      	ldrb	r3, [r3, #0]
   220de:	3301      	adds	r3, #1
   220e0:	b2da      	uxtb	r2, r3
   220e2:	4b04      	ldr	r3, [pc, #16]	; (220f4 <EIC_Handler+0x5c>)
   220e4:	701a      	strb	r2, [r3, #0]
   220e6:	4b03      	ldr	r3, [pc, #12]	; (220f4 <EIC_Handler+0x5c>)
   220e8:	781b      	ldrb	r3, [r3, #0]
   220ea:	2b0f      	cmp	r3, #15
   220ec:	d9da      	bls.n	220a4 <EIC_Handler+0xc>
			}
		}
	}
}
   220ee:	46c0      	nop			; (mov r8, r8)
   220f0:	46bd      	mov	sp, r7
   220f2:	bd80      	pop	{r7, pc}
   220f4:	20000960 	.word	0x20000960
   220f8:	00021f6d 	.word	0x00021f6d
   220fc:	00021fb1 	.word	0x00021fb1
   22100:	200008e0 	.word	0x200008e0

00022104 <EVSYS_Handler>:

	return STATUS_OK;
}

void EVSYS_Handler(void)
{
   22104:	b580      	push	{r7, lr}
   22106:	b082      	sub	sp, #8
   22108:	af00      	add	r7, sp, #0
	struct events_hook *current_hook = _events_inst.hook_list;
   2210a:	4b15      	ldr	r3, [pc, #84]	; (22160 <EVSYS_Handler+0x5c>)
   2210c:	691b      	ldr	r3, [r3, #16]
   2210e:	607b      	str	r3, [r7, #4]
	uint32_t flag;

	/* Synch the interrupt flag buffer with the hardware register */
	flag = EVSYS->INTFLAG.reg;
   22110:	4b14      	ldr	r3, [pc, #80]	; (22164 <EVSYS_Handler+0x60>)
   22112:	699b      	ldr	r3, [r3, #24]
   22114:	603b      	str	r3, [r7, #0]
	_events_inst.interrupt_flag_buffer |= flag;
   22116:	4b12      	ldr	r3, [pc, #72]	; (22160 <EVSYS_Handler+0x5c>)
   22118:	689a      	ldr	r2, [r3, #8]
   2211a:	683b      	ldr	r3, [r7, #0]
   2211c:	431a      	orrs	r2, r3
   2211e:	4b10      	ldr	r3, [pc, #64]	; (22160 <EVSYS_Handler+0x5c>)
   22120:	609a      	str	r2, [r3, #8]
	/* Clear all hardware interrupt flags */
	EVSYS->INTFLAG.reg = _EVENTS_INTFLAGS_MASK;
   22122:	4b10      	ldr	r3, [pc, #64]	; (22164 <EVSYS_Handler+0x60>)
   22124:	4a10      	ldr	r2, [pc, #64]	; (22168 <EVSYS_Handler+0x64>)
   22126:	619a      	str	r2, [r3, #24]

	/* Traverse the linked list */
	while (current_hook != NULL) {
   22128:	e008      	b.n	2213c <EVSYS_Handler+0x38>
		current_hook->hook_func(current_hook->resource);
   2212a:	687b      	ldr	r3, [r7, #4]
   2212c:	685a      	ldr	r2, [r3, #4]
   2212e:	687b      	ldr	r3, [r7, #4]
   22130:	681b      	ldr	r3, [r3, #0]
   22132:	0018      	movs	r0, r3
   22134:	4790      	blx	r2
		current_hook = current_hook->next;
   22136:	687b      	ldr	r3, [r7, #4]
   22138:	689b      	ldr	r3, [r3, #8]
   2213a:	607b      	str	r3, [r7, #4]
	while (current_hook != NULL) {
   2213c:	687b      	ldr	r3, [r7, #4]
   2213e:	2b00      	cmp	r3, #0
   22140:	d1f3      	bne.n	2212a <EVSYS_Handler+0x26>
	}

	/* Clear acknowledged interrupt sources from the interrupt flag buffer */
	flag = _events_inst.interrupt_flag_ack_buffer;
   22142:	4b07      	ldr	r3, [pc, #28]	; (22160 <EVSYS_Handler+0x5c>)
   22144:	68db      	ldr	r3, [r3, #12]
   22146:	603b      	str	r3, [r7, #0]
	_events_inst.interrupt_flag_buffer &= ~flag;
   22148:	4b05      	ldr	r3, [pc, #20]	; (22160 <EVSYS_Handler+0x5c>)
   2214a:	689b      	ldr	r3, [r3, #8]
   2214c:	683a      	ldr	r2, [r7, #0]
   2214e:	43d2      	mvns	r2, r2
   22150:	401a      	ands	r2, r3
   22152:	4b03      	ldr	r3, [pc, #12]	; (22160 <EVSYS_Handler+0x5c>)
   22154:	609a      	str	r2, [r3, #8]
}
   22156:	46c0      	nop			; (mov r8, r8)
   22158:	46bd      	mov	sp, r7
   2215a:	b002      	add	sp, #8
   2215c:	bd80      	pop	{r7, pc}
   2215e:	46c0      	nop			; (mov r8, r8)
   22160:	20000014 	.word	0x20000014
   22164:	42000400 	.word	0x42000400
   22168:	0f0fffff 	.word	0x0f0fffff

0002216c <system_gclk_chan_get_config_defaults>:
{
   2216c:	b580      	push	{r7, lr}
   2216e:	b082      	sub	sp, #8
   22170:	af00      	add	r7, sp, #0
   22172:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   22174:	687b      	ldr	r3, [r7, #4]
   22176:	2200      	movs	r2, #0
   22178:	701a      	strb	r2, [r3, #0]
}
   2217a:	46c0      	nop			; (mov r8, r8)
   2217c:	46bd      	mov	sp, r7
   2217e:	b002      	add	sp, #8
   22180:	bd80      	pop	{r7, pc}
	...

00022184 <system_apb_clock_set_mask>:
{
   22184:	b580      	push	{r7, lr}
   22186:	b082      	sub	sp, #8
   22188:	af00      	add	r7, sp, #0
   2218a:	0002      	movs	r2, r0
   2218c:	6039      	str	r1, [r7, #0]
   2218e:	1dfb      	adds	r3, r7, #7
   22190:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   22192:	1dfb      	adds	r3, r7, #7
   22194:	781b      	ldrb	r3, [r3, #0]
   22196:	2b01      	cmp	r3, #1
   22198:	d00a      	beq.n	221b0 <system_apb_clock_set_mask+0x2c>
   2219a:	2b02      	cmp	r3, #2
   2219c:	d00f      	beq.n	221be <system_apb_clock_set_mask+0x3a>
   2219e:	2b00      	cmp	r3, #0
   221a0:	d114      	bne.n	221cc <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   221a2:	4b0e      	ldr	r3, [pc, #56]	; (221dc <system_apb_clock_set_mask+0x58>)
   221a4:	4a0d      	ldr	r2, [pc, #52]	; (221dc <system_apb_clock_set_mask+0x58>)
   221a6:	6991      	ldr	r1, [r2, #24]
   221a8:	683a      	ldr	r2, [r7, #0]
   221aa:	430a      	orrs	r2, r1
   221ac:	619a      	str	r2, [r3, #24]
			break;
   221ae:	e00f      	b.n	221d0 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   221b0:	4b0a      	ldr	r3, [pc, #40]	; (221dc <system_apb_clock_set_mask+0x58>)
   221b2:	4a0a      	ldr	r2, [pc, #40]	; (221dc <system_apb_clock_set_mask+0x58>)
   221b4:	69d1      	ldr	r1, [r2, #28]
   221b6:	683a      	ldr	r2, [r7, #0]
   221b8:	430a      	orrs	r2, r1
   221ba:	61da      	str	r2, [r3, #28]
			break;
   221bc:	e008      	b.n	221d0 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   221be:	4b07      	ldr	r3, [pc, #28]	; (221dc <system_apb_clock_set_mask+0x58>)
   221c0:	4a06      	ldr	r2, [pc, #24]	; (221dc <system_apb_clock_set_mask+0x58>)
   221c2:	6a11      	ldr	r1, [r2, #32]
   221c4:	683a      	ldr	r2, [r7, #0]
   221c6:	430a      	orrs	r2, r1
   221c8:	621a      	str	r2, [r3, #32]
			break;
   221ca:	e001      	b.n	221d0 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   221cc:	2317      	movs	r3, #23
   221ce:	e000      	b.n	221d2 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   221d0:	2300      	movs	r3, #0
}
   221d2:	0018      	movs	r0, r3
   221d4:	46bd      	mov	sp, r7
   221d6:	b002      	add	sp, #8
   221d8:	bd80      	pop	{r7, pc}
   221da:	46c0      	nop			; (mov r8, r8)
   221dc:	40000400 	.word	0x40000400

000221e0 <system_interrupt_enter_critical_section>:
{
   221e0:	b580      	push	{r7, lr}
   221e2:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
   221e4:	4b02      	ldr	r3, [pc, #8]	; (221f0 <system_interrupt_enter_critical_section+0x10>)
   221e6:	4798      	blx	r3
}
   221e8:	46c0      	nop			; (mov r8, r8)
   221ea:	46bd      	mov	sp, r7
   221ec:	bd80      	pop	{r7, pc}
   221ee:	46c0      	nop			; (mov r8, r8)
   221f0:	000237ed 	.word	0x000237ed

000221f4 <system_interrupt_leave_critical_section>:
{
   221f4:	b580      	push	{r7, lr}
   221f6:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
   221f8:	4b02      	ldr	r3, [pc, #8]	; (22204 <system_interrupt_leave_critical_section+0x10>)
   221fa:	4798      	blx	r3
}
   221fc:	46c0      	nop			; (mov r8, r8)
   221fe:	46bd      	mov	sp, r7
   22200:	bd80      	pop	{r7, pc}
   22202:	46c0      	nop			; (mov r8, r8)
   22204:	00023841 	.word	0x00023841

00022208 <_events_find_first_free_channel_and_allocate>:

	return pos;
}

static uint8_t _events_find_first_free_channel_and_allocate(void)
{
   22208:	b580      	push	{r7, lr}
   2220a:	b084      	sub	sp, #16
   2220c:	af00      	add	r7, sp, #0
	uint8_t count;
	uint32_t tmp;
	bool allocated = false;
   2220e:	1dfb      	adds	r3, r7, #7
   22210:	2200      	movs	r2, #0
   22212:	701a      	strb	r2, [r3, #0]

	system_interrupt_enter_critical_section();
   22214:	4b21      	ldr	r3, [pc, #132]	; (2229c <_events_find_first_free_channel_and_allocate+0x94>)
   22216:	4798      	blx	r3

	tmp = _events_inst.allocated_channels;
   22218:	4b21      	ldr	r3, [pc, #132]	; (222a0 <_events_find_first_free_channel_and_allocate+0x98>)
   2221a:	681b      	ldr	r3, [r3, #0]
   2221c:	60bb      	str	r3, [r7, #8]

	for(count = 0; count < EVSYS_CHANNELS; ++count) {
   2221e:	230f      	movs	r3, #15
   22220:	18fb      	adds	r3, r7, r3
   22222:	2200      	movs	r2, #0
   22224:	701a      	strb	r2, [r3, #0]
   22226:	e022      	b.n	2226e <_events_find_first_free_channel_and_allocate+0x66>

		if(!(tmp & 0x00000001)) {
   22228:	68bb      	ldr	r3, [r7, #8]
   2222a:	2201      	movs	r2, #1
   2222c:	4013      	ands	r3, r2
   2222e:	d114      	bne.n	2225a <_events_find_first_free_channel_and_allocate+0x52>
			/* If free channel found, set as allocated and return number */

			_events_inst.allocated_channels |= 1 << count;
   22230:	4b1b      	ldr	r3, [pc, #108]	; (222a0 <_events_find_first_free_channel_and_allocate+0x98>)
   22232:	681b      	ldr	r3, [r3, #0]
   22234:	220f      	movs	r2, #15
   22236:	18ba      	adds	r2, r7, r2
   22238:	7812      	ldrb	r2, [r2, #0]
   2223a:	2101      	movs	r1, #1
   2223c:	4091      	lsls	r1, r2
   2223e:	000a      	movs	r2, r1
   22240:	431a      	orrs	r2, r3
   22242:	4b17      	ldr	r3, [pc, #92]	; (222a0 <_events_find_first_free_channel_and_allocate+0x98>)
   22244:	601a      	str	r2, [r3, #0]
			_events_inst.free_channels--;
   22246:	4b16      	ldr	r3, [pc, #88]	; (222a0 <_events_find_first_free_channel_and_allocate+0x98>)
   22248:	791b      	ldrb	r3, [r3, #4]
   2224a:	3b01      	subs	r3, #1
   2224c:	b2da      	uxtb	r2, r3
   2224e:	4b14      	ldr	r3, [pc, #80]	; (222a0 <_events_find_first_free_channel_and_allocate+0x98>)
   22250:	711a      	strb	r2, [r3, #4]
			allocated = true;
   22252:	1dfb      	adds	r3, r7, #7
   22254:	2201      	movs	r2, #1
   22256:	701a      	strb	r2, [r3, #0]

			break;
   22258:	e00e      	b.n	22278 <_events_find_first_free_channel_and_allocate+0x70>

		}

		tmp = tmp >> 1;
   2225a:	68bb      	ldr	r3, [r7, #8]
   2225c:	085b      	lsrs	r3, r3, #1
   2225e:	60bb      	str	r3, [r7, #8]
	for(count = 0; count < EVSYS_CHANNELS; ++count) {
   22260:	230f      	movs	r3, #15
   22262:	18fb      	adds	r3, r7, r3
   22264:	220f      	movs	r2, #15
   22266:	18ba      	adds	r2, r7, r2
   22268:	7812      	ldrb	r2, [r2, #0]
   2226a:	3201      	adds	r2, #1
   2226c:	701a      	strb	r2, [r3, #0]
   2226e:	230f      	movs	r3, #15
   22270:	18fb      	adds	r3, r7, r3
   22272:	781b      	ldrb	r3, [r3, #0]
   22274:	2b0b      	cmp	r3, #11
   22276:	d9d7      	bls.n	22228 <_events_find_first_free_channel_and_allocate+0x20>
	}

	system_interrupt_leave_critical_section();
   22278:	4b0a      	ldr	r3, [pc, #40]	; (222a4 <_events_find_first_free_channel_and_allocate+0x9c>)
   2227a:	4798      	blx	r3

	if(!allocated) {
   2227c:	1dfb      	adds	r3, r7, #7
   2227e:	781b      	ldrb	r3, [r3, #0]
   22280:	2201      	movs	r2, #1
   22282:	4053      	eors	r3, r2
   22284:	b2db      	uxtb	r3, r3
   22286:	2b00      	cmp	r3, #0
   22288:	d001      	beq.n	2228e <_events_find_first_free_channel_and_allocate+0x86>
		return EVENTS_INVALID_CHANNEL;
   2228a:	23ff      	movs	r3, #255	; 0xff
   2228c:	e002      	b.n	22294 <_events_find_first_free_channel_and_allocate+0x8c>
	} else {
		return count;
   2228e:	230f      	movs	r3, #15
   22290:	18fb      	adds	r3, r7, r3
   22292:	781b      	ldrb	r3, [r3, #0]
	}
}
   22294:	0018      	movs	r0, r3
   22296:	46bd      	mov	sp, r7
   22298:	b004      	add	sp, #16
   2229a:	bd80      	pop	{r7, pc}
   2229c:	000221e1 	.word	0x000221e1
   222a0:	20000014 	.word	0x20000014
   222a4:	000221f5 	.word	0x000221f5

000222a8 <_system_events_init>:
#if defined(__GNUC__)
#  pragma GCC diagnostic push
#  pragma GCC diagnostic ignored "-Wmissing-prototypes"
#endif
void _system_events_init(void)
{
   222a8:	b580      	push	{r7, lr}
   222aa:	af00      	add	r7, sp, #0
	/* Enable EVSYS register interface */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_EVSYS);
   222ac:	2102      	movs	r1, #2
   222ae:	2002      	movs	r0, #2
   222b0:	4b07      	ldr	r3, [pc, #28]	; (222d0 <_system_events_init+0x28>)
   222b2:	4798      	blx	r3

	/* Make sure the EVSYS module is properly reset */
	EVSYS->CTRL.reg = EVSYS_CTRL_SWRST;
   222b4:	4b07      	ldr	r3, [pc, #28]	; (222d4 <_system_events_init+0x2c>)
   222b6:	2201      	movs	r2, #1
   222b8:	701a      	strb	r2, [r3, #0]

	while (EVSYS->CTRL.reg & EVSYS_CTRL_SWRST) {
   222ba:	46c0      	nop			; (mov r8, r8)
   222bc:	4b05      	ldr	r3, [pc, #20]	; (222d4 <_system_events_init+0x2c>)
   222be:	781b      	ldrb	r3, [r3, #0]
   222c0:	b2db      	uxtb	r3, r3
   222c2:	001a      	movs	r2, r3
   222c4:	2301      	movs	r3, #1
   222c6:	4013      	ands	r3, r2
   222c8:	d1f8      	bne.n	222bc <_system_events_init+0x14>
	}
}
   222ca:	46c0      	nop			; (mov r8, r8)
   222cc:	46bd      	mov	sp, r7
   222ce:	bd80      	pop	{r7, pc}
   222d0:	00022185 	.word	0x00022185
   222d4:	42000400 	.word	0x42000400

000222d8 <events_get_config_defaults>:
#if defined(__GNUC__)
#  pragma GCC diagnostic pop
#endif

void events_get_config_defaults(struct events_config *config)
{
   222d8:	b580      	push	{r7, lr}
   222da:	b082      	sub	sp, #8
   222dc:	af00      	add	r7, sp, #0
   222de:	6078      	str	r0, [r7, #4]
	/* Check that config is something other than NULL */
	Assert(config);

	config->edge_detect  = EVENTS_EDGE_DETECT_RISING;
   222e0:	687b      	ldr	r3, [r7, #4]
   222e2:	2201      	movs	r2, #1
   222e4:	701a      	strb	r2, [r3, #0]
	config->path         = EVENTS_PATH_SYNCHRONOUS;
   222e6:	687b      	ldr	r3, [r7, #4]
   222e8:	2200      	movs	r2, #0
   222ea:	705a      	strb	r2, [r3, #1]
	config->generator    = EVSYS_ID_GEN_NONE;
   222ec:	687b      	ldr	r3, [r7, #4]
   222ee:	2200      	movs	r2, #0
   222f0:	709a      	strb	r2, [r3, #2]
	config->clock_source = GCLK_GENERATOR_0;
   222f2:	687b      	ldr	r3, [r7, #4]
   222f4:	2200      	movs	r2, #0
   222f6:	70da      	strb	r2, [r3, #3]
}
   222f8:	46c0      	nop			; (mov r8, r8)
   222fa:	46bd      	mov	sp, r7
   222fc:	b002      	add	sp, #8
   222fe:	bd80      	pop	{r7, pc}

00022300 <events_allocate>:

enum status_code events_allocate(
		struct events_resource *resource,
		struct events_config *config)
{
   22300:	b590      	push	{r4, r7, lr}
   22302:	b085      	sub	sp, #20
   22304:	af00      	add	r7, sp, #0
   22306:	6078      	str	r0, [r7, #4]
   22308:	6039      	str	r1, [r7, #0]
	uint8_t new_channel;

	Assert(resource);

	new_channel = _events_find_first_free_channel_and_allocate();
   2230a:	230f      	movs	r3, #15
   2230c:	18fc      	adds	r4, r7, r3
   2230e:	4b2a      	ldr	r3, [pc, #168]	; (223b8 <events_allocate+0xb8>)
   22310:	4798      	blx	r3
   22312:	0003      	movs	r3, r0
   22314:	7023      	strb	r3, [r4, #0]

	if(new_channel == EVENTS_INVALID_CHANNEL) {
   22316:	230f      	movs	r3, #15
   22318:	18fb      	adds	r3, r7, r3
   2231a:	781b      	ldrb	r3, [r3, #0]
   2231c:	2bff      	cmp	r3, #255	; 0xff
   2231e:	d101      	bne.n	22324 <events_allocate+0x24>
		return STATUS_ERR_NOT_FOUND;
   22320:	2314      	movs	r3, #20
   22322:	e045      	b.n	223b0 <events_allocate+0xb0>
	}

	resource->channel = new_channel;
   22324:	687b      	ldr	r3, [r7, #4]
   22326:	220f      	movs	r2, #15
   22328:	18ba      	adds	r2, r7, r2
   2232a:	7812      	ldrb	r2, [r2, #0]
   2232c:	701a      	strb	r2, [r3, #0]

	if (config->path != EVENTS_PATH_ASYNCHRONOUS) {
   2232e:	683b      	ldr	r3, [r7, #0]
   22330:	785b      	ldrb	r3, [r3, #1]
   22332:	2b02      	cmp	r3, #2
   22334:	d01c      	beq.n	22370 <events_allocate+0x70>
		/* Set up a GLCK channel to use with the specific channel */
		struct system_gclk_chan_config gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   22336:	230c      	movs	r3, #12
   22338:	18fb      	adds	r3, r7, r3
   2233a:	0018      	movs	r0, r3
   2233c:	4b1f      	ldr	r3, [pc, #124]	; (223bc <events_allocate+0xbc>)
   2233e:	4798      	blx	r3
		gclk_chan_conf.source_generator =
				(enum gclk_generator)config->clock_source;
   22340:	683b      	ldr	r3, [r7, #0]
   22342:	78da      	ldrb	r2, [r3, #3]
		gclk_chan_conf.source_generator =
   22344:	230c      	movs	r3, #12
   22346:	18fb      	adds	r3, r7, r3
   22348:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(EVSYS_GCLK_ID_0 + new_channel, &gclk_chan_conf);
   2234a:	230f      	movs	r3, #15
   2234c:	18fb      	adds	r3, r7, r3
   2234e:	781b      	ldrb	r3, [r3, #0]
   22350:	3307      	adds	r3, #7
   22352:	b2db      	uxtb	r3, r3
   22354:	220c      	movs	r2, #12
   22356:	18ba      	adds	r2, r7, r2
   22358:	0011      	movs	r1, r2
   2235a:	0018      	movs	r0, r3
   2235c:	4b18      	ldr	r3, [pc, #96]	; (223c0 <events_allocate+0xc0>)
   2235e:	4798      	blx	r3
		system_gclk_chan_enable(EVSYS_GCLK_ID_0 + new_channel);
   22360:	230f      	movs	r3, #15
   22362:	18fb      	adds	r3, r7, r3
   22364:	781b      	ldrb	r3, [r3, #0]
   22366:	3307      	adds	r3, #7
   22368:	b2db      	uxtb	r3, r3
   2236a:	0018      	movs	r0, r3
   2236c:	4b15      	ldr	r3, [pc, #84]	; (223c4 <events_allocate+0xc4>)
   2236e:	4798      	blx	r3
	}

	/* Save channel setting and configure it after user multiplexer */
	resource->channel_reg = EVSYS_CHANNEL_CHANNEL(new_channel)       |
   22370:	230f      	movs	r3, #15
   22372:	18fb      	adds	r3, r7, r3
   22374:	781b      	ldrb	r3, [r3, #0]
   22376:	220f      	movs	r2, #15
   22378:	401a      	ands	r2, r3
			     EVSYS_CHANNEL_EVGEN(config->generator)   |
   2237a:	683b      	ldr	r3, [r7, #0]
   2237c:	789b      	ldrb	r3, [r3, #2]
   2237e:	041b      	lsls	r3, r3, #16
   22380:	0019      	movs	r1, r3
   22382:	23fe      	movs	r3, #254	; 0xfe
   22384:	03db      	lsls	r3, r3, #15
   22386:	400b      	ands	r3, r1
	resource->channel_reg = EVSYS_CHANNEL_CHANNEL(new_channel)       |
   22388:	431a      	orrs	r2, r3
			     EVSYS_CHANNEL_PATH(config->path)         |
   2238a:	683b      	ldr	r3, [r7, #0]
   2238c:	785b      	ldrb	r3, [r3, #1]
   2238e:	061b      	lsls	r3, r3, #24
   22390:	0019      	movs	r1, r3
   22392:	23c0      	movs	r3, #192	; 0xc0
   22394:	049b      	lsls	r3, r3, #18
   22396:	400b      	ands	r3, r1
			     EVSYS_CHANNEL_EVGEN(config->generator)   |
   22398:	431a      	orrs	r2, r3
			     EVSYS_CHANNEL_EDGSEL(config->edge_detect);
   2239a:	683b      	ldr	r3, [r7, #0]
   2239c:	781b      	ldrb	r3, [r3, #0]
   2239e:	069b      	lsls	r3, r3, #26
   223a0:	0019      	movs	r1, r3
   223a2:	23c0      	movs	r3, #192	; 0xc0
   223a4:	051b      	lsls	r3, r3, #20
   223a6:	400b      	ands	r3, r1
			     EVSYS_CHANNEL_PATH(config->path)         |
   223a8:	431a      	orrs	r2, r3
	resource->channel_reg = EVSYS_CHANNEL_CHANNEL(new_channel)       |
   223aa:	687b      	ldr	r3, [r7, #4]
   223ac:	605a      	str	r2, [r3, #4]


	return STATUS_OK;
   223ae:	2300      	movs	r3, #0
}
   223b0:	0018      	movs	r0, r3
   223b2:	46bd      	mov	sp, r7
   223b4:	b005      	add	sp, #20
   223b6:	bd90      	pop	{r4, r7, pc}
   223b8:	00022209 	.word	0x00022209
   223bc:	0002216d 	.word	0x0002216d
   223c0:	000245a5 	.word	0x000245a5
   223c4:	000245e9 	.word	0x000245e9

000223c8 <events_attach_user>:

	return false;
}

enum status_code events_attach_user(struct events_resource *resource, uint8_t user_id)
{
   223c8:	b580      	push	{r7, lr}
   223ca:	b082      	sub	sp, #8
   223cc:	af00      	add	r7, sp, #0
   223ce:	6078      	str	r0, [r7, #4]
   223d0:	000a      	movs	r2, r1
   223d2:	1cfb      	adds	r3, r7, #3
   223d4:	701a      	strb	r2, [r3, #0]
	Assert(resource);

	/* First configure user multiplexer: channel number is n + 1 */
	EVSYS->USER.reg = EVSYS_USER_CHANNEL(resource->channel + 1) |
   223d6:	490f      	ldr	r1, [pc, #60]	; (22414 <events_attach_user+0x4c>)
   223d8:	687b      	ldr	r3, [r7, #4]
   223da:	781b      	ldrb	r3, [r3, #0]
   223dc:	b29b      	uxth	r3, r3
   223de:	3301      	adds	r3, #1
   223e0:	b29b      	uxth	r3, r3
   223e2:	021b      	lsls	r3, r3, #8
   223e4:	b29a      	uxth	r2, r3
   223e6:	23f8      	movs	r3, #248	; 0xf8
   223e8:	015b      	lsls	r3, r3, #5
   223ea:	4013      	ands	r3, r2
   223ec:	b29a      	uxth	r2, r3
			  EVSYS_USER_USER(user_id);
   223ee:	1cfb      	adds	r3, r7, #3
   223f0:	781b      	ldrb	r3, [r3, #0]
   223f2:	b29b      	uxth	r3, r3
   223f4:	201f      	movs	r0, #31
   223f6:	4003      	ands	r3, r0
   223f8:	b29b      	uxth	r3, r3
	EVSYS->USER.reg = EVSYS_USER_CHANNEL(resource->channel + 1) |
   223fa:	4313      	orrs	r3, r2
   223fc:	b29b      	uxth	r3, r3
   223fe:	810b      	strh	r3, [r1, #8]

	/* Then configure the channel */
	EVSYS->CHANNEL.reg = resource->channel_reg;
   22400:	4a04      	ldr	r2, [pc, #16]	; (22414 <events_attach_user+0x4c>)
   22402:	687b      	ldr	r3, [r7, #4]
   22404:	685b      	ldr	r3, [r3, #4]
   22406:	6053      	str	r3, [r2, #4]

	return STATUS_OK;
   22408:	2300      	movs	r3, #0
}
   2240a:	0018      	movs	r0, r3
   2240c:	46bd      	mov	sp, r7
   2240e:	b002      	add	sp, #8
   22410:	bd80      	pop	{r7, pc}
   22412:	46c0      	nop			; (mov r8, r8)
   22414:	42000400 	.word	0x42000400

00022418 <ac_register_callback>:
 */
enum status_code ac_register_callback(
		struct ac_module *const module,
		ac_callback_t callback_func,
		const enum ac_callback callback_type)
{
   22418:	b580      	push	{r7, lr}
   2241a:	b084      	sub	sp, #16
   2241c:	af00      	add	r7, sp, #0
   2241e:	60f8      	str	r0, [r7, #12]
   22420:	60b9      	str	r1, [r7, #8]
   22422:	1dfb      	adds	r3, r7, #7
   22424:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
   22426:	1dfb      	adds	r3, r7, #7
   22428:	781b      	ldrb	r3, [r3, #0]
   2242a:	68fa      	ldr	r2, [r7, #12]
   2242c:	009b      	lsls	r3, r3, #2
   2242e:	18d3      	adds	r3, r2, r3
   22430:	3304      	adds	r3, #4
   22432:	68ba      	ldr	r2, [r7, #8]
   22434:	601a      	str	r2, [r3, #0]

	/* Set software flag for callback */
	module->register_callback_mask |= (1 << callback_type);
   22436:	68fb      	ldr	r3, [r7, #12]
   22438:	7e1b      	ldrb	r3, [r3, #24]
   2243a:	b25a      	sxtb	r2, r3
   2243c:	1dfb      	adds	r3, r7, #7
   2243e:	781b      	ldrb	r3, [r3, #0]
   22440:	2101      	movs	r1, #1
   22442:	4099      	lsls	r1, r3
   22444:	000b      	movs	r3, r1
   22446:	b25b      	sxtb	r3, r3
   22448:	4313      	orrs	r3, r2
   2244a:	b25b      	sxtb	r3, r3
   2244c:	b2da      	uxtb	r2, r3
   2244e:	68fb      	ldr	r3, [r7, #12]
   22450:	761a      	strb	r2, [r3, #24]

	return STATUS_OK;
   22452:	2300      	movs	r3, #0
}
   22454:	0018      	movs	r0, r3
   22456:	46bd      	mov	sp, r7
   22458:	b004      	add	sp, #16
   2245a:	bd80      	pop	{r7, pc}

0002245c <AC_Handler>:
/**
 * \internal ISR handler for AC
 */
#if (AC_INST_NUM == 1)
void AC_Handler(void)
{
   2245c:	b580      	push	{r7, lr}
   2245e:	af00      	add	r7, sp, #0
	_ac_interrupt_handler(0);
   22460:	2000      	movs	r0, #0
   22462:	4b02      	ldr	r3, [pc, #8]	; (2246c <AC_Handler+0x10>)
   22464:	4798      	blx	r3
}
   22466:	46c0      	nop			; (mov r8, r8)
   22468:	46bd      	mov	sp, r7
   2246a:	bd80      	pop	{r7, pc}
   2246c:	00022471 	.word	0x00022471

00022470 <_ac_interrupt_handler>:
 * that are registered and enabled.
 *
 * \param [in] instance_index  Default value 0
 */
void _ac_interrupt_handler(const uint32_t instance_index)
{
   22470:	b580      	push	{r7, lr}
   22472:	b084      	sub	sp, #16
   22474:	af00      	add	r7, sp, #0
   22476:	6078      	str	r0, [r7, #4]
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */

	struct ac_module *module = _ac_instance[instance_index];
   22478:	4b23      	ldr	r3, [pc, #140]	; (22508 <_ac_interrupt_handler+0x98>)
   2247a:	687a      	ldr	r2, [r7, #4]
   2247c:	0092      	lsls	r2, r2, #2
   2247e:	58d3      	ldr	r3, [r2, r3]
   22480:	60fb      	str	r3, [r7, #12]

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask =
			_ac_instance[instance_index]->hw->INTFLAG.reg &
   22482:	4b21      	ldr	r3, [pc, #132]	; (22508 <_ac_interrupt_handler+0x98>)
   22484:	687a      	ldr	r2, [r7, #4]
   22486:	0092      	lsls	r2, r2, #2
   22488:	58d3      	ldr	r3, [r2, r3]
   2248a:	681b      	ldr	r3, [r3, #0]
   2248c:	799b      	ldrb	r3, [r3, #6]
   2248e:	b2da      	uxtb	r2, r3
			(module->register_callback_mask & module->enable_callback_mask);
   22490:	68fb      	ldr	r3, [r7, #12]
   22492:	7e1b      	ldrb	r3, [r3, #24]
   22494:	68f9      	ldr	r1, [r7, #12]
   22496:	7e49      	ldrb	r1, [r1, #25]
	interrupt_and_callback_status_mask =
   22498:	400b      	ands	r3, r1
   2249a:	b2d9      	uxtb	r1, r3
   2249c:	230b      	movs	r3, #11
   2249e:	18fb      	adds	r3, r7, r3
   224a0:	400a      	ands	r2, r1
   224a2:	701a      	strb	r2, [r3, #0]

	/* Check if comparator channel 0 needs to be serviced */
	if (interrupt_and_callback_status_mask & AC_INTFLAG_COMP0) {
   224a4:	230b      	movs	r3, #11
   224a6:	18fb      	adds	r3, r7, r3
   224a8:	781b      	ldrb	r3, [r3, #0]
   224aa:	2201      	movs	r2, #1
   224ac:	4013      	ands	r3, r2
   224ae:	d008      	beq.n	224c2 <_ac_interrupt_handler+0x52>
		/* Invoke registered and enabled callback function */
		(module->callback[AC_CALLBACK_COMPARATOR_0])(module);
   224b0:	68fb      	ldr	r3, [r7, #12]
   224b2:	685b      	ldr	r3, [r3, #4]
   224b4:	68fa      	ldr	r2, [r7, #12]
   224b6:	0010      	movs	r0, r2
   224b8:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->INTFLAG.reg = AC_INTFLAG_COMP0;
   224ba:	68fb      	ldr	r3, [r7, #12]
   224bc:	681b      	ldr	r3, [r3, #0]
   224be:	2201      	movs	r2, #1
   224c0:	719a      	strb	r2, [r3, #6]
	}

	/* Check if comparator channel 1 needs to be serviced */
	if (interrupt_and_callback_status_mask & AC_INTFLAG_COMP1) {
   224c2:	230b      	movs	r3, #11
   224c4:	18fb      	adds	r3, r7, r3
   224c6:	781b      	ldrb	r3, [r3, #0]
   224c8:	2202      	movs	r2, #2
   224ca:	4013      	ands	r3, r2
   224cc:	d008      	beq.n	224e0 <_ac_interrupt_handler+0x70>
		/* Invoke registered and enabled callback function */
		(module->callback[AC_CALLBACK_COMPARATOR_1])(module);
   224ce:	68fb      	ldr	r3, [r7, #12]
   224d0:	689b      	ldr	r3, [r3, #8]
   224d2:	68fa      	ldr	r2, [r7, #12]
   224d4:	0010      	movs	r0, r2
   224d6:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->INTFLAG.reg = AC_INTFLAG_COMP1;
   224d8:	68fb      	ldr	r3, [r7, #12]
   224da:	681b      	ldr	r3, [r3, #0]
   224dc:	2202      	movs	r2, #2
   224de:	719a      	strb	r2, [r3, #6]
	}

	/* Check if window 0 needs to be serviced */
	if (interrupt_and_callback_status_mask & AC_INTFLAG_WIN0) {
   224e0:	230b      	movs	r3, #11
   224e2:	18fb      	adds	r3, r7, r3
   224e4:	781b      	ldrb	r3, [r3, #0]
   224e6:	2210      	movs	r2, #16
   224e8:	4013      	ands	r3, r2
   224ea:	d008      	beq.n	224fe <_ac_interrupt_handler+0x8e>
		/* Invoke registered and enabled callback function */
		(module->callback[AC_CALLBACK_WINDOW_0])(module);
   224ec:	68fb      	ldr	r3, [r7, #12]
   224ee:	695b      	ldr	r3, [r3, #20]
   224f0:	68fa      	ldr	r2, [r7, #12]
   224f2:	0010      	movs	r0, r2
   224f4:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->INTFLAG.reg = AC_INTFLAG_WIN0;
   224f6:	68fb      	ldr	r3, [r7, #12]
   224f8:	681b      	ldr	r3, [r3, #0]
   224fa:	2210      	movs	r2, #16
   224fc:	719a      	strb	r2, [r3, #6]
		/* Clear interrupt flag */
		module->hw->INTFLAG.reg = AC_INTFLAG_WIN1;
	}
#  endif
#endif /* (AC_NUM_CMP > 2) */
}
   224fe:	46c0      	nop			; (mov r8, r8)
   22500:	46bd      	mov	sp, r7
   22502:	b004      	add	sp, #16
   22504:	bd80      	pop	{r7, pc}
   22506:	46c0      	nop			; (mov r8, r8)
   22508:	20000964 	.word	0x20000964

0002250c <delay_init>:
 * \brief Initialize the delay driver.
 *
 * Not used in cycle mode.
 */
void delay_init(void)
{
   2250c:	b580      	push	{r7, lr}
   2250e:	af00      	add	r7, sp, #0
}
   22510:	46c0      	nop			; (mov r8, r8)
   22512:	46bd      	mov	sp, r7
   22514:	bd80      	pop	{r7, pc}
	...

00022518 <nvm_is_ready>:
 * \retval true   If the hardware module is ready for a new command
 * \retval false  If the hardware module is busy executing a command
 *
 */
static inline bool nvm_is_ready(void)
{
   22518:	b580      	push	{r7, lr}
   2251a:	b082      	sub	sp, #8
   2251c:	af00      	add	r7, sp, #0
	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
   2251e:	4b07      	ldr	r3, [pc, #28]	; (2253c <nvm_is_ready+0x24>)
   22520:	607b      	str	r3, [r7, #4]

	return nvm_module->INTFLAG.reg & NVMCTRL_INTFLAG_READY;
   22522:	687b      	ldr	r3, [r7, #4]
   22524:	7d1b      	ldrb	r3, [r3, #20]
   22526:	b2db      	uxtb	r3, r3
   22528:	001a      	movs	r2, r3
   2252a:	2301      	movs	r3, #1
   2252c:	4013      	ands	r3, r2
   2252e:	1e5a      	subs	r2, r3, #1
   22530:	4193      	sbcs	r3, r2
   22532:	b2db      	uxtb	r3, r3
}
   22534:	0018      	movs	r0, r3
   22536:	46bd      	mov	sp, r7
   22538:	b002      	add	sp, #8
   2253a:	bd80      	pop	{r7, pc}
   2253c:	41004000 	.word	0x41004000

00022540 <system_apb_clock_set_mask>:
{
   22540:	b580      	push	{r7, lr}
   22542:	b082      	sub	sp, #8
   22544:	af00      	add	r7, sp, #0
   22546:	0002      	movs	r2, r0
   22548:	6039      	str	r1, [r7, #0]
   2254a:	1dfb      	adds	r3, r7, #7
   2254c:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   2254e:	1dfb      	adds	r3, r7, #7
   22550:	781b      	ldrb	r3, [r3, #0]
   22552:	2b01      	cmp	r3, #1
   22554:	d00a      	beq.n	2256c <system_apb_clock_set_mask+0x2c>
   22556:	2b02      	cmp	r3, #2
   22558:	d00f      	beq.n	2257a <system_apb_clock_set_mask+0x3a>
   2255a:	2b00      	cmp	r3, #0
   2255c:	d114      	bne.n	22588 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   2255e:	4b0e      	ldr	r3, [pc, #56]	; (22598 <system_apb_clock_set_mask+0x58>)
   22560:	4a0d      	ldr	r2, [pc, #52]	; (22598 <system_apb_clock_set_mask+0x58>)
   22562:	6991      	ldr	r1, [r2, #24]
   22564:	683a      	ldr	r2, [r7, #0]
   22566:	430a      	orrs	r2, r1
   22568:	619a      	str	r2, [r3, #24]
			break;
   2256a:	e00f      	b.n	2258c <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   2256c:	4b0a      	ldr	r3, [pc, #40]	; (22598 <system_apb_clock_set_mask+0x58>)
   2256e:	4a0a      	ldr	r2, [pc, #40]	; (22598 <system_apb_clock_set_mask+0x58>)
   22570:	69d1      	ldr	r1, [r2, #28]
   22572:	683a      	ldr	r2, [r7, #0]
   22574:	430a      	orrs	r2, r1
   22576:	61da      	str	r2, [r3, #28]
			break;
   22578:	e008      	b.n	2258c <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   2257a:	4b07      	ldr	r3, [pc, #28]	; (22598 <system_apb_clock_set_mask+0x58>)
   2257c:	4a06      	ldr	r2, [pc, #24]	; (22598 <system_apb_clock_set_mask+0x58>)
   2257e:	6a11      	ldr	r1, [r2, #32]
   22580:	683a      	ldr	r2, [r7, #0]
   22582:	430a      	orrs	r2, r1
   22584:	621a      	str	r2, [r3, #32]
			break;
   22586:	e001      	b.n	2258c <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   22588:	2317      	movs	r3, #23
   2258a:	e000      	b.n	2258e <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   2258c:	2300      	movs	r3, #0
}
   2258e:	0018      	movs	r0, r3
   22590:	46bd      	mov	sp, r7
   22592:	b002      	add	sp, #8
   22594:	bd80      	pop	{r7, pc}
   22596:	46c0      	nop			; (mov r8, r8)
   22598:	40000400 	.word	0x40000400

0002259c <nvm_set_config>:
 *                        EEPROM and/or auxiliary space configuration from being
 *                        altered
 */
enum status_code nvm_set_config(
		const struct nvm_config *const config)
{
   2259c:	b580      	push	{r7, lr}
   2259e:	b084      	sub	sp, #16
   225a0:	af00      	add	r7, sp, #0
   225a2:	6078      	str	r0, [r7, #4]
	/* Sanity check argument */
	Assert(config);

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
   225a4:	4b2f      	ldr	r3, [pc, #188]	; (22664 <nvm_set_config+0xc8>)
   225a6:	60fb      	str	r3, [r7, #12]
#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30) || (SAMR34) || (SAMR35)
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, MCLK_APBBMASK_NVMCTRL);
#else
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, PM_APBBMASK_NVMCTRL);
   225a8:	2104      	movs	r1, #4
   225aa:	2001      	movs	r0, #1
   225ac:	4b2e      	ldr	r3, [pc, #184]	; (22668 <nvm_set_config+0xcc>)
   225ae:	4798      	blx	r3
#endif

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
   225b0:	68fb      	ldr	r3, [r7, #12]
   225b2:	2220      	movs	r2, #32
   225b4:	32ff      	adds	r2, #255	; 0xff
   225b6:	831a      	strh	r2, [r3, #24]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
   225b8:	4b2c      	ldr	r3, [pc, #176]	; (2266c <nvm_set_config+0xd0>)
   225ba:	4798      	blx	r3
   225bc:	0003      	movs	r3, r0
   225be:	001a      	movs	r2, r3
   225c0:	2301      	movs	r3, #1
   225c2:	4053      	eors	r3, r2
   225c4:	b2db      	uxtb	r3, r3
   225c6:	2b00      	cmp	r3, #0
   225c8:	d001      	beq.n	225ce <nvm_set_config+0x32>
		return STATUS_BUSY;
   225ca:	2305      	movs	r3, #5
   225cc:	e045      	b.n	2265a <nvm_set_config+0xbe>
	}

#if (!SAMC20) && (!SAMC21)
	/* Writing configuration to the CTRLB register */
	nvm_module->CTRLB.reg =
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
   225ce:	687b      	ldr	r3, [r7, #4]
   225d0:	781b      	ldrb	r3, [r3, #0]
   225d2:	021b      	lsls	r3, r3, #8
   225d4:	001a      	movs	r2, r3
   225d6:	23c0      	movs	r3, #192	; 0xc0
   225d8:	009b      	lsls	r3, r3, #2
   225da:	401a      	ands	r2, r3
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
   225dc:	687b      	ldr	r3, [r7, #4]
   225de:	785b      	ldrb	r3, [r3, #1]
   225e0:	01db      	lsls	r3, r3, #7
   225e2:	0019      	movs	r1, r3
   225e4:	23ff      	movs	r3, #255	; 0xff
   225e6:	400b      	ands	r3, r1
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
   225e8:	431a      	orrs	r2, r3
			NVMCTRL_CTRLB_RWS(config->wait_states) |
   225ea:	687b      	ldr	r3, [r7, #4]
   225ec:	789b      	ldrb	r3, [r3, #2]
   225ee:	005b      	lsls	r3, r3, #1
   225f0:	0019      	movs	r1, r3
   225f2:	231e      	movs	r3, #30
   225f4:	400b      	ands	r3, r1
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
   225f6:	431a      	orrs	r2, r3
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
   225f8:	687b      	ldr	r3, [r7, #4]
   225fa:	78db      	ldrb	r3, [r3, #3]
   225fc:	049b      	lsls	r3, r3, #18
   225fe:	0019      	movs	r1, r3
   22600:	2380      	movs	r3, #128	; 0x80
   22602:	02db      	lsls	r3, r3, #11
   22604:	400b      	ands	r3, r1
			NVMCTRL_CTRLB_RWS(config->wait_states) |
   22606:	431a      	orrs	r2, r3
			NVMCTRL_CTRLB_READMODE(config->cache_readmode);
   22608:	687b      	ldr	r3, [r7, #4]
   2260a:	791b      	ldrb	r3, [r3, #4]
   2260c:	041b      	lsls	r3, r3, #16
   2260e:	0019      	movs	r1, r3
   22610:	23c0      	movs	r3, #192	; 0xc0
   22612:	029b      	lsls	r3, r3, #10
   22614:	400b      	ands	r3, r1
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
   22616:	431a      	orrs	r2, r3
	nvm_module->CTRLB.reg =
   22618:	68fb      	ldr	r3, [r7, #12]
   2261a:	605a      	str	r2, [r3, #4]
			(cache_disable_value << NVMCTRL_CTRLB_CACHEDIS_Pos) |
			NVMCTRL_CTRLB_READMODE(config->cache_readmode);
#endif

	/* Initialize the internal device struct */
	_nvm_dev.page_size         = (8 << nvm_module->PARAM.bit.PSZ);
   2261c:	68fb      	ldr	r3, [r7, #12]
   2261e:	689b      	ldr	r3, [r3, #8]
   22620:	035b      	lsls	r3, r3, #13
   22622:	0f5b      	lsrs	r3, r3, #29
   22624:	b2db      	uxtb	r3, r3
   22626:	001a      	movs	r2, r3
   22628:	2308      	movs	r3, #8
   2262a:	4093      	lsls	r3, r2
   2262c:	b29a      	uxth	r2, r3
   2262e:	4b10      	ldr	r3, [pc, #64]	; (22670 <nvm_set_config+0xd4>)
   22630:	801a      	strh	r2, [r3, #0]
	_nvm_dev.number_of_pages   = nvm_module->PARAM.bit.NVMP;
   22632:	68fb      	ldr	r3, [r7, #12]
   22634:	689b      	ldr	r3, [r3, #8]
   22636:	b29a      	uxth	r2, r3
   22638:	4b0d      	ldr	r3, [pc, #52]	; (22670 <nvm_set_config+0xd4>)
   2263a:	805a      	strh	r2, [r3, #2]
	_nvm_dev.manual_page_write = config->manual_page_write;
   2263c:	687b      	ldr	r3, [r7, #4]
   2263e:	785a      	ldrb	r2, [r3, #1]
   22640:	4b0b      	ldr	r3, [pc, #44]	; (22670 <nvm_set_config+0xd4>)
   22642:	711a      	strb	r2, [r3, #4]

	/* If the security bit is set, the auxiliary space cannot be written */
	if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
   22644:	68fb      	ldr	r3, [r7, #12]
   22646:	8b1b      	ldrh	r3, [r3, #24]
   22648:	b29b      	uxth	r3, r3
   2264a:	001a      	movs	r2, r3
   2264c:	2380      	movs	r3, #128	; 0x80
   2264e:	005b      	lsls	r3, r3, #1
   22650:	4013      	ands	r3, r2
   22652:	d001      	beq.n	22658 <nvm_set_config+0xbc>
		return STATUS_ERR_IO;
   22654:	2310      	movs	r3, #16
   22656:	e000      	b.n	2265a <nvm_set_config+0xbe>
	}

	return STATUS_OK;
   22658:	2300      	movs	r3, #0
}
   2265a:	0018      	movs	r0, r3
   2265c:	46bd      	mov	sp, r7
   2265e:	b004      	add	sp, #16
   22660:	bd80      	pop	{r7, pc}
   22662:	46c0      	nop			; (mov r8, r8)
   22664:	41004000 	.word	0x41004000
   22668:	00022541 	.word	0x00022541
   2266c:	00022519 	.word	0x00022519
   22670:	20000424 	.word	0x20000424

00022674 <nvm_execute_command>:
 */
enum status_code nvm_execute_command(
		const enum nvm_command command,
		const uint32_t address,
		const uint32_t parameter)
{
   22674:	b580      	push	{r7, lr}
   22676:	b086      	sub	sp, #24
   22678:	af00      	add	r7, sp, #0
   2267a:	60b9      	str	r1, [r7, #8]
   2267c:	607a      	str	r2, [r7, #4]
   2267e:	230f      	movs	r3, #15
   22680:	18fb      	adds	r3, r7, r3
   22682:	1c02      	adds	r2, r0, #0
   22684:	701a      	strb	r2, [r3, #0]
	uint32_t ctrlb_bak;

	/* Check that the address given is valid  */
	if (address > ((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)
   22686:	4b3a      	ldr	r3, [pc, #232]	; (22770 <nvm_execute_command+0xfc>)
   22688:	881b      	ldrh	r3, [r3, #0]
   2268a:	001a      	movs	r2, r3
   2268c:	4b38      	ldr	r3, [pc, #224]	; (22770 <nvm_execute_command+0xfc>)
   2268e:	885b      	ldrh	r3, [r3, #2]
   22690:	435a      	muls	r2, r3
   22692:	68bb      	ldr	r3, [r7, #8]
   22694:	429a      	cmp	r2, r3
   22696:	d209      	bcs.n	226ac <nvm_execute_command+0x38>
		&& !(address >= NVMCTRL_AUX0_ADDRESS && address <= NVMCTRL_AUX1_ADDRESS )){
   22698:	68bb      	ldr	r3, [r7, #8]
   2269a:	4a36      	ldr	r2, [pc, #216]	; (22774 <nvm_execute_command+0x100>)
   2269c:	4293      	cmp	r3, r2
   2269e:	d903      	bls.n	226a8 <nvm_execute_command+0x34>
   226a0:	68bb      	ldr	r3, [r7, #8]
   226a2:	4a35      	ldr	r2, [pc, #212]	; (22778 <nvm_execute_command+0x104>)
   226a4:	4293      	cmp	r3, r2
   226a6:	d901      	bls.n	226ac <nvm_execute_command+0x38>
		if (address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
			|| address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
#else
		return STATUS_ERR_BAD_ADDRESS;
   226a8:	2318      	movs	r3, #24
   226aa:	e05c      	b.n	22766 <nvm_execute_command+0xf2>
#endif
	}

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
   226ac:	4b33      	ldr	r3, [pc, #204]	; (2277c <nvm_execute_command+0x108>)
   226ae:	617b      	str	r3, [r7, #20]

	/* Turn off cache before issuing flash commands */
	ctrlb_bak = nvm_module->CTRLB.reg;
   226b0:	697b      	ldr	r3, [r7, #20]
   226b2:	685b      	ldr	r3, [r3, #4]
   226b4:	613b      	str	r3, [r7, #16]
#if (SAMC20) || (SAMC21)
	nvm_module->CTRLB.reg = ((ctrlb_bak &(~(NVMCTRL_CTRLB_CACHEDIS(0x2))))
							| NVMCTRL_CTRLB_CACHEDIS(0x1));
#else
	nvm_module->CTRLB.reg = ctrlb_bak | NVMCTRL_CTRLB_CACHEDIS;
   226b6:	693b      	ldr	r3, [r7, #16]
   226b8:	2280      	movs	r2, #128	; 0x80
   226ba:	02d2      	lsls	r2, r2, #11
   226bc:	431a      	orrs	r2, r3
   226be:	697b      	ldr	r3, [r7, #20]
   226c0:	605a      	str	r2, [r3, #4]
#endif

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
   226c2:	697b      	ldr	r3, [r7, #20]
   226c4:	2220      	movs	r2, #32
   226c6:	32ff      	adds	r2, #255	; 0xff
   226c8:	831a      	strh	r2, [r3, #24]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
   226ca:	4b2d      	ldr	r3, [pc, #180]	; (22780 <nvm_execute_command+0x10c>)
   226cc:	4798      	blx	r3
   226ce:	0003      	movs	r3, r0
   226d0:	001a      	movs	r2, r3
   226d2:	2301      	movs	r3, #1
   226d4:	4053      	eors	r3, r2
   226d6:	b2db      	uxtb	r3, r3
   226d8:	2b00      	cmp	r3, #0
   226da:	d004      	beq.n	226e6 <nvm_execute_command+0x72>
		/* Restore the setting */
		nvm_module->CTRLB.reg = ctrlb_bak;
   226dc:	697b      	ldr	r3, [r7, #20]
   226de:	693a      	ldr	r2, [r7, #16]
   226e0:	605a      	str	r2, [r3, #4]
		return STATUS_BUSY;
   226e2:	2305      	movs	r3, #5
   226e4:	e03f      	b.n	22766 <nvm_execute_command+0xf2>
	}

	switch (command) {
   226e6:	230f      	movs	r3, #15
   226e8:	18fb      	adds	r3, r7, r3
   226ea:	781b      	ldrb	r3, [r3, #0]
   226ec:	2b45      	cmp	r3, #69	; 0x45
   226ee:	d81d      	bhi.n	2272c <nvm_execute_command+0xb8>
   226f0:	009a      	lsls	r2, r3, #2
   226f2:	4b24      	ldr	r3, [pc, #144]	; (22784 <nvm_execute_command+0x110>)
   226f4:	18d3      	adds	r3, r2, r3
   226f6:	681b      	ldr	r3, [r3, #0]
   226f8:	469f      	mov	pc, r3
		/* Commands requiring address (protected) */
		case NVM_COMMAND_ERASE_AUX_ROW:
		case NVM_COMMAND_WRITE_AUX_ROW:

			/* Auxiliary space cannot be accessed if the security bit is set */
			if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
   226fa:	697b      	ldr	r3, [r7, #20]
   226fc:	8b1b      	ldrh	r3, [r3, #24]
   226fe:	b29b      	uxth	r3, r3
   22700:	001a      	movs	r2, r3
   22702:	2380      	movs	r3, #128	; 0x80
   22704:	005b      	lsls	r3, r3, #1
   22706:	4013      	ands	r3, r2
   22708:	d004      	beq.n	22714 <nvm_execute_command+0xa0>
				/* Restore the setting */
				nvm_module->CTRLB.reg = ctrlb_bak;
   2270a:	697b      	ldr	r3, [r7, #20]
   2270c:	693a      	ldr	r2, [r7, #16]
   2270e:	605a      	str	r2, [r3, #4]
				return STATUS_ERR_IO;
   22710:	2310      	movs	r3, #16
   22712:	e028      	b.n	22766 <nvm_execute_command+0xf2>
			}

			/* Set address, command will be issued elsewhere */
			nvm_module->ADDR.reg = (uintptr_t)&NVM_MEMORY[address / 4];
   22714:	68bb      	ldr	r3, [r7, #8]
   22716:	089b      	lsrs	r3, r3, #2
   22718:	005a      	lsls	r2, r3, #1
   2271a:	697b      	ldr	r3, [r7, #20]
   2271c:	61da      	str	r2, [r3, #28]
			break;
   2271e:	e00b      	b.n	22738 <nvm_execute_command+0xc4>
		case NVM_COMMAND_RWWEE_ERASE_ROW:
		case NVM_COMMAND_RWWEE_WRITE_PAGE:
#endif

			/* Set address, command will be issued elsewhere */
			nvm_module->ADDR.reg = (uintptr_t)&NVM_MEMORY[address / 4];
   22720:	68bb      	ldr	r3, [r7, #8]
   22722:	089b      	lsrs	r3, r3, #2
   22724:	005a      	lsls	r2, r3, #1
   22726:	697b      	ldr	r3, [r7, #20]
   22728:	61da      	str	r2, [r3, #28]
			break;
   2272a:	e005      	b.n	22738 <nvm_execute_command+0xc4>
		case NVM_COMMAND_EXIT_LOW_POWER_MODE:
			break;

		default:
			/* Restore the setting */
			nvm_module->CTRLB.reg = ctrlb_bak;
   2272c:	697b      	ldr	r3, [r7, #20]
   2272e:	693a      	ldr	r2, [r7, #16]
   22730:	605a      	str	r2, [r3, #4]
			return STATUS_ERR_INVALID_ARG;
   22732:	2317      	movs	r3, #23
   22734:	e017      	b.n	22766 <nvm_execute_command+0xf2>
			break;
   22736:	46c0      	nop			; (mov r8, r8)
	}

	/* Set command */
	nvm_module->CTRLA.reg = command | NVMCTRL_CTRLA_CMDEX_KEY;
   22738:	230f      	movs	r3, #15
   2273a:	18fb      	adds	r3, r7, r3
   2273c:	781b      	ldrb	r3, [r3, #0]
   2273e:	b29b      	uxth	r3, r3
   22740:	4a11      	ldr	r2, [pc, #68]	; (22788 <nvm_execute_command+0x114>)
   22742:	4313      	orrs	r3, r2
   22744:	b29a      	uxth	r2, r3
   22746:	697b      	ldr	r3, [r7, #20]
   22748:	801a      	strh	r2, [r3, #0]

	/* Wait for the NVM controller to become ready */
	while (!nvm_is_ready()) {
   2274a:	46c0      	nop			; (mov r8, r8)
   2274c:	4b0c      	ldr	r3, [pc, #48]	; (22780 <nvm_execute_command+0x10c>)
   2274e:	4798      	blx	r3
   22750:	0003      	movs	r3, r0
   22752:	001a      	movs	r2, r3
   22754:	2301      	movs	r3, #1
   22756:	4053      	eors	r3, r2
   22758:	b2db      	uxtb	r3, r3
   2275a:	2b00      	cmp	r3, #0
   2275c:	d1f6      	bne.n	2274c <nvm_execute_command+0xd8>
	}

	/* Restore the setting */
	nvm_module->CTRLB.reg = ctrlb_bak;
   2275e:	697b      	ldr	r3, [r7, #20]
   22760:	693a      	ldr	r2, [r7, #16]
   22762:	605a      	str	r2, [r3, #4]

	return STATUS_OK;
   22764:	2300      	movs	r3, #0
}
   22766:	0018      	movs	r0, r3
   22768:	46bd      	mov	sp, r7
   2276a:	b006      	add	sp, #24
   2276c:	bd80      	pop	{r7, pc}
   2276e:	46c0      	nop			; (mov r8, r8)
   22770:	20000424 	.word	0x20000424
   22774:	00803fff 	.word	0x00803fff
   22778:	00806000 	.word	0x00806000
   2277c:	41004000 	.word	0x41004000
   22780:	00022519 	.word	0x00022519
   22784:	0002a66c 	.word	0x0002a66c
   22788:	ffffa500 	.word	0xffffa500

0002278c <nvm_write_buffer>:
 */
enum status_code nvm_write_buffer(
		const uint32_t destination_address,
		const uint8_t *buffer,
		uint16_t length)
{
   2278c:	b580      	push	{r7, lr}
   2278e:	b088      	sub	sp, #32
   22790:	af00      	add	r7, sp, #0
   22792:	60f8      	str	r0, [r7, #12]
   22794:	60b9      	str	r1, [r7, #8]
   22796:	1dbb      	adds	r3, r7, #6
   22798:	801a      	strh	r2, [r3, #0]
	bool is_rww_eeprom = false;
#endif

	/* Check if the destination address is valid */
	if (destination_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
   2279a:	4b4a      	ldr	r3, [pc, #296]	; (228c4 <nvm_write_buffer+0x138>)
   2279c:	881b      	ldrh	r3, [r3, #0]
   2279e:	001a      	movs	r2, r3
   227a0:	4b48      	ldr	r3, [pc, #288]	; (228c4 <nvm_write_buffer+0x138>)
   227a2:	885b      	ldrh	r3, [r3, #2]
   227a4:	435a      	muls	r2, r3
	if (destination_address >
   227a6:	68fb      	ldr	r3, [r7, #12]
   227a8:	429a      	cmp	r2, r3
   227aa:	d201      	bcs.n	227b0 <nvm_write_buffer+0x24>
			|| destination_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
		is_rww_eeprom = true;
#else
		return STATUS_ERR_BAD_ADDRESS;
   227ac:	2318      	movs	r3, #24
   227ae:	e084      	b.n	228ba <nvm_write_buffer+0x12e>
#endif
	}

	/* Check if the write address not aligned to the start of a page */
	if (destination_address & (_nvm_dev.page_size - 1)) {
   227b0:	4b44      	ldr	r3, [pc, #272]	; (228c4 <nvm_write_buffer+0x138>)
   227b2:	881b      	ldrh	r3, [r3, #0]
   227b4:	3b01      	subs	r3, #1
   227b6:	001a      	movs	r2, r3
   227b8:	68fb      	ldr	r3, [r7, #12]
   227ba:	4013      	ands	r3, r2
   227bc:	d001      	beq.n	227c2 <nvm_write_buffer+0x36>
		return STATUS_ERR_BAD_ADDRESS;
   227be:	2318      	movs	r3, #24
   227c0:	e07b      	b.n	228ba <nvm_write_buffer+0x12e>
	}

	/* Check if the write length is longer than an NVM page */
	if (length > _nvm_dev.page_size) {
   227c2:	4b40      	ldr	r3, [pc, #256]	; (228c4 <nvm_write_buffer+0x138>)
   227c4:	881b      	ldrh	r3, [r3, #0]
   227c6:	1dba      	adds	r2, r7, #6
   227c8:	8812      	ldrh	r2, [r2, #0]
   227ca:	429a      	cmp	r2, r3
   227cc:	d901      	bls.n	227d2 <nvm_write_buffer+0x46>
		return STATUS_ERR_INVALID_ARG;
   227ce:	2317      	movs	r3, #23
   227d0:	e073      	b.n	228ba <nvm_write_buffer+0x12e>
	}

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
   227d2:	4b3d      	ldr	r3, [pc, #244]	; (228c8 <nvm_write_buffer+0x13c>)
   227d4:	617b      	str	r3, [r7, #20]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
   227d6:	4b3d      	ldr	r3, [pc, #244]	; (228cc <nvm_write_buffer+0x140>)
   227d8:	4798      	blx	r3
   227da:	0003      	movs	r3, r0
   227dc:	001a      	movs	r2, r3
   227de:	2301      	movs	r3, #1
   227e0:	4053      	eors	r3, r2
   227e2:	b2db      	uxtb	r3, r3
   227e4:	2b00      	cmp	r3, #0
   227e6:	d001      	beq.n	227ec <nvm_write_buffer+0x60>
		return STATUS_BUSY;
   227e8:	2305      	movs	r3, #5
   227ea:	e066      	b.n	228ba <nvm_write_buffer+0x12e>
	}

	/* Erase the page buffer before buffering new data */
	nvm_module->CTRLA.reg = NVM_COMMAND_PAGE_BUFFER_CLEAR | NVMCTRL_CTRLA_CMDEX_KEY;
   227ec:	697b      	ldr	r3, [r7, #20]
   227ee:	4a38      	ldr	r2, [pc, #224]	; (228d0 <nvm_write_buffer+0x144>)
   227f0:	801a      	strh	r2, [r3, #0]

	/* Check if the module is busy */
	while (!nvm_is_ready()) {
   227f2:	46c0      	nop			; (mov r8, r8)
   227f4:	4b35      	ldr	r3, [pc, #212]	; (228cc <nvm_write_buffer+0x140>)
   227f6:	4798      	blx	r3
   227f8:	0003      	movs	r3, r0
   227fa:	001a      	movs	r2, r3
   227fc:	2301      	movs	r3, #1
   227fe:	4053      	eors	r3, r2
   22800:	b2db      	uxtb	r3, r3
   22802:	2b00      	cmp	r3, #0
   22804:	d1f6      	bne.n	227f4 <nvm_write_buffer+0x68>
		/* Force-wait for the buffer clear to complete */
	}

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
   22806:	697b      	ldr	r3, [r7, #20]
   22808:	2220      	movs	r2, #32
   2280a:	32ff      	adds	r2, #255	; 0xff
   2280c:	831a      	strh	r2, [r3, #24]

	uint32_t nvm_address = destination_address / 2;
   2280e:	68fb      	ldr	r3, [r7, #12]
   22810:	085b      	lsrs	r3, r3, #1
   22812:	61fb      	str	r3, [r7, #28]

	/* NVM _must_ be accessed as a series of 16-bit words, perform manual copy
	 * to ensure alignment */
	for (uint16_t i = 0; i < length; i += 2) {
   22814:	231a      	movs	r3, #26
   22816:	18fb      	adds	r3, r7, r3
   22818:	2200      	movs	r2, #0
   2281a:	801a      	strh	r2, [r3, #0]
   2281c:	e032      	b.n	22884 <nvm_write_buffer+0xf8>
		uint16_t data;

		/* Copy first byte of the 16-bit chunk to the temporary buffer */
		data = buffer[i];
   2281e:	231a      	movs	r3, #26
   22820:	18fb      	adds	r3, r7, r3
   22822:	881b      	ldrh	r3, [r3, #0]
   22824:	68ba      	ldr	r2, [r7, #8]
   22826:	18d3      	adds	r3, r2, r3
   22828:	781a      	ldrb	r2, [r3, #0]
   2282a:	2318      	movs	r3, #24
   2282c:	18fb      	adds	r3, r7, r3
   2282e:	801a      	strh	r2, [r3, #0]

		/* If we are not at the end of a write request with an odd byte count,
		 * store the next byte of data as well */
		if (i < (length - 1)) {
   22830:	231a      	movs	r3, #26
   22832:	18fb      	adds	r3, r7, r3
   22834:	881a      	ldrh	r2, [r3, #0]
   22836:	1dbb      	adds	r3, r7, #6
   22838:	881b      	ldrh	r3, [r3, #0]
   2283a:	3b01      	subs	r3, #1
   2283c:	429a      	cmp	r2, r3
   2283e:	da11      	bge.n	22864 <nvm_write_buffer+0xd8>
			data |= (buffer[i + 1] << 8);
   22840:	231a      	movs	r3, #26
   22842:	18fb      	adds	r3, r7, r3
   22844:	881b      	ldrh	r3, [r3, #0]
   22846:	3301      	adds	r3, #1
   22848:	68ba      	ldr	r2, [r7, #8]
   2284a:	18d3      	adds	r3, r2, r3
   2284c:	781b      	ldrb	r3, [r3, #0]
   2284e:	021b      	lsls	r3, r3, #8
   22850:	b21a      	sxth	r2, r3
   22852:	2318      	movs	r3, #24
   22854:	18fb      	adds	r3, r7, r3
   22856:	2100      	movs	r1, #0
   22858:	5e5b      	ldrsh	r3, [r3, r1]
   2285a:	4313      	orrs	r3, r2
   2285c:	b21a      	sxth	r2, r3
   2285e:	2318      	movs	r3, #24
   22860:	18fb      	adds	r3, r7, r3
   22862:	801a      	strh	r2, [r3, #0]
		}

		/* Store next 16-bit chunk to the NVM memory space */
		NVM_MEMORY[nvm_address++] = data;
   22864:	69fb      	ldr	r3, [r7, #28]
   22866:	1c5a      	adds	r2, r3, #1
   22868:	61fa      	str	r2, [r7, #28]
   2286a:	005b      	lsls	r3, r3, #1
   2286c:	001a      	movs	r2, r3
   2286e:	2318      	movs	r3, #24
   22870:	18fb      	adds	r3, r7, r3
   22872:	881b      	ldrh	r3, [r3, #0]
   22874:	8013      	strh	r3, [r2, #0]
	for (uint16_t i = 0; i < length; i += 2) {
   22876:	231a      	movs	r3, #26
   22878:	18fb      	adds	r3, r7, r3
   2287a:	221a      	movs	r2, #26
   2287c:	18ba      	adds	r2, r7, r2
   2287e:	8812      	ldrh	r2, [r2, #0]
   22880:	3202      	adds	r2, #2
   22882:	801a      	strh	r2, [r3, #0]
   22884:	231a      	movs	r3, #26
   22886:	18fa      	adds	r2, r7, r3
   22888:	1dbb      	adds	r3, r7, #6
   2288a:	8812      	ldrh	r2, [r2, #0]
   2288c:	881b      	ldrh	r3, [r3, #0]
   2288e:	429a      	cmp	r2, r3
   22890:	d3c5      	bcc.n	2281e <nvm_write_buffer+0x92>
	}

	/* If automatic page write mode is enable, then perform a manual NVM
	 * write when the length of data to be programmed is less than page size
	 */
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
   22892:	4b0c      	ldr	r3, [pc, #48]	; (228c4 <nvm_write_buffer+0x138>)
   22894:	791b      	ldrb	r3, [r3, #4]
   22896:	2201      	movs	r2, #1
   22898:	4053      	eors	r3, r2
   2289a:	b2db      	uxtb	r3, r3
   2289c:	2b00      	cmp	r3, #0
   2289e:	d00b      	beq.n	228b8 <nvm_write_buffer+0x12c>
   228a0:	1dbb      	adds	r3, r7, #6
   228a2:	881b      	ldrh	r3, [r3, #0]
   228a4:	2b3f      	cmp	r3, #63	; 0x3f
   228a6:	d807      	bhi.n	228b8 <nvm_write_buffer+0x12c>
#ifdef FEATURE_NVM_RWWEE
	 return ((is_rww_eeprom) ?
				(nvm_execute_command(NVM_COMMAND_RWWEE_WRITE_PAGE,destination_address, 0)):
	 			(nvm_execute_command(NVM_COMMAND_WRITE_PAGE,destination_address, 0)));
#else
		return nvm_execute_command(NVM_COMMAND_WRITE_PAGE,
   228a8:	68fb      	ldr	r3, [r7, #12]
   228aa:	2200      	movs	r2, #0
   228ac:	0019      	movs	r1, r3
   228ae:	2004      	movs	r0, #4
   228b0:	4b08      	ldr	r3, [pc, #32]	; (228d4 <nvm_write_buffer+0x148>)
   228b2:	4798      	blx	r3
   228b4:	0003      	movs	r3, r0
   228b6:	e000      	b.n	228ba <nvm_write_buffer+0x12e>
				destination_address, 0);
#endif
	}

	return STATUS_OK;
   228b8:	2300      	movs	r3, #0
}
   228ba:	0018      	movs	r0, r3
   228bc:	46bd      	mov	sp, r7
   228be:	b008      	add	sp, #32
   228c0:	bd80      	pop	{r7, pc}
   228c2:	46c0      	nop			; (mov r8, r8)
   228c4:	20000424 	.word	0x20000424
   228c8:	41004000 	.word	0x41004000
   228cc:	00022519 	.word	0x00022519
   228d0:	ffffa544 	.word	0xffffa544
   228d4:	00022675 	.word	0x00022675

000228d8 <nvm_read_buffer>:
 */
enum status_code nvm_read_buffer(
		const uint32_t source_address,
		uint8_t *const buffer,
		uint16_t length)
{
   228d8:	b580      	push	{r7, lr}
   228da:	b088      	sub	sp, #32
   228dc:	af00      	add	r7, sp, #0
   228de:	60f8      	str	r0, [r7, #12]
   228e0:	60b9      	str	r1, [r7, #8]
   228e2:	1dbb      	adds	r3, r7, #6
   228e4:	801a      	strh	r2, [r3, #0]
	/* Check if the source address is valid */
	if (source_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
   228e6:	4b38      	ldr	r3, [pc, #224]	; (229c8 <nvm_read_buffer+0xf0>)
   228e8:	881b      	ldrh	r3, [r3, #0]
   228ea:	001a      	movs	r2, r3
   228ec:	4b36      	ldr	r3, [pc, #216]	; (229c8 <nvm_read_buffer+0xf0>)
   228ee:	885b      	ldrh	r3, [r3, #2]
   228f0:	435a      	muls	r2, r3
	if (source_address >
   228f2:	68fb      	ldr	r3, [r7, #12]
   228f4:	429a      	cmp	r2, r3
   228f6:	d201      	bcs.n	228fc <nvm_read_buffer+0x24>
		if (source_address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
			|| source_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
#else
		return STATUS_ERR_BAD_ADDRESS;
   228f8:	2318      	movs	r3, #24
   228fa:	e060      	b.n	229be <nvm_read_buffer+0xe6>
#endif
	}

	/* Check if the read address is not aligned to the start of a page */
	if (source_address & (_nvm_dev.page_size - 1)) {
   228fc:	4b32      	ldr	r3, [pc, #200]	; (229c8 <nvm_read_buffer+0xf0>)
   228fe:	881b      	ldrh	r3, [r3, #0]
   22900:	3b01      	subs	r3, #1
   22902:	001a      	movs	r2, r3
   22904:	68fb      	ldr	r3, [r7, #12]
   22906:	4013      	ands	r3, r2
   22908:	d001      	beq.n	2290e <nvm_read_buffer+0x36>
		return STATUS_ERR_BAD_ADDRESS;
   2290a:	2318      	movs	r3, #24
   2290c:	e057      	b.n	229be <nvm_read_buffer+0xe6>
	}

	/* Check if the write length is longer than an NVM page */
	if (length > _nvm_dev.page_size) {
   2290e:	4b2e      	ldr	r3, [pc, #184]	; (229c8 <nvm_read_buffer+0xf0>)
   22910:	881b      	ldrh	r3, [r3, #0]
   22912:	1dba      	adds	r2, r7, #6
   22914:	8812      	ldrh	r2, [r2, #0]
   22916:	429a      	cmp	r2, r3
   22918:	d901      	bls.n	2291e <nvm_read_buffer+0x46>
		return STATUS_ERR_INVALID_ARG;
   2291a:	2317      	movs	r3, #23
   2291c:	e04f      	b.n	229be <nvm_read_buffer+0xe6>
	}

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
   2291e:	4b2b      	ldr	r3, [pc, #172]	; (229cc <nvm_read_buffer+0xf4>)
   22920:	617b      	str	r3, [r7, #20]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
   22922:	4b2b      	ldr	r3, [pc, #172]	; (229d0 <nvm_read_buffer+0xf8>)
   22924:	4798      	blx	r3
   22926:	0003      	movs	r3, r0
   22928:	001a      	movs	r2, r3
   2292a:	2301      	movs	r3, #1
   2292c:	4053      	eors	r3, r2
   2292e:	b2db      	uxtb	r3, r3
   22930:	2b00      	cmp	r3, #0
   22932:	d001      	beq.n	22938 <nvm_read_buffer+0x60>
		return STATUS_BUSY;
   22934:	2305      	movs	r3, #5
   22936:	e042      	b.n	229be <nvm_read_buffer+0xe6>
	}

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
   22938:	697b      	ldr	r3, [r7, #20]
   2293a:	2220      	movs	r2, #32
   2293c:	32ff      	adds	r2, #255	; 0xff
   2293e:	831a      	strh	r2, [r3, #24]

	uint32_t page_address = source_address / 2;
   22940:	68fb      	ldr	r3, [r7, #12]
   22942:	085b      	lsrs	r3, r3, #1
   22944:	61fb      	str	r3, [r7, #28]

	/* NVM _must_ be accessed as a series of 16-bit words, perform manual copy
	 * to ensure alignment */
	for (uint16_t i = 0; i < length; i += 2) {
   22946:	231a      	movs	r3, #26
   22948:	18fb      	adds	r3, r7, r3
   2294a:	2200      	movs	r2, #0
   2294c:	801a      	strh	r2, [r3, #0]
   2294e:	e02e      	b.n	229ae <nvm_read_buffer+0xd6>
		/* Fetch next 16-bit chunk from the NVM memory space */
		uint16_t data = NVM_MEMORY[page_address++];
   22950:	69fb      	ldr	r3, [r7, #28]
   22952:	1c5a      	adds	r2, r3, #1
   22954:	61fa      	str	r2, [r7, #28]
   22956:	005b      	lsls	r3, r3, #1
   22958:	001a      	movs	r2, r3
   2295a:	2312      	movs	r3, #18
   2295c:	18fb      	adds	r3, r7, r3
   2295e:	8812      	ldrh	r2, [r2, #0]
   22960:	801a      	strh	r2, [r3, #0]

		/* Copy first byte of the 16-bit chunk to the destination buffer */
		buffer[i] = (data & 0xFF);
   22962:	231a      	movs	r3, #26
   22964:	18fb      	adds	r3, r7, r3
   22966:	881b      	ldrh	r3, [r3, #0]
   22968:	68ba      	ldr	r2, [r7, #8]
   2296a:	18d3      	adds	r3, r2, r3
   2296c:	2212      	movs	r2, #18
   2296e:	18ba      	adds	r2, r7, r2
   22970:	8812      	ldrh	r2, [r2, #0]
   22972:	b2d2      	uxtb	r2, r2
   22974:	701a      	strb	r2, [r3, #0]

		/* If we are not at the end of a read request with an odd byte count,
		 * store the next byte of data as well */
		if (i < (length - 1)) {
   22976:	231a      	movs	r3, #26
   22978:	18fb      	adds	r3, r7, r3
   2297a:	881a      	ldrh	r2, [r3, #0]
   2297c:	1dbb      	adds	r3, r7, #6
   2297e:	881b      	ldrh	r3, [r3, #0]
   22980:	3b01      	subs	r3, #1
   22982:	429a      	cmp	r2, r3
   22984:	da0c      	bge.n	229a0 <nvm_read_buffer+0xc8>
			buffer[i + 1] = (data >> 8);
   22986:	231a      	movs	r3, #26
   22988:	18fb      	adds	r3, r7, r3
   2298a:	881b      	ldrh	r3, [r3, #0]
   2298c:	3301      	adds	r3, #1
   2298e:	68ba      	ldr	r2, [r7, #8]
   22990:	18d3      	adds	r3, r2, r3
   22992:	2212      	movs	r2, #18
   22994:	18ba      	adds	r2, r7, r2
   22996:	8812      	ldrh	r2, [r2, #0]
   22998:	0a12      	lsrs	r2, r2, #8
   2299a:	b292      	uxth	r2, r2
   2299c:	b2d2      	uxtb	r2, r2
   2299e:	701a      	strb	r2, [r3, #0]
	for (uint16_t i = 0; i < length; i += 2) {
   229a0:	231a      	movs	r3, #26
   229a2:	18fb      	adds	r3, r7, r3
   229a4:	221a      	movs	r2, #26
   229a6:	18ba      	adds	r2, r7, r2
   229a8:	8812      	ldrh	r2, [r2, #0]
   229aa:	3202      	adds	r2, #2
   229ac:	801a      	strh	r2, [r3, #0]
   229ae:	231a      	movs	r3, #26
   229b0:	18fa      	adds	r2, r7, r3
   229b2:	1dbb      	adds	r3, r7, #6
   229b4:	8812      	ldrh	r2, [r2, #0]
   229b6:	881b      	ldrh	r3, [r3, #0]
   229b8:	429a      	cmp	r2, r3
   229ba:	d3c9      	bcc.n	22950 <nvm_read_buffer+0x78>
		}
	}

	return STATUS_OK;
   229bc:	2300      	movs	r3, #0
}
   229be:	0018      	movs	r0, r3
   229c0:	46bd      	mov	sp, r7
   229c2:	b008      	add	sp, #32
   229c4:	bd80      	pop	{r7, pc}
   229c6:	46c0      	nop			; (mov r8, r8)
   229c8:	20000424 	.word	0x20000424
   229cc:	41004000 	.word	0x41004000
   229d0:	00022519 	.word	0x00022519

000229d4 <nvm_erase_row>:
 *                                 not aligned to the start of a row
 * \retval STATUS_ABORTED          NVM erased error
 */
enum status_code nvm_erase_row(
		const uint32_t row_address)
{
   229d4:	b580      	push	{r7, lr}
   229d6:	b084      	sub	sp, #16
   229d8:	af00      	add	r7, sp, #0
   229da:	6078      	str	r0, [r7, #4]
		bool is_rww_eeprom = false;
#endif

	/* Check if the row address is valid */
	if (row_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
   229dc:	4b23      	ldr	r3, [pc, #140]	; (22a6c <nvm_erase_row+0x98>)
   229de:	881b      	ldrh	r3, [r3, #0]
   229e0:	001a      	movs	r2, r3
   229e2:	4b22      	ldr	r3, [pc, #136]	; (22a6c <nvm_erase_row+0x98>)
   229e4:	885b      	ldrh	r3, [r3, #2]
   229e6:	435a      	muls	r2, r3
	if (row_address >
   229e8:	687b      	ldr	r3, [r7, #4]
   229ea:	429a      	cmp	r2, r3
   229ec:	d201      	bcs.n	229f2 <nvm_erase_row+0x1e>
			|| row_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
		is_rww_eeprom = true;
#else
		return STATUS_ERR_BAD_ADDRESS;
   229ee:	2318      	movs	r3, #24
   229f0:	e037      	b.n	22a62 <nvm_erase_row+0x8e>
#endif
	}

	/* Check if the address to erase is not aligned to the start of a row */
	if (row_address & ((_nvm_dev.page_size * NVMCTRL_ROW_PAGES) - 1)) {
   229f2:	4b1e      	ldr	r3, [pc, #120]	; (22a6c <nvm_erase_row+0x98>)
   229f4:	881b      	ldrh	r3, [r3, #0]
   229f6:	009b      	lsls	r3, r3, #2
   229f8:	3b01      	subs	r3, #1
   229fa:	001a      	movs	r2, r3
   229fc:	687b      	ldr	r3, [r7, #4]
   229fe:	4013      	ands	r3, r2
   22a00:	d001      	beq.n	22a06 <nvm_erase_row+0x32>
		return STATUS_ERR_BAD_ADDRESS;
   22a02:	2318      	movs	r3, #24
   22a04:	e02d      	b.n	22a62 <nvm_erase_row+0x8e>
	}

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
   22a06:	4b1a      	ldr	r3, [pc, #104]	; (22a70 <nvm_erase_row+0x9c>)
   22a08:	60fb      	str	r3, [r7, #12]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
   22a0a:	4b1a      	ldr	r3, [pc, #104]	; (22a74 <nvm_erase_row+0xa0>)
   22a0c:	4798      	blx	r3
   22a0e:	0003      	movs	r3, r0
   22a10:	001a      	movs	r2, r3
   22a12:	2301      	movs	r3, #1
   22a14:	4053      	eors	r3, r2
   22a16:	b2db      	uxtb	r3, r3
   22a18:	2b00      	cmp	r3, #0
   22a1a:	d001      	beq.n	22a20 <nvm_erase_row+0x4c>
		return STATUS_BUSY;
   22a1c:	2305      	movs	r3, #5
   22a1e:	e020      	b.n	22a62 <nvm_erase_row+0x8e>
	}

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
   22a20:	68fb      	ldr	r3, [r7, #12]
   22a22:	2220      	movs	r2, #32
   22a24:	32ff      	adds	r2, #255	; 0xff
   22a26:	831a      	strh	r2, [r3, #24]

	/* Set address and command */
	nvm_module->ADDR.reg  = (uintptr_t)&NVM_MEMORY[row_address / 4];
   22a28:	687b      	ldr	r3, [r7, #4]
   22a2a:	089b      	lsrs	r3, r3, #2
   22a2c:	005a      	lsls	r2, r3, #1
   22a2e:	68fb      	ldr	r3, [r7, #12]
   22a30:	61da      	str	r2, [r3, #28]
#ifdef FEATURE_NVM_RWWEE
	nvm_module->CTRLA.reg = ((is_rww_eeprom) ?
								(NVM_COMMAND_RWWEE_ERASE_ROW | NVMCTRL_CTRLA_CMDEX_KEY):
								(NVM_COMMAND_ERASE_ROW | NVMCTRL_CTRLA_CMDEX_KEY));
#else
	nvm_module->CTRLA.reg = NVM_COMMAND_ERASE_ROW | NVMCTRL_CTRLA_CMDEX_KEY;
   22a32:	68fb      	ldr	r3, [r7, #12]
   22a34:	4a10      	ldr	r2, [pc, #64]	; (22a78 <nvm_erase_row+0xa4>)
   22a36:	801a      	strh	r2, [r3, #0]
#endif

	while (!nvm_is_ready()) {
   22a38:	46c0      	nop			; (mov r8, r8)
   22a3a:	4b0e      	ldr	r3, [pc, #56]	; (22a74 <nvm_erase_row+0xa0>)
   22a3c:	4798      	blx	r3
   22a3e:	0003      	movs	r3, r0
   22a40:	001a      	movs	r2, r3
   22a42:	2301      	movs	r3, #1
   22a44:	4053      	eors	r3, r2
   22a46:	b2db      	uxtb	r3, r3
   22a48:	2b00      	cmp	r3, #0
   22a4a:	d1f6      	bne.n	22a3a <nvm_erase_row+0x66>
	}

	/* There existed error in NVM erase operation */
	if ((enum nvm_error)(nvm_module->STATUS.reg & NVM_ERRORS_MASK) != NVM_ERROR_NONE) {
   22a4c:	68fb      	ldr	r3, [r7, #12]
   22a4e:	8b1b      	ldrh	r3, [r3, #24]
   22a50:	b29b      	uxth	r3, r3
   22a52:	b2db      	uxtb	r3, r3
   22a54:	001a      	movs	r2, r3
   22a56:	231c      	movs	r3, #28
   22a58:	4013      	ands	r3, r2
   22a5a:	d001      	beq.n	22a60 <nvm_erase_row+0x8c>
		return STATUS_ABORTED;
   22a5c:	2304      	movs	r3, #4
   22a5e:	e000      	b.n	22a62 <nvm_erase_row+0x8e>
	}

	return STATUS_OK;
   22a60:	2300      	movs	r3, #0
}
   22a62:	0018      	movs	r0, r3
   22a64:	46bd      	mov	sp, r7
   22a66:	b004      	add	sp, #16
   22a68:	bd80      	pop	{r7, pc}
   22a6a:	46c0      	nop			; (mov r8, r8)
   22a6c:	20000424 	.word	0x20000424
   22a70:	41004000 	.word	0x41004000
   22a74:	00022519 	.word	0x00022519
   22a78:	ffffa502 	.word	0xffffa502

00022a7c <nvm_get_parameters>:
 * \param[out] parameters    Parameter structure, which holds page size and
 *                           number of pages in the NVM memory
 */
void nvm_get_parameters(
		struct nvm_parameters *const parameters)
{
   22a7c:	b580      	push	{r7, lr}
   22a7e:	b086      	sub	sp, #24
   22a80:	af00      	add	r7, sp, #0
   22a82:	6078      	str	r0, [r7, #4]
	/* Sanity check parameters */
	Assert(parameters);

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
   22a84:	4b2a      	ldr	r3, [pc, #168]	; (22b30 <nvm_get_parameters+0xb4>)
   22a86:	617b      	str	r3, [r7, #20]

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
   22a88:	697b      	ldr	r3, [r7, #20]
   22a8a:	2220      	movs	r2, #32
   22a8c:	32ff      	adds	r2, #255	; 0xff
   22a8e:	831a      	strh	r2, [r3, #24]

	/* Read out from the PARAM register */
	uint32_t param_reg = nvm_module->PARAM.reg;
   22a90:	697b      	ldr	r3, [r7, #20]
   22a92:	689b      	ldr	r3, [r3, #8]
   22a94:	613b      	str	r3, [r7, #16]

	/* Mask out page size exponent and convert to a number of bytes */
	parameters->page_size =
			8 << ((param_reg & NVMCTRL_PARAM_PSZ_Msk) >> NVMCTRL_PARAM_PSZ_Pos);
   22a96:	693b      	ldr	r3, [r7, #16]
   22a98:	0c1b      	lsrs	r3, r3, #16
   22a9a:	2207      	movs	r2, #7
   22a9c:	4013      	ands	r3, r2
   22a9e:	2208      	movs	r2, #8
   22aa0:	409a      	lsls	r2, r3
   22aa2:	0013      	movs	r3, r2
	parameters->page_size =
   22aa4:	b2da      	uxtb	r2, r3
   22aa6:	687b      	ldr	r3, [r7, #4]
   22aa8:	701a      	strb	r2, [r3, #0]

	/* Mask out number of pages count */
	parameters->nvm_number_of_pages =
   22aaa:	693b      	ldr	r3, [r7, #16]
   22aac:	b29a      	uxth	r2, r3
   22aae:	687b      	ldr	r3, [r7, #4]
   22ab0:	805a      	strh	r2, [r3, #2]
			(param_reg & NVMCTRL_PARAM_RWWEEP_Msk) >> NVMCTRL_PARAM_RWWEEP_Pos;
#endif

	/* Read the current EEPROM fuse value from the USER row */
	uint16_t eeprom_fuse_value =
			(NVM_USER_MEMORY[NVMCTRL_FUSES_EEPROM_SIZE_Pos / 16] &
   22ab2:	4b20      	ldr	r3, [pc, #128]	; (22b34 <nvm_get_parameters+0xb8>)
   22ab4:	881b      	ldrh	r3, [r3, #0]
   22ab6:	b29b      	uxth	r3, r3
			NVMCTRL_FUSES_EEPROM_SIZE_Msk) >> NVMCTRL_FUSES_EEPROM_SIZE_Pos;
   22ab8:	091b      	lsrs	r3, r3, #4
   22aba:	b29a      	uxth	r2, r3
	uint16_t eeprom_fuse_value =
   22abc:	230e      	movs	r3, #14
   22abe:	18fb      	adds	r3, r7, r3
   22ac0:	2107      	movs	r1, #7
   22ac2:	400a      	ands	r2, r1
   22ac4:	801a      	strh	r2, [r3, #0]

	/* Translate the EEPROM fuse byte value to a number of NVM pages */
	if (eeprom_fuse_value == 7) {
   22ac6:	230e      	movs	r3, #14
   22ac8:	18fb      	adds	r3, r7, r3
   22aca:	881b      	ldrh	r3, [r3, #0]
   22acc:	2b07      	cmp	r3, #7
   22ace:	d103      	bne.n	22ad8 <nvm_get_parameters+0x5c>
		parameters->eeprom_number_of_pages = 0;
   22ad0:	687b      	ldr	r3, [r7, #4]
   22ad2:	2200      	movs	r2, #0
   22ad4:	605a      	str	r2, [r3, #4]
   22ad6:	e00a      	b.n	22aee <nvm_get_parameters+0x72>
	}
	else {
		parameters->eeprom_number_of_pages =
				NVMCTRL_ROW_PAGES << (6 - eeprom_fuse_value);
   22ad8:	230e      	movs	r3, #14
   22ada:	18fb      	adds	r3, r7, r3
   22adc:	881b      	ldrh	r3, [r3, #0]
   22ade:	2206      	movs	r2, #6
   22ae0:	1ad3      	subs	r3, r2, r3
   22ae2:	2204      	movs	r2, #4
   22ae4:	409a      	lsls	r2, r3
   22ae6:	0013      	movs	r3, r2
   22ae8:	001a      	movs	r2, r3
		parameters->eeprom_number_of_pages =
   22aea:	687b      	ldr	r3, [r7, #4]
   22aec:	605a      	str	r2, [r3, #4]
	}

	/* Read the current BOOTSZ fuse value from the USER row */
	uint16_t boot_fuse_value =
			(NVM_USER_MEMORY[NVMCTRL_FUSES_BOOTPROT_Pos / 16] &
   22aee:	4b11      	ldr	r3, [pc, #68]	; (22b34 <nvm_get_parameters+0xb8>)
   22af0:	881b      	ldrh	r3, [r3, #0]
   22af2:	b29a      	uxth	r2, r3
	uint16_t boot_fuse_value =
   22af4:	230c      	movs	r3, #12
   22af6:	18fb      	adds	r3, r7, r3
   22af8:	2107      	movs	r1, #7
   22afa:	400a      	ands	r2, r1
   22afc:	801a      	strh	r2, [r3, #0]
			NVMCTRL_FUSES_BOOTPROT_Msk) >> NVMCTRL_FUSES_BOOTPROT_Pos;

	/* Translate the BOOTSZ fuse byte value to a number of NVM pages */
	if (boot_fuse_value == 7) {
   22afe:	230c      	movs	r3, #12
   22b00:	18fb      	adds	r3, r7, r3
   22b02:	881b      	ldrh	r3, [r3, #0]
   22b04:	2b07      	cmp	r3, #7
   22b06:	d103      	bne.n	22b10 <nvm_get_parameters+0x94>
		parameters->bootloader_number_of_pages = 0;
   22b08:	687b      	ldr	r3, [r7, #4]
   22b0a:	2200      	movs	r2, #0
   22b0c:	609a      	str	r2, [r3, #8]
	}
	else {
		parameters->bootloader_number_of_pages =
				NVMCTRL_ROW_PAGES << (7 - boot_fuse_value);
	}
}
   22b0e:	e00a      	b.n	22b26 <nvm_get_parameters+0xaa>
				NVMCTRL_ROW_PAGES << (7 - boot_fuse_value);
   22b10:	230c      	movs	r3, #12
   22b12:	18fb      	adds	r3, r7, r3
   22b14:	881b      	ldrh	r3, [r3, #0]
   22b16:	2207      	movs	r2, #7
   22b18:	1ad3      	subs	r3, r2, r3
   22b1a:	2204      	movs	r2, #4
   22b1c:	409a      	lsls	r2, r3
   22b1e:	0013      	movs	r3, r2
   22b20:	001a      	movs	r2, r3
		parameters->bootloader_number_of_pages =
   22b22:	687b      	ldr	r3, [r7, #4]
   22b24:	609a      	str	r2, [r3, #8]
}
   22b26:	46c0      	nop			; (mov r8, r8)
   22b28:	46bd      	mov	sp, r7
   22b2a:	b006      	add	sp, #24
   22b2c:	bd80      	pop	{r7, pc}
   22b2e:	46c0      	nop			; (mov r8, r8)
   22b30:	41004000 	.word	0x41004000
   22b34:	00804000 	.word	0x00804000

00022b38 <system_pinmux_get_config_defaults>:
{
   22b38:	b580      	push	{r7, lr}
   22b3a:	b082      	sub	sp, #8
   22b3c:	af00      	add	r7, sp, #0
   22b3e:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   22b40:	687b      	ldr	r3, [r7, #4]
   22b42:	2280      	movs	r2, #128	; 0x80
   22b44:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   22b46:	687b      	ldr	r3, [r7, #4]
   22b48:	2200      	movs	r2, #0
   22b4a:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   22b4c:	687b      	ldr	r3, [r7, #4]
   22b4e:	2201      	movs	r2, #1
   22b50:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   22b52:	687b      	ldr	r3, [r7, #4]
   22b54:	2200      	movs	r2, #0
   22b56:	70da      	strb	r2, [r3, #3]
}
   22b58:	46c0      	nop			; (mov r8, r8)
   22b5a:	46bd      	mov	sp, r7
   22b5c:	b002      	add	sp, #8
   22b5e:	bd80      	pop	{r7, pc}

00022b60 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
   22b60:	b580      	push	{r7, lr}
   22b62:	b084      	sub	sp, #16
   22b64:	af00      	add	r7, sp, #0
   22b66:	0002      	movs	r2, r0
   22b68:	6039      	str	r1, [r7, #0]
   22b6a:	1dfb      	adds	r3, r7, #7
   22b6c:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
   22b6e:	230c      	movs	r3, #12
   22b70:	18fb      	adds	r3, r7, r3
   22b72:	0018      	movs	r0, r3
   22b74:	4b10      	ldr	r3, [pc, #64]	; (22bb8 <port_pin_set_config+0x58>)
   22b76:	4798      	blx	r3

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
   22b78:	230c      	movs	r3, #12
   22b7a:	18fb      	adds	r3, r7, r3
   22b7c:	2280      	movs	r2, #128	; 0x80
   22b7e:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
   22b80:	683b      	ldr	r3, [r7, #0]
   22b82:	781a      	ldrb	r2, [r3, #0]
   22b84:	230c      	movs	r3, #12
   22b86:	18fb      	adds	r3, r7, r3
   22b88:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
   22b8a:	683b      	ldr	r3, [r7, #0]
   22b8c:	785a      	ldrb	r2, [r3, #1]
   22b8e:	230c      	movs	r3, #12
   22b90:	18fb      	adds	r3, r7, r3
   22b92:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
   22b94:	683b      	ldr	r3, [r7, #0]
   22b96:	789a      	ldrb	r2, [r3, #2]
   22b98:	230c      	movs	r3, #12
   22b9a:	18fb      	adds	r3, r7, r3
   22b9c:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
   22b9e:	230c      	movs	r3, #12
   22ba0:	18fa      	adds	r2, r7, r3
   22ba2:	1dfb      	adds	r3, r7, #7
   22ba4:	781b      	ldrb	r3, [r3, #0]
   22ba6:	0011      	movs	r1, r2
   22ba8:	0018      	movs	r0, r3
   22baa:	4b04      	ldr	r3, [pc, #16]	; (22bbc <port_pin_set_config+0x5c>)
   22bac:	4798      	blx	r3
}
   22bae:	46c0      	nop			; (mov r8, r8)
   22bb0:	46bd      	mov	sp, r7
   22bb2:	b004      	add	sp, #16
   22bb4:	bd80      	pop	{r7, pc}
   22bb6:	46c0      	nop			; (mov r8, r8)
   22bb8:	00022b39 	.word	0x00022b39
   22bbc:	00024891 	.word	0x00024891

00022bc0 <nvm_get_config_defaults>:
{
   22bc0:	b580      	push	{r7, lr}
   22bc2:	b082      	sub	sp, #8
   22bc4:	af00      	add	r7, sp, #0
   22bc6:	6078      	str	r0, [r7, #4]
	config->sleep_power_mode  = NVM_SLEEP_POWER_MODE_WAKEONACCESS;
   22bc8:	687b      	ldr	r3, [r7, #4]
   22bca:	2200      	movs	r2, #0
   22bcc:	701a      	strb	r2, [r3, #0]
	config->manual_page_write = true;
   22bce:	687b      	ldr	r3, [r7, #4]
   22bd0:	2201      	movs	r2, #1
   22bd2:	705a      	strb	r2, [r3, #1]
	config->wait_states       = NVMCTRL->CTRLB.bit.RWS;
   22bd4:	4b08      	ldr	r3, [pc, #32]	; (22bf8 <nvm_get_config_defaults+0x38>)
   22bd6:	685b      	ldr	r3, [r3, #4]
   22bd8:	06db      	lsls	r3, r3, #27
   22bda:	0f1b      	lsrs	r3, r3, #28
   22bdc:	b2db      	uxtb	r3, r3
   22bde:	001a      	movs	r2, r3
   22be0:	687b      	ldr	r3, [r7, #4]
   22be2:	709a      	strb	r2, [r3, #2]
	config->disable_cache     = false;
   22be4:	687b      	ldr	r3, [r7, #4]
   22be6:	2200      	movs	r2, #0
   22be8:	70da      	strb	r2, [r3, #3]
	config->cache_readmode    = NVM_CACHE_READMODE_NO_MISS_PENALTY;
   22bea:	687b      	ldr	r3, [r7, #4]
   22bec:	2200      	movs	r2, #0
   22bee:	711a      	strb	r2, [r3, #4]
}
   22bf0:	46c0      	nop			; (mov r8, r8)
   22bf2:	46bd      	mov	sp, r7
   22bf4:	b002      	add	sp, #8
   22bf6:	bd80      	pop	{r7, pc}
   22bf8:	41004000 	.word	0x41004000

00022bfc <_eeprom_emulator_nvm_erase_row>:
 *
 *  \param[in] row  Physical row in EEPROM space to erase
 */
static void _eeprom_emulator_nvm_erase_row(
		const uint8_t row)
{
   22bfc:	b590      	push	{r4, r7, lr}
   22bfe:	b085      	sub	sp, #20
   22c00:	af00      	add	r7, sp, #0
   22c02:	0002      	movs	r2, r0
   22c04:	1dfb      	adds	r3, r7, #7
   22c06:	701a      	strb	r2, [r3, #0]
	enum status_code error_code = STATUS_OK;
   22c08:	230f      	movs	r3, #15
   22c0a:	18fb      	adds	r3, r7, r3
   22c0c:	2200      	movs	r2, #0
   22c0e:	701a      	strb	r2, [r3, #0]

	do {
		error_code = nvm_erase_row(
				(uint32_t)&_eeprom_instance.flash[row * NVMCTRL_ROW_PAGES]);
   22c10:	4b0a      	ldr	r3, [pc, #40]	; (22c3c <_eeprom_emulator_nvm_erase_row+0x40>)
   22c12:	685b      	ldr	r3, [r3, #4]
   22c14:	1dfa      	adds	r2, r7, #7
   22c16:	7812      	ldrb	r2, [r2, #0]
   22c18:	0212      	lsls	r2, r2, #8
   22c1a:	189b      	adds	r3, r3, r2
		error_code = nvm_erase_row(
   22c1c:	220f      	movs	r2, #15
   22c1e:	18bc      	adds	r4, r7, r2
   22c20:	0018      	movs	r0, r3
   22c22:	4b07      	ldr	r3, [pc, #28]	; (22c40 <_eeprom_emulator_nvm_erase_row+0x44>)
   22c24:	4798      	blx	r3
   22c26:	0003      	movs	r3, r0
   22c28:	7023      	strb	r3, [r4, #0]
	} while (error_code == STATUS_BUSY);
   22c2a:	230f      	movs	r3, #15
   22c2c:	18fb      	adds	r3, r7, r3
   22c2e:	781b      	ldrb	r3, [r3, #0]
   22c30:	2b05      	cmp	r3, #5
   22c32:	d0ed      	beq.n	22c10 <_eeprom_emulator_nvm_erase_row+0x14>
}
   22c34:	46c0      	nop			; (mov r8, r8)
   22c36:	46bd      	mov	sp, r7
   22c38:	b005      	add	sp, #20
   22c3a:	bd90      	pop	{r4, r7, pc}
   22c3c:	2000042c 	.word	0x2000042c
   22c40:	000229d5 	.word	0x000229d5

00022c44 <_eeprom_emulator_nvm_fill_cache>:
 *  \param[in] data           Data to write to the physical memory page
 */
static void _eeprom_emulator_nvm_fill_cache(
		const uint16_t physical_page,
		const void* const data)
{
   22c44:	b590      	push	{r4, r7, lr}
   22c46:	b085      	sub	sp, #20
   22c48:	af00      	add	r7, sp, #0
   22c4a:	0002      	movs	r2, r0
   22c4c:	6039      	str	r1, [r7, #0]
   22c4e:	1dbb      	adds	r3, r7, #6
   22c50:	801a      	strh	r2, [r3, #0]
	enum status_code error_code = STATUS_OK;
   22c52:	230f      	movs	r3, #15
   22c54:	18fb      	adds	r3, r7, r3
   22c56:	2200      	movs	r2, #0
   22c58:	701a      	strb	r2, [r3, #0]

	do {
		error_code = nvm_write_buffer(
				(uint32_t)&_eeprom_instance.flash[physical_page],
   22c5a:	4b0c      	ldr	r3, [pc, #48]	; (22c8c <_eeprom_emulator_nvm_fill_cache+0x48>)
   22c5c:	685a      	ldr	r2, [r3, #4]
   22c5e:	1dbb      	adds	r3, r7, #6
   22c60:	881b      	ldrh	r3, [r3, #0]
   22c62:	019b      	lsls	r3, r3, #6
   22c64:	18d3      	adds	r3, r2, r3
		error_code = nvm_write_buffer(
   22c66:	0018      	movs	r0, r3
   22c68:	230f      	movs	r3, #15
   22c6a:	18fc      	adds	r4, r7, r3
   22c6c:	683b      	ldr	r3, [r7, #0]
   22c6e:	2240      	movs	r2, #64	; 0x40
   22c70:	0019      	movs	r1, r3
   22c72:	4b07      	ldr	r3, [pc, #28]	; (22c90 <_eeprom_emulator_nvm_fill_cache+0x4c>)
   22c74:	4798      	blx	r3
   22c76:	0003      	movs	r3, r0
   22c78:	7023      	strb	r3, [r4, #0]
				(uint8_t*)data,
				NVMCTRL_PAGE_SIZE);
	} while (error_code == STATUS_BUSY);
   22c7a:	230f      	movs	r3, #15
   22c7c:	18fb      	adds	r3, r7, r3
   22c7e:	781b      	ldrb	r3, [r3, #0]
   22c80:	2b05      	cmp	r3, #5
   22c82:	d0ea      	beq.n	22c5a <_eeprom_emulator_nvm_fill_cache+0x16>
}
   22c84:	46c0      	nop			; (mov r8, r8)
   22c86:	46bd      	mov	sp, r7
   22c88:	b005      	add	sp, #20
   22c8a:	bd90      	pop	{r4, r7, pc}
   22c8c:	2000042c 	.word	0x2000042c
   22c90:	0002278d 	.word	0x0002278d

00022c94 <_eeprom_emulator_nvm_commit_cache>:
 *
 *  \param[in] physical_page  Physical page in EEPROM space to commit
 */
static void _eeprom_emulator_nvm_commit_cache(
		const uint16_t physical_page)
{
   22c94:	b590      	push	{r4, r7, lr}
   22c96:	b085      	sub	sp, #20
   22c98:	af00      	add	r7, sp, #0
   22c9a:	0002      	movs	r2, r0
   22c9c:	1dbb      	adds	r3, r7, #6
   22c9e:	801a      	strh	r2, [r3, #0]
	enum status_code error_code = STATUS_OK;
   22ca0:	230f      	movs	r3, #15
   22ca2:	18fb      	adds	r3, r7, r3
   22ca4:	2200      	movs	r2, #0
   22ca6:	701a      	strb	r2, [r3, #0]

	do {
		error_code = nvm_execute_command(
				NVM_COMMAND_WRITE_PAGE,
				(uint32_t)&_eeprom_instance.flash[physical_page], 0);
   22ca8:	4b0b      	ldr	r3, [pc, #44]	; (22cd8 <_eeprom_emulator_nvm_commit_cache+0x44>)
   22caa:	685a      	ldr	r2, [r3, #4]
   22cac:	1dbb      	adds	r3, r7, #6
   22cae:	881b      	ldrh	r3, [r3, #0]
   22cb0:	019b      	lsls	r3, r3, #6
   22cb2:	18d3      	adds	r3, r2, r3
		error_code = nvm_execute_command(
   22cb4:	220f      	movs	r2, #15
   22cb6:	18bc      	adds	r4, r7, r2
   22cb8:	2200      	movs	r2, #0
   22cba:	0019      	movs	r1, r3
   22cbc:	2004      	movs	r0, #4
   22cbe:	4b07      	ldr	r3, [pc, #28]	; (22cdc <_eeprom_emulator_nvm_commit_cache+0x48>)
   22cc0:	4798      	blx	r3
   22cc2:	0003      	movs	r3, r0
   22cc4:	7023      	strb	r3, [r4, #0]
	} while (error_code == STATUS_BUSY);
   22cc6:	230f      	movs	r3, #15
   22cc8:	18fb      	adds	r3, r7, r3
   22cca:	781b      	ldrb	r3, [r3, #0]
   22ccc:	2b05      	cmp	r3, #5
   22cce:	d0eb      	beq.n	22ca8 <_eeprom_emulator_nvm_commit_cache+0x14>
}
   22cd0:	46c0      	nop			; (mov r8, r8)
   22cd2:	46bd      	mov	sp, r7
   22cd4:	b005      	add	sp, #20
   22cd6:	bd90      	pop	{r4, r7, pc}
   22cd8:	2000042c 	.word	0x2000042c
   22cdc:	00022675 	.word	0x00022675

00022ce0 <_eeprom_emulator_nvm_read_page>:
 *  \param[out] data           Destination buffer to fill with the read data
 */
static void _eeprom_emulator_nvm_read_page(
		const uint16_t physical_page,
		void* const data)
{
   22ce0:	b590      	push	{r4, r7, lr}
   22ce2:	b085      	sub	sp, #20
   22ce4:	af00      	add	r7, sp, #0
   22ce6:	0002      	movs	r2, r0
   22ce8:	6039      	str	r1, [r7, #0]
   22cea:	1dbb      	adds	r3, r7, #6
   22cec:	801a      	strh	r2, [r3, #0]
	enum status_code error_code = STATUS_OK;
   22cee:	230f      	movs	r3, #15
   22cf0:	18fb      	adds	r3, r7, r3
   22cf2:	2200      	movs	r2, #0
   22cf4:	701a      	strb	r2, [r3, #0]

	do {
		error_code = nvm_read_buffer(
				(uint32_t)&_eeprom_instance.flash[physical_page],
   22cf6:	4b0c      	ldr	r3, [pc, #48]	; (22d28 <_eeprom_emulator_nvm_read_page+0x48>)
   22cf8:	685a      	ldr	r2, [r3, #4]
   22cfa:	1dbb      	adds	r3, r7, #6
   22cfc:	881b      	ldrh	r3, [r3, #0]
   22cfe:	019b      	lsls	r3, r3, #6
   22d00:	18d3      	adds	r3, r2, r3
		error_code = nvm_read_buffer(
   22d02:	0018      	movs	r0, r3
   22d04:	230f      	movs	r3, #15
   22d06:	18fc      	adds	r4, r7, r3
   22d08:	683b      	ldr	r3, [r7, #0]
   22d0a:	2240      	movs	r2, #64	; 0x40
   22d0c:	0019      	movs	r1, r3
   22d0e:	4b07      	ldr	r3, [pc, #28]	; (22d2c <_eeprom_emulator_nvm_read_page+0x4c>)
   22d10:	4798      	blx	r3
   22d12:	0003      	movs	r3, r0
   22d14:	7023      	strb	r3, [r4, #0]
				(uint8_t*)data,
				NVMCTRL_PAGE_SIZE);
	} while (error_code == STATUS_BUSY);
   22d16:	230f      	movs	r3, #15
   22d18:	18fb      	adds	r3, r7, r3
   22d1a:	781b      	ldrb	r3, [r3, #0]
   22d1c:	2b05      	cmp	r3, #5
   22d1e:	d0ea      	beq.n	22cf6 <_eeprom_emulator_nvm_read_page+0x16>
}
   22d20:	46c0      	nop			; (mov r8, r8)
   22d22:	46bd      	mov	sp, r7
   22d24:	b005      	add	sp, #20
   22d26:	bd90      	pop	{r4, r7, pc}
   22d28:	2000042c 	.word	0x2000042c
   22d2c:	000228d9 	.word	0x000228d9

00022d30 <_eeprom_emulator_format_memory>:

/**
 * \brief Initializes the emulated EEPROM memory, destroying the current contents.
 */
static void _eeprom_emulator_format_memory(void)
{
   22d30:	b580      	push	{r7, lr}
   22d32:	b092      	sub	sp, #72	; 0x48
   22d34:	af00      	add	r7, sp, #0
	uint16_t logical_page = 0;
   22d36:	2346      	movs	r3, #70	; 0x46
   22d38:	18fb      	adds	r3, r7, r3
   22d3a:	2200      	movs	r2, #0
   22d3c:	801a      	strh	r2, [r3, #0]

	/* Set row 0 as the spare row */
	_eeprom_instance.spare_row = 0;
   22d3e:	4b32      	ldr	r3, [pc, #200]	; (22e08 <_eeprom_emulator_format_memory+0xd8>)
   22d40:	2287      	movs	r2, #135	; 0x87
   22d42:	2100      	movs	r1, #0
   22d44:	5499      	strb	r1, [r3, r2]
	_eeprom_emulator_nvm_erase_row(_eeprom_instance.spare_row);
   22d46:	4b30      	ldr	r3, [pc, #192]	; (22e08 <_eeprom_emulator_format_memory+0xd8>)
   22d48:	2287      	movs	r2, #135	; 0x87
   22d4a:	5c9b      	ldrb	r3, [r3, r2]
   22d4c:	0018      	movs	r0, r3
   22d4e:	4b2f      	ldr	r3, [pc, #188]	; (22e0c <_eeprom_emulator_format_memory+0xdc>)
   22d50:	4798      	blx	r3

	for (uint16_t physical_page = NVMCTRL_ROW_PAGES;
   22d52:	2344      	movs	r3, #68	; 0x44
   22d54:	18fb      	adds	r3, r7, r3
   22d56:	2204      	movs	r2, #4
   22d58:	801a      	strh	r2, [r3, #0]
   22d5a:	e04a      	b.n	22df2 <_eeprom_emulator_format_memory+0xc2>
			physical_page < _eeprom_instance.physical_pages; physical_page++) {

		if (physical_page == EEPROM_MASTER_PAGE_NUMBER) {
   22d5c:	2344      	movs	r3, #68	; 0x44
   22d5e:	18fb      	adds	r3, r7, r3
   22d60:	881a      	ldrh	r2, [r3, #0]
   22d62:	4b29      	ldr	r3, [pc, #164]	; (22e08 <_eeprom_emulator_format_memory+0xd8>)
   22d64:	891b      	ldrh	r3, [r3, #8]
   22d66:	3b01      	subs	r3, #1
   22d68:	429a      	cmp	r2, r3
   22d6a:	d03a      	beq.n	22de2 <_eeprom_emulator_format_memory+0xb2>
			continue;
		}

		/* If we are at the first page in a new row, erase the entire row */
		if ((physical_page % NVMCTRL_ROW_PAGES) == 0) {
   22d6c:	2344      	movs	r3, #68	; 0x44
   22d6e:	18fb      	adds	r3, r7, r3
   22d70:	881b      	ldrh	r3, [r3, #0]
   22d72:	2203      	movs	r2, #3
   22d74:	4013      	ands	r3, r2
   22d76:	b29b      	uxth	r3, r3
   22d78:	2b00      	cmp	r3, #0
   22d7a:	d108      	bne.n	22d8e <_eeprom_emulator_format_memory+0x5e>
			_eeprom_emulator_nvm_erase_row(physical_page / NVMCTRL_ROW_PAGES);
   22d7c:	2344      	movs	r3, #68	; 0x44
   22d7e:	18fb      	adds	r3, r7, r3
   22d80:	881b      	ldrh	r3, [r3, #0]
   22d82:	089b      	lsrs	r3, r3, #2
   22d84:	b29b      	uxth	r3, r3
   22d86:	b2db      	uxtb	r3, r3
   22d88:	0018      	movs	r0, r3
   22d8a:	4b20      	ldr	r3, [pc, #128]	; (22e0c <_eeprom_emulator_format_memory+0xdc>)
   22d8c:	4798      	blx	r3
		}

		/* Two logical pages are stored in each physical row; program in a
		 * pair of initialized but blank set of emulated EEPROM pages */
		if ((physical_page % NVMCTRL_ROW_PAGES) < 2) {
   22d8e:	2344      	movs	r3, #68	; 0x44
   22d90:	18fb      	adds	r3, r7, r3
   22d92:	881b      	ldrh	r3, [r3, #0]
   22d94:	2203      	movs	r2, #3
   22d96:	4013      	ands	r3, r2
   22d98:	b29b      	uxth	r3, r3
   22d9a:	2b01      	cmp	r3, #1
   22d9c:	d822      	bhi.n	22de4 <_eeprom_emulator_format_memory+0xb4>
			/* Make a buffer to hold the initialized EEPROM page */
			struct _eeprom_page data;
			memset(&data, 0xFF, sizeof(data));
   22d9e:	1d3b      	adds	r3, r7, #4
   22da0:	2240      	movs	r2, #64	; 0x40
   22da2:	21ff      	movs	r1, #255	; 0xff
   22da4:	0018      	movs	r0, r3
   22da6:	4b1a      	ldr	r3, [pc, #104]	; (22e10 <_eeprom_emulator_format_memory+0xe0>)
   22da8:	4798      	blx	r3

			/* Set up the new EEPROM row's header */
			data.header.logical_page = logical_page;
   22daa:	2346      	movs	r3, #70	; 0x46
   22dac:	18fb      	adds	r3, r7, r3
   22dae:	881b      	ldrh	r3, [r3, #0]
   22db0:	b2da      	uxtb	r2, r3
   22db2:	1d3b      	adds	r3, r7, #4
   22db4:	701a      	strb	r2, [r3, #0]

			/* Write the page out to physical memory */
			_eeprom_emulator_nvm_fill_cache(physical_page, &data);
   22db6:	1d3a      	adds	r2, r7, #4
   22db8:	2344      	movs	r3, #68	; 0x44
   22dba:	18fb      	adds	r3, r7, r3
   22dbc:	881b      	ldrh	r3, [r3, #0]
   22dbe:	0011      	movs	r1, r2
   22dc0:	0018      	movs	r0, r3
   22dc2:	4b14      	ldr	r3, [pc, #80]	; (22e14 <_eeprom_emulator_format_memory+0xe4>)
   22dc4:	4798      	blx	r3
			_eeprom_emulator_nvm_commit_cache(physical_page);
   22dc6:	2344      	movs	r3, #68	; 0x44
   22dc8:	18fb      	adds	r3, r7, r3
   22dca:	881b      	ldrh	r3, [r3, #0]
   22dcc:	0018      	movs	r0, r3
   22dce:	4b12      	ldr	r3, [pc, #72]	; (22e18 <_eeprom_emulator_format_memory+0xe8>)
   22dd0:	4798      	blx	r3

			/* Increment the logical EEPROM page address now that the current
			 * address' page has been initialized */
			logical_page++;
   22dd2:	2346      	movs	r3, #70	; 0x46
   22dd4:	18fb      	adds	r3, r7, r3
   22dd6:	881a      	ldrh	r2, [r3, #0]
   22dd8:	2346      	movs	r3, #70	; 0x46
   22dda:	18fb      	adds	r3, r7, r3
   22ddc:	3201      	adds	r2, #1
   22dde:	801a      	strh	r2, [r3, #0]
   22de0:	e000      	b.n	22de4 <_eeprom_emulator_format_memory+0xb4>
			continue;
   22de2:	46c0      	nop			; (mov r8, r8)
			physical_page < _eeprom_instance.physical_pages; physical_page++) {
   22de4:	2344      	movs	r3, #68	; 0x44
   22de6:	18fb      	adds	r3, r7, r3
   22de8:	881a      	ldrh	r2, [r3, #0]
   22dea:	2344      	movs	r3, #68	; 0x44
   22dec:	18fb      	adds	r3, r7, r3
   22dee:	3201      	adds	r2, #1
   22df0:	801a      	strh	r2, [r3, #0]
   22df2:	4b05      	ldr	r3, [pc, #20]	; (22e08 <_eeprom_emulator_format_memory+0xd8>)
   22df4:	891b      	ldrh	r3, [r3, #8]
	for (uint16_t physical_page = NVMCTRL_ROW_PAGES;
   22df6:	2244      	movs	r2, #68	; 0x44
   22df8:	18ba      	adds	r2, r7, r2
   22dfa:	8812      	ldrh	r2, [r2, #0]
   22dfc:	429a      	cmp	r2, r3
   22dfe:	d3ad      	bcc.n	22d5c <_eeprom_emulator_format_memory+0x2c>
		}
	}
}
   22e00:	46c0      	nop			; (mov r8, r8)
   22e02:	46bd      	mov	sp, r7
   22e04:	b012      	add	sp, #72	; 0x48
   22e06:	bd80      	pop	{r7, pc}
   22e08:	2000042c 	.word	0x2000042c
   22e0c:	00022bfd 	.word	0x00022bfd
   22e10:	000289fb 	.word	0x000289fb
   22e14:	00022c45 	.word	0x00022c45
   22e18:	00022c95 	.word	0x00022c95

00022e1c <_eeprom_emulator_is_full_row>:
 *  it is the full row.
 *
 *  \param[in]  phy_page  Physical page that in a row
 */
static bool _eeprom_emulator_is_full_row(uint16_t phy_page)
{
   22e1c:	b580      	push	{r7, lr}
   22e1e:	b082      	sub	sp, #8
   22e20:	af00      	add	r7, sp, #0
   22e22:	0002      	movs	r2, r0
   22e24:	1dbb      	adds	r3, r7, #6
   22e26:	801a      	strh	r2, [r3, #0]
	if((_eeprom_instance.flash[phy_page].header.logical_page
   22e28:	4b14      	ldr	r3, [pc, #80]	; (22e7c <_eeprom_emulator_is_full_row+0x60>)
   22e2a:	685a      	ldr	r2, [r3, #4]
   22e2c:	1dbb      	adds	r3, r7, #6
   22e2e:	881b      	ldrh	r3, [r3, #0]
   22e30:	019b      	lsls	r3, r3, #6
   22e32:	18d3      	adds	r3, r2, r3
   22e34:	781a      	ldrb	r2, [r3, #0]
		== _eeprom_instance.flash[phy_page+2].header.logical_page)
   22e36:	4b11      	ldr	r3, [pc, #68]	; (22e7c <_eeprom_emulator_is_full_row+0x60>)
   22e38:	6859      	ldr	r1, [r3, #4]
   22e3a:	1dbb      	adds	r3, r7, #6
   22e3c:	881b      	ldrh	r3, [r3, #0]
   22e3e:	3302      	adds	r3, #2
   22e40:	019b      	lsls	r3, r3, #6
   22e42:	18cb      	adds	r3, r1, r3
   22e44:	781b      	ldrb	r3, [r3, #0]
	if((_eeprom_instance.flash[phy_page].header.logical_page
   22e46:	429a      	cmp	r2, r3
   22e48:	d011      	beq.n	22e6e <_eeprom_emulator_is_full_row+0x52>
		|| (_eeprom_instance.flash[phy_page+1].header.logical_page
   22e4a:	4b0c      	ldr	r3, [pc, #48]	; (22e7c <_eeprom_emulator_is_full_row+0x60>)
   22e4c:	685a      	ldr	r2, [r3, #4]
   22e4e:	1dbb      	adds	r3, r7, #6
   22e50:	881b      	ldrh	r3, [r3, #0]
   22e52:	3301      	adds	r3, #1
   22e54:	019b      	lsls	r3, r3, #6
   22e56:	18d3      	adds	r3, r2, r3
   22e58:	781a      	ldrb	r2, [r3, #0]
		== _eeprom_instance.flash[phy_page+2].header.logical_page )) {
   22e5a:	4b08      	ldr	r3, [pc, #32]	; (22e7c <_eeprom_emulator_is_full_row+0x60>)
   22e5c:	6859      	ldr	r1, [r3, #4]
   22e5e:	1dbb      	adds	r3, r7, #6
   22e60:	881b      	ldrh	r3, [r3, #0]
   22e62:	3302      	adds	r3, #2
   22e64:	019b      	lsls	r3, r3, #6
   22e66:	18cb      	adds	r3, r1, r3
   22e68:	781b      	ldrb	r3, [r3, #0]
		|| (_eeprom_instance.flash[phy_page+1].header.logical_page
   22e6a:	429a      	cmp	r2, r3
   22e6c:	d101      	bne.n	22e72 <_eeprom_emulator_is_full_row+0x56>
		return true;
   22e6e:	2301      	movs	r3, #1
   22e70:	e000      	b.n	22e74 <_eeprom_emulator_is_full_row+0x58>
	} else {
		return false;
   22e72:	2300      	movs	r3, #0
	}
}
   22e74:	0018      	movs	r0, r3
   22e76:	46bd      	mov	sp, r7
   22e78:	b002      	add	sp, #8
   22e7a:	bd80      	pop	{r7, pc}
   22e7c:	2000042c 	.word	0x2000042c

00022e80 <_eeprom_emulator_erase_invalid_page>:
 *
 *  \param[in]  pre_phy_page  One physical invalid page
 *  \param[in]  next_phy_page Another physical invalid page
 */
static void _eeprom_emulator_erase_invalid_page(uint16_t pre_phy_page,uint16_t next_phy_page)
{
   22e80:	b580      	push	{r7, lr}
   22e82:	b082      	sub	sp, #8
   22e84:	af00      	add	r7, sp, #0
   22e86:	0002      	movs	r2, r0
   22e88:	1dbb      	adds	r3, r7, #6
   22e8a:	801a      	strh	r2, [r3, #0]
   22e8c:	1d3b      	adds	r3, r7, #4
   22e8e:	1c0a      	adds	r2, r1, #0
   22e90:	801a      	strh	r2, [r3, #0]
 	/* Erase the old/full row*/
	if(_eeprom_emulator_is_full_row(pre_phy_page)) {
   22e92:	1dbb      	adds	r3, r7, #6
   22e94:	881b      	ldrh	r3, [r3, #0]
   22e96:	0018      	movs	r0, r3
   22e98:	4b0c      	ldr	r3, [pc, #48]	; (22ecc <_eeprom_emulator_erase_invalid_page+0x4c>)
   22e9a:	4798      	blx	r3
   22e9c:	1e03      	subs	r3, r0, #0
   22e9e:	d008      	beq.n	22eb2 <_eeprom_emulator_erase_invalid_page+0x32>
		 _eeprom_emulator_nvm_erase_row(pre_phy_page/4);
   22ea0:	1dbb      	adds	r3, r7, #6
   22ea2:	881b      	ldrh	r3, [r3, #0]
   22ea4:	089b      	lsrs	r3, r3, #2
   22ea6:	b29b      	uxth	r3, r3
   22ea8:	b2db      	uxtb	r3, r3
   22eaa:	0018      	movs	r0, r3
   22eac:	4b08      	ldr	r3, [pc, #32]	; (22ed0 <_eeprom_emulator_erase_invalid_page+0x50>)
   22eae:	4798      	blx	r3
	} else {
		_eeprom_emulator_nvm_erase_row(next_phy_page/4);
	}
}
   22eb0:	e007      	b.n	22ec2 <_eeprom_emulator_erase_invalid_page+0x42>
		_eeprom_emulator_nvm_erase_row(next_phy_page/4);
   22eb2:	1d3b      	adds	r3, r7, #4
   22eb4:	881b      	ldrh	r3, [r3, #0]
   22eb6:	089b      	lsrs	r3, r3, #2
   22eb8:	b29b      	uxth	r3, r3
   22eba:	b2db      	uxtb	r3, r3
   22ebc:	0018      	movs	r0, r3
   22ebe:	4b04      	ldr	r3, [pc, #16]	; (22ed0 <_eeprom_emulator_erase_invalid_page+0x50>)
   22ec0:	4798      	blx	r3
}
   22ec2:	46c0      	nop			; (mov r8, r8)
   22ec4:	46bd      	mov	sp, r7
   22ec6:	b002      	add	sp, #8
   22ec8:	bd80      	pop	{r7, pc}
   22eca:	46c0      	nop			; (mov r8, r8)
   22ecc:	00022e1d 	.word	0x00022e1d
   22ed0:	00022bfd 	.word	0x00022bfd

00022ed4 <_eeprom_emulator_check_logical_page>:
 * \brief Check if there exist rows with same logical pages due to power drop
 *  when writing or erasing page.
 *  when existed same logical page, the old(full) row will be erased.
 */
static void _eeprom_emulator_check_logical_page(void)
{
   22ed4:	b580      	push	{r7, lr}
   22ed6:	b082      	sub	sp, #8
   22ed8:	af00      	add	r7, sp, #0
	uint16_t i = 0, j = 0;
   22eda:	1dbb      	adds	r3, r7, #6
   22edc:	2200      	movs	r2, #0
   22ede:	801a      	strh	r2, [r3, #0]
   22ee0:	1d3b      	adds	r3, r7, #4
   22ee2:	2200      	movs	r2, #0
   22ee4:	801a      	strh	r2, [r3, #0]
	for (i = 0; i < _eeprom_instance.physical_pages; i=i+4) {
   22ee6:	1dbb      	adds	r3, r7, #6
   22ee8:	2200      	movs	r2, #0
   22eea:	801a      	strh	r2, [r3, #0]
   22eec:	e04a      	b.n	22f84 <_eeprom_emulator_check_logical_page+0xb0>

		uint16_t pre_logical_page = _eeprom_instance.flash[i].header.logical_page;
   22eee:	4b2a      	ldr	r3, [pc, #168]	; (22f98 <_eeprom_emulator_check_logical_page+0xc4>)
   22ef0:	685a      	ldr	r2, [r3, #4]
   22ef2:	1dbb      	adds	r3, r7, #6
   22ef4:	881b      	ldrh	r3, [r3, #0]
   22ef6:	019b      	lsls	r3, r3, #6
   22ef8:	18d3      	adds	r3, r2, r3
   22efa:	781a      	ldrb	r2, [r3, #0]
   22efc:	1cbb      	adds	r3, r7, #2
   22efe:	801a      	strh	r2, [r3, #0]
		if( pre_logical_page == EEPROM_INVALID_PAGE_NUMBER) {
   22f00:	1cbb      	adds	r3, r7, #2
   22f02:	881b      	ldrh	r3, [r3, #0]
   22f04:	2bff      	cmp	r3, #255	; 0xff
   22f06:	d037      	beq.n	22f78 <_eeprom_emulator_check_logical_page+0xa4>
			continue;
		}

		for (j = NVMCTRL_ROW_PAGES+i; j < _eeprom_instance.physical_pages; j=j+4) {
   22f08:	1d3b      	adds	r3, r7, #4
   22f0a:	1dba      	adds	r2, r7, #6
   22f0c:	8812      	ldrh	r2, [r2, #0]
   22f0e:	3204      	adds	r2, #4
   22f10:	801a      	strh	r2, [r3, #0]
   22f12:	e02a      	b.n	22f6a <_eeprom_emulator_check_logical_page+0x96>

			if (j == EEPROM_MASTER_PAGE_NUMBER) {
   22f14:	1d3b      	adds	r3, r7, #4
   22f16:	881a      	ldrh	r2, [r3, #0]
   22f18:	4b1f      	ldr	r3, [pc, #124]	; (22f98 <_eeprom_emulator_check_logical_page+0xc4>)
   22f1a:	891b      	ldrh	r3, [r3, #8]
   22f1c:	3b01      	subs	r3, #1
   22f1e:	429a      	cmp	r2, r3
   22f20:	d01b      	beq.n	22f5a <_eeprom_emulator_check_logical_page+0x86>
				continue;
			}
			uint16_t next_logical_page = _eeprom_instance.flash[j].header.logical_page;
   22f22:	4b1d      	ldr	r3, [pc, #116]	; (22f98 <_eeprom_emulator_check_logical_page+0xc4>)
   22f24:	685a      	ldr	r2, [r3, #4]
   22f26:	1d3b      	adds	r3, r7, #4
   22f28:	881b      	ldrh	r3, [r3, #0]
   22f2a:	019b      	lsls	r3, r3, #6
   22f2c:	18d3      	adds	r3, r2, r3
   22f2e:	781a      	ldrb	r2, [r3, #0]
   22f30:	003b      	movs	r3, r7
   22f32:	801a      	strh	r2, [r3, #0]
			if( next_logical_page == EEPROM_INVALID_PAGE_NUMBER) {
   22f34:	003b      	movs	r3, r7
   22f36:	881b      	ldrh	r3, [r3, #0]
   22f38:	2bff      	cmp	r3, #255	; 0xff
   22f3a:	d010      	beq.n	22f5e <_eeprom_emulator_check_logical_page+0x8a>
				continue;
			}

			if(pre_logical_page == next_logical_page) {
   22f3c:	1cba      	adds	r2, r7, #2
   22f3e:	003b      	movs	r3, r7
   22f40:	8812      	ldrh	r2, [r2, #0]
   22f42:	881b      	ldrh	r3, [r3, #0]
   22f44:	429a      	cmp	r2, r3
   22f46:	d10b      	bne.n	22f60 <_eeprom_emulator_check_logical_page+0x8c>
				/* Found invalid logical page and erase it */
				_eeprom_emulator_erase_invalid_page(i,j);
   22f48:	1d3b      	adds	r3, r7, #4
   22f4a:	881a      	ldrh	r2, [r3, #0]
   22f4c:	1dbb      	adds	r3, r7, #6
   22f4e:	881b      	ldrh	r3, [r3, #0]
   22f50:	0011      	movs	r1, r2
   22f52:	0018      	movs	r0, r3
   22f54:	4b11      	ldr	r3, [pc, #68]	; (22f9c <_eeprom_emulator_check_logical_page+0xc8>)
   22f56:	4798      	blx	r3
   22f58:	e002      	b.n	22f60 <_eeprom_emulator_check_logical_page+0x8c>
				continue;
   22f5a:	46c0      	nop			; (mov r8, r8)
   22f5c:	e000      	b.n	22f60 <_eeprom_emulator_check_logical_page+0x8c>
				continue;
   22f5e:	46c0      	nop			; (mov r8, r8)
		for (j = NVMCTRL_ROW_PAGES+i; j < _eeprom_instance.physical_pages; j=j+4) {
   22f60:	1d3b      	adds	r3, r7, #4
   22f62:	1d3a      	adds	r2, r7, #4
   22f64:	8812      	ldrh	r2, [r2, #0]
   22f66:	3204      	adds	r2, #4
   22f68:	801a      	strh	r2, [r3, #0]
   22f6a:	4b0b      	ldr	r3, [pc, #44]	; (22f98 <_eeprom_emulator_check_logical_page+0xc4>)
   22f6c:	891b      	ldrh	r3, [r3, #8]
   22f6e:	1d3a      	adds	r2, r7, #4
   22f70:	8812      	ldrh	r2, [r2, #0]
   22f72:	429a      	cmp	r2, r3
   22f74:	d3ce      	bcc.n	22f14 <_eeprom_emulator_check_logical_page+0x40>
   22f76:	e000      	b.n	22f7a <_eeprom_emulator_check_logical_page+0xa6>
			continue;
   22f78:	46c0      	nop			; (mov r8, r8)
	for (i = 0; i < _eeprom_instance.physical_pages; i=i+4) {
   22f7a:	1dbb      	adds	r3, r7, #6
   22f7c:	1dba      	adds	r2, r7, #6
   22f7e:	8812      	ldrh	r2, [r2, #0]
   22f80:	3204      	adds	r2, #4
   22f82:	801a      	strh	r2, [r3, #0]
   22f84:	4b04      	ldr	r3, [pc, #16]	; (22f98 <_eeprom_emulator_check_logical_page+0xc4>)
   22f86:	891b      	ldrh	r3, [r3, #8]
   22f88:	1dba      	adds	r2, r7, #6
   22f8a:	8812      	ldrh	r2, [r2, #0]
   22f8c:	429a      	cmp	r2, r3
   22f8e:	d3ae      	bcc.n	22eee <_eeprom_emulator_check_logical_page+0x1a>
			}
		}
	}
}
   22f90:	46c0      	nop			; (mov r8, r8)
   22f92:	46bd      	mov	sp, r7
   22f94:	b002      	add	sp, #8
   22f96:	bd80      	pop	{r7, pc}
   22f98:	2000042c 	.word	0x2000042c
   22f9c:	00022e81 	.word	0x00022e81

00022fa0 <_eeprom_emulator_update_page_mapping>:

/**
 * \brief Creates a map in SRAM to translate logical EEPROM pages to physical FLASH pages.
 */
static void _eeprom_emulator_update_page_mapping(void)
{
   22fa0:	b580      	push	{r7, lr}
   22fa2:	b084      	sub	sp, #16
   22fa4:	af00      	add	r7, sp, #0
	/* Check if exists invalid logical page */
	_eeprom_emulator_check_logical_page();
   22fa6:	4b51      	ldr	r3, [pc, #324]	; (230ec <_eeprom_emulator_update_page_mapping+0x14c>)
   22fa8:	4798      	blx	r3

	/* Scan through all physical pages, to map physical and logical pages */
	for (uint16_t c = 0; c < _eeprom_instance.physical_pages; c++) {
   22faa:	230e      	movs	r3, #14
   22fac:	18fb      	adds	r3, r7, r3
   22fae:	2200      	movs	r2, #0
   22fb0:	801a      	strh	r2, [r3, #0]
   22fb2:	e033      	b.n	2301c <_eeprom_emulator_update_page_mapping+0x7c>
		if (c == EEPROM_MASTER_PAGE_NUMBER) {
   22fb4:	230e      	movs	r3, #14
   22fb6:	18fb      	adds	r3, r7, r3
   22fb8:	881a      	ldrh	r2, [r3, #0]
   22fba:	4b4d      	ldr	r3, [pc, #308]	; (230f0 <_eeprom_emulator_update_page_mapping+0x150>)
   22fbc:	891b      	ldrh	r3, [r3, #8]
   22fbe:	3b01      	subs	r3, #1
   22fc0:	429a      	cmp	r2, r3
   22fc2:	d023      	beq.n	2300c <_eeprom_emulator_update_page_mapping+0x6c>
			continue;
		}

		/* Read in the logical page stored in the current physical page */
		uint16_t logical_page = _eeprom_instance.flash[c].header.logical_page;
   22fc4:	4b4a      	ldr	r3, [pc, #296]	; (230f0 <_eeprom_emulator_update_page_mapping+0x150>)
   22fc6:	685a      	ldr	r2, [r3, #4]
   22fc8:	230e      	movs	r3, #14
   22fca:	18fb      	adds	r3, r7, r3
   22fcc:	881b      	ldrh	r3, [r3, #0]
   22fce:	019b      	lsls	r3, r3, #6
   22fd0:	18d3      	adds	r3, r2, r3
   22fd2:	781a      	ldrb	r2, [r3, #0]
   22fd4:	2308      	movs	r3, #8
   22fd6:	18fb      	adds	r3, r7, r3
   22fd8:	801a      	strh	r2, [r3, #0]

		/* If the logical page number is valid, add it to the mapping */
		if ((logical_page != EEPROM_INVALID_PAGE_NUMBER) &&
   22fda:	2308      	movs	r3, #8
   22fdc:	18fb      	adds	r3, r7, r3
   22fde:	881b      	ldrh	r3, [r3, #0]
   22fe0:	2bff      	cmp	r3, #255	; 0xff
   22fe2:	d014      	beq.n	2300e <_eeprom_emulator_update_page_mapping+0x6e>
				(logical_page < _eeprom_instance.logical_pages)) {
   22fe4:	4b42      	ldr	r3, [pc, #264]	; (230f0 <_eeprom_emulator_update_page_mapping+0x150>)
   22fe6:	7a9b      	ldrb	r3, [r3, #10]
   22fe8:	b29b      	uxth	r3, r3
		if ((logical_page != EEPROM_INVALID_PAGE_NUMBER) &&
   22fea:	2208      	movs	r2, #8
   22fec:	18ba      	adds	r2, r7, r2
   22fee:	8812      	ldrh	r2, [r2, #0]
   22ff0:	429a      	cmp	r2, r3
   22ff2:	d20c      	bcs.n	2300e <_eeprom_emulator_update_page_mapping+0x6e>
			_eeprom_instance.page_map[logical_page] = c;
   22ff4:	2308      	movs	r3, #8
   22ff6:	18fb      	adds	r3, r7, r3
   22ff8:	881b      	ldrh	r3, [r3, #0]
   22ffa:	220e      	movs	r2, #14
   22ffc:	18ba      	adds	r2, r7, r2
   22ffe:	8812      	ldrh	r2, [r2, #0]
   23000:	b2d1      	uxtb	r1, r2
   23002:	4a3b      	ldr	r2, [pc, #236]	; (230f0 <_eeprom_emulator_update_page_mapping+0x150>)
   23004:	18d3      	adds	r3, r2, r3
   23006:	1c0a      	adds	r2, r1, #0
   23008:	72da      	strb	r2, [r3, #11]
   2300a:	e000      	b.n	2300e <_eeprom_emulator_update_page_mapping+0x6e>
			continue;
   2300c:	46c0      	nop			; (mov r8, r8)
	for (uint16_t c = 0; c < _eeprom_instance.physical_pages; c++) {
   2300e:	230e      	movs	r3, #14
   23010:	18fb      	adds	r3, r7, r3
   23012:	881a      	ldrh	r2, [r3, #0]
   23014:	230e      	movs	r3, #14
   23016:	18fb      	adds	r3, r7, r3
   23018:	3201      	adds	r2, #1
   2301a:	801a      	strh	r2, [r3, #0]
   2301c:	4b34      	ldr	r3, [pc, #208]	; (230f0 <_eeprom_emulator_update_page_mapping+0x150>)
   2301e:	891b      	ldrh	r3, [r3, #8]
   23020:	220e      	movs	r2, #14
   23022:	18ba      	adds	r2, r7, r2
   23024:	8812      	ldrh	r2, [r2, #0]
   23026:	429a      	cmp	r2, r3
   23028:	d3c4      	bcc.n	22fb4 <_eeprom_emulator_update_page_mapping+0x14>
		}
	}

	/* Use an invalid page number as the spare row until a valid one has been
	 * found */
	_eeprom_instance.spare_row = EEPROM_INVALID_ROW_NUMBER;
   2302a:	4b31      	ldr	r3, [pc, #196]	; (230f0 <_eeprom_emulator_update_page_mapping+0x150>)
   2302c:	2287      	movs	r2, #135	; 0x87
   2302e:	213f      	movs	r1, #63	; 0x3f
   23030:	5499      	strb	r1, [r3, r2]

	/* Scan through all physical rows, to find an erased row to use as the
	 * spare */
	for (uint16_t c = 0; c < (_eeprom_instance.physical_pages / NVMCTRL_ROW_PAGES); c++) {
   23032:	230c      	movs	r3, #12
   23034:	18fb      	adds	r3, r7, r3
   23036:	2200      	movs	r2, #0
   23038:	801a      	strh	r2, [r3, #0]
   2303a:	e04a      	b.n	230d2 <_eeprom_emulator_update_page_mapping+0x132>
		bool spare_row_found = true;
   2303c:	230b      	movs	r3, #11
   2303e:	18fb      	adds	r3, r7, r3
   23040:	2201      	movs	r2, #1
   23042:	701a      	strb	r2, [r3, #0]

		/* Look through pages within the row to see if they are all erased */
		for (uint8_t c2 = 0; c2 < NVMCTRL_ROW_PAGES; c2++) {
   23044:	230a      	movs	r3, #10
   23046:	18fb      	adds	r3, r7, r3
   23048:	2200      	movs	r2, #0
   2304a:	701a      	strb	r2, [r3, #0]
   2304c:	e028      	b.n	230a0 <_eeprom_emulator_update_page_mapping+0x100>
			uint16_t physical_page = (c * NVMCTRL_ROW_PAGES) + c2;
   2304e:	230c      	movs	r3, #12
   23050:	18fb      	adds	r3, r7, r3
   23052:	881b      	ldrh	r3, [r3, #0]
   23054:	009b      	lsls	r3, r3, #2
   23056:	b299      	uxth	r1, r3
   23058:	230a      	movs	r3, #10
   2305a:	18fb      	adds	r3, r7, r3
   2305c:	781b      	ldrb	r3, [r3, #0]
   2305e:	b29a      	uxth	r2, r3
   23060:	1dbb      	adds	r3, r7, #6
   23062:	188a      	adds	r2, r1, r2
   23064:	801a      	strh	r2, [r3, #0]

			if (physical_page == EEPROM_MASTER_PAGE_NUMBER) {
   23066:	1dbb      	adds	r3, r7, #6
   23068:	881a      	ldrh	r2, [r3, #0]
   2306a:	4b21      	ldr	r3, [pc, #132]	; (230f0 <_eeprom_emulator_update_page_mapping+0x150>)
   2306c:	891b      	ldrh	r3, [r3, #8]
   2306e:	3b01      	subs	r3, #1
   23070:	429a      	cmp	r2, r3
   23072:	d00d      	beq.n	23090 <_eeprom_emulator_update_page_mapping+0xf0>
				continue;
			}

			if (_eeprom_instance.flash[physical_page].header.logical_page !=
   23074:	4b1e      	ldr	r3, [pc, #120]	; (230f0 <_eeprom_emulator_update_page_mapping+0x150>)
   23076:	685a      	ldr	r2, [r3, #4]
   23078:	1dbb      	adds	r3, r7, #6
   2307a:	881b      	ldrh	r3, [r3, #0]
   2307c:	019b      	lsls	r3, r3, #6
   2307e:	18d3      	adds	r3, r2, r3
   23080:	781b      	ldrb	r3, [r3, #0]
   23082:	2bff      	cmp	r3, #255	; 0xff
   23084:	d005      	beq.n	23092 <_eeprom_emulator_update_page_mapping+0xf2>
					EEPROM_INVALID_PAGE_NUMBER) {
				spare_row_found = false;
   23086:	230b      	movs	r3, #11
   23088:	18fb      	adds	r3, r7, r3
   2308a:	2200      	movs	r2, #0
   2308c:	701a      	strb	r2, [r3, #0]
   2308e:	e000      	b.n	23092 <_eeprom_emulator_update_page_mapping+0xf2>
				continue;
   23090:	46c0      	nop			; (mov r8, r8)
		for (uint8_t c2 = 0; c2 < NVMCTRL_ROW_PAGES; c2++) {
   23092:	230a      	movs	r3, #10
   23094:	18fb      	adds	r3, r7, r3
   23096:	781a      	ldrb	r2, [r3, #0]
   23098:	230a      	movs	r3, #10
   2309a:	18fb      	adds	r3, r7, r3
   2309c:	3201      	adds	r2, #1
   2309e:	701a      	strb	r2, [r3, #0]
   230a0:	230a      	movs	r3, #10
   230a2:	18fb      	adds	r3, r7, r3
   230a4:	781b      	ldrb	r3, [r3, #0]
   230a6:	2b03      	cmp	r3, #3
   230a8:	d9d1      	bls.n	2304e <_eeprom_emulator_update_page_mapping+0xae>
			}
		}

		/* If we've now found the spare row, store it and abort the search */
		if (spare_row_found == true) {
   230aa:	230b      	movs	r3, #11
   230ac:	18fb      	adds	r3, r7, r3
   230ae:	781b      	ldrb	r3, [r3, #0]
   230b0:	2b00      	cmp	r3, #0
   230b2:	d007      	beq.n	230c4 <_eeprom_emulator_update_page_mapping+0x124>
			_eeprom_instance.spare_row = c;
   230b4:	230c      	movs	r3, #12
   230b6:	18fb      	adds	r3, r7, r3
   230b8:	881b      	ldrh	r3, [r3, #0]
   230ba:	b2d9      	uxtb	r1, r3
   230bc:	4b0c      	ldr	r3, [pc, #48]	; (230f0 <_eeprom_emulator_update_page_mapping+0x150>)
   230be:	2287      	movs	r2, #135	; 0x87
   230c0:	5499      	strb	r1, [r3, r2]
			break;
   230c2:	e00f      	b.n	230e4 <_eeprom_emulator_update_page_mapping+0x144>
	for (uint16_t c = 0; c < (_eeprom_instance.physical_pages / NVMCTRL_ROW_PAGES); c++) {
   230c4:	230c      	movs	r3, #12
   230c6:	18fb      	adds	r3, r7, r3
   230c8:	881a      	ldrh	r2, [r3, #0]
   230ca:	230c      	movs	r3, #12
   230cc:	18fb      	adds	r3, r7, r3
   230ce:	3201      	adds	r2, #1
   230d0:	801a      	strh	r2, [r3, #0]
   230d2:	4b07      	ldr	r3, [pc, #28]	; (230f0 <_eeprom_emulator_update_page_mapping+0x150>)
   230d4:	891b      	ldrh	r3, [r3, #8]
   230d6:	089b      	lsrs	r3, r3, #2
   230d8:	b29b      	uxth	r3, r3
   230da:	220c      	movs	r2, #12
   230dc:	18ba      	adds	r2, r7, r2
   230de:	8812      	ldrh	r2, [r2, #0]
   230e0:	429a      	cmp	r2, r3
   230e2:	d3ab      	bcc.n	2303c <_eeprom_emulator_update_page_mapping+0x9c>
		}
	}
}
   230e4:	46c0      	nop			; (mov r8, r8)
   230e6:	46bd      	mov	sp, r7
   230e8:	b004      	add	sp, #16
   230ea:	bd80      	pop	{r7, pc}
   230ec:	00022ed5 	.word	0x00022ed5
   230f0:	2000042c 	.word	0x2000042c

000230f4 <_eeprom_emulator_is_page_free_on_row>:
 * \retval \c false  If the specified row was full and needs an erase
 */
static bool _eeprom_emulator_is_page_free_on_row(
		const uint8_t start_physical_page,
		uint8_t *const free_physical_page)
{
   230f4:	b580      	push	{r7, lr}
   230f6:	b084      	sub	sp, #16
   230f8:	af00      	add	r7, sp, #0
   230fa:	0002      	movs	r2, r0
   230fc:	6039      	str	r1, [r7, #0]
   230fe:	1dfb      	adds	r3, r7, #7
   23100:	701a      	strb	r2, [r3, #0]
	/* Convert physical page number to a FLASH row and page within the row */
	uint8_t row         = (start_physical_page / NVMCTRL_ROW_PAGES);
   23102:	230e      	movs	r3, #14
   23104:	18fb      	adds	r3, r7, r3
   23106:	1dfa      	adds	r2, r7, #7
   23108:	7812      	ldrb	r2, [r2, #0]
   2310a:	0892      	lsrs	r2, r2, #2
   2310c:	701a      	strb	r2, [r3, #0]
	uint8_t page_in_row = (start_physical_page % NVMCTRL_ROW_PAGES);
   2310e:	230d      	movs	r3, #13
   23110:	18fb      	adds	r3, r7, r3
   23112:	1dfa      	adds	r2, r7, #7
   23114:	7812      	ldrb	r2, [r2, #0]
   23116:	2103      	movs	r1, #3
   23118:	400a      	ands	r2, r1
   2311a:	701a      	strb	r2, [r3, #0]

	/* Look in the current row for a page that isn't currently used */
	for (uint8_t c = page_in_row; c < NVMCTRL_ROW_PAGES; c++) {
   2311c:	230f      	movs	r3, #15
   2311e:	18fb      	adds	r3, r7, r3
   23120:	220d      	movs	r2, #13
   23122:	18ba      	adds	r2, r7, r2
   23124:	7812      	ldrb	r2, [r2, #0]
   23126:	701a      	strb	r2, [r3, #0]
   23128:	e023      	b.n	23172 <_eeprom_emulator_is_page_free_on_row+0x7e>
		/* Calculate the page number for the current page being examined */
		uint8_t page = (row * NVMCTRL_ROW_PAGES) + c;
   2312a:	230e      	movs	r3, #14
   2312c:	18fb      	adds	r3, r7, r3
   2312e:	781b      	ldrb	r3, [r3, #0]
   23130:	009b      	lsls	r3, r3, #2
   23132:	b2d9      	uxtb	r1, r3
   23134:	230c      	movs	r3, #12
   23136:	18fb      	adds	r3, r7, r3
   23138:	220f      	movs	r2, #15
   2313a:	18ba      	adds	r2, r7, r2
   2313c:	7812      	ldrb	r2, [r2, #0]
   2313e:	188a      	adds	r2, r1, r2
   23140:	701a      	strb	r2, [r3, #0]

		/* If the page is free, pass it to the caller and exit */
		if (_eeprom_instance.flash[page].header.logical_page ==
   23142:	4b11      	ldr	r3, [pc, #68]	; (23188 <_eeprom_emulator_is_page_free_on_row+0x94>)
   23144:	685a      	ldr	r2, [r3, #4]
   23146:	230c      	movs	r3, #12
   23148:	18fb      	adds	r3, r7, r3
   2314a:	781b      	ldrb	r3, [r3, #0]
   2314c:	019b      	lsls	r3, r3, #6
   2314e:	18d3      	adds	r3, r2, r3
   23150:	781b      	ldrb	r3, [r3, #0]
   23152:	2bff      	cmp	r3, #255	; 0xff
   23154:	d106      	bne.n	23164 <_eeprom_emulator_is_page_free_on_row+0x70>
				EEPROM_INVALID_PAGE_NUMBER) {
			*free_physical_page = page;
   23156:	683b      	ldr	r3, [r7, #0]
   23158:	220c      	movs	r2, #12
   2315a:	18ba      	adds	r2, r7, r2
   2315c:	7812      	ldrb	r2, [r2, #0]
   2315e:	701a      	strb	r2, [r3, #0]
			return true;
   23160:	2301      	movs	r3, #1
   23162:	e00c      	b.n	2317e <_eeprom_emulator_is_page_free_on_row+0x8a>
	for (uint8_t c = page_in_row; c < NVMCTRL_ROW_PAGES; c++) {
   23164:	230f      	movs	r3, #15
   23166:	18fb      	adds	r3, r7, r3
   23168:	781a      	ldrb	r2, [r3, #0]
   2316a:	230f      	movs	r3, #15
   2316c:	18fb      	adds	r3, r7, r3
   2316e:	3201      	adds	r2, #1
   23170:	701a      	strb	r2, [r3, #0]
   23172:	230f      	movs	r3, #15
   23174:	18fb      	adds	r3, r7, r3
   23176:	781b      	ldrb	r3, [r3, #0]
   23178:	2b03      	cmp	r3, #3
   2317a:	d9d6      	bls.n	2312a <_eeprom_emulator_is_page_free_on_row+0x36>
		}
	}

	/* No free page in the current row was found */
	return false;
   2317c:	2300      	movs	r3, #0
}
   2317e:	0018      	movs	r0, r3
   23180:	46bd      	mov	sp, r7
   23182:	b004      	add	sp, #16
   23184:	bd80      	pop	{r7, pc}
   23186:	46c0      	nop			; (mov r8, r8)
   23188:	2000042c 	.word	0x2000042c

0002318c <_eeprom_emulator_move_data_to_spare>:
 */
static enum status_code _eeprom_emulator_move_data_to_spare(
		const uint8_t row_number,
		const uint8_t logical_page,
		const uint8_t *const data)
{
   2318c:	b580      	push	{r7, lr}
   2318e:	b086      	sub	sp, #24
   23190:	af00      	add	r7, sp, #0
   23192:	603a      	str	r2, [r7, #0]
   23194:	1dfb      	adds	r3, r7, #7
   23196:	1c02      	adds	r2, r0, #0
   23198:	701a      	strb	r2, [r3, #0]
   2319a:	1dbb      	adds	r3, r7, #6
   2319c:	1c0a      	adds	r2, r1, #0
   2319e:	701a      	strb	r2, [r3, #0]
	enum status_code error_code = STATUS_OK;
   231a0:	2314      	movs	r3, #20
   231a2:	18fb      	adds	r3, r7, r3
   231a4:	2200      	movs	r2, #0
   231a6:	701a      	strb	r2, [r3, #0]
		uint8_t logical_page;
		uint8_t physical_page;
	} page_trans[2];

	const struct _eeprom_page *row_data =
			(struct _eeprom_page *)&_eeprom_instance.flash[row_number * NVMCTRL_ROW_PAGES];
   231a8:	4b69      	ldr	r3, [pc, #420]	; (23350 <_eeprom_emulator_move_data_to_spare+0x1c4>)
   231aa:	685b      	ldr	r3, [r3, #4]
   231ac:	1dfa      	adds	r2, r7, #7
   231ae:	7812      	ldrb	r2, [r2, #0]
   231b0:	0212      	lsls	r2, r2, #8
	const struct _eeprom_page *row_data =
   231b2:	189b      	adds	r3, r3, r2
   231b4:	613b      	str	r3, [r7, #16]

	/* There should be two logical pages of data in each row, possibly with
	 * multiple revisions (right-most version is the newest). Start by assuming
	 * the left-most two pages contain the newest page revisions. */
	page_trans[0].logical_page  = row_data[0].header.logical_page;
   231b6:	693b      	ldr	r3, [r7, #16]
   231b8:	781a      	ldrb	r2, [r3, #0]
   231ba:	2308      	movs	r3, #8
   231bc:	18fb      	adds	r3, r7, r3
   231be:	701a      	strb	r2, [r3, #0]
	page_trans[0].physical_page = (row_number * NVMCTRL_ROW_PAGES);
   231c0:	1dfb      	adds	r3, r7, #7
   231c2:	781b      	ldrb	r3, [r3, #0]
   231c4:	009b      	lsls	r3, r3, #2
   231c6:	b2da      	uxtb	r2, r3
   231c8:	2308      	movs	r3, #8
   231ca:	18fb      	adds	r3, r7, r3
   231cc:	705a      	strb	r2, [r3, #1]

	page_trans[1].logical_page  = row_data[1].header.logical_page;
   231ce:	693b      	ldr	r3, [r7, #16]
   231d0:	3340      	adds	r3, #64	; 0x40
   231d2:	781a      	ldrb	r2, [r3, #0]
   231d4:	2308      	movs	r3, #8
   231d6:	18fb      	adds	r3, r7, r3
   231d8:	709a      	strb	r2, [r3, #2]
	page_trans[1].physical_page = (row_number * NVMCTRL_ROW_PAGES) + 1;
   231da:	1dfb      	adds	r3, r7, #7
   231dc:	781b      	ldrb	r3, [r3, #0]
   231de:	009b      	lsls	r3, r3, #2
   231e0:	b2db      	uxtb	r3, r3
   231e2:	3301      	adds	r3, #1
   231e4:	b2da      	uxtb	r2, r3
   231e6:	2308      	movs	r3, #8
   231e8:	18fb      	adds	r3, r7, r3
   231ea:	70da      	strb	r2, [r3, #3]

	/* Look for newer revisions of the two logical pages stored in the row */
	for (uint8_t c = 0; c < 2; c++) {
   231ec:	2317      	movs	r3, #23
   231ee:	18fb      	adds	r3, r7, r3
   231f0:	2200      	movs	r2, #0
   231f2:	701a      	strb	r2, [r3, #0]
   231f4:	e03a      	b.n	2326c <_eeprom_emulator_move_data_to_spare+0xe0>
		/* Look through the remaining pages in the row for any newer revisions */
		for (uint8_t c2 = 2; c2 < NVMCTRL_ROW_PAGES; c2++) {
   231f6:	2316      	movs	r3, #22
   231f8:	18fb      	adds	r3, r7, r3
   231fa:	2202      	movs	r2, #2
   231fc:	701a      	strb	r2, [r3, #0]
   231fe:	e029      	b.n	23254 <_eeprom_emulator_move_data_to_spare+0xc8>
			if (page_trans[c].logical_page == row_data[c2].header.logical_page) {
   23200:	2317      	movs	r3, #23
   23202:	18fb      	adds	r3, r7, r3
   23204:	781a      	ldrb	r2, [r3, #0]
   23206:	2308      	movs	r3, #8
   23208:	18fb      	adds	r3, r7, r3
   2320a:	0052      	lsls	r2, r2, #1
   2320c:	5cd2      	ldrb	r2, [r2, r3]
   2320e:	2316      	movs	r3, #22
   23210:	18fb      	adds	r3, r7, r3
   23212:	781b      	ldrb	r3, [r3, #0]
   23214:	019b      	lsls	r3, r3, #6
   23216:	6939      	ldr	r1, [r7, #16]
   23218:	18cb      	adds	r3, r1, r3
   2321a:	781b      	ldrb	r3, [r3, #0]
   2321c:	429a      	cmp	r2, r3
   2321e:	d112      	bne.n	23246 <_eeprom_emulator_move_data_to_spare+0xba>
				page_trans[c].physical_page =
   23220:	2317      	movs	r3, #23
   23222:	18fb      	adds	r3, r7, r3
   23224:	781b      	ldrb	r3, [r3, #0]
						(row_number * NVMCTRL_ROW_PAGES) + c2;
   23226:	1dfa      	adds	r2, r7, #7
   23228:	7812      	ldrb	r2, [r2, #0]
   2322a:	0092      	lsls	r2, r2, #2
   2322c:	b2d1      	uxtb	r1, r2
   2322e:	2216      	movs	r2, #22
   23230:	18ba      	adds	r2, r7, r2
   23232:	7812      	ldrb	r2, [r2, #0]
   23234:	188a      	adds	r2, r1, r2
   23236:	b2d1      	uxtb	r1, r2
				page_trans[c].physical_page =
   23238:	2208      	movs	r2, #8
   2323a:	18ba      	adds	r2, r7, r2
   2323c:	005b      	lsls	r3, r3, #1
   2323e:	18d3      	adds	r3, r2, r3
   23240:	3301      	adds	r3, #1
   23242:	1c0a      	adds	r2, r1, #0
   23244:	701a      	strb	r2, [r3, #0]
		for (uint8_t c2 = 2; c2 < NVMCTRL_ROW_PAGES; c2++) {
   23246:	2316      	movs	r3, #22
   23248:	18fb      	adds	r3, r7, r3
   2324a:	781a      	ldrb	r2, [r3, #0]
   2324c:	2316      	movs	r3, #22
   2324e:	18fb      	adds	r3, r7, r3
   23250:	3201      	adds	r2, #1
   23252:	701a      	strb	r2, [r3, #0]
   23254:	2316      	movs	r3, #22
   23256:	18fb      	adds	r3, r7, r3
   23258:	781b      	ldrb	r3, [r3, #0]
   2325a:	2b03      	cmp	r3, #3
   2325c:	d9d0      	bls.n	23200 <_eeprom_emulator_move_data_to_spare+0x74>
	for (uint8_t c = 0; c < 2; c++) {
   2325e:	2317      	movs	r3, #23
   23260:	18fb      	adds	r3, r7, r3
   23262:	781a      	ldrb	r2, [r3, #0]
   23264:	2317      	movs	r3, #23
   23266:	18fb      	adds	r3, r7, r3
   23268:	3201      	adds	r2, #1
   2326a:	701a      	strb	r2, [r3, #0]
   2326c:	2317      	movs	r3, #23
   2326e:	18fb      	adds	r3, r7, r3
   23270:	781b      	ldrb	r3, [r3, #0]
   23272:	2b01      	cmp	r3, #1
   23274:	d9bf      	bls.n	231f6 <_eeprom_emulator_move_data_to_spare+0x6a>
			}
		}
	}

	/* Need to move both saved logical pages stored in the same row */
	for (uint8_t c = 0; c < 2; c++) {
   23276:	2315      	movs	r3, #21
   23278:	18fb      	adds	r3, r7, r3
   2327a:	2200      	movs	r2, #0
   2327c:	701a      	strb	r2, [r3, #0]
   2327e:	e051      	b.n	23324 <_eeprom_emulator_move_data_to_spare+0x198>
		/* Find the physical page index for the new spare row pages */
		uint32_t new_page =
				((_eeprom_instance.spare_row * NVMCTRL_ROW_PAGES) + c);
   23280:	4b33      	ldr	r3, [pc, #204]	; (23350 <_eeprom_emulator_move_data_to_spare+0x1c4>)
   23282:	2287      	movs	r2, #135	; 0x87
   23284:	5c9b      	ldrb	r3, [r3, r2]
   23286:	009a      	lsls	r2, r3, #2
   23288:	2315      	movs	r3, #21
   2328a:	18fb      	adds	r3, r7, r3
   2328c:	781b      	ldrb	r3, [r3, #0]
   2328e:	18d3      	adds	r3, r2, r3
		uint32_t new_page =
   23290:	60fb      	str	r3, [r7, #12]

		/* Commit any cached data to physical non-volatile memory */
		eeprom_emulator_commit_page_buffer();
   23292:	4b30      	ldr	r3, [pc, #192]	; (23354 <_eeprom_emulator_move_data_to_spare+0x1c8>)
   23294:	4798      	blx	r3

		/* Check if we we are looking at the page the calling function wishes
		 * to change during the move operation */
		if (logical_page == page_trans[c].logical_page) {
   23296:	2315      	movs	r3, #21
   23298:	18fb      	adds	r3, r7, r3
   2329a:	781a      	ldrb	r2, [r3, #0]
   2329c:	2308      	movs	r3, #8
   2329e:	18fb      	adds	r3, r7, r3
   232a0:	0052      	lsls	r2, r2, #1
   232a2:	5cd3      	ldrb	r3, [r2, r3]
   232a4:	1dba      	adds	r2, r7, #6
   232a6:	7812      	ldrb	r2, [r2, #0]
   232a8:	429a      	cmp	r2, r3
   232aa:	d10d      	bne.n	232c8 <_eeprom_emulator_move_data_to_spare+0x13c>
			/* Fill out new (updated) logical page's header in the cache */
			_eeprom_instance.cache.header.logical_page = logical_page;
   232ac:	4b28      	ldr	r3, [pc, #160]	; (23350 <_eeprom_emulator_move_data_to_spare+0x1c4>)
   232ae:	1dba      	adds	r2, r7, #6
   232b0:	2188      	movs	r1, #136	; 0x88
   232b2:	7812      	ldrb	r2, [r2, #0]
   232b4:	545a      	strb	r2, [r3, r1]

			/* Write data to SRAM cache */
			memcpy(_eeprom_instance.cache.data, data, EEPROM_PAGE_SIZE);
   232b6:	4b26      	ldr	r3, [pc, #152]	; (23350 <_eeprom_emulator_move_data_to_spare+0x1c4>)
   232b8:	228c      	movs	r2, #140	; 0x8c
   232ba:	6839      	ldr	r1, [r7, #0]
   232bc:	189b      	adds	r3, r3, r2
   232be:	223c      	movs	r2, #60	; 0x3c
   232c0:	0018      	movs	r0, r3
   232c2:	4b25      	ldr	r3, [pc, #148]	; (23358 <_eeprom_emulator_move_data_to_spare+0x1cc>)
   232c4:	4798      	blx	r3
   232c6:	e00e      	b.n	232e6 <_eeprom_emulator_move_data_to_spare+0x15a>
		} else {
			/* Copy existing EEPROM page to cache buffer wholesale */
			_eeprom_emulator_nvm_read_page(
					page_trans[c].physical_page, &_eeprom_instance.cache);
   232c8:	2315      	movs	r3, #21
   232ca:	18fb      	adds	r3, r7, r3
   232cc:	781b      	ldrb	r3, [r3, #0]
   232ce:	2208      	movs	r2, #8
   232d0:	18ba      	adds	r2, r7, r2
   232d2:	005b      	lsls	r3, r3, #1
   232d4:	18d3      	adds	r3, r2, r3
   232d6:	3301      	adds	r3, #1
   232d8:	781b      	ldrb	r3, [r3, #0]
			_eeprom_emulator_nvm_read_page(
   232da:	b29b      	uxth	r3, r3
   232dc:	4a1f      	ldr	r2, [pc, #124]	; (2335c <_eeprom_emulator_move_data_to_spare+0x1d0>)
   232de:	0011      	movs	r1, r2
   232e0:	0018      	movs	r0, r3
   232e2:	4b1f      	ldr	r3, [pc, #124]	; (23360 <_eeprom_emulator_move_data_to_spare+0x1d4>)
   232e4:	4798      	blx	r3
		}

		/* Fill the physical NVM buffer with the new data so that it can be
		 * quickly committed in the future if needed due to a low power
		 * condition */
		_eeprom_emulator_nvm_fill_cache(new_page, &_eeprom_instance.cache);
   232e6:	68fb      	ldr	r3, [r7, #12]
   232e8:	b29b      	uxth	r3, r3
   232ea:	4a1c      	ldr	r2, [pc, #112]	; (2335c <_eeprom_emulator_move_data_to_spare+0x1d0>)
   232ec:	0011      	movs	r1, r2
   232ee:	0018      	movs	r0, r3
   232f0:	4b1c      	ldr	r3, [pc, #112]	; (23364 <_eeprom_emulator_move_data_to_spare+0x1d8>)
   232f2:	4798      	blx	r3

		/* Update the page map with the new page location and indicate that
		 * the cache now holds new data */
		_eeprom_instance.page_map[page_trans[c].logical_page] = new_page;
   232f4:	2315      	movs	r3, #21
   232f6:	18fb      	adds	r3, r7, r3
   232f8:	781a      	ldrb	r2, [r3, #0]
   232fa:	2308      	movs	r3, #8
   232fc:	18fb      	adds	r3, r7, r3
   232fe:	0052      	lsls	r2, r2, #1
   23300:	5cd3      	ldrb	r3, [r2, r3]
   23302:	0019      	movs	r1, r3
   23304:	68fb      	ldr	r3, [r7, #12]
   23306:	b2da      	uxtb	r2, r3
   23308:	4b11      	ldr	r3, [pc, #68]	; (23350 <_eeprom_emulator_move_data_to_spare+0x1c4>)
   2330a:	185b      	adds	r3, r3, r1
   2330c:	72da      	strb	r2, [r3, #11]
		_eeprom_instance.cache_active = true;
   2330e:	4b10      	ldr	r3, [pc, #64]	; (23350 <_eeprom_emulator_move_data_to_spare+0x1c4>)
   23310:	22c8      	movs	r2, #200	; 0xc8
   23312:	2101      	movs	r1, #1
   23314:	5499      	strb	r1, [r3, r2]
	for (uint8_t c = 0; c < 2; c++) {
   23316:	2315      	movs	r3, #21
   23318:	18fb      	adds	r3, r7, r3
   2331a:	781a      	ldrb	r2, [r3, #0]
   2331c:	2315      	movs	r3, #21
   2331e:	18fb      	adds	r3, r7, r3
   23320:	3201      	adds	r2, #1
   23322:	701a      	strb	r2, [r3, #0]
   23324:	2315      	movs	r3, #21
   23326:	18fb      	adds	r3, r7, r3
   23328:	781b      	ldrb	r3, [r3, #0]
   2332a:	2b01      	cmp	r3, #1
   2332c:	d9a8      	bls.n	23280 <_eeprom_emulator_move_data_to_spare+0xf4>
	}

	/* Erase the row that was moved and set it as the new spare row */
	_eeprom_emulator_nvm_erase_row(row_number);
   2332e:	1dfb      	adds	r3, r7, #7
   23330:	781b      	ldrb	r3, [r3, #0]
   23332:	0018      	movs	r0, r3
   23334:	4b0c      	ldr	r3, [pc, #48]	; (23368 <_eeprom_emulator_move_data_to_spare+0x1dc>)
   23336:	4798      	blx	r3

	/* Keep the index of the new spare row */
	_eeprom_instance.spare_row = row_number;
   23338:	4b05      	ldr	r3, [pc, #20]	; (23350 <_eeprom_emulator_move_data_to_spare+0x1c4>)
   2333a:	1dfa      	adds	r2, r7, #7
   2333c:	2187      	movs	r1, #135	; 0x87
   2333e:	7812      	ldrb	r2, [r2, #0]
   23340:	545a      	strb	r2, [r3, r1]

	return error_code;
   23342:	2314      	movs	r3, #20
   23344:	18fb      	adds	r3, r7, r3
   23346:	781b      	ldrb	r3, [r3, #0]
}
   23348:	0018      	movs	r0, r3
   2334a:	46bd      	mov	sp, r7
   2334c:	b006      	add	sp, #24
   2334e:	bd80      	pop	{r7, pc}
   23350:	2000042c 	.word	0x2000042c
   23354:	00023789 	.word	0x00023789
   23358:	000289c5 	.word	0x000289c5
   2335c:	200004b4 	.word	0x200004b4
   23360:	00022ce1 	.word	0x00022ce1
   23364:	00022c45 	.word	0x00022c45
   23368:	00022bfd 	.word	0x00022bfd

0002336c <_eeprom_emulator_create_master_page>:
 *
 * Creates a new master page in emulated EEPROM, giving information on the
 * emulator used to store the EEPROM data.
 */
static void _eeprom_emulator_create_master_page(void)
{
   2336c:	b590      	push	{r4, r7, lr}
   2336e:	b095      	sub	sp, #84	; 0x54
   23370:	af00      	add	r7, sp, #0
	const uint32_t magic_key[] = EEPROM_MAGIC_KEY;
   23372:	2340      	movs	r3, #64	; 0x40
   23374:	18fb      	adds	r3, r7, r3
   23376:	4a29      	ldr	r2, [pc, #164]	; (2341c <_eeprom_emulator_create_master_page+0xb0>)
   23378:	ca13      	ldmia	r2!, {r0, r1, r4}
   2337a:	c313      	stmia	r3!, {r0, r1, r4}

	struct _eeprom_master_page master_page;
	memset(&master_page, 0xFF, sizeof(master_page));
   2337c:	003b      	movs	r3, r7
   2337e:	2240      	movs	r2, #64	; 0x40
   23380:	21ff      	movs	r1, #255	; 0xff
   23382:	0018      	movs	r0, r3
   23384:	4b26      	ldr	r3, [pc, #152]	; (23420 <_eeprom_emulator_create_master_page+0xb4>)
   23386:	4798      	blx	r3

	/* Fill out the magic key header to indicate an initialized master page */
	for (uint8_t c = 0; c < EEPROM_MAGIC_KEY_COUNT; c++) {
   23388:	234f      	movs	r3, #79	; 0x4f
   2338a:	18fb      	adds	r3, r7, r3
   2338c:	2200      	movs	r2, #0
   2338e:	701a      	strb	r2, [r3, #0]
   23390:	e013      	b.n	233ba <_eeprom_emulator_create_master_page+0x4e>
		master_page.magic_key[c] = magic_key[c];
   23392:	234f      	movs	r3, #79	; 0x4f
   23394:	18fb      	adds	r3, r7, r3
   23396:	781a      	ldrb	r2, [r3, #0]
   23398:	234f      	movs	r3, #79	; 0x4f
   2339a:	18fb      	adds	r3, r7, r3
   2339c:	7819      	ldrb	r1, [r3, #0]
   2339e:	2340      	movs	r3, #64	; 0x40
   233a0:	18fb      	adds	r3, r7, r3
   233a2:	0089      	lsls	r1, r1, #2
   233a4:	58c9      	ldr	r1, [r1, r3]
   233a6:	003b      	movs	r3, r7
   233a8:	0092      	lsls	r2, r2, #2
   233aa:	50d1      	str	r1, [r2, r3]
	for (uint8_t c = 0; c < EEPROM_MAGIC_KEY_COUNT; c++) {
   233ac:	234f      	movs	r3, #79	; 0x4f
   233ae:	18fb      	adds	r3, r7, r3
   233b0:	781a      	ldrb	r2, [r3, #0]
   233b2:	234f      	movs	r3, #79	; 0x4f
   233b4:	18fb      	adds	r3, r7, r3
   233b6:	3201      	adds	r2, #1
   233b8:	701a      	strb	r2, [r3, #0]
   233ba:	234f      	movs	r3, #79	; 0x4f
   233bc:	18fb      	adds	r3, r7, r3
   233be:	781b      	ldrb	r3, [r3, #0]
   233c0:	2b02      	cmp	r3, #2
   233c2:	d9e6      	bls.n	23392 <_eeprom_emulator_create_master_page+0x26>
	}

	/* Update master header with version information of this emulator */
	master_page.emulator_id   = EEPROM_EMULATOR_ID;
   233c4:	003b      	movs	r3, r7
   233c6:	2201      	movs	r2, #1
   233c8:	73da      	strb	r2, [r3, #15]
	master_page.major_version = EEPROM_MAJOR_VERSION;
   233ca:	003b      	movs	r3, r7
   233cc:	2201      	movs	r2, #1
   233ce:	731a      	strb	r2, [r3, #12]
	master_page.minor_version = EEPROM_MINOR_VERSION;
   233d0:	003b      	movs	r3, r7
   233d2:	2200      	movs	r2, #0
   233d4:	735a      	strb	r2, [r3, #13]
	master_page.revision      = EEPROM_REVISION;
   233d6:	003b      	movs	r3, r7
   233d8:	2200      	movs	r2, #0
   233da:	739a      	strb	r2, [r3, #14]

	_eeprom_emulator_nvm_erase_row(
			EEPROM_MASTER_PAGE_NUMBER / NVMCTRL_ROW_PAGES);
   233dc:	4b11      	ldr	r3, [pc, #68]	; (23424 <_eeprom_emulator_create_master_page+0xb8>)
   233de:	891b      	ldrh	r3, [r3, #8]
   233e0:	3b01      	subs	r3, #1
   233e2:	2b00      	cmp	r3, #0
   233e4:	da00      	bge.n	233e8 <_eeprom_emulator_create_master_page+0x7c>
   233e6:	3303      	adds	r3, #3
   233e8:	109b      	asrs	r3, r3, #2
	_eeprom_emulator_nvm_erase_row(
   233ea:	b2db      	uxtb	r3, r3
   233ec:	0018      	movs	r0, r3
   233ee:	4b0e      	ldr	r3, [pc, #56]	; (23428 <_eeprom_emulator_create_master_page+0xbc>)
   233f0:	4798      	blx	r3

	/* Write the new master page data to physical memory */
	_eeprom_emulator_nvm_fill_cache(EEPROM_MASTER_PAGE_NUMBER, &master_page);
   233f2:	4b0c      	ldr	r3, [pc, #48]	; (23424 <_eeprom_emulator_create_master_page+0xb8>)
   233f4:	891b      	ldrh	r3, [r3, #8]
   233f6:	3b01      	subs	r3, #1
   233f8:	b29b      	uxth	r3, r3
   233fa:	003a      	movs	r2, r7
   233fc:	0011      	movs	r1, r2
   233fe:	0018      	movs	r0, r3
   23400:	4b0a      	ldr	r3, [pc, #40]	; (2342c <_eeprom_emulator_create_master_page+0xc0>)
   23402:	4798      	blx	r3
	_eeprom_emulator_nvm_commit_cache(EEPROM_MASTER_PAGE_NUMBER);
   23404:	4b07      	ldr	r3, [pc, #28]	; (23424 <_eeprom_emulator_create_master_page+0xb8>)
   23406:	891b      	ldrh	r3, [r3, #8]
   23408:	3b01      	subs	r3, #1
   2340a:	b29b      	uxth	r3, r3
   2340c:	0018      	movs	r0, r3
   2340e:	4b08      	ldr	r3, [pc, #32]	; (23430 <_eeprom_emulator_create_master_page+0xc4>)
   23410:	4798      	blx	r3
}
   23412:	46c0      	nop			; (mov r8, r8)
   23414:	46bd      	mov	sp, r7
   23416:	b015      	add	sp, #84	; 0x54
   23418:	bd90      	pop	{r4, r7, pc}
   2341a:	46c0      	nop			; (mov r8, r8)
   2341c:	0002a784 	.word	0x0002a784
   23420:	000289fb 	.word	0x000289fb
   23424:	2000042c 	.word	0x2000042c
   23428:	00022bfd 	.word	0x00022bfd
   2342c:	00022c45 	.word	0x00022c45
   23430:	00022c95 	.word	0x00022c95

00023434 <_eeprom_emulator_verify_master_page>:
 * \retval STATUS_ERR_BAD_FORMAT  Master page contents was invalid
 * \retval STATUS_ERR_IO          Master page indicates the data is incompatible
 *                                with this version of the EEPROM emulator
 */
static enum status_code _eeprom_emulator_verify_master_page(void)
{
   23434:	b590      	push	{r4, r7, lr}
   23436:	b095      	sub	sp, #84	; 0x54
   23438:	af00      	add	r7, sp, #0
	const uint32_t magic_key[] = EEPROM_MAGIC_KEY;
   2343a:	2340      	movs	r3, #64	; 0x40
   2343c:	18fb      	adds	r3, r7, r3
   2343e:	4a22      	ldr	r2, [pc, #136]	; (234c8 <_eeprom_emulator_verify_master_page+0x94>)
   23440:	ca13      	ldmia	r2!, {r0, r1, r4}
   23442:	c313      	stmia	r3!, {r0, r1, r4}
	struct _eeprom_master_page master_page;

	/* Copy the master page to the RAM buffer so that it can be inspected */
	_eeprom_emulator_nvm_read_page(EEPROM_MASTER_PAGE_NUMBER, &master_page);
   23444:	4b21      	ldr	r3, [pc, #132]	; (234cc <_eeprom_emulator_verify_master_page+0x98>)
   23446:	891b      	ldrh	r3, [r3, #8]
   23448:	3b01      	subs	r3, #1
   2344a:	b29b      	uxth	r3, r3
   2344c:	003a      	movs	r2, r7
   2344e:	0011      	movs	r1, r2
   23450:	0018      	movs	r0, r3
   23452:	4b1f      	ldr	r3, [pc, #124]	; (234d0 <_eeprom_emulator_verify_master_page+0x9c>)
   23454:	4798      	blx	r3

	/* Verify magic key is correct in the master page header */
	for (uint8_t c = 0; c < EEPROM_MAGIC_KEY_COUNT; c++) {
   23456:	234f      	movs	r3, #79	; 0x4f
   23458:	18fb      	adds	r3, r7, r3
   2345a:	2200      	movs	r2, #0
   2345c:	701a      	strb	r2, [r3, #0]
   2345e:	e017      	b.n	23490 <_eeprom_emulator_verify_master_page+0x5c>
		if (master_page.magic_key[c] != magic_key[c]) {
   23460:	234f      	movs	r3, #79	; 0x4f
   23462:	18fb      	adds	r3, r7, r3
   23464:	781a      	ldrb	r2, [r3, #0]
   23466:	003b      	movs	r3, r7
   23468:	0092      	lsls	r2, r2, #2
   2346a:	58d2      	ldr	r2, [r2, r3]
   2346c:	234f      	movs	r3, #79	; 0x4f
   2346e:	18fb      	adds	r3, r7, r3
   23470:	7819      	ldrb	r1, [r3, #0]
   23472:	2340      	movs	r3, #64	; 0x40
   23474:	18fb      	adds	r3, r7, r3
   23476:	0089      	lsls	r1, r1, #2
   23478:	58cb      	ldr	r3, [r1, r3]
   2347a:	429a      	cmp	r2, r3
   2347c:	d001      	beq.n	23482 <_eeprom_emulator_verify_master_page+0x4e>
			return STATUS_ERR_BAD_FORMAT;
   2347e:	231a      	movs	r3, #26
   23480:	e01e      	b.n	234c0 <_eeprom_emulator_verify_master_page+0x8c>
	for (uint8_t c = 0; c < EEPROM_MAGIC_KEY_COUNT; c++) {
   23482:	234f      	movs	r3, #79	; 0x4f
   23484:	18fb      	adds	r3, r7, r3
   23486:	781a      	ldrb	r2, [r3, #0]
   23488:	234f      	movs	r3, #79	; 0x4f
   2348a:	18fb      	adds	r3, r7, r3
   2348c:	3201      	adds	r2, #1
   2348e:	701a      	strb	r2, [r3, #0]
   23490:	234f      	movs	r3, #79	; 0x4f
   23492:	18fb      	adds	r3, r7, r3
   23494:	781b      	ldrb	r3, [r3, #0]
   23496:	2b02      	cmp	r3, #2
   23498:	d9e2      	bls.n	23460 <_eeprom_emulator_verify_master_page+0x2c>
		}
	}

	/* Verify emulator ID in header to ensure the same scheme is used */
	if (master_page.emulator_id   != EEPROM_EMULATOR_ID) {
   2349a:	003b      	movs	r3, r7
   2349c:	7bdb      	ldrb	r3, [r3, #15]
   2349e:	2b01      	cmp	r3, #1
   234a0:	d001      	beq.n	234a6 <_eeprom_emulator_verify_master_page+0x72>
		return STATUS_ERR_IO;
   234a2:	2310      	movs	r3, #16
   234a4:	e00c      	b.n	234c0 <_eeprom_emulator_verify_master_page+0x8c>
	}

	/* Verify major version in header to ensure the same version is used */
	if (master_page.major_version != EEPROM_MAJOR_VERSION) {
   234a6:	003b      	movs	r3, r7
   234a8:	7b1b      	ldrb	r3, [r3, #12]
   234aa:	2b01      	cmp	r3, #1
   234ac:	d001      	beq.n	234b2 <_eeprom_emulator_verify_master_page+0x7e>
		return STATUS_ERR_IO;
   234ae:	2310      	movs	r3, #16
   234b0:	e006      	b.n	234c0 <_eeprom_emulator_verify_master_page+0x8c>
	}

	/* Verify minor version in header to ensure the same version is used */
	if (master_page.minor_version != EEPROM_MINOR_VERSION) {
   234b2:	003b      	movs	r3, r7
   234b4:	7b5b      	ldrb	r3, [r3, #13]
   234b6:	2b00      	cmp	r3, #0
   234b8:	d001      	beq.n	234be <_eeprom_emulator_verify_master_page+0x8a>
		return STATUS_ERR_IO;
   234ba:	2310      	movs	r3, #16
   234bc:	e000      	b.n	234c0 <_eeprom_emulator_verify_master_page+0x8c>
	}

	/* Don't verify revision number - same major/minor is considered enough
	 * to ensure the stored data is compatible. */

	return STATUS_OK;
   234be:	2300      	movs	r3, #0
}
   234c0:	0018      	movs	r0, r3
   234c2:	46bd      	mov	sp, r7
   234c4:	b015      	add	sp, #84	; 0x54
   234c6:	bd90      	pop	{r4, r7, pc}
   234c8:	0002a784 	.word	0x0002a784
   234cc:	2000042c 	.word	0x2000042c
   234d0:	00022ce1 	.word	0x00022ce1

000234d4 <eeprom_emulator_init>:
 *                                formatted
 * \retval STATUS_ERR_IO          EEPROM data is incompatible with this version
 *                                or scheme of the EEPROM emulator
 */
enum status_code eeprom_emulator_init(void)
{
   234d4:	b590      	push	{r4, r7, lr}
   234d6:	b087      	sub	sp, #28
   234d8:	af00      	add	r7, sp, #0
	enum status_code error_code = STATUS_OK;
   234da:	2317      	movs	r3, #23
   234dc:	18fb      	adds	r3, r7, r3
   234de:	2200      	movs	r2, #0
   234e0:	701a      	strb	r2, [r3, #0]
	struct nvm_parameters parameters;

	/* Retrieve the NVM controller configuration - enable manual page writing
	 * mode so that the emulator has exclusive control over page writes to
	 * allow for caching */
	nvm_get_config_defaults(&config);
   234e2:	2310      	movs	r3, #16
   234e4:	18fb      	adds	r3, r7, r3
   234e6:	0018      	movs	r0, r3
   234e8:	4b2e      	ldr	r3, [pc, #184]	; (235a4 <eeprom_emulator_init+0xd0>)
   234ea:	4798      	blx	r3
	config.manual_page_write = true;
   234ec:	2310      	movs	r3, #16
   234ee:	18fb      	adds	r3, r7, r3
   234f0:	2201      	movs	r2, #1
   234f2:	705a      	strb	r2, [r3, #1]

	/* Apply new NVM configuration */
	do {
		error_code = nvm_set_config(&config);
   234f4:	2317      	movs	r3, #23
   234f6:	18fc      	adds	r4, r7, r3
   234f8:	2310      	movs	r3, #16
   234fa:	18fb      	adds	r3, r7, r3
   234fc:	0018      	movs	r0, r3
   234fe:	4b2a      	ldr	r3, [pc, #168]	; (235a8 <eeprom_emulator_init+0xd4>)
   23500:	4798      	blx	r3
   23502:	0003      	movs	r3, r0
   23504:	7023      	strb	r3, [r4, #0]
	} while (error_code == STATUS_BUSY);
   23506:	2317      	movs	r3, #23
   23508:	18fb      	adds	r3, r7, r3
   2350a:	781b      	ldrb	r3, [r3, #0]
   2350c:	2b05      	cmp	r3, #5
   2350e:	d0f1      	beq.n	234f4 <eeprom_emulator_init+0x20>

	/* Get the NVM controller configuration parameters */
	nvm_get_parameters(&parameters);
   23510:	1d3b      	adds	r3, r7, #4
   23512:	0018      	movs	r0, r3
   23514:	4b25      	ldr	r3, [pc, #148]	; (235ac <eeprom_emulator_init+0xd8>)
   23516:	4798      	blx	r3

	/* Ensure the device fuses are configured for at least one master page row,
	 * one user EEPROM data row and one spare row */
	if (parameters.eeprom_number_of_pages < (3 * NVMCTRL_ROW_PAGES)) {
   23518:	1d3b      	adds	r3, r7, #4
   2351a:	685b      	ldr	r3, [r3, #4]
   2351c:	2b0b      	cmp	r3, #11
   2351e:	d801      	bhi.n	23524 <eeprom_emulator_init+0x50>
		return STATUS_ERR_NO_MEMORY;
   23520:	2316      	movs	r3, #22
   23522:	e03b      	b.n	2359c <eeprom_emulator_init+0xc8>
	 *  - One row is reserved for the master page
	 *  - One row is reserved for the spare row
	 *  - Two logical pages can be stored in one physical row
	 */
	_eeprom_instance.physical_pages =
			parameters.eeprom_number_of_pages;
   23524:	1d3b      	adds	r3, r7, #4
   23526:	685b      	ldr	r3, [r3, #4]
	_eeprom_instance.physical_pages =
   23528:	b29a      	uxth	r2, r3
   2352a:	4b21      	ldr	r3, [pc, #132]	; (235b0 <eeprom_emulator_init+0xdc>)
   2352c:	811a      	strh	r2, [r3, #8]
	_eeprom_instance.logical_pages  =
			(parameters.eeprom_number_of_pages - (2 * NVMCTRL_ROW_PAGES)) / 2;
   2352e:	1d3b      	adds	r3, r7, #4
   23530:	685b      	ldr	r3, [r3, #4]
   23532:	3b08      	subs	r3, #8
   23534:	085b      	lsrs	r3, r3, #1
	_eeprom_instance.logical_pages  =
   23536:	b2da      	uxtb	r2, r3
   23538:	4b1d      	ldr	r3, [pc, #116]	; (235b0 <eeprom_emulator_init+0xdc>)
   2353a:	729a      	strb	r2, [r3, #10]

	/* Configure the EEPROM instance starting physical address in FLASH and
	 * pre-compute the index of the first page in FLASH used for EEPROM */
	_eeprom_instance.flash =
			(void*)(FLASH_SIZE -
			((uint32_t)_eeprom_instance.physical_pages * NVMCTRL_PAGE_SIZE));
   2353c:	4b1c      	ldr	r3, [pc, #112]	; (235b0 <eeprom_emulator_init+0xdc>)
   2353e:	891b      	ldrh	r3, [r3, #8]
   23540:	001a      	movs	r2, r3
			(void*)(FLASH_SIZE -
   23542:	0013      	movs	r3, r2
   23544:	069b      	lsls	r3, r3, #26
   23546:	1a9b      	subs	r3, r3, r2
   23548:	019b      	lsls	r3, r3, #6
   2354a:	2280      	movs	r2, #128	; 0x80
   2354c:	02d2      	lsls	r2, r2, #11
   2354e:	4694      	mov	ip, r2
   23550:	4463      	add	r3, ip
   23552:	001a      	movs	r2, r3
	_eeprom_instance.flash =
   23554:	4b16      	ldr	r3, [pc, #88]	; (235b0 <eeprom_emulator_init+0xdc>)
   23556:	605a      	str	r2, [r3, #4]

	/* Clear EEPROM page write cache on initialization */
	_eeprom_instance.cache_active = false;
   23558:	4b15      	ldr	r3, [pc, #84]	; (235b0 <eeprom_emulator_init+0xdc>)
   2355a:	22c8      	movs	r2, #200	; 0xc8
   2355c:	2100      	movs	r1, #0
   2355e:	5499      	strb	r1, [r3, r2]

	/* Scan physical memory and re-create logical to physical page mapping
	 * table to locate logical pages of EEPROM data in physical FLASH */
	_eeprom_emulator_update_page_mapping();
   23560:	4b14      	ldr	r3, [pc, #80]	; (235b4 <eeprom_emulator_init+0xe0>)
   23562:	4798      	blx	r3

	/* Could not find spare row - abort as the memory appears to be corrupt */
	if (_eeprom_instance.spare_row == EEPROM_INVALID_ROW_NUMBER) {
   23564:	4b12      	ldr	r3, [pc, #72]	; (235b0 <eeprom_emulator_init+0xdc>)
   23566:	2287      	movs	r2, #135	; 0x87
   23568:	5c9b      	ldrb	r3, [r3, r2]
   2356a:	2b3f      	cmp	r3, #63	; 0x3f
   2356c:	d101      	bne.n	23572 <eeprom_emulator_init+0x9e>
		return STATUS_ERR_BAD_FORMAT;
   2356e:	231a      	movs	r3, #26
   23570:	e014      	b.n	2359c <eeprom_emulator_init+0xc8>
	}

	/* Verify that the master page contains valid data for this service */
	error_code = _eeprom_emulator_verify_master_page();
   23572:	2317      	movs	r3, #23
   23574:	18fc      	adds	r4, r7, r3
   23576:	4b10      	ldr	r3, [pc, #64]	; (235b8 <eeprom_emulator_init+0xe4>)
   23578:	4798      	blx	r3
   2357a:	0003      	movs	r3, r0
   2357c:	7023      	strb	r3, [r4, #0]
	if (error_code != STATUS_OK) {
   2357e:	2317      	movs	r3, #23
   23580:	18fb      	adds	r3, r7, r3
   23582:	781b      	ldrb	r3, [r3, #0]
   23584:	2b00      	cmp	r3, #0
   23586:	d003      	beq.n	23590 <eeprom_emulator_init+0xbc>
		return error_code;
   23588:	2317      	movs	r3, #23
   2358a:	18fb      	adds	r3, r7, r3
   2358c:	781b      	ldrb	r3, [r3, #0]
   2358e:	e005      	b.n	2359c <eeprom_emulator_init+0xc8>
	}

	/* Mark initialization as complete */
	_eeprom_instance.initialized = true;
   23590:	4b07      	ldr	r3, [pc, #28]	; (235b0 <eeprom_emulator_init+0xdc>)
   23592:	2201      	movs	r2, #1
   23594:	701a      	strb	r2, [r3, #0]

	return error_code;
   23596:	2317      	movs	r3, #23
   23598:	18fb      	adds	r3, r7, r3
   2359a:	781b      	ldrb	r3, [r3, #0]
}
   2359c:	0018      	movs	r0, r3
   2359e:	46bd      	mov	sp, r7
   235a0:	b007      	add	sp, #28
   235a2:	bd90      	pop	{r4, r7, pc}
   235a4:	00022bc1 	.word	0x00022bc1
   235a8:	0002259d 	.word	0x0002259d
   235ac:	00022a7d 	.word	0x00022a7d
   235b0:	2000042c 	.word	0x2000042c
   235b4:	00022fa1 	.word	0x00022fa1
   235b8:	00023435 	.word	0x00023435

000235bc <eeprom_emulator_erase_memory>:
 *
 * Erases and re-initializes the emulated EEPROM memory space, destroying any
 * existing data.
 */
void eeprom_emulator_erase_memory(void)
{
   235bc:	b580      	push	{r7, lr}
   235be:	af00      	add	r7, sp, #0
	/* Create new EEPROM memory block in EEPROM emulation section */
	_eeprom_emulator_format_memory();
   235c0:	4b04      	ldr	r3, [pc, #16]	; (235d4 <eeprom_emulator_erase_memory+0x18>)
   235c2:	4798      	blx	r3

	/* Write EEPROM emulation master block */
	_eeprom_emulator_create_master_page();
   235c4:	4b04      	ldr	r3, [pc, #16]	; (235d8 <eeprom_emulator_erase_memory+0x1c>)
   235c6:	4798      	blx	r3

	/* Map the newly created EEPROM memory block */
	_eeprom_emulator_update_page_mapping();
   235c8:	4b04      	ldr	r3, [pc, #16]	; (235dc <eeprom_emulator_erase_memory+0x20>)
   235ca:	4798      	blx	r3
}
   235cc:	46c0      	nop			; (mov r8, r8)
   235ce:	46bd      	mov	sp, r7
   235d0:	bd80      	pop	{r7, pc}
   235d2:	46c0      	nop			; (mov r8, r8)
   235d4:	00022d31 	.word	0x00022d31
   235d8:	0002336d 	.word	0x0002336d
   235dc:	00022fa1 	.word	0x00022fa1

000235e0 <eeprom_emulator_write_page>:
 *                                      EEPROM memory space was supplied
 */
enum status_code eeprom_emulator_write_page(
		const uint8_t logical_page,
		const uint8_t *const data)
{
   235e0:	b590      	push	{r4, r7, lr}
   235e2:	b085      	sub	sp, #20
   235e4:	af00      	add	r7, sp, #0
   235e6:	0002      	movs	r2, r0
   235e8:	6039      	str	r1, [r7, #0]
   235ea:	1dfb      	adds	r3, r7, #7
   235ec:	701a      	strb	r2, [r3, #0]
	/* Ensure the emulated EEPROM has been initialized first */
	if (_eeprom_instance.initialized == false) {
   235ee:	4b38      	ldr	r3, [pc, #224]	; (236d0 <eeprom_emulator_write_page+0xf0>)
   235f0:	781b      	ldrb	r3, [r3, #0]
   235f2:	2201      	movs	r2, #1
   235f4:	4053      	eors	r3, r2
   235f6:	b2db      	uxtb	r3, r3
   235f8:	2b00      	cmp	r3, #0
   235fa:	d001      	beq.n	23600 <eeprom_emulator_write_page+0x20>
		return STATUS_ERR_NOT_INITIALIZED;
   235fc:	231f      	movs	r3, #31
   235fe:	e063      	b.n	236c8 <eeprom_emulator_write_page+0xe8>
	}

	/* Make sure the write address is within the allowable address space */
	if (logical_page >= _eeprom_instance.logical_pages) {
   23600:	4b33      	ldr	r3, [pc, #204]	; (236d0 <eeprom_emulator_write_page+0xf0>)
   23602:	7a9b      	ldrb	r3, [r3, #10]
   23604:	1dfa      	adds	r2, r7, #7
   23606:	7812      	ldrb	r2, [r2, #0]
   23608:	429a      	cmp	r2, r3
   2360a:	d301      	bcc.n	23610 <eeprom_emulator_write_page+0x30>
		return STATUS_ERR_BAD_ADDRESS;
   2360c:	2318      	movs	r3, #24
   2360e:	e05b      	b.n	236c8 <eeprom_emulator_write_page+0xe8>
	}

	/* Check if the cache is active and the currently cached page is not the
	 * page that is being written (if not, we need to commit and cache the new
	 * page) */
	if ((_eeprom_instance.cache_active == true) &&
   23610:	4b2f      	ldr	r3, [pc, #188]	; (236d0 <eeprom_emulator_write_page+0xf0>)
   23612:	22c8      	movs	r2, #200	; 0xc8
   23614:	5c9b      	ldrb	r3, [r3, r2]
   23616:	2b00      	cmp	r3, #0
   23618:	d008      	beq.n	2362c <eeprom_emulator_write_page+0x4c>
			(_eeprom_instance.cache.header.logical_page != logical_page)) {
   2361a:	4b2d      	ldr	r3, [pc, #180]	; (236d0 <eeprom_emulator_write_page+0xf0>)
   2361c:	2288      	movs	r2, #136	; 0x88
   2361e:	5c9b      	ldrb	r3, [r3, r2]
	if ((_eeprom_instance.cache_active == true) &&
   23620:	1dfa      	adds	r2, r7, #7
   23622:	7812      	ldrb	r2, [r2, #0]
   23624:	429a      	cmp	r2, r3
   23626:	d001      	beq.n	2362c <eeprom_emulator_write_page+0x4c>
		/* Commit the currently cached data buffer to non-volatile memory */
		eeprom_emulator_commit_page_buffer();
   23628:	4b2a      	ldr	r3, [pc, #168]	; (236d4 <eeprom_emulator_write_page+0xf4>)
   2362a:	4798      	blx	r3
	}

	/* Check if we have space in the current page location's physical row for
	 * a new version, and if so get the new page index */
	uint8_t new_page = 0;
   2362c:	230e      	movs	r3, #14
   2362e:	18fb      	adds	r3, r7, r3
   23630:	2200      	movs	r2, #0
   23632:	701a      	strb	r2, [r3, #0]
	bool page_spare  = _eeprom_emulator_is_page_free_on_row(
   23634:	1dfb      	adds	r3, r7, #7
   23636:	781b      	ldrb	r3, [r3, #0]
   23638:	4a25      	ldr	r2, [pc, #148]	; (236d0 <eeprom_emulator_write_page+0xf0>)
   2363a:	18d3      	adds	r3, r2, r3
   2363c:	7adb      	ldrb	r3, [r3, #11]
   2363e:	220f      	movs	r2, #15
   23640:	18bc      	adds	r4, r7, r2
   23642:	220e      	movs	r2, #14
   23644:	18ba      	adds	r2, r7, r2
   23646:	0011      	movs	r1, r2
   23648:	0018      	movs	r0, r3
   2364a:	4b23      	ldr	r3, [pc, #140]	; (236d8 <eeprom_emulator_write_page+0xf8>)
   2364c:	4798      	blx	r3
   2364e:	0003      	movs	r3, r0
   23650:	7023      	strb	r3, [r4, #0]
			_eeprom_instance.page_map[logical_page], &new_page);

	/* Check if the current row is full, and we need to swap it out with a
	 * spare row */
	if (page_spare == false) {
   23652:	230f      	movs	r3, #15
   23654:	18fb      	adds	r3, r7, r3
   23656:	781b      	ldrb	r3, [r3, #0]
   23658:	2201      	movs	r2, #1
   2365a:	4053      	eors	r3, r2
   2365c:	b2db      	uxtb	r3, r3
   2365e:	2b00      	cmp	r3, #0
   23660:	d00e      	beq.n	23680 <eeprom_emulator_write_page+0xa0>
		/* Move the other page we aren't writing that is stored in the same
		 * page to the new row, and replace the old current page with the
		 * new page contents (cache is updated to match) */
		_eeprom_emulator_move_data_to_spare(
				_eeprom_instance.page_map[logical_page] / NVMCTRL_ROW_PAGES,
   23662:	1dfb      	adds	r3, r7, #7
   23664:	781b      	ldrb	r3, [r3, #0]
   23666:	4a1a      	ldr	r2, [pc, #104]	; (236d0 <eeprom_emulator_write_page+0xf0>)
   23668:	18d3      	adds	r3, r2, r3
   2366a:	7adb      	ldrb	r3, [r3, #11]
		_eeprom_emulator_move_data_to_spare(
   2366c:	089b      	lsrs	r3, r3, #2
   2366e:	b2d8      	uxtb	r0, r3
   23670:	683a      	ldr	r2, [r7, #0]
   23672:	1dfb      	adds	r3, r7, #7
   23674:	781b      	ldrb	r3, [r3, #0]
   23676:	0019      	movs	r1, r3
   23678:	4b18      	ldr	r3, [pc, #96]	; (236dc <eeprom_emulator_write_page+0xfc>)
   2367a:	4798      	blx	r3
				logical_page,
				data);

		/* New data is now written and the cache is updated, exit */
		return STATUS_OK;
   2367c:	2300      	movs	r3, #0
   2367e:	e023      	b.n	236c8 <eeprom_emulator_write_page+0xe8>
	}

	/* Update the page cache header section with the new page header */
	_eeprom_instance.cache.header.logical_page = logical_page;
   23680:	4b13      	ldr	r3, [pc, #76]	; (236d0 <eeprom_emulator_write_page+0xf0>)
   23682:	1dfa      	adds	r2, r7, #7
   23684:	2188      	movs	r1, #136	; 0x88
   23686:	7812      	ldrb	r2, [r2, #0]
   23688:	545a      	strb	r2, [r3, r1]

	/* Update the page cache contents with the new data */
	memcpy(&_eeprom_instance.cache.data,
   2368a:	4b11      	ldr	r3, [pc, #68]	; (236d0 <eeprom_emulator_write_page+0xf0>)
   2368c:	228c      	movs	r2, #140	; 0x8c
   2368e:	6839      	ldr	r1, [r7, #0]
   23690:	189b      	adds	r3, r3, r2
   23692:	223c      	movs	r2, #60	; 0x3c
   23694:	0018      	movs	r0, r3
   23696:	4b12      	ldr	r3, [pc, #72]	; (236e0 <eeprom_emulator_write_page+0x100>)
   23698:	4798      	blx	r3
			data,
			EEPROM_PAGE_SIZE);

	/* Fill the physical NVM buffer with the new data so that it can be quickly
	 * committed in the future if needed due to a low power condition */
	_eeprom_emulator_nvm_fill_cache(new_page, &_eeprom_instance.cache);
   2369a:	230e      	movs	r3, #14
   2369c:	18fb      	adds	r3, r7, r3
   2369e:	781b      	ldrb	r3, [r3, #0]
   236a0:	b29b      	uxth	r3, r3
   236a2:	4a10      	ldr	r2, [pc, #64]	; (236e4 <eeprom_emulator_write_page+0x104>)
   236a4:	0011      	movs	r1, r2
   236a6:	0018      	movs	r0, r3
   236a8:	4b0f      	ldr	r3, [pc, #60]	; (236e8 <eeprom_emulator_write_page+0x108>)
   236aa:	4798      	blx	r3

	/* Update the cache parameters and mark the cache as active */
	_eeprom_instance.page_map[logical_page] = new_page;
   236ac:	1dfb      	adds	r3, r7, #7
   236ae:	781b      	ldrb	r3, [r3, #0]
   236b0:	220e      	movs	r2, #14
   236b2:	18ba      	adds	r2, r7, r2
   236b4:	7811      	ldrb	r1, [r2, #0]
   236b6:	4a06      	ldr	r2, [pc, #24]	; (236d0 <eeprom_emulator_write_page+0xf0>)
   236b8:	18d3      	adds	r3, r2, r3
   236ba:	1c0a      	adds	r2, r1, #0
   236bc:	72da      	strb	r2, [r3, #11]
	barrier(); // Enforce ordering to prevent incorrect cache state
	_eeprom_instance.cache_active           = true;
   236be:	4b04      	ldr	r3, [pc, #16]	; (236d0 <eeprom_emulator_write_page+0xf0>)
   236c0:	22c8      	movs	r2, #200	; 0xc8
   236c2:	2101      	movs	r1, #1
   236c4:	5499      	strb	r1, [r3, r2]

	return STATUS_OK;
   236c6:	2300      	movs	r3, #0
}
   236c8:	0018      	movs	r0, r3
   236ca:	46bd      	mov	sp, r7
   236cc:	b005      	add	sp, #20
   236ce:	bd90      	pop	{r4, r7, pc}
   236d0:	2000042c 	.word	0x2000042c
   236d4:	00023789 	.word	0x00023789
   236d8:	000230f5 	.word	0x000230f5
   236dc:	0002318d 	.word	0x0002318d
   236e0:	000289c5 	.word	0x000289c5
   236e4:	200004b4 	.word	0x200004b4
   236e8:	00022c45 	.word	0x00022c45

000236ec <eeprom_emulator_read_page>:
 *                                      EEPROM memory space was supplied
 */
enum status_code eeprom_emulator_read_page(
		const uint8_t logical_page,
		uint8_t *const data)
{
   236ec:	b580      	push	{r7, lr}
   236ee:	b092      	sub	sp, #72	; 0x48
   236f0:	af00      	add	r7, sp, #0
   236f2:	0002      	movs	r2, r0
   236f4:	6039      	str	r1, [r7, #0]
   236f6:	1dfb      	adds	r3, r7, #7
   236f8:	701a      	strb	r2, [r3, #0]
	/* Ensure the emulated EEPROM has been initialized first */
	if (_eeprom_instance.initialized == false) {
   236fa:	4b20      	ldr	r3, [pc, #128]	; (2377c <eeprom_emulator_read_page+0x90>)
   236fc:	781b      	ldrb	r3, [r3, #0]
   236fe:	2201      	movs	r2, #1
   23700:	4053      	eors	r3, r2
   23702:	b2db      	uxtb	r3, r3
   23704:	2b00      	cmp	r3, #0
   23706:	d001      	beq.n	2370c <eeprom_emulator_read_page+0x20>
		return STATUS_ERR_NOT_INITIALIZED;
   23708:	231f      	movs	r3, #31
   2370a:	e033      	b.n	23774 <eeprom_emulator_read_page+0x88>
	}

	/* Make sure the read address is within the allowable address space */
	if (logical_page >= _eeprom_instance.logical_pages) {
   2370c:	4b1b      	ldr	r3, [pc, #108]	; (2377c <eeprom_emulator_read_page+0x90>)
   2370e:	7a9b      	ldrb	r3, [r3, #10]
   23710:	1dfa      	adds	r2, r7, #7
   23712:	7812      	ldrb	r2, [r2, #0]
   23714:	429a      	cmp	r2, r3
   23716:	d301      	bcc.n	2371c <eeprom_emulator_read_page+0x30>
		return STATUS_ERR_BAD_ADDRESS;
   23718:	2318      	movs	r3, #24
   2371a:	e02b      	b.n	23774 <eeprom_emulator_read_page+0x88>
	}

	/* Check if the page to read is currently cached (and potentially out of
	 * sync/newer than the physical memory) */
	if ((_eeprom_instance.cache_active == true) &&
   2371c:	4b17      	ldr	r3, [pc, #92]	; (2377c <eeprom_emulator_read_page+0x90>)
   2371e:	22c8      	movs	r2, #200	; 0xc8
   23720:	5c9b      	ldrb	r3, [r3, r2]
   23722:	2b00      	cmp	r3, #0
   23724:	d010      	beq.n	23748 <eeprom_emulator_read_page+0x5c>
		 (_eeprom_instance.cache.header.logical_page == logical_page)) {
   23726:	4b15      	ldr	r3, [pc, #84]	; (2377c <eeprom_emulator_read_page+0x90>)
   23728:	2288      	movs	r2, #136	; 0x88
   2372a:	5c9b      	ldrb	r3, [r3, r2]
	if ((_eeprom_instance.cache_active == true) &&
   2372c:	1dfa      	adds	r2, r7, #7
   2372e:	7812      	ldrb	r2, [r2, #0]
   23730:	429a      	cmp	r2, r3
   23732:	d109      	bne.n	23748 <eeprom_emulator_read_page+0x5c>
		/* Copy the potentially newer cached data into the user buffer */
		memcpy(data, _eeprom_instance.cache.data, EEPROM_PAGE_SIZE);
   23734:	6839      	ldr	r1, [r7, #0]
   23736:	4b11      	ldr	r3, [pc, #68]	; (2377c <eeprom_emulator_read_page+0x90>)
   23738:	228c      	movs	r2, #140	; 0x8c
   2373a:	0008      	movs	r0, r1
   2373c:	189b      	adds	r3, r3, r2
   2373e:	223c      	movs	r2, #60	; 0x3c
   23740:	0019      	movs	r1, r3
   23742:	4b0f      	ldr	r3, [pc, #60]	; (23780 <eeprom_emulator_read_page+0x94>)
   23744:	4798      	blx	r3
   23746:	e014      	b.n	23772 <eeprom_emulator_read_page+0x86>
	} else {
		struct _eeprom_page temp;

		/* Copy the data from non-volatile memory into the temporary buffer */
		_eeprom_emulator_nvm_read_page(
				_eeprom_instance.page_map[logical_page], &temp);
   23748:	1dfb      	adds	r3, r7, #7
   2374a:	781b      	ldrb	r3, [r3, #0]
   2374c:	4a0b      	ldr	r2, [pc, #44]	; (2377c <eeprom_emulator_read_page+0x90>)
   2374e:	18d3      	adds	r3, r2, r3
   23750:	7adb      	ldrb	r3, [r3, #11]
		_eeprom_emulator_nvm_read_page(
   23752:	b29b      	uxth	r3, r3
   23754:	2208      	movs	r2, #8
   23756:	18ba      	adds	r2, r7, r2
   23758:	0011      	movs	r1, r2
   2375a:	0018      	movs	r0, r3
   2375c:	4b09      	ldr	r3, [pc, #36]	; (23784 <eeprom_emulator_read_page+0x98>)
   2375e:	4798      	blx	r3

		/* Copy the data portion of the read page to the user's buffer */
		memcpy(data, temp.data, EEPROM_PAGE_SIZE);
   23760:	683a      	ldr	r2, [r7, #0]
   23762:	2308      	movs	r3, #8
   23764:	18fb      	adds	r3, r7, r3
   23766:	0010      	movs	r0, r2
   23768:	3304      	adds	r3, #4
   2376a:	223c      	movs	r2, #60	; 0x3c
   2376c:	0019      	movs	r1, r3
   2376e:	4b04      	ldr	r3, [pc, #16]	; (23780 <eeprom_emulator_read_page+0x94>)
   23770:	4798      	blx	r3
	}

	return STATUS_OK;
   23772:	2300      	movs	r3, #0
}
   23774:	0018      	movs	r0, r3
   23776:	46bd      	mov	sp, r7
   23778:	b012      	add	sp, #72	; 0x48
   2377a:	bd80      	pop	{r7, pc}
   2377c:	2000042c 	.word	0x2000042c
   23780:	000289c5 	.word	0x000289c5
   23784:	00022ce1 	.word	0x00022ce1

00023788 <eeprom_emulator_commit_page_buffer>:
 *       data loss.
 *
 * \return Status code indicating the status of the operation.
 */
enum status_code eeprom_emulator_commit_page_buffer(void)
{
   23788:	b580      	push	{r7, lr}
   2378a:	b082      	sub	sp, #8
   2378c:	af00      	add	r7, sp, #0
	enum status_code error_code = STATUS_OK;
   2378e:	1dfb      	adds	r3, r7, #7
   23790:	2200      	movs	r2, #0
   23792:	701a      	strb	r2, [r3, #0]

	/* If cache is inactive, no need to commit anything to physical memory */
	if (_eeprom_instance.cache_active == false) {
   23794:	4b10      	ldr	r3, [pc, #64]	; (237d8 <eeprom_emulator_commit_page_buffer+0x50>)
   23796:	22c8      	movs	r2, #200	; 0xc8
   23798:	5c9b      	ldrb	r3, [r3, r2]
   2379a:	2201      	movs	r2, #1
   2379c:	4053      	eors	r3, r2
   2379e:	b2db      	uxtb	r3, r3
   237a0:	2b00      	cmp	r3, #0
   237a2:	d001      	beq.n	237a8 <eeprom_emulator_commit_page_buffer+0x20>
		return STATUS_OK;
   237a4:	2300      	movs	r3, #0
   237a6:	e013      	b.n	237d0 <eeprom_emulator_commit_page_buffer+0x48>
	}

	uint8_t cached_logical_page = _eeprom_instance.cache.header.logical_page;
   237a8:	1dbb      	adds	r3, r7, #6
   237aa:	4a0b      	ldr	r2, [pc, #44]	; (237d8 <eeprom_emulator_commit_page_buffer+0x50>)
   237ac:	2188      	movs	r1, #136	; 0x88
   237ae:	5c52      	ldrb	r2, [r2, r1]
   237b0:	701a      	strb	r2, [r3, #0]

	/* Perform the page write to commit the NVM page buffer to FLASH */
	_eeprom_emulator_nvm_commit_cache(
			_eeprom_instance.page_map[cached_logical_page]);
   237b2:	1dbb      	adds	r3, r7, #6
   237b4:	781b      	ldrb	r3, [r3, #0]
   237b6:	4a08      	ldr	r2, [pc, #32]	; (237d8 <eeprom_emulator_commit_page_buffer+0x50>)
   237b8:	18d3      	adds	r3, r2, r3
   237ba:	7adb      	ldrb	r3, [r3, #11]
	_eeprom_emulator_nvm_commit_cache(
   237bc:	b29b      	uxth	r3, r3
   237be:	0018      	movs	r0, r3
   237c0:	4b06      	ldr	r3, [pc, #24]	; (237dc <eeprom_emulator_commit_page_buffer+0x54>)
   237c2:	4798      	blx	r3

	barrier(); // Enforce ordering to prevent incorrect cache state
	_eeprom_instance.cache_active = false;
   237c4:	4b04      	ldr	r3, [pc, #16]	; (237d8 <eeprom_emulator_commit_page_buffer+0x50>)
   237c6:	22c8      	movs	r2, #200	; 0xc8
   237c8:	2100      	movs	r1, #0
   237ca:	5499      	strb	r1, [r3, r2]

	return error_code;
   237cc:	1dfb      	adds	r3, r7, #7
   237ce:	781b      	ldrb	r3, [r3, #0]
}
   237d0:	0018      	movs	r0, r3
   237d2:	46bd      	mov	sp, r7
   237d4:	b002      	add	sp, #8
   237d6:	bd80      	pop	{r7, pc}
   237d8:	2000042c 	.word	0x2000042c
   237dc:	00022c95 	.word	0x00022c95

000237e0 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
   237e0:	b580      	push	{r7, lr}
   237e2:	af00      	add	r7, sp, #0
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
   237e4:	46c0      	nop			; (mov r8, r8)
   237e6:	46bd      	mov	sp, r7
   237e8:	bd80      	pop	{r7, pc}
	...

000237ec <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
   237ec:	b580      	push	{r7, lr}
   237ee:	b082      	sub	sp, #8
   237f0:	af00      	add	r7, sp, #0
	if (cpu_irq_critical_section_counter == 0) {
   237f2:	4b10      	ldr	r3, [pc, #64]	; (23834 <cpu_irq_enter_critical+0x48>)
   237f4:	681b      	ldr	r3, [r3, #0]
   237f6:	2b00      	cmp	r3, #0
   237f8:	d112      	bne.n	23820 <cpu_irq_enter_critical+0x34>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   237fa:	f3ef 8310 	mrs	r3, PRIMASK
   237fe:	607b      	str	r3, [r7, #4]
  return(result);
   23800:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
   23802:	2b00      	cmp	r3, #0
   23804:	d109      	bne.n	2381a <cpu_irq_enter_critical+0x2e>
  __ASM volatile ("cpsid i" : : : "memory");
   23806:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
   23808:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
   2380c:	4b0a      	ldr	r3, [pc, #40]	; (23838 <cpu_irq_enter_critical+0x4c>)
   2380e:	2200      	movs	r2, #0
   23810:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
   23812:	4b0a      	ldr	r3, [pc, #40]	; (2383c <cpu_irq_enter_critical+0x50>)
   23814:	2201      	movs	r2, #1
   23816:	701a      	strb	r2, [r3, #0]
   23818:	e002      	b.n	23820 <cpu_irq_enter_critical+0x34>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
   2381a:	4b08      	ldr	r3, [pc, #32]	; (2383c <cpu_irq_enter_critical+0x50>)
   2381c:	2200      	movs	r2, #0
   2381e:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
   23820:	4b04      	ldr	r3, [pc, #16]	; (23834 <cpu_irq_enter_critical+0x48>)
   23822:	681b      	ldr	r3, [r3, #0]
   23824:	1c5a      	adds	r2, r3, #1
   23826:	4b03      	ldr	r3, [pc, #12]	; (23834 <cpu_irq_enter_critical+0x48>)
   23828:	601a      	str	r2, [r3, #0]
}
   2382a:	46c0      	nop			; (mov r8, r8)
   2382c:	46bd      	mov	sp, r7
   2382e:	b002      	add	sp, #8
   23830:	bd80      	pop	{r7, pc}
   23832:	46c0      	nop			; (mov r8, r8)
   23834:	200004f8 	.word	0x200004f8
   23838:	20000028 	.word	0x20000028
   2383c:	200004fc 	.word	0x200004fc

00023840 <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
   23840:	b580      	push	{r7, lr}
   23842:	af00      	add	r7, sp, #0
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
   23844:	4b0b      	ldr	r3, [pc, #44]	; (23874 <cpu_irq_leave_critical+0x34>)
   23846:	681b      	ldr	r3, [r3, #0]
   23848:	1e5a      	subs	r2, r3, #1
   2384a:	4b0a      	ldr	r3, [pc, #40]	; (23874 <cpu_irq_leave_critical+0x34>)
   2384c:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
   2384e:	4b09      	ldr	r3, [pc, #36]	; (23874 <cpu_irq_leave_critical+0x34>)
   23850:	681b      	ldr	r3, [r3, #0]
   23852:	2b00      	cmp	r3, #0
   23854:	d10a      	bne.n	2386c <cpu_irq_leave_critical+0x2c>
   23856:	4b08      	ldr	r3, [pc, #32]	; (23878 <cpu_irq_leave_critical+0x38>)
   23858:	781b      	ldrb	r3, [r3, #0]
   2385a:	b2db      	uxtb	r3, r3
   2385c:	2b00      	cmp	r3, #0
   2385e:	d005      	beq.n	2386c <cpu_irq_leave_critical+0x2c>
		cpu_irq_enable();
   23860:	4b06      	ldr	r3, [pc, #24]	; (2387c <cpu_irq_leave_critical+0x3c>)
   23862:	2201      	movs	r2, #1
   23864:	701a      	strb	r2, [r3, #0]
   23866:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   2386a:	b662      	cpsie	i
	}
}
   2386c:	46c0      	nop			; (mov r8, r8)
   2386e:	46bd      	mov	sp, r7
   23870:	bd80      	pop	{r7, pc}
   23872:	46c0      	nop			; (mov r8, r8)
   23874:	200004f8 	.word	0x200004f8
   23878:	200004fc 	.word	0x200004fc
   2387c:	20000028 	.word	0x20000028

00023880 <system_gclk_gen_get_config_defaults>:
{
   23880:	b580      	push	{r7, lr}
   23882:	b082      	sub	sp, #8
   23884:	af00      	add	r7, sp, #0
   23886:	6078      	str	r0, [r7, #4]
	config->division_factor    = 1;
   23888:	687b      	ldr	r3, [r7, #4]
   2388a:	2201      	movs	r2, #1
   2388c:	605a      	str	r2, [r3, #4]
	config->high_when_disabled = false;
   2388e:	687b      	ldr	r3, [r7, #4]
   23890:	2200      	movs	r2, #0
   23892:	705a      	strb	r2, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
   23894:	687b      	ldr	r3, [r7, #4]
   23896:	2206      	movs	r2, #6
   23898:	701a      	strb	r2, [r3, #0]
	config->run_in_standby     = false;
   2389a:	687b      	ldr	r3, [r7, #4]
   2389c:	2200      	movs	r2, #0
   2389e:	721a      	strb	r2, [r3, #8]
	config->output_enable      = false;
   238a0:	687b      	ldr	r3, [r7, #4]
   238a2:	2200      	movs	r2, #0
   238a4:	725a      	strb	r2, [r3, #9]
}
   238a6:	46c0      	nop			; (mov r8, r8)
   238a8:	46bd      	mov	sp, r7
   238aa:	b002      	add	sp, #8
   238ac:	bd80      	pop	{r7, pc}

000238ae <system_gclk_chan_get_config_defaults>:
{
   238ae:	b580      	push	{r7, lr}
   238b0:	b082      	sub	sp, #8
   238b2:	af00      	add	r7, sp, #0
   238b4:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   238b6:	687b      	ldr	r3, [r7, #4]
   238b8:	2200      	movs	r2, #0
   238ba:	701a      	strb	r2, [r3, #0]
}
   238bc:	46c0      	nop			; (mov r8, r8)
   238be:	46bd      	mov	sp, r7
   238c0:	b002      	add	sp, #8
   238c2:	bd80      	pop	{r7, pc}

000238c4 <system_clock_source_xosc32k_get_config_defaults>:
{
   238c4:	b580      	push	{r7, lr}
   238c6:	b082      	sub	sp, #8
   238c8:	af00      	add	r7, sp, #0
   238ca:	6078      	str	r0, [r7, #4]
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
   238cc:	687b      	ldr	r3, [r7, #4]
   238ce:	2200      	movs	r2, #0
   238d0:	701a      	strb	r2, [r3, #0]
	config->startup_time        = SYSTEM_XOSC32K_STARTUP_16384;
   238d2:	687b      	ldr	r3, [r7, #4]
   238d4:	2204      	movs	r2, #4
   238d6:	705a      	strb	r2, [r3, #1]
	config->auto_gain_control   = false;
   238d8:	687b      	ldr	r3, [r7, #4]
   238da:	2200      	movs	r2, #0
   238dc:	709a      	strb	r2, [r3, #2]
	config->frequency           = 32768UL;
   238de:	687b      	ldr	r3, [r7, #4]
   238e0:	2280      	movs	r2, #128	; 0x80
   238e2:	0212      	lsls	r2, r2, #8
   238e4:	609a      	str	r2, [r3, #8]
	config->enable_1khz_output  = false;
   238e6:	687b      	ldr	r3, [r7, #4]
   238e8:	2200      	movs	r2, #0
   238ea:	70da      	strb	r2, [r3, #3]
	config->enable_32khz_output = true;
   238ec:	687b      	ldr	r3, [r7, #4]
   238ee:	2201      	movs	r2, #1
   238f0:	711a      	strb	r2, [r3, #4]
	config->run_in_standby      = false;
   238f2:	687b      	ldr	r3, [r7, #4]
   238f4:	2200      	movs	r2, #0
   238f6:	731a      	strb	r2, [r3, #12]
	config->on_demand           = true;
   238f8:	687b      	ldr	r3, [r7, #4]
   238fa:	2201      	movs	r2, #1
   238fc:	735a      	strb	r2, [r3, #13]
	config->write_once          = false;
   238fe:	687b      	ldr	r3, [r7, #4]
   23900:	2200      	movs	r2, #0
   23902:	739a      	strb	r2, [r3, #14]
}
   23904:	46c0      	nop			; (mov r8, r8)
   23906:	46bd      	mov	sp, r7
   23908:	b002      	add	sp, #8
   2390a:	bd80      	pop	{r7, pc}

0002390c <system_clock_source_osc8m_get_config_defaults>:
{
   2390c:	b580      	push	{r7, lr}
   2390e:	b082      	sub	sp, #8
   23910:	af00      	add	r7, sp, #0
   23912:	6078      	str	r0, [r7, #4]
	config->prescaler       = SYSTEM_OSC8M_DIV_8;
   23914:	687b      	ldr	r3, [r7, #4]
   23916:	2203      	movs	r2, #3
   23918:	701a      	strb	r2, [r3, #0]
	config->run_in_standby  = false;
   2391a:	687b      	ldr	r3, [r7, #4]
   2391c:	2200      	movs	r2, #0
   2391e:	705a      	strb	r2, [r3, #1]
	config->on_demand       = true;
   23920:	687b      	ldr	r3, [r7, #4]
   23922:	2201      	movs	r2, #1
   23924:	709a      	strb	r2, [r3, #2]
}
   23926:	46c0      	nop			; (mov r8, r8)
   23928:	46bd      	mov	sp, r7
   2392a:	b002      	add	sp, #8
   2392c:	bd80      	pop	{r7, pc}

0002392e <system_clock_source_dfll_get_config_defaults>:
{
   2392e:	b580      	push	{r7, lr}
   23930:	b082      	sub	sp, #8
   23932:	af00      	add	r7, sp, #0
   23934:	6078      	str	r0, [r7, #4]
	config->loop_mode       = SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN;
   23936:	687b      	ldr	r3, [r7, #4]
   23938:	2200      	movs	r2, #0
   2393a:	701a      	strb	r2, [r3, #0]
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
   2393c:	687b      	ldr	r3, [r7, #4]
   2393e:	2200      	movs	r2, #0
   23940:	805a      	strh	r2, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
   23942:	687b      	ldr	r3, [r7, #4]
   23944:	2200      	movs	r2, #0
   23946:	809a      	strh	r2, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
   23948:	687b      	ldr	r3, [r7, #4]
   2394a:	2200      	movs	r2, #0
   2394c:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
   2394e:	687b      	ldr	r3, [r7, #4]
   23950:	2200      	movs	r2, #0
   23952:	71da      	strb	r2, [r3, #7]
	config->on_demand       = true;
   23954:	687b      	ldr	r3, [r7, #4]
   23956:	2201      	movs	r2, #1
   23958:	705a      	strb	r2, [r3, #1]
	config->coarse_value    = 0x1f / 4; /* Midpoint */
   2395a:	687b      	ldr	r3, [r7, #4]
   2395c:	2207      	movs	r2, #7
   2395e:	721a      	strb	r2, [r3, #8]
	config->fine_value      = 0xff / 4; /* Midpoint */
   23960:	687b      	ldr	r3, [r7, #4]
   23962:	223f      	movs	r2, #63	; 0x3f
   23964:	815a      	strh	r2, [r3, #10]
	config->coarse_max_step = 1;
   23966:	687b      	ldr	r3, [r7, #4]
   23968:	2201      	movs	r2, #1
   2396a:	731a      	strb	r2, [r3, #12]
	config->fine_max_step   = 1;
   2396c:	687b      	ldr	r3, [r7, #4]
   2396e:	2201      	movs	r2, #1
   23970:	81da      	strh	r2, [r3, #14]
	config->multiply_factor = 6; /* Multiply 8MHz by 6 to get 48MHz */
   23972:	687b      	ldr	r3, [r7, #4]
   23974:	2206      	movs	r2, #6
   23976:	821a      	strh	r2, [r3, #16]
}
   23978:	46c0      	nop			; (mov r8, r8)
   2397a:	46bd      	mov	sp, r7
   2397c:	b002      	add	sp, #8
   2397e:	bd80      	pop	{r7, pc}

00023980 <system_cpu_clock_set_divider>:
{
   23980:	b580      	push	{r7, lr}
   23982:	b082      	sub	sp, #8
   23984:	af00      	add	r7, sp, #0
   23986:	0002      	movs	r2, r0
   23988:	1dfb      	adds	r3, r7, #7
   2398a:	701a      	strb	r2, [r3, #0]
	PM->CPUSEL.reg = (uint32_t)divider;
   2398c:	4a03      	ldr	r2, [pc, #12]	; (2399c <system_cpu_clock_set_divider+0x1c>)
   2398e:	1dfb      	adds	r3, r7, #7
   23990:	781b      	ldrb	r3, [r3, #0]
   23992:	7213      	strb	r3, [r2, #8]
}
   23994:	46c0      	nop			; (mov r8, r8)
   23996:	46bd      	mov	sp, r7
   23998:	b002      	add	sp, #8
   2399a:	bd80      	pop	{r7, pc}
   2399c:	40000400 	.word	0x40000400

000239a0 <system_apb_clock_set_divider>:
{
   239a0:	b580      	push	{r7, lr}
   239a2:	b082      	sub	sp, #8
   239a4:	af00      	add	r7, sp, #0
   239a6:	0002      	movs	r2, r0
   239a8:	1dfb      	adds	r3, r7, #7
   239aa:	701a      	strb	r2, [r3, #0]
   239ac:	1dbb      	adds	r3, r7, #6
   239ae:	1c0a      	adds	r2, r1, #0
   239b0:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   239b2:	1dfb      	adds	r3, r7, #7
   239b4:	781b      	ldrb	r3, [r3, #0]
   239b6:	2b01      	cmp	r3, #1
   239b8:	d008      	beq.n	239cc <system_apb_clock_set_divider+0x2c>
   239ba:	2b02      	cmp	r3, #2
   239bc:	d00b      	beq.n	239d6 <system_apb_clock_set_divider+0x36>
   239be:	2b00      	cmp	r3, #0
   239c0:	d10e      	bne.n	239e0 <system_apb_clock_set_divider+0x40>
			PM->APBASEL.reg = (uint32_t)divider;
   239c2:	4a0b      	ldr	r2, [pc, #44]	; (239f0 <system_apb_clock_set_divider+0x50>)
   239c4:	1dbb      	adds	r3, r7, #6
   239c6:	781b      	ldrb	r3, [r3, #0]
   239c8:	7253      	strb	r3, [r2, #9]
			break;
   239ca:	e00b      	b.n	239e4 <system_apb_clock_set_divider+0x44>
			PM->APBBSEL.reg = (uint32_t)divider;
   239cc:	4a08      	ldr	r2, [pc, #32]	; (239f0 <system_apb_clock_set_divider+0x50>)
   239ce:	1dbb      	adds	r3, r7, #6
   239d0:	781b      	ldrb	r3, [r3, #0]
   239d2:	7293      	strb	r3, [r2, #10]
			break;
   239d4:	e006      	b.n	239e4 <system_apb_clock_set_divider+0x44>
			PM->APBCSEL.reg = (uint32_t)divider;
   239d6:	4a06      	ldr	r2, [pc, #24]	; (239f0 <system_apb_clock_set_divider+0x50>)
   239d8:	1dbb      	adds	r3, r7, #6
   239da:	781b      	ldrb	r3, [r3, #0]
   239dc:	72d3      	strb	r3, [r2, #11]
			break;
   239de:	e001      	b.n	239e4 <system_apb_clock_set_divider+0x44>
			return STATUS_ERR_INVALID_ARG;
   239e0:	2317      	movs	r3, #23
   239e2:	e000      	b.n	239e6 <system_apb_clock_set_divider+0x46>
	return STATUS_OK;
   239e4:	2300      	movs	r3, #0
}
   239e6:	0018      	movs	r0, r3
   239e8:	46bd      	mov	sp, r7
   239ea:	b002      	add	sp, #8
   239ec:	bd80      	pop	{r7, pc}
   239ee:	46c0      	nop			; (mov r8, r8)
   239f0:	40000400 	.word	0x40000400

000239f4 <system_flash_set_waitstates>:
 * can be found in the electrical characteristics of the device.
 *
 * \param[in] wait_states Number of wait states to use for internal flash
 */
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
   239f4:	b580      	push	{r7, lr}
   239f6:	b082      	sub	sp, #8
   239f8:	af00      	add	r7, sp, #0
   239fa:	0002      	movs	r2, r0
   239fc:	1dfb      	adds	r3, r7, #7
   239fe:	701a      	strb	r2, [r3, #0]
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
   23a00:	4a08      	ldr	r2, [pc, #32]	; (23a24 <system_flash_set_waitstates+0x30>)
   23a02:	1dfb      	adds	r3, r7, #7
   23a04:	781b      	ldrb	r3, [r3, #0]
   23a06:	210f      	movs	r1, #15
   23a08:	400b      	ands	r3, r1
   23a0a:	b2d9      	uxtb	r1, r3
   23a0c:	6853      	ldr	r3, [r2, #4]
   23a0e:	200f      	movs	r0, #15
   23a10:	4001      	ands	r1, r0
   23a12:	0049      	lsls	r1, r1, #1
   23a14:	201e      	movs	r0, #30
   23a16:	4383      	bics	r3, r0
   23a18:	430b      	orrs	r3, r1
   23a1a:	6053      	str	r3, [r2, #4]
}
   23a1c:	46c0      	nop			; (mov r8, r8)
   23a1e:	46bd      	mov	sp, r7
   23a20:	b002      	add	sp, #8
   23a22:	bd80      	pop	{r7, pc}
   23a24:	41004000 	.word	0x41004000

00023a28 <_system_dfll_wait_for_sync>:
/**
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
   23a28:	b580      	push	{r7, lr}
   23a2a:	af00      	add	r7, sp, #0
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
   23a2c:	46c0      	nop			; (mov r8, r8)
   23a2e:	4b04      	ldr	r3, [pc, #16]	; (23a40 <_system_dfll_wait_for_sync+0x18>)
   23a30:	68db      	ldr	r3, [r3, #12]
   23a32:	2210      	movs	r2, #16
   23a34:	4013      	ands	r3, r2
   23a36:	d0fa      	beq.n	23a2e <_system_dfll_wait_for_sync+0x6>
		/* Wait for DFLL sync */
	}
}
   23a38:	46c0      	nop			; (mov r8, r8)
   23a3a:	46bd      	mov	sp, r7
   23a3c:	bd80      	pop	{r7, pc}
   23a3e:	46c0      	nop			; (mov r8, r8)
   23a40:	40000800 	.word	0x40000800

00023a44 <_system_clock_source_dfll_set_config_errata_9905>:
		/* Wait for OSC32K sync */
	}
}

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{
   23a44:	b580      	push	{r7, lr}
   23a46:	af00      	add	r7, sp, #0

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
   23a48:	4b0c      	ldr	r3, [pc, #48]	; (23a7c <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   23a4a:	2202      	movs	r2, #2
   23a4c:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
   23a4e:	4b0c      	ldr	r3, [pc, #48]	; (23a80 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
   23a50:	4798      	blx	r3

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
   23a52:	4a0a      	ldr	r2, [pc, #40]	; (23a7c <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   23a54:	4b0b      	ldr	r3, [pc, #44]	; (23a84 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
   23a56:	689b      	ldr	r3, [r3, #8]
   23a58:	62d3      	str	r3, [r2, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
   23a5a:	4a08      	ldr	r2, [pc, #32]	; (23a7c <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   23a5c:	4b09      	ldr	r3, [pc, #36]	; (23a84 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
   23a5e:	685b      	ldr	r3, [r3, #4]
   23a60:	6293      	str	r3, [r2, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
   23a62:	4b06      	ldr	r3, [pc, #24]	; (23a7c <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   23a64:	2200      	movs	r2, #0
   23a66:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
   23a68:	4b05      	ldr	r3, [pc, #20]	; (23a80 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
   23a6a:	4798      	blx	r3
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
   23a6c:	4a03      	ldr	r2, [pc, #12]	; (23a7c <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   23a6e:	4b05      	ldr	r3, [pc, #20]	; (23a84 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
   23a70:	681b      	ldr	r3, [r3, #0]
   23a72:	b29b      	uxth	r3, r3
   23a74:	8493      	strh	r3, [r2, #36]	; 0x24
}
   23a76:	46c0      	nop			; (mov r8, r8)
   23a78:	46bd      	mov	sp, r7
   23a7a:	bd80      	pop	{r7, pc}
   23a7c:	40000800 	.word	0x40000800
   23a80:	00023a29 	.word	0x00023a29
   23a84:	20000500 	.word	0x20000500

00023a88 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
   23a88:	b580      	push	{r7, lr}
   23a8a:	b082      	sub	sp, #8
   23a8c:	af00      	add	r7, sp, #0
   23a8e:	0002      	movs	r2, r0
   23a90:	1dfb      	adds	r3, r7, #7
   23a92:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
   23a94:	1dfb      	adds	r3, r7, #7
   23a96:	781b      	ldrb	r3, [r3, #0]
   23a98:	2b08      	cmp	r3, #8
   23a9a:	d841      	bhi.n	23b20 <system_clock_source_get_hz+0x98>
   23a9c:	009a      	lsls	r2, r3, #2
   23a9e:	4b23      	ldr	r3, [pc, #140]	; (23b2c <system_clock_source_get_hz+0xa4>)
   23aa0:	18d3      	adds	r3, r2, r3
   23aa2:	681b      	ldr	r3, [r3, #0]
   23aa4:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
   23aa6:	4b22      	ldr	r3, [pc, #136]	; (23b30 <system_clock_source_get_hz+0xa8>)
   23aa8:	691b      	ldr	r3, [r3, #16]
   23aaa:	e03a      	b.n	23b22 <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
   23aac:	4b21      	ldr	r3, [pc, #132]	; (23b34 <system_clock_source_get_hz+0xac>)
   23aae:	6a1b      	ldr	r3, [r3, #32]
   23ab0:	059b      	lsls	r3, r3, #22
   23ab2:	0f9b      	lsrs	r3, r3, #30
   23ab4:	b2db      	uxtb	r3, r3
   23ab6:	001a      	movs	r2, r3
   23ab8:	4b1f      	ldr	r3, [pc, #124]	; (23b38 <system_clock_source_get_hz+0xb0>)
   23aba:	40d3      	lsrs	r3, r2
   23abc:	e031      	b.n	23b22 <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
   23abe:	2380      	movs	r3, #128	; 0x80
   23ac0:	021b      	lsls	r3, r3, #8
   23ac2:	e02e      	b.n	23b22 <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;
   23ac4:	2380      	movs	r3, #128	; 0x80
   23ac6:	021b      	lsls	r3, r3, #8
   23ac8:	e02b      	b.n	23b22 <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
   23aca:	4b19      	ldr	r3, [pc, #100]	; (23b30 <system_clock_source_get_hz+0xa8>)
   23acc:	695b      	ldr	r3, [r3, #20]
   23ace:	e028      	b.n	23b22 <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
   23ad0:	4b17      	ldr	r3, [pc, #92]	; (23b30 <system_clock_source_get_hz+0xa8>)
   23ad2:	681b      	ldr	r3, [r3, #0]
   23ad4:	2202      	movs	r2, #2
   23ad6:	4013      	ands	r3, r2
   23ad8:	d101      	bne.n	23ade <system_clock_source_get_hz+0x56>
			return 0;
   23ada:	2300      	movs	r3, #0
   23adc:	e021      	b.n	23b22 <system_clock_source_get_hz+0x9a>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();
   23ade:	4b17      	ldr	r3, [pc, #92]	; (23b3c <system_clock_source_get_hz+0xb4>)
   23ae0:	4798      	blx	r3

		/* Check if operating in closed loop (USB) mode */
		switch(_system_clock_inst.dfll.control &
   23ae2:	4b13      	ldr	r3, [pc, #76]	; (23b30 <system_clock_source_get_hz+0xa8>)
   23ae4:	681b      	ldr	r3, [r3, #0]
   23ae6:	2224      	movs	r2, #36	; 0x24
   23ae8:	4013      	ands	r3, r2
   23aea:	2b04      	cmp	r3, #4
   23aec:	d109      	bne.n	23b02 <system_clock_source_get_hz+0x7a>
				(SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_USBCRM)) {
		case SYSCTRL_DFLLCTRL_MODE:
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
   23aee:	2000      	movs	r0, #0
   23af0:	4b13      	ldr	r3, [pc, #76]	; (23b40 <system_clock_source_get_hz+0xb8>)
   23af2:	4798      	blx	r3
   23af4:	0002      	movs	r2, r0
					(_system_clock_inst.dfll.mul & 0xffff);
   23af6:	4b0e      	ldr	r3, [pc, #56]	; (23b30 <system_clock_source_get_hz+0xa8>)
   23af8:	689b      	ldr	r3, [r3, #8]
   23afa:	041b      	lsls	r3, r3, #16
   23afc:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
   23afe:	4353      	muls	r3, r2
   23b00:	e00f      	b.n	23b22 <system_clock_source_get_hz+0x9a>
		default:
			return 48000000UL;
   23b02:	4b10      	ldr	r3, [pc, #64]	; (23b44 <system_clock_source_get_hz+0xbc>)
   23b04:	e00d      	b.n	23b22 <system_clock_source_get_hz+0x9a>
		}

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
   23b06:	4a0b      	ldr	r2, [pc, #44]	; (23b34 <system_clock_source_get_hz+0xac>)
   23b08:	2350      	movs	r3, #80	; 0x50
   23b0a:	5cd3      	ldrb	r3, [r2, r3]
   23b0c:	b2db      	uxtb	r3, r3
   23b0e:	001a      	movs	r2, r3
   23b10:	2304      	movs	r3, #4
   23b12:	4013      	ands	r3, r2
   23b14:	d101      	bne.n	23b1a <system_clock_source_get_hz+0x92>
			return 0;
   23b16:	2300      	movs	r3, #0
   23b18:	e003      	b.n	23b22 <system_clock_source_get_hz+0x9a>
		}

		return _system_clock_inst.dpll.frequency;
   23b1a:	4b05      	ldr	r3, [pc, #20]	; (23b30 <system_clock_source_get_hz+0xa8>)
   23b1c:	68db      	ldr	r3, [r3, #12]
   23b1e:	e000      	b.n	23b22 <system_clock_source_get_hz+0x9a>
#endif

	default:
		return 0;
   23b20:	2300      	movs	r3, #0
	}
}
   23b22:	0018      	movs	r0, r3
   23b24:	46bd      	mov	sp, r7
   23b26:	b002      	add	sp, #8
   23b28:	bd80      	pop	{r7, pc}
   23b2a:	46c0      	nop			; (mov r8, r8)
   23b2c:	0002a790 	.word	0x0002a790
   23b30:	20000500 	.word	0x20000500
   23b34:	40000800 	.word	0x40000800
   23b38:	007a1200 	.word	0x007a1200
   23b3c:	00023a29 	.word	0x00023a29
   23b40:	000246c9 	.word	0x000246c9
   23b44:	02dc6c00 	.word	0x02dc6c00

00023b48 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
   23b48:	b580      	push	{r7, lr}
   23b4a:	b084      	sub	sp, #16
   23b4c:	af00      	add	r7, sp, #0
   23b4e:	6078      	str	r0, [r7, #4]
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
   23b50:	4b1a      	ldr	r3, [pc, #104]	; (23bbc <system_clock_source_osc8m_set_config+0x74>)
   23b52:	6a1b      	ldr	r3, [r3, #32]
   23b54:	60fb      	str	r3, [r7, #12]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
   23b56:	687b      	ldr	r3, [r7, #4]
   23b58:	781b      	ldrb	r3, [r3, #0]
   23b5a:	1c1a      	adds	r2, r3, #0
   23b5c:	2303      	movs	r3, #3
   23b5e:	4013      	ands	r3, r2
   23b60:	b2da      	uxtb	r2, r3
   23b62:	230d      	movs	r3, #13
   23b64:	18fb      	adds	r3, r7, r3
   23b66:	2103      	movs	r1, #3
   23b68:	400a      	ands	r2, r1
   23b6a:	0010      	movs	r0, r2
   23b6c:	781a      	ldrb	r2, [r3, #0]
   23b6e:	2103      	movs	r1, #3
   23b70:	438a      	bics	r2, r1
   23b72:	1c11      	adds	r1, r2, #0
   23b74:	1c02      	adds	r2, r0, #0
   23b76:	430a      	orrs	r2, r1
   23b78:	701a      	strb	r2, [r3, #0]
	temp.bit.ONDEMAND = config->on_demand;
   23b7a:	687b      	ldr	r3, [r7, #4]
   23b7c:	789a      	ldrb	r2, [r3, #2]
   23b7e:	230c      	movs	r3, #12
   23b80:	18fb      	adds	r3, r7, r3
   23b82:	01d0      	lsls	r0, r2, #7
   23b84:	781a      	ldrb	r2, [r3, #0]
   23b86:	217f      	movs	r1, #127	; 0x7f
   23b88:	400a      	ands	r2, r1
   23b8a:	1c11      	adds	r1, r2, #0
   23b8c:	1c02      	adds	r2, r0, #0
   23b8e:	430a      	orrs	r2, r1
   23b90:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
   23b92:	687b      	ldr	r3, [r7, #4]
   23b94:	785a      	ldrb	r2, [r3, #1]
   23b96:	230c      	movs	r3, #12
   23b98:	18fb      	adds	r3, r7, r3
   23b9a:	2101      	movs	r1, #1
   23b9c:	400a      	ands	r2, r1
   23b9e:	0190      	lsls	r0, r2, #6
   23ba0:	781a      	ldrb	r2, [r3, #0]
   23ba2:	2140      	movs	r1, #64	; 0x40
   23ba4:	438a      	bics	r2, r1
   23ba6:	1c11      	adds	r1, r2, #0
   23ba8:	1c02      	adds	r2, r0, #0
   23baa:	430a      	orrs	r2, r1
   23bac:	701a      	strb	r2, [r3, #0]

	SYSCTRL->OSC8M = temp;
   23bae:	4b03      	ldr	r3, [pc, #12]	; (23bbc <system_clock_source_osc8m_set_config+0x74>)
   23bb0:	68fa      	ldr	r2, [r7, #12]
   23bb2:	621a      	str	r2, [r3, #32]
}
   23bb4:	46c0      	nop			; (mov r8, r8)
   23bb6:	46bd      	mov	sp, r7
   23bb8:	b004      	add	sp, #16
   23bba:	bd80      	pop	{r7, pc}
   23bbc:	40000800 	.word	0x40000800

00023bc0 <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
   23bc0:	b580      	push	{r7, lr}
   23bc2:	b084      	sub	sp, #16
   23bc4:	af00      	add	r7, sp, #0
   23bc6:	6078      	str	r0, [r7, #4]
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
   23bc8:	4a43      	ldr	r2, [pc, #268]	; (23cd8 <system_clock_source_xosc32k_set_config+0x118>)
   23bca:	230c      	movs	r3, #12
   23bcc:	18fb      	adds	r3, r7, r3
   23bce:	8a92      	ldrh	r2, [r2, #20]
   23bd0:	801a      	strh	r2, [r3, #0]

	temp.bit.STARTUP = config->startup_time;
   23bd2:	687b      	ldr	r3, [r7, #4]
   23bd4:	785b      	ldrb	r3, [r3, #1]
   23bd6:	1c1a      	adds	r2, r3, #0
   23bd8:	2307      	movs	r3, #7
   23bda:	4013      	ands	r3, r2
   23bdc:	b2da      	uxtb	r2, r3
   23bde:	230c      	movs	r3, #12
   23be0:	18fb      	adds	r3, r7, r3
   23be2:	2107      	movs	r1, #7
   23be4:	400a      	ands	r2, r1
   23be6:	0010      	movs	r0, r2
   23be8:	785a      	ldrb	r2, [r3, #1]
   23bea:	2107      	movs	r1, #7
   23bec:	438a      	bics	r2, r1
   23bee:	1c11      	adds	r1, r2, #0
   23bf0:	1c02      	adds	r2, r0, #0
   23bf2:	430a      	orrs	r2, r1
   23bf4:	705a      	strb	r2, [r3, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
   23bf6:	687b      	ldr	r3, [r7, #4]
   23bf8:	781b      	ldrb	r3, [r3, #0]
   23bfa:	2b00      	cmp	r3, #0
   23bfc:	d106      	bne.n	23c0c <system_clock_source_xosc32k_set_config+0x4c>
		temp.bit.XTALEN = 1;
   23bfe:	230c      	movs	r3, #12
   23c00:	18fb      	adds	r3, r7, r3
   23c02:	781a      	ldrb	r2, [r3, #0]
   23c04:	2104      	movs	r1, #4
   23c06:	430a      	orrs	r2, r1
   23c08:	701a      	strb	r2, [r3, #0]
   23c0a:	e005      	b.n	23c18 <system_clock_source_xosc32k_set_config+0x58>
	} else {
		temp.bit.XTALEN = 0;
   23c0c:	230c      	movs	r3, #12
   23c0e:	18fb      	adds	r3, r7, r3
   23c10:	781a      	ldrb	r2, [r3, #0]
   23c12:	2104      	movs	r1, #4
   23c14:	438a      	bics	r2, r1
   23c16:	701a      	strb	r2, [r3, #0]
	}

	temp.bit.AAMPEN = config->auto_gain_control;
   23c18:	687b      	ldr	r3, [r7, #4]
   23c1a:	789a      	ldrb	r2, [r3, #2]
   23c1c:	230c      	movs	r3, #12
   23c1e:	18fb      	adds	r3, r7, r3
   23c20:	2101      	movs	r1, #1
   23c22:	400a      	ands	r2, r1
   23c24:	0150      	lsls	r0, r2, #5
   23c26:	781a      	ldrb	r2, [r3, #0]
   23c28:	2120      	movs	r1, #32
   23c2a:	438a      	bics	r2, r1
   23c2c:	1c11      	adds	r1, r2, #0
   23c2e:	1c02      	adds	r2, r0, #0
   23c30:	430a      	orrs	r2, r1
   23c32:	701a      	strb	r2, [r3, #0]
	temp.bit.EN1K = config->enable_1khz_output;
   23c34:	687b      	ldr	r3, [r7, #4]
   23c36:	78da      	ldrb	r2, [r3, #3]
   23c38:	230c      	movs	r3, #12
   23c3a:	18fb      	adds	r3, r7, r3
   23c3c:	2101      	movs	r1, #1
   23c3e:	400a      	ands	r2, r1
   23c40:	0110      	lsls	r0, r2, #4
   23c42:	781a      	ldrb	r2, [r3, #0]
   23c44:	2110      	movs	r1, #16
   23c46:	438a      	bics	r2, r1
   23c48:	1c11      	adds	r1, r2, #0
   23c4a:	1c02      	adds	r2, r0, #0
   23c4c:	430a      	orrs	r2, r1
   23c4e:	701a      	strb	r2, [r3, #0]
	temp.bit.EN32K = config->enable_32khz_output;
   23c50:	687b      	ldr	r3, [r7, #4]
   23c52:	791a      	ldrb	r2, [r3, #4]
   23c54:	230c      	movs	r3, #12
   23c56:	18fb      	adds	r3, r7, r3
   23c58:	2101      	movs	r1, #1
   23c5a:	400a      	ands	r2, r1
   23c5c:	00d0      	lsls	r0, r2, #3
   23c5e:	781a      	ldrb	r2, [r3, #0]
   23c60:	2108      	movs	r1, #8
   23c62:	438a      	bics	r2, r1
   23c64:	1c11      	adds	r1, r2, #0
   23c66:	1c02      	adds	r2, r0, #0
   23c68:	430a      	orrs	r2, r1
   23c6a:	701a      	strb	r2, [r3, #0]

	temp.bit.ONDEMAND = config->on_demand;
   23c6c:	687b      	ldr	r3, [r7, #4]
   23c6e:	7b5a      	ldrb	r2, [r3, #13]
   23c70:	230c      	movs	r3, #12
   23c72:	18fb      	adds	r3, r7, r3
   23c74:	01d0      	lsls	r0, r2, #7
   23c76:	781a      	ldrb	r2, [r3, #0]
   23c78:	217f      	movs	r1, #127	; 0x7f
   23c7a:	400a      	ands	r2, r1
   23c7c:	1c11      	adds	r1, r2, #0
   23c7e:	1c02      	adds	r2, r0, #0
   23c80:	430a      	orrs	r2, r1
   23c82:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
   23c84:	687b      	ldr	r3, [r7, #4]
   23c86:	7b1a      	ldrb	r2, [r3, #12]
   23c88:	230c      	movs	r3, #12
   23c8a:	18fb      	adds	r3, r7, r3
   23c8c:	2101      	movs	r1, #1
   23c8e:	400a      	ands	r2, r1
   23c90:	0190      	lsls	r0, r2, #6
   23c92:	781a      	ldrb	r2, [r3, #0]
   23c94:	2140      	movs	r1, #64	; 0x40
   23c96:	438a      	bics	r2, r1
   23c98:	1c11      	adds	r1, r2, #0
   23c9a:	1c02      	adds	r2, r0, #0
   23c9c:	430a      	orrs	r2, r1
   23c9e:	701a      	strb	r2, [r3, #0]
	temp.bit.WRTLOCK  = config->write_once;
   23ca0:	687b      	ldr	r3, [r7, #4]
   23ca2:	7b9a      	ldrb	r2, [r3, #14]
   23ca4:	230c      	movs	r3, #12
   23ca6:	18fb      	adds	r3, r7, r3
   23ca8:	2101      	movs	r1, #1
   23caa:	400a      	ands	r2, r1
   23cac:	0110      	lsls	r0, r2, #4
   23cae:	785a      	ldrb	r2, [r3, #1]
   23cb0:	2110      	movs	r1, #16
   23cb2:	438a      	bics	r2, r1
   23cb4:	1c11      	adds	r1, r2, #0
   23cb6:	1c02      	adds	r2, r0, #0
   23cb8:	430a      	orrs	r2, r1
   23cba:	705a      	strb	r2, [r3, #1]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
   23cbc:	687b      	ldr	r3, [r7, #4]
   23cbe:	689a      	ldr	r2, [r3, #8]
   23cc0:	4b06      	ldr	r3, [pc, #24]	; (23cdc <system_clock_source_xosc32k_set_config+0x11c>)
   23cc2:	615a      	str	r2, [r3, #20]

	SYSCTRL->XOSC32K = temp;
   23cc4:	4a04      	ldr	r2, [pc, #16]	; (23cd8 <system_clock_source_xosc32k_set_config+0x118>)
   23cc6:	230c      	movs	r3, #12
   23cc8:	18fb      	adds	r3, r7, r3
   23cca:	881b      	ldrh	r3, [r3, #0]
   23ccc:	8293      	strh	r3, [r2, #20]
}
   23cce:	46c0      	nop			; (mov r8, r8)
   23cd0:	46bd      	mov	sp, r7
   23cd2:	b004      	add	sp, #16
   23cd4:	bd80      	pop	{r7, pc}
   23cd6:	46c0      	nop			; (mov r8, r8)
   23cd8:	40000800 	.word	0x40000800
   23cdc:	20000500 	.word	0x20000500

00023ce0 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
   23ce0:	b580      	push	{r7, lr}
   23ce2:	b082      	sub	sp, #8
   23ce4:	af00      	add	r7, sp, #0
   23ce6:	6078      	str	r0, [r7, #4]
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
   23ce8:	687b      	ldr	r3, [r7, #4]
   23cea:	7a1b      	ldrb	r3, [r3, #8]
   23cec:	029b      	lsls	r3, r3, #10
   23cee:	041b      	lsls	r3, r3, #16
   23cf0:	0c1a      	lsrs	r2, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
   23cf2:	687b      	ldr	r3, [r7, #4]
   23cf4:	895b      	ldrh	r3, [r3, #10]
   23cf6:	059b      	lsls	r3, r3, #22
   23cf8:	0d9b      	lsrs	r3, r3, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
   23cfa:	431a      	orrs	r2, r3
	_system_clock_inst.dfll.val =
   23cfc:	4b2a      	ldr	r3, [pc, #168]	; (23da8 <system_clock_source_dfll_set_config+0xc8>)
   23cfe:	605a      	str	r2, [r3, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
   23d00:	687b      	ldr	r3, [r7, #4]
   23d02:	799a      	ldrb	r2, [r3, #6]
			(uint32_t)config->stable_tracking |
   23d04:	687b      	ldr	r3, [r7, #4]
   23d06:	79db      	ldrb	r3, [r3, #7]
			(uint32_t)config->wakeup_lock     |
   23d08:	4313      	orrs	r3, r2
   23d0a:	b2db      	uxtb	r3, r3
   23d0c:	001a      	movs	r2, r3
			(uint32_t)config->quick_lock      |
   23d0e:	687b      	ldr	r3, [r7, #4]
   23d10:	885b      	ldrh	r3, [r3, #2]
			(uint32_t)config->stable_tracking |
   23d12:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
   23d14:	687a      	ldr	r2, [r7, #4]
   23d16:	8892      	ldrh	r2, [r2, #4]
			(uint32_t)config->quick_lock      |
   23d18:	431a      	orrs	r2, r3
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
   23d1a:	687b      	ldr	r3, [r7, #4]
   23d1c:	785b      	ldrb	r3, [r3, #1]
   23d1e:	01db      	lsls	r3, r3, #7
			(uint32_t)config->chill_cycle     |
   23d20:	431a      	orrs	r2, r3
	_system_clock_inst.dfll.control =
   23d22:	4b21      	ldr	r3, [pc, #132]	; (23da8 <system_clock_source_dfll_set_config+0xc8>)
   23d24:	601a      	str	r2, [r3, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
   23d26:	687b      	ldr	r3, [r7, #4]
   23d28:	781b      	ldrb	r3, [r3, #0]
   23d2a:	2b04      	cmp	r3, #4
   23d2c:	d116      	bne.n	23d5c <system_clock_source_dfll_set_config+0x7c>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
   23d2e:	687b      	ldr	r3, [r7, #4]
   23d30:	7b1b      	ldrb	r3, [r3, #12]
   23d32:	069b      	lsls	r3, r3, #26
   23d34:	001a      	movs	r2, r3
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
   23d36:	687b      	ldr	r3, [r7, #4]
   23d38:	89db      	ldrh	r3, [r3, #14]
   23d3a:	041b      	lsls	r3, r3, #16
   23d3c:	0019      	movs	r1, r3
   23d3e:	4b1b      	ldr	r3, [pc, #108]	; (23dac <system_clock_source_dfll_set_config+0xcc>)
   23d40:	400b      	ands	r3, r1
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
   23d42:	4313      	orrs	r3, r2
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
   23d44:	687a      	ldr	r2, [r7, #4]
   23d46:	8a12      	ldrh	r2, [r2, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
   23d48:	431a      	orrs	r2, r3
		_system_clock_inst.dfll.mul =
   23d4a:	4b17      	ldr	r3, [pc, #92]	; (23da8 <system_clock_source_dfll_set_config+0xc8>)
   23d4c:	609a      	str	r2, [r3, #8]

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
   23d4e:	4b16      	ldr	r3, [pc, #88]	; (23da8 <system_clock_source_dfll_set_config+0xc8>)
   23d50:	681b      	ldr	r3, [r3, #0]
   23d52:	687a      	ldr	r2, [r7, #4]
   23d54:	7812      	ldrb	r2, [r2, #0]
   23d56:	431a      	orrs	r2, r3
   23d58:	4b13      	ldr	r3, [pc, #76]	; (23da8 <system_clock_source_dfll_set_config+0xc8>)
   23d5a:	601a      	str	r2, [r3, #0]
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
   23d5c:	687b      	ldr	r3, [r7, #4]
   23d5e:	781b      	ldrb	r3, [r3, #0]
   23d60:	2b20      	cmp	r3, #32
   23d62:	d11c      	bne.n	23d9e <system_clock_source_dfll_set_config+0xbe>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
   23d64:	687b      	ldr	r3, [r7, #4]
   23d66:	7b1b      	ldrb	r3, [r3, #12]
   23d68:	069b      	lsls	r3, r3, #26
   23d6a:	001a      	movs	r2, r3
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
   23d6c:	687b      	ldr	r3, [r7, #4]
   23d6e:	89db      	ldrh	r3, [r3, #14]
   23d70:	041b      	lsls	r3, r3, #16
   23d72:	0019      	movs	r1, r3
   23d74:	4b0d      	ldr	r3, [pc, #52]	; (23dac <system_clock_source_dfll_set_config+0xcc>)
   23d76:	400b      	ands	r3, r1
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
   23d78:	4313      	orrs	r3, r2
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
   23d7a:	687a      	ldr	r2, [r7, #4]
   23d7c:	8a12      	ldrh	r2, [r2, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
   23d7e:	431a      	orrs	r2, r3
		_system_clock_inst.dfll.mul =
   23d80:	4b09      	ldr	r3, [pc, #36]	; (23da8 <system_clock_source_dfll_set_config+0xc8>)
   23d82:	609a      	str	r2, [r3, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
   23d84:	4b08      	ldr	r3, [pc, #32]	; (23da8 <system_clock_source_dfll_set_config+0xc8>)
   23d86:	681b      	ldr	r3, [r3, #0]
   23d88:	687a      	ldr	r2, [r7, #4]
   23d8a:	7812      	ldrb	r2, [r2, #0]
   23d8c:	2104      	movs	r1, #4
   23d8e:	430a      	orrs	r2, r1
   23d90:	b2d2      	uxtb	r2, r2
   23d92:	4313      	orrs	r3, r2
   23d94:	2280      	movs	r2, #128	; 0x80
   23d96:	00d2      	lsls	r2, r2, #3
   23d98:	431a      	orrs	r2, r3
   23d9a:	4b03      	ldr	r3, [pc, #12]	; (23da8 <system_clock_source_dfll_set_config+0xc8>)
   23d9c:	601a      	str	r2, [r3, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
   23d9e:	46c0      	nop			; (mov r8, r8)
   23da0:	46bd      	mov	sp, r7
   23da2:	b002      	add	sp, #8
   23da4:	bd80      	pop	{r7, pc}
   23da6:	46c0      	nop			; (mov r8, r8)
   23da8:	20000500 	.word	0x20000500
   23dac:	03ff0000 	.word	0x03ff0000

00023db0 <system_clock_source_enable>:
 * \retval STATUS_ERR_INVALID_ARG  The clock source is not available on this
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
   23db0:	b580      	push	{r7, lr}
   23db2:	b082      	sub	sp, #8
   23db4:	af00      	add	r7, sp, #0
   23db6:	0002      	movs	r2, r0
   23db8:	1dfb      	adds	r3, r7, #7
   23dba:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
   23dbc:	1dfb      	adds	r3, r7, #7
   23dbe:	781b      	ldrb	r3, [r3, #0]
   23dc0:	2b08      	cmp	r3, #8
   23dc2:	d83b      	bhi.n	23e3c <system_clock_source_enable+0x8c>
   23dc4:	009a      	lsls	r2, r3, #2
   23dc6:	4b21      	ldr	r3, [pc, #132]	; (23e4c <system_clock_source_enable+0x9c>)
   23dc8:	18d3      	adds	r3, r2, r3
   23dca:	681b      	ldr	r3, [r3, #0]
   23dcc:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
   23dce:	4b20      	ldr	r3, [pc, #128]	; (23e50 <system_clock_source_enable+0xa0>)
   23dd0:	4a1f      	ldr	r2, [pc, #124]	; (23e50 <system_clock_source_enable+0xa0>)
   23dd2:	6a12      	ldr	r2, [r2, #32]
   23dd4:	2102      	movs	r1, #2
   23dd6:	430a      	orrs	r2, r1
   23dd8:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
   23dda:	2300      	movs	r3, #0
   23ddc:	e031      	b.n	23e42 <system_clock_source_enable+0x92>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
   23dde:	4b1c      	ldr	r3, [pc, #112]	; (23e50 <system_clock_source_enable+0xa0>)
   23de0:	4a1b      	ldr	r2, [pc, #108]	; (23e50 <system_clock_source_enable+0xa0>)
   23de2:	6992      	ldr	r2, [r2, #24]
   23de4:	2102      	movs	r1, #2
   23de6:	430a      	orrs	r2, r1
   23de8:	619a      	str	r2, [r3, #24]
		break;
   23dea:	e029      	b.n	23e40 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
   23dec:	4a18      	ldr	r2, [pc, #96]	; (23e50 <system_clock_source_enable+0xa0>)
   23dee:	4b18      	ldr	r3, [pc, #96]	; (23e50 <system_clock_source_enable+0xa0>)
   23df0:	8a1b      	ldrh	r3, [r3, #16]
   23df2:	b29b      	uxth	r3, r3
   23df4:	2102      	movs	r1, #2
   23df6:	430b      	orrs	r3, r1
   23df8:	b29b      	uxth	r3, r3
   23dfa:	8213      	strh	r3, [r2, #16]
		break;
   23dfc:	e020      	b.n	23e40 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
   23dfe:	4a14      	ldr	r2, [pc, #80]	; (23e50 <system_clock_source_enable+0xa0>)
   23e00:	4b13      	ldr	r3, [pc, #76]	; (23e50 <system_clock_source_enable+0xa0>)
   23e02:	8a9b      	ldrh	r3, [r3, #20]
   23e04:	b29b      	uxth	r3, r3
   23e06:	2102      	movs	r1, #2
   23e08:	430b      	orrs	r3, r1
   23e0a:	b29b      	uxth	r3, r3
   23e0c:	8293      	strh	r3, [r2, #20]
		break;
   23e0e:	e017      	b.n	23e40 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
   23e10:	4b10      	ldr	r3, [pc, #64]	; (23e54 <system_clock_source_enable+0xa4>)
   23e12:	681b      	ldr	r3, [r3, #0]
   23e14:	2202      	movs	r2, #2
   23e16:	431a      	orrs	r2, r3
   23e18:	4b0e      	ldr	r3, [pc, #56]	; (23e54 <system_clock_source_enable+0xa4>)
   23e1a:	601a      	str	r2, [r3, #0]
		_system_clock_source_dfll_set_config_errata_9905();
   23e1c:	4b0e      	ldr	r3, [pc, #56]	; (23e58 <system_clock_source_enable+0xa8>)
   23e1e:	4798      	blx	r3
		break;
   23e20:	e00e      	b.n	23e40 <system_clock_source_enable+0x90>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
   23e22:	4a0b      	ldr	r2, [pc, #44]	; (23e50 <system_clock_source_enable+0xa0>)
   23e24:	490a      	ldr	r1, [pc, #40]	; (23e50 <system_clock_source_enable+0xa0>)
   23e26:	2344      	movs	r3, #68	; 0x44
   23e28:	5ccb      	ldrb	r3, [r1, r3]
   23e2a:	b2db      	uxtb	r3, r3
   23e2c:	2102      	movs	r1, #2
   23e2e:	430b      	orrs	r3, r1
   23e30:	b2d9      	uxtb	r1, r3
   23e32:	2344      	movs	r3, #68	; 0x44
   23e34:	54d1      	strb	r1, [r2, r3]
		break;
   23e36:	e003      	b.n	23e40 <system_clock_source_enable+0x90>
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
   23e38:	2300      	movs	r3, #0
   23e3a:	e002      	b.n	23e42 <system_clock_source_enable+0x92>

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
   23e3c:	2317      	movs	r3, #23
   23e3e:	e000      	b.n	23e42 <system_clock_source_enable+0x92>
	}

	return STATUS_OK;
   23e40:	2300      	movs	r3, #0
}
   23e42:	0018      	movs	r0, r3
   23e44:	46bd      	mov	sp, r7
   23e46:	b002      	add	sp, #8
   23e48:	bd80      	pop	{r7, pc}
   23e4a:	46c0      	nop			; (mov r8, r8)
   23e4c:	0002a7b4 	.word	0x0002a7b4
   23e50:	40000800 	.word	0x40000800
   23e54:	20000500 	.word	0x20000500
   23e58:	00023a45 	.word	0x00023a45

00023e5c <system_clock_source_is_ready>:
 * \retval true   Clock source is enabled and ready
 * \retval false  Clock source is disabled or not yet ready
 */
bool system_clock_source_is_ready(
		const enum system_clock_source clock_source)
{
   23e5c:	b580      	push	{r7, lr}
   23e5e:	b084      	sub	sp, #16
   23e60:	af00      	add	r7, sp, #0
   23e62:	0002      	movs	r2, r0
   23e64:	1dfb      	adds	r3, r7, #7
   23e66:	701a      	strb	r2, [r3, #0]
	uint32_t mask = 0;
   23e68:	2300      	movs	r3, #0
   23e6a:	60fb      	str	r3, [r7, #12]

	switch (clock_source) {
   23e6c:	1dfb      	adds	r3, r7, #7
   23e6e:	781b      	ldrb	r3, [r3, #0]
   23e70:	2b08      	cmp	r3, #8
   23e72:	d821      	bhi.n	23eb8 <system_clock_source_is_ready+0x5c>
   23e74:	009a      	lsls	r2, r3, #2
   23e76:	4b18      	ldr	r3, [pc, #96]	; (23ed8 <system_clock_source_is_ready+0x7c>)
   23e78:	18d3      	adds	r3, r2, r3
   23e7a:	681b      	ldr	r3, [r3, #0]
   23e7c:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		mask = SYSCTRL_PCLKSR_OSC8MRDY;
   23e7e:	2308      	movs	r3, #8
   23e80:	60fb      	str	r3, [r7, #12]
		break;
   23e82:	e01b      	b.n	23ebc <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		mask = SYSCTRL_PCLKSR_OSC32KRDY;
   23e84:	2304      	movs	r3, #4
   23e86:	60fb      	str	r3, [r7, #12]
		break;
   23e88:	e018      	b.n	23ebc <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		mask = SYSCTRL_PCLKSR_XOSCRDY;
   23e8a:	2301      	movs	r3, #1
   23e8c:	60fb      	str	r3, [r7, #12]
		break;
   23e8e:	e015      	b.n	23ebc <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		mask = SYSCTRL_PCLKSR_XOSC32KRDY;
   23e90:	2302      	movs	r3, #2
   23e92:	60fb      	str	r3, [r7, #12]
		break;
   23e94:	e012      	b.n	23ebc <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
			mask = (SYSCTRL_PCLKSR_DFLLRDY |
   23e96:	23d0      	movs	r3, #208	; 0xd0
   23e98:	60fb      	str	r3, [r7, #12]
			        SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC);
		} else {
			mask = SYSCTRL_PCLKSR_DFLLRDY;
		}
		break;
   23e9a:	e00f      	b.n	23ebc <system_clock_source_is_ready+0x60>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		return ((SYSCTRL->DPLLSTATUS.reg &
   23e9c:	4a0f      	ldr	r2, [pc, #60]	; (23edc <system_clock_source_is_ready+0x80>)
   23e9e:	2350      	movs	r3, #80	; 0x50
   23ea0:	5cd3      	ldrb	r3, [r2, r3]
   23ea2:	b2db      	uxtb	r3, r3
   23ea4:	001a      	movs	r2, r3
   23ea6:	2303      	movs	r3, #3
   23ea8:	4013      	ands	r3, r2
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK)) ==
   23eaa:	3b03      	subs	r3, #3
   23eac:	425a      	negs	r2, r3
   23eae:	4153      	adcs	r3, r2
   23eb0:	b2db      	uxtb	r3, r3
   23eb2:	e00c      	b.n	23ece <system_clock_source_is_ready+0x72>
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK));
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Not possible to disable */
		return true;
   23eb4:	2301      	movs	r3, #1
   23eb6:	e00a      	b.n	23ece <system_clock_source_is_ready+0x72>

	default:
		return false;
   23eb8:	2300      	movs	r3, #0
   23eba:	e008      	b.n	23ece <system_clock_source_is_ready+0x72>
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
   23ebc:	4b07      	ldr	r3, [pc, #28]	; (23edc <system_clock_source_is_ready+0x80>)
   23ebe:	68db      	ldr	r3, [r3, #12]
   23ec0:	68fa      	ldr	r2, [r7, #12]
   23ec2:	401a      	ands	r2, r3
   23ec4:	68fb      	ldr	r3, [r7, #12]
   23ec6:	1ad3      	subs	r3, r2, r3
   23ec8:	425a      	negs	r2, r3
   23eca:	4153      	adcs	r3, r2
   23ecc:	b2db      	uxtb	r3, r3
}
   23ece:	0018      	movs	r0, r3
   23ed0:	46bd      	mov	sp, r7
   23ed2:	b004      	add	sp, #16
   23ed4:	bd80      	pop	{r7, pc}
   23ed6:	46c0      	nop			; (mov r8, r8)
   23ed8:	0002a7d8 	.word	0x0002a7d8
   23edc:	40000800 	.word	0x40000800

00023ee0 <_switch_peripheral_gclk>:
 *
 * Switch all peripheral clock to a not enabled general clock
 * to save power.
 */
static void _switch_peripheral_gclk(void)
{
   23ee0:	b580      	push	{r7, lr}
   23ee2:	b082      	sub	sp, #8
   23ee4:	af00      	add	r7, sp, #0
	struct system_gclk_chan_config gclk_conf;

#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
#elif CONF_CLOCK_GCLK_2_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_2;
   23ee6:	003b      	movs	r3, r7
   23ee8:	2202      	movs	r2, #2
   23eea:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
   23eec:	2300      	movs	r3, #0
   23eee:	607b      	str	r3, [r7, #4]
   23ef0:	e009      	b.n	23f06 <_switch_peripheral_gclk+0x26>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
   23ef2:	687b      	ldr	r3, [r7, #4]
   23ef4:	b2db      	uxtb	r3, r3
   23ef6:	003a      	movs	r2, r7
   23ef8:	0011      	movs	r1, r2
   23efa:	0018      	movs	r0, r3
   23efc:	4b05      	ldr	r3, [pc, #20]	; (23f14 <_switch_peripheral_gclk+0x34>)
   23efe:	4798      	blx	r3
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
   23f00:	687b      	ldr	r3, [r7, #4]
   23f02:	3301      	adds	r3, #1
   23f04:	607b      	str	r3, [r7, #4]
   23f06:	687b      	ldr	r3, [r7, #4]
   23f08:	2b24      	cmp	r3, #36	; 0x24
   23f0a:	d9f2      	bls.n	23ef2 <_switch_peripheral_gclk+0x12>
	}
}
   23f0c:	46c0      	nop			; (mov r8, r8)
   23f0e:	46bd      	mov	sp, r7
   23f10:	b002      	add	sp, #8
   23f12:	bd80      	pop	{r7, pc}
   23f14:	000245a5 	.word	0x000245a5

00023f18 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
   23f18:	b580      	push	{r7, lr}
   23f1a:	b0aa      	sub	sp, #168	; 0xa8
   23f1c:	af00      	add	r7, sp, #0
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
   23f1e:	4bc1      	ldr	r3, [pc, #772]	; (24224 <system_clock_init+0x30c>)
   23f20:	22c2      	movs	r2, #194	; 0xc2
   23f22:	00d2      	lsls	r2, r2, #3
   23f24:	609a      	str	r2, [r3, #8]
			SYSCTRL_INTFLAG_DFLLRDY;

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);
   23f26:	2002      	movs	r0, #2
   23f28:	4bbf      	ldr	r3, [pc, #764]	; (24228 <system_clock_init+0x310>)
   23f2a:	4798      	blx	r3

	/* Switch all peripheral clock to a not enabled general clock to save power. */
	_switch_peripheral_gclk();
   23f2c:	4bbf      	ldr	r3, [pc, #764]	; (2422c <system_clock_init+0x314>)
   23f2e:	4798      	blx	r3


	/* XOSC32K */
#if CONF_CLOCK_XOSC32K_ENABLE == true
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);
   23f30:	2394      	movs	r3, #148	; 0x94
   23f32:	18fb      	adds	r3, r7, r3
   23f34:	0018      	movs	r0, r3
   23f36:	4bbe      	ldr	r3, [pc, #760]	; (24230 <system_clock_init+0x318>)
   23f38:	4798      	blx	r3

	xosc32k_conf.frequency           = 32768UL;
   23f3a:	2394      	movs	r3, #148	; 0x94
   23f3c:	18fb      	adds	r3, r7, r3
   23f3e:	2280      	movs	r2, #128	; 0x80
   23f40:	0212      	lsls	r2, r2, #8
   23f42:	609a      	str	r2, [r3, #8]
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
   23f44:	2394      	movs	r3, #148	; 0x94
   23f46:	18fb      	adds	r3, r7, r3
   23f48:	2200      	movs	r2, #0
   23f4a:	701a      	strb	r2, [r3, #0]
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
   23f4c:	2394      	movs	r3, #148	; 0x94
   23f4e:	18fb      	adds	r3, r7, r3
   23f50:	2206      	movs	r2, #6
   23f52:	705a      	strb	r2, [r3, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
   23f54:	2394      	movs	r3, #148	; 0x94
   23f56:	18fb      	adds	r3, r7, r3
   23f58:	2200      	movs	r2, #0
   23f5a:	709a      	strb	r2, [r3, #2]
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
   23f5c:	2394      	movs	r3, #148	; 0x94
   23f5e:	18fb      	adds	r3, r7, r3
   23f60:	2200      	movs	r2, #0
   23f62:	70da      	strb	r2, [r3, #3]
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
   23f64:	2394      	movs	r3, #148	; 0x94
   23f66:	18fb      	adds	r3, r7, r3
   23f68:	2201      	movs	r2, #1
   23f6a:	711a      	strb	r2, [r3, #4]
	xosc32k_conf.on_demand           = false;
   23f6c:	2394      	movs	r3, #148	; 0x94
   23f6e:	18fb      	adds	r3, r7, r3
   23f70:	2200      	movs	r2, #0
   23f72:	735a      	strb	r2, [r3, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;
   23f74:	2394      	movs	r3, #148	; 0x94
   23f76:	18fb      	adds	r3, r7, r3
   23f78:	2201      	movs	r2, #1
   23f7a:	731a      	strb	r2, [r3, #12]

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
   23f7c:	2394      	movs	r3, #148	; 0x94
   23f7e:	18fb      	adds	r3, r7, r3
   23f80:	0018      	movs	r0, r3
   23f82:	4bac      	ldr	r3, [pc, #688]	; (24234 <system_clock_init+0x31c>)
   23f84:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
   23f86:	2005      	movs	r0, #5
   23f88:	4bab      	ldr	r3, [pc, #684]	; (24238 <system_clock_init+0x320>)
   23f8a:	4798      	blx	r3
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
   23f8c:	46c0      	nop			; (mov r8, r8)
   23f8e:	2005      	movs	r0, #5
   23f90:	4baa      	ldr	r3, [pc, #680]	; (2423c <system_clock_init+0x324>)
   23f92:	4798      	blx	r3
   23f94:	0003      	movs	r3, r0
   23f96:	001a      	movs	r2, r3
   23f98:	2301      	movs	r3, #1
   23f9a:	4053      	eors	r3, r2
   23f9c:	b2db      	uxtb	r3, r3
   23f9e:	2b00      	cmp	r3, #0
   23fa0:	d1f5      	bne.n	23f8e <system_clock_init+0x76>


	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);
   23fa2:	2380      	movs	r3, #128	; 0x80
   23fa4:	18fb      	adds	r3, r7, r3
   23fa6:	0018      	movs	r0, r3
   23fa8:	4ba5      	ldr	r3, [pc, #660]	; (24240 <system_clock_init+0x328>)
   23faa:	4798      	blx	r3

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
   23fac:	2380      	movs	r3, #128	; 0x80
   23fae:	18fb      	adds	r3, r7, r3
   23fb0:	2204      	movs	r2, #4
   23fb2:	701a      	strb	r2, [r3, #0]
	dfll_conf.on_demand      = false;
   23fb4:	2380      	movs	r3, #128	; 0x80
   23fb6:	18fb      	adds	r3, r7, r3
   23fb8:	2200      	movs	r2, #0
   23fba:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
   23fbc:	4ba1      	ldr	r3, [pc, #644]	; (24244 <system_clock_init+0x32c>)
   23fbe:	681b      	ldr	r3, [r3, #0]
   23fc0:	0e9b      	lsrs	r3, r3, #26
   23fc2:	22a4      	movs	r2, #164	; 0xa4
   23fc4:	18ba      	adds	r2, r7, r2
   23fc6:	6013      	str	r3, [r2, #0]
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
   23fc8:	23a4      	movs	r3, #164	; 0xa4
   23fca:	18fb      	adds	r3, r7, r3
   23fcc:	681b      	ldr	r3, [r3, #0]
   23fce:	2b3f      	cmp	r3, #63	; 0x3f
   23fd0:	d103      	bne.n	23fda <system_clock_init+0xc2>
		coarse = 0x1f;
   23fd2:	231f      	movs	r3, #31
   23fd4:	22a4      	movs	r2, #164	; 0xa4
   23fd6:	18ba      	adds	r2, r7, r2
   23fd8:	6013      	str	r3, [r2, #0]
	}
	dfll_conf.coarse_value = coarse;
   23fda:	23a4      	movs	r3, #164	; 0xa4
   23fdc:	18fb      	adds	r3, r7, r3
   23fde:	681b      	ldr	r3, [r3, #0]
   23fe0:	b2da      	uxtb	r2, r3
   23fe2:	2380      	movs	r3, #128	; 0x80
   23fe4:	18fb      	adds	r3, r7, r3
   23fe6:	721a      	strb	r2, [r3, #8]
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN) {
		dfll_conf.fine_value   = CONF_CLOCK_DFLL_FINE_VALUE;
	}

#  if CONF_CLOCK_DFLL_QUICK_LOCK == true
	dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
   23fe8:	2380      	movs	r3, #128	; 0x80
   23fea:	18fb      	adds	r3, r7, r3
   23fec:	2200      	movs	r2, #0
   23fee:	805a      	strh	r2, [r3, #2]
#  else
	dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_DISABLE;
#  endif

#  if CONF_CLOCK_DFLL_TRACK_AFTER_FINE_LOCK == true
	dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
   23ff0:	2380      	movs	r3, #128	; 0x80
   23ff2:	18fb      	adds	r3, r7, r3
   23ff4:	2200      	movs	r2, #0
   23ff6:	71da      	strb	r2, [r3, #7]
#  else
	dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_FIX_AFTER_LOCK;
#  endif

#  if CONF_CLOCK_DFLL_KEEP_LOCK_ON_WAKEUP == true
	dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
   23ff8:	2380      	movs	r3, #128	; 0x80
   23ffa:	18fb      	adds	r3, r7, r3
   23ffc:	2200      	movs	r2, #0
   23ffe:	719a      	strb	r2, [r3, #6]
#  else
	dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_LOSE;
#  endif

#  if CONF_CLOCK_DFLL_ENABLE_CHILL_CYCLE == true
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
   24000:	2380      	movs	r3, #128	; 0x80
   24002:	18fb      	adds	r3, r7, r3
   24004:	2200      	movs	r2, #0
   24006:	809a      	strh	r2, [r3, #4]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
   24008:	2380      	movs	r3, #128	; 0x80
   2400a:	18fb      	adds	r3, r7, r3
   2400c:	22b7      	movs	r2, #183	; 0xb7
   2400e:	00d2      	lsls	r2, r2, #3
   24010:	821a      	strh	r2, [r3, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
   24012:	2380      	movs	r3, #128	; 0x80
   24014:	18fb      	adds	r3, r7, r3
   24016:	2203      	movs	r2, #3
   24018:	731a      	strb	r2, [r3, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
   2401a:	2380      	movs	r3, #128	; 0x80
   2401c:	18fb      	adds	r3, r7, r3
   2401e:	221f      	movs	r2, #31
   24020:	81da      	strh	r2, [r3, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
   24022:	2380      	movs	r3, #128	; 0x80
   24024:	18fb      	adds	r3, r7, r3
   24026:	0018      	movs	r0, r3
   24028:	4b87      	ldr	r3, [pc, #540]	; (24248 <system_clock_init+0x330>)
   2402a:	4798      	blx	r3
#endif


	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);
   2402c:	237c      	movs	r3, #124	; 0x7c
   2402e:	18fb      	adds	r3, r7, r3
   24030:	0018      	movs	r0, r3
   24032:	4b86      	ldr	r3, [pc, #536]	; (2424c <system_clock_init+0x334>)
   24034:	4798      	blx	r3

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
   24036:	237c      	movs	r3, #124	; 0x7c
   24038:	18fb      	adds	r3, r7, r3
   2403a:	2200      	movs	r2, #0
   2403c:	701a      	strb	r2, [r3, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
   2403e:	237c      	movs	r3, #124	; 0x7c
   24040:	18fb      	adds	r3, r7, r3
   24042:	2201      	movs	r2, #1
   24044:	709a      	strb	r2, [r3, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;
   24046:	237c      	movs	r3, #124	; 0x7c
   24048:	18fb      	adds	r3, r7, r3
   2404a:	2201      	movs	r2, #1
   2404c:	705a      	strb	r2, [r3, #1]

	system_clock_source_osc8m_set_config(&osc8m_conf);
   2404e:	237c      	movs	r3, #124	; 0x7c
   24050:	18fb      	adds	r3, r7, r3
   24052:	0018      	movs	r0, r3
   24054:	4b7e      	ldr	r3, [pc, #504]	; (24250 <system_clock_init+0x338>)
   24056:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
   24058:	2006      	movs	r0, #6
   2405a:	4b77      	ldr	r3, [pc, #476]	; (24238 <system_clock_init+0x320>)
   2405c:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
   2405e:	4b7d      	ldr	r3, [pc, #500]	; (24254 <system_clock_init+0x33c>)
   24060:	4798      	blx	r3

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
   24062:	2364      	movs	r3, #100	; 0x64
   24064:	18fb      	adds	r3, r7, r3
   24066:	0018      	movs	r0, r3
   24068:	4b7b      	ldr	r3, [pc, #492]	; (24258 <system_clock_init+0x340>)
   2406a:	4798      	blx	r3
   2406c:	2364      	movs	r3, #100	; 0x64
   2406e:	18fb      	adds	r3, r7, r3
   24070:	2205      	movs	r2, #5
   24072:	701a      	strb	r2, [r3, #0]
   24074:	2364      	movs	r3, #100	; 0x64
   24076:	18fb      	adds	r3, r7, r3
   24078:	2201      	movs	r2, #1
   2407a:	605a      	str	r2, [r3, #4]
   2407c:	2364      	movs	r3, #100	; 0x64
   2407e:	18fb      	adds	r3, r7, r3
   24080:	2200      	movs	r2, #0
   24082:	721a      	strb	r2, [r3, #8]
   24084:	2364      	movs	r3, #100	; 0x64
   24086:	18fb      	adds	r3, r7, r3
   24088:	2200      	movs	r2, #0
   2408a:	725a      	strb	r2, [r3, #9]
   2408c:	2364      	movs	r3, #100	; 0x64
   2408e:	18fb      	adds	r3, r7, r3
   24090:	0019      	movs	r1, r3
   24092:	2001      	movs	r0, #1
   24094:	4b71      	ldr	r3, [pc, #452]	; (2425c <system_clock_init+0x344>)
   24096:	4798      	blx	r3
   24098:	2001      	movs	r0, #1
   2409a:	4b71      	ldr	r3, [pc, #452]	; (24260 <system_clock_init+0x348>)
   2409c:	4798      	blx	r3
   2409e:	234c      	movs	r3, #76	; 0x4c
   240a0:	18fb      	adds	r3, r7, r3
   240a2:	0018      	movs	r0, r3
   240a4:	4b6c      	ldr	r3, [pc, #432]	; (24258 <system_clock_init+0x340>)
   240a6:	4798      	blx	r3
   240a8:	234c      	movs	r3, #76	; 0x4c
   240aa:	18fb      	adds	r3, r7, r3
   240ac:	2206      	movs	r2, #6
   240ae:	701a      	strb	r2, [r3, #0]
   240b0:	234c      	movs	r3, #76	; 0x4c
   240b2:	18fb      	adds	r3, r7, r3
   240b4:	2201      	movs	r2, #1
   240b6:	605a      	str	r2, [r3, #4]
   240b8:	234c      	movs	r3, #76	; 0x4c
   240ba:	18fb      	adds	r3, r7, r3
   240bc:	2201      	movs	r2, #1
   240be:	721a      	strb	r2, [r3, #8]
   240c0:	234c      	movs	r3, #76	; 0x4c
   240c2:	18fb      	adds	r3, r7, r3
   240c4:	2200      	movs	r2, #0
   240c6:	725a      	strb	r2, [r3, #9]
   240c8:	234c      	movs	r3, #76	; 0x4c
   240ca:	18fb      	adds	r3, r7, r3
   240cc:	0019      	movs	r1, r3
   240ce:	2003      	movs	r0, #3
   240d0:	4b62      	ldr	r3, [pc, #392]	; (2425c <system_clock_init+0x344>)
   240d2:	4798      	blx	r3
   240d4:	2003      	movs	r0, #3
   240d6:	4b62      	ldr	r3, [pc, #392]	; (24260 <system_clock_init+0x348>)
   240d8:	4798      	blx	r3
   240da:	2340      	movs	r3, #64	; 0x40
   240dc:	18fb      	adds	r3, r7, r3
   240de:	0018      	movs	r0, r3
   240e0:	4b5d      	ldr	r3, [pc, #372]	; (24258 <system_clock_init+0x340>)
   240e2:	4798      	blx	r3
   240e4:	2340      	movs	r3, #64	; 0x40
   240e6:	18fb      	adds	r3, r7, r3
   240e8:	2203      	movs	r2, #3
   240ea:	701a      	strb	r2, [r3, #0]
   240ec:	2340      	movs	r3, #64	; 0x40
   240ee:	18fb      	adds	r3, r7, r3
   240f0:	2220      	movs	r2, #32
   240f2:	605a      	str	r2, [r3, #4]
   240f4:	2340      	movs	r3, #64	; 0x40
   240f6:	18fb      	adds	r3, r7, r3
   240f8:	2200      	movs	r2, #0
   240fa:	721a      	strb	r2, [r3, #8]
   240fc:	2340      	movs	r3, #64	; 0x40
   240fe:	18fb      	adds	r3, r7, r3
   24100:	2200      	movs	r2, #0
   24102:	725a      	strb	r2, [r3, #9]
   24104:	2340      	movs	r3, #64	; 0x40
   24106:	18fb      	adds	r3, r7, r3
   24108:	0019      	movs	r1, r3
   2410a:	2004      	movs	r0, #4
   2410c:	4b53      	ldr	r3, [pc, #332]	; (2425c <system_clock_init+0x344>)
   2410e:	4798      	blx	r3
   24110:	2004      	movs	r0, #4
   24112:	4b53      	ldr	r3, [pc, #332]	; (24260 <system_clock_init+0x348>)
   24114:	4798      	blx	r3
   24116:	2334      	movs	r3, #52	; 0x34
   24118:	18fb      	adds	r3, r7, r3
   2411a:	0018      	movs	r0, r3
   2411c:	4b4e      	ldr	r3, [pc, #312]	; (24258 <system_clock_init+0x340>)
   2411e:	4798      	blx	r3
   24120:	2334      	movs	r3, #52	; 0x34
   24122:	18fb      	adds	r3, r7, r3
   24124:	2207      	movs	r2, #7
   24126:	701a      	strb	r2, [r3, #0]
   24128:	2334      	movs	r3, #52	; 0x34
   2412a:	18fb      	adds	r3, r7, r3
   2412c:	2201      	movs	r2, #1
   2412e:	605a      	str	r2, [r3, #4]
   24130:	2334      	movs	r3, #52	; 0x34
   24132:	18fb      	adds	r3, r7, r3
   24134:	2200      	movs	r2, #0
   24136:	721a      	strb	r2, [r3, #8]
   24138:	2334      	movs	r3, #52	; 0x34
   2413a:	18fb      	adds	r3, r7, r3
   2413c:	2200      	movs	r2, #0
   2413e:	725a      	strb	r2, [r3, #9]
   24140:	2334      	movs	r3, #52	; 0x34
   24142:	18fb      	adds	r3, r7, r3
   24144:	0019      	movs	r1, r3
   24146:	2005      	movs	r0, #5
   24148:	4b44      	ldr	r3, [pc, #272]	; (2425c <system_clock_init+0x344>)
   2414a:	4798      	blx	r3
   2414c:	2005      	movs	r0, #5
   2414e:	4b44      	ldr	r3, [pc, #272]	; (24260 <system_clock_init+0x348>)
   24150:	4798      	blx	r3
   24152:	2328      	movs	r3, #40	; 0x28
   24154:	18fb      	adds	r3, r7, r3
   24156:	0018      	movs	r0, r3
   24158:	4b3f      	ldr	r3, [pc, #252]	; (24258 <system_clock_init+0x340>)
   2415a:	4798      	blx	r3
   2415c:	2328      	movs	r3, #40	; 0x28
   2415e:	18fb      	adds	r3, r7, r3
   24160:	2206      	movs	r2, #6
   24162:	701a      	strb	r2, [r3, #0]
   24164:	2328      	movs	r3, #40	; 0x28
   24166:	18fb      	adds	r3, r7, r3
   24168:	2201      	movs	r2, #1
   2416a:	605a      	str	r2, [r3, #4]
   2416c:	2328      	movs	r3, #40	; 0x28
   2416e:	18fb      	adds	r3, r7, r3
   24170:	2201      	movs	r2, #1
   24172:	721a      	strb	r2, [r3, #8]
   24174:	2328      	movs	r3, #40	; 0x28
   24176:	18fb      	adds	r3, r7, r3
   24178:	2200      	movs	r2, #0
   2417a:	725a      	strb	r2, [r3, #9]
   2417c:	2328      	movs	r3, #40	; 0x28
   2417e:	18fb      	adds	r3, r7, r3
   24180:	0019      	movs	r1, r3
   24182:	2006      	movs	r0, #6
   24184:	4b35      	ldr	r3, [pc, #212]	; (2425c <system_clock_init+0x344>)
   24186:	4798      	blx	r3
   24188:	2006      	movs	r0, #6
   2418a:	4b35      	ldr	r3, [pc, #212]	; (24260 <system_clock_init+0x348>)
   2418c:	4798      	blx	r3
#  if CONF_CLOCK_DFLL_ENABLE == true
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
   2418e:	230c      	movs	r3, #12
   24190:	18fb      	adds	r3, r7, r3
   24192:	0018      	movs	r0, r3
   24194:	4b33      	ldr	r3, [pc, #204]	; (24264 <system_clock_init+0x34c>)
   24196:	4798      	blx	r3
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
   24198:	230c      	movs	r3, #12
   2419a:	18fb      	adds	r3, r7, r3
   2419c:	2201      	movs	r2, #1
   2419e:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
   241a0:	230c      	movs	r3, #12
   241a2:	18fb      	adds	r3, r7, r3
   241a4:	0019      	movs	r1, r3
   241a6:	2000      	movs	r0, #0
   241a8:	4b2f      	ldr	r3, [pc, #188]	; (24268 <system_clock_init+0x350>)
   241aa:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
   241ac:	2000      	movs	r0, #0
   241ae:	4b2f      	ldr	r3, [pc, #188]	; (2426c <system_clock_init+0x354>)
   241b0:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
   241b2:	2007      	movs	r0, #7
   241b4:	4b20      	ldr	r3, [pc, #128]	; (24238 <system_clock_init+0x320>)
   241b6:	4798      	blx	r3
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
   241b8:	46c0      	nop			; (mov r8, r8)
   241ba:	2007      	movs	r0, #7
   241bc:	4b1f      	ldr	r3, [pc, #124]	; (2423c <system_clock_init+0x324>)
   241be:	4798      	blx	r3
   241c0:	0003      	movs	r3, r0
   241c2:	001a      	movs	r2, r3
   241c4:	2301      	movs	r3, #1
   241c6:	4053      	eors	r3, r2
   241c8:	b2db      	uxtb	r3, r3
   241ca:	2b00      	cmp	r3, #0
   241cc:	d1f5      	bne.n	241ba <system_clock_init+0x2a2>

#  endif
#endif

	/* CPU and BUS clocks */
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);
   241ce:	2000      	movs	r0, #0
   241d0:	4b27      	ldr	r3, [pc, #156]	; (24270 <system_clock_init+0x358>)
   241d2:	4798      	blx	r3

	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBA, CONF_CLOCK_APBA_DIVIDER);
   241d4:	2100      	movs	r1, #0
   241d6:	2000      	movs	r0, #0
   241d8:	4b26      	ldr	r3, [pc, #152]	; (24274 <system_clock_init+0x35c>)
   241da:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);
   241dc:	2100      	movs	r1, #0
   241de:	2001      	movs	r0, #1
   241e0:	4b24      	ldr	r3, [pc, #144]	; (24274 <system_clock_init+0x35c>)
   241e2:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);
   241e4:	2100      	movs	r1, #0
   241e6:	2002      	movs	r0, #2
   241e8:	4b22      	ldr	r3, [pc, #136]	; (24274 <system_clock_init+0x35c>)
   241ea:	4798      	blx	r3

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
   241ec:	003b      	movs	r3, r7
   241ee:	0018      	movs	r0, r3
   241f0:	4b19      	ldr	r3, [pc, #100]	; (24258 <system_clock_init+0x340>)
   241f2:	4798      	blx	r3
   241f4:	003b      	movs	r3, r7
   241f6:	2207      	movs	r2, #7
   241f8:	701a      	strb	r2, [r3, #0]
   241fa:	003b      	movs	r3, r7
   241fc:	2201      	movs	r2, #1
   241fe:	605a      	str	r2, [r3, #4]
   24200:	003b      	movs	r3, r7
   24202:	2200      	movs	r2, #0
   24204:	721a      	strb	r2, [r3, #8]
   24206:	003b      	movs	r3, r7
   24208:	2200      	movs	r2, #0
   2420a:	725a      	strb	r2, [r3, #9]
   2420c:	003b      	movs	r3, r7
   2420e:	0019      	movs	r1, r3
   24210:	2000      	movs	r0, #0
   24212:	4b12      	ldr	r3, [pc, #72]	; (2425c <system_clock_init+0x344>)
   24214:	4798      	blx	r3
   24216:	2000      	movs	r0, #0
   24218:	4b11      	ldr	r3, [pc, #68]	; (24260 <system_clock_init+0x348>)
   2421a:	4798      	blx	r3
#endif
}
   2421c:	46c0      	nop			; (mov r8, r8)
   2421e:	46bd      	mov	sp, r7
   24220:	b02a      	add	sp, #168	; 0xa8
   24222:	bd80      	pop	{r7, pc}
   24224:	40000800 	.word	0x40000800
   24228:	000239f5 	.word	0x000239f5
   2422c:	00023ee1 	.word	0x00023ee1
   24230:	000238c5 	.word	0x000238c5
   24234:	00023bc1 	.word	0x00023bc1
   24238:	00023db1 	.word	0x00023db1
   2423c:	00023e5d 	.word	0x00023e5d
   24240:	0002392f 	.word	0x0002392f
   24244:	00806024 	.word	0x00806024
   24248:	00023ce1 	.word	0x00023ce1
   2424c:	0002390d 	.word	0x0002390d
   24250:	00023b49 	.word	0x00023b49
   24254:	0002431d 	.word	0x0002431d
   24258:	00023881 	.word	0x00023881
   2425c:	0002434d 	.word	0x0002434d
   24260:	00024471 	.word	0x00024471
   24264:	000238af 	.word	0x000238af
   24268:	000245a5 	.word	0x000245a5
   2426c:	000245e9 	.word	0x000245e9
   24270:	00023981 	.word	0x00023981
   24274:	000239a1 	.word	0x000239a1

00024278 <system_apb_clock_set_mask>:
{
   24278:	b580      	push	{r7, lr}
   2427a:	b082      	sub	sp, #8
   2427c:	af00      	add	r7, sp, #0
   2427e:	0002      	movs	r2, r0
   24280:	6039      	str	r1, [r7, #0]
   24282:	1dfb      	adds	r3, r7, #7
   24284:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   24286:	1dfb      	adds	r3, r7, #7
   24288:	781b      	ldrb	r3, [r3, #0]
   2428a:	2b01      	cmp	r3, #1
   2428c:	d00a      	beq.n	242a4 <system_apb_clock_set_mask+0x2c>
   2428e:	2b02      	cmp	r3, #2
   24290:	d00f      	beq.n	242b2 <system_apb_clock_set_mask+0x3a>
   24292:	2b00      	cmp	r3, #0
   24294:	d114      	bne.n	242c0 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   24296:	4b0e      	ldr	r3, [pc, #56]	; (242d0 <system_apb_clock_set_mask+0x58>)
   24298:	4a0d      	ldr	r2, [pc, #52]	; (242d0 <system_apb_clock_set_mask+0x58>)
   2429a:	6991      	ldr	r1, [r2, #24]
   2429c:	683a      	ldr	r2, [r7, #0]
   2429e:	430a      	orrs	r2, r1
   242a0:	619a      	str	r2, [r3, #24]
			break;
   242a2:	e00f      	b.n	242c4 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   242a4:	4b0a      	ldr	r3, [pc, #40]	; (242d0 <system_apb_clock_set_mask+0x58>)
   242a6:	4a0a      	ldr	r2, [pc, #40]	; (242d0 <system_apb_clock_set_mask+0x58>)
   242a8:	69d1      	ldr	r1, [r2, #28]
   242aa:	683a      	ldr	r2, [r7, #0]
   242ac:	430a      	orrs	r2, r1
   242ae:	61da      	str	r2, [r3, #28]
			break;
   242b0:	e008      	b.n	242c4 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   242b2:	4b07      	ldr	r3, [pc, #28]	; (242d0 <system_apb_clock_set_mask+0x58>)
   242b4:	4a06      	ldr	r2, [pc, #24]	; (242d0 <system_apb_clock_set_mask+0x58>)
   242b6:	6a11      	ldr	r1, [r2, #32]
   242b8:	683a      	ldr	r2, [r7, #0]
   242ba:	430a      	orrs	r2, r1
   242bc:	621a      	str	r2, [r3, #32]
			break;
   242be:	e001      	b.n	242c4 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   242c0:	2317      	movs	r3, #23
   242c2:	e000      	b.n	242c6 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   242c4:	2300      	movs	r3, #0
}
   242c6:	0018      	movs	r0, r3
   242c8:	46bd      	mov	sp, r7
   242ca:	b002      	add	sp, #8
   242cc:	bd80      	pop	{r7, pc}
   242ce:	46c0      	nop			; (mov r8, r8)
   242d0:	40000400 	.word	0x40000400

000242d4 <system_interrupt_enter_critical_section>:
{
   242d4:	b580      	push	{r7, lr}
   242d6:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
   242d8:	4b02      	ldr	r3, [pc, #8]	; (242e4 <system_interrupt_enter_critical_section+0x10>)
   242da:	4798      	blx	r3
}
   242dc:	46c0      	nop			; (mov r8, r8)
   242de:	46bd      	mov	sp, r7
   242e0:	bd80      	pop	{r7, pc}
   242e2:	46c0      	nop			; (mov r8, r8)
   242e4:	000237ed 	.word	0x000237ed

000242e8 <system_interrupt_leave_critical_section>:
{
   242e8:	b580      	push	{r7, lr}
   242ea:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
   242ec:	4b02      	ldr	r3, [pc, #8]	; (242f8 <system_interrupt_leave_critical_section+0x10>)
   242ee:	4798      	blx	r3
}
   242f0:	46c0      	nop			; (mov r8, r8)
   242f2:	46bd      	mov	sp, r7
   242f4:	bd80      	pop	{r7, pc}
   242f6:	46c0      	nop			; (mov r8, r8)
   242f8:	00023841 	.word	0x00023841

000242fc <system_gclk_is_syncing>:
 *
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
   242fc:	b580      	push	{r7, lr}
   242fe:	af00      	add	r7, sp, #0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
   24300:	4b05      	ldr	r3, [pc, #20]	; (24318 <system_gclk_is_syncing+0x1c>)
   24302:	785b      	ldrb	r3, [r3, #1]
   24304:	b2db      	uxtb	r3, r3
   24306:	b25b      	sxtb	r3, r3
   24308:	2b00      	cmp	r3, #0
   2430a:	da01      	bge.n	24310 <system_gclk_is_syncing+0x14>
		return true;
   2430c:	2301      	movs	r3, #1
   2430e:	e000      	b.n	24312 <system_gclk_is_syncing+0x16>
	}

	return false;
   24310:	2300      	movs	r3, #0
}
   24312:	0018      	movs	r0, r3
   24314:	46bd      	mov	sp, r7
   24316:	bd80      	pop	{r7, pc}
   24318:	40000c00 	.word	0x40000c00

0002431c <system_gclk_init>:
 *
 * Initializes the Generic Clock module, disabling and resetting all active
 * Generic Clock Generators and Channels to their power-on default values.
 */
void system_gclk_init(void)
{
   2431c:	b580      	push	{r7, lr}
   2431e:	af00      	add	r7, sp, #0
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);
   24320:	2108      	movs	r1, #8
   24322:	2000      	movs	r0, #0
   24324:	4b07      	ldr	r3, [pc, #28]	; (24344 <system_gclk_init+0x28>)
   24326:	4798      	blx	r3

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
   24328:	4b07      	ldr	r3, [pc, #28]	; (24348 <system_gclk_init+0x2c>)
   2432a:	2201      	movs	r2, #1
   2432c:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
   2432e:	46c0      	nop			; (mov r8, r8)
   24330:	4b05      	ldr	r3, [pc, #20]	; (24348 <system_gclk_init+0x2c>)
   24332:	781b      	ldrb	r3, [r3, #0]
   24334:	b2db      	uxtb	r3, r3
   24336:	001a      	movs	r2, r3
   24338:	2301      	movs	r3, #1
   2433a:	4013      	ands	r3, r2
   2433c:	d1f8      	bne.n	24330 <system_gclk_init+0x14>
		/* Wait for reset to complete */
	}
}
   2433e:	46c0      	nop			; (mov r8, r8)
   24340:	46bd      	mov	sp, r7
   24342:	bd80      	pop	{r7, pc}
   24344:	00024279 	.word	0x00024279
   24348:	40000c00 	.word	0x40000c00

0002434c <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
   2434c:	b580      	push	{r7, lr}
   2434e:	b086      	sub	sp, #24
   24350:	af00      	add	r7, sp, #0
   24352:	0002      	movs	r2, r0
   24354:	6039      	str	r1, [r7, #0]
   24356:	1dfb      	adds	r3, r7, #7
   24358:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
   2435a:	1dfb      	adds	r3, r7, #7
   2435c:	781b      	ldrb	r3, [r3, #0]
   2435e:	617b      	str	r3, [r7, #20]
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);
   24360:	1dfb      	adds	r3, r7, #7
   24362:	781b      	ldrb	r3, [r3, #0]
   24364:	613b      	str	r3, [r7, #16]

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
   24366:	683b      	ldr	r3, [r7, #0]
   24368:	781b      	ldrb	r3, [r3, #0]
   2436a:	021b      	lsls	r3, r3, #8
   2436c:	001a      	movs	r2, r3
   2436e:	697b      	ldr	r3, [r7, #20]
   24370:	4313      	orrs	r3, r2
   24372:	617b      	str	r3, [r7, #20]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
   24374:	683b      	ldr	r3, [r7, #0]
   24376:	785b      	ldrb	r3, [r3, #1]
   24378:	2b00      	cmp	r3, #0
   2437a:	d004      	beq.n	24386 <system_gclk_gen_set_config+0x3a>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
   2437c:	697b      	ldr	r3, [r7, #20]
   2437e:	2280      	movs	r2, #128	; 0x80
   24380:	02d2      	lsls	r2, r2, #11
   24382:	4313      	orrs	r3, r2
   24384:	617b      	str	r3, [r7, #20]
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
   24386:	683b      	ldr	r3, [r7, #0]
   24388:	7a5b      	ldrb	r3, [r3, #9]
   2438a:	2b00      	cmp	r3, #0
   2438c:	d004      	beq.n	24398 <system_gclk_gen_set_config+0x4c>
		new_genctrl_config |= GCLK_GENCTRL_OE;
   2438e:	697b      	ldr	r3, [r7, #20]
   24390:	2280      	movs	r2, #128	; 0x80
   24392:	0312      	lsls	r2, r2, #12
   24394:	4313      	orrs	r3, r2
   24396:	617b      	str	r3, [r7, #20]
	}

	/* Set division factor */
	if (config->division_factor > 1) {
   24398:	683b      	ldr	r3, [r7, #0]
   2439a:	685b      	ldr	r3, [r3, #4]
   2439c:	2b01      	cmp	r3, #1
   2439e:	d92c      	bls.n	243fa <system_gclk_gen_set_config+0xae>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
   243a0:	683b      	ldr	r3, [r7, #0]
   243a2:	685a      	ldr	r2, [r3, #4]
   243a4:	683b      	ldr	r3, [r7, #0]
   243a6:	685b      	ldr	r3, [r3, #4]
   243a8:	3b01      	subs	r3, #1
   243aa:	4013      	ands	r3, r2
   243ac:	d11a      	bne.n	243e4 <system_gclk_gen_set_config+0x98>
			/* Determine the index of the highest bit set to get the
			 * division factor that must be loaded into the division
			 * register */

			uint32_t div2_count = 0;
   243ae:	2300      	movs	r3, #0
   243b0:	60fb      	str	r3, [r7, #12]

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
   243b2:	2302      	movs	r3, #2
   243b4:	60bb      	str	r3, [r7, #8]
   243b6:	e005      	b.n	243c4 <system_gclk_gen_set_config+0x78>
						mask <<= 1) {
				div2_count++;
   243b8:	68fb      	ldr	r3, [r7, #12]
   243ba:	3301      	adds	r3, #1
   243bc:	60fb      	str	r3, [r7, #12]
						mask <<= 1) {
   243be:	68bb      	ldr	r3, [r7, #8]
   243c0:	005b      	lsls	r3, r3, #1
   243c2:	60bb      	str	r3, [r7, #8]
			for (mask = (1UL << 1); mask < config->division_factor;
   243c4:	683b      	ldr	r3, [r7, #0]
   243c6:	685a      	ldr	r2, [r3, #4]
   243c8:	68bb      	ldr	r3, [r7, #8]
   243ca:	429a      	cmp	r2, r3
   243cc:	d8f4      	bhi.n	243b8 <system_gclk_gen_set_config+0x6c>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
   243ce:	68fb      	ldr	r3, [r7, #12]
   243d0:	021b      	lsls	r3, r3, #8
   243d2:	693a      	ldr	r2, [r7, #16]
   243d4:	4313      	orrs	r3, r2
   243d6:	613b      	str	r3, [r7, #16]
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
   243d8:	697b      	ldr	r3, [r7, #20]
   243da:	2280      	movs	r2, #128	; 0x80
   243dc:	0352      	lsls	r2, r2, #13
   243de:	4313      	orrs	r3, r2
   243e0:	617b      	str	r3, [r7, #20]
   243e2:	e00a      	b.n	243fa <system_gclk_gen_set_config+0xae>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
   243e4:	683b      	ldr	r3, [r7, #0]
   243e6:	685b      	ldr	r3, [r3, #4]
   243e8:	021b      	lsls	r3, r3, #8
			new_gendiv_config  |=
   243ea:	693a      	ldr	r2, [r7, #16]
   243ec:	4313      	orrs	r3, r2
   243ee:	613b      	str	r3, [r7, #16]

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
   243f0:	697b      	ldr	r3, [r7, #20]
   243f2:	2280      	movs	r2, #128	; 0x80
   243f4:	0292      	lsls	r2, r2, #10
   243f6:	4313      	orrs	r3, r2
   243f8:	617b      	str	r3, [r7, #20]
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
   243fa:	683b      	ldr	r3, [r7, #0]
   243fc:	7a1b      	ldrb	r3, [r3, #8]
   243fe:	2b00      	cmp	r3, #0
   24400:	d004      	beq.n	2440c <system_gclk_gen_set_config+0xc0>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
   24402:	697b      	ldr	r3, [r7, #20]
   24404:	2280      	movs	r2, #128	; 0x80
   24406:	0392      	lsls	r2, r2, #14
   24408:	4313      	orrs	r3, r2
   2440a:	617b      	str	r3, [r7, #20]
	}

	while (system_gclk_is_syncing()) {
   2440c:	46c0      	nop			; (mov r8, r8)
   2440e:	4b13      	ldr	r3, [pc, #76]	; (2445c <system_gclk_gen_set_config+0x110>)
   24410:	4798      	blx	r3
   24412:	1e03      	subs	r3, r0, #0
   24414:	d1fb      	bne.n	2440e <system_gclk_gen_set_config+0xc2>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
   24416:	4b12      	ldr	r3, [pc, #72]	; (24460 <system_gclk_gen_set_config+0x114>)
   24418:	4798      	blx	r3

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
   2441a:	4a12      	ldr	r2, [pc, #72]	; (24464 <system_gclk_gen_set_config+0x118>)
   2441c:	1dfb      	adds	r3, r7, #7
   2441e:	781b      	ldrb	r3, [r3, #0]
   24420:	7013      	strb	r3, [r2, #0]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
   24422:	46c0      	nop			; (mov r8, r8)
   24424:	4b0d      	ldr	r3, [pc, #52]	; (2445c <system_gclk_gen_set_config+0x110>)
   24426:	4798      	blx	r3
   24428:	1e03      	subs	r3, r0, #0
   2442a:	d1fb      	bne.n	24424 <system_gclk_gen_set_config+0xd8>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
   2442c:	4b0e      	ldr	r3, [pc, #56]	; (24468 <system_gclk_gen_set_config+0x11c>)
   2442e:	693a      	ldr	r2, [r7, #16]
   24430:	609a      	str	r2, [r3, #8]

	while (system_gclk_is_syncing()) {
   24432:	46c0      	nop			; (mov r8, r8)
   24434:	4b09      	ldr	r3, [pc, #36]	; (2445c <system_gclk_gen_set_config+0x110>)
   24436:	4798      	blx	r3
   24438:	1e03      	subs	r3, r0, #0
   2443a:	d1fb      	bne.n	24434 <system_gclk_gen_set_config+0xe8>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
   2443c:	4b0a      	ldr	r3, [pc, #40]	; (24468 <system_gclk_gen_set_config+0x11c>)
   2443e:	4a0a      	ldr	r2, [pc, #40]	; (24468 <system_gclk_gen_set_config+0x11c>)
   24440:	6851      	ldr	r1, [r2, #4]
   24442:	2280      	movs	r2, #128	; 0x80
   24444:	0252      	lsls	r2, r2, #9
   24446:	4011      	ands	r1, r2
   24448:	697a      	ldr	r2, [r7, #20]
   2444a:	430a      	orrs	r2, r1
   2444c:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
   2444e:	4b07      	ldr	r3, [pc, #28]	; (2446c <system_gclk_gen_set_config+0x120>)
   24450:	4798      	blx	r3
}
   24452:	46c0      	nop			; (mov r8, r8)
   24454:	46bd      	mov	sp, r7
   24456:	b006      	add	sp, #24
   24458:	bd80      	pop	{r7, pc}
   2445a:	46c0      	nop			; (mov r8, r8)
   2445c:	000242fd 	.word	0x000242fd
   24460:	000242d5 	.word	0x000242d5
   24464:	40000c08 	.word	0x40000c08
   24468:	40000c00 	.word	0x40000c00
   2446c:	000242e9 	.word	0x000242e9

00024470 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
   24470:	b580      	push	{r7, lr}
   24472:	b082      	sub	sp, #8
   24474:	af00      	add	r7, sp, #0
   24476:	0002      	movs	r2, r0
   24478:	1dfb      	adds	r3, r7, #7
   2447a:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
   2447c:	46c0      	nop			; (mov r8, r8)
   2447e:	4b0e      	ldr	r3, [pc, #56]	; (244b8 <system_gclk_gen_enable+0x48>)
   24480:	4798      	blx	r3
   24482:	1e03      	subs	r3, r0, #0
   24484:	d1fb      	bne.n	2447e <system_gclk_gen_enable+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
   24486:	4b0d      	ldr	r3, [pc, #52]	; (244bc <system_gclk_gen_enable+0x4c>)
   24488:	4798      	blx	r3

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   2448a:	4a0d      	ldr	r2, [pc, #52]	; (244c0 <system_gclk_gen_enable+0x50>)
   2448c:	1dfb      	adds	r3, r7, #7
   2448e:	781b      	ldrb	r3, [r3, #0]
   24490:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
   24492:	46c0      	nop			; (mov r8, r8)
   24494:	4b08      	ldr	r3, [pc, #32]	; (244b8 <system_gclk_gen_enable+0x48>)
   24496:	4798      	blx	r3
   24498:	1e03      	subs	r3, r0, #0
   2449a:	d1fb      	bne.n	24494 <system_gclk_gen_enable+0x24>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
   2449c:	4b09      	ldr	r3, [pc, #36]	; (244c4 <system_gclk_gen_enable+0x54>)
   2449e:	4a09      	ldr	r2, [pc, #36]	; (244c4 <system_gclk_gen_enable+0x54>)
   244a0:	6852      	ldr	r2, [r2, #4]
   244a2:	2180      	movs	r1, #128	; 0x80
   244a4:	0249      	lsls	r1, r1, #9
   244a6:	430a      	orrs	r2, r1
   244a8:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
   244aa:	4b07      	ldr	r3, [pc, #28]	; (244c8 <system_gclk_gen_enable+0x58>)
   244ac:	4798      	blx	r3
}
   244ae:	46c0      	nop			; (mov r8, r8)
   244b0:	46bd      	mov	sp, r7
   244b2:	b002      	add	sp, #8
   244b4:	bd80      	pop	{r7, pc}
   244b6:	46c0      	nop			; (mov r8, r8)
   244b8:	000242fd 	.word	0x000242fd
   244bc:	000242d5 	.word	0x000242d5
   244c0:	40000c04 	.word	0x40000c04
   244c4:	40000c00 	.word	0x40000c00
   244c8:	000242e9 	.word	0x000242e9

000244cc <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
   244cc:	b580      	push	{r7, lr}
   244ce:	b086      	sub	sp, #24
   244d0:	af00      	add	r7, sp, #0
   244d2:	0002      	movs	r2, r0
   244d4:	1dfb      	adds	r3, r7, #7
   244d6:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
   244d8:	46c0      	nop			; (mov r8, r8)
   244da:	4b2a      	ldr	r3, [pc, #168]	; (24584 <system_gclk_gen_get_hz+0xb8>)
   244dc:	4798      	blx	r3
   244de:	1e03      	subs	r3, r0, #0
   244e0:	d1fb      	bne.n	244da <system_gclk_gen_get_hz+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
   244e2:	4b29      	ldr	r3, [pc, #164]	; (24588 <system_gclk_gen_get_hz+0xbc>)
   244e4:	4798      	blx	r3

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   244e6:	4a29      	ldr	r2, [pc, #164]	; (2458c <system_gclk_gen_get_hz+0xc0>)
   244e8:	1dfb      	adds	r3, r7, #7
   244ea:	781b      	ldrb	r3, [r3, #0]
   244ec:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
   244ee:	46c0      	nop			; (mov r8, r8)
   244f0:	4b24      	ldr	r3, [pc, #144]	; (24584 <system_gclk_gen_get_hz+0xb8>)
   244f2:	4798      	blx	r3
   244f4:	1e03      	subs	r3, r0, #0
   244f6:	d1fb      	bne.n	244f0 <system_gclk_gen_get_hz+0x24>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
   244f8:	4b25      	ldr	r3, [pc, #148]	; (24590 <system_gclk_gen_get_hz+0xc4>)
   244fa:	685b      	ldr	r3, [r3, #4]
   244fc:	04db      	lsls	r3, r3, #19
   244fe:	0edb      	lsrs	r3, r3, #27
   24500:	b2db      	uxtb	r3, r3
	uint32_t gen_input_hz = system_clock_source_get_hz(
   24502:	0018      	movs	r0, r3
   24504:	4b23      	ldr	r3, [pc, #140]	; (24594 <system_gclk_gen_get_hz+0xc8>)
   24506:	4798      	blx	r3
   24508:	0003      	movs	r3, r0
   2450a:	617b      	str	r3, [r7, #20]

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   2450c:	4a1f      	ldr	r2, [pc, #124]	; (2458c <system_gclk_gen_get_hz+0xc0>)
   2450e:	1dfb      	adds	r3, r7, #7
   24510:	781b      	ldrb	r3, [r3, #0]
   24512:	7013      	strb	r3, [r2, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
   24514:	4b1e      	ldr	r3, [pc, #120]	; (24590 <system_gclk_gen_get_hz+0xc4>)
   24516:	685b      	ldr	r3, [r3, #4]
   24518:	02db      	lsls	r3, r3, #11
   2451a:	0fdb      	lsrs	r3, r3, #31
   2451c:	b2da      	uxtb	r2, r3
   2451e:	2313      	movs	r3, #19
   24520:	18fb      	adds	r3, r7, r3
   24522:	701a      	strb	r2, [r3, #0]

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
   24524:	4a1c      	ldr	r2, [pc, #112]	; (24598 <system_gclk_gen_get_hz+0xcc>)
   24526:	1dfb      	adds	r3, r7, #7
   24528:	781b      	ldrb	r3, [r3, #0]
   2452a:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
   2452c:	46c0      	nop			; (mov r8, r8)
   2452e:	4b15      	ldr	r3, [pc, #84]	; (24584 <system_gclk_gen_get_hz+0xb8>)
   24530:	4798      	blx	r3
   24532:	1e03      	subs	r3, r0, #0
   24534:	d1fb      	bne.n	2452e <system_gclk_gen_get_hz+0x62>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
   24536:	4b16      	ldr	r3, [pc, #88]	; (24590 <system_gclk_gen_get_hz+0xc4>)
   24538:	689b      	ldr	r3, [r3, #8]
   2453a:	021b      	lsls	r3, r3, #8
   2453c:	0c1b      	lsrs	r3, r3, #16
   2453e:	b29b      	uxth	r3, r3
   24540:	60fb      	str	r3, [r7, #12]

	system_interrupt_leave_critical_section();
   24542:	4b16      	ldr	r3, [pc, #88]	; (2459c <system_gclk_gen_get_hz+0xd0>)
   24544:	4798      	blx	r3

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
   24546:	2313      	movs	r3, #19
   24548:	18fb      	adds	r3, r7, r3
   2454a:	781b      	ldrb	r3, [r3, #0]
   2454c:	2b00      	cmp	r3, #0
   2454e:	d109      	bne.n	24564 <system_gclk_gen_get_hz+0x98>
   24550:	68fb      	ldr	r3, [r7, #12]
   24552:	2b01      	cmp	r3, #1
   24554:	d906      	bls.n	24564 <system_gclk_gen_get_hz+0x98>
		gen_input_hz /= divider;
   24556:	4b12      	ldr	r3, [pc, #72]	; (245a0 <system_gclk_gen_get_hz+0xd4>)
   24558:	68f9      	ldr	r1, [r7, #12]
   2455a:	6978      	ldr	r0, [r7, #20]
   2455c:	4798      	blx	r3
   2455e:	0003      	movs	r3, r0
   24560:	617b      	str	r3, [r7, #20]
   24562:	e00a      	b.n	2457a <system_gclk_gen_get_hz+0xae>
	} else if (divsel) {
   24564:	2313      	movs	r3, #19
   24566:	18fb      	adds	r3, r7, r3
   24568:	781b      	ldrb	r3, [r3, #0]
   2456a:	2b00      	cmp	r3, #0
   2456c:	d005      	beq.n	2457a <system_gclk_gen_get_hz+0xae>
		gen_input_hz >>= (divider+1);
   2456e:	68fb      	ldr	r3, [r7, #12]
   24570:	3301      	adds	r3, #1
   24572:	697a      	ldr	r2, [r7, #20]
   24574:	40da      	lsrs	r2, r3
   24576:	0013      	movs	r3, r2
   24578:	617b      	str	r3, [r7, #20]
	}

	return gen_input_hz;
   2457a:	697b      	ldr	r3, [r7, #20]
}
   2457c:	0018      	movs	r0, r3
   2457e:	46bd      	mov	sp, r7
   24580:	b006      	add	sp, #24
   24582:	bd80      	pop	{r7, pc}
   24584:	000242fd 	.word	0x000242fd
   24588:	000242d5 	.word	0x000242d5
   2458c:	40000c04 	.word	0x40000c04
   24590:	40000c00 	.word	0x40000c00
   24594:	00023a89 	.word	0x00023a89
   24598:	40000c08 	.word	0x40000c08
   2459c:	000242e9 	.word	0x000242e9
   245a0:	000260e5 	.word	0x000260e5

000245a4 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
   245a4:	b580      	push	{r7, lr}
   245a6:	b084      	sub	sp, #16
   245a8:	af00      	add	r7, sp, #0
   245aa:	0002      	movs	r2, r0
   245ac:	6039      	str	r1, [r7, #0]
   245ae:	1dfb      	adds	r3, r7, #7
   245b0:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);
   245b2:	1dfb      	adds	r3, r7, #7
   245b4:	781b      	ldrb	r3, [r3, #0]
   245b6:	60fb      	str	r3, [r7, #12]

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
   245b8:	683b      	ldr	r3, [r7, #0]
   245ba:	781b      	ldrb	r3, [r3, #0]
   245bc:	021b      	lsls	r3, r3, #8
   245be:	001a      	movs	r2, r3
   245c0:	68fb      	ldr	r3, [r7, #12]
   245c2:	4313      	orrs	r3, r2
   245c4:	60fb      	str	r3, [r7, #12]

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
   245c6:	1dfb      	adds	r3, r7, #7
   245c8:	781b      	ldrb	r3, [r3, #0]
   245ca:	0018      	movs	r0, r3
   245cc:	4b04      	ldr	r3, [pc, #16]	; (245e0 <system_gclk_chan_set_config+0x3c>)
   245ce:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
   245d0:	4b04      	ldr	r3, [pc, #16]	; (245e4 <system_gclk_chan_set_config+0x40>)
   245d2:	68fa      	ldr	r2, [r7, #12]
   245d4:	b292      	uxth	r2, r2
   245d6:	805a      	strh	r2, [r3, #2]
}
   245d8:	46c0      	nop			; (mov r8, r8)
   245da:	46bd      	mov	sp, r7
   245dc:	b004      	add	sp, #16
   245de:	bd80      	pop	{r7, pc}
   245e0:	00024631 	.word	0x00024631
   245e4:	40000c00 	.word	0x40000c00

000245e8 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
   245e8:	b580      	push	{r7, lr}
   245ea:	b082      	sub	sp, #8
   245ec:	af00      	add	r7, sp, #0
   245ee:	0002      	movs	r2, r0
   245f0:	1dfb      	adds	r3, r7, #7
   245f2:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
   245f4:	4b0a      	ldr	r3, [pc, #40]	; (24620 <system_gclk_chan_enable+0x38>)
   245f6:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   245f8:	4a0a      	ldr	r2, [pc, #40]	; (24624 <system_gclk_chan_enable+0x3c>)
   245fa:	1dfb      	adds	r3, r7, #7
   245fc:	781b      	ldrb	r3, [r3, #0]
   245fe:	7013      	strb	r3, [r2, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
   24600:	4909      	ldr	r1, [pc, #36]	; (24628 <system_gclk_chan_enable+0x40>)
   24602:	4b09      	ldr	r3, [pc, #36]	; (24628 <system_gclk_chan_enable+0x40>)
   24604:	885b      	ldrh	r3, [r3, #2]
   24606:	b29b      	uxth	r3, r3
   24608:	2280      	movs	r2, #128	; 0x80
   2460a:	01d2      	lsls	r2, r2, #7
   2460c:	4313      	orrs	r3, r2
   2460e:	b29b      	uxth	r3, r3
   24610:	804b      	strh	r3, [r1, #2]

	system_interrupt_leave_critical_section();
   24612:	4b06      	ldr	r3, [pc, #24]	; (2462c <system_gclk_chan_enable+0x44>)
   24614:	4798      	blx	r3
}
   24616:	46c0      	nop			; (mov r8, r8)
   24618:	46bd      	mov	sp, r7
   2461a:	b002      	add	sp, #8
   2461c:	bd80      	pop	{r7, pc}
   2461e:	46c0      	nop			; (mov r8, r8)
   24620:	000242d5 	.word	0x000242d5
   24624:	40000c02 	.word	0x40000c02
   24628:	40000c00 	.word	0x40000c00
   2462c:	000242e9 	.word	0x000242e9

00024630 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
   24630:	b580      	push	{r7, lr}
   24632:	b084      	sub	sp, #16
   24634:	af00      	add	r7, sp, #0
   24636:	0002      	movs	r2, r0
   24638:	1dfb      	adds	r3, r7, #7
   2463a:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
   2463c:	4b1c      	ldr	r3, [pc, #112]	; (246b0 <system_gclk_chan_disable+0x80>)
   2463e:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   24640:	4a1c      	ldr	r2, [pc, #112]	; (246b4 <system_gclk_chan_disable+0x84>)
   24642:	1dfb      	adds	r3, r7, #7
   24644:	781b      	ldrb	r3, [r3, #0]
   24646:	7013      	strb	r3, [r2, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
   24648:	4b1b      	ldr	r3, [pc, #108]	; (246b8 <system_gclk_chan_disable+0x88>)
   2464a:	885b      	ldrh	r3, [r3, #2]
   2464c:	051b      	lsls	r3, r3, #20
   2464e:	0f1b      	lsrs	r3, r3, #28
   24650:	b2db      	uxtb	r3, r3
   24652:	60fb      	str	r3, [r7, #12]
	GCLK->CLKCTRL.bit.GEN = 0;
   24654:	4a18      	ldr	r2, [pc, #96]	; (246b8 <system_gclk_chan_disable+0x88>)
   24656:	8853      	ldrh	r3, [r2, #2]
   24658:	4918      	ldr	r1, [pc, #96]	; (246bc <system_gclk_chan_disable+0x8c>)
   2465a:	400b      	ands	r3, r1
   2465c:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
   2465e:	4a16      	ldr	r2, [pc, #88]	; (246b8 <system_gclk_chan_disable+0x88>)
   24660:	4b15      	ldr	r3, [pc, #84]	; (246b8 <system_gclk_chan_disable+0x88>)
   24662:	885b      	ldrh	r3, [r3, #2]
   24664:	b29b      	uxth	r3, r3
   24666:	4916      	ldr	r1, [pc, #88]	; (246c0 <system_gclk_chan_disable+0x90>)
   24668:	400b      	ands	r3, r1
   2466a:	b29b      	uxth	r3, r3
   2466c:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
   2466e:	46c0      	nop			; (mov r8, r8)
   24670:	4b11      	ldr	r3, [pc, #68]	; (246b8 <system_gclk_chan_disable+0x88>)
   24672:	885b      	ldrh	r3, [r3, #2]
   24674:	b29b      	uxth	r3, r3
   24676:	001a      	movs	r2, r3
   24678:	2380      	movs	r3, #128	; 0x80
   2467a:	01db      	lsls	r3, r3, #7
   2467c:	4013      	ands	r3, r2
   2467e:	d1f7      	bne.n	24670 <system_gclk_chan_disable+0x40>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
   24680:	4a0d      	ldr	r2, [pc, #52]	; (246b8 <system_gclk_chan_disable+0x88>)
   24682:	68fb      	ldr	r3, [r7, #12]
   24684:	b2db      	uxtb	r3, r3
   24686:	1c19      	adds	r1, r3, #0
   24688:	230f      	movs	r3, #15
   2468a:	400b      	ands	r3, r1
   2468c:	b2d9      	uxtb	r1, r3
   2468e:	8853      	ldrh	r3, [r2, #2]
   24690:	1c08      	adds	r0, r1, #0
   24692:	210f      	movs	r1, #15
   24694:	4001      	ands	r1, r0
   24696:	0208      	lsls	r0, r1, #8
   24698:	4908      	ldr	r1, [pc, #32]	; (246bc <system_gclk_chan_disable+0x8c>)
   2469a:	400b      	ands	r3, r1
   2469c:	1c19      	adds	r1, r3, #0
   2469e:	1c03      	adds	r3, r0, #0
   246a0:	430b      	orrs	r3, r1
   246a2:	8053      	strh	r3, [r2, #2]

	system_interrupt_leave_critical_section();
   246a4:	4b07      	ldr	r3, [pc, #28]	; (246c4 <system_gclk_chan_disable+0x94>)
   246a6:	4798      	blx	r3
}
   246a8:	46c0      	nop			; (mov r8, r8)
   246aa:	46bd      	mov	sp, r7
   246ac:	b004      	add	sp, #16
   246ae:	bd80      	pop	{r7, pc}
   246b0:	000242d5 	.word	0x000242d5
   246b4:	40000c02 	.word	0x40000c02
   246b8:	40000c00 	.word	0x40000c00
   246bc:	fffff0ff 	.word	0xfffff0ff
   246c0:	ffffbfff 	.word	0xffffbfff
   246c4:	000242e9 	.word	0x000242e9

000246c8 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
   246c8:	b580      	push	{r7, lr}
   246ca:	b084      	sub	sp, #16
   246cc:	af00      	add	r7, sp, #0
   246ce:	0002      	movs	r2, r0
   246d0:	1dfb      	adds	r3, r7, #7
   246d2:	701a      	strb	r2, [r3, #0]
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
   246d4:	4b0d      	ldr	r3, [pc, #52]	; (2470c <system_gclk_chan_get_hz+0x44>)
   246d6:	4798      	blx	r3

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   246d8:	4a0d      	ldr	r2, [pc, #52]	; (24710 <system_gclk_chan_get_hz+0x48>)
   246da:	1dfb      	adds	r3, r7, #7
   246dc:	781b      	ldrb	r3, [r3, #0]
   246de:	7013      	strb	r3, [r2, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
   246e0:	4b0c      	ldr	r3, [pc, #48]	; (24714 <system_gclk_chan_get_hz+0x4c>)
   246e2:	885b      	ldrh	r3, [r3, #2]
   246e4:	051b      	lsls	r3, r3, #20
   246e6:	0f1b      	lsrs	r3, r3, #28
   246e8:	b2da      	uxtb	r2, r3
   246ea:	230f      	movs	r3, #15
   246ec:	18fb      	adds	r3, r7, r3
   246ee:	701a      	strb	r2, [r3, #0]

	system_interrupt_leave_critical_section();
   246f0:	4b09      	ldr	r3, [pc, #36]	; (24718 <system_gclk_chan_get_hz+0x50>)
   246f2:	4798      	blx	r3

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
   246f4:	230f      	movs	r3, #15
   246f6:	18fb      	adds	r3, r7, r3
   246f8:	781b      	ldrb	r3, [r3, #0]
   246fa:	0018      	movs	r0, r3
   246fc:	4b07      	ldr	r3, [pc, #28]	; (2471c <system_gclk_chan_get_hz+0x54>)
   246fe:	4798      	blx	r3
   24700:	0003      	movs	r3, r0
}
   24702:	0018      	movs	r0, r3
   24704:	46bd      	mov	sp, r7
   24706:	b004      	add	sp, #16
   24708:	bd80      	pop	{r7, pc}
   2470a:	46c0      	nop			; (mov r8, r8)
   2470c:	000242d5 	.word	0x000242d5
   24710:	40000c02 	.word	0x40000c02
   24714:	40000c00 	.word	0x40000c00
   24718:	000242e9 	.word	0x000242e9
   2471c:	000244cd 	.word	0x000244cd

00024720 <system_pinmux_get_group_from_gpio_pin>:
{
   24720:	b580      	push	{r7, lr}
   24722:	b084      	sub	sp, #16
   24724:	af00      	add	r7, sp, #0
   24726:	0002      	movs	r2, r0
   24728:	1dfb      	adds	r3, r7, #7
   2472a:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   2472c:	230f      	movs	r3, #15
   2472e:	18fb      	adds	r3, r7, r3
   24730:	1dfa      	adds	r2, r7, #7
   24732:	7812      	ldrb	r2, [r2, #0]
   24734:	09d2      	lsrs	r2, r2, #7
   24736:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   24738:	230e      	movs	r3, #14
   2473a:	18fb      	adds	r3, r7, r3
   2473c:	1dfa      	adds	r2, r7, #7
   2473e:	7812      	ldrb	r2, [r2, #0]
   24740:	0952      	lsrs	r2, r2, #5
   24742:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   24744:	4b0d      	ldr	r3, [pc, #52]	; (2477c <system_pinmux_get_group_from_gpio_pin+0x5c>)
   24746:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   24748:	230f      	movs	r3, #15
   2474a:	18fb      	adds	r3, r7, r3
   2474c:	781b      	ldrb	r3, [r3, #0]
   2474e:	2b00      	cmp	r3, #0
   24750:	d10f      	bne.n	24772 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   24752:	230f      	movs	r3, #15
   24754:	18fb      	adds	r3, r7, r3
   24756:	781b      	ldrb	r3, [r3, #0]
   24758:	009b      	lsls	r3, r3, #2
   2475a:	2210      	movs	r2, #16
   2475c:	4694      	mov	ip, r2
   2475e:	44bc      	add	ip, r7
   24760:	4463      	add	r3, ip
   24762:	3b08      	subs	r3, #8
   24764:	681a      	ldr	r2, [r3, #0]
   24766:	230e      	movs	r3, #14
   24768:	18fb      	adds	r3, r7, r3
   2476a:	781b      	ldrb	r3, [r3, #0]
   2476c:	01db      	lsls	r3, r3, #7
   2476e:	18d3      	adds	r3, r2, r3
   24770:	e000      	b.n	24774 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   24772:	2300      	movs	r3, #0
}
   24774:	0018      	movs	r0, r3
   24776:	46bd      	mov	sp, r7
   24778:	b004      	add	sp, #16
   2477a:	bd80      	pop	{r7, pc}
   2477c:	41004400 	.word	0x41004400

00024780 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
   24780:	b580      	push	{r7, lr}
   24782:	b088      	sub	sp, #32
   24784:	af00      	add	r7, sp, #0
   24786:	60f8      	str	r0, [r7, #12]
   24788:	60b9      	str	r1, [r7, #8]
   2478a:	607a      	str	r2, [r7, #4]
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
   2478c:	2300      	movs	r3, #0
   2478e:	61fb      	str	r3, [r7, #28]

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
   24790:	687b      	ldr	r3, [r7, #4]
   24792:	78db      	ldrb	r3, [r3, #3]
   24794:	2201      	movs	r2, #1
   24796:	4053      	eors	r3, r2
   24798:	b2db      	uxtb	r3, r3
   2479a:	2b00      	cmp	r3, #0
   2479c:	d035      	beq.n	2480a <_system_pinmux_config+0x8a>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
   2479e:	687b      	ldr	r3, [r7, #4]
   247a0:	781b      	ldrb	r3, [r3, #0]
   247a2:	2b80      	cmp	r3, #128	; 0x80
   247a4:	d00b      	beq.n	247be <_system_pinmux_config+0x3e>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
   247a6:	69fb      	ldr	r3, [r7, #28]
   247a8:	2280      	movs	r2, #128	; 0x80
   247aa:	0252      	lsls	r2, r2, #9
   247ac:	4313      	orrs	r3, r2
   247ae:	61fb      	str	r3, [r7, #28]
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
   247b0:	687b      	ldr	r3, [r7, #4]
   247b2:	781b      	ldrb	r3, [r3, #0]
   247b4:	061b      	lsls	r3, r3, #24
   247b6:	001a      	movs	r2, r3
   247b8:	69fb      	ldr	r3, [r7, #28]
   247ba:	4313      	orrs	r3, r2
   247bc:	61fb      	str	r3, [r7, #28]
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
   247be:	687b      	ldr	r3, [r7, #4]
   247c0:	785b      	ldrb	r3, [r3, #1]
   247c2:	2b00      	cmp	r3, #0
   247c4:	d003      	beq.n	247ce <_system_pinmux_config+0x4e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
   247c6:	687b      	ldr	r3, [r7, #4]
   247c8:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
   247ca:	2b02      	cmp	r3, #2
   247cc:	d110      	bne.n	247f0 <_system_pinmux_config+0x70>
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
   247ce:	69fb      	ldr	r3, [r7, #28]
   247d0:	2280      	movs	r2, #128	; 0x80
   247d2:	0292      	lsls	r2, r2, #10
   247d4:	4313      	orrs	r3, r2
   247d6:	61fb      	str	r3, [r7, #28]

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
   247d8:	687b      	ldr	r3, [r7, #4]
   247da:	789b      	ldrb	r3, [r3, #2]
   247dc:	2b00      	cmp	r3, #0
   247de:	d004      	beq.n	247ea <_system_pinmux_config+0x6a>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
   247e0:	69fb      	ldr	r3, [r7, #28]
   247e2:	2280      	movs	r2, #128	; 0x80
   247e4:	02d2      	lsls	r2, r2, #11
   247e6:	4313      	orrs	r3, r2
   247e8:	61fb      	str	r3, [r7, #28]
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
   247ea:	68fb      	ldr	r3, [r7, #12]
   247ec:	68ba      	ldr	r2, [r7, #8]
   247ee:	605a      	str	r2, [r3, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   247f0:	687b      	ldr	r3, [r7, #4]
   247f2:	785b      	ldrb	r3, [r3, #1]
   247f4:	2b01      	cmp	r3, #1
   247f6:	d003      	beq.n	24800 <_system_pinmux_config+0x80>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
   247f8:	687b      	ldr	r3, [r7, #4]
   247fa:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   247fc:	2b02      	cmp	r3, #2
   247fe:	d107      	bne.n	24810 <_system_pinmux_config+0x90>
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
   24800:	69fb      	ldr	r3, [r7, #28]
   24802:	4a22      	ldr	r2, [pc, #136]	; (2488c <_system_pinmux_config+0x10c>)
   24804:	4013      	ands	r3, r2
   24806:	61fb      	str	r3, [r7, #28]
   24808:	e002      	b.n	24810 <_system_pinmux_config+0x90>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
   2480a:	68fb      	ldr	r3, [r7, #12]
   2480c:	68ba      	ldr	r2, [r7, #8]
   2480e:	605a      	str	r2, [r3, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
   24810:	68bb      	ldr	r3, [r7, #8]
   24812:	041b      	lsls	r3, r3, #16
   24814:	0c1b      	lsrs	r3, r3, #16
   24816:	61bb      	str	r3, [r7, #24]
	uint32_t upper_pin_mask = (pin_mask >> 16);
   24818:	68bb      	ldr	r3, [r7, #8]
   2481a:	0c1b      	lsrs	r3, r3, #16
   2481c:	617b      	str	r3, [r7, #20]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   2481e:	69ba      	ldr	r2, [r7, #24]
   24820:	69fb      	ldr	r3, [r7, #28]
   24822:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
   24824:	22a0      	movs	r2, #160	; 0xa0
   24826:	05d2      	lsls	r2, r2, #23
   24828:	431a      	orrs	r2, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   2482a:	68fb      	ldr	r3, [r7, #12]
   2482c:	629a      	str	r2, [r3, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   2482e:	697a      	ldr	r2, [r7, #20]
   24830:	69fb      	ldr	r3, [r7, #28]
   24832:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
   24834:	22d0      	movs	r2, #208	; 0xd0
   24836:	0612      	lsls	r2, r2, #24
   24838:	431a      	orrs	r2, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   2483a:	68fb      	ldr	r3, [r7, #12]
   2483c:	629a      	str	r2, [r3, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
   2483e:	687b      	ldr	r3, [r7, #4]
   24840:	78db      	ldrb	r3, [r3, #3]
   24842:	2201      	movs	r2, #1
   24844:	4053      	eors	r3, r2
   24846:	b2db      	uxtb	r3, r3
   24848:	2b00      	cmp	r3, #0
   2484a:	d01a      	beq.n	24882 <_system_pinmux_config+0x102>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
   2484c:	69fa      	ldr	r2, [r7, #28]
   2484e:	2380      	movs	r3, #128	; 0x80
   24850:	02db      	lsls	r3, r3, #11
   24852:	4013      	ands	r3, r2
   24854:	d00a      	beq.n	2486c <_system_pinmux_config+0xec>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
   24856:	687b      	ldr	r3, [r7, #4]
   24858:	789b      	ldrb	r3, [r3, #2]
   2485a:	2b01      	cmp	r3, #1
   2485c:	d103      	bne.n	24866 <_system_pinmux_config+0xe6>
				port->OUTSET.reg = pin_mask;
   2485e:	68fb      	ldr	r3, [r7, #12]
   24860:	68ba      	ldr	r2, [r7, #8]
   24862:	619a      	str	r2, [r3, #24]
   24864:	e002      	b.n	2486c <_system_pinmux_config+0xec>
			} else {
				port->OUTCLR.reg = pin_mask;
   24866:	68fb      	ldr	r3, [r7, #12]
   24868:	68ba      	ldr	r2, [r7, #8]
   2486a:	615a      	str	r2, [r3, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   2486c:	687b      	ldr	r3, [r7, #4]
   2486e:	785b      	ldrb	r3, [r3, #1]
   24870:	2b01      	cmp	r3, #1
   24872:	d003      	beq.n	2487c <_system_pinmux_config+0xfc>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
   24874:	687b      	ldr	r3, [r7, #4]
   24876:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   24878:	2b02      	cmp	r3, #2
   2487a:	d102      	bne.n	24882 <_system_pinmux_config+0x102>
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
   2487c:	68fb      	ldr	r3, [r7, #12]
   2487e:	68ba      	ldr	r2, [r7, #8]
   24880:	609a      	str	r2, [r3, #8]
		}
	}
}
   24882:	46c0      	nop			; (mov r8, r8)
   24884:	46bd      	mov	sp, r7
   24886:	b008      	add	sp, #32
   24888:	bd80      	pop	{r7, pc}
   2488a:	46c0      	nop			; (mov r8, r8)
   2488c:	fffbffff 	.word	0xfffbffff

00024890 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
   24890:	b580      	push	{r7, lr}
   24892:	b084      	sub	sp, #16
   24894:	af00      	add	r7, sp, #0
   24896:	0002      	movs	r2, r0
   24898:	6039      	str	r1, [r7, #0]
   2489a:	1dfb      	adds	r3, r7, #7
   2489c:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
   2489e:	1dfb      	adds	r3, r7, #7
   248a0:	781b      	ldrb	r3, [r3, #0]
   248a2:	0018      	movs	r0, r3
   248a4:	4b0a      	ldr	r3, [pc, #40]	; (248d0 <system_pinmux_pin_set_config+0x40>)
   248a6:	4798      	blx	r3
   248a8:	0003      	movs	r3, r0
   248aa:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
   248ac:	1dfb      	adds	r3, r7, #7
   248ae:	781b      	ldrb	r3, [r3, #0]
   248b0:	221f      	movs	r2, #31
   248b2:	4013      	ands	r3, r2
   248b4:	2201      	movs	r2, #1
   248b6:	409a      	lsls	r2, r3
   248b8:	0013      	movs	r3, r2
   248ba:	60bb      	str	r3, [r7, #8]

	_system_pinmux_config(port, pin_mask, config);
   248bc:	683a      	ldr	r2, [r7, #0]
   248be:	68b9      	ldr	r1, [r7, #8]
   248c0:	68fb      	ldr	r3, [r7, #12]
   248c2:	0018      	movs	r0, r3
   248c4:	4b03      	ldr	r3, [pc, #12]	; (248d4 <system_pinmux_pin_set_config+0x44>)
   248c6:	4798      	blx	r3
}
   248c8:	46c0      	nop			; (mov r8, r8)
   248ca:	46bd      	mov	sp, r7
   248cc:	b004      	add	sp, #16
   248ce:	bd80      	pop	{r7, pc}
   248d0:	00024721 	.word	0x00024721
   248d4:	00024781 	.word	0x00024781

000248d8 <_system_dummy_init>:
 * Dummy initialization function, used as a weak alias target for the various
 * init functions called by \ref system_init().
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
   248d8:	b580      	push	{r7, lr}
   248da:	af00      	add	r7, sp, #0
	return;
   248dc:	46c0      	nop			; (mov r8, r8)
}
   248de:	46bd      	mov	sp, r7
   248e0:	bd80      	pop	{r7, pc}
	...

000248e4 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
   248e4:	b580      	push	{r7, lr}
   248e6:	af00      	add	r7, sp, #0
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
   248e8:	4b06      	ldr	r3, [pc, #24]	; (24904 <system_init+0x20>)
   248ea:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
   248ec:	4b06      	ldr	r3, [pc, #24]	; (24908 <system_init+0x24>)
   248ee:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
   248f0:	4b06      	ldr	r3, [pc, #24]	; (2490c <system_init+0x28>)
   248f2:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
   248f4:	4b06      	ldr	r3, [pc, #24]	; (24910 <system_init+0x2c>)
   248f6:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
   248f8:	4b06      	ldr	r3, [pc, #24]	; (24914 <system_init+0x30>)
   248fa:	4798      	blx	r3
}
   248fc:	46c0      	nop			; (mov r8, r8)
   248fe:	46bd      	mov	sp, r7
   24900:	bd80      	pop	{r7, pc}
   24902:	46c0      	nop			; (mov r8, r8)
   24904:	00023f19 	.word	0x00023f19
   24908:	000237e1 	.word	0x000237e1
   2490c:	000222a9 	.word	0x000222a9
   24910:	0001d9b5 	.word	0x0001d9b5
   24914:	000248d9 	.word	0x000248d9

00024918 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   24918:	b580      	push	{r7, lr}
   2491a:	b082      	sub	sp, #8
   2491c:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
   2491e:	4b2f      	ldr	r3, [pc, #188]	; (249dc <Reset_Handler+0xc4>)
   24920:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
   24922:	4b2f      	ldr	r3, [pc, #188]	; (249e0 <Reset_Handler+0xc8>)
   24924:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
   24926:	687a      	ldr	r2, [r7, #4]
   24928:	683b      	ldr	r3, [r7, #0]
   2492a:	429a      	cmp	r2, r3
   2492c:	d00c      	beq.n	24948 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
   2492e:	e007      	b.n	24940 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
   24930:	683b      	ldr	r3, [r7, #0]
   24932:	1d1a      	adds	r2, r3, #4
   24934:	603a      	str	r2, [r7, #0]
   24936:	687a      	ldr	r2, [r7, #4]
   24938:	1d11      	adds	r1, r2, #4
   2493a:	6079      	str	r1, [r7, #4]
   2493c:	6812      	ldr	r2, [r2, #0]
   2493e:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
   24940:	683a      	ldr	r2, [r7, #0]
   24942:	4b28      	ldr	r3, [pc, #160]	; (249e4 <Reset_Handler+0xcc>)
   24944:	429a      	cmp	r2, r3
   24946:	d3f3      	bcc.n	24930 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
   24948:	4b27      	ldr	r3, [pc, #156]	; (249e8 <Reset_Handler+0xd0>)
   2494a:	603b      	str	r3, [r7, #0]
   2494c:	e004      	b.n	24958 <Reset_Handler+0x40>
                *pDest++ = 0;
   2494e:	683b      	ldr	r3, [r7, #0]
   24950:	1d1a      	adds	r2, r3, #4
   24952:	603a      	str	r2, [r7, #0]
   24954:	2200      	movs	r2, #0
   24956:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
   24958:	683a      	ldr	r2, [r7, #0]
   2495a:	4b24      	ldr	r3, [pc, #144]	; (249ec <Reset_Handler+0xd4>)
   2495c:	429a      	cmp	r2, r3
   2495e:	d3f6      	bcc.n	2494e <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
   24960:	4b23      	ldr	r3, [pc, #140]	; (249f0 <Reset_Handler+0xd8>)
   24962:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   24964:	4b23      	ldr	r3, [pc, #140]	; (249f4 <Reset_Handler+0xdc>)
   24966:	687a      	ldr	r2, [r7, #4]
   24968:	21ff      	movs	r1, #255	; 0xff
   2496a:	438a      	bics	r2, r1
   2496c:	609a      	str	r2, [r3, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
   2496e:	4a22      	ldr	r2, [pc, #136]	; (249f8 <Reset_Handler+0xe0>)
   24970:	2390      	movs	r3, #144	; 0x90
   24972:	005b      	lsls	r3, r3, #1
   24974:	2102      	movs	r1, #2
   24976:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
   24978:	4a20      	ldr	r2, [pc, #128]	; (249fc <Reset_Handler+0xe4>)
   2497a:	78d3      	ldrb	r3, [r2, #3]
   2497c:	2103      	movs	r1, #3
   2497e:	438b      	bics	r3, r1
   24980:	1c19      	adds	r1, r3, #0
   24982:	2302      	movs	r3, #2
   24984:	430b      	orrs	r3, r1
   24986:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
   24988:	4a1c      	ldr	r2, [pc, #112]	; (249fc <Reset_Handler+0xe4>)
   2498a:	78d3      	ldrb	r3, [r2, #3]
   2498c:	210c      	movs	r1, #12
   2498e:	438b      	bics	r3, r1
   24990:	1c19      	adds	r1, r3, #0
   24992:	2308      	movs	r3, #8
   24994:	430b      	orrs	r3, r1
   24996:	70d3      	strb	r3, [r2, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
   24998:	4a19      	ldr	r2, [pc, #100]	; (24a00 <Reset_Handler+0xe8>)
   2499a:	7b93      	ldrb	r3, [r2, #14]
   2499c:	2130      	movs	r1, #48	; 0x30
   2499e:	438b      	bics	r3, r1
   249a0:	1c19      	adds	r1, r3, #0
   249a2:	2320      	movs	r3, #32
   249a4:	430b      	orrs	r3, r1
   249a6:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
   249a8:	4a15      	ldr	r2, [pc, #84]	; (24a00 <Reset_Handler+0xe8>)
   249aa:	7b93      	ldrb	r3, [r2, #14]
   249ac:	210c      	movs	r1, #12
   249ae:	438b      	bics	r3, r1
   249b0:	1c19      	adds	r1, r3, #0
   249b2:	2308      	movs	r3, #8
   249b4:	430b      	orrs	r3, r1
   249b6:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
   249b8:	4a11      	ldr	r2, [pc, #68]	; (24a00 <Reset_Handler+0xe8>)
   249ba:	7b93      	ldrb	r3, [r2, #14]
   249bc:	2103      	movs	r1, #3
   249be:	438b      	bics	r3, r1
   249c0:	1c19      	adds	r1, r3, #0
   249c2:	2302      	movs	r3, #2
   249c4:	430b      	orrs	r3, r1
   249c6:	7393      	strb	r3, [r2, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
   249c8:	4a0e      	ldr	r2, [pc, #56]	; (24a04 <Reset_Handler+0xec>)
   249ca:	6853      	ldr	r3, [r2, #4]
   249cc:	2180      	movs	r1, #128	; 0x80
   249ce:	430b      	orrs	r3, r1
   249d0:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
   249d2:	4b0d      	ldr	r3, [pc, #52]	; (24a08 <Reset_Handler+0xf0>)
   249d4:	4798      	blx	r3

        /* Branch to main function */
        main();
   249d6:	4b0d      	ldr	r3, [pc, #52]	; (24a0c <Reset_Handler+0xf4>)
   249d8:	4798      	blx	r3

        /* Infinite loop */
        while (1);
   249da:	e7fe      	b.n	249da <Reset_Handler+0xc2>
   249dc:	0002aae4 	.word	0x0002aae4
   249e0:	20000000 	.word	0x20000000
   249e4:	200001fc 	.word	0x200001fc
   249e8:	20000200 	.word	0x20000200
   249ec:	2000096c 	.word	0x2000096c
   249f0:	00010000 	.word	0x00010000
   249f4:	e000ed00 	.word	0xe000ed00
   249f8:	41007000 	.word	0x41007000
   249fc:	41005000 	.word	0x41005000
   24a00:	41004800 	.word	0x41004800
   24a04:	41004000 	.word	0x41004000
   24a08:	0002890d 	.word	0x0002890d
   24a0c:	00024c41 	.word	0x00024c41

00024a10 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   24a10:	b580      	push	{r7, lr}
   24a12:	af00      	add	r7, sp, #0
        while (1) {
   24a14:	e7fe      	b.n	24a14 <Dummy_Handler+0x4>
	...

00024a18 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
   24a18:	b580      	push	{r7, lr}
   24a1a:	b084      	sub	sp, #16
   24a1c:	af00      	add	r7, sp, #0
   24a1e:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
   24a20:	4b0a      	ldr	r3, [pc, #40]	; (24a4c <_sbrk+0x34>)
   24a22:	681b      	ldr	r3, [r3, #0]
   24a24:	2b00      	cmp	r3, #0
   24a26:	d102      	bne.n	24a2e <_sbrk+0x16>
		heap = (unsigned char *)&_end;
   24a28:	4b08      	ldr	r3, [pc, #32]	; (24a4c <_sbrk+0x34>)
   24a2a:	4a09      	ldr	r2, [pc, #36]	; (24a50 <_sbrk+0x38>)
   24a2c:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
   24a2e:	4b07      	ldr	r3, [pc, #28]	; (24a4c <_sbrk+0x34>)
   24a30:	681b      	ldr	r3, [r3, #0]
   24a32:	60fb      	str	r3, [r7, #12]

	heap += incr;
   24a34:	4b05      	ldr	r3, [pc, #20]	; (24a4c <_sbrk+0x34>)
   24a36:	681a      	ldr	r2, [r3, #0]
   24a38:	687b      	ldr	r3, [r7, #4]
   24a3a:	18d2      	adds	r2, r2, r3
   24a3c:	4b03      	ldr	r3, [pc, #12]	; (24a4c <_sbrk+0x34>)
   24a3e:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap;
   24a40:	68fb      	ldr	r3, [r7, #12]
}
   24a42:	0018      	movs	r0, r3
   24a44:	46bd      	mov	sp, r7
   24a46:	b004      	add	sp, #16
   24a48:	bd80      	pop	{r7, pc}
   24a4a:	46c0      	nop			; (mov r8, r8)
   24a4c:	20000518 	.word	0x20000518
   24a50:	20002970 	.word	0x20002970

00024a54 <system_apb_clock_clear_mask>:
{
   24a54:	b580      	push	{r7, lr}
   24a56:	b082      	sub	sp, #8
   24a58:	af00      	add	r7, sp, #0
   24a5a:	0002      	movs	r2, r0
   24a5c:	6039      	str	r1, [r7, #0]
   24a5e:	1dfb      	adds	r3, r7, #7
   24a60:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   24a62:	1dfb      	adds	r3, r7, #7
   24a64:	781b      	ldrb	r3, [r3, #0]
   24a66:	2b01      	cmp	r3, #1
   24a68:	d00b      	beq.n	24a82 <system_apb_clock_clear_mask+0x2e>
   24a6a:	2b02      	cmp	r3, #2
   24a6c:	d011      	beq.n	24a92 <system_apb_clock_clear_mask+0x3e>
   24a6e:	2b00      	cmp	r3, #0
   24a70:	d117      	bne.n	24aa2 <system_apb_clock_clear_mask+0x4e>
			PM->APBAMASK.reg &= ~mask;
   24a72:	4b0f      	ldr	r3, [pc, #60]	; (24ab0 <system_apb_clock_clear_mask+0x5c>)
   24a74:	4a0e      	ldr	r2, [pc, #56]	; (24ab0 <system_apb_clock_clear_mask+0x5c>)
   24a76:	6992      	ldr	r2, [r2, #24]
   24a78:	6839      	ldr	r1, [r7, #0]
   24a7a:	43c9      	mvns	r1, r1
   24a7c:	400a      	ands	r2, r1
   24a7e:	619a      	str	r2, [r3, #24]
			break;
   24a80:	e011      	b.n	24aa6 <system_apb_clock_clear_mask+0x52>
			PM->APBBMASK.reg &= ~mask;
   24a82:	4b0b      	ldr	r3, [pc, #44]	; (24ab0 <system_apb_clock_clear_mask+0x5c>)
   24a84:	4a0a      	ldr	r2, [pc, #40]	; (24ab0 <system_apb_clock_clear_mask+0x5c>)
   24a86:	69d2      	ldr	r2, [r2, #28]
   24a88:	6839      	ldr	r1, [r7, #0]
   24a8a:	43c9      	mvns	r1, r1
   24a8c:	400a      	ands	r2, r1
   24a8e:	61da      	str	r2, [r3, #28]
			break;
   24a90:	e009      	b.n	24aa6 <system_apb_clock_clear_mask+0x52>
			PM->APBCMASK.reg &= ~mask;
   24a92:	4b07      	ldr	r3, [pc, #28]	; (24ab0 <system_apb_clock_clear_mask+0x5c>)
   24a94:	4a06      	ldr	r2, [pc, #24]	; (24ab0 <system_apb_clock_clear_mask+0x5c>)
   24a96:	6a12      	ldr	r2, [r2, #32]
   24a98:	6839      	ldr	r1, [r7, #0]
   24a9a:	43c9      	mvns	r1, r1
   24a9c:	400a      	ands	r2, r1
   24a9e:	621a      	str	r2, [r3, #32]
			break;
   24aa0:	e001      	b.n	24aa6 <system_apb_clock_clear_mask+0x52>
			return STATUS_ERR_INVALID_ARG;
   24aa2:	2317      	movs	r3, #23
   24aa4:	e000      	b.n	24aa8 <system_apb_clock_clear_mask+0x54>
	return STATUS_OK;
   24aa6:	2300      	movs	r3, #0
}
   24aa8:	0018      	movs	r0, r3
   24aaa:	46bd      	mov	sp, r7
   24aac:	b002      	add	sp, #8
   24aae:	bd80      	pop	{r7, pc}
   24ab0:	40000400 	.word	0x40000400

00024ab4 <system_interrupt_enable_global>:
{
   24ab4:	b580      	push	{r7, lr}
   24ab6:	af00      	add	r7, sp, #0
	cpu_irq_enable();
   24ab8:	4b04      	ldr	r3, [pc, #16]	; (24acc <system_interrupt_enable_global+0x18>)
   24aba:	2201      	movs	r2, #1
   24abc:	701a      	strb	r2, [r3, #0]
   24abe:	f3bf 8f5f 	dmb	sy
   24ac2:	b662      	cpsie	i
}
   24ac4:	46c0      	nop			; (mov r8, r8)
   24ac6:	46bd      	mov	sp, r7
   24ac8:	bd80      	pop	{r7, pc}
   24aca:	46c0      	nop			; (mov r8, r8)
   24acc:	20000028 	.word	0x20000028

00024ad0 <system_pinmux_get_group_from_gpio_pin>:
{
   24ad0:	b580      	push	{r7, lr}
   24ad2:	b084      	sub	sp, #16
   24ad4:	af00      	add	r7, sp, #0
   24ad6:	0002      	movs	r2, r0
   24ad8:	1dfb      	adds	r3, r7, #7
   24ada:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   24adc:	230f      	movs	r3, #15
   24ade:	18fb      	adds	r3, r7, r3
   24ae0:	1dfa      	adds	r2, r7, #7
   24ae2:	7812      	ldrb	r2, [r2, #0]
   24ae4:	09d2      	lsrs	r2, r2, #7
   24ae6:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   24ae8:	230e      	movs	r3, #14
   24aea:	18fb      	adds	r3, r7, r3
   24aec:	1dfa      	adds	r2, r7, #7
   24aee:	7812      	ldrb	r2, [r2, #0]
   24af0:	0952      	lsrs	r2, r2, #5
   24af2:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   24af4:	4b0d      	ldr	r3, [pc, #52]	; (24b2c <system_pinmux_get_group_from_gpio_pin+0x5c>)
   24af6:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   24af8:	230f      	movs	r3, #15
   24afa:	18fb      	adds	r3, r7, r3
   24afc:	781b      	ldrb	r3, [r3, #0]
   24afe:	2b00      	cmp	r3, #0
   24b00:	d10f      	bne.n	24b22 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   24b02:	230f      	movs	r3, #15
   24b04:	18fb      	adds	r3, r7, r3
   24b06:	781b      	ldrb	r3, [r3, #0]
   24b08:	009b      	lsls	r3, r3, #2
   24b0a:	2210      	movs	r2, #16
   24b0c:	4694      	mov	ip, r2
   24b0e:	44bc      	add	ip, r7
   24b10:	4463      	add	r3, ip
   24b12:	3b08      	subs	r3, #8
   24b14:	681a      	ldr	r2, [r3, #0]
   24b16:	230e      	movs	r3, #14
   24b18:	18fb      	adds	r3, r7, r3
   24b1a:	781b      	ldrb	r3, [r3, #0]
   24b1c:	01db      	lsls	r3, r3, #7
   24b1e:	18d3      	adds	r3, r2, r3
   24b20:	e000      	b.n	24b24 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   24b22:	2300      	movs	r3, #0
}
   24b24:	0018      	movs	r0, r3
   24b26:	46bd      	mov	sp, r7
   24b28:	b004      	add	sp, #16
   24b2a:	bd80      	pop	{r7, pc}
   24b2c:	41004400 	.word	0x41004400

00024b30 <system_set_sleepmode>:
 * \retval STATUS_ERR_INVALID_ARG  The requested sleep mode was invalid or not
 *                                 available
 */
static inline enum status_code system_set_sleepmode(
	const enum system_sleepmode sleep_mode)
{
   24b30:	b580      	push	{r7, lr}
   24b32:	b084      	sub	sp, #16
   24b34:	af00      	add	r7, sp, #0
   24b36:	0002      	movs	r2, r0
   24b38:	1dfb      	adds	r3, r7, #7
   24b3a:	701a      	strb	r2, [r3, #0]

#if (SAMD20 || SAMD21 || SAMR21)

	/* Get MCU revision */
	uint32_t rev = DSU->DID.reg;
   24b3c:	4b1a      	ldr	r3, [pc, #104]	; (24ba8 <system_set_sleepmode+0x78>)
   24b3e:	699b      	ldr	r3, [r3, #24]
   24b40:	60fb      	str	r3, [r7, #12]

	rev &= DSU_DID_REVISION_Msk;
   24b42:	68fa      	ldr	r2, [r7, #12]
   24b44:	23f0      	movs	r3, #240	; 0xf0
   24b46:	011b      	lsls	r3, r3, #4
   24b48:	4013      	ands	r3, r2
   24b4a:	60fb      	str	r3, [r7, #12]
	rev = rev >> DSU_DID_REVISION_Pos;
   24b4c:	68fb      	ldr	r3, [r7, #12]
   24b4e:	0a1b      	lsrs	r3, r3, #8
   24b50:	60fb      	str	r3, [r7, #12]
		NVMCTRL->CTRLB.bit.SLEEPPRM = NVMCTRL_CTRLB_SLEEPPRM_DISABLED_Val;
	}
#endif

#if (SAMD21 || SAMR21)
	if (rev < _SYSTEM_MCU_REVISION_D) {
   24b52:	68fb      	ldr	r3, [r7, #12]
   24b54:	2b02      	cmp	r3, #2
   24b56:	d805      	bhi.n	24b64 <system_set_sleepmode+0x34>
		/* Errata 13140: Make sure that the Flash does not power all the way down
		 * when in sleep mode. */
		NVMCTRL->CTRLB.bit.SLEEPPRM = NVMCTRL_CTRLB_SLEEPPRM_DISABLED_Val;
   24b58:	4a14      	ldr	r2, [pc, #80]	; (24bac <system_set_sleepmode+0x7c>)
   24b5a:	6853      	ldr	r3, [r2, #4]
   24b5c:	21c0      	movs	r1, #192	; 0xc0
   24b5e:	0089      	lsls	r1, r1, #2
   24b60:	430b      	orrs	r3, r1
   24b62:	6053      	str	r3, [r2, #4]
	}
#endif

#endif

	switch (sleep_mode) {
   24b64:	1dfb      	adds	r3, r7, #7
   24b66:	781b      	ldrb	r3, [r3, #0]
   24b68:	2b00      	cmp	r3, #0
   24b6a:	db16      	blt.n	24b9a <system_set_sleepmode+0x6a>
   24b6c:	2b02      	cmp	r3, #2
   24b6e:	dd02      	ble.n	24b76 <system_set_sleepmode+0x46>
   24b70:	2b03      	cmp	r3, #3
   24b72:	d00b      	beq.n	24b8c <system_set_sleepmode+0x5c>
   24b74:	e011      	b.n	24b9a <system_set_sleepmode+0x6a>
		case SYSTEM_SLEEPMODE_IDLE_0:
		case SYSTEM_SLEEPMODE_IDLE_1:
		case SYSTEM_SLEEPMODE_IDLE_2:
			SCB->SCR &= ~SCB_SCR_SLEEPDEEP_Msk;
   24b76:	4b0e      	ldr	r3, [pc, #56]	; (24bb0 <system_set_sleepmode+0x80>)
   24b78:	4a0d      	ldr	r2, [pc, #52]	; (24bb0 <system_set_sleepmode+0x80>)
   24b7a:	6912      	ldr	r2, [r2, #16]
   24b7c:	2104      	movs	r1, #4
   24b7e:	438a      	bics	r2, r1
   24b80:	611a      	str	r2, [r3, #16]
			PM->SLEEP.reg = sleep_mode;
   24b82:	4a0c      	ldr	r2, [pc, #48]	; (24bb4 <system_set_sleepmode+0x84>)
   24b84:	1dfb      	adds	r3, r7, #7
   24b86:	781b      	ldrb	r3, [r3, #0]
   24b88:	7053      	strb	r3, [r2, #1]
			break;
   24b8a:	e008      	b.n	24b9e <system_set_sleepmode+0x6e>

		case SYSTEM_SLEEPMODE_STANDBY:
			SCB->SCR |=  SCB_SCR_SLEEPDEEP_Msk;
   24b8c:	4b08      	ldr	r3, [pc, #32]	; (24bb0 <system_set_sleepmode+0x80>)
   24b8e:	4a08      	ldr	r2, [pc, #32]	; (24bb0 <system_set_sleepmode+0x80>)
   24b90:	6912      	ldr	r2, [r2, #16]
   24b92:	2104      	movs	r1, #4
   24b94:	430a      	orrs	r2, r1
   24b96:	611a      	str	r2, [r3, #16]
			break;
   24b98:	e001      	b.n	24b9e <system_set_sleepmode+0x6e>

		default:
			return STATUS_ERR_INVALID_ARG;
   24b9a:	2317      	movs	r3, #23
   24b9c:	e000      	b.n	24ba0 <system_set_sleepmode+0x70>
	}

	return STATUS_OK;
   24b9e:	2300      	movs	r3, #0
}
   24ba0:	0018      	movs	r0, r3
   24ba2:	46bd      	mov	sp, r7
   24ba4:	b004      	add	sp, #16
   24ba6:	bd80      	pop	{r7, pc}
   24ba8:	41002000 	.word	0x41002000
   24bac:	41004000 	.word	0x41004000
   24bb0:	e000ed00 	.word	0xe000ed00
   24bb4:	40000400 	.word	0x40000400

00024bb8 <system_sleep>:
 * all ongoing memory accesses have completed, then a WFI (Wait For Interrupt)
 * instruction to place the device into the sleep mode specified by
 * \ref system_set_sleepmode until woken by an interrupt.
 */
static inline void system_sleep(void)
{
   24bb8:	b580      	push	{r7, lr}
   24bba:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb");
   24bbc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("wfi");
   24bc0:	bf30      	wfi
	__DSB();
	__WFI();
}
   24bc2:	46c0      	nop			; (mov r8, r8)
   24bc4:	46bd      	mov	sp, r7
   24bc6:	bd80      	pop	{r7, pc}

00024bc8 <port_get_group_from_gpio_pin>:
{
   24bc8:	b580      	push	{r7, lr}
   24bca:	b082      	sub	sp, #8
   24bcc:	af00      	add	r7, sp, #0
   24bce:	0002      	movs	r2, r0
   24bd0:	1dfb      	adds	r3, r7, #7
   24bd2:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   24bd4:	1dfb      	adds	r3, r7, #7
   24bd6:	781b      	ldrb	r3, [r3, #0]
   24bd8:	0018      	movs	r0, r3
   24bda:	4b03      	ldr	r3, [pc, #12]	; (24be8 <port_get_group_from_gpio_pin+0x20>)
   24bdc:	4798      	blx	r3
   24bde:	0003      	movs	r3, r0
}
   24be0:	0018      	movs	r0, r3
   24be2:	46bd      	mov	sp, r7
   24be4:	b002      	add	sp, #8
   24be6:	bd80      	pop	{r7, pc}
   24be8:	00024ad1 	.word	0x00024ad1

00024bec <port_pin_set_output_level>:
{
   24bec:	b580      	push	{r7, lr}
   24bee:	b084      	sub	sp, #16
   24bf0:	af00      	add	r7, sp, #0
   24bf2:	0002      	movs	r2, r0
   24bf4:	1dfb      	adds	r3, r7, #7
   24bf6:	701a      	strb	r2, [r3, #0]
   24bf8:	1dbb      	adds	r3, r7, #6
   24bfa:	1c0a      	adds	r2, r1, #0
   24bfc:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   24bfe:	1dfb      	adds	r3, r7, #7
   24c00:	781b      	ldrb	r3, [r3, #0]
   24c02:	0018      	movs	r0, r3
   24c04:	4b0d      	ldr	r3, [pc, #52]	; (24c3c <port_pin_set_output_level+0x50>)
   24c06:	4798      	blx	r3
   24c08:	0003      	movs	r3, r0
   24c0a:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   24c0c:	1dfb      	adds	r3, r7, #7
   24c0e:	781b      	ldrb	r3, [r3, #0]
   24c10:	221f      	movs	r2, #31
   24c12:	4013      	ands	r3, r2
   24c14:	2201      	movs	r2, #1
   24c16:	409a      	lsls	r2, r3
   24c18:	0013      	movs	r3, r2
   24c1a:	60bb      	str	r3, [r7, #8]
	if (level) {
   24c1c:	1dbb      	adds	r3, r7, #6
   24c1e:	781b      	ldrb	r3, [r3, #0]
   24c20:	2b00      	cmp	r3, #0
   24c22:	d003      	beq.n	24c2c <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   24c24:	68fb      	ldr	r3, [r7, #12]
   24c26:	68ba      	ldr	r2, [r7, #8]
   24c28:	619a      	str	r2, [r3, #24]
}
   24c2a:	e002      	b.n	24c32 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   24c2c:	68fb      	ldr	r3, [r7, #12]
   24c2e:	68ba      	ldr	r2, [r7, #8]
   24c30:	615a      	str	r2, [r3, #20]
}
   24c32:	46c0      	nop			; (mov r8, r8)
   24c34:	46bd      	mov	sp, r7
   24c36:	b004      	add	sp, #16
   24c38:	bd80      	pop	{r7, pc}
   24c3a:	46c0      	nop			; (mov r8, r8)
   24c3c:	00024bc9 	.word	0x00024bc9

00024c40 <main>:

bool initSleepSeqeunce=false;
uint32_t tempSleepWait=0;

int main (void)
{
   24c40:	b590      	push	{r4, r7, lr}
   24c42:	b083      	sub	sp, #12
   24c44:	af02      	add	r7, sp, #8
	system_init();
   24c46:	4b18      	ldr	r3, [pc, #96]	; (24ca8 <main+0x68>)
   24c48:	4798      	blx	r3
	
	/* Disable digital interfaces to unused peripherals */
	system_apb_clock_clear_mask(SYSTEM_CLOCK_APB_APBA,
   24c4a:	2111      	movs	r1, #17
   24c4c:	2000      	movs	r0, #0
   24c4e:	4b17      	ldr	r3, [pc, #92]	; (24cac <main+0x6c>)
   24c50:	4798      	blx	r3
	PM_APBAMASK_PAC0 | PM_APBAMASK_WDT);
	system_apb_clock_clear_mask(SYSTEM_CLOCK_APB_APBB,
   24c52:	2103      	movs	r1, #3
   24c54:	2001      	movs	r0, #1
   24c56:	4b15      	ldr	r3, [pc, #84]	; (24cac <main+0x6c>)
   24c58:	4798      	blx	r3
	PM_APBBMASK_PAC1 | PM_APBBMASK_DSU);
	system_apb_clock_clear_mask(SYSTEM_CLOCK_APB_APBC,
   24c5a:	4b15      	ldr	r3, [pc, #84]	; (24cb0 <main+0x70>)
   24c5c:	0019      	movs	r1, r3
   24c5e:	2002      	movs	r0, #2
   24c60:	4b12      	ldr	r3, [pc, #72]	; (24cac <main+0x6c>)
   24c62:	4798      	blx	r3
	PM_APBCMASK_PAC2 | PM_APBCMASK_AC | PM_APBCMASK_DAC);
	
	/* Disable NVM low power mode during sleep due to lockups (device errata) */
	NVMCTRL->CTRLB.bit.SLEEPPRM = NVMCTRL_CTRLB_SLEEPPRM_DISABLED_Val;
   24c64:	4a13      	ldr	r2, [pc, #76]	; (24cb4 <main+0x74>)
   24c66:	6853      	ldr	r3, [r2, #4]
   24c68:	21c0      	movs	r1, #192	; 0xc0
   24c6a:	0089      	lsls	r1, r1, #2
   24c6c:	430b      	orrs	r3, r1
   24c6e:	6053      	str	r3, [r2, #4]
	
	system_set_sleepmode(SYSTEM_SLEEPMODE_STANDBY);
   24c70:	2003      	movs	r0, #3
   24c72:	4b11      	ldr	r3, [pc, #68]	; (24cb8 <main+0x78>)
   24c74:	4798      	blx	r3
	
	system_interrupt_enable_global();
   24c76:	4b11      	ldr	r3, [pc, #68]	; (24cbc <main+0x7c>)
   24c78:	4798      	blx	r3
	
	//irq_initialize_vectors();
	//cpu_irq_enable();
	delay_init();
   24c7a:	4b11      	ldr	r3, [pc, #68]	; (24cc0 <main+0x80>)
   24c7c:	4798      	blx	r3
	init_eeprom();
   24c7e:	4b11      	ldr	r3, [pc, #68]	; (24cc4 <main+0x84>)
   24c80:	4798      	blx	r3
	
	
	
	start_lcd_service();
   24c82:	4b11      	ldr	r3, [pc, #68]	; (24cc8 <main+0x88>)
   24c84:	4798      	blx	r3
	start_gsm_service();
   24c86:	4b11      	ldr	r3, [pc, #68]	; (24ccc <main+0x8c>)
   24c88:	4798      	blx	r3
	start_motor_service();
   24c8a:	4b11      	ldr	r3, [pc, #68]	; (24cd0 <main+0x90>)
   24c8c:	4798      	blx	r3
	
	xTaskCreate(vTask_sleep_manager,NULL,(uint16_t)100,NULL,1,NULL);
   24c8e:	4811      	ldr	r0, [pc, #68]	; (24cd4 <main+0x94>)
   24c90:	2300      	movs	r3, #0
   24c92:	9301      	str	r3, [sp, #4]
   24c94:	2301      	movs	r3, #1
   24c96:	9300      	str	r3, [sp, #0]
   24c98:	2300      	movs	r3, #0
   24c9a:	2264      	movs	r2, #100	; 0x64
   24c9c:	2100      	movs	r1, #0
   24c9e:	4c0e      	ldr	r4, [pc, #56]	; (24cd8 <main+0x98>)
   24ca0:	47a0      	blx	r4
	
	vTaskStartScheduler();
   24ca2:	4b0e      	ldr	r3, [pc, #56]	; (24cdc <main+0x9c>)
   24ca4:	4798      	blx	r3
	
	for (;;)
   24ca6:	e7fe      	b.n	24ca6 <main+0x66>
   24ca8:	000248e5 	.word	0x000248e5
   24cac:	00024a55 	.word	0x00024a55
   24cb0:	00060001 	.word	0x00060001
   24cb4:	41004000 	.word	0x41004000
   24cb8:	00024b31 	.word	0x00024b31
   24cbc:	00024ab5 	.word	0x00024ab5
   24cc0:	0002250d 	.word	0x0002250d
   24cc4:	00010151 	.word	0x00010151
   24cc8:	000184c1 	.word	0x000184c1
   24ccc:	00017bdd 	.word	0x00017bdd
   24cd0:	0001be5d 	.word	0x0001be5d
   24cd4:	00024d29 	.word	0x00024d29
   24cd8:	0001f799 	.word	0x0001f799
   24cdc:	0001fc6d 	.word	0x0001fc6d

00024ce0 <checkSleepElligible>:
	}
}


bool checkSleepElligible(void)
{
   24ce0:	b580      	push	{r7, lr}
   24ce2:	af00      	add	r7, sp, #0
	return (/*!turnOffTimerOn && */!getACPowerState() && motor_checkSleepElligible() && gsm_checkSleepElligible());
   24ce4:	4b0d      	ldr	r3, [pc, #52]	; (24d1c <checkSleepElligible+0x3c>)
   24ce6:	4798      	blx	r3
   24ce8:	0003      	movs	r3, r0
   24cea:	001a      	movs	r2, r3
   24cec:	2301      	movs	r3, #1
   24cee:	4053      	eors	r3, r2
   24cf0:	b2db      	uxtb	r3, r3
   24cf2:	2b00      	cmp	r3, #0
   24cf4:	d009      	beq.n	24d0a <checkSleepElligible+0x2a>
   24cf6:	4b0a      	ldr	r3, [pc, #40]	; (24d20 <checkSleepElligible+0x40>)
   24cf8:	4798      	blx	r3
   24cfa:	1e03      	subs	r3, r0, #0
   24cfc:	d005      	beq.n	24d0a <checkSleepElligible+0x2a>
   24cfe:	4b09      	ldr	r3, [pc, #36]	; (24d24 <checkSleepElligible+0x44>)
   24d00:	4798      	blx	r3
   24d02:	1e03      	subs	r3, r0, #0
   24d04:	d001      	beq.n	24d0a <checkSleepElligible+0x2a>
   24d06:	2301      	movs	r3, #1
   24d08:	e000      	b.n	24d0c <checkSleepElligible+0x2c>
   24d0a:	2300      	movs	r3, #0
   24d0c:	1c1a      	adds	r2, r3, #0
   24d0e:	2301      	movs	r3, #1
   24d10:	4013      	ands	r3, r2
   24d12:	b2db      	uxtb	r3, r3
}
   24d14:	0018      	movs	r0, r3
   24d16:	46bd      	mov	sp, r7
   24d18:	bd80      	pop	{r7, pc}
   24d1a:	46c0      	nop			; (mov r8, r8)
   24d1c:	0001a6f9 	.word	0x0001a6f9
   24d20:	0001c181 	.word	0x0001c181
   24d24:	00017ca5 	.word	0x00017ca5

00024d28 <vTask_sleep_manager>:

static void vTask_sleep_manager(void *params)
{
   24d28:	b580      	push	{r7, lr}
   24d2a:	b084      	sub	sp, #16
   24d2c:	af00      	add	r7, sp, #0
   24d2e:	6078      	str	r0, [r7, #4]
	UNUSED(params);
	for (;;)
	{
		if (checkSleepElligible())
   24d30:	4b34      	ldr	r3, [pc, #208]	; (24e04 <vTask_sleep_manager+0xdc>)
   24d32:	4798      	blx	r3
   24d34:	1e03      	subs	r3, r0, #0
   24d36:	d060      	beq.n	24dfa <vTask_sleep_manager+0xd2>
		{
			if(!initSleepSeqeunce)
   24d38:	4b33      	ldr	r3, [pc, #204]	; (24e08 <vTask_sleep_manager+0xe0>)
   24d3a:	781b      	ldrb	r3, [r3, #0]
   24d3c:	2201      	movs	r2, #1
   24d3e:	4053      	eors	r3, r2
   24d40:	b2db      	uxtb	r3, r3
   24d42:	2b00      	cmp	r3, #0
   24d44:	d008      	beq.n	24d58 <vTask_sleep_manager+0x30>
			{
				tempSleepWait=xTaskGetTickCount();
   24d46:	4b31      	ldr	r3, [pc, #196]	; (24e0c <vTask_sleep_manager+0xe4>)
   24d48:	4798      	blx	r3
   24d4a:	0002      	movs	r2, r0
   24d4c:	4b30      	ldr	r3, [pc, #192]	; (24e10 <vTask_sleep_manager+0xe8>)
   24d4e:	601a      	str	r2, [r3, #0]
				initSleepSeqeunce=true;
   24d50:	4b2d      	ldr	r3, [pc, #180]	; (24e08 <vTask_sleep_manager+0xe0>)
   24d52:	2201      	movs	r2, #1
   24d54:	701a      	strb	r2, [r3, #0]
   24d56:	e7eb      	b.n	24d30 <vTask_sleep_manager+0x8>
			}
			else if(initSleepSeqeunce && xTaskGetTickCount()-tempSleepWait>sleepWaitTime)
   24d58:	4b2b      	ldr	r3, [pc, #172]	; (24e08 <vTask_sleep_manager+0xe0>)
   24d5a:	781b      	ldrb	r3, [r3, #0]
   24d5c:	2b00      	cmp	r3, #0
   24d5e:	d0e7      	beq.n	24d30 <vTask_sleep_manager+0x8>
   24d60:	4b2a      	ldr	r3, [pc, #168]	; (24e0c <vTask_sleep_manager+0xe4>)
   24d62:	4798      	blx	r3
   24d64:	0002      	movs	r2, r0
   24d66:	4b2a      	ldr	r3, [pc, #168]	; (24e10 <vTask_sleep_manager+0xe8>)
   24d68:	681b      	ldr	r3, [r3, #0]
   24d6a:	1ad3      	subs	r3, r2, r3
   24d6c:	4a29      	ldr	r2, [pc, #164]	; (24e14 <vTask_sleep_manager+0xec>)
   24d6e:	4293      	cmp	r3, r2
   24d70:	d9de      	bls.n	24d30 <vTask_sleep_manager+0x8>
			{
				uint8_t cnt=10;
   24d72:	230f      	movs	r3, #15
   24d74:	18fb      	adds	r3, r7, r3
   24d76:	220a      	movs	r2, #10
   24d78:	701a      	strb	r2, [r3, #0]
				bool led=false;
   24d7a:	230e      	movs	r3, #14
   24d7c:	18fb      	adds	r3, r7, r3
   24d7e:	2200      	movs	r2, #0
   24d80:	701a      	strb	r2, [r3, #0]
				do
				{
					led=!led;
   24d82:	230e      	movs	r3, #14
   24d84:	18fb      	adds	r3, r7, r3
   24d86:	781b      	ldrb	r3, [r3, #0]
   24d88:	1e5a      	subs	r2, r3, #1
   24d8a:	4193      	sbcs	r3, r2
   24d8c:	b2db      	uxtb	r3, r3
   24d8e:	2201      	movs	r2, #1
   24d90:	4053      	eors	r3, r2
   24d92:	b2db      	uxtb	r3, r3
   24d94:	001a      	movs	r2, r3
   24d96:	230e      	movs	r3, #14
   24d98:	18fb      	adds	r3, r7, r3
   24d9a:	701a      	strb	r2, [r3, #0]
   24d9c:	781a      	ldrb	r2, [r3, #0]
   24d9e:	2101      	movs	r1, #1
   24da0:	400a      	ands	r2, r1
   24da2:	701a      	strb	r2, [r3, #0]
					if(led)
   24da4:	230e      	movs	r3, #14
   24da6:	18fb      	adds	r3, r7, r3
   24da8:	781b      	ldrb	r3, [r3, #0]
   24daa:	2b00      	cmp	r3, #0
   24dac:	d004      	beq.n	24db8 <vTask_sleep_manager+0x90>
					THREEPHASE_OK_LED_ON;
   24dae:	2100      	movs	r1, #0
   24db0:	2027      	movs	r0, #39	; 0x27
   24db2:	4b19      	ldr	r3, [pc, #100]	; (24e18 <vTask_sleep_manager+0xf0>)
   24db4:	4798      	blx	r3
   24db6:	e003      	b.n	24dc0 <vTask_sleep_manager+0x98>
					else
					THREEPHASE_OK_LED_OFF;
   24db8:	2101      	movs	r1, #1
   24dba:	2027      	movs	r0, #39	; 0x27
   24dbc:	4b16      	ldr	r3, [pc, #88]	; (24e18 <vTask_sleep_manager+0xf0>)
   24dbe:	4798      	blx	r3

					tempSleepWait=xTaskGetTickCount();
   24dc0:	4b12      	ldr	r3, [pc, #72]	; (24e0c <vTask_sleep_manager+0xe4>)
   24dc2:	4798      	blx	r3
   24dc4:	0002      	movs	r2, r0
   24dc6:	4b12      	ldr	r3, [pc, #72]	; (24e10 <vTask_sleep_manager+0xe8>)
   24dc8:	601a      	str	r2, [r3, #0]
					while(xTaskGetTickCount()-tempSleepWait<200)
   24dca:	46c0      	nop			; (mov r8, r8)
   24dcc:	4b0f      	ldr	r3, [pc, #60]	; (24e0c <vTask_sleep_manager+0xe4>)
   24dce:	4798      	blx	r3
   24dd0:	0002      	movs	r2, r0
   24dd2:	4b0f      	ldr	r3, [pc, #60]	; (24e10 <vTask_sleep_manager+0xe8>)
   24dd4:	681b      	ldr	r3, [r3, #0]
   24dd6:	1ad3      	subs	r3, r2, r3
   24dd8:	2bc7      	cmp	r3, #199	; 0xc7
   24dda:	d9f7      	bls.n	24dcc <vTask_sleep_manager+0xa4>
					{}
				}while(--cnt);
   24ddc:	230f      	movs	r3, #15
   24dde:	18fb      	adds	r3, r7, r3
   24de0:	220f      	movs	r2, #15
   24de2:	18ba      	adds	r2, r7, r2
   24de4:	7812      	ldrb	r2, [r2, #0]
   24de6:	3a01      	subs	r2, #1
   24de8:	701a      	strb	r2, [r3, #0]
   24dea:	230f      	movs	r3, #15
   24dec:	18fb      	adds	r3, r7, r3
   24dee:	781b      	ldrb	r3, [r3, #0]
   24df0:	2b00      	cmp	r3, #0
   24df2:	d1c6      	bne.n	24d82 <vTask_sleep_manager+0x5a>
				
				gotoSleep();
   24df4:	4b09      	ldr	r3, [pc, #36]	; (24e1c <vTask_sleep_manager+0xf4>)
   24df6:	4798      	blx	r3
   24df8:	e79a      	b.n	24d30 <vTask_sleep_manager+0x8>
			}
		}
		else
		{
			initSleepSeqeunce=false;
   24dfa:	4b03      	ldr	r3, [pc, #12]	; (24e08 <vTask_sleep_manager+0xe0>)
   24dfc:	2200      	movs	r2, #0
   24dfe:	701a      	strb	r2, [r3, #0]
		if (checkSleepElligible())
   24e00:	e796      	b.n	24d30 <vTask_sleep_manager+0x8>
   24e02:	46c0      	nop			; (mov r8, r8)
   24e04:	00024ce1 	.word	0x00024ce1
   24e08:	2000051c 	.word	0x2000051c
   24e0c:	0001fe3d 	.word	0x0001fe3d
   24e10:	20000520 	.word	0x20000520
   24e14:	00004650 	.word	0x00004650
   24e18:	00024bed 	.word	0x00024bed
   24e1c:	00024e21 	.word	0x00024e21

00024e20 <gotoSleep>:
		}
	}
}

void gotoSleep(void)
{
   24e20:	b580      	push	{r7, lr}
   24e22:	af00      	add	r7, sp, #0
	LCD_PWR_DIS();
   24e24:	4b06      	ldr	r3, [pc, #24]	; (24e40 <gotoSleep+0x20>)
   24e26:	4798      	blx	r3
	
	lcd_in_sleep = true;
   24e28:	4b06      	ldr	r3, [pc, #24]	; (24e44 <gotoSleep+0x24>)
   24e2a:	2201      	movs	r2, #1
   24e2c:	701a      	strb	r2, [r3, #0]
	setNetworkCharacter=true;
   24e2e:	4b06      	ldr	r3, [pc, #24]	; (24e48 <gotoSleep+0x28>)
   24e30:	2201      	movs	r2, #1
   24e32:	701a      	strb	r2, [r3, #0]
	system_sleep();
   24e34:	4b05      	ldr	r3, [pc, #20]	; (24e4c <gotoSleep+0x2c>)
   24e36:	4798      	blx	r3
   24e38:	46c0      	nop			; (mov r8, r8)
   24e3a:	46bd      	mov	sp, r7
   24e3c:	bd80      	pop	{r7, pc}
   24e3e:	46c0      	nop			; (mov r8, r8)
   24e40:	000139cd 	.word	0x000139cd
   24e44:	20000843 	.word	0x20000843
   24e48:	20000844 	.word	0x20000844
   24e4c:	00024bb9 	.word	0x00024bb9

00024e50 <pow>:
   24e50:	b5f0      	push	{r4, r5, r6, r7, lr}
   24e52:	4657      	mov	r7, sl
   24e54:	464e      	mov	r6, r9
   24e56:	46de      	mov	lr, fp
   24e58:	4645      	mov	r5, r8
   24e5a:	b5e0      	push	{r5, r6, r7, lr}
   24e5c:	b08f      	sub	sp, #60	; 0x3c
   24e5e:	001d      	movs	r5, r3
   24e60:	0006      	movs	r6, r0
   24e62:	000f      	movs	r7, r1
   24e64:	0014      	movs	r4, r2
   24e66:	f000 f9ff 	bl	25268 <__ieee754_pow>
   24e6a:	4bc7      	ldr	r3, [pc, #796]	; (25188 <pow+0x338>)
   24e6c:	9000      	str	r0, [sp, #0]
   24e6e:	9101      	str	r1, [sp, #4]
   24e70:	469a      	mov	sl, r3
   24e72:	781b      	ldrb	r3, [r3, #0]
   24e74:	b25b      	sxtb	r3, r3
   24e76:	4699      	mov	r9, r3
   24e78:	3301      	adds	r3, #1
   24e7a:	d03e      	beq.n	24efa <pow+0xaa>
   24e7c:	0022      	movs	r2, r4
   24e7e:	002b      	movs	r3, r5
   24e80:	0020      	movs	r0, r4
   24e82:	0029      	movs	r1, r5
   24e84:	f003 fbe2 	bl	2864c <__aeabi_dcmpun>
   24e88:	4683      	mov	fp, r0
   24e8a:	2800      	cmp	r0, #0
   24e8c:	d135      	bne.n	24efa <pow+0xaa>
   24e8e:	0032      	movs	r2, r6
   24e90:	003b      	movs	r3, r7
   24e92:	0030      	movs	r0, r6
   24e94:	0039      	movs	r1, r7
   24e96:	f003 fbd9 	bl	2864c <__aeabi_dcmpun>
   24e9a:	2200      	movs	r2, #0
   24e9c:	9003      	str	r0, [sp, #12]
   24e9e:	2800      	cmp	r0, #0
   24ea0:	d000      	beq.n	24ea4 <pow+0x54>
   24ea2:	e0b6      	b.n	25012 <pow+0x1c2>
   24ea4:	2300      	movs	r3, #0
   24ea6:	0030      	movs	r0, r6
   24ea8:	0039      	movs	r1, r7
   24eaa:	f001 faa1 	bl	263f0 <__aeabi_dcmpeq>
   24eae:	2800      	cmp	r0, #0
   24eb0:	d02c      	beq.n	24f0c <pow+0xbc>
   24eb2:	2200      	movs	r2, #0
   24eb4:	2300      	movs	r3, #0
   24eb6:	0020      	movs	r0, r4
   24eb8:	0029      	movs	r1, r5
   24eba:	f001 fa99 	bl	263f0 <__aeabi_dcmpeq>
   24ebe:	4683      	mov	fp, r0
   24ec0:	2800      	cmp	r0, #0
   24ec2:	d100      	bne.n	24ec6 <pow+0x76>
   24ec4:	e077      	b.n	24fb6 <pow+0x166>
   24ec6:	ab04      	add	r3, sp, #16
   24ec8:	4698      	mov	r8, r3
   24eca:	2301      	movs	r3, #1
   24ecc:	4642      	mov	r2, r8
   24ece:	9304      	str	r3, [sp, #16]
   24ed0:	4bae      	ldr	r3, [pc, #696]	; (2518c <pow+0x33c>)
   24ed2:	6053      	str	r3, [r2, #4]
   24ed4:	4643      	mov	r3, r8
   24ed6:	9a03      	ldr	r2, [sp, #12]
   24ed8:	611c      	str	r4, [r3, #16]
   24eda:	615d      	str	r5, [r3, #20]
   24edc:	621a      	str	r2, [r3, #32]
   24ede:	609e      	str	r6, [r3, #8]
   24ee0:	60df      	str	r7, [r3, #12]
   24ee2:	4642      	mov	r2, r8
   24ee4:	2300      	movs	r3, #0
   24ee6:	2400      	movs	r4, #0
   24ee8:	6193      	str	r3, [r2, #24]
   24eea:	61d4      	str	r4, [r2, #28]
   24eec:	464b      	mov	r3, r9
   24eee:	2b00      	cmp	r3, #0
   24ef0:	d04d      	beq.n	24f8e <pow+0x13e>
   24ef2:	2300      	movs	r3, #0
   24ef4:	4ca6      	ldr	r4, [pc, #664]	; (25190 <pow+0x340>)
   24ef6:	9300      	str	r3, [sp, #0]
   24ef8:	9401      	str	r4, [sp, #4]
   24efa:	9800      	ldr	r0, [sp, #0]
   24efc:	9901      	ldr	r1, [sp, #4]
   24efe:	b00f      	add	sp, #60	; 0x3c
   24f00:	bc3c      	pop	{r2, r3, r4, r5}
   24f02:	4690      	mov	r8, r2
   24f04:	4699      	mov	r9, r3
   24f06:	46a2      	mov	sl, r4
   24f08:	46ab      	mov	fp, r5
   24f0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   24f0c:	9800      	ldr	r0, [sp, #0]
   24f0e:	9901      	ldr	r1, [sp, #4]
   24f10:	f000 ffc4 	bl	25e9c <finite>
   24f14:	4681      	mov	r9, r0
   24f16:	2800      	cmp	r0, #0
   24f18:	d100      	bne.n	24f1c <pow+0xcc>
   24f1a:	e09b      	b.n	25054 <pow+0x204>
   24f1c:	9800      	ldr	r0, [sp, #0]
   24f1e:	9901      	ldr	r1, [sp, #4]
   24f20:	2200      	movs	r2, #0
   24f22:	2300      	movs	r3, #0
   24f24:	f001 fa64 	bl	263f0 <__aeabi_dcmpeq>
   24f28:	2800      	cmp	r0, #0
   24f2a:	d0e6      	beq.n	24efa <pow+0xaa>
   24f2c:	0030      	movs	r0, r6
   24f2e:	0039      	movs	r1, r7
   24f30:	f000 ffb4 	bl	25e9c <finite>
   24f34:	2800      	cmp	r0, #0
   24f36:	d0e0      	beq.n	24efa <pow+0xaa>
   24f38:	0020      	movs	r0, r4
   24f3a:	0029      	movs	r1, r5
   24f3c:	f000 ffae 	bl	25e9c <finite>
   24f40:	2800      	cmp	r0, #0
   24f42:	d0da      	beq.n	24efa <pow+0xaa>
   24f44:	ab04      	add	r3, sp, #16
   24f46:	4698      	mov	r8, r3
   24f48:	2304      	movs	r3, #4
   24f4a:	4642      	mov	r2, r8
   24f4c:	9304      	str	r3, [sp, #16]
   24f4e:	4b8f      	ldr	r3, [pc, #572]	; (2518c <pow+0x33c>)
   24f50:	6114      	str	r4, [r2, #16]
   24f52:	6155      	str	r5, [r2, #20]
   24f54:	6053      	str	r3, [r2, #4]
   24f56:	2300      	movs	r3, #0
   24f58:	2400      	movs	r4, #0
   24f5a:	6213      	str	r3, [r2, #32]
   24f5c:	2300      	movs	r3, #0
   24f5e:	6193      	str	r3, [r2, #24]
   24f60:	61d4      	str	r4, [r2, #28]
   24f62:	4653      	mov	r3, sl
   24f64:	781b      	ldrb	r3, [r3, #0]
   24f66:	6096      	str	r6, [r2, #8]
   24f68:	60d7      	str	r7, [r2, #12]
   24f6a:	b25b      	sxtb	r3, r3
   24f6c:	2b02      	cmp	r3, #2
   24f6e:	d004      	beq.n	24f7a <pow+0x12a>
   24f70:	4640      	mov	r0, r8
   24f72:	f000 ff9d 	bl	25eb0 <matherr>
   24f76:	2800      	cmp	r0, #0
   24f78:	d10e      	bne.n	24f98 <pow+0x148>
   24f7a:	f003 fcc1 	bl	28900 <__errno>
   24f7e:	2322      	movs	r3, #34	; 0x22
   24f80:	6003      	str	r3, [r0, #0]
   24f82:	e009      	b.n	24f98 <pow+0x148>
   24f84:	4642      	mov	r2, r8
   24f86:	2300      	movs	r3, #0
   24f88:	2400      	movs	r4, #0
   24f8a:	6193      	str	r3, [r2, #24]
   24f8c:	61d4      	str	r4, [r2, #28]
   24f8e:	4640      	mov	r0, r8
   24f90:	f000 ff8e 	bl	25eb0 <matherr>
   24f94:	2800      	cmp	r0, #0
   24f96:	d037      	beq.n	25008 <pow+0x1b8>
   24f98:	4643      	mov	r3, r8
   24f9a:	6a1b      	ldr	r3, [r3, #32]
   24f9c:	2b00      	cmp	r3, #0
   24f9e:	d004      	beq.n	24faa <pow+0x15a>
   24fa0:	f003 fcae 	bl	28900 <__errno>
   24fa4:	4643      	mov	r3, r8
   24fa6:	6a1b      	ldr	r3, [r3, #32]
   24fa8:	6003      	str	r3, [r0, #0]
   24faa:	4643      	mov	r3, r8
   24fac:	69dc      	ldr	r4, [r3, #28]
   24fae:	699b      	ldr	r3, [r3, #24]
   24fb0:	9300      	str	r3, [sp, #0]
   24fb2:	9401      	str	r4, [sp, #4]
   24fb4:	e7a1      	b.n	24efa <pow+0xaa>
   24fb6:	0020      	movs	r0, r4
   24fb8:	0029      	movs	r1, r5
   24fba:	f000 ff6f 	bl	25e9c <finite>
   24fbe:	2800      	cmp	r0, #0
   24fc0:	d09b      	beq.n	24efa <pow+0xaa>
   24fc2:	2200      	movs	r2, #0
   24fc4:	2300      	movs	r3, #0
   24fc6:	0020      	movs	r0, r4
   24fc8:	0029      	movs	r1, r5
   24fca:	f001 fa17 	bl	263fc <__aeabi_dcmplt>
   24fce:	2800      	cmp	r0, #0
   24fd0:	d100      	bne.n	24fd4 <pow+0x184>
   24fd2:	e792      	b.n	24efa <pow+0xaa>
   24fd4:	ab04      	add	r3, sp, #16
   24fd6:	4698      	mov	r8, r3
   24fd8:	2301      	movs	r3, #1
   24fda:	4642      	mov	r2, r8
   24fdc:	9304      	str	r3, [sp, #16]
   24fde:	4b6b      	ldr	r3, [pc, #428]	; (2518c <pow+0x33c>)
   24fe0:	6053      	str	r3, [r2, #4]
   24fe2:	4643      	mov	r3, r8
   24fe4:	465a      	mov	r2, fp
   24fe6:	609e      	str	r6, [r3, #8]
   24fe8:	60df      	str	r7, [r3, #12]
   24fea:	621a      	str	r2, [r3, #32]
   24fec:	611c      	str	r4, [r3, #16]
   24fee:	615d      	str	r5, [r3, #20]
   24ff0:	4653      	mov	r3, sl
   24ff2:	781b      	ldrb	r3, [r3, #0]
   24ff4:	b25b      	sxtb	r3, r3
   24ff6:	2b00      	cmp	r3, #0
   24ff8:	d0c4      	beq.n	24f84 <pow+0x134>
   24ffa:	2000      	movs	r0, #0
   24ffc:	4642      	mov	r2, r8
   24ffe:	4965      	ldr	r1, [pc, #404]	; (25194 <pow+0x344>)
   25000:	6190      	str	r0, [r2, #24]
   25002:	61d1      	str	r1, [r2, #28]
   25004:	2b02      	cmp	r3, #2
   25006:	d1c2      	bne.n	24f8e <pow+0x13e>
   25008:	f003 fc7a 	bl	28900 <__errno>
   2500c:	2321      	movs	r3, #33	; 0x21
   2500e:	6003      	str	r3, [r0, #0]
   25010:	e7c2      	b.n	24f98 <pow+0x148>
   25012:	2300      	movs	r3, #0
   25014:	0020      	movs	r0, r4
   25016:	0029      	movs	r1, r5
   25018:	f001 f9ea 	bl	263f0 <__aeabi_dcmpeq>
   2501c:	2800      	cmp	r0, #0
   2501e:	d100      	bne.n	25022 <pow+0x1d2>
   25020:	e76b      	b.n	24efa <pow+0xaa>
   25022:	ab04      	add	r3, sp, #16
   25024:	4698      	mov	r8, r3
   25026:	2301      	movs	r3, #1
   25028:	4642      	mov	r2, r8
   2502a:	9304      	str	r3, [sp, #16]
   2502c:	4b57      	ldr	r3, [pc, #348]	; (2518c <pow+0x33c>)
   2502e:	4641      	mov	r1, r8
   25030:	6053      	str	r3, [r2, #4]
   25032:	4643      	mov	r3, r8
   25034:	465a      	mov	r2, fp
   25036:	621a      	str	r2, [r3, #32]
   25038:	2200      	movs	r2, #0
   2503a:	609e      	str	r6, [r3, #8]
   2503c:	60df      	str	r7, [r3, #12]
   2503e:	611c      	str	r4, [r3, #16]
   25040:	615d      	str	r5, [r3, #20]
   25042:	4b53      	ldr	r3, [pc, #332]	; (25190 <pow+0x340>)
   25044:	618a      	str	r2, [r1, #24]
   25046:	61cb      	str	r3, [r1, #28]
   25048:	9200      	str	r2, [sp, #0]
   2504a:	9301      	str	r3, [sp, #4]
   2504c:	464b      	mov	r3, r9
   2504e:	2b02      	cmp	r3, #2
   25050:	d19d      	bne.n	24f8e <pow+0x13e>
   25052:	e752      	b.n	24efa <pow+0xaa>
   25054:	0030      	movs	r0, r6
   25056:	0039      	movs	r1, r7
   25058:	f000 ff20 	bl	25e9c <finite>
   2505c:	2800      	cmp	r0, #0
   2505e:	d100      	bne.n	25062 <pow+0x212>
   25060:	e75c      	b.n	24f1c <pow+0xcc>
   25062:	0020      	movs	r0, r4
   25064:	0029      	movs	r1, r5
   25066:	f000 ff19 	bl	25e9c <finite>
   2506a:	2800      	cmp	r0, #0
   2506c:	d100      	bne.n	25070 <pow+0x220>
   2506e:	e755      	b.n	24f1c <pow+0xcc>
   25070:	9800      	ldr	r0, [sp, #0]
   25072:	9901      	ldr	r1, [sp, #4]
   25074:	000b      	movs	r3, r1
   25076:	0002      	movs	r2, r0
   25078:	f003 fae8 	bl	2864c <__aeabi_dcmpun>
   2507c:	ab04      	add	r3, sp, #16
   2507e:	4698      	mov	r8, r3
   25080:	2800      	cmp	r0, #0
   25082:	d161      	bne.n	25148 <pow+0x2f8>
   25084:	2303      	movs	r3, #3
   25086:	4642      	mov	r2, r8
   25088:	9304      	str	r3, [sp, #16]
   2508a:	4b40      	ldr	r3, [pc, #256]	; (2518c <pow+0x33c>)
   2508c:	6210      	str	r0, [r2, #32]
   2508e:	6053      	str	r3, [r2, #4]
   25090:	4653      	mov	r3, sl
   25092:	781b      	ldrb	r3, [r3, #0]
   25094:	6096      	str	r6, [r2, #8]
   25096:	60d7      	str	r7, [r2, #12]
   25098:	b25b      	sxtb	r3, r3
   2509a:	6114      	str	r4, [r2, #16]
   2509c:	6155      	str	r5, [r2, #20]
   2509e:	4699      	mov	r9, r3
   250a0:	2b00      	cmp	r3, #0
   250a2:	d12f      	bne.n	25104 <pow+0x2b4>
   250a4:	22e0      	movs	r2, #224	; 0xe0
   250a6:	4641      	mov	r1, r8
   250a8:	4b3b      	ldr	r3, [pc, #236]	; (25198 <pow+0x348>)
   250aa:	0612      	lsls	r2, r2, #24
   250ac:	618a      	str	r2, [r1, #24]
   250ae:	61cb      	str	r3, [r1, #28]
   250b0:	0030      	movs	r0, r6
   250b2:	2200      	movs	r2, #0
   250b4:	2300      	movs	r3, #0
   250b6:	0039      	movs	r1, r7
   250b8:	f001 f9a0 	bl	263fc <__aeabi_dcmplt>
   250bc:	2800      	cmp	r0, #0
   250be:	d100      	bne.n	250c2 <pow+0x272>
   250c0:	e756      	b.n	24f70 <pow+0x120>
   250c2:	2200      	movs	r2, #0
   250c4:	4b35      	ldr	r3, [pc, #212]	; (2519c <pow+0x34c>)
   250c6:	0020      	movs	r0, r4
   250c8:	0029      	movs	r1, r5
   250ca:	f002 fd29 	bl	27b20 <__aeabi_dmul>
   250ce:	0004      	movs	r4, r0
   250d0:	000d      	movs	r5, r1
   250d2:	f000 fef5 	bl	25ec0 <rint>
   250d6:	0002      	movs	r2, r0
   250d8:	000b      	movs	r3, r1
   250da:	0020      	movs	r0, r4
   250dc:	0029      	movs	r1, r5
   250de:	f001 f987 	bl	263f0 <__aeabi_dcmpeq>
   250e2:	2800      	cmp	r0, #0
   250e4:	d105      	bne.n	250f2 <pow+0x2a2>
   250e6:	22e0      	movs	r2, #224	; 0xe0
   250e8:	4b2d      	ldr	r3, [pc, #180]	; (251a0 <pow+0x350>)
   250ea:	0612      	lsls	r2, r2, #24
   250ec:	4641      	mov	r1, r8
   250ee:	618a      	str	r2, [r1, #24]
   250f0:	61cb      	str	r3, [r1, #28]
   250f2:	4653      	mov	r3, sl
   250f4:	781b      	ldrb	r3, [r3, #0]
   250f6:	b25b      	sxtb	r3, r3
   250f8:	4699      	mov	r9, r3
   250fa:	464b      	mov	r3, r9
   250fc:	2b02      	cmp	r3, #2
   250fe:	d000      	beq.n	25102 <pow+0x2b2>
   25100:	e736      	b.n	24f70 <pow+0x120>
   25102:	e73a      	b.n	24f7a <pow+0x12a>
   25104:	2200      	movs	r2, #0
   25106:	4641      	mov	r1, r8
   25108:	4b26      	ldr	r3, [pc, #152]	; (251a4 <pow+0x354>)
   2510a:	0030      	movs	r0, r6
   2510c:	618a      	str	r2, [r1, #24]
   2510e:	61cb      	str	r3, [r1, #28]
   25110:	2200      	movs	r2, #0
   25112:	2300      	movs	r3, #0
   25114:	0039      	movs	r1, r7
   25116:	f001 f971 	bl	263fc <__aeabi_dcmplt>
   2511a:	2800      	cmp	r0, #0
   2511c:	d0ed      	beq.n	250fa <pow+0x2aa>
   2511e:	2200      	movs	r2, #0
   25120:	4b1e      	ldr	r3, [pc, #120]	; (2519c <pow+0x34c>)
   25122:	0020      	movs	r0, r4
   25124:	0029      	movs	r1, r5
   25126:	f002 fcfb 	bl	27b20 <__aeabi_dmul>
   2512a:	0004      	movs	r4, r0
   2512c:	000d      	movs	r5, r1
   2512e:	f000 fec7 	bl	25ec0 <rint>
   25132:	0002      	movs	r2, r0
   25134:	000b      	movs	r3, r1
   25136:	0020      	movs	r0, r4
   25138:	0029      	movs	r1, r5
   2513a:	f001 f959 	bl	263f0 <__aeabi_dcmpeq>
   2513e:	2800      	cmp	r0, #0
   25140:	d1d7      	bne.n	250f2 <pow+0x2a2>
   25142:	2200      	movs	r2, #0
   25144:	4b13      	ldr	r3, [pc, #76]	; (25194 <pow+0x344>)
   25146:	e7d1      	b.n	250ec <pow+0x29c>
   25148:	2301      	movs	r3, #1
   2514a:	4642      	mov	r2, r8
   2514c:	9304      	str	r3, [sp, #16]
   2514e:	4b0f      	ldr	r3, [pc, #60]	; (2518c <pow+0x33c>)
   25150:	6053      	str	r3, [r2, #4]
   25152:	4643      	mov	r3, r8
   25154:	464a      	mov	r2, r9
   25156:	611c      	str	r4, [r3, #16]
   25158:	615d      	str	r5, [r3, #20]
   2515a:	621a      	str	r2, [r3, #32]
   2515c:	609e      	str	r6, [r3, #8]
   2515e:	60df      	str	r7, [r3, #12]
   25160:	2400      	movs	r4, #0
   25162:	4653      	mov	r3, sl
   25164:	571c      	ldrsb	r4, [r3, r4]
   25166:	2c00      	cmp	r4, #0
   25168:	d100      	bne.n	2516c <pow+0x31c>
   2516a:	e70b      	b.n	24f84 <pow+0x134>
   2516c:	2300      	movs	r3, #0
   2516e:	2200      	movs	r2, #0
   25170:	0019      	movs	r1, r3
   25172:	0010      	movs	r0, r2
   25174:	f002 f8a0 	bl	272b8 <__aeabi_ddiv>
   25178:	4643      	mov	r3, r8
   2517a:	6198      	str	r0, [r3, #24]
   2517c:	61d9      	str	r1, [r3, #28]
   2517e:	2c02      	cmp	r4, #2
   25180:	d100      	bne.n	25184 <pow+0x334>
   25182:	e741      	b.n	25008 <pow+0x1b8>
   25184:	e703      	b.n	24f8e <pow+0x13e>
   25186:	46c0      	nop			; (mov r8, r8)
   25188:	20000029 	.word	0x20000029
   2518c:	0002a7fc 	.word	0x0002a7fc
   25190:	3ff00000 	.word	0x3ff00000
   25194:	fff00000 	.word	0xfff00000
   25198:	47efffff 	.word	0x47efffff
   2519c:	3fe00000 	.word	0x3fe00000
   251a0:	c7efffff 	.word	0xc7efffff
   251a4:	7ff00000 	.word	0x7ff00000

000251a8 <sqrt>:
   251a8:	b5f0      	push	{r4, r5, r6, r7, lr}
   251aa:	4647      	mov	r7, r8
   251ac:	46ce      	mov	lr, r9
   251ae:	b580      	push	{r7, lr}
   251b0:	b08d      	sub	sp, #52	; 0x34
   251b2:	0004      	movs	r4, r0
   251b4:	000d      	movs	r5, r1
   251b6:	f000 fd8d 	bl	25cd4 <__ieee754_sqrt>
   251ba:	4b29      	ldr	r3, [pc, #164]	; (25260 <sqrt+0xb8>)
   251bc:	0006      	movs	r6, r0
   251be:	781b      	ldrb	r3, [r3, #0]
   251c0:	000f      	movs	r7, r1
   251c2:	b25b      	sxtb	r3, r3
   251c4:	4698      	mov	r8, r3
   251c6:	3301      	adds	r3, #1
   251c8:	d010      	beq.n	251ec <sqrt+0x44>
   251ca:	0022      	movs	r2, r4
   251cc:	002b      	movs	r3, r5
   251ce:	0020      	movs	r0, r4
   251d0:	0029      	movs	r1, r5
   251d2:	f003 fa3b 	bl	2864c <__aeabi_dcmpun>
   251d6:	4681      	mov	r9, r0
   251d8:	2800      	cmp	r0, #0
   251da:	d107      	bne.n	251ec <sqrt+0x44>
   251dc:	2200      	movs	r2, #0
   251de:	2300      	movs	r3, #0
   251e0:	0020      	movs	r0, r4
   251e2:	0029      	movs	r1, r5
   251e4:	f001 f90a 	bl	263fc <__aeabi_dcmplt>
   251e8:	2800      	cmp	r0, #0
   251ea:	d106      	bne.n	251fa <sqrt+0x52>
   251ec:	0030      	movs	r0, r6
   251ee:	0039      	movs	r1, r7
   251f0:	b00d      	add	sp, #52	; 0x34
   251f2:	bc0c      	pop	{r2, r3}
   251f4:	4690      	mov	r8, r2
   251f6:	4699      	mov	r9, r3
   251f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   251fa:	2301      	movs	r3, #1
   251fc:	9302      	str	r3, [sp, #8]
   251fe:	4b19      	ldr	r3, [pc, #100]	; (25264 <sqrt+0xbc>)
   25200:	9406      	str	r4, [sp, #24]
   25202:	9507      	str	r5, [sp, #28]
   25204:	9303      	str	r3, [sp, #12]
   25206:	464b      	mov	r3, r9
   25208:	930a      	str	r3, [sp, #40]	; 0x28
   2520a:	4643      	mov	r3, r8
   2520c:	9404      	str	r4, [sp, #16]
   2520e:	9505      	str	r5, [sp, #20]
   25210:	2b00      	cmp	r3, #0
   25212:	d015      	beq.n	25240 <sqrt+0x98>
   25214:	2300      	movs	r3, #0
   25216:	2200      	movs	r2, #0
   25218:	0019      	movs	r1, r3
   2521a:	0010      	movs	r0, r2
   2521c:	f002 f84c 	bl	272b8 <__aeabi_ddiv>
   25220:	4643      	mov	r3, r8
   25222:	9008      	str	r0, [sp, #32]
   25224:	9109      	str	r1, [sp, #36]	; 0x24
   25226:	2b02      	cmp	r3, #2
   25228:	d10e      	bne.n	25248 <sqrt+0xa0>
   2522a:	f003 fb69 	bl	28900 <__errno>
   2522e:	2321      	movs	r3, #33	; 0x21
   25230:	6003      	str	r3, [r0, #0]
   25232:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   25234:	9301      	str	r3, [sp, #4]
   25236:	2b00      	cmp	r3, #0
   25238:	d10c      	bne.n	25254 <sqrt+0xac>
   2523a:	9e08      	ldr	r6, [sp, #32]
   2523c:	9f09      	ldr	r7, [sp, #36]	; 0x24
   2523e:	e7d5      	b.n	251ec <sqrt+0x44>
   25240:	2300      	movs	r3, #0
   25242:	2400      	movs	r4, #0
   25244:	9308      	str	r3, [sp, #32]
   25246:	9409      	str	r4, [sp, #36]	; 0x24
   25248:	a802      	add	r0, sp, #8
   2524a:	f000 fe31 	bl	25eb0 <matherr>
   2524e:	2800      	cmp	r0, #0
   25250:	d1ef      	bne.n	25232 <sqrt+0x8a>
   25252:	e7ea      	b.n	2522a <sqrt+0x82>
   25254:	f003 fb54 	bl	28900 <__errno>
   25258:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2525a:	9301      	str	r3, [sp, #4]
   2525c:	6003      	str	r3, [r0, #0]
   2525e:	e7ec      	b.n	2523a <sqrt+0x92>
   25260:	20000029 	.word	0x20000029
   25264:	0002a800 	.word	0x0002a800

00025268 <__ieee754_pow>:
   25268:	b5f0      	push	{r4, r5, r6, r7, lr}
   2526a:	4657      	mov	r7, sl
   2526c:	464e      	mov	r6, r9
   2526e:	4645      	mov	r5, r8
   25270:	46de      	mov	lr, fp
   25272:	001c      	movs	r4, r3
   25274:	0013      	movs	r3, r2
   25276:	b5e0      	push	{r5, r6, r7, lr}
   25278:	0065      	lsls	r5, r4, #1
   2527a:	b091      	sub	sp, #68	; 0x44
   2527c:	086d      	lsrs	r5, r5, #1
   2527e:	9300      	str	r3, [sp, #0]
   25280:	9401      	str	r4, [sp, #4]
   25282:	0007      	movs	r7, r0
   25284:	000e      	movs	r6, r1
   25286:	4680      	mov	r8, r0
   25288:	4689      	mov	r9, r1
   2528a:	46a2      	mov	sl, r4
   2528c:	432b      	orrs	r3, r5
   2528e:	d031      	beq.n	252f4 <__ieee754_pow+0x8c>
   25290:	4b67      	ldr	r3, [pc, #412]	; (25430 <__ieee754_pow+0x1c8>)
   25292:	0074      	lsls	r4, r6, #1
   25294:	0864      	lsrs	r4, r4, #1
   25296:	429c      	cmp	r4, r3
   25298:	dc27      	bgt.n	252ea <__ieee754_pow+0x82>
   2529a:	d024      	beq.n	252e6 <__ieee754_pow+0x7e>
   2529c:	429d      	cmp	r5, r3
   2529e:	dc24      	bgt.n	252ea <__ieee754_pow+0x82>
   252a0:	4b63      	ldr	r3, [pc, #396]	; (25430 <__ieee754_pow+0x1c8>)
   252a2:	429d      	cmp	r5, r3
   252a4:	d100      	bne.n	252a8 <__ieee754_pow+0x40>
   252a6:	e081      	b.n	253ac <__ieee754_pow+0x144>
   252a8:	2300      	movs	r3, #0
   252aa:	469b      	mov	fp, r3
   252ac:	464b      	mov	r3, r9
   252ae:	2b00      	cmp	r3, #0
   252b0:	da00      	bge.n	252b4 <__ieee754_pow+0x4c>
   252b2:	e07f      	b.n	253b4 <__ieee754_pow+0x14c>
   252b4:	2a00      	cmp	r2, #0
   252b6:	d12c      	bne.n	25312 <__ieee754_pow+0xaa>
   252b8:	4b5d      	ldr	r3, [pc, #372]	; (25430 <__ieee754_pow+0x1c8>)
   252ba:	429d      	cmp	r5, r3
   252bc:	d100      	bne.n	252c0 <__ieee754_pow+0x58>
   252be:	e097      	b.n	253f0 <__ieee754_pow+0x188>
   252c0:	4b5c      	ldr	r3, [pc, #368]	; (25434 <__ieee754_pow+0x1cc>)
   252c2:	429d      	cmp	r5, r3
   252c4:	d066      	beq.n	25394 <__ieee754_pow+0x12c>
   252c6:	2380      	movs	r3, #128	; 0x80
   252c8:	05db      	lsls	r3, r3, #23
   252ca:	459a      	cmp	sl, r3
   252cc:	d100      	bne.n	252d0 <__ieee754_pow+0x68>
   252ce:	e3b9      	b.n	25a44 <__ieee754_pow+0x7dc>
   252d0:	4b59      	ldr	r3, [pc, #356]	; (25438 <__ieee754_pow+0x1d0>)
   252d2:	459a      	cmp	sl, r3
   252d4:	d11d      	bne.n	25312 <__ieee754_pow+0xaa>
   252d6:	464b      	mov	r3, r9
   252d8:	2b00      	cmp	r3, #0
   252da:	db1a      	blt.n	25312 <__ieee754_pow+0xaa>
   252dc:	0038      	movs	r0, r7
   252de:	0031      	movs	r1, r6
   252e0:	f000 fcf8 	bl	25cd4 <__ieee754_sqrt>
   252e4:	e008      	b.n	252f8 <__ieee754_pow+0x90>
   252e6:	2800      	cmp	r0, #0
   252e8:	d00d      	beq.n	25306 <__ieee754_pow+0x9e>
   252ea:	4b54      	ldr	r3, [pc, #336]	; (2543c <__ieee754_pow+0x1d4>)
   252ec:	469c      	mov	ip, r3
   252ee:	4464      	add	r4, ip
   252f0:	4327      	orrs	r7, r4
   252f2:	d10a      	bne.n	2530a <__ieee754_pow+0xa2>
   252f4:	2000      	movs	r0, #0
   252f6:	494f      	ldr	r1, [pc, #316]	; (25434 <__ieee754_pow+0x1cc>)
   252f8:	b011      	add	sp, #68	; 0x44
   252fa:	bc3c      	pop	{r2, r3, r4, r5}
   252fc:	4690      	mov	r8, r2
   252fe:	4699      	mov	r9, r3
   25300:	46a2      	mov	sl, r4
   25302:	46ab      	mov	fp, r5
   25304:	bdf0      	pop	{r4, r5, r6, r7, pc}
   25306:	42a5      	cmp	r5, r4
   25308:	ddca      	ble.n	252a0 <__ieee754_pow+0x38>
   2530a:	484d      	ldr	r0, [pc, #308]	; (25440 <__ieee754_pow+0x1d8>)
   2530c:	f000 fdd2 	bl	25eb4 <nan>
   25310:	e7f2      	b.n	252f8 <__ieee754_pow+0x90>
   25312:	0038      	movs	r0, r7
   25314:	0031      	movs	r1, r6
   25316:	f000 fdbd 	bl	25e94 <fabs>
   2531a:	4643      	mov	r3, r8
   2531c:	2b00      	cmp	r3, #0
   2531e:	d11d      	bne.n	2535c <__ieee754_pow+0xf4>
   25320:	2c00      	cmp	r4, #0
   25322:	d004      	beq.n	2532e <__ieee754_pow+0xc6>
   25324:	4a43      	ldr	r2, [pc, #268]	; (25434 <__ieee754_pow+0x1cc>)
   25326:	00b3      	lsls	r3, r6, #2
   25328:	089b      	lsrs	r3, r3, #2
   2532a:	4293      	cmp	r3, r2
   2532c:	d116      	bne.n	2535c <__ieee754_pow+0xf4>
   2532e:	4653      	mov	r3, sl
   25330:	2b00      	cmp	r3, #0
   25332:	da00      	bge.n	25336 <__ieee754_pow+0xce>
   25334:	e3c5      	b.n	25ac2 <__ieee754_pow+0x85a>
   25336:	464b      	mov	r3, r9
   25338:	2b00      	cmp	r3, #0
   2533a:	dadd      	bge.n	252f8 <__ieee754_pow+0x90>
   2533c:	4b3f      	ldr	r3, [pc, #252]	; (2543c <__ieee754_pow+0x1d4>)
   2533e:	469c      	mov	ip, r3
   25340:	465b      	mov	r3, fp
   25342:	4464      	add	r4, ip
   25344:	431c      	orrs	r4, r3
   25346:	d101      	bne.n	2534c <__ieee754_pow+0xe4>
   25348:	f000 fc53 	bl	25bf2 <__ieee754_pow+0x98a>
   2534c:	465b      	mov	r3, fp
   2534e:	2b01      	cmp	r3, #1
   25350:	d1d2      	bne.n	252f8 <__ieee754_pow+0x90>
   25352:	2480      	movs	r4, #128	; 0x80
   25354:	0624      	lsls	r4, r4, #24
   25356:	190b      	adds	r3, r1, r4
   25358:	0019      	movs	r1, r3
   2535a:	e7cd      	b.n	252f8 <__ieee754_pow+0x90>
   2535c:	0ff3      	lsrs	r3, r6, #31
   2535e:	3b01      	subs	r3, #1
   25360:	4698      	mov	r8, r3
   25362:	465b      	mov	r3, fp
   25364:	4642      	mov	r2, r8
   25366:	4313      	orrs	r3, r2
   25368:	d057      	beq.n	2541a <__ieee754_pow+0x1b2>
   2536a:	4b36      	ldr	r3, [pc, #216]	; (25444 <__ieee754_pow+0x1dc>)
   2536c:	429d      	cmp	r5, r3
   2536e:	dd77      	ble.n	25460 <__ieee754_pow+0x1f8>
   25370:	4b35      	ldr	r3, [pc, #212]	; (25448 <__ieee754_pow+0x1e0>)
   25372:	429d      	cmp	r5, r3
   25374:	dc00      	bgt.n	25378 <__ieee754_pow+0x110>
   25376:	e3b1      	b.n	25adc <__ieee754_pow+0x874>
   25378:	4b34      	ldr	r3, [pc, #208]	; (2544c <__ieee754_pow+0x1e4>)
   2537a:	429c      	cmp	r4, r3
   2537c:	dc00      	bgt.n	25380 <__ieee754_pow+0x118>
   2537e:	e3a8      	b.n	25ad2 <__ieee754_pow+0x86a>
   25380:	4653      	mov	r3, sl
   25382:	2b00      	cmp	r3, #0
   25384:	dd43      	ble.n	2540e <__ieee754_pow+0x1a6>
   25386:	4a32      	ldr	r2, [pc, #200]	; (25450 <__ieee754_pow+0x1e8>)
   25388:	4b32      	ldr	r3, [pc, #200]	; (25454 <__ieee754_pow+0x1ec>)
   2538a:	0010      	movs	r0, r2
   2538c:	0019      	movs	r1, r3
   2538e:	f002 fbc7 	bl	27b20 <__aeabi_dmul>
   25392:	e7b1      	b.n	252f8 <__ieee754_pow+0x90>
   25394:	4653      	mov	r3, sl
   25396:	0038      	movs	r0, r7
   25398:	0031      	movs	r1, r6
   2539a:	2b00      	cmp	r3, #0
   2539c:	daac      	bge.n	252f8 <__ieee754_pow+0x90>
   2539e:	003a      	movs	r2, r7
   253a0:	0033      	movs	r3, r6
   253a2:	2000      	movs	r0, #0
   253a4:	4923      	ldr	r1, [pc, #140]	; (25434 <__ieee754_pow+0x1cc>)
   253a6:	f001 ff87 	bl	272b8 <__aeabi_ddiv>
   253aa:	e7a5      	b.n	252f8 <__ieee754_pow+0x90>
   253ac:	2a00      	cmp	r2, #0
   253ae:	d100      	bne.n	253b2 <__ieee754_pow+0x14a>
   253b0:	e77a      	b.n	252a8 <__ieee754_pow+0x40>
   253b2:	e79a      	b.n	252ea <__ieee754_pow+0x82>
   253b4:	4b28      	ldr	r3, [pc, #160]	; (25458 <__ieee754_pow+0x1f0>)
   253b6:	429d      	cmp	r5, r3
   253b8:	dc2c      	bgt.n	25414 <__ieee754_pow+0x1ac>
   253ba:	4b24      	ldr	r3, [pc, #144]	; (2544c <__ieee754_pow+0x1e4>)
   253bc:	429d      	cmp	r5, r3
   253be:	dc00      	bgt.n	253c2 <__ieee754_pow+0x15a>
   253c0:	e778      	b.n	252b4 <__ieee754_pow+0x4c>
   253c2:	4926      	ldr	r1, [pc, #152]	; (2545c <__ieee754_pow+0x1f4>)
   253c4:	152b      	asrs	r3, r5, #20
   253c6:	468c      	mov	ip, r1
   253c8:	4463      	add	r3, ip
   253ca:	2b14      	cmp	r3, #20
   253cc:	dc01      	bgt.n	253d2 <__ieee754_pow+0x16a>
   253ce:	f000 fbf3 	bl	25bb8 <__ieee754_pow+0x950>
   253d2:	2134      	movs	r1, #52	; 0x34
   253d4:	1acb      	subs	r3, r1, r3
   253d6:	9900      	ldr	r1, [sp, #0]
   253d8:	40d9      	lsrs	r1, r3
   253da:	0008      	movs	r0, r1
   253dc:	4098      	lsls	r0, r3
   253de:	4282      	cmp	r2, r0
   253e0:	d000      	beq.n	253e4 <__ieee754_pow+0x17c>
   253e2:	e767      	b.n	252b4 <__ieee754_pow+0x4c>
   253e4:	2301      	movs	r3, #1
   253e6:	4019      	ands	r1, r3
   253e8:	3301      	adds	r3, #1
   253ea:	1a5b      	subs	r3, r3, r1
   253ec:	469b      	mov	fp, r3
   253ee:	e761      	b.n	252b4 <__ieee754_pow+0x4c>
   253f0:	4b12      	ldr	r3, [pc, #72]	; (2543c <__ieee754_pow+0x1d4>)
   253f2:	18e3      	adds	r3, r4, r3
   253f4:	431f      	orrs	r7, r3
   253f6:	d100      	bne.n	253fa <__ieee754_pow+0x192>
   253f8:	e77c      	b.n	252f4 <__ieee754_pow+0x8c>
   253fa:	4b14      	ldr	r3, [pc, #80]	; (2544c <__ieee754_pow+0x1e4>)
   253fc:	429c      	cmp	r4, r3
   253fe:	dc00      	bgt.n	25402 <__ieee754_pow+0x19a>
   25400:	e327      	b.n	25a52 <__ieee754_pow+0x7ea>
   25402:	9800      	ldr	r0, [sp, #0]
   25404:	9901      	ldr	r1, [sp, #4]
   25406:	4653      	mov	r3, sl
   25408:	2b00      	cmp	r3, #0
   2540a:	db00      	blt.n	2540e <__ieee754_pow+0x1a6>
   2540c:	e774      	b.n	252f8 <__ieee754_pow+0x90>
   2540e:	2000      	movs	r0, #0
   25410:	2100      	movs	r1, #0
   25412:	e771      	b.n	252f8 <__ieee754_pow+0x90>
   25414:	2302      	movs	r3, #2
   25416:	469b      	mov	fp, r3
   25418:	e74c      	b.n	252b4 <__ieee754_pow+0x4c>
   2541a:	003a      	movs	r2, r7
   2541c:	0033      	movs	r3, r6
   2541e:	0038      	movs	r0, r7
   25420:	0031      	movs	r1, r6
   25422:	f002 fdfd 	bl	28020 <__aeabi_dsub>
   25426:	0002      	movs	r2, r0
   25428:	000b      	movs	r3, r1
   2542a:	f001 ff45 	bl	272b8 <__aeabi_ddiv>
   2542e:	e763      	b.n	252f8 <__ieee754_pow+0x90>
   25430:	7ff00000 	.word	0x7ff00000
   25434:	3ff00000 	.word	0x3ff00000
   25438:	3fe00000 	.word	0x3fe00000
   2543c:	c0100000 	.word	0xc0100000
   25440:	0002a804 	.word	0x0002a804
   25444:	41e00000 	.word	0x41e00000
   25448:	43f00000 	.word	0x43f00000
   2544c:	3fefffff 	.word	0x3fefffff
   25450:	8800759c 	.word	0x8800759c
   25454:	7e37e43c 	.word	0x7e37e43c
   25458:	433fffff 	.word	0x433fffff
   2545c:	fffffc01 	.word	0xfffffc01
   25460:	4be9      	ldr	r3, [pc, #932]	; (25808 <__ieee754_pow+0x5a0>)
   25462:	2200      	movs	r2, #0
   25464:	429c      	cmp	r4, r3
   25466:	dc06      	bgt.n	25476 <__ieee754_pow+0x20e>
   25468:	2200      	movs	r2, #0
   2546a:	4be8      	ldr	r3, [pc, #928]	; (2580c <__ieee754_pow+0x5a4>)
   2546c:	f002 fb58 	bl	27b20 <__aeabi_dmul>
   25470:	2235      	movs	r2, #53	; 0x35
   25472:	000c      	movs	r4, r1
   25474:	4252      	negs	r2, r2
   25476:	4de6      	ldr	r5, [pc, #920]	; (25810 <__ieee754_pow+0x5a8>)
   25478:	1523      	asrs	r3, r4, #20
   2547a:	46ac      	mov	ip, r5
   2547c:	4463      	add	r3, ip
   2547e:	4699      	mov	r9, r3
   25480:	0324      	lsls	r4, r4, #12
   25482:	4de4      	ldr	r5, [pc, #912]	; (25814 <__ieee754_pow+0x5ac>)
   25484:	4be4      	ldr	r3, [pc, #912]	; (25818 <__ieee754_pow+0x5b0>)
   25486:	0b24      	lsrs	r4, r4, #12
   25488:	4491      	add	r9, r2
   2548a:	4325      	orrs	r5, r4
   2548c:	429c      	cmp	r4, r3
   2548e:	dd09      	ble.n	254a4 <__ieee754_pow+0x23c>
   25490:	4be2      	ldr	r3, [pc, #904]	; (2581c <__ieee754_pow+0x5b4>)
   25492:	429c      	cmp	r4, r3
   25494:	dc00      	bgt.n	25498 <__ieee754_pow+0x230>
   25496:	e3b6      	b.n	25c06 <__ieee754_pow+0x99e>
   25498:	2301      	movs	r3, #1
   2549a:	469c      	mov	ip, r3
   2549c:	4be0      	ldr	r3, [pc, #896]	; (25820 <__ieee754_pow+0x5b8>)
   2549e:	44e1      	add	r9, ip
   254a0:	469c      	mov	ip, r3
   254a2:	4465      	add	r5, ip
   254a4:	2300      	movs	r3, #0
   254a6:	2400      	movs	r4, #0
   254a8:	2200      	movs	r2, #0
   254aa:	9308      	str	r3, [sp, #32]
   254ac:	9409      	str	r4, [sp, #36]	; 0x24
   254ae:	930c      	str	r3, [sp, #48]	; 0x30
   254b0:	940d      	str	r4, [sp, #52]	; 0x34
   254b2:	2400      	movs	r4, #0
   254b4:	4bd7      	ldr	r3, [pc, #860]	; (25814 <__ieee754_pow+0x5ac>)
   254b6:	9206      	str	r2, [sp, #24]
   254b8:	9307      	str	r3, [sp, #28]
   254ba:	9a06      	ldr	r2, [sp, #24]
   254bc:	9b07      	ldr	r3, [sp, #28]
   254be:	0029      	movs	r1, r5
   254c0:	900a      	str	r0, [sp, #40]	; 0x28
   254c2:	910b      	str	r1, [sp, #44]	; 0x2c
   254c4:	f002 fdac 	bl	28020 <__aeabi_dsub>
   254c8:	9a06      	ldr	r2, [sp, #24]
   254ca:	9b07      	ldr	r3, [sp, #28]
   254cc:	0006      	movs	r6, r0
   254ce:	000f      	movs	r7, r1
   254d0:	980a      	ldr	r0, [sp, #40]	; 0x28
   254d2:	990b      	ldr	r1, [sp, #44]	; 0x2c
   254d4:	f001 fbe0 	bl	26c98 <__aeabi_dadd>
   254d8:	0002      	movs	r2, r0
   254da:	000b      	movs	r3, r1
   254dc:	2000      	movs	r0, #0
   254de:	49cd      	ldr	r1, [pc, #820]	; (25814 <__ieee754_pow+0x5ac>)
   254e0:	f001 feea 	bl	272b8 <__aeabi_ddiv>
   254e4:	000a      	movs	r2, r1
   254e6:	0001      	movs	r1, r0
   254e8:	0013      	movs	r3, r2
   254ea:	910e      	str	r1, [sp, #56]	; 0x38
   254ec:	920f      	str	r2, [sp, #60]	; 0x3c
   254ee:	0002      	movs	r2, r0
   254f0:	0039      	movs	r1, r7
   254f2:	0030      	movs	r0, r6
   254f4:	f002 fb14 	bl	27b20 <__aeabi_dmul>
   254f8:	000a      	movs	r2, r1
   254fa:	0001      	movs	r1, r0
   254fc:	2080      	movs	r0, #128	; 0x80
   254fe:	9104      	str	r1, [sp, #16]
   25500:	9205      	str	r2, [sp, #20]
   25502:	0013      	movs	r3, r2
   25504:	2200      	movs	r2, #0
   25506:	1069      	asrs	r1, r5, #1
   25508:	2580      	movs	r5, #128	; 0x80
   2550a:	0300      	lsls	r0, r0, #12
   2550c:	4684      	mov	ip, r0
   2550e:	9202      	str	r2, [sp, #8]
   25510:	9303      	str	r3, [sp, #12]
   25512:	2200      	movs	r2, #0
   25514:	05ad      	lsls	r5, r5, #22
   25516:	430d      	orrs	r5, r1
   25518:	4465      	add	r5, ip
   2551a:	192b      	adds	r3, r5, r4
   2551c:	9802      	ldr	r0, [sp, #8]
   2551e:	9903      	ldr	r1, [sp, #12]
   25520:	0014      	movs	r4, r2
   25522:	001d      	movs	r5, r3
   25524:	f002 fafc 	bl	27b20 <__aeabi_dmul>
   25528:	0002      	movs	r2, r0
   2552a:	000b      	movs	r3, r1
   2552c:	0030      	movs	r0, r6
   2552e:	0039      	movs	r1, r7
   25530:	f002 fd76 	bl	28020 <__aeabi_dsub>
   25534:	9a06      	ldr	r2, [sp, #24]
   25536:	9b07      	ldr	r3, [sp, #28]
   25538:	0006      	movs	r6, r0
   2553a:	000f      	movs	r7, r1
   2553c:	0020      	movs	r0, r4
   2553e:	0029      	movs	r1, r5
   25540:	f002 fd6e 	bl	28020 <__aeabi_dsub>
   25544:	0002      	movs	r2, r0
   25546:	000b      	movs	r3, r1
   25548:	980a      	ldr	r0, [sp, #40]	; 0x28
   2554a:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2554c:	f002 fd68 	bl	28020 <__aeabi_dsub>
   25550:	9a02      	ldr	r2, [sp, #8]
   25552:	9b03      	ldr	r3, [sp, #12]
   25554:	f002 fae4 	bl	27b20 <__aeabi_dmul>
   25558:	0002      	movs	r2, r0
   2555a:	000b      	movs	r3, r1
   2555c:	0030      	movs	r0, r6
   2555e:	0039      	movs	r1, r7
   25560:	f002 fd5e 	bl	28020 <__aeabi_dsub>
   25564:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   25566:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   25568:	f002 fada 	bl	27b20 <__aeabi_dmul>
   2556c:	9d04      	ldr	r5, [sp, #16]
   2556e:	9e05      	ldr	r6, [sp, #20]
   25570:	9006      	str	r0, [sp, #24]
   25572:	9107      	str	r1, [sp, #28]
   25574:	002a      	movs	r2, r5
   25576:	0033      	movs	r3, r6
   25578:	0028      	movs	r0, r5
   2557a:	0031      	movs	r1, r6
   2557c:	f002 fad0 	bl	27b20 <__aeabi_dmul>
   25580:	0006      	movs	r6, r0
   25582:	000f      	movs	r7, r1
   25584:	4aa7      	ldr	r2, [pc, #668]	; (25824 <__ieee754_pow+0x5bc>)
   25586:	4ba8      	ldr	r3, [pc, #672]	; (25828 <__ieee754_pow+0x5c0>)
   25588:	f002 faca 	bl	27b20 <__aeabi_dmul>
   2558c:	4aa7      	ldr	r2, [pc, #668]	; (2582c <__ieee754_pow+0x5c4>)
   2558e:	4ba8      	ldr	r3, [pc, #672]	; (25830 <__ieee754_pow+0x5c8>)
   25590:	f001 fb82 	bl	26c98 <__aeabi_dadd>
   25594:	0032      	movs	r2, r6
   25596:	003b      	movs	r3, r7
   25598:	f002 fac2 	bl	27b20 <__aeabi_dmul>
   2559c:	4aa5      	ldr	r2, [pc, #660]	; (25834 <__ieee754_pow+0x5cc>)
   2559e:	4ba6      	ldr	r3, [pc, #664]	; (25838 <__ieee754_pow+0x5d0>)
   255a0:	f001 fb7a 	bl	26c98 <__aeabi_dadd>
   255a4:	0032      	movs	r2, r6
   255a6:	003b      	movs	r3, r7
   255a8:	f002 faba 	bl	27b20 <__aeabi_dmul>
   255ac:	4aa3      	ldr	r2, [pc, #652]	; (2583c <__ieee754_pow+0x5d4>)
   255ae:	4ba4      	ldr	r3, [pc, #656]	; (25840 <__ieee754_pow+0x5d8>)
   255b0:	f001 fb72 	bl	26c98 <__aeabi_dadd>
   255b4:	0032      	movs	r2, r6
   255b6:	003b      	movs	r3, r7
   255b8:	f002 fab2 	bl	27b20 <__aeabi_dmul>
   255bc:	4aa1      	ldr	r2, [pc, #644]	; (25844 <__ieee754_pow+0x5dc>)
   255be:	4ba2      	ldr	r3, [pc, #648]	; (25848 <__ieee754_pow+0x5e0>)
   255c0:	f001 fb6a 	bl	26c98 <__aeabi_dadd>
   255c4:	0032      	movs	r2, r6
   255c6:	003b      	movs	r3, r7
   255c8:	f002 faaa 	bl	27b20 <__aeabi_dmul>
   255cc:	4a9f      	ldr	r2, [pc, #636]	; (2584c <__ieee754_pow+0x5e4>)
   255ce:	4ba0      	ldr	r3, [pc, #640]	; (25850 <__ieee754_pow+0x5e8>)
   255d0:	f001 fb62 	bl	26c98 <__aeabi_dadd>
   255d4:	0032      	movs	r2, r6
   255d6:	0004      	movs	r4, r0
   255d8:	000d      	movs	r5, r1
   255da:	003b      	movs	r3, r7
   255dc:	0030      	movs	r0, r6
   255de:	0039      	movs	r1, r7
   255e0:	f002 fa9e 	bl	27b20 <__aeabi_dmul>
   255e4:	0002      	movs	r2, r0
   255e6:	000b      	movs	r3, r1
   255e8:	0020      	movs	r0, r4
   255ea:	0029      	movs	r1, r5
   255ec:	f002 fa98 	bl	27b20 <__aeabi_dmul>
   255f0:	9e02      	ldr	r6, [sp, #8]
   255f2:	9f03      	ldr	r7, [sp, #12]
   255f4:	0004      	movs	r4, r0
   255f6:	000d      	movs	r5, r1
   255f8:	9804      	ldr	r0, [sp, #16]
   255fa:	9905      	ldr	r1, [sp, #20]
   255fc:	0032      	movs	r2, r6
   255fe:	003b      	movs	r3, r7
   25600:	f001 fb4a 	bl	26c98 <__aeabi_dadd>
   25604:	9a06      	ldr	r2, [sp, #24]
   25606:	9b07      	ldr	r3, [sp, #28]
   25608:	f002 fa8a 	bl	27b20 <__aeabi_dmul>
   2560c:	0022      	movs	r2, r4
   2560e:	002b      	movs	r3, r5
   25610:	f001 fb42 	bl	26c98 <__aeabi_dadd>
   25614:	0032      	movs	r2, r6
   25616:	900a      	str	r0, [sp, #40]	; 0x28
   25618:	910b      	str	r1, [sp, #44]	; 0x2c
   2561a:	003b      	movs	r3, r7
   2561c:	0030      	movs	r0, r6
   2561e:	0039      	movs	r1, r7
   25620:	9602      	str	r6, [sp, #8]
   25622:	9703      	str	r7, [sp, #12]
   25624:	f002 fa7c 	bl	27b20 <__aeabi_dmul>
   25628:	2200      	movs	r2, #0
   2562a:	4b8a      	ldr	r3, [pc, #552]	; (25854 <__ieee754_pow+0x5ec>)
   2562c:	0004      	movs	r4, r0
   2562e:	000d      	movs	r5, r1
   25630:	f001 fb32 	bl	26c98 <__aeabi_dadd>
   25634:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   25636:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   25638:	f001 fb2e 	bl	26c98 <__aeabi_dadd>
   2563c:	2600      	movs	r6, #0
   2563e:	000f      	movs	r7, r1
   25640:	0032      	movs	r2, r6
   25642:	000b      	movs	r3, r1
   25644:	9802      	ldr	r0, [sp, #8]
   25646:	9903      	ldr	r1, [sp, #12]
   25648:	f002 fa6a 	bl	27b20 <__aeabi_dmul>
   2564c:	2200      	movs	r2, #0
   2564e:	9002      	str	r0, [sp, #8]
   25650:	9103      	str	r1, [sp, #12]
   25652:	4b80      	ldr	r3, [pc, #512]	; (25854 <__ieee754_pow+0x5ec>)
   25654:	0030      	movs	r0, r6
   25656:	0039      	movs	r1, r7
   25658:	f002 fce2 	bl	28020 <__aeabi_dsub>
   2565c:	0022      	movs	r2, r4
   2565e:	002b      	movs	r3, r5
   25660:	f002 fcde 	bl	28020 <__aeabi_dsub>
   25664:	0002      	movs	r2, r0
   25666:	000b      	movs	r3, r1
   25668:	980a      	ldr	r0, [sp, #40]	; 0x28
   2566a:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2566c:	f002 fcd8 	bl	28020 <__aeabi_dsub>
   25670:	9a04      	ldr	r2, [sp, #16]
   25672:	9b05      	ldr	r3, [sp, #20]
   25674:	f002 fa54 	bl	27b20 <__aeabi_dmul>
   25678:	0032      	movs	r2, r6
   2567a:	0004      	movs	r4, r0
   2567c:	000d      	movs	r5, r1
   2567e:	9806      	ldr	r0, [sp, #24]
   25680:	9907      	ldr	r1, [sp, #28]
   25682:	003b      	movs	r3, r7
   25684:	f002 fa4c 	bl	27b20 <__aeabi_dmul>
   25688:	0002      	movs	r2, r0
   2568a:	000b      	movs	r3, r1
   2568c:	0020      	movs	r0, r4
   2568e:	0029      	movs	r1, r5
   25690:	f001 fb02 	bl	26c98 <__aeabi_dadd>
   25694:	0004      	movs	r4, r0
   25696:	000d      	movs	r5, r1
   25698:	0002      	movs	r2, r0
   2569a:	000b      	movs	r3, r1
   2569c:	9802      	ldr	r0, [sp, #8]
   2569e:	9903      	ldr	r1, [sp, #12]
   256a0:	f001 fafa 	bl	26c98 <__aeabi_dadd>
   256a4:	2600      	movs	r6, #0
   256a6:	22e0      	movs	r2, #224	; 0xe0
   256a8:	4b6b      	ldr	r3, [pc, #428]	; (25858 <__ieee754_pow+0x5f0>)
   256aa:	0612      	lsls	r2, r2, #24
   256ac:	0030      	movs	r0, r6
   256ae:	000f      	movs	r7, r1
   256b0:	f002 fa36 	bl	27b20 <__aeabi_dmul>
   256b4:	9a02      	ldr	r2, [sp, #8]
   256b6:	9b03      	ldr	r3, [sp, #12]
   256b8:	9004      	str	r0, [sp, #16]
   256ba:	9105      	str	r1, [sp, #20]
   256bc:	0030      	movs	r0, r6
   256be:	0039      	movs	r1, r7
   256c0:	f002 fcae 	bl	28020 <__aeabi_dsub>
   256c4:	0002      	movs	r2, r0
   256c6:	000b      	movs	r3, r1
   256c8:	0020      	movs	r0, r4
   256ca:	0029      	movs	r1, r5
   256cc:	f002 fca8 	bl	28020 <__aeabi_dsub>
   256d0:	4a62      	ldr	r2, [pc, #392]	; (2585c <__ieee754_pow+0x5f4>)
   256d2:	4b61      	ldr	r3, [pc, #388]	; (25858 <__ieee754_pow+0x5f0>)
   256d4:	f002 fa24 	bl	27b20 <__aeabi_dmul>
   256d8:	4a61      	ldr	r2, [pc, #388]	; (25860 <__ieee754_pow+0x5f8>)
   256da:	0004      	movs	r4, r0
   256dc:	000d      	movs	r5, r1
   256de:	4b61      	ldr	r3, [pc, #388]	; (25864 <__ieee754_pow+0x5fc>)
   256e0:	0030      	movs	r0, r6
   256e2:	0039      	movs	r1, r7
   256e4:	f002 fa1c 	bl	27b20 <__aeabi_dmul>
   256e8:	0002      	movs	r2, r0
   256ea:	000b      	movs	r3, r1
   256ec:	0020      	movs	r0, r4
   256ee:	0029      	movs	r1, r5
   256f0:	f001 fad2 	bl	26c98 <__aeabi_dadd>
   256f4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   256f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   256f8:	f001 face 	bl	26c98 <__aeabi_dadd>
   256fc:	0006      	movs	r6, r0
   256fe:	4648      	mov	r0, r9
   25700:	000f      	movs	r7, r1
   25702:	f002 fff7 	bl	286f4 <__aeabi_i2d>
   25706:	0004      	movs	r4, r0
   25708:	000d      	movs	r5, r1
   2570a:	9804      	ldr	r0, [sp, #16]
   2570c:	9905      	ldr	r1, [sp, #20]
   2570e:	0032      	movs	r2, r6
   25710:	003b      	movs	r3, r7
   25712:	f001 fac1 	bl	26c98 <__aeabi_dadd>
   25716:	9a08      	ldr	r2, [sp, #32]
   25718:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2571a:	f001 fabd 	bl	26c98 <__aeabi_dadd>
   2571e:	0022      	movs	r2, r4
   25720:	002b      	movs	r3, r5
   25722:	f001 fab9 	bl	26c98 <__aeabi_dadd>
   25726:	2000      	movs	r0, #0
   25728:	0022      	movs	r2, r4
   2572a:	002b      	movs	r3, r5
   2572c:	9002      	str	r0, [sp, #8]
   2572e:	9103      	str	r1, [sp, #12]
   25730:	f002 fc76 	bl	28020 <__aeabi_dsub>
   25734:	9a08      	ldr	r2, [sp, #32]
   25736:	9b09      	ldr	r3, [sp, #36]	; 0x24
   25738:	f002 fc72 	bl	28020 <__aeabi_dsub>
   2573c:	9a04      	ldr	r2, [sp, #16]
   2573e:	9b05      	ldr	r3, [sp, #20]
   25740:	f002 fc6e 	bl	28020 <__aeabi_dsub>
   25744:	0002      	movs	r2, r0
   25746:	000b      	movs	r3, r1
   25748:	0030      	movs	r0, r6
   2574a:	0039      	movs	r1, r7
   2574c:	f002 fc68 	bl	28020 <__aeabi_dsub>
   25750:	9004      	str	r0, [sp, #16]
   25752:	9105      	str	r1, [sp, #20]
   25754:	465b      	mov	r3, fp
   25756:	4642      	mov	r2, r8
   25758:	3b01      	subs	r3, #1
   2575a:	4313      	orrs	r3, r2
   2575c:	d100      	bne.n	25760 <__ieee754_pow+0x4f8>
   2575e:	e1ab      	b.n	25ab8 <__ieee754_pow+0x850>
   25760:	2300      	movs	r3, #0
   25762:	4c2c      	ldr	r4, [pc, #176]	; (25814 <__ieee754_pow+0x5ac>)
   25764:	9306      	str	r3, [sp, #24]
   25766:	9407      	str	r4, [sp, #28]
   25768:	9800      	ldr	r0, [sp, #0]
   2576a:	9901      	ldr	r1, [sp, #4]
   2576c:	2600      	movs	r6, #0
   2576e:	000b      	movs	r3, r1
   25770:	0032      	movs	r2, r6
   25772:	000f      	movs	r7, r1
   25774:	f002 fc54 	bl	28020 <__aeabi_dsub>
   25778:	9a02      	ldr	r2, [sp, #8]
   2577a:	9b03      	ldr	r3, [sp, #12]
   2577c:	f002 f9d0 	bl	27b20 <__aeabi_dmul>
   25780:	9a00      	ldr	r2, [sp, #0]
   25782:	9b01      	ldr	r3, [sp, #4]
   25784:	0004      	movs	r4, r0
   25786:	000d      	movs	r5, r1
   25788:	9804      	ldr	r0, [sp, #16]
   2578a:	9905      	ldr	r1, [sp, #20]
   2578c:	f002 f9c8 	bl	27b20 <__aeabi_dmul>
   25790:	0002      	movs	r2, r0
   25792:	000b      	movs	r3, r1
   25794:	0020      	movs	r0, r4
   25796:	0029      	movs	r1, r5
   25798:	f001 fa7e 	bl	26c98 <__aeabi_dadd>
   2579c:	0004      	movs	r4, r0
   2579e:	000d      	movs	r5, r1
   257a0:	9802      	ldr	r0, [sp, #8]
   257a2:	9903      	ldr	r1, [sp, #12]
   257a4:	0032      	movs	r2, r6
   257a6:	003b      	movs	r3, r7
   257a8:	9400      	str	r4, [sp, #0]
   257aa:	9501      	str	r5, [sp, #4]
   257ac:	f002 f9b8 	bl	27b20 <__aeabi_dmul>
   257b0:	0002      	movs	r2, r0
   257b2:	000b      	movs	r3, r1
   257b4:	0006      	movs	r6, r0
   257b6:	000f      	movs	r7, r1
   257b8:	0020      	movs	r0, r4
   257ba:	0029      	movs	r1, r5
   257bc:	f001 fa6c 	bl	26c98 <__aeabi_dadd>
   257c0:	4b29      	ldr	r3, [pc, #164]	; (25868 <__ieee754_pow+0x600>)
   257c2:	0004      	movs	r4, r0
   257c4:	000d      	movs	r5, r1
   257c6:	0002      	movs	r2, r0
   257c8:	468b      	mov	fp, r1
   257ca:	4299      	cmp	r1, r3
   257cc:	dc00      	bgt.n	257d0 <__ieee754_pow+0x568>
   257ce:	e14f      	b.n	25a70 <__ieee754_pow+0x808>
   257d0:	4b26      	ldr	r3, [pc, #152]	; (2586c <__ieee754_pow+0x604>)
   257d2:	18cb      	adds	r3, r1, r3
   257d4:	4303      	orrs	r3, r0
   257d6:	d000      	beq.n	257da <__ieee754_pow+0x572>
   257d8:	e1e2      	b.n	25ba0 <__ieee754_pow+0x938>
   257da:	9800      	ldr	r0, [sp, #0]
   257dc:	9901      	ldr	r1, [sp, #4]
   257de:	4a24      	ldr	r2, [pc, #144]	; (25870 <__ieee754_pow+0x608>)
   257e0:	4b24      	ldr	r3, [pc, #144]	; (25874 <__ieee754_pow+0x60c>)
   257e2:	f001 fa59 	bl	26c98 <__aeabi_dadd>
   257e6:	0032      	movs	r2, r6
   257e8:	9002      	str	r0, [sp, #8]
   257ea:	9103      	str	r1, [sp, #12]
   257ec:	003b      	movs	r3, r7
   257ee:	0020      	movs	r0, r4
   257f0:	0029      	movs	r1, r5
   257f2:	f002 fc15 	bl	28020 <__aeabi_dsub>
   257f6:	0002      	movs	r2, r0
   257f8:	000b      	movs	r3, r1
   257fa:	9802      	ldr	r0, [sp, #8]
   257fc:	9903      	ldr	r1, [sp, #12]
   257fe:	f000 fe11 	bl	26424 <__aeabi_dcmpgt>
   25802:	46aa      	mov	sl, r5
   25804:	e038      	b.n	25878 <__ieee754_pow+0x610>
   25806:	46c0      	nop			; (mov r8, r8)
   25808:	000fffff 	.word	0x000fffff
   2580c:	43400000 	.word	0x43400000
   25810:	fffffc01 	.word	0xfffffc01
   25814:	3ff00000 	.word	0x3ff00000
   25818:	0003988e 	.word	0x0003988e
   2581c:	000bb679 	.word	0x000bb679
   25820:	fff00000 	.word	0xfff00000
   25824:	4a454eef 	.word	0x4a454eef
   25828:	3fca7e28 	.word	0x3fca7e28
   2582c:	93c9db65 	.word	0x93c9db65
   25830:	3fcd864a 	.word	0x3fcd864a
   25834:	a91d4101 	.word	0xa91d4101
   25838:	3fd17460 	.word	0x3fd17460
   2583c:	518f264d 	.word	0x518f264d
   25840:	3fd55555 	.word	0x3fd55555
   25844:	db6fabff 	.word	0xdb6fabff
   25848:	3fdb6db6 	.word	0x3fdb6db6
   2584c:	33333303 	.word	0x33333303
   25850:	3fe33333 	.word	0x3fe33333
   25854:	40080000 	.word	0x40080000
   25858:	3feec709 	.word	0x3feec709
   2585c:	dc3a03fd 	.word	0xdc3a03fd
   25860:	145b01f5 	.word	0x145b01f5
   25864:	be3e2fe0 	.word	0xbe3e2fe0
   25868:	408fffff 	.word	0x408fffff
   2586c:	bf700000 	.word	0xbf700000
   25870:	652b82fe 	.word	0x652b82fe
   25874:	3c971547 	.word	0x3c971547
   25878:	2800      	cmp	r0, #0
   2587a:	d000      	beq.n	2587e <__ieee754_pow+0x616>
   2587c:	e190      	b.n	25ba0 <__ieee754_pow+0x938>
   2587e:	4aec      	ldr	r2, [pc, #944]	; (25c30 <__ieee754_pow+0x9c8>)
   25880:	4653      	mov	r3, sl
   25882:	4694      	mov	ip, r2
   25884:	2280      	movs	r2, #128	; 0x80
   25886:	0352      	lsls	r2, r2, #13
   25888:	0011      	movs	r1, r2
   2588a:	151b      	asrs	r3, r3, #20
   2588c:	4463      	add	r3, ip
   2588e:	4119      	asrs	r1, r3
   25890:	000b      	movs	r3, r1
   25892:	4690      	mov	r8, r2
   25894:	4ae7      	ldr	r2, [pc, #924]	; (25c34 <__ieee754_pow+0x9cc>)
   25896:	445b      	add	r3, fp
   25898:	4694      	mov	ip, r2
   2589a:	005c      	lsls	r4, r3, #1
   2589c:	0d64      	lsrs	r4, r4, #21
   2589e:	4de6      	ldr	r5, [pc, #920]	; (25c38 <__ieee754_pow+0x9d0>)
   258a0:	4464      	add	r4, ip
   258a2:	4125      	asrs	r5, r4
   258a4:	001a      	movs	r2, r3
   258a6:	43aa      	bics	r2, r5
   258a8:	0011      	movs	r1, r2
   258aa:	4642      	mov	r2, r8
   258ac:	031b      	lsls	r3, r3, #12
   258ae:	0b1b      	lsrs	r3, r3, #12
   258b0:	4313      	orrs	r3, r2
   258b2:	2214      	movs	r2, #20
   258b4:	1b14      	subs	r4, r2, r4
   258b6:	4123      	asrs	r3, r4
   258b8:	4699      	mov	r9, r3
   258ba:	465b      	mov	r3, fp
   258bc:	2000      	movs	r0, #0
   258be:	2b00      	cmp	r3, #0
   258c0:	da00      	bge.n	258c4 <__ieee754_pow+0x65c>
   258c2:	e1b0      	b.n	25c26 <__ieee754_pow+0x9be>
   258c4:	0002      	movs	r2, r0
   258c6:	000b      	movs	r3, r1
   258c8:	0030      	movs	r0, r6
   258ca:	0039      	movs	r1, r7
   258cc:	f002 fba8 	bl	28020 <__aeabi_dsub>
   258d0:	000b      	movs	r3, r1
   258d2:	0002      	movs	r2, r0
   258d4:	0006      	movs	r6, r0
   258d6:	000f      	movs	r7, r1
   258d8:	9800      	ldr	r0, [sp, #0]
   258da:	9901      	ldr	r1, [sp, #4]
   258dc:	f001 f9dc 	bl	26c98 <__aeabi_dadd>
   258e0:	464b      	mov	r3, r9
   258e2:	051b      	lsls	r3, r3, #20
   258e4:	000d      	movs	r5, r1
   258e6:	4698      	mov	r8, r3
   258e8:	2400      	movs	r4, #0
   258ea:	2200      	movs	r2, #0
   258ec:	4bd3      	ldr	r3, [pc, #844]	; (25c3c <__ieee754_pow+0x9d4>)
   258ee:	0020      	movs	r0, r4
   258f0:	0029      	movs	r1, r5
   258f2:	f002 f915 	bl	27b20 <__aeabi_dmul>
   258f6:	0032      	movs	r2, r6
   258f8:	9002      	str	r0, [sp, #8]
   258fa:	9103      	str	r1, [sp, #12]
   258fc:	003b      	movs	r3, r7
   258fe:	0020      	movs	r0, r4
   25900:	0029      	movs	r1, r5
   25902:	f002 fb8d 	bl	28020 <__aeabi_dsub>
   25906:	0002      	movs	r2, r0
   25908:	000b      	movs	r3, r1
   2590a:	9800      	ldr	r0, [sp, #0]
   2590c:	9901      	ldr	r1, [sp, #4]
   2590e:	f002 fb87 	bl	28020 <__aeabi_dsub>
   25912:	4acb      	ldr	r2, [pc, #812]	; (25c40 <__ieee754_pow+0x9d8>)
   25914:	4bcb      	ldr	r3, [pc, #812]	; (25c44 <__ieee754_pow+0x9dc>)
   25916:	f002 f903 	bl	27b20 <__aeabi_dmul>
   2591a:	4acb      	ldr	r2, [pc, #812]	; (25c48 <__ieee754_pow+0x9e0>)
   2591c:	0006      	movs	r6, r0
   2591e:	000f      	movs	r7, r1
   25920:	4bca      	ldr	r3, [pc, #808]	; (25c4c <__ieee754_pow+0x9e4>)
   25922:	0020      	movs	r0, r4
   25924:	0029      	movs	r1, r5
   25926:	f002 f8fb 	bl	27b20 <__aeabi_dmul>
   2592a:	0002      	movs	r2, r0
   2592c:	000b      	movs	r3, r1
   2592e:	0030      	movs	r0, r6
   25930:	0039      	movs	r1, r7
   25932:	f001 f9b1 	bl	26c98 <__aeabi_dadd>
   25936:	0004      	movs	r4, r0
   25938:	000d      	movs	r5, r1
   2593a:	0002      	movs	r2, r0
   2593c:	000b      	movs	r3, r1
   2593e:	9802      	ldr	r0, [sp, #8]
   25940:	9903      	ldr	r1, [sp, #12]
   25942:	f001 f9a9 	bl	26c98 <__aeabi_dadd>
   25946:	9a02      	ldr	r2, [sp, #8]
   25948:	9b03      	ldr	r3, [sp, #12]
   2594a:	0006      	movs	r6, r0
   2594c:	000f      	movs	r7, r1
   2594e:	f002 fb67 	bl	28020 <__aeabi_dsub>
   25952:	0002      	movs	r2, r0
   25954:	000b      	movs	r3, r1
   25956:	0020      	movs	r0, r4
   25958:	0029      	movs	r1, r5
   2595a:	f002 fb61 	bl	28020 <__aeabi_dsub>
   2595e:	0032      	movs	r2, r6
   25960:	9000      	str	r0, [sp, #0]
   25962:	9101      	str	r1, [sp, #4]
   25964:	003b      	movs	r3, r7
   25966:	0030      	movs	r0, r6
   25968:	0039      	movs	r1, r7
   2596a:	f002 f8d9 	bl	27b20 <__aeabi_dmul>
   2596e:	0004      	movs	r4, r0
   25970:	000d      	movs	r5, r1
   25972:	4ab7      	ldr	r2, [pc, #732]	; (25c50 <__ieee754_pow+0x9e8>)
   25974:	4bb7      	ldr	r3, [pc, #732]	; (25c54 <__ieee754_pow+0x9ec>)
   25976:	f002 f8d3 	bl	27b20 <__aeabi_dmul>
   2597a:	4ab7      	ldr	r2, [pc, #732]	; (25c58 <__ieee754_pow+0x9f0>)
   2597c:	4bb7      	ldr	r3, [pc, #732]	; (25c5c <__ieee754_pow+0x9f4>)
   2597e:	f002 fb4f 	bl	28020 <__aeabi_dsub>
   25982:	0022      	movs	r2, r4
   25984:	002b      	movs	r3, r5
   25986:	f002 f8cb 	bl	27b20 <__aeabi_dmul>
   2598a:	4ab5      	ldr	r2, [pc, #724]	; (25c60 <__ieee754_pow+0x9f8>)
   2598c:	4bb5      	ldr	r3, [pc, #724]	; (25c64 <__ieee754_pow+0x9fc>)
   2598e:	f001 f983 	bl	26c98 <__aeabi_dadd>
   25992:	0022      	movs	r2, r4
   25994:	002b      	movs	r3, r5
   25996:	f002 f8c3 	bl	27b20 <__aeabi_dmul>
   2599a:	4ab3      	ldr	r2, [pc, #716]	; (25c68 <__ieee754_pow+0xa00>)
   2599c:	4bb3      	ldr	r3, [pc, #716]	; (25c6c <__ieee754_pow+0xa04>)
   2599e:	f002 fb3f 	bl	28020 <__aeabi_dsub>
   259a2:	0022      	movs	r2, r4
   259a4:	002b      	movs	r3, r5
   259a6:	f002 f8bb 	bl	27b20 <__aeabi_dmul>
   259aa:	4ab1      	ldr	r2, [pc, #708]	; (25c70 <__ieee754_pow+0xa08>)
   259ac:	4bb1      	ldr	r3, [pc, #708]	; (25c74 <__ieee754_pow+0xa0c>)
   259ae:	f001 f973 	bl	26c98 <__aeabi_dadd>
   259b2:	0022      	movs	r2, r4
   259b4:	002b      	movs	r3, r5
   259b6:	f002 f8b3 	bl	27b20 <__aeabi_dmul>
   259ba:	0002      	movs	r2, r0
   259bc:	000b      	movs	r3, r1
   259be:	0030      	movs	r0, r6
   259c0:	0039      	movs	r1, r7
   259c2:	f002 fb2d 	bl	28020 <__aeabi_dsub>
   259c6:	0004      	movs	r4, r0
   259c8:	000d      	movs	r5, r1
   259ca:	0002      	movs	r2, r0
   259cc:	000b      	movs	r3, r1
   259ce:	0030      	movs	r0, r6
   259d0:	0039      	movs	r1, r7
   259d2:	f002 f8a5 	bl	27b20 <__aeabi_dmul>
   259d6:	2380      	movs	r3, #128	; 0x80
   259d8:	9002      	str	r0, [sp, #8]
   259da:	9103      	str	r1, [sp, #12]
   259dc:	2200      	movs	r2, #0
   259de:	05db      	lsls	r3, r3, #23
   259e0:	0020      	movs	r0, r4
   259e2:	0029      	movs	r1, r5
   259e4:	f002 fb1c 	bl	28020 <__aeabi_dsub>
   259e8:	0002      	movs	r2, r0
   259ea:	000b      	movs	r3, r1
   259ec:	9802      	ldr	r0, [sp, #8]
   259ee:	9903      	ldr	r1, [sp, #12]
   259f0:	f001 fc62 	bl	272b8 <__aeabi_ddiv>
   259f4:	9a00      	ldr	r2, [sp, #0]
   259f6:	9b01      	ldr	r3, [sp, #4]
   259f8:	0004      	movs	r4, r0
   259fa:	000d      	movs	r5, r1
   259fc:	0030      	movs	r0, r6
   259fe:	0039      	movs	r1, r7
   25a00:	f002 f88e 	bl	27b20 <__aeabi_dmul>
   25a04:	9a00      	ldr	r2, [sp, #0]
   25a06:	9b01      	ldr	r3, [sp, #4]
   25a08:	f001 f946 	bl	26c98 <__aeabi_dadd>
   25a0c:	0002      	movs	r2, r0
   25a0e:	000b      	movs	r3, r1
   25a10:	0020      	movs	r0, r4
   25a12:	0029      	movs	r1, r5
   25a14:	f002 fb04 	bl	28020 <__aeabi_dsub>
   25a18:	0032      	movs	r2, r6
   25a1a:	003b      	movs	r3, r7
   25a1c:	f002 fb00 	bl	28020 <__aeabi_dsub>
   25a20:	0002      	movs	r2, r0
   25a22:	000b      	movs	r3, r1
   25a24:	2000      	movs	r0, #0
   25a26:	4994      	ldr	r1, [pc, #592]	; (25c78 <__ieee754_pow+0xa10>)
   25a28:	f002 fafa 	bl	28020 <__aeabi_dsub>
   25a2c:	4643      	mov	r3, r8
   25a2e:	185b      	adds	r3, r3, r1
   25a30:	151a      	asrs	r2, r3, #20
   25a32:	2a00      	cmp	r2, #0
   25a34:	dc00      	bgt.n	25a38 <__ieee754_pow+0x7d0>
   25a36:	e149      	b.n	25ccc <__ieee754_pow+0xa64>
   25a38:	0019      	movs	r1, r3
   25a3a:	9a06      	ldr	r2, [sp, #24]
   25a3c:	9b07      	ldr	r3, [sp, #28]
   25a3e:	f002 f86f 	bl	27b20 <__aeabi_dmul>
   25a42:	e459      	b.n	252f8 <__ieee754_pow+0x90>
   25a44:	003a      	movs	r2, r7
   25a46:	0033      	movs	r3, r6
   25a48:	0038      	movs	r0, r7
   25a4a:	0031      	movs	r1, r6
   25a4c:	f002 f868 	bl	27b20 <__aeabi_dmul>
   25a50:	e452      	b.n	252f8 <__ieee754_pow+0x90>
   25a52:	4653      	mov	r3, sl
   25a54:	2b00      	cmp	r3, #0
   25a56:	db00      	blt.n	25a5a <__ieee754_pow+0x7f2>
   25a58:	e4d9      	b.n	2540e <__ieee754_pow+0x1a6>
   25a5a:	9c00      	ldr	r4, [sp, #0]
   25a5c:	9d01      	ldr	r5, [sp, #4]
   25a5e:	2280      	movs	r2, #128	; 0x80
   25a60:	0612      	lsls	r2, r2, #24
   25a62:	002b      	movs	r3, r5
   25a64:	4694      	mov	ip, r2
   25a66:	4463      	add	r3, ip
   25a68:	0020      	movs	r0, r4
   25a6a:	0019      	movs	r1, r3
   25a6c:	f7ff fc44 	bl	252f8 <__ieee754_pow+0x90>
   25a70:	004b      	lsls	r3, r1, #1
   25a72:	085b      	lsrs	r3, r3, #1
   25a74:	469a      	mov	sl, r3
   25a76:	4b81      	ldr	r3, [pc, #516]	; (25c7c <__ieee754_pow+0xa14>)
   25a78:	459a      	cmp	sl, r3
   25a7a:	dc00      	bgt.n	25a7e <__ieee754_pow+0x816>
   25a7c:	e0b1      	b.n	25be2 <__ieee754_pow+0x97a>
   25a7e:	4b80      	ldr	r3, [pc, #512]	; (25c80 <__ieee754_pow+0xa18>)
   25a80:	445b      	add	r3, fp
   25a82:	431a      	orrs	r2, r3
   25a84:	d10c      	bne.n	25aa0 <__ieee754_pow+0x838>
   25a86:	0032      	movs	r2, r6
   25a88:	003b      	movs	r3, r7
   25a8a:	f002 fac9 	bl	28020 <__aeabi_dsub>
   25a8e:	0002      	movs	r2, r0
   25a90:	000b      	movs	r3, r1
   25a92:	9800      	ldr	r0, [sp, #0]
   25a94:	9901      	ldr	r1, [sp, #4]
   25a96:	f000 fcbb 	bl	26410 <__aeabi_dcmple>
   25a9a:	2800      	cmp	r0, #0
   25a9c:	d100      	bne.n	25aa0 <__ieee754_pow+0x838>
   25a9e:	e6ee      	b.n	2587e <__ieee754_pow+0x616>
   25aa0:	9806      	ldr	r0, [sp, #24]
   25aa2:	9907      	ldr	r1, [sp, #28]
   25aa4:	4a77      	ldr	r2, [pc, #476]	; (25c84 <__ieee754_pow+0xa1c>)
   25aa6:	4b78      	ldr	r3, [pc, #480]	; (25c88 <__ieee754_pow+0xa20>)
   25aa8:	f002 f83a 	bl	27b20 <__aeabi_dmul>
   25aac:	4a75      	ldr	r2, [pc, #468]	; (25c84 <__ieee754_pow+0xa1c>)
   25aae:	4b76      	ldr	r3, [pc, #472]	; (25c88 <__ieee754_pow+0xa20>)
   25ab0:	f002 f836 	bl	27b20 <__aeabi_dmul>
   25ab4:	f7ff fc20 	bl	252f8 <__ieee754_pow+0x90>
   25ab8:	2300      	movs	r3, #0
   25aba:	4c74      	ldr	r4, [pc, #464]	; (25c8c <__ieee754_pow+0xa24>)
   25abc:	9306      	str	r3, [sp, #24]
   25abe:	9407      	str	r4, [sp, #28]
   25ac0:	e652      	b.n	25768 <__ieee754_pow+0x500>
   25ac2:	0002      	movs	r2, r0
   25ac4:	000b      	movs	r3, r1
   25ac6:	2000      	movs	r0, #0
   25ac8:	496b      	ldr	r1, [pc, #428]	; (25c78 <__ieee754_pow+0xa10>)
   25aca:	f001 fbf5 	bl	272b8 <__aeabi_ddiv>
   25ace:	f7ff fc32 	bl	25336 <__ieee754_pow+0xce>
   25ad2:	4653      	mov	r3, sl
   25ad4:	2b00      	cmp	r3, #0
   25ad6:	db00      	blt.n	25ada <__ieee754_pow+0x872>
   25ad8:	e499      	b.n	2540e <__ieee754_pow+0x1a6>
   25ada:	e454      	b.n	25386 <__ieee754_pow+0x11e>
   25adc:	4b6c      	ldr	r3, [pc, #432]	; (25c90 <__ieee754_pow+0xa28>)
   25ade:	429c      	cmp	r4, r3
   25ae0:	ddf7      	ble.n	25ad2 <__ieee754_pow+0x86a>
   25ae2:	4b65      	ldr	r3, [pc, #404]	; (25c78 <__ieee754_pow+0xa10>)
   25ae4:	429c      	cmp	r4, r3
   25ae6:	dd00      	ble.n	25aea <__ieee754_pow+0x882>
   25ae8:	e44a      	b.n	25380 <__ieee754_pow+0x118>
   25aea:	2200      	movs	r2, #0
   25aec:	4b62      	ldr	r3, [pc, #392]	; (25c78 <__ieee754_pow+0xa10>)
   25aee:	f002 fa97 	bl	28020 <__aeabi_dsub>
   25af2:	22c0      	movs	r2, #192	; 0xc0
   25af4:	4b67      	ldr	r3, [pc, #412]	; (25c94 <__ieee754_pow+0xa2c>)
   25af6:	05d2      	lsls	r2, r2, #23
   25af8:	0004      	movs	r4, r0
   25afa:	000d      	movs	r5, r1
   25afc:	f002 f810 	bl	27b20 <__aeabi_dmul>
   25b00:	4a65      	ldr	r2, [pc, #404]	; (25c98 <__ieee754_pow+0xa30>)
   25b02:	0006      	movs	r6, r0
   25b04:	000f      	movs	r7, r1
   25b06:	4b65      	ldr	r3, [pc, #404]	; (25c9c <__ieee754_pow+0xa34>)
   25b08:	0020      	movs	r0, r4
   25b0a:	0029      	movs	r1, r5
   25b0c:	f002 f808 	bl	27b20 <__aeabi_dmul>
   25b10:	2200      	movs	r2, #0
   25b12:	9002      	str	r0, [sp, #8]
   25b14:	9103      	str	r1, [sp, #12]
   25b16:	4b62      	ldr	r3, [pc, #392]	; (25ca0 <__ieee754_pow+0xa38>)
   25b18:	0020      	movs	r0, r4
   25b1a:	0029      	movs	r1, r5
   25b1c:	f002 f800 	bl	27b20 <__aeabi_dmul>
   25b20:	0002      	movs	r2, r0
   25b22:	000b      	movs	r3, r1
   25b24:	485f      	ldr	r0, [pc, #380]	; (25ca4 <__ieee754_pow+0xa3c>)
   25b26:	4960      	ldr	r1, [pc, #384]	; (25ca8 <__ieee754_pow+0xa40>)
   25b28:	f002 fa7a 	bl	28020 <__aeabi_dsub>
   25b2c:	0022      	movs	r2, r4
   25b2e:	002b      	movs	r3, r5
   25b30:	f001 fff6 	bl	27b20 <__aeabi_dmul>
   25b34:	0002      	movs	r2, r0
   25b36:	000b      	movs	r3, r1
   25b38:	2000      	movs	r0, #0
   25b3a:	495c      	ldr	r1, [pc, #368]	; (25cac <__ieee754_pow+0xa44>)
   25b3c:	f002 fa70 	bl	28020 <__aeabi_dsub>
   25b40:	0022      	movs	r2, r4
   25b42:	9004      	str	r0, [sp, #16]
   25b44:	9105      	str	r1, [sp, #20]
   25b46:	002b      	movs	r3, r5
   25b48:	0020      	movs	r0, r4
   25b4a:	0029      	movs	r1, r5
   25b4c:	f001 ffe8 	bl	27b20 <__aeabi_dmul>
   25b50:	0002      	movs	r2, r0
   25b52:	000b      	movs	r3, r1
   25b54:	9804      	ldr	r0, [sp, #16]
   25b56:	9905      	ldr	r1, [sp, #20]
   25b58:	f001 ffe2 	bl	27b20 <__aeabi_dmul>
   25b5c:	4a54      	ldr	r2, [pc, #336]	; (25cb0 <__ieee754_pow+0xa48>)
   25b5e:	4b4d      	ldr	r3, [pc, #308]	; (25c94 <__ieee754_pow+0xa2c>)
   25b60:	f001 ffde 	bl	27b20 <__aeabi_dmul>
   25b64:	0002      	movs	r2, r0
   25b66:	000b      	movs	r3, r1
   25b68:	9802      	ldr	r0, [sp, #8]
   25b6a:	9903      	ldr	r1, [sp, #12]
   25b6c:	f002 fa58 	bl	28020 <__aeabi_dsub>
   25b70:	0002      	movs	r2, r0
   25b72:	000b      	movs	r3, r1
   25b74:	0004      	movs	r4, r0
   25b76:	000d      	movs	r5, r1
   25b78:	0030      	movs	r0, r6
   25b7a:	0039      	movs	r1, r7
   25b7c:	f001 f88c 	bl	26c98 <__aeabi_dadd>
   25b80:	2000      	movs	r0, #0
   25b82:	0032      	movs	r2, r6
   25b84:	003b      	movs	r3, r7
   25b86:	9002      	str	r0, [sp, #8]
   25b88:	9103      	str	r1, [sp, #12]
   25b8a:	f002 fa49 	bl	28020 <__aeabi_dsub>
   25b8e:	0002      	movs	r2, r0
   25b90:	000b      	movs	r3, r1
   25b92:	0020      	movs	r0, r4
   25b94:	0029      	movs	r1, r5
   25b96:	f002 fa43 	bl	28020 <__aeabi_dsub>
   25b9a:	9004      	str	r0, [sp, #16]
   25b9c:	9105      	str	r1, [sp, #20]
   25b9e:	e5d9      	b.n	25754 <__ieee754_pow+0x4ec>
   25ba0:	4a44      	ldr	r2, [pc, #272]	; (25cb4 <__ieee754_pow+0xa4c>)
   25ba2:	4b45      	ldr	r3, [pc, #276]	; (25cb8 <__ieee754_pow+0xa50>)
   25ba4:	9806      	ldr	r0, [sp, #24]
   25ba6:	9907      	ldr	r1, [sp, #28]
   25ba8:	f001 ffba 	bl	27b20 <__aeabi_dmul>
   25bac:	4a41      	ldr	r2, [pc, #260]	; (25cb4 <__ieee754_pow+0xa4c>)
   25bae:	4b42      	ldr	r3, [pc, #264]	; (25cb8 <__ieee754_pow+0xa50>)
   25bb0:	f001 ffb6 	bl	27b20 <__aeabi_dmul>
   25bb4:	f7ff fba0 	bl	252f8 <__ieee754_pow+0x90>
   25bb8:	2a00      	cmp	r2, #0
   25bba:	d001      	beq.n	25bc0 <__ieee754_pow+0x958>
   25bbc:	f7ff fba9 	bl	25312 <__ieee754_pow+0xaa>
   25bc0:	3214      	adds	r2, #20
   25bc2:	1ad3      	subs	r3, r2, r3
   25bc4:	002a      	movs	r2, r5
   25bc6:	411a      	asrs	r2, r3
   25bc8:	0011      	movs	r1, r2
   25bca:	4099      	lsls	r1, r3
   25bcc:	428d      	cmp	r5, r1
   25bce:	d001      	beq.n	25bd4 <__ieee754_pow+0x96c>
   25bd0:	f7ff fb76 	bl	252c0 <__ieee754_pow+0x58>
   25bd4:	2301      	movs	r3, #1
   25bd6:	401a      	ands	r2, r3
   25bd8:	18db      	adds	r3, r3, r3
   25bda:	1a9b      	subs	r3, r3, r2
   25bdc:	469b      	mov	fp, r3
   25bde:	f7ff fb6f 	bl	252c0 <__ieee754_pow+0x58>
   25be2:	2200      	movs	r2, #0
   25be4:	4b31      	ldr	r3, [pc, #196]	; (25cac <__ieee754_pow+0xa44>)
   25be6:	4690      	mov	r8, r2
   25be8:	4691      	mov	r9, r2
   25bea:	459a      	cmp	sl, r3
   25bec:	dc00      	bgt.n	25bf0 <__ieee754_pow+0x988>
   25bee:	e67b      	b.n	258e8 <__ieee754_pow+0x680>
   25bf0:	e645      	b.n	2587e <__ieee754_pow+0x616>
   25bf2:	0002      	movs	r2, r0
   25bf4:	000b      	movs	r3, r1
   25bf6:	f002 fa13 	bl	28020 <__aeabi_dsub>
   25bfa:	0002      	movs	r2, r0
   25bfc:	000b      	movs	r3, r1
   25bfe:	f001 fb5b 	bl	272b8 <__aeabi_ddiv>
   25c02:	f7ff fb79 	bl	252f8 <__ieee754_pow+0x90>
   25c06:	2380      	movs	r3, #128	; 0x80
   25c08:	4c2c      	ldr	r4, [pc, #176]	; (25cbc <__ieee754_pow+0xa54>)
   25c0a:	05db      	lsls	r3, r3, #23
   25c0c:	9308      	str	r3, [sp, #32]
   25c0e:	9409      	str	r4, [sp, #36]	; 0x24
   25c10:	4b2b      	ldr	r3, [pc, #172]	; (25cc0 <__ieee754_pow+0xa58>)
   25c12:	4c2c      	ldr	r4, [pc, #176]	; (25cc4 <__ieee754_pow+0xa5c>)
   25c14:	2200      	movs	r2, #0
   25c16:	930c      	str	r3, [sp, #48]	; 0x30
   25c18:	940d      	str	r4, [sp, #52]	; 0x34
   25c1a:	2480      	movs	r4, #128	; 0x80
   25c1c:	4b2a      	ldr	r3, [pc, #168]	; (25cc8 <__ieee754_pow+0xa60>)
   25c1e:	02e4      	lsls	r4, r4, #11
   25c20:	9206      	str	r2, [sp, #24]
   25c22:	9307      	str	r3, [sp, #28]
   25c24:	e449      	b.n	254ba <__ieee754_pow+0x252>
   25c26:	464b      	mov	r3, r9
   25c28:	425b      	negs	r3, r3
   25c2a:	4699      	mov	r9, r3
   25c2c:	e64a      	b.n	258c4 <__ieee754_pow+0x65c>
   25c2e:	46c0      	nop			; (mov r8, r8)
   25c30:	fffffc02 	.word	0xfffffc02
   25c34:	fffffc01 	.word	0xfffffc01
   25c38:	000fffff 	.word	0x000fffff
   25c3c:	3fe62e43 	.word	0x3fe62e43
   25c40:	fefa39ef 	.word	0xfefa39ef
   25c44:	3fe62e42 	.word	0x3fe62e42
   25c48:	0ca86c39 	.word	0x0ca86c39
   25c4c:	be205c61 	.word	0xbe205c61
   25c50:	72bea4d0 	.word	0x72bea4d0
   25c54:	3e663769 	.word	0x3e663769
   25c58:	c5d26bf1 	.word	0xc5d26bf1
   25c5c:	3ebbbd41 	.word	0x3ebbbd41
   25c60:	af25de2c 	.word	0xaf25de2c
   25c64:	3f11566a 	.word	0x3f11566a
   25c68:	16bebd93 	.word	0x16bebd93
   25c6c:	3f66c16c 	.word	0x3f66c16c
   25c70:	5555553e 	.word	0x5555553e
   25c74:	3fc55555 	.word	0x3fc55555
   25c78:	3ff00000 	.word	0x3ff00000
   25c7c:	4090cbff 	.word	0x4090cbff
   25c80:	3f6f3400 	.word	0x3f6f3400
   25c84:	c2f8f359 	.word	0xc2f8f359
   25c88:	01a56e1f 	.word	0x01a56e1f
   25c8c:	bff00000 	.word	0xbff00000
   25c90:	3feffffe 	.word	0x3feffffe
   25c94:	3ff71547 	.word	0x3ff71547
   25c98:	f85ddf44 	.word	0xf85ddf44
   25c9c:	3e54ae0b 	.word	0x3e54ae0b
   25ca0:	3fd00000 	.word	0x3fd00000
   25ca4:	55555555 	.word	0x55555555
   25ca8:	3fd55555 	.word	0x3fd55555
   25cac:	3fe00000 	.word	0x3fe00000
   25cb0:	652b82fe 	.word	0x652b82fe
   25cb4:	8800759c 	.word	0x8800759c
   25cb8:	7e37e43c 	.word	0x7e37e43c
   25cbc:	3fe2b803 	.word	0x3fe2b803
   25cc0:	43cfd006 	.word	0x43cfd006
   25cc4:	3e4cfdeb 	.word	0x3e4cfdeb
   25cc8:	3ff80000 	.word	0x3ff80000
   25ccc:	464a      	mov	r2, r9
   25cce:	f000 f999 	bl	26004 <scalbn>
   25cd2:	e6b2      	b.n	25a3a <__ieee754_pow+0x7d2>

00025cd4 <__ieee754_sqrt>:
   25cd4:	4b6c      	ldr	r3, [pc, #432]	; (25e88 <__ieee754_sqrt+0x1b4>)
   25cd6:	b5f0      	push	{r4, r5, r6, r7, lr}
   25cd8:	000a      	movs	r2, r1
   25cda:	4646      	mov	r6, r8
   25cdc:	000d      	movs	r5, r1
   25cde:	46d6      	mov	lr, sl
   25ce0:	464f      	mov	r7, r9
   25ce2:	0019      	movs	r1, r3
   25ce4:	b5c0      	push	{r6, r7, lr}
   25ce6:	0004      	movs	r4, r0
   25ce8:	0006      	movs	r6, r0
   25cea:	4029      	ands	r1, r5
   25cec:	4299      	cmp	r1, r3
   25cee:	d100      	bne.n	25cf2 <__ieee754_sqrt+0x1e>
   25cf0:	e0a7      	b.n	25e42 <__ieee754_sqrt+0x16e>
   25cf2:	2d00      	cmp	r5, #0
   25cf4:	dc00      	bgt.n	25cf8 <__ieee754_sqrt+0x24>
   25cf6:	e081      	b.n	25dfc <__ieee754_sqrt+0x128>
   25cf8:	152f      	asrs	r7, r5, #20
   25cfa:	d100      	bne.n	25cfe <__ieee754_sqrt+0x2a>
   25cfc:	e08e      	b.n	25e1c <__ieee754_sqrt+0x148>
   25cfe:	4b63      	ldr	r3, [pc, #396]	; (25e8c <__ieee754_sqrt+0x1b8>)
   25d00:	0312      	lsls	r2, r2, #12
   25d02:	469c      	mov	ip, r3
   25d04:	2380      	movs	r3, #128	; 0x80
   25d06:	0b12      	lsrs	r2, r2, #12
   25d08:	035b      	lsls	r3, r3, #13
   25d0a:	4467      	add	r7, ip
   25d0c:	431a      	orrs	r2, r3
   25d0e:	07fb      	lsls	r3, r7, #31
   25d10:	d468      	bmi.n	25de4 <__ieee754_sqrt+0x110>
   25d12:	107b      	asrs	r3, r7, #1
   25d14:	469c      	mov	ip, r3
   25d16:	0fe3      	lsrs	r3, r4, #31
   25d18:	189b      	adds	r3, r3, r2
   25d1a:	189b      	adds	r3, r3, r2
   25d1c:	2280      	movs	r2, #128	; 0x80
   25d1e:	2116      	movs	r1, #22
   25d20:	2600      	movs	r6, #0
   25d22:	2500      	movs	r5, #0
   25d24:	0064      	lsls	r4, r4, #1
   25d26:	0392      	lsls	r2, r2, #14
   25d28:	18a8      	adds	r0, r5, r2
   25d2a:	4298      	cmp	r0, r3
   25d2c:	dc02      	bgt.n	25d34 <__ieee754_sqrt+0x60>
   25d2e:	1885      	adds	r5, r0, r2
   25d30:	1a1b      	subs	r3, r3, r0
   25d32:	18b6      	adds	r6, r6, r2
   25d34:	0fe0      	lsrs	r0, r4, #31
   25d36:	005b      	lsls	r3, r3, #1
   25d38:	3901      	subs	r1, #1
   25d3a:	181b      	adds	r3, r3, r0
   25d3c:	0064      	lsls	r4, r4, #1
   25d3e:	0852      	lsrs	r2, r2, #1
   25d40:	2900      	cmp	r1, #0
   25d42:	d1f1      	bne.n	25d28 <__ieee754_sqrt+0x54>
   25d44:	2200      	movs	r2, #0
   25d46:	4692      	mov	sl, r2
   25d48:	4690      	mov	r8, r2
   25d4a:	2280      	movs	r2, #128	; 0x80
   25d4c:	2020      	movs	r0, #32
   25d4e:	0612      	lsls	r2, r2, #24
   25d50:	e009      	b.n	25d66 <__ieee754_sqrt+0x92>
   25d52:	42ab      	cmp	r3, r5
   25d54:	d038      	beq.n	25dc8 <__ieee754_sqrt+0xf4>
   25d56:	0fe1      	lsrs	r1, r4, #31
   25d58:	18c9      	adds	r1, r1, r3
   25d5a:	3801      	subs	r0, #1
   25d5c:	18cb      	adds	r3, r1, r3
   25d5e:	0064      	lsls	r4, r4, #1
   25d60:	0852      	lsrs	r2, r2, #1
   25d62:	2800      	cmp	r0, #0
   25d64:	d018      	beq.n	25d98 <__ieee754_sqrt+0xc4>
   25d66:	4641      	mov	r1, r8
   25d68:	1851      	adds	r1, r2, r1
   25d6a:	42ab      	cmp	r3, r5
   25d6c:	ddf1      	ble.n	25d52 <__ieee754_sqrt+0x7e>
   25d6e:	188f      	adds	r7, r1, r2
   25d70:	46b8      	mov	r8, r7
   25d72:	46a9      	mov	r9, r5
   25d74:	2900      	cmp	r1, #0
   25d76:	db30      	blt.n	25dda <__ieee754_sqrt+0x106>
   25d78:	1b5b      	subs	r3, r3, r5
   25d7a:	428c      	cmp	r4, r1
   25d7c:	41ad      	sbcs	r5, r5
   25d7e:	426d      	negs	r5, r5
   25d80:	1b5b      	subs	r3, r3, r5
   25d82:	1a64      	subs	r4, r4, r1
   25d84:	0fe1      	lsrs	r1, r4, #31
   25d86:	18c9      	adds	r1, r1, r3
   25d88:	3801      	subs	r0, #1
   25d8a:	4492      	add	sl, r2
   25d8c:	464d      	mov	r5, r9
   25d8e:	18cb      	adds	r3, r1, r3
   25d90:	0064      	lsls	r4, r4, #1
   25d92:	0852      	lsrs	r2, r2, #1
   25d94:	2800      	cmp	r0, #0
   25d96:	d1e6      	bne.n	25d66 <__ieee754_sqrt+0x92>
   25d98:	4323      	orrs	r3, r4
   25d9a:	d128      	bne.n	25dee <__ieee754_sqrt+0x11a>
   25d9c:	4653      	mov	r3, sl
   25d9e:	085b      	lsrs	r3, r3, #1
   25da0:	493b      	ldr	r1, [pc, #236]	; (25e90 <__ieee754_sqrt+0x1bc>)
   25da2:	1072      	asrs	r2, r6, #1
   25da4:	4688      	mov	r8, r1
   25da6:	4442      	add	r2, r8
   25da8:	07f1      	lsls	r1, r6, #31
   25daa:	d502      	bpl.n	25db2 <__ieee754_sqrt+0xde>
   25dac:	2180      	movs	r1, #128	; 0x80
   25dae:	0609      	lsls	r1, r1, #24
   25db0:	430b      	orrs	r3, r1
   25db2:	4661      	mov	r1, ip
   25db4:	001e      	movs	r6, r3
   25db6:	050f      	lsls	r7, r1, #20
   25db8:	18bd      	adds	r5, r7, r2
   25dba:	0030      	movs	r0, r6
   25dbc:	0029      	movs	r1, r5
   25dbe:	bc1c      	pop	{r2, r3, r4}
   25dc0:	4690      	mov	r8, r2
   25dc2:	4699      	mov	r9, r3
   25dc4:	46a2      	mov	sl, r4
   25dc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   25dc8:	42a1      	cmp	r1, r4
   25dca:	d8c4      	bhi.n	25d56 <__ieee754_sqrt+0x82>
   25dcc:	188f      	adds	r7, r1, r2
   25dce:	46b8      	mov	r8, r7
   25dd0:	2900      	cmp	r1, #0
   25dd2:	db42      	blt.n	25e5a <__ieee754_sqrt+0x186>
   25dd4:	4699      	mov	r9, r3
   25dd6:	2300      	movs	r3, #0
   25dd8:	e7d3      	b.n	25d82 <__ieee754_sqrt+0xae>
   25dda:	2f00      	cmp	r7, #0
   25ddc:	db2f      	blt.n	25e3e <__ieee754_sqrt+0x16a>
   25dde:	1c6f      	adds	r7, r5, #1
   25de0:	46b9      	mov	r9, r7
   25de2:	e7c9      	b.n	25d78 <__ieee754_sqrt+0xa4>
   25de4:	0fe1      	lsrs	r1, r4, #31
   25de6:	0052      	lsls	r2, r2, #1
   25de8:	188a      	adds	r2, r1, r2
   25dea:	0064      	lsls	r4, r4, #1
   25dec:	e791      	b.n	25d12 <__ieee754_sqrt+0x3e>
   25dee:	4653      	mov	r3, sl
   25df0:	3301      	adds	r3, #1
   25df2:	d035      	beq.n	25e60 <__ieee754_sqrt+0x18c>
   25df4:	4653      	mov	r3, sl
   25df6:	3301      	adds	r3, #1
   25df8:	085b      	lsrs	r3, r3, #1
   25dfa:	e7d1      	b.n	25da0 <__ieee754_sqrt+0xcc>
   25dfc:	006b      	lsls	r3, r5, #1
   25dfe:	085b      	lsrs	r3, r3, #1
   25e00:	4303      	orrs	r3, r0
   25e02:	d0da      	beq.n	25dba <__ieee754_sqrt+0xe6>
   25e04:	2700      	movs	r7, #0
   25e06:	2d00      	cmp	r5, #0
   25e08:	d132      	bne.n	25e70 <__ieee754_sqrt+0x19c>
   25e0a:	0ae2      	lsrs	r2, r4, #11
   25e0c:	3f15      	subs	r7, #21
   25e0e:	0564      	lsls	r4, r4, #21
   25e10:	2a00      	cmp	r2, #0
   25e12:	d0fa      	beq.n	25e0a <__ieee754_sqrt+0x136>
   25e14:	2380      	movs	r3, #128	; 0x80
   25e16:	035b      	lsls	r3, r3, #13
   25e18:	421a      	tst	r2, r3
   25e1a:	d124      	bne.n	25e66 <__ieee754_sqrt+0x192>
   25e1c:	2080      	movs	r0, #128	; 0x80
   25e1e:	2300      	movs	r3, #0
   25e20:	0340      	lsls	r0, r0, #13
   25e22:	e000      	b.n	25e26 <__ieee754_sqrt+0x152>
   25e24:	000b      	movs	r3, r1
   25e26:	0052      	lsls	r2, r2, #1
   25e28:	1c59      	adds	r1, r3, #1
   25e2a:	4202      	tst	r2, r0
   25e2c:	d0fa      	beq.n	25e24 <__ieee754_sqrt+0x150>
   25e2e:	2020      	movs	r0, #32
   25e30:	1a40      	subs	r0, r0, r1
   25e32:	1aff      	subs	r7, r7, r3
   25e34:	0023      	movs	r3, r4
   25e36:	40c3      	lsrs	r3, r0
   25e38:	408c      	lsls	r4, r1
   25e3a:	431a      	orrs	r2, r3
   25e3c:	e75f      	b.n	25cfe <__ieee754_sqrt+0x2a>
   25e3e:	46a9      	mov	r9, r5
   25e40:	e79a      	b.n	25d78 <__ieee754_sqrt+0xa4>
   25e42:	002b      	movs	r3, r5
   25e44:	0002      	movs	r2, r0
   25e46:	0029      	movs	r1, r5
   25e48:	f001 fe6a 	bl	27b20 <__aeabi_dmul>
   25e4c:	0032      	movs	r2, r6
   25e4e:	002b      	movs	r3, r5
   25e50:	f000 ff22 	bl	26c98 <__aeabi_dadd>
   25e54:	0006      	movs	r6, r0
   25e56:	000d      	movs	r5, r1
   25e58:	e7af      	b.n	25dba <__ieee754_sqrt+0xe6>
   25e5a:	2f00      	cmp	r7, #0
   25e5c:	dabf      	bge.n	25dde <__ieee754_sqrt+0x10a>
   25e5e:	e7b9      	b.n	25dd4 <__ieee754_sqrt+0x100>
   25e60:	3601      	adds	r6, #1
   25e62:	2300      	movs	r3, #0
   25e64:	e79c      	b.n	25da0 <__ieee754_sqrt+0xcc>
   25e66:	2301      	movs	r3, #1
   25e68:	2100      	movs	r1, #0
   25e6a:	2020      	movs	r0, #32
   25e6c:	425b      	negs	r3, r3
   25e6e:	e7e0      	b.n	25e32 <__ieee754_sqrt+0x15e>
   25e70:	002b      	movs	r3, r5
   25e72:	0002      	movs	r2, r0
   25e74:	0029      	movs	r1, r5
   25e76:	f002 f8d3 	bl	28020 <__aeabi_dsub>
   25e7a:	0002      	movs	r2, r0
   25e7c:	000b      	movs	r3, r1
   25e7e:	f001 fa1b 	bl	272b8 <__aeabi_ddiv>
   25e82:	0006      	movs	r6, r0
   25e84:	000d      	movs	r5, r1
   25e86:	e798      	b.n	25dba <__ieee754_sqrt+0xe6>
   25e88:	7ff00000 	.word	0x7ff00000
   25e8c:	fffffc01 	.word	0xfffffc01
   25e90:	3fe00000 	.word	0x3fe00000

00025e94 <fabs>:
   25e94:	0049      	lsls	r1, r1, #1
   25e96:	084b      	lsrs	r3, r1, #1
   25e98:	0019      	movs	r1, r3
   25e9a:	4770      	bx	lr

00025e9c <finite>:
   25e9c:	4b03      	ldr	r3, [pc, #12]	; (25eac <finite+0x10>)
   25e9e:	0048      	lsls	r0, r1, #1
   25ea0:	469c      	mov	ip, r3
   25ea2:	0840      	lsrs	r0, r0, #1
   25ea4:	4460      	add	r0, ip
   25ea6:	0fc0      	lsrs	r0, r0, #31
   25ea8:	4770      	bx	lr
   25eaa:	46c0      	nop			; (mov r8, r8)
   25eac:	80100000 	.word	0x80100000

00025eb0 <matherr>:
   25eb0:	2000      	movs	r0, #0
   25eb2:	4770      	bx	lr

00025eb4 <nan>:
   25eb4:	2000      	movs	r0, #0
   25eb6:	4901      	ldr	r1, [pc, #4]	; (25ebc <nan+0x8>)
   25eb8:	4770      	bx	lr
   25eba:	46c0      	nop			; (mov r8, r8)
   25ebc:	7ff80000 	.word	0x7ff80000

00025ec0 <rint>:
   25ec0:	b5f0      	push	{r4, r5, r6, r7, lr}
   25ec2:	46c6      	mov	lr, r8
   25ec4:	b500      	push	{lr}
   25ec6:	0fcb      	lsrs	r3, r1, #31
   25ec8:	4698      	mov	r8, r3
   25eca:	4c4a      	ldr	r4, [pc, #296]	; (25ff4 <rint+0x134>)
   25ecc:	004b      	lsls	r3, r1, #1
   25ece:	0d5b      	lsrs	r3, r3, #21
   25ed0:	191e      	adds	r6, r3, r4
   25ed2:	b082      	sub	sp, #8
   25ed4:	0007      	movs	r7, r0
   25ed6:	000a      	movs	r2, r1
   25ed8:	2e13      	cmp	r6, #19
   25eda:	dc35      	bgt.n	25f48 <rint+0x88>
   25edc:	2e00      	cmp	r6, #0
   25ede:	db57      	blt.n	25f90 <rint+0xd0>
   25ee0:	4b45      	ldr	r3, [pc, #276]	; (25ff8 <rint+0x138>)
   25ee2:	0004      	movs	r4, r0
   25ee4:	4133      	asrs	r3, r6
   25ee6:	001f      	movs	r7, r3
   25ee8:	400f      	ands	r7, r1
   25eea:	4307      	orrs	r7, r0
   25eec:	000d      	movs	r5, r1
   25eee:	2f00      	cmp	r7, #0
   25ef0:	d024      	beq.n	25f3c <rint+0x7c>
   25ef2:	085b      	lsrs	r3, r3, #1
   25ef4:	001c      	movs	r4, r3
   25ef6:	400c      	ands	r4, r1
   25ef8:	4320      	orrs	r0, r4
   25efa:	2700      	movs	r7, #0
   25efc:	2800      	cmp	r0, #0
   25efe:	d007      	beq.n	25f10 <rint+0x50>
   25f00:	2e13      	cmp	r6, #19
   25f02:	d100      	bne.n	25f06 <rint+0x46>
   25f04:	e073      	b.n	25fee <rint+0x12e>
   25f06:	2280      	movs	r2, #128	; 0x80
   25f08:	02d2      	lsls	r2, r2, #11
   25f0a:	4132      	asrs	r2, r6
   25f0c:	4399      	bics	r1, r3
   25f0e:	430a      	orrs	r2, r1
   25f10:	4643      	mov	r3, r8
   25f12:	00de      	lsls	r6, r3, #3
   25f14:	4b39      	ldr	r3, [pc, #228]	; (25ffc <rint+0x13c>)
   25f16:	0011      	movs	r1, r2
   25f18:	199e      	adds	r6, r3, r6
   25f1a:	6834      	ldr	r4, [r6, #0]
   25f1c:	6875      	ldr	r5, [r6, #4]
   25f1e:	0038      	movs	r0, r7
   25f20:	0022      	movs	r2, r4
   25f22:	002b      	movs	r3, r5
   25f24:	f000 feb8 	bl	26c98 <__aeabi_dadd>
   25f28:	9000      	str	r0, [sp, #0]
   25f2a:	9101      	str	r1, [sp, #4]
   25f2c:	9800      	ldr	r0, [sp, #0]
   25f2e:	9901      	ldr	r1, [sp, #4]
   25f30:	0022      	movs	r2, r4
   25f32:	002b      	movs	r3, r5
   25f34:	f002 f874 	bl	28020 <__aeabi_dsub>
   25f38:	0004      	movs	r4, r0
   25f3a:	000d      	movs	r5, r1
   25f3c:	0020      	movs	r0, r4
   25f3e:	0029      	movs	r1, r5
   25f40:	b002      	add	sp, #8
   25f42:	bc04      	pop	{r2}
   25f44:	4690      	mov	r8, r2
   25f46:	bdf0      	pop	{r4, r5, r6, r7, pc}
   25f48:	2e33      	cmp	r6, #51	; 0x33
   25f4a:	dd0c      	ble.n	25f66 <rint+0xa6>
   25f4c:	2380      	movs	r3, #128	; 0x80
   25f4e:	0004      	movs	r4, r0
   25f50:	00db      	lsls	r3, r3, #3
   25f52:	000d      	movs	r5, r1
   25f54:	429e      	cmp	r6, r3
   25f56:	d1f1      	bne.n	25f3c <rint+0x7c>
   25f58:	0002      	movs	r2, r0
   25f5a:	000b      	movs	r3, r1
   25f5c:	f000 fe9c 	bl	26c98 <__aeabi_dadd>
   25f60:	0004      	movs	r4, r0
   25f62:	000d      	movs	r5, r1
   25f64:	e7ea      	b.n	25f3c <rint+0x7c>
   25f66:	4c26      	ldr	r4, [pc, #152]	; (26000 <rint+0x140>)
   25f68:	000d      	movs	r5, r1
   25f6a:	46a4      	mov	ip, r4
   25f6c:	2401      	movs	r4, #1
   25f6e:	4463      	add	r3, ip
   25f70:	4264      	negs	r4, r4
   25f72:	40dc      	lsrs	r4, r3
   25f74:	46a4      	mov	ip, r4
   25f76:	4661      	mov	r1, ip
   25f78:	0004      	movs	r4, r0
   25f7a:	4201      	tst	r1, r0
   25f7c:	d0de      	beq.n	25f3c <rint+0x7c>
   25f7e:	0849      	lsrs	r1, r1, #1
   25f80:	4201      	tst	r1, r0
   25f82:	d0c5      	beq.n	25f10 <rint+0x50>
   25f84:	2780      	movs	r7, #128	; 0x80
   25f86:	05ff      	lsls	r7, r7, #23
   25f88:	411f      	asrs	r7, r3
   25f8a:	4388      	bics	r0, r1
   25f8c:	4307      	orrs	r7, r0
   25f8e:	e7bf      	b.n	25f10 <rint+0x50>
   25f90:	004b      	lsls	r3, r1, #1
   25f92:	085b      	lsrs	r3, r3, #1
   25f94:	4303      	orrs	r3, r0
   25f96:	0004      	movs	r4, r0
   25f98:	000d      	movs	r5, r1
   25f9a:	2b00      	cmp	r3, #0
   25f9c:	d0ce      	beq.n	25f3c <rint+0x7c>
   25f9e:	030b      	lsls	r3, r1, #12
   25fa0:	0b1b      	lsrs	r3, r3, #12
   25fa2:	4303      	orrs	r3, r0
   25fa4:	001a      	movs	r2, r3
   25fa6:	425b      	negs	r3, r3
   25fa8:	4313      	orrs	r3, r2
   25faa:	2280      	movs	r2, #128	; 0x80
   25fac:	0b1b      	lsrs	r3, r3, #12
   25fae:	0312      	lsls	r2, r2, #12
   25fb0:	4013      	ands	r3, r2
   25fb2:	0c4a      	lsrs	r2, r1, #17
   25fb4:	0452      	lsls	r2, r2, #17
   25fb6:	4313      	orrs	r3, r2
   25fb8:	0019      	movs	r1, r3
   25fba:	4643      	mov	r3, r8
   25fbc:	00da      	lsls	r2, r3, #3
   25fbe:	4b0f      	ldr	r3, [pc, #60]	; (25ffc <rint+0x13c>)
   25fc0:	189b      	adds	r3, r3, r2
   25fc2:	681c      	ldr	r4, [r3, #0]
   25fc4:	685d      	ldr	r5, [r3, #4]
   25fc6:	0022      	movs	r2, r4
   25fc8:	002b      	movs	r3, r5
   25fca:	f000 fe65 	bl	26c98 <__aeabi_dadd>
   25fce:	9000      	str	r0, [sp, #0]
   25fd0:	9101      	str	r1, [sp, #4]
   25fd2:	9800      	ldr	r0, [sp, #0]
   25fd4:	9901      	ldr	r1, [sp, #4]
   25fd6:	0022      	movs	r2, r4
   25fd8:	002b      	movs	r3, r5
   25fda:	f002 f821 	bl	28020 <__aeabi_dsub>
   25fde:	4642      	mov	r2, r8
   25fe0:	004b      	lsls	r3, r1, #1
   25fe2:	085b      	lsrs	r3, r3, #1
   25fe4:	07d6      	lsls	r6, r2, #31
   25fe6:	4333      	orrs	r3, r6
   25fe8:	0004      	movs	r4, r0
   25fea:	001d      	movs	r5, r3
   25fec:	e7a6      	b.n	25f3c <rint+0x7c>
   25fee:	2780      	movs	r7, #128	; 0x80
   25ff0:	063f      	lsls	r7, r7, #24
   25ff2:	e788      	b.n	25f06 <rint+0x46>
   25ff4:	fffffc01 	.word	0xfffffc01
   25ff8:	000fffff 	.word	0x000fffff
   25ffc:	0002a808 	.word	0x0002a808
   26000:	fffffbed 	.word	0xfffffbed

00026004 <scalbn>:
   26004:	004b      	lsls	r3, r1, #1
   26006:	b570      	push	{r4, r5, r6, lr}
   26008:	0d5b      	lsrs	r3, r3, #21
   2600a:	0014      	movs	r4, r2
   2600c:	000a      	movs	r2, r1
   2600e:	2b00      	cmp	r3, #0
   26010:	d11a      	bne.n	26048 <scalbn+0x44>
   26012:	004b      	lsls	r3, r1, #1
   26014:	085b      	lsrs	r3, r3, #1
   26016:	4303      	orrs	r3, r0
   26018:	d015      	beq.n	26046 <scalbn+0x42>
   2601a:	2200      	movs	r2, #0
   2601c:	4b22      	ldr	r3, [pc, #136]	; (260a8 <scalbn+0xa4>)
   2601e:	f001 fd7f 	bl	27b20 <__aeabi_dmul>
   26022:	4b22      	ldr	r3, [pc, #136]	; (260ac <scalbn+0xa8>)
   26024:	000a      	movs	r2, r1
   26026:	429c      	cmp	r4, r3
   26028:	db22      	blt.n	26070 <scalbn+0x6c>
   2602a:	004b      	lsls	r3, r1, #1
   2602c:	0d5b      	lsrs	r3, r3, #21
   2602e:	3b36      	subs	r3, #54	; 0x36
   26030:	4d1f      	ldr	r5, [pc, #124]	; (260b0 <scalbn+0xac>)
   26032:	18e3      	adds	r3, r4, r3
   26034:	42ab      	cmp	r3, r5
   26036:	dc20      	bgt.n	2607a <scalbn+0x76>
   26038:	2b00      	cmp	r3, #0
   2603a:	dd0d      	ble.n	26058 <scalbn+0x54>
   2603c:	4c1d      	ldr	r4, [pc, #116]	; (260b4 <scalbn+0xb0>)
   2603e:	051b      	lsls	r3, r3, #20
   26040:	4022      	ands	r2, r4
   26042:	431a      	orrs	r2, r3
   26044:	0011      	movs	r1, r2
   26046:	bd70      	pop	{r4, r5, r6, pc}
   26048:	4d1b      	ldr	r5, [pc, #108]	; (260b8 <scalbn+0xb4>)
   2604a:	42ab      	cmp	r3, r5
   2604c:	d1f0      	bne.n	26030 <scalbn+0x2c>
   2604e:	0002      	movs	r2, r0
   26050:	000b      	movs	r3, r1
   26052:	f000 fe21 	bl	26c98 <__aeabi_dadd>
   26056:	e7f6      	b.n	26046 <scalbn+0x42>
   26058:	001d      	movs	r5, r3
   2605a:	3535      	adds	r5, #53	; 0x35
   2605c:	da18      	bge.n	26090 <scalbn+0x8c>
   2605e:	4b17      	ldr	r3, [pc, #92]	; (260bc <scalbn+0xb8>)
   26060:	0002      	movs	r2, r0
   26062:	429c      	cmp	r4, r3
   26064:	dc0a      	bgt.n	2607c <scalbn+0x78>
   26066:	000b      	movs	r3, r1
   26068:	4815      	ldr	r0, [pc, #84]	; (260c0 <scalbn+0xbc>)
   2606a:	4916      	ldr	r1, [pc, #88]	; (260c4 <scalbn+0xc0>)
   2606c:	f000 f832 	bl	260d4 <copysign>
   26070:	4a13      	ldr	r2, [pc, #76]	; (260c0 <scalbn+0xbc>)
   26072:	4b14      	ldr	r3, [pc, #80]	; (260c4 <scalbn+0xc0>)
   26074:	f001 fd54 	bl	27b20 <__aeabi_dmul>
   26078:	e7e5      	b.n	26046 <scalbn+0x42>
   2607a:	0002      	movs	r2, r0
   2607c:	000b      	movs	r3, r1
   2607e:	4812      	ldr	r0, [pc, #72]	; (260c8 <scalbn+0xc4>)
   26080:	4912      	ldr	r1, [pc, #72]	; (260cc <scalbn+0xc8>)
   26082:	f000 f827 	bl	260d4 <copysign>
   26086:	4a10      	ldr	r2, [pc, #64]	; (260c8 <scalbn+0xc4>)
   26088:	4b10      	ldr	r3, [pc, #64]	; (260cc <scalbn+0xc8>)
   2608a:	f001 fd49 	bl	27b20 <__aeabi_dmul>
   2608e:	e7da      	b.n	26046 <scalbn+0x42>
   26090:	4c08      	ldr	r4, [pc, #32]	; (260b4 <scalbn+0xb0>)
   26092:	3336      	adds	r3, #54	; 0x36
   26094:	4022      	ands	r2, r4
   26096:	051b      	lsls	r3, r3, #20
   26098:	4313      	orrs	r3, r2
   2609a:	0019      	movs	r1, r3
   2609c:	2200      	movs	r2, #0
   2609e:	4b0c      	ldr	r3, [pc, #48]	; (260d0 <scalbn+0xcc>)
   260a0:	f001 fd3e 	bl	27b20 <__aeabi_dmul>
   260a4:	e7cf      	b.n	26046 <scalbn+0x42>
   260a6:	46c0      	nop			; (mov r8, r8)
   260a8:	43500000 	.word	0x43500000
   260ac:	ffff3cb0 	.word	0xffff3cb0
   260b0:	000007fe 	.word	0x000007fe
   260b4:	800fffff 	.word	0x800fffff
   260b8:	000007ff 	.word	0x000007ff
   260bc:	0000c350 	.word	0x0000c350
   260c0:	c2f8f359 	.word	0xc2f8f359
   260c4:	01a56e1f 	.word	0x01a56e1f
   260c8:	8800759c 	.word	0x8800759c
   260cc:	7e37e43c 	.word	0x7e37e43c
   260d0:	3c900000 	.word	0x3c900000

000260d4 <copysign>:
   260d4:	b530      	push	{r4, r5, lr}
   260d6:	004a      	lsls	r2, r1, #1
   260d8:	0fdb      	lsrs	r3, r3, #31
   260da:	07db      	lsls	r3, r3, #31
   260dc:	0852      	lsrs	r2, r2, #1
   260de:	431a      	orrs	r2, r3
   260e0:	0011      	movs	r1, r2
   260e2:	bd30      	pop	{r4, r5, pc}

000260e4 <__udivsi3>:
   260e4:	2200      	movs	r2, #0
   260e6:	0843      	lsrs	r3, r0, #1
   260e8:	428b      	cmp	r3, r1
   260ea:	d374      	bcc.n	261d6 <__udivsi3+0xf2>
   260ec:	0903      	lsrs	r3, r0, #4
   260ee:	428b      	cmp	r3, r1
   260f0:	d35f      	bcc.n	261b2 <__udivsi3+0xce>
   260f2:	0a03      	lsrs	r3, r0, #8
   260f4:	428b      	cmp	r3, r1
   260f6:	d344      	bcc.n	26182 <__udivsi3+0x9e>
   260f8:	0b03      	lsrs	r3, r0, #12
   260fa:	428b      	cmp	r3, r1
   260fc:	d328      	bcc.n	26150 <__udivsi3+0x6c>
   260fe:	0c03      	lsrs	r3, r0, #16
   26100:	428b      	cmp	r3, r1
   26102:	d30d      	bcc.n	26120 <__udivsi3+0x3c>
   26104:	22ff      	movs	r2, #255	; 0xff
   26106:	0209      	lsls	r1, r1, #8
   26108:	ba12      	rev	r2, r2
   2610a:	0c03      	lsrs	r3, r0, #16
   2610c:	428b      	cmp	r3, r1
   2610e:	d302      	bcc.n	26116 <__udivsi3+0x32>
   26110:	1212      	asrs	r2, r2, #8
   26112:	0209      	lsls	r1, r1, #8
   26114:	d065      	beq.n	261e2 <__udivsi3+0xfe>
   26116:	0b03      	lsrs	r3, r0, #12
   26118:	428b      	cmp	r3, r1
   2611a:	d319      	bcc.n	26150 <__udivsi3+0x6c>
   2611c:	e000      	b.n	26120 <__udivsi3+0x3c>
   2611e:	0a09      	lsrs	r1, r1, #8
   26120:	0bc3      	lsrs	r3, r0, #15
   26122:	428b      	cmp	r3, r1
   26124:	d301      	bcc.n	2612a <__udivsi3+0x46>
   26126:	03cb      	lsls	r3, r1, #15
   26128:	1ac0      	subs	r0, r0, r3
   2612a:	4152      	adcs	r2, r2
   2612c:	0b83      	lsrs	r3, r0, #14
   2612e:	428b      	cmp	r3, r1
   26130:	d301      	bcc.n	26136 <__udivsi3+0x52>
   26132:	038b      	lsls	r3, r1, #14
   26134:	1ac0      	subs	r0, r0, r3
   26136:	4152      	adcs	r2, r2
   26138:	0b43      	lsrs	r3, r0, #13
   2613a:	428b      	cmp	r3, r1
   2613c:	d301      	bcc.n	26142 <__udivsi3+0x5e>
   2613e:	034b      	lsls	r3, r1, #13
   26140:	1ac0      	subs	r0, r0, r3
   26142:	4152      	adcs	r2, r2
   26144:	0b03      	lsrs	r3, r0, #12
   26146:	428b      	cmp	r3, r1
   26148:	d301      	bcc.n	2614e <__udivsi3+0x6a>
   2614a:	030b      	lsls	r3, r1, #12
   2614c:	1ac0      	subs	r0, r0, r3
   2614e:	4152      	adcs	r2, r2
   26150:	0ac3      	lsrs	r3, r0, #11
   26152:	428b      	cmp	r3, r1
   26154:	d301      	bcc.n	2615a <__udivsi3+0x76>
   26156:	02cb      	lsls	r3, r1, #11
   26158:	1ac0      	subs	r0, r0, r3
   2615a:	4152      	adcs	r2, r2
   2615c:	0a83      	lsrs	r3, r0, #10
   2615e:	428b      	cmp	r3, r1
   26160:	d301      	bcc.n	26166 <__udivsi3+0x82>
   26162:	028b      	lsls	r3, r1, #10
   26164:	1ac0      	subs	r0, r0, r3
   26166:	4152      	adcs	r2, r2
   26168:	0a43      	lsrs	r3, r0, #9
   2616a:	428b      	cmp	r3, r1
   2616c:	d301      	bcc.n	26172 <__udivsi3+0x8e>
   2616e:	024b      	lsls	r3, r1, #9
   26170:	1ac0      	subs	r0, r0, r3
   26172:	4152      	adcs	r2, r2
   26174:	0a03      	lsrs	r3, r0, #8
   26176:	428b      	cmp	r3, r1
   26178:	d301      	bcc.n	2617e <__udivsi3+0x9a>
   2617a:	020b      	lsls	r3, r1, #8
   2617c:	1ac0      	subs	r0, r0, r3
   2617e:	4152      	adcs	r2, r2
   26180:	d2cd      	bcs.n	2611e <__udivsi3+0x3a>
   26182:	09c3      	lsrs	r3, r0, #7
   26184:	428b      	cmp	r3, r1
   26186:	d301      	bcc.n	2618c <__udivsi3+0xa8>
   26188:	01cb      	lsls	r3, r1, #7
   2618a:	1ac0      	subs	r0, r0, r3
   2618c:	4152      	adcs	r2, r2
   2618e:	0983      	lsrs	r3, r0, #6
   26190:	428b      	cmp	r3, r1
   26192:	d301      	bcc.n	26198 <__udivsi3+0xb4>
   26194:	018b      	lsls	r3, r1, #6
   26196:	1ac0      	subs	r0, r0, r3
   26198:	4152      	adcs	r2, r2
   2619a:	0943      	lsrs	r3, r0, #5
   2619c:	428b      	cmp	r3, r1
   2619e:	d301      	bcc.n	261a4 <__udivsi3+0xc0>
   261a0:	014b      	lsls	r3, r1, #5
   261a2:	1ac0      	subs	r0, r0, r3
   261a4:	4152      	adcs	r2, r2
   261a6:	0903      	lsrs	r3, r0, #4
   261a8:	428b      	cmp	r3, r1
   261aa:	d301      	bcc.n	261b0 <__udivsi3+0xcc>
   261ac:	010b      	lsls	r3, r1, #4
   261ae:	1ac0      	subs	r0, r0, r3
   261b0:	4152      	adcs	r2, r2
   261b2:	08c3      	lsrs	r3, r0, #3
   261b4:	428b      	cmp	r3, r1
   261b6:	d301      	bcc.n	261bc <__udivsi3+0xd8>
   261b8:	00cb      	lsls	r3, r1, #3
   261ba:	1ac0      	subs	r0, r0, r3
   261bc:	4152      	adcs	r2, r2
   261be:	0883      	lsrs	r3, r0, #2
   261c0:	428b      	cmp	r3, r1
   261c2:	d301      	bcc.n	261c8 <__udivsi3+0xe4>
   261c4:	008b      	lsls	r3, r1, #2
   261c6:	1ac0      	subs	r0, r0, r3
   261c8:	4152      	adcs	r2, r2
   261ca:	0843      	lsrs	r3, r0, #1
   261cc:	428b      	cmp	r3, r1
   261ce:	d301      	bcc.n	261d4 <__udivsi3+0xf0>
   261d0:	004b      	lsls	r3, r1, #1
   261d2:	1ac0      	subs	r0, r0, r3
   261d4:	4152      	adcs	r2, r2
   261d6:	1a41      	subs	r1, r0, r1
   261d8:	d200      	bcs.n	261dc <__udivsi3+0xf8>
   261da:	4601      	mov	r1, r0
   261dc:	4152      	adcs	r2, r2
   261de:	4610      	mov	r0, r2
   261e0:	4770      	bx	lr
   261e2:	e7ff      	b.n	261e4 <__udivsi3+0x100>
   261e4:	b501      	push	{r0, lr}
   261e6:	2000      	movs	r0, #0
   261e8:	f000 f8f0 	bl	263cc <__aeabi_idiv0>
   261ec:	bd02      	pop	{r1, pc}
   261ee:	46c0      	nop			; (mov r8, r8)

000261f0 <__aeabi_uidivmod>:
   261f0:	2900      	cmp	r1, #0
   261f2:	d0f7      	beq.n	261e4 <__udivsi3+0x100>
   261f4:	e776      	b.n	260e4 <__udivsi3>
   261f6:	4770      	bx	lr

000261f8 <__divsi3>:
   261f8:	4603      	mov	r3, r0
   261fa:	430b      	orrs	r3, r1
   261fc:	d47f      	bmi.n	262fe <__divsi3+0x106>
   261fe:	2200      	movs	r2, #0
   26200:	0843      	lsrs	r3, r0, #1
   26202:	428b      	cmp	r3, r1
   26204:	d374      	bcc.n	262f0 <__divsi3+0xf8>
   26206:	0903      	lsrs	r3, r0, #4
   26208:	428b      	cmp	r3, r1
   2620a:	d35f      	bcc.n	262cc <__divsi3+0xd4>
   2620c:	0a03      	lsrs	r3, r0, #8
   2620e:	428b      	cmp	r3, r1
   26210:	d344      	bcc.n	2629c <__divsi3+0xa4>
   26212:	0b03      	lsrs	r3, r0, #12
   26214:	428b      	cmp	r3, r1
   26216:	d328      	bcc.n	2626a <__divsi3+0x72>
   26218:	0c03      	lsrs	r3, r0, #16
   2621a:	428b      	cmp	r3, r1
   2621c:	d30d      	bcc.n	2623a <__divsi3+0x42>
   2621e:	22ff      	movs	r2, #255	; 0xff
   26220:	0209      	lsls	r1, r1, #8
   26222:	ba12      	rev	r2, r2
   26224:	0c03      	lsrs	r3, r0, #16
   26226:	428b      	cmp	r3, r1
   26228:	d302      	bcc.n	26230 <__divsi3+0x38>
   2622a:	1212      	asrs	r2, r2, #8
   2622c:	0209      	lsls	r1, r1, #8
   2622e:	d065      	beq.n	262fc <__divsi3+0x104>
   26230:	0b03      	lsrs	r3, r0, #12
   26232:	428b      	cmp	r3, r1
   26234:	d319      	bcc.n	2626a <__divsi3+0x72>
   26236:	e000      	b.n	2623a <__divsi3+0x42>
   26238:	0a09      	lsrs	r1, r1, #8
   2623a:	0bc3      	lsrs	r3, r0, #15
   2623c:	428b      	cmp	r3, r1
   2623e:	d301      	bcc.n	26244 <__divsi3+0x4c>
   26240:	03cb      	lsls	r3, r1, #15
   26242:	1ac0      	subs	r0, r0, r3
   26244:	4152      	adcs	r2, r2
   26246:	0b83      	lsrs	r3, r0, #14
   26248:	428b      	cmp	r3, r1
   2624a:	d301      	bcc.n	26250 <__divsi3+0x58>
   2624c:	038b      	lsls	r3, r1, #14
   2624e:	1ac0      	subs	r0, r0, r3
   26250:	4152      	adcs	r2, r2
   26252:	0b43      	lsrs	r3, r0, #13
   26254:	428b      	cmp	r3, r1
   26256:	d301      	bcc.n	2625c <__divsi3+0x64>
   26258:	034b      	lsls	r3, r1, #13
   2625a:	1ac0      	subs	r0, r0, r3
   2625c:	4152      	adcs	r2, r2
   2625e:	0b03      	lsrs	r3, r0, #12
   26260:	428b      	cmp	r3, r1
   26262:	d301      	bcc.n	26268 <__divsi3+0x70>
   26264:	030b      	lsls	r3, r1, #12
   26266:	1ac0      	subs	r0, r0, r3
   26268:	4152      	adcs	r2, r2
   2626a:	0ac3      	lsrs	r3, r0, #11
   2626c:	428b      	cmp	r3, r1
   2626e:	d301      	bcc.n	26274 <__divsi3+0x7c>
   26270:	02cb      	lsls	r3, r1, #11
   26272:	1ac0      	subs	r0, r0, r3
   26274:	4152      	adcs	r2, r2
   26276:	0a83      	lsrs	r3, r0, #10
   26278:	428b      	cmp	r3, r1
   2627a:	d301      	bcc.n	26280 <__divsi3+0x88>
   2627c:	028b      	lsls	r3, r1, #10
   2627e:	1ac0      	subs	r0, r0, r3
   26280:	4152      	adcs	r2, r2
   26282:	0a43      	lsrs	r3, r0, #9
   26284:	428b      	cmp	r3, r1
   26286:	d301      	bcc.n	2628c <__divsi3+0x94>
   26288:	024b      	lsls	r3, r1, #9
   2628a:	1ac0      	subs	r0, r0, r3
   2628c:	4152      	adcs	r2, r2
   2628e:	0a03      	lsrs	r3, r0, #8
   26290:	428b      	cmp	r3, r1
   26292:	d301      	bcc.n	26298 <__divsi3+0xa0>
   26294:	020b      	lsls	r3, r1, #8
   26296:	1ac0      	subs	r0, r0, r3
   26298:	4152      	adcs	r2, r2
   2629a:	d2cd      	bcs.n	26238 <__divsi3+0x40>
   2629c:	09c3      	lsrs	r3, r0, #7
   2629e:	428b      	cmp	r3, r1
   262a0:	d301      	bcc.n	262a6 <__divsi3+0xae>
   262a2:	01cb      	lsls	r3, r1, #7
   262a4:	1ac0      	subs	r0, r0, r3
   262a6:	4152      	adcs	r2, r2
   262a8:	0983      	lsrs	r3, r0, #6
   262aa:	428b      	cmp	r3, r1
   262ac:	d301      	bcc.n	262b2 <__divsi3+0xba>
   262ae:	018b      	lsls	r3, r1, #6
   262b0:	1ac0      	subs	r0, r0, r3
   262b2:	4152      	adcs	r2, r2
   262b4:	0943      	lsrs	r3, r0, #5
   262b6:	428b      	cmp	r3, r1
   262b8:	d301      	bcc.n	262be <__divsi3+0xc6>
   262ba:	014b      	lsls	r3, r1, #5
   262bc:	1ac0      	subs	r0, r0, r3
   262be:	4152      	adcs	r2, r2
   262c0:	0903      	lsrs	r3, r0, #4
   262c2:	428b      	cmp	r3, r1
   262c4:	d301      	bcc.n	262ca <__divsi3+0xd2>
   262c6:	010b      	lsls	r3, r1, #4
   262c8:	1ac0      	subs	r0, r0, r3
   262ca:	4152      	adcs	r2, r2
   262cc:	08c3      	lsrs	r3, r0, #3
   262ce:	428b      	cmp	r3, r1
   262d0:	d301      	bcc.n	262d6 <__divsi3+0xde>
   262d2:	00cb      	lsls	r3, r1, #3
   262d4:	1ac0      	subs	r0, r0, r3
   262d6:	4152      	adcs	r2, r2
   262d8:	0883      	lsrs	r3, r0, #2
   262da:	428b      	cmp	r3, r1
   262dc:	d301      	bcc.n	262e2 <__divsi3+0xea>
   262de:	008b      	lsls	r3, r1, #2
   262e0:	1ac0      	subs	r0, r0, r3
   262e2:	4152      	adcs	r2, r2
   262e4:	0843      	lsrs	r3, r0, #1
   262e6:	428b      	cmp	r3, r1
   262e8:	d301      	bcc.n	262ee <__divsi3+0xf6>
   262ea:	004b      	lsls	r3, r1, #1
   262ec:	1ac0      	subs	r0, r0, r3
   262ee:	4152      	adcs	r2, r2
   262f0:	1a41      	subs	r1, r0, r1
   262f2:	d200      	bcs.n	262f6 <__divsi3+0xfe>
   262f4:	4601      	mov	r1, r0
   262f6:	4152      	adcs	r2, r2
   262f8:	4610      	mov	r0, r2
   262fa:	4770      	bx	lr
   262fc:	e05d      	b.n	263ba <__divsi3+0x1c2>
   262fe:	0fca      	lsrs	r2, r1, #31
   26300:	d000      	beq.n	26304 <__divsi3+0x10c>
   26302:	4249      	negs	r1, r1
   26304:	1003      	asrs	r3, r0, #32
   26306:	d300      	bcc.n	2630a <__divsi3+0x112>
   26308:	4240      	negs	r0, r0
   2630a:	4053      	eors	r3, r2
   2630c:	2200      	movs	r2, #0
   2630e:	469c      	mov	ip, r3
   26310:	0903      	lsrs	r3, r0, #4
   26312:	428b      	cmp	r3, r1
   26314:	d32d      	bcc.n	26372 <__divsi3+0x17a>
   26316:	0a03      	lsrs	r3, r0, #8
   26318:	428b      	cmp	r3, r1
   2631a:	d312      	bcc.n	26342 <__divsi3+0x14a>
   2631c:	22fc      	movs	r2, #252	; 0xfc
   2631e:	0189      	lsls	r1, r1, #6
   26320:	ba12      	rev	r2, r2
   26322:	0a03      	lsrs	r3, r0, #8
   26324:	428b      	cmp	r3, r1
   26326:	d30c      	bcc.n	26342 <__divsi3+0x14a>
   26328:	0189      	lsls	r1, r1, #6
   2632a:	1192      	asrs	r2, r2, #6
   2632c:	428b      	cmp	r3, r1
   2632e:	d308      	bcc.n	26342 <__divsi3+0x14a>
   26330:	0189      	lsls	r1, r1, #6
   26332:	1192      	asrs	r2, r2, #6
   26334:	428b      	cmp	r3, r1
   26336:	d304      	bcc.n	26342 <__divsi3+0x14a>
   26338:	0189      	lsls	r1, r1, #6
   2633a:	d03a      	beq.n	263b2 <__divsi3+0x1ba>
   2633c:	1192      	asrs	r2, r2, #6
   2633e:	e000      	b.n	26342 <__divsi3+0x14a>
   26340:	0989      	lsrs	r1, r1, #6
   26342:	09c3      	lsrs	r3, r0, #7
   26344:	428b      	cmp	r3, r1
   26346:	d301      	bcc.n	2634c <__divsi3+0x154>
   26348:	01cb      	lsls	r3, r1, #7
   2634a:	1ac0      	subs	r0, r0, r3
   2634c:	4152      	adcs	r2, r2
   2634e:	0983      	lsrs	r3, r0, #6
   26350:	428b      	cmp	r3, r1
   26352:	d301      	bcc.n	26358 <__divsi3+0x160>
   26354:	018b      	lsls	r3, r1, #6
   26356:	1ac0      	subs	r0, r0, r3
   26358:	4152      	adcs	r2, r2
   2635a:	0943      	lsrs	r3, r0, #5
   2635c:	428b      	cmp	r3, r1
   2635e:	d301      	bcc.n	26364 <__divsi3+0x16c>
   26360:	014b      	lsls	r3, r1, #5
   26362:	1ac0      	subs	r0, r0, r3
   26364:	4152      	adcs	r2, r2
   26366:	0903      	lsrs	r3, r0, #4
   26368:	428b      	cmp	r3, r1
   2636a:	d301      	bcc.n	26370 <__divsi3+0x178>
   2636c:	010b      	lsls	r3, r1, #4
   2636e:	1ac0      	subs	r0, r0, r3
   26370:	4152      	adcs	r2, r2
   26372:	08c3      	lsrs	r3, r0, #3
   26374:	428b      	cmp	r3, r1
   26376:	d301      	bcc.n	2637c <__divsi3+0x184>
   26378:	00cb      	lsls	r3, r1, #3
   2637a:	1ac0      	subs	r0, r0, r3
   2637c:	4152      	adcs	r2, r2
   2637e:	0883      	lsrs	r3, r0, #2
   26380:	428b      	cmp	r3, r1
   26382:	d301      	bcc.n	26388 <__divsi3+0x190>
   26384:	008b      	lsls	r3, r1, #2
   26386:	1ac0      	subs	r0, r0, r3
   26388:	4152      	adcs	r2, r2
   2638a:	d2d9      	bcs.n	26340 <__divsi3+0x148>
   2638c:	0843      	lsrs	r3, r0, #1
   2638e:	428b      	cmp	r3, r1
   26390:	d301      	bcc.n	26396 <__divsi3+0x19e>
   26392:	004b      	lsls	r3, r1, #1
   26394:	1ac0      	subs	r0, r0, r3
   26396:	4152      	adcs	r2, r2
   26398:	1a41      	subs	r1, r0, r1
   2639a:	d200      	bcs.n	2639e <__divsi3+0x1a6>
   2639c:	4601      	mov	r1, r0
   2639e:	4663      	mov	r3, ip
   263a0:	4152      	adcs	r2, r2
   263a2:	105b      	asrs	r3, r3, #1
   263a4:	4610      	mov	r0, r2
   263a6:	d301      	bcc.n	263ac <__divsi3+0x1b4>
   263a8:	4240      	negs	r0, r0
   263aa:	2b00      	cmp	r3, #0
   263ac:	d500      	bpl.n	263b0 <__divsi3+0x1b8>
   263ae:	4249      	negs	r1, r1
   263b0:	4770      	bx	lr
   263b2:	4663      	mov	r3, ip
   263b4:	105b      	asrs	r3, r3, #1
   263b6:	d300      	bcc.n	263ba <__divsi3+0x1c2>
   263b8:	4240      	negs	r0, r0
   263ba:	b501      	push	{r0, lr}
   263bc:	2000      	movs	r0, #0
   263be:	f000 f805 	bl	263cc <__aeabi_idiv0>
   263c2:	bd02      	pop	{r1, pc}

000263c4 <__aeabi_idivmod>:
   263c4:	2900      	cmp	r1, #0
   263c6:	d0f8      	beq.n	263ba <__divsi3+0x1c2>
   263c8:	e716      	b.n	261f8 <__divsi3>
   263ca:	4770      	bx	lr

000263cc <__aeabi_idiv0>:
   263cc:	4770      	bx	lr
   263ce:	46c0      	nop			; (mov r8, r8)

000263d0 <__aeabi_cdrcmple>:
   263d0:	4684      	mov	ip, r0
   263d2:	1c10      	adds	r0, r2, #0
   263d4:	4662      	mov	r2, ip
   263d6:	468c      	mov	ip, r1
   263d8:	1c19      	adds	r1, r3, #0
   263da:	4663      	mov	r3, ip
   263dc:	e000      	b.n	263e0 <__aeabi_cdcmpeq>
   263de:	46c0      	nop			; (mov r8, r8)

000263e0 <__aeabi_cdcmpeq>:
   263e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   263e2:	f001 fb3b 	bl	27a5c <__ledf2>
   263e6:	2800      	cmp	r0, #0
   263e8:	d401      	bmi.n	263ee <__aeabi_cdcmpeq+0xe>
   263ea:	2100      	movs	r1, #0
   263ec:	42c8      	cmn	r0, r1
   263ee:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

000263f0 <__aeabi_dcmpeq>:
   263f0:	b510      	push	{r4, lr}
   263f2:	f001 fa95 	bl	27920 <__eqdf2>
   263f6:	4240      	negs	r0, r0
   263f8:	3001      	adds	r0, #1
   263fa:	bd10      	pop	{r4, pc}

000263fc <__aeabi_dcmplt>:
   263fc:	b510      	push	{r4, lr}
   263fe:	f001 fb2d 	bl	27a5c <__ledf2>
   26402:	2800      	cmp	r0, #0
   26404:	db01      	blt.n	2640a <__aeabi_dcmplt+0xe>
   26406:	2000      	movs	r0, #0
   26408:	bd10      	pop	{r4, pc}
   2640a:	2001      	movs	r0, #1
   2640c:	bd10      	pop	{r4, pc}
   2640e:	46c0      	nop			; (mov r8, r8)

00026410 <__aeabi_dcmple>:
   26410:	b510      	push	{r4, lr}
   26412:	f001 fb23 	bl	27a5c <__ledf2>
   26416:	2800      	cmp	r0, #0
   26418:	dd01      	ble.n	2641e <__aeabi_dcmple+0xe>
   2641a:	2000      	movs	r0, #0
   2641c:	bd10      	pop	{r4, pc}
   2641e:	2001      	movs	r0, #1
   26420:	bd10      	pop	{r4, pc}
   26422:	46c0      	nop			; (mov r8, r8)

00026424 <__aeabi_dcmpgt>:
   26424:	b510      	push	{r4, lr}
   26426:	f001 fab5 	bl	27994 <__gedf2>
   2642a:	2800      	cmp	r0, #0
   2642c:	dc01      	bgt.n	26432 <__aeabi_dcmpgt+0xe>
   2642e:	2000      	movs	r0, #0
   26430:	bd10      	pop	{r4, pc}
   26432:	2001      	movs	r0, #1
   26434:	bd10      	pop	{r4, pc}
   26436:	46c0      	nop			; (mov r8, r8)

00026438 <__aeabi_dcmpge>:
   26438:	b510      	push	{r4, lr}
   2643a:	f001 faab 	bl	27994 <__gedf2>
   2643e:	2800      	cmp	r0, #0
   26440:	da01      	bge.n	26446 <__aeabi_dcmpge+0xe>
   26442:	2000      	movs	r0, #0
   26444:	bd10      	pop	{r4, pc}
   26446:	2001      	movs	r0, #1
   26448:	bd10      	pop	{r4, pc}
   2644a:	46c0      	nop			; (mov r8, r8)

0002644c <__aeabi_uldivmod>:
   2644c:	2b00      	cmp	r3, #0
   2644e:	d111      	bne.n	26474 <__aeabi_uldivmod+0x28>
   26450:	2a00      	cmp	r2, #0
   26452:	d10f      	bne.n	26474 <__aeabi_uldivmod+0x28>
   26454:	2900      	cmp	r1, #0
   26456:	d100      	bne.n	2645a <__aeabi_uldivmod+0xe>
   26458:	2800      	cmp	r0, #0
   2645a:	d002      	beq.n	26462 <__aeabi_uldivmod+0x16>
   2645c:	2100      	movs	r1, #0
   2645e:	43c9      	mvns	r1, r1
   26460:	1c08      	adds	r0, r1, #0
   26462:	b407      	push	{r0, r1, r2}
   26464:	4802      	ldr	r0, [pc, #8]	; (26470 <__aeabi_uldivmod+0x24>)
   26466:	a102      	add	r1, pc, #8	; (adr r1, 26470 <__aeabi_uldivmod+0x24>)
   26468:	1840      	adds	r0, r0, r1
   2646a:	9002      	str	r0, [sp, #8]
   2646c:	bd03      	pop	{r0, r1, pc}
   2646e:	46c0      	nop			; (mov r8, r8)
   26470:	ffffff5d 	.word	0xffffff5d
   26474:	b403      	push	{r0, r1}
   26476:	4668      	mov	r0, sp
   26478:	b501      	push	{r0, lr}
   2647a:	9802      	ldr	r0, [sp, #8]
   2647c:	f000 f84e 	bl	2651c <__udivmoddi4>
   26480:	9b01      	ldr	r3, [sp, #4]
   26482:	469e      	mov	lr, r3
   26484:	b002      	add	sp, #8
   26486:	bc0c      	pop	{r2, r3}
   26488:	4770      	bx	lr
   2648a:	46c0      	nop			; (mov r8, r8)

0002648c <__aeabi_lmul>:
   2648c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2648e:	46ce      	mov	lr, r9
   26490:	4647      	mov	r7, r8
   26492:	0415      	lsls	r5, r2, #16
   26494:	0c2d      	lsrs	r5, r5, #16
   26496:	002e      	movs	r6, r5
   26498:	b580      	push	{r7, lr}
   2649a:	0407      	lsls	r7, r0, #16
   2649c:	0c14      	lsrs	r4, r2, #16
   2649e:	0c3f      	lsrs	r7, r7, #16
   264a0:	4699      	mov	r9, r3
   264a2:	0c03      	lsrs	r3, r0, #16
   264a4:	437e      	muls	r6, r7
   264a6:	435d      	muls	r5, r3
   264a8:	4367      	muls	r7, r4
   264aa:	4363      	muls	r3, r4
   264ac:	197f      	adds	r7, r7, r5
   264ae:	0c34      	lsrs	r4, r6, #16
   264b0:	19e4      	adds	r4, r4, r7
   264b2:	469c      	mov	ip, r3
   264b4:	42a5      	cmp	r5, r4
   264b6:	d903      	bls.n	264c0 <__aeabi_lmul+0x34>
   264b8:	2380      	movs	r3, #128	; 0x80
   264ba:	025b      	lsls	r3, r3, #9
   264bc:	4698      	mov	r8, r3
   264be:	44c4      	add	ip, r8
   264c0:	464b      	mov	r3, r9
   264c2:	4351      	muls	r1, r2
   264c4:	4343      	muls	r3, r0
   264c6:	0436      	lsls	r6, r6, #16
   264c8:	0c36      	lsrs	r6, r6, #16
   264ca:	0c25      	lsrs	r5, r4, #16
   264cc:	0424      	lsls	r4, r4, #16
   264ce:	4465      	add	r5, ip
   264d0:	19a4      	adds	r4, r4, r6
   264d2:	1859      	adds	r1, r3, r1
   264d4:	1949      	adds	r1, r1, r5
   264d6:	0020      	movs	r0, r4
   264d8:	bc0c      	pop	{r2, r3}
   264da:	4690      	mov	r8, r2
   264dc:	4699      	mov	r9, r3
   264de:	bdf0      	pop	{r4, r5, r6, r7, pc}

000264e0 <__aeabi_d2uiz>:
   264e0:	b570      	push	{r4, r5, r6, lr}
   264e2:	2200      	movs	r2, #0
   264e4:	4b0c      	ldr	r3, [pc, #48]	; (26518 <__aeabi_d2uiz+0x38>)
   264e6:	0004      	movs	r4, r0
   264e8:	000d      	movs	r5, r1
   264ea:	f7ff ffa5 	bl	26438 <__aeabi_dcmpge>
   264ee:	2800      	cmp	r0, #0
   264f0:	d104      	bne.n	264fc <__aeabi_d2uiz+0x1c>
   264f2:	0020      	movs	r0, r4
   264f4:	0029      	movs	r1, r5
   264f6:	f002 f8c9 	bl	2868c <__aeabi_d2iz>
   264fa:	bd70      	pop	{r4, r5, r6, pc}
   264fc:	4b06      	ldr	r3, [pc, #24]	; (26518 <__aeabi_d2uiz+0x38>)
   264fe:	2200      	movs	r2, #0
   26500:	0020      	movs	r0, r4
   26502:	0029      	movs	r1, r5
   26504:	f001 fd8c 	bl	28020 <__aeabi_dsub>
   26508:	f002 f8c0 	bl	2868c <__aeabi_d2iz>
   2650c:	2380      	movs	r3, #128	; 0x80
   2650e:	061b      	lsls	r3, r3, #24
   26510:	469c      	mov	ip, r3
   26512:	4460      	add	r0, ip
   26514:	e7f1      	b.n	264fa <__aeabi_d2uiz+0x1a>
   26516:	46c0      	nop			; (mov r8, r8)
   26518:	41e00000 	.word	0x41e00000

0002651c <__udivmoddi4>:
   2651c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2651e:	4657      	mov	r7, sl
   26520:	464e      	mov	r6, r9
   26522:	4645      	mov	r5, r8
   26524:	46de      	mov	lr, fp
   26526:	b5e0      	push	{r5, r6, r7, lr}
   26528:	0004      	movs	r4, r0
   2652a:	b083      	sub	sp, #12
   2652c:	000d      	movs	r5, r1
   2652e:	4692      	mov	sl, r2
   26530:	4699      	mov	r9, r3
   26532:	428b      	cmp	r3, r1
   26534:	d82f      	bhi.n	26596 <__udivmoddi4+0x7a>
   26536:	d02c      	beq.n	26592 <__udivmoddi4+0x76>
   26538:	4649      	mov	r1, r9
   2653a:	4650      	mov	r0, sl
   2653c:	f002 f9c4 	bl	288c8 <__clzdi2>
   26540:	0029      	movs	r1, r5
   26542:	0006      	movs	r6, r0
   26544:	0020      	movs	r0, r4
   26546:	f002 f9bf 	bl	288c8 <__clzdi2>
   2654a:	1a33      	subs	r3, r6, r0
   2654c:	4698      	mov	r8, r3
   2654e:	3b20      	subs	r3, #32
   26550:	469b      	mov	fp, r3
   26552:	d500      	bpl.n	26556 <__udivmoddi4+0x3a>
   26554:	e074      	b.n	26640 <__udivmoddi4+0x124>
   26556:	4653      	mov	r3, sl
   26558:	465a      	mov	r2, fp
   2655a:	4093      	lsls	r3, r2
   2655c:	001f      	movs	r7, r3
   2655e:	4653      	mov	r3, sl
   26560:	4642      	mov	r2, r8
   26562:	4093      	lsls	r3, r2
   26564:	001e      	movs	r6, r3
   26566:	42af      	cmp	r7, r5
   26568:	d829      	bhi.n	265be <__udivmoddi4+0xa2>
   2656a:	d026      	beq.n	265ba <__udivmoddi4+0x9e>
   2656c:	465b      	mov	r3, fp
   2656e:	1ba4      	subs	r4, r4, r6
   26570:	41bd      	sbcs	r5, r7
   26572:	2b00      	cmp	r3, #0
   26574:	da00      	bge.n	26578 <__udivmoddi4+0x5c>
   26576:	e079      	b.n	2666c <__udivmoddi4+0x150>
   26578:	2200      	movs	r2, #0
   2657a:	2300      	movs	r3, #0
   2657c:	9200      	str	r2, [sp, #0]
   2657e:	9301      	str	r3, [sp, #4]
   26580:	2301      	movs	r3, #1
   26582:	465a      	mov	r2, fp
   26584:	4093      	lsls	r3, r2
   26586:	9301      	str	r3, [sp, #4]
   26588:	2301      	movs	r3, #1
   2658a:	4642      	mov	r2, r8
   2658c:	4093      	lsls	r3, r2
   2658e:	9300      	str	r3, [sp, #0]
   26590:	e019      	b.n	265c6 <__udivmoddi4+0xaa>
   26592:	4282      	cmp	r2, r0
   26594:	d9d0      	bls.n	26538 <__udivmoddi4+0x1c>
   26596:	2200      	movs	r2, #0
   26598:	2300      	movs	r3, #0
   2659a:	9200      	str	r2, [sp, #0]
   2659c:	9301      	str	r3, [sp, #4]
   2659e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   265a0:	2b00      	cmp	r3, #0
   265a2:	d001      	beq.n	265a8 <__udivmoddi4+0x8c>
   265a4:	601c      	str	r4, [r3, #0]
   265a6:	605d      	str	r5, [r3, #4]
   265a8:	9800      	ldr	r0, [sp, #0]
   265aa:	9901      	ldr	r1, [sp, #4]
   265ac:	b003      	add	sp, #12
   265ae:	bc3c      	pop	{r2, r3, r4, r5}
   265b0:	4690      	mov	r8, r2
   265b2:	4699      	mov	r9, r3
   265b4:	46a2      	mov	sl, r4
   265b6:	46ab      	mov	fp, r5
   265b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   265ba:	42a3      	cmp	r3, r4
   265bc:	d9d6      	bls.n	2656c <__udivmoddi4+0x50>
   265be:	2200      	movs	r2, #0
   265c0:	2300      	movs	r3, #0
   265c2:	9200      	str	r2, [sp, #0]
   265c4:	9301      	str	r3, [sp, #4]
   265c6:	4643      	mov	r3, r8
   265c8:	2b00      	cmp	r3, #0
   265ca:	d0e8      	beq.n	2659e <__udivmoddi4+0x82>
   265cc:	07fb      	lsls	r3, r7, #31
   265ce:	0872      	lsrs	r2, r6, #1
   265d0:	431a      	orrs	r2, r3
   265d2:	4646      	mov	r6, r8
   265d4:	087b      	lsrs	r3, r7, #1
   265d6:	e00e      	b.n	265f6 <__udivmoddi4+0xda>
   265d8:	42ab      	cmp	r3, r5
   265da:	d101      	bne.n	265e0 <__udivmoddi4+0xc4>
   265dc:	42a2      	cmp	r2, r4
   265de:	d80c      	bhi.n	265fa <__udivmoddi4+0xde>
   265e0:	1aa4      	subs	r4, r4, r2
   265e2:	419d      	sbcs	r5, r3
   265e4:	2001      	movs	r0, #1
   265e6:	1924      	adds	r4, r4, r4
   265e8:	416d      	adcs	r5, r5
   265ea:	2100      	movs	r1, #0
   265ec:	3e01      	subs	r6, #1
   265ee:	1824      	adds	r4, r4, r0
   265f0:	414d      	adcs	r5, r1
   265f2:	2e00      	cmp	r6, #0
   265f4:	d006      	beq.n	26604 <__udivmoddi4+0xe8>
   265f6:	42ab      	cmp	r3, r5
   265f8:	d9ee      	bls.n	265d8 <__udivmoddi4+0xbc>
   265fa:	3e01      	subs	r6, #1
   265fc:	1924      	adds	r4, r4, r4
   265fe:	416d      	adcs	r5, r5
   26600:	2e00      	cmp	r6, #0
   26602:	d1f8      	bne.n	265f6 <__udivmoddi4+0xda>
   26604:	465b      	mov	r3, fp
   26606:	9800      	ldr	r0, [sp, #0]
   26608:	9901      	ldr	r1, [sp, #4]
   2660a:	1900      	adds	r0, r0, r4
   2660c:	4169      	adcs	r1, r5
   2660e:	2b00      	cmp	r3, #0
   26610:	db22      	blt.n	26658 <__udivmoddi4+0x13c>
   26612:	002b      	movs	r3, r5
   26614:	465a      	mov	r2, fp
   26616:	40d3      	lsrs	r3, r2
   26618:	002a      	movs	r2, r5
   2661a:	4644      	mov	r4, r8
   2661c:	40e2      	lsrs	r2, r4
   2661e:	001c      	movs	r4, r3
   26620:	465b      	mov	r3, fp
   26622:	0015      	movs	r5, r2
   26624:	2b00      	cmp	r3, #0
   26626:	db2c      	blt.n	26682 <__udivmoddi4+0x166>
   26628:	0026      	movs	r6, r4
   2662a:	409e      	lsls	r6, r3
   2662c:	0033      	movs	r3, r6
   2662e:	0026      	movs	r6, r4
   26630:	4647      	mov	r7, r8
   26632:	40be      	lsls	r6, r7
   26634:	0032      	movs	r2, r6
   26636:	1a80      	subs	r0, r0, r2
   26638:	4199      	sbcs	r1, r3
   2663a:	9000      	str	r0, [sp, #0]
   2663c:	9101      	str	r1, [sp, #4]
   2663e:	e7ae      	b.n	2659e <__udivmoddi4+0x82>
   26640:	4642      	mov	r2, r8
   26642:	2320      	movs	r3, #32
   26644:	1a9b      	subs	r3, r3, r2
   26646:	4652      	mov	r2, sl
   26648:	40da      	lsrs	r2, r3
   2664a:	4641      	mov	r1, r8
   2664c:	0013      	movs	r3, r2
   2664e:	464a      	mov	r2, r9
   26650:	408a      	lsls	r2, r1
   26652:	0017      	movs	r7, r2
   26654:	431f      	orrs	r7, r3
   26656:	e782      	b.n	2655e <__udivmoddi4+0x42>
   26658:	4642      	mov	r2, r8
   2665a:	2320      	movs	r3, #32
   2665c:	1a9b      	subs	r3, r3, r2
   2665e:	002a      	movs	r2, r5
   26660:	4646      	mov	r6, r8
   26662:	409a      	lsls	r2, r3
   26664:	0023      	movs	r3, r4
   26666:	40f3      	lsrs	r3, r6
   26668:	4313      	orrs	r3, r2
   2666a:	e7d5      	b.n	26618 <__udivmoddi4+0xfc>
   2666c:	4642      	mov	r2, r8
   2666e:	2320      	movs	r3, #32
   26670:	2100      	movs	r1, #0
   26672:	1a9b      	subs	r3, r3, r2
   26674:	2200      	movs	r2, #0
   26676:	9100      	str	r1, [sp, #0]
   26678:	9201      	str	r2, [sp, #4]
   2667a:	2201      	movs	r2, #1
   2667c:	40da      	lsrs	r2, r3
   2667e:	9201      	str	r2, [sp, #4]
   26680:	e782      	b.n	26588 <__udivmoddi4+0x6c>
   26682:	4642      	mov	r2, r8
   26684:	2320      	movs	r3, #32
   26686:	0026      	movs	r6, r4
   26688:	1a9b      	subs	r3, r3, r2
   2668a:	40de      	lsrs	r6, r3
   2668c:	002f      	movs	r7, r5
   2668e:	46b4      	mov	ip, r6
   26690:	4097      	lsls	r7, r2
   26692:	4666      	mov	r6, ip
   26694:	003b      	movs	r3, r7
   26696:	4333      	orrs	r3, r6
   26698:	e7c9      	b.n	2662e <__udivmoddi4+0x112>
   2669a:	46c0      	nop			; (mov r8, r8)

0002669c <__aeabi_fdiv>:
   2669c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2669e:	4657      	mov	r7, sl
   266a0:	464e      	mov	r6, r9
   266a2:	46de      	mov	lr, fp
   266a4:	4645      	mov	r5, r8
   266a6:	b5e0      	push	{r5, r6, r7, lr}
   266a8:	0244      	lsls	r4, r0, #9
   266aa:	0043      	lsls	r3, r0, #1
   266ac:	0fc6      	lsrs	r6, r0, #31
   266ae:	b083      	sub	sp, #12
   266b0:	1c0f      	adds	r7, r1, #0
   266b2:	0a64      	lsrs	r4, r4, #9
   266b4:	0e1b      	lsrs	r3, r3, #24
   266b6:	46b2      	mov	sl, r6
   266b8:	d053      	beq.n	26762 <__aeabi_fdiv+0xc6>
   266ba:	2bff      	cmp	r3, #255	; 0xff
   266bc:	d027      	beq.n	2670e <__aeabi_fdiv+0x72>
   266be:	2280      	movs	r2, #128	; 0x80
   266c0:	00e4      	lsls	r4, r4, #3
   266c2:	04d2      	lsls	r2, r2, #19
   266c4:	4314      	orrs	r4, r2
   266c6:	227f      	movs	r2, #127	; 0x7f
   266c8:	4252      	negs	r2, r2
   266ca:	4690      	mov	r8, r2
   266cc:	4498      	add	r8, r3
   266ce:	2300      	movs	r3, #0
   266d0:	4699      	mov	r9, r3
   266d2:	469b      	mov	fp, r3
   266d4:	027d      	lsls	r5, r7, #9
   266d6:	0078      	lsls	r0, r7, #1
   266d8:	0ffb      	lsrs	r3, r7, #31
   266da:	0a6d      	lsrs	r5, r5, #9
   266dc:	0e00      	lsrs	r0, r0, #24
   266de:	9300      	str	r3, [sp, #0]
   266e0:	d024      	beq.n	2672c <__aeabi_fdiv+0x90>
   266e2:	28ff      	cmp	r0, #255	; 0xff
   266e4:	d046      	beq.n	26774 <__aeabi_fdiv+0xd8>
   266e6:	2380      	movs	r3, #128	; 0x80
   266e8:	2100      	movs	r1, #0
   266ea:	00ed      	lsls	r5, r5, #3
   266ec:	04db      	lsls	r3, r3, #19
   266ee:	431d      	orrs	r5, r3
   266f0:	387f      	subs	r0, #127	; 0x7f
   266f2:	4647      	mov	r7, r8
   266f4:	1a38      	subs	r0, r7, r0
   266f6:	464f      	mov	r7, r9
   266f8:	430f      	orrs	r7, r1
   266fa:	00bf      	lsls	r7, r7, #2
   266fc:	46b9      	mov	r9, r7
   266fe:	0033      	movs	r3, r6
   26700:	9a00      	ldr	r2, [sp, #0]
   26702:	4f87      	ldr	r7, [pc, #540]	; (26920 <__aeabi_fdiv+0x284>)
   26704:	4053      	eors	r3, r2
   26706:	464a      	mov	r2, r9
   26708:	58ba      	ldr	r2, [r7, r2]
   2670a:	9301      	str	r3, [sp, #4]
   2670c:	4697      	mov	pc, r2
   2670e:	2c00      	cmp	r4, #0
   26710:	d14e      	bne.n	267b0 <__aeabi_fdiv+0x114>
   26712:	2308      	movs	r3, #8
   26714:	4699      	mov	r9, r3
   26716:	33f7      	adds	r3, #247	; 0xf7
   26718:	4698      	mov	r8, r3
   2671a:	3bfd      	subs	r3, #253	; 0xfd
   2671c:	469b      	mov	fp, r3
   2671e:	027d      	lsls	r5, r7, #9
   26720:	0078      	lsls	r0, r7, #1
   26722:	0ffb      	lsrs	r3, r7, #31
   26724:	0a6d      	lsrs	r5, r5, #9
   26726:	0e00      	lsrs	r0, r0, #24
   26728:	9300      	str	r3, [sp, #0]
   2672a:	d1da      	bne.n	266e2 <__aeabi_fdiv+0x46>
   2672c:	2d00      	cmp	r5, #0
   2672e:	d126      	bne.n	2677e <__aeabi_fdiv+0xe2>
   26730:	2000      	movs	r0, #0
   26732:	2101      	movs	r1, #1
   26734:	0033      	movs	r3, r6
   26736:	9a00      	ldr	r2, [sp, #0]
   26738:	4f7a      	ldr	r7, [pc, #488]	; (26924 <__aeabi_fdiv+0x288>)
   2673a:	4053      	eors	r3, r2
   2673c:	4642      	mov	r2, r8
   2673e:	1a10      	subs	r0, r2, r0
   26740:	464a      	mov	r2, r9
   26742:	430a      	orrs	r2, r1
   26744:	0092      	lsls	r2, r2, #2
   26746:	58ba      	ldr	r2, [r7, r2]
   26748:	001d      	movs	r5, r3
   2674a:	4697      	mov	pc, r2
   2674c:	9b00      	ldr	r3, [sp, #0]
   2674e:	002c      	movs	r4, r5
   26750:	469a      	mov	sl, r3
   26752:	468b      	mov	fp, r1
   26754:	465b      	mov	r3, fp
   26756:	2b02      	cmp	r3, #2
   26758:	d131      	bne.n	267be <__aeabi_fdiv+0x122>
   2675a:	4653      	mov	r3, sl
   2675c:	21ff      	movs	r1, #255	; 0xff
   2675e:	2400      	movs	r4, #0
   26760:	e038      	b.n	267d4 <__aeabi_fdiv+0x138>
   26762:	2c00      	cmp	r4, #0
   26764:	d117      	bne.n	26796 <__aeabi_fdiv+0xfa>
   26766:	2304      	movs	r3, #4
   26768:	4699      	mov	r9, r3
   2676a:	2300      	movs	r3, #0
   2676c:	4698      	mov	r8, r3
   2676e:	3301      	adds	r3, #1
   26770:	469b      	mov	fp, r3
   26772:	e7af      	b.n	266d4 <__aeabi_fdiv+0x38>
   26774:	20ff      	movs	r0, #255	; 0xff
   26776:	2d00      	cmp	r5, #0
   26778:	d10b      	bne.n	26792 <__aeabi_fdiv+0xf6>
   2677a:	2102      	movs	r1, #2
   2677c:	e7da      	b.n	26734 <__aeabi_fdiv+0x98>
   2677e:	0028      	movs	r0, r5
   26780:	f002 f884 	bl	2888c <__clzsi2>
   26784:	1f43      	subs	r3, r0, #5
   26786:	409d      	lsls	r5, r3
   26788:	2376      	movs	r3, #118	; 0x76
   2678a:	425b      	negs	r3, r3
   2678c:	1a18      	subs	r0, r3, r0
   2678e:	2100      	movs	r1, #0
   26790:	e7af      	b.n	266f2 <__aeabi_fdiv+0x56>
   26792:	2103      	movs	r1, #3
   26794:	e7ad      	b.n	266f2 <__aeabi_fdiv+0x56>
   26796:	0020      	movs	r0, r4
   26798:	f002 f878 	bl	2888c <__clzsi2>
   2679c:	1f43      	subs	r3, r0, #5
   2679e:	409c      	lsls	r4, r3
   267a0:	2376      	movs	r3, #118	; 0x76
   267a2:	425b      	negs	r3, r3
   267a4:	1a1b      	subs	r3, r3, r0
   267a6:	4698      	mov	r8, r3
   267a8:	2300      	movs	r3, #0
   267aa:	4699      	mov	r9, r3
   267ac:	469b      	mov	fp, r3
   267ae:	e791      	b.n	266d4 <__aeabi_fdiv+0x38>
   267b0:	230c      	movs	r3, #12
   267b2:	4699      	mov	r9, r3
   267b4:	33f3      	adds	r3, #243	; 0xf3
   267b6:	4698      	mov	r8, r3
   267b8:	3bfc      	subs	r3, #252	; 0xfc
   267ba:	469b      	mov	fp, r3
   267bc:	e78a      	b.n	266d4 <__aeabi_fdiv+0x38>
   267be:	2b03      	cmp	r3, #3
   267c0:	d100      	bne.n	267c4 <__aeabi_fdiv+0x128>
   267c2:	e0a5      	b.n	26910 <__aeabi_fdiv+0x274>
   267c4:	4655      	mov	r5, sl
   267c6:	2b01      	cmp	r3, #1
   267c8:	d000      	beq.n	267cc <__aeabi_fdiv+0x130>
   267ca:	e081      	b.n	268d0 <__aeabi_fdiv+0x234>
   267cc:	2301      	movs	r3, #1
   267ce:	2100      	movs	r1, #0
   267d0:	2400      	movs	r4, #0
   267d2:	402b      	ands	r3, r5
   267d4:	0264      	lsls	r4, r4, #9
   267d6:	05c9      	lsls	r1, r1, #23
   267d8:	0a60      	lsrs	r0, r4, #9
   267da:	07db      	lsls	r3, r3, #31
   267dc:	4308      	orrs	r0, r1
   267de:	4318      	orrs	r0, r3
   267e0:	b003      	add	sp, #12
   267e2:	bc3c      	pop	{r2, r3, r4, r5}
   267e4:	4690      	mov	r8, r2
   267e6:	4699      	mov	r9, r3
   267e8:	46a2      	mov	sl, r4
   267ea:	46ab      	mov	fp, r5
   267ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
   267ee:	2480      	movs	r4, #128	; 0x80
   267f0:	2300      	movs	r3, #0
   267f2:	03e4      	lsls	r4, r4, #15
   267f4:	21ff      	movs	r1, #255	; 0xff
   267f6:	e7ed      	b.n	267d4 <__aeabi_fdiv+0x138>
   267f8:	21ff      	movs	r1, #255	; 0xff
   267fa:	2400      	movs	r4, #0
   267fc:	e7ea      	b.n	267d4 <__aeabi_fdiv+0x138>
   267fe:	2301      	movs	r3, #1
   26800:	1a59      	subs	r1, r3, r1
   26802:	291b      	cmp	r1, #27
   26804:	dd66      	ble.n	268d4 <__aeabi_fdiv+0x238>
   26806:	9a01      	ldr	r2, [sp, #4]
   26808:	4013      	ands	r3, r2
   2680a:	2100      	movs	r1, #0
   2680c:	2400      	movs	r4, #0
   2680e:	e7e1      	b.n	267d4 <__aeabi_fdiv+0x138>
   26810:	2380      	movs	r3, #128	; 0x80
   26812:	03db      	lsls	r3, r3, #15
   26814:	421c      	tst	r4, r3
   26816:	d038      	beq.n	2688a <__aeabi_fdiv+0x1ee>
   26818:	421d      	tst	r5, r3
   2681a:	d051      	beq.n	268c0 <__aeabi_fdiv+0x224>
   2681c:	431c      	orrs	r4, r3
   2681e:	0264      	lsls	r4, r4, #9
   26820:	0a64      	lsrs	r4, r4, #9
   26822:	0033      	movs	r3, r6
   26824:	21ff      	movs	r1, #255	; 0xff
   26826:	e7d5      	b.n	267d4 <__aeabi_fdiv+0x138>
   26828:	0163      	lsls	r3, r4, #5
   2682a:	016c      	lsls	r4, r5, #5
   2682c:	42a3      	cmp	r3, r4
   2682e:	d23b      	bcs.n	268a8 <__aeabi_fdiv+0x20c>
   26830:	261b      	movs	r6, #27
   26832:	2100      	movs	r1, #0
   26834:	3801      	subs	r0, #1
   26836:	2501      	movs	r5, #1
   26838:	001f      	movs	r7, r3
   2683a:	0049      	lsls	r1, r1, #1
   2683c:	005b      	lsls	r3, r3, #1
   2683e:	2f00      	cmp	r7, #0
   26840:	db01      	blt.n	26846 <__aeabi_fdiv+0x1aa>
   26842:	429c      	cmp	r4, r3
   26844:	d801      	bhi.n	2684a <__aeabi_fdiv+0x1ae>
   26846:	1b1b      	subs	r3, r3, r4
   26848:	4329      	orrs	r1, r5
   2684a:	3e01      	subs	r6, #1
   2684c:	2e00      	cmp	r6, #0
   2684e:	d1f3      	bne.n	26838 <__aeabi_fdiv+0x19c>
   26850:	001c      	movs	r4, r3
   26852:	1e63      	subs	r3, r4, #1
   26854:	419c      	sbcs	r4, r3
   26856:	430c      	orrs	r4, r1
   26858:	0001      	movs	r1, r0
   2685a:	317f      	adds	r1, #127	; 0x7f
   2685c:	2900      	cmp	r1, #0
   2685e:	ddce      	ble.n	267fe <__aeabi_fdiv+0x162>
   26860:	0763      	lsls	r3, r4, #29
   26862:	d004      	beq.n	2686e <__aeabi_fdiv+0x1d2>
   26864:	230f      	movs	r3, #15
   26866:	4023      	ands	r3, r4
   26868:	2b04      	cmp	r3, #4
   2686a:	d000      	beq.n	2686e <__aeabi_fdiv+0x1d2>
   2686c:	3404      	adds	r4, #4
   2686e:	0123      	lsls	r3, r4, #4
   26870:	d503      	bpl.n	2687a <__aeabi_fdiv+0x1de>
   26872:	0001      	movs	r1, r0
   26874:	4b2c      	ldr	r3, [pc, #176]	; (26928 <__aeabi_fdiv+0x28c>)
   26876:	3180      	adds	r1, #128	; 0x80
   26878:	401c      	ands	r4, r3
   2687a:	29fe      	cmp	r1, #254	; 0xfe
   2687c:	dd0d      	ble.n	2689a <__aeabi_fdiv+0x1fe>
   2687e:	2301      	movs	r3, #1
   26880:	9a01      	ldr	r2, [sp, #4]
   26882:	21ff      	movs	r1, #255	; 0xff
   26884:	4013      	ands	r3, r2
   26886:	2400      	movs	r4, #0
   26888:	e7a4      	b.n	267d4 <__aeabi_fdiv+0x138>
   2688a:	2380      	movs	r3, #128	; 0x80
   2688c:	03db      	lsls	r3, r3, #15
   2688e:	431c      	orrs	r4, r3
   26890:	0264      	lsls	r4, r4, #9
   26892:	0a64      	lsrs	r4, r4, #9
   26894:	0033      	movs	r3, r6
   26896:	21ff      	movs	r1, #255	; 0xff
   26898:	e79c      	b.n	267d4 <__aeabi_fdiv+0x138>
   2689a:	2301      	movs	r3, #1
   2689c:	9a01      	ldr	r2, [sp, #4]
   2689e:	01a4      	lsls	r4, r4, #6
   268a0:	0a64      	lsrs	r4, r4, #9
   268a2:	b2c9      	uxtb	r1, r1
   268a4:	4013      	ands	r3, r2
   268a6:	e795      	b.n	267d4 <__aeabi_fdiv+0x138>
   268a8:	1b1b      	subs	r3, r3, r4
   268aa:	261a      	movs	r6, #26
   268ac:	2101      	movs	r1, #1
   268ae:	e7c2      	b.n	26836 <__aeabi_fdiv+0x19a>
   268b0:	9b00      	ldr	r3, [sp, #0]
   268b2:	468b      	mov	fp, r1
   268b4:	469a      	mov	sl, r3
   268b6:	2400      	movs	r4, #0
   268b8:	e74c      	b.n	26754 <__aeabi_fdiv+0xb8>
   268ba:	0263      	lsls	r3, r4, #9
   268bc:	d5e5      	bpl.n	2688a <__aeabi_fdiv+0x1ee>
   268be:	2500      	movs	r5, #0
   268c0:	2480      	movs	r4, #128	; 0x80
   268c2:	03e4      	lsls	r4, r4, #15
   268c4:	432c      	orrs	r4, r5
   268c6:	0264      	lsls	r4, r4, #9
   268c8:	0a64      	lsrs	r4, r4, #9
   268ca:	9b00      	ldr	r3, [sp, #0]
   268cc:	21ff      	movs	r1, #255	; 0xff
   268ce:	e781      	b.n	267d4 <__aeabi_fdiv+0x138>
   268d0:	9501      	str	r5, [sp, #4]
   268d2:	e7c1      	b.n	26858 <__aeabi_fdiv+0x1bc>
   268d4:	0023      	movs	r3, r4
   268d6:	2020      	movs	r0, #32
   268d8:	40cb      	lsrs	r3, r1
   268da:	1a41      	subs	r1, r0, r1
   268dc:	408c      	lsls	r4, r1
   268de:	1e61      	subs	r1, r4, #1
   268e0:	418c      	sbcs	r4, r1
   268e2:	431c      	orrs	r4, r3
   268e4:	0763      	lsls	r3, r4, #29
   268e6:	d004      	beq.n	268f2 <__aeabi_fdiv+0x256>
   268e8:	230f      	movs	r3, #15
   268ea:	4023      	ands	r3, r4
   268ec:	2b04      	cmp	r3, #4
   268ee:	d000      	beq.n	268f2 <__aeabi_fdiv+0x256>
   268f0:	3404      	adds	r4, #4
   268f2:	0163      	lsls	r3, r4, #5
   268f4:	d505      	bpl.n	26902 <__aeabi_fdiv+0x266>
   268f6:	2301      	movs	r3, #1
   268f8:	9a01      	ldr	r2, [sp, #4]
   268fa:	2101      	movs	r1, #1
   268fc:	4013      	ands	r3, r2
   268fe:	2400      	movs	r4, #0
   26900:	e768      	b.n	267d4 <__aeabi_fdiv+0x138>
   26902:	2301      	movs	r3, #1
   26904:	9a01      	ldr	r2, [sp, #4]
   26906:	01a4      	lsls	r4, r4, #6
   26908:	0a64      	lsrs	r4, r4, #9
   2690a:	4013      	ands	r3, r2
   2690c:	2100      	movs	r1, #0
   2690e:	e761      	b.n	267d4 <__aeabi_fdiv+0x138>
   26910:	2380      	movs	r3, #128	; 0x80
   26912:	03db      	lsls	r3, r3, #15
   26914:	431c      	orrs	r4, r3
   26916:	0264      	lsls	r4, r4, #9
   26918:	0a64      	lsrs	r4, r4, #9
   2691a:	4653      	mov	r3, sl
   2691c:	21ff      	movs	r1, #255	; 0xff
   2691e:	e759      	b.n	267d4 <__aeabi_fdiv+0x138>
   26920:	0002a818 	.word	0x0002a818
   26924:	0002a858 	.word	0x0002a858
   26928:	f7ffffff 	.word	0xf7ffffff

0002692c <__aeabi_fmul>:
   2692c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2692e:	4657      	mov	r7, sl
   26930:	464e      	mov	r6, r9
   26932:	4645      	mov	r5, r8
   26934:	46de      	mov	lr, fp
   26936:	b5e0      	push	{r5, r6, r7, lr}
   26938:	0247      	lsls	r7, r0, #9
   2693a:	0046      	lsls	r6, r0, #1
   2693c:	4688      	mov	r8, r1
   2693e:	0a7f      	lsrs	r7, r7, #9
   26940:	0e36      	lsrs	r6, r6, #24
   26942:	0fc4      	lsrs	r4, r0, #31
   26944:	2e00      	cmp	r6, #0
   26946:	d047      	beq.n	269d8 <__aeabi_fmul+0xac>
   26948:	2eff      	cmp	r6, #255	; 0xff
   2694a:	d024      	beq.n	26996 <__aeabi_fmul+0x6a>
   2694c:	00fb      	lsls	r3, r7, #3
   2694e:	2780      	movs	r7, #128	; 0x80
   26950:	04ff      	lsls	r7, r7, #19
   26952:	431f      	orrs	r7, r3
   26954:	2300      	movs	r3, #0
   26956:	4699      	mov	r9, r3
   26958:	469a      	mov	sl, r3
   2695a:	3e7f      	subs	r6, #127	; 0x7f
   2695c:	4643      	mov	r3, r8
   2695e:	025d      	lsls	r5, r3, #9
   26960:	0058      	lsls	r0, r3, #1
   26962:	0fdb      	lsrs	r3, r3, #31
   26964:	0a6d      	lsrs	r5, r5, #9
   26966:	0e00      	lsrs	r0, r0, #24
   26968:	4698      	mov	r8, r3
   2696a:	d043      	beq.n	269f4 <__aeabi_fmul+0xc8>
   2696c:	28ff      	cmp	r0, #255	; 0xff
   2696e:	d03b      	beq.n	269e8 <__aeabi_fmul+0xbc>
   26970:	00eb      	lsls	r3, r5, #3
   26972:	2580      	movs	r5, #128	; 0x80
   26974:	2200      	movs	r2, #0
   26976:	04ed      	lsls	r5, r5, #19
   26978:	431d      	orrs	r5, r3
   2697a:	387f      	subs	r0, #127	; 0x7f
   2697c:	1836      	adds	r6, r6, r0
   2697e:	1c73      	adds	r3, r6, #1
   26980:	4641      	mov	r1, r8
   26982:	469b      	mov	fp, r3
   26984:	464b      	mov	r3, r9
   26986:	4061      	eors	r1, r4
   26988:	4313      	orrs	r3, r2
   2698a:	2b0f      	cmp	r3, #15
   2698c:	d864      	bhi.n	26a58 <__aeabi_fmul+0x12c>
   2698e:	4875      	ldr	r0, [pc, #468]	; (26b64 <__aeabi_fmul+0x238>)
   26990:	009b      	lsls	r3, r3, #2
   26992:	58c3      	ldr	r3, [r0, r3]
   26994:	469f      	mov	pc, r3
   26996:	2f00      	cmp	r7, #0
   26998:	d142      	bne.n	26a20 <__aeabi_fmul+0xf4>
   2699a:	2308      	movs	r3, #8
   2699c:	4699      	mov	r9, r3
   2699e:	3b06      	subs	r3, #6
   269a0:	26ff      	movs	r6, #255	; 0xff
   269a2:	469a      	mov	sl, r3
   269a4:	e7da      	b.n	2695c <__aeabi_fmul+0x30>
   269a6:	4641      	mov	r1, r8
   269a8:	2a02      	cmp	r2, #2
   269aa:	d028      	beq.n	269fe <__aeabi_fmul+0xd2>
   269ac:	2a03      	cmp	r2, #3
   269ae:	d100      	bne.n	269b2 <__aeabi_fmul+0x86>
   269b0:	e0ce      	b.n	26b50 <__aeabi_fmul+0x224>
   269b2:	2a01      	cmp	r2, #1
   269b4:	d000      	beq.n	269b8 <__aeabi_fmul+0x8c>
   269b6:	e0ac      	b.n	26b12 <__aeabi_fmul+0x1e6>
   269b8:	4011      	ands	r1, r2
   269ba:	2000      	movs	r0, #0
   269bc:	2200      	movs	r2, #0
   269be:	b2cc      	uxtb	r4, r1
   269c0:	0240      	lsls	r0, r0, #9
   269c2:	05d2      	lsls	r2, r2, #23
   269c4:	0a40      	lsrs	r0, r0, #9
   269c6:	07e4      	lsls	r4, r4, #31
   269c8:	4310      	orrs	r0, r2
   269ca:	4320      	orrs	r0, r4
   269cc:	bc3c      	pop	{r2, r3, r4, r5}
   269ce:	4690      	mov	r8, r2
   269d0:	4699      	mov	r9, r3
   269d2:	46a2      	mov	sl, r4
   269d4:	46ab      	mov	fp, r5
   269d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   269d8:	2f00      	cmp	r7, #0
   269da:	d115      	bne.n	26a08 <__aeabi_fmul+0xdc>
   269dc:	2304      	movs	r3, #4
   269de:	4699      	mov	r9, r3
   269e0:	3b03      	subs	r3, #3
   269e2:	2600      	movs	r6, #0
   269e4:	469a      	mov	sl, r3
   269e6:	e7b9      	b.n	2695c <__aeabi_fmul+0x30>
   269e8:	20ff      	movs	r0, #255	; 0xff
   269ea:	2202      	movs	r2, #2
   269ec:	2d00      	cmp	r5, #0
   269ee:	d0c5      	beq.n	2697c <__aeabi_fmul+0x50>
   269f0:	2203      	movs	r2, #3
   269f2:	e7c3      	b.n	2697c <__aeabi_fmul+0x50>
   269f4:	2d00      	cmp	r5, #0
   269f6:	d119      	bne.n	26a2c <__aeabi_fmul+0x100>
   269f8:	2000      	movs	r0, #0
   269fa:	2201      	movs	r2, #1
   269fc:	e7be      	b.n	2697c <__aeabi_fmul+0x50>
   269fe:	2401      	movs	r4, #1
   26a00:	22ff      	movs	r2, #255	; 0xff
   26a02:	400c      	ands	r4, r1
   26a04:	2000      	movs	r0, #0
   26a06:	e7db      	b.n	269c0 <__aeabi_fmul+0x94>
   26a08:	0038      	movs	r0, r7
   26a0a:	f001 ff3f 	bl	2888c <__clzsi2>
   26a0e:	2676      	movs	r6, #118	; 0x76
   26a10:	1f43      	subs	r3, r0, #5
   26a12:	409f      	lsls	r7, r3
   26a14:	2300      	movs	r3, #0
   26a16:	4276      	negs	r6, r6
   26a18:	1a36      	subs	r6, r6, r0
   26a1a:	4699      	mov	r9, r3
   26a1c:	469a      	mov	sl, r3
   26a1e:	e79d      	b.n	2695c <__aeabi_fmul+0x30>
   26a20:	230c      	movs	r3, #12
   26a22:	4699      	mov	r9, r3
   26a24:	3b09      	subs	r3, #9
   26a26:	26ff      	movs	r6, #255	; 0xff
   26a28:	469a      	mov	sl, r3
   26a2a:	e797      	b.n	2695c <__aeabi_fmul+0x30>
   26a2c:	0028      	movs	r0, r5
   26a2e:	f001 ff2d 	bl	2888c <__clzsi2>
   26a32:	1f43      	subs	r3, r0, #5
   26a34:	409d      	lsls	r5, r3
   26a36:	2376      	movs	r3, #118	; 0x76
   26a38:	425b      	negs	r3, r3
   26a3a:	1a18      	subs	r0, r3, r0
   26a3c:	2200      	movs	r2, #0
   26a3e:	e79d      	b.n	2697c <__aeabi_fmul+0x50>
   26a40:	2080      	movs	r0, #128	; 0x80
   26a42:	2400      	movs	r4, #0
   26a44:	03c0      	lsls	r0, r0, #15
   26a46:	22ff      	movs	r2, #255	; 0xff
   26a48:	e7ba      	b.n	269c0 <__aeabi_fmul+0x94>
   26a4a:	003d      	movs	r5, r7
   26a4c:	4652      	mov	r2, sl
   26a4e:	e7ab      	b.n	269a8 <__aeabi_fmul+0x7c>
   26a50:	003d      	movs	r5, r7
   26a52:	0021      	movs	r1, r4
   26a54:	4652      	mov	r2, sl
   26a56:	e7a7      	b.n	269a8 <__aeabi_fmul+0x7c>
   26a58:	0c3b      	lsrs	r3, r7, #16
   26a5a:	469c      	mov	ip, r3
   26a5c:	042a      	lsls	r2, r5, #16
   26a5e:	0c12      	lsrs	r2, r2, #16
   26a60:	0c2b      	lsrs	r3, r5, #16
   26a62:	0014      	movs	r4, r2
   26a64:	4660      	mov	r0, ip
   26a66:	4665      	mov	r5, ip
   26a68:	043f      	lsls	r7, r7, #16
   26a6a:	0c3f      	lsrs	r7, r7, #16
   26a6c:	437c      	muls	r4, r7
   26a6e:	4342      	muls	r2, r0
   26a70:	435d      	muls	r5, r3
   26a72:	437b      	muls	r3, r7
   26a74:	0c27      	lsrs	r7, r4, #16
   26a76:	189b      	adds	r3, r3, r2
   26a78:	18ff      	adds	r7, r7, r3
   26a7a:	42ba      	cmp	r2, r7
   26a7c:	d903      	bls.n	26a86 <__aeabi_fmul+0x15a>
   26a7e:	2380      	movs	r3, #128	; 0x80
   26a80:	025b      	lsls	r3, r3, #9
   26a82:	469c      	mov	ip, r3
   26a84:	4465      	add	r5, ip
   26a86:	0424      	lsls	r4, r4, #16
   26a88:	043a      	lsls	r2, r7, #16
   26a8a:	0c24      	lsrs	r4, r4, #16
   26a8c:	1912      	adds	r2, r2, r4
   26a8e:	0193      	lsls	r3, r2, #6
   26a90:	1e5c      	subs	r4, r3, #1
   26a92:	41a3      	sbcs	r3, r4
   26a94:	0c3f      	lsrs	r7, r7, #16
   26a96:	0e92      	lsrs	r2, r2, #26
   26a98:	197d      	adds	r5, r7, r5
   26a9a:	431a      	orrs	r2, r3
   26a9c:	01ad      	lsls	r5, r5, #6
   26a9e:	4315      	orrs	r5, r2
   26aa0:	012b      	lsls	r3, r5, #4
   26aa2:	d504      	bpl.n	26aae <__aeabi_fmul+0x182>
   26aa4:	2301      	movs	r3, #1
   26aa6:	465e      	mov	r6, fp
   26aa8:	086a      	lsrs	r2, r5, #1
   26aaa:	401d      	ands	r5, r3
   26aac:	4315      	orrs	r5, r2
   26aae:	0032      	movs	r2, r6
   26ab0:	327f      	adds	r2, #127	; 0x7f
   26ab2:	2a00      	cmp	r2, #0
   26ab4:	dd25      	ble.n	26b02 <__aeabi_fmul+0x1d6>
   26ab6:	076b      	lsls	r3, r5, #29
   26ab8:	d004      	beq.n	26ac4 <__aeabi_fmul+0x198>
   26aba:	230f      	movs	r3, #15
   26abc:	402b      	ands	r3, r5
   26abe:	2b04      	cmp	r3, #4
   26ac0:	d000      	beq.n	26ac4 <__aeabi_fmul+0x198>
   26ac2:	3504      	adds	r5, #4
   26ac4:	012b      	lsls	r3, r5, #4
   26ac6:	d503      	bpl.n	26ad0 <__aeabi_fmul+0x1a4>
   26ac8:	0032      	movs	r2, r6
   26aca:	4b27      	ldr	r3, [pc, #156]	; (26b68 <__aeabi_fmul+0x23c>)
   26acc:	3280      	adds	r2, #128	; 0x80
   26ace:	401d      	ands	r5, r3
   26ad0:	2afe      	cmp	r2, #254	; 0xfe
   26ad2:	dc94      	bgt.n	269fe <__aeabi_fmul+0xd2>
   26ad4:	2401      	movs	r4, #1
   26ad6:	01a8      	lsls	r0, r5, #6
   26ad8:	0a40      	lsrs	r0, r0, #9
   26ada:	b2d2      	uxtb	r2, r2
   26adc:	400c      	ands	r4, r1
   26ade:	e76f      	b.n	269c0 <__aeabi_fmul+0x94>
   26ae0:	2080      	movs	r0, #128	; 0x80
   26ae2:	03c0      	lsls	r0, r0, #15
   26ae4:	4207      	tst	r7, r0
   26ae6:	d007      	beq.n	26af8 <__aeabi_fmul+0x1cc>
   26ae8:	4205      	tst	r5, r0
   26aea:	d105      	bne.n	26af8 <__aeabi_fmul+0x1cc>
   26aec:	4328      	orrs	r0, r5
   26aee:	0240      	lsls	r0, r0, #9
   26af0:	0a40      	lsrs	r0, r0, #9
   26af2:	4644      	mov	r4, r8
   26af4:	22ff      	movs	r2, #255	; 0xff
   26af6:	e763      	b.n	269c0 <__aeabi_fmul+0x94>
   26af8:	4338      	orrs	r0, r7
   26afa:	0240      	lsls	r0, r0, #9
   26afc:	0a40      	lsrs	r0, r0, #9
   26afe:	22ff      	movs	r2, #255	; 0xff
   26b00:	e75e      	b.n	269c0 <__aeabi_fmul+0x94>
   26b02:	2401      	movs	r4, #1
   26b04:	1aa3      	subs	r3, r4, r2
   26b06:	2b1b      	cmp	r3, #27
   26b08:	dd05      	ble.n	26b16 <__aeabi_fmul+0x1ea>
   26b0a:	400c      	ands	r4, r1
   26b0c:	2200      	movs	r2, #0
   26b0e:	2000      	movs	r0, #0
   26b10:	e756      	b.n	269c0 <__aeabi_fmul+0x94>
   26b12:	465e      	mov	r6, fp
   26b14:	e7cb      	b.n	26aae <__aeabi_fmul+0x182>
   26b16:	002a      	movs	r2, r5
   26b18:	2020      	movs	r0, #32
   26b1a:	40da      	lsrs	r2, r3
   26b1c:	1ac3      	subs	r3, r0, r3
   26b1e:	409d      	lsls	r5, r3
   26b20:	002b      	movs	r3, r5
   26b22:	1e5d      	subs	r5, r3, #1
   26b24:	41ab      	sbcs	r3, r5
   26b26:	4313      	orrs	r3, r2
   26b28:	075a      	lsls	r2, r3, #29
   26b2a:	d004      	beq.n	26b36 <__aeabi_fmul+0x20a>
   26b2c:	220f      	movs	r2, #15
   26b2e:	401a      	ands	r2, r3
   26b30:	2a04      	cmp	r2, #4
   26b32:	d000      	beq.n	26b36 <__aeabi_fmul+0x20a>
   26b34:	3304      	adds	r3, #4
   26b36:	015a      	lsls	r2, r3, #5
   26b38:	d504      	bpl.n	26b44 <__aeabi_fmul+0x218>
   26b3a:	2401      	movs	r4, #1
   26b3c:	2201      	movs	r2, #1
   26b3e:	400c      	ands	r4, r1
   26b40:	2000      	movs	r0, #0
   26b42:	e73d      	b.n	269c0 <__aeabi_fmul+0x94>
   26b44:	2401      	movs	r4, #1
   26b46:	019b      	lsls	r3, r3, #6
   26b48:	0a58      	lsrs	r0, r3, #9
   26b4a:	400c      	ands	r4, r1
   26b4c:	2200      	movs	r2, #0
   26b4e:	e737      	b.n	269c0 <__aeabi_fmul+0x94>
   26b50:	2080      	movs	r0, #128	; 0x80
   26b52:	2401      	movs	r4, #1
   26b54:	03c0      	lsls	r0, r0, #15
   26b56:	4328      	orrs	r0, r5
   26b58:	0240      	lsls	r0, r0, #9
   26b5a:	0a40      	lsrs	r0, r0, #9
   26b5c:	400c      	ands	r4, r1
   26b5e:	22ff      	movs	r2, #255	; 0xff
   26b60:	e72e      	b.n	269c0 <__aeabi_fmul+0x94>
   26b62:	46c0      	nop			; (mov r8, r8)
   26b64:	0002a898 	.word	0x0002a898
   26b68:	f7ffffff 	.word	0xf7ffffff

00026b6c <__aeabi_i2f>:
   26b6c:	b570      	push	{r4, r5, r6, lr}
   26b6e:	2800      	cmp	r0, #0
   26b70:	d030      	beq.n	26bd4 <__aeabi_i2f+0x68>
   26b72:	17c3      	asrs	r3, r0, #31
   26b74:	18c4      	adds	r4, r0, r3
   26b76:	405c      	eors	r4, r3
   26b78:	0fc5      	lsrs	r5, r0, #31
   26b7a:	0020      	movs	r0, r4
   26b7c:	f001 fe86 	bl	2888c <__clzsi2>
   26b80:	239e      	movs	r3, #158	; 0x9e
   26b82:	1a1b      	subs	r3, r3, r0
   26b84:	2b96      	cmp	r3, #150	; 0x96
   26b86:	dc0d      	bgt.n	26ba4 <__aeabi_i2f+0x38>
   26b88:	2296      	movs	r2, #150	; 0x96
   26b8a:	1ad2      	subs	r2, r2, r3
   26b8c:	4094      	lsls	r4, r2
   26b8e:	002a      	movs	r2, r5
   26b90:	0264      	lsls	r4, r4, #9
   26b92:	0a64      	lsrs	r4, r4, #9
   26b94:	b2db      	uxtb	r3, r3
   26b96:	0264      	lsls	r4, r4, #9
   26b98:	05db      	lsls	r3, r3, #23
   26b9a:	0a60      	lsrs	r0, r4, #9
   26b9c:	07d2      	lsls	r2, r2, #31
   26b9e:	4318      	orrs	r0, r3
   26ba0:	4310      	orrs	r0, r2
   26ba2:	bd70      	pop	{r4, r5, r6, pc}
   26ba4:	2b99      	cmp	r3, #153	; 0x99
   26ba6:	dc19      	bgt.n	26bdc <__aeabi_i2f+0x70>
   26ba8:	2299      	movs	r2, #153	; 0x99
   26baa:	1ad2      	subs	r2, r2, r3
   26bac:	2a00      	cmp	r2, #0
   26bae:	dd29      	ble.n	26c04 <__aeabi_i2f+0x98>
   26bb0:	4094      	lsls	r4, r2
   26bb2:	0022      	movs	r2, r4
   26bb4:	4c14      	ldr	r4, [pc, #80]	; (26c08 <__aeabi_i2f+0x9c>)
   26bb6:	4014      	ands	r4, r2
   26bb8:	0751      	lsls	r1, r2, #29
   26bba:	d004      	beq.n	26bc6 <__aeabi_i2f+0x5a>
   26bbc:	210f      	movs	r1, #15
   26bbe:	400a      	ands	r2, r1
   26bc0:	2a04      	cmp	r2, #4
   26bc2:	d000      	beq.n	26bc6 <__aeabi_i2f+0x5a>
   26bc4:	3404      	adds	r4, #4
   26bc6:	0162      	lsls	r2, r4, #5
   26bc8:	d413      	bmi.n	26bf2 <__aeabi_i2f+0x86>
   26bca:	01a4      	lsls	r4, r4, #6
   26bcc:	0a64      	lsrs	r4, r4, #9
   26bce:	b2db      	uxtb	r3, r3
   26bd0:	002a      	movs	r2, r5
   26bd2:	e7e0      	b.n	26b96 <__aeabi_i2f+0x2a>
   26bd4:	2200      	movs	r2, #0
   26bd6:	2300      	movs	r3, #0
   26bd8:	2400      	movs	r4, #0
   26bda:	e7dc      	b.n	26b96 <__aeabi_i2f+0x2a>
   26bdc:	2205      	movs	r2, #5
   26bde:	0021      	movs	r1, r4
   26be0:	1a12      	subs	r2, r2, r0
   26be2:	40d1      	lsrs	r1, r2
   26be4:	22b9      	movs	r2, #185	; 0xb9
   26be6:	1ad2      	subs	r2, r2, r3
   26be8:	4094      	lsls	r4, r2
   26bea:	1e62      	subs	r2, r4, #1
   26bec:	4194      	sbcs	r4, r2
   26bee:	430c      	orrs	r4, r1
   26bf0:	e7da      	b.n	26ba8 <__aeabi_i2f+0x3c>
   26bf2:	4b05      	ldr	r3, [pc, #20]	; (26c08 <__aeabi_i2f+0x9c>)
   26bf4:	002a      	movs	r2, r5
   26bf6:	401c      	ands	r4, r3
   26bf8:	239f      	movs	r3, #159	; 0x9f
   26bfa:	01a4      	lsls	r4, r4, #6
   26bfc:	1a1b      	subs	r3, r3, r0
   26bfe:	0a64      	lsrs	r4, r4, #9
   26c00:	b2db      	uxtb	r3, r3
   26c02:	e7c8      	b.n	26b96 <__aeabi_i2f+0x2a>
   26c04:	0022      	movs	r2, r4
   26c06:	e7d5      	b.n	26bb4 <__aeabi_i2f+0x48>
   26c08:	fbffffff 	.word	0xfbffffff

00026c0c <__aeabi_ui2f>:
   26c0c:	b510      	push	{r4, lr}
   26c0e:	1e04      	subs	r4, r0, #0
   26c10:	d027      	beq.n	26c62 <__aeabi_ui2f+0x56>
   26c12:	f001 fe3b 	bl	2888c <__clzsi2>
   26c16:	239e      	movs	r3, #158	; 0x9e
   26c18:	1a1b      	subs	r3, r3, r0
   26c1a:	2b96      	cmp	r3, #150	; 0x96
   26c1c:	dc0a      	bgt.n	26c34 <__aeabi_ui2f+0x28>
   26c1e:	2296      	movs	r2, #150	; 0x96
   26c20:	1ad2      	subs	r2, r2, r3
   26c22:	4094      	lsls	r4, r2
   26c24:	0264      	lsls	r4, r4, #9
   26c26:	0a64      	lsrs	r4, r4, #9
   26c28:	b2db      	uxtb	r3, r3
   26c2a:	0264      	lsls	r4, r4, #9
   26c2c:	05db      	lsls	r3, r3, #23
   26c2e:	0a60      	lsrs	r0, r4, #9
   26c30:	4318      	orrs	r0, r3
   26c32:	bd10      	pop	{r4, pc}
   26c34:	2b99      	cmp	r3, #153	; 0x99
   26c36:	dc17      	bgt.n	26c68 <__aeabi_ui2f+0x5c>
   26c38:	2299      	movs	r2, #153	; 0x99
   26c3a:	1ad2      	subs	r2, r2, r3
   26c3c:	2a00      	cmp	r2, #0
   26c3e:	dd27      	ble.n	26c90 <__aeabi_ui2f+0x84>
   26c40:	4094      	lsls	r4, r2
   26c42:	0022      	movs	r2, r4
   26c44:	4c13      	ldr	r4, [pc, #76]	; (26c94 <__aeabi_ui2f+0x88>)
   26c46:	4014      	ands	r4, r2
   26c48:	0751      	lsls	r1, r2, #29
   26c4a:	d004      	beq.n	26c56 <__aeabi_ui2f+0x4a>
   26c4c:	210f      	movs	r1, #15
   26c4e:	400a      	ands	r2, r1
   26c50:	2a04      	cmp	r2, #4
   26c52:	d000      	beq.n	26c56 <__aeabi_ui2f+0x4a>
   26c54:	3404      	adds	r4, #4
   26c56:	0162      	lsls	r2, r4, #5
   26c58:	d412      	bmi.n	26c80 <__aeabi_ui2f+0x74>
   26c5a:	01a4      	lsls	r4, r4, #6
   26c5c:	0a64      	lsrs	r4, r4, #9
   26c5e:	b2db      	uxtb	r3, r3
   26c60:	e7e3      	b.n	26c2a <__aeabi_ui2f+0x1e>
   26c62:	2300      	movs	r3, #0
   26c64:	2400      	movs	r4, #0
   26c66:	e7e0      	b.n	26c2a <__aeabi_ui2f+0x1e>
   26c68:	22b9      	movs	r2, #185	; 0xb9
   26c6a:	0021      	movs	r1, r4
   26c6c:	1ad2      	subs	r2, r2, r3
   26c6e:	4091      	lsls	r1, r2
   26c70:	000a      	movs	r2, r1
   26c72:	1e51      	subs	r1, r2, #1
   26c74:	418a      	sbcs	r2, r1
   26c76:	2105      	movs	r1, #5
   26c78:	1a09      	subs	r1, r1, r0
   26c7a:	40cc      	lsrs	r4, r1
   26c7c:	4314      	orrs	r4, r2
   26c7e:	e7db      	b.n	26c38 <__aeabi_ui2f+0x2c>
   26c80:	4b04      	ldr	r3, [pc, #16]	; (26c94 <__aeabi_ui2f+0x88>)
   26c82:	401c      	ands	r4, r3
   26c84:	239f      	movs	r3, #159	; 0x9f
   26c86:	01a4      	lsls	r4, r4, #6
   26c88:	1a1b      	subs	r3, r3, r0
   26c8a:	0a64      	lsrs	r4, r4, #9
   26c8c:	b2db      	uxtb	r3, r3
   26c8e:	e7cc      	b.n	26c2a <__aeabi_ui2f+0x1e>
   26c90:	0022      	movs	r2, r4
   26c92:	e7d7      	b.n	26c44 <__aeabi_ui2f+0x38>
   26c94:	fbffffff 	.word	0xfbffffff

00026c98 <__aeabi_dadd>:
   26c98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   26c9a:	4645      	mov	r5, r8
   26c9c:	46de      	mov	lr, fp
   26c9e:	4657      	mov	r7, sl
   26ca0:	464e      	mov	r6, r9
   26ca2:	030c      	lsls	r4, r1, #12
   26ca4:	b5e0      	push	{r5, r6, r7, lr}
   26ca6:	004e      	lsls	r6, r1, #1
   26ca8:	0fc9      	lsrs	r1, r1, #31
   26caa:	4688      	mov	r8, r1
   26cac:	000d      	movs	r5, r1
   26cae:	0a61      	lsrs	r1, r4, #9
   26cb0:	0f44      	lsrs	r4, r0, #29
   26cb2:	430c      	orrs	r4, r1
   26cb4:	00c7      	lsls	r7, r0, #3
   26cb6:	0319      	lsls	r1, r3, #12
   26cb8:	0058      	lsls	r0, r3, #1
   26cba:	0fdb      	lsrs	r3, r3, #31
   26cbc:	469b      	mov	fp, r3
   26cbe:	0a4b      	lsrs	r3, r1, #9
   26cc0:	0f51      	lsrs	r1, r2, #29
   26cc2:	430b      	orrs	r3, r1
   26cc4:	0d76      	lsrs	r6, r6, #21
   26cc6:	0d40      	lsrs	r0, r0, #21
   26cc8:	0019      	movs	r1, r3
   26cca:	00d2      	lsls	r2, r2, #3
   26ccc:	45d8      	cmp	r8, fp
   26cce:	d100      	bne.n	26cd2 <__aeabi_dadd+0x3a>
   26cd0:	e0ae      	b.n	26e30 <__aeabi_dadd+0x198>
   26cd2:	1a35      	subs	r5, r6, r0
   26cd4:	2d00      	cmp	r5, #0
   26cd6:	dc00      	bgt.n	26cda <__aeabi_dadd+0x42>
   26cd8:	e0f6      	b.n	26ec8 <__aeabi_dadd+0x230>
   26cda:	2800      	cmp	r0, #0
   26cdc:	d10f      	bne.n	26cfe <__aeabi_dadd+0x66>
   26cde:	4313      	orrs	r3, r2
   26ce0:	d100      	bne.n	26ce4 <__aeabi_dadd+0x4c>
   26ce2:	e0db      	b.n	26e9c <__aeabi_dadd+0x204>
   26ce4:	1e6b      	subs	r3, r5, #1
   26ce6:	2b00      	cmp	r3, #0
   26ce8:	d000      	beq.n	26cec <__aeabi_dadd+0x54>
   26cea:	e137      	b.n	26f5c <__aeabi_dadd+0x2c4>
   26cec:	1aba      	subs	r2, r7, r2
   26cee:	4297      	cmp	r7, r2
   26cf0:	41bf      	sbcs	r7, r7
   26cf2:	1a64      	subs	r4, r4, r1
   26cf4:	427f      	negs	r7, r7
   26cf6:	1be4      	subs	r4, r4, r7
   26cf8:	2601      	movs	r6, #1
   26cfa:	0017      	movs	r7, r2
   26cfc:	e024      	b.n	26d48 <__aeabi_dadd+0xb0>
   26cfe:	4bc6      	ldr	r3, [pc, #792]	; (27018 <__aeabi_dadd+0x380>)
   26d00:	429e      	cmp	r6, r3
   26d02:	d04d      	beq.n	26da0 <__aeabi_dadd+0x108>
   26d04:	2380      	movs	r3, #128	; 0x80
   26d06:	041b      	lsls	r3, r3, #16
   26d08:	4319      	orrs	r1, r3
   26d0a:	2d38      	cmp	r5, #56	; 0x38
   26d0c:	dd00      	ble.n	26d10 <__aeabi_dadd+0x78>
   26d0e:	e107      	b.n	26f20 <__aeabi_dadd+0x288>
   26d10:	2d1f      	cmp	r5, #31
   26d12:	dd00      	ble.n	26d16 <__aeabi_dadd+0x7e>
   26d14:	e138      	b.n	26f88 <__aeabi_dadd+0x2f0>
   26d16:	2020      	movs	r0, #32
   26d18:	1b43      	subs	r3, r0, r5
   26d1a:	469a      	mov	sl, r3
   26d1c:	000b      	movs	r3, r1
   26d1e:	4650      	mov	r0, sl
   26d20:	4083      	lsls	r3, r0
   26d22:	4699      	mov	r9, r3
   26d24:	0013      	movs	r3, r2
   26d26:	4648      	mov	r0, r9
   26d28:	40eb      	lsrs	r3, r5
   26d2a:	4318      	orrs	r0, r3
   26d2c:	0003      	movs	r3, r0
   26d2e:	4650      	mov	r0, sl
   26d30:	4082      	lsls	r2, r0
   26d32:	1e50      	subs	r0, r2, #1
   26d34:	4182      	sbcs	r2, r0
   26d36:	40e9      	lsrs	r1, r5
   26d38:	431a      	orrs	r2, r3
   26d3a:	1aba      	subs	r2, r7, r2
   26d3c:	1a61      	subs	r1, r4, r1
   26d3e:	4297      	cmp	r7, r2
   26d40:	41a4      	sbcs	r4, r4
   26d42:	0017      	movs	r7, r2
   26d44:	4264      	negs	r4, r4
   26d46:	1b0c      	subs	r4, r1, r4
   26d48:	0223      	lsls	r3, r4, #8
   26d4a:	d562      	bpl.n	26e12 <__aeabi_dadd+0x17a>
   26d4c:	0264      	lsls	r4, r4, #9
   26d4e:	0a65      	lsrs	r5, r4, #9
   26d50:	2d00      	cmp	r5, #0
   26d52:	d100      	bne.n	26d56 <__aeabi_dadd+0xbe>
   26d54:	e0df      	b.n	26f16 <__aeabi_dadd+0x27e>
   26d56:	0028      	movs	r0, r5
   26d58:	f001 fd98 	bl	2888c <__clzsi2>
   26d5c:	0003      	movs	r3, r0
   26d5e:	3b08      	subs	r3, #8
   26d60:	2b1f      	cmp	r3, #31
   26d62:	dd00      	ble.n	26d66 <__aeabi_dadd+0xce>
   26d64:	e0d2      	b.n	26f0c <__aeabi_dadd+0x274>
   26d66:	2220      	movs	r2, #32
   26d68:	003c      	movs	r4, r7
   26d6a:	1ad2      	subs	r2, r2, r3
   26d6c:	409d      	lsls	r5, r3
   26d6e:	40d4      	lsrs	r4, r2
   26d70:	409f      	lsls	r7, r3
   26d72:	4325      	orrs	r5, r4
   26d74:	429e      	cmp	r6, r3
   26d76:	dd00      	ble.n	26d7a <__aeabi_dadd+0xe2>
   26d78:	e0c4      	b.n	26f04 <__aeabi_dadd+0x26c>
   26d7a:	1b9e      	subs	r6, r3, r6
   26d7c:	1c73      	adds	r3, r6, #1
   26d7e:	2b1f      	cmp	r3, #31
   26d80:	dd00      	ble.n	26d84 <__aeabi_dadd+0xec>
   26d82:	e0f1      	b.n	26f68 <__aeabi_dadd+0x2d0>
   26d84:	2220      	movs	r2, #32
   26d86:	0038      	movs	r0, r7
   26d88:	0029      	movs	r1, r5
   26d8a:	1ad2      	subs	r2, r2, r3
   26d8c:	40d8      	lsrs	r0, r3
   26d8e:	4091      	lsls	r1, r2
   26d90:	4097      	lsls	r7, r2
   26d92:	002c      	movs	r4, r5
   26d94:	4301      	orrs	r1, r0
   26d96:	1e78      	subs	r0, r7, #1
   26d98:	4187      	sbcs	r7, r0
   26d9a:	40dc      	lsrs	r4, r3
   26d9c:	2600      	movs	r6, #0
   26d9e:	430f      	orrs	r7, r1
   26da0:	077b      	lsls	r3, r7, #29
   26da2:	d009      	beq.n	26db8 <__aeabi_dadd+0x120>
   26da4:	230f      	movs	r3, #15
   26da6:	403b      	ands	r3, r7
   26da8:	2b04      	cmp	r3, #4
   26daa:	d005      	beq.n	26db8 <__aeabi_dadd+0x120>
   26dac:	1d3b      	adds	r3, r7, #4
   26dae:	42bb      	cmp	r3, r7
   26db0:	41bf      	sbcs	r7, r7
   26db2:	427f      	negs	r7, r7
   26db4:	19e4      	adds	r4, r4, r7
   26db6:	001f      	movs	r7, r3
   26db8:	0223      	lsls	r3, r4, #8
   26dba:	d52c      	bpl.n	26e16 <__aeabi_dadd+0x17e>
   26dbc:	4b96      	ldr	r3, [pc, #600]	; (27018 <__aeabi_dadd+0x380>)
   26dbe:	3601      	adds	r6, #1
   26dc0:	429e      	cmp	r6, r3
   26dc2:	d100      	bne.n	26dc6 <__aeabi_dadd+0x12e>
   26dc4:	e09a      	b.n	26efc <__aeabi_dadd+0x264>
   26dc6:	4645      	mov	r5, r8
   26dc8:	4b94      	ldr	r3, [pc, #592]	; (2701c <__aeabi_dadd+0x384>)
   26dca:	08ff      	lsrs	r7, r7, #3
   26dcc:	401c      	ands	r4, r3
   26dce:	0760      	lsls	r0, r4, #29
   26dd0:	0576      	lsls	r6, r6, #21
   26dd2:	0264      	lsls	r4, r4, #9
   26dd4:	4307      	orrs	r7, r0
   26dd6:	0b24      	lsrs	r4, r4, #12
   26dd8:	0d76      	lsrs	r6, r6, #21
   26dda:	2100      	movs	r1, #0
   26ddc:	0324      	lsls	r4, r4, #12
   26dde:	0b23      	lsrs	r3, r4, #12
   26de0:	0d0c      	lsrs	r4, r1, #20
   26de2:	4a8f      	ldr	r2, [pc, #572]	; (27020 <__aeabi_dadd+0x388>)
   26de4:	0524      	lsls	r4, r4, #20
   26de6:	431c      	orrs	r4, r3
   26de8:	4014      	ands	r4, r2
   26dea:	0533      	lsls	r3, r6, #20
   26dec:	4323      	orrs	r3, r4
   26dee:	005b      	lsls	r3, r3, #1
   26df0:	07ed      	lsls	r5, r5, #31
   26df2:	085b      	lsrs	r3, r3, #1
   26df4:	432b      	orrs	r3, r5
   26df6:	0038      	movs	r0, r7
   26df8:	0019      	movs	r1, r3
   26dfa:	bc3c      	pop	{r2, r3, r4, r5}
   26dfc:	4690      	mov	r8, r2
   26dfe:	4699      	mov	r9, r3
   26e00:	46a2      	mov	sl, r4
   26e02:	46ab      	mov	fp, r5
   26e04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   26e06:	4664      	mov	r4, ip
   26e08:	4304      	orrs	r4, r0
   26e0a:	d100      	bne.n	26e0e <__aeabi_dadd+0x176>
   26e0c:	e211      	b.n	27232 <__aeabi_dadd+0x59a>
   26e0e:	0004      	movs	r4, r0
   26e10:	4667      	mov	r7, ip
   26e12:	077b      	lsls	r3, r7, #29
   26e14:	d1c6      	bne.n	26da4 <__aeabi_dadd+0x10c>
   26e16:	4645      	mov	r5, r8
   26e18:	0760      	lsls	r0, r4, #29
   26e1a:	08ff      	lsrs	r7, r7, #3
   26e1c:	4307      	orrs	r7, r0
   26e1e:	08e4      	lsrs	r4, r4, #3
   26e20:	4b7d      	ldr	r3, [pc, #500]	; (27018 <__aeabi_dadd+0x380>)
   26e22:	429e      	cmp	r6, r3
   26e24:	d030      	beq.n	26e88 <__aeabi_dadd+0x1f0>
   26e26:	0324      	lsls	r4, r4, #12
   26e28:	0576      	lsls	r6, r6, #21
   26e2a:	0b24      	lsrs	r4, r4, #12
   26e2c:	0d76      	lsrs	r6, r6, #21
   26e2e:	e7d4      	b.n	26dda <__aeabi_dadd+0x142>
   26e30:	1a33      	subs	r3, r6, r0
   26e32:	469a      	mov	sl, r3
   26e34:	2b00      	cmp	r3, #0
   26e36:	dd78      	ble.n	26f2a <__aeabi_dadd+0x292>
   26e38:	2800      	cmp	r0, #0
   26e3a:	d031      	beq.n	26ea0 <__aeabi_dadd+0x208>
   26e3c:	4876      	ldr	r0, [pc, #472]	; (27018 <__aeabi_dadd+0x380>)
   26e3e:	4286      	cmp	r6, r0
   26e40:	d0ae      	beq.n	26da0 <__aeabi_dadd+0x108>
   26e42:	2080      	movs	r0, #128	; 0x80
   26e44:	0400      	lsls	r0, r0, #16
   26e46:	4301      	orrs	r1, r0
   26e48:	4653      	mov	r3, sl
   26e4a:	2b38      	cmp	r3, #56	; 0x38
   26e4c:	dc00      	bgt.n	26e50 <__aeabi_dadd+0x1b8>
   26e4e:	e0e9      	b.n	27024 <__aeabi_dadd+0x38c>
   26e50:	430a      	orrs	r2, r1
   26e52:	1e51      	subs	r1, r2, #1
   26e54:	418a      	sbcs	r2, r1
   26e56:	2100      	movs	r1, #0
   26e58:	19d2      	adds	r2, r2, r7
   26e5a:	42ba      	cmp	r2, r7
   26e5c:	41bf      	sbcs	r7, r7
   26e5e:	1909      	adds	r1, r1, r4
   26e60:	427c      	negs	r4, r7
   26e62:	0017      	movs	r7, r2
   26e64:	190c      	adds	r4, r1, r4
   26e66:	0223      	lsls	r3, r4, #8
   26e68:	d5d3      	bpl.n	26e12 <__aeabi_dadd+0x17a>
   26e6a:	4b6b      	ldr	r3, [pc, #428]	; (27018 <__aeabi_dadd+0x380>)
   26e6c:	3601      	adds	r6, #1
   26e6e:	429e      	cmp	r6, r3
   26e70:	d100      	bne.n	26e74 <__aeabi_dadd+0x1dc>
   26e72:	e13a      	b.n	270ea <__aeabi_dadd+0x452>
   26e74:	2001      	movs	r0, #1
   26e76:	4b69      	ldr	r3, [pc, #420]	; (2701c <__aeabi_dadd+0x384>)
   26e78:	401c      	ands	r4, r3
   26e7a:	087b      	lsrs	r3, r7, #1
   26e7c:	4007      	ands	r7, r0
   26e7e:	431f      	orrs	r7, r3
   26e80:	07e0      	lsls	r0, r4, #31
   26e82:	4307      	orrs	r7, r0
   26e84:	0864      	lsrs	r4, r4, #1
   26e86:	e78b      	b.n	26da0 <__aeabi_dadd+0x108>
   26e88:	0023      	movs	r3, r4
   26e8a:	433b      	orrs	r3, r7
   26e8c:	d100      	bne.n	26e90 <__aeabi_dadd+0x1f8>
   26e8e:	e1cb      	b.n	27228 <__aeabi_dadd+0x590>
   26e90:	2280      	movs	r2, #128	; 0x80
   26e92:	0312      	lsls	r2, r2, #12
   26e94:	4314      	orrs	r4, r2
   26e96:	0324      	lsls	r4, r4, #12
   26e98:	0b24      	lsrs	r4, r4, #12
   26e9a:	e79e      	b.n	26dda <__aeabi_dadd+0x142>
   26e9c:	002e      	movs	r6, r5
   26e9e:	e77f      	b.n	26da0 <__aeabi_dadd+0x108>
   26ea0:	0008      	movs	r0, r1
   26ea2:	4310      	orrs	r0, r2
   26ea4:	d100      	bne.n	26ea8 <__aeabi_dadd+0x210>
   26ea6:	e0b4      	b.n	27012 <__aeabi_dadd+0x37a>
   26ea8:	1e58      	subs	r0, r3, #1
   26eaa:	2800      	cmp	r0, #0
   26eac:	d000      	beq.n	26eb0 <__aeabi_dadd+0x218>
   26eae:	e0de      	b.n	2706e <__aeabi_dadd+0x3d6>
   26eb0:	18ba      	adds	r2, r7, r2
   26eb2:	42ba      	cmp	r2, r7
   26eb4:	419b      	sbcs	r3, r3
   26eb6:	1864      	adds	r4, r4, r1
   26eb8:	425b      	negs	r3, r3
   26eba:	18e4      	adds	r4, r4, r3
   26ebc:	0017      	movs	r7, r2
   26ebe:	2601      	movs	r6, #1
   26ec0:	0223      	lsls	r3, r4, #8
   26ec2:	d5a6      	bpl.n	26e12 <__aeabi_dadd+0x17a>
   26ec4:	2602      	movs	r6, #2
   26ec6:	e7d5      	b.n	26e74 <__aeabi_dadd+0x1dc>
   26ec8:	2d00      	cmp	r5, #0
   26eca:	d16e      	bne.n	26faa <__aeabi_dadd+0x312>
   26ecc:	1c70      	adds	r0, r6, #1
   26ece:	0540      	lsls	r0, r0, #21
   26ed0:	0d40      	lsrs	r0, r0, #21
   26ed2:	2801      	cmp	r0, #1
   26ed4:	dc00      	bgt.n	26ed8 <__aeabi_dadd+0x240>
   26ed6:	e0f9      	b.n	270cc <__aeabi_dadd+0x434>
   26ed8:	1ab8      	subs	r0, r7, r2
   26eda:	4684      	mov	ip, r0
   26edc:	4287      	cmp	r7, r0
   26ede:	4180      	sbcs	r0, r0
   26ee0:	1ae5      	subs	r5, r4, r3
   26ee2:	4240      	negs	r0, r0
   26ee4:	1a2d      	subs	r5, r5, r0
   26ee6:	0228      	lsls	r0, r5, #8
   26ee8:	d400      	bmi.n	26eec <__aeabi_dadd+0x254>
   26eea:	e089      	b.n	27000 <__aeabi_dadd+0x368>
   26eec:	1bd7      	subs	r7, r2, r7
   26eee:	42ba      	cmp	r2, r7
   26ef0:	4192      	sbcs	r2, r2
   26ef2:	1b1c      	subs	r4, r3, r4
   26ef4:	4252      	negs	r2, r2
   26ef6:	1aa5      	subs	r5, r4, r2
   26ef8:	46d8      	mov	r8, fp
   26efa:	e729      	b.n	26d50 <__aeabi_dadd+0xb8>
   26efc:	4645      	mov	r5, r8
   26efe:	2400      	movs	r4, #0
   26f00:	2700      	movs	r7, #0
   26f02:	e76a      	b.n	26dda <__aeabi_dadd+0x142>
   26f04:	4c45      	ldr	r4, [pc, #276]	; (2701c <__aeabi_dadd+0x384>)
   26f06:	1af6      	subs	r6, r6, r3
   26f08:	402c      	ands	r4, r5
   26f0a:	e749      	b.n	26da0 <__aeabi_dadd+0x108>
   26f0c:	003d      	movs	r5, r7
   26f0e:	3828      	subs	r0, #40	; 0x28
   26f10:	4085      	lsls	r5, r0
   26f12:	2700      	movs	r7, #0
   26f14:	e72e      	b.n	26d74 <__aeabi_dadd+0xdc>
   26f16:	0038      	movs	r0, r7
   26f18:	f001 fcb8 	bl	2888c <__clzsi2>
   26f1c:	3020      	adds	r0, #32
   26f1e:	e71d      	b.n	26d5c <__aeabi_dadd+0xc4>
   26f20:	430a      	orrs	r2, r1
   26f22:	1e51      	subs	r1, r2, #1
   26f24:	418a      	sbcs	r2, r1
   26f26:	2100      	movs	r1, #0
   26f28:	e707      	b.n	26d3a <__aeabi_dadd+0xa2>
   26f2a:	2b00      	cmp	r3, #0
   26f2c:	d000      	beq.n	26f30 <__aeabi_dadd+0x298>
   26f2e:	e0f3      	b.n	27118 <__aeabi_dadd+0x480>
   26f30:	1c70      	adds	r0, r6, #1
   26f32:	0543      	lsls	r3, r0, #21
   26f34:	0d5b      	lsrs	r3, r3, #21
   26f36:	2b01      	cmp	r3, #1
   26f38:	dc00      	bgt.n	26f3c <__aeabi_dadd+0x2a4>
   26f3a:	e0ad      	b.n	27098 <__aeabi_dadd+0x400>
   26f3c:	4b36      	ldr	r3, [pc, #216]	; (27018 <__aeabi_dadd+0x380>)
   26f3e:	4298      	cmp	r0, r3
   26f40:	d100      	bne.n	26f44 <__aeabi_dadd+0x2ac>
   26f42:	e0d1      	b.n	270e8 <__aeabi_dadd+0x450>
   26f44:	18ba      	adds	r2, r7, r2
   26f46:	42ba      	cmp	r2, r7
   26f48:	41bf      	sbcs	r7, r7
   26f4a:	1864      	adds	r4, r4, r1
   26f4c:	427f      	negs	r7, r7
   26f4e:	19e4      	adds	r4, r4, r7
   26f50:	07e7      	lsls	r7, r4, #31
   26f52:	0852      	lsrs	r2, r2, #1
   26f54:	4317      	orrs	r7, r2
   26f56:	0864      	lsrs	r4, r4, #1
   26f58:	0006      	movs	r6, r0
   26f5a:	e721      	b.n	26da0 <__aeabi_dadd+0x108>
   26f5c:	482e      	ldr	r0, [pc, #184]	; (27018 <__aeabi_dadd+0x380>)
   26f5e:	4285      	cmp	r5, r0
   26f60:	d100      	bne.n	26f64 <__aeabi_dadd+0x2cc>
   26f62:	e093      	b.n	2708c <__aeabi_dadd+0x3f4>
   26f64:	001d      	movs	r5, r3
   26f66:	e6d0      	b.n	26d0a <__aeabi_dadd+0x72>
   26f68:	0029      	movs	r1, r5
   26f6a:	3e1f      	subs	r6, #31
   26f6c:	40f1      	lsrs	r1, r6
   26f6e:	2b20      	cmp	r3, #32
   26f70:	d100      	bne.n	26f74 <__aeabi_dadd+0x2dc>
   26f72:	e08d      	b.n	27090 <__aeabi_dadd+0x3f8>
   26f74:	2240      	movs	r2, #64	; 0x40
   26f76:	1ad3      	subs	r3, r2, r3
   26f78:	409d      	lsls	r5, r3
   26f7a:	432f      	orrs	r7, r5
   26f7c:	1e7d      	subs	r5, r7, #1
   26f7e:	41af      	sbcs	r7, r5
   26f80:	2400      	movs	r4, #0
   26f82:	430f      	orrs	r7, r1
   26f84:	2600      	movs	r6, #0
   26f86:	e744      	b.n	26e12 <__aeabi_dadd+0x17a>
   26f88:	002b      	movs	r3, r5
   26f8a:	0008      	movs	r0, r1
   26f8c:	3b20      	subs	r3, #32
   26f8e:	40d8      	lsrs	r0, r3
   26f90:	0003      	movs	r3, r0
   26f92:	2d20      	cmp	r5, #32
   26f94:	d100      	bne.n	26f98 <__aeabi_dadd+0x300>
   26f96:	e07d      	b.n	27094 <__aeabi_dadd+0x3fc>
   26f98:	2040      	movs	r0, #64	; 0x40
   26f9a:	1b45      	subs	r5, r0, r5
   26f9c:	40a9      	lsls	r1, r5
   26f9e:	430a      	orrs	r2, r1
   26fa0:	1e51      	subs	r1, r2, #1
   26fa2:	418a      	sbcs	r2, r1
   26fa4:	2100      	movs	r1, #0
   26fa6:	431a      	orrs	r2, r3
   26fa8:	e6c7      	b.n	26d3a <__aeabi_dadd+0xa2>
   26faa:	2e00      	cmp	r6, #0
   26fac:	d050      	beq.n	27050 <__aeabi_dadd+0x3b8>
   26fae:	4e1a      	ldr	r6, [pc, #104]	; (27018 <__aeabi_dadd+0x380>)
   26fb0:	42b0      	cmp	r0, r6
   26fb2:	d057      	beq.n	27064 <__aeabi_dadd+0x3cc>
   26fb4:	2680      	movs	r6, #128	; 0x80
   26fb6:	426b      	negs	r3, r5
   26fb8:	4699      	mov	r9, r3
   26fba:	0436      	lsls	r6, r6, #16
   26fbc:	4334      	orrs	r4, r6
   26fbe:	464b      	mov	r3, r9
   26fc0:	2b38      	cmp	r3, #56	; 0x38
   26fc2:	dd00      	ble.n	26fc6 <__aeabi_dadd+0x32e>
   26fc4:	e0d6      	b.n	27174 <__aeabi_dadd+0x4dc>
   26fc6:	2b1f      	cmp	r3, #31
   26fc8:	dd00      	ble.n	26fcc <__aeabi_dadd+0x334>
   26fca:	e135      	b.n	27238 <__aeabi_dadd+0x5a0>
   26fcc:	2620      	movs	r6, #32
   26fce:	1af5      	subs	r5, r6, r3
   26fd0:	0026      	movs	r6, r4
   26fd2:	40ae      	lsls	r6, r5
   26fd4:	46b2      	mov	sl, r6
   26fd6:	003e      	movs	r6, r7
   26fd8:	40de      	lsrs	r6, r3
   26fda:	46ac      	mov	ip, r5
   26fdc:	0035      	movs	r5, r6
   26fde:	4656      	mov	r6, sl
   26fe0:	432e      	orrs	r6, r5
   26fe2:	4665      	mov	r5, ip
   26fe4:	40af      	lsls	r7, r5
   26fe6:	1e7d      	subs	r5, r7, #1
   26fe8:	41af      	sbcs	r7, r5
   26fea:	40dc      	lsrs	r4, r3
   26fec:	4337      	orrs	r7, r6
   26fee:	1bd7      	subs	r7, r2, r7
   26ff0:	42ba      	cmp	r2, r7
   26ff2:	4192      	sbcs	r2, r2
   26ff4:	1b0c      	subs	r4, r1, r4
   26ff6:	4252      	negs	r2, r2
   26ff8:	1aa4      	subs	r4, r4, r2
   26ffa:	0006      	movs	r6, r0
   26ffc:	46d8      	mov	r8, fp
   26ffe:	e6a3      	b.n	26d48 <__aeabi_dadd+0xb0>
   27000:	4664      	mov	r4, ip
   27002:	4667      	mov	r7, ip
   27004:	432c      	orrs	r4, r5
   27006:	d000      	beq.n	2700a <__aeabi_dadd+0x372>
   27008:	e6a2      	b.n	26d50 <__aeabi_dadd+0xb8>
   2700a:	2500      	movs	r5, #0
   2700c:	2600      	movs	r6, #0
   2700e:	2700      	movs	r7, #0
   27010:	e706      	b.n	26e20 <__aeabi_dadd+0x188>
   27012:	001e      	movs	r6, r3
   27014:	e6c4      	b.n	26da0 <__aeabi_dadd+0x108>
   27016:	46c0      	nop			; (mov r8, r8)
   27018:	000007ff 	.word	0x000007ff
   2701c:	ff7fffff 	.word	0xff7fffff
   27020:	800fffff 	.word	0x800fffff
   27024:	2b1f      	cmp	r3, #31
   27026:	dc63      	bgt.n	270f0 <__aeabi_dadd+0x458>
   27028:	2020      	movs	r0, #32
   2702a:	1ac3      	subs	r3, r0, r3
   2702c:	0008      	movs	r0, r1
   2702e:	4098      	lsls	r0, r3
   27030:	469c      	mov	ip, r3
   27032:	4683      	mov	fp, r0
   27034:	4653      	mov	r3, sl
   27036:	0010      	movs	r0, r2
   27038:	40d8      	lsrs	r0, r3
   2703a:	0003      	movs	r3, r0
   2703c:	4658      	mov	r0, fp
   2703e:	4318      	orrs	r0, r3
   27040:	4663      	mov	r3, ip
   27042:	409a      	lsls	r2, r3
   27044:	1e53      	subs	r3, r2, #1
   27046:	419a      	sbcs	r2, r3
   27048:	4653      	mov	r3, sl
   2704a:	4302      	orrs	r2, r0
   2704c:	40d9      	lsrs	r1, r3
   2704e:	e703      	b.n	26e58 <__aeabi_dadd+0x1c0>
   27050:	0026      	movs	r6, r4
   27052:	433e      	orrs	r6, r7
   27054:	d006      	beq.n	27064 <__aeabi_dadd+0x3cc>
   27056:	43eb      	mvns	r3, r5
   27058:	4699      	mov	r9, r3
   2705a:	2b00      	cmp	r3, #0
   2705c:	d0c7      	beq.n	26fee <__aeabi_dadd+0x356>
   2705e:	4e94      	ldr	r6, [pc, #592]	; (272b0 <__aeabi_dadd+0x618>)
   27060:	42b0      	cmp	r0, r6
   27062:	d1ac      	bne.n	26fbe <__aeabi_dadd+0x326>
   27064:	000c      	movs	r4, r1
   27066:	0017      	movs	r7, r2
   27068:	0006      	movs	r6, r0
   2706a:	46d8      	mov	r8, fp
   2706c:	e698      	b.n	26da0 <__aeabi_dadd+0x108>
   2706e:	4b90      	ldr	r3, [pc, #576]	; (272b0 <__aeabi_dadd+0x618>)
   27070:	459a      	cmp	sl, r3
   27072:	d00b      	beq.n	2708c <__aeabi_dadd+0x3f4>
   27074:	4682      	mov	sl, r0
   27076:	e6e7      	b.n	26e48 <__aeabi_dadd+0x1b0>
   27078:	2800      	cmp	r0, #0
   2707a:	d000      	beq.n	2707e <__aeabi_dadd+0x3e6>
   2707c:	e09e      	b.n	271bc <__aeabi_dadd+0x524>
   2707e:	0018      	movs	r0, r3
   27080:	4310      	orrs	r0, r2
   27082:	d100      	bne.n	27086 <__aeabi_dadd+0x3ee>
   27084:	e0e9      	b.n	2725a <__aeabi_dadd+0x5c2>
   27086:	001c      	movs	r4, r3
   27088:	0017      	movs	r7, r2
   2708a:	46d8      	mov	r8, fp
   2708c:	4e88      	ldr	r6, [pc, #544]	; (272b0 <__aeabi_dadd+0x618>)
   2708e:	e687      	b.n	26da0 <__aeabi_dadd+0x108>
   27090:	2500      	movs	r5, #0
   27092:	e772      	b.n	26f7a <__aeabi_dadd+0x2e2>
   27094:	2100      	movs	r1, #0
   27096:	e782      	b.n	26f9e <__aeabi_dadd+0x306>
   27098:	0023      	movs	r3, r4
   2709a:	433b      	orrs	r3, r7
   2709c:	2e00      	cmp	r6, #0
   2709e:	d000      	beq.n	270a2 <__aeabi_dadd+0x40a>
   270a0:	e0ab      	b.n	271fa <__aeabi_dadd+0x562>
   270a2:	2b00      	cmp	r3, #0
   270a4:	d100      	bne.n	270a8 <__aeabi_dadd+0x410>
   270a6:	e0e7      	b.n	27278 <__aeabi_dadd+0x5e0>
   270a8:	000b      	movs	r3, r1
   270aa:	4313      	orrs	r3, r2
   270ac:	d100      	bne.n	270b0 <__aeabi_dadd+0x418>
   270ae:	e677      	b.n	26da0 <__aeabi_dadd+0x108>
   270b0:	18ba      	adds	r2, r7, r2
   270b2:	42ba      	cmp	r2, r7
   270b4:	41bf      	sbcs	r7, r7
   270b6:	1864      	adds	r4, r4, r1
   270b8:	427f      	negs	r7, r7
   270ba:	19e4      	adds	r4, r4, r7
   270bc:	0223      	lsls	r3, r4, #8
   270be:	d400      	bmi.n	270c2 <__aeabi_dadd+0x42a>
   270c0:	e0f2      	b.n	272a8 <__aeabi_dadd+0x610>
   270c2:	4b7c      	ldr	r3, [pc, #496]	; (272b4 <__aeabi_dadd+0x61c>)
   270c4:	0017      	movs	r7, r2
   270c6:	401c      	ands	r4, r3
   270c8:	0006      	movs	r6, r0
   270ca:	e669      	b.n	26da0 <__aeabi_dadd+0x108>
   270cc:	0020      	movs	r0, r4
   270ce:	4338      	orrs	r0, r7
   270d0:	2e00      	cmp	r6, #0
   270d2:	d1d1      	bne.n	27078 <__aeabi_dadd+0x3e0>
   270d4:	2800      	cmp	r0, #0
   270d6:	d15b      	bne.n	27190 <__aeabi_dadd+0x4f8>
   270d8:	001c      	movs	r4, r3
   270da:	4314      	orrs	r4, r2
   270dc:	d100      	bne.n	270e0 <__aeabi_dadd+0x448>
   270de:	e0a8      	b.n	27232 <__aeabi_dadd+0x59a>
   270e0:	001c      	movs	r4, r3
   270e2:	0017      	movs	r7, r2
   270e4:	46d8      	mov	r8, fp
   270e6:	e65b      	b.n	26da0 <__aeabi_dadd+0x108>
   270e8:	0006      	movs	r6, r0
   270ea:	2400      	movs	r4, #0
   270ec:	2700      	movs	r7, #0
   270ee:	e697      	b.n	26e20 <__aeabi_dadd+0x188>
   270f0:	4650      	mov	r0, sl
   270f2:	000b      	movs	r3, r1
   270f4:	3820      	subs	r0, #32
   270f6:	40c3      	lsrs	r3, r0
   270f8:	4699      	mov	r9, r3
   270fa:	4653      	mov	r3, sl
   270fc:	2b20      	cmp	r3, #32
   270fe:	d100      	bne.n	27102 <__aeabi_dadd+0x46a>
   27100:	e095      	b.n	2722e <__aeabi_dadd+0x596>
   27102:	2340      	movs	r3, #64	; 0x40
   27104:	4650      	mov	r0, sl
   27106:	1a1b      	subs	r3, r3, r0
   27108:	4099      	lsls	r1, r3
   2710a:	430a      	orrs	r2, r1
   2710c:	1e51      	subs	r1, r2, #1
   2710e:	418a      	sbcs	r2, r1
   27110:	464b      	mov	r3, r9
   27112:	2100      	movs	r1, #0
   27114:	431a      	orrs	r2, r3
   27116:	e69f      	b.n	26e58 <__aeabi_dadd+0x1c0>
   27118:	2e00      	cmp	r6, #0
   2711a:	d130      	bne.n	2717e <__aeabi_dadd+0x4e6>
   2711c:	0026      	movs	r6, r4
   2711e:	433e      	orrs	r6, r7
   27120:	d067      	beq.n	271f2 <__aeabi_dadd+0x55a>
   27122:	43db      	mvns	r3, r3
   27124:	469a      	mov	sl, r3
   27126:	2b00      	cmp	r3, #0
   27128:	d01c      	beq.n	27164 <__aeabi_dadd+0x4cc>
   2712a:	4e61      	ldr	r6, [pc, #388]	; (272b0 <__aeabi_dadd+0x618>)
   2712c:	42b0      	cmp	r0, r6
   2712e:	d060      	beq.n	271f2 <__aeabi_dadd+0x55a>
   27130:	4653      	mov	r3, sl
   27132:	2b38      	cmp	r3, #56	; 0x38
   27134:	dd00      	ble.n	27138 <__aeabi_dadd+0x4a0>
   27136:	e096      	b.n	27266 <__aeabi_dadd+0x5ce>
   27138:	2b1f      	cmp	r3, #31
   2713a:	dd00      	ble.n	2713e <__aeabi_dadd+0x4a6>
   2713c:	e09f      	b.n	2727e <__aeabi_dadd+0x5e6>
   2713e:	2620      	movs	r6, #32
   27140:	1af3      	subs	r3, r6, r3
   27142:	0026      	movs	r6, r4
   27144:	409e      	lsls	r6, r3
   27146:	469c      	mov	ip, r3
   27148:	46b3      	mov	fp, r6
   2714a:	4653      	mov	r3, sl
   2714c:	003e      	movs	r6, r7
   2714e:	40de      	lsrs	r6, r3
   27150:	0033      	movs	r3, r6
   27152:	465e      	mov	r6, fp
   27154:	431e      	orrs	r6, r3
   27156:	4663      	mov	r3, ip
   27158:	409f      	lsls	r7, r3
   2715a:	1e7b      	subs	r3, r7, #1
   2715c:	419f      	sbcs	r7, r3
   2715e:	4653      	mov	r3, sl
   27160:	40dc      	lsrs	r4, r3
   27162:	4337      	orrs	r7, r6
   27164:	18bf      	adds	r7, r7, r2
   27166:	4297      	cmp	r7, r2
   27168:	4192      	sbcs	r2, r2
   2716a:	1864      	adds	r4, r4, r1
   2716c:	4252      	negs	r2, r2
   2716e:	18a4      	adds	r4, r4, r2
   27170:	0006      	movs	r6, r0
   27172:	e678      	b.n	26e66 <__aeabi_dadd+0x1ce>
   27174:	4327      	orrs	r7, r4
   27176:	1e7c      	subs	r4, r7, #1
   27178:	41a7      	sbcs	r7, r4
   2717a:	2400      	movs	r4, #0
   2717c:	e737      	b.n	26fee <__aeabi_dadd+0x356>
   2717e:	4e4c      	ldr	r6, [pc, #304]	; (272b0 <__aeabi_dadd+0x618>)
   27180:	42b0      	cmp	r0, r6
   27182:	d036      	beq.n	271f2 <__aeabi_dadd+0x55a>
   27184:	2680      	movs	r6, #128	; 0x80
   27186:	425b      	negs	r3, r3
   27188:	0436      	lsls	r6, r6, #16
   2718a:	469a      	mov	sl, r3
   2718c:	4334      	orrs	r4, r6
   2718e:	e7cf      	b.n	27130 <__aeabi_dadd+0x498>
   27190:	0018      	movs	r0, r3
   27192:	4310      	orrs	r0, r2
   27194:	d100      	bne.n	27198 <__aeabi_dadd+0x500>
   27196:	e603      	b.n	26da0 <__aeabi_dadd+0x108>
   27198:	1ab8      	subs	r0, r7, r2
   2719a:	4684      	mov	ip, r0
   2719c:	4567      	cmp	r7, ip
   2719e:	41ad      	sbcs	r5, r5
   271a0:	1ae0      	subs	r0, r4, r3
   271a2:	426d      	negs	r5, r5
   271a4:	1b40      	subs	r0, r0, r5
   271a6:	0205      	lsls	r5, r0, #8
   271a8:	d400      	bmi.n	271ac <__aeabi_dadd+0x514>
   271aa:	e62c      	b.n	26e06 <__aeabi_dadd+0x16e>
   271ac:	1bd7      	subs	r7, r2, r7
   271ae:	42ba      	cmp	r2, r7
   271b0:	4192      	sbcs	r2, r2
   271b2:	1b1c      	subs	r4, r3, r4
   271b4:	4252      	negs	r2, r2
   271b6:	1aa4      	subs	r4, r4, r2
   271b8:	46d8      	mov	r8, fp
   271ba:	e5f1      	b.n	26da0 <__aeabi_dadd+0x108>
   271bc:	0018      	movs	r0, r3
   271be:	4310      	orrs	r0, r2
   271c0:	d100      	bne.n	271c4 <__aeabi_dadd+0x52c>
   271c2:	e763      	b.n	2708c <__aeabi_dadd+0x3f4>
   271c4:	08f8      	lsrs	r0, r7, #3
   271c6:	0767      	lsls	r7, r4, #29
   271c8:	4307      	orrs	r7, r0
   271ca:	2080      	movs	r0, #128	; 0x80
   271cc:	08e4      	lsrs	r4, r4, #3
   271ce:	0300      	lsls	r0, r0, #12
   271d0:	4204      	tst	r4, r0
   271d2:	d008      	beq.n	271e6 <__aeabi_dadd+0x54e>
   271d4:	08dd      	lsrs	r5, r3, #3
   271d6:	4205      	tst	r5, r0
   271d8:	d105      	bne.n	271e6 <__aeabi_dadd+0x54e>
   271da:	08d2      	lsrs	r2, r2, #3
   271dc:	0759      	lsls	r1, r3, #29
   271de:	4311      	orrs	r1, r2
   271e0:	000f      	movs	r7, r1
   271e2:	002c      	movs	r4, r5
   271e4:	46d8      	mov	r8, fp
   271e6:	0f7b      	lsrs	r3, r7, #29
   271e8:	00e4      	lsls	r4, r4, #3
   271ea:	431c      	orrs	r4, r3
   271ec:	00ff      	lsls	r7, r7, #3
   271ee:	4e30      	ldr	r6, [pc, #192]	; (272b0 <__aeabi_dadd+0x618>)
   271f0:	e5d6      	b.n	26da0 <__aeabi_dadd+0x108>
   271f2:	000c      	movs	r4, r1
   271f4:	0017      	movs	r7, r2
   271f6:	0006      	movs	r6, r0
   271f8:	e5d2      	b.n	26da0 <__aeabi_dadd+0x108>
   271fa:	2b00      	cmp	r3, #0
   271fc:	d038      	beq.n	27270 <__aeabi_dadd+0x5d8>
   271fe:	000b      	movs	r3, r1
   27200:	4313      	orrs	r3, r2
   27202:	d100      	bne.n	27206 <__aeabi_dadd+0x56e>
   27204:	e742      	b.n	2708c <__aeabi_dadd+0x3f4>
   27206:	08f8      	lsrs	r0, r7, #3
   27208:	0767      	lsls	r7, r4, #29
   2720a:	4307      	orrs	r7, r0
   2720c:	2080      	movs	r0, #128	; 0x80
   2720e:	08e4      	lsrs	r4, r4, #3
   27210:	0300      	lsls	r0, r0, #12
   27212:	4204      	tst	r4, r0
   27214:	d0e7      	beq.n	271e6 <__aeabi_dadd+0x54e>
   27216:	08cb      	lsrs	r3, r1, #3
   27218:	4203      	tst	r3, r0
   2721a:	d1e4      	bne.n	271e6 <__aeabi_dadd+0x54e>
   2721c:	08d2      	lsrs	r2, r2, #3
   2721e:	0749      	lsls	r1, r1, #29
   27220:	4311      	orrs	r1, r2
   27222:	000f      	movs	r7, r1
   27224:	001c      	movs	r4, r3
   27226:	e7de      	b.n	271e6 <__aeabi_dadd+0x54e>
   27228:	2700      	movs	r7, #0
   2722a:	2400      	movs	r4, #0
   2722c:	e5d5      	b.n	26dda <__aeabi_dadd+0x142>
   2722e:	2100      	movs	r1, #0
   27230:	e76b      	b.n	2710a <__aeabi_dadd+0x472>
   27232:	2500      	movs	r5, #0
   27234:	2700      	movs	r7, #0
   27236:	e5f3      	b.n	26e20 <__aeabi_dadd+0x188>
   27238:	464e      	mov	r6, r9
   2723a:	0025      	movs	r5, r4
   2723c:	3e20      	subs	r6, #32
   2723e:	40f5      	lsrs	r5, r6
   27240:	464b      	mov	r3, r9
   27242:	002e      	movs	r6, r5
   27244:	2b20      	cmp	r3, #32
   27246:	d02d      	beq.n	272a4 <__aeabi_dadd+0x60c>
   27248:	2540      	movs	r5, #64	; 0x40
   2724a:	1aed      	subs	r5, r5, r3
   2724c:	40ac      	lsls	r4, r5
   2724e:	4327      	orrs	r7, r4
   27250:	1e7c      	subs	r4, r7, #1
   27252:	41a7      	sbcs	r7, r4
   27254:	2400      	movs	r4, #0
   27256:	4337      	orrs	r7, r6
   27258:	e6c9      	b.n	26fee <__aeabi_dadd+0x356>
   2725a:	2480      	movs	r4, #128	; 0x80
   2725c:	2500      	movs	r5, #0
   2725e:	0324      	lsls	r4, r4, #12
   27260:	4e13      	ldr	r6, [pc, #76]	; (272b0 <__aeabi_dadd+0x618>)
   27262:	2700      	movs	r7, #0
   27264:	e5dc      	b.n	26e20 <__aeabi_dadd+0x188>
   27266:	4327      	orrs	r7, r4
   27268:	1e7c      	subs	r4, r7, #1
   2726a:	41a7      	sbcs	r7, r4
   2726c:	2400      	movs	r4, #0
   2726e:	e779      	b.n	27164 <__aeabi_dadd+0x4cc>
   27270:	000c      	movs	r4, r1
   27272:	0017      	movs	r7, r2
   27274:	4e0e      	ldr	r6, [pc, #56]	; (272b0 <__aeabi_dadd+0x618>)
   27276:	e593      	b.n	26da0 <__aeabi_dadd+0x108>
   27278:	000c      	movs	r4, r1
   2727a:	0017      	movs	r7, r2
   2727c:	e590      	b.n	26da0 <__aeabi_dadd+0x108>
   2727e:	4656      	mov	r6, sl
   27280:	0023      	movs	r3, r4
   27282:	3e20      	subs	r6, #32
   27284:	40f3      	lsrs	r3, r6
   27286:	4699      	mov	r9, r3
   27288:	4653      	mov	r3, sl
   2728a:	2b20      	cmp	r3, #32
   2728c:	d00e      	beq.n	272ac <__aeabi_dadd+0x614>
   2728e:	2340      	movs	r3, #64	; 0x40
   27290:	4656      	mov	r6, sl
   27292:	1b9b      	subs	r3, r3, r6
   27294:	409c      	lsls	r4, r3
   27296:	4327      	orrs	r7, r4
   27298:	1e7c      	subs	r4, r7, #1
   2729a:	41a7      	sbcs	r7, r4
   2729c:	464b      	mov	r3, r9
   2729e:	2400      	movs	r4, #0
   272a0:	431f      	orrs	r7, r3
   272a2:	e75f      	b.n	27164 <__aeabi_dadd+0x4cc>
   272a4:	2400      	movs	r4, #0
   272a6:	e7d2      	b.n	2724e <__aeabi_dadd+0x5b6>
   272a8:	0017      	movs	r7, r2
   272aa:	e5b2      	b.n	26e12 <__aeabi_dadd+0x17a>
   272ac:	2400      	movs	r4, #0
   272ae:	e7f2      	b.n	27296 <__aeabi_dadd+0x5fe>
   272b0:	000007ff 	.word	0x000007ff
   272b4:	ff7fffff 	.word	0xff7fffff

000272b8 <__aeabi_ddiv>:
   272b8:	b5f0      	push	{r4, r5, r6, r7, lr}
   272ba:	4657      	mov	r7, sl
   272bc:	4645      	mov	r5, r8
   272be:	46de      	mov	lr, fp
   272c0:	464e      	mov	r6, r9
   272c2:	b5e0      	push	{r5, r6, r7, lr}
   272c4:	004c      	lsls	r4, r1, #1
   272c6:	030e      	lsls	r6, r1, #12
   272c8:	b087      	sub	sp, #28
   272ca:	4683      	mov	fp, r0
   272cc:	4692      	mov	sl, r2
   272ce:	001d      	movs	r5, r3
   272d0:	4680      	mov	r8, r0
   272d2:	0b36      	lsrs	r6, r6, #12
   272d4:	0d64      	lsrs	r4, r4, #21
   272d6:	0fcf      	lsrs	r7, r1, #31
   272d8:	2c00      	cmp	r4, #0
   272da:	d04f      	beq.n	2737c <__aeabi_ddiv+0xc4>
   272dc:	4b6f      	ldr	r3, [pc, #444]	; (2749c <__aeabi_ddiv+0x1e4>)
   272de:	429c      	cmp	r4, r3
   272e0:	d035      	beq.n	2734e <__aeabi_ddiv+0x96>
   272e2:	2380      	movs	r3, #128	; 0x80
   272e4:	0f42      	lsrs	r2, r0, #29
   272e6:	041b      	lsls	r3, r3, #16
   272e8:	00f6      	lsls	r6, r6, #3
   272ea:	4313      	orrs	r3, r2
   272ec:	4333      	orrs	r3, r6
   272ee:	4699      	mov	r9, r3
   272f0:	00c3      	lsls	r3, r0, #3
   272f2:	4698      	mov	r8, r3
   272f4:	4b6a      	ldr	r3, [pc, #424]	; (274a0 <__aeabi_ddiv+0x1e8>)
   272f6:	2600      	movs	r6, #0
   272f8:	469c      	mov	ip, r3
   272fa:	2300      	movs	r3, #0
   272fc:	4464      	add	r4, ip
   272fe:	9303      	str	r3, [sp, #12]
   27300:	032b      	lsls	r3, r5, #12
   27302:	0b1b      	lsrs	r3, r3, #12
   27304:	469b      	mov	fp, r3
   27306:	006b      	lsls	r3, r5, #1
   27308:	0fed      	lsrs	r5, r5, #31
   2730a:	4650      	mov	r0, sl
   2730c:	0d5b      	lsrs	r3, r3, #21
   2730e:	9501      	str	r5, [sp, #4]
   27310:	d05e      	beq.n	273d0 <__aeabi_ddiv+0x118>
   27312:	4a62      	ldr	r2, [pc, #392]	; (2749c <__aeabi_ddiv+0x1e4>)
   27314:	4293      	cmp	r3, r2
   27316:	d053      	beq.n	273c0 <__aeabi_ddiv+0x108>
   27318:	465a      	mov	r2, fp
   2731a:	00d1      	lsls	r1, r2, #3
   2731c:	2280      	movs	r2, #128	; 0x80
   2731e:	0f40      	lsrs	r0, r0, #29
   27320:	0412      	lsls	r2, r2, #16
   27322:	4302      	orrs	r2, r0
   27324:	430a      	orrs	r2, r1
   27326:	4693      	mov	fp, r2
   27328:	4652      	mov	r2, sl
   2732a:	00d1      	lsls	r1, r2, #3
   2732c:	4a5c      	ldr	r2, [pc, #368]	; (274a0 <__aeabi_ddiv+0x1e8>)
   2732e:	4694      	mov	ip, r2
   27330:	2200      	movs	r2, #0
   27332:	4463      	add	r3, ip
   27334:	0038      	movs	r0, r7
   27336:	4068      	eors	r0, r5
   27338:	4684      	mov	ip, r0
   2733a:	9002      	str	r0, [sp, #8]
   2733c:	1ae4      	subs	r4, r4, r3
   2733e:	4316      	orrs	r6, r2
   27340:	2e0f      	cmp	r6, #15
   27342:	d900      	bls.n	27346 <__aeabi_ddiv+0x8e>
   27344:	e0b4      	b.n	274b0 <__aeabi_ddiv+0x1f8>
   27346:	4b57      	ldr	r3, [pc, #348]	; (274a4 <__aeabi_ddiv+0x1ec>)
   27348:	00b6      	lsls	r6, r6, #2
   2734a:	599b      	ldr	r3, [r3, r6]
   2734c:	469f      	mov	pc, r3
   2734e:	0003      	movs	r3, r0
   27350:	4333      	orrs	r3, r6
   27352:	4699      	mov	r9, r3
   27354:	d16c      	bne.n	27430 <__aeabi_ddiv+0x178>
   27356:	2300      	movs	r3, #0
   27358:	4698      	mov	r8, r3
   2735a:	3302      	adds	r3, #2
   2735c:	2608      	movs	r6, #8
   2735e:	9303      	str	r3, [sp, #12]
   27360:	e7ce      	b.n	27300 <__aeabi_ddiv+0x48>
   27362:	46cb      	mov	fp, r9
   27364:	4641      	mov	r1, r8
   27366:	9a03      	ldr	r2, [sp, #12]
   27368:	9701      	str	r7, [sp, #4]
   2736a:	2a02      	cmp	r2, #2
   2736c:	d165      	bne.n	2743a <__aeabi_ddiv+0x182>
   2736e:	9b01      	ldr	r3, [sp, #4]
   27370:	4c4a      	ldr	r4, [pc, #296]	; (2749c <__aeabi_ddiv+0x1e4>)
   27372:	469c      	mov	ip, r3
   27374:	2300      	movs	r3, #0
   27376:	2200      	movs	r2, #0
   27378:	4698      	mov	r8, r3
   2737a:	e06b      	b.n	27454 <__aeabi_ddiv+0x19c>
   2737c:	0003      	movs	r3, r0
   2737e:	4333      	orrs	r3, r6
   27380:	4699      	mov	r9, r3
   27382:	d04e      	beq.n	27422 <__aeabi_ddiv+0x16a>
   27384:	2e00      	cmp	r6, #0
   27386:	d100      	bne.n	2738a <__aeabi_ddiv+0xd2>
   27388:	e1bc      	b.n	27704 <__aeabi_ddiv+0x44c>
   2738a:	0030      	movs	r0, r6
   2738c:	f001 fa7e 	bl	2888c <__clzsi2>
   27390:	0003      	movs	r3, r0
   27392:	3b0b      	subs	r3, #11
   27394:	2b1c      	cmp	r3, #28
   27396:	dd00      	ble.n	2739a <__aeabi_ddiv+0xe2>
   27398:	e1ac      	b.n	276f4 <__aeabi_ddiv+0x43c>
   2739a:	221d      	movs	r2, #29
   2739c:	1ad3      	subs	r3, r2, r3
   2739e:	465a      	mov	r2, fp
   273a0:	0001      	movs	r1, r0
   273a2:	40da      	lsrs	r2, r3
   273a4:	3908      	subs	r1, #8
   273a6:	408e      	lsls	r6, r1
   273a8:	0013      	movs	r3, r2
   273aa:	4333      	orrs	r3, r6
   273ac:	4699      	mov	r9, r3
   273ae:	465b      	mov	r3, fp
   273b0:	408b      	lsls	r3, r1
   273b2:	4698      	mov	r8, r3
   273b4:	2300      	movs	r3, #0
   273b6:	4c3c      	ldr	r4, [pc, #240]	; (274a8 <__aeabi_ddiv+0x1f0>)
   273b8:	2600      	movs	r6, #0
   273ba:	1a24      	subs	r4, r4, r0
   273bc:	9303      	str	r3, [sp, #12]
   273be:	e79f      	b.n	27300 <__aeabi_ddiv+0x48>
   273c0:	4651      	mov	r1, sl
   273c2:	465a      	mov	r2, fp
   273c4:	4311      	orrs	r1, r2
   273c6:	d129      	bne.n	2741c <__aeabi_ddiv+0x164>
   273c8:	2200      	movs	r2, #0
   273ca:	4693      	mov	fp, r2
   273cc:	3202      	adds	r2, #2
   273ce:	e7b1      	b.n	27334 <__aeabi_ddiv+0x7c>
   273d0:	4659      	mov	r1, fp
   273d2:	4301      	orrs	r1, r0
   273d4:	d01e      	beq.n	27414 <__aeabi_ddiv+0x15c>
   273d6:	465b      	mov	r3, fp
   273d8:	2b00      	cmp	r3, #0
   273da:	d100      	bne.n	273de <__aeabi_ddiv+0x126>
   273dc:	e19e      	b.n	2771c <__aeabi_ddiv+0x464>
   273de:	4658      	mov	r0, fp
   273e0:	f001 fa54 	bl	2888c <__clzsi2>
   273e4:	0003      	movs	r3, r0
   273e6:	3b0b      	subs	r3, #11
   273e8:	2b1c      	cmp	r3, #28
   273ea:	dd00      	ble.n	273ee <__aeabi_ddiv+0x136>
   273ec:	e18f      	b.n	2770e <__aeabi_ddiv+0x456>
   273ee:	0002      	movs	r2, r0
   273f0:	4659      	mov	r1, fp
   273f2:	3a08      	subs	r2, #8
   273f4:	4091      	lsls	r1, r2
   273f6:	468b      	mov	fp, r1
   273f8:	211d      	movs	r1, #29
   273fa:	1acb      	subs	r3, r1, r3
   273fc:	4651      	mov	r1, sl
   273fe:	40d9      	lsrs	r1, r3
   27400:	000b      	movs	r3, r1
   27402:	4659      	mov	r1, fp
   27404:	430b      	orrs	r3, r1
   27406:	4651      	mov	r1, sl
   27408:	469b      	mov	fp, r3
   2740a:	4091      	lsls	r1, r2
   2740c:	4b26      	ldr	r3, [pc, #152]	; (274a8 <__aeabi_ddiv+0x1f0>)
   2740e:	2200      	movs	r2, #0
   27410:	1a1b      	subs	r3, r3, r0
   27412:	e78f      	b.n	27334 <__aeabi_ddiv+0x7c>
   27414:	2300      	movs	r3, #0
   27416:	2201      	movs	r2, #1
   27418:	469b      	mov	fp, r3
   2741a:	e78b      	b.n	27334 <__aeabi_ddiv+0x7c>
   2741c:	4651      	mov	r1, sl
   2741e:	2203      	movs	r2, #3
   27420:	e788      	b.n	27334 <__aeabi_ddiv+0x7c>
   27422:	2300      	movs	r3, #0
   27424:	4698      	mov	r8, r3
   27426:	3301      	adds	r3, #1
   27428:	2604      	movs	r6, #4
   2742a:	2400      	movs	r4, #0
   2742c:	9303      	str	r3, [sp, #12]
   2742e:	e767      	b.n	27300 <__aeabi_ddiv+0x48>
   27430:	2303      	movs	r3, #3
   27432:	46b1      	mov	r9, r6
   27434:	9303      	str	r3, [sp, #12]
   27436:	260c      	movs	r6, #12
   27438:	e762      	b.n	27300 <__aeabi_ddiv+0x48>
   2743a:	2a03      	cmp	r2, #3
   2743c:	d100      	bne.n	27440 <__aeabi_ddiv+0x188>
   2743e:	e25c      	b.n	278fa <__aeabi_ddiv+0x642>
   27440:	9b01      	ldr	r3, [sp, #4]
   27442:	2a01      	cmp	r2, #1
   27444:	d000      	beq.n	27448 <__aeabi_ddiv+0x190>
   27446:	e1e4      	b.n	27812 <__aeabi_ddiv+0x55a>
   27448:	4013      	ands	r3, r2
   2744a:	469c      	mov	ip, r3
   2744c:	2300      	movs	r3, #0
   2744e:	2400      	movs	r4, #0
   27450:	2200      	movs	r2, #0
   27452:	4698      	mov	r8, r3
   27454:	2100      	movs	r1, #0
   27456:	0312      	lsls	r2, r2, #12
   27458:	0b13      	lsrs	r3, r2, #12
   2745a:	0d0a      	lsrs	r2, r1, #20
   2745c:	0512      	lsls	r2, r2, #20
   2745e:	431a      	orrs	r2, r3
   27460:	0523      	lsls	r3, r4, #20
   27462:	4c12      	ldr	r4, [pc, #72]	; (274ac <__aeabi_ddiv+0x1f4>)
   27464:	4640      	mov	r0, r8
   27466:	4022      	ands	r2, r4
   27468:	4313      	orrs	r3, r2
   2746a:	4662      	mov	r2, ip
   2746c:	005b      	lsls	r3, r3, #1
   2746e:	07d2      	lsls	r2, r2, #31
   27470:	085b      	lsrs	r3, r3, #1
   27472:	4313      	orrs	r3, r2
   27474:	0019      	movs	r1, r3
   27476:	b007      	add	sp, #28
   27478:	bc3c      	pop	{r2, r3, r4, r5}
   2747a:	4690      	mov	r8, r2
   2747c:	4699      	mov	r9, r3
   2747e:	46a2      	mov	sl, r4
   27480:	46ab      	mov	fp, r5
   27482:	bdf0      	pop	{r4, r5, r6, r7, pc}
   27484:	2300      	movs	r3, #0
   27486:	2280      	movs	r2, #128	; 0x80
   27488:	469c      	mov	ip, r3
   2748a:	0312      	lsls	r2, r2, #12
   2748c:	4698      	mov	r8, r3
   2748e:	4c03      	ldr	r4, [pc, #12]	; (2749c <__aeabi_ddiv+0x1e4>)
   27490:	e7e0      	b.n	27454 <__aeabi_ddiv+0x19c>
   27492:	2300      	movs	r3, #0
   27494:	4c01      	ldr	r4, [pc, #4]	; (2749c <__aeabi_ddiv+0x1e4>)
   27496:	2200      	movs	r2, #0
   27498:	4698      	mov	r8, r3
   2749a:	e7db      	b.n	27454 <__aeabi_ddiv+0x19c>
   2749c:	000007ff 	.word	0x000007ff
   274a0:	fffffc01 	.word	0xfffffc01
   274a4:	0002a8d8 	.word	0x0002a8d8
   274a8:	fffffc0d 	.word	0xfffffc0d
   274ac:	800fffff 	.word	0x800fffff
   274b0:	45d9      	cmp	r9, fp
   274b2:	d900      	bls.n	274b6 <__aeabi_ddiv+0x1fe>
   274b4:	e139      	b.n	2772a <__aeabi_ddiv+0x472>
   274b6:	d100      	bne.n	274ba <__aeabi_ddiv+0x202>
   274b8:	e134      	b.n	27724 <__aeabi_ddiv+0x46c>
   274ba:	2300      	movs	r3, #0
   274bc:	4646      	mov	r6, r8
   274be:	464d      	mov	r5, r9
   274c0:	469a      	mov	sl, r3
   274c2:	3c01      	subs	r4, #1
   274c4:	465b      	mov	r3, fp
   274c6:	0e0a      	lsrs	r2, r1, #24
   274c8:	021b      	lsls	r3, r3, #8
   274ca:	431a      	orrs	r2, r3
   274cc:	020b      	lsls	r3, r1, #8
   274ce:	0c17      	lsrs	r7, r2, #16
   274d0:	9303      	str	r3, [sp, #12]
   274d2:	0413      	lsls	r3, r2, #16
   274d4:	0c1b      	lsrs	r3, r3, #16
   274d6:	0039      	movs	r1, r7
   274d8:	0028      	movs	r0, r5
   274da:	4690      	mov	r8, r2
   274dc:	9301      	str	r3, [sp, #4]
   274de:	f7fe fe01 	bl	260e4 <__udivsi3>
   274e2:	0002      	movs	r2, r0
   274e4:	9b01      	ldr	r3, [sp, #4]
   274e6:	4683      	mov	fp, r0
   274e8:	435a      	muls	r2, r3
   274ea:	0028      	movs	r0, r5
   274ec:	0039      	movs	r1, r7
   274ee:	4691      	mov	r9, r2
   274f0:	f7fe fe7e 	bl	261f0 <__aeabi_uidivmod>
   274f4:	0c35      	lsrs	r5, r6, #16
   274f6:	0409      	lsls	r1, r1, #16
   274f8:	430d      	orrs	r5, r1
   274fa:	45a9      	cmp	r9, r5
   274fc:	d90d      	bls.n	2751a <__aeabi_ddiv+0x262>
   274fe:	465b      	mov	r3, fp
   27500:	4445      	add	r5, r8
   27502:	3b01      	subs	r3, #1
   27504:	45a8      	cmp	r8, r5
   27506:	d900      	bls.n	2750a <__aeabi_ddiv+0x252>
   27508:	e13a      	b.n	27780 <__aeabi_ddiv+0x4c8>
   2750a:	45a9      	cmp	r9, r5
   2750c:	d800      	bhi.n	27510 <__aeabi_ddiv+0x258>
   2750e:	e137      	b.n	27780 <__aeabi_ddiv+0x4c8>
   27510:	2302      	movs	r3, #2
   27512:	425b      	negs	r3, r3
   27514:	469c      	mov	ip, r3
   27516:	4445      	add	r5, r8
   27518:	44e3      	add	fp, ip
   2751a:	464b      	mov	r3, r9
   2751c:	1aeb      	subs	r3, r5, r3
   2751e:	0039      	movs	r1, r7
   27520:	0018      	movs	r0, r3
   27522:	9304      	str	r3, [sp, #16]
   27524:	f7fe fdde 	bl	260e4 <__udivsi3>
   27528:	9b01      	ldr	r3, [sp, #4]
   2752a:	0005      	movs	r5, r0
   2752c:	4343      	muls	r3, r0
   2752e:	0039      	movs	r1, r7
   27530:	9804      	ldr	r0, [sp, #16]
   27532:	4699      	mov	r9, r3
   27534:	f7fe fe5c 	bl	261f0 <__aeabi_uidivmod>
   27538:	0433      	lsls	r3, r6, #16
   2753a:	0409      	lsls	r1, r1, #16
   2753c:	0c1b      	lsrs	r3, r3, #16
   2753e:	430b      	orrs	r3, r1
   27540:	4599      	cmp	r9, r3
   27542:	d909      	bls.n	27558 <__aeabi_ddiv+0x2a0>
   27544:	4443      	add	r3, r8
   27546:	1e6a      	subs	r2, r5, #1
   27548:	4598      	cmp	r8, r3
   2754a:	d900      	bls.n	2754e <__aeabi_ddiv+0x296>
   2754c:	e11a      	b.n	27784 <__aeabi_ddiv+0x4cc>
   2754e:	4599      	cmp	r9, r3
   27550:	d800      	bhi.n	27554 <__aeabi_ddiv+0x29c>
   27552:	e117      	b.n	27784 <__aeabi_ddiv+0x4cc>
   27554:	3d02      	subs	r5, #2
   27556:	4443      	add	r3, r8
   27558:	464a      	mov	r2, r9
   2755a:	1a9b      	subs	r3, r3, r2
   2755c:	465a      	mov	r2, fp
   2755e:	0412      	lsls	r2, r2, #16
   27560:	432a      	orrs	r2, r5
   27562:	9903      	ldr	r1, [sp, #12]
   27564:	4693      	mov	fp, r2
   27566:	0c10      	lsrs	r0, r2, #16
   27568:	0c0a      	lsrs	r2, r1, #16
   2756a:	4691      	mov	r9, r2
   2756c:	0409      	lsls	r1, r1, #16
   2756e:	465a      	mov	r2, fp
   27570:	0c09      	lsrs	r1, r1, #16
   27572:	464e      	mov	r6, r9
   27574:	000d      	movs	r5, r1
   27576:	0412      	lsls	r2, r2, #16
   27578:	0c12      	lsrs	r2, r2, #16
   2757a:	4345      	muls	r5, r0
   2757c:	9105      	str	r1, [sp, #20]
   2757e:	4351      	muls	r1, r2
   27580:	4372      	muls	r2, r6
   27582:	4370      	muls	r0, r6
   27584:	1952      	adds	r2, r2, r5
   27586:	0c0e      	lsrs	r6, r1, #16
   27588:	18b2      	adds	r2, r6, r2
   2758a:	4295      	cmp	r5, r2
   2758c:	d903      	bls.n	27596 <__aeabi_ddiv+0x2de>
   2758e:	2580      	movs	r5, #128	; 0x80
   27590:	026d      	lsls	r5, r5, #9
   27592:	46ac      	mov	ip, r5
   27594:	4460      	add	r0, ip
   27596:	0c15      	lsrs	r5, r2, #16
   27598:	0409      	lsls	r1, r1, #16
   2759a:	0412      	lsls	r2, r2, #16
   2759c:	0c09      	lsrs	r1, r1, #16
   2759e:	1828      	adds	r0, r5, r0
   275a0:	1852      	adds	r2, r2, r1
   275a2:	4283      	cmp	r3, r0
   275a4:	d200      	bcs.n	275a8 <__aeabi_ddiv+0x2f0>
   275a6:	e0ce      	b.n	27746 <__aeabi_ddiv+0x48e>
   275a8:	d100      	bne.n	275ac <__aeabi_ddiv+0x2f4>
   275aa:	e0c8      	b.n	2773e <__aeabi_ddiv+0x486>
   275ac:	1a1d      	subs	r5, r3, r0
   275ae:	4653      	mov	r3, sl
   275b0:	1a9e      	subs	r6, r3, r2
   275b2:	45b2      	cmp	sl, r6
   275b4:	4192      	sbcs	r2, r2
   275b6:	4252      	negs	r2, r2
   275b8:	1aab      	subs	r3, r5, r2
   275ba:	469a      	mov	sl, r3
   275bc:	4598      	cmp	r8, r3
   275be:	d100      	bne.n	275c2 <__aeabi_ddiv+0x30a>
   275c0:	e117      	b.n	277f2 <__aeabi_ddiv+0x53a>
   275c2:	0039      	movs	r1, r7
   275c4:	0018      	movs	r0, r3
   275c6:	f7fe fd8d 	bl	260e4 <__udivsi3>
   275ca:	9b01      	ldr	r3, [sp, #4]
   275cc:	0005      	movs	r5, r0
   275ce:	4343      	muls	r3, r0
   275d0:	0039      	movs	r1, r7
   275d2:	4650      	mov	r0, sl
   275d4:	9304      	str	r3, [sp, #16]
   275d6:	f7fe fe0b 	bl	261f0 <__aeabi_uidivmod>
   275da:	9804      	ldr	r0, [sp, #16]
   275dc:	040b      	lsls	r3, r1, #16
   275de:	0c31      	lsrs	r1, r6, #16
   275e0:	4319      	orrs	r1, r3
   275e2:	4288      	cmp	r0, r1
   275e4:	d909      	bls.n	275fa <__aeabi_ddiv+0x342>
   275e6:	4441      	add	r1, r8
   275e8:	1e6b      	subs	r3, r5, #1
   275ea:	4588      	cmp	r8, r1
   275ec:	d900      	bls.n	275f0 <__aeabi_ddiv+0x338>
   275ee:	e107      	b.n	27800 <__aeabi_ddiv+0x548>
   275f0:	4288      	cmp	r0, r1
   275f2:	d800      	bhi.n	275f6 <__aeabi_ddiv+0x33e>
   275f4:	e104      	b.n	27800 <__aeabi_ddiv+0x548>
   275f6:	3d02      	subs	r5, #2
   275f8:	4441      	add	r1, r8
   275fa:	9b04      	ldr	r3, [sp, #16]
   275fc:	1acb      	subs	r3, r1, r3
   275fe:	0018      	movs	r0, r3
   27600:	0039      	movs	r1, r7
   27602:	9304      	str	r3, [sp, #16]
   27604:	f7fe fd6e 	bl	260e4 <__udivsi3>
   27608:	9b01      	ldr	r3, [sp, #4]
   2760a:	4682      	mov	sl, r0
   2760c:	4343      	muls	r3, r0
   2760e:	0039      	movs	r1, r7
   27610:	9804      	ldr	r0, [sp, #16]
   27612:	9301      	str	r3, [sp, #4]
   27614:	f7fe fdec 	bl	261f0 <__aeabi_uidivmod>
   27618:	9801      	ldr	r0, [sp, #4]
   2761a:	040b      	lsls	r3, r1, #16
   2761c:	0431      	lsls	r1, r6, #16
   2761e:	0c09      	lsrs	r1, r1, #16
   27620:	4319      	orrs	r1, r3
   27622:	4288      	cmp	r0, r1
   27624:	d90d      	bls.n	27642 <__aeabi_ddiv+0x38a>
   27626:	4653      	mov	r3, sl
   27628:	4441      	add	r1, r8
   2762a:	3b01      	subs	r3, #1
   2762c:	4588      	cmp	r8, r1
   2762e:	d900      	bls.n	27632 <__aeabi_ddiv+0x37a>
   27630:	e0e8      	b.n	27804 <__aeabi_ddiv+0x54c>
   27632:	4288      	cmp	r0, r1
   27634:	d800      	bhi.n	27638 <__aeabi_ddiv+0x380>
   27636:	e0e5      	b.n	27804 <__aeabi_ddiv+0x54c>
   27638:	2302      	movs	r3, #2
   2763a:	425b      	negs	r3, r3
   2763c:	469c      	mov	ip, r3
   2763e:	4441      	add	r1, r8
   27640:	44e2      	add	sl, ip
   27642:	9b01      	ldr	r3, [sp, #4]
   27644:	042d      	lsls	r5, r5, #16
   27646:	1ace      	subs	r6, r1, r3
   27648:	4651      	mov	r1, sl
   2764a:	4329      	orrs	r1, r5
   2764c:	9d05      	ldr	r5, [sp, #20]
   2764e:	464f      	mov	r7, r9
   27650:	002a      	movs	r2, r5
   27652:	040b      	lsls	r3, r1, #16
   27654:	0c08      	lsrs	r0, r1, #16
   27656:	0c1b      	lsrs	r3, r3, #16
   27658:	435a      	muls	r2, r3
   2765a:	4345      	muls	r5, r0
   2765c:	437b      	muls	r3, r7
   2765e:	4378      	muls	r0, r7
   27660:	195b      	adds	r3, r3, r5
   27662:	0c17      	lsrs	r7, r2, #16
   27664:	18fb      	adds	r3, r7, r3
   27666:	429d      	cmp	r5, r3
   27668:	d903      	bls.n	27672 <__aeabi_ddiv+0x3ba>
   2766a:	2580      	movs	r5, #128	; 0x80
   2766c:	026d      	lsls	r5, r5, #9
   2766e:	46ac      	mov	ip, r5
   27670:	4460      	add	r0, ip
   27672:	0c1d      	lsrs	r5, r3, #16
   27674:	0412      	lsls	r2, r2, #16
   27676:	041b      	lsls	r3, r3, #16
   27678:	0c12      	lsrs	r2, r2, #16
   2767a:	1828      	adds	r0, r5, r0
   2767c:	189b      	adds	r3, r3, r2
   2767e:	4286      	cmp	r6, r0
   27680:	d200      	bcs.n	27684 <__aeabi_ddiv+0x3cc>
   27682:	e093      	b.n	277ac <__aeabi_ddiv+0x4f4>
   27684:	d100      	bne.n	27688 <__aeabi_ddiv+0x3d0>
   27686:	e08e      	b.n	277a6 <__aeabi_ddiv+0x4ee>
   27688:	2301      	movs	r3, #1
   2768a:	4319      	orrs	r1, r3
   2768c:	4ba0      	ldr	r3, [pc, #640]	; (27910 <__aeabi_ddiv+0x658>)
   2768e:	18e3      	adds	r3, r4, r3
   27690:	2b00      	cmp	r3, #0
   27692:	dc00      	bgt.n	27696 <__aeabi_ddiv+0x3de>
   27694:	e099      	b.n	277ca <__aeabi_ddiv+0x512>
   27696:	074a      	lsls	r2, r1, #29
   27698:	d000      	beq.n	2769c <__aeabi_ddiv+0x3e4>
   2769a:	e09e      	b.n	277da <__aeabi_ddiv+0x522>
   2769c:	465a      	mov	r2, fp
   2769e:	01d2      	lsls	r2, r2, #7
   276a0:	d506      	bpl.n	276b0 <__aeabi_ddiv+0x3f8>
   276a2:	465a      	mov	r2, fp
   276a4:	4b9b      	ldr	r3, [pc, #620]	; (27914 <__aeabi_ddiv+0x65c>)
   276a6:	401a      	ands	r2, r3
   276a8:	2380      	movs	r3, #128	; 0x80
   276aa:	4693      	mov	fp, r2
   276ac:	00db      	lsls	r3, r3, #3
   276ae:	18e3      	adds	r3, r4, r3
   276b0:	4a99      	ldr	r2, [pc, #612]	; (27918 <__aeabi_ddiv+0x660>)
   276b2:	4293      	cmp	r3, r2
   276b4:	dd68      	ble.n	27788 <__aeabi_ddiv+0x4d0>
   276b6:	2301      	movs	r3, #1
   276b8:	9a02      	ldr	r2, [sp, #8]
   276ba:	4c98      	ldr	r4, [pc, #608]	; (2791c <__aeabi_ddiv+0x664>)
   276bc:	401a      	ands	r2, r3
   276be:	2300      	movs	r3, #0
   276c0:	4694      	mov	ip, r2
   276c2:	4698      	mov	r8, r3
   276c4:	2200      	movs	r2, #0
   276c6:	e6c5      	b.n	27454 <__aeabi_ddiv+0x19c>
   276c8:	2280      	movs	r2, #128	; 0x80
   276ca:	464b      	mov	r3, r9
   276cc:	0312      	lsls	r2, r2, #12
   276ce:	4213      	tst	r3, r2
   276d0:	d00a      	beq.n	276e8 <__aeabi_ddiv+0x430>
   276d2:	465b      	mov	r3, fp
   276d4:	4213      	tst	r3, r2
   276d6:	d106      	bne.n	276e6 <__aeabi_ddiv+0x42e>
   276d8:	431a      	orrs	r2, r3
   276da:	0312      	lsls	r2, r2, #12
   276dc:	0b12      	lsrs	r2, r2, #12
   276de:	46ac      	mov	ip, r5
   276e0:	4688      	mov	r8, r1
   276e2:	4c8e      	ldr	r4, [pc, #568]	; (2791c <__aeabi_ddiv+0x664>)
   276e4:	e6b6      	b.n	27454 <__aeabi_ddiv+0x19c>
   276e6:	464b      	mov	r3, r9
   276e8:	431a      	orrs	r2, r3
   276ea:	0312      	lsls	r2, r2, #12
   276ec:	0b12      	lsrs	r2, r2, #12
   276ee:	46bc      	mov	ip, r7
   276f0:	4c8a      	ldr	r4, [pc, #552]	; (2791c <__aeabi_ddiv+0x664>)
   276f2:	e6af      	b.n	27454 <__aeabi_ddiv+0x19c>
   276f4:	0003      	movs	r3, r0
   276f6:	465a      	mov	r2, fp
   276f8:	3b28      	subs	r3, #40	; 0x28
   276fa:	409a      	lsls	r2, r3
   276fc:	2300      	movs	r3, #0
   276fe:	4691      	mov	r9, r2
   27700:	4698      	mov	r8, r3
   27702:	e657      	b.n	273b4 <__aeabi_ddiv+0xfc>
   27704:	4658      	mov	r0, fp
   27706:	f001 f8c1 	bl	2888c <__clzsi2>
   2770a:	3020      	adds	r0, #32
   2770c:	e640      	b.n	27390 <__aeabi_ddiv+0xd8>
   2770e:	0003      	movs	r3, r0
   27710:	4652      	mov	r2, sl
   27712:	3b28      	subs	r3, #40	; 0x28
   27714:	409a      	lsls	r2, r3
   27716:	2100      	movs	r1, #0
   27718:	4693      	mov	fp, r2
   2771a:	e677      	b.n	2740c <__aeabi_ddiv+0x154>
   2771c:	f001 f8b6 	bl	2888c <__clzsi2>
   27720:	3020      	adds	r0, #32
   27722:	e65f      	b.n	273e4 <__aeabi_ddiv+0x12c>
   27724:	4588      	cmp	r8, r1
   27726:	d200      	bcs.n	2772a <__aeabi_ddiv+0x472>
   27728:	e6c7      	b.n	274ba <__aeabi_ddiv+0x202>
   2772a:	464b      	mov	r3, r9
   2772c:	07de      	lsls	r6, r3, #31
   2772e:	085d      	lsrs	r5, r3, #1
   27730:	4643      	mov	r3, r8
   27732:	085b      	lsrs	r3, r3, #1
   27734:	431e      	orrs	r6, r3
   27736:	4643      	mov	r3, r8
   27738:	07db      	lsls	r3, r3, #31
   2773a:	469a      	mov	sl, r3
   2773c:	e6c2      	b.n	274c4 <__aeabi_ddiv+0x20c>
   2773e:	2500      	movs	r5, #0
   27740:	4592      	cmp	sl, r2
   27742:	d300      	bcc.n	27746 <__aeabi_ddiv+0x48e>
   27744:	e733      	b.n	275ae <__aeabi_ddiv+0x2f6>
   27746:	9e03      	ldr	r6, [sp, #12]
   27748:	4659      	mov	r1, fp
   2774a:	46b4      	mov	ip, r6
   2774c:	44e2      	add	sl, ip
   2774e:	45b2      	cmp	sl, r6
   27750:	41ad      	sbcs	r5, r5
   27752:	426d      	negs	r5, r5
   27754:	4445      	add	r5, r8
   27756:	18eb      	adds	r3, r5, r3
   27758:	3901      	subs	r1, #1
   2775a:	4598      	cmp	r8, r3
   2775c:	d207      	bcs.n	2776e <__aeabi_ddiv+0x4b6>
   2775e:	4298      	cmp	r0, r3
   27760:	d900      	bls.n	27764 <__aeabi_ddiv+0x4ac>
   27762:	e07f      	b.n	27864 <__aeabi_ddiv+0x5ac>
   27764:	d100      	bne.n	27768 <__aeabi_ddiv+0x4b0>
   27766:	e0bc      	b.n	278e2 <__aeabi_ddiv+0x62a>
   27768:	1a1d      	subs	r5, r3, r0
   2776a:	468b      	mov	fp, r1
   2776c:	e71f      	b.n	275ae <__aeabi_ddiv+0x2f6>
   2776e:	4598      	cmp	r8, r3
   27770:	d1fa      	bne.n	27768 <__aeabi_ddiv+0x4b0>
   27772:	9d03      	ldr	r5, [sp, #12]
   27774:	4555      	cmp	r5, sl
   27776:	d9f2      	bls.n	2775e <__aeabi_ddiv+0x4a6>
   27778:	4643      	mov	r3, r8
   2777a:	468b      	mov	fp, r1
   2777c:	1a1d      	subs	r5, r3, r0
   2777e:	e716      	b.n	275ae <__aeabi_ddiv+0x2f6>
   27780:	469b      	mov	fp, r3
   27782:	e6ca      	b.n	2751a <__aeabi_ddiv+0x262>
   27784:	0015      	movs	r5, r2
   27786:	e6e7      	b.n	27558 <__aeabi_ddiv+0x2a0>
   27788:	465a      	mov	r2, fp
   2778a:	08c9      	lsrs	r1, r1, #3
   2778c:	0752      	lsls	r2, r2, #29
   2778e:	430a      	orrs	r2, r1
   27790:	055b      	lsls	r3, r3, #21
   27792:	4690      	mov	r8, r2
   27794:	0d5c      	lsrs	r4, r3, #21
   27796:	465a      	mov	r2, fp
   27798:	2301      	movs	r3, #1
   2779a:	9902      	ldr	r1, [sp, #8]
   2779c:	0252      	lsls	r2, r2, #9
   2779e:	4019      	ands	r1, r3
   277a0:	0b12      	lsrs	r2, r2, #12
   277a2:	468c      	mov	ip, r1
   277a4:	e656      	b.n	27454 <__aeabi_ddiv+0x19c>
   277a6:	2b00      	cmp	r3, #0
   277a8:	d100      	bne.n	277ac <__aeabi_ddiv+0x4f4>
   277aa:	e76f      	b.n	2768c <__aeabi_ddiv+0x3d4>
   277ac:	4446      	add	r6, r8
   277ae:	1e4a      	subs	r2, r1, #1
   277b0:	45b0      	cmp	r8, r6
   277b2:	d929      	bls.n	27808 <__aeabi_ddiv+0x550>
   277b4:	0011      	movs	r1, r2
   277b6:	4286      	cmp	r6, r0
   277b8:	d000      	beq.n	277bc <__aeabi_ddiv+0x504>
   277ba:	e765      	b.n	27688 <__aeabi_ddiv+0x3d0>
   277bc:	9a03      	ldr	r2, [sp, #12]
   277be:	4293      	cmp	r3, r2
   277c0:	d000      	beq.n	277c4 <__aeabi_ddiv+0x50c>
   277c2:	e761      	b.n	27688 <__aeabi_ddiv+0x3d0>
   277c4:	e762      	b.n	2768c <__aeabi_ddiv+0x3d4>
   277c6:	2101      	movs	r1, #1
   277c8:	4249      	negs	r1, r1
   277ca:	2001      	movs	r0, #1
   277cc:	1ac2      	subs	r2, r0, r3
   277ce:	2a38      	cmp	r2, #56	; 0x38
   277d0:	dd21      	ble.n	27816 <__aeabi_ddiv+0x55e>
   277d2:	9b02      	ldr	r3, [sp, #8]
   277d4:	4003      	ands	r3, r0
   277d6:	469c      	mov	ip, r3
   277d8:	e638      	b.n	2744c <__aeabi_ddiv+0x194>
   277da:	220f      	movs	r2, #15
   277dc:	400a      	ands	r2, r1
   277de:	2a04      	cmp	r2, #4
   277e0:	d100      	bne.n	277e4 <__aeabi_ddiv+0x52c>
   277e2:	e75b      	b.n	2769c <__aeabi_ddiv+0x3e4>
   277e4:	000a      	movs	r2, r1
   277e6:	1d11      	adds	r1, r2, #4
   277e8:	4291      	cmp	r1, r2
   277ea:	4192      	sbcs	r2, r2
   277ec:	4252      	negs	r2, r2
   277ee:	4493      	add	fp, r2
   277f0:	e754      	b.n	2769c <__aeabi_ddiv+0x3e4>
   277f2:	4b47      	ldr	r3, [pc, #284]	; (27910 <__aeabi_ddiv+0x658>)
   277f4:	18e3      	adds	r3, r4, r3
   277f6:	2b00      	cmp	r3, #0
   277f8:	dde5      	ble.n	277c6 <__aeabi_ddiv+0x50e>
   277fa:	2201      	movs	r2, #1
   277fc:	4252      	negs	r2, r2
   277fe:	e7f2      	b.n	277e6 <__aeabi_ddiv+0x52e>
   27800:	001d      	movs	r5, r3
   27802:	e6fa      	b.n	275fa <__aeabi_ddiv+0x342>
   27804:	469a      	mov	sl, r3
   27806:	e71c      	b.n	27642 <__aeabi_ddiv+0x38a>
   27808:	42b0      	cmp	r0, r6
   2780a:	d839      	bhi.n	27880 <__aeabi_ddiv+0x5c8>
   2780c:	d06e      	beq.n	278ec <__aeabi_ddiv+0x634>
   2780e:	0011      	movs	r1, r2
   27810:	e73a      	b.n	27688 <__aeabi_ddiv+0x3d0>
   27812:	9302      	str	r3, [sp, #8]
   27814:	e73a      	b.n	2768c <__aeabi_ddiv+0x3d4>
   27816:	2a1f      	cmp	r2, #31
   27818:	dc3c      	bgt.n	27894 <__aeabi_ddiv+0x5dc>
   2781a:	2320      	movs	r3, #32
   2781c:	1a9b      	subs	r3, r3, r2
   2781e:	000c      	movs	r4, r1
   27820:	4658      	mov	r0, fp
   27822:	4099      	lsls	r1, r3
   27824:	4098      	lsls	r0, r3
   27826:	1e4b      	subs	r3, r1, #1
   27828:	4199      	sbcs	r1, r3
   2782a:	465b      	mov	r3, fp
   2782c:	40d4      	lsrs	r4, r2
   2782e:	40d3      	lsrs	r3, r2
   27830:	4320      	orrs	r0, r4
   27832:	4308      	orrs	r0, r1
   27834:	001a      	movs	r2, r3
   27836:	0743      	lsls	r3, r0, #29
   27838:	d009      	beq.n	2784e <__aeabi_ddiv+0x596>
   2783a:	230f      	movs	r3, #15
   2783c:	4003      	ands	r3, r0
   2783e:	2b04      	cmp	r3, #4
   27840:	d005      	beq.n	2784e <__aeabi_ddiv+0x596>
   27842:	0001      	movs	r1, r0
   27844:	1d08      	adds	r0, r1, #4
   27846:	4288      	cmp	r0, r1
   27848:	419b      	sbcs	r3, r3
   2784a:	425b      	negs	r3, r3
   2784c:	18d2      	adds	r2, r2, r3
   2784e:	0213      	lsls	r3, r2, #8
   27850:	d53a      	bpl.n	278c8 <__aeabi_ddiv+0x610>
   27852:	2301      	movs	r3, #1
   27854:	9a02      	ldr	r2, [sp, #8]
   27856:	2401      	movs	r4, #1
   27858:	401a      	ands	r2, r3
   2785a:	2300      	movs	r3, #0
   2785c:	4694      	mov	ip, r2
   2785e:	4698      	mov	r8, r3
   27860:	2200      	movs	r2, #0
   27862:	e5f7      	b.n	27454 <__aeabi_ddiv+0x19c>
   27864:	2102      	movs	r1, #2
   27866:	4249      	negs	r1, r1
   27868:	468c      	mov	ip, r1
   2786a:	9d03      	ldr	r5, [sp, #12]
   2786c:	44e3      	add	fp, ip
   2786e:	46ac      	mov	ip, r5
   27870:	44e2      	add	sl, ip
   27872:	45aa      	cmp	sl, r5
   27874:	41ad      	sbcs	r5, r5
   27876:	426d      	negs	r5, r5
   27878:	4445      	add	r5, r8
   2787a:	18ed      	adds	r5, r5, r3
   2787c:	1a2d      	subs	r5, r5, r0
   2787e:	e696      	b.n	275ae <__aeabi_ddiv+0x2f6>
   27880:	1e8a      	subs	r2, r1, #2
   27882:	9903      	ldr	r1, [sp, #12]
   27884:	004d      	lsls	r5, r1, #1
   27886:	428d      	cmp	r5, r1
   27888:	4189      	sbcs	r1, r1
   2788a:	4249      	negs	r1, r1
   2788c:	4441      	add	r1, r8
   2788e:	1876      	adds	r6, r6, r1
   27890:	9503      	str	r5, [sp, #12]
   27892:	e78f      	b.n	277b4 <__aeabi_ddiv+0x4fc>
   27894:	201f      	movs	r0, #31
   27896:	4240      	negs	r0, r0
   27898:	1ac3      	subs	r3, r0, r3
   2789a:	4658      	mov	r0, fp
   2789c:	40d8      	lsrs	r0, r3
   2789e:	0003      	movs	r3, r0
   278a0:	2a20      	cmp	r2, #32
   278a2:	d028      	beq.n	278f6 <__aeabi_ddiv+0x63e>
   278a4:	2040      	movs	r0, #64	; 0x40
   278a6:	465d      	mov	r5, fp
   278a8:	1a82      	subs	r2, r0, r2
   278aa:	4095      	lsls	r5, r2
   278ac:	4329      	orrs	r1, r5
   278ae:	1e4a      	subs	r2, r1, #1
   278b0:	4191      	sbcs	r1, r2
   278b2:	4319      	orrs	r1, r3
   278b4:	2307      	movs	r3, #7
   278b6:	2200      	movs	r2, #0
   278b8:	400b      	ands	r3, r1
   278ba:	d009      	beq.n	278d0 <__aeabi_ddiv+0x618>
   278bc:	230f      	movs	r3, #15
   278be:	2200      	movs	r2, #0
   278c0:	400b      	ands	r3, r1
   278c2:	0008      	movs	r0, r1
   278c4:	2b04      	cmp	r3, #4
   278c6:	d1bd      	bne.n	27844 <__aeabi_ddiv+0x58c>
   278c8:	0001      	movs	r1, r0
   278ca:	0753      	lsls	r3, r2, #29
   278cc:	0252      	lsls	r2, r2, #9
   278ce:	0b12      	lsrs	r2, r2, #12
   278d0:	08c9      	lsrs	r1, r1, #3
   278d2:	4319      	orrs	r1, r3
   278d4:	2301      	movs	r3, #1
   278d6:	4688      	mov	r8, r1
   278d8:	9902      	ldr	r1, [sp, #8]
   278da:	2400      	movs	r4, #0
   278dc:	4019      	ands	r1, r3
   278de:	468c      	mov	ip, r1
   278e0:	e5b8      	b.n	27454 <__aeabi_ddiv+0x19c>
   278e2:	4552      	cmp	r2, sl
   278e4:	d8be      	bhi.n	27864 <__aeabi_ddiv+0x5ac>
   278e6:	468b      	mov	fp, r1
   278e8:	2500      	movs	r5, #0
   278ea:	e660      	b.n	275ae <__aeabi_ddiv+0x2f6>
   278ec:	9d03      	ldr	r5, [sp, #12]
   278ee:	429d      	cmp	r5, r3
   278f0:	d3c6      	bcc.n	27880 <__aeabi_ddiv+0x5c8>
   278f2:	0011      	movs	r1, r2
   278f4:	e762      	b.n	277bc <__aeabi_ddiv+0x504>
   278f6:	2500      	movs	r5, #0
   278f8:	e7d8      	b.n	278ac <__aeabi_ddiv+0x5f4>
   278fa:	2280      	movs	r2, #128	; 0x80
   278fc:	465b      	mov	r3, fp
   278fe:	0312      	lsls	r2, r2, #12
   27900:	431a      	orrs	r2, r3
   27902:	9b01      	ldr	r3, [sp, #4]
   27904:	0312      	lsls	r2, r2, #12
   27906:	0b12      	lsrs	r2, r2, #12
   27908:	469c      	mov	ip, r3
   2790a:	4688      	mov	r8, r1
   2790c:	4c03      	ldr	r4, [pc, #12]	; (2791c <__aeabi_ddiv+0x664>)
   2790e:	e5a1      	b.n	27454 <__aeabi_ddiv+0x19c>
   27910:	000003ff 	.word	0x000003ff
   27914:	feffffff 	.word	0xfeffffff
   27918:	000007fe 	.word	0x000007fe
   2791c:	000007ff 	.word	0x000007ff

00027920 <__eqdf2>:
   27920:	b5f0      	push	{r4, r5, r6, r7, lr}
   27922:	464f      	mov	r7, r9
   27924:	4646      	mov	r6, r8
   27926:	46d6      	mov	lr, sl
   27928:	005c      	lsls	r4, r3, #1
   2792a:	b5c0      	push	{r6, r7, lr}
   2792c:	031f      	lsls	r7, r3, #12
   2792e:	0fdb      	lsrs	r3, r3, #31
   27930:	469a      	mov	sl, r3
   27932:	4b17      	ldr	r3, [pc, #92]	; (27990 <__eqdf2+0x70>)
   27934:	030e      	lsls	r6, r1, #12
   27936:	004d      	lsls	r5, r1, #1
   27938:	4684      	mov	ip, r0
   2793a:	4680      	mov	r8, r0
   2793c:	0b36      	lsrs	r6, r6, #12
   2793e:	0d6d      	lsrs	r5, r5, #21
   27940:	0fc9      	lsrs	r1, r1, #31
   27942:	4691      	mov	r9, r2
   27944:	0b3f      	lsrs	r7, r7, #12
   27946:	0d64      	lsrs	r4, r4, #21
   27948:	2001      	movs	r0, #1
   2794a:	429d      	cmp	r5, r3
   2794c:	d008      	beq.n	27960 <__eqdf2+0x40>
   2794e:	429c      	cmp	r4, r3
   27950:	d001      	beq.n	27956 <__eqdf2+0x36>
   27952:	42a5      	cmp	r5, r4
   27954:	d00b      	beq.n	2796e <__eqdf2+0x4e>
   27956:	bc1c      	pop	{r2, r3, r4}
   27958:	4690      	mov	r8, r2
   2795a:	4699      	mov	r9, r3
   2795c:	46a2      	mov	sl, r4
   2795e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   27960:	4663      	mov	r3, ip
   27962:	4333      	orrs	r3, r6
   27964:	d1f7      	bne.n	27956 <__eqdf2+0x36>
   27966:	42ac      	cmp	r4, r5
   27968:	d1f5      	bne.n	27956 <__eqdf2+0x36>
   2796a:	433a      	orrs	r2, r7
   2796c:	d1f3      	bne.n	27956 <__eqdf2+0x36>
   2796e:	2001      	movs	r0, #1
   27970:	42be      	cmp	r6, r7
   27972:	d1f0      	bne.n	27956 <__eqdf2+0x36>
   27974:	45c8      	cmp	r8, r9
   27976:	d1ee      	bne.n	27956 <__eqdf2+0x36>
   27978:	4551      	cmp	r1, sl
   2797a:	d007      	beq.n	2798c <__eqdf2+0x6c>
   2797c:	2d00      	cmp	r5, #0
   2797e:	d1ea      	bne.n	27956 <__eqdf2+0x36>
   27980:	4663      	mov	r3, ip
   27982:	431e      	orrs	r6, r3
   27984:	0030      	movs	r0, r6
   27986:	1e46      	subs	r6, r0, #1
   27988:	41b0      	sbcs	r0, r6
   2798a:	e7e4      	b.n	27956 <__eqdf2+0x36>
   2798c:	2000      	movs	r0, #0
   2798e:	e7e2      	b.n	27956 <__eqdf2+0x36>
   27990:	000007ff 	.word	0x000007ff

00027994 <__gedf2>:
   27994:	b5f0      	push	{r4, r5, r6, r7, lr}
   27996:	4645      	mov	r5, r8
   27998:	46de      	mov	lr, fp
   2799a:	4657      	mov	r7, sl
   2799c:	464e      	mov	r6, r9
   2799e:	b5e0      	push	{r5, r6, r7, lr}
   279a0:	031f      	lsls	r7, r3, #12
   279a2:	0b3d      	lsrs	r5, r7, #12
   279a4:	4f2c      	ldr	r7, [pc, #176]	; (27a58 <__gedf2+0xc4>)
   279a6:	030e      	lsls	r6, r1, #12
   279a8:	004c      	lsls	r4, r1, #1
   279aa:	46ab      	mov	fp, r5
   279ac:	005d      	lsls	r5, r3, #1
   279ae:	4684      	mov	ip, r0
   279b0:	0b36      	lsrs	r6, r6, #12
   279b2:	0d64      	lsrs	r4, r4, #21
   279b4:	0fc9      	lsrs	r1, r1, #31
   279b6:	4690      	mov	r8, r2
   279b8:	0d6d      	lsrs	r5, r5, #21
   279ba:	0fdb      	lsrs	r3, r3, #31
   279bc:	42bc      	cmp	r4, r7
   279be:	d02a      	beq.n	27a16 <__gedf2+0x82>
   279c0:	4f25      	ldr	r7, [pc, #148]	; (27a58 <__gedf2+0xc4>)
   279c2:	42bd      	cmp	r5, r7
   279c4:	d02d      	beq.n	27a22 <__gedf2+0x8e>
   279c6:	2c00      	cmp	r4, #0
   279c8:	d10f      	bne.n	279ea <__gedf2+0x56>
   279ca:	4330      	orrs	r0, r6
   279cc:	0007      	movs	r7, r0
   279ce:	4681      	mov	r9, r0
   279d0:	4278      	negs	r0, r7
   279d2:	4178      	adcs	r0, r7
   279d4:	b2c0      	uxtb	r0, r0
   279d6:	2d00      	cmp	r5, #0
   279d8:	d117      	bne.n	27a0a <__gedf2+0x76>
   279da:	465f      	mov	r7, fp
   279dc:	433a      	orrs	r2, r7
   279de:	d114      	bne.n	27a0a <__gedf2+0x76>
   279e0:	464b      	mov	r3, r9
   279e2:	2000      	movs	r0, #0
   279e4:	2b00      	cmp	r3, #0
   279e6:	d00a      	beq.n	279fe <__gedf2+0x6a>
   279e8:	e006      	b.n	279f8 <__gedf2+0x64>
   279ea:	2d00      	cmp	r5, #0
   279ec:	d102      	bne.n	279f4 <__gedf2+0x60>
   279ee:	4658      	mov	r0, fp
   279f0:	4302      	orrs	r2, r0
   279f2:	d001      	beq.n	279f8 <__gedf2+0x64>
   279f4:	4299      	cmp	r1, r3
   279f6:	d018      	beq.n	27a2a <__gedf2+0x96>
   279f8:	4248      	negs	r0, r1
   279fa:	2101      	movs	r1, #1
   279fc:	4308      	orrs	r0, r1
   279fe:	bc3c      	pop	{r2, r3, r4, r5}
   27a00:	4690      	mov	r8, r2
   27a02:	4699      	mov	r9, r3
   27a04:	46a2      	mov	sl, r4
   27a06:	46ab      	mov	fp, r5
   27a08:	bdf0      	pop	{r4, r5, r6, r7, pc}
   27a0a:	2800      	cmp	r0, #0
   27a0c:	d0f2      	beq.n	279f4 <__gedf2+0x60>
   27a0e:	2001      	movs	r0, #1
   27a10:	3b01      	subs	r3, #1
   27a12:	4318      	orrs	r0, r3
   27a14:	e7f3      	b.n	279fe <__gedf2+0x6a>
   27a16:	0037      	movs	r7, r6
   27a18:	4307      	orrs	r7, r0
   27a1a:	d0d1      	beq.n	279c0 <__gedf2+0x2c>
   27a1c:	2002      	movs	r0, #2
   27a1e:	4240      	negs	r0, r0
   27a20:	e7ed      	b.n	279fe <__gedf2+0x6a>
   27a22:	465f      	mov	r7, fp
   27a24:	4317      	orrs	r7, r2
   27a26:	d0ce      	beq.n	279c6 <__gedf2+0x32>
   27a28:	e7f8      	b.n	27a1c <__gedf2+0x88>
   27a2a:	42ac      	cmp	r4, r5
   27a2c:	dce4      	bgt.n	279f8 <__gedf2+0x64>
   27a2e:	da03      	bge.n	27a38 <__gedf2+0xa4>
   27a30:	1e48      	subs	r0, r1, #1
   27a32:	2101      	movs	r1, #1
   27a34:	4308      	orrs	r0, r1
   27a36:	e7e2      	b.n	279fe <__gedf2+0x6a>
   27a38:	455e      	cmp	r6, fp
   27a3a:	d8dd      	bhi.n	279f8 <__gedf2+0x64>
   27a3c:	d006      	beq.n	27a4c <__gedf2+0xb8>
   27a3e:	2000      	movs	r0, #0
   27a40:	455e      	cmp	r6, fp
   27a42:	d2dc      	bcs.n	279fe <__gedf2+0x6a>
   27a44:	2301      	movs	r3, #1
   27a46:	1e48      	subs	r0, r1, #1
   27a48:	4318      	orrs	r0, r3
   27a4a:	e7d8      	b.n	279fe <__gedf2+0x6a>
   27a4c:	45c4      	cmp	ip, r8
   27a4e:	d8d3      	bhi.n	279f8 <__gedf2+0x64>
   27a50:	2000      	movs	r0, #0
   27a52:	45c4      	cmp	ip, r8
   27a54:	d3f6      	bcc.n	27a44 <__gedf2+0xb0>
   27a56:	e7d2      	b.n	279fe <__gedf2+0x6a>
   27a58:	000007ff 	.word	0x000007ff

00027a5c <__ledf2>:
   27a5c:	b5f0      	push	{r4, r5, r6, r7, lr}
   27a5e:	464e      	mov	r6, r9
   27a60:	4645      	mov	r5, r8
   27a62:	46de      	mov	lr, fp
   27a64:	4657      	mov	r7, sl
   27a66:	005c      	lsls	r4, r3, #1
   27a68:	b5e0      	push	{r5, r6, r7, lr}
   27a6a:	031f      	lsls	r7, r3, #12
   27a6c:	0fdb      	lsrs	r3, r3, #31
   27a6e:	4699      	mov	r9, r3
   27a70:	4b2a      	ldr	r3, [pc, #168]	; (27b1c <__ledf2+0xc0>)
   27a72:	030e      	lsls	r6, r1, #12
   27a74:	004d      	lsls	r5, r1, #1
   27a76:	0fc9      	lsrs	r1, r1, #31
   27a78:	4684      	mov	ip, r0
   27a7a:	0b36      	lsrs	r6, r6, #12
   27a7c:	0d6d      	lsrs	r5, r5, #21
   27a7e:	468b      	mov	fp, r1
   27a80:	4690      	mov	r8, r2
   27a82:	0b3f      	lsrs	r7, r7, #12
   27a84:	0d64      	lsrs	r4, r4, #21
   27a86:	429d      	cmp	r5, r3
   27a88:	d020      	beq.n	27acc <__ledf2+0x70>
   27a8a:	4b24      	ldr	r3, [pc, #144]	; (27b1c <__ledf2+0xc0>)
   27a8c:	429c      	cmp	r4, r3
   27a8e:	d022      	beq.n	27ad6 <__ledf2+0x7a>
   27a90:	2d00      	cmp	r5, #0
   27a92:	d112      	bne.n	27aba <__ledf2+0x5e>
   27a94:	4330      	orrs	r0, r6
   27a96:	4243      	negs	r3, r0
   27a98:	4143      	adcs	r3, r0
   27a9a:	b2db      	uxtb	r3, r3
   27a9c:	2c00      	cmp	r4, #0
   27a9e:	d01f      	beq.n	27ae0 <__ledf2+0x84>
   27aa0:	2b00      	cmp	r3, #0
   27aa2:	d00c      	beq.n	27abe <__ledf2+0x62>
   27aa4:	464b      	mov	r3, r9
   27aa6:	2001      	movs	r0, #1
   27aa8:	3b01      	subs	r3, #1
   27aaa:	4303      	orrs	r3, r0
   27aac:	0018      	movs	r0, r3
   27aae:	bc3c      	pop	{r2, r3, r4, r5}
   27ab0:	4690      	mov	r8, r2
   27ab2:	4699      	mov	r9, r3
   27ab4:	46a2      	mov	sl, r4
   27ab6:	46ab      	mov	fp, r5
   27ab8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   27aba:	2c00      	cmp	r4, #0
   27abc:	d016      	beq.n	27aec <__ledf2+0x90>
   27abe:	45cb      	cmp	fp, r9
   27ac0:	d017      	beq.n	27af2 <__ledf2+0x96>
   27ac2:	465b      	mov	r3, fp
   27ac4:	4259      	negs	r1, r3
   27ac6:	2301      	movs	r3, #1
   27ac8:	430b      	orrs	r3, r1
   27aca:	e7ef      	b.n	27aac <__ledf2+0x50>
   27acc:	0031      	movs	r1, r6
   27ace:	2302      	movs	r3, #2
   27ad0:	4301      	orrs	r1, r0
   27ad2:	d1eb      	bne.n	27aac <__ledf2+0x50>
   27ad4:	e7d9      	b.n	27a8a <__ledf2+0x2e>
   27ad6:	0039      	movs	r1, r7
   27ad8:	2302      	movs	r3, #2
   27ada:	4311      	orrs	r1, r2
   27adc:	d1e6      	bne.n	27aac <__ledf2+0x50>
   27ade:	e7d7      	b.n	27a90 <__ledf2+0x34>
   27ae0:	433a      	orrs	r2, r7
   27ae2:	d1dd      	bne.n	27aa0 <__ledf2+0x44>
   27ae4:	2300      	movs	r3, #0
   27ae6:	2800      	cmp	r0, #0
   27ae8:	d0e0      	beq.n	27aac <__ledf2+0x50>
   27aea:	e7ea      	b.n	27ac2 <__ledf2+0x66>
   27aec:	433a      	orrs	r2, r7
   27aee:	d1e6      	bne.n	27abe <__ledf2+0x62>
   27af0:	e7e7      	b.n	27ac2 <__ledf2+0x66>
   27af2:	42a5      	cmp	r5, r4
   27af4:	dce5      	bgt.n	27ac2 <__ledf2+0x66>
   27af6:	db05      	blt.n	27b04 <__ledf2+0xa8>
   27af8:	42be      	cmp	r6, r7
   27afa:	d8e2      	bhi.n	27ac2 <__ledf2+0x66>
   27afc:	d007      	beq.n	27b0e <__ledf2+0xb2>
   27afe:	2300      	movs	r3, #0
   27b00:	42be      	cmp	r6, r7
   27b02:	d2d3      	bcs.n	27aac <__ledf2+0x50>
   27b04:	4659      	mov	r1, fp
   27b06:	2301      	movs	r3, #1
   27b08:	3901      	subs	r1, #1
   27b0a:	430b      	orrs	r3, r1
   27b0c:	e7ce      	b.n	27aac <__ledf2+0x50>
   27b0e:	45c4      	cmp	ip, r8
   27b10:	d8d7      	bhi.n	27ac2 <__ledf2+0x66>
   27b12:	2300      	movs	r3, #0
   27b14:	45c4      	cmp	ip, r8
   27b16:	d3f5      	bcc.n	27b04 <__ledf2+0xa8>
   27b18:	e7c8      	b.n	27aac <__ledf2+0x50>
   27b1a:	46c0      	nop			; (mov r8, r8)
   27b1c:	000007ff 	.word	0x000007ff

00027b20 <__aeabi_dmul>:
   27b20:	b5f0      	push	{r4, r5, r6, r7, lr}
   27b22:	4657      	mov	r7, sl
   27b24:	4645      	mov	r5, r8
   27b26:	46de      	mov	lr, fp
   27b28:	464e      	mov	r6, r9
   27b2a:	b5e0      	push	{r5, r6, r7, lr}
   27b2c:	030c      	lsls	r4, r1, #12
   27b2e:	4698      	mov	r8, r3
   27b30:	004e      	lsls	r6, r1, #1
   27b32:	0b23      	lsrs	r3, r4, #12
   27b34:	b087      	sub	sp, #28
   27b36:	0007      	movs	r7, r0
   27b38:	4692      	mov	sl, r2
   27b3a:	469b      	mov	fp, r3
   27b3c:	0d76      	lsrs	r6, r6, #21
   27b3e:	0fcd      	lsrs	r5, r1, #31
   27b40:	2e00      	cmp	r6, #0
   27b42:	d06b      	beq.n	27c1c <__aeabi_dmul+0xfc>
   27b44:	4b6d      	ldr	r3, [pc, #436]	; (27cfc <__aeabi_dmul+0x1dc>)
   27b46:	429e      	cmp	r6, r3
   27b48:	d035      	beq.n	27bb6 <__aeabi_dmul+0x96>
   27b4a:	2480      	movs	r4, #128	; 0x80
   27b4c:	465b      	mov	r3, fp
   27b4e:	0f42      	lsrs	r2, r0, #29
   27b50:	0424      	lsls	r4, r4, #16
   27b52:	00db      	lsls	r3, r3, #3
   27b54:	4314      	orrs	r4, r2
   27b56:	431c      	orrs	r4, r3
   27b58:	00c3      	lsls	r3, r0, #3
   27b5a:	4699      	mov	r9, r3
   27b5c:	4b68      	ldr	r3, [pc, #416]	; (27d00 <__aeabi_dmul+0x1e0>)
   27b5e:	46a3      	mov	fp, r4
   27b60:	469c      	mov	ip, r3
   27b62:	2300      	movs	r3, #0
   27b64:	2700      	movs	r7, #0
   27b66:	4466      	add	r6, ip
   27b68:	9302      	str	r3, [sp, #8]
   27b6a:	4643      	mov	r3, r8
   27b6c:	031c      	lsls	r4, r3, #12
   27b6e:	005a      	lsls	r2, r3, #1
   27b70:	0fdb      	lsrs	r3, r3, #31
   27b72:	4650      	mov	r0, sl
   27b74:	0b24      	lsrs	r4, r4, #12
   27b76:	0d52      	lsrs	r2, r2, #21
   27b78:	4698      	mov	r8, r3
   27b7a:	d100      	bne.n	27b7e <__aeabi_dmul+0x5e>
   27b7c:	e076      	b.n	27c6c <__aeabi_dmul+0x14c>
   27b7e:	4b5f      	ldr	r3, [pc, #380]	; (27cfc <__aeabi_dmul+0x1dc>)
   27b80:	429a      	cmp	r2, r3
   27b82:	d06d      	beq.n	27c60 <__aeabi_dmul+0x140>
   27b84:	2380      	movs	r3, #128	; 0x80
   27b86:	0f41      	lsrs	r1, r0, #29
   27b88:	041b      	lsls	r3, r3, #16
   27b8a:	430b      	orrs	r3, r1
   27b8c:	495c      	ldr	r1, [pc, #368]	; (27d00 <__aeabi_dmul+0x1e0>)
   27b8e:	00e4      	lsls	r4, r4, #3
   27b90:	468c      	mov	ip, r1
   27b92:	431c      	orrs	r4, r3
   27b94:	00c3      	lsls	r3, r0, #3
   27b96:	2000      	movs	r0, #0
   27b98:	4462      	add	r2, ip
   27b9a:	4641      	mov	r1, r8
   27b9c:	18b6      	adds	r6, r6, r2
   27b9e:	4069      	eors	r1, r5
   27ba0:	1c72      	adds	r2, r6, #1
   27ba2:	9101      	str	r1, [sp, #4]
   27ba4:	4694      	mov	ip, r2
   27ba6:	4307      	orrs	r7, r0
   27ba8:	2f0f      	cmp	r7, #15
   27baa:	d900      	bls.n	27bae <__aeabi_dmul+0x8e>
   27bac:	e0b0      	b.n	27d10 <__aeabi_dmul+0x1f0>
   27bae:	4a55      	ldr	r2, [pc, #340]	; (27d04 <__aeabi_dmul+0x1e4>)
   27bb0:	00bf      	lsls	r7, r7, #2
   27bb2:	59d2      	ldr	r2, [r2, r7]
   27bb4:	4697      	mov	pc, r2
   27bb6:	465b      	mov	r3, fp
   27bb8:	4303      	orrs	r3, r0
   27bba:	4699      	mov	r9, r3
   27bbc:	d000      	beq.n	27bc0 <__aeabi_dmul+0xa0>
   27bbe:	e087      	b.n	27cd0 <__aeabi_dmul+0x1b0>
   27bc0:	2300      	movs	r3, #0
   27bc2:	469b      	mov	fp, r3
   27bc4:	3302      	adds	r3, #2
   27bc6:	2708      	movs	r7, #8
   27bc8:	9302      	str	r3, [sp, #8]
   27bca:	e7ce      	b.n	27b6a <__aeabi_dmul+0x4a>
   27bcc:	4642      	mov	r2, r8
   27bce:	9201      	str	r2, [sp, #4]
   27bd0:	2802      	cmp	r0, #2
   27bd2:	d067      	beq.n	27ca4 <__aeabi_dmul+0x184>
   27bd4:	2803      	cmp	r0, #3
   27bd6:	d100      	bne.n	27bda <__aeabi_dmul+0xba>
   27bd8:	e20e      	b.n	27ff8 <__aeabi_dmul+0x4d8>
   27bda:	2801      	cmp	r0, #1
   27bdc:	d000      	beq.n	27be0 <__aeabi_dmul+0xc0>
   27bde:	e162      	b.n	27ea6 <__aeabi_dmul+0x386>
   27be0:	2300      	movs	r3, #0
   27be2:	2400      	movs	r4, #0
   27be4:	2200      	movs	r2, #0
   27be6:	4699      	mov	r9, r3
   27be8:	9901      	ldr	r1, [sp, #4]
   27bea:	4001      	ands	r1, r0
   27bec:	b2cd      	uxtb	r5, r1
   27bee:	2100      	movs	r1, #0
   27bf0:	0312      	lsls	r2, r2, #12
   27bf2:	0d0b      	lsrs	r3, r1, #20
   27bf4:	0b12      	lsrs	r2, r2, #12
   27bf6:	051b      	lsls	r3, r3, #20
   27bf8:	4313      	orrs	r3, r2
   27bfa:	4a43      	ldr	r2, [pc, #268]	; (27d08 <__aeabi_dmul+0x1e8>)
   27bfc:	0524      	lsls	r4, r4, #20
   27bfe:	4013      	ands	r3, r2
   27c00:	431c      	orrs	r4, r3
   27c02:	0064      	lsls	r4, r4, #1
   27c04:	07ed      	lsls	r5, r5, #31
   27c06:	0864      	lsrs	r4, r4, #1
   27c08:	432c      	orrs	r4, r5
   27c0a:	4648      	mov	r0, r9
   27c0c:	0021      	movs	r1, r4
   27c0e:	b007      	add	sp, #28
   27c10:	bc3c      	pop	{r2, r3, r4, r5}
   27c12:	4690      	mov	r8, r2
   27c14:	4699      	mov	r9, r3
   27c16:	46a2      	mov	sl, r4
   27c18:	46ab      	mov	fp, r5
   27c1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   27c1c:	4303      	orrs	r3, r0
   27c1e:	4699      	mov	r9, r3
   27c20:	d04f      	beq.n	27cc2 <__aeabi_dmul+0x1a2>
   27c22:	465b      	mov	r3, fp
   27c24:	2b00      	cmp	r3, #0
   27c26:	d100      	bne.n	27c2a <__aeabi_dmul+0x10a>
   27c28:	e189      	b.n	27f3e <__aeabi_dmul+0x41e>
   27c2a:	4658      	mov	r0, fp
   27c2c:	f000 fe2e 	bl	2888c <__clzsi2>
   27c30:	0003      	movs	r3, r0
   27c32:	3b0b      	subs	r3, #11
   27c34:	2b1c      	cmp	r3, #28
   27c36:	dd00      	ble.n	27c3a <__aeabi_dmul+0x11a>
   27c38:	e17a      	b.n	27f30 <__aeabi_dmul+0x410>
   27c3a:	221d      	movs	r2, #29
   27c3c:	1ad3      	subs	r3, r2, r3
   27c3e:	003a      	movs	r2, r7
   27c40:	0001      	movs	r1, r0
   27c42:	465c      	mov	r4, fp
   27c44:	40da      	lsrs	r2, r3
   27c46:	3908      	subs	r1, #8
   27c48:	408c      	lsls	r4, r1
   27c4a:	0013      	movs	r3, r2
   27c4c:	408f      	lsls	r7, r1
   27c4e:	4323      	orrs	r3, r4
   27c50:	469b      	mov	fp, r3
   27c52:	46b9      	mov	r9, r7
   27c54:	2300      	movs	r3, #0
   27c56:	4e2d      	ldr	r6, [pc, #180]	; (27d0c <__aeabi_dmul+0x1ec>)
   27c58:	2700      	movs	r7, #0
   27c5a:	1a36      	subs	r6, r6, r0
   27c5c:	9302      	str	r3, [sp, #8]
   27c5e:	e784      	b.n	27b6a <__aeabi_dmul+0x4a>
   27c60:	4653      	mov	r3, sl
   27c62:	4323      	orrs	r3, r4
   27c64:	d12a      	bne.n	27cbc <__aeabi_dmul+0x19c>
   27c66:	2400      	movs	r4, #0
   27c68:	2002      	movs	r0, #2
   27c6a:	e796      	b.n	27b9a <__aeabi_dmul+0x7a>
   27c6c:	4653      	mov	r3, sl
   27c6e:	4323      	orrs	r3, r4
   27c70:	d020      	beq.n	27cb4 <__aeabi_dmul+0x194>
   27c72:	2c00      	cmp	r4, #0
   27c74:	d100      	bne.n	27c78 <__aeabi_dmul+0x158>
   27c76:	e157      	b.n	27f28 <__aeabi_dmul+0x408>
   27c78:	0020      	movs	r0, r4
   27c7a:	f000 fe07 	bl	2888c <__clzsi2>
   27c7e:	0003      	movs	r3, r0
   27c80:	3b0b      	subs	r3, #11
   27c82:	2b1c      	cmp	r3, #28
   27c84:	dd00      	ble.n	27c88 <__aeabi_dmul+0x168>
   27c86:	e149      	b.n	27f1c <__aeabi_dmul+0x3fc>
   27c88:	211d      	movs	r1, #29
   27c8a:	1acb      	subs	r3, r1, r3
   27c8c:	4651      	mov	r1, sl
   27c8e:	0002      	movs	r2, r0
   27c90:	40d9      	lsrs	r1, r3
   27c92:	4653      	mov	r3, sl
   27c94:	3a08      	subs	r2, #8
   27c96:	4094      	lsls	r4, r2
   27c98:	4093      	lsls	r3, r2
   27c9a:	430c      	orrs	r4, r1
   27c9c:	4a1b      	ldr	r2, [pc, #108]	; (27d0c <__aeabi_dmul+0x1ec>)
   27c9e:	1a12      	subs	r2, r2, r0
   27ca0:	2000      	movs	r0, #0
   27ca2:	e77a      	b.n	27b9a <__aeabi_dmul+0x7a>
   27ca4:	2501      	movs	r5, #1
   27ca6:	9b01      	ldr	r3, [sp, #4]
   27ca8:	4c14      	ldr	r4, [pc, #80]	; (27cfc <__aeabi_dmul+0x1dc>)
   27caa:	401d      	ands	r5, r3
   27cac:	2300      	movs	r3, #0
   27cae:	2200      	movs	r2, #0
   27cb0:	4699      	mov	r9, r3
   27cb2:	e79c      	b.n	27bee <__aeabi_dmul+0xce>
   27cb4:	2400      	movs	r4, #0
   27cb6:	2200      	movs	r2, #0
   27cb8:	2001      	movs	r0, #1
   27cba:	e76e      	b.n	27b9a <__aeabi_dmul+0x7a>
   27cbc:	4653      	mov	r3, sl
   27cbe:	2003      	movs	r0, #3
   27cc0:	e76b      	b.n	27b9a <__aeabi_dmul+0x7a>
   27cc2:	2300      	movs	r3, #0
   27cc4:	469b      	mov	fp, r3
   27cc6:	3301      	adds	r3, #1
   27cc8:	2704      	movs	r7, #4
   27cca:	2600      	movs	r6, #0
   27ccc:	9302      	str	r3, [sp, #8]
   27cce:	e74c      	b.n	27b6a <__aeabi_dmul+0x4a>
   27cd0:	2303      	movs	r3, #3
   27cd2:	4681      	mov	r9, r0
   27cd4:	270c      	movs	r7, #12
   27cd6:	9302      	str	r3, [sp, #8]
   27cd8:	e747      	b.n	27b6a <__aeabi_dmul+0x4a>
   27cda:	2280      	movs	r2, #128	; 0x80
   27cdc:	2300      	movs	r3, #0
   27cde:	2500      	movs	r5, #0
   27ce0:	0312      	lsls	r2, r2, #12
   27ce2:	4699      	mov	r9, r3
   27ce4:	4c05      	ldr	r4, [pc, #20]	; (27cfc <__aeabi_dmul+0x1dc>)
   27ce6:	e782      	b.n	27bee <__aeabi_dmul+0xce>
   27ce8:	465c      	mov	r4, fp
   27cea:	464b      	mov	r3, r9
   27cec:	9802      	ldr	r0, [sp, #8]
   27cee:	e76f      	b.n	27bd0 <__aeabi_dmul+0xb0>
   27cf0:	465c      	mov	r4, fp
   27cf2:	464b      	mov	r3, r9
   27cf4:	9501      	str	r5, [sp, #4]
   27cf6:	9802      	ldr	r0, [sp, #8]
   27cf8:	e76a      	b.n	27bd0 <__aeabi_dmul+0xb0>
   27cfa:	46c0      	nop			; (mov r8, r8)
   27cfc:	000007ff 	.word	0x000007ff
   27d00:	fffffc01 	.word	0xfffffc01
   27d04:	0002a918 	.word	0x0002a918
   27d08:	800fffff 	.word	0x800fffff
   27d0c:	fffffc0d 	.word	0xfffffc0d
   27d10:	464a      	mov	r2, r9
   27d12:	4649      	mov	r1, r9
   27d14:	0c17      	lsrs	r7, r2, #16
   27d16:	0c1a      	lsrs	r2, r3, #16
   27d18:	041b      	lsls	r3, r3, #16
   27d1a:	0c1b      	lsrs	r3, r3, #16
   27d1c:	0408      	lsls	r0, r1, #16
   27d1e:	0019      	movs	r1, r3
   27d20:	0c00      	lsrs	r0, r0, #16
   27d22:	4341      	muls	r1, r0
   27d24:	0015      	movs	r5, r2
   27d26:	4688      	mov	r8, r1
   27d28:	0019      	movs	r1, r3
   27d2a:	437d      	muls	r5, r7
   27d2c:	4379      	muls	r1, r7
   27d2e:	9503      	str	r5, [sp, #12]
   27d30:	4689      	mov	r9, r1
   27d32:	0029      	movs	r1, r5
   27d34:	0015      	movs	r5, r2
   27d36:	4345      	muls	r5, r0
   27d38:	444d      	add	r5, r9
   27d3a:	9502      	str	r5, [sp, #8]
   27d3c:	4645      	mov	r5, r8
   27d3e:	0c2d      	lsrs	r5, r5, #16
   27d40:	46aa      	mov	sl, r5
   27d42:	9d02      	ldr	r5, [sp, #8]
   27d44:	4455      	add	r5, sl
   27d46:	45a9      	cmp	r9, r5
   27d48:	d906      	bls.n	27d58 <__aeabi_dmul+0x238>
   27d4a:	468a      	mov	sl, r1
   27d4c:	2180      	movs	r1, #128	; 0x80
   27d4e:	0249      	lsls	r1, r1, #9
   27d50:	4689      	mov	r9, r1
   27d52:	44ca      	add	sl, r9
   27d54:	4651      	mov	r1, sl
   27d56:	9103      	str	r1, [sp, #12]
   27d58:	0c29      	lsrs	r1, r5, #16
   27d5a:	9104      	str	r1, [sp, #16]
   27d5c:	4641      	mov	r1, r8
   27d5e:	0409      	lsls	r1, r1, #16
   27d60:	042d      	lsls	r5, r5, #16
   27d62:	0c09      	lsrs	r1, r1, #16
   27d64:	4688      	mov	r8, r1
   27d66:	0029      	movs	r1, r5
   27d68:	0c25      	lsrs	r5, r4, #16
   27d6a:	0424      	lsls	r4, r4, #16
   27d6c:	4441      	add	r1, r8
   27d6e:	0c24      	lsrs	r4, r4, #16
   27d70:	9105      	str	r1, [sp, #20]
   27d72:	0021      	movs	r1, r4
   27d74:	4341      	muls	r1, r0
   27d76:	4688      	mov	r8, r1
   27d78:	0021      	movs	r1, r4
   27d7a:	4379      	muls	r1, r7
   27d7c:	468a      	mov	sl, r1
   27d7e:	4368      	muls	r0, r5
   27d80:	4641      	mov	r1, r8
   27d82:	4450      	add	r0, sl
   27d84:	4681      	mov	r9, r0
   27d86:	0c08      	lsrs	r0, r1, #16
   27d88:	4448      	add	r0, r9
   27d8a:	436f      	muls	r7, r5
   27d8c:	4582      	cmp	sl, r0
   27d8e:	d903      	bls.n	27d98 <__aeabi_dmul+0x278>
   27d90:	2180      	movs	r1, #128	; 0x80
   27d92:	0249      	lsls	r1, r1, #9
   27d94:	4689      	mov	r9, r1
   27d96:	444f      	add	r7, r9
   27d98:	0c01      	lsrs	r1, r0, #16
   27d9a:	4689      	mov	r9, r1
   27d9c:	0039      	movs	r1, r7
   27d9e:	4449      	add	r1, r9
   27da0:	9102      	str	r1, [sp, #8]
   27da2:	4641      	mov	r1, r8
   27da4:	040f      	lsls	r7, r1, #16
   27da6:	9904      	ldr	r1, [sp, #16]
   27da8:	0c3f      	lsrs	r7, r7, #16
   27daa:	4688      	mov	r8, r1
   27dac:	0400      	lsls	r0, r0, #16
   27dae:	19c0      	adds	r0, r0, r7
   27db0:	4480      	add	r8, r0
   27db2:	4641      	mov	r1, r8
   27db4:	9104      	str	r1, [sp, #16]
   27db6:	4659      	mov	r1, fp
   27db8:	0c0f      	lsrs	r7, r1, #16
   27dba:	0409      	lsls	r1, r1, #16
   27dbc:	0c09      	lsrs	r1, r1, #16
   27dbe:	4688      	mov	r8, r1
   27dc0:	4359      	muls	r1, r3
   27dc2:	468a      	mov	sl, r1
   27dc4:	0039      	movs	r1, r7
   27dc6:	4351      	muls	r1, r2
   27dc8:	4689      	mov	r9, r1
   27dca:	4641      	mov	r1, r8
   27dcc:	434a      	muls	r2, r1
   27dce:	4651      	mov	r1, sl
   27dd0:	0c09      	lsrs	r1, r1, #16
   27dd2:	468b      	mov	fp, r1
   27dd4:	437b      	muls	r3, r7
   27dd6:	18d2      	adds	r2, r2, r3
   27dd8:	445a      	add	r2, fp
   27dda:	4293      	cmp	r3, r2
   27ddc:	d903      	bls.n	27de6 <__aeabi_dmul+0x2c6>
   27dde:	2380      	movs	r3, #128	; 0x80
   27de0:	025b      	lsls	r3, r3, #9
   27de2:	469b      	mov	fp, r3
   27de4:	44d9      	add	r9, fp
   27de6:	4651      	mov	r1, sl
   27de8:	0409      	lsls	r1, r1, #16
   27dea:	0c09      	lsrs	r1, r1, #16
   27dec:	468a      	mov	sl, r1
   27dee:	4641      	mov	r1, r8
   27df0:	4361      	muls	r1, r4
   27df2:	437c      	muls	r4, r7
   27df4:	0c13      	lsrs	r3, r2, #16
   27df6:	0412      	lsls	r2, r2, #16
   27df8:	444b      	add	r3, r9
   27dfa:	4452      	add	r2, sl
   27dfc:	46a1      	mov	r9, r4
   27dfe:	468a      	mov	sl, r1
   27e00:	003c      	movs	r4, r7
   27e02:	4641      	mov	r1, r8
   27e04:	436c      	muls	r4, r5
   27e06:	434d      	muls	r5, r1
   27e08:	4651      	mov	r1, sl
   27e0a:	444d      	add	r5, r9
   27e0c:	0c0f      	lsrs	r7, r1, #16
   27e0e:	197d      	adds	r5, r7, r5
   27e10:	45a9      	cmp	r9, r5
   27e12:	d903      	bls.n	27e1c <__aeabi_dmul+0x2fc>
   27e14:	2180      	movs	r1, #128	; 0x80
   27e16:	0249      	lsls	r1, r1, #9
   27e18:	4688      	mov	r8, r1
   27e1a:	4444      	add	r4, r8
   27e1c:	9f04      	ldr	r7, [sp, #16]
   27e1e:	9903      	ldr	r1, [sp, #12]
   27e20:	46b8      	mov	r8, r7
   27e22:	4441      	add	r1, r8
   27e24:	468b      	mov	fp, r1
   27e26:	4583      	cmp	fp, r0
   27e28:	4180      	sbcs	r0, r0
   27e2a:	4241      	negs	r1, r0
   27e2c:	4688      	mov	r8, r1
   27e2e:	4651      	mov	r1, sl
   27e30:	0408      	lsls	r0, r1, #16
   27e32:	042f      	lsls	r7, r5, #16
   27e34:	0c00      	lsrs	r0, r0, #16
   27e36:	183f      	adds	r7, r7, r0
   27e38:	4658      	mov	r0, fp
   27e3a:	9902      	ldr	r1, [sp, #8]
   27e3c:	1810      	adds	r0, r2, r0
   27e3e:	4689      	mov	r9, r1
   27e40:	4290      	cmp	r0, r2
   27e42:	4192      	sbcs	r2, r2
   27e44:	444f      	add	r7, r9
   27e46:	46ba      	mov	sl, r7
   27e48:	4252      	negs	r2, r2
   27e4a:	4699      	mov	r9, r3
   27e4c:	4693      	mov	fp, r2
   27e4e:	44c2      	add	sl, r8
   27e50:	44d1      	add	r9, sl
   27e52:	44cb      	add	fp, r9
   27e54:	428f      	cmp	r7, r1
   27e56:	41bf      	sbcs	r7, r7
   27e58:	45c2      	cmp	sl, r8
   27e5a:	4189      	sbcs	r1, r1
   27e5c:	4599      	cmp	r9, r3
   27e5e:	419b      	sbcs	r3, r3
   27e60:	4593      	cmp	fp, r2
   27e62:	4192      	sbcs	r2, r2
   27e64:	427f      	negs	r7, r7
   27e66:	4249      	negs	r1, r1
   27e68:	0c2d      	lsrs	r5, r5, #16
   27e6a:	4252      	negs	r2, r2
   27e6c:	430f      	orrs	r7, r1
   27e6e:	425b      	negs	r3, r3
   27e70:	4313      	orrs	r3, r2
   27e72:	197f      	adds	r7, r7, r5
   27e74:	18ff      	adds	r7, r7, r3
   27e76:	465b      	mov	r3, fp
   27e78:	193c      	adds	r4, r7, r4
   27e7a:	0ddb      	lsrs	r3, r3, #23
   27e7c:	9a05      	ldr	r2, [sp, #20]
   27e7e:	0264      	lsls	r4, r4, #9
   27e80:	431c      	orrs	r4, r3
   27e82:	0243      	lsls	r3, r0, #9
   27e84:	4313      	orrs	r3, r2
   27e86:	1e5d      	subs	r5, r3, #1
   27e88:	41ab      	sbcs	r3, r5
   27e8a:	465a      	mov	r2, fp
   27e8c:	0dc0      	lsrs	r0, r0, #23
   27e8e:	4303      	orrs	r3, r0
   27e90:	0252      	lsls	r2, r2, #9
   27e92:	4313      	orrs	r3, r2
   27e94:	01e2      	lsls	r2, r4, #7
   27e96:	d556      	bpl.n	27f46 <__aeabi_dmul+0x426>
   27e98:	2001      	movs	r0, #1
   27e9a:	085a      	lsrs	r2, r3, #1
   27e9c:	4003      	ands	r3, r0
   27e9e:	4313      	orrs	r3, r2
   27ea0:	07e2      	lsls	r2, r4, #31
   27ea2:	4313      	orrs	r3, r2
   27ea4:	0864      	lsrs	r4, r4, #1
   27ea6:	485a      	ldr	r0, [pc, #360]	; (28010 <__aeabi_dmul+0x4f0>)
   27ea8:	4460      	add	r0, ip
   27eaa:	2800      	cmp	r0, #0
   27eac:	dd4d      	ble.n	27f4a <__aeabi_dmul+0x42a>
   27eae:	075a      	lsls	r2, r3, #29
   27eb0:	d009      	beq.n	27ec6 <__aeabi_dmul+0x3a6>
   27eb2:	220f      	movs	r2, #15
   27eb4:	401a      	ands	r2, r3
   27eb6:	2a04      	cmp	r2, #4
   27eb8:	d005      	beq.n	27ec6 <__aeabi_dmul+0x3a6>
   27eba:	1d1a      	adds	r2, r3, #4
   27ebc:	429a      	cmp	r2, r3
   27ebe:	419b      	sbcs	r3, r3
   27ec0:	425b      	negs	r3, r3
   27ec2:	18e4      	adds	r4, r4, r3
   27ec4:	0013      	movs	r3, r2
   27ec6:	01e2      	lsls	r2, r4, #7
   27ec8:	d504      	bpl.n	27ed4 <__aeabi_dmul+0x3b4>
   27eca:	2080      	movs	r0, #128	; 0x80
   27ecc:	4a51      	ldr	r2, [pc, #324]	; (28014 <__aeabi_dmul+0x4f4>)
   27ece:	00c0      	lsls	r0, r0, #3
   27ed0:	4014      	ands	r4, r2
   27ed2:	4460      	add	r0, ip
   27ed4:	4a50      	ldr	r2, [pc, #320]	; (28018 <__aeabi_dmul+0x4f8>)
   27ed6:	4290      	cmp	r0, r2
   27ed8:	dd00      	ble.n	27edc <__aeabi_dmul+0x3bc>
   27eda:	e6e3      	b.n	27ca4 <__aeabi_dmul+0x184>
   27edc:	2501      	movs	r5, #1
   27ede:	08db      	lsrs	r3, r3, #3
   27ee0:	0762      	lsls	r2, r4, #29
   27ee2:	431a      	orrs	r2, r3
   27ee4:	0264      	lsls	r4, r4, #9
   27ee6:	9b01      	ldr	r3, [sp, #4]
   27ee8:	4691      	mov	r9, r2
   27eea:	0b22      	lsrs	r2, r4, #12
   27eec:	0544      	lsls	r4, r0, #21
   27eee:	0d64      	lsrs	r4, r4, #21
   27ef0:	401d      	ands	r5, r3
   27ef2:	e67c      	b.n	27bee <__aeabi_dmul+0xce>
   27ef4:	2280      	movs	r2, #128	; 0x80
   27ef6:	4659      	mov	r1, fp
   27ef8:	0312      	lsls	r2, r2, #12
   27efa:	4211      	tst	r1, r2
   27efc:	d008      	beq.n	27f10 <__aeabi_dmul+0x3f0>
   27efe:	4214      	tst	r4, r2
   27f00:	d106      	bne.n	27f10 <__aeabi_dmul+0x3f0>
   27f02:	4322      	orrs	r2, r4
   27f04:	0312      	lsls	r2, r2, #12
   27f06:	0b12      	lsrs	r2, r2, #12
   27f08:	4645      	mov	r5, r8
   27f0a:	4699      	mov	r9, r3
   27f0c:	4c43      	ldr	r4, [pc, #268]	; (2801c <__aeabi_dmul+0x4fc>)
   27f0e:	e66e      	b.n	27bee <__aeabi_dmul+0xce>
   27f10:	465b      	mov	r3, fp
   27f12:	431a      	orrs	r2, r3
   27f14:	0312      	lsls	r2, r2, #12
   27f16:	0b12      	lsrs	r2, r2, #12
   27f18:	4c40      	ldr	r4, [pc, #256]	; (2801c <__aeabi_dmul+0x4fc>)
   27f1a:	e668      	b.n	27bee <__aeabi_dmul+0xce>
   27f1c:	0003      	movs	r3, r0
   27f1e:	4654      	mov	r4, sl
   27f20:	3b28      	subs	r3, #40	; 0x28
   27f22:	409c      	lsls	r4, r3
   27f24:	2300      	movs	r3, #0
   27f26:	e6b9      	b.n	27c9c <__aeabi_dmul+0x17c>
   27f28:	f000 fcb0 	bl	2888c <__clzsi2>
   27f2c:	3020      	adds	r0, #32
   27f2e:	e6a6      	b.n	27c7e <__aeabi_dmul+0x15e>
   27f30:	0003      	movs	r3, r0
   27f32:	3b28      	subs	r3, #40	; 0x28
   27f34:	409f      	lsls	r7, r3
   27f36:	2300      	movs	r3, #0
   27f38:	46bb      	mov	fp, r7
   27f3a:	4699      	mov	r9, r3
   27f3c:	e68a      	b.n	27c54 <__aeabi_dmul+0x134>
   27f3e:	f000 fca5 	bl	2888c <__clzsi2>
   27f42:	3020      	adds	r0, #32
   27f44:	e674      	b.n	27c30 <__aeabi_dmul+0x110>
   27f46:	46b4      	mov	ip, r6
   27f48:	e7ad      	b.n	27ea6 <__aeabi_dmul+0x386>
   27f4a:	2501      	movs	r5, #1
   27f4c:	1a2a      	subs	r2, r5, r0
   27f4e:	2a38      	cmp	r2, #56	; 0x38
   27f50:	dd06      	ble.n	27f60 <__aeabi_dmul+0x440>
   27f52:	9b01      	ldr	r3, [sp, #4]
   27f54:	2400      	movs	r4, #0
   27f56:	401d      	ands	r5, r3
   27f58:	2300      	movs	r3, #0
   27f5a:	2200      	movs	r2, #0
   27f5c:	4699      	mov	r9, r3
   27f5e:	e646      	b.n	27bee <__aeabi_dmul+0xce>
   27f60:	2a1f      	cmp	r2, #31
   27f62:	dc21      	bgt.n	27fa8 <__aeabi_dmul+0x488>
   27f64:	2520      	movs	r5, #32
   27f66:	0020      	movs	r0, r4
   27f68:	1aad      	subs	r5, r5, r2
   27f6a:	001e      	movs	r6, r3
   27f6c:	40ab      	lsls	r3, r5
   27f6e:	40a8      	lsls	r0, r5
   27f70:	40d6      	lsrs	r6, r2
   27f72:	1e5d      	subs	r5, r3, #1
   27f74:	41ab      	sbcs	r3, r5
   27f76:	4330      	orrs	r0, r6
   27f78:	4318      	orrs	r0, r3
   27f7a:	40d4      	lsrs	r4, r2
   27f7c:	0743      	lsls	r3, r0, #29
   27f7e:	d009      	beq.n	27f94 <__aeabi_dmul+0x474>
   27f80:	230f      	movs	r3, #15
   27f82:	4003      	ands	r3, r0
   27f84:	2b04      	cmp	r3, #4
   27f86:	d005      	beq.n	27f94 <__aeabi_dmul+0x474>
   27f88:	0003      	movs	r3, r0
   27f8a:	1d18      	adds	r0, r3, #4
   27f8c:	4298      	cmp	r0, r3
   27f8e:	419b      	sbcs	r3, r3
   27f90:	425b      	negs	r3, r3
   27f92:	18e4      	adds	r4, r4, r3
   27f94:	0223      	lsls	r3, r4, #8
   27f96:	d521      	bpl.n	27fdc <__aeabi_dmul+0x4bc>
   27f98:	2501      	movs	r5, #1
   27f9a:	9b01      	ldr	r3, [sp, #4]
   27f9c:	2401      	movs	r4, #1
   27f9e:	401d      	ands	r5, r3
   27fa0:	2300      	movs	r3, #0
   27fa2:	2200      	movs	r2, #0
   27fa4:	4699      	mov	r9, r3
   27fa6:	e622      	b.n	27bee <__aeabi_dmul+0xce>
   27fa8:	251f      	movs	r5, #31
   27faa:	0021      	movs	r1, r4
   27fac:	426d      	negs	r5, r5
   27fae:	1a28      	subs	r0, r5, r0
   27fb0:	40c1      	lsrs	r1, r0
   27fb2:	0008      	movs	r0, r1
   27fb4:	2a20      	cmp	r2, #32
   27fb6:	d01d      	beq.n	27ff4 <__aeabi_dmul+0x4d4>
   27fb8:	355f      	adds	r5, #95	; 0x5f
   27fba:	1aaa      	subs	r2, r5, r2
   27fbc:	4094      	lsls	r4, r2
   27fbe:	4323      	orrs	r3, r4
   27fc0:	1e5c      	subs	r4, r3, #1
   27fc2:	41a3      	sbcs	r3, r4
   27fc4:	2507      	movs	r5, #7
   27fc6:	4303      	orrs	r3, r0
   27fc8:	401d      	ands	r5, r3
   27fca:	2200      	movs	r2, #0
   27fcc:	2d00      	cmp	r5, #0
   27fce:	d009      	beq.n	27fe4 <__aeabi_dmul+0x4c4>
   27fd0:	220f      	movs	r2, #15
   27fd2:	2400      	movs	r4, #0
   27fd4:	401a      	ands	r2, r3
   27fd6:	0018      	movs	r0, r3
   27fd8:	2a04      	cmp	r2, #4
   27fda:	d1d6      	bne.n	27f8a <__aeabi_dmul+0x46a>
   27fdc:	0003      	movs	r3, r0
   27fde:	0765      	lsls	r5, r4, #29
   27fe0:	0264      	lsls	r4, r4, #9
   27fe2:	0b22      	lsrs	r2, r4, #12
   27fe4:	08db      	lsrs	r3, r3, #3
   27fe6:	432b      	orrs	r3, r5
   27fe8:	2501      	movs	r5, #1
   27fea:	4699      	mov	r9, r3
   27fec:	9b01      	ldr	r3, [sp, #4]
   27fee:	2400      	movs	r4, #0
   27ff0:	401d      	ands	r5, r3
   27ff2:	e5fc      	b.n	27bee <__aeabi_dmul+0xce>
   27ff4:	2400      	movs	r4, #0
   27ff6:	e7e2      	b.n	27fbe <__aeabi_dmul+0x49e>
   27ff8:	2280      	movs	r2, #128	; 0x80
   27ffa:	2501      	movs	r5, #1
   27ffc:	0312      	lsls	r2, r2, #12
   27ffe:	4322      	orrs	r2, r4
   28000:	9901      	ldr	r1, [sp, #4]
   28002:	0312      	lsls	r2, r2, #12
   28004:	0b12      	lsrs	r2, r2, #12
   28006:	400d      	ands	r5, r1
   28008:	4699      	mov	r9, r3
   2800a:	4c04      	ldr	r4, [pc, #16]	; (2801c <__aeabi_dmul+0x4fc>)
   2800c:	e5ef      	b.n	27bee <__aeabi_dmul+0xce>
   2800e:	46c0      	nop			; (mov r8, r8)
   28010:	000003ff 	.word	0x000003ff
   28014:	feffffff 	.word	0xfeffffff
   28018:	000007fe 	.word	0x000007fe
   2801c:	000007ff 	.word	0x000007ff

00028020 <__aeabi_dsub>:
   28020:	b5f0      	push	{r4, r5, r6, r7, lr}
   28022:	4646      	mov	r6, r8
   28024:	46d6      	mov	lr, sl
   28026:	464f      	mov	r7, r9
   28028:	030c      	lsls	r4, r1, #12
   2802a:	b5c0      	push	{r6, r7, lr}
   2802c:	0fcd      	lsrs	r5, r1, #31
   2802e:	004e      	lsls	r6, r1, #1
   28030:	0a61      	lsrs	r1, r4, #9
   28032:	0f44      	lsrs	r4, r0, #29
   28034:	430c      	orrs	r4, r1
   28036:	00c1      	lsls	r1, r0, #3
   28038:	0058      	lsls	r0, r3, #1
   2803a:	0d40      	lsrs	r0, r0, #21
   2803c:	4684      	mov	ip, r0
   2803e:	468a      	mov	sl, r1
   28040:	000f      	movs	r7, r1
   28042:	0319      	lsls	r1, r3, #12
   28044:	0f50      	lsrs	r0, r2, #29
   28046:	0a49      	lsrs	r1, r1, #9
   28048:	4301      	orrs	r1, r0
   2804a:	48c6      	ldr	r0, [pc, #792]	; (28364 <__aeabi_dsub+0x344>)
   2804c:	0d76      	lsrs	r6, r6, #21
   2804e:	46a8      	mov	r8, r5
   28050:	0fdb      	lsrs	r3, r3, #31
   28052:	00d2      	lsls	r2, r2, #3
   28054:	4584      	cmp	ip, r0
   28056:	d100      	bne.n	2805a <__aeabi_dsub+0x3a>
   28058:	e0d8      	b.n	2820c <__aeabi_dsub+0x1ec>
   2805a:	2001      	movs	r0, #1
   2805c:	4043      	eors	r3, r0
   2805e:	42ab      	cmp	r3, r5
   28060:	d100      	bne.n	28064 <__aeabi_dsub+0x44>
   28062:	e0a6      	b.n	281b2 <__aeabi_dsub+0x192>
   28064:	4660      	mov	r0, ip
   28066:	1a35      	subs	r5, r6, r0
   28068:	2d00      	cmp	r5, #0
   2806a:	dc00      	bgt.n	2806e <__aeabi_dsub+0x4e>
   2806c:	e105      	b.n	2827a <__aeabi_dsub+0x25a>
   2806e:	2800      	cmp	r0, #0
   28070:	d110      	bne.n	28094 <__aeabi_dsub+0x74>
   28072:	000b      	movs	r3, r1
   28074:	4313      	orrs	r3, r2
   28076:	d100      	bne.n	2807a <__aeabi_dsub+0x5a>
   28078:	e0d7      	b.n	2822a <__aeabi_dsub+0x20a>
   2807a:	1e6b      	subs	r3, r5, #1
   2807c:	2b00      	cmp	r3, #0
   2807e:	d000      	beq.n	28082 <__aeabi_dsub+0x62>
   28080:	e14b      	b.n	2831a <__aeabi_dsub+0x2fa>
   28082:	4653      	mov	r3, sl
   28084:	1a9f      	subs	r7, r3, r2
   28086:	45ba      	cmp	sl, r7
   28088:	4180      	sbcs	r0, r0
   2808a:	1a64      	subs	r4, r4, r1
   2808c:	4240      	negs	r0, r0
   2808e:	1a24      	subs	r4, r4, r0
   28090:	2601      	movs	r6, #1
   28092:	e01e      	b.n	280d2 <__aeabi_dsub+0xb2>
   28094:	4bb3      	ldr	r3, [pc, #716]	; (28364 <__aeabi_dsub+0x344>)
   28096:	429e      	cmp	r6, r3
   28098:	d048      	beq.n	2812c <__aeabi_dsub+0x10c>
   2809a:	2380      	movs	r3, #128	; 0x80
   2809c:	041b      	lsls	r3, r3, #16
   2809e:	4319      	orrs	r1, r3
   280a0:	2d38      	cmp	r5, #56	; 0x38
   280a2:	dd00      	ble.n	280a6 <__aeabi_dsub+0x86>
   280a4:	e119      	b.n	282da <__aeabi_dsub+0x2ba>
   280a6:	2d1f      	cmp	r5, #31
   280a8:	dd00      	ble.n	280ac <__aeabi_dsub+0x8c>
   280aa:	e14c      	b.n	28346 <__aeabi_dsub+0x326>
   280ac:	2320      	movs	r3, #32
   280ae:	000f      	movs	r7, r1
   280b0:	1b5b      	subs	r3, r3, r5
   280b2:	0010      	movs	r0, r2
   280b4:	409a      	lsls	r2, r3
   280b6:	409f      	lsls	r7, r3
   280b8:	40e8      	lsrs	r0, r5
   280ba:	1e53      	subs	r3, r2, #1
   280bc:	419a      	sbcs	r2, r3
   280be:	40e9      	lsrs	r1, r5
   280c0:	4307      	orrs	r7, r0
   280c2:	4317      	orrs	r7, r2
   280c4:	4653      	mov	r3, sl
   280c6:	1bdf      	subs	r7, r3, r7
   280c8:	1a61      	subs	r1, r4, r1
   280ca:	45ba      	cmp	sl, r7
   280cc:	41a4      	sbcs	r4, r4
   280ce:	4264      	negs	r4, r4
   280d0:	1b0c      	subs	r4, r1, r4
   280d2:	0223      	lsls	r3, r4, #8
   280d4:	d400      	bmi.n	280d8 <__aeabi_dsub+0xb8>
   280d6:	e0c5      	b.n	28264 <__aeabi_dsub+0x244>
   280d8:	0264      	lsls	r4, r4, #9
   280da:	0a65      	lsrs	r5, r4, #9
   280dc:	2d00      	cmp	r5, #0
   280de:	d100      	bne.n	280e2 <__aeabi_dsub+0xc2>
   280e0:	e0f6      	b.n	282d0 <__aeabi_dsub+0x2b0>
   280e2:	0028      	movs	r0, r5
   280e4:	f000 fbd2 	bl	2888c <__clzsi2>
   280e8:	0003      	movs	r3, r0
   280ea:	3b08      	subs	r3, #8
   280ec:	2b1f      	cmp	r3, #31
   280ee:	dd00      	ble.n	280f2 <__aeabi_dsub+0xd2>
   280f0:	e0e9      	b.n	282c6 <__aeabi_dsub+0x2a6>
   280f2:	2220      	movs	r2, #32
   280f4:	003c      	movs	r4, r7
   280f6:	1ad2      	subs	r2, r2, r3
   280f8:	409d      	lsls	r5, r3
   280fa:	40d4      	lsrs	r4, r2
   280fc:	409f      	lsls	r7, r3
   280fe:	4325      	orrs	r5, r4
   28100:	429e      	cmp	r6, r3
   28102:	dd00      	ble.n	28106 <__aeabi_dsub+0xe6>
   28104:	e0db      	b.n	282be <__aeabi_dsub+0x29e>
   28106:	1b9e      	subs	r6, r3, r6
   28108:	1c73      	adds	r3, r6, #1
   2810a:	2b1f      	cmp	r3, #31
   2810c:	dd00      	ble.n	28110 <__aeabi_dsub+0xf0>
   2810e:	e10a      	b.n	28326 <__aeabi_dsub+0x306>
   28110:	2220      	movs	r2, #32
   28112:	0038      	movs	r0, r7
   28114:	1ad2      	subs	r2, r2, r3
   28116:	0029      	movs	r1, r5
   28118:	4097      	lsls	r7, r2
   2811a:	002c      	movs	r4, r5
   2811c:	4091      	lsls	r1, r2
   2811e:	40d8      	lsrs	r0, r3
   28120:	1e7a      	subs	r2, r7, #1
   28122:	4197      	sbcs	r7, r2
   28124:	40dc      	lsrs	r4, r3
   28126:	2600      	movs	r6, #0
   28128:	4301      	orrs	r1, r0
   2812a:	430f      	orrs	r7, r1
   2812c:	077b      	lsls	r3, r7, #29
   2812e:	d009      	beq.n	28144 <__aeabi_dsub+0x124>
   28130:	230f      	movs	r3, #15
   28132:	403b      	ands	r3, r7
   28134:	2b04      	cmp	r3, #4
   28136:	d005      	beq.n	28144 <__aeabi_dsub+0x124>
   28138:	1d3b      	adds	r3, r7, #4
   2813a:	42bb      	cmp	r3, r7
   2813c:	41bf      	sbcs	r7, r7
   2813e:	427f      	negs	r7, r7
   28140:	19e4      	adds	r4, r4, r7
   28142:	001f      	movs	r7, r3
   28144:	0223      	lsls	r3, r4, #8
   28146:	d525      	bpl.n	28194 <__aeabi_dsub+0x174>
   28148:	4b86      	ldr	r3, [pc, #536]	; (28364 <__aeabi_dsub+0x344>)
   2814a:	3601      	adds	r6, #1
   2814c:	429e      	cmp	r6, r3
   2814e:	d100      	bne.n	28152 <__aeabi_dsub+0x132>
   28150:	e0af      	b.n	282b2 <__aeabi_dsub+0x292>
   28152:	4b85      	ldr	r3, [pc, #532]	; (28368 <__aeabi_dsub+0x348>)
   28154:	2501      	movs	r5, #1
   28156:	401c      	ands	r4, r3
   28158:	4643      	mov	r3, r8
   2815a:	0762      	lsls	r2, r4, #29
   2815c:	08ff      	lsrs	r7, r7, #3
   2815e:	0264      	lsls	r4, r4, #9
   28160:	0576      	lsls	r6, r6, #21
   28162:	4317      	orrs	r7, r2
   28164:	0b24      	lsrs	r4, r4, #12
   28166:	0d76      	lsrs	r6, r6, #21
   28168:	401d      	ands	r5, r3
   2816a:	2100      	movs	r1, #0
   2816c:	0324      	lsls	r4, r4, #12
   2816e:	0b23      	lsrs	r3, r4, #12
   28170:	0d0c      	lsrs	r4, r1, #20
   28172:	4a7e      	ldr	r2, [pc, #504]	; (2836c <__aeabi_dsub+0x34c>)
   28174:	0524      	lsls	r4, r4, #20
   28176:	431c      	orrs	r4, r3
   28178:	4014      	ands	r4, r2
   2817a:	0533      	lsls	r3, r6, #20
   2817c:	4323      	orrs	r3, r4
   2817e:	005b      	lsls	r3, r3, #1
   28180:	07ed      	lsls	r5, r5, #31
   28182:	085b      	lsrs	r3, r3, #1
   28184:	432b      	orrs	r3, r5
   28186:	0038      	movs	r0, r7
   28188:	0019      	movs	r1, r3
   2818a:	bc1c      	pop	{r2, r3, r4}
   2818c:	4690      	mov	r8, r2
   2818e:	4699      	mov	r9, r3
   28190:	46a2      	mov	sl, r4
   28192:	bdf0      	pop	{r4, r5, r6, r7, pc}
   28194:	2501      	movs	r5, #1
   28196:	4643      	mov	r3, r8
   28198:	0762      	lsls	r2, r4, #29
   2819a:	08ff      	lsrs	r7, r7, #3
   2819c:	4317      	orrs	r7, r2
   2819e:	08e4      	lsrs	r4, r4, #3
   281a0:	401d      	ands	r5, r3
   281a2:	4b70      	ldr	r3, [pc, #448]	; (28364 <__aeabi_dsub+0x344>)
   281a4:	429e      	cmp	r6, r3
   281a6:	d036      	beq.n	28216 <__aeabi_dsub+0x1f6>
   281a8:	0324      	lsls	r4, r4, #12
   281aa:	0576      	lsls	r6, r6, #21
   281ac:	0b24      	lsrs	r4, r4, #12
   281ae:	0d76      	lsrs	r6, r6, #21
   281b0:	e7db      	b.n	2816a <__aeabi_dsub+0x14a>
   281b2:	4663      	mov	r3, ip
   281b4:	1af3      	subs	r3, r6, r3
   281b6:	2b00      	cmp	r3, #0
   281b8:	dc00      	bgt.n	281bc <__aeabi_dsub+0x19c>
   281ba:	e094      	b.n	282e6 <__aeabi_dsub+0x2c6>
   281bc:	4660      	mov	r0, ip
   281be:	2800      	cmp	r0, #0
   281c0:	d035      	beq.n	2822e <__aeabi_dsub+0x20e>
   281c2:	4868      	ldr	r0, [pc, #416]	; (28364 <__aeabi_dsub+0x344>)
   281c4:	4286      	cmp	r6, r0
   281c6:	d0b1      	beq.n	2812c <__aeabi_dsub+0x10c>
   281c8:	2780      	movs	r7, #128	; 0x80
   281ca:	043f      	lsls	r7, r7, #16
   281cc:	4339      	orrs	r1, r7
   281ce:	2b38      	cmp	r3, #56	; 0x38
   281d0:	dc00      	bgt.n	281d4 <__aeabi_dsub+0x1b4>
   281d2:	e0fd      	b.n	283d0 <__aeabi_dsub+0x3b0>
   281d4:	430a      	orrs	r2, r1
   281d6:	0017      	movs	r7, r2
   281d8:	2100      	movs	r1, #0
   281da:	1e7a      	subs	r2, r7, #1
   281dc:	4197      	sbcs	r7, r2
   281de:	4457      	add	r7, sl
   281e0:	4557      	cmp	r7, sl
   281e2:	4180      	sbcs	r0, r0
   281e4:	1909      	adds	r1, r1, r4
   281e6:	4244      	negs	r4, r0
   281e8:	190c      	adds	r4, r1, r4
   281ea:	0223      	lsls	r3, r4, #8
   281ec:	d53a      	bpl.n	28264 <__aeabi_dsub+0x244>
   281ee:	4b5d      	ldr	r3, [pc, #372]	; (28364 <__aeabi_dsub+0x344>)
   281f0:	3601      	adds	r6, #1
   281f2:	429e      	cmp	r6, r3
   281f4:	d100      	bne.n	281f8 <__aeabi_dsub+0x1d8>
   281f6:	e14b      	b.n	28490 <__aeabi_dsub+0x470>
   281f8:	2201      	movs	r2, #1
   281fa:	4b5b      	ldr	r3, [pc, #364]	; (28368 <__aeabi_dsub+0x348>)
   281fc:	401c      	ands	r4, r3
   281fe:	087b      	lsrs	r3, r7, #1
   28200:	4017      	ands	r7, r2
   28202:	431f      	orrs	r7, r3
   28204:	07e2      	lsls	r2, r4, #31
   28206:	4317      	orrs	r7, r2
   28208:	0864      	lsrs	r4, r4, #1
   2820a:	e78f      	b.n	2812c <__aeabi_dsub+0x10c>
   2820c:	0008      	movs	r0, r1
   2820e:	4310      	orrs	r0, r2
   28210:	d000      	beq.n	28214 <__aeabi_dsub+0x1f4>
   28212:	e724      	b.n	2805e <__aeabi_dsub+0x3e>
   28214:	e721      	b.n	2805a <__aeabi_dsub+0x3a>
   28216:	0023      	movs	r3, r4
   28218:	433b      	orrs	r3, r7
   2821a:	d100      	bne.n	2821e <__aeabi_dsub+0x1fe>
   2821c:	e1b9      	b.n	28592 <__aeabi_dsub+0x572>
   2821e:	2280      	movs	r2, #128	; 0x80
   28220:	0312      	lsls	r2, r2, #12
   28222:	4314      	orrs	r4, r2
   28224:	0324      	lsls	r4, r4, #12
   28226:	0b24      	lsrs	r4, r4, #12
   28228:	e79f      	b.n	2816a <__aeabi_dsub+0x14a>
   2822a:	002e      	movs	r6, r5
   2822c:	e77e      	b.n	2812c <__aeabi_dsub+0x10c>
   2822e:	0008      	movs	r0, r1
   28230:	4310      	orrs	r0, r2
   28232:	d100      	bne.n	28236 <__aeabi_dsub+0x216>
   28234:	e0ca      	b.n	283cc <__aeabi_dsub+0x3ac>
   28236:	1e58      	subs	r0, r3, #1
   28238:	4684      	mov	ip, r0
   2823a:	2800      	cmp	r0, #0
   2823c:	d000      	beq.n	28240 <__aeabi_dsub+0x220>
   2823e:	e0e7      	b.n	28410 <__aeabi_dsub+0x3f0>
   28240:	4452      	add	r2, sl
   28242:	4552      	cmp	r2, sl
   28244:	4180      	sbcs	r0, r0
   28246:	1864      	adds	r4, r4, r1
   28248:	4240      	negs	r0, r0
   2824a:	1824      	adds	r4, r4, r0
   2824c:	0017      	movs	r7, r2
   2824e:	2601      	movs	r6, #1
   28250:	0223      	lsls	r3, r4, #8
   28252:	d507      	bpl.n	28264 <__aeabi_dsub+0x244>
   28254:	2602      	movs	r6, #2
   28256:	e7cf      	b.n	281f8 <__aeabi_dsub+0x1d8>
   28258:	4664      	mov	r4, ip
   2825a:	432c      	orrs	r4, r5
   2825c:	d100      	bne.n	28260 <__aeabi_dsub+0x240>
   2825e:	e1b3      	b.n	285c8 <__aeabi_dsub+0x5a8>
   28260:	002c      	movs	r4, r5
   28262:	4667      	mov	r7, ip
   28264:	077b      	lsls	r3, r7, #29
   28266:	d000      	beq.n	2826a <__aeabi_dsub+0x24a>
   28268:	e762      	b.n	28130 <__aeabi_dsub+0x110>
   2826a:	0763      	lsls	r3, r4, #29
   2826c:	08ff      	lsrs	r7, r7, #3
   2826e:	431f      	orrs	r7, r3
   28270:	2501      	movs	r5, #1
   28272:	4643      	mov	r3, r8
   28274:	08e4      	lsrs	r4, r4, #3
   28276:	401d      	ands	r5, r3
   28278:	e793      	b.n	281a2 <__aeabi_dsub+0x182>
   2827a:	2d00      	cmp	r5, #0
   2827c:	d178      	bne.n	28370 <__aeabi_dsub+0x350>
   2827e:	1c75      	adds	r5, r6, #1
   28280:	056d      	lsls	r5, r5, #21
   28282:	0d6d      	lsrs	r5, r5, #21
   28284:	2d01      	cmp	r5, #1
   28286:	dc00      	bgt.n	2828a <__aeabi_dsub+0x26a>
   28288:	e0f2      	b.n	28470 <__aeabi_dsub+0x450>
   2828a:	4650      	mov	r0, sl
   2828c:	1a80      	subs	r0, r0, r2
   2828e:	4582      	cmp	sl, r0
   28290:	41bf      	sbcs	r7, r7
   28292:	1a65      	subs	r5, r4, r1
   28294:	427f      	negs	r7, r7
   28296:	1bed      	subs	r5, r5, r7
   28298:	4684      	mov	ip, r0
   2829a:	0228      	lsls	r0, r5, #8
   2829c:	d400      	bmi.n	282a0 <__aeabi_dsub+0x280>
   2829e:	e08c      	b.n	283ba <__aeabi_dsub+0x39a>
   282a0:	4650      	mov	r0, sl
   282a2:	1a17      	subs	r7, r2, r0
   282a4:	42ba      	cmp	r2, r7
   282a6:	4192      	sbcs	r2, r2
   282a8:	1b0c      	subs	r4, r1, r4
   282aa:	4255      	negs	r5, r2
   282ac:	1b65      	subs	r5, r4, r5
   282ae:	4698      	mov	r8, r3
   282b0:	e714      	b.n	280dc <__aeabi_dsub+0xbc>
   282b2:	2501      	movs	r5, #1
   282b4:	4643      	mov	r3, r8
   282b6:	2400      	movs	r4, #0
   282b8:	401d      	ands	r5, r3
   282ba:	2700      	movs	r7, #0
   282bc:	e755      	b.n	2816a <__aeabi_dsub+0x14a>
   282be:	4c2a      	ldr	r4, [pc, #168]	; (28368 <__aeabi_dsub+0x348>)
   282c0:	1af6      	subs	r6, r6, r3
   282c2:	402c      	ands	r4, r5
   282c4:	e732      	b.n	2812c <__aeabi_dsub+0x10c>
   282c6:	003d      	movs	r5, r7
   282c8:	3828      	subs	r0, #40	; 0x28
   282ca:	4085      	lsls	r5, r0
   282cc:	2700      	movs	r7, #0
   282ce:	e717      	b.n	28100 <__aeabi_dsub+0xe0>
   282d0:	0038      	movs	r0, r7
   282d2:	f000 fadb 	bl	2888c <__clzsi2>
   282d6:	3020      	adds	r0, #32
   282d8:	e706      	b.n	280e8 <__aeabi_dsub+0xc8>
   282da:	430a      	orrs	r2, r1
   282dc:	0017      	movs	r7, r2
   282de:	2100      	movs	r1, #0
   282e0:	1e7a      	subs	r2, r7, #1
   282e2:	4197      	sbcs	r7, r2
   282e4:	e6ee      	b.n	280c4 <__aeabi_dsub+0xa4>
   282e6:	2b00      	cmp	r3, #0
   282e8:	d000      	beq.n	282ec <__aeabi_dsub+0x2cc>
   282ea:	e0e5      	b.n	284b8 <__aeabi_dsub+0x498>
   282ec:	1c73      	adds	r3, r6, #1
   282ee:	469c      	mov	ip, r3
   282f0:	055b      	lsls	r3, r3, #21
   282f2:	0d5b      	lsrs	r3, r3, #21
   282f4:	2b01      	cmp	r3, #1
   282f6:	dc00      	bgt.n	282fa <__aeabi_dsub+0x2da>
   282f8:	e09f      	b.n	2843a <__aeabi_dsub+0x41a>
   282fa:	4b1a      	ldr	r3, [pc, #104]	; (28364 <__aeabi_dsub+0x344>)
   282fc:	459c      	cmp	ip, r3
   282fe:	d100      	bne.n	28302 <__aeabi_dsub+0x2e2>
   28300:	e0c5      	b.n	2848e <__aeabi_dsub+0x46e>
   28302:	4452      	add	r2, sl
   28304:	4552      	cmp	r2, sl
   28306:	4180      	sbcs	r0, r0
   28308:	1864      	adds	r4, r4, r1
   2830a:	4240      	negs	r0, r0
   2830c:	1824      	adds	r4, r4, r0
   2830e:	07e7      	lsls	r7, r4, #31
   28310:	0852      	lsrs	r2, r2, #1
   28312:	4317      	orrs	r7, r2
   28314:	0864      	lsrs	r4, r4, #1
   28316:	4666      	mov	r6, ip
   28318:	e708      	b.n	2812c <__aeabi_dsub+0x10c>
   2831a:	4812      	ldr	r0, [pc, #72]	; (28364 <__aeabi_dsub+0x344>)
   2831c:	4285      	cmp	r5, r0
   2831e:	d100      	bne.n	28322 <__aeabi_dsub+0x302>
   28320:	e085      	b.n	2842e <__aeabi_dsub+0x40e>
   28322:	001d      	movs	r5, r3
   28324:	e6bc      	b.n	280a0 <__aeabi_dsub+0x80>
   28326:	0029      	movs	r1, r5
   28328:	3e1f      	subs	r6, #31
   2832a:	40f1      	lsrs	r1, r6
   2832c:	2b20      	cmp	r3, #32
   2832e:	d100      	bne.n	28332 <__aeabi_dsub+0x312>
   28330:	e07f      	b.n	28432 <__aeabi_dsub+0x412>
   28332:	2240      	movs	r2, #64	; 0x40
   28334:	1ad3      	subs	r3, r2, r3
   28336:	409d      	lsls	r5, r3
   28338:	432f      	orrs	r7, r5
   2833a:	1e7d      	subs	r5, r7, #1
   2833c:	41af      	sbcs	r7, r5
   2833e:	2400      	movs	r4, #0
   28340:	430f      	orrs	r7, r1
   28342:	2600      	movs	r6, #0
   28344:	e78e      	b.n	28264 <__aeabi_dsub+0x244>
   28346:	002b      	movs	r3, r5
   28348:	000f      	movs	r7, r1
   2834a:	3b20      	subs	r3, #32
   2834c:	40df      	lsrs	r7, r3
   2834e:	2d20      	cmp	r5, #32
   28350:	d071      	beq.n	28436 <__aeabi_dsub+0x416>
   28352:	2340      	movs	r3, #64	; 0x40
   28354:	1b5d      	subs	r5, r3, r5
   28356:	40a9      	lsls	r1, r5
   28358:	430a      	orrs	r2, r1
   2835a:	1e51      	subs	r1, r2, #1
   2835c:	418a      	sbcs	r2, r1
   2835e:	2100      	movs	r1, #0
   28360:	4317      	orrs	r7, r2
   28362:	e6af      	b.n	280c4 <__aeabi_dsub+0xa4>
   28364:	000007ff 	.word	0x000007ff
   28368:	ff7fffff 	.word	0xff7fffff
   2836c:	800fffff 	.word	0x800fffff
   28370:	2e00      	cmp	r6, #0
   28372:	d03e      	beq.n	283f2 <__aeabi_dsub+0x3d2>
   28374:	4eb3      	ldr	r6, [pc, #716]	; (28644 <__aeabi_dsub+0x624>)
   28376:	45b4      	cmp	ip, r6
   28378:	d045      	beq.n	28406 <__aeabi_dsub+0x3e6>
   2837a:	2680      	movs	r6, #128	; 0x80
   2837c:	0436      	lsls	r6, r6, #16
   2837e:	426d      	negs	r5, r5
   28380:	4334      	orrs	r4, r6
   28382:	2d38      	cmp	r5, #56	; 0x38
   28384:	dd00      	ble.n	28388 <__aeabi_dsub+0x368>
   28386:	e0a8      	b.n	284da <__aeabi_dsub+0x4ba>
   28388:	2d1f      	cmp	r5, #31
   2838a:	dd00      	ble.n	2838e <__aeabi_dsub+0x36e>
   2838c:	e11f      	b.n	285ce <__aeabi_dsub+0x5ae>
   2838e:	2620      	movs	r6, #32
   28390:	0027      	movs	r7, r4
   28392:	4650      	mov	r0, sl
   28394:	1b76      	subs	r6, r6, r5
   28396:	40b7      	lsls	r7, r6
   28398:	40e8      	lsrs	r0, r5
   2839a:	4307      	orrs	r7, r0
   2839c:	4650      	mov	r0, sl
   2839e:	40b0      	lsls	r0, r6
   283a0:	1e46      	subs	r6, r0, #1
   283a2:	41b0      	sbcs	r0, r6
   283a4:	40ec      	lsrs	r4, r5
   283a6:	4338      	orrs	r0, r7
   283a8:	1a17      	subs	r7, r2, r0
   283aa:	42ba      	cmp	r2, r7
   283ac:	4192      	sbcs	r2, r2
   283ae:	1b0c      	subs	r4, r1, r4
   283b0:	4252      	negs	r2, r2
   283b2:	1aa4      	subs	r4, r4, r2
   283b4:	4666      	mov	r6, ip
   283b6:	4698      	mov	r8, r3
   283b8:	e68b      	b.n	280d2 <__aeabi_dsub+0xb2>
   283ba:	4664      	mov	r4, ip
   283bc:	4667      	mov	r7, ip
   283be:	432c      	orrs	r4, r5
   283c0:	d000      	beq.n	283c4 <__aeabi_dsub+0x3a4>
   283c2:	e68b      	b.n	280dc <__aeabi_dsub+0xbc>
   283c4:	2500      	movs	r5, #0
   283c6:	2600      	movs	r6, #0
   283c8:	2700      	movs	r7, #0
   283ca:	e6ea      	b.n	281a2 <__aeabi_dsub+0x182>
   283cc:	001e      	movs	r6, r3
   283ce:	e6ad      	b.n	2812c <__aeabi_dsub+0x10c>
   283d0:	2b1f      	cmp	r3, #31
   283d2:	dc60      	bgt.n	28496 <__aeabi_dsub+0x476>
   283d4:	2720      	movs	r7, #32
   283d6:	1af8      	subs	r0, r7, r3
   283d8:	000f      	movs	r7, r1
   283da:	4684      	mov	ip, r0
   283dc:	4087      	lsls	r7, r0
   283de:	0010      	movs	r0, r2
   283e0:	40d8      	lsrs	r0, r3
   283e2:	4307      	orrs	r7, r0
   283e4:	4660      	mov	r0, ip
   283e6:	4082      	lsls	r2, r0
   283e8:	1e50      	subs	r0, r2, #1
   283ea:	4182      	sbcs	r2, r0
   283ec:	40d9      	lsrs	r1, r3
   283ee:	4317      	orrs	r7, r2
   283f0:	e6f5      	b.n	281de <__aeabi_dsub+0x1be>
   283f2:	0026      	movs	r6, r4
   283f4:	4650      	mov	r0, sl
   283f6:	4306      	orrs	r6, r0
   283f8:	d005      	beq.n	28406 <__aeabi_dsub+0x3e6>
   283fa:	43ed      	mvns	r5, r5
   283fc:	2d00      	cmp	r5, #0
   283fe:	d0d3      	beq.n	283a8 <__aeabi_dsub+0x388>
   28400:	4e90      	ldr	r6, [pc, #576]	; (28644 <__aeabi_dsub+0x624>)
   28402:	45b4      	cmp	ip, r6
   28404:	d1bd      	bne.n	28382 <__aeabi_dsub+0x362>
   28406:	000c      	movs	r4, r1
   28408:	0017      	movs	r7, r2
   2840a:	4666      	mov	r6, ip
   2840c:	4698      	mov	r8, r3
   2840e:	e68d      	b.n	2812c <__aeabi_dsub+0x10c>
   28410:	488c      	ldr	r0, [pc, #560]	; (28644 <__aeabi_dsub+0x624>)
   28412:	4283      	cmp	r3, r0
   28414:	d00b      	beq.n	2842e <__aeabi_dsub+0x40e>
   28416:	4663      	mov	r3, ip
   28418:	e6d9      	b.n	281ce <__aeabi_dsub+0x1ae>
   2841a:	2d00      	cmp	r5, #0
   2841c:	d000      	beq.n	28420 <__aeabi_dsub+0x400>
   2841e:	e096      	b.n	2854e <__aeabi_dsub+0x52e>
   28420:	0008      	movs	r0, r1
   28422:	4310      	orrs	r0, r2
   28424:	d100      	bne.n	28428 <__aeabi_dsub+0x408>
   28426:	e0e2      	b.n	285ee <__aeabi_dsub+0x5ce>
   28428:	000c      	movs	r4, r1
   2842a:	0017      	movs	r7, r2
   2842c:	4698      	mov	r8, r3
   2842e:	4e85      	ldr	r6, [pc, #532]	; (28644 <__aeabi_dsub+0x624>)
   28430:	e67c      	b.n	2812c <__aeabi_dsub+0x10c>
   28432:	2500      	movs	r5, #0
   28434:	e780      	b.n	28338 <__aeabi_dsub+0x318>
   28436:	2100      	movs	r1, #0
   28438:	e78e      	b.n	28358 <__aeabi_dsub+0x338>
   2843a:	0023      	movs	r3, r4
   2843c:	4650      	mov	r0, sl
   2843e:	4303      	orrs	r3, r0
   28440:	2e00      	cmp	r6, #0
   28442:	d000      	beq.n	28446 <__aeabi_dsub+0x426>
   28444:	e0a8      	b.n	28598 <__aeabi_dsub+0x578>
   28446:	2b00      	cmp	r3, #0
   28448:	d100      	bne.n	2844c <__aeabi_dsub+0x42c>
   2844a:	e0de      	b.n	2860a <__aeabi_dsub+0x5ea>
   2844c:	000b      	movs	r3, r1
   2844e:	4313      	orrs	r3, r2
   28450:	d100      	bne.n	28454 <__aeabi_dsub+0x434>
   28452:	e66b      	b.n	2812c <__aeabi_dsub+0x10c>
   28454:	4452      	add	r2, sl
   28456:	4552      	cmp	r2, sl
   28458:	4180      	sbcs	r0, r0
   2845a:	1864      	adds	r4, r4, r1
   2845c:	4240      	negs	r0, r0
   2845e:	1824      	adds	r4, r4, r0
   28460:	0017      	movs	r7, r2
   28462:	0223      	lsls	r3, r4, #8
   28464:	d400      	bmi.n	28468 <__aeabi_dsub+0x448>
   28466:	e6fd      	b.n	28264 <__aeabi_dsub+0x244>
   28468:	4b77      	ldr	r3, [pc, #476]	; (28648 <__aeabi_dsub+0x628>)
   2846a:	4666      	mov	r6, ip
   2846c:	401c      	ands	r4, r3
   2846e:	e65d      	b.n	2812c <__aeabi_dsub+0x10c>
   28470:	0025      	movs	r5, r4
   28472:	4650      	mov	r0, sl
   28474:	4305      	orrs	r5, r0
   28476:	2e00      	cmp	r6, #0
   28478:	d1cf      	bne.n	2841a <__aeabi_dsub+0x3fa>
   2847a:	2d00      	cmp	r5, #0
   2847c:	d14f      	bne.n	2851e <__aeabi_dsub+0x4fe>
   2847e:	000c      	movs	r4, r1
   28480:	4314      	orrs	r4, r2
   28482:	d100      	bne.n	28486 <__aeabi_dsub+0x466>
   28484:	e0a0      	b.n	285c8 <__aeabi_dsub+0x5a8>
   28486:	000c      	movs	r4, r1
   28488:	0017      	movs	r7, r2
   2848a:	4698      	mov	r8, r3
   2848c:	e64e      	b.n	2812c <__aeabi_dsub+0x10c>
   2848e:	4666      	mov	r6, ip
   28490:	2400      	movs	r4, #0
   28492:	2700      	movs	r7, #0
   28494:	e685      	b.n	281a2 <__aeabi_dsub+0x182>
   28496:	001f      	movs	r7, r3
   28498:	0008      	movs	r0, r1
   2849a:	3f20      	subs	r7, #32
   2849c:	40f8      	lsrs	r0, r7
   2849e:	0007      	movs	r7, r0
   284a0:	2b20      	cmp	r3, #32
   284a2:	d100      	bne.n	284a6 <__aeabi_dsub+0x486>
   284a4:	e08e      	b.n	285c4 <__aeabi_dsub+0x5a4>
   284a6:	2040      	movs	r0, #64	; 0x40
   284a8:	1ac3      	subs	r3, r0, r3
   284aa:	4099      	lsls	r1, r3
   284ac:	430a      	orrs	r2, r1
   284ae:	1e51      	subs	r1, r2, #1
   284b0:	418a      	sbcs	r2, r1
   284b2:	2100      	movs	r1, #0
   284b4:	4317      	orrs	r7, r2
   284b6:	e692      	b.n	281de <__aeabi_dsub+0x1be>
   284b8:	2e00      	cmp	r6, #0
   284ba:	d114      	bne.n	284e6 <__aeabi_dsub+0x4c6>
   284bc:	0026      	movs	r6, r4
   284be:	4650      	mov	r0, sl
   284c0:	4306      	orrs	r6, r0
   284c2:	d062      	beq.n	2858a <__aeabi_dsub+0x56a>
   284c4:	43db      	mvns	r3, r3
   284c6:	2b00      	cmp	r3, #0
   284c8:	d15c      	bne.n	28584 <__aeabi_dsub+0x564>
   284ca:	1887      	adds	r7, r0, r2
   284cc:	4297      	cmp	r7, r2
   284ce:	4192      	sbcs	r2, r2
   284d0:	1864      	adds	r4, r4, r1
   284d2:	4252      	negs	r2, r2
   284d4:	18a4      	adds	r4, r4, r2
   284d6:	4666      	mov	r6, ip
   284d8:	e687      	b.n	281ea <__aeabi_dsub+0x1ca>
   284da:	4650      	mov	r0, sl
   284dc:	4320      	orrs	r0, r4
   284de:	1e44      	subs	r4, r0, #1
   284e0:	41a0      	sbcs	r0, r4
   284e2:	2400      	movs	r4, #0
   284e4:	e760      	b.n	283a8 <__aeabi_dsub+0x388>
   284e6:	4e57      	ldr	r6, [pc, #348]	; (28644 <__aeabi_dsub+0x624>)
   284e8:	45b4      	cmp	ip, r6
   284ea:	d04e      	beq.n	2858a <__aeabi_dsub+0x56a>
   284ec:	2680      	movs	r6, #128	; 0x80
   284ee:	0436      	lsls	r6, r6, #16
   284f0:	425b      	negs	r3, r3
   284f2:	4334      	orrs	r4, r6
   284f4:	2b38      	cmp	r3, #56	; 0x38
   284f6:	dd00      	ble.n	284fa <__aeabi_dsub+0x4da>
   284f8:	e07f      	b.n	285fa <__aeabi_dsub+0x5da>
   284fa:	2b1f      	cmp	r3, #31
   284fc:	dd00      	ble.n	28500 <__aeabi_dsub+0x4e0>
   284fe:	e08b      	b.n	28618 <__aeabi_dsub+0x5f8>
   28500:	2620      	movs	r6, #32
   28502:	0027      	movs	r7, r4
   28504:	4650      	mov	r0, sl
   28506:	1af6      	subs	r6, r6, r3
   28508:	40b7      	lsls	r7, r6
   2850a:	40d8      	lsrs	r0, r3
   2850c:	4307      	orrs	r7, r0
   2850e:	4650      	mov	r0, sl
   28510:	40b0      	lsls	r0, r6
   28512:	1e46      	subs	r6, r0, #1
   28514:	41b0      	sbcs	r0, r6
   28516:	4307      	orrs	r7, r0
   28518:	40dc      	lsrs	r4, r3
   2851a:	18bf      	adds	r7, r7, r2
   2851c:	e7d6      	b.n	284cc <__aeabi_dsub+0x4ac>
   2851e:	000d      	movs	r5, r1
   28520:	4315      	orrs	r5, r2
   28522:	d100      	bne.n	28526 <__aeabi_dsub+0x506>
   28524:	e602      	b.n	2812c <__aeabi_dsub+0x10c>
   28526:	4650      	mov	r0, sl
   28528:	1a80      	subs	r0, r0, r2
   2852a:	4582      	cmp	sl, r0
   2852c:	41bf      	sbcs	r7, r7
   2852e:	1a65      	subs	r5, r4, r1
   28530:	427f      	negs	r7, r7
   28532:	1bed      	subs	r5, r5, r7
   28534:	4684      	mov	ip, r0
   28536:	0228      	lsls	r0, r5, #8
   28538:	d400      	bmi.n	2853c <__aeabi_dsub+0x51c>
   2853a:	e68d      	b.n	28258 <__aeabi_dsub+0x238>
   2853c:	4650      	mov	r0, sl
   2853e:	1a17      	subs	r7, r2, r0
   28540:	42ba      	cmp	r2, r7
   28542:	4192      	sbcs	r2, r2
   28544:	1b0c      	subs	r4, r1, r4
   28546:	4252      	negs	r2, r2
   28548:	1aa4      	subs	r4, r4, r2
   2854a:	4698      	mov	r8, r3
   2854c:	e5ee      	b.n	2812c <__aeabi_dsub+0x10c>
   2854e:	000d      	movs	r5, r1
   28550:	4315      	orrs	r5, r2
   28552:	d100      	bne.n	28556 <__aeabi_dsub+0x536>
   28554:	e76b      	b.n	2842e <__aeabi_dsub+0x40e>
   28556:	4650      	mov	r0, sl
   28558:	0767      	lsls	r7, r4, #29
   2855a:	08c0      	lsrs	r0, r0, #3
   2855c:	4307      	orrs	r7, r0
   2855e:	2080      	movs	r0, #128	; 0x80
   28560:	08e4      	lsrs	r4, r4, #3
   28562:	0300      	lsls	r0, r0, #12
   28564:	4204      	tst	r4, r0
   28566:	d007      	beq.n	28578 <__aeabi_dsub+0x558>
   28568:	08cd      	lsrs	r5, r1, #3
   2856a:	4205      	tst	r5, r0
   2856c:	d104      	bne.n	28578 <__aeabi_dsub+0x558>
   2856e:	002c      	movs	r4, r5
   28570:	4698      	mov	r8, r3
   28572:	08d7      	lsrs	r7, r2, #3
   28574:	0749      	lsls	r1, r1, #29
   28576:	430f      	orrs	r7, r1
   28578:	0f7b      	lsrs	r3, r7, #29
   2857a:	00e4      	lsls	r4, r4, #3
   2857c:	431c      	orrs	r4, r3
   2857e:	00ff      	lsls	r7, r7, #3
   28580:	4e30      	ldr	r6, [pc, #192]	; (28644 <__aeabi_dsub+0x624>)
   28582:	e5d3      	b.n	2812c <__aeabi_dsub+0x10c>
   28584:	4e2f      	ldr	r6, [pc, #188]	; (28644 <__aeabi_dsub+0x624>)
   28586:	45b4      	cmp	ip, r6
   28588:	d1b4      	bne.n	284f4 <__aeabi_dsub+0x4d4>
   2858a:	000c      	movs	r4, r1
   2858c:	0017      	movs	r7, r2
   2858e:	4666      	mov	r6, ip
   28590:	e5cc      	b.n	2812c <__aeabi_dsub+0x10c>
   28592:	2700      	movs	r7, #0
   28594:	2400      	movs	r4, #0
   28596:	e5e8      	b.n	2816a <__aeabi_dsub+0x14a>
   28598:	2b00      	cmp	r3, #0
   2859a:	d039      	beq.n	28610 <__aeabi_dsub+0x5f0>
   2859c:	000b      	movs	r3, r1
   2859e:	4313      	orrs	r3, r2
   285a0:	d100      	bne.n	285a4 <__aeabi_dsub+0x584>
   285a2:	e744      	b.n	2842e <__aeabi_dsub+0x40e>
   285a4:	08c0      	lsrs	r0, r0, #3
   285a6:	0767      	lsls	r7, r4, #29
   285a8:	4307      	orrs	r7, r0
   285aa:	2080      	movs	r0, #128	; 0x80
   285ac:	08e4      	lsrs	r4, r4, #3
   285ae:	0300      	lsls	r0, r0, #12
   285b0:	4204      	tst	r4, r0
   285b2:	d0e1      	beq.n	28578 <__aeabi_dsub+0x558>
   285b4:	08cb      	lsrs	r3, r1, #3
   285b6:	4203      	tst	r3, r0
   285b8:	d1de      	bne.n	28578 <__aeabi_dsub+0x558>
   285ba:	08d7      	lsrs	r7, r2, #3
   285bc:	0749      	lsls	r1, r1, #29
   285be:	430f      	orrs	r7, r1
   285c0:	001c      	movs	r4, r3
   285c2:	e7d9      	b.n	28578 <__aeabi_dsub+0x558>
   285c4:	2100      	movs	r1, #0
   285c6:	e771      	b.n	284ac <__aeabi_dsub+0x48c>
   285c8:	2500      	movs	r5, #0
   285ca:	2700      	movs	r7, #0
   285cc:	e5e9      	b.n	281a2 <__aeabi_dsub+0x182>
   285ce:	002e      	movs	r6, r5
   285d0:	0027      	movs	r7, r4
   285d2:	3e20      	subs	r6, #32
   285d4:	40f7      	lsrs	r7, r6
   285d6:	2d20      	cmp	r5, #32
   285d8:	d02f      	beq.n	2863a <__aeabi_dsub+0x61a>
   285da:	2640      	movs	r6, #64	; 0x40
   285dc:	1b75      	subs	r5, r6, r5
   285de:	40ac      	lsls	r4, r5
   285e0:	4650      	mov	r0, sl
   285e2:	4320      	orrs	r0, r4
   285e4:	1e44      	subs	r4, r0, #1
   285e6:	41a0      	sbcs	r0, r4
   285e8:	2400      	movs	r4, #0
   285ea:	4338      	orrs	r0, r7
   285ec:	e6dc      	b.n	283a8 <__aeabi_dsub+0x388>
   285ee:	2480      	movs	r4, #128	; 0x80
   285f0:	2500      	movs	r5, #0
   285f2:	0324      	lsls	r4, r4, #12
   285f4:	4e13      	ldr	r6, [pc, #76]	; (28644 <__aeabi_dsub+0x624>)
   285f6:	2700      	movs	r7, #0
   285f8:	e5d3      	b.n	281a2 <__aeabi_dsub+0x182>
   285fa:	4650      	mov	r0, sl
   285fc:	4320      	orrs	r0, r4
   285fe:	0007      	movs	r7, r0
   28600:	1e78      	subs	r0, r7, #1
   28602:	4187      	sbcs	r7, r0
   28604:	2400      	movs	r4, #0
   28606:	18bf      	adds	r7, r7, r2
   28608:	e760      	b.n	284cc <__aeabi_dsub+0x4ac>
   2860a:	000c      	movs	r4, r1
   2860c:	0017      	movs	r7, r2
   2860e:	e58d      	b.n	2812c <__aeabi_dsub+0x10c>
   28610:	000c      	movs	r4, r1
   28612:	0017      	movs	r7, r2
   28614:	4e0b      	ldr	r6, [pc, #44]	; (28644 <__aeabi_dsub+0x624>)
   28616:	e589      	b.n	2812c <__aeabi_dsub+0x10c>
   28618:	001e      	movs	r6, r3
   2861a:	0027      	movs	r7, r4
   2861c:	3e20      	subs	r6, #32
   2861e:	40f7      	lsrs	r7, r6
   28620:	2b20      	cmp	r3, #32
   28622:	d00c      	beq.n	2863e <__aeabi_dsub+0x61e>
   28624:	2640      	movs	r6, #64	; 0x40
   28626:	1af3      	subs	r3, r6, r3
   28628:	409c      	lsls	r4, r3
   2862a:	4650      	mov	r0, sl
   2862c:	4320      	orrs	r0, r4
   2862e:	1e44      	subs	r4, r0, #1
   28630:	41a0      	sbcs	r0, r4
   28632:	4307      	orrs	r7, r0
   28634:	2400      	movs	r4, #0
   28636:	18bf      	adds	r7, r7, r2
   28638:	e748      	b.n	284cc <__aeabi_dsub+0x4ac>
   2863a:	2400      	movs	r4, #0
   2863c:	e7d0      	b.n	285e0 <__aeabi_dsub+0x5c0>
   2863e:	2400      	movs	r4, #0
   28640:	e7f3      	b.n	2862a <__aeabi_dsub+0x60a>
   28642:	46c0      	nop			; (mov r8, r8)
   28644:	000007ff 	.word	0x000007ff
   28648:	ff7fffff 	.word	0xff7fffff

0002864c <__aeabi_dcmpun>:
   2864c:	b570      	push	{r4, r5, r6, lr}
   2864e:	4e0e      	ldr	r6, [pc, #56]	; (28688 <__aeabi_dcmpun+0x3c>)
   28650:	030d      	lsls	r5, r1, #12
   28652:	031c      	lsls	r4, r3, #12
   28654:	0049      	lsls	r1, r1, #1
   28656:	005b      	lsls	r3, r3, #1
   28658:	0b2d      	lsrs	r5, r5, #12
   2865a:	0d49      	lsrs	r1, r1, #21
   2865c:	0b24      	lsrs	r4, r4, #12
   2865e:	0d5b      	lsrs	r3, r3, #21
   28660:	42b1      	cmp	r1, r6
   28662:	d004      	beq.n	2866e <__aeabi_dcmpun+0x22>
   28664:	4908      	ldr	r1, [pc, #32]	; (28688 <__aeabi_dcmpun+0x3c>)
   28666:	2000      	movs	r0, #0
   28668:	428b      	cmp	r3, r1
   2866a:	d008      	beq.n	2867e <__aeabi_dcmpun+0x32>
   2866c:	bd70      	pop	{r4, r5, r6, pc}
   2866e:	4305      	orrs	r5, r0
   28670:	2001      	movs	r0, #1
   28672:	2d00      	cmp	r5, #0
   28674:	d1fa      	bne.n	2866c <__aeabi_dcmpun+0x20>
   28676:	4904      	ldr	r1, [pc, #16]	; (28688 <__aeabi_dcmpun+0x3c>)
   28678:	2000      	movs	r0, #0
   2867a:	428b      	cmp	r3, r1
   2867c:	d1f6      	bne.n	2866c <__aeabi_dcmpun+0x20>
   2867e:	4314      	orrs	r4, r2
   28680:	0020      	movs	r0, r4
   28682:	1e44      	subs	r4, r0, #1
   28684:	41a0      	sbcs	r0, r4
   28686:	e7f1      	b.n	2866c <__aeabi_dcmpun+0x20>
   28688:	000007ff 	.word	0x000007ff

0002868c <__aeabi_d2iz>:
   2868c:	b530      	push	{r4, r5, lr}
   2868e:	4d13      	ldr	r5, [pc, #76]	; (286dc <__aeabi_d2iz+0x50>)
   28690:	030a      	lsls	r2, r1, #12
   28692:	004b      	lsls	r3, r1, #1
   28694:	0b12      	lsrs	r2, r2, #12
   28696:	0d5b      	lsrs	r3, r3, #21
   28698:	0fc9      	lsrs	r1, r1, #31
   2869a:	2400      	movs	r4, #0
   2869c:	42ab      	cmp	r3, r5
   2869e:	dd10      	ble.n	286c2 <__aeabi_d2iz+0x36>
   286a0:	4c0f      	ldr	r4, [pc, #60]	; (286e0 <__aeabi_d2iz+0x54>)
   286a2:	42a3      	cmp	r3, r4
   286a4:	dc0f      	bgt.n	286c6 <__aeabi_d2iz+0x3a>
   286a6:	2480      	movs	r4, #128	; 0x80
   286a8:	4d0e      	ldr	r5, [pc, #56]	; (286e4 <__aeabi_d2iz+0x58>)
   286aa:	0364      	lsls	r4, r4, #13
   286ac:	4322      	orrs	r2, r4
   286ae:	1aed      	subs	r5, r5, r3
   286b0:	2d1f      	cmp	r5, #31
   286b2:	dd0b      	ble.n	286cc <__aeabi_d2iz+0x40>
   286b4:	480c      	ldr	r0, [pc, #48]	; (286e8 <__aeabi_d2iz+0x5c>)
   286b6:	1ac3      	subs	r3, r0, r3
   286b8:	40da      	lsrs	r2, r3
   286ba:	4254      	negs	r4, r2
   286bc:	2900      	cmp	r1, #0
   286be:	d100      	bne.n	286c2 <__aeabi_d2iz+0x36>
   286c0:	0014      	movs	r4, r2
   286c2:	0020      	movs	r0, r4
   286c4:	bd30      	pop	{r4, r5, pc}
   286c6:	4b09      	ldr	r3, [pc, #36]	; (286ec <__aeabi_d2iz+0x60>)
   286c8:	18cc      	adds	r4, r1, r3
   286ca:	e7fa      	b.n	286c2 <__aeabi_d2iz+0x36>
   286cc:	4c08      	ldr	r4, [pc, #32]	; (286f0 <__aeabi_d2iz+0x64>)
   286ce:	40e8      	lsrs	r0, r5
   286d0:	46a4      	mov	ip, r4
   286d2:	4463      	add	r3, ip
   286d4:	409a      	lsls	r2, r3
   286d6:	4302      	orrs	r2, r0
   286d8:	e7ef      	b.n	286ba <__aeabi_d2iz+0x2e>
   286da:	46c0      	nop			; (mov r8, r8)
   286dc:	000003fe 	.word	0x000003fe
   286e0:	0000041d 	.word	0x0000041d
   286e4:	00000433 	.word	0x00000433
   286e8:	00000413 	.word	0x00000413
   286ec:	7fffffff 	.word	0x7fffffff
   286f0:	fffffbed 	.word	0xfffffbed

000286f4 <__aeabi_i2d>:
   286f4:	b570      	push	{r4, r5, r6, lr}
   286f6:	2800      	cmp	r0, #0
   286f8:	d030      	beq.n	2875c <__aeabi_i2d+0x68>
   286fa:	17c3      	asrs	r3, r0, #31
   286fc:	18c4      	adds	r4, r0, r3
   286fe:	405c      	eors	r4, r3
   28700:	0fc5      	lsrs	r5, r0, #31
   28702:	0020      	movs	r0, r4
   28704:	f000 f8c2 	bl	2888c <__clzsi2>
   28708:	4b17      	ldr	r3, [pc, #92]	; (28768 <__aeabi_i2d+0x74>)
   2870a:	4a18      	ldr	r2, [pc, #96]	; (2876c <__aeabi_i2d+0x78>)
   2870c:	1a1b      	subs	r3, r3, r0
   2870e:	1ad2      	subs	r2, r2, r3
   28710:	2a1f      	cmp	r2, #31
   28712:	dd18      	ble.n	28746 <__aeabi_i2d+0x52>
   28714:	4a16      	ldr	r2, [pc, #88]	; (28770 <__aeabi_i2d+0x7c>)
   28716:	1ad2      	subs	r2, r2, r3
   28718:	4094      	lsls	r4, r2
   2871a:	2200      	movs	r2, #0
   2871c:	0324      	lsls	r4, r4, #12
   2871e:	055b      	lsls	r3, r3, #21
   28720:	0b24      	lsrs	r4, r4, #12
   28722:	0d5b      	lsrs	r3, r3, #21
   28724:	2100      	movs	r1, #0
   28726:	0010      	movs	r0, r2
   28728:	0324      	lsls	r4, r4, #12
   2872a:	0d0a      	lsrs	r2, r1, #20
   2872c:	0b24      	lsrs	r4, r4, #12
   2872e:	0512      	lsls	r2, r2, #20
   28730:	4322      	orrs	r2, r4
   28732:	4c10      	ldr	r4, [pc, #64]	; (28774 <__aeabi_i2d+0x80>)
   28734:	051b      	lsls	r3, r3, #20
   28736:	4022      	ands	r2, r4
   28738:	4313      	orrs	r3, r2
   2873a:	005b      	lsls	r3, r3, #1
   2873c:	07ed      	lsls	r5, r5, #31
   2873e:	085b      	lsrs	r3, r3, #1
   28740:	432b      	orrs	r3, r5
   28742:	0019      	movs	r1, r3
   28744:	bd70      	pop	{r4, r5, r6, pc}
   28746:	0021      	movs	r1, r4
   28748:	4091      	lsls	r1, r2
   2874a:	000a      	movs	r2, r1
   2874c:	210b      	movs	r1, #11
   2874e:	1a08      	subs	r0, r1, r0
   28750:	40c4      	lsrs	r4, r0
   28752:	055b      	lsls	r3, r3, #21
   28754:	0324      	lsls	r4, r4, #12
   28756:	0b24      	lsrs	r4, r4, #12
   28758:	0d5b      	lsrs	r3, r3, #21
   2875a:	e7e3      	b.n	28724 <__aeabi_i2d+0x30>
   2875c:	2500      	movs	r5, #0
   2875e:	2300      	movs	r3, #0
   28760:	2400      	movs	r4, #0
   28762:	2200      	movs	r2, #0
   28764:	e7de      	b.n	28724 <__aeabi_i2d+0x30>
   28766:	46c0      	nop			; (mov r8, r8)
   28768:	0000041e 	.word	0x0000041e
   2876c:	00000433 	.word	0x00000433
   28770:	00000413 	.word	0x00000413
   28774:	800fffff 	.word	0x800fffff

00028778 <__aeabi_ui2d>:
   28778:	b510      	push	{r4, lr}
   2877a:	1e04      	subs	r4, r0, #0
   2877c:	d028      	beq.n	287d0 <__aeabi_ui2d+0x58>
   2877e:	f000 f885 	bl	2888c <__clzsi2>
   28782:	4b15      	ldr	r3, [pc, #84]	; (287d8 <__aeabi_ui2d+0x60>)
   28784:	4a15      	ldr	r2, [pc, #84]	; (287dc <__aeabi_ui2d+0x64>)
   28786:	1a1b      	subs	r3, r3, r0
   28788:	1ad2      	subs	r2, r2, r3
   2878a:	2a1f      	cmp	r2, #31
   2878c:	dd15      	ble.n	287ba <__aeabi_ui2d+0x42>
   2878e:	4a14      	ldr	r2, [pc, #80]	; (287e0 <__aeabi_ui2d+0x68>)
   28790:	1ad2      	subs	r2, r2, r3
   28792:	4094      	lsls	r4, r2
   28794:	2200      	movs	r2, #0
   28796:	0324      	lsls	r4, r4, #12
   28798:	055b      	lsls	r3, r3, #21
   2879a:	0b24      	lsrs	r4, r4, #12
   2879c:	0d5b      	lsrs	r3, r3, #21
   2879e:	2100      	movs	r1, #0
   287a0:	0010      	movs	r0, r2
   287a2:	0324      	lsls	r4, r4, #12
   287a4:	0d0a      	lsrs	r2, r1, #20
   287a6:	0b24      	lsrs	r4, r4, #12
   287a8:	0512      	lsls	r2, r2, #20
   287aa:	4322      	orrs	r2, r4
   287ac:	4c0d      	ldr	r4, [pc, #52]	; (287e4 <__aeabi_ui2d+0x6c>)
   287ae:	051b      	lsls	r3, r3, #20
   287b0:	4022      	ands	r2, r4
   287b2:	4313      	orrs	r3, r2
   287b4:	005b      	lsls	r3, r3, #1
   287b6:	0859      	lsrs	r1, r3, #1
   287b8:	bd10      	pop	{r4, pc}
   287ba:	0021      	movs	r1, r4
   287bc:	4091      	lsls	r1, r2
   287be:	000a      	movs	r2, r1
   287c0:	210b      	movs	r1, #11
   287c2:	1a08      	subs	r0, r1, r0
   287c4:	40c4      	lsrs	r4, r0
   287c6:	055b      	lsls	r3, r3, #21
   287c8:	0324      	lsls	r4, r4, #12
   287ca:	0b24      	lsrs	r4, r4, #12
   287cc:	0d5b      	lsrs	r3, r3, #21
   287ce:	e7e6      	b.n	2879e <__aeabi_ui2d+0x26>
   287d0:	2300      	movs	r3, #0
   287d2:	2400      	movs	r4, #0
   287d4:	2200      	movs	r2, #0
   287d6:	e7e2      	b.n	2879e <__aeabi_ui2d+0x26>
   287d8:	0000041e 	.word	0x0000041e
   287dc:	00000433 	.word	0x00000433
   287e0:	00000413 	.word	0x00000413
   287e4:	800fffff 	.word	0x800fffff

000287e8 <__aeabi_f2d>:
   287e8:	0041      	lsls	r1, r0, #1
   287ea:	0e09      	lsrs	r1, r1, #24
   287ec:	1c4b      	adds	r3, r1, #1
   287ee:	b570      	push	{r4, r5, r6, lr}
   287f0:	b2db      	uxtb	r3, r3
   287f2:	0246      	lsls	r6, r0, #9
   287f4:	0a75      	lsrs	r5, r6, #9
   287f6:	0fc4      	lsrs	r4, r0, #31
   287f8:	2b01      	cmp	r3, #1
   287fa:	dd14      	ble.n	28826 <__aeabi_f2d+0x3e>
   287fc:	23e0      	movs	r3, #224	; 0xe0
   287fe:	009b      	lsls	r3, r3, #2
   28800:	076d      	lsls	r5, r5, #29
   28802:	0b36      	lsrs	r6, r6, #12
   28804:	18cb      	adds	r3, r1, r3
   28806:	2100      	movs	r1, #0
   28808:	0d0a      	lsrs	r2, r1, #20
   2880a:	0028      	movs	r0, r5
   2880c:	0512      	lsls	r2, r2, #20
   2880e:	4d1c      	ldr	r5, [pc, #112]	; (28880 <__aeabi_f2d+0x98>)
   28810:	4332      	orrs	r2, r6
   28812:	055b      	lsls	r3, r3, #21
   28814:	402a      	ands	r2, r5
   28816:	085b      	lsrs	r3, r3, #1
   28818:	4313      	orrs	r3, r2
   2881a:	005b      	lsls	r3, r3, #1
   2881c:	07e4      	lsls	r4, r4, #31
   2881e:	085b      	lsrs	r3, r3, #1
   28820:	4323      	orrs	r3, r4
   28822:	0019      	movs	r1, r3
   28824:	bd70      	pop	{r4, r5, r6, pc}
   28826:	2900      	cmp	r1, #0
   28828:	d114      	bne.n	28854 <__aeabi_f2d+0x6c>
   2882a:	2d00      	cmp	r5, #0
   2882c:	d01e      	beq.n	2886c <__aeabi_f2d+0x84>
   2882e:	0028      	movs	r0, r5
   28830:	f000 f82c 	bl	2888c <__clzsi2>
   28834:	280a      	cmp	r0, #10
   28836:	dc1c      	bgt.n	28872 <__aeabi_f2d+0x8a>
   28838:	230b      	movs	r3, #11
   2883a:	002a      	movs	r2, r5
   2883c:	1a1b      	subs	r3, r3, r0
   2883e:	40da      	lsrs	r2, r3
   28840:	0003      	movs	r3, r0
   28842:	3315      	adds	r3, #21
   28844:	409d      	lsls	r5, r3
   28846:	4b0f      	ldr	r3, [pc, #60]	; (28884 <__aeabi_f2d+0x9c>)
   28848:	0312      	lsls	r2, r2, #12
   2884a:	1a1b      	subs	r3, r3, r0
   2884c:	055b      	lsls	r3, r3, #21
   2884e:	0b16      	lsrs	r6, r2, #12
   28850:	0d5b      	lsrs	r3, r3, #21
   28852:	e7d8      	b.n	28806 <__aeabi_f2d+0x1e>
   28854:	2d00      	cmp	r5, #0
   28856:	d006      	beq.n	28866 <__aeabi_f2d+0x7e>
   28858:	0b32      	lsrs	r2, r6, #12
   2885a:	2680      	movs	r6, #128	; 0x80
   2885c:	0336      	lsls	r6, r6, #12
   2885e:	076d      	lsls	r5, r5, #29
   28860:	4316      	orrs	r6, r2
   28862:	4b09      	ldr	r3, [pc, #36]	; (28888 <__aeabi_f2d+0xa0>)
   28864:	e7cf      	b.n	28806 <__aeabi_f2d+0x1e>
   28866:	4b08      	ldr	r3, [pc, #32]	; (28888 <__aeabi_f2d+0xa0>)
   28868:	2600      	movs	r6, #0
   2886a:	e7cc      	b.n	28806 <__aeabi_f2d+0x1e>
   2886c:	2300      	movs	r3, #0
   2886e:	2600      	movs	r6, #0
   28870:	e7c9      	b.n	28806 <__aeabi_f2d+0x1e>
   28872:	0003      	movs	r3, r0
   28874:	002a      	movs	r2, r5
   28876:	3b0b      	subs	r3, #11
   28878:	409a      	lsls	r2, r3
   2887a:	2500      	movs	r5, #0
   2887c:	e7e3      	b.n	28846 <__aeabi_f2d+0x5e>
   2887e:	46c0      	nop			; (mov r8, r8)
   28880:	800fffff 	.word	0x800fffff
   28884:	00000389 	.word	0x00000389
   28888:	000007ff 	.word	0x000007ff

0002888c <__clzsi2>:
   2888c:	211c      	movs	r1, #28
   2888e:	2301      	movs	r3, #1
   28890:	041b      	lsls	r3, r3, #16
   28892:	4298      	cmp	r0, r3
   28894:	d301      	bcc.n	2889a <__clzsi2+0xe>
   28896:	0c00      	lsrs	r0, r0, #16
   28898:	3910      	subs	r1, #16
   2889a:	0a1b      	lsrs	r3, r3, #8
   2889c:	4298      	cmp	r0, r3
   2889e:	d301      	bcc.n	288a4 <__clzsi2+0x18>
   288a0:	0a00      	lsrs	r0, r0, #8
   288a2:	3908      	subs	r1, #8
   288a4:	091b      	lsrs	r3, r3, #4
   288a6:	4298      	cmp	r0, r3
   288a8:	d301      	bcc.n	288ae <__clzsi2+0x22>
   288aa:	0900      	lsrs	r0, r0, #4
   288ac:	3904      	subs	r1, #4
   288ae:	a202      	add	r2, pc, #8	; (adr r2, 288b8 <__clzsi2+0x2c>)
   288b0:	5c10      	ldrb	r0, [r2, r0]
   288b2:	1840      	adds	r0, r0, r1
   288b4:	4770      	bx	lr
   288b6:	46c0      	nop			; (mov r8, r8)
   288b8:	02020304 	.word	0x02020304
   288bc:	01010101 	.word	0x01010101
	...

000288c8 <__clzdi2>:
   288c8:	b510      	push	{r4, lr}
   288ca:	2900      	cmp	r1, #0
   288cc:	d103      	bne.n	288d6 <__clzdi2+0xe>
   288ce:	f7ff ffdd 	bl	2888c <__clzsi2>
   288d2:	3020      	adds	r0, #32
   288d4:	e002      	b.n	288dc <__clzdi2+0x14>
   288d6:	1c08      	adds	r0, r1, #0
   288d8:	f7ff ffd8 	bl	2888c <__clzsi2>
   288dc:	bd10      	pop	{r4, pc}
   288de:	46c0      	nop			; (mov r8, r8)

000288e0 <atoi>:
   288e0:	b510      	push	{r4, lr}
   288e2:	220a      	movs	r2, #10
   288e4:	2100      	movs	r1, #0
   288e6:	f000 fadd 	bl	28ea4 <strtol>
   288ea:	bd10      	pop	{r4, pc}

000288ec <calloc>:
   288ec:	b510      	push	{r4, lr}
   288ee:	4b03      	ldr	r3, [pc, #12]	; (288fc <calloc+0x10>)
   288f0:	000a      	movs	r2, r1
   288f2:	0001      	movs	r1, r0
   288f4:	6818      	ldr	r0, [r3, #0]
   288f6:	f000 f888 	bl	28a0a <_calloc_r>
   288fa:	bd10      	pop	{r4, pc}
   288fc:	2000002c 	.word	0x2000002c

00028900 <__errno>:
   28900:	4b01      	ldr	r3, [pc, #4]	; (28908 <__errno+0x8>)
   28902:	6818      	ldr	r0, [r3, #0]
   28904:	4770      	bx	lr
   28906:	46c0      	nop			; (mov r8, r8)
   28908:	2000002c 	.word	0x2000002c

0002890c <__libc_init_array>:
   2890c:	b570      	push	{r4, r5, r6, lr}
   2890e:	2600      	movs	r6, #0
   28910:	4d0c      	ldr	r5, [pc, #48]	; (28944 <__libc_init_array+0x38>)
   28912:	4c0d      	ldr	r4, [pc, #52]	; (28948 <__libc_init_array+0x3c>)
   28914:	1b64      	subs	r4, r4, r5
   28916:	10a4      	asrs	r4, r4, #2
   28918:	42a6      	cmp	r6, r4
   2891a:	d109      	bne.n	28930 <__libc_init_array+0x24>
   2891c:	2600      	movs	r6, #0
   2891e:	f002 f8cd 	bl	2aabc <_init>
   28922:	4d0a      	ldr	r5, [pc, #40]	; (2894c <__libc_init_array+0x40>)
   28924:	4c0a      	ldr	r4, [pc, #40]	; (28950 <__libc_init_array+0x44>)
   28926:	1b64      	subs	r4, r4, r5
   28928:	10a4      	asrs	r4, r4, #2
   2892a:	42a6      	cmp	r6, r4
   2892c:	d105      	bne.n	2893a <__libc_init_array+0x2e>
   2892e:	bd70      	pop	{r4, r5, r6, pc}
   28930:	00b3      	lsls	r3, r6, #2
   28932:	58eb      	ldr	r3, [r5, r3]
   28934:	4798      	blx	r3
   28936:	3601      	adds	r6, #1
   28938:	e7ee      	b.n	28918 <__libc_init_array+0xc>
   2893a:	00b3      	lsls	r3, r6, #2
   2893c:	58eb      	ldr	r3, [r5, r3]
   2893e:	4798      	blx	r3
   28940:	3601      	adds	r6, #1
   28942:	e7f2      	b.n	2892a <__libc_init_array+0x1e>
   28944:	0002aac8 	.word	0x0002aac8
   28948:	0002aac8 	.word	0x0002aac8
   2894c:	0002aac8 	.word	0x0002aac8
   28950:	0002aacc 	.word	0x0002aacc

00028954 <__locale_ctype_ptr_l>:
   28954:	30ec      	adds	r0, #236	; 0xec
   28956:	6800      	ldr	r0, [r0, #0]
   28958:	4770      	bx	lr
	...

0002895c <__locale_ctype_ptr>:
   2895c:	4b04      	ldr	r3, [pc, #16]	; (28970 <__locale_ctype_ptr+0x14>)
   2895e:	681b      	ldr	r3, [r3, #0]
   28960:	6a1b      	ldr	r3, [r3, #32]
   28962:	2b00      	cmp	r3, #0
   28964:	d100      	bne.n	28968 <__locale_ctype_ptr+0xc>
   28966:	4b03      	ldr	r3, [pc, #12]	; (28974 <__locale_ctype_ptr+0x18>)
   28968:	33ec      	adds	r3, #236	; 0xec
   2896a:	6818      	ldr	r0, [r3, #0]
   2896c:	4770      	bx	lr
   2896e:	46c0      	nop			; (mov r8, r8)
   28970:	2000002c 	.word	0x2000002c
   28974:	20000090 	.word	0x20000090

00028978 <malloc>:
   28978:	b510      	push	{r4, lr}
   2897a:	4b03      	ldr	r3, [pc, #12]	; (28988 <malloc+0x10>)
   2897c:	0001      	movs	r1, r0
   2897e:	6818      	ldr	r0, [r3, #0]
   28980:	f000 f89c 	bl	28abc <_malloc_r>
   28984:	bd10      	pop	{r4, pc}
   28986:	46c0      	nop			; (mov r8, r8)
   28988:	2000002c 	.word	0x2000002c

0002898c <free>:
   2898c:	b510      	push	{r4, lr}
   2898e:	4b03      	ldr	r3, [pc, #12]	; (2899c <free+0x10>)
   28990:	0001      	movs	r1, r0
   28992:	6818      	ldr	r0, [r3, #0]
   28994:	f000 f848 	bl	28a28 <_free_r>
   28998:	bd10      	pop	{r4, pc}
   2899a:	46c0      	nop			; (mov r8, r8)
   2899c:	2000002c 	.word	0x2000002c

000289a0 <__ascii_mbtowc>:
   289a0:	b082      	sub	sp, #8
   289a2:	2900      	cmp	r1, #0
   289a4:	d100      	bne.n	289a8 <__ascii_mbtowc+0x8>
   289a6:	a901      	add	r1, sp, #4
   289a8:	1e10      	subs	r0, r2, #0
   289aa:	d006      	beq.n	289ba <__ascii_mbtowc+0x1a>
   289ac:	2b00      	cmp	r3, #0
   289ae:	d006      	beq.n	289be <__ascii_mbtowc+0x1e>
   289b0:	7813      	ldrb	r3, [r2, #0]
   289b2:	600b      	str	r3, [r1, #0]
   289b4:	7810      	ldrb	r0, [r2, #0]
   289b6:	1e43      	subs	r3, r0, #1
   289b8:	4198      	sbcs	r0, r3
   289ba:	b002      	add	sp, #8
   289bc:	4770      	bx	lr
   289be:	2002      	movs	r0, #2
   289c0:	4240      	negs	r0, r0
   289c2:	e7fa      	b.n	289ba <__ascii_mbtowc+0x1a>

000289c4 <memcpy>:
   289c4:	2300      	movs	r3, #0
   289c6:	b510      	push	{r4, lr}
   289c8:	429a      	cmp	r2, r3
   289ca:	d100      	bne.n	289ce <memcpy+0xa>
   289cc:	bd10      	pop	{r4, pc}
   289ce:	5ccc      	ldrb	r4, [r1, r3]
   289d0:	54c4      	strb	r4, [r0, r3]
   289d2:	3301      	adds	r3, #1
   289d4:	e7f8      	b.n	289c8 <memcpy+0x4>

000289d6 <memmove>:
   289d6:	b510      	push	{r4, lr}
   289d8:	4288      	cmp	r0, r1
   289da:	d902      	bls.n	289e2 <memmove+0xc>
   289dc:	188b      	adds	r3, r1, r2
   289de:	4298      	cmp	r0, r3
   289e0:	d308      	bcc.n	289f4 <memmove+0x1e>
   289e2:	2300      	movs	r3, #0
   289e4:	429a      	cmp	r2, r3
   289e6:	d007      	beq.n	289f8 <memmove+0x22>
   289e8:	5ccc      	ldrb	r4, [r1, r3]
   289ea:	54c4      	strb	r4, [r0, r3]
   289ec:	3301      	adds	r3, #1
   289ee:	e7f9      	b.n	289e4 <memmove+0xe>
   289f0:	5c8b      	ldrb	r3, [r1, r2]
   289f2:	5483      	strb	r3, [r0, r2]
   289f4:	3a01      	subs	r2, #1
   289f6:	d2fb      	bcs.n	289f0 <memmove+0x1a>
   289f8:	bd10      	pop	{r4, pc}

000289fa <memset>:
   289fa:	0003      	movs	r3, r0
   289fc:	1882      	adds	r2, r0, r2
   289fe:	4293      	cmp	r3, r2
   28a00:	d100      	bne.n	28a04 <memset+0xa>
   28a02:	4770      	bx	lr
   28a04:	7019      	strb	r1, [r3, #0]
   28a06:	3301      	adds	r3, #1
   28a08:	e7f9      	b.n	289fe <memset+0x4>

00028a0a <_calloc_r>:
   28a0a:	434a      	muls	r2, r1
   28a0c:	b570      	push	{r4, r5, r6, lr}
   28a0e:	0011      	movs	r1, r2
   28a10:	0014      	movs	r4, r2
   28a12:	f000 f853 	bl	28abc <_malloc_r>
   28a16:	1e05      	subs	r5, r0, #0
   28a18:	d003      	beq.n	28a22 <_calloc_r+0x18>
   28a1a:	0022      	movs	r2, r4
   28a1c:	2100      	movs	r1, #0
   28a1e:	f7ff ffec 	bl	289fa <memset>
   28a22:	0028      	movs	r0, r5
   28a24:	bd70      	pop	{r4, r5, r6, pc}
	...

00028a28 <_free_r>:
   28a28:	b570      	push	{r4, r5, r6, lr}
   28a2a:	0005      	movs	r5, r0
   28a2c:	2900      	cmp	r1, #0
   28a2e:	d010      	beq.n	28a52 <_free_r+0x2a>
   28a30:	1f0c      	subs	r4, r1, #4
   28a32:	6823      	ldr	r3, [r4, #0]
   28a34:	2b00      	cmp	r3, #0
   28a36:	da00      	bge.n	28a3a <_free_r+0x12>
   28a38:	18e4      	adds	r4, r4, r3
   28a3a:	0028      	movs	r0, r5
   28a3c:	f000 fab4 	bl	28fa8 <__malloc_lock>
   28a40:	4a1d      	ldr	r2, [pc, #116]	; (28ab8 <_free_r+0x90>)
   28a42:	6813      	ldr	r3, [r2, #0]
   28a44:	2b00      	cmp	r3, #0
   28a46:	d105      	bne.n	28a54 <_free_r+0x2c>
   28a48:	6063      	str	r3, [r4, #4]
   28a4a:	6014      	str	r4, [r2, #0]
   28a4c:	0028      	movs	r0, r5
   28a4e:	f000 faac 	bl	28faa <__malloc_unlock>
   28a52:	bd70      	pop	{r4, r5, r6, pc}
   28a54:	42a3      	cmp	r3, r4
   28a56:	d909      	bls.n	28a6c <_free_r+0x44>
   28a58:	6821      	ldr	r1, [r4, #0]
   28a5a:	1860      	adds	r0, r4, r1
   28a5c:	4283      	cmp	r3, r0
   28a5e:	d1f3      	bne.n	28a48 <_free_r+0x20>
   28a60:	6818      	ldr	r0, [r3, #0]
   28a62:	685b      	ldr	r3, [r3, #4]
   28a64:	1841      	adds	r1, r0, r1
   28a66:	6021      	str	r1, [r4, #0]
   28a68:	e7ee      	b.n	28a48 <_free_r+0x20>
   28a6a:	0013      	movs	r3, r2
   28a6c:	685a      	ldr	r2, [r3, #4]
   28a6e:	2a00      	cmp	r2, #0
   28a70:	d001      	beq.n	28a76 <_free_r+0x4e>
   28a72:	42a2      	cmp	r2, r4
   28a74:	d9f9      	bls.n	28a6a <_free_r+0x42>
   28a76:	6819      	ldr	r1, [r3, #0]
   28a78:	1858      	adds	r0, r3, r1
   28a7a:	42a0      	cmp	r0, r4
   28a7c:	d10b      	bne.n	28a96 <_free_r+0x6e>
   28a7e:	6820      	ldr	r0, [r4, #0]
   28a80:	1809      	adds	r1, r1, r0
   28a82:	1858      	adds	r0, r3, r1
   28a84:	6019      	str	r1, [r3, #0]
   28a86:	4282      	cmp	r2, r0
   28a88:	d1e0      	bne.n	28a4c <_free_r+0x24>
   28a8a:	6810      	ldr	r0, [r2, #0]
   28a8c:	6852      	ldr	r2, [r2, #4]
   28a8e:	1841      	adds	r1, r0, r1
   28a90:	6019      	str	r1, [r3, #0]
   28a92:	605a      	str	r2, [r3, #4]
   28a94:	e7da      	b.n	28a4c <_free_r+0x24>
   28a96:	42a0      	cmp	r0, r4
   28a98:	d902      	bls.n	28aa0 <_free_r+0x78>
   28a9a:	230c      	movs	r3, #12
   28a9c:	602b      	str	r3, [r5, #0]
   28a9e:	e7d5      	b.n	28a4c <_free_r+0x24>
   28aa0:	6821      	ldr	r1, [r4, #0]
   28aa2:	1860      	adds	r0, r4, r1
   28aa4:	4282      	cmp	r2, r0
   28aa6:	d103      	bne.n	28ab0 <_free_r+0x88>
   28aa8:	6810      	ldr	r0, [r2, #0]
   28aaa:	6852      	ldr	r2, [r2, #4]
   28aac:	1841      	adds	r1, r0, r1
   28aae:	6021      	str	r1, [r4, #0]
   28ab0:	6062      	str	r2, [r4, #4]
   28ab2:	605c      	str	r4, [r3, #4]
   28ab4:	e7ca      	b.n	28a4c <_free_r+0x24>
   28ab6:	46c0      	nop			; (mov r8, r8)
   28ab8:	20000524 	.word	0x20000524

00028abc <_malloc_r>:
   28abc:	2303      	movs	r3, #3
   28abe:	b570      	push	{r4, r5, r6, lr}
   28ac0:	1ccd      	adds	r5, r1, #3
   28ac2:	439d      	bics	r5, r3
   28ac4:	3508      	adds	r5, #8
   28ac6:	0006      	movs	r6, r0
   28ac8:	2d0c      	cmp	r5, #12
   28aca:	d21e      	bcs.n	28b0a <_malloc_r+0x4e>
   28acc:	250c      	movs	r5, #12
   28ace:	42a9      	cmp	r1, r5
   28ad0:	d81d      	bhi.n	28b0e <_malloc_r+0x52>
   28ad2:	0030      	movs	r0, r6
   28ad4:	f000 fa68 	bl	28fa8 <__malloc_lock>
   28ad8:	4a25      	ldr	r2, [pc, #148]	; (28b70 <_malloc_r+0xb4>)
   28ada:	6814      	ldr	r4, [r2, #0]
   28adc:	0021      	movs	r1, r4
   28ade:	2900      	cmp	r1, #0
   28ae0:	d119      	bne.n	28b16 <_malloc_r+0x5a>
   28ae2:	4c24      	ldr	r4, [pc, #144]	; (28b74 <_malloc_r+0xb8>)
   28ae4:	6823      	ldr	r3, [r4, #0]
   28ae6:	2b00      	cmp	r3, #0
   28ae8:	d103      	bne.n	28af2 <_malloc_r+0x36>
   28aea:	0030      	movs	r0, r6
   28aec:	f000 f844 	bl	28b78 <_sbrk_r>
   28af0:	6020      	str	r0, [r4, #0]
   28af2:	0029      	movs	r1, r5
   28af4:	0030      	movs	r0, r6
   28af6:	f000 f83f 	bl	28b78 <_sbrk_r>
   28afa:	1c43      	adds	r3, r0, #1
   28afc:	d12c      	bne.n	28b58 <_malloc_r+0x9c>
   28afe:	230c      	movs	r3, #12
   28b00:	0030      	movs	r0, r6
   28b02:	6033      	str	r3, [r6, #0]
   28b04:	f000 fa51 	bl	28faa <__malloc_unlock>
   28b08:	e003      	b.n	28b12 <_malloc_r+0x56>
   28b0a:	2d00      	cmp	r5, #0
   28b0c:	dadf      	bge.n	28ace <_malloc_r+0x12>
   28b0e:	230c      	movs	r3, #12
   28b10:	6033      	str	r3, [r6, #0]
   28b12:	2000      	movs	r0, #0
   28b14:	bd70      	pop	{r4, r5, r6, pc}
   28b16:	680b      	ldr	r3, [r1, #0]
   28b18:	1b5b      	subs	r3, r3, r5
   28b1a:	d41a      	bmi.n	28b52 <_malloc_r+0x96>
   28b1c:	2b0b      	cmp	r3, #11
   28b1e:	d903      	bls.n	28b28 <_malloc_r+0x6c>
   28b20:	600b      	str	r3, [r1, #0]
   28b22:	18cc      	adds	r4, r1, r3
   28b24:	6025      	str	r5, [r4, #0]
   28b26:	e003      	b.n	28b30 <_malloc_r+0x74>
   28b28:	428c      	cmp	r4, r1
   28b2a:	d10e      	bne.n	28b4a <_malloc_r+0x8e>
   28b2c:	6863      	ldr	r3, [r4, #4]
   28b2e:	6013      	str	r3, [r2, #0]
   28b30:	0030      	movs	r0, r6
   28b32:	f000 fa3a 	bl	28faa <__malloc_unlock>
   28b36:	0020      	movs	r0, r4
   28b38:	2207      	movs	r2, #7
   28b3a:	300b      	adds	r0, #11
   28b3c:	1d23      	adds	r3, r4, #4
   28b3e:	4390      	bics	r0, r2
   28b40:	1ac3      	subs	r3, r0, r3
   28b42:	d0e7      	beq.n	28b14 <_malloc_r+0x58>
   28b44:	425a      	negs	r2, r3
   28b46:	50e2      	str	r2, [r4, r3]
   28b48:	e7e4      	b.n	28b14 <_malloc_r+0x58>
   28b4a:	684b      	ldr	r3, [r1, #4]
   28b4c:	6063      	str	r3, [r4, #4]
   28b4e:	000c      	movs	r4, r1
   28b50:	e7ee      	b.n	28b30 <_malloc_r+0x74>
   28b52:	000c      	movs	r4, r1
   28b54:	6849      	ldr	r1, [r1, #4]
   28b56:	e7c2      	b.n	28ade <_malloc_r+0x22>
   28b58:	2303      	movs	r3, #3
   28b5a:	1cc4      	adds	r4, r0, #3
   28b5c:	439c      	bics	r4, r3
   28b5e:	42a0      	cmp	r0, r4
   28b60:	d0e0      	beq.n	28b24 <_malloc_r+0x68>
   28b62:	1a21      	subs	r1, r4, r0
   28b64:	0030      	movs	r0, r6
   28b66:	f000 f807 	bl	28b78 <_sbrk_r>
   28b6a:	1c43      	adds	r3, r0, #1
   28b6c:	d1da      	bne.n	28b24 <_malloc_r+0x68>
   28b6e:	e7c6      	b.n	28afe <_malloc_r+0x42>
   28b70:	20000524 	.word	0x20000524
   28b74:	20000528 	.word	0x20000528

00028b78 <_sbrk_r>:
   28b78:	2300      	movs	r3, #0
   28b7a:	b570      	push	{r4, r5, r6, lr}
   28b7c:	4c06      	ldr	r4, [pc, #24]	; (28b98 <_sbrk_r+0x20>)
   28b7e:	0005      	movs	r5, r0
   28b80:	0008      	movs	r0, r1
   28b82:	6023      	str	r3, [r4, #0]
   28b84:	f7fb ff48 	bl	24a18 <_sbrk>
   28b88:	1c43      	adds	r3, r0, #1
   28b8a:	d103      	bne.n	28b94 <_sbrk_r+0x1c>
   28b8c:	6823      	ldr	r3, [r4, #0]
   28b8e:	2b00      	cmp	r3, #0
   28b90:	d000      	beq.n	28b94 <_sbrk_r+0x1c>
   28b92:	602b      	str	r3, [r5, #0]
   28b94:	bd70      	pop	{r4, r5, r6, pc}
   28b96:	46c0      	nop			; (mov r8, r8)
   28b98:	20000968 	.word	0x20000968

00028b9c <sniprintf>:
   28b9c:	b40c      	push	{r2, r3}
   28b9e:	b530      	push	{r4, r5, lr}
   28ba0:	4b16      	ldr	r3, [pc, #88]	; (28bfc <sniprintf+0x60>)
   28ba2:	b09d      	sub	sp, #116	; 0x74
   28ba4:	1e0c      	subs	r4, r1, #0
   28ba6:	681d      	ldr	r5, [r3, #0]
   28ba8:	da08      	bge.n	28bbc <sniprintf+0x20>
   28baa:	238b      	movs	r3, #139	; 0x8b
   28bac:	2001      	movs	r0, #1
   28bae:	602b      	str	r3, [r5, #0]
   28bb0:	4240      	negs	r0, r0
   28bb2:	b01d      	add	sp, #116	; 0x74
   28bb4:	bc30      	pop	{r4, r5}
   28bb6:	bc08      	pop	{r3}
   28bb8:	b002      	add	sp, #8
   28bba:	4718      	bx	r3
   28bbc:	2382      	movs	r3, #130	; 0x82
   28bbe:	a902      	add	r1, sp, #8
   28bc0:	009b      	lsls	r3, r3, #2
   28bc2:	818b      	strh	r3, [r1, #12]
   28bc4:	2300      	movs	r3, #0
   28bc6:	9002      	str	r0, [sp, #8]
   28bc8:	6108      	str	r0, [r1, #16]
   28bca:	429c      	cmp	r4, r3
   28bcc:	d000      	beq.n	28bd0 <sniprintf+0x34>
   28bce:	1e63      	subs	r3, r4, #1
   28bd0:	608b      	str	r3, [r1, #8]
   28bd2:	614b      	str	r3, [r1, #20]
   28bd4:	2301      	movs	r3, #1
   28bd6:	425b      	negs	r3, r3
   28bd8:	81cb      	strh	r3, [r1, #14]
   28bda:	9a20      	ldr	r2, [sp, #128]	; 0x80
   28bdc:	ab21      	add	r3, sp, #132	; 0x84
   28bde:	0028      	movs	r0, r5
   28be0:	9301      	str	r3, [sp, #4]
   28be2:	f000 fa45 	bl	29070 <_svfiprintf_r>
   28be6:	1c43      	adds	r3, r0, #1
   28be8:	da01      	bge.n	28bee <sniprintf+0x52>
   28bea:	238b      	movs	r3, #139	; 0x8b
   28bec:	602b      	str	r3, [r5, #0]
   28bee:	2c00      	cmp	r4, #0
   28bf0:	d0df      	beq.n	28bb2 <sniprintf+0x16>
   28bf2:	2300      	movs	r3, #0
   28bf4:	9a02      	ldr	r2, [sp, #8]
   28bf6:	7013      	strb	r3, [r2, #0]
   28bf8:	e7db      	b.n	28bb2 <sniprintf+0x16>
   28bfa:	46c0      	nop			; (mov r8, r8)
   28bfc:	2000002c 	.word	0x2000002c

00028c00 <siprintf>:
   28c00:	b40e      	push	{r1, r2, r3}
   28c02:	b510      	push	{r4, lr}
   28c04:	b09d      	sub	sp, #116	; 0x74
   28c06:	a902      	add	r1, sp, #8
   28c08:	9002      	str	r0, [sp, #8]
   28c0a:	6108      	str	r0, [r1, #16]
   28c0c:	480b      	ldr	r0, [pc, #44]	; (28c3c <siprintf+0x3c>)
   28c0e:	2482      	movs	r4, #130	; 0x82
   28c10:	6088      	str	r0, [r1, #8]
   28c12:	6148      	str	r0, [r1, #20]
   28c14:	2001      	movs	r0, #1
   28c16:	4240      	negs	r0, r0
   28c18:	ab1f      	add	r3, sp, #124	; 0x7c
   28c1a:	81c8      	strh	r0, [r1, #14]
   28c1c:	4808      	ldr	r0, [pc, #32]	; (28c40 <siprintf+0x40>)
   28c1e:	cb04      	ldmia	r3!, {r2}
   28c20:	00a4      	lsls	r4, r4, #2
   28c22:	6800      	ldr	r0, [r0, #0]
   28c24:	9301      	str	r3, [sp, #4]
   28c26:	818c      	strh	r4, [r1, #12]
   28c28:	f000 fa22 	bl	29070 <_svfiprintf_r>
   28c2c:	2300      	movs	r3, #0
   28c2e:	9a02      	ldr	r2, [sp, #8]
   28c30:	7013      	strb	r3, [r2, #0]
   28c32:	b01d      	add	sp, #116	; 0x74
   28c34:	bc10      	pop	{r4}
   28c36:	bc08      	pop	{r3}
   28c38:	b003      	add	sp, #12
   28c3a:	4718      	bx	r3
   28c3c:	7fffffff 	.word	0x7fffffff
   28c40:	2000002c 	.word	0x2000002c

00028c44 <strcat>:
   28c44:	0002      	movs	r2, r0
   28c46:	b510      	push	{r4, lr}
   28c48:	7813      	ldrb	r3, [r2, #0]
   28c4a:	2b00      	cmp	r3, #0
   28c4c:	d105      	bne.n	28c5a <strcat+0x16>
   28c4e:	5ccc      	ldrb	r4, [r1, r3]
   28c50:	54d4      	strb	r4, [r2, r3]
   28c52:	3301      	adds	r3, #1
   28c54:	2c00      	cmp	r4, #0
   28c56:	d1fa      	bne.n	28c4e <strcat+0xa>
   28c58:	bd10      	pop	{r4, pc}
   28c5a:	3201      	adds	r2, #1
   28c5c:	e7f4      	b.n	28c48 <strcat+0x4>

00028c5e <strchr>:
   28c5e:	b2c9      	uxtb	r1, r1
   28c60:	7803      	ldrb	r3, [r0, #0]
   28c62:	2b00      	cmp	r3, #0
   28c64:	d004      	beq.n	28c70 <strchr+0x12>
   28c66:	4299      	cmp	r1, r3
   28c68:	d100      	bne.n	28c6c <strchr+0xe>
   28c6a:	4770      	bx	lr
   28c6c:	3001      	adds	r0, #1
   28c6e:	e7f7      	b.n	28c60 <strchr+0x2>
   28c70:	424b      	negs	r3, r1
   28c72:	4159      	adcs	r1, r3
   28c74:	4249      	negs	r1, r1
   28c76:	4008      	ands	r0, r1
   28c78:	e7f7      	b.n	28c6a <strchr+0xc>

00028c7a <strcpy>:
   28c7a:	1c03      	adds	r3, r0, #0
   28c7c:	780a      	ldrb	r2, [r1, #0]
   28c7e:	3101      	adds	r1, #1
   28c80:	701a      	strb	r2, [r3, #0]
   28c82:	3301      	adds	r3, #1
   28c84:	2a00      	cmp	r2, #0
   28c86:	d1f9      	bne.n	28c7c <strcpy+0x2>
   28c88:	4770      	bx	lr

00028c8a <strlen>:
   28c8a:	2300      	movs	r3, #0
   28c8c:	5cc2      	ldrb	r2, [r0, r3]
   28c8e:	3301      	adds	r3, #1
   28c90:	2a00      	cmp	r2, #0
   28c92:	d1fb      	bne.n	28c8c <strlen+0x2>
   28c94:	1e58      	subs	r0, r3, #1
   28c96:	4770      	bx	lr

00028c98 <strncmp>:
   28c98:	2300      	movs	r3, #0
   28c9a:	b530      	push	{r4, r5, lr}
   28c9c:	429a      	cmp	r2, r3
   28c9e:	d00a      	beq.n	28cb6 <strncmp+0x1e>
   28ca0:	3a01      	subs	r2, #1
   28ca2:	5cc4      	ldrb	r4, [r0, r3]
   28ca4:	5ccd      	ldrb	r5, [r1, r3]
   28ca6:	42ac      	cmp	r4, r5
   28ca8:	d104      	bne.n	28cb4 <strncmp+0x1c>
   28caa:	429a      	cmp	r2, r3
   28cac:	d002      	beq.n	28cb4 <strncmp+0x1c>
   28cae:	3301      	adds	r3, #1
   28cb0:	2c00      	cmp	r4, #0
   28cb2:	d1f6      	bne.n	28ca2 <strncmp+0xa>
   28cb4:	1b63      	subs	r3, r4, r5
   28cb6:	0018      	movs	r0, r3
   28cb8:	bd30      	pop	{r4, r5, pc}

00028cba <strstr>:
   28cba:	b510      	push	{r4, lr}
   28cbc:	0002      	movs	r2, r0
   28cbe:	7800      	ldrb	r0, [r0, #0]
   28cc0:	2800      	cmp	r0, #0
   28cc2:	d104      	bne.n	28cce <strstr+0x14>
   28cc4:	7809      	ldrb	r1, [r1, #0]
   28cc6:	2900      	cmp	r1, #0
   28cc8:	d00d      	beq.n	28ce6 <strstr+0x2c>
   28cca:	bd10      	pop	{r4, pc}
   28ccc:	3201      	adds	r2, #1
   28cce:	7810      	ldrb	r0, [r2, #0]
   28cd0:	2800      	cmp	r0, #0
   28cd2:	d0fa      	beq.n	28cca <strstr+0x10>
   28cd4:	2300      	movs	r3, #0
   28cd6:	5cc8      	ldrb	r0, [r1, r3]
   28cd8:	2800      	cmp	r0, #0
   28cda:	d004      	beq.n	28ce6 <strstr+0x2c>
   28cdc:	5cd4      	ldrb	r4, [r2, r3]
   28cde:	4284      	cmp	r4, r0
   28ce0:	d1f4      	bne.n	28ccc <strstr+0x12>
   28ce2:	3301      	adds	r3, #1
   28ce4:	e7f7      	b.n	28cd6 <strstr+0x1c>
   28ce6:	0010      	movs	r0, r2
   28ce8:	e7ef      	b.n	28cca <strstr+0x10>
	...

00028cec <strtok>:
   28cec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   28cee:	4b12      	ldr	r3, [pc, #72]	; (28d38 <strtok+0x4c>)
   28cf0:	0006      	movs	r6, r0
   28cf2:	681d      	ldr	r5, [r3, #0]
   28cf4:	000f      	movs	r7, r1
   28cf6:	6dac      	ldr	r4, [r5, #88]	; 0x58
   28cf8:	2c00      	cmp	r4, #0
   28cfa:	d116      	bne.n	28d2a <strtok+0x3e>
   28cfc:	2050      	movs	r0, #80	; 0x50
   28cfe:	f7ff fe3b 	bl	28978 <malloc>
   28d02:	65a8      	str	r0, [r5, #88]	; 0x58
   28d04:	6004      	str	r4, [r0, #0]
   28d06:	6044      	str	r4, [r0, #4]
   28d08:	6084      	str	r4, [r0, #8]
   28d0a:	60c4      	str	r4, [r0, #12]
   28d0c:	6104      	str	r4, [r0, #16]
   28d0e:	6144      	str	r4, [r0, #20]
   28d10:	6184      	str	r4, [r0, #24]
   28d12:	6284      	str	r4, [r0, #40]	; 0x28
   28d14:	62c4      	str	r4, [r0, #44]	; 0x2c
   28d16:	6304      	str	r4, [r0, #48]	; 0x30
   28d18:	6344      	str	r4, [r0, #52]	; 0x34
   28d1a:	6384      	str	r4, [r0, #56]	; 0x38
   28d1c:	63c4      	str	r4, [r0, #60]	; 0x3c
   28d1e:	6404      	str	r4, [r0, #64]	; 0x40
   28d20:	6444      	str	r4, [r0, #68]	; 0x44
   28d22:	6484      	str	r4, [r0, #72]	; 0x48
   28d24:	64c4      	str	r4, [r0, #76]	; 0x4c
   28d26:	7704      	strb	r4, [r0, #28]
   28d28:	6244      	str	r4, [r0, #36]	; 0x24
   28d2a:	6daa      	ldr	r2, [r5, #88]	; 0x58
   28d2c:	0039      	movs	r1, r7
   28d2e:	0030      	movs	r0, r6
   28d30:	2301      	movs	r3, #1
   28d32:	f000 f803 	bl	28d3c <__strtok_r>
   28d36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   28d38:	2000002c 	.word	0x2000002c

00028d3c <__strtok_r>:
   28d3c:	b5f0      	push	{r4, r5, r6, r7, lr}
   28d3e:	2800      	cmp	r0, #0
   28d40:	d104      	bne.n	28d4c <__strtok_r+0x10>
   28d42:	6810      	ldr	r0, [r2, #0]
   28d44:	2800      	cmp	r0, #0
   28d46:	d101      	bne.n	28d4c <__strtok_r+0x10>
   28d48:	bdf0      	pop	{r4, r5, r6, r7, pc}
   28d4a:	0020      	movs	r0, r4
   28d4c:	000e      	movs	r6, r1
   28d4e:	7805      	ldrb	r5, [r0, #0]
   28d50:	1c44      	adds	r4, r0, #1
   28d52:	7837      	ldrb	r7, [r6, #0]
   28d54:	2f00      	cmp	r7, #0
   28d56:	d104      	bne.n	28d62 <__strtok_r+0x26>
   28d58:	2d00      	cmp	r5, #0
   28d5a:	d110      	bne.n	28d7e <__strtok_r+0x42>
   28d5c:	6015      	str	r5, [r2, #0]
   28d5e:	0028      	movs	r0, r5
   28d60:	e7f2      	b.n	28d48 <__strtok_r+0xc>
   28d62:	3601      	adds	r6, #1
   28d64:	42bd      	cmp	r5, r7
   28d66:	d1f4      	bne.n	28d52 <__strtok_r+0x16>
   28d68:	2b00      	cmp	r3, #0
   28d6a:	d1ee      	bne.n	28d4a <__strtok_r+0xe>
   28d6c:	6014      	str	r4, [r2, #0]
   28d6e:	7003      	strb	r3, [r0, #0]
   28d70:	e7ea      	b.n	28d48 <__strtok_r+0xc>
   28d72:	0033      	movs	r3, r6
   28d74:	e00e      	b.n	28d94 <__strtok_r+0x58>
   28d76:	3501      	adds	r5, #1
   28d78:	001c      	movs	r4, r3
   28d7a:	2f00      	cmp	r7, #0
   28d7c:	d102      	bne.n	28d84 <__strtok_r+0x48>
   28d7e:	000d      	movs	r5, r1
   28d80:	7826      	ldrb	r6, [r4, #0]
   28d82:	1c63      	adds	r3, r4, #1
   28d84:	782f      	ldrb	r7, [r5, #0]
   28d86:	42be      	cmp	r6, r7
   28d88:	d1f5      	bne.n	28d76 <__strtok_r+0x3a>
   28d8a:	2e00      	cmp	r6, #0
   28d8c:	d0f1      	beq.n	28d72 <__strtok_r+0x36>
   28d8e:	2400      	movs	r4, #0
   28d90:	1e59      	subs	r1, r3, #1
   28d92:	700c      	strb	r4, [r1, #0]
   28d94:	6013      	str	r3, [r2, #0]
   28d96:	e7d7      	b.n	28d48 <__strtok_r+0xc>

00028d98 <_strtol_l.isra.0>:
   28d98:	b5f0      	push	{r4, r5, r6, r7, lr}
   28d9a:	001f      	movs	r7, r3
   28d9c:	000e      	movs	r6, r1
   28d9e:	b087      	sub	sp, #28
   28da0:	9005      	str	r0, [sp, #20]
   28da2:	9103      	str	r1, [sp, #12]
   28da4:	9202      	str	r2, [sp, #8]
   28da6:	980c      	ldr	r0, [sp, #48]	; 0x30
   28da8:	7834      	ldrb	r4, [r6, #0]
   28daa:	f7ff fdd3 	bl	28954 <__locale_ctype_ptr_l>
   28dae:	2208      	movs	r2, #8
   28db0:	1900      	adds	r0, r0, r4
   28db2:	7843      	ldrb	r3, [r0, #1]
   28db4:	1c75      	adds	r5, r6, #1
   28db6:	4013      	ands	r3, r2
   28db8:	d10c      	bne.n	28dd4 <_strtol_l.isra.0+0x3c>
   28dba:	2c2d      	cmp	r4, #45	; 0x2d
   28dbc:	d10c      	bne.n	28dd8 <_strtol_l.isra.0+0x40>
   28dbe:	3301      	adds	r3, #1
   28dc0:	782c      	ldrb	r4, [r5, #0]
   28dc2:	9301      	str	r3, [sp, #4]
   28dc4:	1cb5      	adds	r5, r6, #2
   28dc6:	2f00      	cmp	r7, #0
   28dc8:	d00c      	beq.n	28de4 <_strtol_l.isra.0+0x4c>
   28dca:	2f10      	cmp	r7, #16
   28dcc:	d114      	bne.n	28df8 <_strtol_l.isra.0+0x60>
   28dce:	2c30      	cmp	r4, #48	; 0x30
   28dd0:	d00a      	beq.n	28de8 <_strtol_l.isra.0+0x50>
   28dd2:	e011      	b.n	28df8 <_strtol_l.isra.0+0x60>
   28dd4:	002e      	movs	r6, r5
   28dd6:	e7e6      	b.n	28da6 <_strtol_l.isra.0+0xe>
   28dd8:	9301      	str	r3, [sp, #4]
   28dda:	2c2b      	cmp	r4, #43	; 0x2b
   28ddc:	d1f3      	bne.n	28dc6 <_strtol_l.isra.0+0x2e>
   28dde:	782c      	ldrb	r4, [r5, #0]
   28de0:	1cb5      	adds	r5, r6, #2
   28de2:	e7f0      	b.n	28dc6 <_strtol_l.isra.0+0x2e>
   28de4:	2c30      	cmp	r4, #48	; 0x30
   28de6:	d12f      	bne.n	28e48 <_strtol_l.isra.0+0xb0>
   28de8:	2220      	movs	r2, #32
   28dea:	782b      	ldrb	r3, [r5, #0]
   28dec:	4393      	bics	r3, r2
   28dee:	2b58      	cmp	r3, #88	; 0x58
   28df0:	d151      	bne.n	28e96 <_strtol_l.isra.0+0xfe>
   28df2:	2710      	movs	r7, #16
   28df4:	786c      	ldrb	r4, [r5, #1]
   28df6:	3502      	adds	r5, #2
   28df8:	9b01      	ldr	r3, [sp, #4]
   28dfa:	4a29      	ldr	r2, [pc, #164]	; (28ea0 <_strtol_l.isra.0+0x108>)
   28dfc:	0039      	movs	r1, r7
   28dfe:	189e      	adds	r6, r3, r2
   28e00:	0030      	movs	r0, r6
   28e02:	f7fd f9f5 	bl	261f0 <__aeabi_uidivmod>
   28e06:	0030      	movs	r0, r6
   28e08:	9104      	str	r1, [sp, #16]
   28e0a:	0039      	movs	r1, r7
   28e0c:	f7fd f96a 	bl	260e4 <__udivsi3>
   28e10:	2101      	movs	r1, #1
   28e12:	2300      	movs	r3, #0
   28e14:	4249      	negs	r1, r1
   28e16:	0002      	movs	r2, r0
   28e18:	468c      	mov	ip, r1
   28e1a:	0018      	movs	r0, r3
   28e1c:	0021      	movs	r1, r4
   28e1e:	3930      	subs	r1, #48	; 0x30
   28e20:	2909      	cmp	r1, #9
   28e22:	d813      	bhi.n	28e4c <_strtol_l.isra.0+0xb4>
   28e24:	000c      	movs	r4, r1
   28e26:	42a7      	cmp	r7, r4
   28e28:	dd1c      	ble.n	28e64 <_strtol_l.isra.0+0xcc>
   28e2a:	1c59      	adds	r1, r3, #1
   28e2c:	d009      	beq.n	28e42 <_strtol_l.isra.0+0xaa>
   28e2e:	4663      	mov	r3, ip
   28e30:	4282      	cmp	r2, r0
   28e32:	d306      	bcc.n	28e42 <_strtol_l.isra.0+0xaa>
   28e34:	d102      	bne.n	28e3c <_strtol_l.isra.0+0xa4>
   28e36:	9904      	ldr	r1, [sp, #16]
   28e38:	42a1      	cmp	r1, r4
   28e3a:	db02      	blt.n	28e42 <_strtol_l.isra.0+0xaa>
   28e3c:	2301      	movs	r3, #1
   28e3e:	4378      	muls	r0, r7
   28e40:	1820      	adds	r0, r4, r0
   28e42:	782c      	ldrb	r4, [r5, #0]
   28e44:	3501      	adds	r5, #1
   28e46:	e7e9      	b.n	28e1c <_strtol_l.isra.0+0x84>
   28e48:	270a      	movs	r7, #10
   28e4a:	e7d5      	b.n	28df8 <_strtol_l.isra.0+0x60>
   28e4c:	0021      	movs	r1, r4
   28e4e:	3941      	subs	r1, #65	; 0x41
   28e50:	2919      	cmp	r1, #25
   28e52:	d801      	bhi.n	28e58 <_strtol_l.isra.0+0xc0>
   28e54:	3c37      	subs	r4, #55	; 0x37
   28e56:	e7e6      	b.n	28e26 <_strtol_l.isra.0+0x8e>
   28e58:	0021      	movs	r1, r4
   28e5a:	3961      	subs	r1, #97	; 0x61
   28e5c:	2919      	cmp	r1, #25
   28e5e:	d801      	bhi.n	28e64 <_strtol_l.isra.0+0xcc>
   28e60:	3c57      	subs	r4, #87	; 0x57
   28e62:	e7e0      	b.n	28e26 <_strtol_l.isra.0+0x8e>
   28e64:	1c5a      	adds	r2, r3, #1
   28e66:	d108      	bne.n	28e7a <_strtol_l.isra.0+0xe2>
   28e68:	9a05      	ldr	r2, [sp, #20]
   28e6a:	3323      	adds	r3, #35	; 0x23
   28e6c:	6013      	str	r3, [r2, #0]
   28e6e:	9b02      	ldr	r3, [sp, #8]
   28e70:	0030      	movs	r0, r6
   28e72:	2b00      	cmp	r3, #0
   28e74:	d10b      	bne.n	28e8e <_strtol_l.isra.0+0xf6>
   28e76:	b007      	add	sp, #28
   28e78:	bdf0      	pop	{r4, r5, r6, r7, pc}
   28e7a:	9a01      	ldr	r2, [sp, #4]
   28e7c:	2a00      	cmp	r2, #0
   28e7e:	d000      	beq.n	28e82 <_strtol_l.isra.0+0xea>
   28e80:	4240      	negs	r0, r0
   28e82:	9a02      	ldr	r2, [sp, #8]
   28e84:	2a00      	cmp	r2, #0
   28e86:	d0f6      	beq.n	28e76 <_strtol_l.isra.0+0xde>
   28e88:	9a03      	ldr	r2, [sp, #12]
   28e8a:	2b00      	cmp	r3, #0
   28e8c:	d000      	beq.n	28e90 <_strtol_l.isra.0+0xf8>
   28e8e:	1e6a      	subs	r2, r5, #1
   28e90:	9b02      	ldr	r3, [sp, #8]
   28e92:	601a      	str	r2, [r3, #0]
   28e94:	e7ef      	b.n	28e76 <_strtol_l.isra.0+0xde>
   28e96:	2430      	movs	r4, #48	; 0x30
   28e98:	2f00      	cmp	r7, #0
   28e9a:	d1ad      	bne.n	28df8 <_strtol_l.isra.0+0x60>
   28e9c:	3708      	adds	r7, #8
   28e9e:	e7ab      	b.n	28df8 <_strtol_l.isra.0+0x60>
   28ea0:	7fffffff 	.word	0x7fffffff

00028ea4 <strtol>:
   28ea4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   28ea6:	0013      	movs	r3, r2
   28ea8:	4a06      	ldr	r2, [pc, #24]	; (28ec4 <strtol+0x20>)
   28eaa:	0005      	movs	r5, r0
   28eac:	6810      	ldr	r0, [r2, #0]
   28eae:	6a04      	ldr	r4, [r0, #32]
   28eb0:	2c00      	cmp	r4, #0
   28eb2:	d100      	bne.n	28eb6 <strtol+0x12>
   28eb4:	4c04      	ldr	r4, [pc, #16]	; (28ec8 <strtol+0x24>)
   28eb6:	000a      	movs	r2, r1
   28eb8:	9400      	str	r4, [sp, #0]
   28eba:	0029      	movs	r1, r5
   28ebc:	f7ff ff6c 	bl	28d98 <_strtol_l.isra.0>
   28ec0:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   28ec2:	46c0      	nop			; (mov r8, r8)
   28ec4:	2000002c 	.word	0x2000002c
   28ec8:	20000090 	.word	0x20000090

00028ecc <__utoa>:
   28ecc:	b5f0      	push	{r4, r5, r6, r7, lr}
   28ece:	0017      	movs	r7, r2
   28ed0:	b08f      	sub	sp, #60	; 0x3c
   28ed2:	2225      	movs	r2, #37	; 0x25
   28ed4:	0006      	movs	r6, r0
   28ed6:	000d      	movs	r5, r1
   28ed8:	a804      	add	r0, sp, #16
   28eda:	4918      	ldr	r1, [pc, #96]	; (28f3c <__utoa+0x70>)
   28edc:	f7ff fd72 	bl	289c4 <memcpy>
   28ee0:	aa04      	add	r2, sp, #16
   28ee2:	1ebb      	subs	r3, r7, #2
   28ee4:	2400      	movs	r4, #0
   28ee6:	9203      	str	r2, [sp, #12]
   28ee8:	2b22      	cmp	r3, #34	; 0x22
   28eea:	d905      	bls.n	28ef8 <__utoa+0x2c>
   28eec:	702c      	strb	r4, [r5, #0]
   28eee:	0025      	movs	r5, r4
   28ef0:	0028      	movs	r0, r5
   28ef2:	b00f      	add	sp, #60	; 0x3c
   28ef4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   28ef6:	9c01      	ldr	r4, [sp, #4]
   28ef8:	1c63      	adds	r3, r4, #1
   28efa:	9301      	str	r3, [sp, #4]
   28efc:	18eb      	adds	r3, r5, r3
   28efe:	9300      	str	r3, [sp, #0]
   28f00:	0030      	movs	r0, r6
   28f02:	3b01      	subs	r3, #1
   28f04:	0039      	movs	r1, r7
   28f06:	9302      	str	r3, [sp, #8]
   28f08:	f7fd f972 	bl	261f0 <__aeabi_uidivmod>
   28f0c:	9b03      	ldr	r3, [sp, #12]
   28f0e:	9a02      	ldr	r2, [sp, #8]
   28f10:	5c5b      	ldrb	r3, [r3, r1]
   28f12:	0030      	movs	r0, r6
   28f14:	7013      	strb	r3, [r2, #0]
   28f16:	0039      	movs	r1, r7
   28f18:	f7fd f8e4 	bl	260e4 <__udivsi3>
   28f1c:	1e06      	subs	r6, r0, #0
   28f1e:	d1ea      	bne.n	28ef6 <__utoa+0x2a>
   28f20:	9b00      	ldr	r3, [sp, #0]
   28f22:	7018      	strb	r0, [r3, #0]
   28f24:	002b      	movs	r3, r5
   28f26:	1b5a      	subs	r2, r3, r5
   28f28:	4294      	cmp	r4, r2
   28f2a:	dde1      	ble.n	28ef0 <__utoa+0x24>
   28f2c:	781a      	ldrb	r2, [r3, #0]
   28f2e:	5d29      	ldrb	r1, [r5, r4]
   28f30:	7019      	strb	r1, [r3, #0]
   28f32:	552a      	strb	r2, [r5, r4]
   28f34:	3301      	adds	r3, #1
   28f36:	3c01      	subs	r4, #1
   28f38:	e7f5      	b.n	28f26 <__utoa+0x5a>
   28f3a:	46c0      	nop			; (mov r8, r8)
   28f3c:	0002a962 	.word	0x0002a962

00028f40 <utoa>:
   28f40:	b510      	push	{r4, lr}
   28f42:	f7ff ffc3 	bl	28ecc <__utoa>
   28f46:	bd10      	pop	{r4, pc}

00028f48 <_vsiprintf_r>:
   28f48:	b530      	push	{r4, r5, lr}
   28f4a:	b09b      	sub	sp, #108	; 0x6c
   28f4c:	9100      	str	r1, [sp, #0]
   28f4e:	9104      	str	r1, [sp, #16]
   28f50:	4908      	ldr	r1, [pc, #32]	; (28f74 <_vsiprintf_r+0x2c>)
   28f52:	466d      	mov	r5, sp
   28f54:	9102      	str	r1, [sp, #8]
   28f56:	9105      	str	r1, [sp, #20]
   28f58:	2101      	movs	r1, #1
   28f5a:	2482      	movs	r4, #130	; 0x82
   28f5c:	4249      	negs	r1, r1
   28f5e:	81e9      	strh	r1, [r5, #14]
   28f60:	00a4      	lsls	r4, r4, #2
   28f62:	4669      	mov	r1, sp
   28f64:	81ac      	strh	r4, [r5, #12]
   28f66:	f000 f883 	bl	29070 <_svfiprintf_r>
   28f6a:	2300      	movs	r3, #0
   28f6c:	9a00      	ldr	r2, [sp, #0]
   28f6e:	7013      	strb	r3, [r2, #0]
   28f70:	b01b      	add	sp, #108	; 0x6c
   28f72:	bd30      	pop	{r4, r5, pc}
   28f74:	7fffffff 	.word	0x7fffffff

00028f78 <vsiprintf>:
   28f78:	b510      	push	{r4, lr}
   28f7a:	0013      	movs	r3, r2
   28f7c:	000a      	movs	r2, r1
   28f7e:	0001      	movs	r1, r0
   28f80:	4802      	ldr	r0, [pc, #8]	; (28f8c <vsiprintf+0x14>)
   28f82:	6800      	ldr	r0, [r0, #0]
   28f84:	f7ff ffe0 	bl	28f48 <_vsiprintf_r>
   28f88:	bd10      	pop	{r4, pc}
   28f8a:	46c0      	nop			; (mov r8, r8)
   28f8c:	2000002c 	.word	0x2000002c

00028f90 <__ascii_wctomb>:
   28f90:	1e0b      	subs	r3, r1, #0
   28f92:	d004      	beq.n	28f9e <__ascii_wctomb+0xe>
   28f94:	2aff      	cmp	r2, #255	; 0xff
   28f96:	d904      	bls.n	28fa2 <__ascii_wctomb+0x12>
   28f98:	238a      	movs	r3, #138	; 0x8a
   28f9a:	6003      	str	r3, [r0, #0]
   28f9c:	3b8b      	subs	r3, #139	; 0x8b
   28f9e:	0018      	movs	r0, r3
   28fa0:	4770      	bx	lr
   28fa2:	700a      	strb	r2, [r1, #0]
   28fa4:	2301      	movs	r3, #1
   28fa6:	e7fa      	b.n	28f9e <__ascii_wctomb+0xe>

00028fa8 <__malloc_lock>:
   28fa8:	4770      	bx	lr

00028faa <__malloc_unlock>:
   28faa:	4770      	bx	lr

00028fac <__ssputs_r>:
   28fac:	b5f0      	push	{r4, r5, r6, r7, lr}
   28fae:	688e      	ldr	r6, [r1, #8]
   28fb0:	b085      	sub	sp, #20
   28fb2:	0007      	movs	r7, r0
   28fb4:	000c      	movs	r4, r1
   28fb6:	9203      	str	r2, [sp, #12]
   28fb8:	9301      	str	r3, [sp, #4]
   28fba:	429e      	cmp	r6, r3
   28fbc:	d839      	bhi.n	29032 <__ssputs_r+0x86>
   28fbe:	2390      	movs	r3, #144	; 0x90
   28fc0:	898a      	ldrh	r2, [r1, #12]
   28fc2:	00db      	lsls	r3, r3, #3
   28fc4:	421a      	tst	r2, r3
   28fc6:	d034      	beq.n	29032 <__ssputs_r+0x86>
   28fc8:	2503      	movs	r5, #3
   28fca:	6909      	ldr	r1, [r1, #16]
   28fcc:	6823      	ldr	r3, [r4, #0]
   28fce:	1a5b      	subs	r3, r3, r1
   28fd0:	9302      	str	r3, [sp, #8]
   28fd2:	6963      	ldr	r3, [r4, #20]
   28fd4:	9802      	ldr	r0, [sp, #8]
   28fd6:	435d      	muls	r5, r3
   28fd8:	0feb      	lsrs	r3, r5, #31
   28fda:	195d      	adds	r5, r3, r5
   28fdc:	9b01      	ldr	r3, [sp, #4]
   28fde:	106d      	asrs	r5, r5, #1
   28fe0:	3301      	adds	r3, #1
   28fe2:	181b      	adds	r3, r3, r0
   28fe4:	42ab      	cmp	r3, r5
   28fe6:	d900      	bls.n	28fea <__ssputs_r+0x3e>
   28fe8:	001d      	movs	r5, r3
   28fea:	0553      	lsls	r3, r2, #21
   28fec:	d532      	bpl.n	29054 <__ssputs_r+0xa8>
   28fee:	0029      	movs	r1, r5
   28ff0:	0038      	movs	r0, r7
   28ff2:	f7ff fd63 	bl	28abc <_malloc_r>
   28ff6:	1e06      	subs	r6, r0, #0
   28ff8:	d109      	bne.n	2900e <__ssputs_r+0x62>
   28ffa:	230c      	movs	r3, #12
   28ffc:	603b      	str	r3, [r7, #0]
   28ffe:	2340      	movs	r3, #64	; 0x40
   29000:	2001      	movs	r0, #1
   29002:	89a2      	ldrh	r2, [r4, #12]
   29004:	4240      	negs	r0, r0
   29006:	4313      	orrs	r3, r2
   29008:	81a3      	strh	r3, [r4, #12]
   2900a:	b005      	add	sp, #20
   2900c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2900e:	9a02      	ldr	r2, [sp, #8]
   29010:	6921      	ldr	r1, [r4, #16]
   29012:	f7ff fcd7 	bl	289c4 <memcpy>
   29016:	89a3      	ldrh	r3, [r4, #12]
   29018:	4a14      	ldr	r2, [pc, #80]	; (2906c <__ssputs_r+0xc0>)
   2901a:	401a      	ands	r2, r3
   2901c:	2380      	movs	r3, #128	; 0x80
   2901e:	4313      	orrs	r3, r2
   29020:	81a3      	strh	r3, [r4, #12]
   29022:	9b02      	ldr	r3, [sp, #8]
   29024:	6126      	str	r6, [r4, #16]
   29026:	18f6      	adds	r6, r6, r3
   29028:	6026      	str	r6, [r4, #0]
   2902a:	6165      	str	r5, [r4, #20]
   2902c:	9e01      	ldr	r6, [sp, #4]
   2902e:	1aed      	subs	r5, r5, r3
   29030:	60a5      	str	r5, [r4, #8]
   29032:	9b01      	ldr	r3, [sp, #4]
   29034:	42b3      	cmp	r3, r6
   29036:	d200      	bcs.n	2903a <__ssputs_r+0x8e>
   29038:	001e      	movs	r6, r3
   2903a:	0032      	movs	r2, r6
   2903c:	9903      	ldr	r1, [sp, #12]
   2903e:	6820      	ldr	r0, [r4, #0]
   29040:	f7ff fcc9 	bl	289d6 <memmove>
   29044:	68a3      	ldr	r3, [r4, #8]
   29046:	2000      	movs	r0, #0
   29048:	1b9b      	subs	r3, r3, r6
   2904a:	60a3      	str	r3, [r4, #8]
   2904c:	6823      	ldr	r3, [r4, #0]
   2904e:	199e      	adds	r6, r3, r6
   29050:	6026      	str	r6, [r4, #0]
   29052:	e7da      	b.n	2900a <__ssputs_r+0x5e>
   29054:	002a      	movs	r2, r5
   29056:	0038      	movs	r0, r7
   29058:	f000 faa1 	bl	2959e <_realloc_r>
   2905c:	1e06      	subs	r6, r0, #0
   2905e:	d1e0      	bne.n	29022 <__ssputs_r+0x76>
   29060:	6921      	ldr	r1, [r4, #16]
   29062:	0038      	movs	r0, r7
   29064:	f7ff fce0 	bl	28a28 <_free_r>
   29068:	e7c7      	b.n	28ffa <__ssputs_r+0x4e>
   2906a:	46c0      	nop			; (mov r8, r8)
   2906c:	fffffb7f 	.word	0xfffffb7f

00029070 <_svfiprintf_r>:
   29070:	b5f0      	push	{r4, r5, r6, r7, lr}
   29072:	b09f      	sub	sp, #124	; 0x7c
   29074:	9002      	str	r0, [sp, #8]
   29076:	9305      	str	r3, [sp, #20]
   29078:	898b      	ldrh	r3, [r1, #12]
   2907a:	000f      	movs	r7, r1
   2907c:	0016      	movs	r6, r2
   2907e:	061b      	lsls	r3, r3, #24
   29080:	d511      	bpl.n	290a6 <_svfiprintf_r+0x36>
   29082:	690b      	ldr	r3, [r1, #16]
   29084:	2b00      	cmp	r3, #0
   29086:	d10e      	bne.n	290a6 <_svfiprintf_r+0x36>
   29088:	2140      	movs	r1, #64	; 0x40
   2908a:	f7ff fd17 	bl	28abc <_malloc_r>
   2908e:	6038      	str	r0, [r7, #0]
   29090:	6138      	str	r0, [r7, #16]
   29092:	2800      	cmp	r0, #0
   29094:	d105      	bne.n	290a2 <_svfiprintf_r+0x32>
   29096:	230c      	movs	r3, #12
   29098:	9a02      	ldr	r2, [sp, #8]
   2909a:	3801      	subs	r0, #1
   2909c:	6013      	str	r3, [r2, #0]
   2909e:	b01f      	add	sp, #124	; 0x7c
   290a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   290a2:	2340      	movs	r3, #64	; 0x40
   290a4:	617b      	str	r3, [r7, #20]
   290a6:	2300      	movs	r3, #0
   290a8:	ad06      	add	r5, sp, #24
   290aa:	616b      	str	r3, [r5, #20]
   290ac:	3320      	adds	r3, #32
   290ae:	766b      	strb	r3, [r5, #25]
   290b0:	3310      	adds	r3, #16
   290b2:	76ab      	strb	r3, [r5, #26]
   290b4:	0034      	movs	r4, r6
   290b6:	7823      	ldrb	r3, [r4, #0]
   290b8:	2b00      	cmp	r3, #0
   290ba:	d147      	bne.n	2914c <_svfiprintf_r+0xdc>
   290bc:	1ba3      	subs	r3, r4, r6
   290be:	9304      	str	r3, [sp, #16]
   290c0:	d00d      	beq.n	290de <_svfiprintf_r+0x6e>
   290c2:	1ba3      	subs	r3, r4, r6
   290c4:	0032      	movs	r2, r6
   290c6:	0039      	movs	r1, r7
   290c8:	9802      	ldr	r0, [sp, #8]
   290ca:	f7ff ff6f 	bl	28fac <__ssputs_r>
   290ce:	1c43      	adds	r3, r0, #1
   290d0:	d100      	bne.n	290d4 <_svfiprintf_r+0x64>
   290d2:	e0b5      	b.n	29240 <_svfiprintf_r+0x1d0>
   290d4:	696a      	ldr	r2, [r5, #20]
   290d6:	9b04      	ldr	r3, [sp, #16]
   290d8:	4694      	mov	ip, r2
   290da:	4463      	add	r3, ip
   290dc:	616b      	str	r3, [r5, #20]
   290de:	7823      	ldrb	r3, [r4, #0]
   290e0:	2b00      	cmp	r3, #0
   290e2:	d100      	bne.n	290e6 <_svfiprintf_r+0x76>
   290e4:	e0ac      	b.n	29240 <_svfiprintf_r+0x1d0>
   290e6:	2201      	movs	r2, #1
   290e8:	2300      	movs	r3, #0
   290ea:	4252      	negs	r2, r2
   290ec:	606a      	str	r2, [r5, #4]
   290ee:	a902      	add	r1, sp, #8
   290f0:	3254      	adds	r2, #84	; 0x54
   290f2:	1852      	adds	r2, r2, r1
   290f4:	3401      	adds	r4, #1
   290f6:	602b      	str	r3, [r5, #0]
   290f8:	60eb      	str	r3, [r5, #12]
   290fa:	60ab      	str	r3, [r5, #8]
   290fc:	7013      	strb	r3, [r2, #0]
   290fe:	65ab      	str	r3, [r5, #88]	; 0x58
   29100:	4e58      	ldr	r6, [pc, #352]	; (29264 <_svfiprintf_r+0x1f4>)
   29102:	2205      	movs	r2, #5
   29104:	7821      	ldrb	r1, [r4, #0]
   29106:	0030      	movs	r0, r6
   29108:	f000 fa3e 	bl	29588 <memchr>
   2910c:	1c62      	adds	r2, r4, #1
   2910e:	2800      	cmp	r0, #0
   29110:	d120      	bne.n	29154 <_svfiprintf_r+0xe4>
   29112:	6829      	ldr	r1, [r5, #0]
   29114:	06cb      	lsls	r3, r1, #27
   29116:	d504      	bpl.n	29122 <_svfiprintf_r+0xb2>
   29118:	2353      	movs	r3, #83	; 0x53
   2911a:	ae02      	add	r6, sp, #8
   2911c:	3020      	adds	r0, #32
   2911e:	199b      	adds	r3, r3, r6
   29120:	7018      	strb	r0, [r3, #0]
   29122:	070b      	lsls	r3, r1, #28
   29124:	d504      	bpl.n	29130 <_svfiprintf_r+0xc0>
   29126:	2353      	movs	r3, #83	; 0x53
   29128:	202b      	movs	r0, #43	; 0x2b
   2912a:	ae02      	add	r6, sp, #8
   2912c:	199b      	adds	r3, r3, r6
   2912e:	7018      	strb	r0, [r3, #0]
   29130:	7823      	ldrb	r3, [r4, #0]
   29132:	2b2a      	cmp	r3, #42	; 0x2a
   29134:	d016      	beq.n	29164 <_svfiprintf_r+0xf4>
   29136:	2000      	movs	r0, #0
   29138:	210a      	movs	r1, #10
   2913a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2913c:	7822      	ldrb	r2, [r4, #0]
   2913e:	3a30      	subs	r2, #48	; 0x30
   29140:	2a09      	cmp	r2, #9
   29142:	d955      	bls.n	291f0 <_svfiprintf_r+0x180>
   29144:	2800      	cmp	r0, #0
   29146:	d015      	beq.n	29174 <_svfiprintf_r+0x104>
   29148:	9309      	str	r3, [sp, #36]	; 0x24
   2914a:	e013      	b.n	29174 <_svfiprintf_r+0x104>
   2914c:	2b25      	cmp	r3, #37	; 0x25
   2914e:	d0b5      	beq.n	290bc <_svfiprintf_r+0x4c>
   29150:	3401      	adds	r4, #1
   29152:	e7b0      	b.n	290b6 <_svfiprintf_r+0x46>
   29154:	2301      	movs	r3, #1
   29156:	1b80      	subs	r0, r0, r6
   29158:	4083      	lsls	r3, r0
   2915a:	6829      	ldr	r1, [r5, #0]
   2915c:	0014      	movs	r4, r2
   2915e:	430b      	orrs	r3, r1
   29160:	602b      	str	r3, [r5, #0]
   29162:	e7cd      	b.n	29100 <_svfiprintf_r+0x90>
   29164:	9b05      	ldr	r3, [sp, #20]
   29166:	1d18      	adds	r0, r3, #4
   29168:	681b      	ldr	r3, [r3, #0]
   2916a:	9005      	str	r0, [sp, #20]
   2916c:	2b00      	cmp	r3, #0
   2916e:	db39      	blt.n	291e4 <_svfiprintf_r+0x174>
   29170:	9309      	str	r3, [sp, #36]	; 0x24
   29172:	0014      	movs	r4, r2
   29174:	7823      	ldrb	r3, [r4, #0]
   29176:	2b2e      	cmp	r3, #46	; 0x2e
   29178:	d10b      	bne.n	29192 <_svfiprintf_r+0x122>
   2917a:	7863      	ldrb	r3, [r4, #1]
   2917c:	1c62      	adds	r2, r4, #1
   2917e:	2b2a      	cmp	r3, #42	; 0x2a
   29180:	d13e      	bne.n	29200 <_svfiprintf_r+0x190>
   29182:	9b05      	ldr	r3, [sp, #20]
   29184:	3402      	adds	r4, #2
   29186:	1d1a      	adds	r2, r3, #4
   29188:	681b      	ldr	r3, [r3, #0]
   2918a:	9205      	str	r2, [sp, #20]
   2918c:	2b00      	cmp	r3, #0
   2918e:	db34      	blt.n	291fa <_svfiprintf_r+0x18a>
   29190:	9307      	str	r3, [sp, #28]
   29192:	4e35      	ldr	r6, [pc, #212]	; (29268 <_svfiprintf_r+0x1f8>)
   29194:	7821      	ldrb	r1, [r4, #0]
   29196:	2203      	movs	r2, #3
   29198:	0030      	movs	r0, r6
   2919a:	f000 f9f5 	bl	29588 <memchr>
   2919e:	2800      	cmp	r0, #0
   291a0:	d006      	beq.n	291b0 <_svfiprintf_r+0x140>
   291a2:	2340      	movs	r3, #64	; 0x40
   291a4:	1b80      	subs	r0, r0, r6
   291a6:	4083      	lsls	r3, r0
   291a8:	682a      	ldr	r2, [r5, #0]
   291aa:	3401      	adds	r4, #1
   291ac:	4313      	orrs	r3, r2
   291ae:	602b      	str	r3, [r5, #0]
   291b0:	7821      	ldrb	r1, [r4, #0]
   291b2:	2206      	movs	r2, #6
   291b4:	482d      	ldr	r0, [pc, #180]	; (2926c <_svfiprintf_r+0x1fc>)
   291b6:	1c66      	adds	r6, r4, #1
   291b8:	7629      	strb	r1, [r5, #24]
   291ba:	f000 f9e5 	bl	29588 <memchr>
   291be:	2800      	cmp	r0, #0
   291c0:	d046      	beq.n	29250 <_svfiprintf_r+0x1e0>
   291c2:	4b2b      	ldr	r3, [pc, #172]	; (29270 <_svfiprintf_r+0x200>)
   291c4:	2b00      	cmp	r3, #0
   291c6:	d12f      	bne.n	29228 <_svfiprintf_r+0x1b8>
   291c8:	6829      	ldr	r1, [r5, #0]
   291ca:	9b05      	ldr	r3, [sp, #20]
   291cc:	2207      	movs	r2, #7
   291ce:	05c9      	lsls	r1, r1, #23
   291d0:	d528      	bpl.n	29224 <_svfiprintf_r+0x1b4>
   291d2:	189b      	adds	r3, r3, r2
   291d4:	4393      	bics	r3, r2
   291d6:	3308      	adds	r3, #8
   291d8:	9305      	str	r3, [sp, #20]
   291da:	696b      	ldr	r3, [r5, #20]
   291dc:	9a03      	ldr	r2, [sp, #12]
   291de:	189b      	adds	r3, r3, r2
   291e0:	616b      	str	r3, [r5, #20]
   291e2:	e767      	b.n	290b4 <_svfiprintf_r+0x44>
   291e4:	425b      	negs	r3, r3
   291e6:	60eb      	str	r3, [r5, #12]
   291e8:	2302      	movs	r3, #2
   291ea:	430b      	orrs	r3, r1
   291ec:	602b      	str	r3, [r5, #0]
   291ee:	e7c0      	b.n	29172 <_svfiprintf_r+0x102>
   291f0:	434b      	muls	r3, r1
   291f2:	3401      	adds	r4, #1
   291f4:	189b      	adds	r3, r3, r2
   291f6:	2001      	movs	r0, #1
   291f8:	e7a0      	b.n	2913c <_svfiprintf_r+0xcc>
   291fa:	2301      	movs	r3, #1
   291fc:	425b      	negs	r3, r3
   291fe:	e7c7      	b.n	29190 <_svfiprintf_r+0x120>
   29200:	2300      	movs	r3, #0
   29202:	0014      	movs	r4, r2
   29204:	200a      	movs	r0, #10
   29206:	001a      	movs	r2, r3
   29208:	606b      	str	r3, [r5, #4]
   2920a:	7821      	ldrb	r1, [r4, #0]
   2920c:	3930      	subs	r1, #48	; 0x30
   2920e:	2909      	cmp	r1, #9
   29210:	d903      	bls.n	2921a <_svfiprintf_r+0x1aa>
   29212:	2b00      	cmp	r3, #0
   29214:	d0bd      	beq.n	29192 <_svfiprintf_r+0x122>
   29216:	9207      	str	r2, [sp, #28]
   29218:	e7bb      	b.n	29192 <_svfiprintf_r+0x122>
   2921a:	4342      	muls	r2, r0
   2921c:	3401      	adds	r4, #1
   2921e:	1852      	adds	r2, r2, r1
   29220:	2301      	movs	r3, #1
   29222:	e7f2      	b.n	2920a <_svfiprintf_r+0x19a>
   29224:	3307      	adds	r3, #7
   29226:	e7d5      	b.n	291d4 <_svfiprintf_r+0x164>
   29228:	ab05      	add	r3, sp, #20
   2922a:	9300      	str	r3, [sp, #0]
   2922c:	003a      	movs	r2, r7
   2922e:	4b11      	ldr	r3, [pc, #68]	; (29274 <_svfiprintf_r+0x204>)
   29230:	0029      	movs	r1, r5
   29232:	9802      	ldr	r0, [sp, #8]
   29234:	e000      	b.n	29238 <_svfiprintf_r+0x1c8>
   29236:	bf00      	nop
   29238:	9003      	str	r0, [sp, #12]
   2923a:	9b03      	ldr	r3, [sp, #12]
   2923c:	3301      	adds	r3, #1
   2923e:	d1cc      	bne.n	291da <_svfiprintf_r+0x16a>
   29240:	89bb      	ldrh	r3, [r7, #12]
   29242:	980b      	ldr	r0, [sp, #44]	; 0x2c
   29244:	065b      	lsls	r3, r3, #25
   29246:	d400      	bmi.n	2924a <_svfiprintf_r+0x1da>
   29248:	e729      	b.n	2909e <_svfiprintf_r+0x2e>
   2924a:	2001      	movs	r0, #1
   2924c:	4240      	negs	r0, r0
   2924e:	e726      	b.n	2909e <_svfiprintf_r+0x2e>
   29250:	ab05      	add	r3, sp, #20
   29252:	9300      	str	r3, [sp, #0]
   29254:	003a      	movs	r2, r7
   29256:	4b07      	ldr	r3, [pc, #28]	; (29274 <_svfiprintf_r+0x204>)
   29258:	0029      	movs	r1, r5
   2925a:	9802      	ldr	r0, [sp, #8]
   2925c:	f000 f87a 	bl	29354 <_printf_i>
   29260:	e7ea      	b.n	29238 <_svfiprintf_r+0x1c8>
   29262:	46c0      	nop			; (mov r8, r8)
   29264:	0002aa88 	.word	0x0002aa88
   29268:	0002aa8e 	.word	0x0002aa8e
   2926c:	0002aa92 	.word	0x0002aa92
   29270:	00000000 	.word	0x00000000
   29274:	00028fad 	.word	0x00028fad

00029278 <_printf_common>:
   29278:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2927a:	0015      	movs	r5, r2
   2927c:	9301      	str	r3, [sp, #4]
   2927e:	688a      	ldr	r2, [r1, #8]
   29280:	690b      	ldr	r3, [r1, #16]
   29282:	9000      	str	r0, [sp, #0]
   29284:	000c      	movs	r4, r1
   29286:	4293      	cmp	r3, r2
   29288:	da00      	bge.n	2928c <_printf_common+0x14>
   2928a:	0013      	movs	r3, r2
   2928c:	0022      	movs	r2, r4
   2928e:	602b      	str	r3, [r5, #0]
   29290:	3243      	adds	r2, #67	; 0x43
   29292:	7812      	ldrb	r2, [r2, #0]
   29294:	2a00      	cmp	r2, #0
   29296:	d001      	beq.n	2929c <_printf_common+0x24>
   29298:	3301      	adds	r3, #1
   2929a:	602b      	str	r3, [r5, #0]
   2929c:	6823      	ldr	r3, [r4, #0]
   2929e:	069b      	lsls	r3, r3, #26
   292a0:	d502      	bpl.n	292a8 <_printf_common+0x30>
   292a2:	682b      	ldr	r3, [r5, #0]
   292a4:	3302      	adds	r3, #2
   292a6:	602b      	str	r3, [r5, #0]
   292a8:	2706      	movs	r7, #6
   292aa:	6823      	ldr	r3, [r4, #0]
   292ac:	401f      	ands	r7, r3
   292ae:	d027      	beq.n	29300 <_printf_common+0x88>
   292b0:	0023      	movs	r3, r4
   292b2:	3343      	adds	r3, #67	; 0x43
   292b4:	781b      	ldrb	r3, [r3, #0]
   292b6:	1e5a      	subs	r2, r3, #1
   292b8:	4193      	sbcs	r3, r2
   292ba:	6822      	ldr	r2, [r4, #0]
   292bc:	0692      	lsls	r2, r2, #26
   292be:	d430      	bmi.n	29322 <_printf_common+0xaa>
   292c0:	0022      	movs	r2, r4
   292c2:	9901      	ldr	r1, [sp, #4]
   292c4:	3243      	adds	r2, #67	; 0x43
   292c6:	9800      	ldr	r0, [sp, #0]
   292c8:	9e08      	ldr	r6, [sp, #32]
   292ca:	47b0      	blx	r6
   292cc:	1c43      	adds	r3, r0, #1
   292ce:	d025      	beq.n	2931c <_printf_common+0xa4>
   292d0:	2306      	movs	r3, #6
   292d2:	6820      	ldr	r0, [r4, #0]
   292d4:	682a      	ldr	r2, [r5, #0]
   292d6:	68e1      	ldr	r1, [r4, #12]
   292d8:	4003      	ands	r3, r0
   292da:	2500      	movs	r5, #0
   292dc:	2b04      	cmp	r3, #4
   292de:	d103      	bne.n	292e8 <_printf_common+0x70>
   292e0:	1a8d      	subs	r5, r1, r2
   292e2:	43eb      	mvns	r3, r5
   292e4:	17db      	asrs	r3, r3, #31
   292e6:	401d      	ands	r5, r3
   292e8:	68a3      	ldr	r3, [r4, #8]
   292ea:	6922      	ldr	r2, [r4, #16]
   292ec:	4293      	cmp	r3, r2
   292ee:	dd01      	ble.n	292f4 <_printf_common+0x7c>
   292f0:	1a9b      	subs	r3, r3, r2
   292f2:	18ed      	adds	r5, r5, r3
   292f4:	2700      	movs	r7, #0
   292f6:	42bd      	cmp	r5, r7
   292f8:	d120      	bne.n	2933c <_printf_common+0xc4>
   292fa:	2000      	movs	r0, #0
   292fc:	e010      	b.n	29320 <_printf_common+0xa8>
   292fe:	3701      	adds	r7, #1
   29300:	68e3      	ldr	r3, [r4, #12]
   29302:	682a      	ldr	r2, [r5, #0]
   29304:	1a9b      	subs	r3, r3, r2
   29306:	429f      	cmp	r7, r3
   29308:	dad2      	bge.n	292b0 <_printf_common+0x38>
   2930a:	0022      	movs	r2, r4
   2930c:	2301      	movs	r3, #1
   2930e:	3219      	adds	r2, #25
   29310:	9901      	ldr	r1, [sp, #4]
   29312:	9800      	ldr	r0, [sp, #0]
   29314:	9e08      	ldr	r6, [sp, #32]
   29316:	47b0      	blx	r6
   29318:	1c43      	adds	r3, r0, #1
   2931a:	d1f0      	bne.n	292fe <_printf_common+0x86>
   2931c:	2001      	movs	r0, #1
   2931e:	4240      	negs	r0, r0
   29320:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   29322:	2030      	movs	r0, #48	; 0x30
   29324:	18e1      	adds	r1, r4, r3
   29326:	3143      	adds	r1, #67	; 0x43
   29328:	7008      	strb	r0, [r1, #0]
   2932a:	0021      	movs	r1, r4
   2932c:	1c5a      	adds	r2, r3, #1
   2932e:	3145      	adds	r1, #69	; 0x45
   29330:	7809      	ldrb	r1, [r1, #0]
   29332:	18a2      	adds	r2, r4, r2
   29334:	3243      	adds	r2, #67	; 0x43
   29336:	3302      	adds	r3, #2
   29338:	7011      	strb	r1, [r2, #0]
   2933a:	e7c1      	b.n	292c0 <_printf_common+0x48>
   2933c:	0022      	movs	r2, r4
   2933e:	2301      	movs	r3, #1
   29340:	321a      	adds	r2, #26
   29342:	9901      	ldr	r1, [sp, #4]
   29344:	9800      	ldr	r0, [sp, #0]
   29346:	9e08      	ldr	r6, [sp, #32]
   29348:	47b0      	blx	r6
   2934a:	1c43      	adds	r3, r0, #1
   2934c:	d0e6      	beq.n	2931c <_printf_common+0xa4>
   2934e:	3701      	adds	r7, #1
   29350:	e7d1      	b.n	292f6 <_printf_common+0x7e>
	...

00029354 <_printf_i>:
   29354:	b5f0      	push	{r4, r5, r6, r7, lr}
   29356:	b08b      	sub	sp, #44	; 0x2c
   29358:	9206      	str	r2, [sp, #24]
   2935a:	000a      	movs	r2, r1
   2935c:	3243      	adds	r2, #67	; 0x43
   2935e:	9307      	str	r3, [sp, #28]
   29360:	9005      	str	r0, [sp, #20]
   29362:	9204      	str	r2, [sp, #16]
   29364:	7e0a      	ldrb	r2, [r1, #24]
   29366:	000c      	movs	r4, r1
   29368:	9b10      	ldr	r3, [sp, #64]	; 0x40
   2936a:	2a6e      	cmp	r2, #110	; 0x6e
   2936c:	d100      	bne.n	29370 <_printf_i+0x1c>
   2936e:	e08f      	b.n	29490 <_printf_i+0x13c>
   29370:	d817      	bhi.n	293a2 <_printf_i+0x4e>
   29372:	2a63      	cmp	r2, #99	; 0x63
   29374:	d02c      	beq.n	293d0 <_printf_i+0x7c>
   29376:	d808      	bhi.n	2938a <_printf_i+0x36>
   29378:	2a00      	cmp	r2, #0
   2937a:	d100      	bne.n	2937e <_printf_i+0x2a>
   2937c:	e099      	b.n	294b2 <_printf_i+0x15e>
   2937e:	2a58      	cmp	r2, #88	; 0x58
   29380:	d054      	beq.n	2942c <_printf_i+0xd8>
   29382:	0026      	movs	r6, r4
   29384:	3642      	adds	r6, #66	; 0x42
   29386:	7032      	strb	r2, [r6, #0]
   29388:	e029      	b.n	293de <_printf_i+0x8a>
   2938a:	2a64      	cmp	r2, #100	; 0x64
   2938c:	d001      	beq.n	29392 <_printf_i+0x3e>
   2938e:	2a69      	cmp	r2, #105	; 0x69
   29390:	d1f7      	bne.n	29382 <_printf_i+0x2e>
   29392:	6821      	ldr	r1, [r4, #0]
   29394:	681a      	ldr	r2, [r3, #0]
   29396:	0608      	lsls	r0, r1, #24
   29398:	d523      	bpl.n	293e2 <_printf_i+0x8e>
   2939a:	1d11      	adds	r1, r2, #4
   2939c:	6019      	str	r1, [r3, #0]
   2939e:	6815      	ldr	r5, [r2, #0]
   293a0:	e025      	b.n	293ee <_printf_i+0x9a>
   293a2:	2a73      	cmp	r2, #115	; 0x73
   293a4:	d100      	bne.n	293a8 <_printf_i+0x54>
   293a6:	e088      	b.n	294ba <_printf_i+0x166>
   293a8:	d808      	bhi.n	293bc <_printf_i+0x68>
   293aa:	2a6f      	cmp	r2, #111	; 0x6f
   293ac:	d029      	beq.n	29402 <_printf_i+0xae>
   293ae:	2a70      	cmp	r2, #112	; 0x70
   293b0:	d1e7      	bne.n	29382 <_printf_i+0x2e>
   293b2:	2220      	movs	r2, #32
   293b4:	6809      	ldr	r1, [r1, #0]
   293b6:	430a      	orrs	r2, r1
   293b8:	6022      	str	r2, [r4, #0]
   293ba:	e003      	b.n	293c4 <_printf_i+0x70>
   293bc:	2a75      	cmp	r2, #117	; 0x75
   293be:	d020      	beq.n	29402 <_printf_i+0xae>
   293c0:	2a78      	cmp	r2, #120	; 0x78
   293c2:	d1de      	bne.n	29382 <_printf_i+0x2e>
   293c4:	0022      	movs	r2, r4
   293c6:	2178      	movs	r1, #120	; 0x78
   293c8:	3245      	adds	r2, #69	; 0x45
   293ca:	7011      	strb	r1, [r2, #0]
   293cc:	4a6c      	ldr	r2, [pc, #432]	; (29580 <_printf_i+0x22c>)
   293ce:	e030      	b.n	29432 <_printf_i+0xde>
   293d0:	000e      	movs	r6, r1
   293d2:	681a      	ldr	r2, [r3, #0]
   293d4:	3642      	adds	r6, #66	; 0x42
   293d6:	1d11      	adds	r1, r2, #4
   293d8:	6019      	str	r1, [r3, #0]
   293da:	6813      	ldr	r3, [r2, #0]
   293dc:	7033      	strb	r3, [r6, #0]
   293de:	2301      	movs	r3, #1
   293e0:	e079      	b.n	294d6 <_printf_i+0x182>
   293e2:	0649      	lsls	r1, r1, #25
   293e4:	d5d9      	bpl.n	2939a <_printf_i+0x46>
   293e6:	1d11      	adds	r1, r2, #4
   293e8:	6019      	str	r1, [r3, #0]
   293ea:	2300      	movs	r3, #0
   293ec:	5ed5      	ldrsh	r5, [r2, r3]
   293ee:	2d00      	cmp	r5, #0
   293f0:	da03      	bge.n	293fa <_printf_i+0xa6>
   293f2:	232d      	movs	r3, #45	; 0x2d
   293f4:	9a04      	ldr	r2, [sp, #16]
   293f6:	426d      	negs	r5, r5
   293f8:	7013      	strb	r3, [r2, #0]
   293fa:	4b62      	ldr	r3, [pc, #392]	; (29584 <_printf_i+0x230>)
   293fc:	270a      	movs	r7, #10
   293fe:	9303      	str	r3, [sp, #12]
   29400:	e02f      	b.n	29462 <_printf_i+0x10e>
   29402:	6820      	ldr	r0, [r4, #0]
   29404:	6819      	ldr	r1, [r3, #0]
   29406:	0605      	lsls	r5, r0, #24
   29408:	d503      	bpl.n	29412 <_printf_i+0xbe>
   2940a:	1d08      	adds	r0, r1, #4
   2940c:	6018      	str	r0, [r3, #0]
   2940e:	680d      	ldr	r5, [r1, #0]
   29410:	e005      	b.n	2941e <_printf_i+0xca>
   29412:	0640      	lsls	r0, r0, #25
   29414:	d5f9      	bpl.n	2940a <_printf_i+0xb6>
   29416:	680d      	ldr	r5, [r1, #0]
   29418:	1d08      	adds	r0, r1, #4
   2941a:	6018      	str	r0, [r3, #0]
   2941c:	b2ad      	uxth	r5, r5
   2941e:	4b59      	ldr	r3, [pc, #356]	; (29584 <_printf_i+0x230>)
   29420:	2708      	movs	r7, #8
   29422:	9303      	str	r3, [sp, #12]
   29424:	2a6f      	cmp	r2, #111	; 0x6f
   29426:	d018      	beq.n	2945a <_printf_i+0x106>
   29428:	270a      	movs	r7, #10
   2942a:	e016      	b.n	2945a <_printf_i+0x106>
   2942c:	3145      	adds	r1, #69	; 0x45
   2942e:	700a      	strb	r2, [r1, #0]
   29430:	4a54      	ldr	r2, [pc, #336]	; (29584 <_printf_i+0x230>)
   29432:	9203      	str	r2, [sp, #12]
   29434:	681a      	ldr	r2, [r3, #0]
   29436:	6821      	ldr	r1, [r4, #0]
   29438:	1d10      	adds	r0, r2, #4
   2943a:	6018      	str	r0, [r3, #0]
   2943c:	6815      	ldr	r5, [r2, #0]
   2943e:	0608      	lsls	r0, r1, #24
   29440:	d522      	bpl.n	29488 <_printf_i+0x134>
   29442:	07cb      	lsls	r3, r1, #31
   29444:	d502      	bpl.n	2944c <_printf_i+0xf8>
   29446:	2320      	movs	r3, #32
   29448:	4319      	orrs	r1, r3
   2944a:	6021      	str	r1, [r4, #0]
   2944c:	2710      	movs	r7, #16
   2944e:	2d00      	cmp	r5, #0
   29450:	d103      	bne.n	2945a <_printf_i+0x106>
   29452:	2320      	movs	r3, #32
   29454:	6822      	ldr	r2, [r4, #0]
   29456:	439a      	bics	r2, r3
   29458:	6022      	str	r2, [r4, #0]
   2945a:	0023      	movs	r3, r4
   2945c:	2200      	movs	r2, #0
   2945e:	3343      	adds	r3, #67	; 0x43
   29460:	701a      	strb	r2, [r3, #0]
   29462:	6863      	ldr	r3, [r4, #4]
   29464:	60a3      	str	r3, [r4, #8]
   29466:	2b00      	cmp	r3, #0
   29468:	db5c      	blt.n	29524 <_printf_i+0x1d0>
   2946a:	2204      	movs	r2, #4
   2946c:	6821      	ldr	r1, [r4, #0]
   2946e:	4391      	bics	r1, r2
   29470:	6021      	str	r1, [r4, #0]
   29472:	2d00      	cmp	r5, #0
   29474:	d158      	bne.n	29528 <_printf_i+0x1d4>
   29476:	9e04      	ldr	r6, [sp, #16]
   29478:	2b00      	cmp	r3, #0
   2947a:	d064      	beq.n	29546 <_printf_i+0x1f2>
   2947c:	0026      	movs	r6, r4
   2947e:	9b03      	ldr	r3, [sp, #12]
   29480:	3642      	adds	r6, #66	; 0x42
   29482:	781b      	ldrb	r3, [r3, #0]
   29484:	7033      	strb	r3, [r6, #0]
   29486:	e05e      	b.n	29546 <_printf_i+0x1f2>
   29488:	0648      	lsls	r0, r1, #25
   2948a:	d5da      	bpl.n	29442 <_printf_i+0xee>
   2948c:	b2ad      	uxth	r5, r5
   2948e:	e7d8      	b.n	29442 <_printf_i+0xee>
   29490:	6809      	ldr	r1, [r1, #0]
   29492:	681a      	ldr	r2, [r3, #0]
   29494:	0608      	lsls	r0, r1, #24
   29496:	d505      	bpl.n	294a4 <_printf_i+0x150>
   29498:	1d11      	adds	r1, r2, #4
   2949a:	6019      	str	r1, [r3, #0]
   2949c:	6813      	ldr	r3, [r2, #0]
   2949e:	6962      	ldr	r2, [r4, #20]
   294a0:	601a      	str	r2, [r3, #0]
   294a2:	e006      	b.n	294b2 <_printf_i+0x15e>
   294a4:	0649      	lsls	r1, r1, #25
   294a6:	d5f7      	bpl.n	29498 <_printf_i+0x144>
   294a8:	1d11      	adds	r1, r2, #4
   294aa:	6019      	str	r1, [r3, #0]
   294ac:	6813      	ldr	r3, [r2, #0]
   294ae:	8aa2      	ldrh	r2, [r4, #20]
   294b0:	801a      	strh	r2, [r3, #0]
   294b2:	2300      	movs	r3, #0
   294b4:	9e04      	ldr	r6, [sp, #16]
   294b6:	6123      	str	r3, [r4, #16]
   294b8:	e054      	b.n	29564 <_printf_i+0x210>
   294ba:	681a      	ldr	r2, [r3, #0]
   294bc:	1d11      	adds	r1, r2, #4
   294be:	6019      	str	r1, [r3, #0]
   294c0:	6816      	ldr	r6, [r2, #0]
   294c2:	2100      	movs	r1, #0
   294c4:	6862      	ldr	r2, [r4, #4]
   294c6:	0030      	movs	r0, r6
   294c8:	f000 f85e 	bl	29588 <memchr>
   294cc:	2800      	cmp	r0, #0
   294ce:	d001      	beq.n	294d4 <_printf_i+0x180>
   294d0:	1b80      	subs	r0, r0, r6
   294d2:	6060      	str	r0, [r4, #4]
   294d4:	6863      	ldr	r3, [r4, #4]
   294d6:	6123      	str	r3, [r4, #16]
   294d8:	2300      	movs	r3, #0
   294da:	9a04      	ldr	r2, [sp, #16]
   294dc:	7013      	strb	r3, [r2, #0]
   294de:	e041      	b.n	29564 <_printf_i+0x210>
   294e0:	6923      	ldr	r3, [r4, #16]
   294e2:	0032      	movs	r2, r6
   294e4:	9906      	ldr	r1, [sp, #24]
   294e6:	9805      	ldr	r0, [sp, #20]
   294e8:	9d07      	ldr	r5, [sp, #28]
   294ea:	47a8      	blx	r5
   294ec:	1c43      	adds	r3, r0, #1
   294ee:	d043      	beq.n	29578 <_printf_i+0x224>
   294f0:	6823      	ldr	r3, [r4, #0]
   294f2:	2500      	movs	r5, #0
   294f4:	079b      	lsls	r3, r3, #30
   294f6:	d40f      	bmi.n	29518 <_printf_i+0x1c4>
   294f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   294fa:	68e0      	ldr	r0, [r4, #12]
   294fc:	4298      	cmp	r0, r3
   294fe:	da3d      	bge.n	2957c <_printf_i+0x228>
   29500:	0018      	movs	r0, r3
   29502:	e03b      	b.n	2957c <_printf_i+0x228>
   29504:	0022      	movs	r2, r4
   29506:	2301      	movs	r3, #1
   29508:	3219      	adds	r2, #25
   2950a:	9906      	ldr	r1, [sp, #24]
   2950c:	9805      	ldr	r0, [sp, #20]
   2950e:	9e07      	ldr	r6, [sp, #28]
   29510:	47b0      	blx	r6
   29512:	1c43      	adds	r3, r0, #1
   29514:	d030      	beq.n	29578 <_printf_i+0x224>
   29516:	3501      	adds	r5, #1
   29518:	68e3      	ldr	r3, [r4, #12]
   2951a:	9a09      	ldr	r2, [sp, #36]	; 0x24
   2951c:	1a9b      	subs	r3, r3, r2
   2951e:	429d      	cmp	r5, r3
   29520:	dbf0      	blt.n	29504 <_printf_i+0x1b0>
   29522:	e7e9      	b.n	294f8 <_printf_i+0x1a4>
   29524:	2d00      	cmp	r5, #0
   29526:	d0a9      	beq.n	2947c <_printf_i+0x128>
   29528:	9e04      	ldr	r6, [sp, #16]
   2952a:	0028      	movs	r0, r5
   2952c:	0039      	movs	r1, r7
   2952e:	f7fc fe5f 	bl	261f0 <__aeabi_uidivmod>
   29532:	9b03      	ldr	r3, [sp, #12]
   29534:	3e01      	subs	r6, #1
   29536:	5c5b      	ldrb	r3, [r3, r1]
   29538:	0028      	movs	r0, r5
   2953a:	7033      	strb	r3, [r6, #0]
   2953c:	0039      	movs	r1, r7
   2953e:	f7fc fdd1 	bl	260e4 <__udivsi3>
   29542:	1e05      	subs	r5, r0, #0
   29544:	d1f1      	bne.n	2952a <_printf_i+0x1d6>
   29546:	2f08      	cmp	r7, #8
   29548:	d109      	bne.n	2955e <_printf_i+0x20a>
   2954a:	6823      	ldr	r3, [r4, #0]
   2954c:	07db      	lsls	r3, r3, #31
   2954e:	d506      	bpl.n	2955e <_printf_i+0x20a>
   29550:	6863      	ldr	r3, [r4, #4]
   29552:	6922      	ldr	r2, [r4, #16]
   29554:	4293      	cmp	r3, r2
   29556:	dc02      	bgt.n	2955e <_printf_i+0x20a>
   29558:	2330      	movs	r3, #48	; 0x30
   2955a:	3e01      	subs	r6, #1
   2955c:	7033      	strb	r3, [r6, #0]
   2955e:	9b04      	ldr	r3, [sp, #16]
   29560:	1b9b      	subs	r3, r3, r6
   29562:	6123      	str	r3, [r4, #16]
   29564:	9b07      	ldr	r3, [sp, #28]
   29566:	aa09      	add	r2, sp, #36	; 0x24
   29568:	9300      	str	r3, [sp, #0]
   2956a:	0021      	movs	r1, r4
   2956c:	9b06      	ldr	r3, [sp, #24]
   2956e:	9805      	ldr	r0, [sp, #20]
   29570:	f7ff fe82 	bl	29278 <_printf_common>
   29574:	1c43      	adds	r3, r0, #1
   29576:	d1b3      	bne.n	294e0 <_printf_i+0x18c>
   29578:	2001      	movs	r0, #1
   2957a:	4240      	negs	r0, r0
   2957c:	b00b      	add	sp, #44	; 0x2c
   2957e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   29580:	0002aaaa 	.word	0x0002aaaa
   29584:	0002aa99 	.word	0x0002aa99

00029588 <memchr>:
   29588:	b2c9      	uxtb	r1, r1
   2958a:	1882      	adds	r2, r0, r2
   2958c:	4290      	cmp	r0, r2
   2958e:	d101      	bne.n	29594 <memchr+0xc>
   29590:	2000      	movs	r0, #0
   29592:	4770      	bx	lr
   29594:	7803      	ldrb	r3, [r0, #0]
   29596:	428b      	cmp	r3, r1
   29598:	d0fb      	beq.n	29592 <memchr+0xa>
   2959a:	3001      	adds	r0, #1
   2959c:	e7f6      	b.n	2958c <memchr+0x4>

0002959e <_realloc_r>:
   2959e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   295a0:	0007      	movs	r7, r0
   295a2:	000d      	movs	r5, r1
   295a4:	0016      	movs	r6, r2
   295a6:	2900      	cmp	r1, #0
   295a8:	d105      	bne.n	295b6 <_realloc_r+0x18>
   295aa:	0011      	movs	r1, r2
   295ac:	f7ff fa86 	bl	28abc <_malloc_r>
   295b0:	0004      	movs	r4, r0
   295b2:	0020      	movs	r0, r4
   295b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   295b6:	2a00      	cmp	r2, #0
   295b8:	d103      	bne.n	295c2 <_realloc_r+0x24>
   295ba:	f7ff fa35 	bl	28a28 <_free_r>
   295be:	0034      	movs	r4, r6
   295c0:	e7f7      	b.n	295b2 <_realloc_r+0x14>
   295c2:	f000 f812 	bl	295ea <_malloc_usable_size_r>
   295c6:	002c      	movs	r4, r5
   295c8:	4286      	cmp	r6, r0
   295ca:	d9f2      	bls.n	295b2 <_realloc_r+0x14>
   295cc:	0031      	movs	r1, r6
   295ce:	0038      	movs	r0, r7
   295d0:	f7ff fa74 	bl	28abc <_malloc_r>
   295d4:	1e04      	subs	r4, r0, #0
   295d6:	d0ec      	beq.n	295b2 <_realloc_r+0x14>
   295d8:	0029      	movs	r1, r5
   295da:	0032      	movs	r2, r6
   295dc:	f7ff f9f2 	bl	289c4 <memcpy>
   295e0:	0029      	movs	r1, r5
   295e2:	0038      	movs	r0, r7
   295e4:	f7ff fa20 	bl	28a28 <_free_r>
   295e8:	e7e3      	b.n	295b2 <_realloc_r+0x14>

000295ea <_malloc_usable_size_r>:
   295ea:	1f0b      	subs	r3, r1, #4
   295ec:	681b      	ldr	r3, [r3, #0]
   295ee:	1f18      	subs	r0, r3, #4
   295f0:	2b00      	cmp	r3, #0
   295f2:	da01      	bge.n	295f8 <_malloc_usable_size_r+0xe>
   295f4:	580b      	ldr	r3, [r1, r0]
   295f6:	18c0      	adds	r0, r0, r3
   295f8:	4770      	bx	lr
   295fa:	0000      	movs	r0, r0
   295fc:	30303030 	.word	0x30303030
   29600:	30303030 	.word	0x30303030
   29604:	00003030 	.word	0x00003030
   29608:	2e707466 	.word	0x2e707466
   2960c:	76697264 	.word	0x76697264
   29610:	2e716865 	.word	0x2e716865
   29614:	006d6f63 	.word	0x006d6f63
   29618:	7269662f 	.word	0x7269662f
   2961c:	7261776d 	.word	0x7261776d
   29620:	00002f65 	.word	0x00002f65
   29624:	75686172 	.word	0x75686172
   29628:	61726e6c 	.word	0x61726e6c
   2962c:	646f6874 	.word	0x646f6874
   29630:	006c636b 	.word	0x006c636b
   29634:	34333231 	.word	0x34333231
   29638:	38373635 	.word	0x38373635
   2963c:	00000039 	.word	0x00000039
   29640:	6d726966 	.word	0x6d726966
   29644:	65726177 	.word	0x65726177
   29648:	6e69622e 	.word	0x6e69622e
   2964c:	00000000 	.word	0x00000000
   29650:	31343037 	.word	0x31343037
   29654:	39363931 	.word	0x39363931
   29658:	00003935 	.word	0x00003935
   2965c:	38393637 	.word	0x38393637
   29660:	32393334 	.word	0x32393334
   29664:	00003130 	.word	0x00003130
   29668:	33383337 	.word	0x33383337
   2966c:	32343136 	.word	0x32343136
   29670:	00003431 	.word	0x00003431
   29674:	33383337 	.word	0x33383337
   29678:	36323236 	.word	0x36323236
   2967c:	00003837 	.word	0x00003837
   29680:	36383539 	.word	0x36383539
   29684:	39353331 	.word	0x39353331
   29688:	00003837 	.word	0x00003837
   2968c:	00003a50 	.word	0x00003a50
   29690:	00003a53 	.word	0x00003a53
   29694:	0000000a 	.word	0x0000000a
   29698:	00006425 	.word	0x00006425
   2969c:	204d5347 	.word	0x204d5347
   296a0:	656d6954 	.word	0x656d6954
   296a4:	0074756f 	.word	0x0074756f
   296a8:	4f525245 	.word	0x4f525245
   296ac:	00000052 	.word	0x00000052
   296b0:	00004b4f 	.word	0x00004b4f
   296b4:	000d5441 	.word	0x000d5441
   296b8:	492b5441 	.word	0x492b5441
   296bc:	303d4346 	.word	0x303d4346
   296c0:	000d302c 	.word	0x000d302c
   296c4:	4552432b 	.word	0x4552432b
   296c8:	30203a47 	.word	0x30203a47
   296cc:	0000312c 	.word	0x0000312c
   296d0:	432b5441 	.word	0x432b5441
   296d4:	3f474552 	.word	0x3f474552
   296d8:	0000000d 	.word	0x0000000d
   296dc:	4552432b 	.word	0x4552432b
   296e0:	30203a47 	.word	0x30203a47
   296e4:	0000352c 	.word	0x0000352c
   296e8:	492b5441 	.word	0x492b5441
   296ec:	253d5250 	.word	0x253d5250
   296f0:	00000d64 	.word	0x00000d64
   296f4:	492b5441 	.word	0x492b5441
   296f8:	303d5250 	.word	0x303d5250
   296fc:	0000000d 	.word	0x0000000d
   29700:	432b5441 	.word	0x432b5441
   29704:	3d474552 	.word	0x3d474552
   29708:	00000d31 	.word	0x00000d31
   2970c:	432b5441 	.word	0x432b5441
   29710:	3d4e5546 	.word	0x3d4e5546
   29714:	00000d31 	.word	0x00000d31
   29718:	5546432b 	.word	0x5546432b
   2971c:	31203a4e 	.word	0x31203a4e
   29720:	00000000 	.word	0x00000000
   29724:	432b5441 	.word	0x432b5441
   29728:	3f4e5546 	.word	0x3f4e5546
   2972c:	0000000d 	.word	0x0000000d
   29730:	432b5441 	.word	0x432b5441
   29734:	3d4e5546 	.word	0x3d4e5546
   29738:	00000d30 	.word	0x00000d30
   2973c:	5546432b 	.word	0x5546432b
   29740:	30203a4e 	.word	0x30203a4e
   29744:	00000000 	.word	0x00000000
   29748:	432b5441 	.word	0x432b5441
   2974c:	3d4e5546 	.word	0x3d4e5546
   29750:	0d312c31 	.word	0x0d312c31
   29754:	00000000 	.word	0x00000000
   29758:	4950432b 	.word	0x4950432b
   2975c:	52203a4e 	.word	0x52203a4e
   29760:	59444145 	.word	0x59444145
   29764:	00000000 	.word	0x00000000
   29768:	432b5441 	.word	0x432b5441
   2976c:	3f4e4950 	.word	0x3f4e4950
   29770:	0000000d 	.word	0x0000000d
   29774:	432b5441 	.word	0x432b5441
   29778:	4144474d 	.word	0x4144474d
   2977c:	4544223d 	.word	0x4544223d
   29780:	4c41204c 	.word	0x4c41204c
   29784:	000d224c 	.word	0x000d224c
   29788:	57265441 	.word	0x57265441
   2978c:	0000000d 	.word	0x0000000d
   29790:	432b5441 	.word	0x432b5441
   29794:	3d50494c 	.word	0x3d50494c
   29798:	00000d31 	.word	0x00000d31
   2979c:	432b5441 	.word	0x432b5441
   297a0:	3d504c4f 	.word	0x3d504c4f
   297a4:	00000d31 	.word	0x00000d31
   297a8:	432b5441 	.word	0x432b5441
   297ac:	4b4c4353 	.word	0x4b4c4353
   297b0:	000d313d 	.word	0x000d313d
   297b4:	432b5441 	.word	0x432b5441
   297b8:	3f504c4f 	.word	0x3f504c4f
   297bc:	0000000d 	.word	0x0000000d
   297c0:	4c4f432b 	.word	0x4c4f432b
   297c4:	00000050 	.word	0x00000050
   297c8:	0000003a 	.word	0x0000003a
   297cc:	0000002c 	.word	0x0000002c
   297d0:	432b5441 	.word	0x432b5441
   297d4:	3d43434c 	.word	0x3d43434c
   297d8:	00000d31 	.word	0x00000d31
   297dc:	46265441 	.word	0x46265441
   297e0:	0000000d 	.word	0x0000000d
   297e4:	30455441 	.word	0x30455441
   297e8:	0000000d 	.word	0x0000000d
   297ec:	432b5441 	.word	0x432b5441
   297f0:	3d46474d 	.word	0x3d46474d
   297f4:	00000d31 	.word	0x00000d31
   297f8:	432b5441 	.word	0x432b5441
   297fc:	3d504d53 	.word	0x3d504d53
   29800:	312c3731 	.word	0x312c3731
   29804:	302c3736 	.word	0x302c3736
   29808:	000d302c 	.word	0x000d302c
   2980c:	432b5441 	.word	0x432b5441
   29810:	3d534153 	.word	0x3d534153
   29814:	00000d30 	.word	0x00000d30
   29818:	432b5441 	.word	0x432b5441
   2981c:	3d534153 	.word	0x3d534153
   29820:	00000d31 	.word	0x00000d31
   29824:	432b5441 	.word	0x432b5441
   29828:	000d5153 	.word	0x000d5153
   2982c:	00003939 	.word	0x00003939
   29830:	432b5441 	.word	0x432b5441
   29834:	3d494d4e 	.word	0x3d494d4e
   29838:	2c312c32 	.word	0x2c312c32
   2983c:	2c302c30 	.word	0x2c302c30
   29840:	00000d30 	.word	0x00000d30
   29844:	432b5441 	.word	0x432b5441
   29848:	3d494d4e 	.word	0x3d494d4e
   2984c:	2c302c31 	.word	0x2c302c31
   29850:	2c302c30 	.word	0x2c302c30
   29854:	00000d30 	.word	0x00000d30
   29858:	432b5441 	.word	0x432b5441
   2985c:	3d53474d 	.word	0x3d53474d
   29860:	22732522 	.word	0x22732522
   29864:	0000000d 	.word	0x0000000d
   29868:	0000003e 	.word	0x0000003e
   2986c:	0d1a7325 	.word	0x0d1a7325
   29870:	00000000 	.word	0x00000000
   29874:	432b5441 	.word	0x432b5441
   29878:	3d4c474d 	.word	0x3d4c474d
   2987c:	43455222 	.word	0x43455222
   29880:	524e5520 	.word	0x524e5520
   29884:	22444145 	.word	0x22444145
   29888:	0000000d 	.word	0x0000000d
   2988c:	432b5441 	.word	0x432b5441
   29890:	3d4c474d 	.word	0x3d4c474d
   29894:	43455222 	.word	0x43455222
   29898:	41455220 	.word	0x41455220
   2989c:	000d2244 	.word	0x000d2244
   298a0:	432b5441 	.word	0x432b5441
   298a4:	3d4c474d 	.word	0x3d4c474d
   298a8:	4c4c4122 	.word	0x4c4c4122
   298ac:	00000d22 	.word	0x00000d22
   298b0:	4c474d43 	.word	0x4c474d43
   298b4:	00000000 	.word	0x00000000
   298b8:	432b5441 	.word	0x432b5441
   298bc:	3d52474d 	.word	0x3d52474d
   298c0:	000d6425 	.word	0x000d6425
   298c4:	474d432b 	.word	0x474d432b
   298c8:	00000052 	.word	0x00000052
   298cc:	25445441 	.word	0x25445441
   298d0:	000d3b73 	.word	0x000d3b73
   298d4:	0d415441 	.word	0x0d415441
   298d8:	00000000 	.word	0x00000000
   298dc:	432b5441 	.word	0x432b5441
   298e0:	3d53544c 	.word	0x3d53544c
   298e4:	00000d31 	.word	0x00000d31
   298e8:	432b5441 	.word	0x432b5441
   298ec:	3d53544c 	.word	0x3d53544c
   298f0:	00000d30 	.word	0x00000d30
   298f4:	442b5441 	.word	0x442b5441
   298f8:	3d544544 	.word	0x3d544544
   298fc:	00000d31 	.word	0x00000d31
   29900:	562b5441 	.word	0x562b5441
   29904:	223d5354 	.word	0x223d5354
   29908:	0d227325 	.word	0x0d227325
   2990c:	00000000 	.word	0x00000000
   29910:	432b5441 	.word	0x432b5441
   29914:	0d505548 	.word	0x0d505548
   29918:	00000000 	.word	0x00000000
   2991c:	432b5441 	.word	0x432b5441
   29920:	3d415743 	.word	0x3d415743
   29924:	0d302c30 	.word	0x0d302c30
   29928:	00000000 	.word	0x00000000
   2992c:	472b5441 	.word	0x472b5441
   29930:	55424d53 	.word	0x55424d53
   29934:	313d5953 	.word	0x313d5953
   29938:	0000000d 	.word	0x0000000d
   2993c:	472b5441 	.word	0x472b5441
   29940:	55424d53 	.word	0x55424d53
   29944:	303d5953 	.word	0x303d5953
   29948:	0000000d 	.word	0x0000000d
   2994c:	432b5441 	.word	0x432b5441
   29950:	3d434552 	.word	0x3d434552
   29954:	00000d35 	.word	0x00000d35
   29958:	432b5441 	.word	0x432b5441
   2995c:	3d434552 	.word	0x3d434552
   29960:	43222c34 	.word	0x43222c34
   29964:	73555c3a 	.word	0x73555c3a
   29968:	255c7265 	.word	0x255c7265
   2996c:	6d612e63 	.word	0x6d612e63
   29970:	302c2272 	.word	0x302c2272
   29974:	2c30392c 	.word	0x2c30392c
   29978:	000d7525 	.word	0x000d7525
   2997c:	432b5441 	.word	0x432b5441
   29980:	3f4b4c43 	.word	0x3f4b4c43
   29984:	0000000d 	.word	0x0000000d
   29988:	00000022 	.word	0x00000022
   2998c:	0000002f 	.word	0x0000002f
   29990:	0000002b 	.word	0x0000002b
   29994:	544d432b 	.word	0x544d432b
   29998:	00003a49 	.word	0x00003a49
   2999c:	474e4952 	.word	0x474e4952
   299a0:	00000000 	.word	0x00000000
   299a4:	494c432b 	.word	0x494c432b
   299a8:	00000050 	.word	0x00000050
   299ac:	43204f4e 	.word	0x43204f4e
   299b0:	49525241 	.word	0x49525241
   299b4:	00005245 	.word	0x00005245
   299b8:	59535542 	.word	0x59535542
   299bc:	00000000 	.word	0x00000000
   299c0:	41204f4e 	.word	0x41204f4e
   299c4:	4557534e 	.word	0x4557534e
   299c8:	00000052 	.word	0x00000052
   299cc:	4d54442b 	.word	0x4d54442b
   299d0:	00003a46 	.word	0x00003a46
   299d4:	4552432b 	.word	0x4552432b
   299d8:	30203a43 	.word	0x30203a43
   299dc:	00000000 	.word	0x00000000
   299e0:	532b5441 	.word	0x532b5441
   299e4:	52425041 	.word	0x52425041
   299e8:	312c333d 	.word	0x312c333d
   299ec:	4f43222c 	.word	0x4f43222c
   299f0:	5059544e 	.word	0x5059544e
   299f4:	222c2245 	.word	0x222c2245
   299f8:	53525047 	.word	0x53525047
   299fc:	00000d22 	.word	0x00000d22
   29a00:	432b5441 	.word	0x432b5441
   29a04:	3f53504f 	.word	0x3f53504f
   29a08:	0000000d 	.word	0x0000000d
   29a0c:	504f432b 	.word	0x504f432b
   29a10:	00003a53 	.word	0x00003a53
   29a14:	41454449 	.word	0x41454449
   29a18:	00000000 	.word	0x00000000
   29a1c:	532b5441 	.word	0x532b5441
   29a20:	52425041 	.word	0x52425041
   29a24:	312c333d 	.word	0x312c333d
   29a28:	5041222c 	.word	0x5041222c
   29a2c:	222c224e 	.word	0x222c224e
   29a30:	65746e69 	.word	0x65746e69
   29a34:	74656e72 	.word	0x74656e72
   29a38:	00000d22 	.word	0x00000d22
   29a3c:	41444f56 	.word	0x41444f56
   29a40:	00000000 	.word	0x00000000
   29a44:	532b5441 	.word	0x532b5441
   29a48:	52425041 	.word	0x52425041
   29a4c:	312c333d 	.word	0x312c333d
   29a50:	5041222c 	.word	0x5041222c
   29a54:	222c224e 	.word	0x222c224e
   29a58:	22777777 	.word	0x22777777
   29a5c:	0000000d 	.word	0x0000000d
   29a60:	4c4e5342 	.word	0x4c4e5342
   29a64:	00000000 	.word	0x00000000
   29a68:	532b5441 	.word	0x532b5441
   29a6c:	52425041 	.word	0x52425041
   29a70:	312c333d 	.word	0x312c333d
   29a74:	5041222c 	.word	0x5041222c
   29a78:	222c224e 	.word	0x222c224e
   29a7c:	6c6e7362 	.word	0x6c6e7362
   29a80:	2274656e 	.word	0x2274656e
   29a84:	0000000d 	.word	0x0000000d
   29a88:	54524941 	.word	0x54524941
   29a8c:	00004c45 	.word	0x00004c45
   29a90:	532b5441 	.word	0x532b5441
   29a94:	52425041 	.word	0x52425041
   29a98:	312c333d 	.word	0x312c333d
   29a9c:	5041222c 	.word	0x5041222c
   29aa0:	222c224e 	.word	0x222c224e
   29aa4:	74726961 	.word	0x74726961
   29aa8:	70676c65 	.word	0x70676c65
   29aac:	632e7372 	.word	0x632e7372
   29ab0:	0d226d6f 	.word	0x0d226d6f
   29ab4:	00000000 	.word	0x00000000
   29ab8:	532b5441 	.word	0x532b5441
   29abc:	52425041 	.word	0x52425041
   29ac0:	312c333d 	.word	0x312c333d
   29ac4:	5041222c 	.word	0x5041222c
   29ac8:	222c224e 	.word	0x222c224e
   29acc:	00000d22 	.word	0x00000d22
   29ad0:	532b5441 	.word	0x532b5441
   29ad4:	52425041 	.word	0x52425041
   29ad8:	312c323d 	.word	0x312c323d
   29adc:	0000000d 	.word	0x0000000d
   29ae0:	5041532b 	.word	0x5041532b
   29ae4:	203a5242 	.word	0x203a5242
   29ae8:	00302c31 	.word	0x00302c31
   29aec:	5041532b 	.word	0x5041532b
   29af0:	203a5242 	.word	0x203a5242
   29af4:	00312c31 	.word	0x00312c31
   29af8:	5041532b 	.word	0x5041532b
   29afc:	203a5242 	.word	0x203a5242
   29b00:	00322c31 	.word	0x00322c31
   29b04:	5041532b 	.word	0x5041532b
   29b08:	203a5242 	.word	0x203a5242
   29b0c:	00332c31 	.word	0x00332c31
   29b10:	532b5441 	.word	0x532b5441
   29b14:	52425041 	.word	0x52425041
   29b18:	312c313d 	.word	0x312c313d
   29b1c:	0000000d 	.word	0x0000000d
   29b20:	532b5441 	.word	0x532b5441
   29b24:	52425041 	.word	0x52425041
   29b28:	312c303d 	.word	0x312c303d
   29b2c:	0000000d 	.word	0x0000000d
   29b30:	462b5441 	.word	0x462b5441
   29b34:	49435054 	.word	0x49435054
   29b38:	0d313d44 	.word	0x0d313d44
   29b3c:	00000000 	.word	0x00000000
   29b40:	462b5441 	.word	0x462b5441
   29b44:	45535054 	.word	0x45535054
   29b48:	223d5652 	.word	0x223d5652
   29b4c:	0d227325 	.word	0x0d227325
   29b50:	00000000 	.word	0x00000000
   29b54:	462b5441 	.word	0x462b5441
   29b58:	4e555054 	.word	0x4e555054
   29b5c:	7325223d 	.word	0x7325223d
   29b60:	00000d22 	.word	0x00000d22
   29b64:	462b5441 	.word	0x462b5441
   29b68:	57505054 	.word	0x57505054
   29b6c:	7325223d 	.word	0x7325223d
   29b70:	00000d22 	.word	0x00000d22
   29b74:	462b5441 	.word	0x462b5441
   29b78:	45475054 	.word	0x45475054
   29b7c:	4d414e54 	.word	0x4d414e54
   29b80:	25223d45 	.word	0x25223d45
   29b84:	000d2273 	.word	0x000d2273
   29b88:	462b5441 	.word	0x462b5441
   29b8c:	45475054 	.word	0x45475054
   29b90:	54415054 	.word	0x54415054
   29b94:	25223d48 	.word	0x25223d48
   29b98:	000d2273 	.word	0x000d2273
   29b9c:	5054462b 	.word	0x5054462b
   29ba0:	455a4953 	.word	0x455a4953
   29ba4:	2c31203a 	.word	0x2c31203a
   29ba8:	00000000 	.word	0x00000000
   29bac:	462b5441 	.word	0x462b5441
   29bb0:	49535054 	.word	0x49535054
   29bb4:	000d455a 	.word	0x000d455a
   29bb8:	5054462b 	.word	0x5054462b
   29bbc:	3a544547 	.word	0x3a544547
   29bc0:	312c3120 	.word	0x312c3120
   29bc4:	00000000 	.word	0x00000000
   29bc8:	462b5441 	.word	0x462b5441
   29bcc:	45475054 	.word	0x45475054
   29bd0:	0d313d54 	.word	0x0d313d54
   29bd4:	00000000 	.word	0x00000000
   29bd8:	462b5441 	.word	0x462b5441
   29bdc:	45475054 	.word	0x45475054
   29be0:	2c323d54 	.word	0x2c323d54
   29be4:	000d6425 	.word	0x000d6425
   29be8:	5054462b 	.word	0x5054462b
   29bec:	3a544547 	.word	0x3a544547
   29bf0:	00000020 	.word	0x00000020
   29bf4:	434c432b 	.word	0x434c432b
   29bf8:	31203a43 	.word	0x31203a43
   29bfc:	322c302c 	.word	0x322c302c
   29c00:	00000000 	.word	0x00000000
   29c04:	434c432b 	.word	0x434c432b
   29c08:	31203a43 	.word	0x31203a43
   29c0c:	332c302c 	.word	0x332c302c
   29c10:	00000000 	.word	0x00000000
   29c14:	434c432b 	.word	0x434c432b
   29c18:	31203a43 	.word	0x31203a43
   29c1c:	302c302c 	.word	0x302c302c
   29c20:	00000000 	.word	0x00000000
   29c24:	434c432b 	.word	0x434c432b
   29c28:	31203a43 	.word	0x31203a43
   29c2c:	362c302c 	.word	0x362c302c
	...
   29c38:	4e4f4d41 	.word	0x4e4f4d41
   29c3c:	00000000 	.word	0x00000000
   29c40:	55475250 	.word	0x55475250
   29c44:	00004450 	.word	0x00004450
   29c48:	54494157 	.word	0x54494157
   29c4c:	00000000 	.word	0x00000000
   29c50:	204d5347 	.word	0x204d5347
   29c54:	4c4c4143 	.word	0x4c4c4143
   29c58:	49415720 	.word	0x49415720
   29c5c:	4e495454 	.word	0x4e495454
   29c60:	49442047 	.word	0x49442047
   29c64:	4c424153 	.word	0x4c424153
   29c68:	203a2045 	.word	0x203a2045
   29c6c:	43435553 	.word	0x43435553
   29c70:	00535345 	.word	0x00535345
   29c74:	204d5347 	.word	0x204d5347
   29c78:	4c4c4143 	.word	0x4c4c4143
   29c7c:	49415720 	.word	0x49415720
   29c80:	4e495454 	.word	0x4e495454
   29c84:	49442047 	.word	0x49442047
   29c88:	4c424153 	.word	0x4c424153
   29c8c:	203a2045 	.word	0x203a2045
   29c90:	4c494146 	.word	0x4c494146
   29c94:	00004445 	.word	0x00004445
   29c98:	41454c43 	.word	0x41454c43
   29c9c:	4c4c4152 	.word	0x4c4c4152
   29ca0:	00000000 	.word	0x00000000
   29ca4:	204c4c41 	.word	0x204c4c41
   29ca8:	52455355 	.word	0x52455355
   29cac:	4d554e20 	.word	0x4d554e20
   29cb0:	53524542 	.word	0x53524542
   29cb4:	454c4320 	.word	0x454c4320
   29cb8:	44455241 	.word	0x44455241
   29cbc:	00000000 	.word	0x00000000
   29cc0:	41464544 	.word	0x41464544
   29cc4:	00544c55 	.word	0x00544c55
   29cc8:	204c4c41 	.word	0x204c4c41
   29ccc:	54544553 	.word	0x54544553
   29cd0:	53474e49 	.word	0x53474e49
   29cd4:	45524120 	.word	0x45524120
   29cd8:	574f4e20 	.word	0x574f4e20
   29cdc:	43414620 	.word	0x43414620
   29ce0:	59524f54 	.word	0x59524f54
   29ce4:	46454420 	.word	0x46454420
   29ce8:	544c5541 	.word	0x544c5541
   29cec:	00000000 	.word	0x00000000
   29cf0:	004d554e 	.word	0x004d554e
   29cf4:	4e206f4e 	.word	0x4e206f4e
   29cf8:	65626d75 	.word	0x65626d75
   29cfc:	45207372 	.word	0x45207372
   29d00:	74736978 	.word	0x74736978
   29d04:	00000073 	.word	0x00000073
   29d08:	45534552 	.word	0x45534552
   29d0c:	00000054 	.word	0x00000054
   29d10:	00444944 	.word	0x00444944
   29d14:	00756c25 	.word	0x00756c25
   29d18:	4f545541 	.word	0x4f545541
   29d1c:	00004e4f 	.word	0x00004e4f
   29d20:	4f544f4d 	.word	0x4f544f4d
   29d24:	55412052 	.word	0x55412052
   29d28:	4e4f4f54 	.word	0x4e4f4f54
   29d2c:	004e4f20 	.word	0x004e4f20
   29d30:	4f545541 	.word	0x4f545541
   29d34:	0046464f 	.word	0x0046464f
   29d38:	4f544f4d 	.word	0x4f544f4d
   29d3c:	55412052 	.word	0x55412052
   29d40:	4e4f4f54 	.word	0x4e4f4f54
   29d44:	46464f20 	.word	0x46464f20
   29d48:	00000000 	.word	0x00000000
   29d4c:	50594257 	.word	0x50594257
   29d50:	00004e4f 	.word	0x00004e4f
   29d54:	45544157 	.word	0x45544157
   29d58:	59422052 	.word	0x59422052
   29d5c:	53534150 	.word	0x53534150
   29d60:	004e4f20 	.word	0x004e4f20
   29d64:	50594257 	.word	0x50594257
   29d68:	0046464f 	.word	0x0046464f
   29d6c:	45544157 	.word	0x45544157
   29d70:	59422052 	.word	0x59422052
   29d74:	53534150 	.word	0x53534150
   29d78:	46464f20 	.word	0x46464f20
   29d7c:	00000000 	.word	0x00000000
   29d80:	4f505053 	.word	0x4f505053
   29d84:	0000004e 	.word	0x0000004e
   29d88:	20505053 	.word	0x20505053
   29d8c:	00004e4f 	.word	0x00004e4f
   29d90:	4f505053 	.word	0x4f505053
   29d94:	00004646 	.word	0x00004646
   29d98:	20505053 	.word	0x20505053
   29d9c:	0046464f 	.word	0x0046464f
   29da0:	56505053 	.word	0x56505053
   29da4:	00000000 	.word	0x00000000
   29da8:	20505053 	.word	0x20505053
   29dac:	544c4f56 	.word	0x544c4f56
   29db0:	54455320 	.word	0x54455320
   29db4:	00000000 	.word	0x00000000
   29db8:	4f514553 	.word	0x4f514553
   29dbc:	0000004e 	.word	0x0000004e
   29dc0:	50514553 	.word	0x50514553
   29dc4:	004e4f20 	.word	0x004e4f20
   29dc8:	4f514553 	.word	0x4f514553
   29dcc:	00004646 	.word	0x00004646
   29dd0:	50514553 	.word	0x50514553
   29dd4:	46464f20 	.word	0x46464f20
   29dd8:	00000000 	.word	0x00000000
   29ddc:	00444e44 	.word	0x00444e44
   29de0:	20444e44 	.word	0x20444e44
   29de4:	0000203a 	.word	0x0000203a
   29de8:	004b4f20 	.word	0x004b4f20
   29dec:	4b424446 	.word	0x4b424446
   29df0:	00000000 	.word	0x00000000
   29df4:	4b424446 	.word	0x4b424446
   29df8:	25203a20 	.word	0x25203a20
   29dfc:	00000064 	.word	0x00000064
   29e00:	454d4f55 	.word	0x454d4f55
   29e04:	444f4854 	.word	0x444f4854
   29e08:	00000000 	.word	0x00000000
   29e0c:	454d4f55 	.word	0x454d4f55
   29e10:	444f4854 	.word	0x444f4854
   29e14:	00203a20 	.word	0x00203a20
   29e18:	50534552 	.word	0x50534552
   29e1c:	00000000 	.word	0x00000000
   29e20:	50534552 	.word	0x50534552
   29e24:	00203a20 	.word	0x00203a20
   29e28:	0052564f 	.word	0x0052564f
   29e2c:	2052564f 	.word	0x2052564f
   29e30:	20544553 	.word	0x20544553
   29e34:	00004b4f 	.word	0x00004b4f
   29e38:	52444e55 	.word	0x52444e55
   29e3c:	00000000 	.word	0x00000000
   29e40:	52444e55 	.word	0x52444e55
   29e44:	54455320 	.word	0x54455320
   29e48:	004b4f20 	.word	0x004b4f20
   29e4c:	41545341 	.word	0x41545341
   29e50:	00000054 	.word	0x00000054
   29e54:	75253a43 	.word	0x75253a43
   29e58:	0a75252e 	.word	0x0a75252e
   29e5c:	75253a4e 	.word	0x75253a4e
   29e60:	253a4f0a 	.word	0x253a4f0a
   29e64:	3a550a75 	.word	0x3a550a75
   29e68:	4f0a7525 	.word	0x4f0a7525
   29e6c:	75253a50 	.word	0x75253a50
   29e70:	3a50550a 	.word	0x3a50550a
   29e74:	00007525 	.word	0x00007525
   29e78:	4f46564f 	.word	0x4f46564f
   29e7c:	0000004e 	.word	0x0000004e
   29e80:	56455250 	.word	0x56455250
   29e84:	20544e45 	.word	0x20544e45
   29e88:	5245564f 	.word	0x5245564f
   29e8c:	574f4c46 	.word	0x574f4c46
   29e90:	54455320 	.word	0x54455320
   29e94:	474e4954 	.word	0x474e4954
   29e98:	004e4f20 	.word	0x004e4f20
   29e9c:	4f46564f 	.word	0x4f46564f
   29ea0:	00004646 	.word	0x00004646
   29ea4:	56455250 	.word	0x56455250
   29ea8:	20544e45 	.word	0x20544e45
   29eac:	5245564f 	.word	0x5245564f
   29eb0:	574f4c46 	.word	0x574f4c46
   29eb4:	54455320 	.word	0x54455320
   29eb8:	474e4954 	.word	0x474e4954
   29ebc:	46464f20 	.word	0x46464f20
   29ec0:	00000000 	.word	0x00000000
   29ec4:	4f4d324d 	.word	0x4f4d324d
   29ec8:	0000004e 	.word	0x0000004e
   29ecc:	204d324d 	.word	0x204d324d
   29ed0:	6e727554 	.word	0x6e727554
   29ed4:	4f206465 	.word	0x4f206465
   29ed8:	52202c6e 	.word	0x52202c6e
   29edc:	746f6d65 	.word	0x746f6d65
   29ee0:	754e2065 	.word	0x754e2065
   29ee4:	7265626d 	.word	0x7265626d
   29ee8:	726c4120 	.word	0x726c4120
   29eec:	79646165 	.word	0x79646165
   29ef0:	72655620 	.word	0x72655620
   29ef4:	65696669 	.word	0x65696669
   29ef8:	00000064 	.word	0x00000064
   29efc:	6f727245 	.word	0x6f727245
   29f00:	4d203a72 	.word	0x4d203a72
   29f04:	52204d32 	.word	0x52204d32
   29f08:	746f6d65 	.word	0x746f6d65
   29f0c:	754e2065 	.word	0x754e2065
   29f10:	7265626d 	.word	0x7265626d
   29f14:	746f4e20 	.word	0x746f4e20
   29f18:	65725020 	.word	0x65725020
   29f1c:	746e6573 	.word	0x746e6573
   29f20:	00000000 	.word	0x00000000
   29f24:	4f4d324d 	.word	0x4f4d324d
   29f28:	00004646 	.word	0x00004646
   29f2c:	204d324d 	.word	0x204d324d
   29f30:	54544553 	.word	0x54544553
   29f34:	20474e49 	.word	0x20474e49
   29f38:	0046464f 	.word	0x0046464f
   29f3c:	54415453 	.word	0x54415453
   29f40:	00005355 	.word	0x00005355
   29f44:	45544c41 	.word	0x45544c41
   29f48:	54414e52 	.word	0x54414e52
   29f4c:	554e2045 	.word	0x554e2045
   29f50:	5245424d 	.word	0x5245424d
   29f54:	004e4f20 	.word	0x004e4f20
   29f58:	45544c41 	.word	0x45544c41
   29f5c:	54414e52 	.word	0x54414e52
   29f60:	554e2045 	.word	0x554e2045
   29f64:	5245424d 	.word	0x5245424d
   29f68:	544f4e20 	.word	0x544f4e20
   29f6c:	45525020 	.word	0x45525020
   29f70:	544e4553 	.word	0x544e4553
   29f74:	00000000 	.word	0x00000000
   29f78:	464f4d41 	.word	0x464f4d41
   29f7c:	00000046 	.word	0x00000046
   29f80:	45544c41 	.word	0x45544c41
   29f84:	54414e52 	.word	0x54414e52
   29f88:	4f4d2045 	.word	0x4f4d2045
   29f8c:	454c4942 	.word	0x454c4942
   29f90:	4d554e20 	.word	0x4d554e20
   29f94:	20524542 	.word	0x20524542
   29f98:	0046464f 	.word	0x0046464f
   29f9c:	464f434e 	.word	0x464f434e
   29fa0:	00000046 	.word	0x00000046
   29fa4:	43204f4e 	.word	0x43204f4e
   29fa8:	204c4c41 	.word	0x204c4c41
   29fac:	54544553 	.word	0x54544553
   29fb0:	20474e49 	.word	0x20474e49
   29fb4:	0046464f 	.word	0x0046464f
   29fb8:	54544547 	.word	0x54544547
   29fbc:	00454d49 	.word	0x00454d49
   29fc0:	454d4954 	.word	0x454d4954
   29fc4:	25203a20 	.word	0x25203a20
   29fc8:	75253a75 	.word	0x75253a75
   29fcc:	00000000 	.word	0x00000000
   29fd0:	54544553 	.word	0x54544553
   29fd4:	00454d49 	.word	0x00454d49
   29fd8:	4954434e 	.word	0x4954434e
   29fdc:	0000454d 	.word	0x0000454d
   29fe0:	0000002d 	.word	0x0000002d
   29fe4:	0000003a 	.word	0x0000003a
   29fe8:	43204f4e 	.word	0x43204f4e
   29fec:	204c4c41 	.word	0x204c4c41
   29ff0:	494d4954 	.word	0x494d4954
   29ff4:	2053474e 	.word	0x2053474e
   29ff8:	00544553 	.word	0x00544553
   29ffc:	47415453 	.word	0x47415453
   2a000:	00000045 	.word	0x00000045
   2a004:	4c4c4143 	.word	0x4c4c4143
   2a008:	41545320 	.word	0x41545320
   2a00c:	53204547 	.word	0x53204547
   2a010:	54205445 	.word	0x54205445
   2a014:	203a204f 	.word	0x203a204f
   2a018:	00006425 	.word	0x00006425
   2a01c:	52415453 	.word	0x52415453
   2a020:	454d4954 	.word	0x454d4954
   2a024:	00000000 	.word	0x00000000
   2a028:	41545320 	.word	0x41545320
   2a02c:	4d495452 	.word	0x4d495452
   2a030:	45532045 	.word	0x45532045
   2a034:	4f542054 	.word	0x4f542054
   2a038:	25203a20 	.word	0x25203a20
   2a03c:	00000064 	.word	0x00000064
   2a040:	4f545541 	.word	0x4f545541
   2a044:	454d4954 	.word	0x454d4954
   2a048:	00000000 	.word	0x00000000
   2a04c:	54554120 	.word	0x54554120
   2a050:	4d49544f 	.word	0x4d49544f
   2a054:	45532045 	.word	0x45532045
   2a058:	4f542054 	.word	0x4f542054
   2a05c:	25203a20 	.word	0x25203a20
   2a060:	00000064 	.word	0x00000064
   2a064:	004c4142 	.word	0x004c4142
   2a068:	002b504d 	.word	0x002b504d
   2a06c:	4f4e2050 	.word	0x4f4e2050
   2a070:	44444120 	.word	0x44444120
   2a074:	00444544 	.word	0x00444544
   2a078:	002b534d 	.word	0x002b534d
   2a07c:	4f4e2053 	.word	0x4f4e2053
   2a080:	44444120 	.word	0x44444120
   2a084:	00444544 	.word	0x00444544
   2a088:	00002b4d 	.word	0x00002b4d
   2a08c:	49424f4d 	.word	0x49424f4d
   2a090:	4e20454c 	.word	0x4e20454c
   2a094:	00003a4f 	.word	0x00003a4f
   2a098:	0000000a 	.word	0x0000000a
   2a09c:	45444441 	.word	0x45444441
   2a0a0:	55532044 	.word	0x55532044
   2a0a4:	53454343 	.word	0x53454343
   2a0a8:	4c554653 	.word	0x4c554653
   2a0ac:	0000594c 	.word	0x0000594c
   2a0b0:	00002d4d 	.word	0x00002d4d
   2a0b4:	4f4d4552 	.word	0x4f4d4552
   2a0b8:	20444556 	.word	0x20444556
   2a0bc:	43435553 	.word	0x43435553
   2a0c0:	46535345 	.word	0x46535345
   2a0c4:	594c4c55 	.word	0x594c4c55
   2a0c8:	00000000 	.word	0x00000000
   2a0cc:	002b4d41 	.word	0x002b4d41
   2a0d0:	45544c41 	.word	0x45544c41
   2a0d4:	54414e52 	.word	0x54414e52
   2a0d8:	4f4d2045 	.word	0x4f4d2045
   2a0dc:	454c4942 	.word	0x454c4942
   2a0e0:	204f4e20 	.word	0x204f4e20
   2a0e4:	20444441 	.word	0x20444441
   2a0e8:	43435553 	.word	0x43435553
   2a0ec:	00535345 	.word	0x00535345
   2a0f0:	002b4d4d 	.word	0x002b4d4d
   2a0f4:	204d324d 	.word	0x204d324d
   2a0f8:	202e4f4e 	.word	0x202e4f4e
   2a0fc:	45444441 	.word	0x45444441
   2a100:	00000044 	.word	0x00000044
   2a104:	002b524d 	.word	0x002b524d
   2a108:	204d324d 	.word	0x204d324d
   2a10c:	4f4d4552 	.word	0x4f4d4552
   2a110:	4e204554 	.word	0x4e204554
   2a114:	41202e4f 	.word	0x41202e4f
   2a118:	44454444 	.word	0x44454444
   2a11c:	00000000 	.word	0x00000000
   2a120:	4f525245 	.word	0x4f525245
   2a124:	203a2052 	.word	0x203a2052
   2a128:	00007325 	.word	0x00007325
   2a12c:	00004e4f 	.word	0x00004e4f
   2a130:	48502032 	.word	0x48502032
   2a134:	00455341 	.word	0x00455341
   2a138:	00004b4f 	.word	0x00004b4f
   2a13c:	4f525245 	.word	0x4f525245
   2a140:	00000052 	.word	0x00000052
   2a144:	203a5952 	.word	0x203a5952
   2a148:	59206425 	.word	0x59206425
   2a14c:	25203a42 	.word	0x25203a42
   2a150:	52422064 	.word	0x52422064
   2a154:	6425203a 	.word	0x6425203a
   2a158:	3a43410a 	.word	0x3a43410a
   2a15c:	0a732520 	.word	0x0a732520
   2a160:	75716553 	.word	0x75716553
   2a164:	65636e65 	.word	0x65636e65
   2a168:	7325203a 	.word	0x7325203a
   2a16c:	746f4d0a 	.word	0x746f4d0a
   2a170:	203a726f 	.word	0x203a726f
   2a174:	430a7325 	.word	0x430a7325
   2a178:	65727275 	.word	0x65727275
   2a17c:	203a746e 	.word	0x203a746e
   2a180:	0a416425 	.word	0x0a416425
   2a184:	7774654e 	.word	0x7774654e
   2a188:	3a6b726f 	.word	0x3a6b726f
   2a18c:	00642520 	.word	0x00642520
   2a190:	304d4d56 	.word	0x304d4d56
   2a194:	00000031 	.word	0x00000031
   2a198:	4f544f4d 	.word	0x4f544f4d
   2a19c:	00002052 	.word	0x00002052
   2a1a0:	0046464f 	.word	0x0046464f
   2a1a4:	494d4441 	.word	0x494d4441
   2a1a8:	0000004e 	.word	0x0000004e
   2a1ac:	00000023 	.word	0x00000023
   2a1b0:	30524d56 	.word	0x30524d56
   2a1b4:	00000032 	.word	0x00000032
   2a1b8:	204d324d 	.word	0x204d324d
   2a1bc:	4e525554 	.word	0x4e525554
   2a1c0:	4f204445 	.word	0x4f204445
   2a1c4:	0000004e 	.word	0x0000004e
   2a1c8:	0000203a 	.word	0x0000203a
   2a1cc:	00016ef0 	.word	0x00016ef0
   2a1d0:	00016fd6 	.word	0x00016fd6
   2a1d4:	00016fd6 	.word	0x00016fd6
   2a1d8:	00016ef0 	.word	0x00016ef0
   2a1dc:	00016fd6 	.word	0x00016fd6
   2a1e0:	00016fd6 	.word	0x00016fd6
   2a1e4:	00016fd6 	.word	0x00016fd6
   2a1e8:	00016fd6 	.word	0x00016fd6
   2a1ec:	00016fd6 	.word	0x00016fd6
   2a1f0:	00016fd6 	.word	0x00016fd6
   2a1f4:	00016fd6 	.word	0x00016fd6
   2a1f8:	00016fd6 	.word	0x00016fd6
   2a1fc:	00016ef0 	.word	0x00016ef0
   2a200:	00016fd6 	.word	0x00016fd6
   2a204:	00016fd6 	.word	0x00016fd6
   2a208:	00016fd6 	.word	0x00016fd6
   2a20c:	00016eb2 	.word	0x00016eb2
   2a210:	00016fd6 	.word	0x00016fd6
   2a214:	00016ef0 	.word	0x00016ef0
   2a218:	49524b20 	.word	0x49524b20
   2a21c:	414e4853 	.word	0x414e4853
   2a220:	4d532020 	.word	0x4d532020
   2a224:	20545241 	.word	0x20545241
   2a228:	00000000 	.word	0x00000000
   2a22c:	54202020 	.word	0x54202020
   2a230:	4e484345 	.word	0x4e484345
   2a234:	474f4c4f 	.word	0x474f4c4f
   2a238:	20202059 	.word	0x20202059
   2a23c:	00000000 	.word	0x00000000
   2a240:	4f532020 	.word	0x4f532020
   2a244:	41575446 	.word	0x41575446
   2a248:	56204552 	.word	0x56204552
   2a24c:	20205245 	.word	0x20205245
   2a250:	00000000 	.word	0x00000000
   2a254:	31422020 	.word	0x31422020
   2a258:	30332d37 	.word	0x30332d37
   2a25c:	2d37302d 	.word	0x2d37302d
   2a260:	20203931 	.word	0x20203931
   2a264:	00000000 	.word	0x00000000
   2a268:	00007325 	.word	0x00007325
   2a26c:	74696e49 	.word	0x74696e49
   2a270:	696c6169 	.word	0x696c6169
   2a274:	676e697a 	.word	0x676e697a
   2a278:	202e2e2e 	.word	0x202e2e2e
   2a27c:	00000000 	.word	0x00000000
   2a280:	4d4d4f43 	.word	0x4d4d4f43
   2a284:	45444e41 	.word	0x45444e41
   2a288:	32762052 	.word	0x32762052
   2a28c:	20202020 	.word	0x20202020
   2a290:	00000000 	.word	0x00000000
   2a294:	20595256 	.word	0x20595256
   2a298:	59562020 	.word	0x59562020
   2a29c:	20202042 	.word	0x20202042
   2a2a0:	20524256 	.word	0x20524256
   2a2a4:	00000000 	.word	0x00000000
   2a2a8:	6c333025 	.word	0x6c333025
   2a2ac:	20202075 	.word	0x20202075
   2a2b0:	00000000 	.word	0x00000000
   2a2b4:	6c333025 	.word	0x6c333025
   2a2b8:	00002075 	.word	0x00002075
   2a2bc:	4f544f4d 	.word	0x4f544f4d
   2a2c0:	20203a52 	.word	0x20203a52
   2a2c4:	2046464f 	.word	0x2046464f
   2a2c8:	20202020 	.word	0x20202020
   2a2cc:	00000000 	.word	0x00000000
   2a2d0:	20202020 	.word	0x20202020
   2a2d4:	20202020 	.word	0x20202020
   2a2d8:	20202020 	.word	0x20202020
   2a2dc:	20202020 	.word	0x20202020
   2a2e0:	00000000 	.word	0x00000000
   2a2e4:	4f544f4d 	.word	0x4f544f4d
   2a2e8:	55432052 	.word	0x55432052
   2a2ec:	4e455252 	.word	0x4e455252
   2a2f0:	20203a54 	.word	0x20203a54
   2a2f4:	00000000 	.word	0x00000000
   2a2f8:	6c333025 	.word	0x6c333025
   2a2fc:	30252e75 	.word	0x30252e75
   2a300:	20756c32 	.word	0x20756c32
   2a304:	20202020 	.word	0x20202020
   2a308:	20202020 	.word	0x20202020
   2a30c:	00202020 	.word	0x00202020
   2a310:	4f544f4d 	.word	0x4f544f4d
   2a314:	41572052 	.word	0x41572052
   2a318:	47415454 	.word	0x47415454
   2a31c:	20203a45 	.word	0x20203a45
   2a320:	00000000 	.word	0x00000000
   2a324:	6c333025 	.word	0x6c333025
   2a328:	30252e75 	.word	0x30252e75
   2a32c:	20756c32 	.word	0x20756c32
   2a330:	2020576b 	.word	0x2020576b
   2a334:	20202020 	.word	0x20202020
   2a338:	00202020 	.word	0x00202020
   2a33c:	48502033 	.word	0x48502033
   2a340:	20455341 	.word	0x20455341
   2a344:	3a514553 	.word	0x3a514553
   2a348:	00000000 	.word	0x00000000
   2a34c:	204b4f20 	.word	0x204b4f20
   2a350:	00000000 	.word	0x00000000
   2a354:	52524520 	.word	0x52524520
   2a358:	00000000 	.word	0x00000000
   2a35c:	53414850 	.word	0x53414850
   2a360:	54532045 	.word	0x54532045
   2a364:	3a455441 	.word	0x3a455441
   2a368:	00000000 	.word	0x00000000
   2a36c:	48503320 	.word	0x48503320
   2a370:	00000020 	.word	0x00000020
   2a374:	48503220 	.word	0x48503220
   2a378:	00000020 	.word	0x00000020
   2a37c:	46464f20 	.word	0x46464f20
   2a380:	00000000 	.word	0x00000000
   2a384:	454c2d4f 	.word	0x454c2d4f
   2a388:	204c4556 	.word	0x204c4556
   2a38c:	0000203a 	.word	0x0000203a
   2a390:	48474948 	.word	0x48474948
   2a394:	00002020 	.word	0x00002020
   2a398:	2044494d 	.word	0x2044494d
   2a39c:	00002020 	.word	0x00002020
   2a3a0:	20574f4c 	.word	0x20574f4c
   2a3a4:	00002020 	.word	0x00002020
   2a3a8:	454c2d55 	.word	0x454c2d55
   2a3ac:	204c4556 	.word	0x204c4556
   2a3b0:	0000203a 	.word	0x0000203a
   2a3b4:	43545243 	.word	0x43545243
   2a3b8:	0000204c 	.word	0x0000204c
   2a3bc:	74746142 	.word	0x74746142
   2a3c0:	50797265 	.word	0x50797265
   2a3c4:	203a7265 	.word	0x203a7265
   2a3c8:	25257525 	.word	0x25257525
   2a3cc:	00000020 	.word	0x00000020
   2a3d0:	4e474953 	.word	0x4e474953
   2a3d4:	3a204c41 	.word	0x3a204c41
   2a3d8:	00000020 	.word	0x00000020
   2a3dc:	20202020 	.word	0x20202020
   2a3e0:	00202020 	.word	0x00202020
   2a3e4:	4f434e49 	.word	0x4f434e49
   2a3e8:	474e494d 	.word	0x474e494d
   2a3ec:	4c414320 	.word	0x4c414320
   2a3f0:	202e2e4c 	.word	0x202e2e4c
   2a3f4:	00000000 	.word	0x00000000
   2a3f8:	36312d25 	.word	0x36312d25
   2a3fc:	00000073 	.word	0x00000073
   2a400:	43204e49 	.word	0x43204e49
   2a404:	2e4c4c41 	.word	0x2e4c4c41
   2a408:	20202e2e 	.word	0x20202e2e
   2a40c:	20202020 	.word	0x20202020
   2a410:	00000000 	.word	0x00000000
   2a414:	4c414944 	.word	0x4c414944
   2a418:	2e474e49 	.word	0x2e474e49
   2a41c:	20202e2e 	.word	0x20202e2e
   2a420:	20202020 	.word	0x20202020
   2a424:	00000000 	.word	0x00000000
   2a428:	4f434e49 	.word	0x4f434e49
   2a42c:	474e494d 	.word	0x474e494d
   2a430:	534d5320 	.word	0x534d5320
   2a434:	202e2e2e 	.word	0x202e2e2e
   2a438:	00000000 	.word	0x00000000
   2a43c:	4754554f 	.word	0x4754554f
   2a440:	474e494f 	.word	0x474e494f
   2a444:	534d5320 	.word	0x534d5320
   2a448:	202e2e2e 	.word	0x202e2e2e
	...
   2a454:	1f1f0000 	.word	0x1f1f0000
   2a458:	00000000 	.word	0x00000000
   2a45c:	1f1f1f00 	.word	0x1f1f1f00
   2a460:	00000000 	.word	0x00000000
   2a464:	1f1f1f1f 	.word	0x1f1f1f1f
   2a468:	1f1f0000 	.word	0x1f1f0000
   2a46c:	1f1f1f1f 	.word	0x1f1f1f1f
   2a470:	1f1f1f1f 	.word	0x1f1f1f1f
   2a474:	1f1f1f1f 	.word	0x1f1f1f1f
   2a478:	0001835a 	.word	0x0001835a
   2a47c:	00017f16 	.word	0x00017f16
   2a480:	00017f5a 	.word	0x00017f5a
   2a484:	00017fc0 	.word	0x00017fc0
   2a488:	00018022 	.word	0x00018022
   2a48c:	00018090 	.word	0x00018090
   2a490:	0001820c 	.word	0x0001820c
   2a494:	0001828e 	.word	0x0001828e
   2a498:	00018358 	.word	0x00018358
   2a49c:	000182a8 	.word	0x000182a8
   2a4a0:	000182c6 	.word	0x000182c6
   2a4a4:	000182e4 	.word	0x000182e4
   2a4a8:	00018302 	.word	0x00018302
   2a4ac:	0001832a 	.word	0x0001832a
   2a4b0:	756c255d 	.word	0x756c255d
   2a4b4:	756c257b 	.word	0x756c257b
   2a4b8:	756c257d 	.word	0x756c257d
   2a4bc:	00000000 	.word	0x00000000
   2a4c0:	00000002 	.word	0x00000002
   2a4c4:	00000003 	.word	0x00000003
   2a4c8:	00000028 	.word	0x00000028
   2a4cc:	00000029 	.word	0x00000029
   2a4d0:	00000004 	.word	0x00000004
   2a4d4:	00000005 	.word	0x00000005
   2a4d8:	00000006 	.word	0x00000006
   2a4dc:	00000007 	.word	0x00000007
   2a4e0:	00000020 	.word	0x00000020
   2a4e4:	00000021 	.word	0x00000021
   2a4e8:	00000022 	.word	0x00000022
   2a4ec:	00000023 	.word	0x00000023
   2a4f0:	00000024 	.word	0x00000024
   2a4f4:	00000025 	.word	0x00000025
   2a4f8:	00000026 	.word	0x00000026
   2a4fc:	00000027 	.word	0x00000027
   2a500:	00000008 	.word	0x00000008
   2a504:	00000009 	.word	0x00000009
   2a508:	0000000a 	.word	0x0000000a
   2a50c:	0000000b 	.word	0x0000000b
   2a510:	0001ce7a 	.word	0x0001ce7a
   2a514:	0001ce80 	.word	0x0001ce80
   2a518:	0001ce80 	.word	0x0001ce80
   2a51c:	0001ce80 	.word	0x0001ce80
   2a520:	0001ce80 	.word	0x0001ce80
   2a524:	0001ce80 	.word	0x0001ce80
   2a528:	0001ce80 	.word	0x0001ce80
   2a52c:	0001ce80 	.word	0x0001ce80
   2a530:	0001ce80 	.word	0x0001ce80
   2a534:	0001ce80 	.word	0x0001ce80
   2a538:	0001ce80 	.word	0x0001ce80
   2a53c:	0001ce80 	.word	0x0001ce80
   2a540:	0001ce80 	.word	0x0001ce80
   2a544:	0001ce80 	.word	0x0001ce80
   2a548:	0001ce80 	.word	0x0001ce80
   2a54c:	0001ce80 	.word	0x0001ce80
   2a550:	0001ce58 	.word	0x0001ce58
   2a554:	0001ce80 	.word	0x0001ce80
   2a558:	0001ce80 	.word	0x0001ce80
   2a55c:	0001ce80 	.word	0x0001ce80
   2a560:	0001ce80 	.word	0x0001ce80
   2a564:	0001ce80 	.word	0x0001ce80
   2a568:	0001ce80 	.word	0x0001ce80
   2a56c:	0001ce80 	.word	0x0001ce80
   2a570:	0001ce80 	.word	0x0001ce80
   2a574:	0001ce80 	.word	0x0001ce80
   2a578:	0001ce80 	.word	0x0001ce80
   2a57c:	0001ce80 	.word	0x0001ce80
   2a580:	0001ce80 	.word	0x0001ce80
   2a584:	0001ce80 	.word	0x0001ce80
   2a588:	0001ce80 	.word	0x0001ce80
   2a58c:	0001ce80 	.word	0x0001ce80
   2a590:	0001ce74 	.word	0x0001ce74
   2a594:	0001ce80 	.word	0x0001ce80
   2a598:	0001ce80 	.word	0x0001ce80
   2a59c:	0001ce80 	.word	0x0001ce80
   2a5a0:	0001ce80 	.word	0x0001ce80
   2a5a4:	0001ce80 	.word	0x0001ce80
   2a5a8:	0001ce80 	.word	0x0001ce80
   2a5ac:	0001ce80 	.word	0x0001ce80
   2a5b0:	0001ce80 	.word	0x0001ce80
   2a5b4:	0001ce80 	.word	0x0001ce80
   2a5b8:	0001ce80 	.word	0x0001ce80
   2a5bc:	0001ce80 	.word	0x0001ce80
   2a5c0:	0001ce80 	.word	0x0001ce80
   2a5c4:	0001ce80 	.word	0x0001ce80
   2a5c8:	0001ce80 	.word	0x0001ce80
   2a5cc:	0001ce80 	.word	0x0001ce80
   2a5d0:	0001ce6e 	.word	0x0001ce6e
   2a5d4:	0001ce16 	.word	0x0001ce16
   2a5d8:	0001ce2c 	.word	0x0001ce2c
   2a5dc:	0001ce42 	.word	0x0001ce42
   2a5e0:	0001cdfc 	.word	0x0001cdfc
   2a5e4:	42000800 	.word	0x42000800
   2a5e8:	42000c00 	.word	0x42000c00
   2a5ec:	42001000 	.word	0x42001000
   2a5f0:	42001400 	.word	0x42001400
   2a5f4:	42001800 	.word	0x42001800
   2a5f8:	42001c00 	.word	0x42001c00
   2a5fc:	454c4449 	.word	0x454c4449
   2a600:	00000000 	.word	0x00000000
   2a604:	20726d54 	.word	0x20726d54
   2a608:	00637653 	.word	0x00637653
   2a60c:	00020e20 	.word	0x00020e20
   2a610:	00020e20 	.word	0x00020e20
   2a614:	00020e20 	.word	0x00020e20
   2a618:	00020eae 	.word	0x00020eae
   2a61c:	00020e78 	.word	0x00020e78
   2a620:	00020ea2 	.word	0x00020ea2
   2a624:	00020e20 	.word	0x00020e20
   2a628:	00020e20 	.word	0x00020e20
   2a62c:	00020eae 	.word	0x00020eae
   2a630:	00020e78 	.word	0x00020e78

0002a634 <_tcc_intflag>:
   2a634:	00000001 00000002 00000004 00000008     ................
   2a644:	00001000 00002000 00004000 00008000     ..... ...@......
   2a654:	00010000 00020000 00040000 00080000     ................
   2a664:	0c0b0a09 00000e0d 0002272c 0002272c     ........,'..,'..
   2a674:	00022720 0002272c 00022720 000226fa      '..,'.. '...&..
   2a684:	000226fa 0002272c 0002272c 0002272c     .&..,'..,'..,'..
   2a694:	0002272c 0002272c 0002272c 0002272c     ,'..,'..,'..,'..
   2a6a4:	0002272c 0002272c 0002272c 0002272c     ,'..,'..,'..,'..
   2a6b4:	0002272c 0002272c 0002272c 0002272c     ,'..,'..,'..,'..
   2a6c4:	0002272c 0002272c 0002272c 0002272c     ,'..,'..,'..,'..
   2a6d4:	0002272c 0002272c 0002272c 0002272c     ,'..,'..,'..,'..
   2a6e4:	0002272c 0002272c 0002272c 0002272c     ,'..,'..,'..,'..
   2a6f4:	0002272c 0002272c 0002272c 0002272c     ,'..,'..,'..,'..
   2a704:	0002272c 0002272c 0002272c 0002272c     ,'..,'..,'..,'..
   2a714:	0002272c 0002272c 0002272c 0002272c     ,'..,'..,'..,'..
   2a724:	0002272c 0002272c 0002272c 0002272c     ,'..,'..,'..,'..
   2a734:	0002272c 0002272c 0002272c 0002272c     ,'..,'..,'..,'..
   2a744:	0002272c 0002272c 0002272c 0002272c     ,'..,'..,'..,'..
   2a754:	0002272c 0002272c 0002272c 0002272c     ,'..,'..,'..,'..
   2a764:	0002272c 0002272c 00022720 00022720     ,'..,'.. '.. '..
   2a774:	00022736 00022736 00022736 00022736     6'..6'..6'..6'..
   2a784:	41744545 50524f4d 456d752e 00023aa6     EEtAMORP.umE.:..
   2a794:	00023b20 00023b20 00023ac4 00023abe      ;.. ;...:...:..
   2a7a4:	00023aca 00023aac 00023ad0 00023b06     .:...:...:...;..
   2a7b4:	00023dec 00023e3c 00023e3c 00023e38     .=..<>..<>..8>..
   2a7c4:	00023dde 00023dfe 00023dce 00023e10     .=...=...=...>..
   2a7d4:	00023e22 00023e8a 00023eb8 00023eb8     ">...>...>...>..
   2a7e4:	00023eb4 00023e84 00023e90 00023e7e     .>...>...>..~>..
   2a7f4:	00023e96 00023e9c 00776f70 74727173     .>...>..pow.sqrt
   2a804:	00000000                                ....

0002a808 <TWO52>:
   2a808:	00000000 43300000 00000000 c3300000     ......0C......0.
   2a818:	00026828 000267f8 0002680a 0002674c     (h...g...h..Lg..
   2a828:	0002680a 000267ee 0002680a 0002674c     .h...g...h..Lg..
   2a838:	000267f8 000267f8 000267ee 0002674c     .g...g...g..Lg..
   2a848:	00026754 00026754 00026754 00026810     Tg..Tg..Tg...h..
   2a858:	000267f8 000267f8 000267cc 000268b0     .g...g...g...h..
   2a868:	000267cc 000267ee 000267cc 000268b0     .g...g...g...h..
   2a878:	000267f8 000267f8 000267ee 000268b0     .g...g...g...h..
   2a888:	00026754 00026754 00026754 000268ba     Tg..Tg..Tg...h..
   2a898:	00026a58 000269a8 000269a8 000269a6     Xj...i...i...i..
   2a8a8:	00026a4a 00026a4a 00026a40 000269a6     Jj..Jj..@j...i..
   2a8b8:	00026a4a 00026a40 00026a4a 000269a6     Jj..@j..Jj...i..
   2a8c8:	00026a50 00026a50 00026a50 00026ae0     Pj..Pj..Pj...j..
   2a8d8:	000274b0 00027492 0002744c 0002736a     .t...t..Lt..js..
   2a8e8:	0002744c 00027484 0002744c 0002736a     Lt...t..Lt..js..
   2a8f8:	00027492 00027492 00027484 0002736a     .t...t...t..js..
   2a908:	00027362 00027362 00027362 000276c8     bs..bs..bs...v..
   2a918:	00027d10 00027bd0 00027bd0 00027bcc     .}...{...{...{..
   2a928:	00027ce8 00027ce8 00027cda 00027bcc     .|...|...|...{..
   2a938:	00027ce8 00027cda 00027ce8 00027bcc     .|...|...|...{..
   2a948:	00027cf0 00027cf0 00027cf0 00027ef4     .|...|...|...~..
   2a958:	4f500043 00584953 3130002e 35343332     C.POSIX...012345
   2a968:	39383736 64636261 68676665 6c6b6a69     6789abcdefghijkl
   2a978:	706f6e6d 74737271 78777675 00007a79              mnopqrstuvwxyz.

0002a987 <_ctype_>:
   2a987:	20202000 20202020 28282020 20282828     .         ((((( 
   2a997:	20202020 20202020 20202020 20202020                     
   2a9a7:	10108820 10101010 10101010 10101010      ...............
   2a9b7:	04040410 04040404 10040404 10101010     ................
   2a9c7:	41411010 41414141 01010101 01010101     ..AAAAAA........
   2a9d7:	01010101 01010101 01010101 10101010     ................
   2a9e7:	42421010 42424242 02020202 02020202     ..BBBBBB........
   2a9f7:	02020202 02020202 02020202 10101010     ................
   2aa07:	00000020 00000000 00000000 00000000      ...............
	...
   2aa87:	302d2300 6800202b 65004c6c 46456766     .#-0+ .hlL.efgEF
   2aa97:	31300047 35343332 39383736 44434241     G.0123456789ABCD
   2aaa7:	30004645 34333231 38373635 63626139     EF.0123456789abc
   2aab7:	00666564 c0b5f800                                def..

0002aabc <_init>:
   2aabc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2aabe:	46c0      	nop			; (mov r8, r8)
   2aac0:	bcf8      	pop	{r3, r4, r5, r6, r7}
   2aac2:	bc08      	pop	{r3}
   2aac4:	469e      	mov	lr, r3
   2aac6:	4770      	bx	lr

0002aac8 <__init_array_start>:
   2aac8:	000100dd 	.word	0x000100dd

0002aacc <_fini>:
   2aacc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2aace:	46c0      	nop			; (mov r8, r8)
   2aad0:	bcf8      	pop	{r3, r4, r5, r6, r7}
   2aad2:	bc08      	pop	{r3}
   2aad4:	469e      	mov	lr, r3
   2aad6:	4770      	bx	lr

0002aad8 <__fini_array_start>:
   2aad8:	000100b5 	.word	0x000100b5

Disassembly of section .relocate:

20000000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000000:	f3bf 8f5f 	dmb	sy
20000004:	3801      	subs	r0, #1
20000006:	2800      	cmp	r0, #0
20000008:	d1fa      	bne.n	20000000 <portable_delay_cycles>
		"SUB r0, r0, #1 \n"
#endif
		"CMP r0, #0  \n"
		"BNE loop         "
	);
}
2000000a:	4770      	bx	lr

2000000c <ucharPhase_Seq_Check_Flag>:
2000000c:	0101                                             .

2000000d <ucharVoltage_Detect_Timer_Counter>:
2000000d:	0001 aa00                                        ...

20000010 <uxCriticalNesting>:
20000010:	aaaa aaaa                                   ....

20000014 <_events_inst>:
20000014:	0000 0000 000c 0000 0000 0000 0000 0000     ................
20000024:	0000 0000                                   ....

20000028 <g_interrupt_enabled>:
20000028:	0101                                             .

20000029 <__fdlib_version>:
20000029:	0001 3000                                        ...

2000002c <_impure_ptr>:
2000002c:	0030 2000                                   0.. 

20000030 <impure_data>:
	...

20000090 <__global_locale>:
20000090:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
200000b0:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
200000d0:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
200000f0:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000110:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000130:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000150:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000170:	8f91 0002 89a1 0002 0000 0000 a987 0002     ................
20000180:	a960 0002 aa8d 0002 aa8d 0002 aa8d 0002     `...............
20000190:	aa8d 0002 aa8d 0002 aa8d 0002 aa8d 0002     ................
200001a0:	aa8d 0002 aa8d 0002 ffff ffff ffff ffff     ................
200001b0:	ffff ffff ffff 0000 0001 5341 4943 0049     ..........ASCII.
	...
200001d8:	0000 5341 4943 0049 0000 0000 0000 0000     ..ASCII.........
	...
