
COMMANDER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0001ac04  00010000  00010000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0002ac04  0002ac04  0002ac04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000001fc  20000000  0002ac0c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          0000078c  20000200  0002ae10  00030200  2**4
                  ALLOC
  4 .stack        00002004  2000098c  0002b59c  00030200  2**0
                  ALLOC
  5 .ARM.attributes 00000028  00000000  00000000  000301fc  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00030224  2**0
                  CONTENTS, READONLY
  7 .debug_info   0007fd72  00000000  00000000  0003027d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00008ae9  00000000  00000000  000affef  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000abb1  00000000  00000000  000b8ad8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00001db0  00000000  00000000  000c3689  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00001bb8  00000000  00000000  000c5439  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  000287d2  00000000  00000000  000c6ff1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00027b41  00000000  00000000  000ef7c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000a28c7  00000000  00000000  00117304  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  0000748c  00000000  00000000  001b9bcc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00010000 <exception_table>:
   10000:	90 29 00 20 99 49 02 00 91 4a 02 00 91 4a 02 00     .). .I...J...J..
	...
   1002c:	9d ea 01 00 00 00 00 00 00 00 00 00 d1 eb 01 00     ................
   1003c:	19 ec 01 00 91 4a 02 00 91 4a 02 00 11 13 02 00     .....J...J......
   1004c:	19 e4 01 00 39 23 02 00 91 4a 02 00 31 de 01 00     ....9#...J..1...
   1005c:	91 4a 02 00 a5 23 02 00 31 21 02 00 49 21 02 00     .J...#..1!..I!..
   1006c:	61 21 02 00 79 21 02 00 91 21 02 00 a9 21 02 00     a!..y!...!...!..
   1007c:	35 13 02 00 49 13 02 00 5d 13 02 00 ed 13 02 00     5...I...].......
   1008c:	01 14 02 00 15 14 02 00 29 14 02 00 3d 14 02 00     ........)...=...
   1009c:	11 dc 01 00 dd 24 02 00 f5 dd 01 00 91 4a 02 00     .....$.......J..
   100ac:	91 4a 02 00 00 00 00 00                             .J......

000100b4 <__do_global_dtors_aux>:
   100b4:	b510      	push	{r4, lr}
   100b6:	4c06      	ldr	r4, [pc, #24]	; (100d0 <__do_global_dtors_aux+0x1c>)
   100b8:	7823      	ldrb	r3, [r4, #0]
   100ba:	2b00      	cmp	r3, #0
   100bc:	d107      	bne.n	100ce <__do_global_dtors_aux+0x1a>
   100be:	4b05      	ldr	r3, [pc, #20]	; (100d4 <__do_global_dtors_aux+0x20>)
   100c0:	2b00      	cmp	r3, #0
   100c2:	d002      	beq.n	100ca <__do_global_dtors_aux+0x16>
   100c4:	4804      	ldr	r0, [pc, #16]	; (100d8 <__do_global_dtors_aux+0x24>)
   100c6:	e000      	b.n	100ca <__do_global_dtors_aux+0x16>
   100c8:	bf00      	nop
   100ca:	2301      	movs	r3, #1
   100cc:	7023      	strb	r3, [r4, #0]
   100ce:	bd10      	pop	{r4, pc}
   100d0:	20000200 	.word	0x20000200
   100d4:	00000000 	.word	0x00000000
   100d8:	0002ac0c 	.word	0x0002ac0c

000100dc <frame_dummy>:
   100dc:	4b08      	ldr	r3, [pc, #32]	; (10100 <frame_dummy+0x24>)
   100de:	b510      	push	{r4, lr}
   100e0:	2b00      	cmp	r3, #0
   100e2:	d003      	beq.n	100ec <frame_dummy+0x10>
   100e4:	4907      	ldr	r1, [pc, #28]	; (10104 <frame_dummy+0x28>)
   100e6:	4808      	ldr	r0, [pc, #32]	; (10108 <frame_dummy+0x2c>)
   100e8:	e000      	b.n	100ec <frame_dummy+0x10>
   100ea:	bf00      	nop
   100ec:	4807      	ldr	r0, [pc, #28]	; (1010c <frame_dummy+0x30>)
   100ee:	6803      	ldr	r3, [r0, #0]
   100f0:	2b00      	cmp	r3, #0
   100f2:	d100      	bne.n	100f6 <frame_dummy+0x1a>
   100f4:	bd10      	pop	{r4, pc}
   100f6:	4b06      	ldr	r3, [pc, #24]	; (10110 <frame_dummy+0x34>)
   100f8:	2b00      	cmp	r3, #0
   100fa:	d0fb      	beq.n	100f4 <frame_dummy+0x18>
   100fc:	4798      	blx	r3
   100fe:	e7f9      	b.n	100f4 <frame_dummy+0x18>
   10100:	00000000 	.word	0x00000000
   10104:	20000204 	.word	0x20000204
   10108:	0002ac0c 	.word	0x0002ac0c
   1010c:	0002ac0c 	.word	0x0002ac0c
   10110:	00000000 	.word	0x00000000

00010114 <configure_eeprom>:
#include "eeprom_driver.h"

void configure_eeprom(void)
{
   10114:	b590      	push	{r4, r7, lr}
   10116:	b083      	sub	sp, #12
   10118:	af00      	add	r7, sp, #0
	enum status_code error_code = eeprom_emulator_init();
   1011a:	1dfc      	adds	r4, r7, #7
   1011c:	4b0a      	ldr	r3, [pc, #40]	; (10148 <configure_eeprom+0x34>)
   1011e:	4798      	blx	r3
   10120:	0003      	movs	r3, r0
   10122:	7023      	strb	r3, [r4, #0]
	if (error_code == STATUS_ERR_NO_MEMORY)
   10124:	1dfb      	adds	r3, r7, #7
   10126:	781b      	ldrb	r3, [r3, #0]
   10128:	2b16      	cmp	r3, #22
   1012a:	d100      	bne.n	1012e <configure_eeprom+0x1a>
	{
		while (true);
   1012c:	e7fe      	b.n	1012c <configure_eeprom+0x18>
	}
	else if (error_code != STATUS_OK)
   1012e:	1dfb      	adds	r3, r7, #7
   10130:	781b      	ldrb	r3, [r3, #0]
   10132:	2b00      	cmp	r3, #0
   10134:	d003      	beq.n	1013e <configure_eeprom+0x2a>
	{
		eeprom_emulator_erase_memory();
   10136:	4b05      	ldr	r3, [pc, #20]	; (1014c <configure_eeprom+0x38>)
   10138:	4798      	blx	r3
		eeprom_emulator_init();
   1013a:	4b03      	ldr	r3, [pc, #12]	; (10148 <configure_eeprom+0x34>)
   1013c:	4798      	blx	r3
	}
}
   1013e:	46c0      	nop			; (mov r8, r8)
   10140:	46bd      	mov	sp, r7
   10142:	b003      	add	sp, #12
   10144:	bd90      	pop	{r4, r7, pc}
   10146:	46c0      	nop			; (mov r8, r8)
   10148:	00023555 	.word	0x00023555
   1014c:	0002363d 	.word	0x0002363d

00010150 <init_eeprom>:

void init_eeprom(void)
{
   10150:	b580      	push	{r7, lr}
   10152:	af00      	add	r7, sp, #0
	configure_eeprom();
   10154:	4bf7      	ldr	r3, [pc, #988]	; (10534 <init_eeprom+0x3e4>)
   10156:	4798      	blx	r3
	
	//////////////////////////////////////////////////////////////////////////
	eeprom_emulator_read_page(BOOTLOADER_PARAMETER_PAGE, page_data);
   10158:	4bf7      	ldr	r3, [pc, #988]	; (10538 <init_eeprom+0x3e8>)
   1015a:	0019      	movs	r1, r3
   1015c:	2000      	movs	r0, #0
   1015e:	4bf7      	ldr	r3, [pc, #988]	; (1053c <init_eeprom+0x3ec>)
   10160:	4798      	blx	r3
	memcpy(&bootloader_parameter,page_data,sizeof(bootloader_parameter));
   10162:	49f5      	ldr	r1, [pc, #980]	; (10538 <init_eeprom+0x3e8>)
   10164:	4bf6      	ldr	r3, [pc, #984]	; (10540 <init_eeprom+0x3f0>)
   10166:	221c      	movs	r2, #28
   10168:	0018      	movs	r0, r3
   1016a:	4bf6      	ldr	r3, [pc, #984]	; (10544 <init_eeprom+0x3f4>)
   1016c:	4798      	blx	r3
	if (bootloader_parameter.ucharFirst_Time_Write != 85)
   1016e:	4bf4      	ldr	r3, [pc, #976]	; (10540 <init_eeprom+0x3f0>)
   10170:	791b      	ldrb	r3, [r3, #4]
   10172:	2b55      	cmp	r3, #85	; 0x55
   10174:	d02c      	beq.n	101d0 <init_eeprom+0x80>
	{
		bootloader_parameter.ulongintDiscard		   = 0;
   10176:	4bf2      	ldr	r3, [pc, #968]	; (10540 <init_eeprom+0x3f0>)
   10178:	2200      	movs	r2, #0
   1017a:	601a      	str	r2, [r3, #0]
		bootloader_parameter.ucharFirst_Time_Write	   = 85;
   1017c:	4bf0      	ldr	r3, [pc, #960]	; (10540 <init_eeprom+0x3f0>)
   1017e:	2255      	movs	r2, #85	; 0x55
   10180:	711a      	strb	r2, [r3, #4]
		bootloader_parameter.firmware_download_pending = false;
   10182:	4bef      	ldr	r3, [pc, #956]	; (10540 <init_eeprom+0x3f0>)
   10184:	2200      	movs	r2, #0
   10186:	715a      	strb	r2, [r3, #5]
		bootloader_parameter.firmware_update_process_completed = false;
   10188:	4bed      	ldr	r3, [pc, #948]	; (10540 <init_eeprom+0x3f0>)
   1018a:	2200      	movs	r2, #0
   1018c:	719a      	strb	r2, [r3, #6]
		bootloader_parameter.firmware_update_error_code = 0;
   1018e:	4bec      	ldr	r3, [pc, #944]	; (10540 <init_eeprom+0x3f0>)
   10190:	2200      	movs	r2, #0
   10192:	71da      	strb	r2, [r3, #7]
		bootloader_parameter.retries= 0;
   10194:	4bea      	ldr	r3, [pc, #936]	; (10540 <init_eeprom+0x3f0>)
   10196:	2200      	movs	r2, #0
   10198:	721a      	strb	r2, [r3, #8]
		
		
		memset(bootloader_parameter.firmware_updater_mobile_no, '\0', sizeof(bootloader_parameter.firmware_updater_mobile_no));
   1019a:	4beb      	ldr	r3, [pc, #940]	; (10548 <init_eeprom+0x3f8>)
   1019c:	2210      	movs	r2, #16
   1019e:	2100      	movs	r1, #0
   101a0:	0018      	movs	r0, r3
   101a2:	4bea      	ldr	r3, [pc, #936]	; (1054c <init_eeprom+0x3fc>)
   101a4:	4798      	blx	r3
		strcpy(bootloader_parameter.firmware_updater_mobile_no,"0000000000");
   101a6:	4be8      	ldr	r3, [pc, #928]	; (10548 <init_eeprom+0x3f8>)
   101a8:	4ae9      	ldr	r2, [pc, #932]	; (10550 <init_eeprom+0x400>)
   101aa:	ca03      	ldmia	r2!, {r0, r1}
   101ac:	c303      	stmia	r3!, {r0, r1}
   101ae:	8811      	ldrh	r1, [r2, #0]
   101b0:	8019      	strh	r1, [r3, #0]
   101b2:	7892      	ldrb	r2, [r2, #2]
   101b4:	709a      	strb	r2, [r3, #2]
		
		memcpy(page_data,&bootloader_parameter,sizeof(bootloader_parameter));
   101b6:	49e2      	ldr	r1, [pc, #904]	; (10540 <init_eeprom+0x3f0>)
   101b8:	4bdf      	ldr	r3, [pc, #892]	; (10538 <init_eeprom+0x3e8>)
   101ba:	221c      	movs	r2, #28
   101bc:	0018      	movs	r0, r3
   101be:	4be1      	ldr	r3, [pc, #900]	; (10544 <init_eeprom+0x3f4>)
   101c0:	4798      	blx	r3
		eeprom_emulator_write_page(BOOTLOADER_PARAMETER_PAGE, page_data);
   101c2:	4bdd      	ldr	r3, [pc, #884]	; (10538 <init_eeprom+0x3e8>)
   101c4:	0019      	movs	r1, r3
   101c6:	2000      	movs	r0, #0
   101c8:	4be2      	ldr	r3, [pc, #904]	; (10554 <init_eeprom+0x404>)
   101ca:	4798      	blx	r3
		eeprom_emulator_commit_page_buffer();
   101cc:	4be2      	ldr	r3, [pc, #904]	; (10558 <init_eeprom+0x408>)
   101ce:	4798      	blx	r3
	}
	
	eeprom_emulator_read_page(FTP_PATH_PARAMETER_PAGE, page_data);
   101d0:	4bd9      	ldr	r3, [pc, #868]	; (10538 <init_eeprom+0x3e8>)
   101d2:	0019      	movs	r1, r3
   101d4:	2001      	movs	r0, #1
   101d6:	4bd9      	ldr	r3, [pc, #868]	; (1053c <init_eeprom+0x3ec>)
   101d8:	4798      	blx	r3
	memcpy(&ftp_path_parameter,page_data,sizeof(ftp_path_parameter));
   101da:	49d7      	ldr	r1, [pc, #860]	; (10538 <init_eeprom+0x3e8>)
   101dc:	4bdf      	ldr	r3, [pc, #892]	; (1055c <init_eeprom+0x40c>)
   101de:	2238      	movs	r2, #56	; 0x38
   101e0:	0018      	movs	r0, r3
   101e2:	4bd8      	ldr	r3, [pc, #864]	; (10544 <init_eeprom+0x3f4>)
   101e4:	4798      	blx	r3
	if (ftp_path_parameter.ucharFirst_Time_Write !=85)
   101e6:	4bdd      	ldr	r3, [pc, #884]	; (1055c <init_eeprom+0x40c>)
   101e8:	791b      	ldrb	r3, [r3, #4]
   101ea:	2b55      	cmp	r3, #85	; 0x55
   101ec:	d02e      	beq.n	1024c <init_eeprom+0xfc>
	{
		ftp_path_parameter.ulongintDiscard			   = 0;
   101ee:	4bdb      	ldr	r3, [pc, #876]	; (1055c <init_eeprom+0x40c>)
   101f0:	2200      	movs	r2, #0
   101f2:	601a      	str	r2, [r3, #0]
		ftp_path_parameter.ucharFirst_Time_Write	   = 85;
   101f4:	4bd9      	ldr	r3, [pc, #868]	; (1055c <init_eeprom+0x40c>)
   101f6:	2255      	movs	r2, #85	; 0x55
   101f8:	711a      	strb	r2, [r3, #4]
		
		memset(ftp_path_parameter.ftp_address, '\0', sizeof(ftp_path_parameter.ftp_address));
   101fa:	4bd9      	ldr	r3, [pc, #868]	; (10560 <init_eeprom+0x410>)
   101fc:	221e      	movs	r2, #30
   101fe:	2100      	movs	r1, #0
   10200:	0018      	movs	r0, r3
   10202:	4bd2      	ldr	r3, [pc, #840]	; (1054c <init_eeprom+0x3fc>)
   10204:	4798      	blx	r3
		strcpy(ftp_path_parameter.ftp_address,"ftp.drivehq.com");
   10206:	4ad6      	ldr	r2, [pc, #856]	; (10560 <init_eeprom+0x410>)
   10208:	4bd6      	ldr	r3, [pc, #856]	; (10564 <init_eeprom+0x414>)
   1020a:	0010      	movs	r0, r2
   1020c:	0019      	movs	r1, r3
   1020e:	2310      	movs	r3, #16
   10210:	001a      	movs	r2, r3
   10212:	4bcc      	ldr	r3, [pc, #816]	; (10544 <init_eeprom+0x3f4>)
   10214:	4798      	blx	r3
		
		memset(ftp_path_parameter.ftp_path, '\0', sizeof(ftp_path_parameter.ftp_path));
   10216:	4bd4      	ldr	r3, [pc, #848]	; (10568 <init_eeprom+0x418>)
   10218:	2214      	movs	r2, #20
   1021a:	2100      	movs	r1, #0
   1021c:	0018      	movs	r0, r3
   1021e:	4bcb      	ldr	r3, [pc, #812]	; (1054c <init_eeprom+0x3fc>)
   10220:	4798      	blx	r3
		strcpy(ftp_path_parameter.ftp_path,"/firmware/");
   10222:	4ad1      	ldr	r2, [pc, #836]	; (10568 <init_eeprom+0x418>)
   10224:	4bd1      	ldr	r3, [pc, #836]	; (1056c <init_eeprom+0x41c>)
   10226:	0010      	movs	r0, r2
   10228:	0019      	movs	r1, r3
   1022a:	230b      	movs	r3, #11
   1022c:	001a      	movs	r2, r3
   1022e:	4bc5      	ldr	r3, [pc, #788]	; (10544 <init_eeprom+0x3f4>)
   10230:	4798      	blx	r3
		
		memcpy(page_data,&ftp_path_parameter,sizeof(ftp_path_parameter));
   10232:	49ca      	ldr	r1, [pc, #808]	; (1055c <init_eeprom+0x40c>)
   10234:	4bc0      	ldr	r3, [pc, #768]	; (10538 <init_eeprom+0x3e8>)
   10236:	2238      	movs	r2, #56	; 0x38
   10238:	0018      	movs	r0, r3
   1023a:	4bc2      	ldr	r3, [pc, #776]	; (10544 <init_eeprom+0x3f4>)
   1023c:	4798      	blx	r3
		eeprom_emulator_write_page(FTP_PATH_PARAMETER_PAGE, page_data);
   1023e:	4bbe      	ldr	r3, [pc, #760]	; (10538 <init_eeprom+0x3e8>)
   10240:	0019      	movs	r1, r3
   10242:	2001      	movs	r0, #1
   10244:	4bc3      	ldr	r3, [pc, #780]	; (10554 <init_eeprom+0x404>)
   10246:	4798      	blx	r3
		eeprom_emulator_commit_page_buffer();
   10248:	4bc3      	ldr	r3, [pc, #780]	; (10558 <init_eeprom+0x408>)
   1024a:	4798      	blx	r3
	}
	
	eeprom_emulator_read_page(FTP_USER_PARAMETER_PAGE, page_data);
   1024c:	4bba      	ldr	r3, [pc, #744]	; (10538 <init_eeprom+0x3e8>)
   1024e:	0019      	movs	r1, r3
   10250:	2002      	movs	r0, #2
   10252:	4bba      	ldr	r3, [pc, #744]	; (1053c <init_eeprom+0x3ec>)
   10254:	4798      	blx	r3
	memcpy(&ftp_user_parameter,page_data,sizeof(ftp_user_parameter));
   10256:	49b8      	ldr	r1, [pc, #736]	; (10538 <init_eeprom+0x3e8>)
   10258:	4bc5      	ldr	r3, [pc, #788]	; (10570 <init_eeprom+0x420>)
   1025a:	2238      	movs	r2, #56	; 0x38
   1025c:	0018      	movs	r0, r3
   1025e:	4bb9      	ldr	r3, [pc, #740]	; (10544 <init_eeprom+0x3f4>)
   10260:	4798      	blx	r3
	if (ftp_user_parameter.ucharFirst_Time_Write !=85)
   10262:	4bc3      	ldr	r3, [pc, #780]	; (10570 <init_eeprom+0x420>)
   10264:	791b      	ldrb	r3, [r3, #4]
   10266:	2b55      	cmp	r3, #85	; 0x55
   10268:	d03c      	beq.n	102e4 <init_eeprom+0x194>
	{
		ftp_user_parameter.ulongintDiscard			   = 0;
   1026a:	4bc1      	ldr	r3, [pc, #772]	; (10570 <init_eeprom+0x420>)
   1026c:	2200      	movs	r2, #0
   1026e:	601a      	str	r2, [r3, #0]
		ftp_user_parameter.ucharFirst_Time_Write	   = 85;
   10270:	4bbf      	ldr	r3, [pc, #764]	; (10570 <init_eeprom+0x420>)
   10272:	2255      	movs	r2, #85	; 0x55
   10274:	711a      	strb	r2, [r3, #4]
		
		memset(ftp_user_parameter.ftp_username, '\0', sizeof(ftp_user_parameter.ftp_username));
   10276:	4bbf      	ldr	r3, [pc, #764]	; (10574 <init_eeprom+0x424>)
   10278:	2210      	movs	r2, #16
   1027a:	2100      	movs	r1, #0
   1027c:	0018      	movs	r0, r3
   1027e:	4bb3      	ldr	r3, [pc, #716]	; (1054c <init_eeprom+0x3fc>)
   10280:	4798      	blx	r3
		strcpy(ftp_user_parameter.ftp_username,"rahulnrathodkcl");
   10282:	4bbb      	ldr	r3, [pc, #748]	; (10570 <init_eeprom+0x420>)
   10284:	2205      	movs	r2, #5
   10286:	49bc      	ldr	r1, [pc, #752]	; (10578 <init_eeprom+0x428>)
   10288:	189b      	adds	r3, r3, r2
   1028a:	2210      	movs	r2, #16
   1028c:	0018      	movs	r0, r3
   1028e:	4bad      	ldr	r3, [pc, #692]	; (10544 <init_eeprom+0x3f4>)
   10290:	4798      	blx	r3
		
		memset(ftp_user_parameter.ftp_filename, '\0', sizeof(ftp_user_parameter.ftp_password));
   10292:	4bba      	ldr	r3, [pc, #744]	; (1057c <init_eeprom+0x42c>)
   10294:	2210      	movs	r2, #16
   10296:	2100      	movs	r1, #0
   10298:	0018      	movs	r0, r3
   1029a:	4bac      	ldr	r3, [pc, #688]	; (1054c <init_eeprom+0x3fc>)
   1029c:	4798      	blx	r3
		strcpy(ftp_user_parameter.ftp_password,"123456789");
   1029e:	4ab8      	ldr	r2, [pc, #736]	; (10580 <init_eeprom+0x430>)
   102a0:	4bb8      	ldr	r3, [pc, #736]	; (10584 <init_eeprom+0x434>)
   102a2:	0010      	movs	r0, r2
   102a4:	0019      	movs	r1, r3
   102a6:	230a      	movs	r3, #10
   102a8:	001a      	movs	r2, r3
   102aa:	4ba6      	ldr	r3, [pc, #664]	; (10544 <init_eeprom+0x3f4>)
   102ac:	4798      	blx	r3
		
		memset(ftp_user_parameter.ftp_filename, '\0', sizeof(ftp_user_parameter.ftp_filename));
   102ae:	4bb3      	ldr	r3, [pc, #716]	; (1057c <init_eeprom+0x42c>)
   102b0:	2210      	movs	r2, #16
   102b2:	2100      	movs	r1, #0
   102b4:	0018      	movs	r0, r3
   102b6:	4ba5      	ldr	r3, [pc, #660]	; (1054c <init_eeprom+0x3fc>)
   102b8:	4798      	blx	r3
		strcpy(ftp_user_parameter.ftp_filename,"firmware.bin");
   102ba:	4ab0      	ldr	r2, [pc, #704]	; (1057c <init_eeprom+0x42c>)
   102bc:	4bb2      	ldr	r3, [pc, #712]	; (10588 <init_eeprom+0x438>)
   102be:	0010      	movs	r0, r2
   102c0:	0019      	movs	r1, r3
   102c2:	230d      	movs	r3, #13
   102c4:	001a      	movs	r2, r3
   102c6:	4b9f      	ldr	r3, [pc, #636]	; (10544 <init_eeprom+0x3f4>)
   102c8:	4798      	blx	r3
		
		memcpy(page_data,&ftp_user_parameter,sizeof(ftp_user_parameter));
   102ca:	49a9      	ldr	r1, [pc, #676]	; (10570 <init_eeprom+0x420>)
   102cc:	4b9a      	ldr	r3, [pc, #616]	; (10538 <init_eeprom+0x3e8>)
   102ce:	2238      	movs	r2, #56	; 0x38
   102d0:	0018      	movs	r0, r3
   102d2:	4b9c      	ldr	r3, [pc, #624]	; (10544 <init_eeprom+0x3f4>)
   102d4:	4798      	blx	r3
		eeprom_emulator_write_page(FTP_USER_PARAMETER_PAGE, page_data);
   102d6:	4b98      	ldr	r3, [pc, #608]	; (10538 <init_eeprom+0x3e8>)
   102d8:	0019      	movs	r1, r3
   102da:	2002      	movs	r0, #2
   102dc:	4b9d      	ldr	r3, [pc, #628]	; (10554 <init_eeprom+0x404>)
   102de:	4798      	blx	r3
		eeprom_emulator_commit_page_buffer();
   102e0:	4b9d      	ldr	r3, [pc, #628]	; (10558 <init_eeprom+0x408>)
   102e2:	4798      	blx	r3
	}
	//////////////////////////////////////////////////////////////////////////
	eeprom_emulator_read_page(USER_COUNTER_PAGE, page_data);
   102e4:	4b94      	ldr	r3, [pc, #592]	; (10538 <init_eeprom+0x3e8>)
   102e6:	0019      	movs	r1, r3
   102e8:	2008      	movs	r0, #8
   102ea:	4b94      	ldr	r3, [pc, #592]	; (1053c <init_eeprom+0x3ec>)
   102ec:	4798      	blx	r3
	memcpy(&user_count_struct,page_data,sizeof(user_count_struct));
   102ee:	4aa7      	ldr	r2, [pc, #668]	; (1058c <init_eeprom+0x43c>)
   102f0:	4b91      	ldr	r3, [pc, #580]	; (10538 <init_eeprom+0x3e8>)
   102f2:	0010      	movs	r0, r2
   102f4:	0019      	movs	r1, r3
   102f6:	2308      	movs	r3, #8
   102f8:	001a      	movs	r2, r3
   102fa:	4b92      	ldr	r3, [pc, #584]	; (10544 <init_eeprom+0x3f4>)
   102fc:	4798      	blx	r3
	if (user_count_struct.u8tfirst_time_write_ee != 85)
   102fe:	4ba3      	ldr	r3, [pc, #652]	; (1058c <init_eeprom+0x43c>)
   10300:	781b      	ldrb	r3, [r3, #0]
   10302:	2b55      	cmp	r3, #85	; 0x55
   10304:	d01d      	beq.n	10342 <init_eeprom+0x1f2>
	{
		user_count_struct.u8tfirst_time_write_ee = 85;
   10306:	4ba1      	ldr	r3, [pc, #644]	; (1058c <init_eeprom+0x43c>)
   10308:	2255      	movs	r2, #85	; 0x55
   1030a:	701a      	strb	r2, [r3, #0]
		user_count_struct.total_user_no_count    = 15;
   1030c:	4b9f      	ldr	r3, [pc, #636]	; (1058c <init_eeprom+0x43c>)
   1030e:	220f      	movs	r2, #15
   10310:	705a      	strb	r2, [r3, #1]
		user_count_struct.current_user_no_count  = 0;
   10312:	4b9e      	ldr	r3, [pc, #632]	; (1058c <init_eeprom+0x43c>)
   10314:	2200      	movs	r2, #0
   10316:	709a      	strb	r2, [r3, #2]
		user_count_struct.primaryNumberIndex = 0;
   10318:	4b9c      	ldr	r3, [pc, #624]	; (1058c <init_eeprom+0x43c>)
   1031a:	2200      	movs	r2, #0
   1031c:	70da      	strb	r2, [r3, #3]
		user_count_struct.secondaryNumberIndex = 1;
   1031e:	4b9b      	ldr	r3, [pc, #620]	; (1058c <init_eeprom+0x43c>)
   10320:	2201      	movs	r2, #1
   10322:	711a      	strb	r2, [r3, #4]
		
		
		memcpy(page_data,&user_count_struct,sizeof(user_count_struct));
   10324:	4a84      	ldr	r2, [pc, #528]	; (10538 <init_eeprom+0x3e8>)
   10326:	4b99      	ldr	r3, [pc, #612]	; (1058c <init_eeprom+0x43c>)
   10328:	0010      	movs	r0, r2
   1032a:	0019      	movs	r1, r3
   1032c:	2308      	movs	r3, #8
   1032e:	001a      	movs	r2, r3
   10330:	4b84      	ldr	r3, [pc, #528]	; (10544 <init_eeprom+0x3f4>)
   10332:	4798      	blx	r3
		eeprom_emulator_write_page(USER_COUNTER_PAGE, page_data);
   10334:	4b80      	ldr	r3, [pc, #512]	; (10538 <init_eeprom+0x3e8>)
   10336:	0019      	movs	r1, r3
   10338:	2008      	movs	r0, #8
   1033a:	4b86      	ldr	r3, [pc, #536]	; (10554 <init_eeprom+0x404>)
   1033c:	4798      	blx	r3
		eeprom_emulator_commit_page_buffer();
   1033e:	4b86      	ldr	r3, [pc, #536]	; (10558 <init_eeprom+0x408>)
   10340:	4798      	blx	r3
	}
	//////////////////////////////////////////////////////////////////////////
	config_mobile_no_ee(ADMIN_1_MOBILE_NUMBER_PAGE,"7041196959");
   10342:	4b93      	ldr	r3, [pc, #588]	; (10590 <init_eeprom+0x440>)
   10344:	0019      	movs	r1, r3
   10346:	2003      	movs	r0, #3
   10348:	4b92      	ldr	r3, [pc, #584]	; (10594 <init_eeprom+0x444>)
   1034a:	4798      	blx	r3
	config_mobile_no_ee(ADMIN_2_MOBILE_NUMBER_PAGE,"7698439201");
   1034c:	4b92      	ldr	r3, [pc, #584]	; (10598 <init_eeprom+0x448>)
   1034e:	0019      	movs	r1, r3
   10350:	2004      	movs	r0, #4
   10352:	4b90      	ldr	r3, [pc, #576]	; (10594 <init_eeprom+0x444>)
   10354:	4798      	blx	r3
	config_mobile_no_ee(ADMIN_3_MOBILE_NUMBER_PAGE,"7383614214");
   10356:	4b91      	ldr	r3, [pc, #580]	; (1059c <init_eeprom+0x44c>)
   10358:	0019      	movs	r1, r3
   1035a:	2005      	movs	r0, #5
   1035c:	4b8d      	ldr	r3, [pc, #564]	; (10594 <init_eeprom+0x444>)
   1035e:	4798      	blx	r3
	config_mobile_no_ee(ADMIN_4_MOBILE_NUMBER_PAGE,"7383622678");
   10360:	4b8f      	ldr	r3, [pc, #572]	; (105a0 <init_eeprom+0x450>)
   10362:	0019      	movs	r1, r3
   10364:	2006      	movs	r0, #6
   10366:	4b8b      	ldr	r3, [pc, #556]	; (10594 <init_eeprom+0x444>)
   10368:	4798      	blx	r3
	//config_mobile_no_ee(ADMIN_5_MOBILE_NUMBER_PAGE,"9586135978");
	config_mobile_no_ee(ADMIN_5_MOBILE_NUMBER_PAGE,"9586135978");
   1036a:	4b8e      	ldr	r3, [pc, #568]	; (105a4 <init_eeprom+0x454>)
   1036c:	0019      	movs	r1, r3
   1036e:	2007      	movs	r0, #7
   10370:	4b88      	ldr	r3, [pc, #544]	; (10594 <init_eeprom+0x444>)
   10372:	4798      	blx	r3
	//////////////////////////////////////////////////////////////////////////
	config_mobile_no_ee(USER_1_MOBILE_NUMBER_PAGE ,"0000000000");
   10374:	4b76      	ldr	r3, [pc, #472]	; (10550 <init_eeprom+0x400>)
   10376:	0019      	movs	r1, r3
   10378:	2009      	movs	r0, #9
   1037a:	4b86      	ldr	r3, [pc, #536]	; (10594 <init_eeprom+0x444>)
   1037c:	4798      	blx	r3
	config_mobile_no_ee(USER_2_MOBILE_NUMBER_PAGE ,"0000000000");
   1037e:	4b74      	ldr	r3, [pc, #464]	; (10550 <init_eeprom+0x400>)
   10380:	0019      	movs	r1, r3
   10382:	200a      	movs	r0, #10
   10384:	4b83      	ldr	r3, [pc, #524]	; (10594 <init_eeprom+0x444>)
   10386:	4798      	blx	r3
	config_mobile_no_ee(USER_3_MOBILE_NUMBER_PAGE ,"0000000000");
   10388:	4b71      	ldr	r3, [pc, #452]	; (10550 <init_eeprom+0x400>)
   1038a:	0019      	movs	r1, r3
   1038c:	200b      	movs	r0, #11
   1038e:	4b81      	ldr	r3, [pc, #516]	; (10594 <init_eeprom+0x444>)
   10390:	4798      	blx	r3
	config_mobile_no_ee(USER_4_MOBILE_NUMBER_PAGE ,"0000000000");
   10392:	4b6f      	ldr	r3, [pc, #444]	; (10550 <init_eeprom+0x400>)
   10394:	0019      	movs	r1, r3
   10396:	200c      	movs	r0, #12
   10398:	4b7e      	ldr	r3, [pc, #504]	; (10594 <init_eeprom+0x444>)
   1039a:	4798      	blx	r3
	config_mobile_no_ee(USER_5_MOBILE_NUMBER_PAGE ,"0000000000");
   1039c:	4b6c      	ldr	r3, [pc, #432]	; (10550 <init_eeprom+0x400>)
   1039e:	0019      	movs	r1, r3
   103a0:	200d      	movs	r0, #13
   103a2:	4b7c      	ldr	r3, [pc, #496]	; (10594 <init_eeprom+0x444>)
   103a4:	4798      	blx	r3
	config_mobile_no_ee(USER_6_MOBILE_NUMBER_PAGE ,"0000000000");
   103a6:	4b6a      	ldr	r3, [pc, #424]	; (10550 <init_eeprom+0x400>)
   103a8:	0019      	movs	r1, r3
   103aa:	200e      	movs	r0, #14
   103ac:	4b79      	ldr	r3, [pc, #484]	; (10594 <init_eeprom+0x444>)
   103ae:	4798      	blx	r3
	config_mobile_no_ee(USER_7_MOBILE_NUMBER_PAGE ,"0000000000");
   103b0:	4b67      	ldr	r3, [pc, #412]	; (10550 <init_eeprom+0x400>)
   103b2:	0019      	movs	r1, r3
   103b4:	200f      	movs	r0, #15
   103b6:	4b77      	ldr	r3, [pc, #476]	; (10594 <init_eeprom+0x444>)
   103b8:	4798      	blx	r3
	config_mobile_no_ee(USER_8_MOBILE_NUMBER_PAGE ,"0000000000");
   103ba:	4b65      	ldr	r3, [pc, #404]	; (10550 <init_eeprom+0x400>)
   103bc:	0019      	movs	r1, r3
   103be:	2010      	movs	r0, #16
   103c0:	4b74      	ldr	r3, [pc, #464]	; (10594 <init_eeprom+0x444>)
   103c2:	4798      	blx	r3
	config_mobile_no_ee(USER_9_MOBILE_NUMBER_PAGE ,"0000000000");
   103c4:	4b62      	ldr	r3, [pc, #392]	; (10550 <init_eeprom+0x400>)
   103c6:	0019      	movs	r1, r3
   103c8:	2011      	movs	r0, #17
   103ca:	4b72      	ldr	r3, [pc, #456]	; (10594 <init_eeprom+0x444>)
   103cc:	4798      	blx	r3
	config_mobile_no_ee(USER_10_MOBILE_NUMBER_PAGE,"0000000000");
   103ce:	4b60      	ldr	r3, [pc, #384]	; (10550 <init_eeprom+0x400>)
   103d0:	0019      	movs	r1, r3
   103d2:	2012      	movs	r0, #18
   103d4:	4b6f      	ldr	r3, [pc, #444]	; (10594 <init_eeprom+0x444>)
   103d6:	4798      	blx	r3
	config_mobile_no_ee(USER_11_MOBILE_NUMBER_PAGE,"0000000000");
   103d8:	4b5d      	ldr	r3, [pc, #372]	; (10550 <init_eeprom+0x400>)
   103da:	0019      	movs	r1, r3
   103dc:	2013      	movs	r0, #19
   103de:	4b6d      	ldr	r3, [pc, #436]	; (10594 <init_eeprom+0x444>)
   103e0:	4798      	blx	r3
	config_mobile_no_ee(USER_12_MOBILE_NUMBER_PAGE,"0000000000");
   103e2:	4b5b      	ldr	r3, [pc, #364]	; (10550 <init_eeprom+0x400>)
   103e4:	0019      	movs	r1, r3
   103e6:	2014      	movs	r0, #20
   103e8:	4b6a      	ldr	r3, [pc, #424]	; (10594 <init_eeprom+0x444>)
   103ea:	4798      	blx	r3
	config_mobile_no_ee(USER_13_MOBILE_NUMBER_PAGE,"0000000000");
   103ec:	4b58      	ldr	r3, [pc, #352]	; (10550 <init_eeprom+0x400>)
   103ee:	0019      	movs	r1, r3
   103f0:	2015      	movs	r0, #21
   103f2:	4b68      	ldr	r3, [pc, #416]	; (10594 <init_eeprom+0x444>)
   103f4:	4798      	blx	r3
	config_mobile_no_ee(USER_14_MOBILE_NUMBER_PAGE,"0000000000");
   103f6:	4b56      	ldr	r3, [pc, #344]	; (10550 <init_eeprom+0x400>)
   103f8:	0019      	movs	r1, r3
   103fa:	2016      	movs	r0, #22
   103fc:	4b65      	ldr	r3, [pc, #404]	; (10594 <init_eeprom+0x444>)
   103fe:	4798      	blx	r3
	config_mobile_no_ee(USER_15_MOBILE_NUMBER_PAGE,"0000000000");
   10400:	4b53      	ldr	r3, [pc, #332]	; (10550 <init_eeprom+0x400>)
   10402:	0019      	movs	r1, r3
   10404:	2017      	movs	r0, #23
   10406:	4b63      	ldr	r3, [pc, #396]	; (10594 <init_eeprom+0x444>)
   10408:	4798      	blx	r3
	
	//////////////////////////////////////////////////////////////////////////
	eeprom_emulator_read_page(ALTARNATE_NUMBERS_PAGE, page_data);
   1040a:	4b4b      	ldr	r3, [pc, #300]	; (10538 <init_eeprom+0x3e8>)
   1040c:	0019      	movs	r1, r3
   1040e:	2018      	movs	r0, #24
   10410:	4b4a      	ldr	r3, [pc, #296]	; (1053c <init_eeprom+0x3ec>)
   10412:	4798      	blx	r3
	memcpy(&alternateNumber_struct,page_data,sizeof(alternateNumber_struct));
   10414:	4a64      	ldr	r2, [pc, #400]	; (105a8 <init_eeprom+0x458>)
   10416:	4b48      	ldr	r3, [pc, #288]	; (10538 <init_eeprom+0x3e8>)
   10418:	0010      	movs	r0, r2
   1041a:	0019      	movs	r1, r3
   1041c:	2318      	movs	r3, #24
   1041e:	001a      	movs	r2, r3
   10420:	4b48      	ldr	r3, [pc, #288]	; (10544 <init_eeprom+0x3f4>)
   10422:	4798      	blx	r3
	if (alternateNumber_struct.u8tfirst_time_write_ee != 85)
   10424:	4b60      	ldr	r3, [pc, #384]	; (105a8 <init_eeprom+0x458>)
   10426:	781b      	ldrb	r3, [r3, #0]
   10428:	2b55      	cmp	r3, #85	; 0x55
   1042a:	d025      	beq.n	10478 <init_eeprom+0x328>
	{
		alternateNumber_struct.u8tfirst_time_write_ee = 85;
   1042c:	4b5e      	ldr	r3, [pc, #376]	; (105a8 <init_eeprom+0x458>)
   1042e:	2255      	movs	r2, #85	; 0x55
   10430:	701a      	strb	r2, [r3, #0]
		
		alternateNumber_struct.alterNumberPresent = false;
   10432:	4b5d      	ldr	r3, [pc, #372]	; (105a8 <init_eeprom+0x458>)
   10434:	2200      	movs	r2, #0
   10436:	709a      	strb	r2, [r3, #2]
		alternateNumber_struct.alterNumberSetting = false;
   10438:	4b5b      	ldr	r3, [pc, #364]	; (105a8 <init_eeprom+0x458>)
   1043a:	2200      	movs	r2, #0
   1043c:	705a      	strb	r2, [r3, #1]
		
		memset(alternateNumber_struct.alternateNumber_ee, '\0', sizeof(alternateNumber_struct.alternateNumber_ee));
   1043e:	4b5b      	ldr	r3, [pc, #364]	; (105ac <init_eeprom+0x45c>)
   10440:	2214      	movs	r2, #20
   10442:	2100      	movs	r1, #0
   10444:	0018      	movs	r0, r3
   10446:	4b41      	ldr	r3, [pc, #260]	; (1054c <init_eeprom+0x3fc>)
   10448:	4798      	blx	r3
		strcpy(alternateNumber_struct.alternateNumber_ee,"0000000000");
   1044a:	4a58      	ldr	r2, [pc, #352]	; (105ac <init_eeprom+0x45c>)
   1044c:	4b40      	ldr	r3, [pc, #256]	; (10550 <init_eeprom+0x400>)
   1044e:	0010      	movs	r0, r2
   10450:	0019      	movs	r1, r3
   10452:	230b      	movs	r3, #11
   10454:	001a      	movs	r2, r3
   10456:	4b3b      	ldr	r3, [pc, #236]	; (10544 <init_eeprom+0x3f4>)
   10458:	4798      	blx	r3
		
		memcpy(page_data,&alternateNumber_struct,sizeof(alternateNumber_struct));
   1045a:	4a37      	ldr	r2, [pc, #220]	; (10538 <init_eeprom+0x3e8>)
   1045c:	4b52      	ldr	r3, [pc, #328]	; (105a8 <init_eeprom+0x458>)
   1045e:	0010      	movs	r0, r2
   10460:	0019      	movs	r1, r3
   10462:	2318      	movs	r3, #24
   10464:	001a      	movs	r2, r3
   10466:	4b37      	ldr	r3, [pc, #220]	; (10544 <init_eeprom+0x3f4>)
   10468:	4798      	blx	r3
		eeprom_emulator_write_page(ALTARNATE_NUMBERS_PAGE, page_data);
   1046a:	4b33      	ldr	r3, [pc, #204]	; (10538 <init_eeprom+0x3e8>)
   1046c:	0019      	movs	r1, r3
   1046e:	2018      	movs	r0, #24
   10470:	4b38      	ldr	r3, [pc, #224]	; (10554 <init_eeprom+0x404>)
   10472:	4798      	blx	r3
		eeprom_emulator_commit_page_buffer();
   10474:	4b38      	ldr	r3, [pc, #224]	; (10558 <init_eeprom+0x408>)
   10476:	4798      	blx	r3
	}
	//////////////////////////////////////////////////////////////////////////
	eeprom_emulator_read_page(M2M_NUMBERS_PAGE, page_data);
   10478:	4b2f      	ldr	r3, [pc, #188]	; (10538 <init_eeprom+0x3e8>)
   1047a:	0019      	movs	r1, r3
   1047c:	2019      	movs	r0, #25
   1047e:	4b2f      	ldr	r3, [pc, #188]	; (1053c <init_eeprom+0x3ec>)
   10480:	4798      	blx	r3
	memcpy(&m2m_Numbers_struct,page_data,sizeof(m2m_Numbers_struct));
   10482:	4a4b      	ldr	r2, [pc, #300]	; (105b0 <init_eeprom+0x460>)
   10484:	4b2c      	ldr	r3, [pc, #176]	; (10538 <init_eeprom+0x3e8>)
   10486:	0010      	movs	r0, r2
   10488:	0019      	movs	r1, r3
   1048a:	2330      	movs	r3, #48	; 0x30
   1048c:	001a      	movs	r2, r3
   1048e:	4b2d      	ldr	r3, [pc, #180]	; (10544 <init_eeprom+0x3f4>)
   10490:	4798      	blx	r3
	if (m2m_Numbers_struct.u8tfirst_time_write_ee != 85)
   10492:	4b47      	ldr	r3, [pc, #284]	; (105b0 <init_eeprom+0x460>)
   10494:	781b      	ldrb	r3, [r3, #0]
   10496:	2b55      	cmp	r3, #85	; 0x55
   10498:	d03c      	beq.n	10514 <init_eeprom+0x3c4>
	{
		m2m_Numbers_struct.u8tfirst_time_write_ee = 85;
   1049a:	4b45      	ldr	r3, [pc, #276]	; (105b0 <init_eeprom+0x460>)
   1049c:	2255      	movs	r2, #85	; 0x55
   1049e:	701a      	strb	r2, [r3, #0]
		
		memset(m2m_Numbers_struct.m2mNumber_ee, '\0', sizeof(m2m_Numbers_struct.m2mNumber_ee));
   104a0:	4b44      	ldr	r3, [pc, #272]	; (105b4 <init_eeprom+0x464>)
   104a2:	2214      	movs	r2, #20
   104a4:	2100      	movs	r1, #0
   104a6:	0018      	movs	r0, r3
   104a8:	4b28      	ldr	r3, [pc, #160]	; (1054c <init_eeprom+0x3fc>)
   104aa:	4798      	blx	r3
		strcpy(m2m_Numbers_struct.m2mNumber_ee,"0000000000");
   104ac:	4a41      	ldr	r2, [pc, #260]	; (105b4 <init_eeprom+0x464>)
   104ae:	4b28      	ldr	r3, [pc, #160]	; (10550 <init_eeprom+0x400>)
   104b0:	0010      	movs	r0, r2
   104b2:	0019      	movs	r1, r3
   104b4:	230b      	movs	r3, #11
   104b6:	001a      	movs	r2, r3
   104b8:	4b22      	ldr	r3, [pc, #136]	; (10544 <init_eeprom+0x3f4>)
   104ba:	4798      	blx	r3
		
		memset(m2m_Numbers_struct.m2mremoteNumber_ee, '\0', sizeof(m2m_Numbers_struct.m2mremoteNumber_ee));
   104bc:	4b3e      	ldr	r3, [pc, #248]	; (105b8 <init_eeprom+0x468>)
   104be:	2214      	movs	r2, #20
   104c0:	2100      	movs	r1, #0
   104c2:	0018      	movs	r0, r3
   104c4:	4b21      	ldr	r3, [pc, #132]	; (1054c <init_eeprom+0x3fc>)
   104c6:	4798      	blx	r3
		strcpy(m2m_Numbers_struct.m2mremoteNumber_ee,"0000000000");
   104c8:	4a3b      	ldr	r2, [pc, #236]	; (105b8 <init_eeprom+0x468>)
   104ca:	4b21      	ldr	r3, [pc, #132]	; (10550 <init_eeprom+0x400>)
   104cc:	0010      	movs	r0, r2
   104ce:	0019      	movs	r1, r3
   104d0:	230b      	movs	r3, #11
   104d2:	001a      	movs	r2, r3
   104d4:	4b1b      	ldr	r3, [pc, #108]	; (10544 <init_eeprom+0x3f4>)
   104d6:	4798      	blx	r3
		
		m2m_Numbers_struct.m2mPresent			= false;
   104d8:	4b35      	ldr	r3, [pc, #212]	; (105b0 <init_eeprom+0x460>)
   104da:	2200      	movs	r2, #0
   104dc:	705a      	strb	r2, [r3, #1]
		m2m_Numbers_struct.m2mVerified			= false;
   104de:	4b34      	ldr	r3, [pc, #208]	; (105b0 <init_eeprom+0x460>)
   104e0:	2200      	movs	r2, #0
   104e2:	709a      	strb	r2, [r3, #2]
		
		m2m_Numbers_struct.m2mRemotePresent		= false;
   104e4:	4b32      	ldr	r3, [pc, #200]	; (105b0 <init_eeprom+0x460>)
   104e6:	2200      	movs	r2, #0
   104e8:	70da      	strb	r2, [r3, #3]
		m2m_Numbers_struct.m2mRemoteVerified	= false;
   104ea:	4b31      	ldr	r3, [pc, #196]	; (105b0 <init_eeprom+0x460>)
   104ec:	2200      	movs	r2, #0
   104ee:	711a      	strb	r2, [r3, #4]
		
		m2m_Numbers_struct.m2mSetting			= false;
   104f0:	4b2f      	ldr	r3, [pc, #188]	; (105b0 <init_eeprom+0x460>)
   104f2:	2200      	movs	r2, #0
   104f4:	715a      	strb	r2, [r3, #5]
		
		memcpy(page_data,&m2m_Numbers_struct,sizeof(m2m_Numbers_struct));
   104f6:	4a10      	ldr	r2, [pc, #64]	; (10538 <init_eeprom+0x3e8>)
   104f8:	4b2d      	ldr	r3, [pc, #180]	; (105b0 <init_eeprom+0x460>)
   104fa:	0010      	movs	r0, r2
   104fc:	0019      	movs	r1, r3
   104fe:	2330      	movs	r3, #48	; 0x30
   10500:	001a      	movs	r2, r3
   10502:	4b10      	ldr	r3, [pc, #64]	; (10544 <init_eeprom+0x3f4>)
   10504:	4798      	blx	r3
		eeprom_emulator_write_page(M2M_NUMBERS_PAGE, page_data);
   10506:	4b0c      	ldr	r3, [pc, #48]	; (10538 <init_eeprom+0x3e8>)
   10508:	0019      	movs	r1, r3
   1050a:	2019      	movs	r0, #25
   1050c:	4b11      	ldr	r3, [pc, #68]	; (10554 <init_eeprom+0x404>)
   1050e:	4798      	blx	r3
		eeprom_emulator_commit_page_buffer();
   10510:	4b11      	ldr	r3, [pc, #68]	; (10558 <init_eeprom+0x408>)
   10512:	4798      	blx	r3
	}
	//////////////////////////////////////////////////////////////////////////
	eeprom_emulator_read_page(USER_SETTING_PARAMETERS_PAGE, page_data);
   10514:	4b08      	ldr	r3, [pc, #32]	; (10538 <init_eeprom+0x3e8>)
   10516:	0019      	movs	r1, r3
   10518:	201a      	movs	r0, #26
   1051a:	4b08      	ldr	r3, [pc, #32]	; (1053c <init_eeprom+0x3ec>)
   1051c:	4798      	blx	r3
	memcpy(&user_settings_parameter_struct,page_data,sizeof(user_settings_parameter_struct));
   1051e:	4906      	ldr	r1, [pc, #24]	; (10538 <init_eeprom+0x3e8>)
   10520:	4b26      	ldr	r3, [pc, #152]	; (105bc <init_eeprom+0x46c>)
   10522:	2230      	movs	r2, #48	; 0x30
   10524:	0018      	movs	r0, r3
   10526:	4b07      	ldr	r3, [pc, #28]	; (10544 <init_eeprom+0x3f4>)
   10528:	4798      	blx	r3
	if (user_settings_parameter_struct.u8tfirst_time_write_ee != 85)
   1052a:	4b24      	ldr	r3, [pc, #144]	; (105bc <init_eeprom+0x46c>)
   1052c:	781b      	ldrb	r3, [r3, #0]
   1052e:	b2db      	uxtb	r3, r3
   10530:	e046      	b.n	105c0 <init_eeprom+0x470>
   10532:	46c0      	nop			; (mov r8, r8)
   10534:	00010115 	.word	0x00010115
   10538:	20000584 	.word	0x20000584
   1053c:	0002376d 	.word	0x0002376d
   10540:	200005f8 	.word	0x200005f8
   10544:	000289ad 	.word	0x000289ad
   10548:	20000604 	.word	0x20000604
   1054c:	000289e3 	.word	0x000289e3
   10550:	000295e4 	.word	0x000295e4
   10554:	00023661 	.word	0x00023661
   10558:	00023809 	.word	0x00023809
   1055c:	2000051c 	.word	0x2000051c
   10560:	20000521 	.word	0x20000521
   10564:	000295f0 	.word	0x000295f0
   10568:	2000053f 	.word	0x2000053f
   1056c:	00029600 	.word	0x00029600
   10570:	200005c0 	.word	0x200005c0
   10574:	200005c5 	.word	0x200005c5
   10578:	0002960c 	.word	0x0002960c
   1057c:	200005e5 	.word	0x200005e5
   10580:	200005d5 	.word	0x200005d5
   10584:	0002961c 	.word	0x0002961c
   10588:	00029628 	.word	0x00029628
   1058c:	20000614 	.word	0x20000614
   10590:	00029638 	.word	0x00029638
   10594:	0001072d 	.word	0x0001072d
   10598:	00029644 	.word	0x00029644
   1059c:	00029650 	.word	0x00029650
   105a0:	0002965c 	.word	0x0002965c
   105a4:	00029668 	.word	0x00029668
   105a8:	2000063c 	.word	0x2000063c
   105ac:	20000640 	.word	0x20000640
   105b0:	20000554 	.word	0x20000554
   105b4:	2000055c 	.word	0x2000055c
   105b8:	20000570 	.word	0x20000570
   105bc:	20000654 	.word	0x20000654
   105c0:	2b55      	cmp	r3, #85	; 0x55
   105c2:	d065      	beq.n	10690 <init_eeprom+0x540>
	{
		user_settings_parameter_struct.u8tfirst_time_write_ee		= 85;
   105c4:	4b51      	ldr	r3, [pc, #324]	; (1070c <init_eeprom+0x5bc>)
   105c6:	2255      	movs	r2, #85	; 0x55
   105c8:	701a      	strb	r2, [r3, #0]
		
		user_settings_parameter_struct.autoStartAddress				= false;
   105ca:	4b50      	ldr	r3, [pc, #320]	; (1070c <init_eeprom+0x5bc>)
   105cc:	2200      	movs	r2, #0
   105ce:	705a      	strb	r2, [r3, #1]
		user_settings_parameter_struct.autoStartTimeAddress			= 50;
   105d0:	4b4e      	ldr	r3, [pc, #312]	; (1070c <init_eeprom+0x5bc>)
   105d2:	2232      	movs	r2, #50	; 0x32
   105d4:	805a      	strh	r2, [r3, #2]
		user_settings_parameter_struct.dndAddress					= DND_OFF;
   105d6:	4b4d      	ldr	r3, [pc, #308]	; (1070c <init_eeprom+0x5bc>)
   105d8:	224f      	movs	r2, #79	; 0x4f
   105da:	711a      	strb	r2, [r3, #4]
		user_settings_parameter_struct.responseAddress				= 'T';
   105dc:	4b4b      	ldr	r3, [pc, #300]	; (1070c <init_eeprom+0x5bc>)
   105de:	2254      	movs	r2, #84	; 0x54
   105e0:	715a      	strb	r2, [r3, #5]
		user_settings_parameter_struct.starDeltaTimerAddress		= 2;
   105e2:	4b4a      	ldr	r3, [pc, #296]	; (1070c <init_eeprom+0x5bc>)
   105e4:	2202      	movs	r2, #2
   105e6:	80da      	strh	r2, [r3, #6]
		//user_settings_parameter_struct.bypassAddress				= false;
		user_settings_parameter_struct.eventStageAddress			= 0;
   105e8:	4b48      	ldr	r3, [pc, #288]	; (1070c <init_eeprom+0x5bc>)
   105ea:	2200      	movs	r2, #0
   105ec:	721a      	strb	r2, [r3, #8]
		user_settings_parameter_struct.noCallAddress				= false;
   105ee:	4b47      	ldr	r3, [pc, #284]	; (1070c <init_eeprom+0x5bc>)
   105f0:	2200      	movs	r2, #0
   105f2:	725a      	strb	r2, [r3, #9]
		user_settings_parameter_struct.noCallStartTimeHourAddress	= 0;
   105f4:	4b45      	ldr	r3, [pc, #276]	; (1070c <init_eeprom+0x5bc>)
   105f6:	2200      	movs	r2, #0
   105f8:	729a      	strb	r2, [r3, #10]
		user_settings_parameter_struct.noCallStartTimeMinuteAddress = 0;
   105fa:	4b44      	ldr	r3, [pc, #272]	; (1070c <init_eeprom+0x5bc>)
   105fc:	2200      	movs	r2, #0
   105fe:	72da      	strb	r2, [r3, #11]
		user_settings_parameter_struct.noCallStopTimeHourAddress	= 0;
   10600:	4b42      	ldr	r3, [pc, #264]	; (1070c <init_eeprom+0x5bc>)
   10602:	2200      	movs	r2, #0
   10604:	731a      	strb	r2, [r3, #12]
		user_settings_parameter_struct.noCallStopTimeMinuteAddress	= 0;
   10606:	4b41      	ldr	r3, [pc, #260]	; (1070c <init_eeprom+0x5bc>)
   10608:	2200      	movs	r2, #0
   1060a:	735a      	strb	r2, [r3, #13]
		user_settings_parameter_struct.lowVoltAddress				= 0;
   1060c:	4b3f      	ldr	r3, [pc, #252]	; (1070c <init_eeprom+0x5bc>)
   1060e:	2200      	movs	r2, #0
   10610:	739a      	strb	r2, [r3, #14]
		user_settings_parameter_struct.currentDetectionAddress		= false;
   10612:	4b3e      	ldr	r3, [pc, #248]	; (1070c <init_eeprom+0x5bc>)
   10614:	2200      	movs	r2, #0
   10616:	73da      	strb	r2, [r3, #15]
		user_settings_parameter_struct.normalLoadAddress			= 0;
   10618:	4b3c      	ldr	r3, [pc, #240]	; (1070c <init_eeprom+0x5bc>)
   1061a:	2200      	movs	r2, #0
   1061c:	611a      	str	r2, [r3, #16]
		user_settings_parameter_struct.overloadAddress				= 0;
   1061e:	4b3b      	ldr	r3, [pc, #236]	; (1070c <init_eeprom+0x5bc>)
   10620:	2200      	movs	r2, #0
   10622:	615a      	str	r2, [r3, #20]
		user_settings_parameter_struct.underloadAddress				= 0;
   10624:	4b39      	ldr	r3, [pc, #228]	; (1070c <init_eeprom+0x5bc>)
   10626:	2200      	movs	r2, #0
   10628:	619a      	str	r2, [r3, #24]
		user_settings_parameter_struct.underloadPerAddress			= 85;
   1062a:	4b38      	ldr	r3, [pc, #224]	; (1070c <init_eeprom+0x5bc>)
   1062c:	2255      	movs	r2, #85	; 0x55
   1062e:	771a      	strb	r2, [r3, #28]
		user_settings_parameter_struct.overloadPerAddress			= 120;
   10630:	4b36      	ldr	r3, [pc, #216]	; (1070c <init_eeprom+0x5bc>)
   10632:	2278      	movs	r2, #120	; 0x78
   10634:	775a      	strb	r2, [r3, #29]
		//user_settings_parameter_struct.jumperSettingAddress			= 1;
		user_settings_parameter_struct.preventOverFlowAddress		= false;
   10636:	4b35      	ldr	r3, [pc, #212]	; (1070c <init_eeprom+0x5bc>)
   10638:	2200      	movs	r2, #0
   1063a:	779a      	strb	r2, [r3, #30]
		user_settings_parameter_struct.waterBypassAddress			= false;
   1063c:	4b33      	ldr	r3, [pc, #204]	; (1070c <init_eeprom+0x5bc>)
   1063e:	2200      	movs	r2, #0
   10640:	77da      	strb	r2, [r3, #31]
		
		user_settings_parameter_struct.detectSinglePhasing			= true;
   10642:	4b32      	ldr	r3, [pc, #200]	; (1070c <init_eeprom+0x5bc>)
   10644:	2220      	movs	r2, #32
   10646:	2101      	movs	r1, #1
   10648:	5499      	strb	r1, [r3, r2]
		user_settings_parameter_struct.singlePhasingVoltage			= 80;
   1064a:	4b30      	ldr	r3, [pc, #192]	; (1070c <init_eeprom+0x5bc>)
   1064c:	2250      	movs	r2, #80	; 0x50
   1064e:	845a      	strh	r2, [r3, #34]	; 0x22
		user_settings_parameter_struct.detectPhaseSequence			= true;
   10650:	4b2e      	ldr	r3, [pc, #184]	; (1070c <init_eeprom+0x5bc>)
   10652:	2224      	movs	r2, #36	; 0x24
   10654:	2101      	movs	r1, #1
   10656:	5499      	strb	r1, [r3, r2]
		user_settings_parameter_struct.detectMotorFeedback			= MOTORFEEDBACK_DETECTION_ON;
   10658:	4b2c      	ldr	r3, [pc, #176]	; (1070c <init_eeprom+0x5bc>)
   1065a:	2225      	movs	r2, #37	; 0x25
   1065c:	2102      	movs	r1, #2
   1065e:	5499      	strb	r1, [r3, r2]
		user_settings_parameter_struct.over_under_DetectionMethod	= MOTOR_UNDEROVER_DETECTION_CURRENT;
   10660:	4b2a      	ldr	r3, [pc, #168]	; (1070c <init_eeprom+0x5bc>)
   10662:	2226      	movs	r2, #38	; 0x26
   10664:	2102      	movs	r1, #2
   10666:	5499      	strb	r1, [r3, r2]
		user_settings_parameter_struct.motorVoltageBypass			= MOTOR_VOLTAGE_BYPASS_OFF;
   10668:	4b28      	ldr	r3, [pc, #160]	; (1070c <init_eeprom+0x5bc>)
   1066a:	2227      	movs	r2, #39	; 0x27
   1066c:	2100      	movs	r1, #0
   1066e:	5499      	strb	r1, [r3, r2]
		user_settings_parameter_struct.motorVoltageBypassTime		= 10000L;
   10670:	4b26      	ldr	r3, [pc, #152]	; (1070c <init_eeprom+0x5bc>)
   10672:	4a27      	ldr	r2, [pc, #156]	; (10710 <init_eeprom+0x5c0>)
   10674:	629a      	str	r2, [r3, #40]	; 0x28

		memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
   10676:	4925      	ldr	r1, [pc, #148]	; (1070c <init_eeprom+0x5bc>)
   10678:	4b26      	ldr	r3, [pc, #152]	; (10714 <init_eeprom+0x5c4>)
   1067a:	2230      	movs	r2, #48	; 0x30
   1067c:	0018      	movs	r0, r3
   1067e:	4b26      	ldr	r3, [pc, #152]	; (10718 <init_eeprom+0x5c8>)
   10680:	4798      	blx	r3
		eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
   10682:	4b24      	ldr	r3, [pc, #144]	; (10714 <init_eeprom+0x5c4>)
   10684:	0019      	movs	r1, r3
   10686:	201a      	movs	r0, #26
   10688:	4b24      	ldr	r3, [pc, #144]	; (1071c <init_eeprom+0x5cc>)
   1068a:	4798      	blx	r3
		eeprom_emulator_commit_page_buffer();
   1068c:	4b24      	ldr	r3, [pc, #144]	; (10720 <init_eeprom+0x5d0>)
   1068e:	4798      	blx	r3
	}
	//////////////////////////////////////////////////////////////////////////
	eeprom_emulator_read_page(FACTORY_SETTING_PARAMETERS_PAGE, page_data);
   10690:	4b20      	ldr	r3, [pc, #128]	; (10714 <init_eeprom+0x5c4>)
   10692:	0019      	movs	r1, r3
   10694:	201b      	movs	r0, #27
   10696:	4b23      	ldr	r3, [pc, #140]	; (10724 <init_eeprom+0x5d4>)
   10698:	4798      	blx	r3
	memcpy(&factory_settings_parameter_struct,page_data,sizeof(factory_settings_parameter_struct));
   1069a:	491e      	ldr	r1, [pc, #120]	; (10714 <init_eeprom+0x5c4>)
   1069c:	4b22      	ldr	r3, [pc, #136]	; (10728 <init_eeprom+0x5d8>)
   1069e:	2210      	movs	r2, #16
   106a0:	0018      	movs	r0, r3
   106a2:	4b1d      	ldr	r3, [pc, #116]	; (10718 <init_eeprom+0x5c8>)
   106a4:	4798      	blx	r3
	if (factory_settings_parameter_struct.u8tfirst_time_write_ee != 85)
   106a6:	4b20      	ldr	r3, [pc, #128]	; (10728 <init_eeprom+0x5d8>)
   106a8:	781b      	ldrb	r3, [r3, #0]
   106aa:	2b55      	cmp	r3, #85	; 0x55
   106ac:	d02a      	beq.n	10704 <init_eeprom+0x5b4>
	{
		factory_settings_parameter_struct.u8tfirst_time_write_ee	= 85;
   106ae:	4b1e      	ldr	r3, [pc, #120]	; (10728 <init_eeprom+0x5d8>)
   106b0:	2255      	movs	r2, #85	; 0x55
   106b2:	701a      	strb	r2, [r3, #0]
		factory_settings_parameter_struct.AMPERE_SPEAK				= true;
   106b4:	4b1c      	ldr	r3, [pc, #112]	; (10728 <init_eeprom+0x5d8>)
   106b6:	2201      	movs	r2, #1
   106b8:	709a      	strb	r2, [r3, #2]
		factory_settings_parameter_struct.ENABLE_CURRENT			= true;
   106ba:	4b1b      	ldr	r3, [pc, #108]	; (10728 <init_eeprom+0x5d8>)
   106bc:	2201      	movs	r2, #1
   106be:	705a      	strb	r2, [r3, #1]
		factory_settings_parameter_struct.DUAL_LEVEL			    = false;	//= true;
   106c0:	4b19      	ldr	r3, [pc, #100]	; (10728 <init_eeprom+0x5d8>)
   106c2:	2200      	movs	r2, #0
   106c4:	719a      	strb	r2, [r3, #6]
		factory_settings_parameter_struct.ENABLE_WATER				= false;	//= true;
   106c6:	4b18      	ldr	r3, [pc, #96]	; (10728 <init_eeprom+0x5d8>)
   106c8:	2200      	movs	r2, #0
   106ca:	715a      	strb	r2, [r3, #5]
		factory_settings_parameter_struct.ENABLE_GP					= false;	// = true;
   106cc:	4b16      	ldr	r3, [pc, #88]	; (10728 <init_eeprom+0x5d8>)
   106ce:	2200      	movs	r2, #0
   106d0:	711a      	strb	r2, [r3, #4]
		factory_settings_parameter_struct.ENABLE_M2M				= false;
   106d2:	4b15      	ldr	r3, [pc, #84]	; (10728 <init_eeprom+0x5d8>)
   106d4:	2200      	movs	r2, #0
   106d6:	70da      	strb	r2, [r3, #3]
		factory_settings_parameter_struct.NOLEVELCHANGECALL			= false;
   106d8:	4b13      	ldr	r3, [pc, #76]	; (10728 <init_eeprom+0x5d8>)
   106da:	2200      	movs	r2, #0
   106dc:	71da      	strb	r2, [r3, #7]
		
		factory_settings_parameter_struct.DeviceId_ee				= 0;
   106de:	4b12      	ldr	r3, [pc, #72]	; (10728 <init_eeprom+0x5d8>)
   106e0:	2200      	movs	r2, #0
   106e2:	609a      	str	r2, [r3, #8]
		factory_settings_parameter_struct.dateCode					= 0;
   106e4:	4b10      	ldr	r3, [pc, #64]	; (10728 <init_eeprom+0x5d8>)
   106e6:	2200      	movs	r2, #0
   106e8:	60da      	str	r2, [r3, #12]

		//memset(factory_settings_parameter_struct.DeviceID_ee, '\0', sizeof(factory_settings_parameter_struct.DeviceID_ee));
		//strcpy(factory_settings_parameter_struct.DeviceID_ee,"0000000000");
		
		memcpy(page_data,&factory_settings_parameter_struct,sizeof(factory_settings_parameter_struct));
   106ea:	490f      	ldr	r1, [pc, #60]	; (10728 <init_eeprom+0x5d8>)
   106ec:	4b09      	ldr	r3, [pc, #36]	; (10714 <init_eeprom+0x5c4>)
   106ee:	2210      	movs	r2, #16
   106f0:	0018      	movs	r0, r3
   106f2:	4b09      	ldr	r3, [pc, #36]	; (10718 <init_eeprom+0x5c8>)
   106f4:	4798      	blx	r3
		eeprom_emulator_write_page(FACTORY_SETTING_PARAMETERS_PAGE, page_data);
   106f6:	4b07      	ldr	r3, [pc, #28]	; (10714 <init_eeprom+0x5c4>)
   106f8:	0019      	movs	r1, r3
   106fa:	201b      	movs	r0, #27
   106fc:	4b07      	ldr	r3, [pc, #28]	; (1071c <init_eeprom+0x5cc>)
   106fe:	4798      	blx	r3
		eeprom_emulator_commit_page_buffer();
   10700:	4b07      	ldr	r3, [pc, #28]	; (10720 <init_eeprom+0x5d0>)
   10702:	4798      	blx	r3
	}
}
   10704:	46c0      	nop			; (mov r8, r8)
   10706:	46bd      	mov	sp, r7
   10708:	bd80      	pop	{r7, pc}
   1070a:	46c0      	nop			; (mov r8, r8)
   1070c:	20000654 	.word	0x20000654
   10710:	00002710 	.word	0x00002710
   10714:	20000584 	.word	0x20000584
   10718:	000289ad 	.word	0x000289ad
   1071c:	00023661 	.word	0x00023661
   10720:	00023809 	.word	0x00023809
   10724:	0002376d 	.word	0x0002376d
   10728:	2000062c 	.word	0x2000062c

0001072c <config_mobile_no_ee>:

void config_mobile_no_ee(const uint8_t page_loc,const char *mobile_number)
{
   1072c:	b580      	push	{r7, lr}
   1072e:	b088      	sub	sp, #32
   10730:	af00      	add	r7, sp, #0
   10732:	0002      	movs	r2, r0
   10734:	6039      	str	r1, [r7, #0]
   10736:	1dfb      	adds	r3, r7, #7
   10738:	701a      	strb	r2, [r3, #0]
	struct mobile_no_struct mobile_no;
	memset(page_data, '\0', sizeof(page_data));
   1073a:	4b28      	ldr	r3, [pc, #160]	; (107dc <config_mobile_no_ee+0xb0>)
   1073c:	223c      	movs	r2, #60	; 0x3c
   1073e:	2100      	movs	r1, #0
   10740:	0018      	movs	r0, r3
   10742:	4b27      	ldr	r3, [pc, #156]	; (107e0 <config_mobile_no_ee+0xb4>)
   10744:	4798      	blx	r3
	eeprom_emulator_read_page(page_loc, page_data);
   10746:	4a25      	ldr	r2, [pc, #148]	; (107dc <config_mobile_no_ee+0xb0>)
   10748:	1dfb      	adds	r3, r7, #7
   1074a:	781b      	ldrb	r3, [r3, #0]
   1074c:	0011      	movs	r1, r2
   1074e:	0018      	movs	r0, r3
   10750:	4b24      	ldr	r3, [pc, #144]	; (107e4 <config_mobile_no_ee+0xb8>)
   10752:	4798      	blx	r3
	memcpy(&mobile_no,page_data,sizeof(mobile_no));
   10754:	2308      	movs	r3, #8
   10756:	18fa      	adds	r2, r7, r3
   10758:	4b20      	ldr	r3, [pc, #128]	; (107dc <config_mobile_no_ee+0xb0>)
   1075a:	0010      	movs	r0, r2
   1075c:	0019      	movs	r1, r3
   1075e:	2318      	movs	r3, #24
   10760:	001a      	movs	r2, r3
   10762:	4b21      	ldr	r3, [pc, #132]	; (107e8 <config_mobile_no_ee+0xbc>)
   10764:	4798      	blx	r3
	if (mobile_no.u8tfirst_time_write_ee != 85)
   10766:	2308      	movs	r3, #8
   10768:	18fb      	adds	r3, r7, r3
   1076a:	781b      	ldrb	r3, [r3, #0]
   1076c:	2b55      	cmp	r3, #85	; 0x55
   1076e:	d031      	beq.n	107d4 <config_mobile_no_ee+0xa8>
	{
		mobile_no.u8tfirst_time_write_ee = 85;
   10770:	2308      	movs	r3, #8
   10772:	18fb      	adds	r3, r7, r3
   10774:	2255      	movs	r2, #85	; 0x55
   10776:	701a      	strb	r2, [r3, #0]
		mobile_no.dummy1 = 0;
   10778:	2308      	movs	r3, #8
   1077a:	18fb      	adds	r3, r7, r3
   1077c:	2200      	movs	r2, #0
   1077e:	705a      	strb	r2, [r3, #1]
		mobile_no.dummy2 = 0;
   10780:	2308      	movs	r3, #8
   10782:	18fb      	adds	r3, r7, r3
   10784:	2200      	movs	r2, #0
   10786:	709a      	strb	r2, [r3, #2]
		mobile_no.dummy3 = 0;
   10788:	2308      	movs	r3, #8
   1078a:	18fb      	adds	r3, r7, r3
   1078c:	2200      	movs	r2, #0
   1078e:	70da      	strb	r2, [r3, #3]
		memset(mobile_no.mobile_no_ee, '\0', sizeof(mobile_no.mobile_no_ee));
   10790:	2308      	movs	r3, #8
   10792:	18fb      	adds	r3, r7, r3
   10794:	3304      	adds	r3, #4
   10796:	2214      	movs	r2, #20
   10798:	2100      	movs	r1, #0
   1079a:	0018      	movs	r0, r3
   1079c:	4b10      	ldr	r3, [pc, #64]	; (107e0 <config_mobile_no_ee+0xb4>)
   1079e:	4798      	blx	r3
		strcpy(mobile_no.mobile_no_ee,mobile_number);
   107a0:	683a      	ldr	r2, [r7, #0]
   107a2:	2308      	movs	r3, #8
   107a4:	18fb      	adds	r3, r7, r3
   107a6:	3304      	adds	r3, #4
   107a8:	0011      	movs	r1, r2
   107aa:	0018      	movs	r0, r3
   107ac:	4b0f      	ldr	r3, [pc, #60]	; (107ec <config_mobile_no_ee+0xc0>)
   107ae:	4798      	blx	r3
		
		memcpy(page_data,&mobile_no,sizeof(mobile_no));
   107b0:	4a0a      	ldr	r2, [pc, #40]	; (107dc <config_mobile_no_ee+0xb0>)
   107b2:	2308      	movs	r3, #8
   107b4:	18fb      	adds	r3, r7, r3
   107b6:	0010      	movs	r0, r2
   107b8:	0019      	movs	r1, r3
   107ba:	2318      	movs	r3, #24
   107bc:	001a      	movs	r2, r3
   107be:	4b0a      	ldr	r3, [pc, #40]	; (107e8 <config_mobile_no_ee+0xbc>)
   107c0:	4798      	blx	r3
		eeprom_emulator_write_page(page_loc, page_data);
   107c2:	4a06      	ldr	r2, [pc, #24]	; (107dc <config_mobile_no_ee+0xb0>)
   107c4:	1dfb      	adds	r3, r7, #7
   107c6:	781b      	ldrb	r3, [r3, #0]
   107c8:	0011      	movs	r1, r2
   107ca:	0018      	movs	r0, r3
   107cc:	4b08      	ldr	r3, [pc, #32]	; (107f0 <config_mobile_no_ee+0xc4>)
   107ce:	4798      	blx	r3
		eeprom_emulator_commit_page_buffer();
   107d0:	4b08      	ldr	r3, [pc, #32]	; (107f4 <config_mobile_no_ee+0xc8>)
   107d2:	4798      	blx	r3
	}
}
   107d4:	46c0      	nop			; (mov r8, r8)
   107d6:	46bd      	mov	sp, r7
   107d8:	b008      	add	sp, #32
   107da:	bd80      	pop	{r7, pc}
   107dc:	20000584 	.word	0x20000584
   107e0:	000289e3 	.word	0x000289e3
   107e4:	0002376d 	.word	0x0002376d
   107e8:	000289ad 	.word	0x000289ad
   107ec:	00028c63 	.word	0x00028c63
   107f0:	00023661 	.word	0x00023661
   107f4:	00023809 	.word	0x00023809

000107f8 <getNumbers>:


void getNumbers(char *string)
{
   107f8:	b580      	push	{r7, lr}
   107fa:	b08a      	sub	sp, #40	; 0x28
   107fc:	af00      	add	r7, sp, #0
   107fe:	6078      	str	r0, [r7, #4]
	strcpy(string,"");
   10800:	687b      	ldr	r3, [r7, #4]
   10802:	2200      	movs	r2, #0
   10804:	701a      	strb	r2, [r3, #0]
	
	for(uint8_t i=0;i<user_count_struct.current_user_no_count;i++)
   10806:	2327      	movs	r3, #39	; 0x27
   10808:	18fb      	adds	r3, r7, r3
   1080a:	2200      	movs	r2, #0
   1080c:	701a      	strb	r2, [r3, #0]
   1080e:	e063      	b.n	108d8 <getNumbers+0xe0>
	{
		struct mobile_no_struct mobile_no;
		memset(page_data, '\0', sizeof(page_data));
   10810:	4b37      	ldr	r3, [pc, #220]	; (108f0 <getNumbers+0xf8>)
   10812:	223c      	movs	r2, #60	; 0x3c
   10814:	2100      	movs	r1, #0
   10816:	0018      	movs	r0, r3
   10818:	4b36      	ldr	r3, [pc, #216]	; (108f4 <getNumbers+0xfc>)
   1081a:	4798      	blx	r3
		eeprom_emulator_read_page(USER_1_MOBILE_NUMBER_PAGE+i, page_data);
   1081c:	2327      	movs	r3, #39	; 0x27
   1081e:	18fb      	adds	r3, r7, r3
   10820:	781b      	ldrb	r3, [r3, #0]
   10822:	3309      	adds	r3, #9
   10824:	b2db      	uxtb	r3, r3
   10826:	4a32      	ldr	r2, [pc, #200]	; (108f0 <getNumbers+0xf8>)
   10828:	0011      	movs	r1, r2
   1082a:	0018      	movs	r0, r3
   1082c:	4b32      	ldr	r3, [pc, #200]	; (108f8 <getNumbers+0x100>)
   1082e:	4798      	blx	r3
		memcpy(&mobile_no,page_data,sizeof(mobile_no));
   10830:	230c      	movs	r3, #12
   10832:	18fa      	adds	r2, r7, r3
   10834:	4b2e      	ldr	r3, [pc, #184]	; (108f0 <getNumbers+0xf8>)
   10836:	0010      	movs	r0, r2
   10838:	0019      	movs	r1, r3
   1083a:	2318      	movs	r3, #24
   1083c:	001a      	movs	r2, r3
   1083e:	4b2f      	ldr	r3, [pc, #188]	; (108fc <getNumbers+0x104>)
   10840:	4798      	blx	r3
		if(i==user_count_struct.primaryNumberIndex)
   10842:	4b2f      	ldr	r3, [pc, #188]	; (10900 <getNumbers+0x108>)
   10844:	78db      	ldrb	r3, [r3, #3]
   10846:	2227      	movs	r2, #39	; 0x27
   10848:	18ba      	adds	r2, r7, r2
   1084a:	7812      	ldrb	r2, [r2, #0]
   1084c:	429a      	cmp	r2, r3
   1084e:	d10f      	bne.n	10870 <getNumbers+0x78>
		{
			strcat(string,"P:");
   10850:	687b      	ldr	r3, [r7, #4]
   10852:	0018      	movs	r0, r3
   10854:	4b2b      	ldr	r3, [pc, #172]	; (10904 <getNumbers+0x10c>)
   10856:	4798      	blx	r3
   10858:	0003      	movs	r3, r0
   1085a:	001a      	movs	r2, r3
   1085c:	687b      	ldr	r3, [r7, #4]
   1085e:	189a      	adds	r2, r3, r2
   10860:	4b29      	ldr	r3, [pc, #164]	; (10908 <getNumbers+0x110>)
   10862:	0010      	movs	r0, r2
   10864:	0019      	movs	r1, r3
   10866:	2303      	movs	r3, #3
   10868:	001a      	movs	r2, r3
   1086a:	4b24      	ldr	r3, [pc, #144]	; (108fc <getNumbers+0x104>)
   1086c:	4798      	blx	r3
   1086e:	e015      	b.n	1089c <getNumbers+0xa4>
		}
		else if(i==user_count_struct.secondaryNumberIndex)
   10870:	4b23      	ldr	r3, [pc, #140]	; (10900 <getNumbers+0x108>)
   10872:	791b      	ldrb	r3, [r3, #4]
   10874:	2227      	movs	r2, #39	; 0x27
   10876:	18ba      	adds	r2, r7, r2
   10878:	7812      	ldrb	r2, [r2, #0]
   1087a:	429a      	cmp	r2, r3
   1087c:	d10e      	bne.n	1089c <getNumbers+0xa4>
		{
			strcat(string,"S:");
   1087e:	687b      	ldr	r3, [r7, #4]
   10880:	0018      	movs	r0, r3
   10882:	4b20      	ldr	r3, [pc, #128]	; (10904 <getNumbers+0x10c>)
   10884:	4798      	blx	r3
   10886:	0003      	movs	r3, r0
   10888:	001a      	movs	r2, r3
   1088a:	687b      	ldr	r3, [r7, #4]
   1088c:	189a      	adds	r2, r3, r2
   1088e:	4b1f      	ldr	r3, [pc, #124]	; (1090c <getNumbers+0x114>)
   10890:	0010      	movs	r0, r2
   10892:	0019      	movs	r1, r3
   10894:	2303      	movs	r3, #3
   10896:	001a      	movs	r2, r3
   10898:	4b18      	ldr	r3, [pc, #96]	; (108fc <getNumbers+0x104>)
   1089a:	4798      	blx	r3
		}
		strcat(string,mobile_no.mobile_no_ee);
   1089c:	230c      	movs	r3, #12
   1089e:	18fb      	adds	r3, r7, r3
   108a0:	1d1a      	adds	r2, r3, #4
   108a2:	687b      	ldr	r3, [r7, #4]
   108a4:	0011      	movs	r1, r2
   108a6:	0018      	movs	r0, r3
   108a8:	4b19      	ldr	r3, [pc, #100]	; (10910 <getNumbers+0x118>)
   108aa:	4798      	blx	r3
		strcat(string,"\n");
   108ac:	687b      	ldr	r3, [r7, #4]
   108ae:	0018      	movs	r0, r3
   108b0:	4b14      	ldr	r3, [pc, #80]	; (10904 <getNumbers+0x10c>)
   108b2:	4798      	blx	r3
   108b4:	0003      	movs	r3, r0
   108b6:	001a      	movs	r2, r3
   108b8:	687b      	ldr	r3, [r7, #4]
   108ba:	189a      	adds	r2, r3, r2
   108bc:	4b15      	ldr	r3, [pc, #84]	; (10914 <getNumbers+0x11c>)
   108be:	0010      	movs	r0, r2
   108c0:	0019      	movs	r1, r3
   108c2:	2302      	movs	r3, #2
   108c4:	001a      	movs	r2, r3
   108c6:	4b0d      	ldr	r3, [pc, #52]	; (108fc <getNumbers+0x104>)
   108c8:	4798      	blx	r3
	for(uint8_t i=0;i<user_count_struct.current_user_no_count;i++)
   108ca:	2327      	movs	r3, #39	; 0x27
   108cc:	18fb      	adds	r3, r7, r3
   108ce:	781a      	ldrb	r2, [r3, #0]
   108d0:	2327      	movs	r3, #39	; 0x27
   108d2:	18fb      	adds	r3, r7, r3
   108d4:	3201      	adds	r2, #1
   108d6:	701a      	strb	r2, [r3, #0]
   108d8:	4b09      	ldr	r3, [pc, #36]	; (10900 <getNumbers+0x108>)
   108da:	789b      	ldrb	r3, [r3, #2]
   108dc:	2227      	movs	r2, #39	; 0x27
   108de:	18ba      	adds	r2, r7, r2
   108e0:	7812      	ldrb	r2, [r2, #0]
   108e2:	429a      	cmp	r2, r3
   108e4:	d394      	bcc.n	10810 <getNumbers+0x18>
	}
}
   108e6:	46c0      	nop			; (mov r8, r8)
   108e8:	46bd      	mov	sp, r7
   108ea:	b00a      	add	sp, #40	; 0x28
   108ec:	bd80      	pop	{r7, pc}
   108ee:	46c0      	nop			; (mov r8, r8)
   108f0:	20000584 	.word	0x20000584
   108f4:	000289e3 	.word	0x000289e3
   108f8:	0002376d 	.word	0x0002376d
   108fc:	000289ad 	.word	0x000289ad
   10900:	20000614 	.word	0x20000614
   10904:	00028c73 	.word	0x00028c73
   10908:	00029674 	.word	0x00029674
   1090c:	00029678 	.word	0x00029678
   10910:	00028c2d 	.word	0x00028c2d
   10914:	0002967c 	.word	0x0002967c

00010918 <getIndexedNumber>:

char *getIndexedNumber(char *IndexNo, uint8_t index)
{
   10918:	b580      	push	{r7, lr}
   1091a:	b088      	sub	sp, #32
   1091c:	af00      	add	r7, sp, #0
   1091e:	6078      	str	r0, [r7, #4]
   10920:	000a      	movs	r2, r1
   10922:	1cfb      	adds	r3, r7, #3
   10924:	701a      	strb	r2, [r3, #0]
	strcpy(IndexNo,"");
   10926:	687b      	ldr	r3, [r7, #4]
   10928:	2200      	movs	r2, #0
   1092a:	701a      	strb	r2, [r3, #0]
	if(user_count_struct.current_user_no_count>index)
   1092c:	4b15      	ldr	r3, [pc, #84]	; (10984 <getIndexedNumber+0x6c>)
   1092e:	789b      	ldrb	r3, [r3, #2]
   10930:	1cfa      	adds	r2, r7, #3
   10932:	7812      	ldrb	r2, [r2, #0]
   10934:	429a      	cmp	r2, r3
   10936:	d21f      	bcs.n	10978 <getIndexedNumber+0x60>
	{
		struct mobile_no_struct mobile_no;
		memset(page_data, '\0', sizeof(page_data));
   10938:	4b13      	ldr	r3, [pc, #76]	; (10988 <getIndexedNumber+0x70>)
   1093a:	223c      	movs	r2, #60	; 0x3c
   1093c:	2100      	movs	r1, #0
   1093e:	0018      	movs	r0, r3
   10940:	4b12      	ldr	r3, [pc, #72]	; (1098c <getIndexedNumber+0x74>)
   10942:	4798      	blx	r3
		eeprom_emulator_read_page(USER_1_MOBILE_NUMBER_PAGE+index, page_data);
   10944:	1cfb      	adds	r3, r7, #3
   10946:	781b      	ldrb	r3, [r3, #0]
   10948:	3309      	adds	r3, #9
   1094a:	b2db      	uxtb	r3, r3
   1094c:	4a0e      	ldr	r2, [pc, #56]	; (10988 <getIndexedNumber+0x70>)
   1094e:	0011      	movs	r1, r2
   10950:	0018      	movs	r0, r3
   10952:	4b0f      	ldr	r3, [pc, #60]	; (10990 <getIndexedNumber+0x78>)
   10954:	4798      	blx	r3
		//eeprom_emulator_read_page(USER_1_MOBILE_NUMBER_PAGE+index-1, page_data);
		memcpy(&mobile_no,page_data,sizeof(mobile_no));
   10956:	2308      	movs	r3, #8
   10958:	18fa      	adds	r2, r7, r3
   1095a:	4b0b      	ldr	r3, [pc, #44]	; (10988 <getIndexedNumber+0x70>)
   1095c:	0010      	movs	r0, r2
   1095e:	0019      	movs	r1, r3
   10960:	2318      	movs	r3, #24
   10962:	001a      	movs	r2, r3
   10964:	4b0b      	ldr	r3, [pc, #44]	; (10994 <getIndexedNumber+0x7c>)
   10966:	4798      	blx	r3
		strcat(IndexNo,mobile_no.mobile_no_ee);
   10968:	2308      	movs	r3, #8
   1096a:	18fb      	adds	r3, r7, r3
   1096c:	1d1a      	adds	r2, r3, #4
   1096e:	687b      	ldr	r3, [r7, #4]
   10970:	0011      	movs	r1, r2
   10972:	0018      	movs	r0, r3
   10974:	4b08      	ldr	r3, [pc, #32]	; (10998 <getIndexedNumber+0x80>)
   10976:	4798      	blx	r3
	}
	return IndexNo;
   10978:	687b      	ldr	r3, [r7, #4]
}
   1097a:	0018      	movs	r0, r3
   1097c:	46bd      	mov	sp, r7
   1097e:	b008      	add	sp, #32
   10980:	bd80      	pop	{r7, pc}
   10982:	46c0      	nop			; (mov r8, r8)
   10984:	20000614 	.word	0x20000614
   10988:	20000584 	.word	0x20000584
   1098c:	000289e3 	.word	0x000289e3
   10990:	0002376d 	.word	0x0002376d
   10994:	000289ad 	.word	0x000289ad
   10998:	00028c2d 	.word	0x00028c2d

0001099c <isPrimaryNumber>:

bool isPrimaryNumber(char *number)
{
   1099c:	b580      	push	{r7, lr}
   1099e:	b088      	sub	sp, #32
   109a0:	af00      	add	r7, sp, #0
   109a2:	6078      	str	r0, [r7, #4]
	if(user_count_struct.current_user_no_count > 0)
   109a4:	4b14      	ldr	r3, [pc, #80]	; (109f8 <isPrimaryNumber+0x5c>)
   109a6:	789b      	ldrb	r3, [r3, #2]
   109a8:	2b00      	cmp	r3, #0
   109aa:	d020      	beq.n	109ee <isPrimaryNumber+0x52>
	{
		char primaryNumber[20] = {0};
   109ac:	230c      	movs	r3, #12
   109ae:	18fb      	adds	r3, r7, r3
   109b0:	0018      	movs	r0, r3
   109b2:	2314      	movs	r3, #20
   109b4:	001a      	movs	r2, r3
   109b6:	2100      	movs	r1, #0
   109b8:	4b10      	ldr	r3, [pc, #64]	; (109fc <isPrimaryNumber+0x60>)
   109ba:	4798      	blx	r3
		getIndexedNumber(&primaryNumber,user_count_struct.primaryNumberIndex);
   109bc:	4b0e      	ldr	r3, [pc, #56]	; (109f8 <isPrimaryNumber+0x5c>)
   109be:	78da      	ldrb	r2, [r3, #3]
   109c0:	230c      	movs	r3, #12
   109c2:	18fb      	adds	r3, r7, r3
   109c4:	0011      	movs	r1, r2
   109c6:	0018      	movs	r0, r3
   109c8:	4b0d      	ldr	r3, [pc, #52]	; (10a00 <isPrimaryNumber+0x64>)
   109ca:	4798      	blx	r3
		if(strstr(number,primaryNumber))
   109cc:	230c      	movs	r3, #12
   109ce:	18fa      	adds	r2, r7, r3
   109d0:	687b      	ldr	r3, [r7, #4]
   109d2:	0011      	movs	r1, r2
   109d4:	0018      	movs	r0, r3
   109d6:	4b0b      	ldr	r3, [pc, #44]	; (10a04 <isPrimaryNumber+0x68>)
   109d8:	4798      	blx	r3
   109da:	1e03      	subs	r3, r0, #0
   109dc:	d001      	beq.n	109e2 <isPrimaryNumber+0x46>
		{
			return true;
   109de:	2301      	movs	r3, #1
   109e0:	e006      	b.n	109f0 <isPrimaryNumber+0x54>
		}
		else
		{
			return isAlterNumber(number);
   109e2:	687b      	ldr	r3, [r7, #4]
   109e4:	0018      	movs	r0, r3
   109e6:	4b08      	ldr	r3, [pc, #32]	; (10a08 <isPrimaryNumber+0x6c>)
   109e8:	4798      	blx	r3
   109ea:	0003      	movs	r3, r0
   109ec:	e000      	b.n	109f0 <isPrimaryNumber+0x54>
		//else
		//{
		//return isAlterNumber(number);
		//}
	}
	return false;
   109ee:	2300      	movs	r3, #0
}
   109f0:	0018      	movs	r0, r3
   109f2:	46bd      	mov	sp, r7
   109f4:	b008      	add	sp, #32
   109f6:	bd80      	pop	{r7, pc}
   109f8:	20000614 	.word	0x20000614
   109fc:	000289e3 	.word	0x000289e3
   10a00:	00010919 	.word	0x00010919
   10a04:	00028ca3 	.word	0x00028ca3
   10a08:	00010a0d 	.word	0x00010a0d

00010a0c <isAlterNumber>:

bool isAlterNumber(char *number)
{
   10a0c:	b580      	push	{r7, lr}
   10a0e:	b082      	sub	sp, #8
   10a10:	af00      	add	r7, sp, #0
   10a12:	6078      	str	r0, [r7, #4]
	if(user_count_struct.current_user_no_count > 0)
   10a14:	4b0b      	ldr	r3, [pc, #44]	; (10a44 <isAlterNumber+0x38>)
   10a16:	789b      	ldrb	r3, [r3, #2]
   10a18:	2b00      	cmp	r3, #0
   10a1a:	d00d      	beq.n	10a38 <isAlterNumber+0x2c>
	{
		if ((alternateNumber_struct.alterNumberPresent) && (strstr(number, alternateNumber_struct.alternateNumber_ee)))
   10a1c:	4b0a      	ldr	r3, [pc, #40]	; (10a48 <isAlterNumber+0x3c>)
   10a1e:	789b      	ldrb	r3, [r3, #2]
   10a20:	2b00      	cmp	r3, #0
   10a22:	d009      	beq.n	10a38 <isAlterNumber+0x2c>
   10a24:	4a09      	ldr	r2, [pc, #36]	; (10a4c <isAlterNumber+0x40>)
   10a26:	687b      	ldr	r3, [r7, #4]
   10a28:	0011      	movs	r1, r2
   10a2a:	0018      	movs	r0, r3
   10a2c:	4b08      	ldr	r3, [pc, #32]	; (10a50 <isAlterNumber+0x44>)
   10a2e:	4798      	blx	r3
   10a30:	1e03      	subs	r3, r0, #0
   10a32:	d001      	beq.n	10a38 <isAlterNumber+0x2c>
		{
			return true;
   10a34:	2301      	movs	r3, #1
   10a36:	e000      	b.n	10a3a <isAlterNumber+0x2e>
		}
	}
	return false;
   10a38:	2300      	movs	r3, #0
}
   10a3a:	0018      	movs	r0, r3
   10a3c:	46bd      	mov	sp, r7
   10a3e:	b002      	add	sp, #8
   10a40:	bd80      	pop	{r7, pc}
   10a42:	46c0      	nop			; (mov r8, r8)
   10a44:	20000614 	.word	0x20000614
   10a48:	2000063c 	.word	0x2000063c
   10a4c:	20000640 	.word	0x20000640
   10a50:	00028ca3 	.word	0x00028ca3

00010a54 <isM2MNumber>:

bool isM2MNumber(char *number)
{
   10a54:	b580      	push	{r7, lr}
   10a56:	b082      	sub	sp, #8
   10a58:	af00      	add	r7, sp, #0
   10a5a:	6078      	str	r0, [r7, #4]
	if ((m2m_Numbers_struct.m2mPresent) && strstr(number,m2m_Numbers_struct.m2mNumber_ee))
   10a5c:	4b09      	ldr	r3, [pc, #36]	; (10a84 <isM2MNumber+0x30>)
   10a5e:	785b      	ldrb	r3, [r3, #1]
   10a60:	2b00      	cmp	r3, #0
   10a62:	d009      	beq.n	10a78 <isM2MNumber+0x24>
   10a64:	4a08      	ldr	r2, [pc, #32]	; (10a88 <isM2MNumber+0x34>)
   10a66:	687b      	ldr	r3, [r7, #4]
   10a68:	0011      	movs	r1, r2
   10a6a:	0018      	movs	r0, r3
   10a6c:	4b07      	ldr	r3, [pc, #28]	; (10a8c <isM2MNumber+0x38>)
   10a6e:	4798      	blx	r3
   10a70:	1e03      	subs	r3, r0, #0
   10a72:	d001      	beq.n	10a78 <isM2MNumber+0x24>
	{
		return true;
   10a74:	2301      	movs	r3, #1
   10a76:	e000      	b.n	10a7a <isM2MNumber+0x26>
	}
	return false;
   10a78:	2300      	movs	r3, #0
}
   10a7a:	0018      	movs	r0, r3
   10a7c:	46bd      	mov	sp, r7
   10a7e:	b002      	add	sp, #8
   10a80:	bd80      	pop	{r7, pc}
   10a82:	46c0      	nop			; (mov r8, r8)
   10a84:	20000554 	.word	0x20000554
   10a88:	2000055c 	.word	0x2000055c
   10a8c:	00028ca3 	.word	0x00028ca3

00010a90 <isM2MRemoteNumber>:

bool isM2MRemoteNumber(char *number)
{
   10a90:	b580      	push	{r7, lr}
   10a92:	b082      	sub	sp, #8
   10a94:	af00      	add	r7, sp, #0
   10a96:	6078      	str	r0, [r7, #4]
	if ((m2m_Numbers_struct.m2mRemotePresent) && strstr(number,m2m_Numbers_struct.m2mremoteNumber_ee))
   10a98:	4b09      	ldr	r3, [pc, #36]	; (10ac0 <isM2MRemoteNumber+0x30>)
   10a9a:	78db      	ldrb	r3, [r3, #3]
   10a9c:	2b00      	cmp	r3, #0
   10a9e:	d009      	beq.n	10ab4 <isM2MRemoteNumber+0x24>
   10aa0:	4a08      	ldr	r2, [pc, #32]	; (10ac4 <isM2MRemoteNumber+0x34>)
   10aa2:	687b      	ldr	r3, [r7, #4]
   10aa4:	0011      	movs	r1, r2
   10aa6:	0018      	movs	r0, r3
   10aa8:	4b07      	ldr	r3, [pc, #28]	; (10ac8 <isM2MRemoteNumber+0x38>)
   10aaa:	4798      	blx	r3
   10aac:	1e03      	subs	r3, r0, #0
   10aae:	d001      	beq.n	10ab4 <isM2MRemoteNumber+0x24>
	{
		return true;
   10ab0:	2301      	movs	r3, #1
   10ab2:	e000      	b.n	10ab6 <isM2MRemoteNumber+0x26>
	}
	return false;
   10ab4:	2300      	movs	r3, #0
}
   10ab6:	0018      	movs	r0, r3
   10ab8:	46bd      	mov	sp, r7
   10aba:	b002      	add	sp, #8
   10abc:	bd80      	pop	{r7, pc}
   10abe:	46c0      	nop			; (mov r8, r8)
   10ac0:	20000554 	.word	0x20000554
   10ac4:	20000570 	.word	0x20000570
   10ac8:	00028ca3 	.word	0x00028ca3

00010acc <getM2MNumber>:

char *getM2MNumber(char *m2mNo)
{
   10acc:	b580      	push	{r7, lr}
   10ace:	b082      	sub	sp, #8
   10ad0:	af00      	add	r7, sp, #0
   10ad2:	6078      	str	r0, [r7, #4]
	if (m2m_Numbers_struct.m2mPresent)
   10ad4:	4b09      	ldr	r3, [pc, #36]	; (10afc <getM2MNumber+0x30>)
   10ad6:	785b      	ldrb	r3, [r3, #1]
   10ad8:	2b00      	cmp	r3, #0
   10ada:	d006      	beq.n	10aea <getM2MNumber+0x1e>
	{
		//strstr(m2mNo,m2m_Numbers_struct.m2mNumber_ee);
		strcpy(m2mNo,m2m_Numbers_struct.m2mNumber_ee);
   10adc:	4a08      	ldr	r2, [pc, #32]	; (10b00 <getM2MNumber+0x34>)
   10ade:	687b      	ldr	r3, [r7, #4]
   10ae0:	0011      	movs	r1, r2
   10ae2:	0018      	movs	r0, r3
   10ae4:	4b07      	ldr	r3, [pc, #28]	; (10b04 <getM2MNumber+0x38>)
   10ae6:	4798      	blx	r3
   10ae8:	e002      	b.n	10af0 <getM2MNumber+0x24>
	}
	else
	{
		strcpy(m2mNo,"");
   10aea:	687b      	ldr	r3, [r7, #4]
   10aec:	2200      	movs	r2, #0
   10aee:	701a      	strb	r2, [r3, #0]
	}
	return m2mNo;
   10af0:	687b      	ldr	r3, [r7, #4]
}
   10af2:	0018      	movs	r0, r3
   10af4:	46bd      	mov	sp, r7
   10af6:	b002      	add	sp, #8
   10af8:	bd80      	pop	{r7, pc}
   10afa:	46c0      	nop			; (mov r8, r8)
   10afc:	20000554 	.word	0x20000554
   10b00:	2000055c 	.word	0x2000055c
   10b04:	00028c63 	.word	0x00028c63

00010b08 <getM2MRemoteNumber>:

char *getM2MRemoteNumber(char *m2mNoRemotNo)
{
   10b08:	b580      	push	{r7, lr}
   10b0a:	b082      	sub	sp, #8
   10b0c:	af00      	add	r7, sp, #0
   10b0e:	6078      	str	r0, [r7, #4]
	if (m2m_Numbers_struct.m2mRemotePresent)
   10b10:	4b09      	ldr	r3, [pc, #36]	; (10b38 <getM2MRemoteNumber+0x30>)
   10b12:	78db      	ldrb	r3, [r3, #3]
   10b14:	2b00      	cmp	r3, #0
   10b16:	d006      	beq.n	10b26 <getM2MRemoteNumber+0x1e>
	{
		strcpy(m2mNoRemotNo,m2m_Numbers_struct.m2mremoteNumber_ee);
   10b18:	4a08      	ldr	r2, [pc, #32]	; (10b3c <getM2MRemoteNumber+0x34>)
   10b1a:	687b      	ldr	r3, [r7, #4]
   10b1c:	0011      	movs	r1, r2
   10b1e:	0018      	movs	r0, r3
   10b20:	4b07      	ldr	r3, [pc, #28]	; (10b40 <getM2MRemoteNumber+0x38>)
   10b22:	4798      	blx	r3
   10b24:	e002      	b.n	10b2c <getM2MRemoteNumber+0x24>
	}
	else
	{
		strcpy(m2mNoRemotNo,"");
   10b26:	687b      	ldr	r3, [r7, #4]
   10b28:	2200      	movs	r2, #0
   10b2a:	701a      	strb	r2, [r3, #0]
	}
	return m2mNoRemotNo;
   10b2c:	687b      	ldr	r3, [r7, #4]
}
   10b2e:	0018      	movs	r0, r3
   10b30:	46bd      	mov	sp, r7
   10b32:	b002      	add	sp, #8
   10b34:	bd80      	pop	{r7, pc}
   10b36:	46c0      	nop			; (mov r8, r8)
   10b38:	20000554 	.word	0x20000554
   10b3c:	20000570 	.word	0x20000570
   10b40:	00028c63 	.word	0x00028c63

00010b44 <setM2MVerify>:

void setM2MVerify(bool flag)
{
   10b44:	b580      	push	{r7, lr}
   10b46:	b082      	sub	sp, #8
   10b48:	af00      	add	r7, sp, #0
   10b4a:	0002      	movs	r2, r0
   10b4c:	1dfb      	adds	r3, r7, #7
   10b4e:	701a      	strb	r2, [r3, #0]
	m2m_Numbers_struct.m2mVerified = (uint8_t)flag;
   10b50:	1dfb      	adds	r3, r7, #7
   10b52:	781a      	ldrb	r2, [r3, #0]
   10b54:	4b0a      	ldr	r3, [pc, #40]	; (10b80 <setM2MVerify+0x3c>)
   10b56:	709a      	strb	r2, [r3, #2]
	memcpy(page_data,&m2m_Numbers_struct,sizeof(m2m_Numbers_struct));
   10b58:	4a0a      	ldr	r2, [pc, #40]	; (10b84 <setM2MVerify+0x40>)
   10b5a:	4b09      	ldr	r3, [pc, #36]	; (10b80 <setM2MVerify+0x3c>)
   10b5c:	0010      	movs	r0, r2
   10b5e:	0019      	movs	r1, r3
   10b60:	2330      	movs	r3, #48	; 0x30
   10b62:	001a      	movs	r2, r3
   10b64:	4b08      	ldr	r3, [pc, #32]	; (10b88 <setM2MVerify+0x44>)
   10b66:	4798      	blx	r3
	eeprom_emulator_write_page(M2M_NUMBERS_PAGE, page_data);
   10b68:	4b06      	ldr	r3, [pc, #24]	; (10b84 <setM2MVerify+0x40>)
   10b6a:	0019      	movs	r1, r3
   10b6c:	2019      	movs	r0, #25
   10b6e:	4b07      	ldr	r3, [pc, #28]	; (10b8c <setM2MVerify+0x48>)
   10b70:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   10b72:	4b07      	ldr	r3, [pc, #28]	; (10b90 <setM2MVerify+0x4c>)
   10b74:	4798      	blx	r3
}
   10b76:	46c0      	nop			; (mov r8, r8)
   10b78:	46bd      	mov	sp, r7
   10b7a:	b002      	add	sp, #8
   10b7c:	bd80      	pop	{r7, pc}
   10b7e:	46c0      	nop			; (mov r8, r8)
   10b80:	20000554 	.word	0x20000554
   10b84:	20000584 	.word	0x20000584
   10b88:	000289ad 	.word	0x000289ad
   10b8c:	00023661 	.word	0x00023661
   10b90:	00023809 	.word	0x00023809

00010b94 <setM2MRemoteVerified>:

void setM2MRemoteVerified(bool flag)
{
   10b94:	b580      	push	{r7, lr}
   10b96:	b082      	sub	sp, #8
   10b98:	af00      	add	r7, sp, #0
   10b9a:	0002      	movs	r2, r0
   10b9c:	1dfb      	adds	r3, r7, #7
   10b9e:	701a      	strb	r2, [r3, #0]
	m2m_Numbers_struct.m2mRemoteVerified = (uint8_t)flag;
   10ba0:	1dfb      	adds	r3, r7, #7
   10ba2:	781a      	ldrb	r2, [r3, #0]
   10ba4:	4b0a      	ldr	r3, [pc, #40]	; (10bd0 <setM2MRemoteVerified+0x3c>)
   10ba6:	711a      	strb	r2, [r3, #4]
	memcpy(page_data,&m2m_Numbers_struct,sizeof(m2m_Numbers_struct));
   10ba8:	4a0a      	ldr	r2, [pc, #40]	; (10bd4 <setM2MRemoteVerified+0x40>)
   10baa:	4b09      	ldr	r3, [pc, #36]	; (10bd0 <setM2MRemoteVerified+0x3c>)
   10bac:	0010      	movs	r0, r2
   10bae:	0019      	movs	r1, r3
   10bb0:	2330      	movs	r3, #48	; 0x30
   10bb2:	001a      	movs	r2, r3
   10bb4:	4b08      	ldr	r3, [pc, #32]	; (10bd8 <setM2MRemoteVerified+0x44>)
   10bb6:	4798      	blx	r3
	eeprom_emulator_write_page(M2M_NUMBERS_PAGE, page_data);
   10bb8:	4b06      	ldr	r3, [pc, #24]	; (10bd4 <setM2MRemoteVerified+0x40>)
   10bba:	0019      	movs	r1, r3
   10bbc:	2019      	movs	r0, #25
   10bbe:	4b07      	ldr	r3, [pc, #28]	; (10bdc <setM2MRemoteVerified+0x48>)
   10bc0:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   10bc2:	4b07      	ldr	r3, [pc, #28]	; (10be0 <setM2MRemoteVerified+0x4c>)
   10bc4:	4798      	blx	r3
}
   10bc6:	46c0      	nop			; (mov r8, r8)
   10bc8:	46bd      	mov	sp, r7
   10bca:	b002      	add	sp, #8
   10bcc:	bd80      	pop	{r7, pc}
   10bce:	46c0      	nop			; (mov r8, r8)
   10bd0:	20000554 	.word	0x20000554
   10bd4:	20000584 	.word	0x20000584
   10bd8:	000289ad 	.word	0x000289ad
   10bdc:	00023661 	.word	0x00023661
   10be0:	00023809 	.word	0x00023809

00010be4 <saveM2MSettings>:

void saveM2MSettings(bool flag)
{
   10be4:	b580      	push	{r7, lr}
   10be6:	b082      	sub	sp, #8
   10be8:	af00      	add	r7, sp, #0
   10bea:	0002      	movs	r2, r0
   10bec:	1dfb      	adds	r3, r7, #7
   10bee:	701a      	strb	r2, [r3, #0]
	m2m_Numbers_struct.m2mSetting = (uint8_t)flag;
   10bf0:	1dfb      	adds	r3, r7, #7
   10bf2:	781a      	ldrb	r2, [r3, #0]
   10bf4:	4b0f      	ldr	r3, [pc, #60]	; (10c34 <saveM2MSettings+0x50>)
   10bf6:	715a      	strb	r2, [r3, #5]
	if(!flag)					// m2m turned off
   10bf8:	1dfb      	adds	r3, r7, #7
   10bfa:	781b      	ldrb	r3, [r3, #0]
   10bfc:	2201      	movs	r2, #1
   10bfe:	4053      	eors	r3, r2
   10c00:	b2db      	uxtb	r3, r3
   10c02:	2b00      	cmp	r3, #0
   10c04:	d002      	beq.n	10c0c <saveM2MSettings+0x28>
	{
		m2m_Numbers_struct.m2mRemoteVerified=false;
   10c06:	4b0b      	ldr	r3, [pc, #44]	; (10c34 <saveM2MSettings+0x50>)
   10c08:	2200      	movs	r2, #0
   10c0a:	711a      	strb	r2, [r3, #4]
	}
	memcpy(page_data,&m2m_Numbers_struct,sizeof(m2m_Numbers_struct));
   10c0c:	4a0a      	ldr	r2, [pc, #40]	; (10c38 <saveM2MSettings+0x54>)
   10c0e:	4b09      	ldr	r3, [pc, #36]	; (10c34 <saveM2MSettings+0x50>)
   10c10:	0010      	movs	r0, r2
   10c12:	0019      	movs	r1, r3
   10c14:	2330      	movs	r3, #48	; 0x30
   10c16:	001a      	movs	r2, r3
   10c18:	4b08      	ldr	r3, [pc, #32]	; (10c3c <saveM2MSettings+0x58>)
   10c1a:	4798      	blx	r3
	eeprom_emulator_write_page(M2M_NUMBERS_PAGE, page_data);
   10c1c:	4b06      	ldr	r3, [pc, #24]	; (10c38 <saveM2MSettings+0x54>)
   10c1e:	0019      	movs	r1, r3
   10c20:	2019      	movs	r0, #25
   10c22:	4b07      	ldr	r3, [pc, #28]	; (10c40 <saveM2MSettings+0x5c>)
   10c24:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   10c26:	4b07      	ldr	r3, [pc, #28]	; (10c44 <saveM2MSettings+0x60>)
   10c28:	4798      	blx	r3
}
   10c2a:	46c0      	nop			; (mov r8, r8)
   10c2c:	46bd      	mov	sp, r7
   10c2e:	b002      	add	sp, #8
   10c30:	bd80      	pop	{r7, pc}
   10c32:	46c0      	nop			; (mov r8, r8)
   10c34:	20000554 	.word	0x20000554
   10c38:	20000584 	.word	0x20000584
   10c3c:	000289ad 	.word	0x000289ad
   10c40:	00023661 	.word	0x00023661
   10c44:	00023809 	.word	0x00023809

00010c48 <addM2MNumber>:

void addM2MNumber(char *no)
{
   10c48:	b580      	push	{r7, lr}
   10c4a:	b082      	sub	sp, #8
   10c4c:	af00      	add	r7, sp, #0
   10c4e:	6078      	str	r0, [r7, #4]
	m2m_Numbers_struct.m2mPresent = true;
   10c50:	4b0f      	ldr	r3, [pc, #60]	; (10c90 <addM2MNumber+0x48>)
   10c52:	2201      	movs	r2, #1
   10c54:	705a      	strb	r2, [r3, #1]
	strcpy(m2m_Numbers_struct.m2mNumber_ee,no);
   10c56:	687a      	ldr	r2, [r7, #4]
   10c58:	4b0e      	ldr	r3, [pc, #56]	; (10c94 <addM2MNumber+0x4c>)
   10c5a:	0011      	movs	r1, r2
   10c5c:	0018      	movs	r0, r3
   10c5e:	4b0e      	ldr	r3, [pc, #56]	; (10c98 <addM2MNumber+0x50>)
   10c60:	4798      	blx	r3
	memcpy(page_data,&m2m_Numbers_struct,sizeof(m2m_Numbers_struct));
   10c62:	4a0e      	ldr	r2, [pc, #56]	; (10c9c <addM2MNumber+0x54>)
   10c64:	4b0a      	ldr	r3, [pc, #40]	; (10c90 <addM2MNumber+0x48>)
   10c66:	0010      	movs	r0, r2
   10c68:	0019      	movs	r1, r3
   10c6a:	2330      	movs	r3, #48	; 0x30
   10c6c:	001a      	movs	r2, r3
   10c6e:	4b0c      	ldr	r3, [pc, #48]	; (10ca0 <addM2MNumber+0x58>)
   10c70:	4798      	blx	r3
	eeprom_emulator_write_page(M2M_NUMBERS_PAGE, page_data);
   10c72:	4b0a      	ldr	r3, [pc, #40]	; (10c9c <addM2MNumber+0x54>)
   10c74:	0019      	movs	r1, r3
   10c76:	2019      	movs	r0, #25
   10c78:	4b0a      	ldr	r3, [pc, #40]	; (10ca4 <addM2MNumber+0x5c>)
   10c7a:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   10c7c:	4b0a      	ldr	r3, [pc, #40]	; (10ca8 <addM2MNumber+0x60>)
   10c7e:	4798      	blx	r3
	setM2MVerify(false);
   10c80:	2000      	movs	r0, #0
   10c82:	4b0a      	ldr	r3, [pc, #40]	; (10cac <addM2MNumber+0x64>)
   10c84:	4798      	blx	r3
}
   10c86:	46c0      	nop			; (mov r8, r8)
   10c88:	46bd      	mov	sp, r7
   10c8a:	b002      	add	sp, #8
   10c8c:	bd80      	pop	{r7, pc}
   10c8e:	46c0      	nop			; (mov r8, r8)
   10c90:	20000554 	.word	0x20000554
   10c94:	2000055c 	.word	0x2000055c
   10c98:	00028c63 	.word	0x00028c63
   10c9c:	20000584 	.word	0x20000584
   10ca0:	000289ad 	.word	0x000289ad
   10ca4:	00023661 	.word	0x00023661
   10ca8:	00023809 	.word	0x00023809
   10cac:	00010b45 	.word	0x00010b45

00010cb0 <addM2MRemoteNumber>:

void addM2MRemoteNumber(char *no)
{
   10cb0:	b580      	push	{r7, lr}
   10cb2:	b082      	sub	sp, #8
   10cb4:	af00      	add	r7, sp, #0
   10cb6:	6078      	str	r0, [r7, #4]
	m2m_Numbers_struct.m2mRemotePresent = true;
   10cb8:	4b10      	ldr	r3, [pc, #64]	; (10cfc <addM2MRemoteNumber+0x4c>)
   10cba:	2201      	movs	r2, #1
   10cbc:	70da      	strb	r2, [r3, #3]
	strcpy(m2m_Numbers_struct.m2mremoteNumber_ee,no);
   10cbe:	687a      	ldr	r2, [r7, #4]
   10cc0:	4b0f      	ldr	r3, [pc, #60]	; (10d00 <addM2MRemoteNumber+0x50>)
   10cc2:	0011      	movs	r1, r2
   10cc4:	0018      	movs	r0, r3
   10cc6:	4b0f      	ldr	r3, [pc, #60]	; (10d04 <addM2MRemoteNumber+0x54>)
   10cc8:	4798      	blx	r3
	memcpy(page_data,&m2m_Numbers_struct,sizeof(m2m_Numbers_struct));
   10cca:	4a0f      	ldr	r2, [pc, #60]	; (10d08 <addM2MRemoteNumber+0x58>)
   10ccc:	4b0b      	ldr	r3, [pc, #44]	; (10cfc <addM2MRemoteNumber+0x4c>)
   10cce:	0010      	movs	r0, r2
   10cd0:	0019      	movs	r1, r3
   10cd2:	2330      	movs	r3, #48	; 0x30
   10cd4:	001a      	movs	r2, r3
   10cd6:	4b0d      	ldr	r3, [pc, #52]	; (10d0c <addM2MRemoteNumber+0x5c>)
   10cd8:	4798      	blx	r3
	eeprom_emulator_write_page(M2M_NUMBERS_PAGE, page_data);
   10cda:	4b0b      	ldr	r3, [pc, #44]	; (10d08 <addM2MRemoteNumber+0x58>)
   10cdc:	0019      	movs	r1, r3
   10cde:	2019      	movs	r0, #25
   10ce0:	4b0b      	ldr	r3, [pc, #44]	; (10d10 <addM2MRemoteNumber+0x60>)
   10ce2:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   10ce4:	4b0b      	ldr	r3, [pc, #44]	; (10d14 <addM2MRemoteNumber+0x64>)
   10ce6:	4798      	blx	r3
	setM2MRemoteVerified(false);
   10ce8:	2000      	movs	r0, #0
   10cea:	4b0b      	ldr	r3, [pc, #44]	; (10d18 <addM2MRemoteNumber+0x68>)
   10cec:	4798      	blx	r3
	saveM2MSettings(false);
   10cee:	2000      	movs	r0, #0
   10cf0:	4b0a      	ldr	r3, [pc, #40]	; (10d1c <addM2MRemoteNumber+0x6c>)
   10cf2:	4798      	blx	r3
}
   10cf4:	46c0      	nop			; (mov r8, r8)
   10cf6:	46bd      	mov	sp, r7
   10cf8:	b002      	add	sp, #8
   10cfa:	bd80      	pop	{r7, pc}
   10cfc:	20000554 	.word	0x20000554
   10d00:	20000570 	.word	0x20000570
   10d04:	00028c63 	.word	0x00028c63
   10d08:	20000584 	.word	0x20000584
   10d0c:	000289ad 	.word	0x000289ad
   10d10:	00023661 	.word	0x00023661
   10d14:	00023809 	.word	0x00023809
   10d18:	00010b95 	.word	0x00010b95
   10d1c:	00010be5 	.word	0x00010be5

00010d20 <getActiveNumber>:

char *getActiveNumber(char *ActiveNo)
{
   10d20:	b580      	push	{r7, lr}
   10d22:	b08e      	sub	sp, #56	; 0x38
   10d24:	af00      	add	r7, sp, #0
   10d26:	6078      	str	r0, [r7, #4]
	if (user_count_struct.current_user_no_count > 0)
   10d28:	4b28      	ldr	r3, [pc, #160]	; (10dcc <getActiveNumber+0xac>)
   10d2a:	789b      	ldrb	r3, [r3, #2]
   10d2c:	2b00      	cmp	r3, #0
   10d2e:	d02b      	beq.n	10d88 <getActiveNumber+0x68>
	{
		if ((alternateNumber_struct.alterNumberSetting))
   10d30:	4b27      	ldr	r3, [pc, #156]	; (10dd0 <getActiveNumber+0xb0>)
   10d32:	785b      	ldrb	r3, [r3, #1]
   10d34:	2b00      	cmp	r3, #0
   10d36:	d006      	beq.n	10d46 <getActiveNumber+0x26>
		{
			strcpy(ActiveNo,alternateNumber_struct.alternateNumber_ee);
   10d38:	4a26      	ldr	r2, [pc, #152]	; (10dd4 <getActiveNumber+0xb4>)
   10d3a:	687b      	ldr	r3, [r7, #4]
   10d3c:	0011      	movs	r1, r2
   10d3e:	0018      	movs	r0, r3
   10d40:	4b25      	ldr	r3, [pc, #148]	; (10dd8 <getActiveNumber+0xb8>)
   10d42:	4798      	blx	r3
   10d44:	e03c      	b.n	10dc0 <getActiveNumber+0xa0>
		}
		else
		{
			struct mobile_no_struct mobile_no;
			memset(page_data, '\0', sizeof(page_data));
   10d46:	4b25      	ldr	r3, [pc, #148]	; (10ddc <getActiveNumber+0xbc>)
   10d48:	223c      	movs	r2, #60	; 0x3c
   10d4a:	2100      	movs	r1, #0
   10d4c:	0018      	movs	r0, r3
   10d4e:	4b24      	ldr	r3, [pc, #144]	; (10de0 <getActiveNumber+0xc0>)
   10d50:	4798      	blx	r3
			eeprom_emulator_read_page(USER_1_MOBILE_NUMBER_PAGE+user_count_struct.primaryNumberIndex, page_data);
   10d52:	4b1e      	ldr	r3, [pc, #120]	; (10dcc <getActiveNumber+0xac>)
   10d54:	78db      	ldrb	r3, [r3, #3]
   10d56:	3309      	adds	r3, #9
   10d58:	b2db      	uxtb	r3, r3
   10d5a:	4a20      	ldr	r2, [pc, #128]	; (10ddc <getActiveNumber+0xbc>)
   10d5c:	0011      	movs	r1, r2
   10d5e:	0018      	movs	r0, r3
   10d60:	4b20      	ldr	r3, [pc, #128]	; (10de4 <getActiveNumber+0xc4>)
   10d62:	4798      	blx	r3
			memcpy(&mobile_no,page_data,sizeof(mobile_no));
   10d64:	2320      	movs	r3, #32
   10d66:	18fa      	adds	r2, r7, r3
   10d68:	4b1c      	ldr	r3, [pc, #112]	; (10ddc <getActiveNumber+0xbc>)
   10d6a:	0010      	movs	r0, r2
   10d6c:	0019      	movs	r1, r3
   10d6e:	2318      	movs	r3, #24
   10d70:	001a      	movs	r2, r3
   10d72:	4b1d      	ldr	r3, [pc, #116]	; (10de8 <getActiveNumber+0xc8>)
   10d74:	4798      	blx	r3
			strcpy(ActiveNo,mobile_no.mobile_no_ee);
   10d76:	2320      	movs	r3, #32
   10d78:	18fb      	adds	r3, r7, r3
   10d7a:	1d1a      	adds	r2, r3, #4
   10d7c:	687b      	ldr	r3, [r7, #4]
   10d7e:	0011      	movs	r1, r2
   10d80:	0018      	movs	r0, r3
   10d82:	4b15      	ldr	r3, [pc, #84]	; (10dd8 <getActiveNumber+0xb8>)
   10d84:	4798      	blx	r3
   10d86:	e01b      	b.n	10dc0 <getActiveNumber+0xa0>
		}
	}
	else																					// no effect of this portion as registerEvent checks for numbercount is > 0
	{
		struct mobile_no_struct mobile_no;
		memset(page_data, '\0', sizeof(page_data));
   10d88:	4b14      	ldr	r3, [pc, #80]	; (10ddc <getActiveNumber+0xbc>)
   10d8a:	223c      	movs	r2, #60	; 0x3c
   10d8c:	2100      	movs	r1, #0
   10d8e:	0018      	movs	r0, r3
   10d90:	4b13      	ldr	r3, [pc, #76]	; (10de0 <getActiveNumber+0xc0>)
   10d92:	4798      	blx	r3
		eeprom_emulator_read_page(ADMIN_1_MOBILE_NUMBER_PAGE, page_data);
   10d94:	4b11      	ldr	r3, [pc, #68]	; (10ddc <getActiveNumber+0xbc>)
   10d96:	0019      	movs	r1, r3
   10d98:	2003      	movs	r0, #3
   10d9a:	4b12      	ldr	r3, [pc, #72]	; (10de4 <getActiveNumber+0xc4>)
   10d9c:	4798      	blx	r3
		memcpy(&mobile_no,page_data,sizeof(mobile_no));
   10d9e:	2308      	movs	r3, #8
   10da0:	18fa      	adds	r2, r7, r3
   10da2:	4b0e      	ldr	r3, [pc, #56]	; (10ddc <getActiveNumber+0xbc>)
   10da4:	0010      	movs	r0, r2
   10da6:	0019      	movs	r1, r3
   10da8:	2318      	movs	r3, #24
   10daa:	001a      	movs	r2, r3
   10dac:	4b0e      	ldr	r3, [pc, #56]	; (10de8 <getActiveNumber+0xc8>)
   10dae:	4798      	blx	r3
		strcpy(ActiveNo,mobile_no.mobile_no_ee);
   10db0:	2308      	movs	r3, #8
   10db2:	18fb      	adds	r3, r7, r3
   10db4:	1d1a      	adds	r2, r3, #4
   10db6:	687b      	ldr	r3, [r7, #4]
   10db8:	0011      	movs	r1, r2
   10dba:	0018      	movs	r0, r3
   10dbc:	4b06      	ldr	r3, [pc, #24]	; (10dd8 <getActiveNumber+0xb8>)
   10dbe:	4798      	blx	r3
	}
	
	return ActiveNo;
   10dc0:	687b      	ldr	r3, [r7, #4]
}
   10dc2:	0018      	movs	r0, r3
   10dc4:	46bd      	mov	sp, r7
   10dc6:	b00e      	add	sp, #56	; 0x38
   10dc8:	bd80      	pop	{r7, pc}
   10dca:	46c0      	nop			; (mov r8, r8)
   10dcc:	20000614 	.word	0x20000614
   10dd0:	2000063c 	.word	0x2000063c
   10dd4:	20000640 	.word	0x20000640
   10dd8:	00028c63 	.word	0x00028c63
   10ddc:	20000584 	.word	0x20000584
   10de0:	000289e3 	.word	0x000289e3
   10de4:	0002376d 	.word	0x0002376d
   10de8:	000289ad 	.word	0x000289ad

00010dec <checkExists>:
uint8_t checkExists(char *number)
{
   10dec:	b580      	push	{r7, lr}
   10dee:	b08a      	sub	sp, #40	; 0x28
   10df0:	af00      	add	r7, sp, #0
   10df2:	6078      	str	r0, [r7, #4]
	if (user_count_struct.current_user_no_count > 0)
   10df4:	4b33      	ldr	r3, [pc, #204]	; (10ec4 <checkExists+0xd8>)
   10df6:	789b      	ldrb	r3, [r3, #2]
   10df8:	2b00      	cmp	r3, #0
   10dfa:	d039      	beq.n	10e70 <checkExists+0x84>
		//if(isPrimaryNumber(number))
		//{
		//return 0;
		//}
		
		for (uint8_t i=0;i<user_count_struct.current_user_no_count;i++)
   10dfc:	2327      	movs	r3, #39	; 0x27
   10dfe:	18fb      	adds	r3, r7, r3
   10e00:	2200      	movs	r2, #0
   10e02:	701a      	strb	r2, [r3, #0]
   10e04:	e02d      	b.n	10e62 <checkExists+0x76>
		{
			struct mobile_no_struct mobile_no;
			memset(page_data, '\0', sizeof(page_data));
   10e06:	4b30      	ldr	r3, [pc, #192]	; (10ec8 <checkExists+0xdc>)
   10e08:	223c      	movs	r2, #60	; 0x3c
   10e0a:	2100      	movs	r1, #0
   10e0c:	0018      	movs	r0, r3
   10e0e:	4b2f      	ldr	r3, [pc, #188]	; (10ecc <checkExists+0xe0>)
   10e10:	4798      	blx	r3
			eeprom_emulator_read_page(USER_1_MOBILE_NUMBER_PAGE+i, page_data);
   10e12:	2327      	movs	r3, #39	; 0x27
   10e14:	18fb      	adds	r3, r7, r3
   10e16:	781b      	ldrb	r3, [r3, #0]
   10e18:	3309      	adds	r3, #9
   10e1a:	b2db      	uxtb	r3, r3
   10e1c:	4a2a      	ldr	r2, [pc, #168]	; (10ec8 <checkExists+0xdc>)
   10e1e:	0011      	movs	r1, r2
   10e20:	0018      	movs	r0, r3
   10e22:	4b2b      	ldr	r3, [pc, #172]	; (10ed0 <checkExists+0xe4>)
   10e24:	4798      	blx	r3
			memcpy(&mobile_no,page_data,sizeof(mobile_no));
   10e26:	230c      	movs	r3, #12
   10e28:	18fa      	adds	r2, r7, r3
   10e2a:	4b27      	ldr	r3, [pc, #156]	; (10ec8 <checkExists+0xdc>)
   10e2c:	0010      	movs	r0, r2
   10e2e:	0019      	movs	r1, r3
   10e30:	2318      	movs	r3, #24
   10e32:	001a      	movs	r2, r3
   10e34:	4b27      	ldr	r3, [pc, #156]	; (10ed4 <checkExists+0xe8>)
   10e36:	4798      	blx	r3
			if (strstr(number,mobile_no.mobile_no_ee))
   10e38:	230c      	movs	r3, #12
   10e3a:	18fb      	adds	r3, r7, r3
   10e3c:	1d1a      	adds	r2, r3, #4
   10e3e:	687b      	ldr	r3, [r7, #4]
   10e40:	0011      	movs	r1, r2
   10e42:	0018      	movs	r0, r3
   10e44:	4b24      	ldr	r3, [pc, #144]	; (10ed8 <checkExists+0xec>)
   10e46:	4798      	blx	r3
   10e48:	1e03      	subs	r3, r0, #0
   10e4a:	d003      	beq.n	10e54 <checkExists+0x68>
			{
				return i;
   10e4c:	2327      	movs	r3, #39	; 0x27
   10e4e:	18fb      	adds	r3, r7, r3
   10e50:	781b      	ldrb	r3, [r3, #0]
   10e52:	e032      	b.n	10eba <checkExists+0xce>
		for (uint8_t i=0;i<user_count_struct.current_user_no_count;i++)
   10e54:	2327      	movs	r3, #39	; 0x27
   10e56:	18fb      	adds	r3, r7, r3
   10e58:	781a      	ldrb	r2, [r3, #0]
   10e5a:	2327      	movs	r3, #39	; 0x27
   10e5c:	18fb      	adds	r3, r7, r3
   10e5e:	3201      	adds	r2, #1
   10e60:	701a      	strb	r2, [r3, #0]
   10e62:	4b18      	ldr	r3, [pc, #96]	; (10ec4 <checkExists+0xd8>)
   10e64:	789b      	ldrb	r3, [r3, #2]
   10e66:	2227      	movs	r2, #39	; 0x27
   10e68:	18ba      	adds	r2, r7, r2
   10e6a:	7812      	ldrb	r2, [r2, #0]
   10e6c:	429a      	cmp	r2, r3
   10e6e:	d3ca      	bcc.n	10e06 <checkExists+0x1a>
			}
		}
	}

	if(isAlterNumber(number))
   10e70:	687b      	ldr	r3, [r7, #4]
   10e72:	0018      	movs	r0, r3
   10e74:	4b19      	ldr	r3, [pc, #100]	; (10edc <checkExists+0xf0>)
   10e76:	4798      	blx	r3
   10e78:	1e03      	subs	r3, r0, #0
   10e7a:	d001      	beq.n	10e80 <checkExists+0x94>
	{
		return 0xFD;
   10e7c:	23fd      	movs	r3, #253	; 0xfd
   10e7e:	e01c      	b.n	10eba <checkExists+0xce>
	}

	if((m2m_Numbers_struct.m2mVerified) && isM2MNumber(number))
   10e80:	4b17      	ldr	r3, [pc, #92]	; (10ee0 <checkExists+0xf4>)
   10e82:	789b      	ldrb	r3, [r3, #2]
   10e84:	2b00      	cmp	r3, #0
   10e86:	d007      	beq.n	10e98 <checkExists+0xac>
   10e88:	687b      	ldr	r3, [r7, #4]
   10e8a:	0018      	movs	r0, r3
   10e8c:	4b15      	ldr	r3, [pc, #84]	; (10ee4 <checkExists+0xf8>)
   10e8e:	4798      	blx	r3
   10e90:	1e03      	subs	r3, r0, #0
   10e92:	d001      	beq.n	10e98 <checkExists+0xac>
	{
		return 0xFE;
   10e94:	23fe      	movs	r3, #254	; 0xfe
   10e96:	e010      	b.n	10eba <checkExists+0xce>
	}
	if (factory_settings_parameter_struct.ENABLE_M2M)
   10e98:	4b13      	ldr	r3, [pc, #76]	; (10ee8 <checkExists+0xfc>)
   10e9a:	78db      	ldrb	r3, [r3, #3]
   10e9c:	2b00      	cmp	r3, #0
   10e9e:	d00b      	beq.n	10eb8 <checkExists+0xcc>
	{
		if ((m2m_Numbers_struct.m2mRemoteVerified) && isM2MRemoteNumber(number))
   10ea0:	4b0f      	ldr	r3, [pc, #60]	; (10ee0 <checkExists+0xf4>)
   10ea2:	791b      	ldrb	r3, [r3, #4]
   10ea4:	2b00      	cmp	r3, #0
   10ea6:	d007      	beq.n	10eb8 <checkExists+0xcc>
   10ea8:	687b      	ldr	r3, [r7, #4]
   10eaa:	0018      	movs	r0, r3
   10eac:	4b0f      	ldr	r3, [pc, #60]	; (10eec <checkExists+0x100>)
   10eae:	4798      	blx	r3
   10eb0:	1e03      	subs	r3, r0, #0
   10eb2:	d001      	beq.n	10eb8 <checkExists+0xcc>
		{
			return 0xFE;
   10eb4:	23fe      	movs	r3, #254	; 0xfe
   10eb6:	e000      	b.n	10eba <checkExists+0xce>
		}
	}
	return 0xFF;
   10eb8:	23ff      	movs	r3, #255	; 0xff
}
   10eba:	0018      	movs	r0, r3
   10ebc:	46bd      	mov	sp, r7
   10ebe:	b00a      	add	sp, #40	; 0x28
   10ec0:	bd80      	pop	{r7, pc}
   10ec2:	46c0      	nop			; (mov r8, r8)
   10ec4:	20000614 	.word	0x20000614
   10ec8:	20000584 	.word	0x20000584
   10ecc:	000289e3 	.word	0x000289e3
   10ed0:	0002376d 	.word	0x0002376d
   10ed4:	000289ad 	.word	0x000289ad
   10ed8:	00028ca3 	.word	0x00028ca3
   10edc:	00010a0d 	.word	0x00010a0d
   10ee0:	20000554 	.word	0x20000554
   10ee4:	00010a55 	.word	0x00010a55
   10ee8:	2000062c 	.word	0x2000062c
   10eec:	00010a91 	.word	0x00010a91

00010ef0 <addNumber>:

bool addNumber(char *number)
{
   10ef0:	b580      	push	{r7, lr}
   10ef2:	b088      	sub	sp, #32
   10ef4:	af00      	add	r7, sp, #0
   10ef6:	6078      	str	r0, [r7, #4]
	if (user_count_struct.current_user_no_count == user_count_struct.total_user_no_count)
   10ef8:	4b33      	ldr	r3, [pc, #204]	; (10fc8 <addNumber+0xd8>)
   10efa:	789a      	ldrb	r2, [r3, #2]
   10efc:	4b32      	ldr	r3, [pc, #200]	; (10fc8 <addNumber+0xd8>)
   10efe:	785b      	ldrb	r3, [r3, #1]
   10f00:	429a      	cmp	r2, r3
   10f02:	d101      	bne.n	10f08 <addNumber+0x18>
	{
		return false;
   10f04:	2300      	movs	r3, #0
   10f06:	e05a      	b.n	10fbe <addNumber+0xce>
	}
	else
	{
		if (checkExists(number) > 0xF0)
   10f08:	687b      	ldr	r3, [r7, #4]
   10f0a:	0018      	movs	r0, r3
   10f0c:	4b2f      	ldr	r3, [pc, #188]	; (10fcc <addNumber+0xdc>)
   10f0e:	4798      	blx	r3
   10f10:	0003      	movs	r3, r0
   10f12:	2bf0      	cmp	r3, #240	; 0xf0
   10f14:	d952      	bls.n	10fbc <addNumber+0xcc>
		{
			struct mobile_no_struct mobile_no;
			memset(page_data, '\0', sizeof(page_data));
   10f16:	4b2e      	ldr	r3, [pc, #184]	; (10fd0 <addNumber+0xe0>)
   10f18:	223c      	movs	r2, #60	; 0x3c
   10f1a:	2100      	movs	r1, #0
   10f1c:	0018      	movs	r0, r3
   10f1e:	4b2d      	ldr	r3, [pc, #180]	; (10fd4 <addNumber+0xe4>)
   10f20:	4798      	blx	r3
			eeprom_emulator_read_page((USER_1_MOBILE_NUMBER_PAGE+user_count_struct.current_user_no_count), page_data);
   10f22:	4b29      	ldr	r3, [pc, #164]	; (10fc8 <addNumber+0xd8>)
   10f24:	789b      	ldrb	r3, [r3, #2]
   10f26:	3309      	adds	r3, #9
   10f28:	b2db      	uxtb	r3, r3
   10f2a:	4a29      	ldr	r2, [pc, #164]	; (10fd0 <addNumber+0xe0>)
   10f2c:	0011      	movs	r1, r2
   10f2e:	0018      	movs	r0, r3
   10f30:	4b29      	ldr	r3, [pc, #164]	; (10fd8 <addNumber+0xe8>)
   10f32:	4798      	blx	r3
			memcpy(&mobile_no,page_data,sizeof(mobile_no));
   10f34:	2308      	movs	r3, #8
   10f36:	18fa      	adds	r2, r7, r3
   10f38:	4b25      	ldr	r3, [pc, #148]	; (10fd0 <addNumber+0xe0>)
   10f3a:	0010      	movs	r0, r2
   10f3c:	0019      	movs	r1, r3
   10f3e:	2318      	movs	r3, #24
   10f40:	001a      	movs	r2, r3
   10f42:	4b26      	ldr	r3, [pc, #152]	; (10fdc <addNumber+0xec>)
   10f44:	4798      	blx	r3
			
			memset(mobile_no.mobile_no_ee, '\0', sizeof(mobile_no.mobile_no_ee));
   10f46:	2308      	movs	r3, #8
   10f48:	18fb      	adds	r3, r7, r3
   10f4a:	3304      	adds	r3, #4
   10f4c:	2214      	movs	r2, #20
   10f4e:	2100      	movs	r1, #0
   10f50:	0018      	movs	r0, r3
   10f52:	4b20      	ldr	r3, [pc, #128]	; (10fd4 <addNumber+0xe4>)
   10f54:	4798      	blx	r3
			strcpy(mobile_no.mobile_no_ee,number);
   10f56:	687a      	ldr	r2, [r7, #4]
   10f58:	2308      	movs	r3, #8
   10f5a:	18fb      	adds	r3, r7, r3
   10f5c:	3304      	adds	r3, #4
   10f5e:	0011      	movs	r1, r2
   10f60:	0018      	movs	r0, r3
   10f62:	4b1f      	ldr	r3, [pc, #124]	; (10fe0 <addNumber+0xf0>)
   10f64:	4798      	blx	r3
			
			memcpy(page_data,&mobile_no,sizeof(mobile_no));
   10f66:	4a1a      	ldr	r2, [pc, #104]	; (10fd0 <addNumber+0xe0>)
   10f68:	2308      	movs	r3, #8
   10f6a:	18fb      	adds	r3, r7, r3
   10f6c:	0010      	movs	r0, r2
   10f6e:	0019      	movs	r1, r3
   10f70:	2318      	movs	r3, #24
   10f72:	001a      	movs	r2, r3
   10f74:	4b19      	ldr	r3, [pc, #100]	; (10fdc <addNumber+0xec>)
   10f76:	4798      	blx	r3
			eeprom_emulator_write_page((USER_1_MOBILE_NUMBER_PAGE+user_count_struct.current_user_no_count), page_data);
   10f78:	4b13      	ldr	r3, [pc, #76]	; (10fc8 <addNumber+0xd8>)
   10f7a:	789b      	ldrb	r3, [r3, #2]
   10f7c:	3309      	adds	r3, #9
   10f7e:	b2db      	uxtb	r3, r3
   10f80:	4a13      	ldr	r2, [pc, #76]	; (10fd0 <addNumber+0xe0>)
   10f82:	0011      	movs	r1, r2
   10f84:	0018      	movs	r0, r3
   10f86:	4b17      	ldr	r3, [pc, #92]	; (10fe4 <addNumber+0xf4>)
   10f88:	4798      	blx	r3
			eeprom_emulator_commit_page_buffer();
   10f8a:	4b17      	ldr	r3, [pc, #92]	; (10fe8 <addNumber+0xf8>)
   10f8c:	4798      	blx	r3
			
			user_count_struct.current_user_no_count++;
   10f8e:	4b0e      	ldr	r3, [pc, #56]	; (10fc8 <addNumber+0xd8>)
   10f90:	789b      	ldrb	r3, [r3, #2]
   10f92:	3301      	adds	r3, #1
   10f94:	b2da      	uxtb	r2, r3
   10f96:	4b0c      	ldr	r3, [pc, #48]	; (10fc8 <addNumber+0xd8>)
   10f98:	709a      	strb	r2, [r3, #2]
			
			memcpy(page_data,&user_count_struct,sizeof(user_count_struct));
   10f9a:	4a0d      	ldr	r2, [pc, #52]	; (10fd0 <addNumber+0xe0>)
   10f9c:	4b0a      	ldr	r3, [pc, #40]	; (10fc8 <addNumber+0xd8>)
   10f9e:	0010      	movs	r0, r2
   10fa0:	0019      	movs	r1, r3
   10fa2:	2308      	movs	r3, #8
   10fa4:	001a      	movs	r2, r3
   10fa6:	4b0d      	ldr	r3, [pc, #52]	; (10fdc <addNumber+0xec>)
   10fa8:	4798      	blx	r3
			eeprom_emulator_write_page(USER_COUNTER_PAGE, page_data);
   10faa:	4b09      	ldr	r3, [pc, #36]	; (10fd0 <addNumber+0xe0>)
   10fac:	0019      	movs	r1, r3
   10fae:	2008      	movs	r0, #8
   10fb0:	4b0c      	ldr	r3, [pc, #48]	; (10fe4 <addNumber+0xf4>)
   10fb2:	4798      	blx	r3
			eeprom_emulator_commit_page_buffer();
   10fb4:	4b0c      	ldr	r3, [pc, #48]	; (10fe8 <addNumber+0xf8>)
   10fb6:	4798      	blx	r3
			
			return true;
   10fb8:	2301      	movs	r3, #1
   10fba:	e000      	b.n	10fbe <addNumber+0xce>
		}
	}
	return false;
   10fbc:	2300      	movs	r3, #0
}
   10fbe:	0018      	movs	r0, r3
   10fc0:	46bd      	mov	sp, r7
   10fc2:	b008      	add	sp, #32
   10fc4:	bd80      	pop	{r7, pc}
   10fc6:	46c0      	nop			; (mov r8, r8)
   10fc8:	20000614 	.word	0x20000614
   10fcc:	00010ded 	.word	0x00010ded
   10fd0:	20000584 	.word	0x20000584
   10fd4:	000289e3 	.word	0x000289e3
   10fd8:	0002376d 	.word	0x0002376d
   10fdc:	000289ad 	.word	0x000289ad
   10fe0:	00028c63 	.word	0x00028c63
   10fe4:	00023661 	.word	0x00023661
   10fe8:	00023809 	.word	0x00023809

00010fec <removeNumber>:

bool removeNumber(char *numer)
{
   10fec:	b590      	push	{r4, r7, lr}
   10fee:	b085      	sub	sp, #20
   10ff0:	af00      	add	r7, sp, #0
   10ff2:	6078      	str	r0, [r7, #4]
	if (user_count_struct.current_user_no_count < 2)
   10ff4:	4b3d      	ldr	r3, [pc, #244]	; (110ec <removeNumber+0x100>)
   10ff6:	789b      	ldrb	r3, [r3, #2]
   10ff8:	2b01      	cmp	r3, #1
   10ffa:	d801      	bhi.n	11000 <removeNumber+0x14>
	{
		return false;
   10ffc:	2300      	movs	r3, #0
   10ffe:	e071      	b.n	110e4 <removeNumber+0xf8>
	}
	else
	{
		uint8_t loc =  checkExists(numer);
   11000:	230e      	movs	r3, #14
   11002:	18fc      	adds	r4, r7, r3
   11004:	687b      	ldr	r3, [r7, #4]
   11006:	0018      	movs	r0, r3
   11008:	4b39      	ldr	r3, [pc, #228]	; (110f0 <removeNumber+0x104>)
   1100a:	4798      	blx	r3
   1100c:	0003      	movs	r3, r0
   1100e:	7023      	strb	r3, [r4, #0]
		if ((loc < user_count_struct.total_user_no_count) && (loc != user_count_struct.primaryNumberIndex))	//number is not special number(i.e. alter,m2m,m2mRemote) and not primary number
   11010:	4b36      	ldr	r3, [pc, #216]	; (110ec <removeNumber+0x100>)
   11012:	785b      	ldrb	r3, [r3, #1]
   11014:	220e      	movs	r2, #14
   11016:	18ba      	adds	r2, r7, r2
   11018:	7812      	ldrb	r2, [r2, #0]
   1101a:	429a      	cmp	r2, r3
   1101c:	d261      	bcs.n	110e2 <removeNumber+0xf6>
   1101e:	4b33      	ldr	r3, [pc, #204]	; (110ec <removeNumber+0x100>)
   11020:	78db      	ldrb	r3, [r3, #3]
   11022:	220e      	movs	r2, #14
   11024:	18ba      	adds	r2, r7, r2
   11026:	7812      	ldrb	r2, [r2, #0]
   11028:	429a      	cmp	r2, r3
   1102a:	d05a      	beq.n	110e2 <removeNumber+0xf6>
		{
			for (uint8_t i=loc;i<(user_count_struct.current_user_no_count-1);i++)
   1102c:	230f      	movs	r3, #15
   1102e:	18fb      	adds	r3, r7, r3
   11030:	220e      	movs	r2, #14
   11032:	18ba      	adds	r2, r7, r2
   11034:	7812      	ldrb	r2, [r2, #0]
   11036:	701a      	strb	r2, [r3, #0]
   11038:	e022      	b.n	11080 <removeNumber+0x94>
			{
				memset(page_data, '\0', sizeof(page_data));
   1103a:	4b2e      	ldr	r3, [pc, #184]	; (110f4 <removeNumber+0x108>)
   1103c:	223c      	movs	r2, #60	; 0x3c
   1103e:	2100      	movs	r1, #0
   11040:	0018      	movs	r0, r3
   11042:	4b2d      	ldr	r3, [pc, #180]	; (110f8 <removeNumber+0x10c>)
   11044:	4798      	blx	r3
				eeprom_emulator_read_page(USER_1_MOBILE_NUMBER_PAGE+i+1, page_data);
   11046:	230f      	movs	r3, #15
   11048:	18fb      	adds	r3, r7, r3
   1104a:	781b      	ldrb	r3, [r3, #0]
   1104c:	330a      	adds	r3, #10
   1104e:	b2db      	uxtb	r3, r3
   11050:	4a28      	ldr	r2, [pc, #160]	; (110f4 <removeNumber+0x108>)
   11052:	0011      	movs	r1, r2
   11054:	0018      	movs	r0, r3
   11056:	4b29      	ldr	r3, [pc, #164]	; (110fc <removeNumber+0x110>)
   11058:	4798      	blx	r3
				eeprom_emulator_write_page(USER_1_MOBILE_NUMBER_PAGE+i, page_data);
   1105a:	230f      	movs	r3, #15
   1105c:	18fb      	adds	r3, r7, r3
   1105e:	781b      	ldrb	r3, [r3, #0]
   11060:	3309      	adds	r3, #9
   11062:	b2db      	uxtb	r3, r3
   11064:	4a23      	ldr	r2, [pc, #140]	; (110f4 <removeNumber+0x108>)
   11066:	0011      	movs	r1, r2
   11068:	0018      	movs	r0, r3
   1106a:	4b25      	ldr	r3, [pc, #148]	; (11100 <removeNumber+0x114>)
   1106c:	4798      	blx	r3
				eeprom_emulator_commit_page_buffer();
   1106e:	4b25      	ldr	r3, [pc, #148]	; (11104 <removeNumber+0x118>)
   11070:	4798      	blx	r3
			for (uint8_t i=loc;i<(user_count_struct.current_user_no_count-1);i++)
   11072:	230f      	movs	r3, #15
   11074:	18fb      	adds	r3, r7, r3
   11076:	781a      	ldrb	r2, [r3, #0]
   11078:	230f      	movs	r3, #15
   1107a:	18fb      	adds	r3, r7, r3
   1107c:	3201      	adds	r2, #1
   1107e:	701a      	strb	r2, [r3, #0]
   11080:	230f      	movs	r3, #15
   11082:	18fb      	adds	r3, r7, r3
   11084:	781a      	ldrb	r2, [r3, #0]
   11086:	4b19      	ldr	r3, [pc, #100]	; (110ec <removeNumber+0x100>)
   11088:	789b      	ldrb	r3, [r3, #2]
   1108a:	3b01      	subs	r3, #1
   1108c:	429a      	cmp	r2, r3
   1108e:	dbd4      	blt.n	1103a <removeNumber+0x4e>
			}
			user_count_struct.current_user_no_count--;
   11090:	4b16      	ldr	r3, [pc, #88]	; (110ec <removeNumber+0x100>)
   11092:	789b      	ldrb	r3, [r3, #2]
   11094:	3b01      	subs	r3, #1
   11096:	b2da      	uxtb	r2, r3
   11098:	4b14      	ldr	r3, [pc, #80]	; (110ec <removeNumber+0x100>)
   1109a:	709a      	strb	r2, [r3, #2]
			
			if(loc==user_count_struct.secondaryNumberIndex || loc>user_count_struct.current_user_no_count-1)
   1109c:	4b13      	ldr	r3, [pc, #76]	; (110ec <removeNumber+0x100>)
   1109e:	791b      	ldrb	r3, [r3, #4]
   110a0:	220e      	movs	r2, #14
   110a2:	18ba      	adds	r2, r7, r2
   110a4:	7812      	ldrb	r2, [r2, #0]
   110a6:	429a      	cmp	r2, r3
   110a8:	d007      	beq.n	110ba <removeNumber+0xce>
   110aa:	230e      	movs	r3, #14
   110ac:	18fb      	adds	r3, r7, r3
   110ae:	781a      	ldrb	r2, [r3, #0]
   110b0:	4b0e      	ldr	r3, [pc, #56]	; (110ec <removeNumber+0x100>)
   110b2:	789b      	ldrb	r3, [r3, #2]
   110b4:	3b01      	subs	r3, #1
   110b6:	429a      	cmp	r2, r3
   110b8:	dd02      	ble.n	110c0 <removeNumber+0xd4>
			{
				user_count_struct.secondaryNumberIndex= 1;
   110ba:	4b0c      	ldr	r3, [pc, #48]	; (110ec <removeNumber+0x100>)
   110bc:	2201      	movs	r2, #1
   110be:	711a      	strb	r2, [r3, #4]
			}
			memcpy(page_data,&user_count_struct,sizeof(user_count_struct));
   110c0:	4a0c      	ldr	r2, [pc, #48]	; (110f4 <removeNumber+0x108>)
   110c2:	4b0a      	ldr	r3, [pc, #40]	; (110ec <removeNumber+0x100>)
   110c4:	0010      	movs	r0, r2
   110c6:	0019      	movs	r1, r3
   110c8:	2308      	movs	r3, #8
   110ca:	001a      	movs	r2, r3
   110cc:	4b0e      	ldr	r3, [pc, #56]	; (11108 <removeNumber+0x11c>)
   110ce:	4798      	blx	r3
			eeprom_emulator_write_page(USER_COUNTER_PAGE, page_data);
   110d0:	4b08      	ldr	r3, [pc, #32]	; (110f4 <removeNumber+0x108>)
   110d2:	0019      	movs	r1, r3
   110d4:	2008      	movs	r0, #8
   110d6:	4b0a      	ldr	r3, [pc, #40]	; (11100 <removeNumber+0x114>)
   110d8:	4798      	blx	r3
			eeprom_emulator_commit_page_buffer();
   110da:	4b0a      	ldr	r3, [pc, #40]	; (11104 <removeNumber+0x118>)
   110dc:	4798      	blx	r3
			return true;
   110de:	2301      	movs	r3, #1
   110e0:	e000      	b.n	110e4 <removeNumber+0xf8>
		}
	}
	return false;
   110e2:	2300      	movs	r3, #0
}
   110e4:	0018      	movs	r0, r3
   110e6:	46bd      	mov	sp, r7
   110e8:	b005      	add	sp, #20
   110ea:	bd90      	pop	{r4, r7, pc}
   110ec:	20000614 	.word	0x20000614
   110f0:	00010ded 	.word	0x00010ded
   110f4:	20000584 	.word	0x20000584
   110f8:	000289e3 	.word	0x000289e3
   110fc:	0002376d 	.word	0x0002376d
   11100:	00023661 	.word	0x00023661
   11104:	00023809 	.word	0x00023809
   11108:	000289ad 	.word	0x000289ad

0001110c <clearNumbers>:

void clearNumbers(bool admin)
{
   1110c:	b580      	push	{r7, lr}
   1110e:	b082      	sub	sp, #8
   11110:	af00      	add	r7, sp, #0
   11112:	0002      	movs	r2, r0
   11114:	1dfb      	adds	r3, r7, #7
   11116:	701a      	strb	r2, [r3, #0]
	if (admin)
   11118:	1dfb      	adds	r3, r7, #7
   1111a:	781b      	ldrb	r3, [r3, #0]
   1111c:	2b00      	cmp	r3, #0
   1111e:	d003      	beq.n	11128 <clearNumbers+0x1c>
	{
		user_count_struct.current_user_no_count = 0;
   11120:	4b28      	ldr	r3, [pc, #160]	; (111c4 <clearNumbers+0xb8>)
   11122:	2200      	movs	r2, #0
   11124:	709a      	strb	r2, [r3, #2]
   11126:	e018      	b.n	1115a <clearNumbers+0x4e>
	}
	else
	{
		memset(page_data, '\0', sizeof(page_data));
   11128:	4b27      	ldr	r3, [pc, #156]	; (111c8 <clearNumbers+0xbc>)
   1112a:	223c      	movs	r2, #60	; 0x3c
   1112c:	2100      	movs	r1, #0
   1112e:	0018      	movs	r0, r3
   11130:	4b26      	ldr	r3, [pc, #152]	; (111cc <clearNumbers+0xc0>)
   11132:	4798      	blx	r3
		eeprom_emulator_read_page(USER_1_MOBILE_NUMBER_PAGE+user_count_struct.primaryNumberIndex, page_data);
   11134:	4b23      	ldr	r3, [pc, #140]	; (111c4 <clearNumbers+0xb8>)
   11136:	78db      	ldrb	r3, [r3, #3]
   11138:	3309      	adds	r3, #9
   1113a:	b2db      	uxtb	r3, r3
   1113c:	4a22      	ldr	r2, [pc, #136]	; (111c8 <clearNumbers+0xbc>)
   1113e:	0011      	movs	r1, r2
   11140:	0018      	movs	r0, r3
   11142:	4b23      	ldr	r3, [pc, #140]	; (111d0 <clearNumbers+0xc4>)
   11144:	4798      	blx	r3
		eeprom_emulator_write_page(USER_1_MOBILE_NUMBER_PAGE, page_data);
   11146:	4b20      	ldr	r3, [pc, #128]	; (111c8 <clearNumbers+0xbc>)
   11148:	0019      	movs	r1, r3
   1114a:	2009      	movs	r0, #9
   1114c:	4b21      	ldr	r3, [pc, #132]	; (111d4 <clearNumbers+0xc8>)
   1114e:	4798      	blx	r3
		eeprom_emulator_commit_page_buffer();
   11150:	4b21      	ldr	r3, [pc, #132]	; (111d8 <clearNumbers+0xcc>)
   11152:	4798      	blx	r3

		user_count_struct.current_user_no_count = 1;
   11154:	4b1b      	ldr	r3, [pc, #108]	; (111c4 <clearNumbers+0xb8>)
   11156:	2201      	movs	r2, #1
   11158:	709a      	strb	r2, [r3, #2]
		
	}
	user_count_struct.primaryNumberIndex=0;
   1115a:	4b1a      	ldr	r3, [pc, #104]	; (111c4 <clearNumbers+0xb8>)
   1115c:	2200      	movs	r2, #0
   1115e:	70da      	strb	r2, [r3, #3]
	user_count_struct.secondaryNumberIndex=1;
   11160:	4b18      	ldr	r3, [pc, #96]	; (111c4 <clearNumbers+0xb8>)
   11162:	2201      	movs	r2, #1
   11164:	711a      	strb	r2, [r3, #4]

	memcpy(page_data,&user_count_struct,sizeof(user_count_struct));
   11166:	4a18      	ldr	r2, [pc, #96]	; (111c8 <clearNumbers+0xbc>)
   11168:	4b16      	ldr	r3, [pc, #88]	; (111c4 <clearNumbers+0xb8>)
   1116a:	0010      	movs	r0, r2
   1116c:	0019      	movs	r1, r3
   1116e:	2308      	movs	r3, #8
   11170:	001a      	movs	r2, r3
   11172:	4b1a      	ldr	r3, [pc, #104]	; (111dc <clearNumbers+0xd0>)
   11174:	4798      	blx	r3
	user_count_struct.primaryNumberIndex=0;
   11176:	4b13      	ldr	r3, [pc, #76]	; (111c4 <clearNumbers+0xb8>)
   11178:	2200      	movs	r2, #0
   1117a:	70da      	strb	r2, [r3, #3]
	user_count_struct.secondaryNumberIndex=1;
   1117c:	4b11      	ldr	r3, [pc, #68]	; (111c4 <clearNumbers+0xb8>)
   1117e:	2201      	movs	r2, #1
   11180:	711a      	strb	r2, [r3, #4]
	eeprom_emulator_write_page(USER_COUNTER_PAGE, page_data);
   11182:	4b11      	ldr	r3, [pc, #68]	; (111c8 <clearNumbers+0xbc>)
   11184:	0019      	movs	r1, r3
   11186:	2008      	movs	r0, #8
   11188:	4b12      	ldr	r3, [pc, #72]	; (111d4 <clearNumbers+0xc8>)
   1118a:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   1118c:	4b12      	ldr	r3, [pc, #72]	; (111d8 <clearNumbers+0xcc>)
   1118e:	4798      	blx	r3
	
	saveAlterNumberSetting(false);
   11190:	2000      	movs	r0, #0
   11192:	4b13      	ldr	r3, [pc, #76]	; (111e0 <clearNumbers+0xd4>)
   11194:	4798      	blx	r3
	
	alternateNumber_struct.alterNumberPresent = false;
   11196:	4b13      	ldr	r3, [pc, #76]	; (111e4 <clearNumbers+0xd8>)
   11198:	2200      	movs	r2, #0
   1119a:	709a      	strb	r2, [r3, #2]
	memcpy(page_data,&alternateNumber_struct,sizeof(alternateNumber_struct));
   1119c:	4a0a      	ldr	r2, [pc, #40]	; (111c8 <clearNumbers+0xbc>)
   1119e:	4b11      	ldr	r3, [pc, #68]	; (111e4 <clearNumbers+0xd8>)
   111a0:	0010      	movs	r0, r2
   111a2:	0019      	movs	r1, r3
   111a4:	2318      	movs	r3, #24
   111a6:	001a      	movs	r2, r3
   111a8:	4b0c      	ldr	r3, [pc, #48]	; (111dc <clearNumbers+0xd0>)
   111aa:	4798      	blx	r3
	eeprom_emulator_write_page(ALTARNATE_NUMBERS_PAGE, page_data);
   111ac:	4b06      	ldr	r3, [pc, #24]	; (111c8 <clearNumbers+0xbc>)
   111ae:	0019      	movs	r1, r3
   111b0:	2018      	movs	r0, #24
   111b2:	4b08      	ldr	r3, [pc, #32]	; (111d4 <clearNumbers+0xc8>)
   111b4:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   111b6:	4b08      	ldr	r3, [pc, #32]	; (111d8 <clearNumbers+0xcc>)
   111b8:	4798      	blx	r3
}
   111ba:	46c0      	nop			; (mov r8, r8)
   111bc:	46bd      	mov	sp, r7
   111be:	b002      	add	sp, #8
   111c0:	bd80      	pop	{r7, pc}
   111c2:	46c0      	nop			; (mov r8, r8)
   111c4:	20000614 	.word	0x20000614
   111c8:	20000584 	.word	0x20000584
   111cc:	000289e3 	.word	0x000289e3
   111d0:	0002376d 	.word	0x0002376d
   111d4:	00023661 	.word	0x00023661
   111d8:	00023809 	.word	0x00023809
   111dc:	000289ad 	.word	0x000289ad
   111e0:	000111e9 	.word	0x000111e9
   111e4:	2000063c 	.word	0x2000063c

000111e8 <saveAlterNumberSetting>:

void saveAlterNumberSetting(bool flag)
{
   111e8:	b580      	push	{r7, lr}
   111ea:	b082      	sub	sp, #8
   111ec:	af00      	add	r7, sp, #0
   111ee:	0002      	movs	r2, r0
   111f0:	1dfb      	adds	r3, r7, #7
   111f2:	701a      	strb	r2, [r3, #0]
	alternateNumber_struct.alterNumberSetting = flag;
   111f4:	1dfb      	adds	r3, r7, #7
   111f6:	781a      	ldrb	r2, [r3, #0]
   111f8:	4b0a      	ldr	r3, [pc, #40]	; (11224 <saveAlterNumberSetting+0x3c>)
   111fa:	705a      	strb	r2, [r3, #1]
	memcpy(page_data,&alternateNumber_struct,sizeof(alternateNumber_struct));
   111fc:	4a0a      	ldr	r2, [pc, #40]	; (11228 <saveAlterNumberSetting+0x40>)
   111fe:	4b09      	ldr	r3, [pc, #36]	; (11224 <saveAlterNumberSetting+0x3c>)
   11200:	0010      	movs	r0, r2
   11202:	0019      	movs	r1, r3
   11204:	2318      	movs	r3, #24
   11206:	001a      	movs	r2, r3
   11208:	4b08      	ldr	r3, [pc, #32]	; (1122c <saveAlterNumberSetting+0x44>)
   1120a:	4798      	blx	r3
	eeprom_emulator_write_page(ALTARNATE_NUMBERS_PAGE, page_data);
   1120c:	4b06      	ldr	r3, [pc, #24]	; (11228 <saveAlterNumberSetting+0x40>)
   1120e:	0019      	movs	r1, r3
   11210:	2018      	movs	r0, #24
   11212:	4b07      	ldr	r3, [pc, #28]	; (11230 <saveAlterNumberSetting+0x48>)
   11214:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   11216:	4b07      	ldr	r3, [pc, #28]	; (11234 <saveAlterNumberSetting+0x4c>)
   11218:	4798      	blx	r3
}
   1121a:	46c0      	nop			; (mov r8, r8)
   1121c:	46bd      	mov	sp, r7
   1121e:	b002      	add	sp, #8
   11220:	bd80      	pop	{r7, pc}
   11222:	46c0      	nop			; (mov r8, r8)
   11224:	2000063c 	.word	0x2000063c
   11228:	20000584 	.word	0x20000584
   1122c:	000289ad 	.word	0x000289ad
   11230:	00023661 	.word	0x00023661
   11234:	00023809 	.word	0x00023809

00011238 <addAlternateNumber>:

bool addAlternateNumber(char *numer)
{
   11238:	b580      	push	{r7, lr}
   1123a:	b082      	sub	sp, #8
   1123c:	af00      	add	r7, sp, #0
   1123e:	6078      	str	r0, [r7, #4]
	if (user_count_struct.current_user_no_count > 0)
   11240:	4b11      	ldr	r3, [pc, #68]	; (11288 <addAlternateNumber+0x50>)
   11242:	789b      	ldrb	r3, [r3, #2]
   11244:	2b00      	cmp	r3, #0
   11246:	d019      	beq.n	1127c <addAlternateNumber+0x44>
	{
		alternateNumber_struct.alterNumberPresent = true;
   11248:	4b10      	ldr	r3, [pc, #64]	; (1128c <addAlternateNumber+0x54>)
   1124a:	2201      	movs	r2, #1
   1124c:	709a      	strb	r2, [r3, #2]
		strcpy(alternateNumber_struct.alternateNumber_ee,numer);
   1124e:	687a      	ldr	r2, [r7, #4]
   11250:	4b0f      	ldr	r3, [pc, #60]	; (11290 <addAlternateNumber+0x58>)
   11252:	0011      	movs	r1, r2
   11254:	0018      	movs	r0, r3
   11256:	4b0f      	ldr	r3, [pc, #60]	; (11294 <addAlternateNumber+0x5c>)
   11258:	4798      	blx	r3
		memcpy(page_data,&alternateNumber_struct,sizeof(alternateNumber_struct));
   1125a:	4a0f      	ldr	r2, [pc, #60]	; (11298 <addAlternateNumber+0x60>)
   1125c:	4b0b      	ldr	r3, [pc, #44]	; (1128c <addAlternateNumber+0x54>)
   1125e:	0010      	movs	r0, r2
   11260:	0019      	movs	r1, r3
   11262:	2318      	movs	r3, #24
   11264:	001a      	movs	r2, r3
   11266:	4b0d      	ldr	r3, [pc, #52]	; (1129c <addAlternateNumber+0x64>)
   11268:	4798      	blx	r3
		eeprom_emulator_write_page(ALTARNATE_NUMBERS_PAGE, page_data);
   1126a:	4b0b      	ldr	r3, [pc, #44]	; (11298 <addAlternateNumber+0x60>)
   1126c:	0019      	movs	r1, r3
   1126e:	2018      	movs	r0, #24
   11270:	4b0b      	ldr	r3, [pc, #44]	; (112a0 <addAlternateNumber+0x68>)
   11272:	4798      	blx	r3
		eeprom_emulator_commit_page_buffer();
   11274:	4b0b      	ldr	r3, [pc, #44]	; (112a4 <addAlternateNumber+0x6c>)
   11276:	4798      	blx	r3
		
		return true;
   11278:	2301      	movs	r3, #1
   1127a:	e000      	b.n	1127e <addAlternateNumber+0x46>
	}
	return false;
   1127c:	2300      	movs	r3, #0
}
   1127e:	0018      	movs	r0, r3
   11280:	46bd      	mov	sp, r7
   11282:	b002      	add	sp, #8
   11284:	bd80      	pop	{r7, pc}
   11286:	46c0      	nop			; (mov r8, r8)
   11288:	20000614 	.word	0x20000614
   1128c:	2000063c 	.word	0x2000063c
   11290:	20000640 	.word	0x20000640
   11294:	00028c63 	.word	0x00028c63
   11298:	20000584 	.word	0x20000584
   1129c:	000289ad 	.word	0x000289ad
   112a0:	00023661 	.word	0x00023661
   112a4:	00023809 	.word	0x00023809

000112a8 <saveAutoStartSettings>:

void saveAutoStartSettings(bool flag)
{
   112a8:	b580      	push	{r7, lr}
   112aa:	b082      	sub	sp, #8
   112ac:	af00      	add	r7, sp, #0
   112ae:	0002      	movs	r2, r0
   112b0:	1dfb      	adds	r3, r7, #7
   112b2:	701a      	strb	r2, [r3, #0]
	user_settings_parameter_struct.autoStartAddress = (uint8_t)flag;
   112b4:	1dfb      	adds	r3, r7, #7
   112b6:	781a      	ldrb	r2, [r3, #0]
   112b8:	4b09      	ldr	r3, [pc, #36]	; (112e0 <saveAutoStartSettings+0x38>)
   112ba:	705a      	strb	r2, [r3, #1]
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
   112bc:	4908      	ldr	r1, [pc, #32]	; (112e0 <saveAutoStartSettings+0x38>)
   112be:	4b09      	ldr	r3, [pc, #36]	; (112e4 <saveAutoStartSettings+0x3c>)
   112c0:	2230      	movs	r2, #48	; 0x30
   112c2:	0018      	movs	r0, r3
   112c4:	4b08      	ldr	r3, [pc, #32]	; (112e8 <saveAutoStartSettings+0x40>)
   112c6:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
   112c8:	4b06      	ldr	r3, [pc, #24]	; (112e4 <saveAutoStartSettings+0x3c>)
   112ca:	0019      	movs	r1, r3
   112cc:	201a      	movs	r0, #26
   112ce:	4b07      	ldr	r3, [pc, #28]	; (112ec <saveAutoStartSettings+0x44>)
   112d0:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   112d2:	4b07      	ldr	r3, [pc, #28]	; (112f0 <saveAutoStartSettings+0x48>)
   112d4:	4798      	blx	r3
}
   112d6:	46c0      	nop			; (mov r8, r8)
   112d8:	46bd      	mov	sp, r7
   112da:	b002      	add	sp, #8
   112dc:	bd80      	pop	{r7, pc}
   112de:	46c0      	nop			; (mov r8, r8)
   112e0:	20000654 	.word	0x20000654
   112e4:	20000584 	.word	0x20000584
   112e8:	000289ad 	.word	0x000289ad
   112ec:	00023661 	.word	0x00023661
   112f0:	00023809 	.word	0x00023809

000112f4 <saveAutoStartTimeSettings>:

void saveAutoStartTimeSettings(uint16_t value)
{
   112f4:	b580      	push	{r7, lr}
   112f6:	b082      	sub	sp, #8
   112f8:	af00      	add	r7, sp, #0
   112fa:	0002      	movs	r2, r0
   112fc:	1dbb      	adds	r3, r7, #6
   112fe:	801a      	strh	r2, [r3, #0]
	user_settings_parameter_struct.autoStartTimeAddress = value;
   11300:	4b0a      	ldr	r3, [pc, #40]	; (1132c <saveAutoStartTimeSettings+0x38>)
   11302:	1dba      	adds	r2, r7, #6
   11304:	8812      	ldrh	r2, [r2, #0]
   11306:	805a      	strh	r2, [r3, #2]
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
   11308:	4908      	ldr	r1, [pc, #32]	; (1132c <saveAutoStartTimeSettings+0x38>)
   1130a:	4b09      	ldr	r3, [pc, #36]	; (11330 <saveAutoStartTimeSettings+0x3c>)
   1130c:	2230      	movs	r2, #48	; 0x30
   1130e:	0018      	movs	r0, r3
   11310:	4b08      	ldr	r3, [pc, #32]	; (11334 <saveAutoStartTimeSettings+0x40>)
   11312:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
   11314:	4b06      	ldr	r3, [pc, #24]	; (11330 <saveAutoStartTimeSettings+0x3c>)
   11316:	0019      	movs	r1, r3
   11318:	201a      	movs	r0, #26
   1131a:	4b07      	ldr	r3, [pc, #28]	; (11338 <saveAutoStartTimeSettings+0x44>)
   1131c:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   1131e:	4b07      	ldr	r3, [pc, #28]	; (1133c <saveAutoStartTimeSettings+0x48>)
   11320:	4798      	blx	r3
}
   11322:	46c0      	nop			; (mov r8, r8)
   11324:	46bd      	mov	sp, r7
   11326:	b002      	add	sp, #8
   11328:	bd80      	pop	{r7, pc}
   1132a:	46c0      	nop			; (mov r8, r8)
   1132c:	20000654 	.word	0x20000654
   11330:	20000584 	.word	0x20000584
   11334:	000289ad 	.word	0x000289ad
   11338:	00023661 	.word	0x00023661
   1133c:	00023809 	.word	0x00023809

00011340 <saveDNDSettings>:

void saveDNDSettings(char flag)
{
   11340:	b580      	push	{r7, lr}
   11342:	b082      	sub	sp, #8
   11344:	af00      	add	r7, sp, #0
   11346:	0002      	movs	r2, r0
   11348:	1dfb      	adds	r3, r7, #7
   1134a:	701a      	strb	r2, [r3, #0]
	user_settings_parameter_struct.dndAddress = flag;
   1134c:	4b0a      	ldr	r3, [pc, #40]	; (11378 <saveDNDSettings+0x38>)
   1134e:	1dfa      	adds	r2, r7, #7
   11350:	7812      	ldrb	r2, [r2, #0]
   11352:	711a      	strb	r2, [r3, #4]
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
   11354:	4908      	ldr	r1, [pc, #32]	; (11378 <saveDNDSettings+0x38>)
   11356:	4b09      	ldr	r3, [pc, #36]	; (1137c <saveDNDSettings+0x3c>)
   11358:	2230      	movs	r2, #48	; 0x30
   1135a:	0018      	movs	r0, r3
   1135c:	4b08      	ldr	r3, [pc, #32]	; (11380 <saveDNDSettings+0x40>)
   1135e:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
   11360:	4b06      	ldr	r3, [pc, #24]	; (1137c <saveDNDSettings+0x3c>)
   11362:	0019      	movs	r1, r3
   11364:	201a      	movs	r0, #26
   11366:	4b07      	ldr	r3, [pc, #28]	; (11384 <saveDNDSettings+0x44>)
   11368:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   1136a:	4b07      	ldr	r3, [pc, #28]	; (11388 <saveDNDSettings+0x48>)
   1136c:	4798      	blx	r3
}
   1136e:	46c0      	nop			; (mov r8, r8)
   11370:	46bd      	mov	sp, r7
   11372:	b002      	add	sp, #8
   11374:	bd80      	pop	{r7, pc}
   11376:	46c0      	nop			; (mov r8, r8)
   11378:	20000654 	.word	0x20000654
   1137c:	20000584 	.word	0x20000584
   11380:	000289ad 	.word	0x000289ad
   11384:	00023661 	.word	0x00023661
   11388:	00023809 	.word	0x00023809

0001138c <saveResponseSettings>:
//eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
//eeprom_emulator_commit_page_buffer();
//}

void saveResponseSettings(char response)
{
   1138c:	b580      	push	{r7, lr}
   1138e:	b082      	sub	sp, #8
   11390:	af00      	add	r7, sp, #0
   11392:	0002      	movs	r2, r0
   11394:	1dfb      	adds	r3, r7, #7
   11396:	701a      	strb	r2, [r3, #0]
	user_settings_parameter_struct.responseAddress = response;
   11398:	4b0a      	ldr	r3, [pc, #40]	; (113c4 <saveResponseSettings+0x38>)
   1139a:	1dfa      	adds	r2, r7, #7
   1139c:	7812      	ldrb	r2, [r2, #0]
   1139e:	715a      	strb	r2, [r3, #5]
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
   113a0:	4908      	ldr	r1, [pc, #32]	; (113c4 <saveResponseSettings+0x38>)
   113a2:	4b09      	ldr	r3, [pc, #36]	; (113c8 <saveResponseSettings+0x3c>)
   113a4:	2230      	movs	r2, #48	; 0x30
   113a6:	0018      	movs	r0, r3
   113a8:	4b08      	ldr	r3, [pc, #32]	; (113cc <saveResponseSettings+0x40>)
   113aa:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
   113ac:	4b06      	ldr	r3, [pc, #24]	; (113c8 <saveResponseSettings+0x3c>)
   113ae:	0019      	movs	r1, r3
   113b0:	201a      	movs	r0, #26
   113b2:	4b07      	ldr	r3, [pc, #28]	; (113d0 <saveResponseSettings+0x44>)
   113b4:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   113b6:	4b07      	ldr	r3, [pc, #28]	; (113d4 <saveResponseSettings+0x48>)
   113b8:	4798      	blx	r3
}
   113ba:	46c0      	nop			; (mov r8, r8)
   113bc:	46bd      	mov	sp, r7
   113be:	b002      	add	sp, #8
   113c0:	bd80      	pop	{r7, pc}
   113c2:	46c0      	nop			; (mov r8, r8)
   113c4:	20000654 	.word	0x20000654
   113c8:	20000584 	.word	0x20000584
   113cc:	000289ad 	.word	0x000289ad
   113d0:	00023661 	.word	0x00023661
   113d4:	00023809 	.word	0x00023809

000113d8 <saveNoCallSettings>:

void saveNoCallSettings(bool flag,uint8_t startHour,uint8_t startMinute,uint8_t stopHour,uint8_t stopMinute)
{
   113d8:	b5b0      	push	{r4, r5, r7, lr}
   113da:	b082      	sub	sp, #8
   113dc:	af00      	add	r7, sp, #0
   113de:	0005      	movs	r5, r0
   113e0:	000c      	movs	r4, r1
   113e2:	0010      	movs	r0, r2
   113e4:	0019      	movs	r1, r3
   113e6:	1dfb      	adds	r3, r7, #7
   113e8:	1c2a      	adds	r2, r5, #0
   113ea:	701a      	strb	r2, [r3, #0]
   113ec:	1dbb      	adds	r3, r7, #6
   113ee:	1c22      	adds	r2, r4, #0
   113f0:	701a      	strb	r2, [r3, #0]
   113f2:	1d7b      	adds	r3, r7, #5
   113f4:	1c02      	adds	r2, r0, #0
   113f6:	701a      	strb	r2, [r3, #0]
   113f8:	1d3b      	adds	r3, r7, #4
   113fa:	1c0a      	adds	r2, r1, #0
   113fc:	701a      	strb	r2, [r3, #0]
	user_settings_parameter_struct.noCallAddress = (uint8_t)flag;
   113fe:	1dfb      	adds	r3, r7, #7
   11400:	781a      	ldrb	r2, [r3, #0]
   11402:	4b14      	ldr	r3, [pc, #80]	; (11454 <saveNoCallSettings+0x7c>)
   11404:	725a      	strb	r2, [r3, #9]
	if (user_settings_parameter_struct.noCallAddress)
   11406:	4b13      	ldr	r3, [pc, #76]	; (11454 <saveNoCallSettings+0x7c>)
   11408:	7a5b      	ldrb	r3, [r3, #9]
   1140a:	b2db      	uxtb	r3, r3
   1140c:	2b00      	cmp	r3, #0
   1140e:	d010      	beq.n	11432 <saveNoCallSettings+0x5a>
	{
		user_settings_parameter_struct.noCallStartTimeHourAddress = startHour;
   11410:	4b10      	ldr	r3, [pc, #64]	; (11454 <saveNoCallSettings+0x7c>)
   11412:	1dba      	adds	r2, r7, #6
   11414:	7812      	ldrb	r2, [r2, #0]
   11416:	729a      	strb	r2, [r3, #10]
		user_settings_parameter_struct.noCallStartTimeMinuteAddress = startMinute;
   11418:	4b0e      	ldr	r3, [pc, #56]	; (11454 <saveNoCallSettings+0x7c>)
   1141a:	1d7a      	adds	r2, r7, #5
   1141c:	7812      	ldrb	r2, [r2, #0]
   1141e:	72da      	strb	r2, [r3, #11]
		
		user_settings_parameter_struct.noCallStopTimeHourAddress = stopHour;
   11420:	4b0c      	ldr	r3, [pc, #48]	; (11454 <saveNoCallSettings+0x7c>)
   11422:	1d3a      	adds	r2, r7, #4
   11424:	7812      	ldrb	r2, [r2, #0]
   11426:	731a      	strb	r2, [r3, #12]
		user_settings_parameter_struct.noCallStopTimeMinuteAddress = stopMinute;
   11428:	4b0a      	ldr	r3, [pc, #40]	; (11454 <saveNoCallSettings+0x7c>)
   1142a:	2218      	movs	r2, #24
   1142c:	18ba      	adds	r2, r7, r2
   1142e:	7812      	ldrb	r2, [r2, #0]
   11430:	735a      	strb	r2, [r3, #13]
	}
	
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
   11432:	4908      	ldr	r1, [pc, #32]	; (11454 <saveNoCallSettings+0x7c>)
   11434:	4b08      	ldr	r3, [pc, #32]	; (11458 <saveNoCallSettings+0x80>)
   11436:	2230      	movs	r2, #48	; 0x30
   11438:	0018      	movs	r0, r3
   1143a:	4b08      	ldr	r3, [pc, #32]	; (1145c <saveNoCallSettings+0x84>)
   1143c:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
   1143e:	4b06      	ldr	r3, [pc, #24]	; (11458 <saveNoCallSettings+0x80>)
   11440:	0019      	movs	r1, r3
   11442:	201a      	movs	r0, #26
   11444:	4b06      	ldr	r3, [pc, #24]	; (11460 <saveNoCallSettings+0x88>)
   11446:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   11448:	4b06      	ldr	r3, [pc, #24]	; (11464 <saveNoCallSettings+0x8c>)
   1144a:	4798      	blx	r3
}
   1144c:	46c0      	nop			; (mov r8, r8)
   1144e:	46bd      	mov	sp, r7
   11450:	b002      	add	sp, #8
   11452:	bdb0      	pop	{r4, r5, r7, pc}
   11454:	20000654 	.word	0x20000654
   11458:	20000584 	.word	0x20000584
   1145c:	000289ad 	.word	0x000289ad
   11460:	00023661 	.word	0x00023661
   11464:	00023809 	.word	0x00023809

00011468 <saveWaterBypassSettings>:

void saveWaterBypassSettings(bool flag)
{
   11468:	b580      	push	{r7, lr}
   1146a:	b082      	sub	sp, #8
   1146c:	af00      	add	r7, sp, #0
   1146e:	0002      	movs	r2, r0
   11470:	1dfb      	adds	r3, r7, #7
   11472:	701a      	strb	r2, [r3, #0]
	user_settings_parameter_struct.waterBypassAddress = (uint8_t)flag;
   11474:	1dfb      	adds	r3, r7, #7
   11476:	781a      	ldrb	r2, [r3, #0]
   11478:	4b09      	ldr	r3, [pc, #36]	; (114a0 <saveWaterBypassSettings+0x38>)
   1147a:	77da      	strb	r2, [r3, #31]
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
   1147c:	4908      	ldr	r1, [pc, #32]	; (114a0 <saveWaterBypassSettings+0x38>)
   1147e:	4b09      	ldr	r3, [pc, #36]	; (114a4 <saveWaterBypassSettings+0x3c>)
   11480:	2230      	movs	r2, #48	; 0x30
   11482:	0018      	movs	r0, r3
   11484:	4b08      	ldr	r3, [pc, #32]	; (114a8 <saveWaterBypassSettings+0x40>)
   11486:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
   11488:	4b06      	ldr	r3, [pc, #24]	; (114a4 <saveWaterBypassSettings+0x3c>)
   1148a:	0019      	movs	r1, r3
   1148c:	201a      	movs	r0, #26
   1148e:	4b07      	ldr	r3, [pc, #28]	; (114ac <saveWaterBypassSettings+0x44>)
   11490:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   11492:	4b07      	ldr	r3, [pc, #28]	; (114b0 <saveWaterBypassSettings+0x48>)
   11494:	4798      	blx	r3
}
   11496:	46c0      	nop			; (mov r8, r8)
   11498:	46bd      	mov	sp, r7
   1149a:	b002      	add	sp, #8
   1149c:	bd80      	pop	{r7, pc}
   1149e:	46c0      	nop			; (mov r8, r8)
   114a0:	20000654 	.word	0x20000654
   114a4:	20000584 	.word	0x20000584
   114a8:	000289ad 	.word	0x000289ad
   114ac:	00023661 	.word	0x00023661
   114b0:	00023809 	.word	0x00023809

000114b4 <savePreventOverFlowSettings>:

void savePreventOverFlowSettings(bool flag)
{
   114b4:	b580      	push	{r7, lr}
   114b6:	b082      	sub	sp, #8
   114b8:	af00      	add	r7, sp, #0
   114ba:	0002      	movs	r2, r0
   114bc:	1dfb      	adds	r3, r7, #7
   114be:	701a      	strb	r2, [r3, #0]
	user_settings_parameter_struct.preventOverFlowAddress = (uint8_t)flag;
   114c0:	1dfb      	adds	r3, r7, #7
   114c2:	781a      	ldrb	r2, [r3, #0]
   114c4:	4b09      	ldr	r3, [pc, #36]	; (114ec <savePreventOverFlowSettings+0x38>)
   114c6:	779a      	strb	r2, [r3, #30]
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
   114c8:	4908      	ldr	r1, [pc, #32]	; (114ec <savePreventOverFlowSettings+0x38>)
   114ca:	4b09      	ldr	r3, [pc, #36]	; (114f0 <savePreventOverFlowSettings+0x3c>)
   114cc:	2230      	movs	r2, #48	; 0x30
   114ce:	0018      	movs	r0, r3
   114d0:	4b08      	ldr	r3, [pc, #32]	; (114f4 <savePreventOverFlowSettings+0x40>)
   114d2:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
   114d4:	4b06      	ldr	r3, [pc, #24]	; (114f0 <savePreventOverFlowSettings+0x3c>)
   114d6:	0019      	movs	r1, r3
   114d8:	201a      	movs	r0, #26
   114da:	4b07      	ldr	r3, [pc, #28]	; (114f8 <savePreventOverFlowSettings+0x44>)
   114dc:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   114de:	4b07      	ldr	r3, [pc, #28]	; (114fc <savePreventOverFlowSettings+0x48>)
   114e0:	4798      	blx	r3
}
   114e2:	46c0      	nop			; (mov r8, r8)
   114e4:	46bd      	mov	sp, r7
   114e6:	b002      	add	sp, #8
   114e8:	bd80      	pop	{r7, pc}
   114ea:	46c0      	nop			; (mov r8, r8)
   114ec:	20000654 	.word	0x20000654
   114f0:	20000584 	.word	0x20000584
   114f4:	000289ad 	.word	0x000289ad
   114f8:	00023661 	.word	0x00023661
   114fc:	00023809 	.word	0x00023809

00011500 <setOverloadPer>:
//eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
//eeprom_emulator_commit_page_buffer();
//}

bool setOverloadPer(uint8_t overloadPerValue)
{
   11500:	b580      	push	{r7, lr}
   11502:	b082      	sub	sp, #8
   11504:	af00      	add	r7, sp, #0
   11506:	0002      	movs	r2, r0
   11508:	1dfb      	adds	r3, r7, #7
   1150a:	701a      	strb	r2, [r3, #0]
	if(overloadPerValue>100)
   1150c:	1dfb      	adds	r3, r7, #7
   1150e:	781b      	ldrb	r3, [r3, #0]
   11510:	2b64      	cmp	r3, #100	; 0x64
   11512:	d919      	bls.n	11548 <setOverloadPer+0x48>
	{
		user_settings_parameter_struct.overloadPerAddress = overloadPerValue;
   11514:	4b0f      	ldr	r3, [pc, #60]	; (11554 <setOverloadPer+0x54>)
   11516:	1dfa      	adds	r2, r7, #7
   11518:	7812      	ldrb	r2, [r2, #0]
   1151a:	775a      	strb	r2, [r3, #29]
		memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
   1151c:	490d      	ldr	r1, [pc, #52]	; (11554 <setOverloadPer+0x54>)
   1151e:	4b0e      	ldr	r3, [pc, #56]	; (11558 <setOverloadPer+0x58>)
   11520:	2230      	movs	r2, #48	; 0x30
   11522:	0018      	movs	r0, r3
   11524:	4b0d      	ldr	r3, [pc, #52]	; (1155c <setOverloadPer+0x5c>)
   11526:	4798      	blx	r3
		eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
   11528:	4b0b      	ldr	r3, [pc, #44]	; (11558 <setOverloadPer+0x58>)
   1152a:	0019      	movs	r1, r3
   1152c:	201a      	movs	r0, #26
   1152e:	4b0c      	ldr	r3, [pc, #48]	; (11560 <setOverloadPer+0x60>)
   11530:	4798      	blx	r3
		eeprom_emulator_commit_page_buffer();
   11532:	4b0c      	ldr	r3, [pc, #48]	; (11564 <setOverloadPer+0x64>)
   11534:	4798      	blx	r3
		
		if (user_settings_parameter_struct.currentDetectionAddress)
   11536:	4b07      	ldr	r3, [pc, #28]	; (11554 <setOverloadPer+0x54>)
   11538:	7bdb      	ldrb	r3, [r3, #15]
   1153a:	b2db      	uxtb	r3, r3
   1153c:	2b00      	cmp	r3, #0
   1153e:	d001      	beq.n	11544 <setOverloadPer+0x44>
		{
			calcCurrentValues();
   11540:	4b09      	ldr	r3, [pc, #36]	; (11568 <setOverloadPer+0x68>)
   11542:	4798      	blx	r3
		}
		return true;
   11544:	2301      	movs	r3, #1
   11546:	e000      	b.n	1154a <setOverloadPer+0x4a>
	}
	return false;
   11548:	2300      	movs	r3, #0
}
   1154a:	0018      	movs	r0, r3
   1154c:	46bd      	mov	sp, r7
   1154e:	b002      	add	sp, #8
   11550:	bd80      	pop	{r7, pc}
   11552:	46c0      	nop			; (mov r8, r8)
   11554:	20000654 	.word	0x20000654
   11558:	20000584 	.word	0x20000584
   1155c:	000289ad 	.word	0x000289ad
   11560:	00023661 	.word	0x00023661
   11564:	00023809 	.word	0x00023809
   11568:	000117ed 	.word	0x000117ed

0001156c <setUnderloadPer>:

bool setUnderloadPer(uint8_t underloadPerValue)
{
   1156c:	b580      	push	{r7, lr}
   1156e:	b082      	sub	sp, #8
   11570:	af00      	add	r7, sp, #0
   11572:	0002      	movs	r2, r0
   11574:	1dfb      	adds	r3, r7, #7
   11576:	701a      	strb	r2, [r3, #0]
	if(underloadPerValue>0 && underloadPerValue <100)
   11578:	1dfb      	adds	r3, r7, #7
   1157a:	781b      	ldrb	r3, [r3, #0]
   1157c:	2b00      	cmp	r3, #0
   1157e:	d01d      	beq.n	115bc <setUnderloadPer+0x50>
   11580:	1dfb      	adds	r3, r7, #7
   11582:	781b      	ldrb	r3, [r3, #0]
   11584:	2b63      	cmp	r3, #99	; 0x63
   11586:	d819      	bhi.n	115bc <setUnderloadPer+0x50>
	{
		user_settings_parameter_struct.underloadPerAddress = underloadPerValue;
   11588:	4b0f      	ldr	r3, [pc, #60]	; (115c8 <setUnderloadPer+0x5c>)
   1158a:	1dfa      	adds	r2, r7, #7
   1158c:	7812      	ldrb	r2, [r2, #0]
   1158e:	771a      	strb	r2, [r3, #28]
		memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
   11590:	490d      	ldr	r1, [pc, #52]	; (115c8 <setUnderloadPer+0x5c>)
   11592:	4b0e      	ldr	r3, [pc, #56]	; (115cc <setUnderloadPer+0x60>)
   11594:	2230      	movs	r2, #48	; 0x30
   11596:	0018      	movs	r0, r3
   11598:	4b0d      	ldr	r3, [pc, #52]	; (115d0 <setUnderloadPer+0x64>)
   1159a:	4798      	blx	r3
		eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
   1159c:	4b0b      	ldr	r3, [pc, #44]	; (115cc <setUnderloadPer+0x60>)
   1159e:	0019      	movs	r1, r3
   115a0:	201a      	movs	r0, #26
   115a2:	4b0c      	ldr	r3, [pc, #48]	; (115d4 <setUnderloadPer+0x68>)
   115a4:	4798      	blx	r3
		eeprom_emulator_commit_page_buffer();
   115a6:	4b0c      	ldr	r3, [pc, #48]	; (115d8 <setUnderloadPer+0x6c>)
   115a8:	4798      	blx	r3
		if (user_settings_parameter_struct.currentDetectionAddress)
   115aa:	4b07      	ldr	r3, [pc, #28]	; (115c8 <setUnderloadPer+0x5c>)
   115ac:	7bdb      	ldrb	r3, [r3, #15]
   115ae:	b2db      	uxtb	r3, r3
   115b0:	2b00      	cmp	r3, #0
   115b2:	d001      	beq.n	115b8 <setUnderloadPer+0x4c>
		{
			calcCurrentValues();
   115b4:	4b09      	ldr	r3, [pc, #36]	; (115dc <setUnderloadPer+0x70>)
   115b6:	4798      	blx	r3
		}
		return true;
   115b8:	2301      	movs	r3, #1
   115ba:	e000      	b.n	115be <setUnderloadPer+0x52>
	}
	return false;
   115bc:	2300      	movs	r3, #0
}
   115be:	0018      	movs	r0, r3
   115c0:	46bd      	mov	sp, r7
   115c2:	b002      	add	sp, #8
   115c4:	bd80      	pop	{r7, pc}
   115c6:	46c0      	nop			; (mov r8, r8)
   115c8:	20000654 	.word	0x20000654
   115cc:	20000584 	.word	0x20000584
   115d0:	000289ad 	.word	0x000289ad
   115d4:	00023661 	.word	0x00023661
   115d8:	00023809 	.word	0x00023809
   115dc:	000117ed 	.word	0x000117ed

000115e0 <saveSinglePhasingSettings>:

void saveSinglePhasingSettings(bool singlePhasing)
{
   115e0:	b580      	push	{r7, lr}
   115e2:	b082      	sub	sp, #8
   115e4:	af00      	add	r7, sp, #0
   115e6:	0002      	movs	r2, r0
   115e8:	1dfb      	adds	r3, r7, #7
   115ea:	701a      	strb	r2, [r3, #0]
	user_settings_parameter_struct.detectSinglePhasing=singlePhasing;
   115ec:	1dfb      	adds	r3, r7, #7
   115ee:	7819      	ldrb	r1, [r3, #0]
   115f0:	4b09      	ldr	r3, [pc, #36]	; (11618 <saveSinglePhasingSettings+0x38>)
   115f2:	2220      	movs	r2, #32
   115f4:	5499      	strb	r1, [r3, r2]
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
   115f6:	4908      	ldr	r1, [pc, #32]	; (11618 <saveSinglePhasingSettings+0x38>)
   115f8:	4b08      	ldr	r3, [pc, #32]	; (1161c <saveSinglePhasingSettings+0x3c>)
   115fa:	2230      	movs	r2, #48	; 0x30
   115fc:	0018      	movs	r0, r3
   115fe:	4b08      	ldr	r3, [pc, #32]	; (11620 <saveSinglePhasingSettings+0x40>)
   11600:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
   11602:	4b06      	ldr	r3, [pc, #24]	; (1161c <saveSinglePhasingSettings+0x3c>)
   11604:	0019      	movs	r1, r3
   11606:	201a      	movs	r0, #26
   11608:	4b06      	ldr	r3, [pc, #24]	; (11624 <saveSinglePhasingSettings+0x44>)
   1160a:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   1160c:	4b06      	ldr	r3, [pc, #24]	; (11628 <saveSinglePhasingSettings+0x48>)
   1160e:	4798      	blx	r3
}
   11610:	46c0      	nop			; (mov r8, r8)
   11612:	46bd      	mov	sp, r7
   11614:	b002      	add	sp, #8
   11616:	bd80      	pop	{r7, pc}
   11618:	20000654 	.word	0x20000654
   1161c:	20000584 	.word	0x20000584
   11620:	000289ad 	.word	0x000289ad
   11624:	00023661 	.word	0x00023661
   11628:	00023809 	.word	0x00023809

0001162c <saveSinglePhasingVoltage>:

void saveSinglePhasingVoltage(uint16_t voltage)
{
   1162c:	b580      	push	{r7, lr}
   1162e:	b082      	sub	sp, #8
   11630:	af00      	add	r7, sp, #0
   11632:	0002      	movs	r2, r0
   11634:	1dbb      	adds	r3, r7, #6
   11636:	801a      	strh	r2, [r3, #0]
	user_settings_parameter_struct.singlePhasingVoltage= voltage;
   11638:	4b0a      	ldr	r3, [pc, #40]	; (11664 <saveSinglePhasingVoltage+0x38>)
   1163a:	1dba      	adds	r2, r7, #6
   1163c:	8812      	ldrh	r2, [r2, #0]
   1163e:	845a      	strh	r2, [r3, #34]	; 0x22
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
   11640:	4908      	ldr	r1, [pc, #32]	; (11664 <saveSinglePhasingVoltage+0x38>)
   11642:	4b09      	ldr	r3, [pc, #36]	; (11668 <saveSinglePhasingVoltage+0x3c>)
   11644:	2230      	movs	r2, #48	; 0x30
   11646:	0018      	movs	r0, r3
   11648:	4b08      	ldr	r3, [pc, #32]	; (1166c <saveSinglePhasingVoltage+0x40>)
   1164a:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
   1164c:	4b06      	ldr	r3, [pc, #24]	; (11668 <saveSinglePhasingVoltage+0x3c>)
   1164e:	0019      	movs	r1, r3
   11650:	201a      	movs	r0, #26
   11652:	4b07      	ldr	r3, [pc, #28]	; (11670 <saveSinglePhasingVoltage+0x44>)
   11654:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   11656:	4b07      	ldr	r3, [pc, #28]	; (11674 <saveSinglePhasingVoltage+0x48>)
   11658:	4798      	blx	r3
}
   1165a:	46c0      	nop			; (mov r8, r8)
   1165c:	46bd      	mov	sp, r7
   1165e:	b002      	add	sp, #8
   11660:	bd80      	pop	{r7, pc}
   11662:	46c0      	nop			; (mov r8, r8)
   11664:	20000654 	.word	0x20000654
   11668:	20000584 	.word	0x20000584
   1166c:	000289ad 	.word	0x000289ad
   11670:	00023661 	.word	0x00023661
   11674:	00023809 	.word	0x00023809

00011678 <savePhaseSequenceProtectionSettings>:

void savePhaseSequenceProtectionSettings(bool phaseSequenceSetting)
{
   11678:	b580      	push	{r7, lr}
   1167a:	b082      	sub	sp, #8
   1167c:	af00      	add	r7, sp, #0
   1167e:	0002      	movs	r2, r0
   11680:	1dfb      	adds	r3, r7, #7
   11682:	701a      	strb	r2, [r3, #0]
	user_settings_parameter_struct.detectPhaseSequence= phaseSequenceSetting;
   11684:	1dfb      	adds	r3, r7, #7
   11686:	7819      	ldrb	r1, [r3, #0]
   11688:	4b09      	ldr	r3, [pc, #36]	; (116b0 <savePhaseSequenceProtectionSettings+0x38>)
   1168a:	2224      	movs	r2, #36	; 0x24
   1168c:	5499      	strb	r1, [r3, r2]
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
   1168e:	4908      	ldr	r1, [pc, #32]	; (116b0 <savePhaseSequenceProtectionSettings+0x38>)
   11690:	4b08      	ldr	r3, [pc, #32]	; (116b4 <savePhaseSequenceProtectionSettings+0x3c>)
   11692:	2230      	movs	r2, #48	; 0x30
   11694:	0018      	movs	r0, r3
   11696:	4b08      	ldr	r3, [pc, #32]	; (116b8 <savePhaseSequenceProtectionSettings+0x40>)
   11698:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
   1169a:	4b06      	ldr	r3, [pc, #24]	; (116b4 <savePhaseSequenceProtectionSettings+0x3c>)
   1169c:	0019      	movs	r1, r3
   1169e:	201a      	movs	r0, #26
   116a0:	4b06      	ldr	r3, [pc, #24]	; (116bc <savePhaseSequenceProtectionSettings+0x44>)
   116a2:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   116a4:	4b06      	ldr	r3, [pc, #24]	; (116c0 <savePhaseSequenceProtectionSettings+0x48>)
   116a6:	4798      	blx	r3
}
   116a8:	46c0      	nop			; (mov r8, r8)
   116aa:	46bd      	mov	sp, r7
   116ac:	b002      	add	sp, #8
   116ae:	bd80      	pop	{r7, pc}
   116b0:	20000654 	.word	0x20000654
   116b4:	20000584 	.word	0x20000584
   116b8:	000289ad 	.word	0x000289ad
   116bc:	00023661 	.word	0x00023661
   116c0:	00023809 	.word	0x00023809

000116c4 <saveUnderOverDetectionMethodSettings>:


void saveUnderOverDetectionMethodSettings(uint8_t oumethodDetection)
{
   116c4:	b580      	push	{r7, lr}
   116c6:	b082      	sub	sp, #8
   116c8:	af00      	add	r7, sp, #0
   116ca:	0002      	movs	r2, r0
   116cc:	1dfb      	adds	r3, r7, #7
   116ce:	701a      	strb	r2, [r3, #0]
	user_settings_parameter_struct.over_under_DetectionMethod = oumethodDetection;
   116d0:	4b0a      	ldr	r3, [pc, #40]	; (116fc <saveUnderOverDetectionMethodSettings+0x38>)
   116d2:	1dfa      	adds	r2, r7, #7
   116d4:	2126      	movs	r1, #38	; 0x26
   116d6:	7812      	ldrb	r2, [r2, #0]
   116d8:	545a      	strb	r2, [r3, r1]
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
   116da:	4908      	ldr	r1, [pc, #32]	; (116fc <saveUnderOverDetectionMethodSettings+0x38>)
   116dc:	4b08      	ldr	r3, [pc, #32]	; (11700 <saveUnderOverDetectionMethodSettings+0x3c>)
   116de:	2230      	movs	r2, #48	; 0x30
   116e0:	0018      	movs	r0, r3
   116e2:	4b08      	ldr	r3, [pc, #32]	; (11704 <saveUnderOverDetectionMethodSettings+0x40>)
   116e4:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
   116e6:	4b06      	ldr	r3, [pc, #24]	; (11700 <saveUnderOverDetectionMethodSettings+0x3c>)
   116e8:	0019      	movs	r1, r3
   116ea:	201a      	movs	r0, #26
   116ec:	4b06      	ldr	r3, [pc, #24]	; (11708 <saveUnderOverDetectionMethodSettings+0x44>)
   116ee:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   116f0:	4b06      	ldr	r3, [pc, #24]	; (1170c <saveUnderOverDetectionMethodSettings+0x48>)
   116f2:	4798      	blx	r3
}
   116f4:	46c0      	nop			; (mov r8, r8)
   116f6:	46bd      	mov	sp, r7
   116f8:	b002      	add	sp, #8
   116fa:	bd80      	pop	{r7, pc}
   116fc:	20000654 	.word	0x20000654
   11700:	20000584 	.word	0x20000584
   11704:	000289ad 	.word	0x000289ad
   11708:	00023661 	.word	0x00023661
   1170c:	00023809 	.word	0x00023809

00011710 <saveMotorVoltageBypassSettings>:

void saveMotorVoltageBypassSettings(bool flag)
{
   11710:	b580      	push	{r7, lr}
   11712:	b082      	sub	sp, #8
   11714:	af00      	add	r7, sp, #0
   11716:	0002      	movs	r2, r0
   11718:	1dfb      	adds	r3, r7, #7
   1171a:	701a      	strb	r2, [r3, #0]
	user_settings_parameter_struct.motorVoltageBypass=flag;
   1171c:	1dfb      	adds	r3, r7, #7
   1171e:	7819      	ldrb	r1, [r3, #0]
   11720:	4b09      	ldr	r3, [pc, #36]	; (11748 <saveMotorVoltageBypassSettings+0x38>)
   11722:	2227      	movs	r2, #39	; 0x27
   11724:	5499      	strb	r1, [r3, r2]
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
   11726:	4908      	ldr	r1, [pc, #32]	; (11748 <saveMotorVoltageBypassSettings+0x38>)
   11728:	4b08      	ldr	r3, [pc, #32]	; (1174c <saveMotorVoltageBypassSettings+0x3c>)
   1172a:	2230      	movs	r2, #48	; 0x30
   1172c:	0018      	movs	r0, r3
   1172e:	4b08      	ldr	r3, [pc, #32]	; (11750 <saveMotorVoltageBypassSettings+0x40>)
   11730:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
   11732:	4b06      	ldr	r3, [pc, #24]	; (1174c <saveMotorVoltageBypassSettings+0x3c>)
   11734:	0019      	movs	r1, r3
   11736:	201a      	movs	r0, #26
   11738:	4b06      	ldr	r3, [pc, #24]	; (11754 <saveMotorVoltageBypassSettings+0x44>)
   1173a:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   1173c:	4b06      	ldr	r3, [pc, #24]	; (11758 <saveMotorVoltageBypassSettings+0x48>)
   1173e:	4798      	blx	r3
}
   11740:	46c0      	nop			; (mov r8, r8)
   11742:	46bd      	mov	sp, r7
   11744:	b002      	add	sp, #8
   11746:	bd80      	pop	{r7, pc}
   11748:	20000654 	.word	0x20000654
   1174c:	20000584 	.word	0x20000584
   11750:	000289ad 	.word	0x000289ad
   11754:	00023661 	.word	0x00023661
   11758:	00023809 	.word	0x00023809

0001175c <saveMotorVoltageBypasssTimeSettings>:

void saveMotorVoltageBypasssTimeSettings(uint32_t value)
{
   1175c:	b580      	push	{r7, lr}
   1175e:	b082      	sub	sp, #8
   11760:	af00      	add	r7, sp, #0
   11762:	6078      	str	r0, [r7, #4]
	user_settings_parameter_struct.motorVoltageBypassTime=value;
   11764:	4b09      	ldr	r3, [pc, #36]	; (1178c <saveMotorVoltageBypasssTimeSettings+0x30>)
   11766:	687a      	ldr	r2, [r7, #4]
   11768:	629a      	str	r2, [r3, #40]	; 0x28
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
   1176a:	4908      	ldr	r1, [pc, #32]	; (1178c <saveMotorVoltageBypasssTimeSettings+0x30>)
   1176c:	4b08      	ldr	r3, [pc, #32]	; (11790 <saveMotorVoltageBypasssTimeSettings+0x34>)
   1176e:	2230      	movs	r2, #48	; 0x30
   11770:	0018      	movs	r0, r3
   11772:	4b08      	ldr	r3, [pc, #32]	; (11794 <saveMotorVoltageBypasssTimeSettings+0x38>)
   11774:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
   11776:	4b06      	ldr	r3, [pc, #24]	; (11790 <saveMotorVoltageBypasssTimeSettings+0x34>)
   11778:	0019      	movs	r1, r3
   1177a:	201a      	movs	r0, #26
   1177c:	4b06      	ldr	r3, [pc, #24]	; (11798 <saveMotorVoltageBypasssTimeSettings+0x3c>)
   1177e:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   11780:	4b06      	ldr	r3, [pc, #24]	; (1179c <saveMotorVoltageBypasssTimeSettings+0x40>)
   11782:	4798      	blx	r3
}
   11784:	46c0      	nop			; (mov r8, r8)
   11786:	46bd      	mov	sp, r7
   11788:	b002      	add	sp, #8
   1178a:	bd80      	pop	{r7, pc}
   1178c:	20000654 	.word	0x20000654
   11790:	20000584 	.word	0x20000584
   11794:	000289ad 	.word	0x000289ad
   11798:	00023661 	.word	0x00023661
   1179c:	00023809 	.word	0x00023809

000117a0 <saveMotorFeedbackDetectionSettings>:

void saveMotorFeedbackDetectionSettings(uint8_t motorFeedbackDetection)
{
   117a0:	b580      	push	{r7, lr}
   117a2:	b082      	sub	sp, #8
   117a4:	af00      	add	r7, sp, #0
   117a6:	0002      	movs	r2, r0
   117a8:	1dfb      	adds	r3, r7, #7
   117aa:	701a      	strb	r2, [r3, #0]
	user_settings_parameter_struct.detectMotorFeedback = motorFeedbackDetection;
   117ac:	4b0a      	ldr	r3, [pc, #40]	; (117d8 <saveMotorFeedbackDetectionSettings+0x38>)
   117ae:	1dfa      	adds	r2, r7, #7
   117b0:	2125      	movs	r1, #37	; 0x25
   117b2:	7812      	ldrb	r2, [r2, #0]
   117b4:	545a      	strb	r2, [r3, r1]
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
   117b6:	4908      	ldr	r1, [pc, #32]	; (117d8 <saveMotorFeedbackDetectionSettings+0x38>)
   117b8:	4b08      	ldr	r3, [pc, #32]	; (117dc <saveMotorFeedbackDetectionSettings+0x3c>)
   117ba:	2230      	movs	r2, #48	; 0x30
   117bc:	0018      	movs	r0, r3
   117be:	4b08      	ldr	r3, [pc, #32]	; (117e0 <saveMotorFeedbackDetectionSettings+0x40>)
   117c0:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
   117c2:	4b06      	ldr	r3, [pc, #24]	; (117dc <saveMotorFeedbackDetectionSettings+0x3c>)
   117c4:	0019      	movs	r1, r3
   117c6:	201a      	movs	r0, #26
   117c8:	4b06      	ldr	r3, [pc, #24]	; (117e4 <saveMotorFeedbackDetectionSettings+0x44>)
   117ca:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   117cc:	4b06      	ldr	r3, [pc, #24]	; (117e8 <saveMotorFeedbackDetectionSettings+0x48>)
   117ce:	4798      	blx	r3
}
   117d0:	46c0      	nop			; (mov r8, r8)
   117d2:	46bd      	mov	sp, r7
   117d4:	b002      	add	sp, #8
   117d6:	bd80      	pop	{r7, pc}
   117d8:	20000654 	.word	0x20000654
   117dc:	20000584 	.word	0x20000584
   117e0:	000289ad 	.word	0x000289ad
   117e4:	00023661 	.word	0x00023661
   117e8:	00023809 	.word	0x00023809

000117ec <calcCurrentValues>:


void calcCurrentValues(void)
{
   117ec:	b590      	push	{r4, r7, lr}
   117ee:	b083      	sub	sp, #12
   117f0:	af00      	add	r7, sp, #0
	uint16_t temp = (user_settings_parameter_struct.normalLoadAddress * (float)user_settings_parameter_struct.underloadPerAddress) / 100.0;
   117f2:	4b2c      	ldr	r3, [pc, #176]	; (118a4 <calcCurrentValues+0xb8>)
   117f4:	691a      	ldr	r2, [r3, #16]
   117f6:	4b2c      	ldr	r3, [pc, #176]	; (118a8 <calcCurrentValues+0xbc>)
   117f8:	0010      	movs	r0, r2
   117fa:	4798      	blx	r3
   117fc:	1c04      	adds	r4, r0, #0
   117fe:	4b29      	ldr	r3, [pc, #164]	; (118a4 <calcCurrentValues+0xb8>)
   11800:	7f1b      	ldrb	r3, [r3, #28]
   11802:	b2da      	uxtb	r2, r3
   11804:	4b28      	ldr	r3, [pc, #160]	; (118a8 <calcCurrentValues+0xbc>)
   11806:	0010      	movs	r0, r2
   11808:	4798      	blx	r3
   1180a:	1c02      	adds	r2, r0, #0
   1180c:	4b27      	ldr	r3, [pc, #156]	; (118ac <calcCurrentValues+0xc0>)
   1180e:	1c11      	adds	r1, r2, #0
   11810:	1c20      	adds	r0, r4, #0
   11812:	4798      	blx	r3
   11814:	1c03      	adds	r3, r0, #0
   11816:	1c1a      	adds	r2, r3, #0
   11818:	4b25      	ldr	r3, [pc, #148]	; (118b0 <calcCurrentValues+0xc4>)
   1181a:	1c10      	adds	r0, r2, #0
   1181c:	4798      	blx	r3
   1181e:	4c25      	ldr	r4, [pc, #148]	; (118b4 <calcCurrentValues+0xc8>)
   11820:	2200      	movs	r2, #0
   11822:	4b25      	ldr	r3, [pc, #148]	; (118b8 <calcCurrentValues+0xcc>)
   11824:	47a0      	blx	r4
   11826:	0003      	movs	r3, r0
   11828:	000c      	movs	r4, r1
   1182a:	0019      	movs	r1, r3
   1182c:	0022      	movs	r2, r4
   1182e:	1dbc      	adds	r4, r7, #6
   11830:	4b22      	ldr	r3, [pc, #136]	; (118bc <calcCurrentValues+0xd0>)
   11832:	0008      	movs	r0, r1
   11834:	0011      	movs	r1, r2
   11836:	4798      	blx	r3
   11838:	0003      	movs	r3, r0
   1183a:	8023      	strh	r3, [r4, #0]
	setUnderloadValue(temp);
   1183c:	1dbb      	adds	r3, r7, #6
   1183e:	881b      	ldrh	r3, [r3, #0]
   11840:	0018      	movs	r0, r3
   11842:	4b1f      	ldr	r3, [pc, #124]	; (118c0 <calcCurrentValues+0xd4>)
   11844:	4798      	blx	r3

	temp = (user_settings_parameter_struct.normalLoadAddress * (float)user_settings_parameter_struct.overloadPerAddress) / 100.0;
   11846:	4b17      	ldr	r3, [pc, #92]	; (118a4 <calcCurrentValues+0xb8>)
   11848:	691a      	ldr	r2, [r3, #16]
   1184a:	4b17      	ldr	r3, [pc, #92]	; (118a8 <calcCurrentValues+0xbc>)
   1184c:	0010      	movs	r0, r2
   1184e:	4798      	blx	r3
   11850:	1c04      	adds	r4, r0, #0
   11852:	4b14      	ldr	r3, [pc, #80]	; (118a4 <calcCurrentValues+0xb8>)
   11854:	7f5b      	ldrb	r3, [r3, #29]
   11856:	b2da      	uxtb	r2, r3
   11858:	4b13      	ldr	r3, [pc, #76]	; (118a8 <calcCurrentValues+0xbc>)
   1185a:	0010      	movs	r0, r2
   1185c:	4798      	blx	r3
   1185e:	1c02      	adds	r2, r0, #0
   11860:	4b12      	ldr	r3, [pc, #72]	; (118ac <calcCurrentValues+0xc0>)
   11862:	1c11      	adds	r1, r2, #0
   11864:	1c20      	adds	r0, r4, #0
   11866:	4798      	blx	r3
   11868:	1c03      	adds	r3, r0, #0
   1186a:	1c1a      	adds	r2, r3, #0
   1186c:	4b10      	ldr	r3, [pc, #64]	; (118b0 <calcCurrentValues+0xc4>)
   1186e:	1c10      	adds	r0, r2, #0
   11870:	4798      	blx	r3
   11872:	4c10      	ldr	r4, [pc, #64]	; (118b4 <calcCurrentValues+0xc8>)
   11874:	2200      	movs	r2, #0
   11876:	4b10      	ldr	r3, [pc, #64]	; (118b8 <calcCurrentValues+0xcc>)
   11878:	47a0      	blx	r4
   1187a:	0003      	movs	r3, r0
   1187c:	000c      	movs	r4, r1
   1187e:	0019      	movs	r1, r3
   11880:	0022      	movs	r2, r4
   11882:	1dbc      	adds	r4, r7, #6
   11884:	4b0d      	ldr	r3, [pc, #52]	; (118bc <calcCurrentValues+0xd0>)
   11886:	0008      	movs	r0, r1
   11888:	0011      	movs	r1, r2
   1188a:	4798      	blx	r3
   1188c:	0003      	movs	r3, r0
   1188e:	8023      	strh	r3, [r4, #0]
	setOverloadValue(temp);
   11890:	1dbb      	adds	r3, r7, #6
   11892:	881b      	ldrh	r3, [r3, #0]
   11894:	0018      	movs	r0, r3
   11896:	4b0b      	ldr	r3, [pc, #44]	; (118c4 <calcCurrentValues+0xd8>)
   11898:	4798      	blx	r3
}
   1189a:	46c0      	nop			; (mov r8, r8)
   1189c:	46bd      	mov	sp, r7
   1189e:	b003      	add	sp, #12
   118a0:	bd90      	pop	{r4, r7, pc}
   118a2:	46c0      	nop			; (mov r8, r8)
   118a4:	20000654 	.word	0x20000654
   118a8:	00026bf5 	.word	0x00026bf5
   118ac:	000269b5 	.word	0x000269b5
   118b0:	000287d1 	.word	0x000287d1
   118b4:	000272a1 	.word	0x000272a1
   118b8:	40590000 	.word	0x40590000
   118bc:	00026569 	.word	0x00026569
   118c0:	000118c9 	.word	0x000118c9
   118c4:	0001190d 	.word	0x0001190d

000118c8 <setUnderloadValue>:

void setUnderloadValue(uint32_t underValue)
{
   118c8:	b580      	push	{r7, lr}
   118ca:	b082      	sub	sp, #8
   118cc:	af00      	add	r7, sp, #0
   118ce:	6078      	str	r0, [r7, #4]
	user_settings_parameter_struct.underloadAddress = underValue;
   118d0:	4b09      	ldr	r3, [pc, #36]	; (118f8 <setUnderloadValue+0x30>)
   118d2:	687a      	ldr	r2, [r7, #4]
   118d4:	619a      	str	r2, [r3, #24]
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
   118d6:	4908      	ldr	r1, [pc, #32]	; (118f8 <setUnderloadValue+0x30>)
   118d8:	4b08      	ldr	r3, [pc, #32]	; (118fc <setUnderloadValue+0x34>)
   118da:	2230      	movs	r2, #48	; 0x30
   118dc:	0018      	movs	r0, r3
   118de:	4b08      	ldr	r3, [pc, #32]	; (11900 <setUnderloadValue+0x38>)
   118e0:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
   118e2:	4b06      	ldr	r3, [pc, #24]	; (118fc <setUnderloadValue+0x34>)
   118e4:	0019      	movs	r1, r3
   118e6:	201a      	movs	r0, #26
   118e8:	4b06      	ldr	r3, [pc, #24]	; (11904 <setUnderloadValue+0x3c>)
   118ea:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   118ec:	4b06      	ldr	r3, [pc, #24]	; (11908 <setUnderloadValue+0x40>)
   118ee:	4798      	blx	r3
}
   118f0:	46c0      	nop			; (mov r8, r8)
   118f2:	46bd      	mov	sp, r7
   118f4:	b002      	add	sp, #8
   118f6:	bd80      	pop	{r7, pc}
   118f8:	20000654 	.word	0x20000654
   118fc:	20000584 	.word	0x20000584
   11900:	000289ad 	.word	0x000289ad
   11904:	00023661 	.word	0x00023661
   11908:	00023809 	.word	0x00023809

0001190c <setOverloadValue>:

void setOverloadValue(uint32_t overValue)
{
   1190c:	b580      	push	{r7, lr}
   1190e:	b082      	sub	sp, #8
   11910:	af00      	add	r7, sp, #0
   11912:	6078      	str	r0, [r7, #4]
	user_settings_parameter_struct.overloadAddress = overValue;
   11914:	4b09      	ldr	r3, [pc, #36]	; (1193c <setOverloadValue+0x30>)
   11916:	687a      	ldr	r2, [r7, #4]
   11918:	615a      	str	r2, [r3, #20]
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
   1191a:	4908      	ldr	r1, [pc, #32]	; (1193c <setOverloadValue+0x30>)
   1191c:	4b08      	ldr	r3, [pc, #32]	; (11940 <setOverloadValue+0x34>)
   1191e:	2230      	movs	r2, #48	; 0x30
   11920:	0018      	movs	r0, r3
   11922:	4b08      	ldr	r3, [pc, #32]	; (11944 <setOverloadValue+0x38>)
   11924:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
   11926:	4b06      	ldr	r3, [pc, #24]	; (11940 <setOverloadValue+0x34>)
   11928:	0019      	movs	r1, r3
   1192a:	201a      	movs	r0, #26
   1192c:	4b06      	ldr	r3, [pc, #24]	; (11948 <setOverloadValue+0x3c>)
   1192e:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   11930:	4b06      	ldr	r3, [pc, #24]	; (1194c <setOverloadValue+0x40>)
   11932:	4798      	blx	r3
}
   11934:	46c0      	nop			; (mov r8, r8)
   11936:	46bd      	mov	sp, r7
   11938:	b002      	add	sp, #8
   1193a:	bd80      	pop	{r7, pc}
   1193c:	20000654 	.word	0x20000654
   11940:	20000584 	.word	0x20000584
   11944:	000289ad 	.word	0x000289ad
   11948:	00023661 	.word	0x00023661
   1194c:	00023809 	.word	0x00023809

00011950 <setNormalLoadValue>:

void setNormalLoadValue(uint32_t normalVal)
{
   11950:	b580      	push	{r7, lr}
   11952:	b082      	sub	sp, #8
   11954:	af00      	add	r7, sp, #0
   11956:	6078      	str	r0, [r7, #4]
	user_settings_parameter_struct.normalLoadAddress = normalVal;
   11958:	4b09      	ldr	r3, [pc, #36]	; (11980 <setNormalLoadValue+0x30>)
   1195a:	687a      	ldr	r2, [r7, #4]
   1195c:	611a      	str	r2, [r3, #16]
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
   1195e:	4908      	ldr	r1, [pc, #32]	; (11980 <setNormalLoadValue+0x30>)
   11960:	4b08      	ldr	r3, [pc, #32]	; (11984 <setNormalLoadValue+0x34>)
   11962:	2230      	movs	r2, #48	; 0x30
   11964:	0018      	movs	r0, r3
   11966:	4b08      	ldr	r3, [pc, #32]	; (11988 <setNormalLoadValue+0x38>)
   11968:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
   1196a:	4b06      	ldr	r3, [pc, #24]	; (11984 <setNormalLoadValue+0x34>)
   1196c:	0019      	movs	r1, r3
   1196e:	201a      	movs	r0, #26
   11970:	4b06      	ldr	r3, [pc, #24]	; (1198c <setNormalLoadValue+0x3c>)
   11972:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   11974:	4b06      	ldr	r3, [pc, #24]	; (11990 <setNormalLoadValue+0x40>)
   11976:	4798      	blx	r3
}
   11978:	46c0      	nop			; (mov r8, r8)
   1197a:	46bd      	mov	sp, r7
   1197c:	b002      	add	sp, #8
   1197e:	bd80      	pop	{r7, pc}
   11980:	20000654 	.word	0x20000654
   11984:	20000584 	.word	0x20000584
   11988:	000289ad 	.word	0x000289ad
   1198c:	00023661 	.word	0x00023661
   11990:	00023809 	.word	0x00023809

00011994 <setCurrentDetection>:

void setCurrentDetection(bool cValue)
{
   11994:	b580      	push	{r7, lr}
   11996:	b082      	sub	sp, #8
   11998:	af00      	add	r7, sp, #0
   1199a:	0002      	movs	r2, r0
   1199c:	1dfb      	adds	r3, r7, #7
   1199e:	701a      	strb	r2, [r3, #0]
	user_settings_parameter_struct.currentDetectionAddress = cValue;
   119a0:	1dfb      	adds	r3, r7, #7
   119a2:	781a      	ldrb	r2, [r3, #0]
   119a4:	4b09      	ldr	r3, [pc, #36]	; (119cc <setCurrentDetection+0x38>)
   119a6:	73da      	strb	r2, [r3, #15]
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
   119a8:	4908      	ldr	r1, [pc, #32]	; (119cc <setCurrentDetection+0x38>)
   119aa:	4b09      	ldr	r3, [pc, #36]	; (119d0 <setCurrentDetection+0x3c>)
   119ac:	2230      	movs	r2, #48	; 0x30
   119ae:	0018      	movs	r0, r3
   119b0:	4b08      	ldr	r3, [pc, #32]	; (119d4 <setCurrentDetection+0x40>)
   119b2:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
   119b4:	4b06      	ldr	r3, [pc, #24]	; (119d0 <setCurrentDetection+0x3c>)
   119b6:	0019      	movs	r1, r3
   119b8:	201a      	movs	r0, #26
   119ba:	4b07      	ldr	r3, [pc, #28]	; (119d8 <setCurrentDetection+0x44>)
   119bc:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   119be:	4b07      	ldr	r3, [pc, #28]	; (119dc <setCurrentDetection+0x48>)
   119c0:	4798      	blx	r3
}
   119c2:	46c0      	nop			; (mov r8, r8)
   119c4:	46bd      	mov	sp, r7
   119c6:	b002      	add	sp, #8
   119c8:	bd80      	pop	{r7, pc}
   119ca:	46c0      	nop			; (mov r8, r8)
   119cc:	20000654 	.word	0x20000654
   119d0:	20000584 	.word	0x20000584
   119d4:	000289ad 	.word	0x000289ad
   119d8:	00023661 	.word	0x00023661
   119dc:	00023809 	.word	0x00023809

000119e0 <saveStarDeltaTimer>:
	//strcpy(deviceID,factory_settings_parameter_struct.DeviceID_ee);
	return deviceID;
}

void saveStarDeltaTimer(uint16_t StartDeltaTime)
{
   119e0:	b580      	push	{r7, lr}
   119e2:	b082      	sub	sp, #8
   119e4:	af00      	add	r7, sp, #0
   119e6:	0002      	movs	r2, r0
   119e8:	1dbb      	adds	r3, r7, #6
   119ea:	801a      	strh	r2, [r3, #0]
	user_settings_parameter_struct.starDeltaTimerAddress = StartDeltaTime;
   119ec:	4b0a      	ldr	r3, [pc, #40]	; (11a18 <saveStarDeltaTimer+0x38>)
   119ee:	1dba      	adds	r2, r7, #6
   119f0:	8812      	ldrh	r2, [r2, #0]
   119f2:	80da      	strh	r2, [r3, #6]
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
   119f4:	4908      	ldr	r1, [pc, #32]	; (11a18 <saveStarDeltaTimer+0x38>)
   119f6:	4b09      	ldr	r3, [pc, #36]	; (11a1c <saveStarDeltaTimer+0x3c>)
   119f8:	2230      	movs	r2, #48	; 0x30
   119fa:	0018      	movs	r0, r3
   119fc:	4b08      	ldr	r3, [pc, #32]	; (11a20 <saveStarDeltaTimer+0x40>)
   119fe:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
   11a00:	4b06      	ldr	r3, [pc, #24]	; (11a1c <saveStarDeltaTimer+0x3c>)
   11a02:	0019      	movs	r1, r3
   11a04:	201a      	movs	r0, #26
   11a06:	4b07      	ldr	r3, [pc, #28]	; (11a24 <saveStarDeltaTimer+0x44>)
   11a08:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   11a0a:	4b07      	ldr	r3, [pc, #28]	; (11a28 <saveStarDeltaTimer+0x48>)
   11a0c:	4798      	blx	r3
}
   11a0e:	46c0      	nop			; (mov r8, r8)
   11a10:	46bd      	mov	sp, r7
   11a12:	b002      	add	sp, #8
   11a14:	bd80      	pop	{r7, pc}
   11a16:	46c0      	nop			; (mov r8, r8)
   11a18:	20000654 	.word	0x20000654
   11a1c:	20000584 	.word	0x20000584
   11a20:	000289ad 	.word	0x000289ad
   11a24:	00023661 	.word	0x00023661
   11a28:	00023809 	.word	0x00023809

00011a2c <saveEventStageSettings>:

void saveEventStageSettings(uint8_t data)
{
   11a2c:	b580      	push	{r7, lr}
   11a2e:	b082      	sub	sp, #8
   11a30:	af00      	add	r7, sp, #0
   11a32:	0002      	movs	r2, r0
   11a34:	1dfb      	adds	r3, r7, #7
   11a36:	701a      	strb	r2, [r3, #0]
	user_settings_parameter_struct.eventStageAddress = data;
   11a38:	4b0a      	ldr	r3, [pc, #40]	; (11a64 <saveEventStageSettings+0x38>)
   11a3a:	1dfa      	adds	r2, r7, #7
   11a3c:	7812      	ldrb	r2, [r2, #0]
   11a3e:	721a      	strb	r2, [r3, #8]
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
   11a40:	4908      	ldr	r1, [pc, #32]	; (11a64 <saveEventStageSettings+0x38>)
   11a42:	4b09      	ldr	r3, [pc, #36]	; (11a68 <saveEventStageSettings+0x3c>)
   11a44:	2230      	movs	r2, #48	; 0x30
   11a46:	0018      	movs	r0, r3
   11a48:	4b08      	ldr	r3, [pc, #32]	; (11a6c <saveEventStageSettings+0x40>)
   11a4a:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
   11a4c:	4b06      	ldr	r3, [pc, #24]	; (11a68 <saveEventStageSettings+0x3c>)
   11a4e:	0019      	movs	r1, r3
   11a50:	201a      	movs	r0, #26
   11a52:	4b07      	ldr	r3, [pc, #28]	; (11a70 <saveEventStageSettings+0x44>)
   11a54:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   11a56:	4b07      	ldr	r3, [pc, #28]	; (11a74 <saveEventStageSettings+0x48>)
   11a58:	4798      	blx	r3
}
   11a5a:	46c0      	nop			; (mov r8, r8)
   11a5c:	46bd      	mov	sp, r7
   11a5e:	b002      	add	sp, #8
   11a60:	bd80      	pop	{r7, pc}
   11a62:	46c0      	nop			; (mov r8, r8)
   11a64:	20000654 	.word	0x20000654
   11a68:	20000584 	.word	0x20000584
   11a6c:	000289ad 	.word	0x000289ad
   11a70:	00023661 	.word	0x00023661
   11a74:	00023809 	.word	0x00023809

00011a78 <isAdmin>:

bool isAdmin(char *number)
{
   11a78:	b580      	push	{r7, lr}
   11a7a:	b08a      	sub	sp, #40	; 0x28
   11a7c:	af00      	add	r7, sp, #0
   11a7e:	6078      	str	r0, [r7, #4]
	for (uint8_t i=0;i<5;i++)
   11a80:	2327      	movs	r3, #39	; 0x27
   11a82:	18fb      	adds	r3, r7, r3
   11a84:	2200      	movs	r2, #0
   11a86:	701a      	strb	r2, [r3, #0]
   11a88:	e02b      	b.n	11ae2 <isAdmin+0x6a>
	{
		struct mobile_no_struct mobile_no;
		memset(page_data, '\0', sizeof(page_data));
   11a8a:	4b1b      	ldr	r3, [pc, #108]	; (11af8 <isAdmin+0x80>)
   11a8c:	223c      	movs	r2, #60	; 0x3c
   11a8e:	2100      	movs	r1, #0
   11a90:	0018      	movs	r0, r3
   11a92:	4b1a      	ldr	r3, [pc, #104]	; (11afc <isAdmin+0x84>)
   11a94:	4798      	blx	r3
		eeprom_emulator_read_page(ADMIN_1_MOBILE_NUMBER_PAGE+i, page_data);
   11a96:	2327      	movs	r3, #39	; 0x27
   11a98:	18fb      	adds	r3, r7, r3
   11a9a:	781b      	ldrb	r3, [r3, #0]
   11a9c:	3303      	adds	r3, #3
   11a9e:	b2db      	uxtb	r3, r3
   11aa0:	4a15      	ldr	r2, [pc, #84]	; (11af8 <isAdmin+0x80>)
   11aa2:	0011      	movs	r1, r2
   11aa4:	0018      	movs	r0, r3
   11aa6:	4b16      	ldr	r3, [pc, #88]	; (11b00 <isAdmin+0x88>)
   11aa8:	4798      	blx	r3
		memcpy(&mobile_no,page_data,sizeof(mobile_no));
   11aaa:	230c      	movs	r3, #12
   11aac:	18fa      	adds	r2, r7, r3
   11aae:	4b12      	ldr	r3, [pc, #72]	; (11af8 <isAdmin+0x80>)
   11ab0:	0010      	movs	r0, r2
   11ab2:	0019      	movs	r1, r3
   11ab4:	2318      	movs	r3, #24
   11ab6:	001a      	movs	r2, r3
   11ab8:	4b12      	ldr	r3, [pc, #72]	; (11b04 <isAdmin+0x8c>)
   11aba:	4798      	blx	r3
		
		if (strstr(number,mobile_no.mobile_no_ee))
   11abc:	230c      	movs	r3, #12
   11abe:	18fb      	adds	r3, r7, r3
   11ac0:	1d1a      	adds	r2, r3, #4
   11ac2:	687b      	ldr	r3, [r7, #4]
   11ac4:	0011      	movs	r1, r2
   11ac6:	0018      	movs	r0, r3
   11ac8:	4b0f      	ldr	r3, [pc, #60]	; (11b08 <isAdmin+0x90>)
   11aca:	4798      	blx	r3
   11acc:	1e03      	subs	r3, r0, #0
   11ace:	d001      	beq.n	11ad4 <isAdmin+0x5c>
		{
			return true;
   11ad0:	2301      	movs	r3, #1
   11ad2:	e00c      	b.n	11aee <isAdmin+0x76>
	for (uint8_t i=0;i<5;i++)
   11ad4:	2327      	movs	r3, #39	; 0x27
   11ad6:	18fb      	adds	r3, r7, r3
   11ad8:	781a      	ldrb	r2, [r3, #0]
   11ada:	2327      	movs	r3, #39	; 0x27
   11adc:	18fb      	adds	r3, r7, r3
   11ade:	3201      	adds	r2, #1
   11ae0:	701a      	strb	r2, [r3, #0]
   11ae2:	2327      	movs	r3, #39	; 0x27
   11ae4:	18fb      	adds	r3, r7, r3
   11ae6:	781b      	ldrb	r3, [r3, #0]
   11ae8:	2b04      	cmp	r3, #4
   11aea:	d9ce      	bls.n	11a8a <isAdmin+0x12>
		}
	}
	return false;
   11aec:	2300      	movs	r3, #0
}
   11aee:	0018      	movs	r0, r3
   11af0:	46bd      	mov	sp, r7
   11af2:	b00a      	add	sp, #40	; 0x28
   11af4:	bd80      	pop	{r7, pc}
   11af6:	46c0      	nop			; (mov r8, r8)
   11af8:	20000584 	.word	0x20000584
   11afc:	000289e3 	.word	0x000289e3
   11b00:	0002376d 	.word	0x0002376d
   11b04:	000289ad 	.word	0x000289ad
   11b08:	00028ca3 	.word	0x00028ca3

00011b0c <setPrimaryNumberIndex>:


void setPrimaryNumberIndex(uint8_t index)
{
   11b0c:	b580      	push	{r7, lr}
   11b0e:	b082      	sub	sp, #8
   11b10:	af00      	add	r7, sp, #0
   11b12:	0002      	movs	r2, r0
   11b14:	1dfb      	adds	r3, r7, #7
   11b16:	701a      	strb	r2, [r3, #0]
	user_count_struct.primaryNumberIndex = index;
   11b18:	4b0b      	ldr	r3, [pc, #44]	; (11b48 <setPrimaryNumberIndex+0x3c>)
   11b1a:	1dfa      	adds	r2, r7, #7
   11b1c:	7812      	ldrb	r2, [r2, #0]
   11b1e:	70da      	strb	r2, [r3, #3]
	memcpy(page_data,&user_count_struct,sizeof(user_count_struct));
   11b20:	4a0a      	ldr	r2, [pc, #40]	; (11b4c <setPrimaryNumberIndex+0x40>)
   11b22:	4b09      	ldr	r3, [pc, #36]	; (11b48 <setPrimaryNumberIndex+0x3c>)
   11b24:	0010      	movs	r0, r2
   11b26:	0019      	movs	r1, r3
   11b28:	2308      	movs	r3, #8
   11b2a:	001a      	movs	r2, r3
   11b2c:	4b08      	ldr	r3, [pc, #32]	; (11b50 <setPrimaryNumberIndex+0x44>)
   11b2e:	4798      	blx	r3
	eeprom_emulator_write_page(USER_COUNTER_PAGE, page_data);
   11b30:	4b06      	ldr	r3, [pc, #24]	; (11b4c <setPrimaryNumberIndex+0x40>)
   11b32:	0019      	movs	r1, r3
   11b34:	2008      	movs	r0, #8
   11b36:	4b07      	ldr	r3, [pc, #28]	; (11b54 <setPrimaryNumberIndex+0x48>)
   11b38:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   11b3a:	4b07      	ldr	r3, [pc, #28]	; (11b58 <setPrimaryNumberIndex+0x4c>)
   11b3c:	4798      	blx	r3

}
   11b3e:	46c0      	nop			; (mov r8, r8)
   11b40:	46bd      	mov	sp, r7
   11b42:	b002      	add	sp, #8
   11b44:	bd80      	pop	{r7, pc}
   11b46:	46c0      	nop			; (mov r8, r8)
   11b48:	20000614 	.word	0x20000614
   11b4c:	20000584 	.word	0x20000584
   11b50:	000289ad 	.word	0x000289ad
   11b54:	00023661 	.word	0x00023661
   11b58:	00023809 	.word	0x00023809

00011b5c <setSecondaryNumberIndex>:

void setSecondaryNumberIndex(uint8_t index)
{
   11b5c:	b580      	push	{r7, lr}
   11b5e:	b082      	sub	sp, #8
   11b60:	af00      	add	r7, sp, #0
   11b62:	0002      	movs	r2, r0
   11b64:	1dfb      	adds	r3, r7, #7
   11b66:	701a      	strb	r2, [r3, #0]
	user_count_struct.secondaryNumberIndex = index;
   11b68:	4b0b      	ldr	r3, [pc, #44]	; (11b98 <setSecondaryNumberIndex+0x3c>)
   11b6a:	1dfa      	adds	r2, r7, #7
   11b6c:	7812      	ldrb	r2, [r2, #0]
   11b6e:	711a      	strb	r2, [r3, #4]
	memcpy(page_data,&user_count_struct,sizeof(user_count_struct));
   11b70:	4a0a      	ldr	r2, [pc, #40]	; (11b9c <setSecondaryNumberIndex+0x40>)
   11b72:	4b09      	ldr	r3, [pc, #36]	; (11b98 <setSecondaryNumberIndex+0x3c>)
   11b74:	0010      	movs	r0, r2
   11b76:	0019      	movs	r1, r3
   11b78:	2308      	movs	r3, #8
   11b7a:	001a      	movs	r2, r3
   11b7c:	4b08      	ldr	r3, [pc, #32]	; (11ba0 <setSecondaryNumberIndex+0x44>)
   11b7e:	4798      	blx	r3
	eeprom_emulator_write_page(USER_COUNTER_PAGE, page_data);
   11b80:	4b06      	ldr	r3, [pc, #24]	; (11b9c <setSecondaryNumberIndex+0x40>)
   11b82:	0019      	movs	r1, r3
   11b84:	2008      	movs	r0, #8
   11b86:	4b07      	ldr	r3, [pc, #28]	; (11ba4 <setSecondaryNumberIndex+0x48>)
   11b88:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   11b8a:	4b07      	ldr	r3, [pc, #28]	; (11ba8 <setSecondaryNumberIndex+0x4c>)
   11b8c:	4798      	blx	r3
}
   11b8e:	46c0      	nop			; (mov r8, r8)
   11b90:	46bd      	mov	sp, r7
   11b92:	b002      	add	sp, #8
   11b94:	bd80      	pop	{r7, pc}
   11b96:	46c0      	nop			; (mov r8, r8)
   11b98:	20000614 	.word	0x20000614
   11b9c:	20000584 	.word	0x20000584
   11ba0:	000289ad 	.word	0x000289ad
   11ba4:	00023661 	.word	0x00023661
   11ba8:	00023809 	.word	0x00023809

00011bac <addPrimaryIndexedNumber>:

bool addPrimaryIndexedNumber(char *number)
{
   11bac:	b590      	push	{r4, r7, lr}
   11bae:	b085      	sub	sp, #20
   11bb0:	af00      	add	r7, sp, #0
   11bb2:	6078      	str	r0, [r7, #4]
	//checkUserExists would return a 1 based index,starting at 1 and not at 0
	uint8_t index = checkExists(number);
   11bb4:	230e      	movs	r3, #14
   11bb6:	18fc      	adds	r4, r7, r3
   11bb8:	687b      	ldr	r3, [r7, #4]
   11bba:	0018      	movs	r0, r3
   11bbc:	4b21      	ldr	r3, [pc, #132]	; (11c44 <addPrimaryIndexedNumber+0x98>)
   11bbe:	4798      	blx	r3
   11bc0:	0003      	movs	r3, r0
   11bc2:	7023      	strb	r3, [r4, #0]

	uint8_t newPrimaryIndex=0xFF;
   11bc4:	230f      	movs	r3, #15
   11bc6:	18fb      	adds	r3, r7, r3
   11bc8:	22ff      	movs	r2, #255	; 0xff
   11bca:	701a      	strb	r2, [r3, #0]
	if(index >= user_count_struct.total_user_no_count)								//the numebr does not exists, need to add it
   11bcc:	4b1e      	ldr	r3, [pc, #120]	; (11c48 <addPrimaryIndexedNumber+0x9c>)
   11bce:	785b      	ldrb	r3, [r3, #1]
   11bd0:	220e      	movs	r2, #14
   11bd2:	18ba      	adds	r2, r7, r2
   11bd4:	7812      	ldrb	r2, [r2, #0]
   11bd6:	429a      	cmp	r2, r3
   11bd8:	d309      	bcc.n	11bee <addPrimaryIndexedNumber+0x42>
	{
		newPrimaryIndex = user_count_struct.current_user_no_count;
   11bda:	230f      	movs	r3, #15
   11bdc:	18fb      	adds	r3, r7, r3
   11bde:	4a1a      	ldr	r2, [pc, #104]	; (11c48 <addPrimaryIndexedNumber+0x9c>)
   11be0:	7892      	ldrb	r2, [r2, #2]
   11be2:	701a      	strb	r2, [r3, #0]
		addNumber(number);
   11be4:	687b      	ldr	r3, [r7, #4]
   11be6:	0018      	movs	r0, r3
   11be8:	4b18      	ldr	r3, [pc, #96]	; (11c4c <addPrimaryIndexedNumber+0xa0>)
   11bea:	4798      	blx	r3
   11bec:	e00c      	b.n	11c08 <addPrimaryIndexedNumber+0x5c>
	}
	else if(index<user_count_struct.total_user_no_count)
   11bee:	4b16      	ldr	r3, [pc, #88]	; (11c48 <addPrimaryIndexedNumber+0x9c>)
   11bf0:	785b      	ldrb	r3, [r3, #1]
   11bf2:	220e      	movs	r2, #14
   11bf4:	18ba      	adds	r2, r7, r2
   11bf6:	7812      	ldrb	r2, [r2, #0]
   11bf8:	429a      	cmp	r2, r3
   11bfa:	d205      	bcs.n	11c08 <addPrimaryIndexedNumber+0x5c>
	{
		newPrimaryIndex = index;
   11bfc:	230f      	movs	r3, #15
   11bfe:	18fb      	adds	r3, r7, r3
   11c00:	220e      	movs	r2, #14
   11c02:	18ba      	adds	r2, r7, r2
   11c04:	7812      	ldrb	r2, [r2, #0]
   11c06:	701a      	strb	r2, [r3, #0]
	}

	if(newPrimaryIndex < user_count_struct.total_user_no_count)
   11c08:	4b0f      	ldr	r3, [pc, #60]	; (11c48 <addPrimaryIndexedNumber+0x9c>)
   11c0a:	785b      	ldrb	r3, [r3, #1]
   11c0c:	220f      	movs	r2, #15
   11c0e:	18ba      	adds	r2, r7, r2
   11c10:	7812      	ldrb	r2, [r2, #0]
   11c12:	429a      	cmp	r2, r3
   11c14:	d210      	bcs.n	11c38 <addPrimaryIndexedNumber+0x8c>
	{
		// if current numbers present are more than 1, than set the previous primary number as secondary number
		if (user_count_struct.current_user_no_count>1)
   11c16:	4b0c      	ldr	r3, [pc, #48]	; (11c48 <addPrimaryIndexedNumber+0x9c>)
   11c18:	789b      	ldrb	r3, [r3, #2]
   11c1a:	2b01      	cmp	r3, #1
   11c1c:	d904      	bls.n	11c28 <addPrimaryIndexedNumber+0x7c>
		{
			setSecondaryNumberIndex(user_count_struct.primaryNumberIndex);
   11c1e:	4b0a      	ldr	r3, [pc, #40]	; (11c48 <addPrimaryIndexedNumber+0x9c>)
   11c20:	78db      	ldrb	r3, [r3, #3]
   11c22:	0018      	movs	r0, r3
   11c24:	4b0a      	ldr	r3, [pc, #40]	; (11c50 <addPrimaryIndexedNumber+0xa4>)
   11c26:	4798      	blx	r3
		}
		
		setPrimaryNumberIndex(newPrimaryIndex);
   11c28:	230f      	movs	r3, #15
   11c2a:	18fb      	adds	r3, r7, r3
   11c2c:	781b      	ldrb	r3, [r3, #0]
   11c2e:	0018      	movs	r0, r3
   11c30:	4b08      	ldr	r3, [pc, #32]	; (11c54 <addPrimaryIndexedNumber+0xa8>)
   11c32:	4798      	blx	r3
		return true;
   11c34:	2301      	movs	r3, #1
   11c36:	e000      	b.n	11c3a <addPrimaryIndexedNumber+0x8e>
	}

	return false;
   11c38:	2300      	movs	r3, #0
}
   11c3a:	0018      	movs	r0, r3
   11c3c:	46bd      	mov	sp, r7
   11c3e:	b005      	add	sp, #20
   11c40:	bd90      	pop	{r4, r7, pc}
   11c42:	46c0      	nop			; (mov r8, r8)
   11c44:	00010ded 	.word	0x00010ded
   11c48:	20000614 	.word	0x20000614
   11c4c:	00010ef1 	.word	0x00010ef1
   11c50:	00011b5d 	.word	0x00011b5d
   11c54:	00011b0d 	.word	0x00011b0d

00011c58 <addSecondaryIndexedNumber>:

bool addSecondaryIndexedNumber(char *number)
{
   11c58:	b590      	push	{r4, r7, lr}
   11c5a:	b085      	sub	sp, #20
   11c5c:	af00      	add	r7, sp, #0
   11c5e:	6078      	str	r0, [r7, #4]
	//check if any 2 numbers are present in system one of which would be primary, than only allow to add secondary number
	if(user_count_struct.current_user_no_count<2)
   11c60:	4b21      	ldr	r3, [pc, #132]	; (11ce8 <addSecondaryIndexedNumber+0x90>)
   11c62:	789b      	ldrb	r3, [r3, #2]
   11c64:	2b01      	cmp	r3, #1
   11c66:	d801      	bhi.n	11c6c <addSecondaryIndexedNumber+0x14>
	return false;
   11c68:	2300      	movs	r3, #0
   11c6a:	e039      	b.n	11ce0 <addSecondaryIndexedNumber+0x88>

	//checkUserExists would return a 1 based index,starting at 1 and not at 0
	uint8_t index = checkExists(number);
   11c6c:	230e      	movs	r3, #14
   11c6e:	18fc      	adds	r4, r7, r3
   11c70:	687b      	ldr	r3, [r7, #4]
   11c72:	0018      	movs	r0, r3
   11c74:	4b1d      	ldr	r3, [pc, #116]	; (11cec <addSecondaryIndexedNumber+0x94>)
   11c76:	4798      	blx	r3
   11c78:	0003      	movs	r3, r0
   11c7a:	7023      	strb	r3, [r4, #0]

	uint8_t newSecondaryIndex=0xFF;
   11c7c:	230f      	movs	r3, #15
   11c7e:	18fb      	adds	r3, r7, r3
   11c80:	22ff      	movs	r2, #255	; 0xff
   11c82:	701a      	strb	r2, [r3, #0]
	if(index >= user_count_struct.total_user_no_count)								//number not present, need to add the number
   11c84:	4b18      	ldr	r3, [pc, #96]	; (11ce8 <addSecondaryIndexedNumber+0x90>)
   11c86:	785b      	ldrb	r3, [r3, #1]
   11c88:	220e      	movs	r2, #14
   11c8a:	18ba      	adds	r2, r7, r2
   11c8c:	7812      	ldrb	r2, [r2, #0]
   11c8e:	429a      	cmp	r2, r3
   11c90:	d309      	bcc.n	11ca6 <addSecondaryIndexedNumber+0x4e>
	{
		newSecondaryIndex = user_count_struct.current_user_no_count;
   11c92:	230f      	movs	r3, #15
   11c94:	18fb      	adds	r3, r7, r3
   11c96:	4a14      	ldr	r2, [pc, #80]	; (11ce8 <addSecondaryIndexedNumber+0x90>)
   11c98:	7892      	ldrb	r2, [r2, #2]
   11c9a:	701a      	strb	r2, [r3, #0]
		addNumber(number);
   11c9c:	687b      	ldr	r3, [r7, #4]
   11c9e:	0018      	movs	r0, r3
   11ca0:	4b13      	ldr	r3, [pc, #76]	; (11cf0 <addSecondaryIndexedNumber+0x98>)
   11ca2:	4798      	blx	r3
   11ca4:	e00c      	b.n	11cc0 <addSecondaryIndexedNumber+0x68>
	}
	else if(index < user_count_struct.total_user_no_count)
   11ca6:	4b10      	ldr	r3, [pc, #64]	; (11ce8 <addSecondaryIndexedNumber+0x90>)
   11ca8:	785b      	ldrb	r3, [r3, #1]
   11caa:	220e      	movs	r2, #14
   11cac:	18ba      	adds	r2, r7, r2
   11cae:	7812      	ldrb	r2, [r2, #0]
   11cb0:	429a      	cmp	r2, r3
   11cb2:	d205      	bcs.n	11cc0 <addSecondaryIndexedNumber+0x68>
	{
		newSecondaryIndex = index;
   11cb4:	230f      	movs	r3, #15
   11cb6:	18fb      	adds	r3, r7, r3
   11cb8:	220e      	movs	r2, #14
   11cba:	18ba      	adds	r2, r7, r2
   11cbc:	7812      	ldrb	r2, [r2, #0]
   11cbe:	701a      	strb	r2, [r3, #0]
	}

	if(newSecondaryIndex < user_count_struct.total_user_no_count)
   11cc0:	4b09      	ldr	r3, [pc, #36]	; (11ce8 <addSecondaryIndexedNumber+0x90>)
   11cc2:	785b      	ldrb	r3, [r3, #1]
   11cc4:	220f      	movs	r2, #15
   11cc6:	18ba      	adds	r2, r7, r2
   11cc8:	7812      	ldrb	r2, [r2, #0]
   11cca:	429a      	cmp	r2, r3
   11ccc:	d207      	bcs.n	11cde <addSecondaryIndexedNumber+0x86>
	{
		setSecondaryNumberIndex(newSecondaryIndex);
   11cce:	230f      	movs	r3, #15
   11cd0:	18fb      	adds	r3, r7, r3
   11cd2:	781b      	ldrb	r3, [r3, #0]
   11cd4:	0018      	movs	r0, r3
   11cd6:	4b07      	ldr	r3, [pc, #28]	; (11cf4 <addSecondaryIndexedNumber+0x9c>)
   11cd8:	4798      	blx	r3
		return true;
   11cda:	2301      	movs	r3, #1
   11cdc:	e000      	b.n	11ce0 <addSecondaryIndexedNumber+0x88>
	}
	return false;
   11cde:	2300      	movs	r3, #0
}
   11ce0:	0018      	movs	r0, r3
   11ce2:	46bd      	mov	sp, r7
   11ce4:	b005      	add	sp, #20
   11ce6:	bd90      	pop	{r4, r7, pc}
   11ce8:	20000614 	.word	0x20000614
   11cec:	00010ded 	.word	0x00010ded
   11cf0:	00010ef1 	.word	0x00010ef1
   11cf4:	00011b5d 	.word	0x00011b5d

00011cf8 <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
   11cf8:	b580      	push	{r7, lr}
   11cfa:	b082      	sub	sp, #8
   11cfc:	af00      	add	r7, sp, #0
   11cfe:	0002      	movs	r2, r0
   11d00:	1dfb      	adds	r3, r7, #7
   11d02:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   11d04:	4b06      	ldr	r3, [pc, #24]	; (11d20 <system_interrupt_enable+0x28>)
   11d06:	1dfa      	adds	r2, r7, #7
   11d08:	7812      	ldrb	r2, [r2, #0]
   11d0a:	0011      	movs	r1, r2
   11d0c:	221f      	movs	r2, #31
   11d0e:	400a      	ands	r2, r1
   11d10:	2101      	movs	r1, #1
   11d12:	4091      	lsls	r1, r2
   11d14:	000a      	movs	r2, r1
   11d16:	601a      	str	r2, [r3, #0]
}
   11d18:	46c0      	nop			; (mov r8, r8)
   11d1a:	46bd      	mov	sp, r7
   11d1c:	b002      	add	sp, #8
   11d1e:	bd80      	pop	{r7, pc}
   11d20:	e000e100 	.word	0xe000e100

00011d24 <system_interrupt_disable>:
 *
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
   11d24:	b580      	push	{r7, lr}
   11d26:	b082      	sub	sp, #8
   11d28:	af00      	add	r7, sp, #0
   11d2a:	0002      	movs	r2, r0
   11d2c:	1dfb      	adds	r3, r7, #7
   11d2e:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   11d30:	4a07      	ldr	r2, [pc, #28]	; (11d50 <system_interrupt_disable+0x2c>)
   11d32:	1dfb      	adds	r3, r7, #7
   11d34:	781b      	ldrb	r3, [r3, #0]
   11d36:	0019      	movs	r1, r3
   11d38:	231f      	movs	r3, #31
   11d3a:	400b      	ands	r3, r1
   11d3c:	2101      	movs	r1, #1
   11d3e:	4099      	lsls	r1, r3
   11d40:	000b      	movs	r3, r1
   11d42:	0019      	movs	r1, r3
   11d44:	2380      	movs	r3, #128	; 0x80
   11d46:	50d1      	str	r1, [r2, r3]
}
   11d48:	46c0      	nop			; (mov r8, r8)
   11d4a:	46bd      	mov	sp, r7
   11d4c:	b002      	add	sp, #8
   11d4e:	bd80      	pop	{r7, pc}
   11d50:	e000e100 	.word	0xe000e100

00011d54 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
   11d54:	b580      	push	{r7, lr}
   11d56:	b084      	sub	sp, #16
   11d58:	af00      	add	r7, sp, #0
   11d5a:	0002      	movs	r2, r0
   11d5c:	1dfb      	adds	r3, r7, #7
   11d5e:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   11d60:	230f      	movs	r3, #15
   11d62:	18fb      	adds	r3, r7, r3
   11d64:	1dfa      	adds	r2, r7, #7
   11d66:	7812      	ldrb	r2, [r2, #0]
   11d68:	09d2      	lsrs	r2, r2, #7
   11d6a:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   11d6c:	230e      	movs	r3, #14
   11d6e:	18fb      	adds	r3, r7, r3
   11d70:	1dfa      	adds	r2, r7, #7
   11d72:	7812      	ldrb	r2, [r2, #0]
   11d74:	0952      	lsrs	r2, r2, #5
   11d76:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   11d78:	4b0d      	ldr	r3, [pc, #52]	; (11db0 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   11d7a:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
   11d7c:	230f      	movs	r3, #15
   11d7e:	18fb      	adds	r3, r7, r3
   11d80:	781b      	ldrb	r3, [r3, #0]
   11d82:	2b00      	cmp	r3, #0
   11d84:	d10f      	bne.n	11da6 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   11d86:	230f      	movs	r3, #15
   11d88:	18fb      	adds	r3, r7, r3
   11d8a:	781b      	ldrb	r3, [r3, #0]
   11d8c:	009b      	lsls	r3, r3, #2
   11d8e:	2210      	movs	r2, #16
   11d90:	4694      	mov	ip, r2
   11d92:	44bc      	add	ip, r7
   11d94:	4463      	add	r3, ip
   11d96:	3b08      	subs	r3, #8
   11d98:	681a      	ldr	r2, [r3, #0]
   11d9a:	230e      	movs	r3, #14
   11d9c:	18fb      	adds	r3, r7, r3
   11d9e:	781b      	ldrb	r3, [r3, #0]
   11da0:	01db      	lsls	r3, r3, #7
   11da2:	18d3      	adds	r3, r2, r3
   11da4:	e000      	b.n	11da8 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
   11da6:	2300      	movs	r3, #0
	}
}
   11da8:	0018      	movs	r0, r3
   11daa:	46bd      	mov	sp, r7
   11dac:	b004      	add	sp, #16
   11dae:	bd80      	pop	{r7, pc}
   11db0:	41004400 	.word	0x41004400

00011db4 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
   11db4:	b580      	push	{r7, lr}
   11db6:	b082      	sub	sp, #8
   11db8:	af00      	add	r7, sp, #0
   11dba:	0002      	movs	r2, r0
   11dbc:	1dfb      	adds	r3, r7, #7
   11dbe:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   11dc0:	1dfb      	adds	r3, r7, #7
   11dc2:	781b      	ldrb	r3, [r3, #0]
   11dc4:	0018      	movs	r0, r3
   11dc6:	4b03      	ldr	r3, [pc, #12]	; (11dd4 <port_get_group_from_gpio_pin+0x20>)
   11dc8:	4798      	blx	r3
   11dca:	0003      	movs	r3, r0
}
   11dcc:	0018      	movs	r0, r3
   11dce:	46bd      	mov	sp, r7
   11dd0:	b002      	add	sp, #8
   11dd2:	bd80      	pop	{r7, pc}
   11dd4:	00011d55 	.word	0x00011d55

00011dd8 <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
   11dd8:	b580      	push	{r7, lr}
   11dda:	b082      	sub	sp, #8
   11ddc:	af00      	add	r7, sp, #0
   11dde:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
   11de0:	687b      	ldr	r3, [r7, #4]
   11de2:	2200      	movs	r2, #0
   11de4:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   11de6:	687b      	ldr	r3, [r7, #4]
   11de8:	2201      	movs	r2, #1
   11dea:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
   11dec:	687b      	ldr	r3, [r7, #4]
   11dee:	2200      	movs	r2, #0
   11df0:	709a      	strb	r2, [r3, #2]
}
   11df2:	46c0      	nop			; (mov r8, r8)
   11df4:	46bd      	mov	sp, r7
   11df6:	b002      	add	sp, #8
   11df8:	bd80      	pop	{r7, pc}
	...

00011dfc <port_pin_get_input_level>:
 *
 *  \return Status of the port pin's input buffer.
 */
static inline bool port_pin_get_input_level(
		const uint8_t gpio_pin)
{
   11dfc:	b580      	push	{r7, lr}
   11dfe:	b084      	sub	sp, #16
   11e00:	af00      	add	r7, sp, #0
   11e02:	0002      	movs	r2, r0
   11e04:	1dfb      	adds	r3, r7, #7
   11e06:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   11e08:	1dfb      	adds	r3, r7, #7
   11e0a:	781b      	ldrb	r3, [r3, #0]
   11e0c:	0018      	movs	r0, r3
   11e0e:	4b0b      	ldr	r3, [pc, #44]	; (11e3c <port_pin_get_input_level+0x40>)
   11e10:	4798      	blx	r3
   11e12:	0003      	movs	r3, r0
   11e14:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   11e16:	1dfb      	adds	r3, r7, #7
   11e18:	781b      	ldrb	r3, [r3, #0]
   11e1a:	221f      	movs	r2, #31
   11e1c:	4013      	ands	r3, r2
   11e1e:	2201      	movs	r2, #1
   11e20:	409a      	lsls	r2, r3
   11e22:	0013      	movs	r3, r2
   11e24:	60bb      	str	r3, [r7, #8]

	return (port_base->IN.reg & pin_mask);
   11e26:	68fb      	ldr	r3, [r7, #12]
   11e28:	6a1b      	ldr	r3, [r3, #32]
   11e2a:	68ba      	ldr	r2, [r7, #8]
   11e2c:	4013      	ands	r3, r2
   11e2e:	1e5a      	subs	r2, r3, #1
   11e30:	4193      	sbcs	r3, r2
   11e32:	b2db      	uxtb	r3, r3
}
   11e34:	0018      	movs	r0, r3
   11e36:	46bd      	mov	sp, r7
   11e38:	b004      	add	sp, #16
   11e3a:	bd80      	pop	{r7, pc}
   11e3c:	00011db5 	.word	0x00011db5

00011e40 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
   11e40:	b580      	push	{r7, lr}
   11e42:	b084      	sub	sp, #16
   11e44:	af00      	add	r7, sp, #0
   11e46:	0002      	movs	r2, r0
   11e48:	1dfb      	adds	r3, r7, #7
   11e4a:	701a      	strb	r2, [r3, #0]
   11e4c:	1dbb      	adds	r3, r7, #6
   11e4e:	1c0a      	adds	r2, r1, #0
   11e50:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   11e52:	1dfb      	adds	r3, r7, #7
   11e54:	781b      	ldrb	r3, [r3, #0]
   11e56:	0018      	movs	r0, r3
   11e58:	4b0d      	ldr	r3, [pc, #52]	; (11e90 <port_pin_set_output_level+0x50>)
   11e5a:	4798      	blx	r3
   11e5c:	0003      	movs	r3, r0
   11e5e:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   11e60:	1dfb      	adds	r3, r7, #7
   11e62:	781b      	ldrb	r3, [r3, #0]
   11e64:	221f      	movs	r2, #31
   11e66:	4013      	ands	r3, r2
   11e68:	2201      	movs	r2, #1
   11e6a:	409a      	lsls	r2, r3
   11e6c:	0013      	movs	r3, r2
   11e6e:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
   11e70:	1dbb      	adds	r3, r7, #6
   11e72:	781b      	ldrb	r3, [r3, #0]
   11e74:	2b00      	cmp	r3, #0
   11e76:	d003      	beq.n	11e80 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   11e78:	68fb      	ldr	r3, [r7, #12]
   11e7a:	68ba      	ldr	r2, [r7, #8]
   11e7c:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
   11e7e:	e002      	b.n	11e86 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   11e80:	68fb      	ldr	r3, [r7, #12]
   11e82:	68ba      	ldr	r2, [r7, #8]
   11e84:	615a      	str	r2, [r3, #20]
}
   11e86:	46c0      	nop			; (mov r8, r8)
   11e88:	46bd      	mov	sp, r7
   11e8a:	b004      	add	sp, #16
   11e8c:	bd80      	pop	{r7, pc}
   11e8e:	46c0      	nop			; (mov r8, r8)
   11e90:	00011db5 	.word	0x00011db5

00011e94 <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
   11e94:	b580      	push	{r7, lr}
   11e96:	b084      	sub	sp, #16
   11e98:	af00      	add	r7, sp, #0
   11e9a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
   11e9c:	687b      	ldr	r3, [r7, #4]
   11e9e:	681b      	ldr	r3, [r3, #0]
   11ea0:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
   11ea2:	68fb      	ldr	r3, [r7, #12]
   11ea4:	69db      	ldr	r3, [r3, #28]
   11ea6:	1e5a      	subs	r2, r3, #1
   11ea8:	4193      	sbcs	r3, r2
   11eaa:	b2db      	uxtb	r3, r3
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
#endif
}
   11eac:	0018      	movs	r0, r3
   11eae:	46bd      	mov	sp, r7
   11eb0:	b004      	add	sp, #16
   11eb2:	bd80      	pop	{r7, pc}

00011eb4 <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
   11eb4:	b580      	push	{r7, lr}
   11eb6:	b082      	sub	sp, #8
   11eb8:	af00      	add	r7, sp, #0
   11eba:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
   11ebc:	46c0      	nop			; (mov r8, r8)
   11ebe:	687b      	ldr	r3, [r7, #4]
   11ec0:	0018      	movs	r0, r3
   11ec2:	4b04      	ldr	r3, [pc, #16]	; (11ed4 <_usart_wait_for_sync+0x20>)
   11ec4:	4798      	blx	r3
   11ec6:	1e03      	subs	r3, r0, #0
   11ec8:	d1f9      	bne.n	11ebe <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
   11eca:	46c0      	nop			; (mov r8, r8)
   11ecc:	46bd      	mov	sp, r7
   11ece:	b002      	add	sp, #8
   11ed0:	bd80      	pop	{r7, pc}
   11ed2:	46c0      	nop			; (mov r8, r8)
   11ed4:	00011e95 	.word	0x00011e95

00011ed8 <usart_get_config_defaults>:
 *
 * \param[in,out] config  Pointer to configuration struct
 */
static inline void usart_get_config_defaults(
		struct usart_config *const config)
{
   11ed8:	b580      	push	{r7, lr}
   11eda:	b082      	sub	sp, #8
   11edc:	af00      	add	r7, sp, #0
   11ede:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
   11ee0:	687b      	ldr	r3, [r7, #4]
   11ee2:	2280      	movs	r2, #128	; 0x80
   11ee4:	05d2      	lsls	r2, r2, #23
   11ee6:	601a      	str	r2, [r3, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
   11ee8:	687b      	ldr	r3, [r7, #4]
   11eea:	2200      	movs	r2, #0
   11eec:	605a      	str	r2, [r3, #4]
	config->parity           = USART_PARITY_NONE;
   11eee:	687b      	ldr	r3, [r7, #4]
   11ef0:	22ff      	movs	r2, #255	; 0xff
   11ef2:	811a      	strh	r2, [r3, #8]
	config->stopbits         = USART_STOPBITS_1;
   11ef4:	687b      	ldr	r3, [r7, #4]
   11ef6:	2200      	movs	r2, #0
   11ef8:	729a      	strb	r2, [r3, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
   11efa:	687b      	ldr	r3, [r7, #4]
   11efc:	2200      	movs	r2, #0
   11efe:	72da      	strb	r2, [r3, #11]
	config->baudrate         = 9600;
   11f00:	687b      	ldr	r3, [r7, #4]
   11f02:	2296      	movs	r2, #150	; 0x96
   11f04:	0192      	lsls	r2, r2, #6
   11f06:	621a      	str	r2, [r3, #32]
	config->receiver_enable  = true;
   11f08:	687b      	ldr	r3, [r7, #4]
   11f0a:	2224      	movs	r2, #36	; 0x24
   11f0c:	2101      	movs	r1, #1
   11f0e:	5499      	strb	r1, [r3, r2]
	config->transmitter_enable = true;
   11f10:	687b      	ldr	r3, [r7, #4]
   11f12:	2225      	movs	r2, #37	; 0x25
   11f14:	2101      	movs	r1, #1
   11f16:	5499      	strb	r1, [r3, r2]
	config->clock_polarity_inverted = false;
   11f18:	687b      	ldr	r3, [r7, #4]
   11f1a:	2226      	movs	r2, #38	; 0x26
   11f1c:	2100      	movs	r1, #0
   11f1e:	5499      	strb	r1, [r3, r2]
	config->use_external_clock = false;
   11f20:	687b      	ldr	r3, [r7, #4]
   11f22:	2227      	movs	r2, #39	; 0x27
   11f24:	2100      	movs	r1, #0
   11f26:	5499      	strb	r1, [r3, r2]
	config->ext_clock_freq   = 0;
   11f28:	687b      	ldr	r3, [r7, #4]
   11f2a:	2200      	movs	r2, #0
   11f2c:	629a      	str	r2, [r3, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
   11f2e:	687b      	ldr	r3, [r7, #4]
   11f30:	2288      	movs	r2, #136	; 0x88
   11f32:	0352      	lsls	r2, r2, #13
   11f34:	60da      	str	r2, [r3, #12]
	config->run_in_standby   = false;
   11f36:	687b      	ldr	r3, [r7, #4]
   11f38:	222c      	movs	r2, #44	; 0x2c
   11f3a:	2100      	movs	r1, #0
   11f3c:	5499      	strb	r1, [r3, r2]
	config->generator_source = GCLK_GENERATOR_0;
   11f3e:	687b      	ldr	r3, [r7, #4]
   11f40:	222d      	movs	r2, #45	; 0x2d
   11f42:	2100      	movs	r1, #0
   11f44:	5499      	strb	r1, [r3, r2]
	config->pinmux_pad0      = PINMUX_DEFAULT;
   11f46:	687b      	ldr	r3, [r7, #4]
   11f48:	2200      	movs	r2, #0
   11f4a:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad1      = PINMUX_DEFAULT;
   11f4c:	687b      	ldr	r3, [r7, #4]
   11f4e:	2200      	movs	r2, #0
   11f50:	635a      	str	r2, [r3, #52]	; 0x34
	config->pinmux_pad2      = PINMUX_DEFAULT;
   11f52:	687b      	ldr	r3, [r7, #4]
   11f54:	2200      	movs	r2, #0
   11f56:	639a      	str	r2, [r3, #56]	; 0x38
	config->pinmux_pad3      = PINMUX_DEFAULT;
   11f58:	687b      	ldr	r3, [r7, #4]
   11f5a:	2200      	movs	r2, #0
   11f5c:	63da      	str	r2, [r3, #60]	; 0x3c
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
   11f5e:	687b      	ldr	r3, [r7, #4]
   11f60:	2200      	movs	r2, #0
   11f62:	615a      	str	r2, [r3, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
   11f64:	687b      	ldr	r3, [r7, #4]
   11f66:	2200      	movs	r2, #0
   11f68:	821a      	strh	r2, [r3, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
   11f6a:	687b      	ldr	r3, [r7, #4]
   11f6c:	2200      	movs	r2, #0
   11f6e:	76da      	strb	r2, [r3, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
   11f70:	687b      	ldr	r3, [r7, #4]
   11f72:	2200      	movs	r2, #0
   11f74:	761a      	strb	r2, [r3, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
   11f76:	687b      	ldr	r3, [r7, #4]
   11f78:	2200      	movs	r2, #0
   11f7a:	771a      	strb	r2, [r3, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
   11f7c:	687b      	ldr	r3, [r7, #4]
   11f7e:	2200      	movs	r2, #0
   11f80:	765a      	strb	r2, [r3, #25]
	config->receive_pulse_length                    = 19;
   11f82:	687b      	ldr	r3, [r7, #4]
   11f84:	2213      	movs	r2, #19
   11f86:	769a      	strb	r2, [r3, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
   11f88:	687b      	ldr	r3, [r7, #4]
   11f8a:	2200      	movs	r2, #0
   11f8c:	775a      	strb	r2, [r3, #29]
#endif
#ifdef FEATURE_USART_RS485
	config->rs485_guard_time = RS485_GUARD_TIME_0_BIT;
#endif
}
   11f8e:	46c0      	nop			; (mov r8, r8)
   11f90:	46bd      	mov	sp, r7
   11f92:	b002      	add	sp, #8
   11f94:	bd80      	pop	{r7, pc}
	...

00011f98 <usart_enable>:
 *
 * \param[in]  module  Pointer to USART software instance struct
 */
static inline void usart_enable(
		const struct usart_module *const module)
{
   11f98:	b580      	push	{r7, lr}
   11f9a:	b084      	sub	sp, #16
   11f9c:	af00      	add	r7, sp, #0
   11f9e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   11fa0:	687b      	ldr	r3, [r7, #4]
   11fa2:	681b      	ldr	r3, [r3, #0]
   11fa4:	60fb      	str	r3, [r7, #12]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   11fa6:	687b      	ldr	r3, [r7, #4]
   11fa8:	681b      	ldr	r3, [r3, #0]
   11faa:	0018      	movs	r0, r3
   11fac:	4b09      	ldr	r3, [pc, #36]	; (11fd4 <usart_enable+0x3c>)
   11fae:	4798      	blx	r3
   11fb0:	0003      	movs	r3, r0
   11fb2:	0018      	movs	r0, r3
   11fb4:	4b08      	ldr	r3, [pc, #32]	; (11fd8 <usart_enable+0x40>)
   11fb6:	4798      	blx	r3
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   11fb8:	687b      	ldr	r3, [r7, #4]
   11fba:	0018      	movs	r0, r3
   11fbc:	4b07      	ldr	r3, [pc, #28]	; (11fdc <usart_enable+0x44>)
   11fbe:	4798      	blx	r3

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
   11fc0:	68fb      	ldr	r3, [r7, #12]
   11fc2:	681b      	ldr	r3, [r3, #0]
   11fc4:	2202      	movs	r2, #2
   11fc6:	431a      	orrs	r2, r3
   11fc8:	68fb      	ldr	r3, [r7, #12]
   11fca:	601a      	str	r2, [r3, #0]
}
   11fcc:	46c0      	nop			; (mov r8, r8)
   11fce:	46bd      	mov	sp, r7
   11fd0:	b004      	add	sp, #16
   11fd2:	bd80      	pop	{r7, pc}
   11fd4:	000220ed 	.word	0x000220ed
   11fd8:	00011cf9 	.word	0x00011cf9
   11fdc:	00011eb5 	.word	0x00011eb5

00011fe0 <usart_disable>:
 *
 * \param[in]  module  Pointer to USART software instance struct
 */
static inline void usart_disable(
		const struct usart_module *const module)
{
   11fe0:	b580      	push	{r7, lr}
   11fe2:	b084      	sub	sp, #16
   11fe4:	af00      	add	r7, sp, #0
   11fe6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   11fe8:	687b      	ldr	r3, [r7, #4]
   11fea:	681b      	ldr	r3, [r3, #0]
   11fec:	60fb      	str	r3, [r7, #12]

#if USART_CALLBACK_MODE == true
	/* Disable Global interrupt for module */
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
   11fee:	687b      	ldr	r3, [r7, #4]
   11ff0:	681b      	ldr	r3, [r3, #0]
   11ff2:	0018      	movs	r0, r3
   11ff4:	4b0a      	ldr	r3, [pc, #40]	; (12020 <usart_disable+0x40>)
   11ff6:	4798      	blx	r3
   11ff8:	0003      	movs	r3, r0
   11ffa:	0018      	movs	r0, r3
   11ffc:	4b09      	ldr	r3, [pc, #36]	; (12024 <usart_disable+0x44>)
   11ffe:	4798      	blx	r3
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   12000:	687b      	ldr	r3, [r7, #4]
   12002:	0018      	movs	r0, r3
   12004:	4b08      	ldr	r3, [pc, #32]	; (12028 <usart_disable+0x48>)
   12006:	4798      	blx	r3

	/* Disable USART module */
	usart_hw->CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
   12008:	68fb      	ldr	r3, [r7, #12]
   1200a:	681b      	ldr	r3, [r3, #0]
   1200c:	2202      	movs	r2, #2
   1200e:	4393      	bics	r3, r2
   12010:	001a      	movs	r2, r3
   12012:	68fb      	ldr	r3, [r7, #12]
   12014:	601a      	str	r2, [r3, #0]
}
   12016:	46c0      	nop			; (mov r8, r8)
   12018:	46bd      	mov	sp, r7
   1201a:	b004      	add	sp, #16
   1201c:	bd80      	pop	{r7, pc}
   1201e:	46c0      	nop			; (mov r8, r8)
   12020:	000220ed 	.word	0x000220ed
   12024:	00011d25 	.word	0x00011d25
   12028:	00011eb5 	.word	0x00011eb5

0001202c <usart_reset>:
 *
 * \param[in]  module  Pointer to the USART software instance struct
 */
static inline void usart_reset(
		const struct usart_module *const module)
{
   1202c:	b580      	push	{r7, lr}
   1202e:	b084      	sub	sp, #16
   12030:	af00      	add	r7, sp, #0
   12032:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   12034:	687b      	ldr	r3, [r7, #4]
   12036:	681b      	ldr	r3, [r3, #0]
   12038:	60fb      	str	r3, [r7, #12]

	usart_disable(module);
   1203a:	687b      	ldr	r3, [r7, #4]
   1203c:	0018      	movs	r0, r3
   1203e:	4b06      	ldr	r3, [pc, #24]	; (12058 <usart_reset+0x2c>)
   12040:	4798      	blx	r3

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   12042:	687b      	ldr	r3, [r7, #4]
   12044:	0018      	movs	r0, r3
   12046:	4b05      	ldr	r3, [pc, #20]	; (1205c <usart_reset+0x30>)
   12048:	4798      	blx	r3

	/* Reset module */
	usart_hw->CTRLA.reg = SERCOM_USART_CTRLA_SWRST;
   1204a:	68fb      	ldr	r3, [r7, #12]
   1204c:	2201      	movs	r2, #1
   1204e:	601a      	str	r2, [r3, #0]
}
   12050:	46c0      	nop			; (mov r8, r8)
   12052:	46bd      	mov	sp, r7
   12054:	b004      	add	sp, #16
   12056:	bd80      	pop	{r7, pc}
   12058:	00011fe1 	.word	0x00011fe1
   1205c:	00011eb5 	.word	0x00011eb5

00012060 <gsm_timer_callback>:
/** FreeRTOS timer callback function, fired when the a timer period has elapsed.
*
*  \param[in]  timer  ID of the timer that has expired.
*/
static void gsm_timer_callback(TimerHandle_t timer)
{
   12060:	b580      	push	{r7, lr}
   12062:	b082      	sub	sp, #8
   12064:	af00      	add	r7, sp, #0
   12066:	6078      	str	r0, [r7, #4]
}
   12068:	46c0      	nop			; (mov r8, r8)
   1206a:	46bd      	mov	sp, r7
   1206c:	b002      	add	sp, #8
   1206e:	bd80      	pop	{r7, pc}

00012070 <Flush_RX_Buffer>:

void Flush_RX_Buffer(void)
{
   12070:	b580      	push	{r7, lr}
   12072:	b082      	sub	sp, #8
   12074:	af00      	add	r7, sp, #0
	uint8_t ucharTemp_Value;
	portBASE_TYPE xStatus;
	while(1)
	{
		xStatus=xQueueReceive(gsm_rx_queue,&ucharTemp_Value,0);
   12076:	4b09      	ldr	r3, [pc, #36]	; (1209c <Flush_RX_Buffer+0x2c>)
   12078:	681b      	ldr	r3, [r3, #0]
   1207a:	1cf9      	adds	r1, r7, #3
   1207c:	2200      	movs	r2, #0
   1207e:	0018      	movs	r0, r3
   12080:	4b07      	ldr	r3, [pc, #28]	; (120a0 <Flush_RX_Buffer+0x30>)
   12082:	4798      	blx	r3
   12084:	0003      	movs	r3, r0
   12086:	607b      	str	r3, [r7, #4]
		if (xStatus==errQUEUE_EMPTY)
   12088:	687b      	ldr	r3, [r7, #4]
   1208a:	2b00      	cmp	r3, #0
   1208c:	d000      	beq.n	12090 <Flush_RX_Buffer+0x20>
		xStatus=xQueueReceive(gsm_rx_queue,&ucharTemp_Value,0);
   1208e:	e7f2      	b.n	12076 <Flush_RX_Buffer+0x6>
		{
			break;
   12090:	46c0      	nop			; (mov r8, r8)
		}
	}
}
   12092:	46c0      	nop			; (mov r8, r8)
   12094:	46bd      	mov	sp, r7
   12096:	b002      	add	sp, #8
   12098:	bd80      	pop	{r7, pc}
   1209a:	46c0      	nop			; (mov r8, r8)
   1209c:	2000021c 	.word	0x2000021c
   120a0:	0001f2d1 	.word	0x0001f2d1

000120a4 <gsm_rx_handler>:

static void gsm_rx_handler(uint8_t instance)
{
   120a4:	b590      	push	{r4, r7, lr}
   120a6:	b085      	sub	sp, #20
   120a8:	af00      	add	r7, sp, #0
   120aa:	0002      	movs	r2, r0
   120ac:	1dfb      	adds	r3, r7, #7
   120ae:	701a      	strb	r2, [r3, #0]
	SercomUsart *const usart_hw = &GSM_SERCOM->USART;
   120b0:	4b18      	ldr	r3, [pc, #96]	; (12114 <gsm_rx_handler+0x70>)
   120b2:	60fb      	str	r3, [r7, #12]
	UNUSED(instance);
	if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)
   120b4:	68fb      	ldr	r3, [r7, #12]
   120b6:	7e1b      	ldrb	r3, [r3, #24]
   120b8:	b2db      	uxtb	r3, r3
   120ba:	001a      	movs	r2, r3
   120bc:	2304      	movs	r3, #4
   120be:	4013      	ands	r3, r2
   120c0:	d023      	beq.n	1210a <gsm_rx_handler+0x66>
	{
		/* Check if a data reception error occurred */
		uint8_t rx_error = usart_hw->STATUS.reg &
   120c2:	68fb      	ldr	r3, [r7, #12]
   120c4:	8b5b      	ldrh	r3, [r3, #26]
   120c6:	b29b      	uxth	r3, r3
   120c8:	b2da      	uxtb	r2, r3
   120ca:	230b      	movs	r3, #11
   120cc:	18fb      	adds	r3, r7, r3
   120ce:	2106      	movs	r1, #6
   120d0:	400a      	ands	r2, r1
   120d2:	701a      	strb	r2, [r3, #0]
		(SERCOM_USART_STATUS_FERR | SERCOM_USART_STATUS_BUFOVF);
		/* If error occurred clear the error flags, otherwise queue new data */
		if (rx_error)
   120d4:	230b      	movs	r3, #11
   120d6:	18fb      	adds	r3, r7, r3
   120d8:	781b      	ldrb	r3, [r3, #0]
   120da:	2b00      	cmp	r3, #0
   120dc:	d006      	beq.n	120ec <gsm_rx_handler+0x48>
		{
			usart_hw->STATUS.reg = rx_error;
   120de:	230b      	movs	r3, #11
   120e0:	18fb      	adds	r3, r7, r3
   120e2:	781b      	ldrb	r3, [r3, #0]
   120e4:	b29a      	uxth	r2, r3
   120e6:	68fb      	ldr	r3, [r7, #12]
   120e8:	835a      	strh	r2, [r3, #26]
			uint8_t data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
			xQueueSendFromISR(gsm_rx_queue, &data, NULL);
			//gsm_module_exit_sleep(true);
		}
	}
}
   120ea:	e00e      	b.n	1210a <gsm_rx_handler+0x66>
			uint8_t data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
   120ec:	68fb      	ldr	r3, [r7, #12]
   120ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
   120f0:	b29b      	uxth	r3, r3
   120f2:	b2da      	uxtb	r2, r3
   120f4:	230a      	movs	r3, #10
   120f6:	18fb      	adds	r3, r7, r3
   120f8:	701a      	strb	r2, [r3, #0]
			xQueueSendFromISR(gsm_rx_queue, &data, NULL);
   120fa:	4b07      	ldr	r3, [pc, #28]	; (12118 <gsm_rx_handler+0x74>)
   120fc:	6818      	ldr	r0, [r3, #0]
   120fe:	230a      	movs	r3, #10
   12100:	18f9      	adds	r1, r7, r3
   12102:	2300      	movs	r3, #0
   12104:	2200      	movs	r2, #0
   12106:	4c05      	ldr	r4, [pc, #20]	; (1211c <gsm_rx_handler+0x78>)
   12108:	47a0      	blx	r4
}
   1210a:	46c0      	nop			; (mov r8, r8)
   1210c:	46bd      	mov	sp, r7
   1210e:	b005      	add	sp, #20
   12110:	bd90      	pop	{r4, r7, pc}
   12112:	46c0      	nop			; (mov r8, r8)
   12114:	42001400 	.word	0x42001400
   12118:	2000021c 	.word	0x2000021c
   1211c:	0001f1b1 	.word	0x0001f1b1

00012120 <gsm_ring_detect_pin_callback>:

static void gsm_ring_detect_pin_callback(void)
{
   12120:	b580      	push	{r7, lr}
   12122:	af00      	add	r7, sp, #0
	isRinging = !port_pin_get_input_level(GSM_RING_PIN);
   12124:	2031      	movs	r0, #49	; 0x31
   12126:	4b0b      	ldr	r3, [pc, #44]	; (12154 <gsm_ring_detect_pin_callback+0x34>)
   12128:	4798      	blx	r3
   1212a:	0003      	movs	r3, r0
   1212c:	1e5a      	subs	r2, r3, #1
   1212e:	4193      	sbcs	r3, r2
   12130:	b2db      	uxtb	r3, r3
   12132:	2201      	movs	r2, #1
   12134:	4053      	eors	r3, r2
   12136:	b2db      	uxtb	r3, r3
   12138:	1c1a      	adds	r2, r3, #0
   1213a:	2301      	movs	r3, #1
   1213c:	4013      	ands	r3, r2
   1213e:	b2da      	uxtb	r2, r3
   12140:	4b05      	ldr	r3, [pc, #20]	; (12158 <gsm_ring_detect_pin_callback+0x38>)
   12142:	701a      	strb	r2, [r3, #0]
	lastRingStateChangeTime = xTaskGetTickCountFromISR();
   12144:	4b05      	ldr	r3, [pc, #20]	; (1215c <gsm_ring_detect_pin_callback+0x3c>)
   12146:	4798      	blx	r3
   12148:	0002      	movs	r2, r0
   1214a:	4b05      	ldr	r3, [pc, #20]	; (12160 <gsm_ring_detect_pin_callback+0x40>)
   1214c:	601a      	str	r2, [r3, #0]
}
   1214e:	46c0      	nop			; (mov r8, r8)
   12150:	46bd      	mov	sp, r7
   12152:	bd80      	pop	{r7, pc}
   12154:	00011dfd 	.word	0x00011dfd
   12158:	2000068e 	.word	0x2000068e
   1215c:	000200f9 	.word	0x000200f9
   12160:	200006cc 	.word	0x200006cc

00012164 <gsm_init>:

void gsm_init(void)
{
   12164:	b590      	push	{r4, r7, lr}
   12166:	b097      	sub	sp, #92	; 0x5c
   12168:	af02      	add	r7, sp, #8
	struct port_config gsm_pin_config;
	port_get_config_defaults(&gsm_pin_config);
   1216a:	234c      	movs	r3, #76	; 0x4c
   1216c:	18fb      	adds	r3, r7, r3
   1216e:	0018      	movs	r0, r3
   12170:	4b4d      	ldr	r3, [pc, #308]	; (122a8 <gsm_init+0x144>)
   12172:	4798      	blx	r3
	
	/* Configure pin to control the GSM module sleep state */
	gsm_pin_config.direction = PORT_PIN_DIR_OUTPUT;
   12174:	234c      	movs	r3, #76	; 0x4c
   12176:	18fb      	adds	r3, r7, r3
   12178:	2201      	movs	r2, #1
   1217a:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(GSM_DTR_PIN, &gsm_pin_config);
   1217c:	234c      	movs	r3, #76	; 0x4c
   1217e:	18fb      	adds	r3, r7, r3
   12180:	0019      	movs	r1, r3
   12182:	2014      	movs	r0, #20
   12184:	4b49      	ldr	r3, [pc, #292]	; (122ac <gsm_init+0x148>)
   12186:	4798      	blx	r3
	port_pin_set_output_level(GSM_DTR_PIN, !GSM_DTR_PIN_ACTIVE);
   12188:	2100      	movs	r1, #0
   1218a:	2014      	movs	r0, #20
   1218c:	4b48      	ldr	r3, [pc, #288]	; (122b0 <gsm_init+0x14c>)
   1218e:	4798      	blx	r3
	
	//////////////////////////////////////////////////////////////////////////
	struct extint_chan_conf config_extint_chan;
	extint_chan_get_config_defaults(&config_extint_chan);
   12190:	2340      	movs	r3, #64	; 0x40
   12192:	18fb      	adds	r3, r7, r3
   12194:	0018      	movs	r0, r3
   12196:	4b47      	ldr	r3, [pc, #284]	; (122b4 <gsm_init+0x150>)
   12198:	4798      	blx	r3
	config_extint_chan.gpio_pin = GSM_RING_EIC_PIN;
   1219a:	2340      	movs	r3, #64	; 0x40
   1219c:	18fb      	adds	r3, r7, r3
   1219e:	2231      	movs	r2, #49	; 0x31
   121a0:	601a      	str	r2, [r3, #0]
	config_extint_chan.gpio_pin_mux = GSM_RING_EIC_MUX;
   121a2:	2340      	movs	r3, #64	; 0x40
   121a4:	18fb      	adds	r3, r7, r3
   121a6:	2200      	movs	r2, #0
   121a8:	605a      	str	r2, [r3, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
   121aa:	2340      	movs	r3, #64	; 0x40
   121ac:	18fb      	adds	r3, r7, r3
   121ae:	2201      	movs	r2, #1
   121b0:	721a      	strb	r2, [r3, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_BOTH;
   121b2:	2340      	movs	r3, #64	; 0x40
   121b4:	18fb      	adds	r3, r7, r3
   121b6:	2203      	movs	r2, #3
   121b8:	72da      	strb	r2, [r3, #11]
	extint_chan_set_config(GSM_RING_EIC_LINE, &config_extint_chan);
   121ba:	2340      	movs	r3, #64	; 0x40
   121bc:	18fb      	adds	r3, r7, r3
   121be:	0019      	movs	r1, r3
   121c0:	2001      	movs	r0, #1
   121c2:	4b3d      	ldr	r3, [pc, #244]	; (122b8 <gsm_init+0x154>)
   121c4:	4798      	blx	r3
	
	extint_chan_enable_callback(GSM_RING_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
   121c6:	2100      	movs	r1, #0
   121c8:	2001      	movs	r0, #1
   121ca:	4b3c      	ldr	r3, [pc, #240]	; (122bc <gsm_init+0x158>)
   121cc:	4798      	blx	r3
	extint_register_callback(gsm_ring_detect_pin_callback,GSM_RING_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
   121ce:	4b3c      	ldr	r3, [pc, #240]	; (122c0 <gsm_init+0x15c>)
   121d0:	2200      	movs	r2, #0
   121d2:	2101      	movs	r1, #1
   121d4:	0018      	movs	r0, r3
   121d6:	4b3b      	ldr	r3, [pc, #236]	; (122c4 <gsm_init+0x160>)
   121d8:	4798      	blx	r3
	//////////////////////////////////////////////////////////////////////////
	
	gsm_rx_queue = xQueueCreate(240, sizeof(uint8_t));
   121da:	2200      	movs	r2, #0
   121dc:	2101      	movs	r1, #1
   121de:	20f0      	movs	r0, #240	; 0xf0
   121e0:	4b39      	ldr	r3, [pc, #228]	; (122c8 <gsm_init+0x164>)
   121e2:	4798      	blx	r3
   121e4:	0002      	movs	r2, r0
   121e6:	4b39      	ldr	r3, [pc, #228]	; (122cc <gsm_init+0x168>)
   121e8:	601a      	str	r2, [r3, #0]
	gsm_cmd_timeout_timer = xTimerCreate((const char *)"GSM Timeout",GSM_TIMEOUT_PERIOD_TICKS, pdFALSE, NULL, gsm_timer_callback);
   121ea:	4939      	ldr	r1, [pc, #228]	; (122d0 <gsm_init+0x16c>)
   121ec:	4839      	ldr	r0, [pc, #228]	; (122d4 <gsm_init+0x170>)
   121ee:	4b3a      	ldr	r3, [pc, #232]	; (122d8 <gsm_init+0x174>)
   121f0:	9300      	str	r3, [sp, #0]
   121f2:	2300      	movs	r3, #0
   121f4:	2200      	movs	r2, #0
   121f6:	4c39      	ldr	r4, [pc, #228]	; (122dc <gsm_init+0x178>)
   121f8:	47a0      	blx	r4
   121fa:	0002      	movs	r2, r0
   121fc:	4b38      	ldr	r3, [pc, #224]	; (122e0 <gsm_init+0x17c>)
   121fe:	601a      	str	r2, [r3, #0]
	vSemaphoreCreateBinary(gsm_busy_semaphore);
   12200:	2203      	movs	r2, #3
   12202:	2100      	movs	r1, #0
   12204:	2001      	movs	r0, #1
   12206:	4b30      	ldr	r3, [pc, #192]	; (122c8 <gsm_init+0x164>)
   12208:	4798      	blx	r3
   1220a:	0002      	movs	r2, r0
   1220c:	4b35      	ldr	r3, [pc, #212]	; (122e4 <gsm_init+0x180>)
   1220e:	601a      	str	r2, [r3, #0]
   12210:	4b34      	ldr	r3, [pc, #208]	; (122e4 <gsm_init+0x180>)
   12212:	681b      	ldr	r3, [r3, #0]
   12214:	2b00      	cmp	r3, #0
   12216:	d006      	beq.n	12226 <gsm_init+0xc2>
   12218:	4b32      	ldr	r3, [pc, #200]	; (122e4 <gsm_init+0x180>)
   1221a:	6818      	ldr	r0, [r3, #0]
   1221c:	2300      	movs	r3, #0
   1221e:	2200      	movs	r2, #0
   12220:	2100      	movs	r1, #0
   12222:	4c31      	ldr	r4, [pc, #196]	; (122e8 <gsm_init+0x184>)
   12224:	47a0      	blx	r4
	
	struct usart_config config_usart;
	usart_get_config_defaults(&config_usart);
   12226:	003b      	movs	r3, r7
   12228:	0018      	movs	r0, r3
   1222a:	4b30      	ldr	r3, [pc, #192]	; (122ec <gsm_init+0x188>)
   1222c:	4798      	blx	r3
	config_usart.baudrate		= GSM_BAUDRATE;
   1222e:	003b      	movs	r3, r7
   12230:	2296      	movs	r2, #150	; 0x96
   12232:	01d2      	lsls	r2, r2, #7
   12234:	621a      	str	r2, [r3, #32]
	config_usart.mux_setting	= GSM_SERCOM_MUX;
   12236:	003b      	movs	r3, r7
   12238:	2280      	movs	r2, #128	; 0x80
   1223a:	0352      	lsls	r2, r2, #13
   1223c:	60da      	str	r2, [r3, #12]
	config_usart.pinmux_pad0	= GSM_SERCOM_PAD0_MUX;
   1223e:	003b      	movs	r3, r7
   12240:	4a2b      	ldr	r2, [pc, #172]	; (122f0 <gsm_init+0x18c>)
   12242:	631a      	str	r2, [r3, #48]	; 0x30
	config_usart.pinmux_pad1	= GSM_SERCOM_PAD1_MUX;
   12244:	003b      	movs	r3, r7
   12246:	4a2b      	ldr	r2, [pc, #172]	; (122f4 <gsm_init+0x190>)
   12248:	635a      	str	r2, [r3, #52]	; 0x34
	config_usart.pinmux_pad2	= GSM_SERCOM_PAD2_MUX;
   1224a:	003b      	movs	r3, r7
   1224c:	2201      	movs	r2, #1
   1224e:	4252      	negs	r2, r2
   12250:	639a      	str	r2, [r3, #56]	; 0x38
	config_usart.pinmux_pad3	= GSM_SERCOM_PAD3_MUX;
   12252:	003b      	movs	r3, r7
   12254:	2201      	movs	r2, #1
   12256:	4252      	negs	r2, r2
   12258:	63da      	str	r2, [r3, #60]	; 0x3c
	config_usart.run_in_standby = true;
   1225a:	003b      	movs	r3, r7
   1225c:	222c      	movs	r2, #44	; 0x2c
   1225e:	2101      	movs	r1, #1
   12260:	5499      	strb	r1, [r3, r2]
	while (usart_init(&gsm_usart,GSM_SERCOM, &config_usart) != STATUS_OK)
   12262:	e003      	b.n	1226c <gsm_init+0x108>
	{
		usart_reset(&gsm_usart);
   12264:	4b24      	ldr	r3, [pc, #144]	; (122f8 <gsm_init+0x194>)
   12266:	0018      	movs	r0, r3
   12268:	4b24      	ldr	r3, [pc, #144]	; (122fc <gsm_init+0x198>)
   1226a:	4798      	blx	r3
	while (usart_init(&gsm_usart,GSM_SERCOM, &config_usart) != STATUS_OK)
   1226c:	003a      	movs	r2, r7
   1226e:	4924      	ldr	r1, [pc, #144]	; (12300 <gsm_init+0x19c>)
   12270:	4b21      	ldr	r3, [pc, #132]	; (122f8 <gsm_init+0x194>)
   12272:	0018      	movs	r0, r3
   12274:	4b23      	ldr	r3, [pc, #140]	; (12304 <gsm_init+0x1a0>)
   12276:	4798      	blx	r3
   12278:	1e03      	subs	r3, r0, #0
   1227a:	d1f3      	bne.n	12264 <gsm_init+0x100>
	}
	usart_enable(&gsm_usart);
   1227c:	4b1e      	ldr	r3, [pc, #120]	; (122f8 <gsm_init+0x194>)
   1227e:	0018      	movs	r0, r3
   12280:	4b21      	ldr	r3, [pc, #132]	; (12308 <gsm_init+0x1a4>)
   12282:	4798      	blx	r3
	_sercom_set_handler(_sercom_get_sercom_inst_index(GSM_SERCOM),gsm_rx_handler);
   12284:	4b1e      	ldr	r3, [pc, #120]	; (12300 <gsm_init+0x19c>)
   12286:	0018      	movs	r0, r3
   12288:	4b20      	ldr	r3, [pc, #128]	; (1230c <gsm_init+0x1a8>)
   1228a:	4798      	blx	r3
   1228c:	0003      	movs	r3, r0
   1228e:	001a      	movs	r2, r3
   12290:	4b1f      	ldr	r3, [pc, #124]	; (12310 <gsm_init+0x1ac>)
   12292:	0019      	movs	r1, r3
   12294:	0010      	movs	r0, r2
   12296:	4b1f      	ldr	r3, [pc, #124]	; (12314 <gsm_init+0x1b0>)
   12298:	4798      	blx	r3
	GSM_SERCOM->USART.INTENSET.reg=SERCOM_USART_INTFLAG_RXC;
   1229a:	4b19      	ldr	r3, [pc, #100]	; (12300 <gsm_init+0x19c>)
   1229c:	2204      	movs	r2, #4
   1229e:	759a      	strb	r2, [r3, #22]
}
   122a0:	46c0      	nop			; (mov r8, r8)
   122a2:	46bd      	mov	sp, r7
   122a4:	b015      	add	sp, #84	; 0x54
   122a6:	bd90      	pop	{r4, r7, pc}
   122a8:	00011dd9 	.word	0x00011dd9
   122ac:	00022be1 	.word	0x00022be1
   122b0:	00011e41 	.word	0x00011e41
   122b4:	0001e215 	.word	0x0001e215
   122b8:	0001e249 	.word	0x0001e249
   122bc:	000222f1 	.word	0x000222f1
   122c0:	00012121 	.word	0x00012121
   122c4:	0002228d 	.word	0x0002228d
   122c8:	0001ef15 	.word	0x0001ef15
   122cc:	2000021c 	.word	0x2000021c
   122d0:	00001388 	.word	0x00001388
   122d4:	00029684 	.word	0x00029684
   122d8:	00012061 	.word	0x00012061
   122dc:	00020c99 	.word	0x00020c99
   122e0:	20000220 	.word	0x20000220
   122e4:	20000224 	.word	0x20000224
   122e8:	0001efd1 	.word	0x0001efd1
   122ec:	00011ed9 	.word	0x00011ed9
   122f0:	00160002 	.word	0x00160002
   122f4:	00170002 	.word	0x00170002
   122f8:	20000698 	.word	0x20000698
   122fc:	0001202d 	.word	0x0001202d
   12300:	42001400 	.word	0x42001400
   12304:	000218e5 	.word	0x000218e5
   12308:	00011f99 	.word	0x00011f99
   1230c:	0001e9a9 	.word	0x0001e9a9
   12310:	000120a5 	.word	0x000120a5
   12314:	00022081 	.word	0x00022081

00012318 <gsm_module_exit_sleep>:

void gsm_module_exit_sleep(bool calledFromRead)
{
   12318:	b580      	push	{r7, lr}
   1231a:	b082      	sub	sp, #8
   1231c:	af00      	add	r7, sp, #0
   1231e:	0002      	movs	r2, r0
   12320:	1dfb      	adds	r3, r7, #7
   12322:	701a      	strb	r2, [r3, #0]
	if (!isGSMModuleAwake)
   12324:	4b12      	ldr	r3, [pc, #72]	; (12370 <gsm_module_exit_sleep+0x58>)
   12326:	781b      	ldrb	r3, [r3, #0]
   12328:	b2db      	uxtb	r3, r3
   1232a:	2201      	movs	r2, #1
   1232c:	4053      	eors	r3, r2
   1232e:	b2db      	uxtb	r3, r3
   12330:	2b00      	cmp	r3, #0
   12332:	d010      	beq.n	12356 <gsm_module_exit_sleep+0x3e>
	{
		port_pin_set_output_level(GSM_DTR_PIN, GSM_DTR_PIN_ACTIVE);
   12334:	2101      	movs	r1, #1
   12336:	2014      	movs	r0, #20
   12338:	4b0e      	ldr	r3, [pc, #56]	; (12374 <gsm_module_exit_sleep+0x5c>)
   1233a:	4798      	blx	r3
		isGSMModuleAwake = true;
   1233c:	4b0c      	ldr	r3, [pc, #48]	; (12370 <gsm_module_exit_sleep+0x58>)
   1233e:	2201      	movs	r2, #1
   12340:	701a      	strb	r2, [r3, #0]
		if (!calledFromRead)
   12342:	1dfb      	adds	r3, r7, #7
   12344:	781b      	ldrb	r3, [r3, #0]
   12346:	2201      	movs	r2, #1
   12348:	4053      	eors	r3, r2
   1234a:	b2db      	uxtb	r3, r3
   1234c:	2b00      	cmp	r3, #0
   1234e:	d002      	beq.n	12356 <gsm_module_exit_sleep+0x3e>
		{
			vTaskDelay(100 / portTICK_PERIOD_MS);
   12350:	2064      	movs	r0, #100	; 0x64
   12352:	4b09      	ldr	r3, [pc, #36]	; (12378 <gsm_module_exit_sleep+0x60>)
   12354:	4798      	blx	r3
		}
	}
	lastToLastGSMCommunicationTime=lastGSMCommunicationTime;
   12356:	4b09      	ldr	r3, [pc, #36]	; (1237c <gsm_module_exit_sleep+0x64>)
   12358:	681a      	ldr	r2, [r3, #0]
   1235a:	4b09      	ldr	r3, [pc, #36]	; (12380 <gsm_module_exit_sleep+0x68>)
   1235c:	601a      	str	r2, [r3, #0]
	lastGSMCommunicationTime=xTaskGetTickCount();
   1235e:	4b09      	ldr	r3, [pc, #36]	; (12384 <gsm_module_exit_sleep+0x6c>)
   12360:	4798      	blx	r3
   12362:	0002      	movs	r2, r0
   12364:	4b05      	ldr	r3, [pc, #20]	; (1237c <gsm_module_exit_sleep+0x64>)
   12366:	601a      	str	r2, [r3, #0]
}
   12368:	46c0      	nop			; (mov r8, r8)
   1236a:	46bd      	mov	sp, r7
   1236c:	b002      	add	sp, #8
   1236e:	bd80      	pop	{r7, pc}
   12370:	20000684 	.word	0x20000684
   12374:	00011e41 	.word	0x00011e41
   12378:	0001fd79 	.word	0x0001fd79
   1237c:	20000694 	.word	0x20000694
   12380:	20000690 	.word	0x20000690
   12384:	000200dd 	.word	0x000200dd

00012388 <gsm_module_enter_sleep>:

void gsm_module_enter_sleep(void)
{
   12388:	b580      	push	{r7, lr}
   1238a:	af00      	add	r7, sp, #0
	//port_pin_set_output_level(GSM_DTR_PIN, GSM_DTR_PIN_DEACTIVE);
	isGSMModuleAwake = false;
   1238c:	4b02      	ldr	r3, [pc, #8]	; (12398 <gsm_module_enter_sleep+0x10>)
   1238e:	2200      	movs	r2, #0
   12390:	701a      	strb	r2, [r3, #0]
}
   12392:	46c0      	nop			; (mov r8, r8)
   12394:	46bd      	mov	sp, r7
   12396:	bd80      	pop	{r7, pc}
   12398:	20000684 	.word	0x20000684

0001239c <gsm_module_sleep_elligible>:

bool gsm_module_sleep_elligible(void)
{
   1239c:	b580      	push	{r7, lr}
   1239e:	b082      	sub	sp, #8
   123a0:	af00      	add	r7, sp, #0
	if(isGSMModuleAwake)
   123a2:	4b0e      	ldr	r3, [pc, #56]	; (123dc <gsm_module_sleep_elligible+0x40>)
   123a4:	781b      	ldrb	r3, [r3, #0]
   123a6:	b2db      	uxtb	r3, r3
   123a8:	2b00      	cmp	r3, #0
   123aa:	d011      	beq.n	123d0 <gsm_module_sleep_elligible+0x34>
	{
		bool ret=false;
   123ac:	1dfb      	adds	r3, r7, #7
   123ae:	2200      	movs	r2, #0
   123b0:	701a      	strb	r2, [r3, #0]
		ret= ((xTaskGetTickCount() - lastGSMCommunicationTime)>=30000L);
   123b2:	4b0b      	ldr	r3, [pc, #44]	; (123e0 <gsm_module_sleep_elligible+0x44>)
   123b4:	4798      	blx	r3
   123b6:	0002      	movs	r2, r0
   123b8:	4b0a      	ldr	r3, [pc, #40]	; (123e4 <gsm_module_sleep_elligible+0x48>)
   123ba:	681b      	ldr	r3, [r3, #0]
   123bc:	1ad2      	subs	r2, r2, r3
   123be:	1dfb      	adds	r3, r7, #7
   123c0:	4909      	ldr	r1, [pc, #36]	; (123e8 <gsm_module_sleep_elligible+0x4c>)
   123c2:	4291      	cmp	r1, r2
   123c4:	4192      	sbcs	r2, r2
   123c6:	4252      	negs	r2, r2
   123c8:	701a      	strb	r2, [r3, #0]
		return ret;
   123ca:	1dfb      	adds	r3, r7, #7
   123cc:	781b      	ldrb	r3, [r3, #0]
   123ce:	e000      	b.n	123d2 <gsm_module_sleep_elligible+0x36>
	}
	return true;
   123d0:	2301      	movs	r3, #1
}
   123d2:	0018      	movs	r0, r3
   123d4:	46bd      	mov	sp, r7
   123d6:	b002      	add	sp, #8
   123d8:	bd80      	pop	{r7, pc}
   123da:	46c0      	nop			; (mov r8, r8)
   123dc:	20000684 	.word	0x20000684
   123e0:	000200dd 	.word	0x000200dd
   123e4:	20000694 	.word	0x20000694
   123e8:	0000752f 	.word	0x0000752f

000123ec <gsm_send_at_command>:

enum gsm_error gsm_send_at_command(const char *const atcommand,const char* aResponExit,const uint32_t aTimeoutMax,const uint8_t aLenOut, char *aResponOut)
{
   123ec:	b590      	push	{r4, r7, lr}
   123ee:	b08b      	sub	sp, #44	; 0x2c
   123f0:	af02      	add	r7, sp, #8
   123f2:	60f8      	str	r0, [r7, #12]
   123f4:	60b9      	str	r1, [r7, #8]
   123f6:	607a      	str	r2, [r7, #4]
   123f8:	001a      	movs	r2, r3
   123fa:	1cfb      	adds	r3, r7, #3
   123fc:	701a      	strb	r2, [r3, #0]
	
	/* Try to acquire the command lock; if already busy with a command, abort */
	if (xSemaphoreTake(gsm_busy_semaphore, 1) == pdFALSE)
   123fe:	4b66      	ldr	r3, [pc, #408]	; (12598 <gsm_send_at_command+0x1ac>)
   12400:	681b      	ldr	r3, [r3, #0]
   12402:	2101      	movs	r1, #1
   12404:	0018      	movs	r0, r3
   12406:	4b65      	ldr	r3, [pc, #404]	; (1259c <gsm_send_at_command+0x1b0>)
   12408:	4798      	blx	r3
   1240a:	1e03      	subs	r3, r0, #0
   1240c:	d101      	bne.n	12412 <gsm_send_at_command+0x26>
	{
		return GSM_ERROR_OPERATION_IN_PROGRESS;
   1240e:	2302      	movs	r3, #2
   12410:	e0bd      	b.n	1258e <gsm_send_at_command+0x1a2>
	}
	
	
	/* Enable DTR and wait for the module to be ready to accept a command */
	gsm_module_exit_sleep(false);
   12412:	2000      	movs	r0, #0
   12414:	4b62      	ldr	r3, [pc, #392]	; (125a0 <gsm_send_at_command+0x1b4>)
   12416:	4798      	blx	r3
	/*                                                                      */
	
	//lastGSMCommandTime=xTaskGetTickCount();
	
	//////////////////////////////////////////////////////////////////////////
	Flush_RX_Buffer();
   12418:	4b62      	ldr	r3, [pc, #392]	; (125a4 <gsm_send_at_command+0x1b8>)
   1241a:	4798      	blx	r3
	//////////////////////////////////////////////////////////////////////////
	enum gsm_error err_no=GSM_ERROR_NONE;
   1241c:	231f      	movs	r3, #31
   1241e:	18fb      	adds	r3, r7, r3
   12420:	2200      	movs	r2, #0
   12422:	701a      	strb	r2, [r3, #0]
	
	uint8_t u8tRx_Index=0;
   12424:	231e      	movs	r3, #30
   12426:	18fb      	adds	r3, r7, r3
   12428:	2200      	movs	r2, #0
   1242a:	701a      	strb	r2, [r3, #0]
	char u8tTemp_Char=0;
   1242c:	2313      	movs	r3, #19
   1242e:	18fb      	adds	r3, r7, r3
   12430:	2200      	movs	r2, #0
   12432:	701a      	strb	r2, [r3, #0]
	portBASE_TYPE xStatus;

	char *aDataBuffer = (char*) calloc(MAX_BUFFER_TMP,sizeof(char));
   12434:	2101      	movs	r1, #1
   12436:	20f0      	movs	r0, #240	; 0xf0
   12438:	4b5b      	ldr	r3, [pc, #364]	; (125a8 <gsm_send_at_command+0x1bc>)
   1243a:	4798      	blx	r3
   1243c:	0003      	movs	r3, r0
   1243e:	61bb      	str	r3, [r7, #24]
	
	//buffer created???
	if (aDataBuffer == NULL)
   12440:	69bb      	ldr	r3, [r7, #24]
   12442:	2b00      	cmp	r3, #0
   12444:	d101      	bne.n	1244a <gsm_send_at_command+0x5e>
	{
		//port_pin_set_output_level(GSM_DTR_PIN, !GSM_DTR_PIN_ACTIVE);
		return 0;
   12446:	2300      	movs	r3, #0
   12448:	e0a1      	b.n	1258e <gsm_send_at_command+0x1a2>
	}

	//reset to all 0
	memset(aDataBuffer, '\0', MAX_BUFFER_TMP);
   1244a:	69bb      	ldr	r3, [r7, #24]
   1244c:	22f0      	movs	r2, #240	; 0xf0
   1244e:	2100      	movs	r1, #0
   12450:	0018      	movs	r0, r3
   12452:	4b56      	ldr	r3, [pc, #344]	; (125ac <gsm_send_at_command+0x1c0>)
   12454:	4798      	blx	r3
	
	/* Send the command to the GSM module when it is ready */
	usart_write_buffer_wait(&gsm_usart, (uint8_t *)atcommand, strlen(atcommand));
   12456:	68fb      	ldr	r3, [r7, #12]
   12458:	0018      	movs	r0, r3
   1245a:	4b55      	ldr	r3, [pc, #340]	; (125b0 <gsm_send_at_command+0x1c4>)
   1245c:	4798      	blx	r3
   1245e:	0003      	movs	r3, r0
   12460:	b29a      	uxth	r2, r3
   12462:	68f9      	ldr	r1, [r7, #12]
   12464:	4b53      	ldr	r3, [pc, #332]	; (125b4 <gsm_send_at_command+0x1c8>)
   12466:	0018      	movs	r0, r3
   12468:	4b53      	ldr	r3, [pc, #332]	; (125b8 <gsm_send_at_command+0x1cc>)
   1246a:	4798      	blx	r3
	
	/* Start the timeout timer to ensure a timely response from the module */
	xTimerChangePeriod(gsm_cmd_timeout_timer,(aTimeoutMax / portTICK_PERIOD_MS),portMAX_DELAY);
   1246c:	4b53      	ldr	r3, [pc, #332]	; (125bc <gsm_send_at_command+0x1d0>)
   1246e:	6818      	ldr	r0, [r3, #0]
   12470:	687a      	ldr	r2, [r7, #4]
   12472:	2301      	movs	r3, #1
   12474:	425b      	negs	r3, r3
   12476:	9300      	str	r3, [sp, #0]
   12478:	2300      	movs	r3, #0
   1247a:	2104      	movs	r1, #4
   1247c:	4c50      	ldr	r4, [pc, #320]	; (125c0 <gsm_send_at_command+0x1d4>)
   1247e:	47a0      	blx	r4
	
	while (true)
	{
		if(xTimerIsTimerActive(gsm_cmd_timeout_timer))
   12480:	4b4e      	ldr	r3, [pc, #312]	; (125bc <gsm_send_at_command+0x1d0>)
   12482:	681b      	ldr	r3, [r3, #0]
   12484:	0018      	movs	r0, r3
   12486:	4b4f      	ldr	r3, [pc, #316]	; (125c4 <gsm_send_at_command+0x1d8>)
   12488:	4798      	blx	r3
   1248a:	1e03      	subs	r3, r0, #0
   1248c:	d03e      	beq.n	1250c <gsm_send_at_command+0x120>
		{
			if (u8tRx_Index<240)
   1248e:	231e      	movs	r3, #30
   12490:	18fb      	adds	r3, r7, r3
   12492:	781b      	ldrb	r3, [r3, #0]
   12494:	2bef      	cmp	r3, #239	; 0xef
   12496:	d81c      	bhi.n	124d2 <gsm_send_at_command+0xe6>
			{
				xStatus=xQueueReceive(gsm_rx_queue,&u8tTemp_Char, 0);
   12498:	4b4b      	ldr	r3, [pc, #300]	; (125c8 <gsm_send_at_command+0x1dc>)
   1249a:	681b      	ldr	r3, [r3, #0]
   1249c:	2213      	movs	r2, #19
   1249e:	18b9      	adds	r1, r7, r2
   124a0:	2200      	movs	r2, #0
   124a2:	0018      	movs	r0, r3
   124a4:	4b49      	ldr	r3, [pc, #292]	; (125cc <gsm_send_at_command+0x1e0>)
   124a6:	4798      	blx	r3
   124a8:	0003      	movs	r3, r0
   124aa:	617b      	str	r3, [r7, #20]
				if(xStatus!=errQUEUE_EMPTY)
   124ac:	697b      	ldr	r3, [r7, #20]
   124ae:	2b00      	cmp	r3, #0
   124b0:	d00f      	beq.n	124d2 <gsm_send_at_command+0xe6>
				{
					aDataBuffer[u8tRx_Index] = u8tTemp_Char;
   124b2:	231e      	movs	r3, #30
   124b4:	18fb      	adds	r3, r7, r3
   124b6:	781b      	ldrb	r3, [r3, #0]
   124b8:	69ba      	ldr	r2, [r7, #24]
   124ba:	18d3      	adds	r3, r2, r3
   124bc:	2213      	movs	r2, #19
   124be:	18ba      	adds	r2, r7, r2
   124c0:	7812      	ldrb	r2, [r2, #0]
   124c2:	701a      	strb	r2, [r3, #0]
					u8tRx_Index++;
   124c4:	231e      	movs	r3, #30
   124c6:	18fb      	adds	r3, r7, r3
   124c8:	781a      	ldrb	r2, [r3, #0]
   124ca:	231e      	movs	r3, #30
   124cc:	18fb      	adds	r3, r7, r3
   124ce:	3201      	adds	r2, #1
   124d0:	701a      	strb	r2, [r3, #0]
				}
			}
			if (aResponExit != NULL)
   124d2:	68bb      	ldr	r3, [r7, #8]
   124d4:	2b00      	cmp	r3, #0
   124d6:	d00c      	beq.n	124f2 <gsm_send_at_command+0x106>
			{
				if (strstr((const char*)aDataBuffer, (const char*)aResponExit) != NULL)
   124d8:	68ba      	ldr	r2, [r7, #8]
   124da:	69bb      	ldr	r3, [r7, #24]
   124dc:	0011      	movs	r1, r2
   124de:	0018      	movs	r0, r3
   124e0:	4b3b      	ldr	r3, [pc, #236]	; (125d0 <gsm_send_at_command+0x1e4>)
   124e2:	4798      	blx	r3
   124e4:	1e03      	subs	r3, r0, #0
   124e6:	d004      	beq.n	124f2 <gsm_send_at_command+0x106>
				{
					err_no = GSM_ERROR_NONE;
   124e8:	231f      	movs	r3, #31
   124ea:	18fb      	adds	r3, r7, r3
   124ec:	2200      	movs	r2, #0
   124ee:	701a      	strb	r2, [r3, #0]
					break;
   124f0:	e024      	b.n	1253c <gsm_send_at_command+0x150>
				}
			}
			if (strstr((const char*)aDataBuffer, (const char*)RESPONS_ERROR) != NULL)
   124f2:	4a38      	ldr	r2, [pc, #224]	; (125d4 <gsm_send_at_command+0x1e8>)
   124f4:	69bb      	ldr	r3, [r7, #24]
   124f6:	0011      	movs	r1, r2
   124f8:	0018      	movs	r0, r3
   124fa:	4b35      	ldr	r3, [pc, #212]	; (125d0 <gsm_send_at_command+0x1e4>)
   124fc:	4798      	blx	r3
   124fe:	1e03      	subs	r3, r0, #0
   12500:	d0be      	beq.n	12480 <gsm_send_at_command+0x94>
			{
				err_no = GSM_ERROR_COMMAND_ERROR;
   12502:	231f      	movs	r3, #31
   12504:	18fb      	adds	r3, r7, r3
   12506:	220b      	movs	r2, #11
   12508:	701a      	strb	r2, [r3, #0]
				break;
   1250a:	e017      	b.n	1253c <gsm_send_at_command+0x150>
			}
		}
		else
		{
			xTimerStop(gsm_cmd_timeout_timer, portMAX_DELAY);
   1250c:	4b2b      	ldr	r3, [pc, #172]	; (125bc <gsm_send_at_command+0x1d0>)
   1250e:	6818      	ldr	r0, [r3, #0]
   12510:	2301      	movs	r3, #1
   12512:	425b      	negs	r3, r3
   12514:	9300      	str	r3, [sp, #0]
   12516:	2300      	movs	r3, #0
   12518:	2200      	movs	r2, #0
   1251a:	2103      	movs	r1, #3
   1251c:	4c28      	ldr	r4, [pc, #160]	; (125c0 <gsm_send_at_command+0x1d4>)
   1251e:	47a0      	blx	r4
			if (u8tRx_Index==0)
   12520:	231e      	movs	r3, #30
   12522:	18fb      	adds	r3, r7, r3
   12524:	781b      	ldrb	r3, [r3, #0]
   12526:	2b00      	cmp	r3, #0
   12528:	d104      	bne.n	12534 <gsm_send_at_command+0x148>
			{
				err_no = GSM_ERROR_TIMEOUT;
   1252a:	231f      	movs	r3, #31
   1252c:	18fb      	adds	r3, r7, r3
   1252e:	2207      	movs	r2, #7
   12530:	701a      	strb	r2, [r3, #0]
				break;
   12532:	e003      	b.n	1253c <gsm_send_at_command+0x150>
			}
			else
			{
				err_no = GSM_ERROR_UNKWON;
   12534:	231f      	movs	r3, #31
   12536:	18fb      	adds	r3, r7, r3
   12538:	2208      	movs	r2, #8
   1253a:	701a      	strb	r2, [r3, #0]
			}
		}
	}
	
	//copy it to the out
	if ((aLenOut != 0) && (aResponOut != NULL) && (aLenOut > u8tRx_Index) && (err_no==GSM_ERROR_NONE))
   1253c:	1cfb      	adds	r3, r7, #3
   1253e:	781b      	ldrb	r3, [r3, #0]
   12540:	2b00      	cmp	r3, #0
   12542:	d016      	beq.n	12572 <gsm_send_at_command+0x186>
   12544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   12546:	2b00      	cmp	r3, #0
   12548:	d013      	beq.n	12572 <gsm_send_at_command+0x186>
   1254a:	1cfa      	adds	r2, r7, #3
   1254c:	231e      	movs	r3, #30
   1254e:	18fb      	adds	r3, r7, r3
   12550:	7812      	ldrb	r2, [r2, #0]
   12552:	781b      	ldrb	r3, [r3, #0]
   12554:	429a      	cmp	r2, r3
   12556:	d90c      	bls.n	12572 <gsm_send_at_command+0x186>
   12558:	231f      	movs	r3, #31
   1255a:	18fb      	adds	r3, r7, r3
   1255c:	781b      	ldrb	r3, [r3, #0]
   1255e:	2b00      	cmp	r3, #0
   12560:	d107      	bne.n	12572 <gsm_send_at_command+0x186>
	{
		memcpy(aResponOut, aDataBuffer, u8tRx_Index *sizeof(uint8_t));
   12562:	231e      	movs	r3, #30
   12564:	18fb      	adds	r3, r7, r3
   12566:	781a      	ldrb	r2, [r3, #0]
   12568:	69b9      	ldr	r1, [r7, #24]
   1256a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1256c:	0018      	movs	r0, r3
   1256e:	4b1a      	ldr	r3, [pc, #104]	; (125d8 <gsm_send_at_command+0x1ec>)
   12570:	4798      	blx	r3
	}
	
	//port_pin_set_output_level(GSM_DTR_PIN, !GSM_DTR_PIN_ACTIVE);
	
	xSemaphoreGive(gsm_busy_semaphore);
   12572:	4b09      	ldr	r3, [pc, #36]	; (12598 <gsm_send_at_command+0x1ac>)
   12574:	6818      	ldr	r0, [r3, #0]
   12576:	2300      	movs	r3, #0
   12578:	2200      	movs	r2, #0
   1257a:	2100      	movs	r1, #0
   1257c:	4c17      	ldr	r4, [pc, #92]	; (125dc <gsm_send_at_command+0x1f0>)
   1257e:	47a0      	blx	r4
	free(aDataBuffer);
   12580:	69bb      	ldr	r3, [r7, #24]
   12582:	0018      	movs	r0, r3
   12584:	4b16      	ldr	r3, [pc, #88]	; (125e0 <gsm_send_at_command+0x1f4>)
   12586:	4798      	blx	r3
	return err_no;
   12588:	231f      	movs	r3, #31
   1258a:	18fb      	adds	r3, r7, r3
   1258c:	781b      	ldrb	r3, [r3, #0]
}
   1258e:	0018      	movs	r0, r3
   12590:	46bd      	mov	sp, r7
   12592:	b009      	add	sp, #36	; 0x24
   12594:	bd90      	pop	{r4, r7, pc}
   12596:	46c0      	nop			; (mov r8, r8)
   12598:	20000224 	.word	0x20000224
   1259c:	0001f471 	.word	0x0001f471
   125a0:	00012319 	.word	0x00012319
   125a4:	00012071 	.word	0x00012071
   125a8:	000288d5 	.word	0x000288d5
   125ac:	000289e3 	.word	0x000289e3
   125b0:	00028c73 	.word	0x00028c73
   125b4:	20000698 	.word	0x20000698
   125b8:	00021bbd 	.word	0x00021bbd
   125bc:	20000220 	.word	0x20000220
   125c0:	00020d3d 	.word	0x00020d3d
   125c4:	000212b9 	.word	0x000212b9
   125c8:	2000021c 	.word	0x2000021c
   125cc:	0001f2d1 	.word	0x0001f2d1
   125d0:	00028ca3 	.word	0x00028ca3
   125d4:	00029690 	.word	0x00029690
   125d8:	000289ad 	.word	0x000289ad
   125dc:	0001efd1 	.word	0x0001efd1
   125e0:	00028975 	.word	0x00028975

000125e4 <gsm_check_module>:


enum gsm_error gsm_check_module(void)
{
   125e4:	b590      	push	{r4, r7, lr}
   125e6:	b083      	sub	sp, #12
   125e8:	af02      	add	r7, sp, #8
	return gsm_send_at_command((const char*)("AT\r"),(const char*)RESPONS_OK,5000,0, NULL);
   125ea:	4a06      	ldr	r2, [pc, #24]	; (12604 <gsm_check_module+0x20>)
   125ec:	4906      	ldr	r1, [pc, #24]	; (12608 <gsm_check_module+0x24>)
   125ee:	4807      	ldr	r0, [pc, #28]	; (1260c <gsm_check_module+0x28>)
   125f0:	2300      	movs	r3, #0
   125f2:	9300      	str	r3, [sp, #0]
   125f4:	2300      	movs	r3, #0
   125f6:	4c06      	ldr	r4, [pc, #24]	; (12610 <gsm_check_module+0x2c>)
   125f8:	47a0      	blx	r4
   125fa:	0003      	movs	r3, r0
}
   125fc:	0018      	movs	r0, r3
   125fe:	46bd      	mov	sp, r7
   12600:	b001      	add	sp, #4
   12602:	bd90      	pop	{r4, r7, pc}
   12604:	00001388 	.word	0x00001388
   12608:	00029698 	.word	0x00029698
   1260c:	0002969c 	.word	0x0002969c
   12610:	000123ed 	.word	0x000123ed

00012614 <gsm_is_network_registered>:
{
	return gsm_send_at_command((const char*)("AT+IFC=0,0\r"), (const char*)RESPONS_OK,5000,0, NULL);
}

enum gsm_error gsm_is_network_registered(void)
{
   12614:	b5b0      	push	{r4, r5, r7, lr}
   12616:	b084      	sub	sp, #16
   12618:	af02      	add	r7, sp, #8
	enum gsm_error errHomeNw;
	enum gsm_error errRomNw;
	errHomeNw = gsm_send_at_command((const char*)("AT+CREG?\r"), (const char*)"+CREG: 0,1",5000,0, NULL);
   1261a:	1dfc      	adds	r4, r7, #7
   1261c:	4a12      	ldr	r2, [pc, #72]	; (12668 <gsm_is_network_registered+0x54>)
   1261e:	4913      	ldr	r1, [pc, #76]	; (1266c <gsm_is_network_registered+0x58>)
   12620:	4813      	ldr	r0, [pc, #76]	; (12670 <gsm_is_network_registered+0x5c>)
   12622:	2300      	movs	r3, #0
   12624:	9300      	str	r3, [sp, #0]
   12626:	2300      	movs	r3, #0
   12628:	4d12      	ldr	r5, [pc, #72]	; (12674 <gsm_is_network_registered+0x60>)
   1262a:	47a8      	blx	r5
   1262c:	0003      	movs	r3, r0
   1262e:	7023      	strb	r3, [r4, #0]
	if (errHomeNw==GSM_ERROR_NONE)
   12630:	1dfb      	adds	r3, r7, #7
   12632:	781b      	ldrb	r3, [r3, #0]
   12634:	2b00      	cmp	r3, #0
   12636:	d101      	bne.n	1263c <gsm_is_network_registered+0x28>
	{
		return GSM_NETWORK_REGISTERED;
   12638:	2309      	movs	r3, #9
   1263a:	e011      	b.n	12660 <gsm_is_network_registered+0x4c>
	}
	else
	{
		errRomNw = gsm_send_at_command((const char*)("AT+CREG?\r"), (const char*)"+CREG: 0,5",5000,0, NULL);
   1263c:	1dbc      	adds	r4, r7, #6
   1263e:	4a0a      	ldr	r2, [pc, #40]	; (12668 <gsm_is_network_registered+0x54>)
   12640:	490d      	ldr	r1, [pc, #52]	; (12678 <gsm_is_network_registered+0x64>)
   12642:	480b      	ldr	r0, [pc, #44]	; (12670 <gsm_is_network_registered+0x5c>)
   12644:	2300      	movs	r3, #0
   12646:	9300      	str	r3, [sp, #0]
   12648:	2300      	movs	r3, #0
   1264a:	4d0a      	ldr	r5, [pc, #40]	; (12674 <gsm_is_network_registered+0x60>)
   1264c:	47a8      	blx	r5
   1264e:	0003      	movs	r3, r0
   12650:	7023      	strb	r3, [r4, #0]
		{
			if (errRomNw==GSM_ERROR_NONE)
   12652:	1dbb      	adds	r3, r7, #6
   12654:	781b      	ldrb	r3, [r3, #0]
   12656:	2b00      	cmp	r3, #0
   12658:	d101      	bne.n	1265e <gsm_is_network_registered+0x4a>
			{
				return GSM_NETWORK_REGISTERED;
   1265a:	2309      	movs	r3, #9
   1265c:	e000      	b.n	12660 <gsm_is_network_registered+0x4c>
			}
			else
			{
				return GSM_NETWORK_NOT_REGISTERED;
   1265e:	230a      	movs	r3, #10
			}
		}
	}
}
   12660:	0018      	movs	r0, r3
   12662:	46bd      	mov	sp, r7
   12664:	b002      	add	sp, #8
   12666:	bdb0      	pop	{r4, r5, r7, pc}
   12668:	00001388 	.word	0x00001388
   1266c:	000296ac 	.word	0x000296ac
   12670:	000296b8 	.word	0x000296b8
   12674:	000123ed 	.word	0x000123ed
   12678:	000296c4 	.word	0x000296c4

0001267c <gsm_set_baudrate>:

enum gsm_error gsm_set_baudrate(void)
{
   1267c:	b590      	push	{r4, r7, lr}
   1267e:	b089      	sub	sp, #36	; 0x24
   12680:	af02      	add	r7, sp, #8
	char baurate_at_command[20]={0};
   12682:	1d3b      	adds	r3, r7, #4
   12684:	0018      	movs	r0, r3
   12686:	2314      	movs	r3, #20
   12688:	001a      	movs	r2, r3
   1268a:	2100      	movs	r1, #0
   1268c:	4b0a      	ldr	r3, [pc, #40]	; (126b8 <gsm_set_baudrate+0x3c>)
   1268e:	4798      	blx	r3
	
	sprintf(baurate_at_command, "AT+IPR=%d\r",GSM_BAUDRATE);
   12690:	2396      	movs	r3, #150	; 0x96
   12692:	01da      	lsls	r2, r3, #7
   12694:	4909      	ldr	r1, [pc, #36]	; (126bc <gsm_set_baudrate+0x40>)
   12696:	1d3b      	adds	r3, r7, #4
   12698:	0018      	movs	r0, r3
   1269a:	4b09      	ldr	r3, [pc, #36]	; (126c0 <gsm_set_baudrate+0x44>)
   1269c:	4798      	blx	r3
	
	return gsm_send_at_command((const char*)(baurate_at_command), (const char*)RESPONS_OK,5000,0, NULL);
   1269e:	4a09      	ldr	r2, [pc, #36]	; (126c4 <gsm_set_baudrate+0x48>)
   126a0:	4909      	ldr	r1, [pc, #36]	; (126c8 <gsm_set_baudrate+0x4c>)
   126a2:	1d38      	adds	r0, r7, #4
   126a4:	2300      	movs	r3, #0
   126a6:	9300      	str	r3, [sp, #0]
   126a8:	2300      	movs	r3, #0
   126aa:	4c08      	ldr	r4, [pc, #32]	; (126cc <gsm_set_baudrate+0x50>)
   126ac:	47a0      	blx	r4
   126ae:	0003      	movs	r3, r0
}
   126b0:	0018      	movs	r0, r3
   126b2:	46bd      	mov	sp, r7
   126b4:	b007      	add	sp, #28
   126b6:	bd90      	pop	{r4, r7, pc}
   126b8:	000289e3 	.word	0x000289e3
   126bc:	000296d0 	.word	0x000296d0
   126c0:	00028be9 	.word	0x00028be9
   126c4:	00001388 	.word	0x00001388
   126c8:	00029698 	.word	0x00029698
   126cc:	000123ed 	.word	0x000123ed

000126d0 <gsm_detect_simcard>:
{
	return gsm_send_at_command((const char*)("AT+CFUN=1,1\r"), (const char*)RESPONS_OK,10000,0, NULL);
}

enum gsm_error gsm_detect_simcard(void)
{
   126d0:	b590      	push	{r4, r7, lr}
   126d2:	b083      	sub	sp, #12
   126d4:	af02      	add	r7, sp, #8
	return gsm_send_at_command((const char*)("AT+CPIN?\r"), (const char*)"+CPIN: READY",5000,0, NULL);
   126d6:	4a06      	ldr	r2, [pc, #24]	; (126f0 <gsm_detect_simcard+0x20>)
   126d8:	4906      	ldr	r1, [pc, #24]	; (126f4 <gsm_detect_simcard+0x24>)
   126da:	4807      	ldr	r0, [pc, #28]	; (126f8 <gsm_detect_simcard+0x28>)
   126dc:	2300      	movs	r3, #0
   126de:	9300      	str	r3, [sp, #0]
   126e0:	2300      	movs	r3, #0
   126e2:	4c06      	ldr	r4, [pc, #24]	; (126fc <gsm_detect_simcard+0x2c>)
   126e4:	47a0      	blx	r4
   126e6:	0003      	movs	r3, r0
}
   126e8:	0018      	movs	r0, r3
   126ea:	46bd      	mov	sp, r7
   126ec:	b001      	add	sp, #4
   126ee:	bd90      	pop	{r4, r7, pc}
   126f0:	00001388 	.word	0x00001388
   126f4:	00029740 	.word	0x00029740
   126f8:	00029750 	.word	0x00029750
   126fc:	000123ed 	.word	0x000123ed

00012700 <gsm_delete_all_sms>:

enum gsm_error gsm_delete_all_sms(void)
{
   12700:	b590      	push	{r4, r7, lr}
   12702:	b083      	sub	sp, #12
   12704:	af02      	add	r7, sp, #8
	return gsm_send_at_command((const char*)("AT+CMGDA=\"DEL ALL\"\r"), (const char*)RESPONS_OK,25000,0, NULL);
   12706:	4a06      	ldr	r2, [pc, #24]	; (12720 <gsm_delete_all_sms+0x20>)
   12708:	4906      	ldr	r1, [pc, #24]	; (12724 <gsm_delete_all_sms+0x24>)
   1270a:	4807      	ldr	r0, [pc, #28]	; (12728 <gsm_delete_all_sms+0x28>)
   1270c:	2300      	movs	r3, #0
   1270e:	9300      	str	r3, [sp, #0]
   12710:	2300      	movs	r3, #0
   12712:	4c06      	ldr	r4, [pc, #24]	; (1272c <gsm_delete_all_sms+0x2c>)
   12714:	47a0      	blx	r4
   12716:	0003      	movs	r3, r0
}
   12718:	0018      	movs	r0, r3
   1271a:	46bd      	mov	sp, r7
   1271c:	b001      	add	sp, #4
   1271e:	bd90      	pop	{r4, r7, pc}
   12720:	000061a8 	.word	0x000061a8
   12724:	00029698 	.word	0x00029698
   12728:	0002975c 	.word	0x0002975c
   1272c:	000123ed 	.word	0x000123ed

00012730 <gsm_store_active_profile>:

enum gsm_error gsm_store_active_profile(void)
{
   12730:	b590      	push	{r4, r7, lr}
   12732:	b083      	sub	sp, #12
   12734:	af02      	add	r7, sp, #8
	return gsm_send_at_command((const char*)("AT&W\r"), (const char*)RESPONS_OK,5000,0, NULL);
   12736:	4a06      	ldr	r2, [pc, #24]	; (12750 <gsm_store_active_profile+0x20>)
   12738:	4906      	ldr	r1, [pc, #24]	; (12754 <gsm_store_active_profile+0x24>)
   1273a:	4807      	ldr	r0, [pc, #28]	; (12758 <gsm_store_active_profile+0x28>)
   1273c:	2300      	movs	r3, #0
   1273e:	9300      	str	r3, [sp, #0]
   12740:	2300      	movs	r3, #0
   12742:	4c06      	ldr	r4, [pc, #24]	; (1275c <gsm_store_active_profile+0x2c>)
   12744:	47a0      	blx	r4
   12746:	0003      	movs	r3, r0
}
   12748:	0018      	movs	r0, r3
   1274a:	46bd      	mov	sp, r7
   1274c:	b001      	add	sp, #4
   1274e:	bd90      	pop	{r4, r7, pc}
   12750:	00001388 	.word	0x00001388
   12754:	00029698 	.word	0x00029698
   12758:	00029770 	.word	0x00029770
   1275c:	000123ed 	.word	0x000123ed

00012760 <gsm_enable_calling_line_identification>:


enum gsm_error gsm_enable_calling_line_identification(void)
{
   12760:	b590      	push	{r4, r7, lr}
   12762:	b083      	sub	sp, #12
   12764:	af02      	add	r7, sp, #8
	return gsm_send_at_command((const char*)("AT+CLIP=1\r"), (const char*)RESPONS_OK,15000,0, NULL);
   12766:	4a06      	ldr	r2, [pc, #24]	; (12780 <gsm_enable_calling_line_identification+0x20>)
   12768:	4906      	ldr	r1, [pc, #24]	; (12784 <gsm_enable_calling_line_identification+0x24>)
   1276a:	4807      	ldr	r0, [pc, #28]	; (12788 <gsm_enable_calling_line_identification+0x28>)
   1276c:	2300      	movs	r3, #0
   1276e:	9300      	str	r3, [sp, #0]
   12770:	2300      	movs	r3, #0
   12772:	4c06      	ldr	r4, [pc, #24]	; (1278c <gsm_enable_calling_line_identification+0x2c>)
   12774:	47a0      	blx	r4
   12776:	0003      	movs	r3, r0
}
   12778:	0018      	movs	r0, r3
   1277a:	46bd      	mov	sp, r7
   1277c:	b001      	add	sp, #4
   1277e:	bd90      	pop	{r4, r7, pc}
   12780:	00003a98 	.word	0x00003a98
   12784:	00029698 	.word	0x00029698
   12788:	00029778 	.word	0x00029778
   1278c:	000123ed 	.word	0x000123ed

00012790 <gsm_enable_connected_line_identification_presentation>:

enum gsm_error gsm_enable_connected_line_identification_presentation(void)
{
   12790:	b590      	push	{r4, r7, lr}
   12792:	b083      	sub	sp, #12
   12794:	af02      	add	r7, sp, #8
	return gsm_send_at_command((const char*)("AT+COLP=1\r"), (const char*)RESPONS_OK,5000,0, NULL);
   12796:	4a06      	ldr	r2, [pc, #24]	; (127b0 <gsm_enable_connected_line_identification_presentation+0x20>)
   12798:	4906      	ldr	r1, [pc, #24]	; (127b4 <gsm_enable_connected_line_identification_presentation+0x24>)
   1279a:	4807      	ldr	r0, [pc, #28]	; (127b8 <gsm_enable_connected_line_identification_presentation+0x28>)
   1279c:	2300      	movs	r3, #0
   1279e:	9300      	str	r3, [sp, #0]
   127a0:	2300      	movs	r3, #0
   127a2:	4c06      	ldr	r4, [pc, #24]	; (127bc <gsm_enable_connected_line_identification_presentation+0x2c>)
   127a4:	47a0      	blx	r4
   127a6:	0003      	movs	r3, r0
}
   127a8:	0018      	movs	r0, r3
   127aa:	46bd      	mov	sp, r7
   127ac:	b001      	add	sp, #4
   127ae:	bd90      	pop	{r4, r7, pc}
   127b0:	00001388 	.word	0x00001388
   127b4:	00029698 	.word	0x00029698
   127b8:	00029784 	.word	0x00029784
   127bc:	000123ed 	.word	0x000123ed

000127c0 <gsm_enable_sleep_mode>:


//The +CSCLK value can not be reset by AT&F or ATZ command.
enum gsm_error gsm_enable_sleep_mode(void)
{
   127c0:	b590      	push	{r4, r7, lr}
   127c2:	b083      	sub	sp, #12
   127c4:	af02      	add	r7, sp, #8
	return gsm_send_at_command((const char*)("AT+CSCLK=1\r"), (const char*)RESPONS_OK,10000,0, NULL);
   127c6:	4a06      	ldr	r2, [pc, #24]	; (127e0 <gsm_enable_sleep_mode+0x20>)
   127c8:	4906      	ldr	r1, [pc, #24]	; (127e4 <gsm_enable_sleep_mode+0x24>)
   127ca:	4807      	ldr	r0, [pc, #28]	; (127e8 <gsm_enable_sleep_mode+0x28>)
   127cc:	2300      	movs	r3, #0
   127ce:	9300      	str	r3, [sp, #0]
   127d0:	2300      	movs	r3, #0
   127d2:	4c06      	ldr	r4, [pc, #24]	; (127ec <gsm_enable_sleep_mode+0x2c>)
   127d4:	47a0      	blx	r4
   127d6:	0003      	movs	r3, r0
}
   127d8:	0018      	movs	r0, r3
   127da:	46bd      	mov	sp, r7
   127dc:	b001      	add	sp, #4
   127de:	bd90      	pop	{r4, r7, pc}
   127e0:	00002710 	.word	0x00002710
   127e4:	00029698 	.word	0x00029698
   127e8:	00029790 	.word	0x00029790
   127ec:	000123ed 	.word	0x000123ed

000127f0 <gsm_enable_list_current_calls_of_ME>:
	}
}


enum gsm_error gsm_enable_list_current_calls_of_ME(void)
{
   127f0:	b590      	push	{r4, r7, lr}
   127f2:	b083      	sub	sp, #12
   127f4:	af02      	add	r7, sp, #8
	return gsm_send_at_command((const char*)("AT+CLCC=1\r"), (const char*)RESPONS_OK,5000,0, NULL);
   127f6:	4a06      	ldr	r2, [pc, #24]	; (12810 <gsm_enable_list_current_calls_of_ME+0x20>)
   127f8:	4906      	ldr	r1, [pc, #24]	; (12814 <gsm_enable_list_current_calls_of_ME+0x24>)
   127fa:	4807      	ldr	r0, [pc, #28]	; (12818 <gsm_enable_list_current_calls_of_ME+0x28>)
   127fc:	2300      	movs	r3, #0
   127fe:	9300      	str	r3, [sp, #0]
   12800:	2300      	movs	r3, #0
   12802:	4c06      	ldr	r4, [pc, #24]	; (1281c <gsm_enable_list_current_calls_of_ME+0x2c>)
   12804:	47a0      	blx	r4
   12806:	0003      	movs	r3, r0
}
   12808:	0018      	movs	r0, r3
   1280a:	46bd      	mov	sp, r7
   1280c:	b001      	add	sp, #4
   1280e:	bd90      	pop	{r4, r7, pc}
   12810:	00001388 	.word	0x00001388
   12814:	00029698 	.word	0x00029698
   12818:	000297b8 	.word	0x000297b8
   1281c:	000123ed 	.word	0x000123ed

00012820 <gsm_factory_reset>:

enum gsm_error gsm_factory_reset(void)
{
   12820:	b590      	push	{r4, r7, lr}
   12822:	b083      	sub	sp, #12
   12824:	af02      	add	r7, sp, #8
	return gsm_send_at_command((const char*)("AT&F\r"), (const char*)RESPONS_OK,15000,0, NULL);
   12826:	4a06      	ldr	r2, [pc, #24]	; (12840 <gsm_factory_reset+0x20>)
   12828:	4906      	ldr	r1, [pc, #24]	; (12844 <gsm_factory_reset+0x24>)
   1282a:	4807      	ldr	r0, [pc, #28]	; (12848 <gsm_factory_reset+0x28>)
   1282c:	2300      	movs	r3, #0
   1282e:	9300      	str	r3, [sp, #0]
   12830:	2300      	movs	r3, #0
   12832:	4c06      	ldr	r4, [pc, #24]	; (1284c <gsm_factory_reset+0x2c>)
   12834:	47a0      	blx	r4
   12836:	0003      	movs	r3, r0
}
   12838:	0018      	movs	r0, r3
   1283a:	46bd      	mov	sp, r7
   1283c:	b001      	add	sp, #4
   1283e:	bd90      	pop	{r4, r7, pc}
   12840:	00003a98 	.word	0x00003a98
   12844:	00029698 	.word	0x00029698
   12848:	000297c4 	.word	0x000297c4
   1284c:	000123ed 	.word	0x000123ed

00012850 <gsm_echo_off>:

enum gsm_error gsm_echo_off(void)
{
   12850:	b590      	push	{r4, r7, lr}
   12852:	b083      	sub	sp, #12
   12854:	af02      	add	r7, sp, #8
	return gsm_send_at_command((const char*)("ATE0\r"), (const char*)RESPONS_OK,5000,0, NULL);
   12856:	4a06      	ldr	r2, [pc, #24]	; (12870 <gsm_echo_off+0x20>)
   12858:	4906      	ldr	r1, [pc, #24]	; (12874 <gsm_echo_off+0x24>)
   1285a:	4807      	ldr	r0, [pc, #28]	; (12878 <gsm_echo_off+0x28>)
   1285c:	2300      	movs	r3, #0
   1285e:	9300      	str	r3, [sp, #0]
   12860:	2300      	movs	r3, #0
   12862:	4c06      	ldr	r4, [pc, #24]	; (1287c <gsm_echo_off+0x2c>)
   12864:	47a0      	blx	r4
   12866:	0003      	movs	r3, r0
}
   12868:	0018      	movs	r0, r3
   1286a:	46bd      	mov	sp, r7
   1286c:	b001      	add	sp, #4
   1286e:	bd90      	pop	{r4, r7, pc}
   12870:	00001388 	.word	0x00001388
   12874:	00029698 	.word	0x00029698
   12878:	000297cc 	.word	0x000297cc
   1287c:	000123ed 	.word	0x000123ed

00012880 <gsm_select_sms_message_formate_text_mode>:

enum gsm_error gsm_select_sms_message_formate_text_mode(void) //PDU:0,TEXT:1
{
   12880:	b590      	push	{r4, r7, lr}
   12882:	b083      	sub	sp, #12
   12884:	af02      	add	r7, sp, #8
	return gsm_send_at_command((const char*)("AT+CMGF=1\r"), (const char*)RESPONS_OK,5000,0, NULL);
   12886:	4a06      	ldr	r2, [pc, #24]	; (128a0 <gsm_select_sms_message_formate_text_mode+0x20>)
   12888:	4906      	ldr	r1, [pc, #24]	; (128a4 <gsm_select_sms_message_formate_text_mode+0x24>)
   1288a:	4807      	ldr	r0, [pc, #28]	; (128a8 <gsm_select_sms_message_formate_text_mode+0x28>)
   1288c:	2300      	movs	r3, #0
   1288e:	9300      	str	r3, [sp, #0]
   12890:	2300      	movs	r3, #0
   12892:	4c06      	ldr	r4, [pc, #24]	; (128ac <gsm_select_sms_message_formate_text_mode+0x2c>)
   12894:	47a0      	blx	r4
   12896:	0003      	movs	r3, r0
}
   12898:	0018      	movs	r0, r3
   1289a:	46bd      	mov	sp, r7
   1289c:	b001      	add	sp, #4
   1289e:	bd90      	pop	{r4, r7, pc}
   128a0:	00001388 	.word	0x00001388
   128a4:	00029698 	.word	0x00029698
   128a8:	000297d4 	.word	0x000297d4
   128ac:	000123ed 	.word	0x000123ed

000128b0 <gsm_set_sms_text_mode_parameter>:

enum gsm_error gsm_set_sms_text_mode_parameter(void)
{
   128b0:	b590      	push	{r4, r7, lr}
   128b2:	b083      	sub	sp, #12
   128b4:	af02      	add	r7, sp, #8
	return gsm_send_at_command((const char*)("AT+CSMP=17,167,0,0\r"), (const char*)RESPONS_OK,7000,0, NULL);
   128b6:	4a06      	ldr	r2, [pc, #24]	; (128d0 <gsm_set_sms_text_mode_parameter+0x20>)
   128b8:	4906      	ldr	r1, [pc, #24]	; (128d4 <gsm_set_sms_text_mode_parameter+0x24>)
   128ba:	4807      	ldr	r0, [pc, #28]	; (128d8 <gsm_set_sms_text_mode_parameter+0x28>)
   128bc:	2300      	movs	r3, #0
   128be:	9300      	str	r3, [sp, #0]
   128c0:	2300      	movs	r3, #0
   128c2:	4c06      	ldr	r4, [pc, #24]	; (128dc <gsm_set_sms_text_mode_parameter+0x2c>)
   128c4:	47a0      	blx	r4
   128c6:	0003      	movs	r3, r0
}
   128c8:	0018      	movs	r0, r3
   128ca:	46bd      	mov	sp, r7
   128cc:	b001      	add	sp, #4
   128ce:	bd90      	pop	{r4, r7, pc}
   128d0:	00001b58 	.word	0x00001b58
   128d4:	00029698 	.word	0x00029698
   128d8:	000297e0 	.word	0x000297e0
   128dc:	000123ed 	.word	0x000123ed

000128e0 <gsm_getsignalstrength>:
20--25   4
26--31   5

*/
uint8_t gsm_getsignalstrength(void)
{
   128e0:	b5b0      	push	{r4, r5, r7, lr}
   128e2:	b088      	sub	sp, #32
   128e4:	af02      	add	r7, sp, #8
	
	uint8_t sig_strength;
	
	const uint8_t MAX_BUFFER = 100;
   128e6:	2316      	movs	r3, #22
   128e8:	18fb      	adds	r3, r7, r3
   128ea:	2264      	movs	r2, #100	; 0x64
   128ec:	701a      	strb	r2, [r3, #0]
	char *cmdx = (char*) calloc(MAX_BUFFER,sizeof(char));
   128ee:	2316      	movs	r3, #22
   128f0:	18fb      	adds	r3, r7, r3
   128f2:	781b      	ldrb	r3, [r3, #0]
   128f4:	2101      	movs	r1, #1
   128f6:	0018      	movs	r0, r3
   128f8:	4b60      	ldr	r3, [pc, #384]	; (12a7c <gsm_getsignalstrength+0x19c>)
   128fa:	4798      	blx	r3
   128fc:	0003      	movs	r3, r0
   128fe:	613b      	str	r3, [r7, #16]
	if (cmdx == NULL)
   12900:	693b      	ldr	r3, [r7, #16]
   12902:	2b00      	cmp	r3, #0
   12904:	d105      	bne.n	12912 <gsm_getsignalstrength+0x32>
	{
		free(cmdx);
   12906:	693b      	ldr	r3, [r7, #16]
   12908:	0018      	movs	r0, r3
   1290a:	4b5d      	ldr	r3, [pc, #372]	; (12a80 <gsm_getsignalstrength+0x1a0>)
   1290c:	4798      	blx	r3
		return 0;
   1290e:	2300      	movs	r3, #0
   12910:	e0af      	b.n	12a72 <gsm_getsignalstrength+0x192>
	}
	memset(cmdx, '\0', MAX_BUFFER);
   12912:	2316      	movs	r3, #22
   12914:	18fb      	adds	r3, r7, r3
   12916:	781a      	ldrb	r2, [r3, #0]
   12918:	693b      	ldr	r3, [r7, #16]
   1291a:	2100      	movs	r1, #0
   1291c:	0018      	movs	r0, r3
   1291e:	4b59      	ldr	r3, [pc, #356]	; (12a84 <gsm_getsignalstrength+0x1a4>)
   12920:	4798      	blx	r3
	enum gsm_error gsm_err =  gsm_send_at_command((const char*)("AT+CSQ\r"), (const char*)RESPONS_OK,5000,MAX_BUFFER,cmdx);
   12922:	230f      	movs	r3, #15
   12924:	18fc      	adds	r4, r7, r3
   12926:	2316      	movs	r3, #22
   12928:	18fb      	adds	r3, r7, r3
   1292a:	781a      	ldrb	r2, [r3, #0]
   1292c:	4d56      	ldr	r5, [pc, #344]	; (12a88 <gsm_getsignalstrength+0x1a8>)
   1292e:	4957      	ldr	r1, [pc, #348]	; (12a8c <gsm_getsignalstrength+0x1ac>)
   12930:	4857      	ldr	r0, [pc, #348]	; (12a90 <gsm_getsignalstrength+0x1b0>)
   12932:	693b      	ldr	r3, [r7, #16]
   12934:	9300      	str	r3, [sp, #0]
   12936:	0013      	movs	r3, r2
   12938:	002a      	movs	r2, r5
   1293a:	4d56      	ldr	r5, [pc, #344]	; (12a94 <gsm_getsignalstrength+0x1b4>)
   1293c:	47a8      	blx	r5
   1293e:	0003      	movs	r3, r0
   12940:	7023      	strb	r3, [r4, #0]
	
	if(gsm_err == GSM_ERROR_NONE)
   12942:	230f      	movs	r3, #15
   12944:	18fb      	adds	r3, r7, r3
   12946:	781b      	ldrb	r3, [r3, #0]
   12948:	2b00      	cmp	r3, #0
   1294a:	d000      	beq.n	1294e <gsm_getsignalstrength+0x6e>
   1294c:	e086      	b.n	12a5c <gsm_getsignalstrength+0x17c>
	{
		if (strstr(cmdx,"99")==NULL)
   1294e:	4a52      	ldr	r2, [pc, #328]	; (12a98 <gsm_getsignalstrength+0x1b8>)
   12950:	693b      	ldr	r3, [r7, #16]
   12952:	0011      	movs	r1, r2
   12954:	0018      	movs	r0, r3
   12956:	4b51      	ldr	r3, [pc, #324]	; (12a9c <gsm_getsignalstrength+0x1bc>)
   12958:	4798      	blx	r3
   1295a:	1e03      	subs	r3, r0, #0
   1295c:	d000      	beq.n	12960 <gsm_getsignalstrength+0x80>
   1295e:	e078      	b.n	12a52 <gsm_getsignalstrength+0x172>
		{
			char *ptr_tocken;
			ptr_tocken = strtok(cmdx,":");
   12960:	4a4f      	ldr	r2, [pc, #316]	; (12aa0 <gsm_getsignalstrength+0x1c0>)
   12962:	693b      	ldr	r3, [r7, #16]
   12964:	0011      	movs	r1, r2
   12966:	0018      	movs	r0, r3
   12968:	4b4e      	ldr	r3, [pc, #312]	; (12aa4 <gsm_getsignalstrength+0x1c4>)
   1296a:	4798      	blx	r3
   1296c:	0003      	movs	r3, r0
   1296e:	60bb      	str	r3, [r7, #8]
			ptr_tocken = strtok(NULL,":");
   12970:	4b4b      	ldr	r3, [pc, #300]	; (12aa0 <gsm_getsignalstrength+0x1c0>)
   12972:	0019      	movs	r1, r3
   12974:	2000      	movs	r0, #0
   12976:	4b4b      	ldr	r3, [pc, #300]	; (12aa4 <gsm_getsignalstrength+0x1c4>)
   12978:	4798      	blx	r3
   1297a:	0003      	movs	r3, r0
   1297c:	60bb      	str	r3, [r7, #8]
			ptr_tocken = strtok(ptr_tocken,",");
   1297e:	4a4a      	ldr	r2, [pc, #296]	; (12aa8 <gsm_getsignalstrength+0x1c8>)
   12980:	68bb      	ldr	r3, [r7, #8]
   12982:	0011      	movs	r1, r2
   12984:	0018      	movs	r0, r3
   12986:	4b47      	ldr	r3, [pc, #284]	; (12aa4 <gsm_getsignalstrength+0x1c4>)
   12988:	4798      	blx	r3
   1298a:	0003      	movs	r3, r0
   1298c:	60bb      	str	r3, [r7, #8]
			RemoveSpaces(ptr_tocken);
   1298e:	68bb      	ldr	r3, [r7, #8]
   12990:	0018      	movs	r0, r3
   12992:	4b46      	ldr	r3, [pc, #280]	; (12aac <gsm_getsignalstrength+0x1cc>)
   12994:	4798      	blx	r3
			uint8_t nw = atoi(ptr_tocken);
   12996:	68bb      	ldr	r3, [r7, #8]
   12998:	0018      	movs	r0, r3
   1299a:	4b45      	ldr	r3, [pc, #276]	; (12ab0 <gsm_getsignalstrength+0x1d0>)
   1299c:	4798      	blx	r3
   1299e:	0002      	movs	r2, r0
   129a0:	1dfb      	adds	r3, r7, #7
   129a2:	701a      	strb	r2, [r3, #0]
			if (nw==0 || nw==1 || nw== 99)
   129a4:	1dfb      	adds	r3, r7, #7
   129a6:	781b      	ldrb	r3, [r3, #0]
   129a8:	2b00      	cmp	r3, #0
   129aa:	d007      	beq.n	129bc <gsm_getsignalstrength+0xdc>
   129ac:	1dfb      	adds	r3, r7, #7
   129ae:	781b      	ldrb	r3, [r3, #0]
   129b0:	2b01      	cmp	r3, #1
   129b2:	d003      	beq.n	129bc <gsm_getsignalstrength+0xdc>
   129b4:	1dfb      	adds	r3, r7, #7
   129b6:	781b      	ldrb	r3, [r3, #0]
   129b8:	2b63      	cmp	r3, #99	; 0x63
   129ba:	d104      	bne.n	129c6 <gsm_getsignalstrength+0xe6>
			{
				sig_strength = 0;
   129bc:	2317      	movs	r3, #23
   129be:	18fb      	adds	r3, r7, r3
   129c0:	2200      	movs	r2, #0
   129c2:	701a      	strb	r2, [r3, #0]
   129c4:	e04e      	b.n	12a64 <gsm_getsignalstrength+0x184>
			}
			else
			{
				if (nw>=2 && nw<=7)
   129c6:	1dfb      	adds	r3, r7, #7
   129c8:	781b      	ldrb	r3, [r3, #0]
   129ca:	2b01      	cmp	r3, #1
   129cc:	d908      	bls.n	129e0 <gsm_getsignalstrength+0x100>
   129ce:	1dfb      	adds	r3, r7, #7
   129d0:	781b      	ldrb	r3, [r3, #0]
   129d2:	2b07      	cmp	r3, #7
   129d4:	d804      	bhi.n	129e0 <gsm_getsignalstrength+0x100>
				{
					sig_strength = 1;
   129d6:	2317      	movs	r3, #23
   129d8:	18fb      	adds	r3, r7, r3
   129da:	2201      	movs	r2, #1
   129dc:	701a      	strb	r2, [r3, #0]
   129de:	e041      	b.n	12a64 <gsm_getsignalstrength+0x184>
				}
				else if (nw>=8 && nw<=13)
   129e0:	1dfb      	adds	r3, r7, #7
   129e2:	781b      	ldrb	r3, [r3, #0]
   129e4:	2b07      	cmp	r3, #7
   129e6:	d908      	bls.n	129fa <gsm_getsignalstrength+0x11a>
   129e8:	1dfb      	adds	r3, r7, #7
   129ea:	781b      	ldrb	r3, [r3, #0]
   129ec:	2b0d      	cmp	r3, #13
   129ee:	d804      	bhi.n	129fa <gsm_getsignalstrength+0x11a>
				{
					sig_strength = 2;
   129f0:	2317      	movs	r3, #23
   129f2:	18fb      	adds	r3, r7, r3
   129f4:	2202      	movs	r2, #2
   129f6:	701a      	strb	r2, [r3, #0]
   129f8:	e034      	b.n	12a64 <gsm_getsignalstrength+0x184>
				}
				else if (nw>=14 && nw<=19)
   129fa:	1dfb      	adds	r3, r7, #7
   129fc:	781b      	ldrb	r3, [r3, #0]
   129fe:	2b0d      	cmp	r3, #13
   12a00:	d908      	bls.n	12a14 <gsm_getsignalstrength+0x134>
   12a02:	1dfb      	adds	r3, r7, #7
   12a04:	781b      	ldrb	r3, [r3, #0]
   12a06:	2b13      	cmp	r3, #19
   12a08:	d804      	bhi.n	12a14 <gsm_getsignalstrength+0x134>
				{
					sig_strength = 3;
   12a0a:	2317      	movs	r3, #23
   12a0c:	18fb      	adds	r3, r7, r3
   12a0e:	2203      	movs	r2, #3
   12a10:	701a      	strb	r2, [r3, #0]
   12a12:	e027      	b.n	12a64 <gsm_getsignalstrength+0x184>
				}
				else if (nw>=20 && nw<=25)
   12a14:	1dfb      	adds	r3, r7, #7
   12a16:	781b      	ldrb	r3, [r3, #0]
   12a18:	2b13      	cmp	r3, #19
   12a1a:	d908      	bls.n	12a2e <gsm_getsignalstrength+0x14e>
   12a1c:	1dfb      	adds	r3, r7, #7
   12a1e:	781b      	ldrb	r3, [r3, #0]
   12a20:	2b19      	cmp	r3, #25
   12a22:	d804      	bhi.n	12a2e <gsm_getsignalstrength+0x14e>
				{
					sig_strength = 4;
   12a24:	2317      	movs	r3, #23
   12a26:	18fb      	adds	r3, r7, r3
   12a28:	2204      	movs	r2, #4
   12a2a:	701a      	strb	r2, [r3, #0]
   12a2c:	e01a      	b.n	12a64 <gsm_getsignalstrength+0x184>
				}
				else if (nw>=26 && nw<=31)
   12a2e:	1dfb      	adds	r3, r7, #7
   12a30:	781b      	ldrb	r3, [r3, #0]
   12a32:	2b19      	cmp	r3, #25
   12a34:	d908      	bls.n	12a48 <gsm_getsignalstrength+0x168>
   12a36:	1dfb      	adds	r3, r7, #7
   12a38:	781b      	ldrb	r3, [r3, #0]
   12a3a:	2b1f      	cmp	r3, #31
   12a3c:	d804      	bhi.n	12a48 <gsm_getsignalstrength+0x168>
				{
					sig_strength = 5;
   12a3e:	2317      	movs	r3, #23
   12a40:	18fb      	adds	r3, r7, r3
   12a42:	2205      	movs	r2, #5
   12a44:	701a      	strb	r2, [r3, #0]
   12a46:	e00d      	b.n	12a64 <gsm_getsignalstrength+0x184>
				}
				else
				{
					sig_strength = 0;
   12a48:	2317      	movs	r3, #23
   12a4a:	18fb      	adds	r3, r7, r3
   12a4c:	2200      	movs	r2, #0
   12a4e:	701a      	strb	r2, [r3, #0]
   12a50:	e008      	b.n	12a64 <gsm_getsignalstrength+0x184>
				}
			}
		}
		else
		{
			sig_strength = 0;
   12a52:	2317      	movs	r3, #23
   12a54:	18fb      	adds	r3, r7, r3
   12a56:	2200      	movs	r2, #0
   12a58:	701a      	strb	r2, [r3, #0]
   12a5a:	e003      	b.n	12a64 <gsm_getsignalstrength+0x184>
		}
	}
	else
	{
		sig_strength = 0;
   12a5c:	2317      	movs	r3, #23
   12a5e:	18fb      	adds	r3, r7, r3
   12a60:	2200      	movs	r2, #0
   12a62:	701a      	strb	r2, [r3, #0]
	}
	
	free(cmdx);
   12a64:	693b      	ldr	r3, [r7, #16]
   12a66:	0018      	movs	r0, r3
   12a68:	4b05      	ldr	r3, [pc, #20]	; (12a80 <gsm_getsignalstrength+0x1a0>)
   12a6a:	4798      	blx	r3
	
	return sig_strength;
   12a6c:	2317      	movs	r3, #23
   12a6e:	18fb      	adds	r3, r7, r3
   12a70:	781b      	ldrb	r3, [r3, #0]
}
   12a72:	0018      	movs	r0, r3
   12a74:	46bd      	mov	sp, r7
   12a76:	b006      	add	sp, #24
   12a78:	bdb0      	pop	{r4, r5, r7, pc}
   12a7a:	46c0      	nop			; (mov r8, r8)
   12a7c:	000288d5 	.word	0x000288d5
   12a80:	00028975 	.word	0x00028975
   12a84:	000289e3 	.word	0x000289e3
   12a88:	00001388 	.word	0x00001388
   12a8c:	00029698 	.word	0x00029698
   12a90:	0002980c 	.word	0x0002980c
   12a94:	000123ed 	.word	0x000123ed
   12a98:	00029814 	.word	0x00029814
   12a9c:	00028ca3 	.word	0x00028ca3
   12aa0:	000297b0 	.word	0x000297b0
   12aa4:	00028cd5 	.word	0x00028cd5
   12aa8:	000297b4 	.word	0x000297b4
   12aac:	00012ab5 	.word	0x00012ab5
   12ab0:	000288c9 	.word	0x000288c9

00012ab4 <RemoveSpaces>:

void RemoveSpaces(char* source)
{
   12ab4:	b580      	push	{r7, lr}
   12ab6:	b084      	sub	sp, #16
   12ab8:	af00      	add	r7, sp, #0
   12aba:	6078      	str	r0, [r7, #4]
	char* i = source;
   12abc:	687b      	ldr	r3, [r7, #4]
   12abe:	60fb      	str	r3, [r7, #12]
	char* j = source;
   12ac0:	687b      	ldr	r3, [r7, #4]
   12ac2:	60bb      	str	r3, [r7, #8]
	while(*j != 0)
   12ac4:	e00c      	b.n	12ae0 <RemoveSpaces+0x2c>
	{
		*i = *j++;
   12ac6:	68bb      	ldr	r3, [r7, #8]
   12ac8:	1c5a      	adds	r2, r3, #1
   12aca:	60ba      	str	r2, [r7, #8]
   12acc:	781a      	ldrb	r2, [r3, #0]
   12ace:	68fb      	ldr	r3, [r7, #12]
   12ad0:	701a      	strb	r2, [r3, #0]
		if(*i != ' ')
   12ad2:	68fb      	ldr	r3, [r7, #12]
   12ad4:	781b      	ldrb	r3, [r3, #0]
   12ad6:	2b20      	cmp	r3, #32
   12ad8:	d002      	beq.n	12ae0 <RemoveSpaces+0x2c>
		i++;
   12ada:	68fb      	ldr	r3, [r7, #12]
   12adc:	3301      	adds	r3, #1
   12ade:	60fb      	str	r3, [r7, #12]
	while(*j != 0)
   12ae0:	68bb      	ldr	r3, [r7, #8]
   12ae2:	781b      	ldrb	r3, [r3, #0]
   12ae4:	2b00      	cmp	r3, #0
   12ae6:	d1ee      	bne.n	12ac6 <RemoveSpaces+0x12>
	}
	*i = 0;
   12ae8:	68fb      	ldr	r3, [r7, #12]
   12aea:	2200      	movs	r2, #0
   12aec:	701a      	strb	r2, [r3, #0]
}
   12aee:	46c0      	nop			; (mov r8, r8)
   12af0:	46bd      	mov	sp, r7
   12af2:	b004      	add	sp, #16
   12af4:	bd80      	pop	{r7, pc}
	...

00012af8 <gsm_enable_new_sms_message_indications>:
{
	return gsm_send_at_command((const char*)("AT&F\r"), (const char*)RESPONS_OK,10000,0,NULL);
}

enum gsm_error gsm_enable_new_sms_message_indications(void)
{
   12af8:	b590      	push	{r4, r7, lr}
   12afa:	b083      	sub	sp, #12
   12afc:	af02      	add	r7, sp, #8
	return gsm_send_at_command((const char*)("AT+CNMI=2,1,0,0,0\r"), (const char*)RESPONS_OK,5000,0,NULL);
   12afe:	4a06      	ldr	r2, [pc, #24]	; (12b18 <gsm_enable_new_sms_message_indications+0x20>)
   12b00:	4906      	ldr	r1, [pc, #24]	; (12b1c <gsm_enable_new_sms_message_indications+0x24>)
   12b02:	4807      	ldr	r0, [pc, #28]	; (12b20 <gsm_enable_new_sms_message_indications+0x28>)
   12b04:	2300      	movs	r3, #0
   12b06:	9300      	str	r3, [sp, #0]
   12b08:	2300      	movs	r3, #0
   12b0a:	4c06      	ldr	r4, [pc, #24]	; (12b24 <gsm_enable_new_sms_message_indications+0x2c>)
   12b0c:	47a0      	blx	r4
   12b0e:	0003      	movs	r3, r0
}
   12b10:	0018      	movs	r0, r3
   12b12:	46bd      	mov	sp, r7
   12b14:	b001      	add	sp, #4
   12b16:	bd90      	pop	{r4, r7, pc}
   12b18:	00001388 	.word	0x00001388
   12b1c:	00029698 	.word	0x00029698
   12b20:	00029818 	.word	0x00029818
   12b24:	000123ed 	.word	0x000123ed

00012b28 <gsm_enable_csqn_urc>:
{
	return gsm_send_at_command((const char*)("AT+CNMI=1,0,0,0,0\r"), (const char*)RESPONS_OK,5000,0,NULL);
}

enum gsm_error gsm_enable_csqn_urc(void)
{
   12b28:	b590      	push	{r4, r7, lr}
   12b2a:	b083      	sub	sp, #12
   12b2c:	af02      	add	r7, sp, #8
	return gsm_send_at_command((const char*)("AT+EXUNSOL=\"SQ\",1\r"), (const char*)RESPONS_OK,1000,0,NULL);
   12b2e:	23fa      	movs	r3, #250	; 0xfa
   12b30:	009a      	lsls	r2, r3, #2
   12b32:	4906      	ldr	r1, [pc, #24]	; (12b4c <gsm_enable_csqn_urc+0x24>)
   12b34:	4806      	ldr	r0, [pc, #24]	; (12b50 <gsm_enable_csqn_urc+0x28>)
   12b36:	2300      	movs	r3, #0
   12b38:	9300      	str	r3, [sp, #0]
   12b3a:	2300      	movs	r3, #0
   12b3c:	4c05      	ldr	r4, [pc, #20]	; (12b54 <gsm_enable_csqn_urc+0x2c>)
   12b3e:	47a0      	blx	r4
   12b40:	0003      	movs	r3, r0
}
   12b42:	0018      	movs	r0, r3
   12b44:	46bd      	mov	sp, r7
   12b46:	b001      	add	sp, #4
   12b48:	bd90      	pop	{r4, r7, pc}
   12b4a:	46c0      	nop			; (mov r8, r8)
   12b4c:	00029698 	.word	0x00029698
   12b50:	00029840 	.word	0x00029840
   12b54:	000123ed 	.word	0x000123ed

00012b58 <gsm_disable_csqn_urc>:

enum gsm_error gsm_disable_csqn_urc(void)
{
   12b58:	b590      	push	{r4, r7, lr}
   12b5a:	b083      	sub	sp, #12
   12b5c:	af02      	add	r7, sp, #8
	return gsm_send_at_command((const char*)("AT+EXUNSOL=\"SQ\",0\r"), (const char*)RESPONS_OK,1000,0,NULL);
   12b5e:	23fa      	movs	r3, #250	; 0xfa
   12b60:	009a      	lsls	r2, r3, #2
   12b62:	4906      	ldr	r1, [pc, #24]	; (12b7c <gsm_disable_csqn_urc+0x24>)
   12b64:	4806      	ldr	r0, [pc, #24]	; (12b80 <gsm_disable_csqn_urc+0x28>)
   12b66:	2300      	movs	r3, #0
   12b68:	9300      	str	r3, [sp, #0]
   12b6a:	2300      	movs	r3, #0
   12b6c:	4c05      	ldr	r4, [pc, #20]	; (12b84 <gsm_disable_csqn_urc+0x2c>)
   12b6e:	47a0      	blx	r4
   12b70:	0003      	movs	r3, r0
}
   12b72:	0018      	movs	r0, r3
   12b74:	46bd      	mov	sp, r7
   12b76:	b001      	add	sp, #4
   12b78:	bd90      	pop	{r4, r7, pc}
   12b7a:	46c0      	nop			; (mov r8, r8)
   12b7c:	00029698 	.word	0x00029698
   12b80:	00029854 	.word	0x00029854
   12b84:	000123ed 	.word	0x000123ed

00012b88 <gsm_send_sms>:


enum gsm_error gsm_send_sms(const char *phone_number, const char *message)
{
   12b88:	b5b0      	push	{r4, r5, r7, lr}
   12b8a:	b088      	sub	sp, #32
   12b8c:	af02      	add	r7, sp, #8
   12b8e:	6078      	str	r0, [r7, #4]
   12b90:	6039      	str	r1, [r7, #0]
	/* Double-check the message length is acceptable (160 byte max payload) */
	if (strlen(message) > 250)
   12b92:	683b      	ldr	r3, [r7, #0]
   12b94:	0018      	movs	r0, r3
   12b96:	4b3b      	ldr	r3, [pc, #236]	; (12c84 <gsm_send_sms+0xfc>)
   12b98:	4798      	blx	r3
   12b9a:	0003      	movs	r3, r0
   12b9c:	2bfa      	cmp	r3, #250	; 0xfa
   12b9e:	d901      	bls.n	12ba4 <gsm_send_sms+0x1c>
	{
		return GSM_ERROR_MESSAGE_LENGTH;
   12ba0:	2303      	movs	r3, #3
   12ba2:	e06b      	b.n	12c7c <gsm_send_sms+0xf4>
	}
	/* Double-check the recipient phone number length */
	if (strlen(phone_number) < 6)
   12ba4:	687b      	ldr	r3, [r7, #4]
   12ba6:	0018      	movs	r0, r3
   12ba8:	4b36      	ldr	r3, [pc, #216]	; (12c84 <gsm_send_sms+0xfc>)
   12baa:	4798      	blx	r3
   12bac:	0003      	movs	r3, r0
   12bae:	2b05      	cmp	r3, #5
   12bb0:	d801      	bhi.n	12bb6 <gsm_send_sms+0x2e>
	{
		return GSM_ERROR_PHONE_NUMBER_LENGTH;
   12bb2:	2304      	movs	r3, #4
   12bb4:	e062      	b.n	12c7c <gsm_send_sms+0xf4>
	}
	
	enum gsm_error err;
	const uint8_t MAX_BUFFER = 250;
   12bb6:	2317      	movs	r3, #23
   12bb8:	18fb      	adds	r3, r7, r3
   12bba:	22fa      	movs	r2, #250	; 0xfa
   12bbc:	701a      	strb	r2, [r3, #0]
	char *cmdx = (char*) calloc(MAX_BUFFER,sizeof(char));
   12bbe:	2317      	movs	r3, #23
   12bc0:	18fb      	adds	r3, r7, r3
   12bc2:	781b      	ldrb	r3, [r3, #0]
   12bc4:	2101      	movs	r1, #1
   12bc6:	0018      	movs	r0, r3
   12bc8:	4b2f      	ldr	r3, [pc, #188]	; (12c88 <gsm_send_sms+0x100>)
   12bca:	4798      	blx	r3
   12bcc:	0003      	movs	r3, r0
   12bce:	613b      	str	r3, [r7, #16]
	//buffer created???
	if (cmdx == NULL)
   12bd0:	693b      	ldr	r3, [r7, #16]
   12bd2:	2b00      	cmp	r3, #0
   12bd4:	d101      	bne.n	12bda <gsm_send_sms+0x52>
	{
		return 0;
   12bd6:	2300      	movs	r3, #0
   12bd8:	e050      	b.n	12c7c <gsm_send_sms+0xf4>
	}
	memset(cmdx, '\0', MAX_BUFFER);
   12bda:	2317      	movs	r3, #23
   12bdc:	18fb      	adds	r3, r7, r3
   12bde:	781a      	ldrb	r2, [r3, #0]
   12be0:	693b      	ldr	r3, [r7, #16]
   12be2:	2100      	movs	r1, #0
   12be4:	0018      	movs	r0, r3
   12be6:	4b29      	ldr	r3, [pc, #164]	; (12c8c <gsm_send_sms+0x104>)
   12be8:	4798      	blx	r3
	snprintf((char*)cmdx, MAX_BUFFER, "AT+CMGS=\"%s\"\r", phone_number);
   12bea:	2317      	movs	r3, #23
   12bec:	18fb      	adds	r3, r7, r3
   12bee:	7819      	ldrb	r1, [r3, #0]
   12bf0:	687b      	ldr	r3, [r7, #4]
   12bf2:	4a27      	ldr	r2, [pc, #156]	; (12c90 <gsm_send_sms+0x108>)
   12bf4:	6938      	ldr	r0, [r7, #16]
   12bf6:	4c27      	ldr	r4, [pc, #156]	; (12c94 <gsm_send_sms+0x10c>)
   12bf8:	47a0      	blx	r4
	if (gsm_send_at_command((const char*)cmdx, (const char*)">",60000, 0, NULL)==GSM_ERROR_NONE)
   12bfa:	4a27      	ldr	r2, [pc, #156]	; (12c98 <gsm_send_sms+0x110>)
   12bfc:	4927      	ldr	r1, [pc, #156]	; (12c9c <gsm_send_sms+0x114>)
   12bfe:	6938      	ldr	r0, [r7, #16]
   12c00:	2300      	movs	r3, #0
   12c02:	9300      	str	r3, [sp, #0]
   12c04:	2300      	movs	r3, #0
   12c06:	4c26      	ldr	r4, [pc, #152]	; (12ca0 <gsm_send_sms+0x118>)
   12c08:	47a0      	blx	r4
   12c0a:	1e03      	subs	r3, r0, #0
   12c0c:	d131      	bne.n	12c72 <gsm_send_sms+0xea>
	{
		vTaskDelay(500/portTICK_PERIOD_MS);		//todo: check if sms is reaching time is reduced than 30 seconds, if yes, than keep this statement, else remove it.
   12c0e:	23fa      	movs	r3, #250	; 0xfa
   12c10:	005b      	lsls	r3, r3, #1
   12c12:	0018      	movs	r0, r3
   12c14:	4b23      	ldr	r3, [pc, #140]	; (12ca4 <gsm_send_sms+0x11c>)
   12c16:	4798      	blx	r3
		memset(cmdx, '\0', MAX_BUFFER);
   12c18:	2317      	movs	r3, #23
   12c1a:	18fb      	adds	r3, r7, r3
   12c1c:	781a      	ldrb	r2, [r3, #0]
   12c1e:	693b      	ldr	r3, [r7, #16]
   12c20:	2100      	movs	r1, #0
   12c22:	0018      	movs	r0, r3
   12c24:	4b19      	ldr	r3, [pc, #100]	; (12c8c <gsm_send_sms+0x104>)
   12c26:	4798      	blx	r3
		
		snprintf((char*)cmdx, MAX_BUFFER, "%s\x1A\x0D",message);
   12c28:	2317      	movs	r3, #23
   12c2a:	18fb      	adds	r3, r7, r3
   12c2c:	7819      	ldrb	r1, [r3, #0]
   12c2e:	683b      	ldr	r3, [r7, #0]
   12c30:	4a1d      	ldr	r2, [pc, #116]	; (12ca8 <gsm_send_sms+0x120>)
   12c32:	6938      	ldr	r0, [r7, #16]
   12c34:	4c17      	ldr	r4, [pc, #92]	; (12c94 <gsm_send_sms+0x10c>)
   12c36:	47a0      	blx	r4
		
		err = gsm_send_at_command((const char*)cmdx, (const char*)RESPONS_OK,60000, 0, NULL);
   12c38:	230f      	movs	r3, #15
   12c3a:	18fc      	adds	r4, r7, r3
   12c3c:	4a16      	ldr	r2, [pc, #88]	; (12c98 <gsm_send_sms+0x110>)
   12c3e:	491b      	ldr	r1, [pc, #108]	; (12cac <gsm_send_sms+0x124>)
   12c40:	6938      	ldr	r0, [r7, #16]
   12c42:	2300      	movs	r3, #0
   12c44:	9300      	str	r3, [sp, #0]
   12c46:	2300      	movs	r3, #0
   12c48:	4d15      	ldr	r5, [pc, #84]	; (12ca0 <gsm_send_sms+0x118>)
   12c4a:	47a8      	blx	r5
   12c4c:	0003      	movs	r3, r0
   12c4e:	7023      	strb	r3, [r4, #0]
		if (err == GSM_ERROR_NONE)
   12c50:	230f      	movs	r3, #15
   12c52:	18fb      	adds	r3, r7, r3
   12c54:	781b      	ldrb	r3, [r3, #0]
   12c56:	2b00      	cmp	r3, #0
   12c58:	d105      	bne.n	12c66 <gsm_send_sms+0xde>
		{
			free(cmdx);
   12c5a:	693b      	ldr	r3, [r7, #16]
   12c5c:	0018      	movs	r0, r3
   12c5e:	4b14      	ldr	r3, [pc, #80]	; (12cb0 <gsm_send_sms+0x128>)
   12c60:	4798      	blx	r3
			return GSM_ERROR_NONE;
   12c62:	2300      	movs	r3, #0
   12c64:	e00a      	b.n	12c7c <gsm_send_sms+0xf4>
		}
		else
		{
			free(cmdx);
   12c66:	693b      	ldr	r3, [r7, #16]
   12c68:	0018      	movs	r0, r3
   12c6a:	4b11      	ldr	r3, [pc, #68]	; (12cb0 <gsm_send_sms+0x128>)
   12c6c:	4798      	blx	r3
			return GSM_ERROR_SMS_SEND_FAILED;
   12c6e:	2306      	movs	r3, #6
   12c70:	e004      	b.n	12c7c <gsm_send_sms+0xf4>
		}
	}
	else
	{
		free(cmdx);
   12c72:	693b      	ldr	r3, [r7, #16]
   12c74:	0018      	movs	r0, r3
   12c76:	4b0e      	ldr	r3, [pc, #56]	; (12cb0 <gsm_send_sms+0x128>)
   12c78:	4798      	blx	r3
		return GSM_ERROR_SMS_SEND_FAILED;
   12c7a:	2306      	movs	r3, #6
	}
}
   12c7c:	0018      	movs	r0, r3
   12c7e:	46bd      	mov	sp, r7
   12c80:	b006      	add	sp, #24
   12c82:	bdb0      	pop	{r4, r5, r7, pc}
   12c84:	00028c73 	.word	0x00028c73
   12c88:	000288d5 	.word	0x000288d5
   12c8c:	000289e3 	.word	0x000289e3
   12c90:	00029868 	.word	0x00029868
   12c94:	00028b85 	.word	0x00028b85
   12c98:	0000ea60 	.word	0x0000ea60
   12c9c:	00029878 	.word	0x00029878
   12ca0:	000123ed 	.word	0x000123ed
   12ca4:	0001fd79 	.word	0x0001fd79
   12ca8:	0002987c 	.word	0x0002987c
   12cac:	00029698 	.word	0x00029698
   12cb0:	00028975 	.word	0x00028975

00012cb4 <gsm_read_sms>:
	free(cmdx);
	return sms_index;
}

enum gsm_error gsm_read_sms(uint8_t position, char *phone_number, uint8_t max_phone_len, char *SMS_text, uint8_t max_SMS_len)
{
   12cb4:	b590      	push	{r4, r7, lr}
   12cb6:	b08f      	sub	sp, #60	; 0x3c
   12cb8:	af02      	add	r7, sp, #8
   12cba:	60b9      	str	r1, [r7, #8]
   12cbc:	0011      	movs	r1, r2
   12cbe:	607b      	str	r3, [r7, #4]
   12cc0:	230f      	movs	r3, #15
   12cc2:	18fb      	adds	r3, r7, r3
   12cc4:	1c02      	adds	r2, r0, #0
   12cc6:	701a      	strb	r2, [r3, #0]
   12cc8:	230e      	movs	r3, #14
   12cca:	18fb      	adds	r3, r7, r3
   12ccc:	1c0a      	adds	r2, r1, #0
   12cce:	701a      	strb	r2, [r3, #0]
	const uint8_t MAX_BUFFER = 230;
   12cd0:	232f      	movs	r3, #47	; 0x2f
   12cd2:	18fb      	adds	r3, r7, r3
   12cd4:	22e6      	movs	r2, #230	; 0xe6
   12cd6:	701a      	strb	r2, [r3, #0]
	char *cmdx = (char*) calloc(MAX_BUFFER,sizeof(char));
   12cd8:	232f      	movs	r3, #47	; 0x2f
   12cda:	18fb      	adds	r3, r7, r3
   12cdc:	781b      	ldrb	r3, [r3, #0]
   12cde:	2101      	movs	r1, #1
   12ce0:	0018      	movs	r0, r3
   12ce2:	4b6e      	ldr	r3, [pc, #440]	; (12e9c <gsm_read_sms+0x1e8>)
   12ce4:	4798      	blx	r3
   12ce6:	0003      	movs	r3, r0
   12ce8:	62bb      	str	r3, [r7, #40]	; 0x28
	if (cmdx == NULL)
   12cea:	6abb      	ldr	r3, [r7, #40]	; 0x28
   12cec:	2b00      	cmp	r3, #0
   12cee:	d105      	bne.n	12cfc <gsm_read_sms+0x48>
	{
		free(cmdx);
   12cf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   12cf2:	0018      	movs	r0, r3
   12cf4:	4b6a      	ldr	r3, [pc, #424]	; (12ea0 <gsm_read_sms+0x1ec>)
   12cf6:	4798      	blx	r3
		return 0;
   12cf8:	2300      	movs	r3, #0
   12cfa:	e0ca      	b.n	12e92 <gsm_read_sms+0x1de>
	}
	memset(cmdx, '\0', MAX_BUFFER);
   12cfc:	232f      	movs	r3, #47	; 0x2f
   12cfe:	18fb      	adds	r3, r7, r3
   12d00:	781a      	ldrb	r2, [r3, #0]
   12d02:	6abb      	ldr	r3, [r7, #40]	; 0x28
   12d04:	2100      	movs	r1, #0
   12d06:	0018      	movs	r0, r3
   12d08:	4b66      	ldr	r3, [pc, #408]	; (12ea4 <gsm_read_sms+0x1f0>)
   12d0a:	4798      	blx	r3
	
	uint8_t cmgr_at_command[10] = {0};
   12d0c:	2310      	movs	r3, #16
   12d0e:	18fb      	adds	r3, r7, r3
   12d10:	0018      	movs	r0, r3
   12d12:	230a      	movs	r3, #10
   12d14:	001a      	movs	r2, r3
   12d16:	2100      	movs	r1, #0
   12d18:	4b62      	ldr	r3, [pc, #392]	; (12ea4 <gsm_read_sms+0x1f0>)
   12d1a:	4798      	blx	r3
	
	snprintf((char*)cmgr_at_command, MAX_BUFFER, "AT+CMGR=%d\r",position);
   12d1c:	232f      	movs	r3, #47	; 0x2f
   12d1e:	18fb      	adds	r3, r7, r3
   12d20:	7819      	ldrb	r1, [r3, #0]
   12d22:	230f      	movs	r3, #15
   12d24:	18fb      	adds	r3, r7, r3
   12d26:	781b      	ldrb	r3, [r3, #0]
   12d28:	4a5f      	ldr	r2, [pc, #380]	; (12ea8 <gsm_read_sms+0x1f4>)
   12d2a:	2010      	movs	r0, #16
   12d2c:	1838      	adds	r0, r7, r0
   12d2e:	4c5f      	ldr	r4, [pc, #380]	; (12eac <gsm_read_sms+0x1f8>)
   12d30:	47a0      	blx	r4
	
	if (gsm_send_at_command((const char*)cmgr_at_command, (const char*)RESPONS_OK,5000, MAX_BUFFER, cmdx)==GSM_ERROR_NONE)
   12d32:	232f      	movs	r3, #47	; 0x2f
   12d34:	18fb      	adds	r3, r7, r3
   12d36:	781a      	ldrb	r2, [r3, #0]
   12d38:	4c5d      	ldr	r4, [pc, #372]	; (12eb0 <gsm_read_sms+0x1fc>)
   12d3a:	495e      	ldr	r1, [pc, #376]	; (12eb4 <gsm_read_sms+0x200>)
   12d3c:	2310      	movs	r3, #16
   12d3e:	18f8      	adds	r0, r7, r3
   12d40:	6abb      	ldr	r3, [r7, #40]	; 0x28
   12d42:	9300      	str	r3, [sp, #0]
   12d44:	0013      	movs	r3, r2
   12d46:	0022      	movs	r2, r4
   12d48:	4c5b      	ldr	r4, [pc, #364]	; (12eb8 <gsm_read_sms+0x204>)
   12d4a:	47a0      	blx	r4
   12d4c:	1e03      	subs	r3, r0, #0
   12d4e:	d000      	beq.n	12d52 <gsm_read_sms+0x9e>
   12d50:	e094      	b.n	12e7c <gsm_read_sms+0x1c8>
	{
		char *strig_cmp;
		char *p_char;
		char *p_char1;
		strig_cmp = strstr(cmdx,"+CMGR");
   12d52:	4a5a      	ldr	r2, [pc, #360]	; (12ebc <gsm_read_sms+0x208>)
   12d54:	6abb      	ldr	r3, [r7, #40]	; 0x28
   12d56:	0011      	movs	r1, r2
   12d58:	0018      	movs	r0, r3
   12d5a:	4b59      	ldr	r3, [pc, #356]	; (12ec0 <gsm_read_sms+0x20c>)
   12d5c:	4798      	blx	r3
   12d5e:	0003      	movs	r3, r0
   12d60:	627b      	str	r3, [r7, #36]	; 0x24
		if (strig_cmp != 0)
   12d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   12d64:	2b00      	cmp	r3, #0
   12d66:	d100      	bne.n	12d6a <gsm_read_sms+0xb6>
   12d68:	e082      	b.n	12e70 <gsm_read_sms+0x1bc>
		{
			p_char = strchr((char *)(cmdx),',');
   12d6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   12d6c:	212c      	movs	r1, #44	; 0x2c
   12d6e:	0018      	movs	r0, r3
   12d70:	4b54      	ldr	r3, [pc, #336]	; (12ec4 <gsm_read_sms+0x210>)
   12d72:	4798      	blx	r3
   12d74:	0003      	movs	r3, r0
   12d76:	623b      	str	r3, [r7, #32]
			p_char1 = p_char+2;
   12d78:	6a3b      	ldr	r3, [r7, #32]
   12d7a:	3302      	adds	r3, #2
   12d7c:	61fb      	str	r3, [r7, #28]
			p_char = strchr((char *)(p_char1),'"');
   12d7e:	69fb      	ldr	r3, [r7, #28]
   12d80:	2122      	movs	r1, #34	; 0x22
   12d82:	0018      	movs	r0, r3
   12d84:	4b4f      	ldr	r3, [pc, #316]	; (12ec4 <gsm_read_sms+0x210>)
   12d86:	4798      	blx	r3
   12d88:	0003      	movs	r3, r0
   12d8a:	623b      	str	r3, [r7, #32]
			uint8_t len;
			if (p_char != NULL)
   12d8c:	6a3b      	ldr	r3, [r7, #32]
   12d8e:	2b00      	cmp	r3, #0
   12d90:	d02a      	beq.n	12de8 <gsm_read_sms+0x134>
			{
				*p_char = 0;
   12d92:	6a3b      	ldr	r3, [r7, #32]
   12d94:	2200      	movs	r2, #0
   12d96:	701a      	strb	r2, [r3, #0]
				len = strlen(p_char1);
   12d98:	69fb      	ldr	r3, [r7, #28]
   12d9a:	0018      	movs	r0, r3
   12d9c:	4b4a      	ldr	r3, [pc, #296]	; (12ec8 <gsm_read_sms+0x214>)
   12d9e:	4798      	blx	r3
   12da0:	0002      	movs	r2, r0
   12da2:	231b      	movs	r3, #27
   12da4:	18fb      	adds	r3, r7, r3
   12da6:	701a      	strb	r2, [r3, #0]
				if(len < max_phone_len)
   12da8:	231b      	movs	r3, #27
   12daa:	18fa      	adds	r2, r7, r3
   12dac:	230e      	movs	r3, #14
   12dae:	18fb      	adds	r3, r7, r3
   12db0:	7812      	ldrb	r2, [r2, #0]
   12db2:	781b      	ldrb	r3, [r3, #0]
   12db4:	429a      	cmp	r2, r3
   12db6:	d206      	bcs.n	12dc6 <gsm_read_sms+0x112>
				{
					strcpy(phone_number, (char *)(p_char1));
   12db8:	69fa      	ldr	r2, [r7, #28]
   12dba:	68bb      	ldr	r3, [r7, #8]
   12dbc:	0011      	movs	r1, r2
   12dbe:	0018      	movs	r0, r3
   12dc0:	4b42      	ldr	r3, [pc, #264]	; (12ecc <gsm_read_sms+0x218>)
   12dc2:	4798      	blx	r3
   12dc4:	e010      	b.n	12de8 <gsm_read_sms+0x134>
				}
				else
				{
					memcpy(phone_number,(char *)p_char1,(max_phone_len-1));
   12dc6:	230e      	movs	r3, #14
   12dc8:	18fb      	adds	r3, r7, r3
   12dca:	781b      	ldrb	r3, [r3, #0]
   12dcc:	3b01      	subs	r3, #1
   12dce:	001a      	movs	r2, r3
   12dd0:	69f9      	ldr	r1, [r7, #28]
   12dd2:	68bb      	ldr	r3, [r7, #8]
   12dd4:	0018      	movs	r0, r3
   12dd6:	4b3e      	ldr	r3, [pc, #248]	; (12ed0 <gsm_read_sms+0x21c>)
   12dd8:	4798      	blx	r3
					phone_number[max_phone_len]=0;
   12dda:	230e      	movs	r3, #14
   12ddc:	18fb      	adds	r3, r7, r3
   12dde:	781b      	ldrb	r3, [r3, #0]
   12de0:	68ba      	ldr	r2, [r7, #8]
   12de2:	18d3      	adds	r3, r2, r3
   12de4:	2200      	movs	r2, #0
   12de6:	701a      	strb	r2, [r3, #0]
				}
			}
			p_char = strchr(p_char+1, 0x0a);
   12de8:	6a3b      	ldr	r3, [r7, #32]
   12dea:	3301      	adds	r3, #1
   12dec:	210a      	movs	r1, #10
   12dee:	0018      	movs	r0, r3
   12df0:	4b34      	ldr	r3, [pc, #208]	; (12ec4 <gsm_read_sms+0x210>)
   12df2:	4798      	blx	r3
   12df4:	0003      	movs	r3, r0
   12df6:	623b      	str	r3, [r7, #32]
			if (p_char != NULL)
   12df8:	6a3b      	ldr	r3, [r7, #32]
   12dfa:	2b00      	cmp	r3, #0
   12dfc:	d044      	beq.n	12e88 <gsm_read_sms+0x1d4>
			{
				p_char++;
   12dfe:	6a3b      	ldr	r3, [r7, #32]
   12e00:	3301      	adds	r3, #1
   12e02:	623b      	str	r3, [r7, #32]
				p_char1 = strchr((char *)(p_char), 0x0d);
   12e04:	6a3b      	ldr	r3, [r7, #32]
   12e06:	210d      	movs	r1, #13
   12e08:	0018      	movs	r0, r3
   12e0a:	4b2e      	ldr	r3, [pc, #184]	; (12ec4 <gsm_read_sms+0x210>)
   12e0c:	4798      	blx	r3
   12e0e:	0003      	movs	r3, r0
   12e10:	61fb      	str	r3, [r7, #28]
				if (p_char1 != NULL)
   12e12:	69fb      	ldr	r3, [r7, #28]
   12e14:	2b00      	cmp	r3, #0
   12e16:	d002      	beq.n	12e1e <gsm_read_sms+0x16a>
				{
					*p_char1 = 0;
   12e18:	69fb      	ldr	r3, [r7, #28]
   12e1a:	2200      	movs	r2, #0
   12e1c:	701a      	strb	r2, [r3, #0]
				}
				len = strlen(p_char);
   12e1e:	6a3b      	ldr	r3, [r7, #32]
   12e20:	0018      	movs	r0, r3
   12e22:	4b29      	ldr	r3, [pc, #164]	; (12ec8 <gsm_read_sms+0x214>)
   12e24:	4798      	blx	r3
   12e26:	0002      	movs	r2, r0
   12e28:	231b      	movs	r3, #27
   12e2a:	18fb      	adds	r3, r7, r3
   12e2c:	701a      	strb	r2, [r3, #0]
				if (len < max_SMS_len)
   12e2e:	231b      	movs	r3, #27
   12e30:	18fb      	adds	r3, r7, r3
   12e32:	2240      	movs	r2, #64	; 0x40
   12e34:	18b9      	adds	r1, r7, r2
   12e36:	781a      	ldrb	r2, [r3, #0]
   12e38:	780b      	ldrb	r3, [r1, #0]
   12e3a:	429a      	cmp	r2, r3
   12e3c:	d206      	bcs.n	12e4c <gsm_read_sms+0x198>
				{
					strcpy(SMS_text, (char *)(p_char));
   12e3e:	6a3a      	ldr	r2, [r7, #32]
   12e40:	687b      	ldr	r3, [r7, #4]
   12e42:	0011      	movs	r1, r2
   12e44:	0018      	movs	r0, r3
   12e46:	4b21      	ldr	r3, [pc, #132]	; (12ecc <gsm_read_sms+0x218>)
   12e48:	4798      	blx	r3
   12e4a:	e01d      	b.n	12e88 <gsm_read_sms+0x1d4>
				}
				else
				{
					memcpy(SMS_text, (char *)(p_char), (max_SMS_len-1));
   12e4c:	2340      	movs	r3, #64	; 0x40
   12e4e:	18fb      	adds	r3, r7, r3
   12e50:	781b      	ldrb	r3, [r3, #0]
   12e52:	3b01      	subs	r3, #1
   12e54:	001a      	movs	r2, r3
   12e56:	6a39      	ldr	r1, [r7, #32]
   12e58:	687b      	ldr	r3, [r7, #4]
   12e5a:	0018      	movs	r0, r3
   12e5c:	4b1c      	ldr	r3, [pc, #112]	; (12ed0 <gsm_read_sms+0x21c>)
   12e5e:	4798      	blx	r3
					SMS_text[max_SMS_len] = 0;
   12e60:	2340      	movs	r3, #64	; 0x40
   12e62:	18fb      	adds	r3, r7, r3
   12e64:	781b      	ldrb	r3, [r3, #0]
   12e66:	687a      	ldr	r2, [r7, #4]
   12e68:	18d3      	adds	r3, r2, r3
   12e6a:	2200      	movs	r2, #0
   12e6c:	701a      	strb	r2, [r3, #0]
   12e6e:	e00b      	b.n	12e88 <gsm_read_sms+0x1d4>
				}
			}
		}
		else
		{
			free(cmdx);
   12e70:	6abb      	ldr	r3, [r7, #40]	; 0x28
   12e72:	0018      	movs	r0, r3
   12e74:	4b0a      	ldr	r3, [pc, #40]	; (12ea0 <gsm_read_sms+0x1ec>)
   12e76:	4798      	blx	r3
			return GSM_ERROR_SMS_NOT_AVAILABLE;
   12e78:	230c      	movs	r3, #12
   12e7a:	e00a      	b.n	12e92 <gsm_read_sms+0x1de>
		}
	}
	else
	{
		free(cmdx);
   12e7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   12e7e:	0018      	movs	r0, r3
   12e80:	4b07      	ldr	r3, [pc, #28]	; (12ea0 <gsm_read_sms+0x1ec>)
   12e82:	4798      	blx	r3
		return GSM_ERROR_SMS_NOT_AVAILABLE;
   12e84:	230c      	movs	r3, #12
   12e86:	e004      	b.n	12e92 <gsm_read_sms+0x1de>
	}
	free(cmdx);
   12e88:	6abb      	ldr	r3, [r7, #40]	; 0x28
   12e8a:	0018      	movs	r0, r3
   12e8c:	4b04      	ldr	r3, [pc, #16]	; (12ea0 <gsm_read_sms+0x1ec>)
   12e8e:	4798      	blx	r3
	return GSM_ERROR_NONE;
   12e90:	2300      	movs	r3, #0
}
   12e92:	0018      	movs	r0, r3
   12e94:	46bd      	mov	sp, r7
   12e96:	b00d      	add	sp, #52	; 0x34
   12e98:	bd90      	pop	{r4, r7, pc}
   12e9a:	46c0      	nop			; (mov r8, r8)
   12e9c:	000288d5 	.word	0x000288d5
   12ea0:	00028975 	.word	0x00028975
   12ea4:	000289e3 	.word	0x000289e3
   12ea8:	000298c8 	.word	0x000298c8
   12eac:	00028b85 	.word	0x00028b85
   12eb0:	00001388 	.word	0x00001388
   12eb4:	00029698 	.word	0x00029698
   12eb8:	000123ed 	.word	0x000123ed
   12ebc:	000298d4 	.word	0x000298d4
   12ec0:	00028ca3 	.word	0x00028ca3
   12ec4:	00028c47 	.word	0x00028c47
   12ec8:	00028c73 	.word	0x00028c73
   12ecc:	00028c63 	.word	0x00028c63
   12ed0:	000289ad 	.word	0x000289ad

00012ed4 <gsm_call_to_dial_a_number>:


enum gsm_error gsm_call_to_dial_a_number(const char *to)
{
   12ed4:	b5b0      	push	{r4, r5, r7, lr}
   12ed6:	b088      	sub	sp, #32
   12ed8:	af02      	add	r7, sp, #8
   12eda:	6078      	str	r0, [r7, #4]
	const uint8_t MAX_BUFFER = 30;
   12edc:	2317      	movs	r3, #23
   12ede:	18fb      	adds	r3, r7, r3
   12ee0:	221e      	movs	r2, #30
   12ee2:	701a      	strb	r2, [r3, #0]
	enum gsm_error err;
	char *cmdx = (char*) calloc(MAX_BUFFER,sizeof(char));
   12ee4:	2317      	movs	r3, #23
   12ee6:	18fb      	adds	r3, r7, r3
   12ee8:	781b      	ldrb	r3, [r3, #0]
   12eea:	2101      	movs	r1, #1
   12eec:	0018      	movs	r0, r3
   12eee:	4b18      	ldr	r3, [pc, #96]	; (12f50 <gsm_call_to_dial_a_number+0x7c>)
   12ef0:	4798      	blx	r3
   12ef2:	0003      	movs	r3, r0
   12ef4:	613b      	str	r3, [r7, #16]
	
	//buffer created?
	if (cmdx == NULL)
   12ef6:	693b      	ldr	r3, [r7, #16]
   12ef8:	2b00      	cmp	r3, #0
   12efa:	d101      	bne.n	12f00 <gsm_call_to_dial_a_number+0x2c>
	{
		return 0;
   12efc:	2300      	movs	r3, #0
   12efe:	e023      	b.n	12f48 <gsm_call_to_dial_a_number+0x74>
	}
	
	//init string
	memset(cmdx, '\0', MAX_BUFFER);
   12f00:	2317      	movs	r3, #23
   12f02:	18fb      	adds	r3, r7, r3
   12f04:	781a      	ldrb	r2, [r3, #0]
   12f06:	693b      	ldr	r3, [r7, #16]
   12f08:	2100      	movs	r1, #0
   12f0a:	0018      	movs	r0, r3
   12f0c:	4b11      	ldr	r3, [pc, #68]	; (12f54 <gsm_call_to_dial_a_number+0x80>)
   12f0e:	4798      	blx	r3
	snprintf((char*)cmdx, MAX_BUFFER, "ATD%s;\r", to);
   12f10:	2317      	movs	r3, #23
   12f12:	18fb      	adds	r3, r7, r3
   12f14:	7819      	ldrb	r1, [r3, #0]
   12f16:	687b      	ldr	r3, [r7, #4]
   12f18:	4a0f      	ldr	r2, [pc, #60]	; (12f58 <gsm_call_to_dial_a_number+0x84>)
   12f1a:	6938      	ldr	r0, [r7, #16]
   12f1c:	4c0f      	ldr	r4, [pc, #60]	; (12f5c <gsm_call_to_dial_a_number+0x88>)
   12f1e:	47a0      	blx	r4
	
	err = gsm_send_at_command((const char*)cmdx, (const char*)RESPONS_OK,2000,0, NULL);
   12f20:	230f      	movs	r3, #15
   12f22:	18fc      	adds	r4, r7, r3
   12f24:	23fa      	movs	r3, #250	; 0xfa
   12f26:	00da      	lsls	r2, r3, #3
   12f28:	490d      	ldr	r1, [pc, #52]	; (12f60 <gsm_call_to_dial_a_number+0x8c>)
   12f2a:	6938      	ldr	r0, [r7, #16]
   12f2c:	2300      	movs	r3, #0
   12f2e:	9300      	str	r3, [sp, #0]
   12f30:	2300      	movs	r3, #0
   12f32:	4d0c      	ldr	r5, [pc, #48]	; (12f64 <gsm_call_to_dial_a_number+0x90>)
   12f34:	47a8      	blx	r5
   12f36:	0003      	movs	r3, r0
   12f38:	7023      	strb	r3, [r4, #0]
	free(cmdx);
   12f3a:	693b      	ldr	r3, [r7, #16]
   12f3c:	0018      	movs	r0, r3
   12f3e:	4b0a      	ldr	r3, [pc, #40]	; (12f68 <gsm_call_to_dial_a_number+0x94>)
   12f40:	4798      	blx	r3
	return err;
   12f42:	230f      	movs	r3, #15
   12f44:	18fb      	adds	r3, r7, r3
   12f46:	781b      	ldrb	r3, [r3, #0]
	
}
   12f48:	0018      	movs	r0, r3
   12f4a:	46bd      	mov	sp, r7
   12f4c:	b006      	add	sp, #24
   12f4e:	bdb0      	pop	{r4, r5, r7, pc}
   12f50:	000288d5 	.word	0x000288d5
   12f54:	000289e3 	.word	0x000289e3
   12f58:	000298dc 	.word	0x000298dc
   12f5c:	00028b85 	.word	0x00028b85
   12f60:	00029698 	.word	0x00029698
   12f64:	000123ed 	.word	0x000123ed
   12f68:	00028975 	.word	0x00028975

00012f6c <gsm_answer_an_incomming_call>:

enum gsm_error gsm_answer_an_incomming_call(void)
{
   12f6c:	b590      	push	{r4, r7, lr}
   12f6e:	b083      	sub	sp, #12
   12f70:	af02      	add	r7, sp, #8
	return gsm_send_at_command((const char*)("ATA\r"), (const char*)RESPONS_OK,5000,0, NULL);
   12f72:	4a06      	ldr	r2, [pc, #24]	; (12f8c <gsm_answer_an_incomming_call+0x20>)
   12f74:	4906      	ldr	r1, [pc, #24]	; (12f90 <gsm_answer_an_incomming_call+0x24>)
   12f76:	4807      	ldr	r0, [pc, #28]	; (12f94 <gsm_answer_an_incomming_call+0x28>)
   12f78:	2300      	movs	r3, #0
   12f7a:	9300      	str	r3, [sp, #0]
   12f7c:	2300      	movs	r3, #0
   12f7e:	4c06      	ldr	r4, [pc, #24]	; (12f98 <gsm_answer_an_incomming_call+0x2c>)
   12f80:	47a0      	blx	r4
   12f82:	0003      	movs	r3, r0
}
   12f84:	0018      	movs	r0, r3
   12f86:	46bd      	mov	sp, r7
   12f88:	b001      	add	sp, #4
   12f8a:	bd90      	pop	{r4, r7, pc}
   12f8c:	00001388 	.word	0x00001388
   12f90:	00029698 	.word	0x00029698
   12f94:	000298e4 	.word	0x000298e4
   12f98:	000123ed 	.word	0x000123ed

00012f9c <gsm_enable_network_time_update>:


enum gsm_error gsm_enable_network_time_update(void)
{
   12f9c:	b590      	push	{r4, r7, lr}
   12f9e:	b083      	sub	sp, #12
   12fa0:	af02      	add	r7, sp, #8
	return 	gsm_send_at_command((const char*)("AT+CLTS=1\r"), (const char*)RESPONS_OK,10000,0, NULL);
   12fa2:	4a06      	ldr	r2, [pc, #24]	; (12fbc <gsm_enable_network_time_update+0x20>)
   12fa4:	4906      	ldr	r1, [pc, #24]	; (12fc0 <gsm_enable_network_time_update+0x24>)
   12fa6:	4807      	ldr	r0, [pc, #28]	; (12fc4 <gsm_enable_network_time_update+0x28>)
   12fa8:	2300      	movs	r3, #0
   12faa:	9300      	str	r3, [sp, #0]
   12fac:	2300      	movs	r3, #0
   12fae:	4c06      	ldr	r4, [pc, #24]	; (12fc8 <gsm_enable_network_time_update+0x2c>)
   12fb0:	47a0      	blx	r4
   12fb2:	0003      	movs	r3, r0
}
   12fb4:	0018      	movs	r0, r3
   12fb6:	46bd      	mov	sp, r7
   12fb8:	b001      	add	sp, #4
   12fba:	bd90      	pop	{r4, r7, pc}
   12fbc:	00002710 	.word	0x00002710
   12fc0:	00029698 	.word	0x00029698
   12fc4:	000298ec 	.word	0x000298ec
   12fc8:	000123ed 	.word	0x000123ed

00012fcc <gsm_enable_DTMF_detection>:
{
	return 	gsm_send_at_command((const char*)("AT+CLTS=0\r"), (const char*)RESPONS_OK,10000,0, NULL);
}

enum gsm_error gsm_enable_DTMF_detection(void)
{
   12fcc:	b590      	push	{r4, r7, lr}
   12fce:	b083      	sub	sp, #12
   12fd0:	af02      	add	r7, sp, #8
	return 	gsm_send_at_command((const char*)("AT+DDET=1\r"), (const char*)RESPONS_OK,5000,0, NULL);
   12fd2:	4a06      	ldr	r2, [pc, #24]	; (12fec <gsm_enable_DTMF_detection+0x20>)
   12fd4:	4906      	ldr	r1, [pc, #24]	; (12ff0 <gsm_enable_DTMF_detection+0x24>)
   12fd6:	4807      	ldr	r0, [pc, #28]	; (12ff4 <gsm_enable_DTMF_detection+0x28>)
   12fd8:	2300      	movs	r3, #0
   12fda:	9300      	str	r3, [sp, #0]
   12fdc:	2300      	movs	r3, #0
   12fde:	4c06      	ldr	r4, [pc, #24]	; (12ff8 <gsm_enable_DTMF_detection+0x2c>)
   12fe0:	47a0      	blx	r4
   12fe2:	0003      	movs	r3, r0
}
   12fe4:	0018      	movs	r0, r3
   12fe6:	46bd      	mov	sp, r7
   12fe8:	b001      	add	sp, #4
   12fea:	bd90      	pop	{r4, r7, pc}
   12fec:	00001388 	.word	0x00001388
   12ff0:	00029698 	.word	0x00029698
   12ff4:	00029904 	.word	0x00029904
   12ff8:	000123ed 	.word	0x000123ed

00012ffc <gsm_send_DTMF_Tone>:

enum gsm_error gsm_send_DTMF_Tone(char *tone)
{
   12ffc:	b5b0      	push	{r4, r5, r7, lr}
   12ffe:	b088      	sub	sp, #32
   13000:	af02      	add	r7, sp, #8
   13002:	6078      	str	r0, [r7, #4]
	const uint8_t MAX_BUFFER = 30;
   13004:	2317      	movs	r3, #23
   13006:	18fb      	adds	r3, r7, r3
   13008:	221e      	movs	r2, #30
   1300a:	701a      	strb	r2, [r3, #0]
	enum gsm_error err;
	char *cmdx = (char*) calloc(MAX_BUFFER,sizeof(char));
   1300c:	2317      	movs	r3, #23
   1300e:	18fb      	adds	r3, r7, r3
   13010:	781b      	ldrb	r3, [r3, #0]
   13012:	2101      	movs	r1, #1
   13014:	0018      	movs	r0, r3
   13016:	4b18      	ldr	r3, [pc, #96]	; (13078 <gsm_send_DTMF_Tone+0x7c>)
   13018:	4798      	blx	r3
   1301a:	0003      	movs	r3, r0
   1301c:	613b      	str	r3, [r7, #16]
	
	//buffer created?
	if (cmdx == NULL)
   1301e:	693b      	ldr	r3, [r7, #16]
   13020:	2b00      	cmp	r3, #0
   13022:	d101      	bne.n	13028 <gsm_send_DTMF_Tone+0x2c>
	{
		return 0;
   13024:	2300      	movs	r3, #0
   13026:	e022      	b.n	1306e <gsm_send_DTMF_Tone+0x72>
	}
	
	//init string
	memset(cmdx, '\0', MAX_BUFFER);
   13028:	2317      	movs	r3, #23
   1302a:	18fb      	adds	r3, r7, r3
   1302c:	781a      	ldrb	r2, [r3, #0]
   1302e:	693b      	ldr	r3, [r7, #16]
   13030:	2100      	movs	r1, #0
   13032:	0018      	movs	r0, r3
   13034:	4b11      	ldr	r3, [pc, #68]	; (1307c <gsm_send_DTMF_Tone+0x80>)
   13036:	4798      	blx	r3
	snprintf((char*)cmdx, MAX_BUFFER,"AT+VTS=\"%s\"\r",tone);
   13038:	2317      	movs	r3, #23
   1303a:	18fb      	adds	r3, r7, r3
   1303c:	7819      	ldrb	r1, [r3, #0]
   1303e:	687b      	ldr	r3, [r7, #4]
   13040:	4a0f      	ldr	r2, [pc, #60]	; (13080 <gsm_send_DTMF_Tone+0x84>)
   13042:	6938      	ldr	r0, [r7, #16]
   13044:	4c0f      	ldr	r4, [pc, #60]	; (13084 <gsm_send_DTMF_Tone+0x88>)
   13046:	47a0      	blx	r4
	
	err = gsm_send_at_command((const char*)(cmdx), (const char*)RESPONS_OK,5000,0, NULL);
   13048:	230f      	movs	r3, #15
   1304a:	18fc      	adds	r4, r7, r3
   1304c:	4a0e      	ldr	r2, [pc, #56]	; (13088 <gsm_send_DTMF_Tone+0x8c>)
   1304e:	490f      	ldr	r1, [pc, #60]	; (1308c <gsm_send_DTMF_Tone+0x90>)
   13050:	6938      	ldr	r0, [r7, #16]
   13052:	2300      	movs	r3, #0
   13054:	9300      	str	r3, [sp, #0]
   13056:	2300      	movs	r3, #0
   13058:	4d0d      	ldr	r5, [pc, #52]	; (13090 <gsm_send_DTMF_Tone+0x94>)
   1305a:	47a8      	blx	r5
   1305c:	0003      	movs	r3, r0
   1305e:	7023      	strb	r3, [r4, #0]
	free(cmdx);
   13060:	693b      	ldr	r3, [r7, #16]
   13062:	0018      	movs	r0, r3
   13064:	4b0b      	ldr	r3, [pc, #44]	; (13094 <gsm_send_DTMF_Tone+0x98>)
   13066:	4798      	blx	r3
	return err;
   13068:	230f      	movs	r3, #15
   1306a:	18fb      	adds	r3, r7, r3
   1306c:	781b      	ldrb	r3, [r3, #0]
}
   1306e:	0018      	movs	r0, r3
   13070:	46bd      	mov	sp, r7
   13072:	b006      	add	sp, #24
   13074:	bdb0      	pop	{r4, r5, r7, pc}
   13076:	46c0      	nop			; (mov r8, r8)
   13078:	000288d5 	.word	0x000288d5
   1307c:	000289e3 	.word	0x000289e3
   13080:	00029910 	.word	0x00029910
   13084:	00028b85 	.word	0x00028b85
   13088:	00001388 	.word	0x00001388
   1308c:	00029698 	.word	0x00029698
   13090:	000123ed 	.word	0x000123ed
   13094:	00028975 	.word	0x00028975

00013098 <gsm_hangup_call>:

enum gsm_error gsm_hangup_call(void)
{
   13098:	b590      	push	{r4, r7, lr}
   1309a:	b083      	sub	sp, #12
   1309c:	af02      	add	r7, sp, #8
	return 	gsm_send_at_command((const char*)("AT+CHUP\r"), (const char*)RESPONS_OK,5000,0, NULL);
   1309e:	4a06      	ldr	r2, [pc, #24]	; (130b8 <gsm_hangup_call+0x20>)
   130a0:	4906      	ldr	r1, [pc, #24]	; (130bc <gsm_hangup_call+0x24>)
   130a2:	4807      	ldr	r0, [pc, #28]	; (130c0 <gsm_hangup_call+0x28>)
   130a4:	2300      	movs	r3, #0
   130a6:	9300      	str	r3, [sp, #0]
   130a8:	2300      	movs	r3, #0
   130aa:	4c06      	ldr	r4, [pc, #24]	; (130c4 <gsm_hangup_call+0x2c>)
   130ac:	47a0      	blx	r4
   130ae:	0003      	movs	r3, r0
}
   130b0:	0018      	movs	r0, r3
   130b2:	46bd      	mov	sp, r7
   130b4:	b001      	add	sp, #4
   130b6:	bd90      	pop	{r4, r7, pc}
   130b8:	00001388 	.word	0x00001388
   130bc:	00029698 	.word	0x00029698
   130c0:	00029920 	.word	0x00029920
   130c4:	000123ed 	.word	0x000123ed

000130c8 <gsm_disable_call_waiting>:

enum gsm_error gsm_disable_call_waiting(void)
{
   130c8:	b590      	push	{r4, r7, lr}
   130ca:	b083      	sub	sp, #12
   130cc:	af02      	add	r7, sp, #8
	return gsm_send_at_command((const char*)("AT+CCWA=0,0\r"), (const char*)RESPONS_OK,18000,0, NULL);
   130ce:	4a06      	ldr	r2, [pc, #24]	; (130e8 <gsm_disable_call_waiting+0x20>)
   130d0:	4906      	ldr	r1, [pc, #24]	; (130ec <gsm_disable_call_waiting+0x24>)
   130d2:	4807      	ldr	r0, [pc, #28]	; (130f0 <gsm_disable_call_waiting+0x28>)
   130d4:	2300      	movs	r3, #0
   130d6:	9300      	str	r3, [sp, #0]
   130d8:	2300      	movs	r3, #0
   130da:	4c06      	ldr	r4, [pc, #24]	; (130f4 <gsm_disable_call_waiting+0x2c>)
   130dc:	47a0      	blx	r4
   130de:	0003      	movs	r3, r0
}
   130e0:	0018      	movs	r0, r3
   130e2:	46bd      	mov	sp, r7
   130e4:	b001      	add	sp, #4
   130e6:	bd90      	pop	{r4, r7, pc}
   130e8:	00004650 	.word	0x00004650
   130ec:	00029698 	.word	0x00029698
   130f0:	0002992c 	.word	0x0002992c
   130f4:	000123ed 	.word	0x000123ed

000130f8 <gsm_stop_play_record_file>:
	return gsm_send_at_command((const char*)("AT+GSMBUSY=0\r"), (const char*)RESPONS_OK,5000,0, NULL);
}


enum gsm_error gsm_stop_play_record_file(void)
{
   130f8:	b590      	push	{r4, r7, lr}
   130fa:	b083      	sub	sp, #12
   130fc:	af02      	add	r7, sp, #8
	return gsm_send_at_command((const char*)("AT+CREC=5\r"), (const char*)RESPONS_OK,500,0, NULL);
   130fe:	23fa      	movs	r3, #250	; 0xfa
   13100:	005a      	lsls	r2, r3, #1
   13102:	4906      	ldr	r1, [pc, #24]	; (1311c <gsm_stop_play_record_file+0x24>)
   13104:	4806      	ldr	r0, [pc, #24]	; (13120 <gsm_stop_play_record_file+0x28>)
   13106:	2300      	movs	r3, #0
   13108:	9300      	str	r3, [sp, #0]
   1310a:	2300      	movs	r3, #0
   1310c:	4c05      	ldr	r4, [pc, #20]	; (13124 <gsm_stop_play_record_file+0x2c>)
   1310e:	47a0      	blx	r4
   13110:	0003      	movs	r3, r0
}
   13112:	0018      	movs	r0, r3
   13114:	46bd      	mov	sp, r7
   13116:	b001      	add	sp, #4
   13118:	bd90      	pop	{r4, r7, pc}
   1311a:	46c0      	nop			; (mov r8, r8)
   1311c:	00029698 	.word	0x00029698
   13120:	0002995c 	.word	0x0002995c
   13124:	000123ed 	.word	0x000123ed

00013128 <gsm_play_record_file>:

enum gsm_error gsm_play_record_file(const char *filename,bool playInfinitely)
{
   13128:	b590      	push	{r4, r7, lr}
   1312a:	b087      	sub	sp, #28
   1312c:	af02      	add	r7, sp, #8
   1312e:	6078      	str	r0, [r7, #4]
   13130:	000a      	movs	r2, r1
   13132:	1cfb      	adds	r3, r7, #3
   13134:	701a      	strb	r2, [r3, #0]
	//AT+CREC=4,"C:\User\555.amr",0,100$0D
	
	uint8_t repeat = 0;
   13136:	230f      	movs	r3, #15
   13138:	18fb      	adds	r3, r7, r3
   1313a:	2200      	movs	r2, #0
   1313c:	701a      	strb	r2, [r3, #0]
	if (playInfinitely)
   1313e:	1cfb      	adds	r3, r7, #3
   13140:	781b      	ldrb	r3, [r3, #0]
   13142:	2b00      	cmp	r3, #0
   13144:	d003      	beq.n	1314e <gsm_play_record_file+0x26>
	{
		repeat = 1;
   13146:	230f      	movs	r3, #15
   13148:	18fb      	adds	r3, r7, r3
   1314a:	2201      	movs	r2, #1
   1314c:	701a      	strb	r2, [r3, #0]
	}
	
	const uint8_t MAX_BUFFER = 50;
   1314e:	230e      	movs	r3, #14
   13150:	18fb      	adds	r3, r7, r3
   13152:	2232      	movs	r2, #50	; 0x32
   13154:	701a      	strb	r2, [r3, #0]
	char *cmdx = (char*) calloc(MAX_BUFFER,sizeof(char));
   13156:	230e      	movs	r3, #14
   13158:	18fb      	adds	r3, r7, r3
   1315a:	781b      	ldrb	r3, [r3, #0]
   1315c:	2101      	movs	r1, #1
   1315e:	0018      	movs	r0, r3
   13160:	4b17      	ldr	r3, [pc, #92]	; (131c0 <gsm_play_record_file+0x98>)
   13162:	4798      	blx	r3
   13164:	0003      	movs	r3, r0
   13166:	60bb      	str	r3, [r7, #8]
	//buffer created???
	if (cmdx == NULL)
   13168:	68bb      	ldr	r3, [r7, #8]
   1316a:	2b00      	cmp	r3, #0
   1316c:	d101      	bne.n	13172 <gsm_play_record_file+0x4a>
	{
		return 0;
   1316e:	2300      	movs	r3, #0
   13170:	e022      	b.n	131b8 <gsm_play_record_file+0x90>
	}
	memset(cmdx, '\0', MAX_BUFFER);
   13172:	230e      	movs	r3, #14
   13174:	18fb      	adds	r3, r7, r3
   13176:	781a      	ldrb	r2, [r3, #0]
   13178:	68bb      	ldr	r3, [r7, #8]
   1317a:	2100      	movs	r1, #0
   1317c:	0018      	movs	r0, r3
   1317e:	4b11      	ldr	r3, [pc, #68]	; (131c4 <gsm_play_record_file+0x9c>)
   13180:	4798      	blx	r3
	
	snprintf((char*)cmdx, MAX_BUFFER, "AT+CREC=4,\"C:\\User\\%c.amr\",0,90,%u\r",filename,repeat);
   13182:	230e      	movs	r3, #14
   13184:	18fb      	adds	r3, r7, r3
   13186:	7819      	ldrb	r1, [r3, #0]
   13188:	230f      	movs	r3, #15
   1318a:	18fb      	adds	r3, r7, r3
   1318c:	781b      	ldrb	r3, [r3, #0]
   1318e:	687c      	ldr	r4, [r7, #4]
   13190:	4a0d      	ldr	r2, [pc, #52]	; (131c8 <gsm_play_record_file+0xa0>)
   13192:	68b8      	ldr	r0, [r7, #8]
   13194:	9300      	str	r3, [sp, #0]
   13196:	0023      	movs	r3, r4
   13198:	4c0c      	ldr	r4, [pc, #48]	; (131cc <gsm_play_record_file+0xa4>)
   1319a:	47a0      	blx	r4
	
	gsm_send_at_command((const char*)(cmdx), (const char*)RESPONS_OK,2000,0, NULL);
   1319c:	23fa      	movs	r3, #250	; 0xfa
   1319e:	00da      	lsls	r2, r3, #3
   131a0:	490b      	ldr	r1, [pc, #44]	; (131d0 <gsm_play_record_file+0xa8>)
   131a2:	68b8      	ldr	r0, [r7, #8]
   131a4:	2300      	movs	r3, #0
   131a6:	9300      	str	r3, [sp, #0]
   131a8:	2300      	movs	r3, #0
   131aa:	4c0a      	ldr	r4, [pc, #40]	; (131d4 <gsm_play_record_file+0xac>)
   131ac:	47a0      	blx	r4
	free(cmdx);
   131ae:	68bb      	ldr	r3, [r7, #8]
   131b0:	0018      	movs	r0, r3
   131b2:	4b09      	ldr	r3, [pc, #36]	; (131d8 <gsm_play_record_file+0xb0>)
   131b4:	4798      	blx	r3
	return GSM_ERROR_NONE;
   131b6:	2300      	movs	r3, #0
	
}
   131b8:	0018      	movs	r0, r3
   131ba:	46bd      	mov	sp, r7
   131bc:	b005      	add	sp, #20
   131be:	bd90      	pop	{r4, r7, pc}
   131c0:	000288d5 	.word	0x000288d5
   131c4:	000289e3 	.word	0x000289e3
   131c8:	00029968 	.word	0x00029968
   131cc:	00028b85 	.word	0x00028b85
   131d0:	00029698 	.word	0x00029698
   131d4:	000123ed 	.word	0x000123ed
   131d8:	00028975 	.word	0x00028975

000131dc <gsm_get_internal_rtc_time>:

enum gsm_error gsm_get_internal_rtc_time(void)
{
   131dc:	b5b0      	push	{r4, r5, r7, lr}
   131de:	b086      	sub	sp, #24
   131e0:	af02      	add	r7, sp, #8
	const uint8_t MAX_BUFFER = 70;
   131e2:	230f      	movs	r3, #15
   131e4:	18fb      	adds	r3, r7, r3
   131e6:	2246      	movs	r2, #70	; 0x46
   131e8:	701a      	strb	r2, [r3, #0]
	char *cmdx = (char*) calloc(MAX_BUFFER,sizeof(char));
   131ea:	230f      	movs	r3, #15
   131ec:	18fb      	adds	r3, r7, r3
   131ee:	781b      	ldrb	r3, [r3, #0]
   131f0:	2101      	movs	r1, #1
   131f2:	0018      	movs	r0, r3
   131f4:	4b57      	ldr	r3, [pc, #348]	; (13354 <gsm_get_internal_rtc_time+0x178>)
   131f6:	4798      	blx	r3
   131f8:	0003      	movs	r3, r0
   131fa:	60bb      	str	r3, [r7, #8]
	if (cmdx == NULL)
   131fc:	68bb      	ldr	r3, [r7, #8]
   131fe:	2b00      	cmp	r3, #0
   13200:	d105      	bne.n	1320e <gsm_get_internal_rtc_time+0x32>
	{
		free(cmdx);
   13202:	68bb      	ldr	r3, [r7, #8]
   13204:	0018      	movs	r0, r3
   13206:	4b54      	ldr	r3, [pc, #336]	; (13358 <gsm_get_internal_rtc_time+0x17c>)
   13208:	4798      	blx	r3
		return 0;
   1320a:	2300      	movs	r3, #0
   1320c:	e09d      	b.n	1334a <gsm_get_internal_rtc_time+0x16e>
	}
	memset(cmdx, '\0', MAX_BUFFER);
   1320e:	230f      	movs	r3, #15
   13210:	18fb      	adds	r3, r7, r3
   13212:	781a      	ldrb	r2, [r3, #0]
   13214:	68bb      	ldr	r3, [r7, #8]
   13216:	2100      	movs	r1, #0
   13218:	0018      	movs	r0, r3
   1321a:	4b50      	ldr	r3, [pc, #320]	; (1335c <gsm_get_internal_rtc_time+0x180>)
   1321c:	4798      	blx	r3
	
	enum gsm_error err;
	err = gsm_send_at_command((const char*)"AT+CCLK?\r", (const char*)RESPONS_OK,5000,MAX_BUFFER, cmdx);
   1321e:	1dfc      	adds	r4, r7, #7
   13220:	230f      	movs	r3, #15
   13222:	18fb      	adds	r3, r7, r3
   13224:	781a      	ldrb	r2, [r3, #0]
   13226:	4d4e      	ldr	r5, [pc, #312]	; (13360 <gsm_get_internal_rtc_time+0x184>)
   13228:	494e      	ldr	r1, [pc, #312]	; (13364 <gsm_get_internal_rtc_time+0x188>)
   1322a:	484f      	ldr	r0, [pc, #316]	; (13368 <gsm_get_internal_rtc_time+0x18c>)
   1322c:	68bb      	ldr	r3, [r7, #8]
   1322e:	9300      	str	r3, [sp, #0]
   13230:	0013      	movs	r3, r2
   13232:	002a      	movs	r2, r5
   13234:	4d4d      	ldr	r5, [pc, #308]	; (1336c <gsm_get_internal_rtc_time+0x190>)
   13236:	47a8      	blx	r5
   13238:	0003      	movs	r3, r0
   1323a:	7023      	strb	r3, [r4, #0]
	if(err==GSM_ERROR_NONE)
   1323c:	1dfb      	adds	r3, r7, #7
   1323e:	781b      	ldrb	r3, [r3, #0]
   13240:	2b00      	cmp	r3, #0
   13242:	d16a      	bne.n	1331a <gsm_get_internal_rtc_time+0x13e>
	{
		char *cclktocken;
		cclktocken = strtok(cmdx,"\"");
   13244:	4a4a      	ldr	r2, [pc, #296]	; (13370 <gsm_get_internal_rtc_time+0x194>)
   13246:	68bb      	ldr	r3, [r7, #8]
   13248:	0011      	movs	r1, r2
   1324a:	0018      	movs	r0, r3
   1324c:	4b49      	ldr	r3, [pc, #292]	; (13374 <gsm_get_internal_rtc_time+0x198>)
   1324e:	4798      	blx	r3
   13250:	0003      	movs	r3, r0
   13252:	603b      	str	r3, [r7, #0]
		cclktocken = strtok(NULL,"\"");
   13254:	4b46      	ldr	r3, [pc, #280]	; (13370 <gsm_get_internal_rtc_time+0x194>)
   13256:	0019      	movs	r1, r3
   13258:	2000      	movs	r0, #0
   1325a:	4b46      	ldr	r3, [pc, #280]	; (13374 <gsm_get_internal_rtc_time+0x198>)
   1325c:	4798      	blx	r3
   1325e:	0003      	movs	r3, r0
   13260:	603b      	str	r3, [r7, #0]
		
		cclktocken = strtok(cclktocken,"/");
   13262:	4a45      	ldr	r2, [pc, #276]	; (13378 <gsm_get_internal_rtc_time+0x19c>)
   13264:	683b      	ldr	r3, [r7, #0]
   13266:	0011      	movs	r1, r2
   13268:	0018      	movs	r0, r3
   1326a:	4b42      	ldr	r3, [pc, #264]	; (13374 <gsm_get_internal_rtc_time+0x198>)
   1326c:	4798      	blx	r3
   1326e:	0003      	movs	r3, r0
   13270:	603b      	str	r3, [r7, #0]
		struct_internal_rtc.Network_year = atoi(cclktocken);
   13272:	683b      	ldr	r3, [r7, #0]
   13274:	0018      	movs	r0, r3
   13276:	4b41      	ldr	r3, [pc, #260]	; (1337c <gsm_get_internal_rtc_time+0x1a0>)
   13278:	4798      	blx	r3
   1327a:	0003      	movs	r3, r0
   1327c:	b2da      	uxtb	r2, r3
   1327e:	4b40      	ldr	r3, [pc, #256]	; (13380 <gsm_get_internal_rtc_time+0x1a4>)
   13280:	701a      	strb	r2, [r3, #0]
		
		cclktocken = strtok(NULL,"/");
   13282:	4b3d      	ldr	r3, [pc, #244]	; (13378 <gsm_get_internal_rtc_time+0x19c>)
   13284:	0019      	movs	r1, r3
   13286:	2000      	movs	r0, #0
   13288:	4b3a      	ldr	r3, [pc, #232]	; (13374 <gsm_get_internal_rtc_time+0x198>)
   1328a:	4798      	blx	r3
   1328c:	0003      	movs	r3, r0
   1328e:	603b      	str	r3, [r7, #0]
		struct_internal_rtc.Network_month = atoi(cclktocken);
   13290:	683b      	ldr	r3, [r7, #0]
   13292:	0018      	movs	r0, r3
   13294:	4b39      	ldr	r3, [pc, #228]	; (1337c <gsm_get_internal_rtc_time+0x1a0>)
   13296:	4798      	blx	r3
   13298:	0003      	movs	r3, r0
   1329a:	b2da      	uxtb	r2, r3
   1329c:	4b38      	ldr	r3, [pc, #224]	; (13380 <gsm_get_internal_rtc_time+0x1a4>)
   1329e:	705a      	strb	r2, [r3, #1]
		
		cclktocken = strtok(NULL,",");
   132a0:	4b38      	ldr	r3, [pc, #224]	; (13384 <gsm_get_internal_rtc_time+0x1a8>)
   132a2:	0019      	movs	r1, r3
   132a4:	2000      	movs	r0, #0
   132a6:	4b33      	ldr	r3, [pc, #204]	; (13374 <gsm_get_internal_rtc_time+0x198>)
   132a8:	4798      	blx	r3
   132aa:	0003      	movs	r3, r0
   132ac:	603b      	str	r3, [r7, #0]
		struct_internal_rtc.Network_date = atoi(cclktocken);
   132ae:	683b      	ldr	r3, [r7, #0]
   132b0:	0018      	movs	r0, r3
   132b2:	4b32      	ldr	r3, [pc, #200]	; (1337c <gsm_get_internal_rtc_time+0x1a0>)
   132b4:	4798      	blx	r3
   132b6:	0003      	movs	r3, r0
   132b8:	b2da      	uxtb	r2, r3
   132ba:	4b31      	ldr	r3, [pc, #196]	; (13380 <gsm_get_internal_rtc_time+0x1a4>)
   132bc:	709a      	strb	r2, [r3, #2]
		
		cclktocken = strtok(NULL,":");
   132be:	4b32      	ldr	r3, [pc, #200]	; (13388 <gsm_get_internal_rtc_time+0x1ac>)
   132c0:	0019      	movs	r1, r3
   132c2:	2000      	movs	r0, #0
   132c4:	4b2b      	ldr	r3, [pc, #172]	; (13374 <gsm_get_internal_rtc_time+0x198>)
   132c6:	4798      	blx	r3
   132c8:	0003      	movs	r3, r0
   132ca:	603b      	str	r3, [r7, #0]
		struct_internal_rtc.Network_hour = atoi(cclktocken);
   132cc:	683b      	ldr	r3, [r7, #0]
   132ce:	0018      	movs	r0, r3
   132d0:	4b2a      	ldr	r3, [pc, #168]	; (1337c <gsm_get_internal_rtc_time+0x1a0>)
   132d2:	4798      	blx	r3
   132d4:	0003      	movs	r3, r0
   132d6:	b2da      	uxtb	r2, r3
   132d8:	4b29      	ldr	r3, [pc, #164]	; (13380 <gsm_get_internal_rtc_time+0x1a4>)
   132da:	70da      	strb	r2, [r3, #3]
		
		cclktocken = strtok(NULL,":");
   132dc:	4b2a      	ldr	r3, [pc, #168]	; (13388 <gsm_get_internal_rtc_time+0x1ac>)
   132de:	0019      	movs	r1, r3
   132e0:	2000      	movs	r0, #0
   132e2:	4b24      	ldr	r3, [pc, #144]	; (13374 <gsm_get_internal_rtc_time+0x198>)
   132e4:	4798      	blx	r3
   132e6:	0003      	movs	r3, r0
   132e8:	603b      	str	r3, [r7, #0]
		struct_internal_rtc.Network_minute = atoi(cclktocken);
   132ea:	683b      	ldr	r3, [r7, #0]
   132ec:	0018      	movs	r0, r3
   132ee:	4b23      	ldr	r3, [pc, #140]	; (1337c <gsm_get_internal_rtc_time+0x1a0>)
   132f0:	4798      	blx	r3
   132f2:	0003      	movs	r3, r0
   132f4:	b2da      	uxtb	r2, r3
   132f6:	4b22      	ldr	r3, [pc, #136]	; (13380 <gsm_get_internal_rtc_time+0x1a4>)
   132f8:	711a      	strb	r2, [r3, #4]
		
		cclktocken = strtok(NULL,"+");
   132fa:	4b24      	ldr	r3, [pc, #144]	; (1338c <gsm_get_internal_rtc_time+0x1b0>)
   132fc:	0019      	movs	r1, r3
   132fe:	2000      	movs	r0, #0
   13300:	4b1c      	ldr	r3, [pc, #112]	; (13374 <gsm_get_internal_rtc_time+0x198>)
   13302:	4798      	blx	r3
   13304:	0003      	movs	r3, r0
   13306:	603b      	str	r3, [r7, #0]
		struct_internal_rtc.Network_second = atoi(cclktocken);
   13308:	683b      	ldr	r3, [r7, #0]
   1330a:	0018      	movs	r0, r3
   1330c:	4b1b      	ldr	r3, [pc, #108]	; (1337c <gsm_get_internal_rtc_time+0x1a0>)
   1330e:	4798      	blx	r3
   13310:	0003      	movs	r3, r0
   13312:	b2da      	uxtb	r2, r3
   13314:	4b1a      	ldr	r3, [pc, #104]	; (13380 <gsm_get_internal_rtc_time+0x1a4>)
   13316:	715a      	strb	r2, [r3, #5]
   13318:	e011      	b.n	1333e <gsm_get_internal_rtc_time+0x162>
	}
	else
	{
		struct_internal_rtc.Network_year = 0;
   1331a:	4b19      	ldr	r3, [pc, #100]	; (13380 <gsm_get_internal_rtc_time+0x1a4>)
   1331c:	2200      	movs	r2, #0
   1331e:	701a      	strb	r2, [r3, #0]
		struct_internal_rtc.Network_month = 0;
   13320:	4b17      	ldr	r3, [pc, #92]	; (13380 <gsm_get_internal_rtc_time+0x1a4>)
   13322:	2200      	movs	r2, #0
   13324:	705a      	strb	r2, [r3, #1]
		struct_internal_rtc.Network_date = 0;
   13326:	4b16      	ldr	r3, [pc, #88]	; (13380 <gsm_get_internal_rtc_time+0x1a4>)
   13328:	2200      	movs	r2, #0
   1332a:	709a      	strb	r2, [r3, #2]
		struct_internal_rtc.Network_hour = 0;
   1332c:	4b14      	ldr	r3, [pc, #80]	; (13380 <gsm_get_internal_rtc_time+0x1a4>)
   1332e:	2200      	movs	r2, #0
   13330:	70da      	strb	r2, [r3, #3]
		struct_internal_rtc.Network_minute = 0;
   13332:	4b13      	ldr	r3, [pc, #76]	; (13380 <gsm_get_internal_rtc_time+0x1a4>)
   13334:	2200      	movs	r2, #0
   13336:	711a      	strb	r2, [r3, #4]
		struct_internal_rtc.Network_second = 0;
   13338:	4b11      	ldr	r3, [pc, #68]	; (13380 <gsm_get_internal_rtc_time+0x1a4>)
   1333a:	2200      	movs	r2, #0
   1333c:	715a      	strb	r2, [r3, #5]
	}
	
	free(cmdx);
   1333e:	68bb      	ldr	r3, [r7, #8]
   13340:	0018      	movs	r0, r3
   13342:	4b05      	ldr	r3, [pc, #20]	; (13358 <gsm_get_internal_rtc_time+0x17c>)
   13344:	4798      	blx	r3
	return err;
   13346:	1dfb      	adds	r3, r7, #7
   13348:	781b      	ldrb	r3, [r3, #0]
}
   1334a:	0018      	movs	r0, r3
   1334c:	46bd      	mov	sp, r7
   1334e:	b004      	add	sp, #16
   13350:	bdb0      	pop	{r4, r5, r7, pc}
   13352:	46c0      	nop			; (mov r8, r8)
   13354:	000288d5 	.word	0x000288d5
   13358:	00028975 	.word	0x00028975
   1335c:	000289e3 	.word	0x000289e3
   13360:	00001388 	.word	0x00001388
   13364:	00029698 	.word	0x00029698
   13368:	0002998c 	.word	0x0002998c
   1336c:	000123ed 	.word	0x000123ed
   13370:	00029998 	.word	0x00029998
   13374:	00028cd5 	.word	0x00028cd5
   13378:	0002999c 	.word	0x0002999c
   1337c:	000288c9 	.word	0x000288c9
   13380:	20000688 	.word	0x20000688
   13384:	000297b4 	.word	0x000297b4
   13388:	000297b0 	.word	0x000297b0
   1338c:	000299a0 	.word	0x000299a0

00013390 <gsm_config_module>:


enum gsm_error gsm_config_module(void)
{
   13390:	b580      	push	{r7, lr}
   13392:	af00      	add	r7, sp, #0
	if (gsm_check_module() == GSM_ERROR_NONE)
   13394:	4b34      	ldr	r3, [pc, #208]	; (13468 <gsm_config_module+0xd8>)
   13396:	4798      	blx	r3
   13398:	1e03      	subs	r3, r0, #0
   1339a:	d000      	beq.n	1339e <gsm_config_module+0xe>
   1339c:	e05e      	b.n	1345c <gsm_config_module+0xcc>
	{
		if (gsm_factory_reset() == GSM_ERROR_NONE)
   1339e:	4b33      	ldr	r3, [pc, #204]	; (1346c <gsm_config_module+0xdc>)
   133a0:	4798      	blx	r3
   133a2:	1e03      	subs	r3, r0, #0
   133a4:	d000      	beq.n	133a8 <gsm_config_module+0x18>
   133a6:	e057      	b.n	13458 <gsm_config_module+0xc8>
		{
			vTaskDelay(2000/portTICK_PERIOD_MS);
   133a8:	23fa      	movs	r3, #250	; 0xfa
   133aa:	00db      	lsls	r3, r3, #3
   133ac:	0018      	movs	r0, r3
   133ae:	4b30      	ldr	r3, [pc, #192]	; (13470 <gsm_config_module+0xe0>)
   133b0:	4798      	blx	r3
			
			if (gsm_detect_simcard() == GSM_ERROR_NONE)
   133b2:	4b30      	ldr	r3, [pc, #192]	; (13474 <gsm_config_module+0xe4>)
   133b4:	4798      	blx	r3
   133b6:	1e03      	subs	r3, r0, #0
   133b8:	d14c      	bne.n	13454 <gsm_config_module+0xc4>
			{
				if (gsm_echo_off() == GSM_ERROR_NONE)
   133ba:	4b2f      	ldr	r3, [pc, #188]	; (13478 <gsm_config_module+0xe8>)
   133bc:	4798      	blx	r3
   133be:	1e03      	subs	r3, r0, #0
   133c0:	d14e      	bne.n	13460 <gsm_config_module+0xd0>
				{
					if (gsm_set_baudrate() == GSM_ERROR_NONE)
   133c2:	4b2e      	ldr	r3, [pc, #184]	; (1347c <gsm_config_module+0xec>)
   133c4:	4798      	blx	r3
   133c6:	1e03      	subs	r3, r0, #0
   133c8:	d142      	bne.n	13450 <gsm_config_module+0xc0>
					{
						vTaskDelay(2000/portTICK_PERIOD_MS);
   133ca:	23fa      	movs	r3, #250	; 0xfa
   133cc:	00db      	lsls	r3, r3, #3
   133ce:	0018      	movs	r0, r3
   133d0:	4b27      	ldr	r3, [pc, #156]	; (13470 <gsm_config_module+0xe0>)
   133d2:	4798      	blx	r3
						
						if (gsm_enable_calling_line_identification()==GSM_ERROR_NONE)
   133d4:	4b2a      	ldr	r3, [pc, #168]	; (13480 <gsm_config_module+0xf0>)
   133d6:	4798      	blx	r3
   133d8:	1e03      	subs	r3, r0, #0
   133da:	d137      	bne.n	1344c <gsm_config_module+0xbc>
						{
							if (gsm_enable_connected_line_identification_presentation() == GSM_ERROR_NONE)
   133dc:	4b29      	ldr	r3, [pc, #164]	; (13484 <gsm_config_module+0xf4>)
   133de:	4798      	blx	r3
   133e0:	1e03      	subs	r3, r0, #0
   133e2:	d131      	bne.n	13448 <gsm_config_module+0xb8>
							{
								if (gsm_enable_list_current_calls_of_ME() == GSM_ERROR_NONE)
   133e4:	4b28      	ldr	r3, [pc, #160]	; (13488 <gsm_config_module+0xf8>)
   133e6:	4798      	blx	r3
   133e8:	1e03      	subs	r3, r0, #0
   133ea:	d12b      	bne.n	13444 <gsm_config_module+0xb4>
								{
									if (gsm_select_sms_message_formate_text_mode() == GSM_ERROR_NONE)
   133ec:	4b27      	ldr	r3, [pc, #156]	; (1348c <gsm_config_module+0xfc>)
   133ee:	4798      	blx	r3
   133f0:	1e03      	subs	r3, r0, #0
   133f2:	d125      	bne.n	13440 <gsm_config_module+0xb0>
									{
										if (gsm_set_sms_text_mode_parameter() == GSM_ERROR_NONE)
   133f4:	4b26      	ldr	r3, [pc, #152]	; (13490 <gsm_config_module+0x100>)
   133f6:	4798      	blx	r3
   133f8:	1e03      	subs	r3, r0, #0
   133fa:	d11f      	bne.n	1343c <gsm_config_module+0xac>
										{
											if (gsm_enable_new_sms_message_indications() == GSM_ERROR_NONE)
   133fc:	4b25      	ldr	r3, [pc, #148]	; (13494 <gsm_config_module+0x104>)
   133fe:	4798      	blx	r3
   13400:	1e03      	subs	r3, r0, #0
   13402:	d119      	bne.n	13438 <gsm_config_module+0xa8>
											{
												if (gsm_enable_network_time_update() == GSM_ERROR_NONE)
   13404:	4b24      	ldr	r3, [pc, #144]	; (13498 <gsm_config_module+0x108>)
   13406:	4798      	blx	r3
   13408:	1e03      	subs	r3, r0, #0
   1340a:	d113      	bne.n	13434 <gsm_config_module+0xa4>
												{
													if (gsm_enable_DTMF_detection() == GSM_ERROR_NONE)
   1340c:	4b23      	ldr	r3, [pc, #140]	; (1349c <gsm_config_module+0x10c>)
   1340e:	4798      	blx	r3
   13410:	1e03      	subs	r3, r0, #0
   13412:	d10d      	bne.n	13430 <gsm_config_module+0xa0>
													{
														if (gsm_enable_sleep_mode()==GSM_ERROR_NONE)
   13414:	4b22      	ldr	r3, [pc, #136]	; (134a0 <gsm_config_module+0x110>)
   13416:	4798      	blx	r3
   13418:	1e03      	subs	r3, r0, #0
   1341a:	d107      	bne.n	1342c <gsm_config_module+0x9c>
														{
															if (gsm_store_active_profile() == GSM_ERROR_NONE)
   1341c:	4b21      	ldr	r3, [pc, #132]	; (134a4 <gsm_config_module+0x114>)
   1341e:	4798      	blx	r3
   13420:	1e03      	subs	r3, r0, #0
   13422:	d101      	bne.n	13428 <gsm_config_module+0x98>
															{
																return GSM_ERROR_NONE;
   13424:	2300      	movs	r3, #0
   13426:	e01c      	b.n	13462 <gsm_config_module+0xd2>
															}
															else
															{
																return GSM_ERROR_CONFIG_FAILED;
   13428:	2310      	movs	r3, #16
   1342a:	e01a      	b.n	13462 <gsm_config_module+0xd2>
															}
														}
														else
														{
																return GSM_ERROR_CONFIG_FAILED;
   1342c:	2310      	movs	r3, #16
   1342e:	e018      	b.n	13462 <gsm_config_module+0xd2>
														}
													}
													else
													{
														return GSM_ERROR_CONFIG_FAILED;
   13430:	2310      	movs	r3, #16
   13432:	e016      	b.n	13462 <gsm_config_module+0xd2>
													}
												}
												else
												{
													return GSM_ERROR_CONFIG_FAILED;
   13434:	2310      	movs	r3, #16
   13436:	e014      	b.n	13462 <gsm_config_module+0xd2>
												}
											}
											else
											{
												return GSM_ERROR_CONFIG_FAILED;
   13438:	2310      	movs	r3, #16
   1343a:	e012      	b.n	13462 <gsm_config_module+0xd2>
											}
										}
										else
										{
											return GSM_ERROR_CONFIG_FAILED;
   1343c:	2310      	movs	r3, #16
   1343e:	e010      	b.n	13462 <gsm_config_module+0xd2>
										}
									}
									else
									{
										return GSM_ERROR_CONFIG_FAILED;
   13440:	2310      	movs	r3, #16
   13442:	e00e      	b.n	13462 <gsm_config_module+0xd2>
									}
								}
								else
								{
									return GSM_ERROR_CONFIG_FAILED;
   13444:	2310      	movs	r3, #16
   13446:	e00c      	b.n	13462 <gsm_config_module+0xd2>
								}
							}
							else
							{
								return GSM_ERROR_CONFIG_FAILED;
   13448:	2310      	movs	r3, #16
   1344a:	e00a      	b.n	13462 <gsm_config_module+0xd2>
							}
						}
						else
						{
							return GSM_ERROR_CONFIG_FAILED;
   1344c:	2310      	movs	r3, #16
   1344e:	e008      	b.n	13462 <gsm_config_module+0xd2>
						}
					}
					else
					{
						return GSM_ERROR_CONFIG_FAILED;
   13450:	2310      	movs	r3, #16
   13452:	e006      	b.n	13462 <gsm_config_module+0xd2>
					}
				}
			}
			else
			{
				return GSM_ERROR_CONFIG_FAILED;
   13454:	2310      	movs	r3, #16
   13456:	e004      	b.n	13462 <gsm_config_module+0xd2>
			}
		}
		else
		{
			return GSM_ERROR_CONFIG_FAILED;
   13458:	2310      	movs	r3, #16
   1345a:	e002      	b.n	13462 <gsm_config_module+0xd2>
		}
	}
	else
	{
		return GSM_ERROR_CONFIG_FAILED;
   1345c:	2310      	movs	r3, #16
   1345e:	e000      	b.n	13462 <gsm_config_module+0xd2>
	}
	
	return GSM_ERROR_CONFIG_FAILED;
   13460:	2310      	movs	r3, #16
}
   13462:	0018      	movs	r0, r3
   13464:	46bd      	mov	sp, r7
   13466:	bd80      	pop	{r7, pc}
   13468:	000125e5 	.word	0x000125e5
   1346c:	00012821 	.word	0x00012821
   13470:	0001fd79 	.word	0x0001fd79
   13474:	000126d1 	.word	0x000126d1
   13478:	00012851 	.word	0x00012851
   1347c:	0001267d 	.word	0x0001267d
   13480:	00012761 	.word	0x00012761
   13484:	00012791 	.word	0x00012791
   13488:	000127f1 	.word	0x000127f1
   1348c:	00012881 	.word	0x00012881
   13490:	000128b1 	.word	0x000128b1
   13494:	00012af9 	.word	0x00012af9
   13498:	00012f9d 	.word	0x00012f9d
   1349c:	00012fcd 	.word	0x00012fcd
   134a0:	000127c1 	.word	0x000127c1
   134a4:	00012731 	.word	0x00012731

000134a8 <gsm_read_response_line>:

bool gsm_read_response_line(char *buffer,uint8_t length)
{
   134a8:	b580      	push	{r7, lr}
   134aa:	b084      	sub	sp, #16
   134ac:	af00      	add	r7, sp, #0
   134ae:	6078      	str	r0, [r7, #4]
   134b0:	000a      	movs	r2, r1
   134b2:	1cfb      	adds	r3, r7, #3
   134b4:	701a      	strb	r2, [r3, #0]
	bool line_non_empty = false;
   134b6:	230f      	movs	r3, #15
   134b8:	18fb      	adds	r3, r7, r3
   134ba:	2200      	movs	r2, #0
   134bc:	701a      	strb	r2, [r3, #0]
	while (length > 1)
   134be:	e026      	b.n	1350e <gsm_read_response_line+0x66>
	{
		
		uint8_t curr_rx;
		/* Fetch next buffered character received from the module */
		if (xQueueReceive(gsm_rx_queue, &curr_rx, 500 / portTICK_PERIOD_MS) == pdFALSE)
   134c0:	4b1f      	ldr	r3, [pc, #124]	; (13540 <gsm_read_response_line+0x98>)
   134c2:	6818      	ldr	r0, [r3, #0]
   134c4:	23fa      	movs	r3, #250	; 0xfa
   134c6:	005a      	lsls	r2, r3, #1
   134c8:	230e      	movs	r3, #14
   134ca:	18fb      	adds	r3, r7, r3
   134cc:	0019      	movs	r1, r3
   134ce:	4b1d      	ldr	r3, [pc, #116]	; (13544 <gsm_read_response_line+0x9c>)
   134d0:	4798      	blx	r3
   134d2:	1e03      	subs	r3, r0, #0
   134d4:	d101      	bne.n	134da <gsm_read_response_line+0x32>
		{
			return false;
   134d6:	2300      	movs	r3, #0
   134d8:	e02d      	b.n	13536 <gsm_read_response_line+0x8e>
		}

		if (curr_rx == '\n')
   134da:	230e      	movs	r3, #14
   134dc:	18fb      	adds	r3, r7, r3
   134de:	781b      	ldrb	r3, [r3, #0]
   134e0:	2b0a      	cmp	r3, #10
   134e2:	d014      	beq.n	1350e <gsm_read_response_line+0x66>
		{
			/* Ignore newline characters */
		}
		else if (curr_rx != '\r')
   134e4:	230e      	movs	r3, #14
   134e6:	18fb      	adds	r3, r7, r3
   134e8:	781b      	ldrb	r3, [r3, #0]
   134ea:	2b0d      	cmp	r3, #13
   134ec:	d014      	beq.n	13518 <gsm_read_response_line+0x70>
		{
			/* Non end-of-command CR character */
			*(buffer++) = curr_rx;
   134ee:	687b      	ldr	r3, [r7, #4]
   134f0:	1c5a      	adds	r2, r3, #1
   134f2:	607a      	str	r2, [r7, #4]
   134f4:	220e      	movs	r2, #14
   134f6:	18ba      	adds	r2, r7, r2
   134f8:	7812      	ldrb	r2, [r2, #0]
   134fa:	701a      	strb	r2, [r3, #0]
			length--;
   134fc:	1cfb      	adds	r3, r7, #3
   134fe:	781a      	ldrb	r2, [r3, #0]
   13500:	1cfb      	adds	r3, r7, #3
   13502:	3a01      	subs	r2, #1
   13504:	701a      	strb	r2, [r3, #0]
			line_non_empty = true;
   13506:	230f      	movs	r3, #15
   13508:	18fb      	adds	r3, r7, r3
   1350a:	2201      	movs	r2, #1
   1350c:	701a      	strb	r2, [r3, #0]
	while (length > 1)
   1350e:	1cfb      	adds	r3, r7, #3
   13510:	781b      	ldrb	r3, [r3, #0]
   13512:	2b01      	cmp	r3, #1
   13514:	d8d4      	bhi.n	134c0 <gsm_read_response_line+0x18>
   13516:	e000      	b.n	1351a <gsm_read_response_line+0x72>
		}
		else
		{
			/* End of command, finished reading line */
			break;
   13518:	46c0      	nop			; (mov r8, r8)
		}
	}

	if(line_non_empty)
   1351a:	230f      	movs	r3, #15
   1351c:	18fb      	adds	r3, r7, r3
   1351e:	781b      	ldrb	r3, [r3, #0]
   13520:	2b00      	cmp	r3, #0
   13522:	d002      	beq.n	1352a <gsm_read_response_line+0x82>
	{
		gsm_module_exit_sleep(true);
   13524:	2001      	movs	r0, #1
   13526:	4b08      	ldr	r3, [pc, #32]	; (13548 <gsm_read_response_line+0xa0>)
   13528:	4798      	blx	r3
	}

	*(buffer) = '\0';
   1352a:	687b      	ldr	r3, [r7, #4]
   1352c:	2200      	movs	r2, #0
   1352e:	701a      	strb	r2, [r3, #0]
	return line_non_empty;
   13530:	230f      	movs	r3, #15
   13532:	18fb      	adds	r3, r7, r3
   13534:	781b      	ldrb	r3, [r3, #0]
}
   13536:	0018      	movs	r0, r3
   13538:	46bd      	mov	sp, r7
   1353a:	b004      	add	sp, #16
   1353c:	bd80      	pop	{r7, pc}
   1353e:	46c0      	nop			; (mov r8, r8)
   13540:	2000021c 	.word	0x2000021c
   13544:	0001f2d1 	.word	0x0001f2d1
   13548:	00012319 	.word	0x00012319

0001354c <gsm_responseLine_isNew_SMS_Received>:

char gsm_responseLine_isNew_SMS_Received(char *response)
{
   1354c:	b580      	push	{r7, lr}
   1354e:	b084      	sub	sp, #16
   13550:	af00      	add	r7, sp, #0
   13552:	6078      	str	r0, [r7, #4]
	
	char sms_index = 0;
   13554:	230f      	movs	r3, #15
   13556:	18fb      	adds	r3, r7, r3
   13558:	2200      	movs	r2, #0
   1355a:	701a      	strb	r2, [r3, #0]
	
	if (strstr(response,"+CMTI:"))
   1355c:	4a17      	ldr	r2, [pc, #92]	; (135bc <gsm_responseLine_isNew_SMS_Received+0x70>)
   1355e:	687b      	ldr	r3, [r7, #4]
   13560:	0011      	movs	r1, r2
   13562:	0018      	movs	r0, r3
   13564:	4b16      	ldr	r3, [pc, #88]	; (135c0 <gsm_responseLine_isNew_SMS_Received+0x74>)
   13566:	4798      	blx	r3
   13568:	1e03      	subs	r3, r0, #0
   1356a:	d01b      	beq.n	135a4 <gsm_responseLine_isNew_SMS_Received+0x58>
	{
		char *ptr_tocken;
		ptr_tocken = strtok(response,",");
   1356c:	4a15      	ldr	r2, [pc, #84]	; (135c4 <gsm_responseLine_isNew_SMS_Received+0x78>)
   1356e:	687b      	ldr	r3, [r7, #4]
   13570:	0011      	movs	r1, r2
   13572:	0018      	movs	r0, r3
   13574:	4b14      	ldr	r3, [pc, #80]	; (135c8 <gsm_responseLine_isNew_SMS_Received+0x7c>)
   13576:	4798      	blx	r3
   13578:	0003      	movs	r3, r0
   1357a:	60bb      	str	r3, [r7, #8]
		ptr_tocken = strtok(NULL,",");
   1357c:	4b11      	ldr	r3, [pc, #68]	; (135c4 <gsm_responseLine_isNew_SMS_Received+0x78>)
   1357e:	0019      	movs	r1, r3
   13580:	2000      	movs	r0, #0
   13582:	4b11      	ldr	r3, [pc, #68]	; (135c8 <gsm_responseLine_isNew_SMS_Received+0x7c>)
   13584:	4798      	blx	r3
   13586:	0003      	movs	r3, r0
   13588:	60bb      	str	r3, [r7, #8]
		
		RemoveSpaces(ptr_tocken);
   1358a:	68bb      	ldr	r3, [r7, #8]
   1358c:	0018      	movs	r0, r3
   1358e:	4b0f      	ldr	r3, [pc, #60]	; (135cc <gsm_responseLine_isNew_SMS_Received+0x80>)
   13590:	4798      	blx	r3
		
		sms_index = atoi(ptr_tocken);
   13592:	68bb      	ldr	r3, [r7, #8]
   13594:	0018      	movs	r0, r3
   13596:	4b0e      	ldr	r3, [pc, #56]	; (135d0 <gsm_responseLine_isNew_SMS_Received+0x84>)
   13598:	4798      	blx	r3
   1359a:	0002      	movs	r2, r0
   1359c:	230f      	movs	r3, #15
   1359e:	18fb      	adds	r3, r7, r3
   135a0:	701a      	strb	r2, [r3, #0]
   135a2:	e003      	b.n	135ac <gsm_responseLine_isNew_SMS_Received+0x60>
		
	}
	else
	{
		sms_index =  0;
   135a4:	230f      	movs	r3, #15
   135a6:	18fb      	adds	r3, r7, r3
   135a8:	2200      	movs	r2, #0
   135aa:	701a      	strb	r2, [r3, #0]
	}
	
	return sms_index;
   135ac:	230f      	movs	r3, #15
   135ae:	18fb      	adds	r3, r7, r3
   135b0:	781b      	ldrb	r3, [r3, #0]
}
   135b2:	0018      	movs	r0, r3
   135b4:	46bd      	mov	sp, r7
   135b6:	b004      	add	sp, #16
   135b8:	bd80      	pop	{r7, pc}
   135ba:	46c0      	nop			; (mov r8, r8)
   135bc:	000299a4 	.word	0x000299a4
   135c0:	00028ca3 	.word	0x00028ca3
   135c4:	000297b4 	.word	0x000297b4
   135c8:	00028cd5 	.word	0x00028cd5
   135cc:	00012ab5 	.word	0x00012ab5
   135d0:	000288c9 	.word	0x000288c9

000135d4 <gsm_responseLine_isRinging>:

bool gsm_responseLine_isRinging(char *response)
{
   135d4:	b580      	push	{r7, lr}
   135d6:	b082      	sub	sp, #8
   135d8:	af00      	add	r7, sp, #0
   135da:	6078      	str	r0, [r7, #4]
	if (strstr(response,"RING"))
   135dc:	4a07      	ldr	r2, [pc, #28]	; (135fc <gsm_responseLine_isRinging+0x28>)
   135de:	687b      	ldr	r3, [r7, #4]
   135e0:	0011      	movs	r1, r2
   135e2:	0018      	movs	r0, r3
   135e4:	4b06      	ldr	r3, [pc, #24]	; (13600 <gsm_responseLine_isRinging+0x2c>)
   135e6:	4798      	blx	r3
   135e8:	1e03      	subs	r3, r0, #0
   135ea:	d001      	beq.n	135f0 <gsm_responseLine_isRinging+0x1c>
	{
		return true;
   135ec:	2301      	movs	r3, #1
   135ee:	e000      	b.n	135f2 <gsm_responseLine_isRinging+0x1e>
	}
	else
	{
		return false;
   135f0:	2300      	movs	r3, #0
	}
}
   135f2:	0018      	movs	r0, r3
   135f4:	46bd      	mov	sp, r7
   135f6:	b002      	add	sp, #8
   135f8:	bd80      	pop	{r7, pc}
   135fa:	46c0      	nop			; (mov r8, r8)
   135fc:	000299ac 	.word	0x000299ac
   13600:	00028ca3 	.word	0x00028ca3

00013604 <gsm_responseLine_isCSQN>:

bool gsm_responseLine_isCSQN(char *response, volatile uint8_t *signal)
{
   13604:	b580      	push	{r7, lr}
   13606:	b084      	sub	sp, #16
   13608:	af00      	add	r7, sp, #0
   1360a:	6078      	str	r0, [r7, #4]
   1360c:	6039      	str	r1, [r7, #0]
	if(strstr(response,"+CSQN"))
   1360e:	4a4e      	ldr	r2, [pc, #312]	; (13748 <gsm_responseLine_isCSQN+0x144>)
   13610:	687b      	ldr	r3, [r7, #4]
   13612:	0011      	movs	r1, r2
   13614:	0018      	movs	r0, r3
   13616:	4b4d      	ldr	r3, [pc, #308]	; (1374c <gsm_responseLine_isCSQN+0x148>)
   13618:	4798      	blx	r3
   1361a:	1e03      	subs	r3, r0, #0
   1361c:	d100      	bne.n	13620 <gsm_responseLine_isCSQN+0x1c>
   1361e:	e08d      	b.n	1373c <gsm_responseLine_isCSQN+0x138>
	{
		if (strstr(response,"99")==NULL)
   13620:	4a4b      	ldr	r2, [pc, #300]	; (13750 <gsm_responseLine_isCSQN+0x14c>)
   13622:	687b      	ldr	r3, [r7, #4]
   13624:	0011      	movs	r1, r2
   13626:	0018      	movs	r0, r3
   13628:	4b48      	ldr	r3, [pc, #288]	; (1374c <gsm_responseLine_isCSQN+0x148>)
   1362a:	4798      	blx	r3
   1362c:	1e03      	subs	r3, r0, #0
   1362e:	d000      	beq.n	13632 <gsm_responseLine_isCSQN+0x2e>
   13630:	e07f      	b.n	13732 <gsm_responseLine_isCSQN+0x12e>
		{
			char *ptr_tocken;
			ptr_tocken = strtok(response,":");
   13632:	4a48      	ldr	r2, [pc, #288]	; (13754 <gsm_responseLine_isCSQN+0x150>)
   13634:	687b      	ldr	r3, [r7, #4]
   13636:	0011      	movs	r1, r2
   13638:	0018      	movs	r0, r3
   1363a:	4b47      	ldr	r3, [pc, #284]	; (13758 <gsm_responseLine_isCSQN+0x154>)
   1363c:	4798      	blx	r3
   1363e:	0003      	movs	r3, r0
   13640:	60fb      	str	r3, [r7, #12]
			ptr_tocken = strtok(NULL,":");
   13642:	4b44      	ldr	r3, [pc, #272]	; (13754 <gsm_responseLine_isCSQN+0x150>)
   13644:	0019      	movs	r1, r3
   13646:	2000      	movs	r0, #0
   13648:	4b43      	ldr	r3, [pc, #268]	; (13758 <gsm_responseLine_isCSQN+0x154>)
   1364a:	4798      	blx	r3
   1364c:	0003      	movs	r3, r0
   1364e:	60fb      	str	r3, [r7, #12]
			ptr_tocken = strtok(ptr_tocken,",");
   13650:	4a42      	ldr	r2, [pc, #264]	; (1375c <gsm_responseLine_isCSQN+0x158>)
   13652:	68fb      	ldr	r3, [r7, #12]
   13654:	0011      	movs	r1, r2
   13656:	0018      	movs	r0, r3
   13658:	4b3f      	ldr	r3, [pc, #252]	; (13758 <gsm_responseLine_isCSQN+0x154>)
   1365a:	4798      	blx	r3
   1365c:	0003      	movs	r3, r0
   1365e:	60fb      	str	r3, [r7, #12]
			RemoveSpaces(ptr_tocken);
   13660:	68fb      	ldr	r3, [r7, #12]
   13662:	0018      	movs	r0, r3
   13664:	4b3e      	ldr	r3, [pc, #248]	; (13760 <gsm_responseLine_isCSQN+0x15c>)
   13666:	4798      	blx	r3
			uint8_t nw = atoi(ptr_tocken);
   13668:	68fb      	ldr	r3, [r7, #12]
   1366a:	0018      	movs	r0, r3
   1366c:	4b3d      	ldr	r3, [pc, #244]	; (13764 <gsm_responseLine_isCSQN+0x160>)
   1366e:	4798      	blx	r3
   13670:	0002      	movs	r2, r0
   13672:	230b      	movs	r3, #11
   13674:	18fb      	adds	r3, r7, r3
   13676:	701a      	strb	r2, [r3, #0]
			if (nw==0 || nw==1 || nw== 99)
   13678:	230b      	movs	r3, #11
   1367a:	18fb      	adds	r3, r7, r3
   1367c:	781b      	ldrb	r3, [r3, #0]
   1367e:	2b00      	cmp	r3, #0
   13680:	d009      	beq.n	13696 <gsm_responseLine_isCSQN+0x92>
   13682:	230b      	movs	r3, #11
   13684:	18fb      	adds	r3, r7, r3
   13686:	781b      	ldrb	r3, [r3, #0]
   13688:	2b01      	cmp	r3, #1
   1368a:	d004      	beq.n	13696 <gsm_responseLine_isCSQN+0x92>
   1368c:	230b      	movs	r3, #11
   1368e:	18fb      	adds	r3, r7, r3
   13690:	781b      	ldrb	r3, [r3, #0]
   13692:	2b63      	cmp	r3, #99	; 0x63
   13694:	d103      	bne.n	1369e <gsm_responseLine_isCSQN+0x9a>
			{
				*signal= 0;
   13696:	683b      	ldr	r3, [r7, #0]
   13698:	2200      	movs	r2, #0
   1369a:	701a      	strb	r2, [r3, #0]
   1369c:	e04c      	b.n	13738 <gsm_responseLine_isCSQN+0x134>
			}
			else
			{
				if (nw>=2 && nw<=7)
   1369e:	230b      	movs	r3, #11
   136a0:	18fb      	adds	r3, r7, r3
   136a2:	781b      	ldrb	r3, [r3, #0]
   136a4:	2b01      	cmp	r3, #1
   136a6:	d908      	bls.n	136ba <gsm_responseLine_isCSQN+0xb6>
   136a8:	230b      	movs	r3, #11
   136aa:	18fb      	adds	r3, r7, r3
   136ac:	781b      	ldrb	r3, [r3, #0]
   136ae:	2b07      	cmp	r3, #7
   136b0:	d803      	bhi.n	136ba <gsm_responseLine_isCSQN+0xb6>
				{
					*signal= 1;
   136b2:	683b      	ldr	r3, [r7, #0]
   136b4:	2201      	movs	r2, #1
   136b6:	701a      	strb	r2, [r3, #0]
   136b8:	e03e      	b.n	13738 <gsm_responseLine_isCSQN+0x134>
				}
				else if (nw>=8 && nw<=13)
   136ba:	230b      	movs	r3, #11
   136bc:	18fb      	adds	r3, r7, r3
   136be:	781b      	ldrb	r3, [r3, #0]
   136c0:	2b07      	cmp	r3, #7
   136c2:	d908      	bls.n	136d6 <gsm_responseLine_isCSQN+0xd2>
   136c4:	230b      	movs	r3, #11
   136c6:	18fb      	adds	r3, r7, r3
   136c8:	781b      	ldrb	r3, [r3, #0]
   136ca:	2b0d      	cmp	r3, #13
   136cc:	d803      	bhi.n	136d6 <gsm_responseLine_isCSQN+0xd2>
				{
					*signal= 2;
   136ce:	683b      	ldr	r3, [r7, #0]
   136d0:	2202      	movs	r2, #2
   136d2:	701a      	strb	r2, [r3, #0]
   136d4:	e030      	b.n	13738 <gsm_responseLine_isCSQN+0x134>
				}
				else if (nw>=14 && nw<=19)
   136d6:	230b      	movs	r3, #11
   136d8:	18fb      	adds	r3, r7, r3
   136da:	781b      	ldrb	r3, [r3, #0]
   136dc:	2b0d      	cmp	r3, #13
   136de:	d908      	bls.n	136f2 <gsm_responseLine_isCSQN+0xee>
   136e0:	230b      	movs	r3, #11
   136e2:	18fb      	adds	r3, r7, r3
   136e4:	781b      	ldrb	r3, [r3, #0]
   136e6:	2b13      	cmp	r3, #19
   136e8:	d803      	bhi.n	136f2 <gsm_responseLine_isCSQN+0xee>
				{
					*signal= 3;
   136ea:	683b      	ldr	r3, [r7, #0]
   136ec:	2203      	movs	r2, #3
   136ee:	701a      	strb	r2, [r3, #0]
   136f0:	e022      	b.n	13738 <gsm_responseLine_isCSQN+0x134>
				}
				else if (nw>=20 && nw<=25)
   136f2:	230b      	movs	r3, #11
   136f4:	18fb      	adds	r3, r7, r3
   136f6:	781b      	ldrb	r3, [r3, #0]
   136f8:	2b13      	cmp	r3, #19
   136fa:	d908      	bls.n	1370e <gsm_responseLine_isCSQN+0x10a>
   136fc:	230b      	movs	r3, #11
   136fe:	18fb      	adds	r3, r7, r3
   13700:	781b      	ldrb	r3, [r3, #0]
   13702:	2b19      	cmp	r3, #25
   13704:	d803      	bhi.n	1370e <gsm_responseLine_isCSQN+0x10a>
				{
					*signal= 4;
   13706:	683b      	ldr	r3, [r7, #0]
   13708:	2204      	movs	r2, #4
   1370a:	701a      	strb	r2, [r3, #0]
   1370c:	e014      	b.n	13738 <gsm_responseLine_isCSQN+0x134>
				}
				else if (nw>=26 && nw<=31)
   1370e:	230b      	movs	r3, #11
   13710:	18fb      	adds	r3, r7, r3
   13712:	781b      	ldrb	r3, [r3, #0]
   13714:	2b19      	cmp	r3, #25
   13716:	d908      	bls.n	1372a <gsm_responseLine_isCSQN+0x126>
   13718:	230b      	movs	r3, #11
   1371a:	18fb      	adds	r3, r7, r3
   1371c:	781b      	ldrb	r3, [r3, #0]
   1371e:	2b1f      	cmp	r3, #31
   13720:	d803      	bhi.n	1372a <gsm_responseLine_isCSQN+0x126>
				{
					*signal= 5;
   13722:	683b      	ldr	r3, [r7, #0]
   13724:	2205      	movs	r2, #5
   13726:	701a      	strb	r2, [r3, #0]
   13728:	e006      	b.n	13738 <gsm_responseLine_isCSQN+0x134>
				}
				else
				{
					*signal= 0;
   1372a:	683b      	ldr	r3, [r7, #0]
   1372c:	2200      	movs	r2, #0
   1372e:	701a      	strb	r2, [r3, #0]
   13730:	e002      	b.n	13738 <gsm_responseLine_isCSQN+0x134>
				}
			}
		}
		else
		{
			*signal= 0;
   13732:	683b      	ldr	r3, [r7, #0]
   13734:	2200      	movs	r2, #0
   13736:	701a      	strb	r2, [r3, #0]
		}
		return true;
   13738:	2301      	movs	r3, #1
   1373a:	e000      	b.n	1373e <gsm_responseLine_isCSQN+0x13a>
	}
	
	return false;
   1373c:	2300      	movs	r3, #0
}
   1373e:	0018      	movs	r0, r3
   13740:	46bd      	mov	sp, r7
   13742:	b004      	add	sp, #16
   13744:	bd80      	pop	{r7, pc}
   13746:	46c0      	nop			; (mov r8, r8)
   13748:	000299b4 	.word	0x000299b4
   1374c:	00028ca3 	.word	0x00028ca3
   13750:	00029814 	.word	0x00029814
   13754:	000297b0 	.word	0x000297b0
   13758:	00028cd5 	.word	0x00028cd5
   1375c:	000297b4 	.word	0x000297b4
   13760:	00012ab5 	.word	0x00012ab5
   13764:	000288c9 	.word	0x000288c9

00013768 <gsm_responseLine_get_IncommingCallNo>:

bool gsm_responseLine_get_IncommingCallNo(char *response,char *phone_number)
{
   13768:	b580      	push	{r7, lr}
   1376a:	b084      	sub	sp, #16
   1376c:	af00      	add	r7, sp, #0
   1376e:	6078      	str	r0, [r7, #4]
   13770:	6039      	str	r1, [r7, #0]
	if(strstr(response,"+CLIP"))
   13772:	4a1e      	ldr	r2, [pc, #120]	; (137ec <gsm_responseLine_get_IncommingCallNo+0x84>)
   13774:	687b      	ldr	r3, [r7, #4]
   13776:	0011      	movs	r1, r2
   13778:	0018      	movs	r0, r3
   1377a:	4b1d      	ldr	r3, [pc, #116]	; (137f0 <gsm_responseLine_get_IncommingCallNo+0x88>)
   1377c:	4798      	blx	r3
   1377e:	1e03      	subs	r3, r0, #0
   13780:	d02e      	beq.n	137e0 <gsm_responseLine_get_IncommingCallNo+0x78>
	{
		char *ptr_tocken;
		ptr_tocken = strtok(response,":");
   13782:	4a1c      	ldr	r2, [pc, #112]	; (137f4 <gsm_responseLine_get_IncommingCallNo+0x8c>)
   13784:	687b      	ldr	r3, [r7, #4]
   13786:	0011      	movs	r1, r2
   13788:	0018      	movs	r0, r3
   1378a:	4b1b      	ldr	r3, [pc, #108]	; (137f8 <gsm_responseLine_get_IncommingCallNo+0x90>)
   1378c:	4798      	blx	r3
   1378e:	0003      	movs	r3, r0
   13790:	60fb      	str	r3, [r7, #12]
		ptr_tocken = strtok(NULL,",");
   13792:	4b1a      	ldr	r3, [pc, #104]	; (137fc <gsm_responseLine_get_IncommingCallNo+0x94>)
   13794:	0019      	movs	r1, r3
   13796:	2000      	movs	r0, #0
   13798:	4b17      	ldr	r3, [pc, #92]	; (137f8 <gsm_responseLine_get_IncommingCallNo+0x90>)
   1379a:	4798      	blx	r3
   1379c:	0003      	movs	r3, r0
   1379e:	60fb      	str	r3, [r7, #12]
		ptr_tocken = strtok(ptr_tocken,"\"");
   137a0:	4a17      	ldr	r2, [pc, #92]	; (13800 <gsm_responseLine_get_IncommingCallNo+0x98>)
   137a2:	68fb      	ldr	r3, [r7, #12]
   137a4:	0011      	movs	r1, r2
   137a6:	0018      	movs	r0, r3
   137a8:	4b13      	ldr	r3, [pc, #76]	; (137f8 <gsm_responseLine_get_IncommingCallNo+0x90>)
   137aa:	4798      	blx	r3
   137ac:	0003      	movs	r3, r0
   137ae:	60fb      	str	r3, [r7, #12]
		ptr_tocken = strtok(NULL,"\"");
   137b0:	4b13      	ldr	r3, [pc, #76]	; (13800 <gsm_responseLine_get_IncommingCallNo+0x98>)
   137b2:	0019      	movs	r1, r3
   137b4:	2000      	movs	r0, #0
   137b6:	4b10      	ldr	r3, [pc, #64]	; (137f8 <gsm_responseLine_get_IncommingCallNo+0x90>)
   137b8:	4798      	blx	r3
   137ba:	0003      	movs	r3, r0
   137bc:	60fb      	str	r3, [r7, #12]
		
		if (!strstr(ptr_tocken,"+"))
   137be:	68fb      	ldr	r3, [r7, #12]
   137c0:	212b      	movs	r1, #43	; 0x2b
   137c2:	0018      	movs	r0, r3
   137c4:	4b0f      	ldr	r3, [pc, #60]	; (13804 <gsm_responseLine_get_IncommingCallNo+0x9c>)
   137c6:	4798      	blx	r3
   137c8:	1e03      	subs	r3, r0, #0
   137ca:	d101      	bne.n	137d0 <gsm_responseLine_get_IncommingCallNo+0x68>
		{
			return false;
   137cc:	2300      	movs	r3, #0
   137ce:	e008      	b.n	137e2 <gsm_responseLine_get_IncommingCallNo+0x7a>
		}
		strcpy(phone_number, (char *)(ptr_tocken));
   137d0:	68fa      	ldr	r2, [r7, #12]
   137d2:	683b      	ldr	r3, [r7, #0]
   137d4:	0011      	movs	r1, r2
   137d6:	0018      	movs	r0, r3
   137d8:	4b0b      	ldr	r3, [pc, #44]	; (13808 <gsm_responseLine_get_IncommingCallNo+0xa0>)
   137da:	4798      	blx	r3
		return true;
   137dc:	2301      	movs	r3, #1
   137de:	e000      	b.n	137e2 <gsm_responseLine_get_IncommingCallNo+0x7a>
	}
	else
	{
		return false;
   137e0:	2300      	movs	r3, #0
	}
}
   137e2:	0018      	movs	r0, r3
   137e4:	46bd      	mov	sp, r7
   137e6:	b004      	add	sp, #16
   137e8:	bd80      	pop	{r7, pc}
   137ea:	46c0      	nop			; (mov r8, r8)
   137ec:	000299bc 	.word	0x000299bc
   137f0:	00028ca3 	.word	0x00028ca3
   137f4:	000297b0 	.word	0x000297b0
   137f8:	00028cd5 	.word	0x00028cd5
   137fc:	000297b4 	.word	0x000297b4
   13800:	00029998 	.word	0x00029998
   13804:	00028c47 	.word	0x00028c47
   13808:	00028c63 	.word	0x00028c63

0001380c <gsm_responseLine_isCallCut>:

bool gsm_responseLine_isCallCut(char *response)
{
   1380c:	b580      	push	{r7, lr}
   1380e:	b082      	sub	sp, #8
   13810:	af00      	add	r7, sp, #0
   13812:	6078      	str	r0, [r7, #4]
	if (strstr(response,"NO CARRIER"))
   13814:	4a16      	ldr	r2, [pc, #88]	; (13870 <gsm_responseLine_isCallCut+0x64>)
   13816:	687b      	ldr	r3, [r7, #4]
   13818:	0011      	movs	r1, r2
   1381a:	0018      	movs	r0, r3
   1381c:	4b15      	ldr	r3, [pc, #84]	; (13874 <gsm_responseLine_isCallCut+0x68>)
   1381e:	4798      	blx	r3
   13820:	1e03      	subs	r3, r0, #0
   13822:	d001      	beq.n	13828 <gsm_responseLine_isCallCut+0x1c>
	{
		return true;
   13824:	2301      	movs	r3, #1
   13826:	e01e      	b.n	13866 <gsm_responseLine_isCallCut+0x5a>
	}
	else if (strstr(response,"BUSY"))
   13828:	4a13      	ldr	r2, [pc, #76]	; (13878 <gsm_responseLine_isCallCut+0x6c>)
   1382a:	687b      	ldr	r3, [r7, #4]
   1382c:	0011      	movs	r1, r2
   1382e:	0018      	movs	r0, r3
   13830:	4b10      	ldr	r3, [pc, #64]	; (13874 <gsm_responseLine_isCallCut+0x68>)
   13832:	4798      	blx	r3
   13834:	1e03      	subs	r3, r0, #0
   13836:	d001      	beq.n	1383c <gsm_responseLine_isCallCut+0x30>
	{
		return true;
   13838:	2301      	movs	r3, #1
   1383a:	e014      	b.n	13866 <gsm_responseLine_isCallCut+0x5a>
	}
	else if (strstr(response,"NO ANSWER"))
   1383c:	4a0f      	ldr	r2, [pc, #60]	; (1387c <gsm_responseLine_isCallCut+0x70>)
   1383e:	687b      	ldr	r3, [r7, #4]
   13840:	0011      	movs	r1, r2
   13842:	0018      	movs	r0, r3
   13844:	4b0b      	ldr	r3, [pc, #44]	; (13874 <gsm_responseLine_isCallCut+0x68>)
   13846:	4798      	blx	r3
   13848:	1e03      	subs	r3, r0, #0
   1384a:	d001      	beq.n	13850 <gsm_responseLine_isCallCut+0x44>
	{
		return true;
   1384c:	2301      	movs	r3, #1
   1384e:	e00a      	b.n	13866 <gsm_responseLine_isCallCut+0x5a>
	}
	else if (strstr(response,"ERROR"))
   13850:	4a0b      	ldr	r2, [pc, #44]	; (13880 <gsm_responseLine_isCallCut+0x74>)
   13852:	687b      	ldr	r3, [r7, #4]
   13854:	0011      	movs	r1, r2
   13856:	0018      	movs	r0, r3
   13858:	4b06      	ldr	r3, [pc, #24]	; (13874 <gsm_responseLine_isCallCut+0x68>)
   1385a:	4798      	blx	r3
   1385c:	1e03      	subs	r3, r0, #0
   1385e:	d001      	beq.n	13864 <gsm_responseLine_isCallCut+0x58>
	{
		return true;
   13860:	2301      	movs	r3, #1
   13862:	e000      	b.n	13866 <gsm_responseLine_isCallCut+0x5a>
	}

	return false;
   13864:	2300      	movs	r3, #0
}
   13866:	0018      	movs	r0, r3
   13868:	46bd      	mov	sp, r7
   1386a:	b002      	add	sp, #8
   1386c:	bd80      	pop	{r7, pc}
   1386e:	46c0      	nop			; (mov r8, r8)
   13870:	000299c4 	.word	0x000299c4
   13874:	00028ca3 	.word	0x00028ca3
   13878:	000299d0 	.word	0x000299d0
   1387c:	000299d8 	.word	0x000299d8
   13880:	00029690 	.word	0x00029690

00013884 <gsm_responseLine_isNew_DTMF_Command_Received>:

bool gsm_responseLine_isNew_DTMF_Command_Received(char *response)
{
   13884:	b580      	push	{r7, lr}
   13886:	b082      	sub	sp, #8
   13888:	af00      	add	r7, sp, #0
   1388a:	6078      	str	r0, [r7, #4]
	if (strstr(response,"+DTMF:"))
   1388c:	4a07      	ldr	r2, [pc, #28]	; (138ac <gsm_responseLine_isNew_DTMF_Command_Received+0x28>)
   1388e:	687b      	ldr	r3, [r7, #4]
   13890:	0011      	movs	r1, r2
   13892:	0018      	movs	r0, r3
   13894:	4b06      	ldr	r3, [pc, #24]	; (138b0 <gsm_responseLine_isNew_DTMF_Command_Received+0x2c>)
   13896:	4798      	blx	r3
   13898:	1e03      	subs	r3, r0, #0
   1389a:	d001      	beq.n	138a0 <gsm_responseLine_isNew_DTMF_Command_Received+0x1c>
	{
		return true;
   1389c:	2301      	movs	r3, #1
   1389e:	e000      	b.n	138a2 <gsm_responseLine_isNew_DTMF_Command_Received+0x1e>
	}
	else
	{
		return false;
   138a0:	2300      	movs	r3, #0
	}
}
   138a2:	0018      	movs	r0, r3
   138a4:	46bd      	mov	sp, r7
   138a6:	b002      	add	sp, #8
   138a8:	bd80      	pop	{r7, pc}
   138aa:	46c0      	nop			; (mov r8, r8)
   138ac:	000299e4 	.word	0x000299e4
   138b0:	00028ca3 	.word	0x00028ca3

000138b4 <gsm_responseLine_is_StopSound_Received>:

bool gsm_responseLine_is_StopSound_Received(char *response)
{
   138b4:	b580      	push	{r7, lr}
   138b6:	b082      	sub	sp, #8
   138b8:	af00      	add	r7, sp, #0
   138ba:	6078      	str	r0, [r7, #4]
	if (strstr(response,"+CREC: 0"))
   138bc:	4a07      	ldr	r2, [pc, #28]	; (138dc <gsm_responseLine_is_StopSound_Received+0x28>)
   138be:	687b      	ldr	r3, [r7, #4]
   138c0:	0011      	movs	r1, r2
   138c2:	0018      	movs	r0, r3
   138c4:	4b06      	ldr	r3, [pc, #24]	; (138e0 <gsm_responseLine_is_StopSound_Received+0x2c>)
   138c6:	4798      	blx	r3
   138c8:	1e03      	subs	r3, r0, #0
   138ca:	d001      	beq.n	138d0 <gsm_responseLine_is_StopSound_Received+0x1c>
	{
		return true;
   138cc:	2301      	movs	r3, #1
   138ce:	e000      	b.n	138d2 <gsm_responseLine_is_StopSound_Received+0x1e>
	}
	else
	{
		return false;
   138d0:	2300      	movs	r3, #0
	}
}
   138d2:	0018      	movs	r0, r3
   138d4:	46bd      	mov	sp, r7
   138d6:	b002      	add	sp, #8
   138d8:	bd80      	pop	{r7, pc}
   138da:	46c0      	nop			; (mov r8, r8)
   138dc:	000299ec 	.word	0x000299ec
   138e0:	00028ca3 	.word	0x00028ca3

000138e4 <system_pinmux_get_group_from_gpio_pin>:
{
   138e4:	b580      	push	{r7, lr}
   138e6:	b084      	sub	sp, #16
   138e8:	af00      	add	r7, sp, #0
   138ea:	0002      	movs	r2, r0
   138ec:	1dfb      	adds	r3, r7, #7
   138ee:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   138f0:	230f      	movs	r3, #15
   138f2:	18fb      	adds	r3, r7, r3
   138f4:	1dfa      	adds	r2, r7, #7
   138f6:	7812      	ldrb	r2, [r2, #0]
   138f8:	09d2      	lsrs	r2, r2, #7
   138fa:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   138fc:	230e      	movs	r3, #14
   138fe:	18fb      	adds	r3, r7, r3
   13900:	1dfa      	adds	r2, r7, #7
   13902:	7812      	ldrb	r2, [r2, #0]
   13904:	0952      	lsrs	r2, r2, #5
   13906:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   13908:	4b0d      	ldr	r3, [pc, #52]	; (13940 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   1390a:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   1390c:	230f      	movs	r3, #15
   1390e:	18fb      	adds	r3, r7, r3
   13910:	781b      	ldrb	r3, [r3, #0]
   13912:	2b00      	cmp	r3, #0
   13914:	d10f      	bne.n	13936 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   13916:	230f      	movs	r3, #15
   13918:	18fb      	adds	r3, r7, r3
   1391a:	781b      	ldrb	r3, [r3, #0]
   1391c:	009b      	lsls	r3, r3, #2
   1391e:	2210      	movs	r2, #16
   13920:	4694      	mov	ip, r2
   13922:	44bc      	add	ip, r7
   13924:	4463      	add	r3, ip
   13926:	3b08      	subs	r3, #8
   13928:	681a      	ldr	r2, [r3, #0]
   1392a:	230e      	movs	r3, #14
   1392c:	18fb      	adds	r3, r7, r3
   1392e:	781b      	ldrb	r3, [r3, #0]
   13930:	01db      	lsls	r3, r3, #7
   13932:	18d3      	adds	r3, r2, r3
   13934:	e000      	b.n	13938 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   13936:	2300      	movs	r3, #0
}
   13938:	0018      	movs	r0, r3
   1393a:	46bd      	mov	sp, r7
   1393c:	b004      	add	sp, #16
   1393e:	bd80      	pop	{r7, pc}
   13940:	41004400 	.word	0x41004400

00013944 <port_get_group_from_gpio_pin>:
{
   13944:	b580      	push	{r7, lr}
   13946:	b082      	sub	sp, #8
   13948:	af00      	add	r7, sp, #0
   1394a:	0002      	movs	r2, r0
   1394c:	1dfb      	adds	r3, r7, #7
   1394e:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   13950:	1dfb      	adds	r3, r7, #7
   13952:	781b      	ldrb	r3, [r3, #0]
   13954:	0018      	movs	r0, r3
   13956:	4b03      	ldr	r3, [pc, #12]	; (13964 <port_get_group_from_gpio_pin+0x20>)
   13958:	4798      	blx	r3
   1395a:	0003      	movs	r3, r0
}
   1395c:	0018      	movs	r0, r3
   1395e:	46bd      	mov	sp, r7
   13960:	b002      	add	sp, #8
   13962:	bd80      	pop	{r7, pc}
   13964:	000138e5 	.word	0x000138e5

00013968 <port_get_config_defaults>:
{
   13968:	b580      	push	{r7, lr}
   1396a:	b082      	sub	sp, #8
   1396c:	af00      	add	r7, sp, #0
   1396e:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
   13970:	687b      	ldr	r3, [r7, #4]
   13972:	2200      	movs	r2, #0
   13974:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   13976:	687b      	ldr	r3, [r7, #4]
   13978:	2201      	movs	r2, #1
   1397a:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
   1397c:	687b      	ldr	r3, [r7, #4]
   1397e:	2200      	movs	r2, #0
   13980:	709a      	strb	r2, [r3, #2]
}
   13982:	46c0      	nop			; (mov r8, r8)
   13984:	46bd      	mov	sp, r7
   13986:	b002      	add	sp, #8
   13988:	bd80      	pop	{r7, pc}
	...

0001398c <port_pin_set_output_level>:
{
   1398c:	b580      	push	{r7, lr}
   1398e:	b084      	sub	sp, #16
   13990:	af00      	add	r7, sp, #0
   13992:	0002      	movs	r2, r0
   13994:	1dfb      	adds	r3, r7, #7
   13996:	701a      	strb	r2, [r3, #0]
   13998:	1dbb      	adds	r3, r7, #6
   1399a:	1c0a      	adds	r2, r1, #0
   1399c:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   1399e:	1dfb      	adds	r3, r7, #7
   139a0:	781b      	ldrb	r3, [r3, #0]
   139a2:	0018      	movs	r0, r3
   139a4:	4b0d      	ldr	r3, [pc, #52]	; (139dc <port_pin_set_output_level+0x50>)
   139a6:	4798      	blx	r3
   139a8:	0003      	movs	r3, r0
   139aa:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   139ac:	1dfb      	adds	r3, r7, #7
   139ae:	781b      	ldrb	r3, [r3, #0]
   139b0:	221f      	movs	r2, #31
   139b2:	4013      	ands	r3, r2
   139b4:	2201      	movs	r2, #1
   139b6:	409a      	lsls	r2, r3
   139b8:	0013      	movs	r3, r2
   139ba:	60bb      	str	r3, [r7, #8]
	if (level) {
   139bc:	1dbb      	adds	r3, r7, #6
   139be:	781b      	ldrb	r3, [r3, #0]
   139c0:	2b00      	cmp	r3, #0
   139c2:	d003      	beq.n	139cc <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   139c4:	68fb      	ldr	r3, [r7, #12]
   139c6:	68ba      	ldr	r2, [r7, #8]
   139c8:	619a      	str	r2, [r3, #24]
}
   139ca:	e002      	b.n	139d2 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   139cc:	68fb      	ldr	r3, [r7, #12]
   139ce:	68ba      	ldr	r2, [r7, #8]
   139d0:	615a      	str	r2, [r3, #20]
}
   139d2:	46c0      	nop			; (mov r8, r8)
   139d4:	46bd      	mov	sp, r7
   139d6:	b004      	add	sp, #16
   139d8:	bd80      	pop	{r7, pc}
   139da:	46c0      	nop			; (mov r8, r8)
   139dc:	00013945 	.word	0x00013945

000139e0 <LCD_init>:
#include <asf.h>
#include "lcd_driver.h"


void LCD_init()
{
   139e0:	b5f0      	push	{r4, r5, r6, r7, lr}
   139e2:	b08b      	sub	sp, #44	; 0x2c
   139e4:	af00      	add	r7, sp, #0
	uint8_t cols = LCD_COLS;
   139e6:	230b      	movs	r3, #11
   139e8:	2218      	movs	r2, #24
   139ea:	4694      	mov	ip, r2
   139ec:	44bc      	add	ip, r7
   139ee:	4463      	add	r3, ip
   139f0:	2210      	movs	r2, #16
   139f2:	701a      	strb	r2, [r3, #0]
	uint8_t lines = LCD_ROWS;
   139f4:	230a      	movs	r3, #10
   139f6:	2218      	movs	r2, #24
   139f8:	4694      	mov	ip, r2
   139fa:	44bc      	add	ip, r7
   139fc:	4463      	add	r3, ip
   139fe:	2202      	movs	r2, #2
   13a00:	701a      	strb	r2, [r3, #0]
	delay_init();
   13a02:	4b90      	ldr	r3, [pc, #576]	; (13c44 <LCD_init+0x264>)
   13a04:	4798      	blx	r3
	_rs_pin     = LCD_RS_PIN;
   13a06:	4b90      	ldr	r3, [pc, #576]	; (13c48 <LCD_init+0x268>)
   13a08:	223f      	movs	r2, #63	; 0x3f
   13a0a:	701a      	strb	r2, [r3, #0]
	_enable_pin = LCD_EN_PIN;
   13a0c:	4b8f      	ldr	r3, [pc, #572]	; (13c4c <LCD_init+0x26c>)
   13a0e:	223e      	movs	r2, #62	; 0x3e
   13a10:	701a      	strb	r2, [r3, #0]
	
	_data_pins[0] = LCD_DATA_LINE_D4_PIN;
   13a12:	4b8f      	ldr	r3, [pc, #572]	; (13c50 <LCD_init+0x270>)
   13a14:	2221      	movs	r2, #33	; 0x21
   13a16:	701a      	strb	r2, [r3, #0]
	_data_pins[1] = LCD_DATA_LINE_D5_PIN;
   13a18:	4b8d      	ldr	r3, [pc, #564]	; (13c50 <LCD_init+0x270>)
   13a1a:	2220      	movs	r2, #32
   13a1c:	705a      	strb	r2, [r3, #1]
	_data_pins[2] = LCD_DATA_LINE_D6_PIN;
   13a1e:	4b8c      	ldr	r3, [pc, #560]	; (13c50 <LCD_init+0x270>)
   13a20:	2223      	movs	r2, #35	; 0x23
   13a22:	709a      	strb	r2, [r3, #2]
	_data_pins[3] = LCD_DATA_LINE_D7_PIN;
   13a24:	4b8a      	ldr	r3, [pc, #552]	; (13c50 <LCD_init+0x270>)
   13a26:	2222      	movs	r2, #34	; 0x22
   13a28:	70da      	strb	r2, [r3, #3]

	_displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
   13a2a:	4b8a      	ldr	r3, [pc, #552]	; (13c54 <LCD_init+0x274>)
   13a2c:	2200      	movs	r2, #0
   13a2e:	701a      	strb	r2, [r3, #0]
	
	if (lines > 1)
   13a30:	230a      	movs	r3, #10
   13a32:	2218      	movs	r2, #24
   13a34:	4694      	mov	ip, r2
   13a36:	44bc      	add	ip, r7
   13a38:	4463      	add	r3, ip
   13a3a:	781b      	ldrb	r3, [r3, #0]
   13a3c:	2b01      	cmp	r3, #1
   13a3e:	d906      	bls.n	13a4e <LCD_init+0x6e>
	{
		_displayfunction |= LCD_2LINE;
   13a40:	4b84      	ldr	r3, [pc, #528]	; (13c54 <LCD_init+0x274>)
   13a42:	781b      	ldrb	r3, [r3, #0]
   13a44:	2208      	movs	r2, #8
   13a46:	4313      	orrs	r3, r2
   13a48:	b2da      	uxtb	r2, r3
   13a4a:	4b82      	ldr	r3, [pc, #520]	; (13c54 <LCD_init+0x274>)
   13a4c:	701a      	strb	r2, [r3, #0]
	}
	_numlines = lines;
   13a4e:	4b82      	ldr	r3, [pc, #520]	; (13c58 <LCD_init+0x278>)
   13a50:	220a      	movs	r2, #10
   13a52:	2118      	movs	r1, #24
   13a54:	468c      	mov	ip, r1
   13a56:	44bc      	add	ip, r7
   13a58:	4462      	add	r2, ip
   13a5a:	7812      	ldrb	r2, [r2, #0]
   13a5c:	701a      	strb	r2, [r3, #0]
	LCD_setRowOffsets(0x00, 0x40, 0x00 + cols, 0x40 + cols);
   13a5e:	230b      	movs	r3, #11
   13a60:	2218      	movs	r2, #24
   13a62:	4694      	mov	ip, r2
   13a64:	44bc      	add	ip, r7
   13a66:	4463      	add	r3, ip
   13a68:	781a      	ldrb	r2, [r3, #0]
   13a6a:	230b      	movs	r3, #11
   13a6c:	2118      	movs	r1, #24
   13a6e:	468c      	mov	ip, r1
   13a70:	44bc      	add	ip, r7
   13a72:	4463      	add	r3, ip
   13a74:	781b      	ldrb	r3, [r3, #0]
   13a76:	3340      	adds	r3, #64	; 0x40
   13a78:	2140      	movs	r1, #64	; 0x40
   13a7a:	2000      	movs	r0, #0
   13a7c:	4c77      	ldr	r4, [pc, #476]	; (13c5c <LCD_init+0x27c>)
   13a7e:	47a0      	blx	r4
	struct port_config config_port_pin;
	port_get_config_defaults(&config_port_pin);
   13a80:	231c      	movs	r3, #28
   13a82:	18fb      	adds	r3, r7, r3
   13a84:	0018      	movs	r0, r3
   13a86:	4b76      	ldr	r3, [pc, #472]	; (13c60 <LCD_init+0x280>)
   13a88:	4798      	blx	r3
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
   13a8a:	231c      	movs	r3, #28
   13a8c:	18fb      	adds	r3, r7, r3
   13a8e:	2201      	movs	r2, #1
   13a90:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(_rs_pin,&config_port_pin);
   13a92:	4b6d      	ldr	r3, [pc, #436]	; (13c48 <LCD_init+0x268>)
   13a94:	781b      	ldrb	r3, [r3, #0]
   13a96:	221c      	movs	r2, #28
   13a98:	18ba      	adds	r2, r7, r2
   13a9a:	0011      	movs	r1, r2
   13a9c:	0018      	movs	r0, r3
   13a9e:	4b71      	ldr	r3, [pc, #452]	; (13c64 <LCD_init+0x284>)
   13aa0:	4798      	blx	r3
	port_pin_set_config(_enable_pin,&config_port_pin);
   13aa2:	4b6a      	ldr	r3, [pc, #424]	; (13c4c <LCD_init+0x26c>)
   13aa4:	781b      	ldrb	r3, [r3, #0]
   13aa6:	221c      	movs	r2, #28
   13aa8:	18ba      	adds	r2, r7, r2
   13aaa:	0011      	movs	r1, r2
   13aac:	0018      	movs	r0, r3
   13aae:	4b6d      	ldr	r3, [pc, #436]	; (13c64 <LCD_init+0x284>)
   13ab0:	4798      	blx	r3
	//port_pin_set_config(LCD_BACKLIGHT,&config_port_pin);
	
	for (int i=0; i<4; ++i)
   13ab2:	2300      	movs	r3, #0
   13ab4:	627b      	str	r3, [r7, #36]	; 0x24
   13ab6:	e00c      	b.n	13ad2 <LCD_init+0xf2>
	{
		port_pin_set_config(_data_pins[i],&config_port_pin);
   13ab8:	4a65      	ldr	r2, [pc, #404]	; (13c50 <LCD_init+0x270>)
   13aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   13abc:	18d3      	adds	r3, r2, r3
   13abe:	781b      	ldrb	r3, [r3, #0]
   13ac0:	221c      	movs	r2, #28
   13ac2:	18ba      	adds	r2, r7, r2
   13ac4:	0011      	movs	r1, r2
   13ac6:	0018      	movs	r0, r3
   13ac8:	4b66      	ldr	r3, [pc, #408]	; (13c64 <LCD_init+0x284>)
   13aca:	4798      	blx	r3
	for (int i=0; i<4; ++i)
   13acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   13ace:	3301      	adds	r3, #1
   13ad0:	627b      	str	r3, [r7, #36]	; 0x24
   13ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   13ad4:	2b03      	cmp	r3, #3
   13ad6:	ddef      	ble.n	13ab8 <LCD_init+0xd8>
	}
	delay_us(50000);
   13ad8:	2000      	movs	r0, #0
   13ada:	4b63      	ldr	r3, [pc, #396]	; (13c68 <LCD_init+0x288>)
   13adc:	4798      	blx	r3
   13ade:	0003      	movs	r3, r0
   13ae0:	613b      	str	r3, [r7, #16]
   13ae2:	2300      	movs	r3, #0
   13ae4:	617b      	str	r3, [r7, #20]
   13ae6:	4c61      	ldr	r4, [pc, #388]	; (13c6c <LCD_init+0x28c>)
   13ae8:	4a61      	ldr	r2, [pc, #388]	; (13c70 <LCD_init+0x290>)
   13aea:	2300      	movs	r3, #0
   13aec:	6938      	ldr	r0, [r7, #16]
   13aee:	6979      	ldr	r1, [r7, #20]
   13af0:	47a0      	blx	r4
   13af2:	0003      	movs	r3, r0
   13af4:	000c      	movs	r4, r1
   13af6:	0019      	movs	r1, r3
   13af8:	0022      	movs	r2, r4
   13afa:	4b5e      	ldr	r3, [pc, #376]	; (13c74 <LCD_init+0x294>)
   13afc:	2400      	movs	r4, #0
   13afe:	18c9      	adds	r1, r1, r3
   13b00:	4162      	adcs	r2, r4
   13b02:	0008      	movs	r0, r1
   13b04:	0011      	movs	r1, r2
   13b06:	4c5c      	ldr	r4, [pc, #368]	; (13c78 <LCD_init+0x298>)
   13b08:	4a5c      	ldr	r2, [pc, #368]	; (13c7c <LCD_init+0x29c>)
   13b0a:	2300      	movs	r3, #0
   13b0c:	47a0      	blx	r4
   13b0e:	0003      	movs	r3, r0
   13b10:	000c      	movs	r4, r1
   13b12:	0018      	movs	r0, r3
   13b14:	4b5a      	ldr	r3, [pc, #360]	; (13c80 <LCD_init+0x2a0>)
   13b16:	4798      	blx	r3
	port_pin_set_output_level(_rs_pin,LOW);
   13b18:	4b4b      	ldr	r3, [pc, #300]	; (13c48 <LCD_init+0x268>)
   13b1a:	781b      	ldrb	r3, [r3, #0]
   13b1c:	2100      	movs	r1, #0
   13b1e:	0018      	movs	r0, r3
   13b20:	4b58      	ldr	r3, [pc, #352]	; (13c84 <LCD_init+0x2a4>)
   13b22:	4798      	blx	r3
	port_pin_set_output_level(_enable_pin,LOW);
   13b24:	4b49      	ldr	r3, [pc, #292]	; (13c4c <LCD_init+0x26c>)
   13b26:	781b      	ldrb	r3, [r3, #0]
   13b28:	2100      	movs	r1, #0
   13b2a:	0018      	movs	r0, r3
   13b2c:	4b55      	ldr	r3, [pc, #340]	; (13c84 <LCD_init+0x2a4>)
   13b2e:	4798      	blx	r3
	//port_pin_set_output_level(LCD_BACKLIGHT,LOW);
	
	 write4bits(0x03);
   13b30:	2003      	movs	r0, #3
   13b32:	4b55      	ldr	r3, [pc, #340]	; (13c88 <LCD_init+0x2a8>)
   13b34:	4798      	blx	r3
	 delay_us(4500); 
   13b36:	2000      	movs	r0, #0
   13b38:	4b4b      	ldr	r3, [pc, #300]	; (13c68 <LCD_init+0x288>)
   13b3a:	4798      	blx	r3
   13b3c:	0003      	movs	r3, r0
   13b3e:	60bb      	str	r3, [r7, #8]
   13b40:	2300      	movs	r3, #0
   13b42:	60fb      	str	r3, [r7, #12]
   13b44:	4c49      	ldr	r4, [pc, #292]	; (13c6c <LCD_init+0x28c>)
   13b46:	4a51      	ldr	r2, [pc, #324]	; (13c8c <LCD_init+0x2ac>)
   13b48:	2300      	movs	r3, #0
   13b4a:	68b8      	ldr	r0, [r7, #8]
   13b4c:	68f9      	ldr	r1, [r7, #12]
   13b4e:	47a0      	blx	r4
   13b50:	0003      	movs	r3, r0
   13b52:	000c      	movs	r4, r1
   13b54:	0019      	movs	r1, r3
   13b56:	0022      	movs	r2, r4
   13b58:	4b46      	ldr	r3, [pc, #280]	; (13c74 <LCD_init+0x294>)
   13b5a:	2400      	movs	r4, #0
   13b5c:	18c9      	adds	r1, r1, r3
   13b5e:	4162      	adcs	r2, r4
   13b60:	0008      	movs	r0, r1
   13b62:	0011      	movs	r1, r2
   13b64:	4c44      	ldr	r4, [pc, #272]	; (13c78 <LCD_init+0x298>)
   13b66:	4a45      	ldr	r2, [pc, #276]	; (13c7c <LCD_init+0x29c>)
   13b68:	2300      	movs	r3, #0
   13b6a:	47a0      	blx	r4
   13b6c:	0003      	movs	r3, r0
   13b6e:	000c      	movs	r4, r1
   13b70:	0018      	movs	r0, r3
   13b72:	4b43      	ldr	r3, [pc, #268]	; (13c80 <LCD_init+0x2a0>)
   13b74:	4798      	blx	r3
	 
	 write4bits(0x03);
   13b76:	2003      	movs	r0, #3
   13b78:	4b43      	ldr	r3, [pc, #268]	; (13c88 <LCD_init+0x2a8>)
   13b7a:	4798      	blx	r3
	 delay_us(4500); 
   13b7c:	2000      	movs	r0, #0
   13b7e:	4b3a      	ldr	r3, [pc, #232]	; (13c68 <LCD_init+0x288>)
   13b80:	4798      	blx	r3
   13b82:	0003      	movs	r3, r0
   13b84:	603b      	str	r3, [r7, #0]
   13b86:	2300      	movs	r3, #0
   13b88:	607b      	str	r3, [r7, #4]
   13b8a:	4c38      	ldr	r4, [pc, #224]	; (13c6c <LCD_init+0x28c>)
   13b8c:	4a3f      	ldr	r2, [pc, #252]	; (13c8c <LCD_init+0x2ac>)
   13b8e:	2300      	movs	r3, #0
   13b90:	6838      	ldr	r0, [r7, #0]
   13b92:	6879      	ldr	r1, [r7, #4]
   13b94:	47a0      	blx	r4
   13b96:	0003      	movs	r3, r0
   13b98:	000c      	movs	r4, r1
   13b9a:	0019      	movs	r1, r3
   13b9c:	0022      	movs	r2, r4
   13b9e:	4b35      	ldr	r3, [pc, #212]	; (13c74 <LCD_init+0x294>)
   13ba0:	2400      	movs	r4, #0
   13ba2:	18c9      	adds	r1, r1, r3
   13ba4:	4162      	adcs	r2, r4
   13ba6:	0008      	movs	r0, r1
   13ba8:	0011      	movs	r1, r2
   13baa:	4c33      	ldr	r4, [pc, #204]	; (13c78 <LCD_init+0x298>)
   13bac:	4a33      	ldr	r2, [pc, #204]	; (13c7c <LCD_init+0x29c>)
   13bae:	2300      	movs	r3, #0
   13bb0:	47a0      	blx	r4
   13bb2:	0003      	movs	r3, r0
   13bb4:	000c      	movs	r4, r1
   13bb6:	0018      	movs	r0, r3
   13bb8:	4b31      	ldr	r3, [pc, #196]	; (13c80 <LCD_init+0x2a0>)
   13bba:	4798      	blx	r3
	
	 write4bits(0x03);
   13bbc:	2003      	movs	r0, #3
   13bbe:	4b32      	ldr	r3, [pc, #200]	; (13c88 <LCD_init+0x2a8>)
   13bc0:	4798      	blx	r3
	 delay_us(150);
   13bc2:	2000      	movs	r0, #0
   13bc4:	4b28      	ldr	r3, [pc, #160]	; (13c68 <LCD_init+0x288>)
   13bc6:	4798      	blx	r3
   13bc8:	0003      	movs	r3, r0
   13bca:	001d      	movs	r5, r3
   13bcc:	2300      	movs	r3, #0
   13bce:	001e      	movs	r6, r3
   13bd0:	4c26      	ldr	r4, [pc, #152]	; (13c6c <LCD_init+0x28c>)
   13bd2:	2296      	movs	r2, #150	; 0x96
   13bd4:	2300      	movs	r3, #0
   13bd6:	0028      	movs	r0, r5
   13bd8:	0031      	movs	r1, r6
   13bda:	47a0      	blx	r4
   13bdc:	0003      	movs	r3, r0
   13bde:	000c      	movs	r4, r1
   13be0:	0019      	movs	r1, r3
   13be2:	0022      	movs	r2, r4
   13be4:	4b23      	ldr	r3, [pc, #140]	; (13c74 <LCD_init+0x294>)
   13be6:	2400      	movs	r4, #0
   13be8:	18c9      	adds	r1, r1, r3
   13bea:	4162      	adcs	r2, r4
   13bec:	0008      	movs	r0, r1
   13bee:	0011      	movs	r1, r2
   13bf0:	4c21      	ldr	r4, [pc, #132]	; (13c78 <LCD_init+0x298>)
   13bf2:	4a22      	ldr	r2, [pc, #136]	; (13c7c <LCD_init+0x29c>)
   13bf4:	2300      	movs	r3, #0
   13bf6:	47a0      	blx	r4
   13bf8:	0003      	movs	r3, r0
   13bfa:	000c      	movs	r4, r1
   13bfc:	0018      	movs	r0, r3
   13bfe:	4b20      	ldr	r3, [pc, #128]	; (13c80 <LCD_init+0x2a0>)
   13c00:	4798      	blx	r3

	 write4bits(0x02);
   13c02:	2002      	movs	r0, #2
   13c04:	4b20      	ldr	r3, [pc, #128]	; (13c88 <LCD_init+0x2a8>)
   13c06:	4798      	blx	r3

	 command(LCD_FUNCTIONSET | _displayfunction);
   13c08:	4b12      	ldr	r3, [pc, #72]	; (13c54 <LCD_init+0x274>)
   13c0a:	781b      	ldrb	r3, [r3, #0]
   13c0c:	2220      	movs	r2, #32
   13c0e:	4313      	orrs	r3, r2
   13c10:	b2db      	uxtb	r3, r3
   13c12:	0018      	movs	r0, r3
   13c14:	4b1e      	ldr	r3, [pc, #120]	; (13c90 <LCD_init+0x2b0>)
   13c16:	4798      	blx	r3
	 
	_displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
   13c18:	4b1e      	ldr	r3, [pc, #120]	; (13c94 <LCD_init+0x2b4>)
   13c1a:	2204      	movs	r2, #4
   13c1c:	701a      	strb	r2, [r3, #0]
	LCD_display();
   13c1e:	4b1e      	ldr	r3, [pc, #120]	; (13c98 <LCD_init+0x2b8>)
   13c20:	4798      	blx	r3
	LCD_clear();
   13c22:	4b1e      	ldr	r3, [pc, #120]	; (13c9c <LCD_init+0x2bc>)
   13c24:	4798      	blx	r3
	_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
   13c26:	4b1e      	ldr	r3, [pc, #120]	; (13ca0 <LCD_init+0x2c0>)
   13c28:	2202      	movs	r2, #2
   13c2a:	701a      	strb	r2, [r3, #0]
	command(LCD_ENTRYMODESET | _displaymode);
   13c2c:	4b1c      	ldr	r3, [pc, #112]	; (13ca0 <LCD_init+0x2c0>)
   13c2e:	781b      	ldrb	r3, [r3, #0]
   13c30:	2204      	movs	r2, #4
   13c32:	4313      	orrs	r3, r2
   13c34:	b2db      	uxtb	r3, r3
   13c36:	0018      	movs	r0, r3
   13c38:	4b15      	ldr	r3, [pc, #84]	; (13c90 <LCD_init+0x2b0>)
   13c3a:	4798      	blx	r3
}
   13c3c:	46c0      	nop			; (mov r8, r8)
   13c3e:	46bd      	mov	sp, r7
   13c40:	b00b      	add	sp, #44	; 0x2c
   13c42:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13c44:	0002258d 	.word	0x0002258d
   13c48:	200006e0 	.word	0x200006e0
   13c4c:	200006df 	.word	0x200006df
   13c50:	200006d8 	.word	0x200006d8
   13c54:	200006dd 	.word	0x200006dd
   13c58:	200006d6 	.word	0x200006d6
   13c5c:	00013d51 	.word	0x00013d51
   13c60:	00013969 	.word	0x00013969
   13c64:	00022be1 	.word	0x00022be1
   13c68:	0002454d 	.word	0x0002454d
   13c6c:	00026515 	.word	0x00026515
   13c70:	0000c350 	.word	0x0000c350
   13c74:	006acfbf 	.word	0x006acfbf
   13c78:	000264d5 	.word	0x000264d5
   13c7c:	006acfc0 	.word	0x006acfc0
   13c80:	20000001 	.word	0x20000001
   13c84:	0001398d 	.word	0x0001398d
   13c88:	00013d8d 	.word	0x00013d8d
   13c8c:	00001194 	.word	0x00001194
   13c90:	00013ed1 	.word	0x00013ed1
   13c94:	200006d5 	.word	0x200006d5
   13c98:	000140b9 	.word	0x000140b9
   13c9c:	00013f71 	.word	0x00013f71
   13ca0:	200006dc 	.word	0x200006dc

00013ca4 <LCD_PWR_CONFIG>:

void LCD_PWR_CONFIG()
{
   13ca4:	b580      	push	{r7, lr}
   13ca6:	b082      	sub	sp, #8
   13ca8:	af00      	add	r7, sp, #0
	struct port_config pin_conf_gsm_status;
	port_get_config_defaults(&pin_conf_gsm_status);
   13caa:	1d3b      	adds	r3, r7, #4
   13cac:	0018      	movs	r0, r3
   13cae:	4b08      	ldr	r3, [pc, #32]	; (13cd0 <LCD_PWR_CONFIG+0x2c>)
   13cb0:	4798      	blx	r3
	pin_conf_gsm_status.direction  = PORT_PIN_DIR_OUTPUT;
   13cb2:	1d3b      	adds	r3, r7, #4
   13cb4:	2201      	movs	r2, #1
   13cb6:	701a      	strb	r2, [r3, #0]
	pin_conf_gsm_status.input_pull = PORT_PIN_PULL_NONE;
   13cb8:	1d3b      	adds	r3, r7, #4
   13cba:	2200      	movs	r2, #0
   13cbc:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(LCD_PWR_CNTRL, &pin_conf_gsm_status);
   13cbe:	1d3b      	adds	r3, r7, #4
   13cc0:	0019      	movs	r1, r3
   13cc2:	2024      	movs	r0, #36	; 0x24
   13cc4:	4b03      	ldr	r3, [pc, #12]	; (13cd4 <LCD_PWR_CONFIG+0x30>)
   13cc6:	4798      	blx	r3
}
   13cc8:	46c0      	nop			; (mov r8, r8)
   13cca:	46bd      	mov	sp, r7
   13ccc:	b002      	add	sp, #8
   13cce:	bd80      	pop	{r7, pc}
   13cd0:	00013969 	.word	0x00013969
   13cd4:	00022be1 	.word	0x00022be1

00013cd8 <LCD_PWR_EN>:

void LCD_PWR_EN()
{
   13cd8:	b580      	push	{r7, lr}
   13cda:	af00      	add	r7, sp, #0
	port_pin_set_output_level(LCD_PWR_CNTRL,HIGH);
   13cdc:	2101      	movs	r1, #1
   13cde:	2024      	movs	r0, #36	; 0x24
   13ce0:	4b02      	ldr	r3, [pc, #8]	; (13cec <LCD_PWR_EN+0x14>)
   13ce2:	4798      	blx	r3
}
   13ce4:	46c0      	nop			; (mov r8, r8)
   13ce6:	46bd      	mov	sp, r7
   13ce8:	bd80      	pop	{r7, pc}
   13cea:	46c0      	nop			; (mov r8, r8)
   13cec:	0001398d 	.word	0x0001398d

00013cf0 <LCD_PWR_DIS>:
void LCD_PWR_DIS()
{
   13cf0:	b580      	push	{r7, lr}
   13cf2:	b082      	sub	sp, #8
   13cf4:	af00      	add	r7, sp, #0
	port_pin_set_output_level(LCD_PWR_CNTRL,LOW);
   13cf6:	2100      	movs	r1, #0
   13cf8:	2024      	movs	r0, #36	; 0x24
   13cfa:	4b11      	ldr	r3, [pc, #68]	; (13d40 <LCD_PWR_DIS+0x50>)
   13cfc:	4798      	blx	r3
	
	for (int i = 0; i < 4; i++)
   13cfe:	2300      	movs	r3, #0
   13d00:	607b      	str	r3, [r7, #4]
   13d02:	e00a      	b.n	13d1a <LCD_PWR_DIS+0x2a>
	{
		port_pin_set_output_level(_data_pins[i],LOW);
   13d04:	4a0f      	ldr	r2, [pc, #60]	; (13d44 <LCD_PWR_DIS+0x54>)
   13d06:	687b      	ldr	r3, [r7, #4]
   13d08:	18d3      	adds	r3, r2, r3
   13d0a:	781b      	ldrb	r3, [r3, #0]
   13d0c:	2100      	movs	r1, #0
   13d0e:	0018      	movs	r0, r3
   13d10:	4b0b      	ldr	r3, [pc, #44]	; (13d40 <LCD_PWR_DIS+0x50>)
   13d12:	4798      	blx	r3
	for (int i = 0; i < 4; i++)
   13d14:	687b      	ldr	r3, [r7, #4]
   13d16:	3301      	adds	r3, #1
   13d18:	607b      	str	r3, [r7, #4]
   13d1a:	687b      	ldr	r3, [r7, #4]
   13d1c:	2b03      	cmp	r3, #3
   13d1e:	ddf1      	ble.n	13d04 <LCD_PWR_DIS+0x14>
	}
	
	port_pin_set_output_level(_enable_pin, LOW);
   13d20:	4b09      	ldr	r3, [pc, #36]	; (13d48 <LCD_PWR_DIS+0x58>)
   13d22:	781b      	ldrb	r3, [r3, #0]
   13d24:	2100      	movs	r1, #0
   13d26:	0018      	movs	r0, r3
   13d28:	4b05      	ldr	r3, [pc, #20]	; (13d40 <LCD_PWR_DIS+0x50>)
   13d2a:	4798      	blx	r3
	
	port_pin_set_output_level(_rs_pin, LOW);
   13d2c:	4b07      	ldr	r3, [pc, #28]	; (13d4c <LCD_PWR_DIS+0x5c>)
   13d2e:	781b      	ldrb	r3, [r3, #0]
   13d30:	2100      	movs	r1, #0
   13d32:	0018      	movs	r0, r3
   13d34:	4b02      	ldr	r3, [pc, #8]	; (13d40 <LCD_PWR_DIS+0x50>)
   13d36:	4798      	blx	r3
	
}
   13d38:	46c0      	nop			; (mov r8, r8)
   13d3a:	46bd      	mov	sp, r7
   13d3c:	b002      	add	sp, #8
   13d3e:	bd80      	pop	{r7, pc}
   13d40:	0001398d 	.word	0x0001398d
   13d44:	200006d8 	.word	0x200006d8
   13d48:	200006df 	.word	0x200006df
   13d4c:	200006e0 	.word	0x200006e0

00013d50 <LCD_setRowOffsets>:

void LCD_setRowOffsets(int row0, int row1, int row2, int row3)
{
   13d50:	b580      	push	{r7, lr}
   13d52:	b084      	sub	sp, #16
   13d54:	af00      	add	r7, sp, #0
   13d56:	60f8      	str	r0, [r7, #12]
   13d58:	60b9      	str	r1, [r7, #8]
   13d5a:	607a      	str	r2, [r7, #4]
   13d5c:	603b      	str	r3, [r7, #0]
	_row_offsets[0] = row0;
   13d5e:	68fb      	ldr	r3, [r7, #12]
   13d60:	b2da      	uxtb	r2, r3
   13d62:	4b09      	ldr	r3, [pc, #36]	; (13d88 <LCD_setRowOffsets+0x38>)
   13d64:	701a      	strb	r2, [r3, #0]
	_row_offsets[1] = row1;
   13d66:	68bb      	ldr	r3, [r7, #8]
   13d68:	b2da      	uxtb	r2, r3
   13d6a:	4b07      	ldr	r3, [pc, #28]	; (13d88 <LCD_setRowOffsets+0x38>)
   13d6c:	705a      	strb	r2, [r3, #1]
	_row_offsets[2] = row2;
   13d6e:	687b      	ldr	r3, [r7, #4]
   13d70:	b2da      	uxtb	r2, r3
   13d72:	4b05      	ldr	r3, [pc, #20]	; (13d88 <LCD_setRowOffsets+0x38>)
   13d74:	709a      	strb	r2, [r3, #2]
	_row_offsets[3] = row3;
   13d76:	683b      	ldr	r3, [r7, #0]
   13d78:	b2da      	uxtb	r2, r3
   13d7a:	4b03      	ldr	r3, [pc, #12]	; (13d88 <LCD_setRowOffsets+0x38>)
   13d7c:	70da      	strb	r2, [r3, #3]
}
   13d7e:	46c0      	nop			; (mov r8, r8)
   13d80:	46bd      	mov	sp, r7
   13d82:	b004      	add	sp, #16
   13d84:	bd80      	pop	{r7, pc}
   13d86:	46c0      	nop			; (mov r8, r8)
   13d88:	200006d0 	.word	0x200006d0

00013d8c <write4bits>:

void write4bits(uint8_t value)
{
   13d8c:	b580      	push	{r7, lr}
   13d8e:	b084      	sub	sp, #16
   13d90:	af00      	add	r7, sp, #0
   13d92:	0002      	movs	r2, r0
   13d94:	1dfb      	adds	r3, r7, #7
   13d96:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 4; i++) 
   13d98:	2300      	movs	r3, #0
   13d9a:	60fb      	str	r3, [r7, #12]
   13d9c:	e013      	b.n	13dc6 <write4bits+0x3a>
	{
		port_pin_set_output_level(_data_pins[i], (value >> i) & 0x01);
   13d9e:	4a0e      	ldr	r2, [pc, #56]	; (13dd8 <write4bits+0x4c>)
   13da0:	68fb      	ldr	r3, [r7, #12]
   13da2:	18d3      	adds	r3, r2, r3
   13da4:	7818      	ldrb	r0, [r3, #0]
   13da6:	1dfb      	adds	r3, r7, #7
   13da8:	781a      	ldrb	r2, [r3, #0]
   13daa:	68fb      	ldr	r3, [r7, #12]
   13dac:	411a      	asrs	r2, r3
   13dae:	0013      	movs	r3, r2
   13db0:	2201      	movs	r2, #1
   13db2:	4013      	ands	r3, r2
   13db4:	1e5a      	subs	r2, r3, #1
   13db6:	4193      	sbcs	r3, r2
   13db8:	b2db      	uxtb	r3, r3
   13dba:	0019      	movs	r1, r3
   13dbc:	4b07      	ldr	r3, [pc, #28]	; (13ddc <write4bits+0x50>)
   13dbe:	4798      	blx	r3
	for (int i = 0; i < 4; i++) 
   13dc0:	68fb      	ldr	r3, [r7, #12]
   13dc2:	3301      	adds	r3, #1
   13dc4:	60fb      	str	r3, [r7, #12]
   13dc6:	68fb      	ldr	r3, [r7, #12]
   13dc8:	2b03      	cmp	r3, #3
   13dca:	dde8      	ble.n	13d9e <write4bits+0x12>
	}
	pulseEnable();
   13dcc:	4b04      	ldr	r3, [pc, #16]	; (13de0 <write4bits+0x54>)
   13dce:	4798      	blx	r3
}
   13dd0:	46c0      	nop			; (mov r8, r8)
   13dd2:	46bd      	mov	sp, r7
   13dd4:	b004      	add	sp, #16
   13dd6:	bd80      	pop	{r7, pc}
   13dd8:	200006d8 	.word	0x200006d8
   13ddc:	0001398d 	.word	0x0001398d
   13de0:	00013de5 	.word	0x00013de5

00013de4 <pulseEnable>:



void pulseEnable(void)
{
   13de4:	b5f0      	push	{r4, r5, r6, r7, lr}
   13de6:	b085      	sub	sp, #20
   13de8:	af00      	add	r7, sp, #0
 	port_pin_set_output_level(_enable_pin, LOW);
   13dea:	4b31      	ldr	r3, [pc, #196]	; (13eb0 <pulseEnable+0xcc>)
   13dec:	781b      	ldrb	r3, [r3, #0]
   13dee:	2100      	movs	r1, #0
   13df0:	0018      	movs	r0, r3
   13df2:	4b30      	ldr	r3, [pc, #192]	; (13eb4 <pulseEnable+0xd0>)
   13df4:	4798      	blx	r3
 	delay_us(1);
   13df6:	2000      	movs	r0, #0
   13df8:	4b2f      	ldr	r3, [pc, #188]	; (13eb8 <pulseEnable+0xd4>)
   13dfa:	4798      	blx	r3
   13dfc:	0003      	movs	r3, r0
   13dfe:	60bb      	str	r3, [r7, #8]
   13e00:	2300      	movs	r3, #0
   13e02:	60fb      	str	r3, [r7, #12]
   13e04:	4b2d      	ldr	r3, [pc, #180]	; (13ebc <pulseEnable+0xd8>)
   13e06:	2400      	movs	r4, #0
   13e08:	68b8      	ldr	r0, [r7, #8]
   13e0a:	68f9      	ldr	r1, [r7, #12]
   13e0c:	18c0      	adds	r0, r0, r3
   13e0e:	4161      	adcs	r1, r4
   13e10:	4c2b      	ldr	r4, [pc, #172]	; (13ec0 <pulseEnable+0xdc>)
   13e12:	4a2c      	ldr	r2, [pc, #176]	; (13ec4 <pulseEnable+0xe0>)
   13e14:	2300      	movs	r3, #0
   13e16:	47a0      	blx	r4
   13e18:	0003      	movs	r3, r0
   13e1a:	000c      	movs	r4, r1
   13e1c:	0018      	movs	r0, r3
   13e1e:	4b2a      	ldr	r3, [pc, #168]	; (13ec8 <pulseEnable+0xe4>)
   13e20:	4798      	blx	r3
 	port_pin_set_output_level(_enable_pin, HIGH);
   13e22:	4b23      	ldr	r3, [pc, #140]	; (13eb0 <pulseEnable+0xcc>)
   13e24:	781b      	ldrb	r3, [r3, #0]
   13e26:	2101      	movs	r1, #1
   13e28:	0018      	movs	r0, r3
   13e2a:	4b22      	ldr	r3, [pc, #136]	; (13eb4 <pulseEnable+0xd0>)
   13e2c:	4798      	blx	r3
 	delay_us(1);
   13e2e:	2000      	movs	r0, #0
   13e30:	4b21      	ldr	r3, [pc, #132]	; (13eb8 <pulseEnable+0xd4>)
   13e32:	4798      	blx	r3
   13e34:	0003      	movs	r3, r0
   13e36:	001d      	movs	r5, r3
   13e38:	2300      	movs	r3, #0
   13e3a:	001e      	movs	r6, r3
   13e3c:	4b1f      	ldr	r3, [pc, #124]	; (13ebc <pulseEnable+0xd8>)
   13e3e:	2400      	movs	r4, #0
   13e40:	0028      	movs	r0, r5
   13e42:	0031      	movs	r1, r6
   13e44:	18c0      	adds	r0, r0, r3
   13e46:	4161      	adcs	r1, r4
   13e48:	4c1d      	ldr	r4, [pc, #116]	; (13ec0 <pulseEnable+0xdc>)
   13e4a:	4a1e      	ldr	r2, [pc, #120]	; (13ec4 <pulseEnable+0xe0>)
   13e4c:	2300      	movs	r3, #0
   13e4e:	47a0      	blx	r4
   13e50:	0003      	movs	r3, r0
   13e52:	000c      	movs	r4, r1
   13e54:	0018      	movs	r0, r3
   13e56:	4b1c      	ldr	r3, [pc, #112]	; (13ec8 <pulseEnable+0xe4>)
   13e58:	4798      	blx	r3
 	port_pin_set_output_level(_enable_pin, LOW);
   13e5a:	4b15      	ldr	r3, [pc, #84]	; (13eb0 <pulseEnable+0xcc>)
   13e5c:	781b      	ldrb	r3, [r3, #0]
   13e5e:	2100      	movs	r1, #0
   13e60:	0018      	movs	r0, r3
   13e62:	4b14      	ldr	r3, [pc, #80]	; (13eb4 <pulseEnable+0xd0>)
   13e64:	4798      	blx	r3
 	delay_us(100);
   13e66:	2000      	movs	r0, #0
   13e68:	4b13      	ldr	r3, [pc, #76]	; (13eb8 <pulseEnable+0xd4>)
   13e6a:	4798      	blx	r3
   13e6c:	0003      	movs	r3, r0
   13e6e:	603b      	str	r3, [r7, #0]
   13e70:	2300      	movs	r3, #0
   13e72:	607b      	str	r3, [r7, #4]
   13e74:	4c15      	ldr	r4, [pc, #84]	; (13ecc <pulseEnable+0xe8>)
   13e76:	2264      	movs	r2, #100	; 0x64
   13e78:	2300      	movs	r3, #0
   13e7a:	6838      	ldr	r0, [r7, #0]
   13e7c:	6879      	ldr	r1, [r7, #4]
   13e7e:	47a0      	blx	r4
   13e80:	0003      	movs	r3, r0
   13e82:	000c      	movs	r4, r1
   13e84:	0019      	movs	r1, r3
   13e86:	0022      	movs	r2, r4
   13e88:	4b0c      	ldr	r3, [pc, #48]	; (13ebc <pulseEnable+0xd8>)
   13e8a:	2400      	movs	r4, #0
   13e8c:	18c9      	adds	r1, r1, r3
   13e8e:	4162      	adcs	r2, r4
   13e90:	0008      	movs	r0, r1
   13e92:	0011      	movs	r1, r2
   13e94:	4c0a      	ldr	r4, [pc, #40]	; (13ec0 <pulseEnable+0xdc>)
   13e96:	4a0b      	ldr	r2, [pc, #44]	; (13ec4 <pulseEnable+0xe0>)
   13e98:	2300      	movs	r3, #0
   13e9a:	47a0      	blx	r4
   13e9c:	0003      	movs	r3, r0
   13e9e:	000c      	movs	r4, r1
   13ea0:	0018      	movs	r0, r3
   13ea2:	4b09      	ldr	r3, [pc, #36]	; (13ec8 <pulseEnable+0xe4>)
   13ea4:	4798      	blx	r3

	//port_pin_set_output_level(_enable_pin, HIGH);
	//delay_us(1);
	//port_pin_set_output_level(_enable_pin, LOW);
	//delay_us(500);
}
   13ea6:	46c0      	nop			; (mov r8, r8)
   13ea8:	46bd      	mov	sp, r7
   13eaa:	b005      	add	sp, #20
   13eac:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13eae:	46c0      	nop			; (mov r8, r8)
   13eb0:	200006df 	.word	0x200006df
   13eb4:	0001398d 	.word	0x0001398d
   13eb8:	0002454d 	.word	0x0002454d
   13ebc:	006acfbf 	.word	0x006acfbf
   13ec0:	000264d5 	.word	0x000264d5
   13ec4:	006acfc0 	.word	0x006acfc0
   13ec8:	20000001 	.word	0x20000001
   13ecc:	00026515 	.word	0x00026515

00013ed0 <command>:

inline void command(uint8_t value) 
{
   13ed0:	b580      	push	{r7, lr}
   13ed2:	b082      	sub	sp, #8
   13ed4:	af00      	add	r7, sp, #0
   13ed6:	0002      	movs	r2, r0
   13ed8:	1dfb      	adds	r3, r7, #7
   13eda:	701a      	strb	r2, [r3, #0]
	send(value, LOW);
   13edc:	1dfb      	adds	r3, r7, #7
   13ede:	781b      	ldrb	r3, [r3, #0]
   13ee0:	2100      	movs	r1, #0
   13ee2:	0018      	movs	r0, r3
   13ee4:	4b02      	ldr	r3, [pc, #8]	; (13ef0 <command+0x20>)
   13ee6:	4798      	blx	r3
}
   13ee8:	46c0      	nop			; (mov r8, r8)
   13eea:	46bd      	mov	sp, r7
   13eec:	b002      	add	sp, #8
   13eee:	bd80      	pop	{r7, pc}
   13ef0:	00013f1d 	.word	0x00013f1d

00013ef4 <LCD_write>:

inline size_t LCD_write(uint8_t value)
{
   13ef4:	b580      	push	{r7, lr}
   13ef6:	b082      	sub	sp, #8
   13ef8:	af00      	add	r7, sp, #0
   13efa:	0002      	movs	r2, r0
   13efc:	1dfb      	adds	r3, r7, #7
   13efe:	701a      	strb	r2, [r3, #0]
	send(value, HIGH);
   13f00:	1dfb      	adds	r3, r7, #7
   13f02:	781b      	ldrb	r3, [r3, #0]
   13f04:	2101      	movs	r1, #1
   13f06:	0018      	movs	r0, r3
   13f08:	4b03      	ldr	r3, [pc, #12]	; (13f18 <LCD_write+0x24>)
   13f0a:	4798      	blx	r3
	return 1;
   13f0c:	2301      	movs	r3, #1
}
   13f0e:	0018      	movs	r0, r3
   13f10:	46bd      	mov	sp, r7
   13f12:	b002      	add	sp, #8
   13f14:	bd80      	pop	{r7, pc}
   13f16:	46c0      	nop			; (mov r8, r8)
   13f18:	00013f1d 	.word	0x00013f1d

00013f1c <send>:

void send(uint8_t value, uint8_t mode) 
{
   13f1c:	b580      	push	{r7, lr}
   13f1e:	b082      	sub	sp, #8
   13f20:	af00      	add	r7, sp, #0
   13f22:	0002      	movs	r2, r0
   13f24:	1dfb      	adds	r3, r7, #7
   13f26:	701a      	strb	r2, [r3, #0]
   13f28:	1dbb      	adds	r3, r7, #6
   13f2a:	1c0a      	adds	r2, r1, #0
   13f2c:	701a      	strb	r2, [r3, #0]
	port_pin_set_output_level(_rs_pin, mode);
   13f2e:	4b0d      	ldr	r3, [pc, #52]	; (13f64 <send+0x48>)
   13f30:	781a      	ldrb	r2, [r3, #0]
   13f32:	1dbb      	adds	r3, r7, #6
   13f34:	781b      	ldrb	r3, [r3, #0]
   13f36:	1e59      	subs	r1, r3, #1
   13f38:	418b      	sbcs	r3, r1
   13f3a:	b2db      	uxtb	r3, r3
   13f3c:	0019      	movs	r1, r3
   13f3e:	0010      	movs	r0, r2
   13f40:	4b09      	ldr	r3, [pc, #36]	; (13f68 <send+0x4c>)
   13f42:	4798      	blx	r3
	
	{
		write4bits(value>>4);
   13f44:	1dfb      	adds	r3, r7, #7
   13f46:	781b      	ldrb	r3, [r3, #0]
   13f48:	091b      	lsrs	r3, r3, #4
   13f4a:	b2db      	uxtb	r3, r3
   13f4c:	0018      	movs	r0, r3
   13f4e:	4b07      	ldr	r3, [pc, #28]	; (13f6c <send+0x50>)
   13f50:	4798      	blx	r3
		write4bits(value);
   13f52:	1dfb      	adds	r3, r7, #7
   13f54:	781b      	ldrb	r3, [r3, #0]
   13f56:	0018      	movs	r0, r3
   13f58:	4b04      	ldr	r3, [pc, #16]	; (13f6c <send+0x50>)
   13f5a:	4798      	blx	r3
	}
}
   13f5c:	46c0      	nop			; (mov r8, r8)
   13f5e:	46bd      	mov	sp, r7
   13f60:	b002      	add	sp, #8
   13f62:	bd80      	pop	{r7, pc}
   13f64:	200006e0 	.word	0x200006e0
   13f68:	0001398d 	.word	0x0001398d
   13f6c:	00013d8d 	.word	0x00013d8d

00013f70 <LCD_clear>:

void LCD_clear(void)
{
   13f70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13f72:	af00      	add	r7, sp, #0
	command(LCD_CLEARDISPLAY);
   13f74:	2001      	movs	r0, #1
   13f76:	4b13      	ldr	r3, [pc, #76]	; (13fc4 <LCD_clear+0x54>)
   13f78:	4798      	blx	r3
	delay_us(2000);
   13f7a:	2000      	movs	r0, #0
   13f7c:	4b12      	ldr	r3, [pc, #72]	; (13fc8 <LCD_clear+0x58>)
   13f7e:	4798      	blx	r3
   13f80:	0003      	movs	r3, r0
   13f82:	001d      	movs	r5, r3
   13f84:	2300      	movs	r3, #0
   13f86:	001e      	movs	r6, r3
   13f88:	4c10      	ldr	r4, [pc, #64]	; (13fcc <LCD_clear+0x5c>)
   13f8a:	22fa      	movs	r2, #250	; 0xfa
   13f8c:	00d2      	lsls	r2, r2, #3
   13f8e:	2300      	movs	r3, #0
   13f90:	0028      	movs	r0, r5
   13f92:	0031      	movs	r1, r6
   13f94:	47a0      	blx	r4
   13f96:	0003      	movs	r3, r0
   13f98:	000c      	movs	r4, r1
   13f9a:	0019      	movs	r1, r3
   13f9c:	0022      	movs	r2, r4
   13f9e:	4b0c      	ldr	r3, [pc, #48]	; (13fd0 <LCD_clear+0x60>)
   13fa0:	2400      	movs	r4, #0
   13fa2:	18c9      	adds	r1, r1, r3
   13fa4:	4162      	adcs	r2, r4
   13fa6:	0008      	movs	r0, r1
   13fa8:	0011      	movs	r1, r2
   13faa:	4c0a      	ldr	r4, [pc, #40]	; (13fd4 <LCD_clear+0x64>)
   13fac:	4a0a      	ldr	r2, [pc, #40]	; (13fd8 <LCD_clear+0x68>)
   13fae:	2300      	movs	r3, #0
   13fb0:	47a0      	blx	r4
   13fb2:	0003      	movs	r3, r0
   13fb4:	000c      	movs	r4, r1
   13fb6:	0018      	movs	r0, r3
   13fb8:	4b08      	ldr	r3, [pc, #32]	; (13fdc <LCD_clear+0x6c>)
   13fba:	4798      	blx	r3
}
   13fbc:	46c0      	nop			; (mov r8, r8)
   13fbe:	46bd      	mov	sp, r7
   13fc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   13fc2:	46c0      	nop			; (mov r8, r8)
   13fc4:	00013ed1 	.word	0x00013ed1
   13fc8:	0002454d 	.word	0x0002454d
   13fcc:	00026515 	.word	0x00026515
   13fd0:	006acfbf 	.word	0x006acfbf
   13fd4:	000264d5 	.word	0x000264d5
   13fd8:	006acfc0 	.word	0x006acfc0
   13fdc:	20000001 	.word	0x20000001

00013fe0 <LCD_Create_Custom_createChar>:


void LCD_Create_Custom_createChar(uint8_t location, uint8_t charmap[]) 
{
   13fe0:	b580      	push	{r7, lr}
   13fe2:	b084      	sub	sp, #16
   13fe4:	af00      	add	r7, sp, #0
   13fe6:	0002      	movs	r2, r0
   13fe8:	6039      	str	r1, [r7, #0]
   13fea:	1dfb      	adds	r3, r7, #7
   13fec:	701a      	strb	r2, [r3, #0]
	location &= 0x7;
   13fee:	1dfb      	adds	r3, r7, #7
   13ff0:	1dfa      	adds	r2, r7, #7
   13ff2:	7812      	ldrb	r2, [r2, #0]
   13ff4:	2107      	movs	r1, #7
   13ff6:	400a      	ands	r2, r1
   13ff8:	701a      	strb	r2, [r3, #0]
	command(LCD_SETCGRAMADDR | (location << 3));
   13ffa:	1dfb      	adds	r3, r7, #7
   13ffc:	781b      	ldrb	r3, [r3, #0]
   13ffe:	00db      	lsls	r3, r3, #3
   14000:	b25b      	sxtb	r3, r3
   14002:	2240      	movs	r2, #64	; 0x40
   14004:	4313      	orrs	r3, r2
   14006:	b25b      	sxtb	r3, r3
   14008:	b2db      	uxtb	r3, r3
   1400a:	0018      	movs	r0, r3
   1400c:	4b0a      	ldr	r3, [pc, #40]	; (14038 <LCD_Create_Custom_createChar+0x58>)
   1400e:	4798      	blx	r3
	for (int i=0; i<8; i++)
   14010:	2300      	movs	r3, #0
   14012:	60fb      	str	r3, [r7, #12]
   14014:	e009      	b.n	1402a <LCD_Create_Custom_createChar+0x4a>
	{
		LCD_write(charmap[i]);
   14016:	68fb      	ldr	r3, [r7, #12]
   14018:	683a      	ldr	r2, [r7, #0]
   1401a:	18d3      	adds	r3, r2, r3
   1401c:	781b      	ldrb	r3, [r3, #0]
   1401e:	0018      	movs	r0, r3
   14020:	4b06      	ldr	r3, [pc, #24]	; (1403c <LCD_Create_Custom_createChar+0x5c>)
   14022:	4798      	blx	r3
	for (int i=0; i<8; i++)
   14024:	68fb      	ldr	r3, [r7, #12]
   14026:	3301      	adds	r3, #1
   14028:	60fb      	str	r3, [r7, #12]
   1402a:	68fb      	ldr	r3, [r7, #12]
   1402c:	2b07      	cmp	r3, #7
   1402e:	ddf2      	ble.n	14016 <LCD_Create_Custom_createChar+0x36>
	}
}
   14030:	46c0      	nop			; (mov r8, r8)
   14032:	46bd      	mov	sp, r7
   14034:	b004      	add	sp, #16
   14036:	bd80      	pop	{r7, pc}
   14038:	00013ed1 	.word	0x00013ed1
   1403c:	00013ef5 	.word	0x00013ef5

00014040 <LCD_setCursor>:
	command(LCD_RETURNHOME);
	delay_us(2000);
}

void LCD_setCursor(uint8_t col, uint8_t row)
{
   14040:	b580      	push	{r7, lr}
   14042:	b084      	sub	sp, #16
   14044:	af00      	add	r7, sp, #0
   14046:	0002      	movs	r2, r0
   14048:	1dfb      	adds	r3, r7, #7
   1404a:	701a      	strb	r2, [r3, #0]
   1404c:	1dbb      	adds	r3, r7, #6
   1404e:	1c0a      	adds	r2, r1, #0
   14050:	701a      	strb	r2, [r3, #0]
	const size_t max_lines = sizeof(_row_offsets) / sizeof(*_row_offsets);
   14052:	2304      	movs	r3, #4
   14054:	60fb      	str	r3, [r7, #12]
	if ( row >= max_lines ) 
   14056:	1dbb      	adds	r3, r7, #6
   14058:	781a      	ldrb	r2, [r3, #0]
   1405a:	68fb      	ldr	r3, [r7, #12]
   1405c:	429a      	cmp	r2, r3
   1405e:	d304      	bcc.n	1406a <LCD_setCursor+0x2a>
	{
		row = max_lines - 1; 
   14060:	68fb      	ldr	r3, [r7, #12]
   14062:	b2da      	uxtb	r2, r3
   14064:	1dbb      	adds	r3, r7, #6
   14066:	3a01      	subs	r2, #1
   14068:	701a      	strb	r2, [r3, #0]
	}
	if ( row >= _numlines )
   1406a:	4b10      	ldr	r3, [pc, #64]	; (140ac <LCD_setCursor+0x6c>)
   1406c:	781b      	ldrb	r3, [r3, #0]
   1406e:	1dba      	adds	r2, r7, #6
   14070:	7812      	ldrb	r2, [r2, #0]
   14072:	429a      	cmp	r2, r3
   14074:	d304      	bcc.n	14080 <LCD_setCursor+0x40>
	{
		row = _numlines - 1;
   14076:	4b0d      	ldr	r3, [pc, #52]	; (140ac <LCD_setCursor+0x6c>)
   14078:	781a      	ldrb	r2, [r3, #0]
   1407a:	1dbb      	adds	r3, r7, #6
   1407c:	3a01      	subs	r2, #1
   1407e:	701a      	strb	r2, [r3, #0]
	}
	command(LCD_SETDDRAMADDR | (col + _row_offsets[row]));
   14080:	1dbb      	adds	r3, r7, #6
   14082:	781b      	ldrb	r3, [r3, #0]
   14084:	4a0a      	ldr	r2, [pc, #40]	; (140b0 <LCD_setCursor+0x70>)
   14086:	5cd2      	ldrb	r2, [r2, r3]
   14088:	1dfb      	adds	r3, r7, #7
   1408a:	781b      	ldrb	r3, [r3, #0]
   1408c:	18d3      	adds	r3, r2, r3
   1408e:	b2db      	uxtb	r3, r3
   14090:	b25b      	sxtb	r3, r3
   14092:	2280      	movs	r2, #128	; 0x80
   14094:	4252      	negs	r2, r2
   14096:	4313      	orrs	r3, r2
   14098:	b25b      	sxtb	r3, r3
   1409a:	b2db      	uxtb	r3, r3
   1409c:	0018      	movs	r0, r3
   1409e:	4b05      	ldr	r3, [pc, #20]	; (140b4 <LCD_setCursor+0x74>)
   140a0:	4798      	blx	r3
}
   140a2:	46c0      	nop			; (mov r8, r8)
   140a4:	46bd      	mov	sp, r7
   140a6:	b004      	add	sp, #16
   140a8:	bd80      	pop	{r7, pc}
   140aa:	46c0      	nop			; (mov r8, r8)
   140ac:	200006d6 	.word	0x200006d6
   140b0:	200006d0 	.word	0x200006d0
   140b4:	00013ed1 	.word	0x00013ed1

000140b8 <LCD_display>:
{
	_displaycontrol &= ~LCD_DISPLAYON;
	command(LCD_DISPLAYCONTROL | _displaycontrol);
}
void LCD_display(void) 
{
   140b8:	b580      	push	{r7, lr}
   140ba:	af00      	add	r7, sp, #0
	_displaycontrol |= LCD_DISPLAYON;
   140bc:	4b08      	ldr	r3, [pc, #32]	; (140e0 <LCD_display+0x28>)
   140be:	781b      	ldrb	r3, [r3, #0]
   140c0:	2204      	movs	r2, #4
   140c2:	4313      	orrs	r3, r2
   140c4:	b2da      	uxtb	r2, r3
   140c6:	4b06      	ldr	r3, [pc, #24]	; (140e0 <LCD_display+0x28>)
   140c8:	701a      	strb	r2, [r3, #0]
	command(LCD_DISPLAYCONTROL | _displaycontrol);
   140ca:	4b05      	ldr	r3, [pc, #20]	; (140e0 <LCD_display+0x28>)
   140cc:	781b      	ldrb	r3, [r3, #0]
   140ce:	2208      	movs	r2, #8
   140d0:	4313      	orrs	r3, r2
   140d2:	b2db      	uxtb	r3, r3
   140d4:	0018      	movs	r0, r3
   140d6:	4b03      	ldr	r3, [pc, #12]	; (140e4 <LCD_display+0x2c>)
   140d8:	4798      	blx	r3
}
   140da:	46c0      	nop			; (mov r8, r8)
   140dc:	46bd      	mov	sp, r7
   140de:	bd80      	pop	{r7, pc}
   140e0:	200006d5 	.word	0x200006d5
   140e4:	00013ed1 	.word	0x00013ed1

000140e8 <Buffer_writer>:

//////////////////////////////////////////////////////////////////////////


size_t Buffer_writer(const char *buffer)
{
   140e8:	b580      	push	{r7, lr}
   140ea:	b084      	sub	sp, #16
   140ec:	af00      	add	r7, sp, #0
   140ee:	6078      	str	r0, [r7, #4]
	size_t size = strlen(buffer);
   140f0:	687b      	ldr	r3, [r7, #4]
   140f2:	0018      	movs	r0, r3
   140f4:	4b0f      	ldr	r3, [pc, #60]	; (14134 <Buffer_writer+0x4c>)
   140f6:	4798      	blx	r3
   140f8:	0003      	movs	r3, r0
   140fa:	60fb      	str	r3, [r7, #12]
	size_t n = 0;
   140fc:	2300      	movs	r3, #0
   140fe:	60bb      	str	r3, [r7, #8]
	while (size--) {
   14100:	e00b      	b.n	1411a <Buffer_writer+0x32>
		if (LCD_write(*buffer++)) n++;
   14102:	687b      	ldr	r3, [r7, #4]
   14104:	1c5a      	adds	r2, r3, #1
   14106:	607a      	str	r2, [r7, #4]
   14108:	781b      	ldrb	r3, [r3, #0]
   1410a:	0018      	movs	r0, r3
   1410c:	4b0a      	ldr	r3, [pc, #40]	; (14138 <Buffer_writer+0x50>)
   1410e:	4798      	blx	r3
   14110:	1e03      	subs	r3, r0, #0
   14112:	d008      	beq.n	14126 <Buffer_writer+0x3e>
   14114:	68bb      	ldr	r3, [r7, #8]
   14116:	3301      	adds	r3, #1
   14118:	60bb      	str	r3, [r7, #8]
	while (size--) {
   1411a:	68fb      	ldr	r3, [r7, #12]
   1411c:	1e5a      	subs	r2, r3, #1
   1411e:	60fa      	str	r2, [r7, #12]
   14120:	2b00      	cmp	r3, #0
   14122:	d1ee      	bne.n	14102 <Buffer_writer+0x1a>
   14124:	e000      	b.n	14128 <Buffer_writer+0x40>
		else break;
   14126:	46c0      	nop			; (mov r8, r8)
	}
	return n;
   14128:	68bb      	ldr	r3, [r7, #8]
}
   1412a:	0018      	movs	r0, r3
   1412c:	46bd      	mov	sp, r7
   1412e:	b004      	add	sp, #16
   14130:	bd80      	pop	{r7, pc}
   14132:	46c0      	nop			; (mov r8, r8)
   14134:	00028c73 	.word	0x00028c73
   14138:	00013ef5 	.word	0x00013ef5

0001413c <lcd_printf>:
	return n;
}


void lcd_printf(const  char *fmt, ...)
{
   1413c:	b40f      	push	{r0, r1, r2, r3}
   1413e:	b580      	push	{r7, lr}
   14140:	b084      	sub	sp, #16
   14142:	af00      	add	r7, sp, #0
	int num_chars;
	char *lcd_buff;
	num_chars = strlen(fmt) + 3;
   14144:	69bb      	ldr	r3, [r7, #24]
   14146:	0018      	movs	r0, r3
   14148:	4b11      	ldr	r3, [pc, #68]	; (14190 <lcd_printf+0x54>)
   1414a:	4798      	blx	r3
   1414c:	0003      	movs	r3, r0
   1414e:	3303      	adds	r3, #3
   14150:	60fb      	str	r3, [r7, #12]
	lcd_buff = (char *)malloc(sizeof(char) * num_chars);
   14152:	68fb      	ldr	r3, [r7, #12]
   14154:	0018      	movs	r0, r3
   14156:	4b0f      	ldr	r3, [pc, #60]	; (14194 <lcd_printf+0x58>)
   14158:	4798      	blx	r3
   1415a:	0003      	movs	r3, r0
   1415c:	60bb      	str	r3, [r7, #8]
	va_list args;
	va_start(args, fmt);
   1415e:	231c      	movs	r3, #28
   14160:	18fb      	adds	r3, r7, r3
   14162:	607b      	str	r3, [r7, #4]
	vsprintf(lcd_buff,fmt,args);
   14164:	687a      	ldr	r2, [r7, #4]
   14166:	69b9      	ldr	r1, [r7, #24]
   14168:	68bb      	ldr	r3, [r7, #8]
   1416a:	0018      	movs	r0, r3
   1416c:	4b0a      	ldr	r3, [pc, #40]	; (14198 <lcd_printf+0x5c>)
   1416e:	4798      	blx	r3
	Buffer_writer(lcd_buff);
   14170:	68bb      	ldr	r3, [r7, #8]
   14172:	0018      	movs	r0, r3
   14174:	4b09      	ldr	r3, [pc, #36]	; (1419c <lcd_printf+0x60>)
   14176:	4798      	blx	r3
	va_end(args);
	free(lcd_buff);
   14178:	68bb      	ldr	r3, [r7, #8]
   1417a:	0018      	movs	r0, r3
   1417c:	4b08      	ldr	r3, [pc, #32]	; (141a0 <lcd_printf+0x64>)
   1417e:	4798      	blx	r3
}
   14180:	46c0      	nop			; (mov r8, r8)
   14182:	46bd      	mov	sp, r7
   14184:	b004      	add	sp, #16
   14186:	bc80      	pop	{r7}
   14188:	bc08      	pop	{r3}
   1418a:	b004      	add	sp, #16
   1418c:	4718      	bx	r3
   1418e:	46c0      	nop			; (mov r8, r8)
   14190:	00028c73 	.word	0x00028c73
   14194:	00028961 	.word	0x00028961
   14198:	00028f61 	.word	0x00028f61
   1419c:	000140e9 	.word	0x000140e9
   141a0:	00028975 	.word	0x00028975

000141a4 <StringtoUpperCase>:
#include "yalgo.h"
#include "itoa.h"


void StringtoUpperCase(char *str)
{
   141a4:	b580      	push	{r7, lr}
   141a6:	b084      	sub	sp, #16
   141a8:	af00      	add	r7, sp, #0
   141aa:	6078      	str	r0, [r7, #4]
	if (!str) return;
   141ac:	687b      	ldr	r3, [r7, #4]
   141ae:	2b00      	cmp	r3, #0
   141b0:	d028      	beq.n	14204 <StringtoUpperCase+0x60>
	for (char *p = str; *p; p++) {
   141b2:	687b      	ldr	r3, [r7, #4]
   141b4:	60fb      	str	r3, [r7, #12]
   141b6:	e020      	b.n	141fa <StringtoUpperCase+0x56>
		*p = toupper(*p);
   141b8:	230b      	movs	r3, #11
   141ba:	18fb      	adds	r3, r7, r3
   141bc:	68fa      	ldr	r2, [r7, #12]
   141be:	7812      	ldrb	r2, [r2, #0]
   141c0:	701a      	strb	r2, [r3, #0]
   141c2:	4b12      	ldr	r3, [pc, #72]	; (1420c <StringtoUpperCase+0x68>)
   141c4:	4798      	blx	r3
   141c6:	0002      	movs	r2, r0
   141c8:	230b      	movs	r3, #11
   141ca:	18fb      	adds	r3, r7, r3
   141cc:	781b      	ldrb	r3, [r3, #0]
   141ce:	3301      	adds	r3, #1
   141d0:	18d3      	adds	r3, r2, r3
   141d2:	781b      	ldrb	r3, [r3, #0]
   141d4:	001a      	movs	r2, r3
   141d6:	2303      	movs	r3, #3
   141d8:	4013      	ands	r3, r2
   141da:	2b02      	cmp	r3, #2
   141dc:	d104      	bne.n	141e8 <StringtoUpperCase+0x44>
   141de:	230b      	movs	r3, #11
   141e0:	18fb      	adds	r3, r7, r3
   141e2:	781b      	ldrb	r3, [r3, #0]
   141e4:	3b20      	subs	r3, #32
   141e6:	e002      	b.n	141ee <StringtoUpperCase+0x4a>
   141e8:	230b      	movs	r3, #11
   141ea:	18fb      	adds	r3, r7, r3
   141ec:	781b      	ldrb	r3, [r3, #0]
   141ee:	b2da      	uxtb	r2, r3
   141f0:	68fb      	ldr	r3, [r7, #12]
   141f2:	701a      	strb	r2, [r3, #0]
	for (char *p = str; *p; p++) {
   141f4:	68fb      	ldr	r3, [r7, #12]
   141f6:	3301      	adds	r3, #1
   141f8:	60fb      	str	r3, [r7, #12]
   141fa:	68fb      	ldr	r3, [r7, #12]
   141fc:	781b      	ldrb	r3, [r3, #0]
   141fe:	2b00      	cmp	r3, #0
   14200:	d1da      	bne.n	141b8 <StringtoUpperCase+0x14>
   14202:	e000      	b.n	14206 <StringtoUpperCase+0x62>
	if (!str) return;
   14204:	46c0      	nop			; (mov r8, r8)
	}
}
   14206:	46bd      	mov	sp, r7
   14208:	b004      	add	sp, #16
   1420a:	bd80      	pop	{r7, pc}
   1420c:	00028945 	.word	0x00028945

00014210 <StringstartsWith>:

bool StringstartsWith(const char *str,const char *pre)
{
   14210:	b580      	push	{r7, lr}
   14212:	b084      	sub	sp, #16
   14214:	af00      	add	r7, sp, #0
   14216:	6078      	str	r0, [r7, #4]
   14218:	6039      	str	r1, [r7, #0]
	size_t lenpre = strlen(pre),
   1421a:	683b      	ldr	r3, [r7, #0]
   1421c:	0018      	movs	r0, r3
   1421e:	4b10      	ldr	r3, [pc, #64]	; (14260 <StringstartsWith+0x50>)
   14220:	4798      	blx	r3
   14222:	0003      	movs	r3, r0
   14224:	60fb      	str	r3, [r7, #12]
	lenstr = strlen(str);
   14226:	687b      	ldr	r3, [r7, #4]
   14228:	0018      	movs	r0, r3
   1422a:	4b0d      	ldr	r3, [pc, #52]	; (14260 <StringstartsWith+0x50>)
   1422c:	4798      	blx	r3
   1422e:	0003      	movs	r3, r0
   14230:	60bb      	str	r3, [r7, #8]
	return lenstr < lenpre ? false : strncmp(pre, str, lenpre) == 0;
   14232:	68ba      	ldr	r2, [r7, #8]
   14234:	68fb      	ldr	r3, [r7, #12]
   14236:	429a      	cmp	r2, r3
   14238:	d309      	bcc.n	1424e <StringstartsWith+0x3e>
   1423a:	68fa      	ldr	r2, [r7, #12]
   1423c:	6879      	ldr	r1, [r7, #4]
   1423e:	683b      	ldr	r3, [r7, #0]
   14240:	0018      	movs	r0, r3
   14242:	4b08      	ldr	r3, [pc, #32]	; (14264 <StringstartsWith+0x54>)
   14244:	4798      	blx	r3
   14246:	1e03      	subs	r3, r0, #0
   14248:	d101      	bne.n	1424e <StringstartsWith+0x3e>
   1424a:	2301      	movs	r3, #1
   1424c:	e000      	b.n	14250 <StringstartsWith+0x40>
   1424e:	2300      	movs	r3, #0
   14250:	1c1a      	adds	r2, r3, #0
   14252:	2301      	movs	r3, #1
   14254:	4013      	ands	r3, r2
   14256:	b2db      	uxtb	r3, r3
}
   14258:	0018      	movs	r0, r3
   1425a:	46bd      	mov	sp, r7
   1425c:	b004      	add	sp, #16
   1425e:	bd80      	pop	{r7, pc}
   14260:	00028c73 	.word	0x00028c73
   14264:	00028c81 	.word	0x00028c81

00014268 <NVIC_SystemReset>:
/** \brief  System Reset

    The function initiates a system reset request to reset the MCU.
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
   14268:	b580      	push	{r7, lr}
   1426a:	af00      	add	r7, sp, #0
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
   1426c:	f3bf 8f4f 	dsb	sy
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
   14270:	4b02      	ldr	r3, [pc, #8]	; (1427c <NVIC_SystemReset+0x14>)
   14272:	4a03      	ldr	r2, [pc, #12]	; (14280 <NVIC_SystemReset+0x18>)
   14274:	60da      	str	r2, [r3, #12]
   14276:	f3bf 8f4f 	dsb	sy
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                     /* Ensure completion of memory access */
  while(1);                                                    /* wait until reset */
   1427a:	e7fe      	b.n	1427a <NVIC_SystemReset+0x12>
   1427c:	e000ed00 	.word	0xe000ed00
   14280:	05fa0004 	.word	0x05fa0004

00014284 <system_pinmux_get_group_from_gpio_pin>:
{
   14284:	b580      	push	{r7, lr}
   14286:	b084      	sub	sp, #16
   14288:	af00      	add	r7, sp, #0
   1428a:	0002      	movs	r2, r0
   1428c:	1dfb      	adds	r3, r7, #7
   1428e:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   14290:	230f      	movs	r3, #15
   14292:	18fb      	adds	r3, r7, r3
   14294:	1dfa      	adds	r2, r7, #7
   14296:	7812      	ldrb	r2, [r2, #0]
   14298:	09d2      	lsrs	r2, r2, #7
   1429a:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   1429c:	230e      	movs	r3, #14
   1429e:	18fb      	adds	r3, r7, r3
   142a0:	1dfa      	adds	r2, r7, #7
   142a2:	7812      	ldrb	r2, [r2, #0]
   142a4:	0952      	lsrs	r2, r2, #5
   142a6:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   142a8:	4b0d      	ldr	r3, [pc, #52]	; (142e0 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   142aa:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   142ac:	230f      	movs	r3, #15
   142ae:	18fb      	adds	r3, r7, r3
   142b0:	781b      	ldrb	r3, [r3, #0]
   142b2:	2b00      	cmp	r3, #0
   142b4:	d10f      	bne.n	142d6 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   142b6:	230f      	movs	r3, #15
   142b8:	18fb      	adds	r3, r7, r3
   142ba:	781b      	ldrb	r3, [r3, #0]
   142bc:	009b      	lsls	r3, r3, #2
   142be:	2210      	movs	r2, #16
   142c0:	4694      	mov	ip, r2
   142c2:	44bc      	add	ip, r7
   142c4:	4463      	add	r3, ip
   142c6:	3b08      	subs	r3, #8
   142c8:	681a      	ldr	r2, [r3, #0]
   142ca:	230e      	movs	r3, #14
   142cc:	18fb      	adds	r3, r7, r3
   142ce:	781b      	ldrb	r3, [r3, #0]
   142d0:	01db      	lsls	r3, r3, #7
   142d2:	18d3      	adds	r3, r2, r3
   142d4:	e000      	b.n	142d8 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   142d6:	2300      	movs	r3, #0
}
   142d8:	0018      	movs	r0, r3
   142da:	46bd      	mov	sp, r7
   142dc:	b004      	add	sp, #16
   142de:	bd80      	pop	{r7, pc}
   142e0:	41004400 	.word	0x41004400

000142e4 <system_reset>:
 * Resets the MCU and all associated peripherals and registers, except RTC, all 32KHz sources,
 * WDT (if ALWAYSON is set) and GCLK (if WRTLOCK is set).
 *
 */
static inline void system_reset(void)
{
   142e4:	b580      	push	{r7, lr}
   142e6:	af00      	add	r7, sp, #0
	NVIC_SystemReset();
   142e8:	4b02      	ldr	r3, [pc, #8]	; (142f4 <system_reset+0x10>)
   142ea:	4798      	blx	r3
}
   142ec:	46c0      	nop			; (mov r8, r8)
   142ee:	46bd      	mov	sp, r7
   142f0:	bd80      	pop	{r7, pc}
   142f2:	46c0      	nop			; (mov r8, r8)
   142f4:	00014269 	.word	0x00014269

000142f8 <port_get_group_from_gpio_pin>:
{
   142f8:	b580      	push	{r7, lr}
   142fa:	b082      	sub	sp, #8
   142fc:	af00      	add	r7, sp, #0
   142fe:	0002      	movs	r2, r0
   14300:	1dfb      	adds	r3, r7, #7
   14302:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   14304:	1dfb      	adds	r3, r7, #7
   14306:	781b      	ldrb	r3, [r3, #0]
   14308:	0018      	movs	r0, r3
   1430a:	4b03      	ldr	r3, [pc, #12]	; (14318 <port_get_group_from_gpio_pin+0x20>)
   1430c:	4798      	blx	r3
   1430e:	0003      	movs	r3, r0
}
   14310:	0018      	movs	r0, r3
   14312:	46bd      	mov	sp, r7
   14314:	b002      	add	sp, #8
   14316:	bd80      	pop	{r7, pc}
   14318:	00014285 	.word	0x00014285

0001431c <port_get_config_defaults>:
{
   1431c:	b580      	push	{r7, lr}
   1431e:	b082      	sub	sp, #8
   14320:	af00      	add	r7, sp, #0
   14322:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
   14324:	687b      	ldr	r3, [r7, #4]
   14326:	2200      	movs	r2, #0
   14328:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   1432a:	687b      	ldr	r3, [r7, #4]
   1432c:	2201      	movs	r2, #1
   1432e:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
   14330:	687b      	ldr	r3, [r7, #4]
   14332:	2200      	movs	r2, #0
   14334:	709a      	strb	r2, [r3, #2]
}
   14336:	46c0      	nop			; (mov r8, r8)
   14338:	46bd      	mov	sp, r7
   1433a:	b002      	add	sp, #8
   1433c:	bd80      	pop	{r7, pc}
	...

00014340 <port_pin_get_input_level>:
{
   14340:	b580      	push	{r7, lr}
   14342:	b084      	sub	sp, #16
   14344:	af00      	add	r7, sp, #0
   14346:	0002      	movs	r2, r0
   14348:	1dfb      	adds	r3, r7, #7
   1434a:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   1434c:	1dfb      	adds	r3, r7, #7
   1434e:	781b      	ldrb	r3, [r3, #0]
   14350:	0018      	movs	r0, r3
   14352:	4b0b      	ldr	r3, [pc, #44]	; (14380 <port_pin_get_input_level+0x40>)
   14354:	4798      	blx	r3
   14356:	0003      	movs	r3, r0
   14358:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   1435a:	1dfb      	adds	r3, r7, #7
   1435c:	781b      	ldrb	r3, [r3, #0]
   1435e:	221f      	movs	r2, #31
   14360:	4013      	ands	r3, r2
   14362:	2201      	movs	r2, #1
   14364:	409a      	lsls	r2, r3
   14366:	0013      	movs	r3, r2
   14368:	60bb      	str	r3, [r7, #8]
	return (port_base->IN.reg & pin_mask);
   1436a:	68fb      	ldr	r3, [r7, #12]
   1436c:	6a1b      	ldr	r3, [r3, #32]
   1436e:	68ba      	ldr	r2, [r7, #8]
   14370:	4013      	ands	r3, r2
   14372:	1e5a      	subs	r2, r3, #1
   14374:	4193      	sbcs	r3, r2
   14376:	b2db      	uxtb	r3, r3
}
   14378:	0018      	movs	r0, r3
   1437a:	46bd      	mov	sp, r7
   1437c:	b004      	add	sp, #16
   1437e:	bd80      	pop	{r7, pc}
   14380:	000142f9 	.word	0x000142f9

00014384 <port_pin_set_output_level>:
{
   14384:	b580      	push	{r7, lr}
   14386:	b084      	sub	sp, #16
   14388:	af00      	add	r7, sp, #0
   1438a:	0002      	movs	r2, r0
   1438c:	1dfb      	adds	r3, r7, #7
   1438e:	701a      	strb	r2, [r3, #0]
   14390:	1dbb      	adds	r3, r7, #6
   14392:	1c0a      	adds	r2, r1, #0
   14394:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   14396:	1dfb      	adds	r3, r7, #7
   14398:	781b      	ldrb	r3, [r3, #0]
   1439a:	0018      	movs	r0, r3
   1439c:	4b0d      	ldr	r3, [pc, #52]	; (143d4 <port_pin_set_output_level+0x50>)
   1439e:	4798      	blx	r3
   143a0:	0003      	movs	r3, r0
   143a2:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   143a4:	1dfb      	adds	r3, r7, #7
   143a6:	781b      	ldrb	r3, [r3, #0]
   143a8:	221f      	movs	r2, #31
   143aa:	4013      	ands	r3, r2
   143ac:	2201      	movs	r2, #1
   143ae:	409a      	lsls	r2, r3
   143b0:	0013      	movs	r3, r2
   143b2:	60bb      	str	r3, [r7, #8]
	if (level) {
   143b4:	1dbb      	adds	r3, r7, #6
   143b6:	781b      	ldrb	r3, [r3, #0]
   143b8:	2b00      	cmp	r3, #0
   143ba:	d003      	beq.n	143c4 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   143bc:	68fb      	ldr	r3, [r7, #12]
   143be:	68ba      	ldr	r2, [r7, #8]
   143c0:	619a      	str	r2, [r3, #24]
}
   143c2:	e002      	b.n	143ca <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   143c4:	68fb      	ldr	r3, [r7, #12]
   143c6:	68ba      	ldr	r2, [r7, #8]
   143c8:	615a      	str	r2, [r3, #20]
}
   143ca:	46c0      	nop			; (mov r8, r8)
   143cc:	46bd      	mov	sp, r7
   143ce:	b004      	add	sp, #16
   143d0:	bd80      	pop	{r7, pc}
   143d2:	46c0      	nop			; (mov r8, r8)
   143d4:	000142f9 	.word	0x000142f9

000143d8 <setObtainEvent>:

static void vTask_GSM_service(void *params);


void setObtainEvent(void)
{
   143d8:	b580      	push	{r7, lr}
   143da:	af00      	add	r7, sp, #0
	if (!obtainNewEvent  && xTaskGetTickCount() - obtainEventTimer > 1000)
   143dc:	4b0b      	ldr	r3, [pc, #44]	; (1440c <setObtainEvent+0x34>)
   143de:	781b      	ldrb	r3, [r3, #0]
   143e0:	2201      	movs	r2, #1
   143e2:	4053      	eors	r3, r2
   143e4:	b2db      	uxtb	r3, r3
   143e6:	2b00      	cmp	r3, #0
   143e8:	d00c      	beq.n	14404 <setObtainEvent+0x2c>
   143ea:	4b09      	ldr	r3, [pc, #36]	; (14410 <setObtainEvent+0x38>)
   143ec:	4798      	blx	r3
   143ee:	0002      	movs	r2, r0
   143f0:	4b08      	ldr	r3, [pc, #32]	; (14414 <setObtainEvent+0x3c>)
   143f2:	681b      	ldr	r3, [r3, #0]
   143f4:	1ad2      	subs	r2, r2, r3
   143f6:	23fa      	movs	r3, #250	; 0xfa
   143f8:	009b      	lsls	r3, r3, #2
   143fa:	429a      	cmp	r2, r3
   143fc:	d902      	bls.n	14404 <setObtainEvent+0x2c>
	{
		obtainNewEvent = true;
   143fe:	4b03      	ldr	r3, [pc, #12]	; (1440c <setObtainEvent+0x34>)
   14400:	2201      	movs	r2, #1
   14402:	701a      	strb	r2, [r3, #0]
	}
}
   14404:	46c0      	nop			; (mov r8, r8)
   14406:	46bd      	mov	sp, r7
   14408:	bd80      	pop	{r7, pc}
   1440a:	46c0      	nop			; (mov r8, r8)
   1440c:	20000772 	.word	0x20000772
   14410:	000200dd 	.word	0x000200dd
   14414:	20000810 	.word	0x20000810

00014418 <operateOnStagedEvent>:

void operateOnStagedEvent(void)
{
   14418:	b580      	push	{r7, lr}
   1441a:	b082      	sub	sp, #8
   1441c:	af00      	add	r7, sp, #0
	uint8_t temp1= 1;
   1441e:	1dfb      	adds	r3, r7, #7
   14420:	2201      	movs	r2, #1
   14422:	701a      	strb	r2, [r3, #0]
	if(eventStaged)
   14424:	4b23      	ldr	r3, [pc, #140]	; (144b4 <operateOnStagedEvent+0x9c>)
   14426:	781b      	ldrb	r3, [r3, #0]
   14428:	2b00      	cmp	r3, #0
   1442a:	d003      	beq.n	14434 <operateOnStagedEvent+0x1c>
	{
		temp1 = user_settings_parameter_struct.eventStageAddress;
   1442c:	1dfb      	adds	r3, r7, #7
   1442e:	4a22      	ldr	r2, [pc, #136]	; (144b8 <operateOnStagedEvent+0xa0>)
   14430:	7a12      	ldrb	r2, [r2, #8]
   14432:	701a      	strb	r2, [r3, #0]
	}
	
	if(obtainNewEvent && (retries==1 || (xTaskGetTickCount()-tempEventStageTime>((unsigned long)temp1*60000L))))
   14434:	4b21      	ldr	r3, [pc, #132]	; (144bc <operateOnStagedEvent+0xa4>)
   14436:	781b      	ldrb	r3, [r3, #0]
   14438:	2b00      	cmp	r3, #0
   1443a:	d037      	beq.n	144ac <operateOnStagedEvent+0x94>
   1443c:	4b20      	ldr	r3, [pc, #128]	; (144c0 <operateOnStagedEvent+0xa8>)
   1443e:	781b      	ldrb	r3, [r3, #0]
   14440:	2b01      	cmp	r3, #1
   14442:	d00b      	beq.n	1445c <operateOnStagedEvent+0x44>
   14444:	4b1f      	ldr	r3, [pc, #124]	; (144c4 <operateOnStagedEvent+0xac>)
   14446:	4798      	blx	r3
   14448:	0002      	movs	r2, r0
   1444a:	4b1f      	ldr	r3, [pc, #124]	; (144c8 <operateOnStagedEvent+0xb0>)
   1444c:	681b      	ldr	r3, [r3, #0]
   1444e:	1ad2      	subs	r2, r2, r3
   14450:	1dfb      	adds	r3, r7, #7
   14452:	781b      	ldrb	r3, [r3, #0]
   14454:	491d      	ldr	r1, [pc, #116]	; (144cc <operateOnStagedEvent+0xb4>)
   14456:	434b      	muls	r3, r1
   14458:	429a      	cmp	r2, r3
   1445a:	d927      	bls.n	144ac <operateOnStagedEvent+0x94>
	{
		if (factory_settings_parameter_struct.ENABLE_M2M)
   1445c:	4b1c      	ldr	r3, [pc, #112]	; (144d0 <operateOnStagedEvent+0xb8>)
   1445e:	78db      	ldrb	r3, [r3, #3]
   14460:	2b00      	cmp	r3, #0
   14462:	d01a      	beq.n	1449a <operateOnStagedEvent+0x82>
		{
			if (eventStaged)
   14464:	4b13      	ldr	r3, [pc, #76]	; (144b4 <operateOnStagedEvent+0x9c>)
   14466:	781b      	ldrb	r3, [r3, #0]
   14468:	2b00      	cmp	r3, #0
   1446a:	d007      	beq.n	1447c <operateOnStagedEvent+0x64>
			{
				actionType=stagedEventType;
   1446c:	4b19      	ldr	r3, [pc, #100]	; (144d4 <operateOnStagedEvent+0xbc>)
   1446e:	781a      	ldrb	r2, [r3, #0]
   14470:	4b19      	ldr	r3, [pc, #100]	; (144d8 <operateOnStagedEvent+0xc0>)
   14472:	701a      	strb	r2, [r3, #0]
				eventStaged=false;
   14474:	4b0f      	ldr	r3, [pc, #60]	; (144b4 <operateOnStagedEvent+0x9c>)
   14476:	2200      	movs	r2, #0
   14478:	701a      	strb	r2, [r3, #0]
   1447a:	e015      	b.n	144a8 <operateOnStagedEvent+0x90>
			}
			else if (m2mEventStaged)
   1447c:	4b17      	ldr	r3, [pc, #92]	; (144dc <operateOnStagedEvent+0xc4>)
   1447e:	781b      	ldrb	r3, [r3, #0]
   14480:	2b00      	cmp	r3, #0
   14482:	d011      	beq.n	144a8 <operateOnStagedEvent+0x90>
			{
				m2mEventNo=stagedEventType;
   14484:	4b13      	ldr	r3, [pc, #76]	; (144d4 <operateOnStagedEvent+0xbc>)
   14486:	781a      	ldrb	r2, [r3, #0]
   14488:	4b15      	ldr	r3, [pc, #84]	; (144e0 <operateOnStagedEvent+0xc8>)
   1448a:	701a      	strb	r2, [r3, #0]
				m2mEvent=true;
   1448c:	4b15      	ldr	r3, [pc, #84]	; (144e4 <operateOnStagedEvent+0xcc>)
   1448e:	2201      	movs	r2, #1
   14490:	701a      	strb	r2, [r3, #0]
				m2mEventStaged=false;
   14492:	4b12      	ldr	r3, [pc, #72]	; (144dc <operateOnStagedEvent+0xc4>)
   14494:	2200      	movs	r2, #0
   14496:	701a      	strb	r2, [r3, #0]
   14498:	e006      	b.n	144a8 <operateOnStagedEvent+0x90>
			}
		}
		else
		{
			actionType=stagedEventType;
   1449a:	4b0e      	ldr	r3, [pc, #56]	; (144d4 <operateOnStagedEvent+0xbc>)
   1449c:	781a      	ldrb	r2, [r3, #0]
   1449e:	4b0e      	ldr	r3, [pc, #56]	; (144d8 <operateOnStagedEvent+0xc0>)
   144a0:	701a      	strb	r2, [r3, #0]
			eventStaged=false;
   144a2:	4b04      	ldr	r3, [pc, #16]	; (144b4 <operateOnStagedEvent+0x9c>)
   144a4:	2200      	movs	r2, #0
   144a6:	701a      	strb	r2, [r3, #0]
		}
		makeResponseAction();
   144a8:	4b0f      	ldr	r3, [pc, #60]	; (144e8 <operateOnStagedEvent+0xd0>)
   144aa:	4798      	blx	r3
	}
}
   144ac:	46c0      	nop			; (mov r8, r8)
   144ae:	46bd      	mov	sp, r7
   144b0:	b002      	add	sp, #8
   144b2:	bd80      	pop	{r7, pc}
   144b4:	200007d3 	.word	0x200007d3
   144b8:	20000654 	.word	0x20000654
   144bc:	20000772 	.word	0x20000772
   144c0:	200006e5 	.word	0x200006e5
   144c4:	000200dd 	.word	0x000200dd
   144c8:	200007f0 	.word	0x200007f0
   144cc:	0000ea60 	.word	0x0000ea60
   144d0:	2000062c 	.word	0x2000062c
   144d4:	20000775 	.word	0x20000775
   144d8:	20000763 	.word	0x20000763
   144dc:	2000078e 	.word	0x2000078e
   144e0:	2000072d 	.word	0x2000072d
   144e4:	20000743 	.word	0x20000743
   144e8:	000144ed 	.word	0x000144ed

000144ec <makeResponseAction>:

void makeResponseAction(void)
{
   144ec:	b580      	push	{r7, lr}
   144ee:	af00      	add	r7, sp, #0
	if(user_settings_parameter_struct.responseAddress != 'N' || m2mEvent)
   144f0:	4b08      	ldr	r3, [pc, #32]	; (14514 <makeResponseAction+0x28>)
   144f2:	795b      	ldrb	r3, [r3, #5]
   144f4:	b2db      	uxtb	r3, r3
   144f6:	2b4e      	cmp	r3, #78	; 0x4e
   144f8:	d103      	bne.n	14502 <makeResponseAction+0x16>
   144fa:	4b07      	ldr	r3, [pc, #28]	; (14518 <makeResponseAction+0x2c>)
   144fc:	781b      	ldrb	r3, [r3, #0]
   144fe:	2b00      	cmp	r3, #0
   14500:	d004      	beq.n	1450c <makeResponseAction+0x20>
	{
		freezeIncomingCalls = true;
   14502:	4b06      	ldr	r3, [pc, #24]	; (1451c <makeResponseAction+0x30>)
   14504:	2201      	movs	r2, #1
   14506:	701a      	strb	r2, [r3, #0]
		//acceptCommands();
		makeCall();
   14508:	4b05      	ldr	r3, [pc, #20]	; (14520 <makeResponseAction+0x34>)
   1450a:	4798      	blx	r3
	}
}
   1450c:	46c0      	nop			; (mov r8, r8)
   1450e:	46bd      	mov	sp, r7
   14510:	bd80      	pop	{r7, pc}
   14512:	46c0      	nop			; (mov r8, r8)
   14514:	20000654 	.word	0x20000654
   14518:	20000743 	.word	0x20000743
   1451c:	20000744 	.word	0x20000744
   14520:	00014759 	.word	0x00014759

00014524 <endCall>:

void endCall(void)
{
   14524:	b580      	push	{r7, lr}
   14526:	af00      	add	r7, sp, #0
	nr  = 0;
   14528:	4b6d      	ldr	r3, [pc, #436]	; (146e0 <endCall+0x1bc>)
   1452a:	2200      	movs	r2, #0
   1452c:	701a      	strb	r2, [r3, #0]
	inCall=false;
   1452e:	4b6d      	ldr	r3, [pc, #436]	; (146e4 <endCall+0x1c0>)
   14530:	2200      	movs	r2, #0
   14532:	701a      	strb	r2, [r3, #0]
	
	gsm_hangup_call();
   14534:	4b6c      	ldr	r3, [pc, #432]	; (146e8 <endCall+0x1c4>)
   14536:	4798      	blx	r3
	setCallStateOnLCD(LCDCALLSTATE_IDLE,NULL,false);
   14538:	2200      	movs	r2, #0
   1453a:	2100      	movs	r1, #0
   1453c:	2000      	movs	r0, #0
   1453e:	4b6b      	ldr	r3, [pc, #428]	; (146ec <endCall+0x1c8>)
   14540:	4798      	blx	r3
	//unsigned long temp = xTaskGetTickCount();
	vTaskDelay(1000);
   14542:	23fa      	movs	r3, #250	; 0xfa
   14544:	009b      	lsls	r3, r3, #2
   14546:	0018      	movs	r0, r3
   14548:	4b69      	ldr	r3, [pc, #420]	; (146f0 <endCall+0x1cc>)
   1454a:	4798      	blx	r3
	freezeIncomingCalls = false;
   1454c:	4b69      	ldr	r3, [pc, #420]	; (146f4 <endCall+0x1d0>)
   1454e:	2200      	movs	r2, #0
   14550:	701a      	strb	r2, [r3, #0]
	if (factory_settings_parameter_struct.ENABLE_CURRENT)
   14552:	4b69      	ldr	r3, [pc, #420]	; (146f8 <endCall+0x1d4>)
   14554:	785b      	ldrb	r3, [r3, #1]
   14556:	2b00      	cmp	r3, #0
   14558:	d002      	beq.n	14560 <endCall+0x3c>
	{
		zeroPressed=false;
   1455a:	4b68      	ldr	r3, [pc, #416]	; (146fc <endCall+0x1d8>)
   1455c:	2200      	movs	r2, #0
   1455e:	701a      	strb	r2, [r3, #0]
	}
	
	if ((factory_settings_parameter_struct.ENABLE_M2M == true)?
   14560:	4b65      	ldr	r3, [pc, #404]	; (146f8 <endCall+0x1d4>)
   14562:	78db      	ldrb	r3, [r3, #3]
   14564:	2b01      	cmp	r3, #1
   14566:	d11d      	bne.n	145a4 <endCall+0x80>
	((currentStatus == 'N' || currentStatus == 'R') && currentCallStatus == 'O' && !m2mEvent):
   14568:	4b65      	ldr	r3, [pc, #404]	; (14700 <endCall+0x1dc>)
   1456a:	781b      	ldrb	r3, [r3, #0]
   1456c:	b2db      	uxtb	r3, r3
   1456e:	2b4e      	cmp	r3, #78	; 0x4e
   14570:	d004      	beq.n	1457c <endCall+0x58>
   14572:	4b63      	ldr	r3, [pc, #396]	; (14700 <endCall+0x1dc>)
   14574:	781b      	ldrb	r3, [r3, #0]
   14576:	b2db      	uxtb	r3, r3
   14578:	2b52      	cmp	r3, #82	; 0x52
   1457a:	d10d      	bne.n	14598 <endCall+0x74>
   1457c:	4b61      	ldr	r3, [pc, #388]	; (14704 <endCall+0x1e0>)
   1457e:	781b      	ldrb	r3, [r3, #0]
   14580:	b2db      	uxtb	r3, r3
   14582:	2b4f      	cmp	r3, #79	; 0x4f
   14584:	d108      	bne.n	14598 <endCall+0x74>
   14586:	4b60      	ldr	r3, [pc, #384]	; (14708 <endCall+0x1e4>)
   14588:	781b      	ldrb	r3, [r3, #0]
   1458a:	2201      	movs	r2, #1
   1458c:	4053      	eors	r3, r2
   1458e:	b2db      	uxtb	r3, r3
   14590:	2b00      	cmp	r3, #0
   14592:	d001      	beq.n	14598 <endCall+0x74>
   14594:	2301      	movs	r3, #1
   14596:	e000      	b.n	1459a <endCall+0x76>
   14598:	2300      	movs	r3, #0
	if ((factory_settings_parameter_struct.ENABLE_M2M == true)?
   1459a:	1c1a      	adds	r2, r3, #0
   1459c:	2301      	movs	r3, #1
   1459e:	4013      	ands	r3, r2
   145a0:	b2db      	uxtb	r3, r3
   145a2:	e015      	b.n	145d0 <endCall+0xac>
	((currentStatus == 'N' || currentStatus == 'R') && currentCallStatus == 'O'))
   145a4:	4b56      	ldr	r3, [pc, #344]	; (14700 <endCall+0x1dc>)
   145a6:	781b      	ldrb	r3, [r3, #0]
   145a8:	b2db      	uxtb	r3, r3
   145aa:	2b4e      	cmp	r3, #78	; 0x4e
   145ac:	d004      	beq.n	145b8 <endCall+0x94>
   145ae:	4b54      	ldr	r3, [pc, #336]	; (14700 <endCall+0x1dc>)
   145b0:	781b      	ldrb	r3, [r3, #0]
   145b2:	b2db      	uxtb	r3, r3
   145b4:	2b52      	cmp	r3, #82	; 0x52
   145b6:	d106      	bne.n	145c6 <endCall+0xa2>
   145b8:	4b52      	ldr	r3, [pc, #328]	; (14704 <endCall+0x1e0>)
   145ba:	781b      	ldrb	r3, [r3, #0]
   145bc:	b2db      	uxtb	r3, r3
   145be:	2b4f      	cmp	r3, #79	; 0x4f
   145c0:	d101      	bne.n	145c6 <endCall+0xa2>
   145c2:	2301      	movs	r3, #1
   145c4:	e000      	b.n	145c8 <endCall+0xa4>
   145c6:	2300      	movs	r3, #0
	if ((factory_settings_parameter_struct.ENABLE_M2M == true)?
   145c8:	1c1a      	adds	r2, r3, #0
   145ca:	2301      	movs	r3, #1
   145cc:	4013      	ands	r3, r2
   145ce:	b2db      	uxtb	r3, r3
   145d0:	2b00      	cmp	r3, #0
   145d2:	d022      	beq.n	1461a <endCall+0xf6>
	{
		if((retries==0) && !callAccepted && (user_settings_parameter_struct.responseAddress=='T') && (user_count_struct.current_user_no_count>1))
   145d4:	4b4d      	ldr	r3, [pc, #308]	; (1470c <endCall+0x1e8>)
   145d6:	781b      	ldrb	r3, [r3, #0]
   145d8:	2b00      	cmp	r3, #0
   145da:	d11e      	bne.n	1461a <endCall+0xf6>
   145dc:	4b4c      	ldr	r3, [pc, #304]	; (14710 <endCall+0x1ec>)
   145de:	781b      	ldrb	r3, [r3, #0]
   145e0:	2201      	movs	r2, #1
   145e2:	4053      	eors	r3, r2
   145e4:	b2db      	uxtb	r3, r3
   145e6:	2b00      	cmp	r3, #0
   145e8:	d017      	beq.n	1461a <endCall+0xf6>
   145ea:	4b4a      	ldr	r3, [pc, #296]	; (14714 <endCall+0x1f0>)
   145ec:	795b      	ldrb	r3, [r3, #5]
   145ee:	b2db      	uxtb	r3, r3
   145f0:	2b54      	cmp	r3, #84	; 0x54
   145f2:	d112      	bne.n	1461a <endCall+0xf6>
   145f4:	4b48      	ldr	r3, [pc, #288]	; (14718 <endCall+0x1f4>)
   145f6:	789b      	ldrb	r3, [r3, #2]
   145f8:	2b01      	cmp	r3, #1
   145fa:	d90e      	bls.n	1461a <endCall+0xf6>
		{
			retries=1;
   145fc:	4b43      	ldr	r3, [pc, #268]	; (1470c <endCall+0x1e8>)
   145fe:	2201      	movs	r2, #1
   14600:	701a      	strb	r2, [r3, #0]
			eventStaged=true;
   14602:	4b46      	ldr	r3, [pc, #280]	; (1471c <endCall+0x1f8>)
   14604:	2201      	movs	r2, #1
   14606:	701a      	strb	r2, [r3, #0]
			tempEventStageTime=xTaskGetTickCount();
   14608:	4b45      	ldr	r3, [pc, #276]	; (14720 <endCall+0x1fc>)
   1460a:	4798      	blx	r3
   1460c:	0002      	movs	r2, r0
   1460e:	4b45      	ldr	r3, [pc, #276]	; (14724 <endCall+0x200>)
   14610:	601a      	str	r2, [r3, #0]
			stagedEventType=actionType;
   14612:	4b45      	ldr	r3, [pc, #276]	; (14728 <endCall+0x204>)
   14614:	781a      	ldrb	r2, [r3, #0]
   14616:	4b45      	ldr	r3, [pc, #276]	; (1472c <endCall+0x208>)
   14618:	701a      	strb	r2, [r3, #0]
		}
	}
	
	if (factory_settings_parameter_struct.ENABLE_M2M)
   1461a:	4b37      	ldr	r3, [pc, #220]	; (146f8 <endCall+0x1d4>)
   1461c:	78db      	ldrb	r3, [r3, #3]
   1461e:	2b00      	cmp	r3, #0
   14620:	d047      	beq.n	146b2 <endCall+0x18e>
	{
		if((currentStatus == 'I' || currentStatus=='R') && currentCallStatus == 'O' && m2mEvent && m2m_Numbers_struct.m2mSetting)
   14622:	4b37      	ldr	r3, [pc, #220]	; (14700 <endCall+0x1dc>)
   14624:	781b      	ldrb	r3, [r3, #0]
   14626:	b2db      	uxtb	r3, r3
   14628:	2b49      	cmp	r3, #73	; 0x49
   1462a:	d004      	beq.n	14636 <endCall+0x112>
   1462c:	4b34      	ldr	r3, [pc, #208]	; (14700 <endCall+0x1dc>)
   1462e:	781b      	ldrb	r3, [r3, #0]
   14630:	b2db      	uxtb	r3, r3
   14632:	2b52      	cmp	r3, #82	; 0x52
   14634:	d137      	bne.n	146a6 <endCall+0x182>
   14636:	4b33      	ldr	r3, [pc, #204]	; (14704 <endCall+0x1e0>)
   14638:	781b      	ldrb	r3, [r3, #0]
   1463a:	b2db      	uxtb	r3, r3
   1463c:	2b4f      	cmp	r3, #79	; 0x4f
   1463e:	d132      	bne.n	146a6 <endCall+0x182>
   14640:	4b31      	ldr	r3, [pc, #196]	; (14708 <endCall+0x1e4>)
   14642:	781b      	ldrb	r3, [r3, #0]
   14644:	2b00      	cmp	r3, #0
   14646:	d02e      	beq.n	146a6 <endCall+0x182>
   14648:	4b39      	ldr	r3, [pc, #228]	; (14730 <endCall+0x20c>)
   1464a:	795b      	ldrb	r3, [r3, #5]
   1464c:	2b00      	cmp	r3, #0
   1464e:	d02a      	beq.n	146a6 <endCall+0x182>
		{
			m2mEventCalls++;
   14650:	4b38      	ldr	r3, [pc, #224]	; (14734 <endCall+0x210>)
   14652:	781b      	ldrb	r3, [r3, #0]
   14654:	3301      	adds	r3, #1
   14656:	b2da      	uxtb	r2, r3
   14658:	4b36      	ldr	r3, [pc, #216]	; (14734 <endCall+0x210>)
   1465a:	701a      	strb	r2, [r3, #0]
			if(m2mAck)
   1465c:	4b36      	ldr	r3, [pc, #216]	; (14738 <endCall+0x214>)
   1465e:	781b      	ldrb	r3, [r3, #0]
   14660:	2b00      	cmp	r3, #0
   14662:	d006      	beq.n	14672 <endCall+0x14e>
			{
				setM2MEventState(m2mEventNo,ME_CLEARED);
   14664:	4b35      	ldr	r3, [pc, #212]	; (1473c <endCall+0x218>)
   14666:	781b      	ldrb	r3, [r3, #0]
   14668:	2100      	movs	r1, #0
   1466a:	0018      	movs	r0, r3
   1466c:	4b34      	ldr	r3, [pc, #208]	; (14740 <endCall+0x21c>)
   1466e:	4798      	blx	r3
   14670:	e016      	b.n	146a0 <endCall+0x17c>
			}
			else
			{
				if(m2mEventCalls<2)
   14672:	4b30      	ldr	r3, [pc, #192]	; (14734 <endCall+0x210>)
   14674:	781b      	ldrb	r3, [r3, #0]
   14676:	2b01      	cmp	r3, #1
   14678:	d80c      	bhi.n	14694 <endCall+0x170>
				{
					tempEventStageTime=xTaskGetTickCount();
   1467a:	4b29      	ldr	r3, [pc, #164]	; (14720 <endCall+0x1fc>)
   1467c:	4798      	blx	r3
   1467e:	0002      	movs	r2, r0
   14680:	4b28      	ldr	r3, [pc, #160]	; (14724 <endCall+0x200>)
   14682:	601a      	str	r2, [r3, #0]
					stagedEventType=m2mEventNo;
   14684:	4b2d      	ldr	r3, [pc, #180]	; (1473c <endCall+0x218>)
   14686:	781a      	ldrb	r2, [r3, #0]
   14688:	4b28      	ldr	r3, [pc, #160]	; (1472c <endCall+0x208>)
   1468a:	701a      	strb	r2, [r3, #0]
					m2mEventStaged=true;
   1468c:	4b2d      	ldr	r3, [pc, #180]	; (14744 <endCall+0x220>)
   1468e:	2201      	movs	r2, #1
   14690:	701a      	strb	r2, [r3, #0]
   14692:	e005      	b.n	146a0 <endCall+0x17c>
				}
				else
				{
					setM2MEventState(m2mEventNo,ME_NOTAVAILABLE);
   14694:	4b29      	ldr	r3, [pc, #164]	; (1473c <endCall+0x218>)
   14696:	781b      	ldrb	r3, [r3, #0]
   14698:	2103      	movs	r1, #3
   1469a:	0018      	movs	r0, r3
   1469c:	4b28      	ldr	r3, [pc, #160]	; (14740 <endCall+0x21c>)
   1469e:	4798      	blx	r3
				}
			}
			m2mEvent = false;
   146a0:	4b19      	ldr	r3, [pc, #100]	; (14708 <endCall+0x1e4>)
   146a2:	2200      	movs	r2, #0
   146a4:	701a      	strb	r2, [r3, #0]
		}
		keyPressed=false;
   146a6:	4b28      	ldr	r3, [pc, #160]	; (14748 <endCall+0x224>)
   146a8:	2200      	movs	r2, #0
   146aa:	701a      	strb	r2, [r3, #0]
		m2mAck=false;
   146ac:	4b22      	ldr	r3, [pc, #136]	; (14738 <endCall+0x214>)
   146ae:	2200      	movs	r2, #0
   146b0:	701a      	strb	r2, [r3, #0]
	}
	callAccepted = false;
   146b2:	4b17      	ldr	r3, [pc, #92]	; (14710 <endCall+0x1ec>)
   146b4:	2200      	movs	r2, #0
   146b6:	701a      	strb	r2, [r3, #0]
	currentStatus = 'N';
   146b8:	4b11      	ldr	r3, [pc, #68]	; (14700 <endCall+0x1dc>)
   146ba:	224e      	movs	r2, #78	; 0x4e
   146bc:	701a      	strb	r2, [r3, #0]
	currentCallStatus = 'N';
   146be:	4b11      	ldr	r3, [pc, #68]	; (14704 <endCall+0x1e0>)
   146c0:	224e      	movs	r2, #78	; 0x4e
   146c2:	701a      	strb	r2, [r3, #0]

	isRegisteredNumber=false;
   146c4:	4b21      	ldr	r3, [pc, #132]	; (1474c <endCall+0x228>)
   146c6:	2200      	movs	r2, #0
   146c8:	701a      	strb	r2, [r3, #0]
	obtainEventTimer = xTaskGetTickCount();
   146ca:	4b15      	ldr	r3, [pc, #84]	; (14720 <endCall+0x1fc>)
   146cc:	4798      	blx	r3
   146ce:	0002      	movs	r2, r0
   146d0:	4b1f      	ldr	r3, [pc, #124]	; (14750 <endCall+0x22c>)
   146d2:	601a      	str	r2, [r3, #0]
	obtainNewEvent = false;
   146d4:	4b1f      	ldr	r3, [pc, #124]	; (14754 <endCall+0x230>)
   146d6:	2200      	movs	r2, #0
   146d8:	701a      	strb	r2, [r3, #0]
}
   146da:	46c0      	nop			; (mov r8, r8)
   146dc:	46bd      	mov	sp, r7
   146de:	bd80      	pop	{r7, pc}
   146e0:	200006e4 	.word	0x200006e4
   146e4:	2000079c 	.word	0x2000079c
   146e8:	00013099 	.word	0x00013099
   146ec:	0001ce41 	.word	0x0001ce41
   146f0:	0001fd79 	.word	0x0001fd79
   146f4:	20000744 	.word	0x20000744
   146f8:	2000062c 	.word	0x2000062c
   146fc:	2000080b 	.word	0x2000080b
   14700:	200007dc 	.word	0x200007dc
   14704:	2000078f 	.word	0x2000078f
   14708:	20000743 	.word	0x20000743
   1470c:	200006e5 	.word	0x200006e5
   14710:	2000079e 	.word	0x2000079e
   14714:	20000654 	.word	0x20000654
   14718:	20000614 	.word	0x20000614
   1471c:	200007d3 	.word	0x200007d3
   14720:	000200dd 	.word	0x000200dd
   14724:	200007f0 	.word	0x200007f0
   14728:	20000763 	.word	0x20000763
   1472c:	20000775 	.word	0x20000775
   14730:	20000554 	.word	0x20000554
   14734:	200007d4 	.word	0x200007d4
   14738:	2000072c 	.word	0x2000072c
   1473c:	2000072d 	.word	0x2000072d
   14740:	0001bdc5 	.word	0x0001bdc5
   14744:	2000078e 	.word	0x2000078e
   14748:	200007d0 	.word	0x200007d0
   1474c:	20000798 	.word	0x20000798
   14750:	20000810 	.word	0x20000810
   14754:	20000772 	.word	0x20000772

00014758 <makeCall>:


void makeCall(void)
{
   14758:	b580      	push	{r7, lr}
   1475a:	b086      	sub	sp, #24
   1475c:	af00      	add	r7, sp, #0
	inCall=true;
   1475e:	4b20      	ldr	r3, [pc, #128]	; (147e0 <makeCall+0x88>)
   14760:	2201      	movs	r2, #1
   14762:	701a      	strb	r2, [r3, #0]
	
	char command[20] = {0};
   14764:	1d3b      	adds	r3, r7, #4
   14766:	0018      	movs	r0, r3
   14768:	2314      	movs	r3, #20
   1476a:	001a      	movs	r2, r3
   1476c:	2100      	movs	r1, #0
   1476e:	4b1d      	ldr	r3, [pc, #116]	; (147e4 <makeCall+0x8c>)
   14770:	4798      	blx	r3
	
	if(m2m_Numbers_struct.m2mSetting && m2mEvent)
   14772:	4b1d      	ldr	r3, [pc, #116]	; (147e8 <makeCall+0x90>)
   14774:	795b      	ldrb	r3, [r3, #5]
   14776:	2b00      	cmp	r3, #0
   14778:	d008      	beq.n	1478c <makeCall+0x34>
   1477a:	4b1c      	ldr	r3, [pc, #112]	; (147ec <makeCall+0x94>)
   1477c:	781b      	ldrb	r3, [r3, #0]
   1477e:	2b00      	cmp	r3, #0
   14780:	d004      	beq.n	1478c <makeCall+0x34>
	{
		getM2MRemoteNumber(command);
   14782:	1d3b      	adds	r3, r7, #4
   14784:	0018      	movs	r0, r3
   14786:	4b1a      	ldr	r3, [pc, #104]	; (147f0 <makeCall+0x98>)
   14788:	4798      	blx	r3
   1478a:	e00f      	b.n	147ac <makeCall+0x54>
	}
	else
	{
		if(retries)
   1478c:	4b19      	ldr	r3, [pc, #100]	; (147f4 <makeCall+0x9c>)
   1478e:	781b      	ldrb	r3, [r3, #0]
   14790:	2b00      	cmp	r3, #0
   14792:	d007      	beq.n	147a4 <makeCall+0x4c>
		{
			getIndexedNumber(command,user_count_struct.secondaryNumberIndex);
   14794:	4b18      	ldr	r3, [pc, #96]	; (147f8 <makeCall+0xa0>)
   14796:	791a      	ldrb	r2, [r3, #4]
   14798:	1d3b      	adds	r3, r7, #4
   1479a:	0011      	movs	r1, r2
   1479c:	0018      	movs	r0, r3
   1479e:	4b17      	ldr	r3, [pc, #92]	; (147fc <makeCall+0xa4>)
   147a0:	4798      	blx	r3
   147a2:	e003      	b.n	147ac <makeCall+0x54>
		}
		else
		{
			getActiveNumber(command);
   147a4:	1d3b      	adds	r3, r7, #4
   147a6:	0018      	movs	r0, r3
   147a8:	4b15      	ldr	r3, [pc, #84]	; (14800 <makeCall+0xa8>)
   147aa:	4798      	blx	r3
		}
	}
	gsm_call_to_dial_a_number(command);
   147ac:	1d3b      	adds	r3, r7, #4
   147ae:	0018      	movs	r0, r3
   147b0:	4b14      	ldr	r3, [pc, #80]	; (14804 <makeCall+0xac>)
   147b2:	4798      	blx	r3
	setCallStateOnLCD(LCDCALLSTATE_OUTGOING,command,false);
   147b4:	1d3b      	adds	r3, r7, #4
   147b6:	2200      	movs	r2, #0
   147b8:	0019      	movs	r1, r3
   147ba:	2003      	movs	r0, #3
   147bc:	4b12      	ldr	r3, [pc, #72]	; (14808 <makeCall+0xb0>)
   147be:	4798      	blx	r3
	callCutWait = xTaskGetTickCount();
   147c0:	4b12      	ldr	r3, [pc, #72]	; (1480c <makeCall+0xb4>)
   147c2:	4798      	blx	r3
   147c4:	0002      	movs	r2, r0
   147c6:	4b12      	ldr	r3, [pc, #72]	; (14810 <makeCall+0xb8>)
   147c8:	601a      	str	r2, [r3, #0]
	currentStatus = 'R';
   147ca:	4b12      	ldr	r3, [pc, #72]	; (14814 <makeCall+0xbc>)
   147cc:	2252      	movs	r2, #82	; 0x52
   147ce:	701a      	strb	r2, [r3, #0]
	currentCallStatus = 'O';
   147d0:	4b11      	ldr	r3, [pc, #68]	; (14818 <makeCall+0xc0>)
   147d2:	224f      	movs	r2, #79	; 0x4f
   147d4:	701a      	strb	r2, [r3, #0]
}
   147d6:	46c0      	nop			; (mov r8, r8)
   147d8:	46bd      	mov	sp, r7
   147da:	b006      	add	sp, #24
   147dc:	bd80      	pop	{r7, pc}
   147de:	46c0      	nop			; (mov r8, r8)
   147e0:	2000079c 	.word	0x2000079c
   147e4:	000289e3 	.word	0x000289e3
   147e8:	20000554 	.word	0x20000554
   147ec:	20000743 	.word	0x20000743
   147f0:	00010b09 	.word	0x00010b09
   147f4:	200006e5 	.word	0x200006e5
   147f8:	20000614 	.word	0x20000614
   147fc:	00010919 	.word	0x00010919
   14800:	00010d21 	.word	0x00010d21
   14804:	00012ed5 	.word	0x00012ed5
   14808:	0001ce41 	.word	0x0001ce41
   1480c:	000200dd 	.word	0x000200dd
   14810:	20000814 	.word	0x20000814
   14814:	200007dc 	.word	0x200007dc
   14818:	2000078f 	.word	0x2000078f

0001481c <acceptCall>:

void acceptCall(void)
{
   1481c:	b580      	push	{r7, lr}
   1481e:	af00      	add	r7, sp, #0
	isRegisteredNumber=false;   //clear flag for next call, in case any error occures and endCall() is not called for ending the call
   14820:	4b0a      	ldr	r3, [pc, #40]	; (1484c <acceptCall+0x30>)
   14822:	2200      	movs	r2, #0
   14824:	701a      	strb	r2, [r3, #0]
	callAccepted = true;
   14826:	4b0a      	ldr	r3, [pc, #40]	; (14850 <acceptCall+0x34>)
   14828:	2201      	movs	r2, #1
   1482a:	701a      	strb	r2, [r3, #0]
	gsm_answer_an_incomming_call();
   1482c:	4b09      	ldr	r3, [pc, #36]	; (14854 <acceptCall+0x38>)
   1482e:	4798      	blx	r3
	currentStatus = 'I';
   14830:	4b09      	ldr	r3, [pc, #36]	; (14858 <acceptCall+0x3c>)
   14832:	2249      	movs	r2, #73	; 0x49
   14834:	701a      	strb	r2, [r3, #0]
	currentCallStatus = 'I';
   14836:	4b09      	ldr	r3, [pc, #36]	; (1485c <acceptCall+0x40>)
   14838:	2249      	movs	r2, #73	; 0x49
   1483a:	701a      	strb	r2, [r3, #0]
	playSound('M',true);
   1483c:	2101      	movs	r1, #1
   1483e:	204d      	movs	r0, #77	; 0x4d
   14840:	4b07      	ldr	r3, [pc, #28]	; (14860 <acceptCall+0x44>)
   14842:	4798      	blx	r3
	//displayInIncomingCall
}
   14844:	46c0      	nop			; (mov r8, r8)
   14846:	46bd      	mov	sp, r7
   14848:	bd80      	pop	{r7, pc}
   1484a:	46c0      	nop			; (mov r8, r8)
   1484c:	20000798 	.word	0x20000798
   14850:	2000079e 	.word	0x2000079e
   14854:	00012f6d 	.word	0x00012f6d
   14858:	200007dc 	.word	0x200007dc
   1485c:	2000078f 	.word	0x2000078f
   14860:	00014865 	.word	0x00014865

00014864 <playSound>:

//void playSound(char actionType, bool newAction=true)
void playSound(char actionTypeT, bool newAction)
{
   14864:	b580      	push	{r7, lr}
   14866:	b082      	sub	sp, #8
   14868:	af00      	add	r7, sp, #0
   1486a:	0002      	movs	r2, r0
   1486c:	1dfb      	adds	r3, r7, #7
   1486e:	701a      	strb	r2, [r3, #0]
   14870:	1dbb      	adds	r3, r7, #6
   14872:	1c0a      	adds	r2, r1, #0
   14874:	701a      	strb	r2, [r3, #0]
	gsm_stop_play_record_file();
   14876:	4b14      	ldr	r3, [pc, #80]	; (148c8 <playSound+0x64>)
   14878:	4798      	blx	r3
	bplaySound = true;
   1487a:	4b14      	ldr	r3, [pc, #80]	; (148cc <playSound+0x68>)
   1487c:	2201      	movs	r2, #1
   1487e:	701a      	strb	r2, [r3, #0]
	if (newAction)
   14880:	1dbb      	adds	r3, r7, #6
   14882:	781b      	ldrb	r3, [r3, #0]
   14884:	2b00      	cmp	r3, #0
   14886:	d016      	beq.n	148b6 <playSound+0x52>
	{
		maxPlayingFiles=1;
   14888:	4b11      	ldr	r3, [pc, #68]	; (148d0 <playSound+0x6c>)
   1488a:	2201      	movs	r2, #1
   1488c:	701a      	strb	r2, [r3, #0]
		currentPlayingFileIndex=0;
   1488e:	4b11      	ldr	r3, [pc, #68]	; (148d4 <playSound+0x70>)
   14890:	2200      	movs	r2, #0
   14892:	701a      	strb	r2, [r3, #0]
		playFilesList[currentPlayingFileIndex]=actionTypeT;
   14894:	4b0f      	ldr	r3, [pc, #60]	; (148d4 <playSound+0x70>)
   14896:	781b      	ldrb	r3, [r3, #0]
   14898:	0019      	movs	r1, r3
   1489a:	4b0f      	ldr	r3, [pc, #60]	; (148d8 <playSound+0x74>)
   1489c:	1dfa      	adds	r2, r7, #7
   1489e:	7812      	ldrb	r2, [r2, #0]
   148a0:	545a      	strb	r2, [r3, r1]
		playFilesList[currentPlayingFileIndex+1]='\0';
   148a2:	4b0c      	ldr	r3, [pc, #48]	; (148d4 <playSound+0x70>)
   148a4:	781b      	ldrb	r3, [r3, #0]
   148a6:	3301      	adds	r3, #1
   148a8:	4a0b      	ldr	r2, [pc, #44]	; (148d8 <playSound+0x74>)
   148aa:	2100      	movs	r1, #0
   148ac:	54d1      	strb	r1, [r2, r3]
		actionType = actionTypeT;
   148ae:	4b0b      	ldr	r3, [pc, #44]	; (148dc <playSound+0x78>)
   148b0:	1dfa      	adds	r2, r7, #7
   148b2:	7812      	ldrb	r2, [r2, #0]
   148b4:	701a      	strb	r2, [r3, #0]
	}
	playFile = actionTypeT;
   148b6:	4b0a      	ldr	r3, [pc, #40]	; (148e0 <playSound+0x7c>)
   148b8:	1dfa      	adds	r2, r7, #7
   148ba:	7812      	ldrb	r2, [r2, #0]
   148bc:	701a      	strb	r2, [r3, #0]
}
   148be:	46c0      	nop			; (mov r8, r8)
   148c0:	46bd      	mov	sp, r7
   148c2:	b002      	add	sp, #8
   148c4:	bd80      	pop	{r7, pc}
   148c6:	46c0      	nop			; (mov r8, r8)
   148c8:	000130f9 	.word	0x000130f9
   148cc:	20000862 	.word	0x20000862
   148d0:	200007d5 	.word	0x200007d5
   148d4:	200007c5 	.word	0x200007c5
   148d8:	2000074c 	.word	0x2000074c
   148dc:	20000763 	.word	0x20000763
   148e0:	200007c3 	.word	0x200007c3

000148e4 <playSoundElligible>:

bool playSoundElligible(void)
{
   148e4:	b580      	push	{r7, lr}
   148e6:	af00      	add	r7, sp, #0
	return (bplaySound && ((xTaskGetTickCount() - soundWait) > (soundWaitTime * 100)));
   148e8:	4b0d      	ldr	r3, [pc, #52]	; (14920 <playSoundElligible+0x3c>)
   148ea:	781b      	ldrb	r3, [r3, #0]
   148ec:	2b00      	cmp	r3, #0
   148ee:	d00e      	beq.n	1490e <playSoundElligible+0x2a>
   148f0:	4b0c      	ldr	r3, [pc, #48]	; (14924 <playSoundElligible+0x40>)
   148f2:	4798      	blx	r3
   148f4:	0002      	movs	r2, r0
   148f6:	4b0c      	ldr	r3, [pc, #48]	; (14928 <playSoundElligible+0x44>)
   148f8:	681b      	ldr	r3, [r3, #0]
   148fa:	1ad3      	subs	r3, r2, r3
   148fc:	4a0b      	ldr	r2, [pc, #44]	; (1492c <playSoundElligible+0x48>)
   148fe:	7812      	ldrb	r2, [r2, #0]
   14900:	0011      	movs	r1, r2
   14902:	2264      	movs	r2, #100	; 0x64
   14904:	434a      	muls	r2, r1
   14906:	4293      	cmp	r3, r2
   14908:	d901      	bls.n	1490e <playSoundElligible+0x2a>
   1490a:	2301      	movs	r3, #1
   1490c:	e000      	b.n	14910 <playSoundElligible+0x2c>
   1490e:	2300      	movs	r3, #0
   14910:	1c1a      	adds	r2, r3, #0
   14912:	2301      	movs	r3, #1
   14914:	4013      	ands	r3, r2
   14916:	b2db      	uxtb	r3, r3
}
   14918:	0018      	movs	r0, r3
   1491a:	46bd      	mov	sp, r7
   1491c:	bd80      	pop	{r7, pc}
   1491e:	46c0      	nop			; (mov r8, r8)
   14920:	20000862 	.word	0x20000862
   14924:	000200dd 	.word	0x000200dd
   14928:	2000083c 	.word	0x2000083c
   1492c:	200007d6 	.word	0x200007d6

00014930 <triggerPlaySound>:

void triggerPlaySound(void)
{
   14930:	b580      	push	{r7, lr}
   14932:	af00      	add	r7, sp, #0
	if(maxPlayingFiles>1)
   14934:	4b0b      	ldr	r3, [pc, #44]	; (14964 <triggerPlaySound+0x34>)
   14936:	781b      	ldrb	r3, [r3, #0]
   14938:	2b01      	cmp	r3, #1
   1493a:	d906      	bls.n	1494a <triggerPlaySound+0x1a>
	{
		gsm_play_record_file((char*)playFile,false);
   1493c:	4b0a      	ldr	r3, [pc, #40]	; (14968 <triggerPlaySound+0x38>)
   1493e:	781b      	ldrb	r3, [r3, #0]
   14940:	2100      	movs	r1, #0
   14942:	0018      	movs	r0, r3
   14944:	4b09      	ldr	r3, [pc, #36]	; (1496c <triggerPlaySound+0x3c>)
   14946:	4798      	blx	r3
   14948:	e005      	b.n	14956 <triggerPlaySound+0x26>
	}
	else
	{
		gsm_play_record_file((char*)playFile,true);
   1494a:	4b07      	ldr	r3, [pc, #28]	; (14968 <triggerPlaySound+0x38>)
   1494c:	781b      	ldrb	r3, [r3, #0]
   1494e:	2101      	movs	r1, #1
   14950:	0018      	movs	r0, r3
   14952:	4b06      	ldr	r3, [pc, #24]	; (1496c <triggerPlaySound+0x3c>)
   14954:	4798      	blx	r3
	}
	bplaySound = false;
   14956:	4b06      	ldr	r3, [pc, #24]	; (14970 <triggerPlaySound+0x40>)
   14958:	2200      	movs	r2, #0
   1495a:	701a      	strb	r2, [r3, #0]
}
   1495c:	46c0      	nop			; (mov r8, r8)
   1495e:	46bd      	mov	sp, r7
   14960:	bd80      	pop	{r7, pc}
   14962:	46c0      	nop			; (mov r8, r8)
   14964:	200007d5 	.word	0x200007d5
   14968:	200007c3 	.word	0x200007c3
   1496c:	00013129 	.word	0x00013129
   14970:	20000862 	.word	0x20000862

00014974 <playSoundAgain>:

void playSoundAgain(char *string)
{
   14974:	b580      	push	{r7, lr}
   14976:	b082      	sub	sp, #8
   14978:	af00      	add	r7, sp, #0
   1497a:	6078      	str	r0, [r7, #4]
	if (!bplaySound && gsm_responseLine_is_StopSound_Received(string))
   1497c:	4b1c      	ldr	r3, [pc, #112]	; (149f0 <playSoundAgain+0x7c>)
   1497e:	781b      	ldrb	r3, [r3, #0]
   14980:	2201      	movs	r2, #1
   14982:	4053      	eors	r3, r2
   14984:	b2db      	uxtb	r3, r3
   14986:	2b00      	cmp	r3, #0
   14988:	d02e      	beq.n	149e8 <playSoundAgain+0x74>
   1498a:	687b      	ldr	r3, [r7, #4]
   1498c:	0018      	movs	r0, r3
   1498e:	4b19      	ldr	r3, [pc, #100]	; (149f4 <playSoundAgain+0x80>)
   14990:	4798      	blx	r3
   14992:	1e03      	subs	r3, r0, #0
   14994:	d028      	beq.n	149e8 <playSoundAgain+0x74>
	{
		if(maxPlayingFiles>1)
   14996:	4b18      	ldr	r3, [pc, #96]	; (149f8 <playSoundAgain+0x84>)
   14998:	781b      	ldrb	r3, [r3, #0]
   1499a:	2b01      	cmp	r3, #1
   1499c:	d91c      	bls.n	149d8 <playSoundAgain+0x64>
		{
			if(currentPlayingFileIndex<maxPlayingFiles-1)
   1499e:	4b17      	ldr	r3, [pc, #92]	; (149fc <playSoundAgain+0x88>)
   149a0:	781b      	ldrb	r3, [r3, #0]
   149a2:	001a      	movs	r2, r3
   149a4:	4b14      	ldr	r3, [pc, #80]	; (149f8 <playSoundAgain+0x84>)
   149a6:	781b      	ldrb	r3, [r3, #0]
   149a8:	3b01      	subs	r3, #1
   149aa:	429a      	cmp	r2, r3
   149ac:	da0f      	bge.n	149ce <playSoundAgain+0x5a>
			{
				playSound(playFilesList[++currentPlayingFileIndex],false);
   149ae:	4b13      	ldr	r3, [pc, #76]	; (149fc <playSoundAgain+0x88>)
   149b0:	781b      	ldrb	r3, [r3, #0]
   149b2:	3301      	adds	r3, #1
   149b4:	b2da      	uxtb	r2, r3
   149b6:	4b11      	ldr	r3, [pc, #68]	; (149fc <playSoundAgain+0x88>)
   149b8:	701a      	strb	r2, [r3, #0]
   149ba:	4b10      	ldr	r3, [pc, #64]	; (149fc <playSoundAgain+0x88>)
   149bc:	781b      	ldrb	r3, [r3, #0]
   149be:	001a      	movs	r2, r3
   149c0:	4b0f      	ldr	r3, [pc, #60]	; (14a00 <playSoundAgain+0x8c>)
   149c2:	5c9b      	ldrb	r3, [r3, r2]
   149c4:	2100      	movs	r1, #0
   149c6:	0018      	movs	r0, r3
   149c8:	4b0e      	ldr	r3, [pc, #56]	; (14a04 <playSoundAgain+0x90>)
   149ca:	4798      	blx	r3
		else if(maxPlayingFiles==1)
		{
			playSound('M',true);
		}
	}
}
   149cc:	e00c      	b.n	149e8 <playSoundAgain+0x74>
				playSound('M',true);
   149ce:	2101      	movs	r1, #1
   149d0:	204d      	movs	r0, #77	; 0x4d
   149d2:	4b0c      	ldr	r3, [pc, #48]	; (14a04 <playSoundAgain+0x90>)
   149d4:	4798      	blx	r3
}
   149d6:	e007      	b.n	149e8 <playSoundAgain+0x74>
		else if(maxPlayingFiles==1)
   149d8:	4b07      	ldr	r3, [pc, #28]	; (149f8 <playSoundAgain+0x84>)
   149da:	781b      	ldrb	r3, [r3, #0]
   149dc:	2b01      	cmp	r3, #1
   149de:	d103      	bne.n	149e8 <playSoundAgain+0x74>
			playSound('M',true);
   149e0:	2101      	movs	r1, #1
   149e2:	204d      	movs	r0, #77	; 0x4d
   149e4:	4b07      	ldr	r3, [pc, #28]	; (14a04 <playSoundAgain+0x90>)
   149e6:	4798      	blx	r3
}
   149e8:	46c0      	nop			; (mov r8, r8)
   149ea:	46bd      	mov	sp, r7
   149ec:	b002      	add	sp, #8
   149ee:	bd80      	pop	{r7, pc}
   149f0:	20000862 	.word	0x20000862
   149f4:	000138b5 	.word	0x000138b5
   149f8:	200007d5 	.word	0x200007d5
   149fc:	200007c5 	.word	0x200007c5
   14a00:	2000074c 	.word	0x2000074c
   14a04:	00014865 	.word	0x00014865

00014a08 <playRepeatedFiles>:

void playRepeatedFiles(char *fileList)
{
   14a08:	b580      	push	{r7, lr}
   14a0a:	b082      	sub	sp, #8
   14a0c:	af00      	add	r7, sp, #0
   14a0e:	6078      	str	r0, [r7, #4]
	if(strlen(fileList)<15)
   14a10:	687b      	ldr	r3, [r7, #4]
   14a12:	0018      	movs	r0, r3
   14a14:	4b14      	ldr	r3, [pc, #80]	; (14a68 <playRepeatedFiles+0x60>)
   14a16:	4798      	blx	r3
   14a18:	0003      	movs	r3, r0
   14a1a:	2b0e      	cmp	r3, #14
   14a1c:	d81f      	bhi.n	14a5e <playRepeatedFiles+0x56>
	{
		currentPlayingFileIndex=0;
   14a1e:	4b13      	ldr	r3, [pc, #76]	; (14a6c <playRepeatedFiles+0x64>)
   14a20:	2200      	movs	r2, #0
   14a22:	701a      	strb	r2, [r3, #0]
		maxPlayingFiles=strlen(fileList);
   14a24:	687b      	ldr	r3, [r7, #4]
   14a26:	0018      	movs	r0, r3
   14a28:	4b0f      	ldr	r3, [pc, #60]	; (14a68 <playRepeatedFiles+0x60>)
   14a2a:	4798      	blx	r3
   14a2c:	0003      	movs	r3, r0
   14a2e:	b2da      	uxtb	r2, r3
   14a30:	4b0f      	ldr	r3, [pc, #60]	; (14a70 <playRepeatedFiles+0x68>)
   14a32:	701a      	strb	r2, [r3, #0]
		strcpy(playFilesList,fileList);
   14a34:	687a      	ldr	r2, [r7, #4]
   14a36:	4b0f      	ldr	r3, [pc, #60]	; (14a74 <playRepeatedFiles+0x6c>)
   14a38:	0011      	movs	r1, r2
   14a3a:	0018      	movs	r0, r3
   14a3c:	4b0e      	ldr	r3, [pc, #56]	; (14a78 <playRepeatedFiles+0x70>)
   14a3e:	4798      	blx	r3
		soundWait = xTaskGetTickCount();
   14a40:	4b0e      	ldr	r3, [pc, #56]	; (14a7c <playRepeatedFiles+0x74>)
   14a42:	4798      	blx	r3
   14a44:	0002      	movs	r2, r0
   14a46:	4b0e      	ldr	r3, [pc, #56]	; (14a80 <playRepeatedFiles+0x78>)
   14a48:	601a      	str	r2, [r3, #0]
		playFile = playFilesList[currentPlayingFileIndex];
   14a4a:	4b08      	ldr	r3, [pc, #32]	; (14a6c <playRepeatedFiles+0x64>)
   14a4c:	781b      	ldrb	r3, [r3, #0]
   14a4e:	001a      	movs	r2, r3
   14a50:	4b08      	ldr	r3, [pc, #32]	; (14a74 <playRepeatedFiles+0x6c>)
   14a52:	5c9a      	ldrb	r2, [r3, r2]
   14a54:	4b0b      	ldr	r3, [pc, #44]	; (14a84 <playRepeatedFiles+0x7c>)
   14a56:	701a      	strb	r2, [r3, #0]
		bplaySound = true;
   14a58:	4b0b      	ldr	r3, [pc, #44]	; (14a88 <playRepeatedFiles+0x80>)
   14a5a:	2201      	movs	r2, #1
   14a5c:	701a      	strb	r2, [r3, #0]
	}
}
   14a5e:	46c0      	nop			; (mov r8, r8)
   14a60:	46bd      	mov	sp, r7
   14a62:	b002      	add	sp, #8
   14a64:	bd80      	pop	{r7, pc}
   14a66:	46c0      	nop			; (mov r8, r8)
   14a68:	00028c73 	.word	0x00028c73
   14a6c:	200007c5 	.word	0x200007c5
   14a70:	200007d5 	.word	0x200007d5
   14a74:	2000074c 	.word	0x2000074c
   14a78:	00028c63 	.word	0x00028c63
   14a7c:	000200dd 	.word	0x000200dd
   14a80:	2000083c 	.word	0x2000083c
   14a84:	200007c3 	.word	0x200007c3
   14a88:	20000862 	.word	0x20000862

00014a8c <callTimerExpire>:

bool callTimerExpire(void)
{
   14a8c:	b580      	push	{r7, lr}
   14a8e:	af00      	add	r7, sp, #0
	if(isRinging)
   14a90:	4b12      	ldr	r3, [pc, #72]	; (14adc <callTimerExpire+0x50>)
   14a92:	781b      	ldrb	r3, [r3, #0]
   14a94:	b2db      	uxtb	r3, r3
   14a96:	2b00      	cmp	r3, #0
   14a98:	d00a      	beq.n	14ab0 <callTimerExpire+0x24>
	{
		if(xTaskGetTickCount()-lastRingStateChangeTime>3000)
   14a9a:	4b11      	ldr	r3, [pc, #68]	; (14ae0 <callTimerExpire+0x54>)
   14a9c:	4798      	blx	r3
   14a9e:	0002      	movs	r2, r0
   14aa0:	4b10      	ldr	r3, [pc, #64]	; (14ae4 <callTimerExpire+0x58>)
   14aa2:	681b      	ldr	r3, [r3, #0]
   14aa4:	1ad3      	subs	r3, r2, r3
   14aa6:	4a10      	ldr	r2, [pc, #64]	; (14ae8 <callTimerExpire+0x5c>)
   14aa8:	4293      	cmp	r3, r2
   14aaa:	d912      	bls.n	14ad2 <callTimerExpire+0x46>
		{
			return true;
   14aac:	2301      	movs	r3, #1
   14aae:	e011      	b.n	14ad4 <callTimerExpire+0x48>
		}
	}
	else
	{
		return ((xTaskGetTickCount() - callCutWait) >= (callCutWaitTime * 100));
   14ab0:	4b0b      	ldr	r3, [pc, #44]	; (14ae0 <callTimerExpire+0x54>)
   14ab2:	4798      	blx	r3
   14ab4:	0002      	movs	r2, r0
   14ab6:	4b0d      	ldr	r3, [pc, #52]	; (14aec <callTimerExpire+0x60>)
   14ab8:	681b      	ldr	r3, [r3, #0]
   14aba:	1ad2      	subs	r2, r2, r3
   14abc:	4b0c      	ldr	r3, [pc, #48]	; (14af0 <callTimerExpire+0x64>)
   14abe:	881b      	ldrh	r3, [r3, #0]
   14ac0:	0019      	movs	r1, r3
   14ac2:	2364      	movs	r3, #100	; 0x64
   14ac4:	434b      	muls	r3, r1
   14ac6:	0019      	movs	r1, r3
   14ac8:	2300      	movs	r3, #0
   14aca:	428a      	cmp	r2, r1
   14acc:	415b      	adcs	r3, r3
   14ace:	b2db      	uxtb	r3, r3
   14ad0:	e000      	b.n	14ad4 <callTimerExpire+0x48>
	}
	return false;
   14ad2:	2300      	movs	r3, #0
}
   14ad4:	0018      	movs	r0, r3
   14ad6:	46bd      	mov	sp, r7
   14ad8:	bd80      	pop	{r7, pc}
   14ada:	46c0      	nop			; (mov r8, r8)
   14adc:	2000068e 	.word	0x2000068e
   14ae0:	000200dd 	.word	0x000200dd
   14ae4:	200006cc 	.word	0x200006cc
   14ae8:	00000bb8 	.word	0x00000bb8
   14aec:	20000814 	.word	0x20000814
   14af0:	20000764 	.word	0x20000764

00014af4 <OutGoingcallState>:

char OutGoingcallState(char *response)
{
   14af4:	b580      	push	{r7, lr}
   14af6:	b082      	sub	sp, #8
   14af8:	af00      	add	r7, sp, #0
   14afa:	6078      	str	r0, [r7, #4]
	if(strstr(response,"+CLCC: 1,0,2"))
   14afc:	4a16      	ldr	r2, [pc, #88]	; (14b58 <OutGoingcallState+0x64>)
   14afe:	687b      	ldr	r3, [r7, #4]
   14b00:	0011      	movs	r1, r2
   14b02:	0018      	movs	r0, r3
   14b04:	4b15      	ldr	r3, [pc, #84]	; (14b5c <OutGoingcallState+0x68>)
   14b06:	4798      	blx	r3
   14b08:	1e03      	subs	r3, r0, #0
   14b0a:	d001      	beq.n	14b10 <OutGoingcallState+0x1c>
	{
		return 'D';								//dialling
   14b0c:	2344      	movs	r3, #68	; 0x44
   14b0e:	e01e      	b.n	14b4e <OutGoingcallState+0x5a>
	}
	else if (strstr(response,"+CLCC: 1,0,3"))
   14b10:	4a13      	ldr	r2, [pc, #76]	; (14b60 <OutGoingcallState+0x6c>)
   14b12:	687b      	ldr	r3, [r7, #4]
   14b14:	0011      	movs	r1, r2
   14b16:	0018      	movs	r0, r3
   14b18:	4b10      	ldr	r3, [pc, #64]	; (14b5c <OutGoingcallState+0x68>)
   14b1a:	4798      	blx	r3
   14b1c:	1e03      	subs	r3, r0, #0
   14b1e:	d001      	beq.n	14b24 <OutGoingcallState+0x30>
	{
		return 'R';								//alerting
   14b20:	2352      	movs	r3, #82	; 0x52
   14b22:	e014      	b.n	14b4e <OutGoingcallState+0x5a>
	}
	else if (strstr(response,"+CLCC: 1,0,0"))
   14b24:	4a0f      	ldr	r2, [pc, #60]	; (14b64 <OutGoingcallState+0x70>)
   14b26:	687b      	ldr	r3, [r7, #4]
   14b28:	0011      	movs	r1, r2
   14b2a:	0018      	movs	r0, r3
   14b2c:	4b0b      	ldr	r3, [pc, #44]	; (14b5c <OutGoingcallState+0x68>)
   14b2e:	4798      	blx	r3
   14b30:	1e03      	subs	r3, r0, #0
   14b32:	d001      	beq.n	14b38 <OutGoingcallState+0x44>
	{
		return 'I';								//active call
   14b34:	2349      	movs	r3, #73	; 0x49
   14b36:	e00a      	b.n	14b4e <OutGoingcallState+0x5a>
	}
	else if (strstr(response,"+CLCC: 1,0,6"))
   14b38:	4a0b      	ldr	r2, [pc, #44]	; (14b68 <OutGoingcallState+0x74>)
   14b3a:	687b      	ldr	r3, [r7, #4]
   14b3c:	0011      	movs	r1, r2
   14b3e:	0018      	movs	r0, r3
   14b40:	4b06      	ldr	r3, [pc, #24]	; (14b5c <OutGoingcallState+0x68>)
   14b42:	4798      	blx	r3
   14b44:	1e03      	subs	r3, r0, #0
   14b46:	d001      	beq.n	14b4c <OutGoingcallState+0x58>
	{
		return 'E';								//call ended
   14b48:	2345      	movs	r3, #69	; 0x45
   14b4a:	e000      	b.n	14b4e <OutGoingcallState+0x5a>
	}
	else
	{
		return 'N';
   14b4c:	234e      	movs	r3, #78	; 0x4e
	}
}
   14b4e:	0018      	movs	r0, r3
   14b50:	46bd      	mov	sp, r7
   14b52:	b002      	add	sp, #8
   14b54:	bd80      	pop	{r7, pc}
   14b56:	46c0      	nop			; (mov r8, r8)
   14b58:	00029c0c 	.word	0x00029c0c
   14b5c:	00028ca3 	.word	0x00028ca3
   14b60:	00029c1c 	.word	0x00029c1c
   14b64:	00029c2c 	.word	0x00029c2c
   14b68:	00029c3c 	.word	0x00029c3c

00014b6c <registerEvent>:

bool registerEvent(char eventType)
{
   14b6c:	b580      	push	{r7, lr}
   14b6e:	b082      	sub	sp, #8
   14b70:	af00      	add	r7, sp, #0
   14b72:	0002      	movs	r2, r0
   14b74:	1dfb      	adds	r3, r7, #7
   14b76:	701a      	strb	r2, [r3, #0]
	//if(isSIMReset())
	//{
	//return false;
	//}
	if(user_count_struct.current_user_no_count==0 || user_settings_parameter_struct.responseAddress=='N')
   14b78:	4b36      	ldr	r3, [pc, #216]	; (14c54 <registerEvent+0xe8>)
   14b7a:	789b      	ldrb	r3, [r3, #2]
   14b7c:	2b00      	cmp	r3, #0
   14b7e:	d004      	beq.n	14b8a <registerEvent+0x1e>
   14b80:	4b35      	ldr	r3, [pc, #212]	; (14c58 <registerEvent+0xec>)
   14b82:	795b      	ldrb	r3, [r3, #5]
   14b84:	b2db      	uxtb	r3, r3
   14b86:	2b4e      	cmp	r3, #78	; 0x4e
   14b88:	d101      	bne.n	14b8e <registerEvent+0x22>
	{
		return true;
   14b8a:	2301      	movs	r3, #1
   14b8c:	e05d      	b.n	14c4a <registerEvent+0xde>
	}
	if (!initialized)
   14b8e:	4b33      	ldr	r3, [pc, #204]	; (14c5c <registerEvent+0xf0>)
   14b90:	781b      	ldrb	r3, [r3, #0]
   14b92:	b2db      	uxtb	r3, r3
   14b94:	2201      	movs	r2, #1
   14b96:	4053      	eors	r3, r2
   14b98:	b2db      	uxtb	r3, r3
   14b9a:	2b00      	cmp	r3, #0
   14b9c:	d001      	beq.n	14ba2 <registerEvent+0x36>
	{
		return true;
   14b9e:	2301      	movs	r3, #1
   14ba0:	e053      	b.n	14c4a <registerEvent+0xde>
	}
	if(!eventStaged && actionType==eventType)
   14ba2:	4b2f      	ldr	r3, [pc, #188]	; (14c60 <registerEvent+0xf4>)
   14ba4:	781b      	ldrb	r3, [r3, #0]
   14ba6:	2201      	movs	r2, #1
   14ba8:	4053      	eors	r3, r2
   14baa:	b2db      	uxtb	r3, r3
   14bac:	2b00      	cmp	r3, #0
   14bae:	d007      	beq.n	14bc0 <registerEvent+0x54>
   14bb0:	4b2c      	ldr	r3, [pc, #176]	; (14c64 <registerEvent+0xf8>)
   14bb2:	781b      	ldrb	r3, [r3, #0]
   14bb4:	1dfa      	adds	r2, r7, #7
   14bb6:	7812      	ldrb	r2, [r2, #0]
   14bb8:	429a      	cmp	r2, r3
   14bba:	d101      	bne.n	14bc0 <registerEvent+0x54>
	{
		return true;
   14bbc:	2301      	movs	r3, #1
   14bbe:	e044      	b.n	14c4a <registerEvent+0xde>
	}
	//if ((factory_settings_parameter_struct.ENABLE_M2M==true)?
	//(currentStatus == 'N' && currentCallStatus == 'N' && obtainNewEvent && !eventStaged && !m2mEventStaged):
	//(currentStatus == 'N' && currentCallStatus == 'N' && obtainNewEvent && !eventStaged))
	if(currentStatus == 'N' && currentCallStatus == 'N' && obtainNewEvent && !eventStaged && !m2mEventStaged)
   14bc0:	4b29      	ldr	r3, [pc, #164]	; (14c68 <registerEvent+0xfc>)
   14bc2:	781b      	ldrb	r3, [r3, #0]
   14bc4:	b2db      	uxtb	r3, r3
   14bc6:	2b4e      	cmp	r3, #78	; 0x4e
   14bc8:	d13e      	bne.n	14c48 <registerEvent+0xdc>
   14bca:	4b28      	ldr	r3, [pc, #160]	; (14c6c <registerEvent+0x100>)
   14bcc:	781b      	ldrb	r3, [r3, #0]
   14bce:	b2db      	uxtb	r3, r3
   14bd0:	2b4e      	cmp	r3, #78	; 0x4e
   14bd2:	d139      	bne.n	14c48 <registerEvent+0xdc>
   14bd4:	4b26      	ldr	r3, [pc, #152]	; (14c70 <registerEvent+0x104>)
   14bd6:	781b      	ldrb	r3, [r3, #0]
   14bd8:	2b00      	cmp	r3, #0
   14bda:	d035      	beq.n	14c48 <registerEvent+0xdc>
   14bdc:	4b20      	ldr	r3, [pc, #128]	; (14c60 <registerEvent+0xf4>)
   14bde:	781b      	ldrb	r3, [r3, #0]
   14be0:	2201      	movs	r2, #1
   14be2:	4053      	eors	r3, r2
   14be4:	b2db      	uxtb	r3, r3
   14be6:	2b00      	cmp	r3, #0
   14be8:	d02e      	beq.n	14c48 <registerEvent+0xdc>
   14bea:	4b22      	ldr	r3, [pc, #136]	; (14c74 <registerEvent+0x108>)
   14bec:	781b      	ldrb	r3, [r3, #0]
   14bee:	2201      	movs	r2, #1
   14bf0:	4053      	eors	r3, r2
   14bf2:	b2db      	uxtb	r3, r3
   14bf4:	2b00      	cmp	r3, #0
   14bf6:	d027      	beq.n	14c48 <registerEvent+0xdc>
	{
		if(user_settings_parameter_struct.noCallAddress && checkNoCallTime())
   14bf8:	4b17      	ldr	r3, [pc, #92]	; (14c58 <registerEvent+0xec>)
   14bfa:	7a5b      	ldrb	r3, [r3, #9]
   14bfc:	b2db      	uxtb	r3, r3
   14bfe:	2b00      	cmp	r3, #0
   14c00:	d005      	beq.n	14c0e <registerEvent+0xa2>
   14c02:	4b1d      	ldr	r3, [pc, #116]	; (14c78 <registerEvent+0x10c>)
   14c04:	4798      	blx	r3
   14c06:	1e03      	subs	r3, r0, #0
   14c08:	d001      	beq.n	14c0e <registerEvent+0xa2>
		{
			return true;
   14c0a:	2301      	movs	r3, #1
   14c0c:	e01d      	b.n	14c4a <registerEvent+0xde>
		}
		retries=0;
   14c0e:	4b1b      	ldr	r3, [pc, #108]	; (14c7c <registerEvent+0x110>)
   14c10:	2200      	movs	r2, #0
   14c12:	701a      	strb	r2, [r3, #0]
		if(user_settings_parameter_struct.eventStageAddress>0x00)
   14c14:	4b10      	ldr	r3, [pc, #64]	; (14c58 <registerEvent+0xec>)
   14c16:	7a1b      	ldrb	r3, [r3, #8]
   14c18:	b2db      	uxtb	r3, r3
   14c1a:	2b00      	cmp	r3, #0
   14c1c:	d00c      	beq.n	14c38 <registerEvent+0xcc>
		{
			tempEventStageTime=xTaskGetTickCount();
   14c1e:	4b18      	ldr	r3, [pc, #96]	; (14c80 <registerEvent+0x114>)
   14c20:	4798      	blx	r3
   14c22:	0002      	movs	r2, r0
   14c24:	4b17      	ldr	r3, [pc, #92]	; (14c84 <registerEvent+0x118>)
   14c26:	601a      	str	r2, [r3, #0]
			stagedEventType=eventType;
   14c28:	4b17      	ldr	r3, [pc, #92]	; (14c88 <registerEvent+0x11c>)
   14c2a:	1dfa      	adds	r2, r7, #7
   14c2c:	7812      	ldrb	r2, [r2, #0]
   14c2e:	701a      	strb	r2, [r3, #0]
			eventStaged=true;
   14c30:	4b0b      	ldr	r3, [pc, #44]	; (14c60 <registerEvent+0xf4>)
   14c32:	2201      	movs	r2, #1
   14c34:	701a      	strb	r2, [r3, #0]
   14c36:	e005      	b.n	14c44 <registerEvent+0xd8>
		}
		else
		{
			actionType = eventType;
   14c38:	4b0a      	ldr	r3, [pc, #40]	; (14c64 <registerEvent+0xf8>)
   14c3a:	1dfa      	adds	r2, r7, #7
   14c3c:	7812      	ldrb	r2, [r2, #0]
   14c3e:	701a      	strb	r2, [r3, #0]
			makeResponseAction();
   14c40:	4b12      	ldr	r3, [pc, #72]	; (14c8c <registerEvent+0x120>)
   14c42:	4798      	blx	r3
		}
		return true;
   14c44:	2301      	movs	r3, #1
   14c46:	e000      	b.n	14c4a <registerEvent+0xde>
	}
	else
	{
		return false;
   14c48:	2300      	movs	r3, #0
	}
}
   14c4a:	0018      	movs	r0, r3
   14c4c:	46bd      	mov	sp, r7
   14c4e:	b002      	add	sp, #8
   14c50:	bd80      	pop	{r7, pc}
   14c52:	46c0      	nop			; (mov r8, r8)
   14c54:	20000614 	.word	0x20000614
   14c58:	20000654 	.word	0x20000654
   14c5c:	2000079d 	.word	0x2000079d
   14c60:	200007d3 	.word	0x200007d3
   14c64:	20000763 	.word	0x20000763
   14c68:	200007dc 	.word	0x200007dc
   14c6c:	2000078f 	.word	0x2000078f
   14c70:	20000772 	.word	0x20000772
   14c74:	2000078e 	.word	0x2000078e
   14c78:	00017379 	.word	0x00017379
   14c7c:	200006e5 	.word	0x200006e5
   14c80:	000200dd 	.word	0x000200dd
   14c84:	200007f0 	.word	0x200007f0
   14c88:	20000775 	.word	0x20000775
   14c8c:	000144ed 	.word	0x000144ed

00014c90 <registerM2MEvent>:

void registerM2MEvent(uint8_t eventNo)
{
   14c90:	b580      	push	{r7, lr}
   14c92:	b082      	sub	sp, #8
   14c94:	af00      	add	r7, sp, #0
   14c96:	0002      	movs	r2, r0
   14c98:	1dfb      	adds	r3, r7, #7
   14c9a:	701a      	strb	r2, [r3, #0]
	if (!initialized)
   14c9c:	4b20      	ldr	r3, [pc, #128]	; (14d20 <registerM2MEvent+0x90>)
   14c9e:	781b      	ldrb	r3, [r3, #0]
   14ca0:	b2db      	uxtb	r3, r3
   14ca2:	2201      	movs	r2, #1
   14ca4:	4053      	eors	r3, r2
   14ca6:	b2db      	uxtb	r3, r3
   14ca8:	2b00      	cmp	r3, #0
   14caa:	d006      	beq.n	14cba <registerM2MEvent+0x2a>
	{
		setM2MEventState(eventNo,ME_CLEARED);
   14cac:	1dfb      	adds	r3, r7, #7
   14cae:	781b      	ldrb	r3, [r3, #0]
   14cb0:	2100      	movs	r1, #0
   14cb2:	0018      	movs	r0, r3
   14cb4:	4b1b      	ldr	r3, [pc, #108]	; (14d24 <registerM2MEvent+0x94>)
   14cb6:	4798      	blx	r3
		return;
   14cb8:	e02e      	b.n	14d18 <registerM2MEvent+0x88>
	}

	if (currentStatus == 'N' && currentCallStatus == 'N' && obtainNewEvent && !eventStaged && !m2mEventStaged)
   14cba:	4b1b      	ldr	r3, [pc, #108]	; (14d28 <registerM2MEvent+0x98>)
   14cbc:	781b      	ldrb	r3, [r3, #0]
   14cbe:	b2db      	uxtb	r3, r3
   14cc0:	2b4e      	cmp	r3, #78	; 0x4e
   14cc2:	d129      	bne.n	14d18 <registerM2MEvent+0x88>
   14cc4:	4b19      	ldr	r3, [pc, #100]	; (14d2c <registerM2MEvent+0x9c>)
   14cc6:	781b      	ldrb	r3, [r3, #0]
   14cc8:	b2db      	uxtb	r3, r3
   14cca:	2b4e      	cmp	r3, #78	; 0x4e
   14ccc:	d124      	bne.n	14d18 <registerM2MEvent+0x88>
   14cce:	4b18      	ldr	r3, [pc, #96]	; (14d30 <registerM2MEvent+0xa0>)
   14cd0:	781b      	ldrb	r3, [r3, #0]
   14cd2:	2b00      	cmp	r3, #0
   14cd4:	d020      	beq.n	14d18 <registerM2MEvent+0x88>
   14cd6:	4b17      	ldr	r3, [pc, #92]	; (14d34 <registerM2MEvent+0xa4>)
   14cd8:	781b      	ldrb	r3, [r3, #0]
   14cda:	2201      	movs	r2, #1
   14cdc:	4053      	eors	r3, r2
   14cde:	b2db      	uxtb	r3, r3
   14ce0:	2b00      	cmp	r3, #0
   14ce2:	d019      	beq.n	14d18 <registerM2MEvent+0x88>
   14ce4:	4b14      	ldr	r3, [pc, #80]	; (14d38 <registerM2MEvent+0xa8>)
   14ce6:	781b      	ldrb	r3, [r3, #0]
   14ce8:	2201      	movs	r2, #1
   14cea:	4053      	eors	r3, r2
   14cec:	b2db      	uxtb	r3, r3
   14cee:	2b00      	cmp	r3, #0
   14cf0:	d012      	beq.n	14d18 <registerM2MEvent+0x88>
	{
		setM2MEventState(eventNo,ME_SERVICING);
   14cf2:	1dfb      	adds	r3, r7, #7
   14cf4:	781b      	ldrb	r3, [r3, #0]
   14cf6:	2102      	movs	r1, #2
   14cf8:	0018      	movs	r0, r3
   14cfa:	4b0a      	ldr	r3, [pc, #40]	; (14d24 <registerM2MEvent+0x94>)
   14cfc:	4798      	blx	r3
		m2mEvent=true;
   14cfe:	4b0f      	ldr	r3, [pc, #60]	; (14d3c <registerM2MEvent+0xac>)
   14d00:	2201      	movs	r2, #1
   14d02:	701a      	strb	r2, [r3, #0]
		m2mEventNo = eventNo;
   14d04:	4b0e      	ldr	r3, [pc, #56]	; (14d40 <registerM2MEvent+0xb0>)
   14d06:	1dfa      	adds	r2, r7, #7
   14d08:	7812      	ldrb	r2, [r2, #0]
   14d0a:	701a      	strb	r2, [r3, #0]
		m2mEventCalls=0;
   14d0c:	4b0d      	ldr	r3, [pc, #52]	; (14d44 <registerM2MEvent+0xb4>)
   14d0e:	2200      	movs	r2, #0
   14d10:	701a      	strb	r2, [r3, #0]
		makeResponseAction();
   14d12:	4b0d      	ldr	r3, [pc, #52]	; (14d48 <registerM2MEvent+0xb8>)
   14d14:	4798      	blx	r3
		return;
   14d16:	46c0      	nop			; (mov r8, r8)
	}
}
   14d18:	46bd      	mov	sp, r7
   14d1a:	b002      	add	sp, #8
   14d1c:	bd80      	pop	{r7, pc}
   14d1e:	46c0      	nop			; (mov r8, r8)
   14d20:	2000079d 	.word	0x2000079d
   14d24:	0001bdc5 	.word	0x0001bdc5
   14d28:	200007dc 	.word	0x200007dc
   14d2c:	2000078f 	.word	0x2000078f
   14d30:	20000772 	.word	0x20000772
   14d34:	200007d3 	.word	0x200007d3
   14d38:	2000078e 	.word	0x2000078e
   14d3c:	20000743 	.word	0x20000743
   14d40:	2000072d 	.word	0x2000072d
   14d44:	200007d4 	.word	0x200007d4
   14d48:	000144ed 	.word	0x000144ed

00014d4c <setMotorMGRResponse>:

void setMotorMGRResponse(char response)
{
   14d4c:	b580      	push	{r7, lr}
   14d4e:	b082      	sub	sp, #8
   14d50:	af00      	add	r7, sp, #0
   14d52:	0002      	movs	r2, r0
   14d54:	1dfb      	adds	r3, r7, #7
   14d56:	701a      	strb	r2, [r3, #0]
	if(currentStatus!='I')    // not in Call than return.
   14d58:	4b07      	ldr	r3, [pc, #28]	; (14d78 <setMotorMGRResponse+0x2c>)
   14d5a:	781b      	ldrb	r3, [r3, #0]
   14d5c:	b2db      	uxtb	r3, r3
   14d5e:	2b49      	cmp	r3, #73	; 0x49
   14d60:	d106      	bne.n	14d70 <setMotorMGRResponse+0x24>
	{
		return;
	}
	playSound(response,true);
   14d62:	1dfb      	adds	r3, r7, #7
   14d64:	781b      	ldrb	r3, [r3, #0]
   14d66:	2101      	movs	r1, #1
   14d68:	0018      	movs	r0, r3
   14d6a:	4b04      	ldr	r3, [pc, #16]	; (14d7c <setMotorMGRResponse+0x30>)
   14d6c:	4798      	blx	r3
   14d6e:	e000      	b.n	14d72 <setMotorMGRResponse+0x26>
		return;
   14d70:	46c0      	nop			; (mov r8, r8)
}
   14d72:	46bd      	mov	sp, r7
   14d74:	b002      	add	sp, #8
   14d76:	bd80      	pop	{r7, pc}
   14d78:	200007dc 	.word	0x200007dc
   14d7c:	00014865 	.word	0x00014865

00014d80 <checkRespSMS>:

void checkRespSMS(char t1)
{
   14d80:	b580      	push	{r7, lr}
   14d82:	b082      	sub	sp, #8
   14d84:	af00      	add	r7, sp, #0
   14d86:	0002      	movs	r2, r0
   14d88:	1dfb      	adds	r3, r7, #7
   14d8a:	701a      	strb	r2, [r3, #0]
	if (!callAccepted && user_settings_parameter_struct.responseAddress=='A')
   14d8c:	4b0c      	ldr	r3, [pc, #48]	; (14dc0 <checkRespSMS+0x40>)
   14d8e:	781b      	ldrb	r3, [r3, #0]
   14d90:	2201      	movs	r2, #1
   14d92:	4053      	eors	r3, r2
   14d94:	b2db      	uxtb	r3, r3
   14d96:	2b00      	cmp	r3, #0
   14d98:	d00e      	beq.n	14db8 <checkRespSMS+0x38>
   14d9a:	4b0a      	ldr	r3, [pc, #40]	; (14dc4 <checkRespSMS+0x44>)
   14d9c:	795b      	ldrb	r3, [r3, #5]
   14d9e:	b2db      	uxtb	r3, r3
   14da0:	2b41      	cmp	r3, #65	; 0x41
   14da2:	d109      	bne.n	14db8 <checkRespSMS+0x38>
	{
		actionType = t1;
   14da4:	4b08      	ldr	r3, [pc, #32]	; (14dc8 <checkRespSMS+0x48>)
   14da6:	1dfa      	adds	r2, r7, #7
   14da8:	7812      	ldrb	r2, [r2, #0]
   14daa:	701a      	strb	r2, [r3, #0]
		sendSMS("",false,false);
   14dac:	4b07      	ldr	r3, [pc, #28]	; (14dcc <checkRespSMS+0x4c>)
   14dae:	2200      	movs	r2, #0
   14db0:	2100      	movs	r1, #0
   14db2:	0018      	movs	r0, r3
   14db4:	4b06      	ldr	r3, [pc, #24]	; (14dd0 <checkRespSMS+0x50>)
   14db6:	4798      	blx	r3
	}
}
   14db8:	46c0      	nop			; (mov r8, r8)
   14dba:	46bd      	mov	sp, r7
   14dbc:	b002      	add	sp, #8
   14dbe:	bd80      	pop	{r7, pc}
   14dc0:	2000079e 	.word	0x2000079e
   14dc4:	20000654 	.word	0x20000654
   14dc8:	20000763 	.word	0x20000763
   14dcc:	00029c4c 	.word	0x00029c4c
   14dd0:	00017475 	.word	0x00017475

00014dd4 <subDTMF>:

void subDTMF(void)
{
   14dd4:	b580      	push	{r7, lr}
   14dd6:	af00      	add	r7, sp, #0
	gsm_stop_play_record_file();
   14dd8:	4b04      	ldr	r3, [pc, #16]	; (14dec <subDTMF+0x18>)
   14dda:	4798      	blx	r3
	callCutWait =xTaskGetTickCount();
   14ddc:	4b04      	ldr	r3, [pc, #16]	; (14df0 <subDTMF+0x1c>)
   14dde:	4798      	blx	r3
   14de0:	0002      	movs	r2, r0
   14de2:	4b04      	ldr	r3, [pc, #16]	; (14df4 <subDTMF+0x20>)
   14de4:	601a      	str	r2, [r3, #0]
}
   14de6:	46c0      	nop			; (mov r8, r8)
   14de8:	46bd      	mov	sp, r7
   14dea:	bd80      	pop	{r7, pc}
   14dec:	000130f9 	.word	0x000130f9
   14df0:	000200dd 	.word	0x000200dd
   14df4:	20000814 	.word	0x20000814

00014df8 <processOnDTMF>:

void processOnDTMF(char *dtmf_cmd)
{
   14df8:	b580      	push	{r7, lr}
   14dfa:	b084      	sub	sp, #16
   14dfc:	af00      	add	r7, sp, #0
   14dfe:	6078      	str	r0, [r7, #4]
	char dtmf = dtmf_cmd[0];
   14e00:	230f      	movs	r3, #15
   14e02:	18fb      	adds	r3, r7, r3
   14e04:	687a      	ldr	r2, [r7, #4]
   14e06:	7812      	ldrb	r2, [r2, #0]
   14e08:	701a      	strb	r2, [r3, #0]
	
	//LCD_clear();
	//lcd_printf("%c",dtmf);
	if (factory_settings_parameter_struct.ENABLE_M2M)
   14e0a:	4b6a      	ldr	r3, [pc, #424]	; (14fb4 <processOnDTMF+0x1bc>)
   14e0c:	78db      	ldrb	r3, [r3, #3]
   14e0e:	2b00      	cmp	r3, #0
   14e10:	d010      	beq.n	14e34 <processOnDTMF+0x3c>
	{
		if (m2mEvent)
   14e12:	4b69      	ldr	r3, [pc, #420]	; (14fb8 <processOnDTMF+0x1c0>)
   14e14:	781b      	ldrb	r3, [r3, #0]
   14e16:	2b00      	cmp	r3, #0
   14e18:	d100      	bne.n	14e1c <processOnDTMF+0x24>
   14e1a:	e0c7      	b.n	14fac <processOnDTMF+0x1b4>
		{
			if(dtmf == 'A')
   14e1c:	230f      	movs	r3, #15
   14e1e:	18fb      	adds	r3, r7, r3
   14e20:	781b      	ldrb	r3, [r3, #0]
   14e22:	2b41      	cmp	r3, #65	; 0x41
   14e24:	d000      	beq.n	14e28 <processOnDTMF+0x30>
   14e26:	e0c1      	b.n	14fac <processOnDTMF+0x1b4>
			{
				m2mAck=true;
   14e28:	4b64      	ldr	r3, [pc, #400]	; (14fbc <processOnDTMF+0x1c4>)
   14e2a:	2201      	movs	r2, #1
   14e2c:	701a      	strb	r2, [r3, #0]
				gsm_hangup_call();
   14e2e:	4b64      	ldr	r3, [pc, #400]	; (14fc0 <processOnDTMF+0x1c8>)
   14e30:	4798      	blx	r3
		{
			subDTMF();
			voltageOnCall();
		}
	}
}
   14e32:	e0bb      	b.n	14fac <processOnDTMF+0x1b4>
		if (dtmf == '1') //Motor On
   14e34:	230f      	movs	r3, #15
   14e36:	18fb      	adds	r3, r7, r3
   14e38:	781b      	ldrb	r3, [r3, #0]
   14e3a:	2b31      	cmp	r3, #49	; 0x31
   14e3c:	d106      	bne.n	14e4c <processOnDTMF+0x54>
			subDTMF();
   14e3e:	4b61      	ldr	r3, [pc, #388]	; (14fc4 <processOnDTMF+0x1cc>)
   14e40:	4798      	blx	r3
			startMotor(true,false);
   14e42:	2100      	movs	r1, #0
   14e44:	2001      	movs	r0, #1
   14e46:	4b60      	ldr	r3, [pc, #384]	; (14fc8 <processOnDTMF+0x1d0>)
   14e48:	4798      	blx	r3
}
   14e4a:	e0af      	b.n	14fac <processOnDTMF+0x1b4>
		else if (dtmf == '2') //Motor Off
   14e4c:	230f      	movs	r3, #15
   14e4e:	18fb      	adds	r3, r7, r3
   14e50:	781b      	ldrb	r3, [r3, #0]
   14e52:	2b32      	cmp	r3, #50	; 0x32
   14e54:	d107      	bne.n	14e66 <processOnDTMF+0x6e>
			subDTMF();
   14e56:	4b5b      	ldr	r3, [pc, #364]	; (14fc4 <processOnDTMF+0x1cc>)
   14e58:	4798      	blx	r3
			stopMotor(true,false,false);
   14e5a:	2200      	movs	r2, #0
   14e5c:	2100      	movs	r1, #0
   14e5e:	2001      	movs	r0, #1
   14e60:	4b5a      	ldr	r3, [pc, #360]	; (14fcc <processOnDTMF+0x1d4>)
   14e62:	4798      	blx	r3
}
   14e64:	e0a2      	b.n	14fac <processOnDTMF+0x1b4>
		else if (dtmf == '3') //Status
   14e66:	230f      	movs	r3, #15
   14e68:	18fb      	adds	r3, r7, r3
   14e6a:	781b      	ldrb	r3, [r3, #0]
   14e6c:	2b33      	cmp	r3, #51	; 0x33
   14e6e:	d104      	bne.n	14e7a <processOnDTMF+0x82>
			subDTMF();
   14e70:	4b54      	ldr	r3, [pc, #336]	; (14fc4 <processOnDTMF+0x1cc>)
   14e72:	4798      	blx	r3
			statusOnCall();
   14e74:	4b56      	ldr	r3, [pc, #344]	; (14fd0 <processOnDTMF+0x1d8>)
   14e76:	4798      	blx	r3
}
   14e78:	e098      	b.n	14fac <processOnDTMF+0x1b4>
		else if (dtmf == '4') //underground status
   14e7a:	230f      	movs	r3, #15
   14e7c:	18fb      	adds	r3, r7, r3
   14e7e:	781b      	ldrb	r3, [r3, #0]
   14e80:	2b34      	cmp	r3, #52	; 0x34
   14e82:	d10a      	bne.n	14e9a <processOnDTMF+0xa2>
			if (factory_settings_parameter_struct.ENABLE_WATER)
   14e84:	4b4b      	ldr	r3, [pc, #300]	; (14fb4 <processOnDTMF+0x1bc>)
   14e86:	795b      	ldrb	r3, [r3, #5]
   14e88:	2b00      	cmp	r3, #0
   14e8a:	d100      	bne.n	14e8e <processOnDTMF+0x96>
   14e8c:	e08e      	b.n	14fac <processOnDTMF+0x1b4>
				subDTMF();
   14e8e:	4b4d      	ldr	r3, [pc, #308]	; (14fc4 <processOnDTMF+0x1cc>)
   14e90:	4798      	blx	r3
				waterStatusOnCall(false);
   14e92:	2000      	movs	r0, #0
   14e94:	4b4f      	ldr	r3, [pc, #316]	; (14fd4 <processOnDTMF+0x1dc>)
   14e96:	4798      	blx	r3
}
   14e98:	e088      	b.n	14fac <processOnDTMF+0x1b4>
		else if (dtmf == '5') //overHead Status
   14e9a:	230f      	movs	r3, #15
   14e9c:	18fb      	adds	r3, r7, r3
   14e9e:	781b      	ldrb	r3, [r3, #0]
   14ea0:	2b35      	cmp	r3, #53	; 0x35
   14ea2:	d10a      	bne.n	14eba <processOnDTMF+0xc2>
			if (factory_settings_parameter_struct.ENABLE_GP)
   14ea4:	4b43      	ldr	r3, [pc, #268]	; (14fb4 <processOnDTMF+0x1bc>)
   14ea6:	791b      	ldrb	r3, [r3, #4]
   14ea8:	2b00      	cmp	r3, #0
   14eaa:	d100      	bne.n	14eae <processOnDTMF+0xb6>
   14eac:	e07e      	b.n	14fac <processOnDTMF+0x1b4>
				subDTMF();
   14eae:	4b45      	ldr	r3, [pc, #276]	; (14fc4 <processOnDTMF+0x1cc>)
   14eb0:	4798      	blx	r3
				overHeadWaterStatusOnCall(false);
   14eb2:	2000      	movs	r0, #0
   14eb4:	4b48      	ldr	r3, [pc, #288]	; (14fd8 <processOnDTMF+0x1e0>)
   14eb6:	4798      	blx	r3
}
   14eb8:	e078      	b.n	14fac <processOnDTMF+0x1b4>
		else if(dtmf == '0')
   14eba:	230f      	movs	r3, #15
   14ebc:	18fb      	adds	r3, r7, r3
   14ebe:	781b      	ldrb	r3, [r3, #0]
   14ec0:	2b30      	cmp	r3, #48	; 0x30
   14ec2:	d114      	bne.n	14eee <processOnDTMF+0xf6>
			if (factory_settings_parameter_struct.ENABLE_CURRENT)
   14ec4:	4b3b      	ldr	r3, [pc, #236]	; (14fb4 <processOnDTMF+0x1bc>)
   14ec6:	785b      	ldrb	r3, [r3, #1]
   14ec8:	2b00      	cmp	r3, #0
   14eca:	d100      	bne.n	14ece <processOnDTMF+0xd6>
   14ecc:	e06e      	b.n	14fac <processOnDTMF+0x1b4>
				if(zeroPressed)
   14ece:	4b43      	ldr	r3, [pc, #268]	; (14fdc <processOnDTMF+0x1e4>)
   14ed0:	781b      	ldrb	r3, [r3, #0]
   14ed2:	2b00      	cmp	r3, #0
   14ed4:	d007      	beq.n	14ee6 <processOnDTMF+0xee>
					autoSetCurrent();   //to enable or disable current detection
   14ed6:	4b42      	ldr	r3, [pc, #264]	; (14fe0 <processOnDTMF+0x1e8>)
   14ed8:	4798      	blx	r3
					subDTMF();
   14eda:	4b3a      	ldr	r3, [pc, #232]	; (14fc4 <processOnDTMF+0x1cc>)
   14edc:	4798      	blx	r3
					zeroPressed=false;
   14ede:	4b3f      	ldr	r3, [pc, #252]	; (14fdc <processOnDTMF+0x1e4>)
   14ee0:	2200      	movs	r2, #0
   14ee2:	701a      	strb	r2, [r3, #0]
}
   14ee4:	e062      	b.n	14fac <processOnDTMF+0x1b4>
					zeroPressed=true;
   14ee6:	4b3d      	ldr	r3, [pc, #244]	; (14fdc <processOnDTMF+0x1e4>)
   14ee8:	2201      	movs	r2, #1
   14eea:	701a      	strb	r2, [r3, #0]
}
   14eec:	e05e      	b.n	14fac <processOnDTMF+0x1b4>
		else if (dtmf == '7') //Speak Current Ampere On Call
   14eee:	230f      	movs	r3, #15
   14ef0:	18fb      	adds	r3, r7, r3
   14ef2:	781b      	ldrb	r3, [r3, #0]
   14ef4:	2b37      	cmp	r3, #55	; 0x37
   14ef6:	d108      	bne.n	14f0a <processOnDTMF+0x112>
			if (factory_settings_parameter_struct.AMPERE_SPEAK)
   14ef8:	4b2e      	ldr	r3, [pc, #184]	; (14fb4 <processOnDTMF+0x1bc>)
   14efa:	789b      	ldrb	r3, [r3, #2]
   14efc:	2b00      	cmp	r3, #0
   14efe:	d055      	beq.n	14fac <processOnDTMF+0x1b4>
				subDTMF();
   14f00:	4b30      	ldr	r3, [pc, #192]	; (14fc4 <processOnDTMF+0x1cc>)
   14f02:	4798      	blx	r3
				speakAmpere();
   14f04:	4b37      	ldr	r3, [pc, #220]	; (14fe4 <processOnDTMF+0x1ec>)
   14f06:	4798      	blx	r3
}
   14f08:	e050      	b.n	14fac <processOnDTMF+0x1b4>
		else if(dtmf=='D')
   14f0a:	230f      	movs	r3, #15
   14f0c:	18fb      	adds	r3, r7, r3
   14f0e:	781b      	ldrb	r3, [r3, #0]
   14f10:	2b44      	cmp	r3, #68	; 0x44
   14f12:	d10d      	bne.n	14f30 <processOnDTMF+0x138>
			saveAutoStartSettings(true);  //set AutoStart to True in EEPROM
   14f14:	2001      	movs	r0, #1
   14f16:	4b34      	ldr	r3, [pc, #208]	; (14fe8 <processOnDTMF+0x1f0>)
   14f18:	4798      	blx	r3
			resetAutoStart(true);
   14f1a:	2001      	movs	r0, #1
   14f1c:	4b33      	ldr	r3, [pc, #204]	; (14fec <processOnDTMF+0x1f4>)
   14f1e:	4798      	blx	r3
			startMotor(false,false);
   14f20:	2100      	movs	r1, #0
   14f22:	2000      	movs	r0, #0
   14f24:	4b28      	ldr	r3, [pc, #160]	; (14fc8 <processOnDTMF+0x1d0>)
   14f26:	4798      	blx	r3
			sendDTMFTone(0xFF);
   14f28:	20ff      	movs	r0, #255	; 0xff
   14f2a:	4b31      	ldr	r3, [pc, #196]	; (14ff0 <processOnDTMF+0x1f8>)
   14f2c:	4798      	blx	r3
}
   14f2e:	e03d      	b.n	14fac <processOnDTMF+0x1b4>
		else if(dtmf=='C')
   14f30:	230f      	movs	r3, #15
   14f32:	18fb      	adds	r3, r7, r3
   14f34:	781b      	ldrb	r3, [r3, #0]
   14f36:	2b43      	cmp	r3, #67	; 0x43
   14f38:	d10b      	bne.n	14f52 <processOnDTMF+0x15a>
			saveAutoStartSettings(false);  //set AutoStart to false in EEPROM
   14f3a:	2000      	movs	r0, #0
   14f3c:	4b2a      	ldr	r3, [pc, #168]	; (14fe8 <processOnDTMF+0x1f0>)
   14f3e:	4798      	blx	r3
			stopMotor(false,false,true);
   14f40:	2201      	movs	r2, #1
   14f42:	2100      	movs	r1, #0
   14f44:	2000      	movs	r0, #0
   14f46:	4b21      	ldr	r3, [pc, #132]	; (14fcc <processOnDTMF+0x1d4>)
   14f48:	4798      	blx	r3
			sendDTMFTone(0xFF);
   14f4a:	20ff      	movs	r0, #255	; 0xff
   14f4c:	4b28      	ldr	r3, [pc, #160]	; (14ff0 <processOnDTMF+0x1f8>)
   14f4e:	4798      	blx	r3
}
   14f50:	e02c      	b.n	14fac <processOnDTMF+0x1b4>
		else if (dtmf == '8') //Set AUTOTIMER ON
   14f52:	230f      	movs	r3, #15
   14f54:	18fb      	adds	r3, r7, r3
   14f56:	781b      	ldrb	r3, [r3, #0]
   14f58:	2b38      	cmp	r3, #56	; 0x38
   14f5a:	d10c      	bne.n	14f76 <processOnDTMF+0x17e>
			subDTMF();
   14f5c:	4b19      	ldr	r3, [pc, #100]	; (14fc4 <processOnDTMF+0x1cc>)
   14f5e:	4798      	blx	r3
			saveAutoStartSettings(true);  //set AutoStart to True in EEPROM
   14f60:	2001      	movs	r0, #1
   14f62:	4b21      	ldr	r3, [pc, #132]	; (14fe8 <processOnDTMF+0x1f0>)
   14f64:	4798      	blx	r3
			resetAutoStart(true);
   14f66:	2001      	movs	r0, #1
   14f68:	4b20      	ldr	r3, [pc, #128]	; (14fec <processOnDTMF+0x1f4>)
   14f6a:	4798      	blx	r3
			playSound(')',true);     // playFile AutoStart is On
   14f6c:	2101      	movs	r1, #1
   14f6e:	2029      	movs	r0, #41	; 0x29
   14f70:	4b20      	ldr	r3, [pc, #128]	; (14ff4 <processOnDTMF+0x1fc>)
   14f72:	4798      	blx	r3
}
   14f74:	e01a      	b.n	14fac <processOnDTMF+0x1b4>
		else if (dtmf == '9') //Set AUTOTIMER OFF
   14f76:	230f      	movs	r3, #15
   14f78:	18fb      	adds	r3, r7, r3
   14f7a:	781b      	ldrb	r3, [r3, #0]
   14f7c:	2b39      	cmp	r3, #57	; 0x39
   14f7e:	d10c      	bne.n	14f9a <processOnDTMF+0x1a2>
			subDTMF();
   14f80:	4b10      	ldr	r3, [pc, #64]	; (14fc4 <processOnDTMF+0x1cc>)
   14f82:	4798      	blx	r3
			saveAutoStartSettings(false);  //set AUtoStart to False in EEPROM
   14f84:	2000      	movs	r0, #0
   14f86:	4b18      	ldr	r3, [pc, #96]	; (14fe8 <processOnDTMF+0x1f0>)
   14f88:	4798      	blx	r3
			resetAutoStart(true);
   14f8a:	2001      	movs	r0, #1
   14f8c:	4b17      	ldr	r3, [pc, #92]	; (14fec <processOnDTMF+0x1f4>)
   14f8e:	4798      	blx	r3
			playSound('[',true); //playFile autoStart is turned oFF
   14f90:	2101      	movs	r1, #1
   14f92:	205b      	movs	r0, #91	; 0x5b
   14f94:	4b17      	ldr	r3, [pc, #92]	; (14ff4 <processOnDTMF+0x1fc>)
   14f96:	4798      	blx	r3
}
   14f98:	e008      	b.n	14fac <processOnDTMF+0x1b4>
		else if(dtmf == '*')
   14f9a:	230f      	movs	r3, #15
   14f9c:	18fb      	adds	r3, r7, r3
   14f9e:	781b      	ldrb	r3, [r3, #0]
   14fa0:	2b2a      	cmp	r3, #42	; 0x2a
   14fa2:	d103      	bne.n	14fac <processOnDTMF+0x1b4>
			subDTMF();
   14fa4:	4b07      	ldr	r3, [pc, #28]	; (14fc4 <processOnDTMF+0x1cc>)
   14fa6:	4798      	blx	r3
			voltageOnCall();
   14fa8:	4b13      	ldr	r3, [pc, #76]	; (14ff8 <processOnDTMF+0x200>)
   14faa:	4798      	blx	r3
}
   14fac:	46c0      	nop			; (mov r8, r8)
   14fae:	46bd      	mov	sp, r7
   14fb0:	b004      	add	sp, #16
   14fb2:	bd80      	pop	{r7, pc}
   14fb4:	2000062c 	.word	0x2000062c
   14fb8:	20000743 	.word	0x20000743
   14fbc:	2000072c 	.word	0x2000072c
   14fc0:	00013099 	.word	0x00013099
   14fc4:	00014dd5 	.word	0x00014dd5
   14fc8:	0001b641 	.word	0x0001b641
   14fcc:	0001b829 	.word	0x0001b829
   14fd0:	0001bc75 	.word	0x0001bc75
   14fd4:	0001985d 	.word	0x0001985d
   14fd8:	00019715 	.word	0x00019715
   14fdc:	2000080b 	.word	0x2000080b
   14fe0:	0001a281 	.word	0x0001a281
   14fe4:	0001a379 	.word	0x0001a379
   14fe8:	000112a9 	.word	0x000112a9
   14fec:	0001b22d 	.word	0x0001b22d
   14ff0:	00017631 	.word	0x00017631
   14ff4:	00014865 	.word	0x00014865
   14ff8:	0001bd85 	.word	0x0001bd85

00014ffc <processOnSMS>:

void processOnSMS(char *received_command, bool admin,bool response_sms_processed_cmd,bool alterNumber, char *phone_number)
{
   14ffc:	b5f0      	push	{r4, r5, r6, r7, lr}
   14ffe:	46c6      	mov	lr, r8
   15000:	b500      	push	{lr}
   15002:	b0d2      	sub	sp, #328	; 0x148
   15004:	af06      	add	r7, sp, #24
   15006:	60f8      	str	r0, [r7, #12]
   15008:	000c      	movs	r4, r1
   1500a:	0010      	movs	r0, r2
   1500c:	0019      	movs	r1, r3
   1500e:	4be1      	ldr	r3, [pc, #900]	; (15394 <processOnSMS+0x398>)
   15010:	2294      	movs	r2, #148	; 0x94
   15012:	0052      	lsls	r2, r2, #1
   15014:	4694      	mov	ip, r2
   15016:	2208      	movs	r2, #8
   15018:	4690      	mov	r8, r2
   1501a:	44b8      	add	r8, r7
   1501c:	44c4      	add	ip, r8
   1501e:	4463      	add	r3, ip
   15020:	1c22      	adds	r2, r4, #0
   15022:	701a      	strb	r2, [r3, #0]
   15024:	4bdc      	ldr	r3, [pc, #880]	; (15398 <processOnSMS+0x39c>)
   15026:	2294      	movs	r2, #148	; 0x94
   15028:	0052      	lsls	r2, r2, #1
   1502a:	4694      	mov	ip, r2
   1502c:	2208      	movs	r2, #8
   1502e:	4690      	mov	r8, r2
   15030:	44b8      	add	r8, r7
   15032:	44c4      	add	ip, r8
   15034:	4463      	add	r3, ip
   15036:	1c02      	adds	r2, r0, #0
   15038:	701a      	strb	r2, [r3, #0]
   1503a:	4bd8      	ldr	r3, [pc, #864]	; (1539c <processOnSMS+0x3a0>)
   1503c:	2294      	movs	r2, #148	; 0x94
   1503e:	0052      	lsls	r2, r2, #1
   15040:	4694      	mov	ip, r2
   15042:	2208      	movs	r2, #8
   15044:	4690      	mov	r8, r2
   15046:	44b8      	add	r8, r7
   15048:	44c4      	add	ip, r8
   1504a:	4463      	add	r3, ip
   1504c:	1c0a      	adds	r2, r1, #0
   1504e:	701a      	strb	r2, [r3, #0]
	char *copy_received_command;
	char resep_msg[250];
	bool incomingSMSProcessed=false;
   15050:	2328      	movs	r3, #40	; 0x28
   15052:	33ff      	adds	r3, #255	; 0xff
   15054:	2208      	movs	r2, #8
   15056:	4694      	mov	ip, r2
   15058:	44bc      	add	ip, r7
   1505a:	4463      	add	r3, ip
   1505c:	2200      	movs	r2, #0
   1505e:	701a      	strb	r2, [r3, #0]

	copy_received_command = received_command;
   15060:	68fb      	ldr	r3, [r7, #12]
   15062:	228c      	movs	r2, #140	; 0x8c
   15064:	0052      	lsls	r2, r2, #1
   15066:	2108      	movs	r1, #8
   15068:	468c      	mov	ip, r1
   1506a:	44bc      	add	ip, r7
   1506c:	4462      	add	r2, ip
   1506e:	6013      	str	r3, [r2, #0]
	
	if(alterNumber)
   15070:	4bca      	ldr	r3, [pc, #808]	; (1539c <processOnSMS+0x3a0>)
   15072:	2294      	movs	r2, #148	; 0x94
   15074:	0052      	lsls	r2, r2, #1
   15076:	4694      	mov	ip, r2
   15078:	2208      	movs	r2, #8
   1507a:	4690      	mov	r8, r2
   1507c:	44b8      	add	r8, r7
   1507e:	44c4      	add	ip, r8
   15080:	4463      	add	r3, ip
   15082:	781b      	ldrb	r3, [r3, #0]
   15084:	2b00      	cmp	r3, #0
   15086:	d00e      	beq.n	150a6 <processOnSMS+0xaa>
	{
		if(!StringstartsWith(received_command,"AMON"))
   15088:	4ac5      	ldr	r2, [pc, #788]	; (153a0 <processOnSMS+0x3a4>)
   1508a:	68fb      	ldr	r3, [r7, #12]
   1508c:	0011      	movs	r1, r2
   1508e:	0018      	movs	r0, r3
   15090:	4bc4      	ldr	r3, [pc, #784]	; (153a4 <processOnSMS+0x3a8>)
   15092:	4798      	blx	r3
   15094:	0003      	movs	r3, r0
   15096:	001a      	movs	r2, r3
   15098:	2301      	movs	r3, #1
   1509a:	4053      	eors	r3, r2
   1509c:	b2db      	uxtb	r3, r3
   1509e:	2b00      	cmp	r3, #0
   150a0:	d001      	beq.n	150a6 <processOnSMS+0xaa>
   150a2:	f002 f8a7 	bl	171f4 <processOnSMS+0x21f8>
		return;
	}
	
	if (StringstartsWith(received_command,"PRGUPD"))
   150a6:	4ac0      	ldr	r2, [pc, #768]	; (153a8 <processOnSMS+0x3ac>)
   150a8:	68fb      	ldr	r3, [r7, #12]
   150aa:	0011      	movs	r1, r2
   150ac:	0018      	movs	r0, r3
   150ae:	4bbd      	ldr	r3, [pc, #756]	; (153a4 <processOnSMS+0x3a8>)
   150b0:	4798      	blx	r3
   150b2:	1e03      	subs	r3, r0, #0
   150b4:	d029      	beq.n	1510a <processOnSMS+0x10e>
	{
		//if (admin)
		{
			bootloader_parameter.firmware_download_pending = true;
   150b6:	4bbd      	ldr	r3, [pc, #756]	; (153ac <processOnSMS+0x3b0>)
   150b8:	2201      	movs	r2, #1
   150ba:	715a      	strb	r2, [r3, #5]
			memset(bootloader_parameter.firmware_updater_mobile_no, '\0', sizeof(bootloader_parameter.firmware_updater_mobile_no));
   150bc:	4bbc      	ldr	r3, [pc, #752]	; (153b0 <processOnSMS+0x3b4>)
   150be:	2210      	movs	r2, #16
   150c0:	2100      	movs	r1, #0
   150c2:	0018      	movs	r0, r3
   150c4:	4bbb      	ldr	r3, [pc, #748]	; (153b4 <processOnSMS+0x3b8>)
   150c6:	4798      	blx	r3
			strcpy(bootloader_parameter.firmware_updater_mobile_no,phone_number);
   150c8:	23a0      	movs	r3, #160	; 0xa0
   150ca:	005b      	lsls	r3, r3, #1
   150cc:	2208      	movs	r2, #8
   150ce:	4694      	mov	ip, r2
   150d0:	44bc      	add	ip, r7
   150d2:	4463      	add	r3, ip
   150d4:	681a      	ldr	r2, [r3, #0]
   150d6:	4bb6      	ldr	r3, [pc, #728]	; (153b0 <processOnSMS+0x3b4>)
   150d8:	0011      	movs	r1, r2
   150da:	0018      	movs	r0, r3
   150dc:	4bb6      	ldr	r3, [pc, #728]	; (153b8 <processOnSMS+0x3bc>)
   150de:	4798      	blx	r3
			gsm_module_exit_sleep(false);
   150e0:	2000      	movs	r0, #0
   150e2:	4bb6      	ldr	r3, [pc, #728]	; (153bc <processOnSMS+0x3c0>)
   150e4:	4798      	blx	r3

			memcpy(page_data,&bootloader_parameter,sizeof(bootloader_parameter));
   150e6:	49b1      	ldr	r1, [pc, #708]	; (153ac <processOnSMS+0x3b0>)
   150e8:	4bb5      	ldr	r3, [pc, #724]	; (153c0 <processOnSMS+0x3c4>)
   150ea:	221c      	movs	r2, #28
   150ec:	0018      	movs	r0, r3
   150ee:	4bb5      	ldr	r3, [pc, #724]	; (153c4 <processOnSMS+0x3c8>)
   150f0:	4798      	blx	r3
			eeprom_emulator_write_page(BOOTLOADER_PARAMETER_PAGE, page_data);
   150f2:	4bb3      	ldr	r3, [pc, #716]	; (153c0 <processOnSMS+0x3c4>)
   150f4:	0019      	movs	r1, r3
   150f6:	2000      	movs	r0, #0
   150f8:	4bb3      	ldr	r3, [pc, #716]	; (153c8 <processOnSMS+0x3cc>)
   150fa:	4798      	blx	r3
			eeprom_emulator_commit_page_buffer();
   150fc:	4bb3      	ldr	r3, [pc, #716]	; (153cc <processOnSMS+0x3d0>)
   150fe:	4798      	blx	r3
			vTaskDelay(100);
   15100:	2064      	movs	r0, #100	; 0x64
   15102:	4bb3      	ldr	r3, [pc, #716]	; (153d0 <processOnSMS+0x3d4>)
   15104:	4798      	blx	r3
			system_reset();
   15106:	4bb3      	ldr	r3, [pc, #716]	; (153d4 <processOnSMS+0x3d8>)
   15108:	4798      	blx	r3
		}
	}
	
	if (StringstartsWith(received_command,"WAIT"))
   1510a:	4ab3      	ldr	r2, [pc, #716]	; (153d8 <processOnSMS+0x3dc>)
   1510c:	68fb      	ldr	r3, [r7, #12]
   1510e:	0011      	movs	r1, r2
   15110:	0018      	movs	r0, r3
   15112:	4ba4      	ldr	r3, [pc, #656]	; (153a4 <processOnSMS+0x3a8>)
   15114:	4798      	blx	r3
   15116:	1e03      	subs	r3, r0, #0
   15118:	d047      	beq.n	151aa <processOnSMS+0x1ae>
	{
		enum gsm_error err = gsm_disable_call_waiting();
   1511a:	2318      	movs	r3, #24
   1511c:	33ff      	adds	r3, #255	; 0xff
   1511e:	2208      	movs	r2, #8
   15120:	18ba      	adds	r2, r7, r2
   15122:	18d4      	adds	r4, r2, r3
   15124:	4bad      	ldr	r3, [pc, #692]	; (153dc <processOnSMS+0x3e0>)
   15126:	4798      	blx	r3
   15128:	0003      	movs	r3, r0
   1512a:	7023      	strb	r3, [r4, #0]
		incomingSMSProcessed=true;
   1512c:	2328      	movs	r3, #40	; 0x28
   1512e:	33ff      	adds	r3, #255	; 0xff
   15130:	2208      	movs	r2, #8
   15132:	4694      	mov	ip, r2
   15134:	44bc      	add	ip, r7
   15136:	4463      	add	r3, ip
   15138:	2201      	movs	r2, #1
   1513a:	701a      	strb	r2, [r3, #0]
		if (response_sms_processed_cmd == true)
   1513c:	4b96      	ldr	r3, [pc, #600]	; (15398 <processOnSMS+0x39c>)
   1513e:	2294      	movs	r2, #148	; 0x94
   15140:	0052      	lsls	r2, r2, #1
   15142:	4694      	mov	ip, r2
   15144:	2208      	movs	r2, #8
   15146:	4690      	mov	r8, r2
   15148:	44b8      	add	r8, r7
   1514a:	44c4      	add	ip, r8
   1514c:	4463      	add	r3, ip
   1514e:	781b      	ldrb	r3, [r3, #0]
   15150:	2b00      	cmp	r3, #0
   15152:	d101      	bne.n	15158 <processOnSMS+0x15c>
   15154:	f002 f808 	bl	17168 <processOnSMS+0x216c>
		{
			if (err == GSM_ERROR_NONE)
   15158:	2318      	movs	r3, #24
   1515a:	33ff      	adds	r3, #255	; 0xff
   1515c:	2208      	movs	r2, #8
   1515e:	4694      	mov	ip, r2
   15160:	44bc      	add	ip, r7
   15162:	4463      	add	r3, ip
   15164:	781b      	ldrb	r3, [r3, #0]
   15166:	2b00      	cmp	r3, #0
   15168:	d10d      	bne.n	15186 <processOnSMS+0x18a>
			{
				strcpy(resep_msg,"GSM CALL WAITTING DISABLE : SUCCESS");
   1516a:	230c      	movs	r3, #12
   1516c:	2208      	movs	r2, #8
   1516e:	4694      	mov	ip, r2
   15170:	44bc      	add	ip, r7
   15172:	4463      	add	r3, ip
   15174:	4a9a      	ldr	r2, [pc, #616]	; (153e0 <processOnSMS+0x3e4>)
   15176:	ca13      	ldmia	r2!, {r0, r1, r4}
   15178:	c313      	stmia	r3!, {r0, r1, r4}
   1517a:	ca13      	ldmia	r2!, {r0, r1, r4}
   1517c:	c313      	stmia	r3!, {r0, r1, r4}
   1517e:	ca13      	ldmia	r2!, {r0, r1, r4}
   15180:	c313      	stmia	r3!, {r0, r1, r4}
   15182:	f001 fff1 	bl	17168 <processOnSMS+0x216c>
			}
			else
			{
				strcpy(resep_msg,"GSM CALL WAITTING DISABLE : FAILED");
   15186:	230c      	movs	r3, #12
   15188:	2208      	movs	r2, #8
   1518a:	4694      	mov	ip, r2
   1518c:	44bc      	add	ip, r7
   1518e:	4463      	add	r3, ip
   15190:	4a94      	ldr	r2, [pc, #592]	; (153e4 <processOnSMS+0x3e8>)
   15192:	ca13      	ldmia	r2!, {r0, r1, r4}
   15194:	c313      	stmia	r3!, {r0, r1, r4}
   15196:	ca13      	ldmia	r2!, {r0, r1, r4}
   15198:	c313      	stmia	r3!, {r0, r1, r4}
   1519a:	ca03      	ldmia	r2!, {r0, r1}
   1519c:	c303      	stmia	r3!, {r0, r1}
   1519e:	8811      	ldrh	r1, [r2, #0]
   151a0:	8019      	strh	r1, [r3, #0]
   151a2:	7892      	ldrb	r2, [r2, #2]
   151a4:	709a      	strb	r2, [r3, #2]
   151a6:	f001 ffdf 	bl	17168 <processOnSMS+0x216c>
			}
		}
	}
	else if (StringstartsWith(received_command,"CLEARALL"))
   151aa:	4a8f      	ldr	r2, [pc, #572]	; (153e8 <processOnSMS+0x3ec>)
   151ac:	68fb      	ldr	r3, [r7, #12]
   151ae:	0011      	movs	r1, r2
   151b0:	0018      	movs	r0, r3
   151b2:	4b7c      	ldr	r3, [pc, #496]	; (153a4 <processOnSMS+0x3a8>)
   151b4:	4798      	blx	r3
   151b6:	1e03      	subs	r3, r0, #0
   151b8:	d030      	beq.n	1521c <processOnSMS+0x220>
	{
		clearNumbers(admin);
   151ba:	4b76      	ldr	r3, [pc, #472]	; (15394 <processOnSMS+0x398>)
   151bc:	2294      	movs	r2, #148	; 0x94
   151be:	0052      	lsls	r2, r2, #1
   151c0:	4694      	mov	ip, r2
   151c2:	2208      	movs	r2, #8
   151c4:	4690      	mov	r8, r2
   151c6:	44b8      	add	r8, r7
   151c8:	44c4      	add	ip, r8
   151ca:	4463      	add	r3, ip
   151cc:	781b      	ldrb	r3, [r3, #0]
   151ce:	0018      	movs	r0, r3
   151d0:	4b86      	ldr	r3, [pc, #536]	; (153ec <processOnSMS+0x3f0>)
   151d2:	4798      	blx	r3
		incomingSMSProcessed=true;
   151d4:	2328      	movs	r3, #40	; 0x28
   151d6:	33ff      	adds	r3, #255	; 0xff
   151d8:	2208      	movs	r2, #8
   151da:	4694      	mov	ip, r2
   151dc:	44bc      	add	ip, r7
   151de:	4463      	add	r3, ip
   151e0:	2201      	movs	r2, #1
   151e2:	701a      	strb	r2, [r3, #0]
		if (response_sms_processed_cmd == true)
   151e4:	4b6c      	ldr	r3, [pc, #432]	; (15398 <processOnSMS+0x39c>)
   151e6:	2294      	movs	r2, #148	; 0x94
   151e8:	0052      	lsls	r2, r2, #1
   151ea:	4694      	mov	ip, r2
   151ec:	2208      	movs	r2, #8
   151ee:	4690      	mov	r8, r2
   151f0:	44b8      	add	r8, r7
   151f2:	44c4      	add	ip, r8
   151f4:	4463      	add	r3, ip
   151f6:	781b      	ldrb	r3, [r3, #0]
   151f8:	2b00      	cmp	r3, #0
   151fa:	d101      	bne.n	15200 <processOnSMS+0x204>
   151fc:	f001 ffb4 	bl	17168 <processOnSMS+0x216c>
		{
			strcpy(resep_msg,"ALL USER NUMBERS CLEARED");
   15200:	230c      	movs	r3, #12
   15202:	2208      	movs	r2, #8
   15204:	4694      	mov	ip, r2
   15206:	44bc      	add	ip, r7
   15208:	4463      	add	r3, ip
   1520a:	4a79      	ldr	r2, [pc, #484]	; (153f0 <processOnSMS+0x3f4>)
   1520c:	ca13      	ldmia	r2!, {r0, r1, r4}
   1520e:	c313      	stmia	r3!, {r0, r1, r4}
   15210:	ca13      	ldmia	r2!, {r0, r1, r4}
   15212:	c313      	stmia	r3!, {r0, r1, r4}
   15214:	7812      	ldrb	r2, [r2, #0]
   15216:	701a      	strb	r2, [r3, #0]
   15218:	f001 ffa6 	bl	17168 <processOnSMS+0x216c>
		}
	}
	else if (StringstartsWith(received_command,"DEFAULT"))
   1521c:	4a75      	ldr	r2, [pc, #468]	; (153f4 <processOnSMS+0x3f8>)
   1521e:	68fb      	ldr	r3, [r7, #12]
   15220:	0011      	movs	r1, r2
   15222:	0018      	movs	r0, r3
   15224:	4b5f      	ldr	r3, [pc, #380]	; (153a4 <processOnSMS+0x3a8>)
   15226:	4798      	blx	r3
   15228:	1e03      	subs	r3, r0, #0
   1522a:	d065      	beq.n	152f8 <processOnSMS+0x2fc>
	{
		saveAutoStartSettings(false);
   1522c:	2000      	movs	r0, #0
   1522e:	4b72      	ldr	r3, [pc, #456]	; (153f8 <processOnSMS+0x3fc>)
   15230:	4798      	blx	r3
		if (factory_settings_parameter_struct.ENABLE_WATER)
   15232:	4b72      	ldr	r3, [pc, #456]	; (153fc <processOnSMS+0x400>)
   15234:	795b      	ldrb	r3, [r3, #5]
   15236:	2b00      	cmp	r3, #0
   15238:	d00d      	beq.n	15256 <processOnSMS+0x25a>
		{
			saveWaterBypassSettings(false);
   1523a:	2000      	movs	r0, #0
   1523c:	4b70      	ldr	r3, [pc, #448]	; (15400 <processOnSMS+0x404>)
   1523e:	4798      	blx	r3
			if (factory_settings_parameter_struct.ENABLE_M2M)
   15240:	4b6e      	ldr	r3, [pc, #440]	; (153fc <processOnSMS+0x400>)
   15242:	78db      	ldrb	r3, [r3, #3]
   15244:	2b00      	cmp	r3, #0
   15246:	d003      	beq.n	15250 <processOnSMS+0x254>
			{
				saveM2MSettings(false);
   15248:	2000      	movs	r0, #0
   1524a:	4b6e      	ldr	r3, [pc, #440]	; (15404 <processOnSMS+0x408>)
   1524c:	4798      	blx	r3
   1524e:	e002      	b.n	15256 <processOnSMS+0x25a>
			}
			else
			{
				savePreventOverFlowSettings(false);
   15250:	2000      	movs	r0, #0
   15252:	4b6d      	ldr	r3, [pc, #436]	; (15408 <processOnSMS+0x40c>)
   15254:	4798      	blx	r3
			}
		}
		if (factory_settings_parameter_struct.ENABLE_CURRENT)
   15256:	4b69      	ldr	r3, [pc, #420]	; (153fc <processOnSMS+0x400>)
   15258:	785b      	ldrb	r3, [r3, #1]
   1525a:	2b00      	cmp	r3, #0
   1525c:	d008      	beq.n	15270 <processOnSMS+0x274>
		{
			setOverloadPer(120);
   1525e:	2078      	movs	r0, #120	; 0x78
   15260:	4b6a      	ldr	r3, [pc, #424]	; (1540c <processOnSMS+0x410>)
   15262:	4798      	blx	r3
			setUnderloadPer(85);
   15264:	2055      	movs	r0, #85	; 0x55
   15266:	4b6a      	ldr	r3, [pc, #424]	; (15410 <processOnSMS+0x414>)
   15268:	4798      	blx	r3
			setCurrentDetection(false);
   1526a:	2000      	movs	r0, #0
   1526c:	4b69      	ldr	r3, [pc, #420]	; (15414 <processOnSMS+0x418>)
   1526e:	4798      	blx	r3
		}
		saveEventStageSettings(0);
   15270:	2000      	movs	r0, #0
   15272:	4b69      	ldr	r3, [pc, #420]	; (15418 <processOnSMS+0x41c>)
   15274:	4798      	blx	r3
		//saveBypassSettings(false);
		saveDNDSettings(false);
   15276:	2000      	movs	r0, #0
   15278:	4b68      	ldr	r3, [pc, #416]	; (1541c <processOnSMS+0x420>)
   1527a:	4798      	blx	r3
		saveResponseSettings('C');
   1527c:	2043      	movs	r0, #67	; 0x43
   1527e:	4b68      	ldr	r3, [pc, #416]	; (15420 <processOnSMS+0x424>)
   15280:	4798      	blx	r3
		saveAutoStartTimeSettings(50);
   15282:	2032      	movs	r0, #50	; 0x32
   15284:	4b67      	ldr	r3, [pc, #412]	; (15424 <processOnSMS+0x428>)
   15286:	4798      	blx	r3
		saveStarDeltaTimer(2);
   15288:	2002      	movs	r0, #2
   1528a:	4b67      	ldr	r3, [pc, #412]	; (15428 <processOnSMS+0x42c>)
   1528c:	4798      	blx	r3
		
		saveSinglePhasingSettings(true);
   1528e:	2001      	movs	r0, #1
   15290:	4b66      	ldr	r3, [pc, #408]	; (1542c <processOnSMS+0x430>)
   15292:	4798      	blx	r3
		saveSinglePhasingVoltage(80);
   15294:	2050      	movs	r0, #80	; 0x50
   15296:	4b66      	ldr	r3, [pc, #408]	; (15430 <processOnSMS+0x434>)
   15298:	4798      	blx	r3
		savePhaseSequenceProtectionSettings(true);
   1529a:	2001      	movs	r0, #1
   1529c:	4b65      	ldr	r3, [pc, #404]	; (15434 <processOnSMS+0x438>)
   1529e:	4798      	blx	r3
		setPrimaryNumberIndex(0);
   152a0:	2000      	movs	r0, #0
   152a2:	4b65      	ldr	r3, [pc, #404]	; (15438 <processOnSMS+0x43c>)
   152a4:	4798      	blx	r3
		setSecondaryNumberIndex(1);
   152a6:	2001      	movs	r0, #1
   152a8:	4b64      	ldr	r3, [pc, #400]	; (1543c <processOnSMS+0x440>)
   152aa:	4798      	blx	r3
		
		incomingSMSProcessed=true;
   152ac:	2328      	movs	r3, #40	; 0x28
   152ae:	33ff      	adds	r3, #255	; 0xff
   152b0:	2208      	movs	r2, #8
   152b2:	4694      	mov	ip, r2
   152b4:	44bc      	add	ip, r7
   152b6:	4463      	add	r3, ip
   152b8:	2201      	movs	r2, #1
   152ba:	701a      	strb	r2, [r3, #0]
		
		if (response_sms_processed_cmd == true)
   152bc:	4b36      	ldr	r3, [pc, #216]	; (15398 <processOnSMS+0x39c>)
   152be:	2294      	movs	r2, #148	; 0x94
   152c0:	0052      	lsls	r2, r2, #1
   152c2:	4694      	mov	ip, r2
   152c4:	2208      	movs	r2, #8
   152c6:	4690      	mov	r8, r2
   152c8:	44b8      	add	r8, r7
   152ca:	44c4      	add	ip, r8
   152cc:	4463      	add	r3, ip
   152ce:	781b      	ldrb	r3, [r3, #0]
   152d0:	2b00      	cmp	r3, #0
   152d2:	d101      	bne.n	152d8 <processOnSMS+0x2dc>
   152d4:	f001 ff48 	bl	17168 <processOnSMS+0x216c>
		{
			strcpy(resep_msg,"ALL SETTINGS ARE NOW FACTORY DEFAULT");
   152d8:	230c      	movs	r3, #12
   152da:	2208      	movs	r2, #8
   152dc:	4694      	mov	ip, r2
   152de:	44bc      	add	ip, r7
   152e0:	4463      	add	r3, ip
   152e2:	4a57      	ldr	r2, [pc, #348]	; (15440 <processOnSMS+0x444>)
   152e4:	ca13      	ldmia	r2!, {r0, r1, r4}
   152e6:	c313      	stmia	r3!, {r0, r1, r4}
   152e8:	ca13      	ldmia	r2!, {r0, r1, r4}
   152ea:	c313      	stmia	r3!, {r0, r1, r4}
   152ec:	ca13      	ldmia	r2!, {r0, r1, r4}
   152ee:	c313      	stmia	r3!, {r0, r1, r4}
   152f0:	7812      	ldrb	r2, [r2, #0]
   152f2:	701a      	strb	r2, [r3, #0]
   152f4:	f001 ff38 	bl	17168 <processOnSMS+0x216c>
		}
	}
	else if (StringstartsWith(received_command,"NUM"))
   152f8:	4a52      	ldr	r2, [pc, #328]	; (15444 <processOnSMS+0x448>)
   152fa:	68fb      	ldr	r3, [r7, #12]
   152fc:	0011      	movs	r1, r2
   152fe:	0018      	movs	r0, r3
   15300:	4b28      	ldr	r3, [pc, #160]	; (153a4 <processOnSMS+0x3a8>)
   15302:	4798      	blx	r3
   15304:	1e03      	subs	r3, r0, #0
   15306:	d038      	beq.n	1537a <processOnSMS+0x37e>
	{
		response_sms_processed_cmd = true;
   15308:	4b23      	ldr	r3, [pc, #140]	; (15398 <processOnSMS+0x39c>)
   1530a:	2294      	movs	r2, #148	; 0x94
   1530c:	0052      	lsls	r2, r2, #1
   1530e:	4694      	mov	ip, r2
   15310:	2208      	movs	r2, #8
   15312:	4690      	mov	r8, r2
   15314:	44b8      	add	r8, r7
   15316:	44c4      	add	ip, r8
   15318:	4463      	add	r3, ip
   1531a:	2201      	movs	r2, #1
   1531c:	701a      	strb	r2, [r3, #0]
		incomingSMSProcessed=true;
   1531e:	2328      	movs	r3, #40	; 0x28
   15320:	33ff      	adds	r3, #255	; 0xff
   15322:	2208      	movs	r2, #8
   15324:	4694      	mov	ip, r2
   15326:	44bc      	add	ip, r7
   15328:	4463      	add	r3, ip
   1532a:	2201      	movs	r2, #1
   1532c:	701a      	strb	r2, [r3, #0]
		
		memset(resep_msg, '\0', sizeof(resep_msg));
   1532e:	230c      	movs	r3, #12
   15330:	2208      	movs	r2, #8
   15332:	4694      	mov	ip, r2
   15334:	44bc      	add	ip, r7
   15336:	4463      	add	r3, ip
   15338:	22fa      	movs	r2, #250	; 0xfa
   1533a:	2100      	movs	r1, #0
   1533c:	0018      	movs	r0, r3
   1533e:	4b1d      	ldr	r3, [pc, #116]	; (153b4 <processOnSMS+0x3b8>)
   15340:	4798      	blx	r3
		if (user_count_struct.current_user_no_count==0)
   15342:	4b41      	ldr	r3, [pc, #260]	; (15448 <processOnSMS+0x44c>)
   15344:	789b      	ldrb	r3, [r3, #2]
   15346:	2b00      	cmp	r3, #0
   15348:	d10d      	bne.n	15366 <processOnSMS+0x36a>
		{
			strcpy(resep_msg,"No Numbers Exists");
   1534a:	230c      	movs	r3, #12
   1534c:	2208      	movs	r2, #8
   1534e:	4694      	mov	ip, r2
   15350:	44bc      	add	ip, r7
   15352:	4463      	add	r3, ip
   15354:	4a3d      	ldr	r2, [pc, #244]	; (1544c <processOnSMS+0x450>)
   15356:	ca13      	ldmia	r2!, {r0, r1, r4}
   15358:	c313      	stmia	r3!, {r0, r1, r4}
   1535a:	6811      	ldr	r1, [r2, #0]
   1535c:	6019      	str	r1, [r3, #0]
   1535e:	8892      	ldrh	r2, [r2, #4]
   15360:	809a      	strh	r2, [r3, #4]
   15362:	f001 ff01 	bl	17168 <processOnSMS+0x216c>
		}
		else
		{
			getNumbers(resep_msg);
   15366:	230c      	movs	r3, #12
   15368:	2208      	movs	r2, #8
   1536a:	4694      	mov	ip, r2
   1536c:	44bc      	add	ip, r7
   1536e:	4463      	add	r3, ip
   15370:	0018      	movs	r0, r3
   15372:	4b37      	ldr	r3, [pc, #220]	; (15450 <processOnSMS+0x454>)
   15374:	4798      	blx	r3
   15376:	f001 fef7 	bl	17168 <processOnSMS+0x216c>
		}
	}
	else if (StringstartsWith(received_command,"RESET"))
   1537a:	4a36      	ldr	r2, [pc, #216]	; (15454 <processOnSMS+0x458>)
   1537c:	68fb      	ldr	r3, [r7, #12]
   1537e:	0011      	movs	r1, r2
   15380:	0018      	movs	r0, r3
   15382:	4b08      	ldr	r3, [pc, #32]	; (153a4 <processOnSMS+0x3a8>)
   15384:	4798      	blx	r3
   15386:	1e03      	subs	r3, r0, #0
   15388:	d066      	beq.n	15458 <processOnSMS+0x45c>
	{
		system_reset();
   1538a:	4b12      	ldr	r3, [pc, #72]	; (153d4 <processOnSMS+0x3d8>)
   1538c:	4798      	blx	r3
   1538e:	f001 feeb 	bl	17168 <processOnSMS+0x216c>
   15392:	46c0      	nop			; (mov r8, r8)
   15394:	fffffedb 	.word	0xfffffedb
   15398:	fffffeda 	.word	0xfffffeda
   1539c:	fffffed9 	.word	0xfffffed9
   153a0:	00029c50 	.word	0x00029c50
   153a4:	00014211 	.word	0x00014211
   153a8:	00029c58 	.word	0x00029c58
   153ac:	200005f8 	.word	0x200005f8
   153b0:	20000604 	.word	0x20000604
   153b4:	000289e3 	.word	0x000289e3
   153b8:	00028c63 	.word	0x00028c63
   153bc:	00012319 	.word	0x00012319
   153c0:	20000584 	.word	0x20000584
   153c4:	000289ad 	.word	0x000289ad
   153c8:	00023661 	.word	0x00023661
   153cc:	00023809 	.word	0x00023809
   153d0:	0001fd79 	.word	0x0001fd79
   153d4:	000142e5 	.word	0x000142e5
   153d8:	00029c60 	.word	0x00029c60
   153dc:	000130c9 	.word	0x000130c9
   153e0:	00029c68 	.word	0x00029c68
   153e4:	00029c8c 	.word	0x00029c8c
   153e8:	00029cb0 	.word	0x00029cb0
   153ec:	0001110d 	.word	0x0001110d
   153f0:	00029cbc 	.word	0x00029cbc
   153f4:	00029cd8 	.word	0x00029cd8
   153f8:	000112a9 	.word	0x000112a9
   153fc:	2000062c 	.word	0x2000062c
   15400:	00011469 	.word	0x00011469
   15404:	00010be5 	.word	0x00010be5
   15408:	000114b5 	.word	0x000114b5
   1540c:	00011501 	.word	0x00011501
   15410:	0001156d 	.word	0x0001156d
   15414:	00011995 	.word	0x00011995
   15418:	00011a2d 	.word	0x00011a2d
   1541c:	00011341 	.word	0x00011341
   15420:	0001138d 	.word	0x0001138d
   15424:	000112f5 	.word	0x000112f5
   15428:	000119e1 	.word	0x000119e1
   1542c:	000115e1 	.word	0x000115e1
   15430:	0001162d 	.word	0x0001162d
   15434:	00011679 	.word	0x00011679
   15438:	00011b0d 	.word	0x00011b0d
   1543c:	00011b5d 	.word	0x00011b5d
   15440:	00029ce0 	.word	0x00029ce0
   15444:	00029d08 	.word	0x00029d08
   15448:	20000614 	.word	0x20000614
   1544c:	00029d0c 	.word	0x00029d0c
   15450:	000107f9 	.word	0x000107f9
   15454:	00029d20 	.word	0x00029d20
	}
	else if (StringstartsWith(received_command,"DID"))
   15458:	4aea      	ldr	r2, [pc, #936]	; (15804 <processOnSMS+0x808>)
   1545a:	68fb      	ldr	r3, [r7, #12]
   1545c:	0011      	movs	r1, r2
   1545e:	0018      	movs	r0, r3
   15460:	4be9      	ldr	r3, [pc, #932]	; (15808 <processOnSMS+0x80c>)
   15462:	4798      	blx	r3
   15464:	1e03      	subs	r3, r0, #0
   15466:	d01f      	beq.n	154a8 <processOnSMS+0x4ac>
	{
		response_sms_processed_cmd=true;
   15468:	4be8      	ldr	r3, [pc, #928]	; (1580c <processOnSMS+0x810>)
   1546a:	2294      	movs	r2, #148	; 0x94
   1546c:	0052      	lsls	r2, r2, #1
   1546e:	4694      	mov	ip, r2
   15470:	2208      	movs	r2, #8
   15472:	4690      	mov	r8, r2
   15474:	44b8      	add	r8, r7
   15476:	44c4      	add	ip, r8
   15478:	4463      	add	r3, ip
   1547a:	2201      	movs	r2, #1
   1547c:	701a      	strb	r2, [r3, #0]
		incomingSMSProcessed=true;
   1547e:	2328      	movs	r3, #40	; 0x28
   15480:	33ff      	adds	r3, #255	; 0xff
   15482:	2208      	movs	r2, #8
   15484:	4694      	mov	ip, r2
   15486:	44bc      	add	ip, r7
   15488:	4463      	add	r3, ip
   1548a:	2201      	movs	r2, #1
   1548c:	701a      	strb	r2, [r3, #0]
		sprintf(resep_msg,"%lu %s",factory_settings_parameter_struct.DeviceId_ee,VERSION_NO);
   1548e:	4be0      	ldr	r3, [pc, #896]	; (15810 <processOnSMS+0x814>)
   15490:	689a      	ldr	r2, [r3, #8]
   15492:	4be0      	ldr	r3, [pc, #896]	; (15814 <processOnSMS+0x818>)
   15494:	49e0      	ldr	r1, [pc, #896]	; (15818 <processOnSMS+0x81c>)
   15496:	200c      	movs	r0, #12
   15498:	2408      	movs	r4, #8
   1549a:	46a4      	mov	ip, r4
   1549c:	44bc      	add	ip, r7
   1549e:	4460      	add	r0, ip
   154a0:	4cde      	ldr	r4, [pc, #888]	; (1581c <processOnSMS+0x820>)
   154a2:	47a0      	blx	r4
   154a4:	f001 fe60 	bl	17168 <processOnSMS+0x216c>
		//sprintf(resep_msg,"Software:%s\nModel:%d\nDeviceId:%lu\nHW:%d",
		//SOFTWARE_VER,factory_parameter_struct.u16tmodelNo,factory_parameter_struct.u32deviceId,
		//factory_parameter_struct.u16thardwareVer);

	}
	else if (StringstartsWith(received_command,"AUTOON"))
   154a8:	4add      	ldr	r2, [pc, #884]	; (15820 <processOnSMS+0x824>)
   154aa:	68fb      	ldr	r3, [r7, #12]
   154ac:	0011      	movs	r1, r2
   154ae:	0018      	movs	r0, r3
   154b0:	4bd5      	ldr	r3, [pc, #852]	; (15808 <processOnSMS+0x80c>)
   154b2:	4798      	blx	r3
   154b4:	1e03      	subs	r3, r0, #0
   154b6:	d027      	beq.n	15508 <processOnSMS+0x50c>
	{
		saveAutoStartSettings(true);
   154b8:	2001      	movs	r0, #1
   154ba:	4bda      	ldr	r3, [pc, #872]	; (15824 <processOnSMS+0x828>)
   154bc:	4798      	blx	r3
		resetAutoStart(true);
   154be:	2001      	movs	r0, #1
   154c0:	4bd9      	ldr	r3, [pc, #868]	; (15828 <processOnSMS+0x82c>)
   154c2:	4798      	blx	r3
		
		incomingSMSProcessed=true;
   154c4:	2328      	movs	r3, #40	; 0x28
   154c6:	33ff      	adds	r3, #255	; 0xff
   154c8:	2208      	movs	r2, #8
   154ca:	4694      	mov	ip, r2
   154cc:	44bc      	add	ip, r7
   154ce:	4463      	add	r3, ip
   154d0:	2201      	movs	r2, #1
   154d2:	701a      	strb	r2, [r3, #0]
		
		if (response_sms_processed_cmd == true)
   154d4:	4bcd      	ldr	r3, [pc, #820]	; (1580c <processOnSMS+0x810>)
   154d6:	2294      	movs	r2, #148	; 0x94
   154d8:	0052      	lsls	r2, r2, #1
   154da:	4694      	mov	ip, r2
   154dc:	2208      	movs	r2, #8
   154de:	4690      	mov	r8, r2
   154e0:	44b8      	add	r8, r7
   154e2:	44c4      	add	ip, r8
   154e4:	4463      	add	r3, ip
   154e6:	781b      	ldrb	r3, [r3, #0]
   154e8:	2b00      	cmp	r3, #0
   154ea:	d101      	bne.n	154f0 <processOnSMS+0x4f4>
   154ec:	f001 fe3c 	bl	17168 <processOnSMS+0x216c>
		{
			strcpy(resep_msg,"MOTOR AUTOON ON");
   154f0:	230c      	movs	r3, #12
   154f2:	2208      	movs	r2, #8
   154f4:	4694      	mov	ip, r2
   154f6:	44bc      	add	ip, r7
   154f8:	4463      	add	r3, ip
   154fa:	4acc      	ldr	r2, [pc, #816]	; (1582c <processOnSMS+0x830>)
   154fc:	ca13      	ldmia	r2!, {r0, r1, r4}
   154fe:	c313      	stmia	r3!, {r0, r1, r4}
   15500:	6812      	ldr	r2, [r2, #0]
   15502:	601a      	str	r2, [r3, #0]
   15504:	f001 fe30 	bl	17168 <processOnSMS+0x216c>
		}
	}
	else if (StringstartsWith(received_command,"AUTOOFF"))
   15508:	4ac9      	ldr	r2, [pc, #804]	; (15830 <processOnSMS+0x834>)
   1550a:	68fb      	ldr	r3, [r7, #12]
   1550c:	0011      	movs	r1, r2
   1550e:	0018      	movs	r0, r3
   15510:	4bbd      	ldr	r3, [pc, #756]	; (15808 <processOnSMS+0x80c>)
   15512:	4798      	blx	r3
   15514:	1e03      	subs	r3, r0, #0
   15516:	d029      	beq.n	1556c <processOnSMS+0x570>
	{
		saveAutoStartSettings(false);
   15518:	2000      	movs	r0, #0
   1551a:	4bc2      	ldr	r3, [pc, #776]	; (15824 <processOnSMS+0x828>)
   1551c:	4798      	blx	r3
		resetAutoStart(true);
   1551e:	2001      	movs	r0, #1
   15520:	4bc1      	ldr	r3, [pc, #772]	; (15828 <processOnSMS+0x82c>)
   15522:	4798      	blx	r3
		
		incomingSMSProcessed=true;
   15524:	2328      	movs	r3, #40	; 0x28
   15526:	33ff      	adds	r3, #255	; 0xff
   15528:	2208      	movs	r2, #8
   1552a:	4694      	mov	ip, r2
   1552c:	44bc      	add	ip, r7
   1552e:	4463      	add	r3, ip
   15530:	2201      	movs	r2, #1
   15532:	701a      	strb	r2, [r3, #0]
		
		if (response_sms_processed_cmd == true)
   15534:	4bb5      	ldr	r3, [pc, #724]	; (1580c <processOnSMS+0x810>)
   15536:	2294      	movs	r2, #148	; 0x94
   15538:	0052      	lsls	r2, r2, #1
   1553a:	4694      	mov	ip, r2
   1553c:	2208      	movs	r2, #8
   1553e:	4690      	mov	r8, r2
   15540:	44b8      	add	r8, r7
   15542:	44c4      	add	ip, r8
   15544:	4463      	add	r3, ip
   15546:	781b      	ldrb	r3, [r3, #0]
   15548:	2b00      	cmp	r3, #0
   1554a:	d101      	bne.n	15550 <processOnSMS+0x554>
   1554c:	f001 fe0c 	bl	17168 <processOnSMS+0x216c>
		{
			strcpy(resep_msg,"MOTOR AUTOON OFF");
   15550:	230c      	movs	r3, #12
   15552:	2208      	movs	r2, #8
   15554:	4694      	mov	ip, r2
   15556:	44bc      	add	ip, r7
   15558:	4463      	add	r3, ip
   1555a:	4ab6      	ldr	r2, [pc, #728]	; (15834 <processOnSMS+0x838>)
   1555c:	ca13      	ldmia	r2!, {r0, r1, r4}
   1555e:	c313      	stmia	r3!, {r0, r1, r4}
   15560:	6811      	ldr	r1, [r2, #0]
   15562:	6019      	str	r1, [r3, #0]
   15564:	7912      	ldrb	r2, [r2, #4]
   15566:	711a      	strb	r2, [r3, #4]
   15568:	f001 fdfe 	bl	17168 <processOnSMS+0x216c>
		}
	}
	else if (StringstartsWith(received_command,"WBYPON"))
   1556c:	4ab2      	ldr	r2, [pc, #712]	; (15838 <processOnSMS+0x83c>)
   1556e:	68fb      	ldr	r3, [r7, #12]
   15570:	0011      	movs	r1, r2
   15572:	0018      	movs	r0, r3
   15574:	4ba4      	ldr	r3, [pc, #656]	; (15808 <processOnSMS+0x80c>)
   15576:	4798      	blx	r3
   15578:	1e03      	subs	r3, r0, #0
   1557a:	d02a      	beq.n	155d2 <processOnSMS+0x5d6>
	{
		
		if (factory_settings_parameter_struct.ENABLE_WATER)
   1557c:	4ba4      	ldr	r3, [pc, #656]	; (15810 <processOnSMS+0x814>)
   1557e:	795b      	ldrb	r3, [r3, #5]
   15580:	2b00      	cmp	r3, #0
   15582:	d101      	bne.n	15588 <processOnSMS+0x58c>
   15584:	f001 fdf0 	bl	17168 <processOnSMS+0x216c>
		{
			incomingSMSProcessed=true;
   15588:	2328      	movs	r3, #40	; 0x28
   1558a:	33ff      	adds	r3, #255	; 0xff
   1558c:	2208      	movs	r2, #8
   1558e:	4694      	mov	ip, r2
   15590:	44bc      	add	ip, r7
   15592:	4463      	add	r3, ip
   15594:	2201      	movs	r2, #1
   15596:	701a      	strb	r2, [r3, #0]
			saveWaterBypassSettings(true);
   15598:	2001      	movs	r0, #1
   1559a:	4ba8      	ldr	r3, [pc, #672]	; (1583c <processOnSMS+0x840>)
   1559c:	4798      	blx	r3
			if (response_sms_processed_cmd == true)
   1559e:	4b9b      	ldr	r3, [pc, #620]	; (1580c <processOnSMS+0x810>)
   155a0:	2294      	movs	r2, #148	; 0x94
   155a2:	0052      	lsls	r2, r2, #1
   155a4:	4694      	mov	ip, r2
   155a6:	2208      	movs	r2, #8
   155a8:	4690      	mov	r8, r2
   155aa:	44b8      	add	r8, r7
   155ac:	44c4      	add	ip, r8
   155ae:	4463      	add	r3, ip
   155b0:	781b      	ldrb	r3, [r3, #0]
   155b2:	2b00      	cmp	r3, #0
   155b4:	d101      	bne.n	155ba <processOnSMS+0x5be>
   155b6:	f001 fdd7 	bl	17168 <processOnSMS+0x216c>
			{
				strcpy(resep_msg,"WATER BYPASS ON");
   155ba:	230c      	movs	r3, #12
   155bc:	2208      	movs	r2, #8
   155be:	4694      	mov	ip, r2
   155c0:	44bc      	add	ip, r7
   155c2:	4463      	add	r3, ip
   155c4:	4a9e      	ldr	r2, [pc, #632]	; (15840 <processOnSMS+0x844>)
   155c6:	ca13      	ldmia	r2!, {r0, r1, r4}
   155c8:	c313      	stmia	r3!, {r0, r1, r4}
   155ca:	6812      	ldr	r2, [r2, #0]
   155cc:	601a      	str	r2, [r3, #0]
   155ce:	f001 fdcb 	bl	17168 <processOnSMS+0x216c>
			}
		}
	}
	else if (StringstartsWith(received_command,"WBYPOFF"))
   155d2:	4a9c      	ldr	r2, [pc, #624]	; (15844 <processOnSMS+0x848>)
   155d4:	68fb      	ldr	r3, [r7, #12]
   155d6:	0011      	movs	r1, r2
   155d8:	0018      	movs	r0, r3
   155da:	4b8b      	ldr	r3, [pc, #556]	; (15808 <processOnSMS+0x80c>)
   155dc:	4798      	blx	r3
   155de:	1e03      	subs	r3, r0, #0
   155e0:	d02c      	beq.n	1563c <processOnSMS+0x640>
	{
		if (factory_settings_parameter_struct.ENABLE_WATER)
   155e2:	4b8b      	ldr	r3, [pc, #556]	; (15810 <processOnSMS+0x814>)
   155e4:	795b      	ldrb	r3, [r3, #5]
   155e6:	2b00      	cmp	r3, #0
   155e8:	d101      	bne.n	155ee <processOnSMS+0x5f2>
   155ea:	f001 fdbd 	bl	17168 <processOnSMS+0x216c>
		{
			incomingSMSProcessed=true;
   155ee:	2328      	movs	r3, #40	; 0x28
   155f0:	33ff      	adds	r3, #255	; 0xff
   155f2:	2208      	movs	r2, #8
   155f4:	4694      	mov	ip, r2
   155f6:	44bc      	add	ip, r7
   155f8:	4463      	add	r3, ip
   155fa:	2201      	movs	r2, #1
   155fc:	701a      	strb	r2, [r3, #0]
			saveWaterBypassSettings(false);
   155fe:	2000      	movs	r0, #0
   15600:	4b8e      	ldr	r3, [pc, #568]	; (1583c <processOnSMS+0x840>)
   15602:	4798      	blx	r3
			if (response_sms_processed_cmd == true)
   15604:	4b81      	ldr	r3, [pc, #516]	; (1580c <processOnSMS+0x810>)
   15606:	2294      	movs	r2, #148	; 0x94
   15608:	0052      	lsls	r2, r2, #1
   1560a:	4694      	mov	ip, r2
   1560c:	2208      	movs	r2, #8
   1560e:	4690      	mov	r8, r2
   15610:	44b8      	add	r8, r7
   15612:	44c4      	add	ip, r8
   15614:	4463      	add	r3, ip
   15616:	781b      	ldrb	r3, [r3, #0]
   15618:	2b00      	cmp	r3, #0
   1561a:	d101      	bne.n	15620 <processOnSMS+0x624>
   1561c:	f001 fda4 	bl	17168 <processOnSMS+0x216c>
			{
				strcpy(resep_msg,"WATER BYPASS OFF");
   15620:	230c      	movs	r3, #12
   15622:	2208      	movs	r2, #8
   15624:	4694      	mov	ip, r2
   15626:	44bc      	add	ip, r7
   15628:	4463      	add	r3, ip
   1562a:	4a87      	ldr	r2, [pc, #540]	; (15848 <processOnSMS+0x84c>)
   1562c:	ca13      	ldmia	r2!, {r0, r1, r4}
   1562e:	c313      	stmia	r3!, {r0, r1, r4}
   15630:	6811      	ldr	r1, [r2, #0]
   15632:	6019      	str	r1, [r3, #0]
   15634:	7912      	ldrb	r2, [r2, #4]
   15636:	711a      	strb	r2, [r3, #4]
   15638:	f001 fd96 	bl	17168 <processOnSMS+0x216c>
			}
		}
	}
	else if (StringstartsWith(received_command,"SPPON"))
   1563c:	4a83      	ldr	r2, [pc, #524]	; (1584c <processOnSMS+0x850>)
   1563e:	68fb      	ldr	r3, [r7, #12]
   15640:	0011      	movs	r1, r2
   15642:	0018      	movs	r0, r3
   15644:	4b70      	ldr	r3, [pc, #448]	; (15808 <processOnSMS+0x80c>)
   15646:	4798      	blx	r3
   15648:	1e03      	subs	r3, r0, #0
   1564a:	d026      	beq.n	1569a <processOnSMS+0x69e>
	{
		saveSinglePhasingSettings(true);
   1564c:	2001      	movs	r0, #1
   1564e:	4b80      	ldr	r3, [pc, #512]	; (15850 <processOnSMS+0x854>)
   15650:	4798      	blx	r3
		incomingSMSProcessed=true;
   15652:	2328      	movs	r3, #40	; 0x28
   15654:	33ff      	adds	r3, #255	; 0xff
   15656:	2208      	movs	r2, #8
   15658:	4694      	mov	ip, r2
   1565a:	44bc      	add	ip, r7
   1565c:	4463      	add	r3, ip
   1565e:	2201      	movs	r2, #1
   15660:	701a      	strb	r2, [r3, #0]

		if (response_sms_processed_cmd == true)
   15662:	4b6a      	ldr	r3, [pc, #424]	; (1580c <processOnSMS+0x810>)
   15664:	2294      	movs	r2, #148	; 0x94
   15666:	0052      	lsls	r2, r2, #1
   15668:	4694      	mov	ip, r2
   1566a:	2208      	movs	r2, #8
   1566c:	4690      	mov	r8, r2
   1566e:	44b8      	add	r8, r7
   15670:	44c4      	add	ip, r8
   15672:	4463      	add	r3, ip
   15674:	781b      	ldrb	r3, [r3, #0]
   15676:	2b00      	cmp	r3, #0
   15678:	d101      	bne.n	1567e <processOnSMS+0x682>
   1567a:	f001 fd75 	bl	17168 <processOnSMS+0x216c>
		{
			strcpy(resep_msg,"SPP ON");
   1567e:	230c      	movs	r3, #12
   15680:	2208      	movs	r2, #8
   15682:	4694      	mov	ip, r2
   15684:	44bc      	add	ip, r7
   15686:	4463      	add	r3, ip
   15688:	4a72      	ldr	r2, [pc, #456]	; (15854 <processOnSMS+0x858>)
   1568a:	6811      	ldr	r1, [r2, #0]
   1568c:	6019      	str	r1, [r3, #0]
   1568e:	8891      	ldrh	r1, [r2, #4]
   15690:	8099      	strh	r1, [r3, #4]
   15692:	7992      	ldrb	r2, [r2, #6]
   15694:	719a      	strb	r2, [r3, #6]
   15696:	f001 fd67 	bl	17168 <processOnSMS+0x216c>
		}
	}
	else if (StringstartsWith(received_command,"SPPOFF"))
   1569a:	4a6f      	ldr	r2, [pc, #444]	; (15858 <processOnSMS+0x85c>)
   1569c:	68fb      	ldr	r3, [r7, #12]
   1569e:	0011      	movs	r1, r2
   156a0:	0018      	movs	r0, r3
   156a2:	4b59      	ldr	r3, [pc, #356]	; (15808 <processOnSMS+0x80c>)
   156a4:	4798      	blx	r3
   156a6:	1e03      	subs	r3, r0, #0
   156a8:	d022      	beq.n	156f0 <processOnSMS+0x6f4>
	{
		saveSinglePhasingSettings(false);
   156aa:	2000      	movs	r0, #0
   156ac:	4b68      	ldr	r3, [pc, #416]	; (15850 <processOnSMS+0x854>)
   156ae:	4798      	blx	r3
		incomingSMSProcessed=true;
   156b0:	2328      	movs	r3, #40	; 0x28
   156b2:	33ff      	adds	r3, #255	; 0xff
   156b4:	2208      	movs	r2, #8
   156b6:	4694      	mov	ip, r2
   156b8:	44bc      	add	ip, r7
   156ba:	4463      	add	r3, ip
   156bc:	2201      	movs	r2, #1
   156be:	701a      	strb	r2, [r3, #0]

		if (response_sms_processed_cmd == true)
   156c0:	4b52      	ldr	r3, [pc, #328]	; (1580c <processOnSMS+0x810>)
   156c2:	2294      	movs	r2, #148	; 0x94
   156c4:	0052      	lsls	r2, r2, #1
   156c6:	4694      	mov	ip, r2
   156c8:	2208      	movs	r2, #8
   156ca:	4690      	mov	r8, r2
   156cc:	44b8      	add	r8, r7
   156ce:	44c4      	add	ip, r8
   156d0:	4463      	add	r3, ip
   156d2:	781b      	ldrb	r3, [r3, #0]
   156d4:	2b00      	cmp	r3, #0
   156d6:	d101      	bne.n	156dc <processOnSMS+0x6e0>
   156d8:	f001 fd46 	bl	17168 <processOnSMS+0x216c>
		{
			strcpy(resep_msg,"SPP OFF");
   156dc:	230c      	movs	r3, #12
   156de:	2208      	movs	r2, #8
   156e0:	4694      	mov	ip, r2
   156e2:	44bc      	add	ip, r7
   156e4:	4463      	add	r3, ip
   156e6:	4a5d      	ldr	r2, [pc, #372]	; (1585c <processOnSMS+0x860>)
   156e8:	ca03      	ldmia	r2!, {r0, r1}
   156ea:	c303      	stmia	r3!, {r0, r1}
   156ec:	f001 fd3c 	bl	17168 <processOnSMS+0x216c>
		}
	}
	else if(StringstartsWith(received_command,"SPPV"))
   156f0:	4a5b      	ldr	r2, [pc, #364]	; (15860 <processOnSMS+0x864>)
   156f2:	68fb      	ldr	r3, [r7, #12]
   156f4:	0011      	movs	r1, r2
   156f6:	0018      	movs	r0, r3
   156f8:	4b43      	ldr	r3, [pc, #268]	; (15808 <processOnSMS+0x80c>)
   156fa:	4798      	blx	r3
   156fc:	1e03      	subs	r3, r0, #0
   156fe:	d055      	beq.n	157ac <processOnSMS+0x7b0>
	{
		memmove(received_command,received_command+4,strlen(received_command));
   15700:	68fb      	ldr	r3, [r7, #12]
   15702:	1d1c      	adds	r4, r3, #4
   15704:	68fb      	ldr	r3, [r7, #12]
   15706:	0018      	movs	r0, r3
   15708:	4b56      	ldr	r3, [pc, #344]	; (15864 <processOnSMS+0x868>)
   1570a:	4798      	blx	r3
   1570c:	0002      	movs	r2, r0
   1570e:	68fb      	ldr	r3, [r7, #12]
   15710:	0021      	movs	r1, r4
   15712:	0018      	movs	r0, r3
   15714:	4b54      	ldr	r3, [pc, #336]	; (15868 <processOnSMS+0x86c>)
   15716:	4798      	blx	r3
		uint8_t sppVoltage = atoi(received_command);
   15718:	68fb      	ldr	r3, [r7, #12]
   1571a:	0018      	movs	r0, r3
   1571c:	4b53      	ldr	r3, [pc, #332]	; (1586c <processOnSMS+0x870>)
   1571e:	4798      	blx	r3
   15720:	0002      	movs	r2, r0
   15722:	2393      	movs	r3, #147	; 0x93
   15724:	005b      	lsls	r3, r3, #1
   15726:	2108      	movs	r1, #8
   15728:	468c      	mov	ip, r1
   1572a:	44bc      	add	ip, r7
   1572c:	4463      	add	r3, ip
   1572e:	701a      	strb	r2, [r3, #0]
		if(sppVoltage<20) sppVoltage=20;
   15730:	2393      	movs	r3, #147	; 0x93
   15732:	005b      	lsls	r3, r3, #1
   15734:	2208      	movs	r2, #8
   15736:	4694      	mov	ip, r2
   15738:	44bc      	add	ip, r7
   1573a:	4463      	add	r3, ip
   1573c:	781b      	ldrb	r3, [r3, #0]
   1573e:	2b13      	cmp	r3, #19
   15740:	d807      	bhi.n	15752 <processOnSMS+0x756>
   15742:	2393      	movs	r3, #147	; 0x93
   15744:	005b      	lsls	r3, r3, #1
   15746:	2208      	movs	r2, #8
   15748:	4694      	mov	ip, r2
   1574a:	44bc      	add	ip, r7
   1574c:	4463      	add	r3, ip
   1574e:	2214      	movs	r2, #20
   15750:	701a      	strb	r2, [r3, #0]
		if(sppVoltage>440) sppVoltage=440;
		saveSinglePhasingVoltage(sppVoltage);
   15752:	2393      	movs	r3, #147	; 0x93
   15754:	005b      	lsls	r3, r3, #1
   15756:	2208      	movs	r2, #8
   15758:	4694      	mov	ip, r2
   1575a:	44bc      	add	ip, r7
   1575c:	4463      	add	r3, ip
   1575e:	781b      	ldrb	r3, [r3, #0]
   15760:	b29b      	uxth	r3, r3
   15762:	0018      	movs	r0, r3
   15764:	4b42      	ldr	r3, [pc, #264]	; (15870 <processOnSMS+0x874>)
   15766:	4798      	blx	r3
		
		incomingSMSProcessed=true;
   15768:	2328      	movs	r3, #40	; 0x28
   1576a:	33ff      	adds	r3, #255	; 0xff
   1576c:	2208      	movs	r2, #8
   1576e:	4694      	mov	ip, r2
   15770:	44bc      	add	ip, r7
   15772:	4463      	add	r3, ip
   15774:	2201      	movs	r2, #1
   15776:	701a      	strb	r2, [r3, #0]
		
		
		if (response_sms_processed_cmd == true)
   15778:	4b24      	ldr	r3, [pc, #144]	; (1580c <processOnSMS+0x810>)
   1577a:	2294      	movs	r2, #148	; 0x94
   1577c:	0052      	lsls	r2, r2, #1
   1577e:	4694      	mov	ip, r2
   15780:	2208      	movs	r2, #8
   15782:	4690      	mov	r8, r2
   15784:	44b8      	add	r8, r7
   15786:	44c4      	add	ip, r8
   15788:	4463      	add	r3, ip
   1578a:	781b      	ldrb	r3, [r3, #0]
   1578c:	2b00      	cmp	r3, #0
   1578e:	d101      	bne.n	15794 <processOnSMS+0x798>
   15790:	f001 fcea 	bl	17168 <processOnSMS+0x216c>
		{
			strcpy(resep_msg,"SPP VOLT SET");
   15794:	230c      	movs	r3, #12
   15796:	2208      	movs	r2, #8
   15798:	4694      	mov	ip, r2
   1579a:	44bc      	add	ip, r7
   1579c:	4463      	add	r3, ip
   1579e:	4a35      	ldr	r2, [pc, #212]	; (15874 <processOnSMS+0x878>)
   157a0:	ca13      	ldmia	r2!, {r0, r1, r4}
   157a2:	c313      	stmia	r3!, {r0, r1, r4}
   157a4:	7812      	ldrb	r2, [r2, #0]
   157a6:	701a      	strb	r2, [r3, #0]
   157a8:	f001 fcde 	bl	17168 <processOnSMS+0x216c>
		}
	}
	else if(StringstartsWith(received_command,"SEQON"))
   157ac:	4a32      	ldr	r2, [pc, #200]	; (15878 <processOnSMS+0x87c>)
   157ae:	68fb      	ldr	r3, [r7, #12]
   157b0:	0011      	movs	r1, r2
   157b2:	0018      	movs	r0, r3
   157b4:	4b14      	ldr	r3, [pc, #80]	; (15808 <processOnSMS+0x80c>)
   157b6:	4798      	blx	r3
   157b8:	1e03      	subs	r3, r0, #0
   157ba:	d063      	beq.n	15884 <processOnSMS+0x888>
	{
		savePhaseSequenceProtectionSettings(true);
   157bc:	2001      	movs	r0, #1
   157be:	4b2f      	ldr	r3, [pc, #188]	; (1587c <processOnSMS+0x880>)
   157c0:	4798      	blx	r3
		
		incomingSMSProcessed=true;
   157c2:	2328      	movs	r3, #40	; 0x28
   157c4:	33ff      	adds	r3, #255	; 0xff
   157c6:	2208      	movs	r2, #8
   157c8:	4694      	mov	ip, r2
   157ca:	44bc      	add	ip, r7
   157cc:	4463      	add	r3, ip
   157ce:	2201      	movs	r2, #1
   157d0:	701a      	strb	r2, [r3, #0]
		
		if (response_sms_processed_cmd == true)
   157d2:	4b0e      	ldr	r3, [pc, #56]	; (1580c <processOnSMS+0x810>)
   157d4:	2294      	movs	r2, #148	; 0x94
   157d6:	0052      	lsls	r2, r2, #1
   157d8:	4694      	mov	ip, r2
   157da:	2208      	movs	r2, #8
   157dc:	4690      	mov	r8, r2
   157de:	44b8      	add	r8, r7
   157e0:	44c4      	add	ip, r8
   157e2:	4463      	add	r3, ip
   157e4:	781b      	ldrb	r3, [r3, #0]
   157e6:	2b00      	cmp	r3, #0
   157e8:	d101      	bne.n	157ee <processOnSMS+0x7f2>
   157ea:	f001 fcbd 	bl	17168 <processOnSMS+0x216c>
		{
			strcpy(resep_msg,"SEQP ON");
   157ee:	230c      	movs	r3, #12
   157f0:	2208      	movs	r2, #8
   157f2:	4694      	mov	ip, r2
   157f4:	44bc      	add	ip, r7
   157f6:	4463      	add	r3, ip
   157f8:	4a21      	ldr	r2, [pc, #132]	; (15880 <processOnSMS+0x884>)
   157fa:	ca03      	ldmia	r2!, {r0, r1}
   157fc:	c303      	stmia	r3!, {r0, r1}
   157fe:	f001 fcb3 	bl	17168 <processOnSMS+0x216c>
   15802:	46c0      	nop			; (mov r8, r8)
   15804:	00029d28 	.word	0x00029d28
   15808:	00014211 	.word	0x00014211
   1580c:	fffffeda 	.word	0xfffffeda
   15810:	2000062c 	.word	0x2000062c
   15814:	00029d2c 	.word	0x00029d2c
   15818:	00029d40 	.word	0x00029d40
   1581c:	00028be9 	.word	0x00028be9
   15820:	00029d48 	.word	0x00029d48
   15824:	000112a9 	.word	0x000112a9
   15828:	0001b22d 	.word	0x0001b22d
   1582c:	00029d50 	.word	0x00029d50
   15830:	00029d60 	.word	0x00029d60
   15834:	00029d68 	.word	0x00029d68
   15838:	00029d7c 	.word	0x00029d7c
   1583c:	00011469 	.word	0x00011469
   15840:	00029d84 	.word	0x00029d84
   15844:	00029d94 	.word	0x00029d94
   15848:	00029d9c 	.word	0x00029d9c
   1584c:	00029db0 	.word	0x00029db0
   15850:	000115e1 	.word	0x000115e1
   15854:	00029db8 	.word	0x00029db8
   15858:	00029dc0 	.word	0x00029dc0
   1585c:	00029dc8 	.word	0x00029dc8
   15860:	00029dd0 	.word	0x00029dd0
   15864:	00028c73 	.word	0x00028c73
   15868:	000289bf 	.word	0x000289bf
   1586c:	000288c9 	.word	0x000288c9
   15870:	0001162d 	.word	0x0001162d
   15874:	00029dd8 	.word	0x00029dd8
   15878:	00029de8 	.word	0x00029de8
   1587c:	00011679 	.word	0x00011679
   15880:	00029df0 	.word	0x00029df0
		}
	}
	else if(StringstartsWith(received_command,"SEQOFF"))
   15884:	4adc      	ldr	r2, [pc, #880]	; (15bf8 <processOnSMS+0xbfc>)
   15886:	68fb      	ldr	r3, [r7, #12]
   15888:	0011      	movs	r1, r2
   1588a:	0018      	movs	r0, r3
   1588c:	4bdb      	ldr	r3, [pc, #876]	; (15bfc <processOnSMS+0xc00>)
   1588e:	4798      	blx	r3
   15890:	1e03      	subs	r3, r0, #0
   15892:	d024      	beq.n	158de <processOnSMS+0x8e2>
	{
		savePhaseSequenceProtectionSettings(false);
   15894:	2000      	movs	r0, #0
   15896:	4bda      	ldr	r3, [pc, #872]	; (15c00 <processOnSMS+0xc04>)
   15898:	4798      	blx	r3

		incomingSMSProcessed=true;
   1589a:	2328      	movs	r3, #40	; 0x28
   1589c:	33ff      	adds	r3, #255	; 0xff
   1589e:	2208      	movs	r2, #8
   158a0:	4694      	mov	ip, r2
   158a2:	44bc      	add	ip, r7
   158a4:	4463      	add	r3, ip
   158a6:	2201      	movs	r2, #1
   158a8:	701a      	strb	r2, [r3, #0]

		if (response_sms_processed_cmd == true)
   158aa:	4bd6      	ldr	r3, [pc, #856]	; (15c04 <processOnSMS+0xc08>)
   158ac:	2294      	movs	r2, #148	; 0x94
   158ae:	0052      	lsls	r2, r2, #1
   158b0:	4694      	mov	ip, r2
   158b2:	2208      	movs	r2, #8
   158b4:	4690      	mov	r8, r2
   158b6:	44b8      	add	r8, r7
   158b8:	44c4      	add	ip, r8
   158ba:	4463      	add	r3, ip
   158bc:	781b      	ldrb	r3, [r3, #0]
   158be:	2b00      	cmp	r3, #0
   158c0:	d101      	bne.n	158c6 <processOnSMS+0x8ca>
   158c2:	f001 fc51 	bl	17168 <processOnSMS+0x216c>
		{
			strcpy(resep_msg,"SEQP OFF");
   158c6:	230c      	movs	r3, #12
   158c8:	2208      	movs	r2, #8
   158ca:	4694      	mov	ip, r2
   158cc:	44bc      	add	ip, r7
   158ce:	4463      	add	r3, ip
   158d0:	4acd      	ldr	r2, [pc, #820]	; (15c08 <processOnSMS+0xc0c>)
   158d2:	ca03      	ldmia	r2!, {r0, r1}
   158d4:	c303      	stmia	r3!, {r0, r1}
   158d6:	7812      	ldrb	r2, [r2, #0]
   158d8:	701a      	strb	r2, [r3, #0]
   158da:	f001 fc45 	bl	17168 <processOnSMS+0x216c>
		}
	}
	else if (StringstartsWith(received_command,"DND"))
   158de:	4acb      	ldr	r2, [pc, #812]	; (15c0c <processOnSMS+0xc10>)
   158e0:	68fb      	ldr	r3, [r7, #12]
   158e2:	0011      	movs	r1, r2
   158e4:	0018      	movs	r0, r3
   158e6:	4bc5      	ldr	r3, [pc, #788]	; (15bfc <processOnSMS+0xc00>)
   158e8:	4798      	blx	r3
   158ea:	1e03      	subs	r3, r0, #0
   158ec:	d06c      	beq.n	159c8 <processOnSMS+0x9cc>
	{
		if (strlen(received_command)>3)
   158ee:	68fb      	ldr	r3, [r7, #12]
   158f0:	0018      	movs	r0, r3
   158f2:	4bc7      	ldr	r3, [pc, #796]	; (15c10 <processOnSMS+0xc14>)
   158f4:	4798      	blx	r3
   158f6:	0003      	movs	r3, r0
   158f8:	2b03      	cmp	r3, #3
   158fa:	d801      	bhi.n	15900 <processOnSMS+0x904>
   158fc:	f001 fc34 	bl	17168 <processOnSMS+0x216c>
		{
			memmove(received_command,received_command+3,strlen(received_command));
   15900:	68fb      	ldr	r3, [r7, #12]
   15902:	1cdc      	adds	r4, r3, #3
   15904:	68fb      	ldr	r3, [r7, #12]
   15906:	0018      	movs	r0, r3
   15908:	4bc1      	ldr	r3, [pc, #772]	; (15c10 <processOnSMS+0xc14>)
   1590a:	4798      	blx	r3
   1590c:	0002      	movs	r2, r0
   1590e:	68fb      	ldr	r3, [r7, #12]
   15910:	0021      	movs	r1, r4
   15912:	0018      	movs	r0, r3
   15914:	4bbf      	ldr	r3, [pc, #764]	; (15c14 <processOnSMS+0xc18>)
   15916:	4798      	blx	r3
			if(received_command[0]=='L' || received_command[0]=='S' || received_command[0]=='O')
   15918:	68fb      	ldr	r3, [r7, #12]
   1591a:	781b      	ldrb	r3, [r3, #0]
   1591c:	2b4c      	cmp	r3, #76	; 0x4c
   1591e:	d009      	beq.n	15934 <processOnSMS+0x938>
   15920:	68fb      	ldr	r3, [r7, #12]
   15922:	781b      	ldrb	r3, [r3, #0]
   15924:	2b53      	cmp	r3, #83	; 0x53
   15926:	d005      	beq.n	15934 <processOnSMS+0x938>
   15928:	68fb      	ldr	r3, [r7, #12]
   1592a:	781b      	ldrb	r3, [r3, #0]
   1592c:	2b4f      	cmp	r3, #79	; 0x4f
   1592e:	d001      	beq.n	15934 <processOnSMS+0x938>
   15930:	f001 fc1a 	bl	17168 <processOnSMS+0x216c>
			{
				saveDNDSettings((char)received_command);  //save specific RESPONSE settings
   15934:	68fb      	ldr	r3, [r7, #12]
   15936:	b2db      	uxtb	r3, r3
   15938:	0018      	movs	r0, r3
   1593a:	4bb7      	ldr	r3, [pc, #732]	; (15c18 <processOnSMS+0xc1c>)
   1593c:	4798      	blx	r3
				
				incomingSMSProcessed=true;
   1593e:	2328      	movs	r3, #40	; 0x28
   15940:	33ff      	adds	r3, #255	; 0xff
   15942:	2208      	movs	r2, #8
   15944:	4694      	mov	ip, r2
   15946:	44bc      	add	ip, r7
   15948:	4463      	add	r3, ip
   1594a:	2201      	movs	r2, #1
   1594c:	701a      	strb	r2, [r3, #0]
				
				if (response_sms_processed_cmd == true)
   1594e:	4bad      	ldr	r3, [pc, #692]	; (15c04 <processOnSMS+0xc08>)
   15950:	2294      	movs	r2, #148	; 0x94
   15952:	0052      	lsls	r2, r2, #1
   15954:	4694      	mov	ip, r2
   15956:	2208      	movs	r2, #8
   15958:	4690      	mov	r8, r2
   1595a:	44b8      	add	r8, r7
   1595c:	44c4      	add	ip, r8
   1595e:	4463      	add	r3, ip
   15960:	781b      	ldrb	r3, [r3, #0]
   15962:	2b00      	cmp	r3, #0
   15964:	d101      	bne.n	1596a <processOnSMS+0x96e>
   15966:	f001 fbff 	bl	17168 <processOnSMS+0x216c>
				{
					strcpy(resep_msg,"DND : ");
   1596a:	230c      	movs	r3, #12
   1596c:	2208      	movs	r2, #8
   1596e:	4694      	mov	ip, r2
   15970:	44bc      	add	ip, r7
   15972:	4463      	add	r3, ip
   15974:	4aa9      	ldr	r2, [pc, #676]	; (15c1c <processOnSMS+0xc20>)
   15976:	6811      	ldr	r1, [r2, #0]
   15978:	6019      	str	r1, [r3, #0]
   1597a:	8891      	ldrh	r1, [r2, #4]
   1597c:	8099      	strh	r1, [r3, #4]
   1597e:	7992      	ldrb	r2, [r2, #6]
   15980:	719a      	strb	r2, [r3, #6]
					strcat(resep_msg,received_command);
   15982:	68fa      	ldr	r2, [r7, #12]
   15984:	230c      	movs	r3, #12
   15986:	2108      	movs	r1, #8
   15988:	468c      	mov	ip, r1
   1598a:	44bc      	add	ip, r7
   1598c:	4463      	add	r3, ip
   1598e:	0011      	movs	r1, r2
   15990:	0018      	movs	r0, r3
   15992:	4ba3      	ldr	r3, [pc, #652]	; (15c20 <processOnSMS+0xc24>)
   15994:	4798      	blx	r3
					strcat(resep_msg," OK");
   15996:	230c      	movs	r3, #12
   15998:	2208      	movs	r2, #8
   1599a:	4694      	mov	ip, r2
   1599c:	44bc      	add	ip, r7
   1599e:	4463      	add	r3, ip
   159a0:	0018      	movs	r0, r3
   159a2:	4b9b      	ldr	r3, [pc, #620]	; (15c10 <processOnSMS+0xc14>)
   159a4:	4798      	blx	r3
   159a6:	0003      	movs	r3, r0
   159a8:	001a      	movs	r2, r3
   159aa:	230c      	movs	r3, #12
   159ac:	2108      	movs	r1, #8
   159ae:	468c      	mov	ip, r1
   159b0:	44bc      	add	ip, r7
   159b2:	4463      	add	r3, ip
   159b4:	189a      	adds	r2, r3, r2
   159b6:	4b9b      	ldr	r3, [pc, #620]	; (15c24 <processOnSMS+0xc28>)
   159b8:	0010      	movs	r0, r2
   159ba:	0019      	movs	r1, r3
   159bc:	2304      	movs	r3, #4
   159be:	001a      	movs	r2, r3
   159c0:	4b99      	ldr	r3, [pc, #612]	; (15c28 <processOnSMS+0xc2c>)
   159c2:	4798      	blx	r3
   159c4:	f001 fbd0 	bl	17168 <processOnSMS+0x216c>
				}
			}
		}
	}
	else if (StringstartsWith(received_command,"FDBK"))
   159c8:	4a98      	ldr	r2, [pc, #608]	; (15c2c <processOnSMS+0xc30>)
   159ca:	68fb      	ldr	r3, [r7, #12]
   159cc:	0011      	movs	r1, r2
   159ce:	0018      	movs	r0, r3
   159d0:	4b8a      	ldr	r3, [pc, #552]	; (15bfc <processOnSMS+0xc00>)
   159d2:	4798      	blx	r3
   159d4:	1e03      	subs	r3, r0, #0
   159d6:	d072      	beq.n	15abe <processOnSMS+0xac2>
	{
		if (strlen(received_command)>4)
   159d8:	68fb      	ldr	r3, [r7, #12]
   159da:	0018      	movs	r0, r3
   159dc:	4b8c      	ldr	r3, [pc, #560]	; (15c10 <processOnSMS+0xc14>)
   159de:	4798      	blx	r3
   159e0:	0003      	movs	r3, r0
   159e2:	2b04      	cmp	r3, #4
   159e4:	d801      	bhi.n	159ea <processOnSMS+0x9ee>
   159e6:	f001 fbbf 	bl	17168 <processOnSMS+0x216c>
		{
			memmove(received_command,received_command+4,strlen(received_command));
   159ea:	68fb      	ldr	r3, [r7, #12]
   159ec:	1d1c      	adds	r4, r3, #4
   159ee:	68fb      	ldr	r3, [r7, #12]
   159f0:	0018      	movs	r0, r3
   159f2:	4b87      	ldr	r3, [pc, #540]	; (15c10 <processOnSMS+0xc14>)
   159f4:	4798      	blx	r3
   159f6:	0002      	movs	r2, r0
   159f8:	68fb      	ldr	r3, [r7, #12]
   159fa:	0021      	movs	r1, r4
   159fc:	0018      	movs	r0, r3
   159fe:	4b85      	ldr	r3, [pc, #532]	; (15c14 <processOnSMS+0xc18>)
   15a00:	4798      	blx	r3
			uint8_t fdbkValue = atoi(received_command);
   15a02:	68fb      	ldr	r3, [r7, #12]
   15a04:	0018      	movs	r0, r3
   15a06:	4b8a      	ldr	r3, [pc, #552]	; (15c30 <processOnSMS+0xc34>)
   15a08:	4798      	blx	r3
   15a0a:	0002      	movs	r2, r0
   15a0c:	2326      	movs	r3, #38	; 0x26
   15a0e:	33ff      	adds	r3, #255	; 0xff
   15a10:	2108      	movs	r1, #8
   15a12:	468c      	mov	ip, r1
   15a14:	44bc      	add	ip, r7
   15a16:	4463      	add	r3, ip
   15a18:	701a      	strb	r2, [r3, #0]
			if (fdbkValue <= MOTORFEEDBACK_DETECTION_ON)
   15a1a:	2326      	movs	r3, #38	; 0x26
   15a1c:	33ff      	adds	r3, #255	; 0xff
   15a1e:	2208      	movs	r2, #8
   15a20:	4694      	mov	ip, r2
   15a22:	44bc      	add	ip, r7
   15a24:	4463      	add	r3, ip
   15a26:	781b      	ldrb	r3, [r3, #0]
   15a28:	2b02      	cmp	r3, #2
   15a2a:	d901      	bls.n	15a30 <processOnSMS+0xa34>
   15a2c:	f001 fb9c 	bl	17168 <processOnSMS+0x216c>
			{
				if (fdbkValue == MOTORFEEDBACK_DETECTION_CURRENT)
   15a30:	2326      	movs	r3, #38	; 0x26
   15a32:	33ff      	adds	r3, #255	; 0xff
   15a34:	2208      	movs	r2, #8
   15a36:	4694      	mov	ip, r2
   15a38:	44bc      	add	ip, r7
   15a3a:	4463      	add	r3, ip
   15a3c:	781b      	ldrb	r3, [r3, #0]
   15a3e:	2b01      	cmp	r3, #1
   15a40:	d10b      	bne.n	15a5a <processOnSMS+0xa5e>
				{
					if (!factory_settings_parameter_struct.ENABLE_CURRENT)
   15a42:	4b7c      	ldr	r3, [pc, #496]	; (15c34 <processOnSMS+0xc38>)
   15a44:	785b      	ldrb	r3, [r3, #1]
   15a46:	2b00      	cmp	r3, #0
   15a48:	d107      	bne.n	15a5a <processOnSMS+0xa5e>
					{
						fdbkValue=MOTORFEEDBACK_DETECTION_OFF;
   15a4a:	2326      	movs	r3, #38	; 0x26
   15a4c:	33ff      	adds	r3, #255	; 0xff
   15a4e:	2208      	movs	r2, #8
   15a50:	4694      	mov	ip, r2
   15a52:	44bc      	add	ip, r7
   15a54:	4463      	add	r3, ip
   15a56:	2200      	movs	r2, #0
   15a58:	701a      	strb	r2, [r3, #0]
					}
				}
				saveMotorFeedbackDetectionSettings(fdbkValue);
   15a5a:	2326      	movs	r3, #38	; 0x26
   15a5c:	33ff      	adds	r3, #255	; 0xff
   15a5e:	2208      	movs	r2, #8
   15a60:	4694      	mov	ip, r2
   15a62:	44bc      	add	ip, r7
   15a64:	4463      	add	r3, ip
   15a66:	781b      	ldrb	r3, [r3, #0]
   15a68:	0018      	movs	r0, r3
   15a6a:	4b73      	ldr	r3, [pc, #460]	; (15c38 <processOnSMS+0xc3c>)
   15a6c:	4798      	blx	r3
				incomingSMSProcessed=true;
   15a6e:	2328      	movs	r3, #40	; 0x28
   15a70:	33ff      	adds	r3, #255	; 0xff
   15a72:	2208      	movs	r2, #8
   15a74:	4694      	mov	ip, r2
   15a76:	44bc      	add	ip, r7
   15a78:	4463      	add	r3, ip
   15a7a:	2201      	movs	r2, #1
   15a7c:	701a      	strb	r2, [r3, #0]
				
				if (response_sms_processed_cmd == true)
   15a7e:	4b61      	ldr	r3, [pc, #388]	; (15c04 <processOnSMS+0xc08>)
   15a80:	2294      	movs	r2, #148	; 0x94
   15a82:	0052      	lsls	r2, r2, #1
   15a84:	4694      	mov	ip, r2
   15a86:	2208      	movs	r2, #8
   15a88:	4690      	mov	r8, r2
   15a8a:	44b8      	add	r8, r7
   15a8c:	44c4      	add	ip, r8
   15a8e:	4463      	add	r3, ip
   15a90:	781b      	ldrb	r3, [r3, #0]
   15a92:	2b00      	cmp	r3, #0
   15a94:	d101      	bne.n	15a9a <processOnSMS+0xa9e>
   15a96:	f001 fb67 	bl	17168 <processOnSMS+0x216c>
				{
					sprintf(resep_msg,"FDBK : %d", fdbkValue);
   15a9a:	2326      	movs	r3, #38	; 0x26
   15a9c:	33ff      	adds	r3, #255	; 0xff
   15a9e:	2208      	movs	r2, #8
   15aa0:	4694      	mov	ip, r2
   15aa2:	44bc      	add	ip, r7
   15aa4:	4463      	add	r3, ip
   15aa6:	781a      	ldrb	r2, [r3, #0]
   15aa8:	4964      	ldr	r1, [pc, #400]	; (15c3c <processOnSMS+0xc40>)
   15aaa:	230c      	movs	r3, #12
   15aac:	2008      	movs	r0, #8
   15aae:	4684      	mov	ip, r0
   15ab0:	44bc      	add	ip, r7
   15ab2:	4463      	add	r3, ip
   15ab4:	0018      	movs	r0, r3
   15ab6:	4b62      	ldr	r3, [pc, #392]	; (15c40 <processOnSMS+0xc44>)
   15ab8:	4798      	blx	r3
   15aba:	f001 fb55 	bl	17168 <processOnSMS+0x216c>
				}
			}
		}
	}
	else if (StringstartsWith(received_command,"UOMETHOD"))
   15abe:	4a61      	ldr	r2, [pc, #388]	; (15c44 <processOnSMS+0xc48>)
   15ac0:	68fb      	ldr	r3, [r7, #12]
   15ac2:	0011      	movs	r1, r2
   15ac4:	0018      	movs	r0, r3
   15ac6:	4b4d      	ldr	r3, [pc, #308]	; (15bfc <processOnSMS+0xc00>)
   15ac8:	4798      	blx	r3
   15aca:	1e03      	subs	r3, r0, #0
   15acc:	d100      	bne.n	15ad0 <processOnSMS+0xad4>
   15ace:	e0bf      	b.n	15c50 <processOnSMS+0xc54>
	{
		if (strlen(received_command)>8)
   15ad0:	68fb      	ldr	r3, [r7, #12]
   15ad2:	0018      	movs	r0, r3
   15ad4:	4b4e      	ldr	r3, [pc, #312]	; (15c10 <processOnSMS+0xc14>)
   15ad6:	4798      	blx	r3
   15ad8:	0003      	movs	r3, r0
   15ada:	2b08      	cmp	r3, #8
   15adc:	d801      	bhi.n	15ae2 <processOnSMS+0xae6>
   15ade:	f001 fb43 	bl	17168 <processOnSMS+0x216c>
		{
			memmove(received_command,received_command+8,strlen(received_command));
   15ae2:	68fb      	ldr	r3, [r7, #12]
   15ae4:	3308      	adds	r3, #8
   15ae6:	001c      	movs	r4, r3
   15ae8:	68fb      	ldr	r3, [r7, #12]
   15aea:	0018      	movs	r0, r3
   15aec:	4b48      	ldr	r3, [pc, #288]	; (15c10 <processOnSMS+0xc14>)
   15aee:	4798      	blx	r3
   15af0:	0002      	movs	r2, r0
   15af2:	68fb      	ldr	r3, [r7, #12]
   15af4:	0021      	movs	r1, r4
   15af6:	0018      	movs	r0, r3
   15af8:	4b46      	ldr	r3, [pc, #280]	; (15c14 <processOnSMS+0xc18>)
   15afa:	4798      	blx	r3
			
			if(factory_settings_parameter_struct.ENABLE_CURRENT)
   15afc:	4b4d      	ldr	r3, [pc, #308]	; (15c34 <processOnSMS+0xc38>)
   15afe:	785b      	ldrb	r3, [r3, #1]
   15b00:	2b00      	cmp	r3, #0
   15b02:	d101      	bne.n	15b08 <processOnSMS+0xb0c>
   15b04:	f001 fb30 	bl	17168 <processOnSMS+0x216c>
			{
				uint8_t detectionMethod=0;
   15b08:	2392      	movs	r3, #146	; 0x92
   15b0a:	005b      	lsls	r3, r3, #1
   15b0c:	2208      	movs	r2, #8
   15b0e:	4694      	mov	ip, r2
   15b10:	44bc      	add	ip, r7
   15b12:	4463      	add	r3, ip
   15b14:	2200      	movs	r2, #0
   15b16:	701a      	strb	r2, [r3, #0]
				if(received_command[0]=='C')
   15b18:	68fb      	ldr	r3, [r7, #12]
   15b1a:	781b      	ldrb	r3, [r3, #0]
   15b1c:	2b43      	cmp	r3, #67	; 0x43
   15b1e:	d108      	bne.n	15b32 <processOnSMS+0xb36>
				{
					detectionMethod=MOTOR_UNDEROVER_DETECTION_CURRENT;
   15b20:	2392      	movs	r3, #146	; 0x92
   15b22:	005b      	lsls	r3, r3, #1
   15b24:	2208      	movs	r2, #8
   15b26:	4694      	mov	ip, r2
   15b28:	44bc      	add	ip, r7
   15b2a:	4463      	add	r3, ip
   15b2c:	2202      	movs	r2, #2
   15b2e:	701a      	strb	r2, [r3, #0]
   15b30:	e00b      	b.n	15b4a <processOnSMS+0xb4e>
				}
				else if(received_command[0]=='P')
   15b32:	68fb      	ldr	r3, [r7, #12]
   15b34:	781b      	ldrb	r3, [r3, #0]
   15b36:	2b50      	cmp	r3, #80	; 0x50
   15b38:	d107      	bne.n	15b4a <processOnSMS+0xb4e>
				{
					detectionMethod=MOTOR_UNDEROVER_DETECTION_POWER;
   15b3a:	2392      	movs	r3, #146	; 0x92
   15b3c:	005b      	lsls	r3, r3, #1
   15b3e:	2208      	movs	r2, #8
   15b40:	4694      	mov	ip, r2
   15b42:	44bc      	add	ip, r7
   15b44:	4463      	add	r3, ip
   15b46:	2201      	movs	r2, #1
   15b48:	701a      	strb	r2, [r3, #0]
				}
				
				if(detectionMethod!=0)
   15b4a:	2392      	movs	r3, #146	; 0x92
   15b4c:	005b      	lsls	r3, r3, #1
   15b4e:	2208      	movs	r2, #8
   15b50:	4694      	mov	ip, r2
   15b52:	44bc      	add	ip, r7
   15b54:	4463      	add	r3, ip
   15b56:	781b      	ldrb	r3, [r3, #0]
   15b58:	2b00      	cmp	r3, #0
   15b5a:	d101      	bne.n	15b60 <processOnSMS+0xb64>
   15b5c:	f001 fb04 	bl	17168 <processOnSMS+0x216c>
				{
					saveUnderOverDetectionMethodSettings(detectionMethod);
   15b60:	2392      	movs	r3, #146	; 0x92
   15b62:	005b      	lsls	r3, r3, #1
   15b64:	2208      	movs	r2, #8
   15b66:	4694      	mov	ip, r2
   15b68:	44bc      	add	ip, r7
   15b6a:	4463      	add	r3, ip
   15b6c:	781b      	ldrb	r3, [r3, #0]
   15b6e:	0018      	movs	r0, r3
   15b70:	4b35      	ldr	r3, [pc, #212]	; (15c48 <processOnSMS+0xc4c>)
   15b72:	4798      	blx	r3
					incomingSMSProcessed=true;
   15b74:	2328      	movs	r3, #40	; 0x28
   15b76:	33ff      	adds	r3, #255	; 0xff
   15b78:	2208      	movs	r2, #8
   15b7a:	4694      	mov	ip, r2
   15b7c:	44bc      	add	ip, r7
   15b7e:	4463      	add	r3, ip
   15b80:	2201      	movs	r2, #1
   15b82:	701a      	strb	r2, [r3, #0]
					if (response_sms_processed_cmd == true)
   15b84:	4b1f      	ldr	r3, [pc, #124]	; (15c04 <processOnSMS+0xc08>)
   15b86:	2294      	movs	r2, #148	; 0x94
   15b88:	0052      	lsls	r2, r2, #1
   15b8a:	4694      	mov	ip, r2
   15b8c:	2208      	movs	r2, #8
   15b8e:	4690      	mov	r8, r2
   15b90:	44b8      	add	r8, r7
   15b92:	44c4      	add	ip, r8
   15b94:	4463      	add	r3, ip
   15b96:	781b      	ldrb	r3, [r3, #0]
   15b98:	2b00      	cmp	r3, #0
   15b9a:	d101      	bne.n	15ba0 <processOnSMS+0xba4>
   15b9c:	f001 fae4 	bl	17168 <processOnSMS+0x216c>
					{
						strcpy(resep_msg,"UOMETHOD : ");
   15ba0:	230c      	movs	r3, #12
   15ba2:	2208      	movs	r2, #8
   15ba4:	4694      	mov	ip, r2
   15ba6:	44bc      	add	ip, r7
   15ba8:	4463      	add	r3, ip
   15baa:	4a28      	ldr	r2, [pc, #160]	; (15c4c <processOnSMS+0xc50>)
   15bac:	ca13      	ldmia	r2!, {r0, r1, r4}
   15bae:	c313      	stmia	r3!, {r0, r1, r4}
						strcat(resep_msg,received_command);
   15bb0:	68fa      	ldr	r2, [r7, #12]
   15bb2:	230c      	movs	r3, #12
   15bb4:	2108      	movs	r1, #8
   15bb6:	468c      	mov	ip, r1
   15bb8:	44bc      	add	ip, r7
   15bba:	4463      	add	r3, ip
   15bbc:	0011      	movs	r1, r2
   15bbe:	0018      	movs	r0, r3
   15bc0:	4b17      	ldr	r3, [pc, #92]	; (15c20 <processOnSMS+0xc24>)
   15bc2:	4798      	blx	r3
						strcat(resep_msg," OK");
   15bc4:	230c      	movs	r3, #12
   15bc6:	2208      	movs	r2, #8
   15bc8:	4694      	mov	ip, r2
   15bca:	44bc      	add	ip, r7
   15bcc:	4463      	add	r3, ip
   15bce:	0018      	movs	r0, r3
   15bd0:	4b0f      	ldr	r3, [pc, #60]	; (15c10 <processOnSMS+0xc14>)
   15bd2:	4798      	blx	r3
   15bd4:	0003      	movs	r3, r0
   15bd6:	001a      	movs	r2, r3
   15bd8:	230c      	movs	r3, #12
   15bda:	2108      	movs	r1, #8
   15bdc:	468c      	mov	ip, r1
   15bde:	44bc      	add	ip, r7
   15be0:	4463      	add	r3, ip
   15be2:	189a      	adds	r2, r3, r2
   15be4:	4b0f      	ldr	r3, [pc, #60]	; (15c24 <processOnSMS+0xc28>)
   15be6:	0010      	movs	r0, r2
   15be8:	0019      	movs	r1, r3
   15bea:	2304      	movs	r3, #4
   15bec:	001a      	movs	r2, r3
   15bee:	4b0e      	ldr	r3, [pc, #56]	; (15c28 <processOnSMS+0xc2c>)
   15bf0:	4798      	blx	r3
   15bf2:	f001 fab9 	bl	17168 <processOnSMS+0x216c>
   15bf6:	46c0      	nop			; (mov r8, r8)
   15bf8:	00029df8 	.word	0x00029df8
   15bfc:	00014211 	.word	0x00014211
   15c00:	00011679 	.word	0x00011679
   15c04:	fffffeda 	.word	0xfffffeda
   15c08:	00029e00 	.word	0x00029e00
   15c0c:	00029e0c 	.word	0x00029e0c
   15c10:	00028c73 	.word	0x00028c73
   15c14:	000289bf 	.word	0x000289bf
   15c18:	00011341 	.word	0x00011341
   15c1c:	00029e10 	.word	0x00029e10
   15c20:	00028c2d 	.word	0x00028c2d
   15c24:	00029e18 	.word	0x00029e18
   15c28:	000289ad 	.word	0x000289ad
   15c2c:	00029e1c 	.word	0x00029e1c
   15c30:	000288c9 	.word	0x000288c9
   15c34:	2000062c 	.word	0x2000062c
   15c38:	000117a1 	.word	0x000117a1
   15c3c:	00029e24 	.word	0x00029e24
   15c40:	00028be9 	.word	0x00028be9
   15c44:	00029e30 	.word	0x00029e30
   15c48:	000116c5 	.word	0x000116c5
   15c4c:	00029e3c 	.word	0x00029e3c
					}
				}
			}
		}
	}
	else if(StringstartsWith(received_command,"MVBYPON"))
   15c50:	4acf      	ldr	r2, [pc, #828]	; (15f90 <processOnSMS+0xf94>)
   15c52:	68fb      	ldr	r3, [r7, #12]
   15c54:	0011      	movs	r1, r2
   15c56:	0018      	movs	r0, r3
   15c58:	4bce      	ldr	r3, [pc, #824]	; (15f94 <processOnSMS+0xf98>)
   15c5a:	4798      	blx	r3
   15c5c:	1e03      	subs	r3, r0, #0
   15c5e:	d024      	beq.n	15caa <processOnSMS+0xcae>
	{
		saveMotorVoltageBypassSettings(true);
   15c60:	2001      	movs	r0, #1
   15c62:	4bcd      	ldr	r3, [pc, #820]	; (15f98 <processOnSMS+0xf9c>)
   15c64:	4798      	blx	r3
		incomingSMSProcessed=true;
   15c66:	2328      	movs	r3, #40	; 0x28
   15c68:	33ff      	adds	r3, #255	; 0xff
   15c6a:	2208      	movs	r2, #8
   15c6c:	4694      	mov	ip, r2
   15c6e:	44bc      	add	ip, r7
   15c70:	4463      	add	r3, ip
   15c72:	2201      	movs	r2, #1
   15c74:	701a      	strb	r2, [r3, #0]
		
		if (response_sms_processed_cmd == true)
   15c76:	4bc9      	ldr	r3, [pc, #804]	; (15f9c <processOnSMS+0xfa0>)
   15c78:	2294      	movs	r2, #148	; 0x94
   15c7a:	0052      	lsls	r2, r2, #1
   15c7c:	4694      	mov	ip, r2
   15c7e:	2208      	movs	r2, #8
   15c80:	4690      	mov	r8, r2
   15c82:	44b8      	add	r8, r7
   15c84:	44c4      	add	ip, r8
   15c86:	4463      	add	r3, ip
   15c88:	781b      	ldrb	r3, [r3, #0]
   15c8a:	2b00      	cmp	r3, #0
   15c8c:	d101      	bne.n	15c92 <processOnSMS+0xc96>
   15c8e:	f001 fa6b 	bl	17168 <processOnSMS+0x216c>
		{
			strcpy(resep_msg,"MOTOR VOLTAGE BYPASS ON");
   15c92:	230c      	movs	r3, #12
   15c94:	2208      	movs	r2, #8
   15c96:	4694      	mov	ip, r2
   15c98:	44bc      	add	ip, r7
   15c9a:	4463      	add	r3, ip
   15c9c:	4ac0      	ldr	r2, [pc, #768]	; (15fa0 <processOnSMS+0xfa4>)
   15c9e:	ca13      	ldmia	r2!, {r0, r1, r4}
   15ca0:	c313      	stmia	r3!, {r0, r1, r4}
   15ca2:	ca13      	ldmia	r2!, {r0, r1, r4}
   15ca4:	c313      	stmia	r3!, {r0, r1, r4}
   15ca6:	f001 fa5f 	bl	17168 <processOnSMS+0x216c>
		}
	}
	else if(StringstartsWith(received_command,"MVBYPOFF"))
   15caa:	4abe      	ldr	r2, [pc, #760]	; (15fa4 <processOnSMS+0xfa8>)
   15cac:	68fb      	ldr	r3, [r7, #12]
   15cae:	0011      	movs	r1, r2
   15cb0:	0018      	movs	r0, r3
   15cb2:	4bb8      	ldr	r3, [pc, #736]	; (15f94 <processOnSMS+0xf98>)
   15cb4:	4798      	blx	r3
   15cb6:	1e03      	subs	r3, r0, #0
   15cb8:	d026      	beq.n	15d08 <processOnSMS+0xd0c>
	{
		saveMotorVoltageBypassSettings(false);
   15cba:	2000      	movs	r0, #0
   15cbc:	4bb6      	ldr	r3, [pc, #728]	; (15f98 <processOnSMS+0xf9c>)
   15cbe:	4798      	blx	r3
		incomingSMSProcessed=true;
   15cc0:	2328      	movs	r3, #40	; 0x28
   15cc2:	33ff      	adds	r3, #255	; 0xff
   15cc4:	2208      	movs	r2, #8
   15cc6:	4694      	mov	ip, r2
   15cc8:	44bc      	add	ip, r7
   15cca:	4463      	add	r3, ip
   15ccc:	2201      	movs	r2, #1
   15cce:	701a      	strb	r2, [r3, #0]
		
		if (response_sms_processed_cmd == true)
   15cd0:	4bb2      	ldr	r3, [pc, #712]	; (15f9c <processOnSMS+0xfa0>)
   15cd2:	2294      	movs	r2, #148	; 0x94
   15cd4:	0052      	lsls	r2, r2, #1
   15cd6:	4694      	mov	ip, r2
   15cd8:	2208      	movs	r2, #8
   15cda:	4690      	mov	r8, r2
   15cdc:	44b8      	add	r8, r7
   15cde:	44c4      	add	ip, r8
   15ce0:	4463      	add	r3, ip
   15ce2:	781b      	ldrb	r3, [r3, #0]
   15ce4:	2b00      	cmp	r3, #0
   15ce6:	d101      	bne.n	15cec <processOnSMS+0xcf0>
   15ce8:	f001 fa3e 	bl	17168 <processOnSMS+0x216c>
		{
			strcpy(resep_msg,"MOTOR VOLTAGE BYPASS OFF");
   15cec:	230c      	movs	r3, #12
   15cee:	2208      	movs	r2, #8
   15cf0:	4694      	mov	ip, r2
   15cf2:	44bc      	add	ip, r7
   15cf4:	4463      	add	r3, ip
   15cf6:	4aac      	ldr	r2, [pc, #688]	; (15fa8 <processOnSMS+0xfac>)
   15cf8:	ca13      	ldmia	r2!, {r0, r1, r4}
   15cfa:	c313      	stmia	r3!, {r0, r1, r4}
   15cfc:	ca13      	ldmia	r2!, {r0, r1, r4}
   15cfe:	c313      	stmia	r3!, {r0, r1, r4}
   15d00:	7812      	ldrb	r2, [r2, #0]
   15d02:	701a      	strb	r2, [r3, #0]
   15d04:	f001 fa30 	bl	17168 <processOnSMS+0x216c>
		}
	}
	else if(StringstartsWith(received_command,"MVBYPT"))
   15d08:	4aa8      	ldr	r2, [pc, #672]	; (15fac <processOnSMS+0xfb0>)
   15d0a:	68fb      	ldr	r3, [r7, #12]
   15d0c:	0011      	movs	r1, r2
   15d0e:	0018      	movs	r0, r3
   15d10:	4ba0      	ldr	r3, [pc, #640]	; (15f94 <processOnSMS+0xf98>)
   15d12:	4798      	blx	r3
   15d14:	1e03      	subs	r3, r0, #0
   15d16:	d06b      	beq.n	15df0 <processOnSMS+0xdf4>
	{
		memmove(received_command,received_command+6,strlen(received_command));
   15d18:	68fb      	ldr	r3, [r7, #12]
   15d1a:	1d9c      	adds	r4, r3, #6
   15d1c:	68fb      	ldr	r3, [r7, #12]
   15d1e:	0018      	movs	r0, r3
   15d20:	4ba3      	ldr	r3, [pc, #652]	; (15fb0 <processOnSMS+0xfb4>)
   15d22:	4798      	blx	r3
   15d24:	0002      	movs	r2, r0
   15d26:	68fb      	ldr	r3, [r7, #12]
   15d28:	0021      	movs	r1, r4
   15d2a:	0018      	movs	r0, r3
   15d2c:	4ba1      	ldr	r3, [pc, #644]	; (15fb4 <processOnSMS+0xfb8>)
   15d2e:	4798      	blx	r3
		uint8_t voltageBypTime = atoi(received_command);
   15d30:	68fb      	ldr	r3, [r7, #12]
   15d32:	0018      	movs	r0, r3
   15d34:	4ba0      	ldr	r3, [pc, #640]	; (15fb8 <processOnSMS+0xfbc>)
   15d36:	4798      	blx	r3
   15d38:	0002      	movs	r2, r0
   15d3a:	2324      	movs	r3, #36	; 0x24
   15d3c:	33ff      	adds	r3, #255	; 0xff
   15d3e:	2108      	movs	r1, #8
   15d40:	468c      	mov	ip, r1
   15d42:	44bc      	add	ip, r7
   15d44:	4463      	add	r3, ip
   15d46:	701a      	strb	r2, [r3, #0]
		if (voltageBypTime<10) voltageBypTime = 10;
   15d48:	2324      	movs	r3, #36	; 0x24
   15d4a:	33ff      	adds	r3, #255	; 0xff
   15d4c:	2208      	movs	r2, #8
   15d4e:	4694      	mov	ip, r2
   15d50:	44bc      	add	ip, r7
   15d52:	4463      	add	r3, ip
   15d54:	781b      	ldrb	r3, [r3, #0]
   15d56:	2b09      	cmp	r3, #9
   15d58:	d807      	bhi.n	15d6a <processOnSMS+0xd6e>
   15d5a:	2324      	movs	r3, #36	; 0x24
   15d5c:	33ff      	adds	r3, #255	; 0xff
   15d5e:	2208      	movs	r2, #8
   15d60:	4694      	mov	ip, r2
   15d62:	44bc      	add	ip, r7
   15d64:	4463      	add	r3, ip
   15d66:	220a      	movs	r2, #10
   15d68:	701a      	strb	r2, [r3, #0]
		if (voltageBypTime>3600L) voltageBypTime=3600L;
		
		voltageBypTime=voltageBypTime*1000L;
   15d6a:	2324      	movs	r3, #36	; 0x24
   15d6c:	33ff      	adds	r3, #255	; 0xff
   15d6e:	2208      	movs	r2, #8
   15d70:	4694      	mov	ip, r2
   15d72:	44bc      	add	ip, r7
   15d74:	4463      	add	r3, ip
   15d76:	2224      	movs	r2, #36	; 0x24
   15d78:	32ff      	adds	r2, #255	; 0xff
   15d7a:	2108      	movs	r1, #8
   15d7c:	468c      	mov	ip, r1
   15d7e:	44bc      	add	ip, r7
   15d80:	4462      	add	r2, ip
   15d82:	7812      	ldrb	r2, [r2, #0]
   15d84:	2118      	movs	r1, #24
   15d86:	4249      	negs	r1, r1
   15d88:	434a      	muls	r2, r1
   15d8a:	701a      	strb	r2, [r3, #0]
		
		saveMotorVoltageBypasssTimeSettings(voltageBypTime);
   15d8c:	2324      	movs	r3, #36	; 0x24
   15d8e:	33ff      	adds	r3, #255	; 0xff
   15d90:	2208      	movs	r2, #8
   15d92:	4694      	mov	ip, r2
   15d94:	44bc      	add	ip, r7
   15d96:	4463      	add	r3, ip
   15d98:	781b      	ldrb	r3, [r3, #0]
   15d9a:	0018      	movs	r0, r3
   15d9c:	4b87      	ldr	r3, [pc, #540]	; (15fbc <processOnSMS+0xfc0>)
   15d9e:	4798      	blx	r3
		incomingSMSProcessed=true;
   15da0:	2328      	movs	r3, #40	; 0x28
   15da2:	33ff      	adds	r3, #255	; 0xff
   15da4:	2208      	movs	r2, #8
   15da6:	4694      	mov	ip, r2
   15da8:	44bc      	add	ip, r7
   15daa:	4463      	add	r3, ip
   15dac:	2201      	movs	r2, #1
   15dae:	701a      	strb	r2, [r3, #0]
		
		if (response_sms_processed_cmd == true)
   15db0:	4b7a      	ldr	r3, [pc, #488]	; (15f9c <processOnSMS+0xfa0>)
   15db2:	2294      	movs	r2, #148	; 0x94
   15db4:	0052      	lsls	r2, r2, #1
   15db6:	4694      	mov	ip, r2
   15db8:	2208      	movs	r2, #8
   15dba:	4690      	mov	r8, r2
   15dbc:	44b8      	add	r8, r7
   15dbe:	44c4      	add	ip, r8
   15dc0:	4463      	add	r3, ip
   15dc2:	781b      	ldrb	r3, [r3, #0]
   15dc4:	2b00      	cmp	r3, #0
   15dc6:	d101      	bne.n	15dcc <processOnSMS+0xdd0>
   15dc8:	f001 f9ce 	bl	17168 <processOnSMS+0x216c>
		{
			sprintf(resep_msg,"Motor Voltage Bypass Time Set to %d",voltageBypTime);
   15dcc:	2324      	movs	r3, #36	; 0x24
   15dce:	33ff      	adds	r3, #255	; 0xff
   15dd0:	2208      	movs	r2, #8
   15dd2:	4694      	mov	ip, r2
   15dd4:	44bc      	add	ip, r7
   15dd6:	4463      	add	r3, ip
   15dd8:	781a      	ldrb	r2, [r3, #0]
   15dda:	4979      	ldr	r1, [pc, #484]	; (15fc0 <processOnSMS+0xfc4>)
   15ddc:	230c      	movs	r3, #12
   15dde:	2008      	movs	r0, #8
   15de0:	4684      	mov	ip, r0
   15de2:	44bc      	add	ip, r7
   15de4:	4463      	add	r3, ip
   15de6:	0018      	movs	r0, r3
   15de8:	4b76      	ldr	r3, [pc, #472]	; (15fc4 <processOnSMS+0xfc8>)
   15dea:	4798      	blx	r3
   15dec:	f001 f9bc 	bl	17168 <processOnSMS+0x216c>
		}
	}
	else if (StringstartsWith(received_command,"RESP"))
   15df0:	4a75      	ldr	r2, [pc, #468]	; (15fc8 <processOnSMS+0xfcc>)
   15df2:	68fb      	ldr	r3, [r7, #12]
   15df4:	0011      	movs	r1, r2
   15df6:	0018      	movs	r0, r3
   15df8:	4b66      	ldr	r3, [pc, #408]	; (15f94 <processOnSMS+0xf98>)
   15dfa:	4798      	blx	r3
   15dfc:	1e03      	subs	r3, r0, #0
   15dfe:	d06c      	beq.n	15eda <processOnSMS+0xede>
	{
		if (strlen(received_command)>4)
   15e00:	68fb      	ldr	r3, [r7, #12]
   15e02:	0018      	movs	r0, r3
   15e04:	4b6a      	ldr	r3, [pc, #424]	; (15fb0 <processOnSMS+0xfb4>)
   15e06:	4798      	blx	r3
   15e08:	0003      	movs	r3, r0
   15e0a:	2b04      	cmp	r3, #4
   15e0c:	d801      	bhi.n	15e12 <processOnSMS+0xe16>
   15e0e:	f001 f9ab 	bl	17168 <processOnSMS+0x216c>
		{
			memmove(received_command,received_command+4,strlen(received_command));
   15e12:	68fb      	ldr	r3, [r7, #12]
   15e14:	1d1c      	adds	r4, r3, #4
   15e16:	68fb      	ldr	r3, [r7, #12]
   15e18:	0018      	movs	r0, r3
   15e1a:	4b65      	ldr	r3, [pc, #404]	; (15fb0 <processOnSMS+0xfb4>)
   15e1c:	4798      	blx	r3
   15e1e:	0002      	movs	r2, r0
   15e20:	68fb      	ldr	r3, [r7, #12]
   15e22:	0021      	movs	r1, r4
   15e24:	0018      	movs	r0, r3
   15e26:	4b63      	ldr	r3, [pc, #396]	; (15fb4 <processOnSMS+0xfb8>)
   15e28:	4798      	blx	r3
			if(received_command[0]=='C' || received_command[0]=='A' || received_command[0]=='T' || received_command[0]=='N')
   15e2a:	68fb      	ldr	r3, [r7, #12]
   15e2c:	781b      	ldrb	r3, [r3, #0]
   15e2e:	2b43      	cmp	r3, #67	; 0x43
   15e30:	d00d      	beq.n	15e4e <processOnSMS+0xe52>
   15e32:	68fb      	ldr	r3, [r7, #12]
   15e34:	781b      	ldrb	r3, [r3, #0]
   15e36:	2b41      	cmp	r3, #65	; 0x41
   15e38:	d009      	beq.n	15e4e <processOnSMS+0xe52>
   15e3a:	68fb      	ldr	r3, [r7, #12]
   15e3c:	781b      	ldrb	r3, [r3, #0]
   15e3e:	2b54      	cmp	r3, #84	; 0x54
   15e40:	d005      	beq.n	15e4e <processOnSMS+0xe52>
   15e42:	68fb      	ldr	r3, [r7, #12]
   15e44:	781b      	ldrb	r3, [r3, #0]
   15e46:	2b4e      	cmp	r3, #78	; 0x4e
   15e48:	d001      	beq.n	15e4e <processOnSMS+0xe52>
   15e4a:	f001 f98d 	bl	17168 <processOnSMS+0x216c>
			{
				saveResponseSettings((char)received_command);  //save specific RESPONSE settings
   15e4e:	68fb      	ldr	r3, [r7, #12]
   15e50:	b2db      	uxtb	r3, r3
   15e52:	0018      	movs	r0, r3
   15e54:	4b5d      	ldr	r3, [pc, #372]	; (15fcc <processOnSMS+0xfd0>)
   15e56:	4798      	blx	r3
				
				incomingSMSProcessed=true;
   15e58:	2328      	movs	r3, #40	; 0x28
   15e5a:	33ff      	adds	r3, #255	; 0xff
   15e5c:	2208      	movs	r2, #8
   15e5e:	4694      	mov	ip, r2
   15e60:	44bc      	add	ip, r7
   15e62:	4463      	add	r3, ip
   15e64:	2201      	movs	r2, #1
   15e66:	701a      	strb	r2, [r3, #0]
				
				if (response_sms_processed_cmd == true)
   15e68:	4b4c      	ldr	r3, [pc, #304]	; (15f9c <processOnSMS+0xfa0>)
   15e6a:	2294      	movs	r2, #148	; 0x94
   15e6c:	0052      	lsls	r2, r2, #1
   15e6e:	4694      	mov	ip, r2
   15e70:	2208      	movs	r2, #8
   15e72:	4690      	mov	r8, r2
   15e74:	44b8      	add	r8, r7
   15e76:	44c4      	add	ip, r8
   15e78:	4463      	add	r3, ip
   15e7a:	781b      	ldrb	r3, [r3, #0]
   15e7c:	2b00      	cmp	r3, #0
   15e7e:	d101      	bne.n	15e84 <processOnSMS+0xe88>
   15e80:	f001 f972 	bl	17168 <processOnSMS+0x216c>
				{
					strcpy(resep_msg,"RESP : ");
   15e84:	230c      	movs	r3, #12
   15e86:	2208      	movs	r2, #8
   15e88:	4694      	mov	ip, r2
   15e8a:	44bc      	add	ip, r7
   15e8c:	4463      	add	r3, ip
   15e8e:	4a50      	ldr	r2, [pc, #320]	; (15fd0 <processOnSMS+0xfd4>)
   15e90:	ca03      	ldmia	r2!, {r0, r1}
   15e92:	c303      	stmia	r3!, {r0, r1}
					strcat(resep_msg,received_command);
   15e94:	68fa      	ldr	r2, [r7, #12]
   15e96:	230c      	movs	r3, #12
   15e98:	2108      	movs	r1, #8
   15e9a:	468c      	mov	ip, r1
   15e9c:	44bc      	add	ip, r7
   15e9e:	4463      	add	r3, ip
   15ea0:	0011      	movs	r1, r2
   15ea2:	0018      	movs	r0, r3
   15ea4:	4b4b      	ldr	r3, [pc, #300]	; (15fd4 <processOnSMS+0xfd8>)
   15ea6:	4798      	blx	r3
					strcat(resep_msg," OK");
   15ea8:	230c      	movs	r3, #12
   15eaa:	2208      	movs	r2, #8
   15eac:	4694      	mov	ip, r2
   15eae:	44bc      	add	ip, r7
   15eb0:	4463      	add	r3, ip
   15eb2:	0018      	movs	r0, r3
   15eb4:	4b3e      	ldr	r3, [pc, #248]	; (15fb0 <processOnSMS+0xfb4>)
   15eb6:	4798      	blx	r3
   15eb8:	0003      	movs	r3, r0
   15eba:	001a      	movs	r2, r3
   15ebc:	230c      	movs	r3, #12
   15ebe:	2108      	movs	r1, #8
   15ec0:	468c      	mov	ip, r1
   15ec2:	44bc      	add	ip, r7
   15ec4:	4463      	add	r3, ip
   15ec6:	189a      	adds	r2, r3, r2
   15ec8:	4b43      	ldr	r3, [pc, #268]	; (15fd8 <processOnSMS+0xfdc>)
   15eca:	0010      	movs	r0, r2
   15ecc:	0019      	movs	r1, r3
   15ece:	2304      	movs	r3, #4
   15ed0:	001a      	movs	r2, r3
   15ed2:	4b42      	ldr	r3, [pc, #264]	; (15fdc <processOnSMS+0xfe0>)
   15ed4:	4798      	blx	r3
   15ed6:	f001 f947 	bl	17168 <processOnSMS+0x216c>
				}
			}
		}
	}
	else if (StringstartsWith(received_command,"OVR"))
   15eda:	4a41      	ldr	r2, [pc, #260]	; (15fe0 <processOnSMS+0xfe4>)
   15edc:	68fb      	ldr	r3, [r7, #12]
   15ede:	0011      	movs	r1, r2
   15ee0:	0018      	movs	r0, r3
   15ee2:	4b2c      	ldr	r3, [pc, #176]	; (15f94 <processOnSMS+0xf98>)
   15ee4:	4798      	blx	r3
   15ee6:	1e03      	subs	r3, r0, #0
   15ee8:	d100      	bne.n	15eec <processOnSMS+0xef0>
   15eea:	e07f      	b.n	15fec <processOnSMS+0xff0>
	{
		memmove(received_command,received_command+3,strlen(received_command));
   15eec:	68fb      	ldr	r3, [r7, #12]
   15eee:	1cdc      	adds	r4, r3, #3
   15ef0:	68fb      	ldr	r3, [r7, #12]
   15ef2:	0018      	movs	r0, r3
   15ef4:	4b2e      	ldr	r3, [pc, #184]	; (15fb0 <processOnSMS+0xfb4>)
   15ef6:	4798      	blx	r3
   15ef8:	0002      	movs	r2, r0
   15efa:	68fb      	ldr	r3, [r7, #12]
   15efc:	0021      	movs	r1, r4
   15efe:	0018      	movs	r0, r3
   15f00:	4b2c      	ldr	r3, [pc, #176]	; (15fb4 <processOnSMS+0xfb8>)
   15f02:	4798      	blx	r3
		uint8_t ovr_per = atoi(received_command);
   15f04:	68fb      	ldr	r3, [r7, #12]
   15f06:	0018      	movs	r0, r3
   15f08:	4b2b      	ldr	r3, [pc, #172]	; (15fb8 <processOnSMS+0xfbc>)
   15f0a:	4798      	blx	r3
   15f0c:	0002      	movs	r2, r0
   15f0e:	238b      	movs	r3, #139	; 0x8b
   15f10:	005b      	lsls	r3, r3, #1
   15f12:	2108      	movs	r1, #8
   15f14:	468c      	mov	ip, r1
   15f16:	44bc      	add	ip, r7
   15f18:	4463      	add	r3, ip
   15f1a:	701a      	strb	r2, [r3, #0]
		if(ovr_per>104)
   15f1c:	238b      	movs	r3, #139	; 0x8b
   15f1e:	005b      	lsls	r3, r3, #1
   15f20:	2208      	movs	r2, #8
   15f22:	4694      	mov	ip, r2
   15f24:	44bc      	add	ip, r7
   15f26:	4463      	add	r3, ip
   15f28:	781b      	ldrb	r3, [r3, #0]
   15f2a:	2b68      	cmp	r3, #104	; 0x68
   15f2c:	d801      	bhi.n	15f32 <processOnSMS+0xf36>
   15f2e:	f001 f91b 	bl	17168 <processOnSMS+0x216c>
		{
			setOverloadPer(ovr_per);
   15f32:	238b      	movs	r3, #139	; 0x8b
   15f34:	005b      	lsls	r3, r3, #1
   15f36:	2208      	movs	r2, #8
   15f38:	4694      	mov	ip, r2
   15f3a:	44bc      	add	ip, r7
   15f3c:	4463      	add	r3, ip
   15f3e:	781b      	ldrb	r3, [r3, #0]
   15f40:	0018      	movs	r0, r3
   15f42:	4b28      	ldr	r3, [pc, #160]	; (15fe4 <processOnSMS+0xfe8>)
   15f44:	4798      	blx	r3
			incomingSMSProcessed=true;
   15f46:	2328      	movs	r3, #40	; 0x28
   15f48:	33ff      	adds	r3, #255	; 0xff
   15f4a:	2208      	movs	r2, #8
   15f4c:	4694      	mov	ip, r2
   15f4e:	44bc      	add	ip, r7
   15f50:	4463      	add	r3, ip
   15f52:	2201      	movs	r2, #1
   15f54:	701a      	strb	r2, [r3, #0]
			
			if (response_sms_processed_cmd == true)
   15f56:	4b11      	ldr	r3, [pc, #68]	; (15f9c <processOnSMS+0xfa0>)
   15f58:	2294      	movs	r2, #148	; 0x94
   15f5a:	0052      	lsls	r2, r2, #1
   15f5c:	4694      	mov	ip, r2
   15f5e:	2208      	movs	r2, #8
   15f60:	4690      	mov	r8, r2
   15f62:	44b8      	add	r8, r7
   15f64:	44c4      	add	ip, r8
   15f66:	4463      	add	r3, ip
   15f68:	781b      	ldrb	r3, [r3, #0]
   15f6a:	2b00      	cmp	r3, #0
   15f6c:	d101      	bne.n	15f72 <processOnSMS+0xf76>
   15f6e:	f001 f8fb 	bl	17168 <processOnSMS+0x216c>
			{
				strcpy(resep_msg,"OVR SET OK");
   15f72:	230c      	movs	r3, #12
   15f74:	2208      	movs	r2, #8
   15f76:	4694      	mov	ip, r2
   15f78:	44bc      	add	ip, r7
   15f7a:	4463      	add	r3, ip
   15f7c:	4a1a      	ldr	r2, [pc, #104]	; (15fe8 <processOnSMS+0xfec>)
   15f7e:	ca03      	ldmia	r2!, {r0, r1}
   15f80:	c303      	stmia	r3!, {r0, r1}
   15f82:	8811      	ldrh	r1, [r2, #0]
   15f84:	8019      	strh	r1, [r3, #0]
   15f86:	7892      	ldrb	r2, [r2, #2]
   15f88:	709a      	strb	r2, [r3, #2]
   15f8a:	f001 f8ed 	bl	17168 <processOnSMS+0x216c>
   15f8e:	46c0      	nop			; (mov r8, r8)
   15f90:	00029e48 	.word	0x00029e48
   15f94:	00014211 	.word	0x00014211
   15f98:	00011711 	.word	0x00011711
   15f9c:	fffffeda 	.word	0xfffffeda
   15fa0:	00029e50 	.word	0x00029e50
   15fa4:	00029e68 	.word	0x00029e68
   15fa8:	00029e74 	.word	0x00029e74
   15fac:	00029e90 	.word	0x00029e90
   15fb0:	00028c73 	.word	0x00028c73
   15fb4:	000289bf 	.word	0x000289bf
   15fb8:	000288c9 	.word	0x000288c9
   15fbc:	0001175d 	.word	0x0001175d
   15fc0:	00029e98 	.word	0x00029e98
   15fc4:	00028be9 	.word	0x00028be9
   15fc8:	00029ebc 	.word	0x00029ebc
   15fcc:	0001138d 	.word	0x0001138d
   15fd0:	00029ec4 	.word	0x00029ec4
   15fd4:	00028c2d 	.word	0x00028c2d
   15fd8:	00029e18 	.word	0x00029e18
   15fdc:	000289ad 	.word	0x000289ad
   15fe0:	00029ecc 	.word	0x00029ecc
   15fe4:	00011501 	.word	0x00011501
   15fe8:	00029ed0 	.word	0x00029ed0
			}
		}
	}
	else if (StringstartsWith(received_command,"UNDR"))
   15fec:	4aef      	ldr	r2, [pc, #956]	; (163ac <processOnSMS+0x13b0>)
   15fee:	68fb      	ldr	r3, [r7, #12]
   15ff0:	0011      	movs	r1, r2
   15ff2:	0018      	movs	r0, r3
   15ff4:	4bee      	ldr	r3, [pc, #952]	; (163b0 <processOnSMS+0x13b4>)
   15ff6:	4798      	blx	r3
   15ff8:	1e03      	subs	r3, r0, #0
   15ffa:	d057      	beq.n	160ac <processOnSMS+0x10b0>
	{
		memmove(received_command,received_command+4,strlen(received_command));
   15ffc:	68fb      	ldr	r3, [r7, #12]
   15ffe:	1d1c      	adds	r4, r3, #4
   16000:	68fb      	ldr	r3, [r7, #12]
   16002:	0018      	movs	r0, r3
   16004:	4beb      	ldr	r3, [pc, #940]	; (163b4 <processOnSMS+0x13b8>)
   16006:	4798      	blx	r3
   16008:	0002      	movs	r2, r0
   1600a:	68fb      	ldr	r3, [r7, #12]
   1600c:	0021      	movs	r1, r4
   1600e:	0018      	movs	r0, r3
   16010:	4be9      	ldr	r3, [pc, #932]	; (163b8 <processOnSMS+0x13bc>)
   16012:	4798      	blx	r3
		uint8_t undr_per = atoi(received_command);
   16014:	68fb      	ldr	r3, [r7, #12]
   16016:	0018      	movs	r0, r3
   16018:	4be8      	ldr	r3, [pc, #928]	; (163bc <processOnSMS+0x13c0>)
   1601a:	4798      	blx	r3
   1601c:	0002      	movs	r2, r0
   1601e:	2316      	movs	r3, #22
   16020:	33ff      	adds	r3, #255	; 0xff
   16022:	2108      	movs	r1, #8
   16024:	468c      	mov	ip, r1
   16026:	44bc      	add	ip, r7
   16028:	4463      	add	r3, ip
   1602a:	701a      	strb	r2, [r3, #0]
		if(undr_per<98 && undr_per>0)
   1602c:	2316      	movs	r3, #22
   1602e:	33ff      	adds	r3, #255	; 0xff
   16030:	2208      	movs	r2, #8
   16032:	4694      	mov	ip, r2
   16034:	44bc      	add	ip, r7
   16036:	4463      	add	r3, ip
   16038:	781b      	ldrb	r3, [r3, #0]
   1603a:	2b61      	cmp	r3, #97	; 0x61
   1603c:	d901      	bls.n	16042 <processOnSMS+0x1046>
   1603e:	f001 f893 	bl	17168 <processOnSMS+0x216c>
   16042:	2316      	movs	r3, #22
   16044:	33ff      	adds	r3, #255	; 0xff
   16046:	2208      	movs	r2, #8
   16048:	4694      	mov	ip, r2
   1604a:	44bc      	add	ip, r7
   1604c:	4463      	add	r3, ip
   1604e:	781b      	ldrb	r3, [r3, #0]
   16050:	2b00      	cmp	r3, #0
   16052:	d101      	bne.n	16058 <processOnSMS+0x105c>
   16054:	f001 f888 	bl	17168 <processOnSMS+0x216c>
		{

			setUnderloadPer(undr_per);
   16058:	2316      	movs	r3, #22
   1605a:	33ff      	adds	r3, #255	; 0xff
   1605c:	2208      	movs	r2, #8
   1605e:	4694      	mov	ip, r2
   16060:	44bc      	add	ip, r7
   16062:	4463      	add	r3, ip
   16064:	781b      	ldrb	r3, [r3, #0]
   16066:	0018      	movs	r0, r3
   16068:	4bd5      	ldr	r3, [pc, #852]	; (163c0 <processOnSMS+0x13c4>)
   1606a:	4798      	blx	r3

			incomingSMSProcessed=true;
   1606c:	2328      	movs	r3, #40	; 0x28
   1606e:	33ff      	adds	r3, #255	; 0xff
   16070:	2208      	movs	r2, #8
   16072:	4694      	mov	ip, r2
   16074:	44bc      	add	ip, r7
   16076:	4463      	add	r3, ip
   16078:	2201      	movs	r2, #1
   1607a:	701a      	strb	r2, [r3, #0]

			if (response_sms_processed_cmd == true)
   1607c:	4bd1      	ldr	r3, [pc, #836]	; (163c4 <processOnSMS+0x13c8>)
   1607e:	2294      	movs	r2, #148	; 0x94
   16080:	0052      	lsls	r2, r2, #1
   16082:	4694      	mov	ip, r2
   16084:	2208      	movs	r2, #8
   16086:	4690      	mov	r8, r2
   16088:	44b8      	add	r8, r7
   1608a:	44c4      	add	ip, r8
   1608c:	4463      	add	r3, ip
   1608e:	781b      	ldrb	r3, [r3, #0]
   16090:	2b00      	cmp	r3, #0
   16092:	d101      	bne.n	16098 <processOnSMS+0x109c>
   16094:	f001 f868 	bl	17168 <processOnSMS+0x216c>
			{
				strcpy(resep_msg,"UNDR SET OK");
   16098:	230c      	movs	r3, #12
   1609a:	2208      	movs	r2, #8
   1609c:	4694      	mov	ip, r2
   1609e:	44bc      	add	ip, r7
   160a0:	4463      	add	r3, ip
   160a2:	4ac9      	ldr	r2, [pc, #804]	; (163c8 <processOnSMS+0x13cc>)
   160a4:	ca13      	ldmia	r2!, {r0, r1, r4}
   160a6:	c313      	stmia	r3!, {r0, r1, r4}
   160a8:	f001 f85e 	bl	17168 <processOnSMS+0x216c>
			}
		}
	}
	else if (StringstartsWith(received_command,"ASTAT"))
   160ac:	4ac7      	ldr	r2, [pc, #796]	; (163cc <processOnSMS+0x13d0>)
   160ae:	68fb      	ldr	r3, [r7, #12]
   160b0:	0011      	movs	r1, r2
   160b2:	0018      	movs	r0, r3
   160b4:	4bbe      	ldr	r3, [pc, #760]	; (163b0 <processOnSMS+0x13b4>)
   160b6:	4798      	blx	r3
   160b8:	1e03      	subs	r3, r0, #0
   160ba:	d042      	beq.n	16142 <processOnSMS+0x1146>
	{
		if(factory_settings_parameter_struct.ENABLE_CURRENT)
   160bc:	4bc4      	ldr	r3, [pc, #784]	; (163d0 <processOnSMS+0x13d4>)
   160be:	785b      	ldrb	r3, [r3, #1]
   160c0:	2b00      	cmp	r3, #0
   160c2:	d101      	bne.n	160c8 <processOnSMS+0x10cc>
   160c4:	f001 f850 	bl	17168 <processOnSMS+0x216c>
		{
			sprintf(resep_msg,"C:%u.%u\nN:%u\nO:%u\nU:%u\nOP:%u\nUP:%u",
			Analog_Parameter_Struct.Motor_Current_IntPart,
   160c8:	4bc2      	ldr	r3, [pc, #776]	; (163d4 <processOnSMS+0x13d8>)
   160ca:	8a9b      	ldrh	r3, [r3, #20]
   160cc:	b29b      	uxth	r3, r3
			sprintf(resep_msg,"C:%u.%u\nN:%u\nO:%u\nU:%u\nOP:%u\nUP:%u",
   160ce:	607b      	str	r3, [r7, #4]
			Analog_Parameter_Struct.Motor_Current_DecPart,
   160d0:	4bc0      	ldr	r3, [pc, #768]	; (163d4 <processOnSMS+0x13d8>)
   160d2:	8adb      	ldrh	r3, [r3, #22]
   160d4:	b29b      	uxth	r3, r3
			sprintf(resep_msg,"C:%u.%u\nN:%u\nO:%u\nU:%u\nOP:%u\nUP:%u",
   160d6:	603b      	str	r3, [r7, #0]
   160d8:	4bbf      	ldr	r3, [pc, #764]	; (163d8 <processOnSMS+0x13dc>)
   160da:	691a      	ldr	r2, [r3, #16]
   160dc:	4bbe      	ldr	r3, [pc, #760]	; (163d8 <processOnSMS+0x13dc>)
   160de:	6959      	ldr	r1, [r3, #20]
   160e0:	4bbd      	ldr	r3, [pc, #756]	; (163d8 <processOnSMS+0x13dc>)
   160e2:	699b      	ldr	r3, [r3, #24]
   160e4:	4698      	mov	r8, r3
			user_settings_parameter_struct.normalLoadAddress,
			user_settings_parameter_struct.overloadAddress,
			user_settings_parameter_struct.underloadAddress,
			user_settings_parameter_struct.overloadPerAddress,
   160e6:	48bc      	ldr	r0, [pc, #752]	; (163d8 <processOnSMS+0x13dc>)
   160e8:	7f40      	ldrb	r0, [r0, #29]
   160ea:	b2c0      	uxtb	r0, r0
			sprintf(resep_msg,"C:%u.%u\nN:%u\nO:%u\nU:%u\nOP:%u\nUP:%u",
   160ec:	0005      	movs	r5, r0
			user_settings_parameter_struct.underloadPerAddress);
   160ee:	48ba      	ldr	r0, [pc, #744]	; (163d8 <processOnSMS+0x13dc>)
   160f0:	7f00      	ldrb	r0, [r0, #28]
   160f2:	b2c0      	uxtb	r0, r0
			sprintf(resep_msg,"C:%u.%u\nN:%u\nO:%u\nU:%u\nOP:%u\nUP:%u",
   160f4:	0006      	movs	r6, r0
   160f6:	4cb9      	ldr	r4, [pc, #740]	; (163dc <processOnSMS+0x13e0>)
   160f8:	200c      	movs	r0, #12
   160fa:	2308      	movs	r3, #8
   160fc:	469c      	mov	ip, r3
   160fe:	44bc      	add	ip, r7
   16100:	4460      	add	r0, ip
   16102:	9604      	str	r6, [sp, #16]
   16104:	9503      	str	r5, [sp, #12]
   16106:	4643      	mov	r3, r8
   16108:	9302      	str	r3, [sp, #8]
   1610a:	9101      	str	r1, [sp, #4]
   1610c:	9200      	str	r2, [sp, #0]
   1610e:	683b      	ldr	r3, [r7, #0]
   16110:	687a      	ldr	r2, [r7, #4]
   16112:	0021      	movs	r1, r4
   16114:	4cb2      	ldr	r4, [pc, #712]	; (163e0 <processOnSMS+0x13e4>)
   16116:	47a0      	blx	r4
			response_sms_processed_cmd = true;
   16118:	4baa      	ldr	r3, [pc, #680]	; (163c4 <processOnSMS+0x13c8>)
   1611a:	2294      	movs	r2, #148	; 0x94
   1611c:	0052      	lsls	r2, r2, #1
   1611e:	4694      	mov	ip, r2
   16120:	2208      	movs	r2, #8
   16122:	4690      	mov	r8, r2
   16124:	44b8      	add	r8, r7
   16126:	44c4      	add	ip, r8
   16128:	4463      	add	r3, ip
   1612a:	2201      	movs	r2, #1
   1612c:	701a      	strb	r2, [r3, #0]
			incomingSMSProcessed=true;
   1612e:	2328      	movs	r3, #40	; 0x28
   16130:	33ff      	adds	r3, #255	; 0xff
   16132:	2208      	movs	r2, #8
   16134:	4694      	mov	ip, r2
   16136:	44bc      	add	ip, r7
   16138:	4463      	add	r3, ip
   1613a:	2201      	movs	r2, #1
   1613c:	701a      	strb	r2, [r3, #0]
   1613e:	f001 f813 	bl	17168 <processOnSMS+0x216c>
		}

	}
	else if (StringstartsWith(received_command,"OVFON"))
   16142:	4aa8      	ldr	r2, [pc, #672]	; (163e4 <processOnSMS+0x13e8>)
   16144:	68fb      	ldr	r3, [r7, #12]
   16146:	0011      	movs	r1, r2
   16148:	0018      	movs	r0, r3
   1614a:	4b99      	ldr	r3, [pc, #612]	; (163b0 <processOnSMS+0x13b4>)
   1614c:	4798      	blx	r3
   1614e:	1e03      	subs	r3, r0, #0
   16150:	d032      	beq.n	161b8 <processOnSMS+0x11bc>
	{
		if (factory_settings_parameter_struct.ENABLE_WATER && !(factory_settings_parameter_struct.ENABLE_M2M))
   16152:	4b9f      	ldr	r3, [pc, #636]	; (163d0 <processOnSMS+0x13d4>)
   16154:	795b      	ldrb	r3, [r3, #5]
   16156:	2b00      	cmp	r3, #0
   16158:	d101      	bne.n	1615e <processOnSMS+0x1162>
   1615a:	f001 f805 	bl	17168 <processOnSMS+0x216c>
   1615e:	4b9c      	ldr	r3, [pc, #624]	; (163d0 <processOnSMS+0x13d4>)
   16160:	78db      	ldrb	r3, [r3, #3]
   16162:	2b00      	cmp	r3, #0
   16164:	d001      	beq.n	1616a <processOnSMS+0x116e>
   16166:	f000 ffff 	bl	17168 <processOnSMS+0x216c>
		{
			savePreventOverFlowSettings(true);  //set DND to False in EEPROM
   1616a:	2001      	movs	r0, #1
   1616c:	4b9e      	ldr	r3, [pc, #632]	; (163e8 <processOnSMS+0x13ec>)
   1616e:	4798      	blx	r3
			
			incomingSMSProcessed=true;
   16170:	2328      	movs	r3, #40	; 0x28
   16172:	33ff      	adds	r3, #255	; 0xff
   16174:	2208      	movs	r2, #8
   16176:	4694      	mov	ip, r2
   16178:	44bc      	add	ip, r7
   1617a:	4463      	add	r3, ip
   1617c:	2201      	movs	r2, #1
   1617e:	701a      	strb	r2, [r3, #0]
			
			if(response_sms_processed_cmd == true)
   16180:	4b90      	ldr	r3, [pc, #576]	; (163c4 <processOnSMS+0x13c8>)
   16182:	2294      	movs	r2, #148	; 0x94
   16184:	0052      	lsls	r2, r2, #1
   16186:	4694      	mov	ip, r2
   16188:	2208      	movs	r2, #8
   1618a:	4690      	mov	r8, r2
   1618c:	44b8      	add	r8, r7
   1618e:	44c4      	add	ip, r8
   16190:	4463      	add	r3, ip
   16192:	781b      	ldrb	r3, [r3, #0]
   16194:	2b00      	cmp	r3, #0
   16196:	d101      	bne.n	1619c <processOnSMS+0x11a0>
   16198:	f000 ffe6 	bl	17168 <processOnSMS+0x216c>
			{
				strcpy(resep_msg,"PREVENT OVERFLOW SETTING ON");
   1619c:	230c      	movs	r3, #12
   1619e:	2208      	movs	r2, #8
   161a0:	4694      	mov	ip, r2
   161a2:	44bc      	add	ip, r7
   161a4:	4463      	add	r3, ip
   161a6:	4a91      	ldr	r2, [pc, #580]	; (163ec <processOnSMS+0x13f0>)
   161a8:	ca13      	ldmia	r2!, {r0, r1, r4}
   161aa:	c313      	stmia	r3!, {r0, r1, r4}
   161ac:	ca13      	ldmia	r2!, {r0, r1, r4}
   161ae:	c313      	stmia	r3!, {r0, r1, r4}
   161b0:	6812      	ldr	r2, [r2, #0]
   161b2:	601a      	str	r2, [r3, #0]
   161b4:	f000 ffd8 	bl	17168 <processOnSMS+0x216c>
			}
		}
	}
	else if (StringstartsWith(received_command,"OVFOFF"))
   161b8:	4a8d      	ldr	r2, [pc, #564]	; (163f0 <processOnSMS+0x13f4>)
   161ba:	68fb      	ldr	r3, [r7, #12]
   161bc:	0011      	movs	r1, r2
   161be:	0018      	movs	r0, r3
   161c0:	4b7b      	ldr	r3, [pc, #492]	; (163b0 <processOnSMS+0x13b4>)
   161c2:	4798      	blx	r3
   161c4:	1e03      	subs	r3, r0, #0
   161c6:	d034      	beq.n	16232 <processOnSMS+0x1236>
	{
		if (factory_settings_parameter_struct.ENABLE_WATER && !(factory_settings_parameter_struct.ENABLE_M2M))
   161c8:	4b81      	ldr	r3, [pc, #516]	; (163d0 <processOnSMS+0x13d4>)
   161ca:	795b      	ldrb	r3, [r3, #5]
   161cc:	2b00      	cmp	r3, #0
   161ce:	d101      	bne.n	161d4 <processOnSMS+0x11d8>
   161d0:	f000 ffca 	bl	17168 <processOnSMS+0x216c>
   161d4:	4b7e      	ldr	r3, [pc, #504]	; (163d0 <processOnSMS+0x13d4>)
   161d6:	78db      	ldrb	r3, [r3, #3]
   161d8:	2b00      	cmp	r3, #0
   161da:	d001      	beq.n	161e0 <processOnSMS+0x11e4>
   161dc:	f000 ffc4 	bl	17168 <processOnSMS+0x216c>
		{
			savePreventOverFlowSettings(false);  //set DND to False in EEPROM
   161e0:	2000      	movs	r0, #0
   161e2:	4b81      	ldr	r3, [pc, #516]	; (163e8 <processOnSMS+0x13ec>)
   161e4:	4798      	blx	r3

			incomingSMSProcessed=true;
   161e6:	2328      	movs	r3, #40	; 0x28
   161e8:	33ff      	adds	r3, #255	; 0xff
   161ea:	2208      	movs	r2, #8
   161ec:	4694      	mov	ip, r2
   161ee:	44bc      	add	ip, r7
   161f0:	4463      	add	r3, ip
   161f2:	2201      	movs	r2, #1
   161f4:	701a      	strb	r2, [r3, #0]

			if(response_sms_processed_cmd == true)
   161f6:	4b73      	ldr	r3, [pc, #460]	; (163c4 <processOnSMS+0x13c8>)
   161f8:	2294      	movs	r2, #148	; 0x94
   161fa:	0052      	lsls	r2, r2, #1
   161fc:	4694      	mov	ip, r2
   161fe:	2208      	movs	r2, #8
   16200:	4690      	mov	r8, r2
   16202:	44b8      	add	r8, r7
   16204:	44c4      	add	ip, r8
   16206:	4463      	add	r3, ip
   16208:	781b      	ldrb	r3, [r3, #0]
   1620a:	2b00      	cmp	r3, #0
   1620c:	d101      	bne.n	16212 <processOnSMS+0x1216>
   1620e:	f000 ffab 	bl	17168 <processOnSMS+0x216c>
			{
				strcpy(resep_msg,"PREVENT OVERFLOW SETTING OFF");
   16212:	230c      	movs	r3, #12
   16214:	2208      	movs	r2, #8
   16216:	4694      	mov	ip, r2
   16218:	44bc      	add	ip, r7
   1621a:	4463      	add	r3, ip
   1621c:	4a75      	ldr	r2, [pc, #468]	; (163f4 <processOnSMS+0x13f8>)
   1621e:	ca13      	ldmia	r2!, {r0, r1, r4}
   16220:	c313      	stmia	r3!, {r0, r1, r4}
   16222:	ca13      	ldmia	r2!, {r0, r1, r4}
   16224:	c313      	stmia	r3!, {r0, r1, r4}
   16226:	6811      	ldr	r1, [r2, #0]
   16228:	6019      	str	r1, [r3, #0]
   1622a:	7912      	ldrb	r2, [r2, #4]
   1622c:	711a      	strb	r2, [r3, #4]
   1622e:	f000 ff9b 	bl	17168 <processOnSMS+0x216c>
			}
		}
	}
	else if (StringstartsWith(received_command,"M2MON"))
   16232:	4a71      	ldr	r2, [pc, #452]	; (163f8 <processOnSMS+0x13fc>)
   16234:	68fb      	ldr	r3, [r7, #12]
   16236:	0011      	movs	r1, r2
   16238:	0018      	movs	r0, r3
   1623a:	4b5d      	ldr	r3, [pc, #372]	; (163b0 <processOnSMS+0x13b4>)
   1623c:	4798      	blx	r3
   1623e:	1e03      	subs	r3, r0, #0
   16240:	d05c      	beq.n	162fc <processOnSMS+0x1300>
	{
		if (factory_settings_parameter_struct.ENABLE_M2M)
   16242:	4b63      	ldr	r3, [pc, #396]	; (163d0 <processOnSMS+0x13d4>)
   16244:	78db      	ldrb	r3, [r3, #3]
   16246:	2b00      	cmp	r3, #0
   16248:	d101      	bne.n	1624e <processOnSMS+0x1252>
   1624a:	f000 ff8d 	bl	17168 <processOnSMS+0x216c>
		{
			incomingSMSProcessed=true;
   1624e:	2328      	movs	r3, #40	; 0x28
   16250:	33ff      	adds	r3, #255	; 0xff
   16252:	2208      	movs	r2, #8
   16254:	4694      	mov	ip, r2
   16256:	44bc      	add	ip, r7
   16258:	4463      	add	r3, ip
   1625a:	2201      	movs	r2, #1
   1625c:	701a      	strb	r2, [r3, #0]
			
			if(m2m_Numbers_struct.m2mRemotePresent)
   1625e:	4b67      	ldr	r3, [pc, #412]	; (163fc <processOnSMS+0x1400>)
   16260:	78db      	ldrb	r3, [r3, #3]
   16262:	2b00      	cmp	r3, #0
   16264:	d02f      	beq.n	162c6 <processOnSMS+0x12ca>
			{
				if(!m2m_Numbers_struct.m2mRemoteVerified)
   16266:	4b65      	ldr	r3, [pc, #404]	; (163fc <processOnSMS+0x1400>)
   16268:	791b      	ldrb	r3, [r3, #4]
   1626a:	2b00      	cmp	r3, #0
   1626c:	d10e      	bne.n	1628c <processOnSMS+0x1290>
				{
					response_sms_processed_cmd = false;
   1626e:	4b55      	ldr	r3, [pc, #340]	; (163c4 <processOnSMS+0x13c8>)
   16270:	2294      	movs	r2, #148	; 0x94
   16272:	0052      	lsls	r2, r2, #1
   16274:	4694      	mov	ip, r2
   16276:	2208      	movs	r2, #8
   16278:	4690      	mov	r8, r2
   1627a:	44b8      	add	r8, r7
   1627c:	44c4      	add	ip, r8
   1627e:	4463      	add	r3, ip
   16280:	2200      	movs	r2, #0
   16282:	701a      	strb	r2, [r3, #0]
					verifyRemoteNumber();
   16284:	4b5e      	ldr	r3, [pc, #376]	; (16400 <processOnSMS+0x1404>)
   16286:	4798      	blx	r3
   16288:	f000 ff6e 	bl	17168 <processOnSMS+0x216c>
				}
				else
				{
					response_sms_processed_cmd = true;
   1628c:	4b4d      	ldr	r3, [pc, #308]	; (163c4 <processOnSMS+0x13c8>)
   1628e:	2294      	movs	r2, #148	; 0x94
   16290:	0052      	lsls	r2, r2, #1
   16292:	4694      	mov	ip, r2
   16294:	2208      	movs	r2, #8
   16296:	4690      	mov	r8, r2
   16298:	44b8      	add	r8, r7
   1629a:	44c4      	add	ip, r8
   1629c:	4463      	add	r3, ip
   1629e:	2201      	movs	r2, #1
   162a0:	701a      	strb	r2, [r3, #0]
					strcpy(resep_msg,"M2M Turned On, Remote Number Already Verified");
   162a2:	230c      	movs	r3, #12
   162a4:	2208      	movs	r2, #8
   162a6:	4694      	mov	ip, r2
   162a8:	44bc      	add	ip, r7
   162aa:	4463      	add	r3, ip
   162ac:	4a55      	ldr	r2, [pc, #340]	; (16404 <processOnSMS+0x1408>)
   162ae:	ca13      	ldmia	r2!, {r0, r1, r4}
   162b0:	c313      	stmia	r3!, {r0, r1, r4}
   162b2:	ca13      	ldmia	r2!, {r0, r1, r4}
   162b4:	c313      	stmia	r3!, {r0, r1, r4}
   162b6:	ca13      	ldmia	r2!, {r0, r1, r4}
   162b8:	c313      	stmia	r3!, {r0, r1, r4}
   162ba:	ca03      	ldmia	r2!, {r0, r1}
   162bc:	c303      	stmia	r3!, {r0, r1}
   162be:	8812      	ldrh	r2, [r2, #0]
   162c0:	801a      	strh	r2, [r3, #0]
   162c2:	f000 ff51 	bl	17168 <processOnSMS+0x216c>
				}
			}
			else
			{
				response_sms_processed_cmd=true;
   162c6:	4b3f      	ldr	r3, [pc, #252]	; (163c4 <processOnSMS+0x13c8>)
   162c8:	2294      	movs	r2, #148	; 0x94
   162ca:	0052      	lsls	r2, r2, #1
   162cc:	4694      	mov	ip, r2
   162ce:	2208      	movs	r2, #8
   162d0:	4690      	mov	r8, r2
   162d2:	44b8      	add	r8, r7
   162d4:	44c4      	add	ip, r8
   162d6:	4463      	add	r3, ip
   162d8:	2201      	movs	r2, #1
   162da:	701a      	strb	r2, [r3, #0]
				strcpy(resep_msg,"Error: M2M Remote Number Not Present");
   162dc:	230c      	movs	r3, #12
   162de:	2208      	movs	r2, #8
   162e0:	4694      	mov	ip, r2
   162e2:	44bc      	add	ip, r7
   162e4:	4463      	add	r3, ip
   162e6:	4a48      	ldr	r2, [pc, #288]	; (16408 <processOnSMS+0x140c>)
   162e8:	ca13      	ldmia	r2!, {r0, r1, r4}
   162ea:	c313      	stmia	r3!, {r0, r1, r4}
   162ec:	ca13      	ldmia	r2!, {r0, r1, r4}
   162ee:	c313      	stmia	r3!, {r0, r1, r4}
   162f0:	ca13      	ldmia	r2!, {r0, r1, r4}
   162f2:	c313      	stmia	r3!, {r0, r1, r4}
   162f4:	7812      	ldrb	r2, [r2, #0]
   162f6:	701a      	strb	r2, [r3, #0]
   162f8:	f000 ff36 	bl	17168 <processOnSMS+0x216c>
			}
		}
	}
	else if (StringstartsWith(received_command,"M2MOFF"))
   162fc:	4a43      	ldr	r2, [pc, #268]	; (1640c <processOnSMS+0x1410>)
   162fe:	68fb      	ldr	r3, [r7, #12]
   16300:	0011      	movs	r1, r2
   16302:	0018      	movs	r0, r3
   16304:	4b2a      	ldr	r3, [pc, #168]	; (163b0 <processOnSMS+0x13b4>)
   16306:	4798      	blx	r3
   16308:	1e03      	subs	r3, r0, #0
   1630a:	d02a      	beq.n	16362 <processOnSMS+0x1366>
	{
		if (factory_settings_parameter_struct.ENABLE_M2M)
   1630c:	4b30      	ldr	r3, [pc, #192]	; (163d0 <processOnSMS+0x13d4>)
   1630e:	78db      	ldrb	r3, [r3, #3]
   16310:	2b00      	cmp	r3, #0
   16312:	d101      	bne.n	16318 <processOnSMS+0x131c>
   16314:	f000 ff28 	bl	17168 <processOnSMS+0x216c>
		{
			incomingSMSProcessed=true;
   16318:	2328      	movs	r3, #40	; 0x28
   1631a:	33ff      	adds	r3, #255	; 0xff
   1631c:	2208      	movs	r2, #8
   1631e:	4694      	mov	ip, r2
   16320:	44bc      	add	ip, r7
   16322:	4463      	add	r3, ip
   16324:	2201      	movs	r2, #1
   16326:	701a      	strb	r2, [r3, #0]
			
			saveM2MSettings(false);
   16328:	2000      	movs	r0, #0
   1632a:	4b39      	ldr	r3, [pc, #228]	; (16410 <processOnSMS+0x1414>)
   1632c:	4798      	blx	r3
			if(response_sms_processed_cmd == true)
   1632e:	4b25      	ldr	r3, [pc, #148]	; (163c4 <processOnSMS+0x13c8>)
   16330:	2294      	movs	r2, #148	; 0x94
   16332:	0052      	lsls	r2, r2, #1
   16334:	4694      	mov	ip, r2
   16336:	2208      	movs	r2, #8
   16338:	4690      	mov	r8, r2
   1633a:	44b8      	add	r8, r7
   1633c:	44c4      	add	ip, r8
   1633e:	4463      	add	r3, ip
   16340:	781b      	ldrb	r3, [r3, #0]
   16342:	2b00      	cmp	r3, #0
   16344:	d101      	bne.n	1634a <processOnSMS+0x134e>
   16346:	f000 ff0f 	bl	17168 <processOnSMS+0x216c>
			{
				strcpy(resep_msg,"M2M SETTING OFF");
   1634a:	230c      	movs	r3, #12
   1634c:	2208      	movs	r2, #8
   1634e:	4694      	mov	ip, r2
   16350:	44bc      	add	ip, r7
   16352:	4463      	add	r3, ip
   16354:	4a2f      	ldr	r2, [pc, #188]	; (16414 <processOnSMS+0x1418>)
   16356:	ca13      	ldmia	r2!, {r0, r1, r4}
   16358:	c313      	stmia	r3!, {r0, r1, r4}
   1635a:	6812      	ldr	r2, [r2, #0]
   1635c:	601a      	str	r2, [r3, #0]
   1635e:	f000 ff03 	bl	17168 <processOnSMS+0x216c>
			}
		}
	}
	else if (StringstartsWith(received_command,"STATUS"))
   16362:	4a2d      	ldr	r2, [pc, #180]	; (16418 <processOnSMS+0x141c>)
   16364:	68fb      	ldr	r3, [r7, #12]
   16366:	0011      	movs	r1, r2
   16368:	0018      	movs	r0, r3
   1636a:	4b11      	ldr	r3, [pc, #68]	; (163b0 <processOnSMS+0x13b4>)
   1636c:	4798      	blx	r3
   1636e:	1e03      	subs	r3, r0, #0
   16370:	d056      	beq.n	16420 <processOnSMS+0x1424>
	{
		incomingSMSProcessed=true;
   16372:	2328      	movs	r3, #40	; 0x28
   16374:	33ff      	adds	r3, #255	; 0xff
   16376:	2208      	movs	r2, #8
   16378:	4694      	mov	ip, r2
   1637a:	44bc      	add	ip, r7
   1637c:	4463      	add	r3, ip
   1637e:	2201      	movs	r2, #1
   16380:	701a      	strb	r2, [r3, #0]
		response_sms_processed_cmd=true;
   16382:	4b10      	ldr	r3, [pc, #64]	; (163c4 <processOnSMS+0x13c8>)
   16384:	2294      	movs	r2, #148	; 0x94
   16386:	0052      	lsls	r2, r2, #1
   16388:	4694      	mov	ip, r2
   1638a:	2208      	movs	r2, #8
   1638c:	4690      	mov	r8, r2
   1638e:	44b8      	add	r8, r7
   16390:	44c4      	add	ip, r8
   16392:	4463      	add	r3, ip
   16394:	2201      	movs	r2, #1
   16396:	701a      	strb	r2, [r3, #0]
		
		buildStatusMessage(&resep_msg);
   16398:	230c      	movs	r3, #12
   1639a:	2208      	movs	r2, #8
   1639c:	4694      	mov	ip, r2
   1639e:	44bc      	add	ip, r7
   163a0:	4463      	add	r3, ip
   163a2:	0018      	movs	r0, r3
   163a4:	4b1d      	ldr	r3, [pc, #116]	; (1641c <processOnSMS+0x1420>)
   163a6:	4798      	blx	r3
   163a8:	f000 fede 	bl	17168 <processOnSMS+0x216c>
   163ac:	00029edc 	.word	0x00029edc
   163b0:	00014211 	.word	0x00014211
   163b4:	00028c73 	.word	0x00028c73
   163b8:	000289bf 	.word	0x000289bf
   163bc:	000288c9 	.word	0x000288c9
   163c0:	0001156d 	.word	0x0001156d
   163c4:	fffffeda 	.word	0xfffffeda
   163c8:	00029ee4 	.word	0x00029ee4
   163cc:	00029ef0 	.word	0x00029ef0
   163d0:	2000062c 	.word	0x2000062c
   163d4:	200006e8 	.word	0x200006e8
   163d8:	20000654 	.word	0x20000654
   163dc:	00029ef8 	.word	0x00029ef8
   163e0:	00028be9 	.word	0x00028be9
   163e4:	00029f1c 	.word	0x00029f1c
   163e8:	000114b5 	.word	0x000114b5
   163ec:	00029f24 	.word	0x00029f24
   163f0:	00029f40 	.word	0x00029f40
   163f4:	00029f48 	.word	0x00029f48
   163f8:	00029f68 	.word	0x00029f68
   163fc:	20000554 	.word	0x20000554
   16400:	00017455 	.word	0x00017455
   16404:	00029f70 	.word	0x00029f70
   16408:	00029fa0 	.word	0x00029fa0
   1640c:	00029fc8 	.word	0x00029fc8
   16410:	00010be5 	.word	0x00010be5
   16414:	00029fd0 	.word	0x00029fd0
   16418:	00029fe0 	.word	0x00029fe0
   1641c:	00017231 	.word	0x00017231
	}
	else if (StringstartsWith(received_command,"AMON") && (admin || alterNumber))
   16420:	4a87      	ldr	r2, [pc, #540]	; (16640 <processOnSMS+0x1644>)
   16422:	68fb      	ldr	r3, [r7, #12]
   16424:	0011      	movs	r1, r2
   16426:	0018      	movs	r0, r3
   16428:	4b86      	ldr	r3, [pc, #536]	; (16644 <processOnSMS+0x1648>)
   1642a:	4798      	blx	r3
   1642c:	1e03      	subs	r3, r0, #0
   1642e:	d05e      	beq.n	164ee <processOnSMS+0x14f2>
   16430:	4b85      	ldr	r3, [pc, #532]	; (16648 <processOnSMS+0x164c>)
   16432:	2294      	movs	r2, #148	; 0x94
   16434:	0052      	lsls	r2, r2, #1
   16436:	4694      	mov	ip, r2
   16438:	2208      	movs	r2, #8
   1643a:	4690      	mov	r8, r2
   1643c:	44b8      	add	r8, r7
   1643e:	44c4      	add	ip, r8
   16440:	4463      	add	r3, ip
   16442:	781b      	ldrb	r3, [r3, #0]
   16444:	2b00      	cmp	r3, #0
   16446:	d10b      	bne.n	16460 <processOnSMS+0x1464>
   16448:	4b80      	ldr	r3, [pc, #512]	; (1664c <processOnSMS+0x1650>)
   1644a:	2294      	movs	r2, #148	; 0x94
   1644c:	0052      	lsls	r2, r2, #1
   1644e:	4694      	mov	ip, r2
   16450:	2208      	movs	r2, #8
   16452:	4690      	mov	r8, r2
   16454:	44b8      	add	r8, r7
   16456:	44c4      	add	ip, r8
   16458:	4463      	add	r3, ip
   1645a:	781b      	ldrb	r3, [r3, #0]
   1645c:	2b00      	cmp	r3, #0
   1645e:	d046      	beq.n	164ee <processOnSMS+0x14f2>
	{
		incomingSMSProcessed=true;
   16460:	2328      	movs	r3, #40	; 0x28
   16462:	33ff      	adds	r3, #255	; 0xff
   16464:	2208      	movs	r2, #8
   16466:	4694      	mov	ip, r2
   16468:	44bc      	add	ip, r7
   1646a:	4463      	add	r3, ip
   1646c:	2201      	movs	r2, #1
   1646e:	701a      	strb	r2, [r3, #0]
		
		if (alternateNumber_struct.alterNumberPresent)
   16470:	4b77      	ldr	r3, [pc, #476]	; (16650 <processOnSMS+0x1654>)
   16472:	789b      	ldrb	r3, [r3, #2]
   16474:	2b00      	cmp	r3, #0
   16476:	d01c      	beq.n	164b2 <processOnSMS+0x14b6>
		{
			saveAlterNumberSetting(true);
   16478:	2001      	movs	r0, #1
   1647a:	4b76      	ldr	r3, [pc, #472]	; (16654 <processOnSMS+0x1658>)
   1647c:	4798      	blx	r3
			if(response_sms_processed_cmd == true)
   1647e:	4b76      	ldr	r3, [pc, #472]	; (16658 <processOnSMS+0x165c>)
   16480:	2294      	movs	r2, #148	; 0x94
   16482:	0052      	lsls	r2, r2, #1
   16484:	4694      	mov	ip, r2
   16486:	2208      	movs	r2, #8
   16488:	4690      	mov	r8, r2
   1648a:	44b8      	add	r8, r7
   1648c:	44c4      	add	ip, r8
   1648e:	4463      	add	r3, ip
   16490:	781b      	ldrb	r3, [r3, #0]
   16492:	2b00      	cmp	r3, #0
   16494:	d101      	bne.n	1649a <processOnSMS+0x149e>
   16496:	f000 fe66 	bl	17166 <processOnSMS+0x216a>
			{
				strcpy(resep_msg,"ALTERNATE NUMBER ON");
   1649a:	230c      	movs	r3, #12
   1649c:	2208      	movs	r2, #8
   1649e:	4694      	mov	ip, r2
   164a0:	44bc      	add	ip, r7
   164a2:	4463      	add	r3, ip
   164a4:	4a6d      	ldr	r2, [pc, #436]	; (1665c <processOnSMS+0x1660>)
   164a6:	ca13      	ldmia	r2!, {r0, r1, r4}
   164a8:	c313      	stmia	r3!, {r0, r1, r4}
   164aa:	ca03      	ldmia	r2!, {r0, r1}
   164ac:	c303      	stmia	r3!, {r0, r1}
		if (alternateNumber_struct.alterNumberPresent)
   164ae:	f000 fe5a 	bl	17166 <processOnSMS+0x216a>
			}
		}
		else
		{
			if(response_sms_processed_cmd == true)
   164b2:	4b69      	ldr	r3, [pc, #420]	; (16658 <processOnSMS+0x165c>)
   164b4:	2294      	movs	r2, #148	; 0x94
   164b6:	0052      	lsls	r2, r2, #1
   164b8:	4694      	mov	ip, r2
   164ba:	2208      	movs	r2, #8
   164bc:	4690      	mov	r8, r2
   164be:	44b8      	add	r8, r7
   164c0:	44c4      	add	ip, r8
   164c2:	4463      	add	r3, ip
   164c4:	781b      	ldrb	r3, [r3, #0]
   164c6:	2b00      	cmp	r3, #0
   164c8:	d101      	bne.n	164ce <processOnSMS+0x14d2>
   164ca:	f000 fe4c 	bl	17166 <processOnSMS+0x216a>
			{
				strcpy(resep_msg,"ALTERNATE NUMBER NOT PRESENT");
   164ce:	230c      	movs	r3, #12
   164d0:	2208      	movs	r2, #8
   164d2:	4694      	mov	ip, r2
   164d4:	44bc      	add	ip, r7
   164d6:	4463      	add	r3, ip
   164d8:	4a61      	ldr	r2, [pc, #388]	; (16660 <processOnSMS+0x1664>)
   164da:	ca13      	ldmia	r2!, {r0, r1, r4}
   164dc:	c313      	stmia	r3!, {r0, r1, r4}
   164de:	ca13      	ldmia	r2!, {r0, r1, r4}
   164e0:	c313      	stmia	r3!, {r0, r1, r4}
   164e2:	6811      	ldr	r1, [r2, #0]
   164e4:	6019      	str	r1, [r3, #0]
   164e6:	7912      	ldrb	r2, [r2, #4]
   164e8:	711a      	strb	r2, [r3, #4]
		if (alternateNumber_struct.alterNumberPresent)
   164ea:	f000 fe3c 	bl	17166 <processOnSMS+0x216a>
			}
		}
	}
	else if (StringstartsWith(received_command,"AMOFF"))
   164ee:	4a5d      	ldr	r2, [pc, #372]	; (16664 <processOnSMS+0x1668>)
   164f0:	68fb      	ldr	r3, [r7, #12]
   164f2:	0011      	movs	r1, r2
   164f4:	0018      	movs	r0, r3
   164f6:	4b53      	ldr	r3, [pc, #332]	; (16644 <processOnSMS+0x1648>)
   164f8:	4798      	blx	r3
   164fa:	1e03      	subs	r3, r0, #0
   164fc:	d026      	beq.n	1654c <processOnSMS+0x1550>
	{
		saveAlterNumberSetting(false);
   164fe:	2000      	movs	r0, #0
   16500:	4b54      	ldr	r3, [pc, #336]	; (16654 <processOnSMS+0x1658>)
   16502:	4798      	blx	r3
		incomingSMSProcessed=true;
   16504:	2328      	movs	r3, #40	; 0x28
   16506:	33ff      	adds	r3, #255	; 0xff
   16508:	2208      	movs	r2, #8
   1650a:	4694      	mov	ip, r2
   1650c:	44bc      	add	ip, r7
   1650e:	4463      	add	r3, ip
   16510:	2201      	movs	r2, #1
   16512:	701a      	strb	r2, [r3, #0]
		
		if (response_sms_processed_cmd == true)
   16514:	4b50      	ldr	r3, [pc, #320]	; (16658 <processOnSMS+0x165c>)
   16516:	2294      	movs	r2, #148	; 0x94
   16518:	0052      	lsls	r2, r2, #1
   1651a:	4694      	mov	ip, r2
   1651c:	2208      	movs	r2, #8
   1651e:	4690      	mov	r8, r2
   16520:	44b8      	add	r8, r7
   16522:	44c4      	add	ip, r8
   16524:	4463      	add	r3, ip
   16526:	781b      	ldrb	r3, [r3, #0]
   16528:	2b00      	cmp	r3, #0
   1652a:	d101      	bne.n	16530 <processOnSMS+0x1534>
   1652c:	f000 fe1c 	bl	17168 <processOnSMS+0x216c>
		{
			strcpy(resep_msg,"ALTERNATE MOBILE NUMBER OFF");
   16530:	230c      	movs	r3, #12
   16532:	2208      	movs	r2, #8
   16534:	4694      	mov	ip, r2
   16536:	44bc      	add	ip, r7
   16538:	4463      	add	r3, ip
   1653a:	4a4b      	ldr	r2, [pc, #300]	; (16668 <processOnSMS+0x166c>)
   1653c:	ca13      	ldmia	r2!, {r0, r1, r4}
   1653e:	c313      	stmia	r3!, {r0, r1, r4}
   16540:	ca13      	ldmia	r2!, {r0, r1, r4}
   16542:	c313      	stmia	r3!, {r0, r1, r4}
   16544:	6812      	ldr	r2, [r2, #0]
   16546:	601a      	str	r2, [r3, #0]
   16548:	f000 fe0e 	bl	17168 <processOnSMS+0x216c>
		}
	}
	else if (StringstartsWith(received_command,"NCOFF"))
   1654c:	4a47      	ldr	r2, [pc, #284]	; (1666c <processOnSMS+0x1670>)
   1654e:	68fb      	ldr	r3, [r7, #12]
   16550:	0011      	movs	r1, r2
   16552:	0018      	movs	r0, r3
   16554:	4b3b      	ldr	r3, [pc, #236]	; (16644 <processOnSMS+0x1648>)
   16556:	4798      	blx	r3
   16558:	1e03      	subs	r3, r0, #0
   1655a:	d029      	beq.n	165b0 <processOnSMS+0x15b4>
	{
		saveNoCallSettings(false,0,0,0,0);
   1655c:	2300      	movs	r3, #0
   1655e:	9300      	str	r3, [sp, #0]
   16560:	2300      	movs	r3, #0
   16562:	2200      	movs	r2, #0
   16564:	2100      	movs	r1, #0
   16566:	2000      	movs	r0, #0
   16568:	4c41      	ldr	r4, [pc, #260]	; (16670 <processOnSMS+0x1674>)
   1656a:	47a0      	blx	r4
		incomingSMSProcessed=true;
   1656c:	2328      	movs	r3, #40	; 0x28
   1656e:	33ff      	adds	r3, #255	; 0xff
   16570:	2208      	movs	r2, #8
   16572:	4694      	mov	ip, r2
   16574:	44bc      	add	ip, r7
   16576:	4463      	add	r3, ip
   16578:	2201      	movs	r2, #1
   1657a:	701a      	strb	r2, [r3, #0]

		if (response_sms_processed_cmd == true)
   1657c:	4b36      	ldr	r3, [pc, #216]	; (16658 <processOnSMS+0x165c>)
   1657e:	2294      	movs	r2, #148	; 0x94
   16580:	0052      	lsls	r2, r2, #1
   16582:	4694      	mov	ip, r2
   16584:	2208      	movs	r2, #8
   16586:	4690      	mov	r8, r2
   16588:	44b8      	add	r8, r7
   1658a:	44c4      	add	ip, r8
   1658c:	4463      	add	r3, ip
   1658e:	781b      	ldrb	r3, [r3, #0]
   16590:	2b00      	cmp	r3, #0
   16592:	d101      	bne.n	16598 <processOnSMS+0x159c>
   16594:	f000 fde8 	bl	17168 <processOnSMS+0x216c>
		{
			strcpy(resep_msg,"NO CALL SETTING OFF");
   16598:	230c      	movs	r3, #12
   1659a:	2208      	movs	r2, #8
   1659c:	4694      	mov	ip, r2
   1659e:	44bc      	add	ip, r7
   165a0:	4463      	add	r3, ip
   165a2:	4a34      	ldr	r2, [pc, #208]	; (16674 <processOnSMS+0x1678>)
   165a4:	ca13      	ldmia	r2!, {r0, r1, r4}
   165a6:	c313      	stmia	r3!, {r0, r1, r4}
   165a8:	ca03      	ldmia	r2!, {r0, r1}
   165aa:	c303      	stmia	r3!, {r0, r1}
   165ac:	f000 fddc 	bl	17168 <processOnSMS+0x216c>
		}
	}
	else if (StringstartsWith(received_command,"GETTIME"))
   165b0:	4a31      	ldr	r2, [pc, #196]	; (16678 <processOnSMS+0x167c>)
   165b2:	68fb      	ldr	r3, [r7, #12]
   165b4:	0011      	movs	r1, r2
   165b6:	0018      	movs	r0, r3
   165b8:	4b22      	ldr	r3, [pc, #136]	; (16644 <processOnSMS+0x1648>)
   165ba:	4798      	blx	r3
   165bc:	1e03      	subs	r3, r0, #0
   165be:	d067      	beq.n	16690 <processOnSMS+0x1694>
	{
		uint8_t globalHours,globalMinutes;
		getSystemTime(&globalHours,&globalMinutes);
   165c0:	230a      	movs	r3, #10
   165c2:	2208      	movs	r2, #8
   165c4:	18ba      	adds	r2, r7, r2
   165c6:	18d2      	adds	r2, r2, r3
   165c8:	230b      	movs	r3, #11
   165ca:	2108      	movs	r1, #8
   165cc:	468c      	mov	ip, r1
   165ce:	44bc      	add	ip, r7
   165d0:	4463      	add	r3, ip
   165d2:	0011      	movs	r1, r2
   165d4:	0018      	movs	r0, r3
   165d6:	4b29      	ldr	r3, [pc, #164]	; (1667c <processOnSMS+0x1680>)
   165d8:	4798      	blx	r3
		
		sprintf(resep_msg,"TIME : %u:%u",
   165da:	4b29      	ldr	r3, [pc, #164]	; (16680 <processOnSMS+0x1684>)
   165dc:	2294      	movs	r2, #148	; 0x94
   165de:	0052      	lsls	r2, r2, #1
   165e0:	4694      	mov	ip, r2
   165e2:	2208      	movs	r2, #8
   165e4:	4690      	mov	r8, r2
   165e6:	44b8      	add	r8, r7
   165e8:	44c4      	add	ip, r8
   165ea:	4463      	add	r3, ip
   165ec:	781b      	ldrb	r3, [r3, #0]
   165ee:	001a      	movs	r2, r3
   165f0:	4b24      	ldr	r3, [pc, #144]	; (16684 <processOnSMS+0x1688>)
   165f2:	2194      	movs	r1, #148	; 0x94
   165f4:	0049      	lsls	r1, r1, #1
   165f6:	468c      	mov	ip, r1
   165f8:	2108      	movs	r1, #8
   165fa:	4688      	mov	r8, r1
   165fc:	44b8      	add	r8, r7
   165fe:	44c4      	add	ip, r8
   16600:	4463      	add	r3, ip
   16602:	781b      	ldrb	r3, [r3, #0]
   16604:	4920      	ldr	r1, [pc, #128]	; (16688 <processOnSMS+0x168c>)
   16606:	200c      	movs	r0, #12
   16608:	2408      	movs	r4, #8
   1660a:	46a4      	mov	ip, r4
   1660c:	44bc      	add	ip, r7
   1660e:	4460      	add	r0, ip
   16610:	4c1e      	ldr	r4, [pc, #120]	; (1668c <processOnSMS+0x1690>)
   16612:	47a0      	blx	r4
		globalHours,globalMinutes);

		incomingSMSProcessed=true;
   16614:	2328      	movs	r3, #40	; 0x28
   16616:	33ff      	adds	r3, #255	; 0xff
   16618:	2208      	movs	r2, #8
   1661a:	4694      	mov	ip, r2
   1661c:	44bc      	add	ip, r7
   1661e:	4463      	add	r3, ip
   16620:	2201      	movs	r2, #1
   16622:	701a      	strb	r2, [r3, #0]

		response_sms_processed_cmd = true;
   16624:	4b0c      	ldr	r3, [pc, #48]	; (16658 <processOnSMS+0x165c>)
   16626:	2294      	movs	r2, #148	; 0x94
   16628:	0052      	lsls	r2, r2, #1
   1662a:	4694      	mov	ip, r2
   1662c:	2208      	movs	r2, #8
   1662e:	4690      	mov	r8, r2
   16630:	44b8      	add	r8, r7
   16632:	44c4      	add	ip, r8
   16634:	4463      	add	r3, ip
   16636:	2201      	movs	r2, #1
   16638:	701a      	strb	r2, [r3, #0]
   1663a:	f000 fd95 	bl	17168 <processOnSMS+0x216c>
   1663e:	46c0      	nop			; (mov r8, r8)
   16640:	00029c50 	.word	0x00029c50
   16644:	00014211 	.word	0x00014211
   16648:	fffffedb 	.word	0xfffffedb
   1664c:	fffffed9 	.word	0xfffffed9
   16650:	2000063c 	.word	0x2000063c
   16654:	000111e9 	.word	0x000111e9
   16658:	fffffeda 	.word	0xfffffeda
   1665c:	00029fe8 	.word	0x00029fe8
   16660:	00029ffc 	.word	0x00029ffc
   16664:	0002a01c 	.word	0x0002a01c
   16668:	0002a024 	.word	0x0002a024
   1666c:	0002a040 	.word	0x0002a040
   16670:	000113d9 	.word	0x000113d9
   16674:	0002a048 	.word	0x0002a048
   16678:	0002a05c 	.word	0x0002a05c
   1667c:	0001768d 	.word	0x0001768d
   16680:	fffffee3 	.word	0xfffffee3
   16684:	fffffee2 	.word	0xfffffee2
   16688:	0002a064 	.word	0x0002a064
   1668c:	00028be9 	.word	0x00028be9
	}
	else if (StringstartsWith(received_command,"SETTIME"))
   16690:	4ada      	ldr	r2, [pc, #872]	; (169fc <processOnSMS+0x1a00>)
   16692:	68fb      	ldr	r3, [r7, #12]
   16694:	0011      	movs	r1, r2
   16696:	0018      	movs	r0, r3
   16698:	4bd9      	ldr	r3, [pc, #868]	; (16a00 <processOnSMS+0x1a04>)
   1669a:	4798      	blx	r3
   1669c:	1e03      	subs	r3, r0, #0
   1669e:	d001      	beq.n	166a4 <processOnSMS+0x16a8>
   166a0:	f000 fd62 	bl	17168 <processOnSMS+0x216c>
		//todo: implement
		//set internal RTC of Either MCU or SIM800 to check no call time
		

	}
	else if (StringstartsWith(received_command,"NCTIME"))
   166a4:	4ad7      	ldr	r2, [pc, #860]	; (16a04 <processOnSMS+0x1a08>)
   166a6:	68fb      	ldr	r3, [r7, #12]
   166a8:	0011      	movs	r1, r2
   166aa:	0018      	movs	r0, r3
   166ac:	4bd4      	ldr	r3, [pc, #848]	; (16a00 <processOnSMS+0x1a04>)
   166ae:	4798      	blx	r3
   166b0:	1e03      	subs	r3, r0, #0
   166b2:	d100      	bne.n	166b6 <processOnSMS+0x16ba>
   166b4:	e13c      	b.n	16930 <processOnSMS+0x1934>
	{
		char *ptrclcc;
		uint8_t startHH, startMM, stopHH, stopMM;

		ptrclcc = strtok(received_command,"-");
   166b6:	4ad4      	ldr	r2, [pc, #848]	; (16a08 <processOnSMS+0x1a0c>)
   166b8:	68fb      	ldr	r3, [r7, #12]
   166ba:	0011      	movs	r1, r2
   166bc:	0018      	movs	r0, r3
   166be:	4bd3      	ldr	r3, [pc, #844]	; (16a0c <processOnSMS+0x1a10>)
   166c0:	4798      	blx	r3
   166c2:	0003      	movs	r3, r0
   166c4:	2288      	movs	r2, #136	; 0x88
   166c6:	0052      	lsls	r2, r2, #1
   166c8:	2108      	movs	r1, #8
   166ca:	468c      	mov	ip, r1
   166cc:	44bc      	add	ip, r7
   166ce:	4462      	add	r2, ip
   166d0:	6013      	str	r3, [r2, #0]
		ptrclcc = strtok(NULL,":");
   166d2:	4bcf      	ldr	r3, [pc, #828]	; (16a10 <processOnSMS+0x1a14>)
   166d4:	0019      	movs	r1, r3
   166d6:	2000      	movs	r0, #0
   166d8:	4bcc      	ldr	r3, [pc, #816]	; (16a0c <processOnSMS+0x1a10>)
   166da:	4798      	blx	r3
   166dc:	0003      	movs	r3, r0
   166de:	2288      	movs	r2, #136	; 0x88
   166e0:	0052      	lsls	r2, r2, #1
   166e2:	2108      	movs	r1, #8
   166e4:	468c      	mov	ip, r1
   166e6:	44bc      	add	ip, r7
   166e8:	4462      	add	r2, ip
   166ea:	6013      	str	r3, [r2, #0]
		startHH=atoi(*ptrclcc);
   166ec:	2388      	movs	r3, #136	; 0x88
   166ee:	005b      	lsls	r3, r3, #1
   166f0:	2208      	movs	r2, #8
   166f2:	4694      	mov	ip, r2
   166f4:	44bc      	add	ip, r7
   166f6:	4463      	add	r3, ip
   166f8:	681b      	ldr	r3, [r3, #0]
   166fa:	781b      	ldrb	r3, [r3, #0]
   166fc:	0018      	movs	r0, r3
   166fe:	4bc5      	ldr	r3, [pc, #788]	; (16a14 <processOnSMS+0x1a18>)
   16700:	4798      	blx	r3
   16702:	0002      	movs	r2, r0
   16704:	2310      	movs	r3, #16
   16706:	33ff      	adds	r3, #255	; 0xff
   16708:	2108      	movs	r1, #8
   1670a:	468c      	mov	ip, r1
   1670c:	44bc      	add	ip, r7
   1670e:	4463      	add	r3, ip
   16710:	701a      	strb	r2, [r3, #0]
		ptrclcc = strtok(NULL,"-");
   16712:	4bbd      	ldr	r3, [pc, #756]	; (16a08 <processOnSMS+0x1a0c>)
   16714:	0019      	movs	r1, r3
   16716:	2000      	movs	r0, #0
   16718:	4bbc      	ldr	r3, [pc, #752]	; (16a0c <processOnSMS+0x1a10>)
   1671a:	4798      	blx	r3
   1671c:	0003      	movs	r3, r0
   1671e:	2288      	movs	r2, #136	; 0x88
   16720:	0052      	lsls	r2, r2, #1
   16722:	2108      	movs	r1, #8
   16724:	468c      	mov	ip, r1
   16726:	44bc      	add	ip, r7
   16728:	4462      	add	r2, ip
   1672a:	6013      	str	r3, [r2, #0]
		startMM=atoi(*ptrclcc);
   1672c:	2388      	movs	r3, #136	; 0x88
   1672e:	005b      	lsls	r3, r3, #1
   16730:	2208      	movs	r2, #8
   16732:	4694      	mov	ip, r2
   16734:	44bc      	add	ip, r7
   16736:	4463      	add	r3, ip
   16738:	681b      	ldr	r3, [r3, #0]
   1673a:	781b      	ldrb	r3, [r3, #0]
   1673c:	0018      	movs	r0, r3
   1673e:	4bb5      	ldr	r3, [pc, #724]	; (16a14 <processOnSMS+0x1a18>)
   16740:	4798      	blx	r3
   16742:	0002      	movs	r2, r0
   16744:	2387      	movs	r3, #135	; 0x87
   16746:	005b      	lsls	r3, r3, #1
   16748:	2108      	movs	r1, #8
   1674a:	468c      	mov	ip, r1
   1674c:	44bc      	add	ip, r7
   1674e:	4463      	add	r3, ip
   16750:	701a      	strb	r2, [r3, #0]
		ptrclcc = strtok(NULL,":");
   16752:	4baf      	ldr	r3, [pc, #700]	; (16a10 <processOnSMS+0x1a14>)
   16754:	0019      	movs	r1, r3
   16756:	2000      	movs	r0, #0
   16758:	4bac      	ldr	r3, [pc, #688]	; (16a0c <processOnSMS+0x1a10>)
   1675a:	4798      	blx	r3
   1675c:	0003      	movs	r3, r0
   1675e:	2288      	movs	r2, #136	; 0x88
   16760:	0052      	lsls	r2, r2, #1
   16762:	2108      	movs	r1, #8
   16764:	468c      	mov	ip, r1
   16766:	44bc      	add	ip, r7
   16768:	4462      	add	r2, ip
   1676a:	6013      	str	r3, [r2, #0]
		stopHH=atoi(*ptrclcc);
   1676c:	2388      	movs	r3, #136	; 0x88
   1676e:	005b      	lsls	r3, r3, #1
   16770:	2208      	movs	r2, #8
   16772:	4694      	mov	ip, r2
   16774:	44bc      	add	ip, r7
   16776:	4463      	add	r3, ip
   16778:	681b      	ldr	r3, [r3, #0]
   1677a:	781b      	ldrb	r3, [r3, #0]
   1677c:	0018      	movs	r0, r3
   1677e:	4ba5      	ldr	r3, [pc, #660]	; (16a14 <processOnSMS+0x1a18>)
   16780:	4798      	blx	r3
   16782:	0002      	movs	r2, r0
   16784:	230e      	movs	r3, #14
   16786:	33ff      	adds	r3, #255	; 0xff
   16788:	2108      	movs	r1, #8
   1678a:	468c      	mov	ip, r1
   1678c:	44bc      	add	ip, r7
   1678e:	4463      	add	r3, ip
   16790:	701a      	strb	r2, [r3, #0]
		ptrclcc = strtok(NULL,":");
   16792:	4b9f      	ldr	r3, [pc, #636]	; (16a10 <processOnSMS+0x1a14>)
   16794:	0019      	movs	r1, r3
   16796:	2000      	movs	r0, #0
   16798:	4b9c      	ldr	r3, [pc, #624]	; (16a0c <processOnSMS+0x1a10>)
   1679a:	4798      	blx	r3
   1679c:	0003      	movs	r3, r0
   1679e:	2288      	movs	r2, #136	; 0x88
   167a0:	0052      	lsls	r2, r2, #1
   167a2:	2108      	movs	r1, #8
   167a4:	468c      	mov	ip, r1
   167a6:	44bc      	add	ip, r7
   167a8:	4462      	add	r2, ip
   167aa:	6013      	str	r3, [r2, #0]
		stopMM=atoi(*ptrclcc);
   167ac:	2388      	movs	r3, #136	; 0x88
   167ae:	005b      	lsls	r3, r3, #1
   167b0:	2208      	movs	r2, #8
   167b2:	4694      	mov	ip, r2
   167b4:	44bc      	add	ip, r7
   167b6:	4463      	add	r3, ip
   167b8:	681b      	ldr	r3, [r3, #0]
   167ba:	781b      	ldrb	r3, [r3, #0]
   167bc:	0018      	movs	r0, r3
   167be:	4b95      	ldr	r3, [pc, #596]	; (16a14 <processOnSMS+0x1a18>)
   167c0:	4798      	blx	r3
   167c2:	0002      	movs	r2, r0
   167c4:	2386      	movs	r3, #134	; 0x86
   167c6:	005b      	lsls	r3, r3, #1
   167c8:	2108      	movs	r1, #8
   167ca:	468c      	mov	ip, r1
   167cc:	44bc      	add	ip, r7
   167ce:	4463      	add	r3, ip
   167d0:	701a      	strb	r2, [r3, #0]

		if(startHH>=0 && startHH<24 && startMM>=0 && startMM<60)
   167d2:	2310      	movs	r3, #16
   167d4:	33ff      	adds	r3, #255	; 0xff
   167d6:	2208      	movs	r2, #8
   167d8:	4694      	mov	ip, r2
   167da:	44bc      	add	ip, r7
   167dc:	4463      	add	r3, ip
   167de:	781b      	ldrb	r3, [r3, #0]
   167e0:	2b17      	cmp	r3, #23
   167e2:	d901      	bls.n	167e8 <processOnSMS+0x17ec>
   167e4:	f000 fcc0 	bl	17168 <processOnSMS+0x216c>
   167e8:	2387      	movs	r3, #135	; 0x87
   167ea:	005b      	lsls	r3, r3, #1
   167ec:	2208      	movs	r2, #8
   167ee:	4694      	mov	ip, r2
   167f0:	44bc      	add	ip, r7
   167f2:	4463      	add	r3, ip
   167f4:	781b      	ldrb	r3, [r3, #0]
   167f6:	2b3b      	cmp	r3, #59	; 0x3b
   167f8:	d901      	bls.n	167fe <processOnSMS+0x1802>
   167fa:	f000 fcb5 	bl	17168 <processOnSMS+0x216c>
		{
			if(stopHH>=0 && stopHH<24 && stopMM>=0 && stopMM<60)
   167fe:	230e      	movs	r3, #14
   16800:	33ff      	adds	r3, #255	; 0xff
   16802:	2208      	movs	r2, #8
   16804:	4694      	mov	ip, r2
   16806:	44bc      	add	ip, r7
   16808:	4463      	add	r3, ip
   1680a:	781b      	ldrb	r3, [r3, #0]
   1680c:	2b17      	cmp	r3, #23
   1680e:	d901      	bls.n	16814 <processOnSMS+0x1818>
   16810:	f000 fcaa 	bl	17168 <processOnSMS+0x216c>
   16814:	2386      	movs	r3, #134	; 0x86
   16816:	005b      	lsls	r3, r3, #1
   16818:	2208      	movs	r2, #8
   1681a:	4694      	mov	ip, r2
   1681c:	44bc      	add	ip, r7
   1681e:	4463      	add	r3, ip
   16820:	781b      	ldrb	r3, [r3, #0]
   16822:	2b3b      	cmp	r3, #59	; 0x3b
   16824:	d901      	bls.n	1682a <processOnSMS+0x182e>
   16826:	f000 fc9f 	bl	17168 <processOnSMS+0x216c>
			{
				incomingSMSProcessed=true;
   1682a:	2328      	movs	r3, #40	; 0x28
   1682c:	33ff      	adds	r3, #255	; 0xff
   1682e:	2208      	movs	r2, #8
   16830:	4694      	mov	ip, r2
   16832:	44bc      	add	ip, r7
   16834:	4463      	add	r3, ip
   16836:	2201      	movs	r2, #1
   16838:	701a      	strb	r2, [r3, #0]
				
				if(startHH==stopHH && startMM==stopMM)
   1683a:	2310      	movs	r3, #16
   1683c:	33ff      	adds	r3, #255	; 0xff
   1683e:	2208      	movs	r2, #8
   16840:	18ba      	adds	r2, r7, r2
   16842:	18d2      	adds	r2, r2, r3
   16844:	230e      	movs	r3, #14
   16846:	33ff      	adds	r3, #255	; 0xff
   16848:	2108      	movs	r1, #8
   1684a:	468c      	mov	ip, r1
   1684c:	44bc      	add	ip, r7
   1684e:	4463      	add	r3, ip
   16850:	7812      	ldrb	r2, [r2, #0]
   16852:	781b      	ldrb	r3, [r3, #0]
   16854:	429a      	cmp	r2, r3
   16856:	d130      	bne.n	168ba <processOnSMS+0x18be>
   16858:	2387      	movs	r3, #135	; 0x87
   1685a:	005b      	lsls	r3, r3, #1
   1685c:	2208      	movs	r2, #8
   1685e:	18ba      	adds	r2, r7, r2
   16860:	18d2      	adds	r2, r2, r3
   16862:	2386      	movs	r3, #134	; 0x86
   16864:	005b      	lsls	r3, r3, #1
   16866:	2108      	movs	r1, #8
   16868:	468c      	mov	ip, r1
   1686a:	44bc      	add	ip, r7
   1686c:	4463      	add	r3, ip
   1686e:	7812      	ldrb	r2, [r2, #0]
   16870:	781b      	ldrb	r3, [r3, #0]
   16872:	429a      	cmp	r2, r3
   16874:	d121      	bne.n	168ba <processOnSMS+0x18be>
				{
					saveNoCallSettings(false,0,0,0,0);
   16876:	2300      	movs	r3, #0
   16878:	9300      	str	r3, [sp, #0]
   1687a:	2300      	movs	r3, #0
   1687c:	2200      	movs	r2, #0
   1687e:	2100      	movs	r1, #0
   16880:	2000      	movs	r0, #0
   16882:	4c65      	ldr	r4, [pc, #404]	; (16a18 <processOnSMS+0x1a1c>)
   16884:	47a0      	blx	r4
					if(response_sms_processed_cmd)
   16886:	4b65      	ldr	r3, [pc, #404]	; (16a1c <processOnSMS+0x1a20>)
   16888:	2294      	movs	r2, #148	; 0x94
   1688a:	0052      	lsls	r2, r2, #1
   1688c:	4694      	mov	ip, r2
   1688e:	2208      	movs	r2, #8
   16890:	4690      	mov	r8, r2
   16892:	44b8      	add	r8, r7
   16894:	44c4      	add	ip, r8
   16896:	4463      	add	r3, ip
   16898:	781b      	ldrb	r3, [r3, #0]
   1689a:	2b00      	cmp	r3, #0
   1689c:	d101      	bne.n	168a2 <processOnSMS+0x18a6>
   1689e:	f000 fc63 	bl	17168 <processOnSMS+0x216c>
					{
						strcpy(resep_msg,"NO CALL SETTING OFF");
   168a2:	230c      	movs	r3, #12
   168a4:	2208      	movs	r2, #8
   168a6:	4694      	mov	ip, r2
   168a8:	44bc      	add	ip, r7
   168aa:	4463      	add	r3, ip
   168ac:	4a5c      	ldr	r2, [pc, #368]	; (16a20 <processOnSMS+0x1a24>)
   168ae:	ca13      	ldmia	r2!, {r0, r1, r4}
   168b0:	c313      	stmia	r3!, {r0, r1, r4}
   168b2:	ca03      	ldmia	r2!, {r0, r1}
   168b4:	c303      	stmia	r3!, {r0, r1}
					if(response_sms_processed_cmd)
   168b6:	f000 fc57 	bl	17168 <processOnSMS+0x216c>
					}
				}
				else
				{
					saveNoCallSettings(true,startHH,startMM,stopHH,stopMM);
   168ba:	230e      	movs	r3, #14
   168bc:	33ff      	adds	r3, #255	; 0xff
   168be:	2208      	movs	r2, #8
   168c0:	4694      	mov	ip, r2
   168c2:	44bc      	add	ip, r7
   168c4:	4463      	add	r3, ip
   168c6:	7818      	ldrb	r0, [r3, #0]
   168c8:	2387      	movs	r3, #135	; 0x87
   168ca:	005b      	lsls	r3, r3, #1
   168cc:	2208      	movs	r2, #8
   168ce:	4694      	mov	ip, r2
   168d0:	44bc      	add	ip, r7
   168d2:	4463      	add	r3, ip
   168d4:	781a      	ldrb	r2, [r3, #0]
   168d6:	2310      	movs	r3, #16
   168d8:	33ff      	adds	r3, #255	; 0xff
   168da:	2108      	movs	r1, #8
   168dc:	468c      	mov	ip, r1
   168de:	44bc      	add	ip, r7
   168e0:	4463      	add	r3, ip
   168e2:	7819      	ldrb	r1, [r3, #0]
   168e4:	2386      	movs	r3, #134	; 0x86
   168e6:	005b      	lsls	r3, r3, #1
   168e8:	2408      	movs	r4, #8
   168ea:	46a4      	mov	ip, r4
   168ec:	44bc      	add	ip, r7
   168ee:	4463      	add	r3, ip
   168f0:	781b      	ldrb	r3, [r3, #0]
   168f2:	9300      	str	r3, [sp, #0]
   168f4:	0003      	movs	r3, r0
   168f6:	2001      	movs	r0, #1
   168f8:	4c47      	ldr	r4, [pc, #284]	; (16a18 <processOnSMS+0x1a1c>)
   168fa:	47a0      	blx	r4
					if(response_sms_processed_cmd)
   168fc:	4b47      	ldr	r3, [pc, #284]	; (16a1c <processOnSMS+0x1a20>)
   168fe:	2294      	movs	r2, #148	; 0x94
   16900:	0052      	lsls	r2, r2, #1
   16902:	4694      	mov	ip, r2
   16904:	2208      	movs	r2, #8
   16906:	4690      	mov	r8, r2
   16908:	44b8      	add	r8, r7
   1690a:	44c4      	add	ip, r8
   1690c:	4463      	add	r3, ip
   1690e:	781b      	ldrb	r3, [r3, #0]
   16910:	2b00      	cmp	r3, #0
   16912:	d101      	bne.n	16918 <processOnSMS+0x191c>
   16914:	f000 fc28 	bl	17168 <processOnSMS+0x216c>
					{
						strcpy(resep_msg,"NO CALL TIMINGS SET");
   16918:	230c      	movs	r3, #12
   1691a:	2208      	movs	r2, #8
   1691c:	4694      	mov	ip, r2
   1691e:	44bc      	add	ip, r7
   16920:	4463      	add	r3, ip
   16922:	4a40      	ldr	r2, [pc, #256]	; (16a24 <processOnSMS+0x1a28>)
   16924:	ca13      	ldmia	r2!, {r0, r1, r4}
   16926:	c313      	stmia	r3!, {r0, r1, r4}
   16928:	ca03      	ldmia	r2!, {r0, r1}
   1692a:	c303      	stmia	r3!, {r0, r1}
   1692c:	f000 fc1c 	bl	17168 <processOnSMS+0x216c>
					}
				}
			}
		}
	}
	else if (StringstartsWith(received_command,"STAGE"))
   16930:	4a3d      	ldr	r2, [pc, #244]	; (16a28 <processOnSMS+0x1a2c>)
   16932:	68fb      	ldr	r3, [r7, #12]
   16934:	0011      	movs	r1, r2
   16936:	0018      	movs	r0, r3
   16938:	4b31      	ldr	r3, [pc, #196]	; (16a00 <processOnSMS+0x1a04>)
   1693a:	4798      	blx	r3
   1693c:	1e03      	subs	r3, r0, #0
   1693e:	d100      	bne.n	16942 <processOnSMS+0x1946>
   16940:	e07e      	b.n	16a40 <processOnSMS+0x1a44>
	{
		memmove(received_command,received_command+5,strlen(received_command));
   16942:	68fb      	ldr	r3, [r7, #12]
   16944:	1d5c      	adds	r4, r3, #5
   16946:	68fb      	ldr	r3, [r7, #12]
   16948:	0018      	movs	r0, r3
   1694a:	4b38      	ldr	r3, [pc, #224]	; (16a2c <processOnSMS+0x1a30>)
   1694c:	4798      	blx	r3
   1694e:	0002      	movs	r2, r0
   16950:	68fb      	ldr	r3, [r7, #12]
   16952:	0021      	movs	r1, r4
   16954:	0018      	movs	r0, r3
   16956:	4b36      	ldr	r3, [pc, #216]	; (16a30 <processOnSMS+0x1a34>)
   16958:	4798      	blx	r3
		uint16_t stageLevel = atoi(received_command);
   1695a:	68fb      	ldr	r3, [r7, #12]
   1695c:	0018      	movs	r0, r3
   1695e:	4b2d      	ldr	r3, [pc, #180]	; (16a14 <processOnSMS+0x1a18>)
   16960:	4798      	blx	r3
   16962:	0002      	movs	r2, r0
   16964:	2390      	movs	r3, #144	; 0x90
   16966:	005b      	lsls	r3, r3, #1
   16968:	2108      	movs	r1, #8
   1696a:	468c      	mov	ip, r1
   1696c:	44bc      	add	ip, r7
   1696e:	4463      	add	r3, ip
   16970:	801a      	strh	r2, [r3, #0]
		if (stageLevel < 0) stageLevel = 0;
		if (stageLevel > 5) stageLevel = 5;
   16972:	2390      	movs	r3, #144	; 0x90
   16974:	005b      	lsls	r3, r3, #1
   16976:	2208      	movs	r2, #8
   16978:	4694      	mov	ip, r2
   1697a:	44bc      	add	ip, r7
   1697c:	4463      	add	r3, ip
   1697e:	881b      	ldrh	r3, [r3, #0]
   16980:	2b05      	cmp	r3, #5
   16982:	d907      	bls.n	16994 <processOnSMS+0x1998>
   16984:	2390      	movs	r3, #144	; 0x90
   16986:	005b      	lsls	r3, r3, #1
   16988:	2208      	movs	r2, #8
   1698a:	4694      	mov	ip, r2
   1698c:	44bc      	add	ip, r7
   1698e:	4463      	add	r3, ip
   16990:	2205      	movs	r2, #5
   16992:	801a      	strh	r2, [r3, #0]
		saveEventStageSettings(stageLevel);  //Store in EEPROM the EVENT STAGE
   16994:	2390      	movs	r3, #144	; 0x90
   16996:	005b      	lsls	r3, r3, #1
   16998:	2208      	movs	r2, #8
   1699a:	4694      	mov	ip, r2
   1699c:	44bc      	add	ip, r7
   1699e:	4463      	add	r3, ip
   169a0:	881b      	ldrh	r3, [r3, #0]
   169a2:	b2db      	uxtb	r3, r3
   169a4:	0018      	movs	r0, r3
   169a6:	4b23      	ldr	r3, [pc, #140]	; (16a34 <processOnSMS+0x1a38>)
   169a8:	4798      	blx	r3
		
		incomingSMSProcessed=true;
   169aa:	2328      	movs	r3, #40	; 0x28
   169ac:	33ff      	adds	r3, #255	; 0xff
   169ae:	2208      	movs	r2, #8
   169b0:	4694      	mov	ip, r2
   169b2:	44bc      	add	ip, r7
   169b4:	4463      	add	r3, ip
   169b6:	2201      	movs	r2, #1
   169b8:	701a      	strb	r2, [r3, #0]
		
		if(response_sms_processed_cmd)
   169ba:	4b18      	ldr	r3, [pc, #96]	; (16a1c <processOnSMS+0x1a20>)
   169bc:	2294      	movs	r2, #148	; 0x94
   169be:	0052      	lsls	r2, r2, #1
   169c0:	4694      	mov	ip, r2
   169c2:	2208      	movs	r2, #8
   169c4:	4690      	mov	r8, r2
   169c6:	44b8      	add	r8, r7
   169c8:	44c4      	add	ip, r8
   169ca:	4463      	add	r3, ip
   169cc:	781b      	ldrb	r3, [r3, #0]
   169ce:	2b00      	cmp	r3, #0
   169d0:	d101      	bne.n	169d6 <processOnSMS+0x19da>
   169d2:	f000 fbc9 	bl	17168 <processOnSMS+0x216c>
		{
			sprintf(resep_msg,"CALL STAGE SET TO : %d", stageLevel);
   169d6:	2390      	movs	r3, #144	; 0x90
   169d8:	005b      	lsls	r3, r3, #1
   169da:	2208      	movs	r2, #8
   169dc:	4694      	mov	ip, r2
   169de:	44bc      	add	ip, r7
   169e0:	4463      	add	r3, ip
   169e2:	881a      	ldrh	r2, [r3, #0]
   169e4:	4914      	ldr	r1, [pc, #80]	; (16a38 <processOnSMS+0x1a3c>)
   169e6:	230c      	movs	r3, #12
   169e8:	2008      	movs	r0, #8
   169ea:	4684      	mov	ip, r0
   169ec:	44bc      	add	ip, r7
   169ee:	4463      	add	r3, ip
   169f0:	0018      	movs	r0, r3
   169f2:	4b12      	ldr	r3, [pc, #72]	; (16a3c <processOnSMS+0x1a40>)
   169f4:	4798      	blx	r3
   169f6:	f000 fbb7 	bl	17168 <processOnSMS+0x216c>
   169fa:	46c0      	nop			; (mov r8, r8)
   169fc:	0002a074 	.word	0x0002a074
   16a00:	00014211 	.word	0x00014211
   16a04:	0002a07c 	.word	0x0002a07c
   16a08:	0002a084 	.word	0x0002a084
   16a0c:	00028cd5 	.word	0x00028cd5
   16a10:	0002a088 	.word	0x0002a088
   16a14:	000288c9 	.word	0x000288c9
   16a18:	000113d9 	.word	0x000113d9
   16a1c:	fffffeda 	.word	0xfffffeda
   16a20:	0002a048 	.word	0x0002a048
   16a24:	0002a08c 	.word	0x0002a08c
   16a28:	0002a0a0 	.word	0x0002a0a0
   16a2c:	00028c73 	.word	0x00028c73
   16a30:	000289bf 	.word	0x000289bf
   16a34:	00011a2d 	.word	0x00011a2d
   16a38:	0002a0a8 	.word	0x0002a0a8
   16a3c:	00028be9 	.word	0x00028be9
		}
	}
	else if (StringstartsWith(received_command,"STARTIME"))
   16a40:	4aa5      	ldr	r2, [pc, #660]	; (16cd8 <processOnSMS+0x1cdc>)
   16a42:	68fb      	ldr	r3, [r7, #12]
   16a44:	0011      	movs	r1, r2
   16a46:	0018      	movs	r0, r3
   16a48:	4ba4      	ldr	r3, [pc, #656]	; (16cdc <processOnSMS+0x1ce0>)
   16a4a:	4798      	blx	r3
   16a4c:	1e03      	subs	r3, r0, #0
   16a4e:	d06b      	beq.n	16b28 <processOnSMS+0x1b2c>
	{
		memmove(received_command,received_command+8,strlen(received_command));
   16a50:	68fb      	ldr	r3, [r7, #12]
   16a52:	3308      	adds	r3, #8
   16a54:	001c      	movs	r4, r3
   16a56:	68fb      	ldr	r3, [r7, #12]
   16a58:	0018      	movs	r0, r3
   16a5a:	4ba1      	ldr	r3, [pc, #644]	; (16ce0 <processOnSMS+0x1ce4>)
   16a5c:	4798      	blx	r3
   16a5e:	0002      	movs	r2, r0
   16a60:	68fb      	ldr	r3, [r7, #12]
   16a62:	0021      	movs	r1, r4
   16a64:	0018      	movs	r0, r3
   16a66:	4b9f      	ldr	r3, [pc, #636]	; (16ce4 <processOnSMS+0x1ce8>)
   16a68:	4798      	blx	r3
		uint16_t STARTIME = atoi(received_command);
   16a6a:	68fb      	ldr	r3, [r7, #12]
   16a6c:	0018      	movs	r0, r3
   16a6e:	4b9e      	ldr	r3, [pc, #632]	; (16ce8 <processOnSMS+0x1cec>)
   16a70:	4798      	blx	r3
   16a72:	0002      	movs	r2, r0
   16a74:	238f      	movs	r3, #143	; 0x8f
   16a76:	005b      	lsls	r3, r3, #1
   16a78:	2108      	movs	r1, #8
   16a7a:	468c      	mov	ip, r1
   16a7c:	44bc      	add	ip, r7
   16a7e:	4463      	add	r3, ip
   16a80:	801a      	strh	r2, [r3, #0]
		if (STARTIME < 2)
   16a82:	238f      	movs	r3, #143	; 0x8f
   16a84:	005b      	lsls	r3, r3, #1
   16a86:	2208      	movs	r2, #8
   16a88:	4694      	mov	ip, r2
   16a8a:	44bc      	add	ip, r7
   16a8c:	4463      	add	r3, ip
   16a8e:	881b      	ldrh	r3, [r3, #0]
   16a90:	2b01      	cmp	r3, #1
   16a92:	d807      	bhi.n	16aa4 <processOnSMS+0x1aa8>
		{
			STARTIME = 2;
   16a94:	238f      	movs	r3, #143	; 0x8f
   16a96:	005b      	lsls	r3, r3, #1
   16a98:	2208      	movs	r2, #8
   16a9a:	4694      	mov	ip, r2
   16a9c:	44bc      	add	ip, r7
   16a9e:	4463      	add	r3, ip
   16aa0:	2202      	movs	r2, #2
   16aa2:	801a      	strh	r2, [r3, #0]
		}
		if (STARTIME > 65000L)
   16aa4:	238f      	movs	r3, #143	; 0x8f
   16aa6:	005b      	lsls	r3, r3, #1
   16aa8:	2208      	movs	r2, #8
   16aaa:	4694      	mov	ip, r2
   16aac:	44bc      	add	ip, r7
   16aae:	4463      	add	r3, ip
   16ab0:	881b      	ldrh	r3, [r3, #0]
   16ab2:	4a8e      	ldr	r2, [pc, #568]	; (16cec <processOnSMS+0x1cf0>)
   16ab4:	4293      	cmp	r3, r2
   16ab6:	d907      	bls.n	16ac8 <processOnSMS+0x1acc>
		{
			STARTIME = 65000L;
   16ab8:	238f      	movs	r3, #143	; 0x8f
   16aba:	005b      	lsls	r3, r3, #1
   16abc:	2208      	movs	r2, #8
   16abe:	4694      	mov	ip, r2
   16ac0:	44bc      	add	ip, r7
   16ac2:	4463      	add	r3, ip
   16ac4:	4a8a      	ldr	r2, [pc, #552]	; (16cf0 <processOnSMS+0x1cf4>)
   16ac6:	801a      	strh	r2, [r3, #0]
		}
		saveStarDeltaTimer(STARTIME);
   16ac8:	238f      	movs	r3, #143	; 0x8f
   16aca:	005b      	lsls	r3, r3, #1
   16acc:	2208      	movs	r2, #8
   16ace:	4694      	mov	ip, r2
   16ad0:	44bc      	add	ip, r7
   16ad2:	4463      	add	r3, ip
   16ad4:	881b      	ldrh	r3, [r3, #0]
   16ad6:	0018      	movs	r0, r3
   16ad8:	4b86      	ldr	r3, [pc, #536]	; (16cf4 <processOnSMS+0x1cf8>)
   16ada:	4798      	blx	r3
		
		incomingSMSProcessed=true;
   16adc:	2328      	movs	r3, #40	; 0x28
   16ade:	33ff      	adds	r3, #255	; 0xff
   16ae0:	2208      	movs	r2, #8
   16ae2:	4694      	mov	ip, r2
   16ae4:	44bc      	add	ip, r7
   16ae6:	4463      	add	r3, ip
   16ae8:	2201      	movs	r2, #1
   16aea:	701a      	strb	r2, [r3, #0]
		
		if (response_sms_processed_cmd == true)
   16aec:	4b82      	ldr	r3, [pc, #520]	; (16cf8 <processOnSMS+0x1cfc>)
   16aee:	2294      	movs	r2, #148	; 0x94
   16af0:	0052      	lsls	r2, r2, #1
   16af2:	4694      	mov	ip, r2
   16af4:	2208      	movs	r2, #8
   16af6:	4690      	mov	r8, r2
   16af8:	44b8      	add	r8, r7
   16afa:	44c4      	add	ip, r8
   16afc:	4463      	add	r3, ip
   16afe:	781b      	ldrb	r3, [r3, #0]
   16b00:	2b00      	cmp	r3, #0
   16b02:	d100      	bne.n	16b06 <processOnSMS+0x1b0a>
   16b04:	e330      	b.n	17168 <processOnSMS+0x216c>
		{
			sprintf(resep_msg," STARTIME SET TO : %d",STARTIME);
   16b06:	238f      	movs	r3, #143	; 0x8f
   16b08:	005b      	lsls	r3, r3, #1
   16b0a:	2208      	movs	r2, #8
   16b0c:	4694      	mov	ip, r2
   16b0e:	44bc      	add	ip, r7
   16b10:	4463      	add	r3, ip
   16b12:	881a      	ldrh	r2, [r3, #0]
   16b14:	4979      	ldr	r1, [pc, #484]	; (16cfc <processOnSMS+0x1d00>)
   16b16:	230c      	movs	r3, #12
   16b18:	2008      	movs	r0, #8
   16b1a:	4684      	mov	ip, r0
   16b1c:	44bc      	add	ip, r7
   16b1e:	4463      	add	r3, ip
   16b20:	0018      	movs	r0, r3
   16b22:	4b77      	ldr	r3, [pc, #476]	; (16d00 <processOnSMS+0x1d04>)
   16b24:	4798      	blx	r3
   16b26:	e31f      	b.n	17168 <processOnSMS+0x216c>
		}
	}
	else if (StringstartsWith(received_command,"AUTOTIME"))
   16b28:	4a76      	ldr	r2, [pc, #472]	; (16d04 <processOnSMS+0x1d08>)
   16b2a:	68fb      	ldr	r3, [r7, #12]
   16b2c:	0011      	movs	r1, r2
   16b2e:	0018      	movs	r0, r3
   16b30:	4b6a      	ldr	r3, [pc, #424]	; (16cdc <processOnSMS+0x1ce0>)
   16b32:	4798      	blx	r3
   16b34:	1e03      	subs	r3, r0, #0
   16b36:	d06d      	beq.n	16c14 <processOnSMS+0x1c18>
	{
		memmove(received_command,received_command+8,strlen(received_command));
   16b38:	68fb      	ldr	r3, [r7, #12]
   16b3a:	3308      	adds	r3, #8
   16b3c:	001c      	movs	r4, r3
   16b3e:	68fb      	ldr	r3, [r7, #12]
   16b40:	0018      	movs	r0, r3
   16b42:	4b67      	ldr	r3, [pc, #412]	; (16ce0 <processOnSMS+0x1ce4>)
   16b44:	4798      	blx	r3
   16b46:	0002      	movs	r2, r0
   16b48:	68fb      	ldr	r3, [r7, #12]
   16b4a:	0021      	movs	r1, r4
   16b4c:	0018      	movs	r0, r3
   16b4e:	4b65      	ldr	r3, [pc, #404]	; (16ce4 <processOnSMS+0x1ce8>)
   16b50:	4798      	blx	r3
		uint16_t AUTOTIME = atoi(received_command);
   16b52:	68fb      	ldr	r3, [r7, #12]
   16b54:	0018      	movs	r0, r3
   16b56:	4b64      	ldr	r3, [pc, #400]	; (16ce8 <processOnSMS+0x1cec>)
   16b58:	4798      	blx	r3
   16b5a:	0002      	movs	r2, r0
   16b5c:	238e      	movs	r3, #142	; 0x8e
   16b5e:	005b      	lsls	r3, r3, #1
   16b60:	2108      	movs	r1, #8
   16b62:	468c      	mov	ip, r1
   16b64:	44bc      	add	ip, r7
   16b66:	4463      	add	r3, ip
   16b68:	801a      	strh	r2, [r3, #0]
		if (AUTOTIME < 50)
   16b6a:	238e      	movs	r3, #142	; 0x8e
   16b6c:	005b      	lsls	r3, r3, #1
   16b6e:	2208      	movs	r2, #8
   16b70:	4694      	mov	ip, r2
   16b72:	44bc      	add	ip, r7
   16b74:	4463      	add	r3, ip
   16b76:	881b      	ldrh	r3, [r3, #0]
   16b78:	2b31      	cmp	r3, #49	; 0x31
   16b7a:	d807      	bhi.n	16b8c <processOnSMS+0x1b90>
		{
			AUTOTIME = 50;
   16b7c:	238e      	movs	r3, #142	; 0x8e
   16b7e:	005b      	lsls	r3, r3, #1
   16b80:	2208      	movs	r2, #8
   16b82:	4694      	mov	ip, r2
   16b84:	44bc      	add	ip, r7
   16b86:	4463      	add	r3, ip
   16b88:	2232      	movs	r2, #50	; 0x32
   16b8a:	801a      	strh	r2, [r3, #0]
		}
		if (AUTOTIME > 28800)
   16b8c:	238e      	movs	r3, #142	; 0x8e
   16b8e:	005b      	lsls	r3, r3, #1
   16b90:	2208      	movs	r2, #8
   16b92:	4694      	mov	ip, r2
   16b94:	44bc      	add	ip, r7
   16b96:	4463      	add	r3, ip
   16b98:	881a      	ldrh	r2, [r3, #0]
   16b9a:	23e1      	movs	r3, #225	; 0xe1
   16b9c:	01db      	lsls	r3, r3, #7
   16b9e:	429a      	cmp	r2, r3
   16ba0:	d908      	bls.n	16bb4 <processOnSMS+0x1bb8>
		{
			AUTOTIME = 28800;
   16ba2:	238e      	movs	r3, #142	; 0x8e
   16ba4:	005b      	lsls	r3, r3, #1
   16ba6:	2208      	movs	r2, #8
   16ba8:	4694      	mov	ip, r2
   16baa:	44bc      	add	ip, r7
   16bac:	4463      	add	r3, ip
   16bae:	22e1      	movs	r2, #225	; 0xe1
   16bb0:	01d2      	lsls	r2, r2, #7
   16bb2:	801a      	strh	r2, [r3, #0]
		}
		saveAutoStartTimeSettings(AUTOTIME);
   16bb4:	238e      	movs	r3, #142	; 0x8e
   16bb6:	005b      	lsls	r3, r3, #1
   16bb8:	2208      	movs	r2, #8
   16bba:	4694      	mov	ip, r2
   16bbc:	44bc      	add	ip, r7
   16bbe:	4463      	add	r3, ip
   16bc0:	881b      	ldrh	r3, [r3, #0]
   16bc2:	0018      	movs	r0, r3
   16bc4:	4b50      	ldr	r3, [pc, #320]	; (16d08 <processOnSMS+0x1d0c>)
   16bc6:	4798      	blx	r3
		incomingSMSProcessed=true;
   16bc8:	2328      	movs	r3, #40	; 0x28
   16bca:	33ff      	adds	r3, #255	; 0xff
   16bcc:	2208      	movs	r2, #8
   16bce:	4694      	mov	ip, r2
   16bd0:	44bc      	add	ip, r7
   16bd2:	4463      	add	r3, ip
   16bd4:	2201      	movs	r2, #1
   16bd6:	701a      	strb	r2, [r3, #0]
		
		if (response_sms_processed_cmd == true)
   16bd8:	4b47      	ldr	r3, [pc, #284]	; (16cf8 <processOnSMS+0x1cfc>)
   16bda:	2294      	movs	r2, #148	; 0x94
   16bdc:	0052      	lsls	r2, r2, #1
   16bde:	4694      	mov	ip, r2
   16be0:	2208      	movs	r2, #8
   16be2:	4690      	mov	r8, r2
   16be4:	44b8      	add	r8, r7
   16be6:	44c4      	add	ip, r8
   16be8:	4463      	add	r3, ip
   16bea:	781b      	ldrb	r3, [r3, #0]
   16bec:	2b00      	cmp	r3, #0
   16bee:	d100      	bne.n	16bf2 <processOnSMS+0x1bf6>
   16bf0:	e2ba      	b.n	17168 <processOnSMS+0x216c>
		{
			sprintf(resep_msg," AUTOTIME SET TO : %d",AUTOTIME);
   16bf2:	238e      	movs	r3, #142	; 0x8e
   16bf4:	005b      	lsls	r3, r3, #1
   16bf6:	2208      	movs	r2, #8
   16bf8:	4694      	mov	ip, r2
   16bfa:	44bc      	add	ip, r7
   16bfc:	4463      	add	r3, ip
   16bfe:	881a      	ldrh	r2, [r3, #0]
   16c00:	4942      	ldr	r1, [pc, #264]	; (16d0c <processOnSMS+0x1d10>)
   16c02:	230c      	movs	r3, #12
   16c04:	2008      	movs	r0, #8
   16c06:	4684      	mov	ip, r0
   16c08:	44bc      	add	ip, r7
   16c0a:	4463      	add	r3, ip
   16c0c:	0018      	movs	r0, r3
   16c0e:	4b3c      	ldr	r3, [pc, #240]	; (16d00 <processOnSMS+0x1d04>)
   16c10:	4798      	blx	r3
   16c12:	e2a9      	b.n	17168 <processOnSMS+0x216c>
		}
	}
	else if (StringstartsWith(received_command,"BAL"))
   16c14:	4a3e      	ldr	r2, [pc, #248]	; (16d10 <processOnSMS+0x1d14>)
   16c16:	68fb      	ldr	r3, [r7, #12]
   16c18:	0011      	movs	r1, r2
   16c1a:	0018      	movs	r0, r3
   16c1c:	4b2f      	ldr	r3, [pc, #188]	; (16cdc <processOnSMS+0x1ce0>)
   16c1e:	4798      	blx	r3
   16c20:	1e03      	subs	r3, r0, #0
   16c22:	d000      	beq.n	16c26 <processOnSMS+0x1c2a>
   16c24:	e2a0      	b.n	17168 <processOnSMS+0x216c>
		// The received sms will be like BAL*141# for vodafone
		// We need to extract the URC number and check the balance, and send it to user
		//todo: implement mechanism to check current balance of sim card
		
	}
	else if(StringstartsWith(received_command,"MP+"))
   16c26:	4a3b      	ldr	r2, [pc, #236]	; (16d14 <processOnSMS+0x1d18>)
   16c28:	68fb      	ldr	r3, [r7, #12]
   16c2a:	0011      	movs	r1, r2
   16c2c:	0018      	movs	r0, r3
   16c2e:	4b2b      	ldr	r3, [pc, #172]	; (16cdc <processOnSMS+0x1ce0>)
   16c30:	4798      	blx	r3
   16c32:	1e03      	subs	r3, r0, #0
   16c34:	d023      	beq.n	16c7e <processOnSMS+0x1c82>
	{
		memmove(received_command,received_command+3,strlen(received_command));
   16c36:	68fb      	ldr	r3, [r7, #12]
   16c38:	1cdc      	adds	r4, r3, #3
   16c3a:	68fb      	ldr	r3, [r7, #12]
   16c3c:	0018      	movs	r0, r3
   16c3e:	4b28      	ldr	r3, [pc, #160]	; (16ce0 <processOnSMS+0x1ce4>)
   16c40:	4798      	blx	r3
   16c42:	0002      	movs	r2, r0
   16c44:	68fb      	ldr	r3, [r7, #12]
   16c46:	0021      	movs	r1, r4
   16c48:	0018      	movs	r0, r3
   16c4a:	4b26      	ldr	r3, [pc, #152]	; (16ce4 <processOnSMS+0x1ce8>)
   16c4c:	4798      	blx	r3
		if(addPrimaryIndexedNumber(received_command))
   16c4e:	68fb      	ldr	r3, [r7, #12]
   16c50:	0018      	movs	r0, r3
   16c52:	4b31      	ldr	r3, [pc, #196]	; (16d18 <processOnSMS+0x1d1c>)
   16c54:	4798      	blx	r3
   16c56:	1e03      	subs	r3, r0, #0
   16c58:	d100      	bne.n	16c5c <processOnSMS+0x1c60>
   16c5a:	e285      	b.n	17168 <processOnSMS+0x216c>
		{
			incomingSMSProcessed=true;
   16c5c:	2328      	movs	r3, #40	; 0x28
   16c5e:	33ff      	adds	r3, #255	; 0xff
   16c60:	2208      	movs	r2, #8
   16c62:	4694      	mov	ip, r2
   16c64:	44bc      	add	ip, r7
   16c66:	4463      	add	r3, ip
   16c68:	2201      	movs	r2, #1
   16c6a:	701a      	strb	r2, [r3, #0]
			strcpy(resep_msg,"P NO ADDDED");
   16c6c:	230c      	movs	r3, #12
   16c6e:	2208      	movs	r2, #8
   16c70:	4694      	mov	ip, r2
   16c72:	44bc      	add	ip, r7
   16c74:	4463      	add	r3, ip
   16c76:	4a29      	ldr	r2, [pc, #164]	; (16d1c <processOnSMS+0x1d20>)
   16c78:	ca13      	ldmia	r2!, {r0, r1, r4}
   16c7a:	c313      	stmia	r3!, {r0, r1, r4}
   16c7c:	e274      	b.n	17168 <processOnSMS+0x216c>
		}
	}
	else if(StringstartsWith(received_command,"MS+"))
   16c7e:	4a28      	ldr	r2, [pc, #160]	; (16d20 <processOnSMS+0x1d24>)
   16c80:	68fb      	ldr	r3, [r7, #12]
   16c82:	0011      	movs	r1, r2
   16c84:	0018      	movs	r0, r3
   16c86:	4b15      	ldr	r3, [pc, #84]	; (16cdc <processOnSMS+0x1ce0>)
   16c88:	4798      	blx	r3
   16c8a:	1e03      	subs	r3, r0, #0
   16c8c:	d04e      	beq.n	16d2c <processOnSMS+0x1d30>
	{
		memmove(received_command,received_command+3,strlen(received_command));
   16c8e:	68fb      	ldr	r3, [r7, #12]
   16c90:	1cdc      	adds	r4, r3, #3
   16c92:	68fb      	ldr	r3, [r7, #12]
   16c94:	0018      	movs	r0, r3
   16c96:	4b12      	ldr	r3, [pc, #72]	; (16ce0 <processOnSMS+0x1ce4>)
   16c98:	4798      	blx	r3
   16c9a:	0002      	movs	r2, r0
   16c9c:	68fb      	ldr	r3, [r7, #12]
   16c9e:	0021      	movs	r1, r4
   16ca0:	0018      	movs	r0, r3
   16ca2:	4b10      	ldr	r3, [pc, #64]	; (16ce4 <processOnSMS+0x1ce8>)
   16ca4:	4798      	blx	r3
		if(addSecondaryIndexedNumber(received_command))
   16ca6:	68fb      	ldr	r3, [r7, #12]
   16ca8:	0018      	movs	r0, r3
   16caa:	4b1e      	ldr	r3, [pc, #120]	; (16d24 <processOnSMS+0x1d28>)
   16cac:	4798      	blx	r3
   16cae:	1e03      	subs	r3, r0, #0
   16cb0:	d100      	bne.n	16cb4 <processOnSMS+0x1cb8>
   16cb2:	e259      	b.n	17168 <processOnSMS+0x216c>
		{
			incomingSMSProcessed=true;
   16cb4:	2328      	movs	r3, #40	; 0x28
   16cb6:	33ff      	adds	r3, #255	; 0xff
   16cb8:	2208      	movs	r2, #8
   16cba:	4694      	mov	ip, r2
   16cbc:	44bc      	add	ip, r7
   16cbe:	4463      	add	r3, ip
   16cc0:	2201      	movs	r2, #1
   16cc2:	701a      	strb	r2, [r3, #0]
			strcpy(resep_msg,"S NO ADDDED");
   16cc4:	230c      	movs	r3, #12
   16cc6:	2208      	movs	r2, #8
   16cc8:	4694      	mov	ip, r2
   16cca:	44bc      	add	ip, r7
   16ccc:	4463      	add	r3, ip
   16cce:	4a16      	ldr	r2, [pc, #88]	; (16d28 <processOnSMS+0x1d2c>)
   16cd0:	ca13      	ldmia	r2!, {r0, r1, r4}
   16cd2:	c313      	stmia	r3!, {r0, r1, r4}
   16cd4:	e248      	b.n	17168 <processOnSMS+0x216c>
   16cd6:	46c0      	nop			; (mov r8, r8)
   16cd8:	0002a0c0 	.word	0x0002a0c0
   16cdc:	00014211 	.word	0x00014211
   16ce0:	00028c73 	.word	0x00028c73
   16ce4:	000289bf 	.word	0x000289bf
   16ce8:	000288c9 	.word	0x000288c9
   16cec:	0000fde8 	.word	0x0000fde8
   16cf0:	fffffde8 	.word	0xfffffde8
   16cf4:	000119e1 	.word	0x000119e1
   16cf8:	fffffeda 	.word	0xfffffeda
   16cfc:	0002a0cc 	.word	0x0002a0cc
   16d00:	00028be9 	.word	0x00028be9
   16d04:	0002a0e4 	.word	0x0002a0e4
   16d08:	000112f5 	.word	0x000112f5
   16d0c:	0002a0f0 	.word	0x0002a0f0
   16d10:	0002a108 	.word	0x0002a108
   16d14:	0002a10c 	.word	0x0002a10c
   16d18:	00011bad 	.word	0x00011bad
   16d1c:	0002a110 	.word	0x0002a110
   16d20:	0002a11c 	.word	0x0002a11c
   16d24:	00011c59 	.word	0x00011c59
   16d28:	0002a120 	.word	0x0002a120
		}
	}
	else if (StringstartsWith(received_command,"M+"))
   16d2c:	4adb      	ldr	r2, [pc, #876]	; (1709c <processOnSMS+0x20a0>)
   16d2e:	68fb      	ldr	r3, [r7, #12]
   16d30:	0011      	movs	r1, r2
   16d32:	0018      	movs	r0, r3
   16d34:	4bda      	ldr	r3, [pc, #872]	; (170a0 <processOnSMS+0x20a4>)
   16d36:	4798      	blx	r3
   16d38:	1e03      	subs	r3, r0, #0
   16d3a:	d100      	bne.n	16d3e <processOnSMS+0x1d42>
   16d3c:	e091      	b.n	16e62 <processOnSMS+0x1e66>
	{
		memmove(received_command,received_command+2,strlen(received_command));
   16d3e:	68fb      	ldr	r3, [r7, #12]
   16d40:	1c9c      	adds	r4, r3, #2
   16d42:	68fb      	ldr	r3, [r7, #12]
   16d44:	0018      	movs	r0, r3
   16d46:	4bd7      	ldr	r3, [pc, #860]	; (170a4 <processOnSMS+0x20a8>)
   16d48:	4798      	blx	r3
   16d4a:	0002      	movs	r2, r0
   16d4c:	68fb      	ldr	r3, [r7, #12]
   16d4e:	0021      	movs	r1, r4
   16d50:	0018      	movs	r0, r3
   16d52:	4bd5      	ldr	r3, [pc, #852]	; (170a8 <processOnSMS+0x20ac>)
   16d54:	4798      	blx	r3
		bool result = addNumber(received_command);
   16d56:	230c      	movs	r3, #12
   16d58:	33ff      	adds	r3, #255	; 0xff
   16d5a:	2208      	movs	r2, #8
   16d5c:	18ba      	adds	r2, r7, r2
   16d5e:	18d4      	adds	r4, r2, r3
   16d60:	68fb      	ldr	r3, [r7, #12]
   16d62:	0018      	movs	r0, r3
   16d64:	4bd1      	ldr	r3, [pc, #836]	; (170ac <processOnSMS+0x20b0>)
   16d66:	4798      	blx	r3
   16d68:	0003      	movs	r3, r0
   16d6a:	7023      	strb	r3, [r4, #0]
		if(result)
   16d6c:	230c      	movs	r3, #12
   16d6e:	33ff      	adds	r3, #255	; 0xff
   16d70:	2208      	movs	r2, #8
   16d72:	4694      	mov	ip, r2
   16d74:	44bc      	add	ip, r7
   16d76:	4463      	add	r3, ip
   16d78:	781b      	ldrb	r3, [r3, #0]
   16d7a:	2b00      	cmp	r3, #0
   16d7c:	d100      	bne.n	16d80 <processOnSMS+0x1d84>
   16d7e:	e1f3      	b.n	17168 <processOnSMS+0x216c>
		{
			incomingSMSProcessed=true;
   16d80:	2328      	movs	r3, #40	; 0x28
   16d82:	33ff      	adds	r3, #255	; 0xff
   16d84:	2208      	movs	r2, #8
   16d86:	4694      	mov	ip, r2
   16d88:	44bc      	add	ip, r7
   16d8a:	4463      	add	r3, ip
   16d8c:	2201      	movs	r2, #1
   16d8e:	701a      	strb	r2, [r3, #0]
			if (response_sms_processed_cmd == true)
   16d90:	4bc7      	ldr	r3, [pc, #796]	; (170b0 <processOnSMS+0x20b4>)
   16d92:	2294      	movs	r2, #148	; 0x94
   16d94:	0052      	lsls	r2, r2, #1
   16d96:	4694      	mov	ip, r2
   16d98:	2208      	movs	r2, #8
   16d9a:	4690      	mov	r8, r2
   16d9c:	44b8      	add	r8, r7
   16d9e:	44c4      	add	ip, r8
   16da0:	4463      	add	r3, ip
   16da2:	781b      	ldrb	r3, [r3, #0]
   16da4:	2b00      	cmp	r3, #0
   16da6:	d100      	bne.n	16daa <processOnSMS+0x1dae>
   16da8:	e1de      	b.n	17168 <processOnSMS+0x216c>
			{
				strcpy(resep_msg,"MOBILE NO:");
   16daa:	230c      	movs	r3, #12
   16dac:	2208      	movs	r2, #8
   16dae:	4694      	mov	ip, r2
   16db0:	44bc      	add	ip, r7
   16db2:	4463      	add	r3, ip
   16db4:	4abf      	ldr	r2, [pc, #764]	; (170b4 <processOnSMS+0x20b8>)
   16db6:	ca03      	ldmia	r2!, {r0, r1}
   16db8:	c303      	stmia	r3!, {r0, r1}
   16dba:	8811      	ldrh	r1, [r2, #0]
   16dbc:	8019      	strh	r1, [r3, #0]
   16dbe:	7892      	ldrb	r2, [r2, #2]
   16dc0:	709a      	strb	r2, [r3, #2]
				strcat(resep_msg,"\n");
   16dc2:	230c      	movs	r3, #12
   16dc4:	2208      	movs	r2, #8
   16dc6:	4694      	mov	ip, r2
   16dc8:	44bc      	add	ip, r7
   16dca:	4463      	add	r3, ip
   16dcc:	0018      	movs	r0, r3
   16dce:	4bb5      	ldr	r3, [pc, #724]	; (170a4 <processOnSMS+0x20a8>)
   16dd0:	4798      	blx	r3
   16dd2:	0003      	movs	r3, r0
   16dd4:	001a      	movs	r2, r3
   16dd6:	230c      	movs	r3, #12
   16dd8:	2108      	movs	r1, #8
   16dda:	468c      	mov	ip, r1
   16ddc:	44bc      	add	ip, r7
   16dde:	4463      	add	r3, ip
   16de0:	189a      	adds	r2, r3, r2
   16de2:	4bb5      	ldr	r3, [pc, #724]	; (170b8 <processOnSMS+0x20bc>)
   16de4:	0010      	movs	r0, r2
   16de6:	0019      	movs	r1, r3
   16de8:	2302      	movs	r3, #2
   16dea:	001a      	movs	r2, r3
   16dec:	4bb3      	ldr	r3, [pc, #716]	; (170bc <processOnSMS+0x20c0>)
   16dee:	4798      	blx	r3
				strcat(resep_msg,received_command);
   16df0:	68fa      	ldr	r2, [r7, #12]
   16df2:	230c      	movs	r3, #12
   16df4:	2108      	movs	r1, #8
   16df6:	468c      	mov	ip, r1
   16df8:	44bc      	add	ip, r7
   16dfa:	4463      	add	r3, ip
   16dfc:	0011      	movs	r1, r2
   16dfe:	0018      	movs	r0, r3
   16e00:	4baf      	ldr	r3, [pc, #700]	; (170c0 <processOnSMS+0x20c4>)
   16e02:	4798      	blx	r3
				strcat(resep_msg,"\n");
   16e04:	230c      	movs	r3, #12
   16e06:	2208      	movs	r2, #8
   16e08:	4694      	mov	ip, r2
   16e0a:	44bc      	add	ip, r7
   16e0c:	4463      	add	r3, ip
   16e0e:	0018      	movs	r0, r3
   16e10:	4ba4      	ldr	r3, [pc, #656]	; (170a4 <processOnSMS+0x20a8>)
   16e12:	4798      	blx	r3
   16e14:	0003      	movs	r3, r0
   16e16:	001a      	movs	r2, r3
   16e18:	230c      	movs	r3, #12
   16e1a:	2108      	movs	r1, #8
   16e1c:	468c      	mov	ip, r1
   16e1e:	44bc      	add	ip, r7
   16e20:	4463      	add	r3, ip
   16e22:	189a      	adds	r2, r3, r2
   16e24:	4ba4      	ldr	r3, [pc, #656]	; (170b8 <processOnSMS+0x20bc>)
   16e26:	0010      	movs	r0, r2
   16e28:	0019      	movs	r1, r3
   16e2a:	2302      	movs	r3, #2
   16e2c:	001a      	movs	r2, r3
   16e2e:	4ba3      	ldr	r3, [pc, #652]	; (170bc <processOnSMS+0x20c0>)
   16e30:	4798      	blx	r3
				strcat(resep_msg,"ADDED SUCCESSFULLY");
   16e32:	230c      	movs	r3, #12
   16e34:	2208      	movs	r2, #8
   16e36:	4694      	mov	ip, r2
   16e38:	44bc      	add	ip, r7
   16e3a:	4463      	add	r3, ip
   16e3c:	0018      	movs	r0, r3
   16e3e:	4b99      	ldr	r3, [pc, #612]	; (170a4 <processOnSMS+0x20a8>)
   16e40:	4798      	blx	r3
   16e42:	0003      	movs	r3, r0
   16e44:	001a      	movs	r2, r3
   16e46:	230c      	movs	r3, #12
   16e48:	2108      	movs	r1, #8
   16e4a:	468c      	mov	ip, r1
   16e4c:	44bc      	add	ip, r7
   16e4e:	4463      	add	r3, ip
   16e50:	189a      	adds	r2, r3, r2
   16e52:	4b9c      	ldr	r3, [pc, #624]	; (170c4 <processOnSMS+0x20c8>)
   16e54:	0010      	movs	r0, r2
   16e56:	0019      	movs	r1, r3
   16e58:	2313      	movs	r3, #19
   16e5a:	001a      	movs	r2, r3
   16e5c:	4b97      	ldr	r3, [pc, #604]	; (170bc <processOnSMS+0x20c0>)
   16e5e:	4798      	blx	r3
   16e60:	e182      	b.n	17168 <processOnSMS+0x216c>
			}
		}
	}
	else if (StringstartsWith(received_command,"M-"))
   16e62:	4a99      	ldr	r2, [pc, #612]	; (170c8 <processOnSMS+0x20cc>)
   16e64:	68fb      	ldr	r3, [r7, #12]
   16e66:	0011      	movs	r1, r2
   16e68:	0018      	movs	r0, r3
   16e6a:	4b8d      	ldr	r3, [pc, #564]	; (170a0 <processOnSMS+0x20a4>)
   16e6c:	4798      	blx	r3
   16e6e:	1e03      	subs	r3, r0, #0
   16e70:	d100      	bne.n	16e74 <processOnSMS+0x1e78>
   16e72:	e091      	b.n	16f98 <processOnSMS+0x1f9c>
	{
		memmove(received_command,received_command+2,strlen(received_command));
   16e74:	68fb      	ldr	r3, [r7, #12]
   16e76:	1c9c      	adds	r4, r3, #2
   16e78:	68fb      	ldr	r3, [r7, #12]
   16e7a:	0018      	movs	r0, r3
   16e7c:	4b89      	ldr	r3, [pc, #548]	; (170a4 <processOnSMS+0x20a8>)
   16e7e:	4798      	blx	r3
   16e80:	0002      	movs	r2, r0
   16e82:	68fb      	ldr	r3, [r7, #12]
   16e84:	0021      	movs	r1, r4
   16e86:	0018      	movs	r0, r3
   16e88:	4b87      	ldr	r3, [pc, #540]	; (170a8 <processOnSMS+0x20ac>)
   16e8a:	4798      	blx	r3
		bool result = removeNumber(received_command);
   16e8c:	2385      	movs	r3, #133	; 0x85
   16e8e:	005b      	lsls	r3, r3, #1
   16e90:	2208      	movs	r2, #8
   16e92:	18ba      	adds	r2, r7, r2
   16e94:	18d4      	adds	r4, r2, r3
   16e96:	68fb      	ldr	r3, [r7, #12]
   16e98:	0018      	movs	r0, r3
   16e9a:	4b8c      	ldr	r3, [pc, #560]	; (170cc <processOnSMS+0x20d0>)
   16e9c:	4798      	blx	r3
   16e9e:	0003      	movs	r3, r0
   16ea0:	7023      	strb	r3, [r4, #0]
		if(result)
   16ea2:	2385      	movs	r3, #133	; 0x85
   16ea4:	005b      	lsls	r3, r3, #1
   16ea6:	2208      	movs	r2, #8
   16ea8:	4694      	mov	ip, r2
   16eaa:	44bc      	add	ip, r7
   16eac:	4463      	add	r3, ip
   16eae:	781b      	ldrb	r3, [r3, #0]
   16eb0:	2b00      	cmp	r3, #0
   16eb2:	d100      	bne.n	16eb6 <processOnSMS+0x1eba>
   16eb4:	e158      	b.n	17168 <processOnSMS+0x216c>
		{
			incomingSMSProcessed=true;
   16eb6:	2328      	movs	r3, #40	; 0x28
   16eb8:	33ff      	adds	r3, #255	; 0xff
   16eba:	2208      	movs	r2, #8
   16ebc:	4694      	mov	ip, r2
   16ebe:	44bc      	add	ip, r7
   16ec0:	4463      	add	r3, ip
   16ec2:	2201      	movs	r2, #1
   16ec4:	701a      	strb	r2, [r3, #0]
			
			if (response_sms_processed_cmd == true)
   16ec6:	4b7a      	ldr	r3, [pc, #488]	; (170b0 <processOnSMS+0x20b4>)
   16ec8:	2294      	movs	r2, #148	; 0x94
   16eca:	0052      	lsls	r2, r2, #1
   16ecc:	4694      	mov	ip, r2
   16ece:	2208      	movs	r2, #8
   16ed0:	4690      	mov	r8, r2
   16ed2:	44b8      	add	r8, r7
   16ed4:	44c4      	add	ip, r8
   16ed6:	4463      	add	r3, ip
   16ed8:	781b      	ldrb	r3, [r3, #0]
   16eda:	2b00      	cmp	r3, #0
   16edc:	d100      	bne.n	16ee0 <processOnSMS+0x1ee4>
   16ede:	e143      	b.n	17168 <processOnSMS+0x216c>
			{
				strcpy(resep_msg,"MOBILE NO:");
   16ee0:	230c      	movs	r3, #12
   16ee2:	2208      	movs	r2, #8
   16ee4:	4694      	mov	ip, r2
   16ee6:	44bc      	add	ip, r7
   16ee8:	4463      	add	r3, ip
   16eea:	4a72      	ldr	r2, [pc, #456]	; (170b4 <processOnSMS+0x20b8>)
   16eec:	ca03      	ldmia	r2!, {r0, r1}
   16eee:	c303      	stmia	r3!, {r0, r1}
   16ef0:	8811      	ldrh	r1, [r2, #0]
   16ef2:	8019      	strh	r1, [r3, #0]
   16ef4:	7892      	ldrb	r2, [r2, #2]
   16ef6:	709a      	strb	r2, [r3, #2]
				strcat(resep_msg,"\n");
   16ef8:	230c      	movs	r3, #12
   16efa:	2208      	movs	r2, #8
   16efc:	4694      	mov	ip, r2
   16efe:	44bc      	add	ip, r7
   16f00:	4463      	add	r3, ip
   16f02:	0018      	movs	r0, r3
   16f04:	4b67      	ldr	r3, [pc, #412]	; (170a4 <processOnSMS+0x20a8>)
   16f06:	4798      	blx	r3
   16f08:	0003      	movs	r3, r0
   16f0a:	001a      	movs	r2, r3
   16f0c:	230c      	movs	r3, #12
   16f0e:	2108      	movs	r1, #8
   16f10:	468c      	mov	ip, r1
   16f12:	44bc      	add	ip, r7
   16f14:	4463      	add	r3, ip
   16f16:	189a      	adds	r2, r3, r2
   16f18:	4b67      	ldr	r3, [pc, #412]	; (170b8 <processOnSMS+0x20bc>)
   16f1a:	0010      	movs	r0, r2
   16f1c:	0019      	movs	r1, r3
   16f1e:	2302      	movs	r3, #2
   16f20:	001a      	movs	r2, r3
   16f22:	4b66      	ldr	r3, [pc, #408]	; (170bc <processOnSMS+0x20c0>)
   16f24:	4798      	blx	r3
				strcat(resep_msg,received_command);
   16f26:	68fa      	ldr	r2, [r7, #12]
   16f28:	230c      	movs	r3, #12
   16f2a:	2108      	movs	r1, #8
   16f2c:	468c      	mov	ip, r1
   16f2e:	44bc      	add	ip, r7
   16f30:	4463      	add	r3, ip
   16f32:	0011      	movs	r1, r2
   16f34:	0018      	movs	r0, r3
   16f36:	4b62      	ldr	r3, [pc, #392]	; (170c0 <processOnSMS+0x20c4>)
   16f38:	4798      	blx	r3
				strcat(resep_msg,"\n");
   16f3a:	230c      	movs	r3, #12
   16f3c:	2208      	movs	r2, #8
   16f3e:	4694      	mov	ip, r2
   16f40:	44bc      	add	ip, r7
   16f42:	4463      	add	r3, ip
   16f44:	0018      	movs	r0, r3
   16f46:	4b57      	ldr	r3, [pc, #348]	; (170a4 <processOnSMS+0x20a8>)
   16f48:	4798      	blx	r3
   16f4a:	0003      	movs	r3, r0
   16f4c:	001a      	movs	r2, r3
   16f4e:	230c      	movs	r3, #12
   16f50:	2108      	movs	r1, #8
   16f52:	468c      	mov	ip, r1
   16f54:	44bc      	add	ip, r7
   16f56:	4463      	add	r3, ip
   16f58:	189a      	adds	r2, r3, r2
   16f5a:	4b57      	ldr	r3, [pc, #348]	; (170b8 <processOnSMS+0x20bc>)
   16f5c:	0010      	movs	r0, r2
   16f5e:	0019      	movs	r1, r3
   16f60:	2302      	movs	r3, #2
   16f62:	001a      	movs	r2, r3
   16f64:	4b55      	ldr	r3, [pc, #340]	; (170bc <processOnSMS+0x20c0>)
   16f66:	4798      	blx	r3
				strcat(resep_msg,"REMOVED SUCCESSFULLY");
   16f68:	230c      	movs	r3, #12
   16f6a:	2208      	movs	r2, #8
   16f6c:	4694      	mov	ip, r2
   16f6e:	44bc      	add	ip, r7
   16f70:	4463      	add	r3, ip
   16f72:	0018      	movs	r0, r3
   16f74:	4b4b      	ldr	r3, [pc, #300]	; (170a4 <processOnSMS+0x20a8>)
   16f76:	4798      	blx	r3
   16f78:	0003      	movs	r3, r0
   16f7a:	001a      	movs	r2, r3
   16f7c:	230c      	movs	r3, #12
   16f7e:	2108      	movs	r1, #8
   16f80:	468c      	mov	ip, r1
   16f82:	44bc      	add	ip, r7
   16f84:	4463      	add	r3, ip
   16f86:	189a      	adds	r2, r3, r2
   16f88:	4b51      	ldr	r3, [pc, #324]	; (170d0 <processOnSMS+0x20d4>)
   16f8a:	0010      	movs	r0, r2
   16f8c:	0019      	movs	r1, r3
   16f8e:	2315      	movs	r3, #21
   16f90:	001a      	movs	r2, r3
   16f92:	4b4a      	ldr	r3, [pc, #296]	; (170bc <processOnSMS+0x20c0>)
   16f94:	4798      	blx	r3
   16f96:	e0e7      	b.n	17168 <processOnSMS+0x216c>
			}
		}
	}
	else if (StringstartsWith(received_command,"AM+"))
   16f98:	4a4e      	ldr	r2, [pc, #312]	; (170d4 <processOnSMS+0x20d8>)
   16f9a:	68fb      	ldr	r3, [r7, #12]
   16f9c:	0011      	movs	r1, r2
   16f9e:	0018      	movs	r0, r3
   16fa0:	4b3f      	ldr	r3, [pc, #252]	; (170a0 <processOnSMS+0x20a4>)
   16fa2:	4798      	blx	r3
   16fa4:	1e03      	subs	r3, r0, #0
   16fa6:	d042      	beq.n	1702e <processOnSMS+0x2032>
	{
		//if (isNumeric(str))
		{
			memmove(received_command,received_command+3,strlen(received_command));
   16fa8:	68fb      	ldr	r3, [r7, #12]
   16faa:	1cdc      	adds	r4, r3, #3
   16fac:	68fb      	ldr	r3, [r7, #12]
   16fae:	0018      	movs	r0, r3
   16fb0:	4b3c      	ldr	r3, [pc, #240]	; (170a4 <processOnSMS+0x20a8>)
   16fb2:	4798      	blx	r3
   16fb4:	0002      	movs	r2, r0
   16fb6:	68fb      	ldr	r3, [r7, #12]
   16fb8:	0021      	movs	r1, r4
   16fba:	0018      	movs	r0, r3
   16fbc:	4b3a      	ldr	r3, [pc, #232]	; (170a8 <processOnSMS+0x20ac>)
   16fbe:	4798      	blx	r3
			bool result  = addAlternateNumber(received_command);
   16fc0:	230a      	movs	r3, #10
   16fc2:	33ff      	adds	r3, #255	; 0xff
   16fc4:	2208      	movs	r2, #8
   16fc6:	18ba      	adds	r2, r7, r2
   16fc8:	18d4      	adds	r4, r2, r3
   16fca:	68fb      	ldr	r3, [r7, #12]
   16fcc:	0018      	movs	r0, r3
   16fce:	4b42      	ldr	r3, [pc, #264]	; (170d8 <processOnSMS+0x20dc>)
   16fd0:	4798      	blx	r3
   16fd2:	0003      	movs	r3, r0
   16fd4:	7023      	strb	r3, [r4, #0]
			incomingSMSProcessed=true;
   16fd6:	2328      	movs	r3, #40	; 0x28
   16fd8:	33ff      	adds	r3, #255	; 0xff
   16fda:	2208      	movs	r2, #8
   16fdc:	4694      	mov	ip, r2
   16fde:	44bc      	add	ip, r7
   16fe0:	4463      	add	r3, ip
   16fe2:	2201      	movs	r2, #1
   16fe4:	701a      	strb	r2, [r3, #0]
			if(result)
   16fe6:	230a      	movs	r3, #10
   16fe8:	33ff      	adds	r3, #255	; 0xff
   16fea:	2208      	movs	r2, #8
   16fec:	4694      	mov	ip, r2
   16fee:	44bc      	add	ip, r7
   16ff0:	4463      	add	r3, ip
   16ff2:	781b      	ldrb	r3, [r3, #0]
   16ff4:	2b00      	cmp	r3, #0
   16ff6:	d100      	bne.n	16ffa <processOnSMS+0x1ffe>
   16ff8:	e0b6      	b.n	17168 <processOnSMS+0x216c>
			{
				if (response_sms_processed_cmd == true)
   16ffa:	4b2d      	ldr	r3, [pc, #180]	; (170b0 <processOnSMS+0x20b4>)
   16ffc:	2294      	movs	r2, #148	; 0x94
   16ffe:	0052      	lsls	r2, r2, #1
   17000:	4694      	mov	ip, r2
   17002:	2208      	movs	r2, #8
   17004:	4690      	mov	r8, r2
   17006:	44b8      	add	r8, r7
   17008:	44c4      	add	ip, r8
   1700a:	4463      	add	r3, ip
   1700c:	781b      	ldrb	r3, [r3, #0]
   1700e:	2b00      	cmp	r3, #0
   17010:	d100      	bne.n	17014 <processOnSMS+0x2018>
   17012:	e0a9      	b.n	17168 <processOnSMS+0x216c>
				{
					strcpy(resep_msg,"ALTERNATE MOBILE NO ADD SUCCESS");
   17014:	230c      	movs	r3, #12
   17016:	2208      	movs	r2, #8
   17018:	4694      	mov	ip, r2
   1701a:	44bc      	add	ip, r7
   1701c:	4463      	add	r3, ip
   1701e:	4a2f      	ldr	r2, [pc, #188]	; (170dc <processOnSMS+0x20e0>)
   17020:	ca13      	ldmia	r2!, {r0, r1, r4}
   17022:	c313      	stmia	r3!, {r0, r1, r4}
   17024:	ca13      	ldmia	r2!, {r0, r1, r4}
   17026:	c313      	stmia	r3!, {r0, r1, r4}
   17028:	ca03      	ldmia	r2!, {r0, r1}
   1702a:	c303      	stmia	r3!, {r0, r1}
   1702c:	e09c      	b.n	17168 <processOnSMS+0x216c>
				}
			}
		}
	}
	else if (StringstartsWith(received_command,"MM+"))
   1702e:	4a2c      	ldr	r2, [pc, #176]	; (170e0 <processOnSMS+0x20e4>)
   17030:	68fb      	ldr	r3, [r7, #12]
   17032:	0011      	movs	r1, r2
   17034:	0018      	movs	r0, r3
   17036:	4b1a      	ldr	r3, [pc, #104]	; (170a0 <processOnSMS+0x20a4>)
   17038:	4798      	blx	r3
   1703a:	1e03      	subs	r3, r0, #0
   1703c:	d056      	beq.n	170ec <processOnSMS+0x20f0>
	{
		//if (isNumeric(str))
		{
			memmove(received_command,received_command+3,strlen(received_command));
   1703e:	68fb      	ldr	r3, [r7, #12]
   17040:	1cdc      	adds	r4, r3, #3
   17042:	68fb      	ldr	r3, [r7, #12]
   17044:	0018      	movs	r0, r3
   17046:	4b17      	ldr	r3, [pc, #92]	; (170a4 <processOnSMS+0x20a8>)
   17048:	4798      	blx	r3
   1704a:	0002      	movs	r2, r0
   1704c:	68fb      	ldr	r3, [r7, #12]
   1704e:	0021      	movs	r1, r4
   17050:	0018      	movs	r0, r3
   17052:	4b15      	ldr	r3, [pc, #84]	; (170a8 <processOnSMS+0x20ac>)
   17054:	4798      	blx	r3
			addM2MNumber(received_command);
   17056:	68fb      	ldr	r3, [r7, #12]
   17058:	0018      	movs	r0, r3
   1705a:	4b22      	ldr	r3, [pc, #136]	; (170e4 <processOnSMS+0x20e8>)
   1705c:	4798      	blx	r3
			incomingSMSProcessed=true;
   1705e:	2328      	movs	r3, #40	; 0x28
   17060:	33ff      	adds	r3, #255	; 0xff
   17062:	2208      	movs	r2, #8
   17064:	4694      	mov	ip, r2
   17066:	44bc      	add	ip, r7
   17068:	4463      	add	r3, ip
   1706a:	2201      	movs	r2, #1
   1706c:	701a      	strb	r2, [r3, #0]

			if (response_sms_processed_cmd == true)
   1706e:	4b10      	ldr	r3, [pc, #64]	; (170b0 <processOnSMS+0x20b4>)
   17070:	2294      	movs	r2, #148	; 0x94
   17072:	0052      	lsls	r2, r2, #1
   17074:	4694      	mov	ip, r2
   17076:	2208      	movs	r2, #8
   17078:	4690      	mov	r8, r2
   1707a:	44b8      	add	r8, r7
   1707c:	44c4      	add	ip, r8
   1707e:	4463      	add	r3, ip
   17080:	781b      	ldrb	r3, [r3, #0]
   17082:	2b00      	cmp	r3, #0
   17084:	d070      	beq.n	17168 <processOnSMS+0x216c>
			{
				strcpy(resep_msg,"M2M NO. ADDED");
   17086:	230c      	movs	r3, #12
   17088:	2208      	movs	r2, #8
   1708a:	4694      	mov	ip, r2
   1708c:	44bc      	add	ip, r7
   1708e:	4463      	add	r3, ip
   17090:	4a15      	ldr	r2, [pc, #84]	; (170e8 <processOnSMS+0x20ec>)
   17092:	ca13      	ldmia	r2!, {r0, r1, r4}
   17094:	c313      	stmia	r3!, {r0, r1, r4}
   17096:	8812      	ldrh	r2, [r2, #0]
   17098:	801a      	strh	r2, [r3, #0]
   1709a:	e065      	b.n	17168 <processOnSMS+0x216c>
   1709c:	0002a12c 	.word	0x0002a12c
   170a0:	00014211 	.word	0x00014211
   170a4:	00028c73 	.word	0x00028c73
   170a8:	000289bf 	.word	0x000289bf
   170ac:	00010ef1 	.word	0x00010ef1
   170b0:	fffffeda 	.word	0xfffffeda
   170b4:	0002a130 	.word	0x0002a130
   170b8:	0002a13c 	.word	0x0002a13c
   170bc:	000289ad 	.word	0x000289ad
   170c0:	00028c2d 	.word	0x00028c2d
   170c4:	0002a140 	.word	0x0002a140
   170c8:	0002a154 	.word	0x0002a154
   170cc:	00010fed 	.word	0x00010fed
   170d0:	0002a158 	.word	0x0002a158
   170d4:	0002a170 	.word	0x0002a170
   170d8:	00011239 	.word	0x00011239
   170dc:	0002a174 	.word	0x0002a174
   170e0:	0002a194 	.word	0x0002a194
   170e4:	00010c49 	.word	0x00010c49
   170e8:	0002a198 	.word	0x0002a198
			}
		}
	}
	
	else if (StringstartsWith(received_command,"MR+"))
   170ec:	4a44      	ldr	r2, [pc, #272]	; (17200 <processOnSMS+0x2204>)
   170ee:	68fb      	ldr	r3, [r7, #12]
   170f0:	0011      	movs	r1, r2
   170f2:	0018      	movs	r0, r3
   170f4:	4b43      	ldr	r3, [pc, #268]	; (17204 <processOnSMS+0x2208>)
   170f6:	4798      	blx	r3
   170f8:	1e03      	subs	r3, r0, #0
   170fa:	d035      	beq.n	17168 <processOnSMS+0x216c>
	{
		//if (isNumeric(str))
		if(factory_settings_parameter_struct.ENABLE_M2M)
   170fc:	4b42      	ldr	r3, [pc, #264]	; (17208 <processOnSMS+0x220c>)
   170fe:	78db      	ldrb	r3, [r3, #3]
   17100:	2b00      	cmp	r3, #0
   17102:	d031      	beq.n	17168 <processOnSMS+0x216c>
		{
			memmove(received_command,received_command+3,strlen(received_command));
   17104:	68fb      	ldr	r3, [r7, #12]
   17106:	1cdc      	adds	r4, r3, #3
   17108:	68fb      	ldr	r3, [r7, #12]
   1710a:	0018      	movs	r0, r3
   1710c:	4b3f      	ldr	r3, [pc, #252]	; (1720c <processOnSMS+0x2210>)
   1710e:	4798      	blx	r3
   17110:	0002      	movs	r2, r0
   17112:	68fb      	ldr	r3, [r7, #12]
   17114:	0021      	movs	r1, r4
   17116:	0018      	movs	r0, r3
   17118:	4b3d      	ldr	r3, [pc, #244]	; (17210 <processOnSMS+0x2214>)
   1711a:	4798      	blx	r3
			incomingSMSProcessed=true;
   1711c:	2328      	movs	r3, #40	; 0x28
   1711e:	33ff      	adds	r3, #255	; 0xff
   17120:	2208      	movs	r2, #8
   17122:	4694      	mov	ip, r2
   17124:	44bc      	add	ip, r7
   17126:	4463      	add	r3, ip
   17128:	2201      	movs	r2, #1
   1712a:	701a      	strb	r2, [r3, #0]
			
			addM2MRemoteNumber(received_command);
   1712c:	68fb      	ldr	r3, [r7, #12]
   1712e:	0018      	movs	r0, r3
   17130:	4b38      	ldr	r3, [pc, #224]	; (17214 <processOnSMS+0x2218>)
   17132:	4798      	blx	r3
			if (response_sms_processed_cmd == true)
   17134:	4b38      	ldr	r3, [pc, #224]	; (17218 <processOnSMS+0x221c>)
   17136:	2294      	movs	r2, #148	; 0x94
   17138:	0052      	lsls	r2, r2, #1
   1713a:	4694      	mov	ip, r2
   1713c:	2208      	movs	r2, #8
   1713e:	4690      	mov	r8, r2
   17140:	44b8      	add	r8, r7
   17142:	44c4      	add	ip, r8
   17144:	4463      	add	r3, ip
   17146:	781b      	ldrb	r3, [r3, #0]
   17148:	2b00      	cmp	r3, #0
   1714a:	d00d      	beq.n	17168 <processOnSMS+0x216c>
			{
				strcpy(resep_msg,"M2M REMOTE NO. ADDED");
   1714c:	230c      	movs	r3, #12
   1714e:	2208      	movs	r2, #8
   17150:	4694      	mov	ip, r2
   17152:	44bc      	add	ip, r7
   17154:	4463      	add	r3, ip
   17156:	4a31      	ldr	r2, [pc, #196]	; (1721c <processOnSMS+0x2220>)
   17158:	ca13      	ldmia	r2!, {r0, r1, r4}
   1715a:	c313      	stmia	r3!, {r0, r1, r4}
   1715c:	ca03      	ldmia	r2!, {r0, r1}
   1715e:	c303      	stmia	r3!, {r0, r1}
   17160:	7812      	ldrb	r2, [r2, #0]
   17162:	701a      	strb	r2, [r3, #0]
   17164:	e000      	b.n	17168 <processOnSMS+0x216c>
		if (alternateNumber_struct.alterNumberPresent)
   17166:	46c0      	nop			; (mov r8, r8)
			}
		}
	}
	
	if (response_sms_processed_cmd == true)
   17168:	4b2b      	ldr	r3, [pc, #172]	; (17218 <processOnSMS+0x221c>)
   1716a:	2294      	movs	r2, #148	; 0x94
   1716c:	0052      	lsls	r2, r2, #1
   1716e:	4694      	mov	ip, r2
   17170:	2208      	movs	r2, #8
   17172:	4690      	mov	r8, r2
   17174:	44b8      	add	r8, r7
   17176:	44c4      	add	ip, r8
   17178:	4463      	add	r3, ip
   1717a:	781b      	ldrb	r3, [r3, #0]
   1717c:	2b00      	cmp	r3, #0
   1717e:	d03a      	beq.n	171f6 <processOnSMS+0x21fa>
	{
		if(!incomingSMSProcessed)
   17180:	2328      	movs	r3, #40	; 0x28
   17182:	33ff      	adds	r3, #255	; 0xff
   17184:	2208      	movs	r2, #8
   17186:	4694      	mov	ip, r2
   17188:	44bc      	add	ip, r7
   1718a:	4463      	add	r3, ip
   1718c:	781b      	ldrb	r3, [r3, #0]
   1718e:	2201      	movs	r2, #1
   17190:	4053      	eors	r3, r2
   17192:	b2db      	uxtb	r3, r3
   17194:	2b00      	cmp	r3, #0
   17196:	d011      	beq.n	171bc <processOnSMS+0x21c0>
		{
			sprintf(resep_msg,"ERROR : %s",*copy_received_command);
   17198:	238c      	movs	r3, #140	; 0x8c
   1719a:	005b      	lsls	r3, r3, #1
   1719c:	2208      	movs	r2, #8
   1719e:	4694      	mov	ip, r2
   171a0:	44bc      	add	ip, r7
   171a2:	4463      	add	r3, ip
   171a4:	681b      	ldr	r3, [r3, #0]
   171a6:	781b      	ldrb	r3, [r3, #0]
   171a8:	001a      	movs	r2, r3
   171aa:	491d      	ldr	r1, [pc, #116]	; (17220 <processOnSMS+0x2224>)
   171ac:	230c      	movs	r3, #12
   171ae:	2008      	movs	r0, #8
   171b0:	4684      	mov	ip, r0
   171b2:	44bc      	add	ip, r7
   171b4:	4463      	add	r3, ip
   171b6:	0018      	movs	r0, r3
   171b8:	4b1a      	ldr	r3, [pc, #104]	; (17224 <processOnSMS+0x2228>)
   171ba:	4798      	blx	r3
		}
		setCallStateOnLCD(LCDCALLSTATE_OUTGOINGSMS,phone_number,false);
   171bc:	23a0      	movs	r3, #160	; 0xa0
   171be:	005b      	lsls	r3, r3, #1
   171c0:	2208      	movs	r2, #8
   171c2:	4694      	mov	ip, r2
   171c4:	44bc      	add	ip, r7
   171c6:	4463      	add	r3, ip
   171c8:	681b      	ldr	r3, [r3, #0]
   171ca:	2200      	movs	r2, #0
   171cc:	0019      	movs	r1, r3
   171ce:	2005      	movs	r0, #5
   171d0:	4b15      	ldr	r3, [pc, #84]	; (17228 <processOnSMS+0x222c>)
   171d2:	4798      	blx	r3
		gsm_send_sms(phone_number,resep_msg);
   171d4:	230c      	movs	r3, #12
   171d6:	2208      	movs	r2, #8
   171d8:	18ba      	adds	r2, r7, r2
   171da:	18d2      	adds	r2, r2, r3
   171dc:	23a0      	movs	r3, #160	; 0xa0
   171de:	005b      	lsls	r3, r3, #1
   171e0:	2108      	movs	r1, #8
   171e2:	468c      	mov	ip, r1
   171e4:	44bc      	add	ip, r7
   171e6:	4463      	add	r3, ip
   171e8:	681b      	ldr	r3, [r3, #0]
   171ea:	0011      	movs	r1, r2
   171ec:	0018      	movs	r0, r3
   171ee:	4b0f      	ldr	r3, [pc, #60]	; (1722c <processOnSMS+0x2230>)
   171f0:	4798      	blx	r3
   171f2:	e000      	b.n	171f6 <processOnSMS+0x21fa>
		return;
   171f4:	46c0      	nop			; (mov r8, r8)
	}
}
   171f6:	46bd      	mov	sp, r7
   171f8:	b04c      	add	sp, #304	; 0x130
   171fa:	bc04      	pop	{r2}
   171fc:	4690      	mov	r8, r2
   171fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
   17200:	0002a1a8 	.word	0x0002a1a8
   17204:	00014211 	.word	0x00014211
   17208:	2000062c 	.word	0x2000062c
   1720c:	00028c73 	.word	0x00028c73
   17210:	000289bf 	.word	0x000289bf
   17214:	00010cb1 	.word	0x00010cb1
   17218:	fffffeda 	.word	0xfffffeda
   1721c:	0002a1ac 	.word	0x0002a1ac
   17220:	0002a1c4 	.word	0x0002a1c4
   17224:	00028be9 	.word	0x00028be9
   17228:	0001ce41 	.word	0x0001ce41
   1722c:	00012b89 	.word	0x00012b89

00017230 <buildStatusMessage>:

void buildStatusMessage(char *resep_msg)
{
   17230:	b5f0      	push	{r4, r5, r6, r7, lr}
   17232:	b091      	sub	sp, #68	; 0x44
   17234:	af06      	add	r7, sp, #24
   17236:	6078      	str	r0, [r7, #4]
	uint8_t network= gsm_getsignalstrength();
   17238:	2327      	movs	r3, #39	; 0x27
   1723a:	18fc      	adds	r4, r7, r3
   1723c:	4b32      	ldr	r3, [pc, #200]	; (17308 <buildStatusMessage+0xd8>)
   1723e:	4798      	blx	r3
   17240:	0003      	movs	r3, r0
   17242:	7023      	strb	r3, [r4, #0]
	char strACState[10],strSeq[7],strMotor[5];
	switch(structThreePhase_state.u8t_phase_ac_state)
   17244:	4b31      	ldr	r3, [pc, #196]	; (1730c <buildStatusMessage+0xdc>)
   17246:	785b      	ldrb	r3, [r3, #1]
   17248:	b2db      	uxtb	r3, r3
   1724a:	2b02      	cmp	r3, #2
   1724c:	d009      	beq.n	17262 <buildStatusMessage+0x32>
   1724e:	2b03      	cmp	r3, #3
   17250:	d10d      	bne.n	1726e <buildStatusMessage+0x3e>
	{
		case AC_3PH:
		sprintf(strACState,(const uint8_t*)("ON"));
   17252:	231c      	movs	r3, #28
   17254:	18fb      	adds	r3, r7, r3
   17256:	4a2e      	ldr	r2, [pc, #184]	; (17310 <buildStatusMessage+0xe0>)
   17258:	8811      	ldrh	r1, [r2, #0]
   1725a:	8019      	strh	r1, [r3, #0]
   1725c:	7892      	ldrb	r2, [r2, #2]
   1725e:	709a      	strb	r2, [r3, #2]
		break;
   17260:	e00a      	b.n	17278 <buildStatusMessage+0x48>
		case AC_2PH:
		sprintf(strACState,(const uint8_t*)("2 PHASE"));
   17262:	231c      	movs	r3, #28
   17264:	18fb      	adds	r3, r7, r3
   17266:	4a2b      	ldr	r2, [pc, #172]	; (17314 <buildStatusMessage+0xe4>)
   17268:	ca03      	ldmia	r2!, {r0, r1}
   1726a:	c303      	stmia	r3!, {r0, r1}
		break;
   1726c:	e004      	b.n	17278 <buildStatusMessage+0x48>
		default:
		sprintf(strACState,(const uint8_t*)("OFF"));
   1726e:	231c      	movs	r3, #28
   17270:	18fb      	adds	r3, r7, r3
   17272:	4a29      	ldr	r2, [pc, #164]	; (17318 <buildStatusMessage+0xe8>)
   17274:	601a      	str	r2, [r3, #0]
		break;
   17276:	46c0      	nop			; (mov r8, r8)
	}
	
	if(structThreePhase_state.u8t_phase_sequence_flag == THREEPHASE_OK)
   17278:	4b24      	ldr	r3, [pc, #144]	; (1730c <buildStatusMessage+0xdc>)
   1727a:	781b      	ldrb	r3, [r3, #0]
   1727c:	b2db      	uxtb	r3, r3
   1727e:	2b02      	cmp	r3, #2
   17280:	d107      	bne.n	17292 <buildStatusMessage+0x62>
	{
		sprintf(strSeq,(const uint8_t*)("OK"));
   17282:	2314      	movs	r3, #20
   17284:	18fb      	adds	r3, r7, r3
   17286:	4a25      	ldr	r2, [pc, #148]	; (1731c <buildStatusMessage+0xec>)
   17288:	8811      	ldrh	r1, [r2, #0]
   1728a:	8019      	strh	r1, [r3, #0]
   1728c:	7892      	ldrb	r2, [r2, #2]
   1728e:	709a      	strb	r2, [r3, #2]
   17290:	e006      	b.n	172a0 <buildStatusMessage+0x70>
	}
	else
	{
		sprintf(strSeq,(const uint8_t*)("ERROR"));
   17292:	2314      	movs	r3, #20
   17294:	18fb      	adds	r3, r7, r3
   17296:	4a22      	ldr	r2, [pc, #136]	; (17320 <buildStatusMessage+0xf0>)
   17298:	6811      	ldr	r1, [r2, #0]
   1729a:	6019      	str	r1, [r3, #0]
   1729c:	8892      	ldrh	r2, [r2, #4]
   1729e:	809a      	strh	r2, [r3, #4]
	}
	
	if(getMotorState())
   172a0:	4b20      	ldr	r3, [pc, #128]	; (17324 <buildStatusMessage+0xf4>)
   172a2:	4798      	blx	r3
   172a4:	1e03      	subs	r3, r0, #0
   172a6:	d007      	beq.n	172b8 <buildStatusMessage+0x88>
	{
		sprintf(strMotor,(const uint8_t*)("ON"));
   172a8:	230c      	movs	r3, #12
   172aa:	18fb      	adds	r3, r7, r3
   172ac:	4a18      	ldr	r2, [pc, #96]	; (17310 <buildStatusMessage+0xe0>)
   172ae:	8811      	ldrh	r1, [r2, #0]
   172b0:	8019      	strh	r1, [r3, #0]
   172b2:	7892      	ldrb	r2, [r2, #2]
   172b4:	709a      	strb	r2, [r3, #2]
   172b6:	e003      	b.n	172c0 <buildStatusMessage+0x90>
	}
	else
	{
		sprintf(strMotor,(const uint8_t*)("OFF"));
   172b8:	230c      	movs	r3, #12
   172ba:	18fb      	adds	r3, r7, r3
   172bc:	4a16      	ldr	r2, [pc, #88]	; (17318 <buildStatusMessage+0xe8>)
   172be:	601a      	str	r2, [r3, #0]
	}
	
	sprintf(resep_msg,"RY: %d YB: %d BR: %d\nAC: %s\nSequence: %s\nMotor: %s\nCurrent: %dA\nNetwork: %d",
   172c0:	4b19      	ldr	r3, [pc, #100]	; (17328 <buildStatusMessage+0xf8>)
   172c2:	681c      	ldr	r4, [r3, #0]
   172c4:	4b18      	ldr	r3, [pc, #96]	; (17328 <buildStatusMessage+0xf8>)
   172c6:	685d      	ldr	r5, [r3, #4]
   172c8:	4b17      	ldr	r3, [pc, #92]	; (17328 <buildStatusMessage+0xf8>)
   172ca:	689b      	ldr	r3, [r3, #8]
	Analog_Parameter_Struct.PhaseRY_Voltage,Analog_Parameter_Struct.PhaseYB_Voltage,Analog_Parameter_Struct.PhaseBR_Voltage,
	strACState,strSeq,strMotor,Analog_Parameter_Struct.Motor_Current_IntPart,network);
   172cc:	4a16      	ldr	r2, [pc, #88]	; (17328 <buildStatusMessage+0xf8>)
   172ce:	8a92      	ldrh	r2, [r2, #20]
   172d0:	b292      	uxth	r2, r2
	sprintf(resep_msg,"RY: %d YB: %d BR: %d\nAC: %s\nSequence: %s\nMotor: %s\nCurrent: %dA\nNetwork: %d",
   172d2:	0016      	movs	r6, r2
   172d4:	2227      	movs	r2, #39	; 0x27
   172d6:	18ba      	adds	r2, r7, r2
   172d8:	7812      	ldrb	r2, [r2, #0]
   172da:	4914      	ldr	r1, [pc, #80]	; (1732c <buildStatusMessage+0xfc>)
   172dc:	6878      	ldr	r0, [r7, #4]
   172de:	9205      	str	r2, [sp, #20]
   172e0:	9604      	str	r6, [sp, #16]
   172e2:	220c      	movs	r2, #12
   172e4:	18ba      	adds	r2, r7, r2
   172e6:	9203      	str	r2, [sp, #12]
   172e8:	2214      	movs	r2, #20
   172ea:	18ba      	adds	r2, r7, r2
   172ec:	9202      	str	r2, [sp, #8]
   172ee:	221c      	movs	r2, #28
   172f0:	18ba      	adds	r2, r7, r2
   172f2:	9201      	str	r2, [sp, #4]
   172f4:	9300      	str	r3, [sp, #0]
   172f6:	002b      	movs	r3, r5
   172f8:	0022      	movs	r2, r4
   172fa:	4c0d      	ldr	r4, [pc, #52]	; (17330 <buildStatusMessage+0x100>)
   172fc:	47a0      	blx	r4
}
   172fe:	46c0      	nop			; (mov r8, r8)
   17300:	46bd      	mov	sp, r7
   17302:	b00b      	add	sp, #44	; 0x2c
   17304:	bdf0      	pop	{r4, r5, r6, r7, pc}
   17306:	46c0      	nop			; (mov r8, r8)
   17308:	000128e1 	.word	0x000128e1
   1730c:	20000748 	.word	0x20000748
   17310:	0002a1d0 	.word	0x0002a1d0
   17314:	0002a1d4 	.word	0x0002a1d4
   17318:	0046464f 	.word	0x0046464f
   1731c:	0002a1dc 	.word	0x0002a1dc
   17320:	0002a1e0 	.word	0x0002a1e0
   17324:	0001af25 	.word	0x0001af25
   17328:	200006e8 	.word	0x200006e8
   1732c:	0002a1e8 	.word	0x0002a1e8
   17330:	00028be9 	.word	0x00028be9

00017334 <checkNumber>:


bool checkNumber(char *number)
{
   17334:	b580      	push	{r7, lr}
   17336:	b082      	sub	sp, #8
   17338:	af00      	add	r7, sp, #0
   1733a:	6078      	str	r0, [r7, #4]
	if ((isAdmin(number)) || (checkExists(number)<user_count_struct.total_user_no_count))
   1733c:	687b      	ldr	r3, [r7, #4]
   1733e:	0018      	movs	r0, r3
   17340:	4b0a      	ldr	r3, [pc, #40]	; (1736c <checkNumber+0x38>)
   17342:	4798      	blx	r3
   17344:	1e03      	subs	r3, r0, #0
   17346:	d109      	bne.n	1735c <checkNumber+0x28>
   17348:	687b      	ldr	r3, [r7, #4]
   1734a:	0018      	movs	r0, r3
   1734c:	4b08      	ldr	r3, [pc, #32]	; (17370 <checkNumber+0x3c>)
   1734e:	4798      	blx	r3
   17350:	0003      	movs	r3, r0
   17352:	001a      	movs	r2, r3
   17354:	4b07      	ldr	r3, [pc, #28]	; (17374 <checkNumber+0x40>)
   17356:	785b      	ldrb	r3, [r3, #1]
   17358:	429a      	cmp	r2, r3
   1735a:	d201      	bcs.n	17360 <checkNumber+0x2c>
	{
		return true;
   1735c:	2301      	movs	r3, #1
   1735e:	e000      	b.n	17362 <checkNumber+0x2e>
	}
	else
	{
		return false;
   17360:	2300      	movs	r3, #0
	}
}
   17362:	0018      	movs	r0, r3
   17364:	46bd      	mov	sp, r7
   17366:	b002      	add	sp, #8
   17368:	bd80      	pop	{r7, pc}
   1736a:	46c0      	nop			; (mov r8, r8)
   1736c:	00011a79 	.word	0x00011a79
   17370:	00010ded 	.word	0x00010ded
   17374:	20000614 	.word	0x20000614

00017378 <checkNoCallTime>:

bool checkNoCallTime(void)
{
   17378:	b580      	push	{r7, lr}
   1737a:	b082      	sub	sp, #8
   1737c:	af00      	add	r7, sp, #0
	uint8_t globalHours, globalMinutes;
	getSystemTime(&globalHours,&globalMinutes);
   1737e:	1dba      	adds	r2, r7, #6
   17380:	1dfb      	adds	r3, r7, #7
   17382:	0011      	movs	r1, r2
   17384:	0018      	movs	r0, r3
   17386:	4b31      	ldr	r3, [pc, #196]	; (1744c <checkNoCallTime+0xd4>)
   17388:	4798      	blx	r3
	if(globalHours >= (user_settings_parameter_struct.noCallStartTimeHourAddress) && globalHours <=(user_settings_parameter_struct.noCallStopTimeHourAddress))
   1738a:	4b31      	ldr	r3, [pc, #196]	; (17450 <checkNoCallTime+0xd8>)
   1738c:	7a9b      	ldrb	r3, [r3, #10]
   1738e:	b2da      	uxtb	r2, r3
   17390:	1dfb      	adds	r3, r7, #7
   17392:	781b      	ldrb	r3, [r3, #0]
   17394:	429a      	cmp	r2, r3
   17396:	d854      	bhi.n	17442 <checkNoCallTime+0xca>
   17398:	4b2d      	ldr	r3, [pc, #180]	; (17450 <checkNoCallTime+0xd8>)
   1739a:	7b1b      	ldrb	r3, [r3, #12]
   1739c:	b2da      	uxtb	r2, r3
   1739e:	1dfb      	adds	r3, r7, #7
   173a0:	781b      	ldrb	r3, [r3, #0]
   173a2:	429a      	cmp	r2, r3
   173a4:	d34d      	bcc.n	17442 <checkNoCallTime+0xca>
	{
		if(user_settings_parameter_struct.noCallStartTimeHourAddress==user_settings_parameter_struct.noCallStopTimeHourAddress)
   173a6:	4b2a      	ldr	r3, [pc, #168]	; (17450 <checkNoCallTime+0xd8>)
   173a8:	7a9b      	ldrb	r3, [r3, #10]
   173aa:	b2da      	uxtb	r2, r3
   173ac:	4b28      	ldr	r3, [pc, #160]	; (17450 <checkNoCallTime+0xd8>)
   173ae:	7b1b      	ldrb	r3, [r3, #12]
   173b0:	b2db      	uxtb	r3, r3
   173b2:	429a      	cmp	r2, r3
   173b4:	d111      	bne.n	173da <checkNoCallTime+0x62>
		{
			if(globalMinutes>=(user_settings_parameter_struct.noCallStartTimeMinuteAddress) && globalMinutes<=(user_settings_parameter_struct.noCallStopTimeMinuteAddress))
   173b6:	4b26      	ldr	r3, [pc, #152]	; (17450 <checkNoCallTime+0xd8>)
   173b8:	7adb      	ldrb	r3, [r3, #11]
   173ba:	b2da      	uxtb	r2, r3
   173bc:	1dbb      	adds	r3, r7, #6
   173be:	781b      	ldrb	r3, [r3, #0]
   173c0:	429a      	cmp	r2, r3
   173c2:	d808      	bhi.n	173d6 <checkNoCallTime+0x5e>
   173c4:	4b22      	ldr	r3, [pc, #136]	; (17450 <checkNoCallTime+0xd8>)
   173c6:	7b5b      	ldrb	r3, [r3, #13]
   173c8:	b2da      	uxtb	r2, r3
   173ca:	1dbb      	adds	r3, r7, #6
   173cc:	781b      	ldrb	r3, [r3, #0]
   173ce:	429a      	cmp	r2, r3
   173d0:	d301      	bcc.n	173d6 <checkNoCallTime+0x5e>
			return true;
   173d2:	2301      	movs	r3, #1
   173d4:	e036      	b.n	17444 <checkNoCallTime+0xcc>
			else
			return false;
   173d6:	2300      	movs	r3, #0
   173d8:	e034      	b.n	17444 <checkNoCallTime+0xcc>
		}
		if(globalHours==user_settings_parameter_struct.noCallStartTimeHourAddress)
   173da:	4b1d      	ldr	r3, [pc, #116]	; (17450 <checkNoCallTime+0xd8>)
   173dc:	7a9b      	ldrb	r3, [r3, #10]
   173de:	b2da      	uxtb	r2, r3
   173e0:	1dfb      	adds	r3, r7, #7
   173e2:	781b      	ldrb	r3, [r3, #0]
   173e4:	429a      	cmp	r2, r3
   173e6:	d10a      	bne.n	173fe <checkNoCallTime+0x86>
		{
			if(globalMinutes>=user_settings_parameter_struct.noCallStartTimeMinuteAddress)
   173e8:	4b19      	ldr	r3, [pc, #100]	; (17450 <checkNoCallTime+0xd8>)
   173ea:	7adb      	ldrb	r3, [r3, #11]
   173ec:	b2da      	uxtb	r2, r3
   173ee:	1dbb      	adds	r3, r7, #6
   173f0:	781b      	ldrb	r3, [r3, #0]
   173f2:	429a      	cmp	r2, r3
   173f4:	d801      	bhi.n	173fa <checkNoCallTime+0x82>
			return true;
   173f6:	2301      	movs	r3, #1
   173f8:	e024      	b.n	17444 <checkNoCallTime+0xcc>
			else
			return false;
   173fa:	2300      	movs	r3, #0
   173fc:	e022      	b.n	17444 <checkNoCallTime+0xcc>
		}
		if(globalHours==user_settings_parameter_struct.noCallStopTimeHourAddress)
   173fe:	4b14      	ldr	r3, [pc, #80]	; (17450 <checkNoCallTime+0xd8>)
   17400:	7b1b      	ldrb	r3, [r3, #12]
   17402:	b2da      	uxtb	r2, r3
   17404:	1dfb      	adds	r3, r7, #7
   17406:	781b      	ldrb	r3, [r3, #0]
   17408:	429a      	cmp	r2, r3
   1740a:	d10a      	bne.n	17422 <checkNoCallTime+0xaa>
		{
			if(globalMinutes<=(user_settings_parameter_struct.noCallStopTimeMinuteAddress))
   1740c:	4b10      	ldr	r3, [pc, #64]	; (17450 <checkNoCallTime+0xd8>)
   1740e:	7b5b      	ldrb	r3, [r3, #13]
   17410:	b2da      	uxtb	r2, r3
   17412:	1dbb      	adds	r3, r7, #6
   17414:	781b      	ldrb	r3, [r3, #0]
   17416:	429a      	cmp	r2, r3
   17418:	d301      	bcc.n	1741e <checkNoCallTime+0xa6>
			return true;
   1741a:	2301      	movs	r3, #1
   1741c:	e012      	b.n	17444 <checkNoCallTime+0xcc>
			else
			return false;
   1741e:	2300      	movs	r3, #0
   17420:	e010      	b.n	17444 <checkNoCallTime+0xcc>
		}
		if(globalHours > (user_settings_parameter_struct.noCallStartTimeHourAddress) && globalHours < (user_settings_parameter_struct.noCallStopTimeHourAddress))
   17422:	4b0b      	ldr	r3, [pc, #44]	; (17450 <checkNoCallTime+0xd8>)
   17424:	7a9b      	ldrb	r3, [r3, #10]
   17426:	b2da      	uxtb	r2, r3
   17428:	1dfb      	adds	r3, r7, #7
   1742a:	781b      	ldrb	r3, [r3, #0]
   1742c:	429a      	cmp	r2, r3
   1742e:	d208      	bcs.n	17442 <checkNoCallTime+0xca>
   17430:	4b07      	ldr	r3, [pc, #28]	; (17450 <checkNoCallTime+0xd8>)
   17432:	7b1b      	ldrb	r3, [r3, #12]
   17434:	b2da      	uxtb	r2, r3
   17436:	1dfb      	adds	r3, r7, #7
   17438:	781b      	ldrb	r3, [r3, #0]
   1743a:	429a      	cmp	r2, r3
   1743c:	d901      	bls.n	17442 <checkNoCallTime+0xca>
		return true;
   1743e:	2301      	movs	r3, #1
   17440:	e000      	b.n	17444 <checkNoCallTime+0xcc>
	}
	return false;
   17442:	2300      	movs	r3, #0
}
   17444:	0018      	movs	r0, r3
   17446:	46bd      	mov	sp, r7
   17448:	b002      	add	sp, #8
   1744a:	bd80      	pop	{r7, pc}
   1744c:	0001768d 	.word	0x0001768d
   17450:	20000654 	.word	0x20000654

00017454 <verifyRemoteNumber>:

void verifyRemoteNumber(void)
{
   17454:	b580      	push	{r7, lr}
   17456:	af00      	add	r7, sp, #0
	sendSMS(("VMM01"),true,SEND_TO_M2M_REMOTE);
   17458:	4b04      	ldr	r3, [pc, #16]	; (1746c <verifyRemoteNumber+0x18>)
   1745a:	2201      	movs	r2, #1
   1745c:	2101      	movs	r1, #1
   1745e:	0018      	movs	r0, r3
   17460:	4b03      	ldr	r3, [pc, #12]	; (17470 <verifyRemoteNumber+0x1c>)
   17462:	4798      	blx	r3
}
   17464:	46c0      	nop			; (mov r8, r8)
   17466:	46bd      	mov	sp, r7
   17468:	bd80      	pop	{r7, pc}
   1746a:	46c0      	nop			; (mov r8, r8)
   1746c:	0002a234 	.word	0x0002a234
   17470:	00017475 	.word	0x00017475

00017474 <sendSMS>:

void sendSMS(char *msg, bool predefMsg, uint8_t isM2M)  ////void sendSMS(char *msg, bool predefMsg = false, uint8_t isM2M);
{
   17474:	b580      	push	{r7, lr}
   17476:	b08e      	sub	sp, #56	; 0x38
   17478:	af00      	add	r7, sp, #0
   1747a:	6078      	str	r0, [r7, #4]
   1747c:	0008      	movs	r0, r1
   1747e:	0011      	movs	r1, r2
   17480:	1cfb      	adds	r3, r7, #3
   17482:	1c02      	adds	r2, r0, #0
   17484:	701a      	strb	r2, [r3, #0]
   17486:	1cbb      	adds	r3, r7, #2
   17488:	1c0a      	adds	r2, r1, #0
   1748a:	701a      	strb	r2, [r3, #0]
	inCall=true;
   1748c:	4b55      	ldr	r3, [pc, #340]	; (175e4 <sendSMS+0x170>)
   1748e:	2201      	movs	r2, #1
   17490:	701a      	strb	r2, [r3, #0]
	if (!predefMsg)
   17492:	1cfb      	adds	r3, r7, #3
   17494:	781b      	ldrb	r3, [r3, #0]
   17496:	2201      	movs	r2, #1
   17498:	4053      	eors	r3, r2
   1749a:	b2db      	uxtb	r3, r3
   1749c:	2b00      	cmp	r3, #0
   1749e:	d048      	beq.n	17532 <sendSMS+0xbe>
	{
		switch(actionType)
   174a0:	4b51      	ldr	r3, [pc, #324]	; (175e8 <sendSMS+0x174>)
   174a2:	781b      	ldrb	r3, [r3, #0]
   174a4:	3b43      	subs	r3, #67	; 0x43
   174a6:	2b12      	cmp	r3, #18
   174a8:	d900      	bls.n	174ac <sendSMS+0x38>
   174aa:	e096      	b.n	175da <sendSMS+0x166>
   174ac:	009a      	lsls	r2, r3, #2
   174ae:	4b4f      	ldr	r3, [pc, #316]	; (175ec <sendSMS+0x178>)
   174b0:	18d3      	adds	r3, r2, r3
   174b2:	681b      	ldr	r3, [r3, #0]
   174b4:	469f      	mov	pc, r3
		{
			case 'S':
			strcat(msg,STR_MOTOR);
   174b6:	687b      	ldr	r3, [r7, #4]
   174b8:	0018      	movs	r0, r3
   174ba:	4b4d      	ldr	r3, [pc, #308]	; (175f0 <sendSMS+0x17c>)
   174bc:	4798      	blx	r3
   174be:	0003      	movs	r3, r0
   174c0:	001a      	movs	r2, r3
   174c2:	687b      	ldr	r3, [r7, #4]
   174c4:	189a      	adds	r2, r3, r2
   174c6:	4b4b      	ldr	r3, [pc, #300]	; (175f4 <sendSMS+0x180>)
   174c8:	0010      	movs	r0, r2
   174ca:	0019      	movs	r1, r3
   174cc:	2307      	movs	r3, #7
   174ce:	001a      	movs	r2, r3
   174d0:	4b49      	ldr	r3, [pc, #292]	; (175f8 <sendSMS+0x184>)
   174d2:	4798      	blx	r3
			strcat(msg,STR_ON);
   174d4:	687b      	ldr	r3, [r7, #4]
   174d6:	0018      	movs	r0, r3
   174d8:	4b45      	ldr	r3, [pc, #276]	; (175f0 <sendSMS+0x17c>)
   174da:	4798      	blx	r3
   174dc:	0003      	movs	r3, r0
   174de:	001a      	movs	r2, r3
   174e0:	687b      	ldr	r3, [r7, #4]
   174e2:	189a      	adds	r2, r3, r2
   174e4:	4b45      	ldr	r3, [pc, #276]	; (175fc <sendSMS+0x188>)
   174e6:	0010      	movs	r0, r2
   174e8:	0019      	movs	r1, r3
   174ea:	2303      	movs	r3, #3
   174ec:	001a      	movs	r2, r3
   174ee:	4b42      	ldr	r3, [pc, #264]	; (175f8 <sendSMS+0x184>)
   174f0:	4798      	blx	r3
			break;
   174f2:	e01e      	b.n	17532 <sendSMS+0xbe>
			case 'O':
			case 'U':
			case 'C':
			case 'F':
			strcat(msg,STR_MOTOR);
   174f4:	687b      	ldr	r3, [r7, #4]
   174f6:	0018      	movs	r0, r3
   174f8:	4b3d      	ldr	r3, [pc, #244]	; (175f0 <sendSMS+0x17c>)
   174fa:	4798      	blx	r3
   174fc:	0003      	movs	r3, r0
   174fe:	001a      	movs	r2, r3
   17500:	687b      	ldr	r3, [r7, #4]
   17502:	189a      	adds	r2, r3, r2
   17504:	4b3b      	ldr	r3, [pc, #236]	; (175f4 <sendSMS+0x180>)
   17506:	0010      	movs	r0, r2
   17508:	0019      	movs	r1, r3
   1750a:	2307      	movs	r3, #7
   1750c:	001a      	movs	r2, r3
   1750e:	4b3a      	ldr	r3, [pc, #232]	; (175f8 <sendSMS+0x184>)
   17510:	4798      	blx	r3
			strcat(msg,STR_OFF);
   17512:	687b      	ldr	r3, [r7, #4]
   17514:	0018      	movs	r0, r3
   17516:	4b36      	ldr	r3, [pc, #216]	; (175f0 <sendSMS+0x17c>)
   17518:	4798      	blx	r3
   1751a:	0003      	movs	r3, r0
   1751c:	001a      	movs	r2, r3
   1751e:	687b      	ldr	r3, [r7, #4]
   17520:	189a      	adds	r2, r3, r2
   17522:	4b37      	ldr	r3, [pc, #220]	; (17600 <sendSMS+0x18c>)
   17524:	0010      	movs	r0, r2
   17526:	0019      	movs	r1, r3
   17528:	2304      	movs	r3, #4
   1752a:	001a      	movs	r2, r3
   1752c:	4b32      	ldr	r3, [pc, #200]	; (175f8 <sendSMS+0x184>)
   1752e:	4798      	blx	r3
			break;
   17530:	46c0      	nop			; (mov r8, r8)
		}
	}
	
	char phone_number[20];
	
	if(isM2M==SEND_TO_M2M_MASTER)
   17532:	1cbb      	adds	r3, r7, #2
   17534:	781b      	ldrb	r3, [r3, #0]
   17536:	2b02      	cmp	r3, #2
   17538:	d105      	bne.n	17546 <sendSMS+0xd2>
	{
		getM2MNumber(phone_number);
   1753a:	2324      	movs	r3, #36	; 0x24
   1753c:	18fb      	adds	r3, r7, r3
   1753e:	0018      	movs	r0, r3
   17540:	4b30      	ldr	r3, [pc, #192]	; (17604 <sendSMS+0x190>)
   17542:	4798      	blx	r3
   17544:	e034      	b.n	175b0 <sendSMS+0x13c>
	}
	else if (isM2M==SEND_TO_M2M_REMOTE)
   17546:	1cbb      	adds	r3, r7, #2
   17548:	781b      	ldrb	r3, [r3, #0]
   1754a:	2b01      	cmp	r3, #1
   1754c:	d109      	bne.n	17562 <sendSMS+0xee>
	{
		if (factory_settings_parameter_struct.ENABLE_M2M)
   1754e:	4b2e      	ldr	r3, [pc, #184]	; (17608 <sendSMS+0x194>)
   17550:	78db      	ldrb	r3, [r3, #3]
   17552:	2b00      	cmp	r3, #0
   17554:	d02c      	beq.n	175b0 <sendSMS+0x13c>
		{
			getM2MRemoteNumber(phone_number);
   17556:	2324      	movs	r3, #36	; 0x24
   17558:	18fb      	adds	r3, r7, r3
   1755a:	0018      	movs	r0, r3
   1755c:	4b2b      	ldr	r3, [pc, #172]	; (1760c <sendSMS+0x198>)
   1755e:	4798      	blx	r3
   17560:	e026      	b.n	175b0 <sendSMS+0x13c>
		}
	}
	else
	{
		if (isMsgFromAdmin)
   17562:	4b2b      	ldr	r3, [pc, #172]	; (17610 <sendSMS+0x19c>)
   17564:	781b      	ldrb	r3, [r3, #0]
   17566:	2b00      	cmp	r3, #0
   17568:	d01d      	beq.n	175a6 <sendSMS+0x132>
		{
			struct mobile_no_struct mobile_no;
			memset(page_data, '\0', sizeof(page_data));
   1756a:	4b2a      	ldr	r3, [pc, #168]	; (17614 <sendSMS+0x1a0>)
   1756c:	223c      	movs	r2, #60	; 0x3c
   1756e:	2100      	movs	r1, #0
   17570:	0018      	movs	r0, r3
   17572:	4b29      	ldr	r3, [pc, #164]	; (17618 <sendSMS+0x1a4>)
   17574:	4798      	blx	r3
			eeprom_emulator_read_page(ADMIN_1_MOBILE_NUMBER_PAGE, page_data);
   17576:	4b27      	ldr	r3, [pc, #156]	; (17614 <sendSMS+0x1a0>)
   17578:	0019      	movs	r1, r3
   1757a:	2003      	movs	r0, #3
   1757c:	4b27      	ldr	r3, [pc, #156]	; (1761c <sendSMS+0x1a8>)
   1757e:	4798      	blx	r3
			memcpy(&mobile_no,page_data,sizeof(mobile_no));
   17580:	230c      	movs	r3, #12
   17582:	18fa      	adds	r2, r7, r3
   17584:	4b23      	ldr	r3, [pc, #140]	; (17614 <sendSMS+0x1a0>)
   17586:	0010      	movs	r0, r2
   17588:	0019      	movs	r1, r3
   1758a:	2318      	movs	r3, #24
   1758c:	001a      	movs	r2, r3
   1758e:	4b1a      	ldr	r3, [pc, #104]	; (175f8 <sendSMS+0x184>)
   17590:	4798      	blx	r3
			strcpy(phone_number,mobile_no.mobile_no_ee);
   17592:	230c      	movs	r3, #12
   17594:	18fb      	adds	r3, r7, r3
   17596:	1d1a      	adds	r2, r3, #4
   17598:	2324      	movs	r3, #36	; 0x24
   1759a:	18fb      	adds	r3, r7, r3
   1759c:	0011      	movs	r1, r2
   1759e:	0018      	movs	r0, r3
   175a0:	4b1f      	ldr	r3, [pc, #124]	; (17620 <sendSMS+0x1ac>)
   175a2:	4798      	blx	r3
   175a4:	e004      	b.n	175b0 <sendSMS+0x13c>
		}
		else
		{
			getActiveNumber(phone_number);
   175a6:	2324      	movs	r3, #36	; 0x24
   175a8:	18fb      	adds	r3, r7, r3
   175aa:	0018      	movs	r0, r3
   175ac:	4b1d      	ldr	r3, [pc, #116]	; (17624 <sendSMS+0x1b0>)
   175ae:	4798      	blx	r3
		}
	}
	setCallStateOnLCD(LCDCALLSTATE_OUTGOINGSMS,phone_number,false);
   175b0:	2324      	movs	r3, #36	; 0x24
   175b2:	18fb      	adds	r3, r7, r3
   175b4:	2200      	movs	r2, #0
   175b6:	0019      	movs	r1, r3
   175b8:	2005      	movs	r0, #5
   175ba:	4b1b      	ldr	r3, [pc, #108]	; (17628 <sendSMS+0x1b4>)
   175bc:	4798      	blx	r3
	gsm_send_sms(phone_number,msg);
   175be:	687a      	ldr	r2, [r7, #4]
   175c0:	2324      	movs	r3, #36	; 0x24
   175c2:	18fb      	adds	r3, r7, r3
   175c4:	0011      	movs	r1, r2
   175c6:	0018      	movs	r0, r3
   175c8:	4b18      	ldr	r3, [pc, #96]	; (1762c <sendSMS+0x1b8>)
   175ca:	4798      	blx	r3
	isMsgFromAdmin = false;
   175cc:	4b10      	ldr	r3, [pc, #64]	; (17610 <sendSMS+0x19c>)
   175ce:	2200      	movs	r2, #0
   175d0:	701a      	strb	r2, [r3, #0]
	inCall=false;
   175d2:	4b04      	ldr	r3, [pc, #16]	; (175e4 <sendSMS+0x170>)
   175d4:	2200      	movs	r2, #0
   175d6:	701a      	strb	r2, [r3, #0]
   175d8:	e000      	b.n	175dc <sendSMS+0x168>
			return;
   175da:	46c0      	nop			; (mov r8, r8)
}
   175dc:	46bd      	mov	sp, r7
   175de:	b00e      	add	sp, #56	; 0x38
   175e0:	bd80      	pop	{r7, pc}
   175e2:	46c0      	nop			; (mov r8, r8)
   175e4:	2000079c 	.word	0x2000079c
   175e8:	20000763 	.word	0x20000763
   175ec:	0002a2b0 	.word	0x0002a2b0
   175f0:	00028c73 	.word	0x00028c73
   175f4:	0002a23c 	.word	0x0002a23c
   175f8:	000289ad 	.word	0x000289ad
   175fc:	0002a1d0 	.word	0x0002a1d0
   17600:	0002a244 	.word	0x0002a244
   17604:	00010acd 	.word	0x00010acd
   17608:	2000062c 	.word	0x2000062c
   1760c:	00010b09 	.word	0x00010b09
   17610:	20000777 	.word	0x20000777
   17614:	20000584 	.word	0x20000584
   17618:	000289e3 	.word	0x000289e3
   1761c:	0002376d 	.word	0x0002376d
   17620:	00028c63 	.word	0x00028c63
   17624:	00010d21 	.word	0x00010d21
   17628:	0001ce41 	.word	0x0001ce41
   1762c:	00012b89 	.word	0x00012b89

00017630 <sendDTMFTone>:

void sendDTMFTone(uint8_t eventNo)
{
   17630:	b580      	push	{r7, lr}
   17632:	b082      	sub	sp, #8
   17634:	af00      	add	r7, sp, #0
   17636:	0002      	movs	r2, r0
   17638:	1dfb      	adds	r3, r7, #7
   1763a:	701a      	strb	r2, [r3, #0]
	if(eventNo==0xFF)
   1763c:	1dfb      	adds	r3, r7, #7
   1763e:	781b      	ldrb	r3, [r3, #0]
   17640:	2bff      	cmp	r3, #255	; 0xff
   17642:	d103      	bne.n	1764c <sendDTMFTone+0x1c>
	{
		gsm_send_DTMF_Tone('A');
   17644:	2041      	movs	r0, #65	; 0x41
   17646:	4b0f      	ldr	r3, [pc, #60]	; (17684 <sendDTMFTone+0x54>)
   17648:	4798      	blx	r3
	}
	else if (eventNo==1 && factory_settings_parameter_struct.ENABLE_M2M)
	{
		gsm_send_DTMF_Tone('C');
	}
}
   1764a:	e016      	b.n	1767a <sendDTMFTone+0x4a>
	else if (eventNo==0 && factory_settings_parameter_struct.ENABLE_M2M)
   1764c:	1dfb      	adds	r3, r7, #7
   1764e:	781b      	ldrb	r3, [r3, #0]
   17650:	2b00      	cmp	r3, #0
   17652:	d107      	bne.n	17664 <sendDTMFTone+0x34>
   17654:	4b0c      	ldr	r3, [pc, #48]	; (17688 <sendDTMFTone+0x58>)
   17656:	78db      	ldrb	r3, [r3, #3]
   17658:	2b00      	cmp	r3, #0
   1765a:	d003      	beq.n	17664 <sendDTMFTone+0x34>
		gsm_send_DTMF_Tone('D');
   1765c:	2044      	movs	r0, #68	; 0x44
   1765e:	4b09      	ldr	r3, [pc, #36]	; (17684 <sendDTMFTone+0x54>)
   17660:	4798      	blx	r3
}
   17662:	e00a      	b.n	1767a <sendDTMFTone+0x4a>
	else if (eventNo==1 && factory_settings_parameter_struct.ENABLE_M2M)
   17664:	1dfb      	adds	r3, r7, #7
   17666:	781b      	ldrb	r3, [r3, #0]
   17668:	2b01      	cmp	r3, #1
   1766a:	d106      	bne.n	1767a <sendDTMFTone+0x4a>
   1766c:	4b06      	ldr	r3, [pc, #24]	; (17688 <sendDTMFTone+0x58>)
   1766e:	78db      	ldrb	r3, [r3, #3]
   17670:	2b00      	cmp	r3, #0
   17672:	d002      	beq.n	1767a <sendDTMFTone+0x4a>
		gsm_send_DTMF_Tone('C');
   17674:	2043      	movs	r0, #67	; 0x43
   17676:	4b03      	ldr	r3, [pc, #12]	; (17684 <sendDTMFTone+0x54>)
   17678:	4798      	blx	r3
}
   1767a:	46c0      	nop			; (mov r8, r8)
   1767c:	46bd      	mov	sp, r7
   1767e:	b002      	add	sp, #8
   17680:	bd80      	pop	{r7, pc}
   17682:	46c0      	nop			; (mov r8, r8)
   17684:	00012ffd 	.word	0x00012ffd
   17688:	2000062c 	.word	0x2000062c

0001768c <getSystemTime>:

void getSystemTime(uint8_t *Hours, uint8_t *Minutes)
{
   1768c:	b580      	push	{r7, lr}
   1768e:	b082      	sub	sp, #8
   17690:	af00      	add	r7, sp, #0
   17692:	6078      	str	r0, [r7, #4]
   17694:	6039      	str	r1, [r7, #0]
	if (gsm_get_internal_rtc_time() == GSM_ERROR_NONE)
   17696:	4b09      	ldr	r3, [pc, #36]	; (176bc <getSystemTime+0x30>)
   17698:	4798      	blx	r3
   1769a:	1e03      	subs	r3, r0, #0
   1769c:	d109      	bne.n	176b2 <getSystemTime+0x26>
	{
		*Hours = struct_internal_rtc.Network_hour;
   1769e:	4b08      	ldr	r3, [pc, #32]	; (176c0 <getSystemTime+0x34>)
   176a0:	78db      	ldrb	r3, [r3, #3]
   176a2:	b2da      	uxtb	r2, r3
   176a4:	687b      	ldr	r3, [r7, #4]
   176a6:	701a      	strb	r2, [r3, #0]
		*Minutes = struct_internal_rtc.Network_minute;
   176a8:	4b05      	ldr	r3, [pc, #20]	; (176c0 <getSystemTime+0x34>)
   176aa:	791b      	ldrb	r3, [r3, #4]
   176ac:	b2da      	uxtb	r2, r3
   176ae:	683b      	ldr	r3, [r7, #0]
   176b0:	701a      	strb	r2, [r3, #0]
	}
}
   176b2:	46c0      	nop			; (mov r8, r8)
   176b4:	46bd      	mov	sp, r7
   176b6:	b002      	add	sp, #8
   176b8:	bd80      	pop	{r7, pc}
   176ba:	46c0      	nop			; (mov r8, r8)
   176bc:	000131dd 	.word	0x000131dd
   176c0:	20000688 	.word	0x20000688

000176c4 <checkSMSForPassCode>:


bool checkSMSForPassCode(char *receivedSMS)
{
   176c4:	b590      	push	{r4, r7, lr}
   176c6:	b087      	sub	sp, #28
   176c8:	af00      	add	r7, sp, #0
   176ca:	6078      	str	r0, [r7, #4]
	char passCode[10]={0};
   176cc:	2308      	movs	r3, #8
   176ce:	18fb      	adds	r3, r7, r3
   176d0:	0018      	movs	r0, r3
   176d2:	230a      	movs	r3, #10
   176d4:	001a      	movs	r2, r3
   176d6:	2100      	movs	r1, #0
   176d8:	4b1f      	ldr	r3, [pc, #124]	; (17758 <checkSMSForPassCode+0x94>)
   176da:	4798      	blx	r3
	uint32_t pCodeint = factory_settings_parameter_struct.DeviceId_ee + (factory_settings_parameter_struct.dateCode<<1);
   176dc:	4b1f      	ldr	r3, [pc, #124]	; (1775c <checkSMSForPassCode+0x98>)
   176de:	689a      	ldr	r2, [r3, #8]
   176e0:	4b1e      	ldr	r3, [pc, #120]	; (1775c <checkSMSForPassCode+0x98>)
   176e2:	68db      	ldr	r3, [r3, #12]
   176e4:	005b      	lsls	r3, r3, #1
   176e6:	18d3      	adds	r3, r2, r3
   176e8:	617b      	str	r3, [r7, #20]
	pCodeint = pCodeint >> 4;
   176ea:	697b      	ldr	r3, [r7, #20]
   176ec:	091b      	lsrs	r3, r3, #4
   176ee:	617b      	str	r3, [r7, #20]
	pCodeint = pCodeint << 4;
   176f0:	697b      	ldr	r3, [r7, #20]
   176f2:	011b      	lsls	r3, r3, #4
   176f4:	617b      	str	r3, [r7, #20]
	pCodeint = pCodeint % 1000000L;
   176f6:	697a      	ldr	r2, [r7, #20]
   176f8:	4b19      	ldr	r3, [pc, #100]	; (17760 <checkSMSForPassCode+0x9c>)
   176fa:	491a      	ldr	r1, [pc, #104]	; (17764 <checkSMSForPassCode+0xa0>)
   176fc:	0010      	movs	r0, r2
   176fe:	4798      	blx	r3
   17700:	000b      	movs	r3, r1
   17702:	617b      	str	r3, [r7, #20]
	
	sprintf(passCode, "~%u~",pCodeint);
   17704:	697a      	ldr	r2, [r7, #20]
   17706:	4918      	ldr	r1, [pc, #96]	; (17768 <checkSMSForPassCode+0xa4>)
   17708:	2308      	movs	r3, #8
   1770a:	18fb      	adds	r3, r7, r3
   1770c:	0018      	movs	r0, r3
   1770e:	4b17      	ldr	r3, [pc, #92]	; (1776c <checkSMSForPassCode+0xa8>)
   17710:	4798      	blx	r3
	
	if(strstr(receivedSMS,passCode))							//check passCode exists
   17712:	2308      	movs	r3, #8
   17714:	18fa      	adds	r2, r7, r3
   17716:	687b      	ldr	r3, [r7, #4]
   17718:	0011      	movs	r1, r2
   1771a:	0018      	movs	r0, r3
   1771c:	4b14      	ldr	r3, [pc, #80]	; (17770 <checkSMSForPassCode+0xac>)
   1771e:	4798      	blx	r3
   17720:	1e03      	subs	r3, r0, #0
   17722:	d013      	beq.n	1774c <checkSMSForPassCode+0x88>
	{
		memmove(receivedSMS,receivedSMS+strlen(passCode),strlen(receivedSMS));		//discard passPhrase
   17724:	2308      	movs	r3, #8
   17726:	18fb      	adds	r3, r7, r3
   17728:	0018      	movs	r0, r3
   1772a:	4b12      	ldr	r3, [pc, #72]	; (17774 <checkSMSForPassCode+0xb0>)
   1772c:	4798      	blx	r3
   1772e:	0002      	movs	r2, r0
   17730:	687b      	ldr	r3, [r7, #4]
   17732:	189c      	adds	r4, r3, r2
   17734:	687b      	ldr	r3, [r7, #4]
   17736:	0018      	movs	r0, r3
   17738:	4b0e      	ldr	r3, [pc, #56]	; (17774 <checkSMSForPassCode+0xb0>)
   1773a:	4798      	blx	r3
   1773c:	0002      	movs	r2, r0
   1773e:	687b      	ldr	r3, [r7, #4]
   17740:	0021      	movs	r1, r4
   17742:	0018      	movs	r0, r3
   17744:	4b0c      	ldr	r3, [pc, #48]	; (17778 <checkSMSForPassCode+0xb4>)
   17746:	4798      	blx	r3
		return true;
   17748:	2301      	movs	r3, #1
   1774a:	e000      	b.n	1774e <checkSMSForPassCode+0x8a>
	}

	return false;
   1774c:	2300      	movs	r3, #0
}
   1774e:	0018      	movs	r0, r3
   17750:	46bd      	mov	sp, r7
   17752:	b007      	add	sp, #28
   17754:	bd90      	pop	{r4, r7, pc}
   17756:	46c0      	nop			; (mov r8, r8)
   17758:	000289e3 	.word	0x000289e3
   1775c:	2000062c 	.word	0x2000062c
   17760:	00026279 	.word	0x00026279
   17764:	000f4240 	.word	0x000f4240
   17768:	0002a248 	.word	0x0002a248
   1776c:	00028be9 	.word	0x00028be9
   17770:	00028ca3 	.word	0x00028ca3
   17774:	00028c73 	.word	0x00028c73
   17778:	000289bf 	.word	0x000289bf

0001777c <sendFWUpdateSMS>:

void sendFWUpdateSMS(void)
{
   1777c:	b590      	push	{r4, r7, lr}
   1777e:	b089      	sub	sp, #36	; 0x24
   17780:	af00      	add	r7, sp, #0
	if(bootloader_parameter.firmware_update_process_completed)
   17782:	4b2f      	ldr	r3, [pc, #188]	; (17840 <sendFWUpdateSMS+0xc4>)
   17784:	799b      	ldrb	r3, [r3, #6]
   17786:	2b00      	cmp	r3, #0
   17788:	d055      	beq.n	17836 <sendFWUpdateSMS+0xba>
	{
		char uResp_SMS[25]={0};
   1778a:	1d3b      	adds	r3, r7, #4
   1778c:	0018      	movs	r0, r3
   1778e:	2319      	movs	r3, #25
   17790:	001a      	movs	r2, r3
   17792:	2100      	movs	r1, #0
   17794:	4b2b      	ldr	r3, [pc, #172]	; (17844 <sendFWUpdateSMS+0xc8>)
   17796:	4798      	blx	r3
		
		/*Firmware update Completed Successfully*/
		if(bootloader_parameter.firmware_update_error_code==0)
   17798:	4b29      	ldr	r3, [pc, #164]	; (17840 <sendFWUpdateSMS+0xc4>)
   1779a:	79db      	ldrb	r3, [r3, #7]
   1779c:	2b00      	cmp	r3, #0
   1779e:	d108      	bne.n	177b2 <sendFWUpdateSMS+0x36>
		{
			strcpy(uResp_SMS,"F/W Update Completed");
   177a0:	1d3b      	adds	r3, r7, #4
   177a2:	4a29      	ldr	r2, [pc, #164]	; (17848 <sendFWUpdateSMS+0xcc>)
   177a4:	ca13      	ldmia	r2!, {r0, r1, r4}
   177a6:	c313      	stmia	r3!, {r0, r1, r4}
   177a8:	ca03      	ldmia	r2!, {r0, r1}
   177aa:	c303      	stmia	r3!, {r0, r1}
   177ac:	7812      	ldrb	r2, [r2, #0]
   177ae:	701a      	strb	r2, [r3, #0]
   177b0:	e007      	b.n	177c2 <sendFWUpdateSMS+0x46>
		}
		/*Error in Firmware update*/
		else
		{
			strcpy(uResp_SMS,"F/W Update Error");
   177b2:	1d3b      	adds	r3, r7, #4
   177b4:	4a25      	ldr	r2, [pc, #148]	; (1784c <sendFWUpdateSMS+0xd0>)
   177b6:	ca13      	ldmia	r2!, {r0, r1, r4}
   177b8:	c313      	stmia	r3!, {r0, r1, r4}
   177ba:	6811      	ldr	r1, [r2, #0]
   177bc:	6019      	str	r1, [r3, #0]
   177be:	7912      	ldrb	r2, [r2, #4]
   177c0:	711a      	strb	r2, [r3, #4]
		}
		
		if(bootloader_parameter.firmware_updater_mobile_no[0]!='0')
   177c2:	4b1f      	ldr	r3, [pc, #124]	; (17840 <sendFWUpdateSMS+0xc4>)
   177c4:	7b1b      	ldrb	r3, [r3, #12]
   177c6:	2b30      	cmp	r3, #48	; 0x30
   177c8:	d006      	beq.n	177d8 <sendFWUpdateSMS+0x5c>
		{
			gsm_send_sms(bootloader_parameter.firmware_updater_mobile_no,uResp_SMS);
   177ca:	1d3a      	adds	r2, r7, #4
   177cc:	4b20      	ldr	r3, [pc, #128]	; (17850 <sendFWUpdateSMS+0xd4>)
   177ce:	0011      	movs	r1, r2
   177d0:	0018      	movs	r0, r3
   177d2:	4b20      	ldr	r3, [pc, #128]	; (17854 <sendFWUpdateSMS+0xd8>)
   177d4:	4798      	blx	r3
   177d6:	e004      	b.n	177e2 <sendFWUpdateSMS+0x66>
		}
		else
		{
			gsm_send_sms(ADMIN_1_MOBILE_NUMBER_PAGE,uResp_SMS);
   177d8:	1d3b      	adds	r3, r7, #4
   177da:	0019      	movs	r1, r3
   177dc:	2003      	movs	r0, #3
   177de:	4b1d      	ldr	r3, [pc, #116]	; (17854 <sendFWUpdateSMS+0xd8>)
   177e0:	4798      	blx	r3
		}
		
		bootloader_parameter.ulongintDiscard = 0;
   177e2:	4b17      	ldr	r3, [pc, #92]	; (17840 <sendFWUpdateSMS+0xc4>)
   177e4:	2200      	movs	r2, #0
   177e6:	601a      	str	r2, [r3, #0]
		bootloader_parameter.firmware_download_pending = false;
   177e8:	4b15      	ldr	r3, [pc, #84]	; (17840 <sendFWUpdateSMS+0xc4>)
   177ea:	2200      	movs	r2, #0
   177ec:	715a      	strb	r2, [r3, #5]
		bootloader_parameter.firmware_update_process_completed = false;
   177ee:	4b14      	ldr	r3, [pc, #80]	; (17840 <sendFWUpdateSMS+0xc4>)
   177f0:	2200      	movs	r2, #0
   177f2:	719a      	strb	r2, [r3, #6]
		bootloader_parameter.firmware_update_error_code = 0;
   177f4:	4b12      	ldr	r3, [pc, #72]	; (17840 <sendFWUpdateSMS+0xc4>)
   177f6:	2200      	movs	r2, #0
   177f8:	71da      	strb	r2, [r3, #7]
		bootloader_parameter.retries = 0;
   177fa:	4b11      	ldr	r3, [pc, #68]	; (17840 <sendFWUpdateSMS+0xc4>)
   177fc:	2200      	movs	r2, #0
   177fe:	721a      	strb	r2, [r3, #8]
		
		memset(bootloader_parameter.firmware_updater_mobile_no, '\0', sizeof(bootloader_parameter.firmware_updater_mobile_no));
   17800:	4b13      	ldr	r3, [pc, #76]	; (17850 <sendFWUpdateSMS+0xd4>)
   17802:	2210      	movs	r2, #16
   17804:	2100      	movs	r1, #0
   17806:	0018      	movs	r0, r3
   17808:	4b0e      	ldr	r3, [pc, #56]	; (17844 <sendFWUpdateSMS+0xc8>)
   1780a:	4798      	blx	r3
		strcpy(bootloader_parameter.firmware_updater_mobile_no,"0000000000");
   1780c:	4b10      	ldr	r3, [pc, #64]	; (17850 <sendFWUpdateSMS+0xd4>)
   1780e:	4a12      	ldr	r2, [pc, #72]	; (17858 <sendFWUpdateSMS+0xdc>)
   17810:	ca03      	ldmia	r2!, {r0, r1}
   17812:	c303      	stmia	r3!, {r0, r1}
   17814:	8811      	ldrh	r1, [r2, #0]
   17816:	8019      	strh	r1, [r3, #0]
   17818:	7892      	ldrb	r2, [r2, #2]
   1781a:	709a      	strb	r2, [r3, #2]
		
		memcpy(page_data,&bootloader_parameter,sizeof(bootloader_parameter));
   1781c:	4908      	ldr	r1, [pc, #32]	; (17840 <sendFWUpdateSMS+0xc4>)
   1781e:	4b0f      	ldr	r3, [pc, #60]	; (1785c <sendFWUpdateSMS+0xe0>)
   17820:	221c      	movs	r2, #28
   17822:	0018      	movs	r0, r3
   17824:	4b0e      	ldr	r3, [pc, #56]	; (17860 <sendFWUpdateSMS+0xe4>)
   17826:	4798      	blx	r3
		eeprom_emulator_write_page(BOOTLOADER_PARAMETER_PAGE, page_data);
   17828:	4b0c      	ldr	r3, [pc, #48]	; (1785c <sendFWUpdateSMS+0xe0>)
   1782a:	0019      	movs	r1, r3
   1782c:	2000      	movs	r0, #0
   1782e:	4b0d      	ldr	r3, [pc, #52]	; (17864 <sendFWUpdateSMS+0xe8>)
   17830:	4798      	blx	r3
		eeprom_emulator_commit_page_buffer();
   17832:	4b0d      	ldr	r3, [pc, #52]	; (17868 <sendFWUpdateSMS+0xec>)
   17834:	4798      	blx	r3
	}
}
   17836:	46c0      	nop			; (mov r8, r8)
   17838:	46bd      	mov	sp, r7
   1783a:	b009      	add	sp, #36	; 0x24
   1783c:	bd90      	pop	{r4, r7, pc}
   1783e:	46c0      	nop			; (mov r8, r8)
   17840:	200005f8 	.word	0x200005f8
   17844:	000289e3 	.word	0x000289e3
   17848:	0002a250 	.word	0x0002a250
   1784c:	0002a268 	.word	0x0002a268
   17850:	20000604 	.word	0x20000604
   17854:	00012b89 	.word	0x00012b89
   17858:	0002a27c 	.word	0x0002a27c
   1785c:	20000584 	.word	0x20000584
   17860:	000289ad 	.word	0x000289ad
   17864:	00023661 	.word	0x00023661
   17868:	00023809 	.word	0x00023809

0001786c <vTask_GSM_service>:
#define GSM_PWR_AS_OP	GSM_PWR_DDR|=GSM_PWR_POS
#define GSM_PWR_ON		GSM_PWR_PORT|=GSM_PWR_POS
#define GSM_PWR_OFF		GSM_PWR_PORT&=~(GSM_PWR_POS)
//////////////////////////////////////////////////////////////////////////
static void vTask_GSM_service(void *params)
{
   1786c:	b590      	push	{r4, r7, lr}
   1786e:	b0cf      	sub	sp, #316	; 0x13c
   17870:	af02      	add	r7, sp, #8
   17872:	6078      	str	r0, [r7, #4]
	
	uint32_t network_update_time = 0;
   17874:	2300      	movs	r3, #0
   17876:	2296      	movs	r2, #150	; 0x96
   17878:	0052      	lsls	r2, r2, #1
   1787a:	18ba      	adds	r2, r7, r2
   1787c:	6013      	str	r3, [r2, #0]
	GSM_PWR_AS_OP;
   1787e:	4bcc      	ldr	r3, [pc, #816]	; (17bb0 <vTask_GSM_service+0x344>)
   17880:	4acb      	ldr	r2, [pc, #812]	; (17bb0 <vTask_GSM_service+0x344>)
   17882:	6812      	ldr	r2, [r2, #0]
   17884:	2180      	movs	r1, #128	; 0x80
   17886:	0249      	lsls	r1, r1, #9
   17888:	430a      	orrs	r2, r1
   1788a:	601a      	str	r2, [r3, #0]
	
	struct port_config pin_conf_gsm_status;
	port_get_config_defaults(&pin_conf_gsm_status);
   1788c:	2388      	movs	r3, #136	; 0x88
   1788e:	005b      	lsls	r3, r3, #1
   17890:	18fb      	adds	r3, r7, r3
   17892:	0018      	movs	r0, r3
   17894:	4bc7      	ldr	r3, [pc, #796]	; (17bb4 <vTask_GSM_service+0x348>)
   17896:	4798      	blx	r3
	pin_conf_gsm_status.direction  = PORT_PIN_DIR_INPUT;
   17898:	2388      	movs	r3, #136	; 0x88
   1789a:	005b      	lsls	r3, r3, #1
   1789c:	18fb      	adds	r3, r7, r3
   1789e:	2200      	movs	r2, #0
   178a0:	701a      	strb	r2, [r3, #0]
	pin_conf_gsm_status.input_pull = PORT_PIN_PULL_NONE;
   178a2:	2388      	movs	r3, #136	; 0x88
   178a4:	005b      	lsls	r3, r3, #1
   178a6:	18fb      	adds	r3, r7, r3
   178a8:	2200      	movs	r2, #0
   178aa:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(GSM_STATUS_POSITION, &pin_conf_gsm_status);
   178ac:	2388      	movs	r3, #136	; 0x88
   178ae:	005b      	lsls	r3, r3, #1
   178b0:	18fb      	adds	r3, r7, r3
   178b2:	0019      	movs	r1, r3
   178b4:	201b      	movs	r0, #27
   178b6:	4bc0      	ldr	r3, [pc, #768]	; (17bb8 <vTask_GSM_service+0x34c>)
   178b8:	4798      	blx	r3
	
	gsm_init();
   178ba:	4bc0      	ldr	r3, [pc, #768]	; (17bbc <vTask_GSM_service+0x350>)
   178bc:	4798      	blx	r3
	
	initialized = false;
   178be:	4bc0      	ldr	r3, [pc, #768]	; (17bc0 <vTask_GSM_service+0x354>)
   178c0:	2200      	movs	r2, #0
   178c2:	701a      	strb	r2, [r3, #0]
	
	
	inCall=false;
   178c4:	4bbf      	ldr	r3, [pc, #764]	; (17bc4 <vTask_GSM_service+0x358>)
   178c6:	2200      	movs	r2, #0
   178c8:	701a      	strb	r2, [r3, #0]
	simReInit=false;
   178ca:	4bbf      	ldr	r3, [pc, #764]	; (17bc8 <vTask_GSM_service+0x35c>)
   178cc:	2200      	movs	r2, #0
   178ce:	701a      	strb	r2, [r3, #0]
	
	isRinging = false;
   178d0:	4bbe      	ldr	r3, [pc, #760]	; (17bcc <vTask_GSM_service+0x360>)
   178d2:	2200      	movs	r2, #0
   178d4:	701a      	strb	r2, [r3, #0]
	
	boolGsm_config_flag			=false;
   178d6:	4bbe      	ldr	r3, [pc, #760]	; (17bd0 <vTask_GSM_service+0x364>)
   178d8:	2200      	movs	r2, #0
   178da:	701a      	strb	r2, [r3, #0]
	boolOne_Time_Msg_Delete_Flag   =false;
   178dc:	4bbd      	ldr	r3, [pc, #756]	; (17bd4 <vTask_GSM_service+0x368>)
   178de:	2200      	movs	r2, #0
   178e0:	701a      	strb	r2, [r3, #0]
	
	lastRingStateChangeTime=0;
   178e2:	4bbd      	ldr	r3, [pc, #756]	; (17bd8 <vTask_GSM_service+0x36c>)
   178e4:	2200      	movs	r2, #0
   178e6:	601a      	str	r2, [r3, #0]
	
	Signal_Strength = 0;
   178e8:	4bbc      	ldr	r3, [pc, #752]	; (17bdc <vTask_GSM_service+0x370>)
   178ea:	2200      	movs	r2, #0
   178ec:	701a      	strb	r2, [r3, #0]
	
	soundWaitTime = 5;
   178ee:	4bbc      	ldr	r3, [pc, #752]	; (17be0 <vTask_GSM_service+0x374>)
   178f0:	2205      	movs	r2, #5
   178f2:	701a      	strb	r2, [r3, #0]
	bplaySound = false;
   178f4:	4bbb      	ldr	r3, [pc, #748]	; (17be4 <vTask_GSM_service+0x378>)
   178f6:	2200      	movs	r2, #0
   178f8:	701a      	strb	r2, [r3, #0]
	
	//actionType = 'N';
	callCutWaitTime = 580;
   178fa:	4bbb      	ldr	r3, [pc, #748]	; (17be8 <vTask_GSM_service+0x37c>)
   178fc:	2291      	movs	r2, #145	; 0x91
   178fe:	0092      	lsls	r2, r2, #2
   17900:	801a      	strh	r2, [r3, #0]
	nr = 0;
   17902:	4bba      	ldr	r3, [pc, #744]	; (17bec <vTask_GSM_service+0x380>)
   17904:	2200      	movs	r2, #0
   17906:	701a      	strb	r2, [r3, #0]
	currentStatus = 'N';
   17908:	4bb9      	ldr	r3, [pc, #740]	; (17bf0 <vTask_GSM_service+0x384>)
   1790a:	224e      	movs	r2, #78	; 0x4e
   1790c:	701a      	strb	r2, [r3, #0]
	currentCallStatus = 'N';
   1790e:	4bb9      	ldr	r3, [pc, #740]	; (17bf4 <vTask_GSM_service+0x388>)
   17910:	224e      	movs	r2, #78	; 0x4e
   17912:	701a      	strb	r2, [r3, #0]
	callAccepted = false;
   17914:	4bb8      	ldr	r3, [pc, #736]	; (17bf8 <vTask_GSM_service+0x38c>)
   17916:	2200      	movs	r2, #0
   17918:	701a      	strb	r2, [r3, #0]
	freezeIncomingCalls = false;
   1791a:	4bb8      	ldr	r3, [pc, #736]	; (17bfc <vTask_GSM_service+0x390>)
   1791c:	2200      	movs	r2, #0
   1791e:	701a      	strb	r2, [r3, #0]
	obtainNewEvent = true;
   17920:	4bb7      	ldr	r3, [pc, #732]	; (17c00 <vTask_GSM_service+0x394>)
   17922:	2201      	movs	r2, #1
   17924:	701a      	strb	r2, [r3, #0]
	isMsgFromAdmin = false;
   17926:	4bb7      	ldr	r3, [pc, #732]	; (17c04 <vTask_GSM_service+0x398>)
   17928:	2200      	movs	r2, #0
   1792a:	701a      	strb	r2, [r3, #0]
	eventStaged=false;
   1792c:	4bb6      	ldr	r3, [pc, #728]	; (17c08 <vTask_GSM_service+0x39c>)
   1792e:	2200      	movs	r2, #0
   17930:	701a      	strb	r2, [r3, #0]
	stagedEventType = 'N';
   17932:	4bb6      	ldr	r3, [pc, #728]	; (17c0c <vTask_GSM_service+0x3a0>)
   17934:	224e      	movs	r2, #78	; 0x4e
   17936:	701a      	strb	r2, [r3, #0]
	isRegisteredNumber=false;
   17938:	4bb5      	ldr	r3, [pc, #724]	; (17c10 <vTask_GSM_service+0x3a4>)
   1793a:	2200      	movs	r2, #0
   1793c:	701a      	strb	r2, [r3, #0]
	retries=0;
   1793e:	4bb5      	ldr	r3, [pc, #724]	; (17c14 <vTask_GSM_service+0x3a8>)
   17940:	2200      	movs	r2, #0
   17942:	701a      	strb	r2, [r3, #0]
	autoNetworkDetection=false;
   17944:	4bb4      	ldr	r3, [pc, #720]	; (17c18 <vTask_GSM_service+0x3ac>)
   17946:	2200      	movs	r2, #0
   17948:	701a      	strb	r2, [r3, #0]
	mcuWakeUpFromSleep=false;
   1794a:	4bb4      	ldr	r3, [pc, #720]	; (17c1c <vTask_GSM_service+0x3b0>)
   1794c:	2200      	movs	r2, #0
   1794e:	701a      	strb	r2, [r3, #0]
	
	
	if (factory_settings_parameter_struct.ENABLE_CURRENT)
   17950:	4bb3      	ldr	r3, [pc, #716]	; (17c20 <vTask_GSM_service+0x3b4>)
   17952:	785b      	ldrb	r3, [r3, #1]
   17954:	2b00      	cmp	r3, #0
   17956:	d002      	beq.n	1795e <vTask_GSM_service+0xf2>
	{
		zeroPressed=false;
   17958:	4bb2      	ldr	r3, [pc, #712]	; (17c24 <vTask_GSM_service+0x3b8>)
   1795a:	2200      	movs	r2, #0
   1795c:	701a      	strb	r2, [r3, #0]
	}
	if (factory_settings_parameter_struct.ENABLE_M2M)
   1795e:	4bb0      	ldr	r3, [pc, #704]	; (17c20 <vTask_GSM_service+0x3b4>)
   17960:	78db      	ldrb	r3, [r3, #3]
   17962:	2b00      	cmp	r3, #0
   17964:	d012      	beq.n	1798c <vTask_GSM_service+0x120>
	{
		m2mAck=false;
   17966:	4bb0      	ldr	r3, [pc, #704]	; (17c28 <vTask_GSM_service+0x3bc>)
   17968:	2200      	movs	r2, #0
   1796a:	701a      	strb	r2, [r3, #0]
		m2mEventCalls=m2mEventNo=0;
   1796c:	4baf      	ldr	r3, [pc, #700]	; (17c2c <vTask_GSM_service+0x3c0>)
   1796e:	2200      	movs	r2, #0
   17970:	701a      	strb	r2, [r3, #0]
   17972:	4bae      	ldr	r3, [pc, #696]	; (17c2c <vTask_GSM_service+0x3c0>)
   17974:	781a      	ldrb	r2, [r3, #0]
   17976:	4bae      	ldr	r3, [pc, #696]	; (17c30 <vTask_GSM_service+0x3c4>)
   17978:	701a      	strb	r2, [r3, #0]
		m2mEventStaged=false;
   1797a:	4bae      	ldr	r3, [pc, #696]	; (17c34 <vTask_GSM_service+0x3c8>)
   1797c:	2200      	movs	r2, #0
   1797e:	701a      	strb	r2, [r3, #0]
		m2mEvent=false;
   17980:	4bad      	ldr	r3, [pc, #692]	; (17c38 <vTask_GSM_service+0x3cc>)
   17982:	2200      	movs	r2, #0
   17984:	701a      	strb	r2, [r3, #0]
		keyPressed=false;
   17986:	4bad      	ldr	r3, [pc, #692]	; (17c3c <vTask_GSM_service+0x3d0>)
   17988:	2200      	movs	r2, #0
   1798a:	701a      	strb	r2, [r3, #0]
	}
	
	if(GSM_STATUS_OK)
   1798c:	201b      	movs	r0, #27
   1798e:	4bac      	ldr	r3, [pc, #688]	; (17c40 <vTask_GSM_service+0x3d4>)
   17990:	4798      	blx	r3
   17992:	1e03      	subs	r3, r0, #0
   17994:	d01a      	beq.n	179cc <vTask_GSM_service+0x160>
	{
		boolGsm_config_flag			=false;
   17996:	4b8e      	ldr	r3, [pc, #568]	; (17bd0 <vTask_GSM_service+0x364>)
   17998:	2200      	movs	r2, #0
   1799a:	701a      	strb	r2, [r3, #0]
		boolOne_Time_Msg_Delete_Flag   =false;
   1799c:	4b8d      	ldr	r3, [pc, #564]	; (17bd4 <vTask_GSM_service+0x368>)
   1799e:	2200      	movs	r2, #0
   179a0:	701a      	strb	r2, [r3, #0]
		
		GSM_PWR_ON;
   179a2:	4ba8      	ldr	r3, [pc, #672]	; (17c44 <vTask_GSM_service+0x3d8>)
   179a4:	4aa7      	ldr	r2, [pc, #668]	; (17c44 <vTask_GSM_service+0x3d8>)
   179a6:	6812      	ldr	r2, [r2, #0]
   179a8:	2180      	movs	r1, #128	; 0x80
   179aa:	0249      	lsls	r1, r1, #9
   179ac:	430a      	orrs	r2, r1
   179ae:	601a      	str	r2, [r3, #0]
		vTaskDelay(3000);
   179b0:	4ba5      	ldr	r3, [pc, #660]	; (17c48 <vTask_GSM_service+0x3dc>)
   179b2:	0018      	movs	r0, r3
   179b4:	4ba5      	ldr	r3, [pc, #660]	; (17c4c <vTask_GSM_service+0x3e0>)
   179b6:	4798      	blx	r3
		GSM_PWR_OFF;
   179b8:	4ba2      	ldr	r3, [pc, #648]	; (17c44 <vTask_GSM_service+0x3d8>)
   179ba:	4aa2      	ldr	r2, [pc, #648]	; (17c44 <vTask_GSM_service+0x3d8>)
   179bc:	6812      	ldr	r2, [r2, #0]
   179be:	49a4      	ldr	r1, [pc, #656]	; (17c50 <vTask_GSM_service+0x3e4>)
   179c0:	400a      	ands	r2, r1
   179c2:	601a      	str	r2, [r3, #0]
		vTaskDelay(5000);
   179c4:	4ba3      	ldr	r3, [pc, #652]	; (17c54 <vTask_GSM_service+0x3e8>)
   179c6:	0018      	movs	r0, r3
   179c8:	4ba0      	ldr	r3, [pc, #640]	; (17c4c <vTask_GSM_service+0x3e0>)
   179ca:	4798      	blx	r3
	}
	
	isGSMModuleAwake=false;
   179cc:	4ba2      	ldr	r3, [pc, #648]	; (17c58 <vTask_GSM_service+0x3ec>)
   179ce:	2200      	movs	r2, #0
   179d0:	701a      	strb	r2, [r3, #0]
	port_pin_set_output_level(GSM_DTR_PIN, GSM_DTR_PIN_ACTIVE);
   179d2:	2101      	movs	r1, #1
   179d4:	2014      	movs	r0, #20
   179d6:	4ba1      	ldr	r3, [pc, #644]	; (17c5c <vTask_GSM_service+0x3f0>)
   179d8:	4798      	blx	r3
	lastGSMCommunicationTime=0;
   179da:	4ba1      	ldr	r3, [pc, #644]	; (17c60 <vTask_GSM_service+0x3f4>)
   179dc:	2200      	movs	r2, #0
   179de:	601a      	str	r2, [r3, #0]
	lastToLastGSMCommunicationTime=0;
   179e0:	4ba0      	ldr	r3, [pc, #640]	; (17c64 <vTask_GSM_service+0x3f8>)
   179e2:	2200      	movs	r2, #0
   179e4:	601a      	str	r2, [r3, #0]
	gsm_module_exit_sleep(false);				//to switch DTR pin so that sim remains active
   179e6:	2000      	movs	r0, #0
   179e8:	4b9f      	ldr	r3, [pc, #636]	; (17c68 <vTask_GSM_service+0x3fc>)
   179ea:	4798      	blx	r3
	{

		/************************************************************************/
		/*  Check for Call Timer Expire in case GSM Status is not OK            */
		/************************************************************************/
		if (currentStatus == 'I' || currentStatus == 'R')
   179ec:	4b80      	ldr	r3, [pc, #512]	; (17bf0 <vTask_GSM_service+0x384>)
   179ee:	781b      	ldrb	r3, [r3, #0]
   179f0:	b2db      	uxtb	r3, r3
   179f2:	2b49      	cmp	r3, #73	; 0x49
   179f4:	d004      	beq.n	17a00 <vTask_GSM_service+0x194>
   179f6:	4b7e      	ldr	r3, [pc, #504]	; (17bf0 <vTask_GSM_service+0x384>)
   179f8:	781b      	ldrb	r3, [r3, #0]
   179fa:	b2db      	uxtb	r3, r3
   179fc:	2b52      	cmp	r3, #82	; 0x52
   179fe:	d112      	bne.n	17a26 <vTask_GSM_service+0x1ba>
		{
			if (callTimerExpire())
   17a00:	4b9a      	ldr	r3, [pc, #616]	; (17c6c <vTask_GSM_service+0x400>)
   17a02:	4798      	blx	r3
   17a04:	1e03      	subs	r3, r0, #0
   17a06:	d00e      	beq.n	17a26 <vTask_GSM_service+0x1ba>
			{
				char t1 = actionType;
   17a08:	2328      	movs	r3, #40	; 0x28
   17a0a:	33ff      	adds	r3, #255	; 0xff
   17a0c:	18fb      	adds	r3, r7, r3
   17a0e:	4a98      	ldr	r2, [pc, #608]	; (17c70 <vTask_GSM_service+0x404>)
   17a10:	7812      	ldrb	r2, [r2, #0]
   17a12:	701a      	strb	r2, [r3, #0]
				endCall();
   17a14:	4b97      	ldr	r3, [pc, #604]	; (17c74 <vTask_GSM_service+0x408>)
   17a16:	4798      	blx	r3
				checkRespSMS(t1);
   17a18:	2328      	movs	r3, #40	; 0x28
   17a1a:	33ff      	adds	r3, #255	; 0xff
   17a1c:	18fb      	adds	r3, r7, r3
   17a1e:	781b      	ldrb	r3, [r3, #0]
   17a20:	0018      	movs	r0, r3
   17a22:	4b95      	ldr	r3, [pc, #596]	; (17c78 <vTask_GSM_service+0x40c>)
   17a24:	4798      	blx	r3
			}
		}
		/************************************************************************/
		
		if (GSM_STATUS_OK)
   17a26:	201b      	movs	r0, #27
   17a28:	4b85      	ldr	r3, [pc, #532]	; (17c40 <vTask_GSM_service+0x3d4>)
   17a2a:	4798      	blx	r3
   17a2c:	1e03      	subs	r3, r0, #0
   17a2e:	d101      	bne.n	17a34 <vTask_GSM_service+0x1c8>
   17a30:	f000 fd12 	bl	18458 <vTask_GSM_service+0xbec>
		{
			if (boolGsm_config_flag == false)
   17a34:	4b66      	ldr	r3, [pc, #408]	; (17bd0 <vTask_GSM_service+0x364>)
   17a36:	781b      	ldrb	r3, [r3, #0]
   17a38:	b2db      	uxtb	r3, r3
   17a3a:	2201      	movs	r2, #1
   17a3c:	4053      	eors	r3, r2
   17a3e:	b2db      	uxtb	r3, r3
   17a40:	2b00      	cmp	r3, #0
   17a42:	d02d      	beq.n	17aa0 <vTask_GSM_service+0x234>
			{
				
				if (gsm_is_network_registered() == GSM_NETWORK_REGISTERED)
   17a44:	4b8d      	ldr	r3, [pc, #564]	; (17c7c <vTask_GSM_service+0x410>)
   17a46:	4798      	blx	r3
   17a48:	0003      	movs	r3, r0
   17a4a:	2b09      	cmp	r3, #9
   17a4c:	d122      	bne.n	17a94 <vTask_GSM_service+0x228>
				{
					if(gsm_config_module()==GSM_ERROR_NONE)
   17a4e:	4b8c      	ldr	r3, [pc, #560]	; (17c80 <vTask_GSM_service+0x414>)
   17a50:	4798      	blx	r3
   17a52:	1e03      	subs	r3, r0, #0
   17a54:	d11a      	bne.n	17a8c <vTask_GSM_service+0x220>
					{
						if(gsm_enable_csqn_urc()==GSM_ERROR_NONE)
   17a56:	4b8b      	ldr	r3, [pc, #556]	; (17c84 <vTask_GSM_service+0x418>)
   17a58:	4798      	blx	r3
   17a5a:	1e03      	subs	r3, r0, #0
   17a5c:	d102      	bne.n	17a64 <vTask_GSM_service+0x1f8>
						{
							autoNetworkDetection = true;
   17a5e:	4b6e      	ldr	r3, [pc, #440]	; (17c18 <vTask_GSM_service+0x3ac>)
   17a60:	2201      	movs	r2, #1
   17a62:	701a      	strb	r2, [r3, #0]
						}
						
						Signal_Strength = gsm_getsignalstrength();
   17a64:	4b88      	ldr	r3, [pc, #544]	; (17c88 <vTask_GSM_service+0x41c>)
   17a66:	4798      	blx	r3
   17a68:	0003      	movs	r3, r0
   17a6a:	001a      	movs	r2, r3
   17a6c:	4b5b      	ldr	r3, [pc, #364]	; (17bdc <vTask_GSM_service+0x370>)
   17a6e:	701a      	strb	r2, [r3, #0]
						network_update_time = xTaskGetTickCount();
   17a70:	4b86      	ldr	r3, [pc, #536]	; (17c8c <vTask_GSM_service+0x420>)
   17a72:	4798      	blx	r3
   17a74:	0003      	movs	r3, r0
   17a76:	2296      	movs	r2, #150	; 0x96
   17a78:	0052      	lsls	r2, r2, #1
   17a7a:	18ba      	adds	r2, r7, r2
   17a7c:	6013      	str	r3, [r2, #0]
							
						boolGsm_config_flag = true;
   17a7e:	4b54      	ldr	r3, [pc, #336]	; (17bd0 <vTask_GSM_service+0x364>)
   17a80:	2201      	movs	r2, #1
   17a82:	701a      	strb	r2, [r3, #0]
						gsmStatusChange=true;
   17a84:	4b82      	ldr	r3, [pc, #520]	; (17c90 <vTask_GSM_service+0x424>)
   17a86:	2201      	movs	r2, #1
   17a88:	701a      	strb	r2, [r3, #0]
   17a8a:	e7af      	b.n	179ec <vTask_GSM_service+0x180>
					}
					else
					{
						boolGsm_config_flag = false;
   17a8c:	4b50      	ldr	r3, [pc, #320]	; (17bd0 <vTask_GSM_service+0x364>)
   17a8e:	2200      	movs	r2, #0
   17a90:	701a      	strb	r2, [r3, #0]
   17a92:	e7ab      	b.n	179ec <vTask_GSM_service+0x180>
					}
				}
				else
				{
					vTaskDelay(2000/portTICK_PERIOD_MS);
   17a94:	23fa      	movs	r3, #250	; 0xfa
   17a96:	00db      	lsls	r3, r3, #3
   17a98:	0018      	movs	r0, r3
   17a9a:	4b6c      	ldr	r3, [pc, #432]	; (17c4c <vTask_GSM_service+0x3e0>)
   17a9c:	4798      	blx	r3
   17a9e:	e7a5      	b.n	179ec <vTask_GSM_service+0x180>
				}
			}
			else
			{
				if(mcuWakeUpFromSleep)
   17aa0:	4b5e      	ldr	r3, [pc, #376]	; (17c1c <vTask_GSM_service+0x3b0>)
   17aa2:	781b      	ldrb	r3, [r3, #0]
   17aa4:	b2db      	uxtb	r3, r3
   17aa6:	2b00      	cmp	r3, #0
   17aa8:	d00c      	beq.n	17ac4 <vTask_GSM_service+0x258>
				{
					mcuWakeUpFromSleep=false;
   17aaa:	4b5c      	ldr	r3, [pc, #368]	; (17c1c <vTask_GSM_service+0x3b0>)
   17aac:	2200      	movs	r2, #0
   17aae:	701a      	strb	r2, [r3, #0]
					gsm_module_exit_sleep(false);
   17ab0:	2000      	movs	r0, #0
   17ab2:	4b6d      	ldr	r3, [pc, #436]	; (17c68 <vTask_GSM_service+0x3fc>)
   17ab4:	4798      	blx	r3
					if(gsm_enable_csqn_urc()==GSM_ERROR_NONE)
   17ab6:	4b73      	ldr	r3, [pc, #460]	; (17c84 <vTask_GSM_service+0x418>)
   17ab8:	4798      	blx	r3
   17aba:	1e03      	subs	r3, r0, #0
   17abc:	d102      	bne.n	17ac4 <vTask_GSM_service+0x258>
					{
						autoNetworkDetection = true;
   17abe:	4b56      	ldr	r3, [pc, #344]	; (17c18 <vTask_GSM_service+0x3ac>)
   17ac0:	2201      	movs	r2, #1
   17ac2:	701a      	strb	r2, [r3, #0]
				
				
				/************************************************************************/
				/* Firmware Update Status SMS                                           */
				/************************************************************************/
				if(bootloader_parameter.firmware_update_process_completed)
   17ac4:	4b73      	ldr	r3, [pc, #460]	; (17c94 <vTask_GSM_service+0x428>)
   17ac6:	799b      	ldrb	r3, [r3, #6]
   17ac8:	2b00      	cmp	r3, #0
   17aca:	d001      	beq.n	17ad0 <vTask_GSM_service+0x264>
				{
					sendFWUpdateSMS();
   17acc:	4b72      	ldr	r3, [pc, #456]	; (17c98 <vTask_GSM_service+0x42c>)
   17ace:	4798      	blx	r3
				}
				
				if ((boolOne_Time_Msg_Delete_Flag == false) && (boolGsm_config_flag == true))
   17ad0:	4b40      	ldr	r3, [pc, #256]	; (17bd4 <vTask_GSM_service+0x368>)
   17ad2:	781b      	ldrb	r3, [r3, #0]
   17ad4:	b2db      	uxtb	r3, r3
   17ad6:	2201      	movs	r2, #1
   17ad8:	4053      	eors	r3, r2
   17ada:	b2db      	uxtb	r3, r3
   17adc:	2b00      	cmp	r3, #0
   17ade:	d015      	beq.n	17b0c <vTask_GSM_service+0x2a0>
   17ae0:	4b3b      	ldr	r3, [pc, #236]	; (17bd0 <vTask_GSM_service+0x364>)
   17ae2:	781b      	ldrb	r3, [r3, #0]
   17ae4:	b2db      	uxtb	r3, r3
   17ae6:	2b00      	cmp	r3, #0
   17ae8:	d010      	beq.n	17b0c <vTask_GSM_service+0x2a0>
				{
					if (gsm_delete_all_sms() == GSM_ERROR_NONE)
   17aea:	4b6c      	ldr	r3, [pc, #432]	; (17c9c <vTask_GSM_service+0x430>)
   17aec:	4798      	blx	r3
   17aee:	1e03      	subs	r3, r0, #0
   17af0:	d107      	bne.n	17b02 <vTask_GSM_service+0x296>
					{
						boolOne_Time_Msg_Delete_Flag = true;
   17af2:	4b38      	ldr	r3, [pc, #224]	; (17bd4 <vTask_GSM_service+0x368>)
   17af4:	2201      	movs	r2, #1
   17af6:	701a      	strb	r2, [r3, #0]
						initialized = true;
   17af8:	4b31      	ldr	r3, [pc, #196]	; (17bc0 <vTask_GSM_service+0x354>)
   17afa:	2201      	movs	r2, #1
   17afc:	701a      	strb	r2, [r3, #0]
					if (gsm_delete_all_sms() == GSM_ERROR_NONE)
   17afe:	f000 fccc 	bl	1849a <vTask_GSM_service+0xc2e>
					}
					else
					{
						boolOne_Time_Msg_Delete_Flag = false;
   17b02:	4b34      	ldr	r3, [pc, #208]	; (17bd4 <vTask_GSM_service+0x368>)
   17b04:	2200      	movs	r2, #0
   17b06:	701a      	strb	r2, [r3, #0]
					if (gsm_delete_all_sms() == GSM_ERROR_NONE)
   17b08:	f000 fcc7 	bl	1849a <vTask_GSM_service+0xc2e>
					}
				}
				else
				{
					
					if (currentStatus == 'N' && currentCallStatus == 'N')
   17b0c:	4b38      	ldr	r3, [pc, #224]	; (17bf0 <vTask_GSM_service+0x384>)
   17b0e:	781b      	ldrb	r3, [r3, #0]
   17b10:	b2db      	uxtb	r3, r3
   17b12:	2b4e      	cmp	r3, #78	; 0x4e
   17b14:	d000      	beq.n	17b18 <vTask_GSM_service+0x2ac>
   17b16:	e0d3      	b.n	17cc0 <vTask_GSM_service+0x454>
   17b18:	4b36      	ldr	r3, [pc, #216]	; (17bf4 <vTask_GSM_service+0x388>)
   17b1a:	781b      	ldrb	r3, [r3, #0]
   17b1c:	b2db      	uxtb	r3, r3
   17b1e:	2b4e      	cmp	r3, #78	; 0x4e
   17b20:	d000      	beq.n	17b24 <vTask_GSM_service+0x2b8>
   17b22:	e0cd      	b.n	17cc0 <vTask_GSM_service+0x454>
					{
						if(getAllPhaseState()==AC_OFF &&  isGSMModuleAwake && gsm_module_sleep_elligible())
   17b24:	4b5e      	ldr	r3, [pc, #376]	; (17ca0 <vTask_GSM_service+0x434>)
   17b26:	4798      	blx	r3
   17b28:	1e03      	subs	r3, r0, #0
   17b2a:	d115      	bne.n	17b58 <vTask_GSM_service+0x2ec>
   17b2c:	4b4a      	ldr	r3, [pc, #296]	; (17c58 <vTask_GSM_service+0x3ec>)
   17b2e:	781b      	ldrb	r3, [r3, #0]
   17b30:	b2db      	uxtb	r3, r3
   17b32:	2b00      	cmp	r3, #0
   17b34:	d010      	beq.n	17b58 <vTask_GSM_service+0x2ec>
   17b36:	4b5b      	ldr	r3, [pc, #364]	; (17ca4 <vTask_GSM_service+0x438>)
   17b38:	4798      	blx	r3
   17b3a:	1e03      	subs	r3, r0, #0
   17b3c:	d00c      	beq.n	17b58 <vTask_GSM_service+0x2ec>
						{
							if(motor_checkSleepElligible())
   17b3e:	4b5a      	ldr	r3, [pc, #360]	; (17ca8 <vTask_GSM_service+0x43c>)
   17b40:	4798      	blx	r3
   17b42:	1e03      	subs	r3, r0, #0
   17b44:	d008      	beq.n	17b58 <vTask_GSM_service+0x2ec>
							{
								if(gsm_disable_csqn_urc()==GSM_ERROR_NONE)
   17b46:	4b59      	ldr	r3, [pc, #356]	; (17cac <vTask_GSM_service+0x440>)
   17b48:	4798      	blx	r3
   17b4a:	1e03      	subs	r3, r0, #0
   17b4c:	d102      	bne.n	17b54 <vTask_GSM_service+0x2e8>
								{
									autoNetworkDetection=false;
   17b4e:	4b32      	ldr	r3, [pc, #200]	; (17c18 <vTask_GSM_service+0x3ac>)
   17b50:	2200      	movs	r2, #0
   17b52:	701a      	strb	r2, [r3, #0]
								}
								gsm_module_enter_sleep();				//this statement goes after sending AT command, to ignore the wakeup of the module done by sending AT Command.
   17b54:	4b56      	ldr	r3, [pc, #344]	; (17cb0 <vTask_GSM_service+0x444>)
   17b56:	4798      	blx	r3
							}
						}

						if(isGSMModuleAwake)
   17b58:	4b3f      	ldr	r3, [pc, #252]	; (17c58 <vTask_GSM_service+0x3ec>)
   17b5a:	781b      	ldrb	r3, [r3, #0]
   17b5c:	b2db      	uxtb	r3, r3
   17b5e:	2b00      	cmp	r3, #0
   17b60:	d017      	beq.n	17b92 <vTask_GSM_service+0x326>
						{
							////Update network
							if (((xTaskGetTickCount() - network_update_time)>= (1*60*1000)))
   17b62:	4b4a      	ldr	r3, [pc, #296]	; (17c8c <vTask_GSM_service+0x420>)
   17b64:	4798      	blx	r3
   17b66:	0002      	movs	r2, r0
   17b68:	2396      	movs	r3, #150	; 0x96
   17b6a:	005b      	lsls	r3, r3, #1
   17b6c:	18fb      	adds	r3, r7, r3
   17b6e:	681b      	ldr	r3, [r3, #0]
   17b70:	1ad3      	subs	r3, r2, r3
   17b72:	4a50      	ldr	r2, [pc, #320]	; (17cb4 <vTask_GSM_service+0x448>)
   17b74:	4293      	cmp	r3, r2
   17b76:	d90c      	bls.n	17b92 <vTask_GSM_service+0x326>
							{
								network_update_time = xTaskGetTickCount();
   17b78:	4b44      	ldr	r3, [pc, #272]	; (17c8c <vTask_GSM_service+0x420>)
   17b7a:	4798      	blx	r3
   17b7c:	0003      	movs	r3, r0
   17b7e:	2296      	movs	r2, #150	; 0x96
   17b80:	0052      	lsls	r2, r2, #1
   17b82:	18ba      	adds	r2, r7, r2
   17b84:	6013      	str	r3, [r2, #0]
								Signal_Strength = gsm_getsignalstrength();
   17b86:	4b40      	ldr	r3, [pc, #256]	; (17c88 <vTask_GSM_service+0x41c>)
   17b88:	4798      	blx	r3
   17b8a:	0003      	movs	r3, r0
   17b8c:	001a      	movs	r2, r3
   17b8e:	4b13      	ldr	r3, [pc, #76]	; (17bdc <vTask_GSM_service+0x370>)
   17b90:	701a      	strb	r2, [r3, #0]
							}
						}
						
						setObtainEvent();
   17b92:	4b49      	ldr	r3, [pc, #292]	; (17cb8 <vTask_GSM_service+0x44c>)
   17b94:	4798      	blx	r3
						if (eventStaged || m2mEventStaged)
   17b96:	4b1c      	ldr	r3, [pc, #112]	; (17c08 <vTask_GSM_service+0x39c>)
   17b98:	781b      	ldrb	r3, [r3, #0]
   17b9a:	2b00      	cmp	r3, #0
   17b9c:	d104      	bne.n	17ba8 <vTask_GSM_service+0x33c>
   17b9e:	4b25      	ldr	r3, [pc, #148]	; (17c34 <vTask_GSM_service+0x3c8>)
   17ba0:	781b      	ldrb	r3, [r3, #0]
   17ba2:	2b00      	cmp	r3, #0
   17ba4:	d100      	bne.n	17ba8 <vTask_GSM_service+0x33c>
   17ba6:	e0d4      	b.n	17d52 <vTask_GSM_service+0x4e6>
						{
							operateOnStagedEvent();
   17ba8:	4b44      	ldr	r3, [pc, #272]	; (17cbc <vTask_GSM_service+0x450>)
   17baa:	4798      	blx	r3
						if (eventStaged || m2mEventStaged)
   17bac:	e0d1      	b.n	17d52 <vTask_GSM_service+0x4e6>
   17bae:	46c0      	nop			; (mov r8, r8)
   17bb0:	41004480 	.word	0x41004480
   17bb4:	0001431d 	.word	0x0001431d
   17bb8:	00022be1 	.word	0x00022be1
   17bbc:	00012165 	.word	0x00012165
   17bc0:	2000079d 	.word	0x2000079d
   17bc4:	2000079c 	.word	0x2000079c
   17bc8:	2000077f 	.word	0x2000077f
   17bcc:	2000068e 	.word	0x2000068e
   17bd0:	200007c4 	.word	0x200007c4
   17bd4:	200007d1 	.word	0x200007d1
   17bd8:	200006cc 	.word	0x200006cc
   17bdc:	20000789 	.word	0x20000789
   17be0:	200007d6 	.word	0x200007d6
   17be4:	20000862 	.word	0x20000862
   17be8:	20000764 	.word	0x20000764
   17bec:	200006e4 	.word	0x200006e4
   17bf0:	200007dc 	.word	0x200007dc
   17bf4:	2000078f 	.word	0x2000078f
   17bf8:	2000079e 	.word	0x2000079e
   17bfc:	20000744 	.word	0x20000744
   17c00:	20000772 	.word	0x20000772
   17c04:	20000777 	.word	0x20000777
   17c08:	200007d3 	.word	0x200007d3
   17c0c:	20000775 	.word	0x20000775
   17c10:	20000798 	.word	0x20000798
   17c14:	200006e5 	.word	0x200006e5
   17c18:	20000861 	.word	0x20000861
   17c1c:	20000840 	.word	0x20000840
   17c20:	2000062c 	.word	0x2000062c
   17c24:	2000080b 	.word	0x2000080b
   17c28:	2000072c 	.word	0x2000072c
   17c2c:	2000072d 	.word	0x2000072d
   17c30:	200007d4 	.word	0x200007d4
   17c34:	2000078e 	.word	0x2000078e
   17c38:	20000743 	.word	0x20000743
   17c3c:	200007d0 	.word	0x200007d0
   17c40:	00014341 	.word	0x00014341
   17c44:	41004490 	.word	0x41004490
   17c48:	00000bb8 	.word	0x00000bb8
   17c4c:	0001fd79 	.word	0x0001fd79
   17c50:	fffeffff 	.word	0xfffeffff
   17c54:	00001388 	.word	0x00001388
   17c58:	20000684 	.word	0x20000684
   17c5c:	00014385 	.word	0x00014385
   17c60:	20000694 	.word	0x20000694
   17c64:	20000690 	.word	0x20000690
   17c68:	00012319 	.word	0x00012319
   17c6c:	00014a8d 	.word	0x00014a8d
   17c70:	20000763 	.word	0x20000763
   17c74:	00014525 	.word	0x00014525
   17c78:	00014d81 	.word	0x00014d81
   17c7c:	00012615 	.word	0x00012615
   17c80:	00013391 	.word	0x00013391
   17c84:	00012b29 	.word	0x00012b29
   17c88:	000128e1 	.word	0x000128e1
   17c8c:	000200dd 	.word	0x000200dd
   17c90:	200006de 	.word	0x200006de
   17c94:	200005f8 	.word	0x200005f8
   17c98:	0001777d 	.word	0x0001777d
   17c9c:	00012701 	.word	0x00012701
   17ca0:	0001aebd 	.word	0x0001aebd
   17ca4:	0001239d 	.word	0x0001239d
   17ca8:	0001c965 	.word	0x0001c965
   17cac:	00012b59 	.word	0x00012b59
   17cb0:	00012389 	.word	0x00012389
   17cb4:	0000ea5f 	.word	0x0000ea5f
   17cb8:	000143d9 	.word	0x000143d9
   17cbc:	00014419 	.word	0x00014419
						}
					}
					else if (currentStatus == 'I' || currentStatus == 'R')
   17cc0:	4bbf      	ldr	r3, [pc, #764]	; (17fc0 <vTask_GSM_service+0x754>)
   17cc2:	781b      	ldrb	r3, [r3, #0]
   17cc4:	b2db      	uxtb	r3, r3
   17cc6:	2b49      	cmp	r3, #73	; 0x49
   17cc8:	d004      	beq.n	17cd4 <vTask_GSM_service+0x468>
   17cca:	4bbd      	ldr	r3, [pc, #756]	; (17fc0 <vTask_GSM_service+0x754>)
   17ccc:	781b      	ldrb	r3, [r3, #0]
   17cce:	b2db      	uxtb	r3, r3
   17cd0:	2b52      	cmp	r3, #82	; 0x52
   17cd2:	d13f      	bne.n	17d54 <vTask_GSM_service+0x4e8>
					{
						if (callTimerExpire())
   17cd4:	4bbb      	ldr	r3, [pc, #748]	; (17fc4 <vTask_GSM_service+0x758>)
   17cd6:	4798      	blx	r3
   17cd8:	1e03      	subs	r3, r0, #0
   17cda:	d00e      	beq.n	17cfa <vTask_GSM_service+0x48e>
						{
							char t1 = actionType;
   17cdc:	2393      	movs	r3, #147	; 0x93
   17cde:	005b      	lsls	r3, r3, #1
   17ce0:	18fb      	adds	r3, r7, r3
   17ce2:	4ab9      	ldr	r2, [pc, #740]	; (17fc8 <vTask_GSM_service+0x75c>)
   17ce4:	7812      	ldrb	r2, [r2, #0]
   17ce6:	701a      	strb	r2, [r3, #0]
							endCall();
   17ce8:	4bb8      	ldr	r3, [pc, #736]	; (17fcc <vTask_GSM_service+0x760>)
   17cea:	4798      	blx	r3
							checkRespSMS(t1);
   17cec:	2393      	movs	r3, #147	; 0x93
   17cee:	005b      	lsls	r3, r3, #1
   17cf0:	18fb      	adds	r3, r7, r3
   17cf2:	781b      	ldrb	r3, [r3, #0]
   17cf4:	0018      	movs	r0, r3
   17cf6:	4bb6      	ldr	r3, [pc, #728]	; (17fd0 <vTask_GSM_service+0x764>)
   17cf8:	4798      	blx	r3
						}
						if (factory_settings_parameter_struct.ENABLE_M2M)
   17cfa:	4bb6      	ldr	r3, [pc, #728]	; (17fd4 <vTask_GSM_service+0x768>)
   17cfc:	78db      	ldrb	r3, [r3, #3]
   17cfe:	2b00      	cmp	r3, #0
   17d00:	d020      	beq.n	17d44 <vTask_GSM_service+0x4d8>
						{
							if(m2mEvent && callAccepted)
   17d02:	4bb5      	ldr	r3, [pc, #724]	; (17fd8 <vTask_GSM_service+0x76c>)
   17d04:	781b      	ldrb	r3, [r3, #0]
   17d06:	2b00      	cmp	r3, #0
   17d08:	d01c      	beq.n	17d44 <vTask_GSM_service+0x4d8>
   17d0a:	4bb4      	ldr	r3, [pc, #720]	; (17fdc <vTask_GSM_service+0x770>)
   17d0c:	781b      	ldrb	r3, [r3, #0]
   17d0e:	2b00      	cmp	r3, #0
   17d10:	d018      	beq.n	17d44 <vTask_GSM_service+0x4d8>
							{
								if(!keyPressed &&  xTaskGetTickCount() - callCutWait > 2000)
   17d12:	4bb3      	ldr	r3, [pc, #716]	; (17fe0 <vTask_GSM_service+0x774>)
   17d14:	781b      	ldrb	r3, [r3, #0]
   17d16:	2201      	movs	r2, #1
   17d18:	4053      	eors	r3, r2
   17d1a:	b2db      	uxtb	r3, r3
   17d1c:	2b00      	cmp	r3, #0
   17d1e:	d011      	beq.n	17d44 <vTask_GSM_service+0x4d8>
   17d20:	4bb0      	ldr	r3, [pc, #704]	; (17fe4 <vTask_GSM_service+0x778>)
   17d22:	4798      	blx	r3
   17d24:	0002      	movs	r2, r0
   17d26:	4bb0      	ldr	r3, [pc, #704]	; (17fe8 <vTask_GSM_service+0x77c>)
   17d28:	681b      	ldr	r3, [r3, #0]
   17d2a:	1ad2      	subs	r2, r2, r3
   17d2c:	23fa      	movs	r3, #250	; 0xfa
   17d2e:	00db      	lsls	r3, r3, #3
   17d30:	429a      	cmp	r2, r3
   17d32:	d907      	bls.n	17d44 <vTask_GSM_service+0x4d8>
								{
									keyPressed=true;
   17d34:	4baa      	ldr	r3, [pc, #680]	; (17fe0 <vTask_GSM_service+0x774>)
   17d36:	2201      	movs	r2, #1
   17d38:	701a      	strb	r2, [r3, #0]
									sendDTMFTone(m2mEventNo);
   17d3a:	4bac      	ldr	r3, [pc, #688]	; (17fec <vTask_GSM_service+0x780>)
   17d3c:	781b      	ldrb	r3, [r3, #0]
   17d3e:	0018      	movs	r0, r3
   17d40:	4bab      	ldr	r3, [pc, #684]	; (17ff0 <vTask_GSM_service+0x784>)
   17d42:	4798      	blx	r3
								}
							}
						}
						if (playSoundElligible())
   17d44:	4bab      	ldr	r3, [pc, #684]	; (17ff4 <vTask_GSM_service+0x788>)
   17d46:	4798      	blx	r3
   17d48:	1e03      	subs	r3, r0, #0
   17d4a:	d003      	beq.n	17d54 <vTask_GSM_service+0x4e8>
						{
							triggerPlaySound();
   17d4c:	4baa      	ldr	r3, [pc, #680]	; (17ff8 <vTask_GSM_service+0x78c>)
   17d4e:	4798      	blx	r3
   17d50:	e000      	b.n	17d54 <vTask_GSM_service+0x4e8>
						if (eventStaged || m2mEventStaged)
   17d52:	46c0      	nop			; (mov r8, r8)
						}
					}
					//////////////////////////////////////////////////////////////////////////
					char response[64] = {0};
   17d54:	4ba9      	ldr	r3, [pc, #676]	; (17ffc <vTask_GSM_service+0x790>)
   17d56:	2298      	movs	r2, #152	; 0x98
   17d58:	0052      	lsls	r2, r2, #1
   17d5a:	4694      	mov	ip, r2
   17d5c:	44bc      	add	ip, r7
   17d5e:	4463      	add	r3, ip
   17d60:	0018      	movs	r0, r3
   17d62:	2340      	movs	r3, #64	; 0x40
   17d64:	001a      	movs	r2, r3
   17d66:	2100      	movs	r1, #0
   17d68:	4ba5      	ldr	r3, [pc, #660]	; (18000 <vTask_GSM_service+0x794>)
   17d6a:	4798      	blx	r3
					if (gsm_read_response_line(response,sizeof(response)))
   17d6c:	230c      	movs	r3, #12
   17d6e:	18fb      	adds	r3, r7, r3
   17d70:	2140      	movs	r1, #64	; 0x40
   17d72:	0018      	movs	r0, r3
   17d74:	4ba3      	ldr	r3, [pc, #652]	; (18004 <vTask_GSM_service+0x798>)
   17d76:	4798      	blx	r3
   17d78:	1e03      	subs	r3, r0, #0
   17d7a:	d100      	bne.n	17d7e <vTask_GSM_service+0x512>
   17d7c:	e636      	b.n	179ec <vTask_GSM_service+0x180>
					{
						uint8_t sms_index;
						sms_index = gsm_responseLine_isNew_SMS_Received(response);
   17d7e:	2326      	movs	r3, #38	; 0x26
   17d80:	33ff      	adds	r3, #255	; 0xff
   17d82:	18fc      	adds	r4, r7, r3
   17d84:	230c      	movs	r3, #12
   17d86:	18fb      	adds	r3, r7, r3
   17d88:	0018      	movs	r0, r3
   17d8a:	4b9f      	ldr	r3, [pc, #636]	; (18008 <vTask_GSM_service+0x79c>)
   17d8c:	4798      	blx	r3
   17d8e:	0003      	movs	r3, r0
   17d90:	7023      	strb	r3, [r4, #0]
						if (sms_index>0)
   17d92:	2326      	movs	r3, #38	; 0x26
   17d94:	33ff      	adds	r3, #255	; 0xff
   17d96:	18fb      	adds	r3, r7, r3
   17d98:	781b      	ldrb	r3, [r3, #0]
   17d9a:	2b00      	cmp	r3, #0
   17d9c:	d100      	bne.n	17da0 <vTask_GSM_service+0x534>
   17d9e:	e0f6      	b.n	17f8e <vTask_GSM_service+0x722>
						{
							char phone_number[15];
							char Received_SMS[160];
							gsm_read_sms(sms_index,phone_number,15,Received_SMS,160);
   17da0:	234c      	movs	r3, #76	; 0x4c
   17da2:	18fa      	adds	r2, r7, r3
   17da4:	1c79      	adds	r1, r7, #1
   17da6:	31ff      	adds	r1, #255	; 0xff
   17da8:	2326      	movs	r3, #38	; 0x26
   17daa:	33ff      	adds	r3, #255	; 0xff
   17dac:	18fb      	adds	r3, r7, r3
   17dae:	7818      	ldrb	r0, [r3, #0]
   17db0:	23a0      	movs	r3, #160	; 0xa0
   17db2:	9300      	str	r3, [sp, #0]
   17db4:	0013      	movs	r3, r2
   17db6:	220f      	movs	r2, #15
   17db8:	4c94      	ldr	r4, [pc, #592]	; (1800c <vTask_GSM_service+0x7a0>)
   17dba:	47a0      	blx	r4
							bool admin = isAdmin(phone_number);
   17dbc:	232c      	movs	r3, #44	; 0x2c
   17dbe:	33ff      	adds	r3, #255	; 0xff
   17dc0:	18fc      	adds	r4, r7, r3
   17dc2:	1c7b      	adds	r3, r7, #1
   17dc4:	33ff      	adds	r3, #255	; 0xff
   17dc6:	0018      	movs	r0, r3
   17dc8:	4b91      	ldr	r3, [pc, #580]	; (18010 <vTask_GSM_service+0x7a4>)
   17dca:	4798      	blx	r3
   17dcc:	0003      	movs	r3, r0
   17dce:	7023      	strb	r3, [r4, #0]
							bool primaryUser = isPrimaryNumber(phone_number);
   17dd0:	2392      	movs	r3, #146	; 0x92
   17dd2:	005b      	lsls	r3, r3, #1
   17dd4:	18fc      	adds	r4, r7, r3
   17dd6:	1c7b      	adds	r3, r7, #1
   17dd8:	33ff      	adds	r3, #255	; 0xff
   17dda:	0018      	movs	r0, r3
   17ddc:	4b8d      	ldr	r3, [pc, #564]	; (18014 <vTask_GSM_service+0x7a8>)
   17dde:	4798      	blx	r3
   17de0:	0003      	movs	r3, r0
   17de2:	7023      	strb	r3, [r4, #0]
							bool alterUsr = isAlterNumber(phone_number);
   17de4:	2324      	movs	r3, #36	; 0x24
   17de6:	33ff      	adds	r3, #255	; 0xff
   17de8:	18fc      	adds	r4, r7, r3
   17dea:	1c7b      	adds	r3, r7, #1
   17dec:	33ff      	adds	r3, #255	; 0xff
   17dee:	0018      	movs	r0, r3
   17df0:	4b89      	ldr	r3, [pc, #548]	; (18018 <vTask_GSM_service+0x7ac>)
   17df2:	4798      	blx	r3
   17df4:	0003      	movs	r3, r0
   17df6:	7023      	strb	r3, [r4, #0]
							bool response_sms_processed_cmd = true;
   17df8:	2395      	movs	r3, #149	; 0x95
   17dfa:	005b      	lsls	r3, r3, #1
   17dfc:	18fb      	adds	r3, r7, r3
   17dfe:	2201      	movs	r2, #1
   17e00:	701a      	strb	r2, [r3, #0]
							
							if(admin)
   17e02:	232c      	movs	r3, #44	; 0x2c
   17e04:	33ff      	adds	r3, #255	; 0xff
   17e06:	18fb      	adds	r3, r7, r3
   17e08:	781b      	ldrb	r3, [r3, #0]
   17e0a:	2b00      	cmp	r3, #0
   17e0c:	d006      	beq.n	17e1c <vTask_GSM_service+0x5b0>
							{
								setCallStateOnLCD(LCDCALLSTATE_INCOMINGSMS,"ADMIN",false);
   17e0e:	4b83      	ldr	r3, [pc, #524]	; (1801c <vTask_GSM_service+0x7b0>)
   17e10:	2200      	movs	r2, #0
   17e12:	0019      	movs	r1, r3
   17e14:	2004      	movs	r0, #4
   17e16:	4b82      	ldr	r3, [pc, #520]	; (18020 <vTask_GSM_service+0x7b4>)
   17e18:	4798      	blx	r3
   17e1a:	e006      	b.n	17e2a <vTask_GSM_service+0x5be>
							}
							else
							{
								setCallStateOnLCD(LCDCALLSTATE_INCOMINGSMS,phone_number,false);
   17e1c:	1c7b      	adds	r3, r7, #1
   17e1e:	33ff      	adds	r3, #255	; 0xff
   17e20:	2200      	movs	r2, #0
   17e22:	0019      	movs	r1, r3
   17e24:	2004      	movs	r0, #4
   17e26:	4b7e      	ldr	r3, [pc, #504]	; (18020 <vTask_GSM_service+0x7b4>)
   17e28:	4798      	blx	r3
							}
							
							StringtoUpperCase(Received_SMS);
   17e2a:	234c      	movs	r3, #76	; 0x4c
   17e2c:	18fb      	adds	r3, r7, r3
   17e2e:	0018      	movs	r0, r3
   17e30:	4b7c      	ldr	r3, [pc, #496]	; (18024 <vTask_GSM_service+0x7b8>)
   17e32:	4798      	blx	r3
							
							if(!admin)
   17e34:	232c      	movs	r3, #44	; 0x2c
   17e36:	33ff      	adds	r3, #255	; 0xff
   17e38:	18fb      	adds	r3, r7, r3
   17e3a:	781b      	ldrb	r3, [r3, #0]
   17e3c:	2201      	movs	r2, #1
   17e3e:	4053      	eors	r3, r2
   17e40:	b2db      	uxtb	r3, r3
   17e42:	2b00      	cmp	r3, #0
   17e44:	d009      	beq.n	17e5a <vTask_GSM_service+0x5ee>
							{
								admin = checkSMSForPassCode(Received_SMS);
   17e46:	232c      	movs	r3, #44	; 0x2c
   17e48:	33ff      	adds	r3, #255	; 0xff
   17e4a:	18fc      	adds	r4, r7, r3
   17e4c:	234c      	movs	r3, #76	; 0x4c
   17e4e:	18fb      	adds	r3, r7, r3
   17e50:	0018      	movs	r0, r3
   17e52:	4b75      	ldr	r3, [pc, #468]	; (18028 <vTask_GSM_service+0x7bc>)
   17e54:	4798      	blx	r3
   17e56:	0003      	movs	r3, r0
   17e58:	7023      	strb	r3, [r4, #0]
							}

							if (admin || primaryUser || alterUsr)
   17e5a:	232c      	movs	r3, #44	; 0x2c
   17e5c:	33ff      	adds	r3, #255	; 0xff
   17e5e:	18fb      	adds	r3, r7, r3
   17e60:	781b      	ldrb	r3, [r3, #0]
   17e62:	2b00      	cmp	r3, #0
   17e64:	d10b      	bne.n	17e7e <vTask_GSM_service+0x612>
   17e66:	2392      	movs	r3, #146	; 0x92
   17e68:	005b      	lsls	r3, r3, #1
   17e6a:	18fb      	adds	r3, r7, r3
   17e6c:	781b      	ldrb	r3, [r3, #0]
   17e6e:	2b00      	cmp	r3, #0
   17e70:	d105      	bne.n	17e7e <vTask_GSM_service+0x612>
   17e72:	2324      	movs	r3, #36	; 0x24
   17e74:	33ff      	adds	r3, #255	; 0xff
   17e76:	18fb      	adds	r3, r7, r3
   17e78:	781b      	ldrb	r3, [r3, #0]
   17e7a:	2b00      	cmp	r3, #0
   17e7c:	d031      	beq.n	17ee2 <vTask_GSM_service+0x676>
							{
								if(StringstartsWith(Received_SMS,"#"))
   17e7e:	4a6b      	ldr	r2, [pc, #428]	; (1802c <vTask_GSM_service+0x7c0>)
   17e80:	234c      	movs	r3, #76	; 0x4c
   17e82:	18fb      	adds	r3, r7, r3
   17e84:	0011      	movs	r1, r2
   17e86:	0018      	movs	r0, r3
   17e88:	4b69      	ldr	r3, [pc, #420]	; (18030 <vTask_GSM_service+0x7c4>)
   17e8a:	4798      	blx	r3
   17e8c:	1e03      	subs	r3, r0, #0
   17e8e:	d013      	beq.n	17eb8 <vTask_GSM_service+0x64c>
								{
									memmove(Received_SMS, Received_SMS+1, strlen(Received_SMS));  //this will remove '#'
   17e90:	234c      	movs	r3, #76	; 0x4c
   17e92:	18fc      	adds	r4, r7, r3
   17e94:	3401      	adds	r4, #1
   17e96:	234c      	movs	r3, #76	; 0x4c
   17e98:	18fb      	adds	r3, r7, r3
   17e9a:	0018      	movs	r0, r3
   17e9c:	4b65      	ldr	r3, [pc, #404]	; (18034 <vTask_GSM_service+0x7c8>)
   17e9e:	4798      	blx	r3
   17ea0:	0002      	movs	r2, r0
   17ea2:	234c      	movs	r3, #76	; 0x4c
   17ea4:	18fb      	adds	r3, r7, r3
   17ea6:	0021      	movs	r1, r4
   17ea8:	0018      	movs	r0, r3
   17eaa:	4b63      	ldr	r3, [pc, #396]	; (18038 <vTask_GSM_service+0x7cc>)
   17eac:	4798      	blx	r3
									response_sms_processed_cmd=false;
   17eae:	2395      	movs	r3, #149	; 0x95
   17eb0:	005b      	lsls	r3, r3, #1
   17eb2:	18fb      	adds	r3, r7, r3
   17eb4:	2200      	movs	r2, #0
   17eb6:	701a      	strb	r2, [r3, #0]
								}
								processOnSMS(Received_SMS,admin,response_sms_processed_cmd,alterUsr,phone_number);
   17eb8:	2324      	movs	r3, #36	; 0x24
   17eba:	33ff      	adds	r3, #255	; 0xff
   17ebc:	18fb      	adds	r3, r7, r3
   17ebe:	781c      	ldrb	r4, [r3, #0]
   17ec0:	2395      	movs	r3, #149	; 0x95
   17ec2:	005b      	lsls	r3, r3, #1
   17ec4:	18fb      	adds	r3, r7, r3
   17ec6:	781a      	ldrb	r2, [r3, #0]
   17ec8:	232c      	movs	r3, #44	; 0x2c
   17eca:	33ff      	adds	r3, #255	; 0xff
   17ecc:	18fb      	adds	r3, r7, r3
   17ece:	7819      	ldrb	r1, [r3, #0]
   17ed0:	234c      	movs	r3, #76	; 0x4c
   17ed2:	18f8      	adds	r0, r7, r3
   17ed4:	1c7b      	adds	r3, r7, #1
   17ed6:	33ff      	adds	r3, #255	; 0xff
   17ed8:	9300      	str	r3, [sp, #0]
   17eda:	0023      	movs	r3, r4
   17edc:	4c57      	ldr	r4, [pc, #348]	; (1803c <vTask_GSM_service+0x7d0>)
   17ede:	47a0      	blx	r4
   17ee0:	e053      	b.n	17f8a <vTask_GSM_service+0x71e>
							}
							else if(isM2MNumber(phone_number))
   17ee2:	1c7b      	adds	r3, r7, #1
   17ee4:	33ff      	adds	r3, #255	; 0xff
   17ee6:	0018      	movs	r0, r3
   17ee8:	4b55      	ldr	r3, [pc, #340]	; (18040 <vTask_GSM_service+0x7d4>)
   17eea:	4798      	blx	r3
   17eec:	1e03      	subs	r3, r0, #0
   17eee:	d01f      	beq.n	17f30 <vTask_GSM_service+0x6c4>
							{
								if(StringstartsWith(Received_SMS,"VMM01"))
   17ef0:	4a54      	ldr	r2, [pc, #336]	; (18044 <vTask_GSM_service+0x7d8>)
   17ef2:	234c      	movs	r3, #76	; 0x4c
   17ef4:	18fb      	adds	r3, r7, r3
   17ef6:	0011      	movs	r1, r2
   17ef8:	0018      	movs	r0, r3
   17efa:	4b4d      	ldr	r3, [pc, #308]	; (18030 <vTask_GSM_service+0x7c4>)
   17efc:	4798      	blx	r3
   17efe:	1e03      	subs	r3, r0, #0
   17f00:	d043      	beq.n	17f8a <vTask_GSM_service+0x71e>
								{
									setM2MVerify(true);
   17f02:	2001      	movs	r0, #1
   17f04:	4b50      	ldr	r3, [pc, #320]	; (18048 <vTask_GSM_service+0x7dc>)
   17f06:	4798      	blx	r3
									getM2MNumber(phone_number);
   17f08:	1c7b      	adds	r3, r7, #1
   17f0a:	33ff      	adds	r3, #255	; 0xff
   17f0c:	0018      	movs	r0, r3
   17f0e:	4b4f      	ldr	r3, [pc, #316]	; (1804c <vTask_GSM_service+0x7e0>)
   17f10:	4798      	blx	r3
									setCallStateOnLCD(LCDCALLSTATE_OUTGOINGSMS,phone_number,false);
   17f12:	1c7b      	adds	r3, r7, #1
   17f14:	33ff      	adds	r3, #255	; 0xff
   17f16:	2200      	movs	r2, #0
   17f18:	0019      	movs	r1, r3
   17f1a:	2005      	movs	r0, #5
   17f1c:	4b40      	ldr	r3, [pc, #256]	; (18020 <vTask_GSM_service+0x7b4>)
   17f1e:	4798      	blx	r3
									gsm_send_sms(phone_number,"VMR02");
   17f20:	4a4b      	ldr	r2, [pc, #300]	; (18050 <vTask_GSM_service+0x7e4>)
   17f22:	1c7b      	adds	r3, r7, #1
   17f24:	33ff      	adds	r3, #255	; 0xff
   17f26:	0011      	movs	r1, r2
   17f28:	0018      	movs	r0, r3
   17f2a:	4b4a      	ldr	r3, [pc, #296]	; (18054 <vTask_GSM_service+0x7e8>)
   17f2c:	4798      	blx	r3
   17f2e:	e02c      	b.n	17f8a <vTask_GSM_service+0x71e>
								}
							}
							else if(factory_settings_parameter_struct.ENABLE_M2M && isM2MRemoteNumber(phone_number))
   17f30:	4b28      	ldr	r3, [pc, #160]	; (17fd4 <vTask_GSM_service+0x768>)
   17f32:	78db      	ldrb	r3, [r3, #3]
   17f34:	2b00      	cmp	r3, #0
   17f36:	d028      	beq.n	17f8a <vTask_GSM_service+0x71e>
   17f38:	1c7b      	adds	r3, r7, #1
   17f3a:	33ff      	adds	r3, #255	; 0xff
   17f3c:	0018      	movs	r0, r3
   17f3e:	4b46      	ldr	r3, [pc, #280]	; (18058 <vTask_GSM_service+0x7ec>)
   17f40:	4798      	blx	r3
   17f42:	1e03      	subs	r3, r0, #0
   17f44:	d021      	beq.n	17f8a <vTask_GSM_service+0x71e>
							{
								if(StringstartsWith(Received_SMS,"VMR02"))
   17f46:	4a42      	ldr	r2, [pc, #264]	; (18050 <vTask_GSM_service+0x7e4>)
   17f48:	234c      	movs	r3, #76	; 0x4c
   17f4a:	18fb      	adds	r3, r7, r3
   17f4c:	0011      	movs	r1, r2
   17f4e:	0018      	movs	r0, r3
   17f50:	4b37      	ldr	r3, [pc, #220]	; (18030 <vTask_GSM_service+0x7c4>)
   17f52:	4798      	blx	r3
   17f54:	1e03      	subs	r3, r0, #0
   17f56:	d018      	beq.n	17f8a <vTask_GSM_service+0x71e>
								{
									setM2MRemoteVerified(true);
   17f58:	2001      	movs	r0, #1
   17f5a:	4b40      	ldr	r3, [pc, #256]	; (1805c <vTask_GSM_service+0x7f0>)
   17f5c:	4798      	blx	r3
									saveM2MSettings(true);
   17f5e:	2001      	movs	r0, #1
   17f60:	4b3f      	ldr	r3, [pc, #252]	; (18060 <vTask_GSM_service+0x7f4>)
   17f62:	4798      	blx	r3
									getActiveNumber(phone_number);
   17f64:	1c7b      	adds	r3, r7, #1
   17f66:	33ff      	adds	r3, #255	; 0xff
   17f68:	0018      	movs	r0, r3
   17f6a:	4b3e      	ldr	r3, [pc, #248]	; (18064 <vTask_GSM_service+0x7f8>)
   17f6c:	4798      	blx	r3
									setCallStateOnLCD(LCDCALLSTATE_OUTGOINGSMS,phone_number,false);
   17f6e:	1c7b      	adds	r3, r7, #1
   17f70:	33ff      	adds	r3, #255	; 0xff
   17f72:	2200      	movs	r2, #0
   17f74:	0019      	movs	r1, r3
   17f76:	2005      	movs	r0, #5
   17f78:	4b29      	ldr	r3, [pc, #164]	; (18020 <vTask_GSM_service+0x7b4>)
   17f7a:	4798      	blx	r3
									gsm_send_sms(phone_number,"M2M TURNED ON");
   17f7c:	4a3a      	ldr	r2, [pc, #232]	; (18068 <vTask_GSM_service+0x7fc>)
   17f7e:	1c7b      	adds	r3, r7, #1
   17f80:	33ff      	adds	r3, #255	; 0xff
   17f82:	0011      	movs	r1, r2
   17f84:	0018      	movs	r0, r3
   17f86:	4b33      	ldr	r3, [pc, #204]	; (18054 <vTask_GSM_service+0x7e8>)
   17f88:	4798      	blx	r3
								}
							}
							gsm_delete_all_sms();
   17f8a:	4b38      	ldr	r3, [pc, #224]	; (1806c <vTask_GSM_service+0x800>)
   17f8c:	4798      	blx	r3


						/************************************************************************/
						/* Automatic Detection of Network Using CSQN URC, and continue to next loop*/
						/************************************************************************/
						if(autoNetworkDetection && gsm_responseLine_isCSQN(response,&Signal_Strength))
   17f8e:	4b38      	ldr	r3, [pc, #224]	; (18070 <vTask_GSM_service+0x804>)
   17f90:	781b      	ldrb	r3, [r3, #0]
   17f92:	2b00      	cmp	r3, #0
   17f94:	d076      	beq.n	18084 <vTask_GSM_service+0x818>
   17f96:	4a37      	ldr	r2, [pc, #220]	; (18074 <vTask_GSM_service+0x808>)
   17f98:	230c      	movs	r3, #12
   17f9a:	18fb      	adds	r3, r7, r3
   17f9c:	0011      	movs	r1, r2
   17f9e:	0018      	movs	r0, r3
   17fa0:	4b35      	ldr	r3, [pc, #212]	; (18078 <vTask_GSM_service+0x80c>)
   17fa2:	4798      	blx	r3
   17fa4:	1e03      	subs	r3, r0, #0
   17fa6:	d06d      	beq.n	18084 <vTask_GSM_service+0x818>
						{
							lastGSMCommunicationTime=lastToLastGSMCommunicationTime;
   17fa8:	4b34      	ldr	r3, [pc, #208]	; (1807c <vTask_GSM_service+0x810>)
   17faa:	681a      	ldr	r2, [r3, #0]
   17fac:	4b34      	ldr	r3, [pc, #208]	; (18080 <vTask_GSM_service+0x814>)
   17fae:	601a      	str	r2, [r3, #0]
							network_update_time = xTaskGetTickCount();
   17fb0:	4b0c      	ldr	r3, [pc, #48]	; (17fe4 <vTask_GSM_service+0x778>)
   17fb2:	4798      	blx	r3
   17fb4:	0003      	movs	r3, r0
   17fb6:	2296      	movs	r2, #150	; 0x96
   17fb8:	0052      	lsls	r2, r2, #1
   17fba:	18ba      	adds	r2, r7, r2
   17fbc:	6013      	str	r3, [r2, #0]
   17fbe:	e515      	b.n	179ec <vTask_GSM_service+0x180>
   17fc0:	200007dc 	.word	0x200007dc
   17fc4:	00014a8d 	.word	0x00014a8d
   17fc8:	20000763 	.word	0x20000763
   17fcc:	00014525 	.word	0x00014525
   17fd0:	00014d81 	.word	0x00014d81
   17fd4:	2000062c 	.word	0x2000062c
   17fd8:	20000743 	.word	0x20000743
   17fdc:	2000079e 	.word	0x2000079e
   17fe0:	200007d0 	.word	0x200007d0
   17fe4:	000200dd 	.word	0x000200dd
   17fe8:	20000814 	.word	0x20000814
   17fec:	2000072d 	.word	0x2000072d
   17ff0:	00017631 	.word	0x00017631
   17ff4:	000148e5 	.word	0x000148e5
   17ff8:	00014931 	.word	0x00014931
   17ffc:	fffffedc 	.word	0xfffffedc
   18000:	000289e3 	.word	0x000289e3
   18004:	000134a9 	.word	0x000134a9
   18008:	0001354d 	.word	0x0001354d
   1800c:	00012cb5 	.word	0x00012cb5
   18010:	00011a79 	.word	0x00011a79
   18014:	0001099d 	.word	0x0001099d
   18018:	00010a0d 	.word	0x00010a0d
   1801c:	0002a288 	.word	0x0002a288
   18020:	0001ce41 	.word	0x0001ce41
   18024:	000141a5 	.word	0x000141a5
   18028:	000176c5 	.word	0x000176c5
   1802c:	0002a290 	.word	0x0002a290
   18030:	00014211 	.word	0x00014211
   18034:	00028c73 	.word	0x00028c73
   18038:	000289bf 	.word	0x000289bf
   1803c:	00014ffd 	.word	0x00014ffd
   18040:	00010a55 	.word	0x00010a55
   18044:	0002a234 	.word	0x0002a234
   18048:	00010b45 	.word	0x00010b45
   1804c:	00010acd 	.word	0x00010acd
   18050:	0002a294 	.word	0x0002a294
   18054:	00012b89 	.word	0x00012b89
   18058:	00010a91 	.word	0x00010a91
   1805c:	00010b95 	.word	0x00010b95
   18060:	00010be5 	.word	0x00010be5
   18064:	00010d21 	.word	0x00010d21
   18068:	0002a29c 	.word	0x0002a29c
   1806c:	00012701 	.word	0x00012701
   18070:	20000861 	.word	0x20000861
   18074:	20000789 	.word	0x20000789
   18078:	00013605 	.word	0x00013605
   1807c:	20000690 	.word	0x20000690
   18080:	20000694 	.word	0x20000694
							continue;
						}


						if (!freezeIncomingCalls &&  (currentStatus == 'N' || currentStatus == 'R') && (currentCallStatus == 'N' || currentCallStatus == 'I')) //Ringing Incoming Call
   18084:	4bd8      	ldr	r3, [pc, #864]	; (183e8 <vTask_GSM_service+0xb7c>)
   18086:	781b      	ldrb	r3, [r3, #0]
   18088:	2201      	movs	r2, #1
   1808a:	4053      	eors	r3, r2
   1808c:	b2db      	uxtb	r3, r3
   1808e:	2b00      	cmp	r3, #0
   18090:	d100      	bne.n	18094 <vTask_GSM_service+0x828>
   18092:	e099      	b.n	181c8 <vTask_GSM_service+0x95c>
   18094:	4bd5      	ldr	r3, [pc, #852]	; (183ec <vTask_GSM_service+0xb80>)
   18096:	781b      	ldrb	r3, [r3, #0]
   18098:	b2db      	uxtb	r3, r3
   1809a:	2b4e      	cmp	r3, #78	; 0x4e
   1809c:	d005      	beq.n	180aa <vTask_GSM_service+0x83e>
   1809e:	4bd3      	ldr	r3, [pc, #844]	; (183ec <vTask_GSM_service+0xb80>)
   180a0:	781b      	ldrb	r3, [r3, #0]
   180a2:	b2db      	uxtb	r3, r3
   180a4:	2b52      	cmp	r3, #82	; 0x52
   180a6:	d000      	beq.n	180aa <vTask_GSM_service+0x83e>
   180a8:	e08e      	b.n	181c8 <vTask_GSM_service+0x95c>
   180aa:	4bd1      	ldr	r3, [pc, #836]	; (183f0 <vTask_GSM_service+0xb84>)
   180ac:	781b      	ldrb	r3, [r3, #0]
   180ae:	b2db      	uxtb	r3, r3
   180b0:	2b4e      	cmp	r3, #78	; 0x4e
   180b2:	d005      	beq.n	180c0 <vTask_GSM_service+0x854>
   180b4:	4bce      	ldr	r3, [pc, #824]	; (183f0 <vTask_GSM_service+0xb84>)
   180b6:	781b      	ldrb	r3, [r3, #0]
   180b8:	b2db      	uxtb	r3, r3
   180ba:	2b49      	cmp	r3, #73	; 0x49
   180bc:	d000      	beq.n	180c0 <vTask_GSM_service+0x854>
   180be:	e083      	b.n	181c8 <vTask_GSM_service+0x95c>
						{
							if (gsm_responseLine_isRinging(response))
   180c0:	230c      	movs	r3, #12
   180c2:	18fb      	adds	r3, r7, r3
   180c4:	0018      	movs	r0, r3
   180c6:	4bcb      	ldr	r3, [pc, #812]	; (183f4 <vTask_GSM_service+0xb88>)
   180c8:	4798      	blx	r3
   180ca:	1e03      	subs	r3, r0, #0
   180cc:	d071      	beq.n	181b2 <vTask_GSM_service+0x946>
							{
								currentStatus = 'R';
   180ce:	4bc7      	ldr	r3, [pc, #796]	; (183ec <vTask_GSM_service+0xb80>)
   180d0:	2252      	movs	r2, #82	; 0x52
   180d2:	701a      	strb	r2, [r3, #0]
								currentCallStatus = 'I';
   180d4:	4bc6      	ldr	r3, [pc, #792]	; (183f0 <vTask_GSM_service+0xb84>)
   180d6:	2249      	movs	r2, #73	; 0x49
   180d8:	701a      	strb	r2, [r3, #0]
								char incoming_caller[20]={0};
   180da:	23ec      	movs	r3, #236	; 0xec
   180dc:	18fb      	adds	r3, r7, r3
   180de:	0018      	movs	r0, r3
   180e0:	2314      	movs	r3, #20
   180e2:	001a      	movs	r2, r3
   180e4:	2100      	movs	r1, #0
   180e6:	4bc4      	ldr	r3, [pc, #784]	; (183f8 <vTask_GSM_service+0xb8c>)
   180e8:	4798      	blx	r3
								inCall = true;
   180ea:	4bc4      	ldr	r3, [pc, #784]	; (183fc <vTask_GSM_service+0xb90>)
   180ec:	2201      	movs	r2, #1
   180ee:	701a      	strb	r2, [r3, #0]
								
								bool new_call = false;
   180f0:	232a      	movs	r3, #42	; 0x2a
   180f2:	33ff      	adds	r3, #255	; 0xff
   180f4:	18fb      	adds	r3, r7, r3
   180f6:	2200      	movs	r2, #0
   180f8:	701a      	strb	r2, [r3, #0]
								for (uint8_t i=0;i<4;i++)
   180fa:	2394      	movs	r3, #148	; 0x94
   180fc:	005b      	lsls	r3, r3, #1
   180fe:	18fb      	adds	r3, r7, r3
   18100:	2200      	movs	r2, #0
   18102:	701a      	strb	r2, [r3, #0]
   18104:	e02f      	b.n	18166 <vTask_GSM_service+0x8fa>
								{
									vTaskDelay(500/portTICK_PERIOD_MS);
   18106:	23fa      	movs	r3, #250	; 0xfa
   18108:	005b      	lsls	r3, r3, #1
   1810a:	0018      	movs	r0, r3
   1810c:	4bbc      	ldr	r3, [pc, #752]	; (18400 <vTask_GSM_service+0xb94>)
   1810e:	4798      	blx	r3
									gsm_read_response_line(response,sizeof(response));
   18110:	230c      	movs	r3, #12
   18112:	18fb      	adds	r3, r7, r3
   18114:	2140      	movs	r1, #64	; 0x40
   18116:	0018      	movs	r0, r3
   18118:	4bba      	ldr	r3, [pc, #744]	; (18404 <vTask_GSM_service+0xb98>)
   1811a:	4798      	blx	r3
									if (gsm_responseLine_get_IncommingCallNo(response,incoming_caller))
   1811c:	23ec      	movs	r3, #236	; 0xec
   1811e:	18fa      	adds	r2, r7, r3
   18120:	230c      	movs	r3, #12
   18122:	18fb      	adds	r3, r7, r3
   18124:	0011      	movs	r1, r2
   18126:	0018      	movs	r0, r3
   18128:	4bb7      	ldr	r3, [pc, #732]	; (18408 <vTask_GSM_service+0xb9c>)
   1812a:	4798      	blx	r3
   1812c:	1e03      	subs	r3, r0, #0
   1812e:	d011      	beq.n	18154 <vTask_GSM_service+0x8e8>
									{
										setCallStateOnLCD(LCDCALLSTATE_RINGING,incoming_caller,false);
   18130:	23ec      	movs	r3, #236	; 0xec
   18132:	18fb      	adds	r3, r7, r3
   18134:	2200      	movs	r2, #0
   18136:	0019      	movs	r1, r3
   18138:	2001      	movs	r0, #1
   1813a:	4bb4      	ldr	r3, [pc, #720]	; (1840c <vTask_GSM_service+0xba0>)
   1813c:	4798      	blx	r3
										new_call = true;
   1813e:	232a      	movs	r3, #42	; 0x2a
   18140:	33ff      	adds	r3, #255	; 0xff
   18142:	18fb      	adds	r3, r7, r3
   18144:	2201      	movs	r2, #1
   18146:	701a      	strb	r2, [r3, #0]
										callCutWait = xTaskGetTickCount();
   18148:	4bb1      	ldr	r3, [pc, #708]	; (18410 <vTask_GSM_service+0xba4>)
   1814a:	4798      	blx	r3
   1814c:	0002      	movs	r2, r0
   1814e:	4bb1      	ldr	r3, [pc, #708]	; (18414 <vTask_GSM_service+0xba8>)
   18150:	601a      	str	r2, [r3, #0]
										break;
   18152:	e00e      	b.n	18172 <vTask_GSM_service+0x906>
								for (uint8_t i=0;i<4;i++)
   18154:	2394      	movs	r3, #148	; 0x94
   18156:	005b      	lsls	r3, r3, #1
   18158:	18fb      	adds	r3, r7, r3
   1815a:	781a      	ldrb	r2, [r3, #0]
   1815c:	2394      	movs	r3, #148	; 0x94
   1815e:	005b      	lsls	r3, r3, #1
   18160:	18fb      	adds	r3, r7, r3
   18162:	3201      	adds	r2, #1
   18164:	701a      	strb	r2, [r3, #0]
   18166:	2394      	movs	r3, #148	; 0x94
   18168:	005b      	lsls	r3, r3, #1
   1816a:	18fb      	adds	r3, r7, r3
   1816c:	781b      	ldrb	r3, [r3, #0]
   1816e:	2b03      	cmp	r3, #3
   18170:	d9c9      	bls.n	18106 <vTask_GSM_service+0x89a>
									}
								}
								if (new_call)
   18172:	232a      	movs	r3, #42	; 0x2a
   18174:	33ff      	adds	r3, #255	; 0xff
   18176:	18fb      	adds	r3, r7, r3
   18178:	781b      	ldrb	r3, [r3, #0]
   1817a:	2b00      	cmp	r3, #0
   1817c:	d100      	bne.n	18180 <vTask_GSM_service+0x914>
   1817e:	e188      	b.n	18492 <vTask_GSM_service+0xc26>
								{
									new_call = false;
   18180:	232a      	movs	r3, #42	; 0x2a
   18182:	33ff      	adds	r3, #255	; 0xff
   18184:	18fb      	adds	r3, r7, r3
   18186:	2200      	movs	r2, #0
   18188:	701a      	strb	r2, [r3, #0]
									if (checkNumber(incoming_caller))
   1818a:	23ec      	movs	r3, #236	; 0xec
   1818c:	18fb      	adds	r3, r7, r3
   1818e:	0018      	movs	r0, r3
   18190:	4ba1      	ldr	r3, [pc, #644]	; (18418 <vTask_GSM_service+0xbac>)
   18192:	4798      	blx	r3
   18194:	1e03      	subs	r3, r0, #0
   18196:	d009      	beq.n	181ac <vTask_GSM_service+0x940>
									{
										acceptCall();
   18198:	4ba0      	ldr	r3, [pc, #640]	; (1841c <vTask_GSM_service+0xbb0>)
   1819a:	4798      	blx	r3
										setCallStateOnLCD(LCDCALLSTATE_INCALL,incoming_caller,false);
   1819c:	23ec      	movs	r3, #236	; 0xec
   1819e:	18fb      	adds	r3, r7, r3
   181a0:	2200      	movs	r2, #0
   181a2:	0019      	movs	r1, r3
   181a4:	2002      	movs	r0, #2
   181a6:	4b99      	ldr	r3, [pc, #612]	; (1840c <vTask_GSM_service+0xba0>)
   181a8:	4798      	blx	r3
							if (gsm_responseLine_isRinging(response))
   181aa:	e172      	b.n	18492 <vTask_GSM_service+0xc26>
									}
									else
									{
										endCall();
   181ac:	4b9c      	ldr	r3, [pc, #624]	; (18420 <vTask_GSM_service+0xbb4>)
   181ae:	4798      	blx	r3
							if (gsm_responseLine_isRinging(response))
   181b0:	e16f      	b.n	18492 <vTask_GSM_service+0xc26>
									}
								}
							}
							else if (gsm_responseLine_isCallCut(response))
   181b2:	230c      	movs	r3, #12
   181b4:	18fb      	adds	r3, r7, r3
   181b6:	0018      	movs	r0, r3
   181b8:	4b9a      	ldr	r3, [pc, #616]	; (18424 <vTask_GSM_service+0xbb8>)
   181ba:	4798      	blx	r3
   181bc:	1e03      	subs	r3, r0, #0
   181be:	d100      	bne.n	181c2 <vTask_GSM_service+0x956>
   181c0:	e167      	b.n	18492 <vTask_GSM_service+0xc26>
							{
								endCall();
   181c2:	4b97      	ldr	r3, [pc, #604]	; (18420 <vTask_GSM_service+0xbb4>)
   181c4:	4798      	blx	r3
							if (gsm_responseLine_isRinging(response))
   181c6:	e164      	b.n	18492 <vTask_GSM_service+0xc26>
							}
						}
						else if (!freezeIncomingCalls && currentStatus == 'I' && currentCallStatus == 'I') //IN CALL INCOMING CALL
   181c8:	4b87      	ldr	r3, [pc, #540]	; (183e8 <vTask_GSM_service+0xb7c>)
   181ca:	781b      	ldrb	r3, [r3, #0]
   181cc:	2201      	movs	r2, #1
   181ce:	4053      	eors	r3, r2
   181d0:	b2db      	uxtb	r3, r3
   181d2:	2b00      	cmp	r3, #0
   181d4:	d045      	beq.n	18262 <vTask_GSM_service+0x9f6>
   181d6:	4b85      	ldr	r3, [pc, #532]	; (183ec <vTask_GSM_service+0xb80>)
   181d8:	781b      	ldrb	r3, [r3, #0]
   181da:	b2db      	uxtb	r3, r3
   181dc:	2b49      	cmp	r3, #73	; 0x49
   181de:	d140      	bne.n	18262 <vTask_GSM_service+0x9f6>
   181e0:	4b83      	ldr	r3, [pc, #524]	; (183f0 <vTask_GSM_service+0xb84>)
   181e2:	781b      	ldrb	r3, [r3, #0]
   181e4:	b2db      	uxtb	r3, r3
   181e6:	2b49      	cmp	r3, #73	; 0x49
   181e8:	d13b      	bne.n	18262 <vTask_GSM_service+0x9f6>
						{
							if (gsm_responseLine_isCallCut(response))
   181ea:	230c      	movs	r3, #12
   181ec:	18fb      	adds	r3, r7, r3
   181ee:	0018      	movs	r0, r3
   181f0:	4b8c      	ldr	r3, [pc, #560]	; (18424 <vTask_GSM_service+0xbb8>)
   181f2:	4798      	blx	r3
   181f4:	1e03      	subs	r3, r0, #0
   181f6:	d002      	beq.n	181fe <vTask_GSM_service+0x992>
							{
								endCall();
   181f8:	4b89      	ldr	r3, [pc, #548]	; (18420 <vTask_GSM_service+0xbb4>)
   181fa:	4798      	blx	r3
							if (gsm_responseLine_isCallCut(response))
   181fc:	e14d      	b.n	1849a <vTask_GSM_service+0xc2e>
							}
							else if(gsm_responseLine_isNew_DTMF_Command_Received(response))
   181fe:	230c      	movs	r3, #12
   18200:	18fb      	adds	r3, r7, r3
   18202:	0018      	movs	r0, r3
   18204:	4b88      	ldr	r3, [pc, #544]	; (18428 <vTask_GSM_service+0xbbc>)
   18206:	4798      	blx	r3
   18208:	1e03      	subs	r3, r0, #0
   1820a:	d024      	beq.n	18256 <vTask_GSM_service+0x9ea>
							{
								char *dtmf_tocken;
								dtmf_tocken = strtok(response,": ");
   1820c:	4a87      	ldr	r2, [pc, #540]	; (1842c <vTask_GSM_service+0xbc0>)
   1820e:	230c      	movs	r3, #12
   18210:	18fb      	adds	r3, r7, r3
   18212:	0011      	movs	r1, r2
   18214:	0018      	movs	r0, r3
   18216:	4b86      	ldr	r3, [pc, #536]	; (18430 <vTask_GSM_service+0xbc4>)
   18218:	4798      	blx	r3
   1821a:	0003      	movs	r3, r0
   1821c:	228e      	movs	r2, #142	; 0x8e
   1821e:	0052      	lsls	r2, r2, #1
   18220:	18ba      	adds	r2, r7, r2
   18222:	6013      	str	r3, [r2, #0]
								dtmf_tocken = strtok(NULL,": ");
   18224:	4b81      	ldr	r3, [pc, #516]	; (1842c <vTask_GSM_service+0xbc0>)
   18226:	0019      	movs	r1, r3
   18228:	2000      	movs	r0, #0
   1822a:	4b81      	ldr	r3, [pc, #516]	; (18430 <vTask_GSM_service+0xbc4>)
   1822c:	4798      	blx	r3
   1822e:	0003      	movs	r3, r0
   18230:	228e      	movs	r2, #142	; 0x8e
   18232:	0052      	lsls	r2, r2, #1
   18234:	18ba      	adds	r2, r7, r2
   18236:	6013      	str	r3, [r2, #0]
								RemoveSpaces(dtmf_tocken);
   18238:	238e      	movs	r3, #142	; 0x8e
   1823a:	005b      	lsls	r3, r3, #1
   1823c:	18fb      	adds	r3, r7, r3
   1823e:	681b      	ldr	r3, [r3, #0]
   18240:	0018      	movs	r0, r3
   18242:	4b7c      	ldr	r3, [pc, #496]	; (18434 <vTask_GSM_service+0xbc8>)
   18244:	4798      	blx	r3
								processOnDTMF(dtmf_tocken);
   18246:	238e      	movs	r3, #142	; 0x8e
   18248:	005b      	lsls	r3, r3, #1
   1824a:	18fb      	adds	r3, r7, r3
   1824c:	681b      	ldr	r3, [r3, #0]
   1824e:	0018      	movs	r0, r3
   18250:	4b79      	ldr	r3, [pc, #484]	; (18438 <vTask_GSM_service+0xbcc>)
   18252:	4798      	blx	r3
							if (gsm_responseLine_isCallCut(response))
   18254:	e121      	b.n	1849a <vTask_GSM_service+0xc2e>
							}
							else
							{
								playSoundAgain(response);
   18256:	230c      	movs	r3, #12
   18258:	18fb      	adds	r3, r7, r3
   1825a:	0018      	movs	r0, r3
   1825c:	4b77      	ldr	r3, [pc, #476]	; (1843c <vTask_GSM_service+0xbd0>)
   1825e:	4798      	blx	r3
							if (gsm_responseLine_isCallCut(response))
   18260:	e11b      	b.n	1849a <vTask_GSM_service+0xc2e>
							}
						}
						else if ((currentStatus == 'N' || currentStatus == 'R') && currentCallStatus == 'O') // OUTGOING CALL
   18262:	4b62      	ldr	r3, [pc, #392]	; (183ec <vTask_GSM_service+0xb80>)
   18264:	781b      	ldrb	r3, [r3, #0]
   18266:	b2db      	uxtb	r3, r3
   18268:	2b4e      	cmp	r3, #78	; 0x4e
   1826a:	d004      	beq.n	18276 <vTask_GSM_service+0xa0a>
   1826c:	4b5f      	ldr	r3, [pc, #380]	; (183ec <vTask_GSM_service+0xb80>)
   1826e:	781b      	ldrb	r3, [r3, #0]
   18270:	b2db      	uxtb	r3, r3
   18272:	2b52      	cmp	r3, #82	; 0x52
   18274:	d163      	bne.n	1833e <vTask_GSM_service+0xad2>
   18276:	4b5e      	ldr	r3, [pc, #376]	; (183f0 <vTask_GSM_service+0xb84>)
   18278:	781b      	ldrb	r3, [r3, #0]
   1827a:	b2db      	uxtb	r3, r3
   1827c:	2b4f      	cmp	r3, #79	; 0x4f
   1827e:	d15e      	bne.n	1833e <vTask_GSM_service+0xad2>
						{
							if (OutGoingcallState(response) == 'R')
   18280:	230c      	movs	r3, #12
   18282:	18fb      	adds	r3, r7, r3
   18284:	0018      	movs	r0, r3
   18286:	4b6e      	ldr	r3, [pc, #440]	; (18440 <vTask_GSM_service+0xbd4>)
   18288:	4798      	blx	r3
   1828a:	0003      	movs	r3, r0
   1828c:	2b52      	cmp	r3, #82	; 0x52
   1828e:	d10b      	bne.n	182a8 <vTask_GSM_service+0xa3c>
							{
								callCutWait = xTaskGetTickCount();
   18290:	4b5f      	ldr	r3, [pc, #380]	; (18410 <vTask_GSM_service+0xba4>)
   18292:	4798      	blx	r3
   18294:	0002      	movs	r2, r0
   18296:	4b5f      	ldr	r3, [pc, #380]	; (18414 <vTask_GSM_service+0xba8>)
   18298:	601a      	str	r2, [r3, #0]
								currentStatus = 'R';
   1829a:	4b54      	ldr	r3, [pc, #336]	; (183ec <vTask_GSM_service+0xb80>)
   1829c:	2252      	movs	r2, #82	; 0x52
   1829e:	701a      	strb	r2, [r3, #0]
								currentCallStatus = 'O';
   182a0:	4b53      	ldr	r3, [pc, #332]	; (183f0 <vTask_GSM_service+0xb84>)
   182a2:	224f      	movs	r2, #79	; 0x4f
   182a4:	701a      	strb	r2, [r3, #0]
							if (OutGoingcallState(response) == 'R')
   182a6:	e0f7      	b.n	18498 <vTask_GSM_service+0xc2c>
							}
							else if (gsm_responseLine_isCallCut(response) || OutGoingcallState(response) == 'E') //
   182a8:	230c      	movs	r3, #12
   182aa:	18fb      	adds	r3, r7, r3
   182ac:	0018      	movs	r0, r3
   182ae:	4b5d      	ldr	r3, [pc, #372]	; (18424 <vTask_GSM_service+0xbb8>)
   182b0:	4798      	blx	r3
   182b2:	1e03      	subs	r3, r0, #0
   182b4:	d107      	bne.n	182c6 <vTask_GSM_service+0xa5a>
   182b6:	230c      	movs	r3, #12
   182b8:	18fb      	adds	r3, r7, r3
   182ba:	0018      	movs	r0, r3
   182bc:	4b60      	ldr	r3, [pc, #384]	; (18440 <vTask_GSM_service+0xbd4>)
   182be:	4798      	blx	r3
   182c0:	0003      	movs	r3, r0
   182c2:	2b45      	cmp	r3, #69	; 0x45
   182c4:	d110      	bne.n	182e8 <vTask_GSM_service+0xa7c>
							{
								char t1 = actionType;
   182c6:	231c      	movs	r3, #28
   182c8:	33ff      	adds	r3, #255	; 0xff
   182ca:	18fb      	adds	r3, r7, r3
   182cc:	4a5d      	ldr	r2, [pc, #372]	; (18444 <vTask_GSM_service+0xbd8>)
   182ce:	7812      	ldrb	r2, [r2, #0]
   182d0:	701a      	strb	r2, [r3, #0]
								endCall();
   182d2:	4b53      	ldr	r3, [pc, #332]	; (18420 <vTask_GSM_service+0xbb4>)
   182d4:	4798      	blx	r3
								checkRespSMS(t1);
   182d6:	231c      	movs	r3, #28
   182d8:	33ff      	adds	r3, #255	; 0xff
   182da:	18fb      	adds	r3, r7, r3
   182dc:	781b      	ldrb	r3, [r3, #0]
   182de:	0018      	movs	r0, r3
   182e0:	4b59      	ldr	r3, [pc, #356]	; (18448 <vTask_GSM_service+0xbdc>)
   182e2:	4798      	blx	r3
							{
   182e4:	46c0      	nop			; (mov r8, r8)
							if (OutGoingcallState(response) == 'R')
   182e6:	e0d7      	b.n	18498 <vTask_GSM_service+0xc2c>
							}
							else if (OutGoingcallState(response) == 'I')
   182e8:	230c      	movs	r3, #12
   182ea:	18fb      	adds	r3, r7, r3
   182ec:	0018      	movs	r0, r3
   182ee:	4b54      	ldr	r3, [pc, #336]	; (18440 <vTask_GSM_service+0xbd4>)
   182f0:	4798      	blx	r3
   182f2:	0003      	movs	r3, r0
   182f4:	2b49      	cmp	r3, #73	; 0x49
   182f6:	d000      	beq.n	182fa <vTask_GSM_service+0xa8e>
   182f8:	e0ce      	b.n	18498 <vTask_GSM_service+0xc2c>
							{
								callCutWait = xTaskGetTickCount();
   182fa:	4b45      	ldr	r3, [pc, #276]	; (18410 <vTask_GSM_service+0xba4>)
   182fc:	4798      	blx	r3
   182fe:	0002      	movs	r2, r0
   18300:	4b44      	ldr	r3, [pc, #272]	; (18414 <vTask_GSM_service+0xba8>)
   18302:	601a      	str	r2, [r3, #0]
								currentStatus = 'I';
   18304:	4b39      	ldr	r3, [pc, #228]	; (183ec <vTask_GSM_service+0xb80>)
   18306:	2249      	movs	r2, #73	; 0x49
   18308:	701a      	strb	r2, [r3, #0]
								currentCallStatus = 'O';
   1830a:	4b39      	ldr	r3, [pc, #228]	; (183f0 <vTask_GSM_service+0xb84>)
   1830c:	224f      	movs	r2, #79	; 0x4f
   1830e:	701a      	strb	r2, [r3, #0]
								callAccepted = true;
   18310:	4b4e      	ldr	r3, [pc, #312]	; (1844c <vTask_GSM_service+0xbe0>)
   18312:	2201      	movs	r2, #1
   18314:	701a      	strb	r2, [r3, #0]
								setCallStateOnLCD(LCDCALLSTATE_INCALL,NULL,true);
   18316:	2201      	movs	r2, #1
   18318:	2100      	movs	r1, #0
   1831a:	2002      	movs	r0, #2
   1831c:	4b3b      	ldr	r3, [pc, #236]	; (1840c <vTask_GSM_service+0xba0>)
   1831e:	4798      	blx	r3
								if (!m2mEvent)
   18320:	4b4b      	ldr	r3, [pc, #300]	; (18450 <vTask_GSM_service+0xbe4>)
   18322:	781b      	ldrb	r3, [r3, #0]
   18324:	2201      	movs	r2, #1
   18326:	4053      	eors	r3, r2
   18328:	b2db      	uxtb	r3, r3
   1832a:	2b00      	cmp	r3, #0
   1832c:	d100      	bne.n	18330 <vTask_GSM_service+0xac4>
   1832e:	e0b3      	b.n	18498 <vTask_GSM_service+0xc2c>
								{
									playSound(actionType,true);
   18330:	4b44      	ldr	r3, [pc, #272]	; (18444 <vTask_GSM_service+0xbd8>)
   18332:	781b      	ldrb	r3, [r3, #0]
   18334:	2101      	movs	r1, #1
   18336:	0018      	movs	r0, r3
   18338:	4b46      	ldr	r3, [pc, #280]	; (18454 <vTask_GSM_service+0xbe8>)
   1833a:	4798      	blx	r3
							if (OutGoingcallState(response) == 'R')
   1833c:	e0ac      	b.n	18498 <vTask_GSM_service+0xc2c>
								}
							}
						}
						else if (currentStatus == 'I' && currentCallStatus == 'O') //IN CALL OUTGOING CALL
   1833e:	4b2b      	ldr	r3, [pc, #172]	; (183ec <vTask_GSM_service+0xb80>)
   18340:	781b      	ldrb	r3, [r3, #0]
   18342:	b2db      	uxtb	r3, r3
   18344:	2b49      	cmp	r3, #73	; 0x49
   18346:	d001      	beq.n	1834c <vTask_GSM_service+0xae0>
   18348:	f7ff fb50 	bl	179ec <vTask_GSM_service+0x180>
   1834c:	4b28      	ldr	r3, [pc, #160]	; (183f0 <vTask_GSM_service+0xb84>)
   1834e:	781b      	ldrb	r3, [r3, #0]
   18350:	b2db      	uxtb	r3, r3
   18352:	2b4f      	cmp	r3, #79	; 0x4f
   18354:	d001      	beq.n	1835a <vTask_GSM_service+0xaee>
   18356:	f7ff fb49 	bl	179ec <vTask_GSM_service+0x180>
						{
							if (gsm_responseLine_isCallCut(response) || OutGoingcallState(response) == 'E')
   1835a:	230c      	movs	r3, #12
   1835c:	18fb      	adds	r3, r7, r3
   1835e:	0018      	movs	r0, r3
   18360:	4b30      	ldr	r3, [pc, #192]	; (18424 <vTask_GSM_service+0xbb8>)
   18362:	4798      	blx	r3
   18364:	1e03      	subs	r3, r0, #0
   18366:	d107      	bne.n	18378 <vTask_GSM_service+0xb0c>
   18368:	230c      	movs	r3, #12
   1836a:	18fb      	adds	r3, r7, r3
   1836c:	0018      	movs	r0, r3
   1836e:	4b34      	ldr	r3, [pc, #208]	; (18440 <vTask_GSM_service+0xbd4>)
   18370:	4798      	blx	r3
   18372:	0003      	movs	r3, r0
   18374:	2b45      	cmp	r3, #69	; 0x45
   18376:	d102      	bne.n	1837e <vTask_GSM_service+0xb12>
							{
								endCall();
   18378:	4b29      	ldr	r3, [pc, #164]	; (18420 <vTask_GSM_service+0xbb4>)
   1837a:	4798      	blx	r3
   1837c:	e08d      	b.n	1849a <vTask_GSM_service+0xc2e>
							}
							else if (gsm_responseLine_isNew_DTMF_Command_Received(response))
   1837e:	230c      	movs	r3, #12
   18380:	18fb      	adds	r3, r7, r3
   18382:	0018      	movs	r0, r3
   18384:	4b28      	ldr	r3, [pc, #160]	; (18428 <vTask_GSM_service+0xbbc>)
   18386:	4798      	blx	r3
   18388:	1e03      	subs	r3, r0, #0
   1838a:	d025      	beq.n	183d8 <vTask_GSM_service+0xb6c>
							{
								char *dtmf_tocken;
								dtmf_tocken = strtok(response,": ");
   1838c:	4a27      	ldr	r2, [pc, #156]	; (1842c <vTask_GSM_service+0xbc0>)
   1838e:	230c      	movs	r3, #12
   18390:	18fb      	adds	r3, r7, r3
   18392:	0011      	movs	r1, r2
   18394:	0018      	movs	r0, r3
   18396:	4b26      	ldr	r3, [pc, #152]	; (18430 <vTask_GSM_service+0xbc4>)
   18398:	4798      	blx	r3
   1839a:	0003      	movs	r3, r0
   1839c:	228a      	movs	r2, #138	; 0x8a
   1839e:	0052      	lsls	r2, r2, #1
   183a0:	18ba      	adds	r2, r7, r2
   183a2:	6013      	str	r3, [r2, #0]
								dtmf_tocken = strtok(NULL,": ");
   183a4:	4b21      	ldr	r3, [pc, #132]	; (1842c <vTask_GSM_service+0xbc0>)
   183a6:	0019      	movs	r1, r3
   183a8:	2000      	movs	r0, #0
   183aa:	4b21      	ldr	r3, [pc, #132]	; (18430 <vTask_GSM_service+0xbc4>)
   183ac:	4798      	blx	r3
   183ae:	0003      	movs	r3, r0
   183b0:	228a      	movs	r2, #138	; 0x8a
   183b2:	0052      	lsls	r2, r2, #1
   183b4:	18ba      	adds	r2, r7, r2
   183b6:	6013      	str	r3, [r2, #0]
								RemoveSpaces(dtmf_tocken);
   183b8:	238a      	movs	r3, #138	; 0x8a
   183ba:	005b      	lsls	r3, r3, #1
   183bc:	18fb      	adds	r3, r7, r3
   183be:	681b      	ldr	r3, [r3, #0]
   183c0:	0018      	movs	r0, r3
   183c2:	4b1c      	ldr	r3, [pc, #112]	; (18434 <vTask_GSM_service+0xbc8>)
   183c4:	4798      	blx	r3
								processOnDTMF(dtmf_tocken);
   183c6:	238a      	movs	r3, #138	; 0x8a
   183c8:	005b      	lsls	r3, r3, #1
   183ca:	18fb      	adds	r3, r7, r3
   183cc:	681b      	ldr	r3, [r3, #0]
   183ce:	0018      	movs	r0, r3
   183d0:	4b19      	ldr	r3, [pc, #100]	; (18438 <vTask_GSM_service+0xbcc>)
   183d2:	4798      	blx	r3
   183d4:	f7ff fb0a 	bl	179ec <vTask_GSM_service+0x180>
							}
							else
							{
								playSoundAgain(response);
   183d8:	230c      	movs	r3, #12
   183da:	18fb      	adds	r3, r7, r3
   183dc:	0018      	movs	r0, r3
   183de:	4b17      	ldr	r3, [pc, #92]	; (1843c <vTask_GSM_service+0xbd0>)
   183e0:	4798      	blx	r3
   183e2:	f7ff fb03 	bl	179ec <vTask_GSM_service+0x180>
   183e6:	46c0      	nop			; (mov r8, r8)
   183e8:	20000744 	.word	0x20000744
   183ec:	200007dc 	.word	0x200007dc
   183f0:	2000078f 	.word	0x2000078f
   183f4:	000135d5 	.word	0x000135d5
   183f8:	000289e3 	.word	0x000289e3
   183fc:	2000079c 	.word	0x2000079c
   18400:	0001fd79 	.word	0x0001fd79
   18404:	000134a9 	.word	0x000134a9
   18408:	00013769 	.word	0x00013769
   1840c:	0001ce41 	.word	0x0001ce41
   18410:	000200dd 	.word	0x000200dd
   18414:	20000814 	.word	0x20000814
   18418:	00017335 	.word	0x00017335
   1841c:	0001481d 	.word	0x0001481d
   18420:	00014525 	.word	0x00014525
   18424:	0001380d 	.word	0x0001380d
   18428:	00013885 	.word	0x00013885
   1842c:	0002a2ac 	.word	0x0002a2ac
   18430:	00028cd5 	.word	0x00028cd5
   18434:	00012ab5 	.word	0x00012ab5
   18438:	00014df9 	.word	0x00014df9
   1843c:	00014975 	.word	0x00014975
   18440:	00014af5 	.word	0x00014af5
   18444:	20000763 	.word	0x20000763
   18448:	00014d81 	.word	0x00014d81
   1844c:	2000079e 	.word	0x2000079e
   18450:	20000743 	.word	0x20000743
   18454:	00014865 	.word	0x00014865
				}
			}
		}
		else
		{
			boolGsm_config_flag			=false;
   18458:	4b11      	ldr	r3, [pc, #68]	; (184a0 <vTask_GSM_service+0xc34>)
   1845a:	2200      	movs	r2, #0
   1845c:	701a      	strb	r2, [r3, #0]
			boolOne_Time_Msg_Delete_Flag   =false;
   1845e:	4b11      	ldr	r3, [pc, #68]	; (184a4 <vTask_GSM_service+0xc38>)
   18460:	2200      	movs	r2, #0
   18462:	701a      	strb	r2, [r3, #0]
			
			GSM_PWR_ON;
   18464:	4b10      	ldr	r3, [pc, #64]	; (184a8 <vTask_GSM_service+0xc3c>)
   18466:	4a10      	ldr	r2, [pc, #64]	; (184a8 <vTask_GSM_service+0xc3c>)
   18468:	6812      	ldr	r2, [r2, #0]
   1846a:	2180      	movs	r1, #128	; 0x80
   1846c:	0249      	lsls	r1, r1, #9
   1846e:	430a      	orrs	r2, r1
   18470:	601a      	str	r2, [r3, #0]
			vTaskDelay(3000);
   18472:	4b0e      	ldr	r3, [pc, #56]	; (184ac <vTask_GSM_service+0xc40>)
   18474:	0018      	movs	r0, r3
   18476:	4b0e      	ldr	r3, [pc, #56]	; (184b0 <vTask_GSM_service+0xc44>)
   18478:	4798      	blx	r3
			GSM_PWR_OFF;
   1847a:	4b0b      	ldr	r3, [pc, #44]	; (184a8 <vTask_GSM_service+0xc3c>)
   1847c:	4a0a      	ldr	r2, [pc, #40]	; (184a8 <vTask_GSM_service+0xc3c>)
   1847e:	6812      	ldr	r2, [r2, #0]
   18480:	490c      	ldr	r1, [pc, #48]	; (184b4 <vTask_GSM_service+0xc48>)
   18482:	400a      	ands	r2, r1
   18484:	601a      	str	r2, [r3, #0]
			vTaskDelay(5000);
   18486:	4b0c      	ldr	r3, [pc, #48]	; (184b8 <vTask_GSM_service+0xc4c>)
   18488:	0018      	movs	r0, r3
   1848a:	4b09      	ldr	r3, [pc, #36]	; (184b0 <vTask_GSM_service+0xc44>)
   1848c:	4798      	blx	r3
   1848e:	f7ff faad 	bl	179ec <vTask_GSM_service+0x180>
							if (gsm_responseLine_isRinging(response))
   18492:	46c0      	nop			; (mov r8, r8)
   18494:	f7ff faaa 	bl	179ec <vTask_GSM_service+0x180>
							if (OutGoingcallState(response) == 'R')
   18498:	46c0      	nop			; (mov r8, r8)
		if (currentStatus == 'I' || currentStatus == 'R')
   1849a:	f7ff faa7 	bl	179ec <vTask_GSM_service+0x180>
   1849e:	46c0      	nop			; (mov r8, r8)
   184a0:	200007c4 	.word	0x200007c4
   184a4:	200007d1 	.word	0x200007d1
   184a8:	41004490 	.word	0x41004490
   184ac:	00000bb8 	.word	0x00000bb8
   184b0:	0001fd79 	.word	0x0001fd79
   184b4:	fffeffff 	.word	0xfffeffff
   184b8:	00001388 	.word	0x00001388

000184bc <start_gsm_service>:
		}
	}
}
void start_gsm_service(void)
{
   184bc:	b590      	push	{r4, r7, lr}
   184be:	b083      	sub	sp, #12
   184c0:	af02      	add	r7, sp, #8
	xTaskCreate(vTask_GSM_service,NULL,(uint16_t)1000,NULL,1,NULL);
   184c2:	23fa      	movs	r3, #250	; 0xfa
   184c4:	009a      	lsls	r2, r3, #2
   184c6:	4806      	ldr	r0, [pc, #24]	; (184e0 <start_gsm_service+0x24>)
   184c8:	2300      	movs	r3, #0
   184ca:	9301      	str	r3, [sp, #4]
   184cc:	2301      	movs	r3, #1
   184ce:	9300      	str	r3, [sp, #0]
   184d0:	2300      	movs	r3, #0
   184d2:	2100      	movs	r1, #0
   184d4:	4c03      	ldr	r4, [pc, #12]	; (184e4 <start_gsm_service+0x28>)
   184d6:	47a0      	blx	r4
}
   184d8:	46c0      	nop			; (mov r8, r8)
   184da:	46bd      	mov	sp, r7
   184dc:	b001      	add	sp, #4
   184de:	bd90      	pop	{r4, r7, pc}
   184e0:	0001786d 	.word	0x0001786d
   184e4:	0001fa39 	.word	0x0001fa39

000184e8 <busy>:

bool busy(void)
{
   184e8:	b580      	push	{r7, lr}
   184ea:	af00      	add	r7, sp, #0
	return (inCall || isRinging  /*|| inInterrupt*/);
   184ec:	4b09      	ldr	r3, [pc, #36]	; (18514 <busy+0x2c>)
   184ee:	781b      	ldrb	r3, [r3, #0]
   184f0:	2b00      	cmp	r3, #0
   184f2:	d104      	bne.n	184fe <busy+0x16>
   184f4:	4b08      	ldr	r3, [pc, #32]	; (18518 <busy+0x30>)
   184f6:	781b      	ldrb	r3, [r3, #0]
   184f8:	b2db      	uxtb	r3, r3
   184fa:	2b00      	cmp	r3, #0
   184fc:	d001      	beq.n	18502 <busy+0x1a>
   184fe:	2301      	movs	r3, #1
   18500:	e000      	b.n	18504 <busy+0x1c>
   18502:	2300      	movs	r3, #0
   18504:	1c1a      	adds	r2, r3, #0
   18506:	2301      	movs	r3, #1
   18508:	4013      	ands	r3, r2
   1850a:	b2db      	uxtb	r3, r3
}
   1850c:	0018      	movs	r0, r3
   1850e:	46bd      	mov	sp, r7
   18510:	bd80      	pop	{r7, pc}
   18512:	46c0      	nop			; (mov r8, r8)
   18514:	2000079c 	.word	0x2000079c
   18518:	2000068e 	.word	0x2000068e

0001851c <checkNotInCall>:

bool checkNotInCall(void)
{
   1851c:	b580      	push	{r7, lr}
   1851e:	af00      	add	r7, sp, #0
	return ( /*!sendCUSDResponse     &&*/  currentStatus=='N'
   18520:	4b13      	ldr	r3, [pc, #76]	; (18570 <checkNotInCall+0x54>)
   18522:	781b      	ldrb	r3, [r3, #0]
   18524:	b2db      	uxtb	r3, r3
	&&  currentCallStatus=='N'  &&  obtainNewEvent
	&&  !freezeIncomingCalls && !busy());
   18526:	2b4e      	cmp	r3, #78	; 0x4e
   18528:	d11a      	bne.n	18560 <checkNotInCall+0x44>
	&&  currentCallStatus=='N'  &&  obtainNewEvent
   1852a:	4b12      	ldr	r3, [pc, #72]	; (18574 <checkNotInCall+0x58>)
   1852c:	781b      	ldrb	r3, [r3, #0]
   1852e:	b2db      	uxtb	r3, r3
   18530:	2b4e      	cmp	r3, #78	; 0x4e
   18532:	d115      	bne.n	18560 <checkNotInCall+0x44>
   18534:	4b10      	ldr	r3, [pc, #64]	; (18578 <checkNotInCall+0x5c>)
   18536:	781b      	ldrb	r3, [r3, #0]
   18538:	2b00      	cmp	r3, #0
   1853a:	d011      	beq.n	18560 <checkNotInCall+0x44>
	&&  !freezeIncomingCalls && !busy());
   1853c:	4b0f      	ldr	r3, [pc, #60]	; (1857c <checkNotInCall+0x60>)
   1853e:	781b      	ldrb	r3, [r3, #0]
   18540:	2201      	movs	r2, #1
   18542:	4053      	eors	r3, r2
   18544:	b2db      	uxtb	r3, r3
   18546:	2b00      	cmp	r3, #0
   18548:	d00a      	beq.n	18560 <checkNotInCall+0x44>
   1854a:	4b0d      	ldr	r3, [pc, #52]	; (18580 <checkNotInCall+0x64>)
   1854c:	4798      	blx	r3
   1854e:	0003      	movs	r3, r0
   18550:	001a      	movs	r2, r3
   18552:	2301      	movs	r3, #1
   18554:	4053      	eors	r3, r2
   18556:	b2db      	uxtb	r3, r3
   18558:	2b00      	cmp	r3, #0
   1855a:	d001      	beq.n	18560 <checkNotInCall+0x44>
   1855c:	2301      	movs	r3, #1
   1855e:	e000      	b.n	18562 <checkNotInCall+0x46>
   18560:	2300      	movs	r3, #0
   18562:	1c1a      	adds	r2, r3, #0
   18564:	2301      	movs	r3, #1
   18566:	4013      	ands	r3, r2
   18568:	b2db      	uxtb	r3, r3
}
   1856a:	0018      	movs	r0, r3
   1856c:	46bd      	mov	sp, r7
   1856e:	bd80      	pop	{r7, pc}
   18570:	200007dc 	.word	0x200007dc
   18574:	2000078f 	.word	0x2000078f
   18578:	20000772 	.word	0x20000772
   1857c:	20000744 	.word	0x20000744
   18580:	000184e9 	.word	0x000184e9

00018584 <gsm_checkSleepElligible>:

bool gsm_checkSleepElligible(void)
{
   18584:	b580      	push	{r7, lr}
   18586:	af00      	add	r7, sp, #0
	if (factory_settings_parameter_struct.ENABLE_M2M)
   18588:	4b21      	ldr	r3, [pc, #132]	; (18610 <gsm_checkSleepElligible+0x8c>)
   1858a:	78db      	ldrb	r3, [r3, #3]
   1858c:	2b00      	cmp	r3, #0
   1858e:	d021      	beq.n	185d4 <gsm_checkSleepElligible+0x50>
	{
		return(!isGSMModuleAwake  && checkNotInCall() && !m2mEventStaged && !eventStaged);
   18590:	4b20      	ldr	r3, [pc, #128]	; (18614 <gsm_checkSleepElligible+0x90>)
   18592:	781b      	ldrb	r3, [r3, #0]
   18594:	b2db      	uxtb	r3, r3
   18596:	2201      	movs	r2, #1
   18598:	4053      	eors	r3, r2
   1859a:	b2db      	uxtb	r3, r3
   1859c:	2b00      	cmp	r3, #0
   1859e:	d013      	beq.n	185c8 <gsm_checkSleepElligible+0x44>
   185a0:	4b1d      	ldr	r3, [pc, #116]	; (18618 <gsm_checkSleepElligible+0x94>)
   185a2:	4798      	blx	r3
   185a4:	1e03      	subs	r3, r0, #0
   185a6:	d00f      	beq.n	185c8 <gsm_checkSleepElligible+0x44>
   185a8:	4b1c      	ldr	r3, [pc, #112]	; (1861c <gsm_checkSleepElligible+0x98>)
   185aa:	781b      	ldrb	r3, [r3, #0]
   185ac:	2201      	movs	r2, #1
   185ae:	4053      	eors	r3, r2
   185b0:	b2db      	uxtb	r3, r3
   185b2:	2b00      	cmp	r3, #0
   185b4:	d008      	beq.n	185c8 <gsm_checkSleepElligible+0x44>
   185b6:	4b1a      	ldr	r3, [pc, #104]	; (18620 <gsm_checkSleepElligible+0x9c>)
   185b8:	781b      	ldrb	r3, [r3, #0]
   185ba:	2201      	movs	r2, #1
   185bc:	4053      	eors	r3, r2
   185be:	b2db      	uxtb	r3, r3
   185c0:	2b00      	cmp	r3, #0
   185c2:	d001      	beq.n	185c8 <gsm_checkSleepElligible+0x44>
   185c4:	2301      	movs	r3, #1
   185c6:	e000      	b.n	185ca <gsm_checkSleepElligible+0x46>
   185c8:	2300      	movs	r3, #0
   185ca:	1c1a      	adds	r2, r3, #0
   185cc:	2301      	movs	r3, #1
   185ce:	4013      	ands	r3, r2
   185d0:	b2db      	uxtb	r3, r3
   185d2:	e019      	b.n	18608 <gsm_checkSleepElligible+0x84>
	}
	else
	{
		return(!isGSMModuleAwake  && checkNotInCall() && !eventStaged);
   185d4:	4b0f      	ldr	r3, [pc, #60]	; (18614 <gsm_checkSleepElligible+0x90>)
   185d6:	781b      	ldrb	r3, [r3, #0]
   185d8:	b2db      	uxtb	r3, r3
   185da:	2201      	movs	r2, #1
   185dc:	4053      	eors	r3, r2
   185de:	b2db      	uxtb	r3, r3
   185e0:	2b00      	cmp	r3, #0
   185e2:	d00c      	beq.n	185fe <gsm_checkSleepElligible+0x7a>
   185e4:	4b0c      	ldr	r3, [pc, #48]	; (18618 <gsm_checkSleepElligible+0x94>)
   185e6:	4798      	blx	r3
   185e8:	1e03      	subs	r3, r0, #0
   185ea:	d008      	beq.n	185fe <gsm_checkSleepElligible+0x7a>
   185ec:	4b0c      	ldr	r3, [pc, #48]	; (18620 <gsm_checkSleepElligible+0x9c>)
   185ee:	781b      	ldrb	r3, [r3, #0]
   185f0:	2201      	movs	r2, #1
   185f2:	4053      	eors	r3, r2
   185f4:	b2db      	uxtb	r3, r3
   185f6:	2b00      	cmp	r3, #0
   185f8:	d001      	beq.n	185fe <gsm_checkSleepElligible+0x7a>
   185fa:	2301      	movs	r3, #1
   185fc:	e000      	b.n	18600 <gsm_checkSleepElligible+0x7c>
   185fe:	2300      	movs	r3, #0
   18600:	1c1a      	adds	r2, r3, #0
   18602:	2301      	movs	r3, #1
   18604:	4013      	ands	r3, r2
   18606:	b2db      	uxtb	r3, r3
	}
   18608:	0018      	movs	r0, r3
   1860a:	46bd      	mov	sp, r7
   1860c:	bd80      	pop	{r7, pc}
   1860e:	46c0      	nop			; (mov r8, r8)
   18610:	2000062c 	.word	0x2000062c
   18614:	20000684 	.word	0x20000684
   18618:	0001851d 	.word	0x0001851d
   1861c:	2000078e 	.word	0x2000078e
   18620:	200007d3 	.word	0x200007d3

00018624 <lcd_displaying_task>:
static QueueHandle_t xfour_Second_Queue;
static TimerHandle_t four_Second_timeout_timer=NULL;
static void four_second_timer_callback(TimerHandle_t timer);

static void lcd_displaying_task(void *params)
{
   18624:	b590      	push	{r4, r7, lr}
   18626:	b093      	sub	sp, #76	; 0x4c
   18628:	af02      	add	r7, sp, #8
   1862a:	6078      	str	r0, [r7, #4]
	UNUSED(params);
	
	gsmStatusChange=true;
   1862c:	4be1      	ldr	r3, [pc, #900]	; (189b4 <lcd_displaying_task+0x390>)
   1862e:	2201      	movs	r2, #1
   18630:	701a      	strb	r2, [r3, #0]
	lcd_in_sleep =false;
   18632:	4be1      	ldr	r3, [pc, #900]	; (189b8 <lcd_displaying_task+0x394>)
   18634:	2200      	movs	r2, #0
   18636:	701a      	strb	r2, [r3, #0]
	setNetworkCharacter=true;
   18638:	4be0      	ldr	r3, [pc, #896]	; (189bc <lcd_displaying_task+0x398>)
   1863a:	2201      	movs	r2, #1
   1863c:	701a      	strb	r2, [r3, #0]
	LCD_PWR_CONFIG();
   1863e:	4be0      	ldr	r3, [pc, #896]	; (189c0 <lcd_displaying_task+0x39c>)
   18640:	4798      	blx	r3
	LCD_PWR_EN();
   18642:	4be0      	ldr	r3, [pc, #896]	; (189c4 <lcd_displaying_task+0x3a0>)
   18644:	4798      	blx	r3
	vTaskDelay(500);
   18646:	23fa      	movs	r3, #250	; 0xfa
   18648:	005b      	lsls	r3, r3, #1
   1864a:	0018      	movs	r0, r3
   1864c:	4bde      	ldr	r3, [pc, #888]	; (189c8 <lcd_displaying_task+0x3a4>)
   1864e:	4798      	blx	r3
	
	LCD_init();
   18650:	4bde      	ldr	r3, [pc, #888]	; (189cc <lcd_displaying_task+0x3a8>)
   18652:	4798      	blx	r3
	
	uint8_t screen=1;
   18654:	233f      	movs	r3, #63	; 0x3f
   18656:	18fb      	adds	r3, r7, r3
   18658:	2201      	movs	r2, #1
   1865a:	701a      	strb	r2, [r3, #0]
	bool four_sec_timer_is_active = true;
   1865c:	233d      	movs	r3, #61	; 0x3d
   1865e:	18fb      	adds	r3, r7, r3
   18660:	2201      	movs	r2, #1
   18662:	701a      	strb	r2, [r3, #0]
	bool two_sec_timer_is_active = false;
   18664:	233c      	movs	r3, #60	; 0x3c
   18666:	18fb      	adds	r3, r7, r3
   18668:	2200      	movs	r2, #0
   1866a:	701a      	strb	r2, [r3, #0]
	
	uint8_t time=0;
   1866c:	233a      	movs	r3, #58	; 0x3a
   1866e:	18fb      	adds	r3, r7, r3
   18670:	2200      	movs	r2, #0
   18672:	701a      	strb	r2, [r3, #0]
	
	
	
	
	LCD_clear();
   18674:	4bd6      	ldr	r3, [pc, #856]	; (189d0 <lcd_displaying_task+0x3ac>)
   18676:	4798      	blx	r3
	LCD_setCursor(0,0);
   18678:	2100      	movs	r1, #0
   1867a:	2000      	movs	r0, #0
   1867c:	4bd5      	ldr	r3, [pc, #852]	; (189d4 <lcd_displaying_task+0x3b0>)
   1867e:	4798      	blx	r3
	lcd_printf(" KRISHNA  SMART ");
   18680:	4bd5      	ldr	r3, [pc, #852]	; (189d8 <lcd_displaying_task+0x3b4>)
   18682:	0018      	movs	r0, r3
   18684:	4bd5      	ldr	r3, [pc, #852]	; (189dc <lcd_displaying_task+0x3b8>)
   18686:	4798      	blx	r3
	LCD_setCursor(0,1);
   18688:	2101      	movs	r1, #1
   1868a:	2000      	movs	r0, #0
   1868c:	4bd1      	ldr	r3, [pc, #836]	; (189d4 <lcd_displaying_task+0x3b0>)
   1868e:	4798      	blx	r3
	lcd_printf("   TECHNOLOGY   ");
   18690:	4bd3      	ldr	r3, [pc, #844]	; (189e0 <lcd_displaying_task+0x3bc>)
   18692:	0018      	movs	r0, r3
   18694:	4bd1      	ldr	r3, [pc, #836]	; (189dc <lcd_displaying_task+0x3b8>)
   18696:	4798      	blx	r3
	vTaskDelay(3000);
   18698:	4bd2      	ldr	r3, [pc, #840]	; (189e4 <lcd_displaying_task+0x3c0>)
   1869a:	0018      	movs	r0, r3
   1869c:	4bca      	ldr	r3, [pc, #808]	; (189c8 <lcd_displaying_task+0x3a4>)
   1869e:	4798      	blx	r3
	
	LCD_clear();
   186a0:	4bcb      	ldr	r3, [pc, #812]	; (189d0 <lcd_displaying_task+0x3ac>)
   186a2:	4798      	blx	r3
	LCD_setCursor(0,0);
   186a4:	2100      	movs	r1, #0
   186a6:	2000      	movs	r0, #0
   186a8:	4bca      	ldr	r3, [pc, #808]	; (189d4 <lcd_displaying_task+0x3b0>)
   186aa:	4798      	blx	r3
	lcd_printf("  SOFTWARE VER  ");
   186ac:	4bce      	ldr	r3, [pc, #824]	; (189e8 <lcd_displaying_task+0x3c4>)
   186ae:	0018      	movs	r0, r3
   186b0:	4bca      	ldr	r3, [pc, #808]	; (189dc <lcd_displaying_task+0x3b8>)
   186b2:	4798      	blx	r3
	LCD_setCursor(0,1);
   186b4:	2101      	movs	r1, #1
   186b6:	2000      	movs	r0, #0
   186b8:	4bc6      	ldr	r3, [pc, #792]	; (189d4 <lcd_displaying_task+0x3b0>)
   186ba:	4798      	blx	r3
	lcd_printf("%s",VERSION_NO);
   186bc:	4acb      	ldr	r2, [pc, #812]	; (189ec <lcd_displaying_task+0x3c8>)
   186be:	4bcc      	ldr	r3, [pc, #816]	; (189f0 <lcd_displaying_task+0x3cc>)
   186c0:	0011      	movs	r1, r2
   186c2:	0018      	movs	r0, r3
   186c4:	4bc5      	ldr	r3, [pc, #788]	; (189dc <lcd_displaying_task+0x3b8>)
   186c6:	4798      	blx	r3
	vTaskDelay(2000);
   186c8:	23fa      	movs	r3, #250	; 0xfa
   186ca:	00db      	lsls	r3, r3, #3
   186cc:	0018      	movs	r0, r3
   186ce:	4bbe      	ldr	r3, [pc, #760]	; (189c8 <lcd_displaying_task+0x3a4>)
   186d0:	4798      	blx	r3
	
	four_Second_timeout_timer = xTimerCreate(NULL,(1 * 4000 / portTICK_PERIOD_MS), pdTRUE, NULL, four_second_timer_callback);
   186d2:	23fa      	movs	r3, #250	; 0xfa
   186d4:	0119      	lsls	r1, r3, #4
   186d6:	4bc7      	ldr	r3, [pc, #796]	; (189f4 <lcd_displaying_task+0x3d0>)
   186d8:	9300      	str	r3, [sp, #0]
   186da:	2300      	movs	r3, #0
   186dc:	2201      	movs	r2, #1
   186de:	2000      	movs	r0, #0
   186e0:	4cc5      	ldr	r4, [pc, #788]	; (189f8 <lcd_displaying_task+0x3d4>)
   186e2:	47a0      	blx	r4
   186e4:	0002      	movs	r2, r0
   186e6:	4bc5      	ldr	r3, [pc, #788]	; (189fc <lcd_displaying_task+0x3d8>)
   186e8:	601a      	str	r2, [r3, #0]
	xTimerStart( four_Second_timeout_timer, 0 );
   186ea:	4bc4      	ldr	r3, [pc, #784]	; (189fc <lcd_displaying_task+0x3d8>)
   186ec:	681c      	ldr	r4, [r3, #0]
   186ee:	4bc4      	ldr	r3, [pc, #784]	; (18a00 <lcd_displaying_task+0x3dc>)
   186f0:	4798      	blx	r3
   186f2:	0002      	movs	r2, r0
   186f4:	2300      	movs	r3, #0
   186f6:	9300      	str	r3, [sp, #0]
   186f8:	2300      	movs	r3, #0
   186fa:	2101      	movs	r1, #1
   186fc:	0020      	movs	r0, r4
   186fe:	4cc1      	ldr	r4, [pc, #772]	; (18a04 <lcd_displaying_task+0x3e0>)
   18700:	47a0      	blx	r4
	
	
	for (;;)
	{
		if (lcd_in_sleep)
   18702:	4bad      	ldr	r3, [pc, #692]	; (189b8 <lcd_displaying_task+0x394>)
   18704:	781b      	ldrb	r3, [r3, #0]
   18706:	b2db      	uxtb	r3, r3
   18708:	2b00      	cmp	r3, #0
   1870a:	d009      	beq.n	18720 <lcd_displaying_task+0xfc>
		{
			lcd_in_sleep = false;
   1870c:	4baa      	ldr	r3, [pc, #680]	; (189b8 <lcd_displaying_task+0x394>)
   1870e:	2200      	movs	r2, #0
   18710:	701a      	strb	r2, [r3, #0]
			LCD_PWR_EN();
   18712:	4bac      	ldr	r3, [pc, #688]	; (189c4 <lcd_displaying_task+0x3a0>)
   18714:	4798      	blx	r3
			vTaskDelay(100);
   18716:	2064      	movs	r0, #100	; 0x64
   18718:	4bab      	ldr	r3, [pc, #684]	; (189c8 <lcd_displaying_task+0x3a4>)
   1871a:	4798      	blx	r3
			LCD_init();
   1871c:	4bab      	ldr	r3, [pc, #684]	; (189cc <lcd_displaying_task+0x3a8>)
   1871e:	4798      	blx	r3
		}
		
		if(setNetworkCharacter)
   18720:	4ba6      	ldr	r3, [pc, #664]	; (189bc <lcd_displaying_task+0x398>)
   18722:	781b      	ldrb	r3, [r3, #0]
   18724:	b2db      	uxtb	r3, r3
   18726:	2b00      	cmp	r3, #0
   18728:	d047      	beq.n	187ba <lcd_displaying_task+0x196>
		{
			setNetworkCharacter=false;
   1872a:	4ba4      	ldr	r3, [pc, #656]	; (189bc <lcd_displaying_task+0x398>)
   1872c:	2200      	movs	r2, #0
   1872e:	701a      	strb	r2, [r3, #0]
			byte Network_0[8]={
   18730:	2330      	movs	r3, #48	; 0x30
   18732:	18fb      	adds	r3, r7, r3
   18734:	0018      	movs	r0, r3
   18736:	2308      	movs	r3, #8
   18738:	001a      	movs	r2, r3
   1873a:	2100      	movs	r1, #0
   1873c:	4bb2      	ldr	r3, [pc, #712]	; (18a08 <lcd_displaying_task+0x3e4>)
   1873e:	4798      	blx	r3
				0B00000,
				0B00000,
				0B00000
			};
			
			byte Network_1[8]={
   18740:	2328      	movs	r3, #40	; 0x28
   18742:	18fb      	adds	r3, r7, r3
   18744:	4ab1      	ldr	r2, [pc, #708]	; (18a0c <lcd_displaying_task+0x3e8>)
   18746:	ca03      	ldmia	r2!, {r0, r1}
   18748:	c303      	stmia	r3!, {r0, r1}
				0B00000,
				0B00000,
				0B11111,
				0B11111
			};
			byte Network_2[8]={
   1874a:	2320      	movs	r3, #32
   1874c:	18fb      	adds	r3, r7, r3
   1874e:	4ab0      	ldr	r2, [pc, #704]	; (18a10 <lcd_displaying_task+0x3ec>)
   18750:	ca03      	ldmia	r2!, {r0, r1}
   18752:	c303      	stmia	r3!, {r0, r1}
				0B00000,
				0B11111,
				0B11111,
				0B11111
			};
			byte Network_3[8]={
   18754:	2318      	movs	r3, #24
   18756:	18fb      	adds	r3, r7, r3
   18758:	4aae      	ldr	r2, [pc, #696]	; (18a14 <lcd_displaying_task+0x3f0>)
   1875a:	ca03      	ldmia	r2!, {r0, r1}
   1875c:	c303      	stmia	r3!, {r0, r1}
				0B11111,
				0B11111,
				0B11111,
				0B11111
			};
			byte Network_4[8]={
   1875e:	2310      	movs	r3, #16
   18760:	18fb      	adds	r3, r7, r3
   18762:	4aad      	ldr	r2, [pc, #692]	; (18a18 <lcd_displaying_task+0x3f4>)
   18764:	ca03      	ldmia	r2!, {r0, r1}
   18766:	c303      	stmia	r3!, {r0, r1}
				0B11111,
				0B11111,
				0B11111
			};

			byte Network_5[8]={
   18768:	2308      	movs	r3, #8
   1876a:	18fb      	adds	r3, r7, r3
   1876c:	4aab      	ldr	r2, [pc, #684]	; (18a1c <lcd_displaying_task+0x3f8>)
   1876e:	ca03      	ldmia	r2!, {r0, r1}
   18770:	c303      	stmia	r3!, {r0, r1}
				0B11111,
				0B11111,
				0B11111
			};
			
			LCD_Create_Custom_createChar(0,Network_0);
   18772:	2330      	movs	r3, #48	; 0x30
   18774:	18fb      	adds	r3, r7, r3
   18776:	0019      	movs	r1, r3
   18778:	2000      	movs	r0, #0
   1877a:	4ba9      	ldr	r3, [pc, #676]	; (18a20 <lcd_displaying_task+0x3fc>)
   1877c:	4798      	blx	r3
			LCD_Create_Custom_createChar(1,Network_1);
   1877e:	2328      	movs	r3, #40	; 0x28
   18780:	18fb      	adds	r3, r7, r3
   18782:	0019      	movs	r1, r3
   18784:	2001      	movs	r0, #1
   18786:	4ba6      	ldr	r3, [pc, #664]	; (18a20 <lcd_displaying_task+0x3fc>)
   18788:	4798      	blx	r3
			LCD_Create_Custom_createChar(2,Network_2);
   1878a:	2320      	movs	r3, #32
   1878c:	18fb      	adds	r3, r7, r3
   1878e:	0019      	movs	r1, r3
   18790:	2002      	movs	r0, #2
   18792:	4ba3      	ldr	r3, [pc, #652]	; (18a20 <lcd_displaying_task+0x3fc>)
   18794:	4798      	blx	r3
			LCD_Create_Custom_createChar(3,Network_3);
   18796:	2318      	movs	r3, #24
   18798:	18fb      	adds	r3, r7, r3
   1879a:	0019      	movs	r1, r3
   1879c:	2003      	movs	r0, #3
   1879e:	4ba0      	ldr	r3, [pc, #640]	; (18a20 <lcd_displaying_task+0x3fc>)
   187a0:	4798      	blx	r3
			LCD_Create_Custom_createChar(4,Network_4);
   187a2:	2310      	movs	r3, #16
   187a4:	18fb      	adds	r3, r7, r3
   187a6:	0019      	movs	r1, r3
   187a8:	2004      	movs	r0, #4
   187aa:	4b9d      	ldr	r3, [pc, #628]	; (18a20 <lcd_displaying_task+0x3fc>)
   187ac:	4798      	blx	r3
			LCD_Create_Custom_createChar(5,Network_5);
   187ae:	2308      	movs	r3, #8
   187b0:	18fb      	adds	r3, r7, r3
   187b2:	0019      	movs	r1, r3
   187b4:	2005      	movs	r0, #5
   187b6:	4b9a      	ldr	r3, [pc, #616]	; (18a20 <lcd_displaying_task+0x3fc>)
   187b8:	4798      	blx	r3
		}
		
		
		if(firstEvent)
   187ba:	4b9a      	ldr	r3, [pc, #616]	; (18a24 <lcd_displaying_task+0x400>)
   187bc:	781b      	ldrb	r3, [r3, #0]
   187be:	b2db      	uxtb	r3, r3
   187c0:	2b00      	cmp	r3, #0
   187c2:	d014      	beq.n	187ee <lcd_displaying_task+0x1ca>
		{
			LCD_setCursor(0,0);
   187c4:	2100      	movs	r1, #0
   187c6:	2000      	movs	r0, #0
   187c8:	4b82      	ldr	r3, [pc, #520]	; (189d4 <lcd_displaying_task+0x3b0>)
   187ca:	4798      	blx	r3
			lcd_printf("Initializing... ");
   187cc:	4b96      	ldr	r3, [pc, #600]	; (18a28 <lcd_displaying_task+0x404>)
   187ce:	0018      	movs	r0, r3
   187d0:	4b82      	ldr	r3, [pc, #520]	; (189dc <lcd_displaying_task+0x3b8>)
   187d2:	4798      	blx	r3
			LCD_setCursor(0,1);
   187d4:	2101      	movs	r1, #1
   187d6:	2000      	movs	r0, #0
   187d8:	4b7e      	ldr	r3, [pc, #504]	; (189d4 <lcd_displaying_task+0x3b0>)
   187da:	4798      	blx	r3
			lcd_printf("COMMANDER v2    ");
   187dc:	4b93      	ldr	r3, [pc, #588]	; (18a2c <lcd_displaying_task+0x408>)
   187de:	0018      	movs	r0, r3
   187e0:	4b7e      	ldr	r3, [pc, #504]	; (189dc <lcd_displaying_task+0x3b8>)
   187e2:	4798      	blx	r3
			screen=1;
   187e4:	233f      	movs	r3, #63	; 0x3f
   187e6:	18fb      	adds	r3, r7, r3
   187e8:	2201      	movs	r2, #1
   187ea:	701a      	strb	r2, [r3, #0]
   187ec:	e253      	b.n	18c96 <lcd_displaying_task+0x672>
		}
		else
		{
			if(gsmStatusChange)
   187ee:	4b71      	ldr	r3, [pc, #452]	; (189b4 <lcd_displaying_task+0x390>)
   187f0:	781b      	ldrb	r3, [r3, #0]
   187f2:	b2db      	uxtb	r3, r3
   187f4:	2b00      	cmp	r3, #0
   187f6:	d025      	beq.n	18844 <lcd_displaying_task+0x220>
			{
				LCD_setCursor(0,0);
   187f8:	2100      	movs	r1, #0
   187fa:	2000      	movs	r0, #0
   187fc:	4b75      	ldr	r3, [pc, #468]	; (189d4 <lcd_displaying_task+0x3b0>)
   187fe:	4798      	blx	r3
				lcd_printf("PHONE STATUS    ");
   18800:	4b8b      	ldr	r3, [pc, #556]	; (18a30 <lcd_displaying_task+0x40c>)
   18802:	0018      	movs	r0, r3
   18804:	4b75      	ldr	r3, [pc, #468]	; (189dc <lcd_displaying_task+0x3b8>)
   18806:	4798      	blx	r3
				if(boolGsm_config_flag)
   18808:	4b8a      	ldr	r3, [pc, #552]	; (18a34 <lcd_displaying_task+0x410>)
   1880a:	781b      	ldrb	r3, [r3, #0]
   1880c:	b2db      	uxtb	r3, r3
   1880e:	2b00      	cmp	r3, #0
   18810:	d008      	beq.n	18824 <lcd_displaying_task+0x200>
				{
					LCD_setCursor(0,1);
   18812:	2101      	movs	r1, #1
   18814:	2000      	movs	r0, #0
   18816:	4b6f      	ldr	r3, [pc, #444]	; (189d4 <lcd_displaying_task+0x3b0>)
   18818:	4798      	blx	r3
					lcd_printf("ON              ");
   1881a:	4b87      	ldr	r3, [pc, #540]	; (18a38 <lcd_displaying_task+0x414>)
   1881c:	0018      	movs	r0, r3
   1881e:	4b6f      	ldr	r3, [pc, #444]	; (189dc <lcd_displaying_task+0x3b8>)
   18820:	4798      	blx	r3
   18822:	e007      	b.n	18834 <lcd_displaying_task+0x210>
				}	
				else
				{
					LCD_setCursor(0,1);
   18824:	2101      	movs	r1, #1
   18826:	2000      	movs	r0, #0
   18828:	4b6a      	ldr	r3, [pc, #424]	; (189d4 <lcd_displaying_task+0x3b0>)
   1882a:	4798      	blx	r3
					lcd_printf("OFF             ");
   1882c:	4b83      	ldr	r3, [pc, #524]	; (18a3c <lcd_displaying_task+0x418>)
   1882e:	0018      	movs	r0, r3
   18830:	4b6a      	ldr	r3, [pc, #424]	; (189dc <lcd_displaying_task+0x3b8>)
   18832:	4798      	blx	r3
				}
				gsmStatusChange = false;
   18834:	4b5f      	ldr	r3, [pc, #380]	; (189b4 <lcd_displaying_task+0x390>)
   18836:	2200      	movs	r2, #0
   18838:	701a      	strb	r2, [r3, #0]
				vTaskDelay(2000/portTICK_PERIOD_MS);
   1883a:	23fa      	movs	r3, #250	; 0xfa
   1883c:	00db      	lsls	r3, r3, #3
   1883e:	0018      	movs	r0, r3
   18840:	4b61      	ldr	r3, [pc, #388]	; (189c8 <lcd_displaying_task+0x3a4>)
   18842:	4798      	blx	r3
			}
			
			switch(screen)
   18844:	233f      	movs	r3, #63	; 0x3f
   18846:	18fb      	adds	r3, r7, r3
   18848:	781b      	ldrb	r3, [r3, #0]
   1884a:	2b09      	cmp	r3, #9
   1884c:	d900      	bls.n	18850 <lcd_displaying_task+0x22c>
   1884e:	e222      	b.n	18c96 <lcd_displaying_task+0x672>
   18850:	009a      	lsls	r2, r3, #2
   18852:	4b7b      	ldr	r3, [pc, #492]	; (18a40 <lcd_displaying_task+0x41c>)
   18854:	18d3      	adds	r3, r2, r3
   18856:	681b      	ldr	r3, [r3, #0]
   18858:	469f      	mov	pc, r3
			{
				case  1:
				{
					LCD_setCursor(0,0);
   1885a:	2100      	movs	r1, #0
   1885c:	2000      	movs	r0, #0
   1885e:	4b5d      	ldr	r3, [pc, #372]	; (189d4 <lcd_displaying_task+0x3b0>)
   18860:	4798      	blx	r3
					lcd_printf("VRY   VYB   VBR ");
   18862:	4b78      	ldr	r3, [pc, #480]	; (18a44 <lcd_displaying_task+0x420>)
   18864:	0018      	movs	r0, r3
   18866:	4b5d      	ldr	r3, [pc, #372]	; (189dc <lcd_displaying_task+0x3b8>)
   18868:	4798      	blx	r3
					LCD_setCursor(0,1);
   1886a:	2101      	movs	r1, #1
   1886c:	2000      	movs	r0, #0
   1886e:	4b59      	ldr	r3, [pc, #356]	; (189d4 <lcd_displaying_task+0x3b0>)
   18870:	4798      	blx	r3
					lcd_printf("%03lu   ",(Analog_Parameter_Struct.PhaseRY_Voltage));
   18872:	4b75      	ldr	r3, [pc, #468]	; (18a48 <lcd_displaying_task+0x424>)
   18874:	681a      	ldr	r2, [r3, #0]
   18876:	4b75      	ldr	r3, [pc, #468]	; (18a4c <lcd_displaying_task+0x428>)
   18878:	0011      	movs	r1, r2
   1887a:	0018      	movs	r0, r3
   1887c:	4b57      	ldr	r3, [pc, #348]	; (189dc <lcd_displaying_task+0x3b8>)
   1887e:	4798      	blx	r3
					lcd_printf("%03lu   ",(Analog_Parameter_Struct.PhaseYB_Voltage));
   18880:	4b71      	ldr	r3, [pc, #452]	; (18a48 <lcd_displaying_task+0x424>)
   18882:	685a      	ldr	r2, [r3, #4]
   18884:	4b71      	ldr	r3, [pc, #452]	; (18a4c <lcd_displaying_task+0x428>)
   18886:	0011      	movs	r1, r2
   18888:	0018      	movs	r0, r3
   1888a:	4b54      	ldr	r3, [pc, #336]	; (189dc <lcd_displaying_task+0x3b8>)
   1888c:	4798      	blx	r3
					lcd_printf("%03lu ",(Analog_Parameter_Struct.PhaseBR_Voltage));
   1888e:	4b6e      	ldr	r3, [pc, #440]	; (18a48 <lcd_displaying_task+0x424>)
   18890:	689a      	ldr	r2, [r3, #8]
   18892:	4b6f      	ldr	r3, [pc, #444]	; (18a50 <lcd_displaying_task+0x42c>)
   18894:	0011      	movs	r1, r2
   18896:	0018      	movs	r0, r3
   18898:	4b50      	ldr	r3, [pc, #320]	; (189dc <lcd_displaying_task+0x3b8>)
   1889a:	4798      	blx	r3
					break;
   1889c:	e1fb      	b.n	18c96 <lcd_displaying_task+0x672>
				}
				case  2:
				{
					LCD_setCursor(0,0);
   1889e:	2100      	movs	r1, #0
   188a0:	2000      	movs	r0, #0
   188a2:	4b4c      	ldr	r3, [pc, #304]	; (189d4 <lcd_displaying_task+0x3b0>)
   188a4:	4798      	blx	r3
					if(!getMotorState())
   188a6:	4b6b      	ldr	r3, [pc, #428]	; (18a54 <lcd_displaying_task+0x430>)
   188a8:	4798      	blx	r3
   188aa:	0003      	movs	r3, r0
   188ac:	001a      	movs	r2, r3
   188ae:	2301      	movs	r3, #1
   188b0:	4053      	eors	r3, r2
   188b2:	b2db      	uxtb	r3, r3
   188b4:	2b00      	cmp	r3, #0
   188b6:	d004      	beq.n	188c2 <lcd_displaying_task+0x29e>
					{
						lcd_printf("MOTOR :  OFF    ");
   188b8:	4b67      	ldr	r3, [pc, #412]	; (18a58 <lcd_displaying_task+0x434>)
   188ba:	0018      	movs	r0, r3
   188bc:	4b47      	ldr	r3, [pc, #284]	; (189dc <lcd_displaying_task+0x3b8>)
   188be:	4798      	blx	r3
   188c0:	e003      	b.n	188ca <lcd_displaying_task+0x2a6>
					}
					else
					{
						lcd_printf("MOTOR :  ON     ");
   188c2:	4b66      	ldr	r3, [pc, #408]	; (18a5c <lcd_displaying_task+0x438>)
   188c4:	0018      	movs	r0, r3
   188c6:	4b45      	ldr	r3, [pc, #276]	; (189dc <lcd_displaying_task+0x3b8>)
   188c8:	4798      	blx	r3
					}
					
					LCD_setCursor(0,1);
   188ca:	2101      	movs	r1, #1
   188cc:	2000      	movs	r0, #0
   188ce:	4b41      	ldr	r3, [pc, #260]	; (189d4 <lcd_displaying_task+0x3b0>)
   188d0:	4798      	blx	r3
					lcd_printf("                ");
   188d2:	4b63      	ldr	r3, [pc, #396]	; (18a60 <lcd_displaying_task+0x43c>)
   188d4:	0018      	movs	r0, r3
   188d6:	4b41      	ldr	r3, [pc, #260]	; (189dc <lcd_displaying_task+0x3b8>)
   188d8:	4798      	blx	r3
					//LCD_setCursor(0,0);
					//lcd_printf("MOTOR WATTAGE:  ");
					//LCD_setCursor(0,1);
					//lcd_printf("%03lu.%02lu kW         ",(Analog_Parameter_Struct.Motor_Power_IntPart),(Analog_Parameter_Struct.Motor_Power_DecPart));
					//}
					break;
   188da:	e1dc      	b.n	18c96 <lcd_displaying_task+0x672>
				}
				case  3:
				{
					LCD_setCursor(0,0);
   188dc:	2100      	movs	r1, #0
   188de:	2000      	movs	r0, #0
   188e0:	4b3c      	ldr	r3, [pc, #240]	; (189d4 <lcd_displaying_task+0x3b0>)
   188e2:	4798      	blx	r3
					lcd_printf("MOTOR CURRENT:  ");
   188e4:	4b5f      	ldr	r3, [pc, #380]	; (18a64 <lcd_displaying_task+0x440>)
   188e6:	0018      	movs	r0, r3
   188e8:	4b3c      	ldr	r3, [pc, #240]	; (189dc <lcd_displaying_task+0x3b8>)
   188ea:	4798      	blx	r3
					LCD_setCursor(0,1);
   188ec:	2101      	movs	r1, #1
   188ee:	2000      	movs	r0, #0
   188f0:	4b38      	ldr	r3, [pc, #224]	; (189d4 <lcd_displaying_task+0x3b0>)
   188f2:	4798      	blx	r3
					lcd_printf("%03lu.%02lu            ",(Analog_Parameter_Struct.Motor_Current_IntPart),(Analog_Parameter_Struct.Motor_Current_DecPart));
   188f4:	4b54      	ldr	r3, [pc, #336]	; (18a48 <lcd_displaying_task+0x424>)
   188f6:	8a9b      	ldrh	r3, [r3, #20]
   188f8:	b29b      	uxth	r3, r3
   188fa:	0019      	movs	r1, r3
   188fc:	4b52      	ldr	r3, [pc, #328]	; (18a48 <lcd_displaying_task+0x424>)
   188fe:	8adb      	ldrh	r3, [r3, #22]
   18900:	b29b      	uxth	r3, r3
   18902:	001a      	movs	r2, r3
   18904:	4b58      	ldr	r3, [pc, #352]	; (18a68 <lcd_displaying_task+0x444>)
   18906:	0018      	movs	r0, r3
   18908:	4b34      	ldr	r3, [pc, #208]	; (189dc <lcd_displaying_task+0x3b8>)
   1890a:	4798      	blx	r3
					break;
   1890c:	e1c3      	b.n	18c96 <lcd_displaying_task+0x672>
				}
				case 4:
				{
					LCD_setCursor(0,0);
   1890e:	2100      	movs	r1, #0
   18910:	2000      	movs	r0, #0
   18912:	4b30      	ldr	r3, [pc, #192]	; (189d4 <lcd_displaying_task+0x3b0>)
   18914:	4798      	blx	r3
					lcd_printf("3 PHASE SEQ:");
   18916:	4b55      	ldr	r3, [pc, #340]	; (18a6c <lcd_displaying_task+0x448>)
   18918:	0018      	movs	r0, r3
   1891a:	4b30      	ldr	r3, [pc, #192]	; (189dc <lcd_displaying_task+0x3b8>)
   1891c:	4798      	blx	r3
					if (structThreePhase_state.u8t_phase_sequence_flag == THREEPHASE_OK)
   1891e:	4b54      	ldr	r3, [pc, #336]	; (18a70 <lcd_displaying_task+0x44c>)
   18920:	781b      	ldrb	r3, [r3, #0]
   18922:	b2db      	uxtb	r3, r3
   18924:	2b02      	cmp	r3, #2
   18926:	d104      	bne.n	18932 <lcd_displaying_task+0x30e>
					{
						lcd_printf(" OK ");
   18928:	4b52      	ldr	r3, [pc, #328]	; (18a74 <lcd_displaying_task+0x450>)
   1892a:	0018      	movs	r0, r3
   1892c:	4b2b      	ldr	r3, [pc, #172]	; (189dc <lcd_displaying_task+0x3b8>)
   1892e:	4798      	blx	r3
   18930:	e003      	b.n	1893a <lcd_displaying_task+0x316>
					}
					else
					{
						lcd_printf(" ERR");
   18932:	4b51      	ldr	r3, [pc, #324]	; (18a78 <lcd_displaying_task+0x454>)
   18934:	0018      	movs	r0, r3
   18936:	4b29      	ldr	r3, [pc, #164]	; (189dc <lcd_displaying_task+0x3b8>)
   18938:	4798      	blx	r3
					}
					LCD_setCursor(0,1);
   1893a:	2101      	movs	r1, #1
   1893c:	2000      	movs	r0, #0
   1893e:	4b25      	ldr	r3, [pc, #148]	; (189d4 <lcd_displaying_task+0x3b0>)
   18940:	4798      	blx	r3
					lcd_printf("PHASE STATE:");
   18942:	4b4e      	ldr	r3, [pc, #312]	; (18a7c <lcd_displaying_task+0x458>)
   18944:	0018      	movs	r0, r3
   18946:	4b25      	ldr	r3, [pc, #148]	; (189dc <lcd_displaying_task+0x3b8>)
   18948:	4798      	blx	r3
					if (structThreePhase_state.u8t_phase_ac_state == AC_3PH)
   1894a:	4b49      	ldr	r3, [pc, #292]	; (18a70 <lcd_displaying_task+0x44c>)
   1894c:	785b      	ldrb	r3, [r3, #1]
   1894e:	b2db      	uxtb	r3, r3
   18950:	2b03      	cmp	r3, #3
   18952:	d104      	bne.n	1895e <lcd_displaying_task+0x33a>
					{
						lcd_printf(" 3PH ");
   18954:	4b4a      	ldr	r3, [pc, #296]	; (18a80 <lcd_displaying_task+0x45c>)
   18956:	0018      	movs	r0, r3
   18958:	4b20      	ldr	r3, [pc, #128]	; (189dc <lcd_displaying_task+0x3b8>)
   1895a:	4798      	blx	r3
					}
					else
					{
						lcd_printf(" OFF");
					}
					break;
   1895c:	e19b      	b.n	18c96 <lcd_displaying_task+0x672>
					else if(structThreePhase_state.u8t_phase_ac_state == AC_2PH)
   1895e:	4b44      	ldr	r3, [pc, #272]	; (18a70 <lcd_displaying_task+0x44c>)
   18960:	785b      	ldrb	r3, [r3, #1]
   18962:	b2db      	uxtb	r3, r3
   18964:	2b02      	cmp	r3, #2
   18966:	d104      	bne.n	18972 <lcd_displaying_task+0x34e>
						lcd_printf(" 2PH ");
   18968:	4b46      	ldr	r3, [pc, #280]	; (18a84 <lcd_displaying_task+0x460>)
   1896a:	0018      	movs	r0, r3
   1896c:	4b1b      	ldr	r3, [pc, #108]	; (189dc <lcd_displaying_task+0x3b8>)
   1896e:	4798      	blx	r3
					break;
   18970:	e191      	b.n	18c96 <lcd_displaying_task+0x672>
						lcd_printf(" OFF");
   18972:	4b45      	ldr	r3, [pc, #276]	; (18a88 <lcd_displaying_task+0x464>)
   18974:	0018      	movs	r0, r3
   18976:	4b19      	ldr	r3, [pc, #100]	; (189dc <lcd_displaying_task+0x3b8>)
   18978:	4798      	blx	r3
					break;
   1897a:	e18c      	b.n	18c96 <lcd_displaying_task+0x672>
				}
				case 5:
				{
					LCD_setCursor(0,0);
   1897c:	2100      	movs	r1, #0
   1897e:	2000      	movs	r0, #0
   18980:	4b14      	ldr	r3, [pc, #80]	; (189d4 <lcd_displaying_task+0x3b0>)
   18982:	4798      	blx	r3
					lcd_printf("O-LEVEL : ");
   18984:	4b41      	ldr	r3, [pc, #260]	; (18a8c <lcd_displaying_task+0x468>)
   18986:	0018      	movs	r0, r3
   18988:	4b14      	ldr	r3, [pc, #80]	; (189dc <lcd_displaying_task+0x3b8>)
   1898a:	4798      	blx	r3
					if (overheadLevel == OVERHEADHIGHLEVEL)
   1898c:	4b40      	ldr	r3, [pc, #256]	; (18a90 <lcd_displaying_task+0x46c>)
   1898e:	781b      	ldrb	r3, [r3, #0]
   18990:	b2db      	uxtb	r3, r3
   18992:	2b02      	cmp	r3, #2
   18994:	d104      	bne.n	189a0 <lcd_displaying_task+0x37c>
					{
						lcd_printf("HIGH  ");
   18996:	4b3f      	ldr	r3, [pc, #252]	; (18a94 <lcd_displaying_task+0x470>)
   18998:	0018      	movs	r0, r3
   1899a:	4b10      	ldr	r3, [pc, #64]	; (189dc <lcd_displaying_task+0x3b8>)
   1899c:	4798      	blx	r3
   1899e:	e086      	b.n	18aae <lcd_displaying_task+0x48a>
					}
					else if (overheadLevel == OVERHEADMIDLEVEL)
   189a0:	4b3b      	ldr	r3, [pc, #236]	; (18a90 <lcd_displaying_task+0x46c>)
   189a2:	781b      	ldrb	r3, [r3, #0]
   189a4:	b2db      	uxtb	r3, r3
   189a6:	2b01      	cmp	r3, #1
   189a8:	d178      	bne.n	18a9c <lcd_displaying_task+0x478>
					{
						lcd_printf("MID   ");
   189aa:	4b3b      	ldr	r3, [pc, #236]	; (18a98 <lcd_displaying_task+0x474>)
   189ac:	0018      	movs	r0, r3
   189ae:	4b0b      	ldr	r3, [pc, #44]	; (189dc <lcd_displaying_task+0x3b8>)
   189b0:	4798      	blx	r3
   189b2:	e07c      	b.n	18aae <lcd_displaying_task+0x48a>
   189b4:	200006de 	.word	0x200006de
   189b8:	20000864 	.word	0x20000864
   189bc:	20000865 	.word	0x20000865
   189c0:	00013ca5 	.word	0x00013ca5
   189c4:	00013cd9 	.word	0x00013cd9
   189c8:	0001fd79 	.word	0x0001fd79
   189cc:	000139e1 	.word	0x000139e1
   189d0:	00013f71 	.word	0x00013f71
   189d4:	00014041 	.word	0x00014041
   189d8:	0002a2fc 	.word	0x0002a2fc
   189dc:	0001413d 	.word	0x0001413d
   189e0:	0002a310 	.word	0x0002a310
   189e4:	00000bb8 	.word	0x00000bb8
   189e8:	0002a324 	.word	0x0002a324
   189ec:	0002a338 	.word	0x0002a338
   189f0:	0002a34c 	.word	0x0002a34c
   189f4:	00018e51 	.word	0x00018e51
   189f8:	00020c99 	.word	0x00020c99
   189fc:	2000022c 	.word	0x2000022c
   18a00:	000200dd 	.word	0x000200dd
   18a04:	00020d3d 	.word	0x00020d3d
   18a08:	000289e3 	.word	0x000289e3
   18a0c:	0002a56c 	.word	0x0002a56c
   18a10:	0002a574 	.word	0x0002a574
   18a14:	0002a57c 	.word	0x0002a57c
   18a18:	0002a584 	.word	0x0002a584
   18a1c:	0002a58c 	.word	0x0002a58c
   18a20:	00013fe1 	.word	0x00013fe1
   18a24:	20000776 	.word	0x20000776
   18a28:	0002a350 	.word	0x0002a350
   18a2c:	0002a364 	.word	0x0002a364
   18a30:	0002a378 	.word	0x0002a378
   18a34:	200007c4 	.word	0x200007c4
   18a38:	0002a38c 	.word	0x0002a38c
   18a3c:	0002a3a0 	.word	0x0002a3a0
   18a40:	0002a594 	.word	0x0002a594
   18a44:	0002a3b4 	.word	0x0002a3b4
   18a48:	200006e8 	.word	0x200006e8
   18a4c:	0002a3c8 	.word	0x0002a3c8
   18a50:	0002a3d4 	.word	0x0002a3d4
   18a54:	0001af25 	.word	0x0001af25
   18a58:	0002a3dc 	.word	0x0002a3dc
   18a5c:	0002a3f0 	.word	0x0002a3f0
   18a60:	0002a404 	.word	0x0002a404
   18a64:	0002a418 	.word	0x0002a418
   18a68:	0002a42c 	.word	0x0002a42c
   18a6c:	0002a444 	.word	0x0002a444
   18a70:	20000748 	.word	0x20000748
   18a74:	0002a454 	.word	0x0002a454
   18a78:	0002a45c 	.word	0x0002a45c
   18a7c:	0002a464 	.word	0x0002a464
   18a80:	0002a474 	.word	0x0002a474
   18a84:	0002a47c 	.word	0x0002a47c
   18a88:	0002a484 	.word	0x0002a484
   18a8c:	0002a48c 	.word	0x0002a48c
   18a90:	20000790 	.word	0x20000790
   18a94:	0002a498 	.word	0x0002a498
   18a98:	0002a4a0 	.word	0x0002a4a0
					}
					else if (overheadLevel == OVERHEADCRITICALLEVEL)
   18a9c:	4bb8      	ldr	r3, [pc, #736]	; (18d80 <lcd_displaying_task+0x75c>)
   18a9e:	781b      	ldrb	r3, [r3, #0]
   18aa0:	b2db      	uxtb	r3, r3
   18aa2:	2b00      	cmp	r3, #0
   18aa4:	d103      	bne.n	18aae <lcd_displaying_task+0x48a>
					{
						lcd_printf("LOW   ");
   18aa6:	4bb7      	ldr	r3, [pc, #732]	; (18d84 <lcd_displaying_task+0x760>)
   18aa8:	0018      	movs	r0, r3
   18aaa:	4bb7      	ldr	r3, [pc, #732]	; (18d88 <lcd_displaying_task+0x764>)
   18aac:	4798      	blx	r3
					}
					LCD_setCursor(0,1);
   18aae:	2101      	movs	r1, #1
   18ab0:	2000      	movs	r0, #0
   18ab2:	4bb6      	ldr	r3, [pc, #728]	; (18d8c <lcd_displaying_task+0x768>)
   18ab4:	4798      	blx	r3
					lcd_printf("U-LEVEL : ");
   18ab6:	4bb6      	ldr	r3, [pc, #728]	; (18d90 <lcd_displaying_task+0x76c>)
   18ab8:	0018      	movs	r0, r3
   18aba:	4bb3      	ldr	r3, [pc, #716]	; (18d88 <lcd_displaying_task+0x764>)
   18abc:	4798      	blx	r3
					if (undergroundLevel == CRITICALLEVEL)
   18abe:	4bb5      	ldr	r3, [pc, #724]	; (18d94 <lcd_displaying_task+0x770>)
   18ac0:	781b      	ldrb	r3, [r3, #0]
   18ac2:	2b00      	cmp	r3, #0
   18ac4:	d104      	bne.n	18ad0 <lcd_displaying_task+0x4ac>
					{
						lcd_printf("CRTCL ");
   18ac6:	4bb4      	ldr	r3, [pc, #720]	; (18d98 <lcd_displaying_task+0x774>)
   18ac8:	0018      	movs	r0, r3
   18aca:	4baf      	ldr	r3, [pc, #700]	; (18d88 <lcd_displaying_task+0x764>)
   18acc:	4798      	blx	r3
					}
					else if (undergroundLevel == HIGHLEVEL)
					{
						lcd_printf("HIGH  ");
					}
					break;
   18ace:	e0df      	b.n	18c90 <lcd_displaying_task+0x66c>
					else if (undergroundLevel == LOWLEVEL)
   18ad0:	4bb0      	ldr	r3, [pc, #704]	; (18d94 <lcd_displaying_task+0x770>)
   18ad2:	781b      	ldrb	r3, [r3, #0]
   18ad4:	2b01      	cmp	r3, #1
   18ad6:	d104      	bne.n	18ae2 <lcd_displaying_task+0x4be>
						lcd_printf("LOW   ");
   18ad8:	4baa      	ldr	r3, [pc, #680]	; (18d84 <lcd_displaying_task+0x760>)
   18ada:	0018      	movs	r0, r3
   18adc:	4baa      	ldr	r3, [pc, #680]	; (18d88 <lcd_displaying_task+0x764>)
   18ade:	4798      	blx	r3
					break;
   18ae0:	e0d6      	b.n	18c90 <lcd_displaying_task+0x66c>
					else if (undergroundLevel == MIDLEVEL)
   18ae2:	4bac      	ldr	r3, [pc, #688]	; (18d94 <lcd_displaying_task+0x770>)
   18ae4:	781b      	ldrb	r3, [r3, #0]
   18ae6:	2b02      	cmp	r3, #2
   18ae8:	d104      	bne.n	18af4 <lcd_displaying_task+0x4d0>
						lcd_printf("MID   ");
   18aea:	4bac      	ldr	r3, [pc, #688]	; (18d9c <lcd_displaying_task+0x778>)
   18aec:	0018      	movs	r0, r3
   18aee:	4ba6      	ldr	r3, [pc, #664]	; (18d88 <lcd_displaying_task+0x764>)
   18af0:	4798      	blx	r3
					break;
   18af2:	e0cd      	b.n	18c90 <lcd_displaying_task+0x66c>
					else if (undergroundLevel == HIGHLEVEL)
   18af4:	4ba7      	ldr	r3, [pc, #668]	; (18d94 <lcd_displaying_task+0x770>)
   18af6:	781b      	ldrb	r3, [r3, #0]
   18af8:	2b03      	cmp	r3, #3
   18afa:	d000      	beq.n	18afe <lcd_displaying_task+0x4da>
   18afc:	e0c8      	b.n	18c90 <lcd_displaying_task+0x66c>
						lcd_printf("HIGH  ");
   18afe:	4ba8      	ldr	r3, [pc, #672]	; (18da0 <lcd_displaying_task+0x77c>)
   18b00:	0018      	movs	r0, r3
   18b02:	4ba1      	ldr	r3, [pc, #644]	; (18d88 <lcd_displaying_task+0x764>)
   18b04:	4798      	blx	r3
					break;
   18b06:	e0c3      	b.n	18c90 <lcd_displaying_task+0x66c>
				}
				case 6:
				{
					LCD_setCursor(0,0);
   18b08:	2100      	movs	r1, #0
   18b0a:	2000      	movs	r0, #0
   18b0c:	4b9f      	ldr	r3, [pc, #636]	; (18d8c <lcd_displaying_task+0x768>)
   18b0e:	4798      	blx	r3
					lcd_printf("BatteryPer: %u%% ",Analog_Parameter_Struct.Battery_percentage);
   18b10:	4ba4      	ldr	r3, [pc, #656]	; (18da4 <lcd_displaying_task+0x780>)
   18b12:	7f1b      	ldrb	r3, [r3, #28]
   18b14:	b2db      	uxtb	r3, r3
   18b16:	001a      	movs	r2, r3
   18b18:	4ba3      	ldr	r3, [pc, #652]	; (18da8 <lcd_displaying_task+0x784>)
   18b1a:	0011      	movs	r1, r2
   18b1c:	0018      	movs	r0, r3
   18b1e:	4b9a      	ldr	r3, [pc, #616]	; (18d88 <lcd_displaying_task+0x764>)
   18b20:	4798      	blx	r3
					LCD_setCursor(0,1);
   18b22:	2101      	movs	r1, #1
   18b24:	2000      	movs	r0, #0
   18b26:	4b99      	ldr	r3, [pc, #612]	; (18d8c <lcd_displaying_task+0x768>)
   18b28:	4798      	blx	r3
					lcd_printf("SIGNAL : ");
   18b2a:	4ba0      	ldr	r3, [pc, #640]	; (18dac <lcd_displaying_task+0x788>)
   18b2c:	0018      	movs	r0, r3
   18b2e:	4b96      	ldr	r3, [pc, #600]	; (18d88 <lcd_displaying_task+0x764>)
   18b30:	4798      	blx	r3
					LCD_setCursor(9,1);
   18b32:	2101      	movs	r1, #1
   18b34:	2009      	movs	r0, #9
   18b36:	4b95      	ldr	r3, [pc, #596]	; (18d8c <lcd_displaying_task+0x768>)
   18b38:	4798      	blx	r3
					lcd_printf("       ");
   18b3a:	4b9d      	ldr	r3, [pc, #628]	; (18db0 <lcd_displaying_task+0x78c>)
   18b3c:	0018      	movs	r0, r3
   18b3e:	4b92      	ldr	r3, [pc, #584]	; (18d88 <lcd_displaying_task+0x764>)
   18b40:	4798      	blx	r3
					LCD_setCursor(9,1);
   18b42:	2101      	movs	r1, #1
   18b44:	2009      	movs	r0, #9
   18b46:	4b91      	ldr	r3, [pc, #580]	; (18d8c <lcd_displaying_task+0x768>)
   18b48:	4798      	blx	r3
					
					uint8_t tempSignal = Signal_Strength;
   18b4a:	233b      	movs	r3, #59	; 0x3b
   18b4c:	18fb      	adds	r3, r7, r3
   18b4e:	4a99      	ldr	r2, [pc, #612]	; (18db4 <lcd_displaying_task+0x790>)
   18b50:	7812      	ldrb	r2, [r2, #0]
   18b52:	701a      	strb	r2, [r3, #0]
					for (uint8_t i=0;i<=tempSignal;i++)
   18b54:	233e      	movs	r3, #62	; 0x3e
   18b56:	18fb      	adds	r3, r7, r3
   18b58:	2200      	movs	r2, #0
   18b5a:	701a      	strb	r2, [r3, #0]
   18b5c:	e00c      	b.n	18b78 <lcd_displaying_task+0x554>
					{
						LCD_write(i);
   18b5e:	233e      	movs	r3, #62	; 0x3e
   18b60:	18fb      	adds	r3, r7, r3
   18b62:	781b      	ldrb	r3, [r3, #0]
   18b64:	0018      	movs	r0, r3
   18b66:	4b94      	ldr	r3, [pc, #592]	; (18db8 <lcd_displaying_task+0x794>)
   18b68:	4798      	blx	r3
					for (uint8_t i=0;i<=tempSignal;i++)
   18b6a:	233e      	movs	r3, #62	; 0x3e
   18b6c:	18fb      	adds	r3, r7, r3
   18b6e:	781a      	ldrb	r2, [r3, #0]
   18b70:	233e      	movs	r3, #62	; 0x3e
   18b72:	18fb      	adds	r3, r7, r3
   18b74:	3201      	adds	r2, #1
   18b76:	701a      	strb	r2, [r3, #0]
   18b78:	233e      	movs	r3, #62	; 0x3e
   18b7a:	18fa      	adds	r2, r7, r3
   18b7c:	233b      	movs	r3, #59	; 0x3b
   18b7e:	18fb      	adds	r3, r7, r3
   18b80:	7812      	ldrb	r2, [r2, #0]
   18b82:	781b      	ldrb	r3, [r3, #0]
   18b84:	429a      	cmp	r2, r3
   18b86:	d9ea      	bls.n	18b5e <lcd_displaying_task+0x53a>
					}

					break;
   18b88:	e085      	b.n	18c96 <lcd_displaying_task+0x672>
				}
				case 7:
				{
					LCD_setCursor(0,0);
   18b8a:	2100      	movs	r1, #0
   18b8c:	2000      	movs	r0, #0
   18b8e:	4b7f      	ldr	r3, [pc, #508]	; (18d8c <lcd_displaying_task+0x768>)
   18b90:	4798      	blx	r3
					switch(callStateOnLCD)
   18b92:	4b8a      	ldr	r3, [pc, #552]	; (18dbc <lcd_displaying_task+0x798>)
   18b94:	781b      	ldrb	r3, [r3, #0]
   18b96:	b2db      	uxtb	r3, r3
   18b98:	2b05      	cmp	r3, #5
   18b9a:	d900      	bls.n	18b9e <lcd_displaying_task+0x57a>
   18b9c:	e07a      	b.n	18c94 <lcd_displaying_task+0x670>
   18b9e:	009a      	lsls	r2, r3, #2
   18ba0:	4b87      	ldr	r3, [pc, #540]	; (18dc0 <lcd_displaying_task+0x79c>)
   18ba2:	18d3      	adds	r3, r2, r3
   18ba4:	681b      	ldr	r3, [r3, #0]
   18ba6:	469f      	mov	pc, r3
					{
						case LCDCALLSTATE_RINGING:
						{
							lcd_printf("INCOMING CALL.. ");
   18ba8:	4b86      	ldr	r3, [pc, #536]	; (18dc4 <lcd_displaying_task+0x7a0>)
   18baa:	0018      	movs	r0, r3
   18bac:	4b76      	ldr	r3, [pc, #472]	; (18d88 <lcd_displaying_task+0x764>)
   18bae:	4798      	blx	r3
							LCD_setCursor(0,1);
   18bb0:	2101      	movs	r1, #1
   18bb2:	2000      	movs	r0, #0
   18bb4:	4b75      	ldr	r3, [pc, #468]	; (18d8c <lcd_displaying_task+0x768>)
   18bb6:	4798      	blx	r3
							lcd_printf("%-16s",numberOnLCD);
   18bb8:	4a83      	ldr	r2, [pc, #524]	; (18dc8 <lcd_displaying_task+0x7a4>)
   18bba:	4b84      	ldr	r3, [pc, #528]	; (18dcc <lcd_displaying_task+0x7a8>)
   18bbc:	0011      	movs	r1, r2
   18bbe:	0018      	movs	r0, r3
   18bc0:	4b71      	ldr	r3, [pc, #452]	; (18d88 <lcd_displaying_task+0x764>)
   18bc2:	4798      	blx	r3
							break;
   18bc4:	e045      	b.n	18c52 <lcd_displaying_task+0x62e>
						}
						case LCDCALLSTATE_INCALL:
						{
							lcd_printf("IN CALL...      ");
   18bc6:	4b82      	ldr	r3, [pc, #520]	; (18dd0 <lcd_displaying_task+0x7ac>)
   18bc8:	0018      	movs	r0, r3
   18bca:	4b6f      	ldr	r3, [pc, #444]	; (18d88 <lcd_displaying_task+0x764>)
   18bcc:	4798      	blx	r3
							LCD_setCursor(0,1);
   18bce:	2101      	movs	r1, #1
   18bd0:	2000      	movs	r0, #0
   18bd2:	4b6e      	ldr	r3, [pc, #440]	; (18d8c <lcd_displaying_task+0x768>)
   18bd4:	4798      	blx	r3
							lcd_printf("%-16s",numberOnLCD);
   18bd6:	4a7c      	ldr	r2, [pc, #496]	; (18dc8 <lcd_displaying_task+0x7a4>)
   18bd8:	4b7c      	ldr	r3, [pc, #496]	; (18dcc <lcd_displaying_task+0x7a8>)
   18bda:	0011      	movs	r1, r2
   18bdc:	0018      	movs	r0, r3
   18bde:	4b6a      	ldr	r3, [pc, #424]	; (18d88 <lcd_displaying_task+0x764>)
   18be0:	4798      	blx	r3
							break;
   18be2:	e036      	b.n	18c52 <lcd_displaying_task+0x62e>
						}
						case LCDCALLSTATE_OUTGOING:
						{
							lcd_printf("DIALING...      ");
   18be4:	4b7b      	ldr	r3, [pc, #492]	; (18dd4 <lcd_displaying_task+0x7b0>)
   18be6:	0018      	movs	r0, r3
   18be8:	4b67      	ldr	r3, [pc, #412]	; (18d88 <lcd_displaying_task+0x764>)
   18bea:	4798      	blx	r3
							LCD_setCursor(0,1);
   18bec:	2101      	movs	r1, #1
   18bee:	2000      	movs	r0, #0
   18bf0:	4b66      	ldr	r3, [pc, #408]	; (18d8c <lcd_displaying_task+0x768>)
   18bf2:	4798      	blx	r3
							lcd_printf("%-16s",numberOnLCD);
   18bf4:	4a74      	ldr	r2, [pc, #464]	; (18dc8 <lcd_displaying_task+0x7a4>)
   18bf6:	4b75      	ldr	r3, [pc, #468]	; (18dcc <lcd_displaying_task+0x7a8>)
   18bf8:	0011      	movs	r1, r2
   18bfa:	0018      	movs	r0, r3
   18bfc:	4b62      	ldr	r3, [pc, #392]	; (18d88 <lcd_displaying_task+0x764>)
   18bfe:	4798      	blx	r3
							break;
   18c00:	e027      	b.n	18c52 <lcd_displaying_task+0x62e>
						}
						case LCDCALLSTATE_INCOMINGSMS:
						{
							lcd_printf("INCOMING SMS... ");
   18c02:	4b75      	ldr	r3, [pc, #468]	; (18dd8 <lcd_displaying_task+0x7b4>)
   18c04:	0018      	movs	r0, r3
   18c06:	4b60      	ldr	r3, [pc, #384]	; (18d88 <lcd_displaying_task+0x764>)
   18c08:	4798      	blx	r3
							LCD_setCursor(0,1);
   18c0a:	2101      	movs	r1, #1
   18c0c:	2000      	movs	r0, #0
   18c0e:	4b5f      	ldr	r3, [pc, #380]	; (18d8c <lcd_displaying_task+0x768>)
   18c10:	4798      	blx	r3
							lcd_printf("%-16s",numberOnLCD);
   18c12:	4a6d      	ldr	r2, [pc, #436]	; (18dc8 <lcd_displaying_task+0x7a4>)
   18c14:	4b6d      	ldr	r3, [pc, #436]	; (18dcc <lcd_displaying_task+0x7a8>)
   18c16:	0011      	movs	r1, r2
   18c18:	0018      	movs	r0, r3
   18c1a:	4b5b      	ldr	r3, [pc, #364]	; (18d88 <lcd_displaying_task+0x764>)
   18c1c:	4798      	blx	r3
							setCallStateOnLCD(LCDCALLSTATE_IDLE,NULL,false);
   18c1e:	2200      	movs	r2, #0
   18c20:	2100      	movs	r1, #0
   18c22:	2000      	movs	r0, #0
   18c24:	4b6d      	ldr	r3, [pc, #436]	; (18ddc <lcd_displaying_task+0x7b8>)
   18c26:	4798      	blx	r3
							break;
   18c28:	e013      	b.n	18c52 <lcd_displaying_task+0x62e>
						}
						case LCDCALLSTATE_OUTGOINGSMS:
						{
							lcd_printf("OUTGOING SMS... ");
   18c2a:	4b6d      	ldr	r3, [pc, #436]	; (18de0 <lcd_displaying_task+0x7bc>)
   18c2c:	0018      	movs	r0, r3
   18c2e:	4b56      	ldr	r3, [pc, #344]	; (18d88 <lcd_displaying_task+0x764>)
   18c30:	4798      	blx	r3
							LCD_setCursor(0,1);
   18c32:	2101      	movs	r1, #1
   18c34:	2000      	movs	r0, #0
   18c36:	4b55      	ldr	r3, [pc, #340]	; (18d8c <lcd_displaying_task+0x768>)
   18c38:	4798      	blx	r3
							lcd_printf("%-16s",numberOnLCD);
   18c3a:	4a63      	ldr	r2, [pc, #396]	; (18dc8 <lcd_displaying_task+0x7a4>)
   18c3c:	4b63      	ldr	r3, [pc, #396]	; (18dcc <lcd_displaying_task+0x7a8>)
   18c3e:	0011      	movs	r1, r2
   18c40:	0018      	movs	r0, r3
   18c42:	4b51      	ldr	r3, [pc, #324]	; (18d88 <lcd_displaying_task+0x764>)
   18c44:	4798      	blx	r3
							setCallStateOnLCD(LCDCALLSTATE_IDLE,NULL,false);
   18c46:	2200      	movs	r2, #0
   18c48:	2100      	movs	r1, #0
   18c4a:	2000      	movs	r0, #0
   18c4c:	4b63      	ldr	r3, [pc, #396]	; (18ddc <lcd_displaying_task+0x7b8>)
   18c4e:	4798      	blx	r3
							break;
   18c50:	46c0      	nop			; (mov r8, r8)
						}
					}
					break;
   18c52:	e01f      	b.n	18c94 <lcd_displaying_task+0x670>
				}
				case 8:
				{
					if(Analog_Parameter_Struct.Battery_percentage<35)
   18c54:	4b53      	ldr	r3, [pc, #332]	; (18da4 <lcd_displaying_task+0x780>)
   18c56:	7f1b      	ldrb	r3, [r3, #28]
   18c58:	b2db      	uxtb	r3, r3
   18c5a:	2b22      	cmp	r3, #34	; 0x22
   18c5c:	d810      	bhi.n	18c80 <lcd_displaying_task+0x65c>
					{
						LCD_setCursor(0,0);
   18c5e:	2100      	movs	r1, #0
   18c60:	2000      	movs	r0, #0
   18c62:	4b4a      	ldr	r3, [pc, #296]	; (18d8c <lcd_displaying_task+0x768>)
   18c64:	4798      	blx	r3
						lcd_printf("LOW BATTERY     ");
   18c66:	4b5f      	ldr	r3, [pc, #380]	; (18de4 <lcd_displaying_task+0x7c0>)
   18c68:	0018      	movs	r0, r3
   18c6a:	4b47      	ldr	r3, [pc, #284]	; (18d88 <lcd_displaying_task+0x764>)
   18c6c:	4798      	blx	r3
						LCD_setCursor(0,1);
   18c6e:	2101      	movs	r1, #1
   18c70:	2000      	movs	r0, #0
   18c72:	4b46      	ldr	r3, [pc, #280]	; (18d8c <lcd_displaying_task+0x768>)
   18c74:	4798      	blx	r3
						lcd_printf("                ");
   18c76:	4b5c      	ldr	r3, [pc, #368]	; (18de8 <lcd_displaying_task+0x7c4>)
   18c78:	0018      	movs	r0, r3
   18c7a:	4b43      	ldr	r3, [pc, #268]	; (18d88 <lcd_displaying_task+0x764>)
   18c7c:	4798      	blx	r3
						break;
   18c7e:	e00a      	b.n	18c96 <lcd_displaying_task+0x672>
					}
					else
					{
						screen++;
   18c80:	233f      	movs	r3, #63	; 0x3f
   18c82:	18fb      	adds	r3, r7, r3
   18c84:	781a      	ldrb	r2, [r3, #0]
   18c86:	233f      	movs	r3, #63	; 0x3f
   18c88:	18fb      	adds	r3, r7, r3
   18c8a:	3201      	adds	r2, #1
   18c8c:	701a      	strb	r2, [r3, #0]
					//}
					//else
					//{
						//lcd_printf("OFF             ");
					//}
					break;
   18c8e:	e002      	b.n	18c96 <lcd_displaying_task+0x672>
					break;
   18c90:	46c0      	nop			; (mov r8, r8)
   18c92:	e000      	b.n	18c96 <lcd_displaying_task+0x672>
					break;
   18c94:	46c0      	nop			; (mov r8, r8)
				//break;
				//}
			}
		}
		
		if (xQueueReceive(xfour_Second_Queue,&time,0))
   18c96:	4b55      	ldr	r3, [pc, #340]	; (18dec <lcd_displaying_task+0x7c8>)
   18c98:	681b      	ldr	r3, [r3, #0]
   18c9a:	223a      	movs	r2, #58	; 0x3a
   18c9c:	18b9      	adds	r1, r7, r2
   18c9e:	2200      	movs	r2, #0
   18ca0:	0018      	movs	r0, r3
   18ca2:	4b53      	ldr	r3, [pc, #332]	; (18df0 <lcd_displaying_task+0x7cc>)
   18ca4:	4798      	blx	r3
   18ca6:	1e03      	subs	r3, r0, #0
   18ca8:	d059      	beq.n	18d5e <lcd_displaying_task+0x73a>
		{
			xTimerChangePeriod( four_Second_timeout_timer, 4000/portTICK_PERIOD_MS, portMAX_DELAY);
   18caa:	4b52      	ldr	r3, [pc, #328]	; (18df4 <lcd_displaying_task+0x7d0>)
   18cac:	6818      	ldr	r0, [r3, #0]
   18cae:	23fa      	movs	r3, #250	; 0xfa
   18cb0:	011a      	lsls	r2, r3, #4
   18cb2:	2301      	movs	r3, #1
   18cb4:	425b      	negs	r3, r3
   18cb6:	9300      	str	r3, [sp, #0]
   18cb8:	2300      	movs	r3, #0
   18cba:	2104      	movs	r1, #4
   18cbc:	4c4e      	ldr	r4, [pc, #312]	; (18df8 <lcd_displaying_task+0x7d4>)
   18cbe:	47a0      	blx	r4
			if(varPauseDisplay==false)
   18cc0:	4b4e      	ldr	r3, [pc, #312]	; (18dfc <lcd_displaying_task+0x7d8>)
   18cc2:	781b      	ldrb	r3, [r3, #0]
   18cc4:	b2db      	uxtb	r3, r3
   18cc6:	2201      	movs	r2, #1
   18cc8:	4053      	eors	r3, r2
   18cca:	b2db      	uxtb	r3, r3
   18ccc:	2b00      	cmp	r3, #0
   18cce:	d046      	beq.n	18d5e <lcd_displaying_task+0x73a>
			{
				screen++;
   18cd0:	233f      	movs	r3, #63	; 0x3f
   18cd2:	18fb      	adds	r3, r7, r3
   18cd4:	781a      	ldrb	r2, [r3, #0]
   18cd6:	233f      	movs	r3, #63	; 0x3f
   18cd8:	18fb      	adds	r3, r7, r3
   18cda:	3201      	adds	r2, #1
   18cdc:	701a      	strb	r2, [r3, #0]
				if(!getMotorState() && screen==3)
   18cde:	4b48      	ldr	r3, [pc, #288]	; (18e00 <lcd_displaying_task+0x7dc>)
   18ce0:	4798      	blx	r3
   18ce2:	0003      	movs	r3, r0
   18ce4:	001a      	movs	r2, r3
   18ce6:	2301      	movs	r3, #1
   18ce8:	4053      	eors	r3, r2
   18cea:	b2db      	uxtb	r3, r3
   18cec:	2b00      	cmp	r3, #0
   18cee:	d00b      	beq.n	18d08 <lcd_displaying_task+0x6e4>
   18cf0:	233f      	movs	r3, #63	; 0x3f
   18cf2:	18fb      	adds	r3, r7, r3
   18cf4:	781b      	ldrb	r3, [r3, #0]
   18cf6:	2b03      	cmp	r3, #3
   18cf8:	d106      	bne.n	18d08 <lcd_displaying_task+0x6e4>
				{
					screen++;
   18cfa:	233f      	movs	r3, #63	; 0x3f
   18cfc:	18fb      	adds	r3, r7, r3
   18cfe:	781a      	ldrb	r2, [r3, #0]
   18d00:	233f      	movs	r3, #63	; 0x3f
   18d02:	18fb      	adds	r3, r7, r3
   18d04:	3201      	adds	r2, #1
   18d06:	701a      	strb	r2, [r3, #0]
				}
				
				if(!factory_settings_parameter_struct.ENABLE_WATER && screen==5)
   18d08:	4b3e      	ldr	r3, [pc, #248]	; (18e04 <lcd_displaying_task+0x7e0>)
   18d0a:	795b      	ldrb	r3, [r3, #5]
   18d0c:	2b00      	cmp	r3, #0
   18d0e:	d10b      	bne.n	18d28 <lcd_displaying_task+0x704>
   18d10:	233f      	movs	r3, #63	; 0x3f
   18d12:	18fb      	adds	r3, r7, r3
   18d14:	781b      	ldrb	r3, [r3, #0]
   18d16:	2b05      	cmp	r3, #5
   18d18:	d106      	bne.n	18d28 <lcd_displaying_task+0x704>
				{
					screen++;
   18d1a:	233f      	movs	r3, #63	; 0x3f
   18d1c:	18fb      	adds	r3, r7, r3
   18d1e:	781a      	ldrb	r2, [r3, #0]
   18d20:	233f      	movs	r3, #63	; 0x3f
   18d22:	18fb      	adds	r3, r7, r3
   18d24:	3201      	adds	r2, #1
   18d26:	701a      	strb	r2, [r3, #0]
				}
				
				{
					if(callStateOnLCD==LCDCALLSTATE_IDLE && screen==7)
   18d28:	4b24      	ldr	r3, [pc, #144]	; (18dbc <lcd_displaying_task+0x798>)
   18d2a:	781b      	ldrb	r3, [r3, #0]
   18d2c:	b2db      	uxtb	r3, r3
   18d2e:	2b00      	cmp	r3, #0
   18d30:	d10c      	bne.n	18d4c <lcd_displaying_task+0x728>
   18d32:	233f      	movs	r3, #63	; 0x3f
   18d34:	18fb      	adds	r3, r7, r3
   18d36:	781b      	ldrb	r3, [r3, #0]
   18d38:	2b07      	cmp	r3, #7
   18d3a:	d107      	bne.n	18d4c <lcd_displaying_task+0x728>
					{
						screen++;
   18d3c:	233f      	movs	r3, #63	; 0x3f
   18d3e:	18fb      	adds	r3, r7, r3
   18d40:	781a      	ldrb	r2, [r3, #0]
   18d42:	233f      	movs	r3, #63	; 0x3f
   18d44:	18fb      	adds	r3, r7, r3
   18d46:	3201      	adds	r2, #1
   18d48:	701a      	strb	r2, [r3, #0]
   18d4a:	e008      	b.n	18d5e <lcd_displaying_task+0x73a>
					}
					else if(callStateOnLCD!=LCDCALLSTATE_IDLE)
   18d4c:	4b1b      	ldr	r3, [pc, #108]	; (18dbc <lcd_displaying_task+0x798>)
   18d4e:	781b      	ldrb	r3, [r3, #0]
   18d50:	b2db      	uxtb	r3, r3
   18d52:	2b00      	cmp	r3, #0
   18d54:	d003      	beq.n	18d5e <lcd_displaying_task+0x73a>
					{
						screen=7;
   18d56:	233f      	movs	r3, #63	; 0x3f
   18d58:	18fb      	adds	r3, r7, r3
   18d5a:	2207      	movs	r2, #7
   18d5c:	701a      	strb	r2, [r3, #0]
				}
			}
		}
		
		//screen = 8;
		vTaskDelay(500);
   18d5e:	23fa      	movs	r3, #250	; 0xfa
   18d60:	005b      	lsls	r3, r3, #1
   18d62:	0018      	movs	r0, r3
   18d64:	4b28      	ldr	r3, [pc, #160]	; (18e08 <lcd_displaying_task+0x7e4>)
   18d66:	4798      	blx	r3

		if (screen>8)
   18d68:	233f      	movs	r3, #63	; 0x3f
   18d6a:	18fb      	adds	r3, r7, r3
   18d6c:	781b      	ldrb	r3, [r3, #0]
   18d6e:	2b08      	cmp	r3, #8
   18d70:	d800      	bhi.n	18d74 <lcd_displaying_task+0x750>
   18d72:	e4c6      	b.n	18702 <lcd_displaying_task+0xde>
		{
			screen=1;
   18d74:	233f      	movs	r3, #63	; 0x3f
   18d76:	18fb      	adds	r3, r7, r3
   18d78:	2201      	movs	r2, #1
   18d7a:	701a      	strb	r2, [r3, #0]
		if (lcd_in_sleep)
   18d7c:	e4c1      	b.n	18702 <lcd_displaying_task+0xde>
   18d7e:	46c0      	nop			; (mov r8, r8)
   18d80:	20000790 	.word	0x20000790
   18d84:	0002a4a8 	.word	0x0002a4a8
   18d88:	0001413d 	.word	0x0001413d
   18d8c:	00014041 	.word	0x00014041
   18d90:	0002a4b0 	.word	0x0002a4b0
   18d94:	20000858 	.word	0x20000858
   18d98:	0002a4bc 	.word	0x0002a4bc
   18d9c:	0002a4a0 	.word	0x0002a4a0
   18da0:	0002a498 	.word	0x0002a498
   18da4:	200006e8 	.word	0x200006e8
   18da8:	0002a4c4 	.word	0x0002a4c4
   18dac:	0002a4d8 	.word	0x0002a4d8
   18db0:	0002a4e4 	.word	0x0002a4e4
   18db4:	20000789 	.word	0x20000789
   18db8:	00013ef5 	.word	0x00013ef5
   18dbc:	200007d2 	.word	0x200007d2
   18dc0:	0002a5bc 	.word	0x0002a5bc
   18dc4:	0002a4ec 	.word	0x0002a4ec
   18dc8:	20000844 	.word	0x20000844
   18dcc:	0002a500 	.word	0x0002a500
   18dd0:	0002a508 	.word	0x0002a508
   18dd4:	0002a51c 	.word	0x0002a51c
   18dd8:	0002a530 	.word	0x0002a530
   18ddc:	0001ce41 	.word	0x0001ce41
   18de0:	0002a544 	.word	0x0002a544
   18de4:	0002a558 	.word	0x0002a558
   18de8:	0002a404 	.word	0x0002a404
   18dec:	20000228 	.word	0x20000228
   18df0:	0001f2d1 	.word	0x0001f2d1
   18df4:	2000022c 	.word	0x2000022c
   18df8:	00020d3d 	.word	0x00020d3d
   18dfc:	200007ac 	.word	0x200007ac
   18e00:	0001af25 	.word	0x0001af25
   18e04:	2000062c 	.word	0x2000062c
   18e08:	0001fd79 	.word	0x0001fd79

00018e0c <start_lcd_service>:
	}
}


void start_lcd_service(void)
{
   18e0c:	b590      	push	{r4, r7, lr}
   18e0e:	b083      	sub	sp, #12
   18e10:	af02      	add	r7, sp, #8
	xfour_Second_Queue=xQueueCreate(1,sizeof(uint8_t));
   18e12:	2200      	movs	r2, #0
   18e14:	2101      	movs	r1, #1
   18e16:	2001      	movs	r0, #1
   18e18:	4b09      	ldr	r3, [pc, #36]	; (18e40 <start_lcd_service+0x34>)
   18e1a:	4798      	blx	r3
   18e1c:	0002      	movs	r2, r0
   18e1e:	4b09      	ldr	r3, [pc, #36]	; (18e44 <start_lcd_service+0x38>)
   18e20:	601a      	str	r2, [r3, #0]
	xTaskCreate(lcd_displaying_task,NULL,(uint16_t)400,NULL,1,NULL);
   18e22:	23c8      	movs	r3, #200	; 0xc8
   18e24:	005a      	lsls	r2, r3, #1
   18e26:	4808      	ldr	r0, [pc, #32]	; (18e48 <start_lcd_service+0x3c>)
   18e28:	2300      	movs	r3, #0
   18e2a:	9301      	str	r3, [sp, #4]
   18e2c:	2301      	movs	r3, #1
   18e2e:	9300      	str	r3, [sp, #0]
   18e30:	2300      	movs	r3, #0
   18e32:	2100      	movs	r1, #0
   18e34:	4c05      	ldr	r4, [pc, #20]	; (18e4c <start_lcd_service+0x40>)
   18e36:	47a0      	blx	r4
	
}
   18e38:	46c0      	nop			; (mov r8, r8)
   18e3a:	46bd      	mov	sp, r7
   18e3c:	b001      	add	sp, #4
   18e3e:	bd90      	pop	{r4, r7, pc}
   18e40:	0001ef15 	.word	0x0001ef15
   18e44:	20000228 	.word	0x20000228
   18e48:	00018625 	.word	0x00018625
   18e4c:	0001fa39 	.word	0x0001fa39

00018e50 <four_second_timer_callback>:

static void four_second_timer_callback(TimerHandle_t timer)
{
   18e50:	b590      	push	{r4, r7, lr}
   18e52:	b085      	sub	sp, #20
   18e54:	af00      	add	r7, sp, #0
   18e56:	6078      	str	r0, [r7, #4]
	uint8_t ucharfour_Second=1;
   18e58:	230f      	movs	r3, #15
   18e5a:	18fb      	adds	r3, r7, r3
   18e5c:	2201      	movs	r2, #1
   18e5e:	701a      	strb	r2, [r3, #0]
	xQueueSendFromISR(xfour_Second_Queue,&ucharfour_Second,0);
   18e60:	4b05      	ldr	r3, [pc, #20]	; (18e78 <four_second_timer_callback+0x28>)
   18e62:	6818      	ldr	r0, [r3, #0]
   18e64:	230f      	movs	r3, #15
   18e66:	18f9      	adds	r1, r7, r3
   18e68:	2300      	movs	r3, #0
   18e6a:	2200      	movs	r2, #0
   18e6c:	4c03      	ldr	r4, [pc, #12]	; (18e7c <four_second_timer_callback+0x2c>)
   18e6e:	47a0      	blx	r4
}
   18e70:	46c0      	nop			; (mov r8, r8)
   18e72:	46bd      	mov	sp, r7
   18e74:	b005      	add	sp, #20
   18e76:	bd90      	pop	{r4, r7, pc}
   18e78:	20000228 	.word	0x20000228
   18e7c:	0001f1b1 	.word	0x0001f1b1

00018e80 <ac_is_syncing>:
 * \retval false If the module has completed synchronization
 * \retval ture If the module synchronization is ongoing
 */
static inline bool ac_is_syncing(
        struct ac_module *const module_inst)
{
   18e80:	b580      	push	{r7, lr}
   18e82:	b084      	sub	sp, #16
   18e84:	af00      	add	r7, sp, #0
   18e86:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);

	Ac *const ac_module = module_inst->hw;
   18e88:	687b      	ldr	r3, [r7, #4]
   18e8a:	681b      	ldr	r3, [r3, #0]
   18e8c:	60fb      	str	r3, [r7, #12]
		return true;
	}

	return false;
#else
	if (ac_module->STATUSB.reg & AC_STATUSB_SYNCBUSY) {
   18e8e:	68fb      	ldr	r3, [r7, #12]
   18e90:	7a5b      	ldrb	r3, [r3, #9]
   18e92:	b2db      	uxtb	r3, r3
   18e94:	b25b      	sxtb	r3, r3
   18e96:	2b00      	cmp	r3, #0
   18e98:	da01      	bge.n	18e9e <ac_is_syncing+0x1e>
		return true;
   18e9a:	2301      	movs	r3, #1
   18e9c:	e000      	b.n	18ea0 <ac_is_syncing+0x20>
	}

	return false;
   18e9e:	2300      	movs	r3, #0
#endif
}
   18ea0:	0018      	movs	r0, r3
   18ea2:	46bd      	mov	sp, r7
   18ea4:	b004      	add	sp, #16
   18ea6:	bd80      	pop	{r7, pc}

00018ea8 <ac_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void ac_get_config_defaults(
		struct ac_config *const config)
{
   18ea8:	b580      	push	{r7, lr}
   18eaa:	b084      	sub	sp, #16
   18eac:	af00      	add	r7, sp, #0
   18eae:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);
#ifdef FEATURE_AC_RUN_IN_STANDY_PAIR_COMPARATOR
	/* Default configuration values */
	for (uint32_t i = 0; i < AC_PAIRS; i++) {
   18eb0:	2300      	movs	r3, #0
   18eb2:	60fb      	str	r3, [r7, #12]
   18eb4:	e007      	b.n	18ec6 <ac_get_config_defaults+0x1e>
		config->run_in_standby[i] = false;
   18eb6:	687a      	ldr	r2, [r7, #4]
   18eb8:	68fb      	ldr	r3, [r7, #12]
   18eba:	18d3      	adds	r3, r2, r3
   18ebc:	2200      	movs	r2, #0
   18ebe:	701a      	strb	r2, [r3, #0]
	for (uint32_t i = 0; i < AC_PAIRS; i++) {
   18ec0:	68fb      	ldr	r3, [r7, #12]
   18ec2:	3301      	adds	r3, #1
   18ec4:	60fb      	str	r3, [r7, #12]
   18ec6:	68fb      	ldr	r3, [r7, #12]
   18ec8:	2b00      	cmp	r3, #0
   18eca:	d0f4      	beq.n	18eb6 <ac_get_config_defaults+0xe>
	}
#endif
#if (SAMD) || (SAMHA1) || (SAMHA0) || (SAMR21)
	config->dig_source_generator = GCLK_GENERATOR_0;
   18ecc:	687b      	ldr	r3, [r7, #4]
   18ece:	2200      	movs	r2, #0
   18ed0:	705a      	strb	r2, [r3, #1]
	config->ana_source_generator = GCLK_GENERATOR_3;
   18ed2:	687b      	ldr	r3, [r7, #4]
   18ed4:	2203      	movs	r2, #3
   18ed6:	709a      	strb	r2, [r3, #2]
#else
	config->source_generator = GCLK_GENERATOR_0;
#endif
}
   18ed8:	46c0      	nop			; (mov r8, r8)
   18eda:	46bd      	mov	sp, r7
   18edc:	b004      	add	sp, #16
   18ede:	bd80      	pop	{r7, pc}

00018ee0 <ac_enable>:
 *
 * \param[in] module_inst  Software instance for the Analog Comparator peripheral
 */
static inline void ac_enable(
		struct ac_module *const module_inst)
{
   18ee0:	b580      	push	{r7, lr}
   18ee2:	b084      	sub	sp, #16
   18ee4:	af00      	add	r7, sp, #0
   18ee6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Ac *const ac_module = module_inst->hw;
   18ee8:	687b      	ldr	r3, [r7, #4]
   18eea:	681b      	ldr	r3, [r3, #0]
   18eec:	60fb      	str	r3, [r7, #12]

	while (ac_is_syncing(module_inst)) {
   18eee:	46c0      	nop			; (mov r8, r8)
   18ef0:	687b      	ldr	r3, [r7, #4]
   18ef2:	0018      	movs	r0, r3
   18ef4:	4b07      	ldr	r3, [pc, #28]	; (18f14 <ac_enable+0x34>)
   18ef6:	4798      	blx	r3
   18ef8:	1e03      	subs	r3, r0, #0
   18efa:	d1f9      	bne.n	18ef0 <ac_enable+0x10>
		/* Wait until synchronization is complete */
	}

	/* Write the new comparator module control configuration */
	ac_module->CTRLA.reg |= AC_CTRLA_ENABLE;
   18efc:	68fb      	ldr	r3, [r7, #12]
   18efe:	781b      	ldrb	r3, [r3, #0]
   18f00:	b2db      	uxtb	r3, r3
   18f02:	2202      	movs	r2, #2
   18f04:	4313      	orrs	r3, r2
   18f06:	b2da      	uxtb	r2, r3
   18f08:	68fb      	ldr	r3, [r7, #12]
   18f0a:	701a      	strb	r2, [r3, #0]
}
   18f0c:	46c0      	nop			; (mov r8, r8)
   18f0e:	46bd      	mov	sp, r7
   18f10:	b004      	add	sp, #16
   18f12:	bd80      	pop	{r7, pc}
   18f14:	00018e81 	.word	0x00018e81

00018f18 <ac_enable_events>:
 *  \param[in] events       Struct containing flags of events to enable
 */
static inline void ac_enable_events(
		struct ac_module *const module_inst,
		struct ac_events *const events)
{
   18f18:	b580      	push	{r7, lr}
   18f1a:	b086      	sub	sp, #24
   18f1c:	af00      	add	r7, sp, #0
   18f1e:	6078      	str	r0, [r7, #4]
   18f20:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(events);

	Ac *const ac_module = module_inst->hw;
   18f22:	687b      	ldr	r3, [r7, #4]
   18f24:	681b      	ldr	r3, [r3, #0]
   18f26:	60fb      	str	r3, [r7, #12]

	uint32_t event_mask = 0;
   18f28:	2300      	movs	r3, #0
   18f2a:	617b      	str	r3, [r7, #20]

	/* Configure window output events for each comparator pair */
	for (uint8_t i = 0; i < AC_PAIRS; i++) {
   18f2c:	2313      	movs	r3, #19
   18f2e:	18fb      	adds	r3, r7, r3
   18f30:	2200      	movs	r2, #0
   18f32:	701a      	strb	r2, [r3, #0]
   18f34:	e017      	b.n	18f66 <ac_enable_events+0x4e>
		if (events->generate_event_on_window[i] == true) {
   18f36:	2313      	movs	r3, #19
   18f38:	18fb      	adds	r3, r7, r3
   18f3a:	781b      	ldrb	r3, [r3, #0]
   18f3c:	683a      	ldr	r2, [r7, #0]
   18f3e:	5cd3      	ldrb	r3, [r2, r3]
   18f40:	2b00      	cmp	r3, #0
   18f42:	d009      	beq.n	18f58 <ac_enable_events+0x40>
			event_mask |= (AC_EVCTRL_WINEO0 << i);
   18f44:	2313      	movs	r3, #19
   18f46:	18fb      	adds	r3, r7, r3
   18f48:	781b      	ldrb	r3, [r3, #0]
   18f4a:	2210      	movs	r2, #16
   18f4c:	409a      	lsls	r2, r3
   18f4e:	0013      	movs	r3, r2
   18f50:	001a      	movs	r2, r3
   18f52:	697b      	ldr	r3, [r7, #20]
   18f54:	4313      	orrs	r3, r2
   18f56:	617b      	str	r3, [r7, #20]
	for (uint8_t i = 0; i < AC_PAIRS; i++) {
   18f58:	2313      	movs	r3, #19
   18f5a:	18fb      	adds	r3, r7, r3
   18f5c:	781a      	ldrb	r2, [r3, #0]
   18f5e:	2313      	movs	r3, #19
   18f60:	18fb      	adds	r3, r7, r3
   18f62:	3201      	adds	r2, #1
   18f64:	701a      	strb	r2, [r3, #0]
   18f66:	2313      	movs	r3, #19
   18f68:	18fb      	adds	r3, r7, r3
   18f6a:	781b      	ldrb	r3, [r3, #0]
   18f6c:	2b00      	cmp	r3, #0
   18f6e:	d0e2      	beq.n	18f36 <ac_enable_events+0x1e>
		}
	}

	/* Configure sample input/output events for each comparator */
	for (uint8_t i = 0; i < AC_NUM_CMP; i++) {
   18f70:	2312      	movs	r3, #18
   18f72:	18fb      	adds	r3, r7, r3
   18f74:	2200      	movs	r2, #0
   18f76:	701a      	strb	r2, [r3, #0]
   18f78:	e02b      	b.n	18fd2 <ac_enable_events+0xba>
		if (events->on_event_sample[i] == true) {
   18f7a:	2312      	movs	r3, #18
   18f7c:	18fb      	adds	r3, r7, r3
   18f7e:	781b      	ldrb	r3, [r3, #0]
   18f80:	683a      	ldr	r2, [r7, #0]
   18f82:	18d3      	adds	r3, r2, r3
   18f84:	78db      	ldrb	r3, [r3, #3]
   18f86:	2b00      	cmp	r3, #0
   18f88:	d00a      	beq.n	18fa0 <ac_enable_events+0x88>
			event_mask |= (AC_EVCTRL_COMPEI0 << i);
   18f8a:	2312      	movs	r3, #18
   18f8c:	18fb      	adds	r3, r7, r3
   18f8e:	781b      	ldrb	r3, [r3, #0]
   18f90:	2280      	movs	r2, #128	; 0x80
   18f92:	0052      	lsls	r2, r2, #1
   18f94:	409a      	lsls	r2, r3
   18f96:	0013      	movs	r3, r2
   18f98:	001a      	movs	r2, r3
   18f9a:	697b      	ldr	r3, [r7, #20]
   18f9c:	4313      	orrs	r3, r2
   18f9e:	617b      	str	r3, [r7, #20]
		}

		if (events->generate_event_on_state[i] == true) {
   18fa0:	2312      	movs	r3, #18
   18fa2:	18fb      	adds	r3, r7, r3
   18fa4:	781b      	ldrb	r3, [r3, #0]
   18fa6:	683a      	ldr	r2, [r7, #0]
   18fa8:	18d3      	adds	r3, r2, r3
   18faa:	785b      	ldrb	r3, [r3, #1]
   18fac:	2b00      	cmp	r3, #0
   18fae:	d009      	beq.n	18fc4 <ac_enable_events+0xac>
			event_mask |= (AC_EVCTRL_COMPEO0 << i);
   18fb0:	2312      	movs	r3, #18
   18fb2:	18fb      	adds	r3, r7, r3
   18fb4:	781b      	ldrb	r3, [r3, #0]
   18fb6:	2201      	movs	r2, #1
   18fb8:	409a      	lsls	r2, r3
   18fba:	0013      	movs	r3, r2
   18fbc:	001a      	movs	r2, r3
   18fbe:	697b      	ldr	r3, [r7, #20]
   18fc0:	4313      	orrs	r3, r2
   18fc2:	617b      	str	r3, [r7, #20]
	for (uint8_t i = 0; i < AC_NUM_CMP; i++) {
   18fc4:	2312      	movs	r3, #18
   18fc6:	18fb      	adds	r3, r7, r3
   18fc8:	781a      	ldrb	r2, [r3, #0]
   18fca:	2312      	movs	r3, #18
   18fcc:	18fb      	adds	r3, r7, r3
   18fce:	3201      	adds	r2, #1
   18fd0:	701a      	strb	r2, [r3, #0]
   18fd2:	2312      	movs	r3, #18
   18fd4:	18fb      	adds	r3, r7, r3
   18fd6:	781b      	ldrb	r3, [r3, #0]
   18fd8:	2b01      	cmp	r3, #1
   18fda:	d9ce      	bls.n	18f7a <ac_enable_events+0x62>
		}
	}

	ac_module->EVCTRL.reg |= event_mask;
   18fdc:	68fb      	ldr	r3, [r7, #12]
   18fde:	885b      	ldrh	r3, [r3, #2]
   18fe0:	b29a      	uxth	r2, r3
   18fe2:	697b      	ldr	r3, [r7, #20]
   18fe4:	b29b      	uxth	r3, r3
   18fe6:	4313      	orrs	r3, r2
   18fe8:	b29a      	uxth	r2, r3
   18fea:	68fb      	ldr	r3, [r7, #12]
   18fec:	805a      	strh	r2, [r3, #2]
}
   18fee:	46c0      	nop			; (mov r8, r8)
   18ff0:	46bd      	mov	sp, r7
   18ff2:	b006      	add	sp, #24
   18ff4:	bd80      	pop	{r7, pc}
	...

00018ff8 <ac_chan_enable>:
 *  \param[in] channel      Comparator channel to enable
 */
static inline void ac_chan_enable(
		struct ac_module *const module_inst,
		const enum ac_chan_channel channel)
{
   18ff8:	b580      	push	{r7, lr}
   18ffa:	b084      	sub	sp, #16
   18ffc:	af00      	add	r7, sp, #0
   18ffe:	6078      	str	r0, [r7, #4]
   19000:	000a      	movs	r2, r1
   19002:	1cfb      	adds	r3, r7, #3
   19004:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Ac *const ac_module = module_inst->hw;
   19006:	687b      	ldr	r3, [r7, #4]
   19008:	681b      	ldr	r3, [r3, #0]
   1900a:	60fb      	str	r3, [r7, #12]

	while (ac_is_syncing(module_inst)) {
   1900c:	46c0      	nop			; (mov r8, r8)
   1900e:	687b      	ldr	r3, [r7, #4]
   19010:	0018      	movs	r0, r3
   19012:	4b0b      	ldr	r3, [pc, #44]	; (19040 <ac_chan_enable+0x48>)
   19014:	4798      	blx	r3
   19016:	1e03      	subs	r3, r0, #0
   19018:	d1f9      	bne.n	1900e <ac_chan_enable+0x16>
		/* Wait until synchronization is complete */
	}

	/* Write the new comparator module control configuration */
	ac_module->COMPCTRL[(uint8_t)channel].reg |= AC_COMPCTRL_ENABLE;
   1901a:	1cfb      	adds	r3, r7, #3
   1901c:	781a      	ldrb	r2, [r3, #0]
   1901e:	1cfb      	adds	r3, r7, #3
   19020:	7819      	ldrb	r1, [r3, #0]
   19022:	68fb      	ldr	r3, [r7, #12]
   19024:	3104      	adds	r1, #4
   19026:	0089      	lsls	r1, r1, #2
   19028:	58cb      	ldr	r3, [r1, r3]
   1902a:	2101      	movs	r1, #1
   1902c:	4319      	orrs	r1, r3
   1902e:	68fb      	ldr	r3, [r7, #12]
   19030:	3204      	adds	r2, #4
   19032:	0092      	lsls	r2, r2, #2
   19034:	50d1      	str	r1, [r2, r3]
}
   19036:	46c0      	nop			; (mov r8, r8)
   19038:	46bd      	mov	sp, r7
   1903a:	b004      	add	sp, #16
   1903c:	bd80      	pop	{r7, pc}
   1903e:	46c0      	nop			; (mov r8, r8)
   19040:	00018e81 	.word	0x00018e81

00019044 <ac_chan_is_ready>:
 *  \return Comparator channel readiness state.
 */
static inline bool ac_chan_is_ready(
		struct ac_module *const module_inst,
		const enum ac_chan_channel channel)
{
   19044:	b580      	push	{r7, lr}
   19046:	b084      	sub	sp, #16
   19048:	af00      	add	r7, sp, #0
   1904a:	6078      	str	r0, [r7, #4]
   1904c:	000a      	movs	r2, r1
   1904e:	1cfb      	adds	r3, r7, #3
   19050:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Ac *const ac_module = module_inst->hw;
   19052:	687b      	ldr	r3, [r7, #4]
   19054:	681b      	ldr	r3, [r3, #0]
   19056:	60fb      	str	r3, [r7, #12]

	return (ac_module->STATUSB.reg & (AC_STATUSB_READY0 << (uint8_t)channel));
   19058:	68fb      	ldr	r3, [r7, #12]
   1905a:	7a5b      	ldrb	r3, [r3, #9]
   1905c:	b2db      	uxtb	r3, r3
   1905e:	0019      	movs	r1, r3
   19060:	1cfb      	adds	r3, r7, #3
   19062:	781b      	ldrb	r3, [r3, #0]
   19064:	2201      	movs	r2, #1
   19066:	409a      	lsls	r2, r3
   19068:	0013      	movs	r3, r2
   1906a:	400b      	ands	r3, r1
   1906c:	1e5a      	subs	r2, r3, #1
   1906e:	4193      	sbcs	r3, r2
   19070:	b2db      	uxtb	r3, r3
}
   19072:	0018      	movs	r0, r3
   19074:	46bd      	mov	sp, r7
   19076:	b004      	add	sp, #16
   19078:	bd80      	pop	{r7, pc}
	...

0001907c <ac_chan_get_status>:
 *  \return Bit mask of comparator channel status flags.
 */
static inline uint8_t ac_chan_get_status(
		struct ac_module *const module_inst,
		const enum ac_chan_channel channel)
{
   1907c:	b580      	push	{r7, lr}
   1907e:	b084      	sub	sp, #16
   19080:	af00      	add	r7, sp, #0
   19082:	6078      	str	r0, [r7, #4]
   19084:	000a      	movs	r2, r1
   19086:	1cfb      	adds	r3, r7, #3
   19088:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Ac *const ac_module = module_inst->hw;
   1908a:	687b      	ldr	r3, [r7, #4]
   1908c:	681b      	ldr	r3, [r3, #0]
   1908e:	60bb      	str	r3, [r7, #8]

	uint8_t status_mask = 0;
   19090:	230f      	movs	r3, #15
   19092:	18fb      	adds	r3, r7, r3
   19094:	2200      	movs	r2, #0
   19096:	701a      	strb	r2, [r3, #0]

	if (ac_module->INTFLAG.reg & (1 << channel)) {
   19098:	68bb      	ldr	r3, [r7, #8]
   1909a:	799b      	ldrb	r3, [r3, #6]
   1909c:	b2db      	uxtb	r3, r3
   1909e:	001a      	movs	r2, r3
   190a0:	1cfb      	adds	r3, r7, #3
   190a2:	781b      	ldrb	r3, [r3, #0]
   190a4:	411a      	asrs	r2, r3
   190a6:	0013      	movs	r3, r2
   190a8:	2201      	movs	r2, #1
   190aa:	4013      	ands	r3, r2
   190ac:	d003      	beq.n	190b6 <ac_chan_get_status+0x3a>
		status_mask = AC_CHAN_STATUS_INTERRUPT_SET;
   190ae:	230f      	movs	r3, #15
   190b0:	18fb      	adds	r3, r7, r3
   190b2:	2208      	movs	r2, #8
   190b4:	701a      	strb	r2, [r3, #0]
	}

	if (ac_chan_is_ready(module_inst, channel) == false) {
   190b6:	1cfb      	adds	r3, r7, #3
   190b8:	781a      	ldrb	r2, [r3, #0]
   190ba:	687b      	ldr	r3, [r7, #4]
   190bc:	0011      	movs	r1, r2
   190be:	0018      	movs	r0, r3
   190c0:	4b1b      	ldr	r3, [pc, #108]	; (19130 <ac_chan_get_status+0xb4>)
   190c2:	4798      	blx	r3
   190c4:	0003      	movs	r3, r0
   190c6:	001a      	movs	r2, r3
   190c8:	2301      	movs	r3, #1
   190ca:	4053      	eors	r3, r2
   190cc:	b2db      	uxtb	r3, r3
   190ce:	2b00      	cmp	r3, #0
   190d0:	d00b      	beq.n	190ea <ac_chan_get_status+0x6e>
		status_mask |= AC_CHAN_STATUS_UNKNOWN;
   190d2:	230f      	movs	r3, #15
   190d4:	18fb      	adds	r3, r7, r3
   190d6:	220f      	movs	r2, #15
   190d8:	18ba      	adds	r2, r7, r2
   190da:	7812      	ldrb	r2, [r2, #0]
   190dc:	2101      	movs	r1, #1
   190de:	430a      	orrs	r2, r1
   190e0:	701a      	strb	r2, [r3, #0]
		return status_mask;
   190e2:	230f      	movs	r3, #15
   190e4:	18fb      	adds	r3, r7, r3
   190e6:	781b      	ldrb	r3, [r3, #0]
   190e8:	e01e      	b.n	19128 <ac_chan_get_status+0xac>
	}

	if (ac_module->STATUSA.reg & (AC_STATUSA_STATE0 << (uint8_t)channel)) {
   190ea:	68bb      	ldr	r3, [r7, #8]
   190ec:	7a1b      	ldrb	r3, [r3, #8]
   190ee:	b2db      	uxtb	r3, r3
   190f0:	001a      	movs	r2, r3
   190f2:	1cfb      	adds	r3, r7, #3
   190f4:	781b      	ldrb	r3, [r3, #0]
   190f6:	411a      	asrs	r2, r3
   190f8:	0013      	movs	r3, r2
   190fa:	2201      	movs	r2, #1
   190fc:	4013      	ands	r3, r2
   190fe:	d008      	beq.n	19112 <ac_chan_get_status+0x96>
		status_mask |= AC_CHAN_STATUS_POS_ABOVE_NEG;
   19100:	230f      	movs	r3, #15
   19102:	18fb      	adds	r3, r7, r3
   19104:	220f      	movs	r2, #15
   19106:	18ba      	adds	r2, r7, r2
   19108:	7812      	ldrb	r2, [r2, #0]
   1910a:	2104      	movs	r1, #4
   1910c:	430a      	orrs	r2, r1
   1910e:	701a      	strb	r2, [r3, #0]
   19110:	e007      	b.n	19122 <ac_chan_get_status+0xa6>
	} else {
		status_mask |= AC_CHAN_STATUS_NEG_ABOVE_POS;
   19112:	230f      	movs	r3, #15
   19114:	18fb      	adds	r3, r7, r3
   19116:	220f      	movs	r2, #15
   19118:	18ba      	adds	r2, r7, r2
   1911a:	7812      	ldrb	r2, [r2, #0]
   1911c:	2102      	movs	r1, #2
   1911e:	430a      	orrs	r2, r1
   19120:	701a      	strb	r2, [r3, #0]
	}
	return status_mask;
   19122:	230f      	movs	r3, #15
   19124:	18fb      	adds	r3, r7, r3
   19126:	781b      	ldrb	r3, [r3, #0]
}
   19128:	0018      	movs	r0, r3
   1912a:	46bd      	mov	sp, r7
   1912c:	b004      	add	sp, #16
   1912e:	bd80      	pop	{r7, pc}
   19130:	00019045 	.word	0x00019045

00019134 <system_interrupt_enable>:
{
   19134:	b580      	push	{r7, lr}
   19136:	b082      	sub	sp, #8
   19138:	af00      	add	r7, sp, #0
   1913a:	0002      	movs	r2, r0
   1913c:	1dfb      	adds	r3, r7, #7
   1913e:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   19140:	4b06      	ldr	r3, [pc, #24]	; (1915c <system_interrupt_enable+0x28>)
   19142:	1dfa      	adds	r2, r7, #7
   19144:	7812      	ldrb	r2, [r2, #0]
   19146:	0011      	movs	r1, r2
   19148:	221f      	movs	r2, #31
   1914a:	400a      	ands	r2, r1
   1914c:	2101      	movs	r1, #1
   1914e:	4091      	lsls	r1, r2
   19150:	000a      	movs	r2, r1
   19152:	601a      	str	r2, [r3, #0]
}
   19154:	46c0      	nop			; (mov r8, r8)
   19156:	46bd      	mov	sp, r7
   19158:	b002      	add	sp, #8
   1915a:	bd80      	pop	{r7, pc}
   1915c:	e000e100 	.word	0xe000e100

00019160 <ac_enable_callback>:
 * \param[in]     callback_type Callback type given by an enum
 */
static inline void ac_enable_callback(
		struct ac_module *const module,
		const enum ac_callback callback_type)
{
   19160:	b580      	push	{r7, lr}
   19162:	b084      	sub	sp, #16
   19164:	af00      	add	r7, sp, #0
   19166:	6078      	str	r0, [r7, #4]
   19168:	000a      	movs	r2, r1
   1916a:	1cfb      	adds	r3, r7, #3
   1916c:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

	/* Set software flag for the callback */
	module->enable_callback_mask |= (1 << callback_type);
   1916e:	687b      	ldr	r3, [r7, #4]
   19170:	7e5b      	ldrb	r3, [r3, #25]
   19172:	b25a      	sxtb	r2, r3
   19174:	1cfb      	adds	r3, r7, #3
   19176:	781b      	ldrb	r3, [r3, #0]
   19178:	2101      	movs	r1, #1
   1917a:	4099      	lsls	r1, r3
   1917c:	000b      	movs	r3, r1
   1917e:	b25b      	sxtb	r3, r3
   19180:	4313      	orrs	r3, r2
   19182:	b25b      	sxtb	r3, r3
   19184:	b2da      	uxtb	r2, r3
   19186:	687b      	ldr	r3, [r7, #4]
   19188:	765a      	strb	r2, [r3, #25]

	uint32_t inenset_temp = 0;
   1918a:	2300      	movs	r3, #0
   1918c:	60fb      	str	r3, [r7, #12]

	switch (callback_type)
   1918e:	1cfb      	adds	r3, r7, #3
   19190:	781b      	ldrb	r3, [r3, #0]
   19192:	2b01      	cmp	r3, #1
   19194:	d009      	beq.n	191aa <ac_enable_callback+0x4a>
   19196:	2b04      	cmp	r3, #4
   19198:	d00c      	beq.n	191b4 <ac_enable_callback+0x54>
   1919a:	2b00      	cmp	r3, #0
   1919c:	d000      	beq.n	191a0 <ac_enable_callback+0x40>
			inenset_temp |= AC_INTFLAG_WIN1;
			break;
#  endif
#endif
		default:
			break;
   1919e:	e00e      	b.n	191be <ac_enable_callback+0x5e>
			inenset_temp |= AC_INTFLAG_COMP0;
   191a0:	68fb      	ldr	r3, [r7, #12]
   191a2:	2201      	movs	r2, #1
   191a4:	4313      	orrs	r3, r2
   191a6:	60fb      	str	r3, [r7, #12]
			break;
   191a8:	e009      	b.n	191be <ac_enable_callback+0x5e>
			inenset_temp |= AC_INTFLAG_COMP1;
   191aa:	68fb      	ldr	r3, [r7, #12]
   191ac:	2202      	movs	r2, #2
   191ae:	4313      	orrs	r3, r2
   191b0:	60fb      	str	r3, [r7, #12]
			break;
   191b2:	e004      	b.n	191be <ac_enable_callback+0x5e>
			inenset_temp |= AC_INTFLAG_WIN0;
   191b4:	68fb      	ldr	r3, [r7, #12]
   191b6:	2210      	movs	r2, #16
   191b8:	4313      	orrs	r3, r2
   191ba:	60fb      	str	r3, [r7, #12]
			break;
   191bc:	46c0      	nop			; (mov r8, r8)
	}

	/* Enable the interrupt for the callback */
	module->hw->INTENSET.reg = inenset_temp;
   191be:	687b      	ldr	r3, [r7, #4]
   191c0:	681b      	ldr	r3, [r3, #0]
   191c2:	68fa      	ldr	r2, [r7, #12]
   191c4:	b2d2      	uxtb	r2, r2
   191c6:	715a      	strb	r2, [r3, #5]

#if (AC_INST_NUM == 1)
	/* Enable interrupts for AC module */
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_AC);
   191c8:	2018      	movs	r0, #24
   191ca:	4b03      	ldr	r3, [pc, #12]	; (191d8 <ac_enable_callback+0x78>)
   191cc:	4798      	blx	r3
#elif (AC_INST_NUM > 1)
	system_interrupt_enable(_ac_interrupt_get_interrupt_vector(_ac_get_inst_index(module->hw)));
#endif /* (AC_INST_NUM > 1) */
}
   191ce:	46c0      	nop			; (mov r8, r8)
   191d0:	46bd      	mov	sp, r7
   191d2:	b004      	add	sp, #16
   191d4:	bd80      	pop	{r7, pc}
   191d6:	46c0      	nop			; (mov r8, r8)
   191d8:	00019135 	.word	0x00019135

000191dc <system_pinmux_get_group_from_gpio_pin>:
{
   191dc:	b580      	push	{r7, lr}
   191de:	b084      	sub	sp, #16
   191e0:	af00      	add	r7, sp, #0
   191e2:	0002      	movs	r2, r0
   191e4:	1dfb      	adds	r3, r7, #7
   191e6:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   191e8:	230f      	movs	r3, #15
   191ea:	18fb      	adds	r3, r7, r3
   191ec:	1dfa      	adds	r2, r7, #7
   191ee:	7812      	ldrb	r2, [r2, #0]
   191f0:	09d2      	lsrs	r2, r2, #7
   191f2:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   191f4:	230e      	movs	r3, #14
   191f6:	18fb      	adds	r3, r7, r3
   191f8:	1dfa      	adds	r2, r7, #7
   191fa:	7812      	ldrb	r2, [r2, #0]
   191fc:	0952      	lsrs	r2, r2, #5
   191fe:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   19200:	4b0d      	ldr	r3, [pc, #52]	; (19238 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   19202:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   19204:	230f      	movs	r3, #15
   19206:	18fb      	adds	r3, r7, r3
   19208:	781b      	ldrb	r3, [r3, #0]
   1920a:	2b00      	cmp	r3, #0
   1920c:	d10f      	bne.n	1922e <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   1920e:	230f      	movs	r3, #15
   19210:	18fb      	adds	r3, r7, r3
   19212:	781b      	ldrb	r3, [r3, #0]
   19214:	009b      	lsls	r3, r3, #2
   19216:	2210      	movs	r2, #16
   19218:	4694      	mov	ip, r2
   1921a:	44bc      	add	ip, r7
   1921c:	4463      	add	r3, ip
   1921e:	3b08      	subs	r3, #8
   19220:	681a      	ldr	r2, [r3, #0]
   19222:	230e      	movs	r3, #14
   19224:	18fb      	adds	r3, r7, r3
   19226:	781b      	ldrb	r3, [r3, #0]
   19228:	01db      	lsls	r3, r3, #7
   1922a:	18d3      	adds	r3, r2, r3
   1922c:	e000      	b.n	19230 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   1922e:	2300      	movs	r3, #0
}
   19230:	0018      	movs	r0, r3
   19232:	46bd      	mov	sp, r7
   19234:	b004      	add	sp, #16
   19236:	bd80      	pop	{r7, pc}
   19238:	41004400 	.word	0x41004400

0001923c <adc_is_syncing>:
 * \retval true if the module synchronization is ongoing
 * \retval false if the module has completed synchronization
 */
static inline bool adc_is_syncing(
	struct adc_module *const module_inst)
{
   1923c:	b580      	push	{r7, lr}
   1923e:	b084      	sub	sp, #16
   19240:	af00      	add	r7, sp, #0
   19242:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
   19244:	687b      	ldr	r3, [r7, #4]
   19246:	681b      	ldr	r3, [r3, #0]
   19248:	60fb      	str	r3, [r7, #12]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
   1924a:	68fb      	ldr	r3, [r7, #12]
   1924c:	7e5b      	ldrb	r3, [r3, #25]
   1924e:	b2db      	uxtb	r3, r3
   19250:	b25b      	sxtb	r3, r3
   19252:	2b00      	cmp	r3, #0
   19254:	da01      	bge.n	1925a <adc_is_syncing+0x1e>
		return true;
   19256:	2301      	movs	r3, #1
   19258:	e000      	b.n	1925c <adc_is_syncing+0x20>
	}

	return false;
   1925a:	2300      	movs	r3, #0
}
   1925c:	0018      	movs	r0, r3
   1925e:	46bd      	mov	sp, r7
   19260:	b004      	add	sp, #16
   19262:	bd80      	pop	{r7, pc}

00019264 <adc_get_status>:
 *                                  window range
 * \retval ADC_STATUS_OVERRUN       ADC result has overrun
 */
static inline uint32_t adc_get_status(
		struct adc_module *const module_inst)
{
   19264:	b580      	push	{r7, lr}
   19266:	b086      	sub	sp, #24
   19268:	af00      	add	r7, sp, #0
   1926a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
   1926c:	687b      	ldr	r3, [r7, #4]
   1926e:	681b      	ldr	r3, [r3, #0]
   19270:	613b      	str	r3, [r7, #16]

	uint32_t int_flags = adc_module->INTFLAG.reg;
   19272:	693b      	ldr	r3, [r7, #16]
   19274:	7e1b      	ldrb	r3, [r3, #24]
   19276:	b2db      	uxtb	r3, r3
   19278:	60fb      	str	r3, [r7, #12]

	uint32_t status_flags = 0;
   1927a:	2300      	movs	r3, #0
   1927c:	617b      	str	r3, [r7, #20]

	/* Check for ADC Result Ready */
	if (int_flags & ADC_INTFLAG_RESRDY) {
   1927e:	68fb      	ldr	r3, [r7, #12]
   19280:	2201      	movs	r2, #1
   19282:	4013      	ands	r3, r2
   19284:	d003      	beq.n	1928e <adc_get_status+0x2a>
		status_flags |= ADC_STATUS_RESULT_READY;
   19286:	697b      	ldr	r3, [r7, #20]
   19288:	2201      	movs	r2, #1
   1928a:	4313      	orrs	r3, r2
   1928c:	617b      	str	r3, [r7, #20]
	}

	/* Check for ADC Window Match */
	if (int_flags & ADC_INTFLAG_WINMON) {
   1928e:	68fb      	ldr	r3, [r7, #12]
   19290:	2204      	movs	r2, #4
   19292:	4013      	ands	r3, r2
   19294:	d003      	beq.n	1929e <adc_get_status+0x3a>
		status_flags |= ADC_STATUS_WINDOW;
   19296:	697b      	ldr	r3, [r7, #20]
   19298:	2202      	movs	r2, #2
   1929a:	4313      	orrs	r3, r2
   1929c:	617b      	str	r3, [r7, #20]
	}

	/* Check for ADC Overrun */
	if (int_flags & ADC_INTFLAG_OVERRUN) {
   1929e:	68fb      	ldr	r3, [r7, #12]
   192a0:	2202      	movs	r2, #2
   192a2:	4013      	ands	r3, r2
   192a4:	d003      	beq.n	192ae <adc_get_status+0x4a>
		status_flags |= ADC_STATUS_OVERRUN;
   192a6:	697b      	ldr	r3, [r7, #20]
   192a8:	2204      	movs	r2, #4
   192aa:	4313      	orrs	r3, r2
   192ac:	617b      	str	r3, [r7, #20]
	}

	return status_flags;
   192ae:	697b      	ldr	r3, [r7, #20]
}
   192b0:	0018      	movs	r0, r3
   192b2:	46bd      	mov	sp, r7
   192b4:	b006      	add	sp, #24
   192b6:	bd80      	pop	{r7, pc}

000192b8 <adc_clear_status>:
 * \param[in] status_flags  Bitmask of \c ADC_STATUS_* flags to clear
 */
static inline void adc_clear_status(
		struct adc_module *const module_inst,
		const uint32_t status_flags)
{
   192b8:	b580      	push	{r7, lr}
   192ba:	b084      	sub	sp, #16
   192bc:	af00      	add	r7, sp, #0
   192be:	6078      	str	r0, [r7, #4]
   192c0:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
   192c2:	687b      	ldr	r3, [r7, #4]
   192c4:	681b      	ldr	r3, [r3, #0]
   192c6:	60bb      	str	r3, [r7, #8]

	uint32_t int_flags = 0;
   192c8:	2300      	movs	r3, #0
   192ca:	60fb      	str	r3, [r7, #12]

	/* Check for ADC Result Ready */
	if (status_flags & ADC_STATUS_RESULT_READY) {
   192cc:	683b      	ldr	r3, [r7, #0]
   192ce:	2201      	movs	r2, #1
   192d0:	4013      	ands	r3, r2
   192d2:	d003      	beq.n	192dc <adc_clear_status+0x24>
		int_flags |= ADC_INTFLAG_RESRDY;
   192d4:	68fb      	ldr	r3, [r7, #12]
   192d6:	2201      	movs	r2, #1
   192d8:	4313      	orrs	r3, r2
   192da:	60fb      	str	r3, [r7, #12]
	}

	/* Check for ADC Window Match */
	if (status_flags & ADC_STATUS_WINDOW) {
   192dc:	683b      	ldr	r3, [r7, #0]
   192de:	2202      	movs	r2, #2
   192e0:	4013      	ands	r3, r2
   192e2:	d003      	beq.n	192ec <adc_clear_status+0x34>
		int_flags |= ADC_INTFLAG_WINMON;
   192e4:	68fb      	ldr	r3, [r7, #12]
   192e6:	2204      	movs	r2, #4
   192e8:	4313      	orrs	r3, r2
   192ea:	60fb      	str	r3, [r7, #12]
	}

	/* Check for ADC Overrun */
	if (status_flags & ADC_STATUS_OVERRUN) {
   192ec:	683b      	ldr	r3, [r7, #0]
   192ee:	2204      	movs	r2, #4
   192f0:	4013      	ands	r3, r2
   192f2:	d003      	beq.n	192fc <adc_clear_status+0x44>
		int_flags |= ADC_INTFLAG_OVERRUN;
   192f4:	68fb      	ldr	r3, [r7, #12]
   192f6:	2202      	movs	r2, #2
   192f8:	4313      	orrs	r3, r2
   192fa:	60fb      	str	r3, [r7, #12]
	}

	/* Clear interrupt flag */
	adc_module->INTFLAG.reg = int_flags;
   192fc:	68fb      	ldr	r3, [r7, #12]
   192fe:	b2da      	uxtb	r2, r3
   19300:	68bb      	ldr	r3, [r7, #8]
   19302:	761a      	strb	r2, [r3, #24]
}
   19304:	46c0      	nop			; (mov r8, r8)
   19306:	46bd      	mov	sp, r7
   19308:	b004      	add	sp, #16
   1930a:	bd80      	pop	{r7, pc}

0001930c <adc_enable>:
 *
 * \param[in] module_inst  Pointer to the ADC software instance struct
 */
static inline enum status_code adc_enable(
		struct adc_module *const module_inst)
{
   1930c:	b580      	push	{r7, lr}
   1930e:	b084      	sub	sp, #16
   19310:	af00      	add	r7, sp, #0
   19312:	6078      	str	r0, [r7, #4]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
   19314:	687b      	ldr	r3, [r7, #4]
   19316:	681b      	ldr	r3, [r3, #0]
   19318:	60fb      	str	r3, [r7, #12]

	while (adc_is_syncing(module_inst)) {
   1931a:	46c0      	nop			; (mov r8, r8)
   1931c:	687b      	ldr	r3, [r7, #4]
   1931e:	0018      	movs	r0, r3
   19320:	4b10      	ldr	r3, [pc, #64]	; (19364 <adc_enable+0x58>)
   19322:	4798      	blx	r3
   19324:	1e03      	subs	r3, r0, #0
   19326:	d1f9      	bne.n	1931c <adc_enable+0x10>
	system_interrupt_enable(_adc_interrupt_get_interrupt_vector(
			_adc_get_inst_index(adc_module)));
#   elif (SAMC20)
		system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_ADC0);
#	else
		system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_ADC);
   19328:	2017      	movs	r0, #23
   1932a:	4b0f      	ldr	r3, [pc, #60]	; (19368 <adc_enable+0x5c>)
   1932c:	4798      	blx	r3
#   endif
#endif

	/* Disbale interrupt */
	adc_module->INTENCLR.reg = ADC_INTENCLR_MASK;
   1932e:	68fb      	ldr	r3, [r7, #12]
   19330:	220f      	movs	r2, #15
   19332:	759a      	strb	r2, [r3, #22]
	/* Clear interrupt flag */
	adc_module->INTFLAG.reg = ADC_INTFLAG_MASK;
   19334:	68fb      	ldr	r3, [r7, #12]
   19336:	220f      	movs	r2, #15
   19338:	761a      	strb	r2, [r3, #24]

	adc_module->CTRLA.reg |= ADC_CTRLA_ENABLE;
   1933a:	68fb      	ldr	r3, [r7, #12]
   1933c:	781b      	ldrb	r3, [r3, #0]
   1933e:	b2db      	uxtb	r3, r3
   19340:	2202      	movs	r2, #2
   19342:	4313      	orrs	r3, r2
   19344:	b2da      	uxtb	r2, r3
   19346:	68fb      	ldr	r3, [r7, #12]
   19348:	701a      	strb	r2, [r3, #0]

	while (adc_is_syncing(module_inst)) {
   1934a:	46c0      	nop			; (mov r8, r8)
   1934c:	687b      	ldr	r3, [r7, #4]
   1934e:	0018      	movs	r0, r3
   19350:	4b04      	ldr	r3, [pc, #16]	; (19364 <adc_enable+0x58>)
   19352:	4798      	blx	r3
   19354:	1e03      	subs	r3, r0, #0
   19356:	d1f9      	bne.n	1934c <adc_enable+0x40>
		/* Wait for synchronization */
	}
	return STATUS_OK;
   19358:	2300      	movs	r3, #0
}
   1935a:	0018      	movs	r0, r3
   1935c:	46bd      	mov	sp, r7
   1935e:	b004      	add	sp, #16
   19360:	bd80      	pop	{r7, pc}
   19362:	46c0      	nop			; (mov r8, r8)
   19364:	0001923d 	.word	0x0001923d
   19368:	00019135 	.word	0x00019135

0001936c <adc_start_conversion>:
 *
 * \param[in] module_inst  Pointer to the ADC software instance struct
 */
static inline void adc_start_conversion(
		struct adc_module *const module_inst)
{
   1936c:	b580      	push	{r7, lr}
   1936e:	b084      	sub	sp, #16
   19370:	af00      	add	r7, sp, #0
   19372:	6078      	str	r0, [r7, #4]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
   19374:	687b      	ldr	r3, [r7, #4]
   19376:	681b      	ldr	r3, [r3, #0]
   19378:	60fb      	str	r3, [r7, #12]

	while (adc_is_syncing(module_inst)) {
   1937a:	46c0      	nop			; (mov r8, r8)
   1937c:	687b      	ldr	r3, [r7, #4]
   1937e:	0018      	movs	r0, r3
   19380:	4b0b      	ldr	r3, [pc, #44]	; (193b0 <adc_start_conversion+0x44>)
   19382:	4798      	blx	r3
   19384:	1e03      	subs	r3, r0, #0
   19386:	d1f9      	bne.n	1937c <adc_start_conversion+0x10>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
   19388:	68fb      	ldr	r3, [r7, #12]
   1938a:	7b1b      	ldrb	r3, [r3, #12]
   1938c:	b2db      	uxtb	r3, r3
   1938e:	2202      	movs	r2, #2
   19390:	4313      	orrs	r3, r2
   19392:	b2da      	uxtb	r2, r3
   19394:	68fb      	ldr	r3, [r7, #12]
   19396:	731a      	strb	r2, [r3, #12]

	while (adc_is_syncing(module_inst)) {
   19398:	46c0      	nop			; (mov r8, r8)
   1939a:	687b      	ldr	r3, [r7, #4]
   1939c:	0018      	movs	r0, r3
   1939e:	4b04      	ldr	r3, [pc, #16]	; (193b0 <adc_start_conversion+0x44>)
   193a0:	4798      	blx	r3
   193a2:	1e03      	subs	r3, r0, #0
   193a4:	d1f9      	bne.n	1939a <adc_start_conversion+0x2e>
		/* Wait for synchronization */
	}
}
   193a6:	46c0      	nop			; (mov r8, r8)
   193a8:	46bd      	mov	sp, r7
   193aa:	b004      	add	sp, #16
   193ac:	bd80      	pop	{r7, pc}
   193ae:	46c0      	nop			; (mov r8, r8)
   193b0:	0001923d 	.word	0x0001923d

000193b4 <adc_read>:
 *                             ADC module before the result was read by the software
 */
static inline enum status_code adc_read(
		struct adc_module *const module_inst,
		uint16_t *result)
{
   193b4:	b580      	push	{r7, lr}
   193b6:	b084      	sub	sp, #16
   193b8:	af00      	add	r7, sp, #0
   193ba:	6078      	str	r0, [r7, #4]
   193bc:	6039      	str	r1, [r7, #0]
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(result);

	if (!(adc_get_status(module_inst) & ADC_STATUS_RESULT_READY)) {
   193be:	687b      	ldr	r3, [r7, #4]
   193c0:	0018      	movs	r0, r3
   193c2:	4b18      	ldr	r3, [pc, #96]	; (19424 <adc_read+0x70>)
   193c4:	4798      	blx	r3
   193c6:	0002      	movs	r2, r0
   193c8:	2301      	movs	r3, #1
   193ca:	4013      	ands	r3, r2
   193cc:	d101      	bne.n	193d2 <adc_read+0x1e>
		/* Result not ready */
		return STATUS_BUSY;
   193ce:	2305      	movs	r3, #5
   193d0:	e023      	b.n	1941a <adc_read+0x66>
	}

	Adc *const adc_module = module_inst->hw;
   193d2:	687b      	ldr	r3, [r7, #4]
   193d4:	681b      	ldr	r3, [r3, #0]
   193d6:	60fb      	str	r3, [r7, #12]

#if (SAMD) || (SAMHA1) || (SAMHA0) || (SAMR21)
	while (adc_is_syncing(module_inst)) {
   193d8:	46c0      	nop			; (mov r8, r8)
   193da:	687b      	ldr	r3, [r7, #4]
   193dc:	0018      	movs	r0, r3
   193de:	4b12      	ldr	r3, [pc, #72]	; (19428 <adc_read+0x74>)
   193e0:	4798      	blx	r3
   193e2:	1e03      	subs	r3, r0, #0
   193e4:	d1f9      	bne.n	193da <adc_read+0x26>
		/* Wait for synchronization */
	}
#endif

	/* Get ADC result */
	*result = adc_module->RESULT.reg;
   193e6:	68fb      	ldr	r3, [r7, #12]
   193e8:	8b5b      	ldrh	r3, [r3, #26]
   193ea:	b29a      	uxth	r2, r3
   193ec:	683b      	ldr	r3, [r7, #0]
   193ee:	801a      	strh	r2, [r3, #0]

	/* Reset ready flag */
	adc_clear_status(module_inst, ADC_STATUS_RESULT_READY);
   193f0:	687b      	ldr	r3, [r7, #4]
   193f2:	2101      	movs	r1, #1
   193f4:	0018      	movs	r0, r3
   193f6:	4b0d      	ldr	r3, [pc, #52]	; (1942c <adc_read+0x78>)
   193f8:	4798      	blx	r3

	if (adc_get_status(module_inst) & ADC_STATUS_OVERRUN) {
   193fa:	687b      	ldr	r3, [r7, #4]
   193fc:	0018      	movs	r0, r3
   193fe:	4b09      	ldr	r3, [pc, #36]	; (19424 <adc_read+0x70>)
   19400:	4798      	blx	r3
   19402:	0002      	movs	r2, r0
   19404:	2304      	movs	r3, #4
   19406:	4013      	ands	r3, r2
   19408:	d006      	beq.n	19418 <adc_read+0x64>
		adc_clear_status(module_inst, ADC_STATUS_OVERRUN);
   1940a:	687b      	ldr	r3, [r7, #4]
   1940c:	2104      	movs	r1, #4
   1940e:	0018      	movs	r0, r3
   19410:	4b06      	ldr	r3, [pc, #24]	; (1942c <adc_read+0x78>)
   19412:	4798      	blx	r3
		return STATUS_ERR_OVERFLOW;
   19414:	231e      	movs	r3, #30
   19416:	e000      	b.n	1941a <adc_read+0x66>
	}

	return STATUS_OK;
   19418:	2300      	movs	r3, #0
}
   1941a:	0018      	movs	r0, r3
   1941c:	46bd      	mov	sp, r7
   1941e:	b004      	add	sp, #16
   19420:	bd80      	pop	{r7, pc}
   19422:	46c0      	nop			; (mov r8, r8)
   19424:	00019265 	.word	0x00019265
   19428:	0001923d 	.word	0x0001923d
   1942c:	000192b9 	.word	0x000192b9

00019430 <adc_set_positive_input>:
 * \param[in] positive_input  Positive input pin
 */
static inline void adc_set_positive_input(
		struct adc_module *const module_inst,
		const enum adc_positive_input positive_input)
{
   19430:	b580      	push	{r7, lr}
   19432:	b084      	sub	sp, #16
   19434:	af00      	add	r7, sp, #0
   19436:	6078      	str	r0, [r7, #4]
   19438:	000a      	movs	r2, r1
   1943a:	1cfb      	adds	r3, r7, #3
   1943c:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
   1943e:	687b      	ldr	r3, [r7, #4]
   19440:	681b      	ldr	r3, [r3, #0]
   19442:	60fb      	str	r3, [r7, #12]

	while (adc_is_syncing(module_inst)) {
   19444:	46c0      	nop			; (mov r8, r8)
   19446:	687b      	ldr	r3, [r7, #4]
   19448:	0018      	movs	r0, r3
   1944a:	4b0c      	ldr	r3, [pc, #48]	; (1947c <adc_set_positive_input+0x4c>)
   1944c:	4798      	blx	r3
   1944e:	1e03      	subs	r3, r0, #0
   19450:	d1f9      	bne.n	19446 <adc_set_positive_input+0x16>
		/* Wait for synchronization */
	}

	/* Set positive input pin */
	adc_module->INPUTCTRL.reg =
			(adc_module->INPUTCTRL.reg & ~ADC_INPUTCTRL_MUXPOS_Msk) |
   19452:	68fb      	ldr	r3, [r7, #12]
   19454:	691b      	ldr	r3, [r3, #16]
   19456:	221f      	movs	r2, #31
   19458:	4393      	bics	r3, r2
   1945a:	001a      	movs	r2, r3
   1945c:	1cfb      	adds	r3, r7, #3
   1945e:	781b      	ldrb	r3, [r3, #0]
   19460:	431a      	orrs	r2, r3
	adc_module->INPUTCTRL.reg =
   19462:	68fb      	ldr	r3, [r7, #12]
   19464:	611a      	str	r2, [r3, #16]
			(positive_input);

	while (adc_is_syncing(module_inst)) {
   19466:	46c0      	nop			; (mov r8, r8)
   19468:	687b      	ldr	r3, [r7, #4]
   1946a:	0018      	movs	r0, r3
   1946c:	4b03      	ldr	r3, [pc, #12]	; (1947c <adc_set_positive_input+0x4c>)
   1946e:	4798      	blx	r3
   19470:	1e03      	subs	r3, r0, #0
   19472:	d1f9      	bne.n	19468 <adc_set_positive_input+0x38>
		/* Wait for synchronization */
	}
}
   19474:	46c0      	nop			; (mov r8, r8)
   19476:	46bd      	mov	sp, r7
   19478:	b004      	add	sp, #16
   1947a:	bd80      	pop	{r7, pc}
   1947c:	0001923d 	.word	0x0001923d

00019480 <adc_enable_interrupt>:
 * \param[in] module_inst Pointer to the ADC software instance struct
 * \param[in] interrupt Interrupt to enable
 */
static inline void adc_enable_interrupt(struct adc_module *const module_inst,
		enum adc_interrupt_flag interrupt)
{
   19480:	b580      	push	{r7, lr}
   19482:	b084      	sub	sp, #16
   19484:	af00      	add	r7, sp, #0
   19486:	6078      	str	r0, [r7, #4]
   19488:	000a      	movs	r2, r1
   1948a:	1cfb      	adds	r3, r7, #3
   1948c:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
   1948e:	687b      	ldr	r3, [r7, #4]
   19490:	681b      	ldr	r3, [r3, #0]
   19492:	60fb      	str	r3, [r7, #12]
	/* Enable interrupt */
	adc_module->INTENSET.reg = interrupt;
   19494:	68fb      	ldr	r3, [r7, #12]
   19496:	1cfa      	adds	r2, r7, #3
   19498:	7812      	ldrb	r2, [r2, #0]
   1949a:	75da      	strb	r2, [r3, #23]
}
   1949c:	46c0      	nop			; (mov r8, r8)
   1949e:	46bd      	mov	sp, r7
   194a0:	b004      	add	sp, #16
   194a2:	bd80      	pop	{r7, pc}

000194a4 <adc_enable_callback>:
 *
 */
static inline void adc_enable_callback(
		struct adc_module *const module,
		enum adc_callback callback_type)
{
   194a4:	b580      	push	{r7, lr}
   194a6:	b082      	sub	sp, #8
   194a8:	af00      	add	r7, sp, #0
   194aa:	6078      	str	r0, [r7, #4]
   194ac:	000a      	movs	r2, r1
   194ae:	1cfb      	adds	r3, r7, #3
   194b0:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->enabled_callback_mask |= (1 << callback_type);
   194b2:	687b      	ldr	r3, [r7, #4]
   194b4:	7edb      	ldrb	r3, [r3, #27]
   194b6:	b25a      	sxtb	r2, r3
   194b8:	1cfb      	adds	r3, r7, #3
   194ba:	781b      	ldrb	r3, [r3, #0]
   194bc:	2101      	movs	r1, #1
   194be:	4099      	lsls	r1, r3
   194c0:	000b      	movs	r3, r1
   194c2:	b25b      	sxtb	r3, r3
   194c4:	4313      	orrs	r3, r2
   194c6:	b25b      	sxtb	r3, r3
   194c8:	b2da      	uxtb	r2, r3
   194ca:	687b      	ldr	r3, [r7, #4]
   194cc:	76da      	strb	r2, [r3, #27]

	/* Enable window interrupt if this is a window callback */
	if (callback_type == ADC_CALLBACK_WINDOW) {
   194ce:	1cfb      	adds	r3, r7, #3
   194d0:	781b      	ldrb	r3, [r3, #0]
   194d2:	2b01      	cmp	r3, #1
   194d4:	d104      	bne.n	194e0 <adc_enable_callback+0x3c>
		adc_enable_interrupt(module, ADC_INTERRUPT_WINDOW);
   194d6:	687b      	ldr	r3, [r7, #4]
   194d8:	2104      	movs	r1, #4
   194da:	0018      	movs	r0, r3
   194dc:	4b07      	ldr	r3, [pc, #28]	; (194fc <adc_enable_callback+0x58>)
   194de:	4798      	blx	r3
	}
	/* Enable overrun interrupt if error callback is registered */
	if (callback_type == ADC_CALLBACK_ERROR) {
   194e0:	1cfb      	adds	r3, r7, #3
   194e2:	781b      	ldrb	r3, [r3, #0]
   194e4:	2b02      	cmp	r3, #2
   194e6:	d104      	bne.n	194f2 <adc_enable_callback+0x4e>
		adc_enable_interrupt(module, ADC_INTERRUPT_OVERRUN);
   194e8:	687b      	ldr	r3, [r7, #4]
   194ea:	2102      	movs	r1, #2
   194ec:	0018      	movs	r0, r3
   194ee:	4b03      	ldr	r3, [pc, #12]	; (194fc <adc_enable_callback+0x58>)
   194f0:	4798      	blx	r3
	}
}
   194f2:	46c0      	nop			; (mov r8, r8)
   194f4:	46bd      	mov	sp, r7
   194f6:	b002      	add	sp, #8
   194f8:	bd80      	pop	{r7, pc}
   194fa:	46c0      	nop			; (mov r8, r8)
   194fc:	00019481 	.word	0x00019481

00019500 <port_get_group_from_gpio_pin>:
{
   19500:	b580      	push	{r7, lr}
   19502:	b082      	sub	sp, #8
   19504:	af00      	add	r7, sp, #0
   19506:	0002      	movs	r2, r0
   19508:	1dfb      	adds	r3, r7, #7
   1950a:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   1950c:	1dfb      	adds	r3, r7, #7
   1950e:	781b      	ldrb	r3, [r3, #0]
   19510:	0018      	movs	r0, r3
   19512:	4b03      	ldr	r3, [pc, #12]	; (19520 <port_get_group_from_gpio_pin+0x20>)
   19514:	4798      	blx	r3
   19516:	0003      	movs	r3, r0
}
   19518:	0018      	movs	r0, r3
   1951a:	46bd      	mov	sp, r7
   1951c:	b002      	add	sp, #8
   1951e:	bd80      	pop	{r7, pc}
   19520:	000191dd 	.word	0x000191dd

00019524 <port_get_config_defaults>:
{
   19524:	b580      	push	{r7, lr}
   19526:	b082      	sub	sp, #8
   19528:	af00      	add	r7, sp, #0
   1952a:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
   1952c:	687b      	ldr	r3, [r7, #4]
   1952e:	2200      	movs	r2, #0
   19530:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   19532:	687b      	ldr	r3, [r7, #4]
   19534:	2201      	movs	r2, #1
   19536:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
   19538:	687b      	ldr	r3, [r7, #4]
   1953a:	2200      	movs	r2, #0
   1953c:	709a      	strb	r2, [r3, #2]
}
   1953e:	46c0      	nop			; (mov r8, r8)
   19540:	46bd      	mov	sp, r7
   19542:	b002      	add	sp, #8
   19544:	bd80      	pop	{r7, pc}
	...

00019548 <port_pin_get_input_level>:
{
   19548:	b580      	push	{r7, lr}
   1954a:	b084      	sub	sp, #16
   1954c:	af00      	add	r7, sp, #0
   1954e:	0002      	movs	r2, r0
   19550:	1dfb      	adds	r3, r7, #7
   19552:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   19554:	1dfb      	adds	r3, r7, #7
   19556:	781b      	ldrb	r3, [r3, #0]
   19558:	0018      	movs	r0, r3
   1955a:	4b0b      	ldr	r3, [pc, #44]	; (19588 <port_pin_get_input_level+0x40>)
   1955c:	4798      	blx	r3
   1955e:	0003      	movs	r3, r0
   19560:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   19562:	1dfb      	adds	r3, r7, #7
   19564:	781b      	ldrb	r3, [r3, #0]
   19566:	221f      	movs	r2, #31
   19568:	4013      	ands	r3, r2
   1956a:	2201      	movs	r2, #1
   1956c:	409a      	lsls	r2, r3
   1956e:	0013      	movs	r3, r2
   19570:	60bb      	str	r3, [r7, #8]
	return (port_base->IN.reg & pin_mask);
   19572:	68fb      	ldr	r3, [r7, #12]
   19574:	6a1b      	ldr	r3, [r3, #32]
   19576:	68ba      	ldr	r2, [r7, #8]
   19578:	4013      	ands	r3, r2
   1957a:	1e5a      	subs	r2, r3, #1
   1957c:	4193      	sbcs	r3, r2
   1957e:	b2db      	uxtb	r3, r3
}
   19580:	0018      	movs	r0, r3
   19582:	46bd      	mov	sp, r7
   19584:	b004      	add	sp, #16
   19586:	bd80      	pop	{r7, pc}
   19588:	00019501 	.word	0x00019501

0001958c <port_pin_set_output_level>:
{
   1958c:	b580      	push	{r7, lr}
   1958e:	b084      	sub	sp, #16
   19590:	af00      	add	r7, sp, #0
   19592:	0002      	movs	r2, r0
   19594:	1dfb      	adds	r3, r7, #7
   19596:	701a      	strb	r2, [r3, #0]
   19598:	1dbb      	adds	r3, r7, #6
   1959a:	1c0a      	adds	r2, r1, #0
   1959c:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   1959e:	1dfb      	adds	r3, r7, #7
   195a0:	781b      	ldrb	r3, [r3, #0]
   195a2:	0018      	movs	r0, r3
   195a4:	4b0d      	ldr	r3, [pc, #52]	; (195dc <port_pin_set_output_level+0x50>)
   195a6:	4798      	blx	r3
   195a8:	0003      	movs	r3, r0
   195aa:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   195ac:	1dfb      	adds	r3, r7, #7
   195ae:	781b      	ldrb	r3, [r3, #0]
   195b0:	221f      	movs	r2, #31
   195b2:	4013      	ands	r3, r2
   195b4:	2201      	movs	r2, #1
   195b6:	409a      	lsls	r2, r3
   195b8:	0013      	movs	r3, r2
   195ba:	60bb      	str	r3, [r7, #8]
	if (level) {
   195bc:	1dbb      	adds	r3, r7, #6
   195be:	781b      	ldrb	r3, [r3, #0]
   195c0:	2b00      	cmp	r3, #0
   195c2:	d003      	beq.n	195cc <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   195c4:	68fb      	ldr	r3, [r7, #12]
   195c6:	68ba      	ldr	r2, [r7, #8]
   195c8:	619a      	str	r2, [r3, #24]
}
   195ca:	e002      	b.n	195d2 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   195cc:	68fb      	ldr	r3, [r7, #12]
   195ce:	68ba      	ldr	r2, [r7, #8]
   195d0:	615a      	str	r2, [r3, #20]
}
   195d2:	46c0      	nop			; (mov r8, r8)
   195d4:	46bd      	mov	sp, r7
   195d6:	b004      	add	sp, #16
   195d8:	bd80      	pop	{r7, pc}
   195da:	46c0      	nop			; (mov r8, r8)
   195dc:	00019501 	.word	0x00019501

000195e0 <_extint_get_eic_from_channel>:
 *
 * \return Base address of the associated EIC module.
 */
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
   195e0:	b580      	push	{r7, lr}
   195e2:	b084      	sub	sp, #16
   195e4:	af00      	add	r7, sp, #0
   195e6:	0002      	movs	r2, r0
   195e8:	1dfb      	adds	r3, r7, #7
   195ea:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
   195ec:	230f      	movs	r3, #15
   195ee:	18fb      	adds	r3, r7, r3
   195f0:	1dfa      	adds	r2, r7, #7
   195f2:	7812      	ldrb	r2, [r2, #0]
   195f4:	0952      	lsrs	r2, r2, #5
   195f6:	701a      	strb	r2, [r3, #0]

	if (eic_index < EIC_INST_NUM) {
   195f8:	230f      	movs	r3, #15
   195fa:	18fb      	adds	r3, r7, r3
   195fc:	781b      	ldrb	r3, [r3, #0]
   195fe:	2b00      	cmp	r3, #0
   19600:	d10c      	bne.n	1961c <_extint_get_eic_from_channel+0x3c>
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   19602:	4b09      	ldr	r3, [pc, #36]	; (19628 <_extint_get_eic_from_channel+0x48>)
   19604:	60bb      	str	r3, [r7, #8]

		return eics[eic_index];
   19606:	230f      	movs	r3, #15
   19608:	18fb      	adds	r3, r7, r3
   1960a:	781b      	ldrb	r3, [r3, #0]
   1960c:	009b      	lsls	r3, r3, #2
   1960e:	2210      	movs	r2, #16
   19610:	4694      	mov	ip, r2
   19612:	44bc      	add	ip, r7
   19614:	4463      	add	r3, ip
   19616:	3b08      	subs	r3, #8
   19618:	681b      	ldr	r3, [r3, #0]
   1961a:	e000      	b.n	1961e <_extint_get_eic_from_channel+0x3e>
	} else {
		Assert(false);
		return NULL;
   1961c:	2300      	movs	r3, #0
	}
}
   1961e:	0018      	movs	r0, r3
   19620:	46bd      	mov	sp, r7
   19622:	b004      	add	sp, #16
   19624:	bd80      	pop	{r7, pc}
   19626:	46c0      	nop			; (mov r8, r8)
   19628:	40001800 	.word	0x40001800

0001962c <extint_chan_clear_detected>:
 *
 *  \param[in] channel  External Interrupt channel index to check
 */
static inline void extint_chan_clear_detected(
		const uint8_t channel)
{
   1962c:	b580      	push	{r7, lr}
   1962e:	b084      	sub	sp, #16
   19630:	af00      	add	r7, sp, #0
   19632:	0002      	movs	r2, r0
   19634:	1dfb      	adds	r3, r7, #7
   19636:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
   19638:	1dfb      	adds	r3, r7, #7
   1963a:	781b      	ldrb	r3, [r3, #0]
   1963c:	0018      	movs	r0, r3
   1963e:	4b09      	ldr	r3, [pc, #36]	; (19664 <extint_chan_clear_detected+0x38>)
   19640:	4798      	blx	r3
   19642:	0003      	movs	r3, r0
   19644:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
   19646:	1dfb      	adds	r3, r7, #7
   19648:	781b      	ldrb	r3, [r3, #0]
   1964a:	221f      	movs	r2, #31
   1964c:	4013      	ands	r3, r2
   1964e:	2201      	movs	r2, #1
   19650:	409a      	lsls	r2, r3
   19652:	0013      	movs	r3, r2
   19654:	60bb      	str	r3, [r7, #8]

	eic_module->INTFLAG.reg = eic_mask;
   19656:	68fb      	ldr	r3, [r7, #12]
   19658:	68ba      	ldr	r2, [r7, #8]
   1965a:	611a      	str	r2, [r3, #16]
}
   1965c:	46c0      	nop			; (mov r8, r8)
   1965e:	46bd      	mov	sp, r7
   19660:	b004      	add	sp, #16
   19662:	bd80      	pop	{r7, pc}
   19664:	000195e1 	.word	0x000195e1

00019668 <readOverHeadWaterSensorState>:
simEventTemp[9]		: lost AC power in 1 phase						A
*/


void readOverHeadWaterSensorState(bool *olow,bool *ohigh)
{
   19668:	b580      	push	{r7, lr}
   1966a:	b082      	sub	sp, #8
   1966c:	af00      	add	r7, sp, #0
   1966e:	6078      	str	r0, [r7, #4]
   19670:	6039      	str	r1, [r7, #0]
	*olow = port_pin_get_input_level(OVERHEAD_TANK_LL_PIN);
   19672:	200d      	movs	r0, #13
   19674:	4b08      	ldr	r3, [pc, #32]	; (19698 <readOverHeadWaterSensorState+0x30>)
   19676:	4798      	blx	r3
   19678:	0003      	movs	r3, r0
   1967a:	001a      	movs	r2, r3
   1967c:	687b      	ldr	r3, [r7, #4]
   1967e:	701a      	strb	r2, [r3, #0]
	//*omid = port_pin_get_input_level(OVERHEAD_TANK_ML_PIN);
	*ohigh = port_pin_get_input_level(OVERHEAD_TANK_HL_PIN);
   19680:	202f      	movs	r0, #47	; 0x2f
   19682:	4b05      	ldr	r3, [pc, #20]	; (19698 <readOverHeadWaterSensorState+0x30>)
   19684:	4798      	blx	r3
   19686:	0003      	movs	r3, r0
   19688:	001a      	movs	r2, r3
   1968a:	683b      	ldr	r3, [r7, #0]
   1968c:	701a      	strb	r2, [r3, #0]
}
   1968e:	46c0      	nop			; (mov r8, r8)
   19690:	46bd      	mov	sp, r7
   19692:	b002      	add	sp, #8
   19694:	bd80      	pop	{r7, pc}
   19696:	46c0      	nop			; (mov r8, r8)
   19698:	00019549 	.word	0x00019549

0001969c <updateOverheadLevel>:

void updateOverheadLevel(uint8_t level)
{
   1969c:	b580      	push	{r7, lr}
   1969e:	b082      	sub	sp, #8
   196a0:	af00      	add	r7, sp, #0
   196a2:	0002      	movs	r2, r0
   196a4:	1dfb      	adds	r3, r7, #7
   196a6:	701a      	strb	r2, [r3, #0]
	overheadLevel=level;
   196a8:	4b03      	ldr	r3, [pc, #12]	; (196b8 <updateOverheadLevel+0x1c>)
   196aa:	1dfa      	adds	r2, r7, #7
   196ac:	7812      	ldrb	r2, [r2, #0]
   196ae:	701a      	strb	r2, [r3, #0]
}
   196b0:	46c0      	nop			; (mov r8, r8)
   196b2:	46bd      	mov	sp, r7
   196b4:	b002      	add	sp, #8
   196b6:	bd80      	pop	{r7, pc}
   196b8:	20000790 	.word	0x20000790

000196bc <getOverHeadWaterSensorState>:

uint8_t getOverHeadWaterSensorState(void)
{
   196bc:	b580      	push	{r7, lr}
   196be:	b082      	sub	sp, #8
   196c0:	af00      	add	r7, sp, #0
	bool olow,omid,ohigh;
	readOverHeadWaterSensorState(&olow,&ohigh);
   196c2:	1d7a      	adds	r2, r7, #5
   196c4:	1dbb      	adds	r3, r7, #6
   196c6:	0011      	movs	r1, r2
   196c8:	0018      	movs	r0, r3
   196ca:	4b11      	ldr	r3, [pc, #68]	; (19710 <getOverHeadWaterSensorState+0x54>)
   196cc:	4798      	blx	r3
	uint8_t ans=0;
   196ce:	1dfb      	adds	r3, r7, #7
   196d0:	2200      	movs	r2, #0
   196d2:	701a      	strb	r2, [r3, #0]
	if(!olow)
   196d4:	1dbb      	adds	r3, r7, #6
   196d6:	781b      	ldrb	r3, [r3, #0]
   196d8:	2201      	movs	r2, #1
   196da:	4053      	eors	r3, r2
   196dc:	b2db      	uxtb	r3, r3
   196de:	2b00      	cmp	r3, #0
   196e0:	d010      	beq.n	19704 <getOverHeadWaterSensorState+0x48>
	{
		ans++;
   196e2:	1dfb      	adds	r3, r7, #7
   196e4:	781a      	ldrb	r2, [r3, #0]
   196e6:	1dfb      	adds	r3, r7, #7
   196e8:	3201      	adds	r2, #1
   196ea:	701a      	strb	r2, [r3, #0]
		//if(!omid)
		{
			//ans++;
			if (!ohigh)
   196ec:	1d7b      	adds	r3, r7, #5
   196ee:	781b      	ldrb	r3, [r3, #0]
   196f0:	2201      	movs	r2, #1
   196f2:	4053      	eors	r3, r2
   196f4:	b2db      	uxtb	r3, r3
   196f6:	2b00      	cmp	r3, #0
   196f8:	d004      	beq.n	19704 <getOverHeadWaterSensorState+0x48>
			{
				ans++;
   196fa:	1dfb      	adds	r3, r7, #7
   196fc:	781a      	ldrb	r2, [r3, #0]
   196fe:	1dfb      	adds	r3, r7, #7
   19700:	3201      	adds	r2, #1
   19702:	701a      	strb	r2, [r3, #0]
			}
		}
	}
	return ans;
   19704:	1dfb      	adds	r3, r7, #7
   19706:	781b      	ldrb	r3, [r3, #0]
}
   19708:	0018      	movs	r0, r3
   1970a:	46bd      	mov	sp, r7
   1970c:	b002      	add	sp, #8
   1970e:	bd80      	pop	{r7, pc}
   19710:	00019669 	.word	0x00019669

00019714 <overHeadWaterStatusOnCall>:

void overHeadWaterStatusOnCall(bool current)
{
   19714:	b590      	push	{r4, r7, lr}
   19716:	b085      	sub	sp, #20
   19718:	af00      	add	r7, sp, #0
   1971a:	0002      	movs	r2, r0
   1971c:	1dfb      	adds	r3, r7, #7
   1971e:	701a      	strb	r2, [r3, #0]
	uint8_t temp = getOverHeadWaterSensorState();
   19720:	230f      	movs	r3, #15
   19722:	18fc      	adds	r4, r7, r3
   19724:	4b15      	ldr	r3, [pc, #84]	; (1977c <overHeadWaterStatusOnCall+0x68>)
   19726:	4798      	blx	r3
   19728:	0003      	movs	r3, r0
   1972a:	7023      	strb	r3, [r4, #0]
	if(current)
   1972c:	1dfb      	adds	r3, r7, #7
   1972e:	781b      	ldrb	r3, [r3, #0]
   19730:	2b00      	cmp	r3, #0
   19732:	d004      	beq.n	1973e <overHeadWaterStatusOnCall+0x2a>
	temp = overheadLevel;
   19734:	230f      	movs	r3, #15
   19736:	18fb      	adds	r3, r7, r3
   19738:	4a11      	ldr	r2, [pc, #68]	; (19780 <overHeadWaterStatusOnCall+0x6c>)
   1973a:	7812      	ldrb	r2, [r2, #0]
   1973c:	701a      	strb	r2, [r3, #0]
	if(temp == OVERHEADHIGHLEVEL)
   1973e:	230f      	movs	r3, #15
   19740:	18fb      	adds	r3, r7, r3
   19742:	781b      	ldrb	r3, [r3, #0]
   19744:	2b02      	cmp	r3, #2
   19746:	d103      	bne.n	19750 <overHeadWaterStatusOnCall+0x3c>
	{
		setMotorMGRResponse('V');
   19748:	2056      	movs	r0, #86	; 0x56
   1974a:	4b0e      	ldr	r3, [pc, #56]	; (19784 <overHeadWaterStatusOnCall+0x70>)
   1974c:	4798      	blx	r3
	}
	else if (temp == OVERHEADCRITICALLEVEL)
	{
		setMotorMGRResponse('W');
	}
}
   1974e:	e010      	b.n	19772 <overHeadWaterStatusOnCall+0x5e>
	else if(temp == OVERHEADMIDLEVEL)
   19750:	230f      	movs	r3, #15
   19752:	18fb      	adds	r3, r7, r3
   19754:	781b      	ldrb	r3, [r3, #0]
   19756:	2b01      	cmp	r3, #1
   19758:	d103      	bne.n	19762 <overHeadWaterStatusOnCall+0x4e>
		setMotorMGRResponse('X');
   1975a:	2058      	movs	r0, #88	; 0x58
   1975c:	4b09      	ldr	r3, [pc, #36]	; (19784 <overHeadWaterStatusOnCall+0x70>)
   1975e:	4798      	blx	r3
}
   19760:	e007      	b.n	19772 <overHeadWaterStatusOnCall+0x5e>
	else if (temp == OVERHEADCRITICALLEVEL)
   19762:	230f      	movs	r3, #15
   19764:	18fb      	adds	r3, r7, r3
   19766:	781b      	ldrb	r3, [r3, #0]
   19768:	2b00      	cmp	r3, #0
   1976a:	d102      	bne.n	19772 <overHeadWaterStatusOnCall+0x5e>
		setMotorMGRResponse('W');
   1976c:	2057      	movs	r0, #87	; 0x57
   1976e:	4b05      	ldr	r3, [pc, #20]	; (19784 <overHeadWaterStatusOnCall+0x70>)
   19770:	4798      	blx	r3
}
   19772:	46c0      	nop			; (mov r8, r8)
   19774:	46bd      	mov	sp, r7
   19776:	b005      	add	sp, #20
   19778:	bd90      	pop	{r4, r7, pc}
   1977a:	46c0      	nop			; (mov r8, r8)
   1977c:	000196bd 	.word	0x000196bd
   19780:	20000790 	.word	0x20000790
   19784:	00014d4d 	.word	0x00014d4d

00019788 <readWaterSensorState>:

void readWaterSensorState(bool *low,bool *mid,bool *high)
{
   19788:	b580      	push	{r7, lr}
   1978a:	b084      	sub	sp, #16
   1978c:	af00      	add	r7, sp, #0
   1978e:	60f8      	str	r0, [r7, #12]
   19790:	60b9      	str	r1, [r7, #8]
   19792:	607a      	str	r2, [r7, #4]
	*low = port_pin_get_input_level(UNDERGRUND_TANK_LL_PIN);
   19794:	2037      	movs	r0, #55	; 0x37
   19796:	4b0c      	ldr	r3, [pc, #48]	; (197c8 <readWaterSensorState+0x40>)
   19798:	4798      	blx	r3
   1979a:	0003      	movs	r3, r0
   1979c:	001a      	movs	r2, r3
   1979e:	68fb      	ldr	r3, [r7, #12]
   197a0:	701a      	strb	r2, [r3, #0]
	*mid = port_pin_get_input_level(UNDERGRUND_TANK_ML_PIN);
   197a2:	200f      	movs	r0, #15
   197a4:	4b08      	ldr	r3, [pc, #32]	; (197c8 <readWaterSensorState+0x40>)
   197a6:	4798      	blx	r3
   197a8:	0003      	movs	r3, r0
   197aa:	001a      	movs	r2, r3
   197ac:	68bb      	ldr	r3, [r7, #8]
   197ae:	701a      	strb	r2, [r3, #0]
	*high = port_pin_get_input_level(UNDERGRUND_TANK_HL_PIN);
   197b0:	200e      	movs	r0, #14
   197b2:	4b05      	ldr	r3, [pc, #20]	; (197c8 <readWaterSensorState+0x40>)
   197b4:	4798      	blx	r3
   197b6:	0003      	movs	r3, r0
   197b8:	001a      	movs	r2, r3
   197ba:	687b      	ldr	r3, [r7, #4]
   197bc:	701a      	strb	r2, [r3, #0]
}
   197be:	46c0      	nop			; (mov r8, r8)
   197c0:	46bd      	mov	sp, r7
   197c2:	b004      	add	sp, #16
   197c4:	bd80      	pop	{r7, pc}
   197c6:	46c0      	nop			; (mov r8, r8)
   197c8:	00019549 	.word	0x00019549

000197cc <updateUndergroundLevel>:

void updateUndergroundLevel(uint8_t level)
{
   197cc:	b580      	push	{r7, lr}
   197ce:	b082      	sub	sp, #8
   197d0:	af00      	add	r7, sp, #0
   197d2:	0002      	movs	r2, r0
   197d4:	1dfb      	adds	r3, r7, #7
   197d6:	701a      	strb	r2, [r3, #0]
	undergroundLevel=level;
   197d8:	4b03      	ldr	r3, [pc, #12]	; (197e8 <updateUndergroundLevel+0x1c>)
   197da:	1dfa      	adds	r2, r7, #7
   197dc:	7812      	ldrb	r2, [r2, #0]
   197de:	701a      	strb	r2, [r3, #0]
}
   197e0:	46c0      	nop			; (mov r8, r8)
   197e2:	46bd      	mov	sp, r7
   197e4:	b002      	add	sp, #8
   197e6:	bd80      	pop	{r7, pc}
   197e8:	20000858 	.word	0x20000858

000197ec <getWaterSensorState>:

uint8_t getWaterSensorState(void)
{
   197ec:	b580      	push	{r7, lr}
   197ee:	b082      	sub	sp, #8
   197f0:	af00      	add	r7, sp, #0
	bool l,m,h;
	readWaterSensorState(&l,&m,&h);
   197f2:	1d3a      	adds	r2, r7, #4
   197f4:	1d79      	adds	r1, r7, #5
   197f6:	1dbb      	adds	r3, r7, #6
   197f8:	0018      	movs	r0, r3
   197fa:	4b17      	ldr	r3, [pc, #92]	; (19858 <getWaterSensorState+0x6c>)
   197fc:	4798      	blx	r3
	uint8_t ans=0;
   197fe:	1dfb      	adds	r3, r7, #7
   19800:	2200      	movs	r2, #0
   19802:	701a      	strb	r2, [r3, #0]

	if(!l)
   19804:	1dbb      	adds	r3, r7, #6
   19806:	781b      	ldrb	r3, [r3, #0]
   19808:	2201      	movs	r2, #1
   1980a:	4053      	eors	r3, r2
   1980c:	b2db      	uxtb	r3, r3
   1980e:	2b00      	cmp	r3, #0
   19810:	d01c      	beq.n	1984c <getWaterSensorState+0x60>
	{
		ans++;
   19812:	1dfb      	adds	r3, r7, #7
   19814:	781a      	ldrb	r2, [r3, #0]
   19816:	1dfb      	adds	r3, r7, #7
   19818:	3201      	adds	r2, #1
   1981a:	701a      	strb	r2, [r3, #0]
		if(!m)
   1981c:	1d7b      	adds	r3, r7, #5
   1981e:	781b      	ldrb	r3, [r3, #0]
   19820:	2201      	movs	r2, #1
   19822:	4053      	eors	r3, r2
   19824:	b2db      	uxtb	r3, r3
   19826:	2b00      	cmp	r3, #0
   19828:	d010      	beq.n	1984c <getWaterSensorState+0x60>
		{
			ans++;
   1982a:	1dfb      	adds	r3, r7, #7
   1982c:	781a      	ldrb	r2, [r3, #0]
   1982e:	1dfb      	adds	r3, r7, #7
   19830:	3201      	adds	r2, #1
   19832:	701a      	strb	r2, [r3, #0]
			if(!h)
   19834:	1d3b      	adds	r3, r7, #4
   19836:	781b      	ldrb	r3, [r3, #0]
   19838:	2201      	movs	r2, #1
   1983a:	4053      	eors	r3, r2
   1983c:	b2db      	uxtb	r3, r3
   1983e:	2b00      	cmp	r3, #0
   19840:	d004      	beq.n	1984c <getWaterSensorState+0x60>
			{
				ans++;
   19842:	1dfb      	adds	r3, r7, #7
   19844:	781a      	ldrb	r2, [r3, #0]
   19846:	1dfb      	adds	r3, r7, #7
   19848:	3201      	adds	r2, #1
   1984a:	701a      	strb	r2, [r3, #0]
			}
		}
	}
	return ans;
   1984c:	1dfb      	adds	r3, r7, #7
   1984e:	781b      	ldrb	r3, [r3, #0]
}
   19850:	0018      	movs	r0, r3
   19852:	46bd      	mov	sp, r7
   19854:	b002      	add	sp, #8
   19856:	bd80      	pop	{r7, pc}
   19858:	00019789 	.word	0x00019789

0001985c <waterStatusOnCall>:

void waterStatusOnCall(bool current)
{
   1985c:	b590      	push	{r4, r7, lr}
   1985e:	b085      	sub	sp, #20
   19860:	af00      	add	r7, sp, #0
   19862:	0002      	movs	r2, r0
   19864:	1dfb      	adds	r3, r7, #7
   19866:	701a      	strb	r2, [r3, #0]
	uint8_t temp = getWaterSensorState();
   19868:	230f      	movs	r3, #15
   1986a:	18fc      	adds	r4, r7, r3
   1986c:	4b19      	ldr	r3, [pc, #100]	; (198d4 <waterStatusOnCall+0x78>)
   1986e:	4798      	blx	r3
   19870:	0003      	movs	r3, r0
   19872:	7023      	strb	r3, [r4, #0]
	if(current)
   19874:	1dfb      	adds	r3, r7, #7
   19876:	781b      	ldrb	r3, [r3, #0]
   19878:	2b00      	cmp	r3, #0
   1987a:	d004      	beq.n	19886 <waterStatusOnCall+0x2a>
	temp = undergroundLevel;
   1987c:	230f      	movs	r3, #15
   1987e:	18fb      	adds	r3, r7, r3
   19880:	4a15      	ldr	r2, [pc, #84]	; (198d8 <waterStatusOnCall+0x7c>)
   19882:	7812      	ldrb	r2, [r2, #0]
   19884:	701a      	strb	r2, [r3, #0]

	if(temp==CRITICALLEVEL)
   19886:	230f      	movs	r3, #15
   19888:	18fb      	adds	r3, r7, r3
   1988a:	781b      	ldrb	r3, [r3, #0]
   1988c:	2b00      	cmp	r3, #0
   1988e:	d103      	bne.n	19898 <waterStatusOnCall+0x3c>
	{
		setMotorMGRResponse('T');	//water level insufficient
   19890:	2054      	movs	r0, #84	; 0x54
   19892:	4b12      	ldr	r3, [pc, #72]	; (198dc <waterStatusOnCall+0x80>)
   19894:	4798      	blx	r3
	}
	else if(temp==HIGHLEVEL)
	{
		setMotorMGRResponse('E');	//well is full
	}
}
   19896:	e019      	b.n	198cc <waterStatusOnCall+0x70>
	else if(temp==LOWLEVEL)
   19898:	230f      	movs	r3, #15
   1989a:	18fb      	adds	r3, r7, r3
   1989c:	781b      	ldrb	r3, [r3, #0]
   1989e:	2b01      	cmp	r3, #1
   198a0:	d103      	bne.n	198aa <waterStatusOnCall+0x4e>
		setMotorMGRResponse('Q');	//water below 2nd sensor
   198a2:	2051      	movs	r0, #81	; 0x51
   198a4:	4b0d      	ldr	r3, [pc, #52]	; (198dc <waterStatusOnCall+0x80>)
   198a6:	4798      	blx	r3
}
   198a8:	e010      	b.n	198cc <waterStatusOnCall+0x70>
	else if(temp==MIDLEVEL)
   198aa:	230f      	movs	r3, #15
   198ac:	18fb      	adds	r3, r7, r3
   198ae:	781b      	ldrb	r3, [r3, #0]
   198b0:	2b02      	cmp	r3, #2
   198b2:	d103      	bne.n	198bc <waterStatusOnCall+0x60>
		setMotorMGRResponse('R');	//water below 1st sensor
   198b4:	2052      	movs	r0, #82	; 0x52
   198b6:	4b09      	ldr	r3, [pc, #36]	; (198dc <waterStatusOnCall+0x80>)
   198b8:	4798      	blx	r3
}
   198ba:	e007      	b.n	198cc <waterStatusOnCall+0x70>
	else if(temp==HIGHLEVEL)
   198bc:	230f      	movs	r3, #15
   198be:	18fb      	adds	r3, r7, r3
   198c0:	781b      	ldrb	r3, [r3, #0]
   198c2:	2b03      	cmp	r3, #3
   198c4:	d102      	bne.n	198cc <waterStatusOnCall+0x70>
		setMotorMGRResponse('E');	//well is full
   198c6:	2045      	movs	r0, #69	; 0x45
   198c8:	4b04      	ldr	r3, [pc, #16]	; (198dc <waterStatusOnCall+0x80>)
   198ca:	4798      	blx	r3
}
   198cc:	46c0      	nop			; (mov r8, r8)
   198ce:	46bd      	mov	sp, r7
   198d0:	b005      	add	sp, #20
   198d2:	bd90      	pop	{r4, r7, pc}
   198d4:	000197ed 	.word	0x000197ed
   198d8:	20000858 	.word	0x20000858
   198dc:	00014d4d 	.word	0x00014d4d

000198e0 <Water_Level_Task>:

static void Water_Level_Task(void *params)
{
   198e0:	b590      	push	{r4, r7, lr}
   198e2:	b085      	sub	sp, #20
   198e4:	af00      	add	r7, sp, #0
   198e6:	6078      	str	r0, [r7, #4]
	UNUSED(params);
	
	struct port_config water_level_sensor_pin_config;
	port_get_config_defaults(&water_level_sensor_pin_config);
   198e8:	2308      	movs	r3, #8
   198ea:	18fb      	adds	r3, r7, r3
   198ec:	0018      	movs	r0, r3
   198ee:	4b8b      	ldr	r3, [pc, #556]	; (19b1c <Water_Level_Task+0x23c>)
   198f0:	4798      	blx	r3
	
	water_level_sensor_pin_config.direction = PORT_PIN_DIR_INPUT;
   198f2:	2308      	movs	r3, #8
   198f4:	18fb      	adds	r3, r7, r3
   198f6:	2200      	movs	r2, #0
   198f8:	701a      	strb	r2, [r3, #0]
	water_level_sensor_pin_config.input_pull = PORT_PIN_PULL_UP;
   198fa:	2308      	movs	r3, #8
   198fc:	18fb      	adds	r3, r7, r3
   198fe:	2201      	movs	r2, #1
   19900:	705a      	strb	r2, [r3, #1]
	
	port_pin_set_config(OVERHEAD_TANK_HL_PIN,	&water_level_sensor_pin_config);
   19902:	2308      	movs	r3, #8
   19904:	18fb      	adds	r3, r7, r3
   19906:	0019      	movs	r1, r3
   19908:	202f      	movs	r0, #47	; 0x2f
   1990a:	4b85      	ldr	r3, [pc, #532]	; (19b20 <Water_Level_Task+0x240>)
   1990c:	4798      	blx	r3
	port_pin_set_config(OVERHEAD_TANK_ML_PIN,	&water_level_sensor_pin_config);
   1990e:	2308      	movs	r3, #8
   19910:	18fb      	adds	r3, r7, r3
   19912:	0019      	movs	r1, r3
   19914:	200c      	movs	r0, #12
   19916:	4b82      	ldr	r3, [pc, #520]	; (19b20 <Water_Level_Task+0x240>)
   19918:	4798      	blx	r3
	port_pin_set_config(OVERHEAD_TANK_LL_PIN,	&water_level_sensor_pin_config);
   1991a:	2308      	movs	r3, #8
   1991c:	18fb      	adds	r3, r7, r3
   1991e:	0019      	movs	r1, r3
   19920:	200d      	movs	r0, #13
   19922:	4b7f      	ldr	r3, [pc, #508]	; (19b20 <Water_Level_Task+0x240>)
   19924:	4798      	blx	r3
	port_pin_set_config(UNDERGRUND_TANK_HL_PIN, &water_level_sensor_pin_config);
   19926:	2308      	movs	r3, #8
   19928:	18fb      	adds	r3, r7, r3
   1992a:	0019      	movs	r1, r3
   1992c:	200e      	movs	r0, #14
   1992e:	4b7c      	ldr	r3, [pc, #496]	; (19b20 <Water_Level_Task+0x240>)
   19930:	4798      	blx	r3
	port_pin_set_config(UNDERGRUND_TANK_ML_PIN, &water_level_sensor_pin_config);
   19932:	2308      	movs	r3, #8
   19934:	18fb      	adds	r3, r7, r3
   19936:	0019      	movs	r1, r3
   19938:	200f      	movs	r0, #15
   1993a:	4b79      	ldr	r3, [pc, #484]	; (19b20 <Water_Level_Task+0x240>)
   1993c:	4798      	blx	r3
	port_pin_set_config(UNDERGRUND_TANK_LL_PIN, &water_level_sensor_pin_config);
   1993e:	2308      	movs	r3, #8
   19940:	18fb      	adds	r3, r7, r3
   19942:	0019      	movs	r1, r3
   19944:	2037      	movs	r0, #55	; 0x37
   19946:	4b76      	ldr	r3, [pc, #472]	; (19b20 <Water_Level_Task+0x240>)
   19948:	4798      	blx	r3
	
	undergroundLevel = MIDLEVEL;
   1994a:	4b76      	ldr	r3, [pc, #472]	; (19b24 <Water_Level_Task+0x244>)
   1994c:	2202      	movs	r2, #2
   1994e:	701a      	strb	r2, [r3, #0]
	tempUndergroundLevel = MIDLEVEL;
   19950:	4b75      	ldr	r3, [pc, #468]	; (19b28 <Water_Level_Task+0x248>)
   19952:	2202      	movs	r2, #2
   19954:	701a      	strb	r2, [r3, #0]
	
	overheadLevel = OVERHEADMIDLEVEL;
   19956:	4b75      	ldr	r3, [pc, #468]	; (19b2c <Water_Level_Task+0x24c>)
   19958:	2201      	movs	r2, #1
   1995a:	701a      	strb	r2, [r3, #0]
	tempOverheadLevel = OVERHEADMIDLEVEL;
   1995c:	4b74      	ldr	r3, [pc, #464]	; (19b30 <Water_Level_Task+0x250>)
   1995e:	2201      	movs	r2, #1
   19960:	701a      	strb	r2, [r3, #0]
	tempWaterEventCount = 0;
   19962:	4b74      	ldr	r3, [pc, #464]	; (19b34 <Water_Level_Task+0x254>)
   19964:	2200      	movs	r2, #0
   19966:	701a      	strb	r2, [r3, #0]
	
	uint8_t j = 0;
   19968:	230f      	movs	r3, #15
   1996a:	18fb      	adds	r3, r7, r3
   1996c:	2200      	movs	r2, #0
   1996e:	701a      	strb	r2, [r3, #0]
	if (factory_settings_parameter_struct.ENABLE_GP)
   19970:	4b71      	ldr	r3, [pc, #452]	; (19b38 <Water_Level_Task+0x258>)
   19972:	791b      	ldrb	r3, [r3, #4]
   19974:	2b00      	cmp	r3, #0
   19976:	d004      	beq.n	19982 <Water_Level_Task+0xa2>
	{
		j = 19;
   19978:	230f      	movs	r3, #15
   1997a:	18fb      	adds	r3, r7, r3
   1997c:	2213      	movs	r2, #19
   1997e:	701a      	strb	r2, [r3, #0]
   19980:	e003      	b.n	1998a <Water_Level_Task+0xaa>
	}
	else
	{
		j= 17;
   19982:	230f      	movs	r3, #15
   19984:	18fb      	adds	r3, r7, r3
   19986:	2211      	movs	r2, #17
   19988:	701a      	strb	r2, [r3, #0]
	}
	for (uint8_t i=12;i<j;i++)
   1998a:	230e      	movs	r3, #14
   1998c:	18fb      	adds	r3, r7, r3
   1998e:	220c      	movs	r2, #12
   19990:	701a      	strb	r2, [r3, #0]
   19992:	e00c      	b.n	199ae <Water_Level_Task+0xce>
	{
		simEventTemp[i] = true;
   19994:	230e      	movs	r3, #14
   19996:	18fb      	adds	r3, r7, r3
   19998:	781b      	ldrb	r3, [r3, #0]
   1999a:	4a68      	ldr	r2, [pc, #416]	; (19b3c <Water_Level_Task+0x25c>)
   1999c:	2101      	movs	r1, #1
   1999e:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i=12;i<j;i++)
   199a0:	230e      	movs	r3, #14
   199a2:	18fb      	adds	r3, r7, r3
   199a4:	781a      	ldrb	r2, [r3, #0]
   199a6:	230e      	movs	r3, #14
   199a8:	18fb      	adds	r3, r7, r3
   199aa:	3201      	adds	r2, #1
   199ac:	701a      	strb	r2, [r3, #0]
   199ae:	230e      	movs	r3, #14
   199b0:	18fa      	adds	r2, r7, r3
   199b2:	230f      	movs	r3, #15
   199b4:	18fb      	adds	r3, r7, r3
   199b6:	7812      	ldrb	r2, [r2, #0]
   199b8:	781b      	ldrb	r3, [r3, #0]
   199ba:	429a      	cmp	r2, r3
   199bc:	d3ea      	bcc.n	19994 <Water_Level_Task+0xb4>
	}
	simEvent[12] = 'I';
   199be:	4b60      	ldr	r3, [pc, #384]	; (19b40 <Water_Level_Task+0x260>)
   199c0:	2249      	movs	r2, #73	; 0x49
   199c2:	731a      	strb	r2, [r3, #12]
	simEvent[13] = 'D';
   199c4:	4b5e      	ldr	r3, [pc, #376]	; (19b40 <Water_Level_Task+0x260>)
   199c6:	2244      	movs	r2, #68	; 0x44
   199c8:	735a      	strb	r2, [r3, #13]
	simEvent[14] = 'H';
   199ca:	4b5d      	ldr	r3, [pc, #372]	; (19b40 <Water_Level_Task+0x260>)
   199cc:	2248      	movs	r2, #72	; 0x48
   199ce:	739a      	strb	r2, [r3, #14]
	simEvent[15] = 'E';
   199d0:	4b5b      	ldr	r3, [pc, #364]	; (19b40 <Water_Level_Task+0x260>)
   199d2:	2245      	movs	r2, #69	; 0x45
   199d4:	73da      	strb	r2, [r3, #15]
	simEvent[16] = 'Z';
   199d6:	4b5a      	ldr	r3, [pc, #360]	; (19b40 <Water_Level_Task+0x260>)
   199d8:	225a      	movs	r2, #90	; 0x5a
   199da:	741a      	strb	r2, [r3, #16]
	if (factory_settings_parameter_struct.ENABLE_GP)
   199dc:	4b56      	ldr	r3, [pc, #344]	; (19b38 <Water_Level_Task+0x258>)
   199de:	791b      	ldrb	r3, [r3, #4]
   199e0:	2b00      	cmp	r3, #0
   199e2:	d005      	beq.n	199f0 <Water_Level_Task+0x110>
	{
		simEvent[17] = 'V';
   199e4:	4b56      	ldr	r3, [pc, #344]	; (19b40 <Water_Level_Task+0x260>)
   199e6:	2256      	movs	r2, #86	; 0x56
   199e8:	745a      	strb	r2, [r3, #17]
		simEvent[18] = 'W';
   199ea:	4b55      	ldr	r3, [pc, #340]	; (19b40 <Water_Level_Task+0x260>)
   199ec:	2257      	movs	r2, #87	; 0x57
   199ee:	749a      	strb	r2, [r3, #18]
	}
	if (factory_settings_parameter_struct.ENABLE_M2M)
   199f0:	4b51      	ldr	r3, [pc, #324]	; (19b38 <Water_Level_Task+0x258>)
   199f2:	78db      	ldrb	r3, [r3, #3]
   199f4:	2b00      	cmp	r3, #0
   199f6:	d00b      	beq.n	19a10 <Water_Level_Task+0x130>
	{
		m2mEvent_arr[0] = ME_CLEARED;
   199f8:	4b52      	ldr	r3, [pc, #328]	; (19b44 <Water_Level_Task+0x264>)
   199fa:	2200      	movs	r2, #0
   199fc:	701a      	strb	r2, [r3, #0]
		m2mEvent_arr[1] = ME_CLEARED;
   199fe:	4b51      	ldr	r3, [pc, #324]	; (19b44 <Water_Level_Task+0x264>)
   19a00:	2200      	movs	r2, #0
   19a02:	705a      	strb	r2, [r3, #1]
		
		mapTable[0] = 13;
   19a04:	4b50      	ldr	r3, [pc, #320]	; (19b48 <Water_Level_Task+0x268>)
   19a06:	220d      	movs	r2, #13
   19a08:	701a      	strb	r2, [r3, #0]
		mapTable[1] = 15;
   19a0a:	4b4f      	ldr	r3, [pc, #316]	; (19b48 <Water_Level_Task+0x268>)
   19a0c:	220f      	movs	r2, #15
   19a0e:	705a      	strb	r2, [r3, #1]
	}
	
	
	for (;;)
	{
		bool result=false;
   19a10:	230c      	movs	r3, #12
   19a12:	18fb      	adds	r3, r7, r3
   19a14:	2200      	movs	r2, #0
   19a16:	701a      	strb	r2, [r3, #0]
		
		if (!(user_settings_parameter_struct.waterBypassAddress))
   19a18:	4b4c      	ldr	r3, [pc, #304]	; (19b4c <Water_Level_Task+0x26c>)
   19a1a:	7fdb      	ldrb	r3, [r3, #31]
   19a1c:	b2db      	uxtb	r3, r3
   19a1e:	2b00      	cmp	r3, #0
   19a20:	d000      	beq.n	19a24 <Water_Level_Task+0x144>
   19a22:	e073      	b.n	19b0c <Water_Level_Task+0x22c>
		{
			uint8_t uLevel;
			uint8_t oLevel;
			uLevel = getWaterSensorState();
   19a24:	230b      	movs	r3, #11
   19a26:	18fc      	adds	r4, r7, r3
   19a28:	4b49      	ldr	r3, [pc, #292]	; (19b50 <Water_Level_Task+0x270>)
   19a2a:	4798      	blx	r3
   19a2c:	0003      	movs	r3, r0
   19a2e:	7023      	strb	r3, [r4, #0]
			
			if (factory_settings_parameter_struct.ENABLE_GP)
   19a30:	4b41      	ldr	r3, [pc, #260]	; (19b38 <Water_Level_Task+0x258>)
   19a32:	791b      	ldrb	r3, [r3, #4]
   19a34:	2b00      	cmp	r3, #0
   19a36:	d005      	beq.n	19a44 <Water_Level_Task+0x164>
			{
				oLevel =getOverHeadWaterSensorState();
   19a38:	230d      	movs	r3, #13
   19a3a:	18fc      	adds	r4, r7, r3
   19a3c:	4b45      	ldr	r3, [pc, #276]	; (19b54 <Water_Level_Task+0x274>)
   19a3e:	4798      	blx	r3
   19a40:	0003      	movs	r3, r0
   19a42:	7023      	strb	r3, [r4, #0]
			}
			
			if ((factory_settings_parameter_struct.ENABLE_GP == true)?
   19a44:	4b3c      	ldr	r3, [pc, #240]	; (19b38 <Water_Level_Task+0x258>)
   19a46:	791b      	ldrb	r3, [r3, #4]
   19a48:	2b01      	cmp	r3, #1
   19a4a:	d125      	bne.n	19a98 <Water_Level_Task+0x1b8>
			((uLevel!=undergroundLevel && uLevel==tempUndergroundLevel) ||(oLevel!=overheadLevel && oLevel==tempOverheadLevel)):
   19a4c:	4b35      	ldr	r3, [pc, #212]	; (19b24 <Water_Level_Task+0x244>)
   19a4e:	781b      	ldrb	r3, [r3, #0]
   19a50:	220b      	movs	r2, #11
   19a52:	18ba      	adds	r2, r7, r2
   19a54:	7812      	ldrb	r2, [r2, #0]
   19a56:	429a      	cmp	r2, r3
   19a58:	d006      	beq.n	19a68 <Water_Level_Task+0x188>
   19a5a:	4b33      	ldr	r3, [pc, #204]	; (19b28 <Water_Level_Task+0x248>)
   19a5c:	781b      	ldrb	r3, [r3, #0]
   19a5e:	220b      	movs	r2, #11
   19a60:	18ba      	adds	r2, r7, r2
   19a62:	7812      	ldrb	r2, [r2, #0]
   19a64:	429a      	cmp	r2, r3
   19a66:	d00f      	beq.n	19a88 <Water_Level_Task+0x1a8>
   19a68:	4b30      	ldr	r3, [pc, #192]	; (19b2c <Water_Level_Task+0x24c>)
   19a6a:	781b      	ldrb	r3, [r3, #0]
   19a6c:	b2db      	uxtb	r3, r3
   19a6e:	220d      	movs	r2, #13
   19a70:	18ba      	adds	r2, r7, r2
   19a72:	7812      	ldrb	r2, [r2, #0]
   19a74:	429a      	cmp	r2, r3
   19a76:	d009      	beq.n	19a8c <Water_Level_Task+0x1ac>
   19a78:	4b2d      	ldr	r3, [pc, #180]	; (19b30 <Water_Level_Task+0x250>)
   19a7a:	781b      	ldrb	r3, [r3, #0]
   19a7c:	b2db      	uxtb	r3, r3
   19a7e:	220d      	movs	r2, #13
   19a80:	18ba      	adds	r2, r7, r2
   19a82:	7812      	ldrb	r2, [r2, #0]
   19a84:	429a      	cmp	r2, r3
   19a86:	d101      	bne.n	19a8c <Water_Level_Task+0x1ac>
   19a88:	2301      	movs	r3, #1
   19a8a:	e000      	b.n	19a8e <Water_Level_Task+0x1ae>
   19a8c:	2300      	movs	r3, #0
			if ((factory_settings_parameter_struct.ENABLE_GP == true)?
   19a8e:	1c1a      	adds	r2, r3, #0
   19a90:	2301      	movs	r3, #1
   19a92:	4013      	ands	r3, r2
   19a94:	b2db      	uxtb	r3, r3
   19a96:	e014      	b.n	19ac2 <Water_Level_Task+0x1e2>
			((uLevel!=undergroundLevel && uLevel==tempUndergroundLevel))
   19a98:	4b22      	ldr	r3, [pc, #136]	; (19b24 <Water_Level_Task+0x244>)
   19a9a:	781b      	ldrb	r3, [r3, #0]
   19a9c:	220b      	movs	r2, #11
   19a9e:	18ba      	adds	r2, r7, r2
   19aa0:	7812      	ldrb	r2, [r2, #0]
   19aa2:	429a      	cmp	r2, r3
   19aa4:	d008      	beq.n	19ab8 <Water_Level_Task+0x1d8>
   19aa6:	4b20      	ldr	r3, [pc, #128]	; (19b28 <Water_Level_Task+0x248>)
   19aa8:	781b      	ldrb	r3, [r3, #0]
   19aaa:	220b      	movs	r2, #11
   19aac:	18ba      	adds	r2, r7, r2
   19aae:	7812      	ldrb	r2, [r2, #0]
   19ab0:	429a      	cmp	r2, r3
   19ab2:	d101      	bne.n	19ab8 <Water_Level_Task+0x1d8>
   19ab4:	2301      	movs	r3, #1
   19ab6:	e000      	b.n	19aba <Water_Level_Task+0x1da>
   19ab8:	2300      	movs	r3, #0
			if ((factory_settings_parameter_struct.ENABLE_GP == true)?
   19aba:	1c1a      	adds	r2, r3, #0
   19abc:	2301      	movs	r3, #1
   19abe:	4013      	ands	r3, r2
   19ac0:	b2db      	uxtb	r3, r3
   19ac2:	2b00      	cmp	r3, #0
   19ac4:	d010      	beq.n	19ae8 <Water_Level_Task+0x208>
			)
			{
				tempWaterEventCount++;
   19ac6:	4b1b      	ldr	r3, [pc, #108]	; (19b34 <Water_Level_Task+0x254>)
   19ac8:	781b      	ldrb	r3, [r3, #0]
   19aca:	3301      	adds	r3, #1
   19acc:	b2da      	uxtb	r2, r3
   19ace:	4b19      	ldr	r3, [pc, #100]	; (19b34 <Water_Level_Task+0x254>)
   19ad0:	701a      	strb	r2, [r3, #0]
				if(tempWaterEventCount>9)
   19ad2:	4b18      	ldr	r3, [pc, #96]	; (19b34 <Water_Level_Task+0x254>)
   19ad4:	781b      	ldrb	r3, [r3, #0]
   19ad6:	2b09      	cmp	r3, #9
   19ad8:	d909      	bls.n	19aee <Water_Level_Task+0x20e>
				{
					operateOnWaterEvent();
   19ada:	4b1f      	ldr	r3, [pc, #124]	; (19b58 <Water_Level_Task+0x278>)
   19adc:	4798      	blx	r3
					result=true;
   19ade:	230c      	movs	r3, #12
   19ae0:	18fb      	adds	r3, r7, r3
   19ae2:	2201      	movs	r2, #1
   19ae4:	701a      	strb	r2, [r3, #0]
   19ae6:	e002      	b.n	19aee <Water_Level_Task+0x20e>
				}
			}
			else
			{
				tempWaterEventCount=0;
   19ae8:	4b12      	ldr	r3, [pc, #72]	; (19b34 <Water_Level_Task+0x254>)
   19aea:	2200      	movs	r2, #0
   19aec:	701a      	strb	r2, [r3, #0]
			}
			tempUndergroundLevel=uLevel;
   19aee:	4b0e      	ldr	r3, [pc, #56]	; (19b28 <Water_Level_Task+0x248>)
   19af0:	220b      	movs	r2, #11
   19af2:	18ba      	adds	r2, r7, r2
   19af4:	7812      	ldrb	r2, [r2, #0]
   19af6:	701a      	strb	r2, [r3, #0]
			if (factory_settings_parameter_struct.ENABLE_GP)
   19af8:	4b0f      	ldr	r3, [pc, #60]	; (19b38 <Water_Level_Task+0x258>)
   19afa:	791b      	ldrb	r3, [r3, #4]
   19afc:	2b00      	cmp	r3, #0
   19afe:	d009      	beq.n	19b14 <Water_Level_Task+0x234>
			{
				tempOverheadLevel=oLevel;
   19b00:	4b0b      	ldr	r3, [pc, #44]	; (19b30 <Water_Level_Task+0x250>)
   19b02:	220d      	movs	r2, #13
   19b04:	18ba      	adds	r2, r7, r2
   19b06:	7812      	ldrb	r2, [r2, #0]
   19b08:	701a      	strb	r2, [r3, #0]
   19b0a:	e003      	b.n	19b14 <Water_Level_Task+0x234>
			}
		}
		else
		{
			vTaskDelay(5000/portTICK_PERIOD_MS);
   19b0c:	4b13      	ldr	r3, [pc, #76]	; (19b5c <Water_Level_Task+0x27c>)
   19b0e:	0018      	movs	r0, r3
   19b10:	4b13      	ldr	r3, [pc, #76]	; (19b60 <Water_Level_Task+0x280>)
   19b12:	4798      	blx	r3
		}
		vTaskDelay(100/portTICK_PERIOD_MS);
   19b14:	2064      	movs	r0, #100	; 0x64
   19b16:	4b12      	ldr	r3, [pc, #72]	; (19b60 <Water_Level_Task+0x280>)
   19b18:	4798      	blx	r3
	{
   19b1a:	e779      	b.n	19a10 <Water_Level_Task+0x130>
   19b1c:	00019525 	.word	0x00019525
   19b20:	00022be1 	.word	0x00022be1
   19b24:	20000858 	.word	0x20000858
   19b28:	20000771 	.word	0x20000771
   19b2c:	20000790 	.word	0x20000790
   19b30:	20000762 	.word	0x20000762
   19b34:	2000078c 	.word	0x2000078c
   19b38:	2000062c 	.word	0x2000062c
   19b3c:	20000718 	.word	0x20000718
   19b40:	200007f8 	.word	0x200007f8
   19b44:	200007c0 	.word	0x200007c0
   19b48:	20000740 	.word	0x20000740
   19b4c:	20000654 	.word	0x20000654
   19b50:	000197ed 	.word	0x000197ed
   19b54:	000196bd 	.word	0x000196bd
   19b58:	00019b65 	.word	0x00019b65
   19b5c:	00001388 	.word	0x00001388
   19b60:	0001fd79 	.word	0x0001fd79

00019b64 <operateOnWaterEvent>:
	}
}

void operateOnWaterEvent(void)
{
   19b64:	b580      	push	{r7, lr}
   19b66:	b082      	sub	sp, #8
   19b68:	af00      	add	r7, sp, #0
	uint8_t uLevel = tempUndergroundLevel;
   19b6a:	1dfb      	adds	r3, r7, #7
   19b6c:	4abd      	ldr	r2, [pc, #756]	; (19e64 <operateOnWaterEvent+0x300>)
   19b6e:	7812      	ldrb	r2, [r2, #0]
   19b70:	701a      	strb	r2, [r3, #0]
	uint8_t oLevel = tempOverheadLevel;
   19b72:	1dbb      	adds	r3, r7, #6
   19b74:	4abc      	ldr	r2, [pc, #752]	; (19e68 <operateOnWaterEvent+0x304>)
   19b76:	7812      	ldrb	r2, [r2, #0]
   19b78:	701a      	strb	r2, [r3, #0]
	if(uLevel == undergroundLevel)
   19b7a:	4bbc      	ldr	r3, [pc, #752]	; (19e6c <operateOnWaterEvent+0x308>)
   19b7c:	781b      	ldrb	r3, [r3, #0]
   19b7e:	1dfa      	adds	r2, r7, #7
   19b80:	7812      	ldrb	r2, [r2, #0]
   19b82:	429a      	cmp	r2, r3
   19b84:	d10c      	bne.n	19ba0 <operateOnWaterEvent+0x3c>
	{
		if (factory_settings_parameter_struct.ENABLE_GP)
   19b86:	4bba      	ldr	r3, [pc, #744]	; (19e70 <operateOnWaterEvent+0x30c>)
   19b88:	791b      	ldrb	r3, [r3, #4]
   19b8a:	2b00      	cmp	r3, #0
   19b8c:	d000      	beq.n	19b90 <operateOnWaterEvent+0x2c>
   19b8e:	e162      	b.n	19e56 <operateOnWaterEvent+0x2f2>
		{
			return;
		}
		else
		{
			if(oLevel==overheadLevel)
   19b90:	4bb8      	ldr	r3, [pc, #736]	; (19e74 <operateOnWaterEvent+0x310>)
   19b92:	781b      	ldrb	r3, [r3, #0]
   19b94:	b2db      	uxtb	r3, r3
   19b96:	1dba      	adds	r2, r7, #6
   19b98:	7812      	ldrb	r2, [r2, #0]
   19b9a:	429a      	cmp	r2, r3
   19b9c:	d100      	bne.n	19ba0 <operateOnWaterEvent+0x3c>
   19b9e:	e15c      	b.n	19e5a <operateOnWaterEvent+0x2f6>
			{
				return;
			}
		}
	}
	if (getMotorState())
   19ba0:	4bb5      	ldr	r3, [pc, #724]	; (19e78 <operateOnWaterEvent+0x314>)
   19ba2:	4798      	blx	r3
   19ba4:	1e03      	subs	r3, r0, #0
   19ba6:	d100      	bne.n	19baa <operateOnWaterEvent+0x46>
   19ba8:	e0c4      	b.n	19d34 <operateOnWaterEvent+0x1d0>
	{
		if ((uLevel == CRITICALLEVEL) && (undergroundLevel>CRITICALLEVEL))	//no water in well
   19baa:	1dfb      	adds	r3, r7, #7
   19bac:	781b      	ldrb	r3, [r3, #0]
   19bae:	2b00      	cmp	r3, #0
   19bb0:	d122      	bne.n	19bf8 <operateOnWaterEvent+0x94>
   19bb2:	4bae      	ldr	r3, [pc, #696]	; (19e6c <operateOnWaterEvent+0x308>)
   19bb4:	781b      	ldrb	r3, [r3, #0]
   19bb6:	2b00      	cmp	r3, #0
   19bb8:	d01e      	beq.n	19bf8 <operateOnWaterEvent+0x94>
		{
			stopMotor(false,true,false);
   19bba:	2200      	movs	r2, #0
   19bbc:	2101      	movs	r1, #1
   19bbe:	2000      	movs	r0, #0
   19bc0:	4bae      	ldr	r3, [pc, #696]	; (19e7c <operateOnWaterEvent+0x318>)
   19bc2:	4798      	blx	r3
			simEventTemp[12] = registerEvent('I');	//report To SIM Motor Off due to insufficient water level
   19bc4:	2049      	movs	r0, #73	; 0x49
   19bc6:	4bae      	ldr	r3, [pc, #696]	; (19e80 <operateOnWaterEvent+0x31c>)
   19bc8:	4798      	blx	r3
   19bca:	0003      	movs	r3, r0
   19bcc:	001a      	movs	r2, r3
   19bce:	4bad      	ldr	r3, [pc, #692]	; (19e84 <operateOnWaterEvent+0x320>)
   19bd0:	731a      	strb	r2, [r3, #12]
			if (factory_settings_parameter_struct.ENABLE_M2M)
   19bd2:	4ba7      	ldr	r3, [pc, #668]	; (19e70 <operateOnWaterEvent+0x30c>)
   19bd4:	78db      	ldrb	r3, [r3, #3]
   19bd6:	2b00      	cmp	r3, #0
   19bd8:	d100      	bne.n	19bdc <operateOnWaterEvent+0x78>
   19bda:	e072      	b.n	19cc2 <operateOnWaterEvent+0x15e>
			{
				if ((m2m_Numbers_struct.m2mSetting) && (undergroundLevel>LOWLEVEL))
   19bdc:	4baa      	ldr	r3, [pc, #680]	; (19e88 <operateOnWaterEvent+0x324>)
   19bde:	795b      	ldrb	r3, [r3, #5]
   19be0:	2b00      	cmp	r3, #0
   19be2:	d100      	bne.n	19be6 <operateOnWaterEvent+0x82>
   19be4:	e06d      	b.n	19cc2 <operateOnWaterEvent+0x15e>
   19be6:	4ba1      	ldr	r3, [pc, #644]	; (19e6c <operateOnWaterEvent+0x308>)
   19be8:	781b      	ldrb	r3, [r3, #0]
   19bea:	2b01      	cmp	r3, #1
   19bec:	d800      	bhi.n	19bf0 <operateOnWaterEvent+0x8c>
   19bee:	e068      	b.n	19cc2 <operateOnWaterEvent+0x15e>
				{
					m2mEvent_arr[0] = ME_WAITREGISTER;
   19bf0:	4ba6      	ldr	r3, [pc, #664]	; (19e8c <operateOnWaterEvent+0x328>)
   19bf2:	2201      	movs	r2, #1
   19bf4:	701a      	strb	r2, [r3, #0]
			if (factory_settings_parameter_struct.ENABLE_M2M)
   19bf6:	e064      	b.n	19cc2 <operateOnWaterEvent+0x15e>
				}
			}
		}
		else if (uLevel==HIGHLEVEL && undergroundLevel<HIGHLEVEL)
   19bf8:	1dfb      	adds	r3, r7, #7
   19bfa:	781b      	ldrb	r3, [r3, #0]
   19bfc:	2b03      	cmp	r3, #3
   19bfe:	d130      	bne.n	19c62 <operateOnWaterEvent+0xfe>
   19c00:	4b9a      	ldr	r3, [pc, #616]	; (19e6c <operateOnWaterEvent+0x308>)
   19c02:	781b      	ldrb	r3, [r3, #0]
   19c04:	2b02      	cmp	r3, #2
   19c06:	d82c      	bhi.n	19c62 <operateOnWaterEvent+0xfe>
		{
			if (factory_settings_parameter_struct.ENABLE_M2M)
   19c08:	4b99      	ldr	r3, [pc, #612]	; (19e70 <operateOnWaterEvent+0x30c>)
   19c0a:	78db      	ldrb	r3, [r3, #3]
   19c0c:	2b00      	cmp	r3, #0
   19c0e:	d05b      	beq.n	19cc8 <operateOnWaterEvent+0x164>
			{
				if (m2m_Numbers_struct.m2mSetting)
   19c10:	4b9d      	ldr	r3, [pc, #628]	; (19e88 <operateOnWaterEvent+0x324>)
   19c12:	795b      	ldrb	r3, [r3, #5]
   19c14:	2b00      	cmp	r3, #0
   19c16:	d003      	beq.n	19c20 <operateOnWaterEvent+0xbc>
				{
					m2mEvent_arr[1] = ME_WAITREGISTER;
   19c18:	4b9c      	ldr	r3, [pc, #624]	; (19e8c <operateOnWaterEvent+0x328>)
   19c1a:	2201      	movs	r2, #1
   19c1c:	705a      	strb	r2, [r3, #1]
   19c1e:	e006      	b.n	19c2e <operateOnWaterEvent+0xca>
				}
				else
				{
					simEventTemp[15] = registerEvent('E');	//report To SIM well is full.
   19c20:	2045      	movs	r0, #69	; 0x45
   19c22:	4b97      	ldr	r3, [pc, #604]	; (19e80 <operateOnWaterEvent+0x31c>)
   19c24:	4798      	blx	r3
   19c26:	0003      	movs	r3, r0
   19c28:	001a      	movs	r2, r3
   19c2a:	4b96      	ldr	r3, [pc, #600]	; (19e84 <operateOnWaterEvent+0x320>)
   19c2c:	73da      	strb	r2, [r3, #15]
				}
				if (user_settings_parameter_struct.preventOverFlowAddress)
   19c2e:	4b98      	ldr	r3, [pc, #608]	; (19e90 <operateOnWaterEvent+0x32c>)
   19c30:	7f9b      	ldrb	r3, [r3, #30]
   19c32:	b2db      	uxtb	r3, r3
   19c34:	2b00      	cmp	r3, #0
   19c36:	d00c      	beq.n	19c52 <operateOnWaterEvent+0xee>
				{
					stopMotor(false,true,false);
   19c38:	2200      	movs	r2, #0
   19c3a:	2101      	movs	r1, #1
   19c3c:	2000      	movs	r0, #0
   19c3e:	4b8f      	ldr	r3, [pc, #572]	; (19e7c <operateOnWaterEvent+0x318>)
   19c40:	4798      	blx	r3
					simEventTemp[14] = registerEvent('H'); //report To SIM well is full, so stopped motor
   19c42:	2048      	movs	r0, #72	; 0x48
   19c44:	4b8e      	ldr	r3, [pc, #568]	; (19e80 <operateOnWaterEvent+0x31c>)
   19c46:	4798      	blx	r3
   19c48:	0003      	movs	r3, r0
   19c4a:	001a      	movs	r2, r3
   19c4c:	4b8d      	ldr	r3, [pc, #564]	; (19e84 <operateOnWaterEvent+0x320>)
   19c4e:	739a      	strb	r2, [r3, #14]
			if (factory_settings_parameter_struct.ENABLE_M2M)
   19c50:	e03a      	b.n	19cc8 <operateOnWaterEvent+0x164>
				}
				else
				{
					simEventTemp[15] = registerEvent('E'); //report To SIM well is full.
   19c52:	2045      	movs	r0, #69	; 0x45
   19c54:	4b8a      	ldr	r3, [pc, #552]	; (19e80 <operateOnWaterEvent+0x31c>)
   19c56:	4798      	blx	r3
   19c58:	0003      	movs	r3, r0
   19c5a:	001a      	movs	r2, r3
   19c5c:	4b89      	ldr	r3, [pc, #548]	; (19e84 <operateOnWaterEvent+0x320>)
   19c5e:	73da      	strb	r2, [r3, #15]
			if (factory_settings_parameter_struct.ENABLE_M2M)
   19c60:	e032      	b.n	19cc8 <operateOnWaterEvent+0x164>
				}
			}
		}
		else if ((uLevel==LOWLEVEL) && (undergroundLevel>LOWLEVEL))		// decrease in water level
   19c62:	1dfb      	adds	r3, r7, #7
   19c64:	781b      	ldrb	r3, [r3, #0]
   19c66:	2b01      	cmp	r3, #1
   19c68:	d11b      	bne.n	19ca2 <operateOnWaterEvent+0x13e>
   19c6a:	4b80      	ldr	r3, [pc, #512]	; (19e6c <operateOnWaterEvent+0x308>)
   19c6c:	781b      	ldrb	r3, [r3, #0]
   19c6e:	2b01      	cmp	r3, #1
   19c70:	d917      	bls.n	19ca2 <operateOnWaterEvent+0x13e>
		{
			if (factory_settings_parameter_struct.ENABLE_M2M)
   19c72:	4b7f      	ldr	r3, [pc, #508]	; (19e70 <operateOnWaterEvent+0x30c>)
   19c74:	78db      	ldrb	r3, [r3, #3]
   19c76:	2b00      	cmp	r3, #0
   19c78:	d007      	beq.n	19c8a <operateOnWaterEvent+0x126>
			{
				if (m2m_Numbers_struct.m2mSetting)
   19c7a:	4b83      	ldr	r3, [pc, #524]	; (19e88 <operateOnWaterEvent+0x324>)
   19c7c:	795b      	ldrb	r3, [r3, #5]
   19c7e:	2b00      	cmp	r3, #0
   19c80:	d021      	beq.n	19cc6 <operateOnWaterEvent+0x162>
				{
					m2mEvent_arr[0] = ME_WAITREGISTER;
   19c82:	4b82      	ldr	r3, [pc, #520]	; (19e8c <operateOnWaterEvent+0x328>)
   19c84:	2201      	movs	r2, #1
   19c86:	701a      	strb	r2, [r3, #0]
			if (factory_settings_parameter_struct.ENABLE_M2M)
   19c88:	e01d      	b.n	19cc6 <operateOnWaterEvent+0x162>
				}
			}
			else
			{
				if (factory_settings_parameter_struct.NOLEVELCHANGECALL)
   19c8a:	4b79      	ldr	r3, [pc, #484]	; (19e70 <operateOnWaterEvent+0x30c>)
   19c8c:	79db      	ldrb	r3, [r3, #7]
   19c8e:	2b00      	cmp	r3, #0
   19c90:	d019      	beq.n	19cc6 <operateOnWaterEvent+0x162>
				{
					simEventTemp[13] = registerEvent('D'); //report To SIM water level is decrease..
   19c92:	2044      	movs	r0, #68	; 0x44
   19c94:	4b7a      	ldr	r3, [pc, #488]	; (19e80 <operateOnWaterEvent+0x31c>)
   19c96:	4798      	blx	r3
   19c98:	0003      	movs	r3, r0
   19c9a:	001a      	movs	r2, r3
   19c9c:	4b79      	ldr	r3, [pc, #484]	; (19e84 <operateOnWaterEvent+0x320>)
   19c9e:	735a      	strb	r2, [r3, #13]
			if (factory_settings_parameter_struct.ENABLE_M2M)
   19ca0:	e011      	b.n	19cc6 <operateOnWaterEvent+0x162>
				}
			}
		}
		else if (uLevel==MIDLEVEL && undergroundLevel<MIDLEVEL)		// increase in water level
   19ca2:	1dfb      	adds	r3, r7, #7
   19ca4:	781b      	ldrb	r3, [r3, #0]
   19ca6:	2b02      	cmp	r3, #2
   19ca8:	d10e      	bne.n	19cc8 <operateOnWaterEvent+0x164>
   19caa:	4b70      	ldr	r3, [pc, #448]	; (19e6c <operateOnWaterEvent+0x308>)
   19cac:	781b      	ldrb	r3, [r3, #0]
   19cae:	2b01      	cmp	r3, #1
   19cb0:	d80a      	bhi.n	19cc8 <operateOnWaterEvent+0x164>
		{
			simEventTemp[16] = registerEvent('Z'); //report To SIM water level is increasing..
   19cb2:	205a      	movs	r0, #90	; 0x5a
   19cb4:	4b72      	ldr	r3, [pc, #456]	; (19e80 <operateOnWaterEvent+0x31c>)
   19cb6:	4798      	blx	r3
   19cb8:	0003      	movs	r3, r0
   19cba:	001a      	movs	r2, r3
   19cbc:	4b71      	ldr	r3, [pc, #452]	; (19e84 <operateOnWaterEvent+0x320>)
   19cbe:	741a      	strb	r2, [r3, #16]
   19cc0:	e002      	b.n	19cc8 <operateOnWaterEvent+0x164>
			if (factory_settings_parameter_struct.ENABLE_M2M)
   19cc2:	46c0      	nop			; (mov r8, r8)
   19cc4:	e000      	b.n	19cc8 <operateOnWaterEvent+0x164>
			if (factory_settings_parameter_struct.ENABLE_M2M)
   19cc6:	46c0      	nop			; (mov r8, r8)
		}
		if (factory_settings_parameter_struct.ENABLE_GP)
   19cc8:	4b69      	ldr	r3, [pc, #420]	; (19e70 <operateOnWaterEvent+0x30c>)
   19cca:	791b      	ldrb	r3, [r3, #4]
   19ccc:	2b00      	cmp	r3, #0
   19cce:	d100      	bne.n	19cd2 <operateOnWaterEvent+0x16e>
   19cd0:	e0b2      	b.n	19e38 <operateOnWaterEvent+0x2d4>
		{
			if(oLevel!=overheadLevel)
   19cd2:	4b68      	ldr	r3, [pc, #416]	; (19e74 <operateOnWaterEvent+0x310>)
   19cd4:	781b      	ldrb	r3, [r3, #0]
   19cd6:	b2db      	uxtb	r3, r3
   19cd8:	1dba      	adds	r2, r7, #6
   19cda:	7812      	ldrb	r2, [r2, #0]
   19cdc:	429a      	cmp	r2, r3
   19cde:	d100      	bne.n	19ce2 <operateOnWaterEvent+0x17e>
   19ce0:	e0aa      	b.n	19e38 <operateOnWaterEvent+0x2d4>
			{
				if(oLevel==OVERHEADHIGHLEVEL && overheadLevel<OVERHEADHIGHLEVEL)		////overhead tank is full
   19ce2:	1dbb      	adds	r3, r7, #6
   19ce4:	781b      	ldrb	r3, [r3, #0]
   19ce6:	2b02      	cmp	r3, #2
   19ce8:	d111      	bne.n	19d0e <operateOnWaterEvent+0x1aa>
   19cea:	4b62      	ldr	r3, [pc, #392]	; (19e74 <operateOnWaterEvent+0x310>)
   19cec:	781b      	ldrb	r3, [r3, #0]
   19cee:	b2db      	uxtb	r3, r3
   19cf0:	2b01      	cmp	r3, #1
   19cf2:	d80c      	bhi.n	19d0e <operateOnWaterEvent+0x1aa>
				{
					stopMotor(false,true,false);
   19cf4:	2200      	movs	r2, #0
   19cf6:	2101      	movs	r1, #1
   19cf8:	2000      	movs	r0, #0
   19cfa:	4b60      	ldr	r3, [pc, #384]	; (19e7c <operateOnWaterEvent+0x318>)
   19cfc:	4798      	blx	r3
					simEventTemp[17] = registerEvent('V'); //report To SIM Motor Off due to overhead tank full
   19cfe:	2056      	movs	r0, #86	; 0x56
   19d00:	4b5f      	ldr	r3, [pc, #380]	; (19e80 <operateOnWaterEvent+0x31c>)
   19d02:	4798      	blx	r3
   19d04:	0003      	movs	r3, r0
   19d06:	001a      	movs	r2, r3
   19d08:	4b5e      	ldr	r3, [pc, #376]	; (19e84 <operateOnWaterEvent+0x320>)
   19d0a:	745a      	strb	r2, [r3, #17]
   19d0c:	e094      	b.n	19e38 <operateOnWaterEvent+0x2d4>
				}
				else if (oLevel==OVERHEADCRITICALLEVEL && overheadLevel>OVERHEADCRITICALLEVEL)	// overhead tank empty.
   19d0e:	1dbb      	adds	r3, r7, #6
   19d10:	781b      	ldrb	r3, [r3, #0]
   19d12:	2b00      	cmp	r3, #0
   19d14:	d000      	beq.n	19d18 <operateOnWaterEvent+0x1b4>
   19d16:	e08f      	b.n	19e38 <operateOnWaterEvent+0x2d4>
   19d18:	4b56      	ldr	r3, [pc, #344]	; (19e74 <operateOnWaterEvent+0x310>)
   19d1a:	781b      	ldrb	r3, [r3, #0]
   19d1c:	b2db      	uxtb	r3, r3
   19d1e:	2b00      	cmp	r3, #0
   19d20:	d100      	bne.n	19d24 <operateOnWaterEvent+0x1c0>
   19d22:	e089      	b.n	19e38 <operateOnWaterEvent+0x2d4>
				{
					simEventTemp[18] = registerEvent('W'); //report To SIM , overhead tank empty.
   19d24:	2057      	movs	r0, #87	; 0x57
   19d26:	4b56      	ldr	r3, [pc, #344]	; (19e80 <operateOnWaterEvent+0x31c>)
   19d28:	4798      	blx	r3
   19d2a:	0003      	movs	r3, r0
   19d2c:	001a      	movs	r2, r3
   19d2e:	4b55      	ldr	r3, [pc, #340]	; (19e84 <operateOnWaterEvent+0x320>)
   19d30:	749a      	strb	r2, [r3, #18]
   19d32:	e081      	b.n	19e38 <operateOnWaterEvent+0x2d4>
			}
		}
	}
	else
	{
		if (factory_settings_parameter_struct.ENABLE_M2M)
   19d34:	4b4e      	ldr	r3, [pc, #312]	; (19e70 <operateOnWaterEvent+0x30c>)
   19d36:	78db      	ldrb	r3, [r3, #3]
   19d38:	2b00      	cmp	r3, #0
   19d3a:	d027      	beq.n	19d8c <operateOnWaterEvent+0x228>
		{
			if(m2m_Numbers_struct.m2mSetting && uLevel<MIDLEVEL && undergroundLevel>=MIDLEVEL)	//level is decreased
   19d3c:	4b52      	ldr	r3, [pc, #328]	; (19e88 <operateOnWaterEvent+0x324>)
   19d3e:	795b      	ldrb	r3, [r3, #5]
   19d40:	2b00      	cmp	r3, #0
   19d42:	d00b      	beq.n	19d5c <operateOnWaterEvent+0x1f8>
   19d44:	1dfb      	adds	r3, r7, #7
   19d46:	781b      	ldrb	r3, [r3, #0]
   19d48:	2b01      	cmp	r3, #1
   19d4a:	d807      	bhi.n	19d5c <operateOnWaterEvent+0x1f8>
   19d4c:	4b47      	ldr	r3, [pc, #284]	; (19e6c <operateOnWaterEvent+0x308>)
   19d4e:	781b      	ldrb	r3, [r3, #0]
   19d50:	2b01      	cmp	r3, #1
   19d52:	d903      	bls.n	19d5c <operateOnWaterEvent+0x1f8>
			{
				m2mEvent_arr[0] = ME_WAITREGISTER;
   19d54:	4b4d      	ldr	r3, [pc, #308]	; (19e8c <operateOnWaterEvent+0x328>)
   19d56:	2201      	movs	r2, #1
   19d58:	701a      	strb	r2, [r3, #0]
   19d5a:	e04d      	b.n	19df8 <operateOnWaterEvent+0x294>
			}
			else if (uLevel==HIGHLEVEL && undergroundLevel<HIGHLEVEL)			//well is full
   19d5c:	1dfb      	adds	r3, r7, #7
   19d5e:	781b      	ldrb	r3, [r3, #0]
   19d60:	2b03      	cmp	r3, #3
   19d62:	d149      	bne.n	19df8 <operateOnWaterEvent+0x294>
   19d64:	4b41      	ldr	r3, [pc, #260]	; (19e6c <operateOnWaterEvent+0x308>)
   19d66:	781b      	ldrb	r3, [r3, #0]
   19d68:	2b02      	cmp	r3, #2
   19d6a:	d845      	bhi.n	19df8 <operateOnWaterEvent+0x294>
			{
				if(m2m_Numbers_struct.m2mSetting)
   19d6c:	4b46      	ldr	r3, [pc, #280]	; (19e88 <operateOnWaterEvent+0x324>)
   19d6e:	795b      	ldrb	r3, [r3, #5]
   19d70:	2b00      	cmp	r3, #0
   19d72:	d003      	beq.n	19d7c <operateOnWaterEvent+0x218>
				{
					m2mEvent_arr[1] = ME_WAITREGISTER;
   19d74:	4b45      	ldr	r3, [pc, #276]	; (19e8c <operateOnWaterEvent+0x328>)
   19d76:	2201      	movs	r2, #1
   19d78:	705a      	strb	r2, [r3, #1]
   19d7a:	e03d      	b.n	19df8 <operateOnWaterEvent+0x294>
				}
				else
				{
					simEventTemp[15] = registerEvent('E'); //report To SIM well is full.
   19d7c:	2045      	movs	r0, #69	; 0x45
   19d7e:	4b40      	ldr	r3, [pc, #256]	; (19e80 <operateOnWaterEvent+0x31c>)
   19d80:	4798      	blx	r3
   19d82:	0003      	movs	r3, r0
   19d84:	001a      	movs	r2, r3
   19d86:	4b3f      	ldr	r3, [pc, #252]	; (19e84 <operateOnWaterEvent+0x320>)
   19d88:	73da      	strb	r2, [r3, #15]
   19d8a:	e035      	b.n	19df8 <operateOnWaterEvent+0x294>
				}
			}
		}
		else if(uLevel==HIGHLEVEL && undergroundLevel<HIGHLEVEL)		//well is full
   19d8c:	1dfb      	adds	r3, r7, #7
   19d8e:	781b      	ldrb	r3, [r3, #0]
   19d90:	2b03      	cmp	r3, #3
   19d92:	d10b      	bne.n	19dac <operateOnWaterEvent+0x248>
   19d94:	4b35      	ldr	r3, [pc, #212]	; (19e6c <operateOnWaterEvent+0x308>)
   19d96:	781b      	ldrb	r3, [r3, #0]
   19d98:	2b02      	cmp	r3, #2
   19d9a:	d807      	bhi.n	19dac <operateOnWaterEvent+0x248>
		{
			simEventTemp[15] = registerEvent('E'); //report To SIM well is full.
   19d9c:	2045      	movs	r0, #69	; 0x45
   19d9e:	4b38      	ldr	r3, [pc, #224]	; (19e80 <operateOnWaterEvent+0x31c>)
   19da0:	4798      	blx	r3
   19da2:	0003      	movs	r3, r0
   19da4:	001a      	movs	r2, r3
   19da6:	4b37      	ldr	r3, [pc, #220]	; (19e84 <operateOnWaterEvent+0x320>)
   19da8:	73da      	strb	r2, [r3, #15]
   19daa:	e025      	b.n	19df8 <operateOnWaterEvent+0x294>
		}
		else if (uLevel==MIDLEVEL && undergroundLevel<MIDLEVEL)		// underground level is increasing
   19dac:	1dfb      	adds	r3, r7, #7
   19dae:	781b      	ldrb	r3, [r3, #0]
   19db0:	2b02      	cmp	r3, #2
   19db2:	d121      	bne.n	19df8 <operateOnWaterEvent+0x294>
   19db4:	4b2d      	ldr	r3, [pc, #180]	; (19e6c <operateOnWaterEvent+0x308>)
   19db6:	781b      	ldrb	r3, [r3, #0]
   19db8:	2b01      	cmp	r3, #1
   19dba:	d81d      	bhi.n	19df8 <operateOnWaterEvent+0x294>
		{
			if (factory_settings_parameter_struct.ENABLE_GP)
   19dbc:	4b2c      	ldr	r3, [pc, #176]	; (19e70 <operateOnWaterEvent+0x30c>)
   19dbe:	791b      	ldrb	r3, [r3, #4]
   19dc0:	2b00      	cmp	r3, #0
   19dc2:	d00e      	beq.n	19de2 <operateOnWaterEvent+0x27e>
			{
				if (factory_settings_parameter_struct.DUAL_LEVEL)
   19dc4:	4b2a      	ldr	r3, [pc, #168]	; (19e70 <operateOnWaterEvent+0x30c>)
   19dc6:	799b      	ldrb	r3, [r3, #6]
   19dc8:	2b00      	cmp	r3, #0
   19dca:	d00a      	beq.n	19de2 <operateOnWaterEvent+0x27e>
				{
					if(oLevel<OVERHEADHIGHLEVEL)
   19dcc:	1dbb      	adds	r3, r7, #6
   19dce:	781b      	ldrb	r3, [r3, #0]
   19dd0:	2b01      	cmp	r3, #1
   19dd2:	d806      	bhi.n	19de2 <operateOnWaterEvent+0x27e>
					{
						if(user_settings_parameter_struct.autoStartAddress)			//autoStart is ON
   19dd4:	4b2e      	ldr	r3, [pc, #184]	; (19e90 <operateOnWaterEvent+0x32c>)
   19dd6:	785b      	ldrb	r3, [r3, #1]
   19dd8:	b2db      	uxtb	r3, r3
   19dda:	2b00      	cmp	r3, #0
   19ddc:	d001      	beq.n	19de2 <operateOnWaterEvent+0x27e>
						{
							triggerAutoStart();
   19dde:	4b2d      	ldr	r3, [pc, #180]	; (19e94 <operateOnWaterEvent+0x330>)
   19de0:	4798      	blx	r3
						}
					}
				}
			}
			if (factory_settings_parameter_struct.DUAL_LEVEL)
   19de2:	4b23      	ldr	r3, [pc, #140]	; (19e70 <operateOnWaterEvent+0x30c>)
   19de4:	799b      	ldrb	r3, [r3, #6]
   19de6:	2b00      	cmp	r3, #0
   19de8:	d006      	beq.n	19df8 <operateOnWaterEvent+0x294>
			{
				if(user_settings_parameter_struct.autoStartAddress)			//autoStart is ON
   19dea:	4b29      	ldr	r3, [pc, #164]	; (19e90 <operateOnWaterEvent+0x32c>)
   19dec:	785b      	ldrb	r3, [r3, #1]
   19dee:	b2db      	uxtb	r3, r3
   19df0:	2b00      	cmp	r3, #0
   19df2:	d001      	beq.n	19df8 <operateOnWaterEvent+0x294>
				{
					triggerAutoStart();
   19df4:	4b27      	ldr	r3, [pc, #156]	; (19e94 <operateOnWaterEvent+0x330>)
   19df6:	4798      	blx	r3
				}
			}
		}
		if (factory_settings_parameter_struct.ENABLE_GP)
   19df8:	4b1d      	ldr	r3, [pc, #116]	; (19e70 <operateOnWaterEvent+0x30c>)
   19dfa:	791b      	ldrb	r3, [r3, #4]
   19dfc:	2b00      	cmp	r3, #0
   19dfe:	d01b      	beq.n	19e38 <operateOnWaterEvent+0x2d4>
		{
			if (oLevel==OVERHEADCRITICALLEVEL && overheadLevel>OVERHEADCRITICALLEVEL && uLevel>CRITICALLEVEL) // overhead tank is empty, and underground not low
   19e00:	1dbb      	adds	r3, r7, #6
   19e02:	781b      	ldrb	r3, [r3, #0]
   19e04:	2b00      	cmp	r3, #0
   19e06:	d117      	bne.n	19e38 <operateOnWaterEvent+0x2d4>
   19e08:	4b1a      	ldr	r3, [pc, #104]	; (19e74 <operateOnWaterEvent+0x310>)
   19e0a:	781b      	ldrb	r3, [r3, #0]
   19e0c:	b2db      	uxtb	r3, r3
   19e0e:	2b00      	cmp	r3, #0
   19e10:	d012      	beq.n	19e38 <operateOnWaterEvent+0x2d4>
   19e12:	1dfb      	adds	r3, r7, #7
   19e14:	781b      	ldrb	r3, [r3, #0]
   19e16:	2b00      	cmp	r3, #0
   19e18:	d00e      	beq.n	19e38 <operateOnWaterEvent+0x2d4>
			{
				if(user_settings_parameter_struct.autoStartAddress)		//autoStart is ON
   19e1a:	4b1d      	ldr	r3, [pc, #116]	; (19e90 <operateOnWaterEvent+0x32c>)
   19e1c:	785b      	ldrb	r3, [r3, #1]
   19e1e:	b2db      	uxtb	r3, r3
   19e20:	2b00      	cmp	r3, #0
   19e22:	d002      	beq.n	19e2a <operateOnWaterEvent+0x2c6>
				{
					triggerAutoStart();
   19e24:	4b1b      	ldr	r3, [pc, #108]	; (19e94 <operateOnWaterEvent+0x330>)
   19e26:	4798      	blx	r3
   19e28:	e006      	b.n	19e38 <operateOnWaterEvent+0x2d4>
				}
				else
				{
					simEventTemp[18] = registerEvent('W'); //report To SIM overhead tank is empty.
   19e2a:	2057      	movs	r0, #87	; 0x57
   19e2c:	4b14      	ldr	r3, [pc, #80]	; (19e80 <operateOnWaterEvent+0x31c>)
   19e2e:	4798      	blx	r3
   19e30:	0003      	movs	r3, r0
   19e32:	001a      	movs	r2, r3
   19e34:	4b13      	ldr	r3, [pc, #76]	; (19e84 <operateOnWaterEvent+0x320>)
   19e36:	749a      	strb	r2, [r3, #18]
				}
			}
		}
	}
	if (factory_settings_parameter_struct.ENABLE_GP)
   19e38:	4b0d      	ldr	r3, [pc, #52]	; (19e70 <operateOnWaterEvent+0x30c>)
   19e3a:	791b      	ldrb	r3, [r3, #4]
   19e3c:	2b00      	cmp	r3, #0
   19e3e:	d004      	beq.n	19e4a <operateOnWaterEvent+0x2e6>
	{
		updateOverheadLevel(oLevel);
   19e40:	1dbb      	adds	r3, r7, #6
   19e42:	781b      	ldrb	r3, [r3, #0]
   19e44:	0018      	movs	r0, r3
   19e46:	4b14      	ldr	r3, [pc, #80]	; (19e98 <operateOnWaterEvent+0x334>)
   19e48:	4798      	blx	r3
	}
	updateUndergroundLevel(uLevel);
   19e4a:	1dfb      	adds	r3, r7, #7
   19e4c:	781b      	ldrb	r3, [r3, #0]
   19e4e:	0018      	movs	r0, r3
   19e50:	4b12      	ldr	r3, [pc, #72]	; (19e9c <operateOnWaterEvent+0x338>)
   19e52:	4798      	blx	r3
   19e54:	e002      	b.n	19e5c <operateOnWaterEvent+0x2f8>
			return;
   19e56:	46c0      	nop			; (mov r8, r8)
   19e58:	e000      	b.n	19e5c <operateOnWaterEvent+0x2f8>
				return;
   19e5a:	46c0      	nop			; (mov r8, r8)
}
   19e5c:	46bd      	mov	sp, r7
   19e5e:	b002      	add	sp, #8
   19e60:	bd80      	pop	{r7, pc}
   19e62:	46c0      	nop			; (mov r8, r8)
   19e64:	20000771 	.word	0x20000771
   19e68:	20000762 	.word	0x20000762
   19e6c:	20000858 	.word	0x20000858
   19e70:	2000062c 	.word	0x2000062c
   19e74:	20000790 	.word	0x20000790
   19e78:	0001af25 	.word	0x0001af25
   19e7c:	0001b829 	.word	0x0001b829
   19e80:	00014b6d 	.word	0x00014b6d
   19e84:	20000718 	.word	0x20000718
   19e88:	20000554 	.word	0x20000554
   19e8c:	200007c0 	.word	0x200007c0
   19e90:	20000654 	.word	0x20000654
   19e94:	0001b289 	.word	0x0001b289
   19e98:	0001969d 	.word	0x0001969d
   19e9c:	000197cd 	.word	0x000197cd

00019ea0 <Configure_ADC0>:

void Configure_ADC0(void)
{
   19ea0:	b580      	push	{r7, lr}
   19ea2:	b08c      	sub	sp, #48	; 0x30
   19ea4:	af00      	add	r7, sp, #0
	struct adc_config config;
	adc_get_config_defaults(&config);
   19ea6:	003b      	movs	r3, r7
   19ea8:	0018      	movs	r0, r3
   19eaa:	4b1a      	ldr	r3, [pc, #104]	; (19f14 <Configure_ADC0+0x74>)
   19eac:	4798      	blx	r3
	config.positive_input = ADC_POSITIVE_INPUT_PIN19;
   19eae:	003b      	movs	r3, r7
   19eb0:	2213      	movs	r2, #19
   19eb2:	731a      	strb	r2, [r3, #12]
	config.negative_input = ADC_NEGATIVE_INPUT_GND;
   19eb4:	003b      	movs	r3, r7
   19eb6:	22c0      	movs	r2, #192	; 0xc0
   19eb8:	0152      	lsls	r2, r2, #5
   19eba:	81da      	strh	r2, [r3, #14]
	config.reference      = ADC_REFERENCE_AREFA;//ADC_REFERENCE_INT1V;
   19ebc:	003b      	movs	r3, r7
   19ebe:	2203      	movs	r2, #3
   19ec0:	705a      	strb	r2, [r3, #1]
	config.clock_source   = GCLK_GENERATOR_3;
   19ec2:	003b      	movs	r3, r7
   19ec4:	2203      	movs	r2, #3
   19ec6:	701a      	strb	r2, [r3, #0]
	config.gain_factor    = ADC_GAIN_FACTOR_1X;
   19ec8:	003b      	movs	r3, r7
   19eca:	2200      	movs	r2, #0
   19ecc:	609a      	str	r2, [r3, #8]
	config.resolution	= ADC_RESOLUTION_12BIT;
   19ece:	003b      	movs	r3, r7
   19ed0:	2200      	movs	r2, #0
   19ed2:	711a      	strb	r2, [r3, #4]
	
	config.clock_prescaler = ADC_CLOCK_PRESCALER_DIV64; //125kHz adc clock (8MHz/64)
   19ed4:	003b      	movs	r3, r7
   19ed6:	2280      	movs	r2, #128	; 0x80
   19ed8:	00d2      	lsls	r2, r2, #3
   19eda:	805a      	strh	r2, [r3, #2]
	
	config.run_in_standby = true;
   19edc:	003b      	movs	r3, r7
   19ede:	2201      	movs	r2, #1
   19ee0:	755a      	strb	r2, [r3, #21]
	
	adc_init(&adc_inst, ADC, &config);// Initialize the ADC
   19ee2:	003a      	movs	r2, r7
   19ee4:	490c      	ldr	r1, [pc, #48]	; (19f18 <Configure_ADC0+0x78>)
   19ee6:	4b0d      	ldr	r3, [pc, #52]	; (19f1c <Configure_ADC0+0x7c>)
   19ee8:	0018      	movs	r0, r3
   19eea:	4b0d      	ldr	r3, [pc, #52]	; (19f20 <Configure_ADC0+0x80>)
   19eec:	4798      	blx	r3
	
	/************************************************************************/
	/*ADC Callback Setup                                                    */
	adc_register_callback(&adc_inst, adc_buffer_complete_callback, ADC_CALLBACK_READ_BUFFER);
   19eee:	490d      	ldr	r1, [pc, #52]	; (19f24 <Configure_ADC0+0x84>)
   19ef0:	4b0a      	ldr	r3, [pc, #40]	; (19f1c <Configure_ADC0+0x7c>)
   19ef2:	2200      	movs	r2, #0
   19ef4:	0018      	movs	r0, r3
   19ef6:	4b0c      	ldr	r3, [pc, #48]	; (19f28 <Configure_ADC0+0x88>)
   19ef8:	4798      	blx	r3
	adc_enable_callback(&adc_inst, ADC_CALLBACK_READ_BUFFER);
   19efa:	4b08      	ldr	r3, [pc, #32]	; (19f1c <Configure_ADC0+0x7c>)
   19efc:	2100      	movs	r1, #0
   19efe:	0018      	movs	r0, r3
   19f00:	4b0a      	ldr	r3, [pc, #40]	; (19f2c <Configure_ADC0+0x8c>)
   19f02:	4798      	blx	r3
	/************************************************************************/
	
	adc_enable(&adc_inst);
   19f04:	4b05      	ldr	r3, [pc, #20]	; (19f1c <Configure_ADC0+0x7c>)
   19f06:	0018      	movs	r0, r3
   19f08:	4b09      	ldr	r3, [pc, #36]	; (19f30 <Configure_ADC0+0x90>)
   19f0a:	4798      	blx	r3
}
   19f0c:	46c0      	nop			; (mov r8, r8)
   19f0e:	46bd      	mov	sp, r7
   19f10:	b00c      	add	sp, #48	; 0x30
   19f12:	bd80      	pop	{r7, pc}
   19f14:	0001d2d5 	.word	0x0001d2d5
   19f18:	42004000 	.word	0x42004000
   19f1c:	2000081c 	.word	0x2000081c
   19f20:	0001d925 	.word	0x0001d925
   19f24:	00019f35 	.word	0x00019f35
   19f28:	0001dc25 	.word	0x0001dc25
   19f2c:	000194a5 	.word	0x000194a5
   19f30:	0001930d 	.word	0x0001930d

00019f34 <adc_buffer_complete_callback>:

void adc_buffer_complete_callback(const struct adc_module *const module)
{
   19f34:	b580      	push	{r7, lr}
   19f36:	b082      	sub	sp, #8
   19f38:	af00      	add	r7, sp, #0
   19f3a:	6078      	str	r0, [r7, #4]
	adc_read_buffer_done = true;
   19f3c:	4b06      	ldr	r3, [pc, #24]	; (19f58 <adc_buffer_complete_callback+0x24>)
   19f3e:	2201      	movs	r2, #1
   19f40:	701a      	strb	r2, [r3, #0]
	vTaskNotifyGiveFromISR(motorTask,NULL);
   19f42:	4b06      	ldr	r3, [pc, #24]	; (19f5c <adc_buffer_complete_callback+0x28>)
   19f44:	681b      	ldr	r3, [r3, #0]
   19f46:	2100      	movs	r1, #0
   19f48:	0018      	movs	r0, r3
   19f4a:	4b05      	ldr	r3, [pc, #20]	; (19f60 <adc_buffer_complete_callback+0x2c>)
   19f4c:	4798      	blx	r3
}
   19f4e:	46c0      	nop			; (mov r8, r8)
   19f50:	46bd      	mov	sp, r7
   19f52:	b002      	add	sp, #8
   19f54:	bd80      	pop	{r7, pc}
   19f56:	46c0      	nop			; (mov r8, r8)
   19f58:	20000745 	.word	0x20000745
   19f5c:	20000238 	.word	0x20000238
   19f60:	00020a85 	.word	0x00020a85

00019f64 <Read_ADC0>:

uint32_t Read_ADC0(uint32_t adc_pin,uint16_t samples)
{
   19f64:	b580      	push	{r7, lr}
   19f66:	b084      	sub	sp, #16
   19f68:	af00      	add	r7, sp, #0
   19f6a:	6078      	str	r0, [r7, #4]
   19f6c:	000a      	movs	r2, r1
   19f6e:	1cbb      	adds	r3, r7, #2
   19f70:	801a      	strh	r2, [r3, #0]
	adc_set_positive_input(&adc_inst, adc_pin);
   19f72:	687b      	ldr	r3, [r7, #4]
   19f74:	b2da      	uxtb	r2, r3
   19f76:	4b24      	ldr	r3, [pc, #144]	; (1a008 <Read_ADC0+0xa4>)
   19f78:	0011      	movs	r1, r2
   19f7a:	0018      	movs	r0, r3
   19f7c:	4b23      	ldr	r3, [pc, #140]	; (1a00c <Read_ADC0+0xa8>)
   19f7e:	4798      	blx	r3
	uint16_t current_value = 0;
   19f80:	2308      	movs	r3, #8
   19f82:	18fb      	adds	r3, r7, r3
   19f84:	2200      	movs	r2, #0
   19f86:	801a      	strh	r2, [r3, #0]
	uint32_t total_value = 0;
   19f88:	2300      	movs	r3, #0
   19f8a:	60fb      	str	r3, [r7, #12]
	for (uint16_t uintLoop=0;uintLoop<samples;uintLoop++)
   19f8c:	230a      	movs	r3, #10
   19f8e:	18fb      	adds	r3, r7, r3
   19f90:	2200      	movs	r2, #0
   19f92:	801a      	strh	r2, [r3, #0]
   19f94:	e026      	b.n	19fe4 <Read_ADC0+0x80>
	{
		current_value = 0;
   19f96:	2308      	movs	r3, #8
   19f98:	18fb      	adds	r3, r7, r3
   19f9a:	2200      	movs	r2, #0
   19f9c:	801a      	strh	r2, [r3, #0]
		adc_start_conversion(&adc_inst);
   19f9e:	4b1a      	ldr	r3, [pc, #104]	; (1a008 <Read_ADC0+0xa4>)
   19fa0:	0018      	movs	r0, r3
   19fa2:	4b1b      	ldr	r3, [pc, #108]	; (1a010 <Read_ADC0+0xac>)
   19fa4:	4798      	blx	r3
		while((adc_get_status(&adc_inst) & ADC_STATUS_RESULT_READY) != 1);
   19fa6:	46c0      	nop			; (mov r8, r8)
   19fa8:	4b17      	ldr	r3, [pc, #92]	; (1a008 <Read_ADC0+0xa4>)
   19faa:	0018      	movs	r0, r3
   19fac:	4b19      	ldr	r3, [pc, #100]	; (1a014 <Read_ADC0+0xb0>)
   19fae:	4798      	blx	r3
   19fb0:	0002      	movs	r2, r0
   19fb2:	2301      	movs	r3, #1
   19fb4:	4013      	ands	r3, r2
   19fb6:	2b01      	cmp	r3, #1
   19fb8:	d1f6      	bne.n	19fa8 <Read_ADC0+0x44>
		adc_read(&adc_inst, &current_value);
   19fba:	2308      	movs	r3, #8
   19fbc:	18fa      	adds	r2, r7, r3
   19fbe:	4b12      	ldr	r3, [pc, #72]	; (1a008 <Read_ADC0+0xa4>)
   19fc0:	0011      	movs	r1, r2
   19fc2:	0018      	movs	r0, r3
   19fc4:	4b14      	ldr	r3, [pc, #80]	; (1a018 <Read_ADC0+0xb4>)
   19fc6:	4798      	blx	r3
		total_value+=current_value;
   19fc8:	2308      	movs	r3, #8
   19fca:	18fb      	adds	r3, r7, r3
   19fcc:	881b      	ldrh	r3, [r3, #0]
   19fce:	001a      	movs	r2, r3
   19fd0:	68fb      	ldr	r3, [r7, #12]
   19fd2:	189b      	adds	r3, r3, r2
   19fd4:	60fb      	str	r3, [r7, #12]
	for (uint16_t uintLoop=0;uintLoop<samples;uintLoop++)
   19fd6:	230a      	movs	r3, #10
   19fd8:	18fb      	adds	r3, r7, r3
   19fda:	881a      	ldrh	r2, [r3, #0]
   19fdc:	230a      	movs	r3, #10
   19fde:	18fb      	adds	r3, r7, r3
   19fe0:	3201      	adds	r2, #1
   19fe2:	801a      	strh	r2, [r3, #0]
   19fe4:	230a      	movs	r3, #10
   19fe6:	18fa      	adds	r2, r7, r3
   19fe8:	1cbb      	adds	r3, r7, #2
   19fea:	8812      	ldrh	r2, [r2, #0]
   19fec:	881b      	ldrh	r3, [r3, #0]
   19fee:	429a      	cmp	r2, r3
   19ff0:	d3d1      	bcc.n	19f96 <Read_ADC0+0x32>
	}
	
	return (total_value/samples);
   19ff2:	1cbb      	adds	r3, r7, #2
   19ff4:	881a      	ldrh	r2, [r3, #0]
   19ff6:	4b09      	ldr	r3, [pc, #36]	; (1a01c <Read_ADC0+0xb8>)
   19ff8:	0011      	movs	r1, r2
   19ffa:	68f8      	ldr	r0, [r7, #12]
   19ffc:	4798      	blx	r3
   19ffe:	0003      	movs	r3, r0
}
   1a000:	0018      	movs	r0, r3
   1a002:	46bd      	mov	sp, r7
   1a004:	b004      	add	sp, #16
   1a006:	bd80      	pop	{r7, pc}
   1a008:	2000081c 	.word	0x2000081c
   1a00c:	00019431 	.word	0x00019431
   1a010:	0001936d 	.word	0x0001936d
   1a014:	00019265 	.word	0x00019265
   1a018:	000193b5 	.word	0x000193b5
   1a01c:	0002616d 	.word	0x0002616d

0001a020 <Read_Voltage_ADC0>:


uint32_t Read_Voltage_ADC0(uint32_t adc_pin)
{
   1a020:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a022:	b095      	sub	sp, #84	; 0x54
   1a024:	af00      	add	r7, sp, #0
   1a026:	62f8      	str	r0, [r7, #44]	; 0x2c
   1a028:	466b      	mov	r3, sp
   1a02a:	62bb      	str	r3, [r7, #40]	; 0x28
	delay_ms(5);
   1a02c:	2000      	movs	r0, #0
   1a02e:	4b82      	ldr	r3, [pc, #520]	; (1a238 <Read_Voltage_ADC0+0x218>)
   1a030:	4798      	blx	r3
   1a032:	0003      	movs	r3, r0
   1a034:	613b      	str	r3, [r7, #16]
   1a036:	2300      	movs	r3, #0
   1a038:	617b      	str	r3, [r7, #20]
   1a03a:	6938      	ldr	r0, [r7, #16]
   1a03c:	6979      	ldr	r1, [r7, #20]
   1a03e:	0003      	movs	r3, r0
   1a040:	000c      	movs	r4, r1
   1a042:	0f9a      	lsrs	r2, r3, #30
   1a044:	00a6      	lsls	r6, r4, #2
   1a046:	4316      	orrs	r6, r2
   1a048:	009d      	lsls	r5, r3, #2
   1a04a:	0003      	movs	r3, r0
   1a04c:	000c      	movs	r4, r1
   1a04e:	195b      	adds	r3, r3, r5
   1a050:	4174      	adcs	r4, r6
   1a052:	497a      	ldr	r1, [pc, #488]	; (1a23c <Read_Voltage_ADC0+0x21c>)
   1a054:	2200      	movs	r2, #0
   1a056:	185b      	adds	r3, r3, r1
   1a058:	4154      	adcs	r4, r2
   1a05a:	0018      	movs	r0, r3
   1a05c:	0021      	movs	r1, r4
   1a05e:	4c78      	ldr	r4, [pc, #480]	; (1a240 <Read_Voltage_ADC0+0x220>)
   1a060:	4a78      	ldr	r2, [pc, #480]	; (1a244 <Read_Voltage_ADC0+0x224>)
   1a062:	2300      	movs	r3, #0
   1a064:	47a0      	blx	r4
   1a066:	0003      	movs	r3, r0
   1a068:	000c      	movs	r4, r1
   1a06a:	0018      	movs	r0, r3
   1a06c:	4b76      	ldr	r3, [pc, #472]	; (1a248 <Read_Voltage_ADC0+0x228>)
   1a06e:	4798      	blx	r3
	
	adc_set_positive_input(&adc_inst, adc_pin);
   1a070:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1a072:	b2da      	uxtb	r2, r3
   1a074:	4b75      	ldr	r3, [pc, #468]	; (1a24c <Read_Voltage_ADC0+0x22c>)
   1a076:	0011      	movs	r1, r2
   1a078:	0018      	movs	r0, r3
   1a07a:	4b75      	ldr	r3, [pc, #468]	; (1a250 <Read_Voltage_ADC0+0x230>)
   1a07c:	4798      	blx	r3
	//read 500 samples
	
	uint16_t no_of_samples = 544;  //272 samples contain one full cycle
   1a07e:	2320      	movs	r3, #32
   1a080:	2228      	movs	r2, #40	; 0x28
   1a082:	4694      	mov	ip, r2
   1a084:	44bc      	add	ip, r7
   1a086:	4463      	add	r3, ip
   1a088:	2288      	movs	r2, #136	; 0x88
   1a08a:	0092      	lsls	r2, r2, #2
   1a08c:	801a      	strh	r2, [r3, #0]
	uint16_t samples_buffer[no_of_samples];
   1a08e:	2320      	movs	r3, #32
   1a090:	2228      	movs	r2, #40	; 0x28
   1a092:	4694      	mov	ip, r2
   1a094:	44bc      	add	ip, r7
   1a096:	4463      	add	r3, ip
   1a098:	881b      	ldrh	r3, [r3, #0]
   1a09a:	001a      	movs	r2, r3
   1a09c:	3a01      	subs	r2, #1
   1a09e:	647a      	str	r2, [r7, #68]	; 0x44
   1a0a0:	60bb      	str	r3, [r7, #8]
   1a0a2:	2200      	movs	r2, #0
   1a0a4:	60fa      	str	r2, [r7, #12]
   1a0a6:	68b8      	ldr	r0, [r7, #8]
   1a0a8:	68f9      	ldr	r1, [r7, #12]
   1a0aa:	0002      	movs	r2, r0
   1a0ac:	0f12      	lsrs	r2, r2, #28
   1a0ae:	000c      	movs	r4, r1
   1a0b0:	0124      	lsls	r4, r4, #4
   1a0b2:	627c      	str	r4, [r7, #36]	; 0x24
   1a0b4:	6a7c      	ldr	r4, [r7, #36]	; 0x24
   1a0b6:	4314      	orrs	r4, r2
   1a0b8:	627c      	str	r4, [r7, #36]	; 0x24
   1a0ba:	0002      	movs	r2, r0
   1a0bc:	0112      	lsls	r2, r2, #4
   1a0be:	623a      	str	r2, [r7, #32]
   1a0c0:	603b      	str	r3, [r7, #0]
   1a0c2:	2200      	movs	r2, #0
   1a0c4:	607a      	str	r2, [r7, #4]
   1a0c6:	6838      	ldr	r0, [r7, #0]
   1a0c8:	6879      	ldr	r1, [r7, #4]
   1a0ca:	0002      	movs	r2, r0
   1a0cc:	0f12      	lsrs	r2, r2, #28
   1a0ce:	000c      	movs	r4, r1
   1a0d0:	0124      	lsls	r4, r4, #4
   1a0d2:	61fc      	str	r4, [r7, #28]
   1a0d4:	69fc      	ldr	r4, [r7, #28]
   1a0d6:	4314      	orrs	r4, r2
   1a0d8:	61fc      	str	r4, [r7, #28]
   1a0da:	0002      	movs	r2, r0
   1a0dc:	0112      	lsls	r2, r2, #4
   1a0de:	61ba      	str	r2, [r7, #24]
   1a0e0:	005b      	lsls	r3, r3, #1
   1a0e2:	3301      	adds	r3, #1
   1a0e4:	3307      	adds	r3, #7
   1a0e6:	08db      	lsrs	r3, r3, #3
   1a0e8:	00db      	lsls	r3, r3, #3
   1a0ea:	466a      	mov	r2, sp
   1a0ec:	1ad3      	subs	r3, r2, r3
   1a0ee:	469d      	mov	sp, r3
   1a0f0:	466b      	mov	r3, sp
   1a0f2:	3301      	adds	r3, #1
   1a0f4:	085b      	lsrs	r3, r3, #1
   1a0f6:	005b      	lsls	r3, r3, #1
   1a0f8:	643b      	str	r3, [r7, #64]	; 0x40
	
	/************************************************************************/
	/*Using Buffered ADC to take Readings                                   */
	/************************************************************************/
	adc_read_buffer_done = false;
   1a0fa:	4b56      	ldr	r3, [pc, #344]	; (1a254 <Read_Voltage_ADC0+0x234>)
   1a0fc:	2200      	movs	r2, #0
   1a0fe:	701a      	strb	r2, [r3, #0]
	//uint32_t temp = xTaskGetTickCount();
	while(adc_read_buffer_job(&adc_inst, samples_buffer, no_of_samples)!=STATUS_OK)
   1a100:	46c0      	nop			; (mov r8, r8)
   1a102:	6c39      	ldr	r1, [r7, #64]	; 0x40
   1a104:	2320      	movs	r3, #32
   1a106:	2228      	movs	r2, #40	; 0x28
   1a108:	4694      	mov	ip, r2
   1a10a:	44bc      	add	ip, r7
   1a10c:	4463      	add	r3, ip
   1a10e:	881a      	ldrh	r2, [r3, #0]
   1a110:	4b4e      	ldr	r3, [pc, #312]	; (1a24c <Read_Voltage_ADC0+0x22c>)
   1a112:	0018      	movs	r0, r3
   1a114:	4b50      	ldr	r3, [pc, #320]	; (1a258 <Read_Voltage_ADC0+0x238>)
   1a116:	4798      	blx	r3
   1a118:	1e03      	subs	r3, r0, #0
   1a11a:	d1f2      	bne.n	1a102 <Read_Voltage_ADC0+0xe2>
	{}
	ulTaskNotifyTake(pdTRUE,100/portTICK_PERIOD_MS);
   1a11c:	2164      	movs	r1, #100	; 0x64
   1a11e:	2001      	movs	r0, #1
   1a120:	4b4e      	ldr	r3, [pc, #312]	; (1a25c <Read_Voltage_ADC0+0x23c>)
   1a122:	4798      	blx	r3
	//while (adc_read(&adc_inst, &samples_buffer[i]) != STATUS_OK) {
	//}
	//}

	
	if(adc_read_buffer_done)
   1a124:	4b4b      	ldr	r3, [pc, #300]	; (1a254 <Read_Voltage_ADC0+0x234>)
   1a126:	781b      	ldrb	r3, [r3, #0]
   1a128:	2b00      	cmp	r3, #0
   1a12a:	d100      	bne.n	1a12e <Read_Voltage_ADC0+0x10e>
   1a12c:	e07c      	b.n	1a228 <Read_Voltage_ADC0+0x208>
	{
		uint32_t square = 0;
   1a12e:	2300      	movs	r3, #0
   1a130:	64fb      	str	r3, [r7, #76]	; 0x4c
		double  mean = 0.0;
   1a132:	2300      	movs	r3, #0
   1a134:	2400      	movs	r4, #0
   1a136:	63bb      	str	r3, [r7, #56]	; 0x38
   1a138:	63fc      	str	r4, [r7, #60]	; 0x3c
		double  root = 0.0;
   1a13a:	2300      	movs	r3, #0
   1a13c:	2400      	movs	r4, #0
   1a13e:	633b      	str	r3, [r7, #48]	; 0x30
   1a140:	637c      	str	r4, [r7, #52]	; 0x34
		
		for (uint16_t i = 0; i < no_of_samples; i++)
   1a142:	2322      	movs	r3, #34	; 0x22
   1a144:	2228      	movs	r2, #40	; 0x28
   1a146:	4694      	mov	ip, r2
   1a148:	44bc      	add	ip, r7
   1a14a:	4463      	add	r3, ip
   1a14c:	2200      	movs	r2, #0
   1a14e:	801a      	strh	r2, [r3, #0]
   1a150:	e032      	b.n	1a1b8 <Read_Voltage_ADC0+0x198>
		{
			square += pow(samples_buffer[i], 2);
   1a152:	2322      	movs	r3, #34	; 0x22
   1a154:	2228      	movs	r2, #40	; 0x28
   1a156:	4694      	mov	ip, r2
   1a158:	44bc      	add	ip, r7
   1a15a:	4463      	add	r3, ip
   1a15c:	881a      	ldrh	r2, [r3, #0]
   1a15e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1a160:	0052      	lsls	r2, r2, #1
   1a162:	5ad2      	ldrh	r2, [r2, r3]
   1a164:	4b3e      	ldr	r3, [pc, #248]	; (1a260 <Read_Voltage_ADC0+0x240>)
   1a166:	0010      	movs	r0, r2
   1a168:	4798      	blx	r3
   1a16a:	2300      	movs	r3, #0
   1a16c:	2480      	movs	r4, #128	; 0x80
   1a16e:	05e4      	lsls	r4, r4, #23
   1a170:	001a      	movs	r2, r3
   1a172:	0023      	movs	r3, r4
   1a174:	4c3b      	ldr	r4, [pc, #236]	; (1a264 <Read_Voltage_ADC0+0x244>)
   1a176:	47a0      	blx	r4
   1a178:	0005      	movs	r5, r0
   1a17a:	000e      	movs	r6, r1
   1a17c:	4b38      	ldr	r3, [pc, #224]	; (1a260 <Read_Voltage_ADC0+0x240>)
   1a17e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
   1a180:	4798      	blx	r3
   1a182:	4c39      	ldr	r4, [pc, #228]	; (1a268 <Read_Voltage_ADC0+0x248>)
   1a184:	002a      	movs	r2, r5
   1a186:	0033      	movs	r3, r6
   1a188:	47a0      	blx	r4
   1a18a:	0003      	movs	r3, r0
   1a18c:	000c      	movs	r4, r1
   1a18e:	0019      	movs	r1, r3
   1a190:	0022      	movs	r2, r4
   1a192:	4b36      	ldr	r3, [pc, #216]	; (1a26c <Read_Voltage_ADC0+0x24c>)
   1a194:	0008      	movs	r0, r1
   1a196:	0011      	movs	r1, r2
   1a198:	4798      	blx	r3
   1a19a:	0003      	movs	r3, r0
   1a19c:	64fb      	str	r3, [r7, #76]	; 0x4c
		for (uint16_t i = 0; i < no_of_samples; i++)
   1a19e:	2322      	movs	r3, #34	; 0x22
   1a1a0:	2228      	movs	r2, #40	; 0x28
   1a1a2:	4694      	mov	ip, r2
   1a1a4:	44bc      	add	ip, r7
   1a1a6:	4463      	add	r3, ip
   1a1a8:	881a      	ldrh	r2, [r3, #0]
   1a1aa:	2322      	movs	r3, #34	; 0x22
   1a1ac:	2128      	movs	r1, #40	; 0x28
   1a1ae:	468c      	mov	ip, r1
   1a1b0:	44bc      	add	ip, r7
   1a1b2:	4463      	add	r3, ip
   1a1b4:	3201      	adds	r2, #1
   1a1b6:	801a      	strh	r2, [r3, #0]
   1a1b8:	2322      	movs	r3, #34	; 0x22
   1a1ba:	2228      	movs	r2, #40	; 0x28
   1a1bc:	18ba      	adds	r2, r7, r2
   1a1be:	18d2      	adds	r2, r2, r3
   1a1c0:	2320      	movs	r3, #32
   1a1c2:	2128      	movs	r1, #40	; 0x28
   1a1c4:	468c      	mov	ip, r1
   1a1c6:	44bc      	add	ip, r7
   1a1c8:	4463      	add	r3, ip
   1a1ca:	8812      	ldrh	r2, [r2, #0]
   1a1cc:	881b      	ldrh	r3, [r3, #0]
   1a1ce:	429a      	cmp	r2, r3
   1a1d0:	d3bf      	bcc.n	1a152 <Read_Voltage_ADC0+0x132>
		}
		
		mean = (square / (float)(no_of_samples));
   1a1d2:	4b27      	ldr	r3, [pc, #156]	; (1a270 <Read_Voltage_ADC0+0x250>)
   1a1d4:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
   1a1d6:	4798      	blx	r3
   1a1d8:	1c04      	adds	r4, r0, #0
   1a1da:	2320      	movs	r3, #32
   1a1dc:	2228      	movs	r2, #40	; 0x28
   1a1de:	4694      	mov	ip, r2
   1a1e0:	44bc      	add	ip, r7
   1a1e2:	4463      	add	r3, ip
   1a1e4:	881a      	ldrh	r2, [r3, #0]
   1a1e6:	4b22      	ldr	r3, [pc, #136]	; (1a270 <Read_Voltage_ADC0+0x250>)
   1a1e8:	0010      	movs	r0, r2
   1a1ea:	4798      	blx	r3
   1a1ec:	1c02      	adds	r2, r0, #0
   1a1ee:	4b21      	ldr	r3, [pc, #132]	; (1a274 <Read_Voltage_ADC0+0x254>)
   1a1f0:	1c11      	adds	r1, r2, #0
   1a1f2:	1c20      	adds	r0, r4, #0
   1a1f4:	4798      	blx	r3
   1a1f6:	1c03      	adds	r3, r0, #0
   1a1f8:	1c1a      	adds	r2, r3, #0
   1a1fa:	4b1f      	ldr	r3, [pc, #124]	; (1a278 <Read_Voltage_ADC0+0x258>)
   1a1fc:	1c10      	adds	r0, r2, #0
   1a1fe:	4798      	blx	r3
   1a200:	0003      	movs	r3, r0
   1a202:	000c      	movs	r4, r1
   1a204:	63bb      	str	r3, [r7, #56]	; 0x38
   1a206:	63fc      	str	r4, [r7, #60]	; 0x3c
		// Calculate Root.
		root = sqrt(mean);
   1a208:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1a20a:	6bfc      	ldr	r4, [r7, #60]	; 0x3c
   1a20c:	0018      	movs	r0, r3
   1a20e:	0021      	movs	r1, r4
   1a210:	4b1a      	ldr	r3, [pc, #104]	; (1a27c <Read_Voltage_ADC0+0x25c>)
   1a212:	4798      	blx	r3
   1a214:	0003      	movs	r3, r0
   1a216:	000c      	movs	r4, r1
   1a218:	633b      	str	r3, [r7, #48]	; 0x30
   1a21a:	637c      	str	r4, [r7, #52]	; 0x34
		//{
			//delay_us(1);
		//}
		////
		
		return (uint32_t)root;
   1a21c:	4b13      	ldr	r3, [pc, #76]	; (1a26c <Read_Voltage_ADC0+0x24c>)
   1a21e:	6b38      	ldr	r0, [r7, #48]	; 0x30
   1a220:	6b79      	ldr	r1, [r7, #52]	; 0x34
   1a222:	4798      	blx	r3
   1a224:	0003      	movs	r3, r0
   1a226:	e000      	b.n	1a22a <Read_Voltage_ADC0+0x20a>
	}
	else
	{
		return 0;
   1a228:	2300      	movs	r3, #0
   1a22a:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1a22c:	4695      	mov	sp, r2
	//}
	//}
	//}
	//
	//return samples_buffer[5]; //0,1,2,3,4 are considered as voltage spikes
}
   1a22e:	0018      	movs	r0, r3
   1a230:	46bd      	mov	sp, r7
   1a232:	b015      	add	sp, #84	; 0x54
   1a234:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1a236:	46c0      	nop			; (mov r8, r8)
   1a238:	0002454d 	.word	0x0002454d
   1a23c:	00001b57 	.word	0x00001b57
   1a240:	000264d5 	.word	0x000264d5
   1a244:	00001b58 	.word	0x00001b58
   1a248:	20000001 	.word	0x20000001
   1a24c:	2000081c 	.word	0x2000081c
   1a250:	00019431 	.word	0x00019431
   1a254:	20000745 	.word	0x20000745
   1a258:	0001dc65 	.word	0x0001dc65
   1a25c:	000209f1 	.word	0x000209f1
   1a260:	00028761 	.word	0x00028761
   1a264:	00024ed9 	.word	0x00024ed9
   1a268:	00026c81 	.word	0x00026c81
   1a26c:	00026569 	.word	0x00026569
   1a270:	00026bf5 	.word	0x00026bf5
   1a274:	00026725 	.word	0x00026725
   1a278:	000287d1 	.word	0x000287d1
   1a27c:	00025231 	.word	0x00025231

0001a280 <autoSetCurrent>:

void autoSetCurrent(void)
{
   1a280:	b580      	push	{r7, lr}
   1a282:	b084      	sub	sp, #16
   1a284:	af00      	add	r7, sp, #0
	if(getMotorState() && !startSequenceOn && !starDeltaTimerOn && !stopSequenceOn && getAllPhaseState())
   1a286:	4b2f      	ldr	r3, [pc, #188]	; (1a344 <autoSetCurrent+0xc4>)
   1a288:	4798      	blx	r3
   1a28a:	1e03      	subs	r3, r0, #0
   1a28c:	d050      	beq.n	1a330 <autoSetCurrent+0xb0>
   1a28e:	4b2e      	ldr	r3, [pc, #184]	; (1a348 <autoSetCurrent+0xc8>)
   1a290:	781b      	ldrb	r3, [r3, #0]
   1a292:	2201      	movs	r2, #1
   1a294:	4053      	eors	r3, r2
   1a296:	b2db      	uxtb	r3, r3
   1a298:	2b00      	cmp	r3, #0
   1a29a:	d049      	beq.n	1a330 <autoSetCurrent+0xb0>
   1a29c:	4b2b      	ldr	r3, [pc, #172]	; (1a34c <autoSetCurrent+0xcc>)
   1a29e:	781b      	ldrb	r3, [r3, #0]
   1a2a0:	2201      	movs	r2, #1
   1a2a2:	4053      	eors	r3, r2
   1a2a4:	b2db      	uxtb	r3, r3
   1a2a6:	2b00      	cmp	r3, #0
   1a2a8:	d042      	beq.n	1a330 <autoSetCurrent+0xb0>
   1a2aa:	4b29      	ldr	r3, [pc, #164]	; (1a350 <autoSetCurrent+0xd0>)
   1a2ac:	781b      	ldrb	r3, [r3, #0]
   1a2ae:	2201      	movs	r2, #1
   1a2b0:	4053      	eors	r3, r2
   1a2b2:	b2db      	uxtb	r3, r3
   1a2b4:	2b00      	cmp	r3, #0
   1a2b6:	d03b      	beq.n	1a330 <autoSetCurrent+0xb0>
   1a2b8:	4b26      	ldr	r3, [pc, #152]	; (1a354 <autoSetCurrent+0xd4>)
   1a2ba:	4798      	blx	r3
   1a2bc:	1e03      	subs	r3, r0, #0
   1a2be:	d037      	beq.n	1a330 <autoSetCurrent+0xb0>
	{
		uint32_t ADCcurrent = Analog_Parameter_Struct.Motor_Current;
   1a2c0:	4b25      	ldr	r3, [pc, #148]	; (1a358 <autoSetCurrent+0xd8>)
   1a2c2:	691b      	ldr	r3, [r3, #16]
   1a2c4:	60fb      	str	r3, [r7, #12]
		//ADCcurrent = Read_ADC0(ADC_POSITIVE_INPUT_PIN16,200);
		//xSemaphoreGive(xADC_Semaphore);
		//}
		
		
		if(ADCcurrent<250)     //ADC VALUE FOR 2.5A
   1a2c6:	68fb      	ldr	r3, [r7, #12]
   1a2c8:	2bf9      	cmp	r3, #249	; 0xf9
   1a2ca:	d806      	bhi.n	1a2da <autoSetCurrent+0x5a>
		{
			setCurrentDetection(false);
   1a2cc:	2000      	movs	r0, #0
   1a2ce:	4b23      	ldr	r3, [pc, #140]	; (1a35c <autoSetCurrent+0xdc>)
   1a2d0:	4798      	blx	r3
			setMotorMGRResponse('Y');		//ampere cleared
   1a2d2:	2059      	movs	r0, #89	; 0x59
   1a2d4:	4b22      	ldr	r3, [pc, #136]	; (1a360 <autoSetCurrent+0xe0>)
   1a2d6:	4798      	blx	r3
			return;
   1a2d8:	e030      	b.n	1a33c <autoSetCurrent+0xbc>
		}
		
		uint32_t tempUnder = ADCcurrent  * user_settings_parameter_struct.underloadPerAddress / 100;
   1a2da:	4b22      	ldr	r3, [pc, #136]	; (1a364 <autoSetCurrent+0xe4>)
   1a2dc:	7f1b      	ldrb	r3, [r3, #28]
   1a2de:	b2db      	uxtb	r3, r3
   1a2e0:	001a      	movs	r2, r3
   1a2e2:	68fb      	ldr	r3, [r7, #12]
   1a2e4:	435a      	muls	r2, r3
   1a2e6:	4b20      	ldr	r3, [pc, #128]	; (1a368 <autoSetCurrent+0xe8>)
   1a2e8:	2164      	movs	r1, #100	; 0x64
   1a2ea:	0010      	movs	r0, r2
   1a2ec:	4798      	blx	r3
   1a2ee:	0003      	movs	r3, r0
   1a2f0:	60bb      	str	r3, [r7, #8]
		uint32_t tempOver = ADCcurrent  * user_settings_parameter_struct.overloadPerAddress / 100;
   1a2f2:	4b1c      	ldr	r3, [pc, #112]	; (1a364 <autoSetCurrent+0xe4>)
   1a2f4:	7f5b      	ldrb	r3, [r3, #29]
   1a2f6:	b2db      	uxtb	r3, r3
   1a2f8:	001a      	movs	r2, r3
   1a2fa:	68fb      	ldr	r3, [r7, #12]
   1a2fc:	435a      	muls	r2, r3
   1a2fe:	4b1a      	ldr	r3, [pc, #104]	; (1a368 <autoSetCurrent+0xe8>)
   1a300:	2164      	movs	r1, #100	; 0x64
   1a302:	0010      	movs	r0, r2
   1a304:	4798      	blx	r3
   1a306:	0003      	movs	r3, r0
   1a308:	607b      	str	r3, [r7, #4]

		setNormalLoadValue(ADCcurrent);
   1a30a:	68fb      	ldr	r3, [r7, #12]
   1a30c:	0018      	movs	r0, r3
   1a30e:	4b17      	ldr	r3, [pc, #92]	; (1a36c <autoSetCurrent+0xec>)
   1a310:	4798      	blx	r3
		setUnderloadValue(tempUnder);
   1a312:	68bb      	ldr	r3, [r7, #8]
   1a314:	0018      	movs	r0, r3
   1a316:	4b16      	ldr	r3, [pc, #88]	; (1a370 <autoSetCurrent+0xf0>)
   1a318:	4798      	blx	r3
		setOverloadValue(tempOver);
   1a31a:	687b      	ldr	r3, [r7, #4]
   1a31c:	0018      	movs	r0, r3
   1a31e:	4b15      	ldr	r3, [pc, #84]	; (1a374 <autoSetCurrent+0xf4>)
   1a320:	4798      	blx	r3
		setCurrentDetection(true);
   1a322:	2001      	movs	r0, #1
   1a324:	4b0d      	ldr	r3, [pc, #52]	; (1a35c <autoSetCurrent+0xdc>)
   1a326:	4798      	blx	r3
		setMotorMGRResponse('K');		//ampere settings complete
   1a328:	204b      	movs	r0, #75	; 0x4b
   1a32a:	4b0d      	ldr	r3, [pc, #52]	; (1a360 <autoSetCurrent+0xe0>)
   1a32c:	4798      	blx	r3
	{
   1a32e:	e005      	b.n	1a33c <autoSetCurrent+0xbc>
	}
	else
	{
		setCurrentDetection(false);
   1a330:	2000      	movs	r0, #0
   1a332:	4b0a      	ldr	r3, [pc, #40]	; (1a35c <autoSetCurrent+0xdc>)
   1a334:	4798      	blx	r3
		setMotorMGRResponse('Y');		//ampere cleared
   1a336:	2059      	movs	r0, #89	; 0x59
   1a338:	4b09      	ldr	r3, [pc, #36]	; (1a360 <autoSetCurrent+0xe0>)
   1a33a:	4798      	blx	r3
	}
}
   1a33c:	46bd      	mov	sp, r7
   1a33e:	b004      	add	sp, #16
   1a340:	bd80      	pop	{r7, pc}
   1a342:	46c0      	nop			; (mov r8, r8)
   1a344:	0001af25 	.word	0x0001af25
   1a348:	20000799 	.word	0x20000799
   1a34c:	2000079b 	.word	0x2000079b
   1a350:	20000788 	.word	0x20000788
   1a354:	0001aebd 	.word	0x0001aebd
   1a358:	200006e8 	.word	0x200006e8
   1a35c:	00011995 	.word	0x00011995
   1a360:	00014d4d 	.word	0x00014d4d
   1a364:	20000654 	.word	0x20000654
   1a368:	0002616d 	.word	0x0002616d
   1a36c:	00011951 	.word	0x00011951
   1a370:	000118c9 	.word	0x000118c9
   1a374:	0001190d 	.word	0x0001190d

0001a378 <speakAmpere>:

void speakAmpere(void)
{
   1a378:	b580      	push	{r7, lr}
   1a37a:	b084      	sub	sp, #16
   1a37c:	af00      	add	r7, sp, #0
	if(getMotorState())
   1a37e:	4b0d      	ldr	r3, [pc, #52]	; (1a3b4 <speakAmpere+0x3c>)
   1a380:	4798      	blx	r3
   1a382:	1e03      	subs	r3, r0, #0
   1a384:	d00f      	beq.n	1a3a6 <speakAmpere+0x2e>
	{
		char cTemp[8];
		
		uint32_t ADCcurrent = Analog_Parameter_Struct.Motor_Current_IntPart;
   1a386:	4b0c      	ldr	r3, [pc, #48]	; (1a3b8 <speakAmpere+0x40>)
   1a388:	8a9b      	ldrh	r3, [r3, #20]
   1a38a:	b29b      	uxth	r3, r3
   1a38c:	60fb      	str	r3, [r7, #12]
		//xSemaphoreGive(xADC_Semaphore);
		//ADCcurrent = (ADCcurrent*7225)/100000;
		//xSemaphoreGive(xADC_Semaphore);
		//}
		
		utoa(ADCcurrent, cTemp, 10);
   1a38e:	1d39      	adds	r1, r7, #4
   1a390:	68fb      	ldr	r3, [r7, #12]
   1a392:	220a      	movs	r2, #10
   1a394:	0018      	movs	r0, r3
   1a396:	4b09      	ldr	r3, [pc, #36]	; (1a3bc <speakAmpere+0x44>)
   1a398:	4798      	blx	r3
		playRepeatedFiles(cTemp);
   1a39a:	1d3b      	adds	r3, r7, #4
   1a39c:	0018      	movs	r0, r3
   1a39e:	4b08      	ldr	r3, [pc, #32]	; (1a3c0 <speakAmpere+0x48>)
   1a3a0:	4798      	blx	r3
		return;
   1a3a2:	46c0      	nop			; (mov r8, r8)
   1a3a4:	e002      	b.n	1a3ac <speakAmpere+0x34>
	}
	setMotorMGRResponse('-');
   1a3a6:	202d      	movs	r0, #45	; 0x2d
   1a3a8:	4b06      	ldr	r3, [pc, #24]	; (1a3c4 <speakAmpere+0x4c>)
   1a3aa:	4798      	blx	r3
}
   1a3ac:	46bd      	mov	sp, r7
   1a3ae:	b004      	add	sp, #16
   1a3b0:	bd80      	pop	{r7, pc}
   1a3b2:	46c0      	nop			; (mov r8, r8)
   1a3b4:	0001af25 	.word	0x0001af25
   1a3b8:	200006e8 	.word	0x200006e8
   1a3bc:	00028f29 	.word	0x00028f29
   1a3c0:	00014a09 	.word	0x00014a09
   1a3c4:	00014d4d 	.word	0x00014d4d

0001a3c8 <PR2_ISR>:

void PR2_ISR(void)
{
   1a3c8:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a3ca:	b08b      	sub	sp, #44	; 0x2c
   1a3cc:	af00      	add	r7, sp, #0
	if (ucharPhase_Seq_Check_Flag==1)
   1a3ce:	4b77      	ldr	r3, [pc, #476]	; (1a5ac <PR2_ISR+0x1e4>)
   1a3d0:	781b      	ldrb	r3, [r3, #0]
   1a3d2:	b2db      	uxtb	r3, r3
   1a3d4:	2b01      	cmp	r3, #1
   1a3d6:	d000      	beq.n	1a3da <PR2_ISR+0x12>
   1a3d8:	e0e3      	b.n	1a5a2 <PR2_ISR+0x1da>
	{
		ucharPhase_1_Timer_Counter=0;
   1a3da:	4b75      	ldr	r3, [pc, #468]	; (1a5b0 <PR2_ISR+0x1e8>)
   1a3dc:	2200      	movs	r2, #0
   1a3de:	701a      	strb	r2, [r3, #0]
		delay_ms(5);
   1a3e0:	2000      	movs	r0, #0
   1a3e2:	4b74      	ldr	r3, [pc, #464]	; (1a5b4 <PR2_ISR+0x1ec>)
   1a3e4:	4798      	blx	r3
   1a3e6:	0003      	movs	r3, r0
   1a3e8:	60bb      	str	r3, [r7, #8]
   1a3ea:	2300      	movs	r3, #0
   1a3ec:	60fb      	str	r3, [r7, #12]
   1a3ee:	68bb      	ldr	r3, [r7, #8]
   1a3f0:	68fc      	ldr	r4, [r7, #12]
   1a3f2:	0f9a      	lsrs	r2, r3, #30
   1a3f4:	00a0      	lsls	r0, r4, #2
   1a3f6:	61f8      	str	r0, [r7, #28]
   1a3f8:	69f8      	ldr	r0, [r7, #28]
   1a3fa:	4310      	orrs	r0, r2
   1a3fc:	61f8      	str	r0, [r7, #28]
   1a3fe:	009b      	lsls	r3, r3, #2
   1a400:	61bb      	str	r3, [r7, #24]
   1a402:	69bb      	ldr	r3, [r7, #24]
   1a404:	69fc      	ldr	r4, [r7, #28]
   1a406:	68b9      	ldr	r1, [r7, #8]
   1a408:	68fa      	ldr	r2, [r7, #12]
   1a40a:	185b      	adds	r3, r3, r1
   1a40c:	4154      	adcs	r4, r2
   1a40e:	496a      	ldr	r1, [pc, #424]	; (1a5b8 <PR2_ISR+0x1f0>)
   1a410:	2200      	movs	r2, #0
   1a412:	185b      	adds	r3, r3, r1
   1a414:	4154      	adcs	r4, r2
   1a416:	0018      	movs	r0, r3
   1a418:	0021      	movs	r1, r4
   1a41a:	4c68      	ldr	r4, [pc, #416]	; (1a5bc <PR2_ISR+0x1f4>)
   1a41c:	4a68      	ldr	r2, [pc, #416]	; (1a5c0 <PR2_ISR+0x1f8>)
   1a41e:	2300      	movs	r3, #0
   1a420:	47a0      	blx	r4
   1a422:	0003      	movs	r3, r0
   1a424:	000c      	movs	r4, r1
   1a426:	0018      	movs	r0, r3
   1a428:	4b66      	ldr	r3, [pc, #408]	; (1a5c4 <PR2_ISR+0x1fc>)
   1a42a:	4798      	blx	r3
		volatile unsigned char ucharHigh_Flag=0,ucharLow_Flag=0,ucharHigh_To_Low_Flag=0,ucharLow_To_High_Flag=0;
   1a42c:	2323      	movs	r3, #35	; 0x23
   1a42e:	18fb      	adds	r3, r7, r3
   1a430:	2200      	movs	r2, #0
   1a432:	701a      	strb	r2, [r3, #0]
   1a434:	2322      	movs	r3, #34	; 0x22
   1a436:	18fb      	adds	r3, r7, r3
   1a438:	2200      	movs	r2, #0
   1a43a:	701a      	strb	r2, [r3, #0]
   1a43c:	2321      	movs	r3, #33	; 0x21
   1a43e:	18fb      	adds	r3, r7, r3
   1a440:	2200      	movs	r2, #0
   1a442:	701a      	strb	r2, [r3, #0]
   1a444:	2320      	movs	r3, #32
   1a446:	18fb      	adds	r3, r7, r3
   1a448:	2200      	movs	r2, #0
   1a44a:	701a      	strb	r2, [r3, #0]
		if (port_pin_get_input_level(PR2_PIN)==HIGH)
   1a44c:	202b      	movs	r0, #43	; 0x2b
   1a44e:	4b5e      	ldr	r3, [pc, #376]	; (1a5c8 <PR2_ISR+0x200>)
   1a450:	4798      	blx	r3
   1a452:	1e03      	subs	r3, r0, #0
   1a454:	d100      	bne.n	1a458 <PR2_ISR+0x90>
   1a456:	e08e      	b.n	1a576 <PR2_ISR+0x1ae>
		{
			for (unsigned int uintLoop=0;uintLoop<120;uintLoop++)
   1a458:	2300      	movs	r3, #0
   1a45a:	627b      	str	r3, [r7, #36]	; 0x24
   1a45c:	e085      	b.n	1a56a <PR2_ISR+0x1a2>
			{
				delay_us(25);
   1a45e:	2000      	movs	r0, #0
   1a460:	4b54      	ldr	r3, [pc, #336]	; (1a5b4 <PR2_ISR+0x1ec>)
   1a462:	4798      	blx	r3
   1a464:	0003      	movs	r3, r0
   1a466:	603b      	str	r3, [r7, #0]
   1a468:	2300      	movs	r3, #0
   1a46a:	607b      	str	r3, [r7, #4]
   1a46c:	6838      	ldr	r0, [r7, #0]
   1a46e:	6879      	ldr	r1, [r7, #4]
   1a470:	0003      	movs	r3, r0
   1a472:	000c      	movs	r4, r1
   1a474:	0f9a      	lsrs	r2, r3, #30
   1a476:	00a6      	lsls	r6, r4, #2
   1a478:	4316      	orrs	r6, r2
   1a47a:	009d      	lsls	r5, r3, #2
   1a47c:	0003      	movs	r3, r0
   1a47e:	000c      	movs	r4, r1
   1a480:	195b      	adds	r3, r3, r5
   1a482:	4174      	adcs	r4, r6
   1a484:	0f9a      	lsrs	r2, r3, #30
   1a486:	00a1      	lsls	r1, r4, #2
   1a488:	6179      	str	r1, [r7, #20]
   1a48a:	6979      	ldr	r1, [r7, #20]
   1a48c:	4311      	orrs	r1, r2
   1a48e:	6179      	str	r1, [r7, #20]
   1a490:	009a      	lsls	r2, r3, #2
   1a492:	613a      	str	r2, [r7, #16]
   1a494:	6939      	ldr	r1, [r7, #16]
   1a496:	697a      	ldr	r2, [r7, #20]
   1a498:	185b      	adds	r3, r3, r1
   1a49a:	4154      	adcs	r4, r2
   1a49c:	494b      	ldr	r1, [pc, #300]	; (1a5cc <PR2_ISR+0x204>)
   1a49e:	2200      	movs	r2, #0
   1a4a0:	185b      	adds	r3, r3, r1
   1a4a2:	4154      	adcs	r4, r2
   1a4a4:	0018      	movs	r0, r3
   1a4a6:	0021      	movs	r1, r4
   1a4a8:	4c44      	ldr	r4, [pc, #272]	; (1a5bc <PR2_ISR+0x1f4>)
   1a4aa:	4a49      	ldr	r2, [pc, #292]	; (1a5d0 <PR2_ISR+0x208>)
   1a4ac:	2300      	movs	r3, #0
   1a4ae:	47a0      	blx	r4
   1a4b0:	0003      	movs	r3, r0
   1a4b2:	000c      	movs	r4, r1
   1a4b4:	0018      	movs	r0, r3
   1a4b6:	4b43      	ldr	r3, [pc, #268]	; (1a5c4 <PR2_ISR+0x1fc>)
   1a4b8:	4798      	blx	r3
				if ((port_pin_get_input_level(PR1_PIN)==HIGH)&&(ucharHigh_Flag==0))
   1a4ba:	202a      	movs	r0, #42	; 0x2a
   1a4bc:	4b42      	ldr	r3, [pc, #264]	; (1a5c8 <PR2_ISR+0x200>)
   1a4be:	4798      	blx	r3
   1a4c0:	1e03      	subs	r3, r0, #0
   1a4c2:	d014      	beq.n	1a4ee <PR2_ISR+0x126>
   1a4c4:	2323      	movs	r3, #35	; 0x23
   1a4c6:	18fb      	adds	r3, r7, r3
   1a4c8:	781b      	ldrb	r3, [r3, #0]
   1a4ca:	b2db      	uxtb	r3, r3
   1a4cc:	2b00      	cmp	r3, #0
   1a4ce:	d10e      	bne.n	1a4ee <PR2_ISR+0x126>
				{
					ucharHigh_Flag=1;
   1a4d0:	2323      	movs	r3, #35	; 0x23
   1a4d2:	18fb      	adds	r3, r7, r3
   1a4d4:	2201      	movs	r2, #1
   1a4d6:	701a      	strb	r2, [r3, #0]
					if (ucharLow_Flag==1)
   1a4d8:	2322      	movs	r3, #34	; 0x22
   1a4da:	18fb      	adds	r3, r7, r3
   1a4dc:	781b      	ldrb	r3, [r3, #0]
   1a4de:	b2db      	uxtb	r3, r3
   1a4e0:	2b01      	cmp	r3, #1
   1a4e2:	d104      	bne.n	1a4ee <PR2_ISR+0x126>
					{
						ucharLow_To_High_Flag=1;
   1a4e4:	2320      	movs	r3, #32
   1a4e6:	18fb      	adds	r3, r7, r3
   1a4e8:	2201      	movs	r2, #1
   1a4ea:	701a      	strb	r2, [r3, #0]
						break;
   1a4ec:	e043      	b.n	1a576 <PR2_ISR+0x1ae>
					}
				}
				if ((port_pin_get_input_level(PR1_PIN)==LOW)&&(ucharLow_Flag==0))
   1a4ee:	202a      	movs	r0, #42	; 0x2a
   1a4f0:	4b35      	ldr	r3, [pc, #212]	; (1a5c8 <PR2_ISR+0x200>)
   1a4f2:	4798      	blx	r3
   1a4f4:	0003      	movs	r3, r0
   1a4f6:	001a      	movs	r2, r3
   1a4f8:	2301      	movs	r3, #1
   1a4fa:	4053      	eors	r3, r2
   1a4fc:	b2db      	uxtb	r3, r3
   1a4fe:	2b00      	cmp	r3, #0
   1a500:	d013      	beq.n	1a52a <PR2_ISR+0x162>
   1a502:	2322      	movs	r3, #34	; 0x22
   1a504:	18fb      	adds	r3, r7, r3
   1a506:	781b      	ldrb	r3, [r3, #0]
   1a508:	b2db      	uxtb	r3, r3
   1a50a:	2b00      	cmp	r3, #0
   1a50c:	d10d      	bne.n	1a52a <PR2_ISR+0x162>
				{
					ucharLow_Flag=1;
   1a50e:	2322      	movs	r3, #34	; 0x22
   1a510:	18fb      	adds	r3, r7, r3
   1a512:	2201      	movs	r2, #1
   1a514:	701a      	strb	r2, [r3, #0]
					if (ucharHigh_Flag==1)
   1a516:	2323      	movs	r3, #35	; 0x23
   1a518:	18fb      	adds	r3, r7, r3
   1a51a:	781b      	ldrb	r3, [r3, #0]
   1a51c:	b2db      	uxtb	r3, r3
   1a51e:	2b01      	cmp	r3, #1
   1a520:	d103      	bne.n	1a52a <PR2_ISR+0x162>
					{
						ucharHigh_To_Low_Flag=1;
   1a522:	2321      	movs	r3, #33	; 0x21
   1a524:	18fb      	adds	r3, r7, r3
   1a526:	2201      	movs	r2, #1
   1a528:	701a      	strb	r2, [r3, #0]
					}
				}
				if (ucharHigh_To_Low_Flag==1)
   1a52a:	2321      	movs	r3, #33	; 0x21
   1a52c:	18fb      	adds	r3, r7, r3
   1a52e:	781b      	ldrb	r3, [r3, #0]
   1a530:	b2db      	uxtb	r3, r3
   1a532:	2b01      	cmp	r3, #1
   1a534:	d10c      	bne.n	1a550 <PR2_ISR+0x188>
				{
					// LCD takes data from structThreePhase_state, which should have latest sequence data.
					structThreePhase_state.u8t_phase_sequence_flag = THREEPHASE_OK;
   1a536:	4b27      	ldr	r3, [pc, #156]	; (1a5d4 <PR2_ISR+0x20c>)
   1a538:	2202      	movs	r2, #2
   1a53a:	701a      	strb	r2, [r3, #0]
					ucharPhase_Seq_Err_Flag=2;//0=undefined, 1=error, 2=ok
   1a53c:	4b26      	ldr	r3, [pc, #152]	; (1a5d8 <PR2_ISR+0x210>)
   1a53e:	2202      	movs	r2, #2
   1a540:	701a      	strb	r2, [r3, #0]
					ucharPhase_Seq_Err_Counter=0;
   1a542:	4b26      	ldr	r3, [pc, #152]	; (1a5dc <PR2_ISR+0x214>)
   1a544:	2200      	movs	r2, #0
   1a546:	701a      	strb	r2, [r3, #0]
					ucharPhase_Seq_Check_Flag=0;
   1a548:	4b18      	ldr	r3, [pc, #96]	; (1a5ac <PR2_ISR+0x1e4>)
   1a54a:	2200      	movs	r2, #0
   1a54c:	701a      	strb	r2, [r3, #0]
					break;
   1a54e:	e012      	b.n	1a576 <PR2_ISR+0x1ae>
				}
				if ((port_pin_get_input_level(PR2_PIN)==LOW))
   1a550:	202b      	movs	r0, #43	; 0x2b
   1a552:	4b1d      	ldr	r3, [pc, #116]	; (1a5c8 <PR2_ISR+0x200>)
   1a554:	4798      	blx	r3
   1a556:	0003      	movs	r3, r0
   1a558:	001a      	movs	r2, r3
   1a55a:	2301      	movs	r3, #1
   1a55c:	4053      	eors	r3, r2
   1a55e:	b2db      	uxtb	r3, r3
   1a560:	2b00      	cmp	r3, #0
   1a562:	d107      	bne.n	1a574 <PR2_ISR+0x1ac>
			for (unsigned int uintLoop=0;uintLoop<120;uintLoop++)
   1a564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1a566:	3301      	adds	r3, #1
   1a568:	627b      	str	r3, [r7, #36]	; 0x24
   1a56a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1a56c:	2b77      	cmp	r3, #119	; 0x77
   1a56e:	d800      	bhi.n	1a572 <PR2_ISR+0x1aa>
   1a570:	e775      	b.n	1a45e <PR2_ISR+0x96>
   1a572:	e000      	b.n	1a576 <PR2_ISR+0x1ae>
				{
					break;
   1a574:	46c0      	nop			; (mov r8, r8)
				}
			}
		}
		if (++ucharPhase_Seq_Err_Counter>2)
   1a576:	4b19      	ldr	r3, [pc, #100]	; (1a5dc <PR2_ISR+0x214>)
   1a578:	781b      	ldrb	r3, [r3, #0]
   1a57a:	b2db      	uxtb	r3, r3
   1a57c:	3301      	adds	r3, #1
   1a57e:	b2db      	uxtb	r3, r3
   1a580:	4a16      	ldr	r2, [pc, #88]	; (1a5dc <PR2_ISR+0x214>)
   1a582:	1c19      	adds	r1, r3, #0
   1a584:	7011      	strb	r1, [r2, #0]
   1a586:	2b02      	cmp	r3, #2
   1a588:	d90b      	bls.n	1a5a2 <PR2_ISR+0x1da>
		{
			ucharPhase_Seq_Err_Counter=0;
   1a58a:	4b14      	ldr	r3, [pc, #80]	; (1a5dc <PR2_ISR+0x214>)
   1a58c:	2200      	movs	r2, #0
   1a58e:	701a      	strb	r2, [r3, #0]
			structThreePhase_state.u8t_phase_sequence_flag = THREEPHASE_ERROR;
   1a590:	4b10      	ldr	r3, [pc, #64]	; (1a5d4 <PR2_ISR+0x20c>)
   1a592:	2201      	movs	r2, #1
   1a594:	701a      	strb	r2, [r3, #0]
			ucharPhase_Seq_Err_Flag=1;//0=undefined, 1=error, 2=ok
   1a596:	4b10      	ldr	r3, [pc, #64]	; (1a5d8 <PR2_ISR+0x210>)
   1a598:	2201      	movs	r2, #1
   1a59a:	701a      	strb	r2, [r3, #0]
			ucharPhase_Seq_Check_Flag=0;
   1a59c:	4b03      	ldr	r3, [pc, #12]	; (1a5ac <PR2_ISR+0x1e4>)
   1a59e:	2200      	movs	r2, #0
   1a5a0:	701a      	strb	r2, [r3, #0]
		}
	}
}
   1a5a2:	46c0      	nop			; (mov r8, r8)
   1a5a4:	46bd      	mov	sp, r7
   1a5a6:	b00b      	add	sp, #44	; 0x2c
   1a5a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1a5aa:	46c0      	nop			; (mov r8, r8)
   1a5ac:	2000000c 	.word	0x2000000c
   1a5b0:	20000244 	.word	0x20000244
   1a5b4:	0002454d 	.word	0x0002454d
   1a5b8:	00001b57 	.word	0x00001b57
   1a5bc:	000264d5 	.word	0x000264d5
   1a5c0:	00001b58 	.word	0x00001b58
   1a5c4:	20000001 	.word	0x20000001
   1a5c8:	00019549 	.word	0x00019549
   1a5cc:	006acfbf 	.word	0x006acfbf
   1a5d0:	006acfc0 	.word	0x006acfc0
   1a5d4:	20000748 	.word	0x20000748
   1a5d8:	20000240 	.word	0x20000240
   1a5dc:	20000241 	.word	0x20000241

0001a5e0 <vTask_10ms_Timer>:

static void vTask_10ms_Timer(void *params)
{
   1a5e0:	b580      	push	{r7, lr}
   1a5e2:	b084      	sub	sp, #16
   1a5e4:	af00      	add	r7, sp, #0
   1a5e6:	6078      	str	r0, [r7, #4]
	TickType_t xLastExecutionGsm_Send_Time;
	xLastExecutionGsm_Send_Time = xTaskGetTickCount();
   1a5e8:	4b12      	ldr	r3, [pc, #72]	; (1a634 <vTask_10ms_Timer+0x54>)
   1a5ea:	4798      	blx	r3
   1a5ec:	0003      	movs	r3, r0
   1a5ee:	60fb      	str	r3, [r7, #12]
	//--------------------------------
	for( ;; )
	{
		vTaskDelayUntil(&xLastExecutionGsm_Send_Time, (10/portTICK_PERIOD_MS));
   1a5f0:	230c      	movs	r3, #12
   1a5f2:	18fb      	adds	r3, r7, r3
   1a5f4:	210a      	movs	r1, #10
   1a5f6:	0018      	movs	r0, r3
   1a5f8:	4b0f      	ldr	r3, [pc, #60]	; (1a638 <vTask_10ms_Timer+0x58>)
   1a5fa:	4798      	blx	r3
		if(ucharPhase_Seq_Check_Flag==1)
   1a5fc:	4b0f      	ldr	r3, [pc, #60]	; (1a63c <vTask_10ms_Timer+0x5c>)
   1a5fe:	781b      	ldrb	r3, [r3, #0]
   1a600:	b2db      	uxtb	r3, r3
   1a602:	2b01      	cmp	r3, #1
   1a604:	d1f4      	bne.n	1a5f0 <vTask_10ms_Timer+0x10>
		{
			if(++ucharPhase_1_Timer_Counter>=20)
   1a606:	4b0e      	ldr	r3, [pc, #56]	; (1a640 <vTask_10ms_Timer+0x60>)
   1a608:	781b      	ldrb	r3, [r3, #0]
   1a60a:	b2db      	uxtb	r3, r3
   1a60c:	3301      	adds	r3, #1
   1a60e:	b2db      	uxtb	r3, r3
   1a610:	4a0b      	ldr	r2, [pc, #44]	; (1a640 <vTask_10ms_Timer+0x60>)
   1a612:	1c19      	adds	r1, r3, #0
   1a614:	7011      	strb	r1, [r2, #0]
   1a616:	2b13      	cmp	r3, #19
   1a618:	d9ea      	bls.n	1a5f0 <vTask_10ms_Timer+0x10>
			{
				ucharPhase_1_Timer_Counter=0;
   1a61a:	4b09      	ldr	r3, [pc, #36]	; (1a640 <vTask_10ms_Timer+0x60>)
   1a61c:	2200      	movs	r2, #0
   1a61e:	701a      	strb	r2, [r3, #0]
				structThreePhase_state.u8t_phase_sequence_flag = THREEPHASE_ERROR;
   1a620:	4b08      	ldr	r3, [pc, #32]	; (1a644 <vTask_10ms_Timer+0x64>)
   1a622:	2201      	movs	r2, #1
   1a624:	701a      	strb	r2, [r3, #0]
				ucharPhase_Seq_Err_Flag=1;//0=undefined, 1=error, 2=ok
   1a626:	4b08      	ldr	r3, [pc, #32]	; (1a648 <vTask_10ms_Timer+0x68>)
   1a628:	2201      	movs	r2, #1
   1a62a:	701a      	strb	r2, [r3, #0]
				ucharPhase_Seq_Check_Flag=0;
   1a62c:	4b03      	ldr	r3, [pc, #12]	; (1a63c <vTask_10ms_Timer+0x5c>)
   1a62e:	2200      	movs	r2, #0
   1a630:	701a      	strb	r2, [r3, #0]
		vTaskDelayUntil(&xLastExecutionGsm_Send_Time, (10/portTICK_PERIOD_MS));
   1a632:	e7dd      	b.n	1a5f0 <vTask_10ms_Timer+0x10>
   1a634:	000200dd 	.word	0x000200dd
   1a638:	0001fcb1 	.word	0x0001fcb1
   1a63c:	2000000c 	.word	0x2000000c
   1a640:	20000244 	.word	0x20000244
   1a644:	20000748 	.word	0x20000748
   1a648:	20000240 	.word	0x20000240

0001a64c <vTask_100ms_Timer>:
		}
	}
}

static void vTask_100ms_Timer(void *params)
{
   1a64c:	b580      	push	{r7, lr}
   1a64e:	b084      	sub	sp, #16
   1a650:	af00      	add	r7, sp, #0
   1a652:	6078      	str	r0, [r7, #4]
	TickType_t xLastExecutionGsm_Send_Time;
	xLastExecutionGsm_Send_Time = xTaskGetTickCount();
   1a654:	4b17      	ldr	r3, [pc, #92]	; (1a6b4 <vTask_100ms_Timer+0x68>)
   1a656:	4798      	blx	r3
   1a658:	0003      	movs	r3, r0
   1a65a:	60fb      	str	r3, [r7, #12]
	//--------------------------------
	for( ;; )
	{
		vTaskDelayUntil(&xLastExecutionGsm_Send_Time, (100/portTICK_PERIOD_MS));
   1a65c:	230c      	movs	r3, #12
   1a65e:	18fb      	adds	r3, r7, r3
   1a660:	2164      	movs	r1, #100	; 0x64
   1a662:	0018      	movs	r0, r3
   1a664:	4b14      	ldr	r3, [pc, #80]	; (1a6b8 <vTask_100ms_Timer+0x6c>)
   1a666:	4798      	blx	r3
		
		////////
		//Voltaqe Detect Timer Counter, Reset every 500ms to 0, which triggers the New Voltage Reading Acquisition from ADC.
		if(ucharVoltage_Detect_Timer_Counter++>4)
   1a668:	4b14      	ldr	r3, [pc, #80]	; (1a6bc <vTask_100ms_Timer+0x70>)
   1a66a:	781b      	ldrb	r3, [r3, #0]
   1a66c:	b2db      	uxtb	r3, r3
   1a66e:	1c5a      	adds	r2, r3, #1
   1a670:	b2d1      	uxtb	r1, r2
   1a672:	4a12      	ldr	r2, [pc, #72]	; (1a6bc <vTask_100ms_Timer+0x70>)
   1a674:	7011      	strb	r1, [r2, #0]
   1a676:	2b04      	cmp	r3, #4
   1a678:	d905      	bls.n	1a686 <vTask_100ms_Timer+0x3a>
		{
			ucharVoltage_Detect_Timer_Counter=0;
   1a67a:	4b10      	ldr	r3, [pc, #64]	; (1a6bc <vTask_100ms_Timer+0x70>)
   1a67c:	2200      	movs	r2, #0
   1a67e:	701a      	strb	r2, [r3, #0]
			//Add Flag to enable detection of current, as the Voltage Detect Timer Counter won't be 0, as voltage reading takes 100ms Time.
			ucharCurrent_Detect_Flag=1;
   1a680:	4b0f      	ldr	r3, [pc, #60]	; (1a6c0 <vTask_100ms_Timer+0x74>)
   1a682:	2201      	movs	r2, #1
   1a684:	701a      	strb	r2, [r3, #0]
			
		}
		/////////
		if (ucharPhase_Seq_Timer_Counter++>4)
   1a686:	4b0f      	ldr	r3, [pc, #60]	; (1a6c4 <vTask_100ms_Timer+0x78>)
   1a688:	781b      	ldrb	r3, [r3, #0]
   1a68a:	b2db      	uxtb	r3, r3
   1a68c:	1c5a      	adds	r2, r3, #1
   1a68e:	b2d1      	uxtb	r1, r2
   1a690:	4a0c      	ldr	r2, [pc, #48]	; (1a6c4 <vTask_100ms_Timer+0x78>)
   1a692:	7011      	strb	r1, [r2, #0]
   1a694:	2b04      	cmp	r3, #4
   1a696:	d9e1      	bls.n	1a65c <vTask_100ms_Timer+0x10>
		{
			ucharPhase_Seq_Timer_Counter=0;
   1a698:	4b0a      	ldr	r3, [pc, #40]	; (1a6c4 <vTask_100ms_Timer+0x78>)
   1a69a:	2200      	movs	r2, #0
   1a69c:	701a      	strb	r2, [r3, #0]
			ucharPhase_Seq_Check_Flag=1;//0=not check, 1=Check
   1a69e:	4b0a      	ldr	r3, [pc, #40]	; (1a6c8 <vTask_100ms_Timer+0x7c>)
   1a6a0:	2201      	movs	r2, #1
   1a6a2:	701a      	strb	r2, [r3, #0]
			ucharPhase_1_Timer_Counter=0;
   1a6a4:	4b09      	ldr	r3, [pc, #36]	; (1a6cc <vTask_100ms_Timer+0x80>)
   1a6a6:	2200      	movs	r2, #0
   1a6a8:	701a      	strb	r2, [r3, #0]
			extint_chan_clear_detected(11);
   1a6aa:	200b      	movs	r0, #11
   1a6ac:	4b08      	ldr	r3, [pc, #32]	; (1a6d0 <vTask_100ms_Timer+0x84>)
   1a6ae:	4798      	blx	r3
		vTaskDelayUntil(&xLastExecutionGsm_Send_Time, (100/portTICK_PERIOD_MS));
   1a6b0:	e7d4      	b.n	1a65c <vTask_100ms_Timer+0x10>
   1a6b2:	46c0      	nop			; (mov r8, r8)
   1a6b4:	000200dd 	.word	0x000200dd
   1a6b8:	0001fcb1 	.word	0x0001fcb1
   1a6bc:	2000000d 	.word	0x2000000d
   1a6c0:	20000243 	.word	0x20000243
   1a6c4:	20000242 	.word	0x20000242
   1a6c8:	2000000c 	.word	0x2000000c
   1a6cc:	20000244 	.word	0x20000244
   1a6d0:	0001962d 	.word	0x0001962d

0001a6d4 <should_Detect_New_Voltage>:
		}
	}
}

//Function to check if new Voltage reading should be acquired from the ADC, by checking the timer Variable for reading Voltage with 0.
bool should_Detect_New_Voltage(void) {
   1a6d4:	b580      	push	{r7, lr}
   1a6d6:	af00      	add	r7, sp, #0
	return (ucharVoltage_Detect_Timer_Counter == 0);
   1a6d8:	4b04      	ldr	r3, [pc, #16]	; (1a6ec <should_Detect_New_Voltage+0x18>)
   1a6da:	781b      	ldrb	r3, [r3, #0]
   1a6dc:	b2db      	uxtb	r3, r3
   1a6de:	425a      	negs	r2, r3
   1a6e0:	4153      	adcs	r3, r2
   1a6e2:	b2db      	uxtb	r3, r3
}
   1a6e4:	0018      	movs	r0, r3
   1a6e6:	46bd      	mov	sp, r7
   1a6e8:	bd80      	pop	{r7, pc}
   1a6ea:	46c0      	nop			; (mov r8, r8)
   1a6ec:	2000000d 	.word	0x2000000d

0001a6f0 <detect_battery_voltage_and_percentage>:

void detect_battery_voltage_and_percentage(void)
{
   1a6f0:	b590      	push	{r4, r7, lr}
   1a6f2:	b083      	sub	sp, #12
   1a6f4:	af00      	add	r7, sp, #0
	if(xSemaphoreTake(xADC_Semaphore,portMAX_DELAY)== pdTRUE)
   1a6f6:	4b25      	ldr	r3, [pc, #148]	; (1a78c <detect_battery_voltage_and_percentage+0x9c>)
   1a6f8:	681a      	ldr	r2, [r3, #0]
   1a6fa:	2301      	movs	r3, #1
   1a6fc:	425b      	negs	r3, r3
   1a6fe:	0019      	movs	r1, r3
   1a700:	0010      	movs	r0, r2
   1a702:	4b23      	ldr	r3, [pc, #140]	; (1a790 <detect_battery_voltage_and_percentage+0xa0>)
   1a704:	4798      	blx	r3
   1a706:	0003      	movs	r3, r0
   1a708:	2b01      	cmp	r3, #1
   1a70a:	d13b      	bne.n	1a784 <detect_battery_voltage_and_percentage+0x94>
	{
		uint32_t bat_v = Read_ADC0(ADC_POSITIVE_INPUT_PIN7,200);
   1a70c:	21c8      	movs	r1, #200	; 0xc8
   1a70e:	2007      	movs	r0, #7
   1a710:	4b20      	ldr	r3, [pc, #128]	; (1a794 <detect_battery_voltage_and_percentage+0xa4>)
   1a712:	4798      	blx	r3
   1a714:	0003      	movs	r3, r0
   1a716:	603b      	str	r3, [r7, #0]
		Analog_Parameter_Struct.Battery_Voltage = (bat_v * 1457)/1000;
   1a718:	683b      	ldr	r3, [r7, #0]
   1a71a:	4a1f      	ldr	r2, [pc, #124]	; (1a798 <detect_battery_voltage_and_percentage+0xa8>)
   1a71c:	435a      	muls	r2, r3
   1a71e:	0010      	movs	r0, r2
   1a720:	4b1e      	ldr	r3, [pc, #120]	; (1a79c <detect_battery_voltage_and_percentage+0xac>)
   1a722:	22fa      	movs	r2, #250	; 0xfa
   1a724:	0091      	lsls	r1, r2, #2
   1a726:	4798      	blx	r3
   1a728:	0003      	movs	r3, r0
   1a72a:	001a      	movs	r2, r3
   1a72c:	4b1c      	ldr	r3, [pc, #112]	; (1a7a0 <detect_battery_voltage_and_percentage+0xb0>)
   1a72e:	619a      	str	r2, [r3, #24]
		uint8_t bat_per = 0;
   1a730:	1dfb      	adds	r3, r7, #7
   1a732:	2200      	movs	r2, #0
   1a734:	701a      	strb	r2, [r3, #0]
		
		if (Analog_Parameter_Struct.Battery_Voltage <= 3300)
   1a736:	4b1a      	ldr	r3, [pc, #104]	; (1a7a0 <detect_battery_voltage_and_percentage+0xb0>)
   1a738:	699b      	ldr	r3, [r3, #24]
   1a73a:	4a1a      	ldr	r2, [pc, #104]	; (1a7a4 <detect_battery_voltage_and_percentage+0xb4>)
   1a73c:	4293      	cmp	r3, r2
   1a73e:	d803      	bhi.n	1a748 <detect_battery_voltage_and_percentage+0x58>
		{
			bat_per = 0;
   1a740:	1dfb      	adds	r3, r7, #7
   1a742:	2200      	movs	r2, #0
   1a744:	701a      	strb	r2, [r3, #0]
   1a746:	e012      	b.n	1a76e <detect_battery_voltage_and_percentage+0x7e>
		}
		else
		{
			//bat_per = ((((float)Analog_Parameter_Struct.Battery_Voltage/1000)-3.3)*100)/0.9;
			bat_per = (Analog_Parameter_Struct.Battery_Voltage-3300)/9;
   1a748:	4b15      	ldr	r3, [pc, #84]	; (1a7a0 <detect_battery_voltage_and_percentage+0xb0>)
   1a74a:	699b      	ldr	r3, [r3, #24]
   1a74c:	4a16      	ldr	r2, [pc, #88]	; (1a7a8 <detect_battery_voltage_and_percentage+0xb8>)
   1a74e:	189a      	adds	r2, r3, r2
   1a750:	4b12      	ldr	r3, [pc, #72]	; (1a79c <detect_battery_voltage_and_percentage+0xac>)
   1a752:	2109      	movs	r1, #9
   1a754:	0010      	movs	r0, r2
   1a756:	4798      	blx	r3
   1a758:	0003      	movs	r3, r0
   1a75a:	001a      	movs	r2, r3
   1a75c:	1dfb      	adds	r3, r7, #7
   1a75e:	701a      	strb	r2, [r3, #0]
			if (bat_per>100) bat_per=100;
   1a760:	1dfb      	adds	r3, r7, #7
   1a762:	781b      	ldrb	r3, [r3, #0]
   1a764:	2b64      	cmp	r3, #100	; 0x64
   1a766:	d902      	bls.n	1a76e <detect_battery_voltage_and_percentage+0x7e>
   1a768:	1dfb      	adds	r3, r7, #7
   1a76a:	2264      	movs	r2, #100	; 0x64
   1a76c:	701a      	strb	r2, [r3, #0]
		}
		
		Analog_Parameter_Struct.Battery_percentage = bat_per;
   1a76e:	4b0c      	ldr	r3, [pc, #48]	; (1a7a0 <detect_battery_voltage_and_percentage+0xb0>)
   1a770:	1dfa      	adds	r2, r7, #7
   1a772:	7812      	ldrb	r2, [r2, #0]
   1a774:	771a      	strb	r2, [r3, #28]
		
		xSemaphoreGive(xADC_Semaphore);
   1a776:	4b05      	ldr	r3, [pc, #20]	; (1a78c <detect_battery_voltage_and_percentage+0x9c>)
   1a778:	6818      	ldr	r0, [r3, #0]
   1a77a:	2300      	movs	r3, #0
   1a77c:	2200      	movs	r2, #0
   1a77e:	2100      	movs	r1, #0
   1a780:	4c0a      	ldr	r4, [pc, #40]	; (1a7ac <detect_battery_voltage_and_percentage+0xbc>)
   1a782:	47a0      	blx	r4
	}
}
   1a784:	46c0      	nop			; (mov r8, r8)
   1a786:	46bd      	mov	sp, r7
   1a788:	b003      	add	sp, #12
   1a78a:	bd90      	pop	{r4, r7, pc}
   1a78c:	20000230 	.word	0x20000230
   1a790:	0001f471 	.word	0x0001f471
   1a794:	00019f65 	.word	0x00019f65
   1a798:	000005b1 	.word	0x000005b1
   1a79c:	0002616d 	.word	0x0002616d
   1a7a0:	200006e8 	.word	0x200006e8
   1a7a4:	00000ce4 	.word	0x00000ce4
   1a7a8:	fffff31c 	.word	0xfffff31c
   1a7ac:	0001efd1 	.word	0x0001efd1

0001a7b0 <initPhaseRMStruct>:

void initPhaseRMStruct(struct rmsVoltage *phaseRMSStruct)
{
   1a7b0:	b580      	push	{r7, lr}
   1a7b2:	b084      	sub	sp, #16
   1a7b4:	af00      	add	r7, sp, #0
   1a7b6:	6078      	str	r0, [r7, #4]
	phaseRMSStruct->hasZeroReading = true;
   1a7b8:	687b      	ldr	r3, [r7, #4]
   1a7ba:	2201      	movs	r2, #1
   1a7bc:	735a      	strb	r2, [r3, #13]
	phaseRMSStruct->index=0;
   1a7be:	687b      	ldr	r3, [r7, #4]
   1a7c0:	2200      	movs	r2, #0
   1a7c2:	731a      	strb	r2, [r3, #12]
	phaseRMSStruct->rmsVoltage=0;
   1a7c4:	687b      	ldr	r3, [r7, #4]
   1a7c6:	2200      	movs	r2, #0
   1a7c8:	815a      	strh	r2, [r3, #10]
	for (uint8_t cnt =0;cnt< NO_RMS_VOLTAGE_READINGS;cnt++)
   1a7ca:	230f      	movs	r3, #15
   1a7cc:	18fb      	adds	r3, r7, r3
   1a7ce:	2200      	movs	r2, #0
   1a7d0:	701a      	strb	r2, [r3, #0]
   1a7d2:	e00d      	b.n	1a7f0 <initPhaseRMStruct+0x40>
	{
		phaseRMSStruct->voltRange[cnt]=0;
   1a7d4:	230f      	movs	r3, #15
   1a7d6:	18fb      	adds	r3, r7, r3
   1a7d8:	781a      	ldrb	r2, [r3, #0]
   1a7da:	687b      	ldr	r3, [r7, #4]
   1a7dc:	0052      	lsls	r2, r2, #1
   1a7de:	2100      	movs	r1, #0
   1a7e0:	52d1      	strh	r1, [r2, r3]
	for (uint8_t cnt =0;cnt< NO_RMS_VOLTAGE_READINGS;cnt++)
   1a7e2:	230f      	movs	r3, #15
   1a7e4:	18fb      	adds	r3, r7, r3
   1a7e6:	781a      	ldrb	r2, [r3, #0]
   1a7e8:	230f      	movs	r3, #15
   1a7ea:	18fb      	adds	r3, r7, r3
   1a7ec:	3201      	adds	r2, #1
   1a7ee:	701a      	strb	r2, [r3, #0]
   1a7f0:	230f      	movs	r3, #15
   1a7f2:	18fb      	adds	r3, r7, r3
   1a7f4:	781b      	ldrb	r3, [r3, #0]
   1a7f6:	2b04      	cmp	r3, #4
   1a7f8:	d9ec      	bls.n	1a7d4 <initPhaseRMStruct+0x24>
	}
}
   1a7fa:	46c0      	nop			; (mov r8, r8)
   1a7fc:	46bd      	mov	sp, r7
   1a7fe:	b004      	add	sp, #16
   1a800:	bd80      	pop	{r7, pc}
	...

0001a804 <updateRMSValues>:

void updateRMSValues(struct rmsVoltage *phaseRMSStruct)
{
   1a804:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a806:	b089      	sub	sp, #36	; 0x24
   1a808:	af00      	add	r7, sp, #0
   1a80a:	6078      	str	r0, [r7, #4]
	uint8_t cnt;
	uint32_t result=0;
   1a80c:	2300      	movs	r3, #0
   1a80e:	61bb      	str	r3, [r7, #24]
	double mean = 0.0;
   1a810:	2300      	movs	r3, #0
   1a812:	2400      	movs	r4, #0
   1a814:	613b      	str	r3, [r7, #16]
   1a816:	617c      	str	r4, [r7, #20]
	double root = 0.0;
   1a818:	2300      	movs	r3, #0
   1a81a:	2400      	movs	r4, #0
   1a81c:	60bb      	str	r3, [r7, #8]
   1a81e:	60fc      	str	r4, [r7, #12]
	phaseRMSStruct->hasZeroReading=false;
   1a820:	687b      	ldr	r3, [r7, #4]
   1a822:	2200      	movs	r2, #0
   1a824:	735a      	strb	r2, [r3, #13]
	for(cnt=0;cnt<NO_RMS_VOLTAGE_READINGS;cnt++)
   1a826:	231f      	movs	r3, #31
   1a828:	18fb      	adds	r3, r7, r3
   1a82a:	2200      	movs	r2, #0
   1a82c:	701a      	strb	r2, [r3, #0]
   1a82e:	e036      	b.n	1a89e <updateRMSValues+0x9a>
	{
		if(phaseRMSStruct->voltRange[cnt]==0)
   1a830:	231f      	movs	r3, #31
   1a832:	18fb      	adds	r3, r7, r3
   1a834:	781a      	ldrb	r2, [r3, #0]
   1a836:	687b      	ldr	r3, [r7, #4]
   1a838:	0052      	lsls	r2, r2, #1
   1a83a:	5ad3      	ldrh	r3, [r2, r3]
   1a83c:	2b00      	cmp	r3, #0
   1a83e:	d102      	bne.n	1a846 <updateRMSValues+0x42>
		{
			phaseRMSStruct->hasZeroReading=true;
   1a840:	687b      	ldr	r3, [r7, #4]
   1a842:	2201      	movs	r2, #1
   1a844:	735a      	strb	r2, [r3, #13]
		}
		result= result + pow(phaseRMSStruct->voltRange[cnt],2);
   1a846:	4b31      	ldr	r3, [pc, #196]	; (1a90c <updateRMSValues+0x108>)
   1a848:	69b8      	ldr	r0, [r7, #24]
   1a84a:	4798      	blx	r3
   1a84c:	0005      	movs	r5, r0
   1a84e:	000e      	movs	r6, r1
   1a850:	231f      	movs	r3, #31
   1a852:	18fb      	adds	r3, r7, r3
   1a854:	781a      	ldrb	r2, [r3, #0]
   1a856:	687b      	ldr	r3, [r7, #4]
   1a858:	0052      	lsls	r2, r2, #1
   1a85a:	5ad2      	ldrh	r2, [r2, r3]
   1a85c:	4b2b      	ldr	r3, [pc, #172]	; (1a90c <updateRMSValues+0x108>)
   1a85e:	0010      	movs	r0, r2
   1a860:	4798      	blx	r3
   1a862:	2300      	movs	r3, #0
   1a864:	2480      	movs	r4, #128	; 0x80
   1a866:	05e4      	lsls	r4, r4, #23
   1a868:	001a      	movs	r2, r3
   1a86a:	0023      	movs	r3, r4
   1a86c:	4c28      	ldr	r4, [pc, #160]	; (1a910 <updateRMSValues+0x10c>)
   1a86e:	47a0      	blx	r4
   1a870:	0002      	movs	r2, r0
   1a872:	000b      	movs	r3, r1
   1a874:	4c27      	ldr	r4, [pc, #156]	; (1a914 <updateRMSValues+0x110>)
   1a876:	0028      	movs	r0, r5
   1a878:	0031      	movs	r1, r6
   1a87a:	47a0      	blx	r4
   1a87c:	0003      	movs	r3, r0
   1a87e:	000c      	movs	r4, r1
   1a880:	0019      	movs	r1, r3
   1a882:	0022      	movs	r2, r4
   1a884:	4b24      	ldr	r3, [pc, #144]	; (1a918 <updateRMSValues+0x114>)
   1a886:	0008      	movs	r0, r1
   1a888:	0011      	movs	r1, r2
   1a88a:	4798      	blx	r3
   1a88c:	0003      	movs	r3, r0
   1a88e:	61bb      	str	r3, [r7, #24]
	for(cnt=0;cnt<NO_RMS_VOLTAGE_READINGS;cnt++)
   1a890:	231f      	movs	r3, #31
   1a892:	18fb      	adds	r3, r7, r3
   1a894:	781a      	ldrb	r2, [r3, #0]
   1a896:	231f      	movs	r3, #31
   1a898:	18fb      	adds	r3, r7, r3
   1a89a:	3201      	adds	r2, #1
   1a89c:	701a      	strb	r2, [r3, #0]
   1a89e:	231f      	movs	r3, #31
   1a8a0:	18fb      	adds	r3, r7, r3
   1a8a2:	781b      	ldrb	r3, [r3, #0]
   1a8a4:	2b04      	cmp	r3, #4
   1a8a6:	d9c3      	bls.n	1a830 <updateRMSValues+0x2c>
	}
	mean= result / (float)NO_RMS_VOLTAGE_READINGS;
   1a8a8:	4b1c      	ldr	r3, [pc, #112]	; (1a91c <updateRMSValues+0x118>)
   1a8aa:	69b8      	ldr	r0, [r7, #24]
   1a8ac:	4798      	blx	r3
   1a8ae:	1c02      	adds	r2, r0, #0
   1a8b0:	4b1b      	ldr	r3, [pc, #108]	; (1a920 <updateRMSValues+0x11c>)
   1a8b2:	491c      	ldr	r1, [pc, #112]	; (1a924 <updateRMSValues+0x120>)
   1a8b4:	1c10      	adds	r0, r2, #0
   1a8b6:	4798      	blx	r3
   1a8b8:	1c03      	adds	r3, r0, #0
   1a8ba:	1c1a      	adds	r2, r3, #0
   1a8bc:	4b1a      	ldr	r3, [pc, #104]	; (1a928 <updateRMSValues+0x124>)
   1a8be:	1c10      	adds	r0, r2, #0
   1a8c0:	4798      	blx	r3
   1a8c2:	0003      	movs	r3, r0
   1a8c4:	000c      	movs	r4, r1
   1a8c6:	613b      	str	r3, [r7, #16]
   1a8c8:	617c      	str	r4, [r7, #20]
	root = (uint32_t) (sqrt(mean));
   1a8ca:	693b      	ldr	r3, [r7, #16]
   1a8cc:	697c      	ldr	r4, [r7, #20]
   1a8ce:	0018      	movs	r0, r3
   1a8d0:	0021      	movs	r1, r4
   1a8d2:	4b16      	ldr	r3, [pc, #88]	; (1a92c <updateRMSValues+0x128>)
   1a8d4:	4798      	blx	r3
   1a8d6:	000a      	movs	r2, r1
   1a8d8:	0001      	movs	r1, r0
   1a8da:	4b0f      	ldr	r3, [pc, #60]	; (1a918 <updateRMSValues+0x114>)
   1a8dc:	0008      	movs	r0, r1
   1a8de:	0011      	movs	r1, r2
   1a8e0:	4798      	blx	r3
   1a8e2:	0002      	movs	r2, r0
   1a8e4:	4b09      	ldr	r3, [pc, #36]	; (1a90c <updateRMSValues+0x108>)
   1a8e6:	0010      	movs	r0, r2
   1a8e8:	4798      	blx	r3
   1a8ea:	0003      	movs	r3, r0
   1a8ec:	000c      	movs	r4, r1
   1a8ee:	60bb      	str	r3, [r7, #8]
   1a8f0:	60fc      	str	r4, [r7, #12]
	
	phaseRMSStruct->rmsVoltage = (uint16_t) root;
   1a8f2:	4b09      	ldr	r3, [pc, #36]	; (1a918 <updateRMSValues+0x114>)
   1a8f4:	68b8      	ldr	r0, [r7, #8]
   1a8f6:	68f9      	ldr	r1, [r7, #12]
   1a8f8:	4798      	blx	r3
   1a8fa:	0003      	movs	r3, r0
   1a8fc:	b29a      	uxth	r2, r3
   1a8fe:	687b      	ldr	r3, [r7, #4]
   1a900:	815a      	strh	r2, [r3, #10]
}
   1a902:	46c0      	nop			; (mov r8, r8)
   1a904:	46bd      	mov	sp, r7
   1a906:	b009      	add	sp, #36	; 0x24
   1a908:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1a90a:	46c0      	nop			; (mov r8, r8)
   1a90c:	00028761 	.word	0x00028761
   1a910:	00024ed9 	.word	0x00024ed9
   1a914:	00026c81 	.word	0x00026c81
   1a918:	00026569 	.word	0x00026569
   1a91c:	00026bf5 	.word	0x00026bf5
   1a920:	00026725 	.word	0x00026725
   1a924:	40a00000 	.word	0x40a00000
   1a928:	000287d1 	.word	0x000287d1
   1a92c:	00025231 	.word	0x00025231

0001a930 <filterVoltage>:

uint16_t filterVoltage(enum phaseReading phase,uint16_t voltReading)
{
   1a930:	b590      	push	{r4, r7, lr}
   1a932:	b085      	sub	sp, #20
   1a934:	af00      	add	r7, sp, #0
   1a936:	0002      	movs	r2, r0
   1a938:	1dfb      	adds	r3, r7, #7
   1a93a:	701a      	strb	r2, [r3, #0]
   1a93c:	1d3b      	adds	r3, r7, #4
   1a93e:	1c0a      	adds	r2, r1, #0
   1a940:	801a      	strh	r2, [r3, #0]
	struct rmsVoltage *p1;
	if(phase==PHASE_RY)
   1a942:	1dfb      	adds	r3, r7, #7
   1a944:	781b      	ldrb	r3, [r3, #0]
   1a946:	2b00      	cmp	r3, #0
   1a948:	d102      	bne.n	1a950 <filterVoltage+0x20>
	{
		p1 = &struct_rmsRY;
   1a94a:	4b29      	ldr	r3, [pc, #164]	; (1a9f0 <filterVoltage+0xc0>)
   1a94c:	60fb      	str	r3, [r7, #12]
   1a94e:	e00c      	b.n	1a96a <filterVoltage+0x3a>
	}
	else if(phase==PHASE_YB)
   1a950:	1dfb      	adds	r3, r7, #7
   1a952:	781b      	ldrb	r3, [r3, #0]
   1a954:	2b01      	cmp	r3, #1
   1a956:	d102      	bne.n	1a95e <filterVoltage+0x2e>
	{
		p1 = &struct_rmsYB;
   1a958:	4b26      	ldr	r3, [pc, #152]	; (1a9f4 <filterVoltage+0xc4>)
   1a95a:	60fb      	str	r3, [r7, #12]
   1a95c:	e005      	b.n	1a96a <filterVoltage+0x3a>
	}
	else if(phase==PHASE_BR)
   1a95e:	1dfb      	adds	r3, r7, #7
   1a960:	781b      	ldrb	r3, [r3, #0]
   1a962:	2b02      	cmp	r3, #2
   1a964:	d101      	bne.n	1a96a <filterVoltage+0x3a>
	{
		p1 = &struct_rmsBR;
   1a966:	4b24      	ldr	r3, [pc, #144]	; (1a9f8 <filterVoltage+0xc8>)
   1a968:	60fb      	str	r3, [r7, #12]
	}
	
	p1->voltRange[p1->index%NO_RMS_VOLTAGE_READINGS]=voltReading;
   1a96a:	68fb      	ldr	r3, [r7, #12]
   1a96c:	7b1a      	ldrb	r2, [r3, #12]
   1a96e:	4b23      	ldr	r3, [pc, #140]	; (1a9fc <filterVoltage+0xcc>)
   1a970:	2105      	movs	r1, #5
   1a972:	0010      	movs	r0, r2
   1a974:	4798      	blx	r3
   1a976:	000b      	movs	r3, r1
   1a978:	b2db      	uxtb	r3, r3
   1a97a:	001a      	movs	r2, r3
   1a97c:	68fb      	ldr	r3, [r7, #12]
   1a97e:	0052      	lsls	r2, r2, #1
   1a980:	1d39      	adds	r1, r7, #4
   1a982:	8809      	ldrh	r1, [r1, #0]
   1a984:	52d1      	strh	r1, [r2, r3]
	p1->index = ((p1->index) + 1 )%NO_RMS_VOLTAGE_READINGS;
   1a986:	68fb      	ldr	r3, [r7, #12]
   1a988:	7b1b      	ldrb	r3, [r3, #12]
   1a98a:	1c5a      	adds	r2, r3, #1
   1a98c:	4b1c      	ldr	r3, [pc, #112]	; (1aa00 <filterVoltage+0xd0>)
   1a98e:	2105      	movs	r1, #5
   1a990:	0010      	movs	r0, r2
   1a992:	4798      	blx	r3
   1a994:	000b      	movs	r3, r1
   1a996:	b2da      	uxtb	r2, r3
   1a998:	68fb      	ldr	r3, [r7, #12]
   1a99a:	731a      	strb	r2, [r3, #12]
	
	updateRMSValues(p1);
   1a99c:	68fb      	ldr	r3, [r7, #12]
   1a99e:	0018      	movs	r0, r3
   1a9a0:	4b18      	ldr	r3, [pc, #96]	; (1aa04 <filterVoltage+0xd4>)
   1a9a2:	4798      	blx	r3
	
	//if(voltReading > p1->rmsVoltage)
	{
		if(p1->hasZeroReading)
   1a9a4:	68fb      	ldr	r3, [r7, #12]
   1a9a6:	7b5b      	ldrb	r3, [r3, #13]
   1a9a8:	2b00      	cmp	r3, #0
   1a9aa:	d002      	beq.n	1a9b2 <filterVoltage+0x82>
		{
			return voltReading;
   1a9ac:	1d3b      	adds	r3, r7, #4
   1a9ae:	881b      	ldrh	r3, [r3, #0]
   1a9b0:	e019      	b.n	1a9e6 <filterVoltage+0xb6>
		
		//if ((voltReading - p1->rmsVoltage)>(p1->rmsVoltage * 6/100))
		//{
		//return p1->rmsVoltage;
		//}
		if((p1->rmsVoltage - voltReading)<(p1->rmsVoltage * 40/100))
   1a9b2:	68fb      	ldr	r3, [r7, #12]
   1a9b4:	895b      	ldrh	r3, [r3, #10]
   1a9b6:	001a      	movs	r2, r3
   1a9b8:	1d3b      	adds	r3, r7, #4
   1a9ba:	881b      	ldrh	r3, [r3, #0]
   1a9bc:	1ad4      	subs	r4, r2, r3
   1a9be:	68fb      	ldr	r3, [r7, #12]
   1a9c0:	895b      	ldrh	r3, [r3, #10]
   1a9c2:	001a      	movs	r2, r3
   1a9c4:	0013      	movs	r3, r2
   1a9c6:	009b      	lsls	r3, r3, #2
   1a9c8:	189b      	adds	r3, r3, r2
   1a9ca:	00db      	lsls	r3, r3, #3
   1a9cc:	001a      	movs	r2, r3
   1a9ce:	4b0e      	ldr	r3, [pc, #56]	; (1aa08 <filterVoltage+0xd8>)
   1a9d0:	2164      	movs	r1, #100	; 0x64
   1a9d2:	0010      	movs	r0, r2
   1a9d4:	4798      	blx	r3
   1a9d6:	0003      	movs	r3, r0
   1a9d8:	429c      	cmp	r4, r3
   1a9da:	da02      	bge.n	1a9e2 <filterVoltage+0xb2>
		{
			return p1->rmsVoltage;
   1a9dc:	68fb      	ldr	r3, [r7, #12]
   1a9de:	895b      	ldrh	r3, [r3, #10]
   1a9e0:	e001      	b.n	1a9e6 <filterVoltage+0xb6>
		}
		else
		{
			return voltReading;
   1a9e2:	1d3b      	adds	r3, r7, #4
   1a9e4:	881b      	ldrh	r3, [r3, #0]
		}
	}
	
	return voltReading;
}
   1a9e6:	0018      	movs	r0, r3
   1a9e8:	46bd      	mov	sp, r7
   1a9ea:	b005      	add	sp, #20
   1a9ec:	bd90      	pop	{r4, r7, pc}
   1a9ee:	46c0      	nop			; (mov r8, r8)
   1a9f0:	200007b0 	.word	0x200007b0
   1a9f4:	20000730 	.word	0x20000730
   1a9f8:	200007e0 	.word	0x200007e0
   1a9fc:	00026279 	.word	0x00026279
   1aa00:	0002644d 	.word	0x0002644d
   1aa04:	0001a805 	.word	0x0001a805
   1aa08:	00026281 	.word	0x00026281

0001aa0c <detect_Three_Phase_Voltage>:

//Function to save the 3 phase voltage from ADC in to the structure, ADC values are filtered, and multiplied by factor here.
void detect_Three_Phase_Voltage(void) {
   1aa0c:	b590      	push	{r4, r7, lr}
   1aa0e:	b085      	sub	sp, #20
   1aa10:	af00      	add	r7, sp, #0
	
	
	
	if(xSemaphoreTake(xADC_Semaphore,portMAX_DELAY)== pdTRUE)
   1aa12:	4b49      	ldr	r3, [pc, #292]	; (1ab38 <detect_Three_Phase_Voltage+0x12c>)
   1aa14:	681a      	ldr	r2, [r3, #0]
   1aa16:	2301      	movs	r3, #1
   1aa18:	425b      	negs	r3, r3
   1aa1a:	0019      	movs	r1, r3
   1aa1c:	0010      	movs	r0, r2
   1aa1e:	4b47      	ldr	r3, [pc, #284]	; (1ab3c <detect_Three_Phase_Voltage+0x130>)
   1aa20:	4798      	blx	r3
   1aa22:	0003      	movs	r3, r0
   1aa24:	2b01      	cmp	r3, #1
   1aa26:	d000      	beq.n	1aa2a <detect_Three_Phase_Voltage+0x1e>
   1aa28:	e082      	b.n	1ab30 <detect_Three_Phase_Voltage+0x124>
	{
		//int32_t adcRY = Read_ADC0(ADC_POSITIVE_INPUT_PIN19,2000);
		int32_t adcRY = Read_Voltage_ADC0(ADC_POSITIVE_INPUT_PIN19);
   1aa2a:	2013      	movs	r0, #19
   1aa2c:	4b44      	ldr	r3, [pc, #272]	; (1ab40 <detect_Three_Phase_Voltage+0x134>)
   1aa2e:	4798      	blx	r3
   1aa30:	0003      	movs	r3, r0
   1aa32:	60fb      	str	r3, [r7, #12]
		adcRY = (adcRY-10);
   1aa34:	68fb      	ldr	r3, [r7, #12]
   1aa36:	3b0a      	subs	r3, #10
   1aa38:	60fb      	str	r3, [r7, #12]
		if (adcRY<0)
   1aa3a:	68fb      	ldr	r3, [r7, #12]
   1aa3c:	2b00      	cmp	r3, #0
   1aa3e:	da02      	bge.n	1aa46 <detect_Three_Phase_Voltage+0x3a>
		{
			adcRY = 0;
   1aa40:	2300      	movs	r3, #0
   1aa42:	60fb      	str	r3, [r7, #12]
   1aa44:	e010      	b.n	1aa68 <detect_Three_Phase_Voltage+0x5c>
		}
		else
		{
			adcRY = (((adcRY-10)*660)/1000);
   1aa46:	68fb      	ldr	r3, [r7, #12]
   1aa48:	3b0a      	subs	r3, #10
   1aa4a:	22a5      	movs	r2, #165	; 0xa5
   1aa4c:	0092      	lsls	r2, r2, #2
   1aa4e:	435a      	muls	r2, r3
   1aa50:	0010      	movs	r0, r2
   1aa52:	4b3c      	ldr	r3, [pc, #240]	; (1ab44 <detect_Three_Phase_Voltage+0x138>)
   1aa54:	22fa      	movs	r2, #250	; 0xfa
   1aa56:	0091      	lsls	r1, r2, #2
   1aa58:	4798      	blx	r3
   1aa5a:	0003      	movs	r3, r0
   1aa5c:	60fb      	str	r3, [r7, #12]
			if (adcRY<0)
   1aa5e:	68fb      	ldr	r3, [r7, #12]
   1aa60:	2b00      	cmp	r3, #0
   1aa62:	da01      	bge.n	1aa68 <detect_Three_Phase_Voltage+0x5c>
			{
				adcRY = 0;
   1aa64:	2300      	movs	r3, #0
   1aa66:	60fb      	str	r3, [r7, #12]
			}
		}
		//int32_t adcYB = Read_ADC0(ADC_POSITIVE_INPUT_PIN18,2000);
		int32_t adcYB = Read_Voltage_ADC0(ADC_POSITIVE_INPUT_PIN18);
   1aa68:	2012      	movs	r0, #18
   1aa6a:	4b35      	ldr	r3, [pc, #212]	; (1ab40 <detect_Three_Phase_Voltage+0x134>)
   1aa6c:	4798      	blx	r3
   1aa6e:	0003      	movs	r3, r0
   1aa70:	60bb      	str	r3, [r7, #8]
		adcYB = (adcYB-10);
   1aa72:	68bb      	ldr	r3, [r7, #8]
   1aa74:	3b0a      	subs	r3, #10
   1aa76:	60bb      	str	r3, [r7, #8]
		if (adcYB<0)
   1aa78:	68bb      	ldr	r3, [r7, #8]
   1aa7a:	2b00      	cmp	r3, #0
   1aa7c:	da02      	bge.n	1aa84 <detect_Three_Phase_Voltage+0x78>
		{
			adcYB = 0;
   1aa7e:	2300      	movs	r3, #0
   1aa80:	60bb      	str	r3, [r7, #8]
   1aa82:	e010      	b.n	1aaa6 <detect_Three_Phase_Voltage+0x9a>
		}
		else
		{
			adcYB = (((adcYB-10)*660)/1000);
   1aa84:	68bb      	ldr	r3, [r7, #8]
   1aa86:	3b0a      	subs	r3, #10
   1aa88:	22a5      	movs	r2, #165	; 0xa5
   1aa8a:	0092      	lsls	r2, r2, #2
   1aa8c:	435a      	muls	r2, r3
   1aa8e:	0010      	movs	r0, r2
   1aa90:	4b2c      	ldr	r3, [pc, #176]	; (1ab44 <detect_Three_Phase_Voltage+0x138>)
   1aa92:	22fa      	movs	r2, #250	; 0xfa
   1aa94:	0091      	lsls	r1, r2, #2
   1aa96:	4798      	blx	r3
   1aa98:	0003      	movs	r3, r0
   1aa9a:	60bb      	str	r3, [r7, #8]
			if (adcYB<0)
   1aa9c:	68bb      	ldr	r3, [r7, #8]
   1aa9e:	2b00      	cmp	r3, #0
   1aaa0:	da01      	bge.n	1aaa6 <detect_Three_Phase_Voltage+0x9a>
			{
				adcYB = 0;
   1aaa2:	2300      	movs	r3, #0
   1aaa4:	60bb      	str	r3, [r7, #8]
			}
		}

		//int32_t adcBR =  Read_ADC0(ADC_POSITIVE_INPUT_PIN17,2000);
		int32_t adcBR = Read_Voltage_ADC0(ADC_POSITIVE_INPUT_PIN17);
   1aaa6:	2011      	movs	r0, #17
   1aaa8:	4b25      	ldr	r3, [pc, #148]	; (1ab40 <detect_Three_Phase_Voltage+0x134>)
   1aaaa:	4798      	blx	r3
   1aaac:	0003      	movs	r3, r0
   1aaae:	607b      	str	r3, [r7, #4]
		adcBR = (adcBR-12);
   1aab0:	687b      	ldr	r3, [r7, #4]
   1aab2:	3b0c      	subs	r3, #12
   1aab4:	607b      	str	r3, [r7, #4]
		if (adcBR<0)
   1aab6:	687b      	ldr	r3, [r7, #4]
   1aab8:	2b00      	cmp	r3, #0
   1aaba:	da02      	bge.n	1aac2 <detect_Three_Phase_Voltage+0xb6>
		{
			adcBR = 0;
   1aabc:	2300      	movs	r3, #0
   1aabe:	607b      	str	r3, [r7, #4]
   1aac0:	e00f      	b.n	1aae2 <detect_Three_Phase_Voltage+0xd6>
		}
		else
		{
			adcBR = (((adcBR-12)*670)/1000);
   1aac2:	687b      	ldr	r3, [r7, #4]
   1aac4:	3b0c      	subs	r3, #12
   1aac6:	4a20      	ldr	r2, [pc, #128]	; (1ab48 <detect_Three_Phase_Voltage+0x13c>)
   1aac8:	435a      	muls	r2, r3
   1aaca:	0010      	movs	r0, r2
   1aacc:	4b1d      	ldr	r3, [pc, #116]	; (1ab44 <detect_Three_Phase_Voltage+0x138>)
   1aace:	22fa      	movs	r2, #250	; 0xfa
   1aad0:	0091      	lsls	r1, r2, #2
   1aad2:	4798      	blx	r3
   1aad4:	0003      	movs	r3, r0
   1aad6:	607b      	str	r3, [r7, #4]
			if (adcBR<0)
   1aad8:	687b      	ldr	r3, [r7, #4]
   1aada:	2b00      	cmp	r3, #0
   1aadc:	da01      	bge.n	1aae2 <detect_Three_Phase_Voltage+0xd6>
			{
				adcBR = 0;
   1aade:	2300      	movs	r3, #0
   1aae0:	607b      	str	r3, [r7, #4]
			}
		}
		
		Analog_Parameter_Struct.PhaseRY_Voltage = filterVoltage(PHASE_RY,adcRY);
   1aae2:	68fb      	ldr	r3, [r7, #12]
   1aae4:	b29b      	uxth	r3, r3
   1aae6:	0019      	movs	r1, r3
   1aae8:	2000      	movs	r0, #0
   1aaea:	4b18      	ldr	r3, [pc, #96]	; (1ab4c <detect_Three_Phase_Voltage+0x140>)
   1aaec:	4798      	blx	r3
   1aaee:	0003      	movs	r3, r0
   1aaf0:	001a      	movs	r2, r3
   1aaf2:	4b17      	ldr	r3, [pc, #92]	; (1ab50 <detect_Three_Phase_Voltage+0x144>)
   1aaf4:	601a      	str	r2, [r3, #0]
		Analog_Parameter_Struct.PhaseYB_Voltage = filterVoltage(PHASE_YB,adcYB);
   1aaf6:	68bb      	ldr	r3, [r7, #8]
   1aaf8:	b29b      	uxth	r3, r3
   1aafa:	0019      	movs	r1, r3
   1aafc:	2001      	movs	r0, #1
   1aafe:	4b13      	ldr	r3, [pc, #76]	; (1ab4c <detect_Three_Phase_Voltage+0x140>)
   1ab00:	4798      	blx	r3
   1ab02:	0003      	movs	r3, r0
   1ab04:	001a      	movs	r2, r3
   1ab06:	4b12      	ldr	r3, [pc, #72]	; (1ab50 <detect_Three_Phase_Voltage+0x144>)
   1ab08:	605a      	str	r2, [r3, #4]
		Analog_Parameter_Struct.PhaseBR_Voltage = filterVoltage(PHASE_BR,adcBR);
   1ab0a:	687b      	ldr	r3, [r7, #4]
   1ab0c:	b29b      	uxth	r3, r3
   1ab0e:	0019      	movs	r1, r3
   1ab10:	2002      	movs	r0, #2
   1ab12:	4b0e      	ldr	r3, [pc, #56]	; (1ab4c <detect_Three_Phase_Voltage+0x140>)
   1ab14:	4798      	blx	r3
   1ab16:	0003      	movs	r3, r0
   1ab18:	001a      	movs	r2, r3
   1ab1a:	4b0d      	ldr	r3, [pc, #52]	; (1ab50 <detect_Three_Phase_Voltage+0x144>)
   1ab1c:	609a      	str	r2, [r3, #8]
		
		//Analog_Parameter_Struct.PhaseRY_Voltage = adcRY;
		//Analog_Parameter_Struct.PhaseYB_Voltage = adcYB;
		//Analog_Parameter_Struct.PhaseBR_Voltage = adcBR;
		
		set_Three_Phase_State_From_Voltage();
   1ab1e:	4b0d      	ldr	r3, [pc, #52]	; (1ab54 <detect_Three_Phase_Voltage+0x148>)
   1ab20:	4798      	blx	r3
		xSemaphoreGive(xADC_Semaphore);
   1ab22:	4b05      	ldr	r3, [pc, #20]	; (1ab38 <detect_Three_Phase_Voltage+0x12c>)
   1ab24:	6818      	ldr	r0, [r3, #0]
   1ab26:	2300      	movs	r3, #0
   1ab28:	2200      	movs	r2, #0
   1ab2a:	2100      	movs	r1, #0
   1ab2c:	4c0a      	ldr	r4, [pc, #40]	; (1ab58 <detect_Three_Phase_Voltage+0x14c>)
   1ab2e:	47a0      	blx	r4
	}
}
   1ab30:	46c0      	nop			; (mov r8, r8)
   1ab32:	46bd      	mov	sp, r7
   1ab34:	b005      	add	sp, #20
   1ab36:	bd90      	pop	{r4, r7, pc}
   1ab38:	20000230 	.word	0x20000230
   1ab3c:	0001f471 	.word	0x0001f471
   1ab40:	0001a021 	.word	0x0001a021
   1ab44:	00026281 	.word	0x00026281
   1ab48:	0000029e 	.word	0x0000029e
   1ab4c:	0001a931 	.word	0x0001a931
   1ab50:	200006e8 	.word	0x200006e8
   1ab54:	0001ab5d 	.word	0x0001ab5d
   1ab58:	0001efd1 	.word	0x0001efd1

0001ab5c <set_Three_Phase_State_From_Voltage>:

//Function to set the Three Phase State from acquired voltage
void set_Three_Phase_State_From_Voltage(void) {
   1ab5c:	b580      	push	{r7, lr}
   1ab5e:	b082      	sub	sp, #8
   1ab60:	af00      	add	r7, sp, #0
	
	if(startSequenceOn)
   1ab62:	4b33      	ldr	r3, [pc, #204]	; (1ac30 <set_Three_Phase_State_From_Voltage+0xd4>)
   1ab64:	781b      	ldrb	r3, [r3, #0]
   1ab66:	2b00      	cmp	r3, #0
   1ab68:	d15d      	bne.n	1ac26 <set_Three_Phase_State_From_Voltage+0xca>
	{
		return;
	}
	
	uint8_t temp_phase_state = structThreePhase_state.u8t_phase_ac_state;		//save last AC Phase State, in case AC Phase State is going to change
   1ab6a:	1dfb      	adds	r3, r7, #7
   1ab6c:	4a31      	ldr	r2, [pc, #196]	; (1ac34 <set_Three_Phase_State_From_Voltage+0xd8>)
   1ab6e:	7852      	ldrb	r2, [r2, #1]
   1ab70:	701a      	strb	r2, [r3, #0]
	
	
	if ((Analog_Parameter_Struct.PhaseRY_Voltage < 80) &&
   1ab72:	4b31      	ldr	r3, [pc, #196]	; (1ac38 <set_Three_Phase_State_From_Voltage+0xdc>)
   1ab74:	681b      	ldr	r3, [r3, #0]
   1ab76:	2b4f      	cmp	r3, #79	; 0x4f
   1ab78:	d80b      	bhi.n	1ab92 <set_Three_Phase_State_From_Voltage+0x36>
	(Analog_Parameter_Struct.PhaseYB_Voltage < 80) &&
   1ab7a:	4b2f      	ldr	r3, [pc, #188]	; (1ac38 <set_Three_Phase_State_From_Voltage+0xdc>)
   1ab7c:	685b      	ldr	r3, [r3, #4]
	if ((Analog_Parameter_Struct.PhaseRY_Voltage < 80) &&
   1ab7e:	2b4f      	cmp	r3, #79	; 0x4f
   1ab80:	d807      	bhi.n	1ab92 <set_Three_Phase_State_From_Voltage+0x36>
	(Analog_Parameter_Struct.PhaseBR_Voltage < 80))				// if All phase volt, less than 40
   1ab82:	4b2d      	ldr	r3, [pc, #180]	; (1ac38 <set_Three_Phase_State_From_Voltage+0xdc>)
   1ab84:	689b      	ldr	r3, [r3, #8]
	(Analog_Parameter_Struct.PhaseYB_Voltage < 80) &&
   1ab86:	2b4f      	cmp	r3, #79	; 0x4f
   1ab88:	d803      	bhi.n	1ab92 <set_Three_Phase_State_From_Voltage+0x36>
	{
		structThreePhase_state.u8t_phase_ac_state = AC_OFF; //no phase is present, light is cut off
   1ab8a:	4b2a      	ldr	r3, [pc, #168]	; (1ac34 <set_Three_Phase_State_From_Voltage+0xd8>)
   1ab8c:	2200      	movs	r2, #0
   1ab8e:	705a      	strb	r2, [r3, #1]
   1ab90:	e02d      	b.n	1abee <set_Three_Phase_State_From_Voltage+0x92>
	}
	else if((abs(Analog_Parameter_Struct.PhaseRY_Voltage-Analog_Parameter_Struct.PhaseYB_Voltage)>user_settings_parameter_struct.singlePhasingVoltage) ||
   1ab92:	4b29      	ldr	r3, [pc, #164]	; (1ac38 <set_Three_Phase_State_From_Voltage+0xdc>)
   1ab94:	681a      	ldr	r2, [r3, #0]
   1ab96:	4b28      	ldr	r3, [pc, #160]	; (1ac38 <set_Three_Phase_State_From_Voltage+0xdc>)
   1ab98:	685b      	ldr	r3, [r3, #4]
   1ab9a:	1ad3      	subs	r3, r2, r3
   1ab9c:	17da      	asrs	r2, r3, #31
   1ab9e:	189b      	adds	r3, r3, r2
   1aba0:	4053      	eors	r3, r2
   1aba2:	4a26      	ldr	r2, [pc, #152]	; (1ac3c <set_Three_Phase_State_From_Voltage+0xe0>)
   1aba4:	8c52      	ldrh	r2, [r2, #34]	; 0x22
   1aba6:	b292      	uxth	r2, r2
   1aba8:	4293      	cmp	r3, r2
   1abaa:	dc19      	bgt.n	1abe0 <set_Three_Phase_State_From_Voltage+0x84>
	(abs(Analog_Parameter_Struct.PhaseYB_Voltage-Analog_Parameter_Struct.PhaseBR_Voltage)>user_settings_parameter_struct.singlePhasingVoltage) ||
   1abac:	4b22      	ldr	r3, [pc, #136]	; (1ac38 <set_Three_Phase_State_From_Voltage+0xdc>)
   1abae:	685a      	ldr	r2, [r3, #4]
   1abb0:	4b21      	ldr	r3, [pc, #132]	; (1ac38 <set_Three_Phase_State_From_Voltage+0xdc>)
   1abb2:	689b      	ldr	r3, [r3, #8]
   1abb4:	1ad3      	subs	r3, r2, r3
   1abb6:	17da      	asrs	r2, r3, #31
   1abb8:	189b      	adds	r3, r3, r2
   1abba:	4053      	eors	r3, r2
   1abbc:	4a1f      	ldr	r2, [pc, #124]	; (1ac3c <set_Three_Phase_State_From_Voltage+0xe0>)
   1abbe:	8c52      	ldrh	r2, [r2, #34]	; 0x22
   1abc0:	b292      	uxth	r2, r2
	else if((abs(Analog_Parameter_Struct.PhaseRY_Voltage-Analog_Parameter_Struct.PhaseYB_Voltage)>user_settings_parameter_struct.singlePhasingVoltage) ||
   1abc2:	4293      	cmp	r3, r2
   1abc4:	dc0c      	bgt.n	1abe0 <set_Three_Phase_State_From_Voltage+0x84>
	(abs(Analog_Parameter_Struct.PhaseBR_Voltage-Analog_Parameter_Struct.PhaseRY_Voltage)>user_settings_parameter_struct.singlePhasingVoltage))  // if diff betweeen any 2 phases > 80
   1abc6:	4b1c      	ldr	r3, [pc, #112]	; (1ac38 <set_Three_Phase_State_From_Voltage+0xdc>)
   1abc8:	689a      	ldr	r2, [r3, #8]
   1abca:	4b1b      	ldr	r3, [pc, #108]	; (1ac38 <set_Three_Phase_State_From_Voltage+0xdc>)
   1abcc:	681b      	ldr	r3, [r3, #0]
   1abce:	1ad3      	subs	r3, r2, r3
   1abd0:	17da      	asrs	r2, r3, #31
   1abd2:	189b      	adds	r3, r3, r2
   1abd4:	4053      	eors	r3, r2
   1abd6:	4a19      	ldr	r2, [pc, #100]	; (1ac3c <set_Three_Phase_State_From_Voltage+0xe0>)
   1abd8:	8c52      	ldrh	r2, [r2, #34]	; 0x22
   1abda:	b292      	uxth	r2, r2
	(abs(Analog_Parameter_Struct.PhaseYB_Voltage-Analog_Parameter_Struct.PhaseBR_Voltage)>user_settings_parameter_struct.singlePhasingVoltage) ||
   1abdc:	4293      	cmp	r3, r2
   1abde:	dd03      	ble.n	1abe8 <set_Three_Phase_State_From_Voltage+0x8c>
	{
			//if((Analog_Parameter_Struct.PhaseRY_Voltage>100 && Analog_Parameter_Struct.PhaseYB_Voltage>100) ||
			//(Analog_Parameter_Struct.PhaseYB_Voltage>100 && Analog_Parameter_Struct.PhaseBR_Voltage>100) ||
			//(Analog_Parameter_Struct.PhaseBR_Voltage>100 && Analog_Parameter_Struct.PhaseRY_Voltage>100))
			//{
				structThreePhase_state.u8t_phase_ac_state = AC_2PH;//Single phasing Occured
   1abe0:	4b14      	ldr	r3, [pc, #80]	; (1ac34 <set_Three_Phase_State_From_Voltage+0xd8>)
   1abe2:	2202      	movs	r2, #2
   1abe4:	705a      	strb	r2, [r3, #1]
   1abe6:	e002      	b.n	1abee <set_Three_Phase_State_From_Voltage+0x92>
				//structThreePhase_state.u8t_phase_ac_state = AC_OFF; //no phase is present, light is cut off
			//}
	}
	else  //all Phase are present
	{
		structThreePhase_state.u8t_phase_ac_state = AC_3PH;
   1abe8:	4b12      	ldr	r3, [pc, #72]	; (1ac34 <set_Three_Phase_State_From_Voltage+0xd8>)
   1abea:	2203      	movs	r2, #3
   1abec:	705a      	strb	r2, [r3, #1]
	}
	
	if (current_three_phase_state != structThreePhase_state.u8t_phase_ac_state)
   1abee:	4b11      	ldr	r3, [pc, #68]	; (1ac34 <set_Three_Phase_State_From_Voltage+0xd8>)
   1abf0:	785b      	ldrb	r3, [r3, #1]
   1abf2:	b2da      	uxtb	r2, r3
   1abf4:	4b12      	ldr	r3, [pc, #72]	; (1ac40 <set_Three_Phase_State_From_Voltage+0xe4>)
   1abf6:	781b      	ldrb	r3, [r3, #0]
   1abf8:	b2db      	uxtb	r3, r3
   1abfa:	429a      	cmp	r2, r3
   1abfc:	d014      	beq.n	1ac28 <set_Three_Phase_State_From_Voltage+0xcc>
	{
		if(!motorRelatedVoltageBypassOn)
   1abfe:	4b11      	ldr	r3, [pc, #68]	; (1ac44 <set_Three_Phase_State_From_Voltage+0xe8>)
   1ac00:	781b      	ldrb	r3, [r3, #0]
   1ac02:	2201      	movs	r2, #1
   1ac04:	4053      	eors	r3, r2
   1ac06:	b2db      	uxtb	r3, r3
   1ac08:	2b00      	cmp	r3, #0
   1ac0a:	d00d      	beq.n	1ac28 <set_Three_Phase_State_From_Voltage+0xcc>
		{
			last_three_phase_state  = 	temp_phase_state;								//assign saved temp AC Phase State to last_three_phase_state
   1ac0c:	4b0e      	ldr	r3, [pc, #56]	; (1ac48 <set_Three_Phase_State_From_Voltage+0xec>)
   1ac0e:	1dfa      	adds	r2, r7, #7
   1ac10:	7812      	ldrb	r2, [r2, #0]
   1ac12:	701a      	strb	r2, [r3, #0]
			current_three_phase_state = structThreePhase_state.u8t_phase_ac_state;
   1ac14:	4b07      	ldr	r3, [pc, #28]	; (1ac34 <set_Three_Phase_State_From_Voltage+0xd8>)
   1ac16:	785b      	ldrb	r3, [r3, #1]
   1ac18:	b2da      	uxtb	r2, r3
   1ac1a:	4b09      	ldr	r3, [pc, #36]	; (1ac40 <set_Three_Phase_State_From_Voltage+0xe4>)
   1ac1c:	701a      	strb	r2, [r3, #0]
			eventOccured = true;
   1ac1e:	4b0b      	ldr	r3, [pc, #44]	; (1ac4c <set_Three_Phase_State_From_Voltage+0xf0>)
   1ac20:	2201      	movs	r2, #1
   1ac22:	701a      	strb	r2, [r3, #0]
   1ac24:	e000      	b.n	1ac28 <set_Three_Phase_State_From_Voltage+0xcc>
		return;
   1ac26:	46c0      	nop			; (mov r8, r8)
		}
	}
}
   1ac28:	46bd      	mov	sp, r7
   1ac2a:	b002      	add	sp, #8
   1ac2c:	bd80      	pop	{r7, pc}
   1ac2e:	46c0      	nop			; (mov r8, r8)
   1ac30:	20000799 	.word	0x20000799
   1ac34:	20000748 	.word	0x20000748
   1ac38:	200006e8 	.word	0x200006e8
   1ac3c:	20000654 	.word	0x20000654
   1ac40:	20000841 	.word	0x20000841
   1ac44:	20000773 	.word	0x20000773
   1ac48:	2000072b 	.word	0x2000072b
   1ac4c:	2000072e 	.word	0x2000072e

0001ac50 <detect_Motor_Current>:

//Function to detect the Motor Current, From ADC, Average it (using ADC_0) , and store it in the Analog_Parameter_Struct
void detect_Motor_Current(void){
   1ac50:	b590      	push	{r4, r7, lr}
   1ac52:	b083      	sub	sp, #12
   1ac54:	af00      	add	r7, sp, #0
	if(xSemaphoreTake(xADC_Semaphore,portMAX_DELAY)== pdTRUE)
   1ac56:	4b32      	ldr	r3, [pc, #200]	; (1ad20 <detect_Motor_Current+0xd0>)
   1ac58:	681a      	ldr	r2, [r3, #0]
   1ac5a:	2301      	movs	r3, #1
   1ac5c:	425b      	negs	r3, r3
   1ac5e:	0019      	movs	r1, r3
   1ac60:	0010      	movs	r0, r2
   1ac62:	4b30      	ldr	r3, [pc, #192]	; (1ad24 <detect_Motor_Current+0xd4>)
   1ac64:	4798      	blx	r3
   1ac66:	0003      	movs	r3, r0
   1ac68:	2b01      	cmp	r3, #1
   1ac6a:	d154      	bne.n	1ad16 <detect_Motor_Current+0xc6>
	{
		uint32_t ADCcurrent = Read_ADC0(ADC_POSITIVE_INPUT_PIN16,200);
   1ac6c:	21c8      	movs	r1, #200	; 0xc8
   1ac6e:	2010      	movs	r0, #16
   1ac70:	4b2d      	ldr	r3, [pc, #180]	; (1ad28 <detect_Motor_Current+0xd8>)
   1ac72:	4798      	blx	r3
   1ac74:	0003      	movs	r3, r0
   1ac76:	607b      	str	r3, [r7, #4]
		
		
		if(ADCcurrent>15)
   1ac78:	687b      	ldr	r3, [r7, #4]
   1ac7a:	2b0f      	cmp	r3, #15
   1ac7c:	d903      	bls.n	1ac86 <detect_Motor_Current+0x36>
		{
			ADCcurrent = ADCcurrent - 15;
   1ac7e:	687b      	ldr	r3, [r7, #4]
   1ac80:	3b0f      	subs	r3, #15
   1ac82:	607b      	str	r3, [r7, #4]
   1ac84:	e004      	b.n	1ac90 <detect_Motor_Current+0x40>
		}
		else if(ADCcurrent <= 15)
   1ac86:	687b      	ldr	r3, [r7, #4]
   1ac88:	2b0f      	cmp	r3, #15
   1ac8a:	d801      	bhi.n	1ac90 <detect_Motor_Current+0x40>
		{
			ADCcurrent = 0;
   1ac8c:	2300      	movs	r3, #0
   1ac8e:	607b      	str	r3, [r7, #4]
		}
		
		Analog_Parameter_Struct.Motor_Current_ADC_Value = ADCcurrent;				// does ADCcurrent here have ADC Value of Current ?
   1ac90:	4b26      	ldr	r3, [pc, #152]	; (1ad2c <detect_Motor_Current+0xdc>)
   1ac92:	687a      	ldr	r2, [r7, #4]
   1ac94:	60da      	str	r2, [r3, #12]
		//ADCcurrent = (ADCcurrent*7225)/1000;
		ADCcurrent = (ADCcurrent*3425)/1000;
   1ac96:	687b      	ldr	r3, [r7, #4]
   1ac98:	4a25      	ldr	r2, [pc, #148]	; (1ad30 <detect_Motor_Current+0xe0>)
   1ac9a:	435a      	muls	r2, r3
   1ac9c:	0010      	movs	r0, r2
   1ac9e:	4b25      	ldr	r3, [pc, #148]	; (1ad34 <detect_Motor_Current+0xe4>)
   1aca0:	22fa      	movs	r2, #250	; 0xfa
   1aca2:	0091      	lsls	r1, r2, #2
   1aca4:	4798      	blx	r3
   1aca6:	0003      	movs	r3, r0
   1aca8:	607b      	str	r3, [r7, #4]
		if(ADCcurrent<1200 && ADCcurrent!=0)
   1acaa:	687b      	ldr	r3, [r7, #4]
   1acac:	4a22      	ldr	r2, [pc, #136]	; (1ad38 <detect_Motor_Current+0xe8>)
   1acae:	4293      	cmp	r3, r2
   1acb0:	d810      	bhi.n	1acd4 <detect_Motor_Current+0x84>
   1acb2:	687b      	ldr	r3, [r7, #4]
   1acb4:	2b00      	cmp	r3, #0
   1acb6:	d00d      	beq.n	1acd4 <detect_Motor_Current+0x84>
		{
			ADCcurrent = ADCcurrent + (((1200-ADCcurrent)*272)/1000);
   1acb8:	687b      	ldr	r3, [r7, #4]
   1acba:	4a20      	ldr	r2, [pc, #128]	; (1ad3c <detect_Motor_Current+0xec>)
   1acbc:	4353      	muls	r3, r2
   1acbe:	4a20      	ldr	r2, [pc, #128]	; (1ad40 <detect_Motor_Current+0xf0>)
   1acc0:	1898      	adds	r0, r3, r2
   1acc2:	4b1c      	ldr	r3, [pc, #112]	; (1ad34 <detect_Motor_Current+0xe4>)
   1acc4:	22fa      	movs	r2, #250	; 0xfa
   1acc6:	0091      	lsls	r1, r2, #2
   1acc8:	4798      	blx	r3
   1acca:	0003      	movs	r3, r0
   1accc:	001a      	movs	r2, r3
   1acce:	687b      	ldr	r3, [r7, #4]
   1acd0:	189b      	adds	r3, r3, r2
   1acd2:	607b      	str	r3, [r7, #4]
		}
		Analog_Parameter_Struct.Motor_Current = ADCcurrent;
   1acd4:	4b15      	ldr	r3, [pc, #84]	; (1ad2c <detect_Motor_Current+0xdc>)
   1acd6:	687a      	ldr	r2, [r7, #4]
   1acd8:	611a      	str	r2, [r3, #16]
		Analog_Parameter_Struct.Motor_Current_IntPart = ADCcurrent/100;
   1acda:	687a      	ldr	r2, [r7, #4]
   1acdc:	4b15      	ldr	r3, [pc, #84]	; (1ad34 <detect_Motor_Current+0xe4>)
   1acde:	2164      	movs	r1, #100	; 0x64
   1ace0:	0010      	movs	r0, r2
   1ace2:	4798      	blx	r3
   1ace4:	0003      	movs	r3, r0
   1ace6:	b29a      	uxth	r2, r3
   1ace8:	4b10      	ldr	r3, [pc, #64]	; (1ad2c <detect_Motor_Current+0xdc>)
   1acea:	829a      	strh	r2, [r3, #20]
		Analog_Parameter_Struct.Motor_Current_DecPart = ADCcurrent%100;
   1acec:	687a      	ldr	r2, [r7, #4]
   1acee:	4b15      	ldr	r3, [pc, #84]	; (1ad44 <detect_Motor_Current+0xf4>)
   1acf0:	2164      	movs	r1, #100	; 0x64
   1acf2:	0010      	movs	r0, r2
   1acf4:	4798      	blx	r3
   1acf6:	000b      	movs	r3, r1
   1acf8:	b29a      	uxth	r2, r3
   1acfa:	4b0c      	ldr	r3, [pc, #48]	; (1ad2c <detect_Motor_Current+0xdc>)
   1acfc:	82da      	strh	r2, [r3, #22]
		ucharCurrent_Detect_Flag = 0;												//reset the flag, to disable current reading for next 500ms
   1acfe:	4b12      	ldr	r3, [pc, #72]	; (1ad48 <detect_Motor_Current+0xf8>)
   1ad00:	2200      	movs	r2, #0
   1ad02:	701a      	strb	r2, [r3, #0]
		calcPowerConsumption();
   1ad04:	4b11      	ldr	r3, [pc, #68]	; (1ad4c <detect_Motor_Current+0xfc>)
   1ad06:	4798      	blx	r3
		
		xSemaphoreGive(xADC_Semaphore);
   1ad08:	4b05      	ldr	r3, [pc, #20]	; (1ad20 <detect_Motor_Current+0xd0>)
   1ad0a:	6818      	ldr	r0, [r3, #0]
   1ad0c:	2300      	movs	r3, #0
   1ad0e:	2200      	movs	r2, #0
   1ad10:	2100      	movs	r1, #0
   1ad12:	4c0f      	ldr	r4, [pc, #60]	; (1ad50 <detect_Motor_Current+0x100>)
   1ad14:	47a0      	blx	r4
	}
}
   1ad16:	46c0      	nop			; (mov r8, r8)
   1ad18:	46bd      	mov	sp, r7
   1ad1a:	b003      	add	sp, #12
   1ad1c:	bd90      	pop	{r4, r7, pc}
   1ad1e:	46c0      	nop			; (mov r8, r8)
   1ad20:	20000230 	.word	0x20000230
   1ad24:	0001f471 	.word	0x0001f471
   1ad28:	00019f65 	.word	0x00019f65
   1ad2c:	200006e8 	.word	0x200006e8
   1ad30:	00000d61 	.word	0x00000d61
   1ad34:	0002616d 	.word	0x0002616d
   1ad38:	000004af 	.word	0x000004af
   1ad3c:	fffffef0 	.word	0xfffffef0
   1ad40:	0004fb00 	.word	0x0004fb00
   1ad44:	00026279 	.word	0x00026279
   1ad48:	20000243 	.word	0x20000243
   1ad4c:	0001ad55 	.word	0x0001ad55
   1ad50:	0001efd1 	.word	0x0001efd1

0001ad54 <calcPowerConsumption>:

/************************************************************************/
/* To Calculate Power Consumption of Motor                              */
/************************************************************************/
void calcPowerConsumption(void)
{
   1ad54:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ad56:	b085      	sub	sp, #20
   1ad58:	af00      	add	r7, sp, #0
	uint16_t avgVotlage = Analog_Parameter_Struct.PhaseRY_Voltage + Analog_Parameter_Struct.PhaseYB_Voltage + Analog_Parameter_Struct.PhaseBR_Voltage;
   1ad5a:	4b37      	ldr	r3, [pc, #220]	; (1ae38 <calcPowerConsumption+0xe4>)
   1ad5c:	681b      	ldr	r3, [r3, #0]
   1ad5e:	b29a      	uxth	r2, r3
   1ad60:	4b35      	ldr	r3, [pc, #212]	; (1ae38 <calcPowerConsumption+0xe4>)
   1ad62:	685b      	ldr	r3, [r3, #4]
   1ad64:	b29b      	uxth	r3, r3
   1ad66:	18d3      	adds	r3, r2, r3
   1ad68:	b299      	uxth	r1, r3
   1ad6a:	4b33      	ldr	r3, [pc, #204]	; (1ae38 <calcPowerConsumption+0xe4>)
   1ad6c:	689b      	ldr	r3, [r3, #8]
   1ad6e:	b29a      	uxth	r2, r3
   1ad70:	230e      	movs	r3, #14
   1ad72:	18fb      	adds	r3, r7, r3
   1ad74:	188a      	adds	r2, r1, r2
   1ad76:	801a      	strh	r2, [r3, #0]
	
	double result = (avgVotlage/3.0) * (Analog_Parameter_Struct.Motor_Current/100.0);
   1ad78:	230e      	movs	r3, #14
   1ad7a:	18fb      	adds	r3, r7, r3
   1ad7c:	881a      	ldrh	r2, [r3, #0]
   1ad7e:	4b2f      	ldr	r3, [pc, #188]	; (1ae3c <calcPowerConsumption+0xe8>)
   1ad80:	0010      	movs	r0, r2
   1ad82:	4798      	blx	r3
   1ad84:	4c2e      	ldr	r4, [pc, #184]	; (1ae40 <calcPowerConsumption+0xec>)
   1ad86:	2200      	movs	r2, #0
   1ad88:	4b2e      	ldr	r3, [pc, #184]	; (1ae44 <calcPowerConsumption+0xf0>)
   1ad8a:	47a0      	blx	r4
   1ad8c:	0003      	movs	r3, r0
   1ad8e:	000c      	movs	r4, r1
   1ad90:	001d      	movs	r5, r3
   1ad92:	0026      	movs	r6, r4
   1ad94:	4b28      	ldr	r3, [pc, #160]	; (1ae38 <calcPowerConsumption+0xe4>)
   1ad96:	691a      	ldr	r2, [r3, #16]
   1ad98:	4b2b      	ldr	r3, [pc, #172]	; (1ae48 <calcPowerConsumption+0xf4>)
   1ad9a:	0010      	movs	r0, r2
   1ad9c:	4798      	blx	r3
   1ad9e:	4c28      	ldr	r4, [pc, #160]	; (1ae40 <calcPowerConsumption+0xec>)
   1ada0:	2200      	movs	r2, #0
   1ada2:	4b2a      	ldr	r3, [pc, #168]	; (1ae4c <calcPowerConsumption+0xf8>)
   1ada4:	47a0      	blx	r4
   1ada6:	0003      	movs	r3, r0
   1ada8:	000c      	movs	r4, r1
   1adaa:	001a      	movs	r2, r3
   1adac:	0023      	movs	r3, r4
   1adae:	4c28      	ldr	r4, [pc, #160]	; (1ae50 <calcPowerConsumption+0xfc>)
   1adb0:	0028      	movs	r0, r5
   1adb2:	0031      	movs	r1, r6
   1adb4:	47a0      	blx	r4
   1adb6:	0003      	movs	r3, r0
   1adb8:	000c      	movs	r4, r1
   1adba:	603b      	str	r3, [r7, #0]
   1adbc:	607c      	str	r4, [r7, #4]
	result = sqrt(3) * result * 85.0 / 100.0;
   1adbe:	4c24      	ldr	r4, [pc, #144]	; (1ae50 <calcPowerConsumption+0xfc>)
   1adc0:	4a24      	ldr	r2, [pc, #144]	; (1ae54 <calcPowerConsumption+0x100>)
   1adc2:	4b25      	ldr	r3, [pc, #148]	; (1ae58 <calcPowerConsumption+0x104>)
   1adc4:	6838      	ldr	r0, [r7, #0]
   1adc6:	6879      	ldr	r1, [r7, #4]
   1adc8:	47a0      	blx	r4
   1adca:	0003      	movs	r3, r0
   1adcc:	000c      	movs	r4, r1
   1adce:	0018      	movs	r0, r3
   1add0:	0021      	movs	r1, r4
   1add2:	4c1f      	ldr	r4, [pc, #124]	; (1ae50 <calcPowerConsumption+0xfc>)
   1add4:	2200      	movs	r2, #0
   1add6:	4b21      	ldr	r3, [pc, #132]	; (1ae5c <calcPowerConsumption+0x108>)
   1add8:	47a0      	blx	r4
   1adda:	0003      	movs	r3, r0
   1addc:	000c      	movs	r4, r1
   1adde:	0018      	movs	r0, r3
   1ade0:	0021      	movs	r1, r4
   1ade2:	4c17      	ldr	r4, [pc, #92]	; (1ae40 <calcPowerConsumption+0xec>)
   1ade4:	2200      	movs	r2, #0
   1ade6:	4b19      	ldr	r3, [pc, #100]	; (1ae4c <calcPowerConsumption+0xf8>)
   1ade8:	47a0      	blx	r4
   1adea:	0003      	movs	r3, r0
   1adec:	000c      	movs	r4, r1
   1adee:	603b      	str	r3, [r7, #0]
   1adf0:	607c      	str	r4, [r7, #4]

	Analog_Parameter_Struct.Motor_Power = (uint32_t) result;
   1adf2:	4b1b      	ldr	r3, [pc, #108]	; (1ae60 <calcPowerConsumption+0x10c>)
   1adf4:	6838      	ldr	r0, [r7, #0]
   1adf6:	6879      	ldr	r1, [r7, #4]
   1adf8:	4798      	blx	r3
   1adfa:	0002      	movs	r2, r0
   1adfc:	4b0e      	ldr	r3, [pc, #56]	; (1ae38 <calcPowerConsumption+0xe4>)
   1adfe:	621a      	str	r2, [r3, #32]
	Analog_Parameter_Struct.Motor_Power_IntPart = (uint32_t) result / 1000;
   1ae00:	4b17      	ldr	r3, [pc, #92]	; (1ae60 <calcPowerConsumption+0x10c>)
   1ae02:	6838      	ldr	r0, [r7, #0]
   1ae04:	6879      	ldr	r1, [r7, #4]
   1ae06:	4798      	blx	r3
   1ae08:	4b16      	ldr	r3, [pc, #88]	; (1ae64 <calcPowerConsumption+0x110>)
   1ae0a:	22fa      	movs	r2, #250	; 0xfa
   1ae0c:	0091      	lsls	r1, r2, #2
   1ae0e:	4798      	blx	r3
   1ae10:	0003      	movs	r3, r0
   1ae12:	b29a      	uxth	r2, r3
   1ae14:	4b08      	ldr	r3, [pc, #32]	; (1ae38 <calcPowerConsumption+0xe4>)
   1ae16:	849a      	strh	r2, [r3, #36]	; 0x24
	Analog_Parameter_Struct.Motor_Power_DecPart =  (uint32_t) result % 1000;
   1ae18:	4b11      	ldr	r3, [pc, #68]	; (1ae60 <calcPowerConsumption+0x10c>)
   1ae1a:	6838      	ldr	r0, [r7, #0]
   1ae1c:	6879      	ldr	r1, [r7, #4]
   1ae1e:	4798      	blx	r3
   1ae20:	4b11      	ldr	r3, [pc, #68]	; (1ae68 <calcPowerConsumption+0x114>)
   1ae22:	22fa      	movs	r2, #250	; 0xfa
   1ae24:	0091      	lsls	r1, r2, #2
   1ae26:	4798      	blx	r3
   1ae28:	000b      	movs	r3, r1
   1ae2a:	001a      	movs	r2, r3
   1ae2c:	4b02      	ldr	r3, [pc, #8]	; (1ae38 <calcPowerConsumption+0xe4>)
   1ae2e:	629a      	str	r2, [r3, #40]	; 0x28
}
   1ae30:	46c0      	nop			; (mov r8, r8)
   1ae32:	46bd      	mov	sp, r7
   1ae34:	b005      	add	sp, #20
   1ae36:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1ae38:	200006e8 	.word	0x200006e8
   1ae3c:	000286dd 	.word	0x000286dd
   1ae40:	000272a1 	.word	0x000272a1
   1ae44:	40080000 	.word	0x40080000
   1ae48:	00028761 	.word	0x00028761
   1ae4c:	40590000 	.word	0x40590000
   1ae50:	00027b09 	.word	0x00027b09
   1ae54:	e8584caa 	.word	0xe8584caa
   1ae58:	3ffbb67a 	.word	0x3ffbb67a
   1ae5c:	40554000 	.word	0x40554000
   1ae60:	00026569 	.word	0x00026569
   1ae64:	0002616d 	.word	0x0002616d
   1ae68:	00026279 	.word	0x00026279

0001ae6c <should_Detect_New_Current>:

//Function to check if the New Current Reading should be read
bool should_Detect_New_Current(void){
   1ae6c:	b580      	push	{r7, lr}
   1ae6e:	af00      	add	r7, sp, #0
	
	//todo : add all the conditions checks i.e. motor ON, current consumption ON etc. , and should get new reading every 500ms
	
	return (ucharCurrent_Detect_Flag == 1);
   1ae70:	4b04      	ldr	r3, [pc, #16]	; (1ae84 <should_Detect_New_Current+0x18>)
   1ae72:	781b      	ldrb	r3, [r3, #0]
   1ae74:	b2db      	uxtb	r3, r3
   1ae76:	3b01      	subs	r3, #1
   1ae78:	425a      	negs	r2, r3
   1ae7a:	4153      	adcs	r3, r2
   1ae7c:	b2db      	uxtb	r3, r3
	
	//return (should_Detect_New_Voltage());
}
   1ae7e:	0018      	movs	r0, r3
   1ae80:	46bd      	mov	sp, r7
   1ae82:	bd80      	pop	{r7, pc}
   1ae84:	20000243 	.word	0x20000243

0001ae88 <getACPowerState>:

bool getACPowerState(void)
{
   1ae88:	b580      	push	{r7, lr}
   1ae8a:	af00      	add	r7, sp, #0
	//return false;
	return phaseAC;
   1ae8c:	4b02      	ldr	r3, [pc, #8]	; (1ae98 <getACPowerState+0x10>)
   1ae8e:	781b      	ldrb	r3, [r3, #0]
   1ae90:	b2db      	uxtb	r3, r3
}
   1ae92:	0018      	movs	r0, r3
   1ae94:	46bd      	mov	sp, r7
   1ae96:	bd80      	pop	{r7, pc}
   1ae98:	200007c2 	.word	0x200007c2

0001ae9c <setACPowerState>:

void setACPowerState(bool state)
{
   1ae9c:	b580      	push	{r7, lr}
   1ae9e:	b082      	sub	sp, #8
   1aea0:	af00      	add	r7, sp, #0
   1aea2:	0002      	movs	r2, r0
   1aea4:	1dfb      	adds	r3, r7, #7
   1aea6:	701a      	strb	r2, [r3, #0]
	phaseAC = state;
   1aea8:	4b03      	ldr	r3, [pc, #12]	; (1aeb8 <setACPowerState+0x1c>)
   1aeaa:	1dfa      	adds	r2, r7, #7
   1aeac:	7812      	ldrb	r2, [r2, #0]
   1aeae:	701a      	strb	r2, [r3, #0]
}
   1aeb0:	46c0      	nop			; (mov r8, r8)
   1aeb2:	46bd      	mov	sp, r7
   1aeb4:	b002      	add	sp, #8
   1aeb6:	bd80      	pop	{r7, pc}
   1aeb8:	200007c2 	.word	0x200007c2

0001aebc <getAllPhaseState>:

uint8_t getAllPhaseState(void)
{
   1aebc:	b580      	push	{r7, lr}
   1aebe:	af00      	add	r7, sp, #0
	return allPhase;
   1aec0:	4b02      	ldr	r3, [pc, #8]	; (1aecc <getAllPhaseState+0x10>)
   1aec2:	781b      	ldrb	r3, [r3, #0]
   1aec4:	b2db      	uxtb	r3, r3
	//}
	//else
	//{
	//return allPhase;
	//}
}
   1aec6:	0018      	movs	r0, r3
   1aec8:	46bd      	mov	sp, r7
   1aeca:	bd80      	pop	{r7, pc}
   1aecc:	20000761 	.word	0x20000761

0001aed0 <setAllPhaseState>:

void setAllPhaseState(uint8_t state)
{
   1aed0:	b580      	push	{r7, lr}
   1aed2:	b082      	sub	sp, #8
   1aed4:	af00      	add	r7, sp, #0
   1aed6:	0002      	movs	r2, r0
   1aed8:	1dfb      	adds	r3, r7, #7
   1aeda:	701a      	strb	r2, [r3, #0]
	allPhase = state;
   1aedc:	4b03      	ldr	r3, [pc, #12]	; (1aeec <setAllPhaseState+0x1c>)
   1aede:	1dfa      	adds	r2, r7, #7
   1aee0:	7812      	ldrb	r2, [r2, #0]
   1aee2:	701a      	strb	r2, [r3, #0]
}
   1aee4:	46c0      	nop			; (mov r8, r8)
   1aee6:	46bd      	mov	sp, r7
   1aee8:	b002      	add	sp, #8
   1aeea:	bd80      	pop	{r7, pc}
   1aeec:	20000761 	.word	0x20000761

0001aef0 <getPhaseSequence>:

bool getPhaseSequence()
{
   1aef0:	b580      	push	{r7, lr}
   1aef2:	af00      	add	r7, sp, #0
	return vBoolPhaseSeq;
   1aef4:	4b02      	ldr	r3, [pc, #8]	; (1af00 <getPhaseSequence+0x10>)
   1aef6:	781b      	ldrb	r3, [r3, #0]
   1aef8:	b2db      	uxtb	r3, r3
}
   1aefa:	0018      	movs	r0, r3
   1aefc:	46bd      	mov	sp, r7
   1aefe:	bd80      	pop	{r7, pc}
   1af00:	20000774 	.word	0x20000774

0001af04 <setPhaseSequence>:

void setPhaseSequence(bool phaseSequence)
{
   1af04:	b580      	push	{r7, lr}
   1af06:	b082      	sub	sp, #8
   1af08:	af00      	add	r7, sp, #0
   1af0a:	0002      	movs	r2, r0
   1af0c:	1dfb      	adds	r3, r7, #7
   1af0e:	701a      	strb	r2, [r3, #0]
	vBoolPhaseSeq=phaseSequence;
   1af10:	4b03      	ldr	r3, [pc, #12]	; (1af20 <setPhaseSequence+0x1c>)
   1af12:	1dfa      	adds	r2, r7, #7
   1af14:	7812      	ldrb	r2, [r2, #0]
   1af16:	701a      	strb	r2, [r3, #0]
}
   1af18:	46c0      	nop			; (mov r8, r8)
   1af1a:	46bd      	mov	sp, r7
   1af1c:	b002      	add	sp, #8
   1af1e:	bd80      	pop	{r7, pc}
   1af20:	20000774 	.word	0x20000774

0001af24 <getMotorState>:


bool getMotorState(void)
{
   1af24:	b580      	push	{r7, lr}
   1af26:	af00      	add	r7, sp, #0
	return mFeedback;
   1af28:	4b02      	ldr	r3, [pc, #8]	; (1af34 <getMotorState+0x10>)
   1af2a:	781b      	ldrb	r3, [r3, #0]
   1af2c:	b2db      	uxtb	r3, r3
}
   1af2e:	0018      	movs	r0, r3
   1af30:	46bd      	mov	sp, r7
   1af32:	bd80      	pop	{r7, pc}
   1af34:	20000742 	.word	0x20000742

0001af38 <setMotorState>:

void setMotorState(bool state)
{
   1af38:	b580      	push	{r7, lr}
   1af3a:	b082      	sub	sp, #8
   1af3c:	af00      	add	r7, sp, #0
   1af3e:	0002      	movs	r2, r0
   1af40:	1dfb      	adds	r3, r7, #7
   1af42:	701a      	strb	r2, [r3, #0]
	mFeedback = state;
   1af44:	4b0a      	ldr	r3, [pc, #40]	; (1af70 <setMotorState+0x38>)
   1af46:	1dfa      	adds	r2, r7, #7
   1af48:	7812      	ldrb	r2, [r2, #0]
   1af4a:	701a      	strb	r2, [r3, #0]
	if (state)
   1af4c:	1dfb      	adds	r3, r7, #7
   1af4e:	781b      	ldrb	r3, [r3, #0]
   1af50:	2b00      	cmp	r3, #0
   1af52:	d004      	beq.n	1af5e <setMotorState+0x26>
	{
		MOTOR_ON_LED_ON;
   1af54:	2100      	movs	r1, #0
   1af56:	2005      	movs	r0, #5
   1af58:	4b06      	ldr	r3, [pc, #24]	; (1af74 <setMotorState+0x3c>)
   1af5a:	4798      	blx	r3
	}
	else
	{
		MOTOR_ON_LED_OFF;
	}
}
   1af5c:	e003      	b.n	1af66 <setMotorState+0x2e>
		MOTOR_ON_LED_OFF;
   1af5e:	2101      	movs	r1, #1
   1af60:	2005      	movs	r0, #5
   1af62:	4b04      	ldr	r3, [pc, #16]	; (1af74 <setMotorState+0x3c>)
   1af64:	4798      	blx	r3
}
   1af66:	46c0      	nop			; (mov r8, r8)
   1af68:	46bd      	mov	sp, r7
   1af6a:	b002      	add	sp, #8
   1af6c:	bd80      	pop	{r7, pc}
   1af6e:	46c0      	nop			; (mov r8, r8)
   1af70:	20000742 	.word	0x20000742
   1af74:	0001958d 	.word	0x0001958d

0001af78 <getMotorState_from_pin>:

bool getMotorState_from_pin(void)
{
   1af78:	b590      	push	{r4, r7, lr}
   1af7a:	b083      	sub	sp, #12
   1af7c:	af00      	add	r7, sp, #0
	uint8_t p1;
	bool p2, p3, p4;
	readSensorState(&p1, &p2, &p3, &p4);
   1af7e:	1d3b      	adds	r3, r7, #4
   1af80:	1d7a      	adds	r2, r7, #5
   1af82:	1db9      	adds	r1, r7, #6
   1af84:	1df8      	adds	r0, r7, #7
   1af86:	4c06      	ldr	r4, [pc, #24]	; (1afa0 <getMotorState_from_pin+0x28>)
   1af88:	47a0      	blx	r4
	setMotorState(p3);
   1af8a:	1d7b      	adds	r3, r7, #5
   1af8c:	781b      	ldrb	r3, [r3, #0]
   1af8e:	0018      	movs	r0, r3
   1af90:	4b04      	ldr	r3, [pc, #16]	; (1afa4 <getMotorState_from_pin+0x2c>)
   1af92:	4798      	blx	r3
	return p3;
   1af94:	1d7b      	adds	r3, r7, #5
   1af96:	781b      	ldrb	r3, [r3, #0]
}
   1af98:	0018      	movs	r0, r3
   1af9a:	46bd      	mov	sp, r7
   1af9c:	b003      	add	sp, #12
   1af9e:	bd90      	pop	{r4, r7, pc}
   1afa0:	0001afa9 	.word	0x0001afa9
   1afa4:	0001af39 	.word	0x0001af39

0001afa8 <readSensorState>:



void readSensorState(uint8_t *allPhase, bool *phaseSeq,bool *motor, bool *acPhase)
{
   1afa8:	b590      	push	{r4, r7, lr}
   1afaa:	b087      	sub	sp, #28
   1afac:	af00      	add	r7, sp, #0
   1afae:	60f8      	str	r0, [r7, #12]
   1afb0:	60b9      	str	r1, [r7, #8]
   1afb2:	607a      	str	r2, [r7, #4]
   1afb4:	603b      	str	r3, [r7, #0]
	*allPhase = structThreePhase_state.u8t_phase_ac_state;
   1afb6:	4b39      	ldr	r3, [pc, #228]	; (1b09c <readSensorState+0xf4>)
   1afb8:	785b      	ldrb	r3, [r3, #1]
   1afba:	b2da      	uxtb	r2, r3
   1afbc:	68fb      	ldr	r3, [r7, #12]
   1afbe:	701a      	strb	r2, [r3, #0]
	//*phaseSeq = structThreePhase_state.u8t_phase_sequence_flag;
	if(structThreePhase_state.u8t_phase_sequence_flag == THREEPHASE_OK)
   1afc0:	4b36      	ldr	r3, [pc, #216]	; (1b09c <readSensorState+0xf4>)
   1afc2:	781b      	ldrb	r3, [r3, #0]
   1afc4:	b2db      	uxtb	r3, r3
   1afc6:	2b02      	cmp	r3, #2
   1afc8:	d103      	bne.n	1afd2 <readSensorState+0x2a>
	{
		*phaseSeq=true;
   1afca:	68bb      	ldr	r3, [r7, #8]
   1afcc:	2201      	movs	r2, #1
   1afce:	701a      	strb	r2, [r3, #0]
   1afd0:	e002      	b.n	1afd8 <readSensorState+0x30>
	}
	else
	{
		*phaseSeq = false;
   1afd2:	68bb      	ldr	r3, [r7, #8]
   1afd4:	2200      	movs	r2, #0
   1afd6:	701a      	strb	r2, [r3, #0]
	//{
	//*p1 = false;
	//}

	// If MotorFeedback Detection is disabled
	if (user_settings_parameter_struct.detectMotorFeedback == MOTORFEEDBACK_DETECTION_OFF)
   1afd8:	4b31      	ldr	r3, [pc, #196]	; (1b0a0 <readSensorState+0xf8>)
   1afda:	2225      	movs	r2, #37	; 0x25
   1afdc:	5c9b      	ldrb	r3, [r3, r2]
   1afde:	b2db      	uxtb	r3, r3
   1afe0:	2b00      	cmp	r3, #0
   1afe2:	d106      	bne.n	1aff2 <readSensorState+0x4a>
	{
		*motor  = getMotorState();
   1afe4:	4b2f      	ldr	r3, [pc, #188]	; (1b0a4 <readSensorState+0xfc>)
   1afe6:	4798      	blx	r3
   1afe8:	0003      	movs	r3, r0
   1afea:	001a      	movs	r2, r3
   1afec:	687b      	ldr	r3, [r7, #4]
   1afee:	701a      	strb	r2, [r3, #0]
   1aff0:	e022      	b.n	1b038 <readSensorState+0x90>
	}
	// If Motor Feedback is to be detected using Current
	else if(user_settings_parameter_struct.detectMotorFeedback == MOTORFEEDBACK_DETECTION_CURRENT)
   1aff2:	4b2b      	ldr	r3, [pc, #172]	; (1b0a0 <readSensorState+0xf8>)
   1aff4:	2225      	movs	r2, #37	; 0x25
   1aff6:	5c9b      	ldrb	r3, [r3, r2]
   1aff8:	b2db      	uxtb	r3, r3
   1affa:	2b01      	cmp	r3, #1
   1affc:	d106      	bne.n	1b00c <readSensorState+0x64>
	{
		*motor = checkMotorStatusUsingCurrent();
   1affe:	4b2a      	ldr	r3, [pc, #168]	; (1b0a8 <readSensorState+0x100>)
   1b000:	4798      	blx	r3
   1b002:	0003      	movs	r3, r0
   1b004:	001a      	movs	r2, r3
   1b006:	687b      	ldr	r3, [r7, #4]
   1b008:	701a      	strb	r2, [r3, #0]
   1b00a:	e015      	b.n	1b038 <readSensorState+0x90>
		
	}
	// if Motor Feedback is to be detected using HW Feedback Circuit
	else if(user_settings_parameter_struct.detectMotorFeedback == MOTORFEEDBACK_DETECTION_ON)
   1b00c:	4b24      	ldr	r3, [pc, #144]	; (1b0a0 <readSensorState+0xf8>)
   1b00e:	2225      	movs	r2, #37	; 0x25
   1b010:	5c9b      	ldrb	r3, [r3, r2]
   1b012:	b2db      	uxtb	r3, r3
   1b014:	2b02      	cmp	r3, #2
   1b016:	d10f      	bne.n	1b038 <readSensorState+0x90>
	{
		*motor  = !(port_pin_get_input_level(PIN_MOTOR_FEEDBACK));
   1b018:	202e      	movs	r0, #46	; 0x2e
   1b01a:	4b24      	ldr	r3, [pc, #144]	; (1b0ac <readSensorState+0x104>)
   1b01c:	4798      	blx	r3
   1b01e:	0003      	movs	r3, r0
   1b020:	1e5a      	subs	r2, r3, #1
   1b022:	4193      	sbcs	r3, r2
   1b024:	b2db      	uxtb	r3, r3
   1b026:	2201      	movs	r2, #1
   1b028:	4053      	eors	r3, r2
   1b02a:	b2db      	uxtb	r3, r3
   1b02c:	1c1a      	adds	r2, r3, #0
   1b02e:	2301      	movs	r3, #1
   1b030:	4013      	ands	r3, r2
   1b032:	b2da      	uxtb	r2, r3
   1b034:	687b      	ldr	r3, [r7, #4]
   1b036:	701a      	strb	r2, [r3, #0]
	}


	
	uint8_t last_comparison = AC_CHAN_STATUS_UNKNOWN;
   1b038:	2317      	movs	r3, #23
   1b03a:	18fb      	adds	r3, r7, r3
   1b03c:	2201      	movs	r2, #1
   1b03e:	701a      	strb	r2, [r3, #0]
	
	last_comparison = ac_chan_get_status(&ac_instance,AC_CHAN_CHANNEL_0);
   1b040:	2317      	movs	r3, #23
   1b042:	18fc      	adds	r4, r7, r3
   1b044:	4b1a      	ldr	r3, [pc, #104]	; (1b0b0 <readSensorState+0x108>)
   1b046:	2100      	movs	r1, #0
   1b048:	0018      	movs	r0, r3
   1b04a:	4b1a      	ldr	r3, [pc, #104]	; (1b0b4 <readSensorState+0x10c>)
   1b04c:	4798      	blx	r3
   1b04e:	0003      	movs	r3, r0
   1b050:	7023      	strb	r3, [r4, #0]
	vTaskDelay(500/portTICK_PERIOD_MS);
   1b052:	23fa      	movs	r3, #250	; 0xfa
   1b054:	005b      	lsls	r3, r3, #1
   1b056:	0018      	movs	r0, r3
   1b058:	4b17      	ldr	r3, [pc, #92]	; (1b0b8 <readSensorState+0x110>)
   1b05a:	4798      	blx	r3
	last_comparison = ac_chan_get_status(&ac_instance,AC_CHAN_CHANNEL_0); //read again
   1b05c:	2317      	movs	r3, #23
   1b05e:	18fc      	adds	r4, r7, r3
   1b060:	4b13      	ldr	r3, [pc, #76]	; (1b0b0 <readSensorState+0x108>)
   1b062:	2100      	movs	r1, #0
   1b064:	0018      	movs	r0, r3
   1b066:	4b13      	ldr	r3, [pc, #76]	; (1b0b4 <readSensorState+0x10c>)
   1b068:	4798      	blx	r3
   1b06a:	0003      	movs	r3, r0
   1b06c:	7023      	strb	r3, [r4, #0]
	
	if (last_comparison & AC_CHAN_STATUS_POS_ABOVE_NEG)
   1b06e:	2317      	movs	r3, #23
   1b070:	18fb      	adds	r3, r7, r3
   1b072:	781b      	ldrb	r3, [r3, #0]
   1b074:	2204      	movs	r2, #4
   1b076:	4013      	ands	r3, r2
   1b078:	d003      	beq.n	1b082 <readSensorState+0xda>
	{
		isACpowerAvailable = true;
   1b07a:	4b10      	ldr	r3, [pc, #64]	; (1b0bc <readSensorState+0x114>)
   1b07c:	2201      	movs	r2, #1
   1b07e:	701a      	strb	r2, [r3, #0]
   1b080:	e002      	b.n	1b088 <readSensorState+0xe0>
	}
	else
	{
		isACpowerAvailable = false;
   1b082:	4b0e      	ldr	r3, [pc, #56]	; (1b0bc <readSensorState+0x114>)
   1b084:	2200      	movs	r2, #0
   1b086:	701a      	strb	r2, [r3, #0]
	}
	
	*acPhase =  isACpowerAvailable;
   1b088:	4b0c      	ldr	r3, [pc, #48]	; (1b0bc <readSensorState+0x114>)
   1b08a:	781b      	ldrb	r3, [r3, #0]
   1b08c:	b2da      	uxtb	r2, r3
   1b08e:	683b      	ldr	r3, [r7, #0]
   1b090:	701a      	strb	r2, [r3, #0]
}
   1b092:	46c0      	nop			; (mov r8, r8)
   1b094:	46bd      	mov	sp, r7
   1b096:	b007      	add	sp, #28
   1b098:	bd90      	pop	{r4, r7, pc}
   1b09a:	46c0      	nop			; (mov r8, r8)
   1b09c:	20000748 	.word	0x20000748
   1b0a0:	20000654 	.word	0x20000654
   1b0a4:	0001af25 	.word	0x0001af25
   1b0a8:	0001b0c1 	.word	0x0001b0c1
   1b0ac:	00019549 	.word	0x00019549
   1b0b0:	2000088c 	.word	0x2000088c
   1b0b4:	0001907d 	.word	0x0001907d
   1b0b8:	0001fd79 	.word	0x0001fd79
   1b0bc:	2000078d 	.word	0x2000078d

0001b0c0 <checkMotorStatusUsingCurrent>:

bool checkMotorStatusUsingCurrent(void)
{
   1b0c0:	b580      	push	{r7, lr}
   1b0c2:	af00      	add	r7, sp, #0
	if(stopMotorCommandGiven)
   1b0c4:	4b0e      	ldr	r3, [pc, #56]	; (1b100 <checkMotorStatusUsingCurrent+0x40>)
   1b0c6:	781b      	ldrb	r3, [r3, #0]
   1b0c8:	2b00      	cmp	r3, #0
   1b0ca:	d00d      	beq.n	1b0e8 <checkMotorStatusUsingCurrent+0x28>
	{
		if(Analog_Parameter_Struct.Motor_Current_IntPart <= (fdbkRefCurrent/2))
   1b0cc:	4b0d      	ldr	r3, [pc, #52]	; (1b104 <checkMotorStatusUsingCurrent+0x44>)
   1b0ce:	8a9b      	ldrh	r3, [r3, #20]
   1b0d0:	b29a      	uxth	r2, r3
   1b0d2:	4b0d      	ldr	r3, [pc, #52]	; (1b108 <checkMotorStatusUsingCurrent+0x48>)
   1b0d4:	781b      	ldrb	r3, [r3, #0]
   1b0d6:	085b      	lsrs	r3, r3, #1
   1b0d8:	b2db      	uxtb	r3, r3
   1b0da:	b29b      	uxth	r3, r3
   1b0dc:	429a      	cmp	r2, r3
   1b0de:	d801      	bhi.n	1b0e4 <checkMotorStatusUsingCurrent+0x24>
		{
			return false;
   1b0e0:	2300      	movs	r3, #0
   1b0e2:	e009      	b.n	1b0f8 <checkMotorStatusUsingCurrent+0x38>
		}
		else
		{
			return true;
   1b0e4:	2301      	movs	r3, #1
   1b0e6:	e007      	b.n	1b0f8 <checkMotorStatusUsingCurrent+0x38>
		}
	}
	else
	{
		if (Analog_Parameter_Struct.Motor_Current_IntPart > 4)
   1b0e8:	4b06      	ldr	r3, [pc, #24]	; (1b104 <checkMotorStatusUsingCurrent+0x44>)
   1b0ea:	8a9b      	ldrh	r3, [r3, #20]
   1b0ec:	b29b      	uxth	r3, r3
   1b0ee:	2b04      	cmp	r3, #4
   1b0f0:	d901      	bls.n	1b0f6 <checkMotorStatusUsingCurrent+0x36>
		{
			return true;
   1b0f2:	2301      	movs	r3, #1
   1b0f4:	e000      	b.n	1b0f8 <checkMotorStatusUsingCurrent+0x38>
		}
		else
		{
			return false;
   1b0f6:	2300      	movs	r3, #0
		}
	}
}
   1b0f8:	0018      	movs	r0, r3
   1b0fa:	46bd      	mov	sp, r7
   1b0fc:	bd80      	pop	{r7, pc}
   1b0fe:	46c0      	nop			; (mov r8, r8)
   1b100:	20000860 	.word	0x20000860
   1b104:	200006e8 	.word	0x200006e8
   1b108:	200007f4 	.word	0x200007f4

0001b10c <detectMotorStateChangeUsingCurrent>:

bool detectMotorStateChangeUsingCurrent(void)
{
   1b10c:	b5b0      	push	{r4, r5, r7, lr}
   1b10e:	af00      	add	r7, sp, #0
	if (getMotorState() != checkMotorStatusUsingCurrent())
   1b110:	4b07      	ldr	r3, [pc, #28]	; (1b130 <detectMotorStateChangeUsingCurrent+0x24>)
   1b112:	4798      	blx	r3
   1b114:	0003      	movs	r3, r0
   1b116:	001c      	movs	r4, r3
   1b118:	4b06      	ldr	r3, [pc, #24]	; (1b134 <detectMotorStateChangeUsingCurrent+0x28>)
   1b11a:	4798      	blx	r3
   1b11c:	0003      	movs	r3, r0
   1b11e:	429c      	cmp	r4, r3
   1b120:	d001      	beq.n	1b126 <detectMotorStateChangeUsingCurrent+0x1a>
	{
		return true;
   1b122:	2301      	movs	r3, #1
   1b124:	e000      	b.n	1b128 <detectMotorStateChangeUsingCurrent+0x1c>
	}
	else
	{
		return false;
   1b126:	2300      	movs	r3, #0
	}
}
   1b128:	0018      	movs	r0, r3
   1b12a:	46bd      	mov	sp, r7
   1b12c:	bdb0      	pop	{r4, r5, r7, pc}
   1b12e:	46c0      	nop			; (mov r8, r8)
   1b130:	0001af25 	.word	0x0001af25
   1b134:	0001b0c1 	.word	0x0001b0c1

0001b138 <updateSensorState>:


void updateSensorState(uint8_t var3PhaseState, bool var3PhaseSeq, bool motorState, bool acPhaseState)
{
   1b138:	b5b0      	push	{r4, r5, r7, lr}
   1b13a:	b084      	sub	sp, #16
   1b13c:	af00      	add	r7, sp, #0
   1b13e:	0005      	movs	r5, r0
   1b140:	000c      	movs	r4, r1
   1b142:	0010      	movs	r0, r2
   1b144:	0019      	movs	r1, r3
   1b146:	1dfb      	adds	r3, r7, #7
   1b148:	1c2a      	adds	r2, r5, #0
   1b14a:	701a      	strb	r2, [r3, #0]
   1b14c:	1dbb      	adds	r3, r7, #6
   1b14e:	1c22      	adds	r2, r4, #0
   1b150:	701a      	strb	r2, [r3, #0]
   1b152:	1d7b      	adds	r3, r7, #5
   1b154:	1c02      	adds	r2, r0, #0
   1b156:	701a      	strb	r2, [r3, #0]
   1b158:	1d3b      	adds	r3, r7, #4
   1b15a:	1c0a      	adds	r2, r1, #0
   1b15c:	701a      	strb	r2, [r3, #0]
	setAllPhaseState(var3PhaseState); // allPhase = p1;
   1b15e:	1dfb      	adds	r3, r7, #7
   1b160:	781b      	ldrb	r3, [r3, #0]
   1b162:	0018      	movs	r0, r3
   1b164:	4b28      	ldr	r3, [pc, #160]	; (1b208 <updateSensorState+0xd0>)
   1b166:	4798      	blx	r3
	setPhaseSequence(var3PhaseSeq);
   1b168:	1dbb      	adds	r3, r7, #6
   1b16a:	781b      	ldrb	r3, [r3, #0]
   1b16c:	0018      	movs	r0, r3
   1b16e:	4b27      	ldr	r3, [pc, #156]	; (1b20c <updateSensorState+0xd4>)
   1b170:	4798      	blx	r3
	setMotorState(motorState); // mFeedback = p2;
   1b172:	1d7b      	adds	r3, r7, #5
   1b174:	781b      	ldrb	r3, [r3, #0]
   1b176:	0018      	movs	r0, r3
   1b178:	4b25      	ldr	r3, [pc, #148]	; (1b210 <updateSensorState+0xd8>)
   1b17a:	4798      	blx	r3
	setACPowerState(acPhaseState); // phaseAC = p4;
   1b17c:	1d3b      	adds	r3, r7, #4
   1b17e:	781b      	ldrb	r3, [r3, #0]
   1b180:	0018      	movs	r0, r3
   1b182:	4b24      	ldr	r3, [pc, #144]	; (1b214 <updateSensorState+0xdc>)
   1b184:	4798      	blx	r3
	
	//if(getAllPhaseState()==AC_3PH && getACPowerState())
	if(getAllPhaseState()==AC_3PH)
   1b186:	4b24      	ldr	r3, [pc, #144]	; (1b218 <updateSensorState+0xe0>)
   1b188:	4798      	blx	r3
   1b18a:	0003      	movs	r3, r0
   1b18c:	2b03      	cmp	r3, #3
   1b18e:	d12c      	bne.n	1b1ea <updateSensorState+0xb2>
	{
		bool tempPhaseSequence = true;									// init temp variable with default value as correct sequence
   1b190:	230f      	movs	r3, #15
   1b192:	18fb      	adds	r3, r7, r3
   1b194:	2201      	movs	r2, #1
   1b196:	701a      	strb	r2, [r3, #0]

		if(user_settings_parameter_struct.detectPhaseSequence)			// if detection of Phase Sequence is enabled
   1b198:	4b20      	ldr	r3, [pc, #128]	; (1b21c <updateSensorState+0xe4>)
   1b19a:	2224      	movs	r2, #36	; 0x24
   1b19c:	5c9b      	ldrb	r3, [r3, r2]
   1b19e:	b2db      	uxtb	r3, r3
   1b1a0:	2b00      	cmp	r3, #0
   1b1a2:	d005      	beq.n	1b1b0 <updateSensorState+0x78>
		{
			tempPhaseSequence = getPhaseSequence();						// save the current phase sequence  in temp varialbe for further use
   1b1a4:	230f      	movs	r3, #15
   1b1a6:	18fc      	adds	r4, r7, r3
   1b1a8:	4b1d      	ldr	r3, [pc, #116]	; (1b220 <updateSensorState+0xe8>)
   1b1aa:	4798      	blx	r3
   1b1ac:	0003      	movs	r3, r0
   1b1ae:	7023      	strb	r3, [r4, #0]
		}

		if(tempPhaseSequence)											// check if sequence is correct
   1b1b0:	230f      	movs	r3, #15
   1b1b2:	18fb      	adds	r3, r7, r3
   1b1b4:	781b      	ldrb	r3, [r3, #0]
   1b1b6:	2b00      	cmp	r3, #0
   1b1b8:	d004      	beq.n	1b1c4 <updateSensorState+0x8c>
		{
			THREEPHASE_OK_LED_ON;
   1b1ba:	2100      	movs	r1, #0
   1b1bc:	2027      	movs	r0, #39	; 0x27
   1b1be:	4b19      	ldr	r3, [pc, #100]	; (1b224 <updateSensorState+0xec>)
   1b1c0:	4798      	blx	r3
   1b1c2:	e003      	b.n	1b1cc <updateSensorState+0x94>
		}
		else
		{
			THREEPHASE_OK_LED_OFF;
   1b1c4:	2101      	movs	r1, #1
   1b1c6:	2027      	movs	r0, #39	; 0x27
   1b1c8:	4b16      	ldr	r3, [pc, #88]	; (1b224 <updateSensorState+0xec>)
   1b1ca:	4798      	blx	r3
		}
		
		if((bool)user_settings_parameter_struct.autoStartAddress)
   1b1cc:	4b13      	ldr	r3, [pc, #76]	; (1b21c <updateSensorState+0xe4>)
   1b1ce:	785b      	ldrb	r3, [r3, #1]
   1b1d0:	b2db      	uxtb	r3, r3
   1b1d2:	2b00      	cmp	r3, #0
   1b1d4:	d004      	beq.n	1b1e0 <updateSensorState+0xa8>
		{
			AUTO_ON_LED_ON;
   1b1d6:	2100      	movs	r1, #0
   1b1d8:	2028      	movs	r0, #40	; 0x28
   1b1da:	4b12      	ldr	r3, [pc, #72]	; (1b224 <updateSensorState+0xec>)
   1b1dc:	4798      	blx	r3
	//
	//if (!getACPowerState() || !getAllPhaseState())
	//{
	//startTimerOn = false;
	//}
}
   1b1de:	e00f      	b.n	1b200 <updateSensorState+0xc8>
			AUTO_ON_LED_OFF;
   1b1e0:	2101      	movs	r1, #1
   1b1e2:	2028      	movs	r0, #40	; 0x28
   1b1e4:	4b0f      	ldr	r3, [pc, #60]	; (1b224 <updateSensorState+0xec>)
   1b1e6:	4798      	blx	r3
}
   1b1e8:	e00a      	b.n	1b200 <updateSensorState+0xc8>
		THREEPHASE_OK_LED_OFF;
   1b1ea:	2101      	movs	r1, #1
   1b1ec:	2027      	movs	r0, #39	; 0x27
   1b1ee:	4b0d      	ldr	r3, [pc, #52]	; (1b224 <updateSensorState+0xec>)
   1b1f0:	4798      	blx	r3
		AUTO_ON_LED_OFF;
   1b1f2:	2101      	movs	r1, #1
   1b1f4:	2028      	movs	r0, #40	; 0x28
   1b1f6:	4b0b      	ldr	r3, [pc, #44]	; (1b224 <updateSensorState+0xec>)
   1b1f8:	4798      	blx	r3
		startTimerOn=false;
   1b1fa:	4b0b      	ldr	r3, [pc, #44]	; (1b228 <updateSensorState+0xf0>)
   1b1fc:	2200      	movs	r2, #0
   1b1fe:	701a      	strb	r2, [r3, #0]
}
   1b200:	46c0      	nop			; (mov r8, r8)
   1b202:	46bd      	mov	sp, r7
   1b204:	b004      	add	sp, #16
   1b206:	bdb0      	pop	{r4, r5, r7, pc}
   1b208:	0001aed1 	.word	0x0001aed1
   1b20c:	0001af05 	.word	0x0001af05
   1b210:	0001af39 	.word	0x0001af39
   1b214:	0001ae9d 	.word	0x0001ae9d
   1b218:	0001aebd 	.word	0x0001aebd
   1b21c:	20000654 	.word	0x20000654
   1b220:	0001aef1 	.word	0x0001aef1
   1b224:	0001958d 	.word	0x0001958d
   1b228:	2000079a 	.word	0x2000079a

0001b22c <resetAutoStart>:

void resetAutoStart(bool setChange)
{
   1b22c:	b580      	push	{r7, lr}
   1b22e:	b082      	sub	sp, #8
   1b230:	af00      	add	r7, sp, #0
   1b232:	0002      	movs	r2, r0
   1b234:	1dfb      	adds	r3, r7, #7
   1b236:	701a      	strb	r2, [r3, #0]
	if (!(bool)user_settings_parameter_struct.autoStartAddress)
   1b238:	4b0f      	ldr	r3, [pc, #60]	; (1b278 <resetAutoStart+0x4c>)
   1b23a:	785b      	ldrb	r3, [r3, #1]
   1b23c:	b2db      	uxtb	r3, r3
   1b23e:	2b00      	cmp	r3, #0
   1b240:	d107      	bne.n	1b252 <resetAutoStart+0x26>
	{
		startTimerOn=false;
   1b242:	4b0e      	ldr	r3, [pc, #56]	; (1b27c <resetAutoStart+0x50>)
   1b244:	2200      	movs	r2, #0
   1b246:	701a      	strb	r2, [r3, #0]
		AUTO_ON_LED_OFF;
   1b248:	2101      	movs	r1, #1
   1b24a:	2028      	movs	r0, #40	; 0x28
   1b24c:	4b0c      	ldr	r3, [pc, #48]	; (1b280 <resetAutoStart+0x54>)
   1b24e:	4798      	blx	r3
		if (setChange)
		{
			triggerAutoStart();
		}
	}
}
   1b250:	e00e      	b.n	1b270 <resetAutoStart+0x44>
	else if ((bool)user_settings_parameter_struct.autoStartAddress)
   1b252:	4b09      	ldr	r3, [pc, #36]	; (1b278 <resetAutoStart+0x4c>)
   1b254:	785b      	ldrb	r3, [r3, #1]
   1b256:	b2db      	uxtb	r3, r3
   1b258:	2b00      	cmp	r3, #0
   1b25a:	d009      	beq.n	1b270 <resetAutoStart+0x44>
		AUTO_ON_LED_ON;
   1b25c:	2100      	movs	r1, #0
   1b25e:	2028      	movs	r0, #40	; 0x28
   1b260:	4b07      	ldr	r3, [pc, #28]	; (1b280 <resetAutoStart+0x54>)
   1b262:	4798      	blx	r3
		if (setChange)
   1b264:	1dfb      	adds	r3, r7, #7
   1b266:	781b      	ldrb	r3, [r3, #0]
   1b268:	2b00      	cmp	r3, #0
   1b26a:	d001      	beq.n	1b270 <resetAutoStart+0x44>
			triggerAutoStart();
   1b26c:	4b05      	ldr	r3, [pc, #20]	; (1b284 <resetAutoStart+0x58>)
   1b26e:	4798      	blx	r3
}
   1b270:	46c0      	nop			; (mov r8, r8)
   1b272:	46bd      	mov	sp, r7
   1b274:	b002      	add	sp, #8
   1b276:	bd80      	pop	{r7, pc}
   1b278:	20000654 	.word	0x20000654
   1b27c:	2000079a 	.word	0x2000079a
   1b280:	0001958d 	.word	0x0001958d
   1b284:	0001b289 	.word	0x0001b289

0001b288 <triggerAutoStart>:

void triggerAutoStart(void)
{
   1b288:	b580      	push	{r7, lr}
   1b28a:	af00      	add	r7, sp, #0
	if (!getMotorState())
   1b28c:	4b0b      	ldr	r3, [pc, #44]	; (1b2bc <triggerAutoStart+0x34>)
   1b28e:	4798      	blx	r3
   1b290:	0003      	movs	r3, r0
   1b292:	001a      	movs	r2, r3
   1b294:	2301      	movs	r3, #1
   1b296:	4053      	eors	r3, r2
   1b298:	b2db      	uxtb	r3, r3
   1b29a:	2b00      	cmp	r3, #0
   1b29c:	d00b      	beq.n	1b2b6 <triggerAutoStart+0x2e>
	{
		//if (getAllPhaseState() && getACPowerState())
		if (getAllPhaseState())
   1b29e:	4b08      	ldr	r3, [pc, #32]	; (1b2c0 <triggerAutoStart+0x38>)
   1b2a0:	4798      	blx	r3
   1b2a2:	1e03      	subs	r3, r0, #0
   1b2a4:	d007      	beq.n	1b2b6 <triggerAutoStart+0x2e>
		{
			startTimerOn = true;
   1b2a6:	4b07      	ldr	r3, [pc, #28]	; (1b2c4 <triggerAutoStart+0x3c>)
   1b2a8:	2201      	movs	r2, #1
   1b2aa:	701a      	strb	r2, [r3, #0]
			tempStartTimer = xTaskGetTickCount();
   1b2ac:	4b06      	ldr	r3, [pc, #24]	; (1b2c8 <triggerAutoStart+0x40>)
   1b2ae:	4798      	blx	r3
   1b2b0:	0002      	movs	r2, r0
   1b2b2:	4b06      	ldr	r3, [pc, #24]	; (1b2cc <triggerAutoStart+0x44>)
   1b2b4:	601a      	str	r2, [r3, #0]
		}
	}
}
   1b2b6:	46c0      	nop			; (mov r8, r8)
   1b2b8:	46bd      	mov	sp, r7
   1b2ba:	bd80      	pop	{r7, pc}
   1b2bc:	0001af25 	.word	0x0001af25
   1b2c0:	0001aebd 	.word	0x0001aebd
   1b2c4:	2000079a 	.word	0x2000079a
   1b2c8:	000200dd 	.word	0x000200dd
   1b2cc:	200007a0 	.word	0x200007a0

0001b2d0 <operateOnEvent>:

void operateOnEvent(void)
{
   1b2d0:	b590      	push	{r4, r7, lr}
   1b2d2:	b083      	sub	sp, #12
   1b2d4:	af00      	add	r7, sp, #0
	uint8_t t3Phase;
	//bool t3Phase, tMotor, tacPhase;
	bool tPhaseSeq, tMotor, tacPhase;
	readSensorState(&t3Phase, &tPhaseSeq, &tMotor, &tacPhase);
   1b2d6:	1d3b      	adds	r3, r7, #4
   1b2d8:	1d7a      	adds	r2, r7, #5
   1b2da:	1db9      	adds	r1, r7, #6
   1b2dc:	1df8      	adds	r0, r7, #7
   1b2de:	4c5e      	ldr	r4, [pc, #376]	; (1b458 <operateOnEvent+0x188>)
   1b2e0:	47a0      	blx	r4
	eventOccured = false;
   1b2e2:	4b5e      	ldr	r3, [pc, #376]	; (1b45c <operateOnEvent+0x18c>)
   1b2e4:	2200      	movs	r2, #0
   1b2e6:	701a      	strb	r2, [r3, #0]
	
	//todo: add current phase Sequence and previous phase sequence is equals check here
	//if ((t3Phase == getAllPhaseState()) && (tMotor == getMotorState()) && (tacPhase == getACPowerState()))
	if ((t3Phase == getAllPhaseState()) && (tMotor == getMotorState()))
   1b2e8:	4b5d      	ldr	r3, [pc, #372]	; (1b460 <operateOnEvent+0x190>)
   1b2ea:	4798      	blx	r3
   1b2ec:	0003      	movs	r3, r0
   1b2ee:	001a      	movs	r2, r3
   1b2f0:	1dfb      	adds	r3, r7, #7
   1b2f2:	781b      	ldrb	r3, [r3, #0]
   1b2f4:	429a      	cmp	r2, r3
   1b2f6:	d108      	bne.n	1b30a <operateOnEvent+0x3a>
   1b2f8:	4b5a      	ldr	r3, [pc, #360]	; (1b464 <operateOnEvent+0x194>)
   1b2fa:	4798      	blx	r3
   1b2fc:	0003      	movs	r3, r0
   1b2fe:	001a      	movs	r2, r3
   1b300:	1d7b      	adds	r3, r7, #5
   1b302:	781b      	ldrb	r3, [r3, #0]
   1b304:	429a      	cmp	r2, r3
   1b306:	d100      	bne.n	1b30a <operateOnEvent+0x3a>
   1b308:	e0a1      	b.n	1b44e <operateOnEvent+0x17e>
	{
		return;
	}
	if (getMotorState())	//motorOn
   1b30a:	4b56      	ldr	r3, [pc, #344]	; (1b464 <operateOnEvent+0x194>)
   1b30c:	4798      	blx	r3
   1b30e:	1e03      	subs	r3, r0, #0
   1b310:	d05d      	beq.n	1b3ce <operateOnEvent+0xfe>
	{
		if (t3Phase==AC_OFF && !tMotor && !tacPhase)	//acPower Cut Off
   1b312:	1dfb      	adds	r3, r7, #7
   1b314:	781b      	ldrb	r3, [r3, #0]
   1b316:	2b00      	cmp	r3, #0
   1b318:	d11e      	bne.n	1b358 <operateOnEvent+0x88>
   1b31a:	1d7b      	adds	r3, r7, #5
   1b31c:	781b      	ldrb	r3, [r3, #0]
   1b31e:	2201      	movs	r2, #1
   1b320:	4053      	eors	r3, r2
   1b322:	b2db      	uxtb	r3, r3
   1b324:	2b00      	cmp	r3, #0
   1b326:	d017      	beq.n	1b358 <operateOnEvent+0x88>
   1b328:	1d3b      	adds	r3, r7, #4
   1b32a:	781b      	ldrb	r3, [r3, #0]
   1b32c:	2201      	movs	r2, #1
   1b32e:	4053      	eors	r3, r2
   1b330:	b2db      	uxtb	r3, r3
   1b332:	2b00      	cmp	r3, #0
   1b334:	d010      	beq.n	1b358 <operateOnEvent+0x88>
		{
			stopMotor(false,true,false);
   1b336:	2200      	movs	r2, #0
   1b338:	2101      	movs	r1, #1
   1b33a:	2000      	movs	r0, #0
   1b33c:	4b4a      	ldr	r3, [pc, #296]	; (1b468 <operateOnEvent+0x198>)
   1b33e:	4798      	blx	r3
			THREEPHASE_OK_LED_OFF;
   1b340:	2101      	movs	r1, #1
   1b342:	2027      	movs	r0, #39	; 0x27
   1b344:	4b49      	ldr	r3, [pc, #292]	; (1b46c <operateOnEvent+0x19c>)
   1b346:	4798      	blx	r3
			simEventTemp[6] = registerEvent('C'); //report To SIM Motor Off due to POWER CUT OFF
   1b348:	2043      	movs	r0, #67	; 0x43
   1b34a:	4b49      	ldr	r3, [pc, #292]	; (1b470 <operateOnEvent+0x1a0>)
   1b34c:	4798      	blx	r3
   1b34e:	0003      	movs	r3, r0
   1b350:	001a      	movs	r2, r3
   1b352:	4b48      	ldr	r3, [pc, #288]	; (1b474 <operateOnEvent+0x1a4>)
   1b354:	719a      	strb	r2, [r3, #6]
   1b356:	e06f      	b.n	1b438 <operateOnEvent+0x168>
		}
		////////////////////////////////////////Unknown Motor Off Check ////////////////////////////////////////
		
		//else if ((tacPhase && getACPowerState()) &&																										//AC PHASE PRESENT
		else if (((user_settings_parameter_struct.detectSinglePhasing && t3Phase==AC_3PH && getAllPhaseState()==AC_3PH) ||								//IF SPP ON, 3 phase old and current is present
   1b358:	4b47      	ldr	r3, [pc, #284]	; (1b478 <operateOnEvent+0x1a8>)
   1b35a:	2220      	movs	r2, #32
   1b35c:	5c9b      	ldrb	r3, [r3, r2]
   1b35e:	b2db      	uxtb	r3, r3
   1b360:	2b00      	cmp	r3, #0
   1b362:	d008      	beq.n	1b376 <operateOnEvent+0xa6>
   1b364:	1dfb      	adds	r3, r7, #7
   1b366:	781b      	ldrb	r3, [r3, #0]
   1b368:	2b03      	cmp	r3, #3
   1b36a:	d104      	bne.n	1b376 <operateOnEvent+0xa6>
   1b36c:	4b3c      	ldr	r3, [pc, #240]	; (1b460 <operateOnEvent+0x190>)
   1b36e:	4798      	blx	r3
   1b370:	0003      	movs	r3, r0
   1b372:	2b03      	cmp	r3, #3
   1b374:	d00e      	beq.n	1b394 <operateOnEvent+0xc4>
		(!user_settings_parameter_struct.detectSinglePhasing) && t3Phase>=AC_2PH && getAllPhaseState()>=AC_2PH) &&							//IF SPP OFF, 3 phase old and current is >= 2 phase
   1b376:	4b40      	ldr	r3, [pc, #256]	; (1b478 <operateOnEvent+0x1a8>)
   1b378:	2220      	movs	r2, #32
   1b37a:	5c9b      	ldrb	r3, [r3, r2]
   1b37c:	b2db      	uxtb	r3, r3
		else if (((user_settings_parameter_struct.detectSinglePhasing && t3Phase==AC_3PH && getAllPhaseState()==AC_3PH) ||								//IF SPP ON, 3 phase old and current is present
   1b37e:	2b00      	cmp	r3, #0
   1b380:	d112      	bne.n	1b3a8 <operateOnEvent+0xd8>
		(!user_settings_parameter_struct.detectSinglePhasing) && t3Phase>=AC_2PH && getAllPhaseState()>=AC_2PH) &&							//IF SPP OFF, 3 phase old and current is >= 2 phase
   1b382:	1dfb      	adds	r3, r7, #7
   1b384:	781b      	ldrb	r3, [r3, #0]
   1b386:	2b01      	cmp	r3, #1
   1b388:	d90e      	bls.n	1b3a8 <operateOnEvent+0xd8>
   1b38a:	4b35      	ldr	r3, [pc, #212]	; (1b460 <operateOnEvent+0x190>)
   1b38c:	4798      	blx	r3
   1b38e:	0003      	movs	r3, r0
   1b390:	2b01      	cmp	r3, #1
   1b392:	d909      	bls.n	1b3a8 <operateOnEvent+0xd8>
		(!tMotor))																																// AND MOTOR HAS TURNED OFF
   1b394:	1d7b      	adds	r3, r7, #5
   1b396:	781b      	ldrb	r3, [r3, #0]
   1b398:	2201      	movs	r2, #1
   1b39a:	4053      	eors	r3, r2
   1b39c:	b2db      	uxtb	r3, r3
		(!user_settings_parameter_struct.detectSinglePhasing) && t3Phase>=AC_2PH && getAllPhaseState()>=AC_2PH) &&							//IF SPP OFF, 3 phase old and current is >= 2 phase
   1b39e:	2b00      	cmp	r3, #0
   1b3a0:	d002      	beq.n	1b3a8 <operateOnEvent+0xd8>
		{
			unknownMotorOff();
   1b3a2:	4b36      	ldr	r3, [pc, #216]	; (1b47c <operateOnEvent+0x1ac>)
   1b3a4:	4798      	blx	r3
   1b3a6:	e047      	b.n	1b438 <operateOnEvent+0x168>
		}
		///////////////////////// SINGLE PHASING CHECK /////////////////////////
		else if (user_settings_parameter_struct.detectSinglePhasing &&																						//SPP IS ON
   1b3a8:	4b33      	ldr	r3, [pc, #204]	; (1b478 <operateOnEvent+0x1a8>)
   1b3aa:	2220      	movs	r2, #32
   1b3ac:	5c9b      	ldrb	r3, [r3, r2]
   1b3ae:	b2db      	uxtb	r3, r3
   1b3b0:	2b00      	cmp	r3, #0
   1b3b2:	d041      	beq.n	1b438 <operateOnEvent+0x168>
		t3Phase==AC_2PH) /*&&																														// Only 2 Phase Present
   1b3b4:	1dfb      	adds	r3, r7, #7
   1b3b6:	781b      	ldrb	r3, [r3, #0]
		else if (user_settings_parameter_struct.detectSinglePhasing &&																						//SPP IS ON
   1b3b8:	2b02      	cmp	r3, #2
   1b3ba:	d13d      	bne.n	1b438 <operateOnEvent+0x168>
		tacPhase)*/ ////single phasing occured																									// AC Phase is Present
		{
			tempSinglePhasingTimer = xTaskGetTickCount();
   1b3bc:	4b30      	ldr	r3, [pc, #192]	; (1b480 <operateOnEvent+0x1b0>)
   1b3be:	4798      	blx	r3
   1b3c0:	0002      	movs	r2, r0
   1b3c2:	4b30      	ldr	r3, [pc, #192]	; (1b484 <operateOnEvent+0x1b4>)
   1b3c4:	601a      	str	r2, [r3, #0]
			singlePhasingTimerOn = true;
   1b3c6:	4b30      	ldr	r3, [pc, #192]	; (1b488 <operateOnEvent+0x1b8>)
   1b3c8:	2201      	movs	r2, #1
   1b3ca:	701a      	strb	r2, [r3, #0]
   1b3cc:	e034      	b.n	1b438 <operateOnEvent+0x168>
		}
	}
	else
	{
		if (tMotor)		// motor turn on manually
   1b3ce:	1d7b      	adds	r3, r7, #5
   1b3d0:	781b      	ldrb	r3, [r3, #0]
   1b3d2:	2b00      	cmp	r3, #0
   1b3d4:	d028      	beq.n	1b428 <operateOnEvent+0x158>
		{
			if (t3Phase==AC_3PH && tPhaseSeq && tacPhase)
   1b3d6:	1dfb      	adds	r3, r7, #7
   1b3d8:	781b      	ldrb	r3, [r3, #0]
   1b3da:	2b03      	cmp	r3, #3
   1b3dc:	d11e      	bne.n	1b41c <operateOnEvent+0x14c>
   1b3de:	1dbb      	adds	r3, r7, #6
   1b3e0:	781b      	ldrb	r3, [r3, #0]
   1b3e2:	2b00      	cmp	r3, #0
   1b3e4:	d01a      	beq.n	1b41c <operateOnEvent+0x14c>
   1b3e6:	1d3b      	adds	r3, r7, #4
   1b3e8:	781b      	ldrb	r3, [r3, #0]
   1b3ea:	2b00      	cmp	r3, #0
   1b3ec:	d016      	beq.n	1b41c <operateOnEvent+0x14c>
			{
				if (startTimerOn)
   1b3ee:	4b27      	ldr	r3, [pc, #156]	; (1b48c <operateOnEvent+0x1bc>)
   1b3f0:	781b      	ldrb	r3, [r3, #0]
   1b3f2:	2b00      	cmp	r3, #0
   1b3f4:	d002      	beq.n	1b3fc <operateOnEvent+0x12c>
				{
					startTimerOn = false;
   1b3f6:	4b25      	ldr	r3, [pc, #148]	; (1b48c <operateOnEvent+0x1bc>)
   1b3f8:	2200      	movs	r2, #0
   1b3fa:	701a      	strb	r2, [r3, #0]
				}
				THREEPHASE_OK_LED_ON;
   1b3fc:	2100      	movs	r1, #0
   1b3fe:	2027      	movs	r0, #39	; 0x27
   1b400:	4b1a      	ldr	r3, [pc, #104]	; (1b46c <operateOnEvent+0x19c>)
   1b402:	4798      	blx	r3
				simEventTemp[7] = registerEvent('S');	//register To SIM Motor has started
   1b404:	2053      	movs	r0, #83	; 0x53
   1b406:	4b1a      	ldr	r3, [pc, #104]	; (1b470 <operateOnEvent+0x1a0>)
   1b408:	4798      	blx	r3
   1b40a:	0003      	movs	r3, r0
   1b40c:	001a      	movs	r2, r3
   1b40e:	4b19      	ldr	r3, [pc, #100]	; (1b474 <operateOnEvent+0x1a4>)
   1b410:	71da      	strb	r2, [r3, #7]
				startMotor(true,true);
   1b412:	2101      	movs	r1, #1
   1b414:	2001      	movs	r0, #1
   1b416:	4b1e      	ldr	r3, [pc, #120]	; (1b490 <operateOnEvent+0x1c0>)
   1b418:	4798      	blx	r3
   1b41a:	e00d      	b.n	1b438 <operateOnEvent+0x168>
			}
			else
			{
				stopMotor(false,true,false);
   1b41c:	2200      	movs	r2, #0
   1b41e:	2101      	movs	r1, #1
   1b420:	2000      	movs	r0, #0
   1b422:	4b11      	ldr	r3, [pc, #68]	; (1b468 <operateOnEvent+0x198>)
   1b424:	4798      	blx	r3
   1b426:	e007      	b.n	1b438 <operateOnEvent+0x168>
			}
		}
		else
		{
			waitStableLineOn = true;
   1b428:	4b1a      	ldr	r3, [pc, #104]	; (1b494 <operateOnEvent+0x1c4>)
   1b42a:	2201      	movs	r2, #1
   1b42c:	701a      	strb	r2, [r3, #0]
			waitStableLineTimer = xTaskGetTickCount();
   1b42e:	4b14      	ldr	r3, [pc, #80]	; (1b480 <operateOnEvent+0x1b0>)
   1b430:	4798      	blx	r3
   1b432:	0002      	movs	r2, r0
   1b434:	4b18      	ldr	r3, [pc, #96]	; (1b498 <operateOnEvent+0x1c8>)
   1b436:	601a      	str	r2, [r3, #0]
		}
	}
	updateSensorState(t3Phase,tPhaseSeq, tMotor,tacPhase);
   1b438:	1dfb      	adds	r3, r7, #7
   1b43a:	7818      	ldrb	r0, [r3, #0]
   1b43c:	1dbb      	adds	r3, r7, #6
   1b43e:	7819      	ldrb	r1, [r3, #0]
   1b440:	1d7b      	adds	r3, r7, #5
   1b442:	781a      	ldrb	r2, [r3, #0]
   1b444:	1d3b      	adds	r3, r7, #4
   1b446:	781b      	ldrb	r3, [r3, #0]
   1b448:	4c14      	ldr	r4, [pc, #80]	; (1b49c <operateOnEvent+0x1cc>)
   1b44a:	47a0      	blx	r4
   1b44c:	e000      	b.n	1b450 <operateOnEvent+0x180>
		return;
   1b44e:	46c0      	nop			; (mov r8, r8)
}
   1b450:	46bd      	mov	sp, r7
   1b452:	b003      	add	sp, #12
   1b454:	bd90      	pop	{r4, r7, pc}
   1b456:	46c0      	nop			; (mov r8, r8)
   1b458:	0001afa9 	.word	0x0001afa9
   1b45c:	2000072e 	.word	0x2000072e
   1b460:	0001aebd 	.word	0x0001aebd
   1b464:	0001af25 	.word	0x0001af25
   1b468:	0001b829 	.word	0x0001b829
   1b46c:	0001958d 	.word	0x0001958d
   1b470:	00014b6d 	.word	0x00014b6d
   1b474:	20000718 	.word	0x20000718
   1b478:	20000654 	.word	0x20000654
   1b47c:	0001b955 	.word	0x0001b955
   1b480:	000200dd 	.word	0x000200dd
   1b484:	20000778 	.word	0x20000778
   1b488:	20000791 	.word	0x20000791
   1b48c:	2000079a 	.word	0x2000079a
   1b490:	0001b641 	.word	0x0001b641
   1b494:	2000080d 	.word	0x2000080d
   1b498:	200007cc 	.word	0x200007cc
   1b49c:	0001b139 	.word	0x0001b139

0001b4a0 <checkLineSensors>:

uint8_t checkLineSensors(void)
{
   1b4a0:	b580      	push	{r7, lr}
   1b4a2:	af00      	add	r7, sp, #0
	return structThreePhase_state.u8t_phase_ac_state;
   1b4a4:	4b02      	ldr	r3, [pc, #8]	; (1b4b0 <checkLineSensors+0x10>)
   1b4a6:	785b      	ldrb	r3, [r3, #1]
   1b4a8:	b2db      	uxtb	r3, r3
}
   1b4aa:	0018      	movs	r0, r3
   1b4ac:	46bd      	mov	sp, r7
   1b4ae:	bd80      	pop	{r7, pc}
   1b4b0:	20000748 	.word	0x20000748

0001b4b4 <operateOnStableLine>:

void operateOnStableLine(void)
{
   1b4b4:	b590      	push	{r4, r7, lr}
   1b4b6:	b083      	sub	sp, #12
   1b4b8:	af00      	add	r7, sp, #0
	waitStableLineOn = false;
   1b4ba:	4b45      	ldr	r3, [pc, #276]	; (1b5d0 <operateOnStableLine+0x11c>)
   1b4bc:	2200      	movs	r2, #0
   1b4be:	701a      	strb	r2, [r3, #0]
	uint8_t temp = checkLineSensors();
   1b4c0:	1dbc      	adds	r4, r7, #6
   1b4c2:	4b44      	ldr	r3, [pc, #272]	; (1b5d4 <operateOnStableLine+0x120>)
   1b4c4:	4798      	blx	r3
   1b4c6:	0003      	movs	r3, r0
   1b4c8:	7023      	strb	r3, [r4, #0]
	if (temp == AC_3PH)
   1b4ca:	1dbb      	adds	r3, r7, #6
   1b4cc:	781b      	ldrb	r3, [r3, #0]
   1b4ce:	2b03      	cmp	r3, #3
   1b4d0:	d136      	bne.n	1b540 <operateOnStableLine+0x8c>
	{
		bool tempPhaseSeq = true;													//Set Temp Phase Seq to True
   1b4d2:	1dfb      	adds	r3, r7, #7
   1b4d4:	2201      	movs	r2, #1
   1b4d6:	701a      	strb	r2, [r3, #0]
		if(user_settings_parameter_struct.detectPhaseSequence)						// if Sequence Detection is needed
   1b4d8:	4b3f      	ldr	r3, [pc, #252]	; (1b5d8 <operateOnStableLine+0x124>)
   1b4da:	2224      	movs	r2, #36	; 0x24
   1b4dc:	5c9b      	ldrb	r3, [r3, r2]
   1b4de:	b2db      	uxtb	r3, r3
   1b4e0:	2b00      	cmp	r3, #0
   1b4e2:	d004      	beq.n	1b4ee <operateOnStableLine+0x3a>
		{
			tempPhaseSeq = getPhaseSequence();										// set current phase seq to the temp variable
   1b4e4:	1dfc      	adds	r4, r7, #7
   1b4e6:	4b3d      	ldr	r3, [pc, #244]	; (1b5dc <operateOnStableLine+0x128>)
   1b4e8:	4798      	blx	r3
   1b4ea:	0003      	movs	r3, r0
   1b4ec:	7023      	strb	r3, [r4, #0]
		}
		
		if(tempPhaseSeq)															// if correct phase seq than
   1b4ee:	1dfb      	adds	r3, r7, #7
   1b4f0:	781b      	ldrb	r3, [r3, #0]
   1b4f2:	2b00      	cmp	r3, #0
   1b4f4:	d018      	beq.n	1b528 <operateOnStableLine+0x74>
		{
			THREEPHASE_OK_LED_ON;
   1b4f6:	2100      	movs	r1, #0
   1b4f8:	2027      	movs	r0, #39	; 0x27
   1b4fa:	4b39      	ldr	r3, [pc, #228]	; (1b5e0 <operateOnStableLine+0x12c>)
   1b4fc:	4798      	blx	r3
			if (user_settings_parameter_struct.autoStartAddress)
   1b4fe:	4b36      	ldr	r3, [pc, #216]	; (1b5d8 <operateOnStableLine+0x124>)
   1b500:	785b      	ldrb	r3, [r3, #1]
   1b502:	b2db      	uxtb	r3, r3
   1b504:	2b00      	cmp	r3, #0
   1b506:	d002      	beq.n	1b50e <operateOnStableLine+0x5a>
			{
				triggerAutoStart();
   1b508:	4b36      	ldr	r3, [pc, #216]	; (1b5e4 <operateOnStableLine+0x130>)
   1b50a:	4798      	blx	r3
		(last_three_phase_state == AC_3PH && user_settings_parameter_struct.dndAddress != DND_LIGHT))			//PREVIOSULY 3 PHASE, and NOT ON FOR ALL EVENTS
		{
			simEventTemp[5] = registerEvent('L'); //register To SIM AC Power OFF
		}
	}
}
   1b50c:	e05b      	b.n	1b5c6 <operateOnStableLine+0x112>
				if (user_settings_parameter_struct.dndAddress!=DND_LIGHT)			//DND IS OFF FOR ALL 3 PHASE LIGHT EVENTS, DND IS ON FOR SINGLE PHASING EVENTS
   1b50e:	4b32      	ldr	r3, [pc, #200]	; (1b5d8 <operateOnStableLine+0x124>)
   1b510:	791b      	ldrb	r3, [r3, #4]
   1b512:	b2db      	uxtb	r3, r3
   1b514:	2b4c      	cmp	r3, #76	; 0x4c
   1b516:	d056      	beq.n	1b5c6 <operateOnStableLine+0x112>
					simEventTemp[4] = registerEvent('G');							//register TO SIM AC power ON
   1b518:	2047      	movs	r0, #71	; 0x47
   1b51a:	4b33      	ldr	r3, [pc, #204]	; (1b5e8 <operateOnStableLine+0x134>)
   1b51c:	4798      	blx	r3
   1b51e:	0003      	movs	r3, r0
   1b520:	001a      	movs	r2, r3
   1b522:	4b32      	ldr	r3, [pc, #200]	; (1b5ec <operateOnStableLine+0x138>)
   1b524:	711a      	strb	r2, [r3, #4]
}
   1b526:	e04e      	b.n	1b5c6 <operateOnStableLine+0x112>
			THREEPHASE_OK_LED_OFF;
   1b528:	2101      	movs	r1, #1
   1b52a:	2027      	movs	r0, #39	; 0x27
   1b52c:	4b2c      	ldr	r3, [pc, #176]	; (1b5e0 <operateOnStableLine+0x12c>)
   1b52e:	4798      	blx	r3
			simEventTemp[9] = registerEvent('A');								//incorrect sequence
   1b530:	2041      	movs	r0, #65	; 0x41
   1b532:	4b2d      	ldr	r3, [pc, #180]	; (1b5e8 <operateOnStableLine+0x134>)
   1b534:	4798      	blx	r3
   1b536:	0003      	movs	r3, r0
   1b538:	001a      	movs	r2, r3
   1b53a:	4b2c      	ldr	r3, [pc, #176]	; (1b5ec <operateOnStableLine+0x138>)
   1b53c:	725a      	strb	r2, [r3, #9]
}
   1b53e:	e042      	b.n	1b5c6 <operateOnStableLine+0x112>
	else if (temp == AC_2PH) //Got Power in 2 phase
   1b540:	1dbb      	adds	r3, r7, #6
   1b542:	781b      	ldrb	r3, [r3, #0]
   1b544:	2b02      	cmp	r3, #2
   1b546:	d116      	bne.n	1b576 <operateOnStableLine+0xc2>
		THREEPHASE_OK_LED_OFF;
   1b548:	2101      	movs	r1, #1
   1b54a:	2027      	movs	r0, #39	; 0x27
   1b54c:	4b24      	ldr	r3, [pc, #144]	; (1b5e0 <operateOnStableLine+0x12c>)
   1b54e:	4798      	blx	r3
		if (user_settings_parameter_struct.dndAddress == DND_OFF &&					//DND IS OFF FOR ALL KIND OF EVENTS
   1b550:	4b21      	ldr	r3, [pc, #132]	; (1b5d8 <operateOnStableLine+0x124>)
   1b552:	791b      	ldrb	r3, [r3, #4]
   1b554:	b2db      	uxtb	r3, r3
   1b556:	2b4f      	cmp	r3, #79	; 0x4f
   1b558:	d135      	bne.n	1b5c6 <operateOnStableLine+0x112>
		user_settings_parameter_struct.detectSinglePhasing)					//SINGLE PHASING PROTECTION IS ON
   1b55a:	4b1f      	ldr	r3, [pc, #124]	; (1b5d8 <operateOnStableLine+0x124>)
   1b55c:	2220      	movs	r2, #32
   1b55e:	5c9b      	ldrb	r3, [r3, r2]
   1b560:	b2db      	uxtb	r3, r3
		if (user_settings_parameter_struct.dndAddress == DND_OFF &&					//DND IS OFF FOR ALL KIND OF EVENTS
   1b562:	2b00      	cmp	r3, #0
   1b564:	d02f      	beq.n	1b5c6 <operateOnStableLine+0x112>
			simEventTemp[9] = registerEvent('A'); //register TO SIM 2 phase power ON
   1b566:	2041      	movs	r0, #65	; 0x41
   1b568:	4b1f      	ldr	r3, [pc, #124]	; (1b5e8 <operateOnStableLine+0x134>)
   1b56a:	4798      	blx	r3
   1b56c:	0003      	movs	r3, r0
   1b56e:	001a      	movs	r2, r3
   1b570:	4b1e      	ldr	r3, [pc, #120]	; (1b5ec <operateOnStableLine+0x138>)
   1b572:	725a      	strb	r2, [r3, #9]
}
   1b574:	e027      	b.n	1b5c6 <operateOnStableLine+0x112>
	else if (temp == AC_OFF)	//Lost Power in All Phase
   1b576:	1dbb      	adds	r3, r7, #6
   1b578:	781b      	ldrb	r3, [r3, #0]
   1b57a:	2b00      	cmp	r3, #0
   1b57c:	d123      	bne.n	1b5c6 <operateOnStableLine+0x112>
		THREEPHASE_OK_LED_OFF;
   1b57e:	2101      	movs	r1, #1
   1b580:	2027      	movs	r0, #39	; 0x27
   1b582:	4b17      	ldr	r3, [pc, #92]	; (1b5e0 <operateOnStableLine+0x12c>)
   1b584:	4798      	blx	r3
		if ((user_settings_parameter_struct.dndAddress == DND_OFF) ||												//DND IS OFF FOR ALL EVENTS
   1b586:	4b14      	ldr	r3, [pc, #80]	; (1b5d8 <operateOnStableLine+0x124>)
   1b588:	791b      	ldrb	r3, [r3, #4]
   1b58a:	b2db      	uxtb	r3, r3
   1b58c:	2b4f      	cmp	r3, #79	; 0x4f
   1b58e:	d013      	beq.n	1b5b8 <operateOnStableLine+0x104>
		(last_three_phase_state == AC_2PH && user_settings_parameter_struct.dndAddress == DND_OFF) ||			//PREVIOUSLY SINGLE PHASING , and DND OFF FOR ALL EVENTS
   1b590:	4b17      	ldr	r3, [pc, #92]	; (1b5f0 <operateOnStableLine+0x13c>)
   1b592:	781b      	ldrb	r3, [r3, #0]
   1b594:	b2db      	uxtb	r3, r3
		if ((user_settings_parameter_struct.dndAddress == DND_OFF) ||												//DND IS OFF FOR ALL EVENTS
   1b596:	2b02      	cmp	r3, #2
   1b598:	d104      	bne.n	1b5a4 <operateOnStableLine+0xf0>
		(last_three_phase_state == AC_2PH && user_settings_parameter_struct.dndAddress == DND_OFF) ||			//PREVIOUSLY SINGLE PHASING , and DND OFF FOR ALL EVENTS
   1b59a:	4b0f      	ldr	r3, [pc, #60]	; (1b5d8 <operateOnStableLine+0x124>)
   1b59c:	791b      	ldrb	r3, [r3, #4]
   1b59e:	b2db      	uxtb	r3, r3
   1b5a0:	2b4f      	cmp	r3, #79	; 0x4f
   1b5a2:	d009      	beq.n	1b5b8 <operateOnStableLine+0x104>
		(last_three_phase_state == AC_3PH && user_settings_parameter_struct.dndAddress != DND_LIGHT))			//PREVIOSULY 3 PHASE, and NOT ON FOR ALL EVENTS
   1b5a4:	4b12      	ldr	r3, [pc, #72]	; (1b5f0 <operateOnStableLine+0x13c>)
   1b5a6:	781b      	ldrb	r3, [r3, #0]
   1b5a8:	b2db      	uxtb	r3, r3
		(last_three_phase_state == AC_2PH && user_settings_parameter_struct.dndAddress == DND_OFF) ||			//PREVIOUSLY SINGLE PHASING , and DND OFF FOR ALL EVENTS
   1b5aa:	2b03      	cmp	r3, #3
   1b5ac:	d10b      	bne.n	1b5c6 <operateOnStableLine+0x112>
		(last_three_phase_state == AC_3PH && user_settings_parameter_struct.dndAddress != DND_LIGHT))			//PREVIOSULY 3 PHASE, and NOT ON FOR ALL EVENTS
   1b5ae:	4b0a      	ldr	r3, [pc, #40]	; (1b5d8 <operateOnStableLine+0x124>)
   1b5b0:	791b      	ldrb	r3, [r3, #4]
   1b5b2:	b2db      	uxtb	r3, r3
   1b5b4:	2b4c      	cmp	r3, #76	; 0x4c
   1b5b6:	d006      	beq.n	1b5c6 <operateOnStableLine+0x112>
			simEventTemp[5] = registerEvent('L'); //register To SIM AC Power OFF
   1b5b8:	204c      	movs	r0, #76	; 0x4c
   1b5ba:	4b0b      	ldr	r3, [pc, #44]	; (1b5e8 <operateOnStableLine+0x134>)
   1b5bc:	4798      	blx	r3
   1b5be:	0003      	movs	r3, r0
   1b5c0:	001a      	movs	r2, r3
   1b5c2:	4b0a      	ldr	r3, [pc, #40]	; (1b5ec <operateOnStableLine+0x138>)
   1b5c4:	715a      	strb	r2, [r3, #5]
}
   1b5c6:	46c0      	nop			; (mov r8, r8)
   1b5c8:	46bd      	mov	sp, r7
   1b5ca:	b003      	add	sp, #12
   1b5cc:	bd90      	pop	{r4, r7, pc}
   1b5ce:	46c0      	nop			; (mov r8, r8)
   1b5d0:	2000080d 	.word	0x2000080d
   1b5d4:	0001b4a1 	.word	0x0001b4a1
   1b5d8:	20000654 	.word	0x20000654
   1b5dc:	0001aef1 	.word	0x0001aef1
   1b5e0:	0001958d 	.word	0x0001958d
   1b5e4:	0001b289 	.word	0x0001b289
   1b5e8:	00014b6d 	.word	0x00014b6d
   1b5ec:	20000718 	.word	0x20000718
   1b5f0:	2000072b 	.word	0x2000072b

0001b5f4 <waitStableLineOver>:

bool waitStableLineOver(void)
{
   1b5f4:	b580      	push	{r7, lr}
   1b5f6:	af00      	add	r7, sp, #0
	return (waitStableLineOn && xTaskGetTickCount() - waitStableLineTimer >= (waitStableLineTime * 100));
   1b5f8:	4b0d      	ldr	r3, [pc, #52]	; (1b630 <waitStableLineOver+0x3c>)
   1b5fa:	781b      	ldrb	r3, [r3, #0]
   1b5fc:	2b00      	cmp	r3, #0
   1b5fe:	d00e      	beq.n	1b61e <waitStableLineOver+0x2a>
   1b600:	4b0c      	ldr	r3, [pc, #48]	; (1b634 <waitStableLineOver+0x40>)
   1b602:	4798      	blx	r3
   1b604:	0002      	movs	r2, r0
   1b606:	4b0c      	ldr	r3, [pc, #48]	; (1b638 <waitStableLineOver+0x44>)
   1b608:	681b      	ldr	r3, [r3, #0]
   1b60a:	1ad3      	subs	r3, r2, r3
   1b60c:	4a0b      	ldr	r2, [pc, #44]	; (1b63c <waitStableLineOver+0x48>)
   1b60e:	7812      	ldrb	r2, [r2, #0]
   1b610:	0011      	movs	r1, r2
   1b612:	2264      	movs	r2, #100	; 0x64
   1b614:	434a      	muls	r2, r1
   1b616:	4293      	cmp	r3, r2
   1b618:	d301      	bcc.n	1b61e <waitStableLineOver+0x2a>
   1b61a:	2301      	movs	r3, #1
   1b61c:	e000      	b.n	1b620 <waitStableLineOver+0x2c>
   1b61e:	2300      	movs	r3, #0
   1b620:	1c1a      	adds	r2, r3, #0
   1b622:	2301      	movs	r3, #1
   1b624:	4013      	ands	r3, r2
   1b626:	b2db      	uxtb	r3, r3
}
   1b628:	0018      	movs	r0, r3
   1b62a:	46bd      	mov	sp, r7
   1b62c:	bd80      	pop	{r7, pc}
   1b62e:	46c0      	nop			; (mov r8, r8)
   1b630:	2000080d 	.word	0x2000080d
   1b634:	000200dd 	.word	0x000200dd
   1b638:	200007cc 	.word	0x200007cc
   1b63c:	200007dd 	.word	0x200007dd

0001b640 <startMotor>:


void startMotor(bool commanded, bool forcedStart)
{
   1b640:	b580      	push	{r7, lr}
   1b642:	b082      	sub	sp, #8
   1b644:	af00      	add	r7, sp, #0
   1b646:	0002      	movs	r2, r0
   1b648:	1dfb      	adds	r3, r7, #7
   1b64a:	701a      	strb	r2, [r3, #0]
   1b64c:	1dbb      	adds	r3, r7, #6
   1b64e:	1c0a      	adds	r2, r1, #0
   1b650:	701a      	strb	r2, [r3, #0]
	startTimerOn = false;
   1b652:	4b5f      	ldr	r3, [pc, #380]	; (1b7d0 <startMotor+0x190>)
   1b654:	2200      	movs	r2, #0
   1b656:	701a      	strb	r2, [r3, #0]

	//if (forcedStart || (getACPowerState() &&																														//AC Phase is Presnet
	//((getAllPhaseState()==AC_3PH) || (getAllPhaseState()==AC_2PH && !user_settings_parameter_struct.detectSinglePhasing)) &&				//3 phase is present, or SPP is OFF and 2 phase is present
	//((user_settings_parameter_struct.detectPhaseSequence && getPhaseSequence()) || (!user_settings_parameter_struct.detectPhaseSequence))))	//Phase Sequnce Protection is ON and correct phase seq, or Phase Seq Protection is off
	
	if (forcedStart || 																														//AC Phase is Presnet
   1b658:	1dbb      	adds	r3, r7, #6
   1b65a:	781b      	ldrb	r3, [r3, #0]
   1b65c:	2b00      	cmp	r3, #0
   1b65e:	d122      	bne.n	1b6a6 <startMotor+0x66>
	(((getAllPhaseState()==AC_3PH) || (getAllPhaseState()==AC_2PH && !user_settings_parameter_struct.detectSinglePhasing)) &&				//3 phase is present, or SPP is OFF and 2 phase is present
   1b660:	4b5c      	ldr	r3, [pc, #368]	; (1b7d4 <startMotor+0x194>)
   1b662:	4798      	blx	r3
   1b664:	0003      	movs	r3, r0
	if (forcedStart || 																														//AC Phase is Presnet
   1b666:	2b03      	cmp	r3, #3
   1b668:	d00c      	beq.n	1b684 <startMotor+0x44>
	(((getAllPhaseState()==AC_3PH) || (getAllPhaseState()==AC_2PH && !user_settings_parameter_struct.detectSinglePhasing)) &&				//3 phase is present, or SPP is OFF and 2 phase is present
   1b66a:	4b5a      	ldr	r3, [pc, #360]	; (1b7d4 <startMotor+0x194>)
   1b66c:	4798      	blx	r3
   1b66e:	0003      	movs	r3, r0
   1b670:	2b02      	cmp	r3, #2
   1b672:	d000      	beq.n	1b676 <startMotor+0x36>
   1b674:	e097      	b.n	1b7a6 <startMotor+0x166>
   1b676:	4b58      	ldr	r3, [pc, #352]	; (1b7d8 <startMotor+0x198>)
   1b678:	2220      	movs	r2, #32
   1b67a:	5c9b      	ldrb	r3, [r3, r2]
   1b67c:	b2db      	uxtb	r3, r3
   1b67e:	2b00      	cmp	r3, #0
   1b680:	d000      	beq.n	1b684 <startMotor+0x44>
   1b682:	e090      	b.n	1b7a6 <startMotor+0x166>
	((user_settings_parameter_struct.detectPhaseSequence && getPhaseSequence()) || (!user_settings_parameter_struct.detectPhaseSequence))))	//Phase Sequnce Protection is ON and correct phase seq, or Phase Seq Protection is off
   1b684:	4b54      	ldr	r3, [pc, #336]	; (1b7d8 <startMotor+0x198>)
   1b686:	2224      	movs	r2, #36	; 0x24
   1b688:	5c9b      	ldrb	r3, [r3, r2]
   1b68a:	b2db      	uxtb	r3, r3
	(((getAllPhaseState()==AC_3PH) || (getAllPhaseState()==AC_2PH && !user_settings_parameter_struct.detectSinglePhasing)) &&				//3 phase is present, or SPP is OFF and 2 phase is present
   1b68c:	2b00      	cmp	r3, #0
   1b68e:	d003      	beq.n	1b698 <startMotor+0x58>
	((user_settings_parameter_struct.detectPhaseSequence && getPhaseSequence()) || (!user_settings_parameter_struct.detectPhaseSequence))))	//Phase Sequnce Protection is ON and correct phase seq, or Phase Seq Protection is off
   1b690:	4b52      	ldr	r3, [pc, #328]	; (1b7dc <startMotor+0x19c>)
   1b692:	4798      	blx	r3
   1b694:	1e03      	subs	r3, r0, #0
   1b696:	d106      	bne.n	1b6a6 <startMotor+0x66>
   1b698:	4b4f      	ldr	r3, [pc, #316]	; (1b7d8 <startMotor+0x198>)
   1b69a:	2224      	movs	r2, #36	; 0x24
   1b69c:	5c9b      	ldrb	r3, [r3, r2]
   1b69e:	b2db      	uxtb	r3, r3
   1b6a0:	2b00      	cmp	r3, #0
   1b6a2:	d000      	beq.n	1b6a6 <startMotor+0x66>
   1b6a4:	e07f      	b.n	1b7a6 <startMotor+0x166>
	{
		if (!getMotorState())
   1b6a6:	4b4e      	ldr	r3, [pc, #312]	; (1b7e0 <startMotor+0x1a0>)
   1b6a8:	4798      	blx	r3
   1b6aa:	0003      	movs	r3, r0
   1b6ac:	001a      	movs	r2, r3
   1b6ae:	2301      	movs	r3, #1
   1b6b0:	4053      	eors	r3, r2
   1b6b2:	b2db      	uxtb	r3, r3
   1b6b4:	2b00      	cmp	r3, #0
   1b6b6:	d100      	bne.n	1b6ba <startMotor+0x7a>
   1b6b8:	e06d      	b.n	1b796 <startMotor+0x156>
		{
			if (factory_settings_parameter_struct.ENABLE_WATER)
   1b6ba:	4b4a      	ldr	r3, [pc, #296]	; (1b7e4 <startMotor+0x1a4>)
   1b6bc:	795b      	ldrb	r3, [r3, #5]
   1b6be:	2b00      	cmp	r3, #0
   1b6c0:	d036      	beq.n	1b730 <startMotor+0xf0>
			{
				if(!(user_settings_parameter_struct.waterBypassAddress) && getWaterSensorState()==CRITICALLEVEL)
   1b6c2:	4b45      	ldr	r3, [pc, #276]	; (1b7d8 <startMotor+0x198>)
   1b6c4:	7fdb      	ldrb	r3, [r3, #31]
   1b6c6:	b2db      	uxtb	r3, r3
   1b6c8:	2b00      	cmp	r3, #0
   1b6ca:	d113      	bne.n	1b6f4 <startMotor+0xb4>
   1b6cc:	4b46      	ldr	r3, [pc, #280]	; (1b7e8 <startMotor+0x1a8>)
   1b6ce:	4798      	blx	r3
   1b6d0:	1e03      	subs	r3, r0, #0
   1b6d2:	d10f      	bne.n	1b6f4 <startMotor+0xb4>
				{
					if (commanded)
   1b6d4:	1dfb      	adds	r3, r7, #7
   1b6d6:	781b      	ldrb	r3, [r3, #0]
   1b6d8:	2b00      	cmp	r3, #0
   1b6da:	d003      	beq.n	1b6e4 <startMotor+0xa4>
					{
						setMotorMGRResponse('T');	//cannot start motor due to some problem
   1b6dc:	2054      	movs	r0, #84	; 0x54
   1b6de:	4b43      	ldr	r3, [pc, #268]	; (1b7ec <startMotor+0x1ac>)
   1b6e0:	4798      	blx	r3
					}
					else
					{
						simEventTemp[0] = registerEvent('N');//register To SIM motor not started due to ANY REASON
					}
					return;
   1b6e2:	e071      	b.n	1b7c8 <startMotor+0x188>
						simEventTemp[0] = registerEvent('N');//register To SIM motor not started due to ANY REASON
   1b6e4:	204e      	movs	r0, #78	; 0x4e
   1b6e6:	4b42      	ldr	r3, [pc, #264]	; (1b7f0 <startMotor+0x1b0>)
   1b6e8:	4798      	blx	r3
   1b6ea:	0003      	movs	r3, r0
   1b6ec:	001a      	movs	r2, r3
   1b6ee:	4b41      	ldr	r3, [pc, #260]	; (1b7f4 <startMotor+0x1b4>)
   1b6f0:	701a      	strb	r2, [r3, #0]
					return;
   1b6f2:	e069      	b.n	1b7c8 <startMotor+0x188>
				}
				
				if (factory_settings_parameter_struct.ENABLE_GP)
   1b6f4:	4b3b      	ldr	r3, [pc, #236]	; (1b7e4 <startMotor+0x1a4>)
   1b6f6:	791b      	ldrb	r3, [r3, #4]
   1b6f8:	2b00      	cmp	r3, #0
   1b6fa:	d019      	beq.n	1b730 <startMotor+0xf0>
				{
					if(!(user_settings_parameter_struct.waterBypassAddress) && getOverHeadWaterSensorState()==OVERHEADHIGHLEVEL)
   1b6fc:	4b36      	ldr	r3, [pc, #216]	; (1b7d8 <startMotor+0x198>)
   1b6fe:	7fdb      	ldrb	r3, [r3, #31]
   1b700:	b2db      	uxtb	r3, r3
   1b702:	2b00      	cmp	r3, #0
   1b704:	d114      	bne.n	1b730 <startMotor+0xf0>
   1b706:	4b3c      	ldr	r3, [pc, #240]	; (1b7f8 <startMotor+0x1b8>)
   1b708:	4798      	blx	r3
   1b70a:	0003      	movs	r3, r0
   1b70c:	2b02      	cmp	r3, #2
   1b70e:	d10f      	bne.n	1b730 <startMotor+0xf0>
					{
						if(commanded)
   1b710:	1dfb      	adds	r3, r7, #7
   1b712:	781b      	ldrb	r3, [r3, #0]
   1b714:	2b00      	cmp	r3, #0
   1b716:	d003      	beq.n	1b720 <startMotor+0xe0>
						{
							setMotorMGRResponse('V');	//cannot start motor as OverHead Tank Full.
   1b718:	2056      	movs	r0, #86	; 0x56
   1b71a:	4b34      	ldr	r3, [pc, #208]	; (1b7ec <startMotor+0x1ac>)
   1b71c:	4798      	blx	r3
						}
						else
						{
							simEventTemp[17] = registerEvent('V');//register To SIM motor not started due to ANY REASON
						}
						return;
   1b71e:	e053      	b.n	1b7c8 <startMotor+0x188>
							simEventTemp[17] = registerEvent('V');//register To SIM motor not started due to ANY REASON
   1b720:	2056      	movs	r0, #86	; 0x56
   1b722:	4b33      	ldr	r3, [pc, #204]	; (1b7f0 <startMotor+0x1b0>)
   1b724:	4798      	blx	r3
   1b726:	0003      	movs	r3, r0
   1b728:	001a      	movs	r2, r3
   1b72a:	4b32      	ldr	r3, [pc, #200]	; (1b7f4 <startMotor+0x1b4>)
   1b72c:	745a      	strb	r2, [r3, #17]
						return;
   1b72e:	e04b      	b.n	1b7c8 <startMotor+0x188>
					}
				}
			}

			STOP_RELAY_ON;
   1b730:	2101      	movs	r1, #1
   1b732:	202c      	movs	r0, #44	; 0x2c
   1b734:	4b31      	ldr	r3, [pc, #196]	; (1b7fc <startMotor+0x1bc>)
   1b736:	4798      	blx	r3
			START_RELAY_ON;
   1b738:	2101      	movs	r1, #1
   1b73a:	202d      	movs	r0, #45	; 0x2d
   1b73c:	4b2f      	ldr	r3, [pc, #188]	; (1b7fc <startMotor+0x1bc>)
   1b73e:	4798      	blx	r3
			stopMotorCommandGiven=false;
   1b740:	4b2f      	ldr	r3, [pc, #188]	; (1b800 <startMotor+0x1c0>)
   1b742:	2200      	movs	r2, #0
   1b744:	701a      	strb	r2, [r3, #0]
			//MOTOR_ON_LED_ON;
			tempStartSequenceTimer = xTaskGetTickCount();
   1b746:	4b2f      	ldr	r3, [pc, #188]	; (1b804 <startMotor+0x1c4>)
   1b748:	4798      	blx	r3
   1b74a:	0002      	movs	r2, r0
   1b74c:	4b2e      	ldr	r3, [pc, #184]	; (1b808 <startMotor+0x1c8>)
   1b74e:	601a      	str	r2, [r3, #0]
			startSequenceOn = true;
   1b750:	4b2e      	ldr	r3, [pc, #184]	; (1b80c <startMotor+0x1cc>)
   1b752:	2201      	movs	r2, #1
   1b754:	701a      	strb	r2, [r3, #0]

			if(user_settings_parameter_struct.motorVoltageBypass==MOTOR_VOLTAGE_BYPASS_ON)
   1b756:	4b20      	ldr	r3, [pc, #128]	; (1b7d8 <startMotor+0x198>)
   1b758:	2227      	movs	r2, #39	; 0x27
   1b75a:	5c9b      	ldrb	r3, [r3, r2]
   1b75c:	b2db      	uxtb	r3, r3
   1b75e:	2b01      	cmp	r3, #1
   1b760:	d107      	bne.n	1b772 <startMotor+0x132>
			{
				motorRelatedVoltageBypassOn=true;
   1b762:	4b2b      	ldr	r3, [pc, #172]	; (1b810 <startMotor+0x1d0>)
   1b764:	2201      	movs	r2, #1
   1b766:	701a      	strb	r2, [r3, #0]
				motorVoltageBypassTimerTime=xTaskGetTickCount();
   1b768:	4b26      	ldr	r3, [pc, #152]	; (1b804 <startMotor+0x1c4>)
   1b76a:	4798      	blx	r3
   1b76c:	0002      	movs	r2, r0
   1b76e:	4b29      	ldr	r3, [pc, #164]	; (1b814 <startMotor+0x1d4>)
   1b770:	601a      	str	r2, [r3, #0]
			}

			setMotorState(true);
   1b772:	2001      	movs	r0, #1
   1b774:	4b28      	ldr	r3, [pc, #160]	; (1b818 <startMotor+0x1d8>)
   1b776:	4798      	blx	r3

			if (factory_settings_parameter_struct.ENABLE_CURRENT)
   1b778:	4b1a      	ldr	r3, [pc, #104]	; (1b7e4 <startMotor+0x1a4>)
   1b77a:	785b      	ldrb	r3, [r3, #1]
   1b77c:	2b00      	cmp	r3, #0
   1b77e:	d005      	beq.n	1b78c <startMotor+0x14c>
			{
				enableCurrentBuffer=false;
   1b780:	4b26      	ldr	r3, [pc, #152]	; (1b81c <startMotor+0x1dc>)
   1b782:	2200      	movs	r2, #0
   1b784:	701a      	strb	r2, [r3, #0]
				lastCurrentReading=CR_NORMAL;
   1b786:	4b26      	ldr	r3, [pc, #152]	; (1b820 <startMotor+0x1e0>)
   1b788:	2200      	movs	r2, #0
   1b78a:	701a      	strb	r2, [r3, #0]
			}
			gotOnCommand = commanded;
   1b78c:	4b25      	ldr	r3, [pc, #148]	; (1b824 <startMotor+0x1e4>)
   1b78e:	1dfa      	adds	r2, r7, #7
   1b790:	7812      	ldrb	r2, [r2, #0]
   1b792:	701a      	strb	r2, [r3, #0]
		if (!getMotorState())
   1b794:	e017      	b.n	1b7c6 <startMotor+0x186>
		}
		else
		{
			if (commanded)
   1b796:	1dfb      	adds	r3, r7, #7
   1b798:	781b      	ldrb	r3, [r3, #0]
   1b79a:	2b00      	cmp	r3, #0
   1b79c:	d013      	beq.n	1b7c6 <startMotor+0x186>
			{
				setMotorMGRResponse('+');		//motor is already on
   1b79e:	202b      	movs	r0, #43	; 0x2b
   1b7a0:	4b12      	ldr	r3, [pc, #72]	; (1b7ec <startMotor+0x1ac>)
   1b7a2:	4798      	blx	r3
		if (!getMotorState())
   1b7a4:	e00f      	b.n	1b7c6 <startMotor+0x186>
			}
		}
	}
	else
	{
		if (commanded)
   1b7a6:	1dfb      	adds	r3, r7, #7
   1b7a8:	781b      	ldrb	r3, [r3, #0]
   1b7aa:	2b00      	cmp	r3, #0
   1b7ac:	d003      	beq.n	1b7b6 <startMotor+0x176>
		{
			setMotorMGRResponse('N');	//cannot start motor due to some problem
   1b7ae:	204e      	movs	r0, #78	; 0x4e
   1b7b0:	4b0e      	ldr	r3, [pc, #56]	; (1b7ec <startMotor+0x1ac>)
   1b7b2:	4798      	blx	r3
   1b7b4:	e008      	b.n	1b7c8 <startMotor+0x188>
		}
		else
		{
			simEventTemp[0] = registerEvent('N');//register To SIM motor not started due to ANY REASON
   1b7b6:	204e      	movs	r0, #78	; 0x4e
   1b7b8:	4b0d      	ldr	r3, [pc, #52]	; (1b7f0 <startMotor+0x1b0>)
   1b7ba:	4798      	blx	r3
   1b7bc:	0003      	movs	r3, r0
   1b7be:	001a      	movs	r2, r3
   1b7c0:	4b0c      	ldr	r3, [pc, #48]	; (1b7f4 <startMotor+0x1b4>)
   1b7c2:	701a      	strb	r2, [r3, #0]
   1b7c4:	e000      	b.n	1b7c8 <startMotor+0x188>
		if (!getMotorState())
   1b7c6:	46c0      	nop			; (mov r8, r8)
		}
	}
}
   1b7c8:	46bd      	mov	sp, r7
   1b7ca:	b002      	add	sp, #8
   1b7cc:	bd80      	pop	{r7, pc}
   1b7ce:	46c0      	nop			; (mov r8, r8)
   1b7d0:	2000079a 	.word	0x2000079a
   1b7d4:	0001aebd 	.word	0x0001aebd
   1b7d8:	20000654 	.word	0x20000654
   1b7dc:	0001aef1 	.word	0x0001aef1
   1b7e0:	0001af25 	.word	0x0001af25
   1b7e4:	2000062c 	.word	0x2000062c
   1b7e8:	000197ed 	.word	0x000197ed
   1b7ec:	00014d4d 	.word	0x00014d4d
   1b7f0:	00014b6d 	.word	0x00014b6d
   1b7f4:	20000718 	.word	0x20000718
   1b7f8:	000196bd 	.word	0x000196bd
   1b7fc:	0001958d 	.word	0x0001958d
   1b800:	20000860 	.word	0x20000860
   1b804:	000200dd 	.word	0x000200dd
   1b808:	20000794 	.word	0x20000794
   1b80c:	20000799 	.word	0x20000799
   1b810:	20000773 	.word	0x20000773
   1b814:	20000784 	.word	0x20000784
   1b818:	0001af39 	.word	0x0001af39
   1b81c:	20000760 	.word	0x20000760
   1b820:	2000077e 	.word	0x2000077e
   1b824:	20000714 	.word	0x20000714

0001b828 <stopMotor>:

void stopMotor(bool commanded, bool forceStop,bool offButton)
{
   1b828:	b590      	push	{r4, r7, lr}
   1b82a:	b083      	sub	sp, #12
   1b82c:	af00      	add	r7, sp, #0
   1b82e:	0004      	movs	r4, r0
   1b830:	0008      	movs	r0, r1
   1b832:	0011      	movs	r1, r2
   1b834:	1dfb      	adds	r3, r7, #7
   1b836:	1c22      	adds	r2, r4, #0
   1b838:	701a      	strb	r2, [r3, #0]
   1b83a:	1dbb      	adds	r3, r7, #6
   1b83c:	1c02      	adds	r2, r0, #0
   1b83e:	701a      	strb	r2, [r3, #0]
   1b840:	1d7b      	adds	r3, r7, #5
   1b842:	1c0a      	adds	r2, r1, #0
   1b844:	701a      	strb	r2, [r3, #0]
	if (forceStop || getMotorState())
   1b846:	1dbb      	adds	r3, r7, #6
   1b848:	781b      	ldrb	r3, [r3, #0]
   1b84a:	2b00      	cmp	r3, #0
   1b84c:	d103      	bne.n	1b856 <stopMotor+0x2e>
   1b84e:	4b22      	ldr	r3, [pc, #136]	; (1b8d8 <stopMotor+0xb0>)
   1b850:	4798      	blx	r3
   1b852:	1e03      	subs	r3, r0, #0
   1b854:	d033      	beq.n	1b8be <stopMotor+0x96>
	{
		singlePhasingTimerOn = false;
   1b856:	4b21      	ldr	r3, [pc, #132]	; (1b8dc <stopMotor+0xb4>)
   1b858:	2200      	movs	r2, #0
   1b85a:	701a      	strb	r2, [r3, #0]
		if (user_settings_parameter_struct.detectMotorFeedback == MOTORFEEDBACK_DETECTION_CURRENT)
   1b85c:	4b20      	ldr	r3, [pc, #128]	; (1b8e0 <stopMotor+0xb8>)
   1b85e:	2225      	movs	r2, #37	; 0x25
   1b860:	5c9b      	ldrb	r3, [r3, r2]
   1b862:	b2db      	uxtb	r3, r3
   1b864:	2b01      	cmp	r3, #1
   1b866:	d105      	bne.n	1b874 <stopMotor+0x4c>
		{
			fdbkRefCurrent = Analog_Parameter_Struct.Motor_Current_IntPart;
   1b868:	4b1e      	ldr	r3, [pc, #120]	; (1b8e4 <stopMotor+0xbc>)
   1b86a:	8a9b      	ldrh	r3, [r3, #20]
   1b86c:	b29b      	uxth	r3, r3
   1b86e:	b2da      	uxtb	r2, r3
   1b870:	4b1d      	ldr	r3, [pc, #116]	; (1b8e8 <stopMotor+0xc0>)
   1b872:	701a      	strb	r2, [r3, #0]
		}
		motorRelatedVoltageBypassOn=false;
   1b874:	4b1d      	ldr	r3, [pc, #116]	; (1b8ec <stopMotor+0xc4>)
   1b876:	2200      	movs	r2, #0
   1b878:	701a      	strb	r2, [r3, #0]
		STOP_RELAY_OFF;
   1b87a:	2100      	movs	r1, #0
   1b87c:	202c      	movs	r0, #44	; 0x2c
   1b87e:	4b1c      	ldr	r3, [pc, #112]	; (1b8f0 <stopMotor+0xc8>)
   1b880:	4798      	blx	r3
		stopMotorCommandGiven=true;
   1b882:	4b1c      	ldr	r3, [pc, #112]	; (1b8f4 <stopMotor+0xcc>)
   1b884:	2201      	movs	r2, #1
   1b886:	701a      	strb	r2, [r3, #0]
		tempStopSequenceTimer = xTaskGetTickCount();
   1b888:	4b1b      	ldr	r3, [pc, #108]	; (1b8f8 <stopMotor+0xd0>)
   1b88a:	4798      	blx	r3
   1b88c:	0002      	movs	r2, r0
   1b88e:	4b1b      	ldr	r3, [pc, #108]	; (1b8fc <stopMotor+0xd4>)
   1b890:	601a      	str	r2, [r3, #0]
		stopSequenceOn = true;
   1b892:	4b1b      	ldr	r3, [pc, #108]	; (1b900 <stopMotor+0xd8>)
   1b894:	2201      	movs	r2, #1
   1b896:	701a      	strb	r2, [r3, #0]
		setMotorState(false);
   1b898:	2000      	movs	r0, #0
   1b89a:	4b1a      	ldr	r3, [pc, #104]	; (1b904 <stopMotor+0xdc>)
   1b89c:	4798      	blx	r3
		gotOffCommand = commanded;
   1b89e:	4b1a      	ldr	r3, [pc, #104]	; (1b908 <stopMotor+0xe0>)
   1b8a0:	1dfa      	adds	r2, r7, #7
   1b8a2:	7812      	ldrb	r2, [r2, #0]
   1b8a4:	701a      	strb	r2, [r3, #0]
		offButtonPressed=offButton;
   1b8a6:	4b19      	ldr	r3, [pc, #100]	; (1b90c <stopMotor+0xe4>)
   1b8a8:	1d7a      	adds	r2, r7, #5
   1b8aa:	7812      	ldrb	r2, [r2, #0]
   1b8ac:	701a      	strb	r2, [r3, #0]
		if (factory_settings_parameter_struct.ENABLE_CURRENT)
   1b8ae:	4b18      	ldr	r3, [pc, #96]	; (1b910 <stopMotor+0xe8>)
   1b8b0:	785b      	ldrb	r3, [r3, #1]
   1b8b2:	2b00      	cmp	r3, #0
   1b8b4:	d00b      	beq.n	1b8ce <stopMotor+0xa6>
		{
			lastCurrentReading=CR_NORMAL;			//to make the current readings normal
   1b8b6:	4b17      	ldr	r3, [pc, #92]	; (1b914 <stopMotor+0xec>)
   1b8b8:	2200      	movs	r2, #0
   1b8ba:	701a      	strb	r2, [r3, #0]
		if (factory_settings_parameter_struct.ENABLE_CURRENT)
   1b8bc:	e007      	b.n	1b8ce <stopMotor+0xa6>
		}
	}
	else
	{
		if (commanded)
   1b8be:	1dfb      	adds	r3, r7, #7
   1b8c0:	781b      	ldrb	r3, [r3, #0]
   1b8c2:	2b00      	cmp	r3, #0
   1b8c4:	d003      	beq.n	1b8ce <stopMotor+0xa6>
		{
			setMotorMGRResponse('-');	//motor is already off
   1b8c6:	202d      	movs	r0, #45	; 0x2d
   1b8c8:	4b13      	ldr	r3, [pc, #76]	; (1b918 <stopMotor+0xf0>)
   1b8ca:	4798      	blx	r3
		}
	}
}
   1b8cc:	e7ff      	b.n	1b8ce <stopMotor+0xa6>
   1b8ce:	46c0      	nop			; (mov r8, r8)
   1b8d0:	46bd      	mov	sp, r7
   1b8d2:	b003      	add	sp, #12
   1b8d4:	bd90      	pop	{r4, r7, pc}
   1b8d6:	46c0      	nop			; (mov r8, r8)
   1b8d8:	0001af25 	.word	0x0001af25
   1b8dc:	20000791 	.word	0x20000791
   1b8e0:	20000654 	.word	0x20000654
   1b8e4:	200006e8 	.word	0x200006e8
   1b8e8:	200007f4 	.word	0x200007f4
   1b8ec:	20000773 	.word	0x20000773
   1b8f0:	0001958d 	.word	0x0001958d
   1b8f4:	20000860 	.word	0x20000860
   1b8f8:	000200dd 	.word	0x000200dd
   1b8fc:	200007a8 	.word	0x200007a8
   1b900:	20000788 	.word	0x20000788
   1b904:	0001af39 	.word	0x0001af39
   1b908:	2000080c 	.word	0x2000080c
   1b90c:	200007a4 	.word	0x200007a4
   1b910:	2000062c 	.word	0x2000062c
   1b914:	2000077e 	.word	0x2000077e
   1b918:	00014d4d 	.word	0x00014d4d

0001b91c <startMotorTimerOver>:

bool startMotorTimerOver(void)
{
   1b91c:	b580      	push	{r7, lr}
   1b91e:	af00      	add	r7, sp, #0
	return ((xTaskGetTickCount() - tempStartTimer) >= ((uint32_t)user_settings_parameter_struct.autoStartTimeAddress * 1000L));
   1b920:	4b09      	ldr	r3, [pc, #36]	; (1b948 <startMotorTimerOver+0x2c>)
   1b922:	4798      	blx	r3
   1b924:	0002      	movs	r2, r0
   1b926:	4b09      	ldr	r3, [pc, #36]	; (1b94c <startMotorTimerOver+0x30>)
   1b928:	681b      	ldr	r3, [r3, #0]
   1b92a:	1ad1      	subs	r1, r2, r3
   1b92c:	4b08      	ldr	r3, [pc, #32]	; (1b950 <startMotorTimerOver+0x34>)
   1b92e:	885b      	ldrh	r3, [r3, #2]
   1b930:	b29b      	uxth	r3, r3
   1b932:	001a      	movs	r2, r3
   1b934:	23fa      	movs	r3, #250	; 0xfa
   1b936:	009b      	lsls	r3, r3, #2
   1b938:	435a      	muls	r2, r3
   1b93a:	2300      	movs	r3, #0
   1b93c:	4291      	cmp	r1, r2
   1b93e:	415b      	adcs	r3, r3
   1b940:	b2db      	uxtb	r3, r3
}
   1b942:	0018      	movs	r0, r3
   1b944:	46bd      	mov	sp, r7
   1b946:	bd80      	pop	{r7, pc}
   1b948:	000200dd 	.word	0x000200dd
   1b94c:	200007a0 	.word	0x200007a0
   1b950:	20000654 	.word	0x20000654

0001b954 <unknownMotorOff>:

void unknownMotorOff(void)
{
   1b954:	b580      	push	{r7, lr}
   1b956:	af00      	add	r7, sp, #0
	// waitCheckACTimerOn = false;
	//report to SIM Motor Off due to Unknown Reason
	stopMotor(false,true,false);
   1b958:	2200      	movs	r2, #0
   1b95a:	2101      	movs	r1, #1
   1b95c:	2000      	movs	r0, #0
   1b95e:	4b06      	ldr	r3, [pc, #24]	; (1b978 <unknownMotorOff+0x24>)
   1b960:	4798      	blx	r3
	simEventTemp[2] = registerEvent('_');
   1b962:	205f      	movs	r0, #95	; 0x5f
   1b964:	4b05      	ldr	r3, [pc, #20]	; (1b97c <unknownMotorOff+0x28>)
   1b966:	4798      	blx	r3
   1b968:	0003      	movs	r3, r0
   1b96a:	001a      	movs	r2, r3
   1b96c:	4b04      	ldr	r3, [pc, #16]	; (1b980 <unknownMotorOff+0x2c>)
   1b96e:	709a      	strb	r2, [r3, #2]
}
   1b970:	46c0      	nop			; (mov r8, r8)
   1b972:	46bd      	mov	sp, r7
   1b974:	bd80      	pop	{r7, pc}
   1b976:	46c0      	nop			; (mov r8, r8)
   1b978:	0001b829 	.word	0x0001b829
   1b97c:	00014b6d 	.word	0x00014b6d
   1b980:	20000718 	.word	0x20000718

0001b984 <singlePhasingTimerOver>:

bool singlePhasingTimerOver(void)
{
   1b984:	b580      	push	{r7, lr}
   1b986:	af00      	add	r7, sp, #0
	return (singlePhasingTimerOn && xTaskGetTickCount() - tempSinglePhasingTimer > (((uint16_t)singlePhasingTime) * 100));
   1b988:	4b0d      	ldr	r3, [pc, #52]	; (1b9c0 <singlePhasingTimerOver+0x3c>)
   1b98a:	781b      	ldrb	r3, [r3, #0]
   1b98c:	2b00      	cmp	r3, #0
   1b98e:	d00e      	beq.n	1b9ae <singlePhasingTimerOver+0x2a>
   1b990:	4b0c      	ldr	r3, [pc, #48]	; (1b9c4 <singlePhasingTimerOver+0x40>)
   1b992:	4798      	blx	r3
   1b994:	0002      	movs	r2, r0
   1b996:	4b0c      	ldr	r3, [pc, #48]	; (1b9c8 <singlePhasingTimerOver+0x44>)
   1b998:	681b      	ldr	r3, [r3, #0]
   1b99a:	1ad3      	subs	r3, r2, r3
   1b99c:	4a0b      	ldr	r2, [pc, #44]	; (1b9cc <singlePhasingTimerOver+0x48>)
   1b99e:	7812      	ldrb	r2, [r2, #0]
   1b9a0:	0011      	movs	r1, r2
   1b9a2:	2264      	movs	r2, #100	; 0x64
   1b9a4:	434a      	muls	r2, r1
   1b9a6:	4293      	cmp	r3, r2
   1b9a8:	d901      	bls.n	1b9ae <singlePhasingTimerOver+0x2a>
   1b9aa:	2301      	movs	r3, #1
   1b9ac:	e000      	b.n	1b9b0 <singlePhasingTimerOver+0x2c>
   1b9ae:	2300      	movs	r3, #0
   1b9b0:	1c1a      	adds	r2, r3, #0
   1b9b2:	2301      	movs	r3, #1
   1b9b4:	4013      	ands	r3, r2
   1b9b6:	b2db      	uxtb	r3, r3
}
   1b9b8:	0018      	movs	r0, r3
   1b9ba:	46bd      	mov	sp, r7
   1b9bc:	bd80      	pop	{r7, pc}
   1b9be:	46c0      	nop			; (mov r8, r8)
   1b9c0:	20000791 	.word	0x20000791
   1b9c4:	000200dd 	.word	0x000200dd
   1b9c8:	20000778 	.word	0x20000778
   1b9cc:	20000770 	.word	0x20000770

0001b9d0 <operateOnSinglePhasing>:

void operateOnSinglePhasing(void)
{
   1b9d0:	b580      	push	{r7, lr}
   1b9d2:	af00      	add	r7, sp, #0
	THREEPHASE_OK_LED_OFF;
   1b9d4:	2101      	movs	r1, #1
   1b9d6:	2027      	movs	r0, #39	; 0x27
   1b9d8:	4b08      	ldr	r3, [pc, #32]	; (1b9fc <operateOnSinglePhasing+0x2c>)
   1b9da:	4798      	blx	r3
	stopMotor(false,true,false);
   1b9dc:	2200      	movs	r2, #0
   1b9de:	2101      	movs	r1, #1
   1b9e0:	2000      	movs	r0, #0
   1b9e2:	4b07      	ldr	r3, [pc, #28]	; (1ba00 <operateOnSinglePhasing+0x30>)
   1b9e4:	4798      	blx	r3
	simEventTemp[3] = registerEvent('F');
   1b9e6:	2046      	movs	r0, #70	; 0x46
   1b9e8:	4b06      	ldr	r3, [pc, #24]	; (1ba04 <operateOnSinglePhasing+0x34>)
   1b9ea:	4798      	blx	r3
   1b9ec:	0003      	movs	r3, r0
   1b9ee:	001a      	movs	r2, r3
   1b9f0:	4b05      	ldr	r3, [pc, #20]	; (1ba08 <operateOnSinglePhasing+0x38>)
   1b9f2:	70da      	strb	r2, [r3, #3]
}
   1b9f4:	46c0      	nop			; (mov r8, r8)
   1b9f6:	46bd      	mov	sp, r7
   1b9f8:	bd80      	pop	{r7, pc}
   1b9fa:	46c0      	nop			; (mov r8, r8)
   1b9fc:	0001958d 	.word	0x0001958d
   1ba00:	0001b829 	.word	0x0001b829
   1ba04:	00014b6d 	.word	0x00014b6d
   1ba08:	20000718 	.word	0x20000718

0001ba0c <terminateStopRelay>:

void terminateStopRelay(void)
{
   1ba0c:	b580      	push	{r7, lr}
   1ba0e:	af00      	add	r7, sp, #0
	if (stopSequenceOn && xTaskGetTickCount() - tempStopSequenceTimer > (stopSequenceTimerTime * 100))
   1ba10:	4b28      	ldr	r3, [pc, #160]	; (1bab4 <terminateStopRelay+0xa8>)
   1ba12:	781b      	ldrb	r3, [r3, #0]
   1ba14:	2b00      	cmp	r3, #0
   1ba16:	d04a      	beq.n	1baae <terminateStopRelay+0xa2>
   1ba18:	4b27      	ldr	r3, [pc, #156]	; (1bab8 <terminateStopRelay+0xac>)
   1ba1a:	4798      	blx	r3
   1ba1c:	0002      	movs	r2, r0
   1ba1e:	4b27      	ldr	r3, [pc, #156]	; (1babc <terminateStopRelay+0xb0>)
   1ba20:	681b      	ldr	r3, [r3, #0]
   1ba22:	1ad3      	subs	r3, r2, r3
   1ba24:	4a26      	ldr	r2, [pc, #152]	; (1bac0 <terminateStopRelay+0xb4>)
   1ba26:	7812      	ldrb	r2, [r2, #0]
   1ba28:	0011      	movs	r1, r2
   1ba2a:	2264      	movs	r2, #100	; 0x64
   1ba2c:	434a      	muls	r2, r1
   1ba2e:	4293      	cmp	r3, r2
   1ba30:	d93d      	bls.n	1baae <terminateStopRelay+0xa2>
	{
		//if ((bool)(user_settings_parameter_struct.autoStartAddress) && getACPowerState())
		//{
		//STOP_RELAY_ON;
		//}
		stopSequenceOn = false;
   1ba32:	4b20      	ldr	r3, [pc, #128]	; (1bab4 <terminateStopRelay+0xa8>)
   1ba34:	2200      	movs	r2, #0
   1ba36:	701a      	strb	r2, [r3, #0]
		stopMotorCommandGiven=true;
   1ba38:	4b22      	ldr	r3, [pc, #136]	; (1bac4 <terminateStopRelay+0xb8>)
   1ba3a:	2201      	movs	r2, #1
   1ba3c:	701a      	strb	r2, [r3, #0]
		if(!getMotorState_from_pin())															//motor has turned off OR NOT
   1ba3e:	4b22      	ldr	r3, [pc, #136]	; (1bac8 <terminateStopRelay+0xbc>)
   1ba40:	4798      	blx	r3
   1ba42:	0003      	movs	r3, r0
   1ba44:	001a      	movs	r2, r3
   1ba46:	2301      	movs	r3, #1
   1ba48:	4053      	eors	r3, r2
   1ba4a:	b2db      	uxtb	r3, r3
   1ba4c:	2b00      	cmp	r3, #0
   1ba4e:	d019      	beq.n	1ba84 <terminateStopRelay+0x78>
		{
			if (gotOffCommand)
   1ba50:	4b1e      	ldr	r3, [pc, #120]	; (1bacc <terminateStopRelay+0xc0>)
   1ba52:	781b      	ldrb	r3, [r3, #0]
   1ba54:	2b00      	cmp	r3, #0
   1ba56:	d006      	beq.n	1ba66 <terminateStopRelay+0x5a>
			{
				gotOffCommand = false;
   1ba58:	4b1c      	ldr	r3, [pc, #112]	; (1bacc <terminateStopRelay+0xc0>)
   1ba5a:	2200      	movs	r2, #0
   1ba5c:	701a      	strb	r2, [r3, #0]
				setMotorMGRResponse('O');		//motor has stopped
   1ba5e:	204f      	movs	r0, #79	; 0x4f
   1ba60:	4b1b      	ldr	r3, [pc, #108]	; (1bad0 <terminateStopRelay+0xc4>)
   1ba62:	4798      	blx	r3
   1ba64:	e020      	b.n	1baa8 <terminateStopRelay+0x9c>
			}
			else if(offButtonPressed)
   1ba66:	4b1b      	ldr	r3, [pc, #108]	; (1bad4 <terminateStopRelay+0xc8>)
   1ba68:	781b      	ldrb	r3, [r3, #0]
   1ba6a:	2b00      	cmp	r3, #0
   1ba6c:	d01c      	beq.n	1baa8 <terminateStopRelay+0x9c>
			{
				offButtonPressed=false;
   1ba6e:	4b19      	ldr	r3, [pc, #100]	; (1bad4 <terminateStopRelay+0xc8>)
   1ba70:	2200      	movs	r2, #0
   1ba72:	701a      	strb	r2, [r3, #0]
				simEventTemp[8] = registerEvent('O'); //register TO SIM motor has turned off
   1ba74:	204f      	movs	r0, #79	; 0x4f
   1ba76:	4b18      	ldr	r3, [pc, #96]	; (1bad8 <terminateStopRelay+0xcc>)
   1ba78:	4798      	blx	r3
   1ba7a:	0003      	movs	r3, r0
   1ba7c:	001a      	movs	r2, r3
   1ba7e:	4b17      	ldr	r3, [pc, #92]	; (1badc <terminateStopRelay+0xd0>)
   1ba80:	721a      	strb	r2, [r3, #8]
   1ba82:	e011      	b.n	1baa8 <terminateStopRelay+0x9c>
			}
		}
		else
		{
			if (gotOffCommand)
   1ba84:	4b11      	ldr	r3, [pc, #68]	; (1bacc <terminateStopRelay+0xc0>)
   1ba86:	781b      	ldrb	r3, [r3, #0]
   1ba88:	2b00      	cmp	r3, #0
   1ba8a:	d006      	beq.n	1ba9a <terminateStopRelay+0x8e>
			{
				gotOffCommand = false;
   1ba8c:	4b0f      	ldr	r3, [pc, #60]	; (1bacc <terminateStopRelay+0xc0>)
   1ba8e:	2200      	movs	r2, #0
   1ba90:	701a      	strb	r2, [r3, #0]
				setMotorMGRResponse('P');		//cannot turn off motor
   1ba92:	2050      	movs	r0, #80	; 0x50
   1ba94:	4b0e      	ldr	r3, [pc, #56]	; (1bad0 <terminateStopRelay+0xc4>)
   1ba96:	4798      	blx	r3
   1ba98:	e006      	b.n	1baa8 <terminateStopRelay+0x9c>
			}
			else
			{
				simEventTemp[1] = registerEvent('P');
   1ba9a:	2050      	movs	r0, #80	; 0x50
   1ba9c:	4b0e      	ldr	r3, [pc, #56]	; (1bad8 <terminateStopRelay+0xcc>)
   1ba9e:	4798      	blx	r3
   1baa0:	0003      	movs	r3, r0
   1baa2:	001a      	movs	r2, r3
   1baa4:	4b0d      	ldr	r3, [pc, #52]	; (1badc <terminateStopRelay+0xd0>)
   1baa6:	705a      	strb	r2, [r3, #1]
			}
		}
		offButtonPressed=false;
   1baa8:	4b0a      	ldr	r3, [pc, #40]	; (1bad4 <terminateStopRelay+0xc8>)
   1baaa:	2200      	movs	r2, #0
   1baac:	701a      	strb	r2, [r3, #0]
	}
}
   1baae:	46c0      	nop			; (mov r8, r8)
   1bab0:	46bd      	mov	sp, r7
   1bab2:	bd80      	pop	{r7, pc}
   1bab4:	20000788 	.word	0x20000788
   1bab8:	000200dd 	.word	0x000200dd
   1babc:	200007a8 	.word	0x200007a8
   1bac0:	20000863 	.word	0x20000863
   1bac4:	20000860 	.word	0x20000860
   1bac8:	0001af79 	.word	0x0001af79
   1bacc:	2000080c 	.word	0x2000080c
   1bad0:	00014d4d 	.word	0x00014d4d
   1bad4:	200007a4 	.word	0x200007a4
   1bad8:	00014b6d 	.word	0x00014b6d
   1badc:	20000718 	.word	0x20000718

0001bae0 <terminateStarDeltaTimer>:

void terminateStarDeltaTimer(void)
{
   1bae0:	b580      	push	{r7, lr}
   1bae2:	af00      	add	r7, sp, #0
	if(starDeltaTimerOn && xTaskGetTickCount() - tempStartSequenceTimer > ((unsigned long int)(user_settings_parameter_struct.starDeltaTimerAddress) *1000L))
   1bae4:	4b14      	ldr	r3, [pc, #80]	; (1bb38 <terminateStarDeltaTimer+0x58>)
   1bae6:	781b      	ldrb	r3, [r3, #0]
   1bae8:	2b00      	cmp	r3, #0
   1baea:	d021      	beq.n	1bb30 <terminateStarDeltaTimer+0x50>
   1baec:	4b13      	ldr	r3, [pc, #76]	; (1bb3c <terminateStarDeltaTimer+0x5c>)
   1baee:	4798      	blx	r3
   1baf0:	0002      	movs	r2, r0
   1baf2:	4b13      	ldr	r3, [pc, #76]	; (1bb40 <terminateStarDeltaTimer+0x60>)
   1baf4:	681b      	ldr	r3, [r3, #0]
   1baf6:	1ad2      	subs	r2, r2, r3
   1baf8:	4b12      	ldr	r3, [pc, #72]	; (1bb44 <terminateStarDeltaTimer+0x64>)
   1bafa:	88db      	ldrh	r3, [r3, #6]
   1bafc:	b29b      	uxth	r3, r3
   1bafe:	0019      	movs	r1, r3
   1bb00:	23fa      	movs	r3, #250	; 0xfa
   1bb02:	009b      	lsls	r3, r3, #2
   1bb04:	434b      	muls	r3, r1
   1bb06:	429a      	cmp	r2, r3
   1bb08:	d912      	bls.n	1bb30 <terminateStarDeltaTimer+0x50>
	{
		START_RELAY_OFF;
   1bb0a:	2100      	movs	r1, #0
   1bb0c:	202d      	movs	r0, #45	; 0x2d
   1bb0e:	4b0e      	ldr	r3, [pc, #56]	; (1bb48 <terminateStarDeltaTimer+0x68>)
   1bb10:	4798      	blx	r3
		starDeltaTimerOn=false;
   1bb12:	4b09      	ldr	r3, [pc, #36]	; (1bb38 <terminateStarDeltaTimer+0x58>)
   1bb14:	2200      	movs	r2, #0
   1bb16:	701a      	strb	r2, [r3, #0]
		if (factory_settings_parameter_struct.ENABLE_CURRENT)
   1bb18:	4b0c      	ldr	r3, [pc, #48]	; (1bb4c <terminateStarDeltaTimer+0x6c>)
   1bb1a:	785b      	ldrb	r3, [r3, #1]
   1bb1c:	2b00      	cmp	r3, #0
   1bb1e:	d007      	beq.n	1bb30 <terminateStarDeltaTimer+0x50>
		{
			enableCurrentBuffer=true;
   1bb20:	4b0b      	ldr	r3, [pc, #44]	; (1bb50 <terminateStarDeltaTimer+0x70>)
   1bb22:	2201      	movs	r2, #1
   1bb24:	701a      	strb	r2, [r3, #0]
			tempStartSequenceTimer=xTaskGetTickCount();
   1bb26:	4b05      	ldr	r3, [pc, #20]	; (1bb3c <terminateStarDeltaTimer+0x5c>)
   1bb28:	4798      	blx	r3
   1bb2a:	0002      	movs	r2, r0
   1bb2c:	4b04      	ldr	r3, [pc, #16]	; (1bb40 <terminateStarDeltaTimer+0x60>)
   1bb2e:	601a      	str	r2, [r3, #0]
		}
	}
}
   1bb30:	46c0      	nop			; (mov r8, r8)
   1bb32:	46bd      	mov	sp, r7
   1bb34:	bd80      	pop	{r7, pc}
   1bb36:	46c0      	nop			; (mov r8, r8)
   1bb38:	2000079b 	.word	0x2000079b
   1bb3c:	000200dd 	.word	0x000200dd
   1bb40:	20000794 	.word	0x20000794
   1bb44:	20000654 	.word	0x20000654
   1bb48:	0001958d 	.word	0x0001958d
   1bb4c:	2000062c 	.word	0x2000062c
   1bb50:	20000760 	.word	0x20000760

0001bb54 <terminateStartRelay>:

void terminateStartRelay(void)
{
   1bb54:	b590      	push	{r4, r7, lr}
   1bb56:	b083      	sub	sp, #12
   1bb58:	af00      	add	r7, sp, #0
	if (startSequenceOn &&  xTaskGetTickCount() - tempStartSequenceTimer > (startSequenceTimerTime * 100))
   1bb5a:	4b37      	ldr	r3, [pc, #220]	; (1bc38 <terminateStartRelay+0xe4>)
   1bb5c:	781b      	ldrb	r3, [r3, #0]
   1bb5e:	2b00      	cmp	r3, #0
   1bb60:	d066      	beq.n	1bc30 <terminateStartRelay+0xdc>
   1bb62:	4b36      	ldr	r3, [pc, #216]	; (1bc3c <terminateStartRelay+0xe8>)
   1bb64:	4798      	blx	r3
   1bb66:	0002      	movs	r2, r0
   1bb68:	4b35      	ldr	r3, [pc, #212]	; (1bc40 <terminateStartRelay+0xec>)
   1bb6a:	681b      	ldr	r3, [r3, #0]
   1bb6c:	1ad3      	subs	r3, r2, r3
   1bb6e:	4a35      	ldr	r2, [pc, #212]	; (1bc44 <terminateStartRelay+0xf0>)
   1bb70:	7812      	ldrb	r2, [r2, #0]
   1bb72:	0011      	movs	r1, r2
   1bb74:	2264      	movs	r2, #100	; 0x64
   1bb76:	434a      	muls	r2, r1
   1bb78:	4293      	cmp	r3, r2
   1bb7a:	d959      	bls.n	1bc30 <terminateStartRelay+0xdc>
	{
		if((((uint32_t)user_settings_parameter_struct.starDeltaTimerAddress) * 1000L) <= (((uint32_t)startSequenceTimerTime)*100))
   1bb7c:	4b32      	ldr	r3, [pc, #200]	; (1bc48 <terminateStartRelay+0xf4>)
   1bb7e:	88db      	ldrh	r3, [r3, #6]
   1bb80:	b29b      	uxth	r3, r3
   1bb82:	001a      	movs	r2, r3
   1bb84:	23fa      	movs	r3, #250	; 0xfa
   1bb86:	009b      	lsls	r3, r3, #2
   1bb88:	435a      	muls	r2, r3
   1bb8a:	4b2e      	ldr	r3, [pc, #184]	; (1bc44 <terminateStartRelay+0xf0>)
   1bb8c:	781b      	ldrb	r3, [r3, #0]
   1bb8e:	0019      	movs	r1, r3
   1bb90:	2364      	movs	r3, #100	; 0x64
   1bb92:	434b      	muls	r3, r1
   1bb94:	429a      	cmp	r2, r3
   1bb96:	d810      	bhi.n	1bbba <terminateStartRelay+0x66>
		{
			START_RELAY_OFF;
   1bb98:	2100      	movs	r1, #0
   1bb9a:	202d      	movs	r0, #45	; 0x2d
   1bb9c:	4b2b      	ldr	r3, [pc, #172]	; (1bc4c <terminateStartRelay+0xf8>)
   1bb9e:	4798      	blx	r3
			tempStartSequenceTimer=xTaskGetTickCount();
   1bba0:	4b26      	ldr	r3, [pc, #152]	; (1bc3c <terminateStartRelay+0xe8>)
   1bba2:	4798      	blx	r3
   1bba4:	0002      	movs	r2, r0
   1bba6:	4b26      	ldr	r3, [pc, #152]	; (1bc40 <terminateStartRelay+0xec>)
   1bba8:	601a      	str	r2, [r3, #0]
			if (factory_settings_parameter_struct.ENABLE_CURRENT)
   1bbaa:	4b29      	ldr	r3, [pc, #164]	; (1bc50 <terminateStartRelay+0xfc>)
   1bbac:	785b      	ldrb	r3, [r3, #1]
   1bbae:	2b00      	cmp	r3, #0
   1bbb0:	d006      	beq.n	1bbc0 <terminateStartRelay+0x6c>
			{
				enableCurrentBuffer=true;
   1bbb2:	4b28      	ldr	r3, [pc, #160]	; (1bc54 <terminateStartRelay+0x100>)
   1bbb4:	2201      	movs	r2, #1
   1bbb6:	701a      	strb	r2, [r3, #0]
   1bbb8:	e002      	b.n	1bbc0 <terminateStartRelay+0x6c>
			}
		}
		else
		{
			starDeltaTimerOn=true;
   1bbba:	4b27      	ldr	r3, [pc, #156]	; (1bc58 <terminateStartRelay+0x104>)
   1bbbc:	2201      	movs	r2, #1
   1bbbe:	701a      	strb	r2, [r3, #0]
		}
		startSequenceOn = false;
   1bbc0:	4b1d      	ldr	r3, [pc, #116]	; (1bc38 <terminateStartRelay+0xe4>)
   1bbc2:	2200      	movs	r2, #0
   1bbc4:	701a      	strb	r2, [r3, #0]
		bool motor = getMotorState_from_pin();
   1bbc6:	1dfc      	adds	r4, r7, #7
   1bbc8:	4b24      	ldr	r3, [pc, #144]	; (1bc5c <terminateStartRelay+0x108>)
   1bbca:	4798      	blx	r3
   1bbcc:	0003      	movs	r3, r0
   1bbce:	7023      	strb	r3, [r4, #0]
		if (gotOnCommand)
   1bbd0:	4b23      	ldr	r3, [pc, #140]	; (1bc60 <terminateStartRelay+0x10c>)
   1bbd2:	781b      	ldrb	r3, [r3, #0]
   1bbd4:	2b00      	cmp	r3, #0
   1bbd6:	d013      	beq.n	1bc00 <terminateStartRelay+0xac>
		{
			gotOnCommand = false;
   1bbd8:	4b21      	ldr	r3, [pc, #132]	; (1bc60 <terminateStartRelay+0x10c>)
   1bbda:	2200      	movs	r2, #0
   1bbdc:	701a      	strb	r2, [r3, #0]
			if (motor)
   1bbde:	1dfb      	adds	r3, r7, #7
   1bbe0:	781b      	ldrb	r3, [r3, #0]
   1bbe2:	2b00      	cmp	r3, #0
   1bbe4:	d003      	beq.n	1bbee <terminateStartRelay+0x9a>
			{
				setMotorMGRResponse('S'); // motor has started
   1bbe6:	2053      	movs	r0, #83	; 0x53
   1bbe8:	4b1e      	ldr	r3, [pc, #120]	; (1bc64 <terminateStartRelay+0x110>)
   1bbea:	4798      	blx	r3
				stopMotor(false,true,false);
				simEventTemp[0] = registerEvent('N');//register To SIM motor not started due to ANY REASON
			}
		}
	}
}
   1bbec:	e020      	b.n	1bc30 <terminateStartRelay+0xdc>
				stopMotor(false,true,false);
   1bbee:	2200      	movs	r2, #0
   1bbf0:	2101      	movs	r1, #1
   1bbf2:	2000      	movs	r0, #0
   1bbf4:	4b1c      	ldr	r3, [pc, #112]	; (1bc68 <terminateStartRelay+0x114>)
   1bbf6:	4798      	blx	r3
				setMotorMGRResponse('N');	//cannot start motor due to some problem
   1bbf8:	204e      	movs	r0, #78	; 0x4e
   1bbfa:	4b1a      	ldr	r3, [pc, #104]	; (1bc64 <terminateStartRelay+0x110>)
   1bbfc:	4798      	blx	r3
}
   1bbfe:	e017      	b.n	1bc30 <terminateStartRelay+0xdc>
			if (motor)
   1bc00:	1dfb      	adds	r3, r7, #7
   1bc02:	781b      	ldrb	r3, [r3, #0]
   1bc04:	2b00      	cmp	r3, #0
   1bc06:	d007      	beq.n	1bc18 <terminateStartRelay+0xc4>
				simEventTemp[7] = registerEvent('S');// ;//register To SIM Motor has started
   1bc08:	2053      	movs	r0, #83	; 0x53
   1bc0a:	4b18      	ldr	r3, [pc, #96]	; (1bc6c <terminateStartRelay+0x118>)
   1bc0c:	4798      	blx	r3
   1bc0e:	0003      	movs	r3, r0
   1bc10:	001a      	movs	r2, r3
   1bc12:	4b17      	ldr	r3, [pc, #92]	; (1bc70 <terminateStartRelay+0x11c>)
   1bc14:	71da      	strb	r2, [r3, #7]
}
   1bc16:	e00b      	b.n	1bc30 <terminateStartRelay+0xdc>
				stopMotor(false,true,false);
   1bc18:	2200      	movs	r2, #0
   1bc1a:	2101      	movs	r1, #1
   1bc1c:	2000      	movs	r0, #0
   1bc1e:	4b12      	ldr	r3, [pc, #72]	; (1bc68 <terminateStartRelay+0x114>)
   1bc20:	4798      	blx	r3
				simEventTemp[0] = registerEvent('N');//register To SIM motor not started due to ANY REASON
   1bc22:	204e      	movs	r0, #78	; 0x4e
   1bc24:	4b11      	ldr	r3, [pc, #68]	; (1bc6c <terminateStartRelay+0x118>)
   1bc26:	4798      	blx	r3
   1bc28:	0003      	movs	r3, r0
   1bc2a:	001a      	movs	r2, r3
   1bc2c:	4b10      	ldr	r3, [pc, #64]	; (1bc70 <terminateStartRelay+0x11c>)
   1bc2e:	701a      	strb	r2, [r3, #0]
}
   1bc30:	46c0      	nop			; (mov r8, r8)
   1bc32:	46bd      	mov	sp, r7
   1bc34:	b003      	add	sp, #12
   1bc36:	bd90      	pop	{r4, r7, pc}
   1bc38:	20000799 	.word	0x20000799
   1bc3c:	000200dd 	.word	0x000200dd
   1bc40:	20000794 	.word	0x20000794
   1bc44:	20000818 	.word	0x20000818
   1bc48:	20000654 	.word	0x20000654
   1bc4c:	0001958d 	.word	0x0001958d
   1bc50:	2000062c 	.word	0x2000062c
   1bc54:	20000760 	.word	0x20000760
   1bc58:	2000079b 	.word	0x2000079b
   1bc5c:	0001af79 	.word	0x0001af79
   1bc60:	20000714 	.word	0x20000714
   1bc64:	00014d4d 	.word	0x00014d4d
   1bc68:	0001b829 	.word	0x0001b829
   1bc6c:	00014b6d 	.word	0x00014b6d
   1bc70:	20000718 	.word	0x20000718

0001bc74 <statusOnCall>:

void statusOnCall(void)
{
   1bc74:	b590      	push	{r4, r7, lr}
   1bc76:	b083      	sub	sp, #12
   1bc78:	af00      	add	r7, sp, #0
	char status[5];
	uint8_t index=0;
   1bc7a:	1dfb      	adds	r3, r7, #7
   1bc7c:	2200      	movs	r2, #0
   1bc7e:	701a      	strb	r2, [r3, #0]
	uint8_t b = checkLineSensors();
   1bc80:	1dbc      	adds	r4, r7, #6
   1bc82:	4b3b      	ldr	r3, [pc, #236]	; (1bd70 <statusOnCall+0xfc>)
   1bc84:	4798      	blx	r3
   1bc86:	0003      	movs	r3, r0
   1bc88:	7023      	strb	r3, [r4, #0]
	if (b == AC_OFF)
   1bc8a:	1dbb      	adds	r3, r7, #6
   1bc8c:	781b      	ldrb	r3, [r3, #0]
   1bc8e:	2b00      	cmp	r3, #0
   1bc90:	d109      	bne.n	1bca6 <statusOnCall+0x32>
	{
		status[index++]='L';
   1bc92:	1dfb      	adds	r3, r7, #7
   1bc94:	781b      	ldrb	r3, [r3, #0]
   1bc96:	1dfa      	adds	r2, r7, #7
   1bc98:	1c59      	adds	r1, r3, #1
   1bc9a:	7011      	strb	r1, [r2, #0]
   1bc9c:	001a      	movs	r2, r3
   1bc9e:	003b      	movs	r3, r7
   1bca0:	214c      	movs	r1, #76	; 0x4c
   1bca2:	5499      	strb	r1, [r3, r2]
   1bca4:	e03b      	b.n	1bd1e <statusOnCall+0xaa>
		// sim1->setMotorMGRResponse('L');	//motor off, no light
	}
	else if (b == AC_2PH)	//power only in 2 phase
   1bca6:	1dbb      	adds	r3, r7, #6
   1bca8:	781b      	ldrb	r3, [r3, #0]
   1bcaa:	2b02      	cmp	r3, #2
   1bcac:	d109      	bne.n	1bcc2 <statusOnCall+0x4e>
	{
		status[index++]='A';
   1bcae:	1dfb      	adds	r3, r7, #7
   1bcb0:	781b      	ldrb	r3, [r3, #0]
   1bcb2:	1dfa      	adds	r2, r7, #7
   1bcb4:	1c59      	adds	r1, r3, #1
   1bcb6:	7011      	strb	r1, [r2, #0]
   1bcb8:	001a      	movs	r2, r3
   1bcba:	003b      	movs	r3, r7
   1bcbc:	2141      	movs	r1, #65	; 0x41
   1bcbe:	5499      	strb	r1, [r3, r2]
   1bcc0:	e02d      	b.n	1bd1e <statusOnCall+0xaa>
		// sim1->setMotorMGRResponse('A');
	}
	else if (b == AC_3PH)
   1bcc2:	1dbb      	adds	r3, r7, #6
   1bcc4:	781b      	ldrb	r3, [r3, #0]
   1bcc6:	2b03      	cmp	r3, #3
   1bcc8:	d129      	bne.n	1bd1e <statusOnCall+0xaa>
	{
		bool temp = getMotorState_from_pin();
   1bcca:	1d7c      	adds	r4, r7, #5
   1bccc:	4b29      	ldr	r3, [pc, #164]	; (1bd74 <statusOnCall+0x100>)
   1bcce:	4798      	blx	r3
   1bcd0:	0003      	movs	r3, r0
   1bcd2:	7023      	strb	r3, [r4, #0]
		if (temp)
   1bcd4:	1d7b      	adds	r3, r7, #5
   1bcd6:	781b      	ldrb	r3, [r3, #0]
   1bcd8:	2b00      	cmp	r3, #0
   1bcda:	d009      	beq.n	1bcf0 <statusOnCall+0x7c>
		{
			status[index++]='+';
   1bcdc:	1dfb      	adds	r3, r7, #7
   1bcde:	781b      	ldrb	r3, [r3, #0]
   1bce0:	1dfa      	adds	r2, r7, #7
   1bce2:	1c59      	adds	r1, r3, #1
   1bce4:	7011      	strb	r1, [r2, #0]
   1bce6:	001a      	movs	r2, r3
   1bce8:	003b      	movs	r3, r7
   1bcea:	212b      	movs	r1, #43	; 0x2b
   1bcec:	5499      	strb	r1, [r3, r2]
   1bcee:	e016      	b.n	1bd1e <statusOnCall+0xaa>
			// sim1->setMotorMGRResponse('+');	//motor is on
		}
		else
		{
			status[index++]='_';
   1bcf0:	1dfb      	adds	r3, r7, #7
   1bcf2:	781b      	ldrb	r3, [r3, #0]
   1bcf4:	1dfa      	adds	r2, r7, #7
   1bcf6:	1c59      	adds	r1, r3, #1
   1bcf8:	7011      	strb	r1, [r2, #0]
   1bcfa:	001a      	movs	r2, r3
   1bcfc:	003b      	movs	r3, r7
   1bcfe:	215f      	movs	r1, #95	; 0x5f
   1bd00:	5499      	strb	r1, [r3, r2]
			
			//Play File for Wrong Phase Sequence if phase seq is wrong
			if(structThreePhase_state.u8t_phase_sequence_flag !=THREEPHASE_OK)					//3 phase sequence is incorrect
   1bd02:	4b1d      	ldr	r3, [pc, #116]	; (1bd78 <statusOnCall+0x104>)
   1bd04:	781b      	ldrb	r3, [r3, #0]
   1bd06:	b2db      	uxtb	r3, r3
   1bd08:	2b02      	cmp	r3, #2
   1bd0a:	d008      	beq.n	1bd1e <statusOnCall+0xaa>
			{
				//todo: replace A(single Phasing) in below statement with Character for Wrong Phase Sequence Event
				status[index++]='A';
   1bd0c:	1dfb      	adds	r3, r7, #7
   1bd0e:	781b      	ldrb	r3, [r3, #0]
   1bd10:	1dfa      	adds	r2, r7, #7
   1bd12:	1c59      	adds	r1, r3, #1
   1bd14:	7011      	strb	r1, [r2, #0]
   1bd16:	001a      	movs	r2, r3
   1bd18:	003b      	movs	r3, r7
   1bd1a:	2141      	movs	r1, #65	; 0x41
   1bd1c:	5499      	strb	r1, [r3, r2]

			// sim1->setMotorMGRResponse('_');	//motor off, light on
		}
	}

	if(user_settings_parameter_struct.autoStartAddress)
   1bd1e:	4b17      	ldr	r3, [pc, #92]	; (1bd7c <statusOnCall+0x108>)
   1bd20:	785b      	ldrb	r3, [r3, #1]
   1bd22:	b2db      	uxtb	r3, r3
   1bd24:	2b00      	cmp	r3, #0
   1bd26:	d009      	beq.n	1bd3c <statusOnCall+0xc8>
	{
		status[index++]=')';
   1bd28:	1dfb      	adds	r3, r7, #7
   1bd2a:	781b      	ldrb	r3, [r3, #0]
   1bd2c:	1dfa      	adds	r2, r7, #7
   1bd2e:	1c59      	adds	r1, r3, #1
   1bd30:	7011      	strb	r1, [r2, #0]
   1bd32:	001a      	movs	r2, r3
   1bd34:	003b      	movs	r3, r7
   1bd36:	2129      	movs	r1, #41	; 0x29
   1bd38:	5499      	strb	r1, [r3, r2]
   1bd3a:	e008      	b.n	1bd4e <statusOnCall+0xda>
	}
	else
	{
		status[index++]='[';
   1bd3c:	1dfb      	adds	r3, r7, #7
   1bd3e:	781b      	ldrb	r3, [r3, #0]
   1bd40:	1dfa      	adds	r2, r7, #7
   1bd42:	1c59      	adds	r1, r3, #1
   1bd44:	7011      	strb	r1, [r2, #0]
   1bd46:	001a      	movs	r2, r3
   1bd48:	003b      	movs	r3, r7
   1bd4a:	215b      	movs	r1, #91	; 0x5b
   1bd4c:	5499      	strb	r1, [r3, r2]
	}
	
	status[index++]='\0';
   1bd4e:	1dfb      	adds	r3, r7, #7
   1bd50:	781b      	ldrb	r3, [r3, #0]
   1bd52:	1dfa      	adds	r2, r7, #7
   1bd54:	1c59      	adds	r1, r3, #1
   1bd56:	7011      	strb	r1, [r2, #0]
   1bd58:	001a      	movs	r2, r3
   1bd5a:	003b      	movs	r3, r7
   1bd5c:	2100      	movs	r1, #0
   1bd5e:	5499      	strb	r1, [r3, r2]

	playRepeatedFiles(status);
   1bd60:	003b      	movs	r3, r7
   1bd62:	0018      	movs	r0, r3
   1bd64:	4b06      	ldr	r3, [pc, #24]	; (1bd80 <statusOnCall+0x10c>)
   1bd66:	4798      	blx	r3
}
   1bd68:	46c0      	nop			; (mov r8, r8)
   1bd6a:	46bd      	mov	sp, r7
   1bd6c:	b003      	add	sp, #12
   1bd6e:	bd90      	pop	{r4, r7, pc}
   1bd70:	0001b4a1 	.word	0x0001b4a1
   1bd74:	0001af79 	.word	0x0001af79
   1bd78:	20000748 	.word	0x20000748
   1bd7c:	20000654 	.word	0x20000654
   1bd80:	00014a09 	.word	0x00014a09

0001bd84 <voltageOnCall>:

void voltageOnCall(void)
{
   1bd84:	b590      	push	{r4, r7, lr}
   1bd86:	b087      	sub	sp, #28
   1bd88:	af02      	add	r7, sp, #8
	char voltFiles[13];
	//change the below string seq to speak R Y B instead of 0
	sprintf(voltFiles,"]%lu{%lu}%lu",Analog_Parameter_Struct.PhaseRY_Voltage,Analog_Parameter_Struct.PhaseYB_Voltage,Analog_Parameter_Struct.PhaseBR_Voltage);
   1bd8a:	4b0a      	ldr	r3, [pc, #40]	; (1bdb4 <voltageOnCall+0x30>)
   1bd8c:	681a      	ldr	r2, [r3, #0]
   1bd8e:	4b09      	ldr	r3, [pc, #36]	; (1bdb4 <voltageOnCall+0x30>)
   1bd90:	685c      	ldr	r4, [r3, #4]
   1bd92:	4b08      	ldr	r3, [pc, #32]	; (1bdb4 <voltageOnCall+0x30>)
   1bd94:	689b      	ldr	r3, [r3, #8]
   1bd96:	4908      	ldr	r1, [pc, #32]	; (1bdb8 <voltageOnCall+0x34>)
   1bd98:	0038      	movs	r0, r7
   1bd9a:	9300      	str	r3, [sp, #0]
   1bd9c:	0023      	movs	r3, r4
   1bd9e:	4c07      	ldr	r4, [pc, #28]	; (1bdbc <voltageOnCall+0x38>)
   1bda0:	47a0      	blx	r4
	playRepeatedFiles(voltFiles);
   1bda2:	003b      	movs	r3, r7
   1bda4:	0018      	movs	r0, r3
   1bda6:	4b06      	ldr	r3, [pc, #24]	; (1bdc0 <voltageOnCall+0x3c>)
   1bda8:	4798      	blx	r3
}
   1bdaa:	46c0      	nop			; (mov r8, r8)
   1bdac:	46bd      	mov	sp, r7
   1bdae:	b005      	add	sp, #20
   1bdb0:	bd90      	pop	{r4, r7, pc}
   1bdb2:	46c0      	nop			; (mov r8, r8)
   1bdb4:	200006e8 	.word	0x200006e8
   1bdb8:	0002a5d4 	.word	0x0002a5d4
   1bdbc:	00028be9 	.word	0x00028be9
   1bdc0:	00014a09 	.word	0x00014a09

0001bdc4 <setM2MEventState>:

void setM2MEventState(uint8_t eventNo, uint8_t state)
{
   1bdc4:	b580      	push	{r7, lr}
   1bdc6:	b082      	sub	sp, #8
   1bdc8:	af00      	add	r7, sp, #0
   1bdca:	0002      	movs	r2, r0
   1bdcc:	1dfb      	adds	r3, r7, #7
   1bdce:	701a      	strb	r2, [r3, #0]
   1bdd0:	1dbb      	adds	r3, r7, #6
   1bdd2:	1c0a      	adds	r2, r1, #0
   1bdd4:	701a      	strb	r2, [r3, #0]
	if(m2mEvent_arr[eventNo]==ME_SERVICING)
   1bdd6:	1dfb      	adds	r3, r7, #7
   1bdd8:	781b      	ldrb	r3, [r3, #0]
   1bdda:	4a0e      	ldr	r2, [pc, #56]	; (1be14 <setM2MEventState+0x50>)
   1bddc:	5cd3      	ldrb	r3, [r2, r3]
   1bdde:	2b02      	cmp	r3, #2
   1bde0:	d10e      	bne.n	1be00 <setM2MEventState+0x3c>
	{
		if(state==ME_NOTAVAILABLE)
   1bde2:	1dbb      	adds	r3, r7, #6
   1bde4:	781b      	ldrb	r3, [r3, #0]
   1bde6:	2b03      	cmp	r3, #3
   1bde8:	d10a      	bne.n	1be00 <setM2MEventState+0x3c>
		{
			state=ME_CLEARED;
   1bdea:	1dbb      	adds	r3, r7, #6
   1bdec:	2200      	movs	r2, #0
   1bdee:	701a      	strb	r2, [r3, #0]
			simEventTemp[mapTable[eventNo]]=false;	//regsiter relevant Normal Event
   1bdf0:	1dfb      	adds	r3, r7, #7
   1bdf2:	781b      	ldrb	r3, [r3, #0]
   1bdf4:	4a08      	ldr	r2, [pc, #32]	; (1be18 <setM2MEventState+0x54>)
   1bdf6:	5cd3      	ldrb	r3, [r2, r3]
   1bdf8:	001a      	movs	r2, r3
   1bdfa:	4b08      	ldr	r3, [pc, #32]	; (1be1c <setM2MEventState+0x58>)
   1bdfc:	2100      	movs	r1, #0
   1bdfe:	5499      	strb	r1, [r3, r2]
		}
	}
	m2mEvent_arr[eventNo]=state;
   1be00:	1dfb      	adds	r3, r7, #7
   1be02:	781b      	ldrb	r3, [r3, #0]
   1be04:	4a03      	ldr	r2, [pc, #12]	; (1be14 <setM2MEventState+0x50>)
   1be06:	1db9      	adds	r1, r7, #6
   1be08:	7809      	ldrb	r1, [r1, #0]
   1be0a:	54d1      	strb	r1, [r2, r3]
}
   1be0c:	46c0      	nop			; (mov r8, r8)
   1be0e:	46bd      	mov	sp, r7
   1be10:	b002      	add	sp, #8
   1be12:	bd80      	pop	{r7, pc}
   1be14:	200007c0 	.word	0x200007c0
   1be18:	20000740 	.word	0x20000740
   1be1c:	20000718 	.word	0x20000718

0001be20 <M2MEventManager>:

void M2MEventManager(void)
{
   1be20:	b580      	push	{r7, lr}
   1be22:	b082      	sub	sp, #8
   1be24:	af00      	add	r7, sp, #0
	uint8_t j=2;
   1be26:	1dfb      	adds	r3, r7, #7
   1be28:	2202      	movs	r2, #2
   1be2a:	701a      	strb	r2, [r3, #0]
	while(j--)
   1be2c:	e00a      	b.n	1be44 <M2MEventManager+0x24>
	{
		if(m2mEvent_arr[j]==ME_WAITREGISTER)
   1be2e:	1dfb      	adds	r3, r7, #7
   1be30:	781b      	ldrb	r3, [r3, #0]
   1be32:	4a0a      	ldr	r2, [pc, #40]	; (1be5c <M2MEventManager+0x3c>)
   1be34:	5cd3      	ldrb	r3, [r2, r3]
   1be36:	2b01      	cmp	r3, #1
   1be38:	d104      	bne.n	1be44 <M2MEventManager+0x24>
		{
			registerM2MEvent(j);
   1be3a:	1dfb      	adds	r3, r7, #7
   1be3c:	781b      	ldrb	r3, [r3, #0]
   1be3e:	0018      	movs	r0, r3
   1be40:	4b07      	ldr	r3, [pc, #28]	; (1be60 <M2MEventManager+0x40>)
   1be42:	4798      	blx	r3
	while(j--)
   1be44:	1dfb      	adds	r3, r7, #7
   1be46:	781b      	ldrb	r3, [r3, #0]
   1be48:	1dfa      	adds	r2, r7, #7
   1be4a:	1e59      	subs	r1, r3, #1
   1be4c:	7011      	strb	r1, [r2, #0]
   1be4e:	2b00      	cmp	r3, #0
   1be50:	d1ed      	bne.n	1be2e <M2MEventManager+0xe>
		}
	}
}
   1be52:	46c0      	nop			; (mov r8, r8)
   1be54:	46bd      	mov	sp, r7
   1be56:	b002      	add	sp, #8
   1be58:	bd80      	pop	{r7, pc}
   1be5a:	46c0      	nop			; (mov r8, r8)
   1be5c:	200007c0 	.word	0x200007c0
   1be60:	00014c91 	.word	0x00014c91

0001be64 <SIMEventManager>:

void SIMEventManager(void)
{
   1be64:	b590      	push	{r4, r7, lr}
   1be66:	b083      	sub	sp, #12
   1be68:	af00      	add	r7, sp, #0
	uint8_t i = 0;
   1be6a:	1dfb      	adds	r3, r7, #7
   1be6c:	2200      	movs	r2, #0
   1be6e:	701a      	strb	r2, [r3, #0]
	if (factory_settings_parameter_struct.ENABLE_WATER)
   1be70:	4b1e      	ldr	r3, [pc, #120]	; (1beec <SIMEventManager+0x88>)
   1be72:	795b      	ldrb	r3, [r3, #5]
   1be74:	2b00      	cmp	r3, #0
   1be76:	d00b      	beq.n	1be90 <SIMEventManager+0x2c>
	{
		if (factory_settings_parameter_struct.ENABLE_GP)
   1be78:	4b1c      	ldr	r3, [pc, #112]	; (1beec <SIMEventManager+0x88>)
   1be7a:	791b      	ldrb	r3, [r3, #4]
   1be7c:	2b00      	cmp	r3, #0
   1be7e:	d003      	beq.n	1be88 <SIMEventManager+0x24>
		{
			i = 19;
   1be80:	1dfb      	adds	r3, r7, #7
   1be82:	2213      	movs	r2, #19
   1be84:	701a      	strb	r2, [r3, #0]
   1be86:	e025      	b.n	1bed4 <SIMEventManager+0x70>
		}
		else
		{
			i = 17;
   1be88:	1dfb      	adds	r3, r7, #7
   1be8a:	2211      	movs	r2, #17
   1be8c:	701a      	strb	r2, [r3, #0]
   1be8e:	e021      	b.n	1bed4 <SIMEventManager+0x70>
		}
	}
	else
	{
		if (factory_settings_parameter_struct.ENABLE_CURRENT)
   1be90:	4b16      	ldr	r3, [pc, #88]	; (1beec <SIMEventManager+0x88>)
   1be92:	785b      	ldrb	r3, [r3, #1]
   1be94:	2b00      	cmp	r3, #0
   1be96:	d003      	beq.n	1bea0 <SIMEventManager+0x3c>
		{
			i = 14;
   1be98:	1dfb      	adds	r3, r7, #7
   1be9a:	220e      	movs	r2, #14
   1be9c:	701a      	strb	r2, [r3, #0]
   1be9e:	e019      	b.n	1bed4 <SIMEventManager+0x70>
		}
		else
		{
			i = 12;
   1bea0:	1dfb      	adds	r3, r7, #7
   1bea2:	220c      	movs	r2, #12
   1bea4:	701a      	strb	r2, [r3, #0]
		}
	}
	
	while(i--)
   1bea6:	e015      	b.n	1bed4 <SIMEventManager+0x70>
	{
		if (!simEventTemp[i])
   1bea8:	1dfb      	adds	r3, r7, #7
   1beaa:	781b      	ldrb	r3, [r3, #0]
   1beac:	4a10      	ldr	r2, [pc, #64]	; (1bef0 <SIMEventManager+0x8c>)
   1beae:	5cd3      	ldrb	r3, [r2, r3]
   1beb0:	2201      	movs	r2, #1
   1beb2:	4053      	eors	r3, r2
   1beb4:	b2db      	uxtb	r3, r3
   1beb6:	2b00      	cmp	r3, #0
   1beb8:	d00c      	beq.n	1bed4 <SIMEventManager+0x70>
		simEventTemp[i] = registerEvent(simEvent[i]);
   1beba:	1dfb      	adds	r3, r7, #7
   1bebc:	781c      	ldrb	r4, [r3, #0]
   1bebe:	1dfb      	adds	r3, r7, #7
   1bec0:	781b      	ldrb	r3, [r3, #0]
   1bec2:	4a0c      	ldr	r2, [pc, #48]	; (1bef4 <SIMEventManager+0x90>)
   1bec4:	5cd3      	ldrb	r3, [r2, r3]
   1bec6:	0018      	movs	r0, r3
   1bec8:	4b0b      	ldr	r3, [pc, #44]	; (1bef8 <SIMEventManager+0x94>)
   1beca:	4798      	blx	r3
   1becc:	0003      	movs	r3, r0
   1bece:	001a      	movs	r2, r3
   1bed0:	4b07      	ldr	r3, [pc, #28]	; (1bef0 <SIMEventManager+0x8c>)
   1bed2:	551a      	strb	r2, [r3, r4]
	while(i--)
   1bed4:	1dfb      	adds	r3, r7, #7
   1bed6:	781b      	ldrb	r3, [r3, #0]
   1bed8:	1dfa      	adds	r2, r7, #7
   1beda:	1e59      	subs	r1, r3, #1
   1bedc:	7011      	strb	r1, [r2, #0]
   1bede:	2b00      	cmp	r3, #0
   1bee0:	d1e2      	bne.n	1bea8 <SIMEventManager+0x44>
	}
}
   1bee2:	46c0      	nop			; (mov r8, r8)
   1bee4:	46bd      	mov	sp, r7
   1bee6:	b003      	add	sp, #12
   1bee8:	bd90      	pop	{r4, r7, pc}
   1beea:	46c0      	nop			; (mov r8, r8)
   1beec:	2000062c 	.word	0x2000062c
   1bef0:	20000718 	.word	0x20000718
   1bef4:	200007f8 	.word	0x200007f8
   1bef8:	00014b6d 	.word	0x00014b6d

0001befc <MotorVoltageBypassTimerOver>:

bool MotorVoltageBypassTimerOver(void)
{
   1befc:	b580      	push	{r7, lr}
   1befe:	af00      	add	r7, sp, #0
	return ((xTaskGetTickCount()-motorVoltageBypassTimerTime) > user_settings_parameter_struct.motorVoltageBypassTime);
   1bf00:	4b07      	ldr	r3, [pc, #28]	; (1bf20 <MotorVoltageBypassTimerOver+0x24>)
   1bf02:	4798      	blx	r3
   1bf04:	0002      	movs	r2, r0
   1bf06:	4b07      	ldr	r3, [pc, #28]	; (1bf24 <MotorVoltageBypassTimerOver+0x28>)
   1bf08:	681b      	ldr	r3, [r3, #0]
   1bf0a:	1ad2      	subs	r2, r2, r3
   1bf0c:	4b06      	ldr	r3, [pc, #24]	; (1bf28 <MotorVoltageBypassTimerOver+0x2c>)
   1bf0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1bf10:	4293      	cmp	r3, r2
   1bf12:	419b      	sbcs	r3, r3
   1bf14:	425b      	negs	r3, r3
   1bf16:	b2db      	uxtb	r3, r3
}
   1bf18:	0018      	movs	r0, r3
   1bf1a:	46bd      	mov	sp, r7
   1bf1c:	bd80      	pop	{r7, pc}
   1bf1e:	46c0      	nop			; (mov r8, r8)
   1bf20:	000200dd 	.word	0x000200dd
   1bf24:	20000784 	.word	0x20000784
   1bf28:	20000654 	.word	0x20000654

0001bf2c <checkCurrentConsumption>:


void checkCurrentConsumption(void)
{
   1bf2c:	b580      	push	{r7, lr}
   1bf2e:	b084      	sub	sp, #16
   1bf30:	af00      	add	r7, sp, #0
	if(startSequenceOn || stopSequenceOn || !getMotorState() || !(user_settings_parameter_struct.currentDetectionAddress) || starDeltaTimerOn)
   1bf32:	4b70      	ldr	r3, [pc, #448]	; (1c0f4 <checkCurrentConsumption+0x1c8>)
   1bf34:	781b      	ldrb	r3, [r3, #0]
   1bf36:	2b00      	cmp	r3, #0
   1bf38:	d000      	beq.n	1bf3c <checkCurrentConsumption+0x10>
   1bf3a:	e0d6      	b.n	1c0ea <checkCurrentConsumption+0x1be>
   1bf3c:	4b6e      	ldr	r3, [pc, #440]	; (1c0f8 <checkCurrentConsumption+0x1cc>)
   1bf3e:	781b      	ldrb	r3, [r3, #0]
   1bf40:	2b00      	cmp	r3, #0
   1bf42:	d000      	beq.n	1bf46 <checkCurrentConsumption+0x1a>
   1bf44:	e0d1      	b.n	1c0ea <checkCurrentConsumption+0x1be>
   1bf46:	4b6d      	ldr	r3, [pc, #436]	; (1c0fc <checkCurrentConsumption+0x1d0>)
   1bf48:	4798      	blx	r3
   1bf4a:	0003      	movs	r3, r0
   1bf4c:	001a      	movs	r2, r3
   1bf4e:	2301      	movs	r3, #1
   1bf50:	4053      	eors	r3, r2
   1bf52:	b2db      	uxtb	r3, r3
   1bf54:	2b00      	cmp	r3, #0
   1bf56:	d000      	beq.n	1bf5a <checkCurrentConsumption+0x2e>
   1bf58:	e0c7      	b.n	1c0ea <checkCurrentConsumption+0x1be>
   1bf5a:	4b69      	ldr	r3, [pc, #420]	; (1c100 <checkCurrentConsumption+0x1d4>)
   1bf5c:	7bdb      	ldrb	r3, [r3, #15]
   1bf5e:	b2db      	uxtb	r3, r3
   1bf60:	2b00      	cmp	r3, #0
   1bf62:	d100      	bne.n	1bf66 <checkCurrentConsumption+0x3a>
   1bf64:	e0c1      	b.n	1c0ea <checkCurrentConsumption+0x1be>
   1bf66:	4b67      	ldr	r3, [pc, #412]	; (1c104 <checkCurrentConsumption+0x1d8>)
   1bf68:	781b      	ldrb	r3, [r3, #0]
   1bf6a:	2b00      	cmp	r3, #0
   1bf6c:	d000      	beq.n	1bf70 <checkCurrentConsumption+0x44>
   1bf6e:	e0bc      	b.n	1c0ea <checkCurrentConsumption+0x1be>
	{
		return;
	}
	//|| ((xTaskGetTickCount()-lastCurrentReadingTime)<500))
	
	if(enableCurrentBuffer && xTaskGetTickCount()-tempStartSequenceTimer>30000)
   1bf70:	4b65      	ldr	r3, [pc, #404]	; (1c108 <checkCurrentConsumption+0x1dc>)
   1bf72:	781b      	ldrb	r3, [r3, #0]
   1bf74:	2b00      	cmp	r3, #0
   1bf76:	d00b      	beq.n	1bf90 <checkCurrentConsumption+0x64>
   1bf78:	4b64      	ldr	r3, [pc, #400]	; (1c10c <checkCurrentConsumption+0x1e0>)
   1bf7a:	4798      	blx	r3
   1bf7c:	0002      	movs	r2, r0
   1bf7e:	4b64      	ldr	r3, [pc, #400]	; (1c110 <checkCurrentConsumption+0x1e4>)
   1bf80:	681b      	ldr	r3, [r3, #0]
   1bf82:	1ad3      	subs	r3, r2, r3
   1bf84:	4a63      	ldr	r2, [pc, #396]	; (1c114 <checkCurrentConsumption+0x1e8>)
   1bf86:	4293      	cmp	r3, r2
   1bf88:	d902      	bls.n	1bf90 <checkCurrentConsumption+0x64>
	{
		enableCurrentBuffer=false;
   1bf8a:	4b5f      	ldr	r3, [pc, #380]	; (1c108 <checkCurrentConsumption+0x1dc>)
   1bf8c:	2200      	movs	r2, #0
   1bf8e:	701a      	strb	r2, [r3, #0]
	//{
	//ADCcurrent = Read_ADC0(ADC_POSITIVE_INPUT_PIN16,200);
	//xSemaphoreGive(xADC_Semaphore);
	//}
	
	uint32_t temp=0;
   1bf90:	2300      	movs	r3, #0
   1bf92:	60fb      	str	r3, [r7, #12]
	if(user_settings_parameter_struct.over_under_DetectionMethod== MOTOR_UNDEROVER_DETECTION_POWER)
   1bf94:	4b5a      	ldr	r3, [pc, #360]	; (1c100 <checkCurrentConsumption+0x1d4>)
   1bf96:	2226      	movs	r2, #38	; 0x26
   1bf98:	5c9b      	ldrb	r3, [r3, r2]
   1bf9a:	b2db      	uxtb	r3, r3
   1bf9c:	2b01      	cmp	r3, #1
   1bf9e:	d103      	bne.n	1bfa8 <checkCurrentConsumption+0x7c>
	{
		temp = Analog_Parameter_Struct.Motor_Power;
   1bfa0:	4b5d      	ldr	r3, [pc, #372]	; (1c118 <checkCurrentConsumption+0x1ec>)
   1bfa2:	6a1b      	ldr	r3, [r3, #32]
   1bfa4:	60fb      	str	r3, [r7, #12]
   1bfa6:	e002      	b.n	1bfae <checkCurrentConsumption+0x82>
	}
	else
	{
		temp = Analog_Parameter_Struct.Motor_Current;
   1bfa8:	4b5b      	ldr	r3, [pc, #364]	; (1c118 <checkCurrentConsumption+0x1ec>)
   1bfaa:	691b      	ldr	r3, [r3, #16]
   1bfac:	60fb      	str	r3, [r7, #12]
	}
	
	uint32_t overLoadDetectValue=12000;
   1bfae:	4b5b      	ldr	r3, [pc, #364]	; (1c11c <checkCurrentConsumption+0x1f0>)
   1bfb0:	60bb      	str	r3, [r7, #8]
	
	uint8_t temp2;
	
	if(enableCurrentBuffer && temp>(user_settings_parameter_struct.normalLoadAddress<<1))    //more than double  <<1 gives mulile of 2 value (double the orignal value)
   1bfb2:	4b55      	ldr	r3, [pc, #340]	; (1c108 <checkCurrentConsumption+0x1dc>)
   1bfb4:	781b      	ldrb	r3, [r3, #0]
   1bfb6:	2b00      	cmp	r3, #0
   1bfb8:	d00b      	beq.n	1bfd2 <checkCurrentConsumption+0xa6>
   1bfba:	4b51      	ldr	r3, [pc, #324]	; (1c100 <checkCurrentConsumption+0x1d4>)
   1bfbc:	691b      	ldr	r3, [r3, #16]
   1bfbe:	005a      	lsls	r2, r3, #1
   1bfc0:	68fb      	ldr	r3, [r7, #12]
   1bfc2:	429a      	cmp	r2, r3
   1bfc4:	d205      	bcs.n	1bfd2 <checkCurrentConsumption+0xa6>
	{
		temp2 = CR_OVER2;
   1bfc6:	1dfb      	adds	r3, r7, #7
   1bfc8:	2202      	movs	r2, #2
   1bfca:	701a      	strb	r2, [r3, #0]
		overLoadDetectValue=18000;
   1bfcc:	4b54      	ldr	r3, [pc, #336]	; (1c120 <checkCurrentConsumption+0x1f4>)
   1bfce:	60bb      	str	r3, [r7, #8]
   1bfd0:	e050      	b.n	1c074 <checkCurrentConsumption+0x148>
	}
	else if(!enableCurrentBuffer && temp>(user_settings_parameter_struct.normalLoadAddress<<1))			//more than double
   1bfd2:	4b4d      	ldr	r3, [pc, #308]	; (1c108 <checkCurrentConsumption+0x1dc>)
   1bfd4:	781b      	ldrb	r3, [r3, #0]
   1bfd6:	2201      	movs	r2, #1
   1bfd8:	4053      	eors	r3, r2
   1bfda:	b2db      	uxtb	r3, r3
   1bfdc:	2b00      	cmp	r3, #0
   1bfde:	d00c      	beq.n	1bffa <checkCurrentConsumption+0xce>
   1bfe0:	4b47      	ldr	r3, [pc, #284]	; (1c100 <checkCurrentConsumption+0x1d4>)
   1bfe2:	691b      	ldr	r3, [r3, #16]
   1bfe4:	005a      	lsls	r2, r3, #1
   1bfe6:	68fb      	ldr	r3, [r7, #12]
   1bfe8:	429a      	cmp	r2, r3
   1bfea:	d206      	bcs.n	1bffa <checkCurrentConsumption+0xce>
	{
		temp2 = CR_OVER;
   1bfec:	1dfb      	adds	r3, r7, #7
   1bfee:	2201      	movs	r2, #1
   1bff0:	701a      	strb	r2, [r3, #0]
		overLoadDetectValue=overLoadDetectValue>>2;
   1bff2:	68bb      	ldr	r3, [r7, #8]
   1bff4:	089b      	lsrs	r3, r3, #2
   1bff6:	60bb      	str	r3, [r7, #8]
   1bff8:	e03c      	b.n	1c074 <checkCurrentConsumption+0x148>
	}
	else if(!enableCurrentBuffer && temp> (user_settings_parameter_struct.normalLoadAddress+(user_settings_parameter_struct.normalLoadAddress>>1))) // more than 1.5
   1bffa:	4b43      	ldr	r3, [pc, #268]	; (1c108 <checkCurrentConsumption+0x1dc>)
   1bffc:	781b      	ldrb	r3, [r3, #0]
   1bffe:	2201      	movs	r2, #1
   1c000:	4053      	eors	r3, r2
   1c002:	b2db      	uxtb	r3, r3
   1c004:	2b00      	cmp	r3, #0
   1c006:	d00f      	beq.n	1c028 <checkCurrentConsumption+0xfc>
   1c008:	4b3d      	ldr	r3, [pc, #244]	; (1c100 <checkCurrentConsumption+0x1d4>)
   1c00a:	691a      	ldr	r2, [r3, #16]
   1c00c:	4b3c      	ldr	r3, [pc, #240]	; (1c100 <checkCurrentConsumption+0x1d4>)
   1c00e:	691b      	ldr	r3, [r3, #16]
   1c010:	085b      	lsrs	r3, r3, #1
   1c012:	18d2      	adds	r2, r2, r3
   1c014:	68fb      	ldr	r3, [r7, #12]
   1c016:	429a      	cmp	r2, r3
   1c018:	d206      	bcs.n	1c028 <checkCurrentConsumption+0xfc>
	{
		temp2 = CR_OVER;
   1c01a:	1dfb      	adds	r3, r7, #7
   1c01c:	2201      	movs	r2, #1
   1c01e:	701a      	strb	r2, [r3, #0]
		overLoadDetectValue=overLoadDetectValue>>1;
   1c020:	68bb      	ldr	r3, [r7, #8]
   1c022:	085b      	lsrs	r3, r3, #1
   1c024:	60bb      	str	r3, [r7, #8]
   1c026:	e025      	b.n	1c074 <checkCurrentConsumption+0x148>
	}
	else if (!enableCurrentBuffer && temp>user_settings_parameter_struct.overloadAddress)		// more than 1.25 to 1.5
   1c028:	4b37      	ldr	r3, [pc, #220]	; (1c108 <checkCurrentConsumption+0x1dc>)
   1c02a:	781b      	ldrb	r3, [r3, #0]
   1c02c:	2201      	movs	r2, #1
   1c02e:	4053      	eors	r3, r2
   1c030:	b2db      	uxtb	r3, r3
   1c032:	2b00      	cmp	r3, #0
   1c034:	d008      	beq.n	1c048 <checkCurrentConsumption+0x11c>
   1c036:	4b32      	ldr	r3, [pc, #200]	; (1c100 <checkCurrentConsumption+0x1d4>)
   1c038:	695a      	ldr	r2, [r3, #20]
   1c03a:	68fb      	ldr	r3, [r7, #12]
   1c03c:	429a      	cmp	r2, r3
   1c03e:	d203      	bcs.n	1c048 <checkCurrentConsumption+0x11c>
	{
		temp2 = CR_OVER;
   1c040:	1dfb      	adds	r3, r7, #7
   1c042:	2201      	movs	r2, #1
   1c044:	701a      	strb	r2, [r3, #0]
   1c046:	e015      	b.n	1c074 <checkCurrentConsumption+0x148>
	}
	else if(!enableCurrentBuffer && temp < user_settings_parameter_struct.underloadAddress)		// only consider noLoad after 30 secs
   1c048:	4b2f      	ldr	r3, [pc, #188]	; (1c108 <checkCurrentConsumption+0x1dc>)
   1c04a:	781b      	ldrb	r3, [r3, #0]
   1c04c:	2201      	movs	r2, #1
   1c04e:	4053      	eors	r3, r2
   1c050:	b2db      	uxtb	r3, r3
   1c052:	2b00      	cmp	r3, #0
   1c054:	d00b      	beq.n	1c06e <checkCurrentConsumption+0x142>
   1c056:	4b2a      	ldr	r3, [pc, #168]	; (1c100 <checkCurrentConsumption+0x1d4>)
   1c058:	699a      	ldr	r2, [r3, #24]
   1c05a:	68fb      	ldr	r3, [r7, #12]
   1c05c:	429a      	cmp	r2, r3
   1c05e:	d906      	bls.n	1c06e <checkCurrentConsumption+0x142>
	{
		temp2 = CR_UNDER;
   1c060:	1dfb      	adds	r3, r7, #7
   1c062:	2202      	movs	r2, #2
   1c064:	701a      	strb	r2, [r3, #0]
		overLoadDetectValue=overLoadDetectValue>>2;
   1c066:	68bb      	ldr	r3, [r7, #8]
   1c068:	089b      	lsrs	r3, r3, #2
   1c06a:	60bb      	str	r3, [r7, #8]
   1c06c:	e002      	b.n	1c074 <checkCurrentConsumption+0x148>
	//temp2 = CR_UNDER;
	//overLoadDetectValue=overLoadDetectValue>>2;
	//}
	else
	{
		temp2= CR_NORMAL;
   1c06e:	1dfb      	adds	r3, r7, #7
   1c070:	2200      	movs	r2, #0
   1c072:	701a      	strb	r2, [r3, #0]
	}
	if(lastCurrentReading == temp2)
   1c074:	4b2b      	ldr	r3, [pc, #172]	; (1c124 <checkCurrentConsumption+0x1f8>)
   1c076:	781b      	ldrb	r3, [r3, #0]
   1c078:	1dfa      	adds	r2, r7, #7
   1c07a:	7812      	ldrb	r2, [r2, #0]
   1c07c:	429a      	cmp	r2, r3
   1c07e:	d12a      	bne.n	1c0d6 <checkCurrentConsumption+0x1aa>
	{
		if(xTaskGetTickCount()-currentEventFilterTempTime>overLoadDetectValue)
   1c080:	4b22      	ldr	r3, [pc, #136]	; (1c10c <checkCurrentConsumption+0x1e0>)
   1c082:	4798      	blx	r3
   1c084:	0002      	movs	r2, r0
   1c086:	4b28      	ldr	r3, [pc, #160]	; (1c128 <checkCurrentConsumption+0x1fc>)
   1c088:	681b      	ldr	r3, [r3, #0]
   1c08a:	1ad2      	subs	r2, r2, r3
   1c08c:	68bb      	ldr	r3, [r7, #8]
   1c08e:	429a      	cmp	r2, r3
   1c090:	d92c      	bls.n	1c0ec <checkCurrentConsumption+0x1c0>
		{
			if(temp2==CR_OVER)
   1c092:	1dfb      	adds	r3, r7, #7
   1c094:	781b      	ldrb	r3, [r3, #0]
   1c096:	2b01      	cmp	r3, #1
   1c098:	d10c      	bne.n	1c0b4 <checkCurrentConsumption+0x188>
			{
				stopMotor(false,true,false);
   1c09a:	2200      	movs	r2, #0
   1c09c:	2101      	movs	r1, #1
   1c09e:	2000      	movs	r0, #0
   1c0a0:	4b22      	ldr	r3, [pc, #136]	; (1c12c <checkCurrentConsumption+0x200>)
   1c0a2:	4798      	blx	r3
				simEventTemp[12] = registerEvent('B');			//register overload Event
   1c0a4:	2042      	movs	r0, #66	; 0x42
   1c0a6:	4b22      	ldr	r3, [pc, #136]	; (1c130 <checkCurrentConsumption+0x204>)
   1c0a8:	4798      	blx	r3
   1c0aa:	0003      	movs	r3, r0
   1c0ac:	001a      	movs	r2, r3
   1c0ae:	4b21      	ldr	r3, [pc, #132]	; (1c134 <checkCurrentConsumption+0x208>)
   1c0b0:	731a      	strb	r2, [r3, #12]
   1c0b2:	e01b      	b.n	1c0ec <checkCurrentConsumption+0x1c0>
			}
			else if(temp2==CR_UNDER)
   1c0b4:	1dfb      	adds	r3, r7, #7
   1c0b6:	781b      	ldrb	r3, [r3, #0]
   1c0b8:	2b02      	cmp	r3, #2
   1c0ba:	d117      	bne.n	1c0ec <checkCurrentConsumption+0x1c0>
			{
				stopMotor(false,true,false);
   1c0bc:	2200      	movs	r2, #0
   1c0be:	2101      	movs	r1, #1
   1c0c0:	2000      	movs	r0, #0
   1c0c2:	4b1a      	ldr	r3, [pc, #104]	; (1c12c <checkCurrentConsumption+0x200>)
   1c0c4:	4798      	blx	r3
				simEventTemp[13] = registerEvent('J');			// register Underload Event
   1c0c6:	204a      	movs	r0, #74	; 0x4a
   1c0c8:	4b19      	ldr	r3, [pc, #100]	; (1c130 <checkCurrentConsumption+0x204>)
   1c0ca:	4798      	blx	r3
   1c0cc:	0003      	movs	r3, r0
   1c0ce:	001a      	movs	r2, r3
   1c0d0:	4b18      	ldr	r3, [pc, #96]	; (1c134 <checkCurrentConsumption+0x208>)
   1c0d2:	735a      	strb	r2, [r3, #13]
   1c0d4:	e00a      	b.n	1c0ec <checkCurrentConsumption+0x1c0>
			}
		}
	}
	else
	{
		currentEventFilterTempTime = xTaskGetTickCount();
   1c0d6:	4b0d      	ldr	r3, [pc, #52]	; (1c10c <checkCurrentConsumption+0x1e0>)
   1c0d8:	4798      	blx	r3
   1c0da:	0002      	movs	r2, r0
   1c0dc:	4b12      	ldr	r3, [pc, #72]	; (1c128 <checkCurrentConsumption+0x1fc>)
   1c0de:	601a      	str	r2, [r3, #0]
		lastCurrentReading=temp2;
   1c0e0:	4b10      	ldr	r3, [pc, #64]	; (1c124 <checkCurrentConsumption+0x1f8>)
   1c0e2:	1dfa      	adds	r2, r7, #7
   1c0e4:	7812      	ldrb	r2, [r2, #0]
   1c0e6:	701a      	strb	r2, [r3, #0]
   1c0e8:	e000      	b.n	1c0ec <checkCurrentConsumption+0x1c0>
		return;
   1c0ea:	46c0      	nop			; (mov r8, r8)
	}
}
   1c0ec:	46bd      	mov	sp, r7
   1c0ee:	b004      	add	sp, #16
   1c0f0:	bd80      	pop	{r7, pc}
   1c0f2:	46c0      	nop			; (mov r8, r8)
   1c0f4:	20000799 	.word	0x20000799
   1c0f8:	20000788 	.word	0x20000788
   1c0fc:	0001af25 	.word	0x0001af25
   1c100:	20000654 	.word	0x20000654
   1c104:	2000079b 	.word	0x2000079b
   1c108:	20000760 	.word	0x20000760
   1c10c:	000200dd 	.word	0x000200dd
   1c110:	20000794 	.word	0x20000794
   1c114:	00007530 	.word	0x00007530
   1c118:	200006e8 	.word	0x200006e8
   1c11c:	00002ee0 	.word	0x00002ee0
   1c120:	00004650 	.word	0x00004650
   1c124:	2000077e 	.word	0x2000077e
   1c128:	2000076c 	.word	0x2000076c
   1c12c:	0001b829 	.word	0x0001b829
   1c130:	00014b6d 	.word	0x00014b6d
   1c134:	20000718 	.word	0x20000718

0001c138 <button_detect_pin_callback>:

static void button_detect_pin_callback(void)
{
   1c138:	b580      	push	{r7, lr}
   1c13a:	af00      	add	r7, sp, #0
	buttonEventOccured = true;
   1c13c:	4b02      	ldr	r3, [pc, #8]	; (1c148 <button_detect_pin_callback+0x10>)
   1c13e:	2201      	movs	r2, #1
   1c140:	701a      	strb	r2, [r3, #0]
	//	xTaskNotifyGive(fiftymsTask);
}
   1c142:	46c0      	nop			; (mov r8, r8)
   1c144:	46bd      	mov	sp, r7
   1c146:	bd80      	pop	{r7, pc}
   1c148:	2000079f 	.word	0x2000079f

0001c14c <vTask_MOTORCONTROL>:

static void vTask_MOTORCONTROL(void *params)
{
   1c14c:	b590      	push	{r4, r7, lr}
   1c14e:	b087      	sub	sp, #28
   1c150:	af00      	add	r7, sp, #0
   1c152:	6078      	str	r0, [r7, #4]
	UNUSED(params);
	
	Configure_ADC0();
   1c154:	4bd5      	ldr	r3, [pc, #852]	; (1c4ac <vTask_MOTORCONTROL+0x360>)
   1c156:	4798      	blx	r3
	
	configure_ac();
   1c158:	4bd5      	ldr	r3, [pc, #852]	; (1c4b0 <vTask_MOTORCONTROL+0x364>)
   1c15a:	4798      	blx	r3
	//configure_rtc();
	//configure_event();
	
	//////////////////////////////////////////////////////////////////////////
	gotOffCommand = false;
   1c15c:	4bd5      	ldr	r3, [pc, #852]	; (1c4b4 <vTask_MOTORCONTROL+0x368>)
   1c15e:	2200      	movs	r2, #0
   1c160:	701a      	strb	r2, [r3, #0]
	gotOnCommand = false;
   1c162:	4bd5      	ldr	r3, [pc, #852]	; (1c4b8 <vTask_MOTORCONTROL+0x36c>)
   1c164:	2200      	movs	r2, #0
   1c166:	701a      	strb	r2, [r3, #0]

	//////////////////////////////////////////////////////////////////////////
	eventOccured = false;
   1c168:	4bd4      	ldr	r3, [pc, #848]	; (1c4bc <vTask_MOTORCONTROL+0x370>)
   1c16a:	2200      	movs	r2, #0
   1c16c:	701a      	strb	r2, [r3, #0]
	
	uint8_t last_comparison = AC_CHAN_STATUS_UNKNOWN;
   1c16e:	2315      	movs	r3, #21
   1c170:	18fb      	adds	r3, r7, r3
   1c172:	2201      	movs	r2, #1
   1c174:	701a      	strb	r2, [r3, #0]
	
	//sets the variable to store current ticks, so that we can delay first event operation
	uint32_t delayForFirstEvent = xTaskGetTickCount();
   1c176:	4bd2      	ldr	r3, [pc, #840]	; (1c4c0 <vTask_MOTORCONTROL+0x374>)
   1c178:	4798      	blx	r3
   1c17a:	0003      	movs	r3, r0
   1c17c:	613b      	str	r3, [r7, #16]
	firstEvent = true;
   1c17e:	4bd1      	ldr	r3, [pc, #836]	; (1c4c4 <vTask_MOTORCONTROL+0x378>)
   1c180:	2201      	movs	r2, #1
   1c182:	701a      	strb	r2, [r3, #0]
	
	last_comparison = ac_chan_get_status(&ac_instance,AC_CHAN_CHANNEL_0);
   1c184:	2315      	movs	r3, #21
   1c186:	18fc      	adds	r4, r7, r3
   1c188:	4bcf      	ldr	r3, [pc, #828]	; (1c4c8 <vTask_MOTORCONTROL+0x37c>)
   1c18a:	2100      	movs	r1, #0
   1c18c:	0018      	movs	r0, r3
   1c18e:	4bcf      	ldr	r3, [pc, #828]	; (1c4cc <vTask_MOTORCONTROL+0x380>)
   1c190:	4798      	blx	r3
   1c192:	0003      	movs	r3, r0
   1c194:	7023      	strb	r3, [r4, #0]
	vTaskDelay(500/portTICK_PERIOD_MS);
   1c196:	23fa      	movs	r3, #250	; 0xfa
   1c198:	005b      	lsls	r3, r3, #1
   1c19a:	0018      	movs	r0, r3
   1c19c:	4bcc      	ldr	r3, [pc, #816]	; (1c4d0 <vTask_MOTORCONTROL+0x384>)
   1c19e:	4798      	blx	r3
	last_comparison = ac_chan_get_status(&ac_instance,AC_CHAN_CHANNEL_0); //read again
   1c1a0:	2315      	movs	r3, #21
   1c1a2:	18fc      	adds	r4, r7, r3
   1c1a4:	4bc8      	ldr	r3, [pc, #800]	; (1c4c8 <vTask_MOTORCONTROL+0x37c>)
   1c1a6:	2100      	movs	r1, #0
   1c1a8:	0018      	movs	r0, r3
   1c1aa:	4bc8      	ldr	r3, [pc, #800]	; (1c4cc <vTask_MOTORCONTROL+0x380>)
   1c1ac:	4798      	blx	r3
   1c1ae:	0003      	movs	r3, r0
   1c1b0:	7023      	strb	r3, [r4, #0]
	
	if (last_comparison & AC_CHAN_STATUS_POS_ABOVE_NEG)
   1c1b2:	2315      	movs	r3, #21
   1c1b4:	18fb      	adds	r3, r7, r3
   1c1b6:	781b      	ldrb	r3, [r3, #0]
   1c1b8:	2204      	movs	r2, #4
   1c1ba:	4013      	ands	r3, r2
   1c1bc:	d003      	beq.n	1c1c6 <vTask_MOTORCONTROL+0x7a>
	{
		isACpowerAvailable = true;
   1c1be:	4bc5      	ldr	r3, [pc, #788]	; (1c4d4 <vTask_MOTORCONTROL+0x388>)
   1c1c0:	2201      	movs	r2, #1
   1c1c2:	701a      	strb	r2, [r3, #0]
   1c1c4:	e002      	b.n	1c1cc <vTask_MOTORCONTROL+0x80>
	}
	else
	{
		isACpowerAvailable = false;
   1c1c6:	4bc3      	ldr	r3, [pc, #780]	; (1c4d4 <vTask_MOTORCONTROL+0x388>)
   1c1c8:	2200      	movs	r2, #0
   1c1ca:	701a      	strb	r2, [r3, #0]
	}
	
	current_three_phase_state = AC_OFF;
   1c1cc:	4bc2      	ldr	r3, [pc, #776]	; (1c4d8 <vTask_MOTORCONTROL+0x38c>)
   1c1ce:	2200      	movs	r2, #0
   1c1d0:	701a      	strb	r2, [r3, #0]
	//////////////////////////////////////////////////////////////////////////
	
	stopMotorCommandGiven=false;
   1c1d2:	4bc2      	ldr	r3, [pc, #776]	; (1c4dc <vTask_MOTORCONTROL+0x390>)
   1c1d4:	2200      	movs	r2, #0
   1c1d6:	701a      	strb	r2, [r3, #0]
	motorFeedbackEvent = false;
   1c1d8:	4bc1      	ldr	r3, [pc, #772]	; (1c4e0 <vTask_MOTORCONTROL+0x394>)
   1c1da:	2200      	movs	r2, #0
   1c1dc:	701a      	strb	r2, [r3, #0]
	
	startTimerOn = false;
   1c1de:	4bc1      	ldr	r3, [pc, #772]	; (1c4e4 <vTask_MOTORCONTROL+0x398>)
   1c1e0:	2200      	movs	r2, #0
   1c1e2:	701a      	strb	r2, [r3, #0]

	waitStableLineTime = 50;
   1c1e4:	4bc0      	ldr	r3, [pc, #768]	; (1c4e8 <vTask_MOTORCONTROL+0x39c>)
   1c1e6:	2232      	movs	r2, #50	; 0x32
   1c1e8:	701a      	strb	r2, [r3, #0]
	waitStableLineOn = false;
   1c1ea:	4bc0      	ldr	r3, [pc, #768]	; (1c4ec <vTask_MOTORCONTROL+0x3a0>)
   1c1ec:	2200      	movs	r2, #0
   1c1ee:	701a      	strb	r2, [r3, #0]
	
	singlePhasingTime = 6;
   1c1f0:	4bbf      	ldr	r3, [pc, #764]	; (1c4f0 <vTask_MOTORCONTROL+0x3a4>)
   1c1f2:	2206      	movs	r2, #6
   1c1f4:	701a      	strb	r2, [r3, #0]
	singlePhasingTimerOn = false;
   1c1f6:	4bbf      	ldr	r3, [pc, #764]	; (1c4f4 <vTask_MOTORCONTROL+0x3a8>)
   1c1f8:	2200      	movs	r2, #0
   1c1fa:	701a      	strb	r2, [r3, #0]

	startSequenceTimerTime = 20;
   1c1fc:	4bbe      	ldr	r3, [pc, #760]	; (1c4f8 <vTask_MOTORCONTROL+0x3ac>)
   1c1fe:	2214      	movs	r2, #20
   1c200:	701a      	strb	r2, [r3, #0]
	starDeltaTimerOn=false;
   1c202:	4bbe      	ldr	r3, [pc, #760]	; (1c4fc <vTask_MOTORCONTROL+0x3b0>)
   1c204:	2200      	movs	r2, #0
   1c206:	701a      	strb	r2, [r3, #0]
	startSequenceOn = false;
   1c208:	4bbd      	ldr	r3, [pc, #756]	; (1c500 <vTask_MOTORCONTROL+0x3b4>)
   1c20a:	2200      	movs	r2, #0
   1c20c:	701a      	strb	r2, [r3, #0]

	stopSequenceTimerTime = 20;
   1c20e:	4bbd      	ldr	r3, [pc, #756]	; (1c504 <vTask_MOTORCONTROL+0x3b8>)
   1c210:	2214      	movs	r2, #20
   1c212:	701a      	strb	r2, [r3, #0]
	stopSequenceOn = false;
   1c214:	4bbc      	ldr	r3, [pc, #752]	; (1c508 <vTask_MOTORCONTROL+0x3bc>)
   1c216:	2200      	movs	r2, #0
   1c218:	701a      	strb	r2, [r3, #0]
	
	setAllPhaseState(false); // allPhase = false;
   1c21a:	2000      	movs	r0, #0
   1c21c:	4bbb      	ldr	r3, [pc, #748]	; (1c50c <vTask_MOTORCONTROL+0x3c0>)
   1c21e:	4798      	blx	r3
	setMotorState(false);// mFeedback = false;
   1c220:	2000      	movs	r0, #0
   1c222:	4bbb      	ldr	r3, [pc, #748]	; (1c510 <vTask_MOTORCONTROL+0x3c4>)
   1c224:	4798      	blx	r3
	setACPowerState(false);//  phaseAC = false;
   1c226:	2000      	movs	r0, #0
   1c228:	4bba      	ldr	r3, [pc, #744]	; (1c514 <vTask_MOTORCONTROL+0x3c8>)
   1c22a:	4798      	blx	r3

	initPhaseRMStruct(&struct_rmsRY);
   1c22c:	4bba      	ldr	r3, [pc, #744]	; (1c518 <vTask_MOTORCONTROL+0x3cc>)
   1c22e:	0018      	movs	r0, r3
   1c230:	4bba      	ldr	r3, [pc, #744]	; (1c51c <vTask_MOTORCONTROL+0x3d0>)
   1c232:	4798      	blx	r3
	initPhaseRMStruct(&struct_rmsYB);
   1c234:	4bba      	ldr	r3, [pc, #744]	; (1c520 <vTask_MOTORCONTROL+0x3d4>)
   1c236:	0018      	movs	r0, r3
   1c238:	4bb8      	ldr	r3, [pc, #736]	; (1c51c <vTask_MOTORCONTROL+0x3d0>)
   1c23a:	4798      	blx	r3
	initPhaseRMStruct(&struct_rmsBR);
   1c23c:	4bb9      	ldr	r3, [pc, #740]	; (1c524 <vTask_MOTORCONTROL+0x3d8>)
   1c23e:	0018      	movs	r0, r3
   1c240:	4bb6      	ldr	r3, [pc, #728]	; (1c51c <vTask_MOTORCONTROL+0x3d0>)
   1c242:	4798      	blx	r3
	
	lastPressTime=0;
   1c244:	4bb8      	ldr	r3, [pc, #736]	; (1c528 <vTask_MOTORCONTROL+0x3dc>)
   1c246:	2200      	movs	r2, #0
   1c248:	601a      	str	r2, [r3, #0]
	lastButtonEvent=0;
   1c24a:	4bb8      	ldr	r3, [pc, #736]	; (1c52c <vTask_MOTORCONTROL+0x3e0>)
   1c24c:	2200      	movs	r2, #0
   1c24e:	701a      	strb	r2, [r3, #0]

	motorRelatedVoltageBypassOn=false;
   1c250:	4bb7      	ldr	r3, [pc, #732]	; (1c530 <vTask_MOTORCONTROL+0x3e4>)
   1c252:	2200      	movs	r2, #0
   1c254:	701a      	strb	r2, [r3, #0]
	motorVoltageBypassTimerTime= 0;
   1c256:	4bb7      	ldr	r3, [pc, #732]	; (1c534 <vTask_MOTORCONTROL+0x3e8>)
   1c258:	2200      	movs	r2, #0
   1c25a:	601a      	str	r2, [r3, #0]
	
	uint8_t i= 0;
   1c25c:	2317      	movs	r3, #23
   1c25e:	18fb      	adds	r3, r7, r3
   1c260:	2200      	movs	r2, #0
   1c262:	701a      	strb	r2, [r3, #0]
	if (factory_settings_parameter_struct.ENABLE_CURRENT)
   1c264:	4bb4      	ldr	r3, [pc, #720]	; (1c538 <vTask_MOTORCONTROL+0x3ec>)
   1c266:	785b      	ldrb	r3, [r3, #1]
   1c268:	2b00      	cmp	r3, #0
   1c26a:	d004      	beq.n	1c276 <vTask_MOTORCONTROL+0x12a>
	{
		i=14;
   1c26c:	2317      	movs	r3, #23
   1c26e:	18fb      	adds	r3, r7, r3
   1c270:	220e      	movs	r2, #14
   1c272:	701a      	strb	r2, [r3, #0]
   1c274:	e00a      	b.n	1c28c <vTask_MOTORCONTROL+0x140>
	}
	else
	{
		i = 12;
   1c276:	2317      	movs	r3, #23
   1c278:	18fb      	adds	r3, r7, r3
   1c27a:	220c      	movs	r2, #12
   1c27c:	701a      	strb	r2, [r3, #0]
	}
	while(i--)
   1c27e:	e005      	b.n	1c28c <vTask_MOTORCONTROL+0x140>
	{
		simEventTemp[i] = true;
   1c280:	2317      	movs	r3, #23
   1c282:	18fb      	adds	r3, r7, r3
   1c284:	781b      	ldrb	r3, [r3, #0]
   1c286:	4aad      	ldr	r2, [pc, #692]	; (1c53c <vTask_MOTORCONTROL+0x3f0>)
   1c288:	2101      	movs	r1, #1
   1c28a:	54d1      	strb	r1, [r2, r3]
	while(i--)
   1c28c:	2317      	movs	r3, #23
   1c28e:	18fb      	adds	r3, r7, r3
   1c290:	781b      	ldrb	r3, [r3, #0]
   1c292:	2217      	movs	r2, #23
   1c294:	18ba      	adds	r2, r7, r2
   1c296:	1e59      	subs	r1, r3, #1
   1c298:	7011      	strb	r1, [r2, #0]
   1c29a:	2b00      	cmp	r3, #0
   1c29c:	d1f0      	bne.n	1c280 <vTask_MOTORCONTROL+0x134>
	}
	simEvent[0] = 'N';
   1c29e:	4ba8      	ldr	r3, [pc, #672]	; (1c540 <vTask_MOTORCONTROL+0x3f4>)
   1c2a0:	224e      	movs	r2, #78	; 0x4e
   1c2a2:	701a      	strb	r2, [r3, #0]
	simEvent[1] = 'P';
   1c2a4:	4ba6      	ldr	r3, [pc, #664]	; (1c540 <vTask_MOTORCONTROL+0x3f4>)
   1c2a6:	2250      	movs	r2, #80	; 0x50
   1c2a8:	705a      	strb	r2, [r3, #1]
	simEvent[2] = '_';					//chnage the recording when playing from flash, as sim800c does not have enough space right now.
   1c2aa:	4ba5      	ldr	r3, [pc, #660]	; (1c540 <vTask_MOTORCONTROL+0x3f4>)
   1c2ac:	225f      	movs	r2, #95	; 0x5f
   1c2ae:	709a      	strb	r2, [r3, #2]
	simEvent[3] = 'F';
   1c2b0:	4ba3      	ldr	r3, [pc, #652]	; (1c540 <vTask_MOTORCONTROL+0x3f4>)
   1c2b2:	2246      	movs	r2, #70	; 0x46
   1c2b4:	70da      	strb	r2, [r3, #3]
	simEvent[4] = 'G';
   1c2b6:	4ba2      	ldr	r3, [pc, #648]	; (1c540 <vTask_MOTORCONTROL+0x3f4>)
   1c2b8:	2247      	movs	r2, #71	; 0x47
   1c2ba:	711a      	strb	r2, [r3, #4]
	simEvent[5] = 'L';
   1c2bc:	4ba0      	ldr	r3, [pc, #640]	; (1c540 <vTask_MOTORCONTROL+0x3f4>)
   1c2be:	224c      	movs	r2, #76	; 0x4c
   1c2c0:	715a      	strb	r2, [r3, #5]
	simEvent[6] = 'C';
   1c2c2:	4b9f      	ldr	r3, [pc, #636]	; (1c540 <vTask_MOTORCONTROL+0x3f4>)
   1c2c4:	2243      	movs	r2, #67	; 0x43
   1c2c6:	719a      	strb	r2, [r3, #6]
	simEvent[7] = 'S';
   1c2c8:	4b9d      	ldr	r3, [pc, #628]	; (1c540 <vTask_MOTORCONTROL+0x3f4>)
   1c2ca:	2253      	movs	r2, #83	; 0x53
   1c2cc:	71da      	strb	r2, [r3, #7]
	simEvent[8] = 'O';
   1c2ce:	4b9c      	ldr	r3, [pc, #624]	; (1c540 <vTask_MOTORCONTROL+0x3f4>)
   1c2d0:	224f      	movs	r2, #79	; 0x4f
   1c2d2:	721a      	strb	r2, [r3, #8]
	simEvent[9] = 'A';
   1c2d4:	4b9a      	ldr	r3, [pc, #616]	; (1c540 <vTask_MOTORCONTROL+0x3f4>)
   1c2d6:	2241      	movs	r2, #65	; 0x41
   1c2d8:	725a      	strb	r2, [r3, #9]

	simEvent[10] = ')';		//AUTO ON EVENT
   1c2da:	4b99      	ldr	r3, [pc, #612]	; (1c540 <vTask_MOTORCONTROL+0x3f4>)
   1c2dc:	2229      	movs	r2, #41	; 0x29
   1c2de:	729a      	strb	r2, [r3, #10]
	simEvent[11] = '[';		//AUTO OFF EVENT
   1c2e0:	4b97      	ldr	r3, [pc, #604]	; (1c540 <vTask_MOTORCONTROL+0x3f4>)
   1c2e2:	225b      	movs	r2, #91	; 0x5b
   1c2e4:	72da      	strb	r2, [r3, #11]
	
	if (factory_settings_parameter_struct.ENABLE_CURRENT)
   1c2e6:	4b94      	ldr	r3, [pc, #592]	; (1c538 <vTask_MOTORCONTROL+0x3ec>)
   1c2e8:	785b      	ldrb	r3, [r3, #1]
   1c2ea:	2b00      	cmp	r3, #0
   1c2ec:	d005      	beq.n	1c2fa <vTask_MOTORCONTROL+0x1ae>
	{
		simEvent[12] = 'B';		//Overload Event
   1c2ee:	4b94      	ldr	r3, [pc, #592]	; (1c540 <vTask_MOTORCONTROL+0x3f4>)
   1c2f0:	2242      	movs	r2, #66	; 0x42
   1c2f2:	731a      	strb	r2, [r3, #12]
		simEvent[13] = 'J';		//Underload EVENT
   1c2f4:	4b92      	ldr	r3, [pc, #584]	; (1c540 <vTask_MOTORCONTROL+0x3f4>)
   1c2f6:	224a      	movs	r2, #74	; 0x4a
   1c2f8:	735a      	strb	r2, [r3, #13]
	}
	//////////////////////////////////////////////////////////////////////////
	
	resetAutoStart(true);
   1c2fa:	2001      	movs	r0, #1
   1c2fc:	4b91      	ldr	r3, [pc, #580]	; (1c544 <vTask_MOTORCONTROL+0x3f8>)
   1c2fe:	4798      	blx	r3
	eventOccured=true;
   1c300:	4b6e      	ldr	r3, [pc, #440]	; (1c4bc <vTask_MOTORCONTROL+0x370>)
   1c302:	2201      	movs	r2, #1
   1c304:	701a      	strb	r2, [r3, #0]
	//port_pin_set_config(PIN_PA10, &adc_pin_config);
	//port_pin_set_config(PIN_PA11, &adc_pin_config);
	
	for (;;)
	{
		xSemaphoreTake(xButton_Semaphore, portMAX_DELAY);
   1c306:	4b90      	ldr	r3, [pc, #576]	; (1c548 <vTask_MOTORCONTROL+0x3fc>)
   1c308:	681a      	ldr	r2, [r3, #0]
   1c30a:	2301      	movs	r3, #1
   1c30c:	425b      	negs	r3, r3
   1c30e:	0019      	movs	r1, r3
   1c310:	0010      	movs	r0, r2
   1c312:	4b8e      	ldr	r3, [pc, #568]	; (1c54c <vTask_MOTORCONTROL+0x400>)
   1c314:	4798      	blx	r3
		if(taskPSet)
   1c316:	4b8e      	ldr	r3, [pc, #568]	; (1c550 <vTask_MOTORCONTROL+0x404>)
   1c318:	781b      	ldrb	r3, [r3, #0]
   1c31a:	b2db      	uxtb	r3, r3
   1c31c:	2b00      	cmp	r3, #0
   1c31e:	d006      	beq.n	1c32e <vTask_MOTORCONTROL+0x1e2>
		{
			vTaskPrioritySet(NULL,1);
   1c320:	2101      	movs	r1, #1
   1c322:	2000      	movs	r0, #0
   1c324:	4b8b      	ldr	r3, [pc, #556]	; (1c554 <vTask_MOTORCONTROL+0x408>)
   1c326:	4798      	blx	r3
			taskPSet=false;
   1c328:	4b89      	ldr	r3, [pc, #548]	; (1c550 <vTask_MOTORCONTROL+0x404>)
   1c32a:	2200      	movs	r2, #0
   1c32c:	701a      	strb	r2, [r3, #0]
		}
		xSemaphoreGive(xButton_Semaphore);
   1c32e:	4b86      	ldr	r3, [pc, #536]	; (1c548 <vTask_MOTORCONTROL+0x3fc>)
   1c330:	6818      	ldr	r0, [r3, #0]
   1c332:	2300      	movs	r3, #0
   1c334:	2200      	movs	r2, #0
   1c336:	2100      	movs	r1, #0
   1c338:	4c87      	ldr	r4, [pc, #540]	; (1c558 <vTask_MOTORCONTROL+0x40c>)
   1c33a:	47a0      	blx	r4
		
		if(!startSequenceOn && !stopSequenceOn)
   1c33c:	4b70      	ldr	r3, [pc, #448]	; (1c500 <vTask_MOTORCONTROL+0x3b4>)
   1c33e:	781b      	ldrb	r3, [r3, #0]
   1c340:	2201      	movs	r2, #1
   1c342:	4053      	eors	r3, r2
   1c344:	b2db      	uxtb	r3, r3
   1c346:	2b00      	cmp	r3, #0
   1c348:	d04b      	beq.n	1c3e2 <vTask_MOTORCONTROL+0x296>
   1c34a:	4b6f      	ldr	r3, [pc, #444]	; (1c508 <vTask_MOTORCONTROL+0x3bc>)
   1c34c:	781b      	ldrb	r3, [r3, #0]
   1c34e:	2201      	movs	r2, #1
   1c350:	4053      	eors	r3, r2
   1c352:	b2db      	uxtb	r3, r3
   1c354:	2b00      	cmp	r3, #0
   1c356:	d044      	beq.n	1c3e2 <vTask_MOTORCONTROL+0x296>
		{
			uint8_t tempEventOccured=eventOccured;
   1c358:	4b58      	ldr	r3, [pc, #352]	; (1c4bc <vTask_MOTORCONTROL+0x370>)
   1c35a:	781b      	ldrb	r3, [r3, #0]
   1c35c:	b2da      	uxtb	r2, r3
   1c35e:	230f      	movs	r3, #15
   1c360:	18fb      	adds	r3, r7, r3
   1c362:	701a      	strb	r2, [r3, #0]
			uint8_t tempButtonEventOccured=buttonEventOccured;
   1c364:	4b7d      	ldr	r3, [pc, #500]	; (1c55c <vTask_MOTORCONTROL+0x410>)
   1c366:	781b      	ldrb	r3, [r3, #0]
   1c368:	b2da      	uxtb	r2, r3
   1c36a:	230e      	movs	r3, #14
   1c36c:	18fb      	adds	r3, r7, r3
   1c36e:	701a      	strb	r2, [r3, #0]
			
			
			if(tempEventOccured)
   1c370:	230f      	movs	r3, #15
   1c372:	18fb      	adds	r3, r7, r3
   1c374:	781b      	ldrb	r3, [r3, #0]
   1c376:	2b00      	cmp	r3, #0
   1c378:	d02c      	beq.n	1c3d4 <vTask_MOTORCONTROL+0x288>
			{
				if(firstEvent)
   1c37a:	4b52      	ldr	r3, [pc, #328]	; (1c4c4 <vTask_MOTORCONTROL+0x378>)
   1c37c:	781b      	ldrb	r3, [r3, #0]
   1c37e:	b2db      	uxtb	r3, r3
   1c380:	2b00      	cmp	r3, #0
   1c382:	d010      	beq.n	1c3a6 <vTask_MOTORCONTROL+0x25a>
				{
					if((xTaskGetTickCount()-delayForFirstEvent>35000L) || boolGsm_config_flag)
   1c384:	4b4e      	ldr	r3, [pc, #312]	; (1c4c0 <vTask_MOTORCONTROL+0x374>)
   1c386:	4798      	blx	r3
   1c388:	0002      	movs	r2, r0
   1c38a:	693b      	ldr	r3, [r7, #16]
   1c38c:	1ad3      	subs	r3, r2, r3
   1c38e:	4a74      	ldr	r2, [pc, #464]	; (1c560 <vTask_MOTORCONTROL+0x414>)
   1c390:	4293      	cmp	r3, r2
   1c392:	d804      	bhi.n	1c39e <vTask_MOTORCONTROL+0x252>
   1c394:	4b73      	ldr	r3, [pc, #460]	; (1c564 <vTask_MOTORCONTROL+0x418>)
   1c396:	781b      	ldrb	r3, [r3, #0]
   1c398:	b2db      	uxtb	r3, r3
   1c39a:	2b00      	cmp	r3, #0
   1c39c:	d01a      	beq.n	1c3d4 <vTask_MOTORCONTROL+0x288>
					{
						firstEvent = false;
   1c39e:	4b49      	ldr	r3, [pc, #292]	; (1c4c4 <vTask_MOTORCONTROL+0x378>)
   1c3a0:	2200      	movs	r2, #0
   1c3a2:	701a      	strb	r2, [r3, #0]
   1c3a4:	e016      	b.n	1c3d4 <vTask_MOTORCONTROL+0x288>
					}
				}
				else
				{
					
					if(motorFeedbackEvent)
   1c3a6:	4b4e      	ldr	r3, [pc, #312]	; (1c4e0 <vTask_MOTORCONTROL+0x394>)
   1c3a8:	781b      	ldrb	r3, [r3, #0]
   1c3aa:	b2db      	uxtb	r3, r3
   1c3ac:	2b00      	cmp	r3, #0
   1c3ae:	d00f      	beq.n	1c3d0 <vTask_MOTORCONTROL+0x284>
					{
						if((xTaskGetTickCount()-motorFeedbackEventTime>1800))
   1c3b0:	4b43      	ldr	r3, [pc, #268]	; (1c4c0 <vTask_MOTORCONTROL+0x374>)
   1c3b2:	4798      	blx	r3
   1c3b4:	0002      	movs	r2, r0
   1c3b6:	4b6c      	ldr	r3, [pc, #432]	; (1c568 <vTask_MOTORCONTROL+0x41c>)
   1c3b8:	681b      	ldr	r3, [r3, #0]
   1c3ba:	1ad2      	subs	r2, r2, r3
   1c3bc:	23e1      	movs	r3, #225	; 0xe1
   1c3be:	00db      	lsls	r3, r3, #3
   1c3c0:	429a      	cmp	r2, r3
   1c3c2:	d907      	bls.n	1c3d4 <vTask_MOTORCONTROL+0x288>
						{
							motorFeedbackEvent=false;
   1c3c4:	4b46      	ldr	r3, [pc, #280]	; (1c4e0 <vTask_MOTORCONTROL+0x394>)
   1c3c6:	2200      	movs	r2, #0
   1c3c8:	701a      	strb	r2, [r3, #0]
							operateOnEvent();
   1c3ca:	4b68      	ldr	r3, [pc, #416]	; (1c56c <vTask_MOTORCONTROL+0x420>)
   1c3cc:	4798      	blx	r3
   1c3ce:	e001      	b.n	1c3d4 <vTask_MOTORCONTROL+0x288>
						}
					}
					else
					{
						operateOnEvent();
   1c3d0:	4b66      	ldr	r3, [pc, #408]	; (1c56c <vTask_MOTORCONTROL+0x420>)
   1c3d2:	4798      	blx	r3
			//if(tempButtonEventOccured)
			//{
			//operateOnButtonEvent();
			//}
			
			if(lastButtonEvent)
   1c3d4:	4b55      	ldr	r3, [pc, #340]	; (1c52c <vTask_MOTORCONTROL+0x3e0>)
   1c3d6:	781b      	ldrb	r3, [r3, #0]
   1c3d8:	b2db      	uxtb	r3, r3
   1c3da:	2b00      	cmp	r3, #0
   1c3dc:	d001      	beq.n	1c3e2 <vTask_MOTORCONTROL+0x296>
			{
				buttonFilter();
   1c3de:	4b64      	ldr	r3, [pc, #400]	; (1c570 <vTask_MOTORCONTROL+0x424>)
   1c3e0:	4798      	blx	r3
			}
		}
		//// check if it is the time for new Voltage reading and if so than get new Voltage Reading.
		if(should_Detect_New_Voltage()) {
   1c3e2:	4b64      	ldr	r3, [pc, #400]	; (1c574 <vTask_MOTORCONTROL+0x428>)
   1c3e4:	4798      	blx	r3
   1c3e6:	1e03      	subs	r3, r0, #0
   1c3e8:	d003      	beq.n	1c3f2 <vTask_MOTORCONTROL+0x2a6>
					detect_battery_voltage_and_percentage();
   1c3ea:	4b63      	ldr	r3, [pc, #396]	; (1c578 <vTask_MOTORCONTROL+0x42c>)
   1c3ec:	4798      	blx	r3
					detect_Three_Phase_Voltage();
   1c3ee:	4b63      	ldr	r3, [pc, #396]	; (1c57c <vTask_MOTORCONTROL+0x430>)
   1c3f0:	4798      	blx	r3
		}
		////////
		
		// To check if new reading of motor current is needed, and get new reading, and update in Analog_Parameter_Struct
		
		if (factory_settings_parameter_struct.ENABLE_CURRENT)
   1c3f2:	4b51      	ldr	r3, [pc, #324]	; (1c538 <vTask_MOTORCONTROL+0x3ec>)
   1c3f4:	785b      	ldrb	r3, [r3, #1]
   1c3f6:	2b00      	cmp	r3, #0
   1c3f8:	d014      	beq.n	1c424 <vTask_MOTORCONTROL+0x2d8>
		{
			if(should_Detect_New_Current()) {
   1c3fa:	4b61      	ldr	r3, [pc, #388]	; (1c580 <vTask_MOTORCONTROL+0x434>)
   1c3fc:	4798      	blx	r3
   1c3fe:	1e03      	subs	r3, r0, #0
   1c400:	d010      	beq.n	1c424 <vTask_MOTORCONTROL+0x2d8>
				detect_Motor_Current();
   1c402:	4b60      	ldr	r3, [pc, #384]	; (1c584 <vTask_MOTORCONTROL+0x438>)
   1c404:	4798      	blx	r3
				if (user_settings_parameter_struct.detectMotorFeedback== MOTORFEEDBACK_DETECTION_CURRENT)
   1c406:	4b60      	ldr	r3, [pc, #384]	; (1c588 <vTask_MOTORCONTROL+0x43c>)
   1c408:	2225      	movs	r2, #37	; 0x25
   1c40a:	5c9b      	ldrb	r3, [r3, r2]
   1c40c:	b2db      	uxtb	r3, r3
   1c40e:	2b01      	cmp	r3, #1
   1c410:	d106      	bne.n	1c420 <vTask_MOTORCONTROL+0x2d4>
				{
					if(detectMotorStateChangeUsingCurrent())
   1c412:	4b5e      	ldr	r3, [pc, #376]	; (1c58c <vTask_MOTORCONTROL+0x440>)
   1c414:	4798      	blx	r3
   1c416:	1e03      	subs	r3, r0, #0
   1c418:	d002      	beq.n	1c420 <vTask_MOTORCONTROL+0x2d4>
					{
						eventOccured=true;
   1c41a:	4b28      	ldr	r3, [pc, #160]	; (1c4bc <vTask_MOTORCONTROL+0x370>)
   1c41c:	2201      	movs	r2, #1
   1c41e:	701a      	strb	r2, [r3, #0]
					}
				}
				
				checkCurrentConsumption();
   1c420:	4b5b      	ldr	r3, [pc, #364]	; (1c590 <vTask_MOTORCONTROL+0x444>)
   1c422:	4798      	blx	r3
			}
		}
		///////
		if (waitStableLineOn && waitStableLineOver())
   1c424:	4b31      	ldr	r3, [pc, #196]	; (1c4ec <vTask_MOTORCONTROL+0x3a0>)
   1c426:	781b      	ldrb	r3, [r3, #0]
   1c428:	2b00      	cmp	r3, #0
   1c42a:	d005      	beq.n	1c438 <vTask_MOTORCONTROL+0x2ec>
   1c42c:	4b59      	ldr	r3, [pc, #356]	; (1c594 <vTask_MOTORCONTROL+0x448>)
   1c42e:	4798      	blx	r3
   1c430:	1e03      	subs	r3, r0, #0
   1c432:	d001      	beq.n	1c438 <vTask_MOTORCONTROL+0x2ec>
		{
			operateOnStableLine();
   1c434:	4b58      	ldr	r3, [pc, #352]	; (1c598 <vTask_MOTORCONTROL+0x44c>)
   1c436:	4798      	blx	r3
		}
		
		if(stopMotorCommandGiven && xTaskGetTickCount()-tempStopSequenceTimer>5000L)
   1c438:	4b28      	ldr	r3, [pc, #160]	; (1c4dc <vTask_MOTORCONTROL+0x390>)
   1c43a:	781b      	ldrb	r3, [r3, #0]
   1c43c:	2b00      	cmp	r3, #0
   1c43e:	d00b      	beq.n	1c458 <vTask_MOTORCONTROL+0x30c>
   1c440:	4b1f      	ldr	r3, [pc, #124]	; (1c4c0 <vTask_MOTORCONTROL+0x374>)
   1c442:	4798      	blx	r3
   1c444:	0002      	movs	r2, r0
   1c446:	4b55      	ldr	r3, [pc, #340]	; (1c59c <vTask_MOTORCONTROL+0x450>)
   1c448:	681b      	ldr	r3, [r3, #0]
   1c44a:	1ad3      	subs	r3, r2, r3
   1c44c:	4a54      	ldr	r2, [pc, #336]	; (1c5a0 <vTask_MOTORCONTROL+0x454>)
   1c44e:	4293      	cmp	r3, r2
   1c450:	d902      	bls.n	1c458 <vTask_MOTORCONTROL+0x30c>
		{
			stopMotorCommandGiven=false;
   1c452:	4b22      	ldr	r3, [pc, #136]	; (1c4dc <vTask_MOTORCONTROL+0x390>)
   1c454:	2200      	movs	r2, #0
   1c456:	701a      	strb	r2, [r3, #0]
		}
		
		if(motorRelatedVoltageBypassOn)
   1c458:	4b35      	ldr	r3, [pc, #212]	; (1c530 <vTask_MOTORCONTROL+0x3e4>)
   1c45a:	781b      	ldrb	r3, [r3, #0]
   1c45c:	2b00      	cmp	r3, #0
   1c45e:	d006      	beq.n	1c46e <vTask_MOTORCONTROL+0x322>
		{
			if(MotorVoltageBypassTimerOver())
   1c460:	4b50      	ldr	r3, [pc, #320]	; (1c5a4 <vTask_MOTORCONTROL+0x458>)
   1c462:	4798      	blx	r3
   1c464:	1e03      	subs	r3, r0, #0
   1c466:	d002      	beq.n	1c46e <vTask_MOTORCONTROL+0x322>
			{
				motorRelatedVoltageBypassOn=false;
   1c468:	4b31      	ldr	r3, [pc, #196]	; (1c530 <vTask_MOTORCONTROL+0x3e4>)
   1c46a:	2200      	movs	r2, #0
   1c46c:	701a      	strb	r2, [r3, #0]
			}
		}
		
		if(singlePhasingTimerOn)
   1c46e:	4b21      	ldr	r3, [pc, #132]	; (1c4f4 <vTask_MOTORCONTROL+0x3a8>)
   1c470:	781b      	ldrb	r3, [r3, #0]
   1c472:	2b00      	cmp	r3, #0
   1c474:	d100      	bne.n	1c478 <vTask_MOTORCONTROL+0x32c>
   1c476:	e0a0      	b.n	1c5ba <vTask_MOTORCONTROL+0x46e>
		{
			bool b;
			if (structThreePhase_state.u8t_phase_ac_state != AC_3PH)
   1c478:	4b4b      	ldr	r3, [pc, #300]	; (1c5a8 <vTask_MOTORCONTROL+0x45c>)
   1c47a:	785b      	ldrb	r3, [r3, #1]
   1c47c:	b2db      	uxtb	r3, r3
   1c47e:	2b03      	cmp	r3, #3
   1c480:	d003      	beq.n	1c48a <vTask_MOTORCONTROL+0x33e>
			{
				b = false;
   1c482:	2316      	movs	r3, #22
   1c484:	18fb      	adds	r3, r7, r3
   1c486:	2200      	movs	r2, #0
   1c488:	701a      	strb	r2, [r3, #0]
			}
			if(!b)		//3 phase pin is low
   1c48a:	2316      	movs	r3, #22
   1c48c:	18fb      	adds	r3, r7, r3
   1c48e:	781b      	ldrb	r3, [r3, #0]
   1c490:	2201      	movs	r2, #1
   1c492:	4053      	eors	r3, r2
   1c494:	b2db      	uxtb	r3, r3
   1c496:	2b00      	cmp	r3, #0
   1c498:	d100      	bne.n	1c49c <vTask_MOTORCONTROL+0x350>
   1c49a:	e08b      	b.n	1c5b4 <vTask_MOTORCONTROL+0x468>
			{
				if(singlePhasingTimerOver())
   1c49c:	4b43      	ldr	r3, [pc, #268]	; (1c5ac <vTask_MOTORCONTROL+0x460>)
   1c49e:	4798      	blx	r3
   1c4a0:	1e03      	subs	r3, r0, #0
   1c4a2:	d100      	bne.n	1c4a6 <vTask_MOTORCONTROL+0x35a>
   1c4a4:	e089      	b.n	1c5ba <vTask_MOTORCONTROL+0x46e>
				{
					operateOnSinglePhasing();
   1c4a6:	4b42      	ldr	r3, [pc, #264]	; (1c5b0 <vTask_MOTORCONTROL+0x464>)
   1c4a8:	4798      	blx	r3
   1c4aa:	e086      	b.n	1c5ba <vTask_MOTORCONTROL+0x46e>
   1c4ac:	00019ea1 	.word	0x00019ea1
   1c4b0:	0001cad9 	.word	0x0001cad9
   1c4b4:	2000080c 	.word	0x2000080c
   1c4b8:	20000714 	.word	0x20000714
   1c4bc:	2000072e 	.word	0x2000072e
   1c4c0:	000200dd 	.word	0x000200dd
   1c4c4:	20000776 	.word	0x20000776
   1c4c8:	2000088c 	.word	0x2000088c
   1c4cc:	0001907d 	.word	0x0001907d
   1c4d0:	0001fd79 	.word	0x0001fd79
   1c4d4:	2000078d 	.word	0x2000078d
   1c4d8:	20000841 	.word	0x20000841
   1c4dc:	20000860 	.word	0x20000860
   1c4e0:	2000078a 	.word	0x2000078a
   1c4e4:	2000079a 	.word	0x2000079a
   1c4e8:	200007dd 	.word	0x200007dd
   1c4ec:	2000080d 	.word	0x2000080d
   1c4f0:	20000770 	.word	0x20000770
   1c4f4:	20000791 	.word	0x20000791
   1c4f8:	20000818 	.word	0x20000818
   1c4fc:	2000079b 	.word	0x2000079b
   1c500:	20000799 	.word	0x20000799
   1c504:	20000863 	.word	0x20000863
   1c508:	20000788 	.word	0x20000788
   1c50c:	0001aed1 	.word	0x0001aed1
   1c510:	0001af39 	.word	0x0001af39
   1c514:	0001ae9d 	.word	0x0001ae9d
   1c518:	200007b0 	.word	0x200007b0
   1c51c:	0001a7b1 	.word	0x0001a7b1
   1c520:	20000730 	.word	0x20000730
   1c524:	200007e0 	.word	0x200007e0
   1c528:	20000768 	.word	0x20000768
   1c52c:	20000780 	.word	0x20000780
   1c530:	20000773 	.word	0x20000773
   1c534:	20000784 	.word	0x20000784
   1c538:	2000062c 	.word	0x2000062c
   1c53c:	20000718 	.word	0x20000718
   1c540:	200007f8 	.word	0x200007f8
   1c544:	0001b22d 	.word	0x0001b22d
   1c548:	20000234 	.word	0x20000234
   1c54c:	0001f471 	.word	0x0001f471
   1c550:	20000880 	.word	0x20000880
   1c554:	0001fdd5 	.word	0x0001fdd5
   1c558:	0001efd1 	.word	0x0001efd1
   1c55c:	2000079f 	.word	0x2000079f
   1c560:	000088b8 	.word	0x000088b8
   1c564:	200007c4 	.word	0x200007c4
   1c568:	2000085c 	.word	0x2000085c
   1c56c:	0001b2d1 	.word	0x0001b2d1
   1c570:	0001cccd 	.word	0x0001cccd
   1c574:	0001a6d5 	.word	0x0001a6d5
   1c578:	0001a6f1 	.word	0x0001a6f1
   1c57c:	0001aa0d 	.word	0x0001aa0d
   1c580:	0001ae6d 	.word	0x0001ae6d
   1c584:	0001ac51 	.word	0x0001ac51
   1c588:	20000654 	.word	0x20000654
   1c58c:	0001b10d 	.word	0x0001b10d
   1c590:	0001bf2d 	.word	0x0001bf2d
   1c594:	0001b5f5 	.word	0x0001b5f5
   1c598:	0001b4b5 	.word	0x0001b4b5
   1c59c:	200007a8 	.word	0x200007a8
   1c5a0:	00001388 	.word	0x00001388
   1c5a4:	0001befd 	.word	0x0001befd
   1c5a8:	20000748 	.word	0x20000748
   1c5ac:	0001b985 	.word	0x0001b985
   1c5b0:	0001b9d1 	.word	0x0001b9d1
				}
			}
			else
			{
				singlePhasingTimerOn=false;
   1c5b4:	4b15      	ldr	r3, [pc, #84]	; (1c60c <vTask_MOTORCONTROL+0x4c0>)
   1c5b6:	2200      	movs	r2, #0
   1c5b8:	701a      	strb	r2, [r3, #0]
			}
		}
		if (startTimerOn)
   1c5ba:	4b15      	ldr	r3, [pc, #84]	; (1c610 <vTask_MOTORCONTROL+0x4c4>)
   1c5bc:	781b      	ldrb	r3, [r3, #0]
   1c5be:	2b00      	cmp	r3, #0
   1c5c0:	d007      	beq.n	1c5d2 <vTask_MOTORCONTROL+0x486>
		{
			if (startMotorTimerOver())
   1c5c2:	4b14      	ldr	r3, [pc, #80]	; (1c614 <vTask_MOTORCONTROL+0x4c8>)
   1c5c4:	4798      	blx	r3
   1c5c6:	1e03      	subs	r3, r0, #0
   1c5c8:	d003      	beq.n	1c5d2 <vTask_MOTORCONTROL+0x486>
			{
				startMotor(false,false);
   1c5ca:	2100      	movs	r1, #0
   1c5cc:	2000      	movs	r0, #0
   1c5ce:	4b12      	ldr	r3, [pc, #72]	; (1c618 <vTask_MOTORCONTROL+0x4cc>)
   1c5d0:	4798      	blx	r3
			}
		}
		if (startSequenceOn)
   1c5d2:	4b12      	ldr	r3, [pc, #72]	; (1c61c <vTask_MOTORCONTROL+0x4d0>)
   1c5d4:	781b      	ldrb	r3, [r3, #0]
   1c5d6:	2b00      	cmp	r3, #0
   1c5d8:	d001      	beq.n	1c5de <vTask_MOTORCONTROL+0x492>
		{
			terminateStartRelay();
   1c5da:	4b11      	ldr	r3, [pc, #68]	; (1c620 <vTask_MOTORCONTROL+0x4d4>)
   1c5dc:	4798      	blx	r3
		}
		if(starDeltaTimerOn)
   1c5de:	4b11      	ldr	r3, [pc, #68]	; (1c624 <vTask_MOTORCONTROL+0x4d8>)
   1c5e0:	781b      	ldrb	r3, [r3, #0]
   1c5e2:	2b00      	cmp	r3, #0
   1c5e4:	d001      	beq.n	1c5ea <vTask_MOTORCONTROL+0x49e>
		{
			terminateStarDeltaTimer();
   1c5e6:	4b10      	ldr	r3, [pc, #64]	; (1c628 <vTask_MOTORCONTROL+0x4dc>)
   1c5e8:	4798      	blx	r3
		}
		if(stopSequenceOn)
   1c5ea:	4b10      	ldr	r3, [pc, #64]	; (1c62c <vTask_MOTORCONTROL+0x4e0>)
   1c5ec:	781b      	ldrb	r3, [r3, #0]
   1c5ee:	2b00      	cmp	r3, #0
   1c5f0:	d001      	beq.n	1c5f6 <vTask_MOTORCONTROL+0x4aa>
		{
			terminateStopRelay();
   1c5f2:	4b0f      	ldr	r3, [pc, #60]	; (1c630 <vTask_MOTORCONTROL+0x4e4>)
   1c5f4:	4798      	blx	r3
		}
		
		SIMEventManager();
   1c5f6:	4b0f      	ldr	r3, [pc, #60]	; (1c634 <vTask_MOTORCONTROL+0x4e8>)
   1c5f8:	4798      	blx	r3
		if (factory_settings_parameter_struct.ENABLE_M2M)
   1c5fa:	4b0f      	ldr	r3, [pc, #60]	; (1c638 <vTask_MOTORCONTROL+0x4ec>)
   1c5fc:	78db      	ldrb	r3, [r3, #3]
   1c5fe:	2b00      	cmp	r3, #0
   1c600:	d100      	bne.n	1c604 <vTask_MOTORCONTROL+0x4b8>
   1c602:	e680      	b.n	1c306 <vTask_MOTORCONTROL+0x1ba>
		{
			M2MEventManager();
   1c604:	4b0d      	ldr	r3, [pc, #52]	; (1c63c <vTask_MOTORCONTROL+0x4f0>)
   1c606:	4798      	blx	r3
		xSemaphoreTake(xButton_Semaphore, portMAX_DELAY);
   1c608:	e67d      	b.n	1c306 <vTask_MOTORCONTROL+0x1ba>
   1c60a:	46c0      	nop			; (mov r8, r8)
   1c60c:	20000791 	.word	0x20000791
   1c610:	2000079a 	.word	0x2000079a
   1c614:	0001b91d 	.word	0x0001b91d
   1c618:	0001b641 	.word	0x0001b641
   1c61c:	20000799 	.word	0x20000799
   1c620:	0001bb55 	.word	0x0001bb55
   1c624:	2000079b 	.word	0x2000079b
   1c628:	0001bae1 	.word	0x0001bae1
   1c62c:	20000788 	.word	0x20000788
   1c630:	0001ba0d 	.word	0x0001ba0d
   1c634:	0001be65 	.word	0x0001be65
   1c638:	2000062c 	.word	0x2000062c
   1c63c:	0001be21 	.word	0x0001be21

0001c640 <start_motor_service>:
		}
	}
}

void start_motor_service(void)
{
   1c640:	b590      	push	{r4, r7, lr}
   1c642:	b08b      	sub	sp, #44	; 0x2c
   1c644:	af02      	add	r7, sp, #8
	struct extint_chan_conf config_extint_chan_isr;
	extint_chan_get_config_defaults(&config_extint_chan_isr);
   1c646:	2314      	movs	r3, #20
   1c648:	18fb      	adds	r3, r7, r3
   1c64a:	0018      	movs	r0, r3
   1c64c:	4bae      	ldr	r3, [pc, #696]	; (1c908 <start_motor_service+0x2c8>)
   1c64e:	4798      	blx	r3
	config_extint_chan_isr.gpio_pin           = PIN_PB11A_EIC_EXTINT11;
   1c650:	2314      	movs	r3, #20
   1c652:	18fb      	adds	r3, r7, r3
   1c654:	222b      	movs	r2, #43	; 0x2b
   1c656:	601a      	str	r2, [r3, #0]
	config_extint_chan_isr.gpio_pin_mux       = MUX_PB11A_EIC_EXTINT11;
   1c658:	2314      	movs	r3, #20
   1c65a:	18fb      	adds	r3, r7, r3
   1c65c:	2200      	movs	r2, #0
   1c65e:	605a      	str	r2, [r3, #4]
	config_extint_chan_isr.gpio_pin_pull      = EXTINT_PULL_UP;
   1c660:	2314      	movs	r3, #20
   1c662:	18fb      	adds	r3, r7, r3
   1c664:	2201      	movs	r2, #1
   1c666:	721a      	strb	r2, [r3, #8]
	config_extint_chan_isr.detection_criteria = EXTINT_DETECT_RISING;
   1c668:	2314      	movs	r3, #20
   1c66a:	18fb      	adds	r3, r7, r3
   1c66c:	2201      	movs	r2, #1
   1c66e:	72da      	strb	r2, [r3, #11]
	config_extint_chan_isr.wake_if_sleeping   = true;
   1c670:	2314      	movs	r3, #20
   1c672:	18fb      	adds	r3, r7, r3
   1c674:	2201      	movs	r2, #1
   1c676:	725a      	strb	r2, [r3, #9]
	extint_chan_set_config(11, &config_extint_chan_isr);
   1c678:	2314      	movs	r3, #20
   1c67a:	18fb      	adds	r3, r7, r3
   1c67c:	0019      	movs	r1, r3
   1c67e:	200b      	movs	r0, #11
   1c680:	4ba2      	ldr	r3, [pc, #648]	; (1c90c <start_motor_service+0x2cc>)
   1c682:	4798      	blx	r3
	
	extint_register_callback(PR2_ISR,11,EXTINT_CALLBACK_TYPE_DETECT);
   1c684:	4ba2      	ldr	r3, [pc, #648]	; (1c910 <start_motor_service+0x2d0>)
   1c686:	2200      	movs	r2, #0
   1c688:	210b      	movs	r1, #11
   1c68a:	0018      	movs	r0, r3
   1c68c:	4ba1      	ldr	r3, [pc, #644]	; (1c914 <start_motor_service+0x2d4>)
   1c68e:	4798      	blx	r3
	extint_chan_enable_callback(11,EXTINT_CALLBACK_TYPE_DETECT);
   1c690:	2100      	movs	r1, #0
   1c692:	200b      	movs	r0, #11
   1c694:	4ba0      	ldr	r3, [pc, #640]	; (1c918 <start_motor_service+0x2d8>)
   1c696:	4798      	blx	r3
	
	struct port_config pin_confg;
	port_get_config_defaults(&pin_confg);
   1c698:	2310      	movs	r3, #16
   1c69a:	18fb      	adds	r3, r7, r3
   1c69c:	0018      	movs	r0, r3
   1c69e:	4b9f      	ldr	r3, [pc, #636]	; (1c91c <start_motor_service+0x2dc>)
   1c6a0:	4798      	blx	r3
	pin_confg.direction = PORT_PIN_DIR_INPUT;
   1c6a2:	2310      	movs	r3, #16
   1c6a4:	18fb      	adds	r3, r7, r3
   1c6a6:	2200      	movs	r2, #0
   1c6a8:	701a      	strb	r2, [r3, #0]
	pin_confg.input_pull = PORT_PIN_PULL_UP;
   1c6aa:	2310      	movs	r3, #16
   1c6ac:	18fb      	adds	r3, r7, r3
   1c6ae:	2201      	movs	r2, #1
   1c6b0:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(PR1_PIN, &pin_confg);
   1c6b2:	2310      	movs	r3, #16
   1c6b4:	18fb      	adds	r3, r7, r3
   1c6b6:	0019      	movs	r1, r3
   1c6b8:	202a      	movs	r0, #42	; 0x2a
   1c6ba:	4b99      	ldr	r3, [pc, #612]	; (1c920 <start_motor_service+0x2e0>)
   1c6bc:	4798      	blx	r3
	
	//Transferring the below statement from LCD_SERVICE to here, as it solves the problem of the device hanging.
	// Whenever xSemaphoreTake is executed on xADC_Semaphore in task other than which xADC_Semaphore is defined in, than the MCU hangs.
	vSemaphoreCreateBinary(xADC_Semaphore);
   1c6be:	2203      	movs	r2, #3
   1c6c0:	2100      	movs	r1, #0
   1c6c2:	2001      	movs	r0, #1
   1c6c4:	4b97      	ldr	r3, [pc, #604]	; (1c924 <start_motor_service+0x2e4>)
   1c6c6:	4798      	blx	r3
   1c6c8:	0002      	movs	r2, r0
   1c6ca:	4b97      	ldr	r3, [pc, #604]	; (1c928 <start_motor_service+0x2e8>)
   1c6cc:	601a      	str	r2, [r3, #0]
   1c6ce:	4b96      	ldr	r3, [pc, #600]	; (1c928 <start_motor_service+0x2e8>)
   1c6d0:	681b      	ldr	r3, [r3, #0]
   1c6d2:	2b00      	cmp	r3, #0
   1c6d4:	d006      	beq.n	1c6e4 <start_motor_service+0xa4>
   1c6d6:	4b94      	ldr	r3, [pc, #592]	; (1c928 <start_motor_service+0x2e8>)
   1c6d8:	6818      	ldr	r0, [r3, #0]
   1c6da:	2300      	movs	r3, #0
   1c6dc:	2200      	movs	r2, #0
   1c6de:	2100      	movs	r1, #0
   1c6e0:	4c92      	ldr	r4, [pc, #584]	; (1c92c <start_motor_service+0x2ec>)
   1c6e2:	47a0      	blx	r4
	
	vSemaphoreCreateBinary(xButton_Semaphore);
   1c6e4:	2203      	movs	r2, #3
   1c6e6:	2100      	movs	r1, #0
   1c6e8:	2001      	movs	r0, #1
   1c6ea:	4b8e      	ldr	r3, [pc, #568]	; (1c924 <start_motor_service+0x2e4>)
   1c6ec:	4798      	blx	r3
   1c6ee:	0002      	movs	r2, r0
   1c6f0:	4b8f      	ldr	r3, [pc, #572]	; (1c930 <start_motor_service+0x2f0>)
   1c6f2:	601a      	str	r2, [r3, #0]
   1c6f4:	4b8e      	ldr	r3, [pc, #568]	; (1c930 <start_motor_service+0x2f0>)
   1c6f6:	681b      	ldr	r3, [r3, #0]
   1c6f8:	2b00      	cmp	r3, #0
   1c6fa:	d006      	beq.n	1c70a <start_motor_service+0xca>
   1c6fc:	4b8c      	ldr	r3, [pc, #560]	; (1c930 <start_motor_service+0x2f0>)
   1c6fe:	6818      	ldr	r0, [r3, #0]
   1c700:	2300      	movs	r3, #0
   1c702:	2200      	movs	r2, #0
   1c704:	2100      	movs	r1, #0
   1c706:	4c89      	ldr	r4, [pc, #548]	; (1c92c <start_motor_service+0x2ec>)
   1c708:	47a0      	blx	r4
	
	////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////
	struct port_config config_pins;
	port_get_config_defaults(&config_pins);
   1c70a:	230c      	movs	r3, #12
   1c70c:	18fb      	adds	r3, r7, r3
   1c70e:	0018      	movs	r0, r3
   1c710:	4b82      	ldr	r3, [pc, #520]	; (1c91c <start_motor_service+0x2dc>)
   1c712:	4798      	blx	r3
	
	config_pins.direction = PORT_PIN_DIR_OUTPUT;
   1c714:	230c      	movs	r3, #12
   1c716:	18fb      	adds	r3, r7, r3
   1c718:	2201      	movs	r2, #1
   1c71a:	701a      	strb	r2, [r3, #0]
	config_pins.input_pull = PORT_PIN_PULL_NONE;
   1c71c:	230c      	movs	r3, #12
   1c71e:	18fb      	adds	r3, r7, r3
   1c720:	2200      	movs	r2, #0
   1c722:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(START_RELAY_PIN,&config_pins);
   1c724:	230c      	movs	r3, #12
   1c726:	18fb      	adds	r3, r7, r3
   1c728:	0019      	movs	r1, r3
   1c72a:	202d      	movs	r0, #45	; 0x2d
   1c72c:	4b7c      	ldr	r3, [pc, #496]	; (1c920 <start_motor_service+0x2e0>)
   1c72e:	4798      	blx	r3
	port_pin_set_config(STOP_RELAY_PIN,&config_pins);
   1c730:	230c      	movs	r3, #12
   1c732:	18fb      	adds	r3, r7, r3
   1c734:	0019      	movs	r1, r3
   1c736:	202c      	movs	r0, #44	; 0x2c
   1c738:	4b79      	ldr	r3, [pc, #484]	; (1c920 <start_motor_service+0x2e0>)
   1c73a:	4798      	blx	r3
	port_pin_set_config(AUTO_ON_LED_PIN,&config_pins);
   1c73c:	230c      	movs	r3, #12
   1c73e:	18fb      	adds	r3, r7, r3
   1c740:	0019      	movs	r1, r3
   1c742:	2028      	movs	r0, #40	; 0x28
   1c744:	4b76      	ldr	r3, [pc, #472]	; (1c920 <start_motor_service+0x2e0>)
   1c746:	4798      	blx	r3
	port_pin_set_config(THREEPHASE_OK_LED_PIN,&config_pins);
   1c748:	230c      	movs	r3, #12
   1c74a:	18fb      	adds	r3, r7, r3
   1c74c:	0019      	movs	r1, r3
   1c74e:	2027      	movs	r0, #39	; 0x27
   1c750:	4b73      	ldr	r3, [pc, #460]	; (1c920 <start_motor_service+0x2e0>)
   1c752:	4798      	blx	r3
	port_pin_set_config(MOTOR_ON_LED_PIN,&config_pins);
   1c754:	230c      	movs	r3, #12
   1c756:	18fb      	adds	r3, r7, r3
   1c758:	0019      	movs	r1, r3
   1c75a:	2005      	movs	r0, #5
   1c75c:	4b70      	ldr	r3, [pc, #448]	; (1c920 <start_motor_service+0x2e0>)
   1c75e:	4798      	blx	r3
	
	AUTO_ON_LED_OFF;
   1c760:	2101      	movs	r1, #1
   1c762:	2028      	movs	r0, #40	; 0x28
   1c764:	4b73      	ldr	r3, [pc, #460]	; (1c934 <start_motor_service+0x2f4>)
   1c766:	4798      	blx	r3
	MOTOR_ON_LED_OFF;
   1c768:	2101      	movs	r1, #1
   1c76a:	2005      	movs	r0, #5
   1c76c:	4b71      	ldr	r3, [pc, #452]	; (1c934 <start_motor_service+0x2f4>)
   1c76e:	4798      	blx	r3
	THREEPHASE_OK_LED_OFF;
   1c770:	2101      	movs	r1, #1
   1c772:	2027      	movs	r0, #39	; 0x27
   1c774:	4b6f      	ldr	r3, [pc, #444]	; (1c934 <start_motor_service+0x2f4>)
   1c776:	4798      	blx	r3
	//port_pin_set_config(PIN_MOTOR_FEEDBACK,&config_pins);
	
	
	
	struct extint_chan_conf config_extint_chan;
	extint_chan_get_config_defaults(&config_extint_chan);
   1c778:	003b      	movs	r3, r7
   1c77a:	0018      	movs	r0, r3
   1c77c:	4b62      	ldr	r3, [pc, #392]	; (1c908 <start_motor_service+0x2c8>)
   1c77e:	4798      	blx	r3
	
	config_extint_chan.gpio_pin = MOTOR_FEEDBACK_EIC_PIN;
   1c780:	003b      	movs	r3, r7
   1c782:	222e      	movs	r2, #46	; 0x2e
   1c784:	601a      	str	r2, [r3, #0]
	config_extint_chan.gpio_pin_mux = MOTOR_FEEDBACK_EIC_MUX;
   1c786:	003b      	movs	r3, r7
   1c788:	2200      	movs	r2, #0
   1c78a:	605a      	str	r2, [r3, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_NONE;
   1c78c:	003b      	movs	r3, r7
   1c78e:	2200      	movs	r2, #0
   1c790:	721a      	strb	r2, [r3, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_BOTH;
   1c792:	003b      	movs	r3, r7
   1c794:	2203      	movs	r2, #3
   1c796:	72da      	strb	r2, [r3, #11]
	extint_chan_set_config(MOTOR_FEEDBACK_EIC_LINE, &config_extint_chan);
   1c798:	003b      	movs	r3, r7
   1c79a:	0019      	movs	r1, r3
   1c79c:	200e      	movs	r0, #14
   1c79e:	4b5b      	ldr	r3, [pc, #364]	; (1c90c <start_motor_service+0x2cc>)
   1c7a0:	4798      	blx	r3
	
	extint_chan_enable_callback(MOTOR_FEEDBACK_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
   1c7a2:	2100      	movs	r1, #0
   1c7a4:	200e      	movs	r0, #14
   1c7a6:	4b5c      	ldr	r3, [pc, #368]	; (1c918 <start_motor_service+0x2d8>)
   1c7a8:	4798      	blx	r3
	extint_register_callback(motor_feedback_callback,MOTOR_FEEDBACK_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
   1c7aa:	4b63      	ldr	r3, [pc, #396]	; (1c938 <start_motor_service+0x2f8>)
   1c7ac:	2200      	movs	r2, #0
   1c7ae:	210e      	movs	r1, #14
   1c7b0:	0018      	movs	r0, r3
   1c7b2:	4b58      	ldr	r3, [pc, #352]	; (1c914 <start_motor_service+0x2d4>)
   1c7b4:	4798      	blx	r3
	
	//////////////////////////////////////////////////////////////////////////
	
	config_extint_chan.gpio_pin = START_BUTTON_EIC_PIN;
   1c7b6:	003b      	movs	r3, r7
   1c7b8:	2226      	movs	r2, #38	; 0x26
   1c7ba:	601a      	str	r2, [r3, #0]
	config_extint_chan.gpio_pin_mux = START_BUTTON_EIC_MUX;
   1c7bc:	003b      	movs	r3, r7
   1c7be:	2200      	movs	r2, #0
   1c7c0:	605a      	str	r2, [r3, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
   1c7c2:	003b      	movs	r3, r7
   1c7c4:	2201      	movs	r2, #1
   1c7c6:	721a      	strb	r2, [r3, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
   1c7c8:	003b      	movs	r3, r7
   1c7ca:	2202      	movs	r2, #2
   1c7cc:	72da      	strb	r2, [r3, #11]
	extint_chan_set_config(START_BUTTON_EIC_LINE, &config_extint_chan);
   1c7ce:	003b      	movs	r3, r7
   1c7d0:	0019      	movs	r1, r3
   1c7d2:	2006      	movs	r0, #6
   1c7d4:	4b4d      	ldr	r3, [pc, #308]	; (1c90c <start_motor_service+0x2cc>)
   1c7d6:	4798      	blx	r3
	
	extint_chan_enable_callback(START_BUTTON_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
   1c7d8:	2100      	movs	r1, #0
   1c7da:	2006      	movs	r0, #6
   1c7dc:	4b4e      	ldr	r3, [pc, #312]	; (1c918 <start_motor_service+0x2d8>)
   1c7de:	4798      	blx	r3
	extint_register_callback(button_detect_pin_callback,START_BUTTON_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
   1c7e0:	4b56      	ldr	r3, [pc, #344]	; (1c93c <start_motor_service+0x2fc>)
   1c7e2:	2200      	movs	r2, #0
   1c7e4:	2106      	movs	r1, #6
   1c7e6:	0018      	movs	r0, r3
   1c7e8:	4b4a      	ldr	r3, [pc, #296]	; (1c914 <start_motor_service+0x2d4>)
   1c7ea:	4798      	blx	r3
	//////////////////////////////////////////////////////////////////////////
	config_extint_chan.gpio_pin = STOP_BUTTON_EIC_PIN;
   1c7ec:	003b      	movs	r3, r7
   1c7ee:	2225      	movs	r2, #37	; 0x25
   1c7f0:	601a      	str	r2, [r3, #0]
	config_extint_chan.gpio_pin_mux = STOP_BUTTON_EIC_MUX;
   1c7f2:	003b      	movs	r3, r7
   1c7f4:	2200      	movs	r2, #0
   1c7f6:	605a      	str	r2, [r3, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
   1c7f8:	003b      	movs	r3, r7
   1c7fa:	2201      	movs	r2, #1
   1c7fc:	721a      	strb	r2, [r3, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
   1c7fe:	003b      	movs	r3, r7
   1c800:	2202      	movs	r2, #2
   1c802:	72da      	strb	r2, [r3, #11]
	extint_chan_set_config(STOP_BUTTON_EIC_LINE, &config_extint_chan);
   1c804:	003b      	movs	r3, r7
   1c806:	0019      	movs	r1, r3
   1c808:	2005      	movs	r0, #5
   1c80a:	4b40      	ldr	r3, [pc, #256]	; (1c90c <start_motor_service+0x2cc>)
   1c80c:	4798      	blx	r3
	extint_chan_enable_callback(STOP_BUTTON_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
   1c80e:	2100      	movs	r1, #0
   1c810:	2005      	movs	r0, #5
   1c812:	4b41      	ldr	r3, [pc, #260]	; (1c918 <start_motor_service+0x2d8>)
   1c814:	4798      	blx	r3
	extint_register_callback(button_detect_pin_callback,STOP_BUTTON_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
   1c816:	4b49      	ldr	r3, [pc, #292]	; (1c93c <start_motor_service+0x2fc>)
   1c818:	2200      	movs	r2, #0
   1c81a:	2105      	movs	r1, #5
   1c81c:	0018      	movs	r0, r3
   1c81e:	4b3d      	ldr	r3, [pc, #244]	; (1c914 <start_motor_service+0x2d4>)
   1c820:	4798      	blx	r3
	//////////////////////////////////////////////////////////////////////////
	config_extint_chan.gpio_pin = AUTO_BUTTON_EIC_PIN;
   1c822:	003b      	movs	r3, r7
   1c824:	221c      	movs	r2, #28
   1c826:	601a      	str	r2, [r3, #0]
	config_extint_chan.gpio_pin_mux = AUTO_BUTTON_EIC_MUX;
   1c828:	003b      	movs	r3, r7
   1c82a:	2200      	movs	r2, #0
   1c82c:	605a      	str	r2, [r3, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
   1c82e:	003b      	movs	r3, r7
   1c830:	2201      	movs	r2, #1
   1c832:	721a      	strb	r2, [r3, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
   1c834:	003b      	movs	r3, r7
   1c836:	2202      	movs	r2, #2
   1c838:	72da      	strb	r2, [r3, #11]
	extint_chan_set_config(AUTO_BUTTON_EIC_LINE, &config_extint_chan);
   1c83a:	003b      	movs	r3, r7
   1c83c:	0019      	movs	r1, r3
   1c83e:	2008      	movs	r0, #8
   1c840:	4b32      	ldr	r3, [pc, #200]	; (1c90c <start_motor_service+0x2cc>)
   1c842:	4798      	blx	r3
	extint_chan_enable_callback(AUTO_BUTTON_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
   1c844:	2100      	movs	r1, #0
   1c846:	2008      	movs	r0, #8
   1c848:	4b33      	ldr	r3, [pc, #204]	; (1c918 <start_motor_service+0x2d8>)
   1c84a:	4798      	blx	r3
	extint_register_callback(button_detect_pin_callback,AUTO_BUTTON_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
   1c84c:	4b3b      	ldr	r3, [pc, #236]	; (1c93c <start_motor_service+0x2fc>)
   1c84e:	2200      	movs	r2, #0
   1c850:	2108      	movs	r1, #8
   1c852:	0018      	movs	r0, r3
   1c854:	4b2f      	ldr	r3, [pc, #188]	; (1c914 <start_motor_service+0x2d4>)
   1c856:	4798      	blx	r3
	//////////////////////////////////////////////////////////////////////////
	config_extint_chan.gpio_pin = LCD_SHOW_BUTTON_EIC_PIN;
   1c858:	003b      	movs	r3, r7
   1c85a:	2229      	movs	r2, #41	; 0x29
   1c85c:	601a      	str	r2, [r3, #0]
	config_extint_chan.gpio_pin_mux = LCD_SHOW_BUTTON_EIC_MUX;
   1c85e:	003b      	movs	r3, r7
   1c860:	2200      	movs	r2, #0
   1c862:	605a      	str	r2, [r3, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
   1c864:	003b      	movs	r3, r7
   1c866:	2201      	movs	r2, #1
   1c868:	721a      	strb	r2, [r3, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
   1c86a:	003b      	movs	r3, r7
   1c86c:	2202      	movs	r2, #2
   1c86e:	72da      	strb	r2, [r3, #11]
	extint_chan_set_config(LCD_SHOW_BUTTON_EIC_LINE, &config_extint_chan);
   1c870:	003b      	movs	r3, r7
   1c872:	0019      	movs	r1, r3
   1c874:	2009      	movs	r0, #9
   1c876:	4b25      	ldr	r3, [pc, #148]	; (1c90c <start_motor_service+0x2cc>)
   1c878:	4798      	blx	r3
	extint_chan_enable_callback(LCD_SHOW_BUTTON_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
   1c87a:	2100      	movs	r1, #0
   1c87c:	2009      	movs	r0, #9
   1c87e:	4b26      	ldr	r3, [pc, #152]	; (1c918 <start_motor_service+0x2d8>)
   1c880:	4798      	blx	r3
	extint_register_callback(button_detect_pin_callback,LCD_SHOW_BUTTON_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
   1c882:	4b2e      	ldr	r3, [pc, #184]	; (1c93c <start_motor_service+0x2fc>)
   1c884:	2200      	movs	r2, #0
   1c886:	2109      	movs	r1, #9
   1c888:	0018      	movs	r0, r3
   1c88a:	4b22      	ldr	r3, [pc, #136]	; (1c914 <start_motor_service+0x2d4>)
   1c88c:	4798      	blx	r3
	////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////
	
	xTaskCreate(vTask_10ms_Timer,NULL,configMINIMAL_STACK_SIZE, NULL,1,NULL);
   1c88e:	482c      	ldr	r0, [pc, #176]	; (1c940 <start_motor_service+0x300>)
   1c890:	2300      	movs	r3, #0
   1c892:	9301      	str	r3, [sp, #4]
   1c894:	2301      	movs	r3, #1
   1c896:	9300      	str	r3, [sp, #0]
   1c898:	2300      	movs	r3, #0
   1c89a:	2282      	movs	r2, #130	; 0x82
   1c89c:	2100      	movs	r1, #0
   1c89e:	4c29      	ldr	r4, [pc, #164]	; (1c944 <start_motor_service+0x304>)
   1c8a0:	47a0      	blx	r4
	xTaskCreate(vTask_100ms_Timer,NULL,configMINIMAL_STACK_SIZE, NULL,1,NULL);
   1c8a2:	4829      	ldr	r0, [pc, #164]	; (1c948 <start_motor_service+0x308>)
   1c8a4:	2300      	movs	r3, #0
   1c8a6:	9301      	str	r3, [sp, #4]
   1c8a8:	2301      	movs	r3, #1
   1c8aa:	9300      	str	r3, [sp, #0]
   1c8ac:	2300      	movs	r3, #0
   1c8ae:	2282      	movs	r2, #130	; 0x82
   1c8b0:	2100      	movs	r1, #0
   1c8b2:	4c24      	ldr	r4, [pc, #144]	; (1c944 <start_motor_service+0x304>)
   1c8b4:	47a0      	blx	r4
	xTaskCreate(vTask_50ms_Timer,NULL,configMINIMAL_STACK_SIZE, NULL,1,&fiftymsTask);
   1c8b6:	4825      	ldr	r0, [pc, #148]	; (1c94c <start_motor_service+0x30c>)
   1c8b8:	4b25      	ldr	r3, [pc, #148]	; (1c950 <start_motor_service+0x310>)
   1c8ba:	9301      	str	r3, [sp, #4]
   1c8bc:	2301      	movs	r3, #1
   1c8be:	9300      	str	r3, [sp, #0]
   1c8c0:	2300      	movs	r3, #0
   1c8c2:	2282      	movs	r2, #130	; 0x82
   1c8c4:	2100      	movs	r1, #0
   1c8c6:	4c1f      	ldr	r4, [pc, #124]	; (1c944 <start_motor_service+0x304>)
   1c8c8:	47a0      	blx	r4
	
	if(factory_settings_parameter_struct.ENABLE_WATER)
   1c8ca:	4b22      	ldr	r3, [pc, #136]	; (1c954 <start_motor_service+0x314>)
   1c8cc:	795b      	ldrb	r3, [r3, #5]
   1c8ce:	2b00      	cmp	r3, #0
   1c8d0:	d00a      	beq.n	1c8e8 <start_motor_service+0x2a8>
	{
		xTaskCreate(Water_Level_Task,NULL,(uint16_t)700,NULL,1,NULL);
   1c8d2:	23af      	movs	r3, #175	; 0xaf
   1c8d4:	009a      	lsls	r2, r3, #2
   1c8d6:	4820      	ldr	r0, [pc, #128]	; (1c958 <start_motor_service+0x318>)
   1c8d8:	2300      	movs	r3, #0
   1c8da:	9301      	str	r3, [sp, #4]
   1c8dc:	2301      	movs	r3, #1
   1c8de:	9300      	str	r3, [sp, #0]
   1c8e0:	2300      	movs	r3, #0
   1c8e2:	2100      	movs	r1, #0
   1c8e4:	4c17      	ldr	r4, [pc, #92]	; (1c944 <start_motor_service+0x304>)
   1c8e6:	47a0      	blx	r4
	}
	
	xTaskCreate(vTask_MOTORCONTROL,NULL,(uint16_t)800,NULL,1, &motorTask);
   1c8e8:	23c8      	movs	r3, #200	; 0xc8
   1c8ea:	009a      	lsls	r2, r3, #2
   1c8ec:	481b      	ldr	r0, [pc, #108]	; (1c95c <start_motor_service+0x31c>)
   1c8ee:	4b1c      	ldr	r3, [pc, #112]	; (1c960 <start_motor_service+0x320>)
   1c8f0:	9301      	str	r3, [sp, #4]
   1c8f2:	2301      	movs	r3, #1
   1c8f4:	9300      	str	r3, [sp, #0]
   1c8f6:	2300      	movs	r3, #0
   1c8f8:	2100      	movs	r1, #0
   1c8fa:	4c12      	ldr	r4, [pc, #72]	; (1c944 <start_motor_service+0x304>)
   1c8fc:	47a0      	blx	r4

}
   1c8fe:	46c0      	nop			; (mov r8, r8)
   1c900:	46bd      	mov	sp, r7
   1c902:	b009      	add	sp, #36	; 0x24
   1c904:	bd90      	pop	{r4, r7, pc}
   1c906:	46c0      	nop			; (mov r8, r8)
   1c908:	0001e215 	.word	0x0001e215
   1c90c:	0001e249 	.word	0x0001e249
   1c910:	0001a3c9 	.word	0x0001a3c9
   1c914:	0002228d 	.word	0x0002228d
   1c918:	000222f1 	.word	0x000222f1
   1c91c:	00019525 	.word	0x00019525
   1c920:	00022be1 	.word	0x00022be1
   1c924:	0001ef15 	.word	0x0001ef15
   1c928:	20000230 	.word	0x20000230
   1c92c:	0001efd1 	.word	0x0001efd1
   1c930:	20000234 	.word	0x20000234
   1c934:	0001958d 	.word	0x0001958d
   1c938:	0001cbe1 	.word	0x0001cbe1
   1c93c:	0001c139 	.word	0x0001c139
   1c940:	0001a5e1 	.word	0x0001a5e1
   1c944:	0001fa39 	.word	0x0001fa39
   1c948:	0001a64d 	.word	0x0001a64d
   1c94c:	0001cea9 	.word	0x0001cea9
   1c950:	2000023c 	.word	0x2000023c
   1c954:	2000062c 	.word	0x2000062c
   1c958:	000198e1 	.word	0x000198e1
   1c95c:	0001c14d 	.word	0x0001c14d
   1c960:	20000238 	.word	0x20000238

0001c964 <motor_checkSleepElligible>:

bool motor_checkSleepElligible(void)
{
   1c964:	b580      	push	{r7, lr}
   1c966:	b082      	sub	sp, #8
   1c968:	af00      	add	r7, sp, #0
	uint8_t j = 0;
   1c96a:	1dfb      	adds	r3, r7, #7
   1c96c:	2200      	movs	r2, #0
   1c96e:	701a      	strb	r2, [r3, #0]
	if (factory_settings_parameter_struct.ENABLE_WATER)
   1c970:	4b4c      	ldr	r3, [pc, #304]	; (1caa4 <motor_checkSleepElligible+0x140>)
   1c972:	795b      	ldrb	r3, [r3, #5]
   1c974:	2b00      	cmp	r3, #0
   1c976:	d00b      	beq.n	1c990 <motor_checkSleepElligible+0x2c>
	{
		if (factory_settings_parameter_struct.ENABLE_GP)
   1c978:	4b4a      	ldr	r3, [pc, #296]	; (1caa4 <motor_checkSleepElligible+0x140>)
   1c97a:	791b      	ldrb	r3, [r3, #4]
   1c97c:	2b00      	cmp	r3, #0
   1c97e:	d003      	beq.n	1c988 <motor_checkSleepElligible+0x24>
		{
			j = 19;
   1c980:	1dfb      	adds	r3, r7, #7
   1c982:	2213      	movs	r2, #19
   1c984:	701a      	strb	r2, [r3, #0]
   1c986:	e00e      	b.n	1c9a6 <motor_checkSleepElligible+0x42>
		}
		else
		{
			j = 17;
   1c988:	1dfb      	adds	r3, r7, #7
   1c98a:	2211      	movs	r2, #17
   1c98c:	701a      	strb	r2, [r3, #0]
   1c98e:	e00a      	b.n	1c9a6 <motor_checkSleepElligible+0x42>
		}
	}
	else
	{
		if (factory_settings_parameter_struct.ENABLE_CURRENT)
   1c990:	4b44      	ldr	r3, [pc, #272]	; (1caa4 <motor_checkSleepElligible+0x140>)
   1c992:	785b      	ldrb	r3, [r3, #1]
   1c994:	2b00      	cmp	r3, #0
   1c996:	d003      	beq.n	1c9a0 <motor_checkSleepElligible+0x3c>
		{
			j = 14;
   1c998:	1dfb      	adds	r3, r7, #7
   1c99a:	220e      	movs	r2, #14
   1c99c:	701a      	strb	r2, [r3, #0]
   1c99e:	e002      	b.n	1c9a6 <motor_checkSleepElligible+0x42>
		}
		else
		{
			j = 12;
   1c9a0:	1dfb      	adds	r3, r7, #7
   1c9a2:	220c      	movs	r2, #12
   1c9a4:	701a      	strb	r2, [r3, #0]
		}
	}
	
	bool event=true;
   1c9a6:	1dbb      	adds	r3, r7, #6
   1c9a8:	2201      	movs	r2, #1
   1c9aa:	701a      	strb	r2, [r3, #0]
	while(j--)
   1c9ac:	e00c      	b.n	1c9c8 <motor_checkSleepElligible+0x64>
	{
		if(!simEventTemp[j])
   1c9ae:	1dfb      	adds	r3, r7, #7
   1c9b0:	781b      	ldrb	r3, [r3, #0]
   1c9b2:	4a3d      	ldr	r2, [pc, #244]	; (1caa8 <motor_checkSleepElligible+0x144>)
   1c9b4:	5cd3      	ldrb	r3, [r2, r3]
   1c9b6:	2201      	movs	r2, #1
   1c9b8:	4053      	eors	r3, r2
   1c9ba:	b2db      	uxtb	r3, r3
   1c9bc:	2b00      	cmp	r3, #0
   1c9be:	d003      	beq.n	1c9c8 <motor_checkSleepElligible+0x64>
		{
			event=false;
   1c9c0:	1dbb      	adds	r3, r7, #6
   1c9c2:	2200      	movs	r2, #0
   1c9c4:	701a      	strb	r2, [r3, #0]
			break;
   1c9c6:	e006      	b.n	1c9d6 <motor_checkSleepElligible+0x72>
	while(j--)
   1c9c8:	1dfb      	adds	r3, r7, #7
   1c9ca:	781b      	ldrb	r3, [r3, #0]
   1c9cc:	1dfa      	adds	r2, r7, #7
   1c9ce:	1e59      	subs	r1, r3, #1
   1c9d0:	7011      	strb	r1, [r2, #0]
   1c9d2:	2b00      	cmp	r3, #0
   1c9d4:	d1eb      	bne.n	1c9ae <motor_checkSleepElligible+0x4a>
		}
	}
	if (factory_settings_parameter_struct.ENABLE_M2M)
   1c9d6:	4b33      	ldr	r3, [pc, #204]	; (1caa4 <motor_checkSleepElligible+0x140>)
   1c9d8:	78db      	ldrb	r3, [r3, #3]
   1c9da:	2b00      	cmp	r3, #0
   1c9dc:	d00e      	beq.n	1c9fc <motor_checkSleepElligible+0x98>
	{
		if(event && m2mEvent_arr[0] == ME_WAITREGISTER || m2mEvent_arr[1]==ME_WAITREGISTER)
   1c9de:	1dbb      	adds	r3, r7, #6
   1c9e0:	781b      	ldrb	r3, [r3, #0]
   1c9e2:	2b00      	cmp	r3, #0
   1c9e4:	d003      	beq.n	1c9ee <motor_checkSleepElligible+0x8a>
   1c9e6:	4b31      	ldr	r3, [pc, #196]	; (1caac <motor_checkSleepElligible+0x148>)
   1c9e8:	781b      	ldrb	r3, [r3, #0]
   1c9ea:	2b01      	cmp	r3, #1
   1c9ec:	d003      	beq.n	1c9f6 <motor_checkSleepElligible+0x92>
   1c9ee:	4b2f      	ldr	r3, [pc, #188]	; (1caac <motor_checkSleepElligible+0x148>)
   1c9f0:	785b      	ldrb	r3, [r3, #1]
   1c9f2:	2b01      	cmp	r3, #1
   1c9f4:	d102      	bne.n	1c9fc <motor_checkSleepElligible+0x98>
		{
			event = false;
   1c9f6:	1dbb      	adds	r3, r7, #6
   1c9f8:	2200      	movs	r2, #0
   1c9fa:	701a      	strb	r2, [r3, #0]
		}
	}
	
	return ((getAllPhaseState()==AC_OFF) && !eventOccured && event && !waitStableLineOn && !singlePhasingTimerOn
   1c9fc:	4b2c      	ldr	r3, [pc, #176]	; (1cab0 <motor_checkSleepElligible+0x14c>)
   1c9fe:	4798      	blx	r3
   1ca00:	1e03      	subs	r3, r0, #0
	&& !startTimerOn && !startSequenceOn && !stopSequenceOn && !firstEvent && !buttonEventOccured && (lastButtonEvent==0));
   1ca02:	d145      	bne.n	1ca90 <motor_checkSleepElligible+0x12c>
	return ((getAllPhaseState()==AC_OFF) && !eventOccured && event && !waitStableLineOn && !singlePhasingTimerOn
   1ca04:	4b2b      	ldr	r3, [pc, #172]	; (1cab4 <motor_checkSleepElligible+0x150>)
   1ca06:	781b      	ldrb	r3, [r3, #0]
   1ca08:	b2db      	uxtb	r3, r3
   1ca0a:	2201      	movs	r2, #1
   1ca0c:	4053      	eors	r3, r2
   1ca0e:	b2db      	uxtb	r3, r3
   1ca10:	2b00      	cmp	r3, #0
   1ca12:	d03d      	beq.n	1ca90 <motor_checkSleepElligible+0x12c>
   1ca14:	1dbb      	adds	r3, r7, #6
   1ca16:	781b      	ldrb	r3, [r3, #0]
   1ca18:	2b00      	cmp	r3, #0
   1ca1a:	d039      	beq.n	1ca90 <motor_checkSleepElligible+0x12c>
   1ca1c:	4b26      	ldr	r3, [pc, #152]	; (1cab8 <motor_checkSleepElligible+0x154>)
   1ca1e:	781b      	ldrb	r3, [r3, #0]
   1ca20:	2201      	movs	r2, #1
   1ca22:	4053      	eors	r3, r2
   1ca24:	b2db      	uxtb	r3, r3
   1ca26:	2b00      	cmp	r3, #0
   1ca28:	d032      	beq.n	1ca90 <motor_checkSleepElligible+0x12c>
   1ca2a:	4b24      	ldr	r3, [pc, #144]	; (1cabc <motor_checkSleepElligible+0x158>)
   1ca2c:	781b      	ldrb	r3, [r3, #0]
   1ca2e:	2201      	movs	r2, #1
   1ca30:	4053      	eors	r3, r2
   1ca32:	b2db      	uxtb	r3, r3
   1ca34:	2b00      	cmp	r3, #0
   1ca36:	d02b      	beq.n	1ca90 <motor_checkSleepElligible+0x12c>
	&& !startTimerOn && !startSequenceOn && !stopSequenceOn && !firstEvent && !buttonEventOccured && (lastButtonEvent==0));
   1ca38:	4b21      	ldr	r3, [pc, #132]	; (1cac0 <motor_checkSleepElligible+0x15c>)
   1ca3a:	781b      	ldrb	r3, [r3, #0]
   1ca3c:	2201      	movs	r2, #1
   1ca3e:	4053      	eors	r3, r2
   1ca40:	b2db      	uxtb	r3, r3
   1ca42:	2b00      	cmp	r3, #0
   1ca44:	d024      	beq.n	1ca90 <motor_checkSleepElligible+0x12c>
   1ca46:	4b1f      	ldr	r3, [pc, #124]	; (1cac4 <motor_checkSleepElligible+0x160>)
   1ca48:	781b      	ldrb	r3, [r3, #0]
   1ca4a:	2201      	movs	r2, #1
   1ca4c:	4053      	eors	r3, r2
   1ca4e:	b2db      	uxtb	r3, r3
   1ca50:	2b00      	cmp	r3, #0
   1ca52:	d01d      	beq.n	1ca90 <motor_checkSleepElligible+0x12c>
   1ca54:	4b1c      	ldr	r3, [pc, #112]	; (1cac8 <motor_checkSleepElligible+0x164>)
   1ca56:	781b      	ldrb	r3, [r3, #0]
   1ca58:	2201      	movs	r2, #1
   1ca5a:	4053      	eors	r3, r2
   1ca5c:	b2db      	uxtb	r3, r3
   1ca5e:	2b00      	cmp	r3, #0
   1ca60:	d016      	beq.n	1ca90 <motor_checkSleepElligible+0x12c>
   1ca62:	4b1a      	ldr	r3, [pc, #104]	; (1cacc <motor_checkSleepElligible+0x168>)
   1ca64:	781b      	ldrb	r3, [r3, #0]
   1ca66:	b2db      	uxtb	r3, r3
   1ca68:	2201      	movs	r2, #1
   1ca6a:	4053      	eors	r3, r2
   1ca6c:	b2db      	uxtb	r3, r3
   1ca6e:	2b00      	cmp	r3, #0
   1ca70:	d00e      	beq.n	1ca90 <motor_checkSleepElligible+0x12c>
   1ca72:	4b17      	ldr	r3, [pc, #92]	; (1cad0 <motor_checkSleepElligible+0x16c>)
   1ca74:	781b      	ldrb	r3, [r3, #0]
   1ca76:	b2db      	uxtb	r3, r3
   1ca78:	2201      	movs	r2, #1
   1ca7a:	4053      	eors	r3, r2
   1ca7c:	b2db      	uxtb	r3, r3
   1ca7e:	2b00      	cmp	r3, #0
   1ca80:	d006      	beq.n	1ca90 <motor_checkSleepElligible+0x12c>
   1ca82:	4b14      	ldr	r3, [pc, #80]	; (1cad4 <motor_checkSleepElligible+0x170>)
   1ca84:	781b      	ldrb	r3, [r3, #0]
   1ca86:	b2db      	uxtb	r3, r3
   1ca88:	2b00      	cmp	r3, #0
   1ca8a:	d101      	bne.n	1ca90 <motor_checkSleepElligible+0x12c>
   1ca8c:	2301      	movs	r3, #1
   1ca8e:	e000      	b.n	1ca92 <motor_checkSleepElligible+0x12e>
   1ca90:	2300      	movs	r3, #0
   1ca92:	1c1a      	adds	r2, r3, #0
   1ca94:	2301      	movs	r3, #1
   1ca96:	4013      	ands	r3, r2
   1ca98:	b2db      	uxtb	r3, r3
	
}
   1ca9a:	0018      	movs	r0, r3
   1ca9c:	46bd      	mov	sp, r7
   1ca9e:	b002      	add	sp, #8
   1caa0:	bd80      	pop	{r7, pc}
   1caa2:	46c0      	nop			; (mov r8, r8)
   1caa4:	2000062c 	.word	0x2000062c
   1caa8:	20000718 	.word	0x20000718
   1caac:	200007c0 	.word	0x200007c0
   1cab0:	0001aebd 	.word	0x0001aebd
   1cab4:	2000072e 	.word	0x2000072e
   1cab8:	2000080d 	.word	0x2000080d
   1cabc:	20000791 	.word	0x20000791
   1cac0:	2000079a 	.word	0x2000079a
   1cac4:	20000799 	.word	0x20000799
   1cac8:	20000788 	.word	0x20000788
   1cacc:	20000776 	.word	0x20000776
   1cad0:	2000079f 	.word	0x2000079f
   1cad4:	20000780 	.word	0x20000780

0001cad8 <configure_ac>:


void configure_ac(void)
{
   1cad8:	b580      	push	{r7, lr}
   1cada:	b08a      	sub	sp, #40	; 0x28
   1cadc:	af00      	add	r7, sp, #0
	struct ac_config conf_ac;
	struct ac_events conf_ac_events = {{0}};
   1cade:	231c      	movs	r3, #28
   1cae0:	18fb      	adds	r3, r7, r3
   1cae2:	0018      	movs	r0, r3
   1cae4:	2305      	movs	r3, #5
   1cae6:	001a      	movs	r2, r3
   1cae8:	2100      	movs	r1, #0
   1caea:	4b2c      	ldr	r3, [pc, #176]	; (1cb9c <configure_ac+0xc4>)
   1caec:	4798      	blx	r3
	
	struct ac_chan_config conf_ac_channel;
	struct port_config pin_conf;
	
	ac_get_config_defaults(&conf_ac);
   1caee:	2324      	movs	r3, #36	; 0x24
   1caf0:	18fb      	adds	r3, r7, r3
   1caf2:	0018      	movs	r0, r3
   1caf4:	4b2a      	ldr	r3, [pc, #168]	; (1cba0 <configure_ac+0xc8>)
   1caf6:	4798      	blx	r3
	conf_ac.run_in_standby[0] = true;
   1caf8:	2324      	movs	r3, #36	; 0x24
   1cafa:	18fb      	adds	r3, r7, r3
   1cafc:	2201      	movs	r2, #1
   1cafe:	701a      	strb	r2, [r3, #0]
	conf_ac.dig_source_generator = GCLK_GENERATOR_6;
   1cb00:	2324      	movs	r3, #36	; 0x24
   1cb02:	18fb      	adds	r3, r7, r3
   1cb04:	2206      	movs	r2, #6
   1cb06:	705a      	strb	r2, [r3, #1]
	ac_init(&ac_instance, AC, &conf_ac);
   1cb08:	2324      	movs	r3, #36	; 0x24
   1cb0a:	18fa      	adds	r2, r7, r3
   1cb0c:	4925      	ldr	r1, [pc, #148]	; (1cba4 <configure_ac+0xcc>)
   1cb0e:	4b26      	ldr	r3, [pc, #152]	; (1cba8 <configure_ac+0xd0>)
   1cb10:	0018      	movs	r0, r3
   1cb12:	4b26      	ldr	r3, [pc, #152]	; (1cbac <configure_ac+0xd4>)
   1cb14:	4798      	blx	r3
	
	conf_ac_channel.sample_mode = AC_CHAN_MODE_CONTINUOUS;
   1cb16:	1d3b      	adds	r3, r7, #4
   1cb18:	2200      	movs	r2, #0
   1cb1a:	701a      	strb	r2, [r3, #0]
	conf_ac_channel.filter = AC_CHAN_FILTER_NONE;
   1cb1c:	1d3b      	adds	r3, r7, #4
   1cb1e:	2200      	movs	r2, #0
   1cb20:	605a      	str	r2, [r3, #4]
	conf_ac_channel.enable_hysteresis = false;
   1cb22:	1d3b      	adds	r3, r7, #4
   1cb24:	2200      	movs	r2, #0
   1cb26:	721a      	strb	r2, [r3, #8]
	conf_ac_channel.output_mode = AC_CHAN_OUTPUT_INTERNAL;
   1cb28:	1d3b      	adds	r3, r7, #4
   1cb2a:	2200      	movs	r2, #0
   1cb2c:	60da      	str	r2, [r3, #12]
	conf_ac_channel.positive_input = AC_CHAN_POS_MUX_PIN0;
   1cb2e:	1d3b      	adds	r3, r7, #4
   1cb30:	2200      	movs	r2, #0
   1cb32:	821a      	strh	r2, [r3, #16]
	conf_ac_channel.negative_input = AC_CHAN_NEG_MUX_SCALED_VCC;
   1cb34:	1d3b      	adds	r3, r7, #4
   1cb36:	22a0      	movs	r2, #160	; 0xa0
   1cb38:	00d2      	lsls	r2, r2, #3
   1cb3a:	825a      	strh	r2, [r3, #18]
	/* Detect threshold 0.515625V */
	conf_ac_channel.vcc_scale_factor = 45;
   1cb3c:	1d3b      	adds	r3, r7, #4
   1cb3e:	222d      	movs	r2, #45	; 0x2d
   1cb40:	751a      	strb	r2, [r3, #20]
	conf_ac_channel.interrupt_selection = AC_CHAN_INTERRUPT_SELECTION_TOGGLE;
   1cb42:	1d3b      	adds	r3, r7, #4
   1cb44:	2200      	movs	r2, #0
   1cb46:	755a      	strb	r2, [r3, #21]
	ac_chan_set_config(&ac_instance, AC_CHAN_CHANNEL_0, &conf_ac_channel);
   1cb48:	1d3a      	adds	r2, r7, #4
   1cb4a:	4b17      	ldr	r3, [pc, #92]	; (1cba8 <configure_ac+0xd0>)
   1cb4c:	2100      	movs	r1, #0
   1cb4e:	0018      	movs	r0, r3
   1cb50:	4b17      	ldr	r3, [pc, #92]	; (1cbb0 <configure_ac+0xd8>)
   1cb52:	4798      	blx	r3
	ac_chan_enable(&ac_instance, AC_CHAN_CHANNEL_0);
   1cb54:	4b14      	ldr	r3, [pc, #80]	; (1cba8 <configure_ac+0xd0>)
   1cb56:	2100      	movs	r1, #0
   1cb58:	0018      	movs	r0, r3
   1cb5a:	4b16      	ldr	r3, [pc, #88]	; (1cbb4 <configure_ac+0xdc>)
   1cb5c:	4798      	blx	r3
	
	conf_ac_events.on_event_sample[0] = true;
   1cb5e:	231c      	movs	r3, #28
   1cb60:	18fb      	adds	r3, r7, r3
   1cb62:	2201      	movs	r2, #1
   1cb64:	70da      	strb	r2, [r3, #3]
	ac_enable_events(&ac_instance ,&conf_ac_events);
   1cb66:	231c      	movs	r3, #28
   1cb68:	18fa      	adds	r2, r7, r3
   1cb6a:	4b0f      	ldr	r3, [pc, #60]	; (1cba8 <configure_ac+0xd0>)
   1cb6c:	0011      	movs	r1, r2
   1cb6e:	0018      	movs	r0, r3
   1cb70:	4b11      	ldr	r3, [pc, #68]	; (1cbb8 <configure_ac+0xe0>)
   1cb72:	4798      	blx	r3
	
	ac_enable(&ac_instance);
   1cb74:	4b0c      	ldr	r3, [pc, #48]	; (1cba8 <configure_ac+0xd0>)
   1cb76:	0018      	movs	r0, r3
   1cb78:	4b10      	ldr	r3, [pc, #64]	; (1cbbc <configure_ac+0xe4>)
   1cb7a:	4798      	blx	r3
	
	ac_register_callback(&ac_instance, ac_detect_callback,AC_CALLBACK_COMPARATOR_0);
   1cb7c:	4910      	ldr	r1, [pc, #64]	; (1cbc0 <configure_ac+0xe8>)
   1cb7e:	4b0a      	ldr	r3, [pc, #40]	; (1cba8 <configure_ac+0xd0>)
   1cb80:	2200      	movs	r2, #0
   1cb82:	0018      	movs	r0, r3
   1cb84:	4b0f      	ldr	r3, [pc, #60]	; (1cbc4 <configure_ac+0xec>)
   1cb86:	4798      	blx	r3
	ac_enable_callback(&ac_instance, AC_CALLBACK_COMPARATOR_0);
   1cb88:	4b07      	ldr	r3, [pc, #28]	; (1cba8 <configure_ac+0xd0>)
   1cb8a:	2100      	movs	r1, #0
   1cb8c:	0018      	movs	r0, r3
   1cb8e:	4b0e      	ldr	r3, [pc, #56]	; (1cbc8 <configure_ac+0xf0>)
   1cb90:	4798      	blx	r3
}
   1cb92:	46c0      	nop			; (mov r8, r8)
   1cb94:	46bd      	mov	sp, r7
   1cb96:	b00a      	add	sp, #40	; 0x28
   1cb98:	bd80      	pop	{r7, pc}
   1cb9a:	46c0      	nop			; (mov r8, r8)
   1cb9c:	000289e3 	.word	0x000289e3
   1cba0:	00018ea9 	.word	0x00018ea9
   1cba4:	42004400 	.word	0x42004400
   1cba8:	2000088c 	.word	0x2000088c
   1cbac:	0001d03d 	.word	0x0001d03d
   1cbb0:	0001d11d 	.word	0x0001d11d
   1cbb4:	00018ff9 	.word	0x00018ff9
   1cbb8:	00018f19 	.word	0x00018f19
   1cbbc:	00018ee1 	.word	0x00018ee1
   1cbc0:	0001cbcd 	.word	0x0001cbcd
   1cbc4:	00022499 	.word	0x00022499
   1cbc8:	00019161 	.word	0x00019161

0001cbcc <ac_detect_callback>:
	rtc_count_enable_events(&rtc_instance, &conf_rtc_events);
	rtc_count_enable(&rtc_instance);
}

void ac_detect_callback(struct ac_module *const module_inst)
{
   1cbcc:	b580      	push	{r7, lr}
   1cbce:	b082      	sub	sp, #8
   1cbd0:	af00      	add	r7, sp, #0
   1cbd2:	6078      	str	r0, [r7, #4]
	asm("NOP");
   1cbd4:	46c0      	nop			; (mov r8, r8)
	;
	//eventOccured = true;
}
   1cbd6:	46c0      	nop			; (mov r8, r8)
   1cbd8:	46bd      	mov	sp, r7
   1cbda:	b002      	add	sp, #8
   1cbdc:	bd80      	pop	{r7, pc}
	...

0001cbe0 <motor_feedback_callback>:

static void motor_feedback_callback(void)
{
   1cbe0:	b580      	push	{r7, lr}
   1cbe2:	af00      	add	r7, sp, #0
	eventOccured = true;
   1cbe4:	4b06      	ldr	r3, [pc, #24]	; (1cc00 <motor_feedback_callback+0x20>)
   1cbe6:	2201      	movs	r2, #1
   1cbe8:	701a      	strb	r2, [r3, #0]
	motorFeedbackEvent=true;
   1cbea:	4b06      	ldr	r3, [pc, #24]	; (1cc04 <motor_feedback_callback+0x24>)
   1cbec:	2201      	movs	r2, #1
   1cbee:	701a      	strb	r2, [r3, #0]
	motorFeedbackEventTime=xTaskGetTickCountFromISR();
   1cbf0:	4b05      	ldr	r3, [pc, #20]	; (1cc08 <motor_feedback_callback+0x28>)
   1cbf2:	4798      	blx	r3
   1cbf4:	0002      	movs	r2, r0
   1cbf6:	4b05      	ldr	r3, [pc, #20]	; (1cc0c <motor_feedback_callback+0x2c>)
   1cbf8:	601a      	str	r2, [r3, #0]
}
   1cbfa:	46c0      	nop			; (mov r8, r8)
   1cbfc:	46bd      	mov	sp, r7
   1cbfe:	bd80      	pop	{r7, pc}
   1cc00:	2000072e 	.word	0x2000072e
   1cc04:	2000078a 	.word	0x2000078a
   1cc08:	000200f9 	.word	0x000200f9
   1cc0c:	2000085c 	.word	0x2000085c

0001cc10 <operateOnButtonEvent>:
	events_allocate(&resource, &conf_event);
	events_attach_user(&resource, EVSYS_ID_USER_AC_SOC_0);
}

void operateOnButtonEvent(void)
{
   1cc10:	b580      	push	{r7, lr}
   1cc12:	af00      	add	r7, sp, #0
	buttonEventOccured=false;
   1cc14:	4b28      	ldr	r3, [pc, #160]	; (1ccb8 <operateOnButtonEvent+0xa8>)
   1cc16:	2200      	movs	r2, #0
   1cc18:	701a      	strb	r2, [r3, #0]
	if (START_BUTTON_INPUT_COMES)
   1cc1a:	2026      	movs	r0, #38	; 0x26
   1cc1c:	4b27      	ldr	r3, [pc, #156]	; (1ccbc <operateOnButtonEvent+0xac>)
   1cc1e:	4798      	blx	r3
   1cc20:	0003      	movs	r3, r0
   1cc22:	001a      	movs	r2, r3
   1cc24:	2301      	movs	r3, #1
   1cc26:	4053      	eors	r3, r2
   1cc28:	b2db      	uxtb	r3, r3
   1cc2a:	2b00      	cmp	r3, #0
   1cc2c:	d008      	beq.n	1cc40 <operateOnButtonEvent+0x30>
	{
		lastPressTime=xTaskGetTickCount();
   1cc2e:	4b24      	ldr	r3, [pc, #144]	; (1ccc0 <operateOnButtonEvent+0xb0>)
   1cc30:	4798      	blx	r3
   1cc32:	0002      	movs	r2, r0
   1cc34:	4b23      	ldr	r3, [pc, #140]	; (1ccc4 <operateOnButtonEvent+0xb4>)
   1cc36:	601a      	str	r2, [r3, #0]
		lastButtonEvent=BTNEVENTSTART;
   1cc38:	4b23      	ldr	r3, [pc, #140]	; (1ccc8 <operateOnButtonEvent+0xb8>)
   1cc3a:	2201      	movs	r2, #1
   1cc3c:	701a      	strb	r2, [r3, #0]
	else if(LCDSHOW_BUTTON_INPUT_COMES)
	{
		lastPressTime= xTaskGetTickCount();
		lastButtonEvent=BTNEVENTLCDSHOW;
	}
}
   1cc3e:	e037      	b.n	1ccb0 <operateOnButtonEvent+0xa0>
	else if (STOP_BUTTON_INPUT_COMES)
   1cc40:	2025      	movs	r0, #37	; 0x25
   1cc42:	4b1e      	ldr	r3, [pc, #120]	; (1ccbc <operateOnButtonEvent+0xac>)
   1cc44:	4798      	blx	r3
   1cc46:	0003      	movs	r3, r0
   1cc48:	001a      	movs	r2, r3
   1cc4a:	2301      	movs	r3, #1
   1cc4c:	4053      	eors	r3, r2
   1cc4e:	b2db      	uxtb	r3, r3
   1cc50:	2b00      	cmp	r3, #0
   1cc52:	d008      	beq.n	1cc66 <operateOnButtonEvent+0x56>
		lastPressTime=xTaskGetTickCount();
   1cc54:	4b1a      	ldr	r3, [pc, #104]	; (1ccc0 <operateOnButtonEvent+0xb0>)
   1cc56:	4798      	blx	r3
   1cc58:	0002      	movs	r2, r0
   1cc5a:	4b1a      	ldr	r3, [pc, #104]	; (1ccc4 <operateOnButtonEvent+0xb4>)
   1cc5c:	601a      	str	r2, [r3, #0]
		lastButtonEvent=BTNEVENTSTOP;
   1cc5e:	4b1a      	ldr	r3, [pc, #104]	; (1ccc8 <operateOnButtonEvent+0xb8>)
   1cc60:	2202      	movs	r2, #2
   1cc62:	701a      	strb	r2, [r3, #0]
}
   1cc64:	e024      	b.n	1ccb0 <operateOnButtonEvent+0xa0>
	else if (AUTO_BUTTON_INPUT_COMES)
   1cc66:	201c      	movs	r0, #28
   1cc68:	4b14      	ldr	r3, [pc, #80]	; (1ccbc <operateOnButtonEvent+0xac>)
   1cc6a:	4798      	blx	r3
   1cc6c:	0003      	movs	r3, r0
   1cc6e:	001a      	movs	r2, r3
   1cc70:	2301      	movs	r3, #1
   1cc72:	4053      	eors	r3, r2
   1cc74:	b2db      	uxtb	r3, r3
   1cc76:	2b00      	cmp	r3, #0
   1cc78:	d008      	beq.n	1cc8c <operateOnButtonEvent+0x7c>
		lastPressTime=xTaskGetTickCount();
   1cc7a:	4b11      	ldr	r3, [pc, #68]	; (1ccc0 <operateOnButtonEvent+0xb0>)
   1cc7c:	4798      	blx	r3
   1cc7e:	0002      	movs	r2, r0
   1cc80:	4b10      	ldr	r3, [pc, #64]	; (1ccc4 <operateOnButtonEvent+0xb4>)
   1cc82:	601a      	str	r2, [r3, #0]
		lastButtonEvent=BTNEVENTAUTO;
   1cc84:	4b10      	ldr	r3, [pc, #64]	; (1ccc8 <operateOnButtonEvent+0xb8>)
   1cc86:	2203      	movs	r2, #3
   1cc88:	701a      	strb	r2, [r3, #0]
}
   1cc8a:	e011      	b.n	1ccb0 <operateOnButtonEvent+0xa0>
	else if(LCDSHOW_BUTTON_INPUT_COMES)
   1cc8c:	2029      	movs	r0, #41	; 0x29
   1cc8e:	4b0b      	ldr	r3, [pc, #44]	; (1ccbc <operateOnButtonEvent+0xac>)
   1cc90:	4798      	blx	r3
   1cc92:	0003      	movs	r3, r0
   1cc94:	001a      	movs	r2, r3
   1cc96:	2301      	movs	r3, #1
   1cc98:	4053      	eors	r3, r2
   1cc9a:	b2db      	uxtb	r3, r3
   1cc9c:	2b00      	cmp	r3, #0
   1cc9e:	d007      	beq.n	1ccb0 <operateOnButtonEvent+0xa0>
		lastPressTime= xTaskGetTickCount();
   1cca0:	4b07      	ldr	r3, [pc, #28]	; (1ccc0 <operateOnButtonEvent+0xb0>)
   1cca2:	4798      	blx	r3
   1cca4:	0002      	movs	r2, r0
   1cca6:	4b07      	ldr	r3, [pc, #28]	; (1ccc4 <operateOnButtonEvent+0xb4>)
   1cca8:	601a      	str	r2, [r3, #0]
		lastButtonEvent=BTNEVENTLCDSHOW;
   1ccaa:	4b07      	ldr	r3, [pc, #28]	; (1ccc8 <operateOnButtonEvent+0xb8>)
   1ccac:	2204      	movs	r2, #4
   1ccae:	701a      	strb	r2, [r3, #0]
}
   1ccb0:	46c0      	nop			; (mov r8, r8)
   1ccb2:	46bd      	mov	sp, r7
   1ccb4:	bd80      	pop	{r7, pc}
   1ccb6:	46c0      	nop			; (mov r8, r8)
   1ccb8:	2000079f 	.word	0x2000079f
   1ccbc:	00019549 	.word	0x00019549
   1ccc0:	000200dd 	.word	0x000200dd
   1ccc4:	20000768 	.word	0x20000768
   1ccc8:	20000780 	.word	0x20000780

0001cccc <buttonFilter>:

void buttonFilter(void)
{
   1cccc:	b580      	push	{r7, lr}
   1ccce:	af00      	add	r7, sp, #0
	//&& xTaskGetTickCount() - lastPressTime > 30
	if(lastButtonEvent>0)
   1ccd0:	4b48      	ldr	r3, [pc, #288]	; (1cdf4 <buttonFilter+0x128>)
   1ccd2:	781b      	ldrb	r3, [r3, #0]
   1ccd4:	b2db      	uxtb	r3, r3
   1ccd6:	2b00      	cmp	r3, #0
   1ccd8:	d100      	bne.n	1ccdc <buttonFilter+0x10>
   1ccda:	e088      	b.n	1cdee <buttonFilter+0x122>
	{
		if(lastButtonEvent==BTNEVENTSTART && START_BUTTON_INPUT_COMES)
   1ccdc:	4b45      	ldr	r3, [pc, #276]	; (1cdf4 <buttonFilter+0x128>)
   1ccde:	781b      	ldrb	r3, [r3, #0]
   1cce0:	b2db      	uxtb	r3, r3
   1cce2:	2b01      	cmp	r3, #1
   1cce4:	d111      	bne.n	1cd0a <buttonFilter+0x3e>
   1cce6:	2026      	movs	r0, #38	; 0x26
   1cce8:	4b43      	ldr	r3, [pc, #268]	; (1cdf8 <buttonFilter+0x12c>)
   1ccea:	4798      	blx	r3
   1ccec:	0003      	movs	r3, r0
   1ccee:	001a      	movs	r2, r3
   1ccf0:	2301      	movs	r3, #1
   1ccf2:	4053      	eors	r3, r2
   1ccf4:	b2db      	uxtb	r3, r3
   1ccf6:	2b00      	cmp	r3, #0
   1ccf8:	d007      	beq.n	1cd0a <buttonFilter+0x3e>
		{
			lastButtonEvent=0;
   1ccfa:	4b3e      	ldr	r3, [pc, #248]	; (1cdf4 <buttonFilter+0x128>)
   1ccfc:	2200      	movs	r2, #0
   1ccfe:	701a      	strb	r2, [r3, #0]
			startMotor(false,false);
   1cd00:	2100      	movs	r1, #0
   1cd02:	2000      	movs	r0, #0
   1cd04:	4b3d      	ldr	r3, [pc, #244]	; (1cdfc <buttonFilter+0x130>)
   1cd06:	4798      	blx	r3
   1cd08:	e071      	b.n	1cdee <buttonFilter+0x122>
		}
		else if(lastButtonEvent==BTNEVENTSTOP && STOP_BUTTON_INPUT_COMES)
   1cd0a:	4b3a      	ldr	r3, [pc, #232]	; (1cdf4 <buttonFilter+0x128>)
   1cd0c:	781b      	ldrb	r3, [r3, #0]
   1cd0e:	b2db      	uxtb	r3, r3
   1cd10:	2b02      	cmp	r3, #2
   1cd12:	d112      	bne.n	1cd3a <buttonFilter+0x6e>
   1cd14:	2025      	movs	r0, #37	; 0x25
   1cd16:	4b38      	ldr	r3, [pc, #224]	; (1cdf8 <buttonFilter+0x12c>)
   1cd18:	4798      	blx	r3
   1cd1a:	0003      	movs	r3, r0
   1cd1c:	001a      	movs	r2, r3
   1cd1e:	2301      	movs	r3, #1
   1cd20:	4053      	eors	r3, r2
   1cd22:	b2db      	uxtb	r3, r3
   1cd24:	2b00      	cmp	r3, #0
   1cd26:	d008      	beq.n	1cd3a <buttonFilter+0x6e>
		{
			lastButtonEvent=0;
   1cd28:	4b32      	ldr	r3, [pc, #200]	; (1cdf4 <buttonFilter+0x128>)
   1cd2a:	2200      	movs	r2, #0
   1cd2c:	701a      	strb	r2, [r3, #0]
			stopMotor(false,false,true);
   1cd2e:	2201      	movs	r2, #1
   1cd30:	2100      	movs	r1, #0
   1cd32:	2000      	movs	r0, #0
   1cd34:	4b32      	ldr	r3, [pc, #200]	; (1ce00 <buttonFilter+0x134>)
   1cd36:	4798      	blx	r3
   1cd38:	e059      	b.n	1cdee <buttonFilter+0x122>
		}
		else if(lastButtonEvent==BTNEVENTAUTO && AUTO_BUTTON_INPUT_COMES)
   1cd3a:	4b2e      	ldr	r3, [pc, #184]	; (1cdf4 <buttonFilter+0x128>)
   1cd3c:	781b      	ldrb	r3, [r3, #0]
   1cd3e:	b2db      	uxtb	r3, r3
   1cd40:	2b03      	cmp	r3, #3
   1cd42:	d12d      	bne.n	1cda0 <buttonFilter+0xd4>
   1cd44:	201c      	movs	r0, #28
   1cd46:	4b2c      	ldr	r3, [pc, #176]	; (1cdf8 <buttonFilter+0x12c>)
   1cd48:	4798      	blx	r3
   1cd4a:	0003      	movs	r3, r0
   1cd4c:	001a      	movs	r2, r3
   1cd4e:	2301      	movs	r3, #1
   1cd50:	4053      	eors	r3, r2
   1cd52:	b2db      	uxtb	r3, r3
   1cd54:	2b00      	cmp	r3, #0
   1cd56:	d023      	beq.n	1cda0 <buttonFilter+0xd4>
		{
			lastButtonEvent=0;
   1cd58:	4b26      	ldr	r3, [pc, #152]	; (1cdf4 <buttonFilter+0x128>)
   1cd5a:	2200      	movs	r2, #0
   1cd5c:	701a      	strb	r2, [r3, #0]
			saveAutoStartSettings(!((bool)user_settings_parameter_struct.autoStartAddress));  //set AutoStart to True in EEPROM
   1cd5e:	4b29      	ldr	r3, [pc, #164]	; (1ce04 <buttonFilter+0x138>)
   1cd60:	785b      	ldrb	r3, [r3, #1]
   1cd62:	b2db      	uxtb	r3, r3
   1cd64:	425a      	negs	r2, r3
   1cd66:	4153      	adcs	r3, r2
   1cd68:	b2db      	uxtb	r3, r3
   1cd6a:	0018      	movs	r0, r3
   1cd6c:	4b26      	ldr	r3, [pc, #152]	; (1ce08 <buttonFilter+0x13c>)
   1cd6e:	4798      	blx	r3
			resetAutoStart(true);
   1cd70:	2001      	movs	r0, #1
   1cd72:	4b26      	ldr	r3, [pc, #152]	; (1ce0c <buttonFilter+0x140>)
   1cd74:	4798      	blx	r3
			if(user_settings_parameter_struct.autoStartAddress)
   1cd76:	4b23      	ldr	r3, [pc, #140]	; (1ce04 <buttonFilter+0x138>)
   1cd78:	785b      	ldrb	r3, [r3, #1]
   1cd7a:	b2db      	uxtb	r3, r3
   1cd7c:	2b00      	cmp	r3, #0
   1cd7e:	d007      	beq.n	1cd90 <buttonFilter+0xc4>
			{
				simEventTemp[10] = registerEvent(')');
   1cd80:	2029      	movs	r0, #41	; 0x29
   1cd82:	4b23      	ldr	r3, [pc, #140]	; (1ce10 <buttonFilter+0x144>)
   1cd84:	4798      	blx	r3
   1cd86:	0003      	movs	r3, r0
   1cd88:	001a      	movs	r2, r3
   1cd8a:	4b22      	ldr	r3, [pc, #136]	; (1ce14 <buttonFilter+0x148>)
   1cd8c:	729a      	strb	r2, [r3, #10]
			if(user_settings_parameter_struct.autoStartAddress)
   1cd8e:	e02e      	b.n	1cdee <buttonFilter+0x122>
			}
			else
			{
				simEventTemp[11] = registerEvent('[');
   1cd90:	205b      	movs	r0, #91	; 0x5b
   1cd92:	4b1f      	ldr	r3, [pc, #124]	; (1ce10 <buttonFilter+0x144>)
   1cd94:	4798      	blx	r3
   1cd96:	0003      	movs	r3, r0
   1cd98:	001a      	movs	r2, r3
   1cd9a:	4b1e      	ldr	r3, [pc, #120]	; (1ce14 <buttonFilter+0x148>)
   1cd9c:	72da      	strb	r2, [r3, #11]
			if(user_settings_parameter_struct.autoStartAddress)
   1cd9e:	e026      	b.n	1cdee <buttonFilter+0x122>
			}
		}
		else if(lastButtonEvent==BTNEVENTLCDSHOW && LCDSHOW_BUTTON_INPUT_COMES)
   1cda0:	4b14      	ldr	r3, [pc, #80]	; (1cdf4 <buttonFilter+0x128>)
   1cda2:	781b      	ldrb	r3, [r3, #0]
   1cda4:	b2db      	uxtb	r3, r3
   1cda6:	2b04      	cmp	r3, #4
   1cda8:	d11d      	bne.n	1cde6 <buttonFilter+0x11a>
   1cdaa:	2029      	movs	r0, #41	; 0x29
   1cdac:	4b12      	ldr	r3, [pc, #72]	; (1cdf8 <buttonFilter+0x12c>)
   1cdae:	4798      	blx	r3
   1cdb0:	0003      	movs	r3, r0
   1cdb2:	001a      	movs	r2, r3
   1cdb4:	2301      	movs	r3, #1
   1cdb6:	4053      	eors	r3, r2
   1cdb8:	b2db      	uxtb	r3, r3
   1cdba:	2b00      	cmp	r3, #0
   1cdbc:	d013      	beq.n	1cde6 <buttonFilter+0x11a>
		{
			lastButtonEvent=0;
   1cdbe:	4b0d      	ldr	r3, [pc, #52]	; (1cdf4 <buttonFilter+0x128>)
   1cdc0:	2200      	movs	r2, #0
   1cdc2:	701a      	strb	r2, [r3, #0]
			setDisplayPause(!varPauseDisplay);
   1cdc4:	4b14      	ldr	r3, [pc, #80]	; (1ce18 <buttonFilter+0x14c>)
   1cdc6:	781b      	ldrb	r3, [r3, #0]
   1cdc8:	b2db      	uxtb	r3, r3
   1cdca:	1e5a      	subs	r2, r3, #1
   1cdcc:	4193      	sbcs	r3, r2
   1cdce:	b2db      	uxtb	r3, r3
   1cdd0:	2201      	movs	r2, #1
   1cdd2:	4053      	eors	r3, r2
   1cdd4:	b2db      	uxtb	r3, r3
   1cdd6:	1c1a      	adds	r2, r3, #0
   1cdd8:	2301      	movs	r3, #1
   1cdda:	4013      	ands	r3, r2
   1cddc:	b2db      	uxtb	r3, r3
   1cdde:	0018      	movs	r0, r3
   1cde0:	4b0e      	ldr	r3, [pc, #56]	; (1ce1c <buttonFilter+0x150>)
   1cde2:	4798      	blx	r3
   1cde4:	e003      	b.n	1cdee <buttonFilter+0x122>
		}
		else
		{
			lastButtonEvent=0;
   1cde6:	4b03      	ldr	r3, [pc, #12]	; (1cdf4 <buttonFilter+0x128>)
   1cde8:	2200      	movs	r2, #0
   1cdea:	701a      	strb	r2, [r3, #0]
		}
	}
}
   1cdec:	e7ff      	b.n	1cdee <buttonFilter+0x122>
   1cdee:	46c0      	nop			; (mov r8, r8)
   1cdf0:	46bd      	mov	sp, r7
   1cdf2:	bd80      	pop	{r7, pc}
   1cdf4:	20000780 	.word	0x20000780
   1cdf8:	00019549 	.word	0x00019549
   1cdfc:	0001b641 	.word	0x0001b641
   1ce00:	0001b829 	.word	0x0001b829
   1ce04:	20000654 	.word	0x20000654
   1ce08:	000112a9 	.word	0x000112a9
   1ce0c:	0001b22d 	.word	0x0001b22d
   1ce10:	00014b6d 	.word	0x00014b6d
   1ce14:	20000718 	.word	0x20000718
   1ce18:	200007ac 	.word	0x200007ac
   1ce1c:	0001ce21 	.word	0x0001ce21

0001ce20 <setDisplayPause>:
//}
//}


void setDisplayPause(bool value)
{
   1ce20:	b580      	push	{r7, lr}
   1ce22:	b082      	sub	sp, #8
   1ce24:	af00      	add	r7, sp, #0
   1ce26:	0002      	movs	r2, r0
   1ce28:	1dfb      	adds	r3, r7, #7
   1ce2a:	701a      	strb	r2, [r3, #0]
	varPauseDisplay=value;
   1ce2c:	4b03      	ldr	r3, [pc, #12]	; (1ce3c <setDisplayPause+0x1c>)
   1ce2e:	1dfa      	adds	r2, r7, #7
   1ce30:	7812      	ldrb	r2, [r2, #0]
   1ce32:	701a      	strb	r2, [r3, #0]
}
   1ce34:	46c0      	nop			; (mov r8, r8)
   1ce36:	46bd      	mov	sp, r7
   1ce38:	b002      	add	sp, #8
   1ce3a:	bd80      	pop	{r7, pc}
   1ce3c:	200007ac 	.word	0x200007ac

0001ce40 <setCallStateOnLCD>:

void setCallStateOnLCD(uint8_t callState,char* number,bool usePrevious)
{
   1ce40:	b580      	push	{r7, lr}
   1ce42:	b082      	sub	sp, #8
   1ce44:	af00      	add	r7, sp, #0
   1ce46:	6039      	str	r1, [r7, #0]
   1ce48:	0011      	movs	r1, r2
   1ce4a:	1dfb      	adds	r3, r7, #7
   1ce4c:	1c02      	adds	r2, r0, #0
   1ce4e:	701a      	strb	r2, [r3, #0]
   1ce50:	1dbb      	adds	r3, r7, #6
   1ce52:	1c0a      	adds	r2, r1, #0
   1ce54:	701a      	strb	r2, [r3, #0]
	callStateOnLCD = callState;
   1ce56:	4b10      	ldr	r3, [pc, #64]	; (1ce98 <setCallStateOnLCD+0x58>)
   1ce58:	1dfa      	adds	r2, r7, #7
   1ce5a:	7812      	ldrb	r2, [r2, #0]
   1ce5c:	701a      	strb	r2, [r3, #0]

	if(!usePrevious)
   1ce5e:	1dbb      	adds	r3, r7, #6
   1ce60:	781b      	ldrb	r3, [r3, #0]
   1ce62:	2201      	movs	r2, #1
   1ce64:	4053      	eors	r3, r2
   1ce66:	b2db      	uxtb	r3, r3
   1ce68:	2b00      	cmp	r3, #0
   1ce6a:	d010      	beq.n	1ce8e <setCallStateOnLCD+0x4e>
	{
		memset(numberOnLCD, '\0', sizeof(numberOnLCD));
   1ce6c:	4b0b      	ldr	r3, [pc, #44]	; (1ce9c <setCallStateOnLCD+0x5c>)
   1ce6e:	2214      	movs	r2, #20
   1ce70:	2100      	movs	r1, #0
   1ce72:	0018      	movs	r0, r3
   1ce74:	4b0a      	ldr	r3, [pc, #40]	; (1cea0 <setCallStateOnLCD+0x60>)
   1ce76:	4798      	blx	r3
		if(callStateOnLCD!=LCDCALLSTATE_IDLE)
   1ce78:	4b07      	ldr	r3, [pc, #28]	; (1ce98 <setCallStateOnLCD+0x58>)
   1ce7a:	781b      	ldrb	r3, [r3, #0]
   1ce7c:	b2db      	uxtb	r3, r3
   1ce7e:	2b00      	cmp	r3, #0
   1ce80:	d005      	beq.n	1ce8e <setCallStateOnLCD+0x4e>
		{
			strcpy(numberOnLCD,number);
   1ce82:	683a      	ldr	r2, [r7, #0]
   1ce84:	4b05      	ldr	r3, [pc, #20]	; (1ce9c <setCallStateOnLCD+0x5c>)
   1ce86:	0011      	movs	r1, r2
   1ce88:	0018      	movs	r0, r3
   1ce8a:	4b06      	ldr	r3, [pc, #24]	; (1cea4 <setCallStateOnLCD+0x64>)
   1ce8c:	4798      	blx	r3
			//sprintf(numberOnLCD,"%s",number);
		}
	}
}
   1ce8e:	46c0      	nop			; (mov r8, r8)
   1ce90:	46bd      	mov	sp, r7
   1ce92:	b002      	add	sp, #8
   1ce94:	bd80      	pop	{r7, pc}
   1ce96:	46c0      	nop			; (mov r8, r8)
   1ce98:	200007d2 	.word	0x200007d2
   1ce9c:	20000844 	.word	0x20000844
   1cea0:	000289e3 	.word	0x000289e3
   1cea4:	00028c63 	.word	0x00028c63

0001cea8 <vTask_50ms_Timer>:

static void vTask_50ms_Timer(void *params)
{
   1cea8:	b590      	push	{r4, r7, lr}
   1ceaa:	b085      	sub	sp, #20
   1ceac:	af00      	add	r7, sp, #0
   1ceae:	6078      	str	r0, [r7, #4]
	TickType_t xLastExecutionGsm_Send_Time;
	xLastExecutionGsm_Send_Time = xTaskGetTickCount();
   1ceb0:	4b17      	ldr	r3, [pc, #92]	; (1cf10 <vTask_50ms_Timer+0x68>)
   1ceb2:	4798      	blx	r3
   1ceb4:	0003      	movs	r3, r0
   1ceb6:	60fb      	str	r3, [r7, #12]
	//--------------------------------
	for( ;; )
	{
		vTaskDelayUntil(&xLastExecutionGsm_Send_Time, (25/portTICK_PERIOD_MS));
   1ceb8:	230c      	movs	r3, #12
   1ceba:	18fb      	adds	r3, r7, r3
   1cebc:	2119      	movs	r1, #25
   1cebe:	0018      	movs	r0, r3
   1cec0:	4b14      	ldr	r3, [pc, #80]	; (1cf14 <vTask_50ms_Timer+0x6c>)
   1cec2:	4798      	blx	r3
		if(buttonEventOccured)
   1cec4:	4b14      	ldr	r3, [pc, #80]	; (1cf18 <vTask_50ms_Timer+0x70>)
   1cec6:	781b      	ldrb	r3, [r3, #0]
   1cec8:	b2db      	uxtb	r3, r3
   1ceca:	2b00      	cmp	r3, #0
   1cecc:	d001      	beq.n	1ced2 <vTask_50ms_Timer+0x2a>
		{
			operateOnButtonEvent();
   1cece:	4b13      	ldr	r3, [pc, #76]	; (1cf1c <vTask_50ms_Timer+0x74>)
   1ced0:	4798      	blx	r3
		}

		xSemaphoreTake(xButton_Semaphore,portMAX_DELAY);
   1ced2:	4b13      	ldr	r3, [pc, #76]	; (1cf20 <vTask_50ms_Timer+0x78>)
   1ced4:	681a      	ldr	r2, [r3, #0]
   1ced6:	2301      	movs	r3, #1
   1ced8:	425b      	negs	r3, r3
   1ceda:	0019      	movs	r1, r3
   1cedc:	0010      	movs	r0, r2
   1cede:	4b11      	ldr	r3, [pc, #68]	; (1cf24 <vTask_50ms_Timer+0x7c>)
   1cee0:	4798      	blx	r3
		if(lastButtonEvent>0)
   1cee2:	4b11      	ldr	r3, [pc, #68]	; (1cf28 <vTask_50ms_Timer+0x80>)
   1cee4:	781b      	ldrb	r3, [r3, #0]
   1cee6:	b2db      	uxtb	r3, r3
   1cee8:	2b00      	cmp	r3, #0
   1ceea:	d008      	beq.n	1cefe <vTask_50ms_Timer+0x56>
		{
			taskPSet=true;
   1ceec:	4b0f      	ldr	r3, [pc, #60]	; (1cf2c <vTask_50ms_Timer+0x84>)
   1ceee:	2201      	movs	r2, #1
   1cef0:	701a      	strb	r2, [r3, #0]
			vTaskPrioritySet(motorTask,2);
   1cef2:	4b0f      	ldr	r3, [pc, #60]	; (1cf30 <vTask_50ms_Timer+0x88>)
   1cef4:	681b      	ldr	r3, [r3, #0]
   1cef6:	2102      	movs	r1, #2
   1cef8:	0018      	movs	r0, r3
   1cefa:	4b0e      	ldr	r3, [pc, #56]	; (1cf34 <vTask_50ms_Timer+0x8c>)
   1cefc:	4798      	blx	r3
		}
		xSemaphoreGive(xButton_Semaphore);
   1cefe:	4b08      	ldr	r3, [pc, #32]	; (1cf20 <vTask_50ms_Timer+0x78>)
   1cf00:	6818      	ldr	r0, [r3, #0]
   1cf02:	2300      	movs	r3, #0
   1cf04:	2200      	movs	r2, #0
   1cf06:	2100      	movs	r1, #0
   1cf08:	4c0b      	ldr	r4, [pc, #44]	; (1cf38 <vTask_50ms_Timer+0x90>)
   1cf0a:	47a0      	blx	r4
		vTaskDelayUntil(&xLastExecutionGsm_Send_Time, (25/portTICK_PERIOD_MS));
   1cf0c:	e7d4      	b.n	1ceb8 <vTask_50ms_Timer+0x10>
   1cf0e:	46c0      	nop			; (mov r8, r8)
   1cf10:	000200dd 	.word	0x000200dd
   1cf14:	0001fcb1 	.word	0x0001fcb1
   1cf18:	2000079f 	.word	0x2000079f
   1cf1c:	0001cc11 	.word	0x0001cc11
   1cf20:	20000234 	.word	0x20000234
   1cf24:	0001f471 	.word	0x0001f471
   1cf28:	20000780 	.word	0x20000780
   1cf2c:	20000880 	.word	0x20000880
   1cf30:	20000238 	.word	0x20000238
   1cf34:	0001fdd5 	.word	0x0001fdd5
   1cf38:	0001efd1 	.word	0x0001efd1

0001cf3c <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
   1cf3c:	b580      	push	{r7, lr}
   1cf3e:	b082      	sub	sp, #8
   1cf40:	af00      	add	r7, sp, #0
   1cf42:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
   1cf44:	687b      	ldr	r3, [r7, #4]
   1cf46:	2200      	movs	r2, #0
   1cf48:	701a      	strb	r2, [r3, #0]
}
   1cf4a:	46c0      	nop			; (mov r8, r8)
   1cf4c:	46bd      	mov	sp, r7
   1cf4e:	b002      	add	sp, #8
   1cf50:	bd80      	pop	{r7, pc}
	...

0001cf54 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
   1cf54:	b580      	push	{r7, lr}
   1cf56:	b082      	sub	sp, #8
   1cf58:	af00      	add	r7, sp, #0
   1cf5a:	0002      	movs	r2, r0
   1cf5c:	6039      	str	r1, [r7, #0]
   1cf5e:	1dfb      	adds	r3, r7, #7
   1cf60:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   1cf62:	1dfb      	adds	r3, r7, #7
   1cf64:	781b      	ldrb	r3, [r3, #0]
   1cf66:	2b01      	cmp	r3, #1
   1cf68:	d00a      	beq.n	1cf80 <system_apb_clock_set_mask+0x2c>
   1cf6a:	2b02      	cmp	r3, #2
   1cf6c:	d00f      	beq.n	1cf8e <system_apb_clock_set_mask+0x3a>
   1cf6e:	2b00      	cmp	r3, #0
   1cf70:	d114      	bne.n	1cf9c <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
   1cf72:	4b0e      	ldr	r3, [pc, #56]	; (1cfac <system_apb_clock_set_mask+0x58>)
   1cf74:	4a0d      	ldr	r2, [pc, #52]	; (1cfac <system_apb_clock_set_mask+0x58>)
   1cf76:	6991      	ldr	r1, [r2, #24]
   1cf78:	683a      	ldr	r2, [r7, #0]
   1cf7a:	430a      	orrs	r2, r1
   1cf7c:	619a      	str	r2, [r3, #24]
			break;
   1cf7e:	e00f      	b.n	1cfa0 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
   1cf80:	4b0a      	ldr	r3, [pc, #40]	; (1cfac <system_apb_clock_set_mask+0x58>)
   1cf82:	4a0a      	ldr	r2, [pc, #40]	; (1cfac <system_apb_clock_set_mask+0x58>)
   1cf84:	69d1      	ldr	r1, [r2, #28]
   1cf86:	683a      	ldr	r2, [r7, #0]
   1cf88:	430a      	orrs	r2, r1
   1cf8a:	61da      	str	r2, [r3, #28]
			break;
   1cf8c:	e008      	b.n	1cfa0 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
   1cf8e:	4b07      	ldr	r3, [pc, #28]	; (1cfac <system_apb_clock_set_mask+0x58>)
   1cf90:	4a06      	ldr	r2, [pc, #24]	; (1cfac <system_apb_clock_set_mask+0x58>)
   1cf92:	6a11      	ldr	r1, [r2, #32]
   1cf94:	683a      	ldr	r2, [r7, #0]
   1cf96:	430a      	orrs	r2, r1
   1cf98:	621a      	str	r2, [r3, #32]
			break;
   1cf9a:	e001      	b.n	1cfa0 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
   1cf9c:	2317      	movs	r3, #23
   1cf9e:	e000      	b.n	1cfa2 <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
   1cfa0:	2300      	movs	r3, #0
}
   1cfa2:	0018      	movs	r0, r3
   1cfa4:	46bd      	mov	sp, r7
   1cfa6:	b002      	add	sp, #8
   1cfa8:	bd80      	pop	{r7, pc}
   1cfaa:	46c0      	nop			; (mov r8, r8)
   1cfac:	40000400 	.word	0x40000400

0001cfb0 <ac_is_syncing>:
{
   1cfb0:	b580      	push	{r7, lr}
   1cfb2:	b084      	sub	sp, #16
   1cfb4:	af00      	add	r7, sp, #0
   1cfb6:	6078      	str	r0, [r7, #4]
	Ac *const ac_module = module_inst->hw;
   1cfb8:	687b      	ldr	r3, [r7, #4]
   1cfba:	681b      	ldr	r3, [r3, #0]
   1cfbc:	60fb      	str	r3, [r7, #12]
	if (ac_module->STATUSB.reg & AC_STATUSB_SYNCBUSY) {
   1cfbe:	68fb      	ldr	r3, [r7, #12]
   1cfc0:	7a5b      	ldrb	r3, [r3, #9]
   1cfc2:	b2db      	uxtb	r3, r3
   1cfc4:	b25b      	sxtb	r3, r3
   1cfc6:	2b00      	cmp	r3, #0
   1cfc8:	da01      	bge.n	1cfce <ac_is_syncing+0x1e>
		return true;
   1cfca:	2301      	movs	r3, #1
   1cfcc:	e000      	b.n	1cfd0 <ac_is_syncing+0x20>
	return false;
   1cfce:	2300      	movs	r3, #0
}
   1cfd0:	0018      	movs	r0, r3
   1cfd2:	46bd      	mov	sp, r7
   1cfd4:	b004      	add	sp, #16
   1cfd6:	bd80      	pop	{r7, pc}

0001cfd8 <_ac_set_config>:
#include "ac.h"

static enum status_code _ac_set_config(
		struct ac_module *const module_inst,
		struct ac_config *const config)
{
   1cfd8:	b580      	push	{r7, lr}
   1cfda:	b086      	sub	sp, #24
   1cfdc:	af00      	add	r7, sp, #0
   1cfde:	6078      	str	r0, [r7, #4]
   1cfe0:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(config);

	Ac *const ac_module = module_inst->hw;
   1cfe2:	687b      	ldr	r3, [r7, #4]
   1cfe4:	681b      	ldr	r3, [r3, #0]
   1cfe6:	60fb      	str	r3, [r7, #12]

	/* Use a temporary register for computing the control bits */
	uint32_t ctrla_temp = 0;
   1cfe8:	2300      	movs	r3, #0
   1cfea:	617b      	str	r3, [r7, #20]

	/* Check if the comparators should be enabled during sleep */
	for (uint32_t i = 0; i < AC_PAIRS; i++) {
   1cfec:	2300      	movs	r3, #0
   1cfee:	613b      	str	r3, [r7, #16]
   1cff0:	e00f      	b.n	1d012 <_ac_set_config+0x3a>
		if (config->run_in_standby[i] == true) {
   1cff2:	683a      	ldr	r2, [r7, #0]
   1cff4:	693b      	ldr	r3, [r7, #16]
   1cff6:	18d3      	adds	r3, r2, r3
   1cff8:	781b      	ldrb	r3, [r3, #0]
   1cffa:	2b00      	cmp	r3, #0
   1cffc:	d006      	beq.n	1d00c <_ac_set_config+0x34>
			ctrla_temp |= (AC_CTRLA_RUNSTDBY_Msk << i);
   1cffe:	2204      	movs	r2, #4
   1d000:	693b      	ldr	r3, [r7, #16]
   1d002:	409a      	lsls	r2, r3
   1d004:	0013      	movs	r3, r2
   1d006:	697a      	ldr	r2, [r7, #20]
   1d008:	4313      	orrs	r3, r2
   1d00a:	617b      	str	r3, [r7, #20]
	for (uint32_t i = 0; i < AC_PAIRS; i++) {
   1d00c:	693b      	ldr	r3, [r7, #16]
   1d00e:	3301      	adds	r3, #1
   1d010:	613b      	str	r3, [r7, #16]
   1d012:	693b      	ldr	r3, [r7, #16]
   1d014:	2b00      	cmp	r3, #0
   1d016:	d0ec      	beq.n	1cff2 <_ac_set_config+0x1a>
		}
	}

	while (ac_is_syncing(module_inst)) {
   1d018:	46c0      	nop			; (mov r8, r8)
   1d01a:	687b      	ldr	r3, [r7, #4]
   1d01c:	0018      	movs	r0, r3
   1d01e:	4b06      	ldr	r3, [pc, #24]	; (1d038 <_ac_set_config+0x60>)
   1d020:	4798      	blx	r3
   1d022:	1e03      	subs	r3, r0, #0
   1d024:	d1f9      	bne.n	1d01a <_ac_set_config+0x42>
		/* Wait until synchronization is complete */
	}

	/* Write the new comparator module control configuration */
	ac_module->CTRLA.reg = ctrla_temp;
   1d026:	697b      	ldr	r3, [r7, #20]
   1d028:	b2da      	uxtb	r2, r3
   1d02a:	68fb      	ldr	r3, [r7, #12]
   1d02c:	701a      	strb	r2, [r3, #0]

	return STATUS_OK;
   1d02e:	2300      	movs	r3, #0
}
   1d030:	0018      	movs	r0, r3
   1d032:	46bd      	mov	sp, r7
   1d034:	b006      	add	sp, #24
   1d036:	bd80      	pop	{r7, pc}
   1d038:	0001cfb1 	.word	0x0001cfb1

0001d03c <ac_init>:
 */
enum status_code ac_init(
		struct ac_module *const module_inst,
		Ac *const hw,
		struct ac_config *const config)
{
   1d03c:	b580      	push	{r7, lr}
   1d03e:	b086      	sub	sp, #24
   1d040:	af00      	add	r7, sp, #0
   1d042:	60f8      	str	r0, [r7, #12]
   1d044:	60b9      	str	r1, [r7, #8]
   1d046:	607a      	str	r2, [r7, #4]
	Assert(module_inst);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module_inst->hw = hw;
   1d048:	68fb      	ldr	r3, [r7, #12]
   1d04a:	68ba      	ldr	r2, [r7, #8]
   1d04c:	601a      	str	r2, [r3, #0]

	/* Turn on the digital interface clock and GCLK */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   1d04e:	2314      	movs	r3, #20
   1d050:	18fb      	adds	r3, r7, r3
   1d052:	0018      	movs	r0, r3
   1d054:	4b2a      	ldr	r3, [pc, #168]	; (1d100 <ac_init+0xc4>)
   1d056:	4798      	blx	r3

	if (hw == AC) {
   1d058:	68bb      	ldr	r3, [r7, #8]
   1d05a:	4a2a      	ldr	r2, [pc, #168]	; (1d104 <ac_init+0xc8>)
   1d05c:	4293      	cmp	r3, r2
   1d05e:	d121      	bne.n	1d0a4 <ac_init+0x68>
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_AC);
   1d060:	2380      	movs	r3, #128	; 0x80
   1d062:	029b      	lsls	r3, r3, #10
   1d064:	0019      	movs	r1, r3
   1d066:	2002      	movs	r0, #2
   1d068:	4b27      	ldr	r3, [pc, #156]	; (1d108 <ac_init+0xcc>)
   1d06a:	4798      	blx	r3
		gclk_chan_conf.source_generator = config->dig_source_generator;
   1d06c:	687b      	ldr	r3, [r7, #4]
   1d06e:	785a      	ldrb	r2, [r3, #1]
   1d070:	2314      	movs	r3, #20
   1d072:	18fb      	adds	r3, r7, r3
   1d074:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(AC_GCLK_ID_DIG, &gclk_chan_conf);
   1d076:	2314      	movs	r3, #20
   1d078:	18fb      	adds	r3, r7, r3
   1d07a:	0019      	movs	r1, r3
   1d07c:	201f      	movs	r0, #31
   1d07e:	4b23      	ldr	r3, [pc, #140]	; (1d10c <ac_init+0xd0>)
   1d080:	4798      	blx	r3
		system_gclk_chan_enable(AC_GCLK_ID_DIG);
   1d082:	201f      	movs	r0, #31
   1d084:	4b22      	ldr	r3, [pc, #136]	; (1d110 <ac_init+0xd4>)
   1d086:	4798      	blx	r3
		gclk_chan_conf.source_generator = config->ana_source_generator;
   1d088:	687b      	ldr	r3, [r7, #4]
   1d08a:	789a      	ldrb	r2, [r3, #2]
   1d08c:	2314      	movs	r3, #20
   1d08e:	18fb      	adds	r3, r7, r3
   1d090:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(AC_GCLK_ID_ANA, &gclk_chan_conf);
   1d092:	2314      	movs	r3, #20
   1d094:	18fb      	adds	r3, r7, r3
   1d096:	0019      	movs	r1, r3
   1d098:	2020      	movs	r0, #32
   1d09a:	4b1c      	ldr	r3, [pc, #112]	; (1d10c <ac_init+0xd0>)
   1d09c:	4798      	blx	r3
		system_gclk_chan_enable(AC_GCLK_ID_ANA);
   1d09e:	2020      	movs	r0, #32
   1d0a0:	4b1b      	ldr	r3, [pc, #108]	; (1d110 <ac_init+0xd4>)
   1d0a2:	4798      	blx	r3
#  error This driver is not support more than three AC instances.
#endif

#if AC_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint8_t i = 0; i < AC_CALLBACK_N; i++) {
   1d0a4:	2317      	movs	r3, #23
   1d0a6:	18fb      	adds	r3, r7, r3
   1d0a8:	2200      	movs	r2, #0
   1d0aa:	701a      	strb	r2, [r3, #0]
   1d0ac:	e00f      	b.n	1d0ce <ac_init+0x92>
		module_inst->callback[i]        = NULL;
   1d0ae:	2317      	movs	r3, #23
   1d0b0:	18fb      	adds	r3, r7, r3
   1d0b2:	781b      	ldrb	r3, [r3, #0]
   1d0b4:	68fa      	ldr	r2, [r7, #12]
   1d0b6:	009b      	lsls	r3, r3, #2
   1d0b8:	18d3      	adds	r3, r2, r3
   1d0ba:	3304      	adds	r3, #4
   1d0bc:	2200      	movs	r2, #0
   1d0be:	601a      	str	r2, [r3, #0]
	for (uint8_t i = 0; i < AC_CALLBACK_N; i++) {
   1d0c0:	2317      	movs	r3, #23
   1d0c2:	18fb      	adds	r3, r7, r3
   1d0c4:	781a      	ldrb	r2, [r3, #0]
   1d0c6:	2317      	movs	r3, #23
   1d0c8:	18fb      	adds	r3, r7, r3
   1d0ca:	3201      	adds	r2, #1
   1d0cc:	701a      	strb	r2, [r3, #0]
   1d0ce:	2317      	movs	r3, #23
   1d0d0:	18fb      	adds	r3, r7, r3
   1d0d2:	781b      	ldrb	r3, [r3, #0]
   1d0d4:	2b04      	cmp	r3, #4
   1d0d6:	d9ea      	bls.n	1d0ae <ac_init+0x72>
	}

	/* Initialize software flags*/
	module_inst->register_callback_mask = 0x00;
   1d0d8:	68fb      	ldr	r3, [r7, #12]
   1d0da:	2200      	movs	r2, #0
   1d0dc:	761a      	strb	r2, [r3, #24]
	module_inst->enable_callback_mask   = 0x00;
   1d0de:	68fb      	ldr	r3, [r7, #12]
   1d0e0:	2200      	movs	r2, #0
   1d0e2:	765a      	strb	r2, [r3, #25]

#  if (AC_INST_NUM == 1)
	_ac_instance[0] = module_inst;
   1d0e4:	4b0b      	ldr	r3, [pc, #44]	; (1d114 <ac_init+0xd8>)
   1d0e6:	68fa      	ldr	r2, [r7, #12]
   1d0e8:	601a      	str	r2, [r3, #0]
	_ac_instance[_ac_get_inst_index(hw)] = module_inst;
#  endif
#endif

	/* Write configuration to module */
	return _ac_set_config(module_inst, config);
   1d0ea:	687a      	ldr	r2, [r7, #4]
   1d0ec:	68fb      	ldr	r3, [r7, #12]
   1d0ee:	0011      	movs	r1, r2
   1d0f0:	0018      	movs	r0, r3
   1d0f2:	4b09      	ldr	r3, [pc, #36]	; (1d118 <ac_init+0xdc>)
   1d0f4:	4798      	blx	r3
   1d0f6:	0003      	movs	r3, r0
}
   1d0f8:	0018      	movs	r0, r3
   1d0fa:	46bd      	mov	sp, r7
   1d0fc:	b006      	add	sp, #24
   1d0fe:	bd80      	pop	{r7, pc}
   1d100:	0001cf3d 	.word	0x0001cf3d
   1d104:	42004400 	.word	0x42004400
   1d108:	0001cf55 	.word	0x0001cf55
   1d10c:	00024625 	.word	0x00024625
   1d110:	00024669 	.word	0x00024669
   1d114:	20000984 	.word	0x20000984
   1d118:	0001cfd9 	.word	0x0001cfd9

0001d11c <ac_chan_set_config>:
 */
enum status_code ac_chan_set_config(
		struct ac_module *const module_inst,
		const enum ac_chan_channel channel,
		struct ac_chan_config *const config)
{
   1d11c:	b580      	push	{r7, lr}
   1d11e:	b086      	sub	sp, #24
   1d120:	af00      	add	r7, sp, #0
   1d122:	60f8      	str	r0, [r7, #12]
   1d124:	607a      	str	r2, [r7, #4]
   1d126:	230b      	movs	r3, #11
   1d128:	18fb      	adds	r3, r7, r3
   1d12a:	1c0a      	adds	r2, r1, #0
   1d12c:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(config);

	Ac *const ac_module = module_inst->hw;
   1d12e:	68fb      	ldr	r3, [r7, #12]
   1d130:	681b      	ldr	r3, [r3, #0]
   1d132:	613b      	str	r3, [r7, #16]

	/* Use a temporary variable to compute the comparator configuration */
	uint32_t compctrl_temp = 0;
   1d134:	2300      	movs	r3, #0
   1d136:	617b      	str	r3, [r7, #20]

	/* Enable output filter mode */
	compctrl_temp |= config->filter;
   1d138:	687b      	ldr	r3, [r7, #4]
   1d13a:	685b      	ldr	r3, [r3, #4]
   1d13c:	697a      	ldr	r2, [r7, #20]
   1d13e:	4313      	orrs	r3, r2
   1d140:	617b      	str	r3, [r7, #20]

	/* Enable output hysteresis if required */
	if (config->enable_hysteresis == true) {
   1d142:	687b      	ldr	r3, [r7, #4]
   1d144:	7a1b      	ldrb	r3, [r3, #8]
   1d146:	2b00      	cmp	r3, #0
   1d148:	d004      	beq.n	1d154 <ac_chan_set_config+0x38>
		compctrl_temp |= AC_COMPCTRL_HYST;
   1d14a:	697b      	ldr	r3, [r7, #20]
   1d14c:	2280      	movs	r2, #128	; 0x80
   1d14e:	0312      	lsls	r2, r2, #12
   1d150:	4313      	orrs	r3, r2
   1d152:	617b      	str	r3, [r7, #20]
	}

	/* Set output signal routing mode */
	compctrl_temp |= config->output_mode;
   1d154:	687b      	ldr	r3, [r7, #4]
   1d156:	68db      	ldr	r3, [r3, #12]
   1d158:	697a      	ldr	r2, [r7, #20]
   1d15a:	4313      	orrs	r3, r2
   1d15c:	617b      	str	r3, [r7, #20]

	/* Configure comparator positive and negative pin MUX configurations */
	compctrl_temp |=
			(uint32_t)config->positive_input |
   1d15e:	687b      	ldr	r3, [r7, #4]
   1d160:	8a1a      	ldrh	r2, [r3, #16]
			(uint32_t)config->negative_input;
   1d162:	687b      	ldr	r3, [r7, #4]
   1d164:	8a5b      	ldrh	r3, [r3, #18]
			(uint32_t)config->positive_input |
   1d166:	4313      	orrs	r3, r2
   1d168:	b29b      	uxth	r3, r3
   1d16a:	001a      	movs	r2, r3
	compctrl_temp |=
   1d16c:	697b      	ldr	r3, [r7, #20]
   1d16e:	4313      	orrs	r3, r2
   1d170:	617b      	str	r3, [r7, #20]

	/* Set sampling mode (single shot or continuous) */
	compctrl_temp |= config->sample_mode;
   1d172:	687b      	ldr	r3, [r7, #4]
   1d174:	781b      	ldrb	r3, [r3, #0]
   1d176:	001a      	movs	r2, r3
   1d178:	697b      	ldr	r3, [r7, #20]
   1d17a:	4313      	orrs	r3, r2
   1d17c:	617b      	str	r3, [r7, #20]

	/* Set channel interrupt selection */
	compctrl_temp |= config->interrupt_selection;
   1d17e:	687b      	ldr	r3, [r7, #4]
   1d180:	7d5b      	ldrb	r3, [r3, #21]
   1d182:	001a      	movs	r2, r3
   1d184:	697b      	ldr	r3, [r7, #20]
   1d186:	4313      	orrs	r3, r2
   1d188:	617b      	str	r3, [r7, #20]

	while (ac_is_syncing(module_inst)) {
   1d18a:	46c0      	nop			; (mov r8, r8)
   1d18c:	68fb      	ldr	r3, [r7, #12]
   1d18e:	0018      	movs	r0, r3
   1d190:	4b0e      	ldr	r3, [pc, #56]	; (1d1cc <ac_chan_set_config+0xb0>)
   1d192:	4798      	blx	r3
   1d194:	1e03      	subs	r3, r0, #0
   1d196:	d1f9      	bne.n	1d18c <ac_chan_set_config+0x70>
		/* Wait until synchronization is complete */
	}

	/* Write the final configuration to the module's control register */
	ac_module->COMPCTRL[(uint8_t)channel].reg = compctrl_temp;
   1d198:	230b      	movs	r3, #11
   1d19a:	18fb      	adds	r3, r7, r3
   1d19c:	781a      	ldrb	r2, [r3, #0]
   1d19e:	693b      	ldr	r3, [r7, #16]
   1d1a0:	3204      	adds	r2, #4
   1d1a2:	0092      	lsls	r2, r2, #2
   1d1a4:	6979      	ldr	r1, [r7, #20]
   1d1a6:	50d1      	str	r1, [r2, r3]

	/* Configure VCC voltage scaling for the comparator */
	ac_module->SCALER[(uint8_t)channel].reg   = config->vcc_scale_factor - 1;
   1d1a8:	230b      	movs	r3, #11
   1d1aa:	18fb      	adds	r3, r7, r3
   1d1ac:	781b      	ldrb	r3, [r3, #0]
   1d1ae:	687a      	ldr	r2, [r7, #4]
   1d1b0:	7d12      	ldrb	r2, [r2, #20]
   1d1b2:	3a01      	subs	r2, #1
   1d1b4:	b2d0      	uxtb	r0, r2
   1d1b6:	693a      	ldr	r2, [r7, #16]
   1d1b8:	2120      	movs	r1, #32
   1d1ba:	18d3      	adds	r3, r2, r3
   1d1bc:	185b      	adds	r3, r3, r1
   1d1be:	1c02      	adds	r2, r0, #0
   1d1c0:	701a      	strb	r2, [r3, #0]

	return STATUS_OK;
   1d1c2:	2300      	movs	r3, #0
}
   1d1c4:	0018      	movs	r0, r3
   1d1c6:	46bd      	mov	sp, r7
   1d1c8:	b006      	add	sp, #24
   1d1ca:	bd80      	pop	{r7, pc}
   1d1cc:	0001cfb1 	.word	0x0001cfb1

0001d1d0 <system_gclk_chan_get_config_defaults>:
{
   1d1d0:	b580      	push	{r7, lr}
   1d1d2:	b082      	sub	sp, #8
   1d1d4:	af00      	add	r7, sp, #0
   1d1d6:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   1d1d8:	687b      	ldr	r3, [r7, #4]
   1d1da:	2200      	movs	r2, #0
   1d1dc:	701a      	strb	r2, [r3, #0]
}
   1d1de:	46c0      	nop			; (mov r8, r8)
   1d1e0:	46bd      	mov	sp, r7
   1d1e2:	b002      	add	sp, #8
   1d1e4:	bd80      	pop	{r7, pc}
	...

0001d1e8 <system_apb_clock_set_mask>:
{
   1d1e8:	b580      	push	{r7, lr}
   1d1ea:	b082      	sub	sp, #8
   1d1ec:	af00      	add	r7, sp, #0
   1d1ee:	0002      	movs	r2, r0
   1d1f0:	6039      	str	r1, [r7, #0]
   1d1f2:	1dfb      	adds	r3, r7, #7
   1d1f4:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   1d1f6:	1dfb      	adds	r3, r7, #7
   1d1f8:	781b      	ldrb	r3, [r3, #0]
   1d1fa:	2b01      	cmp	r3, #1
   1d1fc:	d00a      	beq.n	1d214 <system_apb_clock_set_mask+0x2c>
   1d1fe:	2b02      	cmp	r3, #2
   1d200:	d00f      	beq.n	1d222 <system_apb_clock_set_mask+0x3a>
   1d202:	2b00      	cmp	r3, #0
   1d204:	d114      	bne.n	1d230 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   1d206:	4b0e      	ldr	r3, [pc, #56]	; (1d240 <system_apb_clock_set_mask+0x58>)
   1d208:	4a0d      	ldr	r2, [pc, #52]	; (1d240 <system_apb_clock_set_mask+0x58>)
   1d20a:	6991      	ldr	r1, [r2, #24]
   1d20c:	683a      	ldr	r2, [r7, #0]
   1d20e:	430a      	orrs	r2, r1
   1d210:	619a      	str	r2, [r3, #24]
			break;
   1d212:	e00f      	b.n	1d234 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   1d214:	4b0a      	ldr	r3, [pc, #40]	; (1d240 <system_apb_clock_set_mask+0x58>)
   1d216:	4a0a      	ldr	r2, [pc, #40]	; (1d240 <system_apb_clock_set_mask+0x58>)
   1d218:	69d1      	ldr	r1, [r2, #28]
   1d21a:	683a      	ldr	r2, [r7, #0]
   1d21c:	430a      	orrs	r2, r1
   1d21e:	61da      	str	r2, [r3, #28]
			break;
   1d220:	e008      	b.n	1d234 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   1d222:	4b07      	ldr	r3, [pc, #28]	; (1d240 <system_apb_clock_set_mask+0x58>)
   1d224:	4a06      	ldr	r2, [pc, #24]	; (1d240 <system_apb_clock_set_mask+0x58>)
   1d226:	6a11      	ldr	r1, [r2, #32]
   1d228:	683a      	ldr	r2, [r7, #0]
   1d22a:	430a      	orrs	r2, r1
   1d22c:	621a      	str	r2, [r3, #32]
			break;
   1d22e:	e001      	b.n	1d234 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   1d230:	2317      	movs	r3, #23
   1d232:	e000      	b.n	1d236 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   1d234:	2300      	movs	r3, #0
}
   1d236:	0018      	movs	r0, r3
   1d238:	46bd      	mov	sp, r7
   1d23a:	b002      	add	sp, #8
   1d23c:	bd80      	pop	{r7, pc}
   1d23e:	46c0      	nop			; (mov r8, r8)
   1d240:	40000400 	.word	0x40000400

0001d244 <system_pinmux_get_config_defaults>:
{
   1d244:	b580      	push	{r7, lr}
   1d246:	b082      	sub	sp, #8
   1d248:	af00      	add	r7, sp, #0
   1d24a:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   1d24c:	687b      	ldr	r3, [r7, #4]
   1d24e:	2280      	movs	r2, #128	; 0x80
   1d250:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   1d252:	687b      	ldr	r3, [r7, #4]
   1d254:	2200      	movs	r2, #0
   1d256:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   1d258:	687b      	ldr	r3, [r7, #4]
   1d25a:	2201      	movs	r2, #1
   1d25c:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   1d25e:	687b      	ldr	r3, [r7, #4]
   1d260:	2200      	movs	r2, #0
   1d262:	70da      	strb	r2, [r3, #3]
}
   1d264:	46c0      	nop			; (mov r8, r8)
   1d266:	46bd      	mov	sp, r7
   1d268:	b002      	add	sp, #8
   1d26a:	bd80      	pop	{r7, pc}

0001d26c <system_voltage_reference_enable>:
 *
 * \param[in] vref  Voltage reference to enable
 */
static inline void system_voltage_reference_enable(
		const enum system_voltage_reference vref)
{
   1d26c:	b580      	push	{r7, lr}
   1d26e:	b082      	sub	sp, #8
   1d270:	af00      	add	r7, sp, #0
   1d272:	0002      	movs	r2, r0
   1d274:	1dfb      	adds	r3, r7, #7
   1d276:	701a      	strb	r2, [r3, #0]
	switch (vref) {
   1d278:	1dfb      	adds	r3, r7, #7
   1d27a:	781b      	ldrb	r3, [r3, #0]
   1d27c:	2b00      	cmp	r3, #0
   1d27e:	d002      	beq.n	1d286 <system_voltage_reference_enable+0x1a>
   1d280:	2b01      	cmp	r3, #1
   1d282:	d007      	beq.n	1d294 <system_voltage_reference_enable+0x28>
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_BGOUTEN;
			break;

		default:
			Assert(false);
			return;
   1d284:	e00d      	b.n	1d2a2 <system_voltage_reference_enable+0x36>
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_TSEN;
   1d286:	4b08      	ldr	r3, [pc, #32]	; (1d2a8 <system_voltage_reference_enable+0x3c>)
   1d288:	4a07      	ldr	r2, [pc, #28]	; (1d2a8 <system_voltage_reference_enable+0x3c>)
   1d28a:	6c12      	ldr	r2, [r2, #64]	; 0x40
   1d28c:	2102      	movs	r1, #2
   1d28e:	430a      	orrs	r2, r1
   1d290:	641a      	str	r2, [r3, #64]	; 0x40
			break;
   1d292:	e006      	b.n	1d2a2 <system_voltage_reference_enable+0x36>
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_BGOUTEN;
   1d294:	4b04      	ldr	r3, [pc, #16]	; (1d2a8 <system_voltage_reference_enable+0x3c>)
   1d296:	4a04      	ldr	r2, [pc, #16]	; (1d2a8 <system_voltage_reference_enable+0x3c>)
   1d298:	6c12      	ldr	r2, [r2, #64]	; 0x40
   1d29a:	2104      	movs	r1, #4
   1d29c:	430a      	orrs	r2, r1
   1d29e:	641a      	str	r2, [r3, #64]	; 0x40
			break;
   1d2a0:	46c0      	nop			; (mov r8, r8)
	}
}
   1d2a2:	46bd      	mov	sp, r7
   1d2a4:	b002      	add	sp, #8
   1d2a6:	bd80      	pop	{r7, pc}
   1d2a8:	40000800 	.word	0x40000800

0001d2ac <adc_is_syncing>:
{
   1d2ac:	b580      	push	{r7, lr}
   1d2ae:	b084      	sub	sp, #16
   1d2b0:	af00      	add	r7, sp, #0
   1d2b2:	6078      	str	r0, [r7, #4]
	Adc *const adc_module = module_inst->hw;
   1d2b4:	687b      	ldr	r3, [r7, #4]
   1d2b6:	681b      	ldr	r3, [r3, #0]
   1d2b8:	60fb      	str	r3, [r7, #12]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
   1d2ba:	68fb      	ldr	r3, [r7, #12]
   1d2bc:	7e5b      	ldrb	r3, [r3, #25]
   1d2be:	b2db      	uxtb	r3, r3
   1d2c0:	b25b      	sxtb	r3, r3
   1d2c2:	2b00      	cmp	r3, #0
   1d2c4:	da01      	bge.n	1d2ca <adc_is_syncing+0x1e>
		return true;
   1d2c6:	2301      	movs	r3, #1
   1d2c8:	e000      	b.n	1d2cc <adc_is_syncing+0x20>
	return false;
   1d2ca:	2300      	movs	r3, #0
}
   1d2cc:	0018      	movs	r0, r3
   1d2ce:	46bd      	mov	sp, r7
   1d2d0:	b004      	add	sp, #16
   1d2d2:	bd80      	pop	{r7, pc}

0001d2d4 <adc_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration struct to initialize to
 *                     default values
 */
void adc_get_config_defaults(struct adc_config *const config)
{
   1d2d4:	b580      	push	{r7, lr}
   1d2d6:	b082      	sub	sp, #8
   1d2d8:	af00      	add	r7, sp, #0
   1d2da:	6078      	str	r0, [r7, #4]
	Assert(config);
	config->clock_source                  = GCLK_GENERATOR_0;
   1d2dc:	687b      	ldr	r3, [r7, #4]
   1d2de:	2200      	movs	r2, #0
   1d2e0:	701a      	strb	r2, [r3, #0]
	config->reference                     = ADC_REFERENCE_INT1V;
   1d2e2:	687b      	ldr	r3, [r7, #4]
   1d2e4:	2200      	movs	r2, #0
   1d2e6:	705a      	strb	r2, [r3, #1]
	config->clock_prescaler               = ADC_CLOCK_PRESCALER_DIV4;
   1d2e8:	687b      	ldr	r3, [r7, #4]
   1d2ea:	2200      	movs	r2, #0
   1d2ec:	805a      	strh	r2, [r3, #2]
	config->resolution                    = ADC_RESOLUTION_12BIT;
   1d2ee:	687b      	ldr	r3, [r7, #4]
   1d2f0:	2200      	movs	r2, #0
   1d2f2:	711a      	strb	r2, [r3, #4]
	config->window.window_mode            = ADC_WINDOW_MODE_DISABLE;
   1d2f4:	687b      	ldr	r3, [r7, #4]
   1d2f6:	2200      	movs	r2, #0
   1d2f8:	761a      	strb	r2, [r3, #24]
	config->window.window_upper_value     = 0;
   1d2fa:	687b      	ldr	r3, [r7, #4]
   1d2fc:	2200      	movs	r2, #0
   1d2fe:	621a      	str	r2, [r3, #32]
	config->window.window_lower_value     = 0;
   1d300:	687b      	ldr	r3, [r7, #4]
   1d302:	2200      	movs	r2, #0
   1d304:	61da      	str	r2, [r3, #28]
	config->gain_factor                   = ADC_GAIN_FACTOR_1X;
   1d306:	687b      	ldr	r3, [r7, #4]
   1d308:	2200      	movs	r2, #0
   1d30a:	609a      	str	r2, [r3, #8]
#if SAMR21
	config->positive_input                = ADC_POSITIVE_INPUT_PIN6 ;
#else
 	config->positive_input                = ADC_POSITIVE_INPUT_PIN0 ;
   1d30c:	687b      	ldr	r3, [r7, #4]
   1d30e:	2200      	movs	r2, #0
   1d310:	731a      	strb	r2, [r3, #12]
#endif
	config->negative_input                = ADC_NEGATIVE_INPUT_GND ;
   1d312:	687b      	ldr	r3, [r7, #4]
   1d314:	22c0      	movs	r2, #192	; 0xc0
   1d316:	0152      	lsls	r2, r2, #5
   1d318:	81da      	strh	r2, [r3, #14]
	config->accumulate_samples            = ADC_ACCUMULATE_DISABLE;
   1d31a:	687b      	ldr	r3, [r7, #4]
   1d31c:	2200      	movs	r2, #0
   1d31e:	741a      	strb	r2, [r3, #16]
	config->divide_result                 = ADC_DIVIDE_RESULT_DISABLE;
   1d320:	687b      	ldr	r3, [r7, #4]
   1d322:	2200      	movs	r2, #0
   1d324:	745a      	strb	r2, [r3, #17]
	config->left_adjust                   = false;
   1d326:	687b      	ldr	r3, [r7, #4]
   1d328:	2200      	movs	r2, #0
   1d32a:	749a      	strb	r2, [r3, #18]
	config->differential_mode             = false;
   1d32c:	687b      	ldr	r3, [r7, #4]
   1d32e:	2200      	movs	r2, #0
   1d330:	74da      	strb	r2, [r3, #19]
	config->freerunning                   = false;
   1d332:	687b      	ldr	r3, [r7, #4]
   1d334:	2200      	movs	r2, #0
   1d336:	751a      	strb	r2, [r3, #20]
	config->event_action                  = ADC_EVENT_ACTION_DISABLED;
   1d338:	687b      	ldr	r3, [r7, #4]
   1d33a:	222a      	movs	r2, #42	; 0x2a
   1d33c:	2100      	movs	r1, #0
   1d33e:	5499      	strb	r1, [r3, r2]
	config->run_in_standby                = false;
   1d340:	687b      	ldr	r3, [r7, #4]
   1d342:	2200      	movs	r2, #0
   1d344:	755a      	strb	r2, [r3, #21]
	config->reference_compensation_enable = false;
   1d346:	687b      	ldr	r3, [r7, #4]
   1d348:	2200      	movs	r2, #0
   1d34a:	759a      	strb	r2, [r3, #22]
	config->correction.correction_enable  = false;
   1d34c:	687b      	ldr	r3, [r7, #4]
   1d34e:	2224      	movs	r2, #36	; 0x24
   1d350:	2100      	movs	r1, #0
   1d352:	5499      	strb	r1, [r3, r2]
	config->correction.gain_correction    = ADC_GAINCORR_RESETVALUE;
   1d354:	687b      	ldr	r3, [r7, #4]
   1d356:	2200      	movs	r2, #0
   1d358:	84da      	strh	r2, [r3, #38]	; 0x26
	config->correction.offset_correction  = ADC_OFFSETCORR_RESETVALUE;
   1d35a:	687b      	ldr	r3, [r7, #4]
   1d35c:	2200      	movs	r2, #0
   1d35e:	851a      	strh	r2, [r3, #40]	; 0x28
	config->sample_length                 = 0;
   1d360:	687b      	ldr	r3, [r7, #4]
   1d362:	2200      	movs	r2, #0
   1d364:	75da      	strb	r2, [r3, #23]
	config->pin_scan.offset_start_scan    = 0;
   1d366:	687b      	ldr	r3, [r7, #4]
   1d368:	222b      	movs	r2, #43	; 0x2b
   1d36a:	2100      	movs	r1, #0
   1d36c:	5499      	strb	r1, [r3, r2]
	config->pin_scan.inputs_to_scan       = 0;
   1d36e:	687b      	ldr	r3, [r7, #4]
   1d370:	222c      	movs	r2, #44	; 0x2c
   1d372:	2100      	movs	r1, #0
   1d374:	5499      	strb	r1, [r3, r2]
}
   1d376:	46c0      	nop			; (mov r8, r8)
   1d378:	46bd      	mov	sp, r7
   1d37a:	b002      	add	sp, #8
   1d37c:	bd80      	pop	{r7, pc}
	...

0001d380 <_adc_configure_ain_pin>:
* the ADC access to the analog signal
*
* \param [in] pin AINxx pin to configure
*/
static inline void _adc_configure_ain_pin(uint32_t pin)
{
   1d380:	b580      	push	{r7, lr}
   1d382:	b098      	sub	sp, #96	; 0x60
   1d384:	af00      	add	r7, sp, #0
   1d386:	6078      	str	r0, [r7, #4]
#define PIN_INVALID_ADC_AIN    0xFFFFUL

	/* Pinmapping table for AINxx -> GPIO pin number */
	const uint32_t pinmapping[] = {
   1d388:	230c      	movs	r3, #12
   1d38a:	18fa      	adds	r2, r7, r3
   1d38c:	4b15      	ldr	r3, [pc, #84]	; (1d3e4 <_adc_configure_ain_pin+0x64>)
   1d38e:	0010      	movs	r0, r2
   1d390:	0019      	movs	r1, r3
   1d392:	2350      	movs	r3, #80	; 0x50
   1d394:	001a      	movs	r2, r3
   1d396:	4b14      	ldr	r3, [pc, #80]	; (1d3e8 <_adc_configure_ain_pin+0x68>)
   1d398:	4798      	blx	r3
#else
#  error ADC pin mappings are not defined for this device.
#endif
		};

	uint32_t pin_map_result = PIN_INVALID_ADC_AIN;
   1d39a:	4b14      	ldr	r3, [pc, #80]	; (1d3ec <_adc_configure_ain_pin+0x6c>)
   1d39c:	65fb      	str	r3, [r7, #92]	; 0x5c

	if (pin <= ADC_EXTCHANNEL_MSB) {
   1d39e:	687b      	ldr	r3, [r7, #4]
   1d3a0:	2b13      	cmp	r3, #19
   1d3a2:	d81a      	bhi.n	1d3da <_adc_configure_ain_pin+0x5a>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
   1d3a4:	230c      	movs	r3, #12
   1d3a6:	18fb      	adds	r3, r7, r3
   1d3a8:	687a      	ldr	r2, [r7, #4]
   1d3aa:	0092      	lsls	r2, r2, #2
   1d3ac:	58d3      	ldr	r3, [r2, r3]
   1d3ae:	65fb      	str	r3, [r7, #92]	; 0x5c

		Assert(pin_map_result != PIN_INVALID_ADC_AIN);

		struct system_pinmux_config config;
		system_pinmux_get_config_defaults(&config);
   1d3b0:	2308      	movs	r3, #8
   1d3b2:	18fb      	adds	r3, r7, r3
   1d3b4:	0018      	movs	r0, r3
   1d3b6:	4b0e      	ldr	r3, [pc, #56]	; (1d3f0 <_adc_configure_ain_pin+0x70>)
   1d3b8:	4798      	blx	r3

		/* Analog functions are all on MUX setting B */
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
   1d3ba:	2308      	movs	r3, #8
   1d3bc:	18fb      	adds	r3, r7, r3
   1d3be:	2200      	movs	r2, #0
   1d3c0:	709a      	strb	r2, [r3, #2]
		config.mux_position = 1;
   1d3c2:	2308      	movs	r3, #8
   1d3c4:	18fb      	adds	r3, r7, r3
   1d3c6:	2201      	movs	r2, #1
   1d3c8:	701a      	strb	r2, [r3, #0]

		system_pinmux_pin_set_config(pin_map_result, &config);
   1d3ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   1d3cc:	b2db      	uxtb	r3, r3
   1d3ce:	2208      	movs	r2, #8
   1d3d0:	18ba      	adds	r2, r7, r2
   1d3d2:	0011      	movs	r1, r2
   1d3d4:	0018      	movs	r0, r3
   1d3d6:	4b07      	ldr	r3, [pc, #28]	; (1d3f4 <_adc_configure_ain_pin+0x74>)
   1d3d8:	4798      	blx	r3
	}
}
   1d3da:	46c0      	nop			; (mov r8, r8)
   1d3dc:	46bd      	mov	sp, r7
   1d3de:	b018      	add	sp, #96	; 0x60
   1d3e0:	bd80      	pop	{r7, pc}
   1d3e2:	46c0      	nop			; (mov r8, r8)
   1d3e4:	0002a5e4 	.word	0x0002a5e4
   1d3e8:	000289ad 	.word	0x000289ad
   1d3ec:	0000ffff 	.word	0x0000ffff
   1d3f0:	0001d245 	.word	0x0001d245
   1d3f4:	00024911 	.word	0x00024911

0001d3f8 <_adc_set_config>:
 * \retval STATUS_ERR_INVALID_ARG  Invalid argument(s) were provided
 */
static enum status_code _adc_set_config(
		struct adc_module *const module_inst,
		struct adc_config *const config)
{
   1d3f8:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d3fa:	b089      	sub	sp, #36	; 0x24
   1d3fc:	af00      	add	r7, sp, #0
   1d3fe:	6078      	str	r0, [r7, #4]
   1d400:	6039      	str	r1, [r7, #0]
	uint8_t adjres = 0;
   1d402:	231f      	movs	r3, #31
   1d404:	18fb      	adds	r3, r7, r3
   1d406:	2200      	movs	r2, #0
   1d408:	701a      	strb	r2, [r3, #0]
	uint32_t resolution = ADC_RESOLUTION_16BIT;
   1d40a:	2310      	movs	r3, #16
   1d40c:	61bb      	str	r3, [r7, #24]
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
   1d40e:	2317      	movs	r3, #23
   1d410:	18fb      	adds	r3, r7, r3
   1d412:	2200      	movs	r2, #0
   1d414:	701a      	strb	r2, [r3, #0]
#if SAMD20
	uint8_t revision_num = ((REG_DSU_DID & DSU_DID_REVISION_Msk) >> DSU_DID_REVISION_Pos);
#endif

	/* Get the hardware module pointer */
	Adc *const adc_module = module_inst->hw;
   1d416:	687b      	ldr	r3, [r7, #4]
   1d418:	681b      	ldr	r3, [r3, #0]
   1d41a:	613b      	str	r3, [r7, #16]

	/* Configure GCLK channel and enable clock */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   1d41c:	230c      	movs	r3, #12
   1d41e:	18fb      	adds	r3, r7, r3
   1d420:	0018      	movs	r0, r3
   1d422:	4bce      	ldr	r3, [pc, #824]	; (1d75c <_adc_set_config+0x364>)
   1d424:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->clock_source;
   1d426:	683b      	ldr	r3, [r7, #0]
   1d428:	781a      	ldrb	r2, [r3, #0]
   1d42a:	230c      	movs	r3, #12
   1d42c:	18fb      	adds	r3, r7, r3
   1d42e:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(ADC_GCLK_ID, &gclk_chan_conf);
   1d430:	230c      	movs	r3, #12
   1d432:	18fb      	adds	r3, r7, r3
   1d434:	0019      	movs	r1, r3
   1d436:	201e      	movs	r0, #30
   1d438:	4bc9      	ldr	r3, [pc, #804]	; (1d760 <_adc_set_config+0x368>)
   1d43a:	4798      	blx	r3
	system_gclk_chan_enable(ADC_GCLK_ID);
   1d43c:	201e      	movs	r0, #30
   1d43e:	4bc9      	ldr	r3, [pc, #804]	; (1d764 <_adc_set_config+0x36c>)
   1d440:	4798      	blx	r3

	/* Setup pinmuxing for analog inputs */
	if (config->pin_scan.inputs_to_scan != 0) {
   1d442:	683b      	ldr	r3, [r7, #0]
   1d444:	222c      	movs	r2, #44	; 0x2c
   1d446:	5c9b      	ldrb	r3, [r3, r2]
   1d448:	2b00      	cmp	r3, #0
   1d44a:	d040      	beq.n	1d4ce <_adc_set_config+0xd6>
		uint8_t offset = config->pin_scan.offset_start_scan;
   1d44c:	2316      	movs	r3, #22
   1d44e:	18fb      	adds	r3, r7, r3
   1d450:	683a      	ldr	r2, [r7, #0]
   1d452:	212b      	movs	r1, #43	; 0x2b
   1d454:	5c52      	ldrb	r2, [r2, r1]
   1d456:	701a      	strb	r2, [r3, #0]
		uint8_t start_pin =
				offset +(uint8_t)config->positive_input;
   1d458:	683b      	ldr	r3, [r7, #0]
   1d45a:	7b19      	ldrb	r1, [r3, #12]
		uint8_t start_pin =
   1d45c:	2315      	movs	r3, #21
   1d45e:	18fb      	adds	r3, r7, r3
   1d460:	2216      	movs	r2, #22
   1d462:	18ba      	adds	r2, r7, r2
   1d464:	7812      	ldrb	r2, [r2, #0]
   1d466:	188a      	adds	r2, r1, r2
   1d468:	701a      	strb	r2, [r3, #0]
		uint8_t end_pin =
				start_pin + config->pin_scan.inputs_to_scan;
   1d46a:	683b      	ldr	r3, [r7, #0]
   1d46c:	222c      	movs	r2, #44	; 0x2c
   1d46e:	5c99      	ldrb	r1, [r3, r2]
		uint8_t end_pin =
   1d470:	230f      	movs	r3, #15
   1d472:	18fb      	adds	r3, r7, r3
   1d474:	2215      	movs	r2, #21
   1d476:	18ba      	adds	r2, r7, r2
   1d478:	7812      	ldrb	r2, [r2, #0]
   1d47a:	188a      	adds	r2, r1, r2
   1d47c:	701a      	strb	r2, [r3, #0]

		while (start_pin < end_pin) {
   1d47e:	e018      	b.n	1d4b2 <_adc_set_config+0xba>
			_adc_configure_ain_pin((offset % 16)+(uint8_t)config->positive_input);
   1d480:	2316      	movs	r3, #22
   1d482:	18fb      	adds	r3, r7, r3
   1d484:	781b      	ldrb	r3, [r3, #0]
   1d486:	220f      	movs	r2, #15
   1d488:	4013      	ands	r3, r2
   1d48a:	683a      	ldr	r2, [r7, #0]
   1d48c:	7b12      	ldrb	r2, [r2, #12]
   1d48e:	189b      	adds	r3, r3, r2
   1d490:	0018      	movs	r0, r3
   1d492:	4bb5      	ldr	r3, [pc, #724]	; (1d768 <_adc_set_config+0x370>)
   1d494:	4798      	blx	r3
			start_pin++;
   1d496:	2315      	movs	r3, #21
   1d498:	18fb      	adds	r3, r7, r3
   1d49a:	781a      	ldrb	r2, [r3, #0]
   1d49c:	2315      	movs	r3, #21
   1d49e:	18fb      	adds	r3, r7, r3
   1d4a0:	3201      	adds	r2, #1
   1d4a2:	701a      	strb	r2, [r3, #0]
			offset++;
   1d4a4:	2316      	movs	r3, #22
   1d4a6:	18fb      	adds	r3, r7, r3
   1d4a8:	781a      	ldrb	r2, [r3, #0]
   1d4aa:	2316      	movs	r3, #22
   1d4ac:	18fb      	adds	r3, r7, r3
   1d4ae:	3201      	adds	r2, #1
   1d4b0:	701a      	strb	r2, [r3, #0]
		while (start_pin < end_pin) {
   1d4b2:	2315      	movs	r3, #21
   1d4b4:	18fa      	adds	r2, r7, r3
   1d4b6:	230f      	movs	r3, #15
   1d4b8:	18fb      	adds	r3, r7, r3
   1d4ba:	7812      	ldrb	r2, [r2, #0]
   1d4bc:	781b      	ldrb	r3, [r3, #0]
   1d4be:	429a      	cmp	r2, r3
   1d4c0:	d3de      	bcc.n	1d480 <_adc_set_config+0x88>
		}
		_adc_configure_ain_pin(config->negative_input);
   1d4c2:	683b      	ldr	r3, [r7, #0]
   1d4c4:	89db      	ldrh	r3, [r3, #14]
   1d4c6:	0018      	movs	r0, r3
   1d4c8:	4ba7      	ldr	r3, [pc, #668]	; (1d768 <_adc_set_config+0x370>)
   1d4ca:	4798      	blx	r3
   1d4cc:	e009      	b.n	1d4e2 <_adc_set_config+0xea>
	} else {
		_adc_configure_ain_pin(config->positive_input);
   1d4ce:	683b      	ldr	r3, [r7, #0]
   1d4d0:	7b1b      	ldrb	r3, [r3, #12]
   1d4d2:	0018      	movs	r0, r3
   1d4d4:	4ba4      	ldr	r3, [pc, #656]	; (1d768 <_adc_set_config+0x370>)
   1d4d6:	4798      	blx	r3
		_adc_configure_ain_pin(config->negative_input);
   1d4d8:	683b      	ldr	r3, [r7, #0]
   1d4da:	89db      	ldrh	r3, [r3, #14]
   1d4dc:	0018      	movs	r0, r3
   1d4de:	4ba2      	ldr	r3, [pc, #648]	; (1d768 <_adc_set_config+0x370>)
   1d4e0:	4798      	blx	r3
	}

	/* Configure run in standby */
	adc_module->CTRLA.reg = (config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos);
   1d4e2:	683b      	ldr	r3, [r7, #0]
   1d4e4:	7d5b      	ldrb	r3, [r3, #21]
   1d4e6:	009b      	lsls	r3, r3, #2
   1d4e8:	b2da      	uxtb	r2, r3
   1d4ea:	693b      	ldr	r3, [r7, #16]
   1d4ec:	701a      	strb	r2, [r3, #0]

	/* Configure reference */
	adc_module->REFCTRL.reg =
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
   1d4ee:	683b      	ldr	r3, [r7, #0]
   1d4f0:	7d9b      	ldrb	r3, [r3, #22]
   1d4f2:	01db      	lsls	r3, r3, #7
   1d4f4:	b25a      	sxtb	r2, r3
			(config->reference);
   1d4f6:	683b      	ldr	r3, [r7, #0]
   1d4f8:	785b      	ldrb	r3, [r3, #1]
   1d4fa:	b25b      	sxtb	r3, r3
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
   1d4fc:	4313      	orrs	r3, r2
   1d4fe:	b25b      	sxtb	r3, r3
   1d500:	b2da      	uxtb	r2, r3
	adc_module->REFCTRL.reg =
   1d502:	693b      	ldr	r3, [r7, #16]
   1d504:	705a      	strb	r2, [r3, #1]

	/* Set adjusting result and number of samples */
	switch (config->resolution) {
   1d506:	683b      	ldr	r3, [r7, #0]
   1d508:	791b      	ldrb	r3, [r3, #4]
   1d50a:	2b34      	cmp	r3, #52	; 0x34
   1d50c:	d846      	bhi.n	1d59c <_adc_set_config+0x1a4>
   1d50e:	009a      	lsls	r2, r3, #2
   1d510:	4b96      	ldr	r3, [pc, #600]	; (1d76c <_adc_set_config+0x374>)
   1d512:	18d3      	adds	r3, r2, r3
   1d514:	681b      	ldr	r3, [r3, #0]
   1d516:	469f      	mov	pc, r3

	case ADC_RESOLUTION_CUSTOM:
		adjres = config->divide_result;
   1d518:	231f      	movs	r3, #31
   1d51a:	18fb      	adds	r3, r7, r3
   1d51c:	683a      	ldr	r2, [r7, #0]
   1d51e:	7c52      	ldrb	r2, [r2, #17]
   1d520:	701a      	strb	r2, [r3, #0]
		accumulate = config->accumulate_samples;
   1d522:	2317      	movs	r3, #23
   1d524:	18fb      	adds	r3, r7, r3
   1d526:	683a      	ldr	r2, [r7, #0]
   1d528:	7c12      	ldrb	r2, [r2, #16]
   1d52a:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
   1d52c:	2310      	movs	r3, #16
   1d52e:	61bb      	str	r3, [r7, #24]
		break;
   1d530:	e036      	b.n	1d5a0 <_adc_set_config+0x1a8>

	case ADC_RESOLUTION_13BIT:
		/* Increase resolution by 1 bit */
		adjres = ADC_DIVIDE_RESULT_2;
   1d532:	231f      	movs	r3, #31
   1d534:	18fb      	adds	r3, r7, r3
   1d536:	2201      	movs	r2, #1
   1d538:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_4;
   1d53a:	2317      	movs	r3, #23
   1d53c:	18fb      	adds	r3, r7, r3
   1d53e:	2202      	movs	r2, #2
   1d540:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
   1d542:	2310      	movs	r3, #16
   1d544:	61bb      	str	r3, [r7, #24]
		break;
   1d546:	e02b      	b.n	1d5a0 <_adc_set_config+0x1a8>

	case ADC_RESOLUTION_14BIT:
		/* Increase resolution by 2 bit */
		adjres = ADC_DIVIDE_RESULT_4;
   1d548:	231f      	movs	r3, #31
   1d54a:	18fb      	adds	r3, r7, r3
   1d54c:	2202      	movs	r2, #2
   1d54e:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_16;
   1d550:	2317      	movs	r3, #23
   1d552:	18fb      	adds	r3, r7, r3
   1d554:	2204      	movs	r2, #4
   1d556:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
   1d558:	2310      	movs	r3, #16
   1d55a:	61bb      	str	r3, [r7, #24]
		break;
   1d55c:	e020      	b.n	1d5a0 <_adc_set_config+0x1a8>
		resolution = ADC_RESOLUTION_16BIT;
		break;
#else
	case ADC_RESOLUTION_15BIT:
		/* Increase resolution by 3 bit */
		adjres = ADC_DIVIDE_RESULT_2;
   1d55e:	231f      	movs	r3, #31
   1d560:	18fb      	adds	r3, r7, r3
   1d562:	2201      	movs	r2, #1
   1d564:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_64;
   1d566:	2317      	movs	r3, #23
   1d568:	18fb      	adds	r3, r7, r3
   1d56a:	2206      	movs	r2, #6
   1d56c:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
   1d56e:	2310      	movs	r3, #16
   1d570:	61bb      	str	r3, [r7, #24]
		break;
   1d572:	e015      	b.n	1d5a0 <_adc_set_config+0x1a8>

	case ADC_RESOLUTION_16BIT:
		/* Increase resolution by 4 bit */
		adjres = ADC_DIVIDE_RESULT_DISABLE;
   1d574:	231f      	movs	r3, #31
   1d576:	18fb      	adds	r3, r7, r3
   1d578:	2200      	movs	r2, #0
   1d57a:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_256;
   1d57c:	2317      	movs	r3, #23
   1d57e:	18fb      	adds	r3, r7, r3
   1d580:	2208      	movs	r2, #8
   1d582:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
   1d584:	2310      	movs	r3, #16
   1d586:	61bb      	str	r3, [r7, #24]
		break;
   1d588:	e00a      	b.n	1d5a0 <_adc_set_config+0x1a8>
#endif
	case ADC_RESOLUTION_8BIT:
		/* 8-bit result register */
		resolution = ADC_RESOLUTION_8BIT;
   1d58a:	2330      	movs	r3, #48	; 0x30
   1d58c:	61bb      	str	r3, [r7, #24]
		break;
   1d58e:	e007      	b.n	1d5a0 <_adc_set_config+0x1a8>
	case ADC_RESOLUTION_10BIT:
		/* 10-bit result register */
		resolution = ADC_RESOLUTION_10BIT;
   1d590:	2320      	movs	r3, #32
   1d592:	61bb      	str	r3, [r7, #24]
		break;
   1d594:	e004      	b.n	1d5a0 <_adc_set_config+0x1a8>
	case ADC_RESOLUTION_12BIT:
		/* 12-bit result register */
		resolution = ADC_RESOLUTION_12BIT;
   1d596:	2300      	movs	r3, #0
   1d598:	61bb      	str	r3, [r7, #24]
		break;
   1d59a:	e001      	b.n	1d5a0 <_adc_set_config+0x1a8>

	default:
		/* Unknown. Abort. */
		return STATUS_ERR_INVALID_ARG;
   1d59c:	2317      	movs	r3, #23
   1d59e:	e1ae      	b.n	1d8fe <_adc_set_config+0x506>
	}

	adc_module->AVGCTRL.reg = ADC_AVGCTRL_ADJRES(adjres) | accumulate;
   1d5a0:	231f      	movs	r3, #31
   1d5a2:	18fb      	adds	r3, r7, r3
   1d5a4:	781b      	ldrb	r3, [r3, #0]
   1d5a6:	011b      	lsls	r3, r3, #4
   1d5a8:	b2db      	uxtb	r3, r3
   1d5aa:	2270      	movs	r2, #112	; 0x70
   1d5ac:	4013      	ands	r3, r2
   1d5ae:	b2da      	uxtb	r2, r3
   1d5b0:	2317      	movs	r3, #23
   1d5b2:	18fb      	adds	r3, r7, r3
   1d5b4:	781b      	ldrb	r3, [r3, #0]
   1d5b6:	4313      	orrs	r3, r2
   1d5b8:	b2da      	uxtb	r2, r3
   1d5ba:	693b      	ldr	r3, [r7, #16]
   1d5bc:	709a      	strb	r2, [r3, #2]

	/* Check validity of sample length value */
	if (config->sample_length > 63) {
   1d5be:	683b      	ldr	r3, [r7, #0]
   1d5c0:	7ddb      	ldrb	r3, [r3, #23]
   1d5c2:	2b3f      	cmp	r3, #63	; 0x3f
   1d5c4:	d901      	bls.n	1d5ca <_adc_set_config+0x1d2>
		return STATUS_ERR_INVALID_ARG;
   1d5c6:	2317      	movs	r3, #23
   1d5c8:	e199      	b.n	1d8fe <_adc_set_config+0x506>
	} else {
		/* Configure sample length */
		adc_module->SAMPCTRL.reg =
				(config->sample_length << ADC_SAMPCTRL_SAMPLEN_Pos);
   1d5ca:	683b      	ldr	r3, [r7, #0]
   1d5cc:	7dda      	ldrb	r2, [r3, #23]
		adc_module->SAMPCTRL.reg =
   1d5ce:	693b      	ldr	r3, [r7, #16]
   1d5d0:	70da      	strb	r2, [r3, #3]
	}

	while (adc_is_syncing(module_inst)) {
   1d5d2:	46c0      	nop			; (mov r8, r8)
   1d5d4:	687b      	ldr	r3, [r7, #4]
   1d5d6:	0018      	movs	r0, r3
   1d5d8:	4b65      	ldr	r3, [pc, #404]	; (1d770 <_adc_set_config+0x378>)
   1d5da:	4798      	blx	r3
   1d5dc:	1e03      	subs	r3, r0, #0
   1d5de:	d1f9      	bne.n	1d5d4 <_adc_set_config+0x1dc>
		/* Wait for synchronization */
	}

	/* Configure CTRLB */
	adc_module->CTRLB.reg =
			config->clock_prescaler |
   1d5e0:	683b      	ldr	r3, [r7, #0]
   1d5e2:	885a      	ldrh	r2, [r3, #2]
   1d5e4:	69bb      	ldr	r3, [r7, #24]
   1d5e6:	b29b      	uxth	r3, r3
   1d5e8:	4313      	orrs	r3, r2
   1d5ea:	b29a      	uxth	r2, r3
			resolution |
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
   1d5ec:	683b      	ldr	r3, [r7, #0]
   1d5ee:	2124      	movs	r1, #36	; 0x24
   1d5f0:	5c5b      	ldrb	r3, [r3, r1]
   1d5f2:	b29b      	uxth	r3, r3
   1d5f4:	00db      	lsls	r3, r3, #3
   1d5f6:	b29b      	uxth	r3, r3
			resolution |
   1d5f8:	4313      	orrs	r3, r2
   1d5fa:	b29a      	uxth	r2, r3
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
   1d5fc:	683b      	ldr	r3, [r7, #0]
   1d5fe:	7d1b      	ldrb	r3, [r3, #20]
   1d600:	b29b      	uxth	r3, r3
   1d602:	009b      	lsls	r3, r3, #2
   1d604:	b29b      	uxth	r3, r3
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
   1d606:	4313      	orrs	r3, r2
   1d608:	b29a      	uxth	r2, r3
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
   1d60a:	683b      	ldr	r3, [r7, #0]
   1d60c:	7c9b      	ldrb	r3, [r3, #18]
   1d60e:	b29b      	uxth	r3, r3
   1d610:	18db      	adds	r3, r3, r3
   1d612:	b29b      	uxth	r3, r3
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
   1d614:	4313      	orrs	r3, r2
   1d616:	b29a      	uxth	r2, r3
			(config->differential_mode << ADC_CTRLB_DIFFMODE_Pos);
   1d618:	683b      	ldr	r3, [r7, #0]
   1d61a:	7cdb      	ldrb	r3, [r3, #19]
   1d61c:	b29b      	uxth	r3, r3
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
   1d61e:	4313      	orrs	r3, r2
   1d620:	b29a      	uxth	r2, r3
	adc_module->CTRLB.reg =
   1d622:	693b      	ldr	r3, [r7, #16]
   1d624:	809a      	strh	r2, [r3, #4]

	/* Check validity of window thresholds */
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
   1d626:	683b      	ldr	r3, [r7, #0]
   1d628:	7e1b      	ldrb	r3, [r3, #24]
   1d62a:	2b00      	cmp	r3, #0
   1d62c:	d100      	bne.n	1d630 <_adc_set_config+0x238>
   1d62e:	e0c4      	b.n	1d7ba <_adc_set_config+0x3c2>
		switch (resolution) {
   1d630:	69bb      	ldr	r3, [r7, #24]
   1d632:	2b10      	cmp	r3, #16
   1d634:	d100      	bne.n	1d638 <_adc_set_config+0x240>
   1d636:	e076      	b.n	1d726 <_adc_set_config+0x32e>
   1d638:	d802      	bhi.n	1d640 <_adc_set_config+0x248>
   1d63a:	2b00      	cmp	r3, #0
   1d63c:	d04d      	beq.n	1d6da <_adc_set_config+0x2e2>
   1d63e:	e0bc      	b.n	1d7ba <_adc_set_config+0x3c2>
   1d640:	2b20      	cmp	r3, #32
   1d642:	d023      	beq.n	1d68c <_adc_set_config+0x294>
   1d644:	2b30      	cmp	r3, #48	; 0x30
   1d646:	d000      	beq.n	1d64a <_adc_set_config+0x252>
   1d648:	e0b7      	b.n	1d7ba <_adc_set_config+0x3c2>
		case ADC_RESOLUTION_8BIT:
			if (config->differential_mode &&
   1d64a:	683b      	ldr	r3, [r7, #0]
   1d64c:	7cdb      	ldrb	r3, [r3, #19]
   1d64e:	2b00      	cmp	r3, #0
   1d650:	d011      	beq.n	1d676 <_adc_set_config+0x27e>
					(config->window.window_lower_value > 127 ||
   1d652:	683b      	ldr	r3, [r7, #0]
   1d654:	69db      	ldr	r3, [r3, #28]
			if (config->differential_mode &&
   1d656:	2b7f      	cmp	r3, #127	; 0x7f
   1d658:	dc0b      	bgt.n	1d672 <_adc_set_config+0x27a>
					config->window.window_lower_value < -128 ||
   1d65a:	683b      	ldr	r3, [r7, #0]
   1d65c:	69db      	ldr	r3, [r3, #28]
					(config->window.window_lower_value > 127 ||
   1d65e:	3380      	adds	r3, #128	; 0x80
   1d660:	db07      	blt.n	1d672 <_adc_set_config+0x27a>
					config->window.window_upper_value > 127 ||
   1d662:	683b      	ldr	r3, [r7, #0]
   1d664:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_lower_value < -128 ||
   1d666:	2b7f      	cmp	r3, #127	; 0x7f
   1d668:	dc03      	bgt.n	1d672 <_adc_set_config+0x27a>
					config->window.window_upper_value < -128)) {
   1d66a:	683b      	ldr	r3, [r7, #0]
   1d66c:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_upper_value > 127 ||
   1d66e:	3380      	adds	r3, #128	; 0x80
   1d670:	da01      	bge.n	1d676 <_adc_set_config+0x27e>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
   1d672:	2317      	movs	r3, #23
   1d674:	e143      	b.n	1d8fe <_adc_set_config+0x506>
			} else if (config->window.window_lower_value > 255 ||
   1d676:	683b      	ldr	r3, [r7, #0]
   1d678:	69db      	ldr	r3, [r3, #28]
   1d67a:	2bff      	cmp	r3, #255	; 0xff
   1d67c:	dc04      	bgt.n	1d688 <_adc_set_config+0x290>
					config->window.window_upper_value > 255){
   1d67e:	683b      	ldr	r3, [r7, #0]
   1d680:	6a1b      	ldr	r3, [r3, #32]
			} else if (config->window.window_lower_value > 255 ||
   1d682:	2bff      	cmp	r3, #255	; 0xff
   1d684:	dc00      	bgt.n	1d688 <_adc_set_config+0x290>
   1d686:	e091      	b.n	1d7ac <_adc_set_config+0x3b4>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
   1d688:	2317      	movs	r3, #23
   1d68a:	e138      	b.n	1d8fe <_adc_set_config+0x506>
			}
			break;
		case ADC_RESOLUTION_10BIT:
			if (config->differential_mode &&
   1d68c:	683b      	ldr	r3, [r7, #0]
   1d68e:	7cdb      	ldrb	r3, [r3, #19]
   1d690:	2b00      	cmp	r3, #0
   1d692:	d015      	beq.n	1d6c0 <_adc_set_config+0x2c8>
					(config->window.window_lower_value > 511 ||
   1d694:	683b      	ldr	r3, [r7, #0]
   1d696:	69db      	ldr	r3, [r3, #28]
			if (config->differential_mode &&
   1d698:	4a36      	ldr	r2, [pc, #216]	; (1d774 <_adc_set_config+0x37c>)
   1d69a:	4293      	cmp	r3, r2
   1d69c:	dc0e      	bgt.n	1d6bc <_adc_set_config+0x2c4>
					config->window.window_lower_value < -512 ||
   1d69e:	683b      	ldr	r3, [r7, #0]
   1d6a0:	69db      	ldr	r3, [r3, #28]
					(config->window.window_lower_value > 511 ||
   1d6a2:	4a35      	ldr	r2, [pc, #212]	; (1d778 <_adc_set_config+0x380>)
   1d6a4:	4293      	cmp	r3, r2
   1d6a6:	db09      	blt.n	1d6bc <_adc_set_config+0x2c4>
					config->window.window_upper_value > 511 ||
   1d6a8:	683b      	ldr	r3, [r7, #0]
   1d6aa:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_lower_value < -512 ||
   1d6ac:	4a31      	ldr	r2, [pc, #196]	; (1d774 <_adc_set_config+0x37c>)
   1d6ae:	4293      	cmp	r3, r2
   1d6b0:	dc04      	bgt.n	1d6bc <_adc_set_config+0x2c4>
					config->window.window_upper_value < -512)) {
   1d6b2:	683b      	ldr	r3, [r7, #0]
   1d6b4:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_upper_value > 511 ||
   1d6b6:	4a30      	ldr	r2, [pc, #192]	; (1d778 <_adc_set_config+0x380>)
   1d6b8:	4293      	cmp	r3, r2
   1d6ba:	da01      	bge.n	1d6c0 <_adc_set_config+0x2c8>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
   1d6bc:	2317      	movs	r3, #23
   1d6be:	e11e      	b.n	1d8fe <_adc_set_config+0x506>
			} else if (config->window.window_lower_value > 1023 ||
   1d6c0:	683b      	ldr	r3, [r7, #0]
   1d6c2:	69db      	ldr	r3, [r3, #28]
   1d6c4:	4a2d      	ldr	r2, [pc, #180]	; (1d77c <_adc_set_config+0x384>)
   1d6c6:	4293      	cmp	r3, r2
   1d6c8:	dc05      	bgt.n	1d6d6 <_adc_set_config+0x2de>
					config->window.window_upper_value > 1023){
   1d6ca:	683b      	ldr	r3, [r7, #0]
   1d6cc:	6a1b      	ldr	r3, [r3, #32]
			} else if (config->window.window_lower_value > 1023 ||
   1d6ce:	4a2b      	ldr	r2, [pc, #172]	; (1d77c <_adc_set_config+0x384>)
   1d6d0:	4293      	cmp	r3, r2
   1d6d2:	dc00      	bgt.n	1d6d6 <_adc_set_config+0x2de>
   1d6d4:	e06c      	b.n	1d7b0 <_adc_set_config+0x3b8>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
   1d6d6:	2317      	movs	r3, #23
   1d6d8:	e111      	b.n	1d8fe <_adc_set_config+0x506>
			}
			break;
		case ADC_RESOLUTION_12BIT:
			if (config->differential_mode &&
   1d6da:	683b      	ldr	r3, [r7, #0]
   1d6dc:	7cdb      	ldrb	r3, [r3, #19]
   1d6de:	2b00      	cmp	r3, #0
   1d6e0:	d015      	beq.n	1d70e <_adc_set_config+0x316>
					(config->window.window_lower_value > 2047 ||
   1d6e2:	683b      	ldr	r3, [r7, #0]
   1d6e4:	69db      	ldr	r3, [r3, #28]
			if (config->differential_mode &&
   1d6e6:	4a26      	ldr	r2, [pc, #152]	; (1d780 <_adc_set_config+0x388>)
   1d6e8:	4293      	cmp	r3, r2
   1d6ea:	dc0e      	bgt.n	1d70a <_adc_set_config+0x312>
					config->window.window_lower_value < -2048 ||
   1d6ec:	683b      	ldr	r3, [r7, #0]
   1d6ee:	69db      	ldr	r3, [r3, #28]
					(config->window.window_lower_value > 2047 ||
   1d6f0:	4a24      	ldr	r2, [pc, #144]	; (1d784 <_adc_set_config+0x38c>)
   1d6f2:	4293      	cmp	r3, r2
   1d6f4:	db09      	blt.n	1d70a <_adc_set_config+0x312>
					config->window.window_upper_value > 2047 ||
   1d6f6:	683b      	ldr	r3, [r7, #0]
   1d6f8:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_lower_value < -2048 ||
   1d6fa:	4a21      	ldr	r2, [pc, #132]	; (1d780 <_adc_set_config+0x388>)
   1d6fc:	4293      	cmp	r3, r2
   1d6fe:	dc04      	bgt.n	1d70a <_adc_set_config+0x312>
					config->window.window_upper_value < -2048)) {
   1d700:	683b      	ldr	r3, [r7, #0]
   1d702:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_upper_value > 2047 ||
   1d704:	4a1f      	ldr	r2, [pc, #124]	; (1d784 <_adc_set_config+0x38c>)
   1d706:	4293      	cmp	r3, r2
   1d708:	da01      	bge.n	1d70e <_adc_set_config+0x316>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
   1d70a:	2317      	movs	r3, #23
   1d70c:	e0f7      	b.n	1d8fe <_adc_set_config+0x506>
			} else if (config->window.window_lower_value > 4095 ||
   1d70e:	683b      	ldr	r3, [r7, #0]
   1d710:	69db      	ldr	r3, [r3, #28]
   1d712:	4a1d      	ldr	r2, [pc, #116]	; (1d788 <_adc_set_config+0x390>)
   1d714:	4293      	cmp	r3, r2
   1d716:	dc04      	bgt.n	1d722 <_adc_set_config+0x32a>
					config->window.window_upper_value > 4095){
   1d718:	683b      	ldr	r3, [r7, #0]
   1d71a:	6a1b      	ldr	r3, [r3, #32]
			} else if (config->window.window_lower_value > 4095 ||
   1d71c:	4a1a      	ldr	r2, [pc, #104]	; (1d788 <_adc_set_config+0x390>)
   1d71e:	4293      	cmp	r3, r2
   1d720:	dd48      	ble.n	1d7b4 <_adc_set_config+0x3bc>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
   1d722:	2317      	movs	r3, #23
   1d724:	e0eb      	b.n	1d8fe <_adc_set_config+0x506>
			}
			break;
		case ADC_RESOLUTION_16BIT:
			if (config->differential_mode &&
   1d726:	683b      	ldr	r3, [r7, #0]
   1d728:	7cdb      	ldrb	r3, [r3, #19]
   1d72a:	2b00      	cmp	r3, #0
   1d72c:	d032      	beq.n	1d794 <_adc_set_config+0x39c>
					(config->window.window_lower_value > 32767 ||
   1d72e:	683b      	ldr	r3, [r7, #0]
   1d730:	69db      	ldr	r3, [r3, #28]
			if (config->differential_mode &&
   1d732:	4a16      	ldr	r2, [pc, #88]	; (1d78c <_adc_set_config+0x394>)
   1d734:	4293      	cmp	r3, r2
   1d736:	dc0e      	bgt.n	1d756 <_adc_set_config+0x35e>
					config->window.window_lower_value < -32768 ||
   1d738:	683b      	ldr	r3, [r7, #0]
   1d73a:	69db      	ldr	r3, [r3, #28]
					(config->window.window_lower_value > 32767 ||
   1d73c:	4a14      	ldr	r2, [pc, #80]	; (1d790 <_adc_set_config+0x398>)
   1d73e:	4293      	cmp	r3, r2
   1d740:	db09      	blt.n	1d756 <_adc_set_config+0x35e>
					config->window.window_upper_value > 32767 ||
   1d742:	683b      	ldr	r3, [r7, #0]
   1d744:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_lower_value < -32768 ||
   1d746:	4a11      	ldr	r2, [pc, #68]	; (1d78c <_adc_set_config+0x394>)
   1d748:	4293      	cmp	r3, r2
   1d74a:	dc04      	bgt.n	1d756 <_adc_set_config+0x35e>
					config->window.window_upper_value < -32768)) {
   1d74c:	683b      	ldr	r3, [r7, #0]
   1d74e:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_upper_value > 32767 ||
   1d750:	4a0f      	ldr	r2, [pc, #60]	; (1d790 <_adc_set_config+0x398>)
   1d752:	4293      	cmp	r3, r2
   1d754:	da1e      	bge.n	1d794 <_adc_set_config+0x39c>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
   1d756:	2317      	movs	r3, #23
   1d758:	e0d1      	b.n	1d8fe <_adc_set_config+0x506>
   1d75a:	46c0      	nop			; (mov r8, r8)
   1d75c:	0001d1d1 	.word	0x0001d1d1
   1d760:	00024625 	.word	0x00024625
   1d764:	00024669 	.word	0x00024669
   1d768:	0001d381 	.word	0x0001d381
   1d76c:	0002a634 	.word	0x0002a634
   1d770:	0001d2ad 	.word	0x0001d2ad
   1d774:	000001ff 	.word	0x000001ff
   1d778:	fffffe00 	.word	0xfffffe00
   1d77c:	000003ff 	.word	0x000003ff
   1d780:	000007ff 	.word	0x000007ff
   1d784:	fffff800 	.word	0xfffff800
   1d788:	00000fff 	.word	0x00000fff
   1d78c:	00007fff 	.word	0x00007fff
   1d790:	ffff8000 	.word	0xffff8000
			} else if (config->window.window_lower_value > 65535 ||
   1d794:	683b      	ldr	r3, [r7, #0]
   1d796:	69db      	ldr	r3, [r3, #28]
   1d798:	4a5b      	ldr	r2, [pc, #364]	; (1d908 <_adc_set_config+0x510>)
   1d79a:	4293      	cmp	r3, r2
   1d79c:	dc04      	bgt.n	1d7a8 <_adc_set_config+0x3b0>
					config->window.window_upper_value > 65535){
   1d79e:	683b      	ldr	r3, [r7, #0]
   1d7a0:	6a1b      	ldr	r3, [r3, #32]
			} else if (config->window.window_lower_value > 65535 ||
   1d7a2:	4a59      	ldr	r2, [pc, #356]	; (1d908 <_adc_set_config+0x510>)
   1d7a4:	4293      	cmp	r3, r2
   1d7a6:	dd07      	ble.n	1d7b8 <_adc_set_config+0x3c0>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
   1d7a8:	2317      	movs	r3, #23
   1d7aa:	e0a8      	b.n	1d8fe <_adc_set_config+0x506>
			break;
   1d7ac:	46c0      	nop			; (mov r8, r8)
   1d7ae:	e004      	b.n	1d7ba <_adc_set_config+0x3c2>
			break;
   1d7b0:	46c0      	nop			; (mov r8, r8)
   1d7b2:	e002      	b.n	1d7ba <_adc_set_config+0x3c2>
			break;
   1d7b4:	46c0      	nop			; (mov r8, r8)
   1d7b6:	e000      	b.n	1d7ba <_adc_set_config+0x3c2>
			}
			break;
   1d7b8:	46c0      	nop			; (mov r8, r8)
		}
	}

	while (adc_is_syncing(module_inst)) {
   1d7ba:	46c0      	nop			; (mov r8, r8)
   1d7bc:	687b      	ldr	r3, [r7, #4]
   1d7be:	0018      	movs	r0, r3
   1d7c0:	4b52      	ldr	r3, [pc, #328]	; (1d90c <_adc_set_config+0x514>)
   1d7c2:	4798      	blx	r3
   1d7c4:	1e03      	subs	r3, r0, #0
   1d7c6:	d1f9      	bne.n	1d7bc <_adc_set_config+0x3c4>
		/* Wait for synchronization */
	}

	/* Configure window mode */
	adc_module->WINCTRL.reg = config->window.window_mode;
   1d7c8:	683b      	ldr	r3, [r7, #0]
   1d7ca:	7e1a      	ldrb	r2, [r3, #24]
   1d7cc:	693b      	ldr	r3, [r7, #16]
   1d7ce:	721a      	strb	r2, [r3, #8]

	while (adc_is_syncing(module_inst)) {
   1d7d0:	46c0      	nop			; (mov r8, r8)
   1d7d2:	687b      	ldr	r3, [r7, #4]
   1d7d4:	0018      	movs	r0, r3
   1d7d6:	4b4d      	ldr	r3, [pc, #308]	; (1d90c <_adc_set_config+0x514>)
   1d7d8:	4798      	blx	r3
   1d7da:	1e03      	subs	r3, r0, #0
   1d7dc:	d1f9      	bne.n	1d7d2 <_adc_set_config+0x3da>
		/* Wait for synchronization */
	}

	/* Configure lower threshold */
	adc_module->WINLT.reg =
			config->window.window_lower_value << ADC_WINLT_WINLT_Pos;
   1d7de:	683b      	ldr	r3, [r7, #0]
   1d7e0:	69db      	ldr	r3, [r3, #28]
	adc_module->WINLT.reg =
   1d7e2:	b29a      	uxth	r2, r3
   1d7e4:	693b      	ldr	r3, [r7, #16]
   1d7e6:	839a      	strh	r2, [r3, #28]

	while (adc_is_syncing(module_inst)) {
   1d7e8:	46c0      	nop			; (mov r8, r8)
   1d7ea:	687b      	ldr	r3, [r7, #4]
   1d7ec:	0018      	movs	r0, r3
   1d7ee:	4b47      	ldr	r3, [pc, #284]	; (1d90c <_adc_set_config+0x514>)
   1d7f0:	4798      	blx	r3
   1d7f2:	1e03      	subs	r3, r0, #0
   1d7f4:	d1f9      	bne.n	1d7ea <_adc_set_config+0x3f2>
		/* Wait for synchronization */
	}

	/* Configure lower threshold */
	adc_module->WINUT.reg = config->window.window_upper_value <<
   1d7f6:	683b      	ldr	r3, [r7, #0]
   1d7f8:	6a1b      	ldr	r3, [r3, #32]
   1d7fa:	b29a      	uxth	r2, r3
   1d7fc:	693b      	ldr	r3, [r7, #16]
   1d7fe:	841a      	strh	r2, [r3, #32]
			ADC_WINUT_WINUT_Pos;

	uint8_t inputs_to_scan = config->pin_scan.inputs_to_scan;
   1d800:	2314      	movs	r3, #20
   1d802:	18fb      	adds	r3, r7, r3
   1d804:	683a      	ldr	r2, [r7, #0]
   1d806:	212c      	movs	r1, #44	; 0x2c
   1d808:	5c52      	ldrb	r2, [r2, r1]
   1d80a:	701a      	strb	r2, [r3, #0]
	if (inputs_to_scan > 0) {
   1d80c:	2314      	movs	r3, #20
   1d80e:	18fb      	adds	r3, r7, r3
   1d810:	781b      	ldrb	r3, [r3, #0]
   1d812:	2b00      	cmp	r3, #0
   1d814:	d006      	beq.n	1d824 <_adc_set_config+0x42c>
		/*
		* Number of input sources included is the value written to INPUTSCAN
		* plus 1.
		*/
		inputs_to_scan--;
   1d816:	2314      	movs	r3, #20
   1d818:	18fb      	adds	r3, r7, r3
   1d81a:	781a      	ldrb	r2, [r3, #0]
   1d81c:	2314      	movs	r3, #20
   1d81e:	18fb      	adds	r3, r7, r3
   1d820:	3a01      	subs	r2, #1
   1d822:	701a      	strb	r2, [r3, #0]
	}

	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
   1d824:	2314      	movs	r3, #20
   1d826:	18fb      	adds	r3, r7, r3
   1d828:	781b      	ldrb	r3, [r3, #0]
   1d82a:	2b0f      	cmp	r3, #15
   1d82c:	d804      	bhi.n	1d838 <_adc_set_config+0x440>
			config->pin_scan.offset_start_scan > (ADC_INPUTCTRL_INPUTOFFSET_Msk >> ADC_INPUTCTRL_INPUTOFFSET_Pos)) {
   1d82e:	683b      	ldr	r3, [r7, #0]
   1d830:	222b      	movs	r2, #43	; 0x2b
   1d832:	5c9b      	ldrb	r3, [r3, r2]
	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
   1d834:	2b0f      	cmp	r3, #15
   1d836:	d901      	bls.n	1d83c <_adc_set_config+0x444>
		/* Invalid number of input pins or input offset */
		return STATUS_ERR_INVALID_ARG;
   1d838:	2317      	movs	r3, #23
   1d83a:	e060      	b.n	1d8fe <_adc_set_config+0x506>
	}

	while (adc_is_syncing(module_inst)) {
   1d83c:	46c0      	nop			; (mov r8, r8)
   1d83e:	687b      	ldr	r3, [r7, #4]
   1d840:	0018      	movs	r0, r3
   1d842:	4b32      	ldr	r3, [pc, #200]	; (1d90c <_adc_set_config+0x514>)
   1d844:	4798      	blx	r3
   1d846:	1e03      	subs	r3, r0, #0
   1d848:	d1f9      	bne.n	1d83e <_adc_set_config+0x446>
		/* Wait for synchronization */
	}

	/* Configure pin scan mode and positive and negative input pins */
	adc_module->INPUTCTRL.reg =
			config->gain_factor |
   1d84a:	683b      	ldr	r3, [r7, #0]
   1d84c:	689b      	ldr	r3, [r3, #8]
			(config->pin_scan.offset_start_scan <<
   1d84e:	683a      	ldr	r2, [r7, #0]
   1d850:	212b      	movs	r1, #43	; 0x2b
   1d852:	5c52      	ldrb	r2, [r2, r1]
   1d854:	0512      	lsls	r2, r2, #20
			config->gain_factor |
   1d856:	4313      	orrs	r3, r2
			ADC_INPUTCTRL_INPUTOFFSET_Pos) |
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
   1d858:	2214      	movs	r2, #20
   1d85a:	18ba      	adds	r2, r7, r2
   1d85c:	7812      	ldrb	r2, [r2, #0]
   1d85e:	0412      	lsls	r2, r2, #16
			ADC_INPUTCTRL_INPUTOFFSET_Pos) |
   1d860:	4313      	orrs	r3, r2
			config->negative_input |
   1d862:	683a      	ldr	r2, [r7, #0]
   1d864:	89d2      	ldrh	r2, [r2, #14]
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
   1d866:	4313      	orrs	r3, r2
			config->positive_input;
   1d868:	683a      	ldr	r2, [r7, #0]
   1d86a:	7b12      	ldrb	r2, [r2, #12]
			config->negative_input |
   1d86c:	431a      	orrs	r2, r3
	adc_module->INPUTCTRL.reg =
   1d86e:	693b      	ldr	r3, [r7, #16]
   1d870:	611a      	str	r2, [r3, #16]

	/* Configure events */
	adc_module->EVCTRL.reg = config->event_action;
   1d872:	683b      	ldr	r3, [r7, #0]
   1d874:	222a      	movs	r2, #42	; 0x2a
   1d876:	5c9a      	ldrb	r2, [r3, r2]
   1d878:	693b      	ldr	r3, [r7, #16]
   1d87a:	751a      	strb	r2, [r3, #20]

	/* Disable all interrupts */
	adc_module->INTENCLR.reg =
   1d87c:	693b      	ldr	r3, [r7, #16]
   1d87e:	220f      	movs	r2, #15
   1d880:	759a      	strb	r2, [r3, #22]
			(1 << ADC_INTENCLR_SYNCRDY_Pos) | (1 << ADC_INTENCLR_WINMON_Pos) |
			(1 << ADC_INTENCLR_OVERRUN_Pos) | (1 << ADC_INTENCLR_RESRDY_Pos);

	if (config->correction.correction_enable){
   1d882:	683b      	ldr	r3, [r7, #0]
   1d884:	2224      	movs	r2, #36	; 0x24
   1d886:	5c9b      	ldrb	r3, [r3, r2]
   1d888:	2b00      	cmp	r3, #0
   1d88a:	d01e      	beq.n	1d8ca <_adc_set_config+0x4d2>
		/* Make sure gain_correction value is valid */
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
   1d88c:	683b      	ldr	r3, [r7, #0]
   1d88e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
   1d890:	4a1f      	ldr	r2, [pc, #124]	; (1d910 <_adc_set_config+0x518>)
   1d892:	4293      	cmp	r3, r2
   1d894:	d901      	bls.n	1d89a <_adc_set_config+0x4a2>
			return STATUS_ERR_INVALID_ARG;
   1d896:	2317      	movs	r3, #23
   1d898:	e031      	b.n	1d8fe <_adc_set_config+0x506>
		} else {
			/* Set gain correction value */
			adc_module->GAINCORR.reg = config->correction.gain_correction <<
   1d89a:	683b      	ldr	r3, [r7, #0]
   1d89c:	8cda      	ldrh	r2, [r3, #38]	; 0x26
   1d89e:	693b      	ldr	r3, [r7, #16]
   1d8a0:	849a      	strh	r2, [r3, #36]	; 0x24
					ADC_GAINCORR_GAINCORR_Pos;
		}

		/* Make sure offset correction value is valid */
		if (config->correction.offset_correction > 2047 ||
   1d8a2:	683b      	ldr	r3, [r7, #0]
   1d8a4:	2228      	movs	r2, #40	; 0x28
   1d8a6:	5e9b      	ldrsh	r3, [r3, r2]
   1d8a8:	4a1a      	ldr	r2, [pc, #104]	; (1d914 <_adc_set_config+0x51c>)
   1d8aa:	4293      	cmp	r3, r2
   1d8ac:	dc05      	bgt.n	1d8ba <_adc_set_config+0x4c2>
				config->correction.offset_correction < -2048) {
   1d8ae:	683b      	ldr	r3, [r7, #0]
   1d8b0:	2228      	movs	r2, #40	; 0x28
   1d8b2:	5e9b      	ldrsh	r3, [r3, r2]
		if (config->correction.offset_correction > 2047 ||
   1d8b4:	4a18      	ldr	r2, [pc, #96]	; (1d918 <_adc_set_config+0x520>)
   1d8b6:	4293      	cmp	r3, r2
   1d8b8:	da01      	bge.n	1d8be <_adc_set_config+0x4c6>
			return STATUS_ERR_INVALID_ARG;
   1d8ba:	2317      	movs	r3, #23
   1d8bc:	e01f      	b.n	1d8fe <_adc_set_config+0x506>
		} else {
			/* Set offset correction value */
			adc_module->OFFSETCORR.reg = config->correction.offset_correction <<
   1d8be:	683b      	ldr	r3, [r7, #0]
   1d8c0:	2228      	movs	r2, #40	; 0x28
   1d8c2:	5e9b      	ldrsh	r3, [r3, r2]
   1d8c4:	b29a      	uxth	r2, r3
   1d8c6:	693b      	ldr	r3, [r7, #16]
   1d8c8:	84da      	strh	r2, [r3, #38]	; 0x26
		}
	}

	/* Load in the fixed device ADC calibration constants */
	adc_module->CALIB.reg =
			ADC_CALIB_BIAS_CAL(
   1d8ca:	4b14      	ldr	r3, [pc, #80]	; (1d91c <_adc_set_config+0x524>)
   1d8cc:	681b      	ldr	r3, [r3, #0]
   1d8ce:	08db      	lsrs	r3, r3, #3
   1d8d0:	b29b      	uxth	r3, r3
   1d8d2:	021b      	lsls	r3, r3, #8
   1d8d4:	b29a      	uxth	r2, r3
   1d8d6:	23e0      	movs	r3, #224	; 0xe0
   1d8d8:	00db      	lsls	r3, r3, #3
   1d8da:	4013      	ands	r3, r2
   1d8dc:	b29a      	uxth	r2, r3
				(*(uint32_t *)ADC_FUSES_BIASCAL_ADDR >> ADC_FUSES_BIASCAL_Pos)
			) |
			ADC_CALIB_LINEARITY_CAL(
   1d8de:	4b10      	ldr	r3, [pc, #64]	; (1d920 <_adc_set_config+0x528>)
   1d8e0:	685c      	ldr	r4, [r3, #4]
   1d8e2:	681b      	ldr	r3, [r3, #0]
   1d8e4:	0161      	lsls	r1, r4, #5
   1d8e6:	0edd      	lsrs	r5, r3, #27
   1d8e8:	430d      	orrs	r5, r1
   1d8ea:	0ee6      	lsrs	r6, r4, #27
   1d8ec:	b2ab      	uxth	r3, r5
   1d8ee:	21ff      	movs	r1, #255	; 0xff
   1d8f0:	400b      	ands	r3, r1
   1d8f2:	b29b      	uxth	r3, r3
			) |
   1d8f4:	4313      	orrs	r3, r2
   1d8f6:	b29a      	uxth	r2, r3
	adc_module->CALIB.reg =
   1d8f8:	693b      	ldr	r3, [r7, #16]
   1d8fa:	851a      	strh	r2, [r3, #40]	; 0x28
				(*(uint64_t *)ADC_FUSES_LINEARITY_0_ADDR >> ADC_FUSES_LINEARITY_0_Pos)
			);

	return STATUS_OK;
   1d8fc:	2300      	movs	r3, #0
}
   1d8fe:	0018      	movs	r0, r3
   1d900:	46bd      	mov	sp, r7
   1d902:	b009      	add	sp, #36	; 0x24
   1d904:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1d906:	46c0      	nop			; (mov r8, r8)
   1d908:	0000ffff 	.word	0x0000ffff
   1d90c:	0001d2ad 	.word	0x0001d2ad
   1d910:	00000fff 	.word	0x00000fff
   1d914:	000007ff 	.word	0x000007ff
   1d918:	fffff800 	.word	0xfffff800
   1d91c:	00806024 	.word	0x00806024
   1d920:	00806020 	.word	0x00806020

0001d924 <adc_init>:
 */
enum status_code adc_init(
		struct adc_module *const module_inst,
		Adc *hw,
		struct adc_config *config)
{
   1d924:	b580      	push	{r7, lr}
   1d926:	b086      	sub	sp, #24
   1d928:	af00      	add	r7, sp, #0
   1d92a:	60f8      	str	r0, [r7, #12]
   1d92c:	60b9      	str	r1, [r7, #8]
   1d92e:	607a      	str	r2, [r7, #4]
	Assert(module_inst);
	Assert(hw);
	Assert(config);

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
   1d930:	68fb      	ldr	r3, [r7, #12]
   1d932:	68ba      	ldr	r2, [r7, #8]
   1d934:	601a      	str	r2, [r3, #0]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_ADC);
   1d936:	2380      	movs	r3, #128	; 0x80
   1d938:	025b      	lsls	r3, r3, #9
   1d93a:	0019      	movs	r1, r3
   1d93c:	2002      	movs	r0, #2
   1d93e:	4b32      	ldr	r3, [pc, #200]	; (1da08 <adc_init+0xe4>)
   1d940:	4798      	blx	r3

	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
   1d942:	68bb      	ldr	r3, [r7, #8]
   1d944:	781b      	ldrb	r3, [r3, #0]
   1d946:	b2db      	uxtb	r3, r3
   1d948:	001a      	movs	r2, r3
   1d94a:	2301      	movs	r3, #1
   1d94c:	4013      	ands	r3, r2
   1d94e:	d001      	beq.n	1d954 <adc_init+0x30>
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
   1d950:	2305      	movs	r3, #5
   1d952:	e055      	b.n	1da00 <adc_init+0xdc>
	}

	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
   1d954:	68bb      	ldr	r3, [r7, #8]
   1d956:	781b      	ldrb	r3, [r3, #0]
   1d958:	b2db      	uxtb	r3, r3
   1d95a:	001a      	movs	r2, r3
   1d95c:	2302      	movs	r3, #2
   1d95e:	4013      	ands	r3, r2
   1d960:	d001      	beq.n	1d966 <adc_init+0x42>
		/* Module must be disabled before initialization. Abort. */
		return STATUS_ERR_DENIED;
   1d962:	231c      	movs	r3, #28
   1d964:	e04c      	b.n	1da00 <adc_init+0xdc>
	}

	/* Store the selected reference for later use */
	module_inst->reference = config->reference;
   1d966:	687b      	ldr	r3, [r7, #4]
   1d968:	785a      	ldrb	r2, [r3, #1]
   1d96a:	68fb      	ldr	r3, [r7, #12]
   1d96c:	711a      	strb	r2, [r3, #4]

	/* Make sure bandgap is enabled if requested by the config */
	if (module_inst->reference == ADC_REFERENCE_INT1V) {
   1d96e:	68fb      	ldr	r3, [r7, #12]
   1d970:	791b      	ldrb	r3, [r3, #4]
   1d972:	2b00      	cmp	r3, #0
   1d974:	d102      	bne.n	1d97c <adc_init+0x58>
		system_voltage_reference_enable(SYSTEM_VOLTAGE_REFERENCE_BANDGAP);
   1d976:	2001      	movs	r0, #1
   1d978:	4b24      	ldr	r3, [pc, #144]	; (1da0c <adc_init+0xe8>)
   1d97a:	4798      	blx	r3
	}

#if ADC_CALLBACK_MODE == true
	for (uint8_t i = 0; i < ADC_CALLBACK_N; i++) {
   1d97c:	2317      	movs	r3, #23
   1d97e:	18fb      	adds	r3, r7, r3
   1d980:	2200      	movs	r2, #0
   1d982:	701a      	strb	r2, [r3, #0]
   1d984:	e00e      	b.n	1d9a4 <adc_init+0x80>
		module_inst->callback[i] = NULL;
   1d986:	2317      	movs	r3, #23
   1d988:	18fb      	adds	r3, r7, r3
   1d98a:	781a      	ldrb	r2, [r3, #0]
   1d98c:	68fb      	ldr	r3, [r7, #12]
   1d98e:	3202      	adds	r2, #2
   1d990:	0092      	lsls	r2, r2, #2
   1d992:	2100      	movs	r1, #0
   1d994:	50d1      	str	r1, [r2, r3]
	for (uint8_t i = 0; i < ADC_CALLBACK_N; i++) {
   1d996:	2317      	movs	r3, #23
   1d998:	18fb      	adds	r3, r7, r3
   1d99a:	781a      	ldrb	r2, [r3, #0]
   1d99c:	2317      	movs	r3, #23
   1d99e:	18fb      	adds	r3, r7, r3
   1d9a0:	3201      	adds	r2, #1
   1d9a2:	701a      	strb	r2, [r3, #0]
   1d9a4:	2317      	movs	r3, #23
   1d9a6:	18fb      	adds	r3, r7, r3
   1d9a8:	781b      	ldrb	r3, [r3, #0]
   1d9aa:	2b02      	cmp	r3, #2
   1d9ac:	d9eb      	bls.n	1d986 <adc_init+0x62>
	};

	module_inst->registered_callback_mask = 0;
   1d9ae:	68fb      	ldr	r3, [r7, #12]
   1d9b0:	2200      	movs	r2, #0
   1d9b2:	769a      	strb	r2, [r3, #26]
	module_inst->enabled_callback_mask = 0;
   1d9b4:	68fb      	ldr	r3, [r7, #12]
   1d9b6:	2200      	movs	r2, #0
   1d9b8:	76da      	strb	r2, [r3, #27]
	module_inst->remaining_conversions = 0;
   1d9ba:	68fb      	ldr	r3, [r7, #12]
   1d9bc:	2200      	movs	r2, #0
   1d9be:	831a      	strh	r2, [r3, #24]
	module_inst->job_status = STATUS_OK;
   1d9c0:	68fb      	ldr	r3, [r7, #12]
   1d9c2:	2200      	movs	r2, #0
   1d9c4:	771a      	strb	r2, [r3, #28]

	_adc_instances[0] = module_inst;
   1d9c6:	4b12      	ldr	r3, [pc, #72]	; (1da10 <adc_init+0xec>)
   1d9c8:	68fa      	ldr	r2, [r7, #12]
   1d9ca:	601a      	str	r2, [r3, #0]

	if (config->event_action == ADC_EVENT_ACTION_DISABLED &&
   1d9cc:	687b      	ldr	r3, [r7, #4]
   1d9ce:	222a      	movs	r2, #42	; 0x2a
   1d9d0:	5c9b      	ldrb	r3, [r3, r2]
   1d9d2:	2b00      	cmp	r3, #0
   1d9d4:	d10a      	bne.n	1d9ec <adc_init+0xc8>
			!config->freerunning) {
   1d9d6:	687b      	ldr	r3, [r7, #4]
   1d9d8:	7d1b      	ldrb	r3, [r3, #20]
   1d9da:	2201      	movs	r2, #1
   1d9dc:	4053      	eors	r3, r2
   1d9de:	b2db      	uxtb	r3, r3
	if (config->event_action == ADC_EVENT_ACTION_DISABLED &&
   1d9e0:	2b00      	cmp	r3, #0
   1d9e2:	d003      	beq.n	1d9ec <adc_init+0xc8>
		module_inst->software_trigger = true;
   1d9e4:	68fb      	ldr	r3, [r7, #12]
   1d9e6:	2201      	movs	r2, #1
   1d9e8:	775a      	strb	r2, [r3, #29]
   1d9ea:	e002      	b.n	1d9f2 <adc_init+0xce>
	} else {
		module_inst->software_trigger = false;
   1d9ec:	68fb      	ldr	r3, [r7, #12]
   1d9ee:	2200      	movs	r2, #0
   1d9f0:	775a      	strb	r2, [r3, #29]
	}
#endif

	/* Write configuration to module */
	return _adc_set_config(module_inst, config);
   1d9f2:	687a      	ldr	r2, [r7, #4]
   1d9f4:	68fb      	ldr	r3, [r7, #12]
   1d9f6:	0011      	movs	r1, r2
   1d9f8:	0018      	movs	r0, r3
   1d9fa:	4b06      	ldr	r3, [pc, #24]	; (1da14 <adc_init+0xf0>)
   1d9fc:	4798      	blx	r3
   1d9fe:	0003      	movs	r3, r0
}
   1da00:	0018      	movs	r0, r3
   1da02:	46bd      	mov	sp, r7
   1da04:	b006      	add	sp, #24
   1da06:	bd80      	pop	{r7, pc}
   1da08:	0001d1e9 	.word	0x0001d1e9
   1da0c:	0001d26d 	.word	0x0001d26d
   1da10:	200008a8 	.word	0x200008a8
   1da14:	0001d3f9 	.word	0x0001d3f9

0001da18 <adc_is_syncing>:
{
   1da18:	b580      	push	{r7, lr}
   1da1a:	b084      	sub	sp, #16
   1da1c:	af00      	add	r7, sp, #0
   1da1e:	6078      	str	r0, [r7, #4]
	Adc *const adc_module = module_inst->hw;
   1da20:	687b      	ldr	r3, [r7, #4]
   1da22:	681b      	ldr	r3, [r3, #0]
   1da24:	60fb      	str	r3, [r7, #12]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
   1da26:	68fb      	ldr	r3, [r7, #12]
   1da28:	7e5b      	ldrb	r3, [r3, #25]
   1da2a:	b2db      	uxtb	r3, r3
   1da2c:	b25b      	sxtb	r3, r3
   1da2e:	2b00      	cmp	r3, #0
   1da30:	da01      	bge.n	1da36 <adc_is_syncing+0x1e>
		return true;
   1da32:	2301      	movs	r3, #1
   1da34:	e000      	b.n	1da38 <adc_is_syncing+0x20>
	return false;
   1da36:	2300      	movs	r3, #0
}
   1da38:	0018      	movs	r0, r3
   1da3a:	46bd      	mov	sp, r7
   1da3c:	b004      	add	sp, #16
   1da3e:	bd80      	pop	{r7, pc}

0001da40 <adc_start_conversion>:
{
   1da40:	b580      	push	{r7, lr}
   1da42:	b084      	sub	sp, #16
   1da44:	af00      	add	r7, sp, #0
   1da46:	6078      	str	r0, [r7, #4]
	Adc *const adc_module = module_inst->hw;
   1da48:	687b      	ldr	r3, [r7, #4]
   1da4a:	681b      	ldr	r3, [r3, #0]
   1da4c:	60fb      	str	r3, [r7, #12]
	while (adc_is_syncing(module_inst)) {
   1da4e:	46c0      	nop			; (mov r8, r8)
   1da50:	687b      	ldr	r3, [r7, #4]
   1da52:	0018      	movs	r0, r3
   1da54:	4b0b      	ldr	r3, [pc, #44]	; (1da84 <adc_start_conversion+0x44>)
   1da56:	4798      	blx	r3
   1da58:	1e03      	subs	r3, r0, #0
   1da5a:	d1f9      	bne.n	1da50 <adc_start_conversion+0x10>
	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
   1da5c:	68fb      	ldr	r3, [r7, #12]
   1da5e:	7b1b      	ldrb	r3, [r3, #12]
   1da60:	b2db      	uxtb	r3, r3
   1da62:	2202      	movs	r2, #2
   1da64:	4313      	orrs	r3, r2
   1da66:	b2da      	uxtb	r2, r3
   1da68:	68fb      	ldr	r3, [r7, #12]
   1da6a:	731a      	strb	r2, [r3, #12]
	while (adc_is_syncing(module_inst)) {
   1da6c:	46c0      	nop			; (mov r8, r8)
   1da6e:	687b      	ldr	r3, [r7, #4]
   1da70:	0018      	movs	r0, r3
   1da72:	4b04      	ldr	r3, [pc, #16]	; (1da84 <adc_start_conversion+0x44>)
   1da74:	4798      	blx	r3
   1da76:	1e03      	subs	r3, r0, #0
   1da78:	d1f9      	bne.n	1da6e <adc_start_conversion+0x2e>
}
   1da7a:	46c0      	nop			; (mov r8, r8)
   1da7c:	46bd      	mov	sp, r7
   1da7e:	b004      	add	sp, #16
   1da80:	bd80      	pop	{r7, pc}
   1da82:	46c0      	nop			; (mov r8, r8)
   1da84:	0001da19 	.word	0x0001da19

0001da88 <adc_enable_interrupt>:
{
   1da88:	b580      	push	{r7, lr}
   1da8a:	b084      	sub	sp, #16
   1da8c:	af00      	add	r7, sp, #0
   1da8e:	6078      	str	r0, [r7, #4]
   1da90:	000a      	movs	r2, r1
   1da92:	1cfb      	adds	r3, r7, #3
   1da94:	701a      	strb	r2, [r3, #0]
	Adc *const adc_module = module_inst->hw;
   1da96:	687b      	ldr	r3, [r7, #4]
   1da98:	681b      	ldr	r3, [r3, #0]
   1da9a:	60fb      	str	r3, [r7, #12]
	adc_module->INTENSET.reg = interrupt;
   1da9c:	68fb      	ldr	r3, [r7, #12]
   1da9e:	1cfa      	adds	r2, r7, #3
   1daa0:	7812      	ldrb	r2, [r2, #0]
   1daa2:	75da      	strb	r2, [r3, #23]
}
   1daa4:	46c0      	nop			; (mov r8, r8)
   1daa6:	46bd      	mov	sp, r7
   1daa8:	b004      	add	sp, #16
   1daaa:	bd80      	pop	{r7, pc}

0001daac <adc_disable_interrupt>:
 * \param[in] module_inst Pointer to the ADC software instance struct
 * \param[in] interrupt Interrupt to disable
 */
static inline void adc_disable_interrupt(struct adc_module *const module_inst,
		enum adc_interrupt_flag interrupt)
{
   1daac:	b580      	push	{r7, lr}
   1daae:	b084      	sub	sp, #16
   1dab0:	af00      	add	r7, sp, #0
   1dab2:	6078      	str	r0, [r7, #4]
   1dab4:	000a      	movs	r2, r1
   1dab6:	1cfb      	adds	r3, r7, #3
   1dab8:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
   1daba:	687b      	ldr	r3, [r7, #4]
   1dabc:	681b      	ldr	r3, [r3, #0]
   1dabe:	60fb      	str	r3, [r7, #12]
	/* Enable interrupt */
	adc_module->INTENCLR.reg = interrupt;
   1dac0:	68fb      	ldr	r3, [r7, #12]
   1dac2:	1cfa      	adds	r2, r7, #3
   1dac4:	7812      	ldrb	r2, [r2, #0]
   1dac6:	759a      	strb	r2, [r3, #22]
}
   1dac8:	46c0      	nop			; (mov r8, r8)
   1daca:	46bd      	mov	sp, r7
   1dacc:	b004      	add	sp, #16
   1dace:	bd80      	pop	{r7, pc}

0001dad0 <_adc_interrupt_handler>:
#include "adc_callback.h"

struct adc_module *_adc_instances[ADC_INST_NUM];

static void _adc_interrupt_handler(const uint8_t instance)
{
   1dad0:	b580      	push	{r7, lr}
   1dad2:	b084      	sub	sp, #16
   1dad4:	af00      	add	r7, sp, #0
   1dad6:	0002      	movs	r2, r0
   1dad8:	1dfb      	adds	r3, r7, #7
   1dada:	701a      	strb	r2, [r3, #0]
	struct adc_module *module = _adc_instances[instance];
   1dadc:	1dfb      	adds	r3, r7, #7
   1dade:	781a      	ldrb	r2, [r3, #0]
   1dae0:	4b47      	ldr	r3, [pc, #284]	; (1dc00 <_adc_interrupt_handler+0x130>)
   1dae2:	0092      	lsls	r2, r2, #2
   1dae4:	58d3      	ldr	r3, [r2, r3]
   1dae6:	60fb      	str	r3, [r7, #12]

	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->INTFLAG.reg & module->hw->INTENSET.reg;
   1dae8:	68fb      	ldr	r3, [r7, #12]
   1daea:	681b      	ldr	r3, [r3, #0]
   1daec:	7e1b      	ldrb	r3, [r3, #24]
   1daee:	b2da      	uxtb	r2, r3
   1daf0:	68fb      	ldr	r3, [r7, #12]
   1daf2:	681b      	ldr	r3, [r3, #0]
   1daf4:	7ddb      	ldrb	r3, [r3, #23]
   1daf6:	b2db      	uxtb	r3, r3
   1daf8:	4013      	ands	r3, r2
   1dafa:	b2db      	uxtb	r3, r3
   1dafc:	60bb      	str	r3, [r7, #8]

	if (flags & ADC_INTFLAG_RESRDY) {
   1dafe:	68bb      	ldr	r3, [r7, #8]
   1db00:	2201      	movs	r2, #1
   1db02:	4013      	ands	r3, r2
   1db04:	d045      	beq.n	1db92 <_adc_interrupt_handler+0xc2>
		/* clear interrupt flag */
		module->hw->INTFLAG.reg = ADC_INTFLAG_RESRDY;
   1db06:	68fb      	ldr	r3, [r7, #12]
   1db08:	681b      	ldr	r3, [r3, #0]
   1db0a:	2201      	movs	r2, #1
   1db0c:	761a      	strb	r2, [r3, #24]

		while (adc_is_syncing(module)) {
   1db0e:	46c0      	nop			; (mov r8, r8)
   1db10:	68fb      	ldr	r3, [r7, #12]
   1db12:	0018      	movs	r0, r3
   1db14:	4b3b      	ldr	r3, [pc, #236]	; (1dc04 <_adc_interrupt_handler+0x134>)
   1db16:	4798      	blx	r3
   1db18:	1e03      	subs	r3, r0, #0
   1db1a:	d1f9      	bne.n	1db10 <_adc_interrupt_handler+0x40>
			/* Wait for synchronization */
		}

		/* store ADC result in job buffer */
		*(module->job_buffer++) = module->hw->RESULT.reg;
   1db1c:	68fb      	ldr	r3, [r7, #12]
   1db1e:	695b      	ldr	r3, [r3, #20]
   1db20:	1c99      	adds	r1, r3, #2
   1db22:	68fa      	ldr	r2, [r7, #12]
   1db24:	6151      	str	r1, [r2, #20]
   1db26:	68fa      	ldr	r2, [r7, #12]
   1db28:	6812      	ldr	r2, [r2, #0]
   1db2a:	8b52      	ldrh	r2, [r2, #26]
   1db2c:	b292      	uxth	r2, r2
   1db2e:	801a      	strh	r2, [r3, #0]

		if (--module->remaining_conversions > 0) {
   1db30:	68fb      	ldr	r3, [r7, #12]
   1db32:	8b1b      	ldrh	r3, [r3, #24]
   1db34:	b29b      	uxth	r3, r3
   1db36:	3b01      	subs	r3, #1
   1db38:	b29b      	uxth	r3, r3
   1db3a:	68fa      	ldr	r2, [r7, #12]
   1db3c:	1c19      	adds	r1, r3, #0
   1db3e:	8311      	strh	r1, [r2, #24]
   1db40:	2b00      	cmp	r3, #0
   1db42:	d008      	beq.n	1db56 <_adc_interrupt_handler+0x86>
			if (module->software_trigger == true) {
   1db44:	68fb      	ldr	r3, [r7, #12]
   1db46:	7f5b      	ldrb	r3, [r3, #29]
   1db48:	2b00      	cmp	r3, #0
   1db4a:	d022      	beq.n	1db92 <_adc_interrupt_handler+0xc2>
				adc_start_conversion(module);
   1db4c:	68fb      	ldr	r3, [r7, #12]
   1db4e:	0018      	movs	r0, r3
   1db50:	4b2d      	ldr	r3, [pc, #180]	; (1dc08 <_adc_interrupt_handler+0x138>)
   1db52:	4798      	blx	r3
   1db54:	e01d      	b.n	1db92 <_adc_interrupt_handler+0xc2>
			}
		} else {
			adc_disable_interrupt(module, ADC_INTERRUPT_RESULT_READY);
   1db56:	68fb      	ldr	r3, [r7, #12]
   1db58:	2101      	movs	r1, #1
   1db5a:	0018      	movs	r0, r3
   1db5c:	4b2b      	ldr	r3, [pc, #172]	; (1dc0c <_adc_interrupt_handler+0x13c>)
   1db5e:	4798      	blx	r3
			if (module->job_status == STATUS_BUSY) {
   1db60:	68fb      	ldr	r3, [r7, #12]
   1db62:	7f1b      	ldrb	r3, [r3, #28]
   1db64:	b2db      	uxtb	r3, r3
   1db66:	2b05      	cmp	r3, #5
   1db68:	d113      	bne.n	1db92 <_adc_interrupt_handler+0xc2>
				/* job is complete. update status,disable interrupt
					*and call callback */
				module->job_status = STATUS_OK;
   1db6a:	68fb      	ldr	r3, [r7, #12]
   1db6c:	2200      	movs	r2, #0
   1db6e:	771a      	strb	r2, [r3, #28]

				if ((module->enabled_callback_mask &
   1db70:	68fb      	ldr	r3, [r7, #12]
   1db72:	7edb      	ldrb	r3, [r3, #27]
   1db74:	001a      	movs	r2, r3
   1db76:	2301      	movs	r3, #1
   1db78:	4013      	ands	r3, r2
   1db7a:	d00a      	beq.n	1db92 <_adc_interrupt_handler+0xc2>
						(1 << ADC_CALLBACK_READ_BUFFER)) &&
					(module->registered_callback_mask &
   1db7c:	68fb      	ldr	r3, [r7, #12]
   1db7e:	7e9b      	ldrb	r3, [r3, #26]
   1db80:	001a      	movs	r2, r3
   1db82:	2301      	movs	r3, #1
   1db84:	4013      	ands	r3, r2
						(1 << ADC_CALLBACK_READ_BUFFER)) &&
   1db86:	d004      	beq.n	1db92 <_adc_interrupt_handler+0xc2>
						(1 << ADC_CALLBACK_READ_BUFFER))) {
					(module->callback[ADC_CALLBACK_READ_BUFFER])(module);
   1db88:	68fb      	ldr	r3, [r7, #12]
   1db8a:	689b      	ldr	r3, [r3, #8]
   1db8c:	68fa      	ldr	r2, [r7, #12]
   1db8e:	0010      	movs	r0, r2
   1db90:	4798      	blx	r3
				}
			}
		}
	}

	if (flags & ADC_INTFLAG_WINMON) {
   1db92:	68bb      	ldr	r3, [r7, #8]
   1db94:	2204      	movs	r2, #4
   1db96:	4013      	ands	r3, r2
   1db98:	d014      	beq.n	1dbc4 <_adc_interrupt_handler+0xf4>
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
   1db9a:	68fb      	ldr	r3, [r7, #12]
   1db9c:	681b      	ldr	r3, [r3, #0]
   1db9e:	2204      	movs	r2, #4
   1dba0:	761a      	strb	r2, [r3, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
   1dba2:	68fb      	ldr	r3, [r7, #12]
   1dba4:	7edb      	ldrb	r3, [r3, #27]
   1dba6:	001a      	movs	r2, r3
   1dba8:	2302      	movs	r3, #2
   1dbaa:	4013      	ands	r3, r2
   1dbac:	d00a      	beq.n	1dbc4 <_adc_interrupt_handler+0xf4>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_WINDOW))) {
   1dbae:	68fb      	ldr	r3, [r7, #12]
   1dbb0:	7e9b      	ldrb	r3, [r3, #26]
   1dbb2:	001a      	movs	r2, r3
   1dbb4:	2302      	movs	r3, #2
   1dbb6:	4013      	ands	r3, r2
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
   1dbb8:	d004      	beq.n	1dbc4 <_adc_interrupt_handler+0xf4>
			(module->callback[ADC_CALLBACK_WINDOW])(module);
   1dbba:	68fb      	ldr	r3, [r7, #12]
   1dbbc:	68db      	ldr	r3, [r3, #12]
   1dbbe:	68fa      	ldr	r2, [r7, #12]
   1dbc0:	0010      	movs	r0, r2
   1dbc2:	4798      	blx	r3
		}

	}

	if (flags & ADC_INTFLAG_OVERRUN) {
   1dbc4:	68bb      	ldr	r3, [r7, #8]
   1dbc6:	2202      	movs	r2, #2
   1dbc8:	4013      	ands	r3, r2
   1dbca:	d014      	beq.n	1dbf6 <_adc_interrupt_handler+0x126>
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
   1dbcc:	68fb      	ldr	r3, [r7, #12]
   1dbce:	681b      	ldr	r3, [r3, #0]
   1dbd0:	2202      	movs	r2, #2
   1dbd2:	761a      	strb	r2, [r3, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
   1dbd4:	68fb      	ldr	r3, [r7, #12]
   1dbd6:	7edb      	ldrb	r3, [r3, #27]
   1dbd8:	001a      	movs	r2, r3
   1dbda:	2304      	movs	r3, #4
   1dbdc:	4013      	ands	r3, r2
   1dbde:	d00a      	beq.n	1dbf6 <_adc_interrupt_handler+0x126>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_ERROR))) {
   1dbe0:	68fb      	ldr	r3, [r7, #12]
   1dbe2:	7e9b      	ldrb	r3, [r3, #26]
   1dbe4:	001a      	movs	r2, r3
   1dbe6:	2304      	movs	r3, #4
   1dbe8:	4013      	ands	r3, r2
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
   1dbea:	d004      	beq.n	1dbf6 <_adc_interrupt_handler+0x126>
			(module->callback[ADC_CALLBACK_ERROR])(module);
   1dbec:	68fb      	ldr	r3, [r7, #12]
   1dbee:	691b      	ldr	r3, [r3, #16]
   1dbf0:	68fa      	ldr	r2, [r7, #12]
   1dbf2:	0010      	movs	r0, r2
   1dbf4:	4798      	blx	r3
		}
	}
}
   1dbf6:	46c0      	nop			; (mov r8, r8)
   1dbf8:	46bd      	mov	sp, r7
   1dbfa:	b004      	add	sp, #16
   1dbfc:	bd80      	pop	{r7, pc}
   1dbfe:	46c0      	nop			; (mov r8, r8)
   1dc00:	200008a8 	.word	0x200008a8
   1dc04:	0001da19 	.word	0x0001da19
   1dc08:	0001da41 	.word	0x0001da41
   1dc0c:	0001daad 	.word	0x0001daad

0001dc10 <ADC_Handler>:

/** Interrupt handler for the ADC module. */
void ADC_Handler(void)
{
   1dc10:	b580      	push	{r7, lr}
   1dc12:	af00      	add	r7, sp, #0
	_adc_interrupt_handler(0);
   1dc14:	2000      	movs	r0, #0
   1dc16:	4b02      	ldr	r3, [pc, #8]	; (1dc20 <ADC_Handler+0x10>)
   1dc18:	4798      	blx	r3
}
   1dc1a:	46c0      	nop			; (mov r8, r8)
   1dc1c:	46bd      	mov	sp, r7
   1dc1e:	bd80      	pop	{r7, pc}
   1dc20:	0001dad1 	.word	0x0001dad1

0001dc24 <adc_register_callback>:
 */
void adc_register_callback(
		struct adc_module *const module,
		adc_callback_t callback_func,
		enum adc_callback callback_type)
{
   1dc24:	b580      	push	{r7, lr}
   1dc26:	b084      	sub	sp, #16
   1dc28:	af00      	add	r7, sp, #0
   1dc2a:	60f8      	str	r0, [r7, #12]
   1dc2c:	60b9      	str	r1, [r7, #8]
   1dc2e:	1dfb      	adds	r3, r7, #7
   1dc30:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
   1dc32:	1dfb      	adds	r3, r7, #7
   1dc34:	781a      	ldrb	r2, [r3, #0]
   1dc36:	68fb      	ldr	r3, [r7, #12]
   1dc38:	3202      	adds	r2, #2
   1dc3a:	0092      	lsls	r2, r2, #2
   1dc3c:	68b9      	ldr	r1, [r7, #8]
   1dc3e:	50d1      	str	r1, [r2, r3]

	/* Set the bit corresponding to the callback_type */
	module->registered_callback_mask |= (1 << callback_type);
   1dc40:	68fb      	ldr	r3, [r7, #12]
   1dc42:	7e9b      	ldrb	r3, [r3, #26]
   1dc44:	b25a      	sxtb	r2, r3
   1dc46:	1dfb      	adds	r3, r7, #7
   1dc48:	781b      	ldrb	r3, [r3, #0]
   1dc4a:	2101      	movs	r1, #1
   1dc4c:	4099      	lsls	r1, r3
   1dc4e:	000b      	movs	r3, r1
   1dc50:	b25b      	sxtb	r3, r3
   1dc52:	4313      	orrs	r3, r2
   1dc54:	b25b      	sxtb	r3, r3
   1dc56:	b2da      	uxtb	r2, r3
   1dc58:	68fb      	ldr	r3, [r7, #12]
   1dc5a:	769a      	strb	r2, [r3, #26]
}
   1dc5c:	46c0      	nop			; (mov r8, r8)
   1dc5e:	46bd      	mov	sp, r7
   1dc60:	b004      	add	sp, #16
   1dc62:	bd80      	pop	{r7, pc}

0001dc64 <adc_read_buffer_job>:
 */
enum status_code adc_read_buffer_job(
		struct adc_module *const module_inst,
		uint16_t *buffer,
		uint16_t samples)
{
   1dc64:	b580      	push	{r7, lr}
   1dc66:	b084      	sub	sp, #16
   1dc68:	af00      	add	r7, sp, #0
   1dc6a:	60f8      	str	r0, [r7, #12]
   1dc6c:	60b9      	str	r1, [r7, #8]
   1dc6e:	1dbb      	adds	r3, r7, #6
   1dc70:	801a      	strh	r2, [r3, #0]
	Assert(module_inst);
	Assert(samples);
	Assert(buffer);

	if(module_inst->remaining_conversions != 0 ||
   1dc72:	68fb      	ldr	r3, [r7, #12]
   1dc74:	8b1b      	ldrh	r3, [r3, #24]
   1dc76:	b29b      	uxth	r3, r3
   1dc78:	2b00      	cmp	r3, #0
   1dc7a:	d104      	bne.n	1dc86 <adc_read_buffer_job+0x22>
			module_inst->job_status == STATUS_BUSY){
   1dc7c:	68fb      	ldr	r3, [r7, #12]
   1dc7e:	7f1b      	ldrb	r3, [r3, #28]
   1dc80:	b2db      	uxtb	r3, r3
	if(module_inst->remaining_conversions != 0 ||
   1dc82:	2b05      	cmp	r3, #5
   1dc84:	d101      	bne.n	1dc8a <adc_read_buffer_job+0x26>
		return STATUS_BUSY;
   1dc86:	2305      	movs	r3, #5
   1dc88:	e017      	b.n	1dcba <adc_read_buffer_job+0x56>
	}

	module_inst->job_status = STATUS_BUSY;
   1dc8a:	68fb      	ldr	r3, [r7, #12]
   1dc8c:	2205      	movs	r2, #5
   1dc8e:	771a      	strb	r2, [r3, #28]
	module_inst->remaining_conversions = samples;
   1dc90:	68fb      	ldr	r3, [r7, #12]
   1dc92:	1dba      	adds	r2, r7, #6
   1dc94:	8812      	ldrh	r2, [r2, #0]
   1dc96:	831a      	strh	r2, [r3, #24]
	module_inst->job_buffer = buffer;
   1dc98:	68fb      	ldr	r3, [r7, #12]
   1dc9a:	68ba      	ldr	r2, [r7, #8]
   1dc9c:	615a      	str	r2, [r3, #20]

	adc_enable_interrupt(module_inst, ADC_INTERRUPT_RESULT_READY);
   1dc9e:	68fb      	ldr	r3, [r7, #12]
   1dca0:	2101      	movs	r1, #1
   1dca2:	0018      	movs	r0, r3
   1dca4:	4b07      	ldr	r3, [pc, #28]	; (1dcc4 <adc_read_buffer_job+0x60>)
   1dca6:	4798      	blx	r3

	if(module_inst->software_trigger == true) {
   1dca8:	68fb      	ldr	r3, [r7, #12]
   1dcaa:	7f5b      	ldrb	r3, [r3, #29]
   1dcac:	2b00      	cmp	r3, #0
   1dcae:	d003      	beq.n	1dcb8 <adc_read_buffer_job+0x54>
		adc_start_conversion(module_inst);
   1dcb0:	68fb      	ldr	r3, [r7, #12]
   1dcb2:	0018      	movs	r0, r3
   1dcb4:	4b04      	ldr	r3, [pc, #16]	; (1dcc8 <adc_read_buffer_job+0x64>)
   1dcb6:	4798      	blx	r3
	}

	return STATUS_OK;
   1dcb8:	2300      	movs	r3, #0
}
   1dcba:	0018      	movs	r0, r3
   1dcbc:	46bd      	mov	sp, r7
   1dcbe:	b004      	add	sp, #16
   1dcc0:	bd80      	pop	{r7, pc}
   1dcc2:	46c0      	nop			; (mov r8, r8)
   1dcc4:	0001da89 	.word	0x0001da89
   1dcc8:	0001da41 	.word	0x0001da41

0001dccc <system_interrupt_disable>:
{
   1dccc:	b580      	push	{r7, lr}
   1dcce:	b082      	sub	sp, #8
   1dcd0:	af00      	add	r7, sp, #0
   1dcd2:	0002      	movs	r2, r0
   1dcd4:	1dfb      	adds	r3, r7, #7
   1dcd6:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   1dcd8:	4a07      	ldr	r2, [pc, #28]	; (1dcf8 <system_interrupt_disable+0x2c>)
   1dcda:	1dfb      	adds	r3, r7, #7
   1dcdc:	781b      	ldrb	r3, [r3, #0]
   1dcde:	0019      	movs	r1, r3
   1dce0:	231f      	movs	r3, #31
   1dce2:	400b      	ands	r3, r1
   1dce4:	2101      	movs	r1, #1
   1dce6:	4099      	lsls	r1, r3
   1dce8:	000b      	movs	r3, r1
   1dcea:	0019      	movs	r1, r3
   1dcec:	2380      	movs	r3, #128	; 0x80
   1dcee:	50d1      	str	r1, [r2, r3]
}
   1dcf0:	46c0      	nop			; (mov r8, r8)
   1dcf2:	46bd      	mov	sp, r7
   1dcf4:	b002      	add	sp, #8
   1dcf6:	bd80      	pop	{r7, pc}
   1dcf8:	e000e100 	.word	0xe000e100

0001dcfc <_dac_interrupt_handler>:
 *  Internal handler for DAC module interrupts.
 *
 * \param[in] instance  DAC instance number
 */
static void _dac_interrupt_handler(const uint8_t instance)
{
   1dcfc:	b580      	push	{r7, lr}
   1dcfe:	b084      	sub	sp, #16
   1dd00:	af00      	add	r7, sp, #0
   1dd02:	0002      	movs	r2, r0
   1dd04:	1dfb      	adds	r3, r7, #7
   1dd06:	701a      	strb	r2, [r3, #0]
	struct dac_module *module = _dac_instances[instance];
   1dd08:	1dfb      	adds	r3, r7, #7
   1dd0a:	781a      	ldrb	r2, [r3, #0]
   1dd0c:	4b37      	ldr	r3, [pc, #220]	; (1ddec <_dac_interrupt_handler+0xf0>)
   1dd0e:	0092      	lsls	r2, r2, #2
   1dd10:	58d3      	ldr	r3, [r2, r3]
   1dd12:	60fb      	str	r3, [r7, #12]
	Dac *const dac_hw = module->hw;
   1dd14:	68fb      	ldr	r3, [r7, #12]
   1dd16:	681b      	ldr	r3, [r3, #0]
   1dd18:	60bb      	str	r3, [r7, #8]

	if (dac_hw->INTFLAG.reg & DAC_INTFLAG_UNDERRUN) {
   1dd1a:	68bb      	ldr	r3, [r7, #8]
   1dd1c:	799b      	ldrb	r3, [r3, #6]
   1dd1e:	b2db      	uxtb	r3, r3
   1dd20:	001a      	movs	r2, r3
   1dd22:	2301      	movs	r3, #1
   1dd24:	4013      	ands	r3, r2
   1dd26:	d00e      	beq.n	1dd46 <_dac_interrupt_handler+0x4a>
		dac_hw->INTFLAG.reg = DAC_INTFLAG_UNDERRUN;
   1dd28:	68bb      	ldr	r3, [r7, #8]
   1dd2a:	2201      	movs	r2, #1
   1dd2c:	719a      	strb	r2, [r3, #6]

		if ((module->callback) &&
   1dd2e:	68fb      	ldr	r3, [r7, #12]
   1dd30:	3314      	adds	r3, #20
   1dd32:	2b00      	cmp	r3, #0
   1dd34:	d007      	beq.n	1dd46 <_dac_interrupt_handler+0x4a>
			 (module->callback_enable[DAC_CALLBACK_DATA_UNDERRUN])){
   1dd36:	68fb      	ldr	r3, [r7, #12]
   1dd38:	7c5b      	ldrb	r3, [r3, #17]
		if ((module->callback) &&
   1dd3a:	2b00      	cmp	r3, #0
   1dd3c:	d003      	beq.n	1dd46 <_dac_interrupt_handler+0x4a>
			module->callback[DAC_CALLBACK_DATA_UNDERRUN](0);
   1dd3e:	68fb      	ldr	r3, [r7, #12]
   1dd40:	699b      	ldr	r3, [r3, #24]
   1dd42:	2000      	movs	r0, #0
   1dd44:	4798      	blx	r3
		}
	}

	if (dac_hw->INTFLAG.reg & DAC_INTFLAG_EMPTY) {
   1dd46:	68bb      	ldr	r3, [r7, #8]
   1dd48:	799b      	ldrb	r3, [r3, #6]
   1dd4a:	b2db      	uxtb	r3, r3
   1dd4c:	001a      	movs	r2, r3
   1dd4e:	2302      	movs	r3, #2
   1dd50:	4013      	ands	r3, r2
   1dd52:	d047      	beq.n	1dde4 <_dac_interrupt_handler+0xe8>
		dac_hw->INTFLAG.reg = DAC_INTFLAG_EMPTY;
   1dd54:	68bb      	ldr	r3, [r7, #8]
   1dd56:	2202      	movs	r2, #2
   1dd58:	719a      	strb	r2, [r3, #6]

		/* If in a write buffer job */
		if (module->remaining_conversions) {
   1dd5a:	68fb      	ldr	r3, [r7, #12]
   1dd5c:	899b      	ldrh	r3, [r3, #12]
   1dd5e:	b29b      	uxth	r3, r3
   1dd60:	2b00      	cmp	r3, #0
   1dd62:	d033      	beq.n	1ddcc <_dac_interrupt_handler+0xd0>

			/* Fill the data buffer with next data in write buffer */
			dac_hw->DATABUF.reg =
				module->job_buffer[module->transferred_conversions++];
   1dd64:	68fb      	ldr	r3, [r7, #12]
   1dd66:	689a      	ldr	r2, [r3, #8]
   1dd68:	68fb      	ldr	r3, [r7, #12]
   1dd6a:	89db      	ldrh	r3, [r3, #14]
   1dd6c:	b29b      	uxth	r3, r3
   1dd6e:	1c59      	adds	r1, r3, #1
   1dd70:	b288      	uxth	r0, r1
   1dd72:	68f9      	ldr	r1, [r7, #12]
   1dd74:	81c8      	strh	r0, [r1, #14]
   1dd76:	005b      	lsls	r3, r3, #1
   1dd78:	18d3      	adds	r3, r2, r3
   1dd7a:	881b      	ldrh	r3, [r3, #0]
   1dd7c:	b29a      	uxth	r2, r3
			dac_hw->DATABUF.reg =
   1dd7e:	68bb      	ldr	r3, [r7, #8]
   1dd80:	819a      	strh	r2, [r3, #12]

			/* Write buffer size decrement */
			module->remaining_conversions --;
   1dd82:	68fb      	ldr	r3, [r7, #12]
   1dd84:	899b      	ldrh	r3, [r3, #12]
   1dd86:	b29b      	uxth	r3, r3
   1dd88:	3b01      	subs	r3, #1
   1dd8a:	b29a      	uxth	r2, r3
   1dd8c:	68fb      	ldr	r3, [r7, #12]
   1dd8e:	819a      	strh	r2, [r3, #12]

			/* If in a write buffer job and all the data are converted */
			if (module->remaining_conversions == 0) {
   1dd90:	68fb      	ldr	r3, [r7, #12]
   1dd92:	899b      	ldrh	r3, [r3, #12]
   1dd94:	b29b      	uxth	r3, r3
   1dd96:	2b00      	cmp	r3, #0
   1dd98:	d118      	bne.n	1ddcc <_dac_interrupt_handler+0xd0>
				module->job_status = STATUS_OK;
   1dd9a:	68fb      	ldr	r3, [r7, #12]
   1dd9c:	2220      	movs	r2, #32
   1dd9e:	2100      	movs	r1, #0
   1dda0:	5499      	strb	r1, [r3, r2]

				/* Disable interrupt */
				dac_hw->INTENCLR.reg = DAC_INTENCLR_EMPTY;
   1dda2:	68bb      	ldr	r3, [r7, #8]
   1dda4:	2202      	movs	r2, #2
   1dda6:	711a      	strb	r2, [r3, #4]
				dac_hw->INTFLAG.reg = DAC_INTFLAG_EMPTY;
   1dda8:	68bb      	ldr	r3, [r7, #8]
   1ddaa:	2202      	movs	r2, #2
   1ddac:	719a      	strb	r2, [r3, #6]
				system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_DAC);
   1ddae:	2019      	movs	r0, #25
   1ddb0:	4b0f      	ldr	r3, [pc, #60]	; (1ddf0 <_dac_interrupt_handler+0xf4>)
   1ddb2:	4798      	blx	r3

				if ((module->callback) &&
   1ddb4:	68fb      	ldr	r3, [r7, #12]
   1ddb6:	3314      	adds	r3, #20
   1ddb8:	2b00      	cmp	r3, #0
   1ddba:	d007      	beq.n	1ddcc <_dac_interrupt_handler+0xd0>
					 (module->callback_enable[DAC_CALLBACK_TRANSFER_COMPLETE])) {
   1ddbc:	68fb      	ldr	r3, [r7, #12]
   1ddbe:	7c9b      	ldrb	r3, [r3, #18]
				if ((module->callback) &&
   1ddc0:	2b00      	cmp	r3, #0
   1ddc2:	d003      	beq.n	1ddcc <_dac_interrupt_handler+0xd0>
					module->callback[DAC_CALLBACK_TRANSFER_COMPLETE](0);
   1ddc4:	68fb      	ldr	r3, [r7, #12]
   1ddc6:	69db      	ldr	r3, [r3, #28]
   1ddc8:	2000      	movs	r0, #0
   1ddca:	4798      	blx	r3
				}
			}
		}

		if ((module->callback) &&
   1ddcc:	68fb      	ldr	r3, [r7, #12]
   1ddce:	3314      	adds	r3, #20
   1ddd0:	2b00      	cmp	r3, #0
   1ddd2:	d007      	beq.n	1dde4 <_dac_interrupt_handler+0xe8>
			 (module->callback_enable[DAC_CALLBACK_DATA_EMPTY])) {
   1ddd4:	68fb      	ldr	r3, [r7, #12]
   1ddd6:	7c1b      	ldrb	r3, [r3, #16]
		if ((module->callback) &&
   1ddd8:	2b00      	cmp	r3, #0
   1ddda:	d003      	beq.n	1dde4 <_dac_interrupt_handler+0xe8>
			module->callback[DAC_CALLBACK_DATA_EMPTY](0);
   1dddc:	68fb      	ldr	r3, [r7, #12]
   1ddde:	695b      	ldr	r3, [r3, #20]
   1dde0:	2000      	movs	r0, #0
   1dde2:	4798      	blx	r3
		}
	}
}
   1dde4:	46c0      	nop			; (mov r8, r8)
   1dde6:	46bd      	mov	sp, r7
   1dde8:	b004      	add	sp, #16
   1ddea:	bd80      	pop	{r7, pc}
   1ddec:	200008ac 	.word	0x200008ac
   1ddf0:	0001dccd 	.word	0x0001dccd

0001ddf4 <DAC_Handler>:

/** Handler for the DAC hardware module interrupt. */
void DAC_Handler(void)
{
   1ddf4:	b580      	push	{r7, lr}
   1ddf6:	af00      	add	r7, sp, #0
	_dac_interrupt_handler(0);
   1ddf8:	2000      	movs	r0, #0
   1ddfa:	4b02      	ldr	r3, [pc, #8]	; (1de04 <DAC_Handler+0x10>)
   1ddfc:	4798      	blx	r3
}
   1ddfe:	46c0      	nop			; (mov r8, r8)
   1de00:	46bd      	mov	sp, r7
   1de02:	bd80      	pop	{r7, pc}
   1de04:	0001dcfd 	.word	0x0001dcfd

0001de08 <system_interrupt_enter_critical_section>:
{
   1de08:	b580      	push	{r7, lr}
   1de0a:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
   1de0c:	4b02      	ldr	r3, [pc, #8]	; (1de18 <system_interrupt_enter_critical_section+0x10>)
   1de0e:	4798      	blx	r3
}
   1de10:	46c0      	nop			; (mov r8, r8)
   1de12:	46bd      	mov	sp, r7
   1de14:	bd80      	pop	{r7, pc}
   1de16:	46c0      	nop			; (mov r8, r8)
   1de18:	0002386d 	.word	0x0002386d

0001de1c <system_interrupt_leave_critical_section>:
{
   1de1c:	b580      	push	{r7, lr}
   1de1e:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
   1de20:	4b02      	ldr	r3, [pc, #8]	; (1de2c <system_interrupt_leave_critical_section+0x10>)
   1de22:	4798      	blx	r3
}
   1de24:	46c0      	nop			; (mov r8, r8)
   1de26:	46bd      	mov	sp, r7
   1de28:	bd80      	pop	{r7, pc}
   1de2a:	46c0      	nop			; (mov r8, r8)
   1de2c:	000238c1 	.word	0x000238c1

0001de30 <DMAC_Handler>:
/**
 * \brief DMA interrupt service routine.
 *
 */
void DMAC_Handler( void )
{
   1de30:	b580      	push	{r7, lr}
   1de32:	b086      	sub	sp, #24
   1de34:	af00      	add	r7, sp, #0
	struct dma_resource *resource;
	uint8_t isr;
	uint32_t write_size;
	uint32_t total_size;

	system_interrupt_enter_critical_section();
   1de36:	4b49      	ldr	r3, [pc, #292]	; (1df5c <DMAC_Handler+0x12c>)
   1de38:	4798      	blx	r3

	/* Get Pending channel */
	active_channel =  DMAC->INTPEND.reg & DMAC_INTPEND_ID_Msk;
   1de3a:	4b49      	ldr	r3, [pc, #292]	; (1df60 <DMAC_Handler+0x130>)
   1de3c:	8c1b      	ldrh	r3, [r3, #32]
   1de3e:	b29b      	uxth	r3, r3
   1de40:	b2da      	uxtb	r2, r3
   1de42:	2317      	movs	r3, #23
   1de44:	18fb      	adds	r3, r7, r3
   1de46:	210f      	movs	r1, #15
   1de48:	400a      	ands	r2, r1
   1de4a:	701a      	strb	r2, [r3, #0]

	Assert(_dma_active_resource[active_channel]);

	/* Get active DMA resource based on channel */
	resource = _dma_active_resource[active_channel];
   1de4c:	2317      	movs	r3, #23
   1de4e:	18fb      	adds	r3, r7, r3
   1de50:	781a      	ldrb	r2, [r3, #0]
   1de52:	4b44      	ldr	r3, [pc, #272]	; (1df64 <DMAC_Handler+0x134>)
   1de54:	0092      	lsls	r2, r2, #2
   1de56:	58d3      	ldr	r3, [r2, r3]
   1de58:	613b      	str	r3, [r7, #16]

	/* Select the active channel */
	DMAC->CHID.reg = DMAC_CHID_ID(resource->channel_id);
   1de5a:	4a41      	ldr	r2, [pc, #260]	; (1df60 <DMAC_Handler+0x130>)
   1de5c:	693b      	ldr	r3, [r7, #16]
   1de5e:	781b      	ldrb	r3, [r3, #0]
   1de60:	210f      	movs	r1, #15
   1de62:	400b      	ands	r3, r1
   1de64:	b2d9      	uxtb	r1, r3
   1de66:	233f      	movs	r3, #63	; 0x3f
   1de68:	54d1      	strb	r1, [r2, r3]
	isr = DMAC->CHINTFLAG.reg;
   1de6a:	493d      	ldr	r1, [pc, #244]	; (1df60 <DMAC_Handler+0x130>)
   1de6c:	230f      	movs	r3, #15
   1de6e:	18fb      	adds	r3, r7, r3
   1de70:	224e      	movs	r2, #78	; 0x4e
   1de72:	5c8a      	ldrb	r2, [r1, r2]
   1de74:	701a      	strb	r2, [r3, #0]

	/* Calculate block transfer size of the DMA transfer */
	total_size = descriptor_section[resource->channel_id].BTCNT.reg;
   1de76:	693b      	ldr	r3, [r7, #16]
   1de78:	781b      	ldrb	r3, [r3, #0]
   1de7a:	4a3b      	ldr	r2, [pc, #236]	; (1df68 <DMAC_Handler+0x138>)
   1de7c:	011b      	lsls	r3, r3, #4
   1de7e:	18d3      	adds	r3, r2, r3
   1de80:	3302      	adds	r3, #2
   1de82:	881b      	ldrh	r3, [r3, #0]
   1de84:	b29b      	uxth	r3, r3
   1de86:	60bb      	str	r3, [r7, #8]
	write_size = _write_back_section[resource->channel_id].BTCNT.reg;
   1de88:	693b      	ldr	r3, [r7, #16]
   1de8a:	781b      	ldrb	r3, [r3, #0]
   1de8c:	4a37      	ldr	r2, [pc, #220]	; (1df6c <DMAC_Handler+0x13c>)
   1de8e:	011b      	lsls	r3, r3, #4
   1de90:	18d3      	adds	r3, r2, r3
   1de92:	3302      	adds	r3, #2
   1de94:	881b      	ldrh	r3, [r3, #0]
   1de96:	b29b      	uxth	r3, r3
   1de98:	607b      	str	r3, [r7, #4]
	resource->transfered_size = total_size - write_size;
   1de9a:	68ba      	ldr	r2, [r7, #8]
   1de9c:	687b      	ldr	r3, [r7, #4]
   1de9e:	1ad2      	subs	r2, r2, r3
   1dea0:	693b      	ldr	r3, [r7, #16]
   1dea2:	615a      	str	r2, [r3, #20]

	/* DMA channel interrupt handler */
	if (isr & DMAC_CHINTENCLR_TERR) {
   1dea4:	230f      	movs	r3, #15
   1dea6:	18fb      	adds	r3, r7, r3
   1dea8:	781b      	ldrb	r3, [r3, #0]
   1deaa:	2201      	movs	r2, #1
   1deac:	4013      	ands	r3, r2
   1deae:	d016      	beq.n	1dede <DMAC_Handler+0xae>
		/* Clear transfer error flag */
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_TERR;
   1deb0:	4a2b      	ldr	r2, [pc, #172]	; (1df60 <DMAC_Handler+0x130>)
   1deb2:	234e      	movs	r3, #78	; 0x4e
   1deb4:	2101      	movs	r1, #1
   1deb6:	54d1      	strb	r1, [r2, r3]

		/* Set I/O ERROR status */
		resource->job_status = STATUS_ERR_IO;
   1deb8:	693b      	ldr	r3, [r7, #16]
   1deba:	2210      	movs	r2, #16
   1debc:	745a      	strb	r2, [r3, #17]

		/* Execute the callback function */
		if ((resource->callback_enable & (1<<DMA_CALLBACK_TRANSFER_ERROR)) &&
   1debe:	693b      	ldr	r3, [r7, #16]
   1dec0:	7c1b      	ldrb	r3, [r3, #16]
   1dec2:	001a      	movs	r2, r3
   1dec4:	2301      	movs	r3, #1
   1dec6:	4013      	ands	r3, r2
   1dec8:	d042      	beq.n	1df50 <DMAC_Handler+0x120>
				(resource->callback[DMA_CALLBACK_TRANSFER_ERROR])) {
   1deca:	693b      	ldr	r3, [r7, #16]
   1decc:	685b      	ldr	r3, [r3, #4]
		if ((resource->callback_enable & (1<<DMA_CALLBACK_TRANSFER_ERROR)) &&
   1dece:	2b00      	cmp	r3, #0
   1ded0:	d03e      	beq.n	1df50 <DMAC_Handler+0x120>
			resource->callback[DMA_CALLBACK_TRANSFER_ERROR](resource);
   1ded2:	693b      	ldr	r3, [r7, #16]
   1ded4:	685b      	ldr	r3, [r3, #4]
   1ded6:	693a      	ldr	r2, [r7, #16]
   1ded8:	0010      	movs	r0, r2
   1deda:	4798      	blx	r3
   1dedc:	e038      	b.n	1df50 <DMAC_Handler+0x120>
		}
	} else if (isr & DMAC_CHINTENCLR_TCMPL) {
   1dede:	230f      	movs	r3, #15
   1dee0:	18fb      	adds	r3, r7, r3
   1dee2:	781b      	ldrb	r3, [r3, #0]
   1dee4:	2202      	movs	r2, #2
   1dee6:	4013      	ands	r3, r2
   1dee8:	d016      	beq.n	1df18 <DMAC_Handler+0xe8>
		/* Clear the transfer complete flag */
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_TCMPL;
   1deea:	4a1d      	ldr	r2, [pc, #116]	; (1df60 <DMAC_Handler+0x130>)
   1deec:	234e      	movs	r3, #78	; 0x4e
   1deee:	2102      	movs	r1, #2
   1def0:	54d1      	strb	r1, [r2, r3]

		/* Set job status */
		resource->job_status = STATUS_OK;
   1def2:	693b      	ldr	r3, [r7, #16]
   1def4:	2200      	movs	r2, #0
   1def6:	745a      	strb	r2, [r3, #17]

		/* Execute the callback function */
		if ((resource->callback_enable & (1 << DMA_CALLBACK_TRANSFER_DONE)) &&
   1def8:	693b      	ldr	r3, [r7, #16]
   1defa:	7c1b      	ldrb	r3, [r3, #16]
   1defc:	001a      	movs	r2, r3
   1defe:	2302      	movs	r3, #2
   1df00:	4013      	ands	r3, r2
   1df02:	d025      	beq.n	1df50 <DMAC_Handler+0x120>
				(resource->callback[DMA_CALLBACK_TRANSFER_DONE])) {
   1df04:	693b      	ldr	r3, [r7, #16]
   1df06:	689b      	ldr	r3, [r3, #8]
		if ((resource->callback_enable & (1 << DMA_CALLBACK_TRANSFER_DONE)) &&
   1df08:	2b00      	cmp	r3, #0
   1df0a:	d021      	beq.n	1df50 <DMAC_Handler+0x120>
			resource->callback[DMA_CALLBACK_TRANSFER_DONE](resource);
   1df0c:	693b      	ldr	r3, [r7, #16]
   1df0e:	689b      	ldr	r3, [r3, #8]
   1df10:	693a      	ldr	r2, [r7, #16]
   1df12:	0010      	movs	r0, r2
   1df14:	4798      	blx	r3
   1df16:	e01b      	b.n	1df50 <DMAC_Handler+0x120>
		}
	} else if (isr & DMAC_CHINTENCLR_SUSP) {
   1df18:	230f      	movs	r3, #15
   1df1a:	18fb      	adds	r3, r7, r3
   1df1c:	781b      	ldrb	r3, [r3, #0]
   1df1e:	2204      	movs	r2, #4
   1df20:	4013      	ands	r3, r2
   1df22:	d015      	beq.n	1df50 <DMAC_Handler+0x120>
		/* Clear channel suspend flag */
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_SUSP;
   1df24:	4a0e      	ldr	r2, [pc, #56]	; (1df60 <DMAC_Handler+0x130>)
   1df26:	234e      	movs	r3, #78	; 0x4e
   1df28:	2104      	movs	r1, #4
   1df2a:	54d1      	strb	r1, [r2, r3]

		/* Set job status */
		resource->job_status = STATUS_SUSPEND;
   1df2c:	693b      	ldr	r3, [r7, #16]
   1df2e:	2206      	movs	r2, #6
   1df30:	745a      	strb	r2, [r3, #17]

		/* Execute the callback function */
		if ((resource->callback_enable & (1 << DMA_CALLBACK_CHANNEL_SUSPEND)) &&
   1df32:	693b      	ldr	r3, [r7, #16]
   1df34:	7c1b      	ldrb	r3, [r3, #16]
   1df36:	001a      	movs	r2, r3
   1df38:	2304      	movs	r3, #4
   1df3a:	4013      	ands	r3, r2
   1df3c:	d008      	beq.n	1df50 <DMAC_Handler+0x120>
			(resource->callback[DMA_CALLBACK_CHANNEL_SUSPEND])){
   1df3e:	693b      	ldr	r3, [r7, #16]
   1df40:	68db      	ldr	r3, [r3, #12]
		if ((resource->callback_enable & (1 << DMA_CALLBACK_CHANNEL_SUSPEND)) &&
   1df42:	2b00      	cmp	r3, #0
   1df44:	d004      	beq.n	1df50 <DMAC_Handler+0x120>
			resource->callback[DMA_CALLBACK_CHANNEL_SUSPEND](resource);
   1df46:	693b      	ldr	r3, [r7, #16]
   1df48:	68db      	ldr	r3, [r3, #12]
   1df4a:	693a      	ldr	r2, [r7, #16]
   1df4c:	0010      	movs	r0, r2
   1df4e:	4798      	blx	r3
		}
	}

	system_interrupt_leave_critical_section();
   1df50:	4b07      	ldr	r3, [pc, #28]	; (1df70 <DMAC_Handler+0x140>)
   1df52:	4798      	blx	r3
}
   1df54:	46c0      	nop			; (mov r8, r8)
   1df56:	46bd      	mov	sp, r7
   1df58:	b006      	add	sp, #24
   1df5a:	bd80      	pop	{r7, pc}
   1df5c:	0001de09 	.word	0x0001de09
   1df60:	41004800 	.word	0x41004800
   1df64:	200002a0 	.word	0x200002a0
   1df68:	200008b0 	.word	0x200008b0
   1df6c:	20000250 	.word	0x20000250
   1df70:	0001de1d 	.word	0x0001de1d

0001df74 <system_gclk_chan_get_config_defaults>:
{
   1df74:	b580      	push	{r7, lr}
   1df76:	b082      	sub	sp, #8
   1df78:	af00      	add	r7, sp, #0
   1df7a:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   1df7c:	687b      	ldr	r3, [r7, #4]
   1df7e:	2200      	movs	r2, #0
   1df80:	701a      	strb	r2, [r3, #0]
}
   1df82:	46c0      	nop			; (mov r8, r8)
   1df84:	46bd      	mov	sp, r7
   1df86:	b002      	add	sp, #8
   1df88:	bd80      	pop	{r7, pc}
	...

0001df8c <system_apb_clock_set_mask>:
{
   1df8c:	b580      	push	{r7, lr}
   1df8e:	b082      	sub	sp, #8
   1df90:	af00      	add	r7, sp, #0
   1df92:	0002      	movs	r2, r0
   1df94:	6039      	str	r1, [r7, #0]
   1df96:	1dfb      	adds	r3, r7, #7
   1df98:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   1df9a:	1dfb      	adds	r3, r7, #7
   1df9c:	781b      	ldrb	r3, [r3, #0]
   1df9e:	2b01      	cmp	r3, #1
   1dfa0:	d00a      	beq.n	1dfb8 <system_apb_clock_set_mask+0x2c>
   1dfa2:	2b02      	cmp	r3, #2
   1dfa4:	d00f      	beq.n	1dfc6 <system_apb_clock_set_mask+0x3a>
   1dfa6:	2b00      	cmp	r3, #0
   1dfa8:	d114      	bne.n	1dfd4 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   1dfaa:	4b0e      	ldr	r3, [pc, #56]	; (1dfe4 <system_apb_clock_set_mask+0x58>)
   1dfac:	4a0d      	ldr	r2, [pc, #52]	; (1dfe4 <system_apb_clock_set_mask+0x58>)
   1dfae:	6991      	ldr	r1, [r2, #24]
   1dfb0:	683a      	ldr	r2, [r7, #0]
   1dfb2:	430a      	orrs	r2, r1
   1dfb4:	619a      	str	r2, [r3, #24]
			break;
   1dfb6:	e00f      	b.n	1dfd8 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   1dfb8:	4b0a      	ldr	r3, [pc, #40]	; (1dfe4 <system_apb_clock_set_mask+0x58>)
   1dfba:	4a0a      	ldr	r2, [pc, #40]	; (1dfe4 <system_apb_clock_set_mask+0x58>)
   1dfbc:	69d1      	ldr	r1, [r2, #28]
   1dfbe:	683a      	ldr	r2, [r7, #0]
   1dfc0:	430a      	orrs	r2, r1
   1dfc2:	61da      	str	r2, [r3, #28]
			break;
   1dfc4:	e008      	b.n	1dfd8 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   1dfc6:	4b07      	ldr	r3, [pc, #28]	; (1dfe4 <system_apb_clock_set_mask+0x58>)
   1dfc8:	4a06      	ldr	r2, [pc, #24]	; (1dfe4 <system_apb_clock_set_mask+0x58>)
   1dfca:	6a11      	ldr	r1, [r2, #32]
   1dfcc:	683a      	ldr	r2, [r7, #0]
   1dfce:	430a      	orrs	r2, r1
   1dfd0:	621a      	str	r2, [r3, #32]
			break;
   1dfd2:	e001      	b.n	1dfd8 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   1dfd4:	2317      	movs	r3, #23
   1dfd6:	e000      	b.n	1dfda <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   1dfd8:	2300      	movs	r3, #0
}
   1dfda:	0018      	movs	r0, r3
   1dfdc:	46bd      	mov	sp, r7
   1dfde:	b002      	add	sp, #8
   1dfe0:	bd80      	pop	{r7, pc}
   1dfe2:	46c0      	nop			; (mov r8, r8)
   1dfe4:	40000400 	.word	0x40000400

0001dfe8 <system_pinmux_get_config_defaults>:
{
   1dfe8:	b580      	push	{r7, lr}
   1dfea:	b082      	sub	sp, #8
   1dfec:	af00      	add	r7, sp, #0
   1dfee:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   1dff0:	687b      	ldr	r3, [r7, #4]
   1dff2:	2280      	movs	r2, #128	; 0x80
   1dff4:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   1dff6:	687b      	ldr	r3, [r7, #4]
   1dff8:	2200      	movs	r2, #0
   1dffa:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   1dffc:	687b      	ldr	r3, [r7, #4]
   1dffe:	2201      	movs	r2, #1
   1e000:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   1e002:	687b      	ldr	r3, [r7, #4]
   1e004:	2200      	movs	r2, #0
   1e006:	70da      	strb	r2, [r3, #3]
}
   1e008:	46c0      	nop			; (mov r8, r8)
   1e00a:	46bd      	mov	sp, r7
   1e00c:	b002      	add	sp, #8
   1e00e:	bd80      	pop	{r7, pc}

0001e010 <system_interrupt_enable>:
{
   1e010:	b580      	push	{r7, lr}
   1e012:	b082      	sub	sp, #8
   1e014:	af00      	add	r7, sp, #0
   1e016:	0002      	movs	r2, r0
   1e018:	1dfb      	adds	r3, r7, #7
   1e01a:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   1e01c:	4b06      	ldr	r3, [pc, #24]	; (1e038 <system_interrupt_enable+0x28>)
   1e01e:	1dfa      	adds	r2, r7, #7
   1e020:	7812      	ldrb	r2, [r2, #0]
   1e022:	0011      	movs	r1, r2
   1e024:	221f      	movs	r2, #31
   1e026:	400a      	ands	r2, r1
   1e028:	2101      	movs	r1, #1
   1e02a:	4091      	lsls	r1, r2
   1e02c:	000a      	movs	r2, r1
   1e02e:	601a      	str	r2, [r3, #0]
}
   1e030:	46c0      	nop			; (mov r8, r8)
   1e032:	46bd      	mov	sp, r7
   1e034:	b002      	add	sp, #8
   1e036:	bd80      	pop	{r7, pc}
   1e038:	e000e100 	.word	0xe000e100

0001e03c <_extint_get_eic_from_channel>:
{
   1e03c:	b580      	push	{r7, lr}
   1e03e:	b084      	sub	sp, #16
   1e040:	af00      	add	r7, sp, #0
   1e042:	0002      	movs	r2, r0
   1e044:	1dfb      	adds	r3, r7, #7
   1e046:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
   1e048:	230f      	movs	r3, #15
   1e04a:	18fb      	adds	r3, r7, r3
   1e04c:	1dfa      	adds	r2, r7, #7
   1e04e:	7812      	ldrb	r2, [r2, #0]
   1e050:	0952      	lsrs	r2, r2, #5
   1e052:	701a      	strb	r2, [r3, #0]
	if (eic_index < EIC_INST_NUM) {
   1e054:	230f      	movs	r3, #15
   1e056:	18fb      	adds	r3, r7, r3
   1e058:	781b      	ldrb	r3, [r3, #0]
   1e05a:	2b00      	cmp	r3, #0
   1e05c:	d10c      	bne.n	1e078 <_extint_get_eic_from_channel+0x3c>
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   1e05e:	4b09      	ldr	r3, [pc, #36]	; (1e084 <_extint_get_eic_from_channel+0x48>)
   1e060:	60bb      	str	r3, [r7, #8]
		return eics[eic_index];
   1e062:	230f      	movs	r3, #15
   1e064:	18fb      	adds	r3, r7, r3
   1e066:	781b      	ldrb	r3, [r3, #0]
   1e068:	009b      	lsls	r3, r3, #2
   1e06a:	2210      	movs	r2, #16
   1e06c:	4694      	mov	ip, r2
   1e06e:	44bc      	add	ip, r7
   1e070:	4463      	add	r3, ip
   1e072:	3b08      	subs	r3, #8
   1e074:	681b      	ldr	r3, [r3, #0]
   1e076:	e000      	b.n	1e07a <_extint_get_eic_from_channel+0x3e>
		return NULL;
   1e078:	2300      	movs	r3, #0
}
   1e07a:	0018      	movs	r0, r3
   1e07c:	46bd      	mov	sp, r7
   1e07e:	b004      	add	sp, #16
   1e080:	bd80      	pop	{r7, pc}
   1e082:	46c0      	nop			; (mov r8, r8)
   1e084:	40001800 	.word	0x40001800

0001e088 <extint_is_syncing>:
 *
 * \retval true  If the module synchronization is ongoing
 * \retval false If the module has completed synchronization
 */
static inline bool extint_is_syncing(void)
{
   1e088:	b580      	push	{r7, lr}
   1e08a:	b082      	sub	sp, #8
   1e08c:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   1e08e:	4b0f      	ldr	r3, [pc, #60]	; (1e0cc <extint_is_syncing+0x44>)
   1e090:	603b      	str	r3, [r7, #0]

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   1e092:	2300      	movs	r3, #0
   1e094:	607b      	str	r3, [r7, #4]
   1e096:	e011      	b.n	1e0bc <extint_is_syncing+0x34>
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
   1e098:	687b      	ldr	r3, [r7, #4]
   1e09a:	009b      	lsls	r3, r3, #2
   1e09c:	2208      	movs	r2, #8
   1e09e:	4694      	mov	ip, r2
   1e0a0:	44bc      	add	ip, r7
   1e0a2:	4463      	add	r3, ip
   1e0a4:	3b08      	subs	r3, #8
   1e0a6:	681b      	ldr	r3, [r3, #0]
   1e0a8:	785b      	ldrb	r3, [r3, #1]
   1e0aa:	b2db      	uxtb	r3, r3
   1e0ac:	b25b      	sxtb	r3, r3
   1e0ae:	2b00      	cmp	r3, #0
   1e0b0:	da01      	bge.n	1e0b6 <extint_is_syncing+0x2e>
			return true;
   1e0b2:	2301      	movs	r3, #1
   1e0b4:	e006      	b.n	1e0c4 <extint_is_syncing+0x3c>
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   1e0b6:	687b      	ldr	r3, [r7, #4]
   1e0b8:	3301      	adds	r3, #1
   1e0ba:	607b      	str	r3, [r7, #4]
   1e0bc:	687b      	ldr	r3, [r7, #4]
   1e0be:	2b00      	cmp	r3, #0
   1e0c0:	d0ea      	beq.n	1e098 <extint_is_syncing+0x10>
		}
	}
	return false;
   1e0c2:	2300      	movs	r3, #0
}
   1e0c4:	0018      	movs	r0, r3
   1e0c6:	46bd      	mov	sp, r7
   1e0c8:	b002      	add	sp, #8
   1e0ca:	bd80      	pop	{r7, pc}
   1e0cc:	40001800 	.word	0x40001800

0001e0d0 <_system_extint_init>:
 * \note When SYSTEM module is used, this function will be invoked by
 * \ref system_init() automatically if the module is included.
 */
void _system_extint_init(void);
void _system_extint_init(void)
{
   1e0d0:	b580      	push	{r7, lr}
   1e0d2:	b084      	sub	sp, #16
   1e0d4:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   1e0d6:	4b2d      	ldr	r3, [pc, #180]	; (1e18c <_system_extint_init+0xbc>)
   1e0d8:	607b      	str	r3, [r7, #4]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_EIC);
   1e0da:	2140      	movs	r1, #64	; 0x40
   1e0dc:	2000      	movs	r0, #0
   1e0de:	4b2c      	ldr	r3, [pc, #176]	; (1e190 <_system_extint_init+0xc0>)
   1e0e0:	4798      	blx	r3

	/* Configure the generic clock for the module and enable it */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   1e0e2:	003b      	movs	r3, r7
   1e0e4:	0018      	movs	r0, r3
   1e0e6:	4b2b      	ldr	r3, [pc, #172]	; (1e194 <_system_extint_init+0xc4>)
   1e0e8:	4798      	blx	r3
	gclk_chan_conf.source_generator = EXTINT_CLOCK_SOURCE;
   1e0ea:	003b      	movs	r3, r7
   1e0ec:	2206      	movs	r2, #6
   1e0ee:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
   1e0f0:	003b      	movs	r3, r7
   1e0f2:	0019      	movs	r1, r3
   1e0f4:	2005      	movs	r0, #5
   1e0f6:	4b28      	ldr	r3, [pc, #160]	; (1e198 <_system_extint_init+0xc8>)
   1e0f8:	4798      	blx	r3

	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);
   1e0fa:	2005      	movs	r0, #5
   1e0fc:	4b27      	ldr	r3, [pc, #156]	; (1e19c <_system_extint_init+0xcc>)
   1e0fe:	4798      	blx	r3

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   1e100:	2300      	movs	r3, #0
   1e102:	60fb      	str	r3, [r7, #12]
   1e104:	e018      	b.n	1e138 <_system_extint_init+0x68>
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
   1e106:	68fb      	ldr	r3, [r7, #12]
   1e108:	009b      	lsls	r3, r3, #2
   1e10a:	2210      	movs	r2, #16
   1e10c:	4694      	mov	ip, r2
   1e10e:	44bc      	add	ip, r7
   1e110:	4463      	add	r3, ip
   1e112:	3b0c      	subs	r3, #12
   1e114:	681a      	ldr	r2, [r3, #0]
   1e116:	68fb      	ldr	r3, [r7, #12]
   1e118:	009b      	lsls	r3, r3, #2
   1e11a:	2110      	movs	r1, #16
   1e11c:	468c      	mov	ip, r1
   1e11e:	44bc      	add	ip, r7
   1e120:	4463      	add	r3, ip
   1e122:	3b0c      	subs	r3, #12
   1e124:	681b      	ldr	r3, [r3, #0]
   1e126:	781b      	ldrb	r3, [r3, #0]
   1e128:	b2db      	uxtb	r3, r3
   1e12a:	2101      	movs	r1, #1
   1e12c:	430b      	orrs	r3, r1
   1e12e:	b2db      	uxtb	r3, r3
   1e130:	7013      	strb	r3, [r2, #0]
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   1e132:	68fb      	ldr	r3, [r7, #12]
   1e134:	3301      	adds	r3, #1
   1e136:	60fb      	str	r3, [r7, #12]
   1e138:	68fb      	ldr	r3, [r7, #12]
   1e13a:	2b00      	cmp	r3, #0
   1e13c:	d0e3      	beq.n	1e106 <_system_extint_init+0x36>
	}

	while (extint_is_syncing()) {
   1e13e:	46c0      	nop			; (mov r8, r8)
   1e140:	4b17      	ldr	r3, [pc, #92]	; (1e1a0 <_system_extint_init+0xd0>)
   1e142:	4798      	blx	r3
   1e144:	1e03      	subs	r3, r0, #0
   1e146:	d1fb      	bne.n	1e140 <_system_extint_init+0x70>
	}

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
   1e148:	230b      	movs	r3, #11
   1e14a:	18fb      	adds	r3, r7, r3
   1e14c:	2200      	movs	r2, #0
   1e14e:	701a      	strb	r2, [r3, #0]
   1e150:	e00d      	b.n	1e16e <_system_extint_init+0x9e>
		_extint_dev.callbacks[j] = NULL;
   1e152:	230b      	movs	r3, #11
   1e154:	18fb      	adds	r3, r7, r3
   1e156:	781a      	ldrb	r2, [r3, #0]
   1e158:	4b12      	ldr	r3, [pc, #72]	; (1e1a4 <_system_extint_init+0xd4>)
   1e15a:	0092      	lsls	r2, r2, #2
   1e15c:	2100      	movs	r1, #0
   1e15e:	50d1      	str	r1, [r2, r3]
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
   1e160:	230b      	movs	r3, #11
   1e162:	18fb      	adds	r3, r7, r3
   1e164:	781a      	ldrb	r2, [r3, #0]
   1e166:	230b      	movs	r3, #11
   1e168:	18fb      	adds	r3, r7, r3
   1e16a:	3201      	adds	r2, #1
   1e16c:	701a      	strb	r2, [r3, #0]
   1e16e:	230b      	movs	r3, #11
   1e170:	18fb      	adds	r3, r7, r3
   1e172:	781b      	ldrb	r3, [r3, #0]
   1e174:	2b0f      	cmp	r3, #15
   1e176:	d9ec      	bls.n	1e152 <_system_extint_init+0x82>
	}
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EIC);
   1e178:	2004      	movs	r0, #4
   1e17a:	4b0b      	ldr	r3, [pc, #44]	; (1e1a8 <_system_extint_init+0xd8>)
   1e17c:	4798      	blx	r3
#endif

	/* Enables the driver for further use */
	_extint_enable();
   1e17e:	4b0b      	ldr	r3, [pc, #44]	; (1e1ac <_system_extint_init+0xdc>)
   1e180:	4798      	blx	r3
}
   1e182:	46c0      	nop			; (mov r8, r8)
   1e184:	46bd      	mov	sp, r7
   1e186:	b004      	add	sp, #16
   1e188:	bd80      	pop	{r7, pc}
   1e18a:	46c0      	nop			; (mov r8, r8)
   1e18c:	40001800 	.word	0x40001800
   1e190:	0001df8d 	.word	0x0001df8d
   1e194:	0001df75 	.word	0x0001df75
   1e198:	00024625 	.word	0x00024625
   1e19c:	00024669 	.word	0x00024669
   1e1a0:	0001e089 	.word	0x0001e089
   1e1a4:	20000900 	.word	0x20000900
   1e1a8:	0001e011 	.word	0x0001e011
   1e1ac:	0001e1b1 	.word	0x0001e1b1

0001e1b0 <_extint_enable>:
 *
 * Enables EIC modules.
 * Registered callback list will not be affected if callback mode is used.
 */
void _extint_enable(void)
{
   1e1b0:	b580      	push	{r7, lr}
   1e1b2:	b082      	sub	sp, #8
   1e1b4:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   1e1b6:	4b15      	ldr	r3, [pc, #84]	; (1e20c <_extint_enable+0x5c>)
   1e1b8:	603b      	str	r3, [r7, #0]

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   1e1ba:	2300      	movs	r3, #0
   1e1bc:	607b      	str	r3, [r7, #4]
   1e1be:	e018      	b.n	1e1f2 <_extint_enable+0x42>
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
   1e1c0:	687b      	ldr	r3, [r7, #4]
   1e1c2:	009b      	lsls	r3, r3, #2
   1e1c4:	2208      	movs	r2, #8
   1e1c6:	4694      	mov	ip, r2
   1e1c8:	44bc      	add	ip, r7
   1e1ca:	4463      	add	r3, ip
   1e1cc:	3b08      	subs	r3, #8
   1e1ce:	681a      	ldr	r2, [r3, #0]
   1e1d0:	687b      	ldr	r3, [r7, #4]
   1e1d2:	009b      	lsls	r3, r3, #2
   1e1d4:	2108      	movs	r1, #8
   1e1d6:	468c      	mov	ip, r1
   1e1d8:	44bc      	add	ip, r7
   1e1da:	4463      	add	r3, ip
   1e1dc:	3b08      	subs	r3, #8
   1e1de:	681b      	ldr	r3, [r3, #0]
   1e1e0:	781b      	ldrb	r3, [r3, #0]
   1e1e2:	b2db      	uxtb	r3, r3
   1e1e4:	2102      	movs	r1, #2
   1e1e6:	430b      	orrs	r3, r1
   1e1e8:	b2db      	uxtb	r3, r3
   1e1ea:	7013      	strb	r3, [r2, #0]
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   1e1ec:	687b      	ldr	r3, [r7, #4]
   1e1ee:	3301      	adds	r3, #1
   1e1f0:	607b      	str	r3, [r7, #4]
   1e1f2:	687b      	ldr	r3, [r7, #4]
   1e1f4:	2b00      	cmp	r3, #0
   1e1f6:	d0e3      	beq.n	1e1c0 <_extint_enable+0x10>
	}

	while (extint_is_syncing()) {
   1e1f8:	46c0      	nop			; (mov r8, r8)
   1e1fa:	4b05      	ldr	r3, [pc, #20]	; (1e210 <_extint_enable+0x60>)
   1e1fc:	4798      	blx	r3
   1e1fe:	1e03      	subs	r3, r0, #0
   1e200:	d1fb      	bne.n	1e1fa <_extint_enable+0x4a>
		/* Wait for all hardware modules to complete synchronization */
	}
}
   1e202:	46c0      	nop			; (mov r8, r8)
   1e204:	46bd      	mov	sp, r7
   1e206:	b002      	add	sp, #8
   1e208:	bd80      	pop	{r7, pc}
   1e20a:	46c0      	nop			; (mov r8, r8)
   1e20c:	40001800 	.word	0x40001800
   1e210:	0001e089 	.word	0x0001e089

0001e214 <extint_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
void extint_chan_get_config_defaults(
		struct extint_chan_conf *const config)
{
   1e214:	b580      	push	{r7, lr}
   1e216:	b082      	sub	sp, #8
   1e218:	af00      	add	r7, sp, #0
   1e21a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
   1e21c:	687b      	ldr	r3, [r7, #4]
   1e21e:	2200      	movs	r2, #0
   1e220:	601a      	str	r2, [r3, #0]
	config->gpio_pin_mux        = 0;
   1e222:	687b      	ldr	r3, [r7, #4]
   1e224:	2200      	movs	r2, #0
   1e226:	605a      	str	r2, [r3, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
   1e228:	687b      	ldr	r3, [r7, #4]
   1e22a:	2201      	movs	r2, #1
   1e22c:	721a      	strb	r2, [r3, #8]
	config->wake_if_sleeping    = true;
   1e22e:	687b      	ldr	r3, [r7, #4]
   1e230:	2201      	movs	r2, #1
   1e232:	725a      	strb	r2, [r3, #9]
	config->filter_input_signal = false;
   1e234:	687b      	ldr	r3, [r7, #4]
   1e236:	2200      	movs	r2, #0
   1e238:	729a      	strb	r2, [r3, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
   1e23a:	687b      	ldr	r3, [r7, #4]
   1e23c:	2202      	movs	r2, #2
   1e23e:	72da      	strb	r2, [r3, #11]
}
   1e240:	46c0      	nop			; (mov r8, r8)
   1e242:	46bd      	mov	sp, r7
   1e244:	b002      	add	sp, #8
   1e246:	bd80      	pop	{r7, pc}

0001e248 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
   1e248:	b580      	push	{r7, lr}
   1e24a:	b086      	sub	sp, #24
   1e24c:	af00      	add	r7, sp, #0
   1e24e:	0002      	movs	r2, r0
   1e250:	6039      	str	r1, [r7, #0]
   1e252:	1dfb      	adds	r3, r7, #7
   1e254:	701a      	strb	r2, [r3, #0]
	Assert(!(!system_gclk_gen_is_enabled(EXTINT_CLOCK_SOURCE) &&
		_extint_is_gclk_required(config->filter_input_signal,
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
   1e256:	2308      	movs	r3, #8
   1e258:	18fb      	adds	r3, r7, r3
   1e25a:	0018      	movs	r0, r3
   1e25c:	4b36      	ldr	r3, [pc, #216]	; (1e338 <extint_chan_set_config+0xf0>)
   1e25e:	4798      	blx	r3

	pinmux_config.mux_position = config->gpio_pin_mux;
   1e260:	683b      	ldr	r3, [r7, #0]
   1e262:	685b      	ldr	r3, [r3, #4]
   1e264:	b2da      	uxtb	r2, r3
   1e266:	2308      	movs	r3, #8
   1e268:	18fb      	adds	r3, r7, r3
   1e26a:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   1e26c:	2308      	movs	r3, #8
   1e26e:	18fb      	adds	r3, r7, r3
   1e270:	2200      	movs	r2, #0
   1e272:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
   1e274:	683b      	ldr	r3, [r7, #0]
   1e276:	7a1a      	ldrb	r2, [r3, #8]
   1e278:	2308      	movs	r3, #8
   1e27a:	18fb      	adds	r3, r7, r3
   1e27c:	709a      	strb	r2, [r3, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
   1e27e:	683b      	ldr	r3, [r7, #0]
   1e280:	681b      	ldr	r3, [r3, #0]
   1e282:	b2db      	uxtb	r3, r3
   1e284:	2208      	movs	r2, #8
   1e286:	18ba      	adds	r2, r7, r2
   1e288:	0011      	movs	r1, r2
   1e28a:	0018      	movs	r0, r3
   1e28c:	4b2b      	ldr	r3, [pc, #172]	; (1e33c <extint_chan_set_config+0xf4>)
   1e28e:	4798      	blx	r3

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);
   1e290:	1dfb      	adds	r3, r7, #7
   1e292:	781b      	ldrb	r3, [r3, #0]
   1e294:	0018      	movs	r0, r3
   1e296:	4b2a      	ldr	r3, [pc, #168]	; (1e340 <extint_chan_set_config+0xf8>)
   1e298:	4798      	blx	r3
   1e29a:	0003      	movs	r3, r0
   1e29c:	613b      	str	r3, [r7, #16]

	uint32_t config_pos = (4 * (channel % 8));
   1e29e:	1dfb      	adds	r3, r7, #7
   1e2a0:	781b      	ldrb	r3, [r3, #0]
   1e2a2:	2207      	movs	r2, #7
   1e2a4:	4013      	ands	r3, r2
   1e2a6:	009b      	lsls	r3, r3, #2
   1e2a8:	60fb      	str	r3, [r7, #12]
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
   1e2aa:	683b      	ldr	r3, [r7, #0]
   1e2ac:	7adb      	ldrb	r3, [r3, #11]
   1e2ae:	617b      	str	r3, [r7, #20]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
   1e2b0:	683b      	ldr	r3, [r7, #0]
   1e2b2:	7a9b      	ldrb	r3, [r3, #10]
   1e2b4:	2b00      	cmp	r3, #0
   1e2b6:	d003      	beq.n	1e2c0 <extint_chan_set_config+0x78>
		new_config |= EIC_CONFIG_FILTEN0;
   1e2b8:	697b      	ldr	r3, [r7, #20]
   1e2ba:	2208      	movs	r2, #8
   1e2bc:	4313      	orrs	r3, r2
   1e2be:	617b      	str	r3, [r7, #20]
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
   1e2c0:	1dfb      	adds	r3, r7, #7
   1e2c2:	781b      	ldrb	r3, [r3, #0]
   1e2c4:	08db      	lsrs	r3, r3, #3
   1e2c6:	b2db      	uxtb	r3, r3
   1e2c8:	0018      	movs	r0, r3
		= (EIC_module->CONFIG[channel / 8].reg &
   1e2ca:	1dfb      	adds	r3, r7, #7
   1e2cc:	781b      	ldrb	r3, [r3, #0]
   1e2ce:	08db      	lsrs	r3, r3, #3
   1e2d0:	b2db      	uxtb	r3, r3
   1e2d2:	001a      	movs	r2, r3
   1e2d4:	693b      	ldr	r3, [r7, #16]
   1e2d6:	3206      	adds	r2, #6
   1e2d8:	0092      	lsls	r2, r2, #2
   1e2da:	58d3      	ldr	r3, [r2, r3]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
   1e2dc:	210f      	movs	r1, #15
   1e2de:	68fa      	ldr	r2, [r7, #12]
   1e2e0:	4091      	lsls	r1, r2
   1e2e2:	000a      	movs	r2, r1
   1e2e4:	43d2      	mvns	r2, r2
		= (EIC_module->CONFIG[channel / 8].reg &
   1e2e6:	401a      	ands	r2, r3
			(new_config << config_pos);
   1e2e8:	6979      	ldr	r1, [r7, #20]
   1e2ea:	68fb      	ldr	r3, [r7, #12]
   1e2ec:	4099      	lsls	r1, r3
   1e2ee:	000b      	movs	r3, r1
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
   1e2f0:	431a      	orrs	r2, r3
   1e2f2:	0011      	movs	r1, r2
		= (EIC_module->CONFIG[channel / 8].reg &
   1e2f4:	693b      	ldr	r3, [r7, #16]
   1e2f6:	1d82      	adds	r2, r0, #6
   1e2f8:	0092      	lsls	r2, r2, #2
   1e2fa:	50d1      	str	r1, [r2, r3]

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
   1e2fc:	683b      	ldr	r3, [r7, #0]
   1e2fe:	7a5b      	ldrb	r3, [r3, #9]
   1e300:	2b00      	cmp	r3, #0
   1e302:	d00a      	beq.n	1e31a <extint_chan_set_config+0xd2>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
   1e304:	693b      	ldr	r3, [r7, #16]
   1e306:	695a      	ldr	r2, [r3, #20]
   1e308:	1dfb      	adds	r3, r7, #7
   1e30a:	781b      	ldrb	r3, [r3, #0]
   1e30c:	2101      	movs	r1, #1
   1e30e:	4099      	lsls	r1, r3
   1e310:	000b      	movs	r3, r1
   1e312:	431a      	orrs	r2, r3
   1e314:	693b      	ldr	r3, [r7, #16]
   1e316:	615a      	str	r2, [r3, #20]
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
	}
}
   1e318:	e00a      	b.n	1e330 <extint_chan_set_config+0xe8>
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
   1e31a:	693b      	ldr	r3, [r7, #16]
   1e31c:	695b      	ldr	r3, [r3, #20]
   1e31e:	1dfa      	adds	r2, r7, #7
   1e320:	7812      	ldrb	r2, [r2, #0]
   1e322:	2101      	movs	r1, #1
   1e324:	4091      	lsls	r1, r2
   1e326:	000a      	movs	r2, r1
   1e328:	43d2      	mvns	r2, r2
   1e32a:	401a      	ands	r2, r3
   1e32c:	693b      	ldr	r3, [r7, #16]
   1e32e:	615a      	str	r2, [r3, #20]
}
   1e330:	46c0      	nop			; (mov r8, r8)
   1e332:	46bd      	mov	sp, r7
   1e334:	b006      	add	sp, #24
   1e336:	bd80      	pop	{r7, pc}
   1e338:	0001dfe9 	.word	0x0001dfe9
   1e33c:	00024911 	.word	0x00024911
   1e340:	0001e03d 	.word	0x0001e03d

0001e344 <_rtc_interrupt_handler>:
 * \internal Interrupt handler for RTC
 *
 * \param [in] instance_index  Default value 0
 */
static void _rtc_interrupt_handler(const uint32_t instance_index)
{
   1e344:	b580      	push	{r7, lr}
   1e346:	b086      	sub	sp, #24
   1e348:	af00      	add	r7, sp, #0
   1e34a:	6078      	str	r0, [r7, #4]
	struct rtc_module *module = _rtc_instance[instance_index];
   1e34c:	4b31      	ldr	r3, [pc, #196]	; (1e414 <_rtc_interrupt_handler+0xd0>)
   1e34e:	687a      	ldr	r2, [r7, #4]
   1e350:	0092      	lsls	r2, r2, #2
   1e352:	58d3      	ldr	r3, [r2, r3]
   1e354:	617b      	str	r3, [r7, #20]

	Rtc *const rtc_module = module->hw;
   1e356:	697b      	ldr	r3, [r7, #20]
   1e358:	681b      	ldr	r3, [r3, #0]
   1e35a:	613b      	str	r3, [r7, #16]

	/* Combine callback registered and enabled masks */
	uint16_t callback_mask = module->enabled_callback;
   1e35c:	230e      	movs	r3, #14
   1e35e:	18fb      	adds	r3, r7, r3
   1e360:	697a      	ldr	r2, [r7, #20]
   1e362:	8ad2      	ldrh	r2, [r2, #22]
   1e364:	801a      	strh	r2, [r3, #0]
	callback_mask &= module->registered_callback;
   1e366:	697b      	ldr	r3, [r7, #20]
   1e368:	8a9b      	ldrh	r3, [r3, #20]
   1e36a:	b29a      	uxth	r2, r3
   1e36c:	230e      	movs	r3, #14
   1e36e:	18fb      	adds	r3, r7, r3
   1e370:	210e      	movs	r1, #14
   1e372:	1879      	adds	r1, r7, r1
   1e374:	8809      	ldrh	r1, [r1, #0]
   1e376:	400a      	ands	r2, r1
   1e378:	801a      	strh	r2, [r3, #0]

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = rtc_module->MODE0.INTFLAG.reg;
   1e37a:	693b      	ldr	r3, [r7, #16]
   1e37c:	7a1b      	ldrb	r3, [r3, #8]
   1e37e:	b2da      	uxtb	r2, r3
   1e380:	230c      	movs	r3, #12
   1e382:	18fb      	adds	r3, r7, r3
   1e384:	801a      	strh	r2, [r3, #0]
	interrupt_status &= rtc_module->MODE0.INTENSET.reg;
   1e386:	693b      	ldr	r3, [r7, #16]
   1e388:	79db      	ldrb	r3, [r3, #7]
   1e38a:	b2db      	uxtb	r3, r3
   1e38c:	b29a      	uxth	r2, r3
   1e38e:	230c      	movs	r3, #12
   1e390:	18fb      	adds	r3, r7, r3
   1e392:	210c      	movs	r1, #12
   1e394:	1879      	adds	r1, r7, r1
   1e396:	8809      	ldrh	r1, [r1, #0]
   1e398:	400a      	ands	r2, r1
   1e39a:	801a      	strh	r2, [r3, #0]

	if (interrupt_status & RTC_MODE0_INTFLAG_OVF) {
   1e39c:	230c      	movs	r3, #12
   1e39e:	18fb      	adds	r3, r7, r3
   1e3a0:	881b      	ldrh	r3, [r3, #0]
   1e3a2:	2280      	movs	r2, #128	; 0x80
   1e3a4:	4013      	ands	r3, r2
   1e3a6:	d00c      	beq.n	1e3c2 <_rtc_interrupt_handler+0x7e>
		/* Overflow interrupt */
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_OVERFLOW)) {
   1e3a8:	230e      	movs	r3, #14
   1e3aa:	18fb      	adds	r3, r7, r3
   1e3ac:	881b      	ldrh	r3, [r3, #0]
   1e3ae:	2204      	movs	r2, #4
   1e3b0:	4013      	ands	r3, r2
   1e3b2:	d002      	beq.n	1e3ba <_rtc_interrupt_handler+0x76>
			module->callbacks[RTC_COUNT_CALLBACK_OVERFLOW]();
   1e3b4:	697b      	ldr	r3, [r7, #20]
   1e3b6:	691b      	ldr	r3, [r3, #16]
   1e3b8:	4798      	blx	r3
		}

		/* Clear interrupt flag */
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_OVF;
   1e3ba:	693b      	ldr	r3, [r7, #16]
   1e3bc:	2280      	movs	r2, #128	; 0x80
   1e3be:	721a      	strb	r2, [r3, #8]
		}
		/* Clear interrupt flag */
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_CMP(1 << 5);
		#endif
	}
}
   1e3c0:	e024      	b.n	1e40c <_rtc_interrupt_handler+0xc8>
	} else if (interrupt_status & RTC_MODE1_INTFLAG_CMP(1 << 0)) {
   1e3c2:	230c      	movs	r3, #12
   1e3c4:	18fb      	adds	r3, r7, r3
   1e3c6:	881b      	ldrh	r3, [r3, #0]
   1e3c8:	2201      	movs	r2, #1
   1e3ca:	4013      	ands	r3, r2
   1e3cc:	d00c      	beq.n	1e3e8 <_rtc_interrupt_handler+0xa4>
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_COMPARE_0)) {
   1e3ce:	230e      	movs	r3, #14
   1e3d0:	18fb      	adds	r3, r7, r3
   1e3d2:	881b      	ldrh	r3, [r3, #0]
   1e3d4:	2201      	movs	r2, #1
   1e3d6:	4013      	ands	r3, r2
   1e3d8:	d002      	beq.n	1e3e0 <_rtc_interrupt_handler+0x9c>
			module->callbacks[RTC_COUNT_CALLBACK_COMPARE_0]();
   1e3da:	697b      	ldr	r3, [r7, #20]
   1e3dc:	689b      	ldr	r3, [r3, #8]
   1e3de:	4798      	blx	r3
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_CMP(1 << 0);
   1e3e0:	693b      	ldr	r3, [r7, #16]
   1e3e2:	2201      	movs	r2, #1
   1e3e4:	721a      	strb	r2, [r3, #8]
}
   1e3e6:	e011      	b.n	1e40c <_rtc_interrupt_handler+0xc8>
	} else if (interrupt_status & RTC_MODE1_INTFLAG_CMP(1 << 1)) {
   1e3e8:	230c      	movs	r3, #12
   1e3ea:	18fb      	adds	r3, r7, r3
   1e3ec:	881b      	ldrh	r3, [r3, #0]
   1e3ee:	2202      	movs	r2, #2
   1e3f0:	4013      	ands	r3, r2
   1e3f2:	d00b      	beq.n	1e40c <_rtc_interrupt_handler+0xc8>
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_COMPARE_1)) {
   1e3f4:	230e      	movs	r3, #14
   1e3f6:	18fb      	adds	r3, r7, r3
   1e3f8:	881b      	ldrh	r3, [r3, #0]
   1e3fa:	2202      	movs	r2, #2
   1e3fc:	4013      	ands	r3, r2
   1e3fe:	d002      	beq.n	1e406 <_rtc_interrupt_handler+0xc2>
			module->callbacks[RTC_COUNT_CALLBACK_COMPARE_1]();
   1e400:	697b      	ldr	r3, [r7, #20]
   1e402:	68db      	ldr	r3, [r3, #12]
   1e404:	4798      	blx	r3
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_CMP(1 << 1);
   1e406:	693b      	ldr	r3, [r7, #16]
   1e408:	2202      	movs	r2, #2
   1e40a:	721a      	strb	r2, [r3, #8]
}
   1e40c:	46c0      	nop			; (mov r8, r8)
   1e40e:	46bd      	mov	sp, r7
   1e410:	b006      	add	sp, #24
   1e412:	bd80      	pop	{r7, pc}
   1e414:	20000940 	.word	0x20000940

0001e418 <RTC_Handler>:
/**
 * \internal ISR handler for RTC
 */
#if (RTC_INST_NUM == 1)
void RTC_Handler(void)
{
   1e418:	b580      	push	{r7, lr}
   1e41a:	af00      	add	r7, sp, #0
	_rtc_interrupt_handler(0);
   1e41c:	2000      	movs	r0, #0
   1e41e:	4b02      	ldr	r3, [pc, #8]	; (1e428 <RTC_Handler+0x10>)
   1e420:	4798      	blx	r3
}
   1e422:	46c0      	nop			; (mov r8, r8)
   1e424:	46bd      	mov	sp, r7
   1e426:	bd80      	pop	{r7, pc}
   1e428:	0001e345 	.word	0x0001e345

0001e42c <system_gclk_chan_get_config_defaults>:
{
   1e42c:	b580      	push	{r7, lr}
   1e42e:	b082      	sub	sp, #8
   1e430:	af00      	add	r7, sp, #0
   1e432:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   1e434:	687b      	ldr	r3, [r7, #4]
   1e436:	2200      	movs	r2, #0
   1e438:	701a      	strb	r2, [r3, #0]
}
   1e43a:	46c0      	nop			; (mov r8, r8)
   1e43c:	46bd      	mov	sp, r7
   1e43e:	b002      	add	sp, #8
   1e440:	bd80      	pop	{r7, pc}

0001e442 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
   1e442:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e444:	b08d      	sub	sp, #52	; 0x34
   1e446:	af00      	add	r7, sp, #0
   1e448:	60b8      	str	r0, [r7, #8]
   1e44a:	60f9      	str	r1, [r7, #12]
   1e44c:	603a      	str	r2, [r7, #0]
   1e44e:	607b      	str	r3, [r7, #4]
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
   1e450:	2300      	movs	r3, #0
   1e452:	2400      	movs	r4, #0
   1e454:	623b      	str	r3, [r7, #32]
   1e456:	627c      	str	r4, [r7, #36]	; 0x24
   1e458:	2300      	movs	r3, #0
   1e45a:	2400      	movs	r4, #0
   1e45c:	61bb      	str	r3, [r7, #24]
   1e45e:	61fc      	str	r4, [r7, #28]
	for (i = 63; i >= 0; i--) {
   1e460:	233f      	movs	r3, #63	; 0x3f
   1e462:	62fb      	str	r3, [r7, #44]	; 0x2c
   1e464:	e053      	b.n	1e50e <long_division+0xcc>
		bit_shift = (uint64_t)1 << i;
   1e466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1e468:	3b20      	subs	r3, #32
   1e46a:	2b00      	cmp	r3, #0
   1e46c:	db04      	blt.n	1e478 <long_division+0x36>
   1e46e:	2201      	movs	r2, #1
   1e470:	409a      	lsls	r2, r3
   1e472:	0013      	movs	r3, r2
   1e474:	617b      	str	r3, [r7, #20]
   1e476:	e00b      	b.n	1e490 <long_division+0x4e>
   1e478:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1e47a:	2220      	movs	r2, #32
   1e47c:	1ad3      	subs	r3, r2, r3
   1e47e:	2201      	movs	r2, #1
   1e480:	40da      	lsrs	r2, r3
   1e482:	0013      	movs	r3, r2
   1e484:	2100      	movs	r1, #0
   1e486:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   1e488:	4091      	lsls	r1, r2
   1e48a:	000a      	movs	r2, r1
   1e48c:	4313      	orrs	r3, r2
   1e48e:	617b      	str	r3, [r7, #20]
   1e490:	2201      	movs	r2, #1
   1e492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1e494:	409a      	lsls	r2, r3
   1e496:	0013      	movs	r3, r2
   1e498:	613b      	str	r3, [r7, #16]

		r = r << 1;
   1e49a:	69bb      	ldr	r3, [r7, #24]
   1e49c:	69fc      	ldr	r4, [r7, #28]
   1e49e:	18db      	adds	r3, r3, r3
   1e4a0:	4164      	adcs	r4, r4
   1e4a2:	61bb      	str	r3, [r7, #24]
   1e4a4:	61fc      	str	r4, [r7, #28]

		if (n & bit_shift) {
   1e4a6:	68bb      	ldr	r3, [r7, #8]
   1e4a8:	693a      	ldr	r2, [r7, #16]
   1e4aa:	401a      	ands	r2, r3
   1e4ac:	0015      	movs	r5, r2
   1e4ae:	68fb      	ldr	r3, [r7, #12]
   1e4b0:	697a      	ldr	r2, [r7, #20]
   1e4b2:	401a      	ands	r2, r3
   1e4b4:	0016      	movs	r6, r2
   1e4b6:	002b      	movs	r3, r5
   1e4b8:	4333      	orrs	r3, r6
   1e4ba:	d007      	beq.n	1e4cc <long_division+0x8a>
			r |= 0x01;
   1e4bc:	69bb      	ldr	r3, [r7, #24]
   1e4be:	2201      	movs	r2, #1
   1e4c0:	4313      	orrs	r3, r2
   1e4c2:	61bb      	str	r3, [r7, #24]
   1e4c4:	69fb      	ldr	r3, [r7, #28]
   1e4c6:	2200      	movs	r2, #0
   1e4c8:	4313      	orrs	r3, r2
   1e4ca:	61fb      	str	r3, [r7, #28]
		}

		if (r >= d) {
   1e4cc:	687a      	ldr	r2, [r7, #4]
   1e4ce:	69fb      	ldr	r3, [r7, #28]
   1e4d0:	429a      	cmp	r2, r3
   1e4d2:	d819      	bhi.n	1e508 <long_division+0xc6>
   1e4d4:	687a      	ldr	r2, [r7, #4]
   1e4d6:	69fb      	ldr	r3, [r7, #28]
   1e4d8:	429a      	cmp	r2, r3
   1e4da:	d103      	bne.n	1e4e4 <long_division+0xa2>
   1e4dc:	683a      	ldr	r2, [r7, #0]
   1e4de:	69bb      	ldr	r3, [r7, #24]
   1e4e0:	429a      	cmp	r2, r3
   1e4e2:	d811      	bhi.n	1e508 <long_division+0xc6>
			r = r - d;
   1e4e4:	69b9      	ldr	r1, [r7, #24]
   1e4e6:	69fa      	ldr	r2, [r7, #28]
   1e4e8:	683b      	ldr	r3, [r7, #0]
   1e4ea:	687c      	ldr	r4, [r7, #4]
   1e4ec:	1ac9      	subs	r1, r1, r3
   1e4ee:	41a2      	sbcs	r2, r4
   1e4f0:	000b      	movs	r3, r1
   1e4f2:	0014      	movs	r4, r2
   1e4f4:	61bb      	str	r3, [r7, #24]
   1e4f6:	61fc      	str	r4, [r7, #28]
			q |= bit_shift;
   1e4f8:	6a3a      	ldr	r2, [r7, #32]
   1e4fa:	693b      	ldr	r3, [r7, #16]
   1e4fc:	4313      	orrs	r3, r2
   1e4fe:	623b      	str	r3, [r7, #32]
   1e500:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1e502:	697b      	ldr	r3, [r7, #20]
   1e504:	4313      	orrs	r3, r2
   1e506:	627b      	str	r3, [r7, #36]	; 0x24
	for (i = 63; i >= 0; i--) {
   1e508:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1e50a:	3b01      	subs	r3, #1
   1e50c:	62fb      	str	r3, [r7, #44]	; 0x2c
   1e50e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1e510:	2b00      	cmp	r3, #0
   1e512:	daa8      	bge.n	1e466 <long_division+0x24>
		}
	}

	return q;
   1e514:	6a3b      	ldr	r3, [r7, #32]
   1e516:	6a7c      	ldr	r4, [r7, #36]	; 0x24
}
   1e518:	0018      	movs	r0, r3
   1e51a:	0021      	movs	r1, r4
   1e51c:	46bd      	mov	sp, r7
   1e51e:	b00d      	add	sp, #52	; 0x34
   1e520:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001e522 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
   1e522:	b580      	push	{r7, lr}
   1e524:	b086      	sub	sp, #24
   1e526:	af00      	add	r7, sp, #0
   1e528:	60f8      	str	r0, [r7, #12]
   1e52a:	60b9      	str	r1, [r7, #8]
   1e52c:	607a      	str	r2, [r7, #4]
	/* Baud value variable */
	uint16_t baud_calculated = 0;
   1e52e:	2316      	movs	r3, #22
   1e530:	18fb      	adds	r3, r7, r3
   1e532:	2200      	movs	r2, #0
   1e534:	801a      	strh	r2, [r3, #0]
	uint32_t clock_value = external_clock;
   1e536:	68bb      	ldr	r3, [r7, #8]
   1e538:	613b      	str	r3, [r7, #16]


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
   1e53a:	68bb      	ldr	r3, [r7, #8]
   1e53c:	085a      	lsrs	r2, r3, #1
   1e53e:	68fb      	ldr	r3, [r7, #12]
   1e540:	429a      	cmp	r2, r3
   1e542:	d201      	bcs.n	1e548 <_sercom_get_sync_baud_val+0x26>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   1e544:	2340      	movs	r3, #64	; 0x40
   1e546:	e026      	b.n	1e596 <_sercom_get_sync_baud_val+0x74>
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
   1e548:	68bb      	ldr	r3, [r7, #8]
   1e54a:	085b      	lsrs	r3, r3, #1
   1e54c:	613b      	str	r3, [r7, #16]
	while (clock_value >= baudrate) {
   1e54e:	e00a      	b.n	1e566 <_sercom_get_sync_baud_val+0x44>
		clock_value = clock_value - baudrate;
   1e550:	693a      	ldr	r2, [r7, #16]
   1e552:	68fb      	ldr	r3, [r7, #12]
   1e554:	1ad3      	subs	r3, r2, r3
   1e556:	613b      	str	r3, [r7, #16]
		baud_calculated++;
   1e558:	2316      	movs	r3, #22
   1e55a:	18fb      	adds	r3, r7, r3
   1e55c:	881a      	ldrh	r2, [r3, #0]
   1e55e:	2316      	movs	r3, #22
   1e560:	18fb      	adds	r3, r7, r3
   1e562:	3201      	adds	r2, #1
   1e564:	801a      	strh	r2, [r3, #0]
	while (clock_value >= baudrate) {
   1e566:	693a      	ldr	r2, [r7, #16]
   1e568:	68fb      	ldr	r3, [r7, #12]
   1e56a:	429a      	cmp	r2, r3
   1e56c:	d2f0      	bcs.n	1e550 <_sercom_get_sync_baud_val+0x2e>
	}
	baud_calculated = baud_calculated - 1;
   1e56e:	2316      	movs	r3, #22
   1e570:	18fb      	adds	r3, r7, r3
   1e572:	2216      	movs	r2, #22
   1e574:	18ba      	adds	r2, r7, r2
   1e576:	8812      	ldrh	r2, [r2, #0]
   1e578:	3a01      	subs	r2, #1
   1e57a:	801a      	strh	r2, [r3, #0]

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
   1e57c:	2316      	movs	r3, #22
   1e57e:	18fb      	adds	r3, r7, r3
   1e580:	881b      	ldrh	r3, [r3, #0]
   1e582:	2bff      	cmp	r3, #255	; 0xff
   1e584:	d901      	bls.n	1e58a <_sercom_get_sync_baud_val+0x68>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   1e586:	2340      	movs	r3, #64	; 0x40
   1e588:	e005      	b.n	1e596 <_sercom_get_sync_baud_val+0x74>
	} else {
		*baudvalue = baud_calculated;
   1e58a:	687b      	ldr	r3, [r7, #4]
   1e58c:	2216      	movs	r2, #22
   1e58e:	18ba      	adds	r2, r7, r2
   1e590:	8812      	ldrh	r2, [r2, #0]
   1e592:	801a      	strh	r2, [r3, #0]
		return STATUS_OK;
   1e594:	2300      	movs	r3, #0
	}
}
   1e596:	0018      	movs	r0, r3
   1e598:	46bd      	mov	sp, r7
   1e59a:	b006      	add	sp, #24
   1e59c:	bd80      	pop	{r7, pc}
	...

0001e5a0 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
   1e5a0:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e5a2:	b0a1      	sub	sp, #132	; 0x84
   1e5a4:	af00      	add	r7, sp, #0
   1e5a6:	64f8      	str	r0, [r7, #76]	; 0x4c
   1e5a8:	64b9      	str	r1, [r7, #72]	; 0x48
   1e5aa:	647a      	str	r2, [r7, #68]	; 0x44
   1e5ac:	2243      	movs	r2, #67	; 0x43
   1e5ae:	18ba      	adds	r2, r7, r2
   1e5b0:	7013      	strb	r3, [r2, #0]
	/* Temporary variables  */
	uint64_t ratio = 0;
   1e5b2:	2300      	movs	r3, #0
   1e5b4:	2400      	movs	r4, #0
   1e5b6:	673b      	str	r3, [r7, #112]	; 0x70
   1e5b8:	677c      	str	r4, [r7, #116]	; 0x74
	uint64_t scale = 0;
   1e5ba:	2300      	movs	r3, #0
   1e5bc:	2400      	movs	r4, #0
   1e5be:	66bb      	str	r3, [r7, #104]	; 0x68
   1e5c0:	66fc      	str	r4, [r7, #108]	; 0x6c
	uint64_t baud_calculated = 0;
   1e5c2:	2300      	movs	r3, #0
   1e5c4:	2400      	movs	r4, #0
   1e5c6:	67bb      	str	r3, [r7, #120]	; 0x78
   1e5c8:	67fc      	str	r4, [r7, #124]	; 0x7c
	uint8_t baud_fp;
	uint32_t baud_int = 0;
   1e5ca:	2300      	movs	r3, #0
   1e5cc:	667b      	str	r3, [r7, #100]	; 0x64
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
   1e5ce:	2358      	movs	r3, #88	; 0x58
   1e5d0:	2240      	movs	r2, #64	; 0x40
   1e5d2:	4694      	mov	ip, r2
   1e5d4:	44bc      	add	ip, r7
   1e5d6:	4463      	add	r3, ip
   1e5d8:	781a      	ldrb	r2, [r3, #0]
   1e5da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1e5dc:	435a      	muls	r2, r3
   1e5de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1e5e0:	429a      	cmp	r2, r3
   1e5e2:	d901      	bls.n	1e5e8 <_sercom_get_async_baud_val+0x48>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   1e5e4:	2340      	movs	r3, #64	; 0x40
   1e5e6:	e0b3      	b.n	1e750 <_sercom_get_async_baud_val+0x1b0>
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
   1e5e8:	2343      	movs	r3, #67	; 0x43
   1e5ea:	18fb      	adds	r3, r7, r3
   1e5ec:	781b      	ldrb	r3, [r3, #0]
   1e5ee:	2b00      	cmp	r3, #0
   1e5f0:	d13d      	bne.n	1e66e <_sercom_get_async_baud_val+0xce>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
   1e5f2:	2358      	movs	r3, #88	; 0x58
   1e5f4:	2240      	movs	r2, #64	; 0x40
   1e5f6:	4694      	mov	ip, r2
   1e5f8:	44bc      	add	ip, r7
   1e5fa:	4463      	add	r3, ip
   1e5fc:	781b      	ldrb	r3, [r3, #0]
   1e5fe:	b2db      	uxtb	r3, r3
   1e600:	613b      	str	r3, [r7, #16]
   1e602:	2300      	movs	r3, #0
   1e604:	617b      	str	r3, [r7, #20]
   1e606:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1e608:	60bb      	str	r3, [r7, #8]
   1e60a:	2300      	movs	r3, #0
   1e60c:	60fb      	str	r3, [r7, #12]
   1e60e:	4c52      	ldr	r4, [pc, #328]	; (1e758 <_sercom_get_async_baud_val+0x1b8>)
   1e610:	68ba      	ldr	r2, [r7, #8]
   1e612:	68fb      	ldr	r3, [r7, #12]
   1e614:	6938      	ldr	r0, [r7, #16]
   1e616:	6979      	ldr	r1, [r7, #20]
   1e618:	47a0      	blx	r4
   1e61a:	0003      	movs	r3, r0
   1e61c:	000c      	movs	r4, r1
   1e61e:	001b      	movs	r3, r3
   1e620:	65fb      	str	r3, [r7, #92]	; 0x5c
   1e622:	2300      	movs	r3, #0
   1e624:	65bb      	str	r3, [r7, #88]	; 0x58
		ratio = long_division(temp1, peripheral_clock);
   1e626:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1e628:	603b      	str	r3, [r7, #0]
   1e62a:	2300      	movs	r3, #0
   1e62c:	607b      	str	r3, [r7, #4]
   1e62e:	6db8      	ldr	r0, [r7, #88]	; 0x58
   1e630:	6df9      	ldr	r1, [r7, #92]	; 0x5c
   1e632:	683a      	ldr	r2, [r7, #0]
   1e634:	687b      	ldr	r3, [r7, #4]
   1e636:	4c49      	ldr	r4, [pc, #292]	; (1e75c <_sercom_get_async_baud_val+0x1bc>)
   1e638:	47a0      	blx	r4
   1e63a:	0003      	movs	r3, r0
   1e63c:	000c      	movs	r4, r1
   1e63e:	673b      	str	r3, [r7, #112]	; 0x70
   1e640:	677c      	str	r4, [r7, #116]	; 0x74
		scale = ((uint64_t)1 << SHIFT) - ratio;
   1e642:	2100      	movs	r1, #0
   1e644:	2201      	movs	r2, #1
   1e646:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   1e648:	6f7c      	ldr	r4, [r7, #116]	; 0x74
   1e64a:	1ac9      	subs	r1, r1, r3
   1e64c:	41a2      	sbcs	r2, r4
   1e64e:	000b      	movs	r3, r1
   1e650:	0014      	movs	r4, r2
   1e652:	66bb      	str	r3, [r7, #104]	; 0x68
   1e654:	66fc      	str	r4, [r7, #108]	; 0x6c
		baud_calculated = (65536 * scale) >> SHIFT;
   1e656:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   1e658:	0c1b      	lsrs	r3, r3, #16
   1e65a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
   1e65c:	0416      	lsls	r6, r2, #16
   1e65e:	431e      	orrs	r6, r3
   1e660:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   1e662:	041d      	lsls	r5, r3, #16
   1e664:	0033      	movs	r3, r6
   1e666:	67bb      	str	r3, [r7, #120]	; 0x78
   1e668:	2300      	movs	r3, #0
   1e66a:	67fb      	str	r3, [r7, #124]	; 0x7c
   1e66c:	e06a      	b.n	1e744 <_sercom_get_async_baud_val+0x1a4>
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
   1e66e:	2343      	movs	r3, #67	; 0x43
   1e670:	18fb      	adds	r3, r7, r3
   1e672:	781b      	ldrb	r3, [r3, #0]
   1e674:	2b01      	cmp	r3, #1
   1e676:	d165      	bne.n	1e744 <_sercom_get_async_baud_val+0x1a4>
		temp1 = ((uint64_t)baudrate * sample_num);
   1e678:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1e67a:	633b      	str	r3, [r7, #48]	; 0x30
   1e67c:	2300      	movs	r3, #0
   1e67e:	637b      	str	r3, [r7, #52]	; 0x34
   1e680:	2358      	movs	r3, #88	; 0x58
   1e682:	2240      	movs	r2, #64	; 0x40
   1e684:	4694      	mov	ip, r2
   1e686:	44bc      	add	ip, r7
   1e688:	4463      	add	r3, ip
   1e68a:	781b      	ldrb	r3, [r3, #0]
   1e68c:	b2db      	uxtb	r3, r3
   1e68e:	62bb      	str	r3, [r7, #40]	; 0x28
   1e690:	2300      	movs	r3, #0
   1e692:	62fb      	str	r3, [r7, #44]	; 0x2c
   1e694:	4c30      	ldr	r4, [pc, #192]	; (1e758 <_sercom_get_async_baud_val+0x1b8>)
   1e696:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1e698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1e69a:	6b38      	ldr	r0, [r7, #48]	; 0x30
   1e69c:	6b79      	ldr	r1, [r7, #52]	; 0x34
   1e69e:	47a0      	blx	r4
   1e6a0:	0003      	movs	r3, r0
   1e6a2:	000c      	movs	r4, r1
   1e6a4:	65bb      	str	r3, [r7, #88]	; 0x58
   1e6a6:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_int = long_division( peripheral_clock, temp1);
   1e6a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1e6aa:	623b      	str	r3, [r7, #32]
   1e6ac:	2300      	movs	r3, #0
   1e6ae:	627b      	str	r3, [r7, #36]	; 0x24
   1e6b0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   1e6b2:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
   1e6b4:	001a      	movs	r2, r3
   1e6b6:	0023      	movs	r3, r4
   1e6b8:	6a38      	ldr	r0, [r7, #32]
   1e6ba:	6a79      	ldr	r1, [r7, #36]	; 0x24
   1e6bc:	4c27      	ldr	r4, [pc, #156]	; (1e75c <_sercom_get_async_baud_val+0x1bc>)
   1e6be:	47a0      	blx	r4
   1e6c0:	0003      	movs	r3, r0
   1e6c2:	000c      	movs	r4, r1
   1e6c4:	667b      	str	r3, [r7, #100]	; 0x64
		if(baud_int > BAUD_INT_MAX) {
   1e6c6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
   1e6c8:	2380      	movs	r3, #128	; 0x80
   1e6ca:	019b      	lsls	r3, r3, #6
   1e6cc:	429a      	cmp	r2, r3
   1e6ce:	d901      	bls.n	1e6d4 <_sercom_get_async_baud_val+0x134>
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   1e6d0:	2340      	movs	r3, #64	; 0x40
   1e6d2:	e03d      	b.n	1e750 <_sercom_get_async_baud_val+0x1b0>
		}
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
   1e6d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1e6d6:	61bb      	str	r3, [r7, #24]
   1e6d8:	2300      	movs	r3, #0
   1e6da:	61fb      	str	r3, [r7, #28]
   1e6dc:	69b9      	ldr	r1, [r7, #24]
   1e6de:	69fa      	ldr	r2, [r7, #28]
   1e6e0:	000b      	movs	r3, r1
   1e6e2:	0f5b      	lsrs	r3, r3, #29
   1e6e4:	0010      	movs	r0, r2
   1e6e6:	00c0      	lsls	r0, r0, #3
   1e6e8:	63f8      	str	r0, [r7, #60]	; 0x3c
   1e6ea:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   1e6ec:	4318      	orrs	r0, r3
   1e6ee:	63f8      	str	r0, [r7, #60]	; 0x3c
   1e6f0:	000b      	movs	r3, r1
   1e6f2:	00db      	lsls	r3, r3, #3
   1e6f4:	63bb      	str	r3, [r7, #56]	; 0x38
   1e6f6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   1e6f8:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
   1e6fa:	001a      	movs	r2, r3
   1e6fc:	0023      	movs	r3, r4
   1e6fe:	6bb8      	ldr	r0, [r7, #56]	; 0x38
   1e700:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   1e702:	4c16      	ldr	r4, [pc, #88]	; (1e75c <_sercom_get_async_baud_val+0x1bc>)
   1e704:	47a0      	blx	r4
   1e706:	0003      	movs	r3, r0
   1e708:	000c      	movs	r4, r1
   1e70a:	65bb      	str	r3, [r7, #88]	; 0x58
   1e70c:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_fp = temp1 - 8 * baud_int;
   1e70e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   1e710:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
   1e712:	b2d9      	uxtb	r1, r3
   1e714:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   1e716:	b2db      	uxtb	r3, r3
   1e718:	00db      	lsls	r3, r3, #3
   1e71a:	b2da      	uxtb	r2, r3
   1e71c:	2317      	movs	r3, #23
   1e71e:	2040      	movs	r0, #64	; 0x40
   1e720:	4684      	mov	ip, r0
   1e722:	44bc      	add	ip, r7
   1e724:	4463      	add	r3, ip
   1e726:	1a8a      	subs	r2, r1, r2
   1e728:	701a      	strb	r2, [r3, #0]
		baud_calculated = baud_int | (baud_fp << 13);
   1e72a:	2317      	movs	r3, #23
   1e72c:	2240      	movs	r2, #64	; 0x40
   1e72e:	4694      	mov	ip, r2
   1e730:	44bc      	add	ip, r7
   1e732:	4463      	add	r3, ip
   1e734:	781b      	ldrb	r3, [r3, #0]
   1e736:	035b      	lsls	r3, r3, #13
   1e738:	001a      	movs	r2, r3
   1e73a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   1e73c:	4313      	orrs	r3, r2
   1e73e:	67bb      	str	r3, [r7, #120]	; 0x78
   1e740:	2300      	movs	r3, #0
   1e742:	67fb      	str	r3, [r7, #124]	; 0x7c
	}

	*baudval = baud_calculated;
   1e744:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   1e746:	6ffc      	ldr	r4, [r7, #124]	; 0x7c
   1e748:	b29a      	uxth	r2, r3
   1e74a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1e74c:	801a      	strh	r2, [r3, #0]
	return STATUS_OK;
   1e74e:	2300      	movs	r3, #0
}
   1e750:	0018      	movs	r0, r3
   1e752:	46bd      	mov	sp, r7
   1e754:	b021      	add	sp, #132	; 0x84
   1e756:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1e758:	00026515 	.word	0x00026515
   1e75c:	0001e443 	.word	0x0001e443

0001e760 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
   1e760:	b580      	push	{r7, lr}
   1e762:	b084      	sub	sp, #16
   1e764:	af00      	add	r7, sp, #0
   1e766:	0002      	movs	r2, r0
   1e768:	1dfb      	adds	r3, r7, #7
   1e76a:	701a      	strb	r2, [r3, #0]
   1e76c:	1dbb      	adds	r3, r7, #6
   1e76e:	1c0a      	adds	r2, r1, #0
   1e770:	701a      	strb	r2, [r3, #0]
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
   1e772:	4b1a      	ldr	r3, [pc, #104]	; (1e7dc <sercom_set_gclk_generator+0x7c>)
   1e774:	781b      	ldrb	r3, [r3, #0]
   1e776:	2201      	movs	r2, #1
   1e778:	4053      	eors	r3, r2
   1e77a:	b2db      	uxtb	r3, r3
   1e77c:	2b00      	cmp	r3, #0
   1e77e:	d103      	bne.n	1e788 <sercom_set_gclk_generator+0x28>
   1e780:	1dbb      	adds	r3, r7, #6
   1e782:	781b      	ldrb	r3, [r3, #0]
   1e784:	2b00      	cmp	r3, #0
   1e786:	d01b      	beq.n	1e7c0 <sercom_set_gclk_generator+0x60>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   1e788:	230c      	movs	r3, #12
   1e78a:	18fb      	adds	r3, r7, r3
   1e78c:	0018      	movs	r0, r3
   1e78e:	4b14      	ldr	r3, [pc, #80]	; (1e7e0 <sercom_set_gclk_generator+0x80>)
   1e790:	4798      	blx	r3
		gclk_chan_conf.source_generator = generator_source;
   1e792:	230c      	movs	r3, #12
   1e794:	18fb      	adds	r3, r7, r3
   1e796:	1dfa      	adds	r2, r7, #7
   1e798:	7812      	ldrb	r2, [r2, #0]
   1e79a:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
   1e79c:	230c      	movs	r3, #12
   1e79e:	18fb      	adds	r3, r7, r3
   1e7a0:	0019      	movs	r1, r3
   1e7a2:	2013      	movs	r0, #19
   1e7a4:	4b0f      	ldr	r3, [pc, #60]	; (1e7e4 <sercom_set_gclk_generator+0x84>)
   1e7a6:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
   1e7a8:	2013      	movs	r0, #19
   1e7aa:	4b0f      	ldr	r3, [pc, #60]	; (1e7e8 <sercom_set_gclk_generator+0x88>)
   1e7ac:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
   1e7ae:	4b0b      	ldr	r3, [pc, #44]	; (1e7dc <sercom_set_gclk_generator+0x7c>)
   1e7b0:	1dfa      	adds	r2, r7, #7
   1e7b2:	7812      	ldrb	r2, [r2, #0]
   1e7b4:	705a      	strb	r2, [r3, #1]
		_sercom_config.generator_is_set = true;
   1e7b6:	4b09      	ldr	r3, [pc, #36]	; (1e7dc <sercom_set_gclk_generator+0x7c>)
   1e7b8:	2201      	movs	r2, #1
   1e7ba:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
   1e7bc:	2300      	movs	r3, #0
   1e7be:	e008      	b.n	1e7d2 <sercom_set_gclk_generator+0x72>
	} else if (generator_source == _sercom_config.generator_source) {
   1e7c0:	4b06      	ldr	r3, [pc, #24]	; (1e7dc <sercom_set_gclk_generator+0x7c>)
   1e7c2:	785b      	ldrb	r3, [r3, #1]
   1e7c4:	1dfa      	adds	r2, r7, #7
   1e7c6:	7812      	ldrb	r2, [r2, #0]
   1e7c8:	429a      	cmp	r2, r3
   1e7ca:	d101      	bne.n	1e7d0 <sercom_set_gclk_generator+0x70>
		/* Return status OK if same config */
		return STATUS_OK;
   1e7cc:	2300      	movs	r3, #0
   1e7ce:	e000      	b.n	1e7d2 <sercom_set_gclk_generator+0x72>
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
   1e7d0:	231d      	movs	r3, #29
}
   1e7d2:	0018      	movs	r0, r3
   1e7d4:	46bd      	mov	sp, r7
   1e7d6:	b004      	add	sp, #16
   1e7d8:	bd80      	pop	{r7, pc}
   1e7da:	46c0      	nop			; (mov r8, r8)
   1e7dc:	200002b4 	.word	0x200002b4
   1e7e0:	0001e42d 	.word	0x0001e42d
   1e7e4:	00024625 	.word	0x00024625
   1e7e8:	00024669 	.word	0x00024669

0001e7ec <_sercom_get_default_pad>:
 *
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
   1e7ec:	b580      	push	{r7, lr}
   1e7ee:	b082      	sub	sp, #8
   1e7f0:	af00      	add	r7, sp, #0
   1e7f2:	6078      	str	r0, [r7, #4]
   1e7f4:	000a      	movs	r2, r1
   1e7f6:	1cfb      	adds	r3, r7, #3
   1e7f8:	701a      	strb	r2, [r3, #0]
	switch ((uintptr_t)sercom_module) {
   1e7fa:	687b      	ldr	r3, [r7, #4]
   1e7fc:	4a4d      	ldr	r2, [pc, #308]	; (1e934 <_sercom_get_default_pad+0x148>)
   1e7fe:	4293      	cmp	r3, r2
   1e800:	d03f      	beq.n	1e882 <_sercom_get_default_pad+0x96>
   1e802:	4a4c      	ldr	r2, [pc, #304]	; (1e934 <_sercom_get_default_pad+0x148>)
   1e804:	4293      	cmp	r3, r2
   1e806:	d806      	bhi.n	1e816 <_sercom_get_default_pad+0x2a>
   1e808:	4a4b      	ldr	r2, [pc, #300]	; (1e938 <_sercom_get_default_pad+0x14c>)
   1e80a:	4293      	cmp	r3, r2
   1e80c:	d00f      	beq.n	1e82e <_sercom_get_default_pad+0x42>
   1e80e:	4a4b      	ldr	r2, [pc, #300]	; (1e93c <_sercom_get_default_pad+0x150>)
   1e810:	4293      	cmp	r3, r2
   1e812:	d021      	beq.n	1e858 <_sercom_get_default_pad+0x6c>
   1e814:	e089      	b.n	1e92a <_sercom_get_default_pad+0x13e>
   1e816:	4a4a      	ldr	r2, [pc, #296]	; (1e940 <_sercom_get_default_pad+0x154>)
   1e818:	4293      	cmp	r3, r2
   1e81a:	d100      	bne.n	1e81e <_sercom_get_default_pad+0x32>
   1e81c:	e05b      	b.n	1e8d6 <_sercom_get_default_pad+0xea>
   1e81e:	4a49      	ldr	r2, [pc, #292]	; (1e944 <_sercom_get_default_pad+0x158>)
   1e820:	4293      	cmp	r3, r2
   1e822:	d100      	bne.n	1e826 <_sercom_get_default_pad+0x3a>
   1e824:	e06c      	b.n	1e900 <_sercom_get_default_pad+0x114>
   1e826:	4a48      	ldr	r2, [pc, #288]	; (1e948 <_sercom_get_default_pad+0x15c>)
   1e828:	4293      	cmp	r3, r2
   1e82a:	d03f      	beq.n	1e8ac <_sercom_get_default_pad+0xc0>
   1e82c:	e07d      	b.n	1e92a <_sercom_get_default_pad+0x13e>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
   1e82e:	1cfb      	adds	r3, r7, #3
   1e830:	781b      	ldrb	r3, [r3, #0]
   1e832:	2b01      	cmp	r3, #1
   1e834:	d00a      	beq.n	1e84c <_sercom_get_default_pad+0x60>
   1e836:	dc02      	bgt.n	1e83e <_sercom_get_default_pad+0x52>
   1e838:	2b00      	cmp	r3, #0
   1e83a:	d005      	beq.n	1e848 <_sercom_get_default_pad+0x5c>
   1e83c:	e075      	b.n	1e92a <_sercom_get_default_pad+0x13e>
   1e83e:	2b02      	cmp	r3, #2
   1e840:	d006      	beq.n	1e850 <_sercom_get_default_pad+0x64>
   1e842:	2b03      	cmp	r3, #3
   1e844:	d006      	beq.n	1e854 <_sercom_get_default_pad+0x68>
   1e846:	e070      	b.n	1e92a <_sercom_get_default_pad+0x13e>
   1e848:	4b40      	ldr	r3, [pc, #256]	; (1e94c <_sercom_get_default_pad+0x160>)
   1e84a:	e06f      	b.n	1e92c <_sercom_get_default_pad+0x140>
   1e84c:	4b40      	ldr	r3, [pc, #256]	; (1e950 <_sercom_get_default_pad+0x164>)
   1e84e:	e06d      	b.n	1e92c <_sercom_get_default_pad+0x140>
   1e850:	4b40      	ldr	r3, [pc, #256]	; (1e954 <_sercom_get_default_pad+0x168>)
   1e852:	e06b      	b.n	1e92c <_sercom_get_default_pad+0x140>
   1e854:	4b40      	ldr	r3, [pc, #256]	; (1e958 <_sercom_get_default_pad+0x16c>)
   1e856:	e069      	b.n	1e92c <_sercom_get_default_pad+0x140>
   1e858:	1cfb      	adds	r3, r7, #3
   1e85a:	781b      	ldrb	r3, [r3, #0]
   1e85c:	2b01      	cmp	r3, #1
   1e85e:	d00a      	beq.n	1e876 <_sercom_get_default_pad+0x8a>
   1e860:	dc02      	bgt.n	1e868 <_sercom_get_default_pad+0x7c>
   1e862:	2b00      	cmp	r3, #0
   1e864:	d005      	beq.n	1e872 <_sercom_get_default_pad+0x86>
   1e866:	e060      	b.n	1e92a <_sercom_get_default_pad+0x13e>
   1e868:	2b02      	cmp	r3, #2
   1e86a:	d006      	beq.n	1e87a <_sercom_get_default_pad+0x8e>
   1e86c:	2b03      	cmp	r3, #3
   1e86e:	d006      	beq.n	1e87e <_sercom_get_default_pad+0x92>
   1e870:	e05b      	b.n	1e92a <_sercom_get_default_pad+0x13e>
   1e872:	2303      	movs	r3, #3
   1e874:	e05a      	b.n	1e92c <_sercom_get_default_pad+0x140>
   1e876:	4b39      	ldr	r3, [pc, #228]	; (1e95c <_sercom_get_default_pad+0x170>)
   1e878:	e058      	b.n	1e92c <_sercom_get_default_pad+0x140>
   1e87a:	4b39      	ldr	r3, [pc, #228]	; (1e960 <_sercom_get_default_pad+0x174>)
   1e87c:	e056      	b.n	1e92c <_sercom_get_default_pad+0x140>
   1e87e:	4b39      	ldr	r3, [pc, #228]	; (1e964 <_sercom_get_default_pad+0x178>)
   1e880:	e054      	b.n	1e92c <_sercom_get_default_pad+0x140>
   1e882:	1cfb      	adds	r3, r7, #3
   1e884:	781b      	ldrb	r3, [r3, #0]
   1e886:	2b01      	cmp	r3, #1
   1e888:	d00a      	beq.n	1e8a0 <_sercom_get_default_pad+0xb4>
   1e88a:	dc02      	bgt.n	1e892 <_sercom_get_default_pad+0xa6>
   1e88c:	2b00      	cmp	r3, #0
   1e88e:	d005      	beq.n	1e89c <_sercom_get_default_pad+0xb0>
   1e890:	e04b      	b.n	1e92a <_sercom_get_default_pad+0x13e>
   1e892:	2b02      	cmp	r3, #2
   1e894:	d006      	beq.n	1e8a4 <_sercom_get_default_pad+0xb8>
   1e896:	2b03      	cmp	r3, #3
   1e898:	d006      	beq.n	1e8a8 <_sercom_get_default_pad+0xbc>
   1e89a:	e046      	b.n	1e92a <_sercom_get_default_pad+0x13e>
   1e89c:	4b32      	ldr	r3, [pc, #200]	; (1e968 <_sercom_get_default_pad+0x17c>)
   1e89e:	e045      	b.n	1e92c <_sercom_get_default_pad+0x140>
   1e8a0:	4b32      	ldr	r3, [pc, #200]	; (1e96c <_sercom_get_default_pad+0x180>)
   1e8a2:	e043      	b.n	1e92c <_sercom_get_default_pad+0x140>
   1e8a4:	4b32      	ldr	r3, [pc, #200]	; (1e970 <_sercom_get_default_pad+0x184>)
   1e8a6:	e041      	b.n	1e92c <_sercom_get_default_pad+0x140>
   1e8a8:	4b32      	ldr	r3, [pc, #200]	; (1e974 <_sercom_get_default_pad+0x188>)
   1e8aa:	e03f      	b.n	1e92c <_sercom_get_default_pad+0x140>
   1e8ac:	1cfb      	adds	r3, r7, #3
   1e8ae:	781b      	ldrb	r3, [r3, #0]
   1e8b0:	2b01      	cmp	r3, #1
   1e8b2:	d00a      	beq.n	1e8ca <_sercom_get_default_pad+0xde>
   1e8b4:	dc02      	bgt.n	1e8bc <_sercom_get_default_pad+0xd0>
   1e8b6:	2b00      	cmp	r3, #0
   1e8b8:	d005      	beq.n	1e8c6 <_sercom_get_default_pad+0xda>
   1e8ba:	e036      	b.n	1e92a <_sercom_get_default_pad+0x13e>
   1e8bc:	2b02      	cmp	r3, #2
   1e8be:	d006      	beq.n	1e8ce <_sercom_get_default_pad+0xe2>
   1e8c0:	2b03      	cmp	r3, #3
   1e8c2:	d006      	beq.n	1e8d2 <_sercom_get_default_pad+0xe6>
   1e8c4:	e031      	b.n	1e92a <_sercom_get_default_pad+0x13e>
   1e8c6:	4b2c      	ldr	r3, [pc, #176]	; (1e978 <_sercom_get_default_pad+0x18c>)
   1e8c8:	e030      	b.n	1e92c <_sercom_get_default_pad+0x140>
   1e8ca:	4b2c      	ldr	r3, [pc, #176]	; (1e97c <_sercom_get_default_pad+0x190>)
   1e8cc:	e02e      	b.n	1e92c <_sercom_get_default_pad+0x140>
   1e8ce:	4b2c      	ldr	r3, [pc, #176]	; (1e980 <_sercom_get_default_pad+0x194>)
   1e8d0:	e02c      	b.n	1e92c <_sercom_get_default_pad+0x140>
   1e8d2:	4b2c      	ldr	r3, [pc, #176]	; (1e984 <_sercom_get_default_pad+0x198>)
   1e8d4:	e02a      	b.n	1e92c <_sercom_get_default_pad+0x140>
   1e8d6:	1cfb      	adds	r3, r7, #3
   1e8d8:	781b      	ldrb	r3, [r3, #0]
   1e8da:	2b01      	cmp	r3, #1
   1e8dc:	d00a      	beq.n	1e8f4 <_sercom_get_default_pad+0x108>
   1e8de:	dc02      	bgt.n	1e8e6 <_sercom_get_default_pad+0xfa>
   1e8e0:	2b00      	cmp	r3, #0
   1e8e2:	d005      	beq.n	1e8f0 <_sercom_get_default_pad+0x104>
   1e8e4:	e021      	b.n	1e92a <_sercom_get_default_pad+0x13e>
   1e8e6:	2b02      	cmp	r3, #2
   1e8e8:	d006      	beq.n	1e8f8 <_sercom_get_default_pad+0x10c>
   1e8ea:	2b03      	cmp	r3, #3
   1e8ec:	d006      	beq.n	1e8fc <_sercom_get_default_pad+0x110>
   1e8ee:	e01c      	b.n	1e92a <_sercom_get_default_pad+0x13e>
   1e8f0:	4b25      	ldr	r3, [pc, #148]	; (1e988 <_sercom_get_default_pad+0x19c>)
   1e8f2:	e01b      	b.n	1e92c <_sercom_get_default_pad+0x140>
   1e8f4:	4b25      	ldr	r3, [pc, #148]	; (1e98c <_sercom_get_default_pad+0x1a0>)
   1e8f6:	e019      	b.n	1e92c <_sercom_get_default_pad+0x140>
   1e8f8:	4b25      	ldr	r3, [pc, #148]	; (1e990 <_sercom_get_default_pad+0x1a4>)
   1e8fa:	e017      	b.n	1e92c <_sercom_get_default_pad+0x140>
   1e8fc:	4b25      	ldr	r3, [pc, #148]	; (1e994 <_sercom_get_default_pad+0x1a8>)
   1e8fe:	e015      	b.n	1e92c <_sercom_get_default_pad+0x140>
   1e900:	1cfb      	adds	r3, r7, #3
   1e902:	781b      	ldrb	r3, [r3, #0]
   1e904:	2b01      	cmp	r3, #1
   1e906:	d00a      	beq.n	1e91e <_sercom_get_default_pad+0x132>
   1e908:	dc02      	bgt.n	1e910 <_sercom_get_default_pad+0x124>
   1e90a:	2b00      	cmp	r3, #0
   1e90c:	d005      	beq.n	1e91a <_sercom_get_default_pad+0x12e>
   1e90e:	e00c      	b.n	1e92a <_sercom_get_default_pad+0x13e>
   1e910:	2b02      	cmp	r3, #2
   1e912:	d006      	beq.n	1e922 <_sercom_get_default_pad+0x136>
   1e914:	2b03      	cmp	r3, #3
   1e916:	d006      	beq.n	1e926 <_sercom_get_default_pad+0x13a>
   1e918:	e007      	b.n	1e92a <_sercom_get_default_pad+0x13e>
   1e91a:	4b1f      	ldr	r3, [pc, #124]	; (1e998 <_sercom_get_default_pad+0x1ac>)
   1e91c:	e006      	b.n	1e92c <_sercom_get_default_pad+0x140>
   1e91e:	4b1f      	ldr	r3, [pc, #124]	; (1e99c <_sercom_get_default_pad+0x1b0>)
   1e920:	e004      	b.n	1e92c <_sercom_get_default_pad+0x140>
   1e922:	4b1f      	ldr	r3, [pc, #124]	; (1e9a0 <_sercom_get_default_pad+0x1b4>)
   1e924:	e002      	b.n	1e92c <_sercom_get_default_pad+0x140>
   1e926:	4b1f      	ldr	r3, [pc, #124]	; (1e9a4 <_sercom_get_default_pad+0x1b8>)
   1e928:	e000      	b.n	1e92c <_sercom_get_default_pad+0x140>
	}

	Assert(false);
	return 0;
   1e92a:	2300      	movs	r3, #0
}
   1e92c:	0018      	movs	r0, r3
   1e92e:	46bd      	mov	sp, r7
   1e930:	b002      	add	sp, #8
   1e932:	bd80      	pop	{r7, pc}
   1e934:	42001000 	.word	0x42001000
   1e938:	42000800 	.word	0x42000800
   1e93c:	42000c00 	.word	0x42000c00
   1e940:	42001800 	.word	0x42001800
   1e944:	42001c00 	.word	0x42001c00
   1e948:	42001400 	.word	0x42001400
   1e94c:	00040003 	.word	0x00040003
   1e950:	00050003 	.word	0x00050003
   1e954:	00060003 	.word	0x00060003
   1e958:	00070003 	.word	0x00070003
   1e95c:	00010003 	.word	0x00010003
   1e960:	001e0003 	.word	0x001e0003
   1e964:	001f0003 	.word	0x001f0003
   1e968:	00080003 	.word	0x00080003
   1e96c:	00090003 	.word	0x00090003
   1e970:	000a0003 	.word	0x000a0003
   1e974:	000b0003 	.word	0x000b0003
   1e978:	00100003 	.word	0x00100003
   1e97c:	00110003 	.word	0x00110003
   1e980:	00120003 	.word	0x00120003
   1e984:	00130003 	.word	0x00130003
   1e988:	000c0003 	.word	0x000c0003
   1e98c:	000d0003 	.word	0x000d0003
   1e990:	000e0003 	.word	0x000e0003
   1e994:	000f0003 	.word	0x000f0003
   1e998:	00160003 	.word	0x00160003
   1e99c:	00170003 	.word	0x00170003
   1e9a0:	00180003 	.word	0x00180003
   1e9a4:	00190003 	.word	0x00190003

0001e9a8 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
   1e9a8:	b590      	push	{r4, r7, lr}
   1e9aa:	b08b      	sub	sp, #44	; 0x2c
   1e9ac:	af00      	add	r7, sp, #0
   1e9ae:	6078      	str	r0, [r7, #4]
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
   1e9b0:	230c      	movs	r3, #12
   1e9b2:	18fb      	adds	r3, r7, r3
   1e9b4:	4a0f      	ldr	r2, [pc, #60]	; (1e9f4 <_sercom_get_sercom_inst_index+0x4c>)
   1e9b6:	ca13      	ldmia	r2!, {r0, r1, r4}
   1e9b8:	c313      	stmia	r3!, {r0, r1, r4}
   1e9ba:	ca13      	ldmia	r2!, {r0, r1, r4}
   1e9bc:	c313      	stmia	r3!, {r0, r1, r4}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   1e9be:	2300      	movs	r3, #0
   1e9c0:	627b      	str	r3, [r7, #36]	; 0x24
   1e9c2:	e00e      	b.n	1e9e2 <_sercom_get_sercom_inst_index+0x3a>
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
   1e9c4:	230c      	movs	r3, #12
   1e9c6:	18fb      	adds	r3, r7, r3
   1e9c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1e9ca:	0092      	lsls	r2, r2, #2
   1e9cc:	58d3      	ldr	r3, [r2, r3]
   1e9ce:	001a      	movs	r2, r3
   1e9d0:	687b      	ldr	r3, [r7, #4]
   1e9d2:	429a      	cmp	r2, r3
   1e9d4:	d102      	bne.n	1e9dc <_sercom_get_sercom_inst_index+0x34>
			return i;
   1e9d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1e9d8:	b2db      	uxtb	r3, r3
   1e9da:	e006      	b.n	1e9ea <_sercom_get_sercom_inst_index+0x42>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   1e9dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1e9de:	3301      	adds	r3, #1
   1e9e0:	627b      	str	r3, [r7, #36]	; 0x24
   1e9e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1e9e4:	2b05      	cmp	r3, #5
   1e9e6:	d9ed      	bls.n	1e9c4 <_sercom_get_sercom_inst_index+0x1c>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
   1e9e8:	2300      	movs	r3, #0
}
   1e9ea:	0018      	movs	r0, r3
   1e9ec:	46bd      	mov	sp, r7
   1e9ee:	b00b      	add	sp, #44	; 0x2c
   1e9f0:	bd90      	pop	{r4, r7, pc}
   1e9f2:	46c0      	nop			; (mov r8, r8)
   1e9f4:	0002a708 	.word	0x0002a708

0001e9f8 <system_cpu_clock_get_hz>:
{
   1e9f8:	b580      	push	{r7, lr}
   1e9fa:	af00      	add	r7, sp, #0
	return (system_gclk_gen_get_hz(GCLK_GENERATOR_0) >> PM->CPUSEL.reg);
   1e9fc:	2000      	movs	r0, #0
   1e9fe:	4b05      	ldr	r3, [pc, #20]	; (1ea14 <system_cpu_clock_get_hz+0x1c>)
   1ea00:	4798      	blx	r3
   1ea02:	0002      	movs	r2, r0
   1ea04:	4b04      	ldr	r3, [pc, #16]	; (1ea18 <system_cpu_clock_get_hz+0x20>)
   1ea06:	7a1b      	ldrb	r3, [r3, #8]
   1ea08:	b2db      	uxtb	r3, r3
   1ea0a:	40da      	lsrs	r2, r3
   1ea0c:	0013      	movs	r3, r2
}
   1ea0e:	0018      	movs	r0, r3
   1ea10:	46bd      	mov	sp, r7
   1ea12:	bd80      	pop	{r7, pc}
   1ea14:	0002454d 	.word	0x0002454d
   1ea18:	40000400 	.word	0x40000400

0001ea1c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
   1ea1c:	b580      	push	{r7, lr}
   1ea1e:	b084      	sub	sp, #16
   1ea20:	af00      	add	r7, sp, #0
   1ea22:	60f8      	str	r0, [r7, #12]
   1ea24:	60b9      	str	r1, [r7, #8]
   1ea26:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
   1ea28:	68fb      	ldr	r3, [r7, #12]
   1ea2a:	3b04      	subs	r3, #4
   1ea2c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
   1ea2e:	68fb      	ldr	r3, [r7, #12]
   1ea30:	2280      	movs	r2, #128	; 0x80
   1ea32:	0452      	lsls	r2, r2, #17
   1ea34:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
   1ea36:	68fb      	ldr	r3, [r7, #12]
   1ea38:	3b04      	subs	r3, #4
   1ea3a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
   1ea3c:	68ba      	ldr	r2, [r7, #8]
   1ea3e:	68fb      	ldr	r3, [r7, #12]
   1ea40:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
   1ea42:	68fb      	ldr	r3, [r7, #12]
   1ea44:	3b04      	subs	r3, #4
   1ea46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
   1ea48:	4a08      	ldr	r2, [pc, #32]	; (1ea6c <pxPortInitialiseStack+0x50>)
   1ea4a:	68fb      	ldr	r3, [r7, #12]
   1ea4c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
   1ea4e:	68fb      	ldr	r3, [r7, #12]
   1ea50:	3b14      	subs	r3, #20
   1ea52:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
   1ea54:	687a      	ldr	r2, [r7, #4]
   1ea56:	68fb      	ldr	r3, [r7, #12]
   1ea58:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
   1ea5a:	68fb      	ldr	r3, [r7, #12]
   1ea5c:	3b20      	subs	r3, #32
   1ea5e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
   1ea60:	68fb      	ldr	r3, [r7, #12]
}
   1ea62:	0018      	movs	r0, r3
   1ea64:	46bd      	mov	sp, r7
   1ea66:	b004      	add	sp, #16
   1ea68:	bd80      	pop	{r7, pc}
   1ea6a:	46c0      	nop			; (mov r8, r8)
   1ea6c:	0001ea71 	.word	0x0001ea71

0001ea70 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
   1ea70:	b580      	push	{r7, lr}
   1ea72:	b082      	sub	sp, #8
   1ea74:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
   1ea76:	2300      	movs	r3, #0
   1ea78:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
   1ea7a:	4b07      	ldr	r3, [pc, #28]	; (1ea98 <prvTaskExitError+0x28>)
   1ea7c:	681b      	ldr	r3, [r3, #0]
   1ea7e:	3301      	adds	r3, #1
   1ea80:	d001      	beq.n	1ea86 <prvTaskExitError+0x16>
   1ea82:	b672      	cpsid	i
   1ea84:	e7fe      	b.n	1ea84 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
   1ea86:	b672      	cpsid	i
	while( ulDummy == 0 )
   1ea88:	46c0      	nop			; (mov r8, r8)
   1ea8a:	687b      	ldr	r3, [r7, #4]
   1ea8c:	2b00      	cmp	r3, #0
   1ea8e:	d0fc      	beq.n	1ea8a <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
   1ea90:	46c0      	nop			; (mov r8, r8)
   1ea92:	46bd      	mov	sp, r7
   1ea94:	b002      	add	sp, #8
   1ea96:	bd80      	pop	{r7, pc}
   1ea98:	20000010 	.word	0x20000010

0001ea9c <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
   1ea9c:	b580      	push	{r7, lr}
   1ea9e:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
   1eaa0:	46c0      	nop			; (mov r8, r8)
   1eaa2:	46bd      	mov	sp, r7
   1eaa4:	bd80      	pop	{r7, pc}
	...

0001eab0 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
   1eab0:	4a0b      	ldr	r2, [pc, #44]	; (1eae0 <pxCurrentTCBConst2>)
   1eab2:	6813      	ldr	r3, [r2, #0]
   1eab4:	6818      	ldr	r0, [r3, #0]
   1eab6:	3020      	adds	r0, #32
   1eab8:	f380 8809 	msr	PSP, r0
   1eabc:	2002      	movs	r0, #2
   1eabe:	f380 8814 	msr	CONTROL, r0
   1eac2:	f3bf 8f6f 	isb	sy
   1eac6:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
   1eac8:	46ae      	mov	lr, r5
   1eaca:	bc08      	pop	{r3}
   1eacc:	bc04      	pop	{r2}
   1eace:	b662      	cpsie	i
   1ead0:	4718      	bx	r3
   1ead2:	46c0      	nop			; (mov r8, r8)
   1ead4:	46c0      	nop			; (mov r8, r8)
   1ead6:	46c0      	nop			; (mov r8, r8)
   1ead8:	46c0      	nop			; (mov r8, r8)
   1eada:	46c0      	nop			; (mov r8, r8)
   1eadc:	46c0      	nop			; (mov r8, r8)
   1eade:	46c0      	nop			; (mov r8, r8)

0001eae0 <pxCurrentTCBConst2>:
   1eae0:	200002b8 	.word	0x200002b8
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
   1eae4:	46c0      	nop			; (mov r8, r8)
   1eae6:	46c0      	nop			; (mov r8, r8)

0001eae8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
   1eae8:	b580      	push	{r7, lr}
   1eaea:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
   1eaec:	4b0e      	ldr	r3, [pc, #56]	; (1eb28 <xPortStartScheduler+0x40>)
   1eaee:	4a0e      	ldr	r2, [pc, #56]	; (1eb28 <xPortStartScheduler+0x40>)
   1eaf0:	6812      	ldr	r2, [r2, #0]
   1eaf2:	21ff      	movs	r1, #255	; 0xff
   1eaf4:	0409      	lsls	r1, r1, #16
   1eaf6:	430a      	orrs	r2, r1
   1eaf8:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
   1eafa:	4b0b      	ldr	r3, [pc, #44]	; (1eb28 <xPortStartScheduler+0x40>)
   1eafc:	4a0a      	ldr	r2, [pc, #40]	; (1eb28 <xPortStartScheduler+0x40>)
   1eafe:	6812      	ldr	r2, [r2, #0]
   1eb00:	21ff      	movs	r1, #255	; 0xff
   1eb02:	0609      	lsls	r1, r1, #24
   1eb04:	430a      	orrs	r2, r1
   1eb06:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
   1eb08:	4b08      	ldr	r3, [pc, #32]	; (1eb2c <xPortStartScheduler+0x44>)
   1eb0a:	4798      	blx	r3

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
   1eb0c:	4b08      	ldr	r3, [pc, #32]	; (1eb30 <xPortStartScheduler+0x48>)
   1eb0e:	2200      	movs	r2, #0
   1eb10:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
   1eb12:	4b08      	ldr	r3, [pc, #32]	; (1eb34 <xPortStartScheduler+0x4c>)
   1eb14:	4798      	blx	r3
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
   1eb16:	4b08      	ldr	r3, [pc, #32]	; (1eb38 <xPortStartScheduler+0x50>)
   1eb18:	4798      	blx	r3
	prvTaskExitError();
   1eb1a:	4b08      	ldr	r3, [pc, #32]	; (1eb3c <xPortStartScheduler+0x54>)
   1eb1c:	4798      	blx	r3

	/* Should not get here! */
	return 0;
   1eb1e:	2300      	movs	r3, #0
}
   1eb20:	0018      	movs	r0, r3
   1eb22:	46bd      	mov	sp, r7
   1eb24:	bd80      	pop	{r7, pc}
   1eb26:	46c0      	nop			; (mov r8, r8)
   1eb28:	e000ed20 	.word	0xe000ed20
   1eb2c:	0001ec59 	.word	0x0001ec59
   1eb30:	20000010 	.word	0x20000010
   1eb34:	0001eab1 	.word	0x0001eab1
   1eb38:	0002028d 	.word	0x0002028d
   1eb3c:	0001ea71 	.word	0x0001ea71

0001eb40 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
   1eb40:	b580      	push	{r7, lr}
   1eb42:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
   1eb44:	4b05      	ldr	r3, [pc, #20]	; (1eb5c <vPortYield+0x1c>)
   1eb46:	2280      	movs	r2, #128	; 0x80
   1eb48:	0552      	lsls	r2, r2, #21
   1eb4a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
   1eb4c:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
   1eb50:	f3bf 8f6f 	isb	sy
}
   1eb54:	46c0      	nop			; (mov r8, r8)
   1eb56:	46bd      	mov	sp, r7
   1eb58:	bd80      	pop	{r7, pc}
   1eb5a:	46c0      	nop			; (mov r8, r8)
   1eb5c:	e000ed04 	.word	0xe000ed04

0001eb60 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
   1eb60:	b580      	push	{r7, lr}
   1eb62:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
   1eb64:	b672      	cpsid	i
    uxCriticalNesting++;
   1eb66:	4b06      	ldr	r3, [pc, #24]	; (1eb80 <vPortEnterCritical+0x20>)
   1eb68:	681b      	ldr	r3, [r3, #0]
   1eb6a:	1c5a      	adds	r2, r3, #1
   1eb6c:	4b04      	ldr	r3, [pc, #16]	; (1eb80 <vPortEnterCritical+0x20>)
   1eb6e:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
   1eb70:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
   1eb74:	f3bf 8f6f 	isb	sy
}
   1eb78:	46c0      	nop			; (mov r8, r8)
   1eb7a:	46bd      	mov	sp, r7
   1eb7c:	bd80      	pop	{r7, pc}
   1eb7e:	46c0      	nop			; (mov r8, r8)
   1eb80:	20000010 	.word	0x20000010

0001eb84 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
   1eb84:	b580      	push	{r7, lr}
   1eb86:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
   1eb88:	4b09      	ldr	r3, [pc, #36]	; (1ebb0 <vPortExitCritical+0x2c>)
   1eb8a:	681b      	ldr	r3, [r3, #0]
   1eb8c:	2b00      	cmp	r3, #0
   1eb8e:	d101      	bne.n	1eb94 <vPortExitCritical+0x10>
   1eb90:	b672      	cpsid	i
   1eb92:	e7fe      	b.n	1eb92 <vPortExitCritical+0xe>
    uxCriticalNesting--;
   1eb94:	4b06      	ldr	r3, [pc, #24]	; (1ebb0 <vPortExitCritical+0x2c>)
   1eb96:	681b      	ldr	r3, [r3, #0]
   1eb98:	1e5a      	subs	r2, r3, #1
   1eb9a:	4b05      	ldr	r3, [pc, #20]	; (1ebb0 <vPortExitCritical+0x2c>)
   1eb9c:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
   1eb9e:	4b04      	ldr	r3, [pc, #16]	; (1ebb0 <vPortExitCritical+0x2c>)
   1eba0:	681b      	ldr	r3, [r3, #0]
   1eba2:	2b00      	cmp	r3, #0
   1eba4:	d100      	bne.n	1eba8 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
   1eba6:	b662      	cpsie	i
    }
}
   1eba8:	46c0      	nop			; (mov r8, r8)
   1ebaa:	46bd      	mov	sp, r7
   1ebac:	bd80      	pop	{r7, pc}
   1ebae:	46c0      	nop			; (mov r8, r8)
   1ebb0:	20000010 	.word	0x20000010

0001ebb4 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
   1ebb4:	f3ef 8010 	mrs	r0, PRIMASK
   1ebb8:	b672      	cpsid	i
   1ebba:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
   1ebbc:	46c0      	nop			; (mov r8, r8)
   1ebbe:	0018      	movs	r0, r3

0001ebc0 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
   1ebc0:	f380 8810 	msr	PRIMASK, r0
   1ebc4:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
   1ebc6:	46c0      	nop			; (mov r8, r8)
	...

0001ebd0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
   1ebd0:	f3ef 8009 	mrs	r0, PSP
   1ebd4:	4b0e      	ldr	r3, [pc, #56]	; (1ec10 <pxCurrentTCBConst>)
   1ebd6:	681a      	ldr	r2, [r3, #0]
   1ebd8:	3820      	subs	r0, #32
   1ebda:	6010      	str	r0, [r2, #0]
   1ebdc:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
   1ebde:	4644      	mov	r4, r8
   1ebe0:	464d      	mov	r5, r9
   1ebe2:	4656      	mov	r6, sl
   1ebe4:	465f      	mov	r7, fp
   1ebe6:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
   1ebe8:	b508      	push	{r3, lr}
   1ebea:	b672      	cpsid	i
   1ebec:	f001 fb4e 	bl	2028c <vTaskSwitchContext>
   1ebf0:	b662      	cpsie	i
   1ebf2:	bc0c      	pop	{r2, r3}
   1ebf4:	6811      	ldr	r1, [r2, #0]
   1ebf6:	6808      	ldr	r0, [r1, #0]
   1ebf8:	3010      	adds	r0, #16
   1ebfa:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
   1ebfc:	46a0      	mov	r8, r4
   1ebfe:	46a9      	mov	r9, r5
   1ec00:	46b2      	mov	sl, r6
   1ec02:	46bb      	mov	fp, r7
   1ec04:	f380 8809 	msr	PSP, r0
   1ec08:	3820      	subs	r0, #32
   1ec0a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
   1ec0c:	4718      	bx	r3
   1ec0e:	46c0      	nop			; (mov r8, r8)

0001ec10 <pxCurrentTCBConst>:
   1ec10:	200002b8 	.word	0x200002b8
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
   1ec14:	46c0      	nop			; (mov r8, r8)
   1ec16:	46c0      	nop			; (mov r8, r8)

0001ec18 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
   1ec18:	b580      	push	{r7, lr}
   1ec1a:	b082      	sub	sp, #8
   1ec1c:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
   1ec1e:	4b0a      	ldr	r3, [pc, #40]	; (1ec48 <SysTick_Handler+0x30>)
   1ec20:	4798      	blx	r3
   1ec22:	0003      	movs	r3, r0
   1ec24:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
   1ec26:	4b09      	ldr	r3, [pc, #36]	; (1ec4c <SysTick_Handler+0x34>)
   1ec28:	4798      	blx	r3
   1ec2a:	1e03      	subs	r3, r0, #0
   1ec2c:	d003      	beq.n	1ec36 <SysTick_Handler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
   1ec2e:	4b08      	ldr	r3, [pc, #32]	; (1ec50 <SysTick_Handler+0x38>)
   1ec30:	2280      	movs	r2, #128	; 0x80
   1ec32:	0552      	lsls	r2, r2, #21
   1ec34:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
   1ec36:	687b      	ldr	r3, [r7, #4]
   1ec38:	0018      	movs	r0, r3
   1ec3a:	4b06      	ldr	r3, [pc, #24]	; (1ec54 <SysTick_Handler+0x3c>)
   1ec3c:	4798      	blx	r3
}
   1ec3e:	46c0      	nop			; (mov r8, r8)
   1ec40:	46bd      	mov	sp, r7
   1ec42:	b002      	add	sp, #8
   1ec44:	bd80      	pop	{r7, pc}
   1ec46:	46c0      	nop			; (mov r8, r8)
   1ec48:	0001ebb5 	.word	0x0001ebb5
   1ec4c:	00020119 	.word	0x00020119
   1ec50:	e000ed04 	.word	0xe000ed04
   1ec54:	0001ebc1 	.word	0x0001ebc1

0001ec58 <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
   1ec58:	b5b0      	push	{r4, r5, r7, lr}
   1ec5a:	af00      	add	r7, sp, #0
	/* Stop and reset the SysTick. */
	*(portNVIC_SYSTICK_CTRL) = 0UL;
   1ec5c:	4b0a      	ldr	r3, [pc, #40]	; (1ec88 <prvSetupTimerInterrupt+0x30>)
   1ec5e:	2200      	movs	r2, #0
   1ec60:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSTICK_CURRENT_VALUE) = 0UL;
   1ec62:	4b0a      	ldr	r3, [pc, #40]	; (1ec8c <prvSetupTimerInterrupt+0x34>)
   1ec64:	2200      	movs	r2, #0
   1ec66:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
   1ec68:	4c09      	ldr	r4, [pc, #36]	; (1ec90 <prvSetupTimerInterrupt+0x38>)
   1ec6a:	4b0a      	ldr	r3, [pc, #40]	; (1ec94 <prvSetupTimerInterrupt+0x3c>)
   1ec6c:	4798      	blx	r3
   1ec6e:	4b0a      	ldr	r3, [pc, #40]	; (1ec98 <prvSetupTimerInterrupt+0x40>)
   1ec70:	22fa      	movs	r2, #250	; 0xfa
   1ec72:	0091      	lsls	r1, r2, #2
   1ec74:	4798      	blx	r3
   1ec76:	0003      	movs	r3, r0
   1ec78:	3b01      	subs	r3, #1
   1ec7a:	6023      	str	r3, [r4, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
   1ec7c:	4b02      	ldr	r3, [pc, #8]	; (1ec88 <prvSetupTimerInterrupt+0x30>)
   1ec7e:	2207      	movs	r2, #7
   1ec80:	601a      	str	r2, [r3, #0]
}
   1ec82:	46c0      	nop			; (mov r8, r8)
   1ec84:	46bd      	mov	sp, r7
   1ec86:	bdb0      	pop	{r4, r5, r7, pc}
   1ec88:	e000e010 	.word	0xe000e010
   1ec8c:	e000e018 	.word	0xe000e018
   1ec90:	e000e014 	.word	0xe000e014
   1ec94:	0001e9f9 	.word	0x0001e9f9
   1ec98:	0002616d 	.word	0x0002616d

0001ec9c <pvPortMalloc>:
#endif

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
   1ec9c:	b580      	push	{r7, lr}
   1ec9e:	b084      	sub	sp, #16
   1eca0:	af00      	add	r7, sp, #0
   1eca2:	6078      	str	r0, [r7, #4]
void *pvReturn;

	vTaskSuspendAll();
   1eca4:	4b07      	ldr	r3, [pc, #28]	; (1ecc4 <pvPortMalloc+0x28>)
   1eca6:	4798      	blx	r3
	{
		pvReturn = malloc( xWantedSize );
   1eca8:	687b      	ldr	r3, [r7, #4]
   1ecaa:	0018      	movs	r0, r3
   1ecac:	4b06      	ldr	r3, [pc, #24]	; (1ecc8 <pvPortMalloc+0x2c>)
   1ecae:	4798      	blx	r3
   1ecb0:	0003      	movs	r3, r0
   1ecb2:	60fb      	str	r3, [r7, #12]
		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
   1ecb4:	4b05      	ldr	r3, [pc, #20]	; (1eccc <pvPortMalloc+0x30>)
   1ecb6:	4798      	blx	r3
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
   1ecb8:	68fb      	ldr	r3, [r7, #12]
}
   1ecba:	0018      	movs	r0, r3
   1ecbc:	46bd      	mov	sp, r7
   1ecbe:	b004      	add	sp, #16
   1ecc0:	bd80      	pop	{r7, pc}
   1ecc2:	46c0      	nop			; (mov r8, r8)
   1ecc4:	0001ff91 	.word	0x0001ff91
   1ecc8:	00028961 	.word	0x00028961
   1eccc:	0001ffa9 	.word	0x0001ffa9

0001ecd0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
   1ecd0:	b580      	push	{r7, lr}
   1ecd2:	b082      	sub	sp, #8
   1ecd4:	af00      	add	r7, sp, #0
   1ecd6:	6078      	str	r0, [r7, #4]
	if( pv )
   1ecd8:	687b      	ldr	r3, [r7, #4]
   1ecda:	2b00      	cmp	r3, #0
   1ecdc:	d007      	beq.n	1ecee <vPortFree+0x1e>
	{
		vTaskSuspendAll();
   1ecde:	4b06      	ldr	r3, [pc, #24]	; (1ecf8 <vPortFree+0x28>)
   1ece0:	4798      	blx	r3
		{
			free( pv );
   1ece2:	687b      	ldr	r3, [r7, #4]
   1ece4:	0018      	movs	r0, r3
   1ece6:	4b05      	ldr	r3, [pc, #20]	; (1ecfc <vPortFree+0x2c>)
   1ece8:	4798      	blx	r3
			traceFREE( pv, 0 );
		}
		( void ) xTaskResumeAll();
   1ecea:	4b05      	ldr	r3, [pc, #20]	; (1ed00 <vPortFree+0x30>)
   1ecec:	4798      	blx	r3
	}
}
   1ecee:	46c0      	nop			; (mov r8, r8)
   1ecf0:	46bd      	mov	sp, r7
   1ecf2:	b002      	add	sp, #8
   1ecf4:	bd80      	pop	{r7, pc}
   1ecf6:	46c0      	nop			; (mov r8, r8)
   1ecf8:	0001ff91 	.word	0x0001ff91
   1ecfc:	00028975 	.word	0x00028975
   1ed00:	0001ffa9 	.word	0x0001ffa9

0001ed04 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
   1ed04:	b580      	push	{r7, lr}
   1ed06:	b082      	sub	sp, #8
   1ed08:	af00      	add	r7, sp, #0
   1ed0a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   1ed0c:	687b      	ldr	r3, [r7, #4]
   1ed0e:	3308      	adds	r3, #8
   1ed10:	001a      	movs	r2, r3
   1ed12:	687b      	ldr	r3, [r7, #4]
   1ed14:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
   1ed16:	687b      	ldr	r3, [r7, #4]
   1ed18:	2201      	movs	r2, #1
   1ed1a:	4252      	negs	r2, r2
   1ed1c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   1ed1e:	687b      	ldr	r3, [r7, #4]
   1ed20:	3308      	adds	r3, #8
   1ed22:	001a      	movs	r2, r3
   1ed24:	687b      	ldr	r3, [r7, #4]
   1ed26:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   1ed28:	687b      	ldr	r3, [r7, #4]
   1ed2a:	3308      	adds	r3, #8
   1ed2c:	001a      	movs	r2, r3
   1ed2e:	687b      	ldr	r3, [r7, #4]
   1ed30:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
   1ed32:	687b      	ldr	r3, [r7, #4]
   1ed34:	2200      	movs	r2, #0
   1ed36:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
   1ed38:	46c0      	nop			; (mov r8, r8)
   1ed3a:	46bd      	mov	sp, r7
   1ed3c:	b002      	add	sp, #8
   1ed3e:	bd80      	pop	{r7, pc}

0001ed40 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
   1ed40:	b580      	push	{r7, lr}
   1ed42:	b082      	sub	sp, #8
   1ed44:	af00      	add	r7, sp, #0
   1ed46:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
   1ed48:	687b      	ldr	r3, [r7, #4]
   1ed4a:	2200      	movs	r2, #0
   1ed4c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
   1ed4e:	46c0      	nop			; (mov r8, r8)
   1ed50:	46bd      	mov	sp, r7
   1ed52:	b002      	add	sp, #8
   1ed54:	bd80      	pop	{r7, pc}

0001ed56 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
   1ed56:	b580      	push	{r7, lr}
   1ed58:	b084      	sub	sp, #16
   1ed5a:	af00      	add	r7, sp, #0
   1ed5c:	6078      	str	r0, [r7, #4]
   1ed5e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
   1ed60:	687b      	ldr	r3, [r7, #4]
   1ed62:	685b      	ldr	r3, [r3, #4]
   1ed64:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
   1ed66:	683b      	ldr	r3, [r7, #0]
   1ed68:	68fa      	ldr	r2, [r7, #12]
   1ed6a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
   1ed6c:	68fb      	ldr	r3, [r7, #12]
   1ed6e:	689a      	ldr	r2, [r3, #8]
   1ed70:	683b      	ldr	r3, [r7, #0]
   1ed72:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
   1ed74:	68fb      	ldr	r3, [r7, #12]
   1ed76:	689b      	ldr	r3, [r3, #8]
   1ed78:	683a      	ldr	r2, [r7, #0]
   1ed7a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
   1ed7c:	68fb      	ldr	r3, [r7, #12]
   1ed7e:	683a      	ldr	r2, [r7, #0]
   1ed80:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   1ed82:	683b      	ldr	r3, [r7, #0]
   1ed84:	687a      	ldr	r2, [r7, #4]
   1ed86:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
   1ed88:	687b      	ldr	r3, [r7, #4]
   1ed8a:	681b      	ldr	r3, [r3, #0]
   1ed8c:	1c5a      	adds	r2, r3, #1
   1ed8e:	687b      	ldr	r3, [r7, #4]
   1ed90:	601a      	str	r2, [r3, #0]
}
   1ed92:	46c0      	nop			; (mov r8, r8)
   1ed94:	46bd      	mov	sp, r7
   1ed96:	b004      	add	sp, #16
   1ed98:	bd80      	pop	{r7, pc}

0001ed9a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
   1ed9a:	b580      	push	{r7, lr}
   1ed9c:	b084      	sub	sp, #16
   1ed9e:	af00      	add	r7, sp, #0
   1eda0:	6078      	str	r0, [r7, #4]
   1eda2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
   1eda4:	683b      	ldr	r3, [r7, #0]
   1eda6:	681b      	ldr	r3, [r3, #0]
   1eda8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
   1edaa:	68bb      	ldr	r3, [r7, #8]
   1edac:	3301      	adds	r3, #1
   1edae:	d103      	bne.n	1edb8 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
   1edb0:	687b      	ldr	r3, [r7, #4]
   1edb2:	691b      	ldr	r3, [r3, #16]
   1edb4:	60fb      	str	r3, [r7, #12]
   1edb6:	e00c      	b.n	1edd2 <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   1edb8:	687b      	ldr	r3, [r7, #4]
   1edba:	3308      	adds	r3, #8
   1edbc:	60fb      	str	r3, [r7, #12]
   1edbe:	e002      	b.n	1edc6 <vListInsert+0x2c>
   1edc0:	68fb      	ldr	r3, [r7, #12]
   1edc2:	685b      	ldr	r3, [r3, #4]
   1edc4:	60fb      	str	r3, [r7, #12]
   1edc6:	68fb      	ldr	r3, [r7, #12]
   1edc8:	685b      	ldr	r3, [r3, #4]
   1edca:	681a      	ldr	r2, [r3, #0]
   1edcc:	68bb      	ldr	r3, [r7, #8]
   1edce:	429a      	cmp	r2, r3
   1edd0:	d9f6      	bls.n	1edc0 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
   1edd2:	68fb      	ldr	r3, [r7, #12]
   1edd4:	685a      	ldr	r2, [r3, #4]
   1edd6:	683b      	ldr	r3, [r7, #0]
   1edd8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
   1edda:	683b      	ldr	r3, [r7, #0]
   1eddc:	685b      	ldr	r3, [r3, #4]
   1edde:	683a      	ldr	r2, [r7, #0]
   1ede0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
   1ede2:	683b      	ldr	r3, [r7, #0]
   1ede4:	68fa      	ldr	r2, [r7, #12]
   1ede6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
   1ede8:	68fb      	ldr	r3, [r7, #12]
   1edea:	683a      	ldr	r2, [r7, #0]
   1edec:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   1edee:	683b      	ldr	r3, [r7, #0]
   1edf0:	687a      	ldr	r2, [r7, #4]
   1edf2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
   1edf4:	687b      	ldr	r3, [r7, #4]
   1edf6:	681b      	ldr	r3, [r3, #0]
   1edf8:	1c5a      	adds	r2, r3, #1
   1edfa:	687b      	ldr	r3, [r7, #4]
   1edfc:	601a      	str	r2, [r3, #0]
}
   1edfe:	46c0      	nop			; (mov r8, r8)
   1ee00:	46bd      	mov	sp, r7
   1ee02:	b004      	add	sp, #16
   1ee04:	bd80      	pop	{r7, pc}

0001ee06 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
   1ee06:	b580      	push	{r7, lr}
   1ee08:	b084      	sub	sp, #16
   1ee0a:	af00      	add	r7, sp, #0
   1ee0c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
   1ee0e:	687b      	ldr	r3, [r7, #4]
   1ee10:	691b      	ldr	r3, [r3, #16]
   1ee12:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
   1ee14:	687b      	ldr	r3, [r7, #4]
   1ee16:	685b      	ldr	r3, [r3, #4]
   1ee18:	687a      	ldr	r2, [r7, #4]
   1ee1a:	6892      	ldr	r2, [r2, #8]
   1ee1c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
   1ee1e:	687b      	ldr	r3, [r7, #4]
   1ee20:	689b      	ldr	r3, [r3, #8]
   1ee22:	687a      	ldr	r2, [r7, #4]
   1ee24:	6852      	ldr	r2, [r2, #4]
   1ee26:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
   1ee28:	68fb      	ldr	r3, [r7, #12]
   1ee2a:	685a      	ldr	r2, [r3, #4]
   1ee2c:	687b      	ldr	r3, [r7, #4]
   1ee2e:	429a      	cmp	r2, r3
   1ee30:	d103      	bne.n	1ee3a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
   1ee32:	687b      	ldr	r3, [r7, #4]
   1ee34:	689a      	ldr	r2, [r3, #8]
   1ee36:	68fb      	ldr	r3, [r7, #12]
   1ee38:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
   1ee3a:	687b      	ldr	r3, [r7, #4]
   1ee3c:	2200      	movs	r2, #0
   1ee3e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
   1ee40:	68fb      	ldr	r3, [r7, #12]
   1ee42:	681b      	ldr	r3, [r3, #0]
   1ee44:	1e5a      	subs	r2, r3, #1
   1ee46:	68fb      	ldr	r3, [r7, #12]
   1ee48:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
   1ee4a:	68fb      	ldr	r3, [r7, #12]
   1ee4c:	681b      	ldr	r3, [r3, #0]
}
   1ee4e:	0018      	movs	r0, r3
   1ee50:	46bd      	mov	sp, r7
   1ee52:	b004      	add	sp, #16
   1ee54:	bd80      	pop	{r7, pc}
	...

0001ee58 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
   1ee58:	b580      	push	{r7, lr}
   1ee5a:	b084      	sub	sp, #16
   1ee5c:	af00      	add	r7, sp, #0
   1ee5e:	6078      	str	r0, [r7, #4]
   1ee60:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1ee62:	687b      	ldr	r3, [r7, #4]
   1ee64:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
   1ee66:	68fb      	ldr	r3, [r7, #12]
   1ee68:	2b00      	cmp	r3, #0
   1ee6a:	d101      	bne.n	1ee70 <xQueueGenericReset+0x18>
   1ee6c:	b672      	cpsid	i
   1ee6e:	e7fe      	b.n	1ee6e <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
   1ee70:	4b23      	ldr	r3, [pc, #140]	; (1ef00 <xQueueGenericReset+0xa8>)
   1ee72:	4798      	blx	r3
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
   1ee74:	68fb      	ldr	r3, [r7, #12]
   1ee76:	681a      	ldr	r2, [r3, #0]
   1ee78:	68fb      	ldr	r3, [r7, #12]
   1ee7a:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
   1ee7c:	68fb      	ldr	r3, [r7, #12]
   1ee7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1ee80:	434b      	muls	r3, r1
   1ee82:	18d2      	adds	r2, r2, r3
   1ee84:	68fb      	ldr	r3, [r7, #12]
   1ee86:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
   1ee88:	68fb      	ldr	r3, [r7, #12]
   1ee8a:	2200      	movs	r2, #0
   1ee8c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
   1ee8e:	68fb      	ldr	r3, [r7, #12]
   1ee90:	681a      	ldr	r2, [r3, #0]
   1ee92:	68fb      	ldr	r3, [r7, #12]
   1ee94:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
   1ee96:	68fb      	ldr	r3, [r7, #12]
   1ee98:	681a      	ldr	r2, [r3, #0]
   1ee9a:	68fb      	ldr	r3, [r7, #12]
   1ee9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1ee9e:	1e59      	subs	r1, r3, #1
   1eea0:	68fb      	ldr	r3, [r7, #12]
   1eea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1eea4:	434b      	muls	r3, r1
   1eea6:	18d2      	adds	r2, r2, r3
   1eea8:	68fb      	ldr	r3, [r7, #12]
   1eeaa:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
   1eeac:	68fb      	ldr	r3, [r7, #12]
   1eeae:	2244      	movs	r2, #68	; 0x44
   1eeb0:	21ff      	movs	r1, #255	; 0xff
   1eeb2:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
   1eeb4:	68fb      	ldr	r3, [r7, #12]
   1eeb6:	2245      	movs	r2, #69	; 0x45
   1eeb8:	21ff      	movs	r1, #255	; 0xff
   1eeba:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
   1eebc:	683b      	ldr	r3, [r7, #0]
   1eebe:	2b00      	cmp	r3, #0
   1eec0:	d10d      	bne.n	1eede <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   1eec2:	68fb      	ldr	r3, [r7, #12]
   1eec4:	691b      	ldr	r3, [r3, #16]
   1eec6:	2b00      	cmp	r3, #0
   1eec8:	d013      	beq.n	1eef2 <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1eeca:	68fb      	ldr	r3, [r7, #12]
   1eecc:	3310      	adds	r3, #16
   1eece:	0018      	movs	r0, r3
   1eed0:	4b0c      	ldr	r3, [pc, #48]	; (1ef04 <xQueueGenericReset+0xac>)
   1eed2:	4798      	blx	r3
   1eed4:	1e03      	subs	r3, r0, #0
   1eed6:	d00c      	beq.n	1eef2 <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
   1eed8:	4b0b      	ldr	r3, [pc, #44]	; (1ef08 <xQueueGenericReset+0xb0>)
   1eeda:	4798      	blx	r3
   1eedc:	e009      	b.n	1eef2 <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
   1eede:	68fb      	ldr	r3, [r7, #12]
   1eee0:	3310      	adds	r3, #16
   1eee2:	0018      	movs	r0, r3
   1eee4:	4b09      	ldr	r3, [pc, #36]	; (1ef0c <xQueueGenericReset+0xb4>)
   1eee6:	4798      	blx	r3
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
   1eee8:	68fb      	ldr	r3, [r7, #12]
   1eeea:	3324      	adds	r3, #36	; 0x24
   1eeec:	0018      	movs	r0, r3
   1eeee:	4b07      	ldr	r3, [pc, #28]	; (1ef0c <xQueueGenericReset+0xb4>)
   1eef0:	4798      	blx	r3
		}
	}
	taskEXIT_CRITICAL();
   1eef2:	4b07      	ldr	r3, [pc, #28]	; (1ef10 <xQueueGenericReset+0xb8>)
   1eef4:	4798      	blx	r3

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
   1eef6:	2301      	movs	r3, #1
}
   1eef8:	0018      	movs	r0, r3
   1eefa:	46bd      	mov	sp, r7
   1eefc:	b004      	add	sp, #16
   1eefe:	bd80      	pop	{r7, pc}
   1ef00:	0001eb61 	.word	0x0001eb61
   1ef04:	000203c9 	.word	0x000203c9
   1ef08:	0001eb41 	.word	0x0001eb41
   1ef0c:	0001ed05 	.word	0x0001ed05
   1ef10:	0001eb85 	.word	0x0001eb85

0001ef14 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
   1ef14:	b590      	push	{r4, r7, lr}
   1ef16:	b08b      	sub	sp, #44	; 0x2c
   1ef18:	af02      	add	r7, sp, #8
   1ef1a:	60f8      	str	r0, [r7, #12]
   1ef1c:	60b9      	str	r1, [r7, #8]
   1ef1e:	1dfb      	adds	r3, r7, #7
   1ef20:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
   1ef22:	68fb      	ldr	r3, [r7, #12]
   1ef24:	2b00      	cmp	r3, #0
   1ef26:	d101      	bne.n	1ef2c <xQueueGenericCreate+0x18>
   1ef28:	b672      	cpsid	i
   1ef2a:	e7fe      	b.n	1ef2a <xQueueGenericCreate+0x16>

		if( uxItemSize == ( UBaseType_t ) 0 )
   1ef2c:	68bb      	ldr	r3, [r7, #8]
   1ef2e:	2b00      	cmp	r3, #0
   1ef30:	d102      	bne.n	1ef38 <xQueueGenericCreate+0x24>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
   1ef32:	2300      	movs	r3, #0
   1ef34:	61fb      	str	r3, [r7, #28]
   1ef36:	e003      	b.n	1ef40 <xQueueGenericCreate+0x2c>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1ef38:	68fb      	ldr	r3, [r7, #12]
   1ef3a:	68ba      	ldr	r2, [r7, #8]
   1ef3c:	4353      	muls	r3, r2
   1ef3e:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
   1ef40:	69fb      	ldr	r3, [r7, #28]
   1ef42:	334c      	adds	r3, #76	; 0x4c
   1ef44:	0018      	movs	r0, r3
   1ef46:	4b0c      	ldr	r3, [pc, #48]	; (1ef78 <xQueueGenericCreate+0x64>)
   1ef48:	4798      	blx	r3
   1ef4a:	0003      	movs	r3, r0
   1ef4c:	61bb      	str	r3, [r7, #24]

		if( pxNewQueue != NULL )
   1ef4e:	69bb      	ldr	r3, [r7, #24]
   1ef50:	2b00      	cmp	r3, #0
   1ef52:	d00c      	beq.n	1ef6e <xQueueGenericCreate+0x5a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
   1ef54:	69bb      	ldr	r3, [r7, #24]
   1ef56:	334c      	adds	r3, #76	; 0x4c
   1ef58:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
   1ef5a:	1dfb      	adds	r3, r7, #7
   1ef5c:	781c      	ldrb	r4, [r3, #0]
   1ef5e:	697a      	ldr	r2, [r7, #20]
   1ef60:	68b9      	ldr	r1, [r7, #8]
   1ef62:	68f8      	ldr	r0, [r7, #12]
   1ef64:	69bb      	ldr	r3, [r7, #24]
   1ef66:	9300      	str	r3, [sp, #0]
   1ef68:	0023      	movs	r3, r4
   1ef6a:	4c04      	ldr	r4, [pc, #16]	; (1ef7c <xQueueGenericCreate+0x68>)
   1ef6c:	47a0      	blx	r4
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
   1ef6e:	69bb      	ldr	r3, [r7, #24]
	}
   1ef70:	0018      	movs	r0, r3
   1ef72:	46bd      	mov	sp, r7
   1ef74:	b009      	add	sp, #36	; 0x24
   1ef76:	bd90      	pop	{r4, r7, pc}
   1ef78:	0001ec9d 	.word	0x0001ec9d
   1ef7c:	0001ef81 	.word	0x0001ef81

0001ef80 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
   1ef80:	b580      	push	{r7, lr}
   1ef82:	b084      	sub	sp, #16
   1ef84:	af00      	add	r7, sp, #0
   1ef86:	60f8      	str	r0, [r7, #12]
   1ef88:	60b9      	str	r1, [r7, #8]
   1ef8a:	607a      	str	r2, [r7, #4]
   1ef8c:	001a      	movs	r2, r3
   1ef8e:	1cfb      	adds	r3, r7, #3
   1ef90:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
   1ef92:	68bb      	ldr	r3, [r7, #8]
   1ef94:	2b00      	cmp	r3, #0
   1ef96:	d103      	bne.n	1efa0 <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
   1ef98:	69bb      	ldr	r3, [r7, #24]
   1ef9a:	69ba      	ldr	r2, [r7, #24]
   1ef9c:	601a      	str	r2, [r3, #0]
   1ef9e:	e002      	b.n	1efa6 <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
   1efa0:	69bb      	ldr	r3, [r7, #24]
   1efa2:	687a      	ldr	r2, [r7, #4]
   1efa4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
   1efa6:	69bb      	ldr	r3, [r7, #24]
   1efa8:	68fa      	ldr	r2, [r7, #12]
   1efaa:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
   1efac:	69bb      	ldr	r3, [r7, #24]
   1efae:	68ba      	ldr	r2, [r7, #8]
   1efb0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
   1efb2:	69bb      	ldr	r3, [r7, #24]
   1efb4:	2101      	movs	r1, #1
   1efb6:	0018      	movs	r0, r3
   1efb8:	4b04      	ldr	r3, [pc, #16]	; (1efcc <prvInitialiseNewQueue+0x4c>)
   1efba:	4798      	blx	r3
	}
	#endif /* configUSE_TRACE_FACILITY */

	#if( configUSE_QUEUE_SETS == 1 )
	{
		pxNewQueue->pxQueueSetContainer = NULL;
   1efbc:	69bb      	ldr	r3, [r7, #24]
   1efbe:	2200      	movs	r2, #0
   1efc0:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
   1efc2:	46c0      	nop			; (mov r8, r8)
   1efc4:	46bd      	mov	sp, r7
   1efc6:	b004      	add	sp, #16
   1efc8:	bd80      	pop	{r7, pc}
   1efca:	46c0      	nop			; (mov r8, r8)
   1efcc:	0001ee59 	.word	0x0001ee59

0001efd0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
   1efd0:	b580      	push	{r7, lr}
   1efd2:	b08a      	sub	sp, #40	; 0x28
   1efd4:	af00      	add	r7, sp, #0
   1efd6:	60f8      	str	r0, [r7, #12]
   1efd8:	60b9      	str	r1, [r7, #8]
   1efda:	607a      	str	r2, [r7, #4]
   1efdc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
   1efde:	2300      	movs	r3, #0
   1efe0:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1efe2:	68fb      	ldr	r3, [r7, #12]
   1efe4:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
   1efe6:	6a3b      	ldr	r3, [r7, #32]
   1efe8:	2b00      	cmp	r3, #0
   1efea:	d101      	bne.n	1eff0 <xQueueGenericSend+0x20>
   1efec:	b672      	cpsid	i
   1efee:	e7fe      	b.n	1efee <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   1eff0:	68bb      	ldr	r3, [r7, #8]
   1eff2:	2b00      	cmp	r3, #0
   1eff4:	d103      	bne.n	1effe <xQueueGenericSend+0x2e>
   1eff6:	6a3b      	ldr	r3, [r7, #32]
   1eff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1effa:	2b00      	cmp	r3, #0
   1effc:	d101      	bne.n	1f002 <xQueueGenericSend+0x32>
   1effe:	2301      	movs	r3, #1
   1f000:	e000      	b.n	1f004 <xQueueGenericSend+0x34>
   1f002:	2300      	movs	r3, #0
   1f004:	2b00      	cmp	r3, #0
   1f006:	d101      	bne.n	1f00c <xQueueGenericSend+0x3c>
   1f008:	b672      	cpsid	i
   1f00a:	e7fe      	b.n	1f00a <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
   1f00c:	683b      	ldr	r3, [r7, #0]
   1f00e:	2b02      	cmp	r3, #2
   1f010:	d103      	bne.n	1f01a <xQueueGenericSend+0x4a>
   1f012:	6a3b      	ldr	r3, [r7, #32]
   1f014:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1f016:	2b01      	cmp	r3, #1
   1f018:	d101      	bne.n	1f01e <xQueueGenericSend+0x4e>
   1f01a:	2301      	movs	r3, #1
   1f01c:	e000      	b.n	1f020 <xQueueGenericSend+0x50>
   1f01e:	2300      	movs	r3, #0
   1f020:	2b00      	cmp	r3, #0
   1f022:	d101      	bne.n	1f028 <xQueueGenericSend+0x58>
   1f024:	b672      	cpsid	i
   1f026:	e7fe      	b.n	1f026 <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   1f028:	4b53      	ldr	r3, [pc, #332]	; (1f178 <xQueueGenericSend+0x1a8>)
   1f02a:	4798      	blx	r3
   1f02c:	1e03      	subs	r3, r0, #0
   1f02e:	d102      	bne.n	1f036 <xQueueGenericSend+0x66>
   1f030:	687b      	ldr	r3, [r7, #4]
   1f032:	2b00      	cmp	r3, #0
   1f034:	d101      	bne.n	1f03a <xQueueGenericSend+0x6a>
   1f036:	2301      	movs	r3, #1
   1f038:	e000      	b.n	1f03c <xQueueGenericSend+0x6c>
   1f03a:	2300      	movs	r3, #0
   1f03c:	2b00      	cmp	r3, #0
   1f03e:	d101      	bne.n	1f044 <xQueueGenericSend+0x74>
   1f040:	b672      	cpsid	i
   1f042:	e7fe      	b.n	1f042 <xQueueGenericSend+0x72>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
   1f044:	4b4d      	ldr	r3, [pc, #308]	; (1f17c <xQueueGenericSend+0x1ac>)
   1f046:	4798      	blx	r3
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
   1f048:	6a3b      	ldr	r3, [r7, #32]
   1f04a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1f04c:	6a3b      	ldr	r3, [r7, #32]
   1f04e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1f050:	429a      	cmp	r2, r3
   1f052:	d302      	bcc.n	1f05a <xQueueGenericSend+0x8a>
   1f054:	683b      	ldr	r3, [r7, #0]
   1f056:	2b02      	cmp	r3, #2
   1f058:	d12d      	bne.n	1f0b6 <xQueueGenericSend+0xe6>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   1f05a:	683a      	ldr	r2, [r7, #0]
   1f05c:	68b9      	ldr	r1, [r7, #8]
   1f05e:	6a3b      	ldr	r3, [r7, #32]
   1f060:	0018      	movs	r0, r3
   1f062:	4b47      	ldr	r3, [pc, #284]	; (1f180 <xQueueGenericSend+0x1b0>)
   1f064:	4798      	blx	r3
   1f066:	0003      	movs	r3, r0
   1f068:	61fb      	str	r3, [r7, #28]

				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
   1f06a:	6a3b      	ldr	r3, [r7, #32]
   1f06c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1f06e:	2b00      	cmp	r3, #0
   1f070:	d00a      	beq.n	1f088 <xQueueGenericSend+0xb8>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
   1f072:	683a      	ldr	r2, [r7, #0]
   1f074:	6a3b      	ldr	r3, [r7, #32]
   1f076:	0011      	movs	r1, r2
   1f078:	0018      	movs	r0, r3
   1f07a:	4b42      	ldr	r3, [pc, #264]	; (1f184 <xQueueGenericSend+0x1b4>)
   1f07c:	4798      	blx	r3
   1f07e:	1e03      	subs	r3, r0, #0
   1f080:	d015      	beq.n	1f0ae <xQueueGenericSend+0xde>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock. A context switch is required. */
							queueYIELD_IF_USING_PREEMPTION();
   1f082:	4b41      	ldr	r3, [pc, #260]	; (1f188 <xQueueGenericSend+0x1b8>)
   1f084:	4798      	blx	r3
   1f086:	e012      	b.n	1f0ae <xQueueGenericSend+0xde>
					}
					else
					{
						/* If there was a task waiting for data to arrive on the
						queue then unblock it now. */
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   1f088:	6a3b      	ldr	r3, [r7, #32]
   1f08a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1f08c:	2b00      	cmp	r3, #0
   1f08e:	d009      	beq.n	1f0a4 <xQueueGenericSend+0xd4>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1f090:	6a3b      	ldr	r3, [r7, #32]
   1f092:	3324      	adds	r3, #36	; 0x24
   1f094:	0018      	movs	r0, r3
   1f096:	4b3d      	ldr	r3, [pc, #244]	; (1f18c <xQueueGenericSend+0x1bc>)
   1f098:	4798      	blx	r3
   1f09a:	1e03      	subs	r3, r0, #0
   1f09c:	d007      	beq.n	1f0ae <xQueueGenericSend+0xde>
							{
								/* The unblocked task has a priority higher than
								our own so yield immediately.  Yes it is ok to
								do this from within the critical section - the
								kernel takes care of that. */
								queueYIELD_IF_USING_PREEMPTION();
   1f09e:	4b3a      	ldr	r3, [pc, #232]	; (1f188 <xQueueGenericSend+0x1b8>)
   1f0a0:	4798      	blx	r3
   1f0a2:	e004      	b.n	1f0ae <xQueueGenericSend+0xde>
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
						}
						else if( xYieldRequired != pdFALSE )
   1f0a4:	69fb      	ldr	r3, [r7, #28]
   1f0a6:	2b00      	cmp	r3, #0
   1f0a8:	d001      	beq.n	1f0ae <xQueueGenericSend+0xde>
						{
							/* This path is a special case that will only get
							executed if the task was holding multiple mutexes
							and the mutexes were given back in an order that is
							different to that in which they were taken. */
							queueYIELD_IF_USING_PREEMPTION();
   1f0aa:	4b37      	ldr	r3, [pc, #220]	; (1f188 <xQueueGenericSend+0x1b8>)
   1f0ac:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
   1f0ae:	4b38      	ldr	r3, [pc, #224]	; (1f190 <xQueueGenericSend+0x1c0>)
   1f0b0:	4798      	blx	r3
				return pdPASS;
   1f0b2:	2301      	movs	r3, #1
   1f0b4:	e05c      	b.n	1f170 <xQueueGenericSend+0x1a0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
   1f0b6:	687b      	ldr	r3, [r7, #4]
   1f0b8:	2b00      	cmp	r3, #0
   1f0ba:	d103      	bne.n	1f0c4 <xQueueGenericSend+0xf4>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   1f0bc:	4b34      	ldr	r3, [pc, #208]	; (1f190 <xQueueGenericSend+0x1c0>)
   1f0be:	4798      	blx	r3

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
   1f0c0:	2300      	movs	r3, #0
   1f0c2:	e055      	b.n	1f170 <xQueueGenericSend+0x1a0>
				}
				else if( xEntryTimeSet == pdFALSE )
   1f0c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1f0c6:	2b00      	cmp	r3, #0
   1f0c8:	d106      	bne.n	1f0d8 <xQueueGenericSend+0x108>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
   1f0ca:	2314      	movs	r3, #20
   1f0cc:	18fb      	adds	r3, r7, r3
   1f0ce:	0018      	movs	r0, r3
   1f0d0:	4b30      	ldr	r3, [pc, #192]	; (1f194 <xQueueGenericSend+0x1c4>)
   1f0d2:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
   1f0d4:	2301      	movs	r3, #1
   1f0d6:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
   1f0d8:	4b2d      	ldr	r3, [pc, #180]	; (1f190 <xQueueGenericSend+0x1c0>)
   1f0da:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   1f0dc:	4b2e      	ldr	r3, [pc, #184]	; (1f198 <xQueueGenericSend+0x1c8>)
   1f0de:	4798      	blx	r3
		prvLockQueue( pxQueue );
   1f0e0:	4b26      	ldr	r3, [pc, #152]	; (1f17c <xQueueGenericSend+0x1ac>)
   1f0e2:	4798      	blx	r3
   1f0e4:	6a3b      	ldr	r3, [r7, #32]
   1f0e6:	2244      	movs	r2, #68	; 0x44
   1f0e8:	5c9b      	ldrb	r3, [r3, r2]
   1f0ea:	b25b      	sxtb	r3, r3
   1f0ec:	3301      	adds	r3, #1
   1f0ee:	d103      	bne.n	1f0f8 <xQueueGenericSend+0x128>
   1f0f0:	6a3b      	ldr	r3, [r7, #32]
   1f0f2:	2244      	movs	r2, #68	; 0x44
   1f0f4:	2100      	movs	r1, #0
   1f0f6:	5499      	strb	r1, [r3, r2]
   1f0f8:	6a3b      	ldr	r3, [r7, #32]
   1f0fa:	2245      	movs	r2, #69	; 0x45
   1f0fc:	5c9b      	ldrb	r3, [r3, r2]
   1f0fe:	b25b      	sxtb	r3, r3
   1f100:	3301      	adds	r3, #1
   1f102:	d103      	bne.n	1f10c <xQueueGenericSend+0x13c>
   1f104:	6a3b      	ldr	r3, [r7, #32]
   1f106:	2245      	movs	r2, #69	; 0x45
   1f108:	2100      	movs	r1, #0
   1f10a:	5499      	strb	r1, [r3, r2]
   1f10c:	4b20      	ldr	r3, [pc, #128]	; (1f190 <xQueueGenericSend+0x1c0>)
   1f10e:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   1f110:	1d3a      	adds	r2, r7, #4
   1f112:	2314      	movs	r3, #20
   1f114:	18fb      	adds	r3, r7, r3
   1f116:	0011      	movs	r1, r2
   1f118:	0018      	movs	r0, r3
   1f11a:	4b20      	ldr	r3, [pc, #128]	; (1f19c <xQueueGenericSend+0x1cc>)
   1f11c:	4798      	blx	r3
   1f11e:	1e03      	subs	r3, r0, #0
   1f120:	d11f      	bne.n	1f162 <xQueueGenericSend+0x192>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
   1f122:	6a3b      	ldr	r3, [r7, #32]
   1f124:	0018      	movs	r0, r3
   1f126:	4b1e      	ldr	r3, [pc, #120]	; (1f1a0 <xQueueGenericSend+0x1d0>)
   1f128:	4798      	blx	r3
   1f12a:	1e03      	subs	r3, r0, #0
   1f12c:	d012      	beq.n	1f154 <xQueueGenericSend+0x184>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
   1f12e:	6a3b      	ldr	r3, [r7, #32]
   1f130:	3310      	adds	r3, #16
   1f132:	687a      	ldr	r2, [r7, #4]
   1f134:	0011      	movs	r1, r2
   1f136:	0018      	movs	r0, r3
   1f138:	4b1a      	ldr	r3, [pc, #104]	; (1f1a4 <xQueueGenericSend+0x1d4>)
   1f13a:	4798      	blx	r3
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
   1f13c:	6a3b      	ldr	r3, [r7, #32]
   1f13e:	0018      	movs	r0, r3
   1f140:	4b19      	ldr	r3, [pc, #100]	; (1f1a8 <xQueueGenericSend+0x1d8>)
   1f142:	4798      	blx	r3
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
   1f144:	4b19      	ldr	r3, [pc, #100]	; (1f1ac <xQueueGenericSend+0x1dc>)
   1f146:	4798      	blx	r3
   1f148:	1e03      	subs	r3, r0, #0
   1f14a:	d000      	beq.n	1f14e <xQueueGenericSend+0x17e>
   1f14c:	e77a      	b.n	1f044 <xQueueGenericSend+0x74>
				{
					portYIELD_WITHIN_API();
   1f14e:	4b0e      	ldr	r3, [pc, #56]	; (1f188 <xQueueGenericSend+0x1b8>)
   1f150:	4798      	blx	r3
   1f152:	e777      	b.n	1f044 <xQueueGenericSend+0x74>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
   1f154:	6a3b      	ldr	r3, [r7, #32]
   1f156:	0018      	movs	r0, r3
   1f158:	4b13      	ldr	r3, [pc, #76]	; (1f1a8 <xQueueGenericSend+0x1d8>)
   1f15a:	4798      	blx	r3
				( void ) xTaskResumeAll();
   1f15c:	4b13      	ldr	r3, [pc, #76]	; (1f1ac <xQueueGenericSend+0x1dc>)
   1f15e:	4798      	blx	r3
   1f160:	e770      	b.n	1f044 <xQueueGenericSend+0x74>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
   1f162:	6a3b      	ldr	r3, [r7, #32]
   1f164:	0018      	movs	r0, r3
   1f166:	4b10      	ldr	r3, [pc, #64]	; (1f1a8 <xQueueGenericSend+0x1d8>)
   1f168:	4798      	blx	r3
			( void ) xTaskResumeAll();
   1f16a:	4b10      	ldr	r3, [pc, #64]	; (1f1ac <xQueueGenericSend+0x1dc>)
   1f16c:	4798      	blx	r3

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
   1f16e:	2300      	movs	r3, #0
		}
	}
}
   1f170:	0018      	movs	r0, r3
   1f172:	46bd      	mov	sp, r7
   1f174:	b00a      	add	sp, #40	; 0x28
   1f176:	bd80      	pop	{r7, pc}
   1f178:	00020701 	.word	0x00020701
   1f17c:	0001eb61 	.word	0x0001eb61
   1f180:	0001f691 	.word	0x0001f691
   1f184:	0001f995 	.word	0x0001f995
   1f188:	0001eb41 	.word	0x0001eb41
   1f18c:	000203c9 	.word	0x000203c9
   1f190:	0001eb85 	.word	0x0001eb85
   1f194:	00020489 	.word	0x00020489
   1f198:	0001ff91 	.word	0x0001ff91
   1f19c:	000204b1 	.word	0x000204b1
   1f1a0:	0001f8e5 	.word	0x0001f8e5
   1f1a4:	00020331 	.word	0x00020331
   1f1a8:	0001f7c1 	.word	0x0001f7c1
   1f1ac:	0001ffa9 	.word	0x0001ffa9

0001f1b0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
   1f1b0:	b580      	push	{r7, lr}
   1f1b2:	b088      	sub	sp, #32
   1f1b4:	af00      	add	r7, sp, #0
   1f1b6:	60f8      	str	r0, [r7, #12]
   1f1b8:	60b9      	str	r1, [r7, #8]
   1f1ba:	607a      	str	r2, [r7, #4]
   1f1bc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1f1be:	68fb      	ldr	r3, [r7, #12]
   1f1c0:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
   1f1c2:	69bb      	ldr	r3, [r7, #24]
   1f1c4:	2b00      	cmp	r3, #0
   1f1c6:	d101      	bne.n	1f1cc <xQueueGenericSendFromISR+0x1c>
   1f1c8:	b672      	cpsid	i
   1f1ca:	e7fe      	b.n	1f1ca <xQueueGenericSendFromISR+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   1f1cc:	68bb      	ldr	r3, [r7, #8]
   1f1ce:	2b00      	cmp	r3, #0
   1f1d0:	d103      	bne.n	1f1da <xQueueGenericSendFromISR+0x2a>
   1f1d2:	69bb      	ldr	r3, [r7, #24]
   1f1d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1f1d6:	2b00      	cmp	r3, #0
   1f1d8:	d101      	bne.n	1f1de <xQueueGenericSendFromISR+0x2e>
   1f1da:	2301      	movs	r3, #1
   1f1dc:	e000      	b.n	1f1e0 <xQueueGenericSendFromISR+0x30>
   1f1de:	2300      	movs	r3, #0
   1f1e0:	2b00      	cmp	r3, #0
   1f1e2:	d101      	bne.n	1f1e8 <xQueueGenericSendFromISR+0x38>
   1f1e4:	b672      	cpsid	i
   1f1e6:	e7fe      	b.n	1f1e6 <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
   1f1e8:	683b      	ldr	r3, [r7, #0]
   1f1ea:	2b02      	cmp	r3, #2
   1f1ec:	d103      	bne.n	1f1f6 <xQueueGenericSendFromISR+0x46>
   1f1ee:	69bb      	ldr	r3, [r7, #24]
   1f1f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1f1f2:	2b01      	cmp	r3, #1
   1f1f4:	d101      	bne.n	1f1fa <xQueueGenericSendFromISR+0x4a>
   1f1f6:	2301      	movs	r3, #1
   1f1f8:	e000      	b.n	1f1fc <xQueueGenericSendFromISR+0x4c>
   1f1fa:	2300      	movs	r3, #0
   1f1fc:	2b00      	cmp	r3, #0
   1f1fe:	d101      	bne.n	1f204 <xQueueGenericSendFromISR+0x54>
   1f200:	b672      	cpsid	i
   1f202:	e7fe      	b.n	1f202 <xQueueGenericSendFromISR+0x52>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   1f204:	4b2d      	ldr	r3, [pc, #180]	; (1f2bc <xQueueGenericSendFromISR+0x10c>)
   1f206:	4798      	blx	r3
   1f208:	0003      	movs	r3, r0
   1f20a:	617b      	str	r3, [r7, #20]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
   1f20c:	69bb      	ldr	r3, [r7, #24]
   1f20e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1f210:	69bb      	ldr	r3, [r7, #24]
   1f212:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1f214:	429a      	cmp	r2, r3
   1f216:	d302      	bcc.n	1f21e <xQueueGenericSendFromISR+0x6e>
   1f218:	683b      	ldr	r3, [r7, #0]
   1f21a:	2b02      	cmp	r3, #2
   1f21c:	d142      	bne.n	1f2a4 <xQueueGenericSendFromISR+0xf4>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
   1f21e:	2313      	movs	r3, #19
   1f220:	18fb      	adds	r3, r7, r3
   1f222:	69ba      	ldr	r2, [r7, #24]
   1f224:	2145      	movs	r1, #69	; 0x45
   1f226:	5c52      	ldrb	r2, [r2, r1]
   1f228:	701a      	strb	r2, [r3, #0]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   1f22a:	683a      	ldr	r2, [r7, #0]
   1f22c:	68b9      	ldr	r1, [r7, #8]
   1f22e:	69bb      	ldr	r3, [r7, #24]
   1f230:	0018      	movs	r0, r3
   1f232:	4b23      	ldr	r3, [pc, #140]	; (1f2c0 <xQueueGenericSendFromISR+0x110>)
   1f234:	4798      	blx	r3

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
   1f236:	2313      	movs	r3, #19
   1f238:	18fb      	adds	r3, r7, r3
   1f23a:	781b      	ldrb	r3, [r3, #0]
   1f23c:	b25b      	sxtb	r3, r3
   1f23e:	3301      	adds	r3, #1
   1f240:	d124      	bne.n	1f28c <xQueueGenericSendFromISR+0xdc>
			{
				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
   1f242:	69bb      	ldr	r3, [r7, #24]
   1f244:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1f246:	2b00      	cmp	r3, #0
   1f248:	d00e      	beq.n	1f268 <xQueueGenericSendFromISR+0xb8>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
   1f24a:	683a      	ldr	r2, [r7, #0]
   1f24c:	69bb      	ldr	r3, [r7, #24]
   1f24e:	0011      	movs	r1, r2
   1f250:	0018      	movs	r0, r3
   1f252:	4b1c      	ldr	r3, [pc, #112]	; (1f2c4 <xQueueGenericSendFromISR+0x114>)
   1f254:	4798      	blx	r3
   1f256:	1e03      	subs	r3, r0, #0
   1f258:	d021      	beq.n	1f29e <xQueueGenericSendFromISR+0xee>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock.  A context switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
   1f25a:	687b      	ldr	r3, [r7, #4]
   1f25c:	2b00      	cmp	r3, #0
   1f25e:	d01e      	beq.n	1f29e <xQueueGenericSendFromISR+0xee>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
   1f260:	687b      	ldr	r3, [r7, #4]
   1f262:	2201      	movs	r2, #1
   1f264:	601a      	str	r2, [r3, #0]
   1f266:	e01a      	b.n	1f29e <xQueueGenericSendFromISR+0xee>
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   1f268:	69bb      	ldr	r3, [r7, #24]
   1f26a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1f26c:	2b00      	cmp	r3, #0
   1f26e:	d016      	beq.n	1f29e <xQueueGenericSendFromISR+0xee>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1f270:	69bb      	ldr	r3, [r7, #24]
   1f272:	3324      	adds	r3, #36	; 0x24
   1f274:	0018      	movs	r0, r3
   1f276:	4b14      	ldr	r3, [pc, #80]	; (1f2c8 <xQueueGenericSendFromISR+0x118>)
   1f278:	4798      	blx	r3
   1f27a:	1e03      	subs	r3, r0, #0
   1f27c:	d00f      	beq.n	1f29e <xQueueGenericSendFromISR+0xee>
							{
								/* The task waiting has a higher priority so
								record that a context switch is required. */
								if( pxHigherPriorityTaskWoken != NULL )
   1f27e:	687b      	ldr	r3, [r7, #4]
   1f280:	2b00      	cmp	r3, #0
   1f282:	d00c      	beq.n	1f29e <xQueueGenericSendFromISR+0xee>
								{
									*pxHigherPriorityTaskWoken = pdTRUE;
   1f284:	687b      	ldr	r3, [r7, #4]
   1f286:	2201      	movs	r2, #1
   1f288:	601a      	str	r2, [r3, #0]
   1f28a:	e008      	b.n	1f29e <xQueueGenericSendFromISR+0xee>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
   1f28c:	2313      	movs	r3, #19
   1f28e:	18fb      	adds	r3, r7, r3
   1f290:	781b      	ldrb	r3, [r3, #0]
   1f292:	3301      	adds	r3, #1
   1f294:	b2db      	uxtb	r3, r3
   1f296:	b259      	sxtb	r1, r3
   1f298:	69bb      	ldr	r3, [r7, #24]
   1f29a:	2245      	movs	r2, #69	; 0x45
   1f29c:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
   1f29e:	2301      	movs	r3, #1
   1f2a0:	61fb      	str	r3, [r7, #28]
		{
   1f2a2:	e001      	b.n	1f2a8 <xQueueGenericSendFromISR+0xf8>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
   1f2a4:	2300      	movs	r3, #0
   1f2a6:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
   1f2a8:	697b      	ldr	r3, [r7, #20]
   1f2aa:	0018      	movs	r0, r3
   1f2ac:	4b07      	ldr	r3, [pc, #28]	; (1f2cc <xQueueGenericSendFromISR+0x11c>)
   1f2ae:	4798      	blx	r3

	return xReturn;
   1f2b0:	69fb      	ldr	r3, [r7, #28]
}
   1f2b2:	0018      	movs	r0, r3
   1f2b4:	46bd      	mov	sp, r7
   1f2b6:	b008      	add	sp, #32
   1f2b8:	bd80      	pop	{r7, pc}
   1f2ba:	46c0      	nop			; (mov r8, r8)
   1f2bc:	0001ebb5 	.word	0x0001ebb5
   1f2c0:	0001f691 	.word	0x0001f691
   1f2c4:	0001f995 	.word	0x0001f995
   1f2c8:	000203c9 	.word	0x000203c9
   1f2cc:	0001ebc1 	.word	0x0001ebc1

0001f2d0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
   1f2d0:	b580      	push	{r7, lr}
   1f2d2:	b08a      	sub	sp, #40	; 0x28
   1f2d4:	af00      	add	r7, sp, #0
   1f2d6:	60f8      	str	r0, [r7, #12]
   1f2d8:	60b9      	str	r1, [r7, #8]
   1f2da:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
   1f2dc:	2300      	movs	r3, #0
   1f2de:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1f2e0:	68fb      	ldr	r3, [r7, #12]
   1f2e2:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
   1f2e4:	6a3b      	ldr	r3, [r7, #32]
   1f2e6:	2b00      	cmp	r3, #0
   1f2e8:	d101      	bne.n	1f2ee <xQueueReceive+0x1e>
   1f2ea:	b672      	cpsid	i
   1f2ec:	e7fe      	b.n	1f2ec <xQueueReceive+0x1c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
   1f2ee:	68bb      	ldr	r3, [r7, #8]
   1f2f0:	2b00      	cmp	r3, #0
   1f2f2:	d103      	bne.n	1f2fc <xQueueReceive+0x2c>
   1f2f4:	6a3b      	ldr	r3, [r7, #32]
   1f2f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1f2f8:	2b00      	cmp	r3, #0
   1f2fa:	d101      	bne.n	1f300 <xQueueReceive+0x30>
   1f2fc:	2301      	movs	r3, #1
   1f2fe:	e000      	b.n	1f302 <xQueueReceive+0x32>
   1f300:	2300      	movs	r3, #0
   1f302:	2b00      	cmp	r3, #0
   1f304:	d101      	bne.n	1f30a <xQueueReceive+0x3a>
   1f306:	b672      	cpsid	i
   1f308:	e7fe      	b.n	1f308 <xQueueReceive+0x38>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   1f30a:	4b4c      	ldr	r3, [pc, #304]	; (1f43c <xQueueReceive+0x16c>)
   1f30c:	4798      	blx	r3
   1f30e:	1e03      	subs	r3, r0, #0
   1f310:	d102      	bne.n	1f318 <xQueueReceive+0x48>
   1f312:	687b      	ldr	r3, [r7, #4]
   1f314:	2b00      	cmp	r3, #0
   1f316:	d101      	bne.n	1f31c <xQueueReceive+0x4c>
   1f318:	2301      	movs	r3, #1
   1f31a:	e000      	b.n	1f31e <xQueueReceive+0x4e>
   1f31c:	2300      	movs	r3, #0
   1f31e:	2b00      	cmp	r3, #0
   1f320:	d101      	bne.n	1f326 <xQueueReceive+0x56>
   1f322:	b672      	cpsid	i
   1f324:	e7fe      	b.n	1f324 <xQueueReceive+0x54>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
   1f326:	4b46      	ldr	r3, [pc, #280]	; (1f440 <xQueueReceive+0x170>)
   1f328:	4798      	blx	r3
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
   1f32a:	6a3b      	ldr	r3, [r7, #32]
   1f32c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1f32e:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
   1f330:	69fb      	ldr	r3, [r7, #28]
   1f332:	2b00      	cmp	r3, #0
   1f334:	d01a      	beq.n	1f36c <xQueueReceive+0x9c>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
   1f336:	68ba      	ldr	r2, [r7, #8]
   1f338:	6a3b      	ldr	r3, [r7, #32]
   1f33a:	0011      	movs	r1, r2
   1f33c:	0018      	movs	r0, r3
   1f33e:	4b41      	ldr	r3, [pc, #260]	; (1f444 <xQueueReceive+0x174>)
   1f340:	4798      	blx	r3
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
   1f342:	69fb      	ldr	r3, [r7, #28]
   1f344:	1e5a      	subs	r2, r3, #1
   1f346:	6a3b      	ldr	r3, [r7, #32]
   1f348:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   1f34a:	6a3b      	ldr	r3, [r7, #32]
   1f34c:	691b      	ldr	r3, [r3, #16]
   1f34e:	2b00      	cmp	r3, #0
   1f350:	d008      	beq.n	1f364 <xQueueReceive+0x94>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1f352:	6a3b      	ldr	r3, [r7, #32]
   1f354:	3310      	adds	r3, #16
   1f356:	0018      	movs	r0, r3
   1f358:	4b3b      	ldr	r3, [pc, #236]	; (1f448 <xQueueReceive+0x178>)
   1f35a:	4798      	blx	r3
   1f35c:	1e03      	subs	r3, r0, #0
   1f35e:	d001      	beq.n	1f364 <xQueueReceive+0x94>
					{
						queueYIELD_IF_USING_PREEMPTION();
   1f360:	4b3a      	ldr	r3, [pc, #232]	; (1f44c <xQueueReceive+0x17c>)
   1f362:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
   1f364:	4b3a      	ldr	r3, [pc, #232]	; (1f450 <xQueueReceive+0x180>)
   1f366:	4798      	blx	r3
				return pdPASS;
   1f368:	2301      	movs	r3, #1
   1f36a:	e062      	b.n	1f432 <xQueueReceive+0x162>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
   1f36c:	687b      	ldr	r3, [r7, #4]
   1f36e:	2b00      	cmp	r3, #0
   1f370:	d103      	bne.n	1f37a <xQueueReceive+0xaa>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   1f372:	4b37      	ldr	r3, [pc, #220]	; (1f450 <xQueueReceive+0x180>)
   1f374:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
   1f376:	2300      	movs	r3, #0
   1f378:	e05b      	b.n	1f432 <xQueueReceive+0x162>
				}
				else if( xEntryTimeSet == pdFALSE )
   1f37a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1f37c:	2b00      	cmp	r3, #0
   1f37e:	d106      	bne.n	1f38e <xQueueReceive+0xbe>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
   1f380:	2314      	movs	r3, #20
   1f382:	18fb      	adds	r3, r7, r3
   1f384:	0018      	movs	r0, r3
   1f386:	4b33      	ldr	r3, [pc, #204]	; (1f454 <xQueueReceive+0x184>)
   1f388:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
   1f38a:	2301      	movs	r3, #1
   1f38c:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
   1f38e:	4b30      	ldr	r3, [pc, #192]	; (1f450 <xQueueReceive+0x180>)
   1f390:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   1f392:	4b31      	ldr	r3, [pc, #196]	; (1f458 <xQueueReceive+0x188>)
   1f394:	4798      	blx	r3
		prvLockQueue( pxQueue );
   1f396:	4b2a      	ldr	r3, [pc, #168]	; (1f440 <xQueueReceive+0x170>)
   1f398:	4798      	blx	r3
   1f39a:	6a3b      	ldr	r3, [r7, #32]
   1f39c:	2244      	movs	r2, #68	; 0x44
   1f39e:	5c9b      	ldrb	r3, [r3, r2]
   1f3a0:	b25b      	sxtb	r3, r3
   1f3a2:	3301      	adds	r3, #1
   1f3a4:	d103      	bne.n	1f3ae <xQueueReceive+0xde>
   1f3a6:	6a3b      	ldr	r3, [r7, #32]
   1f3a8:	2244      	movs	r2, #68	; 0x44
   1f3aa:	2100      	movs	r1, #0
   1f3ac:	5499      	strb	r1, [r3, r2]
   1f3ae:	6a3b      	ldr	r3, [r7, #32]
   1f3b0:	2245      	movs	r2, #69	; 0x45
   1f3b2:	5c9b      	ldrb	r3, [r3, r2]
   1f3b4:	b25b      	sxtb	r3, r3
   1f3b6:	3301      	adds	r3, #1
   1f3b8:	d103      	bne.n	1f3c2 <xQueueReceive+0xf2>
   1f3ba:	6a3b      	ldr	r3, [r7, #32]
   1f3bc:	2245      	movs	r2, #69	; 0x45
   1f3be:	2100      	movs	r1, #0
   1f3c0:	5499      	strb	r1, [r3, r2]
   1f3c2:	4b23      	ldr	r3, [pc, #140]	; (1f450 <xQueueReceive+0x180>)
   1f3c4:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   1f3c6:	1d3a      	adds	r2, r7, #4
   1f3c8:	2314      	movs	r3, #20
   1f3ca:	18fb      	adds	r3, r7, r3
   1f3cc:	0011      	movs	r1, r2
   1f3ce:	0018      	movs	r0, r3
   1f3d0:	4b22      	ldr	r3, [pc, #136]	; (1f45c <xQueueReceive+0x18c>)
   1f3d2:	4798      	blx	r3
   1f3d4:	1e03      	subs	r3, r0, #0
   1f3d6:	d11e      	bne.n	1f416 <xQueueReceive+0x146>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   1f3d8:	6a3b      	ldr	r3, [r7, #32]
   1f3da:	0018      	movs	r0, r3
   1f3dc:	4b20      	ldr	r3, [pc, #128]	; (1f460 <xQueueReceive+0x190>)
   1f3de:	4798      	blx	r3
   1f3e0:	1e03      	subs	r3, r0, #0
   1f3e2:	d011      	beq.n	1f408 <xQueueReceive+0x138>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   1f3e4:	6a3b      	ldr	r3, [r7, #32]
   1f3e6:	3324      	adds	r3, #36	; 0x24
   1f3e8:	687a      	ldr	r2, [r7, #4]
   1f3ea:	0011      	movs	r1, r2
   1f3ec:	0018      	movs	r0, r3
   1f3ee:	4b1d      	ldr	r3, [pc, #116]	; (1f464 <xQueueReceive+0x194>)
   1f3f0:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
   1f3f2:	6a3b      	ldr	r3, [r7, #32]
   1f3f4:	0018      	movs	r0, r3
   1f3f6:	4b1c      	ldr	r3, [pc, #112]	; (1f468 <xQueueReceive+0x198>)
   1f3f8:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   1f3fa:	4b1c      	ldr	r3, [pc, #112]	; (1f46c <xQueueReceive+0x19c>)
   1f3fc:	4798      	blx	r3
   1f3fe:	1e03      	subs	r3, r0, #0
   1f400:	d191      	bne.n	1f326 <xQueueReceive+0x56>
				{
					portYIELD_WITHIN_API();
   1f402:	4b12      	ldr	r3, [pc, #72]	; (1f44c <xQueueReceive+0x17c>)
   1f404:	4798      	blx	r3
   1f406:	e78e      	b.n	1f326 <xQueueReceive+0x56>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
   1f408:	6a3b      	ldr	r3, [r7, #32]
   1f40a:	0018      	movs	r0, r3
   1f40c:	4b16      	ldr	r3, [pc, #88]	; (1f468 <xQueueReceive+0x198>)
   1f40e:	4798      	blx	r3
				( void ) xTaskResumeAll();
   1f410:	4b16      	ldr	r3, [pc, #88]	; (1f46c <xQueueReceive+0x19c>)
   1f412:	4798      	blx	r3
   1f414:	e787      	b.n	1f326 <xQueueReceive+0x56>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
   1f416:	6a3b      	ldr	r3, [r7, #32]
   1f418:	0018      	movs	r0, r3
   1f41a:	4b13      	ldr	r3, [pc, #76]	; (1f468 <xQueueReceive+0x198>)
   1f41c:	4798      	blx	r3
			( void ) xTaskResumeAll();
   1f41e:	4b13      	ldr	r3, [pc, #76]	; (1f46c <xQueueReceive+0x19c>)
   1f420:	4798      	blx	r3

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   1f422:	6a3b      	ldr	r3, [r7, #32]
   1f424:	0018      	movs	r0, r3
   1f426:	4b0e      	ldr	r3, [pc, #56]	; (1f460 <xQueueReceive+0x190>)
   1f428:	4798      	blx	r3
   1f42a:	1e03      	subs	r3, r0, #0
   1f42c:	d100      	bne.n	1f430 <xQueueReceive+0x160>
   1f42e:	e77a      	b.n	1f326 <xQueueReceive+0x56>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
   1f430:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
   1f432:	0018      	movs	r0, r3
   1f434:	46bd      	mov	sp, r7
   1f436:	b00a      	add	sp, #40	; 0x28
   1f438:	bd80      	pop	{r7, pc}
   1f43a:	46c0      	nop			; (mov r8, r8)
   1f43c:	00020701 	.word	0x00020701
   1f440:	0001eb61 	.word	0x0001eb61
   1f444:	0001f771 	.word	0x0001f771
   1f448:	000203c9 	.word	0x000203c9
   1f44c:	0001eb41 	.word	0x0001eb41
   1f450:	0001eb85 	.word	0x0001eb85
   1f454:	00020489 	.word	0x00020489
   1f458:	0001ff91 	.word	0x0001ff91
   1f45c:	000204b1 	.word	0x000204b1
   1f460:	0001f8b1 	.word	0x0001f8b1
   1f464:	00020331 	.word	0x00020331
   1f468:	0001f7c1 	.word	0x0001f7c1
   1f46c:	0001ffa9 	.word	0x0001ffa9

0001f470 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
   1f470:	b580      	push	{r7, lr}
   1f472:	b08a      	sub	sp, #40	; 0x28
   1f474:	af00      	add	r7, sp, #0
   1f476:	6078      	str	r0, [r7, #4]
   1f478:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
   1f47a:	2300      	movs	r3, #0
   1f47c:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1f47e:	687b      	ldr	r3, [r7, #4]
   1f480:	61fb      	str	r3, [r7, #28]

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
   1f482:	2300      	movs	r3, #0
   1f484:	623b      	str	r3, [r7, #32]
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
   1f486:	69fb      	ldr	r3, [r7, #28]
   1f488:	2b00      	cmp	r3, #0
   1f48a:	d101      	bne.n	1f490 <xQueueSemaphoreTake+0x20>
   1f48c:	b672      	cpsid	i
   1f48e:	e7fe      	b.n	1f48e <xQueueSemaphoreTake+0x1e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
   1f490:	69fb      	ldr	r3, [r7, #28]
   1f492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1f494:	2b00      	cmp	r3, #0
   1f496:	d001      	beq.n	1f49c <xQueueSemaphoreTake+0x2c>
   1f498:	b672      	cpsid	i
   1f49a:	e7fe      	b.n	1f49a <xQueueSemaphoreTake+0x2a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   1f49c:	4b61      	ldr	r3, [pc, #388]	; (1f624 <xQueueSemaphoreTake+0x1b4>)
   1f49e:	4798      	blx	r3
   1f4a0:	1e03      	subs	r3, r0, #0
   1f4a2:	d102      	bne.n	1f4aa <xQueueSemaphoreTake+0x3a>
   1f4a4:	683b      	ldr	r3, [r7, #0]
   1f4a6:	2b00      	cmp	r3, #0
   1f4a8:	d101      	bne.n	1f4ae <xQueueSemaphoreTake+0x3e>
   1f4aa:	2301      	movs	r3, #1
   1f4ac:	e000      	b.n	1f4b0 <xQueueSemaphoreTake+0x40>
   1f4ae:	2300      	movs	r3, #0
   1f4b0:	2b00      	cmp	r3, #0
   1f4b2:	d101      	bne.n	1f4b8 <xQueueSemaphoreTake+0x48>
   1f4b4:	b672      	cpsid	i
   1f4b6:	e7fe      	b.n	1f4b6 <xQueueSemaphoreTake+0x46>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
   1f4b8:	4b5b      	ldr	r3, [pc, #364]	; (1f628 <xQueueSemaphoreTake+0x1b8>)
   1f4ba:	4798      	blx	r3
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
   1f4bc:	69fb      	ldr	r3, [r7, #28]
   1f4be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1f4c0:	61bb      	str	r3, [r7, #24]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
   1f4c2:	69bb      	ldr	r3, [r7, #24]
   1f4c4:	2b00      	cmp	r3, #0
   1f4c6:	d01d      	beq.n	1f504 <xQueueSemaphoreTake+0x94>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
   1f4c8:	69bb      	ldr	r3, [r7, #24]
   1f4ca:	1e5a      	subs	r2, r3, #1
   1f4cc:	69fb      	ldr	r3, [r7, #28]
   1f4ce:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   1f4d0:	69fb      	ldr	r3, [r7, #28]
   1f4d2:	681b      	ldr	r3, [r3, #0]
   1f4d4:	2b00      	cmp	r3, #0
   1f4d6:	d104      	bne.n	1f4e2 <xQueueSemaphoreTake+0x72>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
   1f4d8:	4b54      	ldr	r3, [pc, #336]	; (1f62c <xQueueSemaphoreTake+0x1bc>)
   1f4da:	4798      	blx	r3
   1f4dc:	0002      	movs	r2, r0
   1f4de:	69fb      	ldr	r3, [r7, #28]
   1f4e0:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   1f4e2:	69fb      	ldr	r3, [r7, #28]
   1f4e4:	691b      	ldr	r3, [r3, #16]
   1f4e6:	2b00      	cmp	r3, #0
   1f4e8:	d008      	beq.n	1f4fc <xQueueSemaphoreTake+0x8c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1f4ea:	69fb      	ldr	r3, [r7, #28]
   1f4ec:	3310      	adds	r3, #16
   1f4ee:	0018      	movs	r0, r3
   1f4f0:	4b4f      	ldr	r3, [pc, #316]	; (1f630 <xQueueSemaphoreTake+0x1c0>)
   1f4f2:	4798      	blx	r3
   1f4f4:	1e03      	subs	r3, r0, #0
   1f4f6:	d001      	beq.n	1f4fc <xQueueSemaphoreTake+0x8c>
					{
						queueYIELD_IF_USING_PREEMPTION();
   1f4f8:	4b4e      	ldr	r3, [pc, #312]	; (1f634 <xQueueSemaphoreTake+0x1c4>)
   1f4fa:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
   1f4fc:	4b4e      	ldr	r3, [pc, #312]	; (1f638 <xQueueSemaphoreTake+0x1c8>)
   1f4fe:	4798      	blx	r3
				return pdPASS;
   1f500:	2301      	movs	r3, #1
   1f502:	e08b      	b.n	1f61c <xQueueSemaphoreTake+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
   1f504:	683b      	ldr	r3, [r7, #0]
   1f506:	2b00      	cmp	r3, #0
   1f508:	d108      	bne.n	1f51c <xQueueSemaphoreTake+0xac>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
   1f50a:	6a3b      	ldr	r3, [r7, #32]
   1f50c:	2b00      	cmp	r3, #0
   1f50e:	d001      	beq.n	1f514 <xQueueSemaphoreTake+0xa4>
   1f510:	b672      	cpsid	i
   1f512:	e7fe      	b.n	1f512 <xQueueSemaphoreTake+0xa2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
   1f514:	4b48      	ldr	r3, [pc, #288]	; (1f638 <xQueueSemaphoreTake+0x1c8>)
   1f516:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
   1f518:	2300      	movs	r3, #0
   1f51a:	e07f      	b.n	1f61c <xQueueSemaphoreTake+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
   1f51c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1f51e:	2b00      	cmp	r3, #0
   1f520:	d106      	bne.n	1f530 <xQueueSemaphoreTake+0xc0>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
   1f522:	230c      	movs	r3, #12
   1f524:	18fb      	adds	r3, r7, r3
   1f526:	0018      	movs	r0, r3
   1f528:	4b44      	ldr	r3, [pc, #272]	; (1f63c <xQueueSemaphoreTake+0x1cc>)
   1f52a:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
   1f52c:	2301      	movs	r3, #1
   1f52e:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
   1f530:	4b41      	ldr	r3, [pc, #260]	; (1f638 <xQueueSemaphoreTake+0x1c8>)
   1f532:	4798      	blx	r3

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
   1f534:	4b42      	ldr	r3, [pc, #264]	; (1f640 <xQueueSemaphoreTake+0x1d0>)
   1f536:	4798      	blx	r3
		prvLockQueue( pxQueue );
   1f538:	4b3b      	ldr	r3, [pc, #236]	; (1f628 <xQueueSemaphoreTake+0x1b8>)
   1f53a:	4798      	blx	r3
   1f53c:	69fb      	ldr	r3, [r7, #28]
   1f53e:	2244      	movs	r2, #68	; 0x44
   1f540:	5c9b      	ldrb	r3, [r3, r2]
   1f542:	b25b      	sxtb	r3, r3
   1f544:	3301      	adds	r3, #1
   1f546:	d103      	bne.n	1f550 <xQueueSemaphoreTake+0xe0>
   1f548:	69fb      	ldr	r3, [r7, #28]
   1f54a:	2244      	movs	r2, #68	; 0x44
   1f54c:	2100      	movs	r1, #0
   1f54e:	5499      	strb	r1, [r3, r2]
   1f550:	69fb      	ldr	r3, [r7, #28]
   1f552:	2245      	movs	r2, #69	; 0x45
   1f554:	5c9b      	ldrb	r3, [r3, r2]
   1f556:	b25b      	sxtb	r3, r3
   1f558:	3301      	adds	r3, #1
   1f55a:	d103      	bne.n	1f564 <xQueueSemaphoreTake+0xf4>
   1f55c:	69fb      	ldr	r3, [r7, #28]
   1f55e:	2245      	movs	r2, #69	; 0x45
   1f560:	2100      	movs	r1, #0
   1f562:	5499      	strb	r1, [r3, r2]
   1f564:	4b34      	ldr	r3, [pc, #208]	; (1f638 <xQueueSemaphoreTake+0x1c8>)
   1f566:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   1f568:	003a      	movs	r2, r7
   1f56a:	230c      	movs	r3, #12
   1f56c:	18fb      	adds	r3, r7, r3
   1f56e:	0011      	movs	r1, r2
   1f570:	0018      	movs	r0, r3
   1f572:	4b34      	ldr	r3, [pc, #208]	; (1f644 <xQueueSemaphoreTake+0x1d4>)
   1f574:	4798      	blx	r3
   1f576:	1e03      	subs	r3, r0, #0
   1f578:	d12e      	bne.n	1f5d8 <xQueueSemaphoreTake+0x168>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   1f57a:	69fb      	ldr	r3, [r7, #28]
   1f57c:	0018      	movs	r0, r3
   1f57e:	4b32      	ldr	r3, [pc, #200]	; (1f648 <xQueueSemaphoreTake+0x1d8>)
   1f580:	4798      	blx	r3
   1f582:	1e03      	subs	r3, r0, #0
   1f584:	d021      	beq.n	1f5ca <xQueueSemaphoreTake+0x15a>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   1f586:	69fb      	ldr	r3, [r7, #28]
   1f588:	681b      	ldr	r3, [r3, #0]
   1f58a:	2b00      	cmp	r3, #0
   1f58c:	d10a      	bne.n	1f5a4 <xQueueSemaphoreTake+0x134>
					{
						taskENTER_CRITICAL();
   1f58e:	4b26      	ldr	r3, [pc, #152]	; (1f628 <xQueueSemaphoreTake+0x1b8>)
   1f590:	4798      	blx	r3
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
   1f592:	69fb      	ldr	r3, [r7, #28]
   1f594:	685b      	ldr	r3, [r3, #4]
   1f596:	0018      	movs	r0, r3
   1f598:	4b2c      	ldr	r3, [pc, #176]	; (1f64c <xQueueSemaphoreTake+0x1dc>)
   1f59a:	4798      	blx	r3
   1f59c:	0003      	movs	r3, r0
   1f59e:	623b      	str	r3, [r7, #32]
						}
						taskEXIT_CRITICAL();
   1f5a0:	4b25      	ldr	r3, [pc, #148]	; (1f638 <xQueueSemaphoreTake+0x1c8>)
   1f5a2:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   1f5a4:	69fb      	ldr	r3, [r7, #28]
   1f5a6:	3324      	adds	r3, #36	; 0x24
   1f5a8:	683a      	ldr	r2, [r7, #0]
   1f5aa:	0011      	movs	r1, r2
   1f5ac:	0018      	movs	r0, r3
   1f5ae:	4b28      	ldr	r3, [pc, #160]	; (1f650 <xQueueSemaphoreTake+0x1e0>)
   1f5b0:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
   1f5b2:	69fb      	ldr	r3, [r7, #28]
   1f5b4:	0018      	movs	r0, r3
   1f5b6:	4b27      	ldr	r3, [pc, #156]	; (1f654 <xQueueSemaphoreTake+0x1e4>)
   1f5b8:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   1f5ba:	4b27      	ldr	r3, [pc, #156]	; (1f658 <xQueueSemaphoreTake+0x1e8>)
   1f5bc:	4798      	blx	r3
   1f5be:	1e03      	subs	r3, r0, #0
   1f5c0:	d000      	beq.n	1f5c4 <xQueueSemaphoreTake+0x154>
   1f5c2:	e779      	b.n	1f4b8 <xQueueSemaphoreTake+0x48>
				{
					portYIELD_WITHIN_API();
   1f5c4:	4b1b      	ldr	r3, [pc, #108]	; (1f634 <xQueueSemaphoreTake+0x1c4>)
   1f5c6:	4798      	blx	r3
   1f5c8:	e776      	b.n	1f4b8 <xQueueSemaphoreTake+0x48>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
   1f5ca:	69fb      	ldr	r3, [r7, #28]
   1f5cc:	0018      	movs	r0, r3
   1f5ce:	4b21      	ldr	r3, [pc, #132]	; (1f654 <xQueueSemaphoreTake+0x1e4>)
   1f5d0:	4798      	blx	r3
				( void ) xTaskResumeAll();
   1f5d2:	4b21      	ldr	r3, [pc, #132]	; (1f658 <xQueueSemaphoreTake+0x1e8>)
   1f5d4:	4798      	blx	r3
   1f5d6:	e76f      	b.n	1f4b8 <xQueueSemaphoreTake+0x48>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
   1f5d8:	69fb      	ldr	r3, [r7, #28]
   1f5da:	0018      	movs	r0, r3
   1f5dc:	4b1d      	ldr	r3, [pc, #116]	; (1f654 <xQueueSemaphoreTake+0x1e4>)
   1f5de:	4798      	blx	r3
			( void ) xTaskResumeAll();
   1f5e0:	4b1d      	ldr	r3, [pc, #116]	; (1f658 <xQueueSemaphoreTake+0x1e8>)
   1f5e2:	4798      	blx	r3

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   1f5e4:	69fb      	ldr	r3, [r7, #28]
   1f5e6:	0018      	movs	r0, r3
   1f5e8:	4b17      	ldr	r3, [pc, #92]	; (1f648 <xQueueSemaphoreTake+0x1d8>)
   1f5ea:	4798      	blx	r3
   1f5ec:	1e03      	subs	r3, r0, #0
   1f5ee:	d100      	bne.n	1f5f2 <xQueueSemaphoreTake+0x182>
   1f5f0:	e762      	b.n	1f4b8 <xQueueSemaphoreTake+0x48>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
   1f5f2:	6a3b      	ldr	r3, [r7, #32]
   1f5f4:	2b00      	cmp	r3, #0
   1f5f6:	d010      	beq.n	1f61a <xQueueSemaphoreTake+0x1aa>
					{
						taskENTER_CRITICAL();
   1f5f8:	4b0b      	ldr	r3, [pc, #44]	; (1f628 <xQueueSemaphoreTake+0x1b8>)
   1f5fa:	4798      	blx	r3
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
   1f5fc:	69fb      	ldr	r3, [r7, #28]
   1f5fe:	0018      	movs	r0, r3
   1f600:	4b16      	ldr	r3, [pc, #88]	; (1f65c <xQueueSemaphoreTake+0x1ec>)
   1f602:	4798      	blx	r3
   1f604:	0003      	movs	r3, r0
   1f606:	617b      	str	r3, [r7, #20]
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
   1f608:	69fb      	ldr	r3, [r7, #28]
   1f60a:	685b      	ldr	r3, [r3, #4]
   1f60c:	697a      	ldr	r2, [r7, #20]
   1f60e:	0011      	movs	r1, r2
   1f610:	0018      	movs	r0, r3
   1f612:	4b13      	ldr	r3, [pc, #76]	; (1f660 <xQueueSemaphoreTake+0x1f0>)
   1f614:	4798      	blx	r3
						}
						taskEXIT_CRITICAL();
   1f616:	4b08      	ldr	r3, [pc, #32]	; (1f638 <xQueueSemaphoreTake+0x1c8>)
   1f618:	4798      	blx	r3
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
   1f61a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
   1f61c:	0018      	movs	r0, r3
   1f61e:	46bd      	mov	sp, r7
   1f620:	b00a      	add	sp, #40	; 0x28
   1f622:	bd80      	pop	{r7, pc}
   1f624:	00020701 	.word	0x00020701
   1f628:	0001eb61 	.word	0x0001eb61
   1f62c:	000209cd 	.word	0x000209cd
   1f630:	000203c9 	.word	0x000203c9
   1f634:	0001eb41 	.word	0x0001eb41
   1f638:	0001eb85 	.word	0x0001eb85
   1f63c:	00020489 	.word	0x00020489
   1f640:	0001ff91 	.word	0x0001ff91
   1f644:	000204b1 	.word	0x000204b1
   1f648:	0001f8b1 	.word	0x0001f8b1
   1f64c:	00020739 	.word	0x00020739
   1f650:	00020331 	.word	0x00020331
   1f654:	0001f7c1 	.word	0x0001f7c1
   1f658:	0001ffa9 	.word	0x0001ffa9
   1f65c:	0001f665 	.word	0x0001f665
   1f660:	000208dd 	.word	0x000208dd

0001f664 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
   1f664:	b580      	push	{r7, lr}
   1f666:	b084      	sub	sp, #16
   1f668:	af00      	add	r7, sp, #0
   1f66a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
   1f66c:	687b      	ldr	r3, [r7, #4]
   1f66e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1f670:	2b00      	cmp	r3, #0
   1f672:	d006      	beq.n	1f682 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
   1f674:	687b      	ldr	r3, [r7, #4]
   1f676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1f678:	681b      	ldr	r3, [r3, #0]
   1f67a:	2205      	movs	r2, #5
   1f67c:	1ad3      	subs	r3, r2, r3
   1f67e:	60fb      	str	r3, [r7, #12]
   1f680:	e001      	b.n	1f686 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
   1f682:	2300      	movs	r3, #0
   1f684:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
   1f686:	68fb      	ldr	r3, [r7, #12]
	}
   1f688:	0018      	movs	r0, r3
   1f68a:	46bd      	mov	sp, r7
   1f68c:	b004      	add	sp, #16
   1f68e:	bd80      	pop	{r7, pc}

0001f690 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
   1f690:	b580      	push	{r7, lr}
   1f692:	b086      	sub	sp, #24
   1f694:	af00      	add	r7, sp, #0
   1f696:	60f8      	str	r0, [r7, #12]
   1f698:	60b9      	str	r1, [r7, #8]
   1f69a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
   1f69c:	2300      	movs	r3, #0
   1f69e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
   1f6a0:	68fb      	ldr	r3, [r7, #12]
   1f6a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1f6a4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
   1f6a6:	68fb      	ldr	r3, [r7, #12]
   1f6a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1f6aa:	2b00      	cmp	r3, #0
   1f6ac:	d10e      	bne.n	1f6cc <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   1f6ae:	68fb      	ldr	r3, [r7, #12]
   1f6b0:	681b      	ldr	r3, [r3, #0]
   1f6b2:	2b00      	cmp	r3, #0
   1f6b4:	d14e      	bne.n	1f754 <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
   1f6b6:	68fb      	ldr	r3, [r7, #12]
   1f6b8:	685b      	ldr	r3, [r3, #4]
   1f6ba:	0018      	movs	r0, r3
   1f6bc:	4b2a      	ldr	r3, [pc, #168]	; (1f768 <prvCopyDataToQueue+0xd8>)
   1f6be:	4798      	blx	r3
   1f6c0:	0003      	movs	r3, r0
   1f6c2:	617b      	str	r3, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
   1f6c4:	68fb      	ldr	r3, [r7, #12]
   1f6c6:	2200      	movs	r2, #0
   1f6c8:	605a      	str	r2, [r3, #4]
   1f6ca:	e043      	b.n	1f754 <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
   1f6cc:	687b      	ldr	r3, [r7, #4]
   1f6ce:	2b00      	cmp	r3, #0
   1f6d0:	d119      	bne.n	1f706 <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
   1f6d2:	68fb      	ldr	r3, [r7, #12]
   1f6d4:	6898      	ldr	r0, [r3, #8]
   1f6d6:	68fb      	ldr	r3, [r7, #12]
   1f6d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   1f6da:	68bb      	ldr	r3, [r7, #8]
   1f6dc:	0019      	movs	r1, r3
   1f6de:	4b23      	ldr	r3, [pc, #140]	; (1f76c <prvCopyDataToQueue+0xdc>)
   1f6e0:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
   1f6e2:	68fb      	ldr	r3, [r7, #12]
   1f6e4:	689a      	ldr	r2, [r3, #8]
   1f6e6:	68fb      	ldr	r3, [r7, #12]
   1f6e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1f6ea:	18d2      	adds	r2, r2, r3
   1f6ec:	68fb      	ldr	r3, [r7, #12]
   1f6ee:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   1f6f0:	68fb      	ldr	r3, [r7, #12]
   1f6f2:	689a      	ldr	r2, [r3, #8]
   1f6f4:	68fb      	ldr	r3, [r7, #12]
   1f6f6:	685b      	ldr	r3, [r3, #4]
   1f6f8:	429a      	cmp	r2, r3
   1f6fa:	d32b      	bcc.n	1f754 <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
   1f6fc:	68fb      	ldr	r3, [r7, #12]
   1f6fe:	681a      	ldr	r2, [r3, #0]
   1f700:	68fb      	ldr	r3, [r7, #12]
   1f702:	609a      	str	r2, [r3, #8]
   1f704:	e026      	b.n	1f754 <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1f706:	68fb      	ldr	r3, [r7, #12]
   1f708:	68d8      	ldr	r0, [r3, #12]
   1f70a:	68fb      	ldr	r3, [r7, #12]
   1f70c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   1f70e:	68bb      	ldr	r3, [r7, #8]
   1f710:	0019      	movs	r1, r3
   1f712:	4b16      	ldr	r3, [pc, #88]	; (1f76c <prvCopyDataToQueue+0xdc>)
   1f714:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
   1f716:	68fb      	ldr	r3, [r7, #12]
   1f718:	68da      	ldr	r2, [r3, #12]
   1f71a:	68fb      	ldr	r3, [r7, #12]
   1f71c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1f71e:	425b      	negs	r3, r3
   1f720:	18d2      	adds	r2, r2, r3
   1f722:	68fb      	ldr	r3, [r7, #12]
   1f724:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   1f726:	68fb      	ldr	r3, [r7, #12]
   1f728:	68da      	ldr	r2, [r3, #12]
   1f72a:	68fb      	ldr	r3, [r7, #12]
   1f72c:	681b      	ldr	r3, [r3, #0]
   1f72e:	429a      	cmp	r2, r3
   1f730:	d207      	bcs.n	1f742 <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
   1f732:	68fb      	ldr	r3, [r7, #12]
   1f734:	685a      	ldr	r2, [r3, #4]
   1f736:	68fb      	ldr	r3, [r7, #12]
   1f738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1f73a:	425b      	negs	r3, r3
   1f73c:	18d2      	adds	r2, r2, r3
   1f73e:	68fb      	ldr	r3, [r7, #12]
   1f740:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
   1f742:	687b      	ldr	r3, [r7, #4]
   1f744:	2b02      	cmp	r3, #2
   1f746:	d105      	bne.n	1f754 <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
   1f748:	693b      	ldr	r3, [r7, #16]
   1f74a:	2b00      	cmp	r3, #0
   1f74c:	d002      	beq.n	1f754 <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
   1f74e:	693b      	ldr	r3, [r7, #16]
   1f750:	3b01      	subs	r3, #1
   1f752:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
   1f754:	693b      	ldr	r3, [r7, #16]
   1f756:	1c5a      	adds	r2, r3, #1
   1f758:	68fb      	ldr	r3, [r7, #12]
   1f75a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
   1f75c:	697b      	ldr	r3, [r7, #20]
}
   1f75e:	0018      	movs	r0, r3
   1f760:	46bd      	mov	sp, r7
   1f762:	b006      	add	sp, #24
   1f764:	bd80      	pop	{r7, pc}
   1f766:	46c0      	nop			; (mov r8, r8)
   1f768:	0002081d 	.word	0x0002081d
   1f76c:	000289ad 	.word	0x000289ad

0001f770 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
   1f770:	b580      	push	{r7, lr}
   1f772:	b082      	sub	sp, #8
   1f774:	af00      	add	r7, sp, #0
   1f776:	6078      	str	r0, [r7, #4]
   1f778:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
   1f77a:	687b      	ldr	r3, [r7, #4]
   1f77c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1f77e:	2b00      	cmp	r3, #0
   1f780:	d018      	beq.n	1f7b4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
   1f782:	687b      	ldr	r3, [r7, #4]
   1f784:	68da      	ldr	r2, [r3, #12]
   1f786:	687b      	ldr	r3, [r7, #4]
   1f788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1f78a:	18d2      	adds	r2, r2, r3
   1f78c:	687b      	ldr	r3, [r7, #4]
   1f78e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
   1f790:	687b      	ldr	r3, [r7, #4]
   1f792:	68da      	ldr	r2, [r3, #12]
   1f794:	687b      	ldr	r3, [r7, #4]
   1f796:	685b      	ldr	r3, [r3, #4]
   1f798:	429a      	cmp	r2, r3
   1f79a:	d303      	bcc.n	1f7a4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
   1f79c:	687b      	ldr	r3, [r7, #4]
   1f79e:	681a      	ldr	r2, [r3, #0]
   1f7a0:	687b      	ldr	r3, [r7, #4]
   1f7a2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
   1f7a4:	687b      	ldr	r3, [r7, #4]
   1f7a6:	68d9      	ldr	r1, [r3, #12]
   1f7a8:	687b      	ldr	r3, [r7, #4]
   1f7aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   1f7ac:	683b      	ldr	r3, [r7, #0]
   1f7ae:	0018      	movs	r0, r3
   1f7b0:	4b02      	ldr	r3, [pc, #8]	; (1f7bc <prvCopyDataFromQueue+0x4c>)
   1f7b2:	4798      	blx	r3
	}
}
   1f7b4:	46c0      	nop			; (mov r8, r8)
   1f7b6:	46bd      	mov	sp, r7
   1f7b8:	b002      	add	sp, #8
   1f7ba:	bd80      	pop	{r7, pc}
   1f7bc:	000289ad 	.word	0x000289ad

0001f7c0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
   1f7c0:	b580      	push	{r7, lr}
   1f7c2:	b084      	sub	sp, #16
   1f7c4:	af00      	add	r7, sp, #0
   1f7c6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
   1f7c8:	4b34      	ldr	r3, [pc, #208]	; (1f89c <prvUnlockQueue+0xdc>)
   1f7ca:	4798      	blx	r3
	{
		int8_t cTxLock = pxQueue->cTxLock;
   1f7cc:	230f      	movs	r3, #15
   1f7ce:	18fb      	adds	r3, r7, r3
   1f7d0:	687a      	ldr	r2, [r7, #4]
   1f7d2:	2145      	movs	r1, #69	; 0x45
   1f7d4:	5c52      	ldrb	r2, [r2, r1]
   1f7d6:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
   1f7d8:	e022      	b.n	1f820 <prvUnlockQueue+0x60>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			#if ( configUSE_QUEUE_SETS == 1 )
			{
				if( pxQueue->pxQueueSetContainer != NULL )
   1f7da:	687b      	ldr	r3, [r7, #4]
   1f7dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1f7de:	2b00      	cmp	r3, #0
   1f7e0:	d009      	beq.n	1f7f6 <prvUnlockQueue+0x36>
				{
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
   1f7e2:	687b      	ldr	r3, [r7, #4]
   1f7e4:	2100      	movs	r1, #0
   1f7e6:	0018      	movs	r0, r3
   1f7e8:	4b2d      	ldr	r3, [pc, #180]	; (1f8a0 <prvUnlockQueue+0xe0>)
   1f7ea:	4798      	blx	r3
   1f7ec:	1e03      	subs	r3, r0, #0
   1f7ee:	d00f      	beq.n	1f810 <prvUnlockQueue+0x50>
					{
						/* The queue is a member of a queue set, and posting to
						the queue set caused a higher priority task to unblock.
						A context switch is required. */
						vTaskMissedYield();
   1f7f0:	4b2c      	ldr	r3, [pc, #176]	; (1f8a4 <prvUnlockQueue+0xe4>)
   1f7f2:	4798      	blx	r3
   1f7f4:	e00c      	b.n	1f810 <prvUnlockQueue+0x50>
				else
				{
					/* Tasks that are removed from the event list will get
					added to the pending ready list as the scheduler is still
					suspended. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   1f7f6:	687b      	ldr	r3, [r7, #4]
   1f7f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1f7fa:	2b00      	cmp	r3, #0
   1f7fc:	d017      	beq.n	1f82e <prvUnlockQueue+0x6e>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1f7fe:	687b      	ldr	r3, [r7, #4]
   1f800:	3324      	adds	r3, #36	; 0x24
   1f802:	0018      	movs	r0, r3
   1f804:	4b28      	ldr	r3, [pc, #160]	; (1f8a8 <prvUnlockQueue+0xe8>)
   1f806:	4798      	blx	r3
   1f808:	1e03      	subs	r3, r0, #0
   1f80a:	d001      	beq.n	1f810 <prvUnlockQueue+0x50>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							vTaskMissedYield();
   1f80c:	4b25      	ldr	r3, [pc, #148]	; (1f8a4 <prvUnlockQueue+0xe4>)
   1f80e:	4798      	blx	r3
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
   1f810:	230f      	movs	r3, #15
   1f812:	18fb      	adds	r3, r7, r3
   1f814:	781b      	ldrb	r3, [r3, #0]
   1f816:	3b01      	subs	r3, #1
   1f818:	b2da      	uxtb	r2, r3
   1f81a:	230f      	movs	r3, #15
   1f81c:	18fb      	adds	r3, r7, r3
   1f81e:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
   1f820:	230f      	movs	r3, #15
   1f822:	18fb      	adds	r3, r7, r3
   1f824:	781b      	ldrb	r3, [r3, #0]
   1f826:	b25b      	sxtb	r3, r3
   1f828:	2b00      	cmp	r3, #0
   1f82a:	dcd6      	bgt.n	1f7da <prvUnlockQueue+0x1a>
   1f82c:	e000      	b.n	1f830 <prvUnlockQueue+0x70>
						break;
   1f82e:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
   1f830:	687b      	ldr	r3, [r7, #4]
   1f832:	2245      	movs	r2, #69	; 0x45
   1f834:	21ff      	movs	r1, #255	; 0xff
   1f836:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
   1f838:	4b1c      	ldr	r3, [pc, #112]	; (1f8ac <prvUnlockQueue+0xec>)
   1f83a:	4798      	blx	r3

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
   1f83c:	4b17      	ldr	r3, [pc, #92]	; (1f89c <prvUnlockQueue+0xdc>)
   1f83e:	4798      	blx	r3
	{
		int8_t cRxLock = pxQueue->cRxLock;
   1f840:	230e      	movs	r3, #14
   1f842:	18fb      	adds	r3, r7, r3
   1f844:	687a      	ldr	r2, [r7, #4]
   1f846:	2144      	movs	r1, #68	; 0x44
   1f848:	5c52      	ldrb	r2, [r2, r1]
   1f84a:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
   1f84c:	e014      	b.n	1f878 <prvUnlockQueue+0xb8>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   1f84e:	687b      	ldr	r3, [r7, #4]
   1f850:	691b      	ldr	r3, [r3, #16]
   1f852:	2b00      	cmp	r3, #0
   1f854:	d017      	beq.n	1f886 <prvUnlockQueue+0xc6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1f856:	687b      	ldr	r3, [r7, #4]
   1f858:	3310      	adds	r3, #16
   1f85a:	0018      	movs	r0, r3
   1f85c:	4b12      	ldr	r3, [pc, #72]	; (1f8a8 <prvUnlockQueue+0xe8>)
   1f85e:	4798      	blx	r3
   1f860:	1e03      	subs	r3, r0, #0
   1f862:	d001      	beq.n	1f868 <prvUnlockQueue+0xa8>
				{
					vTaskMissedYield();
   1f864:	4b0f      	ldr	r3, [pc, #60]	; (1f8a4 <prvUnlockQueue+0xe4>)
   1f866:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
   1f868:	230e      	movs	r3, #14
   1f86a:	18fb      	adds	r3, r7, r3
   1f86c:	781b      	ldrb	r3, [r3, #0]
   1f86e:	3b01      	subs	r3, #1
   1f870:	b2da      	uxtb	r2, r3
   1f872:	230e      	movs	r3, #14
   1f874:	18fb      	adds	r3, r7, r3
   1f876:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
   1f878:	230e      	movs	r3, #14
   1f87a:	18fb      	adds	r3, r7, r3
   1f87c:	781b      	ldrb	r3, [r3, #0]
   1f87e:	b25b      	sxtb	r3, r3
   1f880:	2b00      	cmp	r3, #0
   1f882:	dce4      	bgt.n	1f84e <prvUnlockQueue+0x8e>
   1f884:	e000      	b.n	1f888 <prvUnlockQueue+0xc8>
			}
			else
			{
				break;
   1f886:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
   1f888:	687b      	ldr	r3, [r7, #4]
   1f88a:	2244      	movs	r2, #68	; 0x44
   1f88c:	21ff      	movs	r1, #255	; 0xff
   1f88e:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
   1f890:	4b06      	ldr	r3, [pc, #24]	; (1f8ac <prvUnlockQueue+0xec>)
   1f892:	4798      	blx	r3
}
   1f894:	46c0      	nop			; (mov r8, r8)
   1f896:	46bd      	mov	sp, r7
   1f898:	b004      	add	sp, #16
   1f89a:	bd80      	pop	{r7, pc}
   1f89c:	0001eb61 	.word	0x0001eb61
   1f8a0:	0001f995 	.word	0x0001f995
   1f8a4:	0002055d 	.word	0x0002055d
   1f8a8:	000203c9 	.word	0x000203c9
   1f8ac:	0001eb85 	.word	0x0001eb85

0001f8b0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
   1f8b0:	b580      	push	{r7, lr}
   1f8b2:	b084      	sub	sp, #16
   1f8b4:	af00      	add	r7, sp, #0
   1f8b6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
   1f8b8:	4b08      	ldr	r3, [pc, #32]	; (1f8dc <prvIsQueueEmpty+0x2c>)
   1f8ba:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
   1f8bc:	687b      	ldr	r3, [r7, #4]
   1f8be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1f8c0:	2b00      	cmp	r3, #0
   1f8c2:	d102      	bne.n	1f8ca <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
   1f8c4:	2301      	movs	r3, #1
   1f8c6:	60fb      	str	r3, [r7, #12]
   1f8c8:	e001      	b.n	1f8ce <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
   1f8ca:	2300      	movs	r3, #0
   1f8cc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
   1f8ce:	4b04      	ldr	r3, [pc, #16]	; (1f8e0 <prvIsQueueEmpty+0x30>)
   1f8d0:	4798      	blx	r3

	return xReturn;
   1f8d2:	68fb      	ldr	r3, [r7, #12]
}
   1f8d4:	0018      	movs	r0, r3
   1f8d6:	46bd      	mov	sp, r7
   1f8d8:	b004      	add	sp, #16
   1f8da:	bd80      	pop	{r7, pc}
   1f8dc:	0001eb61 	.word	0x0001eb61
   1f8e0:	0001eb85 	.word	0x0001eb85

0001f8e4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
   1f8e4:	b580      	push	{r7, lr}
   1f8e6:	b084      	sub	sp, #16
   1f8e8:	af00      	add	r7, sp, #0
   1f8ea:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
   1f8ec:	4b09      	ldr	r3, [pc, #36]	; (1f914 <prvIsQueueFull+0x30>)
   1f8ee:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
   1f8f0:	687b      	ldr	r3, [r7, #4]
   1f8f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1f8f4:	687b      	ldr	r3, [r7, #4]
   1f8f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1f8f8:	429a      	cmp	r2, r3
   1f8fa:	d102      	bne.n	1f902 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
   1f8fc:	2301      	movs	r3, #1
   1f8fe:	60fb      	str	r3, [r7, #12]
   1f900:	e001      	b.n	1f906 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
   1f902:	2300      	movs	r3, #0
   1f904:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
   1f906:	4b04      	ldr	r3, [pc, #16]	; (1f918 <prvIsQueueFull+0x34>)
   1f908:	4798      	blx	r3

	return xReturn;
   1f90a:	68fb      	ldr	r3, [r7, #12]
}
   1f90c:	0018      	movs	r0, r3
   1f90e:	46bd      	mov	sp, r7
   1f910:	b004      	add	sp, #16
   1f912:	bd80      	pop	{r7, pc}
   1f914:	0001eb61 	.word	0x0001eb61
   1f918:	0001eb85 	.word	0x0001eb85

0001f91c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
   1f91c:	b580      	push	{r7, lr}
   1f91e:	b086      	sub	sp, #24
   1f920:	af00      	add	r7, sp, #0
   1f922:	60f8      	str	r0, [r7, #12]
   1f924:	60b9      	str	r1, [r7, #8]
   1f926:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1f928:	68fb      	ldr	r3, [r7, #12]
   1f92a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
   1f92c:	4b15      	ldr	r3, [pc, #84]	; (1f984 <vQueueWaitForMessageRestricted+0x68>)
   1f92e:	4798      	blx	r3
   1f930:	697b      	ldr	r3, [r7, #20]
   1f932:	2244      	movs	r2, #68	; 0x44
   1f934:	5c9b      	ldrb	r3, [r3, r2]
   1f936:	b25b      	sxtb	r3, r3
   1f938:	3301      	adds	r3, #1
   1f93a:	d103      	bne.n	1f944 <vQueueWaitForMessageRestricted+0x28>
   1f93c:	697b      	ldr	r3, [r7, #20]
   1f93e:	2244      	movs	r2, #68	; 0x44
   1f940:	2100      	movs	r1, #0
   1f942:	5499      	strb	r1, [r3, r2]
   1f944:	697b      	ldr	r3, [r7, #20]
   1f946:	2245      	movs	r2, #69	; 0x45
   1f948:	5c9b      	ldrb	r3, [r3, r2]
   1f94a:	b25b      	sxtb	r3, r3
   1f94c:	3301      	adds	r3, #1
   1f94e:	d103      	bne.n	1f958 <vQueueWaitForMessageRestricted+0x3c>
   1f950:	697b      	ldr	r3, [r7, #20]
   1f952:	2245      	movs	r2, #69	; 0x45
   1f954:	2100      	movs	r1, #0
   1f956:	5499      	strb	r1, [r3, r2]
   1f958:	4b0b      	ldr	r3, [pc, #44]	; (1f988 <vQueueWaitForMessageRestricted+0x6c>)
   1f95a:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
   1f95c:	697b      	ldr	r3, [r7, #20]
   1f95e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1f960:	2b00      	cmp	r3, #0
   1f962:	d106      	bne.n	1f972 <vQueueWaitForMessageRestricted+0x56>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
   1f964:	697b      	ldr	r3, [r7, #20]
   1f966:	3324      	adds	r3, #36	; 0x24
   1f968:	687a      	ldr	r2, [r7, #4]
   1f96a:	68b9      	ldr	r1, [r7, #8]
   1f96c:	0018      	movs	r0, r3
   1f96e:	4b07      	ldr	r3, [pc, #28]	; (1f98c <vQueueWaitForMessageRestricted+0x70>)
   1f970:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
   1f972:	697b      	ldr	r3, [r7, #20]
   1f974:	0018      	movs	r0, r3
   1f976:	4b06      	ldr	r3, [pc, #24]	; (1f990 <vQueueWaitForMessageRestricted+0x74>)
   1f978:	4798      	blx	r3
	}
   1f97a:	46c0      	nop			; (mov r8, r8)
   1f97c:	46bd      	mov	sp, r7
   1f97e:	b006      	add	sp, #24
   1f980:	bd80      	pop	{r7, pc}
   1f982:	46c0      	nop			; (mov r8, r8)
   1f984:	0001eb61 	.word	0x0001eb61
   1f988:	0001eb85 	.word	0x0001eb85
   1f98c:	00020375 	.word	0x00020375
   1f990:	0001f7c1 	.word	0x0001f7c1

0001f994 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
   1f994:	b580      	push	{r7, lr}
   1f996:	b086      	sub	sp, #24
   1f998:	af00      	add	r7, sp, #0
   1f99a:	6078      	str	r0, [r7, #4]
   1f99c:	6039      	str	r1, [r7, #0]
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
   1f99e:	687b      	ldr	r3, [r7, #4]
   1f9a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1f9a2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
   1f9a4:	2300      	movs	r3, #0
   1f9a6:	617b      	str	r3, [r7, #20]

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
   1f9a8:	693b      	ldr	r3, [r7, #16]
   1f9aa:	2b00      	cmp	r3, #0
   1f9ac:	d101      	bne.n	1f9b2 <prvNotifyQueueSetContainer+0x1e>
   1f9ae:	b672      	cpsid	i
   1f9b0:	e7fe      	b.n	1f9b0 <prvNotifyQueueSetContainer+0x1c>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
   1f9b2:	693b      	ldr	r3, [r7, #16]
   1f9b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1f9b6:	693b      	ldr	r3, [r7, #16]
   1f9b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1f9ba:	429a      	cmp	r2, r3
   1f9bc:	d301      	bcc.n	1f9c2 <prvNotifyQueueSetContainer+0x2e>
   1f9be:	b672      	cpsid	i
   1f9c0:	e7fe      	b.n	1f9c0 <prvNotifyQueueSetContainer+0x2c>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
   1f9c2:	693b      	ldr	r3, [r7, #16]
   1f9c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1f9c6:	693b      	ldr	r3, [r7, #16]
   1f9c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1f9ca:	429a      	cmp	r2, r3
   1f9cc:	d22a      	bcs.n	1fa24 <prvNotifyQueueSetContainer+0x90>
		{
			const int8_t cTxLock = pxQueueSetContainer->cTxLock;
   1f9ce:	230f      	movs	r3, #15
   1f9d0:	18fb      	adds	r3, r7, r3
   1f9d2:	693a      	ldr	r2, [r7, #16]
   1f9d4:	2145      	movs	r1, #69	; 0x45
   1f9d6:	5c52      	ldrb	r2, [r2, r1]
   1f9d8:	701a      	strb	r2, [r3, #0]

			traceQUEUE_SEND( pxQueueSetContainer );

			/* The data copied is the handle of the queue that contains data. */
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
   1f9da:	683a      	ldr	r2, [r7, #0]
   1f9dc:	1d39      	adds	r1, r7, #4
   1f9de:	693b      	ldr	r3, [r7, #16]
   1f9e0:	0018      	movs	r0, r3
   1f9e2:	4b13      	ldr	r3, [pc, #76]	; (1fa30 <prvNotifyQueueSetContainer+0x9c>)
   1f9e4:	4798      	blx	r3
   1f9e6:	0003      	movs	r3, r0
   1f9e8:	617b      	str	r3, [r7, #20]

			if( cTxLock == queueUNLOCKED )
   1f9ea:	230f      	movs	r3, #15
   1f9ec:	18fb      	adds	r3, r7, r3
   1f9ee:	781b      	ldrb	r3, [r3, #0]
   1f9f0:	b25b      	sxtb	r3, r3
   1f9f2:	3301      	adds	r3, #1
   1f9f4:	d10d      	bne.n	1fa12 <prvNotifyQueueSetContainer+0x7e>
			{
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
   1f9f6:	693b      	ldr	r3, [r7, #16]
   1f9f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1f9fa:	2b00      	cmp	r3, #0
   1f9fc:	d012      	beq.n	1fa24 <prvNotifyQueueSetContainer+0x90>
				{
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
   1f9fe:	693b      	ldr	r3, [r7, #16]
   1fa00:	3324      	adds	r3, #36	; 0x24
   1fa02:	0018      	movs	r0, r3
   1fa04:	4b0b      	ldr	r3, [pc, #44]	; (1fa34 <prvNotifyQueueSetContainer+0xa0>)
   1fa06:	4798      	blx	r3
   1fa08:	1e03      	subs	r3, r0, #0
   1fa0a:	d00b      	beq.n	1fa24 <prvNotifyQueueSetContainer+0x90>
					{
						/* The task waiting has a higher priority. */
						xReturn = pdTRUE;
   1fa0c:	2301      	movs	r3, #1
   1fa0e:	617b      	str	r3, [r7, #20]
   1fa10:	e008      	b.n	1fa24 <prvNotifyQueueSetContainer+0x90>
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else
			{
				pxQueueSetContainer->cTxLock = ( int8_t ) ( cTxLock + 1 );
   1fa12:	230f      	movs	r3, #15
   1fa14:	18fb      	adds	r3, r7, r3
   1fa16:	781b      	ldrb	r3, [r3, #0]
   1fa18:	3301      	adds	r3, #1
   1fa1a:	b2db      	uxtb	r3, r3
   1fa1c:	b259      	sxtb	r1, r3
   1fa1e:	693b      	ldr	r3, [r7, #16]
   1fa20:	2245      	movs	r2, #69	; 0x45
   1fa22:	5499      	strb	r1, [r3, r2]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
   1fa24:	697b      	ldr	r3, [r7, #20]
	}
   1fa26:	0018      	movs	r0, r3
   1fa28:	46bd      	mov	sp, r7
   1fa2a:	b006      	add	sp, #24
   1fa2c:	bd80      	pop	{r7, pc}
   1fa2e:	46c0      	nop			; (mov r8, r8)
   1fa30:	0001f691 	.word	0x0001f691
   1fa34:	000203c9 	.word	0x000203c9

0001fa38 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
   1fa38:	b590      	push	{r4, r7, lr}
   1fa3a:	b08d      	sub	sp, #52	; 0x34
   1fa3c:	af04      	add	r7, sp, #16
   1fa3e:	60f8      	str	r0, [r7, #12]
   1fa40:	60b9      	str	r1, [r7, #8]
   1fa42:	603b      	str	r3, [r7, #0]
   1fa44:	1dbb      	adds	r3, r7, #6
   1fa46:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1fa48:	1dbb      	adds	r3, r7, #6
   1fa4a:	881b      	ldrh	r3, [r3, #0]
   1fa4c:	009b      	lsls	r3, r3, #2
   1fa4e:	0018      	movs	r0, r3
   1fa50:	4b1d      	ldr	r3, [pc, #116]	; (1fac8 <xTaskCreate+0x90>)
   1fa52:	4798      	blx	r3
   1fa54:	0003      	movs	r3, r0
   1fa56:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
   1fa58:	697b      	ldr	r3, [r7, #20]
   1fa5a:	2b00      	cmp	r3, #0
   1fa5c:	d010      	beq.n	1fa80 <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
   1fa5e:	2050      	movs	r0, #80	; 0x50
   1fa60:	4b19      	ldr	r3, [pc, #100]	; (1fac8 <xTaskCreate+0x90>)
   1fa62:	4798      	blx	r3
   1fa64:	0003      	movs	r3, r0
   1fa66:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
   1fa68:	69fb      	ldr	r3, [r7, #28]
   1fa6a:	2b00      	cmp	r3, #0
   1fa6c:	d003      	beq.n	1fa76 <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
   1fa6e:	69fb      	ldr	r3, [r7, #28]
   1fa70:	697a      	ldr	r2, [r7, #20]
   1fa72:	631a      	str	r2, [r3, #48]	; 0x30
   1fa74:	e006      	b.n	1fa84 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
   1fa76:	697b      	ldr	r3, [r7, #20]
   1fa78:	0018      	movs	r0, r3
   1fa7a:	4b14      	ldr	r3, [pc, #80]	; (1facc <xTaskCreate+0x94>)
   1fa7c:	4798      	blx	r3
   1fa7e:	e001      	b.n	1fa84 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
   1fa80:	2300      	movs	r3, #0
   1fa82:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
   1fa84:	69fb      	ldr	r3, [r7, #28]
   1fa86:	2b00      	cmp	r3, #0
   1fa88:	d016      	beq.n	1fab8 <xTaskCreate+0x80>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
   1fa8a:	1dbb      	adds	r3, r7, #6
   1fa8c:	881a      	ldrh	r2, [r3, #0]
   1fa8e:	683c      	ldr	r4, [r7, #0]
   1fa90:	68b9      	ldr	r1, [r7, #8]
   1fa92:	68f8      	ldr	r0, [r7, #12]
   1fa94:	2300      	movs	r3, #0
   1fa96:	9303      	str	r3, [sp, #12]
   1fa98:	69fb      	ldr	r3, [r7, #28]
   1fa9a:	9302      	str	r3, [sp, #8]
   1fa9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1fa9e:	9301      	str	r3, [sp, #4]
   1faa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1faa2:	9300      	str	r3, [sp, #0]
   1faa4:	0023      	movs	r3, r4
   1faa6:	4c0a      	ldr	r4, [pc, #40]	; (1fad0 <xTaskCreate+0x98>)
   1faa8:	47a0      	blx	r4
			prvAddNewTaskToReadyList( pxNewTCB );
   1faaa:	69fb      	ldr	r3, [r7, #28]
   1faac:	0018      	movs	r0, r3
   1faae:	4b09      	ldr	r3, [pc, #36]	; (1fad4 <xTaskCreate+0x9c>)
   1fab0:	4798      	blx	r3
			xReturn = pdPASS;
   1fab2:	2301      	movs	r3, #1
   1fab4:	61bb      	str	r3, [r7, #24]
   1fab6:	e002      	b.n	1fabe <xTaskCreate+0x86>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
   1fab8:	2301      	movs	r3, #1
   1faba:	425b      	negs	r3, r3
   1fabc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
   1fabe:	69bb      	ldr	r3, [r7, #24]
	}
   1fac0:	0018      	movs	r0, r3
   1fac2:	46bd      	mov	sp, r7
   1fac4:	b009      	add	sp, #36	; 0x24
   1fac6:	bd90      	pop	{r4, r7, pc}
   1fac8:	0001ec9d 	.word	0x0001ec9d
   1facc:	0001ecd1 	.word	0x0001ecd1
   1fad0:	0001fad9 	.word	0x0001fad9
   1fad4:	0001fbd5 	.word	0x0001fbd5

0001fad8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
   1fad8:	b580      	push	{r7, lr}
   1fada:	b086      	sub	sp, #24
   1fadc:	af00      	add	r7, sp, #0
   1fade:	60f8      	str	r0, [r7, #12]
   1fae0:	60b9      	str	r1, [r7, #8]
   1fae2:	607a      	str	r2, [r7, #4]
   1fae4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
   1fae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1fae8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   1faea:	687b      	ldr	r3, [r7, #4]
   1faec:	4936      	ldr	r1, [pc, #216]	; (1fbc8 <prvInitialiseNewTask+0xf0>)
   1faee:	468c      	mov	ip, r1
   1faf0:	4463      	add	r3, ip
   1faf2:	009b      	lsls	r3, r3, #2
   1faf4:	18d3      	adds	r3, r2, r3
   1faf6:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
   1faf8:	693b      	ldr	r3, [r7, #16]
   1fafa:	2207      	movs	r2, #7
   1fafc:	4393      	bics	r3, r2
   1fafe:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
   1fb00:	693b      	ldr	r3, [r7, #16]
   1fb02:	2207      	movs	r2, #7
   1fb04:	4013      	ands	r3, r2
   1fb06:	d001      	beq.n	1fb0c <prvInitialiseNewTask+0x34>
   1fb08:	b672      	cpsid	i
   1fb0a:	e7fe      	b.n	1fb0a <prvInitialiseNewTask+0x32>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
   1fb0c:	2300      	movs	r3, #0
   1fb0e:	617b      	str	r3, [r7, #20]
   1fb10:	e013      	b.n	1fb3a <prvInitialiseNewTask+0x62>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
   1fb12:	68ba      	ldr	r2, [r7, #8]
   1fb14:	697b      	ldr	r3, [r7, #20]
   1fb16:	18d3      	adds	r3, r2, r3
   1fb18:	7818      	ldrb	r0, [r3, #0]
   1fb1a:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1fb1c:	2134      	movs	r1, #52	; 0x34
   1fb1e:	697b      	ldr	r3, [r7, #20]
   1fb20:	18d3      	adds	r3, r2, r3
   1fb22:	185b      	adds	r3, r3, r1
   1fb24:	1c02      	adds	r2, r0, #0
   1fb26:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
   1fb28:	68ba      	ldr	r2, [r7, #8]
   1fb2a:	697b      	ldr	r3, [r7, #20]
   1fb2c:	18d3      	adds	r3, r2, r3
   1fb2e:	781b      	ldrb	r3, [r3, #0]
   1fb30:	2b00      	cmp	r3, #0
   1fb32:	d006      	beq.n	1fb42 <prvInitialiseNewTask+0x6a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
   1fb34:	697b      	ldr	r3, [r7, #20]
   1fb36:	3301      	adds	r3, #1
   1fb38:	617b      	str	r3, [r7, #20]
   1fb3a:	697b      	ldr	r3, [r7, #20]
   1fb3c:	2b09      	cmp	r3, #9
   1fb3e:	d9e8      	bls.n	1fb12 <prvInitialiseNewTask+0x3a>
   1fb40:	e000      	b.n	1fb44 <prvInitialiseNewTask+0x6c>
		{
			break;
   1fb42:	46c0      	nop			; (mov r8, r8)
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
   1fb44:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1fb46:	223d      	movs	r2, #61	; 0x3d
   1fb48:	2100      	movs	r1, #0
   1fb4a:	5499      	strb	r1, [r3, r2]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
   1fb4c:	6a3b      	ldr	r3, [r7, #32]
   1fb4e:	2b04      	cmp	r3, #4
   1fb50:	d901      	bls.n	1fb56 <prvInitialiseNewTask+0x7e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
   1fb52:	2304      	movs	r3, #4
   1fb54:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
   1fb56:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1fb58:	6a3a      	ldr	r2, [r7, #32]
   1fb5a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
   1fb5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1fb5e:	6a3a      	ldr	r2, [r7, #32]
   1fb60:	641a      	str	r2, [r3, #64]	; 0x40
		pxNewTCB->uxMutexesHeld = 0;
   1fb62:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1fb64:	2200      	movs	r2, #0
   1fb66:	645a      	str	r2, [r3, #68]	; 0x44
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
   1fb68:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1fb6a:	3304      	adds	r3, #4
   1fb6c:	0018      	movs	r0, r3
   1fb6e:	4b17      	ldr	r3, [pc, #92]	; (1fbcc <prvInitialiseNewTask+0xf4>)
   1fb70:	4798      	blx	r3
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
   1fb72:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1fb74:	3318      	adds	r3, #24
   1fb76:	0018      	movs	r0, r3
   1fb78:	4b14      	ldr	r3, [pc, #80]	; (1fbcc <prvInitialiseNewTask+0xf4>)
   1fb7a:	4798      	blx	r3

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
   1fb7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1fb7e:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1fb80:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1fb82:	6a3b      	ldr	r3, [r7, #32]
   1fb84:	2205      	movs	r2, #5
   1fb86:	1ad2      	subs	r2, r2, r3
   1fb88:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1fb8a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
   1fb8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1fb8e:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1fb90:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
   1fb92:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1fb94:	2200      	movs	r2, #0
   1fb96:	649a      	str	r2, [r3, #72]	; 0x48
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
   1fb98:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1fb9a:	224c      	movs	r2, #76	; 0x4c
   1fb9c:	2100      	movs	r1, #0
   1fb9e:	5499      	strb	r1, [r3, r2]
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
   1fba0:	683a      	ldr	r2, [r7, #0]
   1fba2:	68f9      	ldr	r1, [r7, #12]
   1fba4:	693b      	ldr	r3, [r7, #16]
   1fba6:	0018      	movs	r0, r3
   1fba8:	4b09      	ldr	r3, [pc, #36]	; (1fbd0 <prvInitialiseNewTask+0xf8>)
   1fbaa:	4798      	blx	r3
   1fbac:	0002      	movs	r2, r0
   1fbae:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1fbb0:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
   1fbb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1fbb4:	2b00      	cmp	r3, #0
   1fbb6:	d002      	beq.n	1fbbe <prvInitialiseNewTask+0xe6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
   1fbb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1fbba:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1fbbc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
   1fbbe:	46c0      	nop			; (mov r8, r8)
   1fbc0:	46bd      	mov	sp, r7
   1fbc2:	b006      	add	sp, #24
   1fbc4:	bd80      	pop	{r7, pc}
   1fbc6:	46c0      	nop			; (mov r8, r8)
   1fbc8:	3fffffff 	.word	0x3fffffff
   1fbcc:	0001ed41 	.word	0x0001ed41
   1fbd0:	0001ea1d 	.word	0x0001ea1d

0001fbd4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
   1fbd4:	b580      	push	{r7, lr}
   1fbd6:	b082      	sub	sp, #8
   1fbd8:	af00      	add	r7, sp, #0
   1fbda:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
   1fbdc:	4b29      	ldr	r3, [pc, #164]	; (1fc84 <prvAddNewTaskToReadyList+0xb0>)
   1fbde:	4798      	blx	r3
	{
		uxCurrentNumberOfTasks++;
   1fbe0:	4b29      	ldr	r3, [pc, #164]	; (1fc88 <prvAddNewTaskToReadyList+0xb4>)
   1fbe2:	681b      	ldr	r3, [r3, #0]
   1fbe4:	1c5a      	adds	r2, r3, #1
   1fbe6:	4b28      	ldr	r3, [pc, #160]	; (1fc88 <prvAddNewTaskToReadyList+0xb4>)
   1fbe8:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
   1fbea:	4b28      	ldr	r3, [pc, #160]	; (1fc8c <prvAddNewTaskToReadyList+0xb8>)
   1fbec:	681b      	ldr	r3, [r3, #0]
   1fbee:	2b00      	cmp	r3, #0
   1fbf0:	d109      	bne.n	1fc06 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
   1fbf2:	4b26      	ldr	r3, [pc, #152]	; (1fc8c <prvAddNewTaskToReadyList+0xb8>)
   1fbf4:	687a      	ldr	r2, [r7, #4]
   1fbf6:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
   1fbf8:	4b23      	ldr	r3, [pc, #140]	; (1fc88 <prvAddNewTaskToReadyList+0xb4>)
   1fbfa:	681b      	ldr	r3, [r3, #0]
   1fbfc:	2b01      	cmp	r3, #1
   1fbfe:	d110      	bne.n	1fc22 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
   1fc00:	4b23      	ldr	r3, [pc, #140]	; (1fc90 <prvAddNewTaskToReadyList+0xbc>)
   1fc02:	4798      	blx	r3
   1fc04:	e00d      	b.n	1fc22 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
   1fc06:	4b23      	ldr	r3, [pc, #140]	; (1fc94 <prvAddNewTaskToReadyList+0xc0>)
   1fc08:	681b      	ldr	r3, [r3, #0]
   1fc0a:	2b00      	cmp	r3, #0
   1fc0c:	d109      	bne.n	1fc22 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
   1fc0e:	4b1f      	ldr	r3, [pc, #124]	; (1fc8c <prvAddNewTaskToReadyList+0xb8>)
   1fc10:	681b      	ldr	r3, [r3, #0]
   1fc12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1fc14:	687b      	ldr	r3, [r7, #4]
   1fc16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1fc18:	429a      	cmp	r2, r3
   1fc1a:	d802      	bhi.n	1fc22 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
   1fc1c:	4b1b      	ldr	r3, [pc, #108]	; (1fc8c <prvAddNewTaskToReadyList+0xb8>)
   1fc1e:	687a      	ldr	r2, [r7, #4]
   1fc20:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
   1fc22:	4b1d      	ldr	r3, [pc, #116]	; (1fc98 <prvAddNewTaskToReadyList+0xc4>)
   1fc24:	681b      	ldr	r3, [r3, #0]
   1fc26:	1c5a      	adds	r2, r3, #1
   1fc28:	4b1b      	ldr	r3, [pc, #108]	; (1fc98 <prvAddNewTaskToReadyList+0xc4>)
   1fc2a:	601a      	str	r2, [r3, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
   1fc2c:	687b      	ldr	r3, [r7, #4]
   1fc2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1fc30:	4b1a      	ldr	r3, [pc, #104]	; (1fc9c <prvAddNewTaskToReadyList+0xc8>)
   1fc32:	681b      	ldr	r3, [r3, #0]
   1fc34:	429a      	cmp	r2, r3
   1fc36:	d903      	bls.n	1fc40 <prvAddNewTaskToReadyList+0x6c>
   1fc38:	687b      	ldr	r3, [r7, #4]
   1fc3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1fc3c:	4b17      	ldr	r3, [pc, #92]	; (1fc9c <prvAddNewTaskToReadyList+0xc8>)
   1fc3e:	601a      	str	r2, [r3, #0]
   1fc40:	687b      	ldr	r3, [r7, #4]
   1fc42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1fc44:	0013      	movs	r3, r2
   1fc46:	009b      	lsls	r3, r3, #2
   1fc48:	189b      	adds	r3, r3, r2
   1fc4a:	009b      	lsls	r3, r3, #2
   1fc4c:	4a14      	ldr	r2, [pc, #80]	; (1fca0 <prvAddNewTaskToReadyList+0xcc>)
   1fc4e:	189a      	adds	r2, r3, r2
   1fc50:	687b      	ldr	r3, [r7, #4]
   1fc52:	3304      	adds	r3, #4
   1fc54:	0019      	movs	r1, r3
   1fc56:	0010      	movs	r0, r2
   1fc58:	4b12      	ldr	r3, [pc, #72]	; (1fca4 <prvAddNewTaskToReadyList+0xd0>)
   1fc5a:	4798      	blx	r3

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
   1fc5c:	4b12      	ldr	r3, [pc, #72]	; (1fca8 <prvAddNewTaskToReadyList+0xd4>)
   1fc5e:	4798      	blx	r3

	if( xSchedulerRunning != pdFALSE )
   1fc60:	4b0c      	ldr	r3, [pc, #48]	; (1fc94 <prvAddNewTaskToReadyList+0xc0>)
   1fc62:	681b      	ldr	r3, [r3, #0]
   1fc64:	2b00      	cmp	r3, #0
   1fc66:	d008      	beq.n	1fc7a <prvAddNewTaskToReadyList+0xa6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
   1fc68:	4b08      	ldr	r3, [pc, #32]	; (1fc8c <prvAddNewTaskToReadyList+0xb8>)
   1fc6a:	681b      	ldr	r3, [r3, #0]
   1fc6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1fc6e:	687b      	ldr	r3, [r7, #4]
   1fc70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1fc72:	429a      	cmp	r2, r3
   1fc74:	d201      	bcs.n	1fc7a <prvAddNewTaskToReadyList+0xa6>
		{
			taskYIELD_IF_USING_PREEMPTION();
   1fc76:	4b0d      	ldr	r3, [pc, #52]	; (1fcac <prvAddNewTaskToReadyList+0xd8>)
   1fc78:	4798      	blx	r3
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
   1fc7a:	46c0      	nop			; (mov r8, r8)
   1fc7c:	46bd      	mov	sp, r7
   1fc7e:	b002      	add	sp, #8
   1fc80:	bd80      	pop	{r7, pc}
   1fc82:	46c0      	nop			; (mov r8, r8)
   1fc84:	0001eb61 	.word	0x0001eb61
   1fc88:	20000390 	.word	0x20000390
   1fc8c:	200002b8 	.word	0x200002b8
   1fc90:	00020599 	.word	0x00020599
   1fc94:	2000039c 	.word	0x2000039c
   1fc98:	200003ac 	.word	0x200003ac
   1fc9c:	20000398 	.word	0x20000398
   1fca0:	200002bc 	.word	0x200002bc
   1fca4:	0001ed57 	.word	0x0001ed57
   1fca8:	0001eb85 	.word	0x0001eb85
   1fcac:	0001eb41 	.word	0x0001eb41

0001fcb0 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
   1fcb0:	b580      	push	{r7, lr}
   1fcb2:	b086      	sub	sp, #24
   1fcb4:	af00      	add	r7, sp, #0
   1fcb6:	6078      	str	r0, [r7, #4]
   1fcb8:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
   1fcba:	2300      	movs	r3, #0
   1fcbc:	617b      	str	r3, [r7, #20]

		configASSERT( pxPreviousWakeTime );
   1fcbe:	687b      	ldr	r3, [r7, #4]
   1fcc0:	2b00      	cmp	r3, #0
   1fcc2:	d101      	bne.n	1fcc8 <vTaskDelayUntil+0x18>
   1fcc4:	b672      	cpsid	i
   1fcc6:	e7fe      	b.n	1fcc6 <vTaskDelayUntil+0x16>
		configASSERT( ( xTimeIncrement > 0U ) );
   1fcc8:	683b      	ldr	r3, [r7, #0]
   1fcca:	2b00      	cmp	r3, #0
   1fccc:	d101      	bne.n	1fcd2 <vTaskDelayUntil+0x22>
   1fcce:	b672      	cpsid	i
   1fcd0:	e7fe      	b.n	1fcd0 <vTaskDelayUntil+0x20>
		configASSERT( uxSchedulerSuspended == 0 );
   1fcd2:	4b23      	ldr	r3, [pc, #140]	; (1fd60 <vTaskDelayUntil+0xb0>)
   1fcd4:	681b      	ldr	r3, [r3, #0]
   1fcd6:	2b00      	cmp	r3, #0
   1fcd8:	d001      	beq.n	1fcde <vTaskDelayUntil+0x2e>
   1fcda:	b672      	cpsid	i
   1fcdc:	e7fe      	b.n	1fcdc <vTaskDelayUntil+0x2c>

		vTaskSuspendAll();
   1fcde:	4b21      	ldr	r3, [pc, #132]	; (1fd64 <vTaskDelayUntil+0xb4>)
   1fce0:	4798      	blx	r3
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
   1fce2:	4b21      	ldr	r3, [pc, #132]	; (1fd68 <vTaskDelayUntil+0xb8>)
   1fce4:	681b      	ldr	r3, [r3, #0]
   1fce6:	613b      	str	r3, [r7, #16]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
   1fce8:	687b      	ldr	r3, [r7, #4]
   1fcea:	681a      	ldr	r2, [r3, #0]
   1fcec:	683b      	ldr	r3, [r7, #0]
   1fcee:	18d3      	adds	r3, r2, r3
   1fcf0:	60fb      	str	r3, [r7, #12]

			if( xConstTickCount < *pxPreviousWakeTime )
   1fcf2:	687b      	ldr	r3, [r7, #4]
   1fcf4:	681a      	ldr	r2, [r3, #0]
   1fcf6:	693b      	ldr	r3, [r7, #16]
   1fcf8:	429a      	cmp	r2, r3
   1fcfa:	d90b      	bls.n	1fd14 <vTaskDelayUntil+0x64>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
   1fcfc:	687b      	ldr	r3, [r7, #4]
   1fcfe:	681a      	ldr	r2, [r3, #0]
   1fd00:	68fb      	ldr	r3, [r7, #12]
   1fd02:	429a      	cmp	r2, r3
   1fd04:	d911      	bls.n	1fd2a <vTaskDelayUntil+0x7a>
   1fd06:	68fa      	ldr	r2, [r7, #12]
   1fd08:	693b      	ldr	r3, [r7, #16]
   1fd0a:	429a      	cmp	r2, r3
   1fd0c:	d90d      	bls.n	1fd2a <vTaskDelayUntil+0x7a>
				{
					xShouldDelay = pdTRUE;
   1fd0e:	2301      	movs	r3, #1
   1fd10:	617b      	str	r3, [r7, #20]
   1fd12:	e00a      	b.n	1fd2a <vTaskDelayUntil+0x7a>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
   1fd14:	687b      	ldr	r3, [r7, #4]
   1fd16:	681a      	ldr	r2, [r3, #0]
   1fd18:	68fb      	ldr	r3, [r7, #12]
   1fd1a:	429a      	cmp	r2, r3
   1fd1c:	d803      	bhi.n	1fd26 <vTaskDelayUntil+0x76>
   1fd1e:	68fa      	ldr	r2, [r7, #12]
   1fd20:	693b      	ldr	r3, [r7, #16]
   1fd22:	429a      	cmp	r2, r3
   1fd24:	d901      	bls.n	1fd2a <vTaskDelayUntil+0x7a>
				{
					xShouldDelay = pdTRUE;
   1fd26:	2301      	movs	r3, #1
   1fd28:	617b      	str	r3, [r7, #20]
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
   1fd2a:	687b      	ldr	r3, [r7, #4]
   1fd2c:	68fa      	ldr	r2, [r7, #12]
   1fd2e:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
   1fd30:	697b      	ldr	r3, [r7, #20]
   1fd32:	2b00      	cmp	r3, #0
   1fd34:	d006      	beq.n	1fd44 <vTaskDelayUntil+0x94>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
   1fd36:	68fa      	ldr	r2, [r7, #12]
   1fd38:	693b      	ldr	r3, [r7, #16]
   1fd3a:	1ad3      	subs	r3, r2, r3
   1fd3c:	2100      	movs	r1, #0
   1fd3e:	0018      	movs	r0, r3
   1fd40:	4b0a      	ldr	r3, [pc, #40]	; (1fd6c <vTaskDelayUntil+0xbc>)
   1fd42:	4798      	blx	r3
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
   1fd44:	4b0a      	ldr	r3, [pc, #40]	; (1fd70 <vTaskDelayUntil+0xc0>)
   1fd46:	4798      	blx	r3
   1fd48:	0003      	movs	r3, r0
   1fd4a:	60bb      	str	r3, [r7, #8]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
   1fd4c:	68bb      	ldr	r3, [r7, #8]
   1fd4e:	2b00      	cmp	r3, #0
   1fd50:	d101      	bne.n	1fd56 <vTaskDelayUntil+0xa6>
		{
			portYIELD_WITHIN_API();
   1fd52:	4b08      	ldr	r3, [pc, #32]	; (1fd74 <vTaskDelayUntil+0xc4>)
   1fd54:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
   1fd56:	46c0      	nop			; (mov r8, r8)
   1fd58:	46bd      	mov	sp, r7
   1fd5a:	b006      	add	sp, #24
   1fd5c:	bd80      	pop	{r7, pc}
   1fd5e:	46c0      	nop			; (mov r8, r8)
   1fd60:	200003b8 	.word	0x200003b8
   1fd64:	0001ff91 	.word	0x0001ff91
   1fd68:	20000394 	.word	0x20000394
   1fd6c:	00020b89 	.word	0x00020b89
   1fd70:	0001ffa9 	.word	0x0001ffa9
   1fd74:	0001eb41 	.word	0x0001eb41

0001fd78 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
   1fd78:	b580      	push	{r7, lr}
   1fd7a:	b084      	sub	sp, #16
   1fd7c:	af00      	add	r7, sp, #0
   1fd7e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
   1fd80:	2300      	movs	r3, #0
   1fd82:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
   1fd84:	687b      	ldr	r3, [r7, #4]
   1fd86:	2b00      	cmp	r3, #0
   1fd88:	d010      	beq.n	1fdac <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
   1fd8a:	4b0d      	ldr	r3, [pc, #52]	; (1fdc0 <vTaskDelay+0x48>)
   1fd8c:	681b      	ldr	r3, [r3, #0]
   1fd8e:	2b00      	cmp	r3, #0
   1fd90:	d001      	beq.n	1fd96 <vTaskDelay+0x1e>
   1fd92:	b672      	cpsid	i
   1fd94:	e7fe      	b.n	1fd94 <vTaskDelay+0x1c>
			vTaskSuspendAll();
   1fd96:	4b0b      	ldr	r3, [pc, #44]	; (1fdc4 <vTaskDelay+0x4c>)
   1fd98:	4798      	blx	r3
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
   1fd9a:	687b      	ldr	r3, [r7, #4]
   1fd9c:	2100      	movs	r1, #0
   1fd9e:	0018      	movs	r0, r3
   1fda0:	4b09      	ldr	r3, [pc, #36]	; (1fdc8 <vTaskDelay+0x50>)
   1fda2:	4798      	blx	r3
			}
			xAlreadyYielded = xTaskResumeAll();
   1fda4:	4b09      	ldr	r3, [pc, #36]	; (1fdcc <vTaskDelay+0x54>)
   1fda6:	4798      	blx	r3
   1fda8:	0003      	movs	r3, r0
   1fdaa:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
   1fdac:	68fb      	ldr	r3, [r7, #12]
   1fdae:	2b00      	cmp	r3, #0
   1fdb0:	d101      	bne.n	1fdb6 <vTaskDelay+0x3e>
		{
			portYIELD_WITHIN_API();
   1fdb2:	4b07      	ldr	r3, [pc, #28]	; (1fdd0 <vTaskDelay+0x58>)
   1fdb4:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
   1fdb6:	46c0      	nop			; (mov r8, r8)
   1fdb8:	46bd      	mov	sp, r7
   1fdba:	b004      	add	sp, #16
   1fdbc:	bd80      	pop	{r7, pc}
   1fdbe:	46c0      	nop			; (mov r8, r8)
   1fdc0:	200003b8 	.word	0x200003b8
   1fdc4:	0001ff91 	.word	0x0001ff91
   1fdc8:	00020b89 	.word	0x00020b89
   1fdcc:	0001ffa9 	.word	0x0001ffa9
   1fdd0:	0001eb41 	.word	0x0001eb41

0001fdd4 <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
	{
   1fdd4:	b580      	push	{r7, lr}
   1fdd6:	b086      	sub	sp, #24
   1fdd8:	af00      	add	r7, sp, #0
   1fdda:	6078      	str	r0, [r7, #4]
   1fddc:	6039      	str	r1, [r7, #0]
	TCB_t *pxTCB;
	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
	BaseType_t xYieldRequired = pdFALSE;
   1fdde:	2300      	movs	r3, #0
   1fde0:	617b      	str	r3, [r7, #20]

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
   1fde2:	683b      	ldr	r3, [r7, #0]
   1fde4:	2b04      	cmp	r3, #4
   1fde6:	d901      	bls.n	1fdec <vTaskPrioritySet+0x18>
   1fde8:	b672      	cpsid	i
   1fdea:	e7fe      	b.n	1fdea <vTaskPrioritySet+0x16>

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
   1fdec:	683b      	ldr	r3, [r7, #0]
   1fdee:	2b04      	cmp	r3, #4
   1fdf0:	d901      	bls.n	1fdf6 <vTaskPrioritySet+0x22>
		{
			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
   1fdf2:	2304      	movs	r3, #4
   1fdf4:	603b      	str	r3, [r7, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		taskENTER_CRITICAL();
   1fdf6:	4b3d      	ldr	r3, [pc, #244]	; (1feec <vTaskPrioritySet+0x118>)
   1fdf8:	4798      	blx	r3
		{
			/* If null is passed in here then it is the priority of the calling
			task that is being changed. */
			pxTCB = prvGetTCBFromHandle( xTask );
   1fdfa:	687b      	ldr	r3, [r7, #4]
   1fdfc:	2b00      	cmp	r3, #0
   1fdfe:	d102      	bne.n	1fe06 <vTaskPrioritySet+0x32>
   1fe00:	4b3b      	ldr	r3, [pc, #236]	; (1fef0 <vTaskPrioritySet+0x11c>)
   1fe02:	681b      	ldr	r3, [r3, #0]
   1fe04:	e000      	b.n	1fe08 <vTaskPrioritySet+0x34>
   1fe06:	687b      	ldr	r3, [r7, #4]
   1fe08:	613b      	str	r3, [r7, #16]

			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentBasePriority = pxTCB->uxBasePriority;
   1fe0a:	693b      	ldr	r3, [r7, #16]
   1fe0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1fe0e:	60fb      	str	r3, [r7, #12]
			{
				uxCurrentBasePriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentBasePriority != uxNewPriority )
   1fe10:	68fa      	ldr	r2, [r7, #12]
   1fe12:	683b      	ldr	r3, [r7, #0]
   1fe14:	429a      	cmp	r2, r3
   1fe16:	d062      	beq.n	1fede <vTaskPrioritySet+0x10a>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentBasePriority )
   1fe18:	683a      	ldr	r2, [r7, #0]
   1fe1a:	68fb      	ldr	r3, [r7, #12]
   1fe1c:	429a      	cmp	r2, r3
   1fe1e:	d90d      	bls.n	1fe3c <vTaskPrioritySet+0x68>
				{
					if( pxTCB != pxCurrentTCB )
   1fe20:	4b33      	ldr	r3, [pc, #204]	; (1fef0 <vTaskPrioritySet+0x11c>)
   1fe22:	681b      	ldr	r3, [r3, #0]
   1fe24:	693a      	ldr	r2, [r7, #16]
   1fe26:	429a      	cmp	r2, r3
   1fe28:	d00f      	beq.n	1fe4a <vTaskPrioritySet+0x76>
					{
						/* The priority of a task other than the currently
						running task is being raised.  Is the priority being
						raised above that of the running task? */
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
   1fe2a:	4b31      	ldr	r3, [pc, #196]	; (1fef0 <vTaskPrioritySet+0x11c>)
   1fe2c:	681b      	ldr	r3, [r3, #0]
   1fe2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1fe30:	683b      	ldr	r3, [r7, #0]
   1fe32:	429a      	cmp	r2, r3
   1fe34:	d809      	bhi.n	1fe4a <vTaskPrioritySet+0x76>
						{
							xYieldRequired = pdTRUE;
   1fe36:	2301      	movs	r3, #1
   1fe38:	617b      	str	r3, [r7, #20]
   1fe3a:	e006      	b.n	1fe4a <vTaskPrioritySet+0x76>
						/* The priority of the running task is being raised,
						but the running task must already be the highest
						priority task able to run so no yield is required. */
					}
				}
				else if( pxTCB == pxCurrentTCB )
   1fe3c:	4b2c      	ldr	r3, [pc, #176]	; (1fef0 <vTaskPrioritySet+0x11c>)
   1fe3e:	681b      	ldr	r3, [r3, #0]
   1fe40:	693a      	ldr	r2, [r7, #16]
   1fe42:	429a      	cmp	r2, r3
   1fe44:	d101      	bne.n	1fe4a <vTaskPrioritySet+0x76>
				{
					/* Setting the priority of the running task down means
					there may now be another task of higher priority that
					is ready to execute. */
					xYieldRequired = pdTRUE;
   1fe46:	2301      	movs	r3, #1
   1fe48:	617b      	str	r3, [r7, #20]
				}

				/* Remember the ready list the task might be referenced from
				before its uxPriority member is changed so the
				taskRESET_READY_PRIORITY() macro can function correctly. */
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
   1fe4a:	693b      	ldr	r3, [r7, #16]
   1fe4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1fe4e:	60bb      	str	r3, [r7, #8]

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
   1fe50:	693b      	ldr	r3, [r7, #16]
   1fe52:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   1fe54:	693b      	ldr	r3, [r7, #16]
   1fe56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1fe58:	429a      	cmp	r2, r3
   1fe5a:	d102      	bne.n	1fe62 <vTaskPrioritySet+0x8e>
					{
						pxTCB->uxPriority = uxNewPriority;
   1fe5c:	693b      	ldr	r3, [r7, #16]
   1fe5e:	683a      	ldr	r2, [r7, #0]
   1fe60:	62da      	str	r2, [r3, #44]	; 0x2c
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
   1fe62:	693b      	ldr	r3, [r7, #16]
   1fe64:	683a      	ldr	r2, [r7, #0]
   1fe66:	641a      	str	r2, [r3, #64]	; 0x40
				}
				#endif

				/* Only reset the event list item value if the value is not
				being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
   1fe68:	693b      	ldr	r3, [r7, #16]
   1fe6a:	699b      	ldr	r3, [r3, #24]
   1fe6c:	2b00      	cmp	r3, #0
   1fe6e:	db04      	blt.n	1fe7a <vTaskPrioritySet+0xa6>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1fe70:	683b      	ldr	r3, [r7, #0]
   1fe72:	2205      	movs	r2, #5
   1fe74:	1ad2      	subs	r2, r2, r3
   1fe76:	693b      	ldr	r3, [r7, #16]
   1fe78:	619a      	str	r2, [r3, #24]

				/* If the task is in the blocked or suspended list we need do
				nothing more than change its priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the list appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
   1fe7a:	693b      	ldr	r3, [r7, #16]
   1fe7c:	6959      	ldr	r1, [r3, #20]
   1fe7e:	68ba      	ldr	r2, [r7, #8]
   1fe80:	0013      	movs	r3, r2
   1fe82:	009b      	lsls	r3, r3, #2
   1fe84:	189b      	adds	r3, r3, r2
   1fe86:	009b      	lsls	r3, r3, #2
   1fe88:	4a1a      	ldr	r2, [pc, #104]	; (1fef4 <vTaskPrioritySet+0x120>)
   1fe8a:	189b      	adds	r3, r3, r2
   1fe8c:	4299      	cmp	r1, r3
   1fe8e:	d101      	bne.n	1fe94 <vTaskPrioritySet+0xc0>
   1fe90:	2301      	movs	r3, #1
   1fe92:	e000      	b.n	1fe96 <vTaskPrioritySet+0xc2>
   1fe94:	2300      	movs	r3, #0
   1fe96:	2b00      	cmp	r3, #0
   1fe98:	d01c      	beq.n	1fed4 <vTaskPrioritySet+0x100>
				{
					/* The task is currently in its ready list - remove before
					adding it to it's new ready list.  As we are in a critical
					section we can do this even if the scheduler is suspended. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   1fe9a:	693b      	ldr	r3, [r7, #16]
   1fe9c:	3304      	adds	r3, #4
   1fe9e:	0018      	movs	r0, r3
   1fea0:	4b15      	ldr	r3, [pc, #84]	; (1fef8 <vTaskPrioritySet+0x124>)
   1fea2:	4798      	blx	r3
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					prvAddTaskToReadyList( pxTCB );
   1fea4:	693b      	ldr	r3, [r7, #16]
   1fea6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1fea8:	4b14      	ldr	r3, [pc, #80]	; (1fefc <vTaskPrioritySet+0x128>)
   1feaa:	681b      	ldr	r3, [r3, #0]
   1feac:	429a      	cmp	r2, r3
   1feae:	d903      	bls.n	1feb8 <vTaskPrioritySet+0xe4>
   1feb0:	693b      	ldr	r3, [r7, #16]
   1feb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1feb4:	4b11      	ldr	r3, [pc, #68]	; (1fefc <vTaskPrioritySet+0x128>)
   1feb6:	601a      	str	r2, [r3, #0]
   1feb8:	693b      	ldr	r3, [r7, #16]
   1feba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1febc:	0013      	movs	r3, r2
   1febe:	009b      	lsls	r3, r3, #2
   1fec0:	189b      	adds	r3, r3, r2
   1fec2:	009b      	lsls	r3, r3, #2
   1fec4:	4a0b      	ldr	r2, [pc, #44]	; (1fef4 <vTaskPrioritySet+0x120>)
   1fec6:	189a      	adds	r2, r3, r2
   1fec8:	693b      	ldr	r3, [r7, #16]
   1feca:	3304      	adds	r3, #4
   1fecc:	0019      	movs	r1, r3
   1fece:	0010      	movs	r0, r2
   1fed0:	4b0b      	ldr	r3, [pc, #44]	; (1ff00 <vTaskPrioritySet+0x12c>)
   1fed2:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldRequired != pdFALSE )
   1fed4:	697b      	ldr	r3, [r7, #20]
   1fed6:	2b00      	cmp	r3, #0
   1fed8:	d001      	beq.n	1fede <vTaskPrioritySet+0x10a>
				{
					taskYIELD_IF_USING_PREEMPTION();
   1feda:	4b0a      	ldr	r3, [pc, #40]	; (1ff04 <vTaskPrioritySet+0x130>)
   1fedc:	4798      	blx	r3
				/* Remove compiler warning about unused variables when the port
				optimised task selection is not being used. */
				( void ) uxPriorityUsedOnEntry;
			}
		}
		taskEXIT_CRITICAL();
   1fede:	4b0a      	ldr	r3, [pc, #40]	; (1ff08 <vTaskPrioritySet+0x134>)
   1fee0:	4798      	blx	r3
	}
   1fee2:	46c0      	nop			; (mov r8, r8)
   1fee4:	46bd      	mov	sp, r7
   1fee6:	b006      	add	sp, #24
   1fee8:	bd80      	pop	{r7, pc}
   1feea:	46c0      	nop			; (mov r8, r8)
   1feec:	0001eb61 	.word	0x0001eb61
   1fef0:	200002b8 	.word	0x200002b8
   1fef4:	200002bc 	.word	0x200002bc
   1fef8:	0001ee07 	.word	0x0001ee07
   1fefc:	20000398 	.word	0x20000398
   1ff00:	0001ed57 	.word	0x0001ed57
   1ff04:	0001eb41 	.word	0x0001eb41
   1ff08:	0001eb85 	.word	0x0001eb85

0001ff0c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
   1ff0c:	b590      	push	{r4, r7, lr}
   1ff0e:	b085      	sub	sp, #20
   1ff10:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
   1ff12:	4916      	ldr	r1, [pc, #88]	; (1ff6c <vTaskStartScheduler+0x60>)
   1ff14:	4816      	ldr	r0, [pc, #88]	; (1ff70 <vTaskStartScheduler+0x64>)
   1ff16:	4b17      	ldr	r3, [pc, #92]	; (1ff74 <vTaskStartScheduler+0x68>)
   1ff18:	9301      	str	r3, [sp, #4]
   1ff1a:	2300      	movs	r3, #0
   1ff1c:	9300      	str	r3, [sp, #0]
   1ff1e:	2300      	movs	r3, #0
   1ff20:	2282      	movs	r2, #130	; 0x82
   1ff22:	4c15      	ldr	r4, [pc, #84]	; (1ff78 <vTaskStartScheduler+0x6c>)
   1ff24:	47a0      	blx	r4
   1ff26:	0003      	movs	r3, r0
   1ff28:	607b      	str	r3, [r7, #4]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
   1ff2a:	687b      	ldr	r3, [r7, #4]
   1ff2c:	2b01      	cmp	r3, #1
   1ff2e:	d103      	bne.n	1ff38 <vTaskStartScheduler+0x2c>
		{
			xReturn = xTimerCreateTimerTask();
   1ff30:	4b12      	ldr	r3, [pc, #72]	; (1ff7c <vTaskStartScheduler+0x70>)
   1ff32:	4798      	blx	r3
   1ff34:	0003      	movs	r3, r0
   1ff36:	607b      	str	r3, [r7, #4]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
   1ff38:	687b      	ldr	r3, [r7, #4]
   1ff3a:	2b01      	cmp	r3, #1
   1ff3c:	d10d      	bne.n	1ff5a <vTaskStartScheduler+0x4e>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
   1ff3e:	b672      	cpsid	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
   1ff40:	4b0f      	ldr	r3, [pc, #60]	; (1ff80 <vTaskStartScheduler+0x74>)
   1ff42:	2201      	movs	r2, #1
   1ff44:	4252      	negs	r2, r2
   1ff46:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
   1ff48:	4b0e      	ldr	r3, [pc, #56]	; (1ff84 <vTaskStartScheduler+0x78>)
   1ff4a:	2201      	movs	r2, #1
   1ff4c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
   1ff4e:	4b0e      	ldr	r3, [pc, #56]	; (1ff88 <vTaskStartScheduler+0x7c>)
   1ff50:	2200      	movs	r2, #0
   1ff52:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
   1ff54:	4b0d      	ldr	r3, [pc, #52]	; (1ff8c <vTaskStartScheduler+0x80>)
   1ff56:	4798      	blx	r3
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
   1ff58:	e004      	b.n	1ff64 <vTaskStartScheduler+0x58>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
   1ff5a:	687b      	ldr	r3, [r7, #4]
   1ff5c:	3301      	adds	r3, #1
   1ff5e:	d101      	bne.n	1ff64 <vTaskStartScheduler+0x58>
   1ff60:	b672      	cpsid	i
   1ff62:	e7fe      	b.n	1ff62 <vTaskStartScheduler+0x56>
}
   1ff64:	46c0      	nop			; (mov r8, r8)
   1ff66:	46bd      	mov	sp, r7
   1ff68:	b003      	add	sp, #12
   1ff6a:	bd90      	pop	{r4, r7, pc}
   1ff6c:	0002a720 	.word	0x0002a720
   1ff70:	00020571 	.word	0x00020571
   1ff74:	200003b4 	.word	0x200003b4
   1ff78:	0001fa39 	.word	0x0001fa39
   1ff7c:	00020c3d 	.word	0x00020c3d
   1ff80:	200003b0 	.word	0x200003b0
   1ff84:	2000039c 	.word	0x2000039c
   1ff88:	20000394 	.word	0x20000394
   1ff8c:	0001eae9 	.word	0x0001eae9

0001ff90 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
   1ff90:	b580      	push	{r7, lr}
   1ff92:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
   1ff94:	4b03      	ldr	r3, [pc, #12]	; (1ffa4 <vTaskSuspendAll+0x14>)
   1ff96:	681b      	ldr	r3, [r3, #0]
   1ff98:	1c5a      	adds	r2, r3, #1
   1ff9a:	4b02      	ldr	r3, [pc, #8]	; (1ffa4 <vTaskSuspendAll+0x14>)
   1ff9c:	601a      	str	r2, [r3, #0]
}
   1ff9e:	46c0      	nop			; (mov r8, r8)
   1ffa0:	46bd      	mov	sp, r7
   1ffa2:	bd80      	pop	{r7, pc}
   1ffa4:	200003b8 	.word	0x200003b8

0001ffa8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
   1ffa8:	b580      	push	{r7, lr}
   1ffaa:	b084      	sub	sp, #16
   1ffac:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
   1ffae:	2300      	movs	r3, #0
   1ffb0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
   1ffb2:	2300      	movs	r3, #0
   1ffb4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
   1ffb6:	4b3a      	ldr	r3, [pc, #232]	; (200a0 <xTaskResumeAll+0xf8>)
   1ffb8:	681b      	ldr	r3, [r3, #0]
   1ffba:	2b00      	cmp	r3, #0
   1ffbc:	d101      	bne.n	1ffc2 <xTaskResumeAll+0x1a>
   1ffbe:	b672      	cpsid	i
   1ffc0:	e7fe      	b.n	1ffc0 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
   1ffc2:	4b38      	ldr	r3, [pc, #224]	; (200a4 <xTaskResumeAll+0xfc>)
   1ffc4:	4798      	blx	r3
	{
		--uxSchedulerSuspended;
   1ffc6:	4b36      	ldr	r3, [pc, #216]	; (200a0 <xTaskResumeAll+0xf8>)
   1ffc8:	681b      	ldr	r3, [r3, #0]
   1ffca:	1e5a      	subs	r2, r3, #1
   1ffcc:	4b34      	ldr	r3, [pc, #208]	; (200a0 <xTaskResumeAll+0xf8>)
   1ffce:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   1ffd0:	4b33      	ldr	r3, [pc, #204]	; (200a0 <xTaskResumeAll+0xf8>)
   1ffd2:	681b      	ldr	r3, [r3, #0]
   1ffd4:	2b00      	cmp	r3, #0
   1ffd6:	d15b      	bne.n	20090 <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
   1ffd8:	4b33      	ldr	r3, [pc, #204]	; (200a8 <xTaskResumeAll+0x100>)
   1ffda:	681b      	ldr	r3, [r3, #0]
   1ffdc:	2b00      	cmp	r3, #0
   1ffde:	d057      	beq.n	20090 <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
   1ffe0:	e02f      	b.n	20042 <xTaskResumeAll+0x9a>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
   1ffe2:	4b32      	ldr	r3, [pc, #200]	; (200ac <xTaskResumeAll+0x104>)
   1ffe4:	68db      	ldr	r3, [r3, #12]
   1ffe6:	68db      	ldr	r3, [r3, #12]
   1ffe8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   1ffea:	68fb      	ldr	r3, [r7, #12]
   1ffec:	3318      	adds	r3, #24
   1ffee:	0018      	movs	r0, r3
   1fff0:	4b2f      	ldr	r3, [pc, #188]	; (200b0 <xTaskResumeAll+0x108>)
   1fff2:	4798      	blx	r3
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   1fff4:	68fb      	ldr	r3, [r7, #12]
   1fff6:	3304      	adds	r3, #4
   1fff8:	0018      	movs	r0, r3
   1fffa:	4b2d      	ldr	r3, [pc, #180]	; (200b0 <xTaskResumeAll+0x108>)
   1fffc:	4798      	blx	r3
					prvAddTaskToReadyList( pxTCB );
   1fffe:	68fb      	ldr	r3, [r7, #12]
   20000:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   20002:	4b2c      	ldr	r3, [pc, #176]	; (200b4 <xTaskResumeAll+0x10c>)
   20004:	681b      	ldr	r3, [r3, #0]
   20006:	429a      	cmp	r2, r3
   20008:	d903      	bls.n	20012 <xTaskResumeAll+0x6a>
   2000a:	68fb      	ldr	r3, [r7, #12]
   2000c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2000e:	4b29      	ldr	r3, [pc, #164]	; (200b4 <xTaskResumeAll+0x10c>)
   20010:	601a      	str	r2, [r3, #0]
   20012:	68fb      	ldr	r3, [r7, #12]
   20014:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   20016:	0013      	movs	r3, r2
   20018:	009b      	lsls	r3, r3, #2
   2001a:	189b      	adds	r3, r3, r2
   2001c:	009b      	lsls	r3, r3, #2
   2001e:	4a26      	ldr	r2, [pc, #152]	; (200b8 <xTaskResumeAll+0x110>)
   20020:	189a      	adds	r2, r3, r2
   20022:	68fb      	ldr	r3, [r7, #12]
   20024:	3304      	adds	r3, #4
   20026:	0019      	movs	r1, r3
   20028:	0010      	movs	r0, r2
   2002a:	4b24      	ldr	r3, [pc, #144]	; (200bc <xTaskResumeAll+0x114>)
   2002c:	4798      	blx	r3

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   2002e:	68fb      	ldr	r3, [r7, #12]
   20030:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   20032:	4b23      	ldr	r3, [pc, #140]	; (200c0 <xTaskResumeAll+0x118>)
   20034:	681b      	ldr	r3, [r3, #0]
   20036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   20038:	429a      	cmp	r2, r3
   2003a:	d302      	bcc.n	20042 <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
   2003c:	4b21      	ldr	r3, [pc, #132]	; (200c4 <xTaskResumeAll+0x11c>)
   2003e:	2201      	movs	r2, #1
   20040:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
   20042:	4b1a      	ldr	r3, [pc, #104]	; (200ac <xTaskResumeAll+0x104>)
   20044:	681b      	ldr	r3, [r3, #0]
   20046:	2b00      	cmp	r3, #0
   20048:	d1cb      	bne.n	1ffe2 <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
   2004a:	68fb      	ldr	r3, [r7, #12]
   2004c:	2b00      	cmp	r3, #0
   2004e:	d001      	beq.n	20054 <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
   20050:	4b1d      	ldr	r3, [pc, #116]	; (200c8 <xTaskResumeAll+0x120>)
   20052:	4798      	blx	r3
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
   20054:	4b1d      	ldr	r3, [pc, #116]	; (200cc <xTaskResumeAll+0x124>)
   20056:	681b      	ldr	r3, [r3, #0]
   20058:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
   2005a:	687b      	ldr	r3, [r7, #4]
   2005c:	2b00      	cmp	r3, #0
   2005e:	d00f      	beq.n	20080 <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
   20060:	4b1b      	ldr	r3, [pc, #108]	; (200d0 <xTaskResumeAll+0x128>)
   20062:	4798      	blx	r3
   20064:	1e03      	subs	r3, r0, #0
   20066:	d002      	beq.n	2006e <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
   20068:	4b16      	ldr	r3, [pc, #88]	; (200c4 <xTaskResumeAll+0x11c>)
   2006a:	2201      	movs	r2, #1
   2006c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
   2006e:	687b      	ldr	r3, [r7, #4]
   20070:	3b01      	subs	r3, #1
   20072:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
   20074:	687b      	ldr	r3, [r7, #4]
   20076:	2b00      	cmp	r3, #0
   20078:	d1f2      	bne.n	20060 <xTaskResumeAll+0xb8>

						uxPendedTicks = 0;
   2007a:	4b14      	ldr	r3, [pc, #80]	; (200cc <xTaskResumeAll+0x124>)
   2007c:	2200      	movs	r2, #0
   2007e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
   20080:	4b10      	ldr	r3, [pc, #64]	; (200c4 <xTaskResumeAll+0x11c>)
   20082:	681b      	ldr	r3, [r3, #0]
   20084:	2b00      	cmp	r3, #0
   20086:	d003      	beq.n	20090 <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
   20088:	2301      	movs	r3, #1
   2008a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
   2008c:	4b11      	ldr	r3, [pc, #68]	; (200d4 <xTaskResumeAll+0x12c>)
   2008e:	4798      	blx	r3
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
   20090:	4b11      	ldr	r3, [pc, #68]	; (200d8 <xTaskResumeAll+0x130>)
   20092:	4798      	blx	r3

	return xAlreadyYielded;
   20094:	68bb      	ldr	r3, [r7, #8]
}
   20096:	0018      	movs	r0, r3
   20098:	46bd      	mov	sp, r7
   2009a:	b004      	add	sp, #16
   2009c:	bd80      	pop	{r7, pc}
   2009e:	46c0      	nop			; (mov r8, r8)
   200a0:	200003b8 	.word	0x200003b8
   200a4:	0001eb61 	.word	0x0001eb61
   200a8:	20000390 	.word	0x20000390
   200ac:	20000350 	.word	0x20000350
   200b0:	0001ee07 	.word	0x0001ee07
   200b4:	20000398 	.word	0x20000398
   200b8:	200002bc 	.word	0x200002bc
   200bc:	0001ed57 	.word	0x0001ed57
   200c0:	200002b8 	.word	0x200002b8
   200c4:	200003a4 	.word	0x200003a4
   200c8:	000206b9 	.word	0x000206b9
   200cc:	200003a0 	.word	0x200003a0
   200d0:	00020119 	.word	0x00020119
   200d4:	0001eb41 	.word	0x0001eb41
   200d8:	0001eb85 	.word	0x0001eb85

000200dc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
   200dc:	b580      	push	{r7, lr}
   200de:	b082      	sub	sp, #8
   200e0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
   200e2:	4b04      	ldr	r3, [pc, #16]	; (200f4 <xTaskGetTickCount+0x18>)
   200e4:	681b      	ldr	r3, [r3, #0]
   200e6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
   200e8:	687b      	ldr	r3, [r7, #4]
}
   200ea:	0018      	movs	r0, r3
   200ec:	46bd      	mov	sp, r7
   200ee:	b002      	add	sp, #8
   200f0:	bd80      	pop	{r7, pc}
   200f2:	46c0      	nop			; (mov r8, r8)
   200f4:	20000394 	.word	0x20000394

000200f8 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
   200f8:	b580      	push	{r7, lr}
   200fa:	b082      	sub	sp, #8
   200fc:	af00      	add	r7, sp, #0
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
   200fe:	2300      	movs	r3, #0
   20100:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
   20102:	4b04      	ldr	r3, [pc, #16]	; (20114 <xTaskGetTickCountFromISR+0x1c>)
   20104:	681b      	ldr	r3, [r3, #0]
   20106:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
   20108:	683b      	ldr	r3, [r7, #0]
}
   2010a:	0018      	movs	r0, r3
   2010c:	46bd      	mov	sp, r7
   2010e:	b002      	add	sp, #8
   20110:	bd80      	pop	{r7, pc}
   20112:	46c0      	nop			; (mov r8, r8)
   20114:	20000394 	.word	0x20000394

00020118 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
   20118:	b580      	push	{r7, lr}
   2011a:	b086      	sub	sp, #24
   2011c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
   2011e:	2300      	movs	r3, #0
   20120:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   20122:	4b4c      	ldr	r3, [pc, #304]	; (20254 <xTaskIncrementTick+0x13c>)
   20124:	681b      	ldr	r3, [r3, #0]
   20126:	2b00      	cmp	r3, #0
   20128:	d000      	beq.n	2012c <xTaskIncrementTick+0x14>
   2012a:	e083      	b.n	20234 <xTaskIncrementTick+0x11c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
   2012c:	4b4a      	ldr	r3, [pc, #296]	; (20258 <xTaskIncrementTick+0x140>)
   2012e:	681b      	ldr	r3, [r3, #0]
   20130:	3301      	adds	r3, #1
   20132:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
   20134:	4b48      	ldr	r3, [pc, #288]	; (20258 <xTaskIncrementTick+0x140>)
   20136:	693a      	ldr	r2, [r7, #16]
   20138:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
   2013a:	693b      	ldr	r3, [r7, #16]
   2013c:	2b00      	cmp	r3, #0
   2013e:	d117      	bne.n	20170 <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
   20140:	4b46      	ldr	r3, [pc, #280]	; (2025c <xTaskIncrementTick+0x144>)
   20142:	681b      	ldr	r3, [r3, #0]
   20144:	681b      	ldr	r3, [r3, #0]
   20146:	2b00      	cmp	r3, #0
   20148:	d001      	beq.n	2014e <xTaskIncrementTick+0x36>
   2014a:	b672      	cpsid	i
   2014c:	e7fe      	b.n	2014c <xTaskIncrementTick+0x34>
   2014e:	4b43      	ldr	r3, [pc, #268]	; (2025c <xTaskIncrementTick+0x144>)
   20150:	681b      	ldr	r3, [r3, #0]
   20152:	60fb      	str	r3, [r7, #12]
   20154:	4b42      	ldr	r3, [pc, #264]	; (20260 <xTaskIncrementTick+0x148>)
   20156:	681a      	ldr	r2, [r3, #0]
   20158:	4b40      	ldr	r3, [pc, #256]	; (2025c <xTaskIncrementTick+0x144>)
   2015a:	601a      	str	r2, [r3, #0]
   2015c:	4b40      	ldr	r3, [pc, #256]	; (20260 <xTaskIncrementTick+0x148>)
   2015e:	68fa      	ldr	r2, [r7, #12]
   20160:	601a      	str	r2, [r3, #0]
   20162:	4b40      	ldr	r3, [pc, #256]	; (20264 <xTaskIncrementTick+0x14c>)
   20164:	681b      	ldr	r3, [r3, #0]
   20166:	1c5a      	adds	r2, r3, #1
   20168:	4b3e      	ldr	r3, [pc, #248]	; (20264 <xTaskIncrementTick+0x14c>)
   2016a:	601a      	str	r2, [r3, #0]
   2016c:	4b3e      	ldr	r3, [pc, #248]	; (20268 <xTaskIncrementTick+0x150>)
   2016e:	4798      	blx	r3

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
   20170:	4b3e      	ldr	r3, [pc, #248]	; (2026c <xTaskIncrementTick+0x154>)
   20172:	681b      	ldr	r3, [r3, #0]
   20174:	693a      	ldr	r2, [r7, #16]
   20176:	429a      	cmp	r2, r3
   20178:	d34e      	bcc.n	20218 <xTaskIncrementTick+0x100>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   2017a:	4b38      	ldr	r3, [pc, #224]	; (2025c <xTaskIncrementTick+0x144>)
   2017c:	681b      	ldr	r3, [r3, #0]
   2017e:	681b      	ldr	r3, [r3, #0]
   20180:	2b00      	cmp	r3, #0
   20182:	d101      	bne.n	20188 <xTaskIncrementTick+0x70>
   20184:	2301      	movs	r3, #1
   20186:	e000      	b.n	2018a <xTaskIncrementTick+0x72>
   20188:	2300      	movs	r3, #0
   2018a:	2b00      	cmp	r3, #0
   2018c:	d004      	beq.n	20198 <xTaskIncrementTick+0x80>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   2018e:	4b37      	ldr	r3, [pc, #220]	; (2026c <xTaskIncrementTick+0x154>)
   20190:	2201      	movs	r2, #1
   20192:	4252      	negs	r2, r2
   20194:	601a      	str	r2, [r3, #0]
					break;
   20196:	e03f      	b.n	20218 <xTaskIncrementTick+0x100>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   20198:	4b30      	ldr	r3, [pc, #192]	; (2025c <xTaskIncrementTick+0x144>)
   2019a:	681b      	ldr	r3, [r3, #0]
   2019c:	68db      	ldr	r3, [r3, #12]
   2019e:	68db      	ldr	r3, [r3, #12]
   201a0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
   201a2:	68bb      	ldr	r3, [r7, #8]
   201a4:	685b      	ldr	r3, [r3, #4]
   201a6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
   201a8:	693a      	ldr	r2, [r7, #16]
   201aa:	687b      	ldr	r3, [r7, #4]
   201ac:	429a      	cmp	r2, r3
   201ae:	d203      	bcs.n	201b8 <xTaskIncrementTick+0xa0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
   201b0:	4b2e      	ldr	r3, [pc, #184]	; (2026c <xTaskIncrementTick+0x154>)
   201b2:	687a      	ldr	r2, [r7, #4]
   201b4:	601a      	str	r2, [r3, #0]
						break;
   201b6:	e02f      	b.n	20218 <xTaskIncrementTick+0x100>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   201b8:	68bb      	ldr	r3, [r7, #8]
   201ba:	3304      	adds	r3, #4
   201bc:	0018      	movs	r0, r3
   201be:	4b2c      	ldr	r3, [pc, #176]	; (20270 <xTaskIncrementTick+0x158>)
   201c0:	4798      	blx	r3

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
   201c2:	68bb      	ldr	r3, [r7, #8]
   201c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   201c6:	2b00      	cmp	r3, #0
   201c8:	d004      	beq.n	201d4 <xTaskIncrementTick+0xbc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   201ca:	68bb      	ldr	r3, [r7, #8]
   201cc:	3318      	adds	r3, #24
   201ce:	0018      	movs	r0, r3
   201d0:	4b27      	ldr	r3, [pc, #156]	; (20270 <xTaskIncrementTick+0x158>)
   201d2:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
   201d4:	68bb      	ldr	r3, [r7, #8]
   201d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   201d8:	4b26      	ldr	r3, [pc, #152]	; (20274 <xTaskIncrementTick+0x15c>)
   201da:	681b      	ldr	r3, [r3, #0]
   201dc:	429a      	cmp	r2, r3
   201de:	d903      	bls.n	201e8 <xTaskIncrementTick+0xd0>
   201e0:	68bb      	ldr	r3, [r7, #8]
   201e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   201e4:	4b23      	ldr	r3, [pc, #140]	; (20274 <xTaskIncrementTick+0x15c>)
   201e6:	601a      	str	r2, [r3, #0]
   201e8:	68bb      	ldr	r3, [r7, #8]
   201ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   201ec:	0013      	movs	r3, r2
   201ee:	009b      	lsls	r3, r3, #2
   201f0:	189b      	adds	r3, r3, r2
   201f2:	009b      	lsls	r3, r3, #2
   201f4:	4a20      	ldr	r2, [pc, #128]	; (20278 <xTaskIncrementTick+0x160>)
   201f6:	189a      	adds	r2, r3, r2
   201f8:	68bb      	ldr	r3, [r7, #8]
   201fa:	3304      	adds	r3, #4
   201fc:	0019      	movs	r1, r3
   201fe:	0010      	movs	r0, r2
   20200:	4b1e      	ldr	r3, [pc, #120]	; (2027c <xTaskIncrementTick+0x164>)
   20202:	4798      	blx	r3
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   20204:	68bb      	ldr	r3, [r7, #8]
   20206:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   20208:	4b1d      	ldr	r3, [pc, #116]	; (20280 <xTaskIncrementTick+0x168>)
   2020a:	681b      	ldr	r3, [r3, #0]
   2020c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   2020e:	429a      	cmp	r2, r3
   20210:	d3b3      	bcc.n	2017a <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
   20212:	2301      	movs	r3, #1
   20214:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   20216:	e7b0      	b.n	2017a <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
   20218:	4b19      	ldr	r3, [pc, #100]	; (20280 <xTaskIncrementTick+0x168>)
   2021a:	681b      	ldr	r3, [r3, #0]
   2021c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2021e:	4916      	ldr	r1, [pc, #88]	; (20278 <xTaskIncrementTick+0x160>)
   20220:	0013      	movs	r3, r2
   20222:	009b      	lsls	r3, r3, #2
   20224:	189b      	adds	r3, r3, r2
   20226:	009b      	lsls	r3, r3, #2
   20228:	585b      	ldr	r3, [r3, r1]
   2022a:	2b01      	cmp	r3, #1
   2022c:	d907      	bls.n	2023e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
   2022e:	2301      	movs	r3, #1
   20230:	617b      	str	r3, [r7, #20]
   20232:	e004      	b.n	2023e <xTaskIncrementTick+0x126>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
   20234:	4b13      	ldr	r3, [pc, #76]	; (20284 <xTaskIncrementTick+0x16c>)
   20236:	681b      	ldr	r3, [r3, #0]
   20238:	1c5a      	adds	r2, r3, #1
   2023a:	4b12      	ldr	r3, [pc, #72]	; (20284 <xTaskIncrementTick+0x16c>)
   2023c:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
   2023e:	4b12      	ldr	r3, [pc, #72]	; (20288 <xTaskIncrementTick+0x170>)
   20240:	681b      	ldr	r3, [r3, #0]
   20242:	2b00      	cmp	r3, #0
   20244:	d001      	beq.n	2024a <xTaskIncrementTick+0x132>
		{
			xSwitchRequired = pdTRUE;
   20246:	2301      	movs	r3, #1
   20248:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
   2024a:	697b      	ldr	r3, [r7, #20]
}
   2024c:	0018      	movs	r0, r3
   2024e:	46bd      	mov	sp, r7
   20250:	b006      	add	sp, #24
   20252:	bd80      	pop	{r7, pc}
   20254:	200003b8 	.word	0x200003b8
   20258:	20000394 	.word	0x20000394
   2025c:	20000348 	.word	0x20000348
   20260:	2000034c 	.word	0x2000034c
   20264:	200003a8 	.word	0x200003a8
   20268:	000206b9 	.word	0x000206b9
   2026c:	200003b0 	.word	0x200003b0
   20270:	0001ee07 	.word	0x0001ee07
   20274:	20000398 	.word	0x20000398
   20278:	200002bc 	.word	0x200002bc
   2027c:	0001ed57 	.word	0x0001ed57
   20280:	200002b8 	.word	0x200002b8
   20284:	200003a0 	.word	0x200003a0
   20288:	200003a4 	.word	0x200003a4

0002028c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
   2028c:	b580      	push	{r7, lr}
   2028e:	b082      	sub	sp, #8
   20290:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
   20292:	4b22      	ldr	r3, [pc, #136]	; (2031c <vTaskSwitchContext+0x90>)
   20294:	681b      	ldr	r3, [r3, #0]
   20296:	2b00      	cmp	r3, #0
   20298:	d003      	beq.n	202a2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
   2029a:	4b21      	ldr	r3, [pc, #132]	; (20320 <vTaskSwitchContext+0x94>)
   2029c:	2201      	movs	r2, #1
   2029e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
   202a0:	e037      	b.n	20312 <vTaskSwitchContext+0x86>
		xYieldPending = pdFALSE;
   202a2:	4b1f      	ldr	r3, [pc, #124]	; (20320 <vTaskSwitchContext+0x94>)
   202a4:	2200      	movs	r2, #0
   202a6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
   202a8:	4b1e      	ldr	r3, [pc, #120]	; (20324 <vTaskSwitchContext+0x98>)
   202aa:	681b      	ldr	r3, [r3, #0]
   202ac:	607b      	str	r3, [r7, #4]
   202ae:	e007      	b.n	202c0 <vTaskSwitchContext+0x34>
   202b0:	687b      	ldr	r3, [r7, #4]
   202b2:	2b00      	cmp	r3, #0
   202b4:	d101      	bne.n	202ba <vTaskSwitchContext+0x2e>
   202b6:	b672      	cpsid	i
   202b8:	e7fe      	b.n	202b8 <vTaskSwitchContext+0x2c>
   202ba:	687b      	ldr	r3, [r7, #4]
   202bc:	3b01      	subs	r3, #1
   202be:	607b      	str	r3, [r7, #4]
   202c0:	4919      	ldr	r1, [pc, #100]	; (20328 <vTaskSwitchContext+0x9c>)
   202c2:	687a      	ldr	r2, [r7, #4]
   202c4:	0013      	movs	r3, r2
   202c6:	009b      	lsls	r3, r3, #2
   202c8:	189b      	adds	r3, r3, r2
   202ca:	009b      	lsls	r3, r3, #2
   202cc:	585b      	ldr	r3, [r3, r1]
   202ce:	2b00      	cmp	r3, #0
   202d0:	d0ee      	beq.n	202b0 <vTaskSwitchContext+0x24>
   202d2:	687a      	ldr	r2, [r7, #4]
   202d4:	0013      	movs	r3, r2
   202d6:	009b      	lsls	r3, r3, #2
   202d8:	189b      	adds	r3, r3, r2
   202da:	009b      	lsls	r3, r3, #2
   202dc:	4a12      	ldr	r2, [pc, #72]	; (20328 <vTaskSwitchContext+0x9c>)
   202de:	189b      	adds	r3, r3, r2
   202e0:	603b      	str	r3, [r7, #0]
   202e2:	683b      	ldr	r3, [r7, #0]
   202e4:	685b      	ldr	r3, [r3, #4]
   202e6:	685a      	ldr	r2, [r3, #4]
   202e8:	683b      	ldr	r3, [r7, #0]
   202ea:	605a      	str	r2, [r3, #4]
   202ec:	683b      	ldr	r3, [r7, #0]
   202ee:	685a      	ldr	r2, [r3, #4]
   202f0:	683b      	ldr	r3, [r7, #0]
   202f2:	3308      	adds	r3, #8
   202f4:	429a      	cmp	r2, r3
   202f6:	d104      	bne.n	20302 <vTaskSwitchContext+0x76>
   202f8:	683b      	ldr	r3, [r7, #0]
   202fa:	685b      	ldr	r3, [r3, #4]
   202fc:	685a      	ldr	r2, [r3, #4]
   202fe:	683b      	ldr	r3, [r7, #0]
   20300:	605a      	str	r2, [r3, #4]
   20302:	683b      	ldr	r3, [r7, #0]
   20304:	685b      	ldr	r3, [r3, #4]
   20306:	68da      	ldr	r2, [r3, #12]
   20308:	4b08      	ldr	r3, [pc, #32]	; (2032c <vTaskSwitchContext+0xa0>)
   2030a:	601a      	str	r2, [r3, #0]
   2030c:	4b05      	ldr	r3, [pc, #20]	; (20324 <vTaskSwitchContext+0x98>)
   2030e:	687a      	ldr	r2, [r7, #4]
   20310:	601a      	str	r2, [r3, #0]
}
   20312:	46c0      	nop			; (mov r8, r8)
   20314:	46bd      	mov	sp, r7
   20316:	b002      	add	sp, #8
   20318:	bd80      	pop	{r7, pc}
   2031a:	46c0      	nop			; (mov r8, r8)
   2031c:	200003b8 	.word	0x200003b8
   20320:	200003a4 	.word	0x200003a4
   20324:	20000398 	.word	0x20000398
   20328:	200002bc 	.word	0x200002bc
   2032c:	200002b8 	.word	0x200002b8

00020330 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
   20330:	b580      	push	{r7, lr}
   20332:	b082      	sub	sp, #8
   20334:	af00      	add	r7, sp, #0
   20336:	6078      	str	r0, [r7, #4]
   20338:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
   2033a:	687b      	ldr	r3, [r7, #4]
   2033c:	2b00      	cmp	r3, #0
   2033e:	d101      	bne.n	20344 <vTaskPlaceOnEventList+0x14>
   20340:	b672      	cpsid	i
   20342:	e7fe      	b.n	20342 <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
   20344:	4b08      	ldr	r3, [pc, #32]	; (20368 <vTaskPlaceOnEventList+0x38>)
   20346:	681b      	ldr	r3, [r3, #0]
   20348:	3318      	adds	r3, #24
   2034a:	001a      	movs	r2, r3
   2034c:	687b      	ldr	r3, [r7, #4]
   2034e:	0011      	movs	r1, r2
   20350:	0018      	movs	r0, r3
   20352:	4b06      	ldr	r3, [pc, #24]	; (2036c <vTaskPlaceOnEventList+0x3c>)
   20354:	4798      	blx	r3

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
   20356:	683b      	ldr	r3, [r7, #0]
   20358:	2101      	movs	r1, #1
   2035a:	0018      	movs	r0, r3
   2035c:	4b04      	ldr	r3, [pc, #16]	; (20370 <vTaskPlaceOnEventList+0x40>)
   2035e:	4798      	blx	r3
}
   20360:	46c0      	nop			; (mov r8, r8)
   20362:	46bd      	mov	sp, r7
   20364:	b002      	add	sp, #8
   20366:	bd80      	pop	{r7, pc}
   20368:	200002b8 	.word	0x200002b8
   2036c:	0001ed9b 	.word	0x0001ed9b
   20370:	00020b89 	.word	0x00020b89

00020374 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
   20374:	b580      	push	{r7, lr}
   20376:	b084      	sub	sp, #16
   20378:	af00      	add	r7, sp, #0
   2037a:	60f8      	str	r0, [r7, #12]
   2037c:	60b9      	str	r1, [r7, #8]
   2037e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
   20380:	68fb      	ldr	r3, [r7, #12]
   20382:	2b00      	cmp	r3, #0
   20384:	d101      	bne.n	2038a <vTaskPlaceOnEventListRestricted+0x16>
   20386:	b672      	cpsid	i
   20388:	e7fe      	b.n	20388 <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
   2038a:	4b0c      	ldr	r3, [pc, #48]	; (203bc <vTaskPlaceOnEventListRestricted+0x48>)
   2038c:	681b      	ldr	r3, [r3, #0]
   2038e:	3318      	adds	r3, #24
   20390:	001a      	movs	r2, r3
   20392:	68fb      	ldr	r3, [r7, #12]
   20394:	0011      	movs	r1, r2
   20396:	0018      	movs	r0, r3
   20398:	4b09      	ldr	r3, [pc, #36]	; (203c0 <vTaskPlaceOnEventListRestricted+0x4c>)
   2039a:	4798      	blx	r3

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
   2039c:	687b      	ldr	r3, [r7, #4]
   2039e:	2b00      	cmp	r3, #0
   203a0:	d002      	beq.n	203a8 <vTaskPlaceOnEventListRestricted+0x34>
		{
			xTicksToWait = portMAX_DELAY;
   203a2:	2301      	movs	r3, #1
   203a4:	425b      	negs	r3, r3
   203a6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
   203a8:	687a      	ldr	r2, [r7, #4]
   203aa:	68bb      	ldr	r3, [r7, #8]
   203ac:	0011      	movs	r1, r2
   203ae:	0018      	movs	r0, r3
   203b0:	4b04      	ldr	r3, [pc, #16]	; (203c4 <vTaskPlaceOnEventListRestricted+0x50>)
   203b2:	4798      	blx	r3
	}
   203b4:	46c0      	nop			; (mov r8, r8)
   203b6:	46bd      	mov	sp, r7
   203b8:	b004      	add	sp, #16
   203ba:	bd80      	pop	{r7, pc}
   203bc:	200002b8 	.word	0x200002b8
   203c0:	0001ed57 	.word	0x0001ed57
   203c4:	00020b89 	.word	0x00020b89

000203c8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
   203c8:	b580      	push	{r7, lr}
   203ca:	b084      	sub	sp, #16
   203cc:	af00      	add	r7, sp, #0
   203ce:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
   203d0:	687b      	ldr	r3, [r7, #4]
   203d2:	68db      	ldr	r3, [r3, #12]
   203d4:	68db      	ldr	r3, [r3, #12]
   203d6:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
   203d8:	68bb      	ldr	r3, [r7, #8]
   203da:	2b00      	cmp	r3, #0
   203dc:	d101      	bne.n	203e2 <xTaskRemoveFromEventList+0x1a>
   203de:	b672      	cpsid	i
   203e0:	e7fe      	b.n	203e0 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
   203e2:	68bb      	ldr	r3, [r7, #8]
   203e4:	3318      	adds	r3, #24
   203e6:	0018      	movs	r0, r3
   203e8:	4b1f      	ldr	r3, [pc, #124]	; (20468 <xTaskRemoveFromEventList+0xa0>)
   203ea:	4798      	blx	r3

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   203ec:	4b1f      	ldr	r3, [pc, #124]	; (2046c <xTaskRemoveFromEventList+0xa4>)
   203ee:	681b      	ldr	r3, [r3, #0]
   203f0:	2b00      	cmp	r3, #0
   203f2:	d11d      	bne.n	20430 <xTaskRemoveFromEventList+0x68>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
   203f4:	68bb      	ldr	r3, [r7, #8]
   203f6:	3304      	adds	r3, #4
   203f8:	0018      	movs	r0, r3
   203fa:	4b1b      	ldr	r3, [pc, #108]	; (20468 <xTaskRemoveFromEventList+0xa0>)
   203fc:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
   203fe:	68bb      	ldr	r3, [r7, #8]
   20400:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   20402:	4b1b      	ldr	r3, [pc, #108]	; (20470 <xTaskRemoveFromEventList+0xa8>)
   20404:	681b      	ldr	r3, [r3, #0]
   20406:	429a      	cmp	r2, r3
   20408:	d903      	bls.n	20412 <xTaskRemoveFromEventList+0x4a>
   2040a:	68bb      	ldr	r3, [r7, #8]
   2040c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2040e:	4b18      	ldr	r3, [pc, #96]	; (20470 <xTaskRemoveFromEventList+0xa8>)
   20410:	601a      	str	r2, [r3, #0]
   20412:	68bb      	ldr	r3, [r7, #8]
   20414:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   20416:	0013      	movs	r3, r2
   20418:	009b      	lsls	r3, r3, #2
   2041a:	189b      	adds	r3, r3, r2
   2041c:	009b      	lsls	r3, r3, #2
   2041e:	4a15      	ldr	r2, [pc, #84]	; (20474 <xTaskRemoveFromEventList+0xac>)
   20420:	189a      	adds	r2, r3, r2
   20422:	68bb      	ldr	r3, [r7, #8]
   20424:	3304      	adds	r3, #4
   20426:	0019      	movs	r1, r3
   20428:	0010      	movs	r0, r2
   2042a:	4b13      	ldr	r3, [pc, #76]	; (20478 <xTaskRemoveFromEventList+0xb0>)
   2042c:	4798      	blx	r3
   2042e:	e007      	b.n	20440 <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
   20430:	68bb      	ldr	r3, [r7, #8]
   20432:	3318      	adds	r3, #24
   20434:	001a      	movs	r2, r3
   20436:	4b11      	ldr	r3, [pc, #68]	; (2047c <xTaskRemoveFromEventList+0xb4>)
   20438:	0011      	movs	r1, r2
   2043a:	0018      	movs	r0, r3
   2043c:	4b0e      	ldr	r3, [pc, #56]	; (20478 <xTaskRemoveFromEventList+0xb0>)
   2043e:	4798      	blx	r3
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
   20440:	68bb      	ldr	r3, [r7, #8]
   20442:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   20444:	4b0e      	ldr	r3, [pc, #56]	; (20480 <xTaskRemoveFromEventList+0xb8>)
   20446:	681b      	ldr	r3, [r3, #0]
   20448:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   2044a:	429a      	cmp	r2, r3
   2044c:	d905      	bls.n	2045a <xTaskRemoveFromEventList+0x92>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
   2044e:	2301      	movs	r3, #1
   20450:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
   20452:	4b0c      	ldr	r3, [pc, #48]	; (20484 <xTaskRemoveFromEventList+0xbc>)
   20454:	2201      	movs	r2, #1
   20456:	601a      	str	r2, [r3, #0]
   20458:	e001      	b.n	2045e <xTaskRemoveFromEventList+0x96>
	}
	else
	{
		xReturn = pdFALSE;
   2045a:	2300      	movs	r3, #0
   2045c:	60fb      	str	r3, [r7, #12]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
   2045e:	68fb      	ldr	r3, [r7, #12]
}
   20460:	0018      	movs	r0, r3
   20462:	46bd      	mov	sp, r7
   20464:	b004      	add	sp, #16
   20466:	bd80      	pop	{r7, pc}
   20468:	0001ee07 	.word	0x0001ee07
   2046c:	200003b8 	.word	0x200003b8
   20470:	20000398 	.word	0x20000398
   20474:	200002bc 	.word	0x200002bc
   20478:	0001ed57 	.word	0x0001ed57
   2047c:	20000350 	.word	0x20000350
   20480:	200002b8 	.word	0x200002b8
   20484:	200003a4 	.word	0x200003a4

00020488 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
   20488:	b580      	push	{r7, lr}
   2048a:	b082      	sub	sp, #8
   2048c:	af00      	add	r7, sp, #0
   2048e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
   20490:	4b05      	ldr	r3, [pc, #20]	; (204a8 <vTaskInternalSetTimeOutState+0x20>)
   20492:	681a      	ldr	r2, [r3, #0]
   20494:	687b      	ldr	r3, [r7, #4]
   20496:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
   20498:	4b04      	ldr	r3, [pc, #16]	; (204ac <vTaskInternalSetTimeOutState+0x24>)
   2049a:	681a      	ldr	r2, [r3, #0]
   2049c:	687b      	ldr	r3, [r7, #4]
   2049e:	605a      	str	r2, [r3, #4]
}
   204a0:	46c0      	nop			; (mov r8, r8)
   204a2:	46bd      	mov	sp, r7
   204a4:	b002      	add	sp, #8
   204a6:	bd80      	pop	{r7, pc}
   204a8:	200003a8 	.word	0x200003a8
   204ac:	20000394 	.word	0x20000394

000204b0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
   204b0:	b580      	push	{r7, lr}
   204b2:	b086      	sub	sp, #24
   204b4:	af00      	add	r7, sp, #0
   204b6:	6078      	str	r0, [r7, #4]
   204b8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
   204ba:	687b      	ldr	r3, [r7, #4]
   204bc:	2b00      	cmp	r3, #0
   204be:	d101      	bne.n	204c4 <xTaskCheckForTimeOut+0x14>
   204c0:	b672      	cpsid	i
   204c2:	e7fe      	b.n	204c2 <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
   204c4:	683b      	ldr	r3, [r7, #0]
   204c6:	2b00      	cmp	r3, #0
   204c8:	d101      	bne.n	204ce <xTaskCheckForTimeOut+0x1e>
   204ca:	b672      	cpsid	i
   204cc:	e7fe      	b.n	204cc <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
   204ce:	4b1e      	ldr	r3, [pc, #120]	; (20548 <xTaskCheckForTimeOut+0x98>)
   204d0:	4798      	blx	r3
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
   204d2:	4b1e      	ldr	r3, [pc, #120]	; (2054c <xTaskCheckForTimeOut+0x9c>)
   204d4:	681b      	ldr	r3, [r3, #0]
   204d6:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
   204d8:	687b      	ldr	r3, [r7, #4]
   204da:	685b      	ldr	r3, [r3, #4]
   204dc:	693a      	ldr	r2, [r7, #16]
   204de:	1ad3      	subs	r3, r2, r3
   204e0:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
   204e2:	683b      	ldr	r3, [r7, #0]
   204e4:	681b      	ldr	r3, [r3, #0]
   204e6:	3301      	adds	r3, #1
   204e8:	d102      	bne.n	204f0 <xTaskCheckForTimeOut+0x40>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
   204ea:	2300      	movs	r3, #0
   204ec:	617b      	str	r3, [r7, #20]
   204ee:	e024      	b.n	2053a <xTaskCheckForTimeOut+0x8a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
   204f0:	687b      	ldr	r3, [r7, #4]
   204f2:	681a      	ldr	r2, [r3, #0]
   204f4:	4b16      	ldr	r3, [pc, #88]	; (20550 <xTaskCheckForTimeOut+0xa0>)
   204f6:	681b      	ldr	r3, [r3, #0]
   204f8:	429a      	cmp	r2, r3
   204fa:	d007      	beq.n	2050c <xTaskCheckForTimeOut+0x5c>
   204fc:	687b      	ldr	r3, [r7, #4]
   204fe:	685a      	ldr	r2, [r3, #4]
   20500:	693b      	ldr	r3, [r7, #16]
   20502:	429a      	cmp	r2, r3
   20504:	d802      	bhi.n	2050c <xTaskCheckForTimeOut+0x5c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
   20506:	2301      	movs	r3, #1
   20508:	617b      	str	r3, [r7, #20]
   2050a:	e016      	b.n	2053a <xTaskCheckForTimeOut+0x8a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
   2050c:	683b      	ldr	r3, [r7, #0]
   2050e:	681a      	ldr	r2, [r3, #0]
   20510:	68fb      	ldr	r3, [r7, #12]
   20512:	429a      	cmp	r2, r3
   20514:	d90c      	bls.n	20530 <xTaskCheckForTimeOut+0x80>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
   20516:	683b      	ldr	r3, [r7, #0]
   20518:	681a      	ldr	r2, [r3, #0]
   2051a:	68fb      	ldr	r3, [r7, #12]
   2051c:	1ad2      	subs	r2, r2, r3
   2051e:	683b      	ldr	r3, [r7, #0]
   20520:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
   20522:	687b      	ldr	r3, [r7, #4]
   20524:	0018      	movs	r0, r3
   20526:	4b0b      	ldr	r3, [pc, #44]	; (20554 <xTaskCheckForTimeOut+0xa4>)
   20528:	4798      	blx	r3
			xReturn = pdFALSE;
   2052a:	2300      	movs	r3, #0
   2052c:	617b      	str	r3, [r7, #20]
   2052e:	e004      	b.n	2053a <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			*pxTicksToWait = 0;
   20530:	683b      	ldr	r3, [r7, #0]
   20532:	2200      	movs	r2, #0
   20534:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
   20536:	2301      	movs	r3, #1
   20538:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
   2053a:	4b07      	ldr	r3, [pc, #28]	; (20558 <xTaskCheckForTimeOut+0xa8>)
   2053c:	4798      	blx	r3

	return xReturn;
   2053e:	697b      	ldr	r3, [r7, #20]
}
   20540:	0018      	movs	r0, r3
   20542:	46bd      	mov	sp, r7
   20544:	b006      	add	sp, #24
   20546:	bd80      	pop	{r7, pc}
   20548:	0001eb61 	.word	0x0001eb61
   2054c:	20000394 	.word	0x20000394
   20550:	200003a8 	.word	0x200003a8
   20554:	00020489 	.word	0x00020489
   20558:	0001eb85 	.word	0x0001eb85

0002055c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
   2055c:	b580      	push	{r7, lr}
   2055e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
   20560:	4b02      	ldr	r3, [pc, #8]	; (2056c <vTaskMissedYield+0x10>)
   20562:	2201      	movs	r2, #1
   20564:	601a      	str	r2, [r3, #0]
}
   20566:	46c0      	nop			; (mov r8, r8)
   20568:	46bd      	mov	sp, r7
   2056a:	bd80      	pop	{r7, pc}
   2056c:	200003a4 	.word	0x200003a4

00020570 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
   20570:	b580      	push	{r7, lr}
   20572:	b082      	sub	sp, #8
   20574:	af00      	add	r7, sp, #0
   20576:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
   20578:	4b04      	ldr	r3, [pc, #16]	; (2058c <prvIdleTask+0x1c>)
   2057a:	4798      	blx	r3

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
   2057c:	4b04      	ldr	r3, [pc, #16]	; (20590 <prvIdleTask+0x20>)
   2057e:	681b      	ldr	r3, [r3, #0]
   20580:	2b01      	cmp	r3, #1
   20582:	d9f9      	bls.n	20578 <prvIdleTask+0x8>
			{
				taskYIELD();
   20584:	4b03      	ldr	r3, [pc, #12]	; (20594 <prvIdleTask+0x24>)
   20586:	4798      	blx	r3
		prvCheckTasksWaitingTermination();
   20588:	e7f6      	b.n	20578 <prvIdleTask+0x8>
   2058a:	46c0      	nop			; (mov r8, r8)
   2058c:	00020625 	.word	0x00020625
   20590:	200002bc 	.word	0x200002bc
   20594:	0001eb41 	.word	0x0001eb41

00020598 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
   20598:	b580      	push	{r7, lr}
   2059a:	b082      	sub	sp, #8
   2059c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
   2059e:	2300      	movs	r3, #0
   205a0:	607b      	str	r3, [r7, #4]
   205a2:	e00c      	b.n	205be <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
   205a4:	687a      	ldr	r2, [r7, #4]
   205a6:	0013      	movs	r3, r2
   205a8:	009b      	lsls	r3, r3, #2
   205aa:	189b      	adds	r3, r3, r2
   205ac:	009b      	lsls	r3, r3, #2
   205ae:	4a14      	ldr	r2, [pc, #80]	; (20600 <prvInitialiseTaskLists+0x68>)
   205b0:	189b      	adds	r3, r3, r2
   205b2:	0018      	movs	r0, r3
   205b4:	4b13      	ldr	r3, [pc, #76]	; (20604 <prvInitialiseTaskLists+0x6c>)
   205b6:	4798      	blx	r3
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
   205b8:	687b      	ldr	r3, [r7, #4]
   205ba:	3301      	adds	r3, #1
   205bc:	607b      	str	r3, [r7, #4]
   205be:	687b      	ldr	r3, [r7, #4]
   205c0:	2b04      	cmp	r3, #4
   205c2:	d9ef      	bls.n	205a4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
   205c4:	4b10      	ldr	r3, [pc, #64]	; (20608 <prvInitialiseTaskLists+0x70>)
   205c6:	0018      	movs	r0, r3
   205c8:	4b0e      	ldr	r3, [pc, #56]	; (20604 <prvInitialiseTaskLists+0x6c>)
   205ca:	4798      	blx	r3
	vListInitialise( &xDelayedTaskList2 );
   205cc:	4b0f      	ldr	r3, [pc, #60]	; (2060c <prvInitialiseTaskLists+0x74>)
   205ce:	0018      	movs	r0, r3
   205d0:	4b0c      	ldr	r3, [pc, #48]	; (20604 <prvInitialiseTaskLists+0x6c>)
   205d2:	4798      	blx	r3
	vListInitialise( &xPendingReadyList );
   205d4:	4b0e      	ldr	r3, [pc, #56]	; (20610 <prvInitialiseTaskLists+0x78>)
   205d6:	0018      	movs	r0, r3
   205d8:	4b0a      	ldr	r3, [pc, #40]	; (20604 <prvInitialiseTaskLists+0x6c>)
   205da:	4798      	blx	r3

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
   205dc:	4b0d      	ldr	r3, [pc, #52]	; (20614 <prvInitialiseTaskLists+0x7c>)
   205de:	0018      	movs	r0, r3
   205e0:	4b08      	ldr	r3, [pc, #32]	; (20604 <prvInitialiseTaskLists+0x6c>)
   205e2:	4798      	blx	r3
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
   205e4:	4b0c      	ldr	r3, [pc, #48]	; (20618 <prvInitialiseTaskLists+0x80>)
   205e6:	0018      	movs	r0, r3
   205e8:	4b06      	ldr	r3, [pc, #24]	; (20604 <prvInitialiseTaskLists+0x6c>)
   205ea:	4798      	blx	r3
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
   205ec:	4b0b      	ldr	r3, [pc, #44]	; (2061c <prvInitialiseTaskLists+0x84>)
   205ee:	4a06      	ldr	r2, [pc, #24]	; (20608 <prvInitialiseTaskLists+0x70>)
   205f0:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
   205f2:	4b0b      	ldr	r3, [pc, #44]	; (20620 <prvInitialiseTaskLists+0x88>)
   205f4:	4a05      	ldr	r2, [pc, #20]	; (2060c <prvInitialiseTaskLists+0x74>)
   205f6:	601a      	str	r2, [r3, #0]
}
   205f8:	46c0      	nop			; (mov r8, r8)
   205fa:	46bd      	mov	sp, r7
   205fc:	b002      	add	sp, #8
   205fe:	bd80      	pop	{r7, pc}
   20600:	200002bc 	.word	0x200002bc
   20604:	0001ed05 	.word	0x0001ed05
   20608:	20000320 	.word	0x20000320
   2060c:	20000334 	.word	0x20000334
   20610:	20000350 	.word	0x20000350
   20614:	20000364 	.word	0x20000364
   20618:	2000037c 	.word	0x2000037c
   2061c:	20000348 	.word	0x20000348
   20620:	2000034c 	.word	0x2000034c

00020624 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
   20624:	b580      	push	{r7, lr}
   20626:	b082      	sub	sp, #8
   20628:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
   2062a:	e01a      	b.n	20662 <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
   2062c:	4b11      	ldr	r3, [pc, #68]	; (20674 <prvCheckTasksWaitingTermination+0x50>)
   2062e:	4798      	blx	r3
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
   20630:	4b11      	ldr	r3, [pc, #68]	; (20678 <prvCheckTasksWaitingTermination+0x54>)
   20632:	68db      	ldr	r3, [r3, #12]
   20634:	68db      	ldr	r3, [r3, #12]
   20636:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   20638:	687b      	ldr	r3, [r7, #4]
   2063a:	3304      	adds	r3, #4
   2063c:	0018      	movs	r0, r3
   2063e:	4b0f      	ldr	r3, [pc, #60]	; (2067c <prvCheckTasksWaitingTermination+0x58>)
   20640:	4798      	blx	r3
				--uxCurrentNumberOfTasks;
   20642:	4b0f      	ldr	r3, [pc, #60]	; (20680 <prvCheckTasksWaitingTermination+0x5c>)
   20644:	681b      	ldr	r3, [r3, #0]
   20646:	1e5a      	subs	r2, r3, #1
   20648:	4b0d      	ldr	r3, [pc, #52]	; (20680 <prvCheckTasksWaitingTermination+0x5c>)
   2064a:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
   2064c:	4b0d      	ldr	r3, [pc, #52]	; (20684 <prvCheckTasksWaitingTermination+0x60>)
   2064e:	681b      	ldr	r3, [r3, #0]
   20650:	1e5a      	subs	r2, r3, #1
   20652:	4b0c      	ldr	r3, [pc, #48]	; (20684 <prvCheckTasksWaitingTermination+0x60>)
   20654:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
   20656:	4b0c      	ldr	r3, [pc, #48]	; (20688 <prvCheckTasksWaitingTermination+0x64>)
   20658:	4798      	blx	r3

			prvDeleteTCB( pxTCB );
   2065a:	687b      	ldr	r3, [r7, #4]
   2065c:	0018      	movs	r0, r3
   2065e:	4b0b      	ldr	r3, [pc, #44]	; (2068c <prvCheckTasksWaitingTermination+0x68>)
   20660:	4798      	blx	r3
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
   20662:	4b08      	ldr	r3, [pc, #32]	; (20684 <prvCheckTasksWaitingTermination+0x60>)
   20664:	681b      	ldr	r3, [r3, #0]
   20666:	2b00      	cmp	r3, #0
   20668:	d1e0      	bne.n	2062c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
   2066a:	46c0      	nop			; (mov r8, r8)
   2066c:	46bd      	mov	sp, r7
   2066e:	b002      	add	sp, #8
   20670:	bd80      	pop	{r7, pc}
   20672:	46c0      	nop			; (mov r8, r8)
   20674:	0001eb61 	.word	0x0001eb61
   20678:	20000364 	.word	0x20000364
   2067c:	0001ee07 	.word	0x0001ee07
   20680:	20000390 	.word	0x20000390
   20684:	20000378 	.word	0x20000378
   20688:	0001eb85 	.word	0x0001eb85
   2068c:	00020691 	.word	0x00020691

00020690 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
   20690:	b580      	push	{r7, lr}
   20692:	b082      	sub	sp, #8
   20694:	af00      	add	r7, sp, #0
   20696:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
   20698:	687b      	ldr	r3, [r7, #4]
   2069a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   2069c:	0018      	movs	r0, r3
   2069e:	4b05      	ldr	r3, [pc, #20]	; (206b4 <prvDeleteTCB+0x24>)
   206a0:	4798      	blx	r3
			vPortFree( pxTCB );
   206a2:	687b      	ldr	r3, [r7, #4]
   206a4:	0018      	movs	r0, r3
   206a6:	4b03      	ldr	r3, [pc, #12]	; (206b4 <prvDeleteTCB+0x24>)
   206a8:	4798      	blx	r3
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
   206aa:	46c0      	nop			; (mov r8, r8)
   206ac:	46bd      	mov	sp, r7
   206ae:	b002      	add	sp, #8
   206b0:	bd80      	pop	{r7, pc}
   206b2:	46c0      	nop			; (mov r8, r8)
   206b4:	0001ecd1 	.word	0x0001ecd1

000206b8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
   206b8:	b580      	push	{r7, lr}
   206ba:	b082      	sub	sp, #8
   206bc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   206be:	4b0e      	ldr	r3, [pc, #56]	; (206f8 <prvResetNextTaskUnblockTime+0x40>)
   206c0:	681b      	ldr	r3, [r3, #0]
   206c2:	681b      	ldr	r3, [r3, #0]
   206c4:	2b00      	cmp	r3, #0
   206c6:	d101      	bne.n	206cc <prvResetNextTaskUnblockTime+0x14>
   206c8:	2301      	movs	r3, #1
   206ca:	e000      	b.n	206ce <prvResetNextTaskUnblockTime+0x16>
   206cc:	2300      	movs	r3, #0
   206ce:	2b00      	cmp	r3, #0
   206d0:	d004      	beq.n	206dc <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
   206d2:	4b0a      	ldr	r3, [pc, #40]	; (206fc <prvResetNextTaskUnblockTime+0x44>)
   206d4:	2201      	movs	r2, #1
   206d6:	4252      	negs	r2, r2
   206d8:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
   206da:	e008      	b.n	206ee <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   206dc:	4b06      	ldr	r3, [pc, #24]	; (206f8 <prvResetNextTaskUnblockTime+0x40>)
   206de:	681b      	ldr	r3, [r3, #0]
   206e0:	68db      	ldr	r3, [r3, #12]
   206e2:	68db      	ldr	r3, [r3, #12]
   206e4:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
   206e6:	687b      	ldr	r3, [r7, #4]
   206e8:	685a      	ldr	r2, [r3, #4]
   206ea:	4b04      	ldr	r3, [pc, #16]	; (206fc <prvResetNextTaskUnblockTime+0x44>)
   206ec:	601a      	str	r2, [r3, #0]
}
   206ee:	46c0      	nop			; (mov r8, r8)
   206f0:	46bd      	mov	sp, r7
   206f2:	b002      	add	sp, #8
   206f4:	bd80      	pop	{r7, pc}
   206f6:	46c0      	nop			; (mov r8, r8)
   206f8:	20000348 	.word	0x20000348
   206fc:	200003b0 	.word	0x200003b0

00020700 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
   20700:	b580      	push	{r7, lr}
   20702:	b082      	sub	sp, #8
   20704:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
   20706:	4b0a      	ldr	r3, [pc, #40]	; (20730 <xTaskGetSchedulerState+0x30>)
   20708:	681b      	ldr	r3, [r3, #0]
   2070a:	2b00      	cmp	r3, #0
   2070c:	d102      	bne.n	20714 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
   2070e:	2301      	movs	r3, #1
   20710:	607b      	str	r3, [r7, #4]
   20712:	e008      	b.n	20726 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   20714:	4b07      	ldr	r3, [pc, #28]	; (20734 <xTaskGetSchedulerState+0x34>)
   20716:	681b      	ldr	r3, [r3, #0]
   20718:	2b00      	cmp	r3, #0
   2071a:	d102      	bne.n	20722 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
   2071c:	2302      	movs	r3, #2
   2071e:	607b      	str	r3, [r7, #4]
   20720:	e001      	b.n	20726 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
   20722:	2300      	movs	r3, #0
   20724:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
   20726:	687b      	ldr	r3, [r7, #4]
	}
   20728:	0018      	movs	r0, r3
   2072a:	46bd      	mov	sp, r7
   2072c:	b002      	add	sp, #8
   2072e:	bd80      	pop	{r7, pc}
   20730:	2000039c 	.word	0x2000039c
   20734:	200003b8 	.word	0x200003b8

00020738 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
   20738:	b580      	push	{r7, lr}
   2073a:	b084      	sub	sp, #16
   2073c:	af00      	add	r7, sp, #0
   2073e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
   20740:	687b      	ldr	r3, [r7, #4]
   20742:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
   20744:	2300      	movs	r3, #0
   20746:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
   20748:	687b      	ldr	r3, [r7, #4]
   2074a:	2b00      	cmp	r3, #0
   2074c:	d056      	beq.n	207fc <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
   2074e:	68bb      	ldr	r3, [r7, #8]
   20750:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   20752:	4b2d      	ldr	r3, [pc, #180]	; (20808 <xTaskPriorityInherit+0xd0>)
   20754:	681b      	ldr	r3, [r3, #0]
   20756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   20758:	429a      	cmp	r2, r3
   2075a:	d246      	bcs.n	207ea <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
   2075c:	68bb      	ldr	r3, [r7, #8]
   2075e:	699b      	ldr	r3, [r3, #24]
   20760:	2b00      	cmp	r3, #0
   20762:	db06      	blt.n	20772 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   20764:	4b28      	ldr	r3, [pc, #160]	; (20808 <xTaskPriorityInherit+0xd0>)
   20766:	681b      	ldr	r3, [r3, #0]
   20768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   2076a:	2205      	movs	r2, #5
   2076c:	1ad2      	subs	r2, r2, r3
   2076e:	68bb      	ldr	r3, [r7, #8]
   20770:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
   20772:	68bb      	ldr	r3, [r7, #8]
   20774:	6959      	ldr	r1, [r3, #20]
   20776:	68bb      	ldr	r3, [r7, #8]
   20778:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2077a:	0013      	movs	r3, r2
   2077c:	009b      	lsls	r3, r3, #2
   2077e:	189b      	adds	r3, r3, r2
   20780:	009b      	lsls	r3, r3, #2
   20782:	4a22      	ldr	r2, [pc, #136]	; (2080c <xTaskPriorityInherit+0xd4>)
   20784:	189b      	adds	r3, r3, r2
   20786:	4299      	cmp	r1, r3
   20788:	d101      	bne.n	2078e <xTaskPriorityInherit+0x56>
   2078a:	2301      	movs	r3, #1
   2078c:	e000      	b.n	20790 <xTaskPriorityInherit+0x58>
   2078e:	2300      	movs	r3, #0
   20790:	2b00      	cmp	r3, #0
   20792:	d022      	beq.n	207da <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   20794:	68bb      	ldr	r3, [r7, #8]
   20796:	3304      	adds	r3, #4
   20798:	0018      	movs	r0, r3
   2079a:	4b1d      	ldr	r3, [pc, #116]	; (20810 <xTaskPriorityInherit+0xd8>)
   2079c:	4798      	blx	r3
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
   2079e:	4b1a      	ldr	r3, [pc, #104]	; (20808 <xTaskPriorityInherit+0xd0>)
   207a0:	681b      	ldr	r3, [r3, #0]
   207a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   207a4:	68bb      	ldr	r3, [r7, #8]
   207a6:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
   207a8:	68bb      	ldr	r3, [r7, #8]
   207aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   207ac:	4b19      	ldr	r3, [pc, #100]	; (20814 <xTaskPriorityInherit+0xdc>)
   207ae:	681b      	ldr	r3, [r3, #0]
   207b0:	429a      	cmp	r2, r3
   207b2:	d903      	bls.n	207bc <xTaskPriorityInherit+0x84>
   207b4:	68bb      	ldr	r3, [r7, #8]
   207b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   207b8:	4b16      	ldr	r3, [pc, #88]	; (20814 <xTaskPriorityInherit+0xdc>)
   207ba:	601a      	str	r2, [r3, #0]
   207bc:	68bb      	ldr	r3, [r7, #8]
   207be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   207c0:	0013      	movs	r3, r2
   207c2:	009b      	lsls	r3, r3, #2
   207c4:	189b      	adds	r3, r3, r2
   207c6:	009b      	lsls	r3, r3, #2
   207c8:	4a10      	ldr	r2, [pc, #64]	; (2080c <xTaskPriorityInherit+0xd4>)
   207ca:	189a      	adds	r2, r3, r2
   207cc:	68bb      	ldr	r3, [r7, #8]
   207ce:	3304      	adds	r3, #4
   207d0:	0019      	movs	r1, r3
   207d2:	0010      	movs	r0, r2
   207d4:	4b10      	ldr	r3, [pc, #64]	; (20818 <xTaskPriorityInherit+0xe0>)
   207d6:	4798      	blx	r3
   207d8:	e004      	b.n	207e4 <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
   207da:	4b0b      	ldr	r3, [pc, #44]	; (20808 <xTaskPriorityInherit+0xd0>)
   207dc:	681b      	ldr	r3, [r3, #0]
   207de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   207e0:	68bb      	ldr	r3, [r7, #8]
   207e2:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
   207e4:	2301      	movs	r3, #1
   207e6:	60fb      	str	r3, [r7, #12]
   207e8:	e008      	b.n	207fc <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
   207ea:	68bb      	ldr	r3, [r7, #8]
   207ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   207ee:	4b06      	ldr	r3, [pc, #24]	; (20808 <xTaskPriorityInherit+0xd0>)
   207f0:	681b      	ldr	r3, [r3, #0]
   207f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   207f4:	429a      	cmp	r2, r3
   207f6:	d201      	bcs.n	207fc <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
   207f8:	2301      	movs	r3, #1
   207fa:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
   207fc:	68fb      	ldr	r3, [r7, #12]
	}
   207fe:	0018      	movs	r0, r3
   20800:	46bd      	mov	sp, r7
   20802:	b004      	add	sp, #16
   20804:	bd80      	pop	{r7, pc}
   20806:	46c0      	nop			; (mov r8, r8)
   20808:	200002b8 	.word	0x200002b8
   2080c:	200002bc 	.word	0x200002bc
   20810:	0001ee07 	.word	0x0001ee07
   20814:	20000398 	.word	0x20000398
   20818:	0001ed57 	.word	0x0001ed57

0002081c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
   2081c:	b580      	push	{r7, lr}
   2081e:	b084      	sub	sp, #16
   20820:	af00      	add	r7, sp, #0
   20822:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
   20824:	687b      	ldr	r3, [r7, #4]
   20826:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
   20828:	2300      	movs	r3, #0
   2082a:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
   2082c:	687b      	ldr	r3, [r7, #4]
   2082e:	2b00      	cmp	r3, #0
   20830:	d044      	beq.n	208bc <xTaskPriorityDisinherit+0xa0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
   20832:	4b25      	ldr	r3, [pc, #148]	; (208c8 <xTaskPriorityDisinherit+0xac>)
   20834:	681b      	ldr	r3, [r3, #0]
   20836:	68ba      	ldr	r2, [r7, #8]
   20838:	429a      	cmp	r2, r3
   2083a:	d001      	beq.n	20840 <xTaskPriorityDisinherit+0x24>
   2083c:	b672      	cpsid	i
   2083e:	e7fe      	b.n	2083e <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
   20840:	68bb      	ldr	r3, [r7, #8]
   20842:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   20844:	2b00      	cmp	r3, #0
   20846:	d101      	bne.n	2084c <xTaskPriorityDisinherit+0x30>
   20848:	b672      	cpsid	i
   2084a:	e7fe      	b.n	2084a <xTaskPriorityDisinherit+0x2e>
			( pxTCB->uxMutexesHeld )--;
   2084c:	68bb      	ldr	r3, [r7, #8]
   2084e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   20850:	1e5a      	subs	r2, r3, #1
   20852:	68bb      	ldr	r3, [r7, #8]
   20854:	645a      	str	r2, [r3, #68]	; 0x44

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
   20856:	68bb      	ldr	r3, [r7, #8]
   20858:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2085a:	68bb      	ldr	r3, [r7, #8]
   2085c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   2085e:	429a      	cmp	r2, r3
   20860:	d02c      	beq.n	208bc <xTaskPriorityDisinherit+0xa0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
   20862:	68bb      	ldr	r3, [r7, #8]
   20864:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   20866:	2b00      	cmp	r3, #0
   20868:	d128      	bne.n	208bc <xTaskPriorityDisinherit+0xa0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   2086a:	68bb      	ldr	r3, [r7, #8]
   2086c:	3304      	adds	r3, #4
   2086e:	0018      	movs	r0, r3
   20870:	4b16      	ldr	r3, [pc, #88]	; (208cc <xTaskPriorityDisinherit+0xb0>)
   20872:	4798      	blx	r3
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
   20874:	68bb      	ldr	r3, [r7, #8]
   20876:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   20878:	68bb      	ldr	r3, [r7, #8]
   2087a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   2087c:	68bb      	ldr	r3, [r7, #8]
   2087e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   20880:	2205      	movs	r2, #5
   20882:	1ad2      	subs	r2, r2, r3
   20884:	68bb      	ldr	r3, [r7, #8]
   20886:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
   20888:	68bb      	ldr	r3, [r7, #8]
   2088a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2088c:	4b10      	ldr	r3, [pc, #64]	; (208d0 <xTaskPriorityDisinherit+0xb4>)
   2088e:	681b      	ldr	r3, [r3, #0]
   20890:	429a      	cmp	r2, r3
   20892:	d903      	bls.n	2089c <xTaskPriorityDisinherit+0x80>
   20894:	68bb      	ldr	r3, [r7, #8]
   20896:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   20898:	4b0d      	ldr	r3, [pc, #52]	; (208d0 <xTaskPriorityDisinherit+0xb4>)
   2089a:	601a      	str	r2, [r3, #0]
   2089c:	68bb      	ldr	r3, [r7, #8]
   2089e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   208a0:	0013      	movs	r3, r2
   208a2:	009b      	lsls	r3, r3, #2
   208a4:	189b      	adds	r3, r3, r2
   208a6:	009b      	lsls	r3, r3, #2
   208a8:	4a0a      	ldr	r2, [pc, #40]	; (208d4 <xTaskPriorityDisinherit+0xb8>)
   208aa:	189a      	adds	r2, r3, r2
   208ac:	68bb      	ldr	r3, [r7, #8]
   208ae:	3304      	adds	r3, #4
   208b0:	0019      	movs	r1, r3
   208b2:	0010      	movs	r0, r2
   208b4:	4b08      	ldr	r3, [pc, #32]	; (208d8 <xTaskPriorityDisinherit+0xbc>)
   208b6:	4798      	blx	r3
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
   208b8:	2301      	movs	r3, #1
   208ba:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
   208bc:	68fb      	ldr	r3, [r7, #12]
	}
   208be:	0018      	movs	r0, r3
   208c0:	46bd      	mov	sp, r7
   208c2:	b004      	add	sp, #16
   208c4:	bd80      	pop	{r7, pc}
   208c6:	46c0      	nop			; (mov r8, r8)
   208c8:	200002b8 	.word	0x200002b8
   208cc:	0001ee07 	.word	0x0001ee07
   208d0:	20000398 	.word	0x20000398
   208d4:	200002bc 	.word	0x200002bc
   208d8:	0001ed57 	.word	0x0001ed57

000208dc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
   208dc:	b580      	push	{r7, lr}
   208de:	b086      	sub	sp, #24
   208e0:	af00      	add	r7, sp, #0
   208e2:	6078      	str	r0, [r7, #4]
   208e4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
   208e6:	687b      	ldr	r3, [r7, #4]
   208e8:	613b      	str	r3, [r7, #16]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
   208ea:	2301      	movs	r3, #1
   208ec:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
   208ee:	687b      	ldr	r3, [r7, #4]
   208f0:	2b00      	cmp	r3, #0
   208f2:	d05d      	beq.n	209b0 <vTaskPriorityDisinheritAfterTimeout+0xd4>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
   208f4:	693b      	ldr	r3, [r7, #16]
   208f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   208f8:	2b00      	cmp	r3, #0
   208fa:	d101      	bne.n	20900 <vTaskPriorityDisinheritAfterTimeout+0x24>
   208fc:	b672      	cpsid	i
   208fe:	e7fe      	b.n	208fe <vTaskPriorityDisinheritAfterTimeout+0x22>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
   20900:	693b      	ldr	r3, [r7, #16]
   20902:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   20904:	683b      	ldr	r3, [r7, #0]
   20906:	429a      	cmp	r2, r3
   20908:	d202      	bcs.n	20910 <vTaskPriorityDisinheritAfterTimeout+0x34>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
   2090a:	683b      	ldr	r3, [r7, #0]
   2090c:	617b      	str	r3, [r7, #20]
   2090e:	e002      	b.n	20916 <vTaskPriorityDisinheritAfterTimeout+0x3a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
   20910:	693b      	ldr	r3, [r7, #16]
   20912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   20914:	617b      	str	r3, [r7, #20]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
   20916:	693b      	ldr	r3, [r7, #16]
   20918:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2091a:	697b      	ldr	r3, [r7, #20]
   2091c:	429a      	cmp	r2, r3
   2091e:	d047      	beq.n	209b0 <vTaskPriorityDisinheritAfterTimeout+0xd4>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
   20920:	693b      	ldr	r3, [r7, #16]
   20922:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   20924:	68fb      	ldr	r3, [r7, #12]
   20926:	429a      	cmp	r2, r3
   20928:	d142      	bne.n	209b0 <vTaskPriorityDisinheritAfterTimeout+0xd4>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
   2092a:	4b23      	ldr	r3, [pc, #140]	; (209b8 <vTaskPriorityDisinheritAfterTimeout+0xdc>)
   2092c:	681b      	ldr	r3, [r3, #0]
   2092e:	693a      	ldr	r2, [r7, #16]
   20930:	429a      	cmp	r2, r3
   20932:	d101      	bne.n	20938 <vTaskPriorityDisinheritAfterTimeout+0x5c>
   20934:	b672      	cpsid	i
   20936:	e7fe      	b.n	20936 <vTaskPriorityDisinheritAfterTimeout+0x5a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
   20938:	693b      	ldr	r3, [r7, #16]
   2093a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   2093c:	60bb      	str	r3, [r7, #8]
					pxTCB->uxPriority = uxPriorityToUse;
   2093e:	693b      	ldr	r3, [r7, #16]
   20940:	697a      	ldr	r2, [r7, #20]
   20942:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
   20944:	693b      	ldr	r3, [r7, #16]
   20946:	699b      	ldr	r3, [r3, #24]
   20948:	2b00      	cmp	r3, #0
   2094a:	db04      	blt.n	20956 <vTaskPriorityDisinheritAfterTimeout+0x7a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   2094c:	697b      	ldr	r3, [r7, #20]
   2094e:	2205      	movs	r2, #5
   20950:	1ad2      	subs	r2, r2, r3
   20952:	693b      	ldr	r3, [r7, #16]
   20954:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
   20956:	693b      	ldr	r3, [r7, #16]
   20958:	6959      	ldr	r1, [r3, #20]
   2095a:	68ba      	ldr	r2, [r7, #8]
   2095c:	0013      	movs	r3, r2
   2095e:	009b      	lsls	r3, r3, #2
   20960:	189b      	adds	r3, r3, r2
   20962:	009b      	lsls	r3, r3, #2
   20964:	4a15      	ldr	r2, [pc, #84]	; (209bc <vTaskPriorityDisinheritAfterTimeout+0xe0>)
   20966:	189b      	adds	r3, r3, r2
   20968:	4299      	cmp	r1, r3
   2096a:	d101      	bne.n	20970 <vTaskPriorityDisinheritAfterTimeout+0x94>
   2096c:	2301      	movs	r3, #1
   2096e:	e000      	b.n	20972 <vTaskPriorityDisinheritAfterTimeout+0x96>
   20970:	2300      	movs	r3, #0
   20972:	2b00      	cmp	r3, #0
   20974:	d01c      	beq.n	209b0 <vTaskPriorityDisinheritAfterTimeout+0xd4>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   20976:	693b      	ldr	r3, [r7, #16]
   20978:	3304      	adds	r3, #4
   2097a:	0018      	movs	r0, r3
   2097c:	4b10      	ldr	r3, [pc, #64]	; (209c0 <vTaskPriorityDisinheritAfterTimeout+0xe4>)
   2097e:	4798      	blx	r3
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
   20980:	693b      	ldr	r3, [r7, #16]
   20982:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   20984:	4b0f      	ldr	r3, [pc, #60]	; (209c4 <vTaskPriorityDisinheritAfterTimeout+0xe8>)
   20986:	681b      	ldr	r3, [r3, #0]
   20988:	429a      	cmp	r2, r3
   2098a:	d903      	bls.n	20994 <vTaskPriorityDisinheritAfterTimeout+0xb8>
   2098c:	693b      	ldr	r3, [r7, #16]
   2098e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   20990:	4b0c      	ldr	r3, [pc, #48]	; (209c4 <vTaskPriorityDisinheritAfterTimeout+0xe8>)
   20992:	601a      	str	r2, [r3, #0]
   20994:	693b      	ldr	r3, [r7, #16]
   20996:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   20998:	0013      	movs	r3, r2
   2099a:	009b      	lsls	r3, r3, #2
   2099c:	189b      	adds	r3, r3, r2
   2099e:	009b      	lsls	r3, r3, #2
   209a0:	4a06      	ldr	r2, [pc, #24]	; (209bc <vTaskPriorityDisinheritAfterTimeout+0xe0>)
   209a2:	189a      	adds	r2, r3, r2
   209a4:	693b      	ldr	r3, [r7, #16]
   209a6:	3304      	adds	r3, #4
   209a8:	0019      	movs	r1, r3
   209aa:	0010      	movs	r0, r2
   209ac:	4b06      	ldr	r3, [pc, #24]	; (209c8 <vTaskPriorityDisinheritAfterTimeout+0xec>)
   209ae:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
   209b0:	46c0      	nop			; (mov r8, r8)
   209b2:	46bd      	mov	sp, r7
   209b4:	b006      	add	sp, #24
   209b6:	bd80      	pop	{r7, pc}
   209b8:	200002b8 	.word	0x200002b8
   209bc:	200002bc 	.word	0x200002bc
   209c0:	0001ee07 	.word	0x0001ee07
   209c4:	20000398 	.word	0x20000398
   209c8:	0001ed57 	.word	0x0001ed57

000209cc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
   209cc:	b580      	push	{r7, lr}
   209ce:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
   209d0:	4b06      	ldr	r3, [pc, #24]	; (209ec <pvTaskIncrementMutexHeldCount+0x20>)
   209d2:	681b      	ldr	r3, [r3, #0]
   209d4:	2b00      	cmp	r3, #0
   209d6:	d004      	beq.n	209e2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
   209d8:	4b04      	ldr	r3, [pc, #16]	; (209ec <pvTaskIncrementMutexHeldCount+0x20>)
   209da:	681b      	ldr	r3, [r3, #0]
   209dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   209de:	3201      	adds	r2, #1
   209e0:	645a      	str	r2, [r3, #68]	; 0x44
		}

		return pxCurrentTCB;
   209e2:	4b02      	ldr	r3, [pc, #8]	; (209ec <pvTaskIncrementMutexHeldCount+0x20>)
   209e4:	681b      	ldr	r3, [r3, #0]
	}
   209e6:	0018      	movs	r0, r3
   209e8:	46bd      	mov	sp, r7
   209ea:	bd80      	pop	{r7, pc}
   209ec:	200002b8 	.word	0x200002b8

000209f0 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
   209f0:	b580      	push	{r7, lr}
   209f2:	b084      	sub	sp, #16
   209f4:	af00      	add	r7, sp, #0
   209f6:	6078      	str	r0, [r7, #4]
   209f8:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
   209fa:	4b1d      	ldr	r3, [pc, #116]	; (20a70 <ulTaskNotifyTake+0x80>)
   209fc:	4798      	blx	r3
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
   209fe:	4b1d      	ldr	r3, [pc, #116]	; (20a74 <ulTaskNotifyTake+0x84>)
   20a00:	681b      	ldr	r3, [r3, #0]
   20a02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   20a04:	2b00      	cmp	r3, #0
   20a06:	d10e      	bne.n	20a26 <ulTaskNotifyTake+0x36>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
   20a08:	4b1a      	ldr	r3, [pc, #104]	; (20a74 <ulTaskNotifyTake+0x84>)
   20a0a:	681b      	ldr	r3, [r3, #0]
   20a0c:	224c      	movs	r2, #76	; 0x4c
   20a0e:	2101      	movs	r1, #1
   20a10:	5499      	strb	r1, [r3, r2]

				if( xTicksToWait > ( TickType_t ) 0 )
   20a12:	683b      	ldr	r3, [r7, #0]
   20a14:	2b00      	cmp	r3, #0
   20a16:	d006      	beq.n	20a26 <ulTaskNotifyTake+0x36>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
   20a18:	683b      	ldr	r3, [r7, #0]
   20a1a:	2101      	movs	r1, #1
   20a1c:	0018      	movs	r0, r3
   20a1e:	4b16      	ldr	r3, [pc, #88]	; (20a78 <ulTaskNotifyTake+0x88>)
   20a20:	4798      	blx	r3

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
   20a22:	4b16      	ldr	r3, [pc, #88]	; (20a7c <ulTaskNotifyTake+0x8c>)
   20a24:	4798      	blx	r3
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
   20a26:	4b16      	ldr	r3, [pc, #88]	; (20a80 <ulTaskNotifyTake+0x90>)
   20a28:	4798      	blx	r3

		taskENTER_CRITICAL();
   20a2a:	4b11      	ldr	r3, [pc, #68]	; (20a70 <ulTaskNotifyTake+0x80>)
   20a2c:	4798      	blx	r3
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
   20a2e:	4b11      	ldr	r3, [pc, #68]	; (20a74 <ulTaskNotifyTake+0x84>)
   20a30:	681b      	ldr	r3, [r3, #0]
   20a32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   20a34:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
   20a36:	68fb      	ldr	r3, [r7, #12]
   20a38:	2b00      	cmp	r3, #0
   20a3a:	d00c      	beq.n	20a56 <ulTaskNotifyTake+0x66>
			{
				if( xClearCountOnExit != pdFALSE )
   20a3c:	687b      	ldr	r3, [r7, #4]
   20a3e:	2b00      	cmp	r3, #0
   20a40:	d004      	beq.n	20a4c <ulTaskNotifyTake+0x5c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
   20a42:	4b0c      	ldr	r3, [pc, #48]	; (20a74 <ulTaskNotifyTake+0x84>)
   20a44:	681b      	ldr	r3, [r3, #0]
   20a46:	2200      	movs	r2, #0
   20a48:	649a      	str	r2, [r3, #72]	; 0x48
   20a4a:	e004      	b.n	20a56 <ulTaskNotifyTake+0x66>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
   20a4c:	4b09      	ldr	r3, [pc, #36]	; (20a74 <ulTaskNotifyTake+0x84>)
   20a4e:	681b      	ldr	r3, [r3, #0]
   20a50:	68fa      	ldr	r2, [r7, #12]
   20a52:	3a01      	subs	r2, #1
   20a54:	649a      	str	r2, [r3, #72]	; 0x48
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
   20a56:	4b07      	ldr	r3, [pc, #28]	; (20a74 <ulTaskNotifyTake+0x84>)
   20a58:	681b      	ldr	r3, [r3, #0]
   20a5a:	224c      	movs	r2, #76	; 0x4c
   20a5c:	2100      	movs	r1, #0
   20a5e:	5499      	strb	r1, [r3, r2]
		}
		taskEXIT_CRITICAL();
   20a60:	4b07      	ldr	r3, [pc, #28]	; (20a80 <ulTaskNotifyTake+0x90>)
   20a62:	4798      	blx	r3

		return ulReturn;
   20a64:	68fb      	ldr	r3, [r7, #12]
	}
   20a66:	0018      	movs	r0, r3
   20a68:	46bd      	mov	sp, r7
   20a6a:	b004      	add	sp, #16
   20a6c:	bd80      	pop	{r7, pc}
   20a6e:	46c0      	nop			; (mov r8, r8)
   20a70:	0001eb61 	.word	0x0001eb61
   20a74:	200002b8 	.word	0x200002b8
   20a78:	00020b89 	.word	0x00020b89
   20a7c:	0001eb41 	.word	0x0001eb41
   20a80:	0001eb85 	.word	0x0001eb85

00020a84 <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
   20a84:	b580      	push	{r7, lr}
   20a86:	b086      	sub	sp, #24
   20a88:	af00      	add	r7, sp, #0
   20a8a:	6078      	str	r0, [r7, #4]
   20a8c:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
   20a8e:	687b      	ldr	r3, [r7, #4]
   20a90:	2b00      	cmp	r3, #0
   20a92:	d101      	bne.n	20a98 <vTaskNotifyGiveFromISR+0x14>
   20a94:	b672      	cpsid	i
   20a96:	e7fe      	b.n	20a96 <vTaskNotifyGiveFromISR+0x12>
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		pxTCB = ( TCB_t * ) xTaskToNotify;
   20a98:	687b      	ldr	r3, [r7, #4]
   20a9a:	617b      	str	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   20a9c:	4b30      	ldr	r3, [pc, #192]	; (20b60 <vTaskNotifyGiveFromISR+0xdc>)
   20a9e:	4798      	blx	r3
   20aa0:	0003      	movs	r3, r0
   20aa2:	613b      	str	r3, [r7, #16]
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
   20aa4:	230f      	movs	r3, #15
   20aa6:	18fb      	adds	r3, r7, r3
   20aa8:	697a      	ldr	r2, [r7, #20]
   20aaa:	214c      	movs	r1, #76	; 0x4c
   20aac:	5c52      	ldrb	r2, [r2, r1]
   20aae:	701a      	strb	r2, [r3, #0]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
   20ab0:	697b      	ldr	r3, [r7, #20]
   20ab2:	224c      	movs	r2, #76	; 0x4c
   20ab4:	2102      	movs	r1, #2
   20ab6:	5499      	strb	r1, [r3, r2]

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
   20ab8:	697b      	ldr	r3, [r7, #20]
   20aba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   20abc:	1c5a      	adds	r2, r3, #1
   20abe:	697b      	ldr	r3, [r7, #20]
   20ac0:	649a      	str	r2, [r3, #72]	; 0x48

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
   20ac2:	230f      	movs	r3, #15
   20ac4:	18fb      	adds	r3, r7, r3
   20ac6:	781b      	ldrb	r3, [r3, #0]
   20ac8:	2b01      	cmp	r3, #1
   20aca:	d140      	bne.n	20b4e <vTaskNotifyGiveFromISR+0xca>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
   20acc:	697b      	ldr	r3, [r7, #20]
   20ace:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   20ad0:	2b00      	cmp	r3, #0
   20ad2:	d001      	beq.n	20ad8 <vTaskNotifyGiveFromISR+0x54>
   20ad4:	b672      	cpsid	i
   20ad6:	e7fe      	b.n	20ad6 <vTaskNotifyGiveFromISR+0x52>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   20ad8:	4b22      	ldr	r3, [pc, #136]	; (20b64 <vTaskNotifyGiveFromISR+0xe0>)
   20ada:	681b      	ldr	r3, [r3, #0]
   20adc:	2b00      	cmp	r3, #0
   20ade:	d11d      	bne.n	20b1c <vTaskNotifyGiveFromISR+0x98>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   20ae0:	697b      	ldr	r3, [r7, #20]
   20ae2:	3304      	adds	r3, #4
   20ae4:	0018      	movs	r0, r3
   20ae6:	4b20      	ldr	r3, [pc, #128]	; (20b68 <vTaskNotifyGiveFromISR+0xe4>)
   20ae8:	4798      	blx	r3
					prvAddTaskToReadyList( pxTCB );
   20aea:	697b      	ldr	r3, [r7, #20]
   20aec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   20aee:	4b1f      	ldr	r3, [pc, #124]	; (20b6c <vTaskNotifyGiveFromISR+0xe8>)
   20af0:	681b      	ldr	r3, [r3, #0]
   20af2:	429a      	cmp	r2, r3
   20af4:	d903      	bls.n	20afe <vTaskNotifyGiveFromISR+0x7a>
   20af6:	697b      	ldr	r3, [r7, #20]
   20af8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   20afa:	4b1c      	ldr	r3, [pc, #112]	; (20b6c <vTaskNotifyGiveFromISR+0xe8>)
   20afc:	601a      	str	r2, [r3, #0]
   20afe:	697b      	ldr	r3, [r7, #20]
   20b00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   20b02:	0013      	movs	r3, r2
   20b04:	009b      	lsls	r3, r3, #2
   20b06:	189b      	adds	r3, r3, r2
   20b08:	009b      	lsls	r3, r3, #2
   20b0a:	4a19      	ldr	r2, [pc, #100]	; (20b70 <vTaskNotifyGiveFromISR+0xec>)
   20b0c:	189a      	adds	r2, r3, r2
   20b0e:	697b      	ldr	r3, [r7, #20]
   20b10:	3304      	adds	r3, #4
   20b12:	0019      	movs	r1, r3
   20b14:	0010      	movs	r0, r2
   20b16:	4b17      	ldr	r3, [pc, #92]	; (20b74 <vTaskNotifyGiveFromISR+0xf0>)
   20b18:	4798      	blx	r3
   20b1a:	e007      	b.n	20b2c <vTaskNotifyGiveFromISR+0xa8>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
   20b1c:	697b      	ldr	r3, [r7, #20]
   20b1e:	3318      	adds	r3, #24
   20b20:	001a      	movs	r2, r3
   20b22:	4b15      	ldr	r3, [pc, #84]	; (20b78 <vTaskNotifyGiveFromISR+0xf4>)
   20b24:	0011      	movs	r1, r2
   20b26:	0018      	movs	r0, r3
   20b28:	4b12      	ldr	r3, [pc, #72]	; (20b74 <vTaskNotifyGiveFromISR+0xf0>)
   20b2a:	4798      	blx	r3
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
   20b2c:	697b      	ldr	r3, [r7, #20]
   20b2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   20b30:	4b12      	ldr	r3, [pc, #72]	; (20b7c <vTaskNotifyGiveFromISR+0xf8>)
   20b32:	681b      	ldr	r3, [r3, #0]
   20b34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   20b36:	429a      	cmp	r2, r3
   20b38:	d909      	bls.n	20b4e <vTaskNotifyGiveFromISR+0xca>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
   20b3a:	683b      	ldr	r3, [r7, #0]
   20b3c:	2b00      	cmp	r3, #0
   20b3e:	d003      	beq.n	20b48 <vTaskNotifyGiveFromISR+0xc4>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
   20b40:	683b      	ldr	r3, [r7, #0]
   20b42:	2201      	movs	r2, #1
   20b44:	601a      	str	r2, [r3, #0]
   20b46:	e002      	b.n	20b4e <vTaskNotifyGiveFromISR+0xca>
					else
					{
						/* Mark that a yield is pending in case the user is not
						using the "xHigherPriorityTaskWoken" parameter in an ISR
						safe FreeRTOS function. */
						xYieldPending = pdTRUE;
   20b48:	4b0d      	ldr	r3, [pc, #52]	; (20b80 <vTaskNotifyGiveFromISR+0xfc>)
   20b4a:	2201      	movs	r2, #1
   20b4c:	601a      	str	r2, [r3, #0]
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
   20b4e:	693b      	ldr	r3, [r7, #16]
   20b50:	0018      	movs	r0, r3
   20b52:	4b0c      	ldr	r3, [pc, #48]	; (20b84 <vTaskNotifyGiveFromISR+0x100>)
   20b54:	4798      	blx	r3
	}
   20b56:	46c0      	nop			; (mov r8, r8)
   20b58:	46bd      	mov	sp, r7
   20b5a:	b006      	add	sp, #24
   20b5c:	bd80      	pop	{r7, pc}
   20b5e:	46c0      	nop			; (mov r8, r8)
   20b60:	0001ebb5 	.word	0x0001ebb5
   20b64:	200003b8 	.word	0x200003b8
   20b68:	0001ee07 	.word	0x0001ee07
   20b6c:	20000398 	.word	0x20000398
   20b70:	200002bc 	.word	0x200002bc
   20b74:	0001ed57 	.word	0x0001ed57
   20b78:	20000350 	.word	0x20000350
   20b7c:	200002b8 	.word	0x200002b8
   20b80:	200003a4 	.word	0x200003a4
   20b84:	0001ebc1 	.word	0x0001ebc1

00020b88 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
   20b88:	b580      	push	{r7, lr}
   20b8a:	b084      	sub	sp, #16
   20b8c:	af00      	add	r7, sp, #0
   20b8e:	6078      	str	r0, [r7, #4]
   20b90:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
   20b92:	4b21      	ldr	r3, [pc, #132]	; (20c18 <prvAddCurrentTaskToDelayedList+0x90>)
   20b94:	681b      	ldr	r3, [r3, #0]
   20b96:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   20b98:	4b20      	ldr	r3, [pc, #128]	; (20c1c <prvAddCurrentTaskToDelayedList+0x94>)
   20b9a:	681b      	ldr	r3, [r3, #0]
   20b9c:	3304      	adds	r3, #4
   20b9e:	0018      	movs	r0, r3
   20ba0:	4b1f      	ldr	r3, [pc, #124]	; (20c20 <prvAddCurrentTaskToDelayedList+0x98>)
   20ba2:	4798      	blx	r3
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
   20ba4:	687b      	ldr	r3, [r7, #4]
   20ba6:	3301      	adds	r3, #1
   20ba8:	d10b      	bne.n	20bc2 <prvAddCurrentTaskToDelayedList+0x3a>
   20baa:	683b      	ldr	r3, [r7, #0]
   20bac:	2b00      	cmp	r3, #0
   20bae:	d008      	beq.n	20bc2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
   20bb0:	4b1a      	ldr	r3, [pc, #104]	; (20c1c <prvAddCurrentTaskToDelayedList+0x94>)
   20bb2:	681b      	ldr	r3, [r3, #0]
   20bb4:	1d1a      	adds	r2, r3, #4
   20bb6:	4b1b      	ldr	r3, [pc, #108]	; (20c24 <prvAddCurrentTaskToDelayedList+0x9c>)
   20bb8:	0011      	movs	r1, r2
   20bba:	0018      	movs	r0, r3
   20bbc:	4b1a      	ldr	r3, [pc, #104]	; (20c28 <prvAddCurrentTaskToDelayedList+0xa0>)
   20bbe:	4798      	blx	r3

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
   20bc0:	e026      	b.n	20c10 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
   20bc2:	68fa      	ldr	r2, [r7, #12]
   20bc4:	687b      	ldr	r3, [r7, #4]
   20bc6:	18d3      	adds	r3, r2, r3
   20bc8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
   20bca:	4b14      	ldr	r3, [pc, #80]	; (20c1c <prvAddCurrentTaskToDelayedList+0x94>)
   20bcc:	681b      	ldr	r3, [r3, #0]
   20bce:	68ba      	ldr	r2, [r7, #8]
   20bd0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
   20bd2:	68ba      	ldr	r2, [r7, #8]
   20bd4:	68fb      	ldr	r3, [r7, #12]
   20bd6:	429a      	cmp	r2, r3
   20bd8:	d209      	bcs.n	20bee <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
   20bda:	4b14      	ldr	r3, [pc, #80]	; (20c2c <prvAddCurrentTaskToDelayedList+0xa4>)
   20bdc:	681a      	ldr	r2, [r3, #0]
   20bde:	4b0f      	ldr	r3, [pc, #60]	; (20c1c <prvAddCurrentTaskToDelayedList+0x94>)
   20be0:	681b      	ldr	r3, [r3, #0]
   20be2:	3304      	adds	r3, #4
   20be4:	0019      	movs	r1, r3
   20be6:	0010      	movs	r0, r2
   20be8:	4b11      	ldr	r3, [pc, #68]	; (20c30 <prvAddCurrentTaskToDelayedList+0xa8>)
   20bea:	4798      	blx	r3
}
   20bec:	e010      	b.n	20c10 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
   20bee:	4b11      	ldr	r3, [pc, #68]	; (20c34 <prvAddCurrentTaskToDelayedList+0xac>)
   20bf0:	681a      	ldr	r2, [r3, #0]
   20bf2:	4b0a      	ldr	r3, [pc, #40]	; (20c1c <prvAddCurrentTaskToDelayedList+0x94>)
   20bf4:	681b      	ldr	r3, [r3, #0]
   20bf6:	3304      	adds	r3, #4
   20bf8:	0019      	movs	r1, r3
   20bfa:	0010      	movs	r0, r2
   20bfc:	4b0c      	ldr	r3, [pc, #48]	; (20c30 <prvAddCurrentTaskToDelayedList+0xa8>)
   20bfe:	4798      	blx	r3
				if( xTimeToWake < xNextTaskUnblockTime )
   20c00:	4b0d      	ldr	r3, [pc, #52]	; (20c38 <prvAddCurrentTaskToDelayedList+0xb0>)
   20c02:	681b      	ldr	r3, [r3, #0]
   20c04:	68ba      	ldr	r2, [r7, #8]
   20c06:	429a      	cmp	r2, r3
   20c08:	d202      	bcs.n	20c10 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
   20c0a:	4b0b      	ldr	r3, [pc, #44]	; (20c38 <prvAddCurrentTaskToDelayedList+0xb0>)
   20c0c:	68ba      	ldr	r2, [r7, #8]
   20c0e:	601a      	str	r2, [r3, #0]
}
   20c10:	46c0      	nop			; (mov r8, r8)
   20c12:	46bd      	mov	sp, r7
   20c14:	b004      	add	sp, #16
   20c16:	bd80      	pop	{r7, pc}
   20c18:	20000394 	.word	0x20000394
   20c1c:	200002b8 	.word	0x200002b8
   20c20:	0001ee07 	.word	0x0001ee07
   20c24:	2000037c 	.word	0x2000037c
   20c28:	0001ed57 	.word	0x0001ed57
   20c2c:	2000034c 	.word	0x2000034c
   20c30:	0001ed9b 	.word	0x0001ed9b
   20c34:	20000348 	.word	0x20000348
   20c38:	200003b0 	.word	0x200003b0

00020c3c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
   20c3c:	b590      	push	{r4, r7, lr}
   20c3e:	b085      	sub	sp, #20
   20c40:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
   20c42:	2300      	movs	r3, #0
   20c44:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
   20c46:	4b0e      	ldr	r3, [pc, #56]	; (20c80 <xTimerCreateTimerTask+0x44>)
   20c48:	4798      	blx	r3

	if( xTimerQueue != NULL )
   20c4a:	4b0e      	ldr	r3, [pc, #56]	; (20c84 <xTimerCreateTimerTask+0x48>)
   20c4c:	681b      	ldr	r3, [r3, #0]
   20c4e:	2b00      	cmp	r3, #0
   20c50:	d00c      	beq.n	20c6c <xTimerCreateTimerTask+0x30>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
   20c52:	2382      	movs	r3, #130	; 0x82
   20c54:	005a      	lsls	r2, r3, #1
   20c56:	490c      	ldr	r1, [pc, #48]	; (20c88 <xTimerCreateTimerTask+0x4c>)
   20c58:	480c      	ldr	r0, [pc, #48]	; (20c8c <xTimerCreateTimerTask+0x50>)
   20c5a:	4b0d      	ldr	r3, [pc, #52]	; (20c90 <xTimerCreateTimerTask+0x54>)
   20c5c:	9301      	str	r3, [sp, #4]
   20c5e:	2304      	movs	r3, #4
   20c60:	9300      	str	r3, [sp, #0]
   20c62:	2300      	movs	r3, #0
   20c64:	4c0b      	ldr	r4, [pc, #44]	; (20c94 <xTimerCreateTimerTask+0x58>)
   20c66:	47a0      	blx	r4
   20c68:	0003      	movs	r3, r0
   20c6a:	607b      	str	r3, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
   20c6c:	687b      	ldr	r3, [r7, #4]
   20c6e:	2b00      	cmp	r3, #0
   20c70:	d101      	bne.n	20c76 <xTimerCreateTimerTask+0x3a>
   20c72:	b672      	cpsid	i
   20c74:	e7fe      	b.n	20c74 <xTimerCreateTimerTask+0x38>
	return xReturn;
   20c76:	687b      	ldr	r3, [r7, #4]
}
   20c78:	0018      	movs	r0, r3
   20c7a:	46bd      	mov	sp, r7
   20c7c:	b003      	add	sp, #12
   20c7e:	bd90      	pop	{r4, r7, pc}
   20c80:	0002124d 	.word	0x0002124d
   20c84:	200003ec 	.word	0x200003ec
   20c88:	0002a728 	.word	0x0002a728
   20c8c:	00020e61 	.word	0x00020e61
   20c90:	200003f0 	.word	0x200003f0
   20c94:	0001fa39 	.word	0x0001fa39

00020c98 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
   20c98:	b590      	push	{r4, r7, lr}
   20c9a:	b089      	sub	sp, #36	; 0x24
   20c9c:	af02      	add	r7, sp, #8
   20c9e:	60f8      	str	r0, [r7, #12]
   20ca0:	60b9      	str	r1, [r7, #8]
   20ca2:	607a      	str	r2, [r7, #4]
   20ca4:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
   20ca6:	2028      	movs	r0, #40	; 0x28
   20ca8:	4b0b      	ldr	r3, [pc, #44]	; (20cd8 <xTimerCreate+0x40>)
   20caa:	4798      	blx	r3
   20cac:	0003      	movs	r3, r0
   20cae:	617b      	str	r3, [r7, #20]

		if( pxNewTimer != NULL )
   20cb0:	697b      	ldr	r3, [r7, #20]
   20cb2:	2b00      	cmp	r3, #0
   20cb4:	d00a      	beq.n	20ccc <xTimerCreate+0x34>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
   20cb6:	683c      	ldr	r4, [r7, #0]
   20cb8:	687a      	ldr	r2, [r7, #4]
   20cba:	68b9      	ldr	r1, [r7, #8]
   20cbc:	68f8      	ldr	r0, [r7, #12]
   20cbe:	697b      	ldr	r3, [r7, #20]
   20cc0:	9301      	str	r3, [sp, #4]
   20cc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   20cc4:	9300      	str	r3, [sp, #0]
   20cc6:	0023      	movs	r3, r4
   20cc8:	4c04      	ldr	r4, [pc, #16]	; (20cdc <xTimerCreate+0x44>)
   20cca:	47a0      	blx	r4
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */
		}

		return pxNewTimer;
   20ccc:	697b      	ldr	r3, [r7, #20]
	}
   20cce:	0018      	movs	r0, r3
   20cd0:	46bd      	mov	sp, r7
   20cd2:	b007      	add	sp, #28
   20cd4:	bd90      	pop	{r4, r7, pc}
   20cd6:	46c0      	nop			; (mov r8, r8)
   20cd8:	0001ec9d 	.word	0x0001ec9d
   20cdc:	00020ce1 	.word	0x00020ce1

00020ce0 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
   20ce0:	b580      	push	{r7, lr}
   20ce2:	b084      	sub	sp, #16
   20ce4:	af00      	add	r7, sp, #0
   20ce6:	60f8      	str	r0, [r7, #12]
   20ce8:	60b9      	str	r1, [r7, #8]
   20cea:	607a      	str	r2, [r7, #4]
   20cec:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
   20cee:	68bb      	ldr	r3, [r7, #8]
   20cf0:	2b00      	cmp	r3, #0
   20cf2:	d101      	bne.n	20cf8 <prvInitialiseNewTimer+0x18>
   20cf4:	b672      	cpsid	i
   20cf6:	e7fe      	b.n	20cf6 <prvInitialiseNewTimer+0x16>

	if( pxNewTimer != NULL )
   20cf8:	69fb      	ldr	r3, [r7, #28]
   20cfa:	2b00      	cmp	r3, #0
   20cfc:	d015      	beq.n	20d2a <prvInitialiseNewTimer+0x4a>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
   20cfe:	4b0d      	ldr	r3, [pc, #52]	; (20d34 <prvInitialiseNewTimer+0x54>)
   20d00:	4798      	blx	r3

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
   20d02:	69fb      	ldr	r3, [r7, #28]
   20d04:	68fa      	ldr	r2, [r7, #12]
   20d06:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
   20d08:	69fb      	ldr	r3, [r7, #28]
   20d0a:	68ba      	ldr	r2, [r7, #8]
   20d0c:	619a      	str	r2, [r3, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
   20d0e:	69fb      	ldr	r3, [r7, #28]
   20d10:	687a      	ldr	r2, [r7, #4]
   20d12:	61da      	str	r2, [r3, #28]
		pxNewTimer->pvTimerID = pvTimerID;
   20d14:	69fb      	ldr	r3, [r7, #28]
   20d16:	683a      	ldr	r2, [r7, #0]
   20d18:	621a      	str	r2, [r3, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
   20d1a:	69fb      	ldr	r3, [r7, #28]
   20d1c:	69ba      	ldr	r2, [r7, #24]
   20d1e:	625a      	str	r2, [r3, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
   20d20:	69fb      	ldr	r3, [r7, #28]
   20d22:	3304      	adds	r3, #4
   20d24:	0018      	movs	r0, r3
   20d26:	4b04      	ldr	r3, [pc, #16]	; (20d38 <prvInitialiseNewTimer+0x58>)
   20d28:	4798      	blx	r3
		traceTIMER_CREATE( pxNewTimer );
	}
}
   20d2a:	46c0      	nop			; (mov r8, r8)
   20d2c:	46bd      	mov	sp, r7
   20d2e:	b004      	add	sp, #16
   20d30:	bd80      	pop	{r7, pc}
   20d32:	46c0      	nop			; (mov r8, r8)
   20d34:	0002124d 	.word	0x0002124d
   20d38:	0001ed41 	.word	0x0001ed41

00020d3c <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
   20d3c:	b590      	push	{r4, r7, lr}
   20d3e:	b08b      	sub	sp, #44	; 0x2c
   20d40:	af00      	add	r7, sp, #0
   20d42:	60f8      	str	r0, [r7, #12]
   20d44:	60b9      	str	r1, [r7, #8]
   20d46:	607a      	str	r2, [r7, #4]
   20d48:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
   20d4a:	2300      	movs	r3, #0
   20d4c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
   20d4e:	68fb      	ldr	r3, [r7, #12]
   20d50:	2b00      	cmp	r3, #0
   20d52:	d101      	bne.n	20d58 <xTimerGenericCommand+0x1c>
   20d54:	b672      	cpsid	i
   20d56:	e7fe      	b.n	20d56 <xTimerGenericCommand+0x1a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
   20d58:	4b1e      	ldr	r3, [pc, #120]	; (20dd4 <xTimerGenericCommand+0x98>)
   20d5a:	681b      	ldr	r3, [r3, #0]
   20d5c:	2b00      	cmp	r3, #0
   20d5e:	d033      	beq.n	20dc8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
   20d60:	2314      	movs	r3, #20
   20d62:	18fb      	adds	r3, r7, r3
   20d64:	68ba      	ldr	r2, [r7, #8]
   20d66:	601a      	str	r2, [r3, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
   20d68:	2314      	movs	r3, #20
   20d6a:	18fb      	adds	r3, r7, r3
   20d6c:	687a      	ldr	r2, [r7, #4]
   20d6e:	605a      	str	r2, [r3, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
   20d70:	2314      	movs	r3, #20
   20d72:	18fb      	adds	r3, r7, r3
   20d74:	68fa      	ldr	r2, [r7, #12]
   20d76:	609a      	str	r2, [r3, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
   20d78:	68bb      	ldr	r3, [r7, #8]
   20d7a:	2b05      	cmp	r3, #5
   20d7c:	dc1a      	bgt.n	20db4 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
   20d7e:	4b16      	ldr	r3, [pc, #88]	; (20dd8 <xTimerGenericCommand+0x9c>)
   20d80:	4798      	blx	r3
   20d82:	0003      	movs	r3, r0
   20d84:	2b02      	cmp	r3, #2
   20d86:	d10a      	bne.n	20d9e <xTimerGenericCommand+0x62>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
   20d88:	4b12      	ldr	r3, [pc, #72]	; (20dd4 <xTimerGenericCommand+0x98>)
   20d8a:	6818      	ldr	r0, [r3, #0]
   20d8c:	6bba      	ldr	r2, [r7, #56]	; 0x38
   20d8e:	2314      	movs	r3, #20
   20d90:	18f9      	adds	r1, r7, r3
   20d92:	2300      	movs	r3, #0
   20d94:	4c11      	ldr	r4, [pc, #68]	; (20ddc <xTimerGenericCommand+0xa0>)
   20d96:	47a0      	blx	r4
   20d98:	0003      	movs	r3, r0
   20d9a:	627b      	str	r3, [r7, #36]	; 0x24
   20d9c:	e014      	b.n	20dc8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
   20d9e:	4b0d      	ldr	r3, [pc, #52]	; (20dd4 <xTimerGenericCommand+0x98>)
   20da0:	6818      	ldr	r0, [r3, #0]
   20da2:	2314      	movs	r3, #20
   20da4:	18f9      	adds	r1, r7, r3
   20da6:	2300      	movs	r3, #0
   20da8:	2200      	movs	r2, #0
   20daa:	4c0c      	ldr	r4, [pc, #48]	; (20ddc <xTimerGenericCommand+0xa0>)
   20dac:	47a0      	blx	r4
   20dae:	0003      	movs	r3, r0
   20db0:	627b      	str	r3, [r7, #36]	; 0x24
   20db2:	e009      	b.n	20dc8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
   20db4:	4b07      	ldr	r3, [pc, #28]	; (20dd4 <xTimerGenericCommand+0x98>)
   20db6:	6818      	ldr	r0, [r3, #0]
   20db8:	683a      	ldr	r2, [r7, #0]
   20dba:	2314      	movs	r3, #20
   20dbc:	18f9      	adds	r1, r7, r3
   20dbe:	2300      	movs	r3, #0
   20dc0:	4c07      	ldr	r4, [pc, #28]	; (20de0 <xTimerGenericCommand+0xa4>)
   20dc2:	47a0      	blx	r4
   20dc4:	0003      	movs	r3, r0
   20dc6:	627b      	str	r3, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
   20dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   20dca:	0018      	movs	r0, r3
   20dcc:	46bd      	mov	sp, r7
   20dce:	b00b      	add	sp, #44	; 0x2c
   20dd0:	bd90      	pop	{r4, r7, pc}
   20dd2:	46c0      	nop			; (mov r8, r8)
   20dd4:	200003ec 	.word	0x200003ec
   20dd8:	00020701 	.word	0x00020701
   20ddc:	0001efd1 	.word	0x0001efd1
   20de0:	0001f1b1 	.word	0x0001f1b1

00020de4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
   20de4:	b590      	push	{r4, r7, lr}
   20de6:	b087      	sub	sp, #28
   20de8:	af02      	add	r7, sp, #8
   20dea:	6078      	str	r0, [r7, #4]
   20dec:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   20dee:	4b18      	ldr	r3, [pc, #96]	; (20e50 <prvProcessExpiredTimer+0x6c>)
   20df0:	681b      	ldr	r3, [r3, #0]
   20df2:	68db      	ldr	r3, [r3, #12]
   20df4:	68db      	ldr	r3, [r3, #12]
   20df6:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   20df8:	68fb      	ldr	r3, [r7, #12]
   20dfa:	3304      	adds	r3, #4
   20dfc:	0018      	movs	r0, r3
   20dfe:	4b15      	ldr	r3, [pc, #84]	; (20e54 <prvProcessExpiredTimer+0x70>)
   20e00:	4798      	blx	r3
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   20e02:	68fb      	ldr	r3, [r7, #12]
   20e04:	69db      	ldr	r3, [r3, #28]
   20e06:	2b01      	cmp	r3, #1
   20e08:	d119      	bne.n	20e3e <prvProcessExpiredTimer+0x5a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
   20e0a:	68fb      	ldr	r3, [r7, #12]
   20e0c:	699a      	ldr	r2, [r3, #24]
   20e0e:	687b      	ldr	r3, [r7, #4]
   20e10:	18d1      	adds	r1, r2, r3
   20e12:	687b      	ldr	r3, [r7, #4]
   20e14:	683a      	ldr	r2, [r7, #0]
   20e16:	68f8      	ldr	r0, [r7, #12]
   20e18:	4c0f      	ldr	r4, [pc, #60]	; (20e58 <prvProcessExpiredTimer+0x74>)
   20e1a:	47a0      	blx	r4
   20e1c:	1e03      	subs	r3, r0, #0
   20e1e:	d00e      	beq.n	20e3e <prvProcessExpiredTimer+0x5a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
   20e20:	687a      	ldr	r2, [r7, #4]
   20e22:	68f8      	ldr	r0, [r7, #12]
   20e24:	2300      	movs	r3, #0
   20e26:	9300      	str	r3, [sp, #0]
   20e28:	2300      	movs	r3, #0
   20e2a:	2100      	movs	r1, #0
   20e2c:	4c0b      	ldr	r4, [pc, #44]	; (20e5c <prvProcessExpiredTimer+0x78>)
   20e2e:	47a0      	blx	r4
   20e30:	0003      	movs	r3, r0
   20e32:	60bb      	str	r3, [r7, #8]
			configASSERT( xResult );
   20e34:	68bb      	ldr	r3, [r7, #8]
   20e36:	2b00      	cmp	r3, #0
   20e38:	d101      	bne.n	20e3e <prvProcessExpiredTimer+0x5a>
   20e3a:	b672      	cpsid	i
   20e3c:	e7fe      	b.n	20e3c <prvProcessExpiredTimer+0x58>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   20e3e:	68fb      	ldr	r3, [r7, #12]
   20e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   20e42:	68fa      	ldr	r2, [r7, #12]
   20e44:	0010      	movs	r0, r2
   20e46:	4798      	blx	r3
}
   20e48:	46c0      	nop			; (mov r8, r8)
   20e4a:	46bd      	mov	sp, r7
   20e4c:	b005      	add	sp, #20
   20e4e:	bd90      	pop	{r4, r7, pc}
   20e50:	200003e4 	.word	0x200003e4
   20e54:	0001ee07 	.word	0x0001ee07
   20e58:	00020fc1 	.word	0x00020fc1
   20e5c:	00020d3d 	.word	0x00020d3d

00020e60 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
   20e60:	b580      	push	{r7, lr}
   20e62:	b084      	sub	sp, #16
   20e64:	af00      	add	r7, sp, #0
   20e66:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
   20e68:	2308      	movs	r3, #8
   20e6a:	18fb      	adds	r3, r7, r3
   20e6c:	0018      	movs	r0, r3
   20e6e:	4b06      	ldr	r3, [pc, #24]	; (20e88 <prvTimerTask+0x28>)
   20e70:	4798      	blx	r3
   20e72:	0003      	movs	r3, r0
   20e74:	60fb      	str	r3, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
   20e76:	68ba      	ldr	r2, [r7, #8]
   20e78:	68fb      	ldr	r3, [r7, #12]
   20e7a:	0011      	movs	r1, r2
   20e7c:	0018      	movs	r0, r3
   20e7e:	4b03      	ldr	r3, [pc, #12]	; (20e8c <prvTimerTask+0x2c>)
   20e80:	4798      	blx	r3

		/* Empty the command queue. */
		prvProcessReceivedCommands();
   20e82:	4b03      	ldr	r3, [pc, #12]	; (20e90 <prvTimerTask+0x30>)
   20e84:	4798      	blx	r3
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
   20e86:	e7ef      	b.n	20e68 <prvTimerTask+0x8>
   20e88:	00020f39 	.word	0x00020f39
   20e8c:	00020e95 	.word	0x00020e95
   20e90:	00021049 	.word	0x00021049

00020e94 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
   20e94:	b580      	push	{r7, lr}
   20e96:	b084      	sub	sp, #16
   20e98:	af00      	add	r7, sp, #0
   20e9a:	6078      	str	r0, [r7, #4]
   20e9c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
   20e9e:	4b1e      	ldr	r3, [pc, #120]	; (20f18 <prvProcessTimerOrBlockTask+0x84>)
   20ea0:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   20ea2:	2308      	movs	r3, #8
   20ea4:	18fb      	adds	r3, r7, r3
   20ea6:	0018      	movs	r0, r3
   20ea8:	4b1c      	ldr	r3, [pc, #112]	; (20f1c <prvProcessTimerOrBlockTask+0x88>)
   20eaa:	4798      	blx	r3
   20eac:	0003      	movs	r3, r0
   20eae:	60fb      	str	r3, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
   20eb0:	68bb      	ldr	r3, [r7, #8]
   20eb2:	2b00      	cmp	r3, #0
   20eb4:	d129      	bne.n	20f0a <prvProcessTimerOrBlockTask+0x76>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
   20eb6:	683b      	ldr	r3, [r7, #0]
   20eb8:	2b00      	cmp	r3, #0
   20eba:	d10c      	bne.n	20ed6 <prvProcessTimerOrBlockTask+0x42>
   20ebc:	687a      	ldr	r2, [r7, #4]
   20ebe:	68fb      	ldr	r3, [r7, #12]
   20ec0:	429a      	cmp	r2, r3
   20ec2:	d808      	bhi.n	20ed6 <prvProcessTimerOrBlockTask+0x42>
			{
				( void ) xTaskResumeAll();
   20ec4:	4b16      	ldr	r3, [pc, #88]	; (20f20 <prvProcessTimerOrBlockTask+0x8c>)
   20ec6:	4798      	blx	r3
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
   20ec8:	68fa      	ldr	r2, [r7, #12]
   20eca:	687b      	ldr	r3, [r7, #4]
   20ecc:	0011      	movs	r1, r2
   20ece:	0018      	movs	r0, r3
   20ed0:	4b14      	ldr	r3, [pc, #80]	; (20f24 <prvProcessTimerOrBlockTask+0x90>)
   20ed2:	4798      	blx	r3
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
   20ed4:	e01b      	b.n	20f0e <prvProcessTimerOrBlockTask+0x7a>
				if( xListWasEmpty != pdFALSE )
   20ed6:	683b      	ldr	r3, [r7, #0]
   20ed8:	2b00      	cmp	r3, #0
   20eda:	d006      	beq.n	20eea <prvProcessTimerOrBlockTask+0x56>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
   20edc:	4b12      	ldr	r3, [pc, #72]	; (20f28 <prvProcessTimerOrBlockTask+0x94>)
   20ede:	681b      	ldr	r3, [r3, #0]
   20ee0:	681b      	ldr	r3, [r3, #0]
   20ee2:	425a      	negs	r2, r3
   20ee4:	4153      	adcs	r3, r2
   20ee6:	b2db      	uxtb	r3, r3
   20ee8:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
   20eea:	4b10      	ldr	r3, [pc, #64]	; (20f2c <prvProcessTimerOrBlockTask+0x98>)
   20eec:	6818      	ldr	r0, [r3, #0]
   20eee:	687a      	ldr	r2, [r7, #4]
   20ef0:	68fb      	ldr	r3, [r7, #12]
   20ef2:	1ad3      	subs	r3, r2, r3
   20ef4:	683a      	ldr	r2, [r7, #0]
   20ef6:	0019      	movs	r1, r3
   20ef8:	4b0d      	ldr	r3, [pc, #52]	; (20f30 <prvProcessTimerOrBlockTask+0x9c>)
   20efa:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   20efc:	4b08      	ldr	r3, [pc, #32]	; (20f20 <prvProcessTimerOrBlockTask+0x8c>)
   20efe:	4798      	blx	r3
   20f00:	1e03      	subs	r3, r0, #0
   20f02:	d104      	bne.n	20f0e <prvProcessTimerOrBlockTask+0x7a>
					portYIELD_WITHIN_API();
   20f04:	4b0b      	ldr	r3, [pc, #44]	; (20f34 <prvProcessTimerOrBlockTask+0xa0>)
   20f06:	4798      	blx	r3
}
   20f08:	e001      	b.n	20f0e <prvProcessTimerOrBlockTask+0x7a>
			( void ) xTaskResumeAll();
   20f0a:	4b05      	ldr	r3, [pc, #20]	; (20f20 <prvProcessTimerOrBlockTask+0x8c>)
   20f0c:	4798      	blx	r3
}
   20f0e:	46c0      	nop			; (mov r8, r8)
   20f10:	46bd      	mov	sp, r7
   20f12:	b004      	add	sp, #16
   20f14:	bd80      	pop	{r7, pc}
   20f16:	46c0      	nop			; (mov r8, r8)
   20f18:	0001ff91 	.word	0x0001ff91
   20f1c:	00020f79 	.word	0x00020f79
   20f20:	0001ffa9 	.word	0x0001ffa9
   20f24:	00020de5 	.word	0x00020de5
   20f28:	200003e8 	.word	0x200003e8
   20f2c:	200003ec 	.word	0x200003ec
   20f30:	0001f91d 	.word	0x0001f91d
   20f34:	0001eb41 	.word	0x0001eb41

00020f38 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
   20f38:	b580      	push	{r7, lr}
   20f3a:	b084      	sub	sp, #16
   20f3c:	af00      	add	r7, sp, #0
   20f3e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
   20f40:	4b0c      	ldr	r3, [pc, #48]	; (20f74 <prvGetNextExpireTime+0x3c>)
   20f42:	681b      	ldr	r3, [r3, #0]
   20f44:	681b      	ldr	r3, [r3, #0]
   20f46:	425a      	negs	r2, r3
   20f48:	4153      	adcs	r3, r2
   20f4a:	b2db      	uxtb	r3, r3
   20f4c:	001a      	movs	r2, r3
   20f4e:	687b      	ldr	r3, [r7, #4]
   20f50:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
   20f52:	687b      	ldr	r3, [r7, #4]
   20f54:	681b      	ldr	r3, [r3, #0]
   20f56:	2b00      	cmp	r3, #0
   20f58:	d105      	bne.n	20f66 <prvGetNextExpireTime+0x2e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   20f5a:	4b06      	ldr	r3, [pc, #24]	; (20f74 <prvGetNextExpireTime+0x3c>)
   20f5c:	681b      	ldr	r3, [r3, #0]
   20f5e:	68db      	ldr	r3, [r3, #12]
   20f60:	681b      	ldr	r3, [r3, #0]
   20f62:	60fb      	str	r3, [r7, #12]
   20f64:	e001      	b.n	20f6a <prvGetNextExpireTime+0x32>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
   20f66:	2300      	movs	r3, #0
   20f68:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
   20f6a:	68fb      	ldr	r3, [r7, #12]
}
   20f6c:	0018      	movs	r0, r3
   20f6e:	46bd      	mov	sp, r7
   20f70:	b004      	add	sp, #16
   20f72:	bd80      	pop	{r7, pc}
   20f74:	200003e4 	.word	0x200003e4

00020f78 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
   20f78:	b580      	push	{r7, lr}
   20f7a:	b084      	sub	sp, #16
   20f7c:	af00      	add	r7, sp, #0
   20f7e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
   20f80:	4b0c      	ldr	r3, [pc, #48]	; (20fb4 <prvSampleTimeNow+0x3c>)
   20f82:	4798      	blx	r3
   20f84:	0003      	movs	r3, r0
   20f86:	60fb      	str	r3, [r7, #12]

	if( xTimeNow < xLastTime )
   20f88:	4b0b      	ldr	r3, [pc, #44]	; (20fb8 <prvSampleTimeNow+0x40>)
   20f8a:	681b      	ldr	r3, [r3, #0]
   20f8c:	68fa      	ldr	r2, [r7, #12]
   20f8e:	429a      	cmp	r2, r3
   20f90:	d205      	bcs.n	20f9e <prvSampleTimeNow+0x26>
	{
		prvSwitchTimerLists();
   20f92:	4b0a      	ldr	r3, [pc, #40]	; (20fbc <prvSampleTimeNow+0x44>)
   20f94:	4798      	blx	r3
		*pxTimerListsWereSwitched = pdTRUE;
   20f96:	687b      	ldr	r3, [r7, #4]
   20f98:	2201      	movs	r2, #1
   20f9a:	601a      	str	r2, [r3, #0]
   20f9c:	e002      	b.n	20fa4 <prvSampleTimeNow+0x2c>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
   20f9e:	687b      	ldr	r3, [r7, #4]
   20fa0:	2200      	movs	r2, #0
   20fa2:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
   20fa4:	4b04      	ldr	r3, [pc, #16]	; (20fb8 <prvSampleTimeNow+0x40>)
   20fa6:	68fa      	ldr	r2, [r7, #12]
   20fa8:	601a      	str	r2, [r3, #0]

	return xTimeNow;
   20faa:	68fb      	ldr	r3, [r7, #12]
}
   20fac:	0018      	movs	r0, r3
   20fae:	46bd      	mov	sp, r7
   20fb0:	b004      	add	sp, #16
   20fb2:	bd80      	pop	{r7, pc}
   20fb4:	000200dd 	.word	0x000200dd
   20fb8:	200003f4 	.word	0x200003f4
   20fbc:	0002118d 	.word	0x0002118d

00020fc0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
   20fc0:	b580      	push	{r7, lr}
   20fc2:	b086      	sub	sp, #24
   20fc4:	af00      	add	r7, sp, #0
   20fc6:	60f8      	str	r0, [r7, #12]
   20fc8:	60b9      	str	r1, [r7, #8]
   20fca:	607a      	str	r2, [r7, #4]
   20fcc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
   20fce:	2300      	movs	r3, #0
   20fd0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
   20fd2:	68fb      	ldr	r3, [r7, #12]
   20fd4:	68ba      	ldr	r2, [r7, #8]
   20fd6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   20fd8:	68fb      	ldr	r3, [r7, #12]
   20fda:	68fa      	ldr	r2, [r7, #12]
   20fdc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
   20fde:	68ba      	ldr	r2, [r7, #8]
   20fe0:	687b      	ldr	r3, [r7, #4]
   20fe2:	429a      	cmp	r2, r3
   20fe4:	d812      	bhi.n	2100c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   20fe6:	687a      	ldr	r2, [r7, #4]
   20fe8:	683b      	ldr	r3, [r7, #0]
   20fea:	1ad2      	subs	r2, r2, r3
   20fec:	68fb      	ldr	r3, [r7, #12]
   20fee:	699b      	ldr	r3, [r3, #24]
   20ff0:	429a      	cmp	r2, r3
   20ff2:	d302      	bcc.n	20ffa <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
   20ff4:	2301      	movs	r3, #1
   20ff6:	617b      	str	r3, [r7, #20]
   20ff8:	e01b      	b.n	21032 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
   20ffa:	4b10      	ldr	r3, [pc, #64]	; (2103c <prvInsertTimerInActiveList+0x7c>)
   20ffc:	681a      	ldr	r2, [r3, #0]
   20ffe:	68fb      	ldr	r3, [r7, #12]
   21000:	3304      	adds	r3, #4
   21002:	0019      	movs	r1, r3
   21004:	0010      	movs	r0, r2
   21006:	4b0e      	ldr	r3, [pc, #56]	; (21040 <prvInsertTimerInActiveList+0x80>)
   21008:	4798      	blx	r3
   2100a:	e012      	b.n	21032 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
   2100c:	687a      	ldr	r2, [r7, #4]
   2100e:	683b      	ldr	r3, [r7, #0]
   21010:	429a      	cmp	r2, r3
   21012:	d206      	bcs.n	21022 <prvInsertTimerInActiveList+0x62>
   21014:	68ba      	ldr	r2, [r7, #8]
   21016:	683b      	ldr	r3, [r7, #0]
   21018:	429a      	cmp	r2, r3
   2101a:	d302      	bcc.n	21022 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
   2101c:	2301      	movs	r3, #1
   2101e:	617b      	str	r3, [r7, #20]
   21020:	e007      	b.n	21032 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   21022:	4b08      	ldr	r3, [pc, #32]	; (21044 <prvInsertTimerInActiveList+0x84>)
   21024:	681a      	ldr	r2, [r3, #0]
   21026:	68fb      	ldr	r3, [r7, #12]
   21028:	3304      	adds	r3, #4
   2102a:	0019      	movs	r1, r3
   2102c:	0010      	movs	r0, r2
   2102e:	4b04      	ldr	r3, [pc, #16]	; (21040 <prvInsertTimerInActiveList+0x80>)
   21030:	4798      	blx	r3
		}
	}

	return xProcessTimerNow;
   21032:	697b      	ldr	r3, [r7, #20]
}
   21034:	0018      	movs	r0, r3
   21036:	46bd      	mov	sp, r7
   21038:	b006      	add	sp, #24
   2103a:	bd80      	pop	{r7, pc}
   2103c:	200003e8 	.word	0x200003e8
   21040:	0001ed9b 	.word	0x0001ed9b
   21044:	200003e4 	.word	0x200003e4

00021048 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
   21048:	b590      	push	{r4, r7, lr}
   2104a:	b08d      	sub	sp, #52	; 0x34
   2104c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
   2104e:	e07e      	b.n	2114e <prvProcessReceivedCommands+0x106>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
   21050:	2308      	movs	r3, #8
   21052:	18fb      	adds	r3, r7, r3
   21054:	681b      	ldr	r3, [r3, #0]
   21056:	2b00      	cmp	r3, #0
   21058:	da10      	bge.n	2107c <prvProcessReceivedCommands+0x34>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
   2105a:	2308      	movs	r3, #8
   2105c:	18fb      	adds	r3, r7, r3
   2105e:	3304      	adds	r3, #4
   21060:	627b      	str	r3, [r7, #36]	; 0x24

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
   21062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   21064:	2b00      	cmp	r3, #0
   21066:	d101      	bne.n	2106c <prvProcessReceivedCommands+0x24>
   21068:	b672      	cpsid	i
   2106a:	e7fe      	b.n	2106a <prvProcessReceivedCommands+0x22>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
   2106c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2106e:	681a      	ldr	r2, [r3, #0]
   21070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   21072:	6858      	ldr	r0, [r3, #4]
   21074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   21076:	689b      	ldr	r3, [r3, #8]
   21078:	0019      	movs	r1, r3
   2107a:	4790      	blx	r2
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
   2107c:	2308      	movs	r3, #8
   2107e:	18fb      	adds	r3, r7, r3
   21080:	681b      	ldr	r3, [r3, #0]
   21082:	2b00      	cmp	r3, #0
   21084:	db63      	blt.n	2114e <prvProcessReceivedCommands+0x106>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
   21086:	2308      	movs	r3, #8
   21088:	18fb      	adds	r3, r7, r3
   2108a:	689b      	ldr	r3, [r3, #8]
   2108c:	623b      	str	r3, [r7, #32]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
   2108e:	6a3b      	ldr	r3, [r7, #32]
   21090:	695b      	ldr	r3, [r3, #20]
   21092:	2b00      	cmp	r3, #0
   21094:	d004      	beq.n	210a0 <prvProcessReceivedCommands+0x58>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   21096:	6a3b      	ldr	r3, [r7, #32]
   21098:	3304      	adds	r3, #4
   2109a:	0018      	movs	r0, r3
   2109c:	4b33      	ldr	r3, [pc, #204]	; (2116c <prvProcessReceivedCommands+0x124>)
   2109e:	4798      	blx	r3
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   210a0:	1d3b      	adds	r3, r7, #4
   210a2:	0018      	movs	r0, r3
   210a4:	4b32      	ldr	r3, [pc, #200]	; (21170 <prvProcessReceivedCommands+0x128>)
   210a6:	4798      	blx	r3
   210a8:	0003      	movs	r3, r0
   210aa:	61fb      	str	r3, [r7, #28]

			switch( xMessage.xMessageID )
   210ac:	2308      	movs	r3, #8
   210ae:	18fb      	adds	r3, r7, r3
   210b0:	681b      	ldr	r3, [r3, #0]
   210b2:	2b09      	cmp	r3, #9
   210b4:	d84a      	bhi.n	2114c <prvProcessReceivedCommands+0x104>
   210b6:	009a      	lsls	r2, r3, #2
   210b8:	4b2e      	ldr	r3, [pc, #184]	; (21174 <prvProcessReceivedCommands+0x12c>)
   210ba:	18d3      	adds	r3, r2, r3
   210bc:	681b      	ldr	r3, [r3, #0]
   210be:	469f      	mov	pc, r3
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
   210c0:	2308      	movs	r3, #8
   210c2:	18fb      	adds	r3, r7, r3
   210c4:	685a      	ldr	r2, [r3, #4]
   210c6:	6a3b      	ldr	r3, [r7, #32]
   210c8:	699b      	ldr	r3, [r3, #24]
   210ca:	18d1      	adds	r1, r2, r3
   210cc:	2308      	movs	r3, #8
   210ce:	18fb      	adds	r3, r7, r3
   210d0:	685b      	ldr	r3, [r3, #4]
   210d2:	69fa      	ldr	r2, [r7, #28]
   210d4:	6a38      	ldr	r0, [r7, #32]
   210d6:	4c28      	ldr	r4, [pc, #160]	; (21178 <prvProcessReceivedCommands+0x130>)
   210d8:	47a0      	blx	r4
   210da:	1e03      	subs	r3, r0, #0
   210dc:	d037      	beq.n	2114e <prvProcessReceivedCommands+0x106>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   210de:	6a3b      	ldr	r3, [r7, #32]
   210e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   210e2:	6a3a      	ldr	r2, [r7, #32]
   210e4:	0010      	movs	r0, r2
   210e6:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   210e8:	6a3b      	ldr	r3, [r7, #32]
   210ea:	69db      	ldr	r3, [r3, #28]
   210ec:	2b01      	cmp	r3, #1
   210ee:	d12e      	bne.n	2114e <prvProcessReceivedCommands+0x106>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
   210f0:	2308      	movs	r3, #8
   210f2:	18fb      	adds	r3, r7, r3
   210f4:	685a      	ldr	r2, [r3, #4]
   210f6:	6a3b      	ldr	r3, [r7, #32]
   210f8:	699b      	ldr	r3, [r3, #24]
   210fa:	18d2      	adds	r2, r2, r3
   210fc:	6a38      	ldr	r0, [r7, #32]
   210fe:	2300      	movs	r3, #0
   21100:	9300      	str	r3, [sp, #0]
   21102:	2300      	movs	r3, #0
   21104:	2100      	movs	r1, #0
   21106:	4c1d      	ldr	r4, [pc, #116]	; (2117c <prvProcessReceivedCommands+0x134>)
   21108:	47a0      	blx	r4
   2110a:	0003      	movs	r3, r0
   2110c:	61bb      	str	r3, [r7, #24]
							configASSERT( xResult );
   2110e:	69bb      	ldr	r3, [r7, #24]
   21110:	2b00      	cmp	r3, #0
   21112:	d11c      	bne.n	2114e <prvProcessReceivedCommands+0x106>
   21114:	b672      	cpsid	i
   21116:	e7fe      	b.n	21116 <prvProcessReceivedCommands+0xce>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
   21118:	2308      	movs	r3, #8
   2111a:	18fb      	adds	r3, r7, r3
   2111c:	685a      	ldr	r2, [r3, #4]
   2111e:	6a3b      	ldr	r3, [r7, #32]
   21120:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
   21122:	6a3b      	ldr	r3, [r7, #32]
   21124:	699b      	ldr	r3, [r3, #24]
   21126:	2b00      	cmp	r3, #0
   21128:	d101      	bne.n	2112e <prvProcessReceivedCommands+0xe6>
   2112a:	b672      	cpsid	i
   2112c:	e7fe      	b.n	2112c <prvProcessReceivedCommands+0xe4>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
   2112e:	6a3b      	ldr	r3, [r7, #32]
   21130:	699a      	ldr	r2, [r3, #24]
   21132:	69fb      	ldr	r3, [r7, #28]
   21134:	18d1      	adds	r1, r2, r3
   21136:	69fb      	ldr	r3, [r7, #28]
   21138:	69fa      	ldr	r2, [r7, #28]
   2113a:	6a38      	ldr	r0, [r7, #32]
   2113c:	4c0e      	ldr	r4, [pc, #56]	; (21178 <prvProcessReceivedCommands+0x130>)
   2113e:	47a0      	blx	r4
					break;
   21140:	e005      	b.n	2114e <prvProcessReceivedCommands+0x106>
					allocated. */
					#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
					{
						/* The timer can only have been allocated dynamically -
						free it again. */
						vPortFree( pxTimer );
   21142:	6a3b      	ldr	r3, [r7, #32]
   21144:	0018      	movs	r0, r3
   21146:	4b0e      	ldr	r3, [pc, #56]	; (21180 <prvProcessReceivedCommands+0x138>)
   21148:	4798      	blx	r3
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
   2114a:	e000      	b.n	2114e <prvProcessReceivedCommands+0x106>

				default	:
					/* Don't expect to get here. */
					break;
   2114c:	46c0      	nop			; (mov r8, r8)
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
   2114e:	4b0d      	ldr	r3, [pc, #52]	; (21184 <prvProcessReceivedCommands+0x13c>)
   21150:	681b      	ldr	r3, [r3, #0]
   21152:	2208      	movs	r2, #8
   21154:	18b9      	adds	r1, r7, r2
   21156:	2200      	movs	r2, #0
   21158:	0018      	movs	r0, r3
   2115a:	4b0b      	ldr	r3, [pc, #44]	; (21188 <prvProcessReceivedCommands+0x140>)
   2115c:	4798      	blx	r3
   2115e:	1e03      	subs	r3, r0, #0
   21160:	d000      	beq.n	21164 <prvProcessReceivedCommands+0x11c>
   21162:	e775      	b.n	21050 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
   21164:	46c0      	nop			; (mov r8, r8)
   21166:	46bd      	mov	sp, r7
   21168:	b00b      	add	sp, #44	; 0x2c
   2116a:	bd90      	pop	{r4, r7, pc}
   2116c:	0001ee07 	.word	0x0001ee07
   21170:	00020f79 	.word	0x00020f79
   21174:	0002a730 	.word	0x0002a730
   21178:	00020fc1 	.word	0x00020fc1
   2117c:	00020d3d 	.word	0x00020d3d
   21180:	0001ecd1 	.word	0x0001ecd1
   21184:	200003ec 	.word	0x200003ec
   21188:	0001f2d1 	.word	0x0001f2d1

0002118c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
   2118c:	b590      	push	{r4, r7, lr}
   2118e:	b089      	sub	sp, #36	; 0x24
   21190:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   21192:	e03e      	b.n	21212 <prvSwitchTimerLists+0x86>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   21194:	4b28      	ldr	r3, [pc, #160]	; (21238 <prvSwitchTimerLists+0xac>)
   21196:	681b      	ldr	r3, [r3, #0]
   21198:	68db      	ldr	r3, [r3, #12]
   2119a:	681b      	ldr	r3, [r3, #0]
   2119c:	617b      	str	r3, [r7, #20]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   2119e:	4b26      	ldr	r3, [pc, #152]	; (21238 <prvSwitchTimerLists+0xac>)
   211a0:	681b      	ldr	r3, [r3, #0]
   211a2:	68db      	ldr	r3, [r3, #12]
   211a4:	68db      	ldr	r3, [r3, #12]
   211a6:	613b      	str	r3, [r7, #16]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   211a8:	693b      	ldr	r3, [r7, #16]
   211aa:	3304      	adds	r3, #4
   211ac:	0018      	movs	r0, r3
   211ae:	4b23      	ldr	r3, [pc, #140]	; (2123c <prvSwitchTimerLists+0xb0>)
   211b0:	4798      	blx	r3
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   211b2:	693b      	ldr	r3, [r7, #16]
   211b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   211b6:	693a      	ldr	r2, [r7, #16]
   211b8:	0010      	movs	r0, r2
   211ba:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   211bc:	693b      	ldr	r3, [r7, #16]
   211be:	69db      	ldr	r3, [r3, #28]
   211c0:	2b01      	cmp	r3, #1
   211c2:	d126      	bne.n	21212 <prvSwitchTimerLists+0x86>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
   211c4:	693b      	ldr	r3, [r7, #16]
   211c6:	699a      	ldr	r2, [r3, #24]
   211c8:	697b      	ldr	r3, [r7, #20]
   211ca:	18d3      	adds	r3, r2, r3
   211cc:	60fb      	str	r3, [r7, #12]
			if( xReloadTime > xNextExpireTime )
   211ce:	68fa      	ldr	r2, [r7, #12]
   211d0:	697b      	ldr	r3, [r7, #20]
   211d2:	429a      	cmp	r2, r3
   211d4:	d90e      	bls.n	211f4 <prvSwitchTimerLists+0x68>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
   211d6:	693b      	ldr	r3, [r7, #16]
   211d8:	68fa      	ldr	r2, [r7, #12]
   211da:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   211dc:	693b      	ldr	r3, [r7, #16]
   211de:	693a      	ldr	r2, [r7, #16]
   211e0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   211e2:	4b15      	ldr	r3, [pc, #84]	; (21238 <prvSwitchTimerLists+0xac>)
   211e4:	681a      	ldr	r2, [r3, #0]
   211e6:	693b      	ldr	r3, [r7, #16]
   211e8:	3304      	adds	r3, #4
   211ea:	0019      	movs	r1, r3
   211ec:	0010      	movs	r0, r2
   211ee:	4b14      	ldr	r3, [pc, #80]	; (21240 <prvSwitchTimerLists+0xb4>)
   211f0:	4798      	blx	r3
   211f2:	e00e      	b.n	21212 <prvSwitchTimerLists+0x86>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
   211f4:	697a      	ldr	r2, [r7, #20]
   211f6:	6938      	ldr	r0, [r7, #16]
   211f8:	2300      	movs	r3, #0
   211fa:	9300      	str	r3, [sp, #0]
   211fc:	2300      	movs	r3, #0
   211fe:	2100      	movs	r1, #0
   21200:	4c10      	ldr	r4, [pc, #64]	; (21244 <prvSwitchTimerLists+0xb8>)
   21202:	47a0      	blx	r4
   21204:	0003      	movs	r3, r0
   21206:	60bb      	str	r3, [r7, #8]
				configASSERT( xResult );
   21208:	68bb      	ldr	r3, [r7, #8]
   2120a:	2b00      	cmp	r3, #0
   2120c:	d101      	bne.n	21212 <prvSwitchTimerLists+0x86>
   2120e:	b672      	cpsid	i
   21210:	e7fe      	b.n	21210 <prvSwitchTimerLists+0x84>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   21212:	4b09      	ldr	r3, [pc, #36]	; (21238 <prvSwitchTimerLists+0xac>)
   21214:	681b      	ldr	r3, [r3, #0]
   21216:	681b      	ldr	r3, [r3, #0]
   21218:	2b00      	cmp	r3, #0
   2121a:	d1bb      	bne.n	21194 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
   2121c:	4b06      	ldr	r3, [pc, #24]	; (21238 <prvSwitchTimerLists+0xac>)
   2121e:	681b      	ldr	r3, [r3, #0]
   21220:	607b      	str	r3, [r7, #4]
	pxCurrentTimerList = pxOverflowTimerList;
   21222:	4b09      	ldr	r3, [pc, #36]	; (21248 <prvSwitchTimerLists+0xbc>)
   21224:	681a      	ldr	r2, [r3, #0]
   21226:	4b04      	ldr	r3, [pc, #16]	; (21238 <prvSwitchTimerLists+0xac>)
   21228:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
   2122a:	4b07      	ldr	r3, [pc, #28]	; (21248 <prvSwitchTimerLists+0xbc>)
   2122c:	687a      	ldr	r2, [r7, #4]
   2122e:	601a      	str	r2, [r3, #0]
}
   21230:	46c0      	nop			; (mov r8, r8)
   21232:	46bd      	mov	sp, r7
   21234:	b007      	add	sp, #28
   21236:	bd90      	pop	{r4, r7, pc}
   21238:	200003e4 	.word	0x200003e4
   2123c:	0001ee07 	.word	0x0001ee07
   21240:	0001ed9b 	.word	0x0001ed9b
   21244:	00020d3d 	.word	0x00020d3d
   21248:	200003e8 	.word	0x200003e8

0002124c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
   2124c:	b580      	push	{r7, lr}
   2124e:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
   21250:	4b10      	ldr	r3, [pc, #64]	; (21294 <prvCheckForValidListAndQueue+0x48>)
   21252:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
   21254:	4b10      	ldr	r3, [pc, #64]	; (21298 <prvCheckForValidListAndQueue+0x4c>)
   21256:	681b      	ldr	r3, [r3, #0]
   21258:	2b00      	cmp	r3, #0
   2125a:	d115      	bne.n	21288 <prvCheckForValidListAndQueue+0x3c>
		{
			vListInitialise( &xActiveTimerList1 );
   2125c:	4b0f      	ldr	r3, [pc, #60]	; (2129c <prvCheckForValidListAndQueue+0x50>)
   2125e:	0018      	movs	r0, r3
   21260:	4b0f      	ldr	r3, [pc, #60]	; (212a0 <prvCheckForValidListAndQueue+0x54>)
   21262:	4798      	blx	r3
			vListInitialise( &xActiveTimerList2 );
   21264:	4b0f      	ldr	r3, [pc, #60]	; (212a4 <prvCheckForValidListAndQueue+0x58>)
   21266:	0018      	movs	r0, r3
   21268:	4b0d      	ldr	r3, [pc, #52]	; (212a0 <prvCheckForValidListAndQueue+0x54>)
   2126a:	4798      	blx	r3
			pxCurrentTimerList = &xActiveTimerList1;
   2126c:	4b0e      	ldr	r3, [pc, #56]	; (212a8 <prvCheckForValidListAndQueue+0x5c>)
   2126e:	4a0b      	ldr	r2, [pc, #44]	; (2129c <prvCheckForValidListAndQueue+0x50>)
   21270:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
   21272:	4b0e      	ldr	r3, [pc, #56]	; (212ac <prvCheckForValidListAndQueue+0x60>)
   21274:	4a0b      	ldr	r2, [pc, #44]	; (212a4 <prvCheckForValidListAndQueue+0x58>)
   21276:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
   21278:	2200      	movs	r2, #0
   2127a:	2110      	movs	r1, #16
   2127c:	2005      	movs	r0, #5
   2127e:	4b0c      	ldr	r3, [pc, #48]	; (212b0 <prvCheckForValidListAndQueue+0x64>)
   21280:	4798      	blx	r3
   21282:	0002      	movs	r2, r0
   21284:	4b04      	ldr	r3, [pc, #16]	; (21298 <prvCheckForValidListAndQueue+0x4c>)
   21286:	601a      	str	r2, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
   21288:	4b0a      	ldr	r3, [pc, #40]	; (212b4 <prvCheckForValidListAndQueue+0x68>)
   2128a:	4798      	blx	r3
}
   2128c:	46c0      	nop			; (mov r8, r8)
   2128e:	46bd      	mov	sp, r7
   21290:	bd80      	pop	{r7, pc}
   21292:	46c0      	nop			; (mov r8, r8)
   21294:	0001eb61 	.word	0x0001eb61
   21298:	200003ec 	.word	0x200003ec
   2129c:	200003bc 	.word	0x200003bc
   212a0:	0001ed05 	.word	0x0001ed05
   212a4:	200003d0 	.word	0x200003d0
   212a8:	200003e4 	.word	0x200003e4
   212ac:	200003e8 	.word	0x200003e8
   212b0:	0001ef15 	.word	0x0001ef15
   212b4:	0001eb85 	.word	0x0001eb85

000212b8 <xTimerIsTimerActive>:
/*-----------------------------------------------------------*/

BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )
{
   212b8:	b580      	push	{r7, lr}
   212ba:	b084      	sub	sp, #16
   212bc:	af00      	add	r7, sp, #0
   212be:	6078      	str	r0, [r7, #4]
BaseType_t xTimerIsInActiveList;
Timer_t *pxTimer = ( Timer_t * ) xTimer;
   212c0:	687b      	ldr	r3, [r7, #4]
   212c2:	60fb      	str	r3, [r7, #12]

	configASSERT( xTimer );
   212c4:	687b      	ldr	r3, [r7, #4]
   212c6:	2b00      	cmp	r3, #0
   212c8:	d101      	bne.n	212ce <xTimerIsTimerActive+0x16>
   212ca:	b672      	cpsid	i
   212cc:	e7fe      	b.n	212cc <xTimerIsTimerActive+0x14>

	/* Is the timer in the list of active timers? */
	taskENTER_CRITICAL();
   212ce:	4b07      	ldr	r3, [pc, #28]	; (212ec <xTimerIsTimerActive+0x34>)
   212d0:	4798      	blx	r3
	{
		/* Checking to see if it is in the NULL list in effect checks to see if
		it is referenced from either the current or the overflow timer lists in
		one go, but the logic has to be reversed, hence the '!'. */
		xTimerIsInActiveList = ( BaseType_t ) !( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) ); /*lint !e961. Cast is only redundant when NULL is passed into the macro. */
   212d2:	68fb      	ldr	r3, [r7, #12]
   212d4:	695b      	ldr	r3, [r3, #20]
   212d6:	1e5a      	subs	r2, r3, #1
   212d8:	4193      	sbcs	r3, r2
   212da:	b2db      	uxtb	r3, r3
   212dc:	60bb      	str	r3, [r7, #8]
	}
	taskEXIT_CRITICAL();
   212de:	4b04      	ldr	r3, [pc, #16]	; (212f0 <xTimerIsTimerActive+0x38>)
   212e0:	4798      	blx	r3

	return xTimerIsInActiveList;
   212e2:	68bb      	ldr	r3, [r7, #8]
} /*lint !e818 Can't be pointer to const due to the typedef. */
   212e4:	0018      	movs	r0, r3
   212e6:	46bd      	mov	sp, r7
   212e8:	b004      	add	sp, #16
   212ea:	bd80      	pop	{r7, pc}
   212ec:	0001eb61 	.word	0x0001eb61
   212f0:	0001eb85 	.word	0x0001eb85

000212f4 <wdt_clear_early_warning>:
 *
 *  Clears the Watchdog timer early warning period elapsed flag, so that a new
 *  early warning period can be detected.
 */
static inline void wdt_clear_early_warning(void)
{
   212f4:	b580      	push	{r7, lr}
   212f6:	b082      	sub	sp, #8
   212f8:	af00      	add	r7, sp, #0
	Wdt *const WDT_module = WDT;
   212fa:	4b04      	ldr	r3, [pc, #16]	; (2130c <wdt_clear_early_warning+0x18>)
   212fc:	607b      	str	r3, [r7, #4]

	WDT_module->INTFLAG.reg = WDT_INTFLAG_EW;
   212fe:	687b      	ldr	r3, [r7, #4]
   21300:	2201      	movs	r2, #1
   21302:	719a      	strb	r2, [r3, #6]
}
   21304:	46c0      	nop			; (mov r8, r8)
   21306:	46bd      	mov	sp, r7
   21308:	b002      	add	sp, #8
   2130a:	bd80      	pop	{r7, pc}
   2130c:	40001000 	.word	0x40001000

00021310 <WDT_Handler>:
	}
}

/** Handler for the WDT hardware module interrupt. */
void WDT_Handler(void)
{
   21310:	b580      	push	{r7, lr}
   21312:	af00      	add	r7, sp, #0
	wdt_clear_early_warning();
   21314:	4b05      	ldr	r3, [pc, #20]	; (2132c <WDT_Handler+0x1c>)
   21316:	4798      	blx	r3

	if (wdt_early_warning_callback) {
   21318:	4b05      	ldr	r3, [pc, #20]	; (21330 <WDT_Handler+0x20>)
   2131a:	681b      	ldr	r3, [r3, #0]
   2131c:	2b00      	cmp	r3, #0
   2131e:	d002      	beq.n	21326 <WDT_Handler+0x16>
		wdt_early_warning_callback();
   21320:	4b03      	ldr	r3, [pc, #12]	; (21330 <WDT_Handler+0x20>)
   21322:	681b      	ldr	r3, [r3, #0]
   21324:	4798      	blx	r3
	}
}
   21326:	46c0      	nop			; (mov r8, r8)
   21328:	46bd      	mov	sp, r7
   2132a:	bd80      	pop	{r7, pc}
   2132c:	000212f5 	.word	0x000212f5
   21330:	20000944 	.word	0x20000944

00021334 <TCC0_Handler>:
		void TCC##n##_Handler(void) \
		{ \
			_tcc_interrupt_handler(n); \
		}

MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
   21334:	b580      	push	{r7, lr}
   21336:	af00      	add	r7, sp, #0
   21338:	2000      	movs	r0, #0
   2133a:	4b02      	ldr	r3, [pc, #8]	; (21344 <TCC0_Handler+0x10>)
   2133c:	4798      	blx	r3
   2133e:	46c0      	nop			; (mov r8, r8)
   21340:	46bd      	mov	sp, r7
   21342:	bd80      	pop	{r7, pc}
   21344:	00021371 	.word	0x00021371

00021348 <TCC1_Handler>:
   21348:	b580      	push	{r7, lr}
   2134a:	af00      	add	r7, sp, #0
   2134c:	2001      	movs	r0, #1
   2134e:	4b02      	ldr	r3, [pc, #8]	; (21358 <TCC1_Handler+0x10>)
   21350:	4798      	blx	r3
   21352:	46c0      	nop			; (mov r8, r8)
   21354:	46bd      	mov	sp, r7
   21356:	bd80      	pop	{r7, pc}
   21358:	00021371 	.word	0x00021371

0002135c <TCC2_Handler>:
   2135c:	b580      	push	{r7, lr}
   2135e:	af00      	add	r7, sp, #0
   21360:	2002      	movs	r0, #2
   21362:	4b02      	ldr	r3, [pc, #8]	; (2136c <TCC2_Handler+0x10>)
   21364:	4798      	blx	r3
   21366:	46c0      	nop			; (mov r8, r8)
   21368:	46bd      	mov	sp, r7
   2136a:	bd80      	pop	{r7, pc}
   2136c:	00021371 	.word	0x00021371

00021370 <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
   21370:	b580      	push	{r7, lr}
   21372:	b086      	sub	sp, #24
   21374:	af00      	add	r7, sp, #0
   21376:	0002      	movs	r2, r0
   21378:	1dfb      	adds	r3, r7, #7
   2137a:	701a      	strb	r2, [r3, #0]
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
			(struct tcc_module *)_tcc_instances[module_index];
   2137c:	1dfb      	adds	r3, r7, #7
   2137e:	781a      	ldrb	r2, [r3, #0]
	struct tcc_module *module =
   21380:	4b18      	ldr	r3, [pc, #96]	; (213e4 <_tcc_interrupt_handler+0x74>)
   21382:	0092      	lsls	r2, r2, #2
   21384:	58d3      	ldr	r3, [r2, r3]
   21386:	613b      	str	r3, [r7, #16]

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
   21388:	693b      	ldr	r3, [r7, #16]
   2138a:	681b      	ldr	r3, [r3, #0]
   2138c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
			module->register_callback_mask &
   2138e:	693b      	ldr	r3, [r7, #16]
   21390:	6b5b      	ldr	r3, [r3, #52]	; 0x34
	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
   21392:	401a      	ands	r2, r3
			module->enable_callback_mask);
   21394:	693b      	ldr	r3, [r7, #16]
   21396:	6b9b      	ldr	r3, [r3, #56]	; 0x38
	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
   21398:	4013      	ands	r3, r2
   2139a:	60fb      	str	r3, [r7, #12]

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
   2139c:	2300      	movs	r3, #0
   2139e:	617b      	str	r3, [r7, #20]
   213a0:	e019      	b.n	213d6 <_tcc_interrupt_handler+0x66>
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
   213a2:	4b11      	ldr	r3, [pc, #68]	; (213e8 <_tcc_interrupt_handler+0x78>)
   213a4:	697a      	ldr	r2, [r7, #20]
   213a6:	0092      	lsls	r2, r2, #2
   213a8:	58d3      	ldr	r3, [r2, r3]
   213aa:	68fa      	ldr	r2, [r7, #12]
   213ac:	4013      	ands	r3, r2
   213ae:	d00f      	beq.n	213d0 <_tcc_interrupt_handler+0x60>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
   213b0:	693a      	ldr	r2, [r7, #16]
   213b2:	697b      	ldr	r3, [r7, #20]
   213b4:	009b      	lsls	r3, r3, #2
   213b6:	18d3      	adds	r3, r2, r3
   213b8:	3304      	adds	r3, #4
   213ba:	681b      	ldr	r3, [r3, #0]
   213bc:	693a      	ldr	r2, [r7, #16]
   213be:	0010      	movs	r0, r2
   213c0:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
   213c2:	693b      	ldr	r3, [r7, #16]
   213c4:	681b      	ldr	r3, [r3, #0]
   213c6:	4a08      	ldr	r2, [pc, #32]	; (213e8 <_tcc_interrupt_handler+0x78>)
   213c8:	6979      	ldr	r1, [r7, #20]
   213ca:	0089      	lsls	r1, r1, #2
   213cc:	588a      	ldr	r2, [r1, r2]
   213ce:	62da      	str	r2, [r3, #44]	; 0x2c
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
   213d0:	697b      	ldr	r3, [r7, #20]
   213d2:	3301      	adds	r3, #1
   213d4:	617b      	str	r3, [r7, #20]
   213d6:	697b      	ldr	r3, [r7, #20]
   213d8:	2b0b      	cmp	r3, #11
   213da:	dde2      	ble.n	213a2 <_tcc_interrupt_handler+0x32>
		}
	}
}
   213dc:	46c0      	nop			; (mov r8, r8)
   213de:	46bd      	mov	sp, r7
   213e0:	b006      	add	sp, #24
   213e2:	bd80      	pop	{r7, pc}
   213e4:	20000948 	.word	0x20000948
   213e8:	0002a758 	.word	0x0002a758

000213ec <TC3_Handler>:
#if (SAML21E) || (SAML21G) || (SAMR30E) || (SAMR30G)
	_TC_INTERRUPT_HANDLER(0,0)
	_TC_INTERRUPT_HANDLER(1,1)
	_TC_INTERRUPT_HANDLER(4,2)
#else
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
   213ec:	b580      	push	{r7, lr}
   213ee:	af00      	add	r7, sp, #0
   213f0:	2000      	movs	r0, #0
   213f2:	4b02      	ldr	r3, [pc, #8]	; (213fc <TC3_Handler+0x10>)
   213f4:	4798      	blx	r3
   213f6:	46c0      	nop			; (mov r8, r8)
   213f8:	46bd      	mov	sp, r7
   213fa:	bd80      	pop	{r7, pc}
   213fc:	00021451 	.word	0x00021451

00021400 <TC4_Handler>:
   21400:	b580      	push	{r7, lr}
   21402:	af00      	add	r7, sp, #0
   21404:	2001      	movs	r0, #1
   21406:	4b02      	ldr	r3, [pc, #8]	; (21410 <TC4_Handler+0x10>)
   21408:	4798      	blx	r3
   2140a:	46c0      	nop			; (mov r8, r8)
   2140c:	46bd      	mov	sp, r7
   2140e:	bd80      	pop	{r7, pc}
   21410:	00021451 	.word	0x00021451

00021414 <TC5_Handler>:
   21414:	b580      	push	{r7, lr}
   21416:	af00      	add	r7, sp, #0
   21418:	2002      	movs	r0, #2
   2141a:	4b02      	ldr	r3, [pc, #8]	; (21424 <TC5_Handler+0x10>)
   2141c:	4798      	blx	r3
   2141e:	46c0      	nop			; (mov r8, r8)
   21420:	46bd      	mov	sp, r7
   21422:	bd80      	pop	{r7, pc}
   21424:	00021451 	.word	0x00021451

00021428 <TC6_Handler>:
   21428:	b580      	push	{r7, lr}
   2142a:	af00      	add	r7, sp, #0
   2142c:	2003      	movs	r0, #3
   2142e:	4b02      	ldr	r3, [pc, #8]	; (21438 <TC6_Handler+0x10>)
   21430:	4798      	blx	r3
   21432:	46c0      	nop			; (mov r8, r8)
   21434:	46bd      	mov	sp, r7
   21436:	bd80      	pop	{r7, pc}
   21438:	00021451 	.word	0x00021451

0002143c <TC7_Handler>:
   2143c:	b580      	push	{r7, lr}
   2143e:	af00      	add	r7, sp, #0
   21440:	2004      	movs	r0, #4
   21442:	4b02      	ldr	r3, [pc, #8]	; (2144c <TC7_Handler+0x10>)
   21444:	4798      	blx	r3
   21446:	46c0      	nop			; (mov r8, r8)
   21448:	46bd      	mov	sp, r7
   2144a:	bd80      	pop	{r7, pc}
   2144c:	00021451 	.word	0x00021451

00021450 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
   21450:	b580      	push	{r7, lr}
   21452:	b084      	sub	sp, #16
   21454:	af00      	add	r7, sp, #0
   21456:	0002      	movs	r2, r0
   21458:	1dfb      	adds	r3, r7, #7
   2145a:	701a      	strb	r2, [r3, #0]
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
			= (struct tc_module *)_tc_instances[instance];
   2145c:	1dfb      	adds	r3, r7, #7
   2145e:	781a      	ldrb	r2, [r3, #0]
	struct tc_module *module
   21460:	4b28      	ldr	r3, [pc, #160]	; (21504 <_tc_interrupt_handler+0xb4>)
   21462:	0092      	lsls	r2, r2, #2
   21464:	58d3      	ldr	r3, [r2, r3]
   21466:	60fb      	str	r3, [r7, #12]

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
   21468:	68fb      	ldr	r3, [r7, #12]
   2146a:	681b      	ldr	r3, [r3, #0]
   2146c:	7b9b      	ldrb	r3, [r3, #14]
   2146e:	b2db      	uxtb	r3, r3
			module->register_callback_mask &
   21470:	68fa      	ldr	r2, [r7, #12]
   21472:	7e12      	ldrb	r2, [r2, #24]
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
   21474:	4013      	ands	r3, r2
   21476:	b2da      	uxtb	r2, r3
			module->enable_callback_mask;
   21478:	68fb      	ldr	r3, [r7, #12]
   2147a:	7e59      	ldrb	r1, [r3, #25]
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
   2147c:	230b      	movs	r3, #11
   2147e:	18fb      	adds	r3, r7, r3
   21480:	400a      	ands	r2, r1
   21482:	701a      	strb	r2, [r3, #0]

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
   21484:	230b      	movs	r3, #11
   21486:	18fb      	adds	r3, r7, r3
   21488:	781b      	ldrb	r3, [r3, #0]
   2148a:	2201      	movs	r2, #1
   2148c:	4013      	ands	r3, r2
   2148e:	d008      	beq.n	214a2 <_tc_interrupt_handler+0x52>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
   21490:	68fb      	ldr	r3, [r7, #12]
   21492:	689b      	ldr	r3, [r3, #8]
   21494:	68fa      	ldr	r2, [r7, #12]
   21496:	0010      	movs	r0, r2
   21498:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
   2149a:	68fb      	ldr	r3, [r7, #12]
   2149c:	681b      	ldr	r3, [r3, #0]
   2149e:	2201      	movs	r2, #1
   214a0:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
   214a2:	230b      	movs	r3, #11
   214a4:	18fb      	adds	r3, r7, r3
   214a6:	781b      	ldrb	r3, [r3, #0]
   214a8:	2202      	movs	r2, #2
   214aa:	4013      	ands	r3, r2
   214ac:	d008      	beq.n	214c0 <_tc_interrupt_handler+0x70>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_ERROR])(module);
   214ae:	68fb      	ldr	r3, [r7, #12]
   214b0:	68db      	ldr	r3, [r3, #12]
   214b2:	68fa      	ldr	r2, [r7, #12]
   214b4:	0010      	movs	r0, r2
   214b6:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
   214b8:	68fb      	ldr	r3, [r7, #12]
   214ba:	681b      	ldr	r3, [r3, #0]
   214bc:	2202      	movs	r2, #2
   214be:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
   214c0:	230b      	movs	r3, #11
   214c2:	18fb      	adds	r3, r7, r3
   214c4:	781b      	ldrb	r3, [r3, #0]
   214c6:	2210      	movs	r2, #16
   214c8:	4013      	ands	r3, r2
   214ca:	d008      	beq.n	214de <_tc_interrupt_handler+0x8e>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
   214cc:	68fb      	ldr	r3, [r7, #12]
   214ce:	691b      	ldr	r3, [r3, #16]
   214d0:	68fa      	ldr	r2, [r7, #12]
   214d2:	0010      	movs	r0, r2
   214d4:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
   214d6:	68fb      	ldr	r3, [r7, #12]
   214d8:	681b      	ldr	r3, [r3, #0]
   214da:	2210      	movs	r2, #16
   214dc:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
   214de:	230b      	movs	r3, #11
   214e0:	18fb      	adds	r3, r7, r3
   214e2:	781b      	ldrb	r3, [r3, #0]
   214e4:	2220      	movs	r2, #32
   214e6:	4013      	ands	r3, r2
   214e8:	d008      	beq.n	214fc <_tc_interrupt_handler+0xac>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
   214ea:	68fb      	ldr	r3, [r7, #12]
   214ec:	695b      	ldr	r3, [r3, #20]
   214ee:	68fa      	ldr	r2, [r7, #12]
   214f0:	0010      	movs	r0, r2
   214f2:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
   214f4:	68fb      	ldr	r3, [r7, #12]
   214f6:	681b      	ldr	r3, [r3, #0]
   214f8:	2220      	movs	r2, #32
   214fa:	739a      	strb	r2, [r3, #14]
	}
}
   214fc:	46c0      	nop			; (mov r8, r8)
   214fe:	46bd      	mov	sp, r7
   21500:	b004      	add	sp, #16
   21502:	bd80      	pop	{r7, pc}
   21504:	20000954 	.word	0x20000954

00021508 <system_gclk_chan_get_config_defaults>:
{
   21508:	b580      	push	{r7, lr}
   2150a:	b082      	sub	sp, #8
   2150c:	af00      	add	r7, sp, #0
   2150e:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   21510:	687b      	ldr	r3, [r7, #4]
   21512:	2200      	movs	r2, #0
   21514:	701a      	strb	r2, [r3, #0]
}
   21516:	46c0      	nop			; (mov r8, r8)
   21518:	46bd      	mov	sp, r7
   2151a:	b002      	add	sp, #8
   2151c:	bd80      	pop	{r7, pc}
	...

00021520 <system_apb_clock_set_mask>:
{
   21520:	b580      	push	{r7, lr}
   21522:	b082      	sub	sp, #8
   21524:	af00      	add	r7, sp, #0
   21526:	0002      	movs	r2, r0
   21528:	6039      	str	r1, [r7, #0]
   2152a:	1dfb      	adds	r3, r7, #7
   2152c:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   2152e:	1dfb      	adds	r3, r7, #7
   21530:	781b      	ldrb	r3, [r3, #0]
   21532:	2b01      	cmp	r3, #1
   21534:	d00a      	beq.n	2154c <system_apb_clock_set_mask+0x2c>
   21536:	2b02      	cmp	r3, #2
   21538:	d00f      	beq.n	2155a <system_apb_clock_set_mask+0x3a>
   2153a:	2b00      	cmp	r3, #0
   2153c:	d114      	bne.n	21568 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   2153e:	4b0e      	ldr	r3, [pc, #56]	; (21578 <system_apb_clock_set_mask+0x58>)
   21540:	4a0d      	ldr	r2, [pc, #52]	; (21578 <system_apb_clock_set_mask+0x58>)
   21542:	6991      	ldr	r1, [r2, #24]
   21544:	683a      	ldr	r2, [r7, #0]
   21546:	430a      	orrs	r2, r1
   21548:	619a      	str	r2, [r3, #24]
			break;
   2154a:	e00f      	b.n	2156c <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   2154c:	4b0a      	ldr	r3, [pc, #40]	; (21578 <system_apb_clock_set_mask+0x58>)
   2154e:	4a0a      	ldr	r2, [pc, #40]	; (21578 <system_apb_clock_set_mask+0x58>)
   21550:	69d1      	ldr	r1, [r2, #28]
   21552:	683a      	ldr	r2, [r7, #0]
   21554:	430a      	orrs	r2, r1
   21556:	61da      	str	r2, [r3, #28]
			break;
   21558:	e008      	b.n	2156c <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   2155a:	4b07      	ldr	r3, [pc, #28]	; (21578 <system_apb_clock_set_mask+0x58>)
   2155c:	4a06      	ldr	r2, [pc, #24]	; (21578 <system_apb_clock_set_mask+0x58>)
   2155e:	6a11      	ldr	r1, [r2, #32]
   21560:	683a      	ldr	r2, [r7, #0]
   21562:	430a      	orrs	r2, r1
   21564:	621a      	str	r2, [r3, #32]
			break;
   21566:	e001      	b.n	2156c <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   21568:	2317      	movs	r3, #23
   2156a:	e000      	b.n	2156e <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   2156c:	2300      	movs	r3, #0
}
   2156e:	0018      	movs	r0, r3
   21570:	46bd      	mov	sp, r7
   21572:	b002      	add	sp, #8
   21574:	bd80      	pop	{r7, pc}
   21576:	46c0      	nop			; (mov r8, r8)
   21578:	40000400 	.word	0x40000400

0002157c <system_pinmux_get_config_defaults>:
{
   2157c:	b580      	push	{r7, lr}
   2157e:	b082      	sub	sp, #8
   21580:	af00      	add	r7, sp, #0
   21582:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   21584:	687b      	ldr	r3, [r7, #4]
   21586:	2280      	movs	r2, #128	; 0x80
   21588:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   2158a:	687b      	ldr	r3, [r7, #4]
   2158c:	2200      	movs	r2, #0
   2158e:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   21590:	687b      	ldr	r3, [r7, #4]
   21592:	2201      	movs	r2, #1
   21594:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   21596:	687b      	ldr	r3, [r7, #4]
   21598:	2200      	movs	r2, #0
   2159a:	70da      	strb	r2, [r3, #3]
}
   2159c:	46c0      	nop			; (mov r8, r8)
   2159e:	46bd      	mov	sp, r7
   215a0:	b002      	add	sp, #8
   215a2:	bd80      	pop	{r7, pc}

000215a4 <system_is_debugger_present>:
 * \retval true  Debugger is connected to the system
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
   215a4:	b580      	push	{r7, lr}
   215a6:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
   215a8:	4b05      	ldr	r3, [pc, #20]	; (215c0 <system_is_debugger_present+0x1c>)
   215aa:	789b      	ldrb	r3, [r3, #2]
   215ac:	b2db      	uxtb	r3, r3
   215ae:	001a      	movs	r2, r3
   215b0:	2302      	movs	r3, #2
   215b2:	4013      	ands	r3, r2
   215b4:	1e5a      	subs	r2, r3, #1
   215b6:	4193      	sbcs	r3, r2
   215b8:	b2db      	uxtb	r3, r3
}
   215ba:	0018      	movs	r0, r3
   215bc:	46bd      	mov	sp, r7
   215be:	bd80      	pop	{r7, pc}
   215c0:	41002000 	.word	0x41002000

000215c4 <usart_is_syncing>:
{
   215c4:	b580      	push	{r7, lr}
   215c6:	b084      	sub	sp, #16
   215c8:	af00      	add	r7, sp, #0
   215ca:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
   215cc:	687b      	ldr	r3, [r7, #4]
   215ce:	681b      	ldr	r3, [r3, #0]
   215d0:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
   215d2:	68fb      	ldr	r3, [r7, #12]
   215d4:	69db      	ldr	r3, [r3, #28]
   215d6:	1e5a      	subs	r2, r3, #1
   215d8:	4193      	sbcs	r3, r2
   215da:	b2db      	uxtb	r3, r3
}
   215dc:	0018      	movs	r0, r3
   215de:	46bd      	mov	sp, r7
   215e0:	b004      	add	sp, #16
   215e2:	bd80      	pop	{r7, pc}

000215e4 <_usart_wait_for_sync>:
{
   215e4:	b580      	push	{r7, lr}
   215e6:	b082      	sub	sp, #8
   215e8:	af00      	add	r7, sp, #0
   215ea:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
   215ec:	46c0      	nop			; (mov r8, r8)
   215ee:	687b      	ldr	r3, [r7, #4]
   215f0:	0018      	movs	r0, r3
   215f2:	4b04      	ldr	r3, [pc, #16]	; (21604 <_usart_wait_for_sync+0x20>)
   215f4:	4798      	blx	r3
   215f6:	1e03      	subs	r3, r0, #0
   215f8:	d1f9      	bne.n	215ee <_usart_wait_for_sync+0xa>
}
   215fa:	46c0      	nop			; (mov r8, r8)
   215fc:	46bd      	mov	sp, r7
   215fe:	b002      	add	sp, #8
   21600:	bd80      	pop	{r7, pc}
   21602:	46c0      	nop			; (mov r8, r8)
   21604:	000215c5 	.word	0x000215c5

00021608 <_usart_set_config>:
 * Set Configuration of the USART module
 */
static enum status_code _usart_set_config(
		struct usart_module *const module,
		const struct usart_config *const config)
{
   21608:	b5b0      	push	{r4, r5, r7, lr}
   2160a:	b08c      	sub	sp, #48	; 0x30
   2160c:	af02      	add	r7, sp, #8
   2160e:	6078      	str	r0, [r7, #4]
   21610:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   21612:	687b      	ldr	r3, [r7, #4]
   21614:	681b      	ldr	r3, [r3, #0]
   21616:	61bb      	str	r3, [r7, #24]

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   21618:	687b      	ldr	r3, [r7, #4]
   2161a:	681b      	ldr	r3, [r3, #0]
   2161c:	0018      	movs	r0, r3
   2161e:	4bab      	ldr	r3, [pc, #684]	; (218cc <_usart_set_config+0x2c4>)
   21620:	4798      	blx	r3
   21622:	0003      	movs	r3, r0
   21624:	617b      	str	r3, [r7, #20]
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#else
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   21626:	697b      	ldr	r3, [r7, #20]
   21628:	3314      	adds	r3, #20
   2162a:	613b      	str	r3, [r7, #16]
#endif

	/* Cache new register values to minimize the number of register writes */
	uint32_t ctrla = 0;
   2162c:	2300      	movs	r3, #0
   2162e:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t ctrlb = 0;
   21630:	2300      	movs	r3, #0
   21632:	623b      	str	r3, [r7, #32]
#ifdef FEATURE_USART_ISO7816
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
   21634:	230a      	movs	r3, #10
   21636:	18fb      	adds	r3, r7, r3
   21638:	2200      	movs	r2, #0
   2163a:	801a      	strh	r2, [r3, #0]
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   2163c:	231f      	movs	r3, #31
   2163e:	18fb      	adds	r3, r7, r3
   21640:	2200      	movs	r2, #0
   21642:	701a      	strb	r2, [r3, #0]
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
   21644:	231e      	movs	r3, #30
   21646:	18fb      	adds	r3, r7, r3
   21648:	2210      	movs	r2, #16
   2164a:	701a      	strb	r2, [r3, #0]

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
   2164c:	683b      	ldr	r3, [r7, #0]
   2164e:	8a1b      	ldrh	r3, [r3, #16]
   21650:	2280      	movs	r2, #128	; 0x80
   21652:	01d2      	lsls	r2, r2, #7
   21654:	4293      	cmp	r3, r2
   21656:	d01c      	beq.n	21692 <_usart_set_config+0x8a>
   21658:	2280      	movs	r2, #128	; 0x80
   2165a:	01d2      	lsls	r2, r2, #7
   2165c:	4293      	cmp	r3, r2
   2165e:	dc06      	bgt.n	2166e <_usart_set_config+0x66>
   21660:	2b00      	cmp	r3, #0
   21662:	d00d      	beq.n	21680 <_usart_set_config+0x78>
   21664:	2280      	movs	r2, #128	; 0x80
   21666:	0192      	lsls	r2, r2, #6
   21668:	4293      	cmp	r3, r2
   2166a:	d024      	beq.n	216b6 <_usart_set_config+0xae>
   2166c:	e035      	b.n	216da <_usart_set_config+0xd2>
   2166e:	22c0      	movs	r2, #192	; 0xc0
   21670:	01d2      	lsls	r2, r2, #7
   21672:	4293      	cmp	r3, r2
   21674:	d028      	beq.n	216c8 <_usart_set_config+0xc0>
   21676:	2280      	movs	r2, #128	; 0x80
   21678:	0212      	lsls	r2, r2, #8
   2167a:	4293      	cmp	r3, r2
   2167c:	d012      	beq.n	216a4 <_usart_set_config+0x9c>
   2167e:	e02c      	b.n	216da <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   21680:	231f      	movs	r3, #31
   21682:	18fb      	adds	r3, r7, r3
   21684:	2200      	movs	r2, #0
   21686:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
   21688:	231e      	movs	r3, #30
   2168a:	18fb      	adds	r3, r7, r3
   2168c:	2210      	movs	r2, #16
   2168e:	701a      	strb	r2, [r3, #0]
			break;
   21690:	e023      	b.n	216da <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   21692:	231f      	movs	r3, #31
   21694:	18fb      	adds	r3, r7, r3
   21696:	2200      	movs	r2, #0
   21698:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
   2169a:	231e      	movs	r3, #30
   2169c:	18fb      	adds	r3, r7, r3
   2169e:	2208      	movs	r2, #8
   216a0:	701a      	strb	r2, [r3, #0]
			break;
   216a2:	e01a      	b.n	216da <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   216a4:	231f      	movs	r3, #31
   216a6:	18fb      	adds	r3, r7, r3
   216a8:	2200      	movs	r2, #0
   216aa:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
   216ac:	231e      	movs	r3, #30
   216ae:	18fb      	adds	r3, r7, r3
   216b0:	2203      	movs	r2, #3
   216b2:	701a      	strb	r2, [r3, #0]
			break;
   216b4:	e011      	b.n	216da <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
   216b6:	231f      	movs	r3, #31
   216b8:	18fb      	adds	r3, r7, r3
   216ba:	2201      	movs	r2, #1
   216bc:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
   216be:	231e      	movs	r3, #30
   216c0:	18fb      	adds	r3, r7, r3
   216c2:	2210      	movs	r2, #16
   216c4:	701a      	strb	r2, [r3, #0]
			break;
   216c6:	e008      	b.n	216da <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
   216c8:	231f      	movs	r3, #31
   216ca:	18fb      	adds	r3, r7, r3
   216cc:	2201      	movs	r2, #1
   216ce:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
   216d0:	231e      	movs	r3, #30
   216d2:	18fb      	adds	r3, r7, r3
   216d4:	2208      	movs	r2, #8
   216d6:	701a      	strb	r2, [r3, #0]
			break;
   216d8:	46c0      	nop			; (mov r8, r8)
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
   216da:	683b      	ldr	r3, [r7, #0]
   216dc:	681a      	ldr	r2, [r3, #0]
		(uint32_t)config->mux_setting |
   216de:	683b      	ldr	r3, [r7, #0]
   216e0:	68db      	ldr	r3, [r3, #12]
	ctrla = (uint32_t)config->data_order |
   216e2:	431a      	orrs	r2, r3
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
   216e4:	683b      	ldr	r3, [r7, #0]
   216e6:	695b      	ldr	r3, [r3, #20]
		(uint32_t)config->mux_setting |
   216e8:	4313      	orrs	r3, r2
		config->sample_rate |
   216ea:	683a      	ldr	r2, [r7, #0]
   216ec:	8a12      	ldrh	r2, [r2, #16]
		config->sample_adjustment |
   216ee:	4313      	orrs	r3, r2
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
   216f0:	683a      	ldr	r2, [r7, #0]
   216f2:	7e12      	ldrb	r2, [r2, #24]
   216f4:	0212      	lsls	r2, r2, #8
		config->sample_rate |
   216f6:	4313      	orrs	r3, r2
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
   216f8:	683a      	ldr	r2, [r7, #0]
   216fa:	2126      	movs	r1, #38	; 0x26
   216fc:	5c52      	ldrb	r2, [r2, r1]
   216fe:	0752      	lsls	r2, r2, #29
	ctrla = (uint32_t)config->data_order |
   21700:	4313      	orrs	r3, r2
   21702:	627b      	str	r3, [r7, #36]	; 0x24

	enum status_code status_code = STATUS_OK;
   21704:	231d      	movs	r3, #29
   21706:	18fb      	adds	r3, r7, r3
   21708:	2200      	movs	r2, #0
   2170a:	701a      	strb	r2, [r3, #0]

	transfer_mode = (uint32_t)config->transfer_mode;
   2170c:	683b      	ldr	r3, [r7, #0]
   2170e:	685b      	ldr	r3, [r3, #4]
   21710:	60fb      	str	r3, [r7, #12]
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
   21712:	68fb      	ldr	r3, [r7, #12]
   21714:	2b00      	cmp	r3, #0
   21716:	d01e      	beq.n	21756 <_usart_set_config+0x14e>
   21718:	2280      	movs	r2, #128	; 0x80
   2171a:	0552      	lsls	r2, r2, #21
   2171c:	4293      	cmp	r3, r2
   2171e:	d14f      	bne.n	217c0 <_usart_set_config+0x1b8>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
   21720:	683b      	ldr	r3, [r7, #0]
   21722:	2227      	movs	r2, #39	; 0x27
   21724:	5c9b      	ldrb	r3, [r3, r2]
   21726:	2201      	movs	r2, #1
   21728:	4053      	eors	r3, r2
   2172a:	b2db      	uxtb	r3, r3
   2172c:	2b00      	cmp	r3, #0
   2172e:	d046      	beq.n	217be <_usart_set_config+0x1b6>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
   21730:	683b      	ldr	r3, [r7, #0]
   21732:	6a1d      	ldr	r5, [r3, #32]
   21734:	693b      	ldr	r3, [r7, #16]
   21736:	b2db      	uxtb	r3, r3
   21738:	0018      	movs	r0, r3
   2173a:	4b65      	ldr	r3, [pc, #404]	; (218d0 <_usart_set_config+0x2c8>)
   2173c:	4798      	blx	r3
   2173e:	0001      	movs	r1, r0
   21740:	231d      	movs	r3, #29
   21742:	18fc      	adds	r4, r7, r3
   21744:	230a      	movs	r3, #10
   21746:	18fb      	adds	r3, r7, r3
   21748:	001a      	movs	r2, r3
   2174a:	0028      	movs	r0, r5
   2174c:	4b61      	ldr	r3, [pc, #388]	; (218d4 <_usart_set_config+0x2cc>)
   2174e:	4798      	blx	r3
   21750:	0003      	movs	r3, r0
   21752:	7023      	strb	r3, [r4, #0]
						system_gclk_chan_get_hz(gclk_index), &baud);
			}

			break;
   21754:	e033      	b.n	217be <_usart_set_config+0x1b6>

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
   21756:	683b      	ldr	r3, [r7, #0]
   21758:	2227      	movs	r2, #39	; 0x27
   2175a:	5c9b      	ldrb	r3, [r3, r2]
   2175c:	2b00      	cmp	r3, #0
   2175e:	d014      	beq.n	2178a <_usart_set_config+0x182>
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
   21760:	683b      	ldr	r3, [r7, #0]
   21762:	6a18      	ldr	r0, [r3, #32]
   21764:	683b      	ldr	r3, [r7, #0]
   21766:	6a99      	ldr	r1, [r3, #40]	; 0x28
				status_code =
   21768:	231d      	movs	r3, #29
   2176a:	18fc      	adds	r4, r7, r3
   2176c:	231f      	movs	r3, #31
   2176e:	18fb      	adds	r3, r7, r3
   21770:	781d      	ldrb	r5, [r3, #0]
   21772:	230a      	movs	r3, #10
   21774:	18fa      	adds	r2, r7, r3
   21776:	231e      	movs	r3, #30
   21778:	18fb      	adds	r3, r7, r3
   2177a:	781b      	ldrb	r3, [r3, #0]
   2177c:	9300      	str	r3, [sp, #0]
   2177e:	002b      	movs	r3, r5
   21780:	4d55      	ldr	r5, [pc, #340]	; (218d8 <_usart_set_config+0x2d0>)
   21782:	47a8      	blx	r5
   21784:	0003      	movs	r3, r0
   21786:	7023      	strb	r3, [r4, #0]
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							system_gclk_chan_get_hz(gclk_index), &baud, mode, sample_num);
			}

			break;
   21788:	e01a      	b.n	217c0 <_usart_set_config+0x1b8>
						_sercom_get_async_baud_val(config->baudrate,
   2178a:	683b      	ldr	r3, [r7, #0]
   2178c:	6a1d      	ldr	r5, [r3, #32]
   2178e:	693b      	ldr	r3, [r7, #16]
   21790:	b2db      	uxtb	r3, r3
   21792:	0018      	movs	r0, r3
   21794:	4b4e      	ldr	r3, [pc, #312]	; (218d0 <_usart_set_config+0x2c8>)
   21796:	4798      	blx	r3
				status_code =
   21798:	231d      	movs	r3, #29
   2179a:	18fc      	adds	r4, r7, r3
   2179c:	231f      	movs	r3, #31
   2179e:	18fb      	adds	r3, r7, r3
   217a0:	7819      	ldrb	r1, [r3, #0]
   217a2:	230a      	movs	r3, #10
   217a4:	18fa      	adds	r2, r7, r3
   217a6:	231e      	movs	r3, #30
   217a8:	18fb      	adds	r3, r7, r3
   217aa:	781b      	ldrb	r3, [r3, #0]
   217ac:	9300      	str	r3, [sp, #0]
   217ae:	000b      	movs	r3, r1
   217b0:	0001      	movs	r1, r0
   217b2:	0028      	movs	r0, r5
   217b4:	4d48      	ldr	r5, [pc, #288]	; (218d8 <_usart_set_config+0x2d0>)
   217b6:	47a8      	blx	r5
   217b8:	0003      	movs	r3, r0
   217ba:	7023      	strb	r3, [r4, #0]
			break;
   217bc:	e000      	b.n	217c0 <_usart_set_config+0x1b8>
			break;
   217be:	46c0      	nop			; (mov r8, r8)
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
   217c0:	231d      	movs	r3, #29
   217c2:	18fb      	adds	r3, r7, r3
   217c4:	781b      	ldrb	r3, [r3, #0]
   217c6:	2b00      	cmp	r3, #0
   217c8:	d003      	beq.n	217d2 <_usart_set_config+0x1ca>
		/* Abort */
		return status_code;
   217ca:	231d      	movs	r3, #29
   217cc:	18fb      	adds	r3, r7, r3
   217ce:	781b      	ldrb	r3, [r3, #0]
   217d0:	e077      	b.n	218c2 <_usart_set_config+0x2ba>
#ifdef FEATURE_USART_ISO7816
	}
#endif

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
   217d2:	683b      	ldr	r3, [r7, #0]
   217d4:	7e5b      	ldrb	r3, [r3, #25]
   217d6:	2b00      	cmp	r3, #0
   217d8:	d003      	beq.n	217e2 <_usart_set_config+0x1da>
		usart_hw->RXPL.reg = config->receive_pulse_length;
   217da:	683b      	ldr	r3, [r7, #0]
   217dc:	7e9a      	ldrb	r2, [r3, #26]
   217de:	69bb      	ldr	r3, [r7, #24]
   217e0:	739a      	strb	r2, [r3, #14]
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   217e2:	687b      	ldr	r3, [r7, #4]
   217e4:	0018      	movs	r0, r3
   217e6:	4b3d      	ldr	r3, [pc, #244]	; (218dc <_usart_set_config+0x2d4>)
   217e8:	4798      	blx	r3

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
   217ea:	230a      	movs	r3, #10
   217ec:	18fb      	adds	r3, r7, r3
   217ee:	881a      	ldrh	r2, [r3, #0]
   217f0:	69bb      	ldr	r3, [r7, #24]
   217f2:	819a      	strh	r2, [r3, #12]

	/* Set sample mode */
	ctrla |= transfer_mode;
   217f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   217f6:	68fb      	ldr	r3, [r7, #12]
   217f8:	4313      	orrs	r3, r2
   217fa:	627b      	str	r3, [r7, #36]	; 0x24

	if (config->use_external_clock == false) {
   217fc:	683b      	ldr	r3, [r7, #0]
   217fe:	2227      	movs	r2, #39	; 0x27
   21800:	5c9b      	ldrb	r3, [r3, r2]
   21802:	2201      	movs	r2, #1
   21804:	4053      	eors	r3, r2
   21806:	b2db      	uxtb	r3, r3
   21808:	2b00      	cmp	r3, #0
   2180a:	d003      	beq.n	21814 <_usart_set_config+0x20c>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
   2180c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2180e:	2204      	movs	r2, #4
   21810:	4313      	orrs	r3, r2
   21812:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
   21814:	683b      	ldr	r3, [r7, #0]
   21816:	7e5b      	ldrb	r3, [r3, #25]
   21818:	029a      	lsls	r2, r3, #10
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
   2181a:	683b      	ldr	r3, [r7, #0]
   2181c:	7f1b      	ldrb	r3, [r3, #28]
   2181e:	025b      	lsls	r3, r3, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
   21820:	431a      	orrs	r2, r3
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
   21822:	683b      	ldr	r3, [r7, #0]
   21824:	7f5b      	ldrb	r3, [r3, #29]
   21826:	021b      	lsls	r3, r3, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
   21828:	431a      	orrs	r2, r3
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
   2182a:	683b      	ldr	r3, [r7, #0]
   2182c:	2124      	movs	r1, #36	; 0x24
   2182e:	5c5b      	ldrb	r3, [r3, r1]
   21830:	045b      	lsls	r3, r3, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
   21832:	431a      	orrs	r2, r3
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
   21834:	683b      	ldr	r3, [r7, #0]
   21836:	2125      	movs	r1, #37	; 0x25
   21838:	5c5b      	ldrb	r3, [r3, r1]
   2183a:	041b      	lsls	r3, r3, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
   2183c:	4313      	orrs	r3, r2
	ctrlb =  
   2183e:	623b      	str	r3, [r7, #32]
				ctrlb |= USART_STOPBITS_1;
				break;		
		}
	} else {
#endif
	ctrlb |= (uint32_t)config->stopbits;
   21840:	683b      	ldr	r3, [r7, #0]
   21842:	7a9b      	ldrb	r3, [r3, #10]
   21844:	001a      	movs	r2, r3
   21846:	6a3b      	ldr	r3, [r7, #32]
   21848:	4313      	orrs	r3, r2
   2184a:	623b      	str	r3, [r7, #32]
	ctrlb |= (uint32_t)config->character_size;
   2184c:	683b      	ldr	r3, [r7, #0]
   2184e:	7adb      	ldrb	r3, [r3, #11]
   21850:	001a      	movs	r2, r3
   21852:	6a3b      	ldr	r3, [r7, #32]
   21854:	4313      	orrs	r3, r2
   21856:	623b      	str	r3, [r7, #32]
	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
   21858:	683b      	ldr	r3, [r7, #0]
   2185a:	891b      	ldrh	r3, [r3, #8]
   2185c:	2bff      	cmp	r3, #255	; 0xff
   2185e:	d00b      	beq.n	21878 <_usart_set_config+0x270>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
   21860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   21862:	2280      	movs	r2, #128	; 0x80
   21864:	0452      	lsls	r2, r2, #17
   21866:	4313      	orrs	r3, r2
   21868:	627b      	str	r3, [r7, #36]	; 0x24
		ctrlb |= config->parity;
   2186a:	683b      	ldr	r3, [r7, #0]
   2186c:	891b      	ldrh	r3, [r3, #8]
   2186e:	001a      	movs	r2, r3
   21870:	6a3b      	ldr	r3, [r7, #32]
   21872:	4313      	orrs	r3, r2
   21874:	623b      	str	r3, [r7, #32]
   21876:	e008      	b.n	2188a <_usart_set_config+0x282>
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
   21878:	683b      	ldr	r3, [r7, #0]
   2187a:	7edb      	ldrb	r3, [r3, #27]
   2187c:	2b00      	cmp	r3, #0
   2187e:	d004      	beq.n	2188a <_usart_set_config+0x282>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
   21880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   21882:	2280      	movs	r2, #128	; 0x80
   21884:	04d2      	lsls	r2, r2, #19
   21886:	4313      	orrs	r3, r2
   21888:	627b      	str	r3, [r7, #36]	; 0x24
		ctrla |= config->lin_node;
	}
#endif

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
   2188a:	683b      	ldr	r3, [r7, #0]
   2188c:	222c      	movs	r2, #44	; 0x2c
   2188e:	5c9b      	ldrb	r3, [r3, r2]
   21890:	2b00      	cmp	r3, #0
   21892:	d103      	bne.n	2189c <_usart_set_config+0x294>
   21894:	4b12      	ldr	r3, [pc, #72]	; (218e0 <_usart_set_config+0x2d8>)
   21896:	4798      	blx	r3
   21898:	1e03      	subs	r3, r0, #0
   2189a:	d003      	beq.n	218a4 <_usart_set_config+0x29c>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
   2189c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2189e:	2280      	movs	r2, #128	; 0x80
   218a0:	4313      	orrs	r3, r2
   218a2:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   218a4:	687b      	ldr	r3, [r7, #4]
   218a6:	0018      	movs	r0, r3
   218a8:	4b0c      	ldr	r3, [pc, #48]	; (218dc <_usart_set_config+0x2d4>)
   218aa:	4798      	blx	r3

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
   218ac:	69bb      	ldr	r3, [r7, #24]
   218ae:	6a3a      	ldr	r2, [r7, #32]
   218b0:	605a      	str	r2, [r3, #4]

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   218b2:	687b      	ldr	r3, [r7, #4]
   218b4:	0018      	movs	r0, r3
   218b6:	4b09      	ldr	r3, [pc, #36]	; (218dc <_usart_set_config+0x2d4>)
   218b8:	4798      	blx	r3

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
   218ba:	69bb      	ldr	r3, [r7, #24]
   218bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   218be:	601a      	str	r2, [r3, #0]
		_usart_wait_for_sync(module);
		usart_hw->CTRLC.reg = ctrlc;
	}
#endif

	return STATUS_OK;
   218c0:	2300      	movs	r3, #0
}
   218c2:	0018      	movs	r0, r3
   218c4:	46bd      	mov	sp, r7
   218c6:	b00a      	add	sp, #40	; 0x28
   218c8:	bdb0      	pop	{r4, r5, r7, pc}
   218ca:	46c0      	nop			; (mov r8, r8)
   218cc:	0001e9a9 	.word	0x0001e9a9
   218d0:	00024749 	.word	0x00024749
   218d4:	0001e523 	.word	0x0001e523
   218d8:	0001e5a1 	.word	0x0001e5a1
   218dc:	000215e5 	.word	0x000215e5
   218e0:	000215a5 	.word	0x000215a5

000218e4 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
   218e4:	b590      	push	{r4, r7, lr}
   218e6:	b093      	sub	sp, #76	; 0x4c
   218e8:	af00      	add	r7, sp, #0
   218ea:	60f8      	str	r0, [r7, #12]
   218ec:	60b9      	str	r1, [r7, #8]
   218ee:	607a      	str	r2, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(hw);
	Assert(config);

	enum status_code status_code = STATUS_OK;
   218f0:	233b      	movs	r3, #59	; 0x3b
   218f2:	18fb      	adds	r3, r7, r3
   218f4:	2200      	movs	r2, #0
   218f6:	701a      	strb	r2, [r3, #0]

	/* Assign module pointer to software instance struct */
	module->hw = hw;
   218f8:	68fb      	ldr	r3, [r7, #12]
   218fa:	68ba      	ldr	r2, [r7, #8]
   218fc:	601a      	str	r2, [r3, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   218fe:	68fb      	ldr	r3, [r7, #12]
   21900:	681b      	ldr	r3, [r3, #0]
   21902:	637b      	str	r3, [r7, #52]	; 0x34

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   21904:	68fb      	ldr	r3, [r7, #12]
   21906:	681b      	ldr	r3, [r3, #0]
   21908:	0018      	movs	r0, r3
   2190a:	4b86      	ldr	r3, [pc, #536]	; (21b24 <usart_init+0x240>)
   2190c:	4798      	blx	r3
   2190e:	0003      	movs	r3, r0
   21910:	633b      	str	r3, [r7, #48]	; 0x30
		gclk_index	= SERCOM5_GCLK_ID_CORE;
    } else {
    	gclk_index	= sercom_index + SERCOM0_GCLK_ID_CORE;
    }
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
   21912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   21914:	3302      	adds	r3, #2
   21916:	62fb      	str	r3, [r7, #44]	; 0x2c
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   21918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2191a:	3314      	adds	r3, #20
   2191c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
   2191e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   21920:	681b      	ldr	r3, [r3, #0]
   21922:	2201      	movs	r2, #1
   21924:	4013      	ands	r3, r2
   21926:	d001      	beq.n	2192c <usart_init+0x48>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
   21928:	2305      	movs	r3, #5
   2192a:	e0f6      	b.n	21b1a <usart_init+0x236>
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
   2192c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2192e:	681b      	ldr	r3, [r3, #0]
   21930:	2202      	movs	r2, #2
   21932:	4013      	ands	r3, r2
   21934:	d001      	beq.n	2193a <usart_init+0x56>
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
   21936:	231c      	movs	r3, #28
   21938:	e0ef      	b.n	21b1a <usart_init+0x236>
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
   2193a:	2201      	movs	r2, #1
   2193c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2193e:	409a      	lsls	r2, r3
   21940:	0013      	movs	r3, r2
   21942:	0019      	movs	r1, r3
   21944:	2002      	movs	r0, #2
   21946:	4b78      	ldr	r3, [pc, #480]	; (21b28 <usart_init+0x244>)
   21948:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   2194a:	2324      	movs	r3, #36	; 0x24
   2194c:	18fb      	adds	r3, r7, r3
   2194e:	0018      	movs	r0, r3
   21950:	4b76      	ldr	r3, [pc, #472]	; (21b2c <usart_init+0x248>)
   21952:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
   21954:	687b      	ldr	r3, [r7, #4]
   21956:	222d      	movs	r2, #45	; 0x2d
   21958:	5c9a      	ldrb	r2, [r3, r2]
   2195a:	2324      	movs	r3, #36	; 0x24
   2195c:	18fb      	adds	r3, r7, r3
   2195e:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
   21960:	6abb      	ldr	r3, [r7, #40]	; 0x28
   21962:	b2db      	uxtb	r3, r3
   21964:	2224      	movs	r2, #36	; 0x24
   21966:	18ba      	adds	r2, r7, r2
   21968:	0011      	movs	r1, r2
   2196a:	0018      	movs	r0, r3
   2196c:	4b70      	ldr	r3, [pc, #448]	; (21b30 <usart_init+0x24c>)
   2196e:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
   21970:	6abb      	ldr	r3, [r7, #40]	; 0x28
   21972:	b2db      	uxtb	r3, r3
   21974:	0018      	movs	r0, r3
   21976:	4b6f      	ldr	r3, [pc, #444]	; (21b34 <usart_init+0x250>)
   21978:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
   2197a:	687b      	ldr	r3, [r7, #4]
   2197c:	222d      	movs	r2, #45	; 0x2d
   2197e:	5c9b      	ldrb	r3, [r3, r2]
   21980:	2100      	movs	r1, #0
   21982:	0018      	movs	r0, r3
   21984:	4b6c      	ldr	r3, [pc, #432]	; (21b38 <usart_init+0x254>)
   21986:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
   21988:	687b      	ldr	r3, [r7, #4]
   2198a:	7ada      	ldrb	r2, [r3, #11]
   2198c:	68fb      	ldr	r3, [r7, #12]
   2198e:	715a      	strb	r2, [r3, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
   21990:	687b      	ldr	r3, [r7, #4]
   21992:	2224      	movs	r2, #36	; 0x24
   21994:	5c9a      	ldrb	r2, [r3, r2]
   21996:	68fb      	ldr	r3, [r7, #12]
   21998:	719a      	strb	r2, [r3, #6]
	module->transmitter_enabled = config->transmitter_enable;
   2199a:	687b      	ldr	r3, [r7, #4]
   2199c:	2225      	movs	r2, #37	; 0x25
   2199e:	5c9a      	ldrb	r2, [r3, r2]
   219a0:	68fb      	ldr	r3, [r7, #12]
   219a2:	71da      	strb	r2, [r3, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
   219a4:	687b      	ldr	r3, [r7, #4]
   219a6:	7eda      	ldrb	r2, [r3, #27]
   219a8:	68fb      	ldr	r3, [r7, #12]
   219aa:	721a      	strb	r2, [r3, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
   219ac:	687b      	ldr	r3, [r7, #4]
   219ae:	7f1a      	ldrb	r2, [r3, #28]
   219b0:	68fb      	ldr	r3, [r7, #12]
   219b2:	725a      	strb	r2, [r3, #9]
#endif
#ifdef FEATURE_USART_ISO7816
	module->iso7816_mode_enabled = config->iso7816_config.enabled;
#endif
	/* Set configuration according to the config struct */
	status_code = _usart_set_config(module, config);
   219b4:	233b      	movs	r3, #59	; 0x3b
   219b6:	18fc      	adds	r4, r7, r3
   219b8:	687a      	ldr	r2, [r7, #4]
   219ba:	68fb      	ldr	r3, [r7, #12]
   219bc:	0011      	movs	r1, r2
   219be:	0018      	movs	r0, r3
   219c0:	4b5e      	ldr	r3, [pc, #376]	; (21b3c <usart_init+0x258>)
   219c2:	4798      	blx	r3
   219c4:	0003      	movs	r3, r0
   219c6:	7023      	strb	r3, [r4, #0]
	if(status_code != STATUS_OK) {
   219c8:	233b      	movs	r3, #59	; 0x3b
   219ca:	18fb      	adds	r3, r7, r3
   219cc:	781b      	ldrb	r3, [r3, #0]
   219ce:	2b00      	cmp	r3, #0
   219d0:	d003      	beq.n	219da <usart_init+0xf6>
		return status_code;
   219d2:	233b      	movs	r3, #59	; 0x3b
   219d4:	18fb      	adds	r3, r7, r3
   219d6:	781b      	ldrb	r3, [r3, #0]
   219d8:	e09f      	b.n	21b1a <usart_init+0x236>
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
   219da:	2320      	movs	r3, #32
   219dc:	18fb      	adds	r3, r7, r3
   219de:	0018      	movs	r0, r3
   219e0:	4b57      	ldr	r3, [pc, #348]	; (21b40 <usart_init+0x25c>)
   219e2:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
   219e4:	2320      	movs	r3, #32
   219e6:	18fb      	adds	r3, r7, r3
   219e8:	2200      	movs	r2, #0
   219ea:	705a      	strb	r2, [r3, #1]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
   219ec:	2320      	movs	r3, #32
   219ee:	18fb      	adds	r3, r7, r3
   219f0:	2200      	movs	r2, #0
   219f2:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
   219f4:	687b      	ldr	r3, [r7, #4]
   219f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
   219f8:	2310      	movs	r3, #16
   219fa:	18fb      	adds	r3, r7, r3
   219fc:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
   219fe:	687b      	ldr	r3, [r7, #4]
   21a00:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	uint32_t pad_pinmuxes[] = {
   21a02:	2310      	movs	r3, #16
   21a04:	18fb      	adds	r3, r7, r3
   21a06:	605a      	str	r2, [r3, #4]
			config->pinmux_pad2, config->pinmux_pad3
   21a08:	687b      	ldr	r3, [r7, #4]
   21a0a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
	uint32_t pad_pinmuxes[] = {
   21a0c:	2310      	movs	r3, #16
   21a0e:	18fb      	adds	r3, r7, r3
   21a10:	609a      	str	r2, [r3, #8]
			config->pinmux_pad2, config->pinmux_pad3
   21a12:	687b      	ldr	r3, [r7, #4]
   21a14:	6bda      	ldr	r2, [r3, #60]	; 0x3c
	uint32_t pad_pinmuxes[] = {
   21a16:	2310      	movs	r3, #16
   21a18:	18fb      	adds	r3, r7, r3
   21a1a:	60da      	str	r2, [r3, #12]
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
   21a1c:	2347      	movs	r3, #71	; 0x47
   21a1e:	18fb      	adds	r3, r7, r3
   21a20:	2200      	movs	r2, #0
   21a22:	701a      	strb	r2, [r3, #0]
   21a24:	e02c      	b.n	21a80 <usart_init+0x19c>
		uint32_t current_pinmux = pad_pinmuxes[pad];
   21a26:	2347      	movs	r3, #71	; 0x47
   21a28:	18fb      	adds	r3, r7, r3
   21a2a:	781a      	ldrb	r2, [r3, #0]
   21a2c:	2310      	movs	r3, #16
   21a2e:	18fb      	adds	r3, r7, r3
   21a30:	0092      	lsls	r2, r2, #2
   21a32:	58d3      	ldr	r3, [r2, r3]
   21a34:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
   21a36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   21a38:	2b00      	cmp	r3, #0
   21a3a:	d109      	bne.n	21a50 <usart_init+0x16c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
   21a3c:	2347      	movs	r3, #71	; 0x47
   21a3e:	18fb      	adds	r3, r7, r3
   21a40:	781a      	ldrb	r2, [r3, #0]
   21a42:	68bb      	ldr	r3, [r7, #8]
   21a44:	0011      	movs	r1, r2
   21a46:	0018      	movs	r0, r3
   21a48:	4b3e      	ldr	r3, [pc, #248]	; (21b44 <usart_init+0x260>)
   21a4a:	4798      	blx	r3
   21a4c:	0003      	movs	r3, r0
   21a4e:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
   21a50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   21a52:	3301      	adds	r3, #1
   21a54:	d00d      	beq.n	21a72 <usart_init+0x18e>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
   21a56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   21a58:	b2da      	uxtb	r2, r3
   21a5a:	2320      	movs	r3, #32
   21a5c:	18fb      	adds	r3, r7, r3
   21a5e:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
   21a60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   21a62:	0c1b      	lsrs	r3, r3, #16
   21a64:	b2db      	uxtb	r3, r3
   21a66:	2220      	movs	r2, #32
   21a68:	18ba      	adds	r2, r7, r2
   21a6a:	0011      	movs	r1, r2
   21a6c:	0018      	movs	r0, r3
   21a6e:	4b36      	ldr	r3, [pc, #216]	; (21b48 <usart_init+0x264>)
   21a70:	4798      	blx	r3
	for (uint8_t pad = 0; pad < 4; pad++) {
   21a72:	2347      	movs	r3, #71	; 0x47
   21a74:	18fb      	adds	r3, r7, r3
   21a76:	781a      	ldrb	r2, [r3, #0]
   21a78:	2347      	movs	r3, #71	; 0x47
   21a7a:	18fb      	adds	r3, r7, r3
   21a7c:	3201      	adds	r2, #1
   21a7e:	701a      	strb	r2, [r3, #0]
   21a80:	2347      	movs	r3, #71	; 0x47
   21a82:	18fb      	adds	r3, r7, r3
   21a84:	781b      	ldrb	r3, [r3, #0]
   21a86:	2b03      	cmp	r3, #3
   21a88:	d9cd      	bls.n	21a26 <usart_init+0x142>
		}
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
   21a8a:	2300      	movs	r3, #0
   21a8c:	63fb      	str	r3, [r7, #60]	; 0x3c
   21a8e:	e00a      	b.n	21aa6 <usart_init+0x1c2>
		module->callback[i]            = NULL;
   21a90:	68fa      	ldr	r2, [r7, #12]
   21a92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   21a94:	3302      	adds	r3, #2
   21a96:	009b      	lsls	r3, r3, #2
   21a98:	18d3      	adds	r3, r2, r3
   21a9a:	3304      	adds	r3, #4
   21a9c:	2200      	movs	r2, #0
   21a9e:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
   21aa0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   21aa2:	3301      	adds	r3, #1
   21aa4:	63fb      	str	r3, [r7, #60]	; 0x3c
   21aa6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   21aa8:	2b05      	cmp	r3, #5
   21aaa:	d9f1      	bls.n	21a90 <usart_init+0x1ac>
	}

	module->tx_buffer_ptr              = NULL;
   21aac:	68fb      	ldr	r3, [r7, #12]
   21aae:	2200      	movs	r2, #0
   21ab0:	629a      	str	r2, [r3, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
   21ab2:	68fb      	ldr	r3, [r7, #12]
   21ab4:	2200      	movs	r2, #0
   21ab6:	625a      	str	r2, [r3, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
   21ab8:	68fb      	ldr	r3, [r7, #12]
   21aba:	2200      	movs	r2, #0
   21abc:	85da      	strh	r2, [r3, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
   21abe:	68fb      	ldr	r3, [r7, #12]
   21ac0:	2200      	movs	r2, #0
   21ac2:	859a      	strh	r2, [r3, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
   21ac4:	68fb      	ldr	r3, [r7, #12]
   21ac6:	2230      	movs	r2, #48	; 0x30
   21ac8:	2100      	movs	r1, #0
   21aca:	5499      	strb	r1, [r3, r2]
	module->callback_enable_mask       = 0x00;
   21acc:	68fb      	ldr	r3, [r7, #12]
   21ace:	2231      	movs	r2, #49	; 0x31
   21ad0:	2100      	movs	r1, #0
   21ad2:	5499      	strb	r1, [r3, r2]
	module->rx_status                  = STATUS_OK;
   21ad4:	68fb      	ldr	r3, [r7, #12]
   21ad6:	2232      	movs	r2, #50	; 0x32
   21ad8:	2100      	movs	r1, #0
   21ada:	5499      	strb	r1, [r3, r2]
	module->tx_status                  = STATUS_OK;
   21adc:	68fb      	ldr	r3, [r7, #12]
   21ade:	2233      	movs	r2, #51	; 0x33
   21ae0:	2100      	movs	r1, #0
   21ae2:	5499      	strb	r1, [r3, r2]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
   21ae4:	68fb      	ldr	r3, [r7, #12]
   21ae6:	681b      	ldr	r3, [r3, #0]
   21ae8:	2227      	movs	r2, #39	; 0x27
   21aea:	18bc      	adds	r4, r7, r2
   21aec:	0018      	movs	r0, r3
   21aee:	4b0d      	ldr	r3, [pc, #52]	; (21b24 <usart_init+0x240>)
   21af0:	4798      	blx	r3
   21af2:	0003      	movs	r3, r0
   21af4:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
   21af6:	4a15      	ldr	r2, [pc, #84]	; (21b4c <usart_init+0x268>)
   21af8:	2327      	movs	r3, #39	; 0x27
   21afa:	18fb      	adds	r3, r7, r3
   21afc:	781b      	ldrb	r3, [r3, #0]
   21afe:	0011      	movs	r1, r2
   21b00:	0018      	movs	r0, r3
   21b02:	4b13      	ldr	r3, [pc, #76]	; (21b50 <usart_init+0x26c>)
   21b04:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
   21b06:	2327      	movs	r3, #39	; 0x27
   21b08:	18fb      	adds	r3, r7, r3
   21b0a:	781a      	ldrb	r2, [r3, #0]
   21b0c:	4b11      	ldr	r3, [pc, #68]	; (21b54 <usart_init+0x270>)
   21b0e:	0092      	lsls	r2, r2, #2
   21b10:	68f9      	ldr	r1, [r7, #12]
   21b12:	50d1      	str	r1, [r2, r3]
#endif

	return status_code;
   21b14:	233b      	movs	r3, #59	; 0x3b
   21b16:	18fb      	adds	r3, r7, r3
   21b18:	781b      	ldrb	r3, [r3, #0]
}
   21b1a:	0018      	movs	r0, r3
   21b1c:	46bd      	mov	sp, r7
   21b1e:	b013      	add	sp, #76	; 0x4c
   21b20:	bd90      	pop	{r4, r7, pc}
   21b22:	46c0      	nop			; (mov r8, r8)
   21b24:	0001e9a9 	.word	0x0001e9a9
   21b28:	00021521 	.word	0x00021521
   21b2c:	00021509 	.word	0x00021509
   21b30:	00024625 	.word	0x00024625
   21b34:	00024669 	.word	0x00024669
   21b38:	0001e761 	.word	0x0001e761
   21b3c:	00021609 	.word	0x00021609
   21b40:	0002157d 	.word	0x0002157d
   21b44:	0001e7ed 	.word	0x0001e7ed
   21b48:	00024911 	.word	0x00024911
   21b4c:	00021d2d 	.word	0x00021d2d
   21b50:	00022081 	.word	0x00022081
   21b54:	20000968 	.word	0x20000968

00021b58 <usart_write_wait>:
 * \retval STATUS_ERR_DENIED If the transmitter is not enabled
 */
enum status_code usart_write_wait(
		struct usart_module *const module,
		const uint16_t tx_data)
{
   21b58:	b580      	push	{r7, lr}
   21b5a:	b084      	sub	sp, #16
   21b5c:	af00      	add	r7, sp, #0
   21b5e:	6078      	str	r0, [r7, #4]
   21b60:	000a      	movs	r2, r1
   21b62:	1cbb      	adds	r3, r7, #2
   21b64:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   21b66:	687b      	ldr	r3, [r7, #4]
   21b68:	681b      	ldr	r3, [r3, #0]
   21b6a:	60fb      	str	r3, [r7, #12]

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
   21b6c:	687b      	ldr	r3, [r7, #4]
   21b6e:	79db      	ldrb	r3, [r3, #7]
   21b70:	2201      	movs	r2, #1
   21b72:	4053      	eors	r3, r2
   21b74:	b2db      	uxtb	r3, r3
   21b76:	2b00      	cmp	r3, #0
   21b78:	d001      	beq.n	21b7e <usart_write_wait+0x26>
		return STATUS_ERR_DENIED;
   21b7a:	231c      	movs	r3, #28
   21b7c:	e017      	b.n	21bae <usart_write_wait+0x56>
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
   21b7e:	687b      	ldr	r3, [r7, #4]
   21b80:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
   21b82:	b29b      	uxth	r3, r3
   21b84:	2b00      	cmp	r3, #0
   21b86:	d001      	beq.n	21b8c <usart_write_wait+0x34>
		return STATUS_BUSY;
   21b88:	2305      	movs	r3, #5
   21b8a:	e010      	b.n	21bae <usart_write_wait+0x56>
		return STATUS_BUSY;
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   21b8c:	687b      	ldr	r3, [r7, #4]
   21b8e:	0018      	movs	r0, r3
   21b90:	4b09      	ldr	r3, [pc, #36]	; (21bb8 <usart_write_wait+0x60>)
   21b92:	4798      	blx	r3

	/* Write data to USART module */
	usart_hw->DATA.reg = tx_data;
   21b94:	68fb      	ldr	r3, [r7, #12]
   21b96:	1cba      	adds	r2, r7, #2
   21b98:	8812      	ldrh	r2, [r2, #0]
   21b9a:	851a      	strh	r2, [r3, #40]	; 0x28

	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
   21b9c:	46c0      	nop			; (mov r8, r8)
   21b9e:	68fb      	ldr	r3, [r7, #12]
   21ba0:	7e1b      	ldrb	r3, [r3, #24]
   21ba2:	b2db      	uxtb	r3, r3
   21ba4:	001a      	movs	r2, r3
   21ba6:	2302      	movs	r3, #2
   21ba8:	4013      	ands	r3, r2
   21baa:	d0f8      	beq.n	21b9e <usart_write_wait+0x46>
		/* Wait until data is sent */
	}

	return STATUS_OK;
   21bac:	2300      	movs	r3, #0
}
   21bae:	0018      	movs	r0, r3
   21bb0:	46bd      	mov	sp, r7
   21bb2:	b004      	add	sp, #16
   21bb4:	bd80      	pop	{r7, pc}
   21bb6:	46c0      	nop			; (mov r8, r8)
   21bb8:	000215e5 	.word	0x000215e5

00021bbc <usart_write_buffer_wait>:
 */
enum status_code usart_write_buffer_wait(
		struct usart_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
   21bbc:	b580      	push	{r7, lr}
   21bbe:	b08a      	sub	sp, #40	; 0x28
   21bc0:	af00      	add	r7, sp, #0
   21bc2:	60f8      	str	r0, [r7, #12]
   21bc4:	60b9      	str	r1, [r7, #8]
   21bc6:	1dbb      	adds	r3, r7, #6
   21bc8:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
   21bca:	1dbb      	adds	r3, r7, #6
   21bcc:	881b      	ldrh	r3, [r3, #0]
   21bce:	2b00      	cmp	r3, #0
   21bd0:	d101      	bne.n	21bd6 <usart_write_buffer_wait+0x1a>
		return STATUS_ERR_INVALID_ARG;
   21bd2:	2317      	movs	r3, #23
   21bd4:	e07e      	b.n	21cd4 <usart_write_buffer_wait+0x118>
	}

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
   21bd6:	68fb      	ldr	r3, [r7, #12]
   21bd8:	79db      	ldrb	r3, [r3, #7]
   21bda:	2201      	movs	r2, #1
   21bdc:	4053      	eors	r3, r2
   21bde:	b2db      	uxtb	r3, r3
   21be0:	2b00      	cmp	r3, #0
   21be2:	d001      	beq.n	21be8 <usart_write_buffer_wait+0x2c>
		return STATUS_ERR_DENIED;
   21be4:	231c      	movs	r3, #28
   21be6:	e075      	b.n	21cd4 <usart_write_buffer_wait+0x118>
	}

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   21be8:	68fb      	ldr	r3, [r7, #12]
   21bea:	681b      	ldr	r3, [r3, #0]
   21bec:	617b      	str	r3, [r7, #20]

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   21bee:	68fb      	ldr	r3, [r7, #12]
   21bf0:	0018      	movs	r0, r3
   21bf2:	4b3a      	ldr	r3, [pc, #232]	; (21cdc <usart_write_buffer_wait+0x120>)
   21bf4:	4798      	blx	r3

	uint16_t tx_pos = 0;
   21bf6:	2326      	movs	r3, #38	; 0x26
   21bf8:	18fb      	adds	r3, r7, r3
   21bfa:	2200      	movs	r2, #0
   21bfc:	801a      	strh	r2, [r3, #0]

	/* Blocks while buffer is being transferred */
	while (length--) {
   21bfe:	e048      	b.n	21c92 <usart_write_buffer_wait+0xd6>
		/* Wait for the USART to be ready for new data and abort
		* operation if it doesn't get ready within the timeout*/
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
   21c00:	2300      	movs	r3, #0
   21c02:	623b      	str	r3, [r7, #32]
   21c04:	e00f      	b.n	21c26 <usart_write_buffer_wait+0x6a>
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
   21c06:	697b      	ldr	r3, [r7, #20]
   21c08:	7e1b      	ldrb	r3, [r3, #24]
   21c0a:	b2db      	uxtb	r3, r3
   21c0c:	001a      	movs	r2, r3
   21c0e:	2301      	movs	r3, #1
   21c10:	4013      	ands	r3, r2
   21c12:	d10d      	bne.n	21c30 <usart_write_buffer_wait+0x74>
				break;
			} else if (i == USART_TIMEOUT) {
   21c14:	6a3b      	ldr	r3, [r7, #32]
   21c16:	4a32      	ldr	r2, [pc, #200]	; (21ce0 <usart_write_buffer_wait+0x124>)
   21c18:	4293      	cmp	r3, r2
   21c1a:	d101      	bne.n	21c20 <usart_write_buffer_wait+0x64>
				return STATUS_ERR_TIMEOUT;
   21c1c:	2312      	movs	r3, #18
   21c1e:	e059      	b.n	21cd4 <usart_write_buffer_wait+0x118>
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
   21c20:	6a3b      	ldr	r3, [r7, #32]
   21c22:	3301      	adds	r3, #1
   21c24:	623b      	str	r3, [r7, #32]
   21c26:	6a3b      	ldr	r3, [r7, #32]
   21c28:	4a2d      	ldr	r2, [pc, #180]	; (21ce0 <usart_write_buffer_wait+0x124>)
   21c2a:	4293      	cmp	r3, r2
   21c2c:	d9eb      	bls.n	21c06 <usart_write_buffer_wait+0x4a>
   21c2e:	e000      	b.n	21c32 <usart_write_buffer_wait+0x76>
				break;
   21c30:	46c0      	nop			; (mov r8, r8)
			}
		}

		/* Data to send is at least 8 bits long */
		uint16_t data_to_send = tx_data[tx_pos++];
   21c32:	2326      	movs	r3, #38	; 0x26
   21c34:	18fb      	adds	r3, r7, r3
   21c36:	881b      	ldrh	r3, [r3, #0]
   21c38:	2226      	movs	r2, #38	; 0x26
   21c3a:	18ba      	adds	r2, r7, r2
   21c3c:	1c59      	adds	r1, r3, #1
   21c3e:	8011      	strh	r1, [r2, #0]
   21c40:	001a      	movs	r2, r3
   21c42:	68bb      	ldr	r3, [r7, #8]
   21c44:	189b      	adds	r3, r3, r2
   21c46:	781a      	ldrb	r2, [r3, #0]
   21c48:	231e      	movs	r3, #30
   21c4a:	18fb      	adds	r3, r7, r3
   21c4c:	801a      	strh	r2, [r3, #0]

		/* Check if the character size exceeds 8 bit */
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
   21c4e:	68fb      	ldr	r3, [r7, #12]
   21c50:	795b      	ldrb	r3, [r3, #5]
   21c52:	2b01      	cmp	r3, #1
   21c54:	d115      	bne.n	21c82 <usart_write_buffer_wait+0xc6>
			data_to_send |= (tx_data[tx_pos++] << 8);
   21c56:	2326      	movs	r3, #38	; 0x26
   21c58:	18fb      	adds	r3, r7, r3
   21c5a:	881b      	ldrh	r3, [r3, #0]
   21c5c:	2226      	movs	r2, #38	; 0x26
   21c5e:	18ba      	adds	r2, r7, r2
   21c60:	1c59      	adds	r1, r3, #1
   21c62:	8011      	strh	r1, [r2, #0]
   21c64:	001a      	movs	r2, r3
   21c66:	68bb      	ldr	r3, [r7, #8]
   21c68:	189b      	adds	r3, r3, r2
   21c6a:	781b      	ldrb	r3, [r3, #0]
   21c6c:	021b      	lsls	r3, r3, #8
   21c6e:	b21a      	sxth	r2, r3
   21c70:	231e      	movs	r3, #30
   21c72:	18fb      	adds	r3, r7, r3
   21c74:	2100      	movs	r1, #0
   21c76:	5e5b      	ldrsh	r3, [r3, r1]
   21c78:	4313      	orrs	r3, r2
   21c7a:	b21a      	sxth	r2, r3
   21c7c:	231e      	movs	r3, #30
   21c7e:	18fb      	adds	r3, r7, r3
   21c80:	801a      	strh	r2, [r3, #0]
		}

		/* Send the data through the USART module */
		usart_write_wait(module, data_to_send);
   21c82:	231e      	movs	r3, #30
   21c84:	18fb      	adds	r3, r7, r3
   21c86:	881a      	ldrh	r2, [r3, #0]
   21c88:	68fb      	ldr	r3, [r7, #12]
   21c8a:	0011      	movs	r1, r2
   21c8c:	0018      	movs	r0, r3
   21c8e:	4b15      	ldr	r3, [pc, #84]	; (21ce4 <usart_write_buffer_wait+0x128>)
   21c90:	4798      	blx	r3
	while (length--) {
   21c92:	1dbb      	adds	r3, r7, #6
   21c94:	881b      	ldrh	r3, [r3, #0]
   21c96:	1dba      	adds	r2, r7, #6
   21c98:	1e59      	subs	r1, r3, #1
   21c9a:	8011      	strh	r1, [r2, #0]
   21c9c:	2b00      	cmp	r3, #0
   21c9e:	d1af      	bne.n	21c00 <usart_write_buffer_wait+0x44>
	}

	/* Wait until Transmit is complete or timeout */
	for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
   21ca0:	2300      	movs	r3, #0
   21ca2:	61bb      	str	r3, [r7, #24]
   21ca4:	e00f      	b.n	21cc6 <usart_write_buffer_wait+0x10a>
		if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) {
   21ca6:	697b      	ldr	r3, [r7, #20]
   21ca8:	7e1b      	ldrb	r3, [r3, #24]
   21caa:	b2db      	uxtb	r3, r3
   21cac:	001a      	movs	r2, r3
   21cae:	2302      	movs	r3, #2
   21cb0:	4013      	ands	r3, r2
   21cb2:	d10d      	bne.n	21cd0 <usart_write_buffer_wait+0x114>
			break;
		} else if (i == USART_TIMEOUT) {
   21cb4:	69bb      	ldr	r3, [r7, #24]
   21cb6:	4a0a      	ldr	r2, [pc, #40]	; (21ce0 <usart_write_buffer_wait+0x124>)
   21cb8:	4293      	cmp	r3, r2
   21cba:	d101      	bne.n	21cc0 <usart_write_buffer_wait+0x104>
			return STATUS_ERR_TIMEOUT;
   21cbc:	2312      	movs	r3, #18
   21cbe:	e009      	b.n	21cd4 <usart_write_buffer_wait+0x118>
	for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
   21cc0:	69bb      	ldr	r3, [r7, #24]
   21cc2:	3301      	adds	r3, #1
   21cc4:	61bb      	str	r3, [r7, #24]
   21cc6:	69bb      	ldr	r3, [r7, #24]
   21cc8:	4a05      	ldr	r2, [pc, #20]	; (21ce0 <usart_write_buffer_wait+0x124>)
   21cca:	4293      	cmp	r3, r2
   21ccc:	d9eb      	bls.n	21ca6 <usart_write_buffer_wait+0xea>
   21cce:	e000      	b.n	21cd2 <usart_write_buffer_wait+0x116>
			break;
   21cd0:	46c0      	nop			; (mov r8, r8)
		}
	}

	return STATUS_OK;
   21cd2:	2300      	movs	r3, #0
}
   21cd4:	0018      	movs	r0, r3
   21cd6:	46bd      	mov	sp, r7
   21cd8:	b00a      	add	sp, #40	; 0x28
   21cda:	bd80      	pop	{r7, pc}
   21cdc:	000215e5 	.word	0x000215e5
   21ce0:	0000ffff 	.word	0x0000ffff
   21ce4:	00021b59 	.word	0x00021b59

00021ce8 <usart_is_syncing>:
{
   21ce8:	b580      	push	{r7, lr}
   21cea:	b084      	sub	sp, #16
   21cec:	af00      	add	r7, sp, #0
   21cee:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
   21cf0:	687b      	ldr	r3, [r7, #4]
   21cf2:	681b      	ldr	r3, [r3, #0]
   21cf4:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
   21cf6:	68fb      	ldr	r3, [r7, #12]
   21cf8:	69db      	ldr	r3, [r3, #28]
   21cfa:	1e5a      	subs	r2, r3, #1
   21cfc:	4193      	sbcs	r3, r2
   21cfe:	b2db      	uxtb	r3, r3
}
   21d00:	0018      	movs	r0, r3
   21d02:	46bd      	mov	sp, r7
   21d04:	b004      	add	sp, #16
   21d06:	bd80      	pop	{r7, pc}

00021d08 <_usart_wait_for_sync>:
{
   21d08:	b580      	push	{r7, lr}
   21d0a:	b082      	sub	sp, #8
   21d0c:	af00      	add	r7, sp, #0
   21d0e:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
   21d10:	46c0      	nop			; (mov r8, r8)
   21d12:	687b      	ldr	r3, [r7, #4]
   21d14:	0018      	movs	r0, r3
   21d16:	4b04      	ldr	r3, [pc, #16]	; (21d28 <_usart_wait_for_sync+0x20>)
   21d18:	4798      	blx	r3
   21d1a:	1e03      	subs	r3, r0, #0
   21d1c:	d1f9      	bne.n	21d12 <_usart_wait_for_sync+0xa>
}
   21d1e:	46c0      	nop			; (mov r8, r8)
   21d20:	46bd      	mov	sp, r7
   21d22:	b002      	add	sp, #8
   21d24:	bd80      	pop	{r7, pc}
   21d26:	46c0      	nop			; (mov r8, r8)
   21d28:	00021ce9 	.word	0x00021ce9

00021d2c <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
   21d2c:	b580      	push	{r7, lr}
   21d2e:	b088      	sub	sp, #32
   21d30:	af00      	add	r7, sp, #0
   21d32:	0002      	movs	r2, r0
   21d34:	1dfb      	adds	r3, r7, #7
   21d36:	701a      	strb	r2, [r3, #0]
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
		= (struct usart_module *)_sercom_instances[instance];
   21d38:	1dfb      	adds	r3, r7, #7
   21d3a:	781a      	ldrb	r2, [r3, #0]
	struct usart_module *module
   21d3c:	4ba3      	ldr	r3, [pc, #652]	; (21fcc <_usart_interrupt_handler+0x2a0>)
   21d3e:	0092      	lsls	r2, r2, #2
   21d40:	58d3      	ldr	r3, [r2, r3]
   21d42:	61bb      	str	r3, [r7, #24]

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
   21d44:	69bb      	ldr	r3, [r7, #24]
   21d46:	681b      	ldr	r3, [r3, #0]
	SercomUsart *const usart_hw
   21d48:	617b      	str	r3, [r7, #20]

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);
   21d4a:	69bb      	ldr	r3, [r7, #24]
   21d4c:	0018      	movs	r0, r3
   21d4e:	4ba0      	ldr	r3, [pc, #640]	; (21fd0 <_usart_interrupt_handler+0x2a4>)
   21d50:	4798      	blx	r3

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
   21d52:	697b      	ldr	r3, [r7, #20]
   21d54:	7e1b      	ldrb	r3, [r3, #24]
   21d56:	b2da      	uxtb	r2, r3
   21d58:	2312      	movs	r3, #18
   21d5a:	18fb      	adds	r3, r7, r3
   21d5c:	801a      	strh	r2, [r3, #0]
	interrupt_status &= usart_hw->INTENSET.reg;
   21d5e:	697b      	ldr	r3, [r7, #20]
   21d60:	7d9b      	ldrb	r3, [r3, #22]
   21d62:	b2db      	uxtb	r3, r3
   21d64:	b29a      	uxth	r2, r3
   21d66:	2312      	movs	r3, #18
   21d68:	18fb      	adds	r3, r7, r3
   21d6a:	2112      	movs	r1, #18
   21d6c:	1879      	adds	r1, r7, r1
   21d6e:	8809      	ldrh	r1, [r1, #0]
   21d70:	400a      	ands	r2, r1
   21d72:	801a      	strh	r2, [r3, #0]
	callback_status = module->callback_reg_mask &
   21d74:	69bb      	ldr	r3, [r7, #24]
   21d76:	2230      	movs	r2, #48	; 0x30
   21d78:	5c9b      	ldrb	r3, [r3, r2]
			module->callback_enable_mask;
   21d7a:	69ba      	ldr	r2, [r7, #24]
   21d7c:	2131      	movs	r1, #49	; 0x31
   21d7e:	5c52      	ldrb	r2, [r2, r1]
	callback_status = module->callback_reg_mask &
   21d80:	4013      	ands	r3, r2
   21d82:	b2da      	uxtb	r2, r3
   21d84:	2310      	movs	r3, #16
   21d86:	18fb      	adds	r3, r7, r3
   21d88:	801a      	strh	r2, [r3, #0]

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
   21d8a:	2312      	movs	r3, #18
   21d8c:	18fb      	adds	r3, r7, r3
   21d8e:	881b      	ldrh	r3, [r3, #0]
   21d90:	2201      	movs	r2, #1
   21d92:	4013      	ands	r3, r2
   21d94:	d044      	beq.n	21e20 <_usart_interrupt_handler+0xf4>
		if (module->remaining_tx_buffer_length) {
   21d96:	69bb      	ldr	r3, [r7, #24]
   21d98:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
   21d9a:	b29b      	uxth	r3, r3
   21d9c:	2b00      	cmp	r3, #0
   21d9e:	d03c      	beq.n	21e1a <_usart_interrupt_handler+0xee>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
   21da0:	69bb      	ldr	r3, [r7, #24]
   21da2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   21da4:	781b      	ldrb	r3, [r3, #0]
   21da6:	b2da      	uxtb	r2, r3
   21da8:	231c      	movs	r3, #28
   21daa:	18fb      	adds	r3, r7, r3
   21dac:	801a      	strh	r2, [r3, #0]
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
   21dae:	69bb      	ldr	r3, [r7, #24]
   21db0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   21db2:	1c5a      	adds	r2, r3, #1
   21db4:	69bb      	ldr	r3, [r7, #24]
   21db6:	629a      	str	r2, [r3, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
   21db8:	69bb      	ldr	r3, [r7, #24]
   21dba:	795b      	ldrb	r3, [r3, #5]
   21dbc:	2b01      	cmp	r3, #1
   21dbe:	d113      	bne.n	21de8 <_usart_interrupt_handler+0xbc>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
   21dc0:	69bb      	ldr	r3, [r7, #24]
   21dc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   21dc4:	781b      	ldrb	r3, [r3, #0]
   21dc6:	b2db      	uxtb	r3, r3
   21dc8:	021b      	lsls	r3, r3, #8
   21dca:	b21a      	sxth	r2, r3
   21dcc:	231c      	movs	r3, #28
   21dce:	18fb      	adds	r3, r7, r3
   21dd0:	2100      	movs	r1, #0
   21dd2:	5e5b      	ldrsh	r3, [r3, r1]
   21dd4:	4313      	orrs	r3, r2
   21dd6:	b21a      	sxth	r2, r3
   21dd8:	231c      	movs	r3, #28
   21dda:	18fb      	adds	r3, r7, r3
   21ddc:	801a      	strh	r2, [r3, #0]
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
   21dde:	69bb      	ldr	r3, [r7, #24]
   21de0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   21de2:	1c5a      	adds	r2, r3, #1
   21de4:	69bb      	ldr	r3, [r7, #24]
   21de6:	629a      	str	r2, [r3, #40]	; 0x28
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
   21de8:	231c      	movs	r3, #28
   21dea:	18fb      	adds	r3, r7, r3
   21dec:	881b      	ldrh	r3, [r3, #0]
   21dee:	05db      	lsls	r3, r3, #23
   21df0:	0ddb      	lsrs	r3, r3, #23
   21df2:	b29a      	uxth	r2, r3
   21df4:	697b      	ldr	r3, [r7, #20]
   21df6:	851a      	strh	r2, [r3, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
   21df8:	69bb      	ldr	r3, [r7, #24]
   21dfa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
   21dfc:	b29b      	uxth	r3, r3
   21dfe:	3b01      	subs	r3, #1
   21e00:	b29b      	uxth	r3, r3
   21e02:	69ba      	ldr	r2, [r7, #24]
   21e04:	1c19      	adds	r1, r3, #0
   21e06:	85d1      	strh	r1, [r2, #46]	; 0x2e
   21e08:	2b00      	cmp	r3, #0
   21e0a:	d109      	bne.n	21e20 <_usart_interrupt_handler+0xf4>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
   21e0c:	697b      	ldr	r3, [r7, #20]
   21e0e:	2201      	movs	r2, #1
   21e10:	751a      	strb	r2, [r3, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
   21e12:	697b      	ldr	r3, [r7, #20]
   21e14:	2202      	movs	r2, #2
   21e16:	759a      	strb	r2, [r3, #22]
   21e18:	e002      	b.n	21e20 <_usart_interrupt_handler+0xf4>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
   21e1a:	697b      	ldr	r3, [r7, #20]
   21e1c:	2201      	movs	r2, #1
   21e1e:	751a      	strb	r2, [r3, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
   21e20:	2312      	movs	r3, #18
   21e22:	18fb      	adds	r3, r7, r3
   21e24:	881b      	ldrh	r3, [r3, #0]
   21e26:	2202      	movs	r2, #2
   21e28:	4013      	ands	r3, r2
   21e2a:	d011      	beq.n	21e50 <_usart_interrupt_handler+0x124>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
   21e2c:	697b      	ldr	r3, [r7, #20]
   21e2e:	2202      	movs	r2, #2
   21e30:	751a      	strb	r2, [r3, #20]
		module->tx_status = STATUS_OK;
   21e32:	69bb      	ldr	r3, [r7, #24]
   21e34:	2233      	movs	r2, #51	; 0x33
   21e36:	2100      	movs	r1, #0
   21e38:	5499      	strb	r1, [r3, r2]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
   21e3a:	2310      	movs	r3, #16
   21e3c:	18fb      	adds	r3, r7, r3
   21e3e:	881b      	ldrh	r3, [r3, #0]
   21e40:	2201      	movs	r2, #1
   21e42:	4013      	ands	r3, r2
   21e44:	d004      	beq.n	21e50 <_usart_interrupt_handler+0x124>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
   21e46:	69bb      	ldr	r3, [r7, #24]
   21e48:	68db      	ldr	r3, [r3, #12]
   21e4a:	69ba      	ldr	r2, [r7, #24]
   21e4c:	0010      	movs	r0, r2
   21e4e:	4798      	blx	r3
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
   21e50:	2312      	movs	r3, #18
   21e52:	18fb      	adds	r3, r7, r3
   21e54:	881b      	ldrh	r3, [r3, #0]
   21e56:	2204      	movs	r2, #4
   21e58:	4013      	ands	r3, r2
   21e5a:	d100      	bne.n	21e5e <_usart_interrupt_handler+0x132>
   21e5c:	e0bd      	b.n	21fda <_usart_interrupt_handler+0x2ae>

		if (module->remaining_rx_buffer_length) {
   21e5e:	69bb      	ldr	r3, [r7, #24]
   21e60:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
   21e62:	b29b      	uxth	r3, r3
   21e64:	2b00      	cmp	r3, #0
   21e66:	d100      	bne.n	21e6a <_usart_interrupt_handler+0x13e>
   21e68:	e0b4      	b.n	21fd4 <_usart_interrupt_handler+0x2a8>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
   21e6a:	697b      	ldr	r3, [r7, #20]
   21e6c:	8b5b      	ldrh	r3, [r3, #26]
   21e6e:	b29b      	uxth	r3, r3
   21e70:	b2da      	uxtb	r2, r3
   21e72:	231f      	movs	r3, #31
   21e74:	18fb      	adds	r3, r7, r3
   21e76:	213f      	movs	r1, #63	; 0x3f
   21e78:	400a      	ands	r2, r1
   21e7a:	701a      	strb	r2, [r3, #0]
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
   21e7c:	231f      	movs	r3, #31
   21e7e:	18fb      	adds	r3, r7, r3
   21e80:	781b      	ldrb	r3, [r3, #0]
   21e82:	2208      	movs	r2, #8
   21e84:	4013      	ands	r3, r2
   21e86:	d007      	beq.n	21e98 <_usart_interrupt_handler+0x16c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
   21e88:	231f      	movs	r3, #31
   21e8a:	18fb      	adds	r3, r7, r3
   21e8c:	221f      	movs	r2, #31
   21e8e:	18ba      	adds	r2, r7, r2
   21e90:	7812      	ldrb	r2, [r2, #0]
   21e92:	2108      	movs	r1, #8
   21e94:	438a      	bics	r2, r1
   21e96:	701a      	strb	r2, [r3, #0]
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
   21e98:	231f      	movs	r3, #31
   21e9a:	18fb      	adds	r3, r7, r3
   21e9c:	781b      	ldrb	r3, [r3, #0]
   21e9e:	2b00      	cmp	r3, #0
   21ea0:	d050      	beq.n	21f44 <_usart_interrupt_handler+0x218>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
   21ea2:	231f      	movs	r3, #31
   21ea4:	18fb      	adds	r3, r7, r3
   21ea6:	781b      	ldrb	r3, [r3, #0]
   21ea8:	2202      	movs	r2, #2
   21eaa:	4013      	ands	r3, r2
   21eac:	d007      	beq.n	21ebe <_usart_interrupt_handler+0x192>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
   21eae:	69bb      	ldr	r3, [r7, #24]
   21eb0:	2232      	movs	r2, #50	; 0x32
   21eb2:	211a      	movs	r1, #26
   21eb4:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
   21eb6:	697b      	ldr	r3, [r7, #20]
   21eb8:	2202      	movs	r2, #2
   21eba:	835a      	strh	r2, [r3, #26]
   21ebc:	e036      	b.n	21f2c <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
   21ebe:	231f      	movs	r3, #31
   21ec0:	18fb      	adds	r3, r7, r3
   21ec2:	781b      	ldrb	r3, [r3, #0]
   21ec4:	2204      	movs	r2, #4
   21ec6:	4013      	ands	r3, r2
   21ec8:	d007      	beq.n	21eda <_usart_interrupt_handler+0x1ae>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
   21eca:	69bb      	ldr	r3, [r7, #24]
   21ecc:	2232      	movs	r2, #50	; 0x32
   21ece:	211e      	movs	r1, #30
   21ed0:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
   21ed2:	697b      	ldr	r3, [r7, #20]
   21ed4:	2204      	movs	r2, #4
   21ed6:	835a      	strh	r2, [r3, #26]
   21ed8:	e028      	b.n	21f2c <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
   21eda:	231f      	movs	r3, #31
   21edc:	18fb      	adds	r3, r7, r3
   21ede:	781b      	ldrb	r3, [r3, #0]
   21ee0:	2201      	movs	r2, #1
   21ee2:	4013      	ands	r3, r2
   21ee4:	d007      	beq.n	21ef6 <_usart_interrupt_handler+0x1ca>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
   21ee6:	69bb      	ldr	r3, [r7, #24]
   21ee8:	2232      	movs	r2, #50	; 0x32
   21eea:	2113      	movs	r1, #19
   21eec:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
   21eee:	697b      	ldr	r3, [r7, #20]
   21ef0:	2201      	movs	r2, #1
   21ef2:	835a      	strh	r2, [r3, #26]
   21ef4:	e01a      	b.n	21f2c <_usart_interrupt_handler+0x200>
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) {
   21ef6:	231f      	movs	r3, #31
   21ef8:	18fb      	adds	r3, r7, r3
   21efa:	781b      	ldrb	r3, [r3, #0]
   21efc:	2210      	movs	r2, #16
   21efe:	4013      	ands	r3, r2
   21f00:	d007      	beq.n	21f12 <_usart_interrupt_handler+0x1e6>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
   21f02:	69bb      	ldr	r3, [r7, #24]
   21f04:	2232      	movs	r2, #50	; 0x32
   21f06:	2142      	movs	r1, #66	; 0x42
   21f08:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
   21f0a:	697b      	ldr	r3, [r7, #20]
   21f0c:	2210      	movs	r2, #16
   21f0e:	835a      	strh	r2, [r3, #26]
   21f10:	e00c      	b.n	21f2c <_usart_interrupt_handler+0x200>
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) {
   21f12:	231f      	movs	r3, #31
   21f14:	18fb      	adds	r3, r7, r3
   21f16:	781b      	ldrb	r3, [r3, #0]
   21f18:	2220      	movs	r2, #32
   21f1a:	4013      	ands	r3, r2
   21f1c:	d006      	beq.n	21f2c <_usart_interrupt_handler+0x200>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
   21f1e:	69bb      	ldr	r3, [r7, #24]
   21f20:	2232      	movs	r2, #50	; 0x32
   21f22:	2141      	movs	r1, #65	; 0x41
   21f24:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
   21f26:	697b      	ldr	r3, [r7, #20]
   21f28:	2220      	movs	r2, #32
   21f2a:	835a      	strh	r2, [r3, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
						& (1 << USART_CALLBACK_ERROR)) {
   21f2c:	2310      	movs	r3, #16
   21f2e:	18fb      	adds	r3, r7, r3
   21f30:	881b      	ldrh	r3, [r3, #0]
   21f32:	2204      	movs	r2, #4
   21f34:	4013      	ands	r3, r2
				if (callback_status
   21f36:	d050      	beq.n	21fda <_usart_interrupt_handler+0x2ae>
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
   21f38:	69bb      	ldr	r3, [r7, #24]
   21f3a:	695b      	ldr	r3, [r3, #20]
   21f3c:	69ba      	ldr	r2, [r7, #24]
   21f3e:	0010      	movs	r0, r2
   21f40:	4798      	blx	r3
   21f42:	e04a      	b.n	21fda <_usart_interrupt_handler+0x2ae>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
   21f44:	697b      	ldr	r3, [r7, #20]
   21f46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
   21f48:	b29a      	uxth	r2, r3
   21f4a:	230e      	movs	r3, #14
   21f4c:	18fb      	adds	r3, r7, r3
   21f4e:	05d2      	lsls	r2, r2, #23
   21f50:	0dd2      	lsrs	r2, r2, #23
   21f52:	801a      	strh	r2, [r3, #0]

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
   21f54:	69bb      	ldr	r3, [r7, #24]
   21f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   21f58:	220e      	movs	r2, #14
   21f5a:	18ba      	adds	r2, r7, r2
   21f5c:	8812      	ldrh	r2, [r2, #0]
   21f5e:	b2d2      	uxtb	r2, r2
   21f60:	701a      	strb	r2, [r3, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
   21f62:	69bb      	ldr	r3, [r7, #24]
   21f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   21f66:	1c5a      	adds	r2, r3, #1
   21f68:	69bb      	ldr	r3, [r7, #24]
   21f6a:	625a      	str	r2, [r3, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
   21f6c:	69bb      	ldr	r3, [r7, #24]
   21f6e:	795b      	ldrb	r3, [r3, #5]
   21f70:	2b01      	cmp	r3, #1
   21f72:	d10d      	bne.n	21f90 <_usart_interrupt_handler+0x264>
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
   21f74:	69bb      	ldr	r3, [r7, #24]
   21f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   21f78:	220e      	movs	r2, #14
   21f7a:	18ba      	adds	r2, r7, r2
   21f7c:	8812      	ldrh	r2, [r2, #0]
   21f7e:	0a12      	lsrs	r2, r2, #8
   21f80:	b292      	uxth	r2, r2
   21f82:	b2d2      	uxtb	r2, r2
   21f84:	701a      	strb	r2, [r3, #0]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
   21f86:	69bb      	ldr	r3, [r7, #24]
   21f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   21f8a:	1c5a      	adds	r2, r3, #1
   21f8c:	69bb      	ldr	r3, [r7, #24]
   21f8e:	625a      	str	r2, [r3, #36]	; 0x24
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
   21f90:	69bb      	ldr	r3, [r7, #24]
   21f92:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
   21f94:	b29b      	uxth	r3, r3
   21f96:	3b01      	subs	r3, #1
   21f98:	b29b      	uxth	r3, r3
   21f9a:	69ba      	ldr	r2, [r7, #24]
   21f9c:	1c19      	adds	r1, r3, #0
   21f9e:	8591      	strh	r1, [r2, #44]	; 0x2c
   21fa0:	2b00      	cmp	r3, #0
   21fa2:	d11a      	bne.n	21fda <_usart_interrupt_handler+0x2ae>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
   21fa4:	697b      	ldr	r3, [r7, #20]
   21fa6:	2204      	movs	r2, #4
   21fa8:	751a      	strb	r2, [r3, #20]
					module->rx_status = STATUS_OK;
   21faa:	69bb      	ldr	r3, [r7, #24]
   21fac:	2232      	movs	r2, #50	; 0x32
   21fae:	2100      	movs	r1, #0
   21fb0:	5499      	strb	r1, [r3, r2]

					/* Run callback if registered and enabled */
					if (callback_status
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
   21fb2:	2310      	movs	r3, #16
   21fb4:	18fb      	adds	r3, r7, r3
   21fb6:	881b      	ldrh	r3, [r3, #0]
   21fb8:	2202      	movs	r2, #2
   21fba:	4013      	ands	r3, r2
					if (callback_status
   21fbc:	d00d      	beq.n	21fda <_usart_interrupt_handler+0x2ae>
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
   21fbe:	69bb      	ldr	r3, [r7, #24]
   21fc0:	691b      	ldr	r3, [r3, #16]
   21fc2:	69ba      	ldr	r2, [r7, #24]
   21fc4:	0010      	movs	r0, r2
   21fc6:	4798      	blx	r3
   21fc8:	e007      	b.n	21fda <_usart_interrupt_handler+0x2ae>
   21fca:	46c0      	nop			; (mov r8, r8)
   21fcc:	20000968 	.word	0x20000968
   21fd0:	00021d09 	.word	0x00021d09
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
   21fd4:	697b      	ldr	r3, [r7, #20]
   21fd6:	2204      	movs	r2, #4
   21fd8:	751a      	strb	r2, [r3, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
   21fda:	2312      	movs	r3, #18
   21fdc:	18fb      	adds	r3, r7, r3
   21fde:	881b      	ldrh	r3, [r3, #0]
   21fe0:	2210      	movs	r2, #16
   21fe2:	4013      	ands	r3, r2
   21fe4:	d010      	beq.n	22008 <_usart_interrupt_handler+0x2dc>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
   21fe6:	697b      	ldr	r3, [r7, #20]
   21fe8:	2210      	movs	r2, #16
   21fea:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
   21fec:	697b      	ldr	r3, [r7, #20]
   21fee:	2210      	movs	r2, #16
   21ff0:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
   21ff2:	2310      	movs	r3, #16
   21ff4:	18fb      	adds	r3, r7, r3
   21ff6:	881b      	ldrh	r3, [r3, #0]
   21ff8:	2210      	movs	r2, #16
   21ffa:	4013      	ands	r3, r2
   21ffc:	d004      	beq.n	22008 <_usart_interrupt_handler+0x2dc>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
   21ffe:	69bb      	ldr	r3, [r7, #24]
   22000:	69db      	ldr	r3, [r3, #28]
   22002:	69ba      	ldr	r2, [r7, #24]
   22004:	0010      	movs	r0, r2
   22006:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
   22008:	2312      	movs	r3, #18
   2200a:	18fb      	adds	r3, r7, r3
   2200c:	881b      	ldrh	r3, [r3, #0]
   2200e:	2220      	movs	r2, #32
   22010:	4013      	ands	r3, r2
   22012:	d010      	beq.n	22036 <_usart_interrupt_handler+0x30a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
   22014:	697b      	ldr	r3, [r7, #20]
   22016:	2220      	movs	r2, #32
   22018:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
   2201a:	697b      	ldr	r3, [r7, #20]
   2201c:	2220      	movs	r2, #32
   2201e:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
   22020:	2310      	movs	r3, #16
   22022:	18fb      	adds	r3, r7, r3
   22024:	881b      	ldrh	r3, [r3, #0]
   22026:	2208      	movs	r2, #8
   22028:	4013      	ands	r3, r2
   2202a:	d004      	beq.n	22036 <_usart_interrupt_handler+0x30a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
   2202c:	69bb      	ldr	r3, [r7, #24]
   2202e:	699b      	ldr	r3, [r3, #24]
   22030:	69ba      	ldr	r2, [r7, #24]
   22032:	0010      	movs	r0, r2
   22034:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
   22036:	2312      	movs	r3, #18
   22038:	18fb      	adds	r3, r7, r3
   2203a:	881b      	ldrh	r3, [r3, #0]
   2203c:	2208      	movs	r2, #8
   2203e:	4013      	ands	r3, r2
   22040:	d010      	beq.n	22064 <_usart_interrupt_handler+0x338>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
   22042:	697b      	ldr	r3, [r7, #20]
   22044:	2208      	movs	r2, #8
   22046:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
   22048:	697b      	ldr	r3, [r7, #20]
   2204a:	2208      	movs	r2, #8
   2204c:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
   2204e:	2310      	movs	r3, #16
   22050:	18fb      	adds	r3, r7, r3
   22052:	881b      	ldrh	r3, [r3, #0]
   22054:	2220      	movs	r2, #32
   22056:	4013      	ands	r3, r2
   22058:	d004      	beq.n	22064 <_usart_interrupt_handler+0x338>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
   2205a:	69bb      	ldr	r3, [r7, #24]
   2205c:	6a1b      	ldr	r3, [r3, #32]
   2205e:	69ba      	ldr	r2, [r7, #24]
   22060:	0010      	movs	r0, r2
   22062:	4798      	blx	r3
		}
	}
#endif
}
   22064:	46c0      	nop			; (mov r8, r8)
   22066:	46bd      	mov	sp, r7
   22068:	b008      	add	sp, #32
   2206a:	bd80      	pop	{r7, pc}

0002206c <_sercom_default_handler>:
 *
 * \param[in] instance SERCOM instance used.
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
   2206c:	b580      	push	{r7, lr}
   2206e:	b082      	sub	sp, #8
   22070:	af00      	add	r7, sp, #0
   22072:	0002      	movs	r2, r0
   22074:	1dfb      	adds	r3, r7, #7
   22076:	701a      	strb	r2, [r3, #0]
	Assert(false);
}
   22078:	46c0      	nop			; (mov r8, r8)
   2207a:	46bd      	mov	sp, r7
   2207c:	b002      	add	sp, #8
   2207e:	bd80      	pop	{r7, pc}

00022080 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
   22080:	b580      	push	{r7, lr}
   22082:	b084      	sub	sp, #16
   22084:	af00      	add	r7, sp, #0
   22086:	0002      	movs	r2, r0
   22088:	6039      	str	r1, [r7, #0]
   2208a:	1dfb      	adds	r3, r7, #7
   2208c:	701a      	strb	r2, [r3, #0]
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
   2208e:	4b13      	ldr	r3, [pc, #76]	; (220dc <_sercom_set_handler+0x5c>)
   22090:	781b      	ldrb	r3, [r3, #0]
   22092:	2201      	movs	r2, #1
   22094:	4053      	eors	r3, r2
   22096:	b2db      	uxtb	r3, r3
   22098:	2b00      	cmp	r3, #0
   2209a:	d015      	beq.n	220c8 <_sercom_set_handler+0x48>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   2209c:	2300      	movs	r3, #0
   2209e:	60fb      	str	r3, [r7, #12]
   220a0:	e00c      	b.n	220bc <_sercom_set_handler+0x3c>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
   220a2:	4b0f      	ldr	r3, [pc, #60]	; (220e0 <_sercom_set_handler+0x60>)
   220a4:	68fa      	ldr	r2, [r7, #12]
   220a6:	0092      	lsls	r2, r2, #2
   220a8:	490e      	ldr	r1, [pc, #56]	; (220e4 <_sercom_set_handler+0x64>)
   220aa:	50d1      	str	r1, [r2, r3]
			_sercom_instances[i] = NULL;
   220ac:	4b0e      	ldr	r3, [pc, #56]	; (220e8 <_sercom_set_handler+0x68>)
   220ae:	68fa      	ldr	r2, [r7, #12]
   220b0:	0092      	lsls	r2, r2, #2
   220b2:	2100      	movs	r1, #0
   220b4:	50d1      	str	r1, [r2, r3]
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   220b6:	68fb      	ldr	r3, [r7, #12]
   220b8:	3301      	adds	r3, #1
   220ba:	60fb      	str	r3, [r7, #12]
   220bc:	68fb      	ldr	r3, [r7, #12]
   220be:	2b05      	cmp	r3, #5
   220c0:	d9ef      	bls.n	220a2 <_sercom_set_handler+0x22>
		}

		_handler_table_initialized = true;
   220c2:	4b06      	ldr	r3, [pc, #24]	; (220dc <_sercom_set_handler+0x5c>)
   220c4:	2201      	movs	r2, #1
   220c6:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
   220c8:	1dfb      	adds	r3, r7, #7
   220ca:	781a      	ldrb	r2, [r3, #0]
   220cc:	4b04      	ldr	r3, [pc, #16]	; (220e0 <_sercom_set_handler+0x60>)
   220ce:	0092      	lsls	r2, r2, #2
   220d0:	6839      	ldr	r1, [r7, #0]
   220d2:	50d1      	str	r1, [r2, r3]
}
   220d4:	46c0      	nop			; (mov r8, r8)
   220d6:	46bd      	mov	sp, r7
   220d8:	b004      	add	sp, #16
   220da:	bd80      	pop	{r7, pc}
   220dc:	200003f8 	.word	0x200003f8
   220e0:	200003fc 	.word	0x200003fc
   220e4:	0002206d 	.word	0x0002206d
   220e8:	20000968 	.word	0x20000968

000220ec <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
   220ec:	b590      	push	{r4, r7, lr}
   220ee:	b085      	sub	sp, #20
   220f0:	af00      	add	r7, sp, #0
   220f2:	6078      	str	r0, [r7, #4]
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
   220f4:	2308      	movs	r3, #8
   220f6:	18fb      	adds	r3, r7, r3
   220f8:	4a0b      	ldr	r2, [pc, #44]	; (22128 <_sercom_get_interrupt_vector+0x3c>)
   220fa:	6811      	ldr	r1, [r2, #0]
   220fc:	6019      	str	r1, [r3, #0]
   220fe:	8892      	ldrh	r2, [r2, #4]
   22100:	809a      	strh	r2, [r3, #4]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
   22102:	230f      	movs	r3, #15
   22104:	18fc      	adds	r4, r7, r3
   22106:	687b      	ldr	r3, [r7, #4]
   22108:	0018      	movs	r0, r3
   2210a:	4b08      	ldr	r3, [pc, #32]	; (2212c <_sercom_get_interrupt_vector+0x40>)
   2210c:	4798      	blx	r3
   2210e:	0003      	movs	r3, r0
   22110:	7023      	strb	r3, [r4, #0]

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
   22112:	230f      	movs	r3, #15
   22114:	18fb      	adds	r3, r7, r3
   22116:	781b      	ldrb	r3, [r3, #0]
   22118:	2208      	movs	r2, #8
   2211a:	18ba      	adds	r2, r7, r2
   2211c:	5cd3      	ldrb	r3, [r2, r3]
   2211e:	b25b      	sxtb	r3, r3
}
   22120:	0018      	movs	r0, r3
   22122:	46bd      	mov	sp, r7
   22124:	b005      	add	sp, #20
   22126:	bd90      	pop	{r4, r7, pc}
   22128:	0002a788 	.word	0x0002a788
   2212c:	0001e9a9 	.word	0x0001e9a9

00022130 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
   22130:	b580      	push	{r7, lr}
   22132:	af00      	add	r7, sp, #0
   22134:	4b03      	ldr	r3, [pc, #12]	; (22144 <SERCOM0_Handler+0x14>)
   22136:	681b      	ldr	r3, [r3, #0]
   22138:	2000      	movs	r0, #0
   2213a:	4798      	blx	r3
   2213c:	46c0      	nop			; (mov r8, r8)
   2213e:	46bd      	mov	sp, r7
   22140:	bd80      	pop	{r7, pc}
   22142:	46c0      	nop			; (mov r8, r8)
   22144:	200003fc 	.word	0x200003fc

00022148 <SERCOM1_Handler>:
   22148:	b580      	push	{r7, lr}
   2214a:	af00      	add	r7, sp, #0
   2214c:	4b03      	ldr	r3, [pc, #12]	; (2215c <SERCOM1_Handler+0x14>)
   2214e:	685b      	ldr	r3, [r3, #4]
   22150:	2001      	movs	r0, #1
   22152:	4798      	blx	r3
   22154:	46c0      	nop			; (mov r8, r8)
   22156:	46bd      	mov	sp, r7
   22158:	bd80      	pop	{r7, pc}
   2215a:	46c0      	nop			; (mov r8, r8)
   2215c:	200003fc 	.word	0x200003fc

00022160 <SERCOM2_Handler>:
   22160:	b580      	push	{r7, lr}
   22162:	af00      	add	r7, sp, #0
   22164:	4b03      	ldr	r3, [pc, #12]	; (22174 <SERCOM2_Handler+0x14>)
   22166:	689b      	ldr	r3, [r3, #8]
   22168:	2002      	movs	r0, #2
   2216a:	4798      	blx	r3
   2216c:	46c0      	nop			; (mov r8, r8)
   2216e:	46bd      	mov	sp, r7
   22170:	bd80      	pop	{r7, pc}
   22172:	46c0      	nop			; (mov r8, r8)
   22174:	200003fc 	.word	0x200003fc

00022178 <SERCOM3_Handler>:
   22178:	b580      	push	{r7, lr}
   2217a:	af00      	add	r7, sp, #0
   2217c:	4b03      	ldr	r3, [pc, #12]	; (2218c <SERCOM3_Handler+0x14>)
   2217e:	68db      	ldr	r3, [r3, #12]
   22180:	2003      	movs	r0, #3
   22182:	4798      	blx	r3
   22184:	46c0      	nop			; (mov r8, r8)
   22186:	46bd      	mov	sp, r7
   22188:	bd80      	pop	{r7, pc}
   2218a:	46c0      	nop			; (mov r8, r8)
   2218c:	200003fc 	.word	0x200003fc

00022190 <SERCOM4_Handler>:
   22190:	b580      	push	{r7, lr}
   22192:	af00      	add	r7, sp, #0
   22194:	4b03      	ldr	r3, [pc, #12]	; (221a4 <SERCOM4_Handler+0x14>)
   22196:	691b      	ldr	r3, [r3, #16]
   22198:	2004      	movs	r0, #4
   2219a:	4798      	blx	r3
   2219c:	46c0      	nop			; (mov r8, r8)
   2219e:	46bd      	mov	sp, r7
   221a0:	bd80      	pop	{r7, pc}
   221a2:	46c0      	nop			; (mov r8, r8)
   221a4:	200003fc 	.word	0x200003fc

000221a8 <SERCOM5_Handler>:
   221a8:	b580      	push	{r7, lr}
   221aa:	af00      	add	r7, sp, #0
   221ac:	4b03      	ldr	r3, [pc, #12]	; (221bc <SERCOM5_Handler+0x14>)
   221ae:	695b      	ldr	r3, [r3, #20]
   221b0:	2005      	movs	r0, #5
   221b2:	4798      	blx	r3
   221b4:	46c0      	nop			; (mov r8, r8)
   221b6:	46bd      	mov	sp, r7
   221b8:	bd80      	pop	{r7, pc}
   221ba:	46c0      	nop			; (mov r8, r8)
   221bc:	200003fc 	.word	0x200003fc

000221c0 <_extint_get_eic_from_channel>:
{
   221c0:	b580      	push	{r7, lr}
   221c2:	b084      	sub	sp, #16
   221c4:	af00      	add	r7, sp, #0
   221c6:	0002      	movs	r2, r0
   221c8:	1dfb      	adds	r3, r7, #7
   221ca:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
   221cc:	230f      	movs	r3, #15
   221ce:	18fb      	adds	r3, r7, r3
   221d0:	1dfa      	adds	r2, r7, #7
   221d2:	7812      	ldrb	r2, [r2, #0]
   221d4:	0952      	lsrs	r2, r2, #5
   221d6:	701a      	strb	r2, [r3, #0]
	if (eic_index < EIC_INST_NUM) {
   221d8:	230f      	movs	r3, #15
   221da:	18fb      	adds	r3, r7, r3
   221dc:	781b      	ldrb	r3, [r3, #0]
   221de:	2b00      	cmp	r3, #0
   221e0:	d10c      	bne.n	221fc <_extint_get_eic_from_channel+0x3c>
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   221e2:	4b09      	ldr	r3, [pc, #36]	; (22208 <_extint_get_eic_from_channel+0x48>)
   221e4:	60bb      	str	r3, [r7, #8]
		return eics[eic_index];
   221e6:	230f      	movs	r3, #15
   221e8:	18fb      	adds	r3, r7, r3
   221ea:	781b      	ldrb	r3, [r3, #0]
   221ec:	009b      	lsls	r3, r3, #2
   221ee:	2210      	movs	r2, #16
   221f0:	4694      	mov	ip, r2
   221f2:	44bc      	add	ip, r7
   221f4:	4463      	add	r3, ip
   221f6:	3b08      	subs	r3, #8
   221f8:	681b      	ldr	r3, [r3, #0]
   221fa:	e000      	b.n	221fe <_extint_get_eic_from_channel+0x3e>
		return NULL;
   221fc:	2300      	movs	r3, #0
}
   221fe:	0018      	movs	r0, r3
   22200:	46bd      	mov	sp, r7
   22202:	b004      	add	sp, #16
   22204:	bd80      	pop	{r7, pc}
   22206:	46c0      	nop			; (mov r8, r8)
   22208:	40001800 	.word	0x40001800

0002220c <extint_chan_is_detected>:
{
   2220c:	b580      	push	{r7, lr}
   2220e:	b084      	sub	sp, #16
   22210:	af00      	add	r7, sp, #0
   22212:	0002      	movs	r2, r0
   22214:	1dfb      	adds	r3, r7, #7
   22216:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
   22218:	1dfb      	adds	r3, r7, #7
   2221a:	781b      	ldrb	r3, [r3, #0]
   2221c:	0018      	movs	r0, r3
   2221e:	4b0b      	ldr	r3, [pc, #44]	; (2224c <extint_chan_is_detected+0x40>)
   22220:	4798      	blx	r3
   22222:	0003      	movs	r3, r0
   22224:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
   22226:	1dfb      	adds	r3, r7, #7
   22228:	781b      	ldrb	r3, [r3, #0]
   2222a:	221f      	movs	r2, #31
   2222c:	4013      	ands	r3, r2
   2222e:	2201      	movs	r2, #1
   22230:	409a      	lsls	r2, r3
   22232:	0013      	movs	r3, r2
   22234:	60bb      	str	r3, [r7, #8]
	return (eic_module->INTFLAG.reg & eic_mask);
   22236:	68fb      	ldr	r3, [r7, #12]
   22238:	691b      	ldr	r3, [r3, #16]
   2223a:	68ba      	ldr	r2, [r7, #8]
   2223c:	4013      	ands	r3, r2
   2223e:	1e5a      	subs	r2, r3, #1
   22240:	4193      	sbcs	r3, r2
   22242:	b2db      	uxtb	r3, r3
}
   22244:	0018      	movs	r0, r3
   22246:	46bd      	mov	sp, r7
   22248:	b004      	add	sp, #16
   2224a:	bd80      	pop	{r7, pc}
   2224c:	000221c1 	.word	0x000221c1

00022250 <extint_chan_clear_detected>:
{
   22250:	b580      	push	{r7, lr}
   22252:	b084      	sub	sp, #16
   22254:	af00      	add	r7, sp, #0
   22256:	0002      	movs	r2, r0
   22258:	1dfb      	adds	r3, r7, #7
   2225a:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
   2225c:	1dfb      	adds	r3, r7, #7
   2225e:	781b      	ldrb	r3, [r3, #0]
   22260:	0018      	movs	r0, r3
   22262:	4b09      	ldr	r3, [pc, #36]	; (22288 <extint_chan_clear_detected+0x38>)
   22264:	4798      	blx	r3
   22266:	0003      	movs	r3, r0
   22268:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
   2226a:	1dfb      	adds	r3, r7, #7
   2226c:	781b      	ldrb	r3, [r3, #0]
   2226e:	221f      	movs	r2, #31
   22270:	4013      	ands	r3, r2
   22272:	2201      	movs	r2, #1
   22274:	409a      	lsls	r2, r3
   22276:	0013      	movs	r3, r2
   22278:	60bb      	str	r3, [r7, #8]
	eic_module->INTFLAG.reg = eic_mask;
   2227a:	68fb      	ldr	r3, [r7, #12]
   2227c:	68ba      	ldr	r2, [r7, #8]
   2227e:	611a      	str	r2, [r3, #16]
}
   22280:	46c0      	nop			; (mov r8, r8)
   22282:	46bd      	mov	sp, r7
   22284:	b004      	add	sp, #16
   22286:	bd80      	pop	{r7, pc}
   22288:	000221c1 	.word	0x000221c1

0002228c <extint_register_callback>:
 */
enum status_code extint_register_callback(
	const extint_callback_t callback,
	const uint8_t channel,
	const enum extint_callback_type type)
{
   2228c:	b580      	push	{r7, lr}
   2228e:	b082      	sub	sp, #8
   22290:	af00      	add	r7, sp, #0
   22292:	6078      	str	r0, [r7, #4]
   22294:	0008      	movs	r0, r1
   22296:	0011      	movs	r1, r2
   22298:	1cfb      	adds	r3, r7, #3
   2229a:	1c02      	adds	r2, r0, #0
   2229c:	701a      	strb	r2, [r3, #0]
   2229e:	1cbb      	adds	r3, r7, #2
   222a0:	1c0a      	adds	r2, r1, #0
   222a2:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
   222a4:	1cbb      	adds	r3, r7, #2
   222a6:	781b      	ldrb	r3, [r3, #0]
   222a8:	2b00      	cmp	r3, #0
   222aa:	d001      	beq.n	222b0 <extint_register_callback+0x24>
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
   222ac:	2317      	movs	r3, #23
   222ae:	e019      	b.n	222e4 <extint_register_callback+0x58>
	}

	if (_extint_dev.callbacks[channel] == NULL) {
   222b0:	1cfb      	adds	r3, r7, #3
   222b2:	781a      	ldrb	r2, [r3, #0]
   222b4:	4b0d      	ldr	r3, [pc, #52]	; (222ec <extint_register_callback+0x60>)
   222b6:	0092      	lsls	r2, r2, #2
   222b8:	58d3      	ldr	r3, [r2, r3]
   222ba:	2b00      	cmp	r3, #0
   222bc:	d107      	bne.n	222ce <extint_register_callback+0x42>
		_extint_dev.callbacks[channel] = callback;
   222be:	1cfb      	adds	r3, r7, #3
   222c0:	781a      	ldrb	r2, [r3, #0]
   222c2:	4b0a      	ldr	r3, [pc, #40]	; (222ec <extint_register_callback+0x60>)
   222c4:	0092      	lsls	r2, r2, #2
   222c6:	6879      	ldr	r1, [r7, #4]
   222c8:	50d1      	str	r1, [r2, r3]
		return STATUS_OK;
   222ca:	2300      	movs	r3, #0
   222cc:	e00a      	b.n	222e4 <extint_register_callback+0x58>
	} else if (_extint_dev.callbacks[channel] == callback) {
   222ce:	1cfb      	adds	r3, r7, #3
   222d0:	781a      	ldrb	r2, [r3, #0]
   222d2:	4b06      	ldr	r3, [pc, #24]	; (222ec <extint_register_callback+0x60>)
   222d4:	0092      	lsls	r2, r2, #2
   222d6:	58d2      	ldr	r2, [r2, r3]
   222d8:	687b      	ldr	r3, [r7, #4]
   222da:	429a      	cmp	r2, r3
   222dc:	d101      	bne.n	222e2 <extint_register_callback+0x56>
		return STATUS_OK;
   222de:	2300      	movs	r3, #0
   222e0:	e000      	b.n	222e4 <extint_register_callback+0x58>
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
   222e2:	231d      	movs	r3, #29
}
   222e4:	0018      	movs	r0, r3
   222e6:	46bd      	mov	sp, r7
   222e8:	b002      	add	sp, #8
   222ea:	bd80      	pop	{r7, pc}
   222ec:	20000900 	.word	0x20000900

000222f0 <extint_chan_enable_callback>:
 * \retval STATUS_ERR_INVALID_ARG  If an invalid callback type was supplied
 */
enum status_code extint_chan_enable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
   222f0:	b580      	push	{r7, lr}
   222f2:	b084      	sub	sp, #16
   222f4:	af00      	add	r7, sp, #0
   222f6:	0002      	movs	r2, r0
   222f8:	1dfb      	adds	r3, r7, #7
   222fa:	701a      	strb	r2, [r3, #0]
   222fc:	1dbb      	adds	r3, r7, #6
   222fe:	1c0a      	adds	r2, r1, #0
   22300:	701a      	strb	r2, [r3, #0]
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
   22302:	1dbb      	adds	r3, r7, #6
   22304:	781b      	ldrb	r3, [r3, #0]
   22306:	2b00      	cmp	r3, #0
   22308:	d10e      	bne.n	22328 <extint_chan_enable_callback+0x38>
		Eic *const eic = _extint_get_eic_from_channel(channel);
   2230a:	1dfb      	adds	r3, r7, #7
   2230c:	781b      	ldrb	r3, [r3, #0]
   2230e:	0018      	movs	r0, r3
   22310:	4b08      	ldr	r3, [pc, #32]	; (22334 <extint_chan_enable_callback+0x44>)
   22312:	4798      	blx	r3
   22314:	0003      	movs	r3, r0
   22316:	60fb      	str	r3, [r7, #12]

		eic->INTENSET.reg = (1UL << channel);
   22318:	1dfb      	adds	r3, r7, #7
   2231a:	781b      	ldrb	r3, [r3, #0]
   2231c:	2201      	movs	r2, #1
   2231e:	409a      	lsls	r2, r3
   22320:	68fb      	ldr	r3, [r7, #12]
   22322:	60da      	str	r2, [r3, #12]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
   22324:	2300      	movs	r3, #0
   22326:	e000      	b.n	2232a <extint_chan_enable_callback+0x3a>
		return STATUS_ERR_INVALID_ARG;
   22328:	2317      	movs	r3, #23
}
   2232a:	0018      	movs	r0, r3
   2232c:	46bd      	mov	sp, r7
   2232e:	b004      	add	sp, #16
   22330:	bd80      	pop	{r7, pc}
   22332:	46c0      	nop			; (mov r8, r8)
   22334:	000221c1 	.word	0x000221c1

00022338 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
   22338:	b580      	push	{r7, lr}
   2233a:	af00      	add	r7, sp, #0
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
   2233c:	4b15      	ldr	r3, [pc, #84]	; (22394 <EIC_Handler+0x5c>)
   2233e:	2200      	movs	r2, #0
   22340:	701a      	strb	r2, [r3, #0]
   22342:	e020      	b.n	22386 <EIC_Handler+0x4e>
		if (extint_chan_is_detected(_current_channel)) {
   22344:	4b13      	ldr	r3, [pc, #76]	; (22394 <EIC_Handler+0x5c>)
   22346:	781b      	ldrb	r3, [r3, #0]
   22348:	0018      	movs	r0, r3
   2234a:	4b13      	ldr	r3, [pc, #76]	; (22398 <EIC_Handler+0x60>)
   2234c:	4798      	blx	r3
   2234e:	1e03      	subs	r3, r0, #0
   22350:	d013      	beq.n	2237a <EIC_Handler+0x42>
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
   22352:	4b10      	ldr	r3, [pc, #64]	; (22394 <EIC_Handler+0x5c>)
   22354:	781b      	ldrb	r3, [r3, #0]
   22356:	0018      	movs	r0, r3
   22358:	4b10      	ldr	r3, [pc, #64]	; (2239c <EIC_Handler+0x64>)
   2235a:	4798      	blx	r3
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
   2235c:	4b0d      	ldr	r3, [pc, #52]	; (22394 <EIC_Handler+0x5c>)
   2235e:	781b      	ldrb	r3, [r3, #0]
   22360:	001a      	movs	r2, r3
   22362:	4b0f      	ldr	r3, [pc, #60]	; (223a0 <EIC_Handler+0x68>)
   22364:	0092      	lsls	r2, r2, #2
   22366:	58d3      	ldr	r3, [r2, r3]
   22368:	2b00      	cmp	r3, #0
   2236a:	d006      	beq.n	2237a <EIC_Handler+0x42>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
   2236c:	4b09      	ldr	r3, [pc, #36]	; (22394 <EIC_Handler+0x5c>)
   2236e:	781b      	ldrb	r3, [r3, #0]
   22370:	001a      	movs	r2, r3
   22372:	4b0b      	ldr	r3, [pc, #44]	; (223a0 <EIC_Handler+0x68>)
   22374:	0092      	lsls	r2, r2, #2
   22376:	58d3      	ldr	r3, [r2, r3]
   22378:	4798      	blx	r3
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
   2237a:	4b06      	ldr	r3, [pc, #24]	; (22394 <EIC_Handler+0x5c>)
   2237c:	781b      	ldrb	r3, [r3, #0]
   2237e:	3301      	adds	r3, #1
   22380:	b2da      	uxtb	r2, r3
   22382:	4b04      	ldr	r3, [pc, #16]	; (22394 <EIC_Handler+0x5c>)
   22384:	701a      	strb	r2, [r3, #0]
   22386:	4b03      	ldr	r3, [pc, #12]	; (22394 <EIC_Handler+0x5c>)
   22388:	781b      	ldrb	r3, [r3, #0]
   2238a:	2b0f      	cmp	r3, #15
   2238c:	d9da      	bls.n	22344 <EIC_Handler+0xc>
			}
		}
	}
}
   2238e:	46c0      	nop			; (mov r8, r8)
   22390:	46bd      	mov	sp, r7
   22392:	bd80      	pop	{r7, pc}
   22394:	20000980 	.word	0x20000980
   22398:	0002220d 	.word	0x0002220d
   2239c:	00022251 	.word	0x00022251
   223a0:	20000900 	.word	0x20000900

000223a4 <EVSYS_Handler>:

	return STATUS_OK;
}

void EVSYS_Handler(void)
{
   223a4:	b580      	push	{r7, lr}
   223a6:	b082      	sub	sp, #8
   223a8:	af00      	add	r7, sp, #0
	struct events_hook *current_hook = _events_inst.hook_list;
   223aa:	4b15      	ldr	r3, [pc, #84]	; (22400 <EVSYS_Handler+0x5c>)
   223ac:	691b      	ldr	r3, [r3, #16]
   223ae:	607b      	str	r3, [r7, #4]
	uint32_t flag;

	/* Synch the interrupt flag buffer with the hardware register */
	flag = EVSYS->INTFLAG.reg;
   223b0:	4b14      	ldr	r3, [pc, #80]	; (22404 <EVSYS_Handler+0x60>)
   223b2:	699b      	ldr	r3, [r3, #24]
   223b4:	603b      	str	r3, [r7, #0]
	_events_inst.interrupt_flag_buffer |= flag;
   223b6:	4b12      	ldr	r3, [pc, #72]	; (22400 <EVSYS_Handler+0x5c>)
   223b8:	689a      	ldr	r2, [r3, #8]
   223ba:	683b      	ldr	r3, [r7, #0]
   223bc:	431a      	orrs	r2, r3
   223be:	4b10      	ldr	r3, [pc, #64]	; (22400 <EVSYS_Handler+0x5c>)
   223c0:	609a      	str	r2, [r3, #8]
	/* Clear all hardware interrupt flags */
	EVSYS->INTFLAG.reg = _EVENTS_INTFLAGS_MASK;
   223c2:	4b10      	ldr	r3, [pc, #64]	; (22404 <EVSYS_Handler+0x60>)
   223c4:	4a10      	ldr	r2, [pc, #64]	; (22408 <EVSYS_Handler+0x64>)
   223c6:	619a      	str	r2, [r3, #24]

	/* Traverse the linked list */
	while (current_hook != NULL) {
   223c8:	e008      	b.n	223dc <EVSYS_Handler+0x38>
		current_hook->hook_func(current_hook->resource);
   223ca:	687b      	ldr	r3, [r7, #4]
   223cc:	685a      	ldr	r2, [r3, #4]
   223ce:	687b      	ldr	r3, [r7, #4]
   223d0:	681b      	ldr	r3, [r3, #0]
   223d2:	0018      	movs	r0, r3
   223d4:	4790      	blx	r2
		current_hook = current_hook->next;
   223d6:	687b      	ldr	r3, [r7, #4]
   223d8:	689b      	ldr	r3, [r3, #8]
   223da:	607b      	str	r3, [r7, #4]
	while (current_hook != NULL) {
   223dc:	687b      	ldr	r3, [r7, #4]
   223de:	2b00      	cmp	r3, #0
   223e0:	d1f3      	bne.n	223ca <EVSYS_Handler+0x26>
	}

	/* Clear acknowledged interrupt sources from the interrupt flag buffer */
	flag = _events_inst.interrupt_flag_ack_buffer;
   223e2:	4b07      	ldr	r3, [pc, #28]	; (22400 <EVSYS_Handler+0x5c>)
   223e4:	68db      	ldr	r3, [r3, #12]
   223e6:	603b      	str	r3, [r7, #0]
	_events_inst.interrupt_flag_buffer &= ~flag;
   223e8:	4b05      	ldr	r3, [pc, #20]	; (22400 <EVSYS_Handler+0x5c>)
   223ea:	689b      	ldr	r3, [r3, #8]
   223ec:	683a      	ldr	r2, [r7, #0]
   223ee:	43d2      	mvns	r2, r2
   223f0:	401a      	ands	r2, r3
   223f2:	4b03      	ldr	r3, [pc, #12]	; (22400 <EVSYS_Handler+0x5c>)
   223f4:	609a      	str	r2, [r3, #8]
}
   223f6:	46c0      	nop			; (mov r8, r8)
   223f8:	46bd      	mov	sp, r7
   223fa:	b002      	add	sp, #8
   223fc:	bd80      	pop	{r7, pc}
   223fe:	46c0      	nop			; (mov r8, r8)
   22400:	20000014 	.word	0x20000014
   22404:	42000400 	.word	0x42000400
   22408:	0f0fffff 	.word	0x0f0fffff

0002240c <system_apb_clock_set_mask>:
{
   2240c:	b580      	push	{r7, lr}
   2240e:	b082      	sub	sp, #8
   22410:	af00      	add	r7, sp, #0
   22412:	0002      	movs	r2, r0
   22414:	6039      	str	r1, [r7, #0]
   22416:	1dfb      	adds	r3, r7, #7
   22418:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   2241a:	1dfb      	adds	r3, r7, #7
   2241c:	781b      	ldrb	r3, [r3, #0]
   2241e:	2b01      	cmp	r3, #1
   22420:	d00a      	beq.n	22438 <system_apb_clock_set_mask+0x2c>
   22422:	2b02      	cmp	r3, #2
   22424:	d00f      	beq.n	22446 <system_apb_clock_set_mask+0x3a>
   22426:	2b00      	cmp	r3, #0
   22428:	d114      	bne.n	22454 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   2242a:	4b0e      	ldr	r3, [pc, #56]	; (22464 <system_apb_clock_set_mask+0x58>)
   2242c:	4a0d      	ldr	r2, [pc, #52]	; (22464 <system_apb_clock_set_mask+0x58>)
   2242e:	6991      	ldr	r1, [r2, #24]
   22430:	683a      	ldr	r2, [r7, #0]
   22432:	430a      	orrs	r2, r1
   22434:	619a      	str	r2, [r3, #24]
			break;
   22436:	e00f      	b.n	22458 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   22438:	4b0a      	ldr	r3, [pc, #40]	; (22464 <system_apb_clock_set_mask+0x58>)
   2243a:	4a0a      	ldr	r2, [pc, #40]	; (22464 <system_apb_clock_set_mask+0x58>)
   2243c:	69d1      	ldr	r1, [r2, #28]
   2243e:	683a      	ldr	r2, [r7, #0]
   22440:	430a      	orrs	r2, r1
   22442:	61da      	str	r2, [r3, #28]
			break;
   22444:	e008      	b.n	22458 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   22446:	4b07      	ldr	r3, [pc, #28]	; (22464 <system_apb_clock_set_mask+0x58>)
   22448:	4a06      	ldr	r2, [pc, #24]	; (22464 <system_apb_clock_set_mask+0x58>)
   2244a:	6a11      	ldr	r1, [r2, #32]
   2244c:	683a      	ldr	r2, [r7, #0]
   2244e:	430a      	orrs	r2, r1
   22450:	621a      	str	r2, [r3, #32]
			break;
   22452:	e001      	b.n	22458 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   22454:	2317      	movs	r3, #23
   22456:	e000      	b.n	2245a <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   22458:	2300      	movs	r3, #0
}
   2245a:	0018      	movs	r0, r3
   2245c:	46bd      	mov	sp, r7
   2245e:	b002      	add	sp, #8
   22460:	bd80      	pop	{r7, pc}
   22462:	46c0      	nop			; (mov r8, r8)
   22464:	40000400 	.word	0x40000400

00022468 <_system_events_init>:
#if defined(__GNUC__)
#  pragma GCC diagnostic push
#  pragma GCC diagnostic ignored "-Wmissing-prototypes"
#endif
void _system_events_init(void)
{
   22468:	b580      	push	{r7, lr}
   2246a:	af00      	add	r7, sp, #0
	/* Enable EVSYS register interface */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_EVSYS);
   2246c:	2102      	movs	r1, #2
   2246e:	2002      	movs	r0, #2
   22470:	4b07      	ldr	r3, [pc, #28]	; (22490 <_system_events_init+0x28>)
   22472:	4798      	blx	r3

	/* Make sure the EVSYS module is properly reset */
	EVSYS->CTRL.reg = EVSYS_CTRL_SWRST;
   22474:	4b07      	ldr	r3, [pc, #28]	; (22494 <_system_events_init+0x2c>)
   22476:	2201      	movs	r2, #1
   22478:	701a      	strb	r2, [r3, #0]

	while (EVSYS->CTRL.reg & EVSYS_CTRL_SWRST) {
   2247a:	46c0      	nop			; (mov r8, r8)
   2247c:	4b05      	ldr	r3, [pc, #20]	; (22494 <_system_events_init+0x2c>)
   2247e:	781b      	ldrb	r3, [r3, #0]
   22480:	b2db      	uxtb	r3, r3
   22482:	001a      	movs	r2, r3
   22484:	2301      	movs	r3, #1
   22486:	4013      	ands	r3, r2
   22488:	d1f8      	bne.n	2247c <_system_events_init+0x14>
	}
}
   2248a:	46c0      	nop			; (mov r8, r8)
   2248c:	46bd      	mov	sp, r7
   2248e:	bd80      	pop	{r7, pc}
   22490:	0002240d 	.word	0x0002240d
   22494:	42000400 	.word	0x42000400

00022498 <ac_register_callback>:
 */
enum status_code ac_register_callback(
		struct ac_module *const module,
		ac_callback_t callback_func,
		const enum ac_callback callback_type)
{
   22498:	b580      	push	{r7, lr}
   2249a:	b084      	sub	sp, #16
   2249c:	af00      	add	r7, sp, #0
   2249e:	60f8      	str	r0, [r7, #12]
   224a0:	60b9      	str	r1, [r7, #8]
   224a2:	1dfb      	adds	r3, r7, #7
   224a4:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
   224a6:	1dfb      	adds	r3, r7, #7
   224a8:	781b      	ldrb	r3, [r3, #0]
   224aa:	68fa      	ldr	r2, [r7, #12]
   224ac:	009b      	lsls	r3, r3, #2
   224ae:	18d3      	adds	r3, r2, r3
   224b0:	3304      	adds	r3, #4
   224b2:	68ba      	ldr	r2, [r7, #8]
   224b4:	601a      	str	r2, [r3, #0]

	/* Set software flag for callback */
	module->register_callback_mask |= (1 << callback_type);
   224b6:	68fb      	ldr	r3, [r7, #12]
   224b8:	7e1b      	ldrb	r3, [r3, #24]
   224ba:	b25a      	sxtb	r2, r3
   224bc:	1dfb      	adds	r3, r7, #7
   224be:	781b      	ldrb	r3, [r3, #0]
   224c0:	2101      	movs	r1, #1
   224c2:	4099      	lsls	r1, r3
   224c4:	000b      	movs	r3, r1
   224c6:	b25b      	sxtb	r3, r3
   224c8:	4313      	orrs	r3, r2
   224ca:	b25b      	sxtb	r3, r3
   224cc:	b2da      	uxtb	r2, r3
   224ce:	68fb      	ldr	r3, [r7, #12]
   224d0:	761a      	strb	r2, [r3, #24]

	return STATUS_OK;
   224d2:	2300      	movs	r3, #0
}
   224d4:	0018      	movs	r0, r3
   224d6:	46bd      	mov	sp, r7
   224d8:	b004      	add	sp, #16
   224da:	bd80      	pop	{r7, pc}

000224dc <AC_Handler>:
/**
 * \internal ISR handler for AC
 */
#if (AC_INST_NUM == 1)
void AC_Handler(void)
{
   224dc:	b580      	push	{r7, lr}
   224de:	af00      	add	r7, sp, #0
	_ac_interrupt_handler(0);
   224e0:	2000      	movs	r0, #0
   224e2:	4b02      	ldr	r3, [pc, #8]	; (224ec <AC_Handler+0x10>)
   224e4:	4798      	blx	r3
}
   224e6:	46c0      	nop			; (mov r8, r8)
   224e8:	46bd      	mov	sp, r7
   224ea:	bd80      	pop	{r7, pc}
   224ec:	000224f1 	.word	0x000224f1

000224f0 <_ac_interrupt_handler>:
 * that are registered and enabled.
 *
 * \param [in] instance_index  Default value 0
 */
void _ac_interrupt_handler(const uint32_t instance_index)
{
   224f0:	b580      	push	{r7, lr}
   224f2:	b084      	sub	sp, #16
   224f4:	af00      	add	r7, sp, #0
   224f6:	6078      	str	r0, [r7, #4]
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */

	struct ac_module *module = _ac_instance[instance_index];
   224f8:	4b23      	ldr	r3, [pc, #140]	; (22588 <_ac_interrupt_handler+0x98>)
   224fa:	687a      	ldr	r2, [r7, #4]
   224fc:	0092      	lsls	r2, r2, #2
   224fe:	58d3      	ldr	r3, [r2, r3]
   22500:	60fb      	str	r3, [r7, #12]

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask =
			_ac_instance[instance_index]->hw->INTFLAG.reg &
   22502:	4b21      	ldr	r3, [pc, #132]	; (22588 <_ac_interrupt_handler+0x98>)
   22504:	687a      	ldr	r2, [r7, #4]
   22506:	0092      	lsls	r2, r2, #2
   22508:	58d3      	ldr	r3, [r2, r3]
   2250a:	681b      	ldr	r3, [r3, #0]
   2250c:	799b      	ldrb	r3, [r3, #6]
   2250e:	b2da      	uxtb	r2, r3
			(module->register_callback_mask & module->enable_callback_mask);
   22510:	68fb      	ldr	r3, [r7, #12]
   22512:	7e1b      	ldrb	r3, [r3, #24]
   22514:	68f9      	ldr	r1, [r7, #12]
   22516:	7e49      	ldrb	r1, [r1, #25]
	interrupt_and_callback_status_mask =
   22518:	400b      	ands	r3, r1
   2251a:	b2d9      	uxtb	r1, r3
   2251c:	230b      	movs	r3, #11
   2251e:	18fb      	adds	r3, r7, r3
   22520:	400a      	ands	r2, r1
   22522:	701a      	strb	r2, [r3, #0]

	/* Check if comparator channel 0 needs to be serviced */
	if (interrupt_and_callback_status_mask & AC_INTFLAG_COMP0) {
   22524:	230b      	movs	r3, #11
   22526:	18fb      	adds	r3, r7, r3
   22528:	781b      	ldrb	r3, [r3, #0]
   2252a:	2201      	movs	r2, #1
   2252c:	4013      	ands	r3, r2
   2252e:	d008      	beq.n	22542 <_ac_interrupt_handler+0x52>
		/* Invoke registered and enabled callback function */
		(module->callback[AC_CALLBACK_COMPARATOR_0])(module);
   22530:	68fb      	ldr	r3, [r7, #12]
   22532:	685b      	ldr	r3, [r3, #4]
   22534:	68fa      	ldr	r2, [r7, #12]
   22536:	0010      	movs	r0, r2
   22538:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->INTFLAG.reg = AC_INTFLAG_COMP0;
   2253a:	68fb      	ldr	r3, [r7, #12]
   2253c:	681b      	ldr	r3, [r3, #0]
   2253e:	2201      	movs	r2, #1
   22540:	719a      	strb	r2, [r3, #6]
	}

	/* Check if comparator channel 1 needs to be serviced */
	if (interrupt_and_callback_status_mask & AC_INTFLAG_COMP1) {
   22542:	230b      	movs	r3, #11
   22544:	18fb      	adds	r3, r7, r3
   22546:	781b      	ldrb	r3, [r3, #0]
   22548:	2202      	movs	r2, #2
   2254a:	4013      	ands	r3, r2
   2254c:	d008      	beq.n	22560 <_ac_interrupt_handler+0x70>
		/* Invoke registered and enabled callback function */
		(module->callback[AC_CALLBACK_COMPARATOR_1])(module);
   2254e:	68fb      	ldr	r3, [r7, #12]
   22550:	689b      	ldr	r3, [r3, #8]
   22552:	68fa      	ldr	r2, [r7, #12]
   22554:	0010      	movs	r0, r2
   22556:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->INTFLAG.reg = AC_INTFLAG_COMP1;
   22558:	68fb      	ldr	r3, [r7, #12]
   2255a:	681b      	ldr	r3, [r3, #0]
   2255c:	2202      	movs	r2, #2
   2255e:	719a      	strb	r2, [r3, #6]
	}

	/* Check if window 0 needs to be serviced */
	if (interrupt_and_callback_status_mask & AC_INTFLAG_WIN0) {
   22560:	230b      	movs	r3, #11
   22562:	18fb      	adds	r3, r7, r3
   22564:	781b      	ldrb	r3, [r3, #0]
   22566:	2210      	movs	r2, #16
   22568:	4013      	ands	r3, r2
   2256a:	d008      	beq.n	2257e <_ac_interrupt_handler+0x8e>
		/* Invoke registered and enabled callback function */
		(module->callback[AC_CALLBACK_WINDOW_0])(module);
   2256c:	68fb      	ldr	r3, [r7, #12]
   2256e:	695b      	ldr	r3, [r3, #20]
   22570:	68fa      	ldr	r2, [r7, #12]
   22572:	0010      	movs	r0, r2
   22574:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->INTFLAG.reg = AC_INTFLAG_WIN0;
   22576:	68fb      	ldr	r3, [r7, #12]
   22578:	681b      	ldr	r3, [r3, #0]
   2257a:	2210      	movs	r2, #16
   2257c:	719a      	strb	r2, [r3, #6]
		/* Clear interrupt flag */
		module->hw->INTFLAG.reg = AC_INTFLAG_WIN1;
	}
#  endif
#endif /* (AC_NUM_CMP > 2) */
}
   2257e:	46c0      	nop			; (mov r8, r8)
   22580:	46bd      	mov	sp, r7
   22582:	b004      	add	sp, #16
   22584:	bd80      	pop	{r7, pc}
   22586:	46c0      	nop			; (mov r8, r8)
   22588:	20000984 	.word	0x20000984

0002258c <delay_init>:
 * \brief Initialize the delay driver.
 *
 * Not used in cycle mode.
 */
void delay_init(void)
{
   2258c:	b580      	push	{r7, lr}
   2258e:	af00      	add	r7, sp, #0
}
   22590:	46c0      	nop			; (mov r8, r8)
   22592:	46bd      	mov	sp, r7
   22594:	bd80      	pop	{r7, pc}
	...

00022598 <nvm_is_ready>:
 * \retval true   If the hardware module is ready for a new command
 * \retval false  If the hardware module is busy executing a command
 *
 */
static inline bool nvm_is_ready(void)
{
   22598:	b580      	push	{r7, lr}
   2259a:	b082      	sub	sp, #8
   2259c:	af00      	add	r7, sp, #0
	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
   2259e:	4b07      	ldr	r3, [pc, #28]	; (225bc <nvm_is_ready+0x24>)
   225a0:	607b      	str	r3, [r7, #4]

	return nvm_module->INTFLAG.reg & NVMCTRL_INTFLAG_READY;
   225a2:	687b      	ldr	r3, [r7, #4]
   225a4:	7d1b      	ldrb	r3, [r3, #20]
   225a6:	b2db      	uxtb	r3, r3
   225a8:	001a      	movs	r2, r3
   225aa:	2301      	movs	r3, #1
   225ac:	4013      	ands	r3, r2
   225ae:	1e5a      	subs	r2, r3, #1
   225b0:	4193      	sbcs	r3, r2
   225b2:	b2db      	uxtb	r3, r3
}
   225b4:	0018      	movs	r0, r3
   225b6:	46bd      	mov	sp, r7
   225b8:	b002      	add	sp, #8
   225ba:	bd80      	pop	{r7, pc}
   225bc:	41004000 	.word	0x41004000

000225c0 <system_apb_clock_set_mask>:
{
   225c0:	b580      	push	{r7, lr}
   225c2:	b082      	sub	sp, #8
   225c4:	af00      	add	r7, sp, #0
   225c6:	0002      	movs	r2, r0
   225c8:	6039      	str	r1, [r7, #0]
   225ca:	1dfb      	adds	r3, r7, #7
   225cc:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   225ce:	1dfb      	adds	r3, r7, #7
   225d0:	781b      	ldrb	r3, [r3, #0]
   225d2:	2b01      	cmp	r3, #1
   225d4:	d00a      	beq.n	225ec <system_apb_clock_set_mask+0x2c>
   225d6:	2b02      	cmp	r3, #2
   225d8:	d00f      	beq.n	225fa <system_apb_clock_set_mask+0x3a>
   225da:	2b00      	cmp	r3, #0
   225dc:	d114      	bne.n	22608 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   225de:	4b0e      	ldr	r3, [pc, #56]	; (22618 <system_apb_clock_set_mask+0x58>)
   225e0:	4a0d      	ldr	r2, [pc, #52]	; (22618 <system_apb_clock_set_mask+0x58>)
   225e2:	6991      	ldr	r1, [r2, #24]
   225e4:	683a      	ldr	r2, [r7, #0]
   225e6:	430a      	orrs	r2, r1
   225e8:	619a      	str	r2, [r3, #24]
			break;
   225ea:	e00f      	b.n	2260c <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   225ec:	4b0a      	ldr	r3, [pc, #40]	; (22618 <system_apb_clock_set_mask+0x58>)
   225ee:	4a0a      	ldr	r2, [pc, #40]	; (22618 <system_apb_clock_set_mask+0x58>)
   225f0:	69d1      	ldr	r1, [r2, #28]
   225f2:	683a      	ldr	r2, [r7, #0]
   225f4:	430a      	orrs	r2, r1
   225f6:	61da      	str	r2, [r3, #28]
			break;
   225f8:	e008      	b.n	2260c <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   225fa:	4b07      	ldr	r3, [pc, #28]	; (22618 <system_apb_clock_set_mask+0x58>)
   225fc:	4a06      	ldr	r2, [pc, #24]	; (22618 <system_apb_clock_set_mask+0x58>)
   225fe:	6a11      	ldr	r1, [r2, #32]
   22600:	683a      	ldr	r2, [r7, #0]
   22602:	430a      	orrs	r2, r1
   22604:	621a      	str	r2, [r3, #32]
			break;
   22606:	e001      	b.n	2260c <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   22608:	2317      	movs	r3, #23
   2260a:	e000      	b.n	2260e <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   2260c:	2300      	movs	r3, #0
}
   2260e:	0018      	movs	r0, r3
   22610:	46bd      	mov	sp, r7
   22612:	b002      	add	sp, #8
   22614:	bd80      	pop	{r7, pc}
   22616:	46c0      	nop			; (mov r8, r8)
   22618:	40000400 	.word	0x40000400

0002261c <nvm_set_config>:
 *                        EEPROM and/or auxiliary space configuration from being
 *                        altered
 */
enum status_code nvm_set_config(
		const struct nvm_config *const config)
{
   2261c:	b580      	push	{r7, lr}
   2261e:	b084      	sub	sp, #16
   22620:	af00      	add	r7, sp, #0
   22622:	6078      	str	r0, [r7, #4]
	/* Sanity check argument */
	Assert(config);

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
   22624:	4b2f      	ldr	r3, [pc, #188]	; (226e4 <nvm_set_config+0xc8>)
   22626:	60fb      	str	r3, [r7, #12]
#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30) || (SAMR34) || (SAMR35)
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, MCLK_APBBMASK_NVMCTRL);
#else
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, PM_APBBMASK_NVMCTRL);
   22628:	2104      	movs	r1, #4
   2262a:	2001      	movs	r0, #1
   2262c:	4b2e      	ldr	r3, [pc, #184]	; (226e8 <nvm_set_config+0xcc>)
   2262e:	4798      	blx	r3
#endif

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
   22630:	68fb      	ldr	r3, [r7, #12]
   22632:	2220      	movs	r2, #32
   22634:	32ff      	adds	r2, #255	; 0xff
   22636:	831a      	strh	r2, [r3, #24]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
   22638:	4b2c      	ldr	r3, [pc, #176]	; (226ec <nvm_set_config+0xd0>)
   2263a:	4798      	blx	r3
   2263c:	0003      	movs	r3, r0
   2263e:	001a      	movs	r2, r3
   22640:	2301      	movs	r3, #1
   22642:	4053      	eors	r3, r2
   22644:	b2db      	uxtb	r3, r3
   22646:	2b00      	cmp	r3, #0
   22648:	d001      	beq.n	2264e <nvm_set_config+0x32>
		return STATUS_BUSY;
   2264a:	2305      	movs	r3, #5
   2264c:	e045      	b.n	226da <nvm_set_config+0xbe>
	}

#if (!SAMC20) && (!SAMC21)
	/* Writing configuration to the CTRLB register */
	nvm_module->CTRLB.reg =
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
   2264e:	687b      	ldr	r3, [r7, #4]
   22650:	781b      	ldrb	r3, [r3, #0]
   22652:	021b      	lsls	r3, r3, #8
   22654:	001a      	movs	r2, r3
   22656:	23c0      	movs	r3, #192	; 0xc0
   22658:	009b      	lsls	r3, r3, #2
   2265a:	401a      	ands	r2, r3
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
   2265c:	687b      	ldr	r3, [r7, #4]
   2265e:	785b      	ldrb	r3, [r3, #1]
   22660:	01db      	lsls	r3, r3, #7
   22662:	0019      	movs	r1, r3
   22664:	23ff      	movs	r3, #255	; 0xff
   22666:	400b      	ands	r3, r1
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
   22668:	431a      	orrs	r2, r3
			NVMCTRL_CTRLB_RWS(config->wait_states) |
   2266a:	687b      	ldr	r3, [r7, #4]
   2266c:	789b      	ldrb	r3, [r3, #2]
   2266e:	005b      	lsls	r3, r3, #1
   22670:	0019      	movs	r1, r3
   22672:	231e      	movs	r3, #30
   22674:	400b      	ands	r3, r1
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
   22676:	431a      	orrs	r2, r3
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
   22678:	687b      	ldr	r3, [r7, #4]
   2267a:	78db      	ldrb	r3, [r3, #3]
   2267c:	049b      	lsls	r3, r3, #18
   2267e:	0019      	movs	r1, r3
   22680:	2380      	movs	r3, #128	; 0x80
   22682:	02db      	lsls	r3, r3, #11
   22684:	400b      	ands	r3, r1
			NVMCTRL_CTRLB_RWS(config->wait_states) |
   22686:	431a      	orrs	r2, r3
			NVMCTRL_CTRLB_READMODE(config->cache_readmode);
   22688:	687b      	ldr	r3, [r7, #4]
   2268a:	791b      	ldrb	r3, [r3, #4]
   2268c:	041b      	lsls	r3, r3, #16
   2268e:	0019      	movs	r1, r3
   22690:	23c0      	movs	r3, #192	; 0xc0
   22692:	029b      	lsls	r3, r3, #10
   22694:	400b      	ands	r3, r1
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
   22696:	431a      	orrs	r2, r3
	nvm_module->CTRLB.reg =
   22698:	68fb      	ldr	r3, [r7, #12]
   2269a:	605a      	str	r2, [r3, #4]
			(cache_disable_value << NVMCTRL_CTRLB_CACHEDIS_Pos) |
			NVMCTRL_CTRLB_READMODE(config->cache_readmode);
#endif

	/* Initialize the internal device struct */
	_nvm_dev.page_size         = (8 << nvm_module->PARAM.bit.PSZ);
   2269c:	68fb      	ldr	r3, [r7, #12]
   2269e:	689b      	ldr	r3, [r3, #8]
   226a0:	035b      	lsls	r3, r3, #13
   226a2:	0f5b      	lsrs	r3, r3, #29
   226a4:	b2db      	uxtb	r3, r3
   226a6:	001a      	movs	r2, r3
   226a8:	2308      	movs	r3, #8
   226aa:	4093      	lsls	r3, r2
   226ac:	b29a      	uxth	r2, r3
   226ae:	4b10      	ldr	r3, [pc, #64]	; (226f0 <nvm_set_config+0xd4>)
   226b0:	801a      	strh	r2, [r3, #0]
	_nvm_dev.number_of_pages   = nvm_module->PARAM.bit.NVMP;
   226b2:	68fb      	ldr	r3, [r7, #12]
   226b4:	689b      	ldr	r3, [r3, #8]
   226b6:	b29a      	uxth	r2, r3
   226b8:	4b0d      	ldr	r3, [pc, #52]	; (226f0 <nvm_set_config+0xd4>)
   226ba:	805a      	strh	r2, [r3, #2]
	_nvm_dev.manual_page_write = config->manual_page_write;
   226bc:	687b      	ldr	r3, [r7, #4]
   226be:	785a      	ldrb	r2, [r3, #1]
   226c0:	4b0b      	ldr	r3, [pc, #44]	; (226f0 <nvm_set_config+0xd4>)
   226c2:	711a      	strb	r2, [r3, #4]

	/* If the security bit is set, the auxiliary space cannot be written */
	if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
   226c4:	68fb      	ldr	r3, [r7, #12]
   226c6:	8b1b      	ldrh	r3, [r3, #24]
   226c8:	b29b      	uxth	r3, r3
   226ca:	001a      	movs	r2, r3
   226cc:	2380      	movs	r3, #128	; 0x80
   226ce:	005b      	lsls	r3, r3, #1
   226d0:	4013      	ands	r3, r2
   226d2:	d001      	beq.n	226d8 <nvm_set_config+0xbc>
		return STATUS_ERR_IO;
   226d4:	2310      	movs	r3, #16
   226d6:	e000      	b.n	226da <nvm_set_config+0xbe>
	}

	return STATUS_OK;
   226d8:	2300      	movs	r3, #0
}
   226da:	0018      	movs	r0, r3
   226dc:	46bd      	mov	sp, r7
   226de:	b004      	add	sp, #16
   226e0:	bd80      	pop	{r7, pc}
   226e2:	46c0      	nop			; (mov r8, r8)
   226e4:	41004000 	.word	0x41004000
   226e8:	000225c1 	.word	0x000225c1
   226ec:	00022599 	.word	0x00022599
   226f0:	20000414 	.word	0x20000414

000226f4 <nvm_execute_command>:
 */
enum status_code nvm_execute_command(
		const enum nvm_command command,
		const uint32_t address,
		const uint32_t parameter)
{
   226f4:	b580      	push	{r7, lr}
   226f6:	b086      	sub	sp, #24
   226f8:	af00      	add	r7, sp, #0
   226fa:	60b9      	str	r1, [r7, #8]
   226fc:	607a      	str	r2, [r7, #4]
   226fe:	230f      	movs	r3, #15
   22700:	18fb      	adds	r3, r7, r3
   22702:	1c02      	adds	r2, r0, #0
   22704:	701a      	strb	r2, [r3, #0]
	uint32_t ctrlb_bak;

	/* Check that the address given is valid  */
	if (address > ((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)
   22706:	4b3a      	ldr	r3, [pc, #232]	; (227f0 <nvm_execute_command+0xfc>)
   22708:	881b      	ldrh	r3, [r3, #0]
   2270a:	001a      	movs	r2, r3
   2270c:	4b38      	ldr	r3, [pc, #224]	; (227f0 <nvm_execute_command+0xfc>)
   2270e:	885b      	ldrh	r3, [r3, #2]
   22710:	435a      	muls	r2, r3
   22712:	68bb      	ldr	r3, [r7, #8]
   22714:	429a      	cmp	r2, r3
   22716:	d209      	bcs.n	2272c <nvm_execute_command+0x38>
		&& !(address >= NVMCTRL_AUX0_ADDRESS && address <= NVMCTRL_AUX1_ADDRESS )){
   22718:	68bb      	ldr	r3, [r7, #8]
   2271a:	4a36      	ldr	r2, [pc, #216]	; (227f4 <nvm_execute_command+0x100>)
   2271c:	4293      	cmp	r3, r2
   2271e:	d903      	bls.n	22728 <nvm_execute_command+0x34>
   22720:	68bb      	ldr	r3, [r7, #8]
   22722:	4a35      	ldr	r2, [pc, #212]	; (227f8 <nvm_execute_command+0x104>)
   22724:	4293      	cmp	r3, r2
   22726:	d901      	bls.n	2272c <nvm_execute_command+0x38>
		if (address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
			|| address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
#else
		return STATUS_ERR_BAD_ADDRESS;
   22728:	2318      	movs	r3, #24
   2272a:	e05c      	b.n	227e6 <nvm_execute_command+0xf2>
#endif
	}

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
   2272c:	4b33      	ldr	r3, [pc, #204]	; (227fc <nvm_execute_command+0x108>)
   2272e:	617b      	str	r3, [r7, #20]

	/* Turn off cache before issuing flash commands */
	ctrlb_bak = nvm_module->CTRLB.reg;
   22730:	697b      	ldr	r3, [r7, #20]
   22732:	685b      	ldr	r3, [r3, #4]
   22734:	613b      	str	r3, [r7, #16]
#if (SAMC20) || (SAMC21)
	nvm_module->CTRLB.reg = ((ctrlb_bak &(~(NVMCTRL_CTRLB_CACHEDIS(0x2))))
							| NVMCTRL_CTRLB_CACHEDIS(0x1));
#else
	nvm_module->CTRLB.reg = ctrlb_bak | NVMCTRL_CTRLB_CACHEDIS;
   22736:	693b      	ldr	r3, [r7, #16]
   22738:	2280      	movs	r2, #128	; 0x80
   2273a:	02d2      	lsls	r2, r2, #11
   2273c:	431a      	orrs	r2, r3
   2273e:	697b      	ldr	r3, [r7, #20]
   22740:	605a      	str	r2, [r3, #4]
#endif

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
   22742:	697b      	ldr	r3, [r7, #20]
   22744:	2220      	movs	r2, #32
   22746:	32ff      	adds	r2, #255	; 0xff
   22748:	831a      	strh	r2, [r3, #24]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
   2274a:	4b2d      	ldr	r3, [pc, #180]	; (22800 <nvm_execute_command+0x10c>)
   2274c:	4798      	blx	r3
   2274e:	0003      	movs	r3, r0
   22750:	001a      	movs	r2, r3
   22752:	2301      	movs	r3, #1
   22754:	4053      	eors	r3, r2
   22756:	b2db      	uxtb	r3, r3
   22758:	2b00      	cmp	r3, #0
   2275a:	d004      	beq.n	22766 <nvm_execute_command+0x72>
		/* Restore the setting */
		nvm_module->CTRLB.reg = ctrlb_bak;
   2275c:	697b      	ldr	r3, [r7, #20]
   2275e:	693a      	ldr	r2, [r7, #16]
   22760:	605a      	str	r2, [r3, #4]
		return STATUS_BUSY;
   22762:	2305      	movs	r3, #5
   22764:	e03f      	b.n	227e6 <nvm_execute_command+0xf2>
	}

	switch (command) {
   22766:	230f      	movs	r3, #15
   22768:	18fb      	adds	r3, r7, r3
   2276a:	781b      	ldrb	r3, [r3, #0]
   2276c:	2b45      	cmp	r3, #69	; 0x45
   2276e:	d81d      	bhi.n	227ac <nvm_execute_command+0xb8>
   22770:	009a      	lsls	r2, r3, #2
   22772:	4b24      	ldr	r3, [pc, #144]	; (22804 <nvm_execute_command+0x110>)
   22774:	18d3      	adds	r3, r2, r3
   22776:	681b      	ldr	r3, [r3, #0]
   22778:	469f      	mov	pc, r3
		/* Commands requiring address (protected) */
		case NVM_COMMAND_ERASE_AUX_ROW:
		case NVM_COMMAND_WRITE_AUX_ROW:

			/* Auxiliary space cannot be accessed if the security bit is set */
			if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
   2277a:	697b      	ldr	r3, [r7, #20]
   2277c:	8b1b      	ldrh	r3, [r3, #24]
   2277e:	b29b      	uxth	r3, r3
   22780:	001a      	movs	r2, r3
   22782:	2380      	movs	r3, #128	; 0x80
   22784:	005b      	lsls	r3, r3, #1
   22786:	4013      	ands	r3, r2
   22788:	d004      	beq.n	22794 <nvm_execute_command+0xa0>
				/* Restore the setting */
				nvm_module->CTRLB.reg = ctrlb_bak;
   2278a:	697b      	ldr	r3, [r7, #20]
   2278c:	693a      	ldr	r2, [r7, #16]
   2278e:	605a      	str	r2, [r3, #4]
				return STATUS_ERR_IO;
   22790:	2310      	movs	r3, #16
   22792:	e028      	b.n	227e6 <nvm_execute_command+0xf2>
			}

			/* Set address, command will be issued elsewhere */
			nvm_module->ADDR.reg = (uintptr_t)&NVM_MEMORY[address / 4];
   22794:	68bb      	ldr	r3, [r7, #8]
   22796:	089b      	lsrs	r3, r3, #2
   22798:	005a      	lsls	r2, r3, #1
   2279a:	697b      	ldr	r3, [r7, #20]
   2279c:	61da      	str	r2, [r3, #28]
			break;
   2279e:	e00b      	b.n	227b8 <nvm_execute_command+0xc4>
		case NVM_COMMAND_RWWEE_ERASE_ROW:
		case NVM_COMMAND_RWWEE_WRITE_PAGE:
#endif

			/* Set address, command will be issued elsewhere */
			nvm_module->ADDR.reg = (uintptr_t)&NVM_MEMORY[address / 4];
   227a0:	68bb      	ldr	r3, [r7, #8]
   227a2:	089b      	lsrs	r3, r3, #2
   227a4:	005a      	lsls	r2, r3, #1
   227a6:	697b      	ldr	r3, [r7, #20]
   227a8:	61da      	str	r2, [r3, #28]
			break;
   227aa:	e005      	b.n	227b8 <nvm_execute_command+0xc4>
		case NVM_COMMAND_EXIT_LOW_POWER_MODE:
			break;

		default:
			/* Restore the setting */
			nvm_module->CTRLB.reg = ctrlb_bak;
   227ac:	697b      	ldr	r3, [r7, #20]
   227ae:	693a      	ldr	r2, [r7, #16]
   227b0:	605a      	str	r2, [r3, #4]
			return STATUS_ERR_INVALID_ARG;
   227b2:	2317      	movs	r3, #23
   227b4:	e017      	b.n	227e6 <nvm_execute_command+0xf2>
			break;
   227b6:	46c0      	nop			; (mov r8, r8)
	}

	/* Set command */
	nvm_module->CTRLA.reg = command | NVMCTRL_CTRLA_CMDEX_KEY;
   227b8:	230f      	movs	r3, #15
   227ba:	18fb      	adds	r3, r7, r3
   227bc:	781b      	ldrb	r3, [r3, #0]
   227be:	b29b      	uxth	r3, r3
   227c0:	4a11      	ldr	r2, [pc, #68]	; (22808 <nvm_execute_command+0x114>)
   227c2:	4313      	orrs	r3, r2
   227c4:	b29a      	uxth	r2, r3
   227c6:	697b      	ldr	r3, [r7, #20]
   227c8:	801a      	strh	r2, [r3, #0]

	/* Wait for the NVM controller to become ready */
	while (!nvm_is_ready()) {
   227ca:	46c0      	nop			; (mov r8, r8)
   227cc:	4b0c      	ldr	r3, [pc, #48]	; (22800 <nvm_execute_command+0x10c>)
   227ce:	4798      	blx	r3
   227d0:	0003      	movs	r3, r0
   227d2:	001a      	movs	r2, r3
   227d4:	2301      	movs	r3, #1
   227d6:	4053      	eors	r3, r2
   227d8:	b2db      	uxtb	r3, r3
   227da:	2b00      	cmp	r3, #0
   227dc:	d1f6      	bne.n	227cc <nvm_execute_command+0xd8>
	}

	/* Restore the setting */
	nvm_module->CTRLB.reg = ctrlb_bak;
   227de:	697b      	ldr	r3, [r7, #20]
   227e0:	693a      	ldr	r2, [r7, #16]
   227e2:	605a      	str	r2, [r3, #4]

	return STATUS_OK;
   227e4:	2300      	movs	r3, #0
}
   227e6:	0018      	movs	r0, r3
   227e8:	46bd      	mov	sp, r7
   227ea:	b006      	add	sp, #24
   227ec:	bd80      	pop	{r7, pc}
   227ee:	46c0      	nop			; (mov r8, r8)
   227f0:	20000414 	.word	0x20000414
   227f4:	00803fff 	.word	0x00803fff
   227f8:	00806000 	.word	0x00806000
   227fc:	41004000 	.word	0x41004000
   22800:	00022599 	.word	0x00022599
   22804:	0002a790 	.word	0x0002a790
   22808:	ffffa500 	.word	0xffffa500

0002280c <nvm_write_buffer>:
 */
enum status_code nvm_write_buffer(
		const uint32_t destination_address,
		const uint8_t *buffer,
		uint16_t length)
{
   2280c:	b580      	push	{r7, lr}
   2280e:	b088      	sub	sp, #32
   22810:	af00      	add	r7, sp, #0
   22812:	60f8      	str	r0, [r7, #12]
   22814:	60b9      	str	r1, [r7, #8]
   22816:	1dbb      	adds	r3, r7, #6
   22818:	801a      	strh	r2, [r3, #0]
	bool is_rww_eeprom = false;
#endif

	/* Check if the destination address is valid */
	if (destination_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
   2281a:	4b4a      	ldr	r3, [pc, #296]	; (22944 <nvm_write_buffer+0x138>)
   2281c:	881b      	ldrh	r3, [r3, #0]
   2281e:	001a      	movs	r2, r3
   22820:	4b48      	ldr	r3, [pc, #288]	; (22944 <nvm_write_buffer+0x138>)
   22822:	885b      	ldrh	r3, [r3, #2]
   22824:	435a      	muls	r2, r3
	if (destination_address >
   22826:	68fb      	ldr	r3, [r7, #12]
   22828:	429a      	cmp	r2, r3
   2282a:	d201      	bcs.n	22830 <nvm_write_buffer+0x24>
			|| destination_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
		is_rww_eeprom = true;
#else
		return STATUS_ERR_BAD_ADDRESS;
   2282c:	2318      	movs	r3, #24
   2282e:	e084      	b.n	2293a <nvm_write_buffer+0x12e>
#endif
	}

	/* Check if the write address not aligned to the start of a page */
	if (destination_address & (_nvm_dev.page_size - 1)) {
   22830:	4b44      	ldr	r3, [pc, #272]	; (22944 <nvm_write_buffer+0x138>)
   22832:	881b      	ldrh	r3, [r3, #0]
   22834:	3b01      	subs	r3, #1
   22836:	001a      	movs	r2, r3
   22838:	68fb      	ldr	r3, [r7, #12]
   2283a:	4013      	ands	r3, r2
   2283c:	d001      	beq.n	22842 <nvm_write_buffer+0x36>
		return STATUS_ERR_BAD_ADDRESS;
   2283e:	2318      	movs	r3, #24
   22840:	e07b      	b.n	2293a <nvm_write_buffer+0x12e>
	}

	/* Check if the write length is longer than an NVM page */
	if (length > _nvm_dev.page_size) {
   22842:	4b40      	ldr	r3, [pc, #256]	; (22944 <nvm_write_buffer+0x138>)
   22844:	881b      	ldrh	r3, [r3, #0]
   22846:	1dba      	adds	r2, r7, #6
   22848:	8812      	ldrh	r2, [r2, #0]
   2284a:	429a      	cmp	r2, r3
   2284c:	d901      	bls.n	22852 <nvm_write_buffer+0x46>
		return STATUS_ERR_INVALID_ARG;
   2284e:	2317      	movs	r3, #23
   22850:	e073      	b.n	2293a <nvm_write_buffer+0x12e>
	}

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
   22852:	4b3d      	ldr	r3, [pc, #244]	; (22948 <nvm_write_buffer+0x13c>)
   22854:	617b      	str	r3, [r7, #20]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
   22856:	4b3d      	ldr	r3, [pc, #244]	; (2294c <nvm_write_buffer+0x140>)
   22858:	4798      	blx	r3
   2285a:	0003      	movs	r3, r0
   2285c:	001a      	movs	r2, r3
   2285e:	2301      	movs	r3, #1
   22860:	4053      	eors	r3, r2
   22862:	b2db      	uxtb	r3, r3
   22864:	2b00      	cmp	r3, #0
   22866:	d001      	beq.n	2286c <nvm_write_buffer+0x60>
		return STATUS_BUSY;
   22868:	2305      	movs	r3, #5
   2286a:	e066      	b.n	2293a <nvm_write_buffer+0x12e>
	}

	/* Erase the page buffer before buffering new data */
	nvm_module->CTRLA.reg = NVM_COMMAND_PAGE_BUFFER_CLEAR | NVMCTRL_CTRLA_CMDEX_KEY;
   2286c:	697b      	ldr	r3, [r7, #20]
   2286e:	4a38      	ldr	r2, [pc, #224]	; (22950 <nvm_write_buffer+0x144>)
   22870:	801a      	strh	r2, [r3, #0]

	/* Check if the module is busy */
	while (!nvm_is_ready()) {
   22872:	46c0      	nop			; (mov r8, r8)
   22874:	4b35      	ldr	r3, [pc, #212]	; (2294c <nvm_write_buffer+0x140>)
   22876:	4798      	blx	r3
   22878:	0003      	movs	r3, r0
   2287a:	001a      	movs	r2, r3
   2287c:	2301      	movs	r3, #1
   2287e:	4053      	eors	r3, r2
   22880:	b2db      	uxtb	r3, r3
   22882:	2b00      	cmp	r3, #0
   22884:	d1f6      	bne.n	22874 <nvm_write_buffer+0x68>
		/* Force-wait for the buffer clear to complete */
	}

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
   22886:	697b      	ldr	r3, [r7, #20]
   22888:	2220      	movs	r2, #32
   2288a:	32ff      	adds	r2, #255	; 0xff
   2288c:	831a      	strh	r2, [r3, #24]

	uint32_t nvm_address = destination_address / 2;
   2288e:	68fb      	ldr	r3, [r7, #12]
   22890:	085b      	lsrs	r3, r3, #1
   22892:	61fb      	str	r3, [r7, #28]

	/* NVM _must_ be accessed as a series of 16-bit words, perform manual copy
	 * to ensure alignment */
	for (uint16_t i = 0; i < length; i += 2) {
   22894:	231a      	movs	r3, #26
   22896:	18fb      	adds	r3, r7, r3
   22898:	2200      	movs	r2, #0
   2289a:	801a      	strh	r2, [r3, #0]
   2289c:	e032      	b.n	22904 <nvm_write_buffer+0xf8>
		uint16_t data;

		/* Copy first byte of the 16-bit chunk to the temporary buffer */
		data = buffer[i];
   2289e:	231a      	movs	r3, #26
   228a0:	18fb      	adds	r3, r7, r3
   228a2:	881b      	ldrh	r3, [r3, #0]
   228a4:	68ba      	ldr	r2, [r7, #8]
   228a6:	18d3      	adds	r3, r2, r3
   228a8:	781a      	ldrb	r2, [r3, #0]
   228aa:	2318      	movs	r3, #24
   228ac:	18fb      	adds	r3, r7, r3
   228ae:	801a      	strh	r2, [r3, #0]

		/* If we are not at the end of a write request with an odd byte count,
		 * store the next byte of data as well */
		if (i < (length - 1)) {
   228b0:	231a      	movs	r3, #26
   228b2:	18fb      	adds	r3, r7, r3
   228b4:	881a      	ldrh	r2, [r3, #0]
   228b6:	1dbb      	adds	r3, r7, #6
   228b8:	881b      	ldrh	r3, [r3, #0]
   228ba:	3b01      	subs	r3, #1
   228bc:	429a      	cmp	r2, r3
   228be:	da11      	bge.n	228e4 <nvm_write_buffer+0xd8>
			data |= (buffer[i + 1] << 8);
   228c0:	231a      	movs	r3, #26
   228c2:	18fb      	adds	r3, r7, r3
   228c4:	881b      	ldrh	r3, [r3, #0]
   228c6:	3301      	adds	r3, #1
   228c8:	68ba      	ldr	r2, [r7, #8]
   228ca:	18d3      	adds	r3, r2, r3
   228cc:	781b      	ldrb	r3, [r3, #0]
   228ce:	021b      	lsls	r3, r3, #8
   228d0:	b21a      	sxth	r2, r3
   228d2:	2318      	movs	r3, #24
   228d4:	18fb      	adds	r3, r7, r3
   228d6:	2100      	movs	r1, #0
   228d8:	5e5b      	ldrsh	r3, [r3, r1]
   228da:	4313      	orrs	r3, r2
   228dc:	b21a      	sxth	r2, r3
   228de:	2318      	movs	r3, #24
   228e0:	18fb      	adds	r3, r7, r3
   228e2:	801a      	strh	r2, [r3, #0]
		}

		/* Store next 16-bit chunk to the NVM memory space */
		NVM_MEMORY[nvm_address++] = data;
   228e4:	69fb      	ldr	r3, [r7, #28]
   228e6:	1c5a      	adds	r2, r3, #1
   228e8:	61fa      	str	r2, [r7, #28]
   228ea:	005b      	lsls	r3, r3, #1
   228ec:	001a      	movs	r2, r3
   228ee:	2318      	movs	r3, #24
   228f0:	18fb      	adds	r3, r7, r3
   228f2:	881b      	ldrh	r3, [r3, #0]
   228f4:	8013      	strh	r3, [r2, #0]
	for (uint16_t i = 0; i < length; i += 2) {
   228f6:	231a      	movs	r3, #26
   228f8:	18fb      	adds	r3, r7, r3
   228fa:	221a      	movs	r2, #26
   228fc:	18ba      	adds	r2, r7, r2
   228fe:	8812      	ldrh	r2, [r2, #0]
   22900:	3202      	adds	r2, #2
   22902:	801a      	strh	r2, [r3, #0]
   22904:	231a      	movs	r3, #26
   22906:	18fa      	adds	r2, r7, r3
   22908:	1dbb      	adds	r3, r7, #6
   2290a:	8812      	ldrh	r2, [r2, #0]
   2290c:	881b      	ldrh	r3, [r3, #0]
   2290e:	429a      	cmp	r2, r3
   22910:	d3c5      	bcc.n	2289e <nvm_write_buffer+0x92>
	}

	/* If automatic page write mode is enable, then perform a manual NVM
	 * write when the length of data to be programmed is less than page size
	 */
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
   22912:	4b0c      	ldr	r3, [pc, #48]	; (22944 <nvm_write_buffer+0x138>)
   22914:	791b      	ldrb	r3, [r3, #4]
   22916:	2201      	movs	r2, #1
   22918:	4053      	eors	r3, r2
   2291a:	b2db      	uxtb	r3, r3
   2291c:	2b00      	cmp	r3, #0
   2291e:	d00b      	beq.n	22938 <nvm_write_buffer+0x12c>
   22920:	1dbb      	adds	r3, r7, #6
   22922:	881b      	ldrh	r3, [r3, #0]
   22924:	2b3f      	cmp	r3, #63	; 0x3f
   22926:	d807      	bhi.n	22938 <nvm_write_buffer+0x12c>
#ifdef FEATURE_NVM_RWWEE
	 return ((is_rww_eeprom) ?
				(nvm_execute_command(NVM_COMMAND_RWWEE_WRITE_PAGE,destination_address, 0)):
	 			(nvm_execute_command(NVM_COMMAND_WRITE_PAGE,destination_address, 0)));
#else
		return nvm_execute_command(NVM_COMMAND_WRITE_PAGE,
   22928:	68fb      	ldr	r3, [r7, #12]
   2292a:	2200      	movs	r2, #0
   2292c:	0019      	movs	r1, r3
   2292e:	2004      	movs	r0, #4
   22930:	4b08      	ldr	r3, [pc, #32]	; (22954 <nvm_write_buffer+0x148>)
   22932:	4798      	blx	r3
   22934:	0003      	movs	r3, r0
   22936:	e000      	b.n	2293a <nvm_write_buffer+0x12e>
				destination_address, 0);
#endif
	}

	return STATUS_OK;
   22938:	2300      	movs	r3, #0
}
   2293a:	0018      	movs	r0, r3
   2293c:	46bd      	mov	sp, r7
   2293e:	b008      	add	sp, #32
   22940:	bd80      	pop	{r7, pc}
   22942:	46c0      	nop			; (mov r8, r8)
   22944:	20000414 	.word	0x20000414
   22948:	41004000 	.word	0x41004000
   2294c:	00022599 	.word	0x00022599
   22950:	ffffa544 	.word	0xffffa544
   22954:	000226f5 	.word	0x000226f5

00022958 <nvm_read_buffer>:
 */
enum status_code nvm_read_buffer(
		const uint32_t source_address,
		uint8_t *const buffer,
		uint16_t length)
{
   22958:	b580      	push	{r7, lr}
   2295a:	b088      	sub	sp, #32
   2295c:	af00      	add	r7, sp, #0
   2295e:	60f8      	str	r0, [r7, #12]
   22960:	60b9      	str	r1, [r7, #8]
   22962:	1dbb      	adds	r3, r7, #6
   22964:	801a      	strh	r2, [r3, #0]
	/* Check if the source address is valid */
	if (source_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
   22966:	4b38      	ldr	r3, [pc, #224]	; (22a48 <nvm_read_buffer+0xf0>)
   22968:	881b      	ldrh	r3, [r3, #0]
   2296a:	001a      	movs	r2, r3
   2296c:	4b36      	ldr	r3, [pc, #216]	; (22a48 <nvm_read_buffer+0xf0>)
   2296e:	885b      	ldrh	r3, [r3, #2]
   22970:	435a      	muls	r2, r3
	if (source_address >
   22972:	68fb      	ldr	r3, [r7, #12]
   22974:	429a      	cmp	r2, r3
   22976:	d201      	bcs.n	2297c <nvm_read_buffer+0x24>
		if (source_address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
			|| source_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
#else
		return STATUS_ERR_BAD_ADDRESS;
   22978:	2318      	movs	r3, #24
   2297a:	e060      	b.n	22a3e <nvm_read_buffer+0xe6>
#endif
	}

	/* Check if the read address is not aligned to the start of a page */
	if (source_address & (_nvm_dev.page_size - 1)) {
   2297c:	4b32      	ldr	r3, [pc, #200]	; (22a48 <nvm_read_buffer+0xf0>)
   2297e:	881b      	ldrh	r3, [r3, #0]
   22980:	3b01      	subs	r3, #1
   22982:	001a      	movs	r2, r3
   22984:	68fb      	ldr	r3, [r7, #12]
   22986:	4013      	ands	r3, r2
   22988:	d001      	beq.n	2298e <nvm_read_buffer+0x36>
		return STATUS_ERR_BAD_ADDRESS;
   2298a:	2318      	movs	r3, #24
   2298c:	e057      	b.n	22a3e <nvm_read_buffer+0xe6>
	}

	/* Check if the write length is longer than an NVM page */
	if (length > _nvm_dev.page_size) {
   2298e:	4b2e      	ldr	r3, [pc, #184]	; (22a48 <nvm_read_buffer+0xf0>)
   22990:	881b      	ldrh	r3, [r3, #0]
   22992:	1dba      	adds	r2, r7, #6
   22994:	8812      	ldrh	r2, [r2, #0]
   22996:	429a      	cmp	r2, r3
   22998:	d901      	bls.n	2299e <nvm_read_buffer+0x46>
		return STATUS_ERR_INVALID_ARG;
   2299a:	2317      	movs	r3, #23
   2299c:	e04f      	b.n	22a3e <nvm_read_buffer+0xe6>
	}

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
   2299e:	4b2b      	ldr	r3, [pc, #172]	; (22a4c <nvm_read_buffer+0xf4>)
   229a0:	617b      	str	r3, [r7, #20]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
   229a2:	4b2b      	ldr	r3, [pc, #172]	; (22a50 <nvm_read_buffer+0xf8>)
   229a4:	4798      	blx	r3
   229a6:	0003      	movs	r3, r0
   229a8:	001a      	movs	r2, r3
   229aa:	2301      	movs	r3, #1
   229ac:	4053      	eors	r3, r2
   229ae:	b2db      	uxtb	r3, r3
   229b0:	2b00      	cmp	r3, #0
   229b2:	d001      	beq.n	229b8 <nvm_read_buffer+0x60>
		return STATUS_BUSY;
   229b4:	2305      	movs	r3, #5
   229b6:	e042      	b.n	22a3e <nvm_read_buffer+0xe6>
	}

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
   229b8:	697b      	ldr	r3, [r7, #20]
   229ba:	2220      	movs	r2, #32
   229bc:	32ff      	adds	r2, #255	; 0xff
   229be:	831a      	strh	r2, [r3, #24]

	uint32_t page_address = source_address / 2;
   229c0:	68fb      	ldr	r3, [r7, #12]
   229c2:	085b      	lsrs	r3, r3, #1
   229c4:	61fb      	str	r3, [r7, #28]

	/* NVM _must_ be accessed as a series of 16-bit words, perform manual copy
	 * to ensure alignment */
	for (uint16_t i = 0; i < length; i += 2) {
   229c6:	231a      	movs	r3, #26
   229c8:	18fb      	adds	r3, r7, r3
   229ca:	2200      	movs	r2, #0
   229cc:	801a      	strh	r2, [r3, #0]
   229ce:	e02e      	b.n	22a2e <nvm_read_buffer+0xd6>
		/* Fetch next 16-bit chunk from the NVM memory space */
		uint16_t data = NVM_MEMORY[page_address++];
   229d0:	69fb      	ldr	r3, [r7, #28]
   229d2:	1c5a      	adds	r2, r3, #1
   229d4:	61fa      	str	r2, [r7, #28]
   229d6:	005b      	lsls	r3, r3, #1
   229d8:	001a      	movs	r2, r3
   229da:	2312      	movs	r3, #18
   229dc:	18fb      	adds	r3, r7, r3
   229de:	8812      	ldrh	r2, [r2, #0]
   229e0:	801a      	strh	r2, [r3, #0]

		/* Copy first byte of the 16-bit chunk to the destination buffer */
		buffer[i] = (data & 0xFF);
   229e2:	231a      	movs	r3, #26
   229e4:	18fb      	adds	r3, r7, r3
   229e6:	881b      	ldrh	r3, [r3, #0]
   229e8:	68ba      	ldr	r2, [r7, #8]
   229ea:	18d3      	adds	r3, r2, r3
   229ec:	2212      	movs	r2, #18
   229ee:	18ba      	adds	r2, r7, r2
   229f0:	8812      	ldrh	r2, [r2, #0]
   229f2:	b2d2      	uxtb	r2, r2
   229f4:	701a      	strb	r2, [r3, #0]

		/* If we are not at the end of a read request with an odd byte count,
		 * store the next byte of data as well */
		if (i < (length - 1)) {
   229f6:	231a      	movs	r3, #26
   229f8:	18fb      	adds	r3, r7, r3
   229fa:	881a      	ldrh	r2, [r3, #0]
   229fc:	1dbb      	adds	r3, r7, #6
   229fe:	881b      	ldrh	r3, [r3, #0]
   22a00:	3b01      	subs	r3, #1
   22a02:	429a      	cmp	r2, r3
   22a04:	da0c      	bge.n	22a20 <nvm_read_buffer+0xc8>
			buffer[i + 1] = (data >> 8);
   22a06:	231a      	movs	r3, #26
   22a08:	18fb      	adds	r3, r7, r3
   22a0a:	881b      	ldrh	r3, [r3, #0]
   22a0c:	3301      	adds	r3, #1
   22a0e:	68ba      	ldr	r2, [r7, #8]
   22a10:	18d3      	adds	r3, r2, r3
   22a12:	2212      	movs	r2, #18
   22a14:	18ba      	adds	r2, r7, r2
   22a16:	8812      	ldrh	r2, [r2, #0]
   22a18:	0a12      	lsrs	r2, r2, #8
   22a1a:	b292      	uxth	r2, r2
   22a1c:	b2d2      	uxtb	r2, r2
   22a1e:	701a      	strb	r2, [r3, #0]
	for (uint16_t i = 0; i < length; i += 2) {
   22a20:	231a      	movs	r3, #26
   22a22:	18fb      	adds	r3, r7, r3
   22a24:	221a      	movs	r2, #26
   22a26:	18ba      	adds	r2, r7, r2
   22a28:	8812      	ldrh	r2, [r2, #0]
   22a2a:	3202      	adds	r2, #2
   22a2c:	801a      	strh	r2, [r3, #0]
   22a2e:	231a      	movs	r3, #26
   22a30:	18fa      	adds	r2, r7, r3
   22a32:	1dbb      	adds	r3, r7, #6
   22a34:	8812      	ldrh	r2, [r2, #0]
   22a36:	881b      	ldrh	r3, [r3, #0]
   22a38:	429a      	cmp	r2, r3
   22a3a:	d3c9      	bcc.n	229d0 <nvm_read_buffer+0x78>
		}
	}

	return STATUS_OK;
   22a3c:	2300      	movs	r3, #0
}
   22a3e:	0018      	movs	r0, r3
   22a40:	46bd      	mov	sp, r7
   22a42:	b008      	add	sp, #32
   22a44:	bd80      	pop	{r7, pc}
   22a46:	46c0      	nop			; (mov r8, r8)
   22a48:	20000414 	.word	0x20000414
   22a4c:	41004000 	.word	0x41004000
   22a50:	00022599 	.word	0x00022599

00022a54 <nvm_erase_row>:
 *                                 not aligned to the start of a row
 * \retval STATUS_ABORTED          NVM erased error
 */
enum status_code nvm_erase_row(
		const uint32_t row_address)
{
   22a54:	b580      	push	{r7, lr}
   22a56:	b084      	sub	sp, #16
   22a58:	af00      	add	r7, sp, #0
   22a5a:	6078      	str	r0, [r7, #4]
		bool is_rww_eeprom = false;
#endif

	/* Check if the row address is valid */
	if (row_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
   22a5c:	4b23      	ldr	r3, [pc, #140]	; (22aec <nvm_erase_row+0x98>)
   22a5e:	881b      	ldrh	r3, [r3, #0]
   22a60:	001a      	movs	r2, r3
   22a62:	4b22      	ldr	r3, [pc, #136]	; (22aec <nvm_erase_row+0x98>)
   22a64:	885b      	ldrh	r3, [r3, #2]
   22a66:	435a      	muls	r2, r3
	if (row_address >
   22a68:	687b      	ldr	r3, [r7, #4]
   22a6a:	429a      	cmp	r2, r3
   22a6c:	d201      	bcs.n	22a72 <nvm_erase_row+0x1e>
			|| row_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
		is_rww_eeprom = true;
#else
		return STATUS_ERR_BAD_ADDRESS;
   22a6e:	2318      	movs	r3, #24
   22a70:	e037      	b.n	22ae2 <nvm_erase_row+0x8e>
#endif
	}

	/* Check if the address to erase is not aligned to the start of a row */
	if (row_address & ((_nvm_dev.page_size * NVMCTRL_ROW_PAGES) - 1)) {
   22a72:	4b1e      	ldr	r3, [pc, #120]	; (22aec <nvm_erase_row+0x98>)
   22a74:	881b      	ldrh	r3, [r3, #0]
   22a76:	009b      	lsls	r3, r3, #2
   22a78:	3b01      	subs	r3, #1
   22a7a:	001a      	movs	r2, r3
   22a7c:	687b      	ldr	r3, [r7, #4]
   22a7e:	4013      	ands	r3, r2
   22a80:	d001      	beq.n	22a86 <nvm_erase_row+0x32>
		return STATUS_ERR_BAD_ADDRESS;
   22a82:	2318      	movs	r3, #24
   22a84:	e02d      	b.n	22ae2 <nvm_erase_row+0x8e>
	}

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
   22a86:	4b1a      	ldr	r3, [pc, #104]	; (22af0 <nvm_erase_row+0x9c>)
   22a88:	60fb      	str	r3, [r7, #12]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
   22a8a:	4b1a      	ldr	r3, [pc, #104]	; (22af4 <nvm_erase_row+0xa0>)
   22a8c:	4798      	blx	r3
   22a8e:	0003      	movs	r3, r0
   22a90:	001a      	movs	r2, r3
   22a92:	2301      	movs	r3, #1
   22a94:	4053      	eors	r3, r2
   22a96:	b2db      	uxtb	r3, r3
   22a98:	2b00      	cmp	r3, #0
   22a9a:	d001      	beq.n	22aa0 <nvm_erase_row+0x4c>
		return STATUS_BUSY;
   22a9c:	2305      	movs	r3, #5
   22a9e:	e020      	b.n	22ae2 <nvm_erase_row+0x8e>
	}

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
   22aa0:	68fb      	ldr	r3, [r7, #12]
   22aa2:	2220      	movs	r2, #32
   22aa4:	32ff      	adds	r2, #255	; 0xff
   22aa6:	831a      	strh	r2, [r3, #24]

	/* Set address and command */
	nvm_module->ADDR.reg  = (uintptr_t)&NVM_MEMORY[row_address / 4];
   22aa8:	687b      	ldr	r3, [r7, #4]
   22aaa:	089b      	lsrs	r3, r3, #2
   22aac:	005a      	lsls	r2, r3, #1
   22aae:	68fb      	ldr	r3, [r7, #12]
   22ab0:	61da      	str	r2, [r3, #28]
#ifdef FEATURE_NVM_RWWEE
	nvm_module->CTRLA.reg = ((is_rww_eeprom) ?
								(NVM_COMMAND_RWWEE_ERASE_ROW | NVMCTRL_CTRLA_CMDEX_KEY):
								(NVM_COMMAND_ERASE_ROW | NVMCTRL_CTRLA_CMDEX_KEY));
#else
	nvm_module->CTRLA.reg = NVM_COMMAND_ERASE_ROW | NVMCTRL_CTRLA_CMDEX_KEY;
   22ab2:	68fb      	ldr	r3, [r7, #12]
   22ab4:	4a10      	ldr	r2, [pc, #64]	; (22af8 <nvm_erase_row+0xa4>)
   22ab6:	801a      	strh	r2, [r3, #0]
#endif

	while (!nvm_is_ready()) {
   22ab8:	46c0      	nop			; (mov r8, r8)
   22aba:	4b0e      	ldr	r3, [pc, #56]	; (22af4 <nvm_erase_row+0xa0>)
   22abc:	4798      	blx	r3
   22abe:	0003      	movs	r3, r0
   22ac0:	001a      	movs	r2, r3
   22ac2:	2301      	movs	r3, #1
   22ac4:	4053      	eors	r3, r2
   22ac6:	b2db      	uxtb	r3, r3
   22ac8:	2b00      	cmp	r3, #0
   22aca:	d1f6      	bne.n	22aba <nvm_erase_row+0x66>
	}

	/* There existed error in NVM erase operation */
	if ((enum nvm_error)(nvm_module->STATUS.reg & NVM_ERRORS_MASK) != NVM_ERROR_NONE) {
   22acc:	68fb      	ldr	r3, [r7, #12]
   22ace:	8b1b      	ldrh	r3, [r3, #24]
   22ad0:	b29b      	uxth	r3, r3
   22ad2:	b2db      	uxtb	r3, r3
   22ad4:	001a      	movs	r2, r3
   22ad6:	231c      	movs	r3, #28
   22ad8:	4013      	ands	r3, r2
   22ada:	d001      	beq.n	22ae0 <nvm_erase_row+0x8c>
		return STATUS_ABORTED;
   22adc:	2304      	movs	r3, #4
   22ade:	e000      	b.n	22ae2 <nvm_erase_row+0x8e>
	}

	return STATUS_OK;
   22ae0:	2300      	movs	r3, #0
}
   22ae2:	0018      	movs	r0, r3
   22ae4:	46bd      	mov	sp, r7
   22ae6:	b004      	add	sp, #16
   22ae8:	bd80      	pop	{r7, pc}
   22aea:	46c0      	nop			; (mov r8, r8)
   22aec:	20000414 	.word	0x20000414
   22af0:	41004000 	.word	0x41004000
   22af4:	00022599 	.word	0x00022599
   22af8:	ffffa502 	.word	0xffffa502

00022afc <nvm_get_parameters>:
 * \param[out] parameters    Parameter structure, which holds page size and
 *                           number of pages in the NVM memory
 */
void nvm_get_parameters(
		struct nvm_parameters *const parameters)
{
   22afc:	b580      	push	{r7, lr}
   22afe:	b086      	sub	sp, #24
   22b00:	af00      	add	r7, sp, #0
   22b02:	6078      	str	r0, [r7, #4]
	/* Sanity check parameters */
	Assert(parameters);

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
   22b04:	4b2a      	ldr	r3, [pc, #168]	; (22bb0 <nvm_get_parameters+0xb4>)
   22b06:	617b      	str	r3, [r7, #20]

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
   22b08:	697b      	ldr	r3, [r7, #20]
   22b0a:	2220      	movs	r2, #32
   22b0c:	32ff      	adds	r2, #255	; 0xff
   22b0e:	831a      	strh	r2, [r3, #24]

	/* Read out from the PARAM register */
	uint32_t param_reg = nvm_module->PARAM.reg;
   22b10:	697b      	ldr	r3, [r7, #20]
   22b12:	689b      	ldr	r3, [r3, #8]
   22b14:	613b      	str	r3, [r7, #16]

	/* Mask out page size exponent and convert to a number of bytes */
	parameters->page_size =
			8 << ((param_reg & NVMCTRL_PARAM_PSZ_Msk) >> NVMCTRL_PARAM_PSZ_Pos);
   22b16:	693b      	ldr	r3, [r7, #16]
   22b18:	0c1b      	lsrs	r3, r3, #16
   22b1a:	2207      	movs	r2, #7
   22b1c:	4013      	ands	r3, r2
   22b1e:	2208      	movs	r2, #8
   22b20:	409a      	lsls	r2, r3
   22b22:	0013      	movs	r3, r2
	parameters->page_size =
   22b24:	b2da      	uxtb	r2, r3
   22b26:	687b      	ldr	r3, [r7, #4]
   22b28:	701a      	strb	r2, [r3, #0]

	/* Mask out number of pages count */
	parameters->nvm_number_of_pages =
   22b2a:	693b      	ldr	r3, [r7, #16]
   22b2c:	b29a      	uxth	r2, r3
   22b2e:	687b      	ldr	r3, [r7, #4]
   22b30:	805a      	strh	r2, [r3, #2]
			(param_reg & NVMCTRL_PARAM_RWWEEP_Msk) >> NVMCTRL_PARAM_RWWEEP_Pos;
#endif

	/* Read the current EEPROM fuse value from the USER row */
	uint16_t eeprom_fuse_value =
			(NVM_USER_MEMORY[NVMCTRL_FUSES_EEPROM_SIZE_Pos / 16] &
   22b32:	4b20      	ldr	r3, [pc, #128]	; (22bb4 <nvm_get_parameters+0xb8>)
   22b34:	881b      	ldrh	r3, [r3, #0]
   22b36:	b29b      	uxth	r3, r3
			NVMCTRL_FUSES_EEPROM_SIZE_Msk) >> NVMCTRL_FUSES_EEPROM_SIZE_Pos;
   22b38:	091b      	lsrs	r3, r3, #4
   22b3a:	b29a      	uxth	r2, r3
	uint16_t eeprom_fuse_value =
   22b3c:	230e      	movs	r3, #14
   22b3e:	18fb      	adds	r3, r7, r3
   22b40:	2107      	movs	r1, #7
   22b42:	400a      	ands	r2, r1
   22b44:	801a      	strh	r2, [r3, #0]

	/* Translate the EEPROM fuse byte value to a number of NVM pages */
	if (eeprom_fuse_value == 7) {
   22b46:	230e      	movs	r3, #14
   22b48:	18fb      	adds	r3, r7, r3
   22b4a:	881b      	ldrh	r3, [r3, #0]
   22b4c:	2b07      	cmp	r3, #7
   22b4e:	d103      	bne.n	22b58 <nvm_get_parameters+0x5c>
		parameters->eeprom_number_of_pages = 0;
   22b50:	687b      	ldr	r3, [r7, #4]
   22b52:	2200      	movs	r2, #0
   22b54:	605a      	str	r2, [r3, #4]
   22b56:	e00a      	b.n	22b6e <nvm_get_parameters+0x72>
	}
	else {
		parameters->eeprom_number_of_pages =
				NVMCTRL_ROW_PAGES << (6 - eeprom_fuse_value);
   22b58:	230e      	movs	r3, #14
   22b5a:	18fb      	adds	r3, r7, r3
   22b5c:	881b      	ldrh	r3, [r3, #0]
   22b5e:	2206      	movs	r2, #6
   22b60:	1ad3      	subs	r3, r2, r3
   22b62:	2204      	movs	r2, #4
   22b64:	409a      	lsls	r2, r3
   22b66:	0013      	movs	r3, r2
   22b68:	001a      	movs	r2, r3
		parameters->eeprom_number_of_pages =
   22b6a:	687b      	ldr	r3, [r7, #4]
   22b6c:	605a      	str	r2, [r3, #4]
	}

	/* Read the current BOOTSZ fuse value from the USER row */
	uint16_t boot_fuse_value =
			(NVM_USER_MEMORY[NVMCTRL_FUSES_BOOTPROT_Pos / 16] &
   22b6e:	4b11      	ldr	r3, [pc, #68]	; (22bb4 <nvm_get_parameters+0xb8>)
   22b70:	881b      	ldrh	r3, [r3, #0]
   22b72:	b29a      	uxth	r2, r3
	uint16_t boot_fuse_value =
   22b74:	230c      	movs	r3, #12
   22b76:	18fb      	adds	r3, r7, r3
   22b78:	2107      	movs	r1, #7
   22b7a:	400a      	ands	r2, r1
   22b7c:	801a      	strh	r2, [r3, #0]
			NVMCTRL_FUSES_BOOTPROT_Msk) >> NVMCTRL_FUSES_BOOTPROT_Pos;

	/* Translate the BOOTSZ fuse byte value to a number of NVM pages */
	if (boot_fuse_value == 7) {
   22b7e:	230c      	movs	r3, #12
   22b80:	18fb      	adds	r3, r7, r3
   22b82:	881b      	ldrh	r3, [r3, #0]
   22b84:	2b07      	cmp	r3, #7
   22b86:	d103      	bne.n	22b90 <nvm_get_parameters+0x94>
		parameters->bootloader_number_of_pages = 0;
   22b88:	687b      	ldr	r3, [r7, #4]
   22b8a:	2200      	movs	r2, #0
   22b8c:	609a      	str	r2, [r3, #8]
	}
	else {
		parameters->bootloader_number_of_pages =
				NVMCTRL_ROW_PAGES << (7 - boot_fuse_value);
	}
}
   22b8e:	e00a      	b.n	22ba6 <nvm_get_parameters+0xaa>
				NVMCTRL_ROW_PAGES << (7 - boot_fuse_value);
   22b90:	230c      	movs	r3, #12
   22b92:	18fb      	adds	r3, r7, r3
   22b94:	881b      	ldrh	r3, [r3, #0]
   22b96:	2207      	movs	r2, #7
   22b98:	1ad3      	subs	r3, r2, r3
   22b9a:	2204      	movs	r2, #4
   22b9c:	409a      	lsls	r2, r3
   22b9e:	0013      	movs	r3, r2
   22ba0:	001a      	movs	r2, r3
		parameters->bootloader_number_of_pages =
   22ba2:	687b      	ldr	r3, [r7, #4]
   22ba4:	609a      	str	r2, [r3, #8]
}
   22ba6:	46c0      	nop			; (mov r8, r8)
   22ba8:	46bd      	mov	sp, r7
   22baa:	b006      	add	sp, #24
   22bac:	bd80      	pop	{r7, pc}
   22bae:	46c0      	nop			; (mov r8, r8)
   22bb0:	41004000 	.word	0x41004000
   22bb4:	00804000 	.word	0x00804000

00022bb8 <system_pinmux_get_config_defaults>:
{
   22bb8:	b580      	push	{r7, lr}
   22bba:	b082      	sub	sp, #8
   22bbc:	af00      	add	r7, sp, #0
   22bbe:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   22bc0:	687b      	ldr	r3, [r7, #4]
   22bc2:	2280      	movs	r2, #128	; 0x80
   22bc4:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   22bc6:	687b      	ldr	r3, [r7, #4]
   22bc8:	2200      	movs	r2, #0
   22bca:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   22bcc:	687b      	ldr	r3, [r7, #4]
   22bce:	2201      	movs	r2, #1
   22bd0:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   22bd2:	687b      	ldr	r3, [r7, #4]
   22bd4:	2200      	movs	r2, #0
   22bd6:	70da      	strb	r2, [r3, #3]
}
   22bd8:	46c0      	nop			; (mov r8, r8)
   22bda:	46bd      	mov	sp, r7
   22bdc:	b002      	add	sp, #8
   22bde:	bd80      	pop	{r7, pc}

00022be0 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
   22be0:	b580      	push	{r7, lr}
   22be2:	b084      	sub	sp, #16
   22be4:	af00      	add	r7, sp, #0
   22be6:	0002      	movs	r2, r0
   22be8:	6039      	str	r1, [r7, #0]
   22bea:	1dfb      	adds	r3, r7, #7
   22bec:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
   22bee:	230c      	movs	r3, #12
   22bf0:	18fb      	adds	r3, r7, r3
   22bf2:	0018      	movs	r0, r3
   22bf4:	4b10      	ldr	r3, [pc, #64]	; (22c38 <port_pin_set_config+0x58>)
   22bf6:	4798      	blx	r3

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
   22bf8:	230c      	movs	r3, #12
   22bfa:	18fb      	adds	r3, r7, r3
   22bfc:	2280      	movs	r2, #128	; 0x80
   22bfe:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
   22c00:	683b      	ldr	r3, [r7, #0]
   22c02:	781a      	ldrb	r2, [r3, #0]
   22c04:	230c      	movs	r3, #12
   22c06:	18fb      	adds	r3, r7, r3
   22c08:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
   22c0a:	683b      	ldr	r3, [r7, #0]
   22c0c:	785a      	ldrb	r2, [r3, #1]
   22c0e:	230c      	movs	r3, #12
   22c10:	18fb      	adds	r3, r7, r3
   22c12:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
   22c14:	683b      	ldr	r3, [r7, #0]
   22c16:	789a      	ldrb	r2, [r3, #2]
   22c18:	230c      	movs	r3, #12
   22c1a:	18fb      	adds	r3, r7, r3
   22c1c:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
   22c1e:	230c      	movs	r3, #12
   22c20:	18fa      	adds	r2, r7, r3
   22c22:	1dfb      	adds	r3, r7, #7
   22c24:	781b      	ldrb	r3, [r3, #0]
   22c26:	0011      	movs	r1, r2
   22c28:	0018      	movs	r0, r3
   22c2a:	4b04      	ldr	r3, [pc, #16]	; (22c3c <port_pin_set_config+0x5c>)
   22c2c:	4798      	blx	r3
}
   22c2e:	46c0      	nop			; (mov r8, r8)
   22c30:	46bd      	mov	sp, r7
   22c32:	b004      	add	sp, #16
   22c34:	bd80      	pop	{r7, pc}
   22c36:	46c0      	nop			; (mov r8, r8)
   22c38:	00022bb9 	.word	0x00022bb9
   22c3c:	00024911 	.word	0x00024911

00022c40 <nvm_get_config_defaults>:
{
   22c40:	b580      	push	{r7, lr}
   22c42:	b082      	sub	sp, #8
   22c44:	af00      	add	r7, sp, #0
   22c46:	6078      	str	r0, [r7, #4]
	config->sleep_power_mode  = NVM_SLEEP_POWER_MODE_WAKEONACCESS;
   22c48:	687b      	ldr	r3, [r7, #4]
   22c4a:	2200      	movs	r2, #0
   22c4c:	701a      	strb	r2, [r3, #0]
	config->manual_page_write = true;
   22c4e:	687b      	ldr	r3, [r7, #4]
   22c50:	2201      	movs	r2, #1
   22c52:	705a      	strb	r2, [r3, #1]
	config->wait_states       = NVMCTRL->CTRLB.bit.RWS;
   22c54:	4b08      	ldr	r3, [pc, #32]	; (22c78 <nvm_get_config_defaults+0x38>)
   22c56:	685b      	ldr	r3, [r3, #4]
   22c58:	06db      	lsls	r3, r3, #27
   22c5a:	0f1b      	lsrs	r3, r3, #28
   22c5c:	b2db      	uxtb	r3, r3
   22c5e:	001a      	movs	r2, r3
   22c60:	687b      	ldr	r3, [r7, #4]
   22c62:	709a      	strb	r2, [r3, #2]
	config->disable_cache     = false;
   22c64:	687b      	ldr	r3, [r7, #4]
   22c66:	2200      	movs	r2, #0
   22c68:	70da      	strb	r2, [r3, #3]
	config->cache_readmode    = NVM_CACHE_READMODE_NO_MISS_PENALTY;
   22c6a:	687b      	ldr	r3, [r7, #4]
   22c6c:	2200      	movs	r2, #0
   22c6e:	711a      	strb	r2, [r3, #4]
}
   22c70:	46c0      	nop			; (mov r8, r8)
   22c72:	46bd      	mov	sp, r7
   22c74:	b002      	add	sp, #8
   22c76:	bd80      	pop	{r7, pc}
   22c78:	41004000 	.word	0x41004000

00022c7c <_eeprom_emulator_nvm_erase_row>:
 *
 *  \param[in] row  Physical row in EEPROM space to erase
 */
static void _eeprom_emulator_nvm_erase_row(
		const uint8_t row)
{
   22c7c:	b590      	push	{r4, r7, lr}
   22c7e:	b085      	sub	sp, #20
   22c80:	af00      	add	r7, sp, #0
   22c82:	0002      	movs	r2, r0
   22c84:	1dfb      	adds	r3, r7, #7
   22c86:	701a      	strb	r2, [r3, #0]
	enum status_code error_code = STATUS_OK;
   22c88:	230f      	movs	r3, #15
   22c8a:	18fb      	adds	r3, r7, r3
   22c8c:	2200      	movs	r2, #0
   22c8e:	701a      	strb	r2, [r3, #0]

	do {
		error_code = nvm_erase_row(
				(uint32_t)&_eeprom_instance.flash[row * NVMCTRL_ROW_PAGES]);
   22c90:	4b0a      	ldr	r3, [pc, #40]	; (22cbc <_eeprom_emulator_nvm_erase_row+0x40>)
   22c92:	685b      	ldr	r3, [r3, #4]
   22c94:	1dfa      	adds	r2, r7, #7
   22c96:	7812      	ldrb	r2, [r2, #0]
   22c98:	0212      	lsls	r2, r2, #8
   22c9a:	189b      	adds	r3, r3, r2
		error_code = nvm_erase_row(
   22c9c:	220f      	movs	r2, #15
   22c9e:	18bc      	adds	r4, r7, r2
   22ca0:	0018      	movs	r0, r3
   22ca2:	4b07      	ldr	r3, [pc, #28]	; (22cc0 <_eeprom_emulator_nvm_erase_row+0x44>)
   22ca4:	4798      	blx	r3
   22ca6:	0003      	movs	r3, r0
   22ca8:	7023      	strb	r3, [r4, #0]
	} while (error_code == STATUS_BUSY);
   22caa:	230f      	movs	r3, #15
   22cac:	18fb      	adds	r3, r7, r3
   22cae:	781b      	ldrb	r3, [r3, #0]
   22cb0:	2b05      	cmp	r3, #5
   22cb2:	d0ed      	beq.n	22c90 <_eeprom_emulator_nvm_erase_row+0x14>
}
   22cb4:	46c0      	nop			; (mov r8, r8)
   22cb6:	46bd      	mov	sp, r7
   22cb8:	b005      	add	sp, #20
   22cba:	bd90      	pop	{r4, r7, pc}
   22cbc:	2000041c 	.word	0x2000041c
   22cc0:	00022a55 	.word	0x00022a55

00022cc4 <_eeprom_emulator_nvm_fill_cache>:
 *  \param[in] data           Data to write to the physical memory page
 */
static void _eeprom_emulator_nvm_fill_cache(
		const uint16_t physical_page,
		const void* const data)
{
   22cc4:	b590      	push	{r4, r7, lr}
   22cc6:	b085      	sub	sp, #20
   22cc8:	af00      	add	r7, sp, #0
   22cca:	0002      	movs	r2, r0
   22ccc:	6039      	str	r1, [r7, #0]
   22cce:	1dbb      	adds	r3, r7, #6
   22cd0:	801a      	strh	r2, [r3, #0]
	enum status_code error_code = STATUS_OK;
   22cd2:	230f      	movs	r3, #15
   22cd4:	18fb      	adds	r3, r7, r3
   22cd6:	2200      	movs	r2, #0
   22cd8:	701a      	strb	r2, [r3, #0]

	do {
		error_code = nvm_write_buffer(
				(uint32_t)&_eeprom_instance.flash[physical_page],
   22cda:	4b0c      	ldr	r3, [pc, #48]	; (22d0c <_eeprom_emulator_nvm_fill_cache+0x48>)
   22cdc:	685a      	ldr	r2, [r3, #4]
   22cde:	1dbb      	adds	r3, r7, #6
   22ce0:	881b      	ldrh	r3, [r3, #0]
   22ce2:	019b      	lsls	r3, r3, #6
   22ce4:	18d3      	adds	r3, r2, r3
		error_code = nvm_write_buffer(
   22ce6:	0018      	movs	r0, r3
   22ce8:	230f      	movs	r3, #15
   22cea:	18fc      	adds	r4, r7, r3
   22cec:	683b      	ldr	r3, [r7, #0]
   22cee:	2240      	movs	r2, #64	; 0x40
   22cf0:	0019      	movs	r1, r3
   22cf2:	4b07      	ldr	r3, [pc, #28]	; (22d10 <_eeprom_emulator_nvm_fill_cache+0x4c>)
   22cf4:	4798      	blx	r3
   22cf6:	0003      	movs	r3, r0
   22cf8:	7023      	strb	r3, [r4, #0]
				(uint8_t*)data,
				NVMCTRL_PAGE_SIZE);
	} while (error_code == STATUS_BUSY);
   22cfa:	230f      	movs	r3, #15
   22cfc:	18fb      	adds	r3, r7, r3
   22cfe:	781b      	ldrb	r3, [r3, #0]
   22d00:	2b05      	cmp	r3, #5
   22d02:	d0ea      	beq.n	22cda <_eeprom_emulator_nvm_fill_cache+0x16>
}
   22d04:	46c0      	nop			; (mov r8, r8)
   22d06:	46bd      	mov	sp, r7
   22d08:	b005      	add	sp, #20
   22d0a:	bd90      	pop	{r4, r7, pc}
   22d0c:	2000041c 	.word	0x2000041c
   22d10:	0002280d 	.word	0x0002280d

00022d14 <_eeprom_emulator_nvm_commit_cache>:
 *
 *  \param[in] physical_page  Physical page in EEPROM space to commit
 */
static void _eeprom_emulator_nvm_commit_cache(
		const uint16_t physical_page)
{
   22d14:	b590      	push	{r4, r7, lr}
   22d16:	b085      	sub	sp, #20
   22d18:	af00      	add	r7, sp, #0
   22d1a:	0002      	movs	r2, r0
   22d1c:	1dbb      	adds	r3, r7, #6
   22d1e:	801a      	strh	r2, [r3, #0]
	enum status_code error_code = STATUS_OK;
   22d20:	230f      	movs	r3, #15
   22d22:	18fb      	adds	r3, r7, r3
   22d24:	2200      	movs	r2, #0
   22d26:	701a      	strb	r2, [r3, #0]

	do {
		error_code = nvm_execute_command(
				NVM_COMMAND_WRITE_PAGE,
				(uint32_t)&_eeprom_instance.flash[physical_page], 0);
   22d28:	4b0b      	ldr	r3, [pc, #44]	; (22d58 <_eeprom_emulator_nvm_commit_cache+0x44>)
   22d2a:	685a      	ldr	r2, [r3, #4]
   22d2c:	1dbb      	adds	r3, r7, #6
   22d2e:	881b      	ldrh	r3, [r3, #0]
   22d30:	019b      	lsls	r3, r3, #6
   22d32:	18d3      	adds	r3, r2, r3
		error_code = nvm_execute_command(
   22d34:	220f      	movs	r2, #15
   22d36:	18bc      	adds	r4, r7, r2
   22d38:	2200      	movs	r2, #0
   22d3a:	0019      	movs	r1, r3
   22d3c:	2004      	movs	r0, #4
   22d3e:	4b07      	ldr	r3, [pc, #28]	; (22d5c <_eeprom_emulator_nvm_commit_cache+0x48>)
   22d40:	4798      	blx	r3
   22d42:	0003      	movs	r3, r0
   22d44:	7023      	strb	r3, [r4, #0]
	} while (error_code == STATUS_BUSY);
   22d46:	230f      	movs	r3, #15
   22d48:	18fb      	adds	r3, r7, r3
   22d4a:	781b      	ldrb	r3, [r3, #0]
   22d4c:	2b05      	cmp	r3, #5
   22d4e:	d0eb      	beq.n	22d28 <_eeprom_emulator_nvm_commit_cache+0x14>
}
   22d50:	46c0      	nop			; (mov r8, r8)
   22d52:	46bd      	mov	sp, r7
   22d54:	b005      	add	sp, #20
   22d56:	bd90      	pop	{r4, r7, pc}
   22d58:	2000041c 	.word	0x2000041c
   22d5c:	000226f5 	.word	0x000226f5

00022d60 <_eeprom_emulator_nvm_read_page>:
 *  \param[out] data           Destination buffer to fill with the read data
 */
static void _eeprom_emulator_nvm_read_page(
		const uint16_t physical_page,
		void* const data)
{
   22d60:	b590      	push	{r4, r7, lr}
   22d62:	b085      	sub	sp, #20
   22d64:	af00      	add	r7, sp, #0
   22d66:	0002      	movs	r2, r0
   22d68:	6039      	str	r1, [r7, #0]
   22d6a:	1dbb      	adds	r3, r7, #6
   22d6c:	801a      	strh	r2, [r3, #0]
	enum status_code error_code = STATUS_OK;
   22d6e:	230f      	movs	r3, #15
   22d70:	18fb      	adds	r3, r7, r3
   22d72:	2200      	movs	r2, #0
   22d74:	701a      	strb	r2, [r3, #0]

	do {
		error_code = nvm_read_buffer(
				(uint32_t)&_eeprom_instance.flash[physical_page],
   22d76:	4b0c      	ldr	r3, [pc, #48]	; (22da8 <_eeprom_emulator_nvm_read_page+0x48>)
   22d78:	685a      	ldr	r2, [r3, #4]
   22d7a:	1dbb      	adds	r3, r7, #6
   22d7c:	881b      	ldrh	r3, [r3, #0]
   22d7e:	019b      	lsls	r3, r3, #6
   22d80:	18d3      	adds	r3, r2, r3
		error_code = nvm_read_buffer(
   22d82:	0018      	movs	r0, r3
   22d84:	230f      	movs	r3, #15
   22d86:	18fc      	adds	r4, r7, r3
   22d88:	683b      	ldr	r3, [r7, #0]
   22d8a:	2240      	movs	r2, #64	; 0x40
   22d8c:	0019      	movs	r1, r3
   22d8e:	4b07      	ldr	r3, [pc, #28]	; (22dac <_eeprom_emulator_nvm_read_page+0x4c>)
   22d90:	4798      	blx	r3
   22d92:	0003      	movs	r3, r0
   22d94:	7023      	strb	r3, [r4, #0]
				(uint8_t*)data,
				NVMCTRL_PAGE_SIZE);
	} while (error_code == STATUS_BUSY);
   22d96:	230f      	movs	r3, #15
   22d98:	18fb      	adds	r3, r7, r3
   22d9a:	781b      	ldrb	r3, [r3, #0]
   22d9c:	2b05      	cmp	r3, #5
   22d9e:	d0ea      	beq.n	22d76 <_eeprom_emulator_nvm_read_page+0x16>
}
   22da0:	46c0      	nop			; (mov r8, r8)
   22da2:	46bd      	mov	sp, r7
   22da4:	b005      	add	sp, #20
   22da6:	bd90      	pop	{r4, r7, pc}
   22da8:	2000041c 	.word	0x2000041c
   22dac:	00022959 	.word	0x00022959

00022db0 <_eeprom_emulator_format_memory>:

/**
 * \brief Initializes the emulated EEPROM memory, destroying the current contents.
 */
static void _eeprom_emulator_format_memory(void)
{
   22db0:	b580      	push	{r7, lr}
   22db2:	b092      	sub	sp, #72	; 0x48
   22db4:	af00      	add	r7, sp, #0
	uint16_t logical_page = 0;
   22db6:	2346      	movs	r3, #70	; 0x46
   22db8:	18fb      	adds	r3, r7, r3
   22dba:	2200      	movs	r2, #0
   22dbc:	801a      	strh	r2, [r3, #0]

	/* Set row 0 as the spare row */
	_eeprom_instance.spare_row = 0;
   22dbe:	4b32      	ldr	r3, [pc, #200]	; (22e88 <_eeprom_emulator_format_memory+0xd8>)
   22dc0:	2287      	movs	r2, #135	; 0x87
   22dc2:	2100      	movs	r1, #0
   22dc4:	5499      	strb	r1, [r3, r2]
	_eeprom_emulator_nvm_erase_row(_eeprom_instance.spare_row);
   22dc6:	4b30      	ldr	r3, [pc, #192]	; (22e88 <_eeprom_emulator_format_memory+0xd8>)
   22dc8:	2287      	movs	r2, #135	; 0x87
   22dca:	5c9b      	ldrb	r3, [r3, r2]
   22dcc:	0018      	movs	r0, r3
   22dce:	4b2f      	ldr	r3, [pc, #188]	; (22e8c <_eeprom_emulator_format_memory+0xdc>)
   22dd0:	4798      	blx	r3

	for (uint16_t physical_page = NVMCTRL_ROW_PAGES;
   22dd2:	2344      	movs	r3, #68	; 0x44
   22dd4:	18fb      	adds	r3, r7, r3
   22dd6:	2204      	movs	r2, #4
   22dd8:	801a      	strh	r2, [r3, #0]
   22dda:	e04a      	b.n	22e72 <_eeprom_emulator_format_memory+0xc2>
			physical_page < _eeprom_instance.physical_pages; physical_page++) {

		if (physical_page == EEPROM_MASTER_PAGE_NUMBER) {
   22ddc:	2344      	movs	r3, #68	; 0x44
   22dde:	18fb      	adds	r3, r7, r3
   22de0:	881a      	ldrh	r2, [r3, #0]
   22de2:	4b29      	ldr	r3, [pc, #164]	; (22e88 <_eeprom_emulator_format_memory+0xd8>)
   22de4:	891b      	ldrh	r3, [r3, #8]
   22de6:	3b01      	subs	r3, #1
   22de8:	429a      	cmp	r2, r3
   22dea:	d03a      	beq.n	22e62 <_eeprom_emulator_format_memory+0xb2>
			continue;
		}

		/* If we are at the first page in a new row, erase the entire row */
		if ((physical_page % NVMCTRL_ROW_PAGES) == 0) {
   22dec:	2344      	movs	r3, #68	; 0x44
   22dee:	18fb      	adds	r3, r7, r3
   22df0:	881b      	ldrh	r3, [r3, #0]
   22df2:	2203      	movs	r2, #3
   22df4:	4013      	ands	r3, r2
   22df6:	b29b      	uxth	r3, r3
   22df8:	2b00      	cmp	r3, #0
   22dfa:	d108      	bne.n	22e0e <_eeprom_emulator_format_memory+0x5e>
			_eeprom_emulator_nvm_erase_row(physical_page / NVMCTRL_ROW_PAGES);
   22dfc:	2344      	movs	r3, #68	; 0x44
   22dfe:	18fb      	adds	r3, r7, r3
   22e00:	881b      	ldrh	r3, [r3, #0]
   22e02:	089b      	lsrs	r3, r3, #2
   22e04:	b29b      	uxth	r3, r3
   22e06:	b2db      	uxtb	r3, r3
   22e08:	0018      	movs	r0, r3
   22e0a:	4b20      	ldr	r3, [pc, #128]	; (22e8c <_eeprom_emulator_format_memory+0xdc>)
   22e0c:	4798      	blx	r3
		}

		/* Two logical pages are stored in each physical row; program in a
		 * pair of initialized but blank set of emulated EEPROM pages */
		if ((physical_page % NVMCTRL_ROW_PAGES) < 2) {
   22e0e:	2344      	movs	r3, #68	; 0x44
   22e10:	18fb      	adds	r3, r7, r3
   22e12:	881b      	ldrh	r3, [r3, #0]
   22e14:	2203      	movs	r2, #3
   22e16:	4013      	ands	r3, r2
   22e18:	b29b      	uxth	r3, r3
   22e1a:	2b01      	cmp	r3, #1
   22e1c:	d822      	bhi.n	22e64 <_eeprom_emulator_format_memory+0xb4>
			/* Make a buffer to hold the initialized EEPROM page */
			struct _eeprom_page data;
			memset(&data, 0xFF, sizeof(data));
   22e1e:	1d3b      	adds	r3, r7, #4
   22e20:	2240      	movs	r2, #64	; 0x40
   22e22:	21ff      	movs	r1, #255	; 0xff
   22e24:	0018      	movs	r0, r3
   22e26:	4b1a      	ldr	r3, [pc, #104]	; (22e90 <_eeprom_emulator_format_memory+0xe0>)
   22e28:	4798      	blx	r3

			/* Set up the new EEPROM row's header */
			data.header.logical_page = logical_page;
   22e2a:	2346      	movs	r3, #70	; 0x46
   22e2c:	18fb      	adds	r3, r7, r3
   22e2e:	881b      	ldrh	r3, [r3, #0]
   22e30:	b2da      	uxtb	r2, r3
   22e32:	1d3b      	adds	r3, r7, #4
   22e34:	701a      	strb	r2, [r3, #0]

			/* Write the page out to physical memory */
			_eeprom_emulator_nvm_fill_cache(physical_page, &data);
   22e36:	1d3a      	adds	r2, r7, #4
   22e38:	2344      	movs	r3, #68	; 0x44
   22e3a:	18fb      	adds	r3, r7, r3
   22e3c:	881b      	ldrh	r3, [r3, #0]
   22e3e:	0011      	movs	r1, r2
   22e40:	0018      	movs	r0, r3
   22e42:	4b14      	ldr	r3, [pc, #80]	; (22e94 <_eeprom_emulator_format_memory+0xe4>)
   22e44:	4798      	blx	r3
			_eeprom_emulator_nvm_commit_cache(physical_page);
   22e46:	2344      	movs	r3, #68	; 0x44
   22e48:	18fb      	adds	r3, r7, r3
   22e4a:	881b      	ldrh	r3, [r3, #0]
   22e4c:	0018      	movs	r0, r3
   22e4e:	4b12      	ldr	r3, [pc, #72]	; (22e98 <_eeprom_emulator_format_memory+0xe8>)
   22e50:	4798      	blx	r3

			/* Increment the logical EEPROM page address now that the current
			 * address' page has been initialized */
			logical_page++;
   22e52:	2346      	movs	r3, #70	; 0x46
   22e54:	18fb      	adds	r3, r7, r3
   22e56:	881a      	ldrh	r2, [r3, #0]
   22e58:	2346      	movs	r3, #70	; 0x46
   22e5a:	18fb      	adds	r3, r7, r3
   22e5c:	3201      	adds	r2, #1
   22e5e:	801a      	strh	r2, [r3, #0]
   22e60:	e000      	b.n	22e64 <_eeprom_emulator_format_memory+0xb4>
			continue;
   22e62:	46c0      	nop			; (mov r8, r8)
			physical_page < _eeprom_instance.physical_pages; physical_page++) {
   22e64:	2344      	movs	r3, #68	; 0x44
   22e66:	18fb      	adds	r3, r7, r3
   22e68:	881a      	ldrh	r2, [r3, #0]
   22e6a:	2344      	movs	r3, #68	; 0x44
   22e6c:	18fb      	adds	r3, r7, r3
   22e6e:	3201      	adds	r2, #1
   22e70:	801a      	strh	r2, [r3, #0]
   22e72:	4b05      	ldr	r3, [pc, #20]	; (22e88 <_eeprom_emulator_format_memory+0xd8>)
   22e74:	891b      	ldrh	r3, [r3, #8]
	for (uint16_t physical_page = NVMCTRL_ROW_PAGES;
   22e76:	2244      	movs	r2, #68	; 0x44
   22e78:	18ba      	adds	r2, r7, r2
   22e7a:	8812      	ldrh	r2, [r2, #0]
   22e7c:	429a      	cmp	r2, r3
   22e7e:	d3ad      	bcc.n	22ddc <_eeprom_emulator_format_memory+0x2c>
		}
	}
}
   22e80:	46c0      	nop			; (mov r8, r8)
   22e82:	46bd      	mov	sp, r7
   22e84:	b012      	add	sp, #72	; 0x48
   22e86:	bd80      	pop	{r7, pc}
   22e88:	2000041c 	.word	0x2000041c
   22e8c:	00022c7d 	.word	0x00022c7d
   22e90:	000289e3 	.word	0x000289e3
   22e94:	00022cc5 	.word	0x00022cc5
   22e98:	00022d15 	.word	0x00022d15

00022e9c <_eeprom_emulator_is_full_row>:
 *  it is the full row.
 *
 *  \param[in]  phy_page  Physical page that in a row
 */
static bool _eeprom_emulator_is_full_row(uint16_t phy_page)
{
   22e9c:	b580      	push	{r7, lr}
   22e9e:	b082      	sub	sp, #8
   22ea0:	af00      	add	r7, sp, #0
   22ea2:	0002      	movs	r2, r0
   22ea4:	1dbb      	adds	r3, r7, #6
   22ea6:	801a      	strh	r2, [r3, #0]
	if((_eeprom_instance.flash[phy_page].header.logical_page
   22ea8:	4b14      	ldr	r3, [pc, #80]	; (22efc <_eeprom_emulator_is_full_row+0x60>)
   22eaa:	685a      	ldr	r2, [r3, #4]
   22eac:	1dbb      	adds	r3, r7, #6
   22eae:	881b      	ldrh	r3, [r3, #0]
   22eb0:	019b      	lsls	r3, r3, #6
   22eb2:	18d3      	adds	r3, r2, r3
   22eb4:	781a      	ldrb	r2, [r3, #0]
		== _eeprom_instance.flash[phy_page+2].header.logical_page)
   22eb6:	4b11      	ldr	r3, [pc, #68]	; (22efc <_eeprom_emulator_is_full_row+0x60>)
   22eb8:	6859      	ldr	r1, [r3, #4]
   22eba:	1dbb      	adds	r3, r7, #6
   22ebc:	881b      	ldrh	r3, [r3, #0]
   22ebe:	3302      	adds	r3, #2
   22ec0:	019b      	lsls	r3, r3, #6
   22ec2:	18cb      	adds	r3, r1, r3
   22ec4:	781b      	ldrb	r3, [r3, #0]
	if((_eeprom_instance.flash[phy_page].header.logical_page
   22ec6:	429a      	cmp	r2, r3
   22ec8:	d011      	beq.n	22eee <_eeprom_emulator_is_full_row+0x52>
		|| (_eeprom_instance.flash[phy_page+1].header.logical_page
   22eca:	4b0c      	ldr	r3, [pc, #48]	; (22efc <_eeprom_emulator_is_full_row+0x60>)
   22ecc:	685a      	ldr	r2, [r3, #4]
   22ece:	1dbb      	adds	r3, r7, #6
   22ed0:	881b      	ldrh	r3, [r3, #0]
   22ed2:	3301      	adds	r3, #1
   22ed4:	019b      	lsls	r3, r3, #6
   22ed6:	18d3      	adds	r3, r2, r3
   22ed8:	781a      	ldrb	r2, [r3, #0]
		== _eeprom_instance.flash[phy_page+2].header.logical_page )) {
   22eda:	4b08      	ldr	r3, [pc, #32]	; (22efc <_eeprom_emulator_is_full_row+0x60>)
   22edc:	6859      	ldr	r1, [r3, #4]
   22ede:	1dbb      	adds	r3, r7, #6
   22ee0:	881b      	ldrh	r3, [r3, #0]
   22ee2:	3302      	adds	r3, #2
   22ee4:	019b      	lsls	r3, r3, #6
   22ee6:	18cb      	adds	r3, r1, r3
   22ee8:	781b      	ldrb	r3, [r3, #0]
		|| (_eeprom_instance.flash[phy_page+1].header.logical_page
   22eea:	429a      	cmp	r2, r3
   22eec:	d101      	bne.n	22ef2 <_eeprom_emulator_is_full_row+0x56>
		return true;
   22eee:	2301      	movs	r3, #1
   22ef0:	e000      	b.n	22ef4 <_eeprom_emulator_is_full_row+0x58>
	} else {
		return false;
   22ef2:	2300      	movs	r3, #0
	}
}
   22ef4:	0018      	movs	r0, r3
   22ef6:	46bd      	mov	sp, r7
   22ef8:	b002      	add	sp, #8
   22efa:	bd80      	pop	{r7, pc}
   22efc:	2000041c 	.word	0x2000041c

00022f00 <_eeprom_emulator_erase_invalid_page>:
 *
 *  \param[in]  pre_phy_page  One physical invalid page
 *  \param[in]  next_phy_page Another physical invalid page
 */
static void _eeprom_emulator_erase_invalid_page(uint16_t pre_phy_page,uint16_t next_phy_page)
{
   22f00:	b580      	push	{r7, lr}
   22f02:	b082      	sub	sp, #8
   22f04:	af00      	add	r7, sp, #0
   22f06:	0002      	movs	r2, r0
   22f08:	1dbb      	adds	r3, r7, #6
   22f0a:	801a      	strh	r2, [r3, #0]
   22f0c:	1d3b      	adds	r3, r7, #4
   22f0e:	1c0a      	adds	r2, r1, #0
   22f10:	801a      	strh	r2, [r3, #0]
 	/* Erase the old/full row*/
	if(_eeprom_emulator_is_full_row(pre_phy_page)) {
   22f12:	1dbb      	adds	r3, r7, #6
   22f14:	881b      	ldrh	r3, [r3, #0]
   22f16:	0018      	movs	r0, r3
   22f18:	4b0c      	ldr	r3, [pc, #48]	; (22f4c <_eeprom_emulator_erase_invalid_page+0x4c>)
   22f1a:	4798      	blx	r3
   22f1c:	1e03      	subs	r3, r0, #0
   22f1e:	d008      	beq.n	22f32 <_eeprom_emulator_erase_invalid_page+0x32>
		 _eeprom_emulator_nvm_erase_row(pre_phy_page/4);
   22f20:	1dbb      	adds	r3, r7, #6
   22f22:	881b      	ldrh	r3, [r3, #0]
   22f24:	089b      	lsrs	r3, r3, #2
   22f26:	b29b      	uxth	r3, r3
   22f28:	b2db      	uxtb	r3, r3
   22f2a:	0018      	movs	r0, r3
   22f2c:	4b08      	ldr	r3, [pc, #32]	; (22f50 <_eeprom_emulator_erase_invalid_page+0x50>)
   22f2e:	4798      	blx	r3
	} else {
		_eeprom_emulator_nvm_erase_row(next_phy_page/4);
	}
}
   22f30:	e007      	b.n	22f42 <_eeprom_emulator_erase_invalid_page+0x42>
		_eeprom_emulator_nvm_erase_row(next_phy_page/4);
   22f32:	1d3b      	adds	r3, r7, #4
   22f34:	881b      	ldrh	r3, [r3, #0]
   22f36:	089b      	lsrs	r3, r3, #2
   22f38:	b29b      	uxth	r3, r3
   22f3a:	b2db      	uxtb	r3, r3
   22f3c:	0018      	movs	r0, r3
   22f3e:	4b04      	ldr	r3, [pc, #16]	; (22f50 <_eeprom_emulator_erase_invalid_page+0x50>)
   22f40:	4798      	blx	r3
}
   22f42:	46c0      	nop			; (mov r8, r8)
   22f44:	46bd      	mov	sp, r7
   22f46:	b002      	add	sp, #8
   22f48:	bd80      	pop	{r7, pc}
   22f4a:	46c0      	nop			; (mov r8, r8)
   22f4c:	00022e9d 	.word	0x00022e9d
   22f50:	00022c7d 	.word	0x00022c7d

00022f54 <_eeprom_emulator_check_logical_page>:
 * \brief Check if there exist rows with same logical pages due to power drop
 *  when writing or erasing page.
 *  when existed same logical page, the old(full) row will be erased.
 */
static void _eeprom_emulator_check_logical_page(void)
{
   22f54:	b580      	push	{r7, lr}
   22f56:	b082      	sub	sp, #8
   22f58:	af00      	add	r7, sp, #0
	uint16_t i = 0, j = 0;
   22f5a:	1dbb      	adds	r3, r7, #6
   22f5c:	2200      	movs	r2, #0
   22f5e:	801a      	strh	r2, [r3, #0]
   22f60:	1d3b      	adds	r3, r7, #4
   22f62:	2200      	movs	r2, #0
   22f64:	801a      	strh	r2, [r3, #0]
	for (i = 0; i < _eeprom_instance.physical_pages; i=i+4) {
   22f66:	1dbb      	adds	r3, r7, #6
   22f68:	2200      	movs	r2, #0
   22f6a:	801a      	strh	r2, [r3, #0]
   22f6c:	e04a      	b.n	23004 <_eeprom_emulator_check_logical_page+0xb0>

		uint16_t pre_logical_page = _eeprom_instance.flash[i].header.logical_page;
   22f6e:	4b2a      	ldr	r3, [pc, #168]	; (23018 <_eeprom_emulator_check_logical_page+0xc4>)
   22f70:	685a      	ldr	r2, [r3, #4]
   22f72:	1dbb      	adds	r3, r7, #6
   22f74:	881b      	ldrh	r3, [r3, #0]
   22f76:	019b      	lsls	r3, r3, #6
   22f78:	18d3      	adds	r3, r2, r3
   22f7a:	781a      	ldrb	r2, [r3, #0]
   22f7c:	1cbb      	adds	r3, r7, #2
   22f7e:	801a      	strh	r2, [r3, #0]
		if( pre_logical_page == EEPROM_INVALID_PAGE_NUMBER) {
   22f80:	1cbb      	adds	r3, r7, #2
   22f82:	881b      	ldrh	r3, [r3, #0]
   22f84:	2bff      	cmp	r3, #255	; 0xff
   22f86:	d037      	beq.n	22ff8 <_eeprom_emulator_check_logical_page+0xa4>
			continue;
		}

		for (j = NVMCTRL_ROW_PAGES+i; j < _eeprom_instance.physical_pages; j=j+4) {
   22f88:	1d3b      	adds	r3, r7, #4
   22f8a:	1dba      	adds	r2, r7, #6
   22f8c:	8812      	ldrh	r2, [r2, #0]
   22f8e:	3204      	adds	r2, #4
   22f90:	801a      	strh	r2, [r3, #0]
   22f92:	e02a      	b.n	22fea <_eeprom_emulator_check_logical_page+0x96>

			if (j == EEPROM_MASTER_PAGE_NUMBER) {
   22f94:	1d3b      	adds	r3, r7, #4
   22f96:	881a      	ldrh	r2, [r3, #0]
   22f98:	4b1f      	ldr	r3, [pc, #124]	; (23018 <_eeprom_emulator_check_logical_page+0xc4>)
   22f9a:	891b      	ldrh	r3, [r3, #8]
   22f9c:	3b01      	subs	r3, #1
   22f9e:	429a      	cmp	r2, r3
   22fa0:	d01b      	beq.n	22fda <_eeprom_emulator_check_logical_page+0x86>
				continue;
			}
			uint16_t next_logical_page = _eeprom_instance.flash[j].header.logical_page;
   22fa2:	4b1d      	ldr	r3, [pc, #116]	; (23018 <_eeprom_emulator_check_logical_page+0xc4>)
   22fa4:	685a      	ldr	r2, [r3, #4]
   22fa6:	1d3b      	adds	r3, r7, #4
   22fa8:	881b      	ldrh	r3, [r3, #0]
   22faa:	019b      	lsls	r3, r3, #6
   22fac:	18d3      	adds	r3, r2, r3
   22fae:	781a      	ldrb	r2, [r3, #0]
   22fb0:	003b      	movs	r3, r7
   22fb2:	801a      	strh	r2, [r3, #0]
			if( next_logical_page == EEPROM_INVALID_PAGE_NUMBER) {
   22fb4:	003b      	movs	r3, r7
   22fb6:	881b      	ldrh	r3, [r3, #0]
   22fb8:	2bff      	cmp	r3, #255	; 0xff
   22fba:	d010      	beq.n	22fde <_eeprom_emulator_check_logical_page+0x8a>
				continue;
			}

			if(pre_logical_page == next_logical_page) {
   22fbc:	1cba      	adds	r2, r7, #2
   22fbe:	003b      	movs	r3, r7
   22fc0:	8812      	ldrh	r2, [r2, #0]
   22fc2:	881b      	ldrh	r3, [r3, #0]
   22fc4:	429a      	cmp	r2, r3
   22fc6:	d10b      	bne.n	22fe0 <_eeprom_emulator_check_logical_page+0x8c>
				/* Found invalid logical page and erase it */
				_eeprom_emulator_erase_invalid_page(i,j);
   22fc8:	1d3b      	adds	r3, r7, #4
   22fca:	881a      	ldrh	r2, [r3, #0]
   22fcc:	1dbb      	adds	r3, r7, #6
   22fce:	881b      	ldrh	r3, [r3, #0]
   22fd0:	0011      	movs	r1, r2
   22fd2:	0018      	movs	r0, r3
   22fd4:	4b11      	ldr	r3, [pc, #68]	; (2301c <_eeprom_emulator_check_logical_page+0xc8>)
   22fd6:	4798      	blx	r3
   22fd8:	e002      	b.n	22fe0 <_eeprom_emulator_check_logical_page+0x8c>
				continue;
   22fda:	46c0      	nop			; (mov r8, r8)
   22fdc:	e000      	b.n	22fe0 <_eeprom_emulator_check_logical_page+0x8c>
				continue;
   22fde:	46c0      	nop			; (mov r8, r8)
		for (j = NVMCTRL_ROW_PAGES+i; j < _eeprom_instance.physical_pages; j=j+4) {
   22fe0:	1d3b      	adds	r3, r7, #4
   22fe2:	1d3a      	adds	r2, r7, #4
   22fe4:	8812      	ldrh	r2, [r2, #0]
   22fe6:	3204      	adds	r2, #4
   22fe8:	801a      	strh	r2, [r3, #0]
   22fea:	4b0b      	ldr	r3, [pc, #44]	; (23018 <_eeprom_emulator_check_logical_page+0xc4>)
   22fec:	891b      	ldrh	r3, [r3, #8]
   22fee:	1d3a      	adds	r2, r7, #4
   22ff0:	8812      	ldrh	r2, [r2, #0]
   22ff2:	429a      	cmp	r2, r3
   22ff4:	d3ce      	bcc.n	22f94 <_eeprom_emulator_check_logical_page+0x40>
   22ff6:	e000      	b.n	22ffa <_eeprom_emulator_check_logical_page+0xa6>
			continue;
   22ff8:	46c0      	nop			; (mov r8, r8)
	for (i = 0; i < _eeprom_instance.physical_pages; i=i+4) {
   22ffa:	1dbb      	adds	r3, r7, #6
   22ffc:	1dba      	adds	r2, r7, #6
   22ffe:	8812      	ldrh	r2, [r2, #0]
   23000:	3204      	adds	r2, #4
   23002:	801a      	strh	r2, [r3, #0]
   23004:	4b04      	ldr	r3, [pc, #16]	; (23018 <_eeprom_emulator_check_logical_page+0xc4>)
   23006:	891b      	ldrh	r3, [r3, #8]
   23008:	1dba      	adds	r2, r7, #6
   2300a:	8812      	ldrh	r2, [r2, #0]
   2300c:	429a      	cmp	r2, r3
   2300e:	d3ae      	bcc.n	22f6e <_eeprom_emulator_check_logical_page+0x1a>
			}
		}
	}
}
   23010:	46c0      	nop			; (mov r8, r8)
   23012:	46bd      	mov	sp, r7
   23014:	b002      	add	sp, #8
   23016:	bd80      	pop	{r7, pc}
   23018:	2000041c 	.word	0x2000041c
   2301c:	00022f01 	.word	0x00022f01

00023020 <_eeprom_emulator_update_page_mapping>:

/**
 * \brief Creates a map in SRAM to translate logical EEPROM pages to physical FLASH pages.
 */
static void _eeprom_emulator_update_page_mapping(void)
{
   23020:	b580      	push	{r7, lr}
   23022:	b084      	sub	sp, #16
   23024:	af00      	add	r7, sp, #0
	/* Check if exists invalid logical page */
	_eeprom_emulator_check_logical_page();
   23026:	4b51      	ldr	r3, [pc, #324]	; (2316c <_eeprom_emulator_update_page_mapping+0x14c>)
   23028:	4798      	blx	r3

	/* Scan through all physical pages, to map physical and logical pages */
	for (uint16_t c = 0; c < _eeprom_instance.physical_pages; c++) {
   2302a:	230e      	movs	r3, #14
   2302c:	18fb      	adds	r3, r7, r3
   2302e:	2200      	movs	r2, #0
   23030:	801a      	strh	r2, [r3, #0]
   23032:	e033      	b.n	2309c <_eeprom_emulator_update_page_mapping+0x7c>
		if (c == EEPROM_MASTER_PAGE_NUMBER) {
   23034:	230e      	movs	r3, #14
   23036:	18fb      	adds	r3, r7, r3
   23038:	881a      	ldrh	r2, [r3, #0]
   2303a:	4b4d      	ldr	r3, [pc, #308]	; (23170 <_eeprom_emulator_update_page_mapping+0x150>)
   2303c:	891b      	ldrh	r3, [r3, #8]
   2303e:	3b01      	subs	r3, #1
   23040:	429a      	cmp	r2, r3
   23042:	d023      	beq.n	2308c <_eeprom_emulator_update_page_mapping+0x6c>
			continue;
		}

		/* Read in the logical page stored in the current physical page */
		uint16_t logical_page = _eeprom_instance.flash[c].header.logical_page;
   23044:	4b4a      	ldr	r3, [pc, #296]	; (23170 <_eeprom_emulator_update_page_mapping+0x150>)
   23046:	685a      	ldr	r2, [r3, #4]
   23048:	230e      	movs	r3, #14
   2304a:	18fb      	adds	r3, r7, r3
   2304c:	881b      	ldrh	r3, [r3, #0]
   2304e:	019b      	lsls	r3, r3, #6
   23050:	18d3      	adds	r3, r2, r3
   23052:	781a      	ldrb	r2, [r3, #0]
   23054:	2308      	movs	r3, #8
   23056:	18fb      	adds	r3, r7, r3
   23058:	801a      	strh	r2, [r3, #0]

		/* If the logical page number is valid, add it to the mapping */
		if ((logical_page != EEPROM_INVALID_PAGE_NUMBER) &&
   2305a:	2308      	movs	r3, #8
   2305c:	18fb      	adds	r3, r7, r3
   2305e:	881b      	ldrh	r3, [r3, #0]
   23060:	2bff      	cmp	r3, #255	; 0xff
   23062:	d014      	beq.n	2308e <_eeprom_emulator_update_page_mapping+0x6e>
				(logical_page < _eeprom_instance.logical_pages)) {
   23064:	4b42      	ldr	r3, [pc, #264]	; (23170 <_eeprom_emulator_update_page_mapping+0x150>)
   23066:	7a9b      	ldrb	r3, [r3, #10]
   23068:	b29b      	uxth	r3, r3
		if ((logical_page != EEPROM_INVALID_PAGE_NUMBER) &&
   2306a:	2208      	movs	r2, #8
   2306c:	18ba      	adds	r2, r7, r2
   2306e:	8812      	ldrh	r2, [r2, #0]
   23070:	429a      	cmp	r2, r3
   23072:	d20c      	bcs.n	2308e <_eeprom_emulator_update_page_mapping+0x6e>
			_eeprom_instance.page_map[logical_page] = c;
   23074:	2308      	movs	r3, #8
   23076:	18fb      	adds	r3, r7, r3
   23078:	881b      	ldrh	r3, [r3, #0]
   2307a:	220e      	movs	r2, #14
   2307c:	18ba      	adds	r2, r7, r2
   2307e:	8812      	ldrh	r2, [r2, #0]
   23080:	b2d1      	uxtb	r1, r2
   23082:	4a3b      	ldr	r2, [pc, #236]	; (23170 <_eeprom_emulator_update_page_mapping+0x150>)
   23084:	18d3      	adds	r3, r2, r3
   23086:	1c0a      	adds	r2, r1, #0
   23088:	72da      	strb	r2, [r3, #11]
   2308a:	e000      	b.n	2308e <_eeprom_emulator_update_page_mapping+0x6e>
			continue;
   2308c:	46c0      	nop			; (mov r8, r8)
	for (uint16_t c = 0; c < _eeprom_instance.physical_pages; c++) {
   2308e:	230e      	movs	r3, #14
   23090:	18fb      	adds	r3, r7, r3
   23092:	881a      	ldrh	r2, [r3, #0]
   23094:	230e      	movs	r3, #14
   23096:	18fb      	adds	r3, r7, r3
   23098:	3201      	adds	r2, #1
   2309a:	801a      	strh	r2, [r3, #0]
   2309c:	4b34      	ldr	r3, [pc, #208]	; (23170 <_eeprom_emulator_update_page_mapping+0x150>)
   2309e:	891b      	ldrh	r3, [r3, #8]
   230a0:	220e      	movs	r2, #14
   230a2:	18ba      	adds	r2, r7, r2
   230a4:	8812      	ldrh	r2, [r2, #0]
   230a6:	429a      	cmp	r2, r3
   230a8:	d3c4      	bcc.n	23034 <_eeprom_emulator_update_page_mapping+0x14>
		}
	}

	/* Use an invalid page number as the spare row until a valid one has been
	 * found */
	_eeprom_instance.spare_row = EEPROM_INVALID_ROW_NUMBER;
   230aa:	4b31      	ldr	r3, [pc, #196]	; (23170 <_eeprom_emulator_update_page_mapping+0x150>)
   230ac:	2287      	movs	r2, #135	; 0x87
   230ae:	213f      	movs	r1, #63	; 0x3f
   230b0:	5499      	strb	r1, [r3, r2]

	/* Scan through all physical rows, to find an erased row to use as the
	 * spare */
	for (uint16_t c = 0; c < (_eeprom_instance.physical_pages / NVMCTRL_ROW_PAGES); c++) {
   230b2:	230c      	movs	r3, #12
   230b4:	18fb      	adds	r3, r7, r3
   230b6:	2200      	movs	r2, #0
   230b8:	801a      	strh	r2, [r3, #0]
   230ba:	e04a      	b.n	23152 <_eeprom_emulator_update_page_mapping+0x132>
		bool spare_row_found = true;
   230bc:	230b      	movs	r3, #11
   230be:	18fb      	adds	r3, r7, r3
   230c0:	2201      	movs	r2, #1
   230c2:	701a      	strb	r2, [r3, #0]

		/* Look through pages within the row to see if they are all erased */
		for (uint8_t c2 = 0; c2 < NVMCTRL_ROW_PAGES; c2++) {
   230c4:	230a      	movs	r3, #10
   230c6:	18fb      	adds	r3, r7, r3
   230c8:	2200      	movs	r2, #0
   230ca:	701a      	strb	r2, [r3, #0]
   230cc:	e028      	b.n	23120 <_eeprom_emulator_update_page_mapping+0x100>
			uint16_t physical_page = (c * NVMCTRL_ROW_PAGES) + c2;
   230ce:	230c      	movs	r3, #12
   230d0:	18fb      	adds	r3, r7, r3
   230d2:	881b      	ldrh	r3, [r3, #0]
   230d4:	009b      	lsls	r3, r3, #2
   230d6:	b299      	uxth	r1, r3
   230d8:	230a      	movs	r3, #10
   230da:	18fb      	adds	r3, r7, r3
   230dc:	781b      	ldrb	r3, [r3, #0]
   230de:	b29a      	uxth	r2, r3
   230e0:	1dbb      	adds	r3, r7, #6
   230e2:	188a      	adds	r2, r1, r2
   230e4:	801a      	strh	r2, [r3, #0]

			if (physical_page == EEPROM_MASTER_PAGE_NUMBER) {
   230e6:	1dbb      	adds	r3, r7, #6
   230e8:	881a      	ldrh	r2, [r3, #0]
   230ea:	4b21      	ldr	r3, [pc, #132]	; (23170 <_eeprom_emulator_update_page_mapping+0x150>)
   230ec:	891b      	ldrh	r3, [r3, #8]
   230ee:	3b01      	subs	r3, #1
   230f0:	429a      	cmp	r2, r3
   230f2:	d00d      	beq.n	23110 <_eeprom_emulator_update_page_mapping+0xf0>
				continue;
			}

			if (_eeprom_instance.flash[physical_page].header.logical_page !=
   230f4:	4b1e      	ldr	r3, [pc, #120]	; (23170 <_eeprom_emulator_update_page_mapping+0x150>)
   230f6:	685a      	ldr	r2, [r3, #4]
   230f8:	1dbb      	adds	r3, r7, #6
   230fa:	881b      	ldrh	r3, [r3, #0]
   230fc:	019b      	lsls	r3, r3, #6
   230fe:	18d3      	adds	r3, r2, r3
   23100:	781b      	ldrb	r3, [r3, #0]
   23102:	2bff      	cmp	r3, #255	; 0xff
   23104:	d005      	beq.n	23112 <_eeprom_emulator_update_page_mapping+0xf2>
					EEPROM_INVALID_PAGE_NUMBER) {
				spare_row_found = false;
   23106:	230b      	movs	r3, #11
   23108:	18fb      	adds	r3, r7, r3
   2310a:	2200      	movs	r2, #0
   2310c:	701a      	strb	r2, [r3, #0]
   2310e:	e000      	b.n	23112 <_eeprom_emulator_update_page_mapping+0xf2>
				continue;
   23110:	46c0      	nop			; (mov r8, r8)
		for (uint8_t c2 = 0; c2 < NVMCTRL_ROW_PAGES; c2++) {
   23112:	230a      	movs	r3, #10
   23114:	18fb      	adds	r3, r7, r3
   23116:	781a      	ldrb	r2, [r3, #0]
   23118:	230a      	movs	r3, #10
   2311a:	18fb      	adds	r3, r7, r3
   2311c:	3201      	adds	r2, #1
   2311e:	701a      	strb	r2, [r3, #0]
   23120:	230a      	movs	r3, #10
   23122:	18fb      	adds	r3, r7, r3
   23124:	781b      	ldrb	r3, [r3, #0]
   23126:	2b03      	cmp	r3, #3
   23128:	d9d1      	bls.n	230ce <_eeprom_emulator_update_page_mapping+0xae>
			}
		}

		/* If we've now found the spare row, store it and abort the search */
		if (spare_row_found == true) {
   2312a:	230b      	movs	r3, #11
   2312c:	18fb      	adds	r3, r7, r3
   2312e:	781b      	ldrb	r3, [r3, #0]
   23130:	2b00      	cmp	r3, #0
   23132:	d007      	beq.n	23144 <_eeprom_emulator_update_page_mapping+0x124>
			_eeprom_instance.spare_row = c;
   23134:	230c      	movs	r3, #12
   23136:	18fb      	adds	r3, r7, r3
   23138:	881b      	ldrh	r3, [r3, #0]
   2313a:	b2d9      	uxtb	r1, r3
   2313c:	4b0c      	ldr	r3, [pc, #48]	; (23170 <_eeprom_emulator_update_page_mapping+0x150>)
   2313e:	2287      	movs	r2, #135	; 0x87
   23140:	5499      	strb	r1, [r3, r2]
			break;
   23142:	e00f      	b.n	23164 <_eeprom_emulator_update_page_mapping+0x144>
	for (uint16_t c = 0; c < (_eeprom_instance.physical_pages / NVMCTRL_ROW_PAGES); c++) {
   23144:	230c      	movs	r3, #12
   23146:	18fb      	adds	r3, r7, r3
   23148:	881a      	ldrh	r2, [r3, #0]
   2314a:	230c      	movs	r3, #12
   2314c:	18fb      	adds	r3, r7, r3
   2314e:	3201      	adds	r2, #1
   23150:	801a      	strh	r2, [r3, #0]
   23152:	4b07      	ldr	r3, [pc, #28]	; (23170 <_eeprom_emulator_update_page_mapping+0x150>)
   23154:	891b      	ldrh	r3, [r3, #8]
   23156:	089b      	lsrs	r3, r3, #2
   23158:	b29b      	uxth	r3, r3
   2315a:	220c      	movs	r2, #12
   2315c:	18ba      	adds	r2, r7, r2
   2315e:	8812      	ldrh	r2, [r2, #0]
   23160:	429a      	cmp	r2, r3
   23162:	d3ab      	bcc.n	230bc <_eeprom_emulator_update_page_mapping+0x9c>
		}
	}
}
   23164:	46c0      	nop			; (mov r8, r8)
   23166:	46bd      	mov	sp, r7
   23168:	b004      	add	sp, #16
   2316a:	bd80      	pop	{r7, pc}
   2316c:	00022f55 	.word	0x00022f55
   23170:	2000041c 	.word	0x2000041c

00023174 <_eeprom_emulator_is_page_free_on_row>:
 * \retval \c false  If the specified row was full and needs an erase
 */
static bool _eeprom_emulator_is_page_free_on_row(
		const uint8_t start_physical_page,
		uint8_t *const free_physical_page)
{
   23174:	b580      	push	{r7, lr}
   23176:	b084      	sub	sp, #16
   23178:	af00      	add	r7, sp, #0
   2317a:	0002      	movs	r2, r0
   2317c:	6039      	str	r1, [r7, #0]
   2317e:	1dfb      	adds	r3, r7, #7
   23180:	701a      	strb	r2, [r3, #0]
	/* Convert physical page number to a FLASH row and page within the row */
	uint8_t row         = (start_physical_page / NVMCTRL_ROW_PAGES);
   23182:	230e      	movs	r3, #14
   23184:	18fb      	adds	r3, r7, r3
   23186:	1dfa      	adds	r2, r7, #7
   23188:	7812      	ldrb	r2, [r2, #0]
   2318a:	0892      	lsrs	r2, r2, #2
   2318c:	701a      	strb	r2, [r3, #0]
	uint8_t page_in_row = (start_physical_page % NVMCTRL_ROW_PAGES);
   2318e:	230d      	movs	r3, #13
   23190:	18fb      	adds	r3, r7, r3
   23192:	1dfa      	adds	r2, r7, #7
   23194:	7812      	ldrb	r2, [r2, #0]
   23196:	2103      	movs	r1, #3
   23198:	400a      	ands	r2, r1
   2319a:	701a      	strb	r2, [r3, #0]

	/* Look in the current row for a page that isn't currently used */
	for (uint8_t c = page_in_row; c < NVMCTRL_ROW_PAGES; c++) {
   2319c:	230f      	movs	r3, #15
   2319e:	18fb      	adds	r3, r7, r3
   231a0:	220d      	movs	r2, #13
   231a2:	18ba      	adds	r2, r7, r2
   231a4:	7812      	ldrb	r2, [r2, #0]
   231a6:	701a      	strb	r2, [r3, #0]
   231a8:	e023      	b.n	231f2 <_eeprom_emulator_is_page_free_on_row+0x7e>
		/* Calculate the page number for the current page being examined */
		uint8_t page = (row * NVMCTRL_ROW_PAGES) + c;
   231aa:	230e      	movs	r3, #14
   231ac:	18fb      	adds	r3, r7, r3
   231ae:	781b      	ldrb	r3, [r3, #0]
   231b0:	009b      	lsls	r3, r3, #2
   231b2:	b2d9      	uxtb	r1, r3
   231b4:	230c      	movs	r3, #12
   231b6:	18fb      	adds	r3, r7, r3
   231b8:	220f      	movs	r2, #15
   231ba:	18ba      	adds	r2, r7, r2
   231bc:	7812      	ldrb	r2, [r2, #0]
   231be:	188a      	adds	r2, r1, r2
   231c0:	701a      	strb	r2, [r3, #0]

		/* If the page is free, pass it to the caller and exit */
		if (_eeprom_instance.flash[page].header.logical_page ==
   231c2:	4b11      	ldr	r3, [pc, #68]	; (23208 <_eeprom_emulator_is_page_free_on_row+0x94>)
   231c4:	685a      	ldr	r2, [r3, #4]
   231c6:	230c      	movs	r3, #12
   231c8:	18fb      	adds	r3, r7, r3
   231ca:	781b      	ldrb	r3, [r3, #0]
   231cc:	019b      	lsls	r3, r3, #6
   231ce:	18d3      	adds	r3, r2, r3
   231d0:	781b      	ldrb	r3, [r3, #0]
   231d2:	2bff      	cmp	r3, #255	; 0xff
   231d4:	d106      	bne.n	231e4 <_eeprom_emulator_is_page_free_on_row+0x70>
				EEPROM_INVALID_PAGE_NUMBER) {
			*free_physical_page = page;
   231d6:	683b      	ldr	r3, [r7, #0]
   231d8:	220c      	movs	r2, #12
   231da:	18ba      	adds	r2, r7, r2
   231dc:	7812      	ldrb	r2, [r2, #0]
   231de:	701a      	strb	r2, [r3, #0]
			return true;
   231e0:	2301      	movs	r3, #1
   231e2:	e00c      	b.n	231fe <_eeprom_emulator_is_page_free_on_row+0x8a>
	for (uint8_t c = page_in_row; c < NVMCTRL_ROW_PAGES; c++) {
   231e4:	230f      	movs	r3, #15
   231e6:	18fb      	adds	r3, r7, r3
   231e8:	781a      	ldrb	r2, [r3, #0]
   231ea:	230f      	movs	r3, #15
   231ec:	18fb      	adds	r3, r7, r3
   231ee:	3201      	adds	r2, #1
   231f0:	701a      	strb	r2, [r3, #0]
   231f2:	230f      	movs	r3, #15
   231f4:	18fb      	adds	r3, r7, r3
   231f6:	781b      	ldrb	r3, [r3, #0]
   231f8:	2b03      	cmp	r3, #3
   231fa:	d9d6      	bls.n	231aa <_eeprom_emulator_is_page_free_on_row+0x36>
		}
	}

	/* No free page in the current row was found */
	return false;
   231fc:	2300      	movs	r3, #0
}
   231fe:	0018      	movs	r0, r3
   23200:	46bd      	mov	sp, r7
   23202:	b004      	add	sp, #16
   23204:	bd80      	pop	{r7, pc}
   23206:	46c0      	nop			; (mov r8, r8)
   23208:	2000041c 	.word	0x2000041c

0002320c <_eeprom_emulator_move_data_to_spare>:
 */
static enum status_code _eeprom_emulator_move_data_to_spare(
		const uint8_t row_number,
		const uint8_t logical_page,
		const uint8_t *const data)
{
   2320c:	b580      	push	{r7, lr}
   2320e:	b086      	sub	sp, #24
   23210:	af00      	add	r7, sp, #0
   23212:	603a      	str	r2, [r7, #0]
   23214:	1dfb      	adds	r3, r7, #7
   23216:	1c02      	adds	r2, r0, #0
   23218:	701a      	strb	r2, [r3, #0]
   2321a:	1dbb      	adds	r3, r7, #6
   2321c:	1c0a      	adds	r2, r1, #0
   2321e:	701a      	strb	r2, [r3, #0]
	enum status_code error_code = STATUS_OK;
   23220:	2314      	movs	r3, #20
   23222:	18fb      	adds	r3, r7, r3
   23224:	2200      	movs	r2, #0
   23226:	701a      	strb	r2, [r3, #0]
		uint8_t logical_page;
		uint8_t physical_page;
	} page_trans[2];

	const struct _eeprom_page *row_data =
			(struct _eeprom_page *)&_eeprom_instance.flash[row_number * NVMCTRL_ROW_PAGES];
   23228:	4b69      	ldr	r3, [pc, #420]	; (233d0 <_eeprom_emulator_move_data_to_spare+0x1c4>)
   2322a:	685b      	ldr	r3, [r3, #4]
   2322c:	1dfa      	adds	r2, r7, #7
   2322e:	7812      	ldrb	r2, [r2, #0]
   23230:	0212      	lsls	r2, r2, #8
	const struct _eeprom_page *row_data =
   23232:	189b      	adds	r3, r3, r2
   23234:	613b      	str	r3, [r7, #16]

	/* There should be two logical pages of data in each row, possibly with
	 * multiple revisions (right-most version is the newest). Start by assuming
	 * the left-most two pages contain the newest page revisions. */
	page_trans[0].logical_page  = row_data[0].header.logical_page;
   23236:	693b      	ldr	r3, [r7, #16]
   23238:	781a      	ldrb	r2, [r3, #0]
   2323a:	2308      	movs	r3, #8
   2323c:	18fb      	adds	r3, r7, r3
   2323e:	701a      	strb	r2, [r3, #0]
	page_trans[0].physical_page = (row_number * NVMCTRL_ROW_PAGES);
   23240:	1dfb      	adds	r3, r7, #7
   23242:	781b      	ldrb	r3, [r3, #0]
   23244:	009b      	lsls	r3, r3, #2
   23246:	b2da      	uxtb	r2, r3
   23248:	2308      	movs	r3, #8
   2324a:	18fb      	adds	r3, r7, r3
   2324c:	705a      	strb	r2, [r3, #1]

	page_trans[1].logical_page  = row_data[1].header.logical_page;
   2324e:	693b      	ldr	r3, [r7, #16]
   23250:	3340      	adds	r3, #64	; 0x40
   23252:	781a      	ldrb	r2, [r3, #0]
   23254:	2308      	movs	r3, #8
   23256:	18fb      	adds	r3, r7, r3
   23258:	709a      	strb	r2, [r3, #2]
	page_trans[1].physical_page = (row_number * NVMCTRL_ROW_PAGES) + 1;
   2325a:	1dfb      	adds	r3, r7, #7
   2325c:	781b      	ldrb	r3, [r3, #0]
   2325e:	009b      	lsls	r3, r3, #2
   23260:	b2db      	uxtb	r3, r3
   23262:	3301      	adds	r3, #1
   23264:	b2da      	uxtb	r2, r3
   23266:	2308      	movs	r3, #8
   23268:	18fb      	adds	r3, r7, r3
   2326a:	70da      	strb	r2, [r3, #3]

	/* Look for newer revisions of the two logical pages stored in the row */
	for (uint8_t c = 0; c < 2; c++) {
   2326c:	2317      	movs	r3, #23
   2326e:	18fb      	adds	r3, r7, r3
   23270:	2200      	movs	r2, #0
   23272:	701a      	strb	r2, [r3, #0]
   23274:	e03a      	b.n	232ec <_eeprom_emulator_move_data_to_spare+0xe0>
		/* Look through the remaining pages in the row for any newer revisions */
		for (uint8_t c2 = 2; c2 < NVMCTRL_ROW_PAGES; c2++) {
   23276:	2316      	movs	r3, #22
   23278:	18fb      	adds	r3, r7, r3
   2327a:	2202      	movs	r2, #2
   2327c:	701a      	strb	r2, [r3, #0]
   2327e:	e029      	b.n	232d4 <_eeprom_emulator_move_data_to_spare+0xc8>
			if (page_trans[c].logical_page == row_data[c2].header.logical_page) {
   23280:	2317      	movs	r3, #23
   23282:	18fb      	adds	r3, r7, r3
   23284:	781a      	ldrb	r2, [r3, #0]
   23286:	2308      	movs	r3, #8
   23288:	18fb      	adds	r3, r7, r3
   2328a:	0052      	lsls	r2, r2, #1
   2328c:	5cd2      	ldrb	r2, [r2, r3]
   2328e:	2316      	movs	r3, #22
   23290:	18fb      	adds	r3, r7, r3
   23292:	781b      	ldrb	r3, [r3, #0]
   23294:	019b      	lsls	r3, r3, #6
   23296:	6939      	ldr	r1, [r7, #16]
   23298:	18cb      	adds	r3, r1, r3
   2329a:	781b      	ldrb	r3, [r3, #0]
   2329c:	429a      	cmp	r2, r3
   2329e:	d112      	bne.n	232c6 <_eeprom_emulator_move_data_to_spare+0xba>
				page_trans[c].physical_page =
   232a0:	2317      	movs	r3, #23
   232a2:	18fb      	adds	r3, r7, r3
   232a4:	781b      	ldrb	r3, [r3, #0]
						(row_number * NVMCTRL_ROW_PAGES) + c2;
   232a6:	1dfa      	adds	r2, r7, #7
   232a8:	7812      	ldrb	r2, [r2, #0]
   232aa:	0092      	lsls	r2, r2, #2
   232ac:	b2d1      	uxtb	r1, r2
   232ae:	2216      	movs	r2, #22
   232b0:	18ba      	adds	r2, r7, r2
   232b2:	7812      	ldrb	r2, [r2, #0]
   232b4:	188a      	adds	r2, r1, r2
   232b6:	b2d1      	uxtb	r1, r2
				page_trans[c].physical_page =
   232b8:	2208      	movs	r2, #8
   232ba:	18ba      	adds	r2, r7, r2
   232bc:	005b      	lsls	r3, r3, #1
   232be:	18d3      	adds	r3, r2, r3
   232c0:	3301      	adds	r3, #1
   232c2:	1c0a      	adds	r2, r1, #0
   232c4:	701a      	strb	r2, [r3, #0]
		for (uint8_t c2 = 2; c2 < NVMCTRL_ROW_PAGES; c2++) {
   232c6:	2316      	movs	r3, #22
   232c8:	18fb      	adds	r3, r7, r3
   232ca:	781a      	ldrb	r2, [r3, #0]
   232cc:	2316      	movs	r3, #22
   232ce:	18fb      	adds	r3, r7, r3
   232d0:	3201      	adds	r2, #1
   232d2:	701a      	strb	r2, [r3, #0]
   232d4:	2316      	movs	r3, #22
   232d6:	18fb      	adds	r3, r7, r3
   232d8:	781b      	ldrb	r3, [r3, #0]
   232da:	2b03      	cmp	r3, #3
   232dc:	d9d0      	bls.n	23280 <_eeprom_emulator_move_data_to_spare+0x74>
	for (uint8_t c = 0; c < 2; c++) {
   232de:	2317      	movs	r3, #23
   232e0:	18fb      	adds	r3, r7, r3
   232e2:	781a      	ldrb	r2, [r3, #0]
   232e4:	2317      	movs	r3, #23
   232e6:	18fb      	adds	r3, r7, r3
   232e8:	3201      	adds	r2, #1
   232ea:	701a      	strb	r2, [r3, #0]
   232ec:	2317      	movs	r3, #23
   232ee:	18fb      	adds	r3, r7, r3
   232f0:	781b      	ldrb	r3, [r3, #0]
   232f2:	2b01      	cmp	r3, #1
   232f4:	d9bf      	bls.n	23276 <_eeprom_emulator_move_data_to_spare+0x6a>
			}
		}
	}

	/* Need to move both saved logical pages stored in the same row */
	for (uint8_t c = 0; c < 2; c++) {
   232f6:	2315      	movs	r3, #21
   232f8:	18fb      	adds	r3, r7, r3
   232fa:	2200      	movs	r2, #0
   232fc:	701a      	strb	r2, [r3, #0]
   232fe:	e051      	b.n	233a4 <_eeprom_emulator_move_data_to_spare+0x198>
		/* Find the physical page index for the new spare row pages */
		uint32_t new_page =
				((_eeprom_instance.spare_row * NVMCTRL_ROW_PAGES) + c);
   23300:	4b33      	ldr	r3, [pc, #204]	; (233d0 <_eeprom_emulator_move_data_to_spare+0x1c4>)
   23302:	2287      	movs	r2, #135	; 0x87
   23304:	5c9b      	ldrb	r3, [r3, r2]
   23306:	009a      	lsls	r2, r3, #2
   23308:	2315      	movs	r3, #21
   2330a:	18fb      	adds	r3, r7, r3
   2330c:	781b      	ldrb	r3, [r3, #0]
   2330e:	18d3      	adds	r3, r2, r3
		uint32_t new_page =
   23310:	60fb      	str	r3, [r7, #12]

		/* Commit any cached data to physical non-volatile memory */
		eeprom_emulator_commit_page_buffer();
   23312:	4b30      	ldr	r3, [pc, #192]	; (233d4 <_eeprom_emulator_move_data_to_spare+0x1c8>)
   23314:	4798      	blx	r3

		/* Check if we we are looking at the page the calling function wishes
		 * to change during the move operation */
		if (logical_page == page_trans[c].logical_page) {
   23316:	2315      	movs	r3, #21
   23318:	18fb      	adds	r3, r7, r3
   2331a:	781a      	ldrb	r2, [r3, #0]
   2331c:	2308      	movs	r3, #8
   2331e:	18fb      	adds	r3, r7, r3
   23320:	0052      	lsls	r2, r2, #1
   23322:	5cd3      	ldrb	r3, [r2, r3]
   23324:	1dba      	adds	r2, r7, #6
   23326:	7812      	ldrb	r2, [r2, #0]
   23328:	429a      	cmp	r2, r3
   2332a:	d10d      	bne.n	23348 <_eeprom_emulator_move_data_to_spare+0x13c>
			/* Fill out new (updated) logical page's header in the cache */
			_eeprom_instance.cache.header.logical_page = logical_page;
   2332c:	4b28      	ldr	r3, [pc, #160]	; (233d0 <_eeprom_emulator_move_data_to_spare+0x1c4>)
   2332e:	1dba      	adds	r2, r7, #6
   23330:	2188      	movs	r1, #136	; 0x88
   23332:	7812      	ldrb	r2, [r2, #0]
   23334:	545a      	strb	r2, [r3, r1]

			/* Write data to SRAM cache */
			memcpy(_eeprom_instance.cache.data, data, EEPROM_PAGE_SIZE);
   23336:	4b26      	ldr	r3, [pc, #152]	; (233d0 <_eeprom_emulator_move_data_to_spare+0x1c4>)
   23338:	228c      	movs	r2, #140	; 0x8c
   2333a:	6839      	ldr	r1, [r7, #0]
   2333c:	189b      	adds	r3, r3, r2
   2333e:	223c      	movs	r2, #60	; 0x3c
   23340:	0018      	movs	r0, r3
   23342:	4b25      	ldr	r3, [pc, #148]	; (233d8 <_eeprom_emulator_move_data_to_spare+0x1cc>)
   23344:	4798      	blx	r3
   23346:	e00e      	b.n	23366 <_eeprom_emulator_move_data_to_spare+0x15a>
		} else {
			/* Copy existing EEPROM page to cache buffer wholesale */
			_eeprom_emulator_nvm_read_page(
					page_trans[c].physical_page, &_eeprom_instance.cache);
   23348:	2315      	movs	r3, #21
   2334a:	18fb      	adds	r3, r7, r3
   2334c:	781b      	ldrb	r3, [r3, #0]
   2334e:	2208      	movs	r2, #8
   23350:	18ba      	adds	r2, r7, r2
   23352:	005b      	lsls	r3, r3, #1
   23354:	18d3      	adds	r3, r2, r3
   23356:	3301      	adds	r3, #1
   23358:	781b      	ldrb	r3, [r3, #0]
			_eeprom_emulator_nvm_read_page(
   2335a:	b29b      	uxth	r3, r3
   2335c:	4a1f      	ldr	r2, [pc, #124]	; (233dc <_eeprom_emulator_move_data_to_spare+0x1d0>)
   2335e:	0011      	movs	r1, r2
   23360:	0018      	movs	r0, r3
   23362:	4b1f      	ldr	r3, [pc, #124]	; (233e0 <_eeprom_emulator_move_data_to_spare+0x1d4>)
   23364:	4798      	blx	r3
		}

		/* Fill the physical NVM buffer with the new data so that it can be
		 * quickly committed in the future if needed due to a low power
		 * condition */
		_eeprom_emulator_nvm_fill_cache(new_page, &_eeprom_instance.cache);
   23366:	68fb      	ldr	r3, [r7, #12]
   23368:	b29b      	uxth	r3, r3
   2336a:	4a1c      	ldr	r2, [pc, #112]	; (233dc <_eeprom_emulator_move_data_to_spare+0x1d0>)
   2336c:	0011      	movs	r1, r2
   2336e:	0018      	movs	r0, r3
   23370:	4b1c      	ldr	r3, [pc, #112]	; (233e4 <_eeprom_emulator_move_data_to_spare+0x1d8>)
   23372:	4798      	blx	r3

		/* Update the page map with the new page location and indicate that
		 * the cache now holds new data */
		_eeprom_instance.page_map[page_trans[c].logical_page] = new_page;
   23374:	2315      	movs	r3, #21
   23376:	18fb      	adds	r3, r7, r3
   23378:	781a      	ldrb	r2, [r3, #0]
   2337a:	2308      	movs	r3, #8
   2337c:	18fb      	adds	r3, r7, r3
   2337e:	0052      	lsls	r2, r2, #1
   23380:	5cd3      	ldrb	r3, [r2, r3]
   23382:	0019      	movs	r1, r3
   23384:	68fb      	ldr	r3, [r7, #12]
   23386:	b2da      	uxtb	r2, r3
   23388:	4b11      	ldr	r3, [pc, #68]	; (233d0 <_eeprom_emulator_move_data_to_spare+0x1c4>)
   2338a:	185b      	adds	r3, r3, r1
   2338c:	72da      	strb	r2, [r3, #11]
		_eeprom_instance.cache_active = true;
   2338e:	4b10      	ldr	r3, [pc, #64]	; (233d0 <_eeprom_emulator_move_data_to_spare+0x1c4>)
   23390:	22c8      	movs	r2, #200	; 0xc8
   23392:	2101      	movs	r1, #1
   23394:	5499      	strb	r1, [r3, r2]
	for (uint8_t c = 0; c < 2; c++) {
   23396:	2315      	movs	r3, #21
   23398:	18fb      	adds	r3, r7, r3
   2339a:	781a      	ldrb	r2, [r3, #0]
   2339c:	2315      	movs	r3, #21
   2339e:	18fb      	adds	r3, r7, r3
   233a0:	3201      	adds	r2, #1
   233a2:	701a      	strb	r2, [r3, #0]
   233a4:	2315      	movs	r3, #21
   233a6:	18fb      	adds	r3, r7, r3
   233a8:	781b      	ldrb	r3, [r3, #0]
   233aa:	2b01      	cmp	r3, #1
   233ac:	d9a8      	bls.n	23300 <_eeprom_emulator_move_data_to_spare+0xf4>
	}

	/* Erase the row that was moved and set it as the new spare row */
	_eeprom_emulator_nvm_erase_row(row_number);
   233ae:	1dfb      	adds	r3, r7, #7
   233b0:	781b      	ldrb	r3, [r3, #0]
   233b2:	0018      	movs	r0, r3
   233b4:	4b0c      	ldr	r3, [pc, #48]	; (233e8 <_eeprom_emulator_move_data_to_spare+0x1dc>)
   233b6:	4798      	blx	r3

	/* Keep the index of the new spare row */
	_eeprom_instance.spare_row = row_number;
   233b8:	4b05      	ldr	r3, [pc, #20]	; (233d0 <_eeprom_emulator_move_data_to_spare+0x1c4>)
   233ba:	1dfa      	adds	r2, r7, #7
   233bc:	2187      	movs	r1, #135	; 0x87
   233be:	7812      	ldrb	r2, [r2, #0]
   233c0:	545a      	strb	r2, [r3, r1]

	return error_code;
   233c2:	2314      	movs	r3, #20
   233c4:	18fb      	adds	r3, r7, r3
   233c6:	781b      	ldrb	r3, [r3, #0]
}
   233c8:	0018      	movs	r0, r3
   233ca:	46bd      	mov	sp, r7
   233cc:	b006      	add	sp, #24
   233ce:	bd80      	pop	{r7, pc}
   233d0:	2000041c 	.word	0x2000041c
   233d4:	00023809 	.word	0x00023809
   233d8:	000289ad 	.word	0x000289ad
   233dc:	200004a4 	.word	0x200004a4
   233e0:	00022d61 	.word	0x00022d61
   233e4:	00022cc5 	.word	0x00022cc5
   233e8:	00022c7d 	.word	0x00022c7d

000233ec <_eeprom_emulator_create_master_page>:
 *
 * Creates a new master page in emulated EEPROM, giving information on the
 * emulator used to store the EEPROM data.
 */
static void _eeprom_emulator_create_master_page(void)
{
   233ec:	b590      	push	{r4, r7, lr}
   233ee:	b095      	sub	sp, #84	; 0x54
   233f0:	af00      	add	r7, sp, #0
	const uint32_t magic_key[] = EEPROM_MAGIC_KEY;
   233f2:	2340      	movs	r3, #64	; 0x40
   233f4:	18fb      	adds	r3, r7, r3
   233f6:	4a29      	ldr	r2, [pc, #164]	; (2349c <_eeprom_emulator_create_master_page+0xb0>)
   233f8:	ca13      	ldmia	r2!, {r0, r1, r4}
   233fa:	c313      	stmia	r3!, {r0, r1, r4}

	struct _eeprom_master_page master_page;
	memset(&master_page, 0xFF, sizeof(master_page));
   233fc:	003b      	movs	r3, r7
   233fe:	2240      	movs	r2, #64	; 0x40
   23400:	21ff      	movs	r1, #255	; 0xff
   23402:	0018      	movs	r0, r3
   23404:	4b26      	ldr	r3, [pc, #152]	; (234a0 <_eeprom_emulator_create_master_page+0xb4>)
   23406:	4798      	blx	r3

	/* Fill out the magic key header to indicate an initialized master page */
	for (uint8_t c = 0; c < EEPROM_MAGIC_KEY_COUNT; c++) {
   23408:	234f      	movs	r3, #79	; 0x4f
   2340a:	18fb      	adds	r3, r7, r3
   2340c:	2200      	movs	r2, #0
   2340e:	701a      	strb	r2, [r3, #0]
   23410:	e013      	b.n	2343a <_eeprom_emulator_create_master_page+0x4e>
		master_page.magic_key[c] = magic_key[c];
   23412:	234f      	movs	r3, #79	; 0x4f
   23414:	18fb      	adds	r3, r7, r3
   23416:	781a      	ldrb	r2, [r3, #0]
   23418:	234f      	movs	r3, #79	; 0x4f
   2341a:	18fb      	adds	r3, r7, r3
   2341c:	7819      	ldrb	r1, [r3, #0]
   2341e:	2340      	movs	r3, #64	; 0x40
   23420:	18fb      	adds	r3, r7, r3
   23422:	0089      	lsls	r1, r1, #2
   23424:	58c9      	ldr	r1, [r1, r3]
   23426:	003b      	movs	r3, r7
   23428:	0092      	lsls	r2, r2, #2
   2342a:	50d1      	str	r1, [r2, r3]
	for (uint8_t c = 0; c < EEPROM_MAGIC_KEY_COUNT; c++) {
   2342c:	234f      	movs	r3, #79	; 0x4f
   2342e:	18fb      	adds	r3, r7, r3
   23430:	781a      	ldrb	r2, [r3, #0]
   23432:	234f      	movs	r3, #79	; 0x4f
   23434:	18fb      	adds	r3, r7, r3
   23436:	3201      	adds	r2, #1
   23438:	701a      	strb	r2, [r3, #0]
   2343a:	234f      	movs	r3, #79	; 0x4f
   2343c:	18fb      	adds	r3, r7, r3
   2343e:	781b      	ldrb	r3, [r3, #0]
   23440:	2b02      	cmp	r3, #2
   23442:	d9e6      	bls.n	23412 <_eeprom_emulator_create_master_page+0x26>
	}

	/* Update master header with version information of this emulator */
	master_page.emulator_id   = EEPROM_EMULATOR_ID;
   23444:	003b      	movs	r3, r7
   23446:	2201      	movs	r2, #1
   23448:	73da      	strb	r2, [r3, #15]
	master_page.major_version = EEPROM_MAJOR_VERSION;
   2344a:	003b      	movs	r3, r7
   2344c:	2201      	movs	r2, #1
   2344e:	731a      	strb	r2, [r3, #12]
	master_page.minor_version = EEPROM_MINOR_VERSION;
   23450:	003b      	movs	r3, r7
   23452:	2200      	movs	r2, #0
   23454:	735a      	strb	r2, [r3, #13]
	master_page.revision      = EEPROM_REVISION;
   23456:	003b      	movs	r3, r7
   23458:	2200      	movs	r2, #0
   2345a:	739a      	strb	r2, [r3, #14]

	_eeprom_emulator_nvm_erase_row(
			EEPROM_MASTER_PAGE_NUMBER / NVMCTRL_ROW_PAGES);
   2345c:	4b11      	ldr	r3, [pc, #68]	; (234a4 <_eeprom_emulator_create_master_page+0xb8>)
   2345e:	891b      	ldrh	r3, [r3, #8]
   23460:	3b01      	subs	r3, #1
   23462:	2b00      	cmp	r3, #0
   23464:	da00      	bge.n	23468 <_eeprom_emulator_create_master_page+0x7c>
   23466:	3303      	adds	r3, #3
   23468:	109b      	asrs	r3, r3, #2
	_eeprom_emulator_nvm_erase_row(
   2346a:	b2db      	uxtb	r3, r3
   2346c:	0018      	movs	r0, r3
   2346e:	4b0e      	ldr	r3, [pc, #56]	; (234a8 <_eeprom_emulator_create_master_page+0xbc>)
   23470:	4798      	blx	r3

	/* Write the new master page data to physical memory */
	_eeprom_emulator_nvm_fill_cache(EEPROM_MASTER_PAGE_NUMBER, &master_page);
   23472:	4b0c      	ldr	r3, [pc, #48]	; (234a4 <_eeprom_emulator_create_master_page+0xb8>)
   23474:	891b      	ldrh	r3, [r3, #8]
   23476:	3b01      	subs	r3, #1
   23478:	b29b      	uxth	r3, r3
   2347a:	003a      	movs	r2, r7
   2347c:	0011      	movs	r1, r2
   2347e:	0018      	movs	r0, r3
   23480:	4b0a      	ldr	r3, [pc, #40]	; (234ac <_eeprom_emulator_create_master_page+0xc0>)
   23482:	4798      	blx	r3
	_eeprom_emulator_nvm_commit_cache(EEPROM_MASTER_PAGE_NUMBER);
   23484:	4b07      	ldr	r3, [pc, #28]	; (234a4 <_eeprom_emulator_create_master_page+0xb8>)
   23486:	891b      	ldrh	r3, [r3, #8]
   23488:	3b01      	subs	r3, #1
   2348a:	b29b      	uxth	r3, r3
   2348c:	0018      	movs	r0, r3
   2348e:	4b08      	ldr	r3, [pc, #32]	; (234b0 <_eeprom_emulator_create_master_page+0xc4>)
   23490:	4798      	blx	r3
}
   23492:	46c0      	nop			; (mov r8, r8)
   23494:	46bd      	mov	sp, r7
   23496:	b015      	add	sp, #84	; 0x54
   23498:	bd90      	pop	{r4, r7, pc}
   2349a:	46c0      	nop			; (mov r8, r8)
   2349c:	0002a8a8 	.word	0x0002a8a8
   234a0:	000289e3 	.word	0x000289e3
   234a4:	2000041c 	.word	0x2000041c
   234a8:	00022c7d 	.word	0x00022c7d
   234ac:	00022cc5 	.word	0x00022cc5
   234b0:	00022d15 	.word	0x00022d15

000234b4 <_eeprom_emulator_verify_master_page>:
 * \retval STATUS_ERR_BAD_FORMAT  Master page contents was invalid
 * \retval STATUS_ERR_IO          Master page indicates the data is incompatible
 *                                with this version of the EEPROM emulator
 */
static enum status_code _eeprom_emulator_verify_master_page(void)
{
   234b4:	b590      	push	{r4, r7, lr}
   234b6:	b095      	sub	sp, #84	; 0x54
   234b8:	af00      	add	r7, sp, #0
	const uint32_t magic_key[] = EEPROM_MAGIC_KEY;
   234ba:	2340      	movs	r3, #64	; 0x40
   234bc:	18fb      	adds	r3, r7, r3
   234be:	4a22      	ldr	r2, [pc, #136]	; (23548 <_eeprom_emulator_verify_master_page+0x94>)
   234c0:	ca13      	ldmia	r2!, {r0, r1, r4}
   234c2:	c313      	stmia	r3!, {r0, r1, r4}
	struct _eeprom_master_page master_page;

	/* Copy the master page to the RAM buffer so that it can be inspected */
	_eeprom_emulator_nvm_read_page(EEPROM_MASTER_PAGE_NUMBER, &master_page);
   234c4:	4b21      	ldr	r3, [pc, #132]	; (2354c <_eeprom_emulator_verify_master_page+0x98>)
   234c6:	891b      	ldrh	r3, [r3, #8]
   234c8:	3b01      	subs	r3, #1
   234ca:	b29b      	uxth	r3, r3
   234cc:	003a      	movs	r2, r7
   234ce:	0011      	movs	r1, r2
   234d0:	0018      	movs	r0, r3
   234d2:	4b1f      	ldr	r3, [pc, #124]	; (23550 <_eeprom_emulator_verify_master_page+0x9c>)
   234d4:	4798      	blx	r3

	/* Verify magic key is correct in the master page header */
	for (uint8_t c = 0; c < EEPROM_MAGIC_KEY_COUNT; c++) {
   234d6:	234f      	movs	r3, #79	; 0x4f
   234d8:	18fb      	adds	r3, r7, r3
   234da:	2200      	movs	r2, #0
   234dc:	701a      	strb	r2, [r3, #0]
   234de:	e017      	b.n	23510 <_eeprom_emulator_verify_master_page+0x5c>
		if (master_page.magic_key[c] != magic_key[c]) {
   234e0:	234f      	movs	r3, #79	; 0x4f
   234e2:	18fb      	adds	r3, r7, r3
   234e4:	781a      	ldrb	r2, [r3, #0]
   234e6:	003b      	movs	r3, r7
   234e8:	0092      	lsls	r2, r2, #2
   234ea:	58d2      	ldr	r2, [r2, r3]
   234ec:	234f      	movs	r3, #79	; 0x4f
   234ee:	18fb      	adds	r3, r7, r3
   234f0:	7819      	ldrb	r1, [r3, #0]
   234f2:	2340      	movs	r3, #64	; 0x40
   234f4:	18fb      	adds	r3, r7, r3
   234f6:	0089      	lsls	r1, r1, #2
   234f8:	58cb      	ldr	r3, [r1, r3]
   234fa:	429a      	cmp	r2, r3
   234fc:	d001      	beq.n	23502 <_eeprom_emulator_verify_master_page+0x4e>
			return STATUS_ERR_BAD_FORMAT;
   234fe:	231a      	movs	r3, #26
   23500:	e01e      	b.n	23540 <_eeprom_emulator_verify_master_page+0x8c>
	for (uint8_t c = 0; c < EEPROM_MAGIC_KEY_COUNT; c++) {
   23502:	234f      	movs	r3, #79	; 0x4f
   23504:	18fb      	adds	r3, r7, r3
   23506:	781a      	ldrb	r2, [r3, #0]
   23508:	234f      	movs	r3, #79	; 0x4f
   2350a:	18fb      	adds	r3, r7, r3
   2350c:	3201      	adds	r2, #1
   2350e:	701a      	strb	r2, [r3, #0]
   23510:	234f      	movs	r3, #79	; 0x4f
   23512:	18fb      	adds	r3, r7, r3
   23514:	781b      	ldrb	r3, [r3, #0]
   23516:	2b02      	cmp	r3, #2
   23518:	d9e2      	bls.n	234e0 <_eeprom_emulator_verify_master_page+0x2c>
		}
	}

	/* Verify emulator ID in header to ensure the same scheme is used */
	if (master_page.emulator_id   != EEPROM_EMULATOR_ID) {
   2351a:	003b      	movs	r3, r7
   2351c:	7bdb      	ldrb	r3, [r3, #15]
   2351e:	2b01      	cmp	r3, #1
   23520:	d001      	beq.n	23526 <_eeprom_emulator_verify_master_page+0x72>
		return STATUS_ERR_IO;
   23522:	2310      	movs	r3, #16
   23524:	e00c      	b.n	23540 <_eeprom_emulator_verify_master_page+0x8c>
	}

	/* Verify major version in header to ensure the same version is used */
	if (master_page.major_version != EEPROM_MAJOR_VERSION) {
   23526:	003b      	movs	r3, r7
   23528:	7b1b      	ldrb	r3, [r3, #12]
   2352a:	2b01      	cmp	r3, #1
   2352c:	d001      	beq.n	23532 <_eeprom_emulator_verify_master_page+0x7e>
		return STATUS_ERR_IO;
   2352e:	2310      	movs	r3, #16
   23530:	e006      	b.n	23540 <_eeprom_emulator_verify_master_page+0x8c>
	}

	/* Verify minor version in header to ensure the same version is used */
	if (master_page.minor_version != EEPROM_MINOR_VERSION) {
   23532:	003b      	movs	r3, r7
   23534:	7b5b      	ldrb	r3, [r3, #13]
   23536:	2b00      	cmp	r3, #0
   23538:	d001      	beq.n	2353e <_eeprom_emulator_verify_master_page+0x8a>
		return STATUS_ERR_IO;
   2353a:	2310      	movs	r3, #16
   2353c:	e000      	b.n	23540 <_eeprom_emulator_verify_master_page+0x8c>
	}

	/* Don't verify revision number - same major/minor is considered enough
	 * to ensure the stored data is compatible. */

	return STATUS_OK;
   2353e:	2300      	movs	r3, #0
}
   23540:	0018      	movs	r0, r3
   23542:	46bd      	mov	sp, r7
   23544:	b015      	add	sp, #84	; 0x54
   23546:	bd90      	pop	{r4, r7, pc}
   23548:	0002a8a8 	.word	0x0002a8a8
   2354c:	2000041c 	.word	0x2000041c
   23550:	00022d61 	.word	0x00022d61

00023554 <eeprom_emulator_init>:
 *                                formatted
 * \retval STATUS_ERR_IO          EEPROM data is incompatible with this version
 *                                or scheme of the EEPROM emulator
 */
enum status_code eeprom_emulator_init(void)
{
   23554:	b590      	push	{r4, r7, lr}
   23556:	b087      	sub	sp, #28
   23558:	af00      	add	r7, sp, #0
	enum status_code error_code = STATUS_OK;
   2355a:	2317      	movs	r3, #23
   2355c:	18fb      	adds	r3, r7, r3
   2355e:	2200      	movs	r2, #0
   23560:	701a      	strb	r2, [r3, #0]
	struct nvm_parameters parameters;

	/* Retrieve the NVM controller configuration - enable manual page writing
	 * mode so that the emulator has exclusive control over page writes to
	 * allow for caching */
	nvm_get_config_defaults(&config);
   23562:	2310      	movs	r3, #16
   23564:	18fb      	adds	r3, r7, r3
   23566:	0018      	movs	r0, r3
   23568:	4b2e      	ldr	r3, [pc, #184]	; (23624 <eeprom_emulator_init+0xd0>)
   2356a:	4798      	blx	r3
	config.manual_page_write = true;
   2356c:	2310      	movs	r3, #16
   2356e:	18fb      	adds	r3, r7, r3
   23570:	2201      	movs	r2, #1
   23572:	705a      	strb	r2, [r3, #1]

	/* Apply new NVM configuration */
	do {
		error_code = nvm_set_config(&config);
   23574:	2317      	movs	r3, #23
   23576:	18fc      	adds	r4, r7, r3
   23578:	2310      	movs	r3, #16
   2357a:	18fb      	adds	r3, r7, r3
   2357c:	0018      	movs	r0, r3
   2357e:	4b2a      	ldr	r3, [pc, #168]	; (23628 <eeprom_emulator_init+0xd4>)
   23580:	4798      	blx	r3
   23582:	0003      	movs	r3, r0
   23584:	7023      	strb	r3, [r4, #0]
	} while (error_code == STATUS_BUSY);
   23586:	2317      	movs	r3, #23
   23588:	18fb      	adds	r3, r7, r3
   2358a:	781b      	ldrb	r3, [r3, #0]
   2358c:	2b05      	cmp	r3, #5
   2358e:	d0f1      	beq.n	23574 <eeprom_emulator_init+0x20>

	/* Get the NVM controller configuration parameters */
	nvm_get_parameters(&parameters);
   23590:	1d3b      	adds	r3, r7, #4
   23592:	0018      	movs	r0, r3
   23594:	4b25      	ldr	r3, [pc, #148]	; (2362c <eeprom_emulator_init+0xd8>)
   23596:	4798      	blx	r3

	/* Ensure the device fuses are configured for at least one master page row,
	 * one user EEPROM data row and one spare row */
	if (parameters.eeprom_number_of_pages < (3 * NVMCTRL_ROW_PAGES)) {
   23598:	1d3b      	adds	r3, r7, #4
   2359a:	685b      	ldr	r3, [r3, #4]
   2359c:	2b0b      	cmp	r3, #11
   2359e:	d801      	bhi.n	235a4 <eeprom_emulator_init+0x50>
		return STATUS_ERR_NO_MEMORY;
   235a0:	2316      	movs	r3, #22
   235a2:	e03b      	b.n	2361c <eeprom_emulator_init+0xc8>
	 *  - One row is reserved for the master page
	 *  - One row is reserved for the spare row
	 *  - Two logical pages can be stored in one physical row
	 */
	_eeprom_instance.physical_pages =
			parameters.eeprom_number_of_pages;
   235a4:	1d3b      	adds	r3, r7, #4
   235a6:	685b      	ldr	r3, [r3, #4]
	_eeprom_instance.physical_pages =
   235a8:	b29a      	uxth	r2, r3
   235aa:	4b21      	ldr	r3, [pc, #132]	; (23630 <eeprom_emulator_init+0xdc>)
   235ac:	811a      	strh	r2, [r3, #8]
	_eeprom_instance.logical_pages  =
			(parameters.eeprom_number_of_pages - (2 * NVMCTRL_ROW_PAGES)) / 2;
   235ae:	1d3b      	adds	r3, r7, #4
   235b0:	685b      	ldr	r3, [r3, #4]
   235b2:	3b08      	subs	r3, #8
   235b4:	085b      	lsrs	r3, r3, #1
	_eeprom_instance.logical_pages  =
   235b6:	b2da      	uxtb	r2, r3
   235b8:	4b1d      	ldr	r3, [pc, #116]	; (23630 <eeprom_emulator_init+0xdc>)
   235ba:	729a      	strb	r2, [r3, #10]

	/* Configure the EEPROM instance starting physical address in FLASH and
	 * pre-compute the index of the first page in FLASH used for EEPROM */
	_eeprom_instance.flash =
			(void*)(FLASH_SIZE -
			((uint32_t)_eeprom_instance.physical_pages * NVMCTRL_PAGE_SIZE));
   235bc:	4b1c      	ldr	r3, [pc, #112]	; (23630 <eeprom_emulator_init+0xdc>)
   235be:	891b      	ldrh	r3, [r3, #8]
   235c0:	001a      	movs	r2, r3
			(void*)(FLASH_SIZE -
   235c2:	0013      	movs	r3, r2
   235c4:	069b      	lsls	r3, r3, #26
   235c6:	1a9b      	subs	r3, r3, r2
   235c8:	019b      	lsls	r3, r3, #6
   235ca:	2280      	movs	r2, #128	; 0x80
   235cc:	02d2      	lsls	r2, r2, #11
   235ce:	4694      	mov	ip, r2
   235d0:	4463      	add	r3, ip
   235d2:	001a      	movs	r2, r3
	_eeprom_instance.flash =
   235d4:	4b16      	ldr	r3, [pc, #88]	; (23630 <eeprom_emulator_init+0xdc>)
   235d6:	605a      	str	r2, [r3, #4]

	/* Clear EEPROM page write cache on initialization */
	_eeprom_instance.cache_active = false;
   235d8:	4b15      	ldr	r3, [pc, #84]	; (23630 <eeprom_emulator_init+0xdc>)
   235da:	22c8      	movs	r2, #200	; 0xc8
   235dc:	2100      	movs	r1, #0
   235de:	5499      	strb	r1, [r3, r2]

	/* Scan physical memory and re-create logical to physical page mapping
	 * table to locate logical pages of EEPROM data in physical FLASH */
	_eeprom_emulator_update_page_mapping();
   235e0:	4b14      	ldr	r3, [pc, #80]	; (23634 <eeprom_emulator_init+0xe0>)
   235e2:	4798      	blx	r3

	/* Could not find spare row - abort as the memory appears to be corrupt */
	if (_eeprom_instance.spare_row == EEPROM_INVALID_ROW_NUMBER) {
   235e4:	4b12      	ldr	r3, [pc, #72]	; (23630 <eeprom_emulator_init+0xdc>)
   235e6:	2287      	movs	r2, #135	; 0x87
   235e8:	5c9b      	ldrb	r3, [r3, r2]
   235ea:	2b3f      	cmp	r3, #63	; 0x3f
   235ec:	d101      	bne.n	235f2 <eeprom_emulator_init+0x9e>
		return STATUS_ERR_BAD_FORMAT;
   235ee:	231a      	movs	r3, #26
   235f0:	e014      	b.n	2361c <eeprom_emulator_init+0xc8>
	}

	/* Verify that the master page contains valid data for this service */
	error_code = _eeprom_emulator_verify_master_page();
   235f2:	2317      	movs	r3, #23
   235f4:	18fc      	adds	r4, r7, r3
   235f6:	4b10      	ldr	r3, [pc, #64]	; (23638 <eeprom_emulator_init+0xe4>)
   235f8:	4798      	blx	r3
   235fa:	0003      	movs	r3, r0
   235fc:	7023      	strb	r3, [r4, #0]
	if (error_code != STATUS_OK) {
   235fe:	2317      	movs	r3, #23
   23600:	18fb      	adds	r3, r7, r3
   23602:	781b      	ldrb	r3, [r3, #0]
   23604:	2b00      	cmp	r3, #0
   23606:	d003      	beq.n	23610 <eeprom_emulator_init+0xbc>
		return error_code;
   23608:	2317      	movs	r3, #23
   2360a:	18fb      	adds	r3, r7, r3
   2360c:	781b      	ldrb	r3, [r3, #0]
   2360e:	e005      	b.n	2361c <eeprom_emulator_init+0xc8>
	}

	/* Mark initialization as complete */
	_eeprom_instance.initialized = true;
   23610:	4b07      	ldr	r3, [pc, #28]	; (23630 <eeprom_emulator_init+0xdc>)
   23612:	2201      	movs	r2, #1
   23614:	701a      	strb	r2, [r3, #0]

	return error_code;
   23616:	2317      	movs	r3, #23
   23618:	18fb      	adds	r3, r7, r3
   2361a:	781b      	ldrb	r3, [r3, #0]
}
   2361c:	0018      	movs	r0, r3
   2361e:	46bd      	mov	sp, r7
   23620:	b007      	add	sp, #28
   23622:	bd90      	pop	{r4, r7, pc}
   23624:	00022c41 	.word	0x00022c41
   23628:	0002261d 	.word	0x0002261d
   2362c:	00022afd 	.word	0x00022afd
   23630:	2000041c 	.word	0x2000041c
   23634:	00023021 	.word	0x00023021
   23638:	000234b5 	.word	0x000234b5

0002363c <eeprom_emulator_erase_memory>:
 *
 * Erases and re-initializes the emulated EEPROM memory space, destroying any
 * existing data.
 */
void eeprom_emulator_erase_memory(void)
{
   2363c:	b580      	push	{r7, lr}
   2363e:	af00      	add	r7, sp, #0
	/* Create new EEPROM memory block in EEPROM emulation section */
	_eeprom_emulator_format_memory();
   23640:	4b04      	ldr	r3, [pc, #16]	; (23654 <eeprom_emulator_erase_memory+0x18>)
   23642:	4798      	blx	r3

	/* Write EEPROM emulation master block */
	_eeprom_emulator_create_master_page();
   23644:	4b04      	ldr	r3, [pc, #16]	; (23658 <eeprom_emulator_erase_memory+0x1c>)
   23646:	4798      	blx	r3

	/* Map the newly created EEPROM memory block */
	_eeprom_emulator_update_page_mapping();
   23648:	4b04      	ldr	r3, [pc, #16]	; (2365c <eeprom_emulator_erase_memory+0x20>)
   2364a:	4798      	blx	r3
}
   2364c:	46c0      	nop			; (mov r8, r8)
   2364e:	46bd      	mov	sp, r7
   23650:	bd80      	pop	{r7, pc}
   23652:	46c0      	nop			; (mov r8, r8)
   23654:	00022db1 	.word	0x00022db1
   23658:	000233ed 	.word	0x000233ed
   2365c:	00023021 	.word	0x00023021

00023660 <eeprom_emulator_write_page>:
 *                                      EEPROM memory space was supplied
 */
enum status_code eeprom_emulator_write_page(
		const uint8_t logical_page,
		const uint8_t *const data)
{
   23660:	b590      	push	{r4, r7, lr}
   23662:	b085      	sub	sp, #20
   23664:	af00      	add	r7, sp, #0
   23666:	0002      	movs	r2, r0
   23668:	6039      	str	r1, [r7, #0]
   2366a:	1dfb      	adds	r3, r7, #7
   2366c:	701a      	strb	r2, [r3, #0]
	/* Ensure the emulated EEPROM has been initialized first */
	if (_eeprom_instance.initialized == false) {
   2366e:	4b38      	ldr	r3, [pc, #224]	; (23750 <eeprom_emulator_write_page+0xf0>)
   23670:	781b      	ldrb	r3, [r3, #0]
   23672:	2201      	movs	r2, #1
   23674:	4053      	eors	r3, r2
   23676:	b2db      	uxtb	r3, r3
   23678:	2b00      	cmp	r3, #0
   2367a:	d001      	beq.n	23680 <eeprom_emulator_write_page+0x20>
		return STATUS_ERR_NOT_INITIALIZED;
   2367c:	231f      	movs	r3, #31
   2367e:	e063      	b.n	23748 <eeprom_emulator_write_page+0xe8>
	}

	/* Make sure the write address is within the allowable address space */
	if (logical_page >= _eeprom_instance.logical_pages) {
   23680:	4b33      	ldr	r3, [pc, #204]	; (23750 <eeprom_emulator_write_page+0xf0>)
   23682:	7a9b      	ldrb	r3, [r3, #10]
   23684:	1dfa      	adds	r2, r7, #7
   23686:	7812      	ldrb	r2, [r2, #0]
   23688:	429a      	cmp	r2, r3
   2368a:	d301      	bcc.n	23690 <eeprom_emulator_write_page+0x30>
		return STATUS_ERR_BAD_ADDRESS;
   2368c:	2318      	movs	r3, #24
   2368e:	e05b      	b.n	23748 <eeprom_emulator_write_page+0xe8>
	}

	/* Check if the cache is active and the currently cached page is not the
	 * page that is being written (if not, we need to commit and cache the new
	 * page) */
	if ((_eeprom_instance.cache_active == true) &&
   23690:	4b2f      	ldr	r3, [pc, #188]	; (23750 <eeprom_emulator_write_page+0xf0>)
   23692:	22c8      	movs	r2, #200	; 0xc8
   23694:	5c9b      	ldrb	r3, [r3, r2]
   23696:	2b00      	cmp	r3, #0
   23698:	d008      	beq.n	236ac <eeprom_emulator_write_page+0x4c>
			(_eeprom_instance.cache.header.logical_page != logical_page)) {
   2369a:	4b2d      	ldr	r3, [pc, #180]	; (23750 <eeprom_emulator_write_page+0xf0>)
   2369c:	2288      	movs	r2, #136	; 0x88
   2369e:	5c9b      	ldrb	r3, [r3, r2]
	if ((_eeprom_instance.cache_active == true) &&
   236a0:	1dfa      	adds	r2, r7, #7
   236a2:	7812      	ldrb	r2, [r2, #0]
   236a4:	429a      	cmp	r2, r3
   236a6:	d001      	beq.n	236ac <eeprom_emulator_write_page+0x4c>
		/* Commit the currently cached data buffer to non-volatile memory */
		eeprom_emulator_commit_page_buffer();
   236a8:	4b2a      	ldr	r3, [pc, #168]	; (23754 <eeprom_emulator_write_page+0xf4>)
   236aa:	4798      	blx	r3
	}

	/* Check if we have space in the current page location's physical row for
	 * a new version, and if so get the new page index */
	uint8_t new_page = 0;
   236ac:	230e      	movs	r3, #14
   236ae:	18fb      	adds	r3, r7, r3
   236b0:	2200      	movs	r2, #0
   236b2:	701a      	strb	r2, [r3, #0]
	bool page_spare  = _eeprom_emulator_is_page_free_on_row(
   236b4:	1dfb      	adds	r3, r7, #7
   236b6:	781b      	ldrb	r3, [r3, #0]
   236b8:	4a25      	ldr	r2, [pc, #148]	; (23750 <eeprom_emulator_write_page+0xf0>)
   236ba:	18d3      	adds	r3, r2, r3
   236bc:	7adb      	ldrb	r3, [r3, #11]
   236be:	220f      	movs	r2, #15
   236c0:	18bc      	adds	r4, r7, r2
   236c2:	220e      	movs	r2, #14
   236c4:	18ba      	adds	r2, r7, r2
   236c6:	0011      	movs	r1, r2
   236c8:	0018      	movs	r0, r3
   236ca:	4b23      	ldr	r3, [pc, #140]	; (23758 <eeprom_emulator_write_page+0xf8>)
   236cc:	4798      	blx	r3
   236ce:	0003      	movs	r3, r0
   236d0:	7023      	strb	r3, [r4, #0]
			_eeprom_instance.page_map[logical_page], &new_page);

	/* Check if the current row is full, and we need to swap it out with a
	 * spare row */
	if (page_spare == false) {
   236d2:	230f      	movs	r3, #15
   236d4:	18fb      	adds	r3, r7, r3
   236d6:	781b      	ldrb	r3, [r3, #0]
   236d8:	2201      	movs	r2, #1
   236da:	4053      	eors	r3, r2
   236dc:	b2db      	uxtb	r3, r3
   236de:	2b00      	cmp	r3, #0
   236e0:	d00e      	beq.n	23700 <eeprom_emulator_write_page+0xa0>
		/* Move the other page we aren't writing that is stored in the same
		 * page to the new row, and replace the old current page with the
		 * new page contents (cache is updated to match) */
		_eeprom_emulator_move_data_to_spare(
				_eeprom_instance.page_map[logical_page] / NVMCTRL_ROW_PAGES,
   236e2:	1dfb      	adds	r3, r7, #7
   236e4:	781b      	ldrb	r3, [r3, #0]
   236e6:	4a1a      	ldr	r2, [pc, #104]	; (23750 <eeprom_emulator_write_page+0xf0>)
   236e8:	18d3      	adds	r3, r2, r3
   236ea:	7adb      	ldrb	r3, [r3, #11]
		_eeprom_emulator_move_data_to_spare(
   236ec:	089b      	lsrs	r3, r3, #2
   236ee:	b2d8      	uxtb	r0, r3
   236f0:	683a      	ldr	r2, [r7, #0]
   236f2:	1dfb      	adds	r3, r7, #7
   236f4:	781b      	ldrb	r3, [r3, #0]
   236f6:	0019      	movs	r1, r3
   236f8:	4b18      	ldr	r3, [pc, #96]	; (2375c <eeprom_emulator_write_page+0xfc>)
   236fa:	4798      	blx	r3
				logical_page,
				data);

		/* New data is now written and the cache is updated, exit */
		return STATUS_OK;
   236fc:	2300      	movs	r3, #0
   236fe:	e023      	b.n	23748 <eeprom_emulator_write_page+0xe8>
	}

	/* Update the page cache header section with the new page header */
	_eeprom_instance.cache.header.logical_page = logical_page;
   23700:	4b13      	ldr	r3, [pc, #76]	; (23750 <eeprom_emulator_write_page+0xf0>)
   23702:	1dfa      	adds	r2, r7, #7
   23704:	2188      	movs	r1, #136	; 0x88
   23706:	7812      	ldrb	r2, [r2, #0]
   23708:	545a      	strb	r2, [r3, r1]

	/* Update the page cache contents with the new data */
	memcpy(&_eeprom_instance.cache.data,
   2370a:	4b11      	ldr	r3, [pc, #68]	; (23750 <eeprom_emulator_write_page+0xf0>)
   2370c:	228c      	movs	r2, #140	; 0x8c
   2370e:	6839      	ldr	r1, [r7, #0]
   23710:	189b      	adds	r3, r3, r2
   23712:	223c      	movs	r2, #60	; 0x3c
   23714:	0018      	movs	r0, r3
   23716:	4b12      	ldr	r3, [pc, #72]	; (23760 <eeprom_emulator_write_page+0x100>)
   23718:	4798      	blx	r3
			data,
			EEPROM_PAGE_SIZE);

	/* Fill the physical NVM buffer with the new data so that it can be quickly
	 * committed in the future if needed due to a low power condition */
	_eeprom_emulator_nvm_fill_cache(new_page, &_eeprom_instance.cache);
   2371a:	230e      	movs	r3, #14
   2371c:	18fb      	adds	r3, r7, r3
   2371e:	781b      	ldrb	r3, [r3, #0]
   23720:	b29b      	uxth	r3, r3
   23722:	4a10      	ldr	r2, [pc, #64]	; (23764 <eeprom_emulator_write_page+0x104>)
   23724:	0011      	movs	r1, r2
   23726:	0018      	movs	r0, r3
   23728:	4b0f      	ldr	r3, [pc, #60]	; (23768 <eeprom_emulator_write_page+0x108>)
   2372a:	4798      	blx	r3

	/* Update the cache parameters and mark the cache as active */
	_eeprom_instance.page_map[logical_page] = new_page;
   2372c:	1dfb      	adds	r3, r7, #7
   2372e:	781b      	ldrb	r3, [r3, #0]
   23730:	220e      	movs	r2, #14
   23732:	18ba      	adds	r2, r7, r2
   23734:	7811      	ldrb	r1, [r2, #0]
   23736:	4a06      	ldr	r2, [pc, #24]	; (23750 <eeprom_emulator_write_page+0xf0>)
   23738:	18d3      	adds	r3, r2, r3
   2373a:	1c0a      	adds	r2, r1, #0
   2373c:	72da      	strb	r2, [r3, #11]
	barrier(); // Enforce ordering to prevent incorrect cache state
	_eeprom_instance.cache_active           = true;
   2373e:	4b04      	ldr	r3, [pc, #16]	; (23750 <eeprom_emulator_write_page+0xf0>)
   23740:	22c8      	movs	r2, #200	; 0xc8
   23742:	2101      	movs	r1, #1
   23744:	5499      	strb	r1, [r3, r2]

	return STATUS_OK;
   23746:	2300      	movs	r3, #0
}
   23748:	0018      	movs	r0, r3
   2374a:	46bd      	mov	sp, r7
   2374c:	b005      	add	sp, #20
   2374e:	bd90      	pop	{r4, r7, pc}
   23750:	2000041c 	.word	0x2000041c
   23754:	00023809 	.word	0x00023809
   23758:	00023175 	.word	0x00023175
   2375c:	0002320d 	.word	0x0002320d
   23760:	000289ad 	.word	0x000289ad
   23764:	200004a4 	.word	0x200004a4
   23768:	00022cc5 	.word	0x00022cc5

0002376c <eeprom_emulator_read_page>:
 *                                      EEPROM memory space was supplied
 */
enum status_code eeprom_emulator_read_page(
		const uint8_t logical_page,
		uint8_t *const data)
{
   2376c:	b580      	push	{r7, lr}
   2376e:	b092      	sub	sp, #72	; 0x48
   23770:	af00      	add	r7, sp, #0
   23772:	0002      	movs	r2, r0
   23774:	6039      	str	r1, [r7, #0]
   23776:	1dfb      	adds	r3, r7, #7
   23778:	701a      	strb	r2, [r3, #0]
	/* Ensure the emulated EEPROM has been initialized first */
	if (_eeprom_instance.initialized == false) {
   2377a:	4b20      	ldr	r3, [pc, #128]	; (237fc <eeprom_emulator_read_page+0x90>)
   2377c:	781b      	ldrb	r3, [r3, #0]
   2377e:	2201      	movs	r2, #1
   23780:	4053      	eors	r3, r2
   23782:	b2db      	uxtb	r3, r3
   23784:	2b00      	cmp	r3, #0
   23786:	d001      	beq.n	2378c <eeprom_emulator_read_page+0x20>
		return STATUS_ERR_NOT_INITIALIZED;
   23788:	231f      	movs	r3, #31
   2378a:	e033      	b.n	237f4 <eeprom_emulator_read_page+0x88>
	}

	/* Make sure the read address is within the allowable address space */
	if (logical_page >= _eeprom_instance.logical_pages) {
   2378c:	4b1b      	ldr	r3, [pc, #108]	; (237fc <eeprom_emulator_read_page+0x90>)
   2378e:	7a9b      	ldrb	r3, [r3, #10]
   23790:	1dfa      	adds	r2, r7, #7
   23792:	7812      	ldrb	r2, [r2, #0]
   23794:	429a      	cmp	r2, r3
   23796:	d301      	bcc.n	2379c <eeprom_emulator_read_page+0x30>
		return STATUS_ERR_BAD_ADDRESS;
   23798:	2318      	movs	r3, #24
   2379a:	e02b      	b.n	237f4 <eeprom_emulator_read_page+0x88>
	}

	/* Check if the page to read is currently cached (and potentially out of
	 * sync/newer than the physical memory) */
	if ((_eeprom_instance.cache_active == true) &&
   2379c:	4b17      	ldr	r3, [pc, #92]	; (237fc <eeprom_emulator_read_page+0x90>)
   2379e:	22c8      	movs	r2, #200	; 0xc8
   237a0:	5c9b      	ldrb	r3, [r3, r2]
   237a2:	2b00      	cmp	r3, #0
   237a4:	d010      	beq.n	237c8 <eeprom_emulator_read_page+0x5c>
		 (_eeprom_instance.cache.header.logical_page == logical_page)) {
   237a6:	4b15      	ldr	r3, [pc, #84]	; (237fc <eeprom_emulator_read_page+0x90>)
   237a8:	2288      	movs	r2, #136	; 0x88
   237aa:	5c9b      	ldrb	r3, [r3, r2]
	if ((_eeprom_instance.cache_active == true) &&
   237ac:	1dfa      	adds	r2, r7, #7
   237ae:	7812      	ldrb	r2, [r2, #0]
   237b0:	429a      	cmp	r2, r3
   237b2:	d109      	bne.n	237c8 <eeprom_emulator_read_page+0x5c>
		/* Copy the potentially newer cached data into the user buffer */
		memcpy(data, _eeprom_instance.cache.data, EEPROM_PAGE_SIZE);
   237b4:	6839      	ldr	r1, [r7, #0]
   237b6:	4b11      	ldr	r3, [pc, #68]	; (237fc <eeprom_emulator_read_page+0x90>)
   237b8:	228c      	movs	r2, #140	; 0x8c
   237ba:	0008      	movs	r0, r1
   237bc:	189b      	adds	r3, r3, r2
   237be:	223c      	movs	r2, #60	; 0x3c
   237c0:	0019      	movs	r1, r3
   237c2:	4b0f      	ldr	r3, [pc, #60]	; (23800 <eeprom_emulator_read_page+0x94>)
   237c4:	4798      	blx	r3
   237c6:	e014      	b.n	237f2 <eeprom_emulator_read_page+0x86>
	} else {
		struct _eeprom_page temp;

		/* Copy the data from non-volatile memory into the temporary buffer */
		_eeprom_emulator_nvm_read_page(
				_eeprom_instance.page_map[logical_page], &temp);
   237c8:	1dfb      	adds	r3, r7, #7
   237ca:	781b      	ldrb	r3, [r3, #0]
   237cc:	4a0b      	ldr	r2, [pc, #44]	; (237fc <eeprom_emulator_read_page+0x90>)
   237ce:	18d3      	adds	r3, r2, r3
   237d0:	7adb      	ldrb	r3, [r3, #11]
		_eeprom_emulator_nvm_read_page(
   237d2:	b29b      	uxth	r3, r3
   237d4:	2208      	movs	r2, #8
   237d6:	18ba      	adds	r2, r7, r2
   237d8:	0011      	movs	r1, r2
   237da:	0018      	movs	r0, r3
   237dc:	4b09      	ldr	r3, [pc, #36]	; (23804 <eeprom_emulator_read_page+0x98>)
   237de:	4798      	blx	r3

		/* Copy the data portion of the read page to the user's buffer */
		memcpy(data, temp.data, EEPROM_PAGE_SIZE);
   237e0:	683a      	ldr	r2, [r7, #0]
   237e2:	2308      	movs	r3, #8
   237e4:	18fb      	adds	r3, r7, r3
   237e6:	0010      	movs	r0, r2
   237e8:	3304      	adds	r3, #4
   237ea:	223c      	movs	r2, #60	; 0x3c
   237ec:	0019      	movs	r1, r3
   237ee:	4b04      	ldr	r3, [pc, #16]	; (23800 <eeprom_emulator_read_page+0x94>)
   237f0:	4798      	blx	r3
	}

	return STATUS_OK;
   237f2:	2300      	movs	r3, #0
}
   237f4:	0018      	movs	r0, r3
   237f6:	46bd      	mov	sp, r7
   237f8:	b012      	add	sp, #72	; 0x48
   237fa:	bd80      	pop	{r7, pc}
   237fc:	2000041c 	.word	0x2000041c
   23800:	000289ad 	.word	0x000289ad
   23804:	00022d61 	.word	0x00022d61

00023808 <eeprom_emulator_commit_page_buffer>:
 *       data loss.
 *
 * \return Status code indicating the status of the operation.
 */
enum status_code eeprom_emulator_commit_page_buffer(void)
{
   23808:	b580      	push	{r7, lr}
   2380a:	b082      	sub	sp, #8
   2380c:	af00      	add	r7, sp, #0
	enum status_code error_code = STATUS_OK;
   2380e:	1dfb      	adds	r3, r7, #7
   23810:	2200      	movs	r2, #0
   23812:	701a      	strb	r2, [r3, #0]

	/* If cache is inactive, no need to commit anything to physical memory */
	if (_eeprom_instance.cache_active == false) {
   23814:	4b10      	ldr	r3, [pc, #64]	; (23858 <eeprom_emulator_commit_page_buffer+0x50>)
   23816:	22c8      	movs	r2, #200	; 0xc8
   23818:	5c9b      	ldrb	r3, [r3, r2]
   2381a:	2201      	movs	r2, #1
   2381c:	4053      	eors	r3, r2
   2381e:	b2db      	uxtb	r3, r3
   23820:	2b00      	cmp	r3, #0
   23822:	d001      	beq.n	23828 <eeprom_emulator_commit_page_buffer+0x20>
		return STATUS_OK;
   23824:	2300      	movs	r3, #0
   23826:	e013      	b.n	23850 <eeprom_emulator_commit_page_buffer+0x48>
	}

	uint8_t cached_logical_page = _eeprom_instance.cache.header.logical_page;
   23828:	1dbb      	adds	r3, r7, #6
   2382a:	4a0b      	ldr	r2, [pc, #44]	; (23858 <eeprom_emulator_commit_page_buffer+0x50>)
   2382c:	2188      	movs	r1, #136	; 0x88
   2382e:	5c52      	ldrb	r2, [r2, r1]
   23830:	701a      	strb	r2, [r3, #0]

	/* Perform the page write to commit the NVM page buffer to FLASH */
	_eeprom_emulator_nvm_commit_cache(
			_eeprom_instance.page_map[cached_logical_page]);
   23832:	1dbb      	adds	r3, r7, #6
   23834:	781b      	ldrb	r3, [r3, #0]
   23836:	4a08      	ldr	r2, [pc, #32]	; (23858 <eeprom_emulator_commit_page_buffer+0x50>)
   23838:	18d3      	adds	r3, r2, r3
   2383a:	7adb      	ldrb	r3, [r3, #11]
	_eeprom_emulator_nvm_commit_cache(
   2383c:	b29b      	uxth	r3, r3
   2383e:	0018      	movs	r0, r3
   23840:	4b06      	ldr	r3, [pc, #24]	; (2385c <eeprom_emulator_commit_page_buffer+0x54>)
   23842:	4798      	blx	r3

	barrier(); // Enforce ordering to prevent incorrect cache state
	_eeprom_instance.cache_active = false;
   23844:	4b04      	ldr	r3, [pc, #16]	; (23858 <eeprom_emulator_commit_page_buffer+0x50>)
   23846:	22c8      	movs	r2, #200	; 0xc8
   23848:	2100      	movs	r1, #0
   2384a:	5499      	strb	r1, [r3, r2]

	return error_code;
   2384c:	1dfb      	adds	r3, r7, #7
   2384e:	781b      	ldrb	r3, [r3, #0]
}
   23850:	0018      	movs	r0, r3
   23852:	46bd      	mov	sp, r7
   23854:	b002      	add	sp, #8
   23856:	bd80      	pop	{r7, pc}
   23858:	2000041c 	.word	0x2000041c
   2385c:	00022d15 	.word	0x00022d15

00023860 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
   23860:	b580      	push	{r7, lr}
   23862:	af00      	add	r7, sp, #0
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
   23864:	46c0      	nop			; (mov r8, r8)
   23866:	46bd      	mov	sp, r7
   23868:	bd80      	pop	{r7, pc}
	...

0002386c <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
   2386c:	b580      	push	{r7, lr}
   2386e:	b082      	sub	sp, #8
   23870:	af00      	add	r7, sp, #0
	if (cpu_irq_critical_section_counter == 0) {
   23872:	4b10      	ldr	r3, [pc, #64]	; (238b4 <cpu_irq_enter_critical+0x48>)
   23874:	681b      	ldr	r3, [r3, #0]
   23876:	2b00      	cmp	r3, #0
   23878:	d112      	bne.n	238a0 <cpu_irq_enter_critical+0x34>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   2387a:	f3ef 8310 	mrs	r3, PRIMASK
   2387e:	607b      	str	r3, [r7, #4]
  return(result);
   23880:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
   23882:	2b00      	cmp	r3, #0
   23884:	d109      	bne.n	2389a <cpu_irq_enter_critical+0x2e>
  __ASM volatile ("cpsid i" : : : "memory");
   23886:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
   23888:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
   2388c:	4b0a      	ldr	r3, [pc, #40]	; (238b8 <cpu_irq_enter_critical+0x4c>)
   2388e:	2200      	movs	r2, #0
   23890:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
   23892:	4b0a      	ldr	r3, [pc, #40]	; (238bc <cpu_irq_enter_critical+0x50>)
   23894:	2201      	movs	r2, #1
   23896:	701a      	strb	r2, [r3, #0]
   23898:	e002      	b.n	238a0 <cpu_irq_enter_critical+0x34>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
   2389a:	4b08      	ldr	r3, [pc, #32]	; (238bc <cpu_irq_enter_critical+0x50>)
   2389c:	2200      	movs	r2, #0
   2389e:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
   238a0:	4b04      	ldr	r3, [pc, #16]	; (238b4 <cpu_irq_enter_critical+0x48>)
   238a2:	681b      	ldr	r3, [r3, #0]
   238a4:	1c5a      	adds	r2, r3, #1
   238a6:	4b03      	ldr	r3, [pc, #12]	; (238b4 <cpu_irq_enter_critical+0x48>)
   238a8:	601a      	str	r2, [r3, #0]
}
   238aa:	46c0      	nop			; (mov r8, r8)
   238ac:	46bd      	mov	sp, r7
   238ae:	b002      	add	sp, #8
   238b0:	bd80      	pop	{r7, pc}
   238b2:	46c0      	nop			; (mov r8, r8)
   238b4:	200004e8 	.word	0x200004e8
   238b8:	20000028 	.word	0x20000028
   238bc:	200004ec 	.word	0x200004ec

000238c0 <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
   238c0:	b580      	push	{r7, lr}
   238c2:	af00      	add	r7, sp, #0
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
   238c4:	4b0b      	ldr	r3, [pc, #44]	; (238f4 <cpu_irq_leave_critical+0x34>)
   238c6:	681b      	ldr	r3, [r3, #0]
   238c8:	1e5a      	subs	r2, r3, #1
   238ca:	4b0a      	ldr	r3, [pc, #40]	; (238f4 <cpu_irq_leave_critical+0x34>)
   238cc:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
   238ce:	4b09      	ldr	r3, [pc, #36]	; (238f4 <cpu_irq_leave_critical+0x34>)
   238d0:	681b      	ldr	r3, [r3, #0]
   238d2:	2b00      	cmp	r3, #0
   238d4:	d10a      	bne.n	238ec <cpu_irq_leave_critical+0x2c>
   238d6:	4b08      	ldr	r3, [pc, #32]	; (238f8 <cpu_irq_leave_critical+0x38>)
   238d8:	781b      	ldrb	r3, [r3, #0]
   238da:	b2db      	uxtb	r3, r3
   238dc:	2b00      	cmp	r3, #0
   238de:	d005      	beq.n	238ec <cpu_irq_leave_critical+0x2c>
		cpu_irq_enable();
   238e0:	4b06      	ldr	r3, [pc, #24]	; (238fc <cpu_irq_leave_critical+0x3c>)
   238e2:	2201      	movs	r2, #1
   238e4:	701a      	strb	r2, [r3, #0]
   238e6:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   238ea:	b662      	cpsie	i
	}
}
   238ec:	46c0      	nop			; (mov r8, r8)
   238ee:	46bd      	mov	sp, r7
   238f0:	bd80      	pop	{r7, pc}
   238f2:	46c0      	nop			; (mov r8, r8)
   238f4:	200004e8 	.word	0x200004e8
   238f8:	200004ec 	.word	0x200004ec
   238fc:	20000028 	.word	0x20000028

00023900 <system_gclk_gen_get_config_defaults>:
{
   23900:	b580      	push	{r7, lr}
   23902:	b082      	sub	sp, #8
   23904:	af00      	add	r7, sp, #0
   23906:	6078      	str	r0, [r7, #4]
	config->division_factor    = 1;
   23908:	687b      	ldr	r3, [r7, #4]
   2390a:	2201      	movs	r2, #1
   2390c:	605a      	str	r2, [r3, #4]
	config->high_when_disabled = false;
   2390e:	687b      	ldr	r3, [r7, #4]
   23910:	2200      	movs	r2, #0
   23912:	705a      	strb	r2, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
   23914:	687b      	ldr	r3, [r7, #4]
   23916:	2206      	movs	r2, #6
   23918:	701a      	strb	r2, [r3, #0]
	config->run_in_standby     = false;
   2391a:	687b      	ldr	r3, [r7, #4]
   2391c:	2200      	movs	r2, #0
   2391e:	721a      	strb	r2, [r3, #8]
	config->output_enable      = false;
   23920:	687b      	ldr	r3, [r7, #4]
   23922:	2200      	movs	r2, #0
   23924:	725a      	strb	r2, [r3, #9]
}
   23926:	46c0      	nop			; (mov r8, r8)
   23928:	46bd      	mov	sp, r7
   2392a:	b002      	add	sp, #8
   2392c:	bd80      	pop	{r7, pc}

0002392e <system_gclk_chan_get_config_defaults>:
{
   2392e:	b580      	push	{r7, lr}
   23930:	b082      	sub	sp, #8
   23932:	af00      	add	r7, sp, #0
   23934:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   23936:	687b      	ldr	r3, [r7, #4]
   23938:	2200      	movs	r2, #0
   2393a:	701a      	strb	r2, [r3, #0]
}
   2393c:	46c0      	nop			; (mov r8, r8)
   2393e:	46bd      	mov	sp, r7
   23940:	b002      	add	sp, #8
   23942:	bd80      	pop	{r7, pc}

00023944 <system_clock_source_xosc32k_get_config_defaults>:
{
   23944:	b580      	push	{r7, lr}
   23946:	b082      	sub	sp, #8
   23948:	af00      	add	r7, sp, #0
   2394a:	6078      	str	r0, [r7, #4]
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
   2394c:	687b      	ldr	r3, [r7, #4]
   2394e:	2200      	movs	r2, #0
   23950:	701a      	strb	r2, [r3, #0]
	config->startup_time        = SYSTEM_XOSC32K_STARTUP_16384;
   23952:	687b      	ldr	r3, [r7, #4]
   23954:	2204      	movs	r2, #4
   23956:	705a      	strb	r2, [r3, #1]
	config->auto_gain_control   = false;
   23958:	687b      	ldr	r3, [r7, #4]
   2395a:	2200      	movs	r2, #0
   2395c:	709a      	strb	r2, [r3, #2]
	config->frequency           = 32768UL;
   2395e:	687b      	ldr	r3, [r7, #4]
   23960:	2280      	movs	r2, #128	; 0x80
   23962:	0212      	lsls	r2, r2, #8
   23964:	609a      	str	r2, [r3, #8]
	config->enable_1khz_output  = false;
   23966:	687b      	ldr	r3, [r7, #4]
   23968:	2200      	movs	r2, #0
   2396a:	70da      	strb	r2, [r3, #3]
	config->enable_32khz_output = true;
   2396c:	687b      	ldr	r3, [r7, #4]
   2396e:	2201      	movs	r2, #1
   23970:	711a      	strb	r2, [r3, #4]
	config->run_in_standby      = false;
   23972:	687b      	ldr	r3, [r7, #4]
   23974:	2200      	movs	r2, #0
   23976:	731a      	strb	r2, [r3, #12]
	config->on_demand           = true;
   23978:	687b      	ldr	r3, [r7, #4]
   2397a:	2201      	movs	r2, #1
   2397c:	735a      	strb	r2, [r3, #13]
	config->write_once          = false;
   2397e:	687b      	ldr	r3, [r7, #4]
   23980:	2200      	movs	r2, #0
   23982:	739a      	strb	r2, [r3, #14]
}
   23984:	46c0      	nop			; (mov r8, r8)
   23986:	46bd      	mov	sp, r7
   23988:	b002      	add	sp, #8
   2398a:	bd80      	pop	{r7, pc}

0002398c <system_clock_source_osc8m_get_config_defaults>:
{
   2398c:	b580      	push	{r7, lr}
   2398e:	b082      	sub	sp, #8
   23990:	af00      	add	r7, sp, #0
   23992:	6078      	str	r0, [r7, #4]
	config->prescaler       = SYSTEM_OSC8M_DIV_8;
   23994:	687b      	ldr	r3, [r7, #4]
   23996:	2203      	movs	r2, #3
   23998:	701a      	strb	r2, [r3, #0]
	config->run_in_standby  = false;
   2399a:	687b      	ldr	r3, [r7, #4]
   2399c:	2200      	movs	r2, #0
   2399e:	705a      	strb	r2, [r3, #1]
	config->on_demand       = true;
   239a0:	687b      	ldr	r3, [r7, #4]
   239a2:	2201      	movs	r2, #1
   239a4:	709a      	strb	r2, [r3, #2]
}
   239a6:	46c0      	nop			; (mov r8, r8)
   239a8:	46bd      	mov	sp, r7
   239aa:	b002      	add	sp, #8
   239ac:	bd80      	pop	{r7, pc}

000239ae <system_clock_source_dfll_get_config_defaults>:
{
   239ae:	b580      	push	{r7, lr}
   239b0:	b082      	sub	sp, #8
   239b2:	af00      	add	r7, sp, #0
   239b4:	6078      	str	r0, [r7, #4]
	config->loop_mode       = SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN;
   239b6:	687b      	ldr	r3, [r7, #4]
   239b8:	2200      	movs	r2, #0
   239ba:	701a      	strb	r2, [r3, #0]
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
   239bc:	687b      	ldr	r3, [r7, #4]
   239be:	2200      	movs	r2, #0
   239c0:	805a      	strh	r2, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
   239c2:	687b      	ldr	r3, [r7, #4]
   239c4:	2200      	movs	r2, #0
   239c6:	809a      	strh	r2, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
   239c8:	687b      	ldr	r3, [r7, #4]
   239ca:	2200      	movs	r2, #0
   239cc:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
   239ce:	687b      	ldr	r3, [r7, #4]
   239d0:	2200      	movs	r2, #0
   239d2:	71da      	strb	r2, [r3, #7]
	config->on_demand       = true;
   239d4:	687b      	ldr	r3, [r7, #4]
   239d6:	2201      	movs	r2, #1
   239d8:	705a      	strb	r2, [r3, #1]
	config->coarse_value    = 0x1f / 4; /* Midpoint */
   239da:	687b      	ldr	r3, [r7, #4]
   239dc:	2207      	movs	r2, #7
   239de:	721a      	strb	r2, [r3, #8]
	config->fine_value      = 0xff / 4; /* Midpoint */
   239e0:	687b      	ldr	r3, [r7, #4]
   239e2:	223f      	movs	r2, #63	; 0x3f
   239e4:	815a      	strh	r2, [r3, #10]
	config->coarse_max_step = 1;
   239e6:	687b      	ldr	r3, [r7, #4]
   239e8:	2201      	movs	r2, #1
   239ea:	731a      	strb	r2, [r3, #12]
	config->fine_max_step   = 1;
   239ec:	687b      	ldr	r3, [r7, #4]
   239ee:	2201      	movs	r2, #1
   239f0:	81da      	strh	r2, [r3, #14]
	config->multiply_factor = 6; /* Multiply 8MHz by 6 to get 48MHz */
   239f2:	687b      	ldr	r3, [r7, #4]
   239f4:	2206      	movs	r2, #6
   239f6:	821a      	strh	r2, [r3, #16]
}
   239f8:	46c0      	nop			; (mov r8, r8)
   239fa:	46bd      	mov	sp, r7
   239fc:	b002      	add	sp, #8
   239fe:	bd80      	pop	{r7, pc}

00023a00 <system_cpu_clock_set_divider>:
{
   23a00:	b580      	push	{r7, lr}
   23a02:	b082      	sub	sp, #8
   23a04:	af00      	add	r7, sp, #0
   23a06:	0002      	movs	r2, r0
   23a08:	1dfb      	adds	r3, r7, #7
   23a0a:	701a      	strb	r2, [r3, #0]
	PM->CPUSEL.reg = (uint32_t)divider;
   23a0c:	4a03      	ldr	r2, [pc, #12]	; (23a1c <system_cpu_clock_set_divider+0x1c>)
   23a0e:	1dfb      	adds	r3, r7, #7
   23a10:	781b      	ldrb	r3, [r3, #0]
   23a12:	7213      	strb	r3, [r2, #8]
}
   23a14:	46c0      	nop			; (mov r8, r8)
   23a16:	46bd      	mov	sp, r7
   23a18:	b002      	add	sp, #8
   23a1a:	bd80      	pop	{r7, pc}
   23a1c:	40000400 	.word	0x40000400

00023a20 <system_apb_clock_set_divider>:
{
   23a20:	b580      	push	{r7, lr}
   23a22:	b082      	sub	sp, #8
   23a24:	af00      	add	r7, sp, #0
   23a26:	0002      	movs	r2, r0
   23a28:	1dfb      	adds	r3, r7, #7
   23a2a:	701a      	strb	r2, [r3, #0]
   23a2c:	1dbb      	adds	r3, r7, #6
   23a2e:	1c0a      	adds	r2, r1, #0
   23a30:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   23a32:	1dfb      	adds	r3, r7, #7
   23a34:	781b      	ldrb	r3, [r3, #0]
   23a36:	2b01      	cmp	r3, #1
   23a38:	d008      	beq.n	23a4c <system_apb_clock_set_divider+0x2c>
   23a3a:	2b02      	cmp	r3, #2
   23a3c:	d00b      	beq.n	23a56 <system_apb_clock_set_divider+0x36>
   23a3e:	2b00      	cmp	r3, #0
   23a40:	d10e      	bne.n	23a60 <system_apb_clock_set_divider+0x40>
			PM->APBASEL.reg = (uint32_t)divider;
   23a42:	4a0b      	ldr	r2, [pc, #44]	; (23a70 <system_apb_clock_set_divider+0x50>)
   23a44:	1dbb      	adds	r3, r7, #6
   23a46:	781b      	ldrb	r3, [r3, #0]
   23a48:	7253      	strb	r3, [r2, #9]
			break;
   23a4a:	e00b      	b.n	23a64 <system_apb_clock_set_divider+0x44>
			PM->APBBSEL.reg = (uint32_t)divider;
   23a4c:	4a08      	ldr	r2, [pc, #32]	; (23a70 <system_apb_clock_set_divider+0x50>)
   23a4e:	1dbb      	adds	r3, r7, #6
   23a50:	781b      	ldrb	r3, [r3, #0]
   23a52:	7293      	strb	r3, [r2, #10]
			break;
   23a54:	e006      	b.n	23a64 <system_apb_clock_set_divider+0x44>
			PM->APBCSEL.reg = (uint32_t)divider;
   23a56:	4a06      	ldr	r2, [pc, #24]	; (23a70 <system_apb_clock_set_divider+0x50>)
   23a58:	1dbb      	adds	r3, r7, #6
   23a5a:	781b      	ldrb	r3, [r3, #0]
   23a5c:	72d3      	strb	r3, [r2, #11]
			break;
   23a5e:	e001      	b.n	23a64 <system_apb_clock_set_divider+0x44>
			return STATUS_ERR_INVALID_ARG;
   23a60:	2317      	movs	r3, #23
   23a62:	e000      	b.n	23a66 <system_apb_clock_set_divider+0x46>
	return STATUS_OK;
   23a64:	2300      	movs	r3, #0
}
   23a66:	0018      	movs	r0, r3
   23a68:	46bd      	mov	sp, r7
   23a6a:	b002      	add	sp, #8
   23a6c:	bd80      	pop	{r7, pc}
   23a6e:	46c0      	nop			; (mov r8, r8)
   23a70:	40000400 	.word	0x40000400

00023a74 <system_flash_set_waitstates>:
 * can be found in the electrical characteristics of the device.
 *
 * \param[in] wait_states Number of wait states to use for internal flash
 */
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
   23a74:	b580      	push	{r7, lr}
   23a76:	b082      	sub	sp, #8
   23a78:	af00      	add	r7, sp, #0
   23a7a:	0002      	movs	r2, r0
   23a7c:	1dfb      	adds	r3, r7, #7
   23a7e:	701a      	strb	r2, [r3, #0]
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
   23a80:	4a08      	ldr	r2, [pc, #32]	; (23aa4 <system_flash_set_waitstates+0x30>)
   23a82:	1dfb      	adds	r3, r7, #7
   23a84:	781b      	ldrb	r3, [r3, #0]
   23a86:	210f      	movs	r1, #15
   23a88:	400b      	ands	r3, r1
   23a8a:	b2d9      	uxtb	r1, r3
   23a8c:	6853      	ldr	r3, [r2, #4]
   23a8e:	200f      	movs	r0, #15
   23a90:	4001      	ands	r1, r0
   23a92:	0049      	lsls	r1, r1, #1
   23a94:	201e      	movs	r0, #30
   23a96:	4383      	bics	r3, r0
   23a98:	430b      	orrs	r3, r1
   23a9a:	6053      	str	r3, [r2, #4]
}
   23a9c:	46c0      	nop			; (mov r8, r8)
   23a9e:	46bd      	mov	sp, r7
   23aa0:	b002      	add	sp, #8
   23aa2:	bd80      	pop	{r7, pc}
   23aa4:	41004000 	.word	0x41004000

00023aa8 <_system_dfll_wait_for_sync>:
/**
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
   23aa8:	b580      	push	{r7, lr}
   23aaa:	af00      	add	r7, sp, #0
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
   23aac:	46c0      	nop			; (mov r8, r8)
   23aae:	4b04      	ldr	r3, [pc, #16]	; (23ac0 <_system_dfll_wait_for_sync+0x18>)
   23ab0:	68db      	ldr	r3, [r3, #12]
   23ab2:	2210      	movs	r2, #16
   23ab4:	4013      	ands	r3, r2
   23ab6:	d0fa      	beq.n	23aae <_system_dfll_wait_for_sync+0x6>
		/* Wait for DFLL sync */
	}
}
   23ab8:	46c0      	nop			; (mov r8, r8)
   23aba:	46bd      	mov	sp, r7
   23abc:	bd80      	pop	{r7, pc}
   23abe:	46c0      	nop			; (mov r8, r8)
   23ac0:	40000800 	.word	0x40000800

00023ac4 <_system_clock_source_dfll_set_config_errata_9905>:
		/* Wait for OSC32K sync */
	}
}

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{
   23ac4:	b580      	push	{r7, lr}
   23ac6:	af00      	add	r7, sp, #0

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
   23ac8:	4b0c      	ldr	r3, [pc, #48]	; (23afc <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   23aca:	2202      	movs	r2, #2
   23acc:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
   23ace:	4b0c      	ldr	r3, [pc, #48]	; (23b00 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
   23ad0:	4798      	blx	r3

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
   23ad2:	4a0a      	ldr	r2, [pc, #40]	; (23afc <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   23ad4:	4b0b      	ldr	r3, [pc, #44]	; (23b04 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
   23ad6:	689b      	ldr	r3, [r3, #8]
   23ad8:	62d3      	str	r3, [r2, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
   23ada:	4a08      	ldr	r2, [pc, #32]	; (23afc <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   23adc:	4b09      	ldr	r3, [pc, #36]	; (23b04 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
   23ade:	685b      	ldr	r3, [r3, #4]
   23ae0:	6293      	str	r3, [r2, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
   23ae2:	4b06      	ldr	r3, [pc, #24]	; (23afc <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   23ae4:	2200      	movs	r2, #0
   23ae6:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
   23ae8:	4b05      	ldr	r3, [pc, #20]	; (23b00 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
   23aea:	4798      	blx	r3
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
   23aec:	4a03      	ldr	r2, [pc, #12]	; (23afc <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   23aee:	4b05      	ldr	r3, [pc, #20]	; (23b04 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
   23af0:	681b      	ldr	r3, [r3, #0]
   23af2:	b29b      	uxth	r3, r3
   23af4:	8493      	strh	r3, [r2, #36]	; 0x24
}
   23af6:	46c0      	nop			; (mov r8, r8)
   23af8:	46bd      	mov	sp, r7
   23afa:	bd80      	pop	{r7, pc}
   23afc:	40000800 	.word	0x40000800
   23b00:	00023aa9 	.word	0x00023aa9
   23b04:	200004f0 	.word	0x200004f0

00023b08 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
   23b08:	b580      	push	{r7, lr}
   23b0a:	b082      	sub	sp, #8
   23b0c:	af00      	add	r7, sp, #0
   23b0e:	0002      	movs	r2, r0
   23b10:	1dfb      	adds	r3, r7, #7
   23b12:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
   23b14:	1dfb      	adds	r3, r7, #7
   23b16:	781b      	ldrb	r3, [r3, #0]
   23b18:	2b08      	cmp	r3, #8
   23b1a:	d841      	bhi.n	23ba0 <system_clock_source_get_hz+0x98>
   23b1c:	009a      	lsls	r2, r3, #2
   23b1e:	4b23      	ldr	r3, [pc, #140]	; (23bac <system_clock_source_get_hz+0xa4>)
   23b20:	18d3      	adds	r3, r2, r3
   23b22:	681b      	ldr	r3, [r3, #0]
   23b24:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
   23b26:	4b22      	ldr	r3, [pc, #136]	; (23bb0 <system_clock_source_get_hz+0xa8>)
   23b28:	691b      	ldr	r3, [r3, #16]
   23b2a:	e03a      	b.n	23ba2 <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
   23b2c:	4b21      	ldr	r3, [pc, #132]	; (23bb4 <system_clock_source_get_hz+0xac>)
   23b2e:	6a1b      	ldr	r3, [r3, #32]
   23b30:	059b      	lsls	r3, r3, #22
   23b32:	0f9b      	lsrs	r3, r3, #30
   23b34:	b2db      	uxtb	r3, r3
   23b36:	001a      	movs	r2, r3
   23b38:	4b1f      	ldr	r3, [pc, #124]	; (23bb8 <system_clock_source_get_hz+0xb0>)
   23b3a:	40d3      	lsrs	r3, r2
   23b3c:	e031      	b.n	23ba2 <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
   23b3e:	2380      	movs	r3, #128	; 0x80
   23b40:	021b      	lsls	r3, r3, #8
   23b42:	e02e      	b.n	23ba2 <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;
   23b44:	2380      	movs	r3, #128	; 0x80
   23b46:	021b      	lsls	r3, r3, #8
   23b48:	e02b      	b.n	23ba2 <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
   23b4a:	4b19      	ldr	r3, [pc, #100]	; (23bb0 <system_clock_source_get_hz+0xa8>)
   23b4c:	695b      	ldr	r3, [r3, #20]
   23b4e:	e028      	b.n	23ba2 <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
   23b50:	4b17      	ldr	r3, [pc, #92]	; (23bb0 <system_clock_source_get_hz+0xa8>)
   23b52:	681b      	ldr	r3, [r3, #0]
   23b54:	2202      	movs	r2, #2
   23b56:	4013      	ands	r3, r2
   23b58:	d101      	bne.n	23b5e <system_clock_source_get_hz+0x56>
			return 0;
   23b5a:	2300      	movs	r3, #0
   23b5c:	e021      	b.n	23ba2 <system_clock_source_get_hz+0x9a>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();
   23b5e:	4b17      	ldr	r3, [pc, #92]	; (23bbc <system_clock_source_get_hz+0xb4>)
   23b60:	4798      	blx	r3

		/* Check if operating in closed loop (USB) mode */
		switch(_system_clock_inst.dfll.control &
   23b62:	4b13      	ldr	r3, [pc, #76]	; (23bb0 <system_clock_source_get_hz+0xa8>)
   23b64:	681b      	ldr	r3, [r3, #0]
   23b66:	2224      	movs	r2, #36	; 0x24
   23b68:	4013      	ands	r3, r2
   23b6a:	2b04      	cmp	r3, #4
   23b6c:	d109      	bne.n	23b82 <system_clock_source_get_hz+0x7a>
				(SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_USBCRM)) {
		case SYSCTRL_DFLLCTRL_MODE:
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
   23b6e:	2000      	movs	r0, #0
   23b70:	4b13      	ldr	r3, [pc, #76]	; (23bc0 <system_clock_source_get_hz+0xb8>)
   23b72:	4798      	blx	r3
   23b74:	0002      	movs	r2, r0
					(_system_clock_inst.dfll.mul & 0xffff);
   23b76:	4b0e      	ldr	r3, [pc, #56]	; (23bb0 <system_clock_source_get_hz+0xa8>)
   23b78:	689b      	ldr	r3, [r3, #8]
   23b7a:	041b      	lsls	r3, r3, #16
   23b7c:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
   23b7e:	4353      	muls	r3, r2
   23b80:	e00f      	b.n	23ba2 <system_clock_source_get_hz+0x9a>
		default:
			return 48000000UL;
   23b82:	4b10      	ldr	r3, [pc, #64]	; (23bc4 <system_clock_source_get_hz+0xbc>)
   23b84:	e00d      	b.n	23ba2 <system_clock_source_get_hz+0x9a>
		}

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
   23b86:	4a0b      	ldr	r2, [pc, #44]	; (23bb4 <system_clock_source_get_hz+0xac>)
   23b88:	2350      	movs	r3, #80	; 0x50
   23b8a:	5cd3      	ldrb	r3, [r2, r3]
   23b8c:	b2db      	uxtb	r3, r3
   23b8e:	001a      	movs	r2, r3
   23b90:	2304      	movs	r3, #4
   23b92:	4013      	ands	r3, r2
   23b94:	d101      	bne.n	23b9a <system_clock_source_get_hz+0x92>
			return 0;
   23b96:	2300      	movs	r3, #0
   23b98:	e003      	b.n	23ba2 <system_clock_source_get_hz+0x9a>
		}

		return _system_clock_inst.dpll.frequency;
   23b9a:	4b05      	ldr	r3, [pc, #20]	; (23bb0 <system_clock_source_get_hz+0xa8>)
   23b9c:	68db      	ldr	r3, [r3, #12]
   23b9e:	e000      	b.n	23ba2 <system_clock_source_get_hz+0x9a>
#endif

	default:
		return 0;
   23ba0:	2300      	movs	r3, #0
	}
}
   23ba2:	0018      	movs	r0, r3
   23ba4:	46bd      	mov	sp, r7
   23ba6:	b002      	add	sp, #8
   23ba8:	bd80      	pop	{r7, pc}
   23baa:	46c0      	nop			; (mov r8, r8)
   23bac:	0002a8b4 	.word	0x0002a8b4
   23bb0:	200004f0 	.word	0x200004f0
   23bb4:	40000800 	.word	0x40000800
   23bb8:	007a1200 	.word	0x007a1200
   23bbc:	00023aa9 	.word	0x00023aa9
   23bc0:	00024749 	.word	0x00024749
   23bc4:	02dc6c00 	.word	0x02dc6c00

00023bc8 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
   23bc8:	b580      	push	{r7, lr}
   23bca:	b084      	sub	sp, #16
   23bcc:	af00      	add	r7, sp, #0
   23bce:	6078      	str	r0, [r7, #4]
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
   23bd0:	4b1a      	ldr	r3, [pc, #104]	; (23c3c <system_clock_source_osc8m_set_config+0x74>)
   23bd2:	6a1b      	ldr	r3, [r3, #32]
   23bd4:	60fb      	str	r3, [r7, #12]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
   23bd6:	687b      	ldr	r3, [r7, #4]
   23bd8:	781b      	ldrb	r3, [r3, #0]
   23bda:	1c1a      	adds	r2, r3, #0
   23bdc:	2303      	movs	r3, #3
   23bde:	4013      	ands	r3, r2
   23be0:	b2da      	uxtb	r2, r3
   23be2:	230d      	movs	r3, #13
   23be4:	18fb      	adds	r3, r7, r3
   23be6:	2103      	movs	r1, #3
   23be8:	400a      	ands	r2, r1
   23bea:	0010      	movs	r0, r2
   23bec:	781a      	ldrb	r2, [r3, #0]
   23bee:	2103      	movs	r1, #3
   23bf0:	438a      	bics	r2, r1
   23bf2:	1c11      	adds	r1, r2, #0
   23bf4:	1c02      	adds	r2, r0, #0
   23bf6:	430a      	orrs	r2, r1
   23bf8:	701a      	strb	r2, [r3, #0]
	temp.bit.ONDEMAND = config->on_demand;
   23bfa:	687b      	ldr	r3, [r7, #4]
   23bfc:	789a      	ldrb	r2, [r3, #2]
   23bfe:	230c      	movs	r3, #12
   23c00:	18fb      	adds	r3, r7, r3
   23c02:	01d0      	lsls	r0, r2, #7
   23c04:	781a      	ldrb	r2, [r3, #0]
   23c06:	217f      	movs	r1, #127	; 0x7f
   23c08:	400a      	ands	r2, r1
   23c0a:	1c11      	adds	r1, r2, #0
   23c0c:	1c02      	adds	r2, r0, #0
   23c0e:	430a      	orrs	r2, r1
   23c10:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
   23c12:	687b      	ldr	r3, [r7, #4]
   23c14:	785a      	ldrb	r2, [r3, #1]
   23c16:	230c      	movs	r3, #12
   23c18:	18fb      	adds	r3, r7, r3
   23c1a:	2101      	movs	r1, #1
   23c1c:	400a      	ands	r2, r1
   23c1e:	0190      	lsls	r0, r2, #6
   23c20:	781a      	ldrb	r2, [r3, #0]
   23c22:	2140      	movs	r1, #64	; 0x40
   23c24:	438a      	bics	r2, r1
   23c26:	1c11      	adds	r1, r2, #0
   23c28:	1c02      	adds	r2, r0, #0
   23c2a:	430a      	orrs	r2, r1
   23c2c:	701a      	strb	r2, [r3, #0]

	SYSCTRL->OSC8M = temp;
   23c2e:	4b03      	ldr	r3, [pc, #12]	; (23c3c <system_clock_source_osc8m_set_config+0x74>)
   23c30:	68fa      	ldr	r2, [r7, #12]
   23c32:	621a      	str	r2, [r3, #32]
}
   23c34:	46c0      	nop			; (mov r8, r8)
   23c36:	46bd      	mov	sp, r7
   23c38:	b004      	add	sp, #16
   23c3a:	bd80      	pop	{r7, pc}
   23c3c:	40000800 	.word	0x40000800

00023c40 <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
   23c40:	b580      	push	{r7, lr}
   23c42:	b084      	sub	sp, #16
   23c44:	af00      	add	r7, sp, #0
   23c46:	6078      	str	r0, [r7, #4]
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
   23c48:	4a43      	ldr	r2, [pc, #268]	; (23d58 <system_clock_source_xosc32k_set_config+0x118>)
   23c4a:	230c      	movs	r3, #12
   23c4c:	18fb      	adds	r3, r7, r3
   23c4e:	8a92      	ldrh	r2, [r2, #20]
   23c50:	801a      	strh	r2, [r3, #0]

	temp.bit.STARTUP = config->startup_time;
   23c52:	687b      	ldr	r3, [r7, #4]
   23c54:	785b      	ldrb	r3, [r3, #1]
   23c56:	1c1a      	adds	r2, r3, #0
   23c58:	2307      	movs	r3, #7
   23c5a:	4013      	ands	r3, r2
   23c5c:	b2da      	uxtb	r2, r3
   23c5e:	230c      	movs	r3, #12
   23c60:	18fb      	adds	r3, r7, r3
   23c62:	2107      	movs	r1, #7
   23c64:	400a      	ands	r2, r1
   23c66:	0010      	movs	r0, r2
   23c68:	785a      	ldrb	r2, [r3, #1]
   23c6a:	2107      	movs	r1, #7
   23c6c:	438a      	bics	r2, r1
   23c6e:	1c11      	adds	r1, r2, #0
   23c70:	1c02      	adds	r2, r0, #0
   23c72:	430a      	orrs	r2, r1
   23c74:	705a      	strb	r2, [r3, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
   23c76:	687b      	ldr	r3, [r7, #4]
   23c78:	781b      	ldrb	r3, [r3, #0]
   23c7a:	2b00      	cmp	r3, #0
   23c7c:	d106      	bne.n	23c8c <system_clock_source_xosc32k_set_config+0x4c>
		temp.bit.XTALEN = 1;
   23c7e:	230c      	movs	r3, #12
   23c80:	18fb      	adds	r3, r7, r3
   23c82:	781a      	ldrb	r2, [r3, #0]
   23c84:	2104      	movs	r1, #4
   23c86:	430a      	orrs	r2, r1
   23c88:	701a      	strb	r2, [r3, #0]
   23c8a:	e005      	b.n	23c98 <system_clock_source_xosc32k_set_config+0x58>
	} else {
		temp.bit.XTALEN = 0;
   23c8c:	230c      	movs	r3, #12
   23c8e:	18fb      	adds	r3, r7, r3
   23c90:	781a      	ldrb	r2, [r3, #0]
   23c92:	2104      	movs	r1, #4
   23c94:	438a      	bics	r2, r1
   23c96:	701a      	strb	r2, [r3, #0]
	}

	temp.bit.AAMPEN = config->auto_gain_control;
   23c98:	687b      	ldr	r3, [r7, #4]
   23c9a:	789a      	ldrb	r2, [r3, #2]
   23c9c:	230c      	movs	r3, #12
   23c9e:	18fb      	adds	r3, r7, r3
   23ca0:	2101      	movs	r1, #1
   23ca2:	400a      	ands	r2, r1
   23ca4:	0150      	lsls	r0, r2, #5
   23ca6:	781a      	ldrb	r2, [r3, #0]
   23ca8:	2120      	movs	r1, #32
   23caa:	438a      	bics	r2, r1
   23cac:	1c11      	adds	r1, r2, #0
   23cae:	1c02      	adds	r2, r0, #0
   23cb0:	430a      	orrs	r2, r1
   23cb2:	701a      	strb	r2, [r3, #0]
	temp.bit.EN1K = config->enable_1khz_output;
   23cb4:	687b      	ldr	r3, [r7, #4]
   23cb6:	78da      	ldrb	r2, [r3, #3]
   23cb8:	230c      	movs	r3, #12
   23cba:	18fb      	adds	r3, r7, r3
   23cbc:	2101      	movs	r1, #1
   23cbe:	400a      	ands	r2, r1
   23cc0:	0110      	lsls	r0, r2, #4
   23cc2:	781a      	ldrb	r2, [r3, #0]
   23cc4:	2110      	movs	r1, #16
   23cc6:	438a      	bics	r2, r1
   23cc8:	1c11      	adds	r1, r2, #0
   23cca:	1c02      	adds	r2, r0, #0
   23ccc:	430a      	orrs	r2, r1
   23cce:	701a      	strb	r2, [r3, #0]
	temp.bit.EN32K = config->enable_32khz_output;
   23cd0:	687b      	ldr	r3, [r7, #4]
   23cd2:	791a      	ldrb	r2, [r3, #4]
   23cd4:	230c      	movs	r3, #12
   23cd6:	18fb      	adds	r3, r7, r3
   23cd8:	2101      	movs	r1, #1
   23cda:	400a      	ands	r2, r1
   23cdc:	00d0      	lsls	r0, r2, #3
   23cde:	781a      	ldrb	r2, [r3, #0]
   23ce0:	2108      	movs	r1, #8
   23ce2:	438a      	bics	r2, r1
   23ce4:	1c11      	adds	r1, r2, #0
   23ce6:	1c02      	adds	r2, r0, #0
   23ce8:	430a      	orrs	r2, r1
   23cea:	701a      	strb	r2, [r3, #0]

	temp.bit.ONDEMAND = config->on_demand;
   23cec:	687b      	ldr	r3, [r7, #4]
   23cee:	7b5a      	ldrb	r2, [r3, #13]
   23cf0:	230c      	movs	r3, #12
   23cf2:	18fb      	adds	r3, r7, r3
   23cf4:	01d0      	lsls	r0, r2, #7
   23cf6:	781a      	ldrb	r2, [r3, #0]
   23cf8:	217f      	movs	r1, #127	; 0x7f
   23cfa:	400a      	ands	r2, r1
   23cfc:	1c11      	adds	r1, r2, #0
   23cfe:	1c02      	adds	r2, r0, #0
   23d00:	430a      	orrs	r2, r1
   23d02:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
   23d04:	687b      	ldr	r3, [r7, #4]
   23d06:	7b1a      	ldrb	r2, [r3, #12]
   23d08:	230c      	movs	r3, #12
   23d0a:	18fb      	adds	r3, r7, r3
   23d0c:	2101      	movs	r1, #1
   23d0e:	400a      	ands	r2, r1
   23d10:	0190      	lsls	r0, r2, #6
   23d12:	781a      	ldrb	r2, [r3, #0]
   23d14:	2140      	movs	r1, #64	; 0x40
   23d16:	438a      	bics	r2, r1
   23d18:	1c11      	adds	r1, r2, #0
   23d1a:	1c02      	adds	r2, r0, #0
   23d1c:	430a      	orrs	r2, r1
   23d1e:	701a      	strb	r2, [r3, #0]
	temp.bit.WRTLOCK  = config->write_once;
   23d20:	687b      	ldr	r3, [r7, #4]
   23d22:	7b9a      	ldrb	r2, [r3, #14]
   23d24:	230c      	movs	r3, #12
   23d26:	18fb      	adds	r3, r7, r3
   23d28:	2101      	movs	r1, #1
   23d2a:	400a      	ands	r2, r1
   23d2c:	0110      	lsls	r0, r2, #4
   23d2e:	785a      	ldrb	r2, [r3, #1]
   23d30:	2110      	movs	r1, #16
   23d32:	438a      	bics	r2, r1
   23d34:	1c11      	adds	r1, r2, #0
   23d36:	1c02      	adds	r2, r0, #0
   23d38:	430a      	orrs	r2, r1
   23d3a:	705a      	strb	r2, [r3, #1]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
   23d3c:	687b      	ldr	r3, [r7, #4]
   23d3e:	689a      	ldr	r2, [r3, #8]
   23d40:	4b06      	ldr	r3, [pc, #24]	; (23d5c <system_clock_source_xosc32k_set_config+0x11c>)
   23d42:	615a      	str	r2, [r3, #20]

	SYSCTRL->XOSC32K = temp;
   23d44:	4a04      	ldr	r2, [pc, #16]	; (23d58 <system_clock_source_xosc32k_set_config+0x118>)
   23d46:	230c      	movs	r3, #12
   23d48:	18fb      	adds	r3, r7, r3
   23d4a:	881b      	ldrh	r3, [r3, #0]
   23d4c:	8293      	strh	r3, [r2, #20]
}
   23d4e:	46c0      	nop			; (mov r8, r8)
   23d50:	46bd      	mov	sp, r7
   23d52:	b004      	add	sp, #16
   23d54:	bd80      	pop	{r7, pc}
   23d56:	46c0      	nop			; (mov r8, r8)
   23d58:	40000800 	.word	0x40000800
   23d5c:	200004f0 	.word	0x200004f0

00023d60 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
   23d60:	b580      	push	{r7, lr}
   23d62:	b082      	sub	sp, #8
   23d64:	af00      	add	r7, sp, #0
   23d66:	6078      	str	r0, [r7, #4]
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
   23d68:	687b      	ldr	r3, [r7, #4]
   23d6a:	7a1b      	ldrb	r3, [r3, #8]
   23d6c:	029b      	lsls	r3, r3, #10
   23d6e:	041b      	lsls	r3, r3, #16
   23d70:	0c1a      	lsrs	r2, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
   23d72:	687b      	ldr	r3, [r7, #4]
   23d74:	895b      	ldrh	r3, [r3, #10]
   23d76:	059b      	lsls	r3, r3, #22
   23d78:	0d9b      	lsrs	r3, r3, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
   23d7a:	431a      	orrs	r2, r3
	_system_clock_inst.dfll.val =
   23d7c:	4b2a      	ldr	r3, [pc, #168]	; (23e28 <system_clock_source_dfll_set_config+0xc8>)
   23d7e:	605a      	str	r2, [r3, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
   23d80:	687b      	ldr	r3, [r7, #4]
   23d82:	799a      	ldrb	r2, [r3, #6]
			(uint32_t)config->stable_tracking |
   23d84:	687b      	ldr	r3, [r7, #4]
   23d86:	79db      	ldrb	r3, [r3, #7]
			(uint32_t)config->wakeup_lock     |
   23d88:	4313      	orrs	r3, r2
   23d8a:	b2db      	uxtb	r3, r3
   23d8c:	001a      	movs	r2, r3
			(uint32_t)config->quick_lock      |
   23d8e:	687b      	ldr	r3, [r7, #4]
   23d90:	885b      	ldrh	r3, [r3, #2]
			(uint32_t)config->stable_tracking |
   23d92:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
   23d94:	687a      	ldr	r2, [r7, #4]
   23d96:	8892      	ldrh	r2, [r2, #4]
			(uint32_t)config->quick_lock      |
   23d98:	431a      	orrs	r2, r3
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
   23d9a:	687b      	ldr	r3, [r7, #4]
   23d9c:	785b      	ldrb	r3, [r3, #1]
   23d9e:	01db      	lsls	r3, r3, #7
			(uint32_t)config->chill_cycle     |
   23da0:	431a      	orrs	r2, r3
	_system_clock_inst.dfll.control =
   23da2:	4b21      	ldr	r3, [pc, #132]	; (23e28 <system_clock_source_dfll_set_config+0xc8>)
   23da4:	601a      	str	r2, [r3, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
   23da6:	687b      	ldr	r3, [r7, #4]
   23da8:	781b      	ldrb	r3, [r3, #0]
   23daa:	2b04      	cmp	r3, #4
   23dac:	d116      	bne.n	23ddc <system_clock_source_dfll_set_config+0x7c>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
   23dae:	687b      	ldr	r3, [r7, #4]
   23db0:	7b1b      	ldrb	r3, [r3, #12]
   23db2:	069b      	lsls	r3, r3, #26
   23db4:	001a      	movs	r2, r3
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
   23db6:	687b      	ldr	r3, [r7, #4]
   23db8:	89db      	ldrh	r3, [r3, #14]
   23dba:	041b      	lsls	r3, r3, #16
   23dbc:	0019      	movs	r1, r3
   23dbe:	4b1b      	ldr	r3, [pc, #108]	; (23e2c <system_clock_source_dfll_set_config+0xcc>)
   23dc0:	400b      	ands	r3, r1
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
   23dc2:	4313      	orrs	r3, r2
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
   23dc4:	687a      	ldr	r2, [r7, #4]
   23dc6:	8a12      	ldrh	r2, [r2, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
   23dc8:	431a      	orrs	r2, r3
		_system_clock_inst.dfll.mul =
   23dca:	4b17      	ldr	r3, [pc, #92]	; (23e28 <system_clock_source_dfll_set_config+0xc8>)
   23dcc:	609a      	str	r2, [r3, #8]

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
   23dce:	4b16      	ldr	r3, [pc, #88]	; (23e28 <system_clock_source_dfll_set_config+0xc8>)
   23dd0:	681b      	ldr	r3, [r3, #0]
   23dd2:	687a      	ldr	r2, [r7, #4]
   23dd4:	7812      	ldrb	r2, [r2, #0]
   23dd6:	431a      	orrs	r2, r3
   23dd8:	4b13      	ldr	r3, [pc, #76]	; (23e28 <system_clock_source_dfll_set_config+0xc8>)
   23dda:	601a      	str	r2, [r3, #0]
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
   23ddc:	687b      	ldr	r3, [r7, #4]
   23dde:	781b      	ldrb	r3, [r3, #0]
   23de0:	2b20      	cmp	r3, #32
   23de2:	d11c      	bne.n	23e1e <system_clock_source_dfll_set_config+0xbe>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
   23de4:	687b      	ldr	r3, [r7, #4]
   23de6:	7b1b      	ldrb	r3, [r3, #12]
   23de8:	069b      	lsls	r3, r3, #26
   23dea:	001a      	movs	r2, r3
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
   23dec:	687b      	ldr	r3, [r7, #4]
   23dee:	89db      	ldrh	r3, [r3, #14]
   23df0:	041b      	lsls	r3, r3, #16
   23df2:	0019      	movs	r1, r3
   23df4:	4b0d      	ldr	r3, [pc, #52]	; (23e2c <system_clock_source_dfll_set_config+0xcc>)
   23df6:	400b      	ands	r3, r1
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
   23df8:	4313      	orrs	r3, r2
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
   23dfa:	687a      	ldr	r2, [r7, #4]
   23dfc:	8a12      	ldrh	r2, [r2, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
   23dfe:	431a      	orrs	r2, r3
		_system_clock_inst.dfll.mul =
   23e00:	4b09      	ldr	r3, [pc, #36]	; (23e28 <system_clock_source_dfll_set_config+0xc8>)
   23e02:	609a      	str	r2, [r3, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
   23e04:	4b08      	ldr	r3, [pc, #32]	; (23e28 <system_clock_source_dfll_set_config+0xc8>)
   23e06:	681b      	ldr	r3, [r3, #0]
   23e08:	687a      	ldr	r2, [r7, #4]
   23e0a:	7812      	ldrb	r2, [r2, #0]
   23e0c:	2104      	movs	r1, #4
   23e0e:	430a      	orrs	r2, r1
   23e10:	b2d2      	uxtb	r2, r2
   23e12:	4313      	orrs	r3, r2
   23e14:	2280      	movs	r2, #128	; 0x80
   23e16:	00d2      	lsls	r2, r2, #3
   23e18:	431a      	orrs	r2, r3
   23e1a:	4b03      	ldr	r3, [pc, #12]	; (23e28 <system_clock_source_dfll_set_config+0xc8>)
   23e1c:	601a      	str	r2, [r3, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
   23e1e:	46c0      	nop			; (mov r8, r8)
   23e20:	46bd      	mov	sp, r7
   23e22:	b002      	add	sp, #8
   23e24:	bd80      	pop	{r7, pc}
   23e26:	46c0      	nop			; (mov r8, r8)
   23e28:	200004f0 	.word	0x200004f0
   23e2c:	03ff0000 	.word	0x03ff0000

00023e30 <system_clock_source_enable>:
 * \retval STATUS_ERR_INVALID_ARG  The clock source is not available on this
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
   23e30:	b580      	push	{r7, lr}
   23e32:	b082      	sub	sp, #8
   23e34:	af00      	add	r7, sp, #0
   23e36:	0002      	movs	r2, r0
   23e38:	1dfb      	adds	r3, r7, #7
   23e3a:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
   23e3c:	1dfb      	adds	r3, r7, #7
   23e3e:	781b      	ldrb	r3, [r3, #0]
   23e40:	2b08      	cmp	r3, #8
   23e42:	d83b      	bhi.n	23ebc <system_clock_source_enable+0x8c>
   23e44:	009a      	lsls	r2, r3, #2
   23e46:	4b21      	ldr	r3, [pc, #132]	; (23ecc <system_clock_source_enable+0x9c>)
   23e48:	18d3      	adds	r3, r2, r3
   23e4a:	681b      	ldr	r3, [r3, #0]
   23e4c:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
   23e4e:	4b20      	ldr	r3, [pc, #128]	; (23ed0 <system_clock_source_enable+0xa0>)
   23e50:	4a1f      	ldr	r2, [pc, #124]	; (23ed0 <system_clock_source_enable+0xa0>)
   23e52:	6a12      	ldr	r2, [r2, #32]
   23e54:	2102      	movs	r1, #2
   23e56:	430a      	orrs	r2, r1
   23e58:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
   23e5a:	2300      	movs	r3, #0
   23e5c:	e031      	b.n	23ec2 <system_clock_source_enable+0x92>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
   23e5e:	4b1c      	ldr	r3, [pc, #112]	; (23ed0 <system_clock_source_enable+0xa0>)
   23e60:	4a1b      	ldr	r2, [pc, #108]	; (23ed0 <system_clock_source_enable+0xa0>)
   23e62:	6992      	ldr	r2, [r2, #24]
   23e64:	2102      	movs	r1, #2
   23e66:	430a      	orrs	r2, r1
   23e68:	619a      	str	r2, [r3, #24]
		break;
   23e6a:	e029      	b.n	23ec0 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
   23e6c:	4a18      	ldr	r2, [pc, #96]	; (23ed0 <system_clock_source_enable+0xa0>)
   23e6e:	4b18      	ldr	r3, [pc, #96]	; (23ed0 <system_clock_source_enable+0xa0>)
   23e70:	8a1b      	ldrh	r3, [r3, #16]
   23e72:	b29b      	uxth	r3, r3
   23e74:	2102      	movs	r1, #2
   23e76:	430b      	orrs	r3, r1
   23e78:	b29b      	uxth	r3, r3
   23e7a:	8213      	strh	r3, [r2, #16]
		break;
   23e7c:	e020      	b.n	23ec0 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
   23e7e:	4a14      	ldr	r2, [pc, #80]	; (23ed0 <system_clock_source_enable+0xa0>)
   23e80:	4b13      	ldr	r3, [pc, #76]	; (23ed0 <system_clock_source_enable+0xa0>)
   23e82:	8a9b      	ldrh	r3, [r3, #20]
   23e84:	b29b      	uxth	r3, r3
   23e86:	2102      	movs	r1, #2
   23e88:	430b      	orrs	r3, r1
   23e8a:	b29b      	uxth	r3, r3
   23e8c:	8293      	strh	r3, [r2, #20]
		break;
   23e8e:	e017      	b.n	23ec0 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
   23e90:	4b10      	ldr	r3, [pc, #64]	; (23ed4 <system_clock_source_enable+0xa4>)
   23e92:	681b      	ldr	r3, [r3, #0]
   23e94:	2202      	movs	r2, #2
   23e96:	431a      	orrs	r2, r3
   23e98:	4b0e      	ldr	r3, [pc, #56]	; (23ed4 <system_clock_source_enable+0xa4>)
   23e9a:	601a      	str	r2, [r3, #0]
		_system_clock_source_dfll_set_config_errata_9905();
   23e9c:	4b0e      	ldr	r3, [pc, #56]	; (23ed8 <system_clock_source_enable+0xa8>)
   23e9e:	4798      	blx	r3
		break;
   23ea0:	e00e      	b.n	23ec0 <system_clock_source_enable+0x90>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
   23ea2:	4a0b      	ldr	r2, [pc, #44]	; (23ed0 <system_clock_source_enable+0xa0>)
   23ea4:	490a      	ldr	r1, [pc, #40]	; (23ed0 <system_clock_source_enable+0xa0>)
   23ea6:	2344      	movs	r3, #68	; 0x44
   23ea8:	5ccb      	ldrb	r3, [r1, r3]
   23eaa:	b2db      	uxtb	r3, r3
   23eac:	2102      	movs	r1, #2
   23eae:	430b      	orrs	r3, r1
   23eb0:	b2d9      	uxtb	r1, r3
   23eb2:	2344      	movs	r3, #68	; 0x44
   23eb4:	54d1      	strb	r1, [r2, r3]
		break;
   23eb6:	e003      	b.n	23ec0 <system_clock_source_enable+0x90>
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
   23eb8:	2300      	movs	r3, #0
   23eba:	e002      	b.n	23ec2 <system_clock_source_enable+0x92>

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
   23ebc:	2317      	movs	r3, #23
   23ebe:	e000      	b.n	23ec2 <system_clock_source_enable+0x92>
	}

	return STATUS_OK;
   23ec0:	2300      	movs	r3, #0
}
   23ec2:	0018      	movs	r0, r3
   23ec4:	46bd      	mov	sp, r7
   23ec6:	b002      	add	sp, #8
   23ec8:	bd80      	pop	{r7, pc}
   23eca:	46c0      	nop			; (mov r8, r8)
   23ecc:	0002a8d8 	.word	0x0002a8d8
   23ed0:	40000800 	.word	0x40000800
   23ed4:	200004f0 	.word	0x200004f0
   23ed8:	00023ac5 	.word	0x00023ac5

00023edc <system_clock_source_is_ready>:
 * \retval true   Clock source is enabled and ready
 * \retval false  Clock source is disabled or not yet ready
 */
bool system_clock_source_is_ready(
		const enum system_clock_source clock_source)
{
   23edc:	b580      	push	{r7, lr}
   23ede:	b084      	sub	sp, #16
   23ee0:	af00      	add	r7, sp, #0
   23ee2:	0002      	movs	r2, r0
   23ee4:	1dfb      	adds	r3, r7, #7
   23ee6:	701a      	strb	r2, [r3, #0]
	uint32_t mask = 0;
   23ee8:	2300      	movs	r3, #0
   23eea:	60fb      	str	r3, [r7, #12]

	switch (clock_source) {
   23eec:	1dfb      	adds	r3, r7, #7
   23eee:	781b      	ldrb	r3, [r3, #0]
   23ef0:	2b08      	cmp	r3, #8
   23ef2:	d821      	bhi.n	23f38 <system_clock_source_is_ready+0x5c>
   23ef4:	009a      	lsls	r2, r3, #2
   23ef6:	4b18      	ldr	r3, [pc, #96]	; (23f58 <system_clock_source_is_ready+0x7c>)
   23ef8:	18d3      	adds	r3, r2, r3
   23efa:	681b      	ldr	r3, [r3, #0]
   23efc:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		mask = SYSCTRL_PCLKSR_OSC8MRDY;
   23efe:	2308      	movs	r3, #8
   23f00:	60fb      	str	r3, [r7, #12]
		break;
   23f02:	e01b      	b.n	23f3c <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		mask = SYSCTRL_PCLKSR_OSC32KRDY;
   23f04:	2304      	movs	r3, #4
   23f06:	60fb      	str	r3, [r7, #12]
		break;
   23f08:	e018      	b.n	23f3c <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		mask = SYSCTRL_PCLKSR_XOSCRDY;
   23f0a:	2301      	movs	r3, #1
   23f0c:	60fb      	str	r3, [r7, #12]
		break;
   23f0e:	e015      	b.n	23f3c <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		mask = SYSCTRL_PCLKSR_XOSC32KRDY;
   23f10:	2302      	movs	r3, #2
   23f12:	60fb      	str	r3, [r7, #12]
		break;
   23f14:	e012      	b.n	23f3c <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
			mask = (SYSCTRL_PCLKSR_DFLLRDY |
   23f16:	23d0      	movs	r3, #208	; 0xd0
   23f18:	60fb      	str	r3, [r7, #12]
			        SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC);
		} else {
			mask = SYSCTRL_PCLKSR_DFLLRDY;
		}
		break;
   23f1a:	e00f      	b.n	23f3c <system_clock_source_is_ready+0x60>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		return ((SYSCTRL->DPLLSTATUS.reg &
   23f1c:	4a0f      	ldr	r2, [pc, #60]	; (23f5c <system_clock_source_is_ready+0x80>)
   23f1e:	2350      	movs	r3, #80	; 0x50
   23f20:	5cd3      	ldrb	r3, [r2, r3]
   23f22:	b2db      	uxtb	r3, r3
   23f24:	001a      	movs	r2, r3
   23f26:	2303      	movs	r3, #3
   23f28:	4013      	ands	r3, r2
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK)) ==
   23f2a:	3b03      	subs	r3, #3
   23f2c:	425a      	negs	r2, r3
   23f2e:	4153      	adcs	r3, r2
   23f30:	b2db      	uxtb	r3, r3
   23f32:	e00c      	b.n	23f4e <system_clock_source_is_ready+0x72>
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK));
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Not possible to disable */
		return true;
   23f34:	2301      	movs	r3, #1
   23f36:	e00a      	b.n	23f4e <system_clock_source_is_ready+0x72>

	default:
		return false;
   23f38:	2300      	movs	r3, #0
   23f3a:	e008      	b.n	23f4e <system_clock_source_is_ready+0x72>
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
   23f3c:	4b07      	ldr	r3, [pc, #28]	; (23f5c <system_clock_source_is_ready+0x80>)
   23f3e:	68db      	ldr	r3, [r3, #12]
   23f40:	68fa      	ldr	r2, [r7, #12]
   23f42:	401a      	ands	r2, r3
   23f44:	68fb      	ldr	r3, [r7, #12]
   23f46:	1ad3      	subs	r3, r2, r3
   23f48:	425a      	negs	r2, r3
   23f4a:	4153      	adcs	r3, r2
   23f4c:	b2db      	uxtb	r3, r3
}
   23f4e:	0018      	movs	r0, r3
   23f50:	46bd      	mov	sp, r7
   23f52:	b004      	add	sp, #16
   23f54:	bd80      	pop	{r7, pc}
   23f56:	46c0      	nop			; (mov r8, r8)
   23f58:	0002a8fc 	.word	0x0002a8fc
   23f5c:	40000800 	.word	0x40000800

00023f60 <_switch_peripheral_gclk>:
 *
 * Switch all peripheral clock to a not enabled general clock
 * to save power.
 */
static void _switch_peripheral_gclk(void)
{
   23f60:	b580      	push	{r7, lr}
   23f62:	b082      	sub	sp, #8
   23f64:	af00      	add	r7, sp, #0
	struct system_gclk_chan_config gclk_conf;

#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
#elif CONF_CLOCK_GCLK_2_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_2;
   23f66:	003b      	movs	r3, r7
   23f68:	2202      	movs	r2, #2
   23f6a:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
   23f6c:	2300      	movs	r3, #0
   23f6e:	607b      	str	r3, [r7, #4]
   23f70:	e009      	b.n	23f86 <_switch_peripheral_gclk+0x26>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
   23f72:	687b      	ldr	r3, [r7, #4]
   23f74:	b2db      	uxtb	r3, r3
   23f76:	003a      	movs	r2, r7
   23f78:	0011      	movs	r1, r2
   23f7a:	0018      	movs	r0, r3
   23f7c:	4b05      	ldr	r3, [pc, #20]	; (23f94 <_switch_peripheral_gclk+0x34>)
   23f7e:	4798      	blx	r3
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
   23f80:	687b      	ldr	r3, [r7, #4]
   23f82:	3301      	adds	r3, #1
   23f84:	607b      	str	r3, [r7, #4]
   23f86:	687b      	ldr	r3, [r7, #4]
   23f88:	2b24      	cmp	r3, #36	; 0x24
   23f8a:	d9f2      	bls.n	23f72 <_switch_peripheral_gclk+0x12>
	}
}
   23f8c:	46c0      	nop			; (mov r8, r8)
   23f8e:	46bd      	mov	sp, r7
   23f90:	b002      	add	sp, #8
   23f92:	bd80      	pop	{r7, pc}
   23f94:	00024625 	.word	0x00024625

00023f98 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
   23f98:	b580      	push	{r7, lr}
   23f9a:	b0aa      	sub	sp, #168	; 0xa8
   23f9c:	af00      	add	r7, sp, #0
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
   23f9e:	4bc1      	ldr	r3, [pc, #772]	; (242a4 <system_clock_init+0x30c>)
   23fa0:	22c2      	movs	r2, #194	; 0xc2
   23fa2:	00d2      	lsls	r2, r2, #3
   23fa4:	609a      	str	r2, [r3, #8]
			SYSCTRL_INTFLAG_DFLLRDY;

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);
   23fa6:	2002      	movs	r0, #2
   23fa8:	4bbf      	ldr	r3, [pc, #764]	; (242a8 <system_clock_init+0x310>)
   23faa:	4798      	blx	r3

	/* Switch all peripheral clock to a not enabled general clock to save power. */
	_switch_peripheral_gclk();
   23fac:	4bbf      	ldr	r3, [pc, #764]	; (242ac <system_clock_init+0x314>)
   23fae:	4798      	blx	r3


	/* XOSC32K */
#if CONF_CLOCK_XOSC32K_ENABLE == true
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);
   23fb0:	2394      	movs	r3, #148	; 0x94
   23fb2:	18fb      	adds	r3, r7, r3
   23fb4:	0018      	movs	r0, r3
   23fb6:	4bbe      	ldr	r3, [pc, #760]	; (242b0 <system_clock_init+0x318>)
   23fb8:	4798      	blx	r3

	xosc32k_conf.frequency           = 32768UL;
   23fba:	2394      	movs	r3, #148	; 0x94
   23fbc:	18fb      	adds	r3, r7, r3
   23fbe:	2280      	movs	r2, #128	; 0x80
   23fc0:	0212      	lsls	r2, r2, #8
   23fc2:	609a      	str	r2, [r3, #8]
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
   23fc4:	2394      	movs	r3, #148	; 0x94
   23fc6:	18fb      	adds	r3, r7, r3
   23fc8:	2200      	movs	r2, #0
   23fca:	701a      	strb	r2, [r3, #0]
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
   23fcc:	2394      	movs	r3, #148	; 0x94
   23fce:	18fb      	adds	r3, r7, r3
   23fd0:	2206      	movs	r2, #6
   23fd2:	705a      	strb	r2, [r3, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
   23fd4:	2394      	movs	r3, #148	; 0x94
   23fd6:	18fb      	adds	r3, r7, r3
   23fd8:	2200      	movs	r2, #0
   23fda:	709a      	strb	r2, [r3, #2]
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
   23fdc:	2394      	movs	r3, #148	; 0x94
   23fde:	18fb      	adds	r3, r7, r3
   23fe0:	2200      	movs	r2, #0
   23fe2:	70da      	strb	r2, [r3, #3]
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
   23fe4:	2394      	movs	r3, #148	; 0x94
   23fe6:	18fb      	adds	r3, r7, r3
   23fe8:	2201      	movs	r2, #1
   23fea:	711a      	strb	r2, [r3, #4]
	xosc32k_conf.on_demand           = false;
   23fec:	2394      	movs	r3, #148	; 0x94
   23fee:	18fb      	adds	r3, r7, r3
   23ff0:	2200      	movs	r2, #0
   23ff2:	735a      	strb	r2, [r3, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;
   23ff4:	2394      	movs	r3, #148	; 0x94
   23ff6:	18fb      	adds	r3, r7, r3
   23ff8:	2201      	movs	r2, #1
   23ffa:	731a      	strb	r2, [r3, #12]

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
   23ffc:	2394      	movs	r3, #148	; 0x94
   23ffe:	18fb      	adds	r3, r7, r3
   24000:	0018      	movs	r0, r3
   24002:	4bac      	ldr	r3, [pc, #688]	; (242b4 <system_clock_init+0x31c>)
   24004:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
   24006:	2005      	movs	r0, #5
   24008:	4bab      	ldr	r3, [pc, #684]	; (242b8 <system_clock_init+0x320>)
   2400a:	4798      	blx	r3
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
   2400c:	46c0      	nop			; (mov r8, r8)
   2400e:	2005      	movs	r0, #5
   24010:	4baa      	ldr	r3, [pc, #680]	; (242bc <system_clock_init+0x324>)
   24012:	4798      	blx	r3
   24014:	0003      	movs	r3, r0
   24016:	001a      	movs	r2, r3
   24018:	2301      	movs	r3, #1
   2401a:	4053      	eors	r3, r2
   2401c:	b2db      	uxtb	r3, r3
   2401e:	2b00      	cmp	r3, #0
   24020:	d1f5      	bne.n	2400e <system_clock_init+0x76>


	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);
   24022:	2380      	movs	r3, #128	; 0x80
   24024:	18fb      	adds	r3, r7, r3
   24026:	0018      	movs	r0, r3
   24028:	4ba5      	ldr	r3, [pc, #660]	; (242c0 <system_clock_init+0x328>)
   2402a:	4798      	blx	r3

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
   2402c:	2380      	movs	r3, #128	; 0x80
   2402e:	18fb      	adds	r3, r7, r3
   24030:	2204      	movs	r2, #4
   24032:	701a      	strb	r2, [r3, #0]
	dfll_conf.on_demand      = false;
   24034:	2380      	movs	r3, #128	; 0x80
   24036:	18fb      	adds	r3, r7, r3
   24038:	2200      	movs	r2, #0
   2403a:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
   2403c:	4ba1      	ldr	r3, [pc, #644]	; (242c4 <system_clock_init+0x32c>)
   2403e:	681b      	ldr	r3, [r3, #0]
   24040:	0e9b      	lsrs	r3, r3, #26
   24042:	22a4      	movs	r2, #164	; 0xa4
   24044:	18ba      	adds	r2, r7, r2
   24046:	6013      	str	r3, [r2, #0]
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
   24048:	23a4      	movs	r3, #164	; 0xa4
   2404a:	18fb      	adds	r3, r7, r3
   2404c:	681b      	ldr	r3, [r3, #0]
   2404e:	2b3f      	cmp	r3, #63	; 0x3f
   24050:	d103      	bne.n	2405a <system_clock_init+0xc2>
		coarse = 0x1f;
   24052:	231f      	movs	r3, #31
   24054:	22a4      	movs	r2, #164	; 0xa4
   24056:	18ba      	adds	r2, r7, r2
   24058:	6013      	str	r3, [r2, #0]
	}
	dfll_conf.coarse_value = coarse;
   2405a:	23a4      	movs	r3, #164	; 0xa4
   2405c:	18fb      	adds	r3, r7, r3
   2405e:	681b      	ldr	r3, [r3, #0]
   24060:	b2da      	uxtb	r2, r3
   24062:	2380      	movs	r3, #128	; 0x80
   24064:	18fb      	adds	r3, r7, r3
   24066:	721a      	strb	r2, [r3, #8]
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN) {
		dfll_conf.fine_value   = CONF_CLOCK_DFLL_FINE_VALUE;
	}

#  if CONF_CLOCK_DFLL_QUICK_LOCK == true
	dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
   24068:	2380      	movs	r3, #128	; 0x80
   2406a:	18fb      	adds	r3, r7, r3
   2406c:	2200      	movs	r2, #0
   2406e:	805a      	strh	r2, [r3, #2]
#  else
	dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_DISABLE;
#  endif

#  if CONF_CLOCK_DFLL_TRACK_AFTER_FINE_LOCK == true
	dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
   24070:	2380      	movs	r3, #128	; 0x80
   24072:	18fb      	adds	r3, r7, r3
   24074:	2200      	movs	r2, #0
   24076:	71da      	strb	r2, [r3, #7]
#  else
	dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_FIX_AFTER_LOCK;
#  endif

#  if CONF_CLOCK_DFLL_KEEP_LOCK_ON_WAKEUP == true
	dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
   24078:	2380      	movs	r3, #128	; 0x80
   2407a:	18fb      	adds	r3, r7, r3
   2407c:	2200      	movs	r2, #0
   2407e:	719a      	strb	r2, [r3, #6]
#  else
	dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_LOSE;
#  endif

#  if CONF_CLOCK_DFLL_ENABLE_CHILL_CYCLE == true
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
   24080:	2380      	movs	r3, #128	; 0x80
   24082:	18fb      	adds	r3, r7, r3
   24084:	2200      	movs	r2, #0
   24086:	809a      	strh	r2, [r3, #4]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
   24088:	2380      	movs	r3, #128	; 0x80
   2408a:	18fb      	adds	r3, r7, r3
   2408c:	22b7      	movs	r2, #183	; 0xb7
   2408e:	00d2      	lsls	r2, r2, #3
   24090:	821a      	strh	r2, [r3, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
   24092:	2380      	movs	r3, #128	; 0x80
   24094:	18fb      	adds	r3, r7, r3
   24096:	2203      	movs	r2, #3
   24098:	731a      	strb	r2, [r3, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
   2409a:	2380      	movs	r3, #128	; 0x80
   2409c:	18fb      	adds	r3, r7, r3
   2409e:	221f      	movs	r2, #31
   240a0:	81da      	strh	r2, [r3, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
   240a2:	2380      	movs	r3, #128	; 0x80
   240a4:	18fb      	adds	r3, r7, r3
   240a6:	0018      	movs	r0, r3
   240a8:	4b87      	ldr	r3, [pc, #540]	; (242c8 <system_clock_init+0x330>)
   240aa:	4798      	blx	r3
#endif


	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);
   240ac:	237c      	movs	r3, #124	; 0x7c
   240ae:	18fb      	adds	r3, r7, r3
   240b0:	0018      	movs	r0, r3
   240b2:	4b86      	ldr	r3, [pc, #536]	; (242cc <system_clock_init+0x334>)
   240b4:	4798      	blx	r3

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
   240b6:	237c      	movs	r3, #124	; 0x7c
   240b8:	18fb      	adds	r3, r7, r3
   240ba:	2200      	movs	r2, #0
   240bc:	701a      	strb	r2, [r3, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
   240be:	237c      	movs	r3, #124	; 0x7c
   240c0:	18fb      	adds	r3, r7, r3
   240c2:	2201      	movs	r2, #1
   240c4:	709a      	strb	r2, [r3, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;
   240c6:	237c      	movs	r3, #124	; 0x7c
   240c8:	18fb      	adds	r3, r7, r3
   240ca:	2201      	movs	r2, #1
   240cc:	705a      	strb	r2, [r3, #1]

	system_clock_source_osc8m_set_config(&osc8m_conf);
   240ce:	237c      	movs	r3, #124	; 0x7c
   240d0:	18fb      	adds	r3, r7, r3
   240d2:	0018      	movs	r0, r3
   240d4:	4b7e      	ldr	r3, [pc, #504]	; (242d0 <system_clock_init+0x338>)
   240d6:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
   240d8:	2006      	movs	r0, #6
   240da:	4b77      	ldr	r3, [pc, #476]	; (242b8 <system_clock_init+0x320>)
   240dc:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
   240de:	4b7d      	ldr	r3, [pc, #500]	; (242d4 <system_clock_init+0x33c>)
   240e0:	4798      	blx	r3

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
   240e2:	2364      	movs	r3, #100	; 0x64
   240e4:	18fb      	adds	r3, r7, r3
   240e6:	0018      	movs	r0, r3
   240e8:	4b7b      	ldr	r3, [pc, #492]	; (242d8 <system_clock_init+0x340>)
   240ea:	4798      	blx	r3
   240ec:	2364      	movs	r3, #100	; 0x64
   240ee:	18fb      	adds	r3, r7, r3
   240f0:	2205      	movs	r2, #5
   240f2:	701a      	strb	r2, [r3, #0]
   240f4:	2364      	movs	r3, #100	; 0x64
   240f6:	18fb      	adds	r3, r7, r3
   240f8:	2201      	movs	r2, #1
   240fa:	605a      	str	r2, [r3, #4]
   240fc:	2364      	movs	r3, #100	; 0x64
   240fe:	18fb      	adds	r3, r7, r3
   24100:	2200      	movs	r2, #0
   24102:	721a      	strb	r2, [r3, #8]
   24104:	2364      	movs	r3, #100	; 0x64
   24106:	18fb      	adds	r3, r7, r3
   24108:	2200      	movs	r2, #0
   2410a:	725a      	strb	r2, [r3, #9]
   2410c:	2364      	movs	r3, #100	; 0x64
   2410e:	18fb      	adds	r3, r7, r3
   24110:	0019      	movs	r1, r3
   24112:	2001      	movs	r0, #1
   24114:	4b71      	ldr	r3, [pc, #452]	; (242dc <system_clock_init+0x344>)
   24116:	4798      	blx	r3
   24118:	2001      	movs	r0, #1
   2411a:	4b71      	ldr	r3, [pc, #452]	; (242e0 <system_clock_init+0x348>)
   2411c:	4798      	blx	r3
   2411e:	234c      	movs	r3, #76	; 0x4c
   24120:	18fb      	adds	r3, r7, r3
   24122:	0018      	movs	r0, r3
   24124:	4b6c      	ldr	r3, [pc, #432]	; (242d8 <system_clock_init+0x340>)
   24126:	4798      	blx	r3
   24128:	234c      	movs	r3, #76	; 0x4c
   2412a:	18fb      	adds	r3, r7, r3
   2412c:	2206      	movs	r2, #6
   2412e:	701a      	strb	r2, [r3, #0]
   24130:	234c      	movs	r3, #76	; 0x4c
   24132:	18fb      	adds	r3, r7, r3
   24134:	2201      	movs	r2, #1
   24136:	605a      	str	r2, [r3, #4]
   24138:	234c      	movs	r3, #76	; 0x4c
   2413a:	18fb      	adds	r3, r7, r3
   2413c:	2201      	movs	r2, #1
   2413e:	721a      	strb	r2, [r3, #8]
   24140:	234c      	movs	r3, #76	; 0x4c
   24142:	18fb      	adds	r3, r7, r3
   24144:	2200      	movs	r2, #0
   24146:	725a      	strb	r2, [r3, #9]
   24148:	234c      	movs	r3, #76	; 0x4c
   2414a:	18fb      	adds	r3, r7, r3
   2414c:	0019      	movs	r1, r3
   2414e:	2003      	movs	r0, #3
   24150:	4b62      	ldr	r3, [pc, #392]	; (242dc <system_clock_init+0x344>)
   24152:	4798      	blx	r3
   24154:	2003      	movs	r0, #3
   24156:	4b62      	ldr	r3, [pc, #392]	; (242e0 <system_clock_init+0x348>)
   24158:	4798      	blx	r3
   2415a:	2340      	movs	r3, #64	; 0x40
   2415c:	18fb      	adds	r3, r7, r3
   2415e:	0018      	movs	r0, r3
   24160:	4b5d      	ldr	r3, [pc, #372]	; (242d8 <system_clock_init+0x340>)
   24162:	4798      	blx	r3
   24164:	2340      	movs	r3, #64	; 0x40
   24166:	18fb      	adds	r3, r7, r3
   24168:	2203      	movs	r2, #3
   2416a:	701a      	strb	r2, [r3, #0]
   2416c:	2340      	movs	r3, #64	; 0x40
   2416e:	18fb      	adds	r3, r7, r3
   24170:	2220      	movs	r2, #32
   24172:	605a      	str	r2, [r3, #4]
   24174:	2340      	movs	r3, #64	; 0x40
   24176:	18fb      	adds	r3, r7, r3
   24178:	2200      	movs	r2, #0
   2417a:	721a      	strb	r2, [r3, #8]
   2417c:	2340      	movs	r3, #64	; 0x40
   2417e:	18fb      	adds	r3, r7, r3
   24180:	2200      	movs	r2, #0
   24182:	725a      	strb	r2, [r3, #9]
   24184:	2340      	movs	r3, #64	; 0x40
   24186:	18fb      	adds	r3, r7, r3
   24188:	0019      	movs	r1, r3
   2418a:	2004      	movs	r0, #4
   2418c:	4b53      	ldr	r3, [pc, #332]	; (242dc <system_clock_init+0x344>)
   2418e:	4798      	blx	r3
   24190:	2004      	movs	r0, #4
   24192:	4b53      	ldr	r3, [pc, #332]	; (242e0 <system_clock_init+0x348>)
   24194:	4798      	blx	r3
   24196:	2334      	movs	r3, #52	; 0x34
   24198:	18fb      	adds	r3, r7, r3
   2419a:	0018      	movs	r0, r3
   2419c:	4b4e      	ldr	r3, [pc, #312]	; (242d8 <system_clock_init+0x340>)
   2419e:	4798      	blx	r3
   241a0:	2334      	movs	r3, #52	; 0x34
   241a2:	18fb      	adds	r3, r7, r3
   241a4:	2207      	movs	r2, #7
   241a6:	701a      	strb	r2, [r3, #0]
   241a8:	2334      	movs	r3, #52	; 0x34
   241aa:	18fb      	adds	r3, r7, r3
   241ac:	2201      	movs	r2, #1
   241ae:	605a      	str	r2, [r3, #4]
   241b0:	2334      	movs	r3, #52	; 0x34
   241b2:	18fb      	adds	r3, r7, r3
   241b4:	2200      	movs	r2, #0
   241b6:	721a      	strb	r2, [r3, #8]
   241b8:	2334      	movs	r3, #52	; 0x34
   241ba:	18fb      	adds	r3, r7, r3
   241bc:	2200      	movs	r2, #0
   241be:	725a      	strb	r2, [r3, #9]
   241c0:	2334      	movs	r3, #52	; 0x34
   241c2:	18fb      	adds	r3, r7, r3
   241c4:	0019      	movs	r1, r3
   241c6:	2005      	movs	r0, #5
   241c8:	4b44      	ldr	r3, [pc, #272]	; (242dc <system_clock_init+0x344>)
   241ca:	4798      	blx	r3
   241cc:	2005      	movs	r0, #5
   241ce:	4b44      	ldr	r3, [pc, #272]	; (242e0 <system_clock_init+0x348>)
   241d0:	4798      	blx	r3
   241d2:	2328      	movs	r3, #40	; 0x28
   241d4:	18fb      	adds	r3, r7, r3
   241d6:	0018      	movs	r0, r3
   241d8:	4b3f      	ldr	r3, [pc, #252]	; (242d8 <system_clock_init+0x340>)
   241da:	4798      	blx	r3
   241dc:	2328      	movs	r3, #40	; 0x28
   241de:	18fb      	adds	r3, r7, r3
   241e0:	2206      	movs	r2, #6
   241e2:	701a      	strb	r2, [r3, #0]
   241e4:	2328      	movs	r3, #40	; 0x28
   241e6:	18fb      	adds	r3, r7, r3
   241e8:	2201      	movs	r2, #1
   241ea:	605a      	str	r2, [r3, #4]
   241ec:	2328      	movs	r3, #40	; 0x28
   241ee:	18fb      	adds	r3, r7, r3
   241f0:	2201      	movs	r2, #1
   241f2:	721a      	strb	r2, [r3, #8]
   241f4:	2328      	movs	r3, #40	; 0x28
   241f6:	18fb      	adds	r3, r7, r3
   241f8:	2200      	movs	r2, #0
   241fa:	725a      	strb	r2, [r3, #9]
   241fc:	2328      	movs	r3, #40	; 0x28
   241fe:	18fb      	adds	r3, r7, r3
   24200:	0019      	movs	r1, r3
   24202:	2006      	movs	r0, #6
   24204:	4b35      	ldr	r3, [pc, #212]	; (242dc <system_clock_init+0x344>)
   24206:	4798      	blx	r3
   24208:	2006      	movs	r0, #6
   2420a:	4b35      	ldr	r3, [pc, #212]	; (242e0 <system_clock_init+0x348>)
   2420c:	4798      	blx	r3
#  if CONF_CLOCK_DFLL_ENABLE == true
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
   2420e:	230c      	movs	r3, #12
   24210:	18fb      	adds	r3, r7, r3
   24212:	0018      	movs	r0, r3
   24214:	4b33      	ldr	r3, [pc, #204]	; (242e4 <system_clock_init+0x34c>)
   24216:	4798      	blx	r3
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
   24218:	230c      	movs	r3, #12
   2421a:	18fb      	adds	r3, r7, r3
   2421c:	2201      	movs	r2, #1
   2421e:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
   24220:	230c      	movs	r3, #12
   24222:	18fb      	adds	r3, r7, r3
   24224:	0019      	movs	r1, r3
   24226:	2000      	movs	r0, #0
   24228:	4b2f      	ldr	r3, [pc, #188]	; (242e8 <system_clock_init+0x350>)
   2422a:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
   2422c:	2000      	movs	r0, #0
   2422e:	4b2f      	ldr	r3, [pc, #188]	; (242ec <system_clock_init+0x354>)
   24230:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
   24232:	2007      	movs	r0, #7
   24234:	4b20      	ldr	r3, [pc, #128]	; (242b8 <system_clock_init+0x320>)
   24236:	4798      	blx	r3
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
   24238:	46c0      	nop			; (mov r8, r8)
   2423a:	2007      	movs	r0, #7
   2423c:	4b1f      	ldr	r3, [pc, #124]	; (242bc <system_clock_init+0x324>)
   2423e:	4798      	blx	r3
   24240:	0003      	movs	r3, r0
   24242:	001a      	movs	r2, r3
   24244:	2301      	movs	r3, #1
   24246:	4053      	eors	r3, r2
   24248:	b2db      	uxtb	r3, r3
   2424a:	2b00      	cmp	r3, #0
   2424c:	d1f5      	bne.n	2423a <system_clock_init+0x2a2>

#  endif
#endif

	/* CPU and BUS clocks */
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);
   2424e:	2000      	movs	r0, #0
   24250:	4b27      	ldr	r3, [pc, #156]	; (242f0 <system_clock_init+0x358>)
   24252:	4798      	blx	r3

	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBA, CONF_CLOCK_APBA_DIVIDER);
   24254:	2100      	movs	r1, #0
   24256:	2000      	movs	r0, #0
   24258:	4b26      	ldr	r3, [pc, #152]	; (242f4 <system_clock_init+0x35c>)
   2425a:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);
   2425c:	2100      	movs	r1, #0
   2425e:	2001      	movs	r0, #1
   24260:	4b24      	ldr	r3, [pc, #144]	; (242f4 <system_clock_init+0x35c>)
   24262:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);
   24264:	2100      	movs	r1, #0
   24266:	2002      	movs	r0, #2
   24268:	4b22      	ldr	r3, [pc, #136]	; (242f4 <system_clock_init+0x35c>)
   2426a:	4798      	blx	r3

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
   2426c:	003b      	movs	r3, r7
   2426e:	0018      	movs	r0, r3
   24270:	4b19      	ldr	r3, [pc, #100]	; (242d8 <system_clock_init+0x340>)
   24272:	4798      	blx	r3
   24274:	003b      	movs	r3, r7
   24276:	2207      	movs	r2, #7
   24278:	701a      	strb	r2, [r3, #0]
   2427a:	003b      	movs	r3, r7
   2427c:	2201      	movs	r2, #1
   2427e:	605a      	str	r2, [r3, #4]
   24280:	003b      	movs	r3, r7
   24282:	2200      	movs	r2, #0
   24284:	721a      	strb	r2, [r3, #8]
   24286:	003b      	movs	r3, r7
   24288:	2200      	movs	r2, #0
   2428a:	725a      	strb	r2, [r3, #9]
   2428c:	003b      	movs	r3, r7
   2428e:	0019      	movs	r1, r3
   24290:	2000      	movs	r0, #0
   24292:	4b12      	ldr	r3, [pc, #72]	; (242dc <system_clock_init+0x344>)
   24294:	4798      	blx	r3
   24296:	2000      	movs	r0, #0
   24298:	4b11      	ldr	r3, [pc, #68]	; (242e0 <system_clock_init+0x348>)
   2429a:	4798      	blx	r3
#endif
}
   2429c:	46c0      	nop			; (mov r8, r8)
   2429e:	46bd      	mov	sp, r7
   242a0:	b02a      	add	sp, #168	; 0xa8
   242a2:	bd80      	pop	{r7, pc}
   242a4:	40000800 	.word	0x40000800
   242a8:	00023a75 	.word	0x00023a75
   242ac:	00023f61 	.word	0x00023f61
   242b0:	00023945 	.word	0x00023945
   242b4:	00023c41 	.word	0x00023c41
   242b8:	00023e31 	.word	0x00023e31
   242bc:	00023edd 	.word	0x00023edd
   242c0:	000239af 	.word	0x000239af
   242c4:	00806024 	.word	0x00806024
   242c8:	00023d61 	.word	0x00023d61
   242cc:	0002398d 	.word	0x0002398d
   242d0:	00023bc9 	.word	0x00023bc9
   242d4:	0002439d 	.word	0x0002439d
   242d8:	00023901 	.word	0x00023901
   242dc:	000243cd 	.word	0x000243cd
   242e0:	000244f1 	.word	0x000244f1
   242e4:	0002392f 	.word	0x0002392f
   242e8:	00024625 	.word	0x00024625
   242ec:	00024669 	.word	0x00024669
   242f0:	00023a01 	.word	0x00023a01
   242f4:	00023a21 	.word	0x00023a21

000242f8 <system_apb_clock_set_mask>:
{
   242f8:	b580      	push	{r7, lr}
   242fa:	b082      	sub	sp, #8
   242fc:	af00      	add	r7, sp, #0
   242fe:	0002      	movs	r2, r0
   24300:	6039      	str	r1, [r7, #0]
   24302:	1dfb      	adds	r3, r7, #7
   24304:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   24306:	1dfb      	adds	r3, r7, #7
   24308:	781b      	ldrb	r3, [r3, #0]
   2430a:	2b01      	cmp	r3, #1
   2430c:	d00a      	beq.n	24324 <system_apb_clock_set_mask+0x2c>
   2430e:	2b02      	cmp	r3, #2
   24310:	d00f      	beq.n	24332 <system_apb_clock_set_mask+0x3a>
   24312:	2b00      	cmp	r3, #0
   24314:	d114      	bne.n	24340 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   24316:	4b0e      	ldr	r3, [pc, #56]	; (24350 <system_apb_clock_set_mask+0x58>)
   24318:	4a0d      	ldr	r2, [pc, #52]	; (24350 <system_apb_clock_set_mask+0x58>)
   2431a:	6991      	ldr	r1, [r2, #24]
   2431c:	683a      	ldr	r2, [r7, #0]
   2431e:	430a      	orrs	r2, r1
   24320:	619a      	str	r2, [r3, #24]
			break;
   24322:	e00f      	b.n	24344 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   24324:	4b0a      	ldr	r3, [pc, #40]	; (24350 <system_apb_clock_set_mask+0x58>)
   24326:	4a0a      	ldr	r2, [pc, #40]	; (24350 <system_apb_clock_set_mask+0x58>)
   24328:	69d1      	ldr	r1, [r2, #28]
   2432a:	683a      	ldr	r2, [r7, #0]
   2432c:	430a      	orrs	r2, r1
   2432e:	61da      	str	r2, [r3, #28]
			break;
   24330:	e008      	b.n	24344 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   24332:	4b07      	ldr	r3, [pc, #28]	; (24350 <system_apb_clock_set_mask+0x58>)
   24334:	4a06      	ldr	r2, [pc, #24]	; (24350 <system_apb_clock_set_mask+0x58>)
   24336:	6a11      	ldr	r1, [r2, #32]
   24338:	683a      	ldr	r2, [r7, #0]
   2433a:	430a      	orrs	r2, r1
   2433c:	621a      	str	r2, [r3, #32]
			break;
   2433e:	e001      	b.n	24344 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   24340:	2317      	movs	r3, #23
   24342:	e000      	b.n	24346 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   24344:	2300      	movs	r3, #0
}
   24346:	0018      	movs	r0, r3
   24348:	46bd      	mov	sp, r7
   2434a:	b002      	add	sp, #8
   2434c:	bd80      	pop	{r7, pc}
   2434e:	46c0      	nop			; (mov r8, r8)
   24350:	40000400 	.word	0x40000400

00024354 <system_interrupt_enter_critical_section>:
{
   24354:	b580      	push	{r7, lr}
   24356:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
   24358:	4b02      	ldr	r3, [pc, #8]	; (24364 <system_interrupt_enter_critical_section+0x10>)
   2435a:	4798      	blx	r3
}
   2435c:	46c0      	nop			; (mov r8, r8)
   2435e:	46bd      	mov	sp, r7
   24360:	bd80      	pop	{r7, pc}
   24362:	46c0      	nop			; (mov r8, r8)
   24364:	0002386d 	.word	0x0002386d

00024368 <system_interrupt_leave_critical_section>:
{
   24368:	b580      	push	{r7, lr}
   2436a:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
   2436c:	4b02      	ldr	r3, [pc, #8]	; (24378 <system_interrupt_leave_critical_section+0x10>)
   2436e:	4798      	blx	r3
}
   24370:	46c0      	nop			; (mov r8, r8)
   24372:	46bd      	mov	sp, r7
   24374:	bd80      	pop	{r7, pc}
   24376:	46c0      	nop			; (mov r8, r8)
   24378:	000238c1 	.word	0x000238c1

0002437c <system_gclk_is_syncing>:
 *
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
   2437c:	b580      	push	{r7, lr}
   2437e:	af00      	add	r7, sp, #0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
   24380:	4b05      	ldr	r3, [pc, #20]	; (24398 <system_gclk_is_syncing+0x1c>)
   24382:	785b      	ldrb	r3, [r3, #1]
   24384:	b2db      	uxtb	r3, r3
   24386:	b25b      	sxtb	r3, r3
   24388:	2b00      	cmp	r3, #0
   2438a:	da01      	bge.n	24390 <system_gclk_is_syncing+0x14>
		return true;
   2438c:	2301      	movs	r3, #1
   2438e:	e000      	b.n	24392 <system_gclk_is_syncing+0x16>
	}

	return false;
   24390:	2300      	movs	r3, #0
}
   24392:	0018      	movs	r0, r3
   24394:	46bd      	mov	sp, r7
   24396:	bd80      	pop	{r7, pc}
   24398:	40000c00 	.word	0x40000c00

0002439c <system_gclk_init>:
 *
 * Initializes the Generic Clock module, disabling and resetting all active
 * Generic Clock Generators and Channels to their power-on default values.
 */
void system_gclk_init(void)
{
   2439c:	b580      	push	{r7, lr}
   2439e:	af00      	add	r7, sp, #0
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);
   243a0:	2108      	movs	r1, #8
   243a2:	2000      	movs	r0, #0
   243a4:	4b07      	ldr	r3, [pc, #28]	; (243c4 <system_gclk_init+0x28>)
   243a6:	4798      	blx	r3

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
   243a8:	4b07      	ldr	r3, [pc, #28]	; (243c8 <system_gclk_init+0x2c>)
   243aa:	2201      	movs	r2, #1
   243ac:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
   243ae:	46c0      	nop			; (mov r8, r8)
   243b0:	4b05      	ldr	r3, [pc, #20]	; (243c8 <system_gclk_init+0x2c>)
   243b2:	781b      	ldrb	r3, [r3, #0]
   243b4:	b2db      	uxtb	r3, r3
   243b6:	001a      	movs	r2, r3
   243b8:	2301      	movs	r3, #1
   243ba:	4013      	ands	r3, r2
   243bc:	d1f8      	bne.n	243b0 <system_gclk_init+0x14>
		/* Wait for reset to complete */
	}
}
   243be:	46c0      	nop			; (mov r8, r8)
   243c0:	46bd      	mov	sp, r7
   243c2:	bd80      	pop	{r7, pc}
   243c4:	000242f9 	.word	0x000242f9
   243c8:	40000c00 	.word	0x40000c00

000243cc <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
   243cc:	b580      	push	{r7, lr}
   243ce:	b086      	sub	sp, #24
   243d0:	af00      	add	r7, sp, #0
   243d2:	0002      	movs	r2, r0
   243d4:	6039      	str	r1, [r7, #0]
   243d6:	1dfb      	adds	r3, r7, #7
   243d8:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
   243da:	1dfb      	adds	r3, r7, #7
   243dc:	781b      	ldrb	r3, [r3, #0]
   243de:	617b      	str	r3, [r7, #20]
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);
   243e0:	1dfb      	adds	r3, r7, #7
   243e2:	781b      	ldrb	r3, [r3, #0]
   243e4:	613b      	str	r3, [r7, #16]

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
   243e6:	683b      	ldr	r3, [r7, #0]
   243e8:	781b      	ldrb	r3, [r3, #0]
   243ea:	021b      	lsls	r3, r3, #8
   243ec:	001a      	movs	r2, r3
   243ee:	697b      	ldr	r3, [r7, #20]
   243f0:	4313      	orrs	r3, r2
   243f2:	617b      	str	r3, [r7, #20]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
   243f4:	683b      	ldr	r3, [r7, #0]
   243f6:	785b      	ldrb	r3, [r3, #1]
   243f8:	2b00      	cmp	r3, #0
   243fa:	d004      	beq.n	24406 <system_gclk_gen_set_config+0x3a>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
   243fc:	697b      	ldr	r3, [r7, #20]
   243fe:	2280      	movs	r2, #128	; 0x80
   24400:	02d2      	lsls	r2, r2, #11
   24402:	4313      	orrs	r3, r2
   24404:	617b      	str	r3, [r7, #20]
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
   24406:	683b      	ldr	r3, [r7, #0]
   24408:	7a5b      	ldrb	r3, [r3, #9]
   2440a:	2b00      	cmp	r3, #0
   2440c:	d004      	beq.n	24418 <system_gclk_gen_set_config+0x4c>
		new_genctrl_config |= GCLK_GENCTRL_OE;
   2440e:	697b      	ldr	r3, [r7, #20]
   24410:	2280      	movs	r2, #128	; 0x80
   24412:	0312      	lsls	r2, r2, #12
   24414:	4313      	orrs	r3, r2
   24416:	617b      	str	r3, [r7, #20]
	}

	/* Set division factor */
	if (config->division_factor > 1) {
   24418:	683b      	ldr	r3, [r7, #0]
   2441a:	685b      	ldr	r3, [r3, #4]
   2441c:	2b01      	cmp	r3, #1
   2441e:	d92c      	bls.n	2447a <system_gclk_gen_set_config+0xae>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
   24420:	683b      	ldr	r3, [r7, #0]
   24422:	685a      	ldr	r2, [r3, #4]
   24424:	683b      	ldr	r3, [r7, #0]
   24426:	685b      	ldr	r3, [r3, #4]
   24428:	3b01      	subs	r3, #1
   2442a:	4013      	ands	r3, r2
   2442c:	d11a      	bne.n	24464 <system_gclk_gen_set_config+0x98>
			/* Determine the index of the highest bit set to get the
			 * division factor that must be loaded into the division
			 * register */

			uint32_t div2_count = 0;
   2442e:	2300      	movs	r3, #0
   24430:	60fb      	str	r3, [r7, #12]

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
   24432:	2302      	movs	r3, #2
   24434:	60bb      	str	r3, [r7, #8]
   24436:	e005      	b.n	24444 <system_gclk_gen_set_config+0x78>
						mask <<= 1) {
				div2_count++;
   24438:	68fb      	ldr	r3, [r7, #12]
   2443a:	3301      	adds	r3, #1
   2443c:	60fb      	str	r3, [r7, #12]
						mask <<= 1) {
   2443e:	68bb      	ldr	r3, [r7, #8]
   24440:	005b      	lsls	r3, r3, #1
   24442:	60bb      	str	r3, [r7, #8]
			for (mask = (1UL << 1); mask < config->division_factor;
   24444:	683b      	ldr	r3, [r7, #0]
   24446:	685a      	ldr	r2, [r3, #4]
   24448:	68bb      	ldr	r3, [r7, #8]
   2444a:	429a      	cmp	r2, r3
   2444c:	d8f4      	bhi.n	24438 <system_gclk_gen_set_config+0x6c>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
   2444e:	68fb      	ldr	r3, [r7, #12]
   24450:	021b      	lsls	r3, r3, #8
   24452:	693a      	ldr	r2, [r7, #16]
   24454:	4313      	orrs	r3, r2
   24456:	613b      	str	r3, [r7, #16]
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
   24458:	697b      	ldr	r3, [r7, #20]
   2445a:	2280      	movs	r2, #128	; 0x80
   2445c:	0352      	lsls	r2, r2, #13
   2445e:	4313      	orrs	r3, r2
   24460:	617b      	str	r3, [r7, #20]
   24462:	e00a      	b.n	2447a <system_gclk_gen_set_config+0xae>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
   24464:	683b      	ldr	r3, [r7, #0]
   24466:	685b      	ldr	r3, [r3, #4]
   24468:	021b      	lsls	r3, r3, #8
			new_gendiv_config  |=
   2446a:	693a      	ldr	r2, [r7, #16]
   2446c:	4313      	orrs	r3, r2
   2446e:	613b      	str	r3, [r7, #16]

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
   24470:	697b      	ldr	r3, [r7, #20]
   24472:	2280      	movs	r2, #128	; 0x80
   24474:	0292      	lsls	r2, r2, #10
   24476:	4313      	orrs	r3, r2
   24478:	617b      	str	r3, [r7, #20]
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
   2447a:	683b      	ldr	r3, [r7, #0]
   2447c:	7a1b      	ldrb	r3, [r3, #8]
   2447e:	2b00      	cmp	r3, #0
   24480:	d004      	beq.n	2448c <system_gclk_gen_set_config+0xc0>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
   24482:	697b      	ldr	r3, [r7, #20]
   24484:	2280      	movs	r2, #128	; 0x80
   24486:	0392      	lsls	r2, r2, #14
   24488:	4313      	orrs	r3, r2
   2448a:	617b      	str	r3, [r7, #20]
	}

	while (system_gclk_is_syncing()) {
   2448c:	46c0      	nop			; (mov r8, r8)
   2448e:	4b13      	ldr	r3, [pc, #76]	; (244dc <system_gclk_gen_set_config+0x110>)
   24490:	4798      	blx	r3
   24492:	1e03      	subs	r3, r0, #0
   24494:	d1fb      	bne.n	2448e <system_gclk_gen_set_config+0xc2>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
   24496:	4b12      	ldr	r3, [pc, #72]	; (244e0 <system_gclk_gen_set_config+0x114>)
   24498:	4798      	blx	r3

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
   2449a:	4a12      	ldr	r2, [pc, #72]	; (244e4 <system_gclk_gen_set_config+0x118>)
   2449c:	1dfb      	adds	r3, r7, #7
   2449e:	781b      	ldrb	r3, [r3, #0]
   244a0:	7013      	strb	r3, [r2, #0]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
   244a2:	46c0      	nop			; (mov r8, r8)
   244a4:	4b0d      	ldr	r3, [pc, #52]	; (244dc <system_gclk_gen_set_config+0x110>)
   244a6:	4798      	blx	r3
   244a8:	1e03      	subs	r3, r0, #0
   244aa:	d1fb      	bne.n	244a4 <system_gclk_gen_set_config+0xd8>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
   244ac:	4b0e      	ldr	r3, [pc, #56]	; (244e8 <system_gclk_gen_set_config+0x11c>)
   244ae:	693a      	ldr	r2, [r7, #16]
   244b0:	609a      	str	r2, [r3, #8]

	while (system_gclk_is_syncing()) {
   244b2:	46c0      	nop			; (mov r8, r8)
   244b4:	4b09      	ldr	r3, [pc, #36]	; (244dc <system_gclk_gen_set_config+0x110>)
   244b6:	4798      	blx	r3
   244b8:	1e03      	subs	r3, r0, #0
   244ba:	d1fb      	bne.n	244b4 <system_gclk_gen_set_config+0xe8>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
   244bc:	4b0a      	ldr	r3, [pc, #40]	; (244e8 <system_gclk_gen_set_config+0x11c>)
   244be:	4a0a      	ldr	r2, [pc, #40]	; (244e8 <system_gclk_gen_set_config+0x11c>)
   244c0:	6851      	ldr	r1, [r2, #4]
   244c2:	2280      	movs	r2, #128	; 0x80
   244c4:	0252      	lsls	r2, r2, #9
   244c6:	4011      	ands	r1, r2
   244c8:	697a      	ldr	r2, [r7, #20]
   244ca:	430a      	orrs	r2, r1
   244cc:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
   244ce:	4b07      	ldr	r3, [pc, #28]	; (244ec <system_gclk_gen_set_config+0x120>)
   244d0:	4798      	blx	r3
}
   244d2:	46c0      	nop			; (mov r8, r8)
   244d4:	46bd      	mov	sp, r7
   244d6:	b006      	add	sp, #24
   244d8:	bd80      	pop	{r7, pc}
   244da:	46c0      	nop			; (mov r8, r8)
   244dc:	0002437d 	.word	0x0002437d
   244e0:	00024355 	.word	0x00024355
   244e4:	40000c08 	.word	0x40000c08
   244e8:	40000c00 	.word	0x40000c00
   244ec:	00024369 	.word	0x00024369

000244f0 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
   244f0:	b580      	push	{r7, lr}
   244f2:	b082      	sub	sp, #8
   244f4:	af00      	add	r7, sp, #0
   244f6:	0002      	movs	r2, r0
   244f8:	1dfb      	adds	r3, r7, #7
   244fa:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
   244fc:	46c0      	nop			; (mov r8, r8)
   244fe:	4b0e      	ldr	r3, [pc, #56]	; (24538 <system_gclk_gen_enable+0x48>)
   24500:	4798      	blx	r3
   24502:	1e03      	subs	r3, r0, #0
   24504:	d1fb      	bne.n	244fe <system_gclk_gen_enable+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
   24506:	4b0d      	ldr	r3, [pc, #52]	; (2453c <system_gclk_gen_enable+0x4c>)
   24508:	4798      	blx	r3

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   2450a:	4a0d      	ldr	r2, [pc, #52]	; (24540 <system_gclk_gen_enable+0x50>)
   2450c:	1dfb      	adds	r3, r7, #7
   2450e:	781b      	ldrb	r3, [r3, #0]
   24510:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
   24512:	46c0      	nop			; (mov r8, r8)
   24514:	4b08      	ldr	r3, [pc, #32]	; (24538 <system_gclk_gen_enable+0x48>)
   24516:	4798      	blx	r3
   24518:	1e03      	subs	r3, r0, #0
   2451a:	d1fb      	bne.n	24514 <system_gclk_gen_enable+0x24>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
   2451c:	4b09      	ldr	r3, [pc, #36]	; (24544 <system_gclk_gen_enable+0x54>)
   2451e:	4a09      	ldr	r2, [pc, #36]	; (24544 <system_gclk_gen_enable+0x54>)
   24520:	6852      	ldr	r2, [r2, #4]
   24522:	2180      	movs	r1, #128	; 0x80
   24524:	0249      	lsls	r1, r1, #9
   24526:	430a      	orrs	r2, r1
   24528:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
   2452a:	4b07      	ldr	r3, [pc, #28]	; (24548 <system_gclk_gen_enable+0x58>)
   2452c:	4798      	blx	r3
}
   2452e:	46c0      	nop			; (mov r8, r8)
   24530:	46bd      	mov	sp, r7
   24532:	b002      	add	sp, #8
   24534:	bd80      	pop	{r7, pc}
   24536:	46c0      	nop			; (mov r8, r8)
   24538:	0002437d 	.word	0x0002437d
   2453c:	00024355 	.word	0x00024355
   24540:	40000c04 	.word	0x40000c04
   24544:	40000c00 	.word	0x40000c00
   24548:	00024369 	.word	0x00024369

0002454c <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
   2454c:	b580      	push	{r7, lr}
   2454e:	b086      	sub	sp, #24
   24550:	af00      	add	r7, sp, #0
   24552:	0002      	movs	r2, r0
   24554:	1dfb      	adds	r3, r7, #7
   24556:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
   24558:	46c0      	nop			; (mov r8, r8)
   2455a:	4b2a      	ldr	r3, [pc, #168]	; (24604 <system_gclk_gen_get_hz+0xb8>)
   2455c:	4798      	blx	r3
   2455e:	1e03      	subs	r3, r0, #0
   24560:	d1fb      	bne.n	2455a <system_gclk_gen_get_hz+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
   24562:	4b29      	ldr	r3, [pc, #164]	; (24608 <system_gclk_gen_get_hz+0xbc>)
   24564:	4798      	blx	r3

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   24566:	4a29      	ldr	r2, [pc, #164]	; (2460c <system_gclk_gen_get_hz+0xc0>)
   24568:	1dfb      	adds	r3, r7, #7
   2456a:	781b      	ldrb	r3, [r3, #0]
   2456c:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
   2456e:	46c0      	nop			; (mov r8, r8)
   24570:	4b24      	ldr	r3, [pc, #144]	; (24604 <system_gclk_gen_get_hz+0xb8>)
   24572:	4798      	blx	r3
   24574:	1e03      	subs	r3, r0, #0
   24576:	d1fb      	bne.n	24570 <system_gclk_gen_get_hz+0x24>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
   24578:	4b25      	ldr	r3, [pc, #148]	; (24610 <system_gclk_gen_get_hz+0xc4>)
   2457a:	685b      	ldr	r3, [r3, #4]
   2457c:	04db      	lsls	r3, r3, #19
   2457e:	0edb      	lsrs	r3, r3, #27
   24580:	b2db      	uxtb	r3, r3
	uint32_t gen_input_hz = system_clock_source_get_hz(
   24582:	0018      	movs	r0, r3
   24584:	4b23      	ldr	r3, [pc, #140]	; (24614 <system_gclk_gen_get_hz+0xc8>)
   24586:	4798      	blx	r3
   24588:	0003      	movs	r3, r0
   2458a:	617b      	str	r3, [r7, #20]

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   2458c:	4a1f      	ldr	r2, [pc, #124]	; (2460c <system_gclk_gen_get_hz+0xc0>)
   2458e:	1dfb      	adds	r3, r7, #7
   24590:	781b      	ldrb	r3, [r3, #0]
   24592:	7013      	strb	r3, [r2, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
   24594:	4b1e      	ldr	r3, [pc, #120]	; (24610 <system_gclk_gen_get_hz+0xc4>)
   24596:	685b      	ldr	r3, [r3, #4]
   24598:	02db      	lsls	r3, r3, #11
   2459a:	0fdb      	lsrs	r3, r3, #31
   2459c:	b2da      	uxtb	r2, r3
   2459e:	2313      	movs	r3, #19
   245a0:	18fb      	adds	r3, r7, r3
   245a2:	701a      	strb	r2, [r3, #0]

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
   245a4:	4a1c      	ldr	r2, [pc, #112]	; (24618 <system_gclk_gen_get_hz+0xcc>)
   245a6:	1dfb      	adds	r3, r7, #7
   245a8:	781b      	ldrb	r3, [r3, #0]
   245aa:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
   245ac:	46c0      	nop			; (mov r8, r8)
   245ae:	4b15      	ldr	r3, [pc, #84]	; (24604 <system_gclk_gen_get_hz+0xb8>)
   245b0:	4798      	blx	r3
   245b2:	1e03      	subs	r3, r0, #0
   245b4:	d1fb      	bne.n	245ae <system_gclk_gen_get_hz+0x62>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
   245b6:	4b16      	ldr	r3, [pc, #88]	; (24610 <system_gclk_gen_get_hz+0xc4>)
   245b8:	689b      	ldr	r3, [r3, #8]
   245ba:	021b      	lsls	r3, r3, #8
   245bc:	0c1b      	lsrs	r3, r3, #16
   245be:	b29b      	uxth	r3, r3
   245c0:	60fb      	str	r3, [r7, #12]

	system_interrupt_leave_critical_section();
   245c2:	4b16      	ldr	r3, [pc, #88]	; (2461c <system_gclk_gen_get_hz+0xd0>)
   245c4:	4798      	blx	r3

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
   245c6:	2313      	movs	r3, #19
   245c8:	18fb      	adds	r3, r7, r3
   245ca:	781b      	ldrb	r3, [r3, #0]
   245cc:	2b00      	cmp	r3, #0
   245ce:	d109      	bne.n	245e4 <system_gclk_gen_get_hz+0x98>
   245d0:	68fb      	ldr	r3, [r7, #12]
   245d2:	2b01      	cmp	r3, #1
   245d4:	d906      	bls.n	245e4 <system_gclk_gen_get_hz+0x98>
		gen_input_hz /= divider;
   245d6:	4b12      	ldr	r3, [pc, #72]	; (24620 <system_gclk_gen_get_hz+0xd4>)
   245d8:	68f9      	ldr	r1, [r7, #12]
   245da:	6978      	ldr	r0, [r7, #20]
   245dc:	4798      	blx	r3
   245de:	0003      	movs	r3, r0
   245e0:	617b      	str	r3, [r7, #20]
   245e2:	e00a      	b.n	245fa <system_gclk_gen_get_hz+0xae>
	} else if (divsel) {
   245e4:	2313      	movs	r3, #19
   245e6:	18fb      	adds	r3, r7, r3
   245e8:	781b      	ldrb	r3, [r3, #0]
   245ea:	2b00      	cmp	r3, #0
   245ec:	d005      	beq.n	245fa <system_gclk_gen_get_hz+0xae>
		gen_input_hz >>= (divider+1);
   245ee:	68fb      	ldr	r3, [r7, #12]
   245f0:	3301      	adds	r3, #1
   245f2:	697a      	ldr	r2, [r7, #20]
   245f4:	40da      	lsrs	r2, r3
   245f6:	0013      	movs	r3, r2
   245f8:	617b      	str	r3, [r7, #20]
	}

	return gen_input_hz;
   245fa:	697b      	ldr	r3, [r7, #20]
}
   245fc:	0018      	movs	r0, r3
   245fe:	46bd      	mov	sp, r7
   24600:	b006      	add	sp, #24
   24602:	bd80      	pop	{r7, pc}
   24604:	0002437d 	.word	0x0002437d
   24608:	00024355 	.word	0x00024355
   2460c:	40000c04 	.word	0x40000c04
   24610:	40000c00 	.word	0x40000c00
   24614:	00023b09 	.word	0x00023b09
   24618:	40000c08 	.word	0x40000c08
   2461c:	00024369 	.word	0x00024369
   24620:	0002616d 	.word	0x0002616d

00024624 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
   24624:	b580      	push	{r7, lr}
   24626:	b084      	sub	sp, #16
   24628:	af00      	add	r7, sp, #0
   2462a:	0002      	movs	r2, r0
   2462c:	6039      	str	r1, [r7, #0]
   2462e:	1dfb      	adds	r3, r7, #7
   24630:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);
   24632:	1dfb      	adds	r3, r7, #7
   24634:	781b      	ldrb	r3, [r3, #0]
   24636:	60fb      	str	r3, [r7, #12]

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
   24638:	683b      	ldr	r3, [r7, #0]
   2463a:	781b      	ldrb	r3, [r3, #0]
   2463c:	021b      	lsls	r3, r3, #8
   2463e:	001a      	movs	r2, r3
   24640:	68fb      	ldr	r3, [r7, #12]
   24642:	4313      	orrs	r3, r2
   24644:	60fb      	str	r3, [r7, #12]

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
   24646:	1dfb      	adds	r3, r7, #7
   24648:	781b      	ldrb	r3, [r3, #0]
   2464a:	0018      	movs	r0, r3
   2464c:	4b04      	ldr	r3, [pc, #16]	; (24660 <system_gclk_chan_set_config+0x3c>)
   2464e:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
   24650:	4b04      	ldr	r3, [pc, #16]	; (24664 <system_gclk_chan_set_config+0x40>)
   24652:	68fa      	ldr	r2, [r7, #12]
   24654:	b292      	uxth	r2, r2
   24656:	805a      	strh	r2, [r3, #2]
}
   24658:	46c0      	nop			; (mov r8, r8)
   2465a:	46bd      	mov	sp, r7
   2465c:	b004      	add	sp, #16
   2465e:	bd80      	pop	{r7, pc}
   24660:	000246b1 	.word	0x000246b1
   24664:	40000c00 	.word	0x40000c00

00024668 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
   24668:	b580      	push	{r7, lr}
   2466a:	b082      	sub	sp, #8
   2466c:	af00      	add	r7, sp, #0
   2466e:	0002      	movs	r2, r0
   24670:	1dfb      	adds	r3, r7, #7
   24672:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
   24674:	4b0a      	ldr	r3, [pc, #40]	; (246a0 <system_gclk_chan_enable+0x38>)
   24676:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   24678:	4a0a      	ldr	r2, [pc, #40]	; (246a4 <system_gclk_chan_enable+0x3c>)
   2467a:	1dfb      	adds	r3, r7, #7
   2467c:	781b      	ldrb	r3, [r3, #0]
   2467e:	7013      	strb	r3, [r2, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
   24680:	4909      	ldr	r1, [pc, #36]	; (246a8 <system_gclk_chan_enable+0x40>)
   24682:	4b09      	ldr	r3, [pc, #36]	; (246a8 <system_gclk_chan_enable+0x40>)
   24684:	885b      	ldrh	r3, [r3, #2]
   24686:	b29b      	uxth	r3, r3
   24688:	2280      	movs	r2, #128	; 0x80
   2468a:	01d2      	lsls	r2, r2, #7
   2468c:	4313      	orrs	r3, r2
   2468e:	b29b      	uxth	r3, r3
   24690:	804b      	strh	r3, [r1, #2]

	system_interrupt_leave_critical_section();
   24692:	4b06      	ldr	r3, [pc, #24]	; (246ac <system_gclk_chan_enable+0x44>)
   24694:	4798      	blx	r3
}
   24696:	46c0      	nop			; (mov r8, r8)
   24698:	46bd      	mov	sp, r7
   2469a:	b002      	add	sp, #8
   2469c:	bd80      	pop	{r7, pc}
   2469e:	46c0      	nop			; (mov r8, r8)
   246a0:	00024355 	.word	0x00024355
   246a4:	40000c02 	.word	0x40000c02
   246a8:	40000c00 	.word	0x40000c00
   246ac:	00024369 	.word	0x00024369

000246b0 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
   246b0:	b580      	push	{r7, lr}
   246b2:	b084      	sub	sp, #16
   246b4:	af00      	add	r7, sp, #0
   246b6:	0002      	movs	r2, r0
   246b8:	1dfb      	adds	r3, r7, #7
   246ba:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
   246bc:	4b1c      	ldr	r3, [pc, #112]	; (24730 <system_gclk_chan_disable+0x80>)
   246be:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   246c0:	4a1c      	ldr	r2, [pc, #112]	; (24734 <system_gclk_chan_disable+0x84>)
   246c2:	1dfb      	adds	r3, r7, #7
   246c4:	781b      	ldrb	r3, [r3, #0]
   246c6:	7013      	strb	r3, [r2, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
   246c8:	4b1b      	ldr	r3, [pc, #108]	; (24738 <system_gclk_chan_disable+0x88>)
   246ca:	885b      	ldrh	r3, [r3, #2]
   246cc:	051b      	lsls	r3, r3, #20
   246ce:	0f1b      	lsrs	r3, r3, #28
   246d0:	b2db      	uxtb	r3, r3
   246d2:	60fb      	str	r3, [r7, #12]
	GCLK->CLKCTRL.bit.GEN = 0;
   246d4:	4a18      	ldr	r2, [pc, #96]	; (24738 <system_gclk_chan_disable+0x88>)
   246d6:	8853      	ldrh	r3, [r2, #2]
   246d8:	4918      	ldr	r1, [pc, #96]	; (2473c <system_gclk_chan_disable+0x8c>)
   246da:	400b      	ands	r3, r1
   246dc:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
   246de:	4a16      	ldr	r2, [pc, #88]	; (24738 <system_gclk_chan_disable+0x88>)
   246e0:	4b15      	ldr	r3, [pc, #84]	; (24738 <system_gclk_chan_disable+0x88>)
   246e2:	885b      	ldrh	r3, [r3, #2]
   246e4:	b29b      	uxth	r3, r3
   246e6:	4916      	ldr	r1, [pc, #88]	; (24740 <system_gclk_chan_disable+0x90>)
   246e8:	400b      	ands	r3, r1
   246ea:	b29b      	uxth	r3, r3
   246ec:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
   246ee:	46c0      	nop			; (mov r8, r8)
   246f0:	4b11      	ldr	r3, [pc, #68]	; (24738 <system_gclk_chan_disable+0x88>)
   246f2:	885b      	ldrh	r3, [r3, #2]
   246f4:	b29b      	uxth	r3, r3
   246f6:	001a      	movs	r2, r3
   246f8:	2380      	movs	r3, #128	; 0x80
   246fa:	01db      	lsls	r3, r3, #7
   246fc:	4013      	ands	r3, r2
   246fe:	d1f7      	bne.n	246f0 <system_gclk_chan_disable+0x40>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
   24700:	4a0d      	ldr	r2, [pc, #52]	; (24738 <system_gclk_chan_disable+0x88>)
   24702:	68fb      	ldr	r3, [r7, #12]
   24704:	b2db      	uxtb	r3, r3
   24706:	1c19      	adds	r1, r3, #0
   24708:	230f      	movs	r3, #15
   2470a:	400b      	ands	r3, r1
   2470c:	b2d9      	uxtb	r1, r3
   2470e:	8853      	ldrh	r3, [r2, #2]
   24710:	1c08      	adds	r0, r1, #0
   24712:	210f      	movs	r1, #15
   24714:	4001      	ands	r1, r0
   24716:	0208      	lsls	r0, r1, #8
   24718:	4908      	ldr	r1, [pc, #32]	; (2473c <system_gclk_chan_disable+0x8c>)
   2471a:	400b      	ands	r3, r1
   2471c:	1c19      	adds	r1, r3, #0
   2471e:	1c03      	adds	r3, r0, #0
   24720:	430b      	orrs	r3, r1
   24722:	8053      	strh	r3, [r2, #2]

	system_interrupt_leave_critical_section();
   24724:	4b07      	ldr	r3, [pc, #28]	; (24744 <system_gclk_chan_disable+0x94>)
   24726:	4798      	blx	r3
}
   24728:	46c0      	nop			; (mov r8, r8)
   2472a:	46bd      	mov	sp, r7
   2472c:	b004      	add	sp, #16
   2472e:	bd80      	pop	{r7, pc}
   24730:	00024355 	.word	0x00024355
   24734:	40000c02 	.word	0x40000c02
   24738:	40000c00 	.word	0x40000c00
   2473c:	fffff0ff 	.word	0xfffff0ff
   24740:	ffffbfff 	.word	0xffffbfff
   24744:	00024369 	.word	0x00024369

00024748 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
   24748:	b580      	push	{r7, lr}
   2474a:	b084      	sub	sp, #16
   2474c:	af00      	add	r7, sp, #0
   2474e:	0002      	movs	r2, r0
   24750:	1dfb      	adds	r3, r7, #7
   24752:	701a      	strb	r2, [r3, #0]
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
   24754:	4b0d      	ldr	r3, [pc, #52]	; (2478c <system_gclk_chan_get_hz+0x44>)
   24756:	4798      	blx	r3

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   24758:	4a0d      	ldr	r2, [pc, #52]	; (24790 <system_gclk_chan_get_hz+0x48>)
   2475a:	1dfb      	adds	r3, r7, #7
   2475c:	781b      	ldrb	r3, [r3, #0]
   2475e:	7013      	strb	r3, [r2, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
   24760:	4b0c      	ldr	r3, [pc, #48]	; (24794 <system_gclk_chan_get_hz+0x4c>)
   24762:	885b      	ldrh	r3, [r3, #2]
   24764:	051b      	lsls	r3, r3, #20
   24766:	0f1b      	lsrs	r3, r3, #28
   24768:	b2da      	uxtb	r2, r3
   2476a:	230f      	movs	r3, #15
   2476c:	18fb      	adds	r3, r7, r3
   2476e:	701a      	strb	r2, [r3, #0]

	system_interrupt_leave_critical_section();
   24770:	4b09      	ldr	r3, [pc, #36]	; (24798 <system_gclk_chan_get_hz+0x50>)
   24772:	4798      	blx	r3

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
   24774:	230f      	movs	r3, #15
   24776:	18fb      	adds	r3, r7, r3
   24778:	781b      	ldrb	r3, [r3, #0]
   2477a:	0018      	movs	r0, r3
   2477c:	4b07      	ldr	r3, [pc, #28]	; (2479c <system_gclk_chan_get_hz+0x54>)
   2477e:	4798      	blx	r3
   24780:	0003      	movs	r3, r0
}
   24782:	0018      	movs	r0, r3
   24784:	46bd      	mov	sp, r7
   24786:	b004      	add	sp, #16
   24788:	bd80      	pop	{r7, pc}
   2478a:	46c0      	nop			; (mov r8, r8)
   2478c:	00024355 	.word	0x00024355
   24790:	40000c02 	.word	0x40000c02
   24794:	40000c00 	.word	0x40000c00
   24798:	00024369 	.word	0x00024369
   2479c:	0002454d 	.word	0x0002454d

000247a0 <system_pinmux_get_group_from_gpio_pin>:
{
   247a0:	b580      	push	{r7, lr}
   247a2:	b084      	sub	sp, #16
   247a4:	af00      	add	r7, sp, #0
   247a6:	0002      	movs	r2, r0
   247a8:	1dfb      	adds	r3, r7, #7
   247aa:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   247ac:	230f      	movs	r3, #15
   247ae:	18fb      	adds	r3, r7, r3
   247b0:	1dfa      	adds	r2, r7, #7
   247b2:	7812      	ldrb	r2, [r2, #0]
   247b4:	09d2      	lsrs	r2, r2, #7
   247b6:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   247b8:	230e      	movs	r3, #14
   247ba:	18fb      	adds	r3, r7, r3
   247bc:	1dfa      	adds	r2, r7, #7
   247be:	7812      	ldrb	r2, [r2, #0]
   247c0:	0952      	lsrs	r2, r2, #5
   247c2:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   247c4:	4b0d      	ldr	r3, [pc, #52]	; (247fc <system_pinmux_get_group_from_gpio_pin+0x5c>)
   247c6:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   247c8:	230f      	movs	r3, #15
   247ca:	18fb      	adds	r3, r7, r3
   247cc:	781b      	ldrb	r3, [r3, #0]
   247ce:	2b00      	cmp	r3, #0
   247d0:	d10f      	bne.n	247f2 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   247d2:	230f      	movs	r3, #15
   247d4:	18fb      	adds	r3, r7, r3
   247d6:	781b      	ldrb	r3, [r3, #0]
   247d8:	009b      	lsls	r3, r3, #2
   247da:	2210      	movs	r2, #16
   247dc:	4694      	mov	ip, r2
   247de:	44bc      	add	ip, r7
   247e0:	4463      	add	r3, ip
   247e2:	3b08      	subs	r3, #8
   247e4:	681a      	ldr	r2, [r3, #0]
   247e6:	230e      	movs	r3, #14
   247e8:	18fb      	adds	r3, r7, r3
   247ea:	781b      	ldrb	r3, [r3, #0]
   247ec:	01db      	lsls	r3, r3, #7
   247ee:	18d3      	adds	r3, r2, r3
   247f0:	e000      	b.n	247f4 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   247f2:	2300      	movs	r3, #0
}
   247f4:	0018      	movs	r0, r3
   247f6:	46bd      	mov	sp, r7
   247f8:	b004      	add	sp, #16
   247fa:	bd80      	pop	{r7, pc}
   247fc:	41004400 	.word	0x41004400

00024800 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
   24800:	b580      	push	{r7, lr}
   24802:	b088      	sub	sp, #32
   24804:	af00      	add	r7, sp, #0
   24806:	60f8      	str	r0, [r7, #12]
   24808:	60b9      	str	r1, [r7, #8]
   2480a:	607a      	str	r2, [r7, #4]
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
   2480c:	2300      	movs	r3, #0
   2480e:	61fb      	str	r3, [r7, #28]

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
   24810:	687b      	ldr	r3, [r7, #4]
   24812:	78db      	ldrb	r3, [r3, #3]
   24814:	2201      	movs	r2, #1
   24816:	4053      	eors	r3, r2
   24818:	b2db      	uxtb	r3, r3
   2481a:	2b00      	cmp	r3, #0
   2481c:	d035      	beq.n	2488a <_system_pinmux_config+0x8a>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
   2481e:	687b      	ldr	r3, [r7, #4]
   24820:	781b      	ldrb	r3, [r3, #0]
   24822:	2b80      	cmp	r3, #128	; 0x80
   24824:	d00b      	beq.n	2483e <_system_pinmux_config+0x3e>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
   24826:	69fb      	ldr	r3, [r7, #28]
   24828:	2280      	movs	r2, #128	; 0x80
   2482a:	0252      	lsls	r2, r2, #9
   2482c:	4313      	orrs	r3, r2
   2482e:	61fb      	str	r3, [r7, #28]
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
   24830:	687b      	ldr	r3, [r7, #4]
   24832:	781b      	ldrb	r3, [r3, #0]
   24834:	061b      	lsls	r3, r3, #24
   24836:	001a      	movs	r2, r3
   24838:	69fb      	ldr	r3, [r7, #28]
   2483a:	4313      	orrs	r3, r2
   2483c:	61fb      	str	r3, [r7, #28]
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
   2483e:	687b      	ldr	r3, [r7, #4]
   24840:	785b      	ldrb	r3, [r3, #1]
   24842:	2b00      	cmp	r3, #0
   24844:	d003      	beq.n	2484e <_system_pinmux_config+0x4e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
   24846:	687b      	ldr	r3, [r7, #4]
   24848:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
   2484a:	2b02      	cmp	r3, #2
   2484c:	d110      	bne.n	24870 <_system_pinmux_config+0x70>
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
   2484e:	69fb      	ldr	r3, [r7, #28]
   24850:	2280      	movs	r2, #128	; 0x80
   24852:	0292      	lsls	r2, r2, #10
   24854:	4313      	orrs	r3, r2
   24856:	61fb      	str	r3, [r7, #28]

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
   24858:	687b      	ldr	r3, [r7, #4]
   2485a:	789b      	ldrb	r3, [r3, #2]
   2485c:	2b00      	cmp	r3, #0
   2485e:	d004      	beq.n	2486a <_system_pinmux_config+0x6a>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
   24860:	69fb      	ldr	r3, [r7, #28]
   24862:	2280      	movs	r2, #128	; 0x80
   24864:	02d2      	lsls	r2, r2, #11
   24866:	4313      	orrs	r3, r2
   24868:	61fb      	str	r3, [r7, #28]
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
   2486a:	68fb      	ldr	r3, [r7, #12]
   2486c:	68ba      	ldr	r2, [r7, #8]
   2486e:	605a      	str	r2, [r3, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   24870:	687b      	ldr	r3, [r7, #4]
   24872:	785b      	ldrb	r3, [r3, #1]
   24874:	2b01      	cmp	r3, #1
   24876:	d003      	beq.n	24880 <_system_pinmux_config+0x80>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
   24878:	687b      	ldr	r3, [r7, #4]
   2487a:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   2487c:	2b02      	cmp	r3, #2
   2487e:	d107      	bne.n	24890 <_system_pinmux_config+0x90>
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
   24880:	69fb      	ldr	r3, [r7, #28]
   24882:	4a22      	ldr	r2, [pc, #136]	; (2490c <_system_pinmux_config+0x10c>)
   24884:	4013      	ands	r3, r2
   24886:	61fb      	str	r3, [r7, #28]
   24888:	e002      	b.n	24890 <_system_pinmux_config+0x90>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
   2488a:	68fb      	ldr	r3, [r7, #12]
   2488c:	68ba      	ldr	r2, [r7, #8]
   2488e:	605a      	str	r2, [r3, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
   24890:	68bb      	ldr	r3, [r7, #8]
   24892:	041b      	lsls	r3, r3, #16
   24894:	0c1b      	lsrs	r3, r3, #16
   24896:	61bb      	str	r3, [r7, #24]
	uint32_t upper_pin_mask = (pin_mask >> 16);
   24898:	68bb      	ldr	r3, [r7, #8]
   2489a:	0c1b      	lsrs	r3, r3, #16
   2489c:	617b      	str	r3, [r7, #20]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   2489e:	69ba      	ldr	r2, [r7, #24]
   248a0:	69fb      	ldr	r3, [r7, #28]
   248a2:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
   248a4:	22a0      	movs	r2, #160	; 0xa0
   248a6:	05d2      	lsls	r2, r2, #23
   248a8:	431a      	orrs	r2, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   248aa:	68fb      	ldr	r3, [r7, #12]
   248ac:	629a      	str	r2, [r3, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   248ae:	697a      	ldr	r2, [r7, #20]
   248b0:	69fb      	ldr	r3, [r7, #28]
   248b2:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
   248b4:	22d0      	movs	r2, #208	; 0xd0
   248b6:	0612      	lsls	r2, r2, #24
   248b8:	431a      	orrs	r2, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   248ba:	68fb      	ldr	r3, [r7, #12]
   248bc:	629a      	str	r2, [r3, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
   248be:	687b      	ldr	r3, [r7, #4]
   248c0:	78db      	ldrb	r3, [r3, #3]
   248c2:	2201      	movs	r2, #1
   248c4:	4053      	eors	r3, r2
   248c6:	b2db      	uxtb	r3, r3
   248c8:	2b00      	cmp	r3, #0
   248ca:	d01a      	beq.n	24902 <_system_pinmux_config+0x102>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
   248cc:	69fa      	ldr	r2, [r7, #28]
   248ce:	2380      	movs	r3, #128	; 0x80
   248d0:	02db      	lsls	r3, r3, #11
   248d2:	4013      	ands	r3, r2
   248d4:	d00a      	beq.n	248ec <_system_pinmux_config+0xec>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
   248d6:	687b      	ldr	r3, [r7, #4]
   248d8:	789b      	ldrb	r3, [r3, #2]
   248da:	2b01      	cmp	r3, #1
   248dc:	d103      	bne.n	248e6 <_system_pinmux_config+0xe6>
				port->OUTSET.reg = pin_mask;
   248de:	68fb      	ldr	r3, [r7, #12]
   248e0:	68ba      	ldr	r2, [r7, #8]
   248e2:	619a      	str	r2, [r3, #24]
   248e4:	e002      	b.n	248ec <_system_pinmux_config+0xec>
			} else {
				port->OUTCLR.reg = pin_mask;
   248e6:	68fb      	ldr	r3, [r7, #12]
   248e8:	68ba      	ldr	r2, [r7, #8]
   248ea:	615a      	str	r2, [r3, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   248ec:	687b      	ldr	r3, [r7, #4]
   248ee:	785b      	ldrb	r3, [r3, #1]
   248f0:	2b01      	cmp	r3, #1
   248f2:	d003      	beq.n	248fc <_system_pinmux_config+0xfc>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
   248f4:	687b      	ldr	r3, [r7, #4]
   248f6:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   248f8:	2b02      	cmp	r3, #2
   248fa:	d102      	bne.n	24902 <_system_pinmux_config+0x102>
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
   248fc:	68fb      	ldr	r3, [r7, #12]
   248fe:	68ba      	ldr	r2, [r7, #8]
   24900:	609a      	str	r2, [r3, #8]
		}
	}
}
   24902:	46c0      	nop			; (mov r8, r8)
   24904:	46bd      	mov	sp, r7
   24906:	b008      	add	sp, #32
   24908:	bd80      	pop	{r7, pc}
   2490a:	46c0      	nop			; (mov r8, r8)
   2490c:	fffbffff 	.word	0xfffbffff

00024910 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
   24910:	b580      	push	{r7, lr}
   24912:	b084      	sub	sp, #16
   24914:	af00      	add	r7, sp, #0
   24916:	0002      	movs	r2, r0
   24918:	6039      	str	r1, [r7, #0]
   2491a:	1dfb      	adds	r3, r7, #7
   2491c:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
   2491e:	1dfb      	adds	r3, r7, #7
   24920:	781b      	ldrb	r3, [r3, #0]
   24922:	0018      	movs	r0, r3
   24924:	4b0a      	ldr	r3, [pc, #40]	; (24950 <system_pinmux_pin_set_config+0x40>)
   24926:	4798      	blx	r3
   24928:	0003      	movs	r3, r0
   2492a:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
   2492c:	1dfb      	adds	r3, r7, #7
   2492e:	781b      	ldrb	r3, [r3, #0]
   24930:	221f      	movs	r2, #31
   24932:	4013      	ands	r3, r2
   24934:	2201      	movs	r2, #1
   24936:	409a      	lsls	r2, r3
   24938:	0013      	movs	r3, r2
   2493a:	60bb      	str	r3, [r7, #8]

	_system_pinmux_config(port, pin_mask, config);
   2493c:	683a      	ldr	r2, [r7, #0]
   2493e:	68b9      	ldr	r1, [r7, #8]
   24940:	68fb      	ldr	r3, [r7, #12]
   24942:	0018      	movs	r0, r3
   24944:	4b03      	ldr	r3, [pc, #12]	; (24954 <system_pinmux_pin_set_config+0x44>)
   24946:	4798      	blx	r3
}
   24948:	46c0      	nop			; (mov r8, r8)
   2494a:	46bd      	mov	sp, r7
   2494c:	b004      	add	sp, #16
   2494e:	bd80      	pop	{r7, pc}
   24950:	000247a1 	.word	0x000247a1
   24954:	00024801 	.word	0x00024801

00024958 <_system_dummy_init>:
 * Dummy initialization function, used as a weak alias target for the various
 * init functions called by \ref system_init().
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
   24958:	b580      	push	{r7, lr}
   2495a:	af00      	add	r7, sp, #0
	return;
   2495c:	46c0      	nop			; (mov r8, r8)
}
   2495e:	46bd      	mov	sp, r7
   24960:	bd80      	pop	{r7, pc}
	...

00024964 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
   24964:	b580      	push	{r7, lr}
   24966:	af00      	add	r7, sp, #0
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
   24968:	4b06      	ldr	r3, [pc, #24]	; (24984 <system_init+0x20>)
   2496a:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
   2496c:	4b06      	ldr	r3, [pc, #24]	; (24988 <system_init+0x24>)
   2496e:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
   24970:	4b06      	ldr	r3, [pc, #24]	; (2498c <system_init+0x28>)
   24972:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
   24974:	4b06      	ldr	r3, [pc, #24]	; (24990 <system_init+0x2c>)
   24976:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
   24978:	4b06      	ldr	r3, [pc, #24]	; (24994 <system_init+0x30>)
   2497a:	4798      	blx	r3
}
   2497c:	46c0      	nop			; (mov r8, r8)
   2497e:	46bd      	mov	sp, r7
   24980:	bd80      	pop	{r7, pc}
   24982:	46c0      	nop			; (mov r8, r8)
   24984:	00023f99 	.word	0x00023f99
   24988:	00023861 	.word	0x00023861
   2498c:	00022469 	.word	0x00022469
   24990:	0001e0d1 	.word	0x0001e0d1
   24994:	00024959 	.word	0x00024959

00024998 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   24998:	b580      	push	{r7, lr}
   2499a:	b082      	sub	sp, #8
   2499c:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
   2499e:	4b2f      	ldr	r3, [pc, #188]	; (24a5c <Reset_Handler+0xc4>)
   249a0:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
   249a2:	4b2f      	ldr	r3, [pc, #188]	; (24a60 <Reset_Handler+0xc8>)
   249a4:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
   249a6:	687a      	ldr	r2, [r7, #4]
   249a8:	683b      	ldr	r3, [r7, #0]
   249aa:	429a      	cmp	r2, r3
   249ac:	d00c      	beq.n	249c8 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
   249ae:	e007      	b.n	249c0 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
   249b0:	683b      	ldr	r3, [r7, #0]
   249b2:	1d1a      	adds	r2, r3, #4
   249b4:	603a      	str	r2, [r7, #0]
   249b6:	687a      	ldr	r2, [r7, #4]
   249b8:	1d11      	adds	r1, r2, #4
   249ba:	6079      	str	r1, [r7, #4]
   249bc:	6812      	ldr	r2, [r2, #0]
   249be:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
   249c0:	683a      	ldr	r2, [r7, #0]
   249c2:	4b28      	ldr	r3, [pc, #160]	; (24a64 <Reset_Handler+0xcc>)
   249c4:	429a      	cmp	r2, r3
   249c6:	d3f3      	bcc.n	249b0 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
   249c8:	4b27      	ldr	r3, [pc, #156]	; (24a68 <Reset_Handler+0xd0>)
   249ca:	603b      	str	r3, [r7, #0]
   249cc:	e004      	b.n	249d8 <Reset_Handler+0x40>
                *pDest++ = 0;
   249ce:	683b      	ldr	r3, [r7, #0]
   249d0:	1d1a      	adds	r2, r3, #4
   249d2:	603a      	str	r2, [r7, #0]
   249d4:	2200      	movs	r2, #0
   249d6:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
   249d8:	683a      	ldr	r2, [r7, #0]
   249da:	4b24      	ldr	r3, [pc, #144]	; (24a6c <Reset_Handler+0xd4>)
   249dc:	429a      	cmp	r2, r3
   249de:	d3f6      	bcc.n	249ce <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
   249e0:	4b23      	ldr	r3, [pc, #140]	; (24a70 <Reset_Handler+0xd8>)
   249e2:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   249e4:	4b23      	ldr	r3, [pc, #140]	; (24a74 <Reset_Handler+0xdc>)
   249e6:	687a      	ldr	r2, [r7, #4]
   249e8:	21ff      	movs	r1, #255	; 0xff
   249ea:	438a      	bics	r2, r1
   249ec:	609a      	str	r2, [r3, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
   249ee:	4a22      	ldr	r2, [pc, #136]	; (24a78 <Reset_Handler+0xe0>)
   249f0:	2390      	movs	r3, #144	; 0x90
   249f2:	005b      	lsls	r3, r3, #1
   249f4:	2102      	movs	r1, #2
   249f6:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
   249f8:	4a20      	ldr	r2, [pc, #128]	; (24a7c <Reset_Handler+0xe4>)
   249fa:	78d3      	ldrb	r3, [r2, #3]
   249fc:	2103      	movs	r1, #3
   249fe:	438b      	bics	r3, r1
   24a00:	1c19      	adds	r1, r3, #0
   24a02:	2302      	movs	r3, #2
   24a04:	430b      	orrs	r3, r1
   24a06:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
   24a08:	4a1c      	ldr	r2, [pc, #112]	; (24a7c <Reset_Handler+0xe4>)
   24a0a:	78d3      	ldrb	r3, [r2, #3]
   24a0c:	210c      	movs	r1, #12
   24a0e:	438b      	bics	r3, r1
   24a10:	1c19      	adds	r1, r3, #0
   24a12:	2308      	movs	r3, #8
   24a14:	430b      	orrs	r3, r1
   24a16:	70d3      	strb	r3, [r2, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
   24a18:	4a19      	ldr	r2, [pc, #100]	; (24a80 <Reset_Handler+0xe8>)
   24a1a:	7b93      	ldrb	r3, [r2, #14]
   24a1c:	2130      	movs	r1, #48	; 0x30
   24a1e:	438b      	bics	r3, r1
   24a20:	1c19      	adds	r1, r3, #0
   24a22:	2320      	movs	r3, #32
   24a24:	430b      	orrs	r3, r1
   24a26:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
   24a28:	4a15      	ldr	r2, [pc, #84]	; (24a80 <Reset_Handler+0xe8>)
   24a2a:	7b93      	ldrb	r3, [r2, #14]
   24a2c:	210c      	movs	r1, #12
   24a2e:	438b      	bics	r3, r1
   24a30:	1c19      	adds	r1, r3, #0
   24a32:	2308      	movs	r3, #8
   24a34:	430b      	orrs	r3, r1
   24a36:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
   24a38:	4a11      	ldr	r2, [pc, #68]	; (24a80 <Reset_Handler+0xe8>)
   24a3a:	7b93      	ldrb	r3, [r2, #14]
   24a3c:	2103      	movs	r1, #3
   24a3e:	438b      	bics	r3, r1
   24a40:	1c19      	adds	r1, r3, #0
   24a42:	2302      	movs	r3, #2
   24a44:	430b      	orrs	r3, r1
   24a46:	7393      	strb	r3, [r2, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
   24a48:	4a0e      	ldr	r2, [pc, #56]	; (24a84 <Reset_Handler+0xec>)
   24a4a:	6853      	ldr	r3, [r2, #4]
   24a4c:	2180      	movs	r1, #128	; 0x80
   24a4e:	430b      	orrs	r3, r1
   24a50:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
   24a52:	4b0d      	ldr	r3, [pc, #52]	; (24a88 <Reset_Handler+0xf0>)
   24a54:	4798      	blx	r3

        /* Branch to main function */
        main();
   24a56:	4b0d      	ldr	r3, [pc, #52]	; (24a8c <Reset_Handler+0xf4>)
   24a58:	4798      	blx	r3

        /* Infinite loop */
        while (1);
   24a5a:	e7fe      	b.n	24a5a <Reset_Handler+0xc2>
   24a5c:	0002ac0c 	.word	0x0002ac0c
   24a60:	20000000 	.word	0x20000000
   24a64:	200001fc 	.word	0x200001fc
   24a68:	20000200 	.word	0x20000200
   24a6c:	2000098c 	.word	0x2000098c
   24a70:	00010000 	.word	0x00010000
   24a74:	e000ed00 	.word	0xe000ed00
   24a78:	41007000 	.word	0x41007000
   24a7c:	41005000 	.word	0x41005000
   24a80:	41004800 	.word	0x41004800
   24a84:	41004000 	.word	0x41004000
   24a88:	000288f5 	.word	0x000288f5
   24a8c:	00024cc1 	.word	0x00024cc1

00024a90 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   24a90:	b580      	push	{r7, lr}
   24a92:	af00      	add	r7, sp, #0
        while (1) {
   24a94:	e7fe      	b.n	24a94 <Dummy_Handler+0x4>
	...

00024a98 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
   24a98:	b580      	push	{r7, lr}
   24a9a:	b084      	sub	sp, #16
   24a9c:	af00      	add	r7, sp, #0
   24a9e:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
   24aa0:	4b0a      	ldr	r3, [pc, #40]	; (24acc <_sbrk+0x34>)
   24aa2:	681b      	ldr	r3, [r3, #0]
   24aa4:	2b00      	cmp	r3, #0
   24aa6:	d102      	bne.n	24aae <_sbrk+0x16>
		heap = (unsigned char *)&_end;
   24aa8:	4b08      	ldr	r3, [pc, #32]	; (24acc <_sbrk+0x34>)
   24aaa:	4a09      	ldr	r2, [pc, #36]	; (24ad0 <_sbrk+0x38>)
   24aac:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
   24aae:	4b07      	ldr	r3, [pc, #28]	; (24acc <_sbrk+0x34>)
   24ab0:	681b      	ldr	r3, [r3, #0]
   24ab2:	60fb      	str	r3, [r7, #12]

	heap += incr;
   24ab4:	4b05      	ldr	r3, [pc, #20]	; (24acc <_sbrk+0x34>)
   24ab6:	681a      	ldr	r2, [r3, #0]
   24ab8:	687b      	ldr	r3, [r7, #4]
   24aba:	18d2      	adds	r2, r2, r3
   24abc:	4b03      	ldr	r3, [pc, #12]	; (24acc <_sbrk+0x34>)
   24abe:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap;
   24ac0:	68fb      	ldr	r3, [r7, #12]
}
   24ac2:	0018      	movs	r0, r3
   24ac4:	46bd      	mov	sp, r7
   24ac6:	b004      	add	sp, #16
   24ac8:	bd80      	pop	{r7, pc}
   24aca:	46c0      	nop			; (mov r8, r8)
   24acc:	20000508 	.word	0x20000508
   24ad0:	20002990 	.word	0x20002990

00024ad4 <system_apb_clock_clear_mask>:
{
   24ad4:	b580      	push	{r7, lr}
   24ad6:	b082      	sub	sp, #8
   24ad8:	af00      	add	r7, sp, #0
   24ada:	0002      	movs	r2, r0
   24adc:	6039      	str	r1, [r7, #0]
   24ade:	1dfb      	adds	r3, r7, #7
   24ae0:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   24ae2:	1dfb      	adds	r3, r7, #7
   24ae4:	781b      	ldrb	r3, [r3, #0]
   24ae6:	2b01      	cmp	r3, #1
   24ae8:	d00b      	beq.n	24b02 <system_apb_clock_clear_mask+0x2e>
   24aea:	2b02      	cmp	r3, #2
   24aec:	d011      	beq.n	24b12 <system_apb_clock_clear_mask+0x3e>
   24aee:	2b00      	cmp	r3, #0
   24af0:	d117      	bne.n	24b22 <system_apb_clock_clear_mask+0x4e>
			PM->APBAMASK.reg &= ~mask;
   24af2:	4b0f      	ldr	r3, [pc, #60]	; (24b30 <system_apb_clock_clear_mask+0x5c>)
   24af4:	4a0e      	ldr	r2, [pc, #56]	; (24b30 <system_apb_clock_clear_mask+0x5c>)
   24af6:	6992      	ldr	r2, [r2, #24]
   24af8:	6839      	ldr	r1, [r7, #0]
   24afa:	43c9      	mvns	r1, r1
   24afc:	400a      	ands	r2, r1
   24afe:	619a      	str	r2, [r3, #24]
			break;
   24b00:	e011      	b.n	24b26 <system_apb_clock_clear_mask+0x52>
			PM->APBBMASK.reg &= ~mask;
   24b02:	4b0b      	ldr	r3, [pc, #44]	; (24b30 <system_apb_clock_clear_mask+0x5c>)
   24b04:	4a0a      	ldr	r2, [pc, #40]	; (24b30 <system_apb_clock_clear_mask+0x5c>)
   24b06:	69d2      	ldr	r2, [r2, #28]
   24b08:	6839      	ldr	r1, [r7, #0]
   24b0a:	43c9      	mvns	r1, r1
   24b0c:	400a      	ands	r2, r1
   24b0e:	61da      	str	r2, [r3, #28]
			break;
   24b10:	e009      	b.n	24b26 <system_apb_clock_clear_mask+0x52>
			PM->APBCMASK.reg &= ~mask;
   24b12:	4b07      	ldr	r3, [pc, #28]	; (24b30 <system_apb_clock_clear_mask+0x5c>)
   24b14:	4a06      	ldr	r2, [pc, #24]	; (24b30 <system_apb_clock_clear_mask+0x5c>)
   24b16:	6a12      	ldr	r2, [r2, #32]
   24b18:	6839      	ldr	r1, [r7, #0]
   24b1a:	43c9      	mvns	r1, r1
   24b1c:	400a      	ands	r2, r1
   24b1e:	621a      	str	r2, [r3, #32]
			break;
   24b20:	e001      	b.n	24b26 <system_apb_clock_clear_mask+0x52>
			return STATUS_ERR_INVALID_ARG;
   24b22:	2317      	movs	r3, #23
   24b24:	e000      	b.n	24b28 <system_apb_clock_clear_mask+0x54>
	return STATUS_OK;
   24b26:	2300      	movs	r3, #0
}
   24b28:	0018      	movs	r0, r3
   24b2a:	46bd      	mov	sp, r7
   24b2c:	b002      	add	sp, #8
   24b2e:	bd80      	pop	{r7, pc}
   24b30:	40000400 	.word	0x40000400

00024b34 <system_interrupt_enable_global>:
{
   24b34:	b580      	push	{r7, lr}
   24b36:	af00      	add	r7, sp, #0
	cpu_irq_enable();
   24b38:	4b04      	ldr	r3, [pc, #16]	; (24b4c <system_interrupt_enable_global+0x18>)
   24b3a:	2201      	movs	r2, #1
   24b3c:	701a      	strb	r2, [r3, #0]
   24b3e:	f3bf 8f5f 	dmb	sy
   24b42:	b662      	cpsie	i
}
   24b44:	46c0      	nop			; (mov r8, r8)
   24b46:	46bd      	mov	sp, r7
   24b48:	bd80      	pop	{r7, pc}
   24b4a:	46c0      	nop			; (mov r8, r8)
   24b4c:	20000028 	.word	0x20000028

00024b50 <system_pinmux_get_group_from_gpio_pin>:
{
   24b50:	b580      	push	{r7, lr}
   24b52:	b084      	sub	sp, #16
   24b54:	af00      	add	r7, sp, #0
   24b56:	0002      	movs	r2, r0
   24b58:	1dfb      	adds	r3, r7, #7
   24b5a:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   24b5c:	230f      	movs	r3, #15
   24b5e:	18fb      	adds	r3, r7, r3
   24b60:	1dfa      	adds	r2, r7, #7
   24b62:	7812      	ldrb	r2, [r2, #0]
   24b64:	09d2      	lsrs	r2, r2, #7
   24b66:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   24b68:	230e      	movs	r3, #14
   24b6a:	18fb      	adds	r3, r7, r3
   24b6c:	1dfa      	adds	r2, r7, #7
   24b6e:	7812      	ldrb	r2, [r2, #0]
   24b70:	0952      	lsrs	r2, r2, #5
   24b72:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   24b74:	4b0d      	ldr	r3, [pc, #52]	; (24bac <system_pinmux_get_group_from_gpio_pin+0x5c>)
   24b76:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   24b78:	230f      	movs	r3, #15
   24b7a:	18fb      	adds	r3, r7, r3
   24b7c:	781b      	ldrb	r3, [r3, #0]
   24b7e:	2b00      	cmp	r3, #0
   24b80:	d10f      	bne.n	24ba2 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   24b82:	230f      	movs	r3, #15
   24b84:	18fb      	adds	r3, r7, r3
   24b86:	781b      	ldrb	r3, [r3, #0]
   24b88:	009b      	lsls	r3, r3, #2
   24b8a:	2210      	movs	r2, #16
   24b8c:	4694      	mov	ip, r2
   24b8e:	44bc      	add	ip, r7
   24b90:	4463      	add	r3, ip
   24b92:	3b08      	subs	r3, #8
   24b94:	681a      	ldr	r2, [r3, #0]
   24b96:	230e      	movs	r3, #14
   24b98:	18fb      	adds	r3, r7, r3
   24b9a:	781b      	ldrb	r3, [r3, #0]
   24b9c:	01db      	lsls	r3, r3, #7
   24b9e:	18d3      	adds	r3, r2, r3
   24ba0:	e000      	b.n	24ba4 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   24ba2:	2300      	movs	r3, #0
}
   24ba4:	0018      	movs	r0, r3
   24ba6:	46bd      	mov	sp, r7
   24ba8:	b004      	add	sp, #16
   24baa:	bd80      	pop	{r7, pc}
   24bac:	41004400 	.word	0x41004400

00024bb0 <system_set_sleepmode>:
 * \retval STATUS_ERR_INVALID_ARG  The requested sleep mode was invalid or not
 *                                 available
 */
static inline enum status_code system_set_sleepmode(
	const enum system_sleepmode sleep_mode)
{
   24bb0:	b580      	push	{r7, lr}
   24bb2:	b084      	sub	sp, #16
   24bb4:	af00      	add	r7, sp, #0
   24bb6:	0002      	movs	r2, r0
   24bb8:	1dfb      	adds	r3, r7, #7
   24bba:	701a      	strb	r2, [r3, #0]

#if (SAMD20 || SAMD21 || SAMR21)

	/* Get MCU revision */
	uint32_t rev = DSU->DID.reg;
   24bbc:	4b1a      	ldr	r3, [pc, #104]	; (24c28 <system_set_sleepmode+0x78>)
   24bbe:	699b      	ldr	r3, [r3, #24]
   24bc0:	60fb      	str	r3, [r7, #12]

	rev &= DSU_DID_REVISION_Msk;
   24bc2:	68fa      	ldr	r2, [r7, #12]
   24bc4:	23f0      	movs	r3, #240	; 0xf0
   24bc6:	011b      	lsls	r3, r3, #4
   24bc8:	4013      	ands	r3, r2
   24bca:	60fb      	str	r3, [r7, #12]
	rev = rev >> DSU_DID_REVISION_Pos;
   24bcc:	68fb      	ldr	r3, [r7, #12]
   24bce:	0a1b      	lsrs	r3, r3, #8
   24bd0:	60fb      	str	r3, [r7, #12]
		NVMCTRL->CTRLB.bit.SLEEPPRM = NVMCTRL_CTRLB_SLEEPPRM_DISABLED_Val;
	}
#endif

#if (SAMD21 || SAMR21)
	if (rev < _SYSTEM_MCU_REVISION_D) {
   24bd2:	68fb      	ldr	r3, [r7, #12]
   24bd4:	2b02      	cmp	r3, #2
   24bd6:	d805      	bhi.n	24be4 <system_set_sleepmode+0x34>
		/* Errata 13140: Make sure that the Flash does not power all the way down
		 * when in sleep mode. */
		NVMCTRL->CTRLB.bit.SLEEPPRM = NVMCTRL_CTRLB_SLEEPPRM_DISABLED_Val;
   24bd8:	4a14      	ldr	r2, [pc, #80]	; (24c2c <system_set_sleepmode+0x7c>)
   24bda:	6853      	ldr	r3, [r2, #4]
   24bdc:	21c0      	movs	r1, #192	; 0xc0
   24bde:	0089      	lsls	r1, r1, #2
   24be0:	430b      	orrs	r3, r1
   24be2:	6053      	str	r3, [r2, #4]
	}
#endif

#endif

	switch (sleep_mode) {
   24be4:	1dfb      	adds	r3, r7, #7
   24be6:	781b      	ldrb	r3, [r3, #0]
   24be8:	2b00      	cmp	r3, #0
   24bea:	db16      	blt.n	24c1a <system_set_sleepmode+0x6a>
   24bec:	2b02      	cmp	r3, #2
   24bee:	dd02      	ble.n	24bf6 <system_set_sleepmode+0x46>
   24bf0:	2b03      	cmp	r3, #3
   24bf2:	d00b      	beq.n	24c0c <system_set_sleepmode+0x5c>
   24bf4:	e011      	b.n	24c1a <system_set_sleepmode+0x6a>
		case SYSTEM_SLEEPMODE_IDLE_0:
		case SYSTEM_SLEEPMODE_IDLE_1:
		case SYSTEM_SLEEPMODE_IDLE_2:
			SCB->SCR &= ~SCB_SCR_SLEEPDEEP_Msk;
   24bf6:	4b0e      	ldr	r3, [pc, #56]	; (24c30 <system_set_sleepmode+0x80>)
   24bf8:	4a0d      	ldr	r2, [pc, #52]	; (24c30 <system_set_sleepmode+0x80>)
   24bfa:	6912      	ldr	r2, [r2, #16]
   24bfc:	2104      	movs	r1, #4
   24bfe:	438a      	bics	r2, r1
   24c00:	611a      	str	r2, [r3, #16]
			PM->SLEEP.reg = sleep_mode;
   24c02:	4a0c      	ldr	r2, [pc, #48]	; (24c34 <system_set_sleepmode+0x84>)
   24c04:	1dfb      	adds	r3, r7, #7
   24c06:	781b      	ldrb	r3, [r3, #0]
   24c08:	7053      	strb	r3, [r2, #1]
			break;
   24c0a:	e008      	b.n	24c1e <system_set_sleepmode+0x6e>

		case SYSTEM_SLEEPMODE_STANDBY:
			SCB->SCR |=  SCB_SCR_SLEEPDEEP_Msk;
   24c0c:	4b08      	ldr	r3, [pc, #32]	; (24c30 <system_set_sleepmode+0x80>)
   24c0e:	4a08      	ldr	r2, [pc, #32]	; (24c30 <system_set_sleepmode+0x80>)
   24c10:	6912      	ldr	r2, [r2, #16]
   24c12:	2104      	movs	r1, #4
   24c14:	430a      	orrs	r2, r1
   24c16:	611a      	str	r2, [r3, #16]
			break;
   24c18:	e001      	b.n	24c1e <system_set_sleepmode+0x6e>

		default:
			return STATUS_ERR_INVALID_ARG;
   24c1a:	2317      	movs	r3, #23
   24c1c:	e000      	b.n	24c20 <system_set_sleepmode+0x70>
	}

	return STATUS_OK;
   24c1e:	2300      	movs	r3, #0
}
   24c20:	0018      	movs	r0, r3
   24c22:	46bd      	mov	sp, r7
   24c24:	b004      	add	sp, #16
   24c26:	bd80      	pop	{r7, pc}
   24c28:	41002000 	.word	0x41002000
   24c2c:	41004000 	.word	0x41004000
   24c30:	e000ed00 	.word	0xe000ed00
   24c34:	40000400 	.word	0x40000400

00024c38 <system_sleep>:
 * all ongoing memory accesses have completed, then a WFI (Wait For Interrupt)
 * instruction to place the device into the sleep mode specified by
 * \ref system_set_sleepmode until woken by an interrupt.
 */
static inline void system_sleep(void)
{
   24c38:	b580      	push	{r7, lr}
   24c3a:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb");
   24c3c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("wfi");
   24c40:	bf30      	wfi
	__DSB();
	__WFI();
}
   24c42:	46c0      	nop			; (mov r8, r8)
   24c44:	46bd      	mov	sp, r7
   24c46:	bd80      	pop	{r7, pc}

00024c48 <port_get_group_from_gpio_pin>:
{
   24c48:	b580      	push	{r7, lr}
   24c4a:	b082      	sub	sp, #8
   24c4c:	af00      	add	r7, sp, #0
   24c4e:	0002      	movs	r2, r0
   24c50:	1dfb      	adds	r3, r7, #7
   24c52:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   24c54:	1dfb      	adds	r3, r7, #7
   24c56:	781b      	ldrb	r3, [r3, #0]
   24c58:	0018      	movs	r0, r3
   24c5a:	4b03      	ldr	r3, [pc, #12]	; (24c68 <port_get_group_from_gpio_pin+0x20>)
   24c5c:	4798      	blx	r3
   24c5e:	0003      	movs	r3, r0
}
   24c60:	0018      	movs	r0, r3
   24c62:	46bd      	mov	sp, r7
   24c64:	b002      	add	sp, #8
   24c66:	bd80      	pop	{r7, pc}
   24c68:	00024b51 	.word	0x00024b51

00024c6c <port_pin_set_output_level>:
{
   24c6c:	b580      	push	{r7, lr}
   24c6e:	b084      	sub	sp, #16
   24c70:	af00      	add	r7, sp, #0
   24c72:	0002      	movs	r2, r0
   24c74:	1dfb      	adds	r3, r7, #7
   24c76:	701a      	strb	r2, [r3, #0]
   24c78:	1dbb      	adds	r3, r7, #6
   24c7a:	1c0a      	adds	r2, r1, #0
   24c7c:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   24c7e:	1dfb      	adds	r3, r7, #7
   24c80:	781b      	ldrb	r3, [r3, #0]
   24c82:	0018      	movs	r0, r3
   24c84:	4b0d      	ldr	r3, [pc, #52]	; (24cbc <port_pin_set_output_level+0x50>)
   24c86:	4798      	blx	r3
   24c88:	0003      	movs	r3, r0
   24c8a:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   24c8c:	1dfb      	adds	r3, r7, #7
   24c8e:	781b      	ldrb	r3, [r3, #0]
   24c90:	221f      	movs	r2, #31
   24c92:	4013      	ands	r3, r2
   24c94:	2201      	movs	r2, #1
   24c96:	409a      	lsls	r2, r3
   24c98:	0013      	movs	r3, r2
   24c9a:	60bb      	str	r3, [r7, #8]
	if (level) {
   24c9c:	1dbb      	adds	r3, r7, #6
   24c9e:	781b      	ldrb	r3, [r3, #0]
   24ca0:	2b00      	cmp	r3, #0
   24ca2:	d003      	beq.n	24cac <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   24ca4:	68fb      	ldr	r3, [r7, #12]
   24ca6:	68ba      	ldr	r2, [r7, #8]
   24ca8:	619a      	str	r2, [r3, #24]
}
   24caa:	e002      	b.n	24cb2 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   24cac:	68fb      	ldr	r3, [r7, #12]
   24cae:	68ba      	ldr	r2, [r7, #8]
   24cb0:	615a      	str	r2, [r3, #20]
}
   24cb2:	46c0      	nop			; (mov r8, r8)
   24cb4:	46bd      	mov	sp, r7
   24cb6:	b004      	add	sp, #16
   24cb8:	bd80      	pop	{r7, pc}
   24cba:	46c0      	nop			; (mov r8, r8)
   24cbc:	00024c49 	.word	0x00024c49

00024cc0 <main>:

bool initSleepSeqeunce=false;
uint32_t tempSleepWait=0;

int main (void)
{
   24cc0:	b590      	push	{r4, r7, lr}
   24cc2:	b083      	sub	sp, #12
   24cc4:	af02      	add	r7, sp, #8
	system_init();
   24cc6:	4b18      	ldr	r3, [pc, #96]	; (24d28 <main+0x68>)
   24cc8:	4798      	blx	r3
	
	/* Disable digital interfaces to unused peripherals */
	system_apb_clock_clear_mask(SYSTEM_CLOCK_APB_APBA,
   24cca:	2111      	movs	r1, #17
   24ccc:	2000      	movs	r0, #0
   24cce:	4b17      	ldr	r3, [pc, #92]	; (24d2c <main+0x6c>)
   24cd0:	4798      	blx	r3
	PM_APBAMASK_PAC0 | PM_APBAMASK_WDT);
	system_apb_clock_clear_mask(SYSTEM_CLOCK_APB_APBB,
   24cd2:	2103      	movs	r1, #3
   24cd4:	2001      	movs	r0, #1
   24cd6:	4b15      	ldr	r3, [pc, #84]	; (24d2c <main+0x6c>)
   24cd8:	4798      	blx	r3
	PM_APBBMASK_PAC1 | PM_APBBMASK_DSU);
	system_apb_clock_clear_mask(SYSTEM_CLOCK_APB_APBC,
   24cda:	4b15      	ldr	r3, [pc, #84]	; (24d30 <main+0x70>)
   24cdc:	0019      	movs	r1, r3
   24cde:	2002      	movs	r0, #2
   24ce0:	4b12      	ldr	r3, [pc, #72]	; (24d2c <main+0x6c>)
   24ce2:	4798      	blx	r3
	PM_APBCMASK_PAC2 | PM_APBCMASK_AC | PM_APBCMASK_DAC);
	
	/* Disable NVM low power mode during sleep due to lockups (device errata) */
	NVMCTRL->CTRLB.bit.SLEEPPRM = NVMCTRL_CTRLB_SLEEPPRM_DISABLED_Val;
   24ce4:	4a13      	ldr	r2, [pc, #76]	; (24d34 <main+0x74>)
   24ce6:	6853      	ldr	r3, [r2, #4]
   24ce8:	21c0      	movs	r1, #192	; 0xc0
   24cea:	0089      	lsls	r1, r1, #2
   24cec:	430b      	orrs	r3, r1
   24cee:	6053      	str	r3, [r2, #4]
	
	system_set_sleepmode(SYSTEM_SLEEPMODE_STANDBY);
   24cf0:	2003      	movs	r0, #3
   24cf2:	4b11      	ldr	r3, [pc, #68]	; (24d38 <main+0x78>)
   24cf4:	4798      	blx	r3
	
	system_interrupt_enable_global();
   24cf6:	4b11      	ldr	r3, [pc, #68]	; (24d3c <main+0x7c>)
   24cf8:	4798      	blx	r3
	
	//irq_initialize_vectors();
	//cpu_irq_enable();
	delay_init();
   24cfa:	4b11      	ldr	r3, [pc, #68]	; (24d40 <main+0x80>)
   24cfc:	4798      	blx	r3
	init_eeprom();
   24cfe:	4b11      	ldr	r3, [pc, #68]	; (24d44 <main+0x84>)
   24d00:	4798      	blx	r3
	
	
	
	start_lcd_service();
   24d02:	4b11      	ldr	r3, [pc, #68]	; (24d48 <main+0x88>)
   24d04:	4798      	blx	r3
	start_gsm_service();
   24d06:	4b11      	ldr	r3, [pc, #68]	; (24d4c <main+0x8c>)
   24d08:	4798      	blx	r3
	start_motor_service();
   24d0a:	4b11      	ldr	r3, [pc, #68]	; (24d50 <main+0x90>)
   24d0c:	4798      	blx	r3
	
	xTaskCreate(vTask_sleep_manager,NULL,(uint16_t)100,NULL,1,NULL);
   24d0e:	4811      	ldr	r0, [pc, #68]	; (24d54 <main+0x94>)
   24d10:	2300      	movs	r3, #0
   24d12:	9301      	str	r3, [sp, #4]
   24d14:	2301      	movs	r3, #1
   24d16:	9300      	str	r3, [sp, #0]
   24d18:	2300      	movs	r3, #0
   24d1a:	2264      	movs	r2, #100	; 0x64
   24d1c:	2100      	movs	r1, #0
   24d1e:	4c0e      	ldr	r4, [pc, #56]	; (24d58 <main+0x98>)
   24d20:	47a0      	blx	r4
	
	vTaskStartScheduler();
   24d22:	4b0e      	ldr	r3, [pc, #56]	; (24d5c <main+0x9c>)
   24d24:	4798      	blx	r3
	
	for (;;)
   24d26:	e7fe      	b.n	24d26 <main+0x66>
   24d28:	00024965 	.word	0x00024965
   24d2c:	00024ad5 	.word	0x00024ad5
   24d30:	00060001 	.word	0x00060001
   24d34:	41004000 	.word	0x41004000
   24d38:	00024bb1 	.word	0x00024bb1
   24d3c:	00024b35 	.word	0x00024b35
   24d40:	0002258d 	.word	0x0002258d
   24d44:	00010151 	.word	0x00010151
   24d48:	00018e0d 	.word	0x00018e0d
   24d4c:	000184bd 	.word	0x000184bd
   24d50:	0001c641 	.word	0x0001c641
   24d54:	00024da9 	.word	0x00024da9
   24d58:	0001fa39 	.word	0x0001fa39
   24d5c:	0001ff0d 	.word	0x0001ff0d

00024d60 <checkSleepElligible>:
	}
}


bool checkSleepElligible(void)
{
   24d60:	b580      	push	{r7, lr}
   24d62:	af00      	add	r7, sp, #0
	return (/*!turnOffTimerOn && */!getACPowerState() && motor_checkSleepElligible() && gsm_checkSleepElligible());
   24d64:	4b0d      	ldr	r3, [pc, #52]	; (24d9c <checkSleepElligible+0x3c>)
   24d66:	4798      	blx	r3
   24d68:	0003      	movs	r3, r0
   24d6a:	001a      	movs	r2, r3
   24d6c:	2301      	movs	r3, #1
   24d6e:	4053      	eors	r3, r2
   24d70:	b2db      	uxtb	r3, r3
   24d72:	2b00      	cmp	r3, #0
   24d74:	d009      	beq.n	24d8a <checkSleepElligible+0x2a>
   24d76:	4b0a      	ldr	r3, [pc, #40]	; (24da0 <checkSleepElligible+0x40>)
   24d78:	4798      	blx	r3
   24d7a:	1e03      	subs	r3, r0, #0
   24d7c:	d005      	beq.n	24d8a <checkSleepElligible+0x2a>
   24d7e:	4b09      	ldr	r3, [pc, #36]	; (24da4 <checkSleepElligible+0x44>)
   24d80:	4798      	blx	r3
   24d82:	1e03      	subs	r3, r0, #0
   24d84:	d001      	beq.n	24d8a <checkSleepElligible+0x2a>
   24d86:	2301      	movs	r3, #1
   24d88:	e000      	b.n	24d8c <checkSleepElligible+0x2c>
   24d8a:	2300      	movs	r3, #0
   24d8c:	1c1a      	adds	r2, r3, #0
   24d8e:	2301      	movs	r3, #1
   24d90:	4013      	ands	r3, r2
   24d92:	b2db      	uxtb	r3, r3
}
   24d94:	0018      	movs	r0, r3
   24d96:	46bd      	mov	sp, r7
   24d98:	bd80      	pop	{r7, pc}
   24d9a:	46c0      	nop			; (mov r8, r8)
   24d9c:	0001ae89 	.word	0x0001ae89
   24da0:	0001c965 	.word	0x0001c965
   24da4:	00018585 	.word	0x00018585

00024da8 <vTask_sleep_manager>:

static void vTask_sleep_manager(void *params)
{
   24da8:	b580      	push	{r7, lr}
   24daa:	b084      	sub	sp, #16
   24dac:	af00      	add	r7, sp, #0
   24dae:	6078      	str	r0, [r7, #4]
	UNUSED(params);
	for (;;)
	{
		if (checkSleepElligible())
   24db0:	4b34      	ldr	r3, [pc, #208]	; (24e84 <vTask_sleep_manager+0xdc>)
   24db2:	4798      	blx	r3
   24db4:	1e03      	subs	r3, r0, #0
   24db6:	d060      	beq.n	24e7a <vTask_sleep_manager+0xd2>
		{
			if(!initSleepSeqeunce)
   24db8:	4b33      	ldr	r3, [pc, #204]	; (24e88 <vTask_sleep_manager+0xe0>)
   24dba:	781b      	ldrb	r3, [r3, #0]
   24dbc:	2201      	movs	r2, #1
   24dbe:	4053      	eors	r3, r2
   24dc0:	b2db      	uxtb	r3, r3
   24dc2:	2b00      	cmp	r3, #0
   24dc4:	d008      	beq.n	24dd8 <vTask_sleep_manager+0x30>
			{
				tempSleepWait=xTaskGetTickCount();
   24dc6:	4b31      	ldr	r3, [pc, #196]	; (24e8c <vTask_sleep_manager+0xe4>)
   24dc8:	4798      	blx	r3
   24dca:	0002      	movs	r2, r0
   24dcc:	4b30      	ldr	r3, [pc, #192]	; (24e90 <vTask_sleep_manager+0xe8>)
   24dce:	601a      	str	r2, [r3, #0]
				initSleepSeqeunce=true;
   24dd0:	4b2d      	ldr	r3, [pc, #180]	; (24e88 <vTask_sleep_manager+0xe0>)
   24dd2:	2201      	movs	r2, #1
   24dd4:	701a      	strb	r2, [r3, #0]
   24dd6:	e7eb      	b.n	24db0 <vTask_sleep_manager+0x8>
			}
			else if(initSleepSeqeunce && xTaskGetTickCount()-tempSleepWait>sleepWaitTime)
   24dd8:	4b2b      	ldr	r3, [pc, #172]	; (24e88 <vTask_sleep_manager+0xe0>)
   24dda:	781b      	ldrb	r3, [r3, #0]
   24ddc:	2b00      	cmp	r3, #0
   24dde:	d0e7      	beq.n	24db0 <vTask_sleep_manager+0x8>
   24de0:	4b2a      	ldr	r3, [pc, #168]	; (24e8c <vTask_sleep_manager+0xe4>)
   24de2:	4798      	blx	r3
   24de4:	0002      	movs	r2, r0
   24de6:	4b2a      	ldr	r3, [pc, #168]	; (24e90 <vTask_sleep_manager+0xe8>)
   24de8:	681b      	ldr	r3, [r3, #0]
   24dea:	1ad3      	subs	r3, r2, r3
   24dec:	4a29      	ldr	r2, [pc, #164]	; (24e94 <vTask_sleep_manager+0xec>)
   24dee:	4293      	cmp	r3, r2
   24df0:	d9de      	bls.n	24db0 <vTask_sleep_manager+0x8>
			{
				uint8_t cnt=10;
   24df2:	230f      	movs	r3, #15
   24df4:	18fb      	adds	r3, r7, r3
   24df6:	220a      	movs	r2, #10
   24df8:	701a      	strb	r2, [r3, #0]
				bool led=false;
   24dfa:	230e      	movs	r3, #14
   24dfc:	18fb      	adds	r3, r7, r3
   24dfe:	2200      	movs	r2, #0
   24e00:	701a      	strb	r2, [r3, #0]
				do
				{
					led=!led;
   24e02:	230e      	movs	r3, #14
   24e04:	18fb      	adds	r3, r7, r3
   24e06:	781b      	ldrb	r3, [r3, #0]
   24e08:	1e5a      	subs	r2, r3, #1
   24e0a:	4193      	sbcs	r3, r2
   24e0c:	b2db      	uxtb	r3, r3
   24e0e:	2201      	movs	r2, #1
   24e10:	4053      	eors	r3, r2
   24e12:	b2db      	uxtb	r3, r3
   24e14:	001a      	movs	r2, r3
   24e16:	230e      	movs	r3, #14
   24e18:	18fb      	adds	r3, r7, r3
   24e1a:	701a      	strb	r2, [r3, #0]
   24e1c:	781a      	ldrb	r2, [r3, #0]
   24e1e:	2101      	movs	r1, #1
   24e20:	400a      	ands	r2, r1
   24e22:	701a      	strb	r2, [r3, #0]
					if(led)
   24e24:	230e      	movs	r3, #14
   24e26:	18fb      	adds	r3, r7, r3
   24e28:	781b      	ldrb	r3, [r3, #0]
   24e2a:	2b00      	cmp	r3, #0
   24e2c:	d004      	beq.n	24e38 <vTask_sleep_manager+0x90>
					THREEPHASE_OK_LED_ON;
   24e2e:	2100      	movs	r1, #0
   24e30:	2027      	movs	r0, #39	; 0x27
   24e32:	4b19      	ldr	r3, [pc, #100]	; (24e98 <vTask_sleep_manager+0xf0>)
   24e34:	4798      	blx	r3
   24e36:	e003      	b.n	24e40 <vTask_sleep_manager+0x98>
					else
					THREEPHASE_OK_LED_OFF;
   24e38:	2101      	movs	r1, #1
   24e3a:	2027      	movs	r0, #39	; 0x27
   24e3c:	4b16      	ldr	r3, [pc, #88]	; (24e98 <vTask_sleep_manager+0xf0>)
   24e3e:	4798      	blx	r3

					tempSleepWait=xTaskGetTickCount();
   24e40:	4b12      	ldr	r3, [pc, #72]	; (24e8c <vTask_sleep_manager+0xe4>)
   24e42:	4798      	blx	r3
   24e44:	0002      	movs	r2, r0
   24e46:	4b12      	ldr	r3, [pc, #72]	; (24e90 <vTask_sleep_manager+0xe8>)
   24e48:	601a      	str	r2, [r3, #0]
					while(xTaskGetTickCount()-tempSleepWait<200)
   24e4a:	46c0      	nop			; (mov r8, r8)
   24e4c:	4b0f      	ldr	r3, [pc, #60]	; (24e8c <vTask_sleep_manager+0xe4>)
   24e4e:	4798      	blx	r3
   24e50:	0002      	movs	r2, r0
   24e52:	4b0f      	ldr	r3, [pc, #60]	; (24e90 <vTask_sleep_manager+0xe8>)
   24e54:	681b      	ldr	r3, [r3, #0]
   24e56:	1ad3      	subs	r3, r2, r3
   24e58:	2bc7      	cmp	r3, #199	; 0xc7
   24e5a:	d9f7      	bls.n	24e4c <vTask_sleep_manager+0xa4>
					{}
				}while(--cnt);
   24e5c:	230f      	movs	r3, #15
   24e5e:	18fb      	adds	r3, r7, r3
   24e60:	220f      	movs	r2, #15
   24e62:	18ba      	adds	r2, r7, r2
   24e64:	7812      	ldrb	r2, [r2, #0]
   24e66:	3a01      	subs	r2, #1
   24e68:	701a      	strb	r2, [r3, #0]
   24e6a:	230f      	movs	r3, #15
   24e6c:	18fb      	adds	r3, r7, r3
   24e6e:	781b      	ldrb	r3, [r3, #0]
   24e70:	2b00      	cmp	r3, #0
   24e72:	d1c6      	bne.n	24e02 <vTask_sleep_manager+0x5a>
				
				gotoSleep();
   24e74:	4b09      	ldr	r3, [pc, #36]	; (24e9c <vTask_sleep_manager+0xf4>)
   24e76:	4798      	blx	r3
   24e78:	e79a      	b.n	24db0 <vTask_sleep_manager+0x8>
			}
		}
		else
		{
			initSleepSeqeunce=false;
   24e7a:	4b03      	ldr	r3, [pc, #12]	; (24e88 <vTask_sleep_manager+0xe0>)
   24e7c:	2200      	movs	r2, #0
   24e7e:	701a      	strb	r2, [r3, #0]
		if (checkSleepElligible())
   24e80:	e796      	b.n	24db0 <vTask_sleep_manager+0x8>
   24e82:	46c0      	nop			; (mov r8, r8)
   24e84:	00024d61 	.word	0x00024d61
   24e88:	2000050c 	.word	0x2000050c
   24e8c:	000200dd 	.word	0x000200dd
   24e90:	20000510 	.word	0x20000510
   24e94:	00004650 	.word	0x00004650
   24e98:	00024c6d 	.word	0x00024c6d
   24e9c:	00024ea1 	.word	0x00024ea1

00024ea0 <gotoSleep>:
		}
	}
}

void gotoSleep(void)
{
   24ea0:	b580      	push	{r7, lr}
   24ea2:	af00      	add	r7, sp, #0
	LCD_PWR_DIS();
   24ea4:	4b07      	ldr	r3, [pc, #28]	; (24ec4 <gotoSleep+0x24>)
   24ea6:	4798      	blx	r3
	
	lcd_in_sleep = true;
   24ea8:	4b07      	ldr	r3, [pc, #28]	; (24ec8 <gotoSleep+0x28>)
   24eaa:	2201      	movs	r2, #1
   24eac:	701a      	strb	r2, [r3, #0]
	setNetworkCharacter=true;
   24eae:	4b07      	ldr	r3, [pc, #28]	; (24ecc <gotoSleep+0x2c>)
   24eb0:	2201      	movs	r2, #1
   24eb2:	701a      	strb	r2, [r3, #0]
	system_sleep();
   24eb4:	4b06      	ldr	r3, [pc, #24]	; (24ed0 <gotoSleep+0x30>)
   24eb6:	4798      	blx	r3
	mcuWakeUpFromSleep=true;
   24eb8:	4b06      	ldr	r3, [pc, #24]	; (24ed4 <gotoSleep+0x34>)
   24eba:	2201      	movs	r2, #1
   24ebc:	701a      	strb	r2, [r3, #0]
   24ebe:	46c0      	nop			; (mov r8, r8)
   24ec0:	46bd      	mov	sp, r7
   24ec2:	bd80      	pop	{r7, pc}
   24ec4:	00013cf1 	.word	0x00013cf1
   24ec8:	20000864 	.word	0x20000864
   24ecc:	20000865 	.word	0x20000865
   24ed0:	00024c39 	.word	0x00024c39
   24ed4:	20000840 	.word	0x20000840

00024ed8 <pow>:
   24ed8:	b5f0      	push	{r4, r5, r6, r7, lr}
   24eda:	4657      	mov	r7, sl
   24edc:	464e      	mov	r6, r9
   24ede:	46de      	mov	lr, fp
   24ee0:	4645      	mov	r5, r8
   24ee2:	b5e0      	push	{r5, r6, r7, lr}
   24ee4:	b08f      	sub	sp, #60	; 0x3c
   24ee6:	001d      	movs	r5, r3
   24ee8:	0006      	movs	r6, r0
   24eea:	000f      	movs	r7, r1
   24eec:	0014      	movs	r4, r2
   24eee:	f000 f9ff 	bl	252f0 <__ieee754_pow>
   24ef2:	4bc7      	ldr	r3, [pc, #796]	; (25210 <pow+0x338>)
   24ef4:	9000      	str	r0, [sp, #0]
   24ef6:	9101      	str	r1, [sp, #4]
   24ef8:	469a      	mov	sl, r3
   24efa:	781b      	ldrb	r3, [r3, #0]
   24efc:	b25b      	sxtb	r3, r3
   24efe:	4699      	mov	r9, r3
   24f00:	3301      	adds	r3, #1
   24f02:	d03e      	beq.n	24f82 <pow+0xaa>
   24f04:	0022      	movs	r2, r4
   24f06:	002b      	movs	r3, r5
   24f08:	0020      	movs	r0, r4
   24f0a:	0029      	movs	r1, r5
   24f0c:	f003 fb92 	bl	28634 <__aeabi_dcmpun>
   24f10:	4683      	mov	fp, r0
   24f12:	2800      	cmp	r0, #0
   24f14:	d135      	bne.n	24f82 <pow+0xaa>
   24f16:	0032      	movs	r2, r6
   24f18:	003b      	movs	r3, r7
   24f1a:	0030      	movs	r0, r6
   24f1c:	0039      	movs	r1, r7
   24f1e:	f003 fb89 	bl	28634 <__aeabi_dcmpun>
   24f22:	2200      	movs	r2, #0
   24f24:	9003      	str	r0, [sp, #12]
   24f26:	2800      	cmp	r0, #0
   24f28:	d000      	beq.n	24f2c <pow+0x54>
   24f2a:	e0b6      	b.n	2509a <pow+0x1c2>
   24f2c:	2300      	movs	r3, #0
   24f2e:	0030      	movs	r0, r6
   24f30:	0039      	movs	r1, r7
   24f32:	f001 faa1 	bl	26478 <__aeabi_dcmpeq>
   24f36:	2800      	cmp	r0, #0
   24f38:	d02c      	beq.n	24f94 <pow+0xbc>
   24f3a:	2200      	movs	r2, #0
   24f3c:	2300      	movs	r3, #0
   24f3e:	0020      	movs	r0, r4
   24f40:	0029      	movs	r1, r5
   24f42:	f001 fa99 	bl	26478 <__aeabi_dcmpeq>
   24f46:	4683      	mov	fp, r0
   24f48:	2800      	cmp	r0, #0
   24f4a:	d100      	bne.n	24f4e <pow+0x76>
   24f4c:	e077      	b.n	2503e <pow+0x166>
   24f4e:	ab04      	add	r3, sp, #16
   24f50:	4698      	mov	r8, r3
   24f52:	2301      	movs	r3, #1
   24f54:	4642      	mov	r2, r8
   24f56:	9304      	str	r3, [sp, #16]
   24f58:	4bae      	ldr	r3, [pc, #696]	; (25214 <pow+0x33c>)
   24f5a:	6053      	str	r3, [r2, #4]
   24f5c:	4643      	mov	r3, r8
   24f5e:	9a03      	ldr	r2, [sp, #12]
   24f60:	611c      	str	r4, [r3, #16]
   24f62:	615d      	str	r5, [r3, #20]
   24f64:	621a      	str	r2, [r3, #32]
   24f66:	609e      	str	r6, [r3, #8]
   24f68:	60df      	str	r7, [r3, #12]
   24f6a:	4642      	mov	r2, r8
   24f6c:	2300      	movs	r3, #0
   24f6e:	2400      	movs	r4, #0
   24f70:	6193      	str	r3, [r2, #24]
   24f72:	61d4      	str	r4, [r2, #28]
   24f74:	464b      	mov	r3, r9
   24f76:	2b00      	cmp	r3, #0
   24f78:	d04d      	beq.n	25016 <pow+0x13e>
   24f7a:	2300      	movs	r3, #0
   24f7c:	4ca6      	ldr	r4, [pc, #664]	; (25218 <pow+0x340>)
   24f7e:	9300      	str	r3, [sp, #0]
   24f80:	9401      	str	r4, [sp, #4]
   24f82:	9800      	ldr	r0, [sp, #0]
   24f84:	9901      	ldr	r1, [sp, #4]
   24f86:	b00f      	add	sp, #60	; 0x3c
   24f88:	bc3c      	pop	{r2, r3, r4, r5}
   24f8a:	4690      	mov	r8, r2
   24f8c:	4699      	mov	r9, r3
   24f8e:	46a2      	mov	sl, r4
   24f90:	46ab      	mov	fp, r5
   24f92:	bdf0      	pop	{r4, r5, r6, r7, pc}
   24f94:	9800      	ldr	r0, [sp, #0]
   24f96:	9901      	ldr	r1, [sp, #4]
   24f98:	f000 ffc4 	bl	25f24 <finite>
   24f9c:	4681      	mov	r9, r0
   24f9e:	2800      	cmp	r0, #0
   24fa0:	d100      	bne.n	24fa4 <pow+0xcc>
   24fa2:	e09b      	b.n	250dc <pow+0x204>
   24fa4:	9800      	ldr	r0, [sp, #0]
   24fa6:	9901      	ldr	r1, [sp, #4]
   24fa8:	2200      	movs	r2, #0
   24faa:	2300      	movs	r3, #0
   24fac:	f001 fa64 	bl	26478 <__aeabi_dcmpeq>
   24fb0:	2800      	cmp	r0, #0
   24fb2:	d0e6      	beq.n	24f82 <pow+0xaa>
   24fb4:	0030      	movs	r0, r6
   24fb6:	0039      	movs	r1, r7
   24fb8:	f000 ffb4 	bl	25f24 <finite>
   24fbc:	2800      	cmp	r0, #0
   24fbe:	d0e0      	beq.n	24f82 <pow+0xaa>
   24fc0:	0020      	movs	r0, r4
   24fc2:	0029      	movs	r1, r5
   24fc4:	f000 ffae 	bl	25f24 <finite>
   24fc8:	2800      	cmp	r0, #0
   24fca:	d0da      	beq.n	24f82 <pow+0xaa>
   24fcc:	ab04      	add	r3, sp, #16
   24fce:	4698      	mov	r8, r3
   24fd0:	2304      	movs	r3, #4
   24fd2:	4642      	mov	r2, r8
   24fd4:	9304      	str	r3, [sp, #16]
   24fd6:	4b8f      	ldr	r3, [pc, #572]	; (25214 <pow+0x33c>)
   24fd8:	6114      	str	r4, [r2, #16]
   24fda:	6155      	str	r5, [r2, #20]
   24fdc:	6053      	str	r3, [r2, #4]
   24fde:	2300      	movs	r3, #0
   24fe0:	2400      	movs	r4, #0
   24fe2:	6213      	str	r3, [r2, #32]
   24fe4:	2300      	movs	r3, #0
   24fe6:	6193      	str	r3, [r2, #24]
   24fe8:	61d4      	str	r4, [r2, #28]
   24fea:	4653      	mov	r3, sl
   24fec:	781b      	ldrb	r3, [r3, #0]
   24fee:	6096      	str	r6, [r2, #8]
   24ff0:	60d7      	str	r7, [r2, #12]
   24ff2:	b25b      	sxtb	r3, r3
   24ff4:	2b02      	cmp	r3, #2
   24ff6:	d004      	beq.n	25002 <pow+0x12a>
   24ff8:	4640      	mov	r0, r8
   24ffa:	f000 ff9d 	bl	25f38 <matherr>
   24ffe:	2800      	cmp	r0, #0
   25000:	d10e      	bne.n	25020 <pow+0x148>
   25002:	f003 fc71 	bl	288e8 <__errno>
   25006:	2322      	movs	r3, #34	; 0x22
   25008:	6003      	str	r3, [r0, #0]
   2500a:	e009      	b.n	25020 <pow+0x148>
   2500c:	4642      	mov	r2, r8
   2500e:	2300      	movs	r3, #0
   25010:	2400      	movs	r4, #0
   25012:	6193      	str	r3, [r2, #24]
   25014:	61d4      	str	r4, [r2, #28]
   25016:	4640      	mov	r0, r8
   25018:	f000 ff8e 	bl	25f38 <matherr>
   2501c:	2800      	cmp	r0, #0
   2501e:	d037      	beq.n	25090 <pow+0x1b8>
   25020:	4643      	mov	r3, r8
   25022:	6a1b      	ldr	r3, [r3, #32]
   25024:	2b00      	cmp	r3, #0
   25026:	d004      	beq.n	25032 <pow+0x15a>
   25028:	f003 fc5e 	bl	288e8 <__errno>
   2502c:	4643      	mov	r3, r8
   2502e:	6a1b      	ldr	r3, [r3, #32]
   25030:	6003      	str	r3, [r0, #0]
   25032:	4643      	mov	r3, r8
   25034:	69dc      	ldr	r4, [r3, #28]
   25036:	699b      	ldr	r3, [r3, #24]
   25038:	9300      	str	r3, [sp, #0]
   2503a:	9401      	str	r4, [sp, #4]
   2503c:	e7a1      	b.n	24f82 <pow+0xaa>
   2503e:	0020      	movs	r0, r4
   25040:	0029      	movs	r1, r5
   25042:	f000 ff6f 	bl	25f24 <finite>
   25046:	2800      	cmp	r0, #0
   25048:	d09b      	beq.n	24f82 <pow+0xaa>
   2504a:	2200      	movs	r2, #0
   2504c:	2300      	movs	r3, #0
   2504e:	0020      	movs	r0, r4
   25050:	0029      	movs	r1, r5
   25052:	f001 fa17 	bl	26484 <__aeabi_dcmplt>
   25056:	2800      	cmp	r0, #0
   25058:	d100      	bne.n	2505c <pow+0x184>
   2505a:	e792      	b.n	24f82 <pow+0xaa>
   2505c:	ab04      	add	r3, sp, #16
   2505e:	4698      	mov	r8, r3
   25060:	2301      	movs	r3, #1
   25062:	4642      	mov	r2, r8
   25064:	9304      	str	r3, [sp, #16]
   25066:	4b6b      	ldr	r3, [pc, #428]	; (25214 <pow+0x33c>)
   25068:	6053      	str	r3, [r2, #4]
   2506a:	4643      	mov	r3, r8
   2506c:	465a      	mov	r2, fp
   2506e:	609e      	str	r6, [r3, #8]
   25070:	60df      	str	r7, [r3, #12]
   25072:	621a      	str	r2, [r3, #32]
   25074:	611c      	str	r4, [r3, #16]
   25076:	615d      	str	r5, [r3, #20]
   25078:	4653      	mov	r3, sl
   2507a:	781b      	ldrb	r3, [r3, #0]
   2507c:	b25b      	sxtb	r3, r3
   2507e:	2b00      	cmp	r3, #0
   25080:	d0c4      	beq.n	2500c <pow+0x134>
   25082:	2000      	movs	r0, #0
   25084:	4642      	mov	r2, r8
   25086:	4965      	ldr	r1, [pc, #404]	; (2521c <pow+0x344>)
   25088:	6190      	str	r0, [r2, #24]
   2508a:	61d1      	str	r1, [r2, #28]
   2508c:	2b02      	cmp	r3, #2
   2508e:	d1c2      	bne.n	25016 <pow+0x13e>
   25090:	f003 fc2a 	bl	288e8 <__errno>
   25094:	2321      	movs	r3, #33	; 0x21
   25096:	6003      	str	r3, [r0, #0]
   25098:	e7c2      	b.n	25020 <pow+0x148>
   2509a:	2300      	movs	r3, #0
   2509c:	0020      	movs	r0, r4
   2509e:	0029      	movs	r1, r5
   250a0:	f001 f9ea 	bl	26478 <__aeabi_dcmpeq>
   250a4:	2800      	cmp	r0, #0
   250a6:	d100      	bne.n	250aa <pow+0x1d2>
   250a8:	e76b      	b.n	24f82 <pow+0xaa>
   250aa:	ab04      	add	r3, sp, #16
   250ac:	4698      	mov	r8, r3
   250ae:	2301      	movs	r3, #1
   250b0:	4642      	mov	r2, r8
   250b2:	9304      	str	r3, [sp, #16]
   250b4:	4b57      	ldr	r3, [pc, #348]	; (25214 <pow+0x33c>)
   250b6:	4641      	mov	r1, r8
   250b8:	6053      	str	r3, [r2, #4]
   250ba:	4643      	mov	r3, r8
   250bc:	465a      	mov	r2, fp
   250be:	621a      	str	r2, [r3, #32]
   250c0:	2200      	movs	r2, #0
   250c2:	609e      	str	r6, [r3, #8]
   250c4:	60df      	str	r7, [r3, #12]
   250c6:	611c      	str	r4, [r3, #16]
   250c8:	615d      	str	r5, [r3, #20]
   250ca:	4b53      	ldr	r3, [pc, #332]	; (25218 <pow+0x340>)
   250cc:	618a      	str	r2, [r1, #24]
   250ce:	61cb      	str	r3, [r1, #28]
   250d0:	9200      	str	r2, [sp, #0]
   250d2:	9301      	str	r3, [sp, #4]
   250d4:	464b      	mov	r3, r9
   250d6:	2b02      	cmp	r3, #2
   250d8:	d19d      	bne.n	25016 <pow+0x13e>
   250da:	e752      	b.n	24f82 <pow+0xaa>
   250dc:	0030      	movs	r0, r6
   250de:	0039      	movs	r1, r7
   250e0:	f000 ff20 	bl	25f24 <finite>
   250e4:	2800      	cmp	r0, #0
   250e6:	d100      	bne.n	250ea <pow+0x212>
   250e8:	e75c      	b.n	24fa4 <pow+0xcc>
   250ea:	0020      	movs	r0, r4
   250ec:	0029      	movs	r1, r5
   250ee:	f000 ff19 	bl	25f24 <finite>
   250f2:	2800      	cmp	r0, #0
   250f4:	d100      	bne.n	250f8 <pow+0x220>
   250f6:	e755      	b.n	24fa4 <pow+0xcc>
   250f8:	9800      	ldr	r0, [sp, #0]
   250fa:	9901      	ldr	r1, [sp, #4]
   250fc:	000b      	movs	r3, r1
   250fe:	0002      	movs	r2, r0
   25100:	f003 fa98 	bl	28634 <__aeabi_dcmpun>
   25104:	ab04      	add	r3, sp, #16
   25106:	4698      	mov	r8, r3
   25108:	2800      	cmp	r0, #0
   2510a:	d161      	bne.n	251d0 <pow+0x2f8>
   2510c:	2303      	movs	r3, #3
   2510e:	4642      	mov	r2, r8
   25110:	9304      	str	r3, [sp, #16]
   25112:	4b40      	ldr	r3, [pc, #256]	; (25214 <pow+0x33c>)
   25114:	6210      	str	r0, [r2, #32]
   25116:	6053      	str	r3, [r2, #4]
   25118:	4653      	mov	r3, sl
   2511a:	781b      	ldrb	r3, [r3, #0]
   2511c:	6096      	str	r6, [r2, #8]
   2511e:	60d7      	str	r7, [r2, #12]
   25120:	b25b      	sxtb	r3, r3
   25122:	6114      	str	r4, [r2, #16]
   25124:	6155      	str	r5, [r2, #20]
   25126:	4699      	mov	r9, r3
   25128:	2b00      	cmp	r3, #0
   2512a:	d12f      	bne.n	2518c <pow+0x2b4>
   2512c:	22e0      	movs	r2, #224	; 0xe0
   2512e:	4641      	mov	r1, r8
   25130:	4b3b      	ldr	r3, [pc, #236]	; (25220 <pow+0x348>)
   25132:	0612      	lsls	r2, r2, #24
   25134:	618a      	str	r2, [r1, #24]
   25136:	61cb      	str	r3, [r1, #28]
   25138:	0030      	movs	r0, r6
   2513a:	2200      	movs	r2, #0
   2513c:	2300      	movs	r3, #0
   2513e:	0039      	movs	r1, r7
   25140:	f001 f9a0 	bl	26484 <__aeabi_dcmplt>
   25144:	2800      	cmp	r0, #0
   25146:	d100      	bne.n	2514a <pow+0x272>
   25148:	e756      	b.n	24ff8 <pow+0x120>
   2514a:	2200      	movs	r2, #0
   2514c:	4b35      	ldr	r3, [pc, #212]	; (25224 <pow+0x34c>)
   2514e:	0020      	movs	r0, r4
   25150:	0029      	movs	r1, r5
   25152:	f002 fcd9 	bl	27b08 <__aeabi_dmul>
   25156:	0004      	movs	r4, r0
   25158:	000d      	movs	r5, r1
   2515a:	f000 fef5 	bl	25f48 <rint>
   2515e:	0002      	movs	r2, r0
   25160:	000b      	movs	r3, r1
   25162:	0020      	movs	r0, r4
   25164:	0029      	movs	r1, r5
   25166:	f001 f987 	bl	26478 <__aeabi_dcmpeq>
   2516a:	2800      	cmp	r0, #0
   2516c:	d105      	bne.n	2517a <pow+0x2a2>
   2516e:	22e0      	movs	r2, #224	; 0xe0
   25170:	4b2d      	ldr	r3, [pc, #180]	; (25228 <pow+0x350>)
   25172:	0612      	lsls	r2, r2, #24
   25174:	4641      	mov	r1, r8
   25176:	618a      	str	r2, [r1, #24]
   25178:	61cb      	str	r3, [r1, #28]
   2517a:	4653      	mov	r3, sl
   2517c:	781b      	ldrb	r3, [r3, #0]
   2517e:	b25b      	sxtb	r3, r3
   25180:	4699      	mov	r9, r3
   25182:	464b      	mov	r3, r9
   25184:	2b02      	cmp	r3, #2
   25186:	d000      	beq.n	2518a <pow+0x2b2>
   25188:	e736      	b.n	24ff8 <pow+0x120>
   2518a:	e73a      	b.n	25002 <pow+0x12a>
   2518c:	2200      	movs	r2, #0
   2518e:	4641      	mov	r1, r8
   25190:	4b26      	ldr	r3, [pc, #152]	; (2522c <pow+0x354>)
   25192:	0030      	movs	r0, r6
   25194:	618a      	str	r2, [r1, #24]
   25196:	61cb      	str	r3, [r1, #28]
   25198:	2200      	movs	r2, #0
   2519a:	2300      	movs	r3, #0
   2519c:	0039      	movs	r1, r7
   2519e:	f001 f971 	bl	26484 <__aeabi_dcmplt>
   251a2:	2800      	cmp	r0, #0
   251a4:	d0ed      	beq.n	25182 <pow+0x2aa>
   251a6:	2200      	movs	r2, #0
   251a8:	4b1e      	ldr	r3, [pc, #120]	; (25224 <pow+0x34c>)
   251aa:	0020      	movs	r0, r4
   251ac:	0029      	movs	r1, r5
   251ae:	f002 fcab 	bl	27b08 <__aeabi_dmul>
   251b2:	0004      	movs	r4, r0
   251b4:	000d      	movs	r5, r1
   251b6:	f000 fec7 	bl	25f48 <rint>
   251ba:	0002      	movs	r2, r0
   251bc:	000b      	movs	r3, r1
   251be:	0020      	movs	r0, r4
   251c0:	0029      	movs	r1, r5
   251c2:	f001 f959 	bl	26478 <__aeabi_dcmpeq>
   251c6:	2800      	cmp	r0, #0
   251c8:	d1d7      	bne.n	2517a <pow+0x2a2>
   251ca:	2200      	movs	r2, #0
   251cc:	4b13      	ldr	r3, [pc, #76]	; (2521c <pow+0x344>)
   251ce:	e7d1      	b.n	25174 <pow+0x29c>
   251d0:	2301      	movs	r3, #1
   251d2:	4642      	mov	r2, r8
   251d4:	9304      	str	r3, [sp, #16]
   251d6:	4b0f      	ldr	r3, [pc, #60]	; (25214 <pow+0x33c>)
   251d8:	6053      	str	r3, [r2, #4]
   251da:	4643      	mov	r3, r8
   251dc:	464a      	mov	r2, r9
   251de:	611c      	str	r4, [r3, #16]
   251e0:	615d      	str	r5, [r3, #20]
   251e2:	621a      	str	r2, [r3, #32]
   251e4:	609e      	str	r6, [r3, #8]
   251e6:	60df      	str	r7, [r3, #12]
   251e8:	2400      	movs	r4, #0
   251ea:	4653      	mov	r3, sl
   251ec:	571c      	ldrsb	r4, [r3, r4]
   251ee:	2c00      	cmp	r4, #0
   251f0:	d100      	bne.n	251f4 <pow+0x31c>
   251f2:	e70b      	b.n	2500c <pow+0x134>
   251f4:	2300      	movs	r3, #0
   251f6:	2200      	movs	r2, #0
   251f8:	0019      	movs	r1, r3
   251fa:	0010      	movs	r0, r2
   251fc:	f002 f850 	bl	272a0 <__aeabi_ddiv>
   25200:	4643      	mov	r3, r8
   25202:	6198      	str	r0, [r3, #24]
   25204:	61d9      	str	r1, [r3, #28]
   25206:	2c02      	cmp	r4, #2
   25208:	d100      	bne.n	2520c <pow+0x334>
   2520a:	e741      	b.n	25090 <pow+0x1b8>
   2520c:	e703      	b.n	25016 <pow+0x13e>
   2520e:	46c0      	nop			; (mov r8, r8)
   25210:	20000029 	.word	0x20000029
   25214:	0002a920 	.word	0x0002a920
   25218:	3ff00000 	.word	0x3ff00000
   2521c:	fff00000 	.word	0xfff00000
   25220:	47efffff 	.word	0x47efffff
   25224:	3fe00000 	.word	0x3fe00000
   25228:	c7efffff 	.word	0xc7efffff
   2522c:	7ff00000 	.word	0x7ff00000

00025230 <sqrt>:
   25230:	b5f0      	push	{r4, r5, r6, r7, lr}
   25232:	4647      	mov	r7, r8
   25234:	46ce      	mov	lr, r9
   25236:	b580      	push	{r7, lr}
   25238:	b08d      	sub	sp, #52	; 0x34
   2523a:	0004      	movs	r4, r0
   2523c:	000d      	movs	r5, r1
   2523e:	f000 fd8d 	bl	25d5c <__ieee754_sqrt>
   25242:	4b29      	ldr	r3, [pc, #164]	; (252e8 <sqrt+0xb8>)
   25244:	0006      	movs	r6, r0
   25246:	781b      	ldrb	r3, [r3, #0]
   25248:	000f      	movs	r7, r1
   2524a:	b25b      	sxtb	r3, r3
   2524c:	4698      	mov	r8, r3
   2524e:	3301      	adds	r3, #1
   25250:	d010      	beq.n	25274 <sqrt+0x44>
   25252:	0022      	movs	r2, r4
   25254:	002b      	movs	r3, r5
   25256:	0020      	movs	r0, r4
   25258:	0029      	movs	r1, r5
   2525a:	f003 f9eb 	bl	28634 <__aeabi_dcmpun>
   2525e:	4681      	mov	r9, r0
   25260:	2800      	cmp	r0, #0
   25262:	d107      	bne.n	25274 <sqrt+0x44>
   25264:	2200      	movs	r2, #0
   25266:	2300      	movs	r3, #0
   25268:	0020      	movs	r0, r4
   2526a:	0029      	movs	r1, r5
   2526c:	f001 f90a 	bl	26484 <__aeabi_dcmplt>
   25270:	2800      	cmp	r0, #0
   25272:	d106      	bne.n	25282 <sqrt+0x52>
   25274:	0030      	movs	r0, r6
   25276:	0039      	movs	r1, r7
   25278:	b00d      	add	sp, #52	; 0x34
   2527a:	bc0c      	pop	{r2, r3}
   2527c:	4690      	mov	r8, r2
   2527e:	4699      	mov	r9, r3
   25280:	bdf0      	pop	{r4, r5, r6, r7, pc}
   25282:	2301      	movs	r3, #1
   25284:	9302      	str	r3, [sp, #8]
   25286:	4b19      	ldr	r3, [pc, #100]	; (252ec <sqrt+0xbc>)
   25288:	9406      	str	r4, [sp, #24]
   2528a:	9507      	str	r5, [sp, #28]
   2528c:	9303      	str	r3, [sp, #12]
   2528e:	464b      	mov	r3, r9
   25290:	930a      	str	r3, [sp, #40]	; 0x28
   25292:	4643      	mov	r3, r8
   25294:	9404      	str	r4, [sp, #16]
   25296:	9505      	str	r5, [sp, #20]
   25298:	2b00      	cmp	r3, #0
   2529a:	d015      	beq.n	252c8 <sqrt+0x98>
   2529c:	2300      	movs	r3, #0
   2529e:	2200      	movs	r2, #0
   252a0:	0019      	movs	r1, r3
   252a2:	0010      	movs	r0, r2
   252a4:	f001 fffc 	bl	272a0 <__aeabi_ddiv>
   252a8:	4643      	mov	r3, r8
   252aa:	9008      	str	r0, [sp, #32]
   252ac:	9109      	str	r1, [sp, #36]	; 0x24
   252ae:	2b02      	cmp	r3, #2
   252b0:	d10e      	bne.n	252d0 <sqrt+0xa0>
   252b2:	f003 fb19 	bl	288e8 <__errno>
   252b6:	2321      	movs	r3, #33	; 0x21
   252b8:	6003      	str	r3, [r0, #0]
   252ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   252bc:	9301      	str	r3, [sp, #4]
   252be:	2b00      	cmp	r3, #0
   252c0:	d10c      	bne.n	252dc <sqrt+0xac>
   252c2:	9e08      	ldr	r6, [sp, #32]
   252c4:	9f09      	ldr	r7, [sp, #36]	; 0x24
   252c6:	e7d5      	b.n	25274 <sqrt+0x44>
   252c8:	2300      	movs	r3, #0
   252ca:	2400      	movs	r4, #0
   252cc:	9308      	str	r3, [sp, #32]
   252ce:	9409      	str	r4, [sp, #36]	; 0x24
   252d0:	a802      	add	r0, sp, #8
   252d2:	f000 fe31 	bl	25f38 <matherr>
   252d6:	2800      	cmp	r0, #0
   252d8:	d1ef      	bne.n	252ba <sqrt+0x8a>
   252da:	e7ea      	b.n	252b2 <sqrt+0x82>
   252dc:	f003 fb04 	bl	288e8 <__errno>
   252e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   252e2:	9301      	str	r3, [sp, #4]
   252e4:	6003      	str	r3, [r0, #0]
   252e6:	e7ec      	b.n	252c2 <sqrt+0x92>
   252e8:	20000029 	.word	0x20000029
   252ec:	0002a924 	.word	0x0002a924

000252f0 <__ieee754_pow>:
   252f0:	b5f0      	push	{r4, r5, r6, r7, lr}
   252f2:	4657      	mov	r7, sl
   252f4:	464e      	mov	r6, r9
   252f6:	4645      	mov	r5, r8
   252f8:	46de      	mov	lr, fp
   252fa:	001c      	movs	r4, r3
   252fc:	0013      	movs	r3, r2
   252fe:	b5e0      	push	{r5, r6, r7, lr}
   25300:	0065      	lsls	r5, r4, #1
   25302:	b091      	sub	sp, #68	; 0x44
   25304:	086d      	lsrs	r5, r5, #1
   25306:	9300      	str	r3, [sp, #0]
   25308:	9401      	str	r4, [sp, #4]
   2530a:	0007      	movs	r7, r0
   2530c:	000e      	movs	r6, r1
   2530e:	4680      	mov	r8, r0
   25310:	4689      	mov	r9, r1
   25312:	46a2      	mov	sl, r4
   25314:	432b      	orrs	r3, r5
   25316:	d031      	beq.n	2537c <__ieee754_pow+0x8c>
   25318:	4b67      	ldr	r3, [pc, #412]	; (254b8 <__ieee754_pow+0x1c8>)
   2531a:	0074      	lsls	r4, r6, #1
   2531c:	0864      	lsrs	r4, r4, #1
   2531e:	429c      	cmp	r4, r3
   25320:	dc27      	bgt.n	25372 <__ieee754_pow+0x82>
   25322:	d024      	beq.n	2536e <__ieee754_pow+0x7e>
   25324:	429d      	cmp	r5, r3
   25326:	dc24      	bgt.n	25372 <__ieee754_pow+0x82>
   25328:	4b63      	ldr	r3, [pc, #396]	; (254b8 <__ieee754_pow+0x1c8>)
   2532a:	429d      	cmp	r5, r3
   2532c:	d100      	bne.n	25330 <__ieee754_pow+0x40>
   2532e:	e081      	b.n	25434 <__ieee754_pow+0x144>
   25330:	2300      	movs	r3, #0
   25332:	469b      	mov	fp, r3
   25334:	464b      	mov	r3, r9
   25336:	2b00      	cmp	r3, #0
   25338:	da00      	bge.n	2533c <__ieee754_pow+0x4c>
   2533a:	e07f      	b.n	2543c <__ieee754_pow+0x14c>
   2533c:	2a00      	cmp	r2, #0
   2533e:	d12c      	bne.n	2539a <__ieee754_pow+0xaa>
   25340:	4b5d      	ldr	r3, [pc, #372]	; (254b8 <__ieee754_pow+0x1c8>)
   25342:	429d      	cmp	r5, r3
   25344:	d100      	bne.n	25348 <__ieee754_pow+0x58>
   25346:	e097      	b.n	25478 <__ieee754_pow+0x188>
   25348:	4b5c      	ldr	r3, [pc, #368]	; (254bc <__ieee754_pow+0x1cc>)
   2534a:	429d      	cmp	r5, r3
   2534c:	d066      	beq.n	2541c <__ieee754_pow+0x12c>
   2534e:	2380      	movs	r3, #128	; 0x80
   25350:	05db      	lsls	r3, r3, #23
   25352:	459a      	cmp	sl, r3
   25354:	d100      	bne.n	25358 <__ieee754_pow+0x68>
   25356:	e3b9      	b.n	25acc <__ieee754_pow+0x7dc>
   25358:	4b59      	ldr	r3, [pc, #356]	; (254c0 <__ieee754_pow+0x1d0>)
   2535a:	459a      	cmp	sl, r3
   2535c:	d11d      	bne.n	2539a <__ieee754_pow+0xaa>
   2535e:	464b      	mov	r3, r9
   25360:	2b00      	cmp	r3, #0
   25362:	db1a      	blt.n	2539a <__ieee754_pow+0xaa>
   25364:	0038      	movs	r0, r7
   25366:	0031      	movs	r1, r6
   25368:	f000 fcf8 	bl	25d5c <__ieee754_sqrt>
   2536c:	e008      	b.n	25380 <__ieee754_pow+0x90>
   2536e:	2800      	cmp	r0, #0
   25370:	d00d      	beq.n	2538e <__ieee754_pow+0x9e>
   25372:	4b54      	ldr	r3, [pc, #336]	; (254c4 <__ieee754_pow+0x1d4>)
   25374:	469c      	mov	ip, r3
   25376:	4464      	add	r4, ip
   25378:	4327      	orrs	r7, r4
   2537a:	d10a      	bne.n	25392 <__ieee754_pow+0xa2>
   2537c:	2000      	movs	r0, #0
   2537e:	494f      	ldr	r1, [pc, #316]	; (254bc <__ieee754_pow+0x1cc>)
   25380:	b011      	add	sp, #68	; 0x44
   25382:	bc3c      	pop	{r2, r3, r4, r5}
   25384:	4690      	mov	r8, r2
   25386:	4699      	mov	r9, r3
   25388:	46a2      	mov	sl, r4
   2538a:	46ab      	mov	fp, r5
   2538c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2538e:	42a5      	cmp	r5, r4
   25390:	ddca      	ble.n	25328 <__ieee754_pow+0x38>
   25392:	484d      	ldr	r0, [pc, #308]	; (254c8 <__ieee754_pow+0x1d8>)
   25394:	f000 fdd2 	bl	25f3c <nan>
   25398:	e7f2      	b.n	25380 <__ieee754_pow+0x90>
   2539a:	0038      	movs	r0, r7
   2539c:	0031      	movs	r1, r6
   2539e:	f000 fdbd 	bl	25f1c <fabs>
   253a2:	4643      	mov	r3, r8
   253a4:	2b00      	cmp	r3, #0
   253a6:	d11d      	bne.n	253e4 <__ieee754_pow+0xf4>
   253a8:	2c00      	cmp	r4, #0
   253aa:	d004      	beq.n	253b6 <__ieee754_pow+0xc6>
   253ac:	4a43      	ldr	r2, [pc, #268]	; (254bc <__ieee754_pow+0x1cc>)
   253ae:	00b3      	lsls	r3, r6, #2
   253b0:	089b      	lsrs	r3, r3, #2
   253b2:	4293      	cmp	r3, r2
   253b4:	d116      	bne.n	253e4 <__ieee754_pow+0xf4>
   253b6:	4653      	mov	r3, sl
   253b8:	2b00      	cmp	r3, #0
   253ba:	da00      	bge.n	253be <__ieee754_pow+0xce>
   253bc:	e3c5      	b.n	25b4a <__ieee754_pow+0x85a>
   253be:	464b      	mov	r3, r9
   253c0:	2b00      	cmp	r3, #0
   253c2:	dadd      	bge.n	25380 <__ieee754_pow+0x90>
   253c4:	4b3f      	ldr	r3, [pc, #252]	; (254c4 <__ieee754_pow+0x1d4>)
   253c6:	469c      	mov	ip, r3
   253c8:	465b      	mov	r3, fp
   253ca:	4464      	add	r4, ip
   253cc:	431c      	orrs	r4, r3
   253ce:	d101      	bne.n	253d4 <__ieee754_pow+0xe4>
   253d0:	f000 fc53 	bl	25c7a <__ieee754_pow+0x98a>
   253d4:	465b      	mov	r3, fp
   253d6:	2b01      	cmp	r3, #1
   253d8:	d1d2      	bne.n	25380 <__ieee754_pow+0x90>
   253da:	2480      	movs	r4, #128	; 0x80
   253dc:	0624      	lsls	r4, r4, #24
   253de:	190b      	adds	r3, r1, r4
   253e0:	0019      	movs	r1, r3
   253e2:	e7cd      	b.n	25380 <__ieee754_pow+0x90>
   253e4:	0ff3      	lsrs	r3, r6, #31
   253e6:	3b01      	subs	r3, #1
   253e8:	4698      	mov	r8, r3
   253ea:	465b      	mov	r3, fp
   253ec:	4642      	mov	r2, r8
   253ee:	4313      	orrs	r3, r2
   253f0:	d057      	beq.n	254a2 <__ieee754_pow+0x1b2>
   253f2:	4b36      	ldr	r3, [pc, #216]	; (254cc <__ieee754_pow+0x1dc>)
   253f4:	429d      	cmp	r5, r3
   253f6:	dd77      	ble.n	254e8 <__ieee754_pow+0x1f8>
   253f8:	4b35      	ldr	r3, [pc, #212]	; (254d0 <__ieee754_pow+0x1e0>)
   253fa:	429d      	cmp	r5, r3
   253fc:	dc00      	bgt.n	25400 <__ieee754_pow+0x110>
   253fe:	e3b1      	b.n	25b64 <__ieee754_pow+0x874>
   25400:	4b34      	ldr	r3, [pc, #208]	; (254d4 <__ieee754_pow+0x1e4>)
   25402:	429c      	cmp	r4, r3
   25404:	dc00      	bgt.n	25408 <__ieee754_pow+0x118>
   25406:	e3a8      	b.n	25b5a <__ieee754_pow+0x86a>
   25408:	4653      	mov	r3, sl
   2540a:	2b00      	cmp	r3, #0
   2540c:	dd43      	ble.n	25496 <__ieee754_pow+0x1a6>
   2540e:	4a32      	ldr	r2, [pc, #200]	; (254d8 <__ieee754_pow+0x1e8>)
   25410:	4b32      	ldr	r3, [pc, #200]	; (254dc <__ieee754_pow+0x1ec>)
   25412:	0010      	movs	r0, r2
   25414:	0019      	movs	r1, r3
   25416:	f002 fb77 	bl	27b08 <__aeabi_dmul>
   2541a:	e7b1      	b.n	25380 <__ieee754_pow+0x90>
   2541c:	4653      	mov	r3, sl
   2541e:	0038      	movs	r0, r7
   25420:	0031      	movs	r1, r6
   25422:	2b00      	cmp	r3, #0
   25424:	daac      	bge.n	25380 <__ieee754_pow+0x90>
   25426:	003a      	movs	r2, r7
   25428:	0033      	movs	r3, r6
   2542a:	2000      	movs	r0, #0
   2542c:	4923      	ldr	r1, [pc, #140]	; (254bc <__ieee754_pow+0x1cc>)
   2542e:	f001 ff37 	bl	272a0 <__aeabi_ddiv>
   25432:	e7a5      	b.n	25380 <__ieee754_pow+0x90>
   25434:	2a00      	cmp	r2, #0
   25436:	d100      	bne.n	2543a <__ieee754_pow+0x14a>
   25438:	e77a      	b.n	25330 <__ieee754_pow+0x40>
   2543a:	e79a      	b.n	25372 <__ieee754_pow+0x82>
   2543c:	4b28      	ldr	r3, [pc, #160]	; (254e0 <__ieee754_pow+0x1f0>)
   2543e:	429d      	cmp	r5, r3
   25440:	dc2c      	bgt.n	2549c <__ieee754_pow+0x1ac>
   25442:	4b24      	ldr	r3, [pc, #144]	; (254d4 <__ieee754_pow+0x1e4>)
   25444:	429d      	cmp	r5, r3
   25446:	dc00      	bgt.n	2544a <__ieee754_pow+0x15a>
   25448:	e778      	b.n	2533c <__ieee754_pow+0x4c>
   2544a:	4926      	ldr	r1, [pc, #152]	; (254e4 <__ieee754_pow+0x1f4>)
   2544c:	152b      	asrs	r3, r5, #20
   2544e:	468c      	mov	ip, r1
   25450:	4463      	add	r3, ip
   25452:	2b14      	cmp	r3, #20
   25454:	dc01      	bgt.n	2545a <__ieee754_pow+0x16a>
   25456:	f000 fbf3 	bl	25c40 <__ieee754_pow+0x950>
   2545a:	2134      	movs	r1, #52	; 0x34
   2545c:	1acb      	subs	r3, r1, r3
   2545e:	9900      	ldr	r1, [sp, #0]
   25460:	40d9      	lsrs	r1, r3
   25462:	0008      	movs	r0, r1
   25464:	4098      	lsls	r0, r3
   25466:	4282      	cmp	r2, r0
   25468:	d000      	beq.n	2546c <__ieee754_pow+0x17c>
   2546a:	e767      	b.n	2533c <__ieee754_pow+0x4c>
   2546c:	2301      	movs	r3, #1
   2546e:	4019      	ands	r1, r3
   25470:	3301      	adds	r3, #1
   25472:	1a5b      	subs	r3, r3, r1
   25474:	469b      	mov	fp, r3
   25476:	e761      	b.n	2533c <__ieee754_pow+0x4c>
   25478:	4b12      	ldr	r3, [pc, #72]	; (254c4 <__ieee754_pow+0x1d4>)
   2547a:	18e3      	adds	r3, r4, r3
   2547c:	431f      	orrs	r7, r3
   2547e:	d100      	bne.n	25482 <__ieee754_pow+0x192>
   25480:	e77c      	b.n	2537c <__ieee754_pow+0x8c>
   25482:	4b14      	ldr	r3, [pc, #80]	; (254d4 <__ieee754_pow+0x1e4>)
   25484:	429c      	cmp	r4, r3
   25486:	dc00      	bgt.n	2548a <__ieee754_pow+0x19a>
   25488:	e327      	b.n	25ada <__ieee754_pow+0x7ea>
   2548a:	9800      	ldr	r0, [sp, #0]
   2548c:	9901      	ldr	r1, [sp, #4]
   2548e:	4653      	mov	r3, sl
   25490:	2b00      	cmp	r3, #0
   25492:	db00      	blt.n	25496 <__ieee754_pow+0x1a6>
   25494:	e774      	b.n	25380 <__ieee754_pow+0x90>
   25496:	2000      	movs	r0, #0
   25498:	2100      	movs	r1, #0
   2549a:	e771      	b.n	25380 <__ieee754_pow+0x90>
   2549c:	2302      	movs	r3, #2
   2549e:	469b      	mov	fp, r3
   254a0:	e74c      	b.n	2533c <__ieee754_pow+0x4c>
   254a2:	003a      	movs	r2, r7
   254a4:	0033      	movs	r3, r6
   254a6:	0038      	movs	r0, r7
   254a8:	0031      	movs	r1, r6
   254aa:	f002 fdad 	bl	28008 <__aeabi_dsub>
   254ae:	0002      	movs	r2, r0
   254b0:	000b      	movs	r3, r1
   254b2:	f001 fef5 	bl	272a0 <__aeabi_ddiv>
   254b6:	e763      	b.n	25380 <__ieee754_pow+0x90>
   254b8:	7ff00000 	.word	0x7ff00000
   254bc:	3ff00000 	.word	0x3ff00000
   254c0:	3fe00000 	.word	0x3fe00000
   254c4:	c0100000 	.word	0xc0100000
   254c8:	0002a928 	.word	0x0002a928
   254cc:	41e00000 	.word	0x41e00000
   254d0:	43f00000 	.word	0x43f00000
   254d4:	3fefffff 	.word	0x3fefffff
   254d8:	8800759c 	.word	0x8800759c
   254dc:	7e37e43c 	.word	0x7e37e43c
   254e0:	433fffff 	.word	0x433fffff
   254e4:	fffffc01 	.word	0xfffffc01
   254e8:	4be9      	ldr	r3, [pc, #932]	; (25890 <__ieee754_pow+0x5a0>)
   254ea:	2200      	movs	r2, #0
   254ec:	429c      	cmp	r4, r3
   254ee:	dc06      	bgt.n	254fe <__ieee754_pow+0x20e>
   254f0:	2200      	movs	r2, #0
   254f2:	4be8      	ldr	r3, [pc, #928]	; (25894 <__ieee754_pow+0x5a4>)
   254f4:	f002 fb08 	bl	27b08 <__aeabi_dmul>
   254f8:	2235      	movs	r2, #53	; 0x35
   254fa:	000c      	movs	r4, r1
   254fc:	4252      	negs	r2, r2
   254fe:	4de6      	ldr	r5, [pc, #920]	; (25898 <__ieee754_pow+0x5a8>)
   25500:	1523      	asrs	r3, r4, #20
   25502:	46ac      	mov	ip, r5
   25504:	4463      	add	r3, ip
   25506:	4699      	mov	r9, r3
   25508:	0324      	lsls	r4, r4, #12
   2550a:	4de4      	ldr	r5, [pc, #912]	; (2589c <__ieee754_pow+0x5ac>)
   2550c:	4be4      	ldr	r3, [pc, #912]	; (258a0 <__ieee754_pow+0x5b0>)
   2550e:	0b24      	lsrs	r4, r4, #12
   25510:	4491      	add	r9, r2
   25512:	4325      	orrs	r5, r4
   25514:	429c      	cmp	r4, r3
   25516:	dd09      	ble.n	2552c <__ieee754_pow+0x23c>
   25518:	4be2      	ldr	r3, [pc, #904]	; (258a4 <__ieee754_pow+0x5b4>)
   2551a:	429c      	cmp	r4, r3
   2551c:	dc00      	bgt.n	25520 <__ieee754_pow+0x230>
   2551e:	e3b6      	b.n	25c8e <__ieee754_pow+0x99e>
   25520:	2301      	movs	r3, #1
   25522:	469c      	mov	ip, r3
   25524:	4be0      	ldr	r3, [pc, #896]	; (258a8 <__ieee754_pow+0x5b8>)
   25526:	44e1      	add	r9, ip
   25528:	469c      	mov	ip, r3
   2552a:	4465      	add	r5, ip
   2552c:	2300      	movs	r3, #0
   2552e:	2400      	movs	r4, #0
   25530:	2200      	movs	r2, #0
   25532:	9308      	str	r3, [sp, #32]
   25534:	9409      	str	r4, [sp, #36]	; 0x24
   25536:	930c      	str	r3, [sp, #48]	; 0x30
   25538:	940d      	str	r4, [sp, #52]	; 0x34
   2553a:	2400      	movs	r4, #0
   2553c:	4bd7      	ldr	r3, [pc, #860]	; (2589c <__ieee754_pow+0x5ac>)
   2553e:	9206      	str	r2, [sp, #24]
   25540:	9307      	str	r3, [sp, #28]
   25542:	9a06      	ldr	r2, [sp, #24]
   25544:	9b07      	ldr	r3, [sp, #28]
   25546:	0029      	movs	r1, r5
   25548:	900a      	str	r0, [sp, #40]	; 0x28
   2554a:	910b      	str	r1, [sp, #44]	; 0x2c
   2554c:	f002 fd5c 	bl	28008 <__aeabi_dsub>
   25550:	9a06      	ldr	r2, [sp, #24]
   25552:	9b07      	ldr	r3, [sp, #28]
   25554:	0006      	movs	r6, r0
   25556:	000f      	movs	r7, r1
   25558:	980a      	ldr	r0, [sp, #40]	; 0x28
   2555a:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2555c:	f001 fb90 	bl	26c80 <__aeabi_dadd>
   25560:	0002      	movs	r2, r0
   25562:	000b      	movs	r3, r1
   25564:	2000      	movs	r0, #0
   25566:	49cd      	ldr	r1, [pc, #820]	; (2589c <__ieee754_pow+0x5ac>)
   25568:	f001 fe9a 	bl	272a0 <__aeabi_ddiv>
   2556c:	000a      	movs	r2, r1
   2556e:	0001      	movs	r1, r0
   25570:	0013      	movs	r3, r2
   25572:	910e      	str	r1, [sp, #56]	; 0x38
   25574:	920f      	str	r2, [sp, #60]	; 0x3c
   25576:	0002      	movs	r2, r0
   25578:	0039      	movs	r1, r7
   2557a:	0030      	movs	r0, r6
   2557c:	f002 fac4 	bl	27b08 <__aeabi_dmul>
   25580:	000a      	movs	r2, r1
   25582:	0001      	movs	r1, r0
   25584:	2080      	movs	r0, #128	; 0x80
   25586:	9104      	str	r1, [sp, #16]
   25588:	9205      	str	r2, [sp, #20]
   2558a:	0013      	movs	r3, r2
   2558c:	2200      	movs	r2, #0
   2558e:	1069      	asrs	r1, r5, #1
   25590:	2580      	movs	r5, #128	; 0x80
   25592:	0300      	lsls	r0, r0, #12
   25594:	4684      	mov	ip, r0
   25596:	9202      	str	r2, [sp, #8]
   25598:	9303      	str	r3, [sp, #12]
   2559a:	2200      	movs	r2, #0
   2559c:	05ad      	lsls	r5, r5, #22
   2559e:	430d      	orrs	r5, r1
   255a0:	4465      	add	r5, ip
   255a2:	192b      	adds	r3, r5, r4
   255a4:	9802      	ldr	r0, [sp, #8]
   255a6:	9903      	ldr	r1, [sp, #12]
   255a8:	0014      	movs	r4, r2
   255aa:	001d      	movs	r5, r3
   255ac:	f002 faac 	bl	27b08 <__aeabi_dmul>
   255b0:	0002      	movs	r2, r0
   255b2:	000b      	movs	r3, r1
   255b4:	0030      	movs	r0, r6
   255b6:	0039      	movs	r1, r7
   255b8:	f002 fd26 	bl	28008 <__aeabi_dsub>
   255bc:	9a06      	ldr	r2, [sp, #24]
   255be:	9b07      	ldr	r3, [sp, #28]
   255c0:	0006      	movs	r6, r0
   255c2:	000f      	movs	r7, r1
   255c4:	0020      	movs	r0, r4
   255c6:	0029      	movs	r1, r5
   255c8:	f002 fd1e 	bl	28008 <__aeabi_dsub>
   255cc:	0002      	movs	r2, r0
   255ce:	000b      	movs	r3, r1
   255d0:	980a      	ldr	r0, [sp, #40]	; 0x28
   255d2:	990b      	ldr	r1, [sp, #44]	; 0x2c
   255d4:	f002 fd18 	bl	28008 <__aeabi_dsub>
   255d8:	9a02      	ldr	r2, [sp, #8]
   255da:	9b03      	ldr	r3, [sp, #12]
   255dc:	f002 fa94 	bl	27b08 <__aeabi_dmul>
   255e0:	0002      	movs	r2, r0
   255e2:	000b      	movs	r3, r1
   255e4:	0030      	movs	r0, r6
   255e6:	0039      	movs	r1, r7
   255e8:	f002 fd0e 	bl	28008 <__aeabi_dsub>
   255ec:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   255ee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   255f0:	f002 fa8a 	bl	27b08 <__aeabi_dmul>
   255f4:	9d04      	ldr	r5, [sp, #16]
   255f6:	9e05      	ldr	r6, [sp, #20]
   255f8:	9006      	str	r0, [sp, #24]
   255fa:	9107      	str	r1, [sp, #28]
   255fc:	002a      	movs	r2, r5
   255fe:	0033      	movs	r3, r6
   25600:	0028      	movs	r0, r5
   25602:	0031      	movs	r1, r6
   25604:	f002 fa80 	bl	27b08 <__aeabi_dmul>
   25608:	0006      	movs	r6, r0
   2560a:	000f      	movs	r7, r1
   2560c:	4aa7      	ldr	r2, [pc, #668]	; (258ac <__ieee754_pow+0x5bc>)
   2560e:	4ba8      	ldr	r3, [pc, #672]	; (258b0 <__ieee754_pow+0x5c0>)
   25610:	f002 fa7a 	bl	27b08 <__aeabi_dmul>
   25614:	4aa7      	ldr	r2, [pc, #668]	; (258b4 <__ieee754_pow+0x5c4>)
   25616:	4ba8      	ldr	r3, [pc, #672]	; (258b8 <__ieee754_pow+0x5c8>)
   25618:	f001 fb32 	bl	26c80 <__aeabi_dadd>
   2561c:	0032      	movs	r2, r6
   2561e:	003b      	movs	r3, r7
   25620:	f002 fa72 	bl	27b08 <__aeabi_dmul>
   25624:	4aa5      	ldr	r2, [pc, #660]	; (258bc <__ieee754_pow+0x5cc>)
   25626:	4ba6      	ldr	r3, [pc, #664]	; (258c0 <__ieee754_pow+0x5d0>)
   25628:	f001 fb2a 	bl	26c80 <__aeabi_dadd>
   2562c:	0032      	movs	r2, r6
   2562e:	003b      	movs	r3, r7
   25630:	f002 fa6a 	bl	27b08 <__aeabi_dmul>
   25634:	4aa3      	ldr	r2, [pc, #652]	; (258c4 <__ieee754_pow+0x5d4>)
   25636:	4ba4      	ldr	r3, [pc, #656]	; (258c8 <__ieee754_pow+0x5d8>)
   25638:	f001 fb22 	bl	26c80 <__aeabi_dadd>
   2563c:	0032      	movs	r2, r6
   2563e:	003b      	movs	r3, r7
   25640:	f002 fa62 	bl	27b08 <__aeabi_dmul>
   25644:	4aa1      	ldr	r2, [pc, #644]	; (258cc <__ieee754_pow+0x5dc>)
   25646:	4ba2      	ldr	r3, [pc, #648]	; (258d0 <__ieee754_pow+0x5e0>)
   25648:	f001 fb1a 	bl	26c80 <__aeabi_dadd>
   2564c:	0032      	movs	r2, r6
   2564e:	003b      	movs	r3, r7
   25650:	f002 fa5a 	bl	27b08 <__aeabi_dmul>
   25654:	4a9f      	ldr	r2, [pc, #636]	; (258d4 <__ieee754_pow+0x5e4>)
   25656:	4ba0      	ldr	r3, [pc, #640]	; (258d8 <__ieee754_pow+0x5e8>)
   25658:	f001 fb12 	bl	26c80 <__aeabi_dadd>
   2565c:	0032      	movs	r2, r6
   2565e:	0004      	movs	r4, r0
   25660:	000d      	movs	r5, r1
   25662:	003b      	movs	r3, r7
   25664:	0030      	movs	r0, r6
   25666:	0039      	movs	r1, r7
   25668:	f002 fa4e 	bl	27b08 <__aeabi_dmul>
   2566c:	0002      	movs	r2, r0
   2566e:	000b      	movs	r3, r1
   25670:	0020      	movs	r0, r4
   25672:	0029      	movs	r1, r5
   25674:	f002 fa48 	bl	27b08 <__aeabi_dmul>
   25678:	9e02      	ldr	r6, [sp, #8]
   2567a:	9f03      	ldr	r7, [sp, #12]
   2567c:	0004      	movs	r4, r0
   2567e:	000d      	movs	r5, r1
   25680:	9804      	ldr	r0, [sp, #16]
   25682:	9905      	ldr	r1, [sp, #20]
   25684:	0032      	movs	r2, r6
   25686:	003b      	movs	r3, r7
   25688:	f001 fafa 	bl	26c80 <__aeabi_dadd>
   2568c:	9a06      	ldr	r2, [sp, #24]
   2568e:	9b07      	ldr	r3, [sp, #28]
   25690:	f002 fa3a 	bl	27b08 <__aeabi_dmul>
   25694:	0022      	movs	r2, r4
   25696:	002b      	movs	r3, r5
   25698:	f001 faf2 	bl	26c80 <__aeabi_dadd>
   2569c:	0032      	movs	r2, r6
   2569e:	900a      	str	r0, [sp, #40]	; 0x28
   256a0:	910b      	str	r1, [sp, #44]	; 0x2c
   256a2:	003b      	movs	r3, r7
   256a4:	0030      	movs	r0, r6
   256a6:	0039      	movs	r1, r7
   256a8:	9602      	str	r6, [sp, #8]
   256aa:	9703      	str	r7, [sp, #12]
   256ac:	f002 fa2c 	bl	27b08 <__aeabi_dmul>
   256b0:	2200      	movs	r2, #0
   256b2:	4b8a      	ldr	r3, [pc, #552]	; (258dc <__ieee754_pow+0x5ec>)
   256b4:	0004      	movs	r4, r0
   256b6:	000d      	movs	r5, r1
   256b8:	f001 fae2 	bl	26c80 <__aeabi_dadd>
   256bc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   256be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   256c0:	f001 fade 	bl	26c80 <__aeabi_dadd>
   256c4:	2600      	movs	r6, #0
   256c6:	000f      	movs	r7, r1
   256c8:	0032      	movs	r2, r6
   256ca:	000b      	movs	r3, r1
   256cc:	9802      	ldr	r0, [sp, #8]
   256ce:	9903      	ldr	r1, [sp, #12]
   256d0:	f002 fa1a 	bl	27b08 <__aeabi_dmul>
   256d4:	2200      	movs	r2, #0
   256d6:	9002      	str	r0, [sp, #8]
   256d8:	9103      	str	r1, [sp, #12]
   256da:	4b80      	ldr	r3, [pc, #512]	; (258dc <__ieee754_pow+0x5ec>)
   256dc:	0030      	movs	r0, r6
   256de:	0039      	movs	r1, r7
   256e0:	f002 fc92 	bl	28008 <__aeabi_dsub>
   256e4:	0022      	movs	r2, r4
   256e6:	002b      	movs	r3, r5
   256e8:	f002 fc8e 	bl	28008 <__aeabi_dsub>
   256ec:	0002      	movs	r2, r0
   256ee:	000b      	movs	r3, r1
   256f0:	980a      	ldr	r0, [sp, #40]	; 0x28
   256f2:	990b      	ldr	r1, [sp, #44]	; 0x2c
   256f4:	f002 fc88 	bl	28008 <__aeabi_dsub>
   256f8:	9a04      	ldr	r2, [sp, #16]
   256fa:	9b05      	ldr	r3, [sp, #20]
   256fc:	f002 fa04 	bl	27b08 <__aeabi_dmul>
   25700:	0032      	movs	r2, r6
   25702:	0004      	movs	r4, r0
   25704:	000d      	movs	r5, r1
   25706:	9806      	ldr	r0, [sp, #24]
   25708:	9907      	ldr	r1, [sp, #28]
   2570a:	003b      	movs	r3, r7
   2570c:	f002 f9fc 	bl	27b08 <__aeabi_dmul>
   25710:	0002      	movs	r2, r0
   25712:	000b      	movs	r3, r1
   25714:	0020      	movs	r0, r4
   25716:	0029      	movs	r1, r5
   25718:	f001 fab2 	bl	26c80 <__aeabi_dadd>
   2571c:	0004      	movs	r4, r0
   2571e:	000d      	movs	r5, r1
   25720:	0002      	movs	r2, r0
   25722:	000b      	movs	r3, r1
   25724:	9802      	ldr	r0, [sp, #8]
   25726:	9903      	ldr	r1, [sp, #12]
   25728:	f001 faaa 	bl	26c80 <__aeabi_dadd>
   2572c:	2600      	movs	r6, #0
   2572e:	22e0      	movs	r2, #224	; 0xe0
   25730:	4b6b      	ldr	r3, [pc, #428]	; (258e0 <__ieee754_pow+0x5f0>)
   25732:	0612      	lsls	r2, r2, #24
   25734:	0030      	movs	r0, r6
   25736:	000f      	movs	r7, r1
   25738:	f002 f9e6 	bl	27b08 <__aeabi_dmul>
   2573c:	9a02      	ldr	r2, [sp, #8]
   2573e:	9b03      	ldr	r3, [sp, #12]
   25740:	9004      	str	r0, [sp, #16]
   25742:	9105      	str	r1, [sp, #20]
   25744:	0030      	movs	r0, r6
   25746:	0039      	movs	r1, r7
   25748:	f002 fc5e 	bl	28008 <__aeabi_dsub>
   2574c:	0002      	movs	r2, r0
   2574e:	000b      	movs	r3, r1
   25750:	0020      	movs	r0, r4
   25752:	0029      	movs	r1, r5
   25754:	f002 fc58 	bl	28008 <__aeabi_dsub>
   25758:	4a62      	ldr	r2, [pc, #392]	; (258e4 <__ieee754_pow+0x5f4>)
   2575a:	4b61      	ldr	r3, [pc, #388]	; (258e0 <__ieee754_pow+0x5f0>)
   2575c:	f002 f9d4 	bl	27b08 <__aeabi_dmul>
   25760:	4a61      	ldr	r2, [pc, #388]	; (258e8 <__ieee754_pow+0x5f8>)
   25762:	0004      	movs	r4, r0
   25764:	000d      	movs	r5, r1
   25766:	4b61      	ldr	r3, [pc, #388]	; (258ec <__ieee754_pow+0x5fc>)
   25768:	0030      	movs	r0, r6
   2576a:	0039      	movs	r1, r7
   2576c:	f002 f9cc 	bl	27b08 <__aeabi_dmul>
   25770:	0002      	movs	r2, r0
   25772:	000b      	movs	r3, r1
   25774:	0020      	movs	r0, r4
   25776:	0029      	movs	r1, r5
   25778:	f001 fa82 	bl	26c80 <__aeabi_dadd>
   2577c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   2577e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   25780:	f001 fa7e 	bl	26c80 <__aeabi_dadd>
   25784:	0006      	movs	r6, r0
   25786:	4648      	mov	r0, r9
   25788:	000f      	movs	r7, r1
   2578a:	f002 ffa7 	bl	286dc <__aeabi_i2d>
   2578e:	0004      	movs	r4, r0
   25790:	000d      	movs	r5, r1
   25792:	9804      	ldr	r0, [sp, #16]
   25794:	9905      	ldr	r1, [sp, #20]
   25796:	0032      	movs	r2, r6
   25798:	003b      	movs	r3, r7
   2579a:	f001 fa71 	bl	26c80 <__aeabi_dadd>
   2579e:	9a08      	ldr	r2, [sp, #32]
   257a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   257a2:	f001 fa6d 	bl	26c80 <__aeabi_dadd>
   257a6:	0022      	movs	r2, r4
   257a8:	002b      	movs	r3, r5
   257aa:	f001 fa69 	bl	26c80 <__aeabi_dadd>
   257ae:	2000      	movs	r0, #0
   257b0:	0022      	movs	r2, r4
   257b2:	002b      	movs	r3, r5
   257b4:	9002      	str	r0, [sp, #8]
   257b6:	9103      	str	r1, [sp, #12]
   257b8:	f002 fc26 	bl	28008 <__aeabi_dsub>
   257bc:	9a08      	ldr	r2, [sp, #32]
   257be:	9b09      	ldr	r3, [sp, #36]	; 0x24
   257c0:	f002 fc22 	bl	28008 <__aeabi_dsub>
   257c4:	9a04      	ldr	r2, [sp, #16]
   257c6:	9b05      	ldr	r3, [sp, #20]
   257c8:	f002 fc1e 	bl	28008 <__aeabi_dsub>
   257cc:	0002      	movs	r2, r0
   257ce:	000b      	movs	r3, r1
   257d0:	0030      	movs	r0, r6
   257d2:	0039      	movs	r1, r7
   257d4:	f002 fc18 	bl	28008 <__aeabi_dsub>
   257d8:	9004      	str	r0, [sp, #16]
   257da:	9105      	str	r1, [sp, #20]
   257dc:	465b      	mov	r3, fp
   257de:	4642      	mov	r2, r8
   257e0:	3b01      	subs	r3, #1
   257e2:	4313      	orrs	r3, r2
   257e4:	d100      	bne.n	257e8 <__ieee754_pow+0x4f8>
   257e6:	e1ab      	b.n	25b40 <__ieee754_pow+0x850>
   257e8:	2300      	movs	r3, #0
   257ea:	4c2c      	ldr	r4, [pc, #176]	; (2589c <__ieee754_pow+0x5ac>)
   257ec:	9306      	str	r3, [sp, #24]
   257ee:	9407      	str	r4, [sp, #28]
   257f0:	9800      	ldr	r0, [sp, #0]
   257f2:	9901      	ldr	r1, [sp, #4]
   257f4:	2600      	movs	r6, #0
   257f6:	000b      	movs	r3, r1
   257f8:	0032      	movs	r2, r6
   257fa:	000f      	movs	r7, r1
   257fc:	f002 fc04 	bl	28008 <__aeabi_dsub>
   25800:	9a02      	ldr	r2, [sp, #8]
   25802:	9b03      	ldr	r3, [sp, #12]
   25804:	f002 f980 	bl	27b08 <__aeabi_dmul>
   25808:	9a00      	ldr	r2, [sp, #0]
   2580a:	9b01      	ldr	r3, [sp, #4]
   2580c:	0004      	movs	r4, r0
   2580e:	000d      	movs	r5, r1
   25810:	9804      	ldr	r0, [sp, #16]
   25812:	9905      	ldr	r1, [sp, #20]
   25814:	f002 f978 	bl	27b08 <__aeabi_dmul>
   25818:	0002      	movs	r2, r0
   2581a:	000b      	movs	r3, r1
   2581c:	0020      	movs	r0, r4
   2581e:	0029      	movs	r1, r5
   25820:	f001 fa2e 	bl	26c80 <__aeabi_dadd>
   25824:	0004      	movs	r4, r0
   25826:	000d      	movs	r5, r1
   25828:	9802      	ldr	r0, [sp, #8]
   2582a:	9903      	ldr	r1, [sp, #12]
   2582c:	0032      	movs	r2, r6
   2582e:	003b      	movs	r3, r7
   25830:	9400      	str	r4, [sp, #0]
   25832:	9501      	str	r5, [sp, #4]
   25834:	f002 f968 	bl	27b08 <__aeabi_dmul>
   25838:	0002      	movs	r2, r0
   2583a:	000b      	movs	r3, r1
   2583c:	0006      	movs	r6, r0
   2583e:	000f      	movs	r7, r1
   25840:	0020      	movs	r0, r4
   25842:	0029      	movs	r1, r5
   25844:	f001 fa1c 	bl	26c80 <__aeabi_dadd>
   25848:	4b29      	ldr	r3, [pc, #164]	; (258f0 <__ieee754_pow+0x600>)
   2584a:	0004      	movs	r4, r0
   2584c:	000d      	movs	r5, r1
   2584e:	0002      	movs	r2, r0
   25850:	468b      	mov	fp, r1
   25852:	4299      	cmp	r1, r3
   25854:	dc00      	bgt.n	25858 <__ieee754_pow+0x568>
   25856:	e14f      	b.n	25af8 <__ieee754_pow+0x808>
   25858:	4b26      	ldr	r3, [pc, #152]	; (258f4 <__ieee754_pow+0x604>)
   2585a:	18cb      	adds	r3, r1, r3
   2585c:	4303      	orrs	r3, r0
   2585e:	d000      	beq.n	25862 <__ieee754_pow+0x572>
   25860:	e1e2      	b.n	25c28 <__ieee754_pow+0x938>
   25862:	9800      	ldr	r0, [sp, #0]
   25864:	9901      	ldr	r1, [sp, #4]
   25866:	4a24      	ldr	r2, [pc, #144]	; (258f8 <__ieee754_pow+0x608>)
   25868:	4b24      	ldr	r3, [pc, #144]	; (258fc <__ieee754_pow+0x60c>)
   2586a:	f001 fa09 	bl	26c80 <__aeabi_dadd>
   2586e:	0032      	movs	r2, r6
   25870:	9002      	str	r0, [sp, #8]
   25872:	9103      	str	r1, [sp, #12]
   25874:	003b      	movs	r3, r7
   25876:	0020      	movs	r0, r4
   25878:	0029      	movs	r1, r5
   2587a:	f002 fbc5 	bl	28008 <__aeabi_dsub>
   2587e:	0002      	movs	r2, r0
   25880:	000b      	movs	r3, r1
   25882:	9802      	ldr	r0, [sp, #8]
   25884:	9903      	ldr	r1, [sp, #12]
   25886:	f000 fe11 	bl	264ac <__aeabi_dcmpgt>
   2588a:	46aa      	mov	sl, r5
   2588c:	e038      	b.n	25900 <__ieee754_pow+0x610>
   2588e:	46c0      	nop			; (mov r8, r8)
   25890:	000fffff 	.word	0x000fffff
   25894:	43400000 	.word	0x43400000
   25898:	fffffc01 	.word	0xfffffc01
   2589c:	3ff00000 	.word	0x3ff00000
   258a0:	0003988e 	.word	0x0003988e
   258a4:	000bb679 	.word	0x000bb679
   258a8:	fff00000 	.word	0xfff00000
   258ac:	4a454eef 	.word	0x4a454eef
   258b0:	3fca7e28 	.word	0x3fca7e28
   258b4:	93c9db65 	.word	0x93c9db65
   258b8:	3fcd864a 	.word	0x3fcd864a
   258bc:	a91d4101 	.word	0xa91d4101
   258c0:	3fd17460 	.word	0x3fd17460
   258c4:	518f264d 	.word	0x518f264d
   258c8:	3fd55555 	.word	0x3fd55555
   258cc:	db6fabff 	.word	0xdb6fabff
   258d0:	3fdb6db6 	.word	0x3fdb6db6
   258d4:	33333303 	.word	0x33333303
   258d8:	3fe33333 	.word	0x3fe33333
   258dc:	40080000 	.word	0x40080000
   258e0:	3feec709 	.word	0x3feec709
   258e4:	dc3a03fd 	.word	0xdc3a03fd
   258e8:	145b01f5 	.word	0x145b01f5
   258ec:	be3e2fe0 	.word	0xbe3e2fe0
   258f0:	408fffff 	.word	0x408fffff
   258f4:	bf700000 	.word	0xbf700000
   258f8:	652b82fe 	.word	0x652b82fe
   258fc:	3c971547 	.word	0x3c971547
   25900:	2800      	cmp	r0, #0
   25902:	d000      	beq.n	25906 <__ieee754_pow+0x616>
   25904:	e190      	b.n	25c28 <__ieee754_pow+0x938>
   25906:	4aec      	ldr	r2, [pc, #944]	; (25cb8 <__ieee754_pow+0x9c8>)
   25908:	4653      	mov	r3, sl
   2590a:	4694      	mov	ip, r2
   2590c:	2280      	movs	r2, #128	; 0x80
   2590e:	0352      	lsls	r2, r2, #13
   25910:	0011      	movs	r1, r2
   25912:	151b      	asrs	r3, r3, #20
   25914:	4463      	add	r3, ip
   25916:	4119      	asrs	r1, r3
   25918:	000b      	movs	r3, r1
   2591a:	4690      	mov	r8, r2
   2591c:	4ae7      	ldr	r2, [pc, #924]	; (25cbc <__ieee754_pow+0x9cc>)
   2591e:	445b      	add	r3, fp
   25920:	4694      	mov	ip, r2
   25922:	005c      	lsls	r4, r3, #1
   25924:	0d64      	lsrs	r4, r4, #21
   25926:	4de6      	ldr	r5, [pc, #920]	; (25cc0 <__ieee754_pow+0x9d0>)
   25928:	4464      	add	r4, ip
   2592a:	4125      	asrs	r5, r4
   2592c:	001a      	movs	r2, r3
   2592e:	43aa      	bics	r2, r5
   25930:	0011      	movs	r1, r2
   25932:	4642      	mov	r2, r8
   25934:	031b      	lsls	r3, r3, #12
   25936:	0b1b      	lsrs	r3, r3, #12
   25938:	4313      	orrs	r3, r2
   2593a:	2214      	movs	r2, #20
   2593c:	1b14      	subs	r4, r2, r4
   2593e:	4123      	asrs	r3, r4
   25940:	4699      	mov	r9, r3
   25942:	465b      	mov	r3, fp
   25944:	2000      	movs	r0, #0
   25946:	2b00      	cmp	r3, #0
   25948:	da00      	bge.n	2594c <__ieee754_pow+0x65c>
   2594a:	e1b0      	b.n	25cae <__ieee754_pow+0x9be>
   2594c:	0002      	movs	r2, r0
   2594e:	000b      	movs	r3, r1
   25950:	0030      	movs	r0, r6
   25952:	0039      	movs	r1, r7
   25954:	f002 fb58 	bl	28008 <__aeabi_dsub>
   25958:	000b      	movs	r3, r1
   2595a:	0002      	movs	r2, r0
   2595c:	0006      	movs	r6, r0
   2595e:	000f      	movs	r7, r1
   25960:	9800      	ldr	r0, [sp, #0]
   25962:	9901      	ldr	r1, [sp, #4]
   25964:	f001 f98c 	bl	26c80 <__aeabi_dadd>
   25968:	464b      	mov	r3, r9
   2596a:	051b      	lsls	r3, r3, #20
   2596c:	000d      	movs	r5, r1
   2596e:	4698      	mov	r8, r3
   25970:	2400      	movs	r4, #0
   25972:	2200      	movs	r2, #0
   25974:	4bd3      	ldr	r3, [pc, #844]	; (25cc4 <__ieee754_pow+0x9d4>)
   25976:	0020      	movs	r0, r4
   25978:	0029      	movs	r1, r5
   2597a:	f002 f8c5 	bl	27b08 <__aeabi_dmul>
   2597e:	0032      	movs	r2, r6
   25980:	9002      	str	r0, [sp, #8]
   25982:	9103      	str	r1, [sp, #12]
   25984:	003b      	movs	r3, r7
   25986:	0020      	movs	r0, r4
   25988:	0029      	movs	r1, r5
   2598a:	f002 fb3d 	bl	28008 <__aeabi_dsub>
   2598e:	0002      	movs	r2, r0
   25990:	000b      	movs	r3, r1
   25992:	9800      	ldr	r0, [sp, #0]
   25994:	9901      	ldr	r1, [sp, #4]
   25996:	f002 fb37 	bl	28008 <__aeabi_dsub>
   2599a:	4acb      	ldr	r2, [pc, #812]	; (25cc8 <__ieee754_pow+0x9d8>)
   2599c:	4bcb      	ldr	r3, [pc, #812]	; (25ccc <__ieee754_pow+0x9dc>)
   2599e:	f002 f8b3 	bl	27b08 <__aeabi_dmul>
   259a2:	4acb      	ldr	r2, [pc, #812]	; (25cd0 <__ieee754_pow+0x9e0>)
   259a4:	0006      	movs	r6, r0
   259a6:	000f      	movs	r7, r1
   259a8:	4bca      	ldr	r3, [pc, #808]	; (25cd4 <__ieee754_pow+0x9e4>)
   259aa:	0020      	movs	r0, r4
   259ac:	0029      	movs	r1, r5
   259ae:	f002 f8ab 	bl	27b08 <__aeabi_dmul>
   259b2:	0002      	movs	r2, r0
   259b4:	000b      	movs	r3, r1
   259b6:	0030      	movs	r0, r6
   259b8:	0039      	movs	r1, r7
   259ba:	f001 f961 	bl	26c80 <__aeabi_dadd>
   259be:	0004      	movs	r4, r0
   259c0:	000d      	movs	r5, r1
   259c2:	0002      	movs	r2, r0
   259c4:	000b      	movs	r3, r1
   259c6:	9802      	ldr	r0, [sp, #8]
   259c8:	9903      	ldr	r1, [sp, #12]
   259ca:	f001 f959 	bl	26c80 <__aeabi_dadd>
   259ce:	9a02      	ldr	r2, [sp, #8]
   259d0:	9b03      	ldr	r3, [sp, #12]
   259d2:	0006      	movs	r6, r0
   259d4:	000f      	movs	r7, r1
   259d6:	f002 fb17 	bl	28008 <__aeabi_dsub>
   259da:	0002      	movs	r2, r0
   259dc:	000b      	movs	r3, r1
   259de:	0020      	movs	r0, r4
   259e0:	0029      	movs	r1, r5
   259e2:	f002 fb11 	bl	28008 <__aeabi_dsub>
   259e6:	0032      	movs	r2, r6
   259e8:	9000      	str	r0, [sp, #0]
   259ea:	9101      	str	r1, [sp, #4]
   259ec:	003b      	movs	r3, r7
   259ee:	0030      	movs	r0, r6
   259f0:	0039      	movs	r1, r7
   259f2:	f002 f889 	bl	27b08 <__aeabi_dmul>
   259f6:	0004      	movs	r4, r0
   259f8:	000d      	movs	r5, r1
   259fa:	4ab7      	ldr	r2, [pc, #732]	; (25cd8 <__ieee754_pow+0x9e8>)
   259fc:	4bb7      	ldr	r3, [pc, #732]	; (25cdc <__ieee754_pow+0x9ec>)
   259fe:	f002 f883 	bl	27b08 <__aeabi_dmul>
   25a02:	4ab7      	ldr	r2, [pc, #732]	; (25ce0 <__ieee754_pow+0x9f0>)
   25a04:	4bb7      	ldr	r3, [pc, #732]	; (25ce4 <__ieee754_pow+0x9f4>)
   25a06:	f002 faff 	bl	28008 <__aeabi_dsub>
   25a0a:	0022      	movs	r2, r4
   25a0c:	002b      	movs	r3, r5
   25a0e:	f002 f87b 	bl	27b08 <__aeabi_dmul>
   25a12:	4ab5      	ldr	r2, [pc, #724]	; (25ce8 <__ieee754_pow+0x9f8>)
   25a14:	4bb5      	ldr	r3, [pc, #724]	; (25cec <__ieee754_pow+0x9fc>)
   25a16:	f001 f933 	bl	26c80 <__aeabi_dadd>
   25a1a:	0022      	movs	r2, r4
   25a1c:	002b      	movs	r3, r5
   25a1e:	f002 f873 	bl	27b08 <__aeabi_dmul>
   25a22:	4ab3      	ldr	r2, [pc, #716]	; (25cf0 <__ieee754_pow+0xa00>)
   25a24:	4bb3      	ldr	r3, [pc, #716]	; (25cf4 <__ieee754_pow+0xa04>)
   25a26:	f002 faef 	bl	28008 <__aeabi_dsub>
   25a2a:	0022      	movs	r2, r4
   25a2c:	002b      	movs	r3, r5
   25a2e:	f002 f86b 	bl	27b08 <__aeabi_dmul>
   25a32:	4ab1      	ldr	r2, [pc, #708]	; (25cf8 <__ieee754_pow+0xa08>)
   25a34:	4bb1      	ldr	r3, [pc, #708]	; (25cfc <__ieee754_pow+0xa0c>)
   25a36:	f001 f923 	bl	26c80 <__aeabi_dadd>
   25a3a:	0022      	movs	r2, r4
   25a3c:	002b      	movs	r3, r5
   25a3e:	f002 f863 	bl	27b08 <__aeabi_dmul>
   25a42:	0002      	movs	r2, r0
   25a44:	000b      	movs	r3, r1
   25a46:	0030      	movs	r0, r6
   25a48:	0039      	movs	r1, r7
   25a4a:	f002 fadd 	bl	28008 <__aeabi_dsub>
   25a4e:	0004      	movs	r4, r0
   25a50:	000d      	movs	r5, r1
   25a52:	0002      	movs	r2, r0
   25a54:	000b      	movs	r3, r1
   25a56:	0030      	movs	r0, r6
   25a58:	0039      	movs	r1, r7
   25a5a:	f002 f855 	bl	27b08 <__aeabi_dmul>
   25a5e:	2380      	movs	r3, #128	; 0x80
   25a60:	9002      	str	r0, [sp, #8]
   25a62:	9103      	str	r1, [sp, #12]
   25a64:	2200      	movs	r2, #0
   25a66:	05db      	lsls	r3, r3, #23
   25a68:	0020      	movs	r0, r4
   25a6a:	0029      	movs	r1, r5
   25a6c:	f002 facc 	bl	28008 <__aeabi_dsub>
   25a70:	0002      	movs	r2, r0
   25a72:	000b      	movs	r3, r1
   25a74:	9802      	ldr	r0, [sp, #8]
   25a76:	9903      	ldr	r1, [sp, #12]
   25a78:	f001 fc12 	bl	272a0 <__aeabi_ddiv>
   25a7c:	9a00      	ldr	r2, [sp, #0]
   25a7e:	9b01      	ldr	r3, [sp, #4]
   25a80:	0004      	movs	r4, r0
   25a82:	000d      	movs	r5, r1
   25a84:	0030      	movs	r0, r6
   25a86:	0039      	movs	r1, r7
   25a88:	f002 f83e 	bl	27b08 <__aeabi_dmul>
   25a8c:	9a00      	ldr	r2, [sp, #0]
   25a8e:	9b01      	ldr	r3, [sp, #4]
   25a90:	f001 f8f6 	bl	26c80 <__aeabi_dadd>
   25a94:	0002      	movs	r2, r0
   25a96:	000b      	movs	r3, r1
   25a98:	0020      	movs	r0, r4
   25a9a:	0029      	movs	r1, r5
   25a9c:	f002 fab4 	bl	28008 <__aeabi_dsub>
   25aa0:	0032      	movs	r2, r6
   25aa2:	003b      	movs	r3, r7
   25aa4:	f002 fab0 	bl	28008 <__aeabi_dsub>
   25aa8:	0002      	movs	r2, r0
   25aaa:	000b      	movs	r3, r1
   25aac:	2000      	movs	r0, #0
   25aae:	4994      	ldr	r1, [pc, #592]	; (25d00 <__ieee754_pow+0xa10>)
   25ab0:	f002 faaa 	bl	28008 <__aeabi_dsub>
   25ab4:	4643      	mov	r3, r8
   25ab6:	185b      	adds	r3, r3, r1
   25ab8:	151a      	asrs	r2, r3, #20
   25aba:	2a00      	cmp	r2, #0
   25abc:	dc00      	bgt.n	25ac0 <__ieee754_pow+0x7d0>
   25abe:	e149      	b.n	25d54 <__ieee754_pow+0xa64>
   25ac0:	0019      	movs	r1, r3
   25ac2:	9a06      	ldr	r2, [sp, #24]
   25ac4:	9b07      	ldr	r3, [sp, #28]
   25ac6:	f002 f81f 	bl	27b08 <__aeabi_dmul>
   25aca:	e459      	b.n	25380 <__ieee754_pow+0x90>
   25acc:	003a      	movs	r2, r7
   25ace:	0033      	movs	r3, r6
   25ad0:	0038      	movs	r0, r7
   25ad2:	0031      	movs	r1, r6
   25ad4:	f002 f818 	bl	27b08 <__aeabi_dmul>
   25ad8:	e452      	b.n	25380 <__ieee754_pow+0x90>
   25ada:	4653      	mov	r3, sl
   25adc:	2b00      	cmp	r3, #0
   25ade:	db00      	blt.n	25ae2 <__ieee754_pow+0x7f2>
   25ae0:	e4d9      	b.n	25496 <__ieee754_pow+0x1a6>
   25ae2:	9c00      	ldr	r4, [sp, #0]
   25ae4:	9d01      	ldr	r5, [sp, #4]
   25ae6:	2280      	movs	r2, #128	; 0x80
   25ae8:	0612      	lsls	r2, r2, #24
   25aea:	002b      	movs	r3, r5
   25aec:	4694      	mov	ip, r2
   25aee:	4463      	add	r3, ip
   25af0:	0020      	movs	r0, r4
   25af2:	0019      	movs	r1, r3
   25af4:	f7ff fc44 	bl	25380 <__ieee754_pow+0x90>
   25af8:	004b      	lsls	r3, r1, #1
   25afa:	085b      	lsrs	r3, r3, #1
   25afc:	469a      	mov	sl, r3
   25afe:	4b81      	ldr	r3, [pc, #516]	; (25d04 <__ieee754_pow+0xa14>)
   25b00:	459a      	cmp	sl, r3
   25b02:	dc00      	bgt.n	25b06 <__ieee754_pow+0x816>
   25b04:	e0b1      	b.n	25c6a <__ieee754_pow+0x97a>
   25b06:	4b80      	ldr	r3, [pc, #512]	; (25d08 <__ieee754_pow+0xa18>)
   25b08:	445b      	add	r3, fp
   25b0a:	431a      	orrs	r2, r3
   25b0c:	d10c      	bne.n	25b28 <__ieee754_pow+0x838>
   25b0e:	0032      	movs	r2, r6
   25b10:	003b      	movs	r3, r7
   25b12:	f002 fa79 	bl	28008 <__aeabi_dsub>
   25b16:	0002      	movs	r2, r0
   25b18:	000b      	movs	r3, r1
   25b1a:	9800      	ldr	r0, [sp, #0]
   25b1c:	9901      	ldr	r1, [sp, #4]
   25b1e:	f000 fcbb 	bl	26498 <__aeabi_dcmple>
   25b22:	2800      	cmp	r0, #0
   25b24:	d100      	bne.n	25b28 <__ieee754_pow+0x838>
   25b26:	e6ee      	b.n	25906 <__ieee754_pow+0x616>
   25b28:	9806      	ldr	r0, [sp, #24]
   25b2a:	9907      	ldr	r1, [sp, #28]
   25b2c:	4a77      	ldr	r2, [pc, #476]	; (25d0c <__ieee754_pow+0xa1c>)
   25b2e:	4b78      	ldr	r3, [pc, #480]	; (25d10 <__ieee754_pow+0xa20>)
   25b30:	f001 ffea 	bl	27b08 <__aeabi_dmul>
   25b34:	4a75      	ldr	r2, [pc, #468]	; (25d0c <__ieee754_pow+0xa1c>)
   25b36:	4b76      	ldr	r3, [pc, #472]	; (25d10 <__ieee754_pow+0xa20>)
   25b38:	f001 ffe6 	bl	27b08 <__aeabi_dmul>
   25b3c:	f7ff fc20 	bl	25380 <__ieee754_pow+0x90>
   25b40:	2300      	movs	r3, #0
   25b42:	4c74      	ldr	r4, [pc, #464]	; (25d14 <__ieee754_pow+0xa24>)
   25b44:	9306      	str	r3, [sp, #24]
   25b46:	9407      	str	r4, [sp, #28]
   25b48:	e652      	b.n	257f0 <__ieee754_pow+0x500>
   25b4a:	0002      	movs	r2, r0
   25b4c:	000b      	movs	r3, r1
   25b4e:	2000      	movs	r0, #0
   25b50:	496b      	ldr	r1, [pc, #428]	; (25d00 <__ieee754_pow+0xa10>)
   25b52:	f001 fba5 	bl	272a0 <__aeabi_ddiv>
   25b56:	f7ff fc32 	bl	253be <__ieee754_pow+0xce>
   25b5a:	4653      	mov	r3, sl
   25b5c:	2b00      	cmp	r3, #0
   25b5e:	db00      	blt.n	25b62 <__ieee754_pow+0x872>
   25b60:	e499      	b.n	25496 <__ieee754_pow+0x1a6>
   25b62:	e454      	b.n	2540e <__ieee754_pow+0x11e>
   25b64:	4b6c      	ldr	r3, [pc, #432]	; (25d18 <__ieee754_pow+0xa28>)
   25b66:	429c      	cmp	r4, r3
   25b68:	ddf7      	ble.n	25b5a <__ieee754_pow+0x86a>
   25b6a:	4b65      	ldr	r3, [pc, #404]	; (25d00 <__ieee754_pow+0xa10>)
   25b6c:	429c      	cmp	r4, r3
   25b6e:	dd00      	ble.n	25b72 <__ieee754_pow+0x882>
   25b70:	e44a      	b.n	25408 <__ieee754_pow+0x118>
   25b72:	2200      	movs	r2, #0
   25b74:	4b62      	ldr	r3, [pc, #392]	; (25d00 <__ieee754_pow+0xa10>)
   25b76:	f002 fa47 	bl	28008 <__aeabi_dsub>
   25b7a:	22c0      	movs	r2, #192	; 0xc0
   25b7c:	4b67      	ldr	r3, [pc, #412]	; (25d1c <__ieee754_pow+0xa2c>)
   25b7e:	05d2      	lsls	r2, r2, #23
   25b80:	0004      	movs	r4, r0
   25b82:	000d      	movs	r5, r1
   25b84:	f001 ffc0 	bl	27b08 <__aeabi_dmul>
   25b88:	4a65      	ldr	r2, [pc, #404]	; (25d20 <__ieee754_pow+0xa30>)
   25b8a:	0006      	movs	r6, r0
   25b8c:	000f      	movs	r7, r1
   25b8e:	4b65      	ldr	r3, [pc, #404]	; (25d24 <__ieee754_pow+0xa34>)
   25b90:	0020      	movs	r0, r4
   25b92:	0029      	movs	r1, r5
   25b94:	f001 ffb8 	bl	27b08 <__aeabi_dmul>
   25b98:	2200      	movs	r2, #0
   25b9a:	9002      	str	r0, [sp, #8]
   25b9c:	9103      	str	r1, [sp, #12]
   25b9e:	4b62      	ldr	r3, [pc, #392]	; (25d28 <__ieee754_pow+0xa38>)
   25ba0:	0020      	movs	r0, r4
   25ba2:	0029      	movs	r1, r5
   25ba4:	f001 ffb0 	bl	27b08 <__aeabi_dmul>
   25ba8:	0002      	movs	r2, r0
   25baa:	000b      	movs	r3, r1
   25bac:	485f      	ldr	r0, [pc, #380]	; (25d2c <__ieee754_pow+0xa3c>)
   25bae:	4960      	ldr	r1, [pc, #384]	; (25d30 <__ieee754_pow+0xa40>)
   25bb0:	f002 fa2a 	bl	28008 <__aeabi_dsub>
   25bb4:	0022      	movs	r2, r4
   25bb6:	002b      	movs	r3, r5
   25bb8:	f001 ffa6 	bl	27b08 <__aeabi_dmul>
   25bbc:	0002      	movs	r2, r0
   25bbe:	000b      	movs	r3, r1
   25bc0:	2000      	movs	r0, #0
   25bc2:	495c      	ldr	r1, [pc, #368]	; (25d34 <__ieee754_pow+0xa44>)
   25bc4:	f002 fa20 	bl	28008 <__aeabi_dsub>
   25bc8:	0022      	movs	r2, r4
   25bca:	9004      	str	r0, [sp, #16]
   25bcc:	9105      	str	r1, [sp, #20]
   25bce:	002b      	movs	r3, r5
   25bd0:	0020      	movs	r0, r4
   25bd2:	0029      	movs	r1, r5
   25bd4:	f001 ff98 	bl	27b08 <__aeabi_dmul>
   25bd8:	0002      	movs	r2, r0
   25bda:	000b      	movs	r3, r1
   25bdc:	9804      	ldr	r0, [sp, #16]
   25bde:	9905      	ldr	r1, [sp, #20]
   25be0:	f001 ff92 	bl	27b08 <__aeabi_dmul>
   25be4:	4a54      	ldr	r2, [pc, #336]	; (25d38 <__ieee754_pow+0xa48>)
   25be6:	4b4d      	ldr	r3, [pc, #308]	; (25d1c <__ieee754_pow+0xa2c>)
   25be8:	f001 ff8e 	bl	27b08 <__aeabi_dmul>
   25bec:	0002      	movs	r2, r0
   25bee:	000b      	movs	r3, r1
   25bf0:	9802      	ldr	r0, [sp, #8]
   25bf2:	9903      	ldr	r1, [sp, #12]
   25bf4:	f002 fa08 	bl	28008 <__aeabi_dsub>
   25bf8:	0002      	movs	r2, r0
   25bfa:	000b      	movs	r3, r1
   25bfc:	0004      	movs	r4, r0
   25bfe:	000d      	movs	r5, r1
   25c00:	0030      	movs	r0, r6
   25c02:	0039      	movs	r1, r7
   25c04:	f001 f83c 	bl	26c80 <__aeabi_dadd>
   25c08:	2000      	movs	r0, #0
   25c0a:	0032      	movs	r2, r6
   25c0c:	003b      	movs	r3, r7
   25c0e:	9002      	str	r0, [sp, #8]
   25c10:	9103      	str	r1, [sp, #12]
   25c12:	f002 f9f9 	bl	28008 <__aeabi_dsub>
   25c16:	0002      	movs	r2, r0
   25c18:	000b      	movs	r3, r1
   25c1a:	0020      	movs	r0, r4
   25c1c:	0029      	movs	r1, r5
   25c1e:	f002 f9f3 	bl	28008 <__aeabi_dsub>
   25c22:	9004      	str	r0, [sp, #16]
   25c24:	9105      	str	r1, [sp, #20]
   25c26:	e5d9      	b.n	257dc <__ieee754_pow+0x4ec>
   25c28:	4a44      	ldr	r2, [pc, #272]	; (25d3c <__ieee754_pow+0xa4c>)
   25c2a:	4b45      	ldr	r3, [pc, #276]	; (25d40 <__ieee754_pow+0xa50>)
   25c2c:	9806      	ldr	r0, [sp, #24]
   25c2e:	9907      	ldr	r1, [sp, #28]
   25c30:	f001 ff6a 	bl	27b08 <__aeabi_dmul>
   25c34:	4a41      	ldr	r2, [pc, #260]	; (25d3c <__ieee754_pow+0xa4c>)
   25c36:	4b42      	ldr	r3, [pc, #264]	; (25d40 <__ieee754_pow+0xa50>)
   25c38:	f001 ff66 	bl	27b08 <__aeabi_dmul>
   25c3c:	f7ff fba0 	bl	25380 <__ieee754_pow+0x90>
   25c40:	2a00      	cmp	r2, #0
   25c42:	d001      	beq.n	25c48 <__ieee754_pow+0x958>
   25c44:	f7ff fba9 	bl	2539a <__ieee754_pow+0xaa>
   25c48:	3214      	adds	r2, #20
   25c4a:	1ad3      	subs	r3, r2, r3
   25c4c:	002a      	movs	r2, r5
   25c4e:	411a      	asrs	r2, r3
   25c50:	0011      	movs	r1, r2
   25c52:	4099      	lsls	r1, r3
   25c54:	428d      	cmp	r5, r1
   25c56:	d001      	beq.n	25c5c <__ieee754_pow+0x96c>
   25c58:	f7ff fb76 	bl	25348 <__ieee754_pow+0x58>
   25c5c:	2301      	movs	r3, #1
   25c5e:	401a      	ands	r2, r3
   25c60:	18db      	adds	r3, r3, r3
   25c62:	1a9b      	subs	r3, r3, r2
   25c64:	469b      	mov	fp, r3
   25c66:	f7ff fb6f 	bl	25348 <__ieee754_pow+0x58>
   25c6a:	2200      	movs	r2, #0
   25c6c:	4b31      	ldr	r3, [pc, #196]	; (25d34 <__ieee754_pow+0xa44>)
   25c6e:	4690      	mov	r8, r2
   25c70:	4691      	mov	r9, r2
   25c72:	459a      	cmp	sl, r3
   25c74:	dc00      	bgt.n	25c78 <__ieee754_pow+0x988>
   25c76:	e67b      	b.n	25970 <__ieee754_pow+0x680>
   25c78:	e645      	b.n	25906 <__ieee754_pow+0x616>
   25c7a:	0002      	movs	r2, r0
   25c7c:	000b      	movs	r3, r1
   25c7e:	f002 f9c3 	bl	28008 <__aeabi_dsub>
   25c82:	0002      	movs	r2, r0
   25c84:	000b      	movs	r3, r1
   25c86:	f001 fb0b 	bl	272a0 <__aeabi_ddiv>
   25c8a:	f7ff fb79 	bl	25380 <__ieee754_pow+0x90>
   25c8e:	2380      	movs	r3, #128	; 0x80
   25c90:	4c2c      	ldr	r4, [pc, #176]	; (25d44 <__ieee754_pow+0xa54>)
   25c92:	05db      	lsls	r3, r3, #23
   25c94:	9308      	str	r3, [sp, #32]
   25c96:	9409      	str	r4, [sp, #36]	; 0x24
   25c98:	4b2b      	ldr	r3, [pc, #172]	; (25d48 <__ieee754_pow+0xa58>)
   25c9a:	4c2c      	ldr	r4, [pc, #176]	; (25d4c <__ieee754_pow+0xa5c>)
   25c9c:	2200      	movs	r2, #0
   25c9e:	930c      	str	r3, [sp, #48]	; 0x30
   25ca0:	940d      	str	r4, [sp, #52]	; 0x34
   25ca2:	2480      	movs	r4, #128	; 0x80
   25ca4:	4b2a      	ldr	r3, [pc, #168]	; (25d50 <__ieee754_pow+0xa60>)
   25ca6:	02e4      	lsls	r4, r4, #11
   25ca8:	9206      	str	r2, [sp, #24]
   25caa:	9307      	str	r3, [sp, #28]
   25cac:	e449      	b.n	25542 <__ieee754_pow+0x252>
   25cae:	464b      	mov	r3, r9
   25cb0:	425b      	negs	r3, r3
   25cb2:	4699      	mov	r9, r3
   25cb4:	e64a      	b.n	2594c <__ieee754_pow+0x65c>
   25cb6:	46c0      	nop			; (mov r8, r8)
   25cb8:	fffffc02 	.word	0xfffffc02
   25cbc:	fffffc01 	.word	0xfffffc01
   25cc0:	000fffff 	.word	0x000fffff
   25cc4:	3fe62e43 	.word	0x3fe62e43
   25cc8:	fefa39ef 	.word	0xfefa39ef
   25ccc:	3fe62e42 	.word	0x3fe62e42
   25cd0:	0ca86c39 	.word	0x0ca86c39
   25cd4:	be205c61 	.word	0xbe205c61
   25cd8:	72bea4d0 	.word	0x72bea4d0
   25cdc:	3e663769 	.word	0x3e663769
   25ce0:	c5d26bf1 	.word	0xc5d26bf1
   25ce4:	3ebbbd41 	.word	0x3ebbbd41
   25ce8:	af25de2c 	.word	0xaf25de2c
   25cec:	3f11566a 	.word	0x3f11566a
   25cf0:	16bebd93 	.word	0x16bebd93
   25cf4:	3f66c16c 	.word	0x3f66c16c
   25cf8:	5555553e 	.word	0x5555553e
   25cfc:	3fc55555 	.word	0x3fc55555
   25d00:	3ff00000 	.word	0x3ff00000
   25d04:	4090cbff 	.word	0x4090cbff
   25d08:	3f6f3400 	.word	0x3f6f3400
   25d0c:	c2f8f359 	.word	0xc2f8f359
   25d10:	01a56e1f 	.word	0x01a56e1f
   25d14:	bff00000 	.word	0xbff00000
   25d18:	3feffffe 	.word	0x3feffffe
   25d1c:	3ff71547 	.word	0x3ff71547
   25d20:	f85ddf44 	.word	0xf85ddf44
   25d24:	3e54ae0b 	.word	0x3e54ae0b
   25d28:	3fd00000 	.word	0x3fd00000
   25d2c:	55555555 	.word	0x55555555
   25d30:	3fd55555 	.word	0x3fd55555
   25d34:	3fe00000 	.word	0x3fe00000
   25d38:	652b82fe 	.word	0x652b82fe
   25d3c:	8800759c 	.word	0x8800759c
   25d40:	7e37e43c 	.word	0x7e37e43c
   25d44:	3fe2b803 	.word	0x3fe2b803
   25d48:	43cfd006 	.word	0x43cfd006
   25d4c:	3e4cfdeb 	.word	0x3e4cfdeb
   25d50:	3ff80000 	.word	0x3ff80000
   25d54:	464a      	mov	r2, r9
   25d56:	f000 f999 	bl	2608c <scalbn>
   25d5a:	e6b2      	b.n	25ac2 <__ieee754_pow+0x7d2>

00025d5c <__ieee754_sqrt>:
   25d5c:	4b6c      	ldr	r3, [pc, #432]	; (25f10 <__ieee754_sqrt+0x1b4>)
   25d5e:	b5f0      	push	{r4, r5, r6, r7, lr}
   25d60:	000a      	movs	r2, r1
   25d62:	4646      	mov	r6, r8
   25d64:	000d      	movs	r5, r1
   25d66:	46d6      	mov	lr, sl
   25d68:	464f      	mov	r7, r9
   25d6a:	0019      	movs	r1, r3
   25d6c:	b5c0      	push	{r6, r7, lr}
   25d6e:	0004      	movs	r4, r0
   25d70:	0006      	movs	r6, r0
   25d72:	4029      	ands	r1, r5
   25d74:	4299      	cmp	r1, r3
   25d76:	d100      	bne.n	25d7a <__ieee754_sqrt+0x1e>
   25d78:	e0a7      	b.n	25eca <__ieee754_sqrt+0x16e>
   25d7a:	2d00      	cmp	r5, #0
   25d7c:	dc00      	bgt.n	25d80 <__ieee754_sqrt+0x24>
   25d7e:	e081      	b.n	25e84 <__ieee754_sqrt+0x128>
   25d80:	152f      	asrs	r7, r5, #20
   25d82:	d100      	bne.n	25d86 <__ieee754_sqrt+0x2a>
   25d84:	e08e      	b.n	25ea4 <__ieee754_sqrt+0x148>
   25d86:	4b63      	ldr	r3, [pc, #396]	; (25f14 <__ieee754_sqrt+0x1b8>)
   25d88:	0312      	lsls	r2, r2, #12
   25d8a:	469c      	mov	ip, r3
   25d8c:	2380      	movs	r3, #128	; 0x80
   25d8e:	0b12      	lsrs	r2, r2, #12
   25d90:	035b      	lsls	r3, r3, #13
   25d92:	4467      	add	r7, ip
   25d94:	431a      	orrs	r2, r3
   25d96:	07fb      	lsls	r3, r7, #31
   25d98:	d468      	bmi.n	25e6c <__ieee754_sqrt+0x110>
   25d9a:	107b      	asrs	r3, r7, #1
   25d9c:	469c      	mov	ip, r3
   25d9e:	0fe3      	lsrs	r3, r4, #31
   25da0:	189b      	adds	r3, r3, r2
   25da2:	189b      	adds	r3, r3, r2
   25da4:	2280      	movs	r2, #128	; 0x80
   25da6:	2116      	movs	r1, #22
   25da8:	2600      	movs	r6, #0
   25daa:	2500      	movs	r5, #0
   25dac:	0064      	lsls	r4, r4, #1
   25dae:	0392      	lsls	r2, r2, #14
   25db0:	18a8      	adds	r0, r5, r2
   25db2:	4298      	cmp	r0, r3
   25db4:	dc02      	bgt.n	25dbc <__ieee754_sqrt+0x60>
   25db6:	1885      	adds	r5, r0, r2
   25db8:	1a1b      	subs	r3, r3, r0
   25dba:	18b6      	adds	r6, r6, r2
   25dbc:	0fe0      	lsrs	r0, r4, #31
   25dbe:	005b      	lsls	r3, r3, #1
   25dc0:	3901      	subs	r1, #1
   25dc2:	181b      	adds	r3, r3, r0
   25dc4:	0064      	lsls	r4, r4, #1
   25dc6:	0852      	lsrs	r2, r2, #1
   25dc8:	2900      	cmp	r1, #0
   25dca:	d1f1      	bne.n	25db0 <__ieee754_sqrt+0x54>
   25dcc:	2200      	movs	r2, #0
   25dce:	4692      	mov	sl, r2
   25dd0:	4690      	mov	r8, r2
   25dd2:	2280      	movs	r2, #128	; 0x80
   25dd4:	2020      	movs	r0, #32
   25dd6:	0612      	lsls	r2, r2, #24
   25dd8:	e009      	b.n	25dee <__ieee754_sqrt+0x92>
   25dda:	42ab      	cmp	r3, r5
   25ddc:	d038      	beq.n	25e50 <__ieee754_sqrt+0xf4>
   25dde:	0fe1      	lsrs	r1, r4, #31
   25de0:	18c9      	adds	r1, r1, r3
   25de2:	3801      	subs	r0, #1
   25de4:	18cb      	adds	r3, r1, r3
   25de6:	0064      	lsls	r4, r4, #1
   25de8:	0852      	lsrs	r2, r2, #1
   25dea:	2800      	cmp	r0, #0
   25dec:	d018      	beq.n	25e20 <__ieee754_sqrt+0xc4>
   25dee:	4641      	mov	r1, r8
   25df0:	1851      	adds	r1, r2, r1
   25df2:	42ab      	cmp	r3, r5
   25df4:	ddf1      	ble.n	25dda <__ieee754_sqrt+0x7e>
   25df6:	188f      	adds	r7, r1, r2
   25df8:	46b8      	mov	r8, r7
   25dfa:	46a9      	mov	r9, r5
   25dfc:	2900      	cmp	r1, #0
   25dfe:	db30      	blt.n	25e62 <__ieee754_sqrt+0x106>
   25e00:	1b5b      	subs	r3, r3, r5
   25e02:	428c      	cmp	r4, r1
   25e04:	41ad      	sbcs	r5, r5
   25e06:	426d      	negs	r5, r5
   25e08:	1b5b      	subs	r3, r3, r5
   25e0a:	1a64      	subs	r4, r4, r1
   25e0c:	0fe1      	lsrs	r1, r4, #31
   25e0e:	18c9      	adds	r1, r1, r3
   25e10:	3801      	subs	r0, #1
   25e12:	4492      	add	sl, r2
   25e14:	464d      	mov	r5, r9
   25e16:	18cb      	adds	r3, r1, r3
   25e18:	0064      	lsls	r4, r4, #1
   25e1a:	0852      	lsrs	r2, r2, #1
   25e1c:	2800      	cmp	r0, #0
   25e1e:	d1e6      	bne.n	25dee <__ieee754_sqrt+0x92>
   25e20:	4323      	orrs	r3, r4
   25e22:	d128      	bne.n	25e76 <__ieee754_sqrt+0x11a>
   25e24:	4653      	mov	r3, sl
   25e26:	085b      	lsrs	r3, r3, #1
   25e28:	493b      	ldr	r1, [pc, #236]	; (25f18 <__ieee754_sqrt+0x1bc>)
   25e2a:	1072      	asrs	r2, r6, #1
   25e2c:	4688      	mov	r8, r1
   25e2e:	4442      	add	r2, r8
   25e30:	07f1      	lsls	r1, r6, #31
   25e32:	d502      	bpl.n	25e3a <__ieee754_sqrt+0xde>
   25e34:	2180      	movs	r1, #128	; 0x80
   25e36:	0609      	lsls	r1, r1, #24
   25e38:	430b      	orrs	r3, r1
   25e3a:	4661      	mov	r1, ip
   25e3c:	001e      	movs	r6, r3
   25e3e:	050f      	lsls	r7, r1, #20
   25e40:	18bd      	adds	r5, r7, r2
   25e42:	0030      	movs	r0, r6
   25e44:	0029      	movs	r1, r5
   25e46:	bc1c      	pop	{r2, r3, r4}
   25e48:	4690      	mov	r8, r2
   25e4a:	4699      	mov	r9, r3
   25e4c:	46a2      	mov	sl, r4
   25e4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   25e50:	42a1      	cmp	r1, r4
   25e52:	d8c4      	bhi.n	25dde <__ieee754_sqrt+0x82>
   25e54:	188f      	adds	r7, r1, r2
   25e56:	46b8      	mov	r8, r7
   25e58:	2900      	cmp	r1, #0
   25e5a:	db42      	blt.n	25ee2 <__ieee754_sqrt+0x186>
   25e5c:	4699      	mov	r9, r3
   25e5e:	2300      	movs	r3, #0
   25e60:	e7d3      	b.n	25e0a <__ieee754_sqrt+0xae>
   25e62:	2f00      	cmp	r7, #0
   25e64:	db2f      	blt.n	25ec6 <__ieee754_sqrt+0x16a>
   25e66:	1c6f      	adds	r7, r5, #1
   25e68:	46b9      	mov	r9, r7
   25e6a:	e7c9      	b.n	25e00 <__ieee754_sqrt+0xa4>
   25e6c:	0fe1      	lsrs	r1, r4, #31
   25e6e:	0052      	lsls	r2, r2, #1
   25e70:	188a      	adds	r2, r1, r2
   25e72:	0064      	lsls	r4, r4, #1
   25e74:	e791      	b.n	25d9a <__ieee754_sqrt+0x3e>
   25e76:	4653      	mov	r3, sl
   25e78:	3301      	adds	r3, #1
   25e7a:	d035      	beq.n	25ee8 <__ieee754_sqrt+0x18c>
   25e7c:	4653      	mov	r3, sl
   25e7e:	3301      	adds	r3, #1
   25e80:	085b      	lsrs	r3, r3, #1
   25e82:	e7d1      	b.n	25e28 <__ieee754_sqrt+0xcc>
   25e84:	006b      	lsls	r3, r5, #1
   25e86:	085b      	lsrs	r3, r3, #1
   25e88:	4303      	orrs	r3, r0
   25e8a:	d0da      	beq.n	25e42 <__ieee754_sqrt+0xe6>
   25e8c:	2700      	movs	r7, #0
   25e8e:	2d00      	cmp	r5, #0
   25e90:	d132      	bne.n	25ef8 <__ieee754_sqrt+0x19c>
   25e92:	0ae2      	lsrs	r2, r4, #11
   25e94:	3f15      	subs	r7, #21
   25e96:	0564      	lsls	r4, r4, #21
   25e98:	2a00      	cmp	r2, #0
   25e9a:	d0fa      	beq.n	25e92 <__ieee754_sqrt+0x136>
   25e9c:	2380      	movs	r3, #128	; 0x80
   25e9e:	035b      	lsls	r3, r3, #13
   25ea0:	421a      	tst	r2, r3
   25ea2:	d124      	bne.n	25eee <__ieee754_sqrt+0x192>
   25ea4:	2080      	movs	r0, #128	; 0x80
   25ea6:	2300      	movs	r3, #0
   25ea8:	0340      	lsls	r0, r0, #13
   25eaa:	e000      	b.n	25eae <__ieee754_sqrt+0x152>
   25eac:	000b      	movs	r3, r1
   25eae:	0052      	lsls	r2, r2, #1
   25eb0:	1c59      	adds	r1, r3, #1
   25eb2:	4202      	tst	r2, r0
   25eb4:	d0fa      	beq.n	25eac <__ieee754_sqrt+0x150>
   25eb6:	2020      	movs	r0, #32
   25eb8:	1a40      	subs	r0, r0, r1
   25eba:	1aff      	subs	r7, r7, r3
   25ebc:	0023      	movs	r3, r4
   25ebe:	40c3      	lsrs	r3, r0
   25ec0:	408c      	lsls	r4, r1
   25ec2:	431a      	orrs	r2, r3
   25ec4:	e75f      	b.n	25d86 <__ieee754_sqrt+0x2a>
   25ec6:	46a9      	mov	r9, r5
   25ec8:	e79a      	b.n	25e00 <__ieee754_sqrt+0xa4>
   25eca:	002b      	movs	r3, r5
   25ecc:	0002      	movs	r2, r0
   25ece:	0029      	movs	r1, r5
   25ed0:	f001 fe1a 	bl	27b08 <__aeabi_dmul>
   25ed4:	0032      	movs	r2, r6
   25ed6:	002b      	movs	r3, r5
   25ed8:	f000 fed2 	bl	26c80 <__aeabi_dadd>
   25edc:	0006      	movs	r6, r0
   25ede:	000d      	movs	r5, r1
   25ee0:	e7af      	b.n	25e42 <__ieee754_sqrt+0xe6>
   25ee2:	2f00      	cmp	r7, #0
   25ee4:	dabf      	bge.n	25e66 <__ieee754_sqrt+0x10a>
   25ee6:	e7b9      	b.n	25e5c <__ieee754_sqrt+0x100>
   25ee8:	3601      	adds	r6, #1
   25eea:	2300      	movs	r3, #0
   25eec:	e79c      	b.n	25e28 <__ieee754_sqrt+0xcc>
   25eee:	2301      	movs	r3, #1
   25ef0:	2100      	movs	r1, #0
   25ef2:	2020      	movs	r0, #32
   25ef4:	425b      	negs	r3, r3
   25ef6:	e7e0      	b.n	25eba <__ieee754_sqrt+0x15e>
   25ef8:	002b      	movs	r3, r5
   25efa:	0002      	movs	r2, r0
   25efc:	0029      	movs	r1, r5
   25efe:	f002 f883 	bl	28008 <__aeabi_dsub>
   25f02:	0002      	movs	r2, r0
   25f04:	000b      	movs	r3, r1
   25f06:	f001 f9cb 	bl	272a0 <__aeabi_ddiv>
   25f0a:	0006      	movs	r6, r0
   25f0c:	000d      	movs	r5, r1
   25f0e:	e798      	b.n	25e42 <__ieee754_sqrt+0xe6>
   25f10:	7ff00000 	.word	0x7ff00000
   25f14:	fffffc01 	.word	0xfffffc01
   25f18:	3fe00000 	.word	0x3fe00000

00025f1c <fabs>:
   25f1c:	0049      	lsls	r1, r1, #1
   25f1e:	084b      	lsrs	r3, r1, #1
   25f20:	0019      	movs	r1, r3
   25f22:	4770      	bx	lr

00025f24 <finite>:
   25f24:	4b03      	ldr	r3, [pc, #12]	; (25f34 <finite+0x10>)
   25f26:	0048      	lsls	r0, r1, #1
   25f28:	469c      	mov	ip, r3
   25f2a:	0840      	lsrs	r0, r0, #1
   25f2c:	4460      	add	r0, ip
   25f2e:	0fc0      	lsrs	r0, r0, #31
   25f30:	4770      	bx	lr
   25f32:	46c0      	nop			; (mov r8, r8)
   25f34:	80100000 	.word	0x80100000

00025f38 <matherr>:
   25f38:	2000      	movs	r0, #0
   25f3a:	4770      	bx	lr

00025f3c <nan>:
   25f3c:	2000      	movs	r0, #0
   25f3e:	4901      	ldr	r1, [pc, #4]	; (25f44 <nan+0x8>)
   25f40:	4770      	bx	lr
   25f42:	46c0      	nop			; (mov r8, r8)
   25f44:	7ff80000 	.word	0x7ff80000

00025f48 <rint>:
   25f48:	b5f0      	push	{r4, r5, r6, r7, lr}
   25f4a:	46c6      	mov	lr, r8
   25f4c:	b500      	push	{lr}
   25f4e:	0fcb      	lsrs	r3, r1, #31
   25f50:	4698      	mov	r8, r3
   25f52:	4c4a      	ldr	r4, [pc, #296]	; (2607c <rint+0x134>)
   25f54:	004b      	lsls	r3, r1, #1
   25f56:	0d5b      	lsrs	r3, r3, #21
   25f58:	191e      	adds	r6, r3, r4
   25f5a:	b082      	sub	sp, #8
   25f5c:	0007      	movs	r7, r0
   25f5e:	000a      	movs	r2, r1
   25f60:	2e13      	cmp	r6, #19
   25f62:	dc35      	bgt.n	25fd0 <rint+0x88>
   25f64:	2e00      	cmp	r6, #0
   25f66:	db57      	blt.n	26018 <rint+0xd0>
   25f68:	4b45      	ldr	r3, [pc, #276]	; (26080 <rint+0x138>)
   25f6a:	0004      	movs	r4, r0
   25f6c:	4133      	asrs	r3, r6
   25f6e:	001f      	movs	r7, r3
   25f70:	400f      	ands	r7, r1
   25f72:	4307      	orrs	r7, r0
   25f74:	000d      	movs	r5, r1
   25f76:	2f00      	cmp	r7, #0
   25f78:	d024      	beq.n	25fc4 <rint+0x7c>
   25f7a:	085b      	lsrs	r3, r3, #1
   25f7c:	001c      	movs	r4, r3
   25f7e:	400c      	ands	r4, r1
   25f80:	4320      	orrs	r0, r4
   25f82:	2700      	movs	r7, #0
   25f84:	2800      	cmp	r0, #0
   25f86:	d007      	beq.n	25f98 <rint+0x50>
   25f88:	2e13      	cmp	r6, #19
   25f8a:	d100      	bne.n	25f8e <rint+0x46>
   25f8c:	e073      	b.n	26076 <rint+0x12e>
   25f8e:	2280      	movs	r2, #128	; 0x80
   25f90:	02d2      	lsls	r2, r2, #11
   25f92:	4132      	asrs	r2, r6
   25f94:	4399      	bics	r1, r3
   25f96:	430a      	orrs	r2, r1
   25f98:	4643      	mov	r3, r8
   25f9a:	00de      	lsls	r6, r3, #3
   25f9c:	4b39      	ldr	r3, [pc, #228]	; (26084 <rint+0x13c>)
   25f9e:	0011      	movs	r1, r2
   25fa0:	199e      	adds	r6, r3, r6
   25fa2:	6834      	ldr	r4, [r6, #0]
   25fa4:	6875      	ldr	r5, [r6, #4]
   25fa6:	0038      	movs	r0, r7
   25fa8:	0022      	movs	r2, r4
   25faa:	002b      	movs	r3, r5
   25fac:	f000 fe68 	bl	26c80 <__aeabi_dadd>
   25fb0:	9000      	str	r0, [sp, #0]
   25fb2:	9101      	str	r1, [sp, #4]
   25fb4:	9800      	ldr	r0, [sp, #0]
   25fb6:	9901      	ldr	r1, [sp, #4]
   25fb8:	0022      	movs	r2, r4
   25fba:	002b      	movs	r3, r5
   25fbc:	f002 f824 	bl	28008 <__aeabi_dsub>
   25fc0:	0004      	movs	r4, r0
   25fc2:	000d      	movs	r5, r1
   25fc4:	0020      	movs	r0, r4
   25fc6:	0029      	movs	r1, r5
   25fc8:	b002      	add	sp, #8
   25fca:	bc04      	pop	{r2}
   25fcc:	4690      	mov	r8, r2
   25fce:	bdf0      	pop	{r4, r5, r6, r7, pc}
   25fd0:	2e33      	cmp	r6, #51	; 0x33
   25fd2:	dd0c      	ble.n	25fee <rint+0xa6>
   25fd4:	2380      	movs	r3, #128	; 0x80
   25fd6:	0004      	movs	r4, r0
   25fd8:	00db      	lsls	r3, r3, #3
   25fda:	000d      	movs	r5, r1
   25fdc:	429e      	cmp	r6, r3
   25fde:	d1f1      	bne.n	25fc4 <rint+0x7c>
   25fe0:	0002      	movs	r2, r0
   25fe2:	000b      	movs	r3, r1
   25fe4:	f000 fe4c 	bl	26c80 <__aeabi_dadd>
   25fe8:	0004      	movs	r4, r0
   25fea:	000d      	movs	r5, r1
   25fec:	e7ea      	b.n	25fc4 <rint+0x7c>
   25fee:	4c26      	ldr	r4, [pc, #152]	; (26088 <rint+0x140>)
   25ff0:	000d      	movs	r5, r1
   25ff2:	46a4      	mov	ip, r4
   25ff4:	2401      	movs	r4, #1
   25ff6:	4463      	add	r3, ip
   25ff8:	4264      	negs	r4, r4
   25ffa:	40dc      	lsrs	r4, r3
   25ffc:	46a4      	mov	ip, r4
   25ffe:	4661      	mov	r1, ip
   26000:	0004      	movs	r4, r0
   26002:	4201      	tst	r1, r0
   26004:	d0de      	beq.n	25fc4 <rint+0x7c>
   26006:	0849      	lsrs	r1, r1, #1
   26008:	4201      	tst	r1, r0
   2600a:	d0c5      	beq.n	25f98 <rint+0x50>
   2600c:	2780      	movs	r7, #128	; 0x80
   2600e:	05ff      	lsls	r7, r7, #23
   26010:	411f      	asrs	r7, r3
   26012:	4388      	bics	r0, r1
   26014:	4307      	orrs	r7, r0
   26016:	e7bf      	b.n	25f98 <rint+0x50>
   26018:	004b      	lsls	r3, r1, #1
   2601a:	085b      	lsrs	r3, r3, #1
   2601c:	4303      	orrs	r3, r0
   2601e:	0004      	movs	r4, r0
   26020:	000d      	movs	r5, r1
   26022:	2b00      	cmp	r3, #0
   26024:	d0ce      	beq.n	25fc4 <rint+0x7c>
   26026:	030b      	lsls	r3, r1, #12
   26028:	0b1b      	lsrs	r3, r3, #12
   2602a:	4303      	orrs	r3, r0
   2602c:	001a      	movs	r2, r3
   2602e:	425b      	negs	r3, r3
   26030:	4313      	orrs	r3, r2
   26032:	2280      	movs	r2, #128	; 0x80
   26034:	0b1b      	lsrs	r3, r3, #12
   26036:	0312      	lsls	r2, r2, #12
   26038:	4013      	ands	r3, r2
   2603a:	0c4a      	lsrs	r2, r1, #17
   2603c:	0452      	lsls	r2, r2, #17
   2603e:	4313      	orrs	r3, r2
   26040:	0019      	movs	r1, r3
   26042:	4643      	mov	r3, r8
   26044:	00da      	lsls	r2, r3, #3
   26046:	4b0f      	ldr	r3, [pc, #60]	; (26084 <rint+0x13c>)
   26048:	189b      	adds	r3, r3, r2
   2604a:	681c      	ldr	r4, [r3, #0]
   2604c:	685d      	ldr	r5, [r3, #4]
   2604e:	0022      	movs	r2, r4
   26050:	002b      	movs	r3, r5
   26052:	f000 fe15 	bl	26c80 <__aeabi_dadd>
   26056:	9000      	str	r0, [sp, #0]
   26058:	9101      	str	r1, [sp, #4]
   2605a:	9800      	ldr	r0, [sp, #0]
   2605c:	9901      	ldr	r1, [sp, #4]
   2605e:	0022      	movs	r2, r4
   26060:	002b      	movs	r3, r5
   26062:	f001 ffd1 	bl	28008 <__aeabi_dsub>
   26066:	4642      	mov	r2, r8
   26068:	004b      	lsls	r3, r1, #1
   2606a:	085b      	lsrs	r3, r3, #1
   2606c:	07d6      	lsls	r6, r2, #31
   2606e:	4333      	orrs	r3, r6
   26070:	0004      	movs	r4, r0
   26072:	001d      	movs	r5, r3
   26074:	e7a6      	b.n	25fc4 <rint+0x7c>
   26076:	2780      	movs	r7, #128	; 0x80
   26078:	063f      	lsls	r7, r7, #24
   2607a:	e788      	b.n	25f8e <rint+0x46>
   2607c:	fffffc01 	.word	0xfffffc01
   26080:	000fffff 	.word	0x000fffff
   26084:	0002a930 	.word	0x0002a930
   26088:	fffffbed 	.word	0xfffffbed

0002608c <scalbn>:
   2608c:	004b      	lsls	r3, r1, #1
   2608e:	b570      	push	{r4, r5, r6, lr}
   26090:	0d5b      	lsrs	r3, r3, #21
   26092:	0014      	movs	r4, r2
   26094:	000a      	movs	r2, r1
   26096:	2b00      	cmp	r3, #0
   26098:	d11a      	bne.n	260d0 <scalbn+0x44>
   2609a:	004b      	lsls	r3, r1, #1
   2609c:	085b      	lsrs	r3, r3, #1
   2609e:	4303      	orrs	r3, r0
   260a0:	d015      	beq.n	260ce <scalbn+0x42>
   260a2:	2200      	movs	r2, #0
   260a4:	4b22      	ldr	r3, [pc, #136]	; (26130 <scalbn+0xa4>)
   260a6:	f001 fd2f 	bl	27b08 <__aeabi_dmul>
   260aa:	4b22      	ldr	r3, [pc, #136]	; (26134 <scalbn+0xa8>)
   260ac:	000a      	movs	r2, r1
   260ae:	429c      	cmp	r4, r3
   260b0:	db22      	blt.n	260f8 <scalbn+0x6c>
   260b2:	004b      	lsls	r3, r1, #1
   260b4:	0d5b      	lsrs	r3, r3, #21
   260b6:	3b36      	subs	r3, #54	; 0x36
   260b8:	4d1f      	ldr	r5, [pc, #124]	; (26138 <scalbn+0xac>)
   260ba:	18e3      	adds	r3, r4, r3
   260bc:	42ab      	cmp	r3, r5
   260be:	dc20      	bgt.n	26102 <scalbn+0x76>
   260c0:	2b00      	cmp	r3, #0
   260c2:	dd0d      	ble.n	260e0 <scalbn+0x54>
   260c4:	4c1d      	ldr	r4, [pc, #116]	; (2613c <scalbn+0xb0>)
   260c6:	051b      	lsls	r3, r3, #20
   260c8:	4022      	ands	r2, r4
   260ca:	431a      	orrs	r2, r3
   260cc:	0011      	movs	r1, r2
   260ce:	bd70      	pop	{r4, r5, r6, pc}
   260d0:	4d1b      	ldr	r5, [pc, #108]	; (26140 <scalbn+0xb4>)
   260d2:	42ab      	cmp	r3, r5
   260d4:	d1f0      	bne.n	260b8 <scalbn+0x2c>
   260d6:	0002      	movs	r2, r0
   260d8:	000b      	movs	r3, r1
   260da:	f000 fdd1 	bl	26c80 <__aeabi_dadd>
   260de:	e7f6      	b.n	260ce <scalbn+0x42>
   260e0:	001d      	movs	r5, r3
   260e2:	3535      	adds	r5, #53	; 0x35
   260e4:	da18      	bge.n	26118 <scalbn+0x8c>
   260e6:	4b17      	ldr	r3, [pc, #92]	; (26144 <scalbn+0xb8>)
   260e8:	0002      	movs	r2, r0
   260ea:	429c      	cmp	r4, r3
   260ec:	dc0a      	bgt.n	26104 <scalbn+0x78>
   260ee:	000b      	movs	r3, r1
   260f0:	4815      	ldr	r0, [pc, #84]	; (26148 <scalbn+0xbc>)
   260f2:	4916      	ldr	r1, [pc, #88]	; (2614c <scalbn+0xc0>)
   260f4:	f000 f832 	bl	2615c <copysign>
   260f8:	4a13      	ldr	r2, [pc, #76]	; (26148 <scalbn+0xbc>)
   260fa:	4b14      	ldr	r3, [pc, #80]	; (2614c <scalbn+0xc0>)
   260fc:	f001 fd04 	bl	27b08 <__aeabi_dmul>
   26100:	e7e5      	b.n	260ce <scalbn+0x42>
   26102:	0002      	movs	r2, r0
   26104:	000b      	movs	r3, r1
   26106:	4812      	ldr	r0, [pc, #72]	; (26150 <scalbn+0xc4>)
   26108:	4912      	ldr	r1, [pc, #72]	; (26154 <scalbn+0xc8>)
   2610a:	f000 f827 	bl	2615c <copysign>
   2610e:	4a10      	ldr	r2, [pc, #64]	; (26150 <scalbn+0xc4>)
   26110:	4b10      	ldr	r3, [pc, #64]	; (26154 <scalbn+0xc8>)
   26112:	f001 fcf9 	bl	27b08 <__aeabi_dmul>
   26116:	e7da      	b.n	260ce <scalbn+0x42>
   26118:	4c08      	ldr	r4, [pc, #32]	; (2613c <scalbn+0xb0>)
   2611a:	3336      	adds	r3, #54	; 0x36
   2611c:	4022      	ands	r2, r4
   2611e:	051b      	lsls	r3, r3, #20
   26120:	4313      	orrs	r3, r2
   26122:	0019      	movs	r1, r3
   26124:	2200      	movs	r2, #0
   26126:	4b0c      	ldr	r3, [pc, #48]	; (26158 <scalbn+0xcc>)
   26128:	f001 fcee 	bl	27b08 <__aeabi_dmul>
   2612c:	e7cf      	b.n	260ce <scalbn+0x42>
   2612e:	46c0      	nop			; (mov r8, r8)
   26130:	43500000 	.word	0x43500000
   26134:	ffff3cb0 	.word	0xffff3cb0
   26138:	000007fe 	.word	0x000007fe
   2613c:	800fffff 	.word	0x800fffff
   26140:	000007ff 	.word	0x000007ff
   26144:	0000c350 	.word	0x0000c350
   26148:	c2f8f359 	.word	0xc2f8f359
   2614c:	01a56e1f 	.word	0x01a56e1f
   26150:	8800759c 	.word	0x8800759c
   26154:	7e37e43c 	.word	0x7e37e43c
   26158:	3c900000 	.word	0x3c900000

0002615c <copysign>:
   2615c:	b530      	push	{r4, r5, lr}
   2615e:	004a      	lsls	r2, r1, #1
   26160:	0fdb      	lsrs	r3, r3, #31
   26162:	07db      	lsls	r3, r3, #31
   26164:	0852      	lsrs	r2, r2, #1
   26166:	431a      	orrs	r2, r3
   26168:	0011      	movs	r1, r2
   2616a:	bd30      	pop	{r4, r5, pc}

0002616c <__udivsi3>:
   2616c:	2200      	movs	r2, #0
   2616e:	0843      	lsrs	r3, r0, #1
   26170:	428b      	cmp	r3, r1
   26172:	d374      	bcc.n	2625e <__udivsi3+0xf2>
   26174:	0903      	lsrs	r3, r0, #4
   26176:	428b      	cmp	r3, r1
   26178:	d35f      	bcc.n	2623a <__udivsi3+0xce>
   2617a:	0a03      	lsrs	r3, r0, #8
   2617c:	428b      	cmp	r3, r1
   2617e:	d344      	bcc.n	2620a <__udivsi3+0x9e>
   26180:	0b03      	lsrs	r3, r0, #12
   26182:	428b      	cmp	r3, r1
   26184:	d328      	bcc.n	261d8 <__udivsi3+0x6c>
   26186:	0c03      	lsrs	r3, r0, #16
   26188:	428b      	cmp	r3, r1
   2618a:	d30d      	bcc.n	261a8 <__udivsi3+0x3c>
   2618c:	22ff      	movs	r2, #255	; 0xff
   2618e:	0209      	lsls	r1, r1, #8
   26190:	ba12      	rev	r2, r2
   26192:	0c03      	lsrs	r3, r0, #16
   26194:	428b      	cmp	r3, r1
   26196:	d302      	bcc.n	2619e <__udivsi3+0x32>
   26198:	1212      	asrs	r2, r2, #8
   2619a:	0209      	lsls	r1, r1, #8
   2619c:	d065      	beq.n	2626a <__udivsi3+0xfe>
   2619e:	0b03      	lsrs	r3, r0, #12
   261a0:	428b      	cmp	r3, r1
   261a2:	d319      	bcc.n	261d8 <__udivsi3+0x6c>
   261a4:	e000      	b.n	261a8 <__udivsi3+0x3c>
   261a6:	0a09      	lsrs	r1, r1, #8
   261a8:	0bc3      	lsrs	r3, r0, #15
   261aa:	428b      	cmp	r3, r1
   261ac:	d301      	bcc.n	261b2 <__udivsi3+0x46>
   261ae:	03cb      	lsls	r3, r1, #15
   261b0:	1ac0      	subs	r0, r0, r3
   261b2:	4152      	adcs	r2, r2
   261b4:	0b83      	lsrs	r3, r0, #14
   261b6:	428b      	cmp	r3, r1
   261b8:	d301      	bcc.n	261be <__udivsi3+0x52>
   261ba:	038b      	lsls	r3, r1, #14
   261bc:	1ac0      	subs	r0, r0, r3
   261be:	4152      	adcs	r2, r2
   261c0:	0b43      	lsrs	r3, r0, #13
   261c2:	428b      	cmp	r3, r1
   261c4:	d301      	bcc.n	261ca <__udivsi3+0x5e>
   261c6:	034b      	lsls	r3, r1, #13
   261c8:	1ac0      	subs	r0, r0, r3
   261ca:	4152      	adcs	r2, r2
   261cc:	0b03      	lsrs	r3, r0, #12
   261ce:	428b      	cmp	r3, r1
   261d0:	d301      	bcc.n	261d6 <__udivsi3+0x6a>
   261d2:	030b      	lsls	r3, r1, #12
   261d4:	1ac0      	subs	r0, r0, r3
   261d6:	4152      	adcs	r2, r2
   261d8:	0ac3      	lsrs	r3, r0, #11
   261da:	428b      	cmp	r3, r1
   261dc:	d301      	bcc.n	261e2 <__udivsi3+0x76>
   261de:	02cb      	lsls	r3, r1, #11
   261e0:	1ac0      	subs	r0, r0, r3
   261e2:	4152      	adcs	r2, r2
   261e4:	0a83      	lsrs	r3, r0, #10
   261e6:	428b      	cmp	r3, r1
   261e8:	d301      	bcc.n	261ee <__udivsi3+0x82>
   261ea:	028b      	lsls	r3, r1, #10
   261ec:	1ac0      	subs	r0, r0, r3
   261ee:	4152      	adcs	r2, r2
   261f0:	0a43      	lsrs	r3, r0, #9
   261f2:	428b      	cmp	r3, r1
   261f4:	d301      	bcc.n	261fa <__udivsi3+0x8e>
   261f6:	024b      	lsls	r3, r1, #9
   261f8:	1ac0      	subs	r0, r0, r3
   261fa:	4152      	adcs	r2, r2
   261fc:	0a03      	lsrs	r3, r0, #8
   261fe:	428b      	cmp	r3, r1
   26200:	d301      	bcc.n	26206 <__udivsi3+0x9a>
   26202:	020b      	lsls	r3, r1, #8
   26204:	1ac0      	subs	r0, r0, r3
   26206:	4152      	adcs	r2, r2
   26208:	d2cd      	bcs.n	261a6 <__udivsi3+0x3a>
   2620a:	09c3      	lsrs	r3, r0, #7
   2620c:	428b      	cmp	r3, r1
   2620e:	d301      	bcc.n	26214 <__udivsi3+0xa8>
   26210:	01cb      	lsls	r3, r1, #7
   26212:	1ac0      	subs	r0, r0, r3
   26214:	4152      	adcs	r2, r2
   26216:	0983      	lsrs	r3, r0, #6
   26218:	428b      	cmp	r3, r1
   2621a:	d301      	bcc.n	26220 <__udivsi3+0xb4>
   2621c:	018b      	lsls	r3, r1, #6
   2621e:	1ac0      	subs	r0, r0, r3
   26220:	4152      	adcs	r2, r2
   26222:	0943      	lsrs	r3, r0, #5
   26224:	428b      	cmp	r3, r1
   26226:	d301      	bcc.n	2622c <__udivsi3+0xc0>
   26228:	014b      	lsls	r3, r1, #5
   2622a:	1ac0      	subs	r0, r0, r3
   2622c:	4152      	adcs	r2, r2
   2622e:	0903      	lsrs	r3, r0, #4
   26230:	428b      	cmp	r3, r1
   26232:	d301      	bcc.n	26238 <__udivsi3+0xcc>
   26234:	010b      	lsls	r3, r1, #4
   26236:	1ac0      	subs	r0, r0, r3
   26238:	4152      	adcs	r2, r2
   2623a:	08c3      	lsrs	r3, r0, #3
   2623c:	428b      	cmp	r3, r1
   2623e:	d301      	bcc.n	26244 <__udivsi3+0xd8>
   26240:	00cb      	lsls	r3, r1, #3
   26242:	1ac0      	subs	r0, r0, r3
   26244:	4152      	adcs	r2, r2
   26246:	0883      	lsrs	r3, r0, #2
   26248:	428b      	cmp	r3, r1
   2624a:	d301      	bcc.n	26250 <__udivsi3+0xe4>
   2624c:	008b      	lsls	r3, r1, #2
   2624e:	1ac0      	subs	r0, r0, r3
   26250:	4152      	adcs	r2, r2
   26252:	0843      	lsrs	r3, r0, #1
   26254:	428b      	cmp	r3, r1
   26256:	d301      	bcc.n	2625c <__udivsi3+0xf0>
   26258:	004b      	lsls	r3, r1, #1
   2625a:	1ac0      	subs	r0, r0, r3
   2625c:	4152      	adcs	r2, r2
   2625e:	1a41      	subs	r1, r0, r1
   26260:	d200      	bcs.n	26264 <__udivsi3+0xf8>
   26262:	4601      	mov	r1, r0
   26264:	4152      	adcs	r2, r2
   26266:	4610      	mov	r0, r2
   26268:	4770      	bx	lr
   2626a:	e7ff      	b.n	2626c <__udivsi3+0x100>
   2626c:	b501      	push	{r0, lr}
   2626e:	2000      	movs	r0, #0
   26270:	f000 f8f0 	bl	26454 <__aeabi_idiv0>
   26274:	bd02      	pop	{r1, pc}
   26276:	46c0      	nop			; (mov r8, r8)

00026278 <__aeabi_uidivmod>:
   26278:	2900      	cmp	r1, #0
   2627a:	d0f7      	beq.n	2626c <__udivsi3+0x100>
   2627c:	e776      	b.n	2616c <__udivsi3>
   2627e:	4770      	bx	lr

00026280 <__divsi3>:
   26280:	4603      	mov	r3, r0
   26282:	430b      	orrs	r3, r1
   26284:	d47f      	bmi.n	26386 <__divsi3+0x106>
   26286:	2200      	movs	r2, #0
   26288:	0843      	lsrs	r3, r0, #1
   2628a:	428b      	cmp	r3, r1
   2628c:	d374      	bcc.n	26378 <__divsi3+0xf8>
   2628e:	0903      	lsrs	r3, r0, #4
   26290:	428b      	cmp	r3, r1
   26292:	d35f      	bcc.n	26354 <__divsi3+0xd4>
   26294:	0a03      	lsrs	r3, r0, #8
   26296:	428b      	cmp	r3, r1
   26298:	d344      	bcc.n	26324 <__divsi3+0xa4>
   2629a:	0b03      	lsrs	r3, r0, #12
   2629c:	428b      	cmp	r3, r1
   2629e:	d328      	bcc.n	262f2 <__divsi3+0x72>
   262a0:	0c03      	lsrs	r3, r0, #16
   262a2:	428b      	cmp	r3, r1
   262a4:	d30d      	bcc.n	262c2 <__divsi3+0x42>
   262a6:	22ff      	movs	r2, #255	; 0xff
   262a8:	0209      	lsls	r1, r1, #8
   262aa:	ba12      	rev	r2, r2
   262ac:	0c03      	lsrs	r3, r0, #16
   262ae:	428b      	cmp	r3, r1
   262b0:	d302      	bcc.n	262b8 <__divsi3+0x38>
   262b2:	1212      	asrs	r2, r2, #8
   262b4:	0209      	lsls	r1, r1, #8
   262b6:	d065      	beq.n	26384 <__divsi3+0x104>
   262b8:	0b03      	lsrs	r3, r0, #12
   262ba:	428b      	cmp	r3, r1
   262bc:	d319      	bcc.n	262f2 <__divsi3+0x72>
   262be:	e000      	b.n	262c2 <__divsi3+0x42>
   262c0:	0a09      	lsrs	r1, r1, #8
   262c2:	0bc3      	lsrs	r3, r0, #15
   262c4:	428b      	cmp	r3, r1
   262c6:	d301      	bcc.n	262cc <__divsi3+0x4c>
   262c8:	03cb      	lsls	r3, r1, #15
   262ca:	1ac0      	subs	r0, r0, r3
   262cc:	4152      	adcs	r2, r2
   262ce:	0b83      	lsrs	r3, r0, #14
   262d0:	428b      	cmp	r3, r1
   262d2:	d301      	bcc.n	262d8 <__divsi3+0x58>
   262d4:	038b      	lsls	r3, r1, #14
   262d6:	1ac0      	subs	r0, r0, r3
   262d8:	4152      	adcs	r2, r2
   262da:	0b43      	lsrs	r3, r0, #13
   262dc:	428b      	cmp	r3, r1
   262de:	d301      	bcc.n	262e4 <__divsi3+0x64>
   262e0:	034b      	lsls	r3, r1, #13
   262e2:	1ac0      	subs	r0, r0, r3
   262e4:	4152      	adcs	r2, r2
   262e6:	0b03      	lsrs	r3, r0, #12
   262e8:	428b      	cmp	r3, r1
   262ea:	d301      	bcc.n	262f0 <__divsi3+0x70>
   262ec:	030b      	lsls	r3, r1, #12
   262ee:	1ac0      	subs	r0, r0, r3
   262f0:	4152      	adcs	r2, r2
   262f2:	0ac3      	lsrs	r3, r0, #11
   262f4:	428b      	cmp	r3, r1
   262f6:	d301      	bcc.n	262fc <__divsi3+0x7c>
   262f8:	02cb      	lsls	r3, r1, #11
   262fa:	1ac0      	subs	r0, r0, r3
   262fc:	4152      	adcs	r2, r2
   262fe:	0a83      	lsrs	r3, r0, #10
   26300:	428b      	cmp	r3, r1
   26302:	d301      	bcc.n	26308 <__divsi3+0x88>
   26304:	028b      	lsls	r3, r1, #10
   26306:	1ac0      	subs	r0, r0, r3
   26308:	4152      	adcs	r2, r2
   2630a:	0a43      	lsrs	r3, r0, #9
   2630c:	428b      	cmp	r3, r1
   2630e:	d301      	bcc.n	26314 <__divsi3+0x94>
   26310:	024b      	lsls	r3, r1, #9
   26312:	1ac0      	subs	r0, r0, r3
   26314:	4152      	adcs	r2, r2
   26316:	0a03      	lsrs	r3, r0, #8
   26318:	428b      	cmp	r3, r1
   2631a:	d301      	bcc.n	26320 <__divsi3+0xa0>
   2631c:	020b      	lsls	r3, r1, #8
   2631e:	1ac0      	subs	r0, r0, r3
   26320:	4152      	adcs	r2, r2
   26322:	d2cd      	bcs.n	262c0 <__divsi3+0x40>
   26324:	09c3      	lsrs	r3, r0, #7
   26326:	428b      	cmp	r3, r1
   26328:	d301      	bcc.n	2632e <__divsi3+0xae>
   2632a:	01cb      	lsls	r3, r1, #7
   2632c:	1ac0      	subs	r0, r0, r3
   2632e:	4152      	adcs	r2, r2
   26330:	0983      	lsrs	r3, r0, #6
   26332:	428b      	cmp	r3, r1
   26334:	d301      	bcc.n	2633a <__divsi3+0xba>
   26336:	018b      	lsls	r3, r1, #6
   26338:	1ac0      	subs	r0, r0, r3
   2633a:	4152      	adcs	r2, r2
   2633c:	0943      	lsrs	r3, r0, #5
   2633e:	428b      	cmp	r3, r1
   26340:	d301      	bcc.n	26346 <__divsi3+0xc6>
   26342:	014b      	lsls	r3, r1, #5
   26344:	1ac0      	subs	r0, r0, r3
   26346:	4152      	adcs	r2, r2
   26348:	0903      	lsrs	r3, r0, #4
   2634a:	428b      	cmp	r3, r1
   2634c:	d301      	bcc.n	26352 <__divsi3+0xd2>
   2634e:	010b      	lsls	r3, r1, #4
   26350:	1ac0      	subs	r0, r0, r3
   26352:	4152      	adcs	r2, r2
   26354:	08c3      	lsrs	r3, r0, #3
   26356:	428b      	cmp	r3, r1
   26358:	d301      	bcc.n	2635e <__divsi3+0xde>
   2635a:	00cb      	lsls	r3, r1, #3
   2635c:	1ac0      	subs	r0, r0, r3
   2635e:	4152      	adcs	r2, r2
   26360:	0883      	lsrs	r3, r0, #2
   26362:	428b      	cmp	r3, r1
   26364:	d301      	bcc.n	2636a <__divsi3+0xea>
   26366:	008b      	lsls	r3, r1, #2
   26368:	1ac0      	subs	r0, r0, r3
   2636a:	4152      	adcs	r2, r2
   2636c:	0843      	lsrs	r3, r0, #1
   2636e:	428b      	cmp	r3, r1
   26370:	d301      	bcc.n	26376 <__divsi3+0xf6>
   26372:	004b      	lsls	r3, r1, #1
   26374:	1ac0      	subs	r0, r0, r3
   26376:	4152      	adcs	r2, r2
   26378:	1a41      	subs	r1, r0, r1
   2637a:	d200      	bcs.n	2637e <__divsi3+0xfe>
   2637c:	4601      	mov	r1, r0
   2637e:	4152      	adcs	r2, r2
   26380:	4610      	mov	r0, r2
   26382:	4770      	bx	lr
   26384:	e05d      	b.n	26442 <__divsi3+0x1c2>
   26386:	0fca      	lsrs	r2, r1, #31
   26388:	d000      	beq.n	2638c <__divsi3+0x10c>
   2638a:	4249      	negs	r1, r1
   2638c:	1003      	asrs	r3, r0, #32
   2638e:	d300      	bcc.n	26392 <__divsi3+0x112>
   26390:	4240      	negs	r0, r0
   26392:	4053      	eors	r3, r2
   26394:	2200      	movs	r2, #0
   26396:	469c      	mov	ip, r3
   26398:	0903      	lsrs	r3, r0, #4
   2639a:	428b      	cmp	r3, r1
   2639c:	d32d      	bcc.n	263fa <__divsi3+0x17a>
   2639e:	0a03      	lsrs	r3, r0, #8
   263a0:	428b      	cmp	r3, r1
   263a2:	d312      	bcc.n	263ca <__divsi3+0x14a>
   263a4:	22fc      	movs	r2, #252	; 0xfc
   263a6:	0189      	lsls	r1, r1, #6
   263a8:	ba12      	rev	r2, r2
   263aa:	0a03      	lsrs	r3, r0, #8
   263ac:	428b      	cmp	r3, r1
   263ae:	d30c      	bcc.n	263ca <__divsi3+0x14a>
   263b0:	0189      	lsls	r1, r1, #6
   263b2:	1192      	asrs	r2, r2, #6
   263b4:	428b      	cmp	r3, r1
   263b6:	d308      	bcc.n	263ca <__divsi3+0x14a>
   263b8:	0189      	lsls	r1, r1, #6
   263ba:	1192      	asrs	r2, r2, #6
   263bc:	428b      	cmp	r3, r1
   263be:	d304      	bcc.n	263ca <__divsi3+0x14a>
   263c0:	0189      	lsls	r1, r1, #6
   263c2:	d03a      	beq.n	2643a <__divsi3+0x1ba>
   263c4:	1192      	asrs	r2, r2, #6
   263c6:	e000      	b.n	263ca <__divsi3+0x14a>
   263c8:	0989      	lsrs	r1, r1, #6
   263ca:	09c3      	lsrs	r3, r0, #7
   263cc:	428b      	cmp	r3, r1
   263ce:	d301      	bcc.n	263d4 <__divsi3+0x154>
   263d0:	01cb      	lsls	r3, r1, #7
   263d2:	1ac0      	subs	r0, r0, r3
   263d4:	4152      	adcs	r2, r2
   263d6:	0983      	lsrs	r3, r0, #6
   263d8:	428b      	cmp	r3, r1
   263da:	d301      	bcc.n	263e0 <__divsi3+0x160>
   263dc:	018b      	lsls	r3, r1, #6
   263de:	1ac0      	subs	r0, r0, r3
   263e0:	4152      	adcs	r2, r2
   263e2:	0943      	lsrs	r3, r0, #5
   263e4:	428b      	cmp	r3, r1
   263e6:	d301      	bcc.n	263ec <__divsi3+0x16c>
   263e8:	014b      	lsls	r3, r1, #5
   263ea:	1ac0      	subs	r0, r0, r3
   263ec:	4152      	adcs	r2, r2
   263ee:	0903      	lsrs	r3, r0, #4
   263f0:	428b      	cmp	r3, r1
   263f2:	d301      	bcc.n	263f8 <__divsi3+0x178>
   263f4:	010b      	lsls	r3, r1, #4
   263f6:	1ac0      	subs	r0, r0, r3
   263f8:	4152      	adcs	r2, r2
   263fa:	08c3      	lsrs	r3, r0, #3
   263fc:	428b      	cmp	r3, r1
   263fe:	d301      	bcc.n	26404 <__divsi3+0x184>
   26400:	00cb      	lsls	r3, r1, #3
   26402:	1ac0      	subs	r0, r0, r3
   26404:	4152      	adcs	r2, r2
   26406:	0883      	lsrs	r3, r0, #2
   26408:	428b      	cmp	r3, r1
   2640a:	d301      	bcc.n	26410 <__divsi3+0x190>
   2640c:	008b      	lsls	r3, r1, #2
   2640e:	1ac0      	subs	r0, r0, r3
   26410:	4152      	adcs	r2, r2
   26412:	d2d9      	bcs.n	263c8 <__divsi3+0x148>
   26414:	0843      	lsrs	r3, r0, #1
   26416:	428b      	cmp	r3, r1
   26418:	d301      	bcc.n	2641e <__divsi3+0x19e>
   2641a:	004b      	lsls	r3, r1, #1
   2641c:	1ac0      	subs	r0, r0, r3
   2641e:	4152      	adcs	r2, r2
   26420:	1a41      	subs	r1, r0, r1
   26422:	d200      	bcs.n	26426 <__divsi3+0x1a6>
   26424:	4601      	mov	r1, r0
   26426:	4663      	mov	r3, ip
   26428:	4152      	adcs	r2, r2
   2642a:	105b      	asrs	r3, r3, #1
   2642c:	4610      	mov	r0, r2
   2642e:	d301      	bcc.n	26434 <__divsi3+0x1b4>
   26430:	4240      	negs	r0, r0
   26432:	2b00      	cmp	r3, #0
   26434:	d500      	bpl.n	26438 <__divsi3+0x1b8>
   26436:	4249      	negs	r1, r1
   26438:	4770      	bx	lr
   2643a:	4663      	mov	r3, ip
   2643c:	105b      	asrs	r3, r3, #1
   2643e:	d300      	bcc.n	26442 <__divsi3+0x1c2>
   26440:	4240      	negs	r0, r0
   26442:	b501      	push	{r0, lr}
   26444:	2000      	movs	r0, #0
   26446:	f000 f805 	bl	26454 <__aeabi_idiv0>
   2644a:	bd02      	pop	{r1, pc}

0002644c <__aeabi_idivmod>:
   2644c:	2900      	cmp	r1, #0
   2644e:	d0f8      	beq.n	26442 <__divsi3+0x1c2>
   26450:	e716      	b.n	26280 <__divsi3>
   26452:	4770      	bx	lr

00026454 <__aeabi_idiv0>:
   26454:	4770      	bx	lr
   26456:	46c0      	nop			; (mov r8, r8)

00026458 <__aeabi_cdrcmple>:
   26458:	4684      	mov	ip, r0
   2645a:	1c10      	adds	r0, r2, #0
   2645c:	4662      	mov	r2, ip
   2645e:	468c      	mov	ip, r1
   26460:	1c19      	adds	r1, r3, #0
   26462:	4663      	mov	r3, ip
   26464:	e000      	b.n	26468 <__aeabi_cdcmpeq>
   26466:	46c0      	nop			; (mov r8, r8)

00026468 <__aeabi_cdcmpeq>:
   26468:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   2646a:	f001 faeb 	bl	27a44 <__ledf2>
   2646e:	2800      	cmp	r0, #0
   26470:	d401      	bmi.n	26476 <__aeabi_cdcmpeq+0xe>
   26472:	2100      	movs	r1, #0
   26474:	42c8      	cmn	r0, r1
   26476:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00026478 <__aeabi_dcmpeq>:
   26478:	b510      	push	{r4, lr}
   2647a:	f001 fa45 	bl	27908 <__eqdf2>
   2647e:	4240      	negs	r0, r0
   26480:	3001      	adds	r0, #1
   26482:	bd10      	pop	{r4, pc}

00026484 <__aeabi_dcmplt>:
   26484:	b510      	push	{r4, lr}
   26486:	f001 fadd 	bl	27a44 <__ledf2>
   2648a:	2800      	cmp	r0, #0
   2648c:	db01      	blt.n	26492 <__aeabi_dcmplt+0xe>
   2648e:	2000      	movs	r0, #0
   26490:	bd10      	pop	{r4, pc}
   26492:	2001      	movs	r0, #1
   26494:	bd10      	pop	{r4, pc}
   26496:	46c0      	nop			; (mov r8, r8)

00026498 <__aeabi_dcmple>:
   26498:	b510      	push	{r4, lr}
   2649a:	f001 fad3 	bl	27a44 <__ledf2>
   2649e:	2800      	cmp	r0, #0
   264a0:	dd01      	ble.n	264a6 <__aeabi_dcmple+0xe>
   264a2:	2000      	movs	r0, #0
   264a4:	bd10      	pop	{r4, pc}
   264a6:	2001      	movs	r0, #1
   264a8:	bd10      	pop	{r4, pc}
   264aa:	46c0      	nop			; (mov r8, r8)

000264ac <__aeabi_dcmpgt>:
   264ac:	b510      	push	{r4, lr}
   264ae:	f001 fa65 	bl	2797c <__gedf2>
   264b2:	2800      	cmp	r0, #0
   264b4:	dc01      	bgt.n	264ba <__aeabi_dcmpgt+0xe>
   264b6:	2000      	movs	r0, #0
   264b8:	bd10      	pop	{r4, pc}
   264ba:	2001      	movs	r0, #1
   264bc:	bd10      	pop	{r4, pc}
   264be:	46c0      	nop			; (mov r8, r8)

000264c0 <__aeabi_dcmpge>:
   264c0:	b510      	push	{r4, lr}
   264c2:	f001 fa5b 	bl	2797c <__gedf2>
   264c6:	2800      	cmp	r0, #0
   264c8:	da01      	bge.n	264ce <__aeabi_dcmpge+0xe>
   264ca:	2000      	movs	r0, #0
   264cc:	bd10      	pop	{r4, pc}
   264ce:	2001      	movs	r0, #1
   264d0:	bd10      	pop	{r4, pc}
   264d2:	46c0      	nop			; (mov r8, r8)

000264d4 <__aeabi_uldivmod>:
   264d4:	2b00      	cmp	r3, #0
   264d6:	d111      	bne.n	264fc <__aeabi_uldivmod+0x28>
   264d8:	2a00      	cmp	r2, #0
   264da:	d10f      	bne.n	264fc <__aeabi_uldivmod+0x28>
   264dc:	2900      	cmp	r1, #0
   264de:	d100      	bne.n	264e2 <__aeabi_uldivmod+0xe>
   264e0:	2800      	cmp	r0, #0
   264e2:	d002      	beq.n	264ea <__aeabi_uldivmod+0x16>
   264e4:	2100      	movs	r1, #0
   264e6:	43c9      	mvns	r1, r1
   264e8:	1c08      	adds	r0, r1, #0
   264ea:	b407      	push	{r0, r1, r2}
   264ec:	4802      	ldr	r0, [pc, #8]	; (264f8 <__aeabi_uldivmod+0x24>)
   264ee:	a102      	add	r1, pc, #8	; (adr r1, 264f8 <__aeabi_uldivmod+0x24>)
   264f0:	1840      	adds	r0, r0, r1
   264f2:	9002      	str	r0, [sp, #8]
   264f4:	bd03      	pop	{r0, r1, pc}
   264f6:	46c0      	nop			; (mov r8, r8)
   264f8:	ffffff5d 	.word	0xffffff5d
   264fc:	b403      	push	{r0, r1}
   264fe:	4668      	mov	r0, sp
   26500:	b501      	push	{r0, lr}
   26502:	9802      	ldr	r0, [sp, #8]
   26504:	f000 f84e 	bl	265a4 <__udivmoddi4>
   26508:	9b01      	ldr	r3, [sp, #4]
   2650a:	469e      	mov	lr, r3
   2650c:	b002      	add	sp, #8
   2650e:	bc0c      	pop	{r2, r3}
   26510:	4770      	bx	lr
   26512:	46c0      	nop			; (mov r8, r8)

00026514 <__aeabi_lmul>:
   26514:	b5f0      	push	{r4, r5, r6, r7, lr}
   26516:	46ce      	mov	lr, r9
   26518:	4647      	mov	r7, r8
   2651a:	0415      	lsls	r5, r2, #16
   2651c:	0c2d      	lsrs	r5, r5, #16
   2651e:	002e      	movs	r6, r5
   26520:	b580      	push	{r7, lr}
   26522:	0407      	lsls	r7, r0, #16
   26524:	0c14      	lsrs	r4, r2, #16
   26526:	0c3f      	lsrs	r7, r7, #16
   26528:	4699      	mov	r9, r3
   2652a:	0c03      	lsrs	r3, r0, #16
   2652c:	437e      	muls	r6, r7
   2652e:	435d      	muls	r5, r3
   26530:	4367      	muls	r7, r4
   26532:	4363      	muls	r3, r4
   26534:	197f      	adds	r7, r7, r5
   26536:	0c34      	lsrs	r4, r6, #16
   26538:	19e4      	adds	r4, r4, r7
   2653a:	469c      	mov	ip, r3
   2653c:	42a5      	cmp	r5, r4
   2653e:	d903      	bls.n	26548 <__aeabi_lmul+0x34>
   26540:	2380      	movs	r3, #128	; 0x80
   26542:	025b      	lsls	r3, r3, #9
   26544:	4698      	mov	r8, r3
   26546:	44c4      	add	ip, r8
   26548:	464b      	mov	r3, r9
   2654a:	4351      	muls	r1, r2
   2654c:	4343      	muls	r3, r0
   2654e:	0436      	lsls	r6, r6, #16
   26550:	0c36      	lsrs	r6, r6, #16
   26552:	0c25      	lsrs	r5, r4, #16
   26554:	0424      	lsls	r4, r4, #16
   26556:	4465      	add	r5, ip
   26558:	19a4      	adds	r4, r4, r6
   2655a:	1859      	adds	r1, r3, r1
   2655c:	1949      	adds	r1, r1, r5
   2655e:	0020      	movs	r0, r4
   26560:	bc0c      	pop	{r2, r3}
   26562:	4690      	mov	r8, r2
   26564:	4699      	mov	r9, r3
   26566:	bdf0      	pop	{r4, r5, r6, r7, pc}

00026568 <__aeabi_d2uiz>:
   26568:	b570      	push	{r4, r5, r6, lr}
   2656a:	2200      	movs	r2, #0
   2656c:	4b0c      	ldr	r3, [pc, #48]	; (265a0 <__aeabi_d2uiz+0x38>)
   2656e:	0004      	movs	r4, r0
   26570:	000d      	movs	r5, r1
   26572:	f7ff ffa5 	bl	264c0 <__aeabi_dcmpge>
   26576:	2800      	cmp	r0, #0
   26578:	d104      	bne.n	26584 <__aeabi_d2uiz+0x1c>
   2657a:	0020      	movs	r0, r4
   2657c:	0029      	movs	r1, r5
   2657e:	f002 f879 	bl	28674 <__aeabi_d2iz>
   26582:	bd70      	pop	{r4, r5, r6, pc}
   26584:	4b06      	ldr	r3, [pc, #24]	; (265a0 <__aeabi_d2uiz+0x38>)
   26586:	2200      	movs	r2, #0
   26588:	0020      	movs	r0, r4
   2658a:	0029      	movs	r1, r5
   2658c:	f001 fd3c 	bl	28008 <__aeabi_dsub>
   26590:	f002 f870 	bl	28674 <__aeabi_d2iz>
   26594:	2380      	movs	r3, #128	; 0x80
   26596:	061b      	lsls	r3, r3, #24
   26598:	469c      	mov	ip, r3
   2659a:	4460      	add	r0, ip
   2659c:	e7f1      	b.n	26582 <__aeabi_d2uiz+0x1a>
   2659e:	46c0      	nop			; (mov r8, r8)
   265a0:	41e00000 	.word	0x41e00000

000265a4 <__udivmoddi4>:
   265a4:	b5f0      	push	{r4, r5, r6, r7, lr}
   265a6:	4657      	mov	r7, sl
   265a8:	464e      	mov	r6, r9
   265aa:	4645      	mov	r5, r8
   265ac:	46de      	mov	lr, fp
   265ae:	b5e0      	push	{r5, r6, r7, lr}
   265b0:	0004      	movs	r4, r0
   265b2:	b083      	sub	sp, #12
   265b4:	000d      	movs	r5, r1
   265b6:	4692      	mov	sl, r2
   265b8:	4699      	mov	r9, r3
   265ba:	428b      	cmp	r3, r1
   265bc:	d82f      	bhi.n	2661e <__udivmoddi4+0x7a>
   265be:	d02c      	beq.n	2661a <__udivmoddi4+0x76>
   265c0:	4649      	mov	r1, r9
   265c2:	4650      	mov	r0, sl
   265c4:	f002 f974 	bl	288b0 <__clzdi2>
   265c8:	0029      	movs	r1, r5
   265ca:	0006      	movs	r6, r0
   265cc:	0020      	movs	r0, r4
   265ce:	f002 f96f 	bl	288b0 <__clzdi2>
   265d2:	1a33      	subs	r3, r6, r0
   265d4:	4698      	mov	r8, r3
   265d6:	3b20      	subs	r3, #32
   265d8:	469b      	mov	fp, r3
   265da:	d500      	bpl.n	265de <__udivmoddi4+0x3a>
   265dc:	e074      	b.n	266c8 <__udivmoddi4+0x124>
   265de:	4653      	mov	r3, sl
   265e0:	465a      	mov	r2, fp
   265e2:	4093      	lsls	r3, r2
   265e4:	001f      	movs	r7, r3
   265e6:	4653      	mov	r3, sl
   265e8:	4642      	mov	r2, r8
   265ea:	4093      	lsls	r3, r2
   265ec:	001e      	movs	r6, r3
   265ee:	42af      	cmp	r7, r5
   265f0:	d829      	bhi.n	26646 <__udivmoddi4+0xa2>
   265f2:	d026      	beq.n	26642 <__udivmoddi4+0x9e>
   265f4:	465b      	mov	r3, fp
   265f6:	1ba4      	subs	r4, r4, r6
   265f8:	41bd      	sbcs	r5, r7
   265fa:	2b00      	cmp	r3, #0
   265fc:	da00      	bge.n	26600 <__udivmoddi4+0x5c>
   265fe:	e079      	b.n	266f4 <__udivmoddi4+0x150>
   26600:	2200      	movs	r2, #0
   26602:	2300      	movs	r3, #0
   26604:	9200      	str	r2, [sp, #0]
   26606:	9301      	str	r3, [sp, #4]
   26608:	2301      	movs	r3, #1
   2660a:	465a      	mov	r2, fp
   2660c:	4093      	lsls	r3, r2
   2660e:	9301      	str	r3, [sp, #4]
   26610:	2301      	movs	r3, #1
   26612:	4642      	mov	r2, r8
   26614:	4093      	lsls	r3, r2
   26616:	9300      	str	r3, [sp, #0]
   26618:	e019      	b.n	2664e <__udivmoddi4+0xaa>
   2661a:	4282      	cmp	r2, r0
   2661c:	d9d0      	bls.n	265c0 <__udivmoddi4+0x1c>
   2661e:	2200      	movs	r2, #0
   26620:	2300      	movs	r3, #0
   26622:	9200      	str	r2, [sp, #0]
   26624:	9301      	str	r3, [sp, #4]
   26626:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   26628:	2b00      	cmp	r3, #0
   2662a:	d001      	beq.n	26630 <__udivmoddi4+0x8c>
   2662c:	601c      	str	r4, [r3, #0]
   2662e:	605d      	str	r5, [r3, #4]
   26630:	9800      	ldr	r0, [sp, #0]
   26632:	9901      	ldr	r1, [sp, #4]
   26634:	b003      	add	sp, #12
   26636:	bc3c      	pop	{r2, r3, r4, r5}
   26638:	4690      	mov	r8, r2
   2663a:	4699      	mov	r9, r3
   2663c:	46a2      	mov	sl, r4
   2663e:	46ab      	mov	fp, r5
   26640:	bdf0      	pop	{r4, r5, r6, r7, pc}
   26642:	42a3      	cmp	r3, r4
   26644:	d9d6      	bls.n	265f4 <__udivmoddi4+0x50>
   26646:	2200      	movs	r2, #0
   26648:	2300      	movs	r3, #0
   2664a:	9200      	str	r2, [sp, #0]
   2664c:	9301      	str	r3, [sp, #4]
   2664e:	4643      	mov	r3, r8
   26650:	2b00      	cmp	r3, #0
   26652:	d0e8      	beq.n	26626 <__udivmoddi4+0x82>
   26654:	07fb      	lsls	r3, r7, #31
   26656:	0872      	lsrs	r2, r6, #1
   26658:	431a      	orrs	r2, r3
   2665a:	4646      	mov	r6, r8
   2665c:	087b      	lsrs	r3, r7, #1
   2665e:	e00e      	b.n	2667e <__udivmoddi4+0xda>
   26660:	42ab      	cmp	r3, r5
   26662:	d101      	bne.n	26668 <__udivmoddi4+0xc4>
   26664:	42a2      	cmp	r2, r4
   26666:	d80c      	bhi.n	26682 <__udivmoddi4+0xde>
   26668:	1aa4      	subs	r4, r4, r2
   2666a:	419d      	sbcs	r5, r3
   2666c:	2001      	movs	r0, #1
   2666e:	1924      	adds	r4, r4, r4
   26670:	416d      	adcs	r5, r5
   26672:	2100      	movs	r1, #0
   26674:	3e01      	subs	r6, #1
   26676:	1824      	adds	r4, r4, r0
   26678:	414d      	adcs	r5, r1
   2667a:	2e00      	cmp	r6, #0
   2667c:	d006      	beq.n	2668c <__udivmoddi4+0xe8>
   2667e:	42ab      	cmp	r3, r5
   26680:	d9ee      	bls.n	26660 <__udivmoddi4+0xbc>
   26682:	3e01      	subs	r6, #1
   26684:	1924      	adds	r4, r4, r4
   26686:	416d      	adcs	r5, r5
   26688:	2e00      	cmp	r6, #0
   2668a:	d1f8      	bne.n	2667e <__udivmoddi4+0xda>
   2668c:	465b      	mov	r3, fp
   2668e:	9800      	ldr	r0, [sp, #0]
   26690:	9901      	ldr	r1, [sp, #4]
   26692:	1900      	adds	r0, r0, r4
   26694:	4169      	adcs	r1, r5
   26696:	2b00      	cmp	r3, #0
   26698:	db22      	blt.n	266e0 <__udivmoddi4+0x13c>
   2669a:	002b      	movs	r3, r5
   2669c:	465a      	mov	r2, fp
   2669e:	40d3      	lsrs	r3, r2
   266a0:	002a      	movs	r2, r5
   266a2:	4644      	mov	r4, r8
   266a4:	40e2      	lsrs	r2, r4
   266a6:	001c      	movs	r4, r3
   266a8:	465b      	mov	r3, fp
   266aa:	0015      	movs	r5, r2
   266ac:	2b00      	cmp	r3, #0
   266ae:	db2c      	blt.n	2670a <__udivmoddi4+0x166>
   266b0:	0026      	movs	r6, r4
   266b2:	409e      	lsls	r6, r3
   266b4:	0033      	movs	r3, r6
   266b6:	0026      	movs	r6, r4
   266b8:	4647      	mov	r7, r8
   266ba:	40be      	lsls	r6, r7
   266bc:	0032      	movs	r2, r6
   266be:	1a80      	subs	r0, r0, r2
   266c0:	4199      	sbcs	r1, r3
   266c2:	9000      	str	r0, [sp, #0]
   266c4:	9101      	str	r1, [sp, #4]
   266c6:	e7ae      	b.n	26626 <__udivmoddi4+0x82>
   266c8:	4642      	mov	r2, r8
   266ca:	2320      	movs	r3, #32
   266cc:	1a9b      	subs	r3, r3, r2
   266ce:	4652      	mov	r2, sl
   266d0:	40da      	lsrs	r2, r3
   266d2:	4641      	mov	r1, r8
   266d4:	0013      	movs	r3, r2
   266d6:	464a      	mov	r2, r9
   266d8:	408a      	lsls	r2, r1
   266da:	0017      	movs	r7, r2
   266dc:	431f      	orrs	r7, r3
   266de:	e782      	b.n	265e6 <__udivmoddi4+0x42>
   266e0:	4642      	mov	r2, r8
   266e2:	2320      	movs	r3, #32
   266e4:	1a9b      	subs	r3, r3, r2
   266e6:	002a      	movs	r2, r5
   266e8:	4646      	mov	r6, r8
   266ea:	409a      	lsls	r2, r3
   266ec:	0023      	movs	r3, r4
   266ee:	40f3      	lsrs	r3, r6
   266f0:	4313      	orrs	r3, r2
   266f2:	e7d5      	b.n	266a0 <__udivmoddi4+0xfc>
   266f4:	4642      	mov	r2, r8
   266f6:	2320      	movs	r3, #32
   266f8:	2100      	movs	r1, #0
   266fa:	1a9b      	subs	r3, r3, r2
   266fc:	2200      	movs	r2, #0
   266fe:	9100      	str	r1, [sp, #0]
   26700:	9201      	str	r2, [sp, #4]
   26702:	2201      	movs	r2, #1
   26704:	40da      	lsrs	r2, r3
   26706:	9201      	str	r2, [sp, #4]
   26708:	e782      	b.n	26610 <__udivmoddi4+0x6c>
   2670a:	4642      	mov	r2, r8
   2670c:	2320      	movs	r3, #32
   2670e:	0026      	movs	r6, r4
   26710:	1a9b      	subs	r3, r3, r2
   26712:	40de      	lsrs	r6, r3
   26714:	002f      	movs	r7, r5
   26716:	46b4      	mov	ip, r6
   26718:	4097      	lsls	r7, r2
   2671a:	4666      	mov	r6, ip
   2671c:	003b      	movs	r3, r7
   2671e:	4333      	orrs	r3, r6
   26720:	e7c9      	b.n	266b6 <__udivmoddi4+0x112>
   26722:	46c0      	nop			; (mov r8, r8)

00026724 <__aeabi_fdiv>:
   26724:	b5f0      	push	{r4, r5, r6, r7, lr}
   26726:	4657      	mov	r7, sl
   26728:	464e      	mov	r6, r9
   2672a:	46de      	mov	lr, fp
   2672c:	4645      	mov	r5, r8
   2672e:	b5e0      	push	{r5, r6, r7, lr}
   26730:	0244      	lsls	r4, r0, #9
   26732:	0043      	lsls	r3, r0, #1
   26734:	0fc6      	lsrs	r6, r0, #31
   26736:	b083      	sub	sp, #12
   26738:	1c0f      	adds	r7, r1, #0
   2673a:	0a64      	lsrs	r4, r4, #9
   2673c:	0e1b      	lsrs	r3, r3, #24
   2673e:	46b2      	mov	sl, r6
   26740:	d053      	beq.n	267ea <__aeabi_fdiv+0xc6>
   26742:	2bff      	cmp	r3, #255	; 0xff
   26744:	d027      	beq.n	26796 <__aeabi_fdiv+0x72>
   26746:	2280      	movs	r2, #128	; 0x80
   26748:	00e4      	lsls	r4, r4, #3
   2674a:	04d2      	lsls	r2, r2, #19
   2674c:	4314      	orrs	r4, r2
   2674e:	227f      	movs	r2, #127	; 0x7f
   26750:	4252      	negs	r2, r2
   26752:	4690      	mov	r8, r2
   26754:	4498      	add	r8, r3
   26756:	2300      	movs	r3, #0
   26758:	4699      	mov	r9, r3
   2675a:	469b      	mov	fp, r3
   2675c:	027d      	lsls	r5, r7, #9
   2675e:	0078      	lsls	r0, r7, #1
   26760:	0ffb      	lsrs	r3, r7, #31
   26762:	0a6d      	lsrs	r5, r5, #9
   26764:	0e00      	lsrs	r0, r0, #24
   26766:	9300      	str	r3, [sp, #0]
   26768:	d024      	beq.n	267b4 <__aeabi_fdiv+0x90>
   2676a:	28ff      	cmp	r0, #255	; 0xff
   2676c:	d046      	beq.n	267fc <__aeabi_fdiv+0xd8>
   2676e:	2380      	movs	r3, #128	; 0x80
   26770:	2100      	movs	r1, #0
   26772:	00ed      	lsls	r5, r5, #3
   26774:	04db      	lsls	r3, r3, #19
   26776:	431d      	orrs	r5, r3
   26778:	387f      	subs	r0, #127	; 0x7f
   2677a:	4647      	mov	r7, r8
   2677c:	1a38      	subs	r0, r7, r0
   2677e:	464f      	mov	r7, r9
   26780:	430f      	orrs	r7, r1
   26782:	00bf      	lsls	r7, r7, #2
   26784:	46b9      	mov	r9, r7
   26786:	0033      	movs	r3, r6
   26788:	9a00      	ldr	r2, [sp, #0]
   2678a:	4f87      	ldr	r7, [pc, #540]	; (269a8 <__aeabi_fdiv+0x284>)
   2678c:	4053      	eors	r3, r2
   2678e:	464a      	mov	r2, r9
   26790:	58ba      	ldr	r2, [r7, r2]
   26792:	9301      	str	r3, [sp, #4]
   26794:	4697      	mov	pc, r2
   26796:	2c00      	cmp	r4, #0
   26798:	d14e      	bne.n	26838 <__aeabi_fdiv+0x114>
   2679a:	2308      	movs	r3, #8
   2679c:	4699      	mov	r9, r3
   2679e:	33f7      	adds	r3, #247	; 0xf7
   267a0:	4698      	mov	r8, r3
   267a2:	3bfd      	subs	r3, #253	; 0xfd
   267a4:	469b      	mov	fp, r3
   267a6:	027d      	lsls	r5, r7, #9
   267a8:	0078      	lsls	r0, r7, #1
   267aa:	0ffb      	lsrs	r3, r7, #31
   267ac:	0a6d      	lsrs	r5, r5, #9
   267ae:	0e00      	lsrs	r0, r0, #24
   267b0:	9300      	str	r3, [sp, #0]
   267b2:	d1da      	bne.n	2676a <__aeabi_fdiv+0x46>
   267b4:	2d00      	cmp	r5, #0
   267b6:	d126      	bne.n	26806 <__aeabi_fdiv+0xe2>
   267b8:	2000      	movs	r0, #0
   267ba:	2101      	movs	r1, #1
   267bc:	0033      	movs	r3, r6
   267be:	9a00      	ldr	r2, [sp, #0]
   267c0:	4f7a      	ldr	r7, [pc, #488]	; (269ac <__aeabi_fdiv+0x288>)
   267c2:	4053      	eors	r3, r2
   267c4:	4642      	mov	r2, r8
   267c6:	1a10      	subs	r0, r2, r0
   267c8:	464a      	mov	r2, r9
   267ca:	430a      	orrs	r2, r1
   267cc:	0092      	lsls	r2, r2, #2
   267ce:	58ba      	ldr	r2, [r7, r2]
   267d0:	001d      	movs	r5, r3
   267d2:	4697      	mov	pc, r2
   267d4:	9b00      	ldr	r3, [sp, #0]
   267d6:	002c      	movs	r4, r5
   267d8:	469a      	mov	sl, r3
   267da:	468b      	mov	fp, r1
   267dc:	465b      	mov	r3, fp
   267de:	2b02      	cmp	r3, #2
   267e0:	d131      	bne.n	26846 <__aeabi_fdiv+0x122>
   267e2:	4653      	mov	r3, sl
   267e4:	21ff      	movs	r1, #255	; 0xff
   267e6:	2400      	movs	r4, #0
   267e8:	e038      	b.n	2685c <__aeabi_fdiv+0x138>
   267ea:	2c00      	cmp	r4, #0
   267ec:	d117      	bne.n	2681e <__aeabi_fdiv+0xfa>
   267ee:	2304      	movs	r3, #4
   267f0:	4699      	mov	r9, r3
   267f2:	2300      	movs	r3, #0
   267f4:	4698      	mov	r8, r3
   267f6:	3301      	adds	r3, #1
   267f8:	469b      	mov	fp, r3
   267fa:	e7af      	b.n	2675c <__aeabi_fdiv+0x38>
   267fc:	20ff      	movs	r0, #255	; 0xff
   267fe:	2d00      	cmp	r5, #0
   26800:	d10b      	bne.n	2681a <__aeabi_fdiv+0xf6>
   26802:	2102      	movs	r1, #2
   26804:	e7da      	b.n	267bc <__aeabi_fdiv+0x98>
   26806:	0028      	movs	r0, r5
   26808:	f002 f834 	bl	28874 <__clzsi2>
   2680c:	1f43      	subs	r3, r0, #5
   2680e:	409d      	lsls	r5, r3
   26810:	2376      	movs	r3, #118	; 0x76
   26812:	425b      	negs	r3, r3
   26814:	1a18      	subs	r0, r3, r0
   26816:	2100      	movs	r1, #0
   26818:	e7af      	b.n	2677a <__aeabi_fdiv+0x56>
   2681a:	2103      	movs	r1, #3
   2681c:	e7ad      	b.n	2677a <__aeabi_fdiv+0x56>
   2681e:	0020      	movs	r0, r4
   26820:	f002 f828 	bl	28874 <__clzsi2>
   26824:	1f43      	subs	r3, r0, #5
   26826:	409c      	lsls	r4, r3
   26828:	2376      	movs	r3, #118	; 0x76
   2682a:	425b      	negs	r3, r3
   2682c:	1a1b      	subs	r3, r3, r0
   2682e:	4698      	mov	r8, r3
   26830:	2300      	movs	r3, #0
   26832:	4699      	mov	r9, r3
   26834:	469b      	mov	fp, r3
   26836:	e791      	b.n	2675c <__aeabi_fdiv+0x38>
   26838:	230c      	movs	r3, #12
   2683a:	4699      	mov	r9, r3
   2683c:	33f3      	adds	r3, #243	; 0xf3
   2683e:	4698      	mov	r8, r3
   26840:	3bfc      	subs	r3, #252	; 0xfc
   26842:	469b      	mov	fp, r3
   26844:	e78a      	b.n	2675c <__aeabi_fdiv+0x38>
   26846:	2b03      	cmp	r3, #3
   26848:	d100      	bne.n	2684c <__aeabi_fdiv+0x128>
   2684a:	e0a5      	b.n	26998 <__aeabi_fdiv+0x274>
   2684c:	4655      	mov	r5, sl
   2684e:	2b01      	cmp	r3, #1
   26850:	d000      	beq.n	26854 <__aeabi_fdiv+0x130>
   26852:	e081      	b.n	26958 <__aeabi_fdiv+0x234>
   26854:	2301      	movs	r3, #1
   26856:	2100      	movs	r1, #0
   26858:	2400      	movs	r4, #0
   2685a:	402b      	ands	r3, r5
   2685c:	0264      	lsls	r4, r4, #9
   2685e:	05c9      	lsls	r1, r1, #23
   26860:	0a60      	lsrs	r0, r4, #9
   26862:	07db      	lsls	r3, r3, #31
   26864:	4308      	orrs	r0, r1
   26866:	4318      	orrs	r0, r3
   26868:	b003      	add	sp, #12
   2686a:	bc3c      	pop	{r2, r3, r4, r5}
   2686c:	4690      	mov	r8, r2
   2686e:	4699      	mov	r9, r3
   26870:	46a2      	mov	sl, r4
   26872:	46ab      	mov	fp, r5
   26874:	bdf0      	pop	{r4, r5, r6, r7, pc}
   26876:	2480      	movs	r4, #128	; 0x80
   26878:	2300      	movs	r3, #0
   2687a:	03e4      	lsls	r4, r4, #15
   2687c:	21ff      	movs	r1, #255	; 0xff
   2687e:	e7ed      	b.n	2685c <__aeabi_fdiv+0x138>
   26880:	21ff      	movs	r1, #255	; 0xff
   26882:	2400      	movs	r4, #0
   26884:	e7ea      	b.n	2685c <__aeabi_fdiv+0x138>
   26886:	2301      	movs	r3, #1
   26888:	1a59      	subs	r1, r3, r1
   2688a:	291b      	cmp	r1, #27
   2688c:	dd66      	ble.n	2695c <__aeabi_fdiv+0x238>
   2688e:	9a01      	ldr	r2, [sp, #4]
   26890:	4013      	ands	r3, r2
   26892:	2100      	movs	r1, #0
   26894:	2400      	movs	r4, #0
   26896:	e7e1      	b.n	2685c <__aeabi_fdiv+0x138>
   26898:	2380      	movs	r3, #128	; 0x80
   2689a:	03db      	lsls	r3, r3, #15
   2689c:	421c      	tst	r4, r3
   2689e:	d038      	beq.n	26912 <__aeabi_fdiv+0x1ee>
   268a0:	421d      	tst	r5, r3
   268a2:	d051      	beq.n	26948 <__aeabi_fdiv+0x224>
   268a4:	431c      	orrs	r4, r3
   268a6:	0264      	lsls	r4, r4, #9
   268a8:	0a64      	lsrs	r4, r4, #9
   268aa:	0033      	movs	r3, r6
   268ac:	21ff      	movs	r1, #255	; 0xff
   268ae:	e7d5      	b.n	2685c <__aeabi_fdiv+0x138>
   268b0:	0163      	lsls	r3, r4, #5
   268b2:	016c      	lsls	r4, r5, #5
   268b4:	42a3      	cmp	r3, r4
   268b6:	d23b      	bcs.n	26930 <__aeabi_fdiv+0x20c>
   268b8:	261b      	movs	r6, #27
   268ba:	2100      	movs	r1, #0
   268bc:	3801      	subs	r0, #1
   268be:	2501      	movs	r5, #1
   268c0:	001f      	movs	r7, r3
   268c2:	0049      	lsls	r1, r1, #1
   268c4:	005b      	lsls	r3, r3, #1
   268c6:	2f00      	cmp	r7, #0
   268c8:	db01      	blt.n	268ce <__aeabi_fdiv+0x1aa>
   268ca:	429c      	cmp	r4, r3
   268cc:	d801      	bhi.n	268d2 <__aeabi_fdiv+0x1ae>
   268ce:	1b1b      	subs	r3, r3, r4
   268d0:	4329      	orrs	r1, r5
   268d2:	3e01      	subs	r6, #1
   268d4:	2e00      	cmp	r6, #0
   268d6:	d1f3      	bne.n	268c0 <__aeabi_fdiv+0x19c>
   268d8:	001c      	movs	r4, r3
   268da:	1e63      	subs	r3, r4, #1
   268dc:	419c      	sbcs	r4, r3
   268de:	430c      	orrs	r4, r1
   268e0:	0001      	movs	r1, r0
   268e2:	317f      	adds	r1, #127	; 0x7f
   268e4:	2900      	cmp	r1, #0
   268e6:	ddce      	ble.n	26886 <__aeabi_fdiv+0x162>
   268e8:	0763      	lsls	r3, r4, #29
   268ea:	d004      	beq.n	268f6 <__aeabi_fdiv+0x1d2>
   268ec:	230f      	movs	r3, #15
   268ee:	4023      	ands	r3, r4
   268f0:	2b04      	cmp	r3, #4
   268f2:	d000      	beq.n	268f6 <__aeabi_fdiv+0x1d2>
   268f4:	3404      	adds	r4, #4
   268f6:	0123      	lsls	r3, r4, #4
   268f8:	d503      	bpl.n	26902 <__aeabi_fdiv+0x1de>
   268fa:	0001      	movs	r1, r0
   268fc:	4b2c      	ldr	r3, [pc, #176]	; (269b0 <__aeabi_fdiv+0x28c>)
   268fe:	3180      	adds	r1, #128	; 0x80
   26900:	401c      	ands	r4, r3
   26902:	29fe      	cmp	r1, #254	; 0xfe
   26904:	dd0d      	ble.n	26922 <__aeabi_fdiv+0x1fe>
   26906:	2301      	movs	r3, #1
   26908:	9a01      	ldr	r2, [sp, #4]
   2690a:	21ff      	movs	r1, #255	; 0xff
   2690c:	4013      	ands	r3, r2
   2690e:	2400      	movs	r4, #0
   26910:	e7a4      	b.n	2685c <__aeabi_fdiv+0x138>
   26912:	2380      	movs	r3, #128	; 0x80
   26914:	03db      	lsls	r3, r3, #15
   26916:	431c      	orrs	r4, r3
   26918:	0264      	lsls	r4, r4, #9
   2691a:	0a64      	lsrs	r4, r4, #9
   2691c:	0033      	movs	r3, r6
   2691e:	21ff      	movs	r1, #255	; 0xff
   26920:	e79c      	b.n	2685c <__aeabi_fdiv+0x138>
   26922:	2301      	movs	r3, #1
   26924:	9a01      	ldr	r2, [sp, #4]
   26926:	01a4      	lsls	r4, r4, #6
   26928:	0a64      	lsrs	r4, r4, #9
   2692a:	b2c9      	uxtb	r1, r1
   2692c:	4013      	ands	r3, r2
   2692e:	e795      	b.n	2685c <__aeabi_fdiv+0x138>
   26930:	1b1b      	subs	r3, r3, r4
   26932:	261a      	movs	r6, #26
   26934:	2101      	movs	r1, #1
   26936:	e7c2      	b.n	268be <__aeabi_fdiv+0x19a>
   26938:	9b00      	ldr	r3, [sp, #0]
   2693a:	468b      	mov	fp, r1
   2693c:	469a      	mov	sl, r3
   2693e:	2400      	movs	r4, #0
   26940:	e74c      	b.n	267dc <__aeabi_fdiv+0xb8>
   26942:	0263      	lsls	r3, r4, #9
   26944:	d5e5      	bpl.n	26912 <__aeabi_fdiv+0x1ee>
   26946:	2500      	movs	r5, #0
   26948:	2480      	movs	r4, #128	; 0x80
   2694a:	03e4      	lsls	r4, r4, #15
   2694c:	432c      	orrs	r4, r5
   2694e:	0264      	lsls	r4, r4, #9
   26950:	0a64      	lsrs	r4, r4, #9
   26952:	9b00      	ldr	r3, [sp, #0]
   26954:	21ff      	movs	r1, #255	; 0xff
   26956:	e781      	b.n	2685c <__aeabi_fdiv+0x138>
   26958:	9501      	str	r5, [sp, #4]
   2695a:	e7c1      	b.n	268e0 <__aeabi_fdiv+0x1bc>
   2695c:	0023      	movs	r3, r4
   2695e:	2020      	movs	r0, #32
   26960:	40cb      	lsrs	r3, r1
   26962:	1a41      	subs	r1, r0, r1
   26964:	408c      	lsls	r4, r1
   26966:	1e61      	subs	r1, r4, #1
   26968:	418c      	sbcs	r4, r1
   2696a:	431c      	orrs	r4, r3
   2696c:	0763      	lsls	r3, r4, #29
   2696e:	d004      	beq.n	2697a <__aeabi_fdiv+0x256>
   26970:	230f      	movs	r3, #15
   26972:	4023      	ands	r3, r4
   26974:	2b04      	cmp	r3, #4
   26976:	d000      	beq.n	2697a <__aeabi_fdiv+0x256>
   26978:	3404      	adds	r4, #4
   2697a:	0163      	lsls	r3, r4, #5
   2697c:	d505      	bpl.n	2698a <__aeabi_fdiv+0x266>
   2697e:	2301      	movs	r3, #1
   26980:	9a01      	ldr	r2, [sp, #4]
   26982:	2101      	movs	r1, #1
   26984:	4013      	ands	r3, r2
   26986:	2400      	movs	r4, #0
   26988:	e768      	b.n	2685c <__aeabi_fdiv+0x138>
   2698a:	2301      	movs	r3, #1
   2698c:	9a01      	ldr	r2, [sp, #4]
   2698e:	01a4      	lsls	r4, r4, #6
   26990:	0a64      	lsrs	r4, r4, #9
   26992:	4013      	ands	r3, r2
   26994:	2100      	movs	r1, #0
   26996:	e761      	b.n	2685c <__aeabi_fdiv+0x138>
   26998:	2380      	movs	r3, #128	; 0x80
   2699a:	03db      	lsls	r3, r3, #15
   2699c:	431c      	orrs	r4, r3
   2699e:	0264      	lsls	r4, r4, #9
   269a0:	0a64      	lsrs	r4, r4, #9
   269a2:	4653      	mov	r3, sl
   269a4:	21ff      	movs	r1, #255	; 0xff
   269a6:	e759      	b.n	2685c <__aeabi_fdiv+0x138>
   269a8:	0002a940 	.word	0x0002a940
   269ac:	0002a980 	.word	0x0002a980
   269b0:	f7ffffff 	.word	0xf7ffffff

000269b4 <__aeabi_fmul>:
   269b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   269b6:	4657      	mov	r7, sl
   269b8:	464e      	mov	r6, r9
   269ba:	4645      	mov	r5, r8
   269bc:	46de      	mov	lr, fp
   269be:	b5e0      	push	{r5, r6, r7, lr}
   269c0:	0247      	lsls	r7, r0, #9
   269c2:	0046      	lsls	r6, r0, #1
   269c4:	4688      	mov	r8, r1
   269c6:	0a7f      	lsrs	r7, r7, #9
   269c8:	0e36      	lsrs	r6, r6, #24
   269ca:	0fc4      	lsrs	r4, r0, #31
   269cc:	2e00      	cmp	r6, #0
   269ce:	d047      	beq.n	26a60 <__aeabi_fmul+0xac>
   269d0:	2eff      	cmp	r6, #255	; 0xff
   269d2:	d024      	beq.n	26a1e <__aeabi_fmul+0x6a>
   269d4:	00fb      	lsls	r3, r7, #3
   269d6:	2780      	movs	r7, #128	; 0x80
   269d8:	04ff      	lsls	r7, r7, #19
   269da:	431f      	orrs	r7, r3
   269dc:	2300      	movs	r3, #0
   269de:	4699      	mov	r9, r3
   269e0:	469a      	mov	sl, r3
   269e2:	3e7f      	subs	r6, #127	; 0x7f
   269e4:	4643      	mov	r3, r8
   269e6:	025d      	lsls	r5, r3, #9
   269e8:	0058      	lsls	r0, r3, #1
   269ea:	0fdb      	lsrs	r3, r3, #31
   269ec:	0a6d      	lsrs	r5, r5, #9
   269ee:	0e00      	lsrs	r0, r0, #24
   269f0:	4698      	mov	r8, r3
   269f2:	d043      	beq.n	26a7c <__aeabi_fmul+0xc8>
   269f4:	28ff      	cmp	r0, #255	; 0xff
   269f6:	d03b      	beq.n	26a70 <__aeabi_fmul+0xbc>
   269f8:	00eb      	lsls	r3, r5, #3
   269fa:	2580      	movs	r5, #128	; 0x80
   269fc:	2200      	movs	r2, #0
   269fe:	04ed      	lsls	r5, r5, #19
   26a00:	431d      	orrs	r5, r3
   26a02:	387f      	subs	r0, #127	; 0x7f
   26a04:	1836      	adds	r6, r6, r0
   26a06:	1c73      	adds	r3, r6, #1
   26a08:	4641      	mov	r1, r8
   26a0a:	469b      	mov	fp, r3
   26a0c:	464b      	mov	r3, r9
   26a0e:	4061      	eors	r1, r4
   26a10:	4313      	orrs	r3, r2
   26a12:	2b0f      	cmp	r3, #15
   26a14:	d864      	bhi.n	26ae0 <__aeabi_fmul+0x12c>
   26a16:	4875      	ldr	r0, [pc, #468]	; (26bec <__aeabi_fmul+0x238>)
   26a18:	009b      	lsls	r3, r3, #2
   26a1a:	58c3      	ldr	r3, [r0, r3]
   26a1c:	469f      	mov	pc, r3
   26a1e:	2f00      	cmp	r7, #0
   26a20:	d142      	bne.n	26aa8 <__aeabi_fmul+0xf4>
   26a22:	2308      	movs	r3, #8
   26a24:	4699      	mov	r9, r3
   26a26:	3b06      	subs	r3, #6
   26a28:	26ff      	movs	r6, #255	; 0xff
   26a2a:	469a      	mov	sl, r3
   26a2c:	e7da      	b.n	269e4 <__aeabi_fmul+0x30>
   26a2e:	4641      	mov	r1, r8
   26a30:	2a02      	cmp	r2, #2
   26a32:	d028      	beq.n	26a86 <__aeabi_fmul+0xd2>
   26a34:	2a03      	cmp	r2, #3
   26a36:	d100      	bne.n	26a3a <__aeabi_fmul+0x86>
   26a38:	e0ce      	b.n	26bd8 <__aeabi_fmul+0x224>
   26a3a:	2a01      	cmp	r2, #1
   26a3c:	d000      	beq.n	26a40 <__aeabi_fmul+0x8c>
   26a3e:	e0ac      	b.n	26b9a <__aeabi_fmul+0x1e6>
   26a40:	4011      	ands	r1, r2
   26a42:	2000      	movs	r0, #0
   26a44:	2200      	movs	r2, #0
   26a46:	b2cc      	uxtb	r4, r1
   26a48:	0240      	lsls	r0, r0, #9
   26a4a:	05d2      	lsls	r2, r2, #23
   26a4c:	0a40      	lsrs	r0, r0, #9
   26a4e:	07e4      	lsls	r4, r4, #31
   26a50:	4310      	orrs	r0, r2
   26a52:	4320      	orrs	r0, r4
   26a54:	bc3c      	pop	{r2, r3, r4, r5}
   26a56:	4690      	mov	r8, r2
   26a58:	4699      	mov	r9, r3
   26a5a:	46a2      	mov	sl, r4
   26a5c:	46ab      	mov	fp, r5
   26a5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   26a60:	2f00      	cmp	r7, #0
   26a62:	d115      	bne.n	26a90 <__aeabi_fmul+0xdc>
   26a64:	2304      	movs	r3, #4
   26a66:	4699      	mov	r9, r3
   26a68:	3b03      	subs	r3, #3
   26a6a:	2600      	movs	r6, #0
   26a6c:	469a      	mov	sl, r3
   26a6e:	e7b9      	b.n	269e4 <__aeabi_fmul+0x30>
   26a70:	20ff      	movs	r0, #255	; 0xff
   26a72:	2202      	movs	r2, #2
   26a74:	2d00      	cmp	r5, #0
   26a76:	d0c5      	beq.n	26a04 <__aeabi_fmul+0x50>
   26a78:	2203      	movs	r2, #3
   26a7a:	e7c3      	b.n	26a04 <__aeabi_fmul+0x50>
   26a7c:	2d00      	cmp	r5, #0
   26a7e:	d119      	bne.n	26ab4 <__aeabi_fmul+0x100>
   26a80:	2000      	movs	r0, #0
   26a82:	2201      	movs	r2, #1
   26a84:	e7be      	b.n	26a04 <__aeabi_fmul+0x50>
   26a86:	2401      	movs	r4, #1
   26a88:	22ff      	movs	r2, #255	; 0xff
   26a8a:	400c      	ands	r4, r1
   26a8c:	2000      	movs	r0, #0
   26a8e:	e7db      	b.n	26a48 <__aeabi_fmul+0x94>
   26a90:	0038      	movs	r0, r7
   26a92:	f001 feef 	bl	28874 <__clzsi2>
   26a96:	2676      	movs	r6, #118	; 0x76
   26a98:	1f43      	subs	r3, r0, #5
   26a9a:	409f      	lsls	r7, r3
   26a9c:	2300      	movs	r3, #0
   26a9e:	4276      	negs	r6, r6
   26aa0:	1a36      	subs	r6, r6, r0
   26aa2:	4699      	mov	r9, r3
   26aa4:	469a      	mov	sl, r3
   26aa6:	e79d      	b.n	269e4 <__aeabi_fmul+0x30>
   26aa8:	230c      	movs	r3, #12
   26aaa:	4699      	mov	r9, r3
   26aac:	3b09      	subs	r3, #9
   26aae:	26ff      	movs	r6, #255	; 0xff
   26ab0:	469a      	mov	sl, r3
   26ab2:	e797      	b.n	269e4 <__aeabi_fmul+0x30>
   26ab4:	0028      	movs	r0, r5
   26ab6:	f001 fedd 	bl	28874 <__clzsi2>
   26aba:	1f43      	subs	r3, r0, #5
   26abc:	409d      	lsls	r5, r3
   26abe:	2376      	movs	r3, #118	; 0x76
   26ac0:	425b      	negs	r3, r3
   26ac2:	1a18      	subs	r0, r3, r0
   26ac4:	2200      	movs	r2, #0
   26ac6:	e79d      	b.n	26a04 <__aeabi_fmul+0x50>
   26ac8:	2080      	movs	r0, #128	; 0x80
   26aca:	2400      	movs	r4, #0
   26acc:	03c0      	lsls	r0, r0, #15
   26ace:	22ff      	movs	r2, #255	; 0xff
   26ad0:	e7ba      	b.n	26a48 <__aeabi_fmul+0x94>
   26ad2:	003d      	movs	r5, r7
   26ad4:	4652      	mov	r2, sl
   26ad6:	e7ab      	b.n	26a30 <__aeabi_fmul+0x7c>
   26ad8:	003d      	movs	r5, r7
   26ada:	0021      	movs	r1, r4
   26adc:	4652      	mov	r2, sl
   26ade:	e7a7      	b.n	26a30 <__aeabi_fmul+0x7c>
   26ae0:	0c3b      	lsrs	r3, r7, #16
   26ae2:	469c      	mov	ip, r3
   26ae4:	042a      	lsls	r2, r5, #16
   26ae6:	0c12      	lsrs	r2, r2, #16
   26ae8:	0c2b      	lsrs	r3, r5, #16
   26aea:	0014      	movs	r4, r2
   26aec:	4660      	mov	r0, ip
   26aee:	4665      	mov	r5, ip
   26af0:	043f      	lsls	r7, r7, #16
   26af2:	0c3f      	lsrs	r7, r7, #16
   26af4:	437c      	muls	r4, r7
   26af6:	4342      	muls	r2, r0
   26af8:	435d      	muls	r5, r3
   26afa:	437b      	muls	r3, r7
   26afc:	0c27      	lsrs	r7, r4, #16
   26afe:	189b      	adds	r3, r3, r2
   26b00:	18ff      	adds	r7, r7, r3
   26b02:	42ba      	cmp	r2, r7
   26b04:	d903      	bls.n	26b0e <__aeabi_fmul+0x15a>
   26b06:	2380      	movs	r3, #128	; 0x80
   26b08:	025b      	lsls	r3, r3, #9
   26b0a:	469c      	mov	ip, r3
   26b0c:	4465      	add	r5, ip
   26b0e:	0424      	lsls	r4, r4, #16
   26b10:	043a      	lsls	r2, r7, #16
   26b12:	0c24      	lsrs	r4, r4, #16
   26b14:	1912      	adds	r2, r2, r4
   26b16:	0193      	lsls	r3, r2, #6
   26b18:	1e5c      	subs	r4, r3, #1
   26b1a:	41a3      	sbcs	r3, r4
   26b1c:	0c3f      	lsrs	r7, r7, #16
   26b1e:	0e92      	lsrs	r2, r2, #26
   26b20:	197d      	adds	r5, r7, r5
   26b22:	431a      	orrs	r2, r3
   26b24:	01ad      	lsls	r5, r5, #6
   26b26:	4315      	orrs	r5, r2
   26b28:	012b      	lsls	r3, r5, #4
   26b2a:	d504      	bpl.n	26b36 <__aeabi_fmul+0x182>
   26b2c:	2301      	movs	r3, #1
   26b2e:	465e      	mov	r6, fp
   26b30:	086a      	lsrs	r2, r5, #1
   26b32:	401d      	ands	r5, r3
   26b34:	4315      	orrs	r5, r2
   26b36:	0032      	movs	r2, r6
   26b38:	327f      	adds	r2, #127	; 0x7f
   26b3a:	2a00      	cmp	r2, #0
   26b3c:	dd25      	ble.n	26b8a <__aeabi_fmul+0x1d6>
   26b3e:	076b      	lsls	r3, r5, #29
   26b40:	d004      	beq.n	26b4c <__aeabi_fmul+0x198>
   26b42:	230f      	movs	r3, #15
   26b44:	402b      	ands	r3, r5
   26b46:	2b04      	cmp	r3, #4
   26b48:	d000      	beq.n	26b4c <__aeabi_fmul+0x198>
   26b4a:	3504      	adds	r5, #4
   26b4c:	012b      	lsls	r3, r5, #4
   26b4e:	d503      	bpl.n	26b58 <__aeabi_fmul+0x1a4>
   26b50:	0032      	movs	r2, r6
   26b52:	4b27      	ldr	r3, [pc, #156]	; (26bf0 <__aeabi_fmul+0x23c>)
   26b54:	3280      	adds	r2, #128	; 0x80
   26b56:	401d      	ands	r5, r3
   26b58:	2afe      	cmp	r2, #254	; 0xfe
   26b5a:	dc94      	bgt.n	26a86 <__aeabi_fmul+0xd2>
   26b5c:	2401      	movs	r4, #1
   26b5e:	01a8      	lsls	r0, r5, #6
   26b60:	0a40      	lsrs	r0, r0, #9
   26b62:	b2d2      	uxtb	r2, r2
   26b64:	400c      	ands	r4, r1
   26b66:	e76f      	b.n	26a48 <__aeabi_fmul+0x94>
   26b68:	2080      	movs	r0, #128	; 0x80
   26b6a:	03c0      	lsls	r0, r0, #15
   26b6c:	4207      	tst	r7, r0
   26b6e:	d007      	beq.n	26b80 <__aeabi_fmul+0x1cc>
   26b70:	4205      	tst	r5, r0
   26b72:	d105      	bne.n	26b80 <__aeabi_fmul+0x1cc>
   26b74:	4328      	orrs	r0, r5
   26b76:	0240      	lsls	r0, r0, #9
   26b78:	0a40      	lsrs	r0, r0, #9
   26b7a:	4644      	mov	r4, r8
   26b7c:	22ff      	movs	r2, #255	; 0xff
   26b7e:	e763      	b.n	26a48 <__aeabi_fmul+0x94>
   26b80:	4338      	orrs	r0, r7
   26b82:	0240      	lsls	r0, r0, #9
   26b84:	0a40      	lsrs	r0, r0, #9
   26b86:	22ff      	movs	r2, #255	; 0xff
   26b88:	e75e      	b.n	26a48 <__aeabi_fmul+0x94>
   26b8a:	2401      	movs	r4, #1
   26b8c:	1aa3      	subs	r3, r4, r2
   26b8e:	2b1b      	cmp	r3, #27
   26b90:	dd05      	ble.n	26b9e <__aeabi_fmul+0x1ea>
   26b92:	400c      	ands	r4, r1
   26b94:	2200      	movs	r2, #0
   26b96:	2000      	movs	r0, #0
   26b98:	e756      	b.n	26a48 <__aeabi_fmul+0x94>
   26b9a:	465e      	mov	r6, fp
   26b9c:	e7cb      	b.n	26b36 <__aeabi_fmul+0x182>
   26b9e:	002a      	movs	r2, r5
   26ba0:	2020      	movs	r0, #32
   26ba2:	40da      	lsrs	r2, r3
   26ba4:	1ac3      	subs	r3, r0, r3
   26ba6:	409d      	lsls	r5, r3
   26ba8:	002b      	movs	r3, r5
   26baa:	1e5d      	subs	r5, r3, #1
   26bac:	41ab      	sbcs	r3, r5
   26bae:	4313      	orrs	r3, r2
   26bb0:	075a      	lsls	r2, r3, #29
   26bb2:	d004      	beq.n	26bbe <__aeabi_fmul+0x20a>
   26bb4:	220f      	movs	r2, #15
   26bb6:	401a      	ands	r2, r3
   26bb8:	2a04      	cmp	r2, #4
   26bba:	d000      	beq.n	26bbe <__aeabi_fmul+0x20a>
   26bbc:	3304      	adds	r3, #4
   26bbe:	015a      	lsls	r2, r3, #5
   26bc0:	d504      	bpl.n	26bcc <__aeabi_fmul+0x218>
   26bc2:	2401      	movs	r4, #1
   26bc4:	2201      	movs	r2, #1
   26bc6:	400c      	ands	r4, r1
   26bc8:	2000      	movs	r0, #0
   26bca:	e73d      	b.n	26a48 <__aeabi_fmul+0x94>
   26bcc:	2401      	movs	r4, #1
   26bce:	019b      	lsls	r3, r3, #6
   26bd0:	0a58      	lsrs	r0, r3, #9
   26bd2:	400c      	ands	r4, r1
   26bd4:	2200      	movs	r2, #0
   26bd6:	e737      	b.n	26a48 <__aeabi_fmul+0x94>
   26bd8:	2080      	movs	r0, #128	; 0x80
   26bda:	2401      	movs	r4, #1
   26bdc:	03c0      	lsls	r0, r0, #15
   26bde:	4328      	orrs	r0, r5
   26be0:	0240      	lsls	r0, r0, #9
   26be2:	0a40      	lsrs	r0, r0, #9
   26be4:	400c      	ands	r4, r1
   26be6:	22ff      	movs	r2, #255	; 0xff
   26be8:	e72e      	b.n	26a48 <__aeabi_fmul+0x94>
   26bea:	46c0      	nop			; (mov r8, r8)
   26bec:	0002a9c0 	.word	0x0002a9c0
   26bf0:	f7ffffff 	.word	0xf7ffffff

00026bf4 <__aeabi_ui2f>:
   26bf4:	b510      	push	{r4, lr}
   26bf6:	1e04      	subs	r4, r0, #0
   26bf8:	d027      	beq.n	26c4a <__aeabi_ui2f+0x56>
   26bfa:	f001 fe3b 	bl	28874 <__clzsi2>
   26bfe:	239e      	movs	r3, #158	; 0x9e
   26c00:	1a1b      	subs	r3, r3, r0
   26c02:	2b96      	cmp	r3, #150	; 0x96
   26c04:	dc0a      	bgt.n	26c1c <__aeabi_ui2f+0x28>
   26c06:	2296      	movs	r2, #150	; 0x96
   26c08:	1ad2      	subs	r2, r2, r3
   26c0a:	4094      	lsls	r4, r2
   26c0c:	0264      	lsls	r4, r4, #9
   26c0e:	0a64      	lsrs	r4, r4, #9
   26c10:	b2db      	uxtb	r3, r3
   26c12:	0264      	lsls	r4, r4, #9
   26c14:	05db      	lsls	r3, r3, #23
   26c16:	0a60      	lsrs	r0, r4, #9
   26c18:	4318      	orrs	r0, r3
   26c1a:	bd10      	pop	{r4, pc}
   26c1c:	2b99      	cmp	r3, #153	; 0x99
   26c1e:	dc17      	bgt.n	26c50 <__aeabi_ui2f+0x5c>
   26c20:	2299      	movs	r2, #153	; 0x99
   26c22:	1ad2      	subs	r2, r2, r3
   26c24:	2a00      	cmp	r2, #0
   26c26:	dd27      	ble.n	26c78 <__aeabi_ui2f+0x84>
   26c28:	4094      	lsls	r4, r2
   26c2a:	0022      	movs	r2, r4
   26c2c:	4c13      	ldr	r4, [pc, #76]	; (26c7c <__aeabi_ui2f+0x88>)
   26c2e:	4014      	ands	r4, r2
   26c30:	0751      	lsls	r1, r2, #29
   26c32:	d004      	beq.n	26c3e <__aeabi_ui2f+0x4a>
   26c34:	210f      	movs	r1, #15
   26c36:	400a      	ands	r2, r1
   26c38:	2a04      	cmp	r2, #4
   26c3a:	d000      	beq.n	26c3e <__aeabi_ui2f+0x4a>
   26c3c:	3404      	adds	r4, #4
   26c3e:	0162      	lsls	r2, r4, #5
   26c40:	d412      	bmi.n	26c68 <__aeabi_ui2f+0x74>
   26c42:	01a4      	lsls	r4, r4, #6
   26c44:	0a64      	lsrs	r4, r4, #9
   26c46:	b2db      	uxtb	r3, r3
   26c48:	e7e3      	b.n	26c12 <__aeabi_ui2f+0x1e>
   26c4a:	2300      	movs	r3, #0
   26c4c:	2400      	movs	r4, #0
   26c4e:	e7e0      	b.n	26c12 <__aeabi_ui2f+0x1e>
   26c50:	22b9      	movs	r2, #185	; 0xb9
   26c52:	0021      	movs	r1, r4
   26c54:	1ad2      	subs	r2, r2, r3
   26c56:	4091      	lsls	r1, r2
   26c58:	000a      	movs	r2, r1
   26c5a:	1e51      	subs	r1, r2, #1
   26c5c:	418a      	sbcs	r2, r1
   26c5e:	2105      	movs	r1, #5
   26c60:	1a09      	subs	r1, r1, r0
   26c62:	40cc      	lsrs	r4, r1
   26c64:	4314      	orrs	r4, r2
   26c66:	e7db      	b.n	26c20 <__aeabi_ui2f+0x2c>
   26c68:	4b04      	ldr	r3, [pc, #16]	; (26c7c <__aeabi_ui2f+0x88>)
   26c6a:	401c      	ands	r4, r3
   26c6c:	239f      	movs	r3, #159	; 0x9f
   26c6e:	01a4      	lsls	r4, r4, #6
   26c70:	1a1b      	subs	r3, r3, r0
   26c72:	0a64      	lsrs	r4, r4, #9
   26c74:	b2db      	uxtb	r3, r3
   26c76:	e7cc      	b.n	26c12 <__aeabi_ui2f+0x1e>
   26c78:	0022      	movs	r2, r4
   26c7a:	e7d7      	b.n	26c2c <__aeabi_ui2f+0x38>
   26c7c:	fbffffff 	.word	0xfbffffff

00026c80 <__aeabi_dadd>:
   26c80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   26c82:	4645      	mov	r5, r8
   26c84:	46de      	mov	lr, fp
   26c86:	4657      	mov	r7, sl
   26c88:	464e      	mov	r6, r9
   26c8a:	030c      	lsls	r4, r1, #12
   26c8c:	b5e0      	push	{r5, r6, r7, lr}
   26c8e:	004e      	lsls	r6, r1, #1
   26c90:	0fc9      	lsrs	r1, r1, #31
   26c92:	4688      	mov	r8, r1
   26c94:	000d      	movs	r5, r1
   26c96:	0a61      	lsrs	r1, r4, #9
   26c98:	0f44      	lsrs	r4, r0, #29
   26c9a:	430c      	orrs	r4, r1
   26c9c:	00c7      	lsls	r7, r0, #3
   26c9e:	0319      	lsls	r1, r3, #12
   26ca0:	0058      	lsls	r0, r3, #1
   26ca2:	0fdb      	lsrs	r3, r3, #31
   26ca4:	469b      	mov	fp, r3
   26ca6:	0a4b      	lsrs	r3, r1, #9
   26ca8:	0f51      	lsrs	r1, r2, #29
   26caa:	430b      	orrs	r3, r1
   26cac:	0d76      	lsrs	r6, r6, #21
   26cae:	0d40      	lsrs	r0, r0, #21
   26cb0:	0019      	movs	r1, r3
   26cb2:	00d2      	lsls	r2, r2, #3
   26cb4:	45d8      	cmp	r8, fp
   26cb6:	d100      	bne.n	26cba <__aeabi_dadd+0x3a>
   26cb8:	e0ae      	b.n	26e18 <__aeabi_dadd+0x198>
   26cba:	1a35      	subs	r5, r6, r0
   26cbc:	2d00      	cmp	r5, #0
   26cbe:	dc00      	bgt.n	26cc2 <__aeabi_dadd+0x42>
   26cc0:	e0f6      	b.n	26eb0 <__aeabi_dadd+0x230>
   26cc2:	2800      	cmp	r0, #0
   26cc4:	d10f      	bne.n	26ce6 <__aeabi_dadd+0x66>
   26cc6:	4313      	orrs	r3, r2
   26cc8:	d100      	bne.n	26ccc <__aeabi_dadd+0x4c>
   26cca:	e0db      	b.n	26e84 <__aeabi_dadd+0x204>
   26ccc:	1e6b      	subs	r3, r5, #1
   26cce:	2b00      	cmp	r3, #0
   26cd0:	d000      	beq.n	26cd4 <__aeabi_dadd+0x54>
   26cd2:	e137      	b.n	26f44 <__aeabi_dadd+0x2c4>
   26cd4:	1aba      	subs	r2, r7, r2
   26cd6:	4297      	cmp	r7, r2
   26cd8:	41bf      	sbcs	r7, r7
   26cda:	1a64      	subs	r4, r4, r1
   26cdc:	427f      	negs	r7, r7
   26cde:	1be4      	subs	r4, r4, r7
   26ce0:	2601      	movs	r6, #1
   26ce2:	0017      	movs	r7, r2
   26ce4:	e024      	b.n	26d30 <__aeabi_dadd+0xb0>
   26ce6:	4bc6      	ldr	r3, [pc, #792]	; (27000 <__aeabi_dadd+0x380>)
   26ce8:	429e      	cmp	r6, r3
   26cea:	d04d      	beq.n	26d88 <__aeabi_dadd+0x108>
   26cec:	2380      	movs	r3, #128	; 0x80
   26cee:	041b      	lsls	r3, r3, #16
   26cf0:	4319      	orrs	r1, r3
   26cf2:	2d38      	cmp	r5, #56	; 0x38
   26cf4:	dd00      	ble.n	26cf8 <__aeabi_dadd+0x78>
   26cf6:	e107      	b.n	26f08 <__aeabi_dadd+0x288>
   26cf8:	2d1f      	cmp	r5, #31
   26cfa:	dd00      	ble.n	26cfe <__aeabi_dadd+0x7e>
   26cfc:	e138      	b.n	26f70 <__aeabi_dadd+0x2f0>
   26cfe:	2020      	movs	r0, #32
   26d00:	1b43      	subs	r3, r0, r5
   26d02:	469a      	mov	sl, r3
   26d04:	000b      	movs	r3, r1
   26d06:	4650      	mov	r0, sl
   26d08:	4083      	lsls	r3, r0
   26d0a:	4699      	mov	r9, r3
   26d0c:	0013      	movs	r3, r2
   26d0e:	4648      	mov	r0, r9
   26d10:	40eb      	lsrs	r3, r5
   26d12:	4318      	orrs	r0, r3
   26d14:	0003      	movs	r3, r0
   26d16:	4650      	mov	r0, sl
   26d18:	4082      	lsls	r2, r0
   26d1a:	1e50      	subs	r0, r2, #1
   26d1c:	4182      	sbcs	r2, r0
   26d1e:	40e9      	lsrs	r1, r5
   26d20:	431a      	orrs	r2, r3
   26d22:	1aba      	subs	r2, r7, r2
   26d24:	1a61      	subs	r1, r4, r1
   26d26:	4297      	cmp	r7, r2
   26d28:	41a4      	sbcs	r4, r4
   26d2a:	0017      	movs	r7, r2
   26d2c:	4264      	negs	r4, r4
   26d2e:	1b0c      	subs	r4, r1, r4
   26d30:	0223      	lsls	r3, r4, #8
   26d32:	d562      	bpl.n	26dfa <__aeabi_dadd+0x17a>
   26d34:	0264      	lsls	r4, r4, #9
   26d36:	0a65      	lsrs	r5, r4, #9
   26d38:	2d00      	cmp	r5, #0
   26d3a:	d100      	bne.n	26d3e <__aeabi_dadd+0xbe>
   26d3c:	e0df      	b.n	26efe <__aeabi_dadd+0x27e>
   26d3e:	0028      	movs	r0, r5
   26d40:	f001 fd98 	bl	28874 <__clzsi2>
   26d44:	0003      	movs	r3, r0
   26d46:	3b08      	subs	r3, #8
   26d48:	2b1f      	cmp	r3, #31
   26d4a:	dd00      	ble.n	26d4e <__aeabi_dadd+0xce>
   26d4c:	e0d2      	b.n	26ef4 <__aeabi_dadd+0x274>
   26d4e:	2220      	movs	r2, #32
   26d50:	003c      	movs	r4, r7
   26d52:	1ad2      	subs	r2, r2, r3
   26d54:	409d      	lsls	r5, r3
   26d56:	40d4      	lsrs	r4, r2
   26d58:	409f      	lsls	r7, r3
   26d5a:	4325      	orrs	r5, r4
   26d5c:	429e      	cmp	r6, r3
   26d5e:	dd00      	ble.n	26d62 <__aeabi_dadd+0xe2>
   26d60:	e0c4      	b.n	26eec <__aeabi_dadd+0x26c>
   26d62:	1b9e      	subs	r6, r3, r6
   26d64:	1c73      	adds	r3, r6, #1
   26d66:	2b1f      	cmp	r3, #31
   26d68:	dd00      	ble.n	26d6c <__aeabi_dadd+0xec>
   26d6a:	e0f1      	b.n	26f50 <__aeabi_dadd+0x2d0>
   26d6c:	2220      	movs	r2, #32
   26d6e:	0038      	movs	r0, r7
   26d70:	0029      	movs	r1, r5
   26d72:	1ad2      	subs	r2, r2, r3
   26d74:	40d8      	lsrs	r0, r3
   26d76:	4091      	lsls	r1, r2
   26d78:	4097      	lsls	r7, r2
   26d7a:	002c      	movs	r4, r5
   26d7c:	4301      	orrs	r1, r0
   26d7e:	1e78      	subs	r0, r7, #1
   26d80:	4187      	sbcs	r7, r0
   26d82:	40dc      	lsrs	r4, r3
   26d84:	2600      	movs	r6, #0
   26d86:	430f      	orrs	r7, r1
   26d88:	077b      	lsls	r3, r7, #29
   26d8a:	d009      	beq.n	26da0 <__aeabi_dadd+0x120>
   26d8c:	230f      	movs	r3, #15
   26d8e:	403b      	ands	r3, r7
   26d90:	2b04      	cmp	r3, #4
   26d92:	d005      	beq.n	26da0 <__aeabi_dadd+0x120>
   26d94:	1d3b      	adds	r3, r7, #4
   26d96:	42bb      	cmp	r3, r7
   26d98:	41bf      	sbcs	r7, r7
   26d9a:	427f      	negs	r7, r7
   26d9c:	19e4      	adds	r4, r4, r7
   26d9e:	001f      	movs	r7, r3
   26da0:	0223      	lsls	r3, r4, #8
   26da2:	d52c      	bpl.n	26dfe <__aeabi_dadd+0x17e>
   26da4:	4b96      	ldr	r3, [pc, #600]	; (27000 <__aeabi_dadd+0x380>)
   26da6:	3601      	adds	r6, #1
   26da8:	429e      	cmp	r6, r3
   26daa:	d100      	bne.n	26dae <__aeabi_dadd+0x12e>
   26dac:	e09a      	b.n	26ee4 <__aeabi_dadd+0x264>
   26dae:	4645      	mov	r5, r8
   26db0:	4b94      	ldr	r3, [pc, #592]	; (27004 <__aeabi_dadd+0x384>)
   26db2:	08ff      	lsrs	r7, r7, #3
   26db4:	401c      	ands	r4, r3
   26db6:	0760      	lsls	r0, r4, #29
   26db8:	0576      	lsls	r6, r6, #21
   26dba:	0264      	lsls	r4, r4, #9
   26dbc:	4307      	orrs	r7, r0
   26dbe:	0b24      	lsrs	r4, r4, #12
   26dc0:	0d76      	lsrs	r6, r6, #21
   26dc2:	2100      	movs	r1, #0
   26dc4:	0324      	lsls	r4, r4, #12
   26dc6:	0b23      	lsrs	r3, r4, #12
   26dc8:	0d0c      	lsrs	r4, r1, #20
   26dca:	4a8f      	ldr	r2, [pc, #572]	; (27008 <__aeabi_dadd+0x388>)
   26dcc:	0524      	lsls	r4, r4, #20
   26dce:	431c      	orrs	r4, r3
   26dd0:	4014      	ands	r4, r2
   26dd2:	0533      	lsls	r3, r6, #20
   26dd4:	4323      	orrs	r3, r4
   26dd6:	005b      	lsls	r3, r3, #1
   26dd8:	07ed      	lsls	r5, r5, #31
   26dda:	085b      	lsrs	r3, r3, #1
   26ddc:	432b      	orrs	r3, r5
   26dde:	0038      	movs	r0, r7
   26de0:	0019      	movs	r1, r3
   26de2:	bc3c      	pop	{r2, r3, r4, r5}
   26de4:	4690      	mov	r8, r2
   26de6:	4699      	mov	r9, r3
   26de8:	46a2      	mov	sl, r4
   26dea:	46ab      	mov	fp, r5
   26dec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   26dee:	4664      	mov	r4, ip
   26df0:	4304      	orrs	r4, r0
   26df2:	d100      	bne.n	26df6 <__aeabi_dadd+0x176>
   26df4:	e211      	b.n	2721a <__aeabi_dadd+0x59a>
   26df6:	0004      	movs	r4, r0
   26df8:	4667      	mov	r7, ip
   26dfa:	077b      	lsls	r3, r7, #29
   26dfc:	d1c6      	bne.n	26d8c <__aeabi_dadd+0x10c>
   26dfe:	4645      	mov	r5, r8
   26e00:	0760      	lsls	r0, r4, #29
   26e02:	08ff      	lsrs	r7, r7, #3
   26e04:	4307      	orrs	r7, r0
   26e06:	08e4      	lsrs	r4, r4, #3
   26e08:	4b7d      	ldr	r3, [pc, #500]	; (27000 <__aeabi_dadd+0x380>)
   26e0a:	429e      	cmp	r6, r3
   26e0c:	d030      	beq.n	26e70 <__aeabi_dadd+0x1f0>
   26e0e:	0324      	lsls	r4, r4, #12
   26e10:	0576      	lsls	r6, r6, #21
   26e12:	0b24      	lsrs	r4, r4, #12
   26e14:	0d76      	lsrs	r6, r6, #21
   26e16:	e7d4      	b.n	26dc2 <__aeabi_dadd+0x142>
   26e18:	1a33      	subs	r3, r6, r0
   26e1a:	469a      	mov	sl, r3
   26e1c:	2b00      	cmp	r3, #0
   26e1e:	dd78      	ble.n	26f12 <__aeabi_dadd+0x292>
   26e20:	2800      	cmp	r0, #0
   26e22:	d031      	beq.n	26e88 <__aeabi_dadd+0x208>
   26e24:	4876      	ldr	r0, [pc, #472]	; (27000 <__aeabi_dadd+0x380>)
   26e26:	4286      	cmp	r6, r0
   26e28:	d0ae      	beq.n	26d88 <__aeabi_dadd+0x108>
   26e2a:	2080      	movs	r0, #128	; 0x80
   26e2c:	0400      	lsls	r0, r0, #16
   26e2e:	4301      	orrs	r1, r0
   26e30:	4653      	mov	r3, sl
   26e32:	2b38      	cmp	r3, #56	; 0x38
   26e34:	dc00      	bgt.n	26e38 <__aeabi_dadd+0x1b8>
   26e36:	e0e9      	b.n	2700c <__aeabi_dadd+0x38c>
   26e38:	430a      	orrs	r2, r1
   26e3a:	1e51      	subs	r1, r2, #1
   26e3c:	418a      	sbcs	r2, r1
   26e3e:	2100      	movs	r1, #0
   26e40:	19d2      	adds	r2, r2, r7
   26e42:	42ba      	cmp	r2, r7
   26e44:	41bf      	sbcs	r7, r7
   26e46:	1909      	adds	r1, r1, r4
   26e48:	427c      	negs	r4, r7
   26e4a:	0017      	movs	r7, r2
   26e4c:	190c      	adds	r4, r1, r4
   26e4e:	0223      	lsls	r3, r4, #8
   26e50:	d5d3      	bpl.n	26dfa <__aeabi_dadd+0x17a>
   26e52:	4b6b      	ldr	r3, [pc, #428]	; (27000 <__aeabi_dadd+0x380>)
   26e54:	3601      	adds	r6, #1
   26e56:	429e      	cmp	r6, r3
   26e58:	d100      	bne.n	26e5c <__aeabi_dadd+0x1dc>
   26e5a:	e13a      	b.n	270d2 <__aeabi_dadd+0x452>
   26e5c:	2001      	movs	r0, #1
   26e5e:	4b69      	ldr	r3, [pc, #420]	; (27004 <__aeabi_dadd+0x384>)
   26e60:	401c      	ands	r4, r3
   26e62:	087b      	lsrs	r3, r7, #1
   26e64:	4007      	ands	r7, r0
   26e66:	431f      	orrs	r7, r3
   26e68:	07e0      	lsls	r0, r4, #31
   26e6a:	4307      	orrs	r7, r0
   26e6c:	0864      	lsrs	r4, r4, #1
   26e6e:	e78b      	b.n	26d88 <__aeabi_dadd+0x108>
   26e70:	0023      	movs	r3, r4
   26e72:	433b      	orrs	r3, r7
   26e74:	d100      	bne.n	26e78 <__aeabi_dadd+0x1f8>
   26e76:	e1cb      	b.n	27210 <__aeabi_dadd+0x590>
   26e78:	2280      	movs	r2, #128	; 0x80
   26e7a:	0312      	lsls	r2, r2, #12
   26e7c:	4314      	orrs	r4, r2
   26e7e:	0324      	lsls	r4, r4, #12
   26e80:	0b24      	lsrs	r4, r4, #12
   26e82:	e79e      	b.n	26dc2 <__aeabi_dadd+0x142>
   26e84:	002e      	movs	r6, r5
   26e86:	e77f      	b.n	26d88 <__aeabi_dadd+0x108>
   26e88:	0008      	movs	r0, r1
   26e8a:	4310      	orrs	r0, r2
   26e8c:	d100      	bne.n	26e90 <__aeabi_dadd+0x210>
   26e8e:	e0b4      	b.n	26ffa <__aeabi_dadd+0x37a>
   26e90:	1e58      	subs	r0, r3, #1
   26e92:	2800      	cmp	r0, #0
   26e94:	d000      	beq.n	26e98 <__aeabi_dadd+0x218>
   26e96:	e0de      	b.n	27056 <__aeabi_dadd+0x3d6>
   26e98:	18ba      	adds	r2, r7, r2
   26e9a:	42ba      	cmp	r2, r7
   26e9c:	419b      	sbcs	r3, r3
   26e9e:	1864      	adds	r4, r4, r1
   26ea0:	425b      	negs	r3, r3
   26ea2:	18e4      	adds	r4, r4, r3
   26ea4:	0017      	movs	r7, r2
   26ea6:	2601      	movs	r6, #1
   26ea8:	0223      	lsls	r3, r4, #8
   26eaa:	d5a6      	bpl.n	26dfa <__aeabi_dadd+0x17a>
   26eac:	2602      	movs	r6, #2
   26eae:	e7d5      	b.n	26e5c <__aeabi_dadd+0x1dc>
   26eb0:	2d00      	cmp	r5, #0
   26eb2:	d16e      	bne.n	26f92 <__aeabi_dadd+0x312>
   26eb4:	1c70      	adds	r0, r6, #1
   26eb6:	0540      	lsls	r0, r0, #21
   26eb8:	0d40      	lsrs	r0, r0, #21
   26eba:	2801      	cmp	r0, #1
   26ebc:	dc00      	bgt.n	26ec0 <__aeabi_dadd+0x240>
   26ebe:	e0f9      	b.n	270b4 <__aeabi_dadd+0x434>
   26ec0:	1ab8      	subs	r0, r7, r2
   26ec2:	4684      	mov	ip, r0
   26ec4:	4287      	cmp	r7, r0
   26ec6:	4180      	sbcs	r0, r0
   26ec8:	1ae5      	subs	r5, r4, r3
   26eca:	4240      	negs	r0, r0
   26ecc:	1a2d      	subs	r5, r5, r0
   26ece:	0228      	lsls	r0, r5, #8
   26ed0:	d400      	bmi.n	26ed4 <__aeabi_dadd+0x254>
   26ed2:	e089      	b.n	26fe8 <__aeabi_dadd+0x368>
   26ed4:	1bd7      	subs	r7, r2, r7
   26ed6:	42ba      	cmp	r2, r7
   26ed8:	4192      	sbcs	r2, r2
   26eda:	1b1c      	subs	r4, r3, r4
   26edc:	4252      	negs	r2, r2
   26ede:	1aa5      	subs	r5, r4, r2
   26ee0:	46d8      	mov	r8, fp
   26ee2:	e729      	b.n	26d38 <__aeabi_dadd+0xb8>
   26ee4:	4645      	mov	r5, r8
   26ee6:	2400      	movs	r4, #0
   26ee8:	2700      	movs	r7, #0
   26eea:	e76a      	b.n	26dc2 <__aeabi_dadd+0x142>
   26eec:	4c45      	ldr	r4, [pc, #276]	; (27004 <__aeabi_dadd+0x384>)
   26eee:	1af6      	subs	r6, r6, r3
   26ef0:	402c      	ands	r4, r5
   26ef2:	e749      	b.n	26d88 <__aeabi_dadd+0x108>
   26ef4:	003d      	movs	r5, r7
   26ef6:	3828      	subs	r0, #40	; 0x28
   26ef8:	4085      	lsls	r5, r0
   26efa:	2700      	movs	r7, #0
   26efc:	e72e      	b.n	26d5c <__aeabi_dadd+0xdc>
   26efe:	0038      	movs	r0, r7
   26f00:	f001 fcb8 	bl	28874 <__clzsi2>
   26f04:	3020      	adds	r0, #32
   26f06:	e71d      	b.n	26d44 <__aeabi_dadd+0xc4>
   26f08:	430a      	orrs	r2, r1
   26f0a:	1e51      	subs	r1, r2, #1
   26f0c:	418a      	sbcs	r2, r1
   26f0e:	2100      	movs	r1, #0
   26f10:	e707      	b.n	26d22 <__aeabi_dadd+0xa2>
   26f12:	2b00      	cmp	r3, #0
   26f14:	d000      	beq.n	26f18 <__aeabi_dadd+0x298>
   26f16:	e0f3      	b.n	27100 <__aeabi_dadd+0x480>
   26f18:	1c70      	adds	r0, r6, #1
   26f1a:	0543      	lsls	r3, r0, #21
   26f1c:	0d5b      	lsrs	r3, r3, #21
   26f1e:	2b01      	cmp	r3, #1
   26f20:	dc00      	bgt.n	26f24 <__aeabi_dadd+0x2a4>
   26f22:	e0ad      	b.n	27080 <__aeabi_dadd+0x400>
   26f24:	4b36      	ldr	r3, [pc, #216]	; (27000 <__aeabi_dadd+0x380>)
   26f26:	4298      	cmp	r0, r3
   26f28:	d100      	bne.n	26f2c <__aeabi_dadd+0x2ac>
   26f2a:	e0d1      	b.n	270d0 <__aeabi_dadd+0x450>
   26f2c:	18ba      	adds	r2, r7, r2
   26f2e:	42ba      	cmp	r2, r7
   26f30:	41bf      	sbcs	r7, r7
   26f32:	1864      	adds	r4, r4, r1
   26f34:	427f      	negs	r7, r7
   26f36:	19e4      	adds	r4, r4, r7
   26f38:	07e7      	lsls	r7, r4, #31
   26f3a:	0852      	lsrs	r2, r2, #1
   26f3c:	4317      	orrs	r7, r2
   26f3e:	0864      	lsrs	r4, r4, #1
   26f40:	0006      	movs	r6, r0
   26f42:	e721      	b.n	26d88 <__aeabi_dadd+0x108>
   26f44:	482e      	ldr	r0, [pc, #184]	; (27000 <__aeabi_dadd+0x380>)
   26f46:	4285      	cmp	r5, r0
   26f48:	d100      	bne.n	26f4c <__aeabi_dadd+0x2cc>
   26f4a:	e093      	b.n	27074 <__aeabi_dadd+0x3f4>
   26f4c:	001d      	movs	r5, r3
   26f4e:	e6d0      	b.n	26cf2 <__aeabi_dadd+0x72>
   26f50:	0029      	movs	r1, r5
   26f52:	3e1f      	subs	r6, #31
   26f54:	40f1      	lsrs	r1, r6
   26f56:	2b20      	cmp	r3, #32
   26f58:	d100      	bne.n	26f5c <__aeabi_dadd+0x2dc>
   26f5a:	e08d      	b.n	27078 <__aeabi_dadd+0x3f8>
   26f5c:	2240      	movs	r2, #64	; 0x40
   26f5e:	1ad3      	subs	r3, r2, r3
   26f60:	409d      	lsls	r5, r3
   26f62:	432f      	orrs	r7, r5
   26f64:	1e7d      	subs	r5, r7, #1
   26f66:	41af      	sbcs	r7, r5
   26f68:	2400      	movs	r4, #0
   26f6a:	430f      	orrs	r7, r1
   26f6c:	2600      	movs	r6, #0
   26f6e:	e744      	b.n	26dfa <__aeabi_dadd+0x17a>
   26f70:	002b      	movs	r3, r5
   26f72:	0008      	movs	r0, r1
   26f74:	3b20      	subs	r3, #32
   26f76:	40d8      	lsrs	r0, r3
   26f78:	0003      	movs	r3, r0
   26f7a:	2d20      	cmp	r5, #32
   26f7c:	d100      	bne.n	26f80 <__aeabi_dadd+0x300>
   26f7e:	e07d      	b.n	2707c <__aeabi_dadd+0x3fc>
   26f80:	2040      	movs	r0, #64	; 0x40
   26f82:	1b45      	subs	r5, r0, r5
   26f84:	40a9      	lsls	r1, r5
   26f86:	430a      	orrs	r2, r1
   26f88:	1e51      	subs	r1, r2, #1
   26f8a:	418a      	sbcs	r2, r1
   26f8c:	2100      	movs	r1, #0
   26f8e:	431a      	orrs	r2, r3
   26f90:	e6c7      	b.n	26d22 <__aeabi_dadd+0xa2>
   26f92:	2e00      	cmp	r6, #0
   26f94:	d050      	beq.n	27038 <__aeabi_dadd+0x3b8>
   26f96:	4e1a      	ldr	r6, [pc, #104]	; (27000 <__aeabi_dadd+0x380>)
   26f98:	42b0      	cmp	r0, r6
   26f9a:	d057      	beq.n	2704c <__aeabi_dadd+0x3cc>
   26f9c:	2680      	movs	r6, #128	; 0x80
   26f9e:	426b      	negs	r3, r5
   26fa0:	4699      	mov	r9, r3
   26fa2:	0436      	lsls	r6, r6, #16
   26fa4:	4334      	orrs	r4, r6
   26fa6:	464b      	mov	r3, r9
   26fa8:	2b38      	cmp	r3, #56	; 0x38
   26faa:	dd00      	ble.n	26fae <__aeabi_dadd+0x32e>
   26fac:	e0d6      	b.n	2715c <__aeabi_dadd+0x4dc>
   26fae:	2b1f      	cmp	r3, #31
   26fb0:	dd00      	ble.n	26fb4 <__aeabi_dadd+0x334>
   26fb2:	e135      	b.n	27220 <__aeabi_dadd+0x5a0>
   26fb4:	2620      	movs	r6, #32
   26fb6:	1af5      	subs	r5, r6, r3
   26fb8:	0026      	movs	r6, r4
   26fba:	40ae      	lsls	r6, r5
   26fbc:	46b2      	mov	sl, r6
   26fbe:	003e      	movs	r6, r7
   26fc0:	40de      	lsrs	r6, r3
   26fc2:	46ac      	mov	ip, r5
   26fc4:	0035      	movs	r5, r6
   26fc6:	4656      	mov	r6, sl
   26fc8:	432e      	orrs	r6, r5
   26fca:	4665      	mov	r5, ip
   26fcc:	40af      	lsls	r7, r5
   26fce:	1e7d      	subs	r5, r7, #1
   26fd0:	41af      	sbcs	r7, r5
   26fd2:	40dc      	lsrs	r4, r3
   26fd4:	4337      	orrs	r7, r6
   26fd6:	1bd7      	subs	r7, r2, r7
   26fd8:	42ba      	cmp	r2, r7
   26fda:	4192      	sbcs	r2, r2
   26fdc:	1b0c      	subs	r4, r1, r4
   26fde:	4252      	negs	r2, r2
   26fe0:	1aa4      	subs	r4, r4, r2
   26fe2:	0006      	movs	r6, r0
   26fe4:	46d8      	mov	r8, fp
   26fe6:	e6a3      	b.n	26d30 <__aeabi_dadd+0xb0>
   26fe8:	4664      	mov	r4, ip
   26fea:	4667      	mov	r7, ip
   26fec:	432c      	orrs	r4, r5
   26fee:	d000      	beq.n	26ff2 <__aeabi_dadd+0x372>
   26ff0:	e6a2      	b.n	26d38 <__aeabi_dadd+0xb8>
   26ff2:	2500      	movs	r5, #0
   26ff4:	2600      	movs	r6, #0
   26ff6:	2700      	movs	r7, #0
   26ff8:	e706      	b.n	26e08 <__aeabi_dadd+0x188>
   26ffa:	001e      	movs	r6, r3
   26ffc:	e6c4      	b.n	26d88 <__aeabi_dadd+0x108>
   26ffe:	46c0      	nop			; (mov r8, r8)
   27000:	000007ff 	.word	0x000007ff
   27004:	ff7fffff 	.word	0xff7fffff
   27008:	800fffff 	.word	0x800fffff
   2700c:	2b1f      	cmp	r3, #31
   2700e:	dc63      	bgt.n	270d8 <__aeabi_dadd+0x458>
   27010:	2020      	movs	r0, #32
   27012:	1ac3      	subs	r3, r0, r3
   27014:	0008      	movs	r0, r1
   27016:	4098      	lsls	r0, r3
   27018:	469c      	mov	ip, r3
   2701a:	4683      	mov	fp, r0
   2701c:	4653      	mov	r3, sl
   2701e:	0010      	movs	r0, r2
   27020:	40d8      	lsrs	r0, r3
   27022:	0003      	movs	r3, r0
   27024:	4658      	mov	r0, fp
   27026:	4318      	orrs	r0, r3
   27028:	4663      	mov	r3, ip
   2702a:	409a      	lsls	r2, r3
   2702c:	1e53      	subs	r3, r2, #1
   2702e:	419a      	sbcs	r2, r3
   27030:	4653      	mov	r3, sl
   27032:	4302      	orrs	r2, r0
   27034:	40d9      	lsrs	r1, r3
   27036:	e703      	b.n	26e40 <__aeabi_dadd+0x1c0>
   27038:	0026      	movs	r6, r4
   2703a:	433e      	orrs	r6, r7
   2703c:	d006      	beq.n	2704c <__aeabi_dadd+0x3cc>
   2703e:	43eb      	mvns	r3, r5
   27040:	4699      	mov	r9, r3
   27042:	2b00      	cmp	r3, #0
   27044:	d0c7      	beq.n	26fd6 <__aeabi_dadd+0x356>
   27046:	4e94      	ldr	r6, [pc, #592]	; (27298 <__aeabi_dadd+0x618>)
   27048:	42b0      	cmp	r0, r6
   2704a:	d1ac      	bne.n	26fa6 <__aeabi_dadd+0x326>
   2704c:	000c      	movs	r4, r1
   2704e:	0017      	movs	r7, r2
   27050:	0006      	movs	r6, r0
   27052:	46d8      	mov	r8, fp
   27054:	e698      	b.n	26d88 <__aeabi_dadd+0x108>
   27056:	4b90      	ldr	r3, [pc, #576]	; (27298 <__aeabi_dadd+0x618>)
   27058:	459a      	cmp	sl, r3
   2705a:	d00b      	beq.n	27074 <__aeabi_dadd+0x3f4>
   2705c:	4682      	mov	sl, r0
   2705e:	e6e7      	b.n	26e30 <__aeabi_dadd+0x1b0>
   27060:	2800      	cmp	r0, #0
   27062:	d000      	beq.n	27066 <__aeabi_dadd+0x3e6>
   27064:	e09e      	b.n	271a4 <__aeabi_dadd+0x524>
   27066:	0018      	movs	r0, r3
   27068:	4310      	orrs	r0, r2
   2706a:	d100      	bne.n	2706e <__aeabi_dadd+0x3ee>
   2706c:	e0e9      	b.n	27242 <__aeabi_dadd+0x5c2>
   2706e:	001c      	movs	r4, r3
   27070:	0017      	movs	r7, r2
   27072:	46d8      	mov	r8, fp
   27074:	4e88      	ldr	r6, [pc, #544]	; (27298 <__aeabi_dadd+0x618>)
   27076:	e687      	b.n	26d88 <__aeabi_dadd+0x108>
   27078:	2500      	movs	r5, #0
   2707a:	e772      	b.n	26f62 <__aeabi_dadd+0x2e2>
   2707c:	2100      	movs	r1, #0
   2707e:	e782      	b.n	26f86 <__aeabi_dadd+0x306>
   27080:	0023      	movs	r3, r4
   27082:	433b      	orrs	r3, r7
   27084:	2e00      	cmp	r6, #0
   27086:	d000      	beq.n	2708a <__aeabi_dadd+0x40a>
   27088:	e0ab      	b.n	271e2 <__aeabi_dadd+0x562>
   2708a:	2b00      	cmp	r3, #0
   2708c:	d100      	bne.n	27090 <__aeabi_dadd+0x410>
   2708e:	e0e7      	b.n	27260 <__aeabi_dadd+0x5e0>
   27090:	000b      	movs	r3, r1
   27092:	4313      	orrs	r3, r2
   27094:	d100      	bne.n	27098 <__aeabi_dadd+0x418>
   27096:	e677      	b.n	26d88 <__aeabi_dadd+0x108>
   27098:	18ba      	adds	r2, r7, r2
   2709a:	42ba      	cmp	r2, r7
   2709c:	41bf      	sbcs	r7, r7
   2709e:	1864      	adds	r4, r4, r1
   270a0:	427f      	negs	r7, r7
   270a2:	19e4      	adds	r4, r4, r7
   270a4:	0223      	lsls	r3, r4, #8
   270a6:	d400      	bmi.n	270aa <__aeabi_dadd+0x42a>
   270a8:	e0f2      	b.n	27290 <__aeabi_dadd+0x610>
   270aa:	4b7c      	ldr	r3, [pc, #496]	; (2729c <__aeabi_dadd+0x61c>)
   270ac:	0017      	movs	r7, r2
   270ae:	401c      	ands	r4, r3
   270b0:	0006      	movs	r6, r0
   270b2:	e669      	b.n	26d88 <__aeabi_dadd+0x108>
   270b4:	0020      	movs	r0, r4
   270b6:	4338      	orrs	r0, r7
   270b8:	2e00      	cmp	r6, #0
   270ba:	d1d1      	bne.n	27060 <__aeabi_dadd+0x3e0>
   270bc:	2800      	cmp	r0, #0
   270be:	d15b      	bne.n	27178 <__aeabi_dadd+0x4f8>
   270c0:	001c      	movs	r4, r3
   270c2:	4314      	orrs	r4, r2
   270c4:	d100      	bne.n	270c8 <__aeabi_dadd+0x448>
   270c6:	e0a8      	b.n	2721a <__aeabi_dadd+0x59a>
   270c8:	001c      	movs	r4, r3
   270ca:	0017      	movs	r7, r2
   270cc:	46d8      	mov	r8, fp
   270ce:	e65b      	b.n	26d88 <__aeabi_dadd+0x108>
   270d0:	0006      	movs	r6, r0
   270d2:	2400      	movs	r4, #0
   270d4:	2700      	movs	r7, #0
   270d6:	e697      	b.n	26e08 <__aeabi_dadd+0x188>
   270d8:	4650      	mov	r0, sl
   270da:	000b      	movs	r3, r1
   270dc:	3820      	subs	r0, #32
   270de:	40c3      	lsrs	r3, r0
   270e0:	4699      	mov	r9, r3
   270e2:	4653      	mov	r3, sl
   270e4:	2b20      	cmp	r3, #32
   270e6:	d100      	bne.n	270ea <__aeabi_dadd+0x46a>
   270e8:	e095      	b.n	27216 <__aeabi_dadd+0x596>
   270ea:	2340      	movs	r3, #64	; 0x40
   270ec:	4650      	mov	r0, sl
   270ee:	1a1b      	subs	r3, r3, r0
   270f0:	4099      	lsls	r1, r3
   270f2:	430a      	orrs	r2, r1
   270f4:	1e51      	subs	r1, r2, #1
   270f6:	418a      	sbcs	r2, r1
   270f8:	464b      	mov	r3, r9
   270fa:	2100      	movs	r1, #0
   270fc:	431a      	orrs	r2, r3
   270fe:	e69f      	b.n	26e40 <__aeabi_dadd+0x1c0>
   27100:	2e00      	cmp	r6, #0
   27102:	d130      	bne.n	27166 <__aeabi_dadd+0x4e6>
   27104:	0026      	movs	r6, r4
   27106:	433e      	orrs	r6, r7
   27108:	d067      	beq.n	271da <__aeabi_dadd+0x55a>
   2710a:	43db      	mvns	r3, r3
   2710c:	469a      	mov	sl, r3
   2710e:	2b00      	cmp	r3, #0
   27110:	d01c      	beq.n	2714c <__aeabi_dadd+0x4cc>
   27112:	4e61      	ldr	r6, [pc, #388]	; (27298 <__aeabi_dadd+0x618>)
   27114:	42b0      	cmp	r0, r6
   27116:	d060      	beq.n	271da <__aeabi_dadd+0x55a>
   27118:	4653      	mov	r3, sl
   2711a:	2b38      	cmp	r3, #56	; 0x38
   2711c:	dd00      	ble.n	27120 <__aeabi_dadd+0x4a0>
   2711e:	e096      	b.n	2724e <__aeabi_dadd+0x5ce>
   27120:	2b1f      	cmp	r3, #31
   27122:	dd00      	ble.n	27126 <__aeabi_dadd+0x4a6>
   27124:	e09f      	b.n	27266 <__aeabi_dadd+0x5e6>
   27126:	2620      	movs	r6, #32
   27128:	1af3      	subs	r3, r6, r3
   2712a:	0026      	movs	r6, r4
   2712c:	409e      	lsls	r6, r3
   2712e:	469c      	mov	ip, r3
   27130:	46b3      	mov	fp, r6
   27132:	4653      	mov	r3, sl
   27134:	003e      	movs	r6, r7
   27136:	40de      	lsrs	r6, r3
   27138:	0033      	movs	r3, r6
   2713a:	465e      	mov	r6, fp
   2713c:	431e      	orrs	r6, r3
   2713e:	4663      	mov	r3, ip
   27140:	409f      	lsls	r7, r3
   27142:	1e7b      	subs	r3, r7, #1
   27144:	419f      	sbcs	r7, r3
   27146:	4653      	mov	r3, sl
   27148:	40dc      	lsrs	r4, r3
   2714a:	4337      	orrs	r7, r6
   2714c:	18bf      	adds	r7, r7, r2
   2714e:	4297      	cmp	r7, r2
   27150:	4192      	sbcs	r2, r2
   27152:	1864      	adds	r4, r4, r1
   27154:	4252      	negs	r2, r2
   27156:	18a4      	adds	r4, r4, r2
   27158:	0006      	movs	r6, r0
   2715a:	e678      	b.n	26e4e <__aeabi_dadd+0x1ce>
   2715c:	4327      	orrs	r7, r4
   2715e:	1e7c      	subs	r4, r7, #1
   27160:	41a7      	sbcs	r7, r4
   27162:	2400      	movs	r4, #0
   27164:	e737      	b.n	26fd6 <__aeabi_dadd+0x356>
   27166:	4e4c      	ldr	r6, [pc, #304]	; (27298 <__aeabi_dadd+0x618>)
   27168:	42b0      	cmp	r0, r6
   2716a:	d036      	beq.n	271da <__aeabi_dadd+0x55a>
   2716c:	2680      	movs	r6, #128	; 0x80
   2716e:	425b      	negs	r3, r3
   27170:	0436      	lsls	r6, r6, #16
   27172:	469a      	mov	sl, r3
   27174:	4334      	orrs	r4, r6
   27176:	e7cf      	b.n	27118 <__aeabi_dadd+0x498>
   27178:	0018      	movs	r0, r3
   2717a:	4310      	orrs	r0, r2
   2717c:	d100      	bne.n	27180 <__aeabi_dadd+0x500>
   2717e:	e603      	b.n	26d88 <__aeabi_dadd+0x108>
   27180:	1ab8      	subs	r0, r7, r2
   27182:	4684      	mov	ip, r0
   27184:	4567      	cmp	r7, ip
   27186:	41ad      	sbcs	r5, r5
   27188:	1ae0      	subs	r0, r4, r3
   2718a:	426d      	negs	r5, r5
   2718c:	1b40      	subs	r0, r0, r5
   2718e:	0205      	lsls	r5, r0, #8
   27190:	d400      	bmi.n	27194 <__aeabi_dadd+0x514>
   27192:	e62c      	b.n	26dee <__aeabi_dadd+0x16e>
   27194:	1bd7      	subs	r7, r2, r7
   27196:	42ba      	cmp	r2, r7
   27198:	4192      	sbcs	r2, r2
   2719a:	1b1c      	subs	r4, r3, r4
   2719c:	4252      	negs	r2, r2
   2719e:	1aa4      	subs	r4, r4, r2
   271a0:	46d8      	mov	r8, fp
   271a2:	e5f1      	b.n	26d88 <__aeabi_dadd+0x108>
   271a4:	0018      	movs	r0, r3
   271a6:	4310      	orrs	r0, r2
   271a8:	d100      	bne.n	271ac <__aeabi_dadd+0x52c>
   271aa:	e763      	b.n	27074 <__aeabi_dadd+0x3f4>
   271ac:	08f8      	lsrs	r0, r7, #3
   271ae:	0767      	lsls	r7, r4, #29
   271b0:	4307      	orrs	r7, r0
   271b2:	2080      	movs	r0, #128	; 0x80
   271b4:	08e4      	lsrs	r4, r4, #3
   271b6:	0300      	lsls	r0, r0, #12
   271b8:	4204      	tst	r4, r0
   271ba:	d008      	beq.n	271ce <__aeabi_dadd+0x54e>
   271bc:	08dd      	lsrs	r5, r3, #3
   271be:	4205      	tst	r5, r0
   271c0:	d105      	bne.n	271ce <__aeabi_dadd+0x54e>
   271c2:	08d2      	lsrs	r2, r2, #3
   271c4:	0759      	lsls	r1, r3, #29
   271c6:	4311      	orrs	r1, r2
   271c8:	000f      	movs	r7, r1
   271ca:	002c      	movs	r4, r5
   271cc:	46d8      	mov	r8, fp
   271ce:	0f7b      	lsrs	r3, r7, #29
   271d0:	00e4      	lsls	r4, r4, #3
   271d2:	431c      	orrs	r4, r3
   271d4:	00ff      	lsls	r7, r7, #3
   271d6:	4e30      	ldr	r6, [pc, #192]	; (27298 <__aeabi_dadd+0x618>)
   271d8:	e5d6      	b.n	26d88 <__aeabi_dadd+0x108>
   271da:	000c      	movs	r4, r1
   271dc:	0017      	movs	r7, r2
   271de:	0006      	movs	r6, r0
   271e0:	e5d2      	b.n	26d88 <__aeabi_dadd+0x108>
   271e2:	2b00      	cmp	r3, #0
   271e4:	d038      	beq.n	27258 <__aeabi_dadd+0x5d8>
   271e6:	000b      	movs	r3, r1
   271e8:	4313      	orrs	r3, r2
   271ea:	d100      	bne.n	271ee <__aeabi_dadd+0x56e>
   271ec:	e742      	b.n	27074 <__aeabi_dadd+0x3f4>
   271ee:	08f8      	lsrs	r0, r7, #3
   271f0:	0767      	lsls	r7, r4, #29
   271f2:	4307      	orrs	r7, r0
   271f4:	2080      	movs	r0, #128	; 0x80
   271f6:	08e4      	lsrs	r4, r4, #3
   271f8:	0300      	lsls	r0, r0, #12
   271fa:	4204      	tst	r4, r0
   271fc:	d0e7      	beq.n	271ce <__aeabi_dadd+0x54e>
   271fe:	08cb      	lsrs	r3, r1, #3
   27200:	4203      	tst	r3, r0
   27202:	d1e4      	bne.n	271ce <__aeabi_dadd+0x54e>
   27204:	08d2      	lsrs	r2, r2, #3
   27206:	0749      	lsls	r1, r1, #29
   27208:	4311      	orrs	r1, r2
   2720a:	000f      	movs	r7, r1
   2720c:	001c      	movs	r4, r3
   2720e:	e7de      	b.n	271ce <__aeabi_dadd+0x54e>
   27210:	2700      	movs	r7, #0
   27212:	2400      	movs	r4, #0
   27214:	e5d5      	b.n	26dc2 <__aeabi_dadd+0x142>
   27216:	2100      	movs	r1, #0
   27218:	e76b      	b.n	270f2 <__aeabi_dadd+0x472>
   2721a:	2500      	movs	r5, #0
   2721c:	2700      	movs	r7, #0
   2721e:	e5f3      	b.n	26e08 <__aeabi_dadd+0x188>
   27220:	464e      	mov	r6, r9
   27222:	0025      	movs	r5, r4
   27224:	3e20      	subs	r6, #32
   27226:	40f5      	lsrs	r5, r6
   27228:	464b      	mov	r3, r9
   2722a:	002e      	movs	r6, r5
   2722c:	2b20      	cmp	r3, #32
   2722e:	d02d      	beq.n	2728c <__aeabi_dadd+0x60c>
   27230:	2540      	movs	r5, #64	; 0x40
   27232:	1aed      	subs	r5, r5, r3
   27234:	40ac      	lsls	r4, r5
   27236:	4327      	orrs	r7, r4
   27238:	1e7c      	subs	r4, r7, #1
   2723a:	41a7      	sbcs	r7, r4
   2723c:	2400      	movs	r4, #0
   2723e:	4337      	orrs	r7, r6
   27240:	e6c9      	b.n	26fd6 <__aeabi_dadd+0x356>
   27242:	2480      	movs	r4, #128	; 0x80
   27244:	2500      	movs	r5, #0
   27246:	0324      	lsls	r4, r4, #12
   27248:	4e13      	ldr	r6, [pc, #76]	; (27298 <__aeabi_dadd+0x618>)
   2724a:	2700      	movs	r7, #0
   2724c:	e5dc      	b.n	26e08 <__aeabi_dadd+0x188>
   2724e:	4327      	orrs	r7, r4
   27250:	1e7c      	subs	r4, r7, #1
   27252:	41a7      	sbcs	r7, r4
   27254:	2400      	movs	r4, #0
   27256:	e779      	b.n	2714c <__aeabi_dadd+0x4cc>
   27258:	000c      	movs	r4, r1
   2725a:	0017      	movs	r7, r2
   2725c:	4e0e      	ldr	r6, [pc, #56]	; (27298 <__aeabi_dadd+0x618>)
   2725e:	e593      	b.n	26d88 <__aeabi_dadd+0x108>
   27260:	000c      	movs	r4, r1
   27262:	0017      	movs	r7, r2
   27264:	e590      	b.n	26d88 <__aeabi_dadd+0x108>
   27266:	4656      	mov	r6, sl
   27268:	0023      	movs	r3, r4
   2726a:	3e20      	subs	r6, #32
   2726c:	40f3      	lsrs	r3, r6
   2726e:	4699      	mov	r9, r3
   27270:	4653      	mov	r3, sl
   27272:	2b20      	cmp	r3, #32
   27274:	d00e      	beq.n	27294 <__aeabi_dadd+0x614>
   27276:	2340      	movs	r3, #64	; 0x40
   27278:	4656      	mov	r6, sl
   2727a:	1b9b      	subs	r3, r3, r6
   2727c:	409c      	lsls	r4, r3
   2727e:	4327      	orrs	r7, r4
   27280:	1e7c      	subs	r4, r7, #1
   27282:	41a7      	sbcs	r7, r4
   27284:	464b      	mov	r3, r9
   27286:	2400      	movs	r4, #0
   27288:	431f      	orrs	r7, r3
   2728a:	e75f      	b.n	2714c <__aeabi_dadd+0x4cc>
   2728c:	2400      	movs	r4, #0
   2728e:	e7d2      	b.n	27236 <__aeabi_dadd+0x5b6>
   27290:	0017      	movs	r7, r2
   27292:	e5b2      	b.n	26dfa <__aeabi_dadd+0x17a>
   27294:	2400      	movs	r4, #0
   27296:	e7f2      	b.n	2727e <__aeabi_dadd+0x5fe>
   27298:	000007ff 	.word	0x000007ff
   2729c:	ff7fffff 	.word	0xff7fffff

000272a0 <__aeabi_ddiv>:
   272a0:	b5f0      	push	{r4, r5, r6, r7, lr}
   272a2:	4657      	mov	r7, sl
   272a4:	4645      	mov	r5, r8
   272a6:	46de      	mov	lr, fp
   272a8:	464e      	mov	r6, r9
   272aa:	b5e0      	push	{r5, r6, r7, lr}
   272ac:	004c      	lsls	r4, r1, #1
   272ae:	030e      	lsls	r6, r1, #12
   272b0:	b087      	sub	sp, #28
   272b2:	4683      	mov	fp, r0
   272b4:	4692      	mov	sl, r2
   272b6:	001d      	movs	r5, r3
   272b8:	4680      	mov	r8, r0
   272ba:	0b36      	lsrs	r6, r6, #12
   272bc:	0d64      	lsrs	r4, r4, #21
   272be:	0fcf      	lsrs	r7, r1, #31
   272c0:	2c00      	cmp	r4, #0
   272c2:	d04f      	beq.n	27364 <__aeabi_ddiv+0xc4>
   272c4:	4b6f      	ldr	r3, [pc, #444]	; (27484 <__aeabi_ddiv+0x1e4>)
   272c6:	429c      	cmp	r4, r3
   272c8:	d035      	beq.n	27336 <__aeabi_ddiv+0x96>
   272ca:	2380      	movs	r3, #128	; 0x80
   272cc:	0f42      	lsrs	r2, r0, #29
   272ce:	041b      	lsls	r3, r3, #16
   272d0:	00f6      	lsls	r6, r6, #3
   272d2:	4313      	orrs	r3, r2
   272d4:	4333      	orrs	r3, r6
   272d6:	4699      	mov	r9, r3
   272d8:	00c3      	lsls	r3, r0, #3
   272da:	4698      	mov	r8, r3
   272dc:	4b6a      	ldr	r3, [pc, #424]	; (27488 <__aeabi_ddiv+0x1e8>)
   272de:	2600      	movs	r6, #0
   272e0:	469c      	mov	ip, r3
   272e2:	2300      	movs	r3, #0
   272e4:	4464      	add	r4, ip
   272e6:	9303      	str	r3, [sp, #12]
   272e8:	032b      	lsls	r3, r5, #12
   272ea:	0b1b      	lsrs	r3, r3, #12
   272ec:	469b      	mov	fp, r3
   272ee:	006b      	lsls	r3, r5, #1
   272f0:	0fed      	lsrs	r5, r5, #31
   272f2:	4650      	mov	r0, sl
   272f4:	0d5b      	lsrs	r3, r3, #21
   272f6:	9501      	str	r5, [sp, #4]
   272f8:	d05e      	beq.n	273b8 <__aeabi_ddiv+0x118>
   272fa:	4a62      	ldr	r2, [pc, #392]	; (27484 <__aeabi_ddiv+0x1e4>)
   272fc:	4293      	cmp	r3, r2
   272fe:	d053      	beq.n	273a8 <__aeabi_ddiv+0x108>
   27300:	465a      	mov	r2, fp
   27302:	00d1      	lsls	r1, r2, #3
   27304:	2280      	movs	r2, #128	; 0x80
   27306:	0f40      	lsrs	r0, r0, #29
   27308:	0412      	lsls	r2, r2, #16
   2730a:	4302      	orrs	r2, r0
   2730c:	430a      	orrs	r2, r1
   2730e:	4693      	mov	fp, r2
   27310:	4652      	mov	r2, sl
   27312:	00d1      	lsls	r1, r2, #3
   27314:	4a5c      	ldr	r2, [pc, #368]	; (27488 <__aeabi_ddiv+0x1e8>)
   27316:	4694      	mov	ip, r2
   27318:	2200      	movs	r2, #0
   2731a:	4463      	add	r3, ip
   2731c:	0038      	movs	r0, r7
   2731e:	4068      	eors	r0, r5
   27320:	4684      	mov	ip, r0
   27322:	9002      	str	r0, [sp, #8]
   27324:	1ae4      	subs	r4, r4, r3
   27326:	4316      	orrs	r6, r2
   27328:	2e0f      	cmp	r6, #15
   2732a:	d900      	bls.n	2732e <__aeabi_ddiv+0x8e>
   2732c:	e0b4      	b.n	27498 <__aeabi_ddiv+0x1f8>
   2732e:	4b57      	ldr	r3, [pc, #348]	; (2748c <__aeabi_ddiv+0x1ec>)
   27330:	00b6      	lsls	r6, r6, #2
   27332:	599b      	ldr	r3, [r3, r6]
   27334:	469f      	mov	pc, r3
   27336:	0003      	movs	r3, r0
   27338:	4333      	orrs	r3, r6
   2733a:	4699      	mov	r9, r3
   2733c:	d16c      	bne.n	27418 <__aeabi_ddiv+0x178>
   2733e:	2300      	movs	r3, #0
   27340:	4698      	mov	r8, r3
   27342:	3302      	adds	r3, #2
   27344:	2608      	movs	r6, #8
   27346:	9303      	str	r3, [sp, #12]
   27348:	e7ce      	b.n	272e8 <__aeabi_ddiv+0x48>
   2734a:	46cb      	mov	fp, r9
   2734c:	4641      	mov	r1, r8
   2734e:	9a03      	ldr	r2, [sp, #12]
   27350:	9701      	str	r7, [sp, #4]
   27352:	2a02      	cmp	r2, #2
   27354:	d165      	bne.n	27422 <__aeabi_ddiv+0x182>
   27356:	9b01      	ldr	r3, [sp, #4]
   27358:	4c4a      	ldr	r4, [pc, #296]	; (27484 <__aeabi_ddiv+0x1e4>)
   2735a:	469c      	mov	ip, r3
   2735c:	2300      	movs	r3, #0
   2735e:	2200      	movs	r2, #0
   27360:	4698      	mov	r8, r3
   27362:	e06b      	b.n	2743c <__aeabi_ddiv+0x19c>
   27364:	0003      	movs	r3, r0
   27366:	4333      	orrs	r3, r6
   27368:	4699      	mov	r9, r3
   2736a:	d04e      	beq.n	2740a <__aeabi_ddiv+0x16a>
   2736c:	2e00      	cmp	r6, #0
   2736e:	d100      	bne.n	27372 <__aeabi_ddiv+0xd2>
   27370:	e1bc      	b.n	276ec <__aeabi_ddiv+0x44c>
   27372:	0030      	movs	r0, r6
   27374:	f001 fa7e 	bl	28874 <__clzsi2>
   27378:	0003      	movs	r3, r0
   2737a:	3b0b      	subs	r3, #11
   2737c:	2b1c      	cmp	r3, #28
   2737e:	dd00      	ble.n	27382 <__aeabi_ddiv+0xe2>
   27380:	e1ac      	b.n	276dc <__aeabi_ddiv+0x43c>
   27382:	221d      	movs	r2, #29
   27384:	1ad3      	subs	r3, r2, r3
   27386:	465a      	mov	r2, fp
   27388:	0001      	movs	r1, r0
   2738a:	40da      	lsrs	r2, r3
   2738c:	3908      	subs	r1, #8
   2738e:	408e      	lsls	r6, r1
   27390:	0013      	movs	r3, r2
   27392:	4333      	orrs	r3, r6
   27394:	4699      	mov	r9, r3
   27396:	465b      	mov	r3, fp
   27398:	408b      	lsls	r3, r1
   2739a:	4698      	mov	r8, r3
   2739c:	2300      	movs	r3, #0
   2739e:	4c3c      	ldr	r4, [pc, #240]	; (27490 <__aeabi_ddiv+0x1f0>)
   273a0:	2600      	movs	r6, #0
   273a2:	1a24      	subs	r4, r4, r0
   273a4:	9303      	str	r3, [sp, #12]
   273a6:	e79f      	b.n	272e8 <__aeabi_ddiv+0x48>
   273a8:	4651      	mov	r1, sl
   273aa:	465a      	mov	r2, fp
   273ac:	4311      	orrs	r1, r2
   273ae:	d129      	bne.n	27404 <__aeabi_ddiv+0x164>
   273b0:	2200      	movs	r2, #0
   273b2:	4693      	mov	fp, r2
   273b4:	3202      	adds	r2, #2
   273b6:	e7b1      	b.n	2731c <__aeabi_ddiv+0x7c>
   273b8:	4659      	mov	r1, fp
   273ba:	4301      	orrs	r1, r0
   273bc:	d01e      	beq.n	273fc <__aeabi_ddiv+0x15c>
   273be:	465b      	mov	r3, fp
   273c0:	2b00      	cmp	r3, #0
   273c2:	d100      	bne.n	273c6 <__aeabi_ddiv+0x126>
   273c4:	e19e      	b.n	27704 <__aeabi_ddiv+0x464>
   273c6:	4658      	mov	r0, fp
   273c8:	f001 fa54 	bl	28874 <__clzsi2>
   273cc:	0003      	movs	r3, r0
   273ce:	3b0b      	subs	r3, #11
   273d0:	2b1c      	cmp	r3, #28
   273d2:	dd00      	ble.n	273d6 <__aeabi_ddiv+0x136>
   273d4:	e18f      	b.n	276f6 <__aeabi_ddiv+0x456>
   273d6:	0002      	movs	r2, r0
   273d8:	4659      	mov	r1, fp
   273da:	3a08      	subs	r2, #8
   273dc:	4091      	lsls	r1, r2
   273de:	468b      	mov	fp, r1
   273e0:	211d      	movs	r1, #29
   273e2:	1acb      	subs	r3, r1, r3
   273e4:	4651      	mov	r1, sl
   273e6:	40d9      	lsrs	r1, r3
   273e8:	000b      	movs	r3, r1
   273ea:	4659      	mov	r1, fp
   273ec:	430b      	orrs	r3, r1
   273ee:	4651      	mov	r1, sl
   273f0:	469b      	mov	fp, r3
   273f2:	4091      	lsls	r1, r2
   273f4:	4b26      	ldr	r3, [pc, #152]	; (27490 <__aeabi_ddiv+0x1f0>)
   273f6:	2200      	movs	r2, #0
   273f8:	1a1b      	subs	r3, r3, r0
   273fa:	e78f      	b.n	2731c <__aeabi_ddiv+0x7c>
   273fc:	2300      	movs	r3, #0
   273fe:	2201      	movs	r2, #1
   27400:	469b      	mov	fp, r3
   27402:	e78b      	b.n	2731c <__aeabi_ddiv+0x7c>
   27404:	4651      	mov	r1, sl
   27406:	2203      	movs	r2, #3
   27408:	e788      	b.n	2731c <__aeabi_ddiv+0x7c>
   2740a:	2300      	movs	r3, #0
   2740c:	4698      	mov	r8, r3
   2740e:	3301      	adds	r3, #1
   27410:	2604      	movs	r6, #4
   27412:	2400      	movs	r4, #0
   27414:	9303      	str	r3, [sp, #12]
   27416:	e767      	b.n	272e8 <__aeabi_ddiv+0x48>
   27418:	2303      	movs	r3, #3
   2741a:	46b1      	mov	r9, r6
   2741c:	9303      	str	r3, [sp, #12]
   2741e:	260c      	movs	r6, #12
   27420:	e762      	b.n	272e8 <__aeabi_ddiv+0x48>
   27422:	2a03      	cmp	r2, #3
   27424:	d100      	bne.n	27428 <__aeabi_ddiv+0x188>
   27426:	e25c      	b.n	278e2 <__aeabi_ddiv+0x642>
   27428:	9b01      	ldr	r3, [sp, #4]
   2742a:	2a01      	cmp	r2, #1
   2742c:	d000      	beq.n	27430 <__aeabi_ddiv+0x190>
   2742e:	e1e4      	b.n	277fa <__aeabi_ddiv+0x55a>
   27430:	4013      	ands	r3, r2
   27432:	469c      	mov	ip, r3
   27434:	2300      	movs	r3, #0
   27436:	2400      	movs	r4, #0
   27438:	2200      	movs	r2, #0
   2743a:	4698      	mov	r8, r3
   2743c:	2100      	movs	r1, #0
   2743e:	0312      	lsls	r2, r2, #12
   27440:	0b13      	lsrs	r3, r2, #12
   27442:	0d0a      	lsrs	r2, r1, #20
   27444:	0512      	lsls	r2, r2, #20
   27446:	431a      	orrs	r2, r3
   27448:	0523      	lsls	r3, r4, #20
   2744a:	4c12      	ldr	r4, [pc, #72]	; (27494 <__aeabi_ddiv+0x1f4>)
   2744c:	4640      	mov	r0, r8
   2744e:	4022      	ands	r2, r4
   27450:	4313      	orrs	r3, r2
   27452:	4662      	mov	r2, ip
   27454:	005b      	lsls	r3, r3, #1
   27456:	07d2      	lsls	r2, r2, #31
   27458:	085b      	lsrs	r3, r3, #1
   2745a:	4313      	orrs	r3, r2
   2745c:	0019      	movs	r1, r3
   2745e:	b007      	add	sp, #28
   27460:	bc3c      	pop	{r2, r3, r4, r5}
   27462:	4690      	mov	r8, r2
   27464:	4699      	mov	r9, r3
   27466:	46a2      	mov	sl, r4
   27468:	46ab      	mov	fp, r5
   2746a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2746c:	2300      	movs	r3, #0
   2746e:	2280      	movs	r2, #128	; 0x80
   27470:	469c      	mov	ip, r3
   27472:	0312      	lsls	r2, r2, #12
   27474:	4698      	mov	r8, r3
   27476:	4c03      	ldr	r4, [pc, #12]	; (27484 <__aeabi_ddiv+0x1e4>)
   27478:	e7e0      	b.n	2743c <__aeabi_ddiv+0x19c>
   2747a:	2300      	movs	r3, #0
   2747c:	4c01      	ldr	r4, [pc, #4]	; (27484 <__aeabi_ddiv+0x1e4>)
   2747e:	2200      	movs	r2, #0
   27480:	4698      	mov	r8, r3
   27482:	e7db      	b.n	2743c <__aeabi_ddiv+0x19c>
   27484:	000007ff 	.word	0x000007ff
   27488:	fffffc01 	.word	0xfffffc01
   2748c:	0002aa00 	.word	0x0002aa00
   27490:	fffffc0d 	.word	0xfffffc0d
   27494:	800fffff 	.word	0x800fffff
   27498:	45d9      	cmp	r9, fp
   2749a:	d900      	bls.n	2749e <__aeabi_ddiv+0x1fe>
   2749c:	e139      	b.n	27712 <__aeabi_ddiv+0x472>
   2749e:	d100      	bne.n	274a2 <__aeabi_ddiv+0x202>
   274a0:	e134      	b.n	2770c <__aeabi_ddiv+0x46c>
   274a2:	2300      	movs	r3, #0
   274a4:	4646      	mov	r6, r8
   274a6:	464d      	mov	r5, r9
   274a8:	469a      	mov	sl, r3
   274aa:	3c01      	subs	r4, #1
   274ac:	465b      	mov	r3, fp
   274ae:	0e0a      	lsrs	r2, r1, #24
   274b0:	021b      	lsls	r3, r3, #8
   274b2:	431a      	orrs	r2, r3
   274b4:	020b      	lsls	r3, r1, #8
   274b6:	0c17      	lsrs	r7, r2, #16
   274b8:	9303      	str	r3, [sp, #12]
   274ba:	0413      	lsls	r3, r2, #16
   274bc:	0c1b      	lsrs	r3, r3, #16
   274be:	0039      	movs	r1, r7
   274c0:	0028      	movs	r0, r5
   274c2:	4690      	mov	r8, r2
   274c4:	9301      	str	r3, [sp, #4]
   274c6:	f7fe fe51 	bl	2616c <__udivsi3>
   274ca:	0002      	movs	r2, r0
   274cc:	9b01      	ldr	r3, [sp, #4]
   274ce:	4683      	mov	fp, r0
   274d0:	435a      	muls	r2, r3
   274d2:	0028      	movs	r0, r5
   274d4:	0039      	movs	r1, r7
   274d6:	4691      	mov	r9, r2
   274d8:	f7fe fece 	bl	26278 <__aeabi_uidivmod>
   274dc:	0c35      	lsrs	r5, r6, #16
   274de:	0409      	lsls	r1, r1, #16
   274e0:	430d      	orrs	r5, r1
   274e2:	45a9      	cmp	r9, r5
   274e4:	d90d      	bls.n	27502 <__aeabi_ddiv+0x262>
   274e6:	465b      	mov	r3, fp
   274e8:	4445      	add	r5, r8
   274ea:	3b01      	subs	r3, #1
   274ec:	45a8      	cmp	r8, r5
   274ee:	d900      	bls.n	274f2 <__aeabi_ddiv+0x252>
   274f0:	e13a      	b.n	27768 <__aeabi_ddiv+0x4c8>
   274f2:	45a9      	cmp	r9, r5
   274f4:	d800      	bhi.n	274f8 <__aeabi_ddiv+0x258>
   274f6:	e137      	b.n	27768 <__aeabi_ddiv+0x4c8>
   274f8:	2302      	movs	r3, #2
   274fa:	425b      	negs	r3, r3
   274fc:	469c      	mov	ip, r3
   274fe:	4445      	add	r5, r8
   27500:	44e3      	add	fp, ip
   27502:	464b      	mov	r3, r9
   27504:	1aeb      	subs	r3, r5, r3
   27506:	0039      	movs	r1, r7
   27508:	0018      	movs	r0, r3
   2750a:	9304      	str	r3, [sp, #16]
   2750c:	f7fe fe2e 	bl	2616c <__udivsi3>
   27510:	9b01      	ldr	r3, [sp, #4]
   27512:	0005      	movs	r5, r0
   27514:	4343      	muls	r3, r0
   27516:	0039      	movs	r1, r7
   27518:	9804      	ldr	r0, [sp, #16]
   2751a:	4699      	mov	r9, r3
   2751c:	f7fe feac 	bl	26278 <__aeabi_uidivmod>
   27520:	0433      	lsls	r3, r6, #16
   27522:	0409      	lsls	r1, r1, #16
   27524:	0c1b      	lsrs	r3, r3, #16
   27526:	430b      	orrs	r3, r1
   27528:	4599      	cmp	r9, r3
   2752a:	d909      	bls.n	27540 <__aeabi_ddiv+0x2a0>
   2752c:	4443      	add	r3, r8
   2752e:	1e6a      	subs	r2, r5, #1
   27530:	4598      	cmp	r8, r3
   27532:	d900      	bls.n	27536 <__aeabi_ddiv+0x296>
   27534:	e11a      	b.n	2776c <__aeabi_ddiv+0x4cc>
   27536:	4599      	cmp	r9, r3
   27538:	d800      	bhi.n	2753c <__aeabi_ddiv+0x29c>
   2753a:	e117      	b.n	2776c <__aeabi_ddiv+0x4cc>
   2753c:	3d02      	subs	r5, #2
   2753e:	4443      	add	r3, r8
   27540:	464a      	mov	r2, r9
   27542:	1a9b      	subs	r3, r3, r2
   27544:	465a      	mov	r2, fp
   27546:	0412      	lsls	r2, r2, #16
   27548:	432a      	orrs	r2, r5
   2754a:	9903      	ldr	r1, [sp, #12]
   2754c:	4693      	mov	fp, r2
   2754e:	0c10      	lsrs	r0, r2, #16
   27550:	0c0a      	lsrs	r2, r1, #16
   27552:	4691      	mov	r9, r2
   27554:	0409      	lsls	r1, r1, #16
   27556:	465a      	mov	r2, fp
   27558:	0c09      	lsrs	r1, r1, #16
   2755a:	464e      	mov	r6, r9
   2755c:	000d      	movs	r5, r1
   2755e:	0412      	lsls	r2, r2, #16
   27560:	0c12      	lsrs	r2, r2, #16
   27562:	4345      	muls	r5, r0
   27564:	9105      	str	r1, [sp, #20]
   27566:	4351      	muls	r1, r2
   27568:	4372      	muls	r2, r6
   2756a:	4370      	muls	r0, r6
   2756c:	1952      	adds	r2, r2, r5
   2756e:	0c0e      	lsrs	r6, r1, #16
   27570:	18b2      	adds	r2, r6, r2
   27572:	4295      	cmp	r5, r2
   27574:	d903      	bls.n	2757e <__aeabi_ddiv+0x2de>
   27576:	2580      	movs	r5, #128	; 0x80
   27578:	026d      	lsls	r5, r5, #9
   2757a:	46ac      	mov	ip, r5
   2757c:	4460      	add	r0, ip
   2757e:	0c15      	lsrs	r5, r2, #16
   27580:	0409      	lsls	r1, r1, #16
   27582:	0412      	lsls	r2, r2, #16
   27584:	0c09      	lsrs	r1, r1, #16
   27586:	1828      	adds	r0, r5, r0
   27588:	1852      	adds	r2, r2, r1
   2758a:	4283      	cmp	r3, r0
   2758c:	d200      	bcs.n	27590 <__aeabi_ddiv+0x2f0>
   2758e:	e0ce      	b.n	2772e <__aeabi_ddiv+0x48e>
   27590:	d100      	bne.n	27594 <__aeabi_ddiv+0x2f4>
   27592:	e0c8      	b.n	27726 <__aeabi_ddiv+0x486>
   27594:	1a1d      	subs	r5, r3, r0
   27596:	4653      	mov	r3, sl
   27598:	1a9e      	subs	r6, r3, r2
   2759a:	45b2      	cmp	sl, r6
   2759c:	4192      	sbcs	r2, r2
   2759e:	4252      	negs	r2, r2
   275a0:	1aab      	subs	r3, r5, r2
   275a2:	469a      	mov	sl, r3
   275a4:	4598      	cmp	r8, r3
   275a6:	d100      	bne.n	275aa <__aeabi_ddiv+0x30a>
   275a8:	e117      	b.n	277da <__aeabi_ddiv+0x53a>
   275aa:	0039      	movs	r1, r7
   275ac:	0018      	movs	r0, r3
   275ae:	f7fe fddd 	bl	2616c <__udivsi3>
   275b2:	9b01      	ldr	r3, [sp, #4]
   275b4:	0005      	movs	r5, r0
   275b6:	4343      	muls	r3, r0
   275b8:	0039      	movs	r1, r7
   275ba:	4650      	mov	r0, sl
   275bc:	9304      	str	r3, [sp, #16]
   275be:	f7fe fe5b 	bl	26278 <__aeabi_uidivmod>
   275c2:	9804      	ldr	r0, [sp, #16]
   275c4:	040b      	lsls	r3, r1, #16
   275c6:	0c31      	lsrs	r1, r6, #16
   275c8:	4319      	orrs	r1, r3
   275ca:	4288      	cmp	r0, r1
   275cc:	d909      	bls.n	275e2 <__aeabi_ddiv+0x342>
   275ce:	4441      	add	r1, r8
   275d0:	1e6b      	subs	r3, r5, #1
   275d2:	4588      	cmp	r8, r1
   275d4:	d900      	bls.n	275d8 <__aeabi_ddiv+0x338>
   275d6:	e107      	b.n	277e8 <__aeabi_ddiv+0x548>
   275d8:	4288      	cmp	r0, r1
   275da:	d800      	bhi.n	275de <__aeabi_ddiv+0x33e>
   275dc:	e104      	b.n	277e8 <__aeabi_ddiv+0x548>
   275de:	3d02      	subs	r5, #2
   275e0:	4441      	add	r1, r8
   275e2:	9b04      	ldr	r3, [sp, #16]
   275e4:	1acb      	subs	r3, r1, r3
   275e6:	0018      	movs	r0, r3
   275e8:	0039      	movs	r1, r7
   275ea:	9304      	str	r3, [sp, #16]
   275ec:	f7fe fdbe 	bl	2616c <__udivsi3>
   275f0:	9b01      	ldr	r3, [sp, #4]
   275f2:	4682      	mov	sl, r0
   275f4:	4343      	muls	r3, r0
   275f6:	0039      	movs	r1, r7
   275f8:	9804      	ldr	r0, [sp, #16]
   275fa:	9301      	str	r3, [sp, #4]
   275fc:	f7fe fe3c 	bl	26278 <__aeabi_uidivmod>
   27600:	9801      	ldr	r0, [sp, #4]
   27602:	040b      	lsls	r3, r1, #16
   27604:	0431      	lsls	r1, r6, #16
   27606:	0c09      	lsrs	r1, r1, #16
   27608:	4319      	orrs	r1, r3
   2760a:	4288      	cmp	r0, r1
   2760c:	d90d      	bls.n	2762a <__aeabi_ddiv+0x38a>
   2760e:	4653      	mov	r3, sl
   27610:	4441      	add	r1, r8
   27612:	3b01      	subs	r3, #1
   27614:	4588      	cmp	r8, r1
   27616:	d900      	bls.n	2761a <__aeabi_ddiv+0x37a>
   27618:	e0e8      	b.n	277ec <__aeabi_ddiv+0x54c>
   2761a:	4288      	cmp	r0, r1
   2761c:	d800      	bhi.n	27620 <__aeabi_ddiv+0x380>
   2761e:	e0e5      	b.n	277ec <__aeabi_ddiv+0x54c>
   27620:	2302      	movs	r3, #2
   27622:	425b      	negs	r3, r3
   27624:	469c      	mov	ip, r3
   27626:	4441      	add	r1, r8
   27628:	44e2      	add	sl, ip
   2762a:	9b01      	ldr	r3, [sp, #4]
   2762c:	042d      	lsls	r5, r5, #16
   2762e:	1ace      	subs	r6, r1, r3
   27630:	4651      	mov	r1, sl
   27632:	4329      	orrs	r1, r5
   27634:	9d05      	ldr	r5, [sp, #20]
   27636:	464f      	mov	r7, r9
   27638:	002a      	movs	r2, r5
   2763a:	040b      	lsls	r3, r1, #16
   2763c:	0c08      	lsrs	r0, r1, #16
   2763e:	0c1b      	lsrs	r3, r3, #16
   27640:	435a      	muls	r2, r3
   27642:	4345      	muls	r5, r0
   27644:	437b      	muls	r3, r7
   27646:	4378      	muls	r0, r7
   27648:	195b      	adds	r3, r3, r5
   2764a:	0c17      	lsrs	r7, r2, #16
   2764c:	18fb      	adds	r3, r7, r3
   2764e:	429d      	cmp	r5, r3
   27650:	d903      	bls.n	2765a <__aeabi_ddiv+0x3ba>
   27652:	2580      	movs	r5, #128	; 0x80
   27654:	026d      	lsls	r5, r5, #9
   27656:	46ac      	mov	ip, r5
   27658:	4460      	add	r0, ip
   2765a:	0c1d      	lsrs	r5, r3, #16
   2765c:	0412      	lsls	r2, r2, #16
   2765e:	041b      	lsls	r3, r3, #16
   27660:	0c12      	lsrs	r2, r2, #16
   27662:	1828      	adds	r0, r5, r0
   27664:	189b      	adds	r3, r3, r2
   27666:	4286      	cmp	r6, r0
   27668:	d200      	bcs.n	2766c <__aeabi_ddiv+0x3cc>
   2766a:	e093      	b.n	27794 <__aeabi_ddiv+0x4f4>
   2766c:	d100      	bne.n	27670 <__aeabi_ddiv+0x3d0>
   2766e:	e08e      	b.n	2778e <__aeabi_ddiv+0x4ee>
   27670:	2301      	movs	r3, #1
   27672:	4319      	orrs	r1, r3
   27674:	4ba0      	ldr	r3, [pc, #640]	; (278f8 <__aeabi_ddiv+0x658>)
   27676:	18e3      	adds	r3, r4, r3
   27678:	2b00      	cmp	r3, #0
   2767a:	dc00      	bgt.n	2767e <__aeabi_ddiv+0x3de>
   2767c:	e099      	b.n	277b2 <__aeabi_ddiv+0x512>
   2767e:	074a      	lsls	r2, r1, #29
   27680:	d000      	beq.n	27684 <__aeabi_ddiv+0x3e4>
   27682:	e09e      	b.n	277c2 <__aeabi_ddiv+0x522>
   27684:	465a      	mov	r2, fp
   27686:	01d2      	lsls	r2, r2, #7
   27688:	d506      	bpl.n	27698 <__aeabi_ddiv+0x3f8>
   2768a:	465a      	mov	r2, fp
   2768c:	4b9b      	ldr	r3, [pc, #620]	; (278fc <__aeabi_ddiv+0x65c>)
   2768e:	401a      	ands	r2, r3
   27690:	2380      	movs	r3, #128	; 0x80
   27692:	4693      	mov	fp, r2
   27694:	00db      	lsls	r3, r3, #3
   27696:	18e3      	adds	r3, r4, r3
   27698:	4a99      	ldr	r2, [pc, #612]	; (27900 <__aeabi_ddiv+0x660>)
   2769a:	4293      	cmp	r3, r2
   2769c:	dd68      	ble.n	27770 <__aeabi_ddiv+0x4d0>
   2769e:	2301      	movs	r3, #1
   276a0:	9a02      	ldr	r2, [sp, #8]
   276a2:	4c98      	ldr	r4, [pc, #608]	; (27904 <__aeabi_ddiv+0x664>)
   276a4:	401a      	ands	r2, r3
   276a6:	2300      	movs	r3, #0
   276a8:	4694      	mov	ip, r2
   276aa:	4698      	mov	r8, r3
   276ac:	2200      	movs	r2, #0
   276ae:	e6c5      	b.n	2743c <__aeabi_ddiv+0x19c>
   276b0:	2280      	movs	r2, #128	; 0x80
   276b2:	464b      	mov	r3, r9
   276b4:	0312      	lsls	r2, r2, #12
   276b6:	4213      	tst	r3, r2
   276b8:	d00a      	beq.n	276d0 <__aeabi_ddiv+0x430>
   276ba:	465b      	mov	r3, fp
   276bc:	4213      	tst	r3, r2
   276be:	d106      	bne.n	276ce <__aeabi_ddiv+0x42e>
   276c0:	431a      	orrs	r2, r3
   276c2:	0312      	lsls	r2, r2, #12
   276c4:	0b12      	lsrs	r2, r2, #12
   276c6:	46ac      	mov	ip, r5
   276c8:	4688      	mov	r8, r1
   276ca:	4c8e      	ldr	r4, [pc, #568]	; (27904 <__aeabi_ddiv+0x664>)
   276cc:	e6b6      	b.n	2743c <__aeabi_ddiv+0x19c>
   276ce:	464b      	mov	r3, r9
   276d0:	431a      	orrs	r2, r3
   276d2:	0312      	lsls	r2, r2, #12
   276d4:	0b12      	lsrs	r2, r2, #12
   276d6:	46bc      	mov	ip, r7
   276d8:	4c8a      	ldr	r4, [pc, #552]	; (27904 <__aeabi_ddiv+0x664>)
   276da:	e6af      	b.n	2743c <__aeabi_ddiv+0x19c>
   276dc:	0003      	movs	r3, r0
   276de:	465a      	mov	r2, fp
   276e0:	3b28      	subs	r3, #40	; 0x28
   276e2:	409a      	lsls	r2, r3
   276e4:	2300      	movs	r3, #0
   276e6:	4691      	mov	r9, r2
   276e8:	4698      	mov	r8, r3
   276ea:	e657      	b.n	2739c <__aeabi_ddiv+0xfc>
   276ec:	4658      	mov	r0, fp
   276ee:	f001 f8c1 	bl	28874 <__clzsi2>
   276f2:	3020      	adds	r0, #32
   276f4:	e640      	b.n	27378 <__aeabi_ddiv+0xd8>
   276f6:	0003      	movs	r3, r0
   276f8:	4652      	mov	r2, sl
   276fa:	3b28      	subs	r3, #40	; 0x28
   276fc:	409a      	lsls	r2, r3
   276fe:	2100      	movs	r1, #0
   27700:	4693      	mov	fp, r2
   27702:	e677      	b.n	273f4 <__aeabi_ddiv+0x154>
   27704:	f001 f8b6 	bl	28874 <__clzsi2>
   27708:	3020      	adds	r0, #32
   2770a:	e65f      	b.n	273cc <__aeabi_ddiv+0x12c>
   2770c:	4588      	cmp	r8, r1
   2770e:	d200      	bcs.n	27712 <__aeabi_ddiv+0x472>
   27710:	e6c7      	b.n	274a2 <__aeabi_ddiv+0x202>
   27712:	464b      	mov	r3, r9
   27714:	07de      	lsls	r6, r3, #31
   27716:	085d      	lsrs	r5, r3, #1
   27718:	4643      	mov	r3, r8
   2771a:	085b      	lsrs	r3, r3, #1
   2771c:	431e      	orrs	r6, r3
   2771e:	4643      	mov	r3, r8
   27720:	07db      	lsls	r3, r3, #31
   27722:	469a      	mov	sl, r3
   27724:	e6c2      	b.n	274ac <__aeabi_ddiv+0x20c>
   27726:	2500      	movs	r5, #0
   27728:	4592      	cmp	sl, r2
   2772a:	d300      	bcc.n	2772e <__aeabi_ddiv+0x48e>
   2772c:	e733      	b.n	27596 <__aeabi_ddiv+0x2f6>
   2772e:	9e03      	ldr	r6, [sp, #12]
   27730:	4659      	mov	r1, fp
   27732:	46b4      	mov	ip, r6
   27734:	44e2      	add	sl, ip
   27736:	45b2      	cmp	sl, r6
   27738:	41ad      	sbcs	r5, r5
   2773a:	426d      	negs	r5, r5
   2773c:	4445      	add	r5, r8
   2773e:	18eb      	adds	r3, r5, r3
   27740:	3901      	subs	r1, #1
   27742:	4598      	cmp	r8, r3
   27744:	d207      	bcs.n	27756 <__aeabi_ddiv+0x4b6>
   27746:	4298      	cmp	r0, r3
   27748:	d900      	bls.n	2774c <__aeabi_ddiv+0x4ac>
   2774a:	e07f      	b.n	2784c <__aeabi_ddiv+0x5ac>
   2774c:	d100      	bne.n	27750 <__aeabi_ddiv+0x4b0>
   2774e:	e0bc      	b.n	278ca <__aeabi_ddiv+0x62a>
   27750:	1a1d      	subs	r5, r3, r0
   27752:	468b      	mov	fp, r1
   27754:	e71f      	b.n	27596 <__aeabi_ddiv+0x2f6>
   27756:	4598      	cmp	r8, r3
   27758:	d1fa      	bne.n	27750 <__aeabi_ddiv+0x4b0>
   2775a:	9d03      	ldr	r5, [sp, #12]
   2775c:	4555      	cmp	r5, sl
   2775e:	d9f2      	bls.n	27746 <__aeabi_ddiv+0x4a6>
   27760:	4643      	mov	r3, r8
   27762:	468b      	mov	fp, r1
   27764:	1a1d      	subs	r5, r3, r0
   27766:	e716      	b.n	27596 <__aeabi_ddiv+0x2f6>
   27768:	469b      	mov	fp, r3
   2776a:	e6ca      	b.n	27502 <__aeabi_ddiv+0x262>
   2776c:	0015      	movs	r5, r2
   2776e:	e6e7      	b.n	27540 <__aeabi_ddiv+0x2a0>
   27770:	465a      	mov	r2, fp
   27772:	08c9      	lsrs	r1, r1, #3
   27774:	0752      	lsls	r2, r2, #29
   27776:	430a      	orrs	r2, r1
   27778:	055b      	lsls	r3, r3, #21
   2777a:	4690      	mov	r8, r2
   2777c:	0d5c      	lsrs	r4, r3, #21
   2777e:	465a      	mov	r2, fp
   27780:	2301      	movs	r3, #1
   27782:	9902      	ldr	r1, [sp, #8]
   27784:	0252      	lsls	r2, r2, #9
   27786:	4019      	ands	r1, r3
   27788:	0b12      	lsrs	r2, r2, #12
   2778a:	468c      	mov	ip, r1
   2778c:	e656      	b.n	2743c <__aeabi_ddiv+0x19c>
   2778e:	2b00      	cmp	r3, #0
   27790:	d100      	bne.n	27794 <__aeabi_ddiv+0x4f4>
   27792:	e76f      	b.n	27674 <__aeabi_ddiv+0x3d4>
   27794:	4446      	add	r6, r8
   27796:	1e4a      	subs	r2, r1, #1
   27798:	45b0      	cmp	r8, r6
   2779a:	d929      	bls.n	277f0 <__aeabi_ddiv+0x550>
   2779c:	0011      	movs	r1, r2
   2779e:	4286      	cmp	r6, r0
   277a0:	d000      	beq.n	277a4 <__aeabi_ddiv+0x504>
   277a2:	e765      	b.n	27670 <__aeabi_ddiv+0x3d0>
   277a4:	9a03      	ldr	r2, [sp, #12]
   277a6:	4293      	cmp	r3, r2
   277a8:	d000      	beq.n	277ac <__aeabi_ddiv+0x50c>
   277aa:	e761      	b.n	27670 <__aeabi_ddiv+0x3d0>
   277ac:	e762      	b.n	27674 <__aeabi_ddiv+0x3d4>
   277ae:	2101      	movs	r1, #1
   277b0:	4249      	negs	r1, r1
   277b2:	2001      	movs	r0, #1
   277b4:	1ac2      	subs	r2, r0, r3
   277b6:	2a38      	cmp	r2, #56	; 0x38
   277b8:	dd21      	ble.n	277fe <__aeabi_ddiv+0x55e>
   277ba:	9b02      	ldr	r3, [sp, #8]
   277bc:	4003      	ands	r3, r0
   277be:	469c      	mov	ip, r3
   277c0:	e638      	b.n	27434 <__aeabi_ddiv+0x194>
   277c2:	220f      	movs	r2, #15
   277c4:	400a      	ands	r2, r1
   277c6:	2a04      	cmp	r2, #4
   277c8:	d100      	bne.n	277cc <__aeabi_ddiv+0x52c>
   277ca:	e75b      	b.n	27684 <__aeabi_ddiv+0x3e4>
   277cc:	000a      	movs	r2, r1
   277ce:	1d11      	adds	r1, r2, #4
   277d0:	4291      	cmp	r1, r2
   277d2:	4192      	sbcs	r2, r2
   277d4:	4252      	negs	r2, r2
   277d6:	4493      	add	fp, r2
   277d8:	e754      	b.n	27684 <__aeabi_ddiv+0x3e4>
   277da:	4b47      	ldr	r3, [pc, #284]	; (278f8 <__aeabi_ddiv+0x658>)
   277dc:	18e3      	adds	r3, r4, r3
   277de:	2b00      	cmp	r3, #0
   277e0:	dde5      	ble.n	277ae <__aeabi_ddiv+0x50e>
   277e2:	2201      	movs	r2, #1
   277e4:	4252      	negs	r2, r2
   277e6:	e7f2      	b.n	277ce <__aeabi_ddiv+0x52e>
   277e8:	001d      	movs	r5, r3
   277ea:	e6fa      	b.n	275e2 <__aeabi_ddiv+0x342>
   277ec:	469a      	mov	sl, r3
   277ee:	e71c      	b.n	2762a <__aeabi_ddiv+0x38a>
   277f0:	42b0      	cmp	r0, r6
   277f2:	d839      	bhi.n	27868 <__aeabi_ddiv+0x5c8>
   277f4:	d06e      	beq.n	278d4 <__aeabi_ddiv+0x634>
   277f6:	0011      	movs	r1, r2
   277f8:	e73a      	b.n	27670 <__aeabi_ddiv+0x3d0>
   277fa:	9302      	str	r3, [sp, #8]
   277fc:	e73a      	b.n	27674 <__aeabi_ddiv+0x3d4>
   277fe:	2a1f      	cmp	r2, #31
   27800:	dc3c      	bgt.n	2787c <__aeabi_ddiv+0x5dc>
   27802:	2320      	movs	r3, #32
   27804:	1a9b      	subs	r3, r3, r2
   27806:	000c      	movs	r4, r1
   27808:	4658      	mov	r0, fp
   2780a:	4099      	lsls	r1, r3
   2780c:	4098      	lsls	r0, r3
   2780e:	1e4b      	subs	r3, r1, #1
   27810:	4199      	sbcs	r1, r3
   27812:	465b      	mov	r3, fp
   27814:	40d4      	lsrs	r4, r2
   27816:	40d3      	lsrs	r3, r2
   27818:	4320      	orrs	r0, r4
   2781a:	4308      	orrs	r0, r1
   2781c:	001a      	movs	r2, r3
   2781e:	0743      	lsls	r3, r0, #29
   27820:	d009      	beq.n	27836 <__aeabi_ddiv+0x596>
   27822:	230f      	movs	r3, #15
   27824:	4003      	ands	r3, r0
   27826:	2b04      	cmp	r3, #4
   27828:	d005      	beq.n	27836 <__aeabi_ddiv+0x596>
   2782a:	0001      	movs	r1, r0
   2782c:	1d08      	adds	r0, r1, #4
   2782e:	4288      	cmp	r0, r1
   27830:	419b      	sbcs	r3, r3
   27832:	425b      	negs	r3, r3
   27834:	18d2      	adds	r2, r2, r3
   27836:	0213      	lsls	r3, r2, #8
   27838:	d53a      	bpl.n	278b0 <__aeabi_ddiv+0x610>
   2783a:	2301      	movs	r3, #1
   2783c:	9a02      	ldr	r2, [sp, #8]
   2783e:	2401      	movs	r4, #1
   27840:	401a      	ands	r2, r3
   27842:	2300      	movs	r3, #0
   27844:	4694      	mov	ip, r2
   27846:	4698      	mov	r8, r3
   27848:	2200      	movs	r2, #0
   2784a:	e5f7      	b.n	2743c <__aeabi_ddiv+0x19c>
   2784c:	2102      	movs	r1, #2
   2784e:	4249      	negs	r1, r1
   27850:	468c      	mov	ip, r1
   27852:	9d03      	ldr	r5, [sp, #12]
   27854:	44e3      	add	fp, ip
   27856:	46ac      	mov	ip, r5
   27858:	44e2      	add	sl, ip
   2785a:	45aa      	cmp	sl, r5
   2785c:	41ad      	sbcs	r5, r5
   2785e:	426d      	negs	r5, r5
   27860:	4445      	add	r5, r8
   27862:	18ed      	adds	r5, r5, r3
   27864:	1a2d      	subs	r5, r5, r0
   27866:	e696      	b.n	27596 <__aeabi_ddiv+0x2f6>
   27868:	1e8a      	subs	r2, r1, #2
   2786a:	9903      	ldr	r1, [sp, #12]
   2786c:	004d      	lsls	r5, r1, #1
   2786e:	428d      	cmp	r5, r1
   27870:	4189      	sbcs	r1, r1
   27872:	4249      	negs	r1, r1
   27874:	4441      	add	r1, r8
   27876:	1876      	adds	r6, r6, r1
   27878:	9503      	str	r5, [sp, #12]
   2787a:	e78f      	b.n	2779c <__aeabi_ddiv+0x4fc>
   2787c:	201f      	movs	r0, #31
   2787e:	4240      	negs	r0, r0
   27880:	1ac3      	subs	r3, r0, r3
   27882:	4658      	mov	r0, fp
   27884:	40d8      	lsrs	r0, r3
   27886:	0003      	movs	r3, r0
   27888:	2a20      	cmp	r2, #32
   2788a:	d028      	beq.n	278de <__aeabi_ddiv+0x63e>
   2788c:	2040      	movs	r0, #64	; 0x40
   2788e:	465d      	mov	r5, fp
   27890:	1a82      	subs	r2, r0, r2
   27892:	4095      	lsls	r5, r2
   27894:	4329      	orrs	r1, r5
   27896:	1e4a      	subs	r2, r1, #1
   27898:	4191      	sbcs	r1, r2
   2789a:	4319      	orrs	r1, r3
   2789c:	2307      	movs	r3, #7
   2789e:	2200      	movs	r2, #0
   278a0:	400b      	ands	r3, r1
   278a2:	d009      	beq.n	278b8 <__aeabi_ddiv+0x618>
   278a4:	230f      	movs	r3, #15
   278a6:	2200      	movs	r2, #0
   278a8:	400b      	ands	r3, r1
   278aa:	0008      	movs	r0, r1
   278ac:	2b04      	cmp	r3, #4
   278ae:	d1bd      	bne.n	2782c <__aeabi_ddiv+0x58c>
   278b0:	0001      	movs	r1, r0
   278b2:	0753      	lsls	r3, r2, #29
   278b4:	0252      	lsls	r2, r2, #9
   278b6:	0b12      	lsrs	r2, r2, #12
   278b8:	08c9      	lsrs	r1, r1, #3
   278ba:	4319      	orrs	r1, r3
   278bc:	2301      	movs	r3, #1
   278be:	4688      	mov	r8, r1
   278c0:	9902      	ldr	r1, [sp, #8]
   278c2:	2400      	movs	r4, #0
   278c4:	4019      	ands	r1, r3
   278c6:	468c      	mov	ip, r1
   278c8:	e5b8      	b.n	2743c <__aeabi_ddiv+0x19c>
   278ca:	4552      	cmp	r2, sl
   278cc:	d8be      	bhi.n	2784c <__aeabi_ddiv+0x5ac>
   278ce:	468b      	mov	fp, r1
   278d0:	2500      	movs	r5, #0
   278d2:	e660      	b.n	27596 <__aeabi_ddiv+0x2f6>
   278d4:	9d03      	ldr	r5, [sp, #12]
   278d6:	429d      	cmp	r5, r3
   278d8:	d3c6      	bcc.n	27868 <__aeabi_ddiv+0x5c8>
   278da:	0011      	movs	r1, r2
   278dc:	e762      	b.n	277a4 <__aeabi_ddiv+0x504>
   278de:	2500      	movs	r5, #0
   278e0:	e7d8      	b.n	27894 <__aeabi_ddiv+0x5f4>
   278e2:	2280      	movs	r2, #128	; 0x80
   278e4:	465b      	mov	r3, fp
   278e6:	0312      	lsls	r2, r2, #12
   278e8:	431a      	orrs	r2, r3
   278ea:	9b01      	ldr	r3, [sp, #4]
   278ec:	0312      	lsls	r2, r2, #12
   278ee:	0b12      	lsrs	r2, r2, #12
   278f0:	469c      	mov	ip, r3
   278f2:	4688      	mov	r8, r1
   278f4:	4c03      	ldr	r4, [pc, #12]	; (27904 <__aeabi_ddiv+0x664>)
   278f6:	e5a1      	b.n	2743c <__aeabi_ddiv+0x19c>
   278f8:	000003ff 	.word	0x000003ff
   278fc:	feffffff 	.word	0xfeffffff
   27900:	000007fe 	.word	0x000007fe
   27904:	000007ff 	.word	0x000007ff

00027908 <__eqdf2>:
   27908:	b5f0      	push	{r4, r5, r6, r7, lr}
   2790a:	464f      	mov	r7, r9
   2790c:	4646      	mov	r6, r8
   2790e:	46d6      	mov	lr, sl
   27910:	005c      	lsls	r4, r3, #1
   27912:	b5c0      	push	{r6, r7, lr}
   27914:	031f      	lsls	r7, r3, #12
   27916:	0fdb      	lsrs	r3, r3, #31
   27918:	469a      	mov	sl, r3
   2791a:	4b17      	ldr	r3, [pc, #92]	; (27978 <__eqdf2+0x70>)
   2791c:	030e      	lsls	r6, r1, #12
   2791e:	004d      	lsls	r5, r1, #1
   27920:	4684      	mov	ip, r0
   27922:	4680      	mov	r8, r0
   27924:	0b36      	lsrs	r6, r6, #12
   27926:	0d6d      	lsrs	r5, r5, #21
   27928:	0fc9      	lsrs	r1, r1, #31
   2792a:	4691      	mov	r9, r2
   2792c:	0b3f      	lsrs	r7, r7, #12
   2792e:	0d64      	lsrs	r4, r4, #21
   27930:	2001      	movs	r0, #1
   27932:	429d      	cmp	r5, r3
   27934:	d008      	beq.n	27948 <__eqdf2+0x40>
   27936:	429c      	cmp	r4, r3
   27938:	d001      	beq.n	2793e <__eqdf2+0x36>
   2793a:	42a5      	cmp	r5, r4
   2793c:	d00b      	beq.n	27956 <__eqdf2+0x4e>
   2793e:	bc1c      	pop	{r2, r3, r4}
   27940:	4690      	mov	r8, r2
   27942:	4699      	mov	r9, r3
   27944:	46a2      	mov	sl, r4
   27946:	bdf0      	pop	{r4, r5, r6, r7, pc}
   27948:	4663      	mov	r3, ip
   2794a:	4333      	orrs	r3, r6
   2794c:	d1f7      	bne.n	2793e <__eqdf2+0x36>
   2794e:	42ac      	cmp	r4, r5
   27950:	d1f5      	bne.n	2793e <__eqdf2+0x36>
   27952:	433a      	orrs	r2, r7
   27954:	d1f3      	bne.n	2793e <__eqdf2+0x36>
   27956:	2001      	movs	r0, #1
   27958:	42be      	cmp	r6, r7
   2795a:	d1f0      	bne.n	2793e <__eqdf2+0x36>
   2795c:	45c8      	cmp	r8, r9
   2795e:	d1ee      	bne.n	2793e <__eqdf2+0x36>
   27960:	4551      	cmp	r1, sl
   27962:	d007      	beq.n	27974 <__eqdf2+0x6c>
   27964:	2d00      	cmp	r5, #0
   27966:	d1ea      	bne.n	2793e <__eqdf2+0x36>
   27968:	4663      	mov	r3, ip
   2796a:	431e      	orrs	r6, r3
   2796c:	0030      	movs	r0, r6
   2796e:	1e46      	subs	r6, r0, #1
   27970:	41b0      	sbcs	r0, r6
   27972:	e7e4      	b.n	2793e <__eqdf2+0x36>
   27974:	2000      	movs	r0, #0
   27976:	e7e2      	b.n	2793e <__eqdf2+0x36>
   27978:	000007ff 	.word	0x000007ff

0002797c <__gedf2>:
   2797c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2797e:	4645      	mov	r5, r8
   27980:	46de      	mov	lr, fp
   27982:	4657      	mov	r7, sl
   27984:	464e      	mov	r6, r9
   27986:	b5e0      	push	{r5, r6, r7, lr}
   27988:	031f      	lsls	r7, r3, #12
   2798a:	0b3d      	lsrs	r5, r7, #12
   2798c:	4f2c      	ldr	r7, [pc, #176]	; (27a40 <__gedf2+0xc4>)
   2798e:	030e      	lsls	r6, r1, #12
   27990:	004c      	lsls	r4, r1, #1
   27992:	46ab      	mov	fp, r5
   27994:	005d      	lsls	r5, r3, #1
   27996:	4684      	mov	ip, r0
   27998:	0b36      	lsrs	r6, r6, #12
   2799a:	0d64      	lsrs	r4, r4, #21
   2799c:	0fc9      	lsrs	r1, r1, #31
   2799e:	4690      	mov	r8, r2
   279a0:	0d6d      	lsrs	r5, r5, #21
   279a2:	0fdb      	lsrs	r3, r3, #31
   279a4:	42bc      	cmp	r4, r7
   279a6:	d02a      	beq.n	279fe <__gedf2+0x82>
   279a8:	4f25      	ldr	r7, [pc, #148]	; (27a40 <__gedf2+0xc4>)
   279aa:	42bd      	cmp	r5, r7
   279ac:	d02d      	beq.n	27a0a <__gedf2+0x8e>
   279ae:	2c00      	cmp	r4, #0
   279b0:	d10f      	bne.n	279d2 <__gedf2+0x56>
   279b2:	4330      	orrs	r0, r6
   279b4:	0007      	movs	r7, r0
   279b6:	4681      	mov	r9, r0
   279b8:	4278      	negs	r0, r7
   279ba:	4178      	adcs	r0, r7
   279bc:	b2c0      	uxtb	r0, r0
   279be:	2d00      	cmp	r5, #0
   279c0:	d117      	bne.n	279f2 <__gedf2+0x76>
   279c2:	465f      	mov	r7, fp
   279c4:	433a      	orrs	r2, r7
   279c6:	d114      	bne.n	279f2 <__gedf2+0x76>
   279c8:	464b      	mov	r3, r9
   279ca:	2000      	movs	r0, #0
   279cc:	2b00      	cmp	r3, #0
   279ce:	d00a      	beq.n	279e6 <__gedf2+0x6a>
   279d0:	e006      	b.n	279e0 <__gedf2+0x64>
   279d2:	2d00      	cmp	r5, #0
   279d4:	d102      	bne.n	279dc <__gedf2+0x60>
   279d6:	4658      	mov	r0, fp
   279d8:	4302      	orrs	r2, r0
   279da:	d001      	beq.n	279e0 <__gedf2+0x64>
   279dc:	4299      	cmp	r1, r3
   279de:	d018      	beq.n	27a12 <__gedf2+0x96>
   279e0:	4248      	negs	r0, r1
   279e2:	2101      	movs	r1, #1
   279e4:	4308      	orrs	r0, r1
   279e6:	bc3c      	pop	{r2, r3, r4, r5}
   279e8:	4690      	mov	r8, r2
   279ea:	4699      	mov	r9, r3
   279ec:	46a2      	mov	sl, r4
   279ee:	46ab      	mov	fp, r5
   279f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   279f2:	2800      	cmp	r0, #0
   279f4:	d0f2      	beq.n	279dc <__gedf2+0x60>
   279f6:	2001      	movs	r0, #1
   279f8:	3b01      	subs	r3, #1
   279fa:	4318      	orrs	r0, r3
   279fc:	e7f3      	b.n	279e6 <__gedf2+0x6a>
   279fe:	0037      	movs	r7, r6
   27a00:	4307      	orrs	r7, r0
   27a02:	d0d1      	beq.n	279a8 <__gedf2+0x2c>
   27a04:	2002      	movs	r0, #2
   27a06:	4240      	negs	r0, r0
   27a08:	e7ed      	b.n	279e6 <__gedf2+0x6a>
   27a0a:	465f      	mov	r7, fp
   27a0c:	4317      	orrs	r7, r2
   27a0e:	d0ce      	beq.n	279ae <__gedf2+0x32>
   27a10:	e7f8      	b.n	27a04 <__gedf2+0x88>
   27a12:	42ac      	cmp	r4, r5
   27a14:	dce4      	bgt.n	279e0 <__gedf2+0x64>
   27a16:	da03      	bge.n	27a20 <__gedf2+0xa4>
   27a18:	1e48      	subs	r0, r1, #1
   27a1a:	2101      	movs	r1, #1
   27a1c:	4308      	orrs	r0, r1
   27a1e:	e7e2      	b.n	279e6 <__gedf2+0x6a>
   27a20:	455e      	cmp	r6, fp
   27a22:	d8dd      	bhi.n	279e0 <__gedf2+0x64>
   27a24:	d006      	beq.n	27a34 <__gedf2+0xb8>
   27a26:	2000      	movs	r0, #0
   27a28:	455e      	cmp	r6, fp
   27a2a:	d2dc      	bcs.n	279e6 <__gedf2+0x6a>
   27a2c:	2301      	movs	r3, #1
   27a2e:	1e48      	subs	r0, r1, #1
   27a30:	4318      	orrs	r0, r3
   27a32:	e7d8      	b.n	279e6 <__gedf2+0x6a>
   27a34:	45c4      	cmp	ip, r8
   27a36:	d8d3      	bhi.n	279e0 <__gedf2+0x64>
   27a38:	2000      	movs	r0, #0
   27a3a:	45c4      	cmp	ip, r8
   27a3c:	d3f6      	bcc.n	27a2c <__gedf2+0xb0>
   27a3e:	e7d2      	b.n	279e6 <__gedf2+0x6a>
   27a40:	000007ff 	.word	0x000007ff

00027a44 <__ledf2>:
   27a44:	b5f0      	push	{r4, r5, r6, r7, lr}
   27a46:	464e      	mov	r6, r9
   27a48:	4645      	mov	r5, r8
   27a4a:	46de      	mov	lr, fp
   27a4c:	4657      	mov	r7, sl
   27a4e:	005c      	lsls	r4, r3, #1
   27a50:	b5e0      	push	{r5, r6, r7, lr}
   27a52:	031f      	lsls	r7, r3, #12
   27a54:	0fdb      	lsrs	r3, r3, #31
   27a56:	4699      	mov	r9, r3
   27a58:	4b2a      	ldr	r3, [pc, #168]	; (27b04 <__ledf2+0xc0>)
   27a5a:	030e      	lsls	r6, r1, #12
   27a5c:	004d      	lsls	r5, r1, #1
   27a5e:	0fc9      	lsrs	r1, r1, #31
   27a60:	4684      	mov	ip, r0
   27a62:	0b36      	lsrs	r6, r6, #12
   27a64:	0d6d      	lsrs	r5, r5, #21
   27a66:	468b      	mov	fp, r1
   27a68:	4690      	mov	r8, r2
   27a6a:	0b3f      	lsrs	r7, r7, #12
   27a6c:	0d64      	lsrs	r4, r4, #21
   27a6e:	429d      	cmp	r5, r3
   27a70:	d020      	beq.n	27ab4 <__ledf2+0x70>
   27a72:	4b24      	ldr	r3, [pc, #144]	; (27b04 <__ledf2+0xc0>)
   27a74:	429c      	cmp	r4, r3
   27a76:	d022      	beq.n	27abe <__ledf2+0x7a>
   27a78:	2d00      	cmp	r5, #0
   27a7a:	d112      	bne.n	27aa2 <__ledf2+0x5e>
   27a7c:	4330      	orrs	r0, r6
   27a7e:	4243      	negs	r3, r0
   27a80:	4143      	adcs	r3, r0
   27a82:	b2db      	uxtb	r3, r3
   27a84:	2c00      	cmp	r4, #0
   27a86:	d01f      	beq.n	27ac8 <__ledf2+0x84>
   27a88:	2b00      	cmp	r3, #0
   27a8a:	d00c      	beq.n	27aa6 <__ledf2+0x62>
   27a8c:	464b      	mov	r3, r9
   27a8e:	2001      	movs	r0, #1
   27a90:	3b01      	subs	r3, #1
   27a92:	4303      	orrs	r3, r0
   27a94:	0018      	movs	r0, r3
   27a96:	bc3c      	pop	{r2, r3, r4, r5}
   27a98:	4690      	mov	r8, r2
   27a9a:	4699      	mov	r9, r3
   27a9c:	46a2      	mov	sl, r4
   27a9e:	46ab      	mov	fp, r5
   27aa0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   27aa2:	2c00      	cmp	r4, #0
   27aa4:	d016      	beq.n	27ad4 <__ledf2+0x90>
   27aa6:	45cb      	cmp	fp, r9
   27aa8:	d017      	beq.n	27ada <__ledf2+0x96>
   27aaa:	465b      	mov	r3, fp
   27aac:	4259      	negs	r1, r3
   27aae:	2301      	movs	r3, #1
   27ab0:	430b      	orrs	r3, r1
   27ab2:	e7ef      	b.n	27a94 <__ledf2+0x50>
   27ab4:	0031      	movs	r1, r6
   27ab6:	2302      	movs	r3, #2
   27ab8:	4301      	orrs	r1, r0
   27aba:	d1eb      	bne.n	27a94 <__ledf2+0x50>
   27abc:	e7d9      	b.n	27a72 <__ledf2+0x2e>
   27abe:	0039      	movs	r1, r7
   27ac0:	2302      	movs	r3, #2
   27ac2:	4311      	orrs	r1, r2
   27ac4:	d1e6      	bne.n	27a94 <__ledf2+0x50>
   27ac6:	e7d7      	b.n	27a78 <__ledf2+0x34>
   27ac8:	433a      	orrs	r2, r7
   27aca:	d1dd      	bne.n	27a88 <__ledf2+0x44>
   27acc:	2300      	movs	r3, #0
   27ace:	2800      	cmp	r0, #0
   27ad0:	d0e0      	beq.n	27a94 <__ledf2+0x50>
   27ad2:	e7ea      	b.n	27aaa <__ledf2+0x66>
   27ad4:	433a      	orrs	r2, r7
   27ad6:	d1e6      	bne.n	27aa6 <__ledf2+0x62>
   27ad8:	e7e7      	b.n	27aaa <__ledf2+0x66>
   27ada:	42a5      	cmp	r5, r4
   27adc:	dce5      	bgt.n	27aaa <__ledf2+0x66>
   27ade:	db05      	blt.n	27aec <__ledf2+0xa8>
   27ae0:	42be      	cmp	r6, r7
   27ae2:	d8e2      	bhi.n	27aaa <__ledf2+0x66>
   27ae4:	d007      	beq.n	27af6 <__ledf2+0xb2>
   27ae6:	2300      	movs	r3, #0
   27ae8:	42be      	cmp	r6, r7
   27aea:	d2d3      	bcs.n	27a94 <__ledf2+0x50>
   27aec:	4659      	mov	r1, fp
   27aee:	2301      	movs	r3, #1
   27af0:	3901      	subs	r1, #1
   27af2:	430b      	orrs	r3, r1
   27af4:	e7ce      	b.n	27a94 <__ledf2+0x50>
   27af6:	45c4      	cmp	ip, r8
   27af8:	d8d7      	bhi.n	27aaa <__ledf2+0x66>
   27afa:	2300      	movs	r3, #0
   27afc:	45c4      	cmp	ip, r8
   27afe:	d3f5      	bcc.n	27aec <__ledf2+0xa8>
   27b00:	e7c8      	b.n	27a94 <__ledf2+0x50>
   27b02:	46c0      	nop			; (mov r8, r8)
   27b04:	000007ff 	.word	0x000007ff

00027b08 <__aeabi_dmul>:
   27b08:	b5f0      	push	{r4, r5, r6, r7, lr}
   27b0a:	4657      	mov	r7, sl
   27b0c:	4645      	mov	r5, r8
   27b0e:	46de      	mov	lr, fp
   27b10:	464e      	mov	r6, r9
   27b12:	b5e0      	push	{r5, r6, r7, lr}
   27b14:	030c      	lsls	r4, r1, #12
   27b16:	4698      	mov	r8, r3
   27b18:	004e      	lsls	r6, r1, #1
   27b1a:	0b23      	lsrs	r3, r4, #12
   27b1c:	b087      	sub	sp, #28
   27b1e:	0007      	movs	r7, r0
   27b20:	4692      	mov	sl, r2
   27b22:	469b      	mov	fp, r3
   27b24:	0d76      	lsrs	r6, r6, #21
   27b26:	0fcd      	lsrs	r5, r1, #31
   27b28:	2e00      	cmp	r6, #0
   27b2a:	d06b      	beq.n	27c04 <__aeabi_dmul+0xfc>
   27b2c:	4b6d      	ldr	r3, [pc, #436]	; (27ce4 <__aeabi_dmul+0x1dc>)
   27b2e:	429e      	cmp	r6, r3
   27b30:	d035      	beq.n	27b9e <__aeabi_dmul+0x96>
   27b32:	2480      	movs	r4, #128	; 0x80
   27b34:	465b      	mov	r3, fp
   27b36:	0f42      	lsrs	r2, r0, #29
   27b38:	0424      	lsls	r4, r4, #16
   27b3a:	00db      	lsls	r3, r3, #3
   27b3c:	4314      	orrs	r4, r2
   27b3e:	431c      	orrs	r4, r3
   27b40:	00c3      	lsls	r3, r0, #3
   27b42:	4699      	mov	r9, r3
   27b44:	4b68      	ldr	r3, [pc, #416]	; (27ce8 <__aeabi_dmul+0x1e0>)
   27b46:	46a3      	mov	fp, r4
   27b48:	469c      	mov	ip, r3
   27b4a:	2300      	movs	r3, #0
   27b4c:	2700      	movs	r7, #0
   27b4e:	4466      	add	r6, ip
   27b50:	9302      	str	r3, [sp, #8]
   27b52:	4643      	mov	r3, r8
   27b54:	031c      	lsls	r4, r3, #12
   27b56:	005a      	lsls	r2, r3, #1
   27b58:	0fdb      	lsrs	r3, r3, #31
   27b5a:	4650      	mov	r0, sl
   27b5c:	0b24      	lsrs	r4, r4, #12
   27b5e:	0d52      	lsrs	r2, r2, #21
   27b60:	4698      	mov	r8, r3
   27b62:	d100      	bne.n	27b66 <__aeabi_dmul+0x5e>
   27b64:	e076      	b.n	27c54 <__aeabi_dmul+0x14c>
   27b66:	4b5f      	ldr	r3, [pc, #380]	; (27ce4 <__aeabi_dmul+0x1dc>)
   27b68:	429a      	cmp	r2, r3
   27b6a:	d06d      	beq.n	27c48 <__aeabi_dmul+0x140>
   27b6c:	2380      	movs	r3, #128	; 0x80
   27b6e:	0f41      	lsrs	r1, r0, #29
   27b70:	041b      	lsls	r3, r3, #16
   27b72:	430b      	orrs	r3, r1
   27b74:	495c      	ldr	r1, [pc, #368]	; (27ce8 <__aeabi_dmul+0x1e0>)
   27b76:	00e4      	lsls	r4, r4, #3
   27b78:	468c      	mov	ip, r1
   27b7a:	431c      	orrs	r4, r3
   27b7c:	00c3      	lsls	r3, r0, #3
   27b7e:	2000      	movs	r0, #0
   27b80:	4462      	add	r2, ip
   27b82:	4641      	mov	r1, r8
   27b84:	18b6      	adds	r6, r6, r2
   27b86:	4069      	eors	r1, r5
   27b88:	1c72      	adds	r2, r6, #1
   27b8a:	9101      	str	r1, [sp, #4]
   27b8c:	4694      	mov	ip, r2
   27b8e:	4307      	orrs	r7, r0
   27b90:	2f0f      	cmp	r7, #15
   27b92:	d900      	bls.n	27b96 <__aeabi_dmul+0x8e>
   27b94:	e0b0      	b.n	27cf8 <__aeabi_dmul+0x1f0>
   27b96:	4a55      	ldr	r2, [pc, #340]	; (27cec <__aeabi_dmul+0x1e4>)
   27b98:	00bf      	lsls	r7, r7, #2
   27b9a:	59d2      	ldr	r2, [r2, r7]
   27b9c:	4697      	mov	pc, r2
   27b9e:	465b      	mov	r3, fp
   27ba0:	4303      	orrs	r3, r0
   27ba2:	4699      	mov	r9, r3
   27ba4:	d000      	beq.n	27ba8 <__aeabi_dmul+0xa0>
   27ba6:	e087      	b.n	27cb8 <__aeabi_dmul+0x1b0>
   27ba8:	2300      	movs	r3, #0
   27baa:	469b      	mov	fp, r3
   27bac:	3302      	adds	r3, #2
   27bae:	2708      	movs	r7, #8
   27bb0:	9302      	str	r3, [sp, #8]
   27bb2:	e7ce      	b.n	27b52 <__aeabi_dmul+0x4a>
   27bb4:	4642      	mov	r2, r8
   27bb6:	9201      	str	r2, [sp, #4]
   27bb8:	2802      	cmp	r0, #2
   27bba:	d067      	beq.n	27c8c <__aeabi_dmul+0x184>
   27bbc:	2803      	cmp	r0, #3
   27bbe:	d100      	bne.n	27bc2 <__aeabi_dmul+0xba>
   27bc0:	e20e      	b.n	27fe0 <__aeabi_dmul+0x4d8>
   27bc2:	2801      	cmp	r0, #1
   27bc4:	d000      	beq.n	27bc8 <__aeabi_dmul+0xc0>
   27bc6:	e162      	b.n	27e8e <__aeabi_dmul+0x386>
   27bc8:	2300      	movs	r3, #0
   27bca:	2400      	movs	r4, #0
   27bcc:	2200      	movs	r2, #0
   27bce:	4699      	mov	r9, r3
   27bd0:	9901      	ldr	r1, [sp, #4]
   27bd2:	4001      	ands	r1, r0
   27bd4:	b2cd      	uxtb	r5, r1
   27bd6:	2100      	movs	r1, #0
   27bd8:	0312      	lsls	r2, r2, #12
   27bda:	0d0b      	lsrs	r3, r1, #20
   27bdc:	0b12      	lsrs	r2, r2, #12
   27bde:	051b      	lsls	r3, r3, #20
   27be0:	4313      	orrs	r3, r2
   27be2:	4a43      	ldr	r2, [pc, #268]	; (27cf0 <__aeabi_dmul+0x1e8>)
   27be4:	0524      	lsls	r4, r4, #20
   27be6:	4013      	ands	r3, r2
   27be8:	431c      	orrs	r4, r3
   27bea:	0064      	lsls	r4, r4, #1
   27bec:	07ed      	lsls	r5, r5, #31
   27bee:	0864      	lsrs	r4, r4, #1
   27bf0:	432c      	orrs	r4, r5
   27bf2:	4648      	mov	r0, r9
   27bf4:	0021      	movs	r1, r4
   27bf6:	b007      	add	sp, #28
   27bf8:	bc3c      	pop	{r2, r3, r4, r5}
   27bfa:	4690      	mov	r8, r2
   27bfc:	4699      	mov	r9, r3
   27bfe:	46a2      	mov	sl, r4
   27c00:	46ab      	mov	fp, r5
   27c02:	bdf0      	pop	{r4, r5, r6, r7, pc}
   27c04:	4303      	orrs	r3, r0
   27c06:	4699      	mov	r9, r3
   27c08:	d04f      	beq.n	27caa <__aeabi_dmul+0x1a2>
   27c0a:	465b      	mov	r3, fp
   27c0c:	2b00      	cmp	r3, #0
   27c0e:	d100      	bne.n	27c12 <__aeabi_dmul+0x10a>
   27c10:	e189      	b.n	27f26 <__aeabi_dmul+0x41e>
   27c12:	4658      	mov	r0, fp
   27c14:	f000 fe2e 	bl	28874 <__clzsi2>
   27c18:	0003      	movs	r3, r0
   27c1a:	3b0b      	subs	r3, #11
   27c1c:	2b1c      	cmp	r3, #28
   27c1e:	dd00      	ble.n	27c22 <__aeabi_dmul+0x11a>
   27c20:	e17a      	b.n	27f18 <__aeabi_dmul+0x410>
   27c22:	221d      	movs	r2, #29
   27c24:	1ad3      	subs	r3, r2, r3
   27c26:	003a      	movs	r2, r7
   27c28:	0001      	movs	r1, r0
   27c2a:	465c      	mov	r4, fp
   27c2c:	40da      	lsrs	r2, r3
   27c2e:	3908      	subs	r1, #8
   27c30:	408c      	lsls	r4, r1
   27c32:	0013      	movs	r3, r2
   27c34:	408f      	lsls	r7, r1
   27c36:	4323      	orrs	r3, r4
   27c38:	469b      	mov	fp, r3
   27c3a:	46b9      	mov	r9, r7
   27c3c:	2300      	movs	r3, #0
   27c3e:	4e2d      	ldr	r6, [pc, #180]	; (27cf4 <__aeabi_dmul+0x1ec>)
   27c40:	2700      	movs	r7, #0
   27c42:	1a36      	subs	r6, r6, r0
   27c44:	9302      	str	r3, [sp, #8]
   27c46:	e784      	b.n	27b52 <__aeabi_dmul+0x4a>
   27c48:	4653      	mov	r3, sl
   27c4a:	4323      	orrs	r3, r4
   27c4c:	d12a      	bne.n	27ca4 <__aeabi_dmul+0x19c>
   27c4e:	2400      	movs	r4, #0
   27c50:	2002      	movs	r0, #2
   27c52:	e796      	b.n	27b82 <__aeabi_dmul+0x7a>
   27c54:	4653      	mov	r3, sl
   27c56:	4323      	orrs	r3, r4
   27c58:	d020      	beq.n	27c9c <__aeabi_dmul+0x194>
   27c5a:	2c00      	cmp	r4, #0
   27c5c:	d100      	bne.n	27c60 <__aeabi_dmul+0x158>
   27c5e:	e157      	b.n	27f10 <__aeabi_dmul+0x408>
   27c60:	0020      	movs	r0, r4
   27c62:	f000 fe07 	bl	28874 <__clzsi2>
   27c66:	0003      	movs	r3, r0
   27c68:	3b0b      	subs	r3, #11
   27c6a:	2b1c      	cmp	r3, #28
   27c6c:	dd00      	ble.n	27c70 <__aeabi_dmul+0x168>
   27c6e:	e149      	b.n	27f04 <__aeabi_dmul+0x3fc>
   27c70:	211d      	movs	r1, #29
   27c72:	1acb      	subs	r3, r1, r3
   27c74:	4651      	mov	r1, sl
   27c76:	0002      	movs	r2, r0
   27c78:	40d9      	lsrs	r1, r3
   27c7a:	4653      	mov	r3, sl
   27c7c:	3a08      	subs	r2, #8
   27c7e:	4094      	lsls	r4, r2
   27c80:	4093      	lsls	r3, r2
   27c82:	430c      	orrs	r4, r1
   27c84:	4a1b      	ldr	r2, [pc, #108]	; (27cf4 <__aeabi_dmul+0x1ec>)
   27c86:	1a12      	subs	r2, r2, r0
   27c88:	2000      	movs	r0, #0
   27c8a:	e77a      	b.n	27b82 <__aeabi_dmul+0x7a>
   27c8c:	2501      	movs	r5, #1
   27c8e:	9b01      	ldr	r3, [sp, #4]
   27c90:	4c14      	ldr	r4, [pc, #80]	; (27ce4 <__aeabi_dmul+0x1dc>)
   27c92:	401d      	ands	r5, r3
   27c94:	2300      	movs	r3, #0
   27c96:	2200      	movs	r2, #0
   27c98:	4699      	mov	r9, r3
   27c9a:	e79c      	b.n	27bd6 <__aeabi_dmul+0xce>
   27c9c:	2400      	movs	r4, #0
   27c9e:	2200      	movs	r2, #0
   27ca0:	2001      	movs	r0, #1
   27ca2:	e76e      	b.n	27b82 <__aeabi_dmul+0x7a>
   27ca4:	4653      	mov	r3, sl
   27ca6:	2003      	movs	r0, #3
   27ca8:	e76b      	b.n	27b82 <__aeabi_dmul+0x7a>
   27caa:	2300      	movs	r3, #0
   27cac:	469b      	mov	fp, r3
   27cae:	3301      	adds	r3, #1
   27cb0:	2704      	movs	r7, #4
   27cb2:	2600      	movs	r6, #0
   27cb4:	9302      	str	r3, [sp, #8]
   27cb6:	e74c      	b.n	27b52 <__aeabi_dmul+0x4a>
   27cb8:	2303      	movs	r3, #3
   27cba:	4681      	mov	r9, r0
   27cbc:	270c      	movs	r7, #12
   27cbe:	9302      	str	r3, [sp, #8]
   27cc0:	e747      	b.n	27b52 <__aeabi_dmul+0x4a>
   27cc2:	2280      	movs	r2, #128	; 0x80
   27cc4:	2300      	movs	r3, #0
   27cc6:	2500      	movs	r5, #0
   27cc8:	0312      	lsls	r2, r2, #12
   27cca:	4699      	mov	r9, r3
   27ccc:	4c05      	ldr	r4, [pc, #20]	; (27ce4 <__aeabi_dmul+0x1dc>)
   27cce:	e782      	b.n	27bd6 <__aeabi_dmul+0xce>
   27cd0:	465c      	mov	r4, fp
   27cd2:	464b      	mov	r3, r9
   27cd4:	9802      	ldr	r0, [sp, #8]
   27cd6:	e76f      	b.n	27bb8 <__aeabi_dmul+0xb0>
   27cd8:	465c      	mov	r4, fp
   27cda:	464b      	mov	r3, r9
   27cdc:	9501      	str	r5, [sp, #4]
   27cde:	9802      	ldr	r0, [sp, #8]
   27ce0:	e76a      	b.n	27bb8 <__aeabi_dmul+0xb0>
   27ce2:	46c0      	nop			; (mov r8, r8)
   27ce4:	000007ff 	.word	0x000007ff
   27ce8:	fffffc01 	.word	0xfffffc01
   27cec:	0002aa40 	.word	0x0002aa40
   27cf0:	800fffff 	.word	0x800fffff
   27cf4:	fffffc0d 	.word	0xfffffc0d
   27cf8:	464a      	mov	r2, r9
   27cfa:	4649      	mov	r1, r9
   27cfc:	0c17      	lsrs	r7, r2, #16
   27cfe:	0c1a      	lsrs	r2, r3, #16
   27d00:	041b      	lsls	r3, r3, #16
   27d02:	0c1b      	lsrs	r3, r3, #16
   27d04:	0408      	lsls	r0, r1, #16
   27d06:	0019      	movs	r1, r3
   27d08:	0c00      	lsrs	r0, r0, #16
   27d0a:	4341      	muls	r1, r0
   27d0c:	0015      	movs	r5, r2
   27d0e:	4688      	mov	r8, r1
   27d10:	0019      	movs	r1, r3
   27d12:	437d      	muls	r5, r7
   27d14:	4379      	muls	r1, r7
   27d16:	9503      	str	r5, [sp, #12]
   27d18:	4689      	mov	r9, r1
   27d1a:	0029      	movs	r1, r5
   27d1c:	0015      	movs	r5, r2
   27d1e:	4345      	muls	r5, r0
   27d20:	444d      	add	r5, r9
   27d22:	9502      	str	r5, [sp, #8]
   27d24:	4645      	mov	r5, r8
   27d26:	0c2d      	lsrs	r5, r5, #16
   27d28:	46aa      	mov	sl, r5
   27d2a:	9d02      	ldr	r5, [sp, #8]
   27d2c:	4455      	add	r5, sl
   27d2e:	45a9      	cmp	r9, r5
   27d30:	d906      	bls.n	27d40 <__aeabi_dmul+0x238>
   27d32:	468a      	mov	sl, r1
   27d34:	2180      	movs	r1, #128	; 0x80
   27d36:	0249      	lsls	r1, r1, #9
   27d38:	4689      	mov	r9, r1
   27d3a:	44ca      	add	sl, r9
   27d3c:	4651      	mov	r1, sl
   27d3e:	9103      	str	r1, [sp, #12]
   27d40:	0c29      	lsrs	r1, r5, #16
   27d42:	9104      	str	r1, [sp, #16]
   27d44:	4641      	mov	r1, r8
   27d46:	0409      	lsls	r1, r1, #16
   27d48:	042d      	lsls	r5, r5, #16
   27d4a:	0c09      	lsrs	r1, r1, #16
   27d4c:	4688      	mov	r8, r1
   27d4e:	0029      	movs	r1, r5
   27d50:	0c25      	lsrs	r5, r4, #16
   27d52:	0424      	lsls	r4, r4, #16
   27d54:	4441      	add	r1, r8
   27d56:	0c24      	lsrs	r4, r4, #16
   27d58:	9105      	str	r1, [sp, #20]
   27d5a:	0021      	movs	r1, r4
   27d5c:	4341      	muls	r1, r0
   27d5e:	4688      	mov	r8, r1
   27d60:	0021      	movs	r1, r4
   27d62:	4379      	muls	r1, r7
   27d64:	468a      	mov	sl, r1
   27d66:	4368      	muls	r0, r5
   27d68:	4641      	mov	r1, r8
   27d6a:	4450      	add	r0, sl
   27d6c:	4681      	mov	r9, r0
   27d6e:	0c08      	lsrs	r0, r1, #16
   27d70:	4448      	add	r0, r9
   27d72:	436f      	muls	r7, r5
   27d74:	4582      	cmp	sl, r0
   27d76:	d903      	bls.n	27d80 <__aeabi_dmul+0x278>
   27d78:	2180      	movs	r1, #128	; 0x80
   27d7a:	0249      	lsls	r1, r1, #9
   27d7c:	4689      	mov	r9, r1
   27d7e:	444f      	add	r7, r9
   27d80:	0c01      	lsrs	r1, r0, #16
   27d82:	4689      	mov	r9, r1
   27d84:	0039      	movs	r1, r7
   27d86:	4449      	add	r1, r9
   27d88:	9102      	str	r1, [sp, #8]
   27d8a:	4641      	mov	r1, r8
   27d8c:	040f      	lsls	r7, r1, #16
   27d8e:	9904      	ldr	r1, [sp, #16]
   27d90:	0c3f      	lsrs	r7, r7, #16
   27d92:	4688      	mov	r8, r1
   27d94:	0400      	lsls	r0, r0, #16
   27d96:	19c0      	adds	r0, r0, r7
   27d98:	4480      	add	r8, r0
   27d9a:	4641      	mov	r1, r8
   27d9c:	9104      	str	r1, [sp, #16]
   27d9e:	4659      	mov	r1, fp
   27da0:	0c0f      	lsrs	r7, r1, #16
   27da2:	0409      	lsls	r1, r1, #16
   27da4:	0c09      	lsrs	r1, r1, #16
   27da6:	4688      	mov	r8, r1
   27da8:	4359      	muls	r1, r3
   27daa:	468a      	mov	sl, r1
   27dac:	0039      	movs	r1, r7
   27dae:	4351      	muls	r1, r2
   27db0:	4689      	mov	r9, r1
   27db2:	4641      	mov	r1, r8
   27db4:	434a      	muls	r2, r1
   27db6:	4651      	mov	r1, sl
   27db8:	0c09      	lsrs	r1, r1, #16
   27dba:	468b      	mov	fp, r1
   27dbc:	437b      	muls	r3, r7
   27dbe:	18d2      	adds	r2, r2, r3
   27dc0:	445a      	add	r2, fp
   27dc2:	4293      	cmp	r3, r2
   27dc4:	d903      	bls.n	27dce <__aeabi_dmul+0x2c6>
   27dc6:	2380      	movs	r3, #128	; 0x80
   27dc8:	025b      	lsls	r3, r3, #9
   27dca:	469b      	mov	fp, r3
   27dcc:	44d9      	add	r9, fp
   27dce:	4651      	mov	r1, sl
   27dd0:	0409      	lsls	r1, r1, #16
   27dd2:	0c09      	lsrs	r1, r1, #16
   27dd4:	468a      	mov	sl, r1
   27dd6:	4641      	mov	r1, r8
   27dd8:	4361      	muls	r1, r4
   27dda:	437c      	muls	r4, r7
   27ddc:	0c13      	lsrs	r3, r2, #16
   27dde:	0412      	lsls	r2, r2, #16
   27de0:	444b      	add	r3, r9
   27de2:	4452      	add	r2, sl
   27de4:	46a1      	mov	r9, r4
   27de6:	468a      	mov	sl, r1
   27de8:	003c      	movs	r4, r7
   27dea:	4641      	mov	r1, r8
   27dec:	436c      	muls	r4, r5
   27dee:	434d      	muls	r5, r1
   27df0:	4651      	mov	r1, sl
   27df2:	444d      	add	r5, r9
   27df4:	0c0f      	lsrs	r7, r1, #16
   27df6:	197d      	adds	r5, r7, r5
   27df8:	45a9      	cmp	r9, r5
   27dfa:	d903      	bls.n	27e04 <__aeabi_dmul+0x2fc>
   27dfc:	2180      	movs	r1, #128	; 0x80
   27dfe:	0249      	lsls	r1, r1, #9
   27e00:	4688      	mov	r8, r1
   27e02:	4444      	add	r4, r8
   27e04:	9f04      	ldr	r7, [sp, #16]
   27e06:	9903      	ldr	r1, [sp, #12]
   27e08:	46b8      	mov	r8, r7
   27e0a:	4441      	add	r1, r8
   27e0c:	468b      	mov	fp, r1
   27e0e:	4583      	cmp	fp, r0
   27e10:	4180      	sbcs	r0, r0
   27e12:	4241      	negs	r1, r0
   27e14:	4688      	mov	r8, r1
   27e16:	4651      	mov	r1, sl
   27e18:	0408      	lsls	r0, r1, #16
   27e1a:	042f      	lsls	r7, r5, #16
   27e1c:	0c00      	lsrs	r0, r0, #16
   27e1e:	183f      	adds	r7, r7, r0
   27e20:	4658      	mov	r0, fp
   27e22:	9902      	ldr	r1, [sp, #8]
   27e24:	1810      	adds	r0, r2, r0
   27e26:	4689      	mov	r9, r1
   27e28:	4290      	cmp	r0, r2
   27e2a:	4192      	sbcs	r2, r2
   27e2c:	444f      	add	r7, r9
   27e2e:	46ba      	mov	sl, r7
   27e30:	4252      	negs	r2, r2
   27e32:	4699      	mov	r9, r3
   27e34:	4693      	mov	fp, r2
   27e36:	44c2      	add	sl, r8
   27e38:	44d1      	add	r9, sl
   27e3a:	44cb      	add	fp, r9
   27e3c:	428f      	cmp	r7, r1
   27e3e:	41bf      	sbcs	r7, r7
   27e40:	45c2      	cmp	sl, r8
   27e42:	4189      	sbcs	r1, r1
   27e44:	4599      	cmp	r9, r3
   27e46:	419b      	sbcs	r3, r3
   27e48:	4593      	cmp	fp, r2
   27e4a:	4192      	sbcs	r2, r2
   27e4c:	427f      	negs	r7, r7
   27e4e:	4249      	negs	r1, r1
   27e50:	0c2d      	lsrs	r5, r5, #16
   27e52:	4252      	negs	r2, r2
   27e54:	430f      	orrs	r7, r1
   27e56:	425b      	negs	r3, r3
   27e58:	4313      	orrs	r3, r2
   27e5a:	197f      	adds	r7, r7, r5
   27e5c:	18ff      	adds	r7, r7, r3
   27e5e:	465b      	mov	r3, fp
   27e60:	193c      	adds	r4, r7, r4
   27e62:	0ddb      	lsrs	r3, r3, #23
   27e64:	9a05      	ldr	r2, [sp, #20]
   27e66:	0264      	lsls	r4, r4, #9
   27e68:	431c      	orrs	r4, r3
   27e6a:	0243      	lsls	r3, r0, #9
   27e6c:	4313      	orrs	r3, r2
   27e6e:	1e5d      	subs	r5, r3, #1
   27e70:	41ab      	sbcs	r3, r5
   27e72:	465a      	mov	r2, fp
   27e74:	0dc0      	lsrs	r0, r0, #23
   27e76:	4303      	orrs	r3, r0
   27e78:	0252      	lsls	r2, r2, #9
   27e7a:	4313      	orrs	r3, r2
   27e7c:	01e2      	lsls	r2, r4, #7
   27e7e:	d556      	bpl.n	27f2e <__aeabi_dmul+0x426>
   27e80:	2001      	movs	r0, #1
   27e82:	085a      	lsrs	r2, r3, #1
   27e84:	4003      	ands	r3, r0
   27e86:	4313      	orrs	r3, r2
   27e88:	07e2      	lsls	r2, r4, #31
   27e8a:	4313      	orrs	r3, r2
   27e8c:	0864      	lsrs	r4, r4, #1
   27e8e:	485a      	ldr	r0, [pc, #360]	; (27ff8 <__aeabi_dmul+0x4f0>)
   27e90:	4460      	add	r0, ip
   27e92:	2800      	cmp	r0, #0
   27e94:	dd4d      	ble.n	27f32 <__aeabi_dmul+0x42a>
   27e96:	075a      	lsls	r2, r3, #29
   27e98:	d009      	beq.n	27eae <__aeabi_dmul+0x3a6>
   27e9a:	220f      	movs	r2, #15
   27e9c:	401a      	ands	r2, r3
   27e9e:	2a04      	cmp	r2, #4
   27ea0:	d005      	beq.n	27eae <__aeabi_dmul+0x3a6>
   27ea2:	1d1a      	adds	r2, r3, #4
   27ea4:	429a      	cmp	r2, r3
   27ea6:	419b      	sbcs	r3, r3
   27ea8:	425b      	negs	r3, r3
   27eaa:	18e4      	adds	r4, r4, r3
   27eac:	0013      	movs	r3, r2
   27eae:	01e2      	lsls	r2, r4, #7
   27eb0:	d504      	bpl.n	27ebc <__aeabi_dmul+0x3b4>
   27eb2:	2080      	movs	r0, #128	; 0x80
   27eb4:	4a51      	ldr	r2, [pc, #324]	; (27ffc <__aeabi_dmul+0x4f4>)
   27eb6:	00c0      	lsls	r0, r0, #3
   27eb8:	4014      	ands	r4, r2
   27eba:	4460      	add	r0, ip
   27ebc:	4a50      	ldr	r2, [pc, #320]	; (28000 <__aeabi_dmul+0x4f8>)
   27ebe:	4290      	cmp	r0, r2
   27ec0:	dd00      	ble.n	27ec4 <__aeabi_dmul+0x3bc>
   27ec2:	e6e3      	b.n	27c8c <__aeabi_dmul+0x184>
   27ec4:	2501      	movs	r5, #1
   27ec6:	08db      	lsrs	r3, r3, #3
   27ec8:	0762      	lsls	r2, r4, #29
   27eca:	431a      	orrs	r2, r3
   27ecc:	0264      	lsls	r4, r4, #9
   27ece:	9b01      	ldr	r3, [sp, #4]
   27ed0:	4691      	mov	r9, r2
   27ed2:	0b22      	lsrs	r2, r4, #12
   27ed4:	0544      	lsls	r4, r0, #21
   27ed6:	0d64      	lsrs	r4, r4, #21
   27ed8:	401d      	ands	r5, r3
   27eda:	e67c      	b.n	27bd6 <__aeabi_dmul+0xce>
   27edc:	2280      	movs	r2, #128	; 0x80
   27ede:	4659      	mov	r1, fp
   27ee0:	0312      	lsls	r2, r2, #12
   27ee2:	4211      	tst	r1, r2
   27ee4:	d008      	beq.n	27ef8 <__aeabi_dmul+0x3f0>
   27ee6:	4214      	tst	r4, r2
   27ee8:	d106      	bne.n	27ef8 <__aeabi_dmul+0x3f0>
   27eea:	4322      	orrs	r2, r4
   27eec:	0312      	lsls	r2, r2, #12
   27eee:	0b12      	lsrs	r2, r2, #12
   27ef0:	4645      	mov	r5, r8
   27ef2:	4699      	mov	r9, r3
   27ef4:	4c43      	ldr	r4, [pc, #268]	; (28004 <__aeabi_dmul+0x4fc>)
   27ef6:	e66e      	b.n	27bd6 <__aeabi_dmul+0xce>
   27ef8:	465b      	mov	r3, fp
   27efa:	431a      	orrs	r2, r3
   27efc:	0312      	lsls	r2, r2, #12
   27efe:	0b12      	lsrs	r2, r2, #12
   27f00:	4c40      	ldr	r4, [pc, #256]	; (28004 <__aeabi_dmul+0x4fc>)
   27f02:	e668      	b.n	27bd6 <__aeabi_dmul+0xce>
   27f04:	0003      	movs	r3, r0
   27f06:	4654      	mov	r4, sl
   27f08:	3b28      	subs	r3, #40	; 0x28
   27f0a:	409c      	lsls	r4, r3
   27f0c:	2300      	movs	r3, #0
   27f0e:	e6b9      	b.n	27c84 <__aeabi_dmul+0x17c>
   27f10:	f000 fcb0 	bl	28874 <__clzsi2>
   27f14:	3020      	adds	r0, #32
   27f16:	e6a6      	b.n	27c66 <__aeabi_dmul+0x15e>
   27f18:	0003      	movs	r3, r0
   27f1a:	3b28      	subs	r3, #40	; 0x28
   27f1c:	409f      	lsls	r7, r3
   27f1e:	2300      	movs	r3, #0
   27f20:	46bb      	mov	fp, r7
   27f22:	4699      	mov	r9, r3
   27f24:	e68a      	b.n	27c3c <__aeabi_dmul+0x134>
   27f26:	f000 fca5 	bl	28874 <__clzsi2>
   27f2a:	3020      	adds	r0, #32
   27f2c:	e674      	b.n	27c18 <__aeabi_dmul+0x110>
   27f2e:	46b4      	mov	ip, r6
   27f30:	e7ad      	b.n	27e8e <__aeabi_dmul+0x386>
   27f32:	2501      	movs	r5, #1
   27f34:	1a2a      	subs	r2, r5, r0
   27f36:	2a38      	cmp	r2, #56	; 0x38
   27f38:	dd06      	ble.n	27f48 <__aeabi_dmul+0x440>
   27f3a:	9b01      	ldr	r3, [sp, #4]
   27f3c:	2400      	movs	r4, #0
   27f3e:	401d      	ands	r5, r3
   27f40:	2300      	movs	r3, #0
   27f42:	2200      	movs	r2, #0
   27f44:	4699      	mov	r9, r3
   27f46:	e646      	b.n	27bd6 <__aeabi_dmul+0xce>
   27f48:	2a1f      	cmp	r2, #31
   27f4a:	dc21      	bgt.n	27f90 <__aeabi_dmul+0x488>
   27f4c:	2520      	movs	r5, #32
   27f4e:	0020      	movs	r0, r4
   27f50:	1aad      	subs	r5, r5, r2
   27f52:	001e      	movs	r6, r3
   27f54:	40ab      	lsls	r3, r5
   27f56:	40a8      	lsls	r0, r5
   27f58:	40d6      	lsrs	r6, r2
   27f5a:	1e5d      	subs	r5, r3, #1
   27f5c:	41ab      	sbcs	r3, r5
   27f5e:	4330      	orrs	r0, r6
   27f60:	4318      	orrs	r0, r3
   27f62:	40d4      	lsrs	r4, r2
   27f64:	0743      	lsls	r3, r0, #29
   27f66:	d009      	beq.n	27f7c <__aeabi_dmul+0x474>
   27f68:	230f      	movs	r3, #15
   27f6a:	4003      	ands	r3, r0
   27f6c:	2b04      	cmp	r3, #4
   27f6e:	d005      	beq.n	27f7c <__aeabi_dmul+0x474>
   27f70:	0003      	movs	r3, r0
   27f72:	1d18      	adds	r0, r3, #4
   27f74:	4298      	cmp	r0, r3
   27f76:	419b      	sbcs	r3, r3
   27f78:	425b      	negs	r3, r3
   27f7a:	18e4      	adds	r4, r4, r3
   27f7c:	0223      	lsls	r3, r4, #8
   27f7e:	d521      	bpl.n	27fc4 <__aeabi_dmul+0x4bc>
   27f80:	2501      	movs	r5, #1
   27f82:	9b01      	ldr	r3, [sp, #4]
   27f84:	2401      	movs	r4, #1
   27f86:	401d      	ands	r5, r3
   27f88:	2300      	movs	r3, #0
   27f8a:	2200      	movs	r2, #0
   27f8c:	4699      	mov	r9, r3
   27f8e:	e622      	b.n	27bd6 <__aeabi_dmul+0xce>
   27f90:	251f      	movs	r5, #31
   27f92:	0021      	movs	r1, r4
   27f94:	426d      	negs	r5, r5
   27f96:	1a28      	subs	r0, r5, r0
   27f98:	40c1      	lsrs	r1, r0
   27f9a:	0008      	movs	r0, r1
   27f9c:	2a20      	cmp	r2, #32
   27f9e:	d01d      	beq.n	27fdc <__aeabi_dmul+0x4d4>
   27fa0:	355f      	adds	r5, #95	; 0x5f
   27fa2:	1aaa      	subs	r2, r5, r2
   27fa4:	4094      	lsls	r4, r2
   27fa6:	4323      	orrs	r3, r4
   27fa8:	1e5c      	subs	r4, r3, #1
   27faa:	41a3      	sbcs	r3, r4
   27fac:	2507      	movs	r5, #7
   27fae:	4303      	orrs	r3, r0
   27fb0:	401d      	ands	r5, r3
   27fb2:	2200      	movs	r2, #0
   27fb4:	2d00      	cmp	r5, #0
   27fb6:	d009      	beq.n	27fcc <__aeabi_dmul+0x4c4>
   27fb8:	220f      	movs	r2, #15
   27fba:	2400      	movs	r4, #0
   27fbc:	401a      	ands	r2, r3
   27fbe:	0018      	movs	r0, r3
   27fc0:	2a04      	cmp	r2, #4
   27fc2:	d1d6      	bne.n	27f72 <__aeabi_dmul+0x46a>
   27fc4:	0003      	movs	r3, r0
   27fc6:	0765      	lsls	r5, r4, #29
   27fc8:	0264      	lsls	r4, r4, #9
   27fca:	0b22      	lsrs	r2, r4, #12
   27fcc:	08db      	lsrs	r3, r3, #3
   27fce:	432b      	orrs	r3, r5
   27fd0:	2501      	movs	r5, #1
   27fd2:	4699      	mov	r9, r3
   27fd4:	9b01      	ldr	r3, [sp, #4]
   27fd6:	2400      	movs	r4, #0
   27fd8:	401d      	ands	r5, r3
   27fda:	e5fc      	b.n	27bd6 <__aeabi_dmul+0xce>
   27fdc:	2400      	movs	r4, #0
   27fde:	e7e2      	b.n	27fa6 <__aeabi_dmul+0x49e>
   27fe0:	2280      	movs	r2, #128	; 0x80
   27fe2:	2501      	movs	r5, #1
   27fe4:	0312      	lsls	r2, r2, #12
   27fe6:	4322      	orrs	r2, r4
   27fe8:	9901      	ldr	r1, [sp, #4]
   27fea:	0312      	lsls	r2, r2, #12
   27fec:	0b12      	lsrs	r2, r2, #12
   27fee:	400d      	ands	r5, r1
   27ff0:	4699      	mov	r9, r3
   27ff2:	4c04      	ldr	r4, [pc, #16]	; (28004 <__aeabi_dmul+0x4fc>)
   27ff4:	e5ef      	b.n	27bd6 <__aeabi_dmul+0xce>
   27ff6:	46c0      	nop			; (mov r8, r8)
   27ff8:	000003ff 	.word	0x000003ff
   27ffc:	feffffff 	.word	0xfeffffff
   28000:	000007fe 	.word	0x000007fe
   28004:	000007ff 	.word	0x000007ff

00028008 <__aeabi_dsub>:
   28008:	b5f0      	push	{r4, r5, r6, r7, lr}
   2800a:	4646      	mov	r6, r8
   2800c:	46d6      	mov	lr, sl
   2800e:	464f      	mov	r7, r9
   28010:	030c      	lsls	r4, r1, #12
   28012:	b5c0      	push	{r6, r7, lr}
   28014:	0fcd      	lsrs	r5, r1, #31
   28016:	004e      	lsls	r6, r1, #1
   28018:	0a61      	lsrs	r1, r4, #9
   2801a:	0f44      	lsrs	r4, r0, #29
   2801c:	430c      	orrs	r4, r1
   2801e:	00c1      	lsls	r1, r0, #3
   28020:	0058      	lsls	r0, r3, #1
   28022:	0d40      	lsrs	r0, r0, #21
   28024:	4684      	mov	ip, r0
   28026:	468a      	mov	sl, r1
   28028:	000f      	movs	r7, r1
   2802a:	0319      	lsls	r1, r3, #12
   2802c:	0f50      	lsrs	r0, r2, #29
   2802e:	0a49      	lsrs	r1, r1, #9
   28030:	4301      	orrs	r1, r0
   28032:	48c6      	ldr	r0, [pc, #792]	; (2834c <__aeabi_dsub+0x344>)
   28034:	0d76      	lsrs	r6, r6, #21
   28036:	46a8      	mov	r8, r5
   28038:	0fdb      	lsrs	r3, r3, #31
   2803a:	00d2      	lsls	r2, r2, #3
   2803c:	4584      	cmp	ip, r0
   2803e:	d100      	bne.n	28042 <__aeabi_dsub+0x3a>
   28040:	e0d8      	b.n	281f4 <__aeabi_dsub+0x1ec>
   28042:	2001      	movs	r0, #1
   28044:	4043      	eors	r3, r0
   28046:	42ab      	cmp	r3, r5
   28048:	d100      	bne.n	2804c <__aeabi_dsub+0x44>
   2804a:	e0a6      	b.n	2819a <__aeabi_dsub+0x192>
   2804c:	4660      	mov	r0, ip
   2804e:	1a35      	subs	r5, r6, r0
   28050:	2d00      	cmp	r5, #0
   28052:	dc00      	bgt.n	28056 <__aeabi_dsub+0x4e>
   28054:	e105      	b.n	28262 <__aeabi_dsub+0x25a>
   28056:	2800      	cmp	r0, #0
   28058:	d110      	bne.n	2807c <__aeabi_dsub+0x74>
   2805a:	000b      	movs	r3, r1
   2805c:	4313      	orrs	r3, r2
   2805e:	d100      	bne.n	28062 <__aeabi_dsub+0x5a>
   28060:	e0d7      	b.n	28212 <__aeabi_dsub+0x20a>
   28062:	1e6b      	subs	r3, r5, #1
   28064:	2b00      	cmp	r3, #0
   28066:	d000      	beq.n	2806a <__aeabi_dsub+0x62>
   28068:	e14b      	b.n	28302 <__aeabi_dsub+0x2fa>
   2806a:	4653      	mov	r3, sl
   2806c:	1a9f      	subs	r7, r3, r2
   2806e:	45ba      	cmp	sl, r7
   28070:	4180      	sbcs	r0, r0
   28072:	1a64      	subs	r4, r4, r1
   28074:	4240      	negs	r0, r0
   28076:	1a24      	subs	r4, r4, r0
   28078:	2601      	movs	r6, #1
   2807a:	e01e      	b.n	280ba <__aeabi_dsub+0xb2>
   2807c:	4bb3      	ldr	r3, [pc, #716]	; (2834c <__aeabi_dsub+0x344>)
   2807e:	429e      	cmp	r6, r3
   28080:	d048      	beq.n	28114 <__aeabi_dsub+0x10c>
   28082:	2380      	movs	r3, #128	; 0x80
   28084:	041b      	lsls	r3, r3, #16
   28086:	4319      	orrs	r1, r3
   28088:	2d38      	cmp	r5, #56	; 0x38
   2808a:	dd00      	ble.n	2808e <__aeabi_dsub+0x86>
   2808c:	e119      	b.n	282c2 <__aeabi_dsub+0x2ba>
   2808e:	2d1f      	cmp	r5, #31
   28090:	dd00      	ble.n	28094 <__aeabi_dsub+0x8c>
   28092:	e14c      	b.n	2832e <__aeabi_dsub+0x326>
   28094:	2320      	movs	r3, #32
   28096:	000f      	movs	r7, r1
   28098:	1b5b      	subs	r3, r3, r5
   2809a:	0010      	movs	r0, r2
   2809c:	409a      	lsls	r2, r3
   2809e:	409f      	lsls	r7, r3
   280a0:	40e8      	lsrs	r0, r5
   280a2:	1e53      	subs	r3, r2, #1
   280a4:	419a      	sbcs	r2, r3
   280a6:	40e9      	lsrs	r1, r5
   280a8:	4307      	orrs	r7, r0
   280aa:	4317      	orrs	r7, r2
   280ac:	4653      	mov	r3, sl
   280ae:	1bdf      	subs	r7, r3, r7
   280b0:	1a61      	subs	r1, r4, r1
   280b2:	45ba      	cmp	sl, r7
   280b4:	41a4      	sbcs	r4, r4
   280b6:	4264      	negs	r4, r4
   280b8:	1b0c      	subs	r4, r1, r4
   280ba:	0223      	lsls	r3, r4, #8
   280bc:	d400      	bmi.n	280c0 <__aeabi_dsub+0xb8>
   280be:	e0c5      	b.n	2824c <__aeabi_dsub+0x244>
   280c0:	0264      	lsls	r4, r4, #9
   280c2:	0a65      	lsrs	r5, r4, #9
   280c4:	2d00      	cmp	r5, #0
   280c6:	d100      	bne.n	280ca <__aeabi_dsub+0xc2>
   280c8:	e0f6      	b.n	282b8 <__aeabi_dsub+0x2b0>
   280ca:	0028      	movs	r0, r5
   280cc:	f000 fbd2 	bl	28874 <__clzsi2>
   280d0:	0003      	movs	r3, r0
   280d2:	3b08      	subs	r3, #8
   280d4:	2b1f      	cmp	r3, #31
   280d6:	dd00      	ble.n	280da <__aeabi_dsub+0xd2>
   280d8:	e0e9      	b.n	282ae <__aeabi_dsub+0x2a6>
   280da:	2220      	movs	r2, #32
   280dc:	003c      	movs	r4, r7
   280de:	1ad2      	subs	r2, r2, r3
   280e0:	409d      	lsls	r5, r3
   280e2:	40d4      	lsrs	r4, r2
   280e4:	409f      	lsls	r7, r3
   280e6:	4325      	orrs	r5, r4
   280e8:	429e      	cmp	r6, r3
   280ea:	dd00      	ble.n	280ee <__aeabi_dsub+0xe6>
   280ec:	e0db      	b.n	282a6 <__aeabi_dsub+0x29e>
   280ee:	1b9e      	subs	r6, r3, r6
   280f0:	1c73      	adds	r3, r6, #1
   280f2:	2b1f      	cmp	r3, #31
   280f4:	dd00      	ble.n	280f8 <__aeabi_dsub+0xf0>
   280f6:	e10a      	b.n	2830e <__aeabi_dsub+0x306>
   280f8:	2220      	movs	r2, #32
   280fa:	0038      	movs	r0, r7
   280fc:	1ad2      	subs	r2, r2, r3
   280fe:	0029      	movs	r1, r5
   28100:	4097      	lsls	r7, r2
   28102:	002c      	movs	r4, r5
   28104:	4091      	lsls	r1, r2
   28106:	40d8      	lsrs	r0, r3
   28108:	1e7a      	subs	r2, r7, #1
   2810a:	4197      	sbcs	r7, r2
   2810c:	40dc      	lsrs	r4, r3
   2810e:	2600      	movs	r6, #0
   28110:	4301      	orrs	r1, r0
   28112:	430f      	orrs	r7, r1
   28114:	077b      	lsls	r3, r7, #29
   28116:	d009      	beq.n	2812c <__aeabi_dsub+0x124>
   28118:	230f      	movs	r3, #15
   2811a:	403b      	ands	r3, r7
   2811c:	2b04      	cmp	r3, #4
   2811e:	d005      	beq.n	2812c <__aeabi_dsub+0x124>
   28120:	1d3b      	adds	r3, r7, #4
   28122:	42bb      	cmp	r3, r7
   28124:	41bf      	sbcs	r7, r7
   28126:	427f      	negs	r7, r7
   28128:	19e4      	adds	r4, r4, r7
   2812a:	001f      	movs	r7, r3
   2812c:	0223      	lsls	r3, r4, #8
   2812e:	d525      	bpl.n	2817c <__aeabi_dsub+0x174>
   28130:	4b86      	ldr	r3, [pc, #536]	; (2834c <__aeabi_dsub+0x344>)
   28132:	3601      	adds	r6, #1
   28134:	429e      	cmp	r6, r3
   28136:	d100      	bne.n	2813a <__aeabi_dsub+0x132>
   28138:	e0af      	b.n	2829a <__aeabi_dsub+0x292>
   2813a:	4b85      	ldr	r3, [pc, #532]	; (28350 <__aeabi_dsub+0x348>)
   2813c:	2501      	movs	r5, #1
   2813e:	401c      	ands	r4, r3
   28140:	4643      	mov	r3, r8
   28142:	0762      	lsls	r2, r4, #29
   28144:	08ff      	lsrs	r7, r7, #3
   28146:	0264      	lsls	r4, r4, #9
   28148:	0576      	lsls	r6, r6, #21
   2814a:	4317      	orrs	r7, r2
   2814c:	0b24      	lsrs	r4, r4, #12
   2814e:	0d76      	lsrs	r6, r6, #21
   28150:	401d      	ands	r5, r3
   28152:	2100      	movs	r1, #0
   28154:	0324      	lsls	r4, r4, #12
   28156:	0b23      	lsrs	r3, r4, #12
   28158:	0d0c      	lsrs	r4, r1, #20
   2815a:	4a7e      	ldr	r2, [pc, #504]	; (28354 <__aeabi_dsub+0x34c>)
   2815c:	0524      	lsls	r4, r4, #20
   2815e:	431c      	orrs	r4, r3
   28160:	4014      	ands	r4, r2
   28162:	0533      	lsls	r3, r6, #20
   28164:	4323      	orrs	r3, r4
   28166:	005b      	lsls	r3, r3, #1
   28168:	07ed      	lsls	r5, r5, #31
   2816a:	085b      	lsrs	r3, r3, #1
   2816c:	432b      	orrs	r3, r5
   2816e:	0038      	movs	r0, r7
   28170:	0019      	movs	r1, r3
   28172:	bc1c      	pop	{r2, r3, r4}
   28174:	4690      	mov	r8, r2
   28176:	4699      	mov	r9, r3
   28178:	46a2      	mov	sl, r4
   2817a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2817c:	2501      	movs	r5, #1
   2817e:	4643      	mov	r3, r8
   28180:	0762      	lsls	r2, r4, #29
   28182:	08ff      	lsrs	r7, r7, #3
   28184:	4317      	orrs	r7, r2
   28186:	08e4      	lsrs	r4, r4, #3
   28188:	401d      	ands	r5, r3
   2818a:	4b70      	ldr	r3, [pc, #448]	; (2834c <__aeabi_dsub+0x344>)
   2818c:	429e      	cmp	r6, r3
   2818e:	d036      	beq.n	281fe <__aeabi_dsub+0x1f6>
   28190:	0324      	lsls	r4, r4, #12
   28192:	0576      	lsls	r6, r6, #21
   28194:	0b24      	lsrs	r4, r4, #12
   28196:	0d76      	lsrs	r6, r6, #21
   28198:	e7db      	b.n	28152 <__aeabi_dsub+0x14a>
   2819a:	4663      	mov	r3, ip
   2819c:	1af3      	subs	r3, r6, r3
   2819e:	2b00      	cmp	r3, #0
   281a0:	dc00      	bgt.n	281a4 <__aeabi_dsub+0x19c>
   281a2:	e094      	b.n	282ce <__aeabi_dsub+0x2c6>
   281a4:	4660      	mov	r0, ip
   281a6:	2800      	cmp	r0, #0
   281a8:	d035      	beq.n	28216 <__aeabi_dsub+0x20e>
   281aa:	4868      	ldr	r0, [pc, #416]	; (2834c <__aeabi_dsub+0x344>)
   281ac:	4286      	cmp	r6, r0
   281ae:	d0b1      	beq.n	28114 <__aeabi_dsub+0x10c>
   281b0:	2780      	movs	r7, #128	; 0x80
   281b2:	043f      	lsls	r7, r7, #16
   281b4:	4339      	orrs	r1, r7
   281b6:	2b38      	cmp	r3, #56	; 0x38
   281b8:	dc00      	bgt.n	281bc <__aeabi_dsub+0x1b4>
   281ba:	e0fd      	b.n	283b8 <__aeabi_dsub+0x3b0>
   281bc:	430a      	orrs	r2, r1
   281be:	0017      	movs	r7, r2
   281c0:	2100      	movs	r1, #0
   281c2:	1e7a      	subs	r2, r7, #1
   281c4:	4197      	sbcs	r7, r2
   281c6:	4457      	add	r7, sl
   281c8:	4557      	cmp	r7, sl
   281ca:	4180      	sbcs	r0, r0
   281cc:	1909      	adds	r1, r1, r4
   281ce:	4244      	negs	r4, r0
   281d0:	190c      	adds	r4, r1, r4
   281d2:	0223      	lsls	r3, r4, #8
   281d4:	d53a      	bpl.n	2824c <__aeabi_dsub+0x244>
   281d6:	4b5d      	ldr	r3, [pc, #372]	; (2834c <__aeabi_dsub+0x344>)
   281d8:	3601      	adds	r6, #1
   281da:	429e      	cmp	r6, r3
   281dc:	d100      	bne.n	281e0 <__aeabi_dsub+0x1d8>
   281de:	e14b      	b.n	28478 <__aeabi_dsub+0x470>
   281e0:	2201      	movs	r2, #1
   281e2:	4b5b      	ldr	r3, [pc, #364]	; (28350 <__aeabi_dsub+0x348>)
   281e4:	401c      	ands	r4, r3
   281e6:	087b      	lsrs	r3, r7, #1
   281e8:	4017      	ands	r7, r2
   281ea:	431f      	orrs	r7, r3
   281ec:	07e2      	lsls	r2, r4, #31
   281ee:	4317      	orrs	r7, r2
   281f0:	0864      	lsrs	r4, r4, #1
   281f2:	e78f      	b.n	28114 <__aeabi_dsub+0x10c>
   281f4:	0008      	movs	r0, r1
   281f6:	4310      	orrs	r0, r2
   281f8:	d000      	beq.n	281fc <__aeabi_dsub+0x1f4>
   281fa:	e724      	b.n	28046 <__aeabi_dsub+0x3e>
   281fc:	e721      	b.n	28042 <__aeabi_dsub+0x3a>
   281fe:	0023      	movs	r3, r4
   28200:	433b      	orrs	r3, r7
   28202:	d100      	bne.n	28206 <__aeabi_dsub+0x1fe>
   28204:	e1b9      	b.n	2857a <__aeabi_dsub+0x572>
   28206:	2280      	movs	r2, #128	; 0x80
   28208:	0312      	lsls	r2, r2, #12
   2820a:	4314      	orrs	r4, r2
   2820c:	0324      	lsls	r4, r4, #12
   2820e:	0b24      	lsrs	r4, r4, #12
   28210:	e79f      	b.n	28152 <__aeabi_dsub+0x14a>
   28212:	002e      	movs	r6, r5
   28214:	e77e      	b.n	28114 <__aeabi_dsub+0x10c>
   28216:	0008      	movs	r0, r1
   28218:	4310      	orrs	r0, r2
   2821a:	d100      	bne.n	2821e <__aeabi_dsub+0x216>
   2821c:	e0ca      	b.n	283b4 <__aeabi_dsub+0x3ac>
   2821e:	1e58      	subs	r0, r3, #1
   28220:	4684      	mov	ip, r0
   28222:	2800      	cmp	r0, #0
   28224:	d000      	beq.n	28228 <__aeabi_dsub+0x220>
   28226:	e0e7      	b.n	283f8 <__aeabi_dsub+0x3f0>
   28228:	4452      	add	r2, sl
   2822a:	4552      	cmp	r2, sl
   2822c:	4180      	sbcs	r0, r0
   2822e:	1864      	adds	r4, r4, r1
   28230:	4240      	negs	r0, r0
   28232:	1824      	adds	r4, r4, r0
   28234:	0017      	movs	r7, r2
   28236:	2601      	movs	r6, #1
   28238:	0223      	lsls	r3, r4, #8
   2823a:	d507      	bpl.n	2824c <__aeabi_dsub+0x244>
   2823c:	2602      	movs	r6, #2
   2823e:	e7cf      	b.n	281e0 <__aeabi_dsub+0x1d8>
   28240:	4664      	mov	r4, ip
   28242:	432c      	orrs	r4, r5
   28244:	d100      	bne.n	28248 <__aeabi_dsub+0x240>
   28246:	e1b3      	b.n	285b0 <__aeabi_dsub+0x5a8>
   28248:	002c      	movs	r4, r5
   2824a:	4667      	mov	r7, ip
   2824c:	077b      	lsls	r3, r7, #29
   2824e:	d000      	beq.n	28252 <__aeabi_dsub+0x24a>
   28250:	e762      	b.n	28118 <__aeabi_dsub+0x110>
   28252:	0763      	lsls	r3, r4, #29
   28254:	08ff      	lsrs	r7, r7, #3
   28256:	431f      	orrs	r7, r3
   28258:	2501      	movs	r5, #1
   2825a:	4643      	mov	r3, r8
   2825c:	08e4      	lsrs	r4, r4, #3
   2825e:	401d      	ands	r5, r3
   28260:	e793      	b.n	2818a <__aeabi_dsub+0x182>
   28262:	2d00      	cmp	r5, #0
   28264:	d178      	bne.n	28358 <__aeabi_dsub+0x350>
   28266:	1c75      	adds	r5, r6, #1
   28268:	056d      	lsls	r5, r5, #21
   2826a:	0d6d      	lsrs	r5, r5, #21
   2826c:	2d01      	cmp	r5, #1
   2826e:	dc00      	bgt.n	28272 <__aeabi_dsub+0x26a>
   28270:	e0f2      	b.n	28458 <__aeabi_dsub+0x450>
   28272:	4650      	mov	r0, sl
   28274:	1a80      	subs	r0, r0, r2
   28276:	4582      	cmp	sl, r0
   28278:	41bf      	sbcs	r7, r7
   2827a:	1a65      	subs	r5, r4, r1
   2827c:	427f      	negs	r7, r7
   2827e:	1bed      	subs	r5, r5, r7
   28280:	4684      	mov	ip, r0
   28282:	0228      	lsls	r0, r5, #8
   28284:	d400      	bmi.n	28288 <__aeabi_dsub+0x280>
   28286:	e08c      	b.n	283a2 <__aeabi_dsub+0x39a>
   28288:	4650      	mov	r0, sl
   2828a:	1a17      	subs	r7, r2, r0
   2828c:	42ba      	cmp	r2, r7
   2828e:	4192      	sbcs	r2, r2
   28290:	1b0c      	subs	r4, r1, r4
   28292:	4255      	negs	r5, r2
   28294:	1b65      	subs	r5, r4, r5
   28296:	4698      	mov	r8, r3
   28298:	e714      	b.n	280c4 <__aeabi_dsub+0xbc>
   2829a:	2501      	movs	r5, #1
   2829c:	4643      	mov	r3, r8
   2829e:	2400      	movs	r4, #0
   282a0:	401d      	ands	r5, r3
   282a2:	2700      	movs	r7, #0
   282a4:	e755      	b.n	28152 <__aeabi_dsub+0x14a>
   282a6:	4c2a      	ldr	r4, [pc, #168]	; (28350 <__aeabi_dsub+0x348>)
   282a8:	1af6      	subs	r6, r6, r3
   282aa:	402c      	ands	r4, r5
   282ac:	e732      	b.n	28114 <__aeabi_dsub+0x10c>
   282ae:	003d      	movs	r5, r7
   282b0:	3828      	subs	r0, #40	; 0x28
   282b2:	4085      	lsls	r5, r0
   282b4:	2700      	movs	r7, #0
   282b6:	e717      	b.n	280e8 <__aeabi_dsub+0xe0>
   282b8:	0038      	movs	r0, r7
   282ba:	f000 fadb 	bl	28874 <__clzsi2>
   282be:	3020      	adds	r0, #32
   282c0:	e706      	b.n	280d0 <__aeabi_dsub+0xc8>
   282c2:	430a      	orrs	r2, r1
   282c4:	0017      	movs	r7, r2
   282c6:	2100      	movs	r1, #0
   282c8:	1e7a      	subs	r2, r7, #1
   282ca:	4197      	sbcs	r7, r2
   282cc:	e6ee      	b.n	280ac <__aeabi_dsub+0xa4>
   282ce:	2b00      	cmp	r3, #0
   282d0:	d000      	beq.n	282d4 <__aeabi_dsub+0x2cc>
   282d2:	e0e5      	b.n	284a0 <__aeabi_dsub+0x498>
   282d4:	1c73      	adds	r3, r6, #1
   282d6:	469c      	mov	ip, r3
   282d8:	055b      	lsls	r3, r3, #21
   282da:	0d5b      	lsrs	r3, r3, #21
   282dc:	2b01      	cmp	r3, #1
   282de:	dc00      	bgt.n	282e2 <__aeabi_dsub+0x2da>
   282e0:	e09f      	b.n	28422 <__aeabi_dsub+0x41a>
   282e2:	4b1a      	ldr	r3, [pc, #104]	; (2834c <__aeabi_dsub+0x344>)
   282e4:	459c      	cmp	ip, r3
   282e6:	d100      	bne.n	282ea <__aeabi_dsub+0x2e2>
   282e8:	e0c5      	b.n	28476 <__aeabi_dsub+0x46e>
   282ea:	4452      	add	r2, sl
   282ec:	4552      	cmp	r2, sl
   282ee:	4180      	sbcs	r0, r0
   282f0:	1864      	adds	r4, r4, r1
   282f2:	4240      	negs	r0, r0
   282f4:	1824      	adds	r4, r4, r0
   282f6:	07e7      	lsls	r7, r4, #31
   282f8:	0852      	lsrs	r2, r2, #1
   282fa:	4317      	orrs	r7, r2
   282fc:	0864      	lsrs	r4, r4, #1
   282fe:	4666      	mov	r6, ip
   28300:	e708      	b.n	28114 <__aeabi_dsub+0x10c>
   28302:	4812      	ldr	r0, [pc, #72]	; (2834c <__aeabi_dsub+0x344>)
   28304:	4285      	cmp	r5, r0
   28306:	d100      	bne.n	2830a <__aeabi_dsub+0x302>
   28308:	e085      	b.n	28416 <__aeabi_dsub+0x40e>
   2830a:	001d      	movs	r5, r3
   2830c:	e6bc      	b.n	28088 <__aeabi_dsub+0x80>
   2830e:	0029      	movs	r1, r5
   28310:	3e1f      	subs	r6, #31
   28312:	40f1      	lsrs	r1, r6
   28314:	2b20      	cmp	r3, #32
   28316:	d100      	bne.n	2831a <__aeabi_dsub+0x312>
   28318:	e07f      	b.n	2841a <__aeabi_dsub+0x412>
   2831a:	2240      	movs	r2, #64	; 0x40
   2831c:	1ad3      	subs	r3, r2, r3
   2831e:	409d      	lsls	r5, r3
   28320:	432f      	orrs	r7, r5
   28322:	1e7d      	subs	r5, r7, #1
   28324:	41af      	sbcs	r7, r5
   28326:	2400      	movs	r4, #0
   28328:	430f      	orrs	r7, r1
   2832a:	2600      	movs	r6, #0
   2832c:	e78e      	b.n	2824c <__aeabi_dsub+0x244>
   2832e:	002b      	movs	r3, r5
   28330:	000f      	movs	r7, r1
   28332:	3b20      	subs	r3, #32
   28334:	40df      	lsrs	r7, r3
   28336:	2d20      	cmp	r5, #32
   28338:	d071      	beq.n	2841e <__aeabi_dsub+0x416>
   2833a:	2340      	movs	r3, #64	; 0x40
   2833c:	1b5d      	subs	r5, r3, r5
   2833e:	40a9      	lsls	r1, r5
   28340:	430a      	orrs	r2, r1
   28342:	1e51      	subs	r1, r2, #1
   28344:	418a      	sbcs	r2, r1
   28346:	2100      	movs	r1, #0
   28348:	4317      	orrs	r7, r2
   2834a:	e6af      	b.n	280ac <__aeabi_dsub+0xa4>
   2834c:	000007ff 	.word	0x000007ff
   28350:	ff7fffff 	.word	0xff7fffff
   28354:	800fffff 	.word	0x800fffff
   28358:	2e00      	cmp	r6, #0
   2835a:	d03e      	beq.n	283da <__aeabi_dsub+0x3d2>
   2835c:	4eb3      	ldr	r6, [pc, #716]	; (2862c <__aeabi_dsub+0x624>)
   2835e:	45b4      	cmp	ip, r6
   28360:	d045      	beq.n	283ee <__aeabi_dsub+0x3e6>
   28362:	2680      	movs	r6, #128	; 0x80
   28364:	0436      	lsls	r6, r6, #16
   28366:	426d      	negs	r5, r5
   28368:	4334      	orrs	r4, r6
   2836a:	2d38      	cmp	r5, #56	; 0x38
   2836c:	dd00      	ble.n	28370 <__aeabi_dsub+0x368>
   2836e:	e0a8      	b.n	284c2 <__aeabi_dsub+0x4ba>
   28370:	2d1f      	cmp	r5, #31
   28372:	dd00      	ble.n	28376 <__aeabi_dsub+0x36e>
   28374:	e11f      	b.n	285b6 <__aeabi_dsub+0x5ae>
   28376:	2620      	movs	r6, #32
   28378:	0027      	movs	r7, r4
   2837a:	4650      	mov	r0, sl
   2837c:	1b76      	subs	r6, r6, r5
   2837e:	40b7      	lsls	r7, r6
   28380:	40e8      	lsrs	r0, r5
   28382:	4307      	orrs	r7, r0
   28384:	4650      	mov	r0, sl
   28386:	40b0      	lsls	r0, r6
   28388:	1e46      	subs	r6, r0, #1
   2838a:	41b0      	sbcs	r0, r6
   2838c:	40ec      	lsrs	r4, r5
   2838e:	4338      	orrs	r0, r7
   28390:	1a17      	subs	r7, r2, r0
   28392:	42ba      	cmp	r2, r7
   28394:	4192      	sbcs	r2, r2
   28396:	1b0c      	subs	r4, r1, r4
   28398:	4252      	negs	r2, r2
   2839a:	1aa4      	subs	r4, r4, r2
   2839c:	4666      	mov	r6, ip
   2839e:	4698      	mov	r8, r3
   283a0:	e68b      	b.n	280ba <__aeabi_dsub+0xb2>
   283a2:	4664      	mov	r4, ip
   283a4:	4667      	mov	r7, ip
   283a6:	432c      	orrs	r4, r5
   283a8:	d000      	beq.n	283ac <__aeabi_dsub+0x3a4>
   283aa:	e68b      	b.n	280c4 <__aeabi_dsub+0xbc>
   283ac:	2500      	movs	r5, #0
   283ae:	2600      	movs	r6, #0
   283b0:	2700      	movs	r7, #0
   283b2:	e6ea      	b.n	2818a <__aeabi_dsub+0x182>
   283b4:	001e      	movs	r6, r3
   283b6:	e6ad      	b.n	28114 <__aeabi_dsub+0x10c>
   283b8:	2b1f      	cmp	r3, #31
   283ba:	dc60      	bgt.n	2847e <__aeabi_dsub+0x476>
   283bc:	2720      	movs	r7, #32
   283be:	1af8      	subs	r0, r7, r3
   283c0:	000f      	movs	r7, r1
   283c2:	4684      	mov	ip, r0
   283c4:	4087      	lsls	r7, r0
   283c6:	0010      	movs	r0, r2
   283c8:	40d8      	lsrs	r0, r3
   283ca:	4307      	orrs	r7, r0
   283cc:	4660      	mov	r0, ip
   283ce:	4082      	lsls	r2, r0
   283d0:	1e50      	subs	r0, r2, #1
   283d2:	4182      	sbcs	r2, r0
   283d4:	40d9      	lsrs	r1, r3
   283d6:	4317      	orrs	r7, r2
   283d8:	e6f5      	b.n	281c6 <__aeabi_dsub+0x1be>
   283da:	0026      	movs	r6, r4
   283dc:	4650      	mov	r0, sl
   283de:	4306      	orrs	r6, r0
   283e0:	d005      	beq.n	283ee <__aeabi_dsub+0x3e6>
   283e2:	43ed      	mvns	r5, r5
   283e4:	2d00      	cmp	r5, #0
   283e6:	d0d3      	beq.n	28390 <__aeabi_dsub+0x388>
   283e8:	4e90      	ldr	r6, [pc, #576]	; (2862c <__aeabi_dsub+0x624>)
   283ea:	45b4      	cmp	ip, r6
   283ec:	d1bd      	bne.n	2836a <__aeabi_dsub+0x362>
   283ee:	000c      	movs	r4, r1
   283f0:	0017      	movs	r7, r2
   283f2:	4666      	mov	r6, ip
   283f4:	4698      	mov	r8, r3
   283f6:	e68d      	b.n	28114 <__aeabi_dsub+0x10c>
   283f8:	488c      	ldr	r0, [pc, #560]	; (2862c <__aeabi_dsub+0x624>)
   283fa:	4283      	cmp	r3, r0
   283fc:	d00b      	beq.n	28416 <__aeabi_dsub+0x40e>
   283fe:	4663      	mov	r3, ip
   28400:	e6d9      	b.n	281b6 <__aeabi_dsub+0x1ae>
   28402:	2d00      	cmp	r5, #0
   28404:	d000      	beq.n	28408 <__aeabi_dsub+0x400>
   28406:	e096      	b.n	28536 <__aeabi_dsub+0x52e>
   28408:	0008      	movs	r0, r1
   2840a:	4310      	orrs	r0, r2
   2840c:	d100      	bne.n	28410 <__aeabi_dsub+0x408>
   2840e:	e0e2      	b.n	285d6 <__aeabi_dsub+0x5ce>
   28410:	000c      	movs	r4, r1
   28412:	0017      	movs	r7, r2
   28414:	4698      	mov	r8, r3
   28416:	4e85      	ldr	r6, [pc, #532]	; (2862c <__aeabi_dsub+0x624>)
   28418:	e67c      	b.n	28114 <__aeabi_dsub+0x10c>
   2841a:	2500      	movs	r5, #0
   2841c:	e780      	b.n	28320 <__aeabi_dsub+0x318>
   2841e:	2100      	movs	r1, #0
   28420:	e78e      	b.n	28340 <__aeabi_dsub+0x338>
   28422:	0023      	movs	r3, r4
   28424:	4650      	mov	r0, sl
   28426:	4303      	orrs	r3, r0
   28428:	2e00      	cmp	r6, #0
   2842a:	d000      	beq.n	2842e <__aeabi_dsub+0x426>
   2842c:	e0a8      	b.n	28580 <__aeabi_dsub+0x578>
   2842e:	2b00      	cmp	r3, #0
   28430:	d100      	bne.n	28434 <__aeabi_dsub+0x42c>
   28432:	e0de      	b.n	285f2 <__aeabi_dsub+0x5ea>
   28434:	000b      	movs	r3, r1
   28436:	4313      	orrs	r3, r2
   28438:	d100      	bne.n	2843c <__aeabi_dsub+0x434>
   2843a:	e66b      	b.n	28114 <__aeabi_dsub+0x10c>
   2843c:	4452      	add	r2, sl
   2843e:	4552      	cmp	r2, sl
   28440:	4180      	sbcs	r0, r0
   28442:	1864      	adds	r4, r4, r1
   28444:	4240      	negs	r0, r0
   28446:	1824      	adds	r4, r4, r0
   28448:	0017      	movs	r7, r2
   2844a:	0223      	lsls	r3, r4, #8
   2844c:	d400      	bmi.n	28450 <__aeabi_dsub+0x448>
   2844e:	e6fd      	b.n	2824c <__aeabi_dsub+0x244>
   28450:	4b77      	ldr	r3, [pc, #476]	; (28630 <__aeabi_dsub+0x628>)
   28452:	4666      	mov	r6, ip
   28454:	401c      	ands	r4, r3
   28456:	e65d      	b.n	28114 <__aeabi_dsub+0x10c>
   28458:	0025      	movs	r5, r4
   2845a:	4650      	mov	r0, sl
   2845c:	4305      	orrs	r5, r0
   2845e:	2e00      	cmp	r6, #0
   28460:	d1cf      	bne.n	28402 <__aeabi_dsub+0x3fa>
   28462:	2d00      	cmp	r5, #0
   28464:	d14f      	bne.n	28506 <__aeabi_dsub+0x4fe>
   28466:	000c      	movs	r4, r1
   28468:	4314      	orrs	r4, r2
   2846a:	d100      	bne.n	2846e <__aeabi_dsub+0x466>
   2846c:	e0a0      	b.n	285b0 <__aeabi_dsub+0x5a8>
   2846e:	000c      	movs	r4, r1
   28470:	0017      	movs	r7, r2
   28472:	4698      	mov	r8, r3
   28474:	e64e      	b.n	28114 <__aeabi_dsub+0x10c>
   28476:	4666      	mov	r6, ip
   28478:	2400      	movs	r4, #0
   2847a:	2700      	movs	r7, #0
   2847c:	e685      	b.n	2818a <__aeabi_dsub+0x182>
   2847e:	001f      	movs	r7, r3
   28480:	0008      	movs	r0, r1
   28482:	3f20      	subs	r7, #32
   28484:	40f8      	lsrs	r0, r7
   28486:	0007      	movs	r7, r0
   28488:	2b20      	cmp	r3, #32
   2848a:	d100      	bne.n	2848e <__aeabi_dsub+0x486>
   2848c:	e08e      	b.n	285ac <__aeabi_dsub+0x5a4>
   2848e:	2040      	movs	r0, #64	; 0x40
   28490:	1ac3      	subs	r3, r0, r3
   28492:	4099      	lsls	r1, r3
   28494:	430a      	orrs	r2, r1
   28496:	1e51      	subs	r1, r2, #1
   28498:	418a      	sbcs	r2, r1
   2849a:	2100      	movs	r1, #0
   2849c:	4317      	orrs	r7, r2
   2849e:	e692      	b.n	281c6 <__aeabi_dsub+0x1be>
   284a0:	2e00      	cmp	r6, #0
   284a2:	d114      	bne.n	284ce <__aeabi_dsub+0x4c6>
   284a4:	0026      	movs	r6, r4
   284a6:	4650      	mov	r0, sl
   284a8:	4306      	orrs	r6, r0
   284aa:	d062      	beq.n	28572 <__aeabi_dsub+0x56a>
   284ac:	43db      	mvns	r3, r3
   284ae:	2b00      	cmp	r3, #0
   284b0:	d15c      	bne.n	2856c <__aeabi_dsub+0x564>
   284b2:	1887      	adds	r7, r0, r2
   284b4:	4297      	cmp	r7, r2
   284b6:	4192      	sbcs	r2, r2
   284b8:	1864      	adds	r4, r4, r1
   284ba:	4252      	negs	r2, r2
   284bc:	18a4      	adds	r4, r4, r2
   284be:	4666      	mov	r6, ip
   284c0:	e687      	b.n	281d2 <__aeabi_dsub+0x1ca>
   284c2:	4650      	mov	r0, sl
   284c4:	4320      	orrs	r0, r4
   284c6:	1e44      	subs	r4, r0, #1
   284c8:	41a0      	sbcs	r0, r4
   284ca:	2400      	movs	r4, #0
   284cc:	e760      	b.n	28390 <__aeabi_dsub+0x388>
   284ce:	4e57      	ldr	r6, [pc, #348]	; (2862c <__aeabi_dsub+0x624>)
   284d0:	45b4      	cmp	ip, r6
   284d2:	d04e      	beq.n	28572 <__aeabi_dsub+0x56a>
   284d4:	2680      	movs	r6, #128	; 0x80
   284d6:	0436      	lsls	r6, r6, #16
   284d8:	425b      	negs	r3, r3
   284da:	4334      	orrs	r4, r6
   284dc:	2b38      	cmp	r3, #56	; 0x38
   284de:	dd00      	ble.n	284e2 <__aeabi_dsub+0x4da>
   284e0:	e07f      	b.n	285e2 <__aeabi_dsub+0x5da>
   284e2:	2b1f      	cmp	r3, #31
   284e4:	dd00      	ble.n	284e8 <__aeabi_dsub+0x4e0>
   284e6:	e08b      	b.n	28600 <__aeabi_dsub+0x5f8>
   284e8:	2620      	movs	r6, #32
   284ea:	0027      	movs	r7, r4
   284ec:	4650      	mov	r0, sl
   284ee:	1af6      	subs	r6, r6, r3
   284f0:	40b7      	lsls	r7, r6
   284f2:	40d8      	lsrs	r0, r3
   284f4:	4307      	orrs	r7, r0
   284f6:	4650      	mov	r0, sl
   284f8:	40b0      	lsls	r0, r6
   284fa:	1e46      	subs	r6, r0, #1
   284fc:	41b0      	sbcs	r0, r6
   284fe:	4307      	orrs	r7, r0
   28500:	40dc      	lsrs	r4, r3
   28502:	18bf      	adds	r7, r7, r2
   28504:	e7d6      	b.n	284b4 <__aeabi_dsub+0x4ac>
   28506:	000d      	movs	r5, r1
   28508:	4315      	orrs	r5, r2
   2850a:	d100      	bne.n	2850e <__aeabi_dsub+0x506>
   2850c:	e602      	b.n	28114 <__aeabi_dsub+0x10c>
   2850e:	4650      	mov	r0, sl
   28510:	1a80      	subs	r0, r0, r2
   28512:	4582      	cmp	sl, r0
   28514:	41bf      	sbcs	r7, r7
   28516:	1a65      	subs	r5, r4, r1
   28518:	427f      	negs	r7, r7
   2851a:	1bed      	subs	r5, r5, r7
   2851c:	4684      	mov	ip, r0
   2851e:	0228      	lsls	r0, r5, #8
   28520:	d400      	bmi.n	28524 <__aeabi_dsub+0x51c>
   28522:	e68d      	b.n	28240 <__aeabi_dsub+0x238>
   28524:	4650      	mov	r0, sl
   28526:	1a17      	subs	r7, r2, r0
   28528:	42ba      	cmp	r2, r7
   2852a:	4192      	sbcs	r2, r2
   2852c:	1b0c      	subs	r4, r1, r4
   2852e:	4252      	negs	r2, r2
   28530:	1aa4      	subs	r4, r4, r2
   28532:	4698      	mov	r8, r3
   28534:	e5ee      	b.n	28114 <__aeabi_dsub+0x10c>
   28536:	000d      	movs	r5, r1
   28538:	4315      	orrs	r5, r2
   2853a:	d100      	bne.n	2853e <__aeabi_dsub+0x536>
   2853c:	e76b      	b.n	28416 <__aeabi_dsub+0x40e>
   2853e:	4650      	mov	r0, sl
   28540:	0767      	lsls	r7, r4, #29
   28542:	08c0      	lsrs	r0, r0, #3
   28544:	4307      	orrs	r7, r0
   28546:	2080      	movs	r0, #128	; 0x80
   28548:	08e4      	lsrs	r4, r4, #3
   2854a:	0300      	lsls	r0, r0, #12
   2854c:	4204      	tst	r4, r0
   2854e:	d007      	beq.n	28560 <__aeabi_dsub+0x558>
   28550:	08cd      	lsrs	r5, r1, #3
   28552:	4205      	tst	r5, r0
   28554:	d104      	bne.n	28560 <__aeabi_dsub+0x558>
   28556:	002c      	movs	r4, r5
   28558:	4698      	mov	r8, r3
   2855a:	08d7      	lsrs	r7, r2, #3
   2855c:	0749      	lsls	r1, r1, #29
   2855e:	430f      	orrs	r7, r1
   28560:	0f7b      	lsrs	r3, r7, #29
   28562:	00e4      	lsls	r4, r4, #3
   28564:	431c      	orrs	r4, r3
   28566:	00ff      	lsls	r7, r7, #3
   28568:	4e30      	ldr	r6, [pc, #192]	; (2862c <__aeabi_dsub+0x624>)
   2856a:	e5d3      	b.n	28114 <__aeabi_dsub+0x10c>
   2856c:	4e2f      	ldr	r6, [pc, #188]	; (2862c <__aeabi_dsub+0x624>)
   2856e:	45b4      	cmp	ip, r6
   28570:	d1b4      	bne.n	284dc <__aeabi_dsub+0x4d4>
   28572:	000c      	movs	r4, r1
   28574:	0017      	movs	r7, r2
   28576:	4666      	mov	r6, ip
   28578:	e5cc      	b.n	28114 <__aeabi_dsub+0x10c>
   2857a:	2700      	movs	r7, #0
   2857c:	2400      	movs	r4, #0
   2857e:	e5e8      	b.n	28152 <__aeabi_dsub+0x14a>
   28580:	2b00      	cmp	r3, #0
   28582:	d039      	beq.n	285f8 <__aeabi_dsub+0x5f0>
   28584:	000b      	movs	r3, r1
   28586:	4313      	orrs	r3, r2
   28588:	d100      	bne.n	2858c <__aeabi_dsub+0x584>
   2858a:	e744      	b.n	28416 <__aeabi_dsub+0x40e>
   2858c:	08c0      	lsrs	r0, r0, #3
   2858e:	0767      	lsls	r7, r4, #29
   28590:	4307      	orrs	r7, r0
   28592:	2080      	movs	r0, #128	; 0x80
   28594:	08e4      	lsrs	r4, r4, #3
   28596:	0300      	lsls	r0, r0, #12
   28598:	4204      	tst	r4, r0
   2859a:	d0e1      	beq.n	28560 <__aeabi_dsub+0x558>
   2859c:	08cb      	lsrs	r3, r1, #3
   2859e:	4203      	tst	r3, r0
   285a0:	d1de      	bne.n	28560 <__aeabi_dsub+0x558>
   285a2:	08d7      	lsrs	r7, r2, #3
   285a4:	0749      	lsls	r1, r1, #29
   285a6:	430f      	orrs	r7, r1
   285a8:	001c      	movs	r4, r3
   285aa:	e7d9      	b.n	28560 <__aeabi_dsub+0x558>
   285ac:	2100      	movs	r1, #0
   285ae:	e771      	b.n	28494 <__aeabi_dsub+0x48c>
   285b0:	2500      	movs	r5, #0
   285b2:	2700      	movs	r7, #0
   285b4:	e5e9      	b.n	2818a <__aeabi_dsub+0x182>
   285b6:	002e      	movs	r6, r5
   285b8:	0027      	movs	r7, r4
   285ba:	3e20      	subs	r6, #32
   285bc:	40f7      	lsrs	r7, r6
   285be:	2d20      	cmp	r5, #32
   285c0:	d02f      	beq.n	28622 <__aeabi_dsub+0x61a>
   285c2:	2640      	movs	r6, #64	; 0x40
   285c4:	1b75      	subs	r5, r6, r5
   285c6:	40ac      	lsls	r4, r5
   285c8:	4650      	mov	r0, sl
   285ca:	4320      	orrs	r0, r4
   285cc:	1e44      	subs	r4, r0, #1
   285ce:	41a0      	sbcs	r0, r4
   285d0:	2400      	movs	r4, #0
   285d2:	4338      	orrs	r0, r7
   285d4:	e6dc      	b.n	28390 <__aeabi_dsub+0x388>
   285d6:	2480      	movs	r4, #128	; 0x80
   285d8:	2500      	movs	r5, #0
   285da:	0324      	lsls	r4, r4, #12
   285dc:	4e13      	ldr	r6, [pc, #76]	; (2862c <__aeabi_dsub+0x624>)
   285de:	2700      	movs	r7, #0
   285e0:	e5d3      	b.n	2818a <__aeabi_dsub+0x182>
   285e2:	4650      	mov	r0, sl
   285e4:	4320      	orrs	r0, r4
   285e6:	0007      	movs	r7, r0
   285e8:	1e78      	subs	r0, r7, #1
   285ea:	4187      	sbcs	r7, r0
   285ec:	2400      	movs	r4, #0
   285ee:	18bf      	adds	r7, r7, r2
   285f0:	e760      	b.n	284b4 <__aeabi_dsub+0x4ac>
   285f2:	000c      	movs	r4, r1
   285f4:	0017      	movs	r7, r2
   285f6:	e58d      	b.n	28114 <__aeabi_dsub+0x10c>
   285f8:	000c      	movs	r4, r1
   285fa:	0017      	movs	r7, r2
   285fc:	4e0b      	ldr	r6, [pc, #44]	; (2862c <__aeabi_dsub+0x624>)
   285fe:	e589      	b.n	28114 <__aeabi_dsub+0x10c>
   28600:	001e      	movs	r6, r3
   28602:	0027      	movs	r7, r4
   28604:	3e20      	subs	r6, #32
   28606:	40f7      	lsrs	r7, r6
   28608:	2b20      	cmp	r3, #32
   2860a:	d00c      	beq.n	28626 <__aeabi_dsub+0x61e>
   2860c:	2640      	movs	r6, #64	; 0x40
   2860e:	1af3      	subs	r3, r6, r3
   28610:	409c      	lsls	r4, r3
   28612:	4650      	mov	r0, sl
   28614:	4320      	orrs	r0, r4
   28616:	1e44      	subs	r4, r0, #1
   28618:	41a0      	sbcs	r0, r4
   2861a:	4307      	orrs	r7, r0
   2861c:	2400      	movs	r4, #0
   2861e:	18bf      	adds	r7, r7, r2
   28620:	e748      	b.n	284b4 <__aeabi_dsub+0x4ac>
   28622:	2400      	movs	r4, #0
   28624:	e7d0      	b.n	285c8 <__aeabi_dsub+0x5c0>
   28626:	2400      	movs	r4, #0
   28628:	e7f3      	b.n	28612 <__aeabi_dsub+0x60a>
   2862a:	46c0      	nop			; (mov r8, r8)
   2862c:	000007ff 	.word	0x000007ff
   28630:	ff7fffff 	.word	0xff7fffff

00028634 <__aeabi_dcmpun>:
   28634:	b570      	push	{r4, r5, r6, lr}
   28636:	4e0e      	ldr	r6, [pc, #56]	; (28670 <__aeabi_dcmpun+0x3c>)
   28638:	030d      	lsls	r5, r1, #12
   2863a:	031c      	lsls	r4, r3, #12
   2863c:	0049      	lsls	r1, r1, #1
   2863e:	005b      	lsls	r3, r3, #1
   28640:	0b2d      	lsrs	r5, r5, #12
   28642:	0d49      	lsrs	r1, r1, #21
   28644:	0b24      	lsrs	r4, r4, #12
   28646:	0d5b      	lsrs	r3, r3, #21
   28648:	42b1      	cmp	r1, r6
   2864a:	d004      	beq.n	28656 <__aeabi_dcmpun+0x22>
   2864c:	4908      	ldr	r1, [pc, #32]	; (28670 <__aeabi_dcmpun+0x3c>)
   2864e:	2000      	movs	r0, #0
   28650:	428b      	cmp	r3, r1
   28652:	d008      	beq.n	28666 <__aeabi_dcmpun+0x32>
   28654:	bd70      	pop	{r4, r5, r6, pc}
   28656:	4305      	orrs	r5, r0
   28658:	2001      	movs	r0, #1
   2865a:	2d00      	cmp	r5, #0
   2865c:	d1fa      	bne.n	28654 <__aeabi_dcmpun+0x20>
   2865e:	4904      	ldr	r1, [pc, #16]	; (28670 <__aeabi_dcmpun+0x3c>)
   28660:	2000      	movs	r0, #0
   28662:	428b      	cmp	r3, r1
   28664:	d1f6      	bne.n	28654 <__aeabi_dcmpun+0x20>
   28666:	4314      	orrs	r4, r2
   28668:	0020      	movs	r0, r4
   2866a:	1e44      	subs	r4, r0, #1
   2866c:	41a0      	sbcs	r0, r4
   2866e:	e7f1      	b.n	28654 <__aeabi_dcmpun+0x20>
   28670:	000007ff 	.word	0x000007ff

00028674 <__aeabi_d2iz>:
   28674:	b530      	push	{r4, r5, lr}
   28676:	4d13      	ldr	r5, [pc, #76]	; (286c4 <__aeabi_d2iz+0x50>)
   28678:	030a      	lsls	r2, r1, #12
   2867a:	004b      	lsls	r3, r1, #1
   2867c:	0b12      	lsrs	r2, r2, #12
   2867e:	0d5b      	lsrs	r3, r3, #21
   28680:	0fc9      	lsrs	r1, r1, #31
   28682:	2400      	movs	r4, #0
   28684:	42ab      	cmp	r3, r5
   28686:	dd10      	ble.n	286aa <__aeabi_d2iz+0x36>
   28688:	4c0f      	ldr	r4, [pc, #60]	; (286c8 <__aeabi_d2iz+0x54>)
   2868a:	42a3      	cmp	r3, r4
   2868c:	dc0f      	bgt.n	286ae <__aeabi_d2iz+0x3a>
   2868e:	2480      	movs	r4, #128	; 0x80
   28690:	4d0e      	ldr	r5, [pc, #56]	; (286cc <__aeabi_d2iz+0x58>)
   28692:	0364      	lsls	r4, r4, #13
   28694:	4322      	orrs	r2, r4
   28696:	1aed      	subs	r5, r5, r3
   28698:	2d1f      	cmp	r5, #31
   2869a:	dd0b      	ble.n	286b4 <__aeabi_d2iz+0x40>
   2869c:	480c      	ldr	r0, [pc, #48]	; (286d0 <__aeabi_d2iz+0x5c>)
   2869e:	1ac3      	subs	r3, r0, r3
   286a0:	40da      	lsrs	r2, r3
   286a2:	4254      	negs	r4, r2
   286a4:	2900      	cmp	r1, #0
   286a6:	d100      	bne.n	286aa <__aeabi_d2iz+0x36>
   286a8:	0014      	movs	r4, r2
   286aa:	0020      	movs	r0, r4
   286ac:	bd30      	pop	{r4, r5, pc}
   286ae:	4b09      	ldr	r3, [pc, #36]	; (286d4 <__aeabi_d2iz+0x60>)
   286b0:	18cc      	adds	r4, r1, r3
   286b2:	e7fa      	b.n	286aa <__aeabi_d2iz+0x36>
   286b4:	4c08      	ldr	r4, [pc, #32]	; (286d8 <__aeabi_d2iz+0x64>)
   286b6:	40e8      	lsrs	r0, r5
   286b8:	46a4      	mov	ip, r4
   286ba:	4463      	add	r3, ip
   286bc:	409a      	lsls	r2, r3
   286be:	4302      	orrs	r2, r0
   286c0:	e7ef      	b.n	286a2 <__aeabi_d2iz+0x2e>
   286c2:	46c0      	nop			; (mov r8, r8)
   286c4:	000003fe 	.word	0x000003fe
   286c8:	0000041d 	.word	0x0000041d
   286cc:	00000433 	.word	0x00000433
   286d0:	00000413 	.word	0x00000413
   286d4:	7fffffff 	.word	0x7fffffff
   286d8:	fffffbed 	.word	0xfffffbed

000286dc <__aeabi_i2d>:
   286dc:	b570      	push	{r4, r5, r6, lr}
   286de:	2800      	cmp	r0, #0
   286e0:	d030      	beq.n	28744 <__aeabi_i2d+0x68>
   286e2:	17c3      	asrs	r3, r0, #31
   286e4:	18c4      	adds	r4, r0, r3
   286e6:	405c      	eors	r4, r3
   286e8:	0fc5      	lsrs	r5, r0, #31
   286ea:	0020      	movs	r0, r4
   286ec:	f000 f8c2 	bl	28874 <__clzsi2>
   286f0:	4b17      	ldr	r3, [pc, #92]	; (28750 <__aeabi_i2d+0x74>)
   286f2:	4a18      	ldr	r2, [pc, #96]	; (28754 <__aeabi_i2d+0x78>)
   286f4:	1a1b      	subs	r3, r3, r0
   286f6:	1ad2      	subs	r2, r2, r3
   286f8:	2a1f      	cmp	r2, #31
   286fa:	dd18      	ble.n	2872e <__aeabi_i2d+0x52>
   286fc:	4a16      	ldr	r2, [pc, #88]	; (28758 <__aeabi_i2d+0x7c>)
   286fe:	1ad2      	subs	r2, r2, r3
   28700:	4094      	lsls	r4, r2
   28702:	2200      	movs	r2, #0
   28704:	0324      	lsls	r4, r4, #12
   28706:	055b      	lsls	r3, r3, #21
   28708:	0b24      	lsrs	r4, r4, #12
   2870a:	0d5b      	lsrs	r3, r3, #21
   2870c:	2100      	movs	r1, #0
   2870e:	0010      	movs	r0, r2
   28710:	0324      	lsls	r4, r4, #12
   28712:	0d0a      	lsrs	r2, r1, #20
   28714:	0b24      	lsrs	r4, r4, #12
   28716:	0512      	lsls	r2, r2, #20
   28718:	4322      	orrs	r2, r4
   2871a:	4c10      	ldr	r4, [pc, #64]	; (2875c <__aeabi_i2d+0x80>)
   2871c:	051b      	lsls	r3, r3, #20
   2871e:	4022      	ands	r2, r4
   28720:	4313      	orrs	r3, r2
   28722:	005b      	lsls	r3, r3, #1
   28724:	07ed      	lsls	r5, r5, #31
   28726:	085b      	lsrs	r3, r3, #1
   28728:	432b      	orrs	r3, r5
   2872a:	0019      	movs	r1, r3
   2872c:	bd70      	pop	{r4, r5, r6, pc}
   2872e:	0021      	movs	r1, r4
   28730:	4091      	lsls	r1, r2
   28732:	000a      	movs	r2, r1
   28734:	210b      	movs	r1, #11
   28736:	1a08      	subs	r0, r1, r0
   28738:	40c4      	lsrs	r4, r0
   2873a:	055b      	lsls	r3, r3, #21
   2873c:	0324      	lsls	r4, r4, #12
   2873e:	0b24      	lsrs	r4, r4, #12
   28740:	0d5b      	lsrs	r3, r3, #21
   28742:	e7e3      	b.n	2870c <__aeabi_i2d+0x30>
   28744:	2500      	movs	r5, #0
   28746:	2300      	movs	r3, #0
   28748:	2400      	movs	r4, #0
   2874a:	2200      	movs	r2, #0
   2874c:	e7de      	b.n	2870c <__aeabi_i2d+0x30>
   2874e:	46c0      	nop			; (mov r8, r8)
   28750:	0000041e 	.word	0x0000041e
   28754:	00000433 	.word	0x00000433
   28758:	00000413 	.word	0x00000413
   2875c:	800fffff 	.word	0x800fffff

00028760 <__aeabi_ui2d>:
   28760:	b510      	push	{r4, lr}
   28762:	1e04      	subs	r4, r0, #0
   28764:	d028      	beq.n	287b8 <__aeabi_ui2d+0x58>
   28766:	f000 f885 	bl	28874 <__clzsi2>
   2876a:	4b15      	ldr	r3, [pc, #84]	; (287c0 <__aeabi_ui2d+0x60>)
   2876c:	4a15      	ldr	r2, [pc, #84]	; (287c4 <__aeabi_ui2d+0x64>)
   2876e:	1a1b      	subs	r3, r3, r0
   28770:	1ad2      	subs	r2, r2, r3
   28772:	2a1f      	cmp	r2, #31
   28774:	dd15      	ble.n	287a2 <__aeabi_ui2d+0x42>
   28776:	4a14      	ldr	r2, [pc, #80]	; (287c8 <__aeabi_ui2d+0x68>)
   28778:	1ad2      	subs	r2, r2, r3
   2877a:	4094      	lsls	r4, r2
   2877c:	2200      	movs	r2, #0
   2877e:	0324      	lsls	r4, r4, #12
   28780:	055b      	lsls	r3, r3, #21
   28782:	0b24      	lsrs	r4, r4, #12
   28784:	0d5b      	lsrs	r3, r3, #21
   28786:	2100      	movs	r1, #0
   28788:	0010      	movs	r0, r2
   2878a:	0324      	lsls	r4, r4, #12
   2878c:	0d0a      	lsrs	r2, r1, #20
   2878e:	0b24      	lsrs	r4, r4, #12
   28790:	0512      	lsls	r2, r2, #20
   28792:	4322      	orrs	r2, r4
   28794:	4c0d      	ldr	r4, [pc, #52]	; (287cc <__aeabi_ui2d+0x6c>)
   28796:	051b      	lsls	r3, r3, #20
   28798:	4022      	ands	r2, r4
   2879a:	4313      	orrs	r3, r2
   2879c:	005b      	lsls	r3, r3, #1
   2879e:	0859      	lsrs	r1, r3, #1
   287a0:	bd10      	pop	{r4, pc}
   287a2:	0021      	movs	r1, r4
   287a4:	4091      	lsls	r1, r2
   287a6:	000a      	movs	r2, r1
   287a8:	210b      	movs	r1, #11
   287aa:	1a08      	subs	r0, r1, r0
   287ac:	40c4      	lsrs	r4, r0
   287ae:	055b      	lsls	r3, r3, #21
   287b0:	0324      	lsls	r4, r4, #12
   287b2:	0b24      	lsrs	r4, r4, #12
   287b4:	0d5b      	lsrs	r3, r3, #21
   287b6:	e7e6      	b.n	28786 <__aeabi_ui2d+0x26>
   287b8:	2300      	movs	r3, #0
   287ba:	2400      	movs	r4, #0
   287bc:	2200      	movs	r2, #0
   287be:	e7e2      	b.n	28786 <__aeabi_ui2d+0x26>
   287c0:	0000041e 	.word	0x0000041e
   287c4:	00000433 	.word	0x00000433
   287c8:	00000413 	.word	0x00000413
   287cc:	800fffff 	.word	0x800fffff

000287d0 <__aeabi_f2d>:
   287d0:	0041      	lsls	r1, r0, #1
   287d2:	0e09      	lsrs	r1, r1, #24
   287d4:	1c4b      	adds	r3, r1, #1
   287d6:	b570      	push	{r4, r5, r6, lr}
   287d8:	b2db      	uxtb	r3, r3
   287da:	0246      	lsls	r6, r0, #9
   287dc:	0a75      	lsrs	r5, r6, #9
   287de:	0fc4      	lsrs	r4, r0, #31
   287e0:	2b01      	cmp	r3, #1
   287e2:	dd14      	ble.n	2880e <__aeabi_f2d+0x3e>
   287e4:	23e0      	movs	r3, #224	; 0xe0
   287e6:	009b      	lsls	r3, r3, #2
   287e8:	076d      	lsls	r5, r5, #29
   287ea:	0b36      	lsrs	r6, r6, #12
   287ec:	18cb      	adds	r3, r1, r3
   287ee:	2100      	movs	r1, #0
   287f0:	0d0a      	lsrs	r2, r1, #20
   287f2:	0028      	movs	r0, r5
   287f4:	0512      	lsls	r2, r2, #20
   287f6:	4d1c      	ldr	r5, [pc, #112]	; (28868 <__aeabi_f2d+0x98>)
   287f8:	4332      	orrs	r2, r6
   287fa:	055b      	lsls	r3, r3, #21
   287fc:	402a      	ands	r2, r5
   287fe:	085b      	lsrs	r3, r3, #1
   28800:	4313      	orrs	r3, r2
   28802:	005b      	lsls	r3, r3, #1
   28804:	07e4      	lsls	r4, r4, #31
   28806:	085b      	lsrs	r3, r3, #1
   28808:	4323      	orrs	r3, r4
   2880a:	0019      	movs	r1, r3
   2880c:	bd70      	pop	{r4, r5, r6, pc}
   2880e:	2900      	cmp	r1, #0
   28810:	d114      	bne.n	2883c <__aeabi_f2d+0x6c>
   28812:	2d00      	cmp	r5, #0
   28814:	d01e      	beq.n	28854 <__aeabi_f2d+0x84>
   28816:	0028      	movs	r0, r5
   28818:	f000 f82c 	bl	28874 <__clzsi2>
   2881c:	280a      	cmp	r0, #10
   2881e:	dc1c      	bgt.n	2885a <__aeabi_f2d+0x8a>
   28820:	230b      	movs	r3, #11
   28822:	002a      	movs	r2, r5
   28824:	1a1b      	subs	r3, r3, r0
   28826:	40da      	lsrs	r2, r3
   28828:	0003      	movs	r3, r0
   2882a:	3315      	adds	r3, #21
   2882c:	409d      	lsls	r5, r3
   2882e:	4b0f      	ldr	r3, [pc, #60]	; (2886c <__aeabi_f2d+0x9c>)
   28830:	0312      	lsls	r2, r2, #12
   28832:	1a1b      	subs	r3, r3, r0
   28834:	055b      	lsls	r3, r3, #21
   28836:	0b16      	lsrs	r6, r2, #12
   28838:	0d5b      	lsrs	r3, r3, #21
   2883a:	e7d8      	b.n	287ee <__aeabi_f2d+0x1e>
   2883c:	2d00      	cmp	r5, #0
   2883e:	d006      	beq.n	2884e <__aeabi_f2d+0x7e>
   28840:	0b32      	lsrs	r2, r6, #12
   28842:	2680      	movs	r6, #128	; 0x80
   28844:	0336      	lsls	r6, r6, #12
   28846:	076d      	lsls	r5, r5, #29
   28848:	4316      	orrs	r6, r2
   2884a:	4b09      	ldr	r3, [pc, #36]	; (28870 <__aeabi_f2d+0xa0>)
   2884c:	e7cf      	b.n	287ee <__aeabi_f2d+0x1e>
   2884e:	4b08      	ldr	r3, [pc, #32]	; (28870 <__aeabi_f2d+0xa0>)
   28850:	2600      	movs	r6, #0
   28852:	e7cc      	b.n	287ee <__aeabi_f2d+0x1e>
   28854:	2300      	movs	r3, #0
   28856:	2600      	movs	r6, #0
   28858:	e7c9      	b.n	287ee <__aeabi_f2d+0x1e>
   2885a:	0003      	movs	r3, r0
   2885c:	002a      	movs	r2, r5
   2885e:	3b0b      	subs	r3, #11
   28860:	409a      	lsls	r2, r3
   28862:	2500      	movs	r5, #0
   28864:	e7e3      	b.n	2882e <__aeabi_f2d+0x5e>
   28866:	46c0      	nop			; (mov r8, r8)
   28868:	800fffff 	.word	0x800fffff
   2886c:	00000389 	.word	0x00000389
   28870:	000007ff 	.word	0x000007ff

00028874 <__clzsi2>:
   28874:	211c      	movs	r1, #28
   28876:	2301      	movs	r3, #1
   28878:	041b      	lsls	r3, r3, #16
   2887a:	4298      	cmp	r0, r3
   2887c:	d301      	bcc.n	28882 <__clzsi2+0xe>
   2887e:	0c00      	lsrs	r0, r0, #16
   28880:	3910      	subs	r1, #16
   28882:	0a1b      	lsrs	r3, r3, #8
   28884:	4298      	cmp	r0, r3
   28886:	d301      	bcc.n	2888c <__clzsi2+0x18>
   28888:	0a00      	lsrs	r0, r0, #8
   2888a:	3908      	subs	r1, #8
   2888c:	091b      	lsrs	r3, r3, #4
   2888e:	4298      	cmp	r0, r3
   28890:	d301      	bcc.n	28896 <__clzsi2+0x22>
   28892:	0900      	lsrs	r0, r0, #4
   28894:	3904      	subs	r1, #4
   28896:	a202      	add	r2, pc, #8	; (adr r2, 288a0 <__clzsi2+0x2c>)
   28898:	5c10      	ldrb	r0, [r2, r0]
   2889a:	1840      	adds	r0, r0, r1
   2889c:	4770      	bx	lr
   2889e:	46c0      	nop			; (mov r8, r8)
   288a0:	02020304 	.word	0x02020304
   288a4:	01010101 	.word	0x01010101
	...

000288b0 <__clzdi2>:
   288b0:	b510      	push	{r4, lr}
   288b2:	2900      	cmp	r1, #0
   288b4:	d103      	bne.n	288be <__clzdi2+0xe>
   288b6:	f7ff ffdd 	bl	28874 <__clzsi2>
   288ba:	3020      	adds	r0, #32
   288bc:	e002      	b.n	288c4 <__clzdi2+0x14>
   288be:	1c08      	adds	r0, r1, #0
   288c0:	f7ff ffd8 	bl	28874 <__clzsi2>
   288c4:	bd10      	pop	{r4, pc}
   288c6:	46c0      	nop			; (mov r8, r8)

000288c8 <atoi>:
   288c8:	b510      	push	{r4, lr}
   288ca:	220a      	movs	r2, #10
   288cc:	2100      	movs	r1, #0
   288ce:	f000 fadd 	bl	28e8c <strtol>
   288d2:	bd10      	pop	{r4, pc}

000288d4 <calloc>:
   288d4:	b510      	push	{r4, lr}
   288d6:	4b03      	ldr	r3, [pc, #12]	; (288e4 <calloc+0x10>)
   288d8:	000a      	movs	r2, r1
   288da:	0001      	movs	r1, r0
   288dc:	6818      	ldr	r0, [r3, #0]
   288de:	f000 f888 	bl	289f2 <_calloc_r>
   288e2:	bd10      	pop	{r4, pc}
   288e4:	2000002c 	.word	0x2000002c

000288e8 <__errno>:
   288e8:	4b01      	ldr	r3, [pc, #4]	; (288f0 <__errno+0x8>)
   288ea:	6818      	ldr	r0, [r3, #0]
   288ec:	4770      	bx	lr
   288ee:	46c0      	nop			; (mov r8, r8)
   288f0:	2000002c 	.word	0x2000002c

000288f4 <__libc_init_array>:
   288f4:	b570      	push	{r4, r5, r6, lr}
   288f6:	2600      	movs	r6, #0
   288f8:	4d0c      	ldr	r5, [pc, #48]	; (2892c <__libc_init_array+0x38>)
   288fa:	4c0d      	ldr	r4, [pc, #52]	; (28930 <__libc_init_array+0x3c>)
   288fc:	1b64      	subs	r4, r4, r5
   288fe:	10a4      	asrs	r4, r4, #2
   28900:	42a6      	cmp	r6, r4
   28902:	d109      	bne.n	28918 <__libc_init_array+0x24>
   28904:	2600      	movs	r6, #0
   28906:	f002 f96d 	bl	2abe4 <_init>
   2890a:	4d0a      	ldr	r5, [pc, #40]	; (28934 <__libc_init_array+0x40>)
   2890c:	4c0a      	ldr	r4, [pc, #40]	; (28938 <__libc_init_array+0x44>)
   2890e:	1b64      	subs	r4, r4, r5
   28910:	10a4      	asrs	r4, r4, #2
   28912:	42a6      	cmp	r6, r4
   28914:	d105      	bne.n	28922 <__libc_init_array+0x2e>
   28916:	bd70      	pop	{r4, r5, r6, pc}
   28918:	00b3      	lsls	r3, r6, #2
   2891a:	58eb      	ldr	r3, [r5, r3]
   2891c:	4798      	blx	r3
   2891e:	3601      	adds	r6, #1
   28920:	e7ee      	b.n	28900 <__libc_init_array+0xc>
   28922:	00b3      	lsls	r3, r6, #2
   28924:	58eb      	ldr	r3, [r5, r3]
   28926:	4798      	blx	r3
   28928:	3601      	adds	r6, #1
   2892a:	e7f2      	b.n	28912 <__libc_init_array+0x1e>
   2892c:	0002abf0 	.word	0x0002abf0
   28930:	0002abf0 	.word	0x0002abf0
   28934:	0002abf0 	.word	0x0002abf0
   28938:	0002abf4 	.word	0x0002abf4

0002893c <__locale_ctype_ptr_l>:
   2893c:	30ec      	adds	r0, #236	; 0xec
   2893e:	6800      	ldr	r0, [r0, #0]
   28940:	4770      	bx	lr
	...

00028944 <__locale_ctype_ptr>:
   28944:	4b04      	ldr	r3, [pc, #16]	; (28958 <__locale_ctype_ptr+0x14>)
   28946:	681b      	ldr	r3, [r3, #0]
   28948:	6a1b      	ldr	r3, [r3, #32]
   2894a:	2b00      	cmp	r3, #0
   2894c:	d100      	bne.n	28950 <__locale_ctype_ptr+0xc>
   2894e:	4b03      	ldr	r3, [pc, #12]	; (2895c <__locale_ctype_ptr+0x18>)
   28950:	33ec      	adds	r3, #236	; 0xec
   28952:	6818      	ldr	r0, [r3, #0]
   28954:	4770      	bx	lr
   28956:	46c0      	nop			; (mov r8, r8)
   28958:	2000002c 	.word	0x2000002c
   2895c:	20000090 	.word	0x20000090

00028960 <malloc>:
   28960:	b510      	push	{r4, lr}
   28962:	4b03      	ldr	r3, [pc, #12]	; (28970 <malloc+0x10>)
   28964:	0001      	movs	r1, r0
   28966:	6818      	ldr	r0, [r3, #0]
   28968:	f000 f89c 	bl	28aa4 <_malloc_r>
   2896c:	bd10      	pop	{r4, pc}
   2896e:	46c0      	nop			; (mov r8, r8)
   28970:	2000002c 	.word	0x2000002c

00028974 <free>:
   28974:	b510      	push	{r4, lr}
   28976:	4b03      	ldr	r3, [pc, #12]	; (28984 <free+0x10>)
   28978:	0001      	movs	r1, r0
   2897a:	6818      	ldr	r0, [r3, #0]
   2897c:	f000 f848 	bl	28a10 <_free_r>
   28980:	bd10      	pop	{r4, pc}
   28982:	46c0      	nop			; (mov r8, r8)
   28984:	2000002c 	.word	0x2000002c

00028988 <__ascii_mbtowc>:
   28988:	b082      	sub	sp, #8
   2898a:	2900      	cmp	r1, #0
   2898c:	d100      	bne.n	28990 <__ascii_mbtowc+0x8>
   2898e:	a901      	add	r1, sp, #4
   28990:	1e10      	subs	r0, r2, #0
   28992:	d006      	beq.n	289a2 <__ascii_mbtowc+0x1a>
   28994:	2b00      	cmp	r3, #0
   28996:	d006      	beq.n	289a6 <__ascii_mbtowc+0x1e>
   28998:	7813      	ldrb	r3, [r2, #0]
   2899a:	600b      	str	r3, [r1, #0]
   2899c:	7810      	ldrb	r0, [r2, #0]
   2899e:	1e43      	subs	r3, r0, #1
   289a0:	4198      	sbcs	r0, r3
   289a2:	b002      	add	sp, #8
   289a4:	4770      	bx	lr
   289a6:	2002      	movs	r0, #2
   289a8:	4240      	negs	r0, r0
   289aa:	e7fa      	b.n	289a2 <__ascii_mbtowc+0x1a>

000289ac <memcpy>:
   289ac:	2300      	movs	r3, #0
   289ae:	b510      	push	{r4, lr}
   289b0:	429a      	cmp	r2, r3
   289b2:	d100      	bne.n	289b6 <memcpy+0xa>
   289b4:	bd10      	pop	{r4, pc}
   289b6:	5ccc      	ldrb	r4, [r1, r3]
   289b8:	54c4      	strb	r4, [r0, r3]
   289ba:	3301      	adds	r3, #1
   289bc:	e7f8      	b.n	289b0 <memcpy+0x4>

000289be <memmove>:
   289be:	b510      	push	{r4, lr}
   289c0:	4288      	cmp	r0, r1
   289c2:	d902      	bls.n	289ca <memmove+0xc>
   289c4:	188b      	adds	r3, r1, r2
   289c6:	4298      	cmp	r0, r3
   289c8:	d308      	bcc.n	289dc <memmove+0x1e>
   289ca:	2300      	movs	r3, #0
   289cc:	429a      	cmp	r2, r3
   289ce:	d007      	beq.n	289e0 <memmove+0x22>
   289d0:	5ccc      	ldrb	r4, [r1, r3]
   289d2:	54c4      	strb	r4, [r0, r3]
   289d4:	3301      	adds	r3, #1
   289d6:	e7f9      	b.n	289cc <memmove+0xe>
   289d8:	5c8b      	ldrb	r3, [r1, r2]
   289da:	5483      	strb	r3, [r0, r2]
   289dc:	3a01      	subs	r2, #1
   289de:	d2fb      	bcs.n	289d8 <memmove+0x1a>
   289e0:	bd10      	pop	{r4, pc}

000289e2 <memset>:
   289e2:	0003      	movs	r3, r0
   289e4:	1882      	adds	r2, r0, r2
   289e6:	4293      	cmp	r3, r2
   289e8:	d100      	bne.n	289ec <memset+0xa>
   289ea:	4770      	bx	lr
   289ec:	7019      	strb	r1, [r3, #0]
   289ee:	3301      	adds	r3, #1
   289f0:	e7f9      	b.n	289e6 <memset+0x4>

000289f2 <_calloc_r>:
   289f2:	434a      	muls	r2, r1
   289f4:	b570      	push	{r4, r5, r6, lr}
   289f6:	0011      	movs	r1, r2
   289f8:	0014      	movs	r4, r2
   289fa:	f000 f853 	bl	28aa4 <_malloc_r>
   289fe:	1e05      	subs	r5, r0, #0
   28a00:	d003      	beq.n	28a0a <_calloc_r+0x18>
   28a02:	0022      	movs	r2, r4
   28a04:	2100      	movs	r1, #0
   28a06:	f7ff ffec 	bl	289e2 <memset>
   28a0a:	0028      	movs	r0, r5
   28a0c:	bd70      	pop	{r4, r5, r6, pc}
	...

00028a10 <_free_r>:
   28a10:	b570      	push	{r4, r5, r6, lr}
   28a12:	0005      	movs	r5, r0
   28a14:	2900      	cmp	r1, #0
   28a16:	d010      	beq.n	28a3a <_free_r+0x2a>
   28a18:	1f0c      	subs	r4, r1, #4
   28a1a:	6823      	ldr	r3, [r4, #0]
   28a1c:	2b00      	cmp	r3, #0
   28a1e:	da00      	bge.n	28a22 <_free_r+0x12>
   28a20:	18e4      	adds	r4, r4, r3
   28a22:	0028      	movs	r0, r5
   28a24:	f000 fab4 	bl	28f90 <__malloc_lock>
   28a28:	4a1d      	ldr	r2, [pc, #116]	; (28aa0 <_free_r+0x90>)
   28a2a:	6813      	ldr	r3, [r2, #0]
   28a2c:	2b00      	cmp	r3, #0
   28a2e:	d105      	bne.n	28a3c <_free_r+0x2c>
   28a30:	6063      	str	r3, [r4, #4]
   28a32:	6014      	str	r4, [r2, #0]
   28a34:	0028      	movs	r0, r5
   28a36:	f000 faac 	bl	28f92 <__malloc_unlock>
   28a3a:	bd70      	pop	{r4, r5, r6, pc}
   28a3c:	42a3      	cmp	r3, r4
   28a3e:	d909      	bls.n	28a54 <_free_r+0x44>
   28a40:	6821      	ldr	r1, [r4, #0]
   28a42:	1860      	adds	r0, r4, r1
   28a44:	4283      	cmp	r3, r0
   28a46:	d1f3      	bne.n	28a30 <_free_r+0x20>
   28a48:	6818      	ldr	r0, [r3, #0]
   28a4a:	685b      	ldr	r3, [r3, #4]
   28a4c:	1841      	adds	r1, r0, r1
   28a4e:	6021      	str	r1, [r4, #0]
   28a50:	e7ee      	b.n	28a30 <_free_r+0x20>
   28a52:	0013      	movs	r3, r2
   28a54:	685a      	ldr	r2, [r3, #4]
   28a56:	2a00      	cmp	r2, #0
   28a58:	d001      	beq.n	28a5e <_free_r+0x4e>
   28a5a:	42a2      	cmp	r2, r4
   28a5c:	d9f9      	bls.n	28a52 <_free_r+0x42>
   28a5e:	6819      	ldr	r1, [r3, #0]
   28a60:	1858      	adds	r0, r3, r1
   28a62:	42a0      	cmp	r0, r4
   28a64:	d10b      	bne.n	28a7e <_free_r+0x6e>
   28a66:	6820      	ldr	r0, [r4, #0]
   28a68:	1809      	adds	r1, r1, r0
   28a6a:	1858      	adds	r0, r3, r1
   28a6c:	6019      	str	r1, [r3, #0]
   28a6e:	4282      	cmp	r2, r0
   28a70:	d1e0      	bne.n	28a34 <_free_r+0x24>
   28a72:	6810      	ldr	r0, [r2, #0]
   28a74:	6852      	ldr	r2, [r2, #4]
   28a76:	1841      	adds	r1, r0, r1
   28a78:	6019      	str	r1, [r3, #0]
   28a7a:	605a      	str	r2, [r3, #4]
   28a7c:	e7da      	b.n	28a34 <_free_r+0x24>
   28a7e:	42a0      	cmp	r0, r4
   28a80:	d902      	bls.n	28a88 <_free_r+0x78>
   28a82:	230c      	movs	r3, #12
   28a84:	602b      	str	r3, [r5, #0]
   28a86:	e7d5      	b.n	28a34 <_free_r+0x24>
   28a88:	6821      	ldr	r1, [r4, #0]
   28a8a:	1860      	adds	r0, r4, r1
   28a8c:	4282      	cmp	r2, r0
   28a8e:	d103      	bne.n	28a98 <_free_r+0x88>
   28a90:	6810      	ldr	r0, [r2, #0]
   28a92:	6852      	ldr	r2, [r2, #4]
   28a94:	1841      	adds	r1, r0, r1
   28a96:	6021      	str	r1, [r4, #0]
   28a98:	6062      	str	r2, [r4, #4]
   28a9a:	605c      	str	r4, [r3, #4]
   28a9c:	e7ca      	b.n	28a34 <_free_r+0x24>
   28a9e:	46c0      	nop			; (mov r8, r8)
   28aa0:	20000514 	.word	0x20000514

00028aa4 <_malloc_r>:
   28aa4:	2303      	movs	r3, #3
   28aa6:	b570      	push	{r4, r5, r6, lr}
   28aa8:	1ccd      	adds	r5, r1, #3
   28aaa:	439d      	bics	r5, r3
   28aac:	3508      	adds	r5, #8
   28aae:	0006      	movs	r6, r0
   28ab0:	2d0c      	cmp	r5, #12
   28ab2:	d21e      	bcs.n	28af2 <_malloc_r+0x4e>
   28ab4:	250c      	movs	r5, #12
   28ab6:	42a9      	cmp	r1, r5
   28ab8:	d81d      	bhi.n	28af6 <_malloc_r+0x52>
   28aba:	0030      	movs	r0, r6
   28abc:	f000 fa68 	bl	28f90 <__malloc_lock>
   28ac0:	4a25      	ldr	r2, [pc, #148]	; (28b58 <_malloc_r+0xb4>)
   28ac2:	6814      	ldr	r4, [r2, #0]
   28ac4:	0021      	movs	r1, r4
   28ac6:	2900      	cmp	r1, #0
   28ac8:	d119      	bne.n	28afe <_malloc_r+0x5a>
   28aca:	4c24      	ldr	r4, [pc, #144]	; (28b5c <_malloc_r+0xb8>)
   28acc:	6823      	ldr	r3, [r4, #0]
   28ace:	2b00      	cmp	r3, #0
   28ad0:	d103      	bne.n	28ada <_malloc_r+0x36>
   28ad2:	0030      	movs	r0, r6
   28ad4:	f000 f844 	bl	28b60 <_sbrk_r>
   28ad8:	6020      	str	r0, [r4, #0]
   28ada:	0029      	movs	r1, r5
   28adc:	0030      	movs	r0, r6
   28ade:	f000 f83f 	bl	28b60 <_sbrk_r>
   28ae2:	1c43      	adds	r3, r0, #1
   28ae4:	d12c      	bne.n	28b40 <_malloc_r+0x9c>
   28ae6:	230c      	movs	r3, #12
   28ae8:	0030      	movs	r0, r6
   28aea:	6033      	str	r3, [r6, #0]
   28aec:	f000 fa51 	bl	28f92 <__malloc_unlock>
   28af0:	e003      	b.n	28afa <_malloc_r+0x56>
   28af2:	2d00      	cmp	r5, #0
   28af4:	dadf      	bge.n	28ab6 <_malloc_r+0x12>
   28af6:	230c      	movs	r3, #12
   28af8:	6033      	str	r3, [r6, #0]
   28afa:	2000      	movs	r0, #0
   28afc:	bd70      	pop	{r4, r5, r6, pc}
   28afe:	680b      	ldr	r3, [r1, #0]
   28b00:	1b5b      	subs	r3, r3, r5
   28b02:	d41a      	bmi.n	28b3a <_malloc_r+0x96>
   28b04:	2b0b      	cmp	r3, #11
   28b06:	d903      	bls.n	28b10 <_malloc_r+0x6c>
   28b08:	600b      	str	r3, [r1, #0]
   28b0a:	18cc      	adds	r4, r1, r3
   28b0c:	6025      	str	r5, [r4, #0]
   28b0e:	e003      	b.n	28b18 <_malloc_r+0x74>
   28b10:	428c      	cmp	r4, r1
   28b12:	d10e      	bne.n	28b32 <_malloc_r+0x8e>
   28b14:	6863      	ldr	r3, [r4, #4]
   28b16:	6013      	str	r3, [r2, #0]
   28b18:	0030      	movs	r0, r6
   28b1a:	f000 fa3a 	bl	28f92 <__malloc_unlock>
   28b1e:	0020      	movs	r0, r4
   28b20:	2207      	movs	r2, #7
   28b22:	300b      	adds	r0, #11
   28b24:	1d23      	adds	r3, r4, #4
   28b26:	4390      	bics	r0, r2
   28b28:	1ac3      	subs	r3, r0, r3
   28b2a:	d0e7      	beq.n	28afc <_malloc_r+0x58>
   28b2c:	425a      	negs	r2, r3
   28b2e:	50e2      	str	r2, [r4, r3]
   28b30:	e7e4      	b.n	28afc <_malloc_r+0x58>
   28b32:	684b      	ldr	r3, [r1, #4]
   28b34:	6063      	str	r3, [r4, #4]
   28b36:	000c      	movs	r4, r1
   28b38:	e7ee      	b.n	28b18 <_malloc_r+0x74>
   28b3a:	000c      	movs	r4, r1
   28b3c:	6849      	ldr	r1, [r1, #4]
   28b3e:	e7c2      	b.n	28ac6 <_malloc_r+0x22>
   28b40:	2303      	movs	r3, #3
   28b42:	1cc4      	adds	r4, r0, #3
   28b44:	439c      	bics	r4, r3
   28b46:	42a0      	cmp	r0, r4
   28b48:	d0e0      	beq.n	28b0c <_malloc_r+0x68>
   28b4a:	1a21      	subs	r1, r4, r0
   28b4c:	0030      	movs	r0, r6
   28b4e:	f000 f807 	bl	28b60 <_sbrk_r>
   28b52:	1c43      	adds	r3, r0, #1
   28b54:	d1da      	bne.n	28b0c <_malloc_r+0x68>
   28b56:	e7c6      	b.n	28ae6 <_malloc_r+0x42>
   28b58:	20000514 	.word	0x20000514
   28b5c:	20000518 	.word	0x20000518

00028b60 <_sbrk_r>:
   28b60:	2300      	movs	r3, #0
   28b62:	b570      	push	{r4, r5, r6, lr}
   28b64:	4c06      	ldr	r4, [pc, #24]	; (28b80 <_sbrk_r+0x20>)
   28b66:	0005      	movs	r5, r0
   28b68:	0008      	movs	r0, r1
   28b6a:	6023      	str	r3, [r4, #0]
   28b6c:	f7fb ff94 	bl	24a98 <_sbrk>
   28b70:	1c43      	adds	r3, r0, #1
   28b72:	d103      	bne.n	28b7c <_sbrk_r+0x1c>
   28b74:	6823      	ldr	r3, [r4, #0]
   28b76:	2b00      	cmp	r3, #0
   28b78:	d000      	beq.n	28b7c <_sbrk_r+0x1c>
   28b7a:	602b      	str	r3, [r5, #0]
   28b7c:	bd70      	pop	{r4, r5, r6, pc}
   28b7e:	46c0      	nop			; (mov r8, r8)
   28b80:	20000988 	.word	0x20000988

00028b84 <sniprintf>:
   28b84:	b40c      	push	{r2, r3}
   28b86:	b530      	push	{r4, r5, lr}
   28b88:	4b16      	ldr	r3, [pc, #88]	; (28be4 <sniprintf+0x60>)
   28b8a:	b09d      	sub	sp, #116	; 0x74
   28b8c:	1e0c      	subs	r4, r1, #0
   28b8e:	681d      	ldr	r5, [r3, #0]
   28b90:	da08      	bge.n	28ba4 <sniprintf+0x20>
   28b92:	238b      	movs	r3, #139	; 0x8b
   28b94:	2001      	movs	r0, #1
   28b96:	602b      	str	r3, [r5, #0]
   28b98:	4240      	negs	r0, r0
   28b9a:	b01d      	add	sp, #116	; 0x74
   28b9c:	bc30      	pop	{r4, r5}
   28b9e:	bc08      	pop	{r3}
   28ba0:	b002      	add	sp, #8
   28ba2:	4718      	bx	r3
   28ba4:	2382      	movs	r3, #130	; 0x82
   28ba6:	a902      	add	r1, sp, #8
   28ba8:	009b      	lsls	r3, r3, #2
   28baa:	818b      	strh	r3, [r1, #12]
   28bac:	2300      	movs	r3, #0
   28bae:	9002      	str	r0, [sp, #8]
   28bb0:	6108      	str	r0, [r1, #16]
   28bb2:	429c      	cmp	r4, r3
   28bb4:	d000      	beq.n	28bb8 <sniprintf+0x34>
   28bb6:	1e63      	subs	r3, r4, #1
   28bb8:	608b      	str	r3, [r1, #8]
   28bba:	614b      	str	r3, [r1, #20]
   28bbc:	2301      	movs	r3, #1
   28bbe:	425b      	negs	r3, r3
   28bc0:	81cb      	strh	r3, [r1, #14]
   28bc2:	9a20      	ldr	r2, [sp, #128]	; 0x80
   28bc4:	ab21      	add	r3, sp, #132	; 0x84
   28bc6:	0028      	movs	r0, r5
   28bc8:	9301      	str	r3, [sp, #4]
   28bca:	f000 fa45 	bl	29058 <_svfiprintf_r>
   28bce:	1c43      	adds	r3, r0, #1
   28bd0:	da01      	bge.n	28bd6 <sniprintf+0x52>
   28bd2:	238b      	movs	r3, #139	; 0x8b
   28bd4:	602b      	str	r3, [r5, #0]
   28bd6:	2c00      	cmp	r4, #0
   28bd8:	d0df      	beq.n	28b9a <sniprintf+0x16>
   28bda:	2300      	movs	r3, #0
   28bdc:	9a02      	ldr	r2, [sp, #8]
   28bde:	7013      	strb	r3, [r2, #0]
   28be0:	e7db      	b.n	28b9a <sniprintf+0x16>
   28be2:	46c0      	nop			; (mov r8, r8)
   28be4:	2000002c 	.word	0x2000002c

00028be8 <siprintf>:
   28be8:	b40e      	push	{r1, r2, r3}
   28bea:	b510      	push	{r4, lr}
   28bec:	b09d      	sub	sp, #116	; 0x74
   28bee:	a902      	add	r1, sp, #8
   28bf0:	9002      	str	r0, [sp, #8]
   28bf2:	6108      	str	r0, [r1, #16]
   28bf4:	480b      	ldr	r0, [pc, #44]	; (28c24 <siprintf+0x3c>)
   28bf6:	2482      	movs	r4, #130	; 0x82
   28bf8:	6088      	str	r0, [r1, #8]
   28bfa:	6148      	str	r0, [r1, #20]
   28bfc:	2001      	movs	r0, #1
   28bfe:	4240      	negs	r0, r0
   28c00:	ab1f      	add	r3, sp, #124	; 0x7c
   28c02:	81c8      	strh	r0, [r1, #14]
   28c04:	4808      	ldr	r0, [pc, #32]	; (28c28 <siprintf+0x40>)
   28c06:	cb04      	ldmia	r3!, {r2}
   28c08:	00a4      	lsls	r4, r4, #2
   28c0a:	6800      	ldr	r0, [r0, #0]
   28c0c:	9301      	str	r3, [sp, #4]
   28c0e:	818c      	strh	r4, [r1, #12]
   28c10:	f000 fa22 	bl	29058 <_svfiprintf_r>
   28c14:	2300      	movs	r3, #0
   28c16:	9a02      	ldr	r2, [sp, #8]
   28c18:	7013      	strb	r3, [r2, #0]
   28c1a:	b01d      	add	sp, #116	; 0x74
   28c1c:	bc10      	pop	{r4}
   28c1e:	bc08      	pop	{r3}
   28c20:	b003      	add	sp, #12
   28c22:	4718      	bx	r3
   28c24:	7fffffff 	.word	0x7fffffff
   28c28:	2000002c 	.word	0x2000002c

00028c2c <strcat>:
   28c2c:	0002      	movs	r2, r0
   28c2e:	b510      	push	{r4, lr}
   28c30:	7813      	ldrb	r3, [r2, #0]
   28c32:	2b00      	cmp	r3, #0
   28c34:	d105      	bne.n	28c42 <strcat+0x16>
   28c36:	5ccc      	ldrb	r4, [r1, r3]
   28c38:	54d4      	strb	r4, [r2, r3]
   28c3a:	3301      	adds	r3, #1
   28c3c:	2c00      	cmp	r4, #0
   28c3e:	d1fa      	bne.n	28c36 <strcat+0xa>
   28c40:	bd10      	pop	{r4, pc}
   28c42:	3201      	adds	r2, #1
   28c44:	e7f4      	b.n	28c30 <strcat+0x4>

00028c46 <strchr>:
   28c46:	b2c9      	uxtb	r1, r1
   28c48:	7803      	ldrb	r3, [r0, #0]
   28c4a:	2b00      	cmp	r3, #0
   28c4c:	d004      	beq.n	28c58 <strchr+0x12>
   28c4e:	4299      	cmp	r1, r3
   28c50:	d100      	bne.n	28c54 <strchr+0xe>
   28c52:	4770      	bx	lr
   28c54:	3001      	adds	r0, #1
   28c56:	e7f7      	b.n	28c48 <strchr+0x2>
   28c58:	424b      	negs	r3, r1
   28c5a:	4159      	adcs	r1, r3
   28c5c:	4249      	negs	r1, r1
   28c5e:	4008      	ands	r0, r1
   28c60:	e7f7      	b.n	28c52 <strchr+0xc>

00028c62 <strcpy>:
   28c62:	1c03      	adds	r3, r0, #0
   28c64:	780a      	ldrb	r2, [r1, #0]
   28c66:	3101      	adds	r1, #1
   28c68:	701a      	strb	r2, [r3, #0]
   28c6a:	3301      	adds	r3, #1
   28c6c:	2a00      	cmp	r2, #0
   28c6e:	d1f9      	bne.n	28c64 <strcpy+0x2>
   28c70:	4770      	bx	lr

00028c72 <strlen>:
   28c72:	2300      	movs	r3, #0
   28c74:	5cc2      	ldrb	r2, [r0, r3]
   28c76:	3301      	adds	r3, #1
   28c78:	2a00      	cmp	r2, #0
   28c7a:	d1fb      	bne.n	28c74 <strlen+0x2>
   28c7c:	1e58      	subs	r0, r3, #1
   28c7e:	4770      	bx	lr

00028c80 <strncmp>:
   28c80:	2300      	movs	r3, #0
   28c82:	b530      	push	{r4, r5, lr}
   28c84:	429a      	cmp	r2, r3
   28c86:	d00a      	beq.n	28c9e <strncmp+0x1e>
   28c88:	3a01      	subs	r2, #1
   28c8a:	5cc4      	ldrb	r4, [r0, r3]
   28c8c:	5ccd      	ldrb	r5, [r1, r3]
   28c8e:	42ac      	cmp	r4, r5
   28c90:	d104      	bne.n	28c9c <strncmp+0x1c>
   28c92:	429a      	cmp	r2, r3
   28c94:	d002      	beq.n	28c9c <strncmp+0x1c>
   28c96:	3301      	adds	r3, #1
   28c98:	2c00      	cmp	r4, #0
   28c9a:	d1f6      	bne.n	28c8a <strncmp+0xa>
   28c9c:	1b63      	subs	r3, r4, r5
   28c9e:	0018      	movs	r0, r3
   28ca0:	bd30      	pop	{r4, r5, pc}

00028ca2 <strstr>:
   28ca2:	b510      	push	{r4, lr}
   28ca4:	0002      	movs	r2, r0
   28ca6:	7800      	ldrb	r0, [r0, #0]
   28ca8:	2800      	cmp	r0, #0
   28caa:	d104      	bne.n	28cb6 <strstr+0x14>
   28cac:	7809      	ldrb	r1, [r1, #0]
   28cae:	2900      	cmp	r1, #0
   28cb0:	d00d      	beq.n	28cce <strstr+0x2c>
   28cb2:	bd10      	pop	{r4, pc}
   28cb4:	3201      	adds	r2, #1
   28cb6:	7810      	ldrb	r0, [r2, #0]
   28cb8:	2800      	cmp	r0, #0
   28cba:	d0fa      	beq.n	28cb2 <strstr+0x10>
   28cbc:	2300      	movs	r3, #0
   28cbe:	5cc8      	ldrb	r0, [r1, r3]
   28cc0:	2800      	cmp	r0, #0
   28cc2:	d004      	beq.n	28cce <strstr+0x2c>
   28cc4:	5cd4      	ldrb	r4, [r2, r3]
   28cc6:	4284      	cmp	r4, r0
   28cc8:	d1f4      	bne.n	28cb4 <strstr+0x12>
   28cca:	3301      	adds	r3, #1
   28ccc:	e7f7      	b.n	28cbe <strstr+0x1c>
   28cce:	0010      	movs	r0, r2
   28cd0:	e7ef      	b.n	28cb2 <strstr+0x10>
	...

00028cd4 <strtok>:
   28cd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   28cd6:	4b12      	ldr	r3, [pc, #72]	; (28d20 <strtok+0x4c>)
   28cd8:	0006      	movs	r6, r0
   28cda:	681d      	ldr	r5, [r3, #0]
   28cdc:	000f      	movs	r7, r1
   28cde:	6dac      	ldr	r4, [r5, #88]	; 0x58
   28ce0:	2c00      	cmp	r4, #0
   28ce2:	d116      	bne.n	28d12 <strtok+0x3e>
   28ce4:	2050      	movs	r0, #80	; 0x50
   28ce6:	f7ff fe3b 	bl	28960 <malloc>
   28cea:	65a8      	str	r0, [r5, #88]	; 0x58
   28cec:	6004      	str	r4, [r0, #0]
   28cee:	6044      	str	r4, [r0, #4]
   28cf0:	6084      	str	r4, [r0, #8]
   28cf2:	60c4      	str	r4, [r0, #12]
   28cf4:	6104      	str	r4, [r0, #16]
   28cf6:	6144      	str	r4, [r0, #20]
   28cf8:	6184      	str	r4, [r0, #24]
   28cfa:	6284      	str	r4, [r0, #40]	; 0x28
   28cfc:	62c4      	str	r4, [r0, #44]	; 0x2c
   28cfe:	6304      	str	r4, [r0, #48]	; 0x30
   28d00:	6344      	str	r4, [r0, #52]	; 0x34
   28d02:	6384      	str	r4, [r0, #56]	; 0x38
   28d04:	63c4      	str	r4, [r0, #60]	; 0x3c
   28d06:	6404      	str	r4, [r0, #64]	; 0x40
   28d08:	6444      	str	r4, [r0, #68]	; 0x44
   28d0a:	6484      	str	r4, [r0, #72]	; 0x48
   28d0c:	64c4      	str	r4, [r0, #76]	; 0x4c
   28d0e:	7704      	strb	r4, [r0, #28]
   28d10:	6244      	str	r4, [r0, #36]	; 0x24
   28d12:	6daa      	ldr	r2, [r5, #88]	; 0x58
   28d14:	0039      	movs	r1, r7
   28d16:	0030      	movs	r0, r6
   28d18:	2301      	movs	r3, #1
   28d1a:	f000 f803 	bl	28d24 <__strtok_r>
   28d1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   28d20:	2000002c 	.word	0x2000002c

00028d24 <__strtok_r>:
   28d24:	b5f0      	push	{r4, r5, r6, r7, lr}
   28d26:	2800      	cmp	r0, #0
   28d28:	d104      	bne.n	28d34 <__strtok_r+0x10>
   28d2a:	6810      	ldr	r0, [r2, #0]
   28d2c:	2800      	cmp	r0, #0
   28d2e:	d101      	bne.n	28d34 <__strtok_r+0x10>
   28d30:	bdf0      	pop	{r4, r5, r6, r7, pc}
   28d32:	0020      	movs	r0, r4
   28d34:	000e      	movs	r6, r1
   28d36:	7805      	ldrb	r5, [r0, #0]
   28d38:	1c44      	adds	r4, r0, #1
   28d3a:	7837      	ldrb	r7, [r6, #0]
   28d3c:	2f00      	cmp	r7, #0
   28d3e:	d104      	bne.n	28d4a <__strtok_r+0x26>
   28d40:	2d00      	cmp	r5, #0
   28d42:	d110      	bne.n	28d66 <__strtok_r+0x42>
   28d44:	6015      	str	r5, [r2, #0]
   28d46:	0028      	movs	r0, r5
   28d48:	e7f2      	b.n	28d30 <__strtok_r+0xc>
   28d4a:	3601      	adds	r6, #1
   28d4c:	42bd      	cmp	r5, r7
   28d4e:	d1f4      	bne.n	28d3a <__strtok_r+0x16>
   28d50:	2b00      	cmp	r3, #0
   28d52:	d1ee      	bne.n	28d32 <__strtok_r+0xe>
   28d54:	6014      	str	r4, [r2, #0]
   28d56:	7003      	strb	r3, [r0, #0]
   28d58:	e7ea      	b.n	28d30 <__strtok_r+0xc>
   28d5a:	0033      	movs	r3, r6
   28d5c:	e00e      	b.n	28d7c <__strtok_r+0x58>
   28d5e:	3501      	adds	r5, #1
   28d60:	001c      	movs	r4, r3
   28d62:	2f00      	cmp	r7, #0
   28d64:	d102      	bne.n	28d6c <__strtok_r+0x48>
   28d66:	000d      	movs	r5, r1
   28d68:	7826      	ldrb	r6, [r4, #0]
   28d6a:	1c63      	adds	r3, r4, #1
   28d6c:	782f      	ldrb	r7, [r5, #0]
   28d6e:	42be      	cmp	r6, r7
   28d70:	d1f5      	bne.n	28d5e <__strtok_r+0x3a>
   28d72:	2e00      	cmp	r6, #0
   28d74:	d0f1      	beq.n	28d5a <__strtok_r+0x36>
   28d76:	2400      	movs	r4, #0
   28d78:	1e59      	subs	r1, r3, #1
   28d7a:	700c      	strb	r4, [r1, #0]
   28d7c:	6013      	str	r3, [r2, #0]
   28d7e:	e7d7      	b.n	28d30 <__strtok_r+0xc>

00028d80 <_strtol_l.isra.0>:
   28d80:	b5f0      	push	{r4, r5, r6, r7, lr}
   28d82:	001f      	movs	r7, r3
   28d84:	000e      	movs	r6, r1
   28d86:	b087      	sub	sp, #28
   28d88:	9005      	str	r0, [sp, #20]
   28d8a:	9103      	str	r1, [sp, #12]
   28d8c:	9202      	str	r2, [sp, #8]
   28d8e:	980c      	ldr	r0, [sp, #48]	; 0x30
   28d90:	7834      	ldrb	r4, [r6, #0]
   28d92:	f7ff fdd3 	bl	2893c <__locale_ctype_ptr_l>
   28d96:	2208      	movs	r2, #8
   28d98:	1900      	adds	r0, r0, r4
   28d9a:	7843      	ldrb	r3, [r0, #1]
   28d9c:	1c75      	adds	r5, r6, #1
   28d9e:	4013      	ands	r3, r2
   28da0:	d10c      	bne.n	28dbc <_strtol_l.isra.0+0x3c>
   28da2:	2c2d      	cmp	r4, #45	; 0x2d
   28da4:	d10c      	bne.n	28dc0 <_strtol_l.isra.0+0x40>
   28da6:	3301      	adds	r3, #1
   28da8:	782c      	ldrb	r4, [r5, #0]
   28daa:	9301      	str	r3, [sp, #4]
   28dac:	1cb5      	adds	r5, r6, #2
   28dae:	2f00      	cmp	r7, #0
   28db0:	d00c      	beq.n	28dcc <_strtol_l.isra.0+0x4c>
   28db2:	2f10      	cmp	r7, #16
   28db4:	d114      	bne.n	28de0 <_strtol_l.isra.0+0x60>
   28db6:	2c30      	cmp	r4, #48	; 0x30
   28db8:	d00a      	beq.n	28dd0 <_strtol_l.isra.0+0x50>
   28dba:	e011      	b.n	28de0 <_strtol_l.isra.0+0x60>
   28dbc:	002e      	movs	r6, r5
   28dbe:	e7e6      	b.n	28d8e <_strtol_l.isra.0+0xe>
   28dc0:	9301      	str	r3, [sp, #4]
   28dc2:	2c2b      	cmp	r4, #43	; 0x2b
   28dc4:	d1f3      	bne.n	28dae <_strtol_l.isra.0+0x2e>
   28dc6:	782c      	ldrb	r4, [r5, #0]
   28dc8:	1cb5      	adds	r5, r6, #2
   28dca:	e7f0      	b.n	28dae <_strtol_l.isra.0+0x2e>
   28dcc:	2c30      	cmp	r4, #48	; 0x30
   28dce:	d12f      	bne.n	28e30 <_strtol_l.isra.0+0xb0>
   28dd0:	2220      	movs	r2, #32
   28dd2:	782b      	ldrb	r3, [r5, #0]
   28dd4:	4393      	bics	r3, r2
   28dd6:	2b58      	cmp	r3, #88	; 0x58
   28dd8:	d151      	bne.n	28e7e <_strtol_l.isra.0+0xfe>
   28dda:	2710      	movs	r7, #16
   28ddc:	786c      	ldrb	r4, [r5, #1]
   28dde:	3502      	adds	r5, #2
   28de0:	9b01      	ldr	r3, [sp, #4]
   28de2:	4a29      	ldr	r2, [pc, #164]	; (28e88 <_strtol_l.isra.0+0x108>)
   28de4:	0039      	movs	r1, r7
   28de6:	189e      	adds	r6, r3, r2
   28de8:	0030      	movs	r0, r6
   28dea:	f7fd fa45 	bl	26278 <__aeabi_uidivmod>
   28dee:	0030      	movs	r0, r6
   28df0:	9104      	str	r1, [sp, #16]
   28df2:	0039      	movs	r1, r7
   28df4:	f7fd f9ba 	bl	2616c <__udivsi3>
   28df8:	2101      	movs	r1, #1
   28dfa:	2300      	movs	r3, #0
   28dfc:	4249      	negs	r1, r1
   28dfe:	0002      	movs	r2, r0
   28e00:	468c      	mov	ip, r1
   28e02:	0018      	movs	r0, r3
   28e04:	0021      	movs	r1, r4
   28e06:	3930      	subs	r1, #48	; 0x30
   28e08:	2909      	cmp	r1, #9
   28e0a:	d813      	bhi.n	28e34 <_strtol_l.isra.0+0xb4>
   28e0c:	000c      	movs	r4, r1
   28e0e:	42a7      	cmp	r7, r4
   28e10:	dd1c      	ble.n	28e4c <_strtol_l.isra.0+0xcc>
   28e12:	1c59      	adds	r1, r3, #1
   28e14:	d009      	beq.n	28e2a <_strtol_l.isra.0+0xaa>
   28e16:	4663      	mov	r3, ip
   28e18:	4282      	cmp	r2, r0
   28e1a:	d306      	bcc.n	28e2a <_strtol_l.isra.0+0xaa>
   28e1c:	d102      	bne.n	28e24 <_strtol_l.isra.0+0xa4>
   28e1e:	9904      	ldr	r1, [sp, #16]
   28e20:	42a1      	cmp	r1, r4
   28e22:	db02      	blt.n	28e2a <_strtol_l.isra.0+0xaa>
   28e24:	2301      	movs	r3, #1
   28e26:	4378      	muls	r0, r7
   28e28:	1820      	adds	r0, r4, r0
   28e2a:	782c      	ldrb	r4, [r5, #0]
   28e2c:	3501      	adds	r5, #1
   28e2e:	e7e9      	b.n	28e04 <_strtol_l.isra.0+0x84>
   28e30:	270a      	movs	r7, #10
   28e32:	e7d5      	b.n	28de0 <_strtol_l.isra.0+0x60>
   28e34:	0021      	movs	r1, r4
   28e36:	3941      	subs	r1, #65	; 0x41
   28e38:	2919      	cmp	r1, #25
   28e3a:	d801      	bhi.n	28e40 <_strtol_l.isra.0+0xc0>
   28e3c:	3c37      	subs	r4, #55	; 0x37
   28e3e:	e7e6      	b.n	28e0e <_strtol_l.isra.0+0x8e>
   28e40:	0021      	movs	r1, r4
   28e42:	3961      	subs	r1, #97	; 0x61
   28e44:	2919      	cmp	r1, #25
   28e46:	d801      	bhi.n	28e4c <_strtol_l.isra.0+0xcc>
   28e48:	3c57      	subs	r4, #87	; 0x57
   28e4a:	e7e0      	b.n	28e0e <_strtol_l.isra.0+0x8e>
   28e4c:	1c5a      	adds	r2, r3, #1
   28e4e:	d108      	bne.n	28e62 <_strtol_l.isra.0+0xe2>
   28e50:	9a05      	ldr	r2, [sp, #20]
   28e52:	3323      	adds	r3, #35	; 0x23
   28e54:	6013      	str	r3, [r2, #0]
   28e56:	9b02      	ldr	r3, [sp, #8]
   28e58:	0030      	movs	r0, r6
   28e5a:	2b00      	cmp	r3, #0
   28e5c:	d10b      	bne.n	28e76 <_strtol_l.isra.0+0xf6>
   28e5e:	b007      	add	sp, #28
   28e60:	bdf0      	pop	{r4, r5, r6, r7, pc}
   28e62:	9a01      	ldr	r2, [sp, #4]
   28e64:	2a00      	cmp	r2, #0
   28e66:	d000      	beq.n	28e6a <_strtol_l.isra.0+0xea>
   28e68:	4240      	negs	r0, r0
   28e6a:	9a02      	ldr	r2, [sp, #8]
   28e6c:	2a00      	cmp	r2, #0
   28e6e:	d0f6      	beq.n	28e5e <_strtol_l.isra.0+0xde>
   28e70:	9a03      	ldr	r2, [sp, #12]
   28e72:	2b00      	cmp	r3, #0
   28e74:	d000      	beq.n	28e78 <_strtol_l.isra.0+0xf8>
   28e76:	1e6a      	subs	r2, r5, #1
   28e78:	9b02      	ldr	r3, [sp, #8]
   28e7a:	601a      	str	r2, [r3, #0]
   28e7c:	e7ef      	b.n	28e5e <_strtol_l.isra.0+0xde>
   28e7e:	2430      	movs	r4, #48	; 0x30
   28e80:	2f00      	cmp	r7, #0
   28e82:	d1ad      	bne.n	28de0 <_strtol_l.isra.0+0x60>
   28e84:	3708      	adds	r7, #8
   28e86:	e7ab      	b.n	28de0 <_strtol_l.isra.0+0x60>
   28e88:	7fffffff 	.word	0x7fffffff

00028e8c <strtol>:
   28e8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   28e8e:	0013      	movs	r3, r2
   28e90:	4a06      	ldr	r2, [pc, #24]	; (28eac <strtol+0x20>)
   28e92:	0005      	movs	r5, r0
   28e94:	6810      	ldr	r0, [r2, #0]
   28e96:	6a04      	ldr	r4, [r0, #32]
   28e98:	2c00      	cmp	r4, #0
   28e9a:	d100      	bne.n	28e9e <strtol+0x12>
   28e9c:	4c04      	ldr	r4, [pc, #16]	; (28eb0 <strtol+0x24>)
   28e9e:	000a      	movs	r2, r1
   28ea0:	9400      	str	r4, [sp, #0]
   28ea2:	0029      	movs	r1, r5
   28ea4:	f7ff ff6c 	bl	28d80 <_strtol_l.isra.0>
   28ea8:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   28eaa:	46c0      	nop			; (mov r8, r8)
   28eac:	2000002c 	.word	0x2000002c
   28eb0:	20000090 	.word	0x20000090

00028eb4 <__utoa>:
   28eb4:	b5f0      	push	{r4, r5, r6, r7, lr}
   28eb6:	0017      	movs	r7, r2
   28eb8:	b08f      	sub	sp, #60	; 0x3c
   28eba:	2225      	movs	r2, #37	; 0x25
   28ebc:	0006      	movs	r6, r0
   28ebe:	000d      	movs	r5, r1
   28ec0:	a804      	add	r0, sp, #16
   28ec2:	4918      	ldr	r1, [pc, #96]	; (28f24 <__utoa+0x70>)
   28ec4:	f7ff fd72 	bl	289ac <memcpy>
   28ec8:	aa04      	add	r2, sp, #16
   28eca:	1ebb      	subs	r3, r7, #2
   28ecc:	2400      	movs	r4, #0
   28ece:	9203      	str	r2, [sp, #12]
   28ed0:	2b22      	cmp	r3, #34	; 0x22
   28ed2:	d905      	bls.n	28ee0 <__utoa+0x2c>
   28ed4:	702c      	strb	r4, [r5, #0]
   28ed6:	0025      	movs	r5, r4
   28ed8:	0028      	movs	r0, r5
   28eda:	b00f      	add	sp, #60	; 0x3c
   28edc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   28ede:	9c01      	ldr	r4, [sp, #4]
   28ee0:	1c63      	adds	r3, r4, #1
   28ee2:	9301      	str	r3, [sp, #4]
   28ee4:	18eb      	adds	r3, r5, r3
   28ee6:	9300      	str	r3, [sp, #0]
   28ee8:	0030      	movs	r0, r6
   28eea:	3b01      	subs	r3, #1
   28eec:	0039      	movs	r1, r7
   28eee:	9302      	str	r3, [sp, #8]
   28ef0:	f7fd f9c2 	bl	26278 <__aeabi_uidivmod>
   28ef4:	9b03      	ldr	r3, [sp, #12]
   28ef6:	9a02      	ldr	r2, [sp, #8]
   28ef8:	5c5b      	ldrb	r3, [r3, r1]
   28efa:	0030      	movs	r0, r6
   28efc:	7013      	strb	r3, [r2, #0]
   28efe:	0039      	movs	r1, r7
   28f00:	f7fd f934 	bl	2616c <__udivsi3>
   28f04:	1e06      	subs	r6, r0, #0
   28f06:	d1ea      	bne.n	28ede <__utoa+0x2a>
   28f08:	9b00      	ldr	r3, [sp, #0]
   28f0a:	7018      	strb	r0, [r3, #0]
   28f0c:	002b      	movs	r3, r5
   28f0e:	1b5a      	subs	r2, r3, r5
   28f10:	4294      	cmp	r4, r2
   28f12:	dde1      	ble.n	28ed8 <__utoa+0x24>
   28f14:	781a      	ldrb	r2, [r3, #0]
   28f16:	5d29      	ldrb	r1, [r5, r4]
   28f18:	7019      	strb	r1, [r3, #0]
   28f1a:	552a      	strb	r2, [r5, r4]
   28f1c:	3301      	adds	r3, #1
   28f1e:	3c01      	subs	r4, #1
   28f20:	e7f5      	b.n	28f0e <__utoa+0x5a>
   28f22:	46c0      	nop			; (mov r8, r8)
   28f24:	0002aa8a 	.word	0x0002aa8a

00028f28 <utoa>:
   28f28:	b510      	push	{r4, lr}
   28f2a:	f7ff ffc3 	bl	28eb4 <__utoa>
   28f2e:	bd10      	pop	{r4, pc}

00028f30 <_vsiprintf_r>:
   28f30:	b530      	push	{r4, r5, lr}
   28f32:	b09b      	sub	sp, #108	; 0x6c
   28f34:	9100      	str	r1, [sp, #0]
   28f36:	9104      	str	r1, [sp, #16]
   28f38:	4908      	ldr	r1, [pc, #32]	; (28f5c <_vsiprintf_r+0x2c>)
   28f3a:	466d      	mov	r5, sp
   28f3c:	9102      	str	r1, [sp, #8]
   28f3e:	9105      	str	r1, [sp, #20]
   28f40:	2101      	movs	r1, #1
   28f42:	2482      	movs	r4, #130	; 0x82
   28f44:	4249      	negs	r1, r1
   28f46:	81e9      	strh	r1, [r5, #14]
   28f48:	00a4      	lsls	r4, r4, #2
   28f4a:	4669      	mov	r1, sp
   28f4c:	81ac      	strh	r4, [r5, #12]
   28f4e:	f000 f883 	bl	29058 <_svfiprintf_r>
   28f52:	2300      	movs	r3, #0
   28f54:	9a00      	ldr	r2, [sp, #0]
   28f56:	7013      	strb	r3, [r2, #0]
   28f58:	b01b      	add	sp, #108	; 0x6c
   28f5a:	bd30      	pop	{r4, r5, pc}
   28f5c:	7fffffff 	.word	0x7fffffff

00028f60 <vsiprintf>:
   28f60:	b510      	push	{r4, lr}
   28f62:	0013      	movs	r3, r2
   28f64:	000a      	movs	r2, r1
   28f66:	0001      	movs	r1, r0
   28f68:	4802      	ldr	r0, [pc, #8]	; (28f74 <vsiprintf+0x14>)
   28f6a:	6800      	ldr	r0, [r0, #0]
   28f6c:	f7ff ffe0 	bl	28f30 <_vsiprintf_r>
   28f70:	bd10      	pop	{r4, pc}
   28f72:	46c0      	nop			; (mov r8, r8)
   28f74:	2000002c 	.word	0x2000002c

00028f78 <__ascii_wctomb>:
   28f78:	1e0b      	subs	r3, r1, #0
   28f7a:	d004      	beq.n	28f86 <__ascii_wctomb+0xe>
   28f7c:	2aff      	cmp	r2, #255	; 0xff
   28f7e:	d904      	bls.n	28f8a <__ascii_wctomb+0x12>
   28f80:	238a      	movs	r3, #138	; 0x8a
   28f82:	6003      	str	r3, [r0, #0]
   28f84:	3b8b      	subs	r3, #139	; 0x8b
   28f86:	0018      	movs	r0, r3
   28f88:	4770      	bx	lr
   28f8a:	700a      	strb	r2, [r1, #0]
   28f8c:	2301      	movs	r3, #1
   28f8e:	e7fa      	b.n	28f86 <__ascii_wctomb+0xe>

00028f90 <__malloc_lock>:
   28f90:	4770      	bx	lr

00028f92 <__malloc_unlock>:
   28f92:	4770      	bx	lr

00028f94 <__ssputs_r>:
   28f94:	b5f0      	push	{r4, r5, r6, r7, lr}
   28f96:	688e      	ldr	r6, [r1, #8]
   28f98:	b085      	sub	sp, #20
   28f9a:	0007      	movs	r7, r0
   28f9c:	000c      	movs	r4, r1
   28f9e:	9203      	str	r2, [sp, #12]
   28fa0:	9301      	str	r3, [sp, #4]
   28fa2:	429e      	cmp	r6, r3
   28fa4:	d839      	bhi.n	2901a <__ssputs_r+0x86>
   28fa6:	2390      	movs	r3, #144	; 0x90
   28fa8:	898a      	ldrh	r2, [r1, #12]
   28faa:	00db      	lsls	r3, r3, #3
   28fac:	421a      	tst	r2, r3
   28fae:	d034      	beq.n	2901a <__ssputs_r+0x86>
   28fb0:	2503      	movs	r5, #3
   28fb2:	6909      	ldr	r1, [r1, #16]
   28fb4:	6823      	ldr	r3, [r4, #0]
   28fb6:	1a5b      	subs	r3, r3, r1
   28fb8:	9302      	str	r3, [sp, #8]
   28fba:	6963      	ldr	r3, [r4, #20]
   28fbc:	9802      	ldr	r0, [sp, #8]
   28fbe:	435d      	muls	r5, r3
   28fc0:	0feb      	lsrs	r3, r5, #31
   28fc2:	195d      	adds	r5, r3, r5
   28fc4:	9b01      	ldr	r3, [sp, #4]
   28fc6:	106d      	asrs	r5, r5, #1
   28fc8:	3301      	adds	r3, #1
   28fca:	181b      	adds	r3, r3, r0
   28fcc:	42ab      	cmp	r3, r5
   28fce:	d900      	bls.n	28fd2 <__ssputs_r+0x3e>
   28fd0:	001d      	movs	r5, r3
   28fd2:	0553      	lsls	r3, r2, #21
   28fd4:	d532      	bpl.n	2903c <__ssputs_r+0xa8>
   28fd6:	0029      	movs	r1, r5
   28fd8:	0038      	movs	r0, r7
   28fda:	f7ff fd63 	bl	28aa4 <_malloc_r>
   28fde:	1e06      	subs	r6, r0, #0
   28fe0:	d109      	bne.n	28ff6 <__ssputs_r+0x62>
   28fe2:	230c      	movs	r3, #12
   28fe4:	603b      	str	r3, [r7, #0]
   28fe6:	2340      	movs	r3, #64	; 0x40
   28fe8:	2001      	movs	r0, #1
   28fea:	89a2      	ldrh	r2, [r4, #12]
   28fec:	4240      	negs	r0, r0
   28fee:	4313      	orrs	r3, r2
   28ff0:	81a3      	strh	r3, [r4, #12]
   28ff2:	b005      	add	sp, #20
   28ff4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   28ff6:	9a02      	ldr	r2, [sp, #8]
   28ff8:	6921      	ldr	r1, [r4, #16]
   28ffa:	f7ff fcd7 	bl	289ac <memcpy>
   28ffe:	89a3      	ldrh	r3, [r4, #12]
   29000:	4a14      	ldr	r2, [pc, #80]	; (29054 <__ssputs_r+0xc0>)
   29002:	401a      	ands	r2, r3
   29004:	2380      	movs	r3, #128	; 0x80
   29006:	4313      	orrs	r3, r2
   29008:	81a3      	strh	r3, [r4, #12]
   2900a:	9b02      	ldr	r3, [sp, #8]
   2900c:	6126      	str	r6, [r4, #16]
   2900e:	18f6      	adds	r6, r6, r3
   29010:	6026      	str	r6, [r4, #0]
   29012:	6165      	str	r5, [r4, #20]
   29014:	9e01      	ldr	r6, [sp, #4]
   29016:	1aed      	subs	r5, r5, r3
   29018:	60a5      	str	r5, [r4, #8]
   2901a:	9b01      	ldr	r3, [sp, #4]
   2901c:	42b3      	cmp	r3, r6
   2901e:	d200      	bcs.n	29022 <__ssputs_r+0x8e>
   29020:	001e      	movs	r6, r3
   29022:	0032      	movs	r2, r6
   29024:	9903      	ldr	r1, [sp, #12]
   29026:	6820      	ldr	r0, [r4, #0]
   29028:	f7ff fcc9 	bl	289be <memmove>
   2902c:	68a3      	ldr	r3, [r4, #8]
   2902e:	2000      	movs	r0, #0
   29030:	1b9b      	subs	r3, r3, r6
   29032:	60a3      	str	r3, [r4, #8]
   29034:	6823      	ldr	r3, [r4, #0]
   29036:	199e      	adds	r6, r3, r6
   29038:	6026      	str	r6, [r4, #0]
   2903a:	e7da      	b.n	28ff2 <__ssputs_r+0x5e>
   2903c:	002a      	movs	r2, r5
   2903e:	0038      	movs	r0, r7
   29040:	f000 faa1 	bl	29586 <_realloc_r>
   29044:	1e06      	subs	r6, r0, #0
   29046:	d1e0      	bne.n	2900a <__ssputs_r+0x76>
   29048:	6921      	ldr	r1, [r4, #16]
   2904a:	0038      	movs	r0, r7
   2904c:	f7ff fce0 	bl	28a10 <_free_r>
   29050:	e7c7      	b.n	28fe2 <__ssputs_r+0x4e>
   29052:	46c0      	nop			; (mov r8, r8)
   29054:	fffffb7f 	.word	0xfffffb7f

00029058 <_svfiprintf_r>:
   29058:	b5f0      	push	{r4, r5, r6, r7, lr}
   2905a:	b09f      	sub	sp, #124	; 0x7c
   2905c:	9002      	str	r0, [sp, #8]
   2905e:	9305      	str	r3, [sp, #20]
   29060:	898b      	ldrh	r3, [r1, #12]
   29062:	000f      	movs	r7, r1
   29064:	0016      	movs	r6, r2
   29066:	061b      	lsls	r3, r3, #24
   29068:	d511      	bpl.n	2908e <_svfiprintf_r+0x36>
   2906a:	690b      	ldr	r3, [r1, #16]
   2906c:	2b00      	cmp	r3, #0
   2906e:	d10e      	bne.n	2908e <_svfiprintf_r+0x36>
   29070:	2140      	movs	r1, #64	; 0x40
   29072:	f7ff fd17 	bl	28aa4 <_malloc_r>
   29076:	6038      	str	r0, [r7, #0]
   29078:	6138      	str	r0, [r7, #16]
   2907a:	2800      	cmp	r0, #0
   2907c:	d105      	bne.n	2908a <_svfiprintf_r+0x32>
   2907e:	230c      	movs	r3, #12
   29080:	9a02      	ldr	r2, [sp, #8]
   29082:	3801      	subs	r0, #1
   29084:	6013      	str	r3, [r2, #0]
   29086:	b01f      	add	sp, #124	; 0x7c
   29088:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2908a:	2340      	movs	r3, #64	; 0x40
   2908c:	617b      	str	r3, [r7, #20]
   2908e:	2300      	movs	r3, #0
   29090:	ad06      	add	r5, sp, #24
   29092:	616b      	str	r3, [r5, #20]
   29094:	3320      	adds	r3, #32
   29096:	766b      	strb	r3, [r5, #25]
   29098:	3310      	adds	r3, #16
   2909a:	76ab      	strb	r3, [r5, #26]
   2909c:	0034      	movs	r4, r6
   2909e:	7823      	ldrb	r3, [r4, #0]
   290a0:	2b00      	cmp	r3, #0
   290a2:	d147      	bne.n	29134 <_svfiprintf_r+0xdc>
   290a4:	1ba3      	subs	r3, r4, r6
   290a6:	9304      	str	r3, [sp, #16]
   290a8:	d00d      	beq.n	290c6 <_svfiprintf_r+0x6e>
   290aa:	1ba3      	subs	r3, r4, r6
   290ac:	0032      	movs	r2, r6
   290ae:	0039      	movs	r1, r7
   290b0:	9802      	ldr	r0, [sp, #8]
   290b2:	f7ff ff6f 	bl	28f94 <__ssputs_r>
   290b6:	1c43      	adds	r3, r0, #1
   290b8:	d100      	bne.n	290bc <_svfiprintf_r+0x64>
   290ba:	e0b5      	b.n	29228 <_svfiprintf_r+0x1d0>
   290bc:	696a      	ldr	r2, [r5, #20]
   290be:	9b04      	ldr	r3, [sp, #16]
   290c0:	4694      	mov	ip, r2
   290c2:	4463      	add	r3, ip
   290c4:	616b      	str	r3, [r5, #20]
   290c6:	7823      	ldrb	r3, [r4, #0]
   290c8:	2b00      	cmp	r3, #0
   290ca:	d100      	bne.n	290ce <_svfiprintf_r+0x76>
   290cc:	e0ac      	b.n	29228 <_svfiprintf_r+0x1d0>
   290ce:	2201      	movs	r2, #1
   290d0:	2300      	movs	r3, #0
   290d2:	4252      	negs	r2, r2
   290d4:	606a      	str	r2, [r5, #4]
   290d6:	a902      	add	r1, sp, #8
   290d8:	3254      	adds	r2, #84	; 0x54
   290da:	1852      	adds	r2, r2, r1
   290dc:	3401      	adds	r4, #1
   290de:	602b      	str	r3, [r5, #0]
   290e0:	60eb      	str	r3, [r5, #12]
   290e2:	60ab      	str	r3, [r5, #8]
   290e4:	7013      	strb	r3, [r2, #0]
   290e6:	65ab      	str	r3, [r5, #88]	; 0x58
   290e8:	4e58      	ldr	r6, [pc, #352]	; (2924c <_svfiprintf_r+0x1f4>)
   290ea:	2205      	movs	r2, #5
   290ec:	7821      	ldrb	r1, [r4, #0]
   290ee:	0030      	movs	r0, r6
   290f0:	f000 fa3e 	bl	29570 <memchr>
   290f4:	1c62      	adds	r2, r4, #1
   290f6:	2800      	cmp	r0, #0
   290f8:	d120      	bne.n	2913c <_svfiprintf_r+0xe4>
   290fa:	6829      	ldr	r1, [r5, #0]
   290fc:	06cb      	lsls	r3, r1, #27
   290fe:	d504      	bpl.n	2910a <_svfiprintf_r+0xb2>
   29100:	2353      	movs	r3, #83	; 0x53
   29102:	ae02      	add	r6, sp, #8
   29104:	3020      	adds	r0, #32
   29106:	199b      	adds	r3, r3, r6
   29108:	7018      	strb	r0, [r3, #0]
   2910a:	070b      	lsls	r3, r1, #28
   2910c:	d504      	bpl.n	29118 <_svfiprintf_r+0xc0>
   2910e:	2353      	movs	r3, #83	; 0x53
   29110:	202b      	movs	r0, #43	; 0x2b
   29112:	ae02      	add	r6, sp, #8
   29114:	199b      	adds	r3, r3, r6
   29116:	7018      	strb	r0, [r3, #0]
   29118:	7823      	ldrb	r3, [r4, #0]
   2911a:	2b2a      	cmp	r3, #42	; 0x2a
   2911c:	d016      	beq.n	2914c <_svfiprintf_r+0xf4>
   2911e:	2000      	movs	r0, #0
   29120:	210a      	movs	r1, #10
   29122:	9b09      	ldr	r3, [sp, #36]	; 0x24
   29124:	7822      	ldrb	r2, [r4, #0]
   29126:	3a30      	subs	r2, #48	; 0x30
   29128:	2a09      	cmp	r2, #9
   2912a:	d955      	bls.n	291d8 <_svfiprintf_r+0x180>
   2912c:	2800      	cmp	r0, #0
   2912e:	d015      	beq.n	2915c <_svfiprintf_r+0x104>
   29130:	9309      	str	r3, [sp, #36]	; 0x24
   29132:	e013      	b.n	2915c <_svfiprintf_r+0x104>
   29134:	2b25      	cmp	r3, #37	; 0x25
   29136:	d0b5      	beq.n	290a4 <_svfiprintf_r+0x4c>
   29138:	3401      	adds	r4, #1
   2913a:	e7b0      	b.n	2909e <_svfiprintf_r+0x46>
   2913c:	2301      	movs	r3, #1
   2913e:	1b80      	subs	r0, r0, r6
   29140:	4083      	lsls	r3, r0
   29142:	6829      	ldr	r1, [r5, #0]
   29144:	0014      	movs	r4, r2
   29146:	430b      	orrs	r3, r1
   29148:	602b      	str	r3, [r5, #0]
   2914a:	e7cd      	b.n	290e8 <_svfiprintf_r+0x90>
   2914c:	9b05      	ldr	r3, [sp, #20]
   2914e:	1d18      	adds	r0, r3, #4
   29150:	681b      	ldr	r3, [r3, #0]
   29152:	9005      	str	r0, [sp, #20]
   29154:	2b00      	cmp	r3, #0
   29156:	db39      	blt.n	291cc <_svfiprintf_r+0x174>
   29158:	9309      	str	r3, [sp, #36]	; 0x24
   2915a:	0014      	movs	r4, r2
   2915c:	7823      	ldrb	r3, [r4, #0]
   2915e:	2b2e      	cmp	r3, #46	; 0x2e
   29160:	d10b      	bne.n	2917a <_svfiprintf_r+0x122>
   29162:	7863      	ldrb	r3, [r4, #1]
   29164:	1c62      	adds	r2, r4, #1
   29166:	2b2a      	cmp	r3, #42	; 0x2a
   29168:	d13e      	bne.n	291e8 <_svfiprintf_r+0x190>
   2916a:	9b05      	ldr	r3, [sp, #20]
   2916c:	3402      	adds	r4, #2
   2916e:	1d1a      	adds	r2, r3, #4
   29170:	681b      	ldr	r3, [r3, #0]
   29172:	9205      	str	r2, [sp, #20]
   29174:	2b00      	cmp	r3, #0
   29176:	db34      	blt.n	291e2 <_svfiprintf_r+0x18a>
   29178:	9307      	str	r3, [sp, #28]
   2917a:	4e35      	ldr	r6, [pc, #212]	; (29250 <_svfiprintf_r+0x1f8>)
   2917c:	7821      	ldrb	r1, [r4, #0]
   2917e:	2203      	movs	r2, #3
   29180:	0030      	movs	r0, r6
   29182:	f000 f9f5 	bl	29570 <memchr>
   29186:	2800      	cmp	r0, #0
   29188:	d006      	beq.n	29198 <_svfiprintf_r+0x140>
   2918a:	2340      	movs	r3, #64	; 0x40
   2918c:	1b80      	subs	r0, r0, r6
   2918e:	4083      	lsls	r3, r0
   29190:	682a      	ldr	r2, [r5, #0]
   29192:	3401      	adds	r4, #1
   29194:	4313      	orrs	r3, r2
   29196:	602b      	str	r3, [r5, #0]
   29198:	7821      	ldrb	r1, [r4, #0]
   2919a:	2206      	movs	r2, #6
   2919c:	482d      	ldr	r0, [pc, #180]	; (29254 <_svfiprintf_r+0x1fc>)
   2919e:	1c66      	adds	r6, r4, #1
   291a0:	7629      	strb	r1, [r5, #24]
   291a2:	f000 f9e5 	bl	29570 <memchr>
   291a6:	2800      	cmp	r0, #0
   291a8:	d046      	beq.n	29238 <_svfiprintf_r+0x1e0>
   291aa:	4b2b      	ldr	r3, [pc, #172]	; (29258 <_svfiprintf_r+0x200>)
   291ac:	2b00      	cmp	r3, #0
   291ae:	d12f      	bne.n	29210 <_svfiprintf_r+0x1b8>
   291b0:	6829      	ldr	r1, [r5, #0]
   291b2:	9b05      	ldr	r3, [sp, #20]
   291b4:	2207      	movs	r2, #7
   291b6:	05c9      	lsls	r1, r1, #23
   291b8:	d528      	bpl.n	2920c <_svfiprintf_r+0x1b4>
   291ba:	189b      	adds	r3, r3, r2
   291bc:	4393      	bics	r3, r2
   291be:	3308      	adds	r3, #8
   291c0:	9305      	str	r3, [sp, #20]
   291c2:	696b      	ldr	r3, [r5, #20]
   291c4:	9a03      	ldr	r2, [sp, #12]
   291c6:	189b      	adds	r3, r3, r2
   291c8:	616b      	str	r3, [r5, #20]
   291ca:	e767      	b.n	2909c <_svfiprintf_r+0x44>
   291cc:	425b      	negs	r3, r3
   291ce:	60eb      	str	r3, [r5, #12]
   291d0:	2302      	movs	r3, #2
   291d2:	430b      	orrs	r3, r1
   291d4:	602b      	str	r3, [r5, #0]
   291d6:	e7c0      	b.n	2915a <_svfiprintf_r+0x102>
   291d8:	434b      	muls	r3, r1
   291da:	3401      	adds	r4, #1
   291dc:	189b      	adds	r3, r3, r2
   291de:	2001      	movs	r0, #1
   291e0:	e7a0      	b.n	29124 <_svfiprintf_r+0xcc>
   291e2:	2301      	movs	r3, #1
   291e4:	425b      	negs	r3, r3
   291e6:	e7c7      	b.n	29178 <_svfiprintf_r+0x120>
   291e8:	2300      	movs	r3, #0
   291ea:	0014      	movs	r4, r2
   291ec:	200a      	movs	r0, #10
   291ee:	001a      	movs	r2, r3
   291f0:	606b      	str	r3, [r5, #4]
   291f2:	7821      	ldrb	r1, [r4, #0]
   291f4:	3930      	subs	r1, #48	; 0x30
   291f6:	2909      	cmp	r1, #9
   291f8:	d903      	bls.n	29202 <_svfiprintf_r+0x1aa>
   291fa:	2b00      	cmp	r3, #0
   291fc:	d0bd      	beq.n	2917a <_svfiprintf_r+0x122>
   291fe:	9207      	str	r2, [sp, #28]
   29200:	e7bb      	b.n	2917a <_svfiprintf_r+0x122>
   29202:	4342      	muls	r2, r0
   29204:	3401      	adds	r4, #1
   29206:	1852      	adds	r2, r2, r1
   29208:	2301      	movs	r3, #1
   2920a:	e7f2      	b.n	291f2 <_svfiprintf_r+0x19a>
   2920c:	3307      	adds	r3, #7
   2920e:	e7d5      	b.n	291bc <_svfiprintf_r+0x164>
   29210:	ab05      	add	r3, sp, #20
   29212:	9300      	str	r3, [sp, #0]
   29214:	003a      	movs	r2, r7
   29216:	4b11      	ldr	r3, [pc, #68]	; (2925c <_svfiprintf_r+0x204>)
   29218:	0029      	movs	r1, r5
   2921a:	9802      	ldr	r0, [sp, #8]
   2921c:	e000      	b.n	29220 <_svfiprintf_r+0x1c8>
   2921e:	bf00      	nop
   29220:	9003      	str	r0, [sp, #12]
   29222:	9b03      	ldr	r3, [sp, #12]
   29224:	3301      	adds	r3, #1
   29226:	d1cc      	bne.n	291c2 <_svfiprintf_r+0x16a>
   29228:	89bb      	ldrh	r3, [r7, #12]
   2922a:	980b      	ldr	r0, [sp, #44]	; 0x2c
   2922c:	065b      	lsls	r3, r3, #25
   2922e:	d400      	bmi.n	29232 <_svfiprintf_r+0x1da>
   29230:	e729      	b.n	29086 <_svfiprintf_r+0x2e>
   29232:	2001      	movs	r0, #1
   29234:	4240      	negs	r0, r0
   29236:	e726      	b.n	29086 <_svfiprintf_r+0x2e>
   29238:	ab05      	add	r3, sp, #20
   2923a:	9300      	str	r3, [sp, #0]
   2923c:	003a      	movs	r2, r7
   2923e:	4b07      	ldr	r3, [pc, #28]	; (2925c <_svfiprintf_r+0x204>)
   29240:	0029      	movs	r1, r5
   29242:	9802      	ldr	r0, [sp, #8]
   29244:	f000 f87a 	bl	2933c <_printf_i>
   29248:	e7ea      	b.n	29220 <_svfiprintf_r+0x1c8>
   2924a:	46c0      	nop			; (mov r8, r8)
   2924c:	0002abb0 	.word	0x0002abb0
   29250:	0002abb6 	.word	0x0002abb6
   29254:	0002abba 	.word	0x0002abba
   29258:	00000000 	.word	0x00000000
   2925c:	00028f95 	.word	0x00028f95

00029260 <_printf_common>:
   29260:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   29262:	0015      	movs	r5, r2
   29264:	9301      	str	r3, [sp, #4]
   29266:	688a      	ldr	r2, [r1, #8]
   29268:	690b      	ldr	r3, [r1, #16]
   2926a:	9000      	str	r0, [sp, #0]
   2926c:	000c      	movs	r4, r1
   2926e:	4293      	cmp	r3, r2
   29270:	da00      	bge.n	29274 <_printf_common+0x14>
   29272:	0013      	movs	r3, r2
   29274:	0022      	movs	r2, r4
   29276:	602b      	str	r3, [r5, #0]
   29278:	3243      	adds	r2, #67	; 0x43
   2927a:	7812      	ldrb	r2, [r2, #0]
   2927c:	2a00      	cmp	r2, #0
   2927e:	d001      	beq.n	29284 <_printf_common+0x24>
   29280:	3301      	adds	r3, #1
   29282:	602b      	str	r3, [r5, #0]
   29284:	6823      	ldr	r3, [r4, #0]
   29286:	069b      	lsls	r3, r3, #26
   29288:	d502      	bpl.n	29290 <_printf_common+0x30>
   2928a:	682b      	ldr	r3, [r5, #0]
   2928c:	3302      	adds	r3, #2
   2928e:	602b      	str	r3, [r5, #0]
   29290:	2706      	movs	r7, #6
   29292:	6823      	ldr	r3, [r4, #0]
   29294:	401f      	ands	r7, r3
   29296:	d027      	beq.n	292e8 <_printf_common+0x88>
   29298:	0023      	movs	r3, r4
   2929a:	3343      	adds	r3, #67	; 0x43
   2929c:	781b      	ldrb	r3, [r3, #0]
   2929e:	1e5a      	subs	r2, r3, #1
   292a0:	4193      	sbcs	r3, r2
   292a2:	6822      	ldr	r2, [r4, #0]
   292a4:	0692      	lsls	r2, r2, #26
   292a6:	d430      	bmi.n	2930a <_printf_common+0xaa>
   292a8:	0022      	movs	r2, r4
   292aa:	9901      	ldr	r1, [sp, #4]
   292ac:	3243      	adds	r2, #67	; 0x43
   292ae:	9800      	ldr	r0, [sp, #0]
   292b0:	9e08      	ldr	r6, [sp, #32]
   292b2:	47b0      	blx	r6
   292b4:	1c43      	adds	r3, r0, #1
   292b6:	d025      	beq.n	29304 <_printf_common+0xa4>
   292b8:	2306      	movs	r3, #6
   292ba:	6820      	ldr	r0, [r4, #0]
   292bc:	682a      	ldr	r2, [r5, #0]
   292be:	68e1      	ldr	r1, [r4, #12]
   292c0:	4003      	ands	r3, r0
   292c2:	2500      	movs	r5, #0
   292c4:	2b04      	cmp	r3, #4
   292c6:	d103      	bne.n	292d0 <_printf_common+0x70>
   292c8:	1a8d      	subs	r5, r1, r2
   292ca:	43eb      	mvns	r3, r5
   292cc:	17db      	asrs	r3, r3, #31
   292ce:	401d      	ands	r5, r3
   292d0:	68a3      	ldr	r3, [r4, #8]
   292d2:	6922      	ldr	r2, [r4, #16]
   292d4:	4293      	cmp	r3, r2
   292d6:	dd01      	ble.n	292dc <_printf_common+0x7c>
   292d8:	1a9b      	subs	r3, r3, r2
   292da:	18ed      	adds	r5, r5, r3
   292dc:	2700      	movs	r7, #0
   292de:	42bd      	cmp	r5, r7
   292e0:	d120      	bne.n	29324 <_printf_common+0xc4>
   292e2:	2000      	movs	r0, #0
   292e4:	e010      	b.n	29308 <_printf_common+0xa8>
   292e6:	3701      	adds	r7, #1
   292e8:	68e3      	ldr	r3, [r4, #12]
   292ea:	682a      	ldr	r2, [r5, #0]
   292ec:	1a9b      	subs	r3, r3, r2
   292ee:	429f      	cmp	r7, r3
   292f0:	dad2      	bge.n	29298 <_printf_common+0x38>
   292f2:	0022      	movs	r2, r4
   292f4:	2301      	movs	r3, #1
   292f6:	3219      	adds	r2, #25
   292f8:	9901      	ldr	r1, [sp, #4]
   292fa:	9800      	ldr	r0, [sp, #0]
   292fc:	9e08      	ldr	r6, [sp, #32]
   292fe:	47b0      	blx	r6
   29300:	1c43      	adds	r3, r0, #1
   29302:	d1f0      	bne.n	292e6 <_printf_common+0x86>
   29304:	2001      	movs	r0, #1
   29306:	4240      	negs	r0, r0
   29308:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   2930a:	2030      	movs	r0, #48	; 0x30
   2930c:	18e1      	adds	r1, r4, r3
   2930e:	3143      	adds	r1, #67	; 0x43
   29310:	7008      	strb	r0, [r1, #0]
   29312:	0021      	movs	r1, r4
   29314:	1c5a      	adds	r2, r3, #1
   29316:	3145      	adds	r1, #69	; 0x45
   29318:	7809      	ldrb	r1, [r1, #0]
   2931a:	18a2      	adds	r2, r4, r2
   2931c:	3243      	adds	r2, #67	; 0x43
   2931e:	3302      	adds	r3, #2
   29320:	7011      	strb	r1, [r2, #0]
   29322:	e7c1      	b.n	292a8 <_printf_common+0x48>
   29324:	0022      	movs	r2, r4
   29326:	2301      	movs	r3, #1
   29328:	321a      	adds	r2, #26
   2932a:	9901      	ldr	r1, [sp, #4]
   2932c:	9800      	ldr	r0, [sp, #0]
   2932e:	9e08      	ldr	r6, [sp, #32]
   29330:	47b0      	blx	r6
   29332:	1c43      	adds	r3, r0, #1
   29334:	d0e6      	beq.n	29304 <_printf_common+0xa4>
   29336:	3701      	adds	r7, #1
   29338:	e7d1      	b.n	292de <_printf_common+0x7e>
	...

0002933c <_printf_i>:
   2933c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2933e:	b08b      	sub	sp, #44	; 0x2c
   29340:	9206      	str	r2, [sp, #24]
   29342:	000a      	movs	r2, r1
   29344:	3243      	adds	r2, #67	; 0x43
   29346:	9307      	str	r3, [sp, #28]
   29348:	9005      	str	r0, [sp, #20]
   2934a:	9204      	str	r2, [sp, #16]
   2934c:	7e0a      	ldrb	r2, [r1, #24]
   2934e:	000c      	movs	r4, r1
   29350:	9b10      	ldr	r3, [sp, #64]	; 0x40
   29352:	2a6e      	cmp	r2, #110	; 0x6e
   29354:	d100      	bne.n	29358 <_printf_i+0x1c>
   29356:	e08f      	b.n	29478 <_printf_i+0x13c>
   29358:	d817      	bhi.n	2938a <_printf_i+0x4e>
   2935a:	2a63      	cmp	r2, #99	; 0x63
   2935c:	d02c      	beq.n	293b8 <_printf_i+0x7c>
   2935e:	d808      	bhi.n	29372 <_printf_i+0x36>
   29360:	2a00      	cmp	r2, #0
   29362:	d100      	bne.n	29366 <_printf_i+0x2a>
   29364:	e099      	b.n	2949a <_printf_i+0x15e>
   29366:	2a58      	cmp	r2, #88	; 0x58
   29368:	d054      	beq.n	29414 <_printf_i+0xd8>
   2936a:	0026      	movs	r6, r4
   2936c:	3642      	adds	r6, #66	; 0x42
   2936e:	7032      	strb	r2, [r6, #0]
   29370:	e029      	b.n	293c6 <_printf_i+0x8a>
   29372:	2a64      	cmp	r2, #100	; 0x64
   29374:	d001      	beq.n	2937a <_printf_i+0x3e>
   29376:	2a69      	cmp	r2, #105	; 0x69
   29378:	d1f7      	bne.n	2936a <_printf_i+0x2e>
   2937a:	6821      	ldr	r1, [r4, #0]
   2937c:	681a      	ldr	r2, [r3, #0]
   2937e:	0608      	lsls	r0, r1, #24
   29380:	d523      	bpl.n	293ca <_printf_i+0x8e>
   29382:	1d11      	adds	r1, r2, #4
   29384:	6019      	str	r1, [r3, #0]
   29386:	6815      	ldr	r5, [r2, #0]
   29388:	e025      	b.n	293d6 <_printf_i+0x9a>
   2938a:	2a73      	cmp	r2, #115	; 0x73
   2938c:	d100      	bne.n	29390 <_printf_i+0x54>
   2938e:	e088      	b.n	294a2 <_printf_i+0x166>
   29390:	d808      	bhi.n	293a4 <_printf_i+0x68>
   29392:	2a6f      	cmp	r2, #111	; 0x6f
   29394:	d029      	beq.n	293ea <_printf_i+0xae>
   29396:	2a70      	cmp	r2, #112	; 0x70
   29398:	d1e7      	bne.n	2936a <_printf_i+0x2e>
   2939a:	2220      	movs	r2, #32
   2939c:	6809      	ldr	r1, [r1, #0]
   2939e:	430a      	orrs	r2, r1
   293a0:	6022      	str	r2, [r4, #0]
   293a2:	e003      	b.n	293ac <_printf_i+0x70>
   293a4:	2a75      	cmp	r2, #117	; 0x75
   293a6:	d020      	beq.n	293ea <_printf_i+0xae>
   293a8:	2a78      	cmp	r2, #120	; 0x78
   293aa:	d1de      	bne.n	2936a <_printf_i+0x2e>
   293ac:	0022      	movs	r2, r4
   293ae:	2178      	movs	r1, #120	; 0x78
   293b0:	3245      	adds	r2, #69	; 0x45
   293b2:	7011      	strb	r1, [r2, #0]
   293b4:	4a6c      	ldr	r2, [pc, #432]	; (29568 <_printf_i+0x22c>)
   293b6:	e030      	b.n	2941a <_printf_i+0xde>
   293b8:	000e      	movs	r6, r1
   293ba:	681a      	ldr	r2, [r3, #0]
   293bc:	3642      	adds	r6, #66	; 0x42
   293be:	1d11      	adds	r1, r2, #4
   293c0:	6019      	str	r1, [r3, #0]
   293c2:	6813      	ldr	r3, [r2, #0]
   293c4:	7033      	strb	r3, [r6, #0]
   293c6:	2301      	movs	r3, #1
   293c8:	e079      	b.n	294be <_printf_i+0x182>
   293ca:	0649      	lsls	r1, r1, #25
   293cc:	d5d9      	bpl.n	29382 <_printf_i+0x46>
   293ce:	1d11      	adds	r1, r2, #4
   293d0:	6019      	str	r1, [r3, #0]
   293d2:	2300      	movs	r3, #0
   293d4:	5ed5      	ldrsh	r5, [r2, r3]
   293d6:	2d00      	cmp	r5, #0
   293d8:	da03      	bge.n	293e2 <_printf_i+0xa6>
   293da:	232d      	movs	r3, #45	; 0x2d
   293dc:	9a04      	ldr	r2, [sp, #16]
   293de:	426d      	negs	r5, r5
   293e0:	7013      	strb	r3, [r2, #0]
   293e2:	4b62      	ldr	r3, [pc, #392]	; (2956c <_printf_i+0x230>)
   293e4:	270a      	movs	r7, #10
   293e6:	9303      	str	r3, [sp, #12]
   293e8:	e02f      	b.n	2944a <_printf_i+0x10e>
   293ea:	6820      	ldr	r0, [r4, #0]
   293ec:	6819      	ldr	r1, [r3, #0]
   293ee:	0605      	lsls	r5, r0, #24
   293f0:	d503      	bpl.n	293fa <_printf_i+0xbe>
   293f2:	1d08      	adds	r0, r1, #4
   293f4:	6018      	str	r0, [r3, #0]
   293f6:	680d      	ldr	r5, [r1, #0]
   293f8:	e005      	b.n	29406 <_printf_i+0xca>
   293fa:	0640      	lsls	r0, r0, #25
   293fc:	d5f9      	bpl.n	293f2 <_printf_i+0xb6>
   293fe:	680d      	ldr	r5, [r1, #0]
   29400:	1d08      	adds	r0, r1, #4
   29402:	6018      	str	r0, [r3, #0]
   29404:	b2ad      	uxth	r5, r5
   29406:	4b59      	ldr	r3, [pc, #356]	; (2956c <_printf_i+0x230>)
   29408:	2708      	movs	r7, #8
   2940a:	9303      	str	r3, [sp, #12]
   2940c:	2a6f      	cmp	r2, #111	; 0x6f
   2940e:	d018      	beq.n	29442 <_printf_i+0x106>
   29410:	270a      	movs	r7, #10
   29412:	e016      	b.n	29442 <_printf_i+0x106>
   29414:	3145      	adds	r1, #69	; 0x45
   29416:	700a      	strb	r2, [r1, #0]
   29418:	4a54      	ldr	r2, [pc, #336]	; (2956c <_printf_i+0x230>)
   2941a:	9203      	str	r2, [sp, #12]
   2941c:	681a      	ldr	r2, [r3, #0]
   2941e:	6821      	ldr	r1, [r4, #0]
   29420:	1d10      	adds	r0, r2, #4
   29422:	6018      	str	r0, [r3, #0]
   29424:	6815      	ldr	r5, [r2, #0]
   29426:	0608      	lsls	r0, r1, #24
   29428:	d522      	bpl.n	29470 <_printf_i+0x134>
   2942a:	07cb      	lsls	r3, r1, #31
   2942c:	d502      	bpl.n	29434 <_printf_i+0xf8>
   2942e:	2320      	movs	r3, #32
   29430:	4319      	orrs	r1, r3
   29432:	6021      	str	r1, [r4, #0]
   29434:	2710      	movs	r7, #16
   29436:	2d00      	cmp	r5, #0
   29438:	d103      	bne.n	29442 <_printf_i+0x106>
   2943a:	2320      	movs	r3, #32
   2943c:	6822      	ldr	r2, [r4, #0]
   2943e:	439a      	bics	r2, r3
   29440:	6022      	str	r2, [r4, #0]
   29442:	0023      	movs	r3, r4
   29444:	2200      	movs	r2, #0
   29446:	3343      	adds	r3, #67	; 0x43
   29448:	701a      	strb	r2, [r3, #0]
   2944a:	6863      	ldr	r3, [r4, #4]
   2944c:	60a3      	str	r3, [r4, #8]
   2944e:	2b00      	cmp	r3, #0
   29450:	db5c      	blt.n	2950c <_printf_i+0x1d0>
   29452:	2204      	movs	r2, #4
   29454:	6821      	ldr	r1, [r4, #0]
   29456:	4391      	bics	r1, r2
   29458:	6021      	str	r1, [r4, #0]
   2945a:	2d00      	cmp	r5, #0
   2945c:	d158      	bne.n	29510 <_printf_i+0x1d4>
   2945e:	9e04      	ldr	r6, [sp, #16]
   29460:	2b00      	cmp	r3, #0
   29462:	d064      	beq.n	2952e <_printf_i+0x1f2>
   29464:	0026      	movs	r6, r4
   29466:	9b03      	ldr	r3, [sp, #12]
   29468:	3642      	adds	r6, #66	; 0x42
   2946a:	781b      	ldrb	r3, [r3, #0]
   2946c:	7033      	strb	r3, [r6, #0]
   2946e:	e05e      	b.n	2952e <_printf_i+0x1f2>
   29470:	0648      	lsls	r0, r1, #25
   29472:	d5da      	bpl.n	2942a <_printf_i+0xee>
   29474:	b2ad      	uxth	r5, r5
   29476:	e7d8      	b.n	2942a <_printf_i+0xee>
   29478:	6809      	ldr	r1, [r1, #0]
   2947a:	681a      	ldr	r2, [r3, #0]
   2947c:	0608      	lsls	r0, r1, #24
   2947e:	d505      	bpl.n	2948c <_printf_i+0x150>
   29480:	1d11      	adds	r1, r2, #4
   29482:	6019      	str	r1, [r3, #0]
   29484:	6813      	ldr	r3, [r2, #0]
   29486:	6962      	ldr	r2, [r4, #20]
   29488:	601a      	str	r2, [r3, #0]
   2948a:	e006      	b.n	2949a <_printf_i+0x15e>
   2948c:	0649      	lsls	r1, r1, #25
   2948e:	d5f7      	bpl.n	29480 <_printf_i+0x144>
   29490:	1d11      	adds	r1, r2, #4
   29492:	6019      	str	r1, [r3, #0]
   29494:	6813      	ldr	r3, [r2, #0]
   29496:	8aa2      	ldrh	r2, [r4, #20]
   29498:	801a      	strh	r2, [r3, #0]
   2949a:	2300      	movs	r3, #0
   2949c:	9e04      	ldr	r6, [sp, #16]
   2949e:	6123      	str	r3, [r4, #16]
   294a0:	e054      	b.n	2954c <_printf_i+0x210>
   294a2:	681a      	ldr	r2, [r3, #0]
   294a4:	1d11      	adds	r1, r2, #4
   294a6:	6019      	str	r1, [r3, #0]
   294a8:	6816      	ldr	r6, [r2, #0]
   294aa:	2100      	movs	r1, #0
   294ac:	6862      	ldr	r2, [r4, #4]
   294ae:	0030      	movs	r0, r6
   294b0:	f000 f85e 	bl	29570 <memchr>
   294b4:	2800      	cmp	r0, #0
   294b6:	d001      	beq.n	294bc <_printf_i+0x180>
   294b8:	1b80      	subs	r0, r0, r6
   294ba:	6060      	str	r0, [r4, #4]
   294bc:	6863      	ldr	r3, [r4, #4]
   294be:	6123      	str	r3, [r4, #16]
   294c0:	2300      	movs	r3, #0
   294c2:	9a04      	ldr	r2, [sp, #16]
   294c4:	7013      	strb	r3, [r2, #0]
   294c6:	e041      	b.n	2954c <_printf_i+0x210>
   294c8:	6923      	ldr	r3, [r4, #16]
   294ca:	0032      	movs	r2, r6
   294cc:	9906      	ldr	r1, [sp, #24]
   294ce:	9805      	ldr	r0, [sp, #20]
   294d0:	9d07      	ldr	r5, [sp, #28]
   294d2:	47a8      	blx	r5
   294d4:	1c43      	adds	r3, r0, #1
   294d6:	d043      	beq.n	29560 <_printf_i+0x224>
   294d8:	6823      	ldr	r3, [r4, #0]
   294da:	2500      	movs	r5, #0
   294dc:	079b      	lsls	r3, r3, #30
   294de:	d40f      	bmi.n	29500 <_printf_i+0x1c4>
   294e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   294e2:	68e0      	ldr	r0, [r4, #12]
   294e4:	4298      	cmp	r0, r3
   294e6:	da3d      	bge.n	29564 <_printf_i+0x228>
   294e8:	0018      	movs	r0, r3
   294ea:	e03b      	b.n	29564 <_printf_i+0x228>
   294ec:	0022      	movs	r2, r4
   294ee:	2301      	movs	r3, #1
   294f0:	3219      	adds	r2, #25
   294f2:	9906      	ldr	r1, [sp, #24]
   294f4:	9805      	ldr	r0, [sp, #20]
   294f6:	9e07      	ldr	r6, [sp, #28]
   294f8:	47b0      	blx	r6
   294fa:	1c43      	adds	r3, r0, #1
   294fc:	d030      	beq.n	29560 <_printf_i+0x224>
   294fe:	3501      	adds	r5, #1
   29500:	68e3      	ldr	r3, [r4, #12]
   29502:	9a09      	ldr	r2, [sp, #36]	; 0x24
   29504:	1a9b      	subs	r3, r3, r2
   29506:	429d      	cmp	r5, r3
   29508:	dbf0      	blt.n	294ec <_printf_i+0x1b0>
   2950a:	e7e9      	b.n	294e0 <_printf_i+0x1a4>
   2950c:	2d00      	cmp	r5, #0
   2950e:	d0a9      	beq.n	29464 <_printf_i+0x128>
   29510:	9e04      	ldr	r6, [sp, #16]
   29512:	0028      	movs	r0, r5
   29514:	0039      	movs	r1, r7
   29516:	f7fc feaf 	bl	26278 <__aeabi_uidivmod>
   2951a:	9b03      	ldr	r3, [sp, #12]
   2951c:	3e01      	subs	r6, #1
   2951e:	5c5b      	ldrb	r3, [r3, r1]
   29520:	0028      	movs	r0, r5
   29522:	7033      	strb	r3, [r6, #0]
   29524:	0039      	movs	r1, r7
   29526:	f7fc fe21 	bl	2616c <__udivsi3>
   2952a:	1e05      	subs	r5, r0, #0
   2952c:	d1f1      	bne.n	29512 <_printf_i+0x1d6>
   2952e:	2f08      	cmp	r7, #8
   29530:	d109      	bne.n	29546 <_printf_i+0x20a>
   29532:	6823      	ldr	r3, [r4, #0]
   29534:	07db      	lsls	r3, r3, #31
   29536:	d506      	bpl.n	29546 <_printf_i+0x20a>
   29538:	6863      	ldr	r3, [r4, #4]
   2953a:	6922      	ldr	r2, [r4, #16]
   2953c:	4293      	cmp	r3, r2
   2953e:	dc02      	bgt.n	29546 <_printf_i+0x20a>
   29540:	2330      	movs	r3, #48	; 0x30
   29542:	3e01      	subs	r6, #1
   29544:	7033      	strb	r3, [r6, #0]
   29546:	9b04      	ldr	r3, [sp, #16]
   29548:	1b9b      	subs	r3, r3, r6
   2954a:	6123      	str	r3, [r4, #16]
   2954c:	9b07      	ldr	r3, [sp, #28]
   2954e:	aa09      	add	r2, sp, #36	; 0x24
   29550:	9300      	str	r3, [sp, #0]
   29552:	0021      	movs	r1, r4
   29554:	9b06      	ldr	r3, [sp, #24]
   29556:	9805      	ldr	r0, [sp, #20]
   29558:	f7ff fe82 	bl	29260 <_printf_common>
   2955c:	1c43      	adds	r3, r0, #1
   2955e:	d1b3      	bne.n	294c8 <_printf_i+0x18c>
   29560:	2001      	movs	r0, #1
   29562:	4240      	negs	r0, r0
   29564:	b00b      	add	sp, #44	; 0x2c
   29566:	bdf0      	pop	{r4, r5, r6, r7, pc}
   29568:	0002abd2 	.word	0x0002abd2
   2956c:	0002abc1 	.word	0x0002abc1

00029570 <memchr>:
   29570:	b2c9      	uxtb	r1, r1
   29572:	1882      	adds	r2, r0, r2
   29574:	4290      	cmp	r0, r2
   29576:	d101      	bne.n	2957c <memchr+0xc>
   29578:	2000      	movs	r0, #0
   2957a:	4770      	bx	lr
   2957c:	7803      	ldrb	r3, [r0, #0]
   2957e:	428b      	cmp	r3, r1
   29580:	d0fb      	beq.n	2957a <memchr+0xa>
   29582:	3001      	adds	r0, #1
   29584:	e7f6      	b.n	29574 <memchr+0x4>

00029586 <_realloc_r>:
   29586:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   29588:	0007      	movs	r7, r0
   2958a:	000d      	movs	r5, r1
   2958c:	0016      	movs	r6, r2
   2958e:	2900      	cmp	r1, #0
   29590:	d105      	bne.n	2959e <_realloc_r+0x18>
   29592:	0011      	movs	r1, r2
   29594:	f7ff fa86 	bl	28aa4 <_malloc_r>
   29598:	0004      	movs	r4, r0
   2959a:	0020      	movs	r0, r4
   2959c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2959e:	2a00      	cmp	r2, #0
   295a0:	d103      	bne.n	295aa <_realloc_r+0x24>
   295a2:	f7ff fa35 	bl	28a10 <_free_r>
   295a6:	0034      	movs	r4, r6
   295a8:	e7f7      	b.n	2959a <_realloc_r+0x14>
   295aa:	f000 f812 	bl	295d2 <_malloc_usable_size_r>
   295ae:	002c      	movs	r4, r5
   295b0:	4286      	cmp	r6, r0
   295b2:	d9f2      	bls.n	2959a <_realloc_r+0x14>
   295b4:	0031      	movs	r1, r6
   295b6:	0038      	movs	r0, r7
   295b8:	f7ff fa74 	bl	28aa4 <_malloc_r>
   295bc:	1e04      	subs	r4, r0, #0
   295be:	d0ec      	beq.n	2959a <_realloc_r+0x14>
   295c0:	0029      	movs	r1, r5
   295c2:	0032      	movs	r2, r6
   295c4:	f7ff f9f2 	bl	289ac <memcpy>
   295c8:	0029      	movs	r1, r5
   295ca:	0038      	movs	r0, r7
   295cc:	f7ff fa20 	bl	28a10 <_free_r>
   295d0:	e7e3      	b.n	2959a <_realloc_r+0x14>

000295d2 <_malloc_usable_size_r>:
   295d2:	1f0b      	subs	r3, r1, #4
   295d4:	681b      	ldr	r3, [r3, #0]
   295d6:	1f18      	subs	r0, r3, #4
   295d8:	2b00      	cmp	r3, #0
   295da:	da01      	bge.n	295e0 <_malloc_usable_size_r+0xe>
   295dc:	580b      	ldr	r3, [r1, r0]
   295de:	18c0      	adds	r0, r0, r3
   295e0:	4770      	bx	lr
   295e2:	0000      	movs	r0, r0
   295e4:	30303030 	.word	0x30303030
   295e8:	30303030 	.word	0x30303030
   295ec:	00003030 	.word	0x00003030
   295f0:	2e707466 	.word	0x2e707466
   295f4:	76697264 	.word	0x76697264
   295f8:	2e716865 	.word	0x2e716865
   295fc:	006d6f63 	.word	0x006d6f63
   29600:	7269662f 	.word	0x7269662f
   29604:	7261776d 	.word	0x7261776d
   29608:	00002f65 	.word	0x00002f65
   2960c:	75686172 	.word	0x75686172
   29610:	61726e6c 	.word	0x61726e6c
   29614:	646f6874 	.word	0x646f6874
   29618:	006c636b 	.word	0x006c636b
   2961c:	34333231 	.word	0x34333231
   29620:	38373635 	.word	0x38373635
   29624:	00000039 	.word	0x00000039
   29628:	6d726966 	.word	0x6d726966
   2962c:	65726177 	.word	0x65726177
   29630:	6e69622e 	.word	0x6e69622e
   29634:	00000000 	.word	0x00000000
   29638:	31343037 	.word	0x31343037
   2963c:	39363931 	.word	0x39363931
   29640:	00003935 	.word	0x00003935
   29644:	38393637 	.word	0x38393637
   29648:	32393334 	.word	0x32393334
   2964c:	00003130 	.word	0x00003130
   29650:	33383337 	.word	0x33383337
   29654:	32343136 	.word	0x32343136
   29658:	00003431 	.word	0x00003431
   2965c:	33383337 	.word	0x33383337
   29660:	36323236 	.word	0x36323236
   29664:	00003837 	.word	0x00003837
   29668:	36383539 	.word	0x36383539
   2966c:	39353331 	.word	0x39353331
   29670:	00003837 	.word	0x00003837
   29674:	00003a50 	.word	0x00003a50
   29678:	00003a53 	.word	0x00003a53
   2967c:	0000000a 	.word	0x0000000a
   29680:	00006425 	.word	0x00006425
   29684:	204d5347 	.word	0x204d5347
   29688:	656d6954 	.word	0x656d6954
   2968c:	0074756f 	.word	0x0074756f
   29690:	4f525245 	.word	0x4f525245
   29694:	00000052 	.word	0x00000052
   29698:	00004b4f 	.word	0x00004b4f
   2969c:	000d5441 	.word	0x000d5441
   296a0:	492b5441 	.word	0x492b5441
   296a4:	303d4346 	.word	0x303d4346
   296a8:	000d302c 	.word	0x000d302c
   296ac:	4552432b 	.word	0x4552432b
   296b0:	30203a47 	.word	0x30203a47
   296b4:	0000312c 	.word	0x0000312c
   296b8:	432b5441 	.word	0x432b5441
   296bc:	3f474552 	.word	0x3f474552
   296c0:	0000000d 	.word	0x0000000d
   296c4:	4552432b 	.word	0x4552432b
   296c8:	30203a47 	.word	0x30203a47
   296cc:	0000352c 	.word	0x0000352c
   296d0:	492b5441 	.word	0x492b5441
   296d4:	253d5250 	.word	0x253d5250
   296d8:	00000d64 	.word	0x00000d64
   296dc:	492b5441 	.word	0x492b5441
   296e0:	303d5250 	.word	0x303d5250
   296e4:	0000000d 	.word	0x0000000d
   296e8:	432b5441 	.word	0x432b5441
   296ec:	3d474552 	.word	0x3d474552
   296f0:	00000d31 	.word	0x00000d31
   296f4:	432b5441 	.word	0x432b5441
   296f8:	3d4e5546 	.word	0x3d4e5546
   296fc:	00000d31 	.word	0x00000d31
   29700:	5546432b 	.word	0x5546432b
   29704:	31203a4e 	.word	0x31203a4e
   29708:	00000000 	.word	0x00000000
   2970c:	432b5441 	.word	0x432b5441
   29710:	3f4e5546 	.word	0x3f4e5546
   29714:	0000000d 	.word	0x0000000d
   29718:	432b5441 	.word	0x432b5441
   2971c:	3d4e5546 	.word	0x3d4e5546
   29720:	00000d30 	.word	0x00000d30
   29724:	5546432b 	.word	0x5546432b
   29728:	30203a4e 	.word	0x30203a4e
   2972c:	00000000 	.word	0x00000000
   29730:	432b5441 	.word	0x432b5441
   29734:	3d4e5546 	.word	0x3d4e5546
   29738:	0d312c31 	.word	0x0d312c31
   2973c:	00000000 	.word	0x00000000
   29740:	4950432b 	.word	0x4950432b
   29744:	52203a4e 	.word	0x52203a4e
   29748:	59444145 	.word	0x59444145
   2974c:	00000000 	.word	0x00000000
   29750:	432b5441 	.word	0x432b5441
   29754:	3f4e4950 	.word	0x3f4e4950
   29758:	0000000d 	.word	0x0000000d
   2975c:	432b5441 	.word	0x432b5441
   29760:	4144474d 	.word	0x4144474d
   29764:	4544223d 	.word	0x4544223d
   29768:	4c41204c 	.word	0x4c41204c
   2976c:	000d224c 	.word	0x000d224c
   29770:	57265441 	.word	0x57265441
   29774:	0000000d 	.word	0x0000000d
   29778:	432b5441 	.word	0x432b5441
   2977c:	3d50494c 	.word	0x3d50494c
   29780:	00000d31 	.word	0x00000d31
   29784:	432b5441 	.word	0x432b5441
   29788:	3d504c4f 	.word	0x3d504c4f
   2978c:	00000d31 	.word	0x00000d31
   29790:	432b5441 	.word	0x432b5441
   29794:	4b4c4353 	.word	0x4b4c4353
   29798:	000d313d 	.word	0x000d313d
   2979c:	432b5441 	.word	0x432b5441
   297a0:	3f504c4f 	.word	0x3f504c4f
   297a4:	0000000d 	.word	0x0000000d
   297a8:	4c4f432b 	.word	0x4c4f432b
   297ac:	00000050 	.word	0x00000050
   297b0:	0000003a 	.word	0x0000003a
   297b4:	0000002c 	.word	0x0000002c
   297b8:	432b5441 	.word	0x432b5441
   297bc:	3d43434c 	.word	0x3d43434c
   297c0:	00000d31 	.word	0x00000d31
   297c4:	46265441 	.word	0x46265441
   297c8:	0000000d 	.word	0x0000000d
   297cc:	30455441 	.word	0x30455441
   297d0:	0000000d 	.word	0x0000000d
   297d4:	432b5441 	.word	0x432b5441
   297d8:	3d46474d 	.word	0x3d46474d
   297dc:	00000d31 	.word	0x00000d31
   297e0:	432b5441 	.word	0x432b5441
   297e4:	3d504d53 	.word	0x3d504d53
   297e8:	312c3731 	.word	0x312c3731
   297ec:	302c3736 	.word	0x302c3736
   297f0:	000d302c 	.word	0x000d302c
   297f4:	432b5441 	.word	0x432b5441
   297f8:	3d534153 	.word	0x3d534153
   297fc:	00000d30 	.word	0x00000d30
   29800:	432b5441 	.word	0x432b5441
   29804:	3d534153 	.word	0x3d534153
   29808:	00000d31 	.word	0x00000d31
   2980c:	432b5441 	.word	0x432b5441
   29810:	000d5153 	.word	0x000d5153
   29814:	00003939 	.word	0x00003939
   29818:	432b5441 	.word	0x432b5441
   2981c:	3d494d4e 	.word	0x3d494d4e
   29820:	2c312c32 	.word	0x2c312c32
   29824:	2c302c30 	.word	0x2c302c30
   29828:	00000d30 	.word	0x00000d30
   2982c:	432b5441 	.word	0x432b5441
   29830:	3d494d4e 	.word	0x3d494d4e
   29834:	2c302c31 	.word	0x2c302c31
   29838:	2c302c30 	.word	0x2c302c30
   2983c:	00000d30 	.word	0x00000d30
   29840:	452b5441 	.word	0x452b5441
   29844:	534e5558 	.word	0x534e5558
   29848:	223d4c4f 	.word	0x223d4c4f
   2984c:	2c225153 	.word	0x2c225153
   29850:	00000d31 	.word	0x00000d31
   29854:	452b5441 	.word	0x452b5441
   29858:	534e5558 	.word	0x534e5558
   2985c:	223d4c4f 	.word	0x223d4c4f
   29860:	2c225153 	.word	0x2c225153
   29864:	00000d30 	.word	0x00000d30
   29868:	432b5441 	.word	0x432b5441
   2986c:	3d53474d 	.word	0x3d53474d
   29870:	22732522 	.word	0x22732522
   29874:	0000000d 	.word	0x0000000d
   29878:	0000003e 	.word	0x0000003e
   2987c:	0d1a7325 	.word	0x0d1a7325
   29880:	00000000 	.word	0x00000000
   29884:	432b5441 	.word	0x432b5441
   29888:	3d4c474d 	.word	0x3d4c474d
   2988c:	43455222 	.word	0x43455222
   29890:	524e5520 	.word	0x524e5520
   29894:	22444145 	.word	0x22444145
   29898:	0000000d 	.word	0x0000000d
   2989c:	432b5441 	.word	0x432b5441
   298a0:	3d4c474d 	.word	0x3d4c474d
   298a4:	43455222 	.word	0x43455222
   298a8:	41455220 	.word	0x41455220
   298ac:	000d2244 	.word	0x000d2244
   298b0:	432b5441 	.word	0x432b5441
   298b4:	3d4c474d 	.word	0x3d4c474d
   298b8:	4c4c4122 	.word	0x4c4c4122
   298bc:	00000d22 	.word	0x00000d22
   298c0:	4c474d43 	.word	0x4c474d43
   298c4:	00000000 	.word	0x00000000
   298c8:	432b5441 	.word	0x432b5441
   298cc:	3d52474d 	.word	0x3d52474d
   298d0:	000d6425 	.word	0x000d6425
   298d4:	474d432b 	.word	0x474d432b
   298d8:	00000052 	.word	0x00000052
   298dc:	25445441 	.word	0x25445441
   298e0:	000d3b73 	.word	0x000d3b73
   298e4:	0d415441 	.word	0x0d415441
   298e8:	00000000 	.word	0x00000000
   298ec:	432b5441 	.word	0x432b5441
   298f0:	3d53544c 	.word	0x3d53544c
   298f4:	00000d31 	.word	0x00000d31
   298f8:	432b5441 	.word	0x432b5441
   298fc:	3d53544c 	.word	0x3d53544c
   29900:	00000d30 	.word	0x00000d30
   29904:	442b5441 	.word	0x442b5441
   29908:	3d544544 	.word	0x3d544544
   2990c:	00000d31 	.word	0x00000d31
   29910:	562b5441 	.word	0x562b5441
   29914:	223d5354 	.word	0x223d5354
   29918:	0d227325 	.word	0x0d227325
   2991c:	00000000 	.word	0x00000000
   29920:	432b5441 	.word	0x432b5441
   29924:	0d505548 	.word	0x0d505548
   29928:	00000000 	.word	0x00000000
   2992c:	432b5441 	.word	0x432b5441
   29930:	3d415743 	.word	0x3d415743
   29934:	0d302c30 	.word	0x0d302c30
   29938:	00000000 	.word	0x00000000
   2993c:	472b5441 	.word	0x472b5441
   29940:	55424d53 	.word	0x55424d53
   29944:	313d5953 	.word	0x313d5953
   29948:	0000000d 	.word	0x0000000d
   2994c:	472b5441 	.word	0x472b5441
   29950:	55424d53 	.word	0x55424d53
   29954:	303d5953 	.word	0x303d5953
   29958:	0000000d 	.word	0x0000000d
   2995c:	432b5441 	.word	0x432b5441
   29960:	3d434552 	.word	0x3d434552
   29964:	00000d35 	.word	0x00000d35
   29968:	432b5441 	.word	0x432b5441
   2996c:	3d434552 	.word	0x3d434552
   29970:	43222c34 	.word	0x43222c34
   29974:	73555c3a 	.word	0x73555c3a
   29978:	255c7265 	.word	0x255c7265
   2997c:	6d612e63 	.word	0x6d612e63
   29980:	302c2272 	.word	0x302c2272
   29984:	2c30392c 	.word	0x2c30392c
   29988:	000d7525 	.word	0x000d7525
   2998c:	432b5441 	.word	0x432b5441
   29990:	3f4b4c43 	.word	0x3f4b4c43
   29994:	0000000d 	.word	0x0000000d
   29998:	00000022 	.word	0x00000022
   2999c:	0000002f 	.word	0x0000002f
   299a0:	0000002b 	.word	0x0000002b
   299a4:	544d432b 	.word	0x544d432b
   299a8:	00003a49 	.word	0x00003a49
   299ac:	474e4952 	.word	0x474e4952
   299b0:	00000000 	.word	0x00000000
   299b4:	5153432b 	.word	0x5153432b
   299b8:	0000004e 	.word	0x0000004e
   299bc:	494c432b 	.word	0x494c432b
   299c0:	00000050 	.word	0x00000050
   299c4:	43204f4e 	.word	0x43204f4e
   299c8:	49525241 	.word	0x49525241
   299cc:	00005245 	.word	0x00005245
   299d0:	59535542 	.word	0x59535542
   299d4:	00000000 	.word	0x00000000
   299d8:	41204f4e 	.word	0x41204f4e
   299dc:	4557534e 	.word	0x4557534e
   299e0:	00000052 	.word	0x00000052
   299e4:	4d54442b 	.word	0x4d54442b
   299e8:	00003a46 	.word	0x00003a46
   299ec:	4552432b 	.word	0x4552432b
   299f0:	30203a43 	.word	0x30203a43
   299f4:	00000000 	.word	0x00000000
   299f8:	532b5441 	.word	0x532b5441
   299fc:	52425041 	.word	0x52425041
   29a00:	312c333d 	.word	0x312c333d
   29a04:	4f43222c 	.word	0x4f43222c
   29a08:	5059544e 	.word	0x5059544e
   29a0c:	222c2245 	.word	0x222c2245
   29a10:	53525047 	.word	0x53525047
   29a14:	00000d22 	.word	0x00000d22
   29a18:	432b5441 	.word	0x432b5441
   29a1c:	3f53504f 	.word	0x3f53504f
   29a20:	0000000d 	.word	0x0000000d
   29a24:	504f432b 	.word	0x504f432b
   29a28:	00003a53 	.word	0x00003a53
   29a2c:	41454449 	.word	0x41454449
   29a30:	00000000 	.word	0x00000000
   29a34:	532b5441 	.word	0x532b5441
   29a38:	52425041 	.word	0x52425041
   29a3c:	312c333d 	.word	0x312c333d
   29a40:	5041222c 	.word	0x5041222c
   29a44:	222c224e 	.word	0x222c224e
   29a48:	65746e69 	.word	0x65746e69
   29a4c:	74656e72 	.word	0x74656e72
   29a50:	00000d22 	.word	0x00000d22
   29a54:	41444f56 	.word	0x41444f56
   29a58:	00000000 	.word	0x00000000
   29a5c:	532b5441 	.word	0x532b5441
   29a60:	52425041 	.word	0x52425041
   29a64:	312c333d 	.word	0x312c333d
   29a68:	5041222c 	.word	0x5041222c
   29a6c:	222c224e 	.word	0x222c224e
   29a70:	22777777 	.word	0x22777777
   29a74:	0000000d 	.word	0x0000000d
   29a78:	4c4e5342 	.word	0x4c4e5342
   29a7c:	00000000 	.word	0x00000000
   29a80:	532b5441 	.word	0x532b5441
   29a84:	52425041 	.word	0x52425041
   29a88:	312c333d 	.word	0x312c333d
   29a8c:	5041222c 	.word	0x5041222c
   29a90:	222c224e 	.word	0x222c224e
   29a94:	6c6e7362 	.word	0x6c6e7362
   29a98:	2274656e 	.word	0x2274656e
   29a9c:	0000000d 	.word	0x0000000d
   29aa0:	54524941 	.word	0x54524941
   29aa4:	00004c45 	.word	0x00004c45
   29aa8:	532b5441 	.word	0x532b5441
   29aac:	52425041 	.word	0x52425041
   29ab0:	312c333d 	.word	0x312c333d
   29ab4:	5041222c 	.word	0x5041222c
   29ab8:	222c224e 	.word	0x222c224e
   29abc:	74726961 	.word	0x74726961
   29ac0:	70676c65 	.word	0x70676c65
   29ac4:	632e7372 	.word	0x632e7372
   29ac8:	0d226d6f 	.word	0x0d226d6f
   29acc:	00000000 	.word	0x00000000
   29ad0:	532b5441 	.word	0x532b5441
   29ad4:	52425041 	.word	0x52425041
   29ad8:	312c333d 	.word	0x312c333d
   29adc:	5041222c 	.word	0x5041222c
   29ae0:	222c224e 	.word	0x222c224e
   29ae4:	00000d22 	.word	0x00000d22
   29ae8:	532b5441 	.word	0x532b5441
   29aec:	52425041 	.word	0x52425041
   29af0:	312c323d 	.word	0x312c323d
   29af4:	0000000d 	.word	0x0000000d
   29af8:	5041532b 	.word	0x5041532b
   29afc:	203a5242 	.word	0x203a5242
   29b00:	00302c31 	.word	0x00302c31
   29b04:	5041532b 	.word	0x5041532b
   29b08:	203a5242 	.word	0x203a5242
   29b0c:	00312c31 	.word	0x00312c31
   29b10:	5041532b 	.word	0x5041532b
   29b14:	203a5242 	.word	0x203a5242
   29b18:	00322c31 	.word	0x00322c31
   29b1c:	5041532b 	.word	0x5041532b
   29b20:	203a5242 	.word	0x203a5242
   29b24:	00332c31 	.word	0x00332c31
   29b28:	532b5441 	.word	0x532b5441
   29b2c:	52425041 	.word	0x52425041
   29b30:	312c313d 	.word	0x312c313d
   29b34:	0000000d 	.word	0x0000000d
   29b38:	532b5441 	.word	0x532b5441
   29b3c:	52425041 	.word	0x52425041
   29b40:	312c303d 	.word	0x312c303d
   29b44:	0000000d 	.word	0x0000000d
   29b48:	462b5441 	.word	0x462b5441
   29b4c:	49435054 	.word	0x49435054
   29b50:	0d313d44 	.word	0x0d313d44
   29b54:	00000000 	.word	0x00000000
   29b58:	462b5441 	.word	0x462b5441
   29b5c:	45535054 	.word	0x45535054
   29b60:	223d5652 	.word	0x223d5652
   29b64:	0d227325 	.word	0x0d227325
   29b68:	00000000 	.word	0x00000000
   29b6c:	462b5441 	.word	0x462b5441
   29b70:	4e555054 	.word	0x4e555054
   29b74:	7325223d 	.word	0x7325223d
   29b78:	00000d22 	.word	0x00000d22
   29b7c:	462b5441 	.word	0x462b5441
   29b80:	57505054 	.word	0x57505054
   29b84:	7325223d 	.word	0x7325223d
   29b88:	00000d22 	.word	0x00000d22
   29b8c:	462b5441 	.word	0x462b5441
   29b90:	45475054 	.word	0x45475054
   29b94:	4d414e54 	.word	0x4d414e54
   29b98:	25223d45 	.word	0x25223d45
   29b9c:	000d2273 	.word	0x000d2273
   29ba0:	462b5441 	.word	0x462b5441
   29ba4:	45475054 	.word	0x45475054
   29ba8:	54415054 	.word	0x54415054
   29bac:	25223d48 	.word	0x25223d48
   29bb0:	000d2273 	.word	0x000d2273
   29bb4:	5054462b 	.word	0x5054462b
   29bb8:	455a4953 	.word	0x455a4953
   29bbc:	2c31203a 	.word	0x2c31203a
   29bc0:	00000000 	.word	0x00000000
   29bc4:	462b5441 	.word	0x462b5441
   29bc8:	49535054 	.word	0x49535054
   29bcc:	000d455a 	.word	0x000d455a
   29bd0:	5054462b 	.word	0x5054462b
   29bd4:	3a544547 	.word	0x3a544547
   29bd8:	312c3120 	.word	0x312c3120
   29bdc:	00000000 	.word	0x00000000
   29be0:	462b5441 	.word	0x462b5441
   29be4:	45475054 	.word	0x45475054
   29be8:	0d313d54 	.word	0x0d313d54
   29bec:	00000000 	.word	0x00000000
   29bf0:	462b5441 	.word	0x462b5441
   29bf4:	45475054 	.word	0x45475054
   29bf8:	2c323d54 	.word	0x2c323d54
   29bfc:	000d6425 	.word	0x000d6425
   29c00:	5054462b 	.word	0x5054462b
   29c04:	3a544547 	.word	0x3a544547
   29c08:	00000020 	.word	0x00000020
   29c0c:	434c432b 	.word	0x434c432b
   29c10:	31203a43 	.word	0x31203a43
   29c14:	322c302c 	.word	0x322c302c
   29c18:	00000000 	.word	0x00000000
   29c1c:	434c432b 	.word	0x434c432b
   29c20:	31203a43 	.word	0x31203a43
   29c24:	332c302c 	.word	0x332c302c
   29c28:	00000000 	.word	0x00000000
   29c2c:	434c432b 	.word	0x434c432b
   29c30:	31203a43 	.word	0x31203a43
   29c34:	302c302c 	.word	0x302c302c
   29c38:	00000000 	.word	0x00000000
   29c3c:	434c432b 	.word	0x434c432b
   29c40:	31203a43 	.word	0x31203a43
   29c44:	362c302c 	.word	0x362c302c
	...
   29c50:	4e4f4d41 	.word	0x4e4f4d41
   29c54:	00000000 	.word	0x00000000
   29c58:	55475250 	.word	0x55475250
   29c5c:	00004450 	.word	0x00004450
   29c60:	54494157 	.word	0x54494157
   29c64:	00000000 	.word	0x00000000
   29c68:	204d5347 	.word	0x204d5347
   29c6c:	4c4c4143 	.word	0x4c4c4143
   29c70:	49415720 	.word	0x49415720
   29c74:	4e495454 	.word	0x4e495454
   29c78:	49442047 	.word	0x49442047
   29c7c:	4c424153 	.word	0x4c424153
   29c80:	203a2045 	.word	0x203a2045
   29c84:	43435553 	.word	0x43435553
   29c88:	00535345 	.word	0x00535345
   29c8c:	204d5347 	.word	0x204d5347
   29c90:	4c4c4143 	.word	0x4c4c4143
   29c94:	49415720 	.word	0x49415720
   29c98:	4e495454 	.word	0x4e495454
   29c9c:	49442047 	.word	0x49442047
   29ca0:	4c424153 	.word	0x4c424153
   29ca4:	203a2045 	.word	0x203a2045
   29ca8:	4c494146 	.word	0x4c494146
   29cac:	00004445 	.word	0x00004445
   29cb0:	41454c43 	.word	0x41454c43
   29cb4:	4c4c4152 	.word	0x4c4c4152
   29cb8:	00000000 	.word	0x00000000
   29cbc:	204c4c41 	.word	0x204c4c41
   29cc0:	52455355 	.word	0x52455355
   29cc4:	4d554e20 	.word	0x4d554e20
   29cc8:	53524542 	.word	0x53524542
   29ccc:	454c4320 	.word	0x454c4320
   29cd0:	44455241 	.word	0x44455241
   29cd4:	00000000 	.word	0x00000000
   29cd8:	41464544 	.word	0x41464544
   29cdc:	00544c55 	.word	0x00544c55
   29ce0:	204c4c41 	.word	0x204c4c41
   29ce4:	54544553 	.word	0x54544553
   29ce8:	53474e49 	.word	0x53474e49
   29cec:	45524120 	.word	0x45524120
   29cf0:	574f4e20 	.word	0x574f4e20
   29cf4:	43414620 	.word	0x43414620
   29cf8:	59524f54 	.word	0x59524f54
   29cfc:	46454420 	.word	0x46454420
   29d00:	544c5541 	.word	0x544c5541
   29d04:	00000000 	.word	0x00000000
   29d08:	004d554e 	.word	0x004d554e
   29d0c:	4e206f4e 	.word	0x4e206f4e
   29d10:	65626d75 	.word	0x65626d75
   29d14:	45207372 	.word	0x45207372
   29d18:	74736978 	.word	0x74736978
   29d1c:	00000073 	.word	0x00000073
   29d20:	45534552 	.word	0x45534552
   29d24:	00000054 	.word	0x00000054
   29d28:	00444944 	.word	0x00444944
   29d2c:	32422020 	.word	0x32422020
   29d30:	30322d39 	.word	0x30322d39
   29d34:	2d39302d 	.word	0x2d39302d
   29d38:	20203931 	.word	0x20203931
   29d3c:	00000000 	.word	0x00000000
   29d40:	20756c25 	.word	0x20756c25
   29d44:	00007325 	.word	0x00007325
   29d48:	4f545541 	.word	0x4f545541
   29d4c:	00004e4f 	.word	0x00004e4f
   29d50:	4f544f4d 	.word	0x4f544f4d
   29d54:	55412052 	.word	0x55412052
   29d58:	4e4f4f54 	.word	0x4e4f4f54
   29d5c:	004e4f20 	.word	0x004e4f20
   29d60:	4f545541 	.word	0x4f545541
   29d64:	0046464f 	.word	0x0046464f
   29d68:	4f544f4d 	.word	0x4f544f4d
   29d6c:	55412052 	.word	0x55412052
   29d70:	4e4f4f54 	.word	0x4e4f4f54
   29d74:	46464f20 	.word	0x46464f20
   29d78:	00000000 	.word	0x00000000
   29d7c:	50594257 	.word	0x50594257
   29d80:	00004e4f 	.word	0x00004e4f
   29d84:	45544157 	.word	0x45544157
   29d88:	59422052 	.word	0x59422052
   29d8c:	53534150 	.word	0x53534150
   29d90:	004e4f20 	.word	0x004e4f20
   29d94:	50594257 	.word	0x50594257
   29d98:	0046464f 	.word	0x0046464f
   29d9c:	45544157 	.word	0x45544157
   29da0:	59422052 	.word	0x59422052
   29da4:	53534150 	.word	0x53534150
   29da8:	46464f20 	.word	0x46464f20
   29dac:	00000000 	.word	0x00000000
   29db0:	4f505053 	.word	0x4f505053
   29db4:	0000004e 	.word	0x0000004e
   29db8:	20505053 	.word	0x20505053
   29dbc:	00004e4f 	.word	0x00004e4f
   29dc0:	4f505053 	.word	0x4f505053
   29dc4:	00004646 	.word	0x00004646
   29dc8:	20505053 	.word	0x20505053
   29dcc:	0046464f 	.word	0x0046464f
   29dd0:	56505053 	.word	0x56505053
   29dd4:	00000000 	.word	0x00000000
   29dd8:	20505053 	.word	0x20505053
   29ddc:	544c4f56 	.word	0x544c4f56
   29de0:	54455320 	.word	0x54455320
   29de4:	00000000 	.word	0x00000000
   29de8:	4f514553 	.word	0x4f514553
   29dec:	0000004e 	.word	0x0000004e
   29df0:	50514553 	.word	0x50514553
   29df4:	004e4f20 	.word	0x004e4f20
   29df8:	4f514553 	.word	0x4f514553
   29dfc:	00004646 	.word	0x00004646
   29e00:	50514553 	.word	0x50514553
   29e04:	46464f20 	.word	0x46464f20
   29e08:	00000000 	.word	0x00000000
   29e0c:	00444e44 	.word	0x00444e44
   29e10:	20444e44 	.word	0x20444e44
   29e14:	0000203a 	.word	0x0000203a
   29e18:	004b4f20 	.word	0x004b4f20
   29e1c:	4b424446 	.word	0x4b424446
   29e20:	00000000 	.word	0x00000000
   29e24:	4b424446 	.word	0x4b424446
   29e28:	25203a20 	.word	0x25203a20
   29e2c:	00000064 	.word	0x00000064
   29e30:	454d4f55 	.word	0x454d4f55
   29e34:	444f4854 	.word	0x444f4854
   29e38:	00000000 	.word	0x00000000
   29e3c:	454d4f55 	.word	0x454d4f55
   29e40:	444f4854 	.word	0x444f4854
   29e44:	00203a20 	.word	0x00203a20
   29e48:	5942564d 	.word	0x5942564d
   29e4c:	004e4f50 	.word	0x004e4f50
   29e50:	4f544f4d 	.word	0x4f544f4d
   29e54:	4f562052 	.word	0x4f562052
   29e58:	4741544c 	.word	0x4741544c
   29e5c:	59422045 	.word	0x59422045
   29e60:	53534150 	.word	0x53534150
   29e64:	004e4f20 	.word	0x004e4f20
   29e68:	5942564d 	.word	0x5942564d
   29e6c:	46464f50 	.word	0x46464f50
   29e70:	00000000 	.word	0x00000000
   29e74:	4f544f4d 	.word	0x4f544f4d
   29e78:	4f562052 	.word	0x4f562052
   29e7c:	4741544c 	.word	0x4741544c
   29e80:	59422045 	.word	0x59422045
   29e84:	53534150 	.word	0x53534150
   29e88:	46464f20 	.word	0x46464f20
   29e8c:	00000000 	.word	0x00000000
   29e90:	5942564d 	.word	0x5942564d
   29e94:	00005450 	.word	0x00005450
   29e98:	6f746f4d 	.word	0x6f746f4d
   29e9c:	6f562072 	.word	0x6f562072
   29ea0:	6761746c 	.word	0x6761746c
   29ea4:	79422065 	.word	0x79422065
   29ea8:	73736170 	.word	0x73736170
   29eac:	6d695420 	.word	0x6d695420
   29eb0:	65532065 	.word	0x65532065
   29eb4:	6f742074 	.word	0x6f742074
   29eb8:	00642520 	.word	0x00642520
   29ebc:	50534552 	.word	0x50534552
   29ec0:	00000000 	.word	0x00000000
   29ec4:	50534552 	.word	0x50534552
   29ec8:	00203a20 	.word	0x00203a20
   29ecc:	0052564f 	.word	0x0052564f
   29ed0:	2052564f 	.word	0x2052564f
   29ed4:	20544553 	.word	0x20544553
   29ed8:	00004b4f 	.word	0x00004b4f
   29edc:	52444e55 	.word	0x52444e55
   29ee0:	00000000 	.word	0x00000000
   29ee4:	52444e55 	.word	0x52444e55
   29ee8:	54455320 	.word	0x54455320
   29eec:	004b4f20 	.word	0x004b4f20
   29ef0:	41545341 	.word	0x41545341
   29ef4:	00000054 	.word	0x00000054
   29ef8:	75253a43 	.word	0x75253a43
   29efc:	0a75252e 	.word	0x0a75252e
   29f00:	75253a4e 	.word	0x75253a4e
   29f04:	253a4f0a 	.word	0x253a4f0a
   29f08:	3a550a75 	.word	0x3a550a75
   29f0c:	4f0a7525 	.word	0x4f0a7525
   29f10:	75253a50 	.word	0x75253a50
   29f14:	3a50550a 	.word	0x3a50550a
   29f18:	00007525 	.word	0x00007525
   29f1c:	4f46564f 	.word	0x4f46564f
   29f20:	0000004e 	.word	0x0000004e
   29f24:	56455250 	.word	0x56455250
   29f28:	20544e45 	.word	0x20544e45
   29f2c:	5245564f 	.word	0x5245564f
   29f30:	574f4c46 	.word	0x574f4c46
   29f34:	54455320 	.word	0x54455320
   29f38:	474e4954 	.word	0x474e4954
   29f3c:	004e4f20 	.word	0x004e4f20
   29f40:	4f46564f 	.word	0x4f46564f
   29f44:	00004646 	.word	0x00004646
   29f48:	56455250 	.word	0x56455250
   29f4c:	20544e45 	.word	0x20544e45
   29f50:	5245564f 	.word	0x5245564f
   29f54:	574f4c46 	.word	0x574f4c46
   29f58:	54455320 	.word	0x54455320
   29f5c:	474e4954 	.word	0x474e4954
   29f60:	46464f20 	.word	0x46464f20
   29f64:	00000000 	.word	0x00000000
   29f68:	4f4d324d 	.word	0x4f4d324d
   29f6c:	0000004e 	.word	0x0000004e
   29f70:	204d324d 	.word	0x204d324d
   29f74:	6e727554 	.word	0x6e727554
   29f78:	4f206465 	.word	0x4f206465
   29f7c:	52202c6e 	.word	0x52202c6e
   29f80:	746f6d65 	.word	0x746f6d65
   29f84:	754e2065 	.word	0x754e2065
   29f88:	7265626d 	.word	0x7265626d
   29f8c:	726c4120 	.word	0x726c4120
   29f90:	79646165 	.word	0x79646165
   29f94:	72655620 	.word	0x72655620
   29f98:	65696669 	.word	0x65696669
   29f9c:	00000064 	.word	0x00000064
   29fa0:	6f727245 	.word	0x6f727245
   29fa4:	4d203a72 	.word	0x4d203a72
   29fa8:	52204d32 	.word	0x52204d32
   29fac:	746f6d65 	.word	0x746f6d65
   29fb0:	754e2065 	.word	0x754e2065
   29fb4:	7265626d 	.word	0x7265626d
   29fb8:	746f4e20 	.word	0x746f4e20
   29fbc:	65725020 	.word	0x65725020
   29fc0:	746e6573 	.word	0x746e6573
   29fc4:	00000000 	.word	0x00000000
   29fc8:	4f4d324d 	.word	0x4f4d324d
   29fcc:	00004646 	.word	0x00004646
   29fd0:	204d324d 	.word	0x204d324d
   29fd4:	54544553 	.word	0x54544553
   29fd8:	20474e49 	.word	0x20474e49
   29fdc:	0046464f 	.word	0x0046464f
   29fe0:	54415453 	.word	0x54415453
   29fe4:	00005355 	.word	0x00005355
   29fe8:	45544c41 	.word	0x45544c41
   29fec:	54414e52 	.word	0x54414e52
   29ff0:	554e2045 	.word	0x554e2045
   29ff4:	5245424d 	.word	0x5245424d
   29ff8:	004e4f20 	.word	0x004e4f20
   29ffc:	45544c41 	.word	0x45544c41
   2a000:	54414e52 	.word	0x54414e52
   2a004:	554e2045 	.word	0x554e2045
   2a008:	5245424d 	.word	0x5245424d
   2a00c:	544f4e20 	.word	0x544f4e20
   2a010:	45525020 	.word	0x45525020
   2a014:	544e4553 	.word	0x544e4553
   2a018:	00000000 	.word	0x00000000
   2a01c:	464f4d41 	.word	0x464f4d41
   2a020:	00000046 	.word	0x00000046
   2a024:	45544c41 	.word	0x45544c41
   2a028:	54414e52 	.word	0x54414e52
   2a02c:	4f4d2045 	.word	0x4f4d2045
   2a030:	454c4942 	.word	0x454c4942
   2a034:	4d554e20 	.word	0x4d554e20
   2a038:	20524542 	.word	0x20524542
   2a03c:	0046464f 	.word	0x0046464f
   2a040:	464f434e 	.word	0x464f434e
   2a044:	00000046 	.word	0x00000046
   2a048:	43204f4e 	.word	0x43204f4e
   2a04c:	204c4c41 	.word	0x204c4c41
   2a050:	54544553 	.word	0x54544553
   2a054:	20474e49 	.word	0x20474e49
   2a058:	0046464f 	.word	0x0046464f
   2a05c:	54544547 	.word	0x54544547
   2a060:	00454d49 	.word	0x00454d49
   2a064:	454d4954 	.word	0x454d4954
   2a068:	25203a20 	.word	0x25203a20
   2a06c:	75253a75 	.word	0x75253a75
   2a070:	00000000 	.word	0x00000000
   2a074:	54544553 	.word	0x54544553
   2a078:	00454d49 	.word	0x00454d49
   2a07c:	4954434e 	.word	0x4954434e
   2a080:	0000454d 	.word	0x0000454d
   2a084:	0000002d 	.word	0x0000002d
   2a088:	0000003a 	.word	0x0000003a
   2a08c:	43204f4e 	.word	0x43204f4e
   2a090:	204c4c41 	.word	0x204c4c41
   2a094:	494d4954 	.word	0x494d4954
   2a098:	2053474e 	.word	0x2053474e
   2a09c:	00544553 	.word	0x00544553
   2a0a0:	47415453 	.word	0x47415453
   2a0a4:	00000045 	.word	0x00000045
   2a0a8:	4c4c4143 	.word	0x4c4c4143
   2a0ac:	41545320 	.word	0x41545320
   2a0b0:	53204547 	.word	0x53204547
   2a0b4:	54205445 	.word	0x54205445
   2a0b8:	203a204f 	.word	0x203a204f
   2a0bc:	00006425 	.word	0x00006425
   2a0c0:	52415453 	.word	0x52415453
   2a0c4:	454d4954 	.word	0x454d4954
   2a0c8:	00000000 	.word	0x00000000
   2a0cc:	41545320 	.word	0x41545320
   2a0d0:	4d495452 	.word	0x4d495452
   2a0d4:	45532045 	.word	0x45532045
   2a0d8:	4f542054 	.word	0x4f542054
   2a0dc:	25203a20 	.word	0x25203a20
   2a0e0:	00000064 	.word	0x00000064
   2a0e4:	4f545541 	.word	0x4f545541
   2a0e8:	454d4954 	.word	0x454d4954
   2a0ec:	00000000 	.word	0x00000000
   2a0f0:	54554120 	.word	0x54554120
   2a0f4:	4d49544f 	.word	0x4d49544f
   2a0f8:	45532045 	.word	0x45532045
   2a0fc:	4f542054 	.word	0x4f542054
   2a100:	25203a20 	.word	0x25203a20
   2a104:	00000064 	.word	0x00000064
   2a108:	004c4142 	.word	0x004c4142
   2a10c:	002b504d 	.word	0x002b504d
   2a110:	4f4e2050 	.word	0x4f4e2050
   2a114:	44444120 	.word	0x44444120
   2a118:	00444544 	.word	0x00444544
   2a11c:	002b534d 	.word	0x002b534d
   2a120:	4f4e2053 	.word	0x4f4e2053
   2a124:	44444120 	.word	0x44444120
   2a128:	00444544 	.word	0x00444544
   2a12c:	00002b4d 	.word	0x00002b4d
   2a130:	49424f4d 	.word	0x49424f4d
   2a134:	4e20454c 	.word	0x4e20454c
   2a138:	00003a4f 	.word	0x00003a4f
   2a13c:	0000000a 	.word	0x0000000a
   2a140:	45444441 	.word	0x45444441
   2a144:	55532044 	.word	0x55532044
   2a148:	53454343 	.word	0x53454343
   2a14c:	4c554653 	.word	0x4c554653
   2a150:	0000594c 	.word	0x0000594c
   2a154:	00002d4d 	.word	0x00002d4d
   2a158:	4f4d4552 	.word	0x4f4d4552
   2a15c:	20444556 	.word	0x20444556
   2a160:	43435553 	.word	0x43435553
   2a164:	46535345 	.word	0x46535345
   2a168:	594c4c55 	.word	0x594c4c55
   2a16c:	00000000 	.word	0x00000000
   2a170:	002b4d41 	.word	0x002b4d41
   2a174:	45544c41 	.word	0x45544c41
   2a178:	54414e52 	.word	0x54414e52
   2a17c:	4f4d2045 	.word	0x4f4d2045
   2a180:	454c4942 	.word	0x454c4942
   2a184:	204f4e20 	.word	0x204f4e20
   2a188:	20444441 	.word	0x20444441
   2a18c:	43435553 	.word	0x43435553
   2a190:	00535345 	.word	0x00535345
   2a194:	002b4d4d 	.word	0x002b4d4d
   2a198:	204d324d 	.word	0x204d324d
   2a19c:	202e4f4e 	.word	0x202e4f4e
   2a1a0:	45444441 	.word	0x45444441
   2a1a4:	00000044 	.word	0x00000044
   2a1a8:	002b524d 	.word	0x002b524d
   2a1ac:	204d324d 	.word	0x204d324d
   2a1b0:	4f4d4552 	.word	0x4f4d4552
   2a1b4:	4e204554 	.word	0x4e204554
   2a1b8:	41202e4f 	.word	0x41202e4f
   2a1bc:	44454444 	.word	0x44454444
   2a1c0:	00000000 	.word	0x00000000
   2a1c4:	4f525245 	.word	0x4f525245
   2a1c8:	203a2052 	.word	0x203a2052
   2a1cc:	00007325 	.word	0x00007325
   2a1d0:	00004e4f 	.word	0x00004e4f
   2a1d4:	48502032 	.word	0x48502032
   2a1d8:	00455341 	.word	0x00455341
   2a1dc:	00004b4f 	.word	0x00004b4f
   2a1e0:	4f525245 	.word	0x4f525245
   2a1e4:	00000052 	.word	0x00000052
   2a1e8:	203a5952 	.word	0x203a5952
   2a1ec:	59206425 	.word	0x59206425
   2a1f0:	25203a42 	.word	0x25203a42
   2a1f4:	52422064 	.word	0x52422064
   2a1f8:	6425203a 	.word	0x6425203a
   2a1fc:	3a43410a 	.word	0x3a43410a
   2a200:	0a732520 	.word	0x0a732520
   2a204:	75716553 	.word	0x75716553
   2a208:	65636e65 	.word	0x65636e65
   2a20c:	7325203a 	.word	0x7325203a
   2a210:	746f4d0a 	.word	0x746f4d0a
   2a214:	203a726f 	.word	0x203a726f
   2a218:	430a7325 	.word	0x430a7325
   2a21c:	65727275 	.word	0x65727275
   2a220:	203a746e 	.word	0x203a746e
   2a224:	0a416425 	.word	0x0a416425
   2a228:	7774654e 	.word	0x7774654e
   2a22c:	3a6b726f 	.word	0x3a6b726f
   2a230:	00642520 	.word	0x00642520
   2a234:	304d4d56 	.word	0x304d4d56
   2a238:	00000031 	.word	0x00000031
   2a23c:	4f544f4d 	.word	0x4f544f4d
   2a240:	00002052 	.word	0x00002052
   2a244:	0046464f 	.word	0x0046464f
   2a248:	7e75257e 	.word	0x7e75257e
   2a24c:	00000000 	.word	0x00000000
   2a250:	20572f46 	.word	0x20572f46
   2a254:	61647055 	.word	0x61647055
   2a258:	43206574 	.word	0x43206574
   2a25c:	6c706d6f 	.word	0x6c706d6f
   2a260:	64657465 	.word	0x64657465
   2a264:	00000000 	.word	0x00000000
   2a268:	20572f46 	.word	0x20572f46
   2a26c:	61647055 	.word	0x61647055
   2a270:	45206574 	.word	0x45206574
   2a274:	726f7272 	.word	0x726f7272
   2a278:	00000000 	.word	0x00000000
   2a27c:	30303030 	.word	0x30303030
   2a280:	30303030 	.word	0x30303030
   2a284:	00003030 	.word	0x00003030
   2a288:	494d4441 	.word	0x494d4441
   2a28c:	0000004e 	.word	0x0000004e
   2a290:	00000023 	.word	0x00000023
   2a294:	30524d56 	.word	0x30524d56
   2a298:	00000032 	.word	0x00000032
   2a29c:	204d324d 	.word	0x204d324d
   2a2a0:	4e525554 	.word	0x4e525554
   2a2a4:	4f204445 	.word	0x4f204445
   2a2a8:	0000004e 	.word	0x0000004e
   2a2ac:	0000203a 	.word	0x0000203a
   2a2b0:	000174f4 	.word	0x000174f4
   2a2b4:	000175da 	.word	0x000175da
   2a2b8:	000175da 	.word	0x000175da
   2a2bc:	000174f4 	.word	0x000174f4
   2a2c0:	000175da 	.word	0x000175da
   2a2c4:	000175da 	.word	0x000175da
   2a2c8:	000175da 	.word	0x000175da
   2a2cc:	000175da 	.word	0x000175da
   2a2d0:	000175da 	.word	0x000175da
   2a2d4:	000175da 	.word	0x000175da
   2a2d8:	000175da 	.word	0x000175da
   2a2dc:	000175da 	.word	0x000175da
   2a2e0:	000174f4 	.word	0x000174f4
   2a2e4:	000175da 	.word	0x000175da
   2a2e8:	000175da 	.word	0x000175da
   2a2ec:	000175da 	.word	0x000175da
   2a2f0:	000174b6 	.word	0x000174b6
   2a2f4:	000175da 	.word	0x000175da
   2a2f8:	000174f4 	.word	0x000174f4
   2a2fc:	49524b20 	.word	0x49524b20
   2a300:	414e4853 	.word	0x414e4853
   2a304:	4d532020 	.word	0x4d532020
   2a308:	20545241 	.word	0x20545241
   2a30c:	00000000 	.word	0x00000000
   2a310:	54202020 	.word	0x54202020
   2a314:	4e484345 	.word	0x4e484345
   2a318:	474f4c4f 	.word	0x474f4c4f
   2a31c:	20202059 	.word	0x20202059
   2a320:	00000000 	.word	0x00000000
   2a324:	4f532020 	.word	0x4f532020
   2a328:	41575446 	.word	0x41575446
   2a32c:	56204552 	.word	0x56204552
   2a330:	20205245 	.word	0x20205245
   2a334:	00000000 	.word	0x00000000
   2a338:	32422020 	.word	0x32422020
   2a33c:	30322d39 	.word	0x30322d39
   2a340:	2d39302d 	.word	0x2d39302d
   2a344:	20203931 	.word	0x20203931
   2a348:	00000000 	.word	0x00000000
   2a34c:	00007325 	.word	0x00007325
   2a350:	74696e49 	.word	0x74696e49
   2a354:	696c6169 	.word	0x696c6169
   2a358:	676e697a 	.word	0x676e697a
   2a35c:	202e2e2e 	.word	0x202e2e2e
   2a360:	00000000 	.word	0x00000000
   2a364:	4d4d4f43 	.word	0x4d4d4f43
   2a368:	45444e41 	.word	0x45444e41
   2a36c:	32762052 	.word	0x32762052
   2a370:	20202020 	.word	0x20202020
   2a374:	00000000 	.word	0x00000000
   2a378:	4e4f4850 	.word	0x4e4f4850
   2a37c:	54532045 	.word	0x54532045
   2a380:	53555441 	.word	0x53555441
   2a384:	20202020 	.word	0x20202020
   2a388:	00000000 	.word	0x00000000
   2a38c:	20204e4f 	.word	0x20204e4f
   2a390:	20202020 	.word	0x20202020
   2a394:	20202020 	.word	0x20202020
   2a398:	20202020 	.word	0x20202020
   2a39c:	00000000 	.word	0x00000000
   2a3a0:	2046464f 	.word	0x2046464f
   2a3a4:	20202020 	.word	0x20202020
   2a3a8:	20202020 	.word	0x20202020
   2a3ac:	20202020 	.word	0x20202020
   2a3b0:	00000000 	.word	0x00000000
   2a3b4:	20595256 	.word	0x20595256
   2a3b8:	59562020 	.word	0x59562020
   2a3bc:	20202042 	.word	0x20202042
   2a3c0:	20524256 	.word	0x20524256
   2a3c4:	00000000 	.word	0x00000000
   2a3c8:	6c333025 	.word	0x6c333025
   2a3cc:	20202075 	.word	0x20202075
   2a3d0:	00000000 	.word	0x00000000
   2a3d4:	6c333025 	.word	0x6c333025
   2a3d8:	00002075 	.word	0x00002075
   2a3dc:	4f544f4d 	.word	0x4f544f4d
   2a3e0:	203a2052 	.word	0x203a2052
   2a3e4:	46464f20 	.word	0x46464f20
   2a3e8:	20202020 	.word	0x20202020
   2a3ec:	00000000 	.word	0x00000000
   2a3f0:	4f544f4d 	.word	0x4f544f4d
   2a3f4:	203a2052 	.word	0x203a2052
   2a3f8:	204e4f20 	.word	0x204e4f20
   2a3fc:	20202020 	.word	0x20202020
   2a400:	00000000 	.word	0x00000000
   2a404:	20202020 	.word	0x20202020
   2a408:	20202020 	.word	0x20202020
   2a40c:	20202020 	.word	0x20202020
   2a410:	20202020 	.word	0x20202020
   2a414:	00000000 	.word	0x00000000
   2a418:	4f544f4d 	.word	0x4f544f4d
   2a41c:	55432052 	.word	0x55432052
   2a420:	4e455252 	.word	0x4e455252
   2a424:	20203a54 	.word	0x20203a54
   2a428:	00000000 	.word	0x00000000
   2a42c:	6c333025 	.word	0x6c333025
   2a430:	30252e75 	.word	0x30252e75
   2a434:	20756c32 	.word	0x20756c32
   2a438:	20202020 	.word	0x20202020
   2a43c:	20202020 	.word	0x20202020
   2a440:	00202020 	.word	0x00202020
   2a444:	48502033 	.word	0x48502033
   2a448:	20455341 	.word	0x20455341
   2a44c:	3a514553 	.word	0x3a514553
   2a450:	00000000 	.word	0x00000000
   2a454:	204b4f20 	.word	0x204b4f20
   2a458:	00000000 	.word	0x00000000
   2a45c:	52524520 	.word	0x52524520
   2a460:	00000000 	.word	0x00000000
   2a464:	53414850 	.word	0x53414850
   2a468:	54532045 	.word	0x54532045
   2a46c:	3a455441 	.word	0x3a455441
   2a470:	00000000 	.word	0x00000000
   2a474:	48503320 	.word	0x48503320
   2a478:	00000020 	.word	0x00000020
   2a47c:	48503220 	.word	0x48503220
   2a480:	00000020 	.word	0x00000020
   2a484:	46464f20 	.word	0x46464f20
   2a488:	00000000 	.word	0x00000000
   2a48c:	454c2d4f 	.word	0x454c2d4f
   2a490:	204c4556 	.word	0x204c4556
   2a494:	0000203a 	.word	0x0000203a
   2a498:	48474948 	.word	0x48474948
   2a49c:	00002020 	.word	0x00002020
   2a4a0:	2044494d 	.word	0x2044494d
   2a4a4:	00002020 	.word	0x00002020
   2a4a8:	20574f4c 	.word	0x20574f4c
   2a4ac:	00002020 	.word	0x00002020
   2a4b0:	454c2d55 	.word	0x454c2d55
   2a4b4:	204c4556 	.word	0x204c4556
   2a4b8:	0000203a 	.word	0x0000203a
   2a4bc:	43545243 	.word	0x43545243
   2a4c0:	0000204c 	.word	0x0000204c
   2a4c4:	74746142 	.word	0x74746142
   2a4c8:	50797265 	.word	0x50797265
   2a4cc:	203a7265 	.word	0x203a7265
   2a4d0:	25257525 	.word	0x25257525
   2a4d4:	00000020 	.word	0x00000020
   2a4d8:	4e474953 	.word	0x4e474953
   2a4dc:	3a204c41 	.word	0x3a204c41
   2a4e0:	00000020 	.word	0x00000020
   2a4e4:	20202020 	.word	0x20202020
   2a4e8:	00202020 	.word	0x00202020
   2a4ec:	4f434e49 	.word	0x4f434e49
   2a4f0:	474e494d 	.word	0x474e494d
   2a4f4:	4c414320 	.word	0x4c414320
   2a4f8:	202e2e4c 	.word	0x202e2e4c
   2a4fc:	00000000 	.word	0x00000000
   2a500:	36312d25 	.word	0x36312d25
   2a504:	00000073 	.word	0x00000073
   2a508:	43204e49 	.word	0x43204e49
   2a50c:	2e4c4c41 	.word	0x2e4c4c41
   2a510:	20202e2e 	.word	0x20202e2e
   2a514:	20202020 	.word	0x20202020
   2a518:	00000000 	.word	0x00000000
   2a51c:	4c414944 	.word	0x4c414944
   2a520:	2e474e49 	.word	0x2e474e49
   2a524:	20202e2e 	.word	0x20202e2e
   2a528:	20202020 	.word	0x20202020
   2a52c:	00000000 	.word	0x00000000
   2a530:	4f434e49 	.word	0x4f434e49
   2a534:	474e494d 	.word	0x474e494d
   2a538:	534d5320 	.word	0x534d5320
   2a53c:	202e2e2e 	.word	0x202e2e2e
   2a540:	00000000 	.word	0x00000000
   2a544:	4754554f 	.word	0x4754554f
   2a548:	474e494f 	.word	0x474e494f
   2a54c:	534d5320 	.word	0x534d5320
   2a550:	202e2e2e 	.word	0x202e2e2e
   2a554:	00000000 	.word	0x00000000
   2a558:	20574f4c 	.word	0x20574f4c
   2a55c:	54544142 	.word	0x54544142
   2a560:	20595245 	.word	0x20595245
   2a564:	20202020 	.word	0x20202020
	...
   2a570:	1f1f0000 	.word	0x1f1f0000
   2a574:	00000000 	.word	0x00000000
   2a578:	1f1f1f00 	.word	0x1f1f1f00
   2a57c:	00000000 	.word	0x00000000
   2a580:	1f1f1f1f 	.word	0x1f1f1f1f
   2a584:	1f1f0000 	.word	0x1f1f0000
   2a588:	1f1f1f1f 	.word	0x1f1f1f1f
   2a58c:	1f1f1f1f 	.word	0x1f1f1f1f
   2a590:	1f1f1f1f 	.word	0x1f1f1f1f
   2a594:	00018c96 	.word	0x00018c96
   2a598:	0001885a 	.word	0x0001885a
   2a59c:	0001889e 	.word	0x0001889e
   2a5a0:	000188dc 	.word	0x000188dc
   2a5a4:	0001890e 	.word	0x0001890e
   2a5a8:	0001897c 	.word	0x0001897c
   2a5ac:	00018b08 	.word	0x00018b08
   2a5b0:	00018b8a 	.word	0x00018b8a
   2a5b4:	00018c54 	.word	0x00018c54
   2a5b8:	00018c96 	.word	0x00018c96
   2a5bc:	00018c94 	.word	0x00018c94
   2a5c0:	00018ba8 	.word	0x00018ba8
   2a5c4:	00018bc6 	.word	0x00018bc6
   2a5c8:	00018be4 	.word	0x00018be4
   2a5cc:	00018c02 	.word	0x00018c02
   2a5d0:	00018c2a 	.word	0x00018c2a
   2a5d4:	756c255d 	.word	0x756c255d
   2a5d8:	756c257b 	.word	0x756c257b
   2a5dc:	756c257d 	.word	0x756c257d
   2a5e0:	00000000 	.word	0x00000000
   2a5e4:	00000002 	.word	0x00000002
   2a5e8:	00000003 	.word	0x00000003
   2a5ec:	00000028 	.word	0x00000028
   2a5f0:	00000029 	.word	0x00000029
   2a5f4:	00000004 	.word	0x00000004
   2a5f8:	00000005 	.word	0x00000005
   2a5fc:	00000006 	.word	0x00000006
   2a600:	00000007 	.word	0x00000007
   2a604:	00000020 	.word	0x00000020
   2a608:	00000021 	.word	0x00000021
   2a60c:	00000022 	.word	0x00000022
   2a610:	00000023 	.word	0x00000023
   2a614:	00000024 	.word	0x00000024
   2a618:	00000025 	.word	0x00000025
   2a61c:	00000026 	.word	0x00000026
   2a620:	00000027 	.word	0x00000027
   2a624:	00000008 	.word	0x00000008
   2a628:	00000009 	.word	0x00000009
   2a62c:	0000000a 	.word	0x0000000a
   2a630:	0000000b 	.word	0x0000000b
   2a634:	0001d596 	.word	0x0001d596
   2a638:	0001d59c 	.word	0x0001d59c
   2a63c:	0001d59c 	.word	0x0001d59c
   2a640:	0001d59c 	.word	0x0001d59c
   2a644:	0001d59c 	.word	0x0001d59c
   2a648:	0001d59c 	.word	0x0001d59c
   2a64c:	0001d59c 	.word	0x0001d59c
   2a650:	0001d59c 	.word	0x0001d59c
   2a654:	0001d59c 	.word	0x0001d59c
   2a658:	0001d59c 	.word	0x0001d59c
   2a65c:	0001d59c 	.word	0x0001d59c
   2a660:	0001d59c 	.word	0x0001d59c
   2a664:	0001d59c 	.word	0x0001d59c
   2a668:	0001d59c 	.word	0x0001d59c
   2a66c:	0001d59c 	.word	0x0001d59c
   2a670:	0001d59c 	.word	0x0001d59c
   2a674:	0001d574 	.word	0x0001d574
   2a678:	0001d59c 	.word	0x0001d59c
   2a67c:	0001d59c 	.word	0x0001d59c
   2a680:	0001d59c 	.word	0x0001d59c
   2a684:	0001d59c 	.word	0x0001d59c
   2a688:	0001d59c 	.word	0x0001d59c
   2a68c:	0001d59c 	.word	0x0001d59c
   2a690:	0001d59c 	.word	0x0001d59c
   2a694:	0001d59c 	.word	0x0001d59c
   2a698:	0001d59c 	.word	0x0001d59c
   2a69c:	0001d59c 	.word	0x0001d59c
   2a6a0:	0001d59c 	.word	0x0001d59c
   2a6a4:	0001d59c 	.word	0x0001d59c
   2a6a8:	0001d59c 	.word	0x0001d59c
   2a6ac:	0001d59c 	.word	0x0001d59c
   2a6b0:	0001d59c 	.word	0x0001d59c
   2a6b4:	0001d590 	.word	0x0001d590
   2a6b8:	0001d59c 	.word	0x0001d59c
   2a6bc:	0001d59c 	.word	0x0001d59c
   2a6c0:	0001d59c 	.word	0x0001d59c
   2a6c4:	0001d59c 	.word	0x0001d59c
   2a6c8:	0001d59c 	.word	0x0001d59c
   2a6cc:	0001d59c 	.word	0x0001d59c
   2a6d0:	0001d59c 	.word	0x0001d59c
   2a6d4:	0001d59c 	.word	0x0001d59c
   2a6d8:	0001d59c 	.word	0x0001d59c
   2a6dc:	0001d59c 	.word	0x0001d59c
   2a6e0:	0001d59c 	.word	0x0001d59c
   2a6e4:	0001d59c 	.word	0x0001d59c
   2a6e8:	0001d59c 	.word	0x0001d59c
   2a6ec:	0001d59c 	.word	0x0001d59c
   2a6f0:	0001d59c 	.word	0x0001d59c
   2a6f4:	0001d58a 	.word	0x0001d58a
   2a6f8:	0001d532 	.word	0x0001d532
   2a6fc:	0001d548 	.word	0x0001d548
   2a700:	0001d55e 	.word	0x0001d55e
   2a704:	0001d518 	.word	0x0001d518
   2a708:	42000800 	.word	0x42000800
   2a70c:	42000c00 	.word	0x42000c00
   2a710:	42001000 	.word	0x42001000
   2a714:	42001400 	.word	0x42001400
   2a718:	42001800 	.word	0x42001800
   2a71c:	42001c00 	.word	0x42001c00
   2a720:	454c4449 	.word	0x454c4449
   2a724:	00000000 	.word	0x00000000
   2a728:	20726d54 	.word	0x20726d54
   2a72c:	00637653 	.word	0x00637653
   2a730:	000210c0 	.word	0x000210c0
   2a734:	000210c0 	.word	0x000210c0
   2a738:	000210c0 	.word	0x000210c0
   2a73c:	0002114e 	.word	0x0002114e
   2a740:	00021118 	.word	0x00021118
   2a744:	00021142 	.word	0x00021142
   2a748:	000210c0 	.word	0x000210c0
   2a74c:	000210c0 	.word	0x000210c0
   2a750:	0002114e 	.word	0x0002114e
   2a754:	00021118 	.word	0x00021118

0002a758 <_tcc_intflag>:
   2a758:	00000001 00000002 00000004 00000008     ................
   2a768:	00001000 00002000 00004000 00008000     ..... ...@......
   2a778:	00010000 00020000 00040000 00080000     ................
   2a788:	0c0b0a09 00000e0d 000227ac 000227ac     .........'...'..
   2a798:	000227a0 000227ac 000227a0 0002277a     .'...'...'..z'..
   2a7a8:	0002277a 000227ac 000227ac 000227ac     z'...'...'...'..
   2a7b8:	000227ac 000227ac 000227ac 000227ac     .'...'...'...'..
   2a7c8:	000227ac 000227ac 000227ac 000227ac     .'...'...'...'..
   2a7d8:	000227ac 000227ac 000227ac 000227ac     .'...'...'...'..
   2a7e8:	000227ac 000227ac 000227ac 000227ac     .'...'...'...'..
   2a7f8:	000227ac 000227ac 000227ac 000227ac     .'...'...'...'..
   2a808:	000227ac 000227ac 000227ac 000227ac     .'...'...'...'..
   2a818:	000227ac 000227ac 000227ac 000227ac     .'...'...'...'..
   2a828:	000227ac 000227ac 000227ac 000227ac     .'...'...'...'..
   2a838:	000227ac 000227ac 000227ac 000227ac     .'...'...'...'..
   2a848:	000227ac 000227ac 000227ac 000227ac     .'...'...'...'..
   2a858:	000227ac 000227ac 000227ac 000227ac     .'...'...'...'..
   2a868:	000227ac 000227ac 000227ac 000227ac     .'...'...'...'..
   2a878:	000227ac 000227ac 000227ac 000227ac     .'...'...'...'..
   2a888:	000227ac 000227ac 000227a0 000227a0     .'...'...'...'..
   2a898:	000227b6 000227b6 000227b6 000227b6     .'...'...'...'..
   2a8a8:	41744545 50524f4d 456d752e 00023b26     EEtAMORP.umE&;..
   2a8b8:	00023ba0 00023ba0 00023b44 00023b3e     .;...;..D;..>;..
   2a8c8:	00023b4a 00023b2c 00023b50 00023b86     J;..,;..P;...;..
   2a8d8:	00023e6c 00023ebc 00023ebc 00023eb8     l>...>...>...>..
   2a8e8:	00023e5e 00023e7e 00023e4e 00023e90     ^>..~>..N>...>..
   2a8f8:	00023ea2 00023f0a 00023f38 00023f38     .>...?..8?..8?..
   2a908:	00023f34 00023f04 00023f10 00023efe     4?...?...?...>..
   2a918:	00023f16 00023f1c 00776f70 74727173     .?...?..pow.sqrt
	...

0002a930 <TWO52>:
   2a930:	00000000 43300000 00000000 c3300000     ......0C......0.
   2a940:	000268b0 00026880 00026892 000267d4     .h...h...h...g..
   2a950:	00026892 00026876 00026892 000267d4     .h..vh...h...g..
   2a960:	00026880 00026880 00026876 000267d4     .h...h..vh...g..
   2a970:	000267dc 000267dc 000267dc 00026898     .g...g...g...h..
   2a980:	00026880 00026880 00026854 00026938     .h...h..Th..8i..
   2a990:	00026854 00026876 00026854 00026938     Th..vh..Th..8i..
   2a9a0:	00026880 00026880 00026876 00026938     .h...h..vh..8i..
   2a9b0:	000267dc 000267dc 000267dc 00026942     .g...g...g..Bi..
   2a9c0:	00026ae0 00026a30 00026a30 00026a2e     .j..0j..0j...j..
   2a9d0:	00026ad2 00026ad2 00026ac8 00026a2e     .j...j...j...j..
   2a9e0:	00026ad2 00026ac8 00026ad2 00026a2e     .j...j...j...j..
   2a9f0:	00026ad8 00026ad8 00026ad8 00026b68     .j...j...j..hk..
   2aa00:	00027498 0002747a 00027434 00027352     .t..zt..4t..Rs..
   2aa10:	00027434 0002746c 00027434 00027352     4t..lt..4t..Rs..
   2aa20:	0002747a 0002747a 0002746c 00027352     zt..zt..lt..Rs..
   2aa30:	0002734a 0002734a 0002734a 000276b0     Js..Js..Js...v..
   2aa40:	00027cf8 00027bb8 00027bb8 00027bb4     .|...{...{...{..
   2aa50:	00027cd0 00027cd0 00027cc2 00027bb4     .|...|...|...{..
   2aa60:	00027cd0 00027cc2 00027cd0 00027bb4     .|...|...|...{..
   2aa70:	00027cd8 00027cd8 00027cd8 00027edc     .|...|...|...~..
   2aa80:	4f500043 00584953 3130002e 35343332     C.POSIX...012345
   2aa90:	39383736 64636261 68676665 6c6b6a69     6789abcdefghijkl
   2aaa0:	706f6e6d 74737271 78777675 00007a79              mnopqrstuvwxyz.

0002aaaf <_ctype_>:
   2aaaf:	20202000 20202020 28282020 20282828     .         ((((( 
   2aabf:	20202020 20202020 20202020 20202020                     
   2aacf:	10108820 10101010 10101010 10101010      ...............
   2aadf:	04040410 04040404 10040404 10101010     ................
   2aaef:	41411010 41414141 01010101 01010101     ..AAAAAA........
   2aaff:	01010101 01010101 01010101 10101010     ................
   2ab0f:	42421010 42424242 02020202 02020202     ..BBBBBB........
   2ab1f:	02020202 02020202 02020202 10101010     ................
   2ab2f:	00000020 00000000 00000000 00000000      ...............
	...
   2abaf:	302d2300 6800202b 65004c6c 46456766     .#-0+ .hlL.efgEF
   2abbf:	31300047 35343332 39383736 44434241     G.0123456789ABCD
   2abcf:	30004645 34333231 38373635 63626139     EF.0123456789abc
   2abdf:	00666564 c0b5f800                                def..

0002abe4 <_init>:
   2abe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2abe6:	46c0      	nop			; (mov r8, r8)
   2abe8:	bcf8      	pop	{r3, r4, r5, r6, r7}
   2abea:	bc08      	pop	{r3}
   2abec:	469e      	mov	lr, r3
   2abee:	4770      	bx	lr

0002abf0 <__init_array_start>:
   2abf0:	000100dd 	.word	0x000100dd

0002abf4 <_fini>:
   2abf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2abf6:	46c0      	nop			; (mov r8, r8)
   2abf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
   2abfa:	bc08      	pop	{r3}
   2abfc:	469e      	mov	lr, r3
   2abfe:	4770      	bx	lr

0002ac00 <__fini_array_start>:
   2ac00:	000100b5 	.word	0x000100b5

Disassembly of section .relocate:

20000000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000000:	f3bf 8f5f 	dmb	sy
20000004:	3801      	subs	r0, #1
20000006:	2800      	cmp	r0, #0
20000008:	d1fa      	bne.n	20000000 <portable_delay_cycles>
		"SUB r0, r0, #1 \n"
#endif
		"CMP r0, #0  \n"
		"BNE loop         "
	);
}
2000000a:	4770      	bx	lr

2000000c <ucharPhase_Seq_Check_Flag>:
2000000c:	0101                                             .

2000000d <ucharVoltage_Detect_Timer_Counter>:
2000000d:	0001 aa00                                        ...

20000010 <uxCriticalNesting>:
20000010:	aaaa aaaa                                   ....

20000014 <_events_inst>:
20000014:	0000 0000 000c 0000 0000 0000 0000 0000     ................
20000024:	0000 0000                                   ....

20000028 <g_interrupt_enabled>:
20000028:	0101                                             .

20000029 <__fdlib_version>:
20000029:	0001 3000                                        ...

2000002c <_impure_ptr>:
2000002c:	0030 2000                                   0.. 

20000030 <impure_data>:
	...

20000090 <__global_locale>:
20000090:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
200000b0:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
200000d0:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
200000f0:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000110:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000130:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000150:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000170:	8f79 0002 8989 0002 0000 0000 aaaf 0002     y...............
20000180:	aa88 0002 abb5 0002 abb5 0002 abb5 0002     ................
20000190:	abb5 0002 abb5 0002 abb5 0002 abb5 0002     ................
200001a0:	abb5 0002 abb5 0002 ffff ffff ffff ffff     ................
200001b0:	ffff ffff ffff 0000 0001 5341 4943 0049     ..........ASCII.
	...
200001d8:	0000 5341 4943 0049 0000 0000 0000 0000     ..ASCII.........
	...
