
COMMANDER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0001adbc  00010000  00010000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0002adbc  0002adbc  0002adbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000204  20000000  0002adc4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          00000c04  20000400  0002b400  00030400  2**10
                  ALLOC
  4 .stack        00002004  20001004  0002c004  00030400  2**0
                  ALLOC
  5 .ARM.attributes 00000028  00000000  00000000  00030204  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  0003022c  2**0
                  CONTENTS, READONLY
  7 .debug_info   0007fe97  00000000  00000000  00030285  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00008b55  00000000  00000000  000b011c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000abf7  00000000  00000000  000b8c71  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00001db8  00000000  00000000  000c3868  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00001bc0  00000000  00000000  000c5620  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  000287e4  00000000  00000000  000c71e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00027bc5  00000000  00000000  000ef9c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000a297f  00000000  00000000  00117589  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  000074b0  00000000  00000000  001b9f08  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00010000 <exception_table>:
   10000:	08 30 00 20 89 4a 02 00 81 4b 02 00 81 4b 02 00     .0. .J...K...K..
	...
   1002c:	89 eb 01 00 00 00 00 00 00 00 00 00 c1 ec 01 00     ................
   1003c:	09 ed 01 00 81 4b 02 00 81 4b 02 00 01 14 02 00     .....K...K......
   1004c:	05 e5 01 00 29 24 02 00 81 4b 02 00 1d df 01 00     ....)$...K......
   1005c:	81 4b 02 00 95 24 02 00 21 22 02 00 39 22 02 00     .K...$..!"..9"..
   1006c:	51 22 02 00 69 22 02 00 81 22 02 00 99 22 02 00     Q"..i"..."..."..
   1007c:	25 14 02 00 39 14 02 00 4d 14 02 00 dd 14 02 00     %...9...M.......
   1008c:	f1 14 02 00 05 15 02 00 19 15 02 00 2d 15 02 00     ............-...
   1009c:	fd dc 01 00 cd 25 02 00 e1 de 01 00 81 4b 02 00     .....%.......K..
   100ac:	81 4b 02 00 00 00 00 00                             .K......

000100b4 <__do_global_dtors_aux>:
   100b4:	b510      	push	{r4, lr}
   100b6:	4c06      	ldr	r4, [pc, #24]	; (100d0 <__do_global_dtors_aux+0x1c>)
   100b8:	7823      	ldrb	r3, [r4, #0]
   100ba:	2b00      	cmp	r3, #0
   100bc:	d107      	bne.n	100ce <__do_global_dtors_aux+0x1a>
   100be:	4b05      	ldr	r3, [pc, #20]	; (100d4 <__do_global_dtors_aux+0x20>)
   100c0:	2b00      	cmp	r3, #0
   100c2:	d002      	beq.n	100ca <__do_global_dtors_aux+0x16>
   100c4:	4804      	ldr	r0, [pc, #16]	; (100d8 <__do_global_dtors_aux+0x24>)
   100c6:	e000      	b.n	100ca <__do_global_dtors_aux+0x16>
   100c8:	bf00      	nop
   100ca:	2301      	movs	r3, #1
   100cc:	7023      	strb	r3, [r4, #0]
   100ce:	bd10      	pop	{r4, pc}
   100d0:	20000400 	.word	0x20000400
   100d4:	00000000 	.word	0x00000000
   100d8:	0002adc4 	.word	0x0002adc4

000100dc <frame_dummy>:
   100dc:	4b08      	ldr	r3, [pc, #32]	; (10100 <frame_dummy+0x24>)
   100de:	b510      	push	{r4, lr}
   100e0:	2b00      	cmp	r3, #0
   100e2:	d003      	beq.n	100ec <frame_dummy+0x10>
   100e4:	4907      	ldr	r1, [pc, #28]	; (10104 <frame_dummy+0x28>)
   100e6:	4808      	ldr	r0, [pc, #32]	; (10108 <frame_dummy+0x2c>)
   100e8:	e000      	b.n	100ec <frame_dummy+0x10>
   100ea:	bf00      	nop
   100ec:	4807      	ldr	r0, [pc, #28]	; (1010c <frame_dummy+0x30>)
   100ee:	6803      	ldr	r3, [r0, #0]
   100f0:	2b00      	cmp	r3, #0
   100f2:	d100      	bne.n	100f6 <frame_dummy+0x1a>
   100f4:	bd10      	pop	{r4, pc}
   100f6:	4b06      	ldr	r3, [pc, #24]	; (10110 <frame_dummy+0x34>)
   100f8:	2b00      	cmp	r3, #0
   100fa:	d0fb      	beq.n	100f4 <frame_dummy+0x18>
   100fc:	4798      	blx	r3
   100fe:	e7f9      	b.n	100f4 <frame_dummy+0x18>
   10100:	00000000 	.word	0x00000000
   10104:	20000404 	.word	0x20000404
   10108:	0002adc4 	.word	0x0002adc4
   1010c:	0002adc4 	.word	0x0002adc4
   10110:	00000000 	.word	0x00000000

00010114 <configure_eeprom>:
#include "eeprom_driver.h"

void configure_eeprom(void)
{
   10114:	b590      	push	{r4, r7, lr}
   10116:	b083      	sub	sp, #12
   10118:	af00      	add	r7, sp, #0
	enum status_code error_code = eeprom_emulator_init();
   1011a:	1dfc      	adds	r4, r7, #7
   1011c:	4b0a      	ldr	r3, [pc, #40]	; (10148 <configure_eeprom+0x34>)
   1011e:	4798      	blx	r3
   10120:	0003      	movs	r3, r0
   10122:	7023      	strb	r3, [r4, #0]
	if (error_code == STATUS_ERR_NO_MEMORY)
   10124:	1dfb      	adds	r3, r7, #7
   10126:	781b      	ldrb	r3, [r3, #0]
   10128:	2b16      	cmp	r3, #22
   1012a:	d100      	bne.n	1012e <configure_eeprom+0x1a>
	{
		while (true);
   1012c:	e7fe      	b.n	1012c <configure_eeprom+0x18>
	}
	else if (error_code != STATUS_OK)
   1012e:	1dfb      	adds	r3, r7, #7
   10130:	781b      	ldrb	r3, [r3, #0]
   10132:	2b00      	cmp	r3, #0
   10134:	d003      	beq.n	1013e <configure_eeprom+0x2a>
	{
		eeprom_emulator_erase_memory();
   10136:	4b05      	ldr	r3, [pc, #20]	; (1014c <configure_eeprom+0x38>)
   10138:	4798      	blx	r3
		eeprom_emulator_init();
   1013a:	4b03      	ldr	r3, [pc, #12]	; (10148 <configure_eeprom+0x34>)
   1013c:	4798      	blx	r3
	}
}
   1013e:	46c0      	nop			; (mov r8, r8)
   10140:	46bd      	mov	sp, r7
   10142:	b003      	add	sp, #12
   10144:	bd90      	pop	{r4, r7, pc}
   10146:	46c0      	nop			; (mov r8, r8)
   10148:	00023645 	.word	0x00023645
   1014c:	0002372d 	.word	0x0002372d

00010150 <init_eeprom>:

void init_eeprom(void)
{
   10150:	b580      	push	{r7, lr}
   10152:	af00      	add	r7, sp, #0
	configure_eeprom();
   10154:	4bf7      	ldr	r3, [pc, #988]	; (10534 <init_eeprom+0x3e4>)
   10156:	4798      	blx	r3
	
	//////////////////////////////////////////////////////////////////////////
	eeprom_emulator_read_page(BOOTLOADER_PARAMETER_PAGE, page_data);
   10158:	4bf7      	ldr	r3, [pc, #988]	; (10538 <init_eeprom+0x3e8>)
   1015a:	0019      	movs	r1, r3
   1015c:	2000      	movs	r0, #0
   1015e:	4bf7      	ldr	r3, [pc, #988]	; (1053c <init_eeprom+0x3ec>)
   10160:	4798      	blx	r3
	memcpy(&bootloader_parameter,page_data,sizeof(bootloader_parameter));
   10162:	49f5      	ldr	r1, [pc, #980]	; (10538 <init_eeprom+0x3e8>)
   10164:	4bf6      	ldr	r3, [pc, #984]	; (10540 <init_eeprom+0x3f0>)
   10166:	221c      	movs	r2, #28
   10168:	0018      	movs	r0, r3
   1016a:	4bf6      	ldr	r3, [pc, #984]	; (10544 <init_eeprom+0x3f4>)
   1016c:	4798      	blx	r3
	if (bootloader_parameter.ucharFirst_Time_Write != 85)
   1016e:	4bf4      	ldr	r3, [pc, #976]	; (10540 <init_eeprom+0x3f0>)
   10170:	791b      	ldrb	r3, [r3, #4]
   10172:	2b55      	cmp	r3, #85	; 0x55
   10174:	d02c      	beq.n	101d0 <init_eeprom+0x80>
	{
		bootloader_parameter.ulongintDiscard		   = 0;
   10176:	4bf2      	ldr	r3, [pc, #968]	; (10540 <init_eeprom+0x3f0>)
   10178:	2200      	movs	r2, #0
   1017a:	601a      	str	r2, [r3, #0]
		bootloader_parameter.ucharFirst_Time_Write	   = 85;
   1017c:	4bf0      	ldr	r3, [pc, #960]	; (10540 <init_eeprom+0x3f0>)
   1017e:	2255      	movs	r2, #85	; 0x55
   10180:	711a      	strb	r2, [r3, #4]
		bootloader_parameter.firmware_download_pending = false;
   10182:	4bef      	ldr	r3, [pc, #956]	; (10540 <init_eeprom+0x3f0>)
   10184:	2200      	movs	r2, #0
   10186:	715a      	strb	r2, [r3, #5]
		bootloader_parameter.firmware_update_process_completed = false;
   10188:	4bed      	ldr	r3, [pc, #948]	; (10540 <init_eeprom+0x3f0>)
   1018a:	2200      	movs	r2, #0
   1018c:	719a      	strb	r2, [r3, #6]
		bootloader_parameter.firmware_update_error_code = 0;
   1018e:	4bec      	ldr	r3, [pc, #944]	; (10540 <init_eeprom+0x3f0>)
   10190:	2200      	movs	r2, #0
   10192:	71da      	strb	r2, [r3, #7]
		bootloader_parameter.retries= 0;
   10194:	4bea      	ldr	r3, [pc, #936]	; (10540 <init_eeprom+0x3f0>)
   10196:	2200      	movs	r2, #0
   10198:	721a      	strb	r2, [r3, #8]
		
		
		memset(bootloader_parameter.firmware_updater_mobile_no, '\0', sizeof(bootloader_parameter.firmware_updater_mobile_no));
   1019a:	4beb      	ldr	r3, [pc, #940]	; (10548 <init_eeprom+0x3f8>)
   1019c:	2210      	movs	r2, #16
   1019e:	2100      	movs	r1, #0
   101a0:	0018      	movs	r0, r3
   101a2:	4bea      	ldr	r3, [pc, #936]	; (1054c <init_eeprom+0x3fc>)
   101a4:	4798      	blx	r3
		strcpy(bootloader_parameter.firmware_updater_mobile_no,"0000000000");
   101a6:	4be8      	ldr	r3, [pc, #928]	; (10548 <init_eeprom+0x3f8>)
   101a8:	4ae9      	ldr	r2, [pc, #932]	; (10550 <init_eeprom+0x400>)
   101aa:	ca03      	ldmia	r2!, {r0, r1}
   101ac:	c303      	stmia	r3!, {r0, r1}
   101ae:	8811      	ldrh	r1, [r2, #0]
   101b0:	8019      	strh	r1, [r3, #0]
   101b2:	7892      	ldrb	r2, [r2, #2]
   101b4:	709a      	strb	r2, [r3, #2]
		
		memcpy(page_data,&bootloader_parameter,sizeof(bootloader_parameter));
   101b6:	49e2      	ldr	r1, [pc, #904]	; (10540 <init_eeprom+0x3f0>)
   101b8:	4bdf      	ldr	r3, [pc, #892]	; (10538 <init_eeprom+0x3e8>)
   101ba:	221c      	movs	r2, #28
   101bc:	0018      	movs	r0, r3
   101be:	4be1      	ldr	r3, [pc, #900]	; (10544 <init_eeprom+0x3f4>)
   101c0:	4798      	blx	r3
		eeprom_emulator_write_page(BOOTLOADER_PARAMETER_PAGE, page_data);
   101c2:	4bdd      	ldr	r3, [pc, #884]	; (10538 <init_eeprom+0x3e8>)
   101c4:	0019      	movs	r1, r3
   101c6:	2000      	movs	r0, #0
   101c8:	4be2      	ldr	r3, [pc, #904]	; (10554 <init_eeprom+0x404>)
   101ca:	4798      	blx	r3
		eeprom_emulator_commit_page_buffer();
   101cc:	4be2      	ldr	r3, [pc, #904]	; (10558 <init_eeprom+0x408>)
   101ce:	4798      	blx	r3
	}
	
	eeprom_emulator_read_page(FTP_PATH_PARAMETER_PAGE, page_data);
   101d0:	4bd9      	ldr	r3, [pc, #868]	; (10538 <init_eeprom+0x3e8>)
   101d2:	0019      	movs	r1, r3
   101d4:	2001      	movs	r0, #1
   101d6:	4bd9      	ldr	r3, [pc, #868]	; (1053c <init_eeprom+0x3ec>)
   101d8:	4798      	blx	r3
	memcpy(&ftp_path_parameter,page_data,sizeof(ftp_path_parameter));
   101da:	49d7      	ldr	r1, [pc, #860]	; (10538 <init_eeprom+0x3e8>)
   101dc:	4bdf      	ldr	r3, [pc, #892]	; (1055c <init_eeprom+0x40c>)
   101de:	2238      	movs	r2, #56	; 0x38
   101e0:	0018      	movs	r0, r3
   101e2:	4bd8      	ldr	r3, [pc, #864]	; (10544 <init_eeprom+0x3f4>)
   101e4:	4798      	blx	r3
	if (ftp_path_parameter.ucharFirst_Time_Write !=85)
   101e6:	4bdd      	ldr	r3, [pc, #884]	; (1055c <init_eeprom+0x40c>)
   101e8:	791b      	ldrb	r3, [r3, #4]
   101ea:	2b55      	cmp	r3, #85	; 0x55
   101ec:	d02e      	beq.n	1024c <init_eeprom+0xfc>
	{
		ftp_path_parameter.ulongintDiscard			   = 0;
   101ee:	4bdb      	ldr	r3, [pc, #876]	; (1055c <init_eeprom+0x40c>)
   101f0:	2200      	movs	r2, #0
   101f2:	601a      	str	r2, [r3, #0]
		ftp_path_parameter.ucharFirst_Time_Write	   = 85;
   101f4:	4bd9      	ldr	r3, [pc, #868]	; (1055c <init_eeprom+0x40c>)
   101f6:	2255      	movs	r2, #85	; 0x55
   101f8:	711a      	strb	r2, [r3, #4]
		
		memset(ftp_path_parameter.ftp_address, '\0', sizeof(ftp_path_parameter.ftp_address));
   101fa:	4bd9      	ldr	r3, [pc, #868]	; (10560 <init_eeprom+0x410>)
   101fc:	221e      	movs	r2, #30
   101fe:	2100      	movs	r1, #0
   10200:	0018      	movs	r0, r3
   10202:	4bd2      	ldr	r3, [pc, #840]	; (1054c <init_eeprom+0x3fc>)
   10204:	4798      	blx	r3
		strcpy(ftp_path_parameter.ftp_address,"ftp.drivehq.com");
   10206:	4ad6      	ldr	r2, [pc, #856]	; (10560 <init_eeprom+0x410>)
   10208:	4bd6      	ldr	r3, [pc, #856]	; (10564 <init_eeprom+0x414>)
   1020a:	0010      	movs	r0, r2
   1020c:	0019      	movs	r1, r3
   1020e:	2310      	movs	r3, #16
   10210:	001a      	movs	r2, r3
   10212:	4bcc      	ldr	r3, [pc, #816]	; (10544 <init_eeprom+0x3f4>)
   10214:	4798      	blx	r3
		
		memset(ftp_path_parameter.ftp_path, '\0', sizeof(ftp_path_parameter.ftp_path));
   10216:	4bd4      	ldr	r3, [pc, #848]	; (10568 <init_eeprom+0x418>)
   10218:	2214      	movs	r2, #20
   1021a:	2100      	movs	r1, #0
   1021c:	0018      	movs	r0, r3
   1021e:	4bcb      	ldr	r3, [pc, #812]	; (1054c <init_eeprom+0x3fc>)
   10220:	4798      	blx	r3
		strcpy(ftp_path_parameter.ftp_path,"/firmware/");
   10222:	4ad1      	ldr	r2, [pc, #836]	; (10568 <init_eeprom+0x418>)
   10224:	4bd1      	ldr	r3, [pc, #836]	; (1056c <init_eeprom+0x41c>)
   10226:	0010      	movs	r0, r2
   10228:	0019      	movs	r1, r3
   1022a:	230b      	movs	r3, #11
   1022c:	001a      	movs	r2, r3
   1022e:	4bc5      	ldr	r3, [pc, #788]	; (10544 <init_eeprom+0x3f4>)
   10230:	4798      	blx	r3
		
		memcpy(page_data,&ftp_path_parameter,sizeof(ftp_path_parameter));
   10232:	49ca      	ldr	r1, [pc, #808]	; (1055c <init_eeprom+0x40c>)
   10234:	4bc0      	ldr	r3, [pc, #768]	; (10538 <init_eeprom+0x3e8>)
   10236:	2238      	movs	r2, #56	; 0x38
   10238:	0018      	movs	r0, r3
   1023a:	4bc2      	ldr	r3, [pc, #776]	; (10544 <init_eeprom+0x3f4>)
   1023c:	4798      	blx	r3
		eeprom_emulator_write_page(FTP_PATH_PARAMETER_PAGE, page_data);
   1023e:	4bbe      	ldr	r3, [pc, #760]	; (10538 <init_eeprom+0x3e8>)
   10240:	0019      	movs	r1, r3
   10242:	2001      	movs	r0, #1
   10244:	4bc3      	ldr	r3, [pc, #780]	; (10554 <init_eeprom+0x404>)
   10246:	4798      	blx	r3
		eeprom_emulator_commit_page_buffer();
   10248:	4bc3      	ldr	r3, [pc, #780]	; (10558 <init_eeprom+0x408>)
   1024a:	4798      	blx	r3
	}
	
	eeprom_emulator_read_page(FTP_USER_PARAMETER_PAGE, page_data);
   1024c:	4bba      	ldr	r3, [pc, #744]	; (10538 <init_eeprom+0x3e8>)
   1024e:	0019      	movs	r1, r3
   10250:	2002      	movs	r0, #2
   10252:	4bba      	ldr	r3, [pc, #744]	; (1053c <init_eeprom+0x3ec>)
   10254:	4798      	blx	r3
	memcpy(&ftp_user_parameter,page_data,sizeof(ftp_user_parameter));
   10256:	49b8      	ldr	r1, [pc, #736]	; (10538 <init_eeprom+0x3e8>)
   10258:	4bc5      	ldr	r3, [pc, #788]	; (10570 <init_eeprom+0x420>)
   1025a:	2238      	movs	r2, #56	; 0x38
   1025c:	0018      	movs	r0, r3
   1025e:	4bb9      	ldr	r3, [pc, #740]	; (10544 <init_eeprom+0x3f4>)
   10260:	4798      	blx	r3
	if (ftp_user_parameter.ucharFirst_Time_Write !=85)
   10262:	4bc3      	ldr	r3, [pc, #780]	; (10570 <init_eeprom+0x420>)
   10264:	791b      	ldrb	r3, [r3, #4]
   10266:	2b55      	cmp	r3, #85	; 0x55
   10268:	d03c      	beq.n	102e4 <init_eeprom+0x194>
	{
		ftp_user_parameter.ulongintDiscard			   = 0;
   1026a:	4bc1      	ldr	r3, [pc, #772]	; (10570 <init_eeprom+0x420>)
   1026c:	2200      	movs	r2, #0
   1026e:	601a      	str	r2, [r3, #0]
		ftp_user_parameter.ucharFirst_Time_Write	   = 85;
   10270:	4bbf      	ldr	r3, [pc, #764]	; (10570 <init_eeprom+0x420>)
   10272:	2255      	movs	r2, #85	; 0x55
   10274:	711a      	strb	r2, [r3, #4]
		
		memset(ftp_user_parameter.ftp_username, '\0', sizeof(ftp_user_parameter.ftp_username));
   10276:	4bbf      	ldr	r3, [pc, #764]	; (10574 <init_eeprom+0x424>)
   10278:	2210      	movs	r2, #16
   1027a:	2100      	movs	r1, #0
   1027c:	0018      	movs	r0, r3
   1027e:	4bb3      	ldr	r3, [pc, #716]	; (1054c <init_eeprom+0x3fc>)
   10280:	4798      	blx	r3
		strcpy(ftp_user_parameter.ftp_username,"rahulnrathodkcl");
   10282:	4bbb      	ldr	r3, [pc, #748]	; (10570 <init_eeprom+0x420>)
   10284:	2205      	movs	r2, #5
   10286:	49bc      	ldr	r1, [pc, #752]	; (10578 <init_eeprom+0x428>)
   10288:	189b      	adds	r3, r3, r2
   1028a:	2210      	movs	r2, #16
   1028c:	0018      	movs	r0, r3
   1028e:	4bad      	ldr	r3, [pc, #692]	; (10544 <init_eeprom+0x3f4>)
   10290:	4798      	blx	r3
		
		memset(ftp_user_parameter.ftp_filename, '\0', sizeof(ftp_user_parameter.ftp_password));
   10292:	4bba      	ldr	r3, [pc, #744]	; (1057c <init_eeprom+0x42c>)
   10294:	2210      	movs	r2, #16
   10296:	2100      	movs	r1, #0
   10298:	0018      	movs	r0, r3
   1029a:	4bac      	ldr	r3, [pc, #688]	; (1054c <init_eeprom+0x3fc>)
   1029c:	4798      	blx	r3
		strcpy(ftp_user_parameter.ftp_password,"123456789");
   1029e:	4ab8      	ldr	r2, [pc, #736]	; (10580 <init_eeprom+0x430>)
   102a0:	4bb8      	ldr	r3, [pc, #736]	; (10584 <init_eeprom+0x434>)
   102a2:	0010      	movs	r0, r2
   102a4:	0019      	movs	r1, r3
   102a6:	230a      	movs	r3, #10
   102a8:	001a      	movs	r2, r3
   102aa:	4ba6      	ldr	r3, [pc, #664]	; (10544 <init_eeprom+0x3f4>)
   102ac:	4798      	blx	r3
		
		memset(ftp_user_parameter.ftp_filename, '\0', sizeof(ftp_user_parameter.ftp_filename));
   102ae:	4bb3      	ldr	r3, [pc, #716]	; (1057c <init_eeprom+0x42c>)
   102b0:	2210      	movs	r2, #16
   102b2:	2100      	movs	r1, #0
   102b4:	0018      	movs	r0, r3
   102b6:	4ba5      	ldr	r3, [pc, #660]	; (1054c <init_eeprom+0x3fc>)
   102b8:	4798      	blx	r3
		strcpy(ftp_user_parameter.ftp_filename,"firmware.bin");
   102ba:	4ab0      	ldr	r2, [pc, #704]	; (1057c <init_eeprom+0x42c>)
   102bc:	4bb2      	ldr	r3, [pc, #712]	; (10588 <init_eeprom+0x438>)
   102be:	0010      	movs	r0, r2
   102c0:	0019      	movs	r1, r3
   102c2:	230d      	movs	r3, #13
   102c4:	001a      	movs	r2, r3
   102c6:	4b9f      	ldr	r3, [pc, #636]	; (10544 <init_eeprom+0x3f4>)
   102c8:	4798      	blx	r3
		
		memcpy(page_data,&ftp_user_parameter,sizeof(ftp_user_parameter));
   102ca:	49a9      	ldr	r1, [pc, #676]	; (10570 <init_eeprom+0x420>)
   102cc:	4b9a      	ldr	r3, [pc, #616]	; (10538 <init_eeprom+0x3e8>)
   102ce:	2238      	movs	r2, #56	; 0x38
   102d0:	0018      	movs	r0, r3
   102d2:	4b9c      	ldr	r3, [pc, #624]	; (10544 <init_eeprom+0x3f4>)
   102d4:	4798      	blx	r3
		eeprom_emulator_write_page(FTP_USER_PARAMETER_PAGE, page_data);
   102d6:	4b98      	ldr	r3, [pc, #608]	; (10538 <init_eeprom+0x3e8>)
   102d8:	0019      	movs	r1, r3
   102da:	2002      	movs	r0, #2
   102dc:	4b9d      	ldr	r3, [pc, #628]	; (10554 <init_eeprom+0x404>)
   102de:	4798      	blx	r3
		eeprom_emulator_commit_page_buffer();
   102e0:	4b9d      	ldr	r3, [pc, #628]	; (10558 <init_eeprom+0x408>)
   102e2:	4798      	blx	r3
	}
	//////////////////////////////////////////////////////////////////////////
	eeprom_emulator_read_page(USER_COUNTER_PAGE, page_data);
   102e4:	4b94      	ldr	r3, [pc, #592]	; (10538 <init_eeprom+0x3e8>)
   102e6:	0019      	movs	r1, r3
   102e8:	2008      	movs	r0, #8
   102ea:	4b94      	ldr	r3, [pc, #592]	; (1053c <init_eeprom+0x3ec>)
   102ec:	4798      	blx	r3
	memcpy(&user_count_struct,page_data,sizeof(user_count_struct));
   102ee:	4aa7      	ldr	r2, [pc, #668]	; (1058c <init_eeprom+0x43c>)
   102f0:	4b91      	ldr	r3, [pc, #580]	; (10538 <init_eeprom+0x3e8>)
   102f2:	0010      	movs	r0, r2
   102f4:	0019      	movs	r1, r3
   102f6:	2308      	movs	r3, #8
   102f8:	001a      	movs	r2, r3
   102fa:	4b92      	ldr	r3, [pc, #584]	; (10544 <init_eeprom+0x3f4>)
   102fc:	4798      	blx	r3
	if (user_count_struct.u8tfirst_time_write_ee != 85)
   102fe:	4ba3      	ldr	r3, [pc, #652]	; (1058c <init_eeprom+0x43c>)
   10300:	781b      	ldrb	r3, [r3, #0]
   10302:	2b55      	cmp	r3, #85	; 0x55
   10304:	d01d      	beq.n	10342 <init_eeprom+0x1f2>
	{
		user_count_struct.u8tfirst_time_write_ee = 85;
   10306:	4ba1      	ldr	r3, [pc, #644]	; (1058c <init_eeprom+0x43c>)
   10308:	2255      	movs	r2, #85	; 0x55
   1030a:	701a      	strb	r2, [r3, #0]
		user_count_struct.total_user_no_count    = 15;
   1030c:	4b9f      	ldr	r3, [pc, #636]	; (1058c <init_eeprom+0x43c>)
   1030e:	220f      	movs	r2, #15
   10310:	705a      	strb	r2, [r3, #1]
		user_count_struct.current_user_no_count  = 0;
   10312:	4b9e      	ldr	r3, [pc, #632]	; (1058c <init_eeprom+0x43c>)
   10314:	2200      	movs	r2, #0
   10316:	709a      	strb	r2, [r3, #2]
		user_count_struct.primaryNumberIndex = 0;
   10318:	4b9c      	ldr	r3, [pc, #624]	; (1058c <init_eeprom+0x43c>)
   1031a:	2200      	movs	r2, #0
   1031c:	70da      	strb	r2, [r3, #3]
		user_count_struct.secondaryNumberIndex = 1;
   1031e:	4b9b      	ldr	r3, [pc, #620]	; (1058c <init_eeprom+0x43c>)
   10320:	2201      	movs	r2, #1
   10322:	711a      	strb	r2, [r3, #4]
		
		
		memcpy(page_data,&user_count_struct,sizeof(user_count_struct));
   10324:	4a84      	ldr	r2, [pc, #528]	; (10538 <init_eeprom+0x3e8>)
   10326:	4b99      	ldr	r3, [pc, #612]	; (1058c <init_eeprom+0x43c>)
   10328:	0010      	movs	r0, r2
   1032a:	0019      	movs	r1, r3
   1032c:	2308      	movs	r3, #8
   1032e:	001a      	movs	r2, r3
   10330:	4b84      	ldr	r3, [pc, #528]	; (10544 <init_eeprom+0x3f4>)
   10332:	4798      	blx	r3
		eeprom_emulator_write_page(USER_COUNTER_PAGE, page_data);
   10334:	4b80      	ldr	r3, [pc, #512]	; (10538 <init_eeprom+0x3e8>)
   10336:	0019      	movs	r1, r3
   10338:	2008      	movs	r0, #8
   1033a:	4b86      	ldr	r3, [pc, #536]	; (10554 <init_eeprom+0x404>)
   1033c:	4798      	blx	r3
		eeprom_emulator_commit_page_buffer();
   1033e:	4b86      	ldr	r3, [pc, #536]	; (10558 <init_eeprom+0x408>)
   10340:	4798      	blx	r3
	}
	//////////////////////////////////////////////////////////////////////////
	config_mobile_no_ee(ADMIN_1_MOBILE_NUMBER_PAGE,"7041196959");
   10342:	4b93      	ldr	r3, [pc, #588]	; (10590 <init_eeprom+0x440>)
   10344:	0019      	movs	r1, r3
   10346:	2003      	movs	r0, #3
   10348:	4b92      	ldr	r3, [pc, #584]	; (10594 <init_eeprom+0x444>)
   1034a:	4798      	blx	r3
	config_mobile_no_ee(ADMIN_2_MOBILE_NUMBER_PAGE,"7698439201");
   1034c:	4b92      	ldr	r3, [pc, #584]	; (10598 <init_eeprom+0x448>)
   1034e:	0019      	movs	r1, r3
   10350:	2004      	movs	r0, #4
   10352:	4b90      	ldr	r3, [pc, #576]	; (10594 <init_eeprom+0x444>)
   10354:	4798      	blx	r3
	config_mobile_no_ee(ADMIN_3_MOBILE_NUMBER_PAGE,"7383614214");
   10356:	4b91      	ldr	r3, [pc, #580]	; (1059c <init_eeprom+0x44c>)
   10358:	0019      	movs	r1, r3
   1035a:	2005      	movs	r0, #5
   1035c:	4b8d      	ldr	r3, [pc, #564]	; (10594 <init_eeprom+0x444>)
   1035e:	4798      	blx	r3
	config_mobile_no_ee(ADMIN_4_MOBILE_NUMBER_PAGE,"7383622678");
   10360:	4b8f      	ldr	r3, [pc, #572]	; (105a0 <init_eeprom+0x450>)
   10362:	0019      	movs	r1, r3
   10364:	2006      	movs	r0, #6
   10366:	4b8b      	ldr	r3, [pc, #556]	; (10594 <init_eeprom+0x444>)
   10368:	4798      	blx	r3
	//config_mobile_no_ee(ADMIN_5_MOBILE_NUMBER_PAGE,"9586135978");
	config_mobile_no_ee(ADMIN_5_MOBILE_NUMBER_PAGE,"9586135978");
   1036a:	4b8e      	ldr	r3, [pc, #568]	; (105a4 <init_eeprom+0x454>)
   1036c:	0019      	movs	r1, r3
   1036e:	2007      	movs	r0, #7
   10370:	4b88      	ldr	r3, [pc, #544]	; (10594 <init_eeprom+0x444>)
   10372:	4798      	blx	r3
	//////////////////////////////////////////////////////////////////////////
	config_mobile_no_ee(USER_1_MOBILE_NUMBER_PAGE ,"0000000000");
   10374:	4b76      	ldr	r3, [pc, #472]	; (10550 <init_eeprom+0x400>)
   10376:	0019      	movs	r1, r3
   10378:	2009      	movs	r0, #9
   1037a:	4b86      	ldr	r3, [pc, #536]	; (10594 <init_eeprom+0x444>)
   1037c:	4798      	blx	r3
	config_mobile_no_ee(USER_2_MOBILE_NUMBER_PAGE ,"0000000000");
   1037e:	4b74      	ldr	r3, [pc, #464]	; (10550 <init_eeprom+0x400>)
   10380:	0019      	movs	r1, r3
   10382:	200a      	movs	r0, #10
   10384:	4b83      	ldr	r3, [pc, #524]	; (10594 <init_eeprom+0x444>)
   10386:	4798      	blx	r3
	config_mobile_no_ee(USER_3_MOBILE_NUMBER_PAGE ,"0000000000");
   10388:	4b71      	ldr	r3, [pc, #452]	; (10550 <init_eeprom+0x400>)
   1038a:	0019      	movs	r1, r3
   1038c:	200b      	movs	r0, #11
   1038e:	4b81      	ldr	r3, [pc, #516]	; (10594 <init_eeprom+0x444>)
   10390:	4798      	blx	r3
	config_mobile_no_ee(USER_4_MOBILE_NUMBER_PAGE ,"0000000000");
   10392:	4b6f      	ldr	r3, [pc, #444]	; (10550 <init_eeprom+0x400>)
   10394:	0019      	movs	r1, r3
   10396:	200c      	movs	r0, #12
   10398:	4b7e      	ldr	r3, [pc, #504]	; (10594 <init_eeprom+0x444>)
   1039a:	4798      	blx	r3
	config_mobile_no_ee(USER_5_MOBILE_NUMBER_PAGE ,"0000000000");
   1039c:	4b6c      	ldr	r3, [pc, #432]	; (10550 <init_eeprom+0x400>)
   1039e:	0019      	movs	r1, r3
   103a0:	200d      	movs	r0, #13
   103a2:	4b7c      	ldr	r3, [pc, #496]	; (10594 <init_eeprom+0x444>)
   103a4:	4798      	blx	r3
	config_mobile_no_ee(USER_6_MOBILE_NUMBER_PAGE ,"0000000000");
   103a6:	4b6a      	ldr	r3, [pc, #424]	; (10550 <init_eeprom+0x400>)
   103a8:	0019      	movs	r1, r3
   103aa:	200e      	movs	r0, #14
   103ac:	4b79      	ldr	r3, [pc, #484]	; (10594 <init_eeprom+0x444>)
   103ae:	4798      	blx	r3
	config_mobile_no_ee(USER_7_MOBILE_NUMBER_PAGE ,"0000000000");
   103b0:	4b67      	ldr	r3, [pc, #412]	; (10550 <init_eeprom+0x400>)
   103b2:	0019      	movs	r1, r3
   103b4:	200f      	movs	r0, #15
   103b6:	4b77      	ldr	r3, [pc, #476]	; (10594 <init_eeprom+0x444>)
   103b8:	4798      	blx	r3
	config_mobile_no_ee(USER_8_MOBILE_NUMBER_PAGE ,"0000000000");
   103ba:	4b65      	ldr	r3, [pc, #404]	; (10550 <init_eeprom+0x400>)
   103bc:	0019      	movs	r1, r3
   103be:	2010      	movs	r0, #16
   103c0:	4b74      	ldr	r3, [pc, #464]	; (10594 <init_eeprom+0x444>)
   103c2:	4798      	blx	r3
	config_mobile_no_ee(USER_9_MOBILE_NUMBER_PAGE ,"0000000000");
   103c4:	4b62      	ldr	r3, [pc, #392]	; (10550 <init_eeprom+0x400>)
   103c6:	0019      	movs	r1, r3
   103c8:	2011      	movs	r0, #17
   103ca:	4b72      	ldr	r3, [pc, #456]	; (10594 <init_eeprom+0x444>)
   103cc:	4798      	blx	r3
	config_mobile_no_ee(USER_10_MOBILE_NUMBER_PAGE,"0000000000");
   103ce:	4b60      	ldr	r3, [pc, #384]	; (10550 <init_eeprom+0x400>)
   103d0:	0019      	movs	r1, r3
   103d2:	2012      	movs	r0, #18
   103d4:	4b6f      	ldr	r3, [pc, #444]	; (10594 <init_eeprom+0x444>)
   103d6:	4798      	blx	r3
	config_mobile_no_ee(USER_11_MOBILE_NUMBER_PAGE,"0000000000");
   103d8:	4b5d      	ldr	r3, [pc, #372]	; (10550 <init_eeprom+0x400>)
   103da:	0019      	movs	r1, r3
   103dc:	2013      	movs	r0, #19
   103de:	4b6d      	ldr	r3, [pc, #436]	; (10594 <init_eeprom+0x444>)
   103e0:	4798      	blx	r3
	config_mobile_no_ee(USER_12_MOBILE_NUMBER_PAGE,"0000000000");
   103e2:	4b5b      	ldr	r3, [pc, #364]	; (10550 <init_eeprom+0x400>)
   103e4:	0019      	movs	r1, r3
   103e6:	2014      	movs	r0, #20
   103e8:	4b6a      	ldr	r3, [pc, #424]	; (10594 <init_eeprom+0x444>)
   103ea:	4798      	blx	r3
	config_mobile_no_ee(USER_13_MOBILE_NUMBER_PAGE,"0000000000");
   103ec:	4b58      	ldr	r3, [pc, #352]	; (10550 <init_eeprom+0x400>)
   103ee:	0019      	movs	r1, r3
   103f0:	2015      	movs	r0, #21
   103f2:	4b68      	ldr	r3, [pc, #416]	; (10594 <init_eeprom+0x444>)
   103f4:	4798      	blx	r3
	config_mobile_no_ee(USER_14_MOBILE_NUMBER_PAGE,"0000000000");
   103f6:	4b56      	ldr	r3, [pc, #344]	; (10550 <init_eeprom+0x400>)
   103f8:	0019      	movs	r1, r3
   103fa:	2016      	movs	r0, #22
   103fc:	4b65      	ldr	r3, [pc, #404]	; (10594 <init_eeprom+0x444>)
   103fe:	4798      	blx	r3
	config_mobile_no_ee(USER_15_MOBILE_NUMBER_PAGE,"0000000000");
   10400:	4b53      	ldr	r3, [pc, #332]	; (10550 <init_eeprom+0x400>)
   10402:	0019      	movs	r1, r3
   10404:	2017      	movs	r0, #23
   10406:	4b63      	ldr	r3, [pc, #396]	; (10594 <init_eeprom+0x444>)
   10408:	4798      	blx	r3
	
	//////////////////////////////////////////////////////////////////////////
	eeprom_emulator_read_page(ALTARNATE_NUMBERS_PAGE, page_data);
   1040a:	4b4b      	ldr	r3, [pc, #300]	; (10538 <init_eeprom+0x3e8>)
   1040c:	0019      	movs	r1, r3
   1040e:	2018      	movs	r0, #24
   10410:	4b4a      	ldr	r3, [pc, #296]	; (1053c <init_eeprom+0x3ec>)
   10412:	4798      	blx	r3
	memcpy(&alternateNumber_struct,page_data,sizeof(alternateNumber_struct));
   10414:	4a64      	ldr	r2, [pc, #400]	; (105a8 <init_eeprom+0x458>)
   10416:	4b48      	ldr	r3, [pc, #288]	; (10538 <init_eeprom+0x3e8>)
   10418:	0010      	movs	r0, r2
   1041a:	0019      	movs	r1, r3
   1041c:	2318      	movs	r3, #24
   1041e:	001a      	movs	r2, r3
   10420:	4b48      	ldr	r3, [pc, #288]	; (10544 <init_eeprom+0x3f4>)
   10422:	4798      	blx	r3
	if (alternateNumber_struct.u8tfirst_time_write_ee != 85)
   10424:	4b60      	ldr	r3, [pc, #384]	; (105a8 <init_eeprom+0x458>)
   10426:	781b      	ldrb	r3, [r3, #0]
   10428:	2b55      	cmp	r3, #85	; 0x55
   1042a:	d025      	beq.n	10478 <init_eeprom+0x328>
	{
		alternateNumber_struct.u8tfirst_time_write_ee = 85;
   1042c:	4b5e      	ldr	r3, [pc, #376]	; (105a8 <init_eeprom+0x458>)
   1042e:	2255      	movs	r2, #85	; 0x55
   10430:	701a      	strb	r2, [r3, #0]
		
		alternateNumber_struct.alterNumberPresent = false;
   10432:	4b5d      	ldr	r3, [pc, #372]	; (105a8 <init_eeprom+0x458>)
   10434:	2200      	movs	r2, #0
   10436:	709a      	strb	r2, [r3, #2]
		alternateNumber_struct.alterNumberSetting = false;
   10438:	4b5b      	ldr	r3, [pc, #364]	; (105a8 <init_eeprom+0x458>)
   1043a:	2200      	movs	r2, #0
   1043c:	705a      	strb	r2, [r3, #1]
		
		memset(alternateNumber_struct.alternateNumber_ee, '\0', sizeof(alternateNumber_struct.alternateNumber_ee));
   1043e:	4b5b      	ldr	r3, [pc, #364]	; (105ac <init_eeprom+0x45c>)
   10440:	2214      	movs	r2, #20
   10442:	2100      	movs	r1, #0
   10444:	0018      	movs	r0, r3
   10446:	4b41      	ldr	r3, [pc, #260]	; (1054c <init_eeprom+0x3fc>)
   10448:	4798      	blx	r3
		strcpy(alternateNumber_struct.alternateNumber_ee,"0000000000");
   1044a:	4a58      	ldr	r2, [pc, #352]	; (105ac <init_eeprom+0x45c>)
   1044c:	4b40      	ldr	r3, [pc, #256]	; (10550 <init_eeprom+0x400>)
   1044e:	0010      	movs	r0, r2
   10450:	0019      	movs	r1, r3
   10452:	230b      	movs	r3, #11
   10454:	001a      	movs	r2, r3
   10456:	4b3b      	ldr	r3, [pc, #236]	; (10544 <init_eeprom+0x3f4>)
   10458:	4798      	blx	r3
		
		memcpy(page_data,&alternateNumber_struct,sizeof(alternateNumber_struct));
   1045a:	4a37      	ldr	r2, [pc, #220]	; (10538 <init_eeprom+0x3e8>)
   1045c:	4b52      	ldr	r3, [pc, #328]	; (105a8 <init_eeprom+0x458>)
   1045e:	0010      	movs	r0, r2
   10460:	0019      	movs	r1, r3
   10462:	2318      	movs	r3, #24
   10464:	001a      	movs	r2, r3
   10466:	4b37      	ldr	r3, [pc, #220]	; (10544 <init_eeprom+0x3f4>)
   10468:	4798      	blx	r3
		eeprom_emulator_write_page(ALTARNATE_NUMBERS_PAGE, page_data);
   1046a:	4b33      	ldr	r3, [pc, #204]	; (10538 <init_eeprom+0x3e8>)
   1046c:	0019      	movs	r1, r3
   1046e:	2018      	movs	r0, #24
   10470:	4b38      	ldr	r3, [pc, #224]	; (10554 <init_eeprom+0x404>)
   10472:	4798      	blx	r3
		eeprom_emulator_commit_page_buffer();
   10474:	4b38      	ldr	r3, [pc, #224]	; (10558 <init_eeprom+0x408>)
   10476:	4798      	blx	r3
	}
	//////////////////////////////////////////////////////////////////////////
	eeprom_emulator_read_page(M2M_NUMBERS_PAGE, page_data);
   10478:	4b2f      	ldr	r3, [pc, #188]	; (10538 <init_eeprom+0x3e8>)
   1047a:	0019      	movs	r1, r3
   1047c:	2019      	movs	r0, #25
   1047e:	4b2f      	ldr	r3, [pc, #188]	; (1053c <init_eeprom+0x3ec>)
   10480:	4798      	blx	r3
	memcpy(&m2m_Numbers_struct,page_data,sizeof(m2m_Numbers_struct));
   10482:	4a4b      	ldr	r2, [pc, #300]	; (105b0 <init_eeprom+0x460>)
   10484:	4b2c      	ldr	r3, [pc, #176]	; (10538 <init_eeprom+0x3e8>)
   10486:	0010      	movs	r0, r2
   10488:	0019      	movs	r1, r3
   1048a:	2330      	movs	r3, #48	; 0x30
   1048c:	001a      	movs	r2, r3
   1048e:	4b2d      	ldr	r3, [pc, #180]	; (10544 <init_eeprom+0x3f4>)
   10490:	4798      	blx	r3
	if (m2m_Numbers_struct.u8tfirst_time_write_ee != 85)
   10492:	4b47      	ldr	r3, [pc, #284]	; (105b0 <init_eeprom+0x460>)
   10494:	781b      	ldrb	r3, [r3, #0]
   10496:	2b55      	cmp	r3, #85	; 0x55
   10498:	d03c      	beq.n	10514 <init_eeprom+0x3c4>
	{
		m2m_Numbers_struct.u8tfirst_time_write_ee = 85;
   1049a:	4b45      	ldr	r3, [pc, #276]	; (105b0 <init_eeprom+0x460>)
   1049c:	2255      	movs	r2, #85	; 0x55
   1049e:	701a      	strb	r2, [r3, #0]
		
		memset(m2m_Numbers_struct.m2mNumber_ee, '\0', sizeof(m2m_Numbers_struct.m2mNumber_ee));
   104a0:	4b44      	ldr	r3, [pc, #272]	; (105b4 <init_eeprom+0x464>)
   104a2:	2214      	movs	r2, #20
   104a4:	2100      	movs	r1, #0
   104a6:	0018      	movs	r0, r3
   104a8:	4b28      	ldr	r3, [pc, #160]	; (1054c <init_eeprom+0x3fc>)
   104aa:	4798      	blx	r3
		strcpy(m2m_Numbers_struct.m2mNumber_ee,"0000000000");
   104ac:	4a41      	ldr	r2, [pc, #260]	; (105b4 <init_eeprom+0x464>)
   104ae:	4b28      	ldr	r3, [pc, #160]	; (10550 <init_eeprom+0x400>)
   104b0:	0010      	movs	r0, r2
   104b2:	0019      	movs	r1, r3
   104b4:	230b      	movs	r3, #11
   104b6:	001a      	movs	r2, r3
   104b8:	4b22      	ldr	r3, [pc, #136]	; (10544 <init_eeprom+0x3f4>)
   104ba:	4798      	blx	r3
		
		memset(m2m_Numbers_struct.m2mremoteNumber_ee, '\0', sizeof(m2m_Numbers_struct.m2mremoteNumber_ee));
   104bc:	4b3e      	ldr	r3, [pc, #248]	; (105b8 <init_eeprom+0x468>)
   104be:	2214      	movs	r2, #20
   104c0:	2100      	movs	r1, #0
   104c2:	0018      	movs	r0, r3
   104c4:	4b21      	ldr	r3, [pc, #132]	; (1054c <init_eeprom+0x3fc>)
   104c6:	4798      	blx	r3
		strcpy(m2m_Numbers_struct.m2mremoteNumber_ee,"0000000000");
   104c8:	4a3b      	ldr	r2, [pc, #236]	; (105b8 <init_eeprom+0x468>)
   104ca:	4b21      	ldr	r3, [pc, #132]	; (10550 <init_eeprom+0x400>)
   104cc:	0010      	movs	r0, r2
   104ce:	0019      	movs	r1, r3
   104d0:	230b      	movs	r3, #11
   104d2:	001a      	movs	r2, r3
   104d4:	4b1b      	ldr	r3, [pc, #108]	; (10544 <init_eeprom+0x3f4>)
   104d6:	4798      	blx	r3
		
		m2m_Numbers_struct.m2mPresent			= false;
   104d8:	4b35      	ldr	r3, [pc, #212]	; (105b0 <init_eeprom+0x460>)
   104da:	2200      	movs	r2, #0
   104dc:	705a      	strb	r2, [r3, #1]
		m2m_Numbers_struct.m2mVerified			= false;
   104de:	4b34      	ldr	r3, [pc, #208]	; (105b0 <init_eeprom+0x460>)
   104e0:	2200      	movs	r2, #0
   104e2:	709a      	strb	r2, [r3, #2]
		
		m2m_Numbers_struct.m2mRemotePresent		= false;
   104e4:	4b32      	ldr	r3, [pc, #200]	; (105b0 <init_eeprom+0x460>)
   104e6:	2200      	movs	r2, #0
   104e8:	70da      	strb	r2, [r3, #3]
		m2m_Numbers_struct.m2mRemoteVerified	= false;
   104ea:	4b31      	ldr	r3, [pc, #196]	; (105b0 <init_eeprom+0x460>)
   104ec:	2200      	movs	r2, #0
   104ee:	711a      	strb	r2, [r3, #4]
		
		m2m_Numbers_struct.m2mSetting			= false;
   104f0:	4b2f      	ldr	r3, [pc, #188]	; (105b0 <init_eeprom+0x460>)
   104f2:	2200      	movs	r2, #0
   104f4:	715a      	strb	r2, [r3, #5]
		
		memcpy(page_data,&m2m_Numbers_struct,sizeof(m2m_Numbers_struct));
   104f6:	4a10      	ldr	r2, [pc, #64]	; (10538 <init_eeprom+0x3e8>)
   104f8:	4b2d      	ldr	r3, [pc, #180]	; (105b0 <init_eeprom+0x460>)
   104fa:	0010      	movs	r0, r2
   104fc:	0019      	movs	r1, r3
   104fe:	2330      	movs	r3, #48	; 0x30
   10500:	001a      	movs	r2, r3
   10502:	4b10      	ldr	r3, [pc, #64]	; (10544 <init_eeprom+0x3f4>)
   10504:	4798      	blx	r3
		eeprom_emulator_write_page(M2M_NUMBERS_PAGE, page_data);
   10506:	4b0c      	ldr	r3, [pc, #48]	; (10538 <init_eeprom+0x3e8>)
   10508:	0019      	movs	r1, r3
   1050a:	2019      	movs	r0, #25
   1050c:	4b11      	ldr	r3, [pc, #68]	; (10554 <init_eeprom+0x404>)
   1050e:	4798      	blx	r3
		eeprom_emulator_commit_page_buffer();
   10510:	4b11      	ldr	r3, [pc, #68]	; (10558 <init_eeprom+0x408>)
   10512:	4798      	blx	r3
	}
	//////////////////////////////////////////////////////////////////////////
	eeprom_emulator_read_page(USER_SETTING_PARAMETERS_PAGE, page_data);
   10514:	4b08      	ldr	r3, [pc, #32]	; (10538 <init_eeprom+0x3e8>)
   10516:	0019      	movs	r1, r3
   10518:	201a      	movs	r0, #26
   1051a:	4b08      	ldr	r3, [pc, #32]	; (1053c <init_eeprom+0x3ec>)
   1051c:	4798      	blx	r3
	memcpy(&user_settings_parameter_struct,page_data,sizeof(user_settings_parameter_struct));
   1051e:	4906      	ldr	r1, [pc, #24]	; (10538 <init_eeprom+0x3e8>)
   10520:	4b26      	ldr	r3, [pc, #152]	; (105bc <init_eeprom+0x46c>)
   10522:	2230      	movs	r2, #48	; 0x30
   10524:	0018      	movs	r0, r3
   10526:	4b07      	ldr	r3, [pc, #28]	; (10544 <init_eeprom+0x3f4>)
   10528:	4798      	blx	r3
	if (user_settings_parameter_struct.u8tfirst_time_write_ee != 85)
   1052a:	4b24      	ldr	r3, [pc, #144]	; (105bc <init_eeprom+0x46c>)
   1052c:	781b      	ldrb	r3, [r3, #0]
   1052e:	b2db      	uxtb	r3, r3
   10530:	e046      	b.n	105c0 <init_eeprom+0x470>
   10532:	46c0      	nop			; (mov r8, r8)
   10534:	00010115 	.word	0x00010115
   10538:	20000784 	.word	0x20000784
   1053c:	0002385d 	.word	0x0002385d
   10540:	200007f8 	.word	0x200007f8
   10544:	00028b21 	.word	0x00028b21
   10548:	20000804 	.word	0x20000804
   1054c:	00028b57 	.word	0x00028b57
   10550:	00029758 	.word	0x00029758
   10554:	00023751 	.word	0x00023751
   10558:	000238f9 	.word	0x000238f9
   1055c:	2000071c 	.word	0x2000071c
   10560:	20000721 	.word	0x20000721
   10564:	00029764 	.word	0x00029764
   10568:	2000073f 	.word	0x2000073f
   1056c:	00029774 	.word	0x00029774
   10570:	200007c0 	.word	0x200007c0
   10574:	200007c5 	.word	0x200007c5
   10578:	00029780 	.word	0x00029780
   1057c:	200007e5 	.word	0x200007e5
   10580:	200007d5 	.word	0x200007d5
   10584:	00029790 	.word	0x00029790
   10588:	0002979c 	.word	0x0002979c
   1058c:	20000814 	.word	0x20000814
   10590:	000297ac 	.word	0x000297ac
   10594:	0001072d 	.word	0x0001072d
   10598:	000297b8 	.word	0x000297b8
   1059c:	000297c4 	.word	0x000297c4
   105a0:	000297d0 	.word	0x000297d0
   105a4:	000297dc 	.word	0x000297dc
   105a8:	2000083c 	.word	0x2000083c
   105ac:	20000840 	.word	0x20000840
   105b0:	20000754 	.word	0x20000754
   105b4:	2000075c 	.word	0x2000075c
   105b8:	20000770 	.word	0x20000770
   105bc:	20000854 	.word	0x20000854
   105c0:	2b55      	cmp	r3, #85	; 0x55
   105c2:	d065      	beq.n	10690 <init_eeprom+0x540>
	{
		user_settings_parameter_struct.u8tfirst_time_write_ee		= 85;
   105c4:	4b51      	ldr	r3, [pc, #324]	; (1070c <init_eeprom+0x5bc>)
   105c6:	2255      	movs	r2, #85	; 0x55
   105c8:	701a      	strb	r2, [r3, #0]
		
		user_settings_parameter_struct.autoStartAddress				= false;
   105ca:	4b50      	ldr	r3, [pc, #320]	; (1070c <init_eeprom+0x5bc>)
   105cc:	2200      	movs	r2, #0
   105ce:	705a      	strb	r2, [r3, #1]
		user_settings_parameter_struct.autoStartTimeAddress			= 50;
   105d0:	4b4e      	ldr	r3, [pc, #312]	; (1070c <init_eeprom+0x5bc>)
   105d2:	2232      	movs	r2, #50	; 0x32
   105d4:	805a      	strh	r2, [r3, #2]
		user_settings_parameter_struct.dndAddress					= DND_OFF;
   105d6:	4b4d      	ldr	r3, [pc, #308]	; (1070c <init_eeprom+0x5bc>)
   105d8:	224f      	movs	r2, #79	; 0x4f
   105da:	711a      	strb	r2, [r3, #4]
		user_settings_parameter_struct.responseAddress				= 'T';
   105dc:	4b4b      	ldr	r3, [pc, #300]	; (1070c <init_eeprom+0x5bc>)
   105de:	2254      	movs	r2, #84	; 0x54
   105e0:	715a      	strb	r2, [r3, #5]
		user_settings_parameter_struct.starDeltaTimerAddress		= 2;
   105e2:	4b4a      	ldr	r3, [pc, #296]	; (1070c <init_eeprom+0x5bc>)
   105e4:	2202      	movs	r2, #2
   105e6:	80da      	strh	r2, [r3, #6]
		//user_settings_parameter_struct.bypassAddress				= false;
		user_settings_parameter_struct.eventStageAddress			= 0;
   105e8:	4b48      	ldr	r3, [pc, #288]	; (1070c <init_eeprom+0x5bc>)
   105ea:	2200      	movs	r2, #0
   105ec:	721a      	strb	r2, [r3, #8]
		user_settings_parameter_struct.noCallAddress				= false;
   105ee:	4b47      	ldr	r3, [pc, #284]	; (1070c <init_eeprom+0x5bc>)
   105f0:	2200      	movs	r2, #0
   105f2:	725a      	strb	r2, [r3, #9]
		user_settings_parameter_struct.noCallStartTimeHourAddress	= 0;
   105f4:	4b45      	ldr	r3, [pc, #276]	; (1070c <init_eeprom+0x5bc>)
   105f6:	2200      	movs	r2, #0
   105f8:	729a      	strb	r2, [r3, #10]
		user_settings_parameter_struct.noCallStartTimeMinuteAddress = 0;
   105fa:	4b44      	ldr	r3, [pc, #272]	; (1070c <init_eeprom+0x5bc>)
   105fc:	2200      	movs	r2, #0
   105fe:	72da      	strb	r2, [r3, #11]
		user_settings_parameter_struct.noCallStopTimeHourAddress	= 0;
   10600:	4b42      	ldr	r3, [pc, #264]	; (1070c <init_eeprom+0x5bc>)
   10602:	2200      	movs	r2, #0
   10604:	731a      	strb	r2, [r3, #12]
		user_settings_parameter_struct.noCallStopTimeMinuteAddress	= 0;
   10606:	4b41      	ldr	r3, [pc, #260]	; (1070c <init_eeprom+0x5bc>)
   10608:	2200      	movs	r2, #0
   1060a:	735a      	strb	r2, [r3, #13]
		user_settings_parameter_struct.lowVoltAddress				= 0;
   1060c:	4b3f      	ldr	r3, [pc, #252]	; (1070c <init_eeprom+0x5bc>)
   1060e:	2200      	movs	r2, #0
   10610:	739a      	strb	r2, [r3, #14]
		user_settings_parameter_struct.currentDetectionAddress		= false;
   10612:	4b3e      	ldr	r3, [pc, #248]	; (1070c <init_eeprom+0x5bc>)
   10614:	2200      	movs	r2, #0
   10616:	73da      	strb	r2, [r3, #15]
		user_settings_parameter_struct.normalLoadAddress			= 0;
   10618:	4b3c      	ldr	r3, [pc, #240]	; (1070c <init_eeprom+0x5bc>)
   1061a:	2200      	movs	r2, #0
   1061c:	611a      	str	r2, [r3, #16]
		user_settings_parameter_struct.overloadAddress				= 0;
   1061e:	4b3b      	ldr	r3, [pc, #236]	; (1070c <init_eeprom+0x5bc>)
   10620:	2200      	movs	r2, #0
   10622:	615a      	str	r2, [r3, #20]
		user_settings_parameter_struct.underloadAddress				= 0;
   10624:	4b39      	ldr	r3, [pc, #228]	; (1070c <init_eeprom+0x5bc>)
   10626:	2200      	movs	r2, #0
   10628:	619a      	str	r2, [r3, #24]
		user_settings_parameter_struct.underloadPerAddress			= 85;
   1062a:	4b38      	ldr	r3, [pc, #224]	; (1070c <init_eeprom+0x5bc>)
   1062c:	2255      	movs	r2, #85	; 0x55
   1062e:	771a      	strb	r2, [r3, #28]
		user_settings_parameter_struct.overloadPerAddress			= 120;
   10630:	4b36      	ldr	r3, [pc, #216]	; (1070c <init_eeprom+0x5bc>)
   10632:	2278      	movs	r2, #120	; 0x78
   10634:	775a      	strb	r2, [r3, #29]
		//user_settings_parameter_struct.jumperSettingAddress			= 1;
		user_settings_parameter_struct.preventOverFlowAddress		= false;
   10636:	4b35      	ldr	r3, [pc, #212]	; (1070c <init_eeprom+0x5bc>)
   10638:	2200      	movs	r2, #0
   1063a:	779a      	strb	r2, [r3, #30]
		user_settings_parameter_struct.waterBypassAddress			= false;
   1063c:	4b33      	ldr	r3, [pc, #204]	; (1070c <init_eeprom+0x5bc>)
   1063e:	2200      	movs	r2, #0
   10640:	77da      	strb	r2, [r3, #31]
		
		user_settings_parameter_struct.detectSinglePhasing			= true;
   10642:	4b32      	ldr	r3, [pc, #200]	; (1070c <init_eeprom+0x5bc>)
   10644:	2220      	movs	r2, #32
   10646:	2101      	movs	r1, #1
   10648:	5499      	strb	r1, [r3, r2]
		user_settings_parameter_struct.singlePhasingVoltage			= 80;
   1064a:	4b30      	ldr	r3, [pc, #192]	; (1070c <init_eeprom+0x5bc>)
   1064c:	2250      	movs	r2, #80	; 0x50
   1064e:	845a      	strh	r2, [r3, #34]	; 0x22
		user_settings_parameter_struct.detectPhaseSequence			= true;
   10650:	4b2e      	ldr	r3, [pc, #184]	; (1070c <init_eeprom+0x5bc>)
   10652:	2224      	movs	r2, #36	; 0x24
   10654:	2101      	movs	r1, #1
   10656:	5499      	strb	r1, [r3, r2]
		user_settings_parameter_struct.detectMotorFeedback			= MOTORFEEDBACK_DETECTION_ON;
   10658:	4b2c      	ldr	r3, [pc, #176]	; (1070c <init_eeprom+0x5bc>)
   1065a:	2225      	movs	r2, #37	; 0x25
   1065c:	2102      	movs	r1, #2
   1065e:	5499      	strb	r1, [r3, r2]
		user_settings_parameter_struct.over_under_DetectionMethod	= MOTOR_UNDEROVER_DETECTION_CURRENT;
   10660:	4b2a      	ldr	r3, [pc, #168]	; (1070c <init_eeprom+0x5bc>)
   10662:	2226      	movs	r2, #38	; 0x26
   10664:	2102      	movs	r1, #2
   10666:	5499      	strb	r1, [r3, r2]
		user_settings_parameter_struct.motorVoltageBypass			= MOTOR_VOLTAGE_BYPASS_OFF;
   10668:	4b28      	ldr	r3, [pc, #160]	; (1070c <init_eeprom+0x5bc>)
   1066a:	2227      	movs	r2, #39	; 0x27
   1066c:	2100      	movs	r1, #0
   1066e:	5499      	strb	r1, [r3, r2]
		user_settings_parameter_struct.motorVoltageBypassTime		= 10000L;
   10670:	4b26      	ldr	r3, [pc, #152]	; (1070c <init_eeprom+0x5bc>)
   10672:	4a27      	ldr	r2, [pc, #156]	; (10710 <init_eeprom+0x5c0>)
   10674:	629a      	str	r2, [r3, #40]	; 0x28

		memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
   10676:	4925      	ldr	r1, [pc, #148]	; (1070c <init_eeprom+0x5bc>)
   10678:	4b26      	ldr	r3, [pc, #152]	; (10714 <init_eeprom+0x5c4>)
   1067a:	2230      	movs	r2, #48	; 0x30
   1067c:	0018      	movs	r0, r3
   1067e:	4b26      	ldr	r3, [pc, #152]	; (10718 <init_eeprom+0x5c8>)
   10680:	4798      	blx	r3
		eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
   10682:	4b24      	ldr	r3, [pc, #144]	; (10714 <init_eeprom+0x5c4>)
   10684:	0019      	movs	r1, r3
   10686:	201a      	movs	r0, #26
   10688:	4b24      	ldr	r3, [pc, #144]	; (1071c <init_eeprom+0x5cc>)
   1068a:	4798      	blx	r3
		eeprom_emulator_commit_page_buffer();
   1068c:	4b24      	ldr	r3, [pc, #144]	; (10720 <init_eeprom+0x5d0>)
   1068e:	4798      	blx	r3
	}
	//////////////////////////////////////////////////////////////////////////
	eeprom_emulator_read_page(FACTORY_SETTING_PARAMETERS_PAGE, page_data);
   10690:	4b20      	ldr	r3, [pc, #128]	; (10714 <init_eeprom+0x5c4>)
   10692:	0019      	movs	r1, r3
   10694:	201b      	movs	r0, #27
   10696:	4b23      	ldr	r3, [pc, #140]	; (10724 <init_eeprom+0x5d4>)
   10698:	4798      	blx	r3
	memcpy(&factory_settings_parameter_struct,page_data,sizeof(factory_settings_parameter_struct));
   1069a:	491e      	ldr	r1, [pc, #120]	; (10714 <init_eeprom+0x5c4>)
   1069c:	4b22      	ldr	r3, [pc, #136]	; (10728 <init_eeprom+0x5d8>)
   1069e:	2210      	movs	r2, #16
   106a0:	0018      	movs	r0, r3
   106a2:	4b1d      	ldr	r3, [pc, #116]	; (10718 <init_eeprom+0x5c8>)
   106a4:	4798      	blx	r3
	if (factory_settings_parameter_struct.u8tfirst_time_write_ee != 85)
   106a6:	4b20      	ldr	r3, [pc, #128]	; (10728 <init_eeprom+0x5d8>)
   106a8:	781b      	ldrb	r3, [r3, #0]
   106aa:	2b55      	cmp	r3, #85	; 0x55
   106ac:	d02a      	beq.n	10704 <init_eeprom+0x5b4>
	{
		factory_settings_parameter_struct.u8tfirst_time_write_ee	= 85;
   106ae:	4b1e      	ldr	r3, [pc, #120]	; (10728 <init_eeprom+0x5d8>)
   106b0:	2255      	movs	r2, #85	; 0x55
   106b2:	701a      	strb	r2, [r3, #0]
		factory_settings_parameter_struct.AMPERE_SPEAK				= true;
   106b4:	4b1c      	ldr	r3, [pc, #112]	; (10728 <init_eeprom+0x5d8>)
   106b6:	2201      	movs	r2, #1
   106b8:	709a      	strb	r2, [r3, #2]
		factory_settings_parameter_struct.ENABLE_CURRENT			= true;
   106ba:	4b1b      	ldr	r3, [pc, #108]	; (10728 <init_eeprom+0x5d8>)
   106bc:	2201      	movs	r2, #1
   106be:	705a      	strb	r2, [r3, #1]
		factory_settings_parameter_struct.DUAL_LEVEL			    = false;	//= true;
   106c0:	4b19      	ldr	r3, [pc, #100]	; (10728 <init_eeprom+0x5d8>)
   106c2:	2200      	movs	r2, #0
   106c4:	719a      	strb	r2, [r3, #6]
		factory_settings_parameter_struct.ENABLE_WATER				= false;	//= true;
   106c6:	4b18      	ldr	r3, [pc, #96]	; (10728 <init_eeprom+0x5d8>)
   106c8:	2200      	movs	r2, #0
   106ca:	715a      	strb	r2, [r3, #5]
		factory_settings_parameter_struct.ENABLE_GP					= false;	// = true;
   106cc:	4b16      	ldr	r3, [pc, #88]	; (10728 <init_eeprom+0x5d8>)
   106ce:	2200      	movs	r2, #0
   106d0:	711a      	strb	r2, [r3, #4]
		factory_settings_parameter_struct.ENABLE_M2M				= false;
   106d2:	4b15      	ldr	r3, [pc, #84]	; (10728 <init_eeprom+0x5d8>)
   106d4:	2200      	movs	r2, #0
   106d6:	70da      	strb	r2, [r3, #3]
		factory_settings_parameter_struct.NOLEVELCHANGECALL			= false;
   106d8:	4b13      	ldr	r3, [pc, #76]	; (10728 <init_eeprom+0x5d8>)
   106da:	2200      	movs	r2, #0
   106dc:	71da      	strb	r2, [r3, #7]
		
		factory_settings_parameter_struct.DeviceId_ee				= 0;
   106de:	4b12      	ldr	r3, [pc, #72]	; (10728 <init_eeprom+0x5d8>)
   106e0:	2200      	movs	r2, #0
   106e2:	609a      	str	r2, [r3, #8]
		factory_settings_parameter_struct.dateCode					= 0;
   106e4:	4b10      	ldr	r3, [pc, #64]	; (10728 <init_eeprom+0x5d8>)
   106e6:	2200      	movs	r2, #0
   106e8:	60da      	str	r2, [r3, #12]

		//memset(factory_settings_parameter_struct.DeviceID_ee, '\0', sizeof(factory_settings_parameter_struct.DeviceID_ee));
		//strcpy(factory_settings_parameter_struct.DeviceID_ee,"0000000000");
		
		memcpy(page_data,&factory_settings_parameter_struct,sizeof(factory_settings_parameter_struct));
   106ea:	490f      	ldr	r1, [pc, #60]	; (10728 <init_eeprom+0x5d8>)
   106ec:	4b09      	ldr	r3, [pc, #36]	; (10714 <init_eeprom+0x5c4>)
   106ee:	2210      	movs	r2, #16
   106f0:	0018      	movs	r0, r3
   106f2:	4b09      	ldr	r3, [pc, #36]	; (10718 <init_eeprom+0x5c8>)
   106f4:	4798      	blx	r3
		eeprom_emulator_write_page(FACTORY_SETTING_PARAMETERS_PAGE, page_data);
   106f6:	4b07      	ldr	r3, [pc, #28]	; (10714 <init_eeprom+0x5c4>)
   106f8:	0019      	movs	r1, r3
   106fa:	201b      	movs	r0, #27
   106fc:	4b07      	ldr	r3, [pc, #28]	; (1071c <init_eeprom+0x5cc>)
   106fe:	4798      	blx	r3
		eeprom_emulator_commit_page_buffer();
   10700:	4b07      	ldr	r3, [pc, #28]	; (10720 <init_eeprom+0x5d0>)
   10702:	4798      	blx	r3
	}
}
   10704:	46c0      	nop			; (mov r8, r8)
   10706:	46bd      	mov	sp, r7
   10708:	bd80      	pop	{r7, pc}
   1070a:	46c0      	nop			; (mov r8, r8)
   1070c:	20000854 	.word	0x20000854
   10710:	00002710 	.word	0x00002710
   10714:	20000784 	.word	0x20000784
   10718:	00028b21 	.word	0x00028b21
   1071c:	00023751 	.word	0x00023751
   10720:	000238f9 	.word	0x000238f9
   10724:	0002385d 	.word	0x0002385d
   10728:	2000082c 	.word	0x2000082c

0001072c <config_mobile_no_ee>:

void config_mobile_no_ee(const uint8_t page_loc,const char *mobile_number)
{
   1072c:	b580      	push	{r7, lr}
   1072e:	b088      	sub	sp, #32
   10730:	af00      	add	r7, sp, #0
   10732:	0002      	movs	r2, r0
   10734:	6039      	str	r1, [r7, #0]
   10736:	1dfb      	adds	r3, r7, #7
   10738:	701a      	strb	r2, [r3, #0]
	struct mobile_no_struct mobile_no;
	memset(page_data, '\0', sizeof(page_data));
   1073a:	4b28      	ldr	r3, [pc, #160]	; (107dc <config_mobile_no_ee+0xb0>)
   1073c:	223c      	movs	r2, #60	; 0x3c
   1073e:	2100      	movs	r1, #0
   10740:	0018      	movs	r0, r3
   10742:	4b27      	ldr	r3, [pc, #156]	; (107e0 <config_mobile_no_ee+0xb4>)
   10744:	4798      	blx	r3
	eeprom_emulator_read_page(page_loc, page_data);
   10746:	4a25      	ldr	r2, [pc, #148]	; (107dc <config_mobile_no_ee+0xb0>)
   10748:	1dfb      	adds	r3, r7, #7
   1074a:	781b      	ldrb	r3, [r3, #0]
   1074c:	0011      	movs	r1, r2
   1074e:	0018      	movs	r0, r3
   10750:	4b24      	ldr	r3, [pc, #144]	; (107e4 <config_mobile_no_ee+0xb8>)
   10752:	4798      	blx	r3
	memcpy(&mobile_no,page_data,sizeof(mobile_no));
   10754:	2308      	movs	r3, #8
   10756:	18fa      	adds	r2, r7, r3
   10758:	4b20      	ldr	r3, [pc, #128]	; (107dc <config_mobile_no_ee+0xb0>)
   1075a:	0010      	movs	r0, r2
   1075c:	0019      	movs	r1, r3
   1075e:	2318      	movs	r3, #24
   10760:	001a      	movs	r2, r3
   10762:	4b21      	ldr	r3, [pc, #132]	; (107e8 <config_mobile_no_ee+0xbc>)
   10764:	4798      	blx	r3
	if (mobile_no.u8tfirst_time_write_ee != 85)
   10766:	2308      	movs	r3, #8
   10768:	18fb      	adds	r3, r7, r3
   1076a:	781b      	ldrb	r3, [r3, #0]
   1076c:	2b55      	cmp	r3, #85	; 0x55
   1076e:	d031      	beq.n	107d4 <config_mobile_no_ee+0xa8>
	{
		mobile_no.u8tfirst_time_write_ee = 85;
   10770:	2308      	movs	r3, #8
   10772:	18fb      	adds	r3, r7, r3
   10774:	2255      	movs	r2, #85	; 0x55
   10776:	701a      	strb	r2, [r3, #0]
		mobile_no.dummy1 = 0;
   10778:	2308      	movs	r3, #8
   1077a:	18fb      	adds	r3, r7, r3
   1077c:	2200      	movs	r2, #0
   1077e:	705a      	strb	r2, [r3, #1]
		mobile_no.dummy2 = 0;
   10780:	2308      	movs	r3, #8
   10782:	18fb      	adds	r3, r7, r3
   10784:	2200      	movs	r2, #0
   10786:	709a      	strb	r2, [r3, #2]
		mobile_no.dummy3 = 0;
   10788:	2308      	movs	r3, #8
   1078a:	18fb      	adds	r3, r7, r3
   1078c:	2200      	movs	r2, #0
   1078e:	70da      	strb	r2, [r3, #3]
		memset(mobile_no.mobile_no_ee, '\0', sizeof(mobile_no.mobile_no_ee));
   10790:	2308      	movs	r3, #8
   10792:	18fb      	adds	r3, r7, r3
   10794:	3304      	adds	r3, #4
   10796:	2214      	movs	r2, #20
   10798:	2100      	movs	r1, #0
   1079a:	0018      	movs	r0, r3
   1079c:	4b10      	ldr	r3, [pc, #64]	; (107e0 <config_mobile_no_ee+0xb4>)
   1079e:	4798      	blx	r3
		strcpy(mobile_no.mobile_no_ee,mobile_number);
   107a0:	683a      	ldr	r2, [r7, #0]
   107a2:	2308      	movs	r3, #8
   107a4:	18fb      	adds	r3, r7, r3
   107a6:	3304      	adds	r3, #4
   107a8:	0011      	movs	r1, r2
   107aa:	0018      	movs	r0, r3
   107ac:	4b0f      	ldr	r3, [pc, #60]	; (107ec <config_mobile_no_ee+0xc0>)
   107ae:	4798      	blx	r3
		
		memcpy(page_data,&mobile_no,sizeof(mobile_no));
   107b0:	4a0a      	ldr	r2, [pc, #40]	; (107dc <config_mobile_no_ee+0xb0>)
   107b2:	2308      	movs	r3, #8
   107b4:	18fb      	adds	r3, r7, r3
   107b6:	0010      	movs	r0, r2
   107b8:	0019      	movs	r1, r3
   107ba:	2318      	movs	r3, #24
   107bc:	001a      	movs	r2, r3
   107be:	4b0a      	ldr	r3, [pc, #40]	; (107e8 <config_mobile_no_ee+0xbc>)
   107c0:	4798      	blx	r3
		eeprom_emulator_write_page(page_loc, page_data);
   107c2:	4a06      	ldr	r2, [pc, #24]	; (107dc <config_mobile_no_ee+0xb0>)
   107c4:	1dfb      	adds	r3, r7, #7
   107c6:	781b      	ldrb	r3, [r3, #0]
   107c8:	0011      	movs	r1, r2
   107ca:	0018      	movs	r0, r3
   107cc:	4b08      	ldr	r3, [pc, #32]	; (107f0 <config_mobile_no_ee+0xc4>)
   107ce:	4798      	blx	r3
		eeprom_emulator_commit_page_buffer();
   107d0:	4b08      	ldr	r3, [pc, #32]	; (107f4 <config_mobile_no_ee+0xc8>)
   107d2:	4798      	blx	r3
	}
}
   107d4:	46c0      	nop			; (mov r8, r8)
   107d6:	46bd      	mov	sp, r7
   107d8:	b008      	add	sp, #32
   107da:	bd80      	pop	{r7, pc}
   107dc:	20000784 	.word	0x20000784
   107e0:	00028b57 	.word	0x00028b57
   107e4:	0002385d 	.word	0x0002385d
   107e8:	00028b21 	.word	0x00028b21
   107ec:	00028dd7 	.word	0x00028dd7
   107f0:	00023751 	.word	0x00023751
   107f4:	000238f9 	.word	0x000238f9

000107f8 <getNumbers>:


void getNumbers(char *string)
{
   107f8:	b580      	push	{r7, lr}
   107fa:	b08a      	sub	sp, #40	; 0x28
   107fc:	af00      	add	r7, sp, #0
   107fe:	6078      	str	r0, [r7, #4]
	strcpy(string,"");
   10800:	687b      	ldr	r3, [r7, #4]
   10802:	2200      	movs	r2, #0
   10804:	701a      	strb	r2, [r3, #0]
	
	for(uint8_t i=0;i<user_count_struct.current_user_no_count;i++)
   10806:	2327      	movs	r3, #39	; 0x27
   10808:	18fb      	adds	r3, r7, r3
   1080a:	2200      	movs	r2, #0
   1080c:	701a      	strb	r2, [r3, #0]
   1080e:	e063      	b.n	108d8 <getNumbers+0xe0>
	{
		struct mobile_no_struct mobile_no;
		memset(page_data, '\0', sizeof(page_data));
   10810:	4b37      	ldr	r3, [pc, #220]	; (108f0 <getNumbers+0xf8>)
   10812:	223c      	movs	r2, #60	; 0x3c
   10814:	2100      	movs	r1, #0
   10816:	0018      	movs	r0, r3
   10818:	4b36      	ldr	r3, [pc, #216]	; (108f4 <getNumbers+0xfc>)
   1081a:	4798      	blx	r3
		eeprom_emulator_read_page(USER_1_MOBILE_NUMBER_PAGE+i, page_data);
   1081c:	2327      	movs	r3, #39	; 0x27
   1081e:	18fb      	adds	r3, r7, r3
   10820:	781b      	ldrb	r3, [r3, #0]
   10822:	3309      	adds	r3, #9
   10824:	b2db      	uxtb	r3, r3
   10826:	4a32      	ldr	r2, [pc, #200]	; (108f0 <getNumbers+0xf8>)
   10828:	0011      	movs	r1, r2
   1082a:	0018      	movs	r0, r3
   1082c:	4b32      	ldr	r3, [pc, #200]	; (108f8 <getNumbers+0x100>)
   1082e:	4798      	blx	r3
		memcpy(&mobile_no,page_data,sizeof(mobile_no));
   10830:	230c      	movs	r3, #12
   10832:	18fa      	adds	r2, r7, r3
   10834:	4b2e      	ldr	r3, [pc, #184]	; (108f0 <getNumbers+0xf8>)
   10836:	0010      	movs	r0, r2
   10838:	0019      	movs	r1, r3
   1083a:	2318      	movs	r3, #24
   1083c:	001a      	movs	r2, r3
   1083e:	4b2f      	ldr	r3, [pc, #188]	; (108fc <getNumbers+0x104>)
   10840:	4798      	blx	r3
		if(i==user_count_struct.primaryNumberIndex)
   10842:	4b2f      	ldr	r3, [pc, #188]	; (10900 <getNumbers+0x108>)
   10844:	78db      	ldrb	r3, [r3, #3]
   10846:	2227      	movs	r2, #39	; 0x27
   10848:	18ba      	adds	r2, r7, r2
   1084a:	7812      	ldrb	r2, [r2, #0]
   1084c:	429a      	cmp	r2, r3
   1084e:	d10f      	bne.n	10870 <getNumbers+0x78>
		{
			strcat(string,"P:");
   10850:	687b      	ldr	r3, [r7, #4]
   10852:	0018      	movs	r0, r3
   10854:	4b2b      	ldr	r3, [pc, #172]	; (10904 <getNumbers+0x10c>)
   10856:	4798      	blx	r3
   10858:	0003      	movs	r3, r0
   1085a:	001a      	movs	r2, r3
   1085c:	687b      	ldr	r3, [r7, #4]
   1085e:	189a      	adds	r2, r3, r2
   10860:	4b29      	ldr	r3, [pc, #164]	; (10908 <getNumbers+0x110>)
   10862:	0010      	movs	r0, r2
   10864:	0019      	movs	r1, r3
   10866:	2303      	movs	r3, #3
   10868:	001a      	movs	r2, r3
   1086a:	4b24      	ldr	r3, [pc, #144]	; (108fc <getNumbers+0x104>)
   1086c:	4798      	blx	r3
   1086e:	e015      	b.n	1089c <getNumbers+0xa4>
		}
		else if(i==user_count_struct.secondaryNumberIndex)
   10870:	4b23      	ldr	r3, [pc, #140]	; (10900 <getNumbers+0x108>)
   10872:	791b      	ldrb	r3, [r3, #4]
   10874:	2227      	movs	r2, #39	; 0x27
   10876:	18ba      	adds	r2, r7, r2
   10878:	7812      	ldrb	r2, [r2, #0]
   1087a:	429a      	cmp	r2, r3
   1087c:	d10e      	bne.n	1089c <getNumbers+0xa4>
		{
			strcat(string,"S:");
   1087e:	687b      	ldr	r3, [r7, #4]
   10880:	0018      	movs	r0, r3
   10882:	4b20      	ldr	r3, [pc, #128]	; (10904 <getNumbers+0x10c>)
   10884:	4798      	blx	r3
   10886:	0003      	movs	r3, r0
   10888:	001a      	movs	r2, r3
   1088a:	687b      	ldr	r3, [r7, #4]
   1088c:	189a      	adds	r2, r3, r2
   1088e:	4b1f      	ldr	r3, [pc, #124]	; (1090c <getNumbers+0x114>)
   10890:	0010      	movs	r0, r2
   10892:	0019      	movs	r1, r3
   10894:	2303      	movs	r3, #3
   10896:	001a      	movs	r2, r3
   10898:	4b18      	ldr	r3, [pc, #96]	; (108fc <getNumbers+0x104>)
   1089a:	4798      	blx	r3
		}
		strcat(string,mobile_no.mobile_no_ee);
   1089c:	230c      	movs	r3, #12
   1089e:	18fb      	adds	r3, r7, r3
   108a0:	1d1a      	adds	r2, r3, #4
   108a2:	687b      	ldr	r3, [r7, #4]
   108a4:	0011      	movs	r1, r2
   108a6:	0018      	movs	r0, r3
   108a8:	4b19      	ldr	r3, [pc, #100]	; (10910 <getNumbers+0x118>)
   108aa:	4798      	blx	r3
		strcat(string,"\n");
   108ac:	687b      	ldr	r3, [r7, #4]
   108ae:	0018      	movs	r0, r3
   108b0:	4b14      	ldr	r3, [pc, #80]	; (10904 <getNumbers+0x10c>)
   108b2:	4798      	blx	r3
   108b4:	0003      	movs	r3, r0
   108b6:	001a      	movs	r2, r3
   108b8:	687b      	ldr	r3, [r7, #4]
   108ba:	189a      	adds	r2, r3, r2
   108bc:	4b15      	ldr	r3, [pc, #84]	; (10914 <getNumbers+0x11c>)
   108be:	0010      	movs	r0, r2
   108c0:	0019      	movs	r1, r3
   108c2:	2302      	movs	r3, #2
   108c4:	001a      	movs	r2, r3
   108c6:	4b0d      	ldr	r3, [pc, #52]	; (108fc <getNumbers+0x104>)
   108c8:	4798      	blx	r3
	for(uint8_t i=0;i<user_count_struct.current_user_no_count;i++)
   108ca:	2327      	movs	r3, #39	; 0x27
   108cc:	18fb      	adds	r3, r7, r3
   108ce:	781a      	ldrb	r2, [r3, #0]
   108d0:	2327      	movs	r3, #39	; 0x27
   108d2:	18fb      	adds	r3, r7, r3
   108d4:	3201      	adds	r2, #1
   108d6:	701a      	strb	r2, [r3, #0]
   108d8:	4b09      	ldr	r3, [pc, #36]	; (10900 <getNumbers+0x108>)
   108da:	789b      	ldrb	r3, [r3, #2]
   108dc:	2227      	movs	r2, #39	; 0x27
   108de:	18ba      	adds	r2, r7, r2
   108e0:	7812      	ldrb	r2, [r2, #0]
   108e2:	429a      	cmp	r2, r3
   108e4:	d394      	bcc.n	10810 <getNumbers+0x18>
	}
}
   108e6:	46c0      	nop			; (mov r8, r8)
   108e8:	46bd      	mov	sp, r7
   108ea:	b00a      	add	sp, #40	; 0x28
   108ec:	bd80      	pop	{r7, pc}
   108ee:	46c0      	nop			; (mov r8, r8)
   108f0:	20000784 	.word	0x20000784
   108f4:	00028b57 	.word	0x00028b57
   108f8:	0002385d 	.word	0x0002385d
   108fc:	00028b21 	.word	0x00028b21
   10900:	20000814 	.word	0x20000814
   10904:	00028de7 	.word	0x00028de7
   10908:	000297e8 	.word	0x000297e8
   1090c:	000297ec 	.word	0x000297ec
   10910:	00028da1 	.word	0x00028da1
   10914:	000297f0 	.word	0x000297f0

00010918 <getIndexedNumber>:

char *getIndexedNumber(char *IndexNo, uint8_t index)
{
   10918:	b580      	push	{r7, lr}
   1091a:	b088      	sub	sp, #32
   1091c:	af00      	add	r7, sp, #0
   1091e:	6078      	str	r0, [r7, #4]
   10920:	000a      	movs	r2, r1
   10922:	1cfb      	adds	r3, r7, #3
   10924:	701a      	strb	r2, [r3, #0]
	strcpy(IndexNo,"");
   10926:	687b      	ldr	r3, [r7, #4]
   10928:	2200      	movs	r2, #0
   1092a:	701a      	strb	r2, [r3, #0]
	if(user_count_struct.current_user_no_count>index)
   1092c:	4b15      	ldr	r3, [pc, #84]	; (10984 <getIndexedNumber+0x6c>)
   1092e:	789b      	ldrb	r3, [r3, #2]
   10930:	1cfa      	adds	r2, r7, #3
   10932:	7812      	ldrb	r2, [r2, #0]
   10934:	429a      	cmp	r2, r3
   10936:	d21f      	bcs.n	10978 <getIndexedNumber+0x60>
	{
		struct mobile_no_struct mobile_no;
		memset(page_data, '\0', sizeof(page_data));
   10938:	4b13      	ldr	r3, [pc, #76]	; (10988 <getIndexedNumber+0x70>)
   1093a:	223c      	movs	r2, #60	; 0x3c
   1093c:	2100      	movs	r1, #0
   1093e:	0018      	movs	r0, r3
   10940:	4b12      	ldr	r3, [pc, #72]	; (1098c <getIndexedNumber+0x74>)
   10942:	4798      	blx	r3
		eeprom_emulator_read_page(USER_1_MOBILE_NUMBER_PAGE+index, page_data);
   10944:	1cfb      	adds	r3, r7, #3
   10946:	781b      	ldrb	r3, [r3, #0]
   10948:	3309      	adds	r3, #9
   1094a:	b2db      	uxtb	r3, r3
   1094c:	4a0e      	ldr	r2, [pc, #56]	; (10988 <getIndexedNumber+0x70>)
   1094e:	0011      	movs	r1, r2
   10950:	0018      	movs	r0, r3
   10952:	4b0f      	ldr	r3, [pc, #60]	; (10990 <getIndexedNumber+0x78>)
   10954:	4798      	blx	r3
		//eeprom_emulator_read_page(USER_1_MOBILE_NUMBER_PAGE+index-1, page_data);
		memcpy(&mobile_no,page_data,sizeof(mobile_no));
   10956:	2308      	movs	r3, #8
   10958:	18fa      	adds	r2, r7, r3
   1095a:	4b0b      	ldr	r3, [pc, #44]	; (10988 <getIndexedNumber+0x70>)
   1095c:	0010      	movs	r0, r2
   1095e:	0019      	movs	r1, r3
   10960:	2318      	movs	r3, #24
   10962:	001a      	movs	r2, r3
   10964:	4b0b      	ldr	r3, [pc, #44]	; (10994 <getIndexedNumber+0x7c>)
   10966:	4798      	blx	r3
		strcat(IndexNo,mobile_no.mobile_no_ee);
   10968:	2308      	movs	r3, #8
   1096a:	18fb      	adds	r3, r7, r3
   1096c:	1d1a      	adds	r2, r3, #4
   1096e:	687b      	ldr	r3, [r7, #4]
   10970:	0011      	movs	r1, r2
   10972:	0018      	movs	r0, r3
   10974:	4b08      	ldr	r3, [pc, #32]	; (10998 <getIndexedNumber+0x80>)
   10976:	4798      	blx	r3
	}
	return IndexNo;
   10978:	687b      	ldr	r3, [r7, #4]
}
   1097a:	0018      	movs	r0, r3
   1097c:	46bd      	mov	sp, r7
   1097e:	b008      	add	sp, #32
   10980:	bd80      	pop	{r7, pc}
   10982:	46c0      	nop			; (mov r8, r8)
   10984:	20000814 	.word	0x20000814
   10988:	20000784 	.word	0x20000784
   1098c:	00028b57 	.word	0x00028b57
   10990:	0002385d 	.word	0x0002385d
   10994:	00028b21 	.word	0x00028b21
   10998:	00028da1 	.word	0x00028da1

0001099c <isPrimaryNumber>:

bool isPrimaryNumber(char *number)
{
   1099c:	b580      	push	{r7, lr}
   1099e:	b088      	sub	sp, #32
   109a0:	af00      	add	r7, sp, #0
   109a2:	6078      	str	r0, [r7, #4]
	if(user_count_struct.current_user_no_count > 0)
   109a4:	4b14      	ldr	r3, [pc, #80]	; (109f8 <isPrimaryNumber+0x5c>)
   109a6:	789b      	ldrb	r3, [r3, #2]
   109a8:	2b00      	cmp	r3, #0
   109aa:	d020      	beq.n	109ee <isPrimaryNumber+0x52>
	{
		char primaryNumber[20] = {0};
   109ac:	230c      	movs	r3, #12
   109ae:	18fb      	adds	r3, r7, r3
   109b0:	0018      	movs	r0, r3
   109b2:	2314      	movs	r3, #20
   109b4:	001a      	movs	r2, r3
   109b6:	2100      	movs	r1, #0
   109b8:	4b10      	ldr	r3, [pc, #64]	; (109fc <isPrimaryNumber+0x60>)
   109ba:	4798      	blx	r3
		getIndexedNumber(&primaryNumber,user_count_struct.primaryNumberIndex);
   109bc:	4b0e      	ldr	r3, [pc, #56]	; (109f8 <isPrimaryNumber+0x5c>)
   109be:	78da      	ldrb	r2, [r3, #3]
   109c0:	230c      	movs	r3, #12
   109c2:	18fb      	adds	r3, r7, r3
   109c4:	0011      	movs	r1, r2
   109c6:	0018      	movs	r0, r3
   109c8:	4b0d      	ldr	r3, [pc, #52]	; (10a00 <isPrimaryNumber+0x64>)
   109ca:	4798      	blx	r3
		if(strstr(number,primaryNumber))
   109cc:	230c      	movs	r3, #12
   109ce:	18fa      	adds	r2, r7, r3
   109d0:	687b      	ldr	r3, [r7, #4]
   109d2:	0011      	movs	r1, r2
   109d4:	0018      	movs	r0, r3
   109d6:	4b0b      	ldr	r3, [pc, #44]	; (10a04 <isPrimaryNumber+0x68>)
   109d8:	4798      	blx	r3
   109da:	1e03      	subs	r3, r0, #0
   109dc:	d001      	beq.n	109e2 <isPrimaryNumber+0x46>
		{
			return true;
   109de:	2301      	movs	r3, #1
   109e0:	e006      	b.n	109f0 <isPrimaryNumber+0x54>
		}
		else
		{
			return isAlterNumber(number);
   109e2:	687b      	ldr	r3, [r7, #4]
   109e4:	0018      	movs	r0, r3
   109e6:	4b08      	ldr	r3, [pc, #32]	; (10a08 <isPrimaryNumber+0x6c>)
   109e8:	4798      	blx	r3
   109ea:	0003      	movs	r3, r0
   109ec:	e000      	b.n	109f0 <isPrimaryNumber+0x54>
		//else
		//{
		//return isAlterNumber(number);
		//}
	}
	return false;
   109ee:	2300      	movs	r3, #0
}
   109f0:	0018      	movs	r0, r3
   109f2:	46bd      	mov	sp, r7
   109f4:	b008      	add	sp, #32
   109f6:	bd80      	pop	{r7, pc}
   109f8:	20000814 	.word	0x20000814
   109fc:	00028b57 	.word	0x00028b57
   10a00:	00010919 	.word	0x00010919
   10a04:	00028e17 	.word	0x00028e17
   10a08:	00010a0d 	.word	0x00010a0d

00010a0c <isAlterNumber>:

bool isAlterNumber(char *number)
{
   10a0c:	b580      	push	{r7, lr}
   10a0e:	b082      	sub	sp, #8
   10a10:	af00      	add	r7, sp, #0
   10a12:	6078      	str	r0, [r7, #4]
	if(user_count_struct.current_user_no_count > 0)
   10a14:	4b0b      	ldr	r3, [pc, #44]	; (10a44 <isAlterNumber+0x38>)
   10a16:	789b      	ldrb	r3, [r3, #2]
   10a18:	2b00      	cmp	r3, #0
   10a1a:	d00d      	beq.n	10a38 <isAlterNumber+0x2c>
	{
		if ((alternateNumber_struct.alterNumberPresent) && (strstr(number, alternateNumber_struct.alternateNumber_ee)))
   10a1c:	4b0a      	ldr	r3, [pc, #40]	; (10a48 <isAlterNumber+0x3c>)
   10a1e:	789b      	ldrb	r3, [r3, #2]
   10a20:	2b00      	cmp	r3, #0
   10a22:	d009      	beq.n	10a38 <isAlterNumber+0x2c>
   10a24:	4a09      	ldr	r2, [pc, #36]	; (10a4c <isAlterNumber+0x40>)
   10a26:	687b      	ldr	r3, [r7, #4]
   10a28:	0011      	movs	r1, r2
   10a2a:	0018      	movs	r0, r3
   10a2c:	4b08      	ldr	r3, [pc, #32]	; (10a50 <isAlterNumber+0x44>)
   10a2e:	4798      	blx	r3
   10a30:	1e03      	subs	r3, r0, #0
   10a32:	d001      	beq.n	10a38 <isAlterNumber+0x2c>
		{
			return true;
   10a34:	2301      	movs	r3, #1
   10a36:	e000      	b.n	10a3a <isAlterNumber+0x2e>
		}
	}
	return false;
   10a38:	2300      	movs	r3, #0
}
   10a3a:	0018      	movs	r0, r3
   10a3c:	46bd      	mov	sp, r7
   10a3e:	b002      	add	sp, #8
   10a40:	bd80      	pop	{r7, pc}
   10a42:	46c0      	nop			; (mov r8, r8)
   10a44:	20000814 	.word	0x20000814
   10a48:	2000083c 	.word	0x2000083c
   10a4c:	20000840 	.word	0x20000840
   10a50:	00028e17 	.word	0x00028e17

00010a54 <isM2MNumber>:

bool isM2MNumber(char *number)
{
   10a54:	b580      	push	{r7, lr}
   10a56:	b082      	sub	sp, #8
   10a58:	af00      	add	r7, sp, #0
   10a5a:	6078      	str	r0, [r7, #4]
	if ((m2m_Numbers_struct.m2mPresent) && strstr(number,m2m_Numbers_struct.m2mNumber_ee))
   10a5c:	4b09      	ldr	r3, [pc, #36]	; (10a84 <isM2MNumber+0x30>)
   10a5e:	785b      	ldrb	r3, [r3, #1]
   10a60:	2b00      	cmp	r3, #0
   10a62:	d009      	beq.n	10a78 <isM2MNumber+0x24>
   10a64:	4a08      	ldr	r2, [pc, #32]	; (10a88 <isM2MNumber+0x34>)
   10a66:	687b      	ldr	r3, [r7, #4]
   10a68:	0011      	movs	r1, r2
   10a6a:	0018      	movs	r0, r3
   10a6c:	4b07      	ldr	r3, [pc, #28]	; (10a8c <isM2MNumber+0x38>)
   10a6e:	4798      	blx	r3
   10a70:	1e03      	subs	r3, r0, #0
   10a72:	d001      	beq.n	10a78 <isM2MNumber+0x24>
	{
		return true;
   10a74:	2301      	movs	r3, #1
   10a76:	e000      	b.n	10a7a <isM2MNumber+0x26>
	}
	return false;
   10a78:	2300      	movs	r3, #0
}
   10a7a:	0018      	movs	r0, r3
   10a7c:	46bd      	mov	sp, r7
   10a7e:	b002      	add	sp, #8
   10a80:	bd80      	pop	{r7, pc}
   10a82:	46c0      	nop			; (mov r8, r8)
   10a84:	20000754 	.word	0x20000754
   10a88:	2000075c 	.word	0x2000075c
   10a8c:	00028e17 	.word	0x00028e17

00010a90 <isM2MRemoteNumber>:

bool isM2MRemoteNumber(char *number)
{
   10a90:	b580      	push	{r7, lr}
   10a92:	b082      	sub	sp, #8
   10a94:	af00      	add	r7, sp, #0
   10a96:	6078      	str	r0, [r7, #4]
	if ((m2m_Numbers_struct.m2mRemotePresent) && strstr(number,m2m_Numbers_struct.m2mremoteNumber_ee))
   10a98:	4b09      	ldr	r3, [pc, #36]	; (10ac0 <isM2MRemoteNumber+0x30>)
   10a9a:	78db      	ldrb	r3, [r3, #3]
   10a9c:	2b00      	cmp	r3, #0
   10a9e:	d009      	beq.n	10ab4 <isM2MRemoteNumber+0x24>
   10aa0:	4a08      	ldr	r2, [pc, #32]	; (10ac4 <isM2MRemoteNumber+0x34>)
   10aa2:	687b      	ldr	r3, [r7, #4]
   10aa4:	0011      	movs	r1, r2
   10aa6:	0018      	movs	r0, r3
   10aa8:	4b07      	ldr	r3, [pc, #28]	; (10ac8 <isM2MRemoteNumber+0x38>)
   10aaa:	4798      	blx	r3
   10aac:	1e03      	subs	r3, r0, #0
   10aae:	d001      	beq.n	10ab4 <isM2MRemoteNumber+0x24>
	{
		return true;
   10ab0:	2301      	movs	r3, #1
   10ab2:	e000      	b.n	10ab6 <isM2MRemoteNumber+0x26>
	}
	return false;
   10ab4:	2300      	movs	r3, #0
}
   10ab6:	0018      	movs	r0, r3
   10ab8:	46bd      	mov	sp, r7
   10aba:	b002      	add	sp, #8
   10abc:	bd80      	pop	{r7, pc}
   10abe:	46c0      	nop			; (mov r8, r8)
   10ac0:	20000754 	.word	0x20000754
   10ac4:	20000770 	.word	0x20000770
   10ac8:	00028e17 	.word	0x00028e17

00010acc <getM2MNumber>:

char *getM2MNumber(char *m2mNo)
{
   10acc:	b580      	push	{r7, lr}
   10ace:	b082      	sub	sp, #8
   10ad0:	af00      	add	r7, sp, #0
   10ad2:	6078      	str	r0, [r7, #4]
	if (m2m_Numbers_struct.m2mPresent)
   10ad4:	4b09      	ldr	r3, [pc, #36]	; (10afc <getM2MNumber+0x30>)
   10ad6:	785b      	ldrb	r3, [r3, #1]
   10ad8:	2b00      	cmp	r3, #0
   10ada:	d006      	beq.n	10aea <getM2MNumber+0x1e>
	{
		//strstr(m2mNo,m2m_Numbers_struct.m2mNumber_ee);
		strcpy(m2mNo,m2m_Numbers_struct.m2mNumber_ee);
   10adc:	4a08      	ldr	r2, [pc, #32]	; (10b00 <getM2MNumber+0x34>)
   10ade:	687b      	ldr	r3, [r7, #4]
   10ae0:	0011      	movs	r1, r2
   10ae2:	0018      	movs	r0, r3
   10ae4:	4b07      	ldr	r3, [pc, #28]	; (10b04 <getM2MNumber+0x38>)
   10ae6:	4798      	blx	r3
   10ae8:	e002      	b.n	10af0 <getM2MNumber+0x24>
	}
	else
	{
		strcpy(m2mNo,"");
   10aea:	687b      	ldr	r3, [r7, #4]
   10aec:	2200      	movs	r2, #0
   10aee:	701a      	strb	r2, [r3, #0]
	}
	return m2mNo;
   10af0:	687b      	ldr	r3, [r7, #4]
}
   10af2:	0018      	movs	r0, r3
   10af4:	46bd      	mov	sp, r7
   10af6:	b002      	add	sp, #8
   10af8:	bd80      	pop	{r7, pc}
   10afa:	46c0      	nop			; (mov r8, r8)
   10afc:	20000754 	.word	0x20000754
   10b00:	2000075c 	.word	0x2000075c
   10b04:	00028dd7 	.word	0x00028dd7

00010b08 <getM2MRemoteNumber>:

char *getM2MRemoteNumber(char *m2mNoRemotNo)
{
   10b08:	b580      	push	{r7, lr}
   10b0a:	b082      	sub	sp, #8
   10b0c:	af00      	add	r7, sp, #0
   10b0e:	6078      	str	r0, [r7, #4]
	if (m2m_Numbers_struct.m2mRemotePresent)
   10b10:	4b09      	ldr	r3, [pc, #36]	; (10b38 <getM2MRemoteNumber+0x30>)
   10b12:	78db      	ldrb	r3, [r3, #3]
   10b14:	2b00      	cmp	r3, #0
   10b16:	d006      	beq.n	10b26 <getM2MRemoteNumber+0x1e>
	{
		strcpy(m2mNoRemotNo,m2m_Numbers_struct.m2mremoteNumber_ee);
   10b18:	4a08      	ldr	r2, [pc, #32]	; (10b3c <getM2MRemoteNumber+0x34>)
   10b1a:	687b      	ldr	r3, [r7, #4]
   10b1c:	0011      	movs	r1, r2
   10b1e:	0018      	movs	r0, r3
   10b20:	4b07      	ldr	r3, [pc, #28]	; (10b40 <getM2MRemoteNumber+0x38>)
   10b22:	4798      	blx	r3
   10b24:	e002      	b.n	10b2c <getM2MRemoteNumber+0x24>
	}
	else
	{
		strcpy(m2mNoRemotNo,"");
   10b26:	687b      	ldr	r3, [r7, #4]
   10b28:	2200      	movs	r2, #0
   10b2a:	701a      	strb	r2, [r3, #0]
	}
	return m2mNoRemotNo;
   10b2c:	687b      	ldr	r3, [r7, #4]
}
   10b2e:	0018      	movs	r0, r3
   10b30:	46bd      	mov	sp, r7
   10b32:	b002      	add	sp, #8
   10b34:	bd80      	pop	{r7, pc}
   10b36:	46c0      	nop			; (mov r8, r8)
   10b38:	20000754 	.word	0x20000754
   10b3c:	20000770 	.word	0x20000770
   10b40:	00028dd7 	.word	0x00028dd7

00010b44 <setM2MVerify>:

void setM2MVerify(bool flag)
{
   10b44:	b580      	push	{r7, lr}
   10b46:	b082      	sub	sp, #8
   10b48:	af00      	add	r7, sp, #0
   10b4a:	0002      	movs	r2, r0
   10b4c:	1dfb      	adds	r3, r7, #7
   10b4e:	701a      	strb	r2, [r3, #0]
	m2m_Numbers_struct.m2mVerified = (uint8_t)flag;
   10b50:	1dfb      	adds	r3, r7, #7
   10b52:	781a      	ldrb	r2, [r3, #0]
   10b54:	4b0a      	ldr	r3, [pc, #40]	; (10b80 <setM2MVerify+0x3c>)
   10b56:	709a      	strb	r2, [r3, #2]
	memcpy(page_data,&m2m_Numbers_struct,sizeof(m2m_Numbers_struct));
   10b58:	4a0a      	ldr	r2, [pc, #40]	; (10b84 <setM2MVerify+0x40>)
   10b5a:	4b09      	ldr	r3, [pc, #36]	; (10b80 <setM2MVerify+0x3c>)
   10b5c:	0010      	movs	r0, r2
   10b5e:	0019      	movs	r1, r3
   10b60:	2330      	movs	r3, #48	; 0x30
   10b62:	001a      	movs	r2, r3
   10b64:	4b08      	ldr	r3, [pc, #32]	; (10b88 <setM2MVerify+0x44>)
   10b66:	4798      	blx	r3
	eeprom_emulator_write_page(M2M_NUMBERS_PAGE, page_data);
   10b68:	4b06      	ldr	r3, [pc, #24]	; (10b84 <setM2MVerify+0x40>)
   10b6a:	0019      	movs	r1, r3
   10b6c:	2019      	movs	r0, #25
   10b6e:	4b07      	ldr	r3, [pc, #28]	; (10b8c <setM2MVerify+0x48>)
   10b70:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   10b72:	4b07      	ldr	r3, [pc, #28]	; (10b90 <setM2MVerify+0x4c>)
   10b74:	4798      	blx	r3
}
   10b76:	46c0      	nop			; (mov r8, r8)
   10b78:	46bd      	mov	sp, r7
   10b7a:	b002      	add	sp, #8
   10b7c:	bd80      	pop	{r7, pc}
   10b7e:	46c0      	nop			; (mov r8, r8)
   10b80:	20000754 	.word	0x20000754
   10b84:	20000784 	.word	0x20000784
   10b88:	00028b21 	.word	0x00028b21
   10b8c:	00023751 	.word	0x00023751
   10b90:	000238f9 	.word	0x000238f9

00010b94 <setM2MRemoteVerified>:

void setM2MRemoteVerified(bool flag)
{
   10b94:	b580      	push	{r7, lr}
   10b96:	b082      	sub	sp, #8
   10b98:	af00      	add	r7, sp, #0
   10b9a:	0002      	movs	r2, r0
   10b9c:	1dfb      	adds	r3, r7, #7
   10b9e:	701a      	strb	r2, [r3, #0]
	m2m_Numbers_struct.m2mRemoteVerified = (uint8_t)flag;
   10ba0:	1dfb      	adds	r3, r7, #7
   10ba2:	781a      	ldrb	r2, [r3, #0]
   10ba4:	4b0a      	ldr	r3, [pc, #40]	; (10bd0 <setM2MRemoteVerified+0x3c>)
   10ba6:	711a      	strb	r2, [r3, #4]
	memcpy(page_data,&m2m_Numbers_struct,sizeof(m2m_Numbers_struct));
   10ba8:	4a0a      	ldr	r2, [pc, #40]	; (10bd4 <setM2MRemoteVerified+0x40>)
   10baa:	4b09      	ldr	r3, [pc, #36]	; (10bd0 <setM2MRemoteVerified+0x3c>)
   10bac:	0010      	movs	r0, r2
   10bae:	0019      	movs	r1, r3
   10bb0:	2330      	movs	r3, #48	; 0x30
   10bb2:	001a      	movs	r2, r3
   10bb4:	4b08      	ldr	r3, [pc, #32]	; (10bd8 <setM2MRemoteVerified+0x44>)
   10bb6:	4798      	blx	r3
	eeprom_emulator_write_page(M2M_NUMBERS_PAGE, page_data);
   10bb8:	4b06      	ldr	r3, [pc, #24]	; (10bd4 <setM2MRemoteVerified+0x40>)
   10bba:	0019      	movs	r1, r3
   10bbc:	2019      	movs	r0, #25
   10bbe:	4b07      	ldr	r3, [pc, #28]	; (10bdc <setM2MRemoteVerified+0x48>)
   10bc0:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   10bc2:	4b07      	ldr	r3, [pc, #28]	; (10be0 <setM2MRemoteVerified+0x4c>)
   10bc4:	4798      	blx	r3
}
   10bc6:	46c0      	nop			; (mov r8, r8)
   10bc8:	46bd      	mov	sp, r7
   10bca:	b002      	add	sp, #8
   10bcc:	bd80      	pop	{r7, pc}
   10bce:	46c0      	nop			; (mov r8, r8)
   10bd0:	20000754 	.word	0x20000754
   10bd4:	20000784 	.word	0x20000784
   10bd8:	00028b21 	.word	0x00028b21
   10bdc:	00023751 	.word	0x00023751
   10be0:	000238f9 	.word	0x000238f9

00010be4 <saveM2MSettings>:

void saveM2MSettings(bool flag)
{
   10be4:	b580      	push	{r7, lr}
   10be6:	b082      	sub	sp, #8
   10be8:	af00      	add	r7, sp, #0
   10bea:	0002      	movs	r2, r0
   10bec:	1dfb      	adds	r3, r7, #7
   10bee:	701a      	strb	r2, [r3, #0]
	m2m_Numbers_struct.m2mSetting = (uint8_t)flag;
   10bf0:	1dfb      	adds	r3, r7, #7
   10bf2:	781a      	ldrb	r2, [r3, #0]
   10bf4:	4b0f      	ldr	r3, [pc, #60]	; (10c34 <saveM2MSettings+0x50>)
   10bf6:	715a      	strb	r2, [r3, #5]
	if(!flag)					// m2m turned off
   10bf8:	1dfb      	adds	r3, r7, #7
   10bfa:	781b      	ldrb	r3, [r3, #0]
   10bfc:	2201      	movs	r2, #1
   10bfe:	4053      	eors	r3, r2
   10c00:	b2db      	uxtb	r3, r3
   10c02:	2b00      	cmp	r3, #0
   10c04:	d002      	beq.n	10c0c <saveM2MSettings+0x28>
	{
		m2m_Numbers_struct.m2mRemoteVerified=false;
   10c06:	4b0b      	ldr	r3, [pc, #44]	; (10c34 <saveM2MSettings+0x50>)
   10c08:	2200      	movs	r2, #0
   10c0a:	711a      	strb	r2, [r3, #4]
	}
	memcpy(page_data,&m2m_Numbers_struct,sizeof(m2m_Numbers_struct));
   10c0c:	4a0a      	ldr	r2, [pc, #40]	; (10c38 <saveM2MSettings+0x54>)
   10c0e:	4b09      	ldr	r3, [pc, #36]	; (10c34 <saveM2MSettings+0x50>)
   10c10:	0010      	movs	r0, r2
   10c12:	0019      	movs	r1, r3
   10c14:	2330      	movs	r3, #48	; 0x30
   10c16:	001a      	movs	r2, r3
   10c18:	4b08      	ldr	r3, [pc, #32]	; (10c3c <saveM2MSettings+0x58>)
   10c1a:	4798      	blx	r3
	eeprom_emulator_write_page(M2M_NUMBERS_PAGE, page_data);
   10c1c:	4b06      	ldr	r3, [pc, #24]	; (10c38 <saveM2MSettings+0x54>)
   10c1e:	0019      	movs	r1, r3
   10c20:	2019      	movs	r0, #25
   10c22:	4b07      	ldr	r3, [pc, #28]	; (10c40 <saveM2MSettings+0x5c>)
   10c24:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   10c26:	4b07      	ldr	r3, [pc, #28]	; (10c44 <saveM2MSettings+0x60>)
   10c28:	4798      	blx	r3
}
   10c2a:	46c0      	nop			; (mov r8, r8)
   10c2c:	46bd      	mov	sp, r7
   10c2e:	b002      	add	sp, #8
   10c30:	bd80      	pop	{r7, pc}
   10c32:	46c0      	nop			; (mov r8, r8)
   10c34:	20000754 	.word	0x20000754
   10c38:	20000784 	.word	0x20000784
   10c3c:	00028b21 	.word	0x00028b21
   10c40:	00023751 	.word	0x00023751
   10c44:	000238f9 	.word	0x000238f9

00010c48 <addM2MNumber>:

void addM2MNumber(char *no)
{
   10c48:	b580      	push	{r7, lr}
   10c4a:	b082      	sub	sp, #8
   10c4c:	af00      	add	r7, sp, #0
   10c4e:	6078      	str	r0, [r7, #4]
	m2m_Numbers_struct.m2mPresent = true;
   10c50:	4b0f      	ldr	r3, [pc, #60]	; (10c90 <addM2MNumber+0x48>)
   10c52:	2201      	movs	r2, #1
   10c54:	705a      	strb	r2, [r3, #1]
	strcpy(m2m_Numbers_struct.m2mNumber_ee,no);
   10c56:	687a      	ldr	r2, [r7, #4]
   10c58:	4b0e      	ldr	r3, [pc, #56]	; (10c94 <addM2MNumber+0x4c>)
   10c5a:	0011      	movs	r1, r2
   10c5c:	0018      	movs	r0, r3
   10c5e:	4b0e      	ldr	r3, [pc, #56]	; (10c98 <addM2MNumber+0x50>)
   10c60:	4798      	blx	r3
	memcpy(page_data,&m2m_Numbers_struct,sizeof(m2m_Numbers_struct));
   10c62:	4a0e      	ldr	r2, [pc, #56]	; (10c9c <addM2MNumber+0x54>)
   10c64:	4b0a      	ldr	r3, [pc, #40]	; (10c90 <addM2MNumber+0x48>)
   10c66:	0010      	movs	r0, r2
   10c68:	0019      	movs	r1, r3
   10c6a:	2330      	movs	r3, #48	; 0x30
   10c6c:	001a      	movs	r2, r3
   10c6e:	4b0c      	ldr	r3, [pc, #48]	; (10ca0 <addM2MNumber+0x58>)
   10c70:	4798      	blx	r3
	eeprom_emulator_write_page(M2M_NUMBERS_PAGE, page_data);
   10c72:	4b0a      	ldr	r3, [pc, #40]	; (10c9c <addM2MNumber+0x54>)
   10c74:	0019      	movs	r1, r3
   10c76:	2019      	movs	r0, #25
   10c78:	4b0a      	ldr	r3, [pc, #40]	; (10ca4 <addM2MNumber+0x5c>)
   10c7a:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   10c7c:	4b0a      	ldr	r3, [pc, #40]	; (10ca8 <addM2MNumber+0x60>)
   10c7e:	4798      	blx	r3
	setM2MVerify(false);
   10c80:	2000      	movs	r0, #0
   10c82:	4b0a      	ldr	r3, [pc, #40]	; (10cac <addM2MNumber+0x64>)
   10c84:	4798      	blx	r3
}
   10c86:	46c0      	nop			; (mov r8, r8)
   10c88:	46bd      	mov	sp, r7
   10c8a:	b002      	add	sp, #8
   10c8c:	bd80      	pop	{r7, pc}
   10c8e:	46c0      	nop			; (mov r8, r8)
   10c90:	20000754 	.word	0x20000754
   10c94:	2000075c 	.word	0x2000075c
   10c98:	00028dd7 	.word	0x00028dd7
   10c9c:	20000784 	.word	0x20000784
   10ca0:	00028b21 	.word	0x00028b21
   10ca4:	00023751 	.word	0x00023751
   10ca8:	000238f9 	.word	0x000238f9
   10cac:	00010b45 	.word	0x00010b45

00010cb0 <addM2MRemoteNumber>:

void addM2MRemoteNumber(char *no)
{
   10cb0:	b580      	push	{r7, lr}
   10cb2:	b082      	sub	sp, #8
   10cb4:	af00      	add	r7, sp, #0
   10cb6:	6078      	str	r0, [r7, #4]
	m2m_Numbers_struct.m2mRemotePresent = true;
   10cb8:	4b10      	ldr	r3, [pc, #64]	; (10cfc <addM2MRemoteNumber+0x4c>)
   10cba:	2201      	movs	r2, #1
   10cbc:	70da      	strb	r2, [r3, #3]
	strcpy(m2m_Numbers_struct.m2mremoteNumber_ee,no);
   10cbe:	687a      	ldr	r2, [r7, #4]
   10cc0:	4b0f      	ldr	r3, [pc, #60]	; (10d00 <addM2MRemoteNumber+0x50>)
   10cc2:	0011      	movs	r1, r2
   10cc4:	0018      	movs	r0, r3
   10cc6:	4b0f      	ldr	r3, [pc, #60]	; (10d04 <addM2MRemoteNumber+0x54>)
   10cc8:	4798      	blx	r3
	memcpy(page_data,&m2m_Numbers_struct,sizeof(m2m_Numbers_struct));
   10cca:	4a0f      	ldr	r2, [pc, #60]	; (10d08 <addM2MRemoteNumber+0x58>)
   10ccc:	4b0b      	ldr	r3, [pc, #44]	; (10cfc <addM2MRemoteNumber+0x4c>)
   10cce:	0010      	movs	r0, r2
   10cd0:	0019      	movs	r1, r3
   10cd2:	2330      	movs	r3, #48	; 0x30
   10cd4:	001a      	movs	r2, r3
   10cd6:	4b0d      	ldr	r3, [pc, #52]	; (10d0c <addM2MRemoteNumber+0x5c>)
   10cd8:	4798      	blx	r3
	eeprom_emulator_write_page(M2M_NUMBERS_PAGE, page_data);
   10cda:	4b0b      	ldr	r3, [pc, #44]	; (10d08 <addM2MRemoteNumber+0x58>)
   10cdc:	0019      	movs	r1, r3
   10cde:	2019      	movs	r0, #25
   10ce0:	4b0b      	ldr	r3, [pc, #44]	; (10d10 <addM2MRemoteNumber+0x60>)
   10ce2:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   10ce4:	4b0b      	ldr	r3, [pc, #44]	; (10d14 <addM2MRemoteNumber+0x64>)
   10ce6:	4798      	blx	r3
	setM2MRemoteVerified(false);
   10ce8:	2000      	movs	r0, #0
   10cea:	4b0b      	ldr	r3, [pc, #44]	; (10d18 <addM2MRemoteNumber+0x68>)
   10cec:	4798      	blx	r3
	saveM2MSettings(false);
   10cee:	2000      	movs	r0, #0
   10cf0:	4b0a      	ldr	r3, [pc, #40]	; (10d1c <addM2MRemoteNumber+0x6c>)
   10cf2:	4798      	blx	r3
}
   10cf4:	46c0      	nop			; (mov r8, r8)
   10cf6:	46bd      	mov	sp, r7
   10cf8:	b002      	add	sp, #8
   10cfa:	bd80      	pop	{r7, pc}
   10cfc:	20000754 	.word	0x20000754
   10d00:	20000770 	.word	0x20000770
   10d04:	00028dd7 	.word	0x00028dd7
   10d08:	20000784 	.word	0x20000784
   10d0c:	00028b21 	.word	0x00028b21
   10d10:	00023751 	.word	0x00023751
   10d14:	000238f9 	.word	0x000238f9
   10d18:	00010b95 	.word	0x00010b95
   10d1c:	00010be5 	.word	0x00010be5

00010d20 <getActiveNumber>:

char *getActiveNumber(char *ActiveNo)
{
   10d20:	b580      	push	{r7, lr}
   10d22:	b08e      	sub	sp, #56	; 0x38
   10d24:	af00      	add	r7, sp, #0
   10d26:	6078      	str	r0, [r7, #4]
	if (user_count_struct.current_user_no_count > 0)
   10d28:	4b28      	ldr	r3, [pc, #160]	; (10dcc <getActiveNumber+0xac>)
   10d2a:	789b      	ldrb	r3, [r3, #2]
   10d2c:	2b00      	cmp	r3, #0
   10d2e:	d02b      	beq.n	10d88 <getActiveNumber+0x68>
	{
		if ((alternateNumber_struct.alterNumberSetting))
   10d30:	4b27      	ldr	r3, [pc, #156]	; (10dd0 <getActiveNumber+0xb0>)
   10d32:	785b      	ldrb	r3, [r3, #1]
   10d34:	2b00      	cmp	r3, #0
   10d36:	d006      	beq.n	10d46 <getActiveNumber+0x26>
		{
			strcpy(ActiveNo,alternateNumber_struct.alternateNumber_ee);
   10d38:	4a26      	ldr	r2, [pc, #152]	; (10dd4 <getActiveNumber+0xb4>)
   10d3a:	687b      	ldr	r3, [r7, #4]
   10d3c:	0011      	movs	r1, r2
   10d3e:	0018      	movs	r0, r3
   10d40:	4b25      	ldr	r3, [pc, #148]	; (10dd8 <getActiveNumber+0xb8>)
   10d42:	4798      	blx	r3
   10d44:	e03c      	b.n	10dc0 <getActiveNumber+0xa0>
		}
		else
		{
			struct mobile_no_struct mobile_no;
			memset(page_data, '\0', sizeof(page_data));
   10d46:	4b25      	ldr	r3, [pc, #148]	; (10ddc <getActiveNumber+0xbc>)
   10d48:	223c      	movs	r2, #60	; 0x3c
   10d4a:	2100      	movs	r1, #0
   10d4c:	0018      	movs	r0, r3
   10d4e:	4b24      	ldr	r3, [pc, #144]	; (10de0 <getActiveNumber+0xc0>)
   10d50:	4798      	blx	r3
			eeprom_emulator_read_page(USER_1_MOBILE_NUMBER_PAGE+user_count_struct.primaryNumberIndex, page_data);
   10d52:	4b1e      	ldr	r3, [pc, #120]	; (10dcc <getActiveNumber+0xac>)
   10d54:	78db      	ldrb	r3, [r3, #3]
   10d56:	3309      	adds	r3, #9
   10d58:	b2db      	uxtb	r3, r3
   10d5a:	4a20      	ldr	r2, [pc, #128]	; (10ddc <getActiveNumber+0xbc>)
   10d5c:	0011      	movs	r1, r2
   10d5e:	0018      	movs	r0, r3
   10d60:	4b20      	ldr	r3, [pc, #128]	; (10de4 <getActiveNumber+0xc4>)
   10d62:	4798      	blx	r3
			memcpy(&mobile_no,page_data,sizeof(mobile_no));
   10d64:	2320      	movs	r3, #32
   10d66:	18fa      	adds	r2, r7, r3
   10d68:	4b1c      	ldr	r3, [pc, #112]	; (10ddc <getActiveNumber+0xbc>)
   10d6a:	0010      	movs	r0, r2
   10d6c:	0019      	movs	r1, r3
   10d6e:	2318      	movs	r3, #24
   10d70:	001a      	movs	r2, r3
   10d72:	4b1d      	ldr	r3, [pc, #116]	; (10de8 <getActiveNumber+0xc8>)
   10d74:	4798      	blx	r3
			strcpy(ActiveNo,mobile_no.mobile_no_ee);
   10d76:	2320      	movs	r3, #32
   10d78:	18fb      	adds	r3, r7, r3
   10d7a:	1d1a      	adds	r2, r3, #4
   10d7c:	687b      	ldr	r3, [r7, #4]
   10d7e:	0011      	movs	r1, r2
   10d80:	0018      	movs	r0, r3
   10d82:	4b15      	ldr	r3, [pc, #84]	; (10dd8 <getActiveNumber+0xb8>)
   10d84:	4798      	blx	r3
   10d86:	e01b      	b.n	10dc0 <getActiveNumber+0xa0>
		}
	}
	else																					// no effect of this portion as registerEvent checks for numbercount is > 0
	{
		struct mobile_no_struct mobile_no;
		memset(page_data, '\0', sizeof(page_data));
   10d88:	4b14      	ldr	r3, [pc, #80]	; (10ddc <getActiveNumber+0xbc>)
   10d8a:	223c      	movs	r2, #60	; 0x3c
   10d8c:	2100      	movs	r1, #0
   10d8e:	0018      	movs	r0, r3
   10d90:	4b13      	ldr	r3, [pc, #76]	; (10de0 <getActiveNumber+0xc0>)
   10d92:	4798      	blx	r3
		eeprom_emulator_read_page(ADMIN_1_MOBILE_NUMBER_PAGE, page_data);
   10d94:	4b11      	ldr	r3, [pc, #68]	; (10ddc <getActiveNumber+0xbc>)
   10d96:	0019      	movs	r1, r3
   10d98:	2003      	movs	r0, #3
   10d9a:	4b12      	ldr	r3, [pc, #72]	; (10de4 <getActiveNumber+0xc4>)
   10d9c:	4798      	blx	r3
		memcpy(&mobile_no,page_data,sizeof(mobile_no));
   10d9e:	2308      	movs	r3, #8
   10da0:	18fa      	adds	r2, r7, r3
   10da2:	4b0e      	ldr	r3, [pc, #56]	; (10ddc <getActiveNumber+0xbc>)
   10da4:	0010      	movs	r0, r2
   10da6:	0019      	movs	r1, r3
   10da8:	2318      	movs	r3, #24
   10daa:	001a      	movs	r2, r3
   10dac:	4b0e      	ldr	r3, [pc, #56]	; (10de8 <getActiveNumber+0xc8>)
   10dae:	4798      	blx	r3
		strcpy(ActiveNo,mobile_no.mobile_no_ee);
   10db0:	2308      	movs	r3, #8
   10db2:	18fb      	adds	r3, r7, r3
   10db4:	1d1a      	adds	r2, r3, #4
   10db6:	687b      	ldr	r3, [r7, #4]
   10db8:	0011      	movs	r1, r2
   10dba:	0018      	movs	r0, r3
   10dbc:	4b06      	ldr	r3, [pc, #24]	; (10dd8 <getActiveNumber+0xb8>)
   10dbe:	4798      	blx	r3
	}
	
	return ActiveNo;
   10dc0:	687b      	ldr	r3, [r7, #4]
}
   10dc2:	0018      	movs	r0, r3
   10dc4:	46bd      	mov	sp, r7
   10dc6:	b00e      	add	sp, #56	; 0x38
   10dc8:	bd80      	pop	{r7, pc}
   10dca:	46c0      	nop			; (mov r8, r8)
   10dcc:	20000814 	.word	0x20000814
   10dd0:	2000083c 	.word	0x2000083c
   10dd4:	20000840 	.word	0x20000840
   10dd8:	00028dd7 	.word	0x00028dd7
   10ddc:	20000784 	.word	0x20000784
   10de0:	00028b57 	.word	0x00028b57
   10de4:	0002385d 	.word	0x0002385d
   10de8:	00028b21 	.word	0x00028b21

00010dec <checkExists>:
uint8_t checkExists(char *number)
{
   10dec:	b580      	push	{r7, lr}
   10dee:	b08a      	sub	sp, #40	; 0x28
   10df0:	af00      	add	r7, sp, #0
   10df2:	6078      	str	r0, [r7, #4]
	if (user_count_struct.current_user_no_count > 0)
   10df4:	4b33      	ldr	r3, [pc, #204]	; (10ec4 <checkExists+0xd8>)
   10df6:	789b      	ldrb	r3, [r3, #2]
   10df8:	2b00      	cmp	r3, #0
   10dfa:	d039      	beq.n	10e70 <checkExists+0x84>
		//if(isPrimaryNumber(number))
		//{
		//return 0;
		//}
		
		for (uint8_t i=0;i<user_count_struct.current_user_no_count;i++)
   10dfc:	2327      	movs	r3, #39	; 0x27
   10dfe:	18fb      	adds	r3, r7, r3
   10e00:	2200      	movs	r2, #0
   10e02:	701a      	strb	r2, [r3, #0]
   10e04:	e02d      	b.n	10e62 <checkExists+0x76>
		{
			struct mobile_no_struct mobile_no;
			memset(page_data, '\0', sizeof(page_data));
   10e06:	4b30      	ldr	r3, [pc, #192]	; (10ec8 <checkExists+0xdc>)
   10e08:	223c      	movs	r2, #60	; 0x3c
   10e0a:	2100      	movs	r1, #0
   10e0c:	0018      	movs	r0, r3
   10e0e:	4b2f      	ldr	r3, [pc, #188]	; (10ecc <checkExists+0xe0>)
   10e10:	4798      	blx	r3
			eeprom_emulator_read_page(USER_1_MOBILE_NUMBER_PAGE+i, page_data);
   10e12:	2327      	movs	r3, #39	; 0x27
   10e14:	18fb      	adds	r3, r7, r3
   10e16:	781b      	ldrb	r3, [r3, #0]
   10e18:	3309      	adds	r3, #9
   10e1a:	b2db      	uxtb	r3, r3
   10e1c:	4a2a      	ldr	r2, [pc, #168]	; (10ec8 <checkExists+0xdc>)
   10e1e:	0011      	movs	r1, r2
   10e20:	0018      	movs	r0, r3
   10e22:	4b2b      	ldr	r3, [pc, #172]	; (10ed0 <checkExists+0xe4>)
   10e24:	4798      	blx	r3
			memcpy(&mobile_no,page_data,sizeof(mobile_no));
   10e26:	230c      	movs	r3, #12
   10e28:	18fa      	adds	r2, r7, r3
   10e2a:	4b27      	ldr	r3, [pc, #156]	; (10ec8 <checkExists+0xdc>)
   10e2c:	0010      	movs	r0, r2
   10e2e:	0019      	movs	r1, r3
   10e30:	2318      	movs	r3, #24
   10e32:	001a      	movs	r2, r3
   10e34:	4b27      	ldr	r3, [pc, #156]	; (10ed4 <checkExists+0xe8>)
   10e36:	4798      	blx	r3
			if (strstr(number,mobile_no.mobile_no_ee))
   10e38:	230c      	movs	r3, #12
   10e3a:	18fb      	adds	r3, r7, r3
   10e3c:	1d1a      	adds	r2, r3, #4
   10e3e:	687b      	ldr	r3, [r7, #4]
   10e40:	0011      	movs	r1, r2
   10e42:	0018      	movs	r0, r3
   10e44:	4b24      	ldr	r3, [pc, #144]	; (10ed8 <checkExists+0xec>)
   10e46:	4798      	blx	r3
   10e48:	1e03      	subs	r3, r0, #0
   10e4a:	d003      	beq.n	10e54 <checkExists+0x68>
			{
				return i;
   10e4c:	2327      	movs	r3, #39	; 0x27
   10e4e:	18fb      	adds	r3, r7, r3
   10e50:	781b      	ldrb	r3, [r3, #0]
   10e52:	e032      	b.n	10eba <checkExists+0xce>
		for (uint8_t i=0;i<user_count_struct.current_user_no_count;i++)
   10e54:	2327      	movs	r3, #39	; 0x27
   10e56:	18fb      	adds	r3, r7, r3
   10e58:	781a      	ldrb	r2, [r3, #0]
   10e5a:	2327      	movs	r3, #39	; 0x27
   10e5c:	18fb      	adds	r3, r7, r3
   10e5e:	3201      	adds	r2, #1
   10e60:	701a      	strb	r2, [r3, #0]
   10e62:	4b18      	ldr	r3, [pc, #96]	; (10ec4 <checkExists+0xd8>)
   10e64:	789b      	ldrb	r3, [r3, #2]
   10e66:	2227      	movs	r2, #39	; 0x27
   10e68:	18ba      	adds	r2, r7, r2
   10e6a:	7812      	ldrb	r2, [r2, #0]
   10e6c:	429a      	cmp	r2, r3
   10e6e:	d3ca      	bcc.n	10e06 <checkExists+0x1a>
			}
		}
	}

	if(isAlterNumber(number))
   10e70:	687b      	ldr	r3, [r7, #4]
   10e72:	0018      	movs	r0, r3
   10e74:	4b19      	ldr	r3, [pc, #100]	; (10edc <checkExists+0xf0>)
   10e76:	4798      	blx	r3
   10e78:	1e03      	subs	r3, r0, #0
   10e7a:	d001      	beq.n	10e80 <checkExists+0x94>
	{
		return 0xFD;
   10e7c:	23fd      	movs	r3, #253	; 0xfd
   10e7e:	e01c      	b.n	10eba <checkExists+0xce>
	}

	if((m2m_Numbers_struct.m2mVerified) && isM2MNumber(number))
   10e80:	4b17      	ldr	r3, [pc, #92]	; (10ee0 <checkExists+0xf4>)
   10e82:	789b      	ldrb	r3, [r3, #2]
   10e84:	2b00      	cmp	r3, #0
   10e86:	d007      	beq.n	10e98 <checkExists+0xac>
   10e88:	687b      	ldr	r3, [r7, #4]
   10e8a:	0018      	movs	r0, r3
   10e8c:	4b15      	ldr	r3, [pc, #84]	; (10ee4 <checkExists+0xf8>)
   10e8e:	4798      	blx	r3
   10e90:	1e03      	subs	r3, r0, #0
   10e92:	d001      	beq.n	10e98 <checkExists+0xac>
	{
		return 0xFE;
   10e94:	23fe      	movs	r3, #254	; 0xfe
   10e96:	e010      	b.n	10eba <checkExists+0xce>
	}
	if (factory_settings_parameter_struct.ENABLE_M2M)
   10e98:	4b13      	ldr	r3, [pc, #76]	; (10ee8 <checkExists+0xfc>)
   10e9a:	78db      	ldrb	r3, [r3, #3]
   10e9c:	2b00      	cmp	r3, #0
   10e9e:	d00b      	beq.n	10eb8 <checkExists+0xcc>
	{
		if ((m2m_Numbers_struct.m2mRemoteVerified) && isM2MRemoteNumber(number))
   10ea0:	4b0f      	ldr	r3, [pc, #60]	; (10ee0 <checkExists+0xf4>)
   10ea2:	791b      	ldrb	r3, [r3, #4]
   10ea4:	2b00      	cmp	r3, #0
   10ea6:	d007      	beq.n	10eb8 <checkExists+0xcc>
   10ea8:	687b      	ldr	r3, [r7, #4]
   10eaa:	0018      	movs	r0, r3
   10eac:	4b0f      	ldr	r3, [pc, #60]	; (10eec <checkExists+0x100>)
   10eae:	4798      	blx	r3
   10eb0:	1e03      	subs	r3, r0, #0
   10eb2:	d001      	beq.n	10eb8 <checkExists+0xcc>
		{
			return 0xFE;
   10eb4:	23fe      	movs	r3, #254	; 0xfe
   10eb6:	e000      	b.n	10eba <checkExists+0xce>
		}
	}
	return 0xFF;
   10eb8:	23ff      	movs	r3, #255	; 0xff
}
   10eba:	0018      	movs	r0, r3
   10ebc:	46bd      	mov	sp, r7
   10ebe:	b00a      	add	sp, #40	; 0x28
   10ec0:	bd80      	pop	{r7, pc}
   10ec2:	46c0      	nop			; (mov r8, r8)
   10ec4:	20000814 	.word	0x20000814
   10ec8:	20000784 	.word	0x20000784
   10ecc:	00028b57 	.word	0x00028b57
   10ed0:	0002385d 	.word	0x0002385d
   10ed4:	00028b21 	.word	0x00028b21
   10ed8:	00028e17 	.word	0x00028e17
   10edc:	00010a0d 	.word	0x00010a0d
   10ee0:	20000754 	.word	0x20000754
   10ee4:	00010a55 	.word	0x00010a55
   10ee8:	2000082c 	.word	0x2000082c
   10eec:	00010a91 	.word	0x00010a91

00010ef0 <addNumber>:

bool addNumber(char *number)
{
   10ef0:	b580      	push	{r7, lr}
   10ef2:	b088      	sub	sp, #32
   10ef4:	af00      	add	r7, sp, #0
   10ef6:	6078      	str	r0, [r7, #4]
	if (user_count_struct.current_user_no_count == user_count_struct.total_user_no_count)
   10ef8:	4b33      	ldr	r3, [pc, #204]	; (10fc8 <addNumber+0xd8>)
   10efa:	789a      	ldrb	r2, [r3, #2]
   10efc:	4b32      	ldr	r3, [pc, #200]	; (10fc8 <addNumber+0xd8>)
   10efe:	785b      	ldrb	r3, [r3, #1]
   10f00:	429a      	cmp	r2, r3
   10f02:	d101      	bne.n	10f08 <addNumber+0x18>
	{
		return false;
   10f04:	2300      	movs	r3, #0
   10f06:	e05a      	b.n	10fbe <addNumber+0xce>
	}
	else
	{
		if (checkExists(number) > 0xF0)
   10f08:	687b      	ldr	r3, [r7, #4]
   10f0a:	0018      	movs	r0, r3
   10f0c:	4b2f      	ldr	r3, [pc, #188]	; (10fcc <addNumber+0xdc>)
   10f0e:	4798      	blx	r3
   10f10:	0003      	movs	r3, r0
   10f12:	2bf0      	cmp	r3, #240	; 0xf0
   10f14:	d952      	bls.n	10fbc <addNumber+0xcc>
		{
			struct mobile_no_struct mobile_no;
			memset(page_data, '\0', sizeof(page_data));
   10f16:	4b2e      	ldr	r3, [pc, #184]	; (10fd0 <addNumber+0xe0>)
   10f18:	223c      	movs	r2, #60	; 0x3c
   10f1a:	2100      	movs	r1, #0
   10f1c:	0018      	movs	r0, r3
   10f1e:	4b2d      	ldr	r3, [pc, #180]	; (10fd4 <addNumber+0xe4>)
   10f20:	4798      	blx	r3
			eeprom_emulator_read_page((USER_1_MOBILE_NUMBER_PAGE+user_count_struct.current_user_no_count), page_data);
   10f22:	4b29      	ldr	r3, [pc, #164]	; (10fc8 <addNumber+0xd8>)
   10f24:	789b      	ldrb	r3, [r3, #2]
   10f26:	3309      	adds	r3, #9
   10f28:	b2db      	uxtb	r3, r3
   10f2a:	4a29      	ldr	r2, [pc, #164]	; (10fd0 <addNumber+0xe0>)
   10f2c:	0011      	movs	r1, r2
   10f2e:	0018      	movs	r0, r3
   10f30:	4b29      	ldr	r3, [pc, #164]	; (10fd8 <addNumber+0xe8>)
   10f32:	4798      	blx	r3
			memcpy(&mobile_no,page_data,sizeof(mobile_no));
   10f34:	2308      	movs	r3, #8
   10f36:	18fa      	adds	r2, r7, r3
   10f38:	4b25      	ldr	r3, [pc, #148]	; (10fd0 <addNumber+0xe0>)
   10f3a:	0010      	movs	r0, r2
   10f3c:	0019      	movs	r1, r3
   10f3e:	2318      	movs	r3, #24
   10f40:	001a      	movs	r2, r3
   10f42:	4b26      	ldr	r3, [pc, #152]	; (10fdc <addNumber+0xec>)
   10f44:	4798      	blx	r3
			
			memset(mobile_no.mobile_no_ee, '\0', sizeof(mobile_no.mobile_no_ee));
   10f46:	2308      	movs	r3, #8
   10f48:	18fb      	adds	r3, r7, r3
   10f4a:	3304      	adds	r3, #4
   10f4c:	2214      	movs	r2, #20
   10f4e:	2100      	movs	r1, #0
   10f50:	0018      	movs	r0, r3
   10f52:	4b20      	ldr	r3, [pc, #128]	; (10fd4 <addNumber+0xe4>)
   10f54:	4798      	blx	r3
			strcpy(mobile_no.mobile_no_ee,number);
   10f56:	687a      	ldr	r2, [r7, #4]
   10f58:	2308      	movs	r3, #8
   10f5a:	18fb      	adds	r3, r7, r3
   10f5c:	3304      	adds	r3, #4
   10f5e:	0011      	movs	r1, r2
   10f60:	0018      	movs	r0, r3
   10f62:	4b1f      	ldr	r3, [pc, #124]	; (10fe0 <addNumber+0xf0>)
   10f64:	4798      	blx	r3
			
			memcpy(page_data,&mobile_no,sizeof(mobile_no));
   10f66:	4a1a      	ldr	r2, [pc, #104]	; (10fd0 <addNumber+0xe0>)
   10f68:	2308      	movs	r3, #8
   10f6a:	18fb      	adds	r3, r7, r3
   10f6c:	0010      	movs	r0, r2
   10f6e:	0019      	movs	r1, r3
   10f70:	2318      	movs	r3, #24
   10f72:	001a      	movs	r2, r3
   10f74:	4b19      	ldr	r3, [pc, #100]	; (10fdc <addNumber+0xec>)
   10f76:	4798      	blx	r3
			eeprom_emulator_write_page((USER_1_MOBILE_NUMBER_PAGE+user_count_struct.current_user_no_count), page_data);
   10f78:	4b13      	ldr	r3, [pc, #76]	; (10fc8 <addNumber+0xd8>)
   10f7a:	789b      	ldrb	r3, [r3, #2]
   10f7c:	3309      	adds	r3, #9
   10f7e:	b2db      	uxtb	r3, r3
   10f80:	4a13      	ldr	r2, [pc, #76]	; (10fd0 <addNumber+0xe0>)
   10f82:	0011      	movs	r1, r2
   10f84:	0018      	movs	r0, r3
   10f86:	4b17      	ldr	r3, [pc, #92]	; (10fe4 <addNumber+0xf4>)
   10f88:	4798      	blx	r3
			eeprom_emulator_commit_page_buffer();
   10f8a:	4b17      	ldr	r3, [pc, #92]	; (10fe8 <addNumber+0xf8>)
   10f8c:	4798      	blx	r3
			
			user_count_struct.current_user_no_count++;
   10f8e:	4b0e      	ldr	r3, [pc, #56]	; (10fc8 <addNumber+0xd8>)
   10f90:	789b      	ldrb	r3, [r3, #2]
   10f92:	3301      	adds	r3, #1
   10f94:	b2da      	uxtb	r2, r3
   10f96:	4b0c      	ldr	r3, [pc, #48]	; (10fc8 <addNumber+0xd8>)
   10f98:	709a      	strb	r2, [r3, #2]
			
			memcpy(page_data,&user_count_struct,sizeof(user_count_struct));
   10f9a:	4a0d      	ldr	r2, [pc, #52]	; (10fd0 <addNumber+0xe0>)
   10f9c:	4b0a      	ldr	r3, [pc, #40]	; (10fc8 <addNumber+0xd8>)
   10f9e:	0010      	movs	r0, r2
   10fa0:	0019      	movs	r1, r3
   10fa2:	2308      	movs	r3, #8
   10fa4:	001a      	movs	r2, r3
   10fa6:	4b0d      	ldr	r3, [pc, #52]	; (10fdc <addNumber+0xec>)
   10fa8:	4798      	blx	r3
			eeprom_emulator_write_page(USER_COUNTER_PAGE, page_data);
   10faa:	4b09      	ldr	r3, [pc, #36]	; (10fd0 <addNumber+0xe0>)
   10fac:	0019      	movs	r1, r3
   10fae:	2008      	movs	r0, #8
   10fb0:	4b0c      	ldr	r3, [pc, #48]	; (10fe4 <addNumber+0xf4>)
   10fb2:	4798      	blx	r3
			eeprom_emulator_commit_page_buffer();
   10fb4:	4b0c      	ldr	r3, [pc, #48]	; (10fe8 <addNumber+0xf8>)
   10fb6:	4798      	blx	r3
			
			return true;
   10fb8:	2301      	movs	r3, #1
   10fba:	e000      	b.n	10fbe <addNumber+0xce>
		}
	}
	return false;
   10fbc:	2300      	movs	r3, #0
}
   10fbe:	0018      	movs	r0, r3
   10fc0:	46bd      	mov	sp, r7
   10fc2:	b008      	add	sp, #32
   10fc4:	bd80      	pop	{r7, pc}
   10fc6:	46c0      	nop			; (mov r8, r8)
   10fc8:	20000814 	.word	0x20000814
   10fcc:	00010ded 	.word	0x00010ded
   10fd0:	20000784 	.word	0x20000784
   10fd4:	00028b57 	.word	0x00028b57
   10fd8:	0002385d 	.word	0x0002385d
   10fdc:	00028b21 	.word	0x00028b21
   10fe0:	00028dd7 	.word	0x00028dd7
   10fe4:	00023751 	.word	0x00023751
   10fe8:	000238f9 	.word	0x000238f9

00010fec <removeNumber>:

bool removeNumber(char *numer)
{
   10fec:	b590      	push	{r4, r7, lr}
   10fee:	b085      	sub	sp, #20
   10ff0:	af00      	add	r7, sp, #0
   10ff2:	6078      	str	r0, [r7, #4]
	if (user_count_struct.current_user_no_count < 2)
   10ff4:	4b3d      	ldr	r3, [pc, #244]	; (110ec <removeNumber+0x100>)
   10ff6:	789b      	ldrb	r3, [r3, #2]
   10ff8:	2b01      	cmp	r3, #1
   10ffa:	d801      	bhi.n	11000 <removeNumber+0x14>
	{
		return false;
   10ffc:	2300      	movs	r3, #0
   10ffe:	e071      	b.n	110e4 <removeNumber+0xf8>
	}
	else
	{
		uint8_t loc =  checkExists(numer);
   11000:	230e      	movs	r3, #14
   11002:	18fc      	adds	r4, r7, r3
   11004:	687b      	ldr	r3, [r7, #4]
   11006:	0018      	movs	r0, r3
   11008:	4b39      	ldr	r3, [pc, #228]	; (110f0 <removeNumber+0x104>)
   1100a:	4798      	blx	r3
   1100c:	0003      	movs	r3, r0
   1100e:	7023      	strb	r3, [r4, #0]
		if ((loc < user_count_struct.total_user_no_count) && (loc != user_count_struct.primaryNumberIndex))	//number is not special number(i.e. alter,m2m,m2mRemote) and not primary number
   11010:	4b36      	ldr	r3, [pc, #216]	; (110ec <removeNumber+0x100>)
   11012:	785b      	ldrb	r3, [r3, #1]
   11014:	220e      	movs	r2, #14
   11016:	18ba      	adds	r2, r7, r2
   11018:	7812      	ldrb	r2, [r2, #0]
   1101a:	429a      	cmp	r2, r3
   1101c:	d261      	bcs.n	110e2 <removeNumber+0xf6>
   1101e:	4b33      	ldr	r3, [pc, #204]	; (110ec <removeNumber+0x100>)
   11020:	78db      	ldrb	r3, [r3, #3]
   11022:	220e      	movs	r2, #14
   11024:	18ba      	adds	r2, r7, r2
   11026:	7812      	ldrb	r2, [r2, #0]
   11028:	429a      	cmp	r2, r3
   1102a:	d05a      	beq.n	110e2 <removeNumber+0xf6>
		{
			for (uint8_t i=loc;i<(user_count_struct.current_user_no_count-1);i++)
   1102c:	230f      	movs	r3, #15
   1102e:	18fb      	adds	r3, r7, r3
   11030:	220e      	movs	r2, #14
   11032:	18ba      	adds	r2, r7, r2
   11034:	7812      	ldrb	r2, [r2, #0]
   11036:	701a      	strb	r2, [r3, #0]
   11038:	e022      	b.n	11080 <removeNumber+0x94>
			{
				memset(page_data, '\0', sizeof(page_data));
   1103a:	4b2e      	ldr	r3, [pc, #184]	; (110f4 <removeNumber+0x108>)
   1103c:	223c      	movs	r2, #60	; 0x3c
   1103e:	2100      	movs	r1, #0
   11040:	0018      	movs	r0, r3
   11042:	4b2d      	ldr	r3, [pc, #180]	; (110f8 <removeNumber+0x10c>)
   11044:	4798      	blx	r3
				eeprom_emulator_read_page(USER_1_MOBILE_NUMBER_PAGE+i+1, page_data);
   11046:	230f      	movs	r3, #15
   11048:	18fb      	adds	r3, r7, r3
   1104a:	781b      	ldrb	r3, [r3, #0]
   1104c:	330a      	adds	r3, #10
   1104e:	b2db      	uxtb	r3, r3
   11050:	4a28      	ldr	r2, [pc, #160]	; (110f4 <removeNumber+0x108>)
   11052:	0011      	movs	r1, r2
   11054:	0018      	movs	r0, r3
   11056:	4b29      	ldr	r3, [pc, #164]	; (110fc <removeNumber+0x110>)
   11058:	4798      	blx	r3
				eeprom_emulator_write_page(USER_1_MOBILE_NUMBER_PAGE+i, page_data);
   1105a:	230f      	movs	r3, #15
   1105c:	18fb      	adds	r3, r7, r3
   1105e:	781b      	ldrb	r3, [r3, #0]
   11060:	3309      	adds	r3, #9
   11062:	b2db      	uxtb	r3, r3
   11064:	4a23      	ldr	r2, [pc, #140]	; (110f4 <removeNumber+0x108>)
   11066:	0011      	movs	r1, r2
   11068:	0018      	movs	r0, r3
   1106a:	4b25      	ldr	r3, [pc, #148]	; (11100 <removeNumber+0x114>)
   1106c:	4798      	blx	r3
				eeprom_emulator_commit_page_buffer();
   1106e:	4b25      	ldr	r3, [pc, #148]	; (11104 <removeNumber+0x118>)
   11070:	4798      	blx	r3
			for (uint8_t i=loc;i<(user_count_struct.current_user_no_count-1);i++)
   11072:	230f      	movs	r3, #15
   11074:	18fb      	adds	r3, r7, r3
   11076:	781a      	ldrb	r2, [r3, #0]
   11078:	230f      	movs	r3, #15
   1107a:	18fb      	adds	r3, r7, r3
   1107c:	3201      	adds	r2, #1
   1107e:	701a      	strb	r2, [r3, #0]
   11080:	230f      	movs	r3, #15
   11082:	18fb      	adds	r3, r7, r3
   11084:	781a      	ldrb	r2, [r3, #0]
   11086:	4b19      	ldr	r3, [pc, #100]	; (110ec <removeNumber+0x100>)
   11088:	789b      	ldrb	r3, [r3, #2]
   1108a:	3b01      	subs	r3, #1
   1108c:	429a      	cmp	r2, r3
   1108e:	dbd4      	blt.n	1103a <removeNumber+0x4e>
			}
			user_count_struct.current_user_no_count--;
   11090:	4b16      	ldr	r3, [pc, #88]	; (110ec <removeNumber+0x100>)
   11092:	789b      	ldrb	r3, [r3, #2]
   11094:	3b01      	subs	r3, #1
   11096:	b2da      	uxtb	r2, r3
   11098:	4b14      	ldr	r3, [pc, #80]	; (110ec <removeNumber+0x100>)
   1109a:	709a      	strb	r2, [r3, #2]
			
			if(loc==user_count_struct.secondaryNumberIndex || loc>user_count_struct.current_user_no_count-1)
   1109c:	4b13      	ldr	r3, [pc, #76]	; (110ec <removeNumber+0x100>)
   1109e:	791b      	ldrb	r3, [r3, #4]
   110a0:	220e      	movs	r2, #14
   110a2:	18ba      	adds	r2, r7, r2
   110a4:	7812      	ldrb	r2, [r2, #0]
   110a6:	429a      	cmp	r2, r3
   110a8:	d007      	beq.n	110ba <removeNumber+0xce>
   110aa:	230e      	movs	r3, #14
   110ac:	18fb      	adds	r3, r7, r3
   110ae:	781a      	ldrb	r2, [r3, #0]
   110b0:	4b0e      	ldr	r3, [pc, #56]	; (110ec <removeNumber+0x100>)
   110b2:	789b      	ldrb	r3, [r3, #2]
   110b4:	3b01      	subs	r3, #1
   110b6:	429a      	cmp	r2, r3
   110b8:	dd02      	ble.n	110c0 <removeNumber+0xd4>
			{
				user_count_struct.secondaryNumberIndex= 1;
   110ba:	4b0c      	ldr	r3, [pc, #48]	; (110ec <removeNumber+0x100>)
   110bc:	2201      	movs	r2, #1
   110be:	711a      	strb	r2, [r3, #4]
			}
			memcpy(page_data,&user_count_struct,sizeof(user_count_struct));
   110c0:	4a0c      	ldr	r2, [pc, #48]	; (110f4 <removeNumber+0x108>)
   110c2:	4b0a      	ldr	r3, [pc, #40]	; (110ec <removeNumber+0x100>)
   110c4:	0010      	movs	r0, r2
   110c6:	0019      	movs	r1, r3
   110c8:	2308      	movs	r3, #8
   110ca:	001a      	movs	r2, r3
   110cc:	4b0e      	ldr	r3, [pc, #56]	; (11108 <removeNumber+0x11c>)
   110ce:	4798      	blx	r3
			eeprom_emulator_write_page(USER_COUNTER_PAGE, page_data);
   110d0:	4b08      	ldr	r3, [pc, #32]	; (110f4 <removeNumber+0x108>)
   110d2:	0019      	movs	r1, r3
   110d4:	2008      	movs	r0, #8
   110d6:	4b0a      	ldr	r3, [pc, #40]	; (11100 <removeNumber+0x114>)
   110d8:	4798      	blx	r3
			eeprom_emulator_commit_page_buffer();
   110da:	4b0a      	ldr	r3, [pc, #40]	; (11104 <removeNumber+0x118>)
   110dc:	4798      	blx	r3
			return true;
   110de:	2301      	movs	r3, #1
   110e0:	e000      	b.n	110e4 <removeNumber+0xf8>
		}
	}
	return false;
   110e2:	2300      	movs	r3, #0
}
   110e4:	0018      	movs	r0, r3
   110e6:	46bd      	mov	sp, r7
   110e8:	b005      	add	sp, #20
   110ea:	bd90      	pop	{r4, r7, pc}
   110ec:	20000814 	.word	0x20000814
   110f0:	00010ded 	.word	0x00010ded
   110f4:	20000784 	.word	0x20000784
   110f8:	00028b57 	.word	0x00028b57
   110fc:	0002385d 	.word	0x0002385d
   11100:	00023751 	.word	0x00023751
   11104:	000238f9 	.word	0x000238f9
   11108:	00028b21 	.word	0x00028b21

0001110c <clearNumbers>:

void clearNumbers(bool admin)
{
   1110c:	b580      	push	{r7, lr}
   1110e:	b082      	sub	sp, #8
   11110:	af00      	add	r7, sp, #0
   11112:	0002      	movs	r2, r0
   11114:	1dfb      	adds	r3, r7, #7
   11116:	701a      	strb	r2, [r3, #0]
	if (admin)
   11118:	1dfb      	adds	r3, r7, #7
   1111a:	781b      	ldrb	r3, [r3, #0]
   1111c:	2b00      	cmp	r3, #0
   1111e:	d003      	beq.n	11128 <clearNumbers+0x1c>
	{
		user_count_struct.current_user_no_count = 0;
   11120:	4b28      	ldr	r3, [pc, #160]	; (111c4 <clearNumbers+0xb8>)
   11122:	2200      	movs	r2, #0
   11124:	709a      	strb	r2, [r3, #2]
   11126:	e018      	b.n	1115a <clearNumbers+0x4e>
	}
	else
	{
		memset(page_data, '\0', sizeof(page_data));
   11128:	4b27      	ldr	r3, [pc, #156]	; (111c8 <clearNumbers+0xbc>)
   1112a:	223c      	movs	r2, #60	; 0x3c
   1112c:	2100      	movs	r1, #0
   1112e:	0018      	movs	r0, r3
   11130:	4b26      	ldr	r3, [pc, #152]	; (111cc <clearNumbers+0xc0>)
   11132:	4798      	blx	r3
		eeprom_emulator_read_page(USER_1_MOBILE_NUMBER_PAGE+user_count_struct.primaryNumberIndex, page_data);
   11134:	4b23      	ldr	r3, [pc, #140]	; (111c4 <clearNumbers+0xb8>)
   11136:	78db      	ldrb	r3, [r3, #3]
   11138:	3309      	adds	r3, #9
   1113a:	b2db      	uxtb	r3, r3
   1113c:	4a22      	ldr	r2, [pc, #136]	; (111c8 <clearNumbers+0xbc>)
   1113e:	0011      	movs	r1, r2
   11140:	0018      	movs	r0, r3
   11142:	4b23      	ldr	r3, [pc, #140]	; (111d0 <clearNumbers+0xc4>)
   11144:	4798      	blx	r3
		eeprom_emulator_write_page(USER_1_MOBILE_NUMBER_PAGE, page_data);
   11146:	4b20      	ldr	r3, [pc, #128]	; (111c8 <clearNumbers+0xbc>)
   11148:	0019      	movs	r1, r3
   1114a:	2009      	movs	r0, #9
   1114c:	4b21      	ldr	r3, [pc, #132]	; (111d4 <clearNumbers+0xc8>)
   1114e:	4798      	blx	r3
		eeprom_emulator_commit_page_buffer();
   11150:	4b21      	ldr	r3, [pc, #132]	; (111d8 <clearNumbers+0xcc>)
   11152:	4798      	blx	r3

		user_count_struct.current_user_no_count = 1;
   11154:	4b1b      	ldr	r3, [pc, #108]	; (111c4 <clearNumbers+0xb8>)
   11156:	2201      	movs	r2, #1
   11158:	709a      	strb	r2, [r3, #2]
		
	}
	user_count_struct.primaryNumberIndex=0;
   1115a:	4b1a      	ldr	r3, [pc, #104]	; (111c4 <clearNumbers+0xb8>)
   1115c:	2200      	movs	r2, #0
   1115e:	70da      	strb	r2, [r3, #3]
	user_count_struct.secondaryNumberIndex=1;
   11160:	4b18      	ldr	r3, [pc, #96]	; (111c4 <clearNumbers+0xb8>)
   11162:	2201      	movs	r2, #1
   11164:	711a      	strb	r2, [r3, #4]

	memcpy(page_data,&user_count_struct,sizeof(user_count_struct));
   11166:	4a18      	ldr	r2, [pc, #96]	; (111c8 <clearNumbers+0xbc>)
   11168:	4b16      	ldr	r3, [pc, #88]	; (111c4 <clearNumbers+0xb8>)
   1116a:	0010      	movs	r0, r2
   1116c:	0019      	movs	r1, r3
   1116e:	2308      	movs	r3, #8
   11170:	001a      	movs	r2, r3
   11172:	4b1a      	ldr	r3, [pc, #104]	; (111dc <clearNumbers+0xd0>)
   11174:	4798      	blx	r3
	user_count_struct.primaryNumberIndex=0;
   11176:	4b13      	ldr	r3, [pc, #76]	; (111c4 <clearNumbers+0xb8>)
   11178:	2200      	movs	r2, #0
   1117a:	70da      	strb	r2, [r3, #3]
	user_count_struct.secondaryNumberIndex=1;
   1117c:	4b11      	ldr	r3, [pc, #68]	; (111c4 <clearNumbers+0xb8>)
   1117e:	2201      	movs	r2, #1
   11180:	711a      	strb	r2, [r3, #4]
	eeprom_emulator_write_page(USER_COUNTER_PAGE, page_data);
   11182:	4b11      	ldr	r3, [pc, #68]	; (111c8 <clearNumbers+0xbc>)
   11184:	0019      	movs	r1, r3
   11186:	2008      	movs	r0, #8
   11188:	4b12      	ldr	r3, [pc, #72]	; (111d4 <clearNumbers+0xc8>)
   1118a:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   1118c:	4b12      	ldr	r3, [pc, #72]	; (111d8 <clearNumbers+0xcc>)
   1118e:	4798      	blx	r3
	
	saveAlterNumberSetting(false);
   11190:	2000      	movs	r0, #0
   11192:	4b13      	ldr	r3, [pc, #76]	; (111e0 <clearNumbers+0xd4>)
   11194:	4798      	blx	r3
	
	alternateNumber_struct.alterNumberPresent = false;
   11196:	4b13      	ldr	r3, [pc, #76]	; (111e4 <clearNumbers+0xd8>)
   11198:	2200      	movs	r2, #0
   1119a:	709a      	strb	r2, [r3, #2]
	memcpy(page_data,&alternateNumber_struct,sizeof(alternateNumber_struct));
   1119c:	4a0a      	ldr	r2, [pc, #40]	; (111c8 <clearNumbers+0xbc>)
   1119e:	4b11      	ldr	r3, [pc, #68]	; (111e4 <clearNumbers+0xd8>)
   111a0:	0010      	movs	r0, r2
   111a2:	0019      	movs	r1, r3
   111a4:	2318      	movs	r3, #24
   111a6:	001a      	movs	r2, r3
   111a8:	4b0c      	ldr	r3, [pc, #48]	; (111dc <clearNumbers+0xd0>)
   111aa:	4798      	blx	r3
	eeprom_emulator_write_page(ALTARNATE_NUMBERS_PAGE, page_data);
   111ac:	4b06      	ldr	r3, [pc, #24]	; (111c8 <clearNumbers+0xbc>)
   111ae:	0019      	movs	r1, r3
   111b0:	2018      	movs	r0, #24
   111b2:	4b08      	ldr	r3, [pc, #32]	; (111d4 <clearNumbers+0xc8>)
   111b4:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   111b6:	4b08      	ldr	r3, [pc, #32]	; (111d8 <clearNumbers+0xcc>)
   111b8:	4798      	blx	r3
}
   111ba:	46c0      	nop			; (mov r8, r8)
   111bc:	46bd      	mov	sp, r7
   111be:	b002      	add	sp, #8
   111c0:	bd80      	pop	{r7, pc}
   111c2:	46c0      	nop			; (mov r8, r8)
   111c4:	20000814 	.word	0x20000814
   111c8:	20000784 	.word	0x20000784
   111cc:	00028b57 	.word	0x00028b57
   111d0:	0002385d 	.word	0x0002385d
   111d4:	00023751 	.word	0x00023751
   111d8:	000238f9 	.word	0x000238f9
   111dc:	00028b21 	.word	0x00028b21
   111e0:	000111e9 	.word	0x000111e9
   111e4:	2000083c 	.word	0x2000083c

000111e8 <saveAlterNumberSetting>:

void saveAlterNumberSetting(bool flag)
{
   111e8:	b580      	push	{r7, lr}
   111ea:	b082      	sub	sp, #8
   111ec:	af00      	add	r7, sp, #0
   111ee:	0002      	movs	r2, r0
   111f0:	1dfb      	adds	r3, r7, #7
   111f2:	701a      	strb	r2, [r3, #0]
	alternateNumber_struct.alterNumberSetting = flag;
   111f4:	1dfb      	adds	r3, r7, #7
   111f6:	781a      	ldrb	r2, [r3, #0]
   111f8:	4b0a      	ldr	r3, [pc, #40]	; (11224 <saveAlterNumberSetting+0x3c>)
   111fa:	705a      	strb	r2, [r3, #1]
	memcpy(page_data,&alternateNumber_struct,sizeof(alternateNumber_struct));
   111fc:	4a0a      	ldr	r2, [pc, #40]	; (11228 <saveAlterNumberSetting+0x40>)
   111fe:	4b09      	ldr	r3, [pc, #36]	; (11224 <saveAlterNumberSetting+0x3c>)
   11200:	0010      	movs	r0, r2
   11202:	0019      	movs	r1, r3
   11204:	2318      	movs	r3, #24
   11206:	001a      	movs	r2, r3
   11208:	4b08      	ldr	r3, [pc, #32]	; (1122c <saveAlterNumberSetting+0x44>)
   1120a:	4798      	blx	r3
	eeprom_emulator_write_page(ALTARNATE_NUMBERS_PAGE, page_data);
   1120c:	4b06      	ldr	r3, [pc, #24]	; (11228 <saveAlterNumberSetting+0x40>)
   1120e:	0019      	movs	r1, r3
   11210:	2018      	movs	r0, #24
   11212:	4b07      	ldr	r3, [pc, #28]	; (11230 <saveAlterNumberSetting+0x48>)
   11214:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   11216:	4b07      	ldr	r3, [pc, #28]	; (11234 <saveAlterNumberSetting+0x4c>)
   11218:	4798      	blx	r3
}
   1121a:	46c0      	nop			; (mov r8, r8)
   1121c:	46bd      	mov	sp, r7
   1121e:	b002      	add	sp, #8
   11220:	bd80      	pop	{r7, pc}
   11222:	46c0      	nop			; (mov r8, r8)
   11224:	2000083c 	.word	0x2000083c
   11228:	20000784 	.word	0x20000784
   1122c:	00028b21 	.word	0x00028b21
   11230:	00023751 	.word	0x00023751
   11234:	000238f9 	.word	0x000238f9

00011238 <addAlternateNumber>:

bool addAlternateNumber(char *numer)
{
   11238:	b580      	push	{r7, lr}
   1123a:	b082      	sub	sp, #8
   1123c:	af00      	add	r7, sp, #0
   1123e:	6078      	str	r0, [r7, #4]
	if (user_count_struct.current_user_no_count > 0)
   11240:	4b11      	ldr	r3, [pc, #68]	; (11288 <addAlternateNumber+0x50>)
   11242:	789b      	ldrb	r3, [r3, #2]
   11244:	2b00      	cmp	r3, #0
   11246:	d019      	beq.n	1127c <addAlternateNumber+0x44>
	{
		alternateNumber_struct.alterNumberPresent = true;
   11248:	4b10      	ldr	r3, [pc, #64]	; (1128c <addAlternateNumber+0x54>)
   1124a:	2201      	movs	r2, #1
   1124c:	709a      	strb	r2, [r3, #2]
		strcpy(alternateNumber_struct.alternateNumber_ee,numer);
   1124e:	687a      	ldr	r2, [r7, #4]
   11250:	4b0f      	ldr	r3, [pc, #60]	; (11290 <addAlternateNumber+0x58>)
   11252:	0011      	movs	r1, r2
   11254:	0018      	movs	r0, r3
   11256:	4b0f      	ldr	r3, [pc, #60]	; (11294 <addAlternateNumber+0x5c>)
   11258:	4798      	blx	r3
		memcpy(page_data,&alternateNumber_struct,sizeof(alternateNumber_struct));
   1125a:	4a0f      	ldr	r2, [pc, #60]	; (11298 <addAlternateNumber+0x60>)
   1125c:	4b0b      	ldr	r3, [pc, #44]	; (1128c <addAlternateNumber+0x54>)
   1125e:	0010      	movs	r0, r2
   11260:	0019      	movs	r1, r3
   11262:	2318      	movs	r3, #24
   11264:	001a      	movs	r2, r3
   11266:	4b0d      	ldr	r3, [pc, #52]	; (1129c <addAlternateNumber+0x64>)
   11268:	4798      	blx	r3
		eeprom_emulator_write_page(ALTARNATE_NUMBERS_PAGE, page_data);
   1126a:	4b0b      	ldr	r3, [pc, #44]	; (11298 <addAlternateNumber+0x60>)
   1126c:	0019      	movs	r1, r3
   1126e:	2018      	movs	r0, #24
   11270:	4b0b      	ldr	r3, [pc, #44]	; (112a0 <addAlternateNumber+0x68>)
   11272:	4798      	blx	r3
		eeprom_emulator_commit_page_buffer();
   11274:	4b0b      	ldr	r3, [pc, #44]	; (112a4 <addAlternateNumber+0x6c>)
   11276:	4798      	blx	r3
		
		return true;
   11278:	2301      	movs	r3, #1
   1127a:	e000      	b.n	1127e <addAlternateNumber+0x46>
	}
	return false;
   1127c:	2300      	movs	r3, #0
}
   1127e:	0018      	movs	r0, r3
   11280:	46bd      	mov	sp, r7
   11282:	b002      	add	sp, #8
   11284:	bd80      	pop	{r7, pc}
   11286:	46c0      	nop			; (mov r8, r8)
   11288:	20000814 	.word	0x20000814
   1128c:	2000083c 	.word	0x2000083c
   11290:	20000840 	.word	0x20000840
   11294:	00028dd7 	.word	0x00028dd7
   11298:	20000784 	.word	0x20000784
   1129c:	00028b21 	.word	0x00028b21
   112a0:	00023751 	.word	0x00023751
   112a4:	000238f9 	.word	0x000238f9

000112a8 <saveAutoStartSettings>:

void saveAutoStartSettings(bool flag)
{
   112a8:	b580      	push	{r7, lr}
   112aa:	b082      	sub	sp, #8
   112ac:	af00      	add	r7, sp, #0
   112ae:	0002      	movs	r2, r0
   112b0:	1dfb      	adds	r3, r7, #7
   112b2:	701a      	strb	r2, [r3, #0]
	user_settings_parameter_struct.autoStartAddress = (uint8_t)flag;
   112b4:	1dfb      	adds	r3, r7, #7
   112b6:	781a      	ldrb	r2, [r3, #0]
   112b8:	4b09      	ldr	r3, [pc, #36]	; (112e0 <saveAutoStartSettings+0x38>)
   112ba:	705a      	strb	r2, [r3, #1]
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
   112bc:	4908      	ldr	r1, [pc, #32]	; (112e0 <saveAutoStartSettings+0x38>)
   112be:	4b09      	ldr	r3, [pc, #36]	; (112e4 <saveAutoStartSettings+0x3c>)
   112c0:	2230      	movs	r2, #48	; 0x30
   112c2:	0018      	movs	r0, r3
   112c4:	4b08      	ldr	r3, [pc, #32]	; (112e8 <saveAutoStartSettings+0x40>)
   112c6:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
   112c8:	4b06      	ldr	r3, [pc, #24]	; (112e4 <saveAutoStartSettings+0x3c>)
   112ca:	0019      	movs	r1, r3
   112cc:	201a      	movs	r0, #26
   112ce:	4b07      	ldr	r3, [pc, #28]	; (112ec <saveAutoStartSettings+0x44>)
   112d0:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   112d2:	4b07      	ldr	r3, [pc, #28]	; (112f0 <saveAutoStartSettings+0x48>)
   112d4:	4798      	blx	r3
}
   112d6:	46c0      	nop			; (mov r8, r8)
   112d8:	46bd      	mov	sp, r7
   112da:	b002      	add	sp, #8
   112dc:	bd80      	pop	{r7, pc}
   112de:	46c0      	nop			; (mov r8, r8)
   112e0:	20000854 	.word	0x20000854
   112e4:	20000784 	.word	0x20000784
   112e8:	00028b21 	.word	0x00028b21
   112ec:	00023751 	.word	0x00023751
   112f0:	000238f9 	.word	0x000238f9

000112f4 <saveAutoStartTimeSettings>:

void saveAutoStartTimeSettings(uint16_t value)
{
   112f4:	b580      	push	{r7, lr}
   112f6:	b082      	sub	sp, #8
   112f8:	af00      	add	r7, sp, #0
   112fa:	0002      	movs	r2, r0
   112fc:	1dbb      	adds	r3, r7, #6
   112fe:	801a      	strh	r2, [r3, #0]
	user_settings_parameter_struct.autoStartTimeAddress = value;
   11300:	4b0a      	ldr	r3, [pc, #40]	; (1132c <saveAutoStartTimeSettings+0x38>)
   11302:	1dba      	adds	r2, r7, #6
   11304:	8812      	ldrh	r2, [r2, #0]
   11306:	805a      	strh	r2, [r3, #2]
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
   11308:	4908      	ldr	r1, [pc, #32]	; (1132c <saveAutoStartTimeSettings+0x38>)
   1130a:	4b09      	ldr	r3, [pc, #36]	; (11330 <saveAutoStartTimeSettings+0x3c>)
   1130c:	2230      	movs	r2, #48	; 0x30
   1130e:	0018      	movs	r0, r3
   11310:	4b08      	ldr	r3, [pc, #32]	; (11334 <saveAutoStartTimeSettings+0x40>)
   11312:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
   11314:	4b06      	ldr	r3, [pc, #24]	; (11330 <saveAutoStartTimeSettings+0x3c>)
   11316:	0019      	movs	r1, r3
   11318:	201a      	movs	r0, #26
   1131a:	4b07      	ldr	r3, [pc, #28]	; (11338 <saveAutoStartTimeSettings+0x44>)
   1131c:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   1131e:	4b07      	ldr	r3, [pc, #28]	; (1133c <saveAutoStartTimeSettings+0x48>)
   11320:	4798      	blx	r3
}
   11322:	46c0      	nop			; (mov r8, r8)
   11324:	46bd      	mov	sp, r7
   11326:	b002      	add	sp, #8
   11328:	bd80      	pop	{r7, pc}
   1132a:	46c0      	nop			; (mov r8, r8)
   1132c:	20000854 	.word	0x20000854
   11330:	20000784 	.word	0x20000784
   11334:	00028b21 	.word	0x00028b21
   11338:	00023751 	.word	0x00023751
   1133c:	000238f9 	.word	0x000238f9

00011340 <saveDNDSettings>:

void saveDNDSettings(char flag)
{
   11340:	b580      	push	{r7, lr}
   11342:	b082      	sub	sp, #8
   11344:	af00      	add	r7, sp, #0
   11346:	0002      	movs	r2, r0
   11348:	1dfb      	adds	r3, r7, #7
   1134a:	701a      	strb	r2, [r3, #0]
	user_settings_parameter_struct.dndAddress = flag;
   1134c:	4b0a      	ldr	r3, [pc, #40]	; (11378 <saveDNDSettings+0x38>)
   1134e:	1dfa      	adds	r2, r7, #7
   11350:	7812      	ldrb	r2, [r2, #0]
   11352:	711a      	strb	r2, [r3, #4]
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
   11354:	4908      	ldr	r1, [pc, #32]	; (11378 <saveDNDSettings+0x38>)
   11356:	4b09      	ldr	r3, [pc, #36]	; (1137c <saveDNDSettings+0x3c>)
   11358:	2230      	movs	r2, #48	; 0x30
   1135a:	0018      	movs	r0, r3
   1135c:	4b08      	ldr	r3, [pc, #32]	; (11380 <saveDNDSettings+0x40>)
   1135e:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
   11360:	4b06      	ldr	r3, [pc, #24]	; (1137c <saveDNDSettings+0x3c>)
   11362:	0019      	movs	r1, r3
   11364:	201a      	movs	r0, #26
   11366:	4b07      	ldr	r3, [pc, #28]	; (11384 <saveDNDSettings+0x44>)
   11368:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   1136a:	4b07      	ldr	r3, [pc, #28]	; (11388 <saveDNDSettings+0x48>)
   1136c:	4798      	blx	r3
}
   1136e:	46c0      	nop			; (mov r8, r8)
   11370:	46bd      	mov	sp, r7
   11372:	b002      	add	sp, #8
   11374:	bd80      	pop	{r7, pc}
   11376:	46c0      	nop			; (mov r8, r8)
   11378:	20000854 	.word	0x20000854
   1137c:	20000784 	.word	0x20000784
   11380:	00028b21 	.word	0x00028b21
   11384:	00023751 	.word	0x00023751
   11388:	000238f9 	.word	0x000238f9

0001138c <saveResponseSettings>:
//eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
//eeprom_emulator_commit_page_buffer();
//}

void saveResponseSettings(char response)
{
   1138c:	b580      	push	{r7, lr}
   1138e:	b082      	sub	sp, #8
   11390:	af00      	add	r7, sp, #0
   11392:	0002      	movs	r2, r0
   11394:	1dfb      	adds	r3, r7, #7
   11396:	701a      	strb	r2, [r3, #0]
	user_settings_parameter_struct.responseAddress = response;
   11398:	4b0a      	ldr	r3, [pc, #40]	; (113c4 <saveResponseSettings+0x38>)
   1139a:	1dfa      	adds	r2, r7, #7
   1139c:	7812      	ldrb	r2, [r2, #0]
   1139e:	715a      	strb	r2, [r3, #5]
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
   113a0:	4908      	ldr	r1, [pc, #32]	; (113c4 <saveResponseSettings+0x38>)
   113a2:	4b09      	ldr	r3, [pc, #36]	; (113c8 <saveResponseSettings+0x3c>)
   113a4:	2230      	movs	r2, #48	; 0x30
   113a6:	0018      	movs	r0, r3
   113a8:	4b08      	ldr	r3, [pc, #32]	; (113cc <saveResponseSettings+0x40>)
   113aa:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
   113ac:	4b06      	ldr	r3, [pc, #24]	; (113c8 <saveResponseSettings+0x3c>)
   113ae:	0019      	movs	r1, r3
   113b0:	201a      	movs	r0, #26
   113b2:	4b07      	ldr	r3, [pc, #28]	; (113d0 <saveResponseSettings+0x44>)
   113b4:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   113b6:	4b07      	ldr	r3, [pc, #28]	; (113d4 <saveResponseSettings+0x48>)
   113b8:	4798      	blx	r3
}
   113ba:	46c0      	nop			; (mov r8, r8)
   113bc:	46bd      	mov	sp, r7
   113be:	b002      	add	sp, #8
   113c0:	bd80      	pop	{r7, pc}
   113c2:	46c0      	nop			; (mov r8, r8)
   113c4:	20000854 	.word	0x20000854
   113c8:	20000784 	.word	0x20000784
   113cc:	00028b21 	.word	0x00028b21
   113d0:	00023751 	.word	0x00023751
   113d4:	000238f9 	.word	0x000238f9

000113d8 <saveNoCallSettings>:

void saveNoCallSettings(bool flag,uint8_t startHour,uint8_t startMinute,uint8_t stopHour,uint8_t stopMinute)
{
   113d8:	b5b0      	push	{r4, r5, r7, lr}
   113da:	b082      	sub	sp, #8
   113dc:	af00      	add	r7, sp, #0
   113de:	0005      	movs	r5, r0
   113e0:	000c      	movs	r4, r1
   113e2:	0010      	movs	r0, r2
   113e4:	0019      	movs	r1, r3
   113e6:	1dfb      	adds	r3, r7, #7
   113e8:	1c2a      	adds	r2, r5, #0
   113ea:	701a      	strb	r2, [r3, #0]
   113ec:	1dbb      	adds	r3, r7, #6
   113ee:	1c22      	adds	r2, r4, #0
   113f0:	701a      	strb	r2, [r3, #0]
   113f2:	1d7b      	adds	r3, r7, #5
   113f4:	1c02      	adds	r2, r0, #0
   113f6:	701a      	strb	r2, [r3, #0]
   113f8:	1d3b      	adds	r3, r7, #4
   113fa:	1c0a      	adds	r2, r1, #0
   113fc:	701a      	strb	r2, [r3, #0]
	user_settings_parameter_struct.noCallAddress = (uint8_t)flag;
   113fe:	1dfb      	adds	r3, r7, #7
   11400:	781a      	ldrb	r2, [r3, #0]
   11402:	4b14      	ldr	r3, [pc, #80]	; (11454 <saveNoCallSettings+0x7c>)
   11404:	725a      	strb	r2, [r3, #9]
	if (user_settings_parameter_struct.noCallAddress)
   11406:	4b13      	ldr	r3, [pc, #76]	; (11454 <saveNoCallSettings+0x7c>)
   11408:	7a5b      	ldrb	r3, [r3, #9]
   1140a:	b2db      	uxtb	r3, r3
   1140c:	2b00      	cmp	r3, #0
   1140e:	d010      	beq.n	11432 <saveNoCallSettings+0x5a>
	{
		user_settings_parameter_struct.noCallStartTimeHourAddress = startHour;
   11410:	4b10      	ldr	r3, [pc, #64]	; (11454 <saveNoCallSettings+0x7c>)
   11412:	1dba      	adds	r2, r7, #6
   11414:	7812      	ldrb	r2, [r2, #0]
   11416:	729a      	strb	r2, [r3, #10]
		user_settings_parameter_struct.noCallStartTimeMinuteAddress = startMinute;
   11418:	4b0e      	ldr	r3, [pc, #56]	; (11454 <saveNoCallSettings+0x7c>)
   1141a:	1d7a      	adds	r2, r7, #5
   1141c:	7812      	ldrb	r2, [r2, #0]
   1141e:	72da      	strb	r2, [r3, #11]
		
		user_settings_parameter_struct.noCallStopTimeHourAddress = stopHour;
   11420:	4b0c      	ldr	r3, [pc, #48]	; (11454 <saveNoCallSettings+0x7c>)
   11422:	1d3a      	adds	r2, r7, #4
   11424:	7812      	ldrb	r2, [r2, #0]
   11426:	731a      	strb	r2, [r3, #12]
		user_settings_parameter_struct.noCallStopTimeMinuteAddress = stopMinute;
   11428:	4b0a      	ldr	r3, [pc, #40]	; (11454 <saveNoCallSettings+0x7c>)
   1142a:	2218      	movs	r2, #24
   1142c:	18ba      	adds	r2, r7, r2
   1142e:	7812      	ldrb	r2, [r2, #0]
   11430:	735a      	strb	r2, [r3, #13]
	}
	
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
   11432:	4908      	ldr	r1, [pc, #32]	; (11454 <saveNoCallSettings+0x7c>)
   11434:	4b08      	ldr	r3, [pc, #32]	; (11458 <saveNoCallSettings+0x80>)
   11436:	2230      	movs	r2, #48	; 0x30
   11438:	0018      	movs	r0, r3
   1143a:	4b08      	ldr	r3, [pc, #32]	; (1145c <saveNoCallSettings+0x84>)
   1143c:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
   1143e:	4b06      	ldr	r3, [pc, #24]	; (11458 <saveNoCallSettings+0x80>)
   11440:	0019      	movs	r1, r3
   11442:	201a      	movs	r0, #26
   11444:	4b06      	ldr	r3, [pc, #24]	; (11460 <saveNoCallSettings+0x88>)
   11446:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   11448:	4b06      	ldr	r3, [pc, #24]	; (11464 <saveNoCallSettings+0x8c>)
   1144a:	4798      	blx	r3
}
   1144c:	46c0      	nop			; (mov r8, r8)
   1144e:	46bd      	mov	sp, r7
   11450:	b002      	add	sp, #8
   11452:	bdb0      	pop	{r4, r5, r7, pc}
   11454:	20000854 	.word	0x20000854
   11458:	20000784 	.word	0x20000784
   1145c:	00028b21 	.word	0x00028b21
   11460:	00023751 	.word	0x00023751
   11464:	000238f9 	.word	0x000238f9

00011468 <saveWaterBypassSettings>:

void saveWaterBypassSettings(bool flag)
{
   11468:	b580      	push	{r7, lr}
   1146a:	b082      	sub	sp, #8
   1146c:	af00      	add	r7, sp, #0
   1146e:	0002      	movs	r2, r0
   11470:	1dfb      	adds	r3, r7, #7
   11472:	701a      	strb	r2, [r3, #0]
	user_settings_parameter_struct.waterBypassAddress = (uint8_t)flag;
   11474:	1dfb      	adds	r3, r7, #7
   11476:	781a      	ldrb	r2, [r3, #0]
   11478:	4b09      	ldr	r3, [pc, #36]	; (114a0 <saveWaterBypassSettings+0x38>)
   1147a:	77da      	strb	r2, [r3, #31]
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
   1147c:	4908      	ldr	r1, [pc, #32]	; (114a0 <saveWaterBypassSettings+0x38>)
   1147e:	4b09      	ldr	r3, [pc, #36]	; (114a4 <saveWaterBypassSettings+0x3c>)
   11480:	2230      	movs	r2, #48	; 0x30
   11482:	0018      	movs	r0, r3
   11484:	4b08      	ldr	r3, [pc, #32]	; (114a8 <saveWaterBypassSettings+0x40>)
   11486:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
   11488:	4b06      	ldr	r3, [pc, #24]	; (114a4 <saveWaterBypassSettings+0x3c>)
   1148a:	0019      	movs	r1, r3
   1148c:	201a      	movs	r0, #26
   1148e:	4b07      	ldr	r3, [pc, #28]	; (114ac <saveWaterBypassSettings+0x44>)
   11490:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   11492:	4b07      	ldr	r3, [pc, #28]	; (114b0 <saveWaterBypassSettings+0x48>)
   11494:	4798      	blx	r3
}
   11496:	46c0      	nop			; (mov r8, r8)
   11498:	46bd      	mov	sp, r7
   1149a:	b002      	add	sp, #8
   1149c:	bd80      	pop	{r7, pc}
   1149e:	46c0      	nop			; (mov r8, r8)
   114a0:	20000854 	.word	0x20000854
   114a4:	20000784 	.word	0x20000784
   114a8:	00028b21 	.word	0x00028b21
   114ac:	00023751 	.word	0x00023751
   114b0:	000238f9 	.word	0x000238f9

000114b4 <savePreventOverFlowSettings>:

void savePreventOverFlowSettings(bool flag)
{
   114b4:	b580      	push	{r7, lr}
   114b6:	b082      	sub	sp, #8
   114b8:	af00      	add	r7, sp, #0
   114ba:	0002      	movs	r2, r0
   114bc:	1dfb      	adds	r3, r7, #7
   114be:	701a      	strb	r2, [r3, #0]
	user_settings_parameter_struct.preventOverFlowAddress = (uint8_t)flag;
   114c0:	1dfb      	adds	r3, r7, #7
   114c2:	781a      	ldrb	r2, [r3, #0]
   114c4:	4b09      	ldr	r3, [pc, #36]	; (114ec <savePreventOverFlowSettings+0x38>)
   114c6:	779a      	strb	r2, [r3, #30]
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
   114c8:	4908      	ldr	r1, [pc, #32]	; (114ec <savePreventOverFlowSettings+0x38>)
   114ca:	4b09      	ldr	r3, [pc, #36]	; (114f0 <savePreventOverFlowSettings+0x3c>)
   114cc:	2230      	movs	r2, #48	; 0x30
   114ce:	0018      	movs	r0, r3
   114d0:	4b08      	ldr	r3, [pc, #32]	; (114f4 <savePreventOverFlowSettings+0x40>)
   114d2:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
   114d4:	4b06      	ldr	r3, [pc, #24]	; (114f0 <savePreventOverFlowSettings+0x3c>)
   114d6:	0019      	movs	r1, r3
   114d8:	201a      	movs	r0, #26
   114da:	4b07      	ldr	r3, [pc, #28]	; (114f8 <savePreventOverFlowSettings+0x44>)
   114dc:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   114de:	4b07      	ldr	r3, [pc, #28]	; (114fc <savePreventOverFlowSettings+0x48>)
   114e0:	4798      	blx	r3
}
   114e2:	46c0      	nop			; (mov r8, r8)
   114e4:	46bd      	mov	sp, r7
   114e6:	b002      	add	sp, #8
   114e8:	bd80      	pop	{r7, pc}
   114ea:	46c0      	nop			; (mov r8, r8)
   114ec:	20000854 	.word	0x20000854
   114f0:	20000784 	.word	0x20000784
   114f4:	00028b21 	.word	0x00028b21
   114f8:	00023751 	.word	0x00023751
   114fc:	000238f9 	.word	0x000238f9

00011500 <setOverloadPer>:
//eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
//eeprom_emulator_commit_page_buffer();
//}

bool setOverloadPer(uint8_t overloadPerValue)
{
   11500:	b580      	push	{r7, lr}
   11502:	b082      	sub	sp, #8
   11504:	af00      	add	r7, sp, #0
   11506:	0002      	movs	r2, r0
   11508:	1dfb      	adds	r3, r7, #7
   1150a:	701a      	strb	r2, [r3, #0]
	if(overloadPerValue>100)
   1150c:	1dfb      	adds	r3, r7, #7
   1150e:	781b      	ldrb	r3, [r3, #0]
   11510:	2b64      	cmp	r3, #100	; 0x64
   11512:	d919      	bls.n	11548 <setOverloadPer+0x48>
	{
		user_settings_parameter_struct.overloadPerAddress = overloadPerValue;
   11514:	4b0f      	ldr	r3, [pc, #60]	; (11554 <setOverloadPer+0x54>)
   11516:	1dfa      	adds	r2, r7, #7
   11518:	7812      	ldrb	r2, [r2, #0]
   1151a:	775a      	strb	r2, [r3, #29]
		memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
   1151c:	490d      	ldr	r1, [pc, #52]	; (11554 <setOverloadPer+0x54>)
   1151e:	4b0e      	ldr	r3, [pc, #56]	; (11558 <setOverloadPer+0x58>)
   11520:	2230      	movs	r2, #48	; 0x30
   11522:	0018      	movs	r0, r3
   11524:	4b0d      	ldr	r3, [pc, #52]	; (1155c <setOverloadPer+0x5c>)
   11526:	4798      	blx	r3
		eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
   11528:	4b0b      	ldr	r3, [pc, #44]	; (11558 <setOverloadPer+0x58>)
   1152a:	0019      	movs	r1, r3
   1152c:	201a      	movs	r0, #26
   1152e:	4b0c      	ldr	r3, [pc, #48]	; (11560 <setOverloadPer+0x60>)
   11530:	4798      	blx	r3
		eeprom_emulator_commit_page_buffer();
   11532:	4b0c      	ldr	r3, [pc, #48]	; (11564 <setOverloadPer+0x64>)
   11534:	4798      	blx	r3
		
		if (user_settings_parameter_struct.currentDetectionAddress)
   11536:	4b07      	ldr	r3, [pc, #28]	; (11554 <setOverloadPer+0x54>)
   11538:	7bdb      	ldrb	r3, [r3, #15]
   1153a:	b2db      	uxtb	r3, r3
   1153c:	2b00      	cmp	r3, #0
   1153e:	d001      	beq.n	11544 <setOverloadPer+0x44>
		{
			calcCurrentValues();
   11540:	4b09      	ldr	r3, [pc, #36]	; (11568 <setOverloadPer+0x68>)
   11542:	4798      	blx	r3
		}
		return true;
   11544:	2301      	movs	r3, #1
   11546:	e000      	b.n	1154a <setOverloadPer+0x4a>
	}
	return false;
   11548:	2300      	movs	r3, #0
}
   1154a:	0018      	movs	r0, r3
   1154c:	46bd      	mov	sp, r7
   1154e:	b002      	add	sp, #8
   11550:	bd80      	pop	{r7, pc}
   11552:	46c0      	nop			; (mov r8, r8)
   11554:	20000854 	.word	0x20000854
   11558:	20000784 	.word	0x20000784
   1155c:	00028b21 	.word	0x00028b21
   11560:	00023751 	.word	0x00023751
   11564:	000238f9 	.word	0x000238f9
   11568:	000117ed 	.word	0x000117ed

0001156c <setUnderloadPer>:

bool setUnderloadPer(uint8_t underloadPerValue)
{
   1156c:	b580      	push	{r7, lr}
   1156e:	b082      	sub	sp, #8
   11570:	af00      	add	r7, sp, #0
   11572:	0002      	movs	r2, r0
   11574:	1dfb      	adds	r3, r7, #7
   11576:	701a      	strb	r2, [r3, #0]
	if(underloadPerValue>0 && underloadPerValue <100)
   11578:	1dfb      	adds	r3, r7, #7
   1157a:	781b      	ldrb	r3, [r3, #0]
   1157c:	2b00      	cmp	r3, #0
   1157e:	d01d      	beq.n	115bc <setUnderloadPer+0x50>
   11580:	1dfb      	adds	r3, r7, #7
   11582:	781b      	ldrb	r3, [r3, #0]
   11584:	2b63      	cmp	r3, #99	; 0x63
   11586:	d819      	bhi.n	115bc <setUnderloadPer+0x50>
	{
		user_settings_parameter_struct.underloadPerAddress = underloadPerValue;
   11588:	4b0f      	ldr	r3, [pc, #60]	; (115c8 <setUnderloadPer+0x5c>)
   1158a:	1dfa      	adds	r2, r7, #7
   1158c:	7812      	ldrb	r2, [r2, #0]
   1158e:	771a      	strb	r2, [r3, #28]
		memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
   11590:	490d      	ldr	r1, [pc, #52]	; (115c8 <setUnderloadPer+0x5c>)
   11592:	4b0e      	ldr	r3, [pc, #56]	; (115cc <setUnderloadPer+0x60>)
   11594:	2230      	movs	r2, #48	; 0x30
   11596:	0018      	movs	r0, r3
   11598:	4b0d      	ldr	r3, [pc, #52]	; (115d0 <setUnderloadPer+0x64>)
   1159a:	4798      	blx	r3
		eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
   1159c:	4b0b      	ldr	r3, [pc, #44]	; (115cc <setUnderloadPer+0x60>)
   1159e:	0019      	movs	r1, r3
   115a0:	201a      	movs	r0, #26
   115a2:	4b0c      	ldr	r3, [pc, #48]	; (115d4 <setUnderloadPer+0x68>)
   115a4:	4798      	blx	r3
		eeprom_emulator_commit_page_buffer();
   115a6:	4b0c      	ldr	r3, [pc, #48]	; (115d8 <setUnderloadPer+0x6c>)
   115a8:	4798      	blx	r3
		if (user_settings_parameter_struct.currentDetectionAddress)
   115aa:	4b07      	ldr	r3, [pc, #28]	; (115c8 <setUnderloadPer+0x5c>)
   115ac:	7bdb      	ldrb	r3, [r3, #15]
   115ae:	b2db      	uxtb	r3, r3
   115b0:	2b00      	cmp	r3, #0
   115b2:	d001      	beq.n	115b8 <setUnderloadPer+0x4c>
		{
			calcCurrentValues();
   115b4:	4b09      	ldr	r3, [pc, #36]	; (115dc <setUnderloadPer+0x70>)
   115b6:	4798      	blx	r3
		}
		return true;
   115b8:	2301      	movs	r3, #1
   115ba:	e000      	b.n	115be <setUnderloadPer+0x52>
	}
	return false;
   115bc:	2300      	movs	r3, #0
}
   115be:	0018      	movs	r0, r3
   115c0:	46bd      	mov	sp, r7
   115c2:	b002      	add	sp, #8
   115c4:	bd80      	pop	{r7, pc}
   115c6:	46c0      	nop			; (mov r8, r8)
   115c8:	20000854 	.word	0x20000854
   115cc:	20000784 	.word	0x20000784
   115d0:	00028b21 	.word	0x00028b21
   115d4:	00023751 	.word	0x00023751
   115d8:	000238f9 	.word	0x000238f9
   115dc:	000117ed 	.word	0x000117ed

000115e0 <saveSinglePhasingSettings>:

void saveSinglePhasingSettings(bool singlePhasing)
{
   115e0:	b580      	push	{r7, lr}
   115e2:	b082      	sub	sp, #8
   115e4:	af00      	add	r7, sp, #0
   115e6:	0002      	movs	r2, r0
   115e8:	1dfb      	adds	r3, r7, #7
   115ea:	701a      	strb	r2, [r3, #0]
	user_settings_parameter_struct.detectSinglePhasing=singlePhasing;
   115ec:	1dfb      	adds	r3, r7, #7
   115ee:	7819      	ldrb	r1, [r3, #0]
   115f0:	4b09      	ldr	r3, [pc, #36]	; (11618 <saveSinglePhasingSettings+0x38>)
   115f2:	2220      	movs	r2, #32
   115f4:	5499      	strb	r1, [r3, r2]
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
   115f6:	4908      	ldr	r1, [pc, #32]	; (11618 <saveSinglePhasingSettings+0x38>)
   115f8:	4b08      	ldr	r3, [pc, #32]	; (1161c <saveSinglePhasingSettings+0x3c>)
   115fa:	2230      	movs	r2, #48	; 0x30
   115fc:	0018      	movs	r0, r3
   115fe:	4b08      	ldr	r3, [pc, #32]	; (11620 <saveSinglePhasingSettings+0x40>)
   11600:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
   11602:	4b06      	ldr	r3, [pc, #24]	; (1161c <saveSinglePhasingSettings+0x3c>)
   11604:	0019      	movs	r1, r3
   11606:	201a      	movs	r0, #26
   11608:	4b06      	ldr	r3, [pc, #24]	; (11624 <saveSinglePhasingSettings+0x44>)
   1160a:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   1160c:	4b06      	ldr	r3, [pc, #24]	; (11628 <saveSinglePhasingSettings+0x48>)
   1160e:	4798      	blx	r3
}
   11610:	46c0      	nop			; (mov r8, r8)
   11612:	46bd      	mov	sp, r7
   11614:	b002      	add	sp, #8
   11616:	bd80      	pop	{r7, pc}
   11618:	20000854 	.word	0x20000854
   1161c:	20000784 	.word	0x20000784
   11620:	00028b21 	.word	0x00028b21
   11624:	00023751 	.word	0x00023751
   11628:	000238f9 	.word	0x000238f9

0001162c <saveSinglePhasingVoltage>:

void saveSinglePhasingVoltage(uint16_t voltage)
{
   1162c:	b580      	push	{r7, lr}
   1162e:	b082      	sub	sp, #8
   11630:	af00      	add	r7, sp, #0
   11632:	0002      	movs	r2, r0
   11634:	1dbb      	adds	r3, r7, #6
   11636:	801a      	strh	r2, [r3, #0]
	user_settings_parameter_struct.singlePhasingVoltage= voltage;
   11638:	4b0a      	ldr	r3, [pc, #40]	; (11664 <saveSinglePhasingVoltage+0x38>)
   1163a:	1dba      	adds	r2, r7, #6
   1163c:	8812      	ldrh	r2, [r2, #0]
   1163e:	845a      	strh	r2, [r3, #34]	; 0x22
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
   11640:	4908      	ldr	r1, [pc, #32]	; (11664 <saveSinglePhasingVoltage+0x38>)
   11642:	4b09      	ldr	r3, [pc, #36]	; (11668 <saveSinglePhasingVoltage+0x3c>)
   11644:	2230      	movs	r2, #48	; 0x30
   11646:	0018      	movs	r0, r3
   11648:	4b08      	ldr	r3, [pc, #32]	; (1166c <saveSinglePhasingVoltage+0x40>)
   1164a:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
   1164c:	4b06      	ldr	r3, [pc, #24]	; (11668 <saveSinglePhasingVoltage+0x3c>)
   1164e:	0019      	movs	r1, r3
   11650:	201a      	movs	r0, #26
   11652:	4b07      	ldr	r3, [pc, #28]	; (11670 <saveSinglePhasingVoltage+0x44>)
   11654:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   11656:	4b07      	ldr	r3, [pc, #28]	; (11674 <saveSinglePhasingVoltage+0x48>)
   11658:	4798      	blx	r3
}
   1165a:	46c0      	nop			; (mov r8, r8)
   1165c:	46bd      	mov	sp, r7
   1165e:	b002      	add	sp, #8
   11660:	bd80      	pop	{r7, pc}
   11662:	46c0      	nop			; (mov r8, r8)
   11664:	20000854 	.word	0x20000854
   11668:	20000784 	.word	0x20000784
   1166c:	00028b21 	.word	0x00028b21
   11670:	00023751 	.word	0x00023751
   11674:	000238f9 	.word	0x000238f9

00011678 <savePhaseSequenceProtectionSettings>:

void savePhaseSequenceProtectionSettings(bool phaseSequenceSetting)
{
   11678:	b580      	push	{r7, lr}
   1167a:	b082      	sub	sp, #8
   1167c:	af00      	add	r7, sp, #0
   1167e:	0002      	movs	r2, r0
   11680:	1dfb      	adds	r3, r7, #7
   11682:	701a      	strb	r2, [r3, #0]
	user_settings_parameter_struct.detectPhaseSequence= phaseSequenceSetting;
   11684:	1dfb      	adds	r3, r7, #7
   11686:	7819      	ldrb	r1, [r3, #0]
   11688:	4b09      	ldr	r3, [pc, #36]	; (116b0 <savePhaseSequenceProtectionSettings+0x38>)
   1168a:	2224      	movs	r2, #36	; 0x24
   1168c:	5499      	strb	r1, [r3, r2]
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
   1168e:	4908      	ldr	r1, [pc, #32]	; (116b0 <savePhaseSequenceProtectionSettings+0x38>)
   11690:	4b08      	ldr	r3, [pc, #32]	; (116b4 <savePhaseSequenceProtectionSettings+0x3c>)
   11692:	2230      	movs	r2, #48	; 0x30
   11694:	0018      	movs	r0, r3
   11696:	4b08      	ldr	r3, [pc, #32]	; (116b8 <savePhaseSequenceProtectionSettings+0x40>)
   11698:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
   1169a:	4b06      	ldr	r3, [pc, #24]	; (116b4 <savePhaseSequenceProtectionSettings+0x3c>)
   1169c:	0019      	movs	r1, r3
   1169e:	201a      	movs	r0, #26
   116a0:	4b06      	ldr	r3, [pc, #24]	; (116bc <savePhaseSequenceProtectionSettings+0x44>)
   116a2:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   116a4:	4b06      	ldr	r3, [pc, #24]	; (116c0 <savePhaseSequenceProtectionSettings+0x48>)
   116a6:	4798      	blx	r3
}
   116a8:	46c0      	nop			; (mov r8, r8)
   116aa:	46bd      	mov	sp, r7
   116ac:	b002      	add	sp, #8
   116ae:	bd80      	pop	{r7, pc}
   116b0:	20000854 	.word	0x20000854
   116b4:	20000784 	.word	0x20000784
   116b8:	00028b21 	.word	0x00028b21
   116bc:	00023751 	.word	0x00023751
   116c0:	000238f9 	.word	0x000238f9

000116c4 <saveUnderOverDetectionMethodSettings>:


void saveUnderOverDetectionMethodSettings(uint8_t oumethodDetection)
{
   116c4:	b580      	push	{r7, lr}
   116c6:	b082      	sub	sp, #8
   116c8:	af00      	add	r7, sp, #0
   116ca:	0002      	movs	r2, r0
   116cc:	1dfb      	adds	r3, r7, #7
   116ce:	701a      	strb	r2, [r3, #0]
	user_settings_parameter_struct.over_under_DetectionMethod = oumethodDetection;
   116d0:	4b0a      	ldr	r3, [pc, #40]	; (116fc <saveUnderOverDetectionMethodSettings+0x38>)
   116d2:	1dfa      	adds	r2, r7, #7
   116d4:	2126      	movs	r1, #38	; 0x26
   116d6:	7812      	ldrb	r2, [r2, #0]
   116d8:	545a      	strb	r2, [r3, r1]
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
   116da:	4908      	ldr	r1, [pc, #32]	; (116fc <saveUnderOverDetectionMethodSettings+0x38>)
   116dc:	4b08      	ldr	r3, [pc, #32]	; (11700 <saveUnderOverDetectionMethodSettings+0x3c>)
   116de:	2230      	movs	r2, #48	; 0x30
   116e0:	0018      	movs	r0, r3
   116e2:	4b08      	ldr	r3, [pc, #32]	; (11704 <saveUnderOverDetectionMethodSettings+0x40>)
   116e4:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
   116e6:	4b06      	ldr	r3, [pc, #24]	; (11700 <saveUnderOverDetectionMethodSettings+0x3c>)
   116e8:	0019      	movs	r1, r3
   116ea:	201a      	movs	r0, #26
   116ec:	4b06      	ldr	r3, [pc, #24]	; (11708 <saveUnderOverDetectionMethodSettings+0x44>)
   116ee:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   116f0:	4b06      	ldr	r3, [pc, #24]	; (1170c <saveUnderOverDetectionMethodSettings+0x48>)
   116f2:	4798      	blx	r3
}
   116f4:	46c0      	nop			; (mov r8, r8)
   116f6:	46bd      	mov	sp, r7
   116f8:	b002      	add	sp, #8
   116fa:	bd80      	pop	{r7, pc}
   116fc:	20000854 	.word	0x20000854
   11700:	20000784 	.word	0x20000784
   11704:	00028b21 	.word	0x00028b21
   11708:	00023751 	.word	0x00023751
   1170c:	000238f9 	.word	0x000238f9

00011710 <saveMotorVoltageBypassSettings>:

void saveMotorVoltageBypassSettings(bool flag)
{
   11710:	b580      	push	{r7, lr}
   11712:	b082      	sub	sp, #8
   11714:	af00      	add	r7, sp, #0
   11716:	0002      	movs	r2, r0
   11718:	1dfb      	adds	r3, r7, #7
   1171a:	701a      	strb	r2, [r3, #0]
	user_settings_parameter_struct.motorVoltageBypass=flag;
   1171c:	1dfb      	adds	r3, r7, #7
   1171e:	7819      	ldrb	r1, [r3, #0]
   11720:	4b09      	ldr	r3, [pc, #36]	; (11748 <saveMotorVoltageBypassSettings+0x38>)
   11722:	2227      	movs	r2, #39	; 0x27
   11724:	5499      	strb	r1, [r3, r2]
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
   11726:	4908      	ldr	r1, [pc, #32]	; (11748 <saveMotorVoltageBypassSettings+0x38>)
   11728:	4b08      	ldr	r3, [pc, #32]	; (1174c <saveMotorVoltageBypassSettings+0x3c>)
   1172a:	2230      	movs	r2, #48	; 0x30
   1172c:	0018      	movs	r0, r3
   1172e:	4b08      	ldr	r3, [pc, #32]	; (11750 <saveMotorVoltageBypassSettings+0x40>)
   11730:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
   11732:	4b06      	ldr	r3, [pc, #24]	; (1174c <saveMotorVoltageBypassSettings+0x3c>)
   11734:	0019      	movs	r1, r3
   11736:	201a      	movs	r0, #26
   11738:	4b06      	ldr	r3, [pc, #24]	; (11754 <saveMotorVoltageBypassSettings+0x44>)
   1173a:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   1173c:	4b06      	ldr	r3, [pc, #24]	; (11758 <saveMotorVoltageBypassSettings+0x48>)
   1173e:	4798      	blx	r3
}
   11740:	46c0      	nop			; (mov r8, r8)
   11742:	46bd      	mov	sp, r7
   11744:	b002      	add	sp, #8
   11746:	bd80      	pop	{r7, pc}
   11748:	20000854 	.word	0x20000854
   1174c:	20000784 	.word	0x20000784
   11750:	00028b21 	.word	0x00028b21
   11754:	00023751 	.word	0x00023751
   11758:	000238f9 	.word	0x000238f9

0001175c <saveMotorVoltageBypasssTimeSettings>:

void saveMotorVoltageBypasssTimeSettings(uint32_t value)
{
   1175c:	b580      	push	{r7, lr}
   1175e:	b082      	sub	sp, #8
   11760:	af00      	add	r7, sp, #0
   11762:	6078      	str	r0, [r7, #4]
	user_settings_parameter_struct.motorVoltageBypassTime=value;
   11764:	4b09      	ldr	r3, [pc, #36]	; (1178c <saveMotorVoltageBypasssTimeSettings+0x30>)
   11766:	687a      	ldr	r2, [r7, #4]
   11768:	629a      	str	r2, [r3, #40]	; 0x28
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
   1176a:	4908      	ldr	r1, [pc, #32]	; (1178c <saveMotorVoltageBypasssTimeSettings+0x30>)
   1176c:	4b08      	ldr	r3, [pc, #32]	; (11790 <saveMotorVoltageBypasssTimeSettings+0x34>)
   1176e:	2230      	movs	r2, #48	; 0x30
   11770:	0018      	movs	r0, r3
   11772:	4b08      	ldr	r3, [pc, #32]	; (11794 <saveMotorVoltageBypasssTimeSettings+0x38>)
   11774:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
   11776:	4b06      	ldr	r3, [pc, #24]	; (11790 <saveMotorVoltageBypasssTimeSettings+0x34>)
   11778:	0019      	movs	r1, r3
   1177a:	201a      	movs	r0, #26
   1177c:	4b06      	ldr	r3, [pc, #24]	; (11798 <saveMotorVoltageBypasssTimeSettings+0x3c>)
   1177e:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   11780:	4b06      	ldr	r3, [pc, #24]	; (1179c <saveMotorVoltageBypasssTimeSettings+0x40>)
   11782:	4798      	blx	r3
}
   11784:	46c0      	nop			; (mov r8, r8)
   11786:	46bd      	mov	sp, r7
   11788:	b002      	add	sp, #8
   1178a:	bd80      	pop	{r7, pc}
   1178c:	20000854 	.word	0x20000854
   11790:	20000784 	.word	0x20000784
   11794:	00028b21 	.word	0x00028b21
   11798:	00023751 	.word	0x00023751
   1179c:	000238f9 	.word	0x000238f9

000117a0 <saveMotorFeedbackDetectionSettings>:

void saveMotorFeedbackDetectionSettings(uint8_t motorFeedbackDetection)
{
   117a0:	b580      	push	{r7, lr}
   117a2:	b082      	sub	sp, #8
   117a4:	af00      	add	r7, sp, #0
   117a6:	0002      	movs	r2, r0
   117a8:	1dfb      	adds	r3, r7, #7
   117aa:	701a      	strb	r2, [r3, #0]
	user_settings_parameter_struct.detectMotorFeedback = motorFeedbackDetection;
   117ac:	4b0a      	ldr	r3, [pc, #40]	; (117d8 <saveMotorFeedbackDetectionSettings+0x38>)
   117ae:	1dfa      	adds	r2, r7, #7
   117b0:	2125      	movs	r1, #37	; 0x25
   117b2:	7812      	ldrb	r2, [r2, #0]
   117b4:	545a      	strb	r2, [r3, r1]
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
   117b6:	4908      	ldr	r1, [pc, #32]	; (117d8 <saveMotorFeedbackDetectionSettings+0x38>)
   117b8:	4b08      	ldr	r3, [pc, #32]	; (117dc <saveMotorFeedbackDetectionSettings+0x3c>)
   117ba:	2230      	movs	r2, #48	; 0x30
   117bc:	0018      	movs	r0, r3
   117be:	4b08      	ldr	r3, [pc, #32]	; (117e0 <saveMotorFeedbackDetectionSettings+0x40>)
   117c0:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
   117c2:	4b06      	ldr	r3, [pc, #24]	; (117dc <saveMotorFeedbackDetectionSettings+0x3c>)
   117c4:	0019      	movs	r1, r3
   117c6:	201a      	movs	r0, #26
   117c8:	4b06      	ldr	r3, [pc, #24]	; (117e4 <saveMotorFeedbackDetectionSettings+0x44>)
   117ca:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   117cc:	4b06      	ldr	r3, [pc, #24]	; (117e8 <saveMotorFeedbackDetectionSettings+0x48>)
   117ce:	4798      	blx	r3
}
   117d0:	46c0      	nop			; (mov r8, r8)
   117d2:	46bd      	mov	sp, r7
   117d4:	b002      	add	sp, #8
   117d6:	bd80      	pop	{r7, pc}
   117d8:	20000854 	.word	0x20000854
   117dc:	20000784 	.word	0x20000784
   117e0:	00028b21 	.word	0x00028b21
   117e4:	00023751 	.word	0x00023751
   117e8:	000238f9 	.word	0x000238f9

000117ec <calcCurrentValues>:


void calcCurrentValues(void)
{
   117ec:	b590      	push	{r4, r7, lr}
   117ee:	b083      	sub	sp, #12
   117f0:	af00      	add	r7, sp, #0
	uint16_t temp = (user_settings_parameter_struct.normalLoadAddress * (float)user_settings_parameter_struct.underloadPerAddress) / 100.0;
   117f2:	4b2c      	ldr	r3, [pc, #176]	; (118a4 <calcCurrentValues+0xb8>)
   117f4:	691a      	ldr	r2, [r3, #16]
   117f6:	4b2c      	ldr	r3, [pc, #176]	; (118a8 <calcCurrentValues+0xbc>)
   117f8:	0010      	movs	r0, r2
   117fa:	4798      	blx	r3
   117fc:	1c04      	adds	r4, r0, #0
   117fe:	4b29      	ldr	r3, [pc, #164]	; (118a4 <calcCurrentValues+0xb8>)
   11800:	7f1b      	ldrb	r3, [r3, #28]
   11802:	b2da      	uxtb	r2, r3
   11804:	4b28      	ldr	r3, [pc, #160]	; (118a8 <calcCurrentValues+0xbc>)
   11806:	0010      	movs	r0, r2
   11808:	4798      	blx	r3
   1180a:	1c02      	adds	r2, r0, #0
   1180c:	4b27      	ldr	r3, [pc, #156]	; (118ac <calcCurrentValues+0xc0>)
   1180e:	1c11      	adds	r1, r2, #0
   11810:	1c20      	adds	r0, r4, #0
   11812:	4798      	blx	r3
   11814:	1c03      	adds	r3, r0, #0
   11816:	1c1a      	adds	r2, r3, #0
   11818:	4b25      	ldr	r3, [pc, #148]	; (118b0 <calcCurrentValues+0xc4>)
   1181a:	1c10      	adds	r0, r2, #0
   1181c:	4798      	blx	r3
   1181e:	4c25      	ldr	r4, [pc, #148]	; (118b4 <calcCurrentValues+0xc8>)
   11820:	2200      	movs	r2, #0
   11822:	4b25      	ldr	r3, [pc, #148]	; (118b8 <calcCurrentValues+0xcc>)
   11824:	47a0      	blx	r4
   11826:	0003      	movs	r3, r0
   11828:	000c      	movs	r4, r1
   1182a:	0019      	movs	r1, r3
   1182c:	0022      	movs	r2, r4
   1182e:	1dbc      	adds	r4, r7, #6
   11830:	4b22      	ldr	r3, [pc, #136]	; (118bc <calcCurrentValues+0xd0>)
   11832:	0008      	movs	r0, r1
   11834:	0011      	movs	r1, r2
   11836:	4798      	blx	r3
   11838:	0003      	movs	r3, r0
   1183a:	8023      	strh	r3, [r4, #0]
	setUnderloadValue(temp);
   1183c:	1dbb      	adds	r3, r7, #6
   1183e:	881b      	ldrh	r3, [r3, #0]
   11840:	0018      	movs	r0, r3
   11842:	4b1f      	ldr	r3, [pc, #124]	; (118c0 <calcCurrentValues+0xd4>)
   11844:	4798      	blx	r3

	temp = (user_settings_parameter_struct.normalLoadAddress * (float)user_settings_parameter_struct.overloadPerAddress) / 100.0;
   11846:	4b17      	ldr	r3, [pc, #92]	; (118a4 <calcCurrentValues+0xb8>)
   11848:	691a      	ldr	r2, [r3, #16]
   1184a:	4b17      	ldr	r3, [pc, #92]	; (118a8 <calcCurrentValues+0xbc>)
   1184c:	0010      	movs	r0, r2
   1184e:	4798      	blx	r3
   11850:	1c04      	adds	r4, r0, #0
   11852:	4b14      	ldr	r3, [pc, #80]	; (118a4 <calcCurrentValues+0xb8>)
   11854:	7f5b      	ldrb	r3, [r3, #29]
   11856:	b2da      	uxtb	r2, r3
   11858:	4b13      	ldr	r3, [pc, #76]	; (118a8 <calcCurrentValues+0xbc>)
   1185a:	0010      	movs	r0, r2
   1185c:	4798      	blx	r3
   1185e:	1c02      	adds	r2, r0, #0
   11860:	4b12      	ldr	r3, [pc, #72]	; (118ac <calcCurrentValues+0xc0>)
   11862:	1c11      	adds	r1, r2, #0
   11864:	1c20      	adds	r0, r4, #0
   11866:	4798      	blx	r3
   11868:	1c03      	adds	r3, r0, #0
   1186a:	1c1a      	adds	r2, r3, #0
   1186c:	4b10      	ldr	r3, [pc, #64]	; (118b0 <calcCurrentValues+0xc4>)
   1186e:	1c10      	adds	r0, r2, #0
   11870:	4798      	blx	r3
   11872:	4c10      	ldr	r4, [pc, #64]	; (118b4 <calcCurrentValues+0xc8>)
   11874:	2200      	movs	r2, #0
   11876:	4b10      	ldr	r3, [pc, #64]	; (118b8 <calcCurrentValues+0xcc>)
   11878:	47a0      	blx	r4
   1187a:	0003      	movs	r3, r0
   1187c:	000c      	movs	r4, r1
   1187e:	0019      	movs	r1, r3
   11880:	0022      	movs	r2, r4
   11882:	1dbc      	adds	r4, r7, #6
   11884:	4b0d      	ldr	r3, [pc, #52]	; (118bc <calcCurrentValues+0xd0>)
   11886:	0008      	movs	r0, r1
   11888:	0011      	movs	r1, r2
   1188a:	4798      	blx	r3
   1188c:	0003      	movs	r3, r0
   1188e:	8023      	strh	r3, [r4, #0]
	setOverloadValue(temp);
   11890:	1dbb      	adds	r3, r7, #6
   11892:	881b      	ldrh	r3, [r3, #0]
   11894:	0018      	movs	r0, r3
   11896:	4b0b      	ldr	r3, [pc, #44]	; (118c4 <calcCurrentValues+0xd8>)
   11898:	4798      	blx	r3
}
   1189a:	46c0      	nop			; (mov r8, r8)
   1189c:	46bd      	mov	sp, r7
   1189e:	b003      	add	sp, #12
   118a0:	bd90      	pop	{r4, r7, pc}
   118a2:	46c0      	nop			; (mov r8, r8)
   118a4:	20000854 	.word	0x20000854
   118a8:	00026d69 	.word	0x00026d69
   118ac:	00026b29 	.word	0x00026b29
   118b0:	00028945 	.word	0x00028945
   118b4:	00027415 	.word	0x00027415
   118b8:	40590000 	.word	0x40590000
   118bc:	000266dd 	.word	0x000266dd
   118c0:	000118c9 	.word	0x000118c9
   118c4:	0001190d 	.word	0x0001190d

000118c8 <setUnderloadValue>:

void setUnderloadValue(uint32_t underValue)
{
   118c8:	b580      	push	{r7, lr}
   118ca:	b082      	sub	sp, #8
   118cc:	af00      	add	r7, sp, #0
   118ce:	6078      	str	r0, [r7, #4]
	user_settings_parameter_struct.underloadAddress = underValue;
   118d0:	4b09      	ldr	r3, [pc, #36]	; (118f8 <setUnderloadValue+0x30>)
   118d2:	687a      	ldr	r2, [r7, #4]
   118d4:	619a      	str	r2, [r3, #24]
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
   118d6:	4908      	ldr	r1, [pc, #32]	; (118f8 <setUnderloadValue+0x30>)
   118d8:	4b08      	ldr	r3, [pc, #32]	; (118fc <setUnderloadValue+0x34>)
   118da:	2230      	movs	r2, #48	; 0x30
   118dc:	0018      	movs	r0, r3
   118de:	4b08      	ldr	r3, [pc, #32]	; (11900 <setUnderloadValue+0x38>)
   118e0:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
   118e2:	4b06      	ldr	r3, [pc, #24]	; (118fc <setUnderloadValue+0x34>)
   118e4:	0019      	movs	r1, r3
   118e6:	201a      	movs	r0, #26
   118e8:	4b06      	ldr	r3, [pc, #24]	; (11904 <setUnderloadValue+0x3c>)
   118ea:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   118ec:	4b06      	ldr	r3, [pc, #24]	; (11908 <setUnderloadValue+0x40>)
   118ee:	4798      	blx	r3
}
   118f0:	46c0      	nop			; (mov r8, r8)
   118f2:	46bd      	mov	sp, r7
   118f4:	b002      	add	sp, #8
   118f6:	bd80      	pop	{r7, pc}
   118f8:	20000854 	.word	0x20000854
   118fc:	20000784 	.word	0x20000784
   11900:	00028b21 	.word	0x00028b21
   11904:	00023751 	.word	0x00023751
   11908:	000238f9 	.word	0x000238f9

0001190c <setOverloadValue>:

void setOverloadValue(uint32_t overValue)
{
   1190c:	b580      	push	{r7, lr}
   1190e:	b082      	sub	sp, #8
   11910:	af00      	add	r7, sp, #0
   11912:	6078      	str	r0, [r7, #4]
	user_settings_parameter_struct.overloadAddress = overValue;
   11914:	4b09      	ldr	r3, [pc, #36]	; (1193c <setOverloadValue+0x30>)
   11916:	687a      	ldr	r2, [r7, #4]
   11918:	615a      	str	r2, [r3, #20]
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
   1191a:	4908      	ldr	r1, [pc, #32]	; (1193c <setOverloadValue+0x30>)
   1191c:	4b08      	ldr	r3, [pc, #32]	; (11940 <setOverloadValue+0x34>)
   1191e:	2230      	movs	r2, #48	; 0x30
   11920:	0018      	movs	r0, r3
   11922:	4b08      	ldr	r3, [pc, #32]	; (11944 <setOverloadValue+0x38>)
   11924:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
   11926:	4b06      	ldr	r3, [pc, #24]	; (11940 <setOverloadValue+0x34>)
   11928:	0019      	movs	r1, r3
   1192a:	201a      	movs	r0, #26
   1192c:	4b06      	ldr	r3, [pc, #24]	; (11948 <setOverloadValue+0x3c>)
   1192e:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   11930:	4b06      	ldr	r3, [pc, #24]	; (1194c <setOverloadValue+0x40>)
   11932:	4798      	blx	r3
}
   11934:	46c0      	nop			; (mov r8, r8)
   11936:	46bd      	mov	sp, r7
   11938:	b002      	add	sp, #8
   1193a:	bd80      	pop	{r7, pc}
   1193c:	20000854 	.word	0x20000854
   11940:	20000784 	.word	0x20000784
   11944:	00028b21 	.word	0x00028b21
   11948:	00023751 	.word	0x00023751
   1194c:	000238f9 	.word	0x000238f9

00011950 <setNormalLoadValue>:

void setNormalLoadValue(uint32_t normalVal)
{
   11950:	b580      	push	{r7, lr}
   11952:	b082      	sub	sp, #8
   11954:	af00      	add	r7, sp, #0
   11956:	6078      	str	r0, [r7, #4]
	user_settings_parameter_struct.normalLoadAddress = normalVal;
   11958:	4b09      	ldr	r3, [pc, #36]	; (11980 <setNormalLoadValue+0x30>)
   1195a:	687a      	ldr	r2, [r7, #4]
   1195c:	611a      	str	r2, [r3, #16]
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
   1195e:	4908      	ldr	r1, [pc, #32]	; (11980 <setNormalLoadValue+0x30>)
   11960:	4b08      	ldr	r3, [pc, #32]	; (11984 <setNormalLoadValue+0x34>)
   11962:	2230      	movs	r2, #48	; 0x30
   11964:	0018      	movs	r0, r3
   11966:	4b08      	ldr	r3, [pc, #32]	; (11988 <setNormalLoadValue+0x38>)
   11968:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
   1196a:	4b06      	ldr	r3, [pc, #24]	; (11984 <setNormalLoadValue+0x34>)
   1196c:	0019      	movs	r1, r3
   1196e:	201a      	movs	r0, #26
   11970:	4b06      	ldr	r3, [pc, #24]	; (1198c <setNormalLoadValue+0x3c>)
   11972:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   11974:	4b06      	ldr	r3, [pc, #24]	; (11990 <setNormalLoadValue+0x40>)
   11976:	4798      	blx	r3
}
   11978:	46c0      	nop			; (mov r8, r8)
   1197a:	46bd      	mov	sp, r7
   1197c:	b002      	add	sp, #8
   1197e:	bd80      	pop	{r7, pc}
   11980:	20000854 	.word	0x20000854
   11984:	20000784 	.word	0x20000784
   11988:	00028b21 	.word	0x00028b21
   1198c:	00023751 	.word	0x00023751
   11990:	000238f9 	.word	0x000238f9

00011994 <setCurrentDetection>:

void setCurrentDetection(bool cValue)
{
   11994:	b580      	push	{r7, lr}
   11996:	b082      	sub	sp, #8
   11998:	af00      	add	r7, sp, #0
   1199a:	0002      	movs	r2, r0
   1199c:	1dfb      	adds	r3, r7, #7
   1199e:	701a      	strb	r2, [r3, #0]
	user_settings_parameter_struct.currentDetectionAddress = cValue;
   119a0:	1dfb      	adds	r3, r7, #7
   119a2:	781a      	ldrb	r2, [r3, #0]
   119a4:	4b09      	ldr	r3, [pc, #36]	; (119cc <setCurrentDetection+0x38>)
   119a6:	73da      	strb	r2, [r3, #15]
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
   119a8:	4908      	ldr	r1, [pc, #32]	; (119cc <setCurrentDetection+0x38>)
   119aa:	4b09      	ldr	r3, [pc, #36]	; (119d0 <setCurrentDetection+0x3c>)
   119ac:	2230      	movs	r2, #48	; 0x30
   119ae:	0018      	movs	r0, r3
   119b0:	4b08      	ldr	r3, [pc, #32]	; (119d4 <setCurrentDetection+0x40>)
   119b2:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
   119b4:	4b06      	ldr	r3, [pc, #24]	; (119d0 <setCurrentDetection+0x3c>)
   119b6:	0019      	movs	r1, r3
   119b8:	201a      	movs	r0, #26
   119ba:	4b07      	ldr	r3, [pc, #28]	; (119d8 <setCurrentDetection+0x44>)
   119bc:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   119be:	4b07      	ldr	r3, [pc, #28]	; (119dc <setCurrentDetection+0x48>)
   119c0:	4798      	blx	r3
}
   119c2:	46c0      	nop			; (mov r8, r8)
   119c4:	46bd      	mov	sp, r7
   119c6:	b002      	add	sp, #8
   119c8:	bd80      	pop	{r7, pc}
   119ca:	46c0      	nop			; (mov r8, r8)
   119cc:	20000854 	.word	0x20000854
   119d0:	20000784 	.word	0x20000784
   119d4:	00028b21 	.word	0x00028b21
   119d8:	00023751 	.word	0x00023751
   119dc:	000238f9 	.word	0x000238f9

000119e0 <saveStarDeltaTimer>:
	//strcpy(deviceID,factory_settings_parameter_struct.DeviceID_ee);
	return deviceID;
}

void saveStarDeltaTimer(uint16_t StartDeltaTime)
{
   119e0:	b580      	push	{r7, lr}
   119e2:	b082      	sub	sp, #8
   119e4:	af00      	add	r7, sp, #0
   119e6:	0002      	movs	r2, r0
   119e8:	1dbb      	adds	r3, r7, #6
   119ea:	801a      	strh	r2, [r3, #0]
	user_settings_parameter_struct.starDeltaTimerAddress = StartDeltaTime;
   119ec:	4b0a      	ldr	r3, [pc, #40]	; (11a18 <saveStarDeltaTimer+0x38>)
   119ee:	1dba      	adds	r2, r7, #6
   119f0:	8812      	ldrh	r2, [r2, #0]
   119f2:	80da      	strh	r2, [r3, #6]
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
   119f4:	4908      	ldr	r1, [pc, #32]	; (11a18 <saveStarDeltaTimer+0x38>)
   119f6:	4b09      	ldr	r3, [pc, #36]	; (11a1c <saveStarDeltaTimer+0x3c>)
   119f8:	2230      	movs	r2, #48	; 0x30
   119fa:	0018      	movs	r0, r3
   119fc:	4b08      	ldr	r3, [pc, #32]	; (11a20 <saveStarDeltaTimer+0x40>)
   119fe:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
   11a00:	4b06      	ldr	r3, [pc, #24]	; (11a1c <saveStarDeltaTimer+0x3c>)
   11a02:	0019      	movs	r1, r3
   11a04:	201a      	movs	r0, #26
   11a06:	4b07      	ldr	r3, [pc, #28]	; (11a24 <saveStarDeltaTimer+0x44>)
   11a08:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   11a0a:	4b07      	ldr	r3, [pc, #28]	; (11a28 <saveStarDeltaTimer+0x48>)
   11a0c:	4798      	blx	r3
}
   11a0e:	46c0      	nop			; (mov r8, r8)
   11a10:	46bd      	mov	sp, r7
   11a12:	b002      	add	sp, #8
   11a14:	bd80      	pop	{r7, pc}
   11a16:	46c0      	nop			; (mov r8, r8)
   11a18:	20000854 	.word	0x20000854
   11a1c:	20000784 	.word	0x20000784
   11a20:	00028b21 	.word	0x00028b21
   11a24:	00023751 	.word	0x00023751
   11a28:	000238f9 	.word	0x000238f9

00011a2c <saveEventStageSettings>:

void saveEventStageSettings(uint8_t data)
{
   11a2c:	b580      	push	{r7, lr}
   11a2e:	b082      	sub	sp, #8
   11a30:	af00      	add	r7, sp, #0
   11a32:	0002      	movs	r2, r0
   11a34:	1dfb      	adds	r3, r7, #7
   11a36:	701a      	strb	r2, [r3, #0]
	user_settings_parameter_struct.eventStageAddress = data;
   11a38:	4b0a      	ldr	r3, [pc, #40]	; (11a64 <saveEventStageSettings+0x38>)
   11a3a:	1dfa      	adds	r2, r7, #7
   11a3c:	7812      	ldrb	r2, [r2, #0]
   11a3e:	721a      	strb	r2, [r3, #8]
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
   11a40:	4908      	ldr	r1, [pc, #32]	; (11a64 <saveEventStageSettings+0x38>)
   11a42:	4b09      	ldr	r3, [pc, #36]	; (11a68 <saveEventStageSettings+0x3c>)
   11a44:	2230      	movs	r2, #48	; 0x30
   11a46:	0018      	movs	r0, r3
   11a48:	4b08      	ldr	r3, [pc, #32]	; (11a6c <saveEventStageSettings+0x40>)
   11a4a:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
   11a4c:	4b06      	ldr	r3, [pc, #24]	; (11a68 <saveEventStageSettings+0x3c>)
   11a4e:	0019      	movs	r1, r3
   11a50:	201a      	movs	r0, #26
   11a52:	4b07      	ldr	r3, [pc, #28]	; (11a70 <saveEventStageSettings+0x44>)
   11a54:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   11a56:	4b07      	ldr	r3, [pc, #28]	; (11a74 <saveEventStageSettings+0x48>)
   11a58:	4798      	blx	r3
}
   11a5a:	46c0      	nop			; (mov r8, r8)
   11a5c:	46bd      	mov	sp, r7
   11a5e:	b002      	add	sp, #8
   11a60:	bd80      	pop	{r7, pc}
   11a62:	46c0      	nop			; (mov r8, r8)
   11a64:	20000854 	.word	0x20000854
   11a68:	20000784 	.word	0x20000784
   11a6c:	00028b21 	.word	0x00028b21
   11a70:	00023751 	.word	0x00023751
   11a74:	000238f9 	.word	0x000238f9

00011a78 <isAdmin>:

bool isAdmin(char *number)
{
   11a78:	b580      	push	{r7, lr}
   11a7a:	b08a      	sub	sp, #40	; 0x28
   11a7c:	af00      	add	r7, sp, #0
   11a7e:	6078      	str	r0, [r7, #4]
	for (uint8_t i=0;i<5;i++)
   11a80:	2327      	movs	r3, #39	; 0x27
   11a82:	18fb      	adds	r3, r7, r3
   11a84:	2200      	movs	r2, #0
   11a86:	701a      	strb	r2, [r3, #0]
   11a88:	e02b      	b.n	11ae2 <isAdmin+0x6a>
	{
		struct mobile_no_struct mobile_no;
		memset(page_data, '\0', sizeof(page_data));
   11a8a:	4b1b      	ldr	r3, [pc, #108]	; (11af8 <isAdmin+0x80>)
   11a8c:	223c      	movs	r2, #60	; 0x3c
   11a8e:	2100      	movs	r1, #0
   11a90:	0018      	movs	r0, r3
   11a92:	4b1a      	ldr	r3, [pc, #104]	; (11afc <isAdmin+0x84>)
   11a94:	4798      	blx	r3
		eeprom_emulator_read_page(ADMIN_1_MOBILE_NUMBER_PAGE+i, page_data);
   11a96:	2327      	movs	r3, #39	; 0x27
   11a98:	18fb      	adds	r3, r7, r3
   11a9a:	781b      	ldrb	r3, [r3, #0]
   11a9c:	3303      	adds	r3, #3
   11a9e:	b2db      	uxtb	r3, r3
   11aa0:	4a15      	ldr	r2, [pc, #84]	; (11af8 <isAdmin+0x80>)
   11aa2:	0011      	movs	r1, r2
   11aa4:	0018      	movs	r0, r3
   11aa6:	4b16      	ldr	r3, [pc, #88]	; (11b00 <isAdmin+0x88>)
   11aa8:	4798      	blx	r3
		memcpy(&mobile_no,page_data,sizeof(mobile_no));
   11aaa:	230c      	movs	r3, #12
   11aac:	18fa      	adds	r2, r7, r3
   11aae:	4b12      	ldr	r3, [pc, #72]	; (11af8 <isAdmin+0x80>)
   11ab0:	0010      	movs	r0, r2
   11ab2:	0019      	movs	r1, r3
   11ab4:	2318      	movs	r3, #24
   11ab6:	001a      	movs	r2, r3
   11ab8:	4b12      	ldr	r3, [pc, #72]	; (11b04 <isAdmin+0x8c>)
   11aba:	4798      	blx	r3
		
		if (strstr(number,mobile_no.mobile_no_ee))
   11abc:	230c      	movs	r3, #12
   11abe:	18fb      	adds	r3, r7, r3
   11ac0:	1d1a      	adds	r2, r3, #4
   11ac2:	687b      	ldr	r3, [r7, #4]
   11ac4:	0011      	movs	r1, r2
   11ac6:	0018      	movs	r0, r3
   11ac8:	4b0f      	ldr	r3, [pc, #60]	; (11b08 <isAdmin+0x90>)
   11aca:	4798      	blx	r3
   11acc:	1e03      	subs	r3, r0, #0
   11ace:	d001      	beq.n	11ad4 <isAdmin+0x5c>
		{
			return true;
   11ad0:	2301      	movs	r3, #1
   11ad2:	e00c      	b.n	11aee <isAdmin+0x76>
	for (uint8_t i=0;i<5;i++)
   11ad4:	2327      	movs	r3, #39	; 0x27
   11ad6:	18fb      	adds	r3, r7, r3
   11ad8:	781a      	ldrb	r2, [r3, #0]
   11ada:	2327      	movs	r3, #39	; 0x27
   11adc:	18fb      	adds	r3, r7, r3
   11ade:	3201      	adds	r2, #1
   11ae0:	701a      	strb	r2, [r3, #0]
   11ae2:	2327      	movs	r3, #39	; 0x27
   11ae4:	18fb      	adds	r3, r7, r3
   11ae6:	781b      	ldrb	r3, [r3, #0]
   11ae8:	2b04      	cmp	r3, #4
   11aea:	d9ce      	bls.n	11a8a <isAdmin+0x12>
		}
	}
	return false;
   11aec:	2300      	movs	r3, #0
}
   11aee:	0018      	movs	r0, r3
   11af0:	46bd      	mov	sp, r7
   11af2:	b00a      	add	sp, #40	; 0x28
   11af4:	bd80      	pop	{r7, pc}
   11af6:	46c0      	nop			; (mov r8, r8)
   11af8:	20000784 	.word	0x20000784
   11afc:	00028b57 	.word	0x00028b57
   11b00:	0002385d 	.word	0x0002385d
   11b04:	00028b21 	.word	0x00028b21
   11b08:	00028e17 	.word	0x00028e17

00011b0c <setPrimaryNumberIndex>:


void setPrimaryNumberIndex(uint8_t index)
{
   11b0c:	b580      	push	{r7, lr}
   11b0e:	b082      	sub	sp, #8
   11b10:	af00      	add	r7, sp, #0
   11b12:	0002      	movs	r2, r0
   11b14:	1dfb      	adds	r3, r7, #7
   11b16:	701a      	strb	r2, [r3, #0]
	user_count_struct.primaryNumberIndex = index;
   11b18:	4b0b      	ldr	r3, [pc, #44]	; (11b48 <setPrimaryNumberIndex+0x3c>)
   11b1a:	1dfa      	adds	r2, r7, #7
   11b1c:	7812      	ldrb	r2, [r2, #0]
   11b1e:	70da      	strb	r2, [r3, #3]
	memcpy(page_data,&user_count_struct,sizeof(user_count_struct));
   11b20:	4a0a      	ldr	r2, [pc, #40]	; (11b4c <setPrimaryNumberIndex+0x40>)
   11b22:	4b09      	ldr	r3, [pc, #36]	; (11b48 <setPrimaryNumberIndex+0x3c>)
   11b24:	0010      	movs	r0, r2
   11b26:	0019      	movs	r1, r3
   11b28:	2308      	movs	r3, #8
   11b2a:	001a      	movs	r2, r3
   11b2c:	4b08      	ldr	r3, [pc, #32]	; (11b50 <setPrimaryNumberIndex+0x44>)
   11b2e:	4798      	blx	r3
	eeprom_emulator_write_page(USER_COUNTER_PAGE, page_data);
   11b30:	4b06      	ldr	r3, [pc, #24]	; (11b4c <setPrimaryNumberIndex+0x40>)
   11b32:	0019      	movs	r1, r3
   11b34:	2008      	movs	r0, #8
   11b36:	4b07      	ldr	r3, [pc, #28]	; (11b54 <setPrimaryNumberIndex+0x48>)
   11b38:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   11b3a:	4b07      	ldr	r3, [pc, #28]	; (11b58 <setPrimaryNumberIndex+0x4c>)
   11b3c:	4798      	blx	r3

}
   11b3e:	46c0      	nop			; (mov r8, r8)
   11b40:	46bd      	mov	sp, r7
   11b42:	b002      	add	sp, #8
   11b44:	bd80      	pop	{r7, pc}
   11b46:	46c0      	nop			; (mov r8, r8)
   11b48:	20000814 	.word	0x20000814
   11b4c:	20000784 	.word	0x20000784
   11b50:	00028b21 	.word	0x00028b21
   11b54:	00023751 	.word	0x00023751
   11b58:	000238f9 	.word	0x000238f9

00011b5c <setSecondaryNumberIndex>:

void setSecondaryNumberIndex(uint8_t index)
{
   11b5c:	b580      	push	{r7, lr}
   11b5e:	b082      	sub	sp, #8
   11b60:	af00      	add	r7, sp, #0
   11b62:	0002      	movs	r2, r0
   11b64:	1dfb      	adds	r3, r7, #7
   11b66:	701a      	strb	r2, [r3, #0]
	user_count_struct.secondaryNumberIndex = index;
   11b68:	4b0b      	ldr	r3, [pc, #44]	; (11b98 <setSecondaryNumberIndex+0x3c>)
   11b6a:	1dfa      	adds	r2, r7, #7
   11b6c:	7812      	ldrb	r2, [r2, #0]
   11b6e:	711a      	strb	r2, [r3, #4]
	memcpy(page_data,&user_count_struct,sizeof(user_count_struct));
   11b70:	4a0a      	ldr	r2, [pc, #40]	; (11b9c <setSecondaryNumberIndex+0x40>)
   11b72:	4b09      	ldr	r3, [pc, #36]	; (11b98 <setSecondaryNumberIndex+0x3c>)
   11b74:	0010      	movs	r0, r2
   11b76:	0019      	movs	r1, r3
   11b78:	2308      	movs	r3, #8
   11b7a:	001a      	movs	r2, r3
   11b7c:	4b08      	ldr	r3, [pc, #32]	; (11ba0 <setSecondaryNumberIndex+0x44>)
   11b7e:	4798      	blx	r3
	eeprom_emulator_write_page(USER_COUNTER_PAGE, page_data);
   11b80:	4b06      	ldr	r3, [pc, #24]	; (11b9c <setSecondaryNumberIndex+0x40>)
   11b82:	0019      	movs	r1, r3
   11b84:	2008      	movs	r0, #8
   11b86:	4b07      	ldr	r3, [pc, #28]	; (11ba4 <setSecondaryNumberIndex+0x48>)
   11b88:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   11b8a:	4b07      	ldr	r3, [pc, #28]	; (11ba8 <setSecondaryNumberIndex+0x4c>)
   11b8c:	4798      	blx	r3
}
   11b8e:	46c0      	nop			; (mov r8, r8)
   11b90:	46bd      	mov	sp, r7
   11b92:	b002      	add	sp, #8
   11b94:	bd80      	pop	{r7, pc}
   11b96:	46c0      	nop			; (mov r8, r8)
   11b98:	20000814 	.word	0x20000814
   11b9c:	20000784 	.word	0x20000784
   11ba0:	00028b21 	.word	0x00028b21
   11ba4:	00023751 	.word	0x00023751
   11ba8:	000238f9 	.word	0x000238f9

00011bac <addPrimaryIndexedNumber>:

bool addPrimaryIndexedNumber(char *number)
{
   11bac:	b590      	push	{r4, r7, lr}
   11bae:	b085      	sub	sp, #20
   11bb0:	af00      	add	r7, sp, #0
   11bb2:	6078      	str	r0, [r7, #4]
	//checkUserExists would return a 1 based index,starting at 1 and not at 0
	uint8_t index = checkExists(number);
   11bb4:	230e      	movs	r3, #14
   11bb6:	18fc      	adds	r4, r7, r3
   11bb8:	687b      	ldr	r3, [r7, #4]
   11bba:	0018      	movs	r0, r3
   11bbc:	4b21      	ldr	r3, [pc, #132]	; (11c44 <addPrimaryIndexedNumber+0x98>)
   11bbe:	4798      	blx	r3
   11bc0:	0003      	movs	r3, r0
   11bc2:	7023      	strb	r3, [r4, #0]

	uint8_t newPrimaryIndex=0xFF;
   11bc4:	230f      	movs	r3, #15
   11bc6:	18fb      	adds	r3, r7, r3
   11bc8:	22ff      	movs	r2, #255	; 0xff
   11bca:	701a      	strb	r2, [r3, #0]
	if(index >= user_count_struct.total_user_no_count)								//the numebr does not exists, need to add it
   11bcc:	4b1e      	ldr	r3, [pc, #120]	; (11c48 <addPrimaryIndexedNumber+0x9c>)
   11bce:	785b      	ldrb	r3, [r3, #1]
   11bd0:	220e      	movs	r2, #14
   11bd2:	18ba      	adds	r2, r7, r2
   11bd4:	7812      	ldrb	r2, [r2, #0]
   11bd6:	429a      	cmp	r2, r3
   11bd8:	d309      	bcc.n	11bee <addPrimaryIndexedNumber+0x42>
	{
		newPrimaryIndex = user_count_struct.current_user_no_count;
   11bda:	230f      	movs	r3, #15
   11bdc:	18fb      	adds	r3, r7, r3
   11bde:	4a1a      	ldr	r2, [pc, #104]	; (11c48 <addPrimaryIndexedNumber+0x9c>)
   11be0:	7892      	ldrb	r2, [r2, #2]
   11be2:	701a      	strb	r2, [r3, #0]
		addNumber(number);
   11be4:	687b      	ldr	r3, [r7, #4]
   11be6:	0018      	movs	r0, r3
   11be8:	4b18      	ldr	r3, [pc, #96]	; (11c4c <addPrimaryIndexedNumber+0xa0>)
   11bea:	4798      	blx	r3
   11bec:	e00c      	b.n	11c08 <addPrimaryIndexedNumber+0x5c>
	}
	else if(index<user_count_struct.total_user_no_count)
   11bee:	4b16      	ldr	r3, [pc, #88]	; (11c48 <addPrimaryIndexedNumber+0x9c>)
   11bf0:	785b      	ldrb	r3, [r3, #1]
   11bf2:	220e      	movs	r2, #14
   11bf4:	18ba      	adds	r2, r7, r2
   11bf6:	7812      	ldrb	r2, [r2, #0]
   11bf8:	429a      	cmp	r2, r3
   11bfa:	d205      	bcs.n	11c08 <addPrimaryIndexedNumber+0x5c>
	{
		newPrimaryIndex = index;
   11bfc:	230f      	movs	r3, #15
   11bfe:	18fb      	adds	r3, r7, r3
   11c00:	220e      	movs	r2, #14
   11c02:	18ba      	adds	r2, r7, r2
   11c04:	7812      	ldrb	r2, [r2, #0]
   11c06:	701a      	strb	r2, [r3, #0]
	}

	if(newPrimaryIndex < user_count_struct.total_user_no_count)
   11c08:	4b0f      	ldr	r3, [pc, #60]	; (11c48 <addPrimaryIndexedNumber+0x9c>)
   11c0a:	785b      	ldrb	r3, [r3, #1]
   11c0c:	220f      	movs	r2, #15
   11c0e:	18ba      	adds	r2, r7, r2
   11c10:	7812      	ldrb	r2, [r2, #0]
   11c12:	429a      	cmp	r2, r3
   11c14:	d210      	bcs.n	11c38 <addPrimaryIndexedNumber+0x8c>
	{
		// if current numbers present are more than 1, than set the previous primary number as secondary number
		if (user_count_struct.current_user_no_count>1)
   11c16:	4b0c      	ldr	r3, [pc, #48]	; (11c48 <addPrimaryIndexedNumber+0x9c>)
   11c18:	789b      	ldrb	r3, [r3, #2]
   11c1a:	2b01      	cmp	r3, #1
   11c1c:	d904      	bls.n	11c28 <addPrimaryIndexedNumber+0x7c>
		{
			setSecondaryNumberIndex(user_count_struct.primaryNumberIndex);
   11c1e:	4b0a      	ldr	r3, [pc, #40]	; (11c48 <addPrimaryIndexedNumber+0x9c>)
   11c20:	78db      	ldrb	r3, [r3, #3]
   11c22:	0018      	movs	r0, r3
   11c24:	4b0a      	ldr	r3, [pc, #40]	; (11c50 <addPrimaryIndexedNumber+0xa4>)
   11c26:	4798      	blx	r3
		}
		
		setPrimaryNumberIndex(newPrimaryIndex);
   11c28:	230f      	movs	r3, #15
   11c2a:	18fb      	adds	r3, r7, r3
   11c2c:	781b      	ldrb	r3, [r3, #0]
   11c2e:	0018      	movs	r0, r3
   11c30:	4b08      	ldr	r3, [pc, #32]	; (11c54 <addPrimaryIndexedNumber+0xa8>)
   11c32:	4798      	blx	r3
		return true;
   11c34:	2301      	movs	r3, #1
   11c36:	e000      	b.n	11c3a <addPrimaryIndexedNumber+0x8e>
	}

	return false;
   11c38:	2300      	movs	r3, #0
}
   11c3a:	0018      	movs	r0, r3
   11c3c:	46bd      	mov	sp, r7
   11c3e:	b005      	add	sp, #20
   11c40:	bd90      	pop	{r4, r7, pc}
   11c42:	46c0      	nop			; (mov r8, r8)
   11c44:	00010ded 	.word	0x00010ded
   11c48:	20000814 	.word	0x20000814
   11c4c:	00010ef1 	.word	0x00010ef1
   11c50:	00011b5d 	.word	0x00011b5d
   11c54:	00011b0d 	.word	0x00011b0d

00011c58 <addSecondaryIndexedNumber>:

bool addSecondaryIndexedNumber(char *number)
{
   11c58:	b590      	push	{r4, r7, lr}
   11c5a:	b085      	sub	sp, #20
   11c5c:	af00      	add	r7, sp, #0
   11c5e:	6078      	str	r0, [r7, #4]
	//check if any 2 numbers are present in system one of which would be primary, than only allow to add secondary number
	if(user_count_struct.current_user_no_count<2)
   11c60:	4b21      	ldr	r3, [pc, #132]	; (11ce8 <addSecondaryIndexedNumber+0x90>)
   11c62:	789b      	ldrb	r3, [r3, #2]
   11c64:	2b01      	cmp	r3, #1
   11c66:	d801      	bhi.n	11c6c <addSecondaryIndexedNumber+0x14>
	return false;
   11c68:	2300      	movs	r3, #0
   11c6a:	e039      	b.n	11ce0 <addSecondaryIndexedNumber+0x88>

	//checkUserExists would return a 1 based index,starting at 1 and not at 0
	uint8_t index = checkExists(number);
   11c6c:	230e      	movs	r3, #14
   11c6e:	18fc      	adds	r4, r7, r3
   11c70:	687b      	ldr	r3, [r7, #4]
   11c72:	0018      	movs	r0, r3
   11c74:	4b1d      	ldr	r3, [pc, #116]	; (11cec <addSecondaryIndexedNumber+0x94>)
   11c76:	4798      	blx	r3
   11c78:	0003      	movs	r3, r0
   11c7a:	7023      	strb	r3, [r4, #0]

	uint8_t newSecondaryIndex=0xFF;
   11c7c:	230f      	movs	r3, #15
   11c7e:	18fb      	adds	r3, r7, r3
   11c80:	22ff      	movs	r2, #255	; 0xff
   11c82:	701a      	strb	r2, [r3, #0]
	if(index >= user_count_struct.total_user_no_count)								//number not present, need to add the number
   11c84:	4b18      	ldr	r3, [pc, #96]	; (11ce8 <addSecondaryIndexedNumber+0x90>)
   11c86:	785b      	ldrb	r3, [r3, #1]
   11c88:	220e      	movs	r2, #14
   11c8a:	18ba      	adds	r2, r7, r2
   11c8c:	7812      	ldrb	r2, [r2, #0]
   11c8e:	429a      	cmp	r2, r3
   11c90:	d309      	bcc.n	11ca6 <addSecondaryIndexedNumber+0x4e>
	{
		newSecondaryIndex = user_count_struct.current_user_no_count;
   11c92:	230f      	movs	r3, #15
   11c94:	18fb      	adds	r3, r7, r3
   11c96:	4a14      	ldr	r2, [pc, #80]	; (11ce8 <addSecondaryIndexedNumber+0x90>)
   11c98:	7892      	ldrb	r2, [r2, #2]
   11c9a:	701a      	strb	r2, [r3, #0]
		addNumber(number);
   11c9c:	687b      	ldr	r3, [r7, #4]
   11c9e:	0018      	movs	r0, r3
   11ca0:	4b13      	ldr	r3, [pc, #76]	; (11cf0 <addSecondaryIndexedNumber+0x98>)
   11ca2:	4798      	blx	r3
   11ca4:	e00c      	b.n	11cc0 <addSecondaryIndexedNumber+0x68>
	}
	else if(index < user_count_struct.total_user_no_count)
   11ca6:	4b10      	ldr	r3, [pc, #64]	; (11ce8 <addSecondaryIndexedNumber+0x90>)
   11ca8:	785b      	ldrb	r3, [r3, #1]
   11caa:	220e      	movs	r2, #14
   11cac:	18ba      	adds	r2, r7, r2
   11cae:	7812      	ldrb	r2, [r2, #0]
   11cb0:	429a      	cmp	r2, r3
   11cb2:	d205      	bcs.n	11cc0 <addSecondaryIndexedNumber+0x68>
	{
		newSecondaryIndex = index;
   11cb4:	230f      	movs	r3, #15
   11cb6:	18fb      	adds	r3, r7, r3
   11cb8:	220e      	movs	r2, #14
   11cba:	18ba      	adds	r2, r7, r2
   11cbc:	7812      	ldrb	r2, [r2, #0]
   11cbe:	701a      	strb	r2, [r3, #0]
	}

	if(newSecondaryIndex < user_count_struct.total_user_no_count)
   11cc0:	4b09      	ldr	r3, [pc, #36]	; (11ce8 <addSecondaryIndexedNumber+0x90>)
   11cc2:	785b      	ldrb	r3, [r3, #1]
   11cc4:	220f      	movs	r2, #15
   11cc6:	18ba      	adds	r2, r7, r2
   11cc8:	7812      	ldrb	r2, [r2, #0]
   11cca:	429a      	cmp	r2, r3
   11ccc:	d207      	bcs.n	11cde <addSecondaryIndexedNumber+0x86>
	{
		setSecondaryNumberIndex(newSecondaryIndex);
   11cce:	230f      	movs	r3, #15
   11cd0:	18fb      	adds	r3, r7, r3
   11cd2:	781b      	ldrb	r3, [r3, #0]
   11cd4:	0018      	movs	r0, r3
   11cd6:	4b07      	ldr	r3, [pc, #28]	; (11cf4 <addSecondaryIndexedNumber+0x9c>)
   11cd8:	4798      	blx	r3
		return true;
   11cda:	2301      	movs	r3, #1
   11cdc:	e000      	b.n	11ce0 <addSecondaryIndexedNumber+0x88>
	}
	return false;
   11cde:	2300      	movs	r3, #0
}
   11ce0:	0018      	movs	r0, r3
   11ce2:	46bd      	mov	sp, r7
   11ce4:	b005      	add	sp, #20
   11ce6:	bd90      	pop	{r4, r7, pc}
   11ce8:	20000814 	.word	0x20000814
   11cec:	00010ded 	.word	0x00010ded
   11cf0:	00010ef1 	.word	0x00010ef1
   11cf4:	00011b5d 	.word	0x00011b5d

00011cf8 <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
   11cf8:	b580      	push	{r7, lr}
   11cfa:	b082      	sub	sp, #8
   11cfc:	af00      	add	r7, sp, #0
   11cfe:	0002      	movs	r2, r0
   11d00:	1dfb      	adds	r3, r7, #7
   11d02:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   11d04:	4b06      	ldr	r3, [pc, #24]	; (11d20 <system_interrupt_enable+0x28>)
   11d06:	1dfa      	adds	r2, r7, #7
   11d08:	7812      	ldrb	r2, [r2, #0]
   11d0a:	0011      	movs	r1, r2
   11d0c:	221f      	movs	r2, #31
   11d0e:	400a      	ands	r2, r1
   11d10:	2101      	movs	r1, #1
   11d12:	4091      	lsls	r1, r2
   11d14:	000a      	movs	r2, r1
   11d16:	601a      	str	r2, [r3, #0]
}
   11d18:	46c0      	nop			; (mov r8, r8)
   11d1a:	46bd      	mov	sp, r7
   11d1c:	b002      	add	sp, #8
   11d1e:	bd80      	pop	{r7, pc}
   11d20:	e000e100 	.word	0xe000e100

00011d24 <system_interrupt_disable>:
 *
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
   11d24:	b580      	push	{r7, lr}
   11d26:	b082      	sub	sp, #8
   11d28:	af00      	add	r7, sp, #0
   11d2a:	0002      	movs	r2, r0
   11d2c:	1dfb      	adds	r3, r7, #7
   11d2e:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   11d30:	4a07      	ldr	r2, [pc, #28]	; (11d50 <system_interrupt_disable+0x2c>)
   11d32:	1dfb      	adds	r3, r7, #7
   11d34:	781b      	ldrb	r3, [r3, #0]
   11d36:	0019      	movs	r1, r3
   11d38:	231f      	movs	r3, #31
   11d3a:	400b      	ands	r3, r1
   11d3c:	2101      	movs	r1, #1
   11d3e:	4099      	lsls	r1, r3
   11d40:	000b      	movs	r3, r1
   11d42:	0019      	movs	r1, r3
   11d44:	2380      	movs	r3, #128	; 0x80
   11d46:	50d1      	str	r1, [r2, r3]
}
   11d48:	46c0      	nop			; (mov r8, r8)
   11d4a:	46bd      	mov	sp, r7
   11d4c:	b002      	add	sp, #8
   11d4e:	bd80      	pop	{r7, pc}
   11d50:	e000e100 	.word	0xe000e100

00011d54 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
   11d54:	b580      	push	{r7, lr}
   11d56:	b084      	sub	sp, #16
   11d58:	af00      	add	r7, sp, #0
   11d5a:	0002      	movs	r2, r0
   11d5c:	1dfb      	adds	r3, r7, #7
   11d5e:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   11d60:	230f      	movs	r3, #15
   11d62:	18fb      	adds	r3, r7, r3
   11d64:	1dfa      	adds	r2, r7, #7
   11d66:	7812      	ldrb	r2, [r2, #0]
   11d68:	09d2      	lsrs	r2, r2, #7
   11d6a:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   11d6c:	230e      	movs	r3, #14
   11d6e:	18fb      	adds	r3, r7, r3
   11d70:	1dfa      	adds	r2, r7, #7
   11d72:	7812      	ldrb	r2, [r2, #0]
   11d74:	0952      	lsrs	r2, r2, #5
   11d76:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   11d78:	4b0d      	ldr	r3, [pc, #52]	; (11db0 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   11d7a:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
   11d7c:	230f      	movs	r3, #15
   11d7e:	18fb      	adds	r3, r7, r3
   11d80:	781b      	ldrb	r3, [r3, #0]
   11d82:	2b00      	cmp	r3, #0
   11d84:	d10f      	bne.n	11da6 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   11d86:	230f      	movs	r3, #15
   11d88:	18fb      	adds	r3, r7, r3
   11d8a:	781b      	ldrb	r3, [r3, #0]
   11d8c:	009b      	lsls	r3, r3, #2
   11d8e:	2210      	movs	r2, #16
   11d90:	4694      	mov	ip, r2
   11d92:	44bc      	add	ip, r7
   11d94:	4463      	add	r3, ip
   11d96:	3b08      	subs	r3, #8
   11d98:	681a      	ldr	r2, [r3, #0]
   11d9a:	230e      	movs	r3, #14
   11d9c:	18fb      	adds	r3, r7, r3
   11d9e:	781b      	ldrb	r3, [r3, #0]
   11da0:	01db      	lsls	r3, r3, #7
   11da2:	18d3      	adds	r3, r2, r3
   11da4:	e000      	b.n	11da8 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
   11da6:	2300      	movs	r3, #0
	}
}
   11da8:	0018      	movs	r0, r3
   11daa:	46bd      	mov	sp, r7
   11dac:	b004      	add	sp, #16
   11dae:	bd80      	pop	{r7, pc}
   11db0:	41004400 	.word	0x41004400

00011db4 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
   11db4:	b580      	push	{r7, lr}
   11db6:	b082      	sub	sp, #8
   11db8:	af00      	add	r7, sp, #0
   11dba:	0002      	movs	r2, r0
   11dbc:	1dfb      	adds	r3, r7, #7
   11dbe:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   11dc0:	1dfb      	adds	r3, r7, #7
   11dc2:	781b      	ldrb	r3, [r3, #0]
   11dc4:	0018      	movs	r0, r3
   11dc6:	4b03      	ldr	r3, [pc, #12]	; (11dd4 <port_get_group_from_gpio_pin+0x20>)
   11dc8:	4798      	blx	r3
   11dca:	0003      	movs	r3, r0
}
   11dcc:	0018      	movs	r0, r3
   11dce:	46bd      	mov	sp, r7
   11dd0:	b002      	add	sp, #8
   11dd2:	bd80      	pop	{r7, pc}
   11dd4:	00011d55 	.word	0x00011d55

00011dd8 <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
   11dd8:	b580      	push	{r7, lr}
   11dda:	b082      	sub	sp, #8
   11ddc:	af00      	add	r7, sp, #0
   11dde:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
   11de0:	687b      	ldr	r3, [r7, #4]
   11de2:	2200      	movs	r2, #0
   11de4:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   11de6:	687b      	ldr	r3, [r7, #4]
   11de8:	2201      	movs	r2, #1
   11dea:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
   11dec:	687b      	ldr	r3, [r7, #4]
   11dee:	2200      	movs	r2, #0
   11df0:	709a      	strb	r2, [r3, #2]
}
   11df2:	46c0      	nop			; (mov r8, r8)
   11df4:	46bd      	mov	sp, r7
   11df6:	b002      	add	sp, #8
   11df8:	bd80      	pop	{r7, pc}
	...

00011dfc <port_pin_get_input_level>:
 *
 *  \return Status of the port pin's input buffer.
 */
static inline bool port_pin_get_input_level(
		const uint8_t gpio_pin)
{
   11dfc:	b580      	push	{r7, lr}
   11dfe:	b084      	sub	sp, #16
   11e00:	af00      	add	r7, sp, #0
   11e02:	0002      	movs	r2, r0
   11e04:	1dfb      	adds	r3, r7, #7
   11e06:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   11e08:	1dfb      	adds	r3, r7, #7
   11e0a:	781b      	ldrb	r3, [r3, #0]
   11e0c:	0018      	movs	r0, r3
   11e0e:	4b0b      	ldr	r3, [pc, #44]	; (11e3c <port_pin_get_input_level+0x40>)
   11e10:	4798      	blx	r3
   11e12:	0003      	movs	r3, r0
   11e14:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   11e16:	1dfb      	adds	r3, r7, #7
   11e18:	781b      	ldrb	r3, [r3, #0]
   11e1a:	221f      	movs	r2, #31
   11e1c:	4013      	ands	r3, r2
   11e1e:	2201      	movs	r2, #1
   11e20:	409a      	lsls	r2, r3
   11e22:	0013      	movs	r3, r2
   11e24:	60bb      	str	r3, [r7, #8]

	return (port_base->IN.reg & pin_mask);
   11e26:	68fb      	ldr	r3, [r7, #12]
   11e28:	6a1b      	ldr	r3, [r3, #32]
   11e2a:	68ba      	ldr	r2, [r7, #8]
   11e2c:	4013      	ands	r3, r2
   11e2e:	1e5a      	subs	r2, r3, #1
   11e30:	4193      	sbcs	r3, r2
   11e32:	b2db      	uxtb	r3, r3
}
   11e34:	0018      	movs	r0, r3
   11e36:	46bd      	mov	sp, r7
   11e38:	b004      	add	sp, #16
   11e3a:	bd80      	pop	{r7, pc}
   11e3c:	00011db5 	.word	0x00011db5

00011e40 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
   11e40:	b580      	push	{r7, lr}
   11e42:	b084      	sub	sp, #16
   11e44:	af00      	add	r7, sp, #0
   11e46:	0002      	movs	r2, r0
   11e48:	1dfb      	adds	r3, r7, #7
   11e4a:	701a      	strb	r2, [r3, #0]
   11e4c:	1dbb      	adds	r3, r7, #6
   11e4e:	1c0a      	adds	r2, r1, #0
   11e50:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   11e52:	1dfb      	adds	r3, r7, #7
   11e54:	781b      	ldrb	r3, [r3, #0]
   11e56:	0018      	movs	r0, r3
   11e58:	4b0d      	ldr	r3, [pc, #52]	; (11e90 <port_pin_set_output_level+0x50>)
   11e5a:	4798      	blx	r3
   11e5c:	0003      	movs	r3, r0
   11e5e:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   11e60:	1dfb      	adds	r3, r7, #7
   11e62:	781b      	ldrb	r3, [r3, #0]
   11e64:	221f      	movs	r2, #31
   11e66:	4013      	ands	r3, r2
   11e68:	2201      	movs	r2, #1
   11e6a:	409a      	lsls	r2, r3
   11e6c:	0013      	movs	r3, r2
   11e6e:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
   11e70:	1dbb      	adds	r3, r7, #6
   11e72:	781b      	ldrb	r3, [r3, #0]
   11e74:	2b00      	cmp	r3, #0
   11e76:	d003      	beq.n	11e80 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   11e78:	68fb      	ldr	r3, [r7, #12]
   11e7a:	68ba      	ldr	r2, [r7, #8]
   11e7c:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
   11e7e:	e002      	b.n	11e86 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   11e80:	68fb      	ldr	r3, [r7, #12]
   11e82:	68ba      	ldr	r2, [r7, #8]
   11e84:	615a      	str	r2, [r3, #20]
}
   11e86:	46c0      	nop			; (mov r8, r8)
   11e88:	46bd      	mov	sp, r7
   11e8a:	b004      	add	sp, #16
   11e8c:	bd80      	pop	{r7, pc}
   11e8e:	46c0      	nop			; (mov r8, r8)
   11e90:	00011db5 	.word	0x00011db5

00011e94 <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
   11e94:	b580      	push	{r7, lr}
   11e96:	b084      	sub	sp, #16
   11e98:	af00      	add	r7, sp, #0
   11e9a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
   11e9c:	687b      	ldr	r3, [r7, #4]
   11e9e:	681b      	ldr	r3, [r3, #0]
   11ea0:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
   11ea2:	68fb      	ldr	r3, [r7, #12]
   11ea4:	69db      	ldr	r3, [r3, #28]
   11ea6:	1e5a      	subs	r2, r3, #1
   11ea8:	4193      	sbcs	r3, r2
   11eaa:	b2db      	uxtb	r3, r3
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
#endif
}
   11eac:	0018      	movs	r0, r3
   11eae:	46bd      	mov	sp, r7
   11eb0:	b004      	add	sp, #16
   11eb2:	bd80      	pop	{r7, pc}

00011eb4 <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
   11eb4:	b580      	push	{r7, lr}
   11eb6:	b082      	sub	sp, #8
   11eb8:	af00      	add	r7, sp, #0
   11eba:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
   11ebc:	46c0      	nop			; (mov r8, r8)
   11ebe:	687b      	ldr	r3, [r7, #4]
   11ec0:	0018      	movs	r0, r3
   11ec2:	4b04      	ldr	r3, [pc, #16]	; (11ed4 <_usart_wait_for_sync+0x20>)
   11ec4:	4798      	blx	r3
   11ec6:	1e03      	subs	r3, r0, #0
   11ec8:	d1f9      	bne.n	11ebe <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
   11eca:	46c0      	nop			; (mov r8, r8)
   11ecc:	46bd      	mov	sp, r7
   11ece:	b002      	add	sp, #8
   11ed0:	bd80      	pop	{r7, pc}
   11ed2:	46c0      	nop			; (mov r8, r8)
   11ed4:	00011e95 	.word	0x00011e95

00011ed8 <usart_get_config_defaults>:
 *
 * \param[in,out] config  Pointer to configuration struct
 */
static inline void usart_get_config_defaults(
		struct usart_config *const config)
{
   11ed8:	b580      	push	{r7, lr}
   11eda:	b082      	sub	sp, #8
   11edc:	af00      	add	r7, sp, #0
   11ede:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
   11ee0:	687b      	ldr	r3, [r7, #4]
   11ee2:	2280      	movs	r2, #128	; 0x80
   11ee4:	05d2      	lsls	r2, r2, #23
   11ee6:	601a      	str	r2, [r3, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
   11ee8:	687b      	ldr	r3, [r7, #4]
   11eea:	2200      	movs	r2, #0
   11eec:	605a      	str	r2, [r3, #4]
	config->parity           = USART_PARITY_NONE;
   11eee:	687b      	ldr	r3, [r7, #4]
   11ef0:	22ff      	movs	r2, #255	; 0xff
   11ef2:	811a      	strh	r2, [r3, #8]
	config->stopbits         = USART_STOPBITS_1;
   11ef4:	687b      	ldr	r3, [r7, #4]
   11ef6:	2200      	movs	r2, #0
   11ef8:	729a      	strb	r2, [r3, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
   11efa:	687b      	ldr	r3, [r7, #4]
   11efc:	2200      	movs	r2, #0
   11efe:	72da      	strb	r2, [r3, #11]
	config->baudrate         = 9600;
   11f00:	687b      	ldr	r3, [r7, #4]
   11f02:	2296      	movs	r2, #150	; 0x96
   11f04:	0192      	lsls	r2, r2, #6
   11f06:	621a      	str	r2, [r3, #32]
	config->receiver_enable  = true;
   11f08:	687b      	ldr	r3, [r7, #4]
   11f0a:	2224      	movs	r2, #36	; 0x24
   11f0c:	2101      	movs	r1, #1
   11f0e:	5499      	strb	r1, [r3, r2]
	config->transmitter_enable = true;
   11f10:	687b      	ldr	r3, [r7, #4]
   11f12:	2225      	movs	r2, #37	; 0x25
   11f14:	2101      	movs	r1, #1
   11f16:	5499      	strb	r1, [r3, r2]
	config->clock_polarity_inverted = false;
   11f18:	687b      	ldr	r3, [r7, #4]
   11f1a:	2226      	movs	r2, #38	; 0x26
   11f1c:	2100      	movs	r1, #0
   11f1e:	5499      	strb	r1, [r3, r2]
	config->use_external_clock = false;
   11f20:	687b      	ldr	r3, [r7, #4]
   11f22:	2227      	movs	r2, #39	; 0x27
   11f24:	2100      	movs	r1, #0
   11f26:	5499      	strb	r1, [r3, r2]
	config->ext_clock_freq   = 0;
   11f28:	687b      	ldr	r3, [r7, #4]
   11f2a:	2200      	movs	r2, #0
   11f2c:	629a      	str	r2, [r3, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
   11f2e:	687b      	ldr	r3, [r7, #4]
   11f30:	2288      	movs	r2, #136	; 0x88
   11f32:	0352      	lsls	r2, r2, #13
   11f34:	60da      	str	r2, [r3, #12]
	config->run_in_standby   = false;
   11f36:	687b      	ldr	r3, [r7, #4]
   11f38:	222c      	movs	r2, #44	; 0x2c
   11f3a:	2100      	movs	r1, #0
   11f3c:	5499      	strb	r1, [r3, r2]
	config->generator_source = GCLK_GENERATOR_0;
   11f3e:	687b      	ldr	r3, [r7, #4]
   11f40:	222d      	movs	r2, #45	; 0x2d
   11f42:	2100      	movs	r1, #0
   11f44:	5499      	strb	r1, [r3, r2]
	config->pinmux_pad0      = PINMUX_DEFAULT;
   11f46:	687b      	ldr	r3, [r7, #4]
   11f48:	2200      	movs	r2, #0
   11f4a:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad1      = PINMUX_DEFAULT;
   11f4c:	687b      	ldr	r3, [r7, #4]
   11f4e:	2200      	movs	r2, #0
   11f50:	635a      	str	r2, [r3, #52]	; 0x34
	config->pinmux_pad2      = PINMUX_DEFAULT;
   11f52:	687b      	ldr	r3, [r7, #4]
   11f54:	2200      	movs	r2, #0
   11f56:	639a      	str	r2, [r3, #56]	; 0x38
	config->pinmux_pad3      = PINMUX_DEFAULT;
   11f58:	687b      	ldr	r3, [r7, #4]
   11f5a:	2200      	movs	r2, #0
   11f5c:	63da      	str	r2, [r3, #60]	; 0x3c
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
   11f5e:	687b      	ldr	r3, [r7, #4]
   11f60:	2200      	movs	r2, #0
   11f62:	615a      	str	r2, [r3, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
   11f64:	687b      	ldr	r3, [r7, #4]
   11f66:	2200      	movs	r2, #0
   11f68:	821a      	strh	r2, [r3, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
   11f6a:	687b      	ldr	r3, [r7, #4]
   11f6c:	2200      	movs	r2, #0
   11f6e:	76da      	strb	r2, [r3, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
   11f70:	687b      	ldr	r3, [r7, #4]
   11f72:	2200      	movs	r2, #0
   11f74:	761a      	strb	r2, [r3, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
   11f76:	687b      	ldr	r3, [r7, #4]
   11f78:	2200      	movs	r2, #0
   11f7a:	771a      	strb	r2, [r3, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
   11f7c:	687b      	ldr	r3, [r7, #4]
   11f7e:	2200      	movs	r2, #0
   11f80:	765a      	strb	r2, [r3, #25]
	config->receive_pulse_length                    = 19;
   11f82:	687b      	ldr	r3, [r7, #4]
   11f84:	2213      	movs	r2, #19
   11f86:	769a      	strb	r2, [r3, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
   11f88:	687b      	ldr	r3, [r7, #4]
   11f8a:	2200      	movs	r2, #0
   11f8c:	775a      	strb	r2, [r3, #29]
#endif
#ifdef FEATURE_USART_RS485
	config->rs485_guard_time = RS485_GUARD_TIME_0_BIT;
#endif
}
   11f8e:	46c0      	nop			; (mov r8, r8)
   11f90:	46bd      	mov	sp, r7
   11f92:	b002      	add	sp, #8
   11f94:	bd80      	pop	{r7, pc}
	...

00011f98 <usart_enable>:
 *
 * \param[in]  module  Pointer to USART software instance struct
 */
static inline void usart_enable(
		const struct usart_module *const module)
{
   11f98:	b580      	push	{r7, lr}
   11f9a:	b084      	sub	sp, #16
   11f9c:	af00      	add	r7, sp, #0
   11f9e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   11fa0:	687b      	ldr	r3, [r7, #4]
   11fa2:	681b      	ldr	r3, [r3, #0]
   11fa4:	60fb      	str	r3, [r7, #12]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   11fa6:	687b      	ldr	r3, [r7, #4]
   11fa8:	681b      	ldr	r3, [r3, #0]
   11faa:	0018      	movs	r0, r3
   11fac:	4b09      	ldr	r3, [pc, #36]	; (11fd4 <usart_enable+0x3c>)
   11fae:	4798      	blx	r3
   11fb0:	0003      	movs	r3, r0
   11fb2:	0018      	movs	r0, r3
   11fb4:	4b08      	ldr	r3, [pc, #32]	; (11fd8 <usart_enable+0x40>)
   11fb6:	4798      	blx	r3
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   11fb8:	687b      	ldr	r3, [r7, #4]
   11fba:	0018      	movs	r0, r3
   11fbc:	4b07      	ldr	r3, [pc, #28]	; (11fdc <usart_enable+0x44>)
   11fbe:	4798      	blx	r3

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
   11fc0:	68fb      	ldr	r3, [r7, #12]
   11fc2:	681b      	ldr	r3, [r3, #0]
   11fc4:	2202      	movs	r2, #2
   11fc6:	431a      	orrs	r2, r3
   11fc8:	68fb      	ldr	r3, [r7, #12]
   11fca:	601a      	str	r2, [r3, #0]
}
   11fcc:	46c0      	nop			; (mov r8, r8)
   11fce:	46bd      	mov	sp, r7
   11fd0:	b004      	add	sp, #16
   11fd2:	bd80      	pop	{r7, pc}
   11fd4:	000221dd 	.word	0x000221dd
   11fd8:	00011cf9 	.word	0x00011cf9
   11fdc:	00011eb5 	.word	0x00011eb5

00011fe0 <usart_disable>:
 *
 * \param[in]  module  Pointer to USART software instance struct
 */
static inline void usart_disable(
		const struct usart_module *const module)
{
   11fe0:	b580      	push	{r7, lr}
   11fe2:	b084      	sub	sp, #16
   11fe4:	af00      	add	r7, sp, #0
   11fe6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   11fe8:	687b      	ldr	r3, [r7, #4]
   11fea:	681b      	ldr	r3, [r3, #0]
   11fec:	60fb      	str	r3, [r7, #12]

#if USART_CALLBACK_MODE == true
	/* Disable Global interrupt for module */
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
   11fee:	687b      	ldr	r3, [r7, #4]
   11ff0:	681b      	ldr	r3, [r3, #0]
   11ff2:	0018      	movs	r0, r3
   11ff4:	4b0a      	ldr	r3, [pc, #40]	; (12020 <usart_disable+0x40>)
   11ff6:	4798      	blx	r3
   11ff8:	0003      	movs	r3, r0
   11ffa:	0018      	movs	r0, r3
   11ffc:	4b09      	ldr	r3, [pc, #36]	; (12024 <usart_disable+0x44>)
   11ffe:	4798      	blx	r3
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   12000:	687b      	ldr	r3, [r7, #4]
   12002:	0018      	movs	r0, r3
   12004:	4b08      	ldr	r3, [pc, #32]	; (12028 <usart_disable+0x48>)
   12006:	4798      	blx	r3

	/* Disable USART module */
	usart_hw->CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
   12008:	68fb      	ldr	r3, [r7, #12]
   1200a:	681b      	ldr	r3, [r3, #0]
   1200c:	2202      	movs	r2, #2
   1200e:	4393      	bics	r3, r2
   12010:	001a      	movs	r2, r3
   12012:	68fb      	ldr	r3, [r7, #12]
   12014:	601a      	str	r2, [r3, #0]
}
   12016:	46c0      	nop			; (mov r8, r8)
   12018:	46bd      	mov	sp, r7
   1201a:	b004      	add	sp, #16
   1201c:	bd80      	pop	{r7, pc}
   1201e:	46c0      	nop			; (mov r8, r8)
   12020:	000221dd 	.word	0x000221dd
   12024:	00011d25 	.word	0x00011d25
   12028:	00011eb5 	.word	0x00011eb5

0001202c <usart_reset>:
 *
 * \param[in]  module  Pointer to the USART software instance struct
 */
static inline void usart_reset(
		const struct usart_module *const module)
{
   1202c:	b580      	push	{r7, lr}
   1202e:	b084      	sub	sp, #16
   12030:	af00      	add	r7, sp, #0
   12032:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   12034:	687b      	ldr	r3, [r7, #4]
   12036:	681b      	ldr	r3, [r3, #0]
   12038:	60fb      	str	r3, [r7, #12]

	usart_disable(module);
   1203a:	687b      	ldr	r3, [r7, #4]
   1203c:	0018      	movs	r0, r3
   1203e:	4b06      	ldr	r3, [pc, #24]	; (12058 <usart_reset+0x2c>)
   12040:	4798      	blx	r3

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   12042:	687b      	ldr	r3, [r7, #4]
   12044:	0018      	movs	r0, r3
   12046:	4b05      	ldr	r3, [pc, #20]	; (1205c <usart_reset+0x30>)
   12048:	4798      	blx	r3

	/* Reset module */
	usart_hw->CTRLA.reg = SERCOM_USART_CTRLA_SWRST;
   1204a:	68fb      	ldr	r3, [r7, #12]
   1204c:	2201      	movs	r2, #1
   1204e:	601a      	str	r2, [r3, #0]
}
   12050:	46c0      	nop			; (mov r8, r8)
   12052:	46bd      	mov	sp, r7
   12054:	b004      	add	sp, #16
   12056:	bd80      	pop	{r7, pc}
   12058:	00011fe1 	.word	0x00011fe1
   1205c:	00011eb5 	.word	0x00011eb5

00012060 <gsm_timer_callback>:
/** FreeRTOS timer callback function, fired when the a timer period has elapsed.
*
*  \param[in]  timer  ID of the timer that has expired.
*/
static void gsm_timer_callback(TimerHandle_t timer)
{
   12060:	b580      	push	{r7, lr}
   12062:	b082      	sub	sp, #8
   12064:	af00      	add	r7, sp, #0
   12066:	6078      	str	r0, [r7, #4]
}
   12068:	46c0      	nop			; (mov r8, r8)
   1206a:	46bd      	mov	sp, r7
   1206c:	b002      	add	sp, #8
   1206e:	bd80      	pop	{r7, pc}

00012070 <Flush_RX_Buffer>:

void Flush_RX_Buffer(void)
{
   12070:	b580      	push	{r7, lr}
   12072:	b082      	sub	sp, #8
   12074:	af00      	add	r7, sp, #0
	uint8_t ucharTemp_Value;
	portBASE_TYPE xStatus;
	while(1)
	{
		xStatus=xQueueReceive(gsm_rx_queue,&ucharTemp_Value,0);
   12076:	4b09      	ldr	r3, [pc, #36]	; (1209c <Flush_RX_Buffer+0x2c>)
   12078:	681b      	ldr	r3, [r3, #0]
   1207a:	1cf9      	adds	r1, r7, #3
   1207c:	2200      	movs	r2, #0
   1207e:	0018      	movs	r0, r3
   12080:	4b07      	ldr	r3, [pc, #28]	; (120a0 <Flush_RX_Buffer+0x30>)
   12082:	4798      	blx	r3
   12084:	0003      	movs	r3, r0
   12086:	607b      	str	r3, [r7, #4]
		if (xStatus==errQUEUE_EMPTY)
   12088:	687b      	ldr	r3, [r7, #4]
   1208a:	2b00      	cmp	r3, #0
   1208c:	d000      	beq.n	12090 <Flush_RX_Buffer+0x20>
		xStatus=xQueueReceive(gsm_rx_queue,&ucharTemp_Value,0);
   1208e:	e7f2      	b.n	12076 <Flush_RX_Buffer+0x6>
		{
			break;
   12090:	46c0      	nop			; (mov r8, r8)
		}
	}
}
   12092:	46c0      	nop			; (mov r8, r8)
   12094:	46bd      	mov	sp, r7
   12096:	b002      	add	sp, #8
   12098:	bd80      	pop	{r7, pc}
   1209a:	46c0      	nop			; (mov r8, r8)
   1209c:	2000041c 	.word	0x2000041c
   120a0:	0001f3c1 	.word	0x0001f3c1

000120a4 <gsm_rx_handler>:

static void gsm_rx_handler(uint8_t instance)
{
   120a4:	b590      	push	{r4, r7, lr}
   120a6:	b085      	sub	sp, #20
   120a8:	af00      	add	r7, sp, #0
   120aa:	0002      	movs	r2, r0
   120ac:	1dfb      	adds	r3, r7, #7
   120ae:	701a      	strb	r2, [r3, #0]
	SercomUsart *const usart_hw = &GSM_SERCOM->USART;
   120b0:	4b18      	ldr	r3, [pc, #96]	; (12114 <gsm_rx_handler+0x70>)
   120b2:	60fb      	str	r3, [r7, #12]
	UNUSED(instance);
	if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)
   120b4:	68fb      	ldr	r3, [r7, #12]
   120b6:	7e1b      	ldrb	r3, [r3, #24]
   120b8:	b2db      	uxtb	r3, r3
   120ba:	001a      	movs	r2, r3
   120bc:	2304      	movs	r3, #4
   120be:	4013      	ands	r3, r2
   120c0:	d023      	beq.n	1210a <gsm_rx_handler+0x66>
	{
		/* Check if a data reception error occurred */
		uint8_t rx_error = usart_hw->STATUS.reg &
   120c2:	68fb      	ldr	r3, [r7, #12]
   120c4:	8b5b      	ldrh	r3, [r3, #26]
   120c6:	b29b      	uxth	r3, r3
   120c8:	b2da      	uxtb	r2, r3
   120ca:	230b      	movs	r3, #11
   120cc:	18fb      	adds	r3, r7, r3
   120ce:	2106      	movs	r1, #6
   120d0:	400a      	ands	r2, r1
   120d2:	701a      	strb	r2, [r3, #0]
		(SERCOM_USART_STATUS_FERR | SERCOM_USART_STATUS_BUFOVF);
		/* If error occurred clear the error flags, otherwise queue new data */
		if (rx_error)
   120d4:	230b      	movs	r3, #11
   120d6:	18fb      	adds	r3, r7, r3
   120d8:	781b      	ldrb	r3, [r3, #0]
   120da:	2b00      	cmp	r3, #0
   120dc:	d006      	beq.n	120ec <gsm_rx_handler+0x48>
		{
			usart_hw->STATUS.reg = rx_error;
   120de:	230b      	movs	r3, #11
   120e0:	18fb      	adds	r3, r7, r3
   120e2:	781b      	ldrb	r3, [r3, #0]
   120e4:	b29a      	uxth	r2, r3
   120e6:	68fb      	ldr	r3, [r7, #12]
   120e8:	835a      	strh	r2, [r3, #26]
			uint8_t data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
			xQueueSendFromISR(gsm_rx_queue, &data, NULL);
			//gsm_module_exit_sleep(true);
		}
	}
}
   120ea:	e00e      	b.n	1210a <gsm_rx_handler+0x66>
			uint8_t data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
   120ec:	68fb      	ldr	r3, [r7, #12]
   120ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
   120f0:	b29b      	uxth	r3, r3
   120f2:	b2da      	uxtb	r2, r3
   120f4:	230a      	movs	r3, #10
   120f6:	18fb      	adds	r3, r7, r3
   120f8:	701a      	strb	r2, [r3, #0]
			xQueueSendFromISR(gsm_rx_queue, &data, NULL);
   120fa:	4b07      	ldr	r3, [pc, #28]	; (12118 <gsm_rx_handler+0x74>)
   120fc:	6818      	ldr	r0, [r3, #0]
   120fe:	230a      	movs	r3, #10
   12100:	18f9      	adds	r1, r7, r3
   12102:	2300      	movs	r3, #0
   12104:	2200      	movs	r2, #0
   12106:	4c05      	ldr	r4, [pc, #20]	; (1211c <gsm_rx_handler+0x78>)
   12108:	47a0      	blx	r4
}
   1210a:	46c0      	nop			; (mov r8, r8)
   1210c:	46bd      	mov	sp, r7
   1210e:	b005      	add	sp, #20
   12110:	bd90      	pop	{r4, r7, pc}
   12112:	46c0      	nop			; (mov r8, r8)
   12114:	42001400 	.word	0x42001400
   12118:	2000041c 	.word	0x2000041c
   1211c:	0001f2a1 	.word	0x0001f2a1

00012120 <gsm_ring_detect_pin_callback>:

static void gsm_ring_detect_pin_callback(void)
{
   12120:	b580      	push	{r7, lr}
   12122:	af00      	add	r7, sp, #0
	isRinging = !port_pin_get_input_level(GSM_RING_PIN);
   12124:	2031      	movs	r0, #49	; 0x31
   12126:	4b0b      	ldr	r3, [pc, #44]	; (12154 <gsm_ring_detect_pin_callback+0x34>)
   12128:	4798      	blx	r3
   1212a:	0003      	movs	r3, r0
   1212c:	1e5a      	subs	r2, r3, #1
   1212e:	4193      	sbcs	r3, r2
   12130:	b2db      	uxtb	r3, r3
   12132:	2201      	movs	r2, #1
   12134:	4053      	eors	r3, r2
   12136:	b2db      	uxtb	r3, r3
   12138:	1c1a      	adds	r2, r3, #0
   1213a:	2301      	movs	r3, #1
   1213c:	4013      	ands	r3, r2
   1213e:	b2da      	uxtb	r2, r3
   12140:	4b05      	ldr	r3, [pc, #20]	; (12158 <gsm_ring_detect_pin_callback+0x38>)
   12142:	701a      	strb	r2, [r3, #0]
	lastRingStateChangeTime = xTaskGetTickCountFromISR();
   12144:	4b05      	ldr	r3, [pc, #20]	; (1215c <gsm_ring_detect_pin_callback+0x3c>)
   12146:	4798      	blx	r3
   12148:	0002      	movs	r2, r0
   1214a:	4b05      	ldr	r3, [pc, #20]	; (12160 <gsm_ring_detect_pin_callback+0x40>)
   1214c:	601a      	str	r2, [r3, #0]
}
   1214e:	46c0      	nop			; (mov r8, r8)
   12150:	46bd      	mov	sp, r7
   12152:	bd80      	pop	{r7, pc}
   12154:	00011dfd 	.word	0x00011dfd
   12158:	2000088e 	.word	0x2000088e
   1215c:	000201e9 	.word	0x000201e9
   12160:	200008cc 	.word	0x200008cc

00012164 <gsm_init>:

void gsm_init(void)
{
   12164:	b590      	push	{r4, r7, lr}
   12166:	b097      	sub	sp, #92	; 0x5c
   12168:	af02      	add	r7, sp, #8
	struct port_config gsm_pin_config;
	port_get_config_defaults(&gsm_pin_config);
   1216a:	234c      	movs	r3, #76	; 0x4c
   1216c:	18fb      	adds	r3, r7, r3
   1216e:	0018      	movs	r0, r3
   12170:	4b4d      	ldr	r3, [pc, #308]	; (122a8 <gsm_init+0x144>)
   12172:	4798      	blx	r3
	
	/* Configure pin to control the GSM module sleep state */
	gsm_pin_config.direction = PORT_PIN_DIR_OUTPUT;
   12174:	234c      	movs	r3, #76	; 0x4c
   12176:	18fb      	adds	r3, r7, r3
   12178:	2201      	movs	r2, #1
   1217a:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(GSM_DTR_PIN, &gsm_pin_config);
   1217c:	234c      	movs	r3, #76	; 0x4c
   1217e:	18fb      	adds	r3, r7, r3
   12180:	0019      	movs	r1, r3
   12182:	2014      	movs	r0, #20
   12184:	4b49      	ldr	r3, [pc, #292]	; (122ac <gsm_init+0x148>)
   12186:	4798      	blx	r3
	port_pin_set_output_level(GSM_DTR_PIN, !GSM_DTR_PIN_ACTIVE);
   12188:	2100      	movs	r1, #0
   1218a:	2014      	movs	r0, #20
   1218c:	4b48      	ldr	r3, [pc, #288]	; (122b0 <gsm_init+0x14c>)
   1218e:	4798      	blx	r3
	
	//////////////////////////////////////////////////////////////////////////
	struct extint_chan_conf config_extint_chan;
	extint_chan_get_config_defaults(&config_extint_chan);
   12190:	2340      	movs	r3, #64	; 0x40
   12192:	18fb      	adds	r3, r7, r3
   12194:	0018      	movs	r0, r3
   12196:	4b47      	ldr	r3, [pc, #284]	; (122b4 <gsm_init+0x150>)
   12198:	4798      	blx	r3
	config_extint_chan.gpio_pin = GSM_RING_EIC_PIN;
   1219a:	2340      	movs	r3, #64	; 0x40
   1219c:	18fb      	adds	r3, r7, r3
   1219e:	2231      	movs	r2, #49	; 0x31
   121a0:	601a      	str	r2, [r3, #0]
	config_extint_chan.gpio_pin_mux = GSM_RING_EIC_MUX;
   121a2:	2340      	movs	r3, #64	; 0x40
   121a4:	18fb      	adds	r3, r7, r3
   121a6:	2200      	movs	r2, #0
   121a8:	605a      	str	r2, [r3, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
   121aa:	2340      	movs	r3, #64	; 0x40
   121ac:	18fb      	adds	r3, r7, r3
   121ae:	2201      	movs	r2, #1
   121b0:	721a      	strb	r2, [r3, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_BOTH;
   121b2:	2340      	movs	r3, #64	; 0x40
   121b4:	18fb      	adds	r3, r7, r3
   121b6:	2203      	movs	r2, #3
   121b8:	72da      	strb	r2, [r3, #11]
	extint_chan_set_config(GSM_RING_EIC_LINE, &config_extint_chan);
   121ba:	2340      	movs	r3, #64	; 0x40
   121bc:	18fb      	adds	r3, r7, r3
   121be:	0019      	movs	r1, r3
   121c0:	2001      	movs	r0, #1
   121c2:	4b3d      	ldr	r3, [pc, #244]	; (122b8 <gsm_init+0x154>)
   121c4:	4798      	blx	r3
	
	extint_chan_enable_callback(GSM_RING_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
   121c6:	2100      	movs	r1, #0
   121c8:	2001      	movs	r0, #1
   121ca:	4b3c      	ldr	r3, [pc, #240]	; (122bc <gsm_init+0x158>)
   121cc:	4798      	blx	r3
	extint_register_callback(gsm_ring_detect_pin_callback,GSM_RING_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
   121ce:	4b3c      	ldr	r3, [pc, #240]	; (122c0 <gsm_init+0x15c>)
   121d0:	2200      	movs	r2, #0
   121d2:	2101      	movs	r1, #1
   121d4:	0018      	movs	r0, r3
   121d6:	4b3b      	ldr	r3, [pc, #236]	; (122c4 <gsm_init+0x160>)
   121d8:	4798      	blx	r3
	//////////////////////////////////////////////////////////////////////////
	
	gsm_rx_queue = xQueueCreate(240, sizeof(uint8_t));
   121da:	2200      	movs	r2, #0
   121dc:	2101      	movs	r1, #1
   121de:	20f0      	movs	r0, #240	; 0xf0
   121e0:	4b39      	ldr	r3, [pc, #228]	; (122c8 <gsm_init+0x164>)
   121e2:	4798      	blx	r3
   121e4:	0002      	movs	r2, r0
   121e6:	4b39      	ldr	r3, [pc, #228]	; (122cc <gsm_init+0x168>)
   121e8:	601a      	str	r2, [r3, #0]
	gsm_cmd_timeout_timer = xTimerCreate((const char *)"GSM Timeout",GSM_TIMEOUT_PERIOD_TICKS, pdFALSE, NULL, gsm_timer_callback);
   121ea:	4939      	ldr	r1, [pc, #228]	; (122d0 <gsm_init+0x16c>)
   121ec:	4839      	ldr	r0, [pc, #228]	; (122d4 <gsm_init+0x170>)
   121ee:	4b3a      	ldr	r3, [pc, #232]	; (122d8 <gsm_init+0x174>)
   121f0:	9300      	str	r3, [sp, #0]
   121f2:	2300      	movs	r3, #0
   121f4:	2200      	movs	r2, #0
   121f6:	4c39      	ldr	r4, [pc, #228]	; (122dc <gsm_init+0x178>)
   121f8:	47a0      	blx	r4
   121fa:	0002      	movs	r2, r0
   121fc:	4b38      	ldr	r3, [pc, #224]	; (122e0 <gsm_init+0x17c>)
   121fe:	601a      	str	r2, [r3, #0]
	vSemaphoreCreateBinary(gsm_busy_semaphore);
   12200:	2203      	movs	r2, #3
   12202:	2100      	movs	r1, #0
   12204:	2001      	movs	r0, #1
   12206:	4b30      	ldr	r3, [pc, #192]	; (122c8 <gsm_init+0x164>)
   12208:	4798      	blx	r3
   1220a:	0002      	movs	r2, r0
   1220c:	4b35      	ldr	r3, [pc, #212]	; (122e4 <gsm_init+0x180>)
   1220e:	601a      	str	r2, [r3, #0]
   12210:	4b34      	ldr	r3, [pc, #208]	; (122e4 <gsm_init+0x180>)
   12212:	681b      	ldr	r3, [r3, #0]
   12214:	2b00      	cmp	r3, #0
   12216:	d006      	beq.n	12226 <gsm_init+0xc2>
   12218:	4b32      	ldr	r3, [pc, #200]	; (122e4 <gsm_init+0x180>)
   1221a:	6818      	ldr	r0, [r3, #0]
   1221c:	2300      	movs	r3, #0
   1221e:	2200      	movs	r2, #0
   12220:	2100      	movs	r1, #0
   12222:	4c31      	ldr	r4, [pc, #196]	; (122e8 <gsm_init+0x184>)
   12224:	47a0      	blx	r4
	
	struct usart_config config_usart;
	usart_get_config_defaults(&config_usart);
   12226:	003b      	movs	r3, r7
   12228:	0018      	movs	r0, r3
   1222a:	4b30      	ldr	r3, [pc, #192]	; (122ec <gsm_init+0x188>)
   1222c:	4798      	blx	r3
	config_usart.baudrate		= GSM_BAUDRATE;
   1222e:	003b      	movs	r3, r7
   12230:	2296      	movs	r2, #150	; 0x96
   12232:	01d2      	lsls	r2, r2, #7
   12234:	621a      	str	r2, [r3, #32]
	config_usart.mux_setting	= GSM_SERCOM_MUX;
   12236:	003b      	movs	r3, r7
   12238:	2280      	movs	r2, #128	; 0x80
   1223a:	0352      	lsls	r2, r2, #13
   1223c:	60da      	str	r2, [r3, #12]
	config_usart.pinmux_pad0	= GSM_SERCOM_PAD0_MUX;
   1223e:	003b      	movs	r3, r7
   12240:	4a2b      	ldr	r2, [pc, #172]	; (122f0 <gsm_init+0x18c>)
   12242:	631a      	str	r2, [r3, #48]	; 0x30
	config_usart.pinmux_pad1	= GSM_SERCOM_PAD1_MUX;
   12244:	003b      	movs	r3, r7
   12246:	4a2b      	ldr	r2, [pc, #172]	; (122f4 <gsm_init+0x190>)
   12248:	635a      	str	r2, [r3, #52]	; 0x34
	config_usart.pinmux_pad2	= GSM_SERCOM_PAD2_MUX;
   1224a:	003b      	movs	r3, r7
   1224c:	2201      	movs	r2, #1
   1224e:	4252      	negs	r2, r2
   12250:	639a      	str	r2, [r3, #56]	; 0x38
	config_usart.pinmux_pad3	= GSM_SERCOM_PAD3_MUX;
   12252:	003b      	movs	r3, r7
   12254:	2201      	movs	r2, #1
   12256:	4252      	negs	r2, r2
   12258:	63da      	str	r2, [r3, #60]	; 0x3c
	config_usart.run_in_standby = true;
   1225a:	003b      	movs	r3, r7
   1225c:	222c      	movs	r2, #44	; 0x2c
   1225e:	2101      	movs	r1, #1
   12260:	5499      	strb	r1, [r3, r2]
	while (usart_init(&gsm_usart,GSM_SERCOM, &config_usart) != STATUS_OK)
   12262:	e003      	b.n	1226c <gsm_init+0x108>
	{
		usart_reset(&gsm_usart);
   12264:	4b24      	ldr	r3, [pc, #144]	; (122f8 <gsm_init+0x194>)
   12266:	0018      	movs	r0, r3
   12268:	4b24      	ldr	r3, [pc, #144]	; (122fc <gsm_init+0x198>)
   1226a:	4798      	blx	r3
	while (usart_init(&gsm_usart,GSM_SERCOM, &config_usart) != STATUS_OK)
   1226c:	003a      	movs	r2, r7
   1226e:	4924      	ldr	r1, [pc, #144]	; (12300 <gsm_init+0x19c>)
   12270:	4b21      	ldr	r3, [pc, #132]	; (122f8 <gsm_init+0x194>)
   12272:	0018      	movs	r0, r3
   12274:	4b23      	ldr	r3, [pc, #140]	; (12304 <gsm_init+0x1a0>)
   12276:	4798      	blx	r3
   12278:	1e03      	subs	r3, r0, #0
   1227a:	d1f3      	bne.n	12264 <gsm_init+0x100>
	}
	usart_enable(&gsm_usart);
   1227c:	4b1e      	ldr	r3, [pc, #120]	; (122f8 <gsm_init+0x194>)
   1227e:	0018      	movs	r0, r3
   12280:	4b21      	ldr	r3, [pc, #132]	; (12308 <gsm_init+0x1a4>)
   12282:	4798      	blx	r3
	_sercom_set_handler(_sercom_get_sercom_inst_index(GSM_SERCOM),gsm_rx_handler);
   12284:	4b1e      	ldr	r3, [pc, #120]	; (12300 <gsm_init+0x19c>)
   12286:	0018      	movs	r0, r3
   12288:	4b20      	ldr	r3, [pc, #128]	; (1230c <gsm_init+0x1a8>)
   1228a:	4798      	blx	r3
   1228c:	0003      	movs	r3, r0
   1228e:	001a      	movs	r2, r3
   12290:	4b1f      	ldr	r3, [pc, #124]	; (12310 <gsm_init+0x1ac>)
   12292:	0019      	movs	r1, r3
   12294:	0010      	movs	r0, r2
   12296:	4b1f      	ldr	r3, [pc, #124]	; (12314 <gsm_init+0x1b0>)
   12298:	4798      	blx	r3
	GSM_SERCOM->USART.INTENSET.reg=SERCOM_USART_INTFLAG_RXC;
   1229a:	4b19      	ldr	r3, [pc, #100]	; (12300 <gsm_init+0x19c>)
   1229c:	2204      	movs	r2, #4
   1229e:	759a      	strb	r2, [r3, #22]
}
   122a0:	46c0      	nop			; (mov r8, r8)
   122a2:	46bd      	mov	sp, r7
   122a4:	b015      	add	sp, #84	; 0x54
   122a6:	bd90      	pop	{r4, r7, pc}
   122a8:	00011dd9 	.word	0x00011dd9
   122ac:	00022cd1 	.word	0x00022cd1
   122b0:	00011e41 	.word	0x00011e41
   122b4:	0001e301 	.word	0x0001e301
   122b8:	0001e335 	.word	0x0001e335
   122bc:	000223e1 	.word	0x000223e1
   122c0:	00012121 	.word	0x00012121
   122c4:	0002237d 	.word	0x0002237d
   122c8:	0001f005 	.word	0x0001f005
   122cc:	2000041c 	.word	0x2000041c
   122d0:	00001388 	.word	0x00001388
   122d4:	000297f8 	.word	0x000297f8
   122d8:	00012061 	.word	0x00012061
   122dc:	00020d89 	.word	0x00020d89
   122e0:	20000420 	.word	0x20000420
   122e4:	20000424 	.word	0x20000424
   122e8:	0001f0c1 	.word	0x0001f0c1
   122ec:	00011ed9 	.word	0x00011ed9
   122f0:	00160002 	.word	0x00160002
   122f4:	00170002 	.word	0x00170002
   122f8:	20000898 	.word	0x20000898
   122fc:	0001202d 	.word	0x0001202d
   12300:	42001400 	.word	0x42001400
   12304:	000219d5 	.word	0x000219d5
   12308:	00011f99 	.word	0x00011f99
   1230c:	0001ea95 	.word	0x0001ea95
   12310:	000120a5 	.word	0x000120a5
   12314:	00022171 	.word	0x00022171

00012318 <gsm_module_exit_sleep>:

void gsm_module_exit_sleep(bool calledFromRead)
{
   12318:	b580      	push	{r7, lr}
   1231a:	b082      	sub	sp, #8
   1231c:	af00      	add	r7, sp, #0
   1231e:	0002      	movs	r2, r0
   12320:	1dfb      	adds	r3, r7, #7
   12322:	701a      	strb	r2, [r3, #0]
	if (!isGSMModuleAwake)
   12324:	4b12      	ldr	r3, [pc, #72]	; (12370 <gsm_module_exit_sleep+0x58>)
   12326:	781b      	ldrb	r3, [r3, #0]
   12328:	b2db      	uxtb	r3, r3
   1232a:	2201      	movs	r2, #1
   1232c:	4053      	eors	r3, r2
   1232e:	b2db      	uxtb	r3, r3
   12330:	2b00      	cmp	r3, #0
   12332:	d010      	beq.n	12356 <gsm_module_exit_sleep+0x3e>
	{
		port_pin_set_output_level(GSM_DTR_PIN, GSM_DTR_PIN_ACTIVE);
   12334:	2101      	movs	r1, #1
   12336:	2014      	movs	r0, #20
   12338:	4b0e      	ldr	r3, [pc, #56]	; (12374 <gsm_module_exit_sleep+0x5c>)
   1233a:	4798      	blx	r3
		isGSMModuleAwake = true;
   1233c:	4b0c      	ldr	r3, [pc, #48]	; (12370 <gsm_module_exit_sleep+0x58>)
   1233e:	2201      	movs	r2, #1
   12340:	701a      	strb	r2, [r3, #0]
		if (!calledFromRead)
   12342:	1dfb      	adds	r3, r7, #7
   12344:	781b      	ldrb	r3, [r3, #0]
   12346:	2201      	movs	r2, #1
   12348:	4053      	eors	r3, r2
   1234a:	b2db      	uxtb	r3, r3
   1234c:	2b00      	cmp	r3, #0
   1234e:	d002      	beq.n	12356 <gsm_module_exit_sleep+0x3e>
		{
			vTaskDelay(100 / portTICK_PERIOD_MS);
   12350:	2064      	movs	r0, #100	; 0x64
   12352:	4b09      	ldr	r3, [pc, #36]	; (12378 <gsm_module_exit_sleep+0x60>)
   12354:	4798      	blx	r3
		}
	}
	lastToLastGSMCommunicationTime=lastGSMCommunicationTime;
   12356:	4b09      	ldr	r3, [pc, #36]	; (1237c <gsm_module_exit_sleep+0x64>)
   12358:	681a      	ldr	r2, [r3, #0]
   1235a:	4b09      	ldr	r3, [pc, #36]	; (12380 <gsm_module_exit_sleep+0x68>)
   1235c:	601a      	str	r2, [r3, #0]
	lastGSMCommunicationTime=xTaskGetTickCount();
   1235e:	4b09      	ldr	r3, [pc, #36]	; (12384 <gsm_module_exit_sleep+0x6c>)
   12360:	4798      	blx	r3
   12362:	0002      	movs	r2, r0
   12364:	4b05      	ldr	r3, [pc, #20]	; (1237c <gsm_module_exit_sleep+0x64>)
   12366:	601a      	str	r2, [r3, #0]
}
   12368:	46c0      	nop			; (mov r8, r8)
   1236a:	46bd      	mov	sp, r7
   1236c:	b002      	add	sp, #8
   1236e:	bd80      	pop	{r7, pc}
   12370:	20000884 	.word	0x20000884
   12374:	00011e41 	.word	0x00011e41
   12378:	0001fe69 	.word	0x0001fe69
   1237c:	20000894 	.word	0x20000894
   12380:	20000890 	.word	0x20000890
   12384:	000201cd 	.word	0x000201cd

00012388 <gsm_module_enter_sleep>:

void gsm_module_enter_sleep(void)
{
   12388:	b580      	push	{r7, lr}
   1238a:	af00      	add	r7, sp, #0
	//port_pin_set_output_level(GSM_DTR_PIN, GSM_DTR_PIN_DEACTIVE);
	isGSMModuleAwake = false;
   1238c:	4b02      	ldr	r3, [pc, #8]	; (12398 <gsm_module_enter_sleep+0x10>)
   1238e:	2200      	movs	r2, #0
   12390:	701a      	strb	r2, [r3, #0]
}
   12392:	46c0      	nop			; (mov r8, r8)
   12394:	46bd      	mov	sp, r7
   12396:	bd80      	pop	{r7, pc}
   12398:	20000884 	.word	0x20000884

0001239c <gsm_module_sleep_elligible>:

bool gsm_module_sleep_elligible(void)
{
   1239c:	b580      	push	{r7, lr}
   1239e:	b082      	sub	sp, #8
   123a0:	af00      	add	r7, sp, #0
	if(isGSMModuleAwake)
   123a2:	4b0e      	ldr	r3, [pc, #56]	; (123dc <gsm_module_sleep_elligible+0x40>)
   123a4:	781b      	ldrb	r3, [r3, #0]
   123a6:	b2db      	uxtb	r3, r3
   123a8:	2b00      	cmp	r3, #0
   123aa:	d011      	beq.n	123d0 <gsm_module_sleep_elligible+0x34>
	{
		bool ret=false;
   123ac:	1dfb      	adds	r3, r7, #7
   123ae:	2200      	movs	r2, #0
   123b0:	701a      	strb	r2, [r3, #0]
		ret= ((xTaskGetTickCount() - lastGSMCommunicationTime)>=30000L);
   123b2:	4b0b      	ldr	r3, [pc, #44]	; (123e0 <gsm_module_sleep_elligible+0x44>)
   123b4:	4798      	blx	r3
   123b6:	0002      	movs	r2, r0
   123b8:	4b0a      	ldr	r3, [pc, #40]	; (123e4 <gsm_module_sleep_elligible+0x48>)
   123ba:	681b      	ldr	r3, [r3, #0]
   123bc:	1ad2      	subs	r2, r2, r3
   123be:	1dfb      	adds	r3, r7, #7
   123c0:	4909      	ldr	r1, [pc, #36]	; (123e8 <gsm_module_sleep_elligible+0x4c>)
   123c2:	4291      	cmp	r1, r2
   123c4:	4192      	sbcs	r2, r2
   123c6:	4252      	negs	r2, r2
   123c8:	701a      	strb	r2, [r3, #0]
		return ret;
   123ca:	1dfb      	adds	r3, r7, #7
   123cc:	781b      	ldrb	r3, [r3, #0]
   123ce:	e000      	b.n	123d2 <gsm_module_sleep_elligible+0x36>
	}
	return true;
   123d0:	2301      	movs	r3, #1
}
   123d2:	0018      	movs	r0, r3
   123d4:	46bd      	mov	sp, r7
   123d6:	b002      	add	sp, #8
   123d8:	bd80      	pop	{r7, pc}
   123da:	46c0      	nop			; (mov r8, r8)
   123dc:	20000884 	.word	0x20000884
   123e0:	000201cd 	.word	0x000201cd
   123e4:	20000894 	.word	0x20000894
   123e8:	0000752f 	.word	0x0000752f

000123ec <gsm_send_at_command>:

enum gsm_error gsm_send_at_command(const char *const atcommand,const char* aResponExit,const uint32_t aTimeoutMax,const uint8_t aLenOut, char *aResponOut)
{
   123ec:	b590      	push	{r4, r7, lr}
   123ee:	b08b      	sub	sp, #44	; 0x2c
   123f0:	af02      	add	r7, sp, #8
   123f2:	60f8      	str	r0, [r7, #12]
   123f4:	60b9      	str	r1, [r7, #8]
   123f6:	607a      	str	r2, [r7, #4]
   123f8:	001a      	movs	r2, r3
   123fa:	1cfb      	adds	r3, r7, #3
   123fc:	701a      	strb	r2, [r3, #0]
	
	/* Try to acquire the command lock; if already busy with a command, abort */
	if (xSemaphoreTake(gsm_busy_semaphore, 1) == pdFALSE)
   123fe:	4b66      	ldr	r3, [pc, #408]	; (12598 <gsm_send_at_command+0x1ac>)
   12400:	681b      	ldr	r3, [r3, #0]
   12402:	2101      	movs	r1, #1
   12404:	0018      	movs	r0, r3
   12406:	4b65      	ldr	r3, [pc, #404]	; (1259c <gsm_send_at_command+0x1b0>)
   12408:	4798      	blx	r3
   1240a:	1e03      	subs	r3, r0, #0
   1240c:	d101      	bne.n	12412 <gsm_send_at_command+0x26>
	{
		return GSM_ERROR_OPERATION_IN_PROGRESS;
   1240e:	2302      	movs	r3, #2
   12410:	e0bd      	b.n	1258e <gsm_send_at_command+0x1a2>
	}
	
	
	/* Enable DTR and wait for the module to be ready to accept a command */
	gsm_module_exit_sleep(false);
   12412:	2000      	movs	r0, #0
   12414:	4b62      	ldr	r3, [pc, #392]	; (125a0 <gsm_send_at_command+0x1b4>)
   12416:	4798      	blx	r3
	/*                                                                      */
	
	//lastGSMCommandTime=xTaskGetTickCount();
	
	//////////////////////////////////////////////////////////////////////////
	Flush_RX_Buffer();
   12418:	4b62      	ldr	r3, [pc, #392]	; (125a4 <gsm_send_at_command+0x1b8>)
   1241a:	4798      	blx	r3
	//////////////////////////////////////////////////////////////////////////
	enum gsm_error err_no=GSM_ERROR_NONE;
   1241c:	231f      	movs	r3, #31
   1241e:	18fb      	adds	r3, r7, r3
   12420:	2200      	movs	r2, #0
   12422:	701a      	strb	r2, [r3, #0]
	
	uint8_t u8tRx_Index=0;
   12424:	231e      	movs	r3, #30
   12426:	18fb      	adds	r3, r7, r3
   12428:	2200      	movs	r2, #0
   1242a:	701a      	strb	r2, [r3, #0]
	char u8tTemp_Char=0;
   1242c:	2313      	movs	r3, #19
   1242e:	18fb      	adds	r3, r7, r3
   12430:	2200      	movs	r2, #0
   12432:	701a      	strb	r2, [r3, #0]
	portBASE_TYPE xStatus;

	char *aDataBuffer = (char*) calloc(MAX_BUFFER_TMP,sizeof(char));
   12434:	2101      	movs	r1, #1
   12436:	20f0      	movs	r0, #240	; 0xf0
   12438:	4b5b      	ldr	r3, [pc, #364]	; (125a8 <gsm_send_at_command+0x1bc>)
   1243a:	4798      	blx	r3
   1243c:	0003      	movs	r3, r0
   1243e:	61bb      	str	r3, [r7, #24]
	
	//buffer created???
	if (aDataBuffer == NULL)
   12440:	69bb      	ldr	r3, [r7, #24]
   12442:	2b00      	cmp	r3, #0
   12444:	d101      	bne.n	1244a <gsm_send_at_command+0x5e>
	{
		//port_pin_set_output_level(GSM_DTR_PIN, !GSM_DTR_PIN_ACTIVE);
		return 0;
   12446:	2300      	movs	r3, #0
   12448:	e0a1      	b.n	1258e <gsm_send_at_command+0x1a2>
	}

	//reset to all 0
	memset(aDataBuffer, '\0', MAX_BUFFER_TMP);
   1244a:	69bb      	ldr	r3, [r7, #24]
   1244c:	22f0      	movs	r2, #240	; 0xf0
   1244e:	2100      	movs	r1, #0
   12450:	0018      	movs	r0, r3
   12452:	4b56      	ldr	r3, [pc, #344]	; (125ac <gsm_send_at_command+0x1c0>)
   12454:	4798      	blx	r3
	
	/* Send the command to the GSM module when it is ready */
	usart_write_buffer_wait(&gsm_usart, (uint8_t *)atcommand, strlen(atcommand));
   12456:	68fb      	ldr	r3, [r7, #12]
   12458:	0018      	movs	r0, r3
   1245a:	4b55      	ldr	r3, [pc, #340]	; (125b0 <gsm_send_at_command+0x1c4>)
   1245c:	4798      	blx	r3
   1245e:	0003      	movs	r3, r0
   12460:	b29a      	uxth	r2, r3
   12462:	68f9      	ldr	r1, [r7, #12]
   12464:	4b53      	ldr	r3, [pc, #332]	; (125b4 <gsm_send_at_command+0x1c8>)
   12466:	0018      	movs	r0, r3
   12468:	4b53      	ldr	r3, [pc, #332]	; (125b8 <gsm_send_at_command+0x1cc>)
   1246a:	4798      	blx	r3
	
	/* Start the timeout timer to ensure a timely response from the module */
	xTimerChangePeriod(gsm_cmd_timeout_timer,(aTimeoutMax / portTICK_PERIOD_MS),portMAX_DELAY);
   1246c:	4b53      	ldr	r3, [pc, #332]	; (125bc <gsm_send_at_command+0x1d0>)
   1246e:	6818      	ldr	r0, [r3, #0]
   12470:	687a      	ldr	r2, [r7, #4]
   12472:	2301      	movs	r3, #1
   12474:	425b      	negs	r3, r3
   12476:	9300      	str	r3, [sp, #0]
   12478:	2300      	movs	r3, #0
   1247a:	2104      	movs	r1, #4
   1247c:	4c50      	ldr	r4, [pc, #320]	; (125c0 <gsm_send_at_command+0x1d4>)
   1247e:	47a0      	blx	r4
	
	while (true)
	{
		if(xTimerIsTimerActive(gsm_cmd_timeout_timer))
   12480:	4b4e      	ldr	r3, [pc, #312]	; (125bc <gsm_send_at_command+0x1d0>)
   12482:	681b      	ldr	r3, [r3, #0]
   12484:	0018      	movs	r0, r3
   12486:	4b4f      	ldr	r3, [pc, #316]	; (125c4 <gsm_send_at_command+0x1d8>)
   12488:	4798      	blx	r3
   1248a:	1e03      	subs	r3, r0, #0
   1248c:	d03e      	beq.n	1250c <gsm_send_at_command+0x120>
		{
			if (u8tRx_Index<240)
   1248e:	231e      	movs	r3, #30
   12490:	18fb      	adds	r3, r7, r3
   12492:	781b      	ldrb	r3, [r3, #0]
   12494:	2bef      	cmp	r3, #239	; 0xef
   12496:	d81c      	bhi.n	124d2 <gsm_send_at_command+0xe6>
			{
				xStatus=xQueueReceive(gsm_rx_queue,&u8tTemp_Char, 0);
   12498:	4b4b      	ldr	r3, [pc, #300]	; (125c8 <gsm_send_at_command+0x1dc>)
   1249a:	681b      	ldr	r3, [r3, #0]
   1249c:	2213      	movs	r2, #19
   1249e:	18b9      	adds	r1, r7, r2
   124a0:	2200      	movs	r2, #0
   124a2:	0018      	movs	r0, r3
   124a4:	4b49      	ldr	r3, [pc, #292]	; (125cc <gsm_send_at_command+0x1e0>)
   124a6:	4798      	blx	r3
   124a8:	0003      	movs	r3, r0
   124aa:	617b      	str	r3, [r7, #20]
				if(xStatus!=errQUEUE_EMPTY)
   124ac:	697b      	ldr	r3, [r7, #20]
   124ae:	2b00      	cmp	r3, #0
   124b0:	d00f      	beq.n	124d2 <gsm_send_at_command+0xe6>
				{
					aDataBuffer[u8tRx_Index] = u8tTemp_Char;
   124b2:	231e      	movs	r3, #30
   124b4:	18fb      	adds	r3, r7, r3
   124b6:	781b      	ldrb	r3, [r3, #0]
   124b8:	69ba      	ldr	r2, [r7, #24]
   124ba:	18d3      	adds	r3, r2, r3
   124bc:	2213      	movs	r2, #19
   124be:	18ba      	adds	r2, r7, r2
   124c0:	7812      	ldrb	r2, [r2, #0]
   124c2:	701a      	strb	r2, [r3, #0]
					u8tRx_Index++;
   124c4:	231e      	movs	r3, #30
   124c6:	18fb      	adds	r3, r7, r3
   124c8:	781a      	ldrb	r2, [r3, #0]
   124ca:	231e      	movs	r3, #30
   124cc:	18fb      	adds	r3, r7, r3
   124ce:	3201      	adds	r2, #1
   124d0:	701a      	strb	r2, [r3, #0]
				}
			}
			if (aResponExit != NULL)
   124d2:	68bb      	ldr	r3, [r7, #8]
   124d4:	2b00      	cmp	r3, #0
   124d6:	d00c      	beq.n	124f2 <gsm_send_at_command+0x106>
			{
				if (strstr((const char*)aDataBuffer, (const char*)aResponExit) != NULL)
   124d8:	68ba      	ldr	r2, [r7, #8]
   124da:	69bb      	ldr	r3, [r7, #24]
   124dc:	0011      	movs	r1, r2
   124de:	0018      	movs	r0, r3
   124e0:	4b3b      	ldr	r3, [pc, #236]	; (125d0 <gsm_send_at_command+0x1e4>)
   124e2:	4798      	blx	r3
   124e4:	1e03      	subs	r3, r0, #0
   124e6:	d004      	beq.n	124f2 <gsm_send_at_command+0x106>
				{
					err_no = GSM_ERROR_NONE;
   124e8:	231f      	movs	r3, #31
   124ea:	18fb      	adds	r3, r7, r3
   124ec:	2200      	movs	r2, #0
   124ee:	701a      	strb	r2, [r3, #0]
					break;
   124f0:	e024      	b.n	1253c <gsm_send_at_command+0x150>
				}
			}
			if (strstr((const char*)aDataBuffer, (const char*)RESPONS_ERROR) != NULL)
   124f2:	4a38      	ldr	r2, [pc, #224]	; (125d4 <gsm_send_at_command+0x1e8>)
   124f4:	69bb      	ldr	r3, [r7, #24]
   124f6:	0011      	movs	r1, r2
   124f8:	0018      	movs	r0, r3
   124fa:	4b35      	ldr	r3, [pc, #212]	; (125d0 <gsm_send_at_command+0x1e4>)
   124fc:	4798      	blx	r3
   124fe:	1e03      	subs	r3, r0, #0
   12500:	d0be      	beq.n	12480 <gsm_send_at_command+0x94>
			{
				err_no = GSM_ERROR_COMMAND_ERROR;
   12502:	231f      	movs	r3, #31
   12504:	18fb      	adds	r3, r7, r3
   12506:	220b      	movs	r2, #11
   12508:	701a      	strb	r2, [r3, #0]
				break;
   1250a:	e017      	b.n	1253c <gsm_send_at_command+0x150>
			}
		}
		else
		{
			xTimerStop(gsm_cmd_timeout_timer, portMAX_DELAY);
   1250c:	4b2b      	ldr	r3, [pc, #172]	; (125bc <gsm_send_at_command+0x1d0>)
   1250e:	6818      	ldr	r0, [r3, #0]
   12510:	2301      	movs	r3, #1
   12512:	425b      	negs	r3, r3
   12514:	9300      	str	r3, [sp, #0]
   12516:	2300      	movs	r3, #0
   12518:	2200      	movs	r2, #0
   1251a:	2103      	movs	r1, #3
   1251c:	4c28      	ldr	r4, [pc, #160]	; (125c0 <gsm_send_at_command+0x1d4>)
   1251e:	47a0      	blx	r4
			if (u8tRx_Index==0)
   12520:	231e      	movs	r3, #30
   12522:	18fb      	adds	r3, r7, r3
   12524:	781b      	ldrb	r3, [r3, #0]
   12526:	2b00      	cmp	r3, #0
   12528:	d104      	bne.n	12534 <gsm_send_at_command+0x148>
			{
				err_no = GSM_ERROR_TIMEOUT;
   1252a:	231f      	movs	r3, #31
   1252c:	18fb      	adds	r3, r7, r3
   1252e:	2207      	movs	r2, #7
   12530:	701a      	strb	r2, [r3, #0]
				break;
   12532:	e003      	b.n	1253c <gsm_send_at_command+0x150>
			}
			else
			{
				err_no = GSM_ERROR_UNKWON;
   12534:	231f      	movs	r3, #31
   12536:	18fb      	adds	r3, r7, r3
   12538:	2208      	movs	r2, #8
   1253a:	701a      	strb	r2, [r3, #0]
			}
		}
	}
	
	//copy it to the out
	if ((aLenOut != 0) && (aResponOut != NULL) && (aLenOut > u8tRx_Index) && (err_no==GSM_ERROR_NONE))
   1253c:	1cfb      	adds	r3, r7, #3
   1253e:	781b      	ldrb	r3, [r3, #0]
   12540:	2b00      	cmp	r3, #0
   12542:	d016      	beq.n	12572 <gsm_send_at_command+0x186>
   12544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   12546:	2b00      	cmp	r3, #0
   12548:	d013      	beq.n	12572 <gsm_send_at_command+0x186>
   1254a:	1cfa      	adds	r2, r7, #3
   1254c:	231e      	movs	r3, #30
   1254e:	18fb      	adds	r3, r7, r3
   12550:	7812      	ldrb	r2, [r2, #0]
   12552:	781b      	ldrb	r3, [r3, #0]
   12554:	429a      	cmp	r2, r3
   12556:	d90c      	bls.n	12572 <gsm_send_at_command+0x186>
   12558:	231f      	movs	r3, #31
   1255a:	18fb      	adds	r3, r7, r3
   1255c:	781b      	ldrb	r3, [r3, #0]
   1255e:	2b00      	cmp	r3, #0
   12560:	d107      	bne.n	12572 <gsm_send_at_command+0x186>
	{
		memcpy(aResponOut, aDataBuffer, u8tRx_Index *sizeof(uint8_t));
   12562:	231e      	movs	r3, #30
   12564:	18fb      	adds	r3, r7, r3
   12566:	781a      	ldrb	r2, [r3, #0]
   12568:	69b9      	ldr	r1, [r7, #24]
   1256a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1256c:	0018      	movs	r0, r3
   1256e:	4b1a      	ldr	r3, [pc, #104]	; (125d8 <gsm_send_at_command+0x1ec>)
   12570:	4798      	blx	r3
	}
	
	//port_pin_set_output_level(GSM_DTR_PIN, !GSM_DTR_PIN_ACTIVE);
	
	xSemaphoreGive(gsm_busy_semaphore);
   12572:	4b09      	ldr	r3, [pc, #36]	; (12598 <gsm_send_at_command+0x1ac>)
   12574:	6818      	ldr	r0, [r3, #0]
   12576:	2300      	movs	r3, #0
   12578:	2200      	movs	r2, #0
   1257a:	2100      	movs	r1, #0
   1257c:	4c17      	ldr	r4, [pc, #92]	; (125dc <gsm_send_at_command+0x1f0>)
   1257e:	47a0      	blx	r4
	free(aDataBuffer);
   12580:	69bb      	ldr	r3, [r7, #24]
   12582:	0018      	movs	r0, r3
   12584:	4b16      	ldr	r3, [pc, #88]	; (125e0 <gsm_send_at_command+0x1f4>)
   12586:	4798      	blx	r3
	return err_no;
   12588:	231f      	movs	r3, #31
   1258a:	18fb      	adds	r3, r7, r3
   1258c:	781b      	ldrb	r3, [r3, #0]
}
   1258e:	0018      	movs	r0, r3
   12590:	46bd      	mov	sp, r7
   12592:	b009      	add	sp, #36	; 0x24
   12594:	bd90      	pop	{r4, r7, pc}
   12596:	46c0      	nop			; (mov r8, r8)
   12598:	20000424 	.word	0x20000424
   1259c:	0001f561 	.word	0x0001f561
   125a0:	00012319 	.word	0x00012319
   125a4:	00012071 	.word	0x00012071
   125a8:	00028a49 	.word	0x00028a49
   125ac:	00028b57 	.word	0x00028b57
   125b0:	00028de7 	.word	0x00028de7
   125b4:	20000898 	.word	0x20000898
   125b8:	00021cad 	.word	0x00021cad
   125bc:	20000420 	.word	0x20000420
   125c0:	00020e2d 	.word	0x00020e2d
   125c4:	000213a9 	.word	0x000213a9
   125c8:	2000041c 	.word	0x2000041c
   125cc:	0001f3c1 	.word	0x0001f3c1
   125d0:	00028e17 	.word	0x00028e17
   125d4:	00029804 	.word	0x00029804
   125d8:	00028b21 	.word	0x00028b21
   125dc:	0001f0c1 	.word	0x0001f0c1
   125e0:	00028ae9 	.word	0x00028ae9

000125e4 <gsm_check_module>:


enum gsm_error gsm_check_module(void)
{
   125e4:	b590      	push	{r4, r7, lr}
   125e6:	b083      	sub	sp, #12
   125e8:	af02      	add	r7, sp, #8
	return gsm_send_at_command((const char*)("AT\r"),(const char*)RESPONS_OK,5000,0, NULL);
   125ea:	4a06      	ldr	r2, [pc, #24]	; (12604 <gsm_check_module+0x20>)
   125ec:	4906      	ldr	r1, [pc, #24]	; (12608 <gsm_check_module+0x24>)
   125ee:	4807      	ldr	r0, [pc, #28]	; (1260c <gsm_check_module+0x28>)
   125f0:	2300      	movs	r3, #0
   125f2:	9300      	str	r3, [sp, #0]
   125f4:	2300      	movs	r3, #0
   125f6:	4c06      	ldr	r4, [pc, #24]	; (12610 <gsm_check_module+0x2c>)
   125f8:	47a0      	blx	r4
   125fa:	0003      	movs	r3, r0
}
   125fc:	0018      	movs	r0, r3
   125fe:	46bd      	mov	sp, r7
   12600:	b001      	add	sp, #4
   12602:	bd90      	pop	{r4, r7, pc}
   12604:	00001388 	.word	0x00001388
   12608:	0002980c 	.word	0x0002980c
   1260c:	00029810 	.word	0x00029810
   12610:	000123ed 	.word	0x000123ed

00012614 <gsm_is_network_registered>:
{
	return gsm_send_at_command((const char*)("AT+IFC=0,0\r"), (const char*)RESPONS_OK,5000,0, NULL);
}

enum gsm_error gsm_is_network_registered(void)
{
   12614:	b5b0      	push	{r4, r5, r7, lr}
   12616:	b084      	sub	sp, #16
   12618:	af02      	add	r7, sp, #8
	enum gsm_error errHomeNw;
	enum gsm_error errRomNw;
	errHomeNw = gsm_send_at_command((const char*)("AT+CREG?\r"), (const char*)"+CREG: 0,1",5000,0, NULL);
   1261a:	1dfc      	adds	r4, r7, #7
   1261c:	4a12      	ldr	r2, [pc, #72]	; (12668 <gsm_is_network_registered+0x54>)
   1261e:	4913      	ldr	r1, [pc, #76]	; (1266c <gsm_is_network_registered+0x58>)
   12620:	4813      	ldr	r0, [pc, #76]	; (12670 <gsm_is_network_registered+0x5c>)
   12622:	2300      	movs	r3, #0
   12624:	9300      	str	r3, [sp, #0]
   12626:	2300      	movs	r3, #0
   12628:	4d12      	ldr	r5, [pc, #72]	; (12674 <gsm_is_network_registered+0x60>)
   1262a:	47a8      	blx	r5
   1262c:	0003      	movs	r3, r0
   1262e:	7023      	strb	r3, [r4, #0]
	if (errHomeNw==GSM_ERROR_NONE)
   12630:	1dfb      	adds	r3, r7, #7
   12632:	781b      	ldrb	r3, [r3, #0]
   12634:	2b00      	cmp	r3, #0
   12636:	d101      	bne.n	1263c <gsm_is_network_registered+0x28>
	{
		return GSM_NETWORK_REGISTERED;
   12638:	2309      	movs	r3, #9
   1263a:	e011      	b.n	12660 <gsm_is_network_registered+0x4c>
	}
	else
	{
		errRomNw = gsm_send_at_command((const char*)("AT+CREG?\r"), (const char*)"+CREG: 0,5",5000,0, NULL);
   1263c:	1dbc      	adds	r4, r7, #6
   1263e:	4a0a      	ldr	r2, [pc, #40]	; (12668 <gsm_is_network_registered+0x54>)
   12640:	490d      	ldr	r1, [pc, #52]	; (12678 <gsm_is_network_registered+0x64>)
   12642:	480b      	ldr	r0, [pc, #44]	; (12670 <gsm_is_network_registered+0x5c>)
   12644:	2300      	movs	r3, #0
   12646:	9300      	str	r3, [sp, #0]
   12648:	2300      	movs	r3, #0
   1264a:	4d0a      	ldr	r5, [pc, #40]	; (12674 <gsm_is_network_registered+0x60>)
   1264c:	47a8      	blx	r5
   1264e:	0003      	movs	r3, r0
   12650:	7023      	strb	r3, [r4, #0]
		{
			if (errRomNw==GSM_ERROR_NONE)
   12652:	1dbb      	adds	r3, r7, #6
   12654:	781b      	ldrb	r3, [r3, #0]
   12656:	2b00      	cmp	r3, #0
   12658:	d101      	bne.n	1265e <gsm_is_network_registered+0x4a>
			{
				return GSM_NETWORK_REGISTERED;
   1265a:	2309      	movs	r3, #9
   1265c:	e000      	b.n	12660 <gsm_is_network_registered+0x4c>
			}
			else
			{
				return GSM_NETWORK_NOT_REGISTERED;
   1265e:	230a      	movs	r3, #10
			}
		}
	}
}
   12660:	0018      	movs	r0, r3
   12662:	46bd      	mov	sp, r7
   12664:	b002      	add	sp, #8
   12666:	bdb0      	pop	{r4, r5, r7, pc}
   12668:	00001388 	.word	0x00001388
   1266c:	00029820 	.word	0x00029820
   12670:	0002982c 	.word	0x0002982c
   12674:	000123ed 	.word	0x000123ed
   12678:	00029838 	.word	0x00029838

0001267c <gsm_set_baudrate>:

enum gsm_error gsm_set_baudrate(void)
{
   1267c:	b590      	push	{r4, r7, lr}
   1267e:	b089      	sub	sp, #36	; 0x24
   12680:	af02      	add	r7, sp, #8
	char baurate_at_command[20]={0};
   12682:	1d3b      	adds	r3, r7, #4
   12684:	0018      	movs	r0, r3
   12686:	2314      	movs	r3, #20
   12688:	001a      	movs	r2, r3
   1268a:	2100      	movs	r1, #0
   1268c:	4b0a      	ldr	r3, [pc, #40]	; (126b8 <gsm_set_baudrate+0x3c>)
   1268e:	4798      	blx	r3
	
	sprintf(baurate_at_command, "AT+IPR=%d\r",GSM_BAUDRATE);
   12690:	2396      	movs	r3, #150	; 0x96
   12692:	01da      	lsls	r2, r3, #7
   12694:	4909      	ldr	r1, [pc, #36]	; (126bc <gsm_set_baudrate+0x40>)
   12696:	1d3b      	adds	r3, r7, #4
   12698:	0018      	movs	r0, r3
   1269a:	4b09      	ldr	r3, [pc, #36]	; (126c0 <gsm_set_baudrate+0x44>)
   1269c:	4798      	blx	r3
	
	return gsm_send_at_command((const char*)(baurate_at_command), (const char*)RESPONS_OK,5000,0, NULL);
   1269e:	4a09      	ldr	r2, [pc, #36]	; (126c4 <gsm_set_baudrate+0x48>)
   126a0:	4909      	ldr	r1, [pc, #36]	; (126c8 <gsm_set_baudrate+0x4c>)
   126a2:	1d38      	adds	r0, r7, #4
   126a4:	2300      	movs	r3, #0
   126a6:	9300      	str	r3, [sp, #0]
   126a8:	2300      	movs	r3, #0
   126aa:	4c08      	ldr	r4, [pc, #32]	; (126cc <gsm_set_baudrate+0x50>)
   126ac:	47a0      	blx	r4
   126ae:	0003      	movs	r3, r0
}
   126b0:	0018      	movs	r0, r3
   126b2:	46bd      	mov	sp, r7
   126b4:	b007      	add	sp, #28
   126b6:	bd90      	pop	{r4, r7, pc}
   126b8:	00028b57 	.word	0x00028b57
   126bc:	00029844 	.word	0x00029844
   126c0:	00028d5d 	.word	0x00028d5d
   126c4:	00001388 	.word	0x00001388
   126c8:	0002980c 	.word	0x0002980c
   126cc:	000123ed 	.word	0x000123ed

000126d0 <gsm_detect_simcard>:
{
	return gsm_send_at_command((const char*)("AT+CFUN=1,1\r"), (const char*)RESPONS_OK,10000,0, NULL);
}

enum gsm_error gsm_detect_simcard(void)
{
   126d0:	b590      	push	{r4, r7, lr}
   126d2:	b083      	sub	sp, #12
   126d4:	af02      	add	r7, sp, #8
	return gsm_send_at_command((const char*)("AT+CPIN?\r"), (const char*)"+CPIN: READY",5000,0, NULL);
   126d6:	4a06      	ldr	r2, [pc, #24]	; (126f0 <gsm_detect_simcard+0x20>)
   126d8:	4906      	ldr	r1, [pc, #24]	; (126f4 <gsm_detect_simcard+0x24>)
   126da:	4807      	ldr	r0, [pc, #28]	; (126f8 <gsm_detect_simcard+0x28>)
   126dc:	2300      	movs	r3, #0
   126de:	9300      	str	r3, [sp, #0]
   126e0:	2300      	movs	r3, #0
   126e2:	4c06      	ldr	r4, [pc, #24]	; (126fc <gsm_detect_simcard+0x2c>)
   126e4:	47a0      	blx	r4
   126e6:	0003      	movs	r3, r0
}
   126e8:	0018      	movs	r0, r3
   126ea:	46bd      	mov	sp, r7
   126ec:	b001      	add	sp, #4
   126ee:	bd90      	pop	{r4, r7, pc}
   126f0:	00001388 	.word	0x00001388
   126f4:	000298b4 	.word	0x000298b4
   126f8:	000298c4 	.word	0x000298c4
   126fc:	000123ed 	.word	0x000123ed

00012700 <gsm_delete_all_sms>:

enum gsm_error gsm_delete_all_sms(void)
{
   12700:	b590      	push	{r4, r7, lr}
   12702:	b083      	sub	sp, #12
   12704:	af02      	add	r7, sp, #8
	return gsm_send_at_command((const char*)("AT+CMGDA=\"DEL ALL\"\r"), (const char*)RESPONS_OK,25000,0, NULL);
   12706:	4a06      	ldr	r2, [pc, #24]	; (12720 <gsm_delete_all_sms+0x20>)
   12708:	4906      	ldr	r1, [pc, #24]	; (12724 <gsm_delete_all_sms+0x24>)
   1270a:	4807      	ldr	r0, [pc, #28]	; (12728 <gsm_delete_all_sms+0x28>)
   1270c:	2300      	movs	r3, #0
   1270e:	9300      	str	r3, [sp, #0]
   12710:	2300      	movs	r3, #0
   12712:	4c06      	ldr	r4, [pc, #24]	; (1272c <gsm_delete_all_sms+0x2c>)
   12714:	47a0      	blx	r4
   12716:	0003      	movs	r3, r0
}
   12718:	0018      	movs	r0, r3
   1271a:	46bd      	mov	sp, r7
   1271c:	b001      	add	sp, #4
   1271e:	bd90      	pop	{r4, r7, pc}
   12720:	000061a8 	.word	0x000061a8
   12724:	0002980c 	.word	0x0002980c
   12728:	000298d0 	.word	0x000298d0
   1272c:	000123ed 	.word	0x000123ed

00012730 <gsm_store_active_profile>:

enum gsm_error gsm_store_active_profile(void)
{
   12730:	b590      	push	{r4, r7, lr}
   12732:	b083      	sub	sp, #12
   12734:	af02      	add	r7, sp, #8
	return gsm_send_at_command((const char*)("AT&W\r"), (const char*)RESPONS_OK,5000,0, NULL);
   12736:	4a06      	ldr	r2, [pc, #24]	; (12750 <gsm_store_active_profile+0x20>)
   12738:	4906      	ldr	r1, [pc, #24]	; (12754 <gsm_store_active_profile+0x24>)
   1273a:	4807      	ldr	r0, [pc, #28]	; (12758 <gsm_store_active_profile+0x28>)
   1273c:	2300      	movs	r3, #0
   1273e:	9300      	str	r3, [sp, #0]
   12740:	2300      	movs	r3, #0
   12742:	4c06      	ldr	r4, [pc, #24]	; (1275c <gsm_store_active_profile+0x2c>)
   12744:	47a0      	blx	r4
   12746:	0003      	movs	r3, r0
}
   12748:	0018      	movs	r0, r3
   1274a:	46bd      	mov	sp, r7
   1274c:	b001      	add	sp, #4
   1274e:	bd90      	pop	{r4, r7, pc}
   12750:	00001388 	.word	0x00001388
   12754:	0002980c 	.word	0x0002980c
   12758:	000298e4 	.word	0x000298e4
   1275c:	000123ed 	.word	0x000123ed

00012760 <gsm_enable_calling_line_identification>:


enum gsm_error gsm_enable_calling_line_identification(void)
{
   12760:	b590      	push	{r4, r7, lr}
   12762:	b083      	sub	sp, #12
   12764:	af02      	add	r7, sp, #8
	return gsm_send_at_command((const char*)("AT+CLIP=1\r"), (const char*)RESPONS_OK,15000,0, NULL);
   12766:	4a06      	ldr	r2, [pc, #24]	; (12780 <gsm_enable_calling_line_identification+0x20>)
   12768:	4906      	ldr	r1, [pc, #24]	; (12784 <gsm_enable_calling_line_identification+0x24>)
   1276a:	4807      	ldr	r0, [pc, #28]	; (12788 <gsm_enable_calling_line_identification+0x28>)
   1276c:	2300      	movs	r3, #0
   1276e:	9300      	str	r3, [sp, #0]
   12770:	2300      	movs	r3, #0
   12772:	4c06      	ldr	r4, [pc, #24]	; (1278c <gsm_enable_calling_line_identification+0x2c>)
   12774:	47a0      	blx	r4
   12776:	0003      	movs	r3, r0
}
   12778:	0018      	movs	r0, r3
   1277a:	46bd      	mov	sp, r7
   1277c:	b001      	add	sp, #4
   1277e:	bd90      	pop	{r4, r7, pc}
   12780:	00003a98 	.word	0x00003a98
   12784:	0002980c 	.word	0x0002980c
   12788:	000298ec 	.word	0x000298ec
   1278c:	000123ed 	.word	0x000123ed

00012790 <gsm_enable_connected_line_identification_presentation>:

enum gsm_error gsm_enable_connected_line_identification_presentation(void)
{
   12790:	b590      	push	{r4, r7, lr}
   12792:	b083      	sub	sp, #12
   12794:	af02      	add	r7, sp, #8
	return gsm_send_at_command((const char*)("AT+COLP=1\r"), (const char*)RESPONS_OK,5000,0, NULL);
   12796:	4a06      	ldr	r2, [pc, #24]	; (127b0 <gsm_enable_connected_line_identification_presentation+0x20>)
   12798:	4906      	ldr	r1, [pc, #24]	; (127b4 <gsm_enable_connected_line_identification_presentation+0x24>)
   1279a:	4807      	ldr	r0, [pc, #28]	; (127b8 <gsm_enable_connected_line_identification_presentation+0x28>)
   1279c:	2300      	movs	r3, #0
   1279e:	9300      	str	r3, [sp, #0]
   127a0:	2300      	movs	r3, #0
   127a2:	4c06      	ldr	r4, [pc, #24]	; (127bc <gsm_enable_connected_line_identification_presentation+0x2c>)
   127a4:	47a0      	blx	r4
   127a6:	0003      	movs	r3, r0
}
   127a8:	0018      	movs	r0, r3
   127aa:	46bd      	mov	sp, r7
   127ac:	b001      	add	sp, #4
   127ae:	bd90      	pop	{r4, r7, pc}
   127b0:	00001388 	.word	0x00001388
   127b4:	0002980c 	.word	0x0002980c
   127b8:	000298f8 	.word	0x000298f8
   127bc:	000123ed 	.word	0x000123ed

000127c0 <gsm_enable_sleep_mode>:


//The +CSCLK value can not be reset by AT&F or ATZ command.
enum gsm_error gsm_enable_sleep_mode(void)
{
   127c0:	b590      	push	{r4, r7, lr}
   127c2:	b083      	sub	sp, #12
   127c4:	af02      	add	r7, sp, #8
	return gsm_send_at_command((const char*)("AT+CSCLK=1\r"), (const char*)RESPONS_OK,10000,0, NULL);
   127c6:	4a06      	ldr	r2, [pc, #24]	; (127e0 <gsm_enable_sleep_mode+0x20>)
   127c8:	4906      	ldr	r1, [pc, #24]	; (127e4 <gsm_enable_sleep_mode+0x24>)
   127ca:	4807      	ldr	r0, [pc, #28]	; (127e8 <gsm_enable_sleep_mode+0x28>)
   127cc:	2300      	movs	r3, #0
   127ce:	9300      	str	r3, [sp, #0]
   127d0:	2300      	movs	r3, #0
   127d2:	4c06      	ldr	r4, [pc, #24]	; (127ec <gsm_enable_sleep_mode+0x2c>)
   127d4:	47a0      	blx	r4
   127d6:	0003      	movs	r3, r0
}
   127d8:	0018      	movs	r0, r3
   127da:	46bd      	mov	sp, r7
   127dc:	b001      	add	sp, #4
   127de:	bd90      	pop	{r4, r7, pc}
   127e0:	00002710 	.word	0x00002710
   127e4:	0002980c 	.word	0x0002980c
   127e8:	00029904 	.word	0x00029904
   127ec:	000123ed 	.word	0x000123ed

000127f0 <gsm_enable_list_current_calls_of_ME>:
	}
}


enum gsm_error gsm_enable_list_current_calls_of_ME(void)
{
   127f0:	b590      	push	{r4, r7, lr}
   127f2:	b083      	sub	sp, #12
   127f4:	af02      	add	r7, sp, #8
	return gsm_send_at_command((const char*)("AT+CLCC=1\r"), (const char*)RESPONS_OK,5000,0, NULL);
   127f6:	4a06      	ldr	r2, [pc, #24]	; (12810 <gsm_enable_list_current_calls_of_ME+0x20>)
   127f8:	4906      	ldr	r1, [pc, #24]	; (12814 <gsm_enable_list_current_calls_of_ME+0x24>)
   127fa:	4807      	ldr	r0, [pc, #28]	; (12818 <gsm_enable_list_current_calls_of_ME+0x28>)
   127fc:	2300      	movs	r3, #0
   127fe:	9300      	str	r3, [sp, #0]
   12800:	2300      	movs	r3, #0
   12802:	4c06      	ldr	r4, [pc, #24]	; (1281c <gsm_enable_list_current_calls_of_ME+0x2c>)
   12804:	47a0      	blx	r4
   12806:	0003      	movs	r3, r0
}
   12808:	0018      	movs	r0, r3
   1280a:	46bd      	mov	sp, r7
   1280c:	b001      	add	sp, #4
   1280e:	bd90      	pop	{r4, r7, pc}
   12810:	00001388 	.word	0x00001388
   12814:	0002980c 	.word	0x0002980c
   12818:	0002992c 	.word	0x0002992c
   1281c:	000123ed 	.word	0x000123ed

00012820 <gsm_factory_reset>:

enum gsm_error gsm_factory_reset(void)
{
   12820:	b590      	push	{r4, r7, lr}
   12822:	b083      	sub	sp, #12
   12824:	af02      	add	r7, sp, #8
	return gsm_send_at_command((const char*)("AT&F\r"), (const char*)RESPONS_OK,15000,0, NULL);
   12826:	4a06      	ldr	r2, [pc, #24]	; (12840 <gsm_factory_reset+0x20>)
   12828:	4906      	ldr	r1, [pc, #24]	; (12844 <gsm_factory_reset+0x24>)
   1282a:	4807      	ldr	r0, [pc, #28]	; (12848 <gsm_factory_reset+0x28>)
   1282c:	2300      	movs	r3, #0
   1282e:	9300      	str	r3, [sp, #0]
   12830:	2300      	movs	r3, #0
   12832:	4c06      	ldr	r4, [pc, #24]	; (1284c <gsm_factory_reset+0x2c>)
   12834:	47a0      	blx	r4
   12836:	0003      	movs	r3, r0
}
   12838:	0018      	movs	r0, r3
   1283a:	46bd      	mov	sp, r7
   1283c:	b001      	add	sp, #4
   1283e:	bd90      	pop	{r4, r7, pc}
   12840:	00003a98 	.word	0x00003a98
   12844:	0002980c 	.word	0x0002980c
   12848:	00029938 	.word	0x00029938
   1284c:	000123ed 	.word	0x000123ed

00012850 <gsm_echo_off>:

enum gsm_error gsm_echo_off(void)
{
   12850:	b590      	push	{r4, r7, lr}
   12852:	b083      	sub	sp, #12
   12854:	af02      	add	r7, sp, #8
	return gsm_send_at_command((const char*)("ATE0\r"), (const char*)RESPONS_OK,5000,0, NULL);
   12856:	4a06      	ldr	r2, [pc, #24]	; (12870 <gsm_echo_off+0x20>)
   12858:	4906      	ldr	r1, [pc, #24]	; (12874 <gsm_echo_off+0x24>)
   1285a:	4807      	ldr	r0, [pc, #28]	; (12878 <gsm_echo_off+0x28>)
   1285c:	2300      	movs	r3, #0
   1285e:	9300      	str	r3, [sp, #0]
   12860:	2300      	movs	r3, #0
   12862:	4c06      	ldr	r4, [pc, #24]	; (1287c <gsm_echo_off+0x2c>)
   12864:	47a0      	blx	r4
   12866:	0003      	movs	r3, r0
}
   12868:	0018      	movs	r0, r3
   1286a:	46bd      	mov	sp, r7
   1286c:	b001      	add	sp, #4
   1286e:	bd90      	pop	{r4, r7, pc}
   12870:	00001388 	.word	0x00001388
   12874:	0002980c 	.word	0x0002980c
   12878:	00029940 	.word	0x00029940
   1287c:	000123ed 	.word	0x000123ed

00012880 <gsm_select_sms_message_formate_text_mode>:

enum gsm_error gsm_select_sms_message_formate_text_mode(void) //PDU:0,TEXT:1
{
   12880:	b590      	push	{r4, r7, lr}
   12882:	b083      	sub	sp, #12
   12884:	af02      	add	r7, sp, #8
	return gsm_send_at_command((const char*)("AT+CMGF=1\r"), (const char*)RESPONS_OK,5000,0, NULL);
   12886:	4a06      	ldr	r2, [pc, #24]	; (128a0 <gsm_select_sms_message_formate_text_mode+0x20>)
   12888:	4906      	ldr	r1, [pc, #24]	; (128a4 <gsm_select_sms_message_formate_text_mode+0x24>)
   1288a:	4807      	ldr	r0, [pc, #28]	; (128a8 <gsm_select_sms_message_formate_text_mode+0x28>)
   1288c:	2300      	movs	r3, #0
   1288e:	9300      	str	r3, [sp, #0]
   12890:	2300      	movs	r3, #0
   12892:	4c06      	ldr	r4, [pc, #24]	; (128ac <gsm_select_sms_message_formate_text_mode+0x2c>)
   12894:	47a0      	blx	r4
   12896:	0003      	movs	r3, r0
}
   12898:	0018      	movs	r0, r3
   1289a:	46bd      	mov	sp, r7
   1289c:	b001      	add	sp, #4
   1289e:	bd90      	pop	{r4, r7, pc}
   128a0:	00001388 	.word	0x00001388
   128a4:	0002980c 	.word	0x0002980c
   128a8:	00029948 	.word	0x00029948
   128ac:	000123ed 	.word	0x000123ed

000128b0 <gsm_set_sms_text_mode_parameter>:

enum gsm_error gsm_set_sms_text_mode_parameter(void)
{
   128b0:	b590      	push	{r4, r7, lr}
   128b2:	b083      	sub	sp, #12
   128b4:	af02      	add	r7, sp, #8
	return gsm_send_at_command((const char*)("AT+CSMP=17,167,0,0\r"), (const char*)RESPONS_OK,7000,0, NULL);
   128b6:	4a06      	ldr	r2, [pc, #24]	; (128d0 <gsm_set_sms_text_mode_parameter+0x20>)
   128b8:	4906      	ldr	r1, [pc, #24]	; (128d4 <gsm_set_sms_text_mode_parameter+0x24>)
   128ba:	4807      	ldr	r0, [pc, #28]	; (128d8 <gsm_set_sms_text_mode_parameter+0x28>)
   128bc:	2300      	movs	r3, #0
   128be:	9300      	str	r3, [sp, #0]
   128c0:	2300      	movs	r3, #0
   128c2:	4c06      	ldr	r4, [pc, #24]	; (128dc <gsm_set_sms_text_mode_parameter+0x2c>)
   128c4:	47a0      	blx	r4
   128c6:	0003      	movs	r3, r0
}
   128c8:	0018      	movs	r0, r3
   128ca:	46bd      	mov	sp, r7
   128cc:	b001      	add	sp, #4
   128ce:	bd90      	pop	{r4, r7, pc}
   128d0:	00001b58 	.word	0x00001b58
   128d4:	0002980c 	.word	0x0002980c
   128d8:	00029954 	.word	0x00029954
   128dc:	000123ed 	.word	0x000123ed

000128e0 <gsm_getsignalstrength>:
20--25   4
26--31   5

*/
uint8_t gsm_getsignalstrength(void)
{
   128e0:	b5b0      	push	{r4, r5, r7, lr}
   128e2:	b088      	sub	sp, #32
   128e4:	af02      	add	r7, sp, #8
	
	uint8_t sig_strength;
	
	const uint8_t MAX_BUFFER = 100;
   128e6:	2316      	movs	r3, #22
   128e8:	18fb      	adds	r3, r7, r3
   128ea:	2264      	movs	r2, #100	; 0x64
   128ec:	701a      	strb	r2, [r3, #0]
	char *cmdx = (char*) calloc(MAX_BUFFER,sizeof(char));
   128ee:	2316      	movs	r3, #22
   128f0:	18fb      	adds	r3, r7, r3
   128f2:	781b      	ldrb	r3, [r3, #0]
   128f4:	2101      	movs	r1, #1
   128f6:	0018      	movs	r0, r3
   128f8:	4b62      	ldr	r3, [pc, #392]	; (12a84 <gsm_getsignalstrength+0x1a4>)
   128fa:	4798      	blx	r3
   128fc:	0003      	movs	r3, r0
   128fe:	613b      	str	r3, [r7, #16]
	if (cmdx == NULL)
   12900:	693b      	ldr	r3, [r7, #16]
   12902:	2b00      	cmp	r3, #0
   12904:	d105      	bne.n	12912 <gsm_getsignalstrength+0x32>
	{
		free(cmdx);
   12906:	693b      	ldr	r3, [r7, #16]
   12908:	0018      	movs	r0, r3
   1290a:	4b5f      	ldr	r3, [pc, #380]	; (12a88 <gsm_getsignalstrength+0x1a8>)
   1290c:	4798      	blx	r3
		return 0;
   1290e:	2300      	movs	r3, #0
   12910:	e0b4      	b.n	12a7c <gsm_getsignalstrength+0x19c>
	}
	memset(cmdx, '\0', MAX_BUFFER);
   12912:	2316      	movs	r3, #22
   12914:	18fb      	adds	r3, r7, r3
   12916:	781a      	ldrb	r2, [r3, #0]
   12918:	693b      	ldr	r3, [r7, #16]
   1291a:	2100      	movs	r1, #0
   1291c:	0018      	movs	r0, r3
   1291e:	4b5b      	ldr	r3, [pc, #364]	; (12a8c <gsm_getsignalstrength+0x1ac>)
   12920:	4798      	blx	r3
	enum gsm_error gsm_err =  gsm_send_at_command((const char*)("AT+CSQ\r"), (const char*)RESPONS_OK,5000,MAX_BUFFER,cmdx);
   12922:	230f      	movs	r3, #15
   12924:	18fc      	adds	r4, r7, r3
   12926:	2316      	movs	r3, #22
   12928:	18fb      	adds	r3, r7, r3
   1292a:	781a      	ldrb	r2, [r3, #0]
   1292c:	4d58      	ldr	r5, [pc, #352]	; (12a90 <gsm_getsignalstrength+0x1b0>)
   1292e:	4959      	ldr	r1, [pc, #356]	; (12a94 <gsm_getsignalstrength+0x1b4>)
   12930:	4859      	ldr	r0, [pc, #356]	; (12a98 <gsm_getsignalstrength+0x1b8>)
   12932:	693b      	ldr	r3, [r7, #16]
   12934:	9300      	str	r3, [sp, #0]
   12936:	0013      	movs	r3, r2
   12938:	002a      	movs	r2, r5
   1293a:	4d58      	ldr	r5, [pc, #352]	; (12a9c <gsm_getsignalstrength+0x1bc>)
   1293c:	47a8      	blx	r5
   1293e:	0003      	movs	r3, r0
   12940:	7023      	strb	r3, [r4, #0]
	
	if(gsm_err == GSM_ERROR_NONE)
   12942:	230f      	movs	r3, #15
   12944:	18fb      	adds	r3, r7, r3
   12946:	781b      	ldrb	r3, [r3, #0]
   12948:	2b00      	cmp	r3, #0
   1294a:	d000      	beq.n	1294e <gsm_getsignalstrength+0x6e>
   1294c:	e08b      	b.n	12a66 <gsm_getsignalstrength+0x186>
	{
		if(strstr(cmdx,"+CSQ:"))
   1294e:	4a54      	ldr	r2, [pc, #336]	; (12aa0 <gsm_getsignalstrength+0x1c0>)
   12950:	693b      	ldr	r3, [r7, #16]
   12952:	0011      	movs	r1, r2
   12954:	0018      	movs	r0, r3
   12956:	4b53      	ldr	r3, [pc, #332]	; (12aa4 <gsm_getsignalstrength+0x1c4>)
   12958:	4798      	blx	r3
   1295a:	1e03      	subs	r3, r0, #0
   1295c:	d100      	bne.n	12960 <gsm_getsignalstrength+0x80>
   1295e:	e086      	b.n	12a6e <gsm_getsignalstrength+0x18e>
		{
			if (strstr(cmdx,"99")==NULL)
   12960:	4a51      	ldr	r2, [pc, #324]	; (12aa8 <gsm_getsignalstrength+0x1c8>)
   12962:	693b      	ldr	r3, [r7, #16]
   12964:	0011      	movs	r1, r2
   12966:	0018      	movs	r0, r3
   12968:	4b4e      	ldr	r3, [pc, #312]	; (12aa4 <gsm_getsignalstrength+0x1c4>)
   1296a:	4798      	blx	r3
   1296c:	1e03      	subs	r3, r0, #0
   1296e:	d000      	beq.n	12972 <gsm_getsignalstrength+0x92>
   12970:	e074      	b.n	12a5c <gsm_getsignalstrength+0x17c>
			{
				char *ptr_tocken;
				ptr_tocken = strtok(cmdx,":");
   12972:	4a4e      	ldr	r2, [pc, #312]	; (12aac <gsm_getsignalstrength+0x1cc>)
   12974:	693b      	ldr	r3, [r7, #16]
   12976:	0011      	movs	r1, r2
   12978:	0018      	movs	r0, r3
   1297a:	4b4d      	ldr	r3, [pc, #308]	; (12ab0 <gsm_getsignalstrength+0x1d0>)
   1297c:	4798      	blx	r3
   1297e:	0003      	movs	r3, r0
   12980:	60bb      	str	r3, [r7, #8]
				ptr_tocken = strtok(NULL,":");
   12982:	4b4a      	ldr	r3, [pc, #296]	; (12aac <gsm_getsignalstrength+0x1cc>)
   12984:	0019      	movs	r1, r3
   12986:	2000      	movs	r0, #0
   12988:	4b49      	ldr	r3, [pc, #292]	; (12ab0 <gsm_getsignalstrength+0x1d0>)
   1298a:	4798      	blx	r3
   1298c:	0003      	movs	r3, r0
   1298e:	60bb      	str	r3, [r7, #8]
				ptr_tocken = strtok(ptr_tocken,",");
   12990:	4a48      	ldr	r2, [pc, #288]	; (12ab4 <gsm_getsignalstrength+0x1d4>)
   12992:	68bb      	ldr	r3, [r7, #8]
   12994:	0011      	movs	r1, r2
   12996:	0018      	movs	r0, r3
   12998:	4b45      	ldr	r3, [pc, #276]	; (12ab0 <gsm_getsignalstrength+0x1d0>)
   1299a:	4798      	blx	r3
   1299c:	0003      	movs	r3, r0
   1299e:	60bb      	str	r3, [r7, #8]
				//RemoveSpaces(ptr_tocken);
				uint8_t nw = atoi(ptr_tocken);
   129a0:	68bb      	ldr	r3, [r7, #8]
   129a2:	0018      	movs	r0, r3
   129a4:	4b44      	ldr	r3, [pc, #272]	; (12ab8 <gsm_getsignalstrength+0x1d8>)
   129a6:	4798      	blx	r3
   129a8:	0002      	movs	r2, r0
   129aa:	1dfb      	adds	r3, r7, #7
   129ac:	701a      	strb	r2, [r3, #0]
				if (nw==0 || nw==1 || nw== 99)
   129ae:	1dfb      	adds	r3, r7, #7
   129b0:	781b      	ldrb	r3, [r3, #0]
   129b2:	2b00      	cmp	r3, #0
   129b4:	d007      	beq.n	129c6 <gsm_getsignalstrength+0xe6>
   129b6:	1dfb      	adds	r3, r7, #7
   129b8:	781b      	ldrb	r3, [r3, #0]
   129ba:	2b01      	cmp	r3, #1
   129bc:	d003      	beq.n	129c6 <gsm_getsignalstrength+0xe6>
   129be:	1dfb      	adds	r3, r7, #7
   129c0:	781b      	ldrb	r3, [r3, #0]
   129c2:	2b63      	cmp	r3, #99	; 0x63
   129c4:	d104      	bne.n	129d0 <gsm_getsignalstrength+0xf0>
				{
					sig_strength = 0;
   129c6:	2317      	movs	r3, #23
   129c8:	18fb      	adds	r3, r7, r3
   129ca:	2200      	movs	r2, #0
   129cc:	701a      	strb	r2, [r3, #0]
   129ce:	e04e      	b.n	12a6e <gsm_getsignalstrength+0x18e>
				}
				else
				{
					if (nw>=2 && nw<=7)
   129d0:	1dfb      	adds	r3, r7, #7
   129d2:	781b      	ldrb	r3, [r3, #0]
   129d4:	2b01      	cmp	r3, #1
   129d6:	d908      	bls.n	129ea <gsm_getsignalstrength+0x10a>
   129d8:	1dfb      	adds	r3, r7, #7
   129da:	781b      	ldrb	r3, [r3, #0]
   129dc:	2b07      	cmp	r3, #7
   129de:	d804      	bhi.n	129ea <gsm_getsignalstrength+0x10a>
					{
						sig_strength = 1;
   129e0:	2317      	movs	r3, #23
   129e2:	18fb      	adds	r3, r7, r3
   129e4:	2201      	movs	r2, #1
   129e6:	701a      	strb	r2, [r3, #0]
   129e8:	e041      	b.n	12a6e <gsm_getsignalstrength+0x18e>
					}
					else if (nw>=8 && nw<=13)
   129ea:	1dfb      	adds	r3, r7, #7
   129ec:	781b      	ldrb	r3, [r3, #0]
   129ee:	2b07      	cmp	r3, #7
   129f0:	d908      	bls.n	12a04 <gsm_getsignalstrength+0x124>
   129f2:	1dfb      	adds	r3, r7, #7
   129f4:	781b      	ldrb	r3, [r3, #0]
   129f6:	2b0d      	cmp	r3, #13
   129f8:	d804      	bhi.n	12a04 <gsm_getsignalstrength+0x124>
					{
						sig_strength = 2;
   129fa:	2317      	movs	r3, #23
   129fc:	18fb      	adds	r3, r7, r3
   129fe:	2202      	movs	r2, #2
   12a00:	701a      	strb	r2, [r3, #0]
   12a02:	e034      	b.n	12a6e <gsm_getsignalstrength+0x18e>
					}
					else if (nw>=14 && nw<=19)
   12a04:	1dfb      	adds	r3, r7, #7
   12a06:	781b      	ldrb	r3, [r3, #0]
   12a08:	2b0d      	cmp	r3, #13
   12a0a:	d908      	bls.n	12a1e <gsm_getsignalstrength+0x13e>
   12a0c:	1dfb      	adds	r3, r7, #7
   12a0e:	781b      	ldrb	r3, [r3, #0]
   12a10:	2b13      	cmp	r3, #19
   12a12:	d804      	bhi.n	12a1e <gsm_getsignalstrength+0x13e>
					{
						sig_strength = 3;
   12a14:	2317      	movs	r3, #23
   12a16:	18fb      	adds	r3, r7, r3
   12a18:	2203      	movs	r2, #3
   12a1a:	701a      	strb	r2, [r3, #0]
   12a1c:	e027      	b.n	12a6e <gsm_getsignalstrength+0x18e>
					}
					else if (nw>=20 && nw<=25)
   12a1e:	1dfb      	adds	r3, r7, #7
   12a20:	781b      	ldrb	r3, [r3, #0]
   12a22:	2b13      	cmp	r3, #19
   12a24:	d908      	bls.n	12a38 <gsm_getsignalstrength+0x158>
   12a26:	1dfb      	adds	r3, r7, #7
   12a28:	781b      	ldrb	r3, [r3, #0]
   12a2a:	2b19      	cmp	r3, #25
   12a2c:	d804      	bhi.n	12a38 <gsm_getsignalstrength+0x158>
					{
						sig_strength = 4;
   12a2e:	2317      	movs	r3, #23
   12a30:	18fb      	adds	r3, r7, r3
   12a32:	2204      	movs	r2, #4
   12a34:	701a      	strb	r2, [r3, #0]
   12a36:	e01a      	b.n	12a6e <gsm_getsignalstrength+0x18e>
					}
					else if (nw>=26 && nw<=31)
   12a38:	1dfb      	adds	r3, r7, #7
   12a3a:	781b      	ldrb	r3, [r3, #0]
   12a3c:	2b19      	cmp	r3, #25
   12a3e:	d908      	bls.n	12a52 <gsm_getsignalstrength+0x172>
   12a40:	1dfb      	adds	r3, r7, #7
   12a42:	781b      	ldrb	r3, [r3, #0]
   12a44:	2b1f      	cmp	r3, #31
   12a46:	d804      	bhi.n	12a52 <gsm_getsignalstrength+0x172>
					{
						sig_strength = 5;
   12a48:	2317      	movs	r3, #23
   12a4a:	18fb      	adds	r3, r7, r3
   12a4c:	2205      	movs	r2, #5
   12a4e:	701a      	strb	r2, [r3, #0]
   12a50:	e00d      	b.n	12a6e <gsm_getsignalstrength+0x18e>
					}
					else
					{
						sig_strength = 0;
   12a52:	2317      	movs	r3, #23
   12a54:	18fb      	adds	r3, r7, r3
   12a56:	2200      	movs	r2, #0
   12a58:	701a      	strb	r2, [r3, #0]
   12a5a:	e008      	b.n	12a6e <gsm_getsignalstrength+0x18e>
					}
				}
			}
			else
			{
				sig_strength = 0;
   12a5c:	2317      	movs	r3, #23
   12a5e:	18fb      	adds	r3, r7, r3
   12a60:	2200      	movs	r2, #0
   12a62:	701a      	strb	r2, [r3, #0]
   12a64:	e003      	b.n	12a6e <gsm_getsignalstrength+0x18e>
			}
		}
	}
	else
	{
		sig_strength = 0;
   12a66:	2317      	movs	r3, #23
   12a68:	18fb      	adds	r3, r7, r3
   12a6a:	2200      	movs	r2, #0
   12a6c:	701a      	strb	r2, [r3, #0]
	}
	
	free(cmdx);
   12a6e:	693b      	ldr	r3, [r7, #16]
   12a70:	0018      	movs	r0, r3
   12a72:	4b05      	ldr	r3, [pc, #20]	; (12a88 <gsm_getsignalstrength+0x1a8>)
   12a74:	4798      	blx	r3
	
	return sig_strength;
   12a76:	2317      	movs	r3, #23
   12a78:	18fb      	adds	r3, r7, r3
   12a7a:	781b      	ldrb	r3, [r3, #0]
}
   12a7c:	0018      	movs	r0, r3
   12a7e:	46bd      	mov	sp, r7
   12a80:	b006      	add	sp, #24
   12a82:	bdb0      	pop	{r4, r5, r7, pc}
   12a84:	00028a49 	.word	0x00028a49
   12a88:	00028ae9 	.word	0x00028ae9
   12a8c:	00028b57 	.word	0x00028b57
   12a90:	00001388 	.word	0x00001388
   12a94:	0002980c 	.word	0x0002980c
   12a98:	00029980 	.word	0x00029980
   12a9c:	000123ed 	.word	0x000123ed
   12aa0:	00029988 	.word	0x00029988
   12aa4:	00028e17 	.word	0x00028e17
   12aa8:	00029990 	.word	0x00029990
   12aac:	00029924 	.word	0x00029924
   12ab0:	00028e49 	.word	0x00028e49
   12ab4:	00029928 	.word	0x00029928
   12ab8:	00028a3d 	.word	0x00028a3d

00012abc <RemoveSpaces>:

void RemoveSpaces(char* source)
{
   12abc:	b580      	push	{r7, lr}
   12abe:	b084      	sub	sp, #16
   12ac0:	af00      	add	r7, sp, #0
   12ac2:	6078      	str	r0, [r7, #4]
	char* i = source;
   12ac4:	687b      	ldr	r3, [r7, #4]
   12ac6:	60fb      	str	r3, [r7, #12]
	char* j = source;
   12ac8:	687b      	ldr	r3, [r7, #4]
   12aca:	60bb      	str	r3, [r7, #8]
	while(*j != 0)
   12acc:	e00c      	b.n	12ae8 <RemoveSpaces+0x2c>
	{
		*i = *j++;
   12ace:	68bb      	ldr	r3, [r7, #8]
   12ad0:	1c5a      	adds	r2, r3, #1
   12ad2:	60ba      	str	r2, [r7, #8]
   12ad4:	781a      	ldrb	r2, [r3, #0]
   12ad6:	68fb      	ldr	r3, [r7, #12]
   12ad8:	701a      	strb	r2, [r3, #0]
		if(*i != ' ')
   12ada:	68fb      	ldr	r3, [r7, #12]
   12adc:	781b      	ldrb	r3, [r3, #0]
   12ade:	2b20      	cmp	r3, #32
   12ae0:	d002      	beq.n	12ae8 <RemoveSpaces+0x2c>
		i++;
   12ae2:	68fb      	ldr	r3, [r7, #12]
   12ae4:	3301      	adds	r3, #1
   12ae6:	60fb      	str	r3, [r7, #12]
	while(*j != 0)
   12ae8:	68bb      	ldr	r3, [r7, #8]
   12aea:	781b      	ldrb	r3, [r3, #0]
   12aec:	2b00      	cmp	r3, #0
   12aee:	d1ee      	bne.n	12ace <RemoveSpaces+0x12>
	}
	*i = 0;
   12af0:	68fb      	ldr	r3, [r7, #12]
   12af2:	2200      	movs	r2, #0
   12af4:	701a      	strb	r2, [r3, #0]
}
   12af6:	46c0      	nop			; (mov r8, r8)
   12af8:	46bd      	mov	sp, r7
   12afa:	b004      	add	sp, #16
   12afc:	bd80      	pop	{r7, pc}
	...

00012b00 <gsm_enable_new_sms_message_indications>:
{
	return gsm_send_at_command((const char*)("AT&F\r"), (const char*)RESPONS_OK,10000,0,NULL);
}

enum gsm_error gsm_enable_new_sms_message_indications(void)
{
   12b00:	b590      	push	{r4, r7, lr}
   12b02:	b083      	sub	sp, #12
   12b04:	af02      	add	r7, sp, #8
	return gsm_send_at_command((const char*)("AT+CNMI=2,1,0,0,0\r"), (const char*)RESPONS_OK,5000,0,NULL);
   12b06:	4a06      	ldr	r2, [pc, #24]	; (12b20 <gsm_enable_new_sms_message_indications+0x20>)
   12b08:	4906      	ldr	r1, [pc, #24]	; (12b24 <gsm_enable_new_sms_message_indications+0x24>)
   12b0a:	4807      	ldr	r0, [pc, #28]	; (12b28 <gsm_enable_new_sms_message_indications+0x28>)
   12b0c:	2300      	movs	r3, #0
   12b0e:	9300      	str	r3, [sp, #0]
   12b10:	2300      	movs	r3, #0
   12b12:	4c06      	ldr	r4, [pc, #24]	; (12b2c <gsm_enable_new_sms_message_indications+0x2c>)
   12b14:	47a0      	blx	r4
   12b16:	0003      	movs	r3, r0
}
   12b18:	0018      	movs	r0, r3
   12b1a:	46bd      	mov	sp, r7
   12b1c:	b001      	add	sp, #4
   12b1e:	bd90      	pop	{r4, r7, pc}
   12b20:	00001388 	.word	0x00001388
   12b24:	0002980c 	.word	0x0002980c
   12b28:	00029994 	.word	0x00029994
   12b2c:	000123ed 	.word	0x000123ed

00012b30 <gsm_enable_csqn_urc>:
{
	return gsm_send_at_command((const char*)("AT+CNMI=1,0,0,0,0\r"), (const char*)RESPONS_OK,5000,0,NULL);
}

enum gsm_error gsm_enable_csqn_urc(void)
{
   12b30:	b590      	push	{r4, r7, lr}
   12b32:	b083      	sub	sp, #12
   12b34:	af02      	add	r7, sp, #8
	return gsm_send_at_command((const char*)("AT+EXUNSOL=\"SQ\",1\r"), (const char*)RESPONS_OK,1000,0,NULL);
   12b36:	23fa      	movs	r3, #250	; 0xfa
   12b38:	009a      	lsls	r2, r3, #2
   12b3a:	4906      	ldr	r1, [pc, #24]	; (12b54 <gsm_enable_csqn_urc+0x24>)
   12b3c:	4806      	ldr	r0, [pc, #24]	; (12b58 <gsm_enable_csqn_urc+0x28>)
   12b3e:	2300      	movs	r3, #0
   12b40:	9300      	str	r3, [sp, #0]
   12b42:	2300      	movs	r3, #0
   12b44:	4c05      	ldr	r4, [pc, #20]	; (12b5c <gsm_enable_csqn_urc+0x2c>)
   12b46:	47a0      	blx	r4
   12b48:	0003      	movs	r3, r0
}
   12b4a:	0018      	movs	r0, r3
   12b4c:	46bd      	mov	sp, r7
   12b4e:	b001      	add	sp, #4
   12b50:	bd90      	pop	{r4, r7, pc}
   12b52:	46c0      	nop			; (mov r8, r8)
   12b54:	0002980c 	.word	0x0002980c
   12b58:	000299bc 	.word	0x000299bc
   12b5c:	000123ed 	.word	0x000123ed

00012b60 <gsm_disable_csqn_urc>:

enum gsm_error gsm_disable_csqn_urc(void)
{
   12b60:	b590      	push	{r4, r7, lr}
   12b62:	b083      	sub	sp, #12
   12b64:	af02      	add	r7, sp, #8
	return gsm_send_at_command((const char*)("AT+EXUNSOL=\"SQ\",0\r"), (const char*)RESPONS_OK,1000,0,NULL);
   12b66:	23fa      	movs	r3, #250	; 0xfa
   12b68:	009a      	lsls	r2, r3, #2
   12b6a:	4906      	ldr	r1, [pc, #24]	; (12b84 <gsm_disable_csqn_urc+0x24>)
   12b6c:	4806      	ldr	r0, [pc, #24]	; (12b88 <gsm_disable_csqn_urc+0x28>)
   12b6e:	2300      	movs	r3, #0
   12b70:	9300      	str	r3, [sp, #0]
   12b72:	2300      	movs	r3, #0
   12b74:	4c05      	ldr	r4, [pc, #20]	; (12b8c <gsm_disable_csqn_urc+0x2c>)
   12b76:	47a0      	blx	r4
   12b78:	0003      	movs	r3, r0
}
   12b7a:	0018      	movs	r0, r3
   12b7c:	46bd      	mov	sp, r7
   12b7e:	b001      	add	sp, #4
   12b80:	bd90      	pop	{r4, r7, pc}
   12b82:	46c0      	nop			; (mov r8, r8)
   12b84:	0002980c 	.word	0x0002980c
   12b88:	000299d0 	.word	0x000299d0
   12b8c:	000123ed 	.word	0x000123ed

00012b90 <gsm_send_sms>:


enum gsm_error gsm_send_sms(const char *phone_number, const char *message)
{
   12b90:	b5b0      	push	{r4, r5, r7, lr}
   12b92:	b088      	sub	sp, #32
   12b94:	af02      	add	r7, sp, #8
   12b96:	6078      	str	r0, [r7, #4]
   12b98:	6039      	str	r1, [r7, #0]
	/* Double-check the message length is acceptable (160 byte max payload) */
	if (strlen(message) > 250)
   12b9a:	683b      	ldr	r3, [r7, #0]
   12b9c:	0018      	movs	r0, r3
   12b9e:	4b3b      	ldr	r3, [pc, #236]	; (12c8c <gsm_send_sms+0xfc>)
   12ba0:	4798      	blx	r3
   12ba2:	0003      	movs	r3, r0
   12ba4:	2bfa      	cmp	r3, #250	; 0xfa
   12ba6:	d901      	bls.n	12bac <gsm_send_sms+0x1c>
	{
		return GSM_ERROR_MESSAGE_LENGTH;
   12ba8:	2303      	movs	r3, #3
   12baa:	e06b      	b.n	12c84 <gsm_send_sms+0xf4>
	}
	/* Double-check the recipient phone number length */
	if (strlen(phone_number) < 6)
   12bac:	687b      	ldr	r3, [r7, #4]
   12bae:	0018      	movs	r0, r3
   12bb0:	4b36      	ldr	r3, [pc, #216]	; (12c8c <gsm_send_sms+0xfc>)
   12bb2:	4798      	blx	r3
   12bb4:	0003      	movs	r3, r0
   12bb6:	2b05      	cmp	r3, #5
   12bb8:	d801      	bhi.n	12bbe <gsm_send_sms+0x2e>
	{
		return GSM_ERROR_PHONE_NUMBER_LENGTH;
   12bba:	2304      	movs	r3, #4
   12bbc:	e062      	b.n	12c84 <gsm_send_sms+0xf4>
	}
	
	enum gsm_error err;
	const uint8_t MAX_BUFFER = 250;
   12bbe:	2317      	movs	r3, #23
   12bc0:	18fb      	adds	r3, r7, r3
   12bc2:	22fa      	movs	r2, #250	; 0xfa
   12bc4:	701a      	strb	r2, [r3, #0]
	char *cmdx = (char*) calloc(MAX_BUFFER,sizeof(char));
   12bc6:	2317      	movs	r3, #23
   12bc8:	18fb      	adds	r3, r7, r3
   12bca:	781b      	ldrb	r3, [r3, #0]
   12bcc:	2101      	movs	r1, #1
   12bce:	0018      	movs	r0, r3
   12bd0:	4b2f      	ldr	r3, [pc, #188]	; (12c90 <gsm_send_sms+0x100>)
   12bd2:	4798      	blx	r3
   12bd4:	0003      	movs	r3, r0
   12bd6:	613b      	str	r3, [r7, #16]
	//buffer created???
	if (cmdx == NULL)
   12bd8:	693b      	ldr	r3, [r7, #16]
   12bda:	2b00      	cmp	r3, #0
   12bdc:	d101      	bne.n	12be2 <gsm_send_sms+0x52>
	{
		return 0;
   12bde:	2300      	movs	r3, #0
   12be0:	e050      	b.n	12c84 <gsm_send_sms+0xf4>
	}
	memset(cmdx, '\0', MAX_BUFFER);
   12be2:	2317      	movs	r3, #23
   12be4:	18fb      	adds	r3, r7, r3
   12be6:	781a      	ldrb	r2, [r3, #0]
   12be8:	693b      	ldr	r3, [r7, #16]
   12bea:	2100      	movs	r1, #0
   12bec:	0018      	movs	r0, r3
   12bee:	4b29      	ldr	r3, [pc, #164]	; (12c94 <gsm_send_sms+0x104>)
   12bf0:	4798      	blx	r3
	snprintf((char*)cmdx, MAX_BUFFER, "AT+CMGS=\"%s\"\r", phone_number);
   12bf2:	2317      	movs	r3, #23
   12bf4:	18fb      	adds	r3, r7, r3
   12bf6:	7819      	ldrb	r1, [r3, #0]
   12bf8:	687b      	ldr	r3, [r7, #4]
   12bfa:	4a27      	ldr	r2, [pc, #156]	; (12c98 <gsm_send_sms+0x108>)
   12bfc:	6938      	ldr	r0, [r7, #16]
   12bfe:	4c27      	ldr	r4, [pc, #156]	; (12c9c <gsm_send_sms+0x10c>)
   12c00:	47a0      	blx	r4
	if (gsm_send_at_command((const char*)cmdx, (const char*)">",60000, 0, NULL)==GSM_ERROR_NONE)
   12c02:	4a27      	ldr	r2, [pc, #156]	; (12ca0 <gsm_send_sms+0x110>)
   12c04:	4927      	ldr	r1, [pc, #156]	; (12ca4 <gsm_send_sms+0x114>)
   12c06:	6938      	ldr	r0, [r7, #16]
   12c08:	2300      	movs	r3, #0
   12c0a:	9300      	str	r3, [sp, #0]
   12c0c:	2300      	movs	r3, #0
   12c0e:	4c26      	ldr	r4, [pc, #152]	; (12ca8 <gsm_send_sms+0x118>)
   12c10:	47a0      	blx	r4
   12c12:	1e03      	subs	r3, r0, #0
   12c14:	d131      	bne.n	12c7a <gsm_send_sms+0xea>
	{
		vTaskDelay(500/portTICK_PERIOD_MS);		//todo: check if sms is reaching time is reduced than 30 seconds, if yes, than keep this statement, else remove it.
   12c16:	23fa      	movs	r3, #250	; 0xfa
   12c18:	005b      	lsls	r3, r3, #1
   12c1a:	0018      	movs	r0, r3
   12c1c:	4b23      	ldr	r3, [pc, #140]	; (12cac <gsm_send_sms+0x11c>)
   12c1e:	4798      	blx	r3
		memset(cmdx, '\0', MAX_BUFFER);
   12c20:	2317      	movs	r3, #23
   12c22:	18fb      	adds	r3, r7, r3
   12c24:	781a      	ldrb	r2, [r3, #0]
   12c26:	693b      	ldr	r3, [r7, #16]
   12c28:	2100      	movs	r1, #0
   12c2a:	0018      	movs	r0, r3
   12c2c:	4b19      	ldr	r3, [pc, #100]	; (12c94 <gsm_send_sms+0x104>)
   12c2e:	4798      	blx	r3
		
		snprintf((char*)cmdx, MAX_BUFFER, "%s\x1A\x0D",message);
   12c30:	2317      	movs	r3, #23
   12c32:	18fb      	adds	r3, r7, r3
   12c34:	7819      	ldrb	r1, [r3, #0]
   12c36:	683b      	ldr	r3, [r7, #0]
   12c38:	4a1d      	ldr	r2, [pc, #116]	; (12cb0 <gsm_send_sms+0x120>)
   12c3a:	6938      	ldr	r0, [r7, #16]
   12c3c:	4c17      	ldr	r4, [pc, #92]	; (12c9c <gsm_send_sms+0x10c>)
   12c3e:	47a0      	blx	r4
		
		err = gsm_send_at_command((const char*)cmdx, (const char*)RESPONS_OK,60000, 0, NULL);
   12c40:	230f      	movs	r3, #15
   12c42:	18fc      	adds	r4, r7, r3
   12c44:	4a16      	ldr	r2, [pc, #88]	; (12ca0 <gsm_send_sms+0x110>)
   12c46:	491b      	ldr	r1, [pc, #108]	; (12cb4 <gsm_send_sms+0x124>)
   12c48:	6938      	ldr	r0, [r7, #16]
   12c4a:	2300      	movs	r3, #0
   12c4c:	9300      	str	r3, [sp, #0]
   12c4e:	2300      	movs	r3, #0
   12c50:	4d15      	ldr	r5, [pc, #84]	; (12ca8 <gsm_send_sms+0x118>)
   12c52:	47a8      	blx	r5
   12c54:	0003      	movs	r3, r0
   12c56:	7023      	strb	r3, [r4, #0]
		if (err == GSM_ERROR_NONE)
   12c58:	230f      	movs	r3, #15
   12c5a:	18fb      	adds	r3, r7, r3
   12c5c:	781b      	ldrb	r3, [r3, #0]
   12c5e:	2b00      	cmp	r3, #0
   12c60:	d105      	bne.n	12c6e <gsm_send_sms+0xde>
		{
			free(cmdx);
   12c62:	693b      	ldr	r3, [r7, #16]
   12c64:	0018      	movs	r0, r3
   12c66:	4b14      	ldr	r3, [pc, #80]	; (12cb8 <gsm_send_sms+0x128>)
   12c68:	4798      	blx	r3
			return GSM_ERROR_NONE;
   12c6a:	2300      	movs	r3, #0
   12c6c:	e00a      	b.n	12c84 <gsm_send_sms+0xf4>
		}
		else
		{
			free(cmdx);
   12c6e:	693b      	ldr	r3, [r7, #16]
   12c70:	0018      	movs	r0, r3
   12c72:	4b11      	ldr	r3, [pc, #68]	; (12cb8 <gsm_send_sms+0x128>)
   12c74:	4798      	blx	r3
			return GSM_ERROR_SMS_SEND_FAILED;
   12c76:	2306      	movs	r3, #6
   12c78:	e004      	b.n	12c84 <gsm_send_sms+0xf4>
		}
	}
	else
	{
		free(cmdx);
   12c7a:	693b      	ldr	r3, [r7, #16]
   12c7c:	0018      	movs	r0, r3
   12c7e:	4b0e      	ldr	r3, [pc, #56]	; (12cb8 <gsm_send_sms+0x128>)
   12c80:	4798      	blx	r3
		return GSM_ERROR_SMS_SEND_FAILED;
   12c82:	2306      	movs	r3, #6
	}
}
   12c84:	0018      	movs	r0, r3
   12c86:	46bd      	mov	sp, r7
   12c88:	b006      	add	sp, #24
   12c8a:	bdb0      	pop	{r4, r5, r7, pc}
   12c8c:	00028de7 	.word	0x00028de7
   12c90:	00028a49 	.word	0x00028a49
   12c94:	00028b57 	.word	0x00028b57
   12c98:	000299e4 	.word	0x000299e4
   12c9c:	00028cf9 	.word	0x00028cf9
   12ca0:	0000ea60 	.word	0x0000ea60
   12ca4:	000299f4 	.word	0x000299f4
   12ca8:	000123ed 	.word	0x000123ed
   12cac:	0001fe69 	.word	0x0001fe69
   12cb0:	000299f8 	.word	0x000299f8
   12cb4:	0002980c 	.word	0x0002980c
   12cb8:	00028ae9 	.word	0x00028ae9

00012cbc <gsm_read_sms>:
	free(cmdx);
	return sms_index;
}

enum gsm_error gsm_read_sms(uint8_t position, char *phone_number, uint8_t max_phone_len, char *SMS_text, uint8_t max_SMS_len)
{
   12cbc:	b590      	push	{r4, r7, lr}
   12cbe:	b08f      	sub	sp, #60	; 0x3c
   12cc0:	af02      	add	r7, sp, #8
   12cc2:	60b9      	str	r1, [r7, #8]
   12cc4:	0011      	movs	r1, r2
   12cc6:	607b      	str	r3, [r7, #4]
   12cc8:	230f      	movs	r3, #15
   12cca:	18fb      	adds	r3, r7, r3
   12ccc:	1c02      	adds	r2, r0, #0
   12cce:	701a      	strb	r2, [r3, #0]
   12cd0:	230e      	movs	r3, #14
   12cd2:	18fb      	adds	r3, r7, r3
   12cd4:	1c0a      	adds	r2, r1, #0
   12cd6:	701a      	strb	r2, [r3, #0]
	const uint8_t MAX_BUFFER = 230;
   12cd8:	232f      	movs	r3, #47	; 0x2f
   12cda:	18fb      	adds	r3, r7, r3
   12cdc:	22e6      	movs	r2, #230	; 0xe6
   12cde:	701a      	strb	r2, [r3, #0]
	char *cmdx = (char*) calloc(MAX_BUFFER,sizeof(char));
   12ce0:	232f      	movs	r3, #47	; 0x2f
   12ce2:	18fb      	adds	r3, r7, r3
   12ce4:	781b      	ldrb	r3, [r3, #0]
   12ce6:	2101      	movs	r1, #1
   12ce8:	0018      	movs	r0, r3
   12cea:	4b6e      	ldr	r3, [pc, #440]	; (12ea4 <gsm_read_sms+0x1e8>)
   12cec:	4798      	blx	r3
   12cee:	0003      	movs	r3, r0
   12cf0:	62bb      	str	r3, [r7, #40]	; 0x28
	if (cmdx == NULL)
   12cf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   12cf4:	2b00      	cmp	r3, #0
   12cf6:	d105      	bne.n	12d04 <gsm_read_sms+0x48>
	{
		free(cmdx);
   12cf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   12cfa:	0018      	movs	r0, r3
   12cfc:	4b6a      	ldr	r3, [pc, #424]	; (12ea8 <gsm_read_sms+0x1ec>)
   12cfe:	4798      	blx	r3
		return 0;
   12d00:	2300      	movs	r3, #0
   12d02:	e0ca      	b.n	12e9a <gsm_read_sms+0x1de>
	}
	memset(cmdx, '\0', MAX_BUFFER);
   12d04:	232f      	movs	r3, #47	; 0x2f
   12d06:	18fb      	adds	r3, r7, r3
   12d08:	781a      	ldrb	r2, [r3, #0]
   12d0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   12d0c:	2100      	movs	r1, #0
   12d0e:	0018      	movs	r0, r3
   12d10:	4b66      	ldr	r3, [pc, #408]	; (12eac <gsm_read_sms+0x1f0>)
   12d12:	4798      	blx	r3
	
	uint8_t cmgr_at_command[10] = {0};
   12d14:	2310      	movs	r3, #16
   12d16:	18fb      	adds	r3, r7, r3
   12d18:	0018      	movs	r0, r3
   12d1a:	230a      	movs	r3, #10
   12d1c:	001a      	movs	r2, r3
   12d1e:	2100      	movs	r1, #0
   12d20:	4b62      	ldr	r3, [pc, #392]	; (12eac <gsm_read_sms+0x1f0>)
   12d22:	4798      	blx	r3
	
	snprintf((char*)cmgr_at_command, MAX_BUFFER, "AT+CMGR=%d\r",position);
   12d24:	232f      	movs	r3, #47	; 0x2f
   12d26:	18fb      	adds	r3, r7, r3
   12d28:	7819      	ldrb	r1, [r3, #0]
   12d2a:	230f      	movs	r3, #15
   12d2c:	18fb      	adds	r3, r7, r3
   12d2e:	781b      	ldrb	r3, [r3, #0]
   12d30:	4a5f      	ldr	r2, [pc, #380]	; (12eb0 <gsm_read_sms+0x1f4>)
   12d32:	2010      	movs	r0, #16
   12d34:	1838      	adds	r0, r7, r0
   12d36:	4c5f      	ldr	r4, [pc, #380]	; (12eb4 <gsm_read_sms+0x1f8>)
   12d38:	47a0      	blx	r4
	
	if (gsm_send_at_command((const char*)cmgr_at_command, (const char*)RESPONS_OK,5000, MAX_BUFFER, cmdx)==GSM_ERROR_NONE)
   12d3a:	232f      	movs	r3, #47	; 0x2f
   12d3c:	18fb      	adds	r3, r7, r3
   12d3e:	781a      	ldrb	r2, [r3, #0]
   12d40:	4c5d      	ldr	r4, [pc, #372]	; (12eb8 <gsm_read_sms+0x1fc>)
   12d42:	495e      	ldr	r1, [pc, #376]	; (12ebc <gsm_read_sms+0x200>)
   12d44:	2310      	movs	r3, #16
   12d46:	18f8      	adds	r0, r7, r3
   12d48:	6abb      	ldr	r3, [r7, #40]	; 0x28
   12d4a:	9300      	str	r3, [sp, #0]
   12d4c:	0013      	movs	r3, r2
   12d4e:	0022      	movs	r2, r4
   12d50:	4c5b      	ldr	r4, [pc, #364]	; (12ec0 <gsm_read_sms+0x204>)
   12d52:	47a0      	blx	r4
   12d54:	1e03      	subs	r3, r0, #0
   12d56:	d000      	beq.n	12d5a <gsm_read_sms+0x9e>
   12d58:	e094      	b.n	12e84 <gsm_read_sms+0x1c8>
	{
		char *strig_cmp;
		char *p_char;
		char *p_char1;
		strig_cmp = strstr(cmdx,"+CMGR");
   12d5a:	4a5a      	ldr	r2, [pc, #360]	; (12ec4 <gsm_read_sms+0x208>)
   12d5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   12d5e:	0011      	movs	r1, r2
   12d60:	0018      	movs	r0, r3
   12d62:	4b59      	ldr	r3, [pc, #356]	; (12ec8 <gsm_read_sms+0x20c>)
   12d64:	4798      	blx	r3
   12d66:	0003      	movs	r3, r0
   12d68:	627b      	str	r3, [r7, #36]	; 0x24
		if (strig_cmp != 0)
   12d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   12d6c:	2b00      	cmp	r3, #0
   12d6e:	d100      	bne.n	12d72 <gsm_read_sms+0xb6>
   12d70:	e082      	b.n	12e78 <gsm_read_sms+0x1bc>
		{
			p_char = strchr((char *)(cmdx),',');
   12d72:	6abb      	ldr	r3, [r7, #40]	; 0x28
   12d74:	212c      	movs	r1, #44	; 0x2c
   12d76:	0018      	movs	r0, r3
   12d78:	4b54      	ldr	r3, [pc, #336]	; (12ecc <gsm_read_sms+0x210>)
   12d7a:	4798      	blx	r3
   12d7c:	0003      	movs	r3, r0
   12d7e:	623b      	str	r3, [r7, #32]
			p_char1 = p_char+2;
   12d80:	6a3b      	ldr	r3, [r7, #32]
   12d82:	3302      	adds	r3, #2
   12d84:	61fb      	str	r3, [r7, #28]
			p_char = strchr((char *)(p_char1),'"');
   12d86:	69fb      	ldr	r3, [r7, #28]
   12d88:	2122      	movs	r1, #34	; 0x22
   12d8a:	0018      	movs	r0, r3
   12d8c:	4b4f      	ldr	r3, [pc, #316]	; (12ecc <gsm_read_sms+0x210>)
   12d8e:	4798      	blx	r3
   12d90:	0003      	movs	r3, r0
   12d92:	623b      	str	r3, [r7, #32]
			uint8_t len;
			if (p_char != NULL)
   12d94:	6a3b      	ldr	r3, [r7, #32]
   12d96:	2b00      	cmp	r3, #0
   12d98:	d02a      	beq.n	12df0 <gsm_read_sms+0x134>
			{
				*p_char = 0;
   12d9a:	6a3b      	ldr	r3, [r7, #32]
   12d9c:	2200      	movs	r2, #0
   12d9e:	701a      	strb	r2, [r3, #0]
				len = strlen(p_char1);
   12da0:	69fb      	ldr	r3, [r7, #28]
   12da2:	0018      	movs	r0, r3
   12da4:	4b4a      	ldr	r3, [pc, #296]	; (12ed0 <gsm_read_sms+0x214>)
   12da6:	4798      	blx	r3
   12da8:	0002      	movs	r2, r0
   12daa:	231b      	movs	r3, #27
   12dac:	18fb      	adds	r3, r7, r3
   12dae:	701a      	strb	r2, [r3, #0]
				if(len < max_phone_len)
   12db0:	231b      	movs	r3, #27
   12db2:	18fa      	adds	r2, r7, r3
   12db4:	230e      	movs	r3, #14
   12db6:	18fb      	adds	r3, r7, r3
   12db8:	7812      	ldrb	r2, [r2, #0]
   12dba:	781b      	ldrb	r3, [r3, #0]
   12dbc:	429a      	cmp	r2, r3
   12dbe:	d206      	bcs.n	12dce <gsm_read_sms+0x112>
				{
					strcpy(phone_number, (char *)(p_char1));
   12dc0:	69fa      	ldr	r2, [r7, #28]
   12dc2:	68bb      	ldr	r3, [r7, #8]
   12dc4:	0011      	movs	r1, r2
   12dc6:	0018      	movs	r0, r3
   12dc8:	4b42      	ldr	r3, [pc, #264]	; (12ed4 <gsm_read_sms+0x218>)
   12dca:	4798      	blx	r3
   12dcc:	e010      	b.n	12df0 <gsm_read_sms+0x134>
				}
				else
				{
					memcpy(phone_number,(char *)p_char1,(max_phone_len-1));
   12dce:	230e      	movs	r3, #14
   12dd0:	18fb      	adds	r3, r7, r3
   12dd2:	781b      	ldrb	r3, [r3, #0]
   12dd4:	3b01      	subs	r3, #1
   12dd6:	001a      	movs	r2, r3
   12dd8:	69f9      	ldr	r1, [r7, #28]
   12dda:	68bb      	ldr	r3, [r7, #8]
   12ddc:	0018      	movs	r0, r3
   12dde:	4b3e      	ldr	r3, [pc, #248]	; (12ed8 <gsm_read_sms+0x21c>)
   12de0:	4798      	blx	r3
					phone_number[max_phone_len]=0;
   12de2:	230e      	movs	r3, #14
   12de4:	18fb      	adds	r3, r7, r3
   12de6:	781b      	ldrb	r3, [r3, #0]
   12de8:	68ba      	ldr	r2, [r7, #8]
   12dea:	18d3      	adds	r3, r2, r3
   12dec:	2200      	movs	r2, #0
   12dee:	701a      	strb	r2, [r3, #0]
				}
			}
			p_char = strchr(p_char+1, 0x0a);
   12df0:	6a3b      	ldr	r3, [r7, #32]
   12df2:	3301      	adds	r3, #1
   12df4:	210a      	movs	r1, #10
   12df6:	0018      	movs	r0, r3
   12df8:	4b34      	ldr	r3, [pc, #208]	; (12ecc <gsm_read_sms+0x210>)
   12dfa:	4798      	blx	r3
   12dfc:	0003      	movs	r3, r0
   12dfe:	623b      	str	r3, [r7, #32]
			if (p_char != NULL)
   12e00:	6a3b      	ldr	r3, [r7, #32]
   12e02:	2b00      	cmp	r3, #0
   12e04:	d044      	beq.n	12e90 <gsm_read_sms+0x1d4>
			{
				p_char++;
   12e06:	6a3b      	ldr	r3, [r7, #32]
   12e08:	3301      	adds	r3, #1
   12e0a:	623b      	str	r3, [r7, #32]
				p_char1 = strchr((char *)(p_char), 0x0d);
   12e0c:	6a3b      	ldr	r3, [r7, #32]
   12e0e:	210d      	movs	r1, #13
   12e10:	0018      	movs	r0, r3
   12e12:	4b2e      	ldr	r3, [pc, #184]	; (12ecc <gsm_read_sms+0x210>)
   12e14:	4798      	blx	r3
   12e16:	0003      	movs	r3, r0
   12e18:	61fb      	str	r3, [r7, #28]
				if (p_char1 != NULL)
   12e1a:	69fb      	ldr	r3, [r7, #28]
   12e1c:	2b00      	cmp	r3, #0
   12e1e:	d002      	beq.n	12e26 <gsm_read_sms+0x16a>
				{
					*p_char1 = 0;
   12e20:	69fb      	ldr	r3, [r7, #28]
   12e22:	2200      	movs	r2, #0
   12e24:	701a      	strb	r2, [r3, #0]
				}
				len = strlen(p_char);
   12e26:	6a3b      	ldr	r3, [r7, #32]
   12e28:	0018      	movs	r0, r3
   12e2a:	4b29      	ldr	r3, [pc, #164]	; (12ed0 <gsm_read_sms+0x214>)
   12e2c:	4798      	blx	r3
   12e2e:	0002      	movs	r2, r0
   12e30:	231b      	movs	r3, #27
   12e32:	18fb      	adds	r3, r7, r3
   12e34:	701a      	strb	r2, [r3, #0]
				if (len < max_SMS_len)
   12e36:	231b      	movs	r3, #27
   12e38:	18fb      	adds	r3, r7, r3
   12e3a:	2240      	movs	r2, #64	; 0x40
   12e3c:	18b9      	adds	r1, r7, r2
   12e3e:	781a      	ldrb	r2, [r3, #0]
   12e40:	780b      	ldrb	r3, [r1, #0]
   12e42:	429a      	cmp	r2, r3
   12e44:	d206      	bcs.n	12e54 <gsm_read_sms+0x198>
				{
					strcpy(SMS_text, (char *)(p_char));
   12e46:	6a3a      	ldr	r2, [r7, #32]
   12e48:	687b      	ldr	r3, [r7, #4]
   12e4a:	0011      	movs	r1, r2
   12e4c:	0018      	movs	r0, r3
   12e4e:	4b21      	ldr	r3, [pc, #132]	; (12ed4 <gsm_read_sms+0x218>)
   12e50:	4798      	blx	r3
   12e52:	e01d      	b.n	12e90 <gsm_read_sms+0x1d4>
				}
				else
				{
					memcpy(SMS_text, (char *)(p_char), (max_SMS_len-1));
   12e54:	2340      	movs	r3, #64	; 0x40
   12e56:	18fb      	adds	r3, r7, r3
   12e58:	781b      	ldrb	r3, [r3, #0]
   12e5a:	3b01      	subs	r3, #1
   12e5c:	001a      	movs	r2, r3
   12e5e:	6a39      	ldr	r1, [r7, #32]
   12e60:	687b      	ldr	r3, [r7, #4]
   12e62:	0018      	movs	r0, r3
   12e64:	4b1c      	ldr	r3, [pc, #112]	; (12ed8 <gsm_read_sms+0x21c>)
   12e66:	4798      	blx	r3
					SMS_text[max_SMS_len] = 0;
   12e68:	2340      	movs	r3, #64	; 0x40
   12e6a:	18fb      	adds	r3, r7, r3
   12e6c:	781b      	ldrb	r3, [r3, #0]
   12e6e:	687a      	ldr	r2, [r7, #4]
   12e70:	18d3      	adds	r3, r2, r3
   12e72:	2200      	movs	r2, #0
   12e74:	701a      	strb	r2, [r3, #0]
   12e76:	e00b      	b.n	12e90 <gsm_read_sms+0x1d4>
				}
			}
		}
		else
		{
			free(cmdx);
   12e78:	6abb      	ldr	r3, [r7, #40]	; 0x28
   12e7a:	0018      	movs	r0, r3
   12e7c:	4b0a      	ldr	r3, [pc, #40]	; (12ea8 <gsm_read_sms+0x1ec>)
   12e7e:	4798      	blx	r3
			return GSM_ERROR_SMS_NOT_AVAILABLE;
   12e80:	230c      	movs	r3, #12
   12e82:	e00a      	b.n	12e9a <gsm_read_sms+0x1de>
		}
	}
	else
	{
		free(cmdx);
   12e84:	6abb      	ldr	r3, [r7, #40]	; 0x28
   12e86:	0018      	movs	r0, r3
   12e88:	4b07      	ldr	r3, [pc, #28]	; (12ea8 <gsm_read_sms+0x1ec>)
   12e8a:	4798      	blx	r3
		return GSM_ERROR_SMS_NOT_AVAILABLE;
   12e8c:	230c      	movs	r3, #12
   12e8e:	e004      	b.n	12e9a <gsm_read_sms+0x1de>
	}
	free(cmdx);
   12e90:	6abb      	ldr	r3, [r7, #40]	; 0x28
   12e92:	0018      	movs	r0, r3
   12e94:	4b04      	ldr	r3, [pc, #16]	; (12ea8 <gsm_read_sms+0x1ec>)
   12e96:	4798      	blx	r3
	return GSM_ERROR_NONE;
   12e98:	2300      	movs	r3, #0
}
   12e9a:	0018      	movs	r0, r3
   12e9c:	46bd      	mov	sp, r7
   12e9e:	b00d      	add	sp, #52	; 0x34
   12ea0:	bd90      	pop	{r4, r7, pc}
   12ea2:	46c0      	nop			; (mov r8, r8)
   12ea4:	00028a49 	.word	0x00028a49
   12ea8:	00028ae9 	.word	0x00028ae9
   12eac:	00028b57 	.word	0x00028b57
   12eb0:	00029a44 	.word	0x00029a44
   12eb4:	00028cf9 	.word	0x00028cf9
   12eb8:	00001388 	.word	0x00001388
   12ebc:	0002980c 	.word	0x0002980c
   12ec0:	000123ed 	.word	0x000123ed
   12ec4:	00029a50 	.word	0x00029a50
   12ec8:	00028e17 	.word	0x00028e17
   12ecc:	00028dbb 	.word	0x00028dbb
   12ed0:	00028de7 	.word	0x00028de7
   12ed4:	00028dd7 	.word	0x00028dd7
   12ed8:	00028b21 	.word	0x00028b21

00012edc <gsm_call_to_dial_a_number>:


enum gsm_error gsm_call_to_dial_a_number(const char *to)
{
   12edc:	b5b0      	push	{r4, r5, r7, lr}
   12ede:	b088      	sub	sp, #32
   12ee0:	af02      	add	r7, sp, #8
   12ee2:	6078      	str	r0, [r7, #4]
	const uint8_t MAX_BUFFER = 30;
   12ee4:	2317      	movs	r3, #23
   12ee6:	18fb      	adds	r3, r7, r3
   12ee8:	221e      	movs	r2, #30
   12eea:	701a      	strb	r2, [r3, #0]
	enum gsm_error err;
	char *cmdx = (char*) calloc(MAX_BUFFER,sizeof(char));
   12eec:	2317      	movs	r3, #23
   12eee:	18fb      	adds	r3, r7, r3
   12ef0:	781b      	ldrb	r3, [r3, #0]
   12ef2:	2101      	movs	r1, #1
   12ef4:	0018      	movs	r0, r3
   12ef6:	4b18      	ldr	r3, [pc, #96]	; (12f58 <gsm_call_to_dial_a_number+0x7c>)
   12ef8:	4798      	blx	r3
   12efa:	0003      	movs	r3, r0
   12efc:	613b      	str	r3, [r7, #16]
	
	//buffer created?
	if (cmdx == NULL)
   12efe:	693b      	ldr	r3, [r7, #16]
   12f00:	2b00      	cmp	r3, #0
   12f02:	d101      	bne.n	12f08 <gsm_call_to_dial_a_number+0x2c>
	{
		return 0;
   12f04:	2300      	movs	r3, #0
   12f06:	e023      	b.n	12f50 <gsm_call_to_dial_a_number+0x74>
	}
	
	//init string
	memset(cmdx, '\0', MAX_BUFFER);
   12f08:	2317      	movs	r3, #23
   12f0a:	18fb      	adds	r3, r7, r3
   12f0c:	781a      	ldrb	r2, [r3, #0]
   12f0e:	693b      	ldr	r3, [r7, #16]
   12f10:	2100      	movs	r1, #0
   12f12:	0018      	movs	r0, r3
   12f14:	4b11      	ldr	r3, [pc, #68]	; (12f5c <gsm_call_to_dial_a_number+0x80>)
   12f16:	4798      	blx	r3
	snprintf((char*)cmdx, MAX_BUFFER, "ATD%s;\r", to);
   12f18:	2317      	movs	r3, #23
   12f1a:	18fb      	adds	r3, r7, r3
   12f1c:	7819      	ldrb	r1, [r3, #0]
   12f1e:	687b      	ldr	r3, [r7, #4]
   12f20:	4a0f      	ldr	r2, [pc, #60]	; (12f60 <gsm_call_to_dial_a_number+0x84>)
   12f22:	6938      	ldr	r0, [r7, #16]
   12f24:	4c0f      	ldr	r4, [pc, #60]	; (12f64 <gsm_call_to_dial_a_number+0x88>)
   12f26:	47a0      	blx	r4
	
	err = gsm_send_at_command((const char*)cmdx, (const char*)RESPONS_OK,2000,0, NULL);
   12f28:	230f      	movs	r3, #15
   12f2a:	18fc      	adds	r4, r7, r3
   12f2c:	23fa      	movs	r3, #250	; 0xfa
   12f2e:	00da      	lsls	r2, r3, #3
   12f30:	490d      	ldr	r1, [pc, #52]	; (12f68 <gsm_call_to_dial_a_number+0x8c>)
   12f32:	6938      	ldr	r0, [r7, #16]
   12f34:	2300      	movs	r3, #0
   12f36:	9300      	str	r3, [sp, #0]
   12f38:	2300      	movs	r3, #0
   12f3a:	4d0c      	ldr	r5, [pc, #48]	; (12f6c <gsm_call_to_dial_a_number+0x90>)
   12f3c:	47a8      	blx	r5
   12f3e:	0003      	movs	r3, r0
   12f40:	7023      	strb	r3, [r4, #0]
	free(cmdx);
   12f42:	693b      	ldr	r3, [r7, #16]
   12f44:	0018      	movs	r0, r3
   12f46:	4b0a      	ldr	r3, [pc, #40]	; (12f70 <gsm_call_to_dial_a_number+0x94>)
   12f48:	4798      	blx	r3
	return err;
   12f4a:	230f      	movs	r3, #15
   12f4c:	18fb      	adds	r3, r7, r3
   12f4e:	781b      	ldrb	r3, [r3, #0]
	
}
   12f50:	0018      	movs	r0, r3
   12f52:	46bd      	mov	sp, r7
   12f54:	b006      	add	sp, #24
   12f56:	bdb0      	pop	{r4, r5, r7, pc}
   12f58:	00028a49 	.word	0x00028a49
   12f5c:	00028b57 	.word	0x00028b57
   12f60:	00029a58 	.word	0x00029a58
   12f64:	00028cf9 	.word	0x00028cf9
   12f68:	0002980c 	.word	0x0002980c
   12f6c:	000123ed 	.word	0x000123ed
   12f70:	00028ae9 	.word	0x00028ae9

00012f74 <gsm_answer_an_incomming_call>:

enum gsm_error gsm_answer_an_incomming_call(void)
{
   12f74:	b590      	push	{r4, r7, lr}
   12f76:	b083      	sub	sp, #12
   12f78:	af02      	add	r7, sp, #8
	return gsm_send_at_command((const char*)("ATA\r"), (const char*)RESPONS_OK,5000,0, NULL);
   12f7a:	4a06      	ldr	r2, [pc, #24]	; (12f94 <gsm_answer_an_incomming_call+0x20>)
   12f7c:	4906      	ldr	r1, [pc, #24]	; (12f98 <gsm_answer_an_incomming_call+0x24>)
   12f7e:	4807      	ldr	r0, [pc, #28]	; (12f9c <gsm_answer_an_incomming_call+0x28>)
   12f80:	2300      	movs	r3, #0
   12f82:	9300      	str	r3, [sp, #0]
   12f84:	2300      	movs	r3, #0
   12f86:	4c06      	ldr	r4, [pc, #24]	; (12fa0 <gsm_answer_an_incomming_call+0x2c>)
   12f88:	47a0      	blx	r4
   12f8a:	0003      	movs	r3, r0
}
   12f8c:	0018      	movs	r0, r3
   12f8e:	46bd      	mov	sp, r7
   12f90:	b001      	add	sp, #4
   12f92:	bd90      	pop	{r4, r7, pc}
   12f94:	00001388 	.word	0x00001388
   12f98:	0002980c 	.word	0x0002980c
   12f9c:	00029a60 	.word	0x00029a60
   12fa0:	000123ed 	.word	0x000123ed

00012fa4 <gsm_enable_network_time_update>:


enum gsm_error gsm_enable_network_time_update(void)
{
   12fa4:	b590      	push	{r4, r7, lr}
   12fa6:	b083      	sub	sp, #12
   12fa8:	af02      	add	r7, sp, #8
	return 	gsm_send_at_command((const char*)("AT+CLTS=1\r"), (const char*)RESPONS_OK,10000,0, NULL);
   12faa:	4a06      	ldr	r2, [pc, #24]	; (12fc4 <gsm_enable_network_time_update+0x20>)
   12fac:	4906      	ldr	r1, [pc, #24]	; (12fc8 <gsm_enable_network_time_update+0x24>)
   12fae:	4807      	ldr	r0, [pc, #28]	; (12fcc <gsm_enable_network_time_update+0x28>)
   12fb0:	2300      	movs	r3, #0
   12fb2:	9300      	str	r3, [sp, #0]
   12fb4:	2300      	movs	r3, #0
   12fb6:	4c06      	ldr	r4, [pc, #24]	; (12fd0 <gsm_enable_network_time_update+0x2c>)
   12fb8:	47a0      	blx	r4
   12fba:	0003      	movs	r3, r0
}
   12fbc:	0018      	movs	r0, r3
   12fbe:	46bd      	mov	sp, r7
   12fc0:	b001      	add	sp, #4
   12fc2:	bd90      	pop	{r4, r7, pc}
   12fc4:	00002710 	.word	0x00002710
   12fc8:	0002980c 	.word	0x0002980c
   12fcc:	00029a68 	.word	0x00029a68
   12fd0:	000123ed 	.word	0x000123ed

00012fd4 <gsm_enable_DTMF_detection>:
{
	return 	gsm_send_at_command((const char*)("AT+CLTS=0\r"), (const char*)RESPONS_OK,10000,0, NULL);
}

enum gsm_error gsm_enable_DTMF_detection(void)
{
   12fd4:	b590      	push	{r4, r7, lr}
   12fd6:	b083      	sub	sp, #12
   12fd8:	af02      	add	r7, sp, #8
	return 	gsm_send_at_command((const char*)("AT+DDET=1\r"), (const char*)RESPONS_OK,5000,0, NULL);
   12fda:	4a06      	ldr	r2, [pc, #24]	; (12ff4 <gsm_enable_DTMF_detection+0x20>)
   12fdc:	4906      	ldr	r1, [pc, #24]	; (12ff8 <gsm_enable_DTMF_detection+0x24>)
   12fde:	4807      	ldr	r0, [pc, #28]	; (12ffc <gsm_enable_DTMF_detection+0x28>)
   12fe0:	2300      	movs	r3, #0
   12fe2:	9300      	str	r3, [sp, #0]
   12fe4:	2300      	movs	r3, #0
   12fe6:	4c06      	ldr	r4, [pc, #24]	; (13000 <gsm_enable_DTMF_detection+0x2c>)
   12fe8:	47a0      	blx	r4
   12fea:	0003      	movs	r3, r0
}
   12fec:	0018      	movs	r0, r3
   12fee:	46bd      	mov	sp, r7
   12ff0:	b001      	add	sp, #4
   12ff2:	bd90      	pop	{r4, r7, pc}
   12ff4:	00001388 	.word	0x00001388
   12ff8:	0002980c 	.word	0x0002980c
   12ffc:	00029a80 	.word	0x00029a80
   13000:	000123ed 	.word	0x000123ed

00013004 <gsm_send_DTMF_Tone>:

enum gsm_error gsm_send_DTMF_Tone(char *tone)
{
   13004:	b5b0      	push	{r4, r5, r7, lr}
   13006:	b088      	sub	sp, #32
   13008:	af02      	add	r7, sp, #8
   1300a:	6078      	str	r0, [r7, #4]
	const uint8_t MAX_BUFFER = 30;
   1300c:	2317      	movs	r3, #23
   1300e:	18fb      	adds	r3, r7, r3
   13010:	221e      	movs	r2, #30
   13012:	701a      	strb	r2, [r3, #0]
	enum gsm_error err;
	char *cmdx = (char*) calloc(MAX_BUFFER,sizeof(char));
   13014:	2317      	movs	r3, #23
   13016:	18fb      	adds	r3, r7, r3
   13018:	781b      	ldrb	r3, [r3, #0]
   1301a:	2101      	movs	r1, #1
   1301c:	0018      	movs	r0, r3
   1301e:	4b18      	ldr	r3, [pc, #96]	; (13080 <gsm_send_DTMF_Tone+0x7c>)
   13020:	4798      	blx	r3
   13022:	0003      	movs	r3, r0
   13024:	613b      	str	r3, [r7, #16]
	
	//buffer created?
	if (cmdx == NULL)
   13026:	693b      	ldr	r3, [r7, #16]
   13028:	2b00      	cmp	r3, #0
   1302a:	d101      	bne.n	13030 <gsm_send_DTMF_Tone+0x2c>
	{
		return 0;
   1302c:	2300      	movs	r3, #0
   1302e:	e022      	b.n	13076 <gsm_send_DTMF_Tone+0x72>
	}
	
	//init string
	memset(cmdx, '\0', MAX_BUFFER);
   13030:	2317      	movs	r3, #23
   13032:	18fb      	adds	r3, r7, r3
   13034:	781a      	ldrb	r2, [r3, #0]
   13036:	693b      	ldr	r3, [r7, #16]
   13038:	2100      	movs	r1, #0
   1303a:	0018      	movs	r0, r3
   1303c:	4b11      	ldr	r3, [pc, #68]	; (13084 <gsm_send_DTMF_Tone+0x80>)
   1303e:	4798      	blx	r3
	snprintf((char*)cmdx, MAX_BUFFER,"AT+VTS=\"%s\"\r",tone);
   13040:	2317      	movs	r3, #23
   13042:	18fb      	adds	r3, r7, r3
   13044:	7819      	ldrb	r1, [r3, #0]
   13046:	687b      	ldr	r3, [r7, #4]
   13048:	4a0f      	ldr	r2, [pc, #60]	; (13088 <gsm_send_DTMF_Tone+0x84>)
   1304a:	6938      	ldr	r0, [r7, #16]
   1304c:	4c0f      	ldr	r4, [pc, #60]	; (1308c <gsm_send_DTMF_Tone+0x88>)
   1304e:	47a0      	blx	r4
	
	err = gsm_send_at_command((const char*)(cmdx), (const char*)RESPONS_OK,5000,0, NULL);
   13050:	230f      	movs	r3, #15
   13052:	18fc      	adds	r4, r7, r3
   13054:	4a0e      	ldr	r2, [pc, #56]	; (13090 <gsm_send_DTMF_Tone+0x8c>)
   13056:	490f      	ldr	r1, [pc, #60]	; (13094 <gsm_send_DTMF_Tone+0x90>)
   13058:	6938      	ldr	r0, [r7, #16]
   1305a:	2300      	movs	r3, #0
   1305c:	9300      	str	r3, [sp, #0]
   1305e:	2300      	movs	r3, #0
   13060:	4d0d      	ldr	r5, [pc, #52]	; (13098 <gsm_send_DTMF_Tone+0x94>)
   13062:	47a8      	blx	r5
   13064:	0003      	movs	r3, r0
   13066:	7023      	strb	r3, [r4, #0]
	free(cmdx);
   13068:	693b      	ldr	r3, [r7, #16]
   1306a:	0018      	movs	r0, r3
   1306c:	4b0b      	ldr	r3, [pc, #44]	; (1309c <gsm_send_DTMF_Tone+0x98>)
   1306e:	4798      	blx	r3
	return err;
   13070:	230f      	movs	r3, #15
   13072:	18fb      	adds	r3, r7, r3
   13074:	781b      	ldrb	r3, [r3, #0]
}
   13076:	0018      	movs	r0, r3
   13078:	46bd      	mov	sp, r7
   1307a:	b006      	add	sp, #24
   1307c:	bdb0      	pop	{r4, r5, r7, pc}
   1307e:	46c0      	nop			; (mov r8, r8)
   13080:	00028a49 	.word	0x00028a49
   13084:	00028b57 	.word	0x00028b57
   13088:	00029a8c 	.word	0x00029a8c
   1308c:	00028cf9 	.word	0x00028cf9
   13090:	00001388 	.word	0x00001388
   13094:	0002980c 	.word	0x0002980c
   13098:	000123ed 	.word	0x000123ed
   1309c:	00028ae9 	.word	0x00028ae9

000130a0 <gsm_hangup_call>:

enum gsm_error gsm_hangup_call(void)
{
   130a0:	b590      	push	{r4, r7, lr}
   130a2:	b083      	sub	sp, #12
   130a4:	af02      	add	r7, sp, #8
	return 	gsm_send_at_command((const char*)("AT+CHUP\r"), (const char*)RESPONS_OK,5000,0, NULL);
   130a6:	4a06      	ldr	r2, [pc, #24]	; (130c0 <gsm_hangup_call+0x20>)
   130a8:	4906      	ldr	r1, [pc, #24]	; (130c4 <gsm_hangup_call+0x24>)
   130aa:	4807      	ldr	r0, [pc, #28]	; (130c8 <gsm_hangup_call+0x28>)
   130ac:	2300      	movs	r3, #0
   130ae:	9300      	str	r3, [sp, #0]
   130b0:	2300      	movs	r3, #0
   130b2:	4c06      	ldr	r4, [pc, #24]	; (130cc <gsm_hangup_call+0x2c>)
   130b4:	47a0      	blx	r4
   130b6:	0003      	movs	r3, r0
}
   130b8:	0018      	movs	r0, r3
   130ba:	46bd      	mov	sp, r7
   130bc:	b001      	add	sp, #4
   130be:	bd90      	pop	{r4, r7, pc}
   130c0:	00001388 	.word	0x00001388
   130c4:	0002980c 	.word	0x0002980c
   130c8:	00029a9c 	.word	0x00029a9c
   130cc:	000123ed 	.word	0x000123ed

000130d0 <gsm_disable_call_waiting>:

enum gsm_error gsm_disable_call_waiting(void)
{
   130d0:	b590      	push	{r4, r7, lr}
   130d2:	b083      	sub	sp, #12
   130d4:	af02      	add	r7, sp, #8
	return gsm_send_at_command((const char*)("AT+CCWA=0,0\r"), (const char*)RESPONS_OK,18000,0, NULL);
   130d6:	4a06      	ldr	r2, [pc, #24]	; (130f0 <gsm_disable_call_waiting+0x20>)
   130d8:	4906      	ldr	r1, [pc, #24]	; (130f4 <gsm_disable_call_waiting+0x24>)
   130da:	4807      	ldr	r0, [pc, #28]	; (130f8 <gsm_disable_call_waiting+0x28>)
   130dc:	2300      	movs	r3, #0
   130de:	9300      	str	r3, [sp, #0]
   130e0:	2300      	movs	r3, #0
   130e2:	4c06      	ldr	r4, [pc, #24]	; (130fc <gsm_disable_call_waiting+0x2c>)
   130e4:	47a0      	blx	r4
   130e6:	0003      	movs	r3, r0
}
   130e8:	0018      	movs	r0, r3
   130ea:	46bd      	mov	sp, r7
   130ec:	b001      	add	sp, #4
   130ee:	bd90      	pop	{r4, r7, pc}
   130f0:	00004650 	.word	0x00004650
   130f4:	0002980c 	.word	0x0002980c
   130f8:	00029aa8 	.word	0x00029aa8
   130fc:	000123ed 	.word	0x000123ed

00013100 <gsm_stop_play_record_file>:
	return gsm_send_at_command((const char*)("AT+GSMBUSY=0\r"), (const char*)RESPONS_OK,5000,0, NULL);
}


enum gsm_error gsm_stop_play_record_file(void)
{
   13100:	b590      	push	{r4, r7, lr}
   13102:	b083      	sub	sp, #12
   13104:	af02      	add	r7, sp, #8
	return gsm_send_at_command((const char*)("AT+CREC=5\r"), (const char*)RESPONS_OK,500,0, NULL);
   13106:	23fa      	movs	r3, #250	; 0xfa
   13108:	005a      	lsls	r2, r3, #1
   1310a:	4906      	ldr	r1, [pc, #24]	; (13124 <gsm_stop_play_record_file+0x24>)
   1310c:	4806      	ldr	r0, [pc, #24]	; (13128 <gsm_stop_play_record_file+0x28>)
   1310e:	2300      	movs	r3, #0
   13110:	9300      	str	r3, [sp, #0]
   13112:	2300      	movs	r3, #0
   13114:	4c05      	ldr	r4, [pc, #20]	; (1312c <gsm_stop_play_record_file+0x2c>)
   13116:	47a0      	blx	r4
   13118:	0003      	movs	r3, r0
}
   1311a:	0018      	movs	r0, r3
   1311c:	46bd      	mov	sp, r7
   1311e:	b001      	add	sp, #4
   13120:	bd90      	pop	{r4, r7, pc}
   13122:	46c0      	nop			; (mov r8, r8)
   13124:	0002980c 	.word	0x0002980c
   13128:	00029ad8 	.word	0x00029ad8
   1312c:	000123ed 	.word	0x000123ed

00013130 <gsm_play_record_file>:

enum gsm_error gsm_play_record_file(const char *filename,bool playInfinitely)
{
   13130:	b590      	push	{r4, r7, lr}
   13132:	b087      	sub	sp, #28
   13134:	af02      	add	r7, sp, #8
   13136:	6078      	str	r0, [r7, #4]
   13138:	000a      	movs	r2, r1
   1313a:	1cfb      	adds	r3, r7, #3
   1313c:	701a      	strb	r2, [r3, #0]
	//AT+CREC=4,"C:\User\555.amr",0,100$0D
	
	uint8_t repeat = 0;
   1313e:	230f      	movs	r3, #15
   13140:	18fb      	adds	r3, r7, r3
   13142:	2200      	movs	r2, #0
   13144:	701a      	strb	r2, [r3, #0]
	if (playInfinitely)
   13146:	1cfb      	adds	r3, r7, #3
   13148:	781b      	ldrb	r3, [r3, #0]
   1314a:	2b00      	cmp	r3, #0
   1314c:	d003      	beq.n	13156 <gsm_play_record_file+0x26>
	{
		repeat = 1;
   1314e:	230f      	movs	r3, #15
   13150:	18fb      	adds	r3, r7, r3
   13152:	2201      	movs	r2, #1
   13154:	701a      	strb	r2, [r3, #0]
	}
	
	const uint8_t MAX_BUFFER = 50;
   13156:	230e      	movs	r3, #14
   13158:	18fb      	adds	r3, r7, r3
   1315a:	2232      	movs	r2, #50	; 0x32
   1315c:	701a      	strb	r2, [r3, #0]
	char *cmdx = (char*) calloc(MAX_BUFFER,sizeof(char));
   1315e:	230e      	movs	r3, #14
   13160:	18fb      	adds	r3, r7, r3
   13162:	781b      	ldrb	r3, [r3, #0]
   13164:	2101      	movs	r1, #1
   13166:	0018      	movs	r0, r3
   13168:	4b17      	ldr	r3, [pc, #92]	; (131c8 <gsm_play_record_file+0x98>)
   1316a:	4798      	blx	r3
   1316c:	0003      	movs	r3, r0
   1316e:	60bb      	str	r3, [r7, #8]
	//buffer created???
	if (cmdx == NULL)
   13170:	68bb      	ldr	r3, [r7, #8]
   13172:	2b00      	cmp	r3, #0
   13174:	d101      	bne.n	1317a <gsm_play_record_file+0x4a>
	{
		return 0;
   13176:	2300      	movs	r3, #0
   13178:	e022      	b.n	131c0 <gsm_play_record_file+0x90>
	}
	memset(cmdx, '\0', MAX_BUFFER);
   1317a:	230e      	movs	r3, #14
   1317c:	18fb      	adds	r3, r7, r3
   1317e:	781a      	ldrb	r2, [r3, #0]
   13180:	68bb      	ldr	r3, [r7, #8]
   13182:	2100      	movs	r1, #0
   13184:	0018      	movs	r0, r3
   13186:	4b11      	ldr	r3, [pc, #68]	; (131cc <gsm_play_record_file+0x9c>)
   13188:	4798      	blx	r3
	
	snprintf((char*)cmdx, MAX_BUFFER, "AT+CREC=4,\"C:\\User\\%c.amr\",0,90,%u\r",filename,repeat);
   1318a:	230e      	movs	r3, #14
   1318c:	18fb      	adds	r3, r7, r3
   1318e:	7819      	ldrb	r1, [r3, #0]
   13190:	230f      	movs	r3, #15
   13192:	18fb      	adds	r3, r7, r3
   13194:	781b      	ldrb	r3, [r3, #0]
   13196:	687c      	ldr	r4, [r7, #4]
   13198:	4a0d      	ldr	r2, [pc, #52]	; (131d0 <gsm_play_record_file+0xa0>)
   1319a:	68b8      	ldr	r0, [r7, #8]
   1319c:	9300      	str	r3, [sp, #0]
   1319e:	0023      	movs	r3, r4
   131a0:	4c0c      	ldr	r4, [pc, #48]	; (131d4 <gsm_play_record_file+0xa4>)
   131a2:	47a0      	blx	r4
	
	gsm_send_at_command((const char*)(cmdx), (const char*)RESPONS_OK,2000,0, NULL);
   131a4:	23fa      	movs	r3, #250	; 0xfa
   131a6:	00da      	lsls	r2, r3, #3
   131a8:	490b      	ldr	r1, [pc, #44]	; (131d8 <gsm_play_record_file+0xa8>)
   131aa:	68b8      	ldr	r0, [r7, #8]
   131ac:	2300      	movs	r3, #0
   131ae:	9300      	str	r3, [sp, #0]
   131b0:	2300      	movs	r3, #0
   131b2:	4c0a      	ldr	r4, [pc, #40]	; (131dc <gsm_play_record_file+0xac>)
   131b4:	47a0      	blx	r4
	free(cmdx);
   131b6:	68bb      	ldr	r3, [r7, #8]
   131b8:	0018      	movs	r0, r3
   131ba:	4b09      	ldr	r3, [pc, #36]	; (131e0 <gsm_play_record_file+0xb0>)
   131bc:	4798      	blx	r3
	return GSM_ERROR_NONE;
   131be:	2300      	movs	r3, #0
	
}
   131c0:	0018      	movs	r0, r3
   131c2:	46bd      	mov	sp, r7
   131c4:	b005      	add	sp, #20
   131c6:	bd90      	pop	{r4, r7, pc}
   131c8:	00028a49 	.word	0x00028a49
   131cc:	00028b57 	.word	0x00028b57
   131d0:	00029ae4 	.word	0x00029ae4
   131d4:	00028cf9 	.word	0x00028cf9
   131d8:	0002980c 	.word	0x0002980c
   131dc:	000123ed 	.word	0x000123ed
   131e0:	00028ae9 	.word	0x00028ae9

000131e4 <gsm_get_internal_rtc_time>:

enum gsm_error gsm_get_internal_rtc_time(void)
{
   131e4:	b5b0      	push	{r4, r5, r7, lr}
   131e6:	b086      	sub	sp, #24
   131e8:	af02      	add	r7, sp, #8
	const uint8_t MAX_BUFFER = 70;
   131ea:	230f      	movs	r3, #15
   131ec:	18fb      	adds	r3, r7, r3
   131ee:	2246      	movs	r2, #70	; 0x46
   131f0:	701a      	strb	r2, [r3, #0]
	char *cmdx = (char*) calloc(MAX_BUFFER,sizeof(char));
   131f2:	230f      	movs	r3, #15
   131f4:	18fb      	adds	r3, r7, r3
   131f6:	781b      	ldrb	r3, [r3, #0]
   131f8:	2101      	movs	r1, #1
   131fa:	0018      	movs	r0, r3
   131fc:	4b57      	ldr	r3, [pc, #348]	; (1335c <gsm_get_internal_rtc_time+0x178>)
   131fe:	4798      	blx	r3
   13200:	0003      	movs	r3, r0
   13202:	60bb      	str	r3, [r7, #8]
	if (cmdx == NULL)
   13204:	68bb      	ldr	r3, [r7, #8]
   13206:	2b00      	cmp	r3, #0
   13208:	d105      	bne.n	13216 <gsm_get_internal_rtc_time+0x32>
	{
		free(cmdx);
   1320a:	68bb      	ldr	r3, [r7, #8]
   1320c:	0018      	movs	r0, r3
   1320e:	4b54      	ldr	r3, [pc, #336]	; (13360 <gsm_get_internal_rtc_time+0x17c>)
   13210:	4798      	blx	r3
		return 0;
   13212:	2300      	movs	r3, #0
   13214:	e09d      	b.n	13352 <gsm_get_internal_rtc_time+0x16e>
	}
	memset(cmdx, '\0', MAX_BUFFER);
   13216:	230f      	movs	r3, #15
   13218:	18fb      	adds	r3, r7, r3
   1321a:	781a      	ldrb	r2, [r3, #0]
   1321c:	68bb      	ldr	r3, [r7, #8]
   1321e:	2100      	movs	r1, #0
   13220:	0018      	movs	r0, r3
   13222:	4b50      	ldr	r3, [pc, #320]	; (13364 <gsm_get_internal_rtc_time+0x180>)
   13224:	4798      	blx	r3
	
	enum gsm_error err;
	err = gsm_send_at_command((const char*)"AT+CCLK?\r", (const char*)RESPONS_OK,5000,MAX_BUFFER, cmdx);
   13226:	1dfc      	adds	r4, r7, #7
   13228:	230f      	movs	r3, #15
   1322a:	18fb      	adds	r3, r7, r3
   1322c:	781a      	ldrb	r2, [r3, #0]
   1322e:	4d4e      	ldr	r5, [pc, #312]	; (13368 <gsm_get_internal_rtc_time+0x184>)
   13230:	494e      	ldr	r1, [pc, #312]	; (1336c <gsm_get_internal_rtc_time+0x188>)
   13232:	484f      	ldr	r0, [pc, #316]	; (13370 <gsm_get_internal_rtc_time+0x18c>)
   13234:	68bb      	ldr	r3, [r7, #8]
   13236:	9300      	str	r3, [sp, #0]
   13238:	0013      	movs	r3, r2
   1323a:	002a      	movs	r2, r5
   1323c:	4d4d      	ldr	r5, [pc, #308]	; (13374 <gsm_get_internal_rtc_time+0x190>)
   1323e:	47a8      	blx	r5
   13240:	0003      	movs	r3, r0
   13242:	7023      	strb	r3, [r4, #0]
	if(err==GSM_ERROR_NONE)
   13244:	1dfb      	adds	r3, r7, #7
   13246:	781b      	ldrb	r3, [r3, #0]
   13248:	2b00      	cmp	r3, #0
   1324a:	d16a      	bne.n	13322 <gsm_get_internal_rtc_time+0x13e>
	{
		char *cclktocken;
		cclktocken = strtok(cmdx,"\"");
   1324c:	4a4a      	ldr	r2, [pc, #296]	; (13378 <gsm_get_internal_rtc_time+0x194>)
   1324e:	68bb      	ldr	r3, [r7, #8]
   13250:	0011      	movs	r1, r2
   13252:	0018      	movs	r0, r3
   13254:	4b49      	ldr	r3, [pc, #292]	; (1337c <gsm_get_internal_rtc_time+0x198>)
   13256:	4798      	blx	r3
   13258:	0003      	movs	r3, r0
   1325a:	603b      	str	r3, [r7, #0]
		cclktocken = strtok(NULL,"\"");
   1325c:	4b46      	ldr	r3, [pc, #280]	; (13378 <gsm_get_internal_rtc_time+0x194>)
   1325e:	0019      	movs	r1, r3
   13260:	2000      	movs	r0, #0
   13262:	4b46      	ldr	r3, [pc, #280]	; (1337c <gsm_get_internal_rtc_time+0x198>)
   13264:	4798      	blx	r3
   13266:	0003      	movs	r3, r0
   13268:	603b      	str	r3, [r7, #0]
		
		cclktocken = strtok(cclktocken,"/");
   1326a:	4a45      	ldr	r2, [pc, #276]	; (13380 <gsm_get_internal_rtc_time+0x19c>)
   1326c:	683b      	ldr	r3, [r7, #0]
   1326e:	0011      	movs	r1, r2
   13270:	0018      	movs	r0, r3
   13272:	4b42      	ldr	r3, [pc, #264]	; (1337c <gsm_get_internal_rtc_time+0x198>)
   13274:	4798      	blx	r3
   13276:	0003      	movs	r3, r0
   13278:	603b      	str	r3, [r7, #0]
		struct_internal_rtc.Network_year = atoi(cclktocken);
   1327a:	683b      	ldr	r3, [r7, #0]
   1327c:	0018      	movs	r0, r3
   1327e:	4b41      	ldr	r3, [pc, #260]	; (13384 <gsm_get_internal_rtc_time+0x1a0>)
   13280:	4798      	blx	r3
   13282:	0003      	movs	r3, r0
   13284:	b2da      	uxtb	r2, r3
   13286:	4b40      	ldr	r3, [pc, #256]	; (13388 <gsm_get_internal_rtc_time+0x1a4>)
   13288:	701a      	strb	r2, [r3, #0]
		
		cclktocken = strtok(NULL,"/");
   1328a:	4b3d      	ldr	r3, [pc, #244]	; (13380 <gsm_get_internal_rtc_time+0x19c>)
   1328c:	0019      	movs	r1, r3
   1328e:	2000      	movs	r0, #0
   13290:	4b3a      	ldr	r3, [pc, #232]	; (1337c <gsm_get_internal_rtc_time+0x198>)
   13292:	4798      	blx	r3
   13294:	0003      	movs	r3, r0
   13296:	603b      	str	r3, [r7, #0]
		struct_internal_rtc.Network_month = atoi(cclktocken);
   13298:	683b      	ldr	r3, [r7, #0]
   1329a:	0018      	movs	r0, r3
   1329c:	4b39      	ldr	r3, [pc, #228]	; (13384 <gsm_get_internal_rtc_time+0x1a0>)
   1329e:	4798      	blx	r3
   132a0:	0003      	movs	r3, r0
   132a2:	b2da      	uxtb	r2, r3
   132a4:	4b38      	ldr	r3, [pc, #224]	; (13388 <gsm_get_internal_rtc_time+0x1a4>)
   132a6:	705a      	strb	r2, [r3, #1]
		
		cclktocken = strtok(NULL,",");
   132a8:	4b38      	ldr	r3, [pc, #224]	; (1338c <gsm_get_internal_rtc_time+0x1a8>)
   132aa:	0019      	movs	r1, r3
   132ac:	2000      	movs	r0, #0
   132ae:	4b33      	ldr	r3, [pc, #204]	; (1337c <gsm_get_internal_rtc_time+0x198>)
   132b0:	4798      	blx	r3
   132b2:	0003      	movs	r3, r0
   132b4:	603b      	str	r3, [r7, #0]
		struct_internal_rtc.Network_date = atoi(cclktocken);
   132b6:	683b      	ldr	r3, [r7, #0]
   132b8:	0018      	movs	r0, r3
   132ba:	4b32      	ldr	r3, [pc, #200]	; (13384 <gsm_get_internal_rtc_time+0x1a0>)
   132bc:	4798      	blx	r3
   132be:	0003      	movs	r3, r0
   132c0:	b2da      	uxtb	r2, r3
   132c2:	4b31      	ldr	r3, [pc, #196]	; (13388 <gsm_get_internal_rtc_time+0x1a4>)
   132c4:	709a      	strb	r2, [r3, #2]
		
		cclktocken = strtok(NULL,":");
   132c6:	4b32      	ldr	r3, [pc, #200]	; (13390 <gsm_get_internal_rtc_time+0x1ac>)
   132c8:	0019      	movs	r1, r3
   132ca:	2000      	movs	r0, #0
   132cc:	4b2b      	ldr	r3, [pc, #172]	; (1337c <gsm_get_internal_rtc_time+0x198>)
   132ce:	4798      	blx	r3
   132d0:	0003      	movs	r3, r0
   132d2:	603b      	str	r3, [r7, #0]
		struct_internal_rtc.Network_hour = atoi(cclktocken);
   132d4:	683b      	ldr	r3, [r7, #0]
   132d6:	0018      	movs	r0, r3
   132d8:	4b2a      	ldr	r3, [pc, #168]	; (13384 <gsm_get_internal_rtc_time+0x1a0>)
   132da:	4798      	blx	r3
   132dc:	0003      	movs	r3, r0
   132de:	b2da      	uxtb	r2, r3
   132e0:	4b29      	ldr	r3, [pc, #164]	; (13388 <gsm_get_internal_rtc_time+0x1a4>)
   132e2:	70da      	strb	r2, [r3, #3]
		
		cclktocken = strtok(NULL,":");
   132e4:	4b2a      	ldr	r3, [pc, #168]	; (13390 <gsm_get_internal_rtc_time+0x1ac>)
   132e6:	0019      	movs	r1, r3
   132e8:	2000      	movs	r0, #0
   132ea:	4b24      	ldr	r3, [pc, #144]	; (1337c <gsm_get_internal_rtc_time+0x198>)
   132ec:	4798      	blx	r3
   132ee:	0003      	movs	r3, r0
   132f0:	603b      	str	r3, [r7, #0]
		struct_internal_rtc.Network_minute = atoi(cclktocken);
   132f2:	683b      	ldr	r3, [r7, #0]
   132f4:	0018      	movs	r0, r3
   132f6:	4b23      	ldr	r3, [pc, #140]	; (13384 <gsm_get_internal_rtc_time+0x1a0>)
   132f8:	4798      	blx	r3
   132fa:	0003      	movs	r3, r0
   132fc:	b2da      	uxtb	r2, r3
   132fe:	4b22      	ldr	r3, [pc, #136]	; (13388 <gsm_get_internal_rtc_time+0x1a4>)
   13300:	711a      	strb	r2, [r3, #4]
		
		cclktocken = strtok(NULL,"+");
   13302:	4b24      	ldr	r3, [pc, #144]	; (13394 <gsm_get_internal_rtc_time+0x1b0>)
   13304:	0019      	movs	r1, r3
   13306:	2000      	movs	r0, #0
   13308:	4b1c      	ldr	r3, [pc, #112]	; (1337c <gsm_get_internal_rtc_time+0x198>)
   1330a:	4798      	blx	r3
   1330c:	0003      	movs	r3, r0
   1330e:	603b      	str	r3, [r7, #0]
		struct_internal_rtc.Network_second = atoi(cclktocken);
   13310:	683b      	ldr	r3, [r7, #0]
   13312:	0018      	movs	r0, r3
   13314:	4b1b      	ldr	r3, [pc, #108]	; (13384 <gsm_get_internal_rtc_time+0x1a0>)
   13316:	4798      	blx	r3
   13318:	0003      	movs	r3, r0
   1331a:	b2da      	uxtb	r2, r3
   1331c:	4b1a      	ldr	r3, [pc, #104]	; (13388 <gsm_get_internal_rtc_time+0x1a4>)
   1331e:	715a      	strb	r2, [r3, #5]
   13320:	e011      	b.n	13346 <gsm_get_internal_rtc_time+0x162>
	}
	else
	{
		struct_internal_rtc.Network_year = 0;
   13322:	4b19      	ldr	r3, [pc, #100]	; (13388 <gsm_get_internal_rtc_time+0x1a4>)
   13324:	2200      	movs	r2, #0
   13326:	701a      	strb	r2, [r3, #0]
		struct_internal_rtc.Network_month = 0;
   13328:	4b17      	ldr	r3, [pc, #92]	; (13388 <gsm_get_internal_rtc_time+0x1a4>)
   1332a:	2200      	movs	r2, #0
   1332c:	705a      	strb	r2, [r3, #1]
		struct_internal_rtc.Network_date = 0;
   1332e:	4b16      	ldr	r3, [pc, #88]	; (13388 <gsm_get_internal_rtc_time+0x1a4>)
   13330:	2200      	movs	r2, #0
   13332:	709a      	strb	r2, [r3, #2]
		struct_internal_rtc.Network_hour = 0;
   13334:	4b14      	ldr	r3, [pc, #80]	; (13388 <gsm_get_internal_rtc_time+0x1a4>)
   13336:	2200      	movs	r2, #0
   13338:	70da      	strb	r2, [r3, #3]
		struct_internal_rtc.Network_minute = 0;
   1333a:	4b13      	ldr	r3, [pc, #76]	; (13388 <gsm_get_internal_rtc_time+0x1a4>)
   1333c:	2200      	movs	r2, #0
   1333e:	711a      	strb	r2, [r3, #4]
		struct_internal_rtc.Network_second = 0;
   13340:	4b11      	ldr	r3, [pc, #68]	; (13388 <gsm_get_internal_rtc_time+0x1a4>)
   13342:	2200      	movs	r2, #0
   13344:	715a      	strb	r2, [r3, #5]
	}
	
	free(cmdx);
   13346:	68bb      	ldr	r3, [r7, #8]
   13348:	0018      	movs	r0, r3
   1334a:	4b05      	ldr	r3, [pc, #20]	; (13360 <gsm_get_internal_rtc_time+0x17c>)
   1334c:	4798      	blx	r3
	return err;
   1334e:	1dfb      	adds	r3, r7, #7
   13350:	781b      	ldrb	r3, [r3, #0]
}
   13352:	0018      	movs	r0, r3
   13354:	46bd      	mov	sp, r7
   13356:	b004      	add	sp, #16
   13358:	bdb0      	pop	{r4, r5, r7, pc}
   1335a:	46c0      	nop			; (mov r8, r8)
   1335c:	00028a49 	.word	0x00028a49
   13360:	00028ae9 	.word	0x00028ae9
   13364:	00028b57 	.word	0x00028b57
   13368:	00001388 	.word	0x00001388
   1336c:	0002980c 	.word	0x0002980c
   13370:	00029b08 	.word	0x00029b08
   13374:	000123ed 	.word	0x000123ed
   13378:	00029b14 	.word	0x00029b14
   1337c:	00028e49 	.word	0x00028e49
   13380:	00029b18 	.word	0x00029b18
   13384:	00028a3d 	.word	0x00028a3d
   13388:	20000888 	.word	0x20000888
   1338c:	00029928 	.word	0x00029928
   13390:	00029924 	.word	0x00029924
   13394:	00029b1c 	.word	0x00029b1c

00013398 <gsm_config_module>:


enum gsm_error gsm_config_module(void)
{
   13398:	b580      	push	{r7, lr}
   1339a:	af00      	add	r7, sp, #0
	if (gsm_check_module() == GSM_ERROR_NONE)
   1339c:	4b34      	ldr	r3, [pc, #208]	; (13470 <gsm_config_module+0xd8>)
   1339e:	4798      	blx	r3
   133a0:	1e03      	subs	r3, r0, #0
   133a2:	d000      	beq.n	133a6 <gsm_config_module+0xe>
   133a4:	e05e      	b.n	13464 <gsm_config_module+0xcc>
	{
		if (gsm_factory_reset() == GSM_ERROR_NONE)
   133a6:	4b33      	ldr	r3, [pc, #204]	; (13474 <gsm_config_module+0xdc>)
   133a8:	4798      	blx	r3
   133aa:	1e03      	subs	r3, r0, #0
   133ac:	d000      	beq.n	133b0 <gsm_config_module+0x18>
   133ae:	e057      	b.n	13460 <gsm_config_module+0xc8>
		{
			vTaskDelay(2000/portTICK_PERIOD_MS);
   133b0:	23fa      	movs	r3, #250	; 0xfa
   133b2:	00db      	lsls	r3, r3, #3
   133b4:	0018      	movs	r0, r3
   133b6:	4b30      	ldr	r3, [pc, #192]	; (13478 <gsm_config_module+0xe0>)
   133b8:	4798      	blx	r3
			
			if (gsm_detect_simcard() == GSM_ERROR_NONE)
   133ba:	4b30      	ldr	r3, [pc, #192]	; (1347c <gsm_config_module+0xe4>)
   133bc:	4798      	blx	r3
   133be:	1e03      	subs	r3, r0, #0
   133c0:	d14c      	bne.n	1345c <gsm_config_module+0xc4>
			{
				if (gsm_echo_off() == GSM_ERROR_NONE)
   133c2:	4b2f      	ldr	r3, [pc, #188]	; (13480 <gsm_config_module+0xe8>)
   133c4:	4798      	blx	r3
   133c6:	1e03      	subs	r3, r0, #0
   133c8:	d14e      	bne.n	13468 <gsm_config_module+0xd0>
				{
					if (gsm_set_baudrate() == GSM_ERROR_NONE)
   133ca:	4b2e      	ldr	r3, [pc, #184]	; (13484 <gsm_config_module+0xec>)
   133cc:	4798      	blx	r3
   133ce:	1e03      	subs	r3, r0, #0
   133d0:	d142      	bne.n	13458 <gsm_config_module+0xc0>
					{
						vTaskDelay(2000/portTICK_PERIOD_MS);
   133d2:	23fa      	movs	r3, #250	; 0xfa
   133d4:	00db      	lsls	r3, r3, #3
   133d6:	0018      	movs	r0, r3
   133d8:	4b27      	ldr	r3, [pc, #156]	; (13478 <gsm_config_module+0xe0>)
   133da:	4798      	blx	r3
						
						if (gsm_enable_calling_line_identification()==GSM_ERROR_NONE)
   133dc:	4b2a      	ldr	r3, [pc, #168]	; (13488 <gsm_config_module+0xf0>)
   133de:	4798      	blx	r3
   133e0:	1e03      	subs	r3, r0, #0
   133e2:	d137      	bne.n	13454 <gsm_config_module+0xbc>
						{
							if (gsm_enable_connected_line_identification_presentation() == GSM_ERROR_NONE)
   133e4:	4b29      	ldr	r3, [pc, #164]	; (1348c <gsm_config_module+0xf4>)
   133e6:	4798      	blx	r3
   133e8:	1e03      	subs	r3, r0, #0
   133ea:	d131      	bne.n	13450 <gsm_config_module+0xb8>
							{
								if (gsm_enable_list_current_calls_of_ME() == GSM_ERROR_NONE)
   133ec:	4b28      	ldr	r3, [pc, #160]	; (13490 <gsm_config_module+0xf8>)
   133ee:	4798      	blx	r3
   133f0:	1e03      	subs	r3, r0, #0
   133f2:	d12b      	bne.n	1344c <gsm_config_module+0xb4>
								{
									if (gsm_select_sms_message_formate_text_mode() == GSM_ERROR_NONE)
   133f4:	4b27      	ldr	r3, [pc, #156]	; (13494 <gsm_config_module+0xfc>)
   133f6:	4798      	blx	r3
   133f8:	1e03      	subs	r3, r0, #0
   133fa:	d125      	bne.n	13448 <gsm_config_module+0xb0>
									{
										if (gsm_set_sms_text_mode_parameter() == GSM_ERROR_NONE)
   133fc:	4b26      	ldr	r3, [pc, #152]	; (13498 <gsm_config_module+0x100>)
   133fe:	4798      	blx	r3
   13400:	1e03      	subs	r3, r0, #0
   13402:	d11f      	bne.n	13444 <gsm_config_module+0xac>
										{
											if (gsm_enable_new_sms_message_indications() == GSM_ERROR_NONE)
   13404:	4b25      	ldr	r3, [pc, #148]	; (1349c <gsm_config_module+0x104>)
   13406:	4798      	blx	r3
   13408:	1e03      	subs	r3, r0, #0
   1340a:	d119      	bne.n	13440 <gsm_config_module+0xa8>
											{
												if (gsm_enable_network_time_update() == GSM_ERROR_NONE)
   1340c:	4b24      	ldr	r3, [pc, #144]	; (134a0 <gsm_config_module+0x108>)
   1340e:	4798      	blx	r3
   13410:	1e03      	subs	r3, r0, #0
   13412:	d113      	bne.n	1343c <gsm_config_module+0xa4>
												{
													if (gsm_enable_DTMF_detection() == GSM_ERROR_NONE)
   13414:	4b23      	ldr	r3, [pc, #140]	; (134a4 <gsm_config_module+0x10c>)
   13416:	4798      	blx	r3
   13418:	1e03      	subs	r3, r0, #0
   1341a:	d10d      	bne.n	13438 <gsm_config_module+0xa0>
													{
														if (gsm_enable_sleep_mode()==GSM_ERROR_NONE)
   1341c:	4b22      	ldr	r3, [pc, #136]	; (134a8 <gsm_config_module+0x110>)
   1341e:	4798      	blx	r3
   13420:	1e03      	subs	r3, r0, #0
   13422:	d107      	bne.n	13434 <gsm_config_module+0x9c>
														{
															if (gsm_store_active_profile() == GSM_ERROR_NONE)
   13424:	4b21      	ldr	r3, [pc, #132]	; (134ac <gsm_config_module+0x114>)
   13426:	4798      	blx	r3
   13428:	1e03      	subs	r3, r0, #0
   1342a:	d101      	bne.n	13430 <gsm_config_module+0x98>
															{
																return GSM_ERROR_NONE;
   1342c:	2300      	movs	r3, #0
   1342e:	e01c      	b.n	1346a <gsm_config_module+0xd2>
															}
															else
															{
																return GSM_ERROR_CONFIG_FAILED;
   13430:	2310      	movs	r3, #16
   13432:	e01a      	b.n	1346a <gsm_config_module+0xd2>
															}
														}
														else
														{
															return GSM_ERROR_CONFIG_FAILED;
   13434:	2310      	movs	r3, #16
   13436:	e018      	b.n	1346a <gsm_config_module+0xd2>
														}
													}
													else
													{
														return GSM_ERROR_CONFIG_FAILED;
   13438:	2310      	movs	r3, #16
   1343a:	e016      	b.n	1346a <gsm_config_module+0xd2>
													}
												}
												else
												{
													return GSM_ERROR_CONFIG_FAILED;
   1343c:	2310      	movs	r3, #16
   1343e:	e014      	b.n	1346a <gsm_config_module+0xd2>
												}
											}
											else
											{
												return GSM_ERROR_CONFIG_FAILED;
   13440:	2310      	movs	r3, #16
   13442:	e012      	b.n	1346a <gsm_config_module+0xd2>
											}
										}
										else
										{
											return GSM_ERROR_CONFIG_FAILED;
   13444:	2310      	movs	r3, #16
   13446:	e010      	b.n	1346a <gsm_config_module+0xd2>
										}
									}
									else
									{
										return GSM_ERROR_CONFIG_FAILED;
   13448:	2310      	movs	r3, #16
   1344a:	e00e      	b.n	1346a <gsm_config_module+0xd2>
									}
								}
								else
								{
									return GSM_ERROR_CONFIG_FAILED;
   1344c:	2310      	movs	r3, #16
   1344e:	e00c      	b.n	1346a <gsm_config_module+0xd2>
								}
							}
							else
							{
								return GSM_ERROR_CONFIG_FAILED;
   13450:	2310      	movs	r3, #16
   13452:	e00a      	b.n	1346a <gsm_config_module+0xd2>
							}
						}
						else
						{
							return GSM_ERROR_CONFIG_FAILED;
   13454:	2310      	movs	r3, #16
   13456:	e008      	b.n	1346a <gsm_config_module+0xd2>
						}
					}
					else
					{
						return GSM_ERROR_CONFIG_FAILED;
   13458:	2310      	movs	r3, #16
   1345a:	e006      	b.n	1346a <gsm_config_module+0xd2>
					}
				}
			}
			else
			{
				return GSM_ERROR_CONFIG_FAILED;
   1345c:	2310      	movs	r3, #16
   1345e:	e004      	b.n	1346a <gsm_config_module+0xd2>
			}
		}
		else
		{
			return GSM_ERROR_CONFIG_FAILED;
   13460:	2310      	movs	r3, #16
   13462:	e002      	b.n	1346a <gsm_config_module+0xd2>
		}
	}
	else
	{
		return GSM_ERROR_CONFIG_FAILED;
   13464:	2310      	movs	r3, #16
   13466:	e000      	b.n	1346a <gsm_config_module+0xd2>
	}
	
	return GSM_ERROR_CONFIG_FAILED;
   13468:	2310      	movs	r3, #16
}
   1346a:	0018      	movs	r0, r3
   1346c:	46bd      	mov	sp, r7
   1346e:	bd80      	pop	{r7, pc}
   13470:	000125e5 	.word	0x000125e5
   13474:	00012821 	.word	0x00012821
   13478:	0001fe69 	.word	0x0001fe69
   1347c:	000126d1 	.word	0x000126d1
   13480:	00012851 	.word	0x00012851
   13484:	0001267d 	.word	0x0001267d
   13488:	00012761 	.word	0x00012761
   1348c:	00012791 	.word	0x00012791
   13490:	000127f1 	.word	0x000127f1
   13494:	00012881 	.word	0x00012881
   13498:	000128b1 	.word	0x000128b1
   1349c:	00012b01 	.word	0x00012b01
   134a0:	00012fa5 	.word	0x00012fa5
   134a4:	00012fd5 	.word	0x00012fd5
   134a8:	000127c1 	.word	0x000127c1
   134ac:	00012731 	.word	0x00012731

000134b0 <gsm_read_response_line>:

bool gsm_read_response_line(char *buffer,uint8_t length)
{
   134b0:	b580      	push	{r7, lr}
   134b2:	b084      	sub	sp, #16
   134b4:	af00      	add	r7, sp, #0
   134b6:	6078      	str	r0, [r7, #4]
   134b8:	000a      	movs	r2, r1
   134ba:	1cfb      	adds	r3, r7, #3
   134bc:	701a      	strb	r2, [r3, #0]
	bool line_non_empty = false;
   134be:	230f      	movs	r3, #15
   134c0:	18fb      	adds	r3, r7, r3
   134c2:	2200      	movs	r2, #0
   134c4:	701a      	strb	r2, [r3, #0]
	while (length > 1)
   134c6:	e026      	b.n	13516 <gsm_read_response_line+0x66>
	{
		
		uint8_t curr_rx;
		/* Fetch next buffered character received from the module */
		if (xQueueReceive(gsm_rx_queue, &curr_rx, 500 / portTICK_PERIOD_MS) == pdFALSE)
   134c8:	4b1f      	ldr	r3, [pc, #124]	; (13548 <gsm_read_response_line+0x98>)
   134ca:	6818      	ldr	r0, [r3, #0]
   134cc:	23fa      	movs	r3, #250	; 0xfa
   134ce:	005a      	lsls	r2, r3, #1
   134d0:	230e      	movs	r3, #14
   134d2:	18fb      	adds	r3, r7, r3
   134d4:	0019      	movs	r1, r3
   134d6:	4b1d      	ldr	r3, [pc, #116]	; (1354c <gsm_read_response_line+0x9c>)
   134d8:	4798      	blx	r3
   134da:	1e03      	subs	r3, r0, #0
   134dc:	d101      	bne.n	134e2 <gsm_read_response_line+0x32>
		{
			return false;
   134de:	2300      	movs	r3, #0
   134e0:	e02d      	b.n	1353e <gsm_read_response_line+0x8e>
		}

		if (curr_rx == '\n')
   134e2:	230e      	movs	r3, #14
   134e4:	18fb      	adds	r3, r7, r3
   134e6:	781b      	ldrb	r3, [r3, #0]
   134e8:	2b0a      	cmp	r3, #10
   134ea:	d014      	beq.n	13516 <gsm_read_response_line+0x66>
		{
			/* Ignore newline characters */
		}
		else if (curr_rx != '\r')
   134ec:	230e      	movs	r3, #14
   134ee:	18fb      	adds	r3, r7, r3
   134f0:	781b      	ldrb	r3, [r3, #0]
   134f2:	2b0d      	cmp	r3, #13
   134f4:	d014      	beq.n	13520 <gsm_read_response_line+0x70>
		{
			/* Non end-of-command CR character */
			*(buffer++) = curr_rx;
   134f6:	687b      	ldr	r3, [r7, #4]
   134f8:	1c5a      	adds	r2, r3, #1
   134fa:	607a      	str	r2, [r7, #4]
   134fc:	220e      	movs	r2, #14
   134fe:	18ba      	adds	r2, r7, r2
   13500:	7812      	ldrb	r2, [r2, #0]
   13502:	701a      	strb	r2, [r3, #0]
			length--;
   13504:	1cfb      	adds	r3, r7, #3
   13506:	781a      	ldrb	r2, [r3, #0]
   13508:	1cfb      	adds	r3, r7, #3
   1350a:	3a01      	subs	r2, #1
   1350c:	701a      	strb	r2, [r3, #0]
			line_non_empty = true;
   1350e:	230f      	movs	r3, #15
   13510:	18fb      	adds	r3, r7, r3
   13512:	2201      	movs	r2, #1
   13514:	701a      	strb	r2, [r3, #0]
	while (length > 1)
   13516:	1cfb      	adds	r3, r7, #3
   13518:	781b      	ldrb	r3, [r3, #0]
   1351a:	2b01      	cmp	r3, #1
   1351c:	d8d4      	bhi.n	134c8 <gsm_read_response_line+0x18>
   1351e:	e000      	b.n	13522 <gsm_read_response_line+0x72>
		}
		else
		{
			/* End of command, finished reading line */
			break;
   13520:	46c0      	nop			; (mov r8, r8)
		}
	}

	if(line_non_empty)
   13522:	230f      	movs	r3, #15
   13524:	18fb      	adds	r3, r7, r3
   13526:	781b      	ldrb	r3, [r3, #0]
   13528:	2b00      	cmp	r3, #0
   1352a:	d002      	beq.n	13532 <gsm_read_response_line+0x82>
	{
		gsm_module_exit_sleep(true);
   1352c:	2001      	movs	r0, #1
   1352e:	4b08      	ldr	r3, [pc, #32]	; (13550 <gsm_read_response_line+0xa0>)
   13530:	4798      	blx	r3
	}

	*(buffer) = '\0';
   13532:	687b      	ldr	r3, [r7, #4]
   13534:	2200      	movs	r2, #0
   13536:	701a      	strb	r2, [r3, #0]
	return line_non_empty;
   13538:	230f      	movs	r3, #15
   1353a:	18fb      	adds	r3, r7, r3
   1353c:	781b      	ldrb	r3, [r3, #0]
}
   1353e:	0018      	movs	r0, r3
   13540:	46bd      	mov	sp, r7
   13542:	b004      	add	sp, #16
   13544:	bd80      	pop	{r7, pc}
   13546:	46c0      	nop			; (mov r8, r8)
   13548:	2000041c 	.word	0x2000041c
   1354c:	0001f3c1 	.word	0x0001f3c1
   13550:	00012319 	.word	0x00012319

00013554 <gsm_responseLine_isNew_SMS_Received>:

char gsm_responseLine_isNew_SMS_Received(char *response)
{
   13554:	b580      	push	{r7, lr}
   13556:	b084      	sub	sp, #16
   13558:	af00      	add	r7, sp, #0
   1355a:	6078      	str	r0, [r7, #4]
	
	char sms_index = 0;
   1355c:	230f      	movs	r3, #15
   1355e:	18fb      	adds	r3, r7, r3
   13560:	2200      	movs	r2, #0
   13562:	701a      	strb	r2, [r3, #0]
	
	if (strstr(response,"+CMTI:"))
   13564:	4a15      	ldr	r2, [pc, #84]	; (135bc <gsm_responseLine_isNew_SMS_Received+0x68>)
   13566:	687b      	ldr	r3, [r7, #4]
   13568:	0011      	movs	r1, r2
   1356a:	0018      	movs	r0, r3
   1356c:	4b14      	ldr	r3, [pc, #80]	; (135c0 <gsm_responseLine_isNew_SMS_Received+0x6c>)
   1356e:	4798      	blx	r3
   13570:	1e03      	subs	r3, r0, #0
   13572:	d017      	beq.n	135a4 <gsm_responseLine_isNew_SMS_Received+0x50>
	{
		char *ptr_tocken;
		ptr_tocken = strtok(response,",");
   13574:	4a13      	ldr	r2, [pc, #76]	; (135c4 <gsm_responseLine_isNew_SMS_Received+0x70>)
   13576:	687b      	ldr	r3, [r7, #4]
   13578:	0011      	movs	r1, r2
   1357a:	0018      	movs	r0, r3
   1357c:	4b12      	ldr	r3, [pc, #72]	; (135c8 <gsm_responseLine_isNew_SMS_Received+0x74>)
   1357e:	4798      	blx	r3
   13580:	0003      	movs	r3, r0
   13582:	60bb      	str	r3, [r7, #8]
		ptr_tocken = strtok(NULL,",");
   13584:	4b0f      	ldr	r3, [pc, #60]	; (135c4 <gsm_responseLine_isNew_SMS_Received+0x70>)
   13586:	0019      	movs	r1, r3
   13588:	2000      	movs	r0, #0
   1358a:	4b0f      	ldr	r3, [pc, #60]	; (135c8 <gsm_responseLine_isNew_SMS_Received+0x74>)
   1358c:	4798      	blx	r3
   1358e:	0003      	movs	r3, r0
   13590:	60bb      	str	r3, [r7, #8]
		
		//RemoveSpaces(ptr_tocken);
		
		sms_index = atoi(ptr_tocken);
   13592:	68bb      	ldr	r3, [r7, #8]
   13594:	0018      	movs	r0, r3
   13596:	4b0d      	ldr	r3, [pc, #52]	; (135cc <gsm_responseLine_isNew_SMS_Received+0x78>)
   13598:	4798      	blx	r3
   1359a:	0002      	movs	r2, r0
   1359c:	230f      	movs	r3, #15
   1359e:	18fb      	adds	r3, r7, r3
   135a0:	701a      	strb	r2, [r3, #0]
   135a2:	e003      	b.n	135ac <gsm_responseLine_isNew_SMS_Received+0x58>
		
	}
	else
	{
		sms_index =  0;
   135a4:	230f      	movs	r3, #15
   135a6:	18fb      	adds	r3, r7, r3
   135a8:	2200      	movs	r2, #0
   135aa:	701a      	strb	r2, [r3, #0]
	}
	
	return sms_index;
   135ac:	230f      	movs	r3, #15
   135ae:	18fb      	adds	r3, r7, r3
   135b0:	781b      	ldrb	r3, [r3, #0]
}
   135b2:	0018      	movs	r0, r3
   135b4:	46bd      	mov	sp, r7
   135b6:	b004      	add	sp, #16
   135b8:	bd80      	pop	{r7, pc}
   135ba:	46c0      	nop			; (mov r8, r8)
   135bc:	00029b20 	.word	0x00029b20
   135c0:	00028e17 	.word	0x00028e17
   135c4:	00029928 	.word	0x00029928
   135c8:	00028e49 	.word	0x00028e49
   135cc:	00028a3d 	.word	0x00028a3d

000135d0 <gsm_responseLine_isRinging>:

bool gsm_responseLine_isRinging(char *response)
{
   135d0:	b580      	push	{r7, lr}
   135d2:	b082      	sub	sp, #8
   135d4:	af00      	add	r7, sp, #0
   135d6:	6078      	str	r0, [r7, #4]
	if (strstr(response,"RING"))
   135d8:	4a07      	ldr	r2, [pc, #28]	; (135f8 <gsm_responseLine_isRinging+0x28>)
   135da:	687b      	ldr	r3, [r7, #4]
   135dc:	0011      	movs	r1, r2
   135de:	0018      	movs	r0, r3
   135e0:	4b06      	ldr	r3, [pc, #24]	; (135fc <gsm_responseLine_isRinging+0x2c>)
   135e2:	4798      	blx	r3
   135e4:	1e03      	subs	r3, r0, #0
   135e6:	d001      	beq.n	135ec <gsm_responseLine_isRinging+0x1c>
	{
		return true;
   135e8:	2301      	movs	r3, #1
   135ea:	e000      	b.n	135ee <gsm_responseLine_isRinging+0x1e>
	}
	else
	{
		return false;
   135ec:	2300      	movs	r3, #0
	}
}
   135ee:	0018      	movs	r0, r3
   135f0:	46bd      	mov	sp, r7
   135f2:	b002      	add	sp, #8
   135f4:	bd80      	pop	{r7, pc}
   135f6:	46c0      	nop			; (mov r8, r8)
   135f8:	00029b28 	.word	0x00029b28
   135fc:	00028e17 	.word	0x00028e17

00013600 <gsm_responseLine_isCSQN>:

bool gsm_responseLine_isCSQN(char *response, volatile uint8_t *signal)
{
   13600:	b580      	push	{r7, lr}
   13602:	b084      	sub	sp, #16
   13604:	af00      	add	r7, sp, #0
   13606:	6078      	str	r0, [r7, #4]
   13608:	6039      	str	r1, [r7, #0]
//"+CSQN: 20,0"
	if(strstr(response,"+CSQN"))
   1360a:	4a4c      	ldr	r2, [pc, #304]	; (1373c <gsm_responseLine_isCSQN+0x13c>)
   1360c:	687b      	ldr	r3, [r7, #4]
   1360e:	0011      	movs	r1, r2
   13610:	0018      	movs	r0, r3
   13612:	4b4b      	ldr	r3, [pc, #300]	; (13740 <gsm_responseLine_isCSQN+0x140>)
   13614:	4798      	blx	r3
   13616:	1e03      	subs	r3, r0, #0
   13618:	d100      	bne.n	1361c <gsm_responseLine_isCSQN+0x1c>
   1361a:	e089      	b.n	13730 <gsm_responseLine_isCSQN+0x130>
	{
		if (strstr(response,"99")==NULL)
   1361c:	4a49      	ldr	r2, [pc, #292]	; (13744 <gsm_responseLine_isCSQN+0x144>)
   1361e:	687b      	ldr	r3, [r7, #4]
   13620:	0011      	movs	r1, r2
   13622:	0018      	movs	r0, r3
   13624:	4b46      	ldr	r3, [pc, #280]	; (13740 <gsm_responseLine_isCSQN+0x140>)
   13626:	4798      	blx	r3
   13628:	1e03      	subs	r3, r0, #0
   1362a:	d000      	beq.n	1362e <gsm_responseLine_isCSQN+0x2e>
   1362c:	e07b      	b.n	13726 <gsm_responseLine_isCSQN+0x126>
		{
			char *ptr_tocken;
			ptr_tocken = strtok(response,":");
   1362e:	4a46      	ldr	r2, [pc, #280]	; (13748 <gsm_responseLine_isCSQN+0x148>)
   13630:	687b      	ldr	r3, [r7, #4]
   13632:	0011      	movs	r1, r2
   13634:	0018      	movs	r0, r3
   13636:	4b45      	ldr	r3, [pc, #276]	; (1374c <gsm_responseLine_isCSQN+0x14c>)
   13638:	4798      	blx	r3
   1363a:	0003      	movs	r3, r0
   1363c:	60fb      	str	r3, [r7, #12]
			ptr_tocken = strtok(NULL,":");
   1363e:	4b42      	ldr	r3, [pc, #264]	; (13748 <gsm_responseLine_isCSQN+0x148>)
   13640:	0019      	movs	r1, r3
   13642:	2000      	movs	r0, #0
   13644:	4b41      	ldr	r3, [pc, #260]	; (1374c <gsm_responseLine_isCSQN+0x14c>)
   13646:	4798      	blx	r3
   13648:	0003      	movs	r3, r0
   1364a:	60fb      	str	r3, [r7, #12]
			ptr_tocken = strtok(ptr_tocken,",");
   1364c:	4a40      	ldr	r2, [pc, #256]	; (13750 <gsm_responseLine_isCSQN+0x150>)
   1364e:	68fb      	ldr	r3, [r7, #12]
   13650:	0011      	movs	r1, r2
   13652:	0018      	movs	r0, r3
   13654:	4b3d      	ldr	r3, [pc, #244]	; (1374c <gsm_responseLine_isCSQN+0x14c>)
   13656:	4798      	blx	r3
   13658:	0003      	movs	r3, r0
   1365a:	60fb      	str	r3, [r7, #12]
			//RemoveSpaces(ptr_tocken);
			uint8_t nw = atoi(ptr_tocken);
   1365c:	68fb      	ldr	r3, [r7, #12]
   1365e:	0018      	movs	r0, r3
   13660:	4b3c      	ldr	r3, [pc, #240]	; (13754 <gsm_responseLine_isCSQN+0x154>)
   13662:	4798      	blx	r3
   13664:	0002      	movs	r2, r0
   13666:	230b      	movs	r3, #11
   13668:	18fb      	adds	r3, r7, r3
   1366a:	701a      	strb	r2, [r3, #0]
			if (nw==0 || nw==1 || nw== 99)
   1366c:	230b      	movs	r3, #11
   1366e:	18fb      	adds	r3, r7, r3
   13670:	781b      	ldrb	r3, [r3, #0]
   13672:	2b00      	cmp	r3, #0
   13674:	d009      	beq.n	1368a <gsm_responseLine_isCSQN+0x8a>
   13676:	230b      	movs	r3, #11
   13678:	18fb      	adds	r3, r7, r3
   1367a:	781b      	ldrb	r3, [r3, #0]
   1367c:	2b01      	cmp	r3, #1
   1367e:	d004      	beq.n	1368a <gsm_responseLine_isCSQN+0x8a>
   13680:	230b      	movs	r3, #11
   13682:	18fb      	adds	r3, r7, r3
   13684:	781b      	ldrb	r3, [r3, #0]
   13686:	2b63      	cmp	r3, #99	; 0x63
   13688:	d103      	bne.n	13692 <gsm_responseLine_isCSQN+0x92>
			{
				*signal= 0;
   1368a:	683b      	ldr	r3, [r7, #0]
   1368c:	2200      	movs	r2, #0
   1368e:	701a      	strb	r2, [r3, #0]
   13690:	e04c      	b.n	1372c <gsm_responseLine_isCSQN+0x12c>
			}
			else
			{
				if (nw>=2 && nw<=7)
   13692:	230b      	movs	r3, #11
   13694:	18fb      	adds	r3, r7, r3
   13696:	781b      	ldrb	r3, [r3, #0]
   13698:	2b01      	cmp	r3, #1
   1369a:	d908      	bls.n	136ae <gsm_responseLine_isCSQN+0xae>
   1369c:	230b      	movs	r3, #11
   1369e:	18fb      	adds	r3, r7, r3
   136a0:	781b      	ldrb	r3, [r3, #0]
   136a2:	2b07      	cmp	r3, #7
   136a4:	d803      	bhi.n	136ae <gsm_responseLine_isCSQN+0xae>
				{
					*signal= 1;
   136a6:	683b      	ldr	r3, [r7, #0]
   136a8:	2201      	movs	r2, #1
   136aa:	701a      	strb	r2, [r3, #0]
   136ac:	e03e      	b.n	1372c <gsm_responseLine_isCSQN+0x12c>
				}
				else if (nw>=8 && nw<=13)
   136ae:	230b      	movs	r3, #11
   136b0:	18fb      	adds	r3, r7, r3
   136b2:	781b      	ldrb	r3, [r3, #0]
   136b4:	2b07      	cmp	r3, #7
   136b6:	d908      	bls.n	136ca <gsm_responseLine_isCSQN+0xca>
   136b8:	230b      	movs	r3, #11
   136ba:	18fb      	adds	r3, r7, r3
   136bc:	781b      	ldrb	r3, [r3, #0]
   136be:	2b0d      	cmp	r3, #13
   136c0:	d803      	bhi.n	136ca <gsm_responseLine_isCSQN+0xca>
				{
					*signal= 2;
   136c2:	683b      	ldr	r3, [r7, #0]
   136c4:	2202      	movs	r2, #2
   136c6:	701a      	strb	r2, [r3, #0]
   136c8:	e030      	b.n	1372c <gsm_responseLine_isCSQN+0x12c>
				}
				else if (nw>=14 && nw<=19)
   136ca:	230b      	movs	r3, #11
   136cc:	18fb      	adds	r3, r7, r3
   136ce:	781b      	ldrb	r3, [r3, #0]
   136d0:	2b0d      	cmp	r3, #13
   136d2:	d908      	bls.n	136e6 <gsm_responseLine_isCSQN+0xe6>
   136d4:	230b      	movs	r3, #11
   136d6:	18fb      	adds	r3, r7, r3
   136d8:	781b      	ldrb	r3, [r3, #0]
   136da:	2b13      	cmp	r3, #19
   136dc:	d803      	bhi.n	136e6 <gsm_responseLine_isCSQN+0xe6>
				{
					*signal= 3;
   136de:	683b      	ldr	r3, [r7, #0]
   136e0:	2203      	movs	r2, #3
   136e2:	701a      	strb	r2, [r3, #0]
   136e4:	e022      	b.n	1372c <gsm_responseLine_isCSQN+0x12c>
				}
				else if (nw>=20 && nw<=25)
   136e6:	230b      	movs	r3, #11
   136e8:	18fb      	adds	r3, r7, r3
   136ea:	781b      	ldrb	r3, [r3, #0]
   136ec:	2b13      	cmp	r3, #19
   136ee:	d908      	bls.n	13702 <gsm_responseLine_isCSQN+0x102>
   136f0:	230b      	movs	r3, #11
   136f2:	18fb      	adds	r3, r7, r3
   136f4:	781b      	ldrb	r3, [r3, #0]
   136f6:	2b19      	cmp	r3, #25
   136f8:	d803      	bhi.n	13702 <gsm_responseLine_isCSQN+0x102>
				{
					*signal= 4;
   136fa:	683b      	ldr	r3, [r7, #0]
   136fc:	2204      	movs	r2, #4
   136fe:	701a      	strb	r2, [r3, #0]
   13700:	e014      	b.n	1372c <gsm_responseLine_isCSQN+0x12c>
				}
				else if (nw>=26 && nw<=31)
   13702:	230b      	movs	r3, #11
   13704:	18fb      	adds	r3, r7, r3
   13706:	781b      	ldrb	r3, [r3, #0]
   13708:	2b19      	cmp	r3, #25
   1370a:	d908      	bls.n	1371e <gsm_responseLine_isCSQN+0x11e>
   1370c:	230b      	movs	r3, #11
   1370e:	18fb      	adds	r3, r7, r3
   13710:	781b      	ldrb	r3, [r3, #0]
   13712:	2b1f      	cmp	r3, #31
   13714:	d803      	bhi.n	1371e <gsm_responseLine_isCSQN+0x11e>
				{
					*signal= 5;
   13716:	683b      	ldr	r3, [r7, #0]
   13718:	2205      	movs	r2, #5
   1371a:	701a      	strb	r2, [r3, #0]
   1371c:	e006      	b.n	1372c <gsm_responseLine_isCSQN+0x12c>
				}
				else
				{
					*signal= 0;
   1371e:	683b      	ldr	r3, [r7, #0]
   13720:	2200      	movs	r2, #0
   13722:	701a      	strb	r2, [r3, #0]
   13724:	e002      	b.n	1372c <gsm_responseLine_isCSQN+0x12c>
				}
			}
		}
		else
		{
			*signal= 0;
   13726:	683b      	ldr	r3, [r7, #0]
   13728:	2200      	movs	r2, #0
   1372a:	701a      	strb	r2, [r3, #0]
		}
		return true;
   1372c:	2301      	movs	r3, #1
   1372e:	e000      	b.n	13732 <gsm_responseLine_isCSQN+0x132>
	}
	
	return false;
   13730:	2300      	movs	r3, #0
}
   13732:	0018      	movs	r0, r3
   13734:	46bd      	mov	sp, r7
   13736:	b004      	add	sp, #16
   13738:	bd80      	pop	{r7, pc}
   1373a:	46c0      	nop			; (mov r8, r8)
   1373c:	00029b30 	.word	0x00029b30
   13740:	00028e17 	.word	0x00028e17
   13744:	00029990 	.word	0x00029990
   13748:	00029924 	.word	0x00029924
   1374c:	00028e49 	.word	0x00028e49
   13750:	00029928 	.word	0x00029928
   13754:	00028a3d 	.word	0x00028a3d

00013758 <gsm_responseLine_get_IncommingCallNo>:

bool gsm_responseLine_get_IncommingCallNo(char *response,char *phone_number)
{
   13758:	b580      	push	{r7, lr}
   1375a:	b084      	sub	sp, #16
   1375c:	af00      	add	r7, sp, #0
   1375e:	6078      	str	r0, [r7, #4]
   13760:	6039      	str	r1, [r7, #0]
	if(strstr(response,"+CLIP"))
   13762:	4a1e      	ldr	r2, [pc, #120]	; (137dc <gsm_responseLine_get_IncommingCallNo+0x84>)
   13764:	687b      	ldr	r3, [r7, #4]
   13766:	0011      	movs	r1, r2
   13768:	0018      	movs	r0, r3
   1376a:	4b1d      	ldr	r3, [pc, #116]	; (137e0 <gsm_responseLine_get_IncommingCallNo+0x88>)
   1376c:	4798      	blx	r3
   1376e:	1e03      	subs	r3, r0, #0
   13770:	d02e      	beq.n	137d0 <gsm_responseLine_get_IncommingCallNo+0x78>
	{
		char *ptr_tocken;
		ptr_tocken = strtok(response,":");
   13772:	4a1c      	ldr	r2, [pc, #112]	; (137e4 <gsm_responseLine_get_IncommingCallNo+0x8c>)
   13774:	687b      	ldr	r3, [r7, #4]
   13776:	0011      	movs	r1, r2
   13778:	0018      	movs	r0, r3
   1377a:	4b1b      	ldr	r3, [pc, #108]	; (137e8 <gsm_responseLine_get_IncommingCallNo+0x90>)
   1377c:	4798      	blx	r3
   1377e:	0003      	movs	r3, r0
   13780:	60fb      	str	r3, [r7, #12]
		ptr_tocken = strtok(NULL,",");
   13782:	4b1a      	ldr	r3, [pc, #104]	; (137ec <gsm_responseLine_get_IncommingCallNo+0x94>)
   13784:	0019      	movs	r1, r3
   13786:	2000      	movs	r0, #0
   13788:	4b17      	ldr	r3, [pc, #92]	; (137e8 <gsm_responseLine_get_IncommingCallNo+0x90>)
   1378a:	4798      	blx	r3
   1378c:	0003      	movs	r3, r0
   1378e:	60fb      	str	r3, [r7, #12]
		ptr_tocken = strtok(ptr_tocken,"\"");
   13790:	4a17      	ldr	r2, [pc, #92]	; (137f0 <gsm_responseLine_get_IncommingCallNo+0x98>)
   13792:	68fb      	ldr	r3, [r7, #12]
   13794:	0011      	movs	r1, r2
   13796:	0018      	movs	r0, r3
   13798:	4b13      	ldr	r3, [pc, #76]	; (137e8 <gsm_responseLine_get_IncommingCallNo+0x90>)
   1379a:	4798      	blx	r3
   1379c:	0003      	movs	r3, r0
   1379e:	60fb      	str	r3, [r7, #12]
		ptr_tocken = strtok(NULL,"\"");
   137a0:	4b13      	ldr	r3, [pc, #76]	; (137f0 <gsm_responseLine_get_IncommingCallNo+0x98>)
   137a2:	0019      	movs	r1, r3
   137a4:	2000      	movs	r0, #0
   137a6:	4b10      	ldr	r3, [pc, #64]	; (137e8 <gsm_responseLine_get_IncommingCallNo+0x90>)
   137a8:	4798      	blx	r3
   137aa:	0003      	movs	r3, r0
   137ac:	60fb      	str	r3, [r7, #12]
		
		if (!strstr(ptr_tocken,"+"))
   137ae:	68fb      	ldr	r3, [r7, #12]
   137b0:	212b      	movs	r1, #43	; 0x2b
   137b2:	0018      	movs	r0, r3
   137b4:	4b0f      	ldr	r3, [pc, #60]	; (137f4 <gsm_responseLine_get_IncommingCallNo+0x9c>)
   137b6:	4798      	blx	r3
   137b8:	1e03      	subs	r3, r0, #0
   137ba:	d101      	bne.n	137c0 <gsm_responseLine_get_IncommingCallNo+0x68>
		{
			return false;
   137bc:	2300      	movs	r3, #0
   137be:	e008      	b.n	137d2 <gsm_responseLine_get_IncommingCallNo+0x7a>
		}
		strcpy(phone_number, (char *)(ptr_tocken));
   137c0:	68fa      	ldr	r2, [r7, #12]
   137c2:	683b      	ldr	r3, [r7, #0]
   137c4:	0011      	movs	r1, r2
   137c6:	0018      	movs	r0, r3
   137c8:	4b0b      	ldr	r3, [pc, #44]	; (137f8 <gsm_responseLine_get_IncommingCallNo+0xa0>)
   137ca:	4798      	blx	r3
		return true;
   137cc:	2301      	movs	r3, #1
   137ce:	e000      	b.n	137d2 <gsm_responseLine_get_IncommingCallNo+0x7a>
	}
	else
	{
		return false;
   137d0:	2300      	movs	r3, #0
	}
}
   137d2:	0018      	movs	r0, r3
   137d4:	46bd      	mov	sp, r7
   137d6:	b004      	add	sp, #16
   137d8:	bd80      	pop	{r7, pc}
   137da:	46c0      	nop			; (mov r8, r8)
   137dc:	00029b38 	.word	0x00029b38
   137e0:	00028e17 	.word	0x00028e17
   137e4:	00029924 	.word	0x00029924
   137e8:	00028e49 	.word	0x00028e49
   137ec:	00029928 	.word	0x00029928
   137f0:	00029b14 	.word	0x00029b14
   137f4:	00028dbb 	.word	0x00028dbb
   137f8:	00028dd7 	.word	0x00028dd7

000137fc <gsm_responseLine_isCallCut>:

bool gsm_responseLine_isCallCut(char *response)
{
   137fc:	b580      	push	{r7, lr}
   137fe:	b082      	sub	sp, #8
   13800:	af00      	add	r7, sp, #0
   13802:	6078      	str	r0, [r7, #4]
	if (strstr(response,"NO CARRIER"))
   13804:	4a16      	ldr	r2, [pc, #88]	; (13860 <gsm_responseLine_isCallCut+0x64>)
   13806:	687b      	ldr	r3, [r7, #4]
   13808:	0011      	movs	r1, r2
   1380a:	0018      	movs	r0, r3
   1380c:	4b15      	ldr	r3, [pc, #84]	; (13864 <gsm_responseLine_isCallCut+0x68>)
   1380e:	4798      	blx	r3
   13810:	1e03      	subs	r3, r0, #0
   13812:	d001      	beq.n	13818 <gsm_responseLine_isCallCut+0x1c>
	{
		return true;
   13814:	2301      	movs	r3, #1
   13816:	e01e      	b.n	13856 <gsm_responseLine_isCallCut+0x5a>
	}
	else if (strstr(response,"BUSY"))
   13818:	4a13      	ldr	r2, [pc, #76]	; (13868 <gsm_responseLine_isCallCut+0x6c>)
   1381a:	687b      	ldr	r3, [r7, #4]
   1381c:	0011      	movs	r1, r2
   1381e:	0018      	movs	r0, r3
   13820:	4b10      	ldr	r3, [pc, #64]	; (13864 <gsm_responseLine_isCallCut+0x68>)
   13822:	4798      	blx	r3
   13824:	1e03      	subs	r3, r0, #0
   13826:	d001      	beq.n	1382c <gsm_responseLine_isCallCut+0x30>
	{
		return true;
   13828:	2301      	movs	r3, #1
   1382a:	e014      	b.n	13856 <gsm_responseLine_isCallCut+0x5a>
	}
	else if (strstr(response,"NO ANSWER"))
   1382c:	4a0f      	ldr	r2, [pc, #60]	; (1386c <gsm_responseLine_isCallCut+0x70>)
   1382e:	687b      	ldr	r3, [r7, #4]
   13830:	0011      	movs	r1, r2
   13832:	0018      	movs	r0, r3
   13834:	4b0b      	ldr	r3, [pc, #44]	; (13864 <gsm_responseLine_isCallCut+0x68>)
   13836:	4798      	blx	r3
   13838:	1e03      	subs	r3, r0, #0
   1383a:	d001      	beq.n	13840 <gsm_responseLine_isCallCut+0x44>
	{
		return true;
   1383c:	2301      	movs	r3, #1
   1383e:	e00a      	b.n	13856 <gsm_responseLine_isCallCut+0x5a>
	}
	else if (strstr(response,"ERROR"))
   13840:	4a0b      	ldr	r2, [pc, #44]	; (13870 <gsm_responseLine_isCallCut+0x74>)
   13842:	687b      	ldr	r3, [r7, #4]
   13844:	0011      	movs	r1, r2
   13846:	0018      	movs	r0, r3
   13848:	4b06      	ldr	r3, [pc, #24]	; (13864 <gsm_responseLine_isCallCut+0x68>)
   1384a:	4798      	blx	r3
   1384c:	1e03      	subs	r3, r0, #0
   1384e:	d001      	beq.n	13854 <gsm_responseLine_isCallCut+0x58>
	{
		return true;
   13850:	2301      	movs	r3, #1
   13852:	e000      	b.n	13856 <gsm_responseLine_isCallCut+0x5a>
	}

	return false;
   13854:	2300      	movs	r3, #0
}
   13856:	0018      	movs	r0, r3
   13858:	46bd      	mov	sp, r7
   1385a:	b002      	add	sp, #8
   1385c:	bd80      	pop	{r7, pc}
   1385e:	46c0      	nop			; (mov r8, r8)
   13860:	00029b40 	.word	0x00029b40
   13864:	00028e17 	.word	0x00028e17
   13868:	00029b4c 	.word	0x00029b4c
   1386c:	00029b54 	.word	0x00029b54
   13870:	00029804 	.word	0x00029804

00013874 <gsm_responseLine_isNew_DTMF_Command_Received>:

bool gsm_responseLine_isNew_DTMF_Command_Received(char *response)
{
   13874:	b580      	push	{r7, lr}
   13876:	b082      	sub	sp, #8
   13878:	af00      	add	r7, sp, #0
   1387a:	6078      	str	r0, [r7, #4]
	if (strstr(response,"+DTMF:"))
   1387c:	4a07      	ldr	r2, [pc, #28]	; (1389c <gsm_responseLine_isNew_DTMF_Command_Received+0x28>)
   1387e:	687b      	ldr	r3, [r7, #4]
   13880:	0011      	movs	r1, r2
   13882:	0018      	movs	r0, r3
   13884:	4b06      	ldr	r3, [pc, #24]	; (138a0 <gsm_responseLine_isNew_DTMF_Command_Received+0x2c>)
   13886:	4798      	blx	r3
   13888:	1e03      	subs	r3, r0, #0
   1388a:	d001      	beq.n	13890 <gsm_responseLine_isNew_DTMF_Command_Received+0x1c>
	{
		return true;
   1388c:	2301      	movs	r3, #1
   1388e:	e000      	b.n	13892 <gsm_responseLine_isNew_DTMF_Command_Received+0x1e>
	}
	else
	{
		return false;
   13890:	2300      	movs	r3, #0
	}
}
   13892:	0018      	movs	r0, r3
   13894:	46bd      	mov	sp, r7
   13896:	b002      	add	sp, #8
   13898:	bd80      	pop	{r7, pc}
   1389a:	46c0      	nop			; (mov r8, r8)
   1389c:	00029b60 	.word	0x00029b60
   138a0:	00028e17 	.word	0x00028e17

000138a4 <gsm_responseLine_is_StopSound_Received>:

bool gsm_responseLine_is_StopSound_Received(char *response)
{
   138a4:	b580      	push	{r7, lr}
   138a6:	b082      	sub	sp, #8
   138a8:	af00      	add	r7, sp, #0
   138aa:	6078      	str	r0, [r7, #4]
	if (strstr(response,"+CREC: 0"))
   138ac:	4a07      	ldr	r2, [pc, #28]	; (138cc <gsm_responseLine_is_StopSound_Received+0x28>)
   138ae:	687b      	ldr	r3, [r7, #4]
   138b0:	0011      	movs	r1, r2
   138b2:	0018      	movs	r0, r3
   138b4:	4b06      	ldr	r3, [pc, #24]	; (138d0 <gsm_responseLine_is_StopSound_Received+0x2c>)
   138b6:	4798      	blx	r3
   138b8:	1e03      	subs	r3, r0, #0
   138ba:	d001      	beq.n	138c0 <gsm_responseLine_is_StopSound_Received+0x1c>
	{
		return true;
   138bc:	2301      	movs	r3, #1
   138be:	e000      	b.n	138c2 <gsm_responseLine_is_StopSound_Received+0x1e>
	}
	else
	{
		return false;
   138c0:	2300      	movs	r3, #0
	}
}
   138c2:	0018      	movs	r0, r3
   138c4:	46bd      	mov	sp, r7
   138c6:	b002      	add	sp, #8
   138c8:	bd80      	pop	{r7, pc}
   138ca:	46c0      	nop			; (mov r8, r8)
   138cc:	00029b68 	.word	0x00029b68
   138d0:	00028e17 	.word	0x00028e17

000138d4 <system_pinmux_get_group_from_gpio_pin>:
{
   138d4:	b580      	push	{r7, lr}
   138d6:	b084      	sub	sp, #16
   138d8:	af00      	add	r7, sp, #0
   138da:	0002      	movs	r2, r0
   138dc:	1dfb      	adds	r3, r7, #7
   138de:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   138e0:	230f      	movs	r3, #15
   138e2:	18fb      	adds	r3, r7, r3
   138e4:	1dfa      	adds	r2, r7, #7
   138e6:	7812      	ldrb	r2, [r2, #0]
   138e8:	09d2      	lsrs	r2, r2, #7
   138ea:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   138ec:	230e      	movs	r3, #14
   138ee:	18fb      	adds	r3, r7, r3
   138f0:	1dfa      	adds	r2, r7, #7
   138f2:	7812      	ldrb	r2, [r2, #0]
   138f4:	0952      	lsrs	r2, r2, #5
   138f6:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   138f8:	4b0d      	ldr	r3, [pc, #52]	; (13930 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   138fa:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   138fc:	230f      	movs	r3, #15
   138fe:	18fb      	adds	r3, r7, r3
   13900:	781b      	ldrb	r3, [r3, #0]
   13902:	2b00      	cmp	r3, #0
   13904:	d10f      	bne.n	13926 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   13906:	230f      	movs	r3, #15
   13908:	18fb      	adds	r3, r7, r3
   1390a:	781b      	ldrb	r3, [r3, #0]
   1390c:	009b      	lsls	r3, r3, #2
   1390e:	2210      	movs	r2, #16
   13910:	4694      	mov	ip, r2
   13912:	44bc      	add	ip, r7
   13914:	4463      	add	r3, ip
   13916:	3b08      	subs	r3, #8
   13918:	681a      	ldr	r2, [r3, #0]
   1391a:	230e      	movs	r3, #14
   1391c:	18fb      	adds	r3, r7, r3
   1391e:	781b      	ldrb	r3, [r3, #0]
   13920:	01db      	lsls	r3, r3, #7
   13922:	18d3      	adds	r3, r2, r3
   13924:	e000      	b.n	13928 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   13926:	2300      	movs	r3, #0
}
   13928:	0018      	movs	r0, r3
   1392a:	46bd      	mov	sp, r7
   1392c:	b004      	add	sp, #16
   1392e:	bd80      	pop	{r7, pc}
   13930:	41004400 	.word	0x41004400

00013934 <port_get_group_from_gpio_pin>:
{
   13934:	b580      	push	{r7, lr}
   13936:	b082      	sub	sp, #8
   13938:	af00      	add	r7, sp, #0
   1393a:	0002      	movs	r2, r0
   1393c:	1dfb      	adds	r3, r7, #7
   1393e:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   13940:	1dfb      	adds	r3, r7, #7
   13942:	781b      	ldrb	r3, [r3, #0]
   13944:	0018      	movs	r0, r3
   13946:	4b03      	ldr	r3, [pc, #12]	; (13954 <port_get_group_from_gpio_pin+0x20>)
   13948:	4798      	blx	r3
   1394a:	0003      	movs	r3, r0
}
   1394c:	0018      	movs	r0, r3
   1394e:	46bd      	mov	sp, r7
   13950:	b002      	add	sp, #8
   13952:	bd80      	pop	{r7, pc}
   13954:	000138d5 	.word	0x000138d5

00013958 <port_get_config_defaults>:
{
   13958:	b580      	push	{r7, lr}
   1395a:	b082      	sub	sp, #8
   1395c:	af00      	add	r7, sp, #0
   1395e:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
   13960:	687b      	ldr	r3, [r7, #4]
   13962:	2200      	movs	r2, #0
   13964:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   13966:	687b      	ldr	r3, [r7, #4]
   13968:	2201      	movs	r2, #1
   1396a:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
   1396c:	687b      	ldr	r3, [r7, #4]
   1396e:	2200      	movs	r2, #0
   13970:	709a      	strb	r2, [r3, #2]
}
   13972:	46c0      	nop			; (mov r8, r8)
   13974:	46bd      	mov	sp, r7
   13976:	b002      	add	sp, #8
   13978:	bd80      	pop	{r7, pc}
	...

0001397c <port_pin_set_output_level>:
{
   1397c:	b580      	push	{r7, lr}
   1397e:	b084      	sub	sp, #16
   13980:	af00      	add	r7, sp, #0
   13982:	0002      	movs	r2, r0
   13984:	1dfb      	adds	r3, r7, #7
   13986:	701a      	strb	r2, [r3, #0]
   13988:	1dbb      	adds	r3, r7, #6
   1398a:	1c0a      	adds	r2, r1, #0
   1398c:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   1398e:	1dfb      	adds	r3, r7, #7
   13990:	781b      	ldrb	r3, [r3, #0]
   13992:	0018      	movs	r0, r3
   13994:	4b0d      	ldr	r3, [pc, #52]	; (139cc <port_pin_set_output_level+0x50>)
   13996:	4798      	blx	r3
   13998:	0003      	movs	r3, r0
   1399a:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   1399c:	1dfb      	adds	r3, r7, #7
   1399e:	781b      	ldrb	r3, [r3, #0]
   139a0:	221f      	movs	r2, #31
   139a2:	4013      	ands	r3, r2
   139a4:	2201      	movs	r2, #1
   139a6:	409a      	lsls	r2, r3
   139a8:	0013      	movs	r3, r2
   139aa:	60bb      	str	r3, [r7, #8]
	if (level) {
   139ac:	1dbb      	adds	r3, r7, #6
   139ae:	781b      	ldrb	r3, [r3, #0]
   139b0:	2b00      	cmp	r3, #0
   139b2:	d003      	beq.n	139bc <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   139b4:	68fb      	ldr	r3, [r7, #12]
   139b6:	68ba      	ldr	r2, [r7, #8]
   139b8:	619a      	str	r2, [r3, #24]
}
   139ba:	e002      	b.n	139c2 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   139bc:	68fb      	ldr	r3, [r7, #12]
   139be:	68ba      	ldr	r2, [r7, #8]
   139c0:	615a      	str	r2, [r3, #20]
}
   139c2:	46c0      	nop			; (mov r8, r8)
   139c4:	46bd      	mov	sp, r7
   139c6:	b004      	add	sp, #16
   139c8:	bd80      	pop	{r7, pc}
   139ca:	46c0      	nop			; (mov r8, r8)
   139cc:	00013935 	.word	0x00013935

000139d0 <LCD_init>:
#include <asf.h>
#include "lcd_driver.h"


void LCD_init()
{
   139d0:	b5f0      	push	{r4, r5, r6, r7, lr}
   139d2:	b08b      	sub	sp, #44	; 0x2c
   139d4:	af00      	add	r7, sp, #0
	uint8_t cols = LCD_COLS;
   139d6:	230b      	movs	r3, #11
   139d8:	2218      	movs	r2, #24
   139da:	4694      	mov	ip, r2
   139dc:	44bc      	add	ip, r7
   139de:	4463      	add	r3, ip
   139e0:	2210      	movs	r2, #16
   139e2:	701a      	strb	r2, [r3, #0]
	uint8_t lines = LCD_ROWS;
   139e4:	230a      	movs	r3, #10
   139e6:	2218      	movs	r2, #24
   139e8:	4694      	mov	ip, r2
   139ea:	44bc      	add	ip, r7
   139ec:	4463      	add	r3, ip
   139ee:	2202      	movs	r2, #2
   139f0:	701a      	strb	r2, [r3, #0]
	delay_init();
   139f2:	4b90      	ldr	r3, [pc, #576]	; (13c34 <LCD_init+0x264>)
   139f4:	4798      	blx	r3
	_rs_pin     = LCD_RS_PIN;
   139f6:	4b90      	ldr	r3, [pc, #576]	; (13c38 <LCD_init+0x268>)
   139f8:	223f      	movs	r2, #63	; 0x3f
   139fa:	701a      	strb	r2, [r3, #0]
	_enable_pin = LCD_EN_PIN;
   139fc:	4b8f      	ldr	r3, [pc, #572]	; (13c3c <LCD_init+0x26c>)
   139fe:	223e      	movs	r2, #62	; 0x3e
   13a00:	701a      	strb	r2, [r3, #0]
	
	_data_pins[0] = LCD_DATA_LINE_D4_PIN;
   13a02:	4b8f      	ldr	r3, [pc, #572]	; (13c40 <LCD_init+0x270>)
   13a04:	2221      	movs	r2, #33	; 0x21
   13a06:	701a      	strb	r2, [r3, #0]
	_data_pins[1] = LCD_DATA_LINE_D5_PIN;
   13a08:	4b8d      	ldr	r3, [pc, #564]	; (13c40 <LCD_init+0x270>)
   13a0a:	2220      	movs	r2, #32
   13a0c:	705a      	strb	r2, [r3, #1]
	_data_pins[2] = LCD_DATA_LINE_D6_PIN;
   13a0e:	4b8c      	ldr	r3, [pc, #560]	; (13c40 <LCD_init+0x270>)
   13a10:	2223      	movs	r2, #35	; 0x23
   13a12:	709a      	strb	r2, [r3, #2]
	_data_pins[3] = LCD_DATA_LINE_D7_PIN;
   13a14:	4b8a      	ldr	r3, [pc, #552]	; (13c40 <LCD_init+0x270>)
   13a16:	2222      	movs	r2, #34	; 0x22
   13a18:	70da      	strb	r2, [r3, #3]

	_displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
   13a1a:	4b8a      	ldr	r3, [pc, #552]	; (13c44 <LCD_init+0x274>)
   13a1c:	2200      	movs	r2, #0
   13a1e:	701a      	strb	r2, [r3, #0]
	
	if (lines > 1)
   13a20:	230a      	movs	r3, #10
   13a22:	2218      	movs	r2, #24
   13a24:	4694      	mov	ip, r2
   13a26:	44bc      	add	ip, r7
   13a28:	4463      	add	r3, ip
   13a2a:	781b      	ldrb	r3, [r3, #0]
   13a2c:	2b01      	cmp	r3, #1
   13a2e:	d906      	bls.n	13a3e <LCD_init+0x6e>
	{
		_displayfunction |= LCD_2LINE;
   13a30:	4b84      	ldr	r3, [pc, #528]	; (13c44 <LCD_init+0x274>)
   13a32:	781b      	ldrb	r3, [r3, #0]
   13a34:	2208      	movs	r2, #8
   13a36:	4313      	orrs	r3, r2
   13a38:	b2da      	uxtb	r2, r3
   13a3a:	4b82      	ldr	r3, [pc, #520]	; (13c44 <LCD_init+0x274>)
   13a3c:	701a      	strb	r2, [r3, #0]
	}
	_numlines = lines;
   13a3e:	4b82      	ldr	r3, [pc, #520]	; (13c48 <LCD_init+0x278>)
   13a40:	220a      	movs	r2, #10
   13a42:	2118      	movs	r1, #24
   13a44:	468c      	mov	ip, r1
   13a46:	44bc      	add	ip, r7
   13a48:	4462      	add	r2, ip
   13a4a:	7812      	ldrb	r2, [r2, #0]
   13a4c:	701a      	strb	r2, [r3, #0]
	LCD_setRowOffsets(0x00, 0x40, 0x00 + cols, 0x40 + cols);
   13a4e:	230b      	movs	r3, #11
   13a50:	2218      	movs	r2, #24
   13a52:	4694      	mov	ip, r2
   13a54:	44bc      	add	ip, r7
   13a56:	4463      	add	r3, ip
   13a58:	781a      	ldrb	r2, [r3, #0]
   13a5a:	230b      	movs	r3, #11
   13a5c:	2118      	movs	r1, #24
   13a5e:	468c      	mov	ip, r1
   13a60:	44bc      	add	ip, r7
   13a62:	4463      	add	r3, ip
   13a64:	781b      	ldrb	r3, [r3, #0]
   13a66:	3340      	adds	r3, #64	; 0x40
   13a68:	2140      	movs	r1, #64	; 0x40
   13a6a:	2000      	movs	r0, #0
   13a6c:	4c77      	ldr	r4, [pc, #476]	; (13c4c <LCD_init+0x27c>)
   13a6e:	47a0      	blx	r4
	struct port_config config_port_pin;
	port_get_config_defaults(&config_port_pin);
   13a70:	231c      	movs	r3, #28
   13a72:	18fb      	adds	r3, r7, r3
   13a74:	0018      	movs	r0, r3
   13a76:	4b76      	ldr	r3, [pc, #472]	; (13c50 <LCD_init+0x280>)
   13a78:	4798      	blx	r3
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
   13a7a:	231c      	movs	r3, #28
   13a7c:	18fb      	adds	r3, r7, r3
   13a7e:	2201      	movs	r2, #1
   13a80:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(_rs_pin,&config_port_pin);
   13a82:	4b6d      	ldr	r3, [pc, #436]	; (13c38 <LCD_init+0x268>)
   13a84:	781b      	ldrb	r3, [r3, #0]
   13a86:	221c      	movs	r2, #28
   13a88:	18ba      	adds	r2, r7, r2
   13a8a:	0011      	movs	r1, r2
   13a8c:	0018      	movs	r0, r3
   13a8e:	4b71      	ldr	r3, [pc, #452]	; (13c54 <LCD_init+0x284>)
   13a90:	4798      	blx	r3
	port_pin_set_config(_enable_pin,&config_port_pin);
   13a92:	4b6a      	ldr	r3, [pc, #424]	; (13c3c <LCD_init+0x26c>)
   13a94:	781b      	ldrb	r3, [r3, #0]
   13a96:	221c      	movs	r2, #28
   13a98:	18ba      	adds	r2, r7, r2
   13a9a:	0011      	movs	r1, r2
   13a9c:	0018      	movs	r0, r3
   13a9e:	4b6d      	ldr	r3, [pc, #436]	; (13c54 <LCD_init+0x284>)
   13aa0:	4798      	blx	r3
	//port_pin_set_config(LCD_BACKLIGHT,&config_port_pin);
	
	for (int i=0; i<4; ++i)
   13aa2:	2300      	movs	r3, #0
   13aa4:	627b      	str	r3, [r7, #36]	; 0x24
   13aa6:	e00c      	b.n	13ac2 <LCD_init+0xf2>
	{
		port_pin_set_config(_data_pins[i],&config_port_pin);
   13aa8:	4a65      	ldr	r2, [pc, #404]	; (13c40 <LCD_init+0x270>)
   13aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   13aac:	18d3      	adds	r3, r2, r3
   13aae:	781b      	ldrb	r3, [r3, #0]
   13ab0:	221c      	movs	r2, #28
   13ab2:	18ba      	adds	r2, r7, r2
   13ab4:	0011      	movs	r1, r2
   13ab6:	0018      	movs	r0, r3
   13ab8:	4b66      	ldr	r3, [pc, #408]	; (13c54 <LCD_init+0x284>)
   13aba:	4798      	blx	r3
	for (int i=0; i<4; ++i)
   13abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   13abe:	3301      	adds	r3, #1
   13ac0:	627b      	str	r3, [r7, #36]	; 0x24
   13ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   13ac4:	2b03      	cmp	r3, #3
   13ac6:	ddef      	ble.n	13aa8 <LCD_init+0xd8>
	}
	delay_us(50000);
   13ac8:	2000      	movs	r0, #0
   13aca:	4b63      	ldr	r3, [pc, #396]	; (13c58 <LCD_init+0x288>)
   13acc:	4798      	blx	r3
   13ace:	0003      	movs	r3, r0
   13ad0:	613b      	str	r3, [r7, #16]
   13ad2:	2300      	movs	r3, #0
   13ad4:	617b      	str	r3, [r7, #20]
   13ad6:	4c61      	ldr	r4, [pc, #388]	; (13c5c <LCD_init+0x28c>)
   13ad8:	4a61      	ldr	r2, [pc, #388]	; (13c60 <LCD_init+0x290>)
   13ada:	2300      	movs	r3, #0
   13adc:	6938      	ldr	r0, [r7, #16]
   13ade:	6979      	ldr	r1, [r7, #20]
   13ae0:	47a0      	blx	r4
   13ae2:	0003      	movs	r3, r0
   13ae4:	000c      	movs	r4, r1
   13ae6:	0019      	movs	r1, r3
   13ae8:	0022      	movs	r2, r4
   13aea:	4b5e      	ldr	r3, [pc, #376]	; (13c64 <LCD_init+0x294>)
   13aec:	2400      	movs	r4, #0
   13aee:	18c9      	adds	r1, r1, r3
   13af0:	4162      	adcs	r2, r4
   13af2:	0008      	movs	r0, r1
   13af4:	0011      	movs	r1, r2
   13af6:	4c5c      	ldr	r4, [pc, #368]	; (13c68 <LCD_init+0x298>)
   13af8:	4a5c      	ldr	r2, [pc, #368]	; (13c6c <LCD_init+0x29c>)
   13afa:	2300      	movs	r3, #0
   13afc:	47a0      	blx	r4
   13afe:	0003      	movs	r3, r0
   13b00:	000c      	movs	r4, r1
   13b02:	0018      	movs	r0, r3
   13b04:	4b5a      	ldr	r3, [pc, #360]	; (13c70 <LCD_init+0x2a0>)
   13b06:	4798      	blx	r3
	port_pin_set_output_level(_rs_pin,LOW);
   13b08:	4b4b      	ldr	r3, [pc, #300]	; (13c38 <LCD_init+0x268>)
   13b0a:	781b      	ldrb	r3, [r3, #0]
   13b0c:	2100      	movs	r1, #0
   13b0e:	0018      	movs	r0, r3
   13b10:	4b58      	ldr	r3, [pc, #352]	; (13c74 <LCD_init+0x2a4>)
   13b12:	4798      	blx	r3
	port_pin_set_output_level(_enable_pin,LOW);
   13b14:	4b49      	ldr	r3, [pc, #292]	; (13c3c <LCD_init+0x26c>)
   13b16:	781b      	ldrb	r3, [r3, #0]
   13b18:	2100      	movs	r1, #0
   13b1a:	0018      	movs	r0, r3
   13b1c:	4b55      	ldr	r3, [pc, #340]	; (13c74 <LCD_init+0x2a4>)
   13b1e:	4798      	blx	r3
	//port_pin_set_output_level(LCD_BACKLIGHT,LOW);
	
	 write4bits(0x03);
   13b20:	2003      	movs	r0, #3
   13b22:	4b55      	ldr	r3, [pc, #340]	; (13c78 <LCD_init+0x2a8>)
   13b24:	4798      	blx	r3
	 delay_us(4500); 
   13b26:	2000      	movs	r0, #0
   13b28:	4b4b      	ldr	r3, [pc, #300]	; (13c58 <LCD_init+0x288>)
   13b2a:	4798      	blx	r3
   13b2c:	0003      	movs	r3, r0
   13b2e:	60bb      	str	r3, [r7, #8]
   13b30:	2300      	movs	r3, #0
   13b32:	60fb      	str	r3, [r7, #12]
   13b34:	4c49      	ldr	r4, [pc, #292]	; (13c5c <LCD_init+0x28c>)
   13b36:	4a51      	ldr	r2, [pc, #324]	; (13c7c <LCD_init+0x2ac>)
   13b38:	2300      	movs	r3, #0
   13b3a:	68b8      	ldr	r0, [r7, #8]
   13b3c:	68f9      	ldr	r1, [r7, #12]
   13b3e:	47a0      	blx	r4
   13b40:	0003      	movs	r3, r0
   13b42:	000c      	movs	r4, r1
   13b44:	0019      	movs	r1, r3
   13b46:	0022      	movs	r2, r4
   13b48:	4b46      	ldr	r3, [pc, #280]	; (13c64 <LCD_init+0x294>)
   13b4a:	2400      	movs	r4, #0
   13b4c:	18c9      	adds	r1, r1, r3
   13b4e:	4162      	adcs	r2, r4
   13b50:	0008      	movs	r0, r1
   13b52:	0011      	movs	r1, r2
   13b54:	4c44      	ldr	r4, [pc, #272]	; (13c68 <LCD_init+0x298>)
   13b56:	4a45      	ldr	r2, [pc, #276]	; (13c6c <LCD_init+0x29c>)
   13b58:	2300      	movs	r3, #0
   13b5a:	47a0      	blx	r4
   13b5c:	0003      	movs	r3, r0
   13b5e:	000c      	movs	r4, r1
   13b60:	0018      	movs	r0, r3
   13b62:	4b43      	ldr	r3, [pc, #268]	; (13c70 <LCD_init+0x2a0>)
   13b64:	4798      	blx	r3
	 
	 write4bits(0x03);
   13b66:	2003      	movs	r0, #3
   13b68:	4b43      	ldr	r3, [pc, #268]	; (13c78 <LCD_init+0x2a8>)
   13b6a:	4798      	blx	r3
	 delay_us(4500); 
   13b6c:	2000      	movs	r0, #0
   13b6e:	4b3a      	ldr	r3, [pc, #232]	; (13c58 <LCD_init+0x288>)
   13b70:	4798      	blx	r3
   13b72:	0003      	movs	r3, r0
   13b74:	603b      	str	r3, [r7, #0]
   13b76:	2300      	movs	r3, #0
   13b78:	607b      	str	r3, [r7, #4]
   13b7a:	4c38      	ldr	r4, [pc, #224]	; (13c5c <LCD_init+0x28c>)
   13b7c:	4a3f      	ldr	r2, [pc, #252]	; (13c7c <LCD_init+0x2ac>)
   13b7e:	2300      	movs	r3, #0
   13b80:	6838      	ldr	r0, [r7, #0]
   13b82:	6879      	ldr	r1, [r7, #4]
   13b84:	47a0      	blx	r4
   13b86:	0003      	movs	r3, r0
   13b88:	000c      	movs	r4, r1
   13b8a:	0019      	movs	r1, r3
   13b8c:	0022      	movs	r2, r4
   13b8e:	4b35      	ldr	r3, [pc, #212]	; (13c64 <LCD_init+0x294>)
   13b90:	2400      	movs	r4, #0
   13b92:	18c9      	adds	r1, r1, r3
   13b94:	4162      	adcs	r2, r4
   13b96:	0008      	movs	r0, r1
   13b98:	0011      	movs	r1, r2
   13b9a:	4c33      	ldr	r4, [pc, #204]	; (13c68 <LCD_init+0x298>)
   13b9c:	4a33      	ldr	r2, [pc, #204]	; (13c6c <LCD_init+0x29c>)
   13b9e:	2300      	movs	r3, #0
   13ba0:	47a0      	blx	r4
   13ba2:	0003      	movs	r3, r0
   13ba4:	000c      	movs	r4, r1
   13ba6:	0018      	movs	r0, r3
   13ba8:	4b31      	ldr	r3, [pc, #196]	; (13c70 <LCD_init+0x2a0>)
   13baa:	4798      	blx	r3
	
	 write4bits(0x03);
   13bac:	2003      	movs	r0, #3
   13bae:	4b32      	ldr	r3, [pc, #200]	; (13c78 <LCD_init+0x2a8>)
   13bb0:	4798      	blx	r3
	 delay_us(150);
   13bb2:	2000      	movs	r0, #0
   13bb4:	4b28      	ldr	r3, [pc, #160]	; (13c58 <LCD_init+0x288>)
   13bb6:	4798      	blx	r3
   13bb8:	0003      	movs	r3, r0
   13bba:	001d      	movs	r5, r3
   13bbc:	2300      	movs	r3, #0
   13bbe:	001e      	movs	r6, r3
   13bc0:	4c26      	ldr	r4, [pc, #152]	; (13c5c <LCD_init+0x28c>)
   13bc2:	2296      	movs	r2, #150	; 0x96
   13bc4:	2300      	movs	r3, #0
   13bc6:	0028      	movs	r0, r5
   13bc8:	0031      	movs	r1, r6
   13bca:	47a0      	blx	r4
   13bcc:	0003      	movs	r3, r0
   13bce:	000c      	movs	r4, r1
   13bd0:	0019      	movs	r1, r3
   13bd2:	0022      	movs	r2, r4
   13bd4:	4b23      	ldr	r3, [pc, #140]	; (13c64 <LCD_init+0x294>)
   13bd6:	2400      	movs	r4, #0
   13bd8:	18c9      	adds	r1, r1, r3
   13bda:	4162      	adcs	r2, r4
   13bdc:	0008      	movs	r0, r1
   13bde:	0011      	movs	r1, r2
   13be0:	4c21      	ldr	r4, [pc, #132]	; (13c68 <LCD_init+0x298>)
   13be2:	4a22      	ldr	r2, [pc, #136]	; (13c6c <LCD_init+0x29c>)
   13be4:	2300      	movs	r3, #0
   13be6:	47a0      	blx	r4
   13be8:	0003      	movs	r3, r0
   13bea:	000c      	movs	r4, r1
   13bec:	0018      	movs	r0, r3
   13bee:	4b20      	ldr	r3, [pc, #128]	; (13c70 <LCD_init+0x2a0>)
   13bf0:	4798      	blx	r3

	 write4bits(0x02);
   13bf2:	2002      	movs	r0, #2
   13bf4:	4b20      	ldr	r3, [pc, #128]	; (13c78 <LCD_init+0x2a8>)
   13bf6:	4798      	blx	r3

	 command(LCD_FUNCTIONSET | _displayfunction);
   13bf8:	4b12      	ldr	r3, [pc, #72]	; (13c44 <LCD_init+0x274>)
   13bfa:	781b      	ldrb	r3, [r3, #0]
   13bfc:	2220      	movs	r2, #32
   13bfe:	4313      	orrs	r3, r2
   13c00:	b2db      	uxtb	r3, r3
   13c02:	0018      	movs	r0, r3
   13c04:	4b1e      	ldr	r3, [pc, #120]	; (13c80 <LCD_init+0x2b0>)
   13c06:	4798      	blx	r3
	 
	_displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
   13c08:	4b1e      	ldr	r3, [pc, #120]	; (13c84 <LCD_init+0x2b4>)
   13c0a:	2204      	movs	r2, #4
   13c0c:	701a      	strb	r2, [r3, #0]
	LCD_display();
   13c0e:	4b1e      	ldr	r3, [pc, #120]	; (13c88 <LCD_init+0x2b8>)
   13c10:	4798      	blx	r3
	LCD_clear();
   13c12:	4b1e      	ldr	r3, [pc, #120]	; (13c8c <LCD_init+0x2bc>)
   13c14:	4798      	blx	r3
	_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
   13c16:	4b1e      	ldr	r3, [pc, #120]	; (13c90 <LCD_init+0x2c0>)
   13c18:	2202      	movs	r2, #2
   13c1a:	701a      	strb	r2, [r3, #0]
	command(LCD_ENTRYMODESET | _displaymode);
   13c1c:	4b1c      	ldr	r3, [pc, #112]	; (13c90 <LCD_init+0x2c0>)
   13c1e:	781b      	ldrb	r3, [r3, #0]
   13c20:	2204      	movs	r2, #4
   13c22:	4313      	orrs	r3, r2
   13c24:	b2db      	uxtb	r3, r3
   13c26:	0018      	movs	r0, r3
   13c28:	4b15      	ldr	r3, [pc, #84]	; (13c80 <LCD_init+0x2b0>)
   13c2a:	4798      	blx	r3
}
   13c2c:	46c0      	nop			; (mov r8, r8)
   13c2e:	46bd      	mov	sp, r7
   13c30:	b00b      	add	sp, #44	; 0x2c
   13c32:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13c34:	0002267d 	.word	0x0002267d
   13c38:	200008e0 	.word	0x200008e0
   13c3c:	200008df 	.word	0x200008df
   13c40:	200008d8 	.word	0x200008d8
   13c44:	200008dd 	.word	0x200008dd
   13c48:	200008d6 	.word	0x200008d6
   13c4c:	00013d41 	.word	0x00013d41
   13c50:	00013959 	.word	0x00013959
   13c54:	00022cd1 	.word	0x00022cd1
   13c58:	0002463d 	.word	0x0002463d
   13c5c:	00026689 	.word	0x00026689
   13c60:	0000c350 	.word	0x0000c350
   13c64:	006acfbf 	.word	0x006acfbf
   13c68:	00026649 	.word	0x00026649
   13c6c:	006acfc0 	.word	0x006acfc0
   13c70:	20000001 	.word	0x20000001
   13c74:	0001397d 	.word	0x0001397d
   13c78:	00013d7d 	.word	0x00013d7d
   13c7c:	00001194 	.word	0x00001194
   13c80:	00013ec1 	.word	0x00013ec1
   13c84:	200008d5 	.word	0x200008d5
   13c88:	000140a9 	.word	0x000140a9
   13c8c:	00013f61 	.word	0x00013f61
   13c90:	200008dc 	.word	0x200008dc

00013c94 <LCD_PWR_CONFIG>:

void LCD_PWR_CONFIG()
{
   13c94:	b580      	push	{r7, lr}
   13c96:	b082      	sub	sp, #8
   13c98:	af00      	add	r7, sp, #0
	struct port_config pin_conf_gsm_status;
	port_get_config_defaults(&pin_conf_gsm_status);
   13c9a:	1d3b      	adds	r3, r7, #4
   13c9c:	0018      	movs	r0, r3
   13c9e:	4b08      	ldr	r3, [pc, #32]	; (13cc0 <LCD_PWR_CONFIG+0x2c>)
   13ca0:	4798      	blx	r3
	pin_conf_gsm_status.direction  = PORT_PIN_DIR_OUTPUT;
   13ca2:	1d3b      	adds	r3, r7, #4
   13ca4:	2201      	movs	r2, #1
   13ca6:	701a      	strb	r2, [r3, #0]
	pin_conf_gsm_status.input_pull = PORT_PIN_PULL_NONE;
   13ca8:	1d3b      	adds	r3, r7, #4
   13caa:	2200      	movs	r2, #0
   13cac:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(LCD_PWR_CNTRL, &pin_conf_gsm_status);
   13cae:	1d3b      	adds	r3, r7, #4
   13cb0:	0019      	movs	r1, r3
   13cb2:	2024      	movs	r0, #36	; 0x24
   13cb4:	4b03      	ldr	r3, [pc, #12]	; (13cc4 <LCD_PWR_CONFIG+0x30>)
   13cb6:	4798      	blx	r3
}
   13cb8:	46c0      	nop			; (mov r8, r8)
   13cba:	46bd      	mov	sp, r7
   13cbc:	b002      	add	sp, #8
   13cbe:	bd80      	pop	{r7, pc}
   13cc0:	00013959 	.word	0x00013959
   13cc4:	00022cd1 	.word	0x00022cd1

00013cc8 <LCD_PWR_EN>:

void LCD_PWR_EN()
{
   13cc8:	b580      	push	{r7, lr}
   13cca:	af00      	add	r7, sp, #0
	port_pin_set_output_level(LCD_PWR_CNTRL,HIGH);
   13ccc:	2101      	movs	r1, #1
   13cce:	2024      	movs	r0, #36	; 0x24
   13cd0:	4b02      	ldr	r3, [pc, #8]	; (13cdc <LCD_PWR_EN+0x14>)
   13cd2:	4798      	blx	r3
}
   13cd4:	46c0      	nop			; (mov r8, r8)
   13cd6:	46bd      	mov	sp, r7
   13cd8:	bd80      	pop	{r7, pc}
   13cda:	46c0      	nop			; (mov r8, r8)
   13cdc:	0001397d 	.word	0x0001397d

00013ce0 <LCD_PWR_DIS>:
void LCD_PWR_DIS()
{
   13ce0:	b580      	push	{r7, lr}
   13ce2:	b082      	sub	sp, #8
   13ce4:	af00      	add	r7, sp, #0
	port_pin_set_output_level(LCD_PWR_CNTRL,LOW);
   13ce6:	2100      	movs	r1, #0
   13ce8:	2024      	movs	r0, #36	; 0x24
   13cea:	4b11      	ldr	r3, [pc, #68]	; (13d30 <LCD_PWR_DIS+0x50>)
   13cec:	4798      	blx	r3
	
	for (int i = 0; i < 4; i++)
   13cee:	2300      	movs	r3, #0
   13cf0:	607b      	str	r3, [r7, #4]
   13cf2:	e00a      	b.n	13d0a <LCD_PWR_DIS+0x2a>
	{
		port_pin_set_output_level(_data_pins[i],LOW);
   13cf4:	4a0f      	ldr	r2, [pc, #60]	; (13d34 <LCD_PWR_DIS+0x54>)
   13cf6:	687b      	ldr	r3, [r7, #4]
   13cf8:	18d3      	adds	r3, r2, r3
   13cfa:	781b      	ldrb	r3, [r3, #0]
   13cfc:	2100      	movs	r1, #0
   13cfe:	0018      	movs	r0, r3
   13d00:	4b0b      	ldr	r3, [pc, #44]	; (13d30 <LCD_PWR_DIS+0x50>)
   13d02:	4798      	blx	r3
	for (int i = 0; i < 4; i++)
   13d04:	687b      	ldr	r3, [r7, #4]
   13d06:	3301      	adds	r3, #1
   13d08:	607b      	str	r3, [r7, #4]
   13d0a:	687b      	ldr	r3, [r7, #4]
   13d0c:	2b03      	cmp	r3, #3
   13d0e:	ddf1      	ble.n	13cf4 <LCD_PWR_DIS+0x14>
	}
	
	port_pin_set_output_level(_enable_pin, LOW);
   13d10:	4b09      	ldr	r3, [pc, #36]	; (13d38 <LCD_PWR_DIS+0x58>)
   13d12:	781b      	ldrb	r3, [r3, #0]
   13d14:	2100      	movs	r1, #0
   13d16:	0018      	movs	r0, r3
   13d18:	4b05      	ldr	r3, [pc, #20]	; (13d30 <LCD_PWR_DIS+0x50>)
   13d1a:	4798      	blx	r3
	
	port_pin_set_output_level(_rs_pin, LOW);
   13d1c:	4b07      	ldr	r3, [pc, #28]	; (13d3c <LCD_PWR_DIS+0x5c>)
   13d1e:	781b      	ldrb	r3, [r3, #0]
   13d20:	2100      	movs	r1, #0
   13d22:	0018      	movs	r0, r3
   13d24:	4b02      	ldr	r3, [pc, #8]	; (13d30 <LCD_PWR_DIS+0x50>)
   13d26:	4798      	blx	r3
	
}
   13d28:	46c0      	nop			; (mov r8, r8)
   13d2a:	46bd      	mov	sp, r7
   13d2c:	b002      	add	sp, #8
   13d2e:	bd80      	pop	{r7, pc}
   13d30:	0001397d 	.word	0x0001397d
   13d34:	200008d8 	.word	0x200008d8
   13d38:	200008df 	.word	0x200008df
   13d3c:	200008e0 	.word	0x200008e0

00013d40 <LCD_setRowOffsets>:

void LCD_setRowOffsets(int row0, int row1, int row2, int row3)
{
   13d40:	b580      	push	{r7, lr}
   13d42:	b084      	sub	sp, #16
   13d44:	af00      	add	r7, sp, #0
   13d46:	60f8      	str	r0, [r7, #12]
   13d48:	60b9      	str	r1, [r7, #8]
   13d4a:	607a      	str	r2, [r7, #4]
   13d4c:	603b      	str	r3, [r7, #0]
	_row_offsets[0] = row0;
   13d4e:	68fb      	ldr	r3, [r7, #12]
   13d50:	b2da      	uxtb	r2, r3
   13d52:	4b09      	ldr	r3, [pc, #36]	; (13d78 <LCD_setRowOffsets+0x38>)
   13d54:	701a      	strb	r2, [r3, #0]
	_row_offsets[1] = row1;
   13d56:	68bb      	ldr	r3, [r7, #8]
   13d58:	b2da      	uxtb	r2, r3
   13d5a:	4b07      	ldr	r3, [pc, #28]	; (13d78 <LCD_setRowOffsets+0x38>)
   13d5c:	705a      	strb	r2, [r3, #1]
	_row_offsets[2] = row2;
   13d5e:	687b      	ldr	r3, [r7, #4]
   13d60:	b2da      	uxtb	r2, r3
   13d62:	4b05      	ldr	r3, [pc, #20]	; (13d78 <LCD_setRowOffsets+0x38>)
   13d64:	709a      	strb	r2, [r3, #2]
	_row_offsets[3] = row3;
   13d66:	683b      	ldr	r3, [r7, #0]
   13d68:	b2da      	uxtb	r2, r3
   13d6a:	4b03      	ldr	r3, [pc, #12]	; (13d78 <LCD_setRowOffsets+0x38>)
   13d6c:	70da      	strb	r2, [r3, #3]
}
   13d6e:	46c0      	nop			; (mov r8, r8)
   13d70:	46bd      	mov	sp, r7
   13d72:	b004      	add	sp, #16
   13d74:	bd80      	pop	{r7, pc}
   13d76:	46c0      	nop			; (mov r8, r8)
   13d78:	200008d0 	.word	0x200008d0

00013d7c <write4bits>:

void write4bits(uint8_t value)
{
   13d7c:	b580      	push	{r7, lr}
   13d7e:	b084      	sub	sp, #16
   13d80:	af00      	add	r7, sp, #0
   13d82:	0002      	movs	r2, r0
   13d84:	1dfb      	adds	r3, r7, #7
   13d86:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 4; i++) 
   13d88:	2300      	movs	r3, #0
   13d8a:	60fb      	str	r3, [r7, #12]
   13d8c:	e013      	b.n	13db6 <write4bits+0x3a>
	{
		port_pin_set_output_level(_data_pins[i], (value >> i) & 0x01);
   13d8e:	4a0e      	ldr	r2, [pc, #56]	; (13dc8 <write4bits+0x4c>)
   13d90:	68fb      	ldr	r3, [r7, #12]
   13d92:	18d3      	adds	r3, r2, r3
   13d94:	7818      	ldrb	r0, [r3, #0]
   13d96:	1dfb      	adds	r3, r7, #7
   13d98:	781a      	ldrb	r2, [r3, #0]
   13d9a:	68fb      	ldr	r3, [r7, #12]
   13d9c:	411a      	asrs	r2, r3
   13d9e:	0013      	movs	r3, r2
   13da0:	2201      	movs	r2, #1
   13da2:	4013      	ands	r3, r2
   13da4:	1e5a      	subs	r2, r3, #1
   13da6:	4193      	sbcs	r3, r2
   13da8:	b2db      	uxtb	r3, r3
   13daa:	0019      	movs	r1, r3
   13dac:	4b07      	ldr	r3, [pc, #28]	; (13dcc <write4bits+0x50>)
   13dae:	4798      	blx	r3
	for (int i = 0; i < 4; i++) 
   13db0:	68fb      	ldr	r3, [r7, #12]
   13db2:	3301      	adds	r3, #1
   13db4:	60fb      	str	r3, [r7, #12]
   13db6:	68fb      	ldr	r3, [r7, #12]
   13db8:	2b03      	cmp	r3, #3
   13dba:	dde8      	ble.n	13d8e <write4bits+0x12>
	}
	pulseEnable();
   13dbc:	4b04      	ldr	r3, [pc, #16]	; (13dd0 <write4bits+0x54>)
   13dbe:	4798      	blx	r3
}
   13dc0:	46c0      	nop			; (mov r8, r8)
   13dc2:	46bd      	mov	sp, r7
   13dc4:	b004      	add	sp, #16
   13dc6:	bd80      	pop	{r7, pc}
   13dc8:	200008d8 	.word	0x200008d8
   13dcc:	0001397d 	.word	0x0001397d
   13dd0:	00013dd5 	.word	0x00013dd5

00013dd4 <pulseEnable>:



void pulseEnable(void)
{
   13dd4:	b5f0      	push	{r4, r5, r6, r7, lr}
   13dd6:	b085      	sub	sp, #20
   13dd8:	af00      	add	r7, sp, #0
 	port_pin_set_output_level(_enable_pin, LOW);
   13dda:	4b31      	ldr	r3, [pc, #196]	; (13ea0 <pulseEnable+0xcc>)
   13ddc:	781b      	ldrb	r3, [r3, #0]
   13dde:	2100      	movs	r1, #0
   13de0:	0018      	movs	r0, r3
   13de2:	4b30      	ldr	r3, [pc, #192]	; (13ea4 <pulseEnable+0xd0>)
   13de4:	4798      	blx	r3
 	delay_us(1);
   13de6:	2000      	movs	r0, #0
   13de8:	4b2f      	ldr	r3, [pc, #188]	; (13ea8 <pulseEnable+0xd4>)
   13dea:	4798      	blx	r3
   13dec:	0003      	movs	r3, r0
   13dee:	60bb      	str	r3, [r7, #8]
   13df0:	2300      	movs	r3, #0
   13df2:	60fb      	str	r3, [r7, #12]
   13df4:	4b2d      	ldr	r3, [pc, #180]	; (13eac <pulseEnable+0xd8>)
   13df6:	2400      	movs	r4, #0
   13df8:	68b8      	ldr	r0, [r7, #8]
   13dfa:	68f9      	ldr	r1, [r7, #12]
   13dfc:	18c0      	adds	r0, r0, r3
   13dfe:	4161      	adcs	r1, r4
   13e00:	4c2b      	ldr	r4, [pc, #172]	; (13eb0 <pulseEnable+0xdc>)
   13e02:	4a2c      	ldr	r2, [pc, #176]	; (13eb4 <pulseEnable+0xe0>)
   13e04:	2300      	movs	r3, #0
   13e06:	47a0      	blx	r4
   13e08:	0003      	movs	r3, r0
   13e0a:	000c      	movs	r4, r1
   13e0c:	0018      	movs	r0, r3
   13e0e:	4b2a      	ldr	r3, [pc, #168]	; (13eb8 <pulseEnable+0xe4>)
   13e10:	4798      	blx	r3
 	port_pin_set_output_level(_enable_pin, HIGH);
   13e12:	4b23      	ldr	r3, [pc, #140]	; (13ea0 <pulseEnable+0xcc>)
   13e14:	781b      	ldrb	r3, [r3, #0]
   13e16:	2101      	movs	r1, #1
   13e18:	0018      	movs	r0, r3
   13e1a:	4b22      	ldr	r3, [pc, #136]	; (13ea4 <pulseEnable+0xd0>)
   13e1c:	4798      	blx	r3
 	delay_us(1);
   13e1e:	2000      	movs	r0, #0
   13e20:	4b21      	ldr	r3, [pc, #132]	; (13ea8 <pulseEnable+0xd4>)
   13e22:	4798      	blx	r3
   13e24:	0003      	movs	r3, r0
   13e26:	001d      	movs	r5, r3
   13e28:	2300      	movs	r3, #0
   13e2a:	001e      	movs	r6, r3
   13e2c:	4b1f      	ldr	r3, [pc, #124]	; (13eac <pulseEnable+0xd8>)
   13e2e:	2400      	movs	r4, #0
   13e30:	0028      	movs	r0, r5
   13e32:	0031      	movs	r1, r6
   13e34:	18c0      	adds	r0, r0, r3
   13e36:	4161      	adcs	r1, r4
   13e38:	4c1d      	ldr	r4, [pc, #116]	; (13eb0 <pulseEnable+0xdc>)
   13e3a:	4a1e      	ldr	r2, [pc, #120]	; (13eb4 <pulseEnable+0xe0>)
   13e3c:	2300      	movs	r3, #0
   13e3e:	47a0      	blx	r4
   13e40:	0003      	movs	r3, r0
   13e42:	000c      	movs	r4, r1
   13e44:	0018      	movs	r0, r3
   13e46:	4b1c      	ldr	r3, [pc, #112]	; (13eb8 <pulseEnable+0xe4>)
   13e48:	4798      	blx	r3
 	port_pin_set_output_level(_enable_pin, LOW);
   13e4a:	4b15      	ldr	r3, [pc, #84]	; (13ea0 <pulseEnable+0xcc>)
   13e4c:	781b      	ldrb	r3, [r3, #0]
   13e4e:	2100      	movs	r1, #0
   13e50:	0018      	movs	r0, r3
   13e52:	4b14      	ldr	r3, [pc, #80]	; (13ea4 <pulseEnable+0xd0>)
   13e54:	4798      	blx	r3
 	delay_us(100);
   13e56:	2000      	movs	r0, #0
   13e58:	4b13      	ldr	r3, [pc, #76]	; (13ea8 <pulseEnable+0xd4>)
   13e5a:	4798      	blx	r3
   13e5c:	0003      	movs	r3, r0
   13e5e:	603b      	str	r3, [r7, #0]
   13e60:	2300      	movs	r3, #0
   13e62:	607b      	str	r3, [r7, #4]
   13e64:	4c15      	ldr	r4, [pc, #84]	; (13ebc <pulseEnable+0xe8>)
   13e66:	2264      	movs	r2, #100	; 0x64
   13e68:	2300      	movs	r3, #0
   13e6a:	6838      	ldr	r0, [r7, #0]
   13e6c:	6879      	ldr	r1, [r7, #4]
   13e6e:	47a0      	blx	r4
   13e70:	0003      	movs	r3, r0
   13e72:	000c      	movs	r4, r1
   13e74:	0019      	movs	r1, r3
   13e76:	0022      	movs	r2, r4
   13e78:	4b0c      	ldr	r3, [pc, #48]	; (13eac <pulseEnable+0xd8>)
   13e7a:	2400      	movs	r4, #0
   13e7c:	18c9      	adds	r1, r1, r3
   13e7e:	4162      	adcs	r2, r4
   13e80:	0008      	movs	r0, r1
   13e82:	0011      	movs	r1, r2
   13e84:	4c0a      	ldr	r4, [pc, #40]	; (13eb0 <pulseEnable+0xdc>)
   13e86:	4a0b      	ldr	r2, [pc, #44]	; (13eb4 <pulseEnable+0xe0>)
   13e88:	2300      	movs	r3, #0
   13e8a:	47a0      	blx	r4
   13e8c:	0003      	movs	r3, r0
   13e8e:	000c      	movs	r4, r1
   13e90:	0018      	movs	r0, r3
   13e92:	4b09      	ldr	r3, [pc, #36]	; (13eb8 <pulseEnable+0xe4>)
   13e94:	4798      	blx	r3

	//port_pin_set_output_level(_enable_pin, HIGH);
	//delay_us(1);
	//port_pin_set_output_level(_enable_pin, LOW);
	//delay_us(500);
}
   13e96:	46c0      	nop			; (mov r8, r8)
   13e98:	46bd      	mov	sp, r7
   13e9a:	b005      	add	sp, #20
   13e9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13e9e:	46c0      	nop			; (mov r8, r8)
   13ea0:	200008df 	.word	0x200008df
   13ea4:	0001397d 	.word	0x0001397d
   13ea8:	0002463d 	.word	0x0002463d
   13eac:	006acfbf 	.word	0x006acfbf
   13eb0:	00026649 	.word	0x00026649
   13eb4:	006acfc0 	.word	0x006acfc0
   13eb8:	20000001 	.word	0x20000001
   13ebc:	00026689 	.word	0x00026689

00013ec0 <command>:

inline void command(uint8_t value) 
{
   13ec0:	b580      	push	{r7, lr}
   13ec2:	b082      	sub	sp, #8
   13ec4:	af00      	add	r7, sp, #0
   13ec6:	0002      	movs	r2, r0
   13ec8:	1dfb      	adds	r3, r7, #7
   13eca:	701a      	strb	r2, [r3, #0]
	send(value, LOW);
   13ecc:	1dfb      	adds	r3, r7, #7
   13ece:	781b      	ldrb	r3, [r3, #0]
   13ed0:	2100      	movs	r1, #0
   13ed2:	0018      	movs	r0, r3
   13ed4:	4b02      	ldr	r3, [pc, #8]	; (13ee0 <command+0x20>)
   13ed6:	4798      	blx	r3
}
   13ed8:	46c0      	nop			; (mov r8, r8)
   13eda:	46bd      	mov	sp, r7
   13edc:	b002      	add	sp, #8
   13ede:	bd80      	pop	{r7, pc}
   13ee0:	00013f0d 	.word	0x00013f0d

00013ee4 <LCD_write>:

inline size_t LCD_write(uint8_t value)
{
   13ee4:	b580      	push	{r7, lr}
   13ee6:	b082      	sub	sp, #8
   13ee8:	af00      	add	r7, sp, #0
   13eea:	0002      	movs	r2, r0
   13eec:	1dfb      	adds	r3, r7, #7
   13eee:	701a      	strb	r2, [r3, #0]
	send(value, HIGH);
   13ef0:	1dfb      	adds	r3, r7, #7
   13ef2:	781b      	ldrb	r3, [r3, #0]
   13ef4:	2101      	movs	r1, #1
   13ef6:	0018      	movs	r0, r3
   13ef8:	4b03      	ldr	r3, [pc, #12]	; (13f08 <LCD_write+0x24>)
   13efa:	4798      	blx	r3
	return 1;
   13efc:	2301      	movs	r3, #1
}
   13efe:	0018      	movs	r0, r3
   13f00:	46bd      	mov	sp, r7
   13f02:	b002      	add	sp, #8
   13f04:	bd80      	pop	{r7, pc}
   13f06:	46c0      	nop			; (mov r8, r8)
   13f08:	00013f0d 	.word	0x00013f0d

00013f0c <send>:

void send(uint8_t value, uint8_t mode) 
{
   13f0c:	b580      	push	{r7, lr}
   13f0e:	b082      	sub	sp, #8
   13f10:	af00      	add	r7, sp, #0
   13f12:	0002      	movs	r2, r0
   13f14:	1dfb      	adds	r3, r7, #7
   13f16:	701a      	strb	r2, [r3, #0]
   13f18:	1dbb      	adds	r3, r7, #6
   13f1a:	1c0a      	adds	r2, r1, #0
   13f1c:	701a      	strb	r2, [r3, #0]
	port_pin_set_output_level(_rs_pin, mode);
   13f1e:	4b0d      	ldr	r3, [pc, #52]	; (13f54 <send+0x48>)
   13f20:	781a      	ldrb	r2, [r3, #0]
   13f22:	1dbb      	adds	r3, r7, #6
   13f24:	781b      	ldrb	r3, [r3, #0]
   13f26:	1e59      	subs	r1, r3, #1
   13f28:	418b      	sbcs	r3, r1
   13f2a:	b2db      	uxtb	r3, r3
   13f2c:	0019      	movs	r1, r3
   13f2e:	0010      	movs	r0, r2
   13f30:	4b09      	ldr	r3, [pc, #36]	; (13f58 <send+0x4c>)
   13f32:	4798      	blx	r3
	
	{
		write4bits(value>>4);
   13f34:	1dfb      	adds	r3, r7, #7
   13f36:	781b      	ldrb	r3, [r3, #0]
   13f38:	091b      	lsrs	r3, r3, #4
   13f3a:	b2db      	uxtb	r3, r3
   13f3c:	0018      	movs	r0, r3
   13f3e:	4b07      	ldr	r3, [pc, #28]	; (13f5c <send+0x50>)
   13f40:	4798      	blx	r3
		write4bits(value);
   13f42:	1dfb      	adds	r3, r7, #7
   13f44:	781b      	ldrb	r3, [r3, #0]
   13f46:	0018      	movs	r0, r3
   13f48:	4b04      	ldr	r3, [pc, #16]	; (13f5c <send+0x50>)
   13f4a:	4798      	blx	r3
	}
}
   13f4c:	46c0      	nop			; (mov r8, r8)
   13f4e:	46bd      	mov	sp, r7
   13f50:	b002      	add	sp, #8
   13f52:	bd80      	pop	{r7, pc}
   13f54:	200008e0 	.word	0x200008e0
   13f58:	0001397d 	.word	0x0001397d
   13f5c:	00013d7d 	.word	0x00013d7d

00013f60 <LCD_clear>:

void LCD_clear(void)
{
   13f60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13f62:	af00      	add	r7, sp, #0
	command(LCD_CLEARDISPLAY);
   13f64:	2001      	movs	r0, #1
   13f66:	4b13      	ldr	r3, [pc, #76]	; (13fb4 <LCD_clear+0x54>)
   13f68:	4798      	blx	r3
	delay_us(2000);
   13f6a:	2000      	movs	r0, #0
   13f6c:	4b12      	ldr	r3, [pc, #72]	; (13fb8 <LCD_clear+0x58>)
   13f6e:	4798      	blx	r3
   13f70:	0003      	movs	r3, r0
   13f72:	001d      	movs	r5, r3
   13f74:	2300      	movs	r3, #0
   13f76:	001e      	movs	r6, r3
   13f78:	4c10      	ldr	r4, [pc, #64]	; (13fbc <LCD_clear+0x5c>)
   13f7a:	22fa      	movs	r2, #250	; 0xfa
   13f7c:	00d2      	lsls	r2, r2, #3
   13f7e:	2300      	movs	r3, #0
   13f80:	0028      	movs	r0, r5
   13f82:	0031      	movs	r1, r6
   13f84:	47a0      	blx	r4
   13f86:	0003      	movs	r3, r0
   13f88:	000c      	movs	r4, r1
   13f8a:	0019      	movs	r1, r3
   13f8c:	0022      	movs	r2, r4
   13f8e:	4b0c      	ldr	r3, [pc, #48]	; (13fc0 <LCD_clear+0x60>)
   13f90:	2400      	movs	r4, #0
   13f92:	18c9      	adds	r1, r1, r3
   13f94:	4162      	adcs	r2, r4
   13f96:	0008      	movs	r0, r1
   13f98:	0011      	movs	r1, r2
   13f9a:	4c0a      	ldr	r4, [pc, #40]	; (13fc4 <LCD_clear+0x64>)
   13f9c:	4a0a      	ldr	r2, [pc, #40]	; (13fc8 <LCD_clear+0x68>)
   13f9e:	2300      	movs	r3, #0
   13fa0:	47a0      	blx	r4
   13fa2:	0003      	movs	r3, r0
   13fa4:	000c      	movs	r4, r1
   13fa6:	0018      	movs	r0, r3
   13fa8:	4b08      	ldr	r3, [pc, #32]	; (13fcc <LCD_clear+0x6c>)
   13faa:	4798      	blx	r3
}
   13fac:	46c0      	nop			; (mov r8, r8)
   13fae:	46bd      	mov	sp, r7
   13fb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   13fb2:	46c0      	nop			; (mov r8, r8)
   13fb4:	00013ec1 	.word	0x00013ec1
   13fb8:	0002463d 	.word	0x0002463d
   13fbc:	00026689 	.word	0x00026689
   13fc0:	006acfbf 	.word	0x006acfbf
   13fc4:	00026649 	.word	0x00026649
   13fc8:	006acfc0 	.word	0x006acfc0
   13fcc:	20000001 	.word	0x20000001

00013fd0 <LCD_Create_Custom_createChar>:


void LCD_Create_Custom_createChar(uint8_t location, uint8_t charmap[]) 
{
   13fd0:	b580      	push	{r7, lr}
   13fd2:	b084      	sub	sp, #16
   13fd4:	af00      	add	r7, sp, #0
   13fd6:	0002      	movs	r2, r0
   13fd8:	6039      	str	r1, [r7, #0]
   13fda:	1dfb      	adds	r3, r7, #7
   13fdc:	701a      	strb	r2, [r3, #0]
	location &= 0x7;
   13fde:	1dfb      	adds	r3, r7, #7
   13fe0:	1dfa      	adds	r2, r7, #7
   13fe2:	7812      	ldrb	r2, [r2, #0]
   13fe4:	2107      	movs	r1, #7
   13fe6:	400a      	ands	r2, r1
   13fe8:	701a      	strb	r2, [r3, #0]
	command(LCD_SETCGRAMADDR | (location << 3));
   13fea:	1dfb      	adds	r3, r7, #7
   13fec:	781b      	ldrb	r3, [r3, #0]
   13fee:	00db      	lsls	r3, r3, #3
   13ff0:	b25b      	sxtb	r3, r3
   13ff2:	2240      	movs	r2, #64	; 0x40
   13ff4:	4313      	orrs	r3, r2
   13ff6:	b25b      	sxtb	r3, r3
   13ff8:	b2db      	uxtb	r3, r3
   13ffa:	0018      	movs	r0, r3
   13ffc:	4b0a      	ldr	r3, [pc, #40]	; (14028 <LCD_Create_Custom_createChar+0x58>)
   13ffe:	4798      	blx	r3
	for (int i=0; i<8; i++)
   14000:	2300      	movs	r3, #0
   14002:	60fb      	str	r3, [r7, #12]
   14004:	e009      	b.n	1401a <LCD_Create_Custom_createChar+0x4a>
	{
		LCD_write(charmap[i]);
   14006:	68fb      	ldr	r3, [r7, #12]
   14008:	683a      	ldr	r2, [r7, #0]
   1400a:	18d3      	adds	r3, r2, r3
   1400c:	781b      	ldrb	r3, [r3, #0]
   1400e:	0018      	movs	r0, r3
   14010:	4b06      	ldr	r3, [pc, #24]	; (1402c <LCD_Create_Custom_createChar+0x5c>)
   14012:	4798      	blx	r3
	for (int i=0; i<8; i++)
   14014:	68fb      	ldr	r3, [r7, #12]
   14016:	3301      	adds	r3, #1
   14018:	60fb      	str	r3, [r7, #12]
   1401a:	68fb      	ldr	r3, [r7, #12]
   1401c:	2b07      	cmp	r3, #7
   1401e:	ddf2      	ble.n	14006 <LCD_Create_Custom_createChar+0x36>
	}
}
   14020:	46c0      	nop			; (mov r8, r8)
   14022:	46bd      	mov	sp, r7
   14024:	b004      	add	sp, #16
   14026:	bd80      	pop	{r7, pc}
   14028:	00013ec1 	.word	0x00013ec1
   1402c:	00013ee5 	.word	0x00013ee5

00014030 <LCD_setCursor>:
	command(LCD_RETURNHOME);
	delay_us(2000);
}

void LCD_setCursor(uint8_t col, uint8_t row)
{
   14030:	b580      	push	{r7, lr}
   14032:	b084      	sub	sp, #16
   14034:	af00      	add	r7, sp, #0
   14036:	0002      	movs	r2, r0
   14038:	1dfb      	adds	r3, r7, #7
   1403a:	701a      	strb	r2, [r3, #0]
   1403c:	1dbb      	adds	r3, r7, #6
   1403e:	1c0a      	adds	r2, r1, #0
   14040:	701a      	strb	r2, [r3, #0]
	const size_t max_lines = sizeof(_row_offsets) / sizeof(*_row_offsets);
   14042:	2304      	movs	r3, #4
   14044:	60fb      	str	r3, [r7, #12]
	if ( row >= max_lines ) 
   14046:	1dbb      	adds	r3, r7, #6
   14048:	781a      	ldrb	r2, [r3, #0]
   1404a:	68fb      	ldr	r3, [r7, #12]
   1404c:	429a      	cmp	r2, r3
   1404e:	d304      	bcc.n	1405a <LCD_setCursor+0x2a>
	{
		row = max_lines - 1; 
   14050:	68fb      	ldr	r3, [r7, #12]
   14052:	b2da      	uxtb	r2, r3
   14054:	1dbb      	adds	r3, r7, #6
   14056:	3a01      	subs	r2, #1
   14058:	701a      	strb	r2, [r3, #0]
	}
	if ( row >= _numlines )
   1405a:	4b10      	ldr	r3, [pc, #64]	; (1409c <LCD_setCursor+0x6c>)
   1405c:	781b      	ldrb	r3, [r3, #0]
   1405e:	1dba      	adds	r2, r7, #6
   14060:	7812      	ldrb	r2, [r2, #0]
   14062:	429a      	cmp	r2, r3
   14064:	d304      	bcc.n	14070 <LCD_setCursor+0x40>
	{
		row = _numlines - 1;
   14066:	4b0d      	ldr	r3, [pc, #52]	; (1409c <LCD_setCursor+0x6c>)
   14068:	781a      	ldrb	r2, [r3, #0]
   1406a:	1dbb      	adds	r3, r7, #6
   1406c:	3a01      	subs	r2, #1
   1406e:	701a      	strb	r2, [r3, #0]
	}
	command(LCD_SETDDRAMADDR | (col + _row_offsets[row]));
   14070:	1dbb      	adds	r3, r7, #6
   14072:	781b      	ldrb	r3, [r3, #0]
   14074:	4a0a      	ldr	r2, [pc, #40]	; (140a0 <LCD_setCursor+0x70>)
   14076:	5cd2      	ldrb	r2, [r2, r3]
   14078:	1dfb      	adds	r3, r7, #7
   1407a:	781b      	ldrb	r3, [r3, #0]
   1407c:	18d3      	adds	r3, r2, r3
   1407e:	b2db      	uxtb	r3, r3
   14080:	b25b      	sxtb	r3, r3
   14082:	2280      	movs	r2, #128	; 0x80
   14084:	4252      	negs	r2, r2
   14086:	4313      	orrs	r3, r2
   14088:	b25b      	sxtb	r3, r3
   1408a:	b2db      	uxtb	r3, r3
   1408c:	0018      	movs	r0, r3
   1408e:	4b05      	ldr	r3, [pc, #20]	; (140a4 <LCD_setCursor+0x74>)
   14090:	4798      	blx	r3
}
   14092:	46c0      	nop			; (mov r8, r8)
   14094:	46bd      	mov	sp, r7
   14096:	b004      	add	sp, #16
   14098:	bd80      	pop	{r7, pc}
   1409a:	46c0      	nop			; (mov r8, r8)
   1409c:	200008d6 	.word	0x200008d6
   140a0:	200008d0 	.word	0x200008d0
   140a4:	00013ec1 	.word	0x00013ec1

000140a8 <LCD_display>:
{
	_displaycontrol &= ~LCD_DISPLAYON;
	command(LCD_DISPLAYCONTROL | _displaycontrol);
}
void LCD_display(void) 
{
   140a8:	b580      	push	{r7, lr}
   140aa:	af00      	add	r7, sp, #0
	_displaycontrol |= LCD_DISPLAYON;
   140ac:	4b08      	ldr	r3, [pc, #32]	; (140d0 <LCD_display+0x28>)
   140ae:	781b      	ldrb	r3, [r3, #0]
   140b0:	2204      	movs	r2, #4
   140b2:	4313      	orrs	r3, r2
   140b4:	b2da      	uxtb	r2, r3
   140b6:	4b06      	ldr	r3, [pc, #24]	; (140d0 <LCD_display+0x28>)
   140b8:	701a      	strb	r2, [r3, #0]
	command(LCD_DISPLAYCONTROL | _displaycontrol);
   140ba:	4b05      	ldr	r3, [pc, #20]	; (140d0 <LCD_display+0x28>)
   140bc:	781b      	ldrb	r3, [r3, #0]
   140be:	2208      	movs	r2, #8
   140c0:	4313      	orrs	r3, r2
   140c2:	b2db      	uxtb	r3, r3
   140c4:	0018      	movs	r0, r3
   140c6:	4b03      	ldr	r3, [pc, #12]	; (140d4 <LCD_display+0x2c>)
   140c8:	4798      	blx	r3
}
   140ca:	46c0      	nop			; (mov r8, r8)
   140cc:	46bd      	mov	sp, r7
   140ce:	bd80      	pop	{r7, pc}
   140d0:	200008d5 	.word	0x200008d5
   140d4:	00013ec1 	.word	0x00013ec1

000140d8 <Buffer_writer>:

//////////////////////////////////////////////////////////////////////////


size_t Buffer_writer(const char *buffer)
{
   140d8:	b580      	push	{r7, lr}
   140da:	b084      	sub	sp, #16
   140dc:	af00      	add	r7, sp, #0
   140de:	6078      	str	r0, [r7, #4]
	size_t size = strlen(buffer);
   140e0:	687b      	ldr	r3, [r7, #4]
   140e2:	0018      	movs	r0, r3
   140e4:	4b0f      	ldr	r3, [pc, #60]	; (14124 <Buffer_writer+0x4c>)
   140e6:	4798      	blx	r3
   140e8:	0003      	movs	r3, r0
   140ea:	60fb      	str	r3, [r7, #12]
	size_t n = 0;
   140ec:	2300      	movs	r3, #0
   140ee:	60bb      	str	r3, [r7, #8]
	while (size--) {
   140f0:	e00b      	b.n	1410a <Buffer_writer+0x32>
		if (LCD_write(*buffer++)) n++;
   140f2:	687b      	ldr	r3, [r7, #4]
   140f4:	1c5a      	adds	r2, r3, #1
   140f6:	607a      	str	r2, [r7, #4]
   140f8:	781b      	ldrb	r3, [r3, #0]
   140fa:	0018      	movs	r0, r3
   140fc:	4b0a      	ldr	r3, [pc, #40]	; (14128 <Buffer_writer+0x50>)
   140fe:	4798      	blx	r3
   14100:	1e03      	subs	r3, r0, #0
   14102:	d008      	beq.n	14116 <Buffer_writer+0x3e>
   14104:	68bb      	ldr	r3, [r7, #8]
   14106:	3301      	adds	r3, #1
   14108:	60bb      	str	r3, [r7, #8]
	while (size--) {
   1410a:	68fb      	ldr	r3, [r7, #12]
   1410c:	1e5a      	subs	r2, r3, #1
   1410e:	60fa      	str	r2, [r7, #12]
   14110:	2b00      	cmp	r3, #0
   14112:	d1ee      	bne.n	140f2 <Buffer_writer+0x1a>
   14114:	e000      	b.n	14118 <Buffer_writer+0x40>
		else break;
   14116:	46c0      	nop			; (mov r8, r8)
	}
	return n;
   14118:	68bb      	ldr	r3, [r7, #8]
}
   1411a:	0018      	movs	r0, r3
   1411c:	46bd      	mov	sp, r7
   1411e:	b004      	add	sp, #16
   14120:	bd80      	pop	{r7, pc}
   14122:	46c0      	nop			; (mov r8, r8)
   14124:	00028de7 	.word	0x00028de7
   14128:	00013ee5 	.word	0x00013ee5

0001412c <lcd_printf>:
	return n;
}


void lcd_printf(const  char *fmt, ...)
{
   1412c:	b40f      	push	{r0, r1, r2, r3}
   1412e:	b580      	push	{r7, lr}
   14130:	b084      	sub	sp, #16
   14132:	af00      	add	r7, sp, #0
	int num_chars;
	char *lcd_buff;
	num_chars = strlen(fmt) + 3;
   14134:	69bb      	ldr	r3, [r7, #24]
   14136:	0018      	movs	r0, r3
   14138:	4b11      	ldr	r3, [pc, #68]	; (14180 <lcd_printf+0x54>)
   1413a:	4798      	blx	r3
   1413c:	0003      	movs	r3, r0
   1413e:	3303      	adds	r3, #3
   14140:	60fb      	str	r3, [r7, #12]
	lcd_buff = (char *)malloc(sizeof(char) * num_chars);
   14142:	68fb      	ldr	r3, [r7, #12]
   14144:	0018      	movs	r0, r3
   14146:	4b0f      	ldr	r3, [pc, #60]	; (14184 <lcd_printf+0x58>)
   14148:	4798      	blx	r3
   1414a:	0003      	movs	r3, r0
   1414c:	60bb      	str	r3, [r7, #8]
	va_list args;
	va_start(args, fmt);
   1414e:	231c      	movs	r3, #28
   14150:	18fb      	adds	r3, r7, r3
   14152:	607b      	str	r3, [r7, #4]
	vsprintf(lcd_buff,fmt,args);
   14154:	687a      	ldr	r2, [r7, #4]
   14156:	69b9      	ldr	r1, [r7, #24]
   14158:	68bb      	ldr	r3, [r7, #8]
   1415a:	0018      	movs	r0, r3
   1415c:	4b0a      	ldr	r3, [pc, #40]	; (14188 <lcd_printf+0x5c>)
   1415e:	4798      	blx	r3
	Buffer_writer(lcd_buff);
   14160:	68bb      	ldr	r3, [r7, #8]
   14162:	0018      	movs	r0, r3
   14164:	4b09      	ldr	r3, [pc, #36]	; (1418c <lcd_printf+0x60>)
   14166:	4798      	blx	r3
	va_end(args);
	free(lcd_buff);
   14168:	68bb      	ldr	r3, [r7, #8]
   1416a:	0018      	movs	r0, r3
   1416c:	4b08      	ldr	r3, [pc, #32]	; (14190 <lcd_printf+0x64>)
   1416e:	4798      	blx	r3
}
   14170:	46c0      	nop			; (mov r8, r8)
   14172:	46bd      	mov	sp, r7
   14174:	b004      	add	sp, #16
   14176:	bc80      	pop	{r7}
   14178:	bc08      	pop	{r3}
   1417a:	b004      	add	sp, #16
   1417c:	4718      	bx	r3
   1417e:	46c0      	nop			; (mov r8, r8)
   14180:	00028de7 	.word	0x00028de7
   14184:	00028ad5 	.word	0x00028ad5
   14188:	000290d5 	.word	0x000290d5
   1418c:	000140d9 	.word	0x000140d9
   14190:	00028ae9 	.word	0x00028ae9

00014194 <StringtoUpperCase>:
#include "yalgo.h"
#include "itoa.h"


void StringtoUpperCase(char *str)
{
   14194:	b580      	push	{r7, lr}
   14196:	b084      	sub	sp, #16
   14198:	af00      	add	r7, sp, #0
   1419a:	6078      	str	r0, [r7, #4]
	if (!str) return;
   1419c:	687b      	ldr	r3, [r7, #4]
   1419e:	2b00      	cmp	r3, #0
   141a0:	d028      	beq.n	141f4 <StringtoUpperCase+0x60>
	for (char *p = str; *p; p++) {
   141a2:	687b      	ldr	r3, [r7, #4]
   141a4:	60fb      	str	r3, [r7, #12]
   141a6:	e020      	b.n	141ea <StringtoUpperCase+0x56>
		*p = toupper(*p);
   141a8:	230b      	movs	r3, #11
   141aa:	18fb      	adds	r3, r7, r3
   141ac:	68fa      	ldr	r2, [r7, #12]
   141ae:	7812      	ldrb	r2, [r2, #0]
   141b0:	701a      	strb	r2, [r3, #0]
   141b2:	4b12      	ldr	r3, [pc, #72]	; (141fc <StringtoUpperCase+0x68>)
   141b4:	4798      	blx	r3
   141b6:	0002      	movs	r2, r0
   141b8:	230b      	movs	r3, #11
   141ba:	18fb      	adds	r3, r7, r3
   141bc:	781b      	ldrb	r3, [r3, #0]
   141be:	3301      	adds	r3, #1
   141c0:	18d3      	adds	r3, r2, r3
   141c2:	781b      	ldrb	r3, [r3, #0]
   141c4:	001a      	movs	r2, r3
   141c6:	2303      	movs	r3, #3
   141c8:	4013      	ands	r3, r2
   141ca:	2b02      	cmp	r3, #2
   141cc:	d104      	bne.n	141d8 <StringtoUpperCase+0x44>
   141ce:	230b      	movs	r3, #11
   141d0:	18fb      	adds	r3, r7, r3
   141d2:	781b      	ldrb	r3, [r3, #0]
   141d4:	3b20      	subs	r3, #32
   141d6:	e002      	b.n	141de <StringtoUpperCase+0x4a>
   141d8:	230b      	movs	r3, #11
   141da:	18fb      	adds	r3, r7, r3
   141dc:	781b      	ldrb	r3, [r3, #0]
   141de:	b2da      	uxtb	r2, r3
   141e0:	68fb      	ldr	r3, [r7, #12]
   141e2:	701a      	strb	r2, [r3, #0]
	for (char *p = str; *p; p++) {
   141e4:	68fb      	ldr	r3, [r7, #12]
   141e6:	3301      	adds	r3, #1
   141e8:	60fb      	str	r3, [r7, #12]
   141ea:	68fb      	ldr	r3, [r7, #12]
   141ec:	781b      	ldrb	r3, [r3, #0]
   141ee:	2b00      	cmp	r3, #0
   141f0:	d1da      	bne.n	141a8 <StringtoUpperCase+0x14>
   141f2:	e000      	b.n	141f6 <StringtoUpperCase+0x62>
	if (!str) return;
   141f4:	46c0      	nop			; (mov r8, r8)
	}
}
   141f6:	46bd      	mov	sp, r7
   141f8:	b004      	add	sp, #16
   141fa:	bd80      	pop	{r7, pc}
   141fc:	00028ab9 	.word	0x00028ab9

00014200 <StringstartsWith>:

bool StringstartsWith(const char *str,const char *pre)
{
   14200:	b580      	push	{r7, lr}
   14202:	b084      	sub	sp, #16
   14204:	af00      	add	r7, sp, #0
   14206:	6078      	str	r0, [r7, #4]
   14208:	6039      	str	r1, [r7, #0]
	size_t lenpre = strlen(pre),
   1420a:	683b      	ldr	r3, [r7, #0]
   1420c:	0018      	movs	r0, r3
   1420e:	4b10      	ldr	r3, [pc, #64]	; (14250 <StringstartsWith+0x50>)
   14210:	4798      	blx	r3
   14212:	0003      	movs	r3, r0
   14214:	60fb      	str	r3, [r7, #12]
	lenstr = strlen(str);
   14216:	687b      	ldr	r3, [r7, #4]
   14218:	0018      	movs	r0, r3
   1421a:	4b0d      	ldr	r3, [pc, #52]	; (14250 <StringstartsWith+0x50>)
   1421c:	4798      	blx	r3
   1421e:	0003      	movs	r3, r0
   14220:	60bb      	str	r3, [r7, #8]
	return lenstr < lenpre ? false : strncmp(pre, str, lenpre) == 0;
   14222:	68ba      	ldr	r2, [r7, #8]
   14224:	68fb      	ldr	r3, [r7, #12]
   14226:	429a      	cmp	r2, r3
   14228:	d309      	bcc.n	1423e <StringstartsWith+0x3e>
   1422a:	68fa      	ldr	r2, [r7, #12]
   1422c:	6879      	ldr	r1, [r7, #4]
   1422e:	683b      	ldr	r3, [r7, #0]
   14230:	0018      	movs	r0, r3
   14232:	4b08      	ldr	r3, [pc, #32]	; (14254 <StringstartsWith+0x54>)
   14234:	4798      	blx	r3
   14236:	1e03      	subs	r3, r0, #0
   14238:	d101      	bne.n	1423e <StringstartsWith+0x3e>
   1423a:	2301      	movs	r3, #1
   1423c:	e000      	b.n	14240 <StringstartsWith+0x40>
   1423e:	2300      	movs	r3, #0
   14240:	1c1a      	adds	r2, r3, #0
   14242:	2301      	movs	r3, #1
   14244:	4013      	ands	r3, r2
   14246:	b2db      	uxtb	r3, r3
}
   14248:	0018      	movs	r0, r3
   1424a:	46bd      	mov	sp, r7
   1424c:	b004      	add	sp, #16
   1424e:	bd80      	pop	{r7, pc}
   14250:	00028de7 	.word	0x00028de7
   14254:	00028df5 	.word	0x00028df5

00014258 <NVIC_SystemReset>:
/** \brief  System Reset

    The function initiates a system reset request to reset the MCU.
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
   14258:	b580      	push	{r7, lr}
   1425a:	af00      	add	r7, sp, #0
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
   1425c:	f3bf 8f4f 	dsb	sy
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
   14260:	4b02      	ldr	r3, [pc, #8]	; (1426c <NVIC_SystemReset+0x14>)
   14262:	4a03      	ldr	r2, [pc, #12]	; (14270 <NVIC_SystemReset+0x18>)
   14264:	60da      	str	r2, [r3, #12]
   14266:	f3bf 8f4f 	dsb	sy
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                     /* Ensure completion of memory access */
  while(1);                                                    /* wait until reset */
   1426a:	e7fe      	b.n	1426a <NVIC_SystemReset+0x12>
   1426c:	e000ed00 	.word	0xe000ed00
   14270:	05fa0004 	.word	0x05fa0004

00014274 <system_pinmux_get_group_from_gpio_pin>:
{
   14274:	b580      	push	{r7, lr}
   14276:	b084      	sub	sp, #16
   14278:	af00      	add	r7, sp, #0
   1427a:	0002      	movs	r2, r0
   1427c:	1dfb      	adds	r3, r7, #7
   1427e:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   14280:	230f      	movs	r3, #15
   14282:	18fb      	adds	r3, r7, r3
   14284:	1dfa      	adds	r2, r7, #7
   14286:	7812      	ldrb	r2, [r2, #0]
   14288:	09d2      	lsrs	r2, r2, #7
   1428a:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   1428c:	230e      	movs	r3, #14
   1428e:	18fb      	adds	r3, r7, r3
   14290:	1dfa      	adds	r2, r7, #7
   14292:	7812      	ldrb	r2, [r2, #0]
   14294:	0952      	lsrs	r2, r2, #5
   14296:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   14298:	4b0d      	ldr	r3, [pc, #52]	; (142d0 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   1429a:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   1429c:	230f      	movs	r3, #15
   1429e:	18fb      	adds	r3, r7, r3
   142a0:	781b      	ldrb	r3, [r3, #0]
   142a2:	2b00      	cmp	r3, #0
   142a4:	d10f      	bne.n	142c6 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   142a6:	230f      	movs	r3, #15
   142a8:	18fb      	adds	r3, r7, r3
   142aa:	781b      	ldrb	r3, [r3, #0]
   142ac:	009b      	lsls	r3, r3, #2
   142ae:	2210      	movs	r2, #16
   142b0:	4694      	mov	ip, r2
   142b2:	44bc      	add	ip, r7
   142b4:	4463      	add	r3, ip
   142b6:	3b08      	subs	r3, #8
   142b8:	681a      	ldr	r2, [r3, #0]
   142ba:	230e      	movs	r3, #14
   142bc:	18fb      	adds	r3, r7, r3
   142be:	781b      	ldrb	r3, [r3, #0]
   142c0:	01db      	lsls	r3, r3, #7
   142c2:	18d3      	adds	r3, r2, r3
   142c4:	e000      	b.n	142c8 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   142c6:	2300      	movs	r3, #0
}
   142c8:	0018      	movs	r0, r3
   142ca:	46bd      	mov	sp, r7
   142cc:	b004      	add	sp, #16
   142ce:	bd80      	pop	{r7, pc}
   142d0:	41004400 	.word	0x41004400

000142d4 <system_reset>:
 * Resets the MCU and all associated peripherals and registers, except RTC, all 32KHz sources,
 * WDT (if ALWAYSON is set) and GCLK (if WRTLOCK is set).
 *
 */
static inline void system_reset(void)
{
   142d4:	b580      	push	{r7, lr}
   142d6:	af00      	add	r7, sp, #0
	NVIC_SystemReset();
   142d8:	4b02      	ldr	r3, [pc, #8]	; (142e4 <system_reset+0x10>)
   142da:	4798      	blx	r3
}
   142dc:	46c0      	nop			; (mov r8, r8)
   142de:	46bd      	mov	sp, r7
   142e0:	bd80      	pop	{r7, pc}
   142e2:	46c0      	nop			; (mov r8, r8)
   142e4:	00014259 	.word	0x00014259

000142e8 <port_get_group_from_gpio_pin>:
{
   142e8:	b580      	push	{r7, lr}
   142ea:	b082      	sub	sp, #8
   142ec:	af00      	add	r7, sp, #0
   142ee:	0002      	movs	r2, r0
   142f0:	1dfb      	adds	r3, r7, #7
   142f2:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   142f4:	1dfb      	adds	r3, r7, #7
   142f6:	781b      	ldrb	r3, [r3, #0]
   142f8:	0018      	movs	r0, r3
   142fa:	4b03      	ldr	r3, [pc, #12]	; (14308 <port_get_group_from_gpio_pin+0x20>)
   142fc:	4798      	blx	r3
   142fe:	0003      	movs	r3, r0
}
   14300:	0018      	movs	r0, r3
   14302:	46bd      	mov	sp, r7
   14304:	b002      	add	sp, #8
   14306:	bd80      	pop	{r7, pc}
   14308:	00014275 	.word	0x00014275

0001430c <port_get_config_defaults>:
{
   1430c:	b580      	push	{r7, lr}
   1430e:	b082      	sub	sp, #8
   14310:	af00      	add	r7, sp, #0
   14312:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
   14314:	687b      	ldr	r3, [r7, #4]
   14316:	2200      	movs	r2, #0
   14318:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   1431a:	687b      	ldr	r3, [r7, #4]
   1431c:	2201      	movs	r2, #1
   1431e:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
   14320:	687b      	ldr	r3, [r7, #4]
   14322:	2200      	movs	r2, #0
   14324:	709a      	strb	r2, [r3, #2]
}
   14326:	46c0      	nop			; (mov r8, r8)
   14328:	46bd      	mov	sp, r7
   1432a:	b002      	add	sp, #8
   1432c:	bd80      	pop	{r7, pc}
	...

00014330 <port_pin_get_input_level>:
{
   14330:	b580      	push	{r7, lr}
   14332:	b084      	sub	sp, #16
   14334:	af00      	add	r7, sp, #0
   14336:	0002      	movs	r2, r0
   14338:	1dfb      	adds	r3, r7, #7
   1433a:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   1433c:	1dfb      	adds	r3, r7, #7
   1433e:	781b      	ldrb	r3, [r3, #0]
   14340:	0018      	movs	r0, r3
   14342:	4b0b      	ldr	r3, [pc, #44]	; (14370 <port_pin_get_input_level+0x40>)
   14344:	4798      	blx	r3
   14346:	0003      	movs	r3, r0
   14348:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   1434a:	1dfb      	adds	r3, r7, #7
   1434c:	781b      	ldrb	r3, [r3, #0]
   1434e:	221f      	movs	r2, #31
   14350:	4013      	ands	r3, r2
   14352:	2201      	movs	r2, #1
   14354:	409a      	lsls	r2, r3
   14356:	0013      	movs	r3, r2
   14358:	60bb      	str	r3, [r7, #8]
	return (port_base->IN.reg & pin_mask);
   1435a:	68fb      	ldr	r3, [r7, #12]
   1435c:	6a1b      	ldr	r3, [r3, #32]
   1435e:	68ba      	ldr	r2, [r7, #8]
   14360:	4013      	ands	r3, r2
   14362:	1e5a      	subs	r2, r3, #1
   14364:	4193      	sbcs	r3, r2
   14366:	b2db      	uxtb	r3, r3
}
   14368:	0018      	movs	r0, r3
   1436a:	46bd      	mov	sp, r7
   1436c:	b004      	add	sp, #16
   1436e:	bd80      	pop	{r7, pc}
   14370:	000142e9 	.word	0x000142e9

00014374 <port_pin_set_output_level>:
{
   14374:	b580      	push	{r7, lr}
   14376:	b084      	sub	sp, #16
   14378:	af00      	add	r7, sp, #0
   1437a:	0002      	movs	r2, r0
   1437c:	1dfb      	adds	r3, r7, #7
   1437e:	701a      	strb	r2, [r3, #0]
   14380:	1dbb      	adds	r3, r7, #6
   14382:	1c0a      	adds	r2, r1, #0
   14384:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   14386:	1dfb      	adds	r3, r7, #7
   14388:	781b      	ldrb	r3, [r3, #0]
   1438a:	0018      	movs	r0, r3
   1438c:	4b0d      	ldr	r3, [pc, #52]	; (143c4 <port_pin_set_output_level+0x50>)
   1438e:	4798      	blx	r3
   14390:	0003      	movs	r3, r0
   14392:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   14394:	1dfb      	adds	r3, r7, #7
   14396:	781b      	ldrb	r3, [r3, #0]
   14398:	221f      	movs	r2, #31
   1439a:	4013      	ands	r3, r2
   1439c:	2201      	movs	r2, #1
   1439e:	409a      	lsls	r2, r3
   143a0:	0013      	movs	r3, r2
   143a2:	60bb      	str	r3, [r7, #8]
	if (level) {
   143a4:	1dbb      	adds	r3, r7, #6
   143a6:	781b      	ldrb	r3, [r3, #0]
   143a8:	2b00      	cmp	r3, #0
   143aa:	d003      	beq.n	143b4 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   143ac:	68fb      	ldr	r3, [r7, #12]
   143ae:	68ba      	ldr	r2, [r7, #8]
   143b0:	619a      	str	r2, [r3, #24]
}
   143b2:	e002      	b.n	143ba <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   143b4:	68fb      	ldr	r3, [r7, #12]
   143b6:	68ba      	ldr	r2, [r7, #8]
   143b8:	615a      	str	r2, [r3, #20]
}
   143ba:	46c0      	nop			; (mov r8, r8)
   143bc:	46bd      	mov	sp, r7
   143be:	b004      	add	sp, #16
   143c0:	bd80      	pop	{r7, pc}
   143c2:	46c0      	nop			; (mov r8, r8)
   143c4:	000142e9 	.word	0x000142e9

000143c8 <setObtainEvent>:

static void vTask_GSM_service(void *params);


void setObtainEvent(void)
{
   143c8:	b580      	push	{r7, lr}
   143ca:	af00      	add	r7, sp, #0
	if (!obtainNewEvent  && xTaskGetTickCount() - obtainEventTimer > 1000)
   143cc:	4b0b      	ldr	r3, [pc, #44]	; (143fc <setObtainEvent+0x34>)
   143ce:	781b      	ldrb	r3, [r3, #0]
   143d0:	2201      	movs	r2, #1
   143d2:	4053      	eors	r3, r2
   143d4:	b2db      	uxtb	r3, r3
   143d6:	2b00      	cmp	r3, #0
   143d8:	d00c      	beq.n	143f4 <setObtainEvent+0x2c>
   143da:	4b09      	ldr	r3, [pc, #36]	; (14400 <setObtainEvent+0x38>)
   143dc:	4798      	blx	r3
   143de:	0002      	movs	r2, r0
   143e0:	4b08      	ldr	r3, [pc, #32]	; (14404 <setObtainEvent+0x3c>)
   143e2:	681b      	ldr	r3, [r3, #0]
   143e4:	1ad2      	subs	r2, r2, r3
   143e6:	23fa      	movs	r3, #250	; 0xfa
   143e8:	009b      	lsls	r3, r3, #2
   143ea:	429a      	cmp	r2, r3
   143ec:	d902      	bls.n	143f4 <setObtainEvent+0x2c>
	{
		obtainNewEvent = true;
   143ee:	4b03      	ldr	r3, [pc, #12]	; (143fc <setObtainEvent+0x34>)
   143f0:	2201      	movs	r2, #1
   143f2:	701a      	strb	r2, [r3, #0]
	}
}
   143f4:	46c0      	nop			; (mov r8, r8)
   143f6:	46bd      	mov	sp, r7
   143f8:	bd80      	pop	{r7, pc}
   143fa:	46c0      	nop			; (mov r8, r8)
   143fc:	20000972 	.word	0x20000972
   14400:	000201cd 	.word	0x000201cd
   14404:	20000a10 	.word	0x20000a10

00014408 <operateOnStagedEvent>:

void operateOnStagedEvent(void)
{
   14408:	b580      	push	{r7, lr}
   1440a:	b082      	sub	sp, #8
   1440c:	af00      	add	r7, sp, #0
	uint8_t temp1= 1;
   1440e:	1dfb      	adds	r3, r7, #7
   14410:	2201      	movs	r2, #1
   14412:	701a      	strb	r2, [r3, #0]
	if(eventStaged)
   14414:	4b23      	ldr	r3, [pc, #140]	; (144a4 <operateOnStagedEvent+0x9c>)
   14416:	781b      	ldrb	r3, [r3, #0]
   14418:	2b00      	cmp	r3, #0
   1441a:	d003      	beq.n	14424 <operateOnStagedEvent+0x1c>
	{
		temp1 = user_settings_parameter_struct.eventStageAddress;
   1441c:	1dfb      	adds	r3, r7, #7
   1441e:	4a22      	ldr	r2, [pc, #136]	; (144a8 <operateOnStagedEvent+0xa0>)
   14420:	7a12      	ldrb	r2, [r2, #8]
   14422:	701a      	strb	r2, [r3, #0]
	}
	
	if(obtainNewEvent && (retries==1 || (xTaskGetTickCount()-tempEventStageTime>((unsigned long)temp1*60000L))))
   14424:	4b21      	ldr	r3, [pc, #132]	; (144ac <operateOnStagedEvent+0xa4>)
   14426:	781b      	ldrb	r3, [r3, #0]
   14428:	2b00      	cmp	r3, #0
   1442a:	d037      	beq.n	1449c <operateOnStagedEvent+0x94>
   1442c:	4b20      	ldr	r3, [pc, #128]	; (144b0 <operateOnStagedEvent+0xa8>)
   1442e:	781b      	ldrb	r3, [r3, #0]
   14430:	2b01      	cmp	r3, #1
   14432:	d00b      	beq.n	1444c <operateOnStagedEvent+0x44>
   14434:	4b1f      	ldr	r3, [pc, #124]	; (144b4 <operateOnStagedEvent+0xac>)
   14436:	4798      	blx	r3
   14438:	0002      	movs	r2, r0
   1443a:	4b1f      	ldr	r3, [pc, #124]	; (144b8 <operateOnStagedEvent+0xb0>)
   1443c:	681b      	ldr	r3, [r3, #0]
   1443e:	1ad2      	subs	r2, r2, r3
   14440:	1dfb      	adds	r3, r7, #7
   14442:	781b      	ldrb	r3, [r3, #0]
   14444:	491d      	ldr	r1, [pc, #116]	; (144bc <operateOnStagedEvent+0xb4>)
   14446:	434b      	muls	r3, r1
   14448:	429a      	cmp	r2, r3
   1444a:	d927      	bls.n	1449c <operateOnStagedEvent+0x94>
	{
		if (factory_settings_parameter_struct.ENABLE_M2M)
   1444c:	4b1c      	ldr	r3, [pc, #112]	; (144c0 <operateOnStagedEvent+0xb8>)
   1444e:	78db      	ldrb	r3, [r3, #3]
   14450:	2b00      	cmp	r3, #0
   14452:	d01a      	beq.n	1448a <operateOnStagedEvent+0x82>
		{
			if (eventStaged)
   14454:	4b13      	ldr	r3, [pc, #76]	; (144a4 <operateOnStagedEvent+0x9c>)
   14456:	781b      	ldrb	r3, [r3, #0]
   14458:	2b00      	cmp	r3, #0
   1445a:	d007      	beq.n	1446c <operateOnStagedEvent+0x64>
			{
				actionType=stagedEventType;
   1445c:	4b19      	ldr	r3, [pc, #100]	; (144c4 <operateOnStagedEvent+0xbc>)
   1445e:	781a      	ldrb	r2, [r3, #0]
   14460:	4b19      	ldr	r3, [pc, #100]	; (144c8 <operateOnStagedEvent+0xc0>)
   14462:	701a      	strb	r2, [r3, #0]
				eventStaged=false;
   14464:	4b0f      	ldr	r3, [pc, #60]	; (144a4 <operateOnStagedEvent+0x9c>)
   14466:	2200      	movs	r2, #0
   14468:	701a      	strb	r2, [r3, #0]
   1446a:	e015      	b.n	14498 <operateOnStagedEvent+0x90>
			}
			else if (m2mEventStaged)
   1446c:	4b17      	ldr	r3, [pc, #92]	; (144cc <operateOnStagedEvent+0xc4>)
   1446e:	781b      	ldrb	r3, [r3, #0]
   14470:	2b00      	cmp	r3, #0
   14472:	d011      	beq.n	14498 <operateOnStagedEvent+0x90>
			{
				m2mEventNo=stagedEventType;
   14474:	4b13      	ldr	r3, [pc, #76]	; (144c4 <operateOnStagedEvent+0xbc>)
   14476:	781a      	ldrb	r2, [r3, #0]
   14478:	4b15      	ldr	r3, [pc, #84]	; (144d0 <operateOnStagedEvent+0xc8>)
   1447a:	701a      	strb	r2, [r3, #0]
				m2mEvent=true;
   1447c:	4b15      	ldr	r3, [pc, #84]	; (144d4 <operateOnStagedEvent+0xcc>)
   1447e:	2201      	movs	r2, #1
   14480:	701a      	strb	r2, [r3, #0]
				m2mEventStaged=false;
   14482:	4b12      	ldr	r3, [pc, #72]	; (144cc <operateOnStagedEvent+0xc4>)
   14484:	2200      	movs	r2, #0
   14486:	701a      	strb	r2, [r3, #0]
   14488:	e006      	b.n	14498 <operateOnStagedEvent+0x90>
			}
		}
		else
		{
			actionType=stagedEventType;
   1448a:	4b0e      	ldr	r3, [pc, #56]	; (144c4 <operateOnStagedEvent+0xbc>)
   1448c:	781a      	ldrb	r2, [r3, #0]
   1448e:	4b0e      	ldr	r3, [pc, #56]	; (144c8 <operateOnStagedEvent+0xc0>)
   14490:	701a      	strb	r2, [r3, #0]
			eventStaged=false;
   14492:	4b04      	ldr	r3, [pc, #16]	; (144a4 <operateOnStagedEvent+0x9c>)
   14494:	2200      	movs	r2, #0
   14496:	701a      	strb	r2, [r3, #0]
		}
		makeResponseAction();
   14498:	4b0f      	ldr	r3, [pc, #60]	; (144d8 <operateOnStagedEvent+0xd0>)
   1449a:	4798      	blx	r3
	}
}
   1449c:	46c0      	nop			; (mov r8, r8)
   1449e:	46bd      	mov	sp, r7
   144a0:	b002      	add	sp, #8
   144a2:	bd80      	pop	{r7, pc}
   144a4:	200009d3 	.word	0x200009d3
   144a8:	20000854 	.word	0x20000854
   144ac:	20000972 	.word	0x20000972
   144b0:	200008e5 	.word	0x200008e5
   144b4:	000201cd 	.word	0x000201cd
   144b8:	200009f0 	.word	0x200009f0
   144bc:	0000ea60 	.word	0x0000ea60
   144c0:	2000082c 	.word	0x2000082c
   144c4:	20000975 	.word	0x20000975
   144c8:	20000963 	.word	0x20000963
   144cc:	2000098e 	.word	0x2000098e
   144d0:	2000092d 	.word	0x2000092d
   144d4:	20000943 	.word	0x20000943
   144d8:	000144dd 	.word	0x000144dd

000144dc <makeResponseAction>:

void makeResponseAction(void)
{
   144dc:	b580      	push	{r7, lr}
   144de:	af00      	add	r7, sp, #0
	if(user_settings_parameter_struct.responseAddress != 'N' || m2mEvent)
   144e0:	4b08      	ldr	r3, [pc, #32]	; (14504 <makeResponseAction+0x28>)
   144e2:	795b      	ldrb	r3, [r3, #5]
   144e4:	b2db      	uxtb	r3, r3
   144e6:	2b4e      	cmp	r3, #78	; 0x4e
   144e8:	d103      	bne.n	144f2 <makeResponseAction+0x16>
   144ea:	4b07      	ldr	r3, [pc, #28]	; (14508 <makeResponseAction+0x2c>)
   144ec:	781b      	ldrb	r3, [r3, #0]
   144ee:	2b00      	cmp	r3, #0
   144f0:	d004      	beq.n	144fc <makeResponseAction+0x20>
	{
		freezeIncomingCalls = true;
   144f2:	4b06      	ldr	r3, [pc, #24]	; (1450c <makeResponseAction+0x30>)
   144f4:	2201      	movs	r2, #1
   144f6:	701a      	strb	r2, [r3, #0]
		//acceptCommands();
		makeCall();
   144f8:	4b05      	ldr	r3, [pc, #20]	; (14510 <makeResponseAction+0x34>)
   144fa:	4798      	blx	r3
	}
}
   144fc:	46c0      	nop			; (mov r8, r8)
   144fe:	46bd      	mov	sp, r7
   14500:	bd80      	pop	{r7, pc}
   14502:	46c0      	nop			; (mov r8, r8)
   14504:	20000854 	.word	0x20000854
   14508:	20000943 	.word	0x20000943
   1450c:	20000944 	.word	0x20000944
   14510:	00014749 	.word	0x00014749

00014514 <endCall>:

void endCall(void)
{
   14514:	b580      	push	{r7, lr}
   14516:	af00      	add	r7, sp, #0
	nr  = 0;
   14518:	4b6d      	ldr	r3, [pc, #436]	; (146d0 <endCall+0x1bc>)
   1451a:	2200      	movs	r2, #0
   1451c:	701a      	strb	r2, [r3, #0]
	inCall=false;
   1451e:	4b6d      	ldr	r3, [pc, #436]	; (146d4 <endCall+0x1c0>)
   14520:	2200      	movs	r2, #0
   14522:	701a      	strb	r2, [r3, #0]
	
	gsm_hangup_call();
   14524:	4b6c      	ldr	r3, [pc, #432]	; (146d8 <endCall+0x1c4>)
   14526:	4798      	blx	r3
	setCallStateOnLCD(LCDCALLSTATE_IDLE,NULL,false);
   14528:	2200      	movs	r2, #0
   1452a:	2100      	movs	r1, #0
   1452c:	2000      	movs	r0, #0
   1452e:	4b6b      	ldr	r3, [pc, #428]	; (146dc <endCall+0x1c8>)
   14530:	4798      	blx	r3
	//unsigned long temp = xTaskGetTickCount();
	vTaskDelay(1000);
   14532:	23fa      	movs	r3, #250	; 0xfa
   14534:	009b      	lsls	r3, r3, #2
   14536:	0018      	movs	r0, r3
   14538:	4b69      	ldr	r3, [pc, #420]	; (146e0 <endCall+0x1cc>)
   1453a:	4798      	blx	r3
	freezeIncomingCalls = false;
   1453c:	4b69      	ldr	r3, [pc, #420]	; (146e4 <endCall+0x1d0>)
   1453e:	2200      	movs	r2, #0
   14540:	701a      	strb	r2, [r3, #0]
	if (factory_settings_parameter_struct.ENABLE_CURRENT)
   14542:	4b69      	ldr	r3, [pc, #420]	; (146e8 <endCall+0x1d4>)
   14544:	785b      	ldrb	r3, [r3, #1]
   14546:	2b00      	cmp	r3, #0
   14548:	d002      	beq.n	14550 <endCall+0x3c>
	{
		zeroPressed=false;
   1454a:	4b68      	ldr	r3, [pc, #416]	; (146ec <endCall+0x1d8>)
   1454c:	2200      	movs	r2, #0
   1454e:	701a      	strb	r2, [r3, #0]
	}
	
	if ((factory_settings_parameter_struct.ENABLE_M2M == true)?
   14550:	4b65      	ldr	r3, [pc, #404]	; (146e8 <endCall+0x1d4>)
   14552:	78db      	ldrb	r3, [r3, #3]
   14554:	2b01      	cmp	r3, #1
   14556:	d11d      	bne.n	14594 <endCall+0x80>
	((currentStatus == 'N' || currentStatus == 'R') && currentCallStatus == 'O' && !m2mEvent):
   14558:	4b65      	ldr	r3, [pc, #404]	; (146f0 <endCall+0x1dc>)
   1455a:	781b      	ldrb	r3, [r3, #0]
   1455c:	b2db      	uxtb	r3, r3
   1455e:	2b4e      	cmp	r3, #78	; 0x4e
   14560:	d004      	beq.n	1456c <endCall+0x58>
   14562:	4b63      	ldr	r3, [pc, #396]	; (146f0 <endCall+0x1dc>)
   14564:	781b      	ldrb	r3, [r3, #0]
   14566:	b2db      	uxtb	r3, r3
   14568:	2b52      	cmp	r3, #82	; 0x52
   1456a:	d10d      	bne.n	14588 <endCall+0x74>
   1456c:	4b61      	ldr	r3, [pc, #388]	; (146f4 <endCall+0x1e0>)
   1456e:	781b      	ldrb	r3, [r3, #0]
   14570:	b2db      	uxtb	r3, r3
   14572:	2b4f      	cmp	r3, #79	; 0x4f
   14574:	d108      	bne.n	14588 <endCall+0x74>
   14576:	4b60      	ldr	r3, [pc, #384]	; (146f8 <endCall+0x1e4>)
   14578:	781b      	ldrb	r3, [r3, #0]
   1457a:	2201      	movs	r2, #1
   1457c:	4053      	eors	r3, r2
   1457e:	b2db      	uxtb	r3, r3
   14580:	2b00      	cmp	r3, #0
   14582:	d001      	beq.n	14588 <endCall+0x74>
   14584:	2301      	movs	r3, #1
   14586:	e000      	b.n	1458a <endCall+0x76>
   14588:	2300      	movs	r3, #0
	if ((factory_settings_parameter_struct.ENABLE_M2M == true)?
   1458a:	1c1a      	adds	r2, r3, #0
   1458c:	2301      	movs	r3, #1
   1458e:	4013      	ands	r3, r2
   14590:	b2db      	uxtb	r3, r3
   14592:	e015      	b.n	145c0 <endCall+0xac>
	((currentStatus == 'N' || currentStatus == 'R') && currentCallStatus == 'O'))
   14594:	4b56      	ldr	r3, [pc, #344]	; (146f0 <endCall+0x1dc>)
   14596:	781b      	ldrb	r3, [r3, #0]
   14598:	b2db      	uxtb	r3, r3
   1459a:	2b4e      	cmp	r3, #78	; 0x4e
   1459c:	d004      	beq.n	145a8 <endCall+0x94>
   1459e:	4b54      	ldr	r3, [pc, #336]	; (146f0 <endCall+0x1dc>)
   145a0:	781b      	ldrb	r3, [r3, #0]
   145a2:	b2db      	uxtb	r3, r3
   145a4:	2b52      	cmp	r3, #82	; 0x52
   145a6:	d106      	bne.n	145b6 <endCall+0xa2>
   145a8:	4b52      	ldr	r3, [pc, #328]	; (146f4 <endCall+0x1e0>)
   145aa:	781b      	ldrb	r3, [r3, #0]
   145ac:	b2db      	uxtb	r3, r3
   145ae:	2b4f      	cmp	r3, #79	; 0x4f
   145b0:	d101      	bne.n	145b6 <endCall+0xa2>
   145b2:	2301      	movs	r3, #1
   145b4:	e000      	b.n	145b8 <endCall+0xa4>
   145b6:	2300      	movs	r3, #0
	if ((factory_settings_parameter_struct.ENABLE_M2M == true)?
   145b8:	1c1a      	adds	r2, r3, #0
   145ba:	2301      	movs	r3, #1
   145bc:	4013      	ands	r3, r2
   145be:	b2db      	uxtb	r3, r3
   145c0:	2b00      	cmp	r3, #0
   145c2:	d022      	beq.n	1460a <endCall+0xf6>
	{
		if((retries==0) && !callAccepted && (user_settings_parameter_struct.responseAddress=='T') && (user_count_struct.current_user_no_count>1))
   145c4:	4b4d      	ldr	r3, [pc, #308]	; (146fc <endCall+0x1e8>)
   145c6:	781b      	ldrb	r3, [r3, #0]
   145c8:	2b00      	cmp	r3, #0
   145ca:	d11e      	bne.n	1460a <endCall+0xf6>
   145cc:	4b4c      	ldr	r3, [pc, #304]	; (14700 <endCall+0x1ec>)
   145ce:	781b      	ldrb	r3, [r3, #0]
   145d0:	2201      	movs	r2, #1
   145d2:	4053      	eors	r3, r2
   145d4:	b2db      	uxtb	r3, r3
   145d6:	2b00      	cmp	r3, #0
   145d8:	d017      	beq.n	1460a <endCall+0xf6>
   145da:	4b4a      	ldr	r3, [pc, #296]	; (14704 <endCall+0x1f0>)
   145dc:	795b      	ldrb	r3, [r3, #5]
   145de:	b2db      	uxtb	r3, r3
   145e0:	2b54      	cmp	r3, #84	; 0x54
   145e2:	d112      	bne.n	1460a <endCall+0xf6>
   145e4:	4b48      	ldr	r3, [pc, #288]	; (14708 <endCall+0x1f4>)
   145e6:	789b      	ldrb	r3, [r3, #2]
   145e8:	2b01      	cmp	r3, #1
   145ea:	d90e      	bls.n	1460a <endCall+0xf6>
		{
			retries=1;
   145ec:	4b43      	ldr	r3, [pc, #268]	; (146fc <endCall+0x1e8>)
   145ee:	2201      	movs	r2, #1
   145f0:	701a      	strb	r2, [r3, #0]
			eventStaged=true;
   145f2:	4b46      	ldr	r3, [pc, #280]	; (1470c <endCall+0x1f8>)
   145f4:	2201      	movs	r2, #1
   145f6:	701a      	strb	r2, [r3, #0]
			tempEventStageTime=xTaskGetTickCount();
   145f8:	4b45      	ldr	r3, [pc, #276]	; (14710 <endCall+0x1fc>)
   145fa:	4798      	blx	r3
   145fc:	0002      	movs	r2, r0
   145fe:	4b45      	ldr	r3, [pc, #276]	; (14714 <endCall+0x200>)
   14600:	601a      	str	r2, [r3, #0]
			stagedEventType=actionType;
   14602:	4b45      	ldr	r3, [pc, #276]	; (14718 <endCall+0x204>)
   14604:	781a      	ldrb	r2, [r3, #0]
   14606:	4b45      	ldr	r3, [pc, #276]	; (1471c <endCall+0x208>)
   14608:	701a      	strb	r2, [r3, #0]
		}
	}
	
	if (factory_settings_parameter_struct.ENABLE_M2M)
   1460a:	4b37      	ldr	r3, [pc, #220]	; (146e8 <endCall+0x1d4>)
   1460c:	78db      	ldrb	r3, [r3, #3]
   1460e:	2b00      	cmp	r3, #0
   14610:	d047      	beq.n	146a2 <endCall+0x18e>
	{
		if((currentStatus == 'I' || currentStatus=='R') && currentCallStatus == 'O' && m2mEvent && m2m_Numbers_struct.m2mSetting)
   14612:	4b37      	ldr	r3, [pc, #220]	; (146f0 <endCall+0x1dc>)
   14614:	781b      	ldrb	r3, [r3, #0]
   14616:	b2db      	uxtb	r3, r3
   14618:	2b49      	cmp	r3, #73	; 0x49
   1461a:	d004      	beq.n	14626 <endCall+0x112>
   1461c:	4b34      	ldr	r3, [pc, #208]	; (146f0 <endCall+0x1dc>)
   1461e:	781b      	ldrb	r3, [r3, #0]
   14620:	b2db      	uxtb	r3, r3
   14622:	2b52      	cmp	r3, #82	; 0x52
   14624:	d137      	bne.n	14696 <endCall+0x182>
   14626:	4b33      	ldr	r3, [pc, #204]	; (146f4 <endCall+0x1e0>)
   14628:	781b      	ldrb	r3, [r3, #0]
   1462a:	b2db      	uxtb	r3, r3
   1462c:	2b4f      	cmp	r3, #79	; 0x4f
   1462e:	d132      	bne.n	14696 <endCall+0x182>
   14630:	4b31      	ldr	r3, [pc, #196]	; (146f8 <endCall+0x1e4>)
   14632:	781b      	ldrb	r3, [r3, #0]
   14634:	2b00      	cmp	r3, #0
   14636:	d02e      	beq.n	14696 <endCall+0x182>
   14638:	4b39      	ldr	r3, [pc, #228]	; (14720 <endCall+0x20c>)
   1463a:	795b      	ldrb	r3, [r3, #5]
   1463c:	2b00      	cmp	r3, #0
   1463e:	d02a      	beq.n	14696 <endCall+0x182>
		{
			m2mEventCalls++;
   14640:	4b38      	ldr	r3, [pc, #224]	; (14724 <endCall+0x210>)
   14642:	781b      	ldrb	r3, [r3, #0]
   14644:	3301      	adds	r3, #1
   14646:	b2da      	uxtb	r2, r3
   14648:	4b36      	ldr	r3, [pc, #216]	; (14724 <endCall+0x210>)
   1464a:	701a      	strb	r2, [r3, #0]
			if(m2mAck)
   1464c:	4b36      	ldr	r3, [pc, #216]	; (14728 <endCall+0x214>)
   1464e:	781b      	ldrb	r3, [r3, #0]
   14650:	2b00      	cmp	r3, #0
   14652:	d006      	beq.n	14662 <endCall+0x14e>
			{
				setM2MEventState(m2mEventNo,ME_CLEARED);
   14654:	4b35      	ldr	r3, [pc, #212]	; (1472c <endCall+0x218>)
   14656:	781b      	ldrb	r3, [r3, #0]
   14658:	2100      	movs	r1, #0
   1465a:	0018      	movs	r0, r3
   1465c:	4b34      	ldr	r3, [pc, #208]	; (14730 <endCall+0x21c>)
   1465e:	4798      	blx	r3
   14660:	e016      	b.n	14690 <endCall+0x17c>
			}
			else
			{
				if(m2mEventCalls<2)
   14662:	4b30      	ldr	r3, [pc, #192]	; (14724 <endCall+0x210>)
   14664:	781b      	ldrb	r3, [r3, #0]
   14666:	2b01      	cmp	r3, #1
   14668:	d80c      	bhi.n	14684 <endCall+0x170>
				{
					tempEventStageTime=xTaskGetTickCount();
   1466a:	4b29      	ldr	r3, [pc, #164]	; (14710 <endCall+0x1fc>)
   1466c:	4798      	blx	r3
   1466e:	0002      	movs	r2, r0
   14670:	4b28      	ldr	r3, [pc, #160]	; (14714 <endCall+0x200>)
   14672:	601a      	str	r2, [r3, #0]
					stagedEventType=m2mEventNo;
   14674:	4b2d      	ldr	r3, [pc, #180]	; (1472c <endCall+0x218>)
   14676:	781a      	ldrb	r2, [r3, #0]
   14678:	4b28      	ldr	r3, [pc, #160]	; (1471c <endCall+0x208>)
   1467a:	701a      	strb	r2, [r3, #0]
					m2mEventStaged=true;
   1467c:	4b2d      	ldr	r3, [pc, #180]	; (14734 <endCall+0x220>)
   1467e:	2201      	movs	r2, #1
   14680:	701a      	strb	r2, [r3, #0]
   14682:	e005      	b.n	14690 <endCall+0x17c>
				}
				else
				{
					setM2MEventState(m2mEventNo,ME_NOTAVAILABLE);
   14684:	4b29      	ldr	r3, [pc, #164]	; (1472c <endCall+0x218>)
   14686:	781b      	ldrb	r3, [r3, #0]
   14688:	2103      	movs	r1, #3
   1468a:	0018      	movs	r0, r3
   1468c:	4b28      	ldr	r3, [pc, #160]	; (14730 <endCall+0x21c>)
   1468e:	4798      	blx	r3
				}
			}
			m2mEvent = false;
   14690:	4b19      	ldr	r3, [pc, #100]	; (146f8 <endCall+0x1e4>)
   14692:	2200      	movs	r2, #0
   14694:	701a      	strb	r2, [r3, #0]
		}
		keyPressed=false;
   14696:	4b28      	ldr	r3, [pc, #160]	; (14738 <endCall+0x224>)
   14698:	2200      	movs	r2, #0
   1469a:	701a      	strb	r2, [r3, #0]
		m2mAck=false;
   1469c:	4b22      	ldr	r3, [pc, #136]	; (14728 <endCall+0x214>)
   1469e:	2200      	movs	r2, #0
   146a0:	701a      	strb	r2, [r3, #0]
	}
	callAccepted = false;
   146a2:	4b17      	ldr	r3, [pc, #92]	; (14700 <endCall+0x1ec>)
   146a4:	2200      	movs	r2, #0
   146a6:	701a      	strb	r2, [r3, #0]
	currentStatus = 'N';
   146a8:	4b11      	ldr	r3, [pc, #68]	; (146f0 <endCall+0x1dc>)
   146aa:	224e      	movs	r2, #78	; 0x4e
   146ac:	701a      	strb	r2, [r3, #0]
	currentCallStatus = 'N';
   146ae:	4b11      	ldr	r3, [pc, #68]	; (146f4 <endCall+0x1e0>)
   146b0:	224e      	movs	r2, #78	; 0x4e
   146b2:	701a      	strb	r2, [r3, #0]

	isRegisteredNumber=false;
   146b4:	4b21      	ldr	r3, [pc, #132]	; (1473c <endCall+0x228>)
   146b6:	2200      	movs	r2, #0
   146b8:	701a      	strb	r2, [r3, #0]
	obtainEventTimer = xTaskGetTickCount();
   146ba:	4b15      	ldr	r3, [pc, #84]	; (14710 <endCall+0x1fc>)
   146bc:	4798      	blx	r3
   146be:	0002      	movs	r2, r0
   146c0:	4b1f      	ldr	r3, [pc, #124]	; (14740 <endCall+0x22c>)
   146c2:	601a      	str	r2, [r3, #0]
	obtainNewEvent = false;
   146c4:	4b1f      	ldr	r3, [pc, #124]	; (14744 <endCall+0x230>)
   146c6:	2200      	movs	r2, #0
   146c8:	701a      	strb	r2, [r3, #0]
}
   146ca:	46c0      	nop			; (mov r8, r8)
   146cc:	46bd      	mov	sp, r7
   146ce:	bd80      	pop	{r7, pc}
   146d0:	200008e4 	.word	0x200008e4
   146d4:	2000099c 	.word	0x2000099c
   146d8:	000130a1 	.word	0x000130a1
   146dc:	0001cf2d 	.word	0x0001cf2d
   146e0:	0001fe69 	.word	0x0001fe69
   146e4:	20000944 	.word	0x20000944
   146e8:	2000082c 	.word	0x2000082c
   146ec:	20000a0b 	.word	0x20000a0b
   146f0:	200009dc 	.word	0x200009dc
   146f4:	2000098f 	.word	0x2000098f
   146f8:	20000943 	.word	0x20000943
   146fc:	200008e5 	.word	0x200008e5
   14700:	2000099e 	.word	0x2000099e
   14704:	20000854 	.word	0x20000854
   14708:	20000814 	.word	0x20000814
   1470c:	200009d3 	.word	0x200009d3
   14710:	000201cd 	.word	0x000201cd
   14714:	200009f0 	.word	0x200009f0
   14718:	20000963 	.word	0x20000963
   1471c:	20000975 	.word	0x20000975
   14720:	20000754 	.word	0x20000754
   14724:	200009d4 	.word	0x200009d4
   14728:	2000092c 	.word	0x2000092c
   1472c:	2000092d 	.word	0x2000092d
   14730:	0001bec1 	.word	0x0001bec1
   14734:	2000098e 	.word	0x2000098e
   14738:	200009d0 	.word	0x200009d0
   1473c:	20000998 	.word	0x20000998
   14740:	20000a10 	.word	0x20000a10
   14744:	20000972 	.word	0x20000972

00014748 <makeCall>:


void makeCall(void)
{
   14748:	b580      	push	{r7, lr}
   1474a:	b086      	sub	sp, #24
   1474c:	af00      	add	r7, sp, #0
	inCall=true;
   1474e:	4b20      	ldr	r3, [pc, #128]	; (147d0 <makeCall+0x88>)
   14750:	2201      	movs	r2, #1
   14752:	701a      	strb	r2, [r3, #0]
	
	char command[20] = {0};
   14754:	1d3b      	adds	r3, r7, #4
   14756:	0018      	movs	r0, r3
   14758:	2314      	movs	r3, #20
   1475a:	001a      	movs	r2, r3
   1475c:	2100      	movs	r1, #0
   1475e:	4b1d      	ldr	r3, [pc, #116]	; (147d4 <makeCall+0x8c>)
   14760:	4798      	blx	r3
	
	if(m2m_Numbers_struct.m2mSetting && m2mEvent)
   14762:	4b1d      	ldr	r3, [pc, #116]	; (147d8 <makeCall+0x90>)
   14764:	795b      	ldrb	r3, [r3, #5]
   14766:	2b00      	cmp	r3, #0
   14768:	d008      	beq.n	1477c <makeCall+0x34>
   1476a:	4b1c      	ldr	r3, [pc, #112]	; (147dc <makeCall+0x94>)
   1476c:	781b      	ldrb	r3, [r3, #0]
   1476e:	2b00      	cmp	r3, #0
   14770:	d004      	beq.n	1477c <makeCall+0x34>
	{
		getM2MRemoteNumber(command);
   14772:	1d3b      	adds	r3, r7, #4
   14774:	0018      	movs	r0, r3
   14776:	4b1a      	ldr	r3, [pc, #104]	; (147e0 <makeCall+0x98>)
   14778:	4798      	blx	r3
   1477a:	e00f      	b.n	1479c <makeCall+0x54>
	}
	else
	{
		if(retries)
   1477c:	4b19      	ldr	r3, [pc, #100]	; (147e4 <makeCall+0x9c>)
   1477e:	781b      	ldrb	r3, [r3, #0]
   14780:	2b00      	cmp	r3, #0
   14782:	d007      	beq.n	14794 <makeCall+0x4c>
		{
			getIndexedNumber(command,user_count_struct.secondaryNumberIndex);
   14784:	4b18      	ldr	r3, [pc, #96]	; (147e8 <makeCall+0xa0>)
   14786:	791a      	ldrb	r2, [r3, #4]
   14788:	1d3b      	adds	r3, r7, #4
   1478a:	0011      	movs	r1, r2
   1478c:	0018      	movs	r0, r3
   1478e:	4b17      	ldr	r3, [pc, #92]	; (147ec <makeCall+0xa4>)
   14790:	4798      	blx	r3
   14792:	e003      	b.n	1479c <makeCall+0x54>
		}
		else
		{
			getActiveNumber(command);
   14794:	1d3b      	adds	r3, r7, #4
   14796:	0018      	movs	r0, r3
   14798:	4b15      	ldr	r3, [pc, #84]	; (147f0 <makeCall+0xa8>)
   1479a:	4798      	blx	r3
		}
	}
	gsm_call_to_dial_a_number(command);
   1479c:	1d3b      	adds	r3, r7, #4
   1479e:	0018      	movs	r0, r3
   147a0:	4b14      	ldr	r3, [pc, #80]	; (147f4 <makeCall+0xac>)
   147a2:	4798      	blx	r3
	setCallStateOnLCD(LCDCALLSTATE_OUTGOING,command,false);
   147a4:	1d3b      	adds	r3, r7, #4
   147a6:	2200      	movs	r2, #0
   147a8:	0019      	movs	r1, r3
   147aa:	2003      	movs	r0, #3
   147ac:	4b12      	ldr	r3, [pc, #72]	; (147f8 <makeCall+0xb0>)
   147ae:	4798      	blx	r3
	callCutWait = xTaskGetTickCount();
   147b0:	4b12      	ldr	r3, [pc, #72]	; (147fc <makeCall+0xb4>)
   147b2:	4798      	blx	r3
   147b4:	0002      	movs	r2, r0
   147b6:	4b12      	ldr	r3, [pc, #72]	; (14800 <makeCall+0xb8>)
   147b8:	601a      	str	r2, [r3, #0]
	currentStatus = 'R';
   147ba:	4b12      	ldr	r3, [pc, #72]	; (14804 <makeCall+0xbc>)
   147bc:	2252      	movs	r2, #82	; 0x52
   147be:	701a      	strb	r2, [r3, #0]
	currentCallStatus = 'O';
   147c0:	4b11      	ldr	r3, [pc, #68]	; (14808 <makeCall+0xc0>)
   147c2:	224f      	movs	r2, #79	; 0x4f
   147c4:	701a      	strb	r2, [r3, #0]
}
   147c6:	46c0      	nop			; (mov r8, r8)
   147c8:	46bd      	mov	sp, r7
   147ca:	b006      	add	sp, #24
   147cc:	bd80      	pop	{r7, pc}
   147ce:	46c0      	nop			; (mov r8, r8)
   147d0:	2000099c 	.word	0x2000099c
   147d4:	00028b57 	.word	0x00028b57
   147d8:	20000754 	.word	0x20000754
   147dc:	20000943 	.word	0x20000943
   147e0:	00010b09 	.word	0x00010b09
   147e4:	200008e5 	.word	0x200008e5
   147e8:	20000814 	.word	0x20000814
   147ec:	00010919 	.word	0x00010919
   147f0:	00010d21 	.word	0x00010d21
   147f4:	00012edd 	.word	0x00012edd
   147f8:	0001cf2d 	.word	0x0001cf2d
   147fc:	000201cd 	.word	0x000201cd
   14800:	20000a14 	.word	0x20000a14
   14804:	200009dc 	.word	0x200009dc
   14808:	2000098f 	.word	0x2000098f

0001480c <acceptCall>:

void acceptCall(void)
{
   1480c:	b580      	push	{r7, lr}
   1480e:	af00      	add	r7, sp, #0
	isRegisteredNumber=false;   //clear flag for next call, in case any error occures and endCall() is not called for ending the call
   14810:	4b0a      	ldr	r3, [pc, #40]	; (1483c <acceptCall+0x30>)
   14812:	2200      	movs	r2, #0
   14814:	701a      	strb	r2, [r3, #0]
	callAccepted = true;
   14816:	4b0a      	ldr	r3, [pc, #40]	; (14840 <acceptCall+0x34>)
   14818:	2201      	movs	r2, #1
   1481a:	701a      	strb	r2, [r3, #0]
	gsm_answer_an_incomming_call();
   1481c:	4b09      	ldr	r3, [pc, #36]	; (14844 <acceptCall+0x38>)
   1481e:	4798      	blx	r3
	currentStatus = 'I';
   14820:	4b09      	ldr	r3, [pc, #36]	; (14848 <acceptCall+0x3c>)
   14822:	2249      	movs	r2, #73	; 0x49
   14824:	701a      	strb	r2, [r3, #0]
	currentCallStatus = 'I';
   14826:	4b09      	ldr	r3, [pc, #36]	; (1484c <acceptCall+0x40>)
   14828:	2249      	movs	r2, #73	; 0x49
   1482a:	701a      	strb	r2, [r3, #0]
	playSound('M',true);
   1482c:	2101      	movs	r1, #1
   1482e:	204d      	movs	r0, #77	; 0x4d
   14830:	4b07      	ldr	r3, [pc, #28]	; (14850 <acceptCall+0x44>)
   14832:	4798      	blx	r3
	//displayInIncomingCall
}
   14834:	46c0      	nop			; (mov r8, r8)
   14836:	46bd      	mov	sp, r7
   14838:	bd80      	pop	{r7, pc}
   1483a:	46c0      	nop			; (mov r8, r8)
   1483c:	20000998 	.word	0x20000998
   14840:	2000099e 	.word	0x2000099e
   14844:	00012f75 	.word	0x00012f75
   14848:	200009dc 	.word	0x200009dc
   1484c:	2000098f 	.word	0x2000098f
   14850:	00014855 	.word	0x00014855

00014854 <playSound>:

//void playSound(char actionType, bool newAction=true)
void playSound(char actionTypeT, bool newAction)
{
   14854:	b580      	push	{r7, lr}
   14856:	b082      	sub	sp, #8
   14858:	af00      	add	r7, sp, #0
   1485a:	0002      	movs	r2, r0
   1485c:	1dfb      	adds	r3, r7, #7
   1485e:	701a      	strb	r2, [r3, #0]
   14860:	1dbb      	adds	r3, r7, #6
   14862:	1c0a      	adds	r2, r1, #0
   14864:	701a      	strb	r2, [r3, #0]
	gsm_stop_play_record_file();
   14866:	4b14      	ldr	r3, [pc, #80]	; (148b8 <playSound+0x64>)
   14868:	4798      	blx	r3
	bplaySound = true;
   1486a:	4b14      	ldr	r3, [pc, #80]	; (148bc <playSound+0x68>)
   1486c:	2201      	movs	r2, #1
   1486e:	701a      	strb	r2, [r3, #0]
	if (newAction)
   14870:	1dbb      	adds	r3, r7, #6
   14872:	781b      	ldrb	r3, [r3, #0]
   14874:	2b00      	cmp	r3, #0
   14876:	d016      	beq.n	148a6 <playSound+0x52>
	{
		maxPlayingFiles=1;
   14878:	4b11      	ldr	r3, [pc, #68]	; (148c0 <playSound+0x6c>)
   1487a:	2201      	movs	r2, #1
   1487c:	701a      	strb	r2, [r3, #0]
		currentPlayingFileIndex=0;
   1487e:	4b11      	ldr	r3, [pc, #68]	; (148c4 <playSound+0x70>)
   14880:	2200      	movs	r2, #0
   14882:	701a      	strb	r2, [r3, #0]
		playFilesList[currentPlayingFileIndex]=actionTypeT;
   14884:	4b0f      	ldr	r3, [pc, #60]	; (148c4 <playSound+0x70>)
   14886:	781b      	ldrb	r3, [r3, #0]
   14888:	0019      	movs	r1, r3
   1488a:	4b0f      	ldr	r3, [pc, #60]	; (148c8 <playSound+0x74>)
   1488c:	1dfa      	adds	r2, r7, #7
   1488e:	7812      	ldrb	r2, [r2, #0]
   14890:	545a      	strb	r2, [r3, r1]
		playFilesList[currentPlayingFileIndex+1]='\0';
   14892:	4b0c      	ldr	r3, [pc, #48]	; (148c4 <playSound+0x70>)
   14894:	781b      	ldrb	r3, [r3, #0]
   14896:	3301      	adds	r3, #1
   14898:	4a0b      	ldr	r2, [pc, #44]	; (148c8 <playSound+0x74>)
   1489a:	2100      	movs	r1, #0
   1489c:	54d1      	strb	r1, [r2, r3]
		actionType = actionTypeT;
   1489e:	4b0b      	ldr	r3, [pc, #44]	; (148cc <playSound+0x78>)
   148a0:	1dfa      	adds	r2, r7, #7
   148a2:	7812      	ldrb	r2, [r2, #0]
   148a4:	701a      	strb	r2, [r3, #0]
	}
	playFile = actionTypeT;
   148a6:	4b0a      	ldr	r3, [pc, #40]	; (148d0 <playSound+0x7c>)
   148a8:	1dfa      	adds	r2, r7, #7
   148aa:	7812      	ldrb	r2, [r2, #0]
   148ac:	701a      	strb	r2, [r3, #0]
}
   148ae:	46c0      	nop			; (mov r8, r8)
   148b0:	46bd      	mov	sp, r7
   148b2:	b002      	add	sp, #8
   148b4:	bd80      	pop	{r7, pc}
   148b6:	46c0      	nop			; (mov r8, r8)
   148b8:	00013101 	.word	0x00013101
   148bc:	20000a62 	.word	0x20000a62
   148c0:	200009d5 	.word	0x200009d5
   148c4:	200009c5 	.word	0x200009c5
   148c8:	2000094c 	.word	0x2000094c
   148cc:	20000963 	.word	0x20000963
   148d0:	200009c3 	.word	0x200009c3

000148d4 <playSoundElligible>:

bool playSoundElligible(void)
{
   148d4:	b580      	push	{r7, lr}
   148d6:	af00      	add	r7, sp, #0
	return (bplaySound && ((xTaskGetTickCount() - soundWait) > (soundWaitTime * 100)));
   148d8:	4b0d      	ldr	r3, [pc, #52]	; (14910 <playSoundElligible+0x3c>)
   148da:	781b      	ldrb	r3, [r3, #0]
   148dc:	2b00      	cmp	r3, #0
   148de:	d00e      	beq.n	148fe <playSoundElligible+0x2a>
   148e0:	4b0c      	ldr	r3, [pc, #48]	; (14914 <playSoundElligible+0x40>)
   148e2:	4798      	blx	r3
   148e4:	0002      	movs	r2, r0
   148e6:	4b0c      	ldr	r3, [pc, #48]	; (14918 <playSoundElligible+0x44>)
   148e8:	681b      	ldr	r3, [r3, #0]
   148ea:	1ad3      	subs	r3, r2, r3
   148ec:	4a0b      	ldr	r2, [pc, #44]	; (1491c <playSoundElligible+0x48>)
   148ee:	7812      	ldrb	r2, [r2, #0]
   148f0:	0011      	movs	r1, r2
   148f2:	2264      	movs	r2, #100	; 0x64
   148f4:	434a      	muls	r2, r1
   148f6:	4293      	cmp	r3, r2
   148f8:	d901      	bls.n	148fe <playSoundElligible+0x2a>
   148fa:	2301      	movs	r3, #1
   148fc:	e000      	b.n	14900 <playSoundElligible+0x2c>
   148fe:	2300      	movs	r3, #0
   14900:	1c1a      	adds	r2, r3, #0
   14902:	2301      	movs	r3, #1
   14904:	4013      	ands	r3, r2
   14906:	b2db      	uxtb	r3, r3
}
   14908:	0018      	movs	r0, r3
   1490a:	46bd      	mov	sp, r7
   1490c:	bd80      	pop	{r7, pc}
   1490e:	46c0      	nop			; (mov r8, r8)
   14910:	20000a62 	.word	0x20000a62
   14914:	000201cd 	.word	0x000201cd
   14918:	20000a3c 	.word	0x20000a3c
   1491c:	200009d6 	.word	0x200009d6

00014920 <triggerPlaySound>:

void triggerPlaySound(void)
{
   14920:	b580      	push	{r7, lr}
   14922:	af00      	add	r7, sp, #0
	if(maxPlayingFiles>1)
   14924:	4b0b      	ldr	r3, [pc, #44]	; (14954 <triggerPlaySound+0x34>)
   14926:	781b      	ldrb	r3, [r3, #0]
   14928:	2b01      	cmp	r3, #1
   1492a:	d906      	bls.n	1493a <triggerPlaySound+0x1a>
	{
		gsm_play_record_file((char*)playFile,false);
   1492c:	4b0a      	ldr	r3, [pc, #40]	; (14958 <triggerPlaySound+0x38>)
   1492e:	781b      	ldrb	r3, [r3, #0]
   14930:	2100      	movs	r1, #0
   14932:	0018      	movs	r0, r3
   14934:	4b09      	ldr	r3, [pc, #36]	; (1495c <triggerPlaySound+0x3c>)
   14936:	4798      	blx	r3
   14938:	e005      	b.n	14946 <triggerPlaySound+0x26>
	}
	else
	{
		gsm_play_record_file((char*)playFile,true);
   1493a:	4b07      	ldr	r3, [pc, #28]	; (14958 <triggerPlaySound+0x38>)
   1493c:	781b      	ldrb	r3, [r3, #0]
   1493e:	2101      	movs	r1, #1
   14940:	0018      	movs	r0, r3
   14942:	4b06      	ldr	r3, [pc, #24]	; (1495c <triggerPlaySound+0x3c>)
   14944:	4798      	blx	r3
	}
	bplaySound = false;
   14946:	4b06      	ldr	r3, [pc, #24]	; (14960 <triggerPlaySound+0x40>)
   14948:	2200      	movs	r2, #0
   1494a:	701a      	strb	r2, [r3, #0]
}
   1494c:	46c0      	nop			; (mov r8, r8)
   1494e:	46bd      	mov	sp, r7
   14950:	bd80      	pop	{r7, pc}
   14952:	46c0      	nop			; (mov r8, r8)
   14954:	200009d5 	.word	0x200009d5
   14958:	200009c3 	.word	0x200009c3
   1495c:	00013131 	.word	0x00013131
   14960:	20000a62 	.word	0x20000a62

00014964 <playSoundAgain>:

void playSoundAgain(char *string)
{
   14964:	b580      	push	{r7, lr}
   14966:	b082      	sub	sp, #8
   14968:	af00      	add	r7, sp, #0
   1496a:	6078      	str	r0, [r7, #4]
	if (!bplaySound && gsm_responseLine_is_StopSound_Received(string))
   1496c:	4b1c      	ldr	r3, [pc, #112]	; (149e0 <playSoundAgain+0x7c>)
   1496e:	781b      	ldrb	r3, [r3, #0]
   14970:	2201      	movs	r2, #1
   14972:	4053      	eors	r3, r2
   14974:	b2db      	uxtb	r3, r3
   14976:	2b00      	cmp	r3, #0
   14978:	d02e      	beq.n	149d8 <playSoundAgain+0x74>
   1497a:	687b      	ldr	r3, [r7, #4]
   1497c:	0018      	movs	r0, r3
   1497e:	4b19      	ldr	r3, [pc, #100]	; (149e4 <playSoundAgain+0x80>)
   14980:	4798      	blx	r3
   14982:	1e03      	subs	r3, r0, #0
   14984:	d028      	beq.n	149d8 <playSoundAgain+0x74>
	{
		if(maxPlayingFiles>1)
   14986:	4b18      	ldr	r3, [pc, #96]	; (149e8 <playSoundAgain+0x84>)
   14988:	781b      	ldrb	r3, [r3, #0]
   1498a:	2b01      	cmp	r3, #1
   1498c:	d91c      	bls.n	149c8 <playSoundAgain+0x64>
		{
			if(currentPlayingFileIndex<maxPlayingFiles-1)
   1498e:	4b17      	ldr	r3, [pc, #92]	; (149ec <playSoundAgain+0x88>)
   14990:	781b      	ldrb	r3, [r3, #0]
   14992:	001a      	movs	r2, r3
   14994:	4b14      	ldr	r3, [pc, #80]	; (149e8 <playSoundAgain+0x84>)
   14996:	781b      	ldrb	r3, [r3, #0]
   14998:	3b01      	subs	r3, #1
   1499a:	429a      	cmp	r2, r3
   1499c:	da0f      	bge.n	149be <playSoundAgain+0x5a>
			{
				playSound(playFilesList[++currentPlayingFileIndex],false);
   1499e:	4b13      	ldr	r3, [pc, #76]	; (149ec <playSoundAgain+0x88>)
   149a0:	781b      	ldrb	r3, [r3, #0]
   149a2:	3301      	adds	r3, #1
   149a4:	b2da      	uxtb	r2, r3
   149a6:	4b11      	ldr	r3, [pc, #68]	; (149ec <playSoundAgain+0x88>)
   149a8:	701a      	strb	r2, [r3, #0]
   149aa:	4b10      	ldr	r3, [pc, #64]	; (149ec <playSoundAgain+0x88>)
   149ac:	781b      	ldrb	r3, [r3, #0]
   149ae:	001a      	movs	r2, r3
   149b0:	4b0f      	ldr	r3, [pc, #60]	; (149f0 <playSoundAgain+0x8c>)
   149b2:	5c9b      	ldrb	r3, [r3, r2]
   149b4:	2100      	movs	r1, #0
   149b6:	0018      	movs	r0, r3
   149b8:	4b0e      	ldr	r3, [pc, #56]	; (149f4 <playSoundAgain+0x90>)
   149ba:	4798      	blx	r3
		else if(maxPlayingFiles==1)
		{
			playSound('M',true);
		}
	}
}
   149bc:	e00c      	b.n	149d8 <playSoundAgain+0x74>
				playSound('M',true);
   149be:	2101      	movs	r1, #1
   149c0:	204d      	movs	r0, #77	; 0x4d
   149c2:	4b0c      	ldr	r3, [pc, #48]	; (149f4 <playSoundAgain+0x90>)
   149c4:	4798      	blx	r3
}
   149c6:	e007      	b.n	149d8 <playSoundAgain+0x74>
		else if(maxPlayingFiles==1)
   149c8:	4b07      	ldr	r3, [pc, #28]	; (149e8 <playSoundAgain+0x84>)
   149ca:	781b      	ldrb	r3, [r3, #0]
   149cc:	2b01      	cmp	r3, #1
   149ce:	d103      	bne.n	149d8 <playSoundAgain+0x74>
			playSound('M',true);
   149d0:	2101      	movs	r1, #1
   149d2:	204d      	movs	r0, #77	; 0x4d
   149d4:	4b07      	ldr	r3, [pc, #28]	; (149f4 <playSoundAgain+0x90>)
   149d6:	4798      	blx	r3
}
   149d8:	46c0      	nop			; (mov r8, r8)
   149da:	46bd      	mov	sp, r7
   149dc:	b002      	add	sp, #8
   149de:	bd80      	pop	{r7, pc}
   149e0:	20000a62 	.word	0x20000a62
   149e4:	000138a5 	.word	0x000138a5
   149e8:	200009d5 	.word	0x200009d5
   149ec:	200009c5 	.word	0x200009c5
   149f0:	2000094c 	.word	0x2000094c
   149f4:	00014855 	.word	0x00014855

000149f8 <playRepeatedFiles>:

void playRepeatedFiles(char *fileList)
{
   149f8:	b580      	push	{r7, lr}
   149fa:	b082      	sub	sp, #8
   149fc:	af00      	add	r7, sp, #0
   149fe:	6078      	str	r0, [r7, #4]
	if(strlen(fileList)<15)
   14a00:	687b      	ldr	r3, [r7, #4]
   14a02:	0018      	movs	r0, r3
   14a04:	4b14      	ldr	r3, [pc, #80]	; (14a58 <playRepeatedFiles+0x60>)
   14a06:	4798      	blx	r3
   14a08:	0003      	movs	r3, r0
   14a0a:	2b0e      	cmp	r3, #14
   14a0c:	d81f      	bhi.n	14a4e <playRepeatedFiles+0x56>
	{
		currentPlayingFileIndex=0;
   14a0e:	4b13      	ldr	r3, [pc, #76]	; (14a5c <playRepeatedFiles+0x64>)
   14a10:	2200      	movs	r2, #0
   14a12:	701a      	strb	r2, [r3, #0]
		maxPlayingFiles=strlen(fileList);
   14a14:	687b      	ldr	r3, [r7, #4]
   14a16:	0018      	movs	r0, r3
   14a18:	4b0f      	ldr	r3, [pc, #60]	; (14a58 <playRepeatedFiles+0x60>)
   14a1a:	4798      	blx	r3
   14a1c:	0003      	movs	r3, r0
   14a1e:	b2da      	uxtb	r2, r3
   14a20:	4b0f      	ldr	r3, [pc, #60]	; (14a60 <playRepeatedFiles+0x68>)
   14a22:	701a      	strb	r2, [r3, #0]
		strcpy(playFilesList,fileList);
   14a24:	687a      	ldr	r2, [r7, #4]
   14a26:	4b0f      	ldr	r3, [pc, #60]	; (14a64 <playRepeatedFiles+0x6c>)
   14a28:	0011      	movs	r1, r2
   14a2a:	0018      	movs	r0, r3
   14a2c:	4b0e      	ldr	r3, [pc, #56]	; (14a68 <playRepeatedFiles+0x70>)
   14a2e:	4798      	blx	r3
		soundWait = xTaskGetTickCount();
   14a30:	4b0e      	ldr	r3, [pc, #56]	; (14a6c <playRepeatedFiles+0x74>)
   14a32:	4798      	blx	r3
   14a34:	0002      	movs	r2, r0
   14a36:	4b0e      	ldr	r3, [pc, #56]	; (14a70 <playRepeatedFiles+0x78>)
   14a38:	601a      	str	r2, [r3, #0]
		playFile = playFilesList[currentPlayingFileIndex];
   14a3a:	4b08      	ldr	r3, [pc, #32]	; (14a5c <playRepeatedFiles+0x64>)
   14a3c:	781b      	ldrb	r3, [r3, #0]
   14a3e:	001a      	movs	r2, r3
   14a40:	4b08      	ldr	r3, [pc, #32]	; (14a64 <playRepeatedFiles+0x6c>)
   14a42:	5c9a      	ldrb	r2, [r3, r2]
   14a44:	4b0b      	ldr	r3, [pc, #44]	; (14a74 <playRepeatedFiles+0x7c>)
   14a46:	701a      	strb	r2, [r3, #0]
		bplaySound = true;
   14a48:	4b0b      	ldr	r3, [pc, #44]	; (14a78 <playRepeatedFiles+0x80>)
   14a4a:	2201      	movs	r2, #1
   14a4c:	701a      	strb	r2, [r3, #0]
	}
}
   14a4e:	46c0      	nop			; (mov r8, r8)
   14a50:	46bd      	mov	sp, r7
   14a52:	b002      	add	sp, #8
   14a54:	bd80      	pop	{r7, pc}
   14a56:	46c0      	nop			; (mov r8, r8)
   14a58:	00028de7 	.word	0x00028de7
   14a5c:	200009c5 	.word	0x200009c5
   14a60:	200009d5 	.word	0x200009d5
   14a64:	2000094c 	.word	0x2000094c
   14a68:	00028dd7 	.word	0x00028dd7
   14a6c:	000201cd 	.word	0x000201cd
   14a70:	20000a3c 	.word	0x20000a3c
   14a74:	200009c3 	.word	0x200009c3
   14a78:	20000a62 	.word	0x20000a62

00014a7c <callTimerExpire>:

bool callTimerExpire(void)
{
   14a7c:	b580      	push	{r7, lr}
   14a7e:	af00      	add	r7, sp, #0
	if(isRinging)
   14a80:	4b12      	ldr	r3, [pc, #72]	; (14acc <callTimerExpire+0x50>)
   14a82:	781b      	ldrb	r3, [r3, #0]
   14a84:	b2db      	uxtb	r3, r3
   14a86:	2b00      	cmp	r3, #0
   14a88:	d00a      	beq.n	14aa0 <callTimerExpire+0x24>
	{
		if(xTaskGetTickCount()-lastRingStateChangeTime>3000)
   14a8a:	4b11      	ldr	r3, [pc, #68]	; (14ad0 <callTimerExpire+0x54>)
   14a8c:	4798      	blx	r3
   14a8e:	0002      	movs	r2, r0
   14a90:	4b10      	ldr	r3, [pc, #64]	; (14ad4 <callTimerExpire+0x58>)
   14a92:	681b      	ldr	r3, [r3, #0]
   14a94:	1ad3      	subs	r3, r2, r3
   14a96:	4a10      	ldr	r2, [pc, #64]	; (14ad8 <callTimerExpire+0x5c>)
   14a98:	4293      	cmp	r3, r2
   14a9a:	d912      	bls.n	14ac2 <callTimerExpire+0x46>
		{
			return true;
   14a9c:	2301      	movs	r3, #1
   14a9e:	e011      	b.n	14ac4 <callTimerExpire+0x48>
		}
	}
	else
	{
		return ((xTaskGetTickCount() - callCutWait) >= (callCutWaitTime * 100));
   14aa0:	4b0b      	ldr	r3, [pc, #44]	; (14ad0 <callTimerExpire+0x54>)
   14aa2:	4798      	blx	r3
   14aa4:	0002      	movs	r2, r0
   14aa6:	4b0d      	ldr	r3, [pc, #52]	; (14adc <callTimerExpire+0x60>)
   14aa8:	681b      	ldr	r3, [r3, #0]
   14aaa:	1ad2      	subs	r2, r2, r3
   14aac:	4b0c      	ldr	r3, [pc, #48]	; (14ae0 <callTimerExpire+0x64>)
   14aae:	881b      	ldrh	r3, [r3, #0]
   14ab0:	0019      	movs	r1, r3
   14ab2:	2364      	movs	r3, #100	; 0x64
   14ab4:	434b      	muls	r3, r1
   14ab6:	0019      	movs	r1, r3
   14ab8:	2300      	movs	r3, #0
   14aba:	428a      	cmp	r2, r1
   14abc:	415b      	adcs	r3, r3
   14abe:	b2db      	uxtb	r3, r3
   14ac0:	e000      	b.n	14ac4 <callTimerExpire+0x48>
	}
	return false;
   14ac2:	2300      	movs	r3, #0
}
   14ac4:	0018      	movs	r0, r3
   14ac6:	46bd      	mov	sp, r7
   14ac8:	bd80      	pop	{r7, pc}
   14aca:	46c0      	nop			; (mov r8, r8)
   14acc:	2000088e 	.word	0x2000088e
   14ad0:	000201cd 	.word	0x000201cd
   14ad4:	200008cc 	.word	0x200008cc
   14ad8:	00000bb8 	.word	0x00000bb8
   14adc:	20000a14 	.word	0x20000a14
   14ae0:	20000964 	.word	0x20000964

00014ae4 <OutGoingcallState>:

char OutGoingcallState(char *response)
{
   14ae4:	b580      	push	{r7, lr}
   14ae6:	b082      	sub	sp, #8
   14ae8:	af00      	add	r7, sp, #0
   14aea:	6078      	str	r0, [r7, #4]
	if(strstr(response,"+CLCC: 1,0,2"))
   14aec:	4a16      	ldr	r2, [pc, #88]	; (14b48 <OutGoingcallState+0x64>)
   14aee:	687b      	ldr	r3, [r7, #4]
   14af0:	0011      	movs	r1, r2
   14af2:	0018      	movs	r0, r3
   14af4:	4b15      	ldr	r3, [pc, #84]	; (14b4c <OutGoingcallState+0x68>)
   14af6:	4798      	blx	r3
   14af8:	1e03      	subs	r3, r0, #0
   14afa:	d001      	beq.n	14b00 <OutGoingcallState+0x1c>
	{
		return 'D';								//dialling
   14afc:	2344      	movs	r3, #68	; 0x44
   14afe:	e01e      	b.n	14b3e <OutGoingcallState+0x5a>
	}
	else if (strstr(response,"+CLCC: 1,0,3"))
   14b00:	4a13      	ldr	r2, [pc, #76]	; (14b50 <OutGoingcallState+0x6c>)
   14b02:	687b      	ldr	r3, [r7, #4]
   14b04:	0011      	movs	r1, r2
   14b06:	0018      	movs	r0, r3
   14b08:	4b10      	ldr	r3, [pc, #64]	; (14b4c <OutGoingcallState+0x68>)
   14b0a:	4798      	blx	r3
   14b0c:	1e03      	subs	r3, r0, #0
   14b0e:	d001      	beq.n	14b14 <OutGoingcallState+0x30>
	{
		return 'R';								//alerting
   14b10:	2352      	movs	r3, #82	; 0x52
   14b12:	e014      	b.n	14b3e <OutGoingcallState+0x5a>
	}
	else if (strstr(response,"+CLCC: 1,0,0"))
   14b14:	4a0f      	ldr	r2, [pc, #60]	; (14b54 <OutGoingcallState+0x70>)
   14b16:	687b      	ldr	r3, [r7, #4]
   14b18:	0011      	movs	r1, r2
   14b1a:	0018      	movs	r0, r3
   14b1c:	4b0b      	ldr	r3, [pc, #44]	; (14b4c <OutGoingcallState+0x68>)
   14b1e:	4798      	blx	r3
   14b20:	1e03      	subs	r3, r0, #0
   14b22:	d001      	beq.n	14b28 <OutGoingcallState+0x44>
	{
		return 'I';								//active call
   14b24:	2349      	movs	r3, #73	; 0x49
   14b26:	e00a      	b.n	14b3e <OutGoingcallState+0x5a>
	}
	else if (strstr(response,"+CLCC: 1,0,6"))
   14b28:	4a0b      	ldr	r2, [pc, #44]	; (14b58 <OutGoingcallState+0x74>)
   14b2a:	687b      	ldr	r3, [r7, #4]
   14b2c:	0011      	movs	r1, r2
   14b2e:	0018      	movs	r0, r3
   14b30:	4b06      	ldr	r3, [pc, #24]	; (14b4c <OutGoingcallState+0x68>)
   14b32:	4798      	blx	r3
   14b34:	1e03      	subs	r3, r0, #0
   14b36:	d001      	beq.n	14b3c <OutGoingcallState+0x58>
	{
		return 'E';								//call ended
   14b38:	2345      	movs	r3, #69	; 0x45
   14b3a:	e000      	b.n	14b3e <OutGoingcallState+0x5a>
	}
	else
	{
		return 'N';
   14b3c:	234e      	movs	r3, #78	; 0x4e
	}
}
   14b3e:	0018      	movs	r0, r3
   14b40:	46bd      	mov	sp, r7
   14b42:	b002      	add	sp, #8
   14b44:	bd80      	pop	{r7, pc}
   14b46:	46c0      	nop			; (mov r8, r8)
   14b48:	00029d88 	.word	0x00029d88
   14b4c:	00028e17 	.word	0x00028e17
   14b50:	00029d98 	.word	0x00029d98
   14b54:	00029da8 	.word	0x00029da8
   14b58:	00029db8 	.word	0x00029db8

00014b5c <registerEvent>:

bool registerEvent(char eventType)
{
   14b5c:	b580      	push	{r7, lr}
   14b5e:	b082      	sub	sp, #8
   14b60:	af00      	add	r7, sp, #0
   14b62:	0002      	movs	r2, r0
   14b64:	1dfb      	adds	r3, r7, #7
   14b66:	701a      	strb	r2, [r3, #0]
	//if(isSIMReset())
	//{
	//return false;
	//}
	if(user_count_struct.current_user_no_count==0 || user_settings_parameter_struct.responseAddress=='N')
   14b68:	4b36      	ldr	r3, [pc, #216]	; (14c44 <registerEvent+0xe8>)
   14b6a:	789b      	ldrb	r3, [r3, #2]
   14b6c:	2b00      	cmp	r3, #0
   14b6e:	d004      	beq.n	14b7a <registerEvent+0x1e>
   14b70:	4b35      	ldr	r3, [pc, #212]	; (14c48 <registerEvent+0xec>)
   14b72:	795b      	ldrb	r3, [r3, #5]
   14b74:	b2db      	uxtb	r3, r3
   14b76:	2b4e      	cmp	r3, #78	; 0x4e
   14b78:	d101      	bne.n	14b7e <registerEvent+0x22>
	{
		return true;
   14b7a:	2301      	movs	r3, #1
   14b7c:	e05d      	b.n	14c3a <registerEvent+0xde>
	}
	if (!initialized)
   14b7e:	4b33      	ldr	r3, [pc, #204]	; (14c4c <registerEvent+0xf0>)
   14b80:	781b      	ldrb	r3, [r3, #0]
   14b82:	b2db      	uxtb	r3, r3
   14b84:	2201      	movs	r2, #1
   14b86:	4053      	eors	r3, r2
   14b88:	b2db      	uxtb	r3, r3
   14b8a:	2b00      	cmp	r3, #0
   14b8c:	d001      	beq.n	14b92 <registerEvent+0x36>
	{
		return true;
   14b8e:	2301      	movs	r3, #1
   14b90:	e053      	b.n	14c3a <registerEvent+0xde>
	}
	if(!eventStaged && actionType==eventType)
   14b92:	4b2f      	ldr	r3, [pc, #188]	; (14c50 <registerEvent+0xf4>)
   14b94:	781b      	ldrb	r3, [r3, #0]
   14b96:	2201      	movs	r2, #1
   14b98:	4053      	eors	r3, r2
   14b9a:	b2db      	uxtb	r3, r3
   14b9c:	2b00      	cmp	r3, #0
   14b9e:	d007      	beq.n	14bb0 <registerEvent+0x54>
   14ba0:	4b2c      	ldr	r3, [pc, #176]	; (14c54 <registerEvent+0xf8>)
   14ba2:	781b      	ldrb	r3, [r3, #0]
   14ba4:	1dfa      	adds	r2, r7, #7
   14ba6:	7812      	ldrb	r2, [r2, #0]
   14ba8:	429a      	cmp	r2, r3
   14baa:	d101      	bne.n	14bb0 <registerEvent+0x54>
	{
		return true;
   14bac:	2301      	movs	r3, #1
   14bae:	e044      	b.n	14c3a <registerEvent+0xde>
	}
	//if ((factory_settings_parameter_struct.ENABLE_M2M==true)?
	//(currentStatus == 'N' && currentCallStatus == 'N' && obtainNewEvent && !eventStaged && !m2mEventStaged):
	//(currentStatus == 'N' && currentCallStatus == 'N' && obtainNewEvent && !eventStaged))
	if(currentStatus == 'N' && currentCallStatus == 'N' && obtainNewEvent && !eventStaged && !m2mEventStaged)
   14bb0:	4b29      	ldr	r3, [pc, #164]	; (14c58 <registerEvent+0xfc>)
   14bb2:	781b      	ldrb	r3, [r3, #0]
   14bb4:	b2db      	uxtb	r3, r3
   14bb6:	2b4e      	cmp	r3, #78	; 0x4e
   14bb8:	d13e      	bne.n	14c38 <registerEvent+0xdc>
   14bba:	4b28      	ldr	r3, [pc, #160]	; (14c5c <registerEvent+0x100>)
   14bbc:	781b      	ldrb	r3, [r3, #0]
   14bbe:	b2db      	uxtb	r3, r3
   14bc0:	2b4e      	cmp	r3, #78	; 0x4e
   14bc2:	d139      	bne.n	14c38 <registerEvent+0xdc>
   14bc4:	4b26      	ldr	r3, [pc, #152]	; (14c60 <registerEvent+0x104>)
   14bc6:	781b      	ldrb	r3, [r3, #0]
   14bc8:	2b00      	cmp	r3, #0
   14bca:	d035      	beq.n	14c38 <registerEvent+0xdc>
   14bcc:	4b20      	ldr	r3, [pc, #128]	; (14c50 <registerEvent+0xf4>)
   14bce:	781b      	ldrb	r3, [r3, #0]
   14bd0:	2201      	movs	r2, #1
   14bd2:	4053      	eors	r3, r2
   14bd4:	b2db      	uxtb	r3, r3
   14bd6:	2b00      	cmp	r3, #0
   14bd8:	d02e      	beq.n	14c38 <registerEvent+0xdc>
   14bda:	4b22      	ldr	r3, [pc, #136]	; (14c64 <registerEvent+0x108>)
   14bdc:	781b      	ldrb	r3, [r3, #0]
   14bde:	2201      	movs	r2, #1
   14be0:	4053      	eors	r3, r2
   14be2:	b2db      	uxtb	r3, r3
   14be4:	2b00      	cmp	r3, #0
   14be6:	d027      	beq.n	14c38 <registerEvent+0xdc>
	{
		if(user_settings_parameter_struct.noCallAddress && checkNoCallTime())
   14be8:	4b17      	ldr	r3, [pc, #92]	; (14c48 <registerEvent+0xec>)
   14bea:	7a5b      	ldrb	r3, [r3, #9]
   14bec:	b2db      	uxtb	r3, r3
   14bee:	2b00      	cmp	r3, #0
   14bf0:	d005      	beq.n	14bfe <registerEvent+0xa2>
   14bf2:	4b1d      	ldr	r3, [pc, #116]	; (14c68 <registerEvent+0x10c>)
   14bf4:	4798      	blx	r3
   14bf6:	1e03      	subs	r3, r0, #0
   14bf8:	d001      	beq.n	14bfe <registerEvent+0xa2>
		{
			return true;
   14bfa:	2301      	movs	r3, #1
   14bfc:	e01d      	b.n	14c3a <registerEvent+0xde>
		}
		retries=0;
   14bfe:	4b1b      	ldr	r3, [pc, #108]	; (14c6c <registerEvent+0x110>)
   14c00:	2200      	movs	r2, #0
   14c02:	701a      	strb	r2, [r3, #0]
		if(user_settings_parameter_struct.eventStageAddress>0x00)
   14c04:	4b10      	ldr	r3, [pc, #64]	; (14c48 <registerEvent+0xec>)
   14c06:	7a1b      	ldrb	r3, [r3, #8]
   14c08:	b2db      	uxtb	r3, r3
   14c0a:	2b00      	cmp	r3, #0
   14c0c:	d00c      	beq.n	14c28 <registerEvent+0xcc>
		{
			tempEventStageTime=xTaskGetTickCount();
   14c0e:	4b18      	ldr	r3, [pc, #96]	; (14c70 <registerEvent+0x114>)
   14c10:	4798      	blx	r3
   14c12:	0002      	movs	r2, r0
   14c14:	4b17      	ldr	r3, [pc, #92]	; (14c74 <registerEvent+0x118>)
   14c16:	601a      	str	r2, [r3, #0]
			stagedEventType=eventType;
   14c18:	4b17      	ldr	r3, [pc, #92]	; (14c78 <registerEvent+0x11c>)
   14c1a:	1dfa      	adds	r2, r7, #7
   14c1c:	7812      	ldrb	r2, [r2, #0]
   14c1e:	701a      	strb	r2, [r3, #0]
			eventStaged=true;
   14c20:	4b0b      	ldr	r3, [pc, #44]	; (14c50 <registerEvent+0xf4>)
   14c22:	2201      	movs	r2, #1
   14c24:	701a      	strb	r2, [r3, #0]
   14c26:	e005      	b.n	14c34 <registerEvent+0xd8>
		}
		else
		{
			actionType = eventType;
   14c28:	4b0a      	ldr	r3, [pc, #40]	; (14c54 <registerEvent+0xf8>)
   14c2a:	1dfa      	adds	r2, r7, #7
   14c2c:	7812      	ldrb	r2, [r2, #0]
   14c2e:	701a      	strb	r2, [r3, #0]
			makeResponseAction();
   14c30:	4b12      	ldr	r3, [pc, #72]	; (14c7c <registerEvent+0x120>)
   14c32:	4798      	blx	r3
		}
		return true;
   14c34:	2301      	movs	r3, #1
   14c36:	e000      	b.n	14c3a <registerEvent+0xde>
	}
	else
	{
		return false;
   14c38:	2300      	movs	r3, #0
	}
}
   14c3a:	0018      	movs	r0, r3
   14c3c:	46bd      	mov	sp, r7
   14c3e:	b002      	add	sp, #8
   14c40:	bd80      	pop	{r7, pc}
   14c42:	46c0      	nop			; (mov r8, r8)
   14c44:	20000814 	.word	0x20000814
   14c48:	20000854 	.word	0x20000854
   14c4c:	2000099d 	.word	0x2000099d
   14c50:	200009d3 	.word	0x200009d3
   14c54:	20000963 	.word	0x20000963
   14c58:	200009dc 	.word	0x200009dc
   14c5c:	2000098f 	.word	0x2000098f
   14c60:	20000972 	.word	0x20000972
   14c64:	2000098e 	.word	0x2000098e
   14c68:	000173b9 	.word	0x000173b9
   14c6c:	200008e5 	.word	0x200008e5
   14c70:	000201cd 	.word	0x000201cd
   14c74:	200009f0 	.word	0x200009f0
   14c78:	20000975 	.word	0x20000975
   14c7c:	000144dd 	.word	0x000144dd

00014c80 <registerM2MEvent>:

void registerM2MEvent(uint8_t eventNo)
{
   14c80:	b580      	push	{r7, lr}
   14c82:	b082      	sub	sp, #8
   14c84:	af00      	add	r7, sp, #0
   14c86:	0002      	movs	r2, r0
   14c88:	1dfb      	adds	r3, r7, #7
   14c8a:	701a      	strb	r2, [r3, #0]
	if (!initialized)
   14c8c:	4b20      	ldr	r3, [pc, #128]	; (14d10 <registerM2MEvent+0x90>)
   14c8e:	781b      	ldrb	r3, [r3, #0]
   14c90:	b2db      	uxtb	r3, r3
   14c92:	2201      	movs	r2, #1
   14c94:	4053      	eors	r3, r2
   14c96:	b2db      	uxtb	r3, r3
   14c98:	2b00      	cmp	r3, #0
   14c9a:	d006      	beq.n	14caa <registerM2MEvent+0x2a>
	{
		setM2MEventState(eventNo,ME_CLEARED);
   14c9c:	1dfb      	adds	r3, r7, #7
   14c9e:	781b      	ldrb	r3, [r3, #0]
   14ca0:	2100      	movs	r1, #0
   14ca2:	0018      	movs	r0, r3
   14ca4:	4b1b      	ldr	r3, [pc, #108]	; (14d14 <registerM2MEvent+0x94>)
   14ca6:	4798      	blx	r3
		return;
   14ca8:	e02e      	b.n	14d08 <registerM2MEvent+0x88>
	}

	if (currentStatus == 'N' && currentCallStatus == 'N' && obtainNewEvent && !eventStaged && !m2mEventStaged)
   14caa:	4b1b      	ldr	r3, [pc, #108]	; (14d18 <registerM2MEvent+0x98>)
   14cac:	781b      	ldrb	r3, [r3, #0]
   14cae:	b2db      	uxtb	r3, r3
   14cb0:	2b4e      	cmp	r3, #78	; 0x4e
   14cb2:	d129      	bne.n	14d08 <registerM2MEvent+0x88>
   14cb4:	4b19      	ldr	r3, [pc, #100]	; (14d1c <registerM2MEvent+0x9c>)
   14cb6:	781b      	ldrb	r3, [r3, #0]
   14cb8:	b2db      	uxtb	r3, r3
   14cba:	2b4e      	cmp	r3, #78	; 0x4e
   14cbc:	d124      	bne.n	14d08 <registerM2MEvent+0x88>
   14cbe:	4b18      	ldr	r3, [pc, #96]	; (14d20 <registerM2MEvent+0xa0>)
   14cc0:	781b      	ldrb	r3, [r3, #0]
   14cc2:	2b00      	cmp	r3, #0
   14cc4:	d020      	beq.n	14d08 <registerM2MEvent+0x88>
   14cc6:	4b17      	ldr	r3, [pc, #92]	; (14d24 <registerM2MEvent+0xa4>)
   14cc8:	781b      	ldrb	r3, [r3, #0]
   14cca:	2201      	movs	r2, #1
   14ccc:	4053      	eors	r3, r2
   14cce:	b2db      	uxtb	r3, r3
   14cd0:	2b00      	cmp	r3, #0
   14cd2:	d019      	beq.n	14d08 <registerM2MEvent+0x88>
   14cd4:	4b14      	ldr	r3, [pc, #80]	; (14d28 <registerM2MEvent+0xa8>)
   14cd6:	781b      	ldrb	r3, [r3, #0]
   14cd8:	2201      	movs	r2, #1
   14cda:	4053      	eors	r3, r2
   14cdc:	b2db      	uxtb	r3, r3
   14cde:	2b00      	cmp	r3, #0
   14ce0:	d012      	beq.n	14d08 <registerM2MEvent+0x88>
	{
		setM2MEventState(eventNo,ME_SERVICING);
   14ce2:	1dfb      	adds	r3, r7, #7
   14ce4:	781b      	ldrb	r3, [r3, #0]
   14ce6:	2102      	movs	r1, #2
   14ce8:	0018      	movs	r0, r3
   14cea:	4b0a      	ldr	r3, [pc, #40]	; (14d14 <registerM2MEvent+0x94>)
   14cec:	4798      	blx	r3
		m2mEvent=true;
   14cee:	4b0f      	ldr	r3, [pc, #60]	; (14d2c <registerM2MEvent+0xac>)
   14cf0:	2201      	movs	r2, #1
   14cf2:	701a      	strb	r2, [r3, #0]
		m2mEventNo = eventNo;
   14cf4:	4b0e      	ldr	r3, [pc, #56]	; (14d30 <registerM2MEvent+0xb0>)
   14cf6:	1dfa      	adds	r2, r7, #7
   14cf8:	7812      	ldrb	r2, [r2, #0]
   14cfa:	701a      	strb	r2, [r3, #0]
		m2mEventCalls=0;
   14cfc:	4b0d      	ldr	r3, [pc, #52]	; (14d34 <registerM2MEvent+0xb4>)
   14cfe:	2200      	movs	r2, #0
   14d00:	701a      	strb	r2, [r3, #0]
		makeResponseAction();
   14d02:	4b0d      	ldr	r3, [pc, #52]	; (14d38 <registerM2MEvent+0xb8>)
   14d04:	4798      	blx	r3
		return;
   14d06:	46c0      	nop			; (mov r8, r8)
	}
}
   14d08:	46bd      	mov	sp, r7
   14d0a:	b002      	add	sp, #8
   14d0c:	bd80      	pop	{r7, pc}
   14d0e:	46c0      	nop			; (mov r8, r8)
   14d10:	2000099d 	.word	0x2000099d
   14d14:	0001bec1 	.word	0x0001bec1
   14d18:	200009dc 	.word	0x200009dc
   14d1c:	2000098f 	.word	0x2000098f
   14d20:	20000972 	.word	0x20000972
   14d24:	200009d3 	.word	0x200009d3
   14d28:	2000098e 	.word	0x2000098e
   14d2c:	20000943 	.word	0x20000943
   14d30:	2000092d 	.word	0x2000092d
   14d34:	200009d4 	.word	0x200009d4
   14d38:	000144dd 	.word	0x000144dd

00014d3c <setMotorMGRResponse>:

void setMotorMGRResponse(char response)
{
   14d3c:	b580      	push	{r7, lr}
   14d3e:	b082      	sub	sp, #8
   14d40:	af00      	add	r7, sp, #0
   14d42:	0002      	movs	r2, r0
   14d44:	1dfb      	adds	r3, r7, #7
   14d46:	701a      	strb	r2, [r3, #0]
	if(currentStatus!='I')    // not in Call than return.
   14d48:	4b07      	ldr	r3, [pc, #28]	; (14d68 <setMotorMGRResponse+0x2c>)
   14d4a:	781b      	ldrb	r3, [r3, #0]
   14d4c:	b2db      	uxtb	r3, r3
   14d4e:	2b49      	cmp	r3, #73	; 0x49
   14d50:	d106      	bne.n	14d60 <setMotorMGRResponse+0x24>
	{
		return;
	}
	playSound(response,true);
   14d52:	1dfb      	adds	r3, r7, #7
   14d54:	781b      	ldrb	r3, [r3, #0]
   14d56:	2101      	movs	r1, #1
   14d58:	0018      	movs	r0, r3
   14d5a:	4b04      	ldr	r3, [pc, #16]	; (14d6c <setMotorMGRResponse+0x30>)
   14d5c:	4798      	blx	r3
   14d5e:	e000      	b.n	14d62 <setMotorMGRResponse+0x26>
		return;
   14d60:	46c0      	nop			; (mov r8, r8)
}
   14d62:	46bd      	mov	sp, r7
   14d64:	b002      	add	sp, #8
   14d66:	bd80      	pop	{r7, pc}
   14d68:	200009dc 	.word	0x200009dc
   14d6c:	00014855 	.word	0x00014855

00014d70 <checkRespSMS>:

void checkRespSMS(char t1)
{
   14d70:	b580      	push	{r7, lr}
   14d72:	b082      	sub	sp, #8
   14d74:	af00      	add	r7, sp, #0
   14d76:	0002      	movs	r2, r0
   14d78:	1dfb      	adds	r3, r7, #7
   14d7a:	701a      	strb	r2, [r3, #0]
	if (!callAccepted && user_settings_parameter_struct.responseAddress=='A')
   14d7c:	4b0c      	ldr	r3, [pc, #48]	; (14db0 <checkRespSMS+0x40>)
   14d7e:	781b      	ldrb	r3, [r3, #0]
   14d80:	2201      	movs	r2, #1
   14d82:	4053      	eors	r3, r2
   14d84:	b2db      	uxtb	r3, r3
   14d86:	2b00      	cmp	r3, #0
   14d88:	d00e      	beq.n	14da8 <checkRespSMS+0x38>
   14d8a:	4b0a      	ldr	r3, [pc, #40]	; (14db4 <checkRespSMS+0x44>)
   14d8c:	795b      	ldrb	r3, [r3, #5]
   14d8e:	b2db      	uxtb	r3, r3
   14d90:	2b41      	cmp	r3, #65	; 0x41
   14d92:	d109      	bne.n	14da8 <checkRespSMS+0x38>
	{
		actionType = t1;
   14d94:	4b08      	ldr	r3, [pc, #32]	; (14db8 <checkRespSMS+0x48>)
   14d96:	1dfa      	adds	r2, r7, #7
   14d98:	7812      	ldrb	r2, [r2, #0]
   14d9a:	701a      	strb	r2, [r3, #0]
		sendSMS("",false,false);
   14d9c:	4b07      	ldr	r3, [pc, #28]	; (14dbc <checkRespSMS+0x4c>)
   14d9e:	2200      	movs	r2, #0
   14da0:	2100      	movs	r1, #0
   14da2:	0018      	movs	r0, r3
   14da4:	4b06      	ldr	r3, [pc, #24]	; (14dc0 <checkRespSMS+0x50>)
   14da6:	4798      	blx	r3
	}
}
   14da8:	46c0      	nop			; (mov r8, r8)
   14daa:	46bd      	mov	sp, r7
   14dac:	b002      	add	sp, #8
   14dae:	bd80      	pop	{r7, pc}
   14db0:	2000099e 	.word	0x2000099e
   14db4:	20000854 	.word	0x20000854
   14db8:	20000963 	.word	0x20000963
   14dbc:	00029dc8 	.word	0x00029dc8
   14dc0:	000174b5 	.word	0x000174b5

00014dc4 <subDTMF>:

void subDTMF(void)
{
   14dc4:	b580      	push	{r7, lr}
   14dc6:	af00      	add	r7, sp, #0
	gsm_stop_play_record_file();
   14dc8:	4b04      	ldr	r3, [pc, #16]	; (14ddc <subDTMF+0x18>)
   14dca:	4798      	blx	r3
	callCutWait =xTaskGetTickCount();
   14dcc:	4b04      	ldr	r3, [pc, #16]	; (14de0 <subDTMF+0x1c>)
   14dce:	4798      	blx	r3
   14dd0:	0002      	movs	r2, r0
   14dd2:	4b04      	ldr	r3, [pc, #16]	; (14de4 <subDTMF+0x20>)
   14dd4:	601a      	str	r2, [r3, #0]
}
   14dd6:	46c0      	nop			; (mov r8, r8)
   14dd8:	46bd      	mov	sp, r7
   14dda:	bd80      	pop	{r7, pc}
   14ddc:	00013101 	.word	0x00013101
   14de0:	000201cd 	.word	0x000201cd
   14de4:	20000a14 	.word	0x20000a14

00014de8 <processOnDTMF>:

void processOnDTMF(char *dtmf_cmd)
{
   14de8:	b580      	push	{r7, lr}
   14dea:	b084      	sub	sp, #16
   14dec:	af00      	add	r7, sp, #0
   14dee:	6078      	str	r0, [r7, #4]
	char dtmf = dtmf_cmd[0];
   14df0:	230f      	movs	r3, #15
   14df2:	18fb      	adds	r3, r7, r3
   14df4:	687a      	ldr	r2, [r7, #4]
   14df6:	7812      	ldrb	r2, [r2, #0]
   14df8:	701a      	strb	r2, [r3, #0]
	
	//LCD_clear();
	//lcd_printf("%c",dtmf);
	if (factory_settings_parameter_struct.ENABLE_M2M)
   14dfa:	4b6a      	ldr	r3, [pc, #424]	; (14fa4 <processOnDTMF+0x1bc>)
   14dfc:	78db      	ldrb	r3, [r3, #3]
   14dfe:	2b00      	cmp	r3, #0
   14e00:	d010      	beq.n	14e24 <processOnDTMF+0x3c>
	{
		if (m2mEvent)
   14e02:	4b69      	ldr	r3, [pc, #420]	; (14fa8 <processOnDTMF+0x1c0>)
   14e04:	781b      	ldrb	r3, [r3, #0]
   14e06:	2b00      	cmp	r3, #0
   14e08:	d100      	bne.n	14e0c <processOnDTMF+0x24>
   14e0a:	e0c7      	b.n	14f9c <processOnDTMF+0x1b4>
		{
			if(dtmf == 'A')
   14e0c:	230f      	movs	r3, #15
   14e0e:	18fb      	adds	r3, r7, r3
   14e10:	781b      	ldrb	r3, [r3, #0]
   14e12:	2b41      	cmp	r3, #65	; 0x41
   14e14:	d000      	beq.n	14e18 <processOnDTMF+0x30>
   14e16:	e0c1      	b.n	14f9c <processOnDTMF+0x1b4>
			{
				m2mAck=true;
   14e18:	4b64      	ldr	r3, [pc, #400]	; (14fac <processOnDTMF+0x1c4>)
   14e1a:	2201      	movs	r2, #1
   14e1c:	701a      	strb	r2, [r3, #0]
				gsm_hangup_call();
   14e1e:	4b64      	ldr	r3, [pc, #400]	; (14fb0 <processOnDTMF+0x1c8>)
   14e20:	4798      	blx	r3
		{
			subDTMF();
			voltageOnCall();
		}
	}
}
   14e22:	e0bb      	b.n	14f9c <processOnDTMF+0x1b4>
		if (dtmf == '1') //Motor On
   14e24:	230f      	movs	r3, #15
   14e26:	18fb      	adds	r3, r7, r3
   14e28:	781b      	ldrb	r3, [r3, #0]
   14e2a:	2b31      	cmp	r3, #49	; 0x31
   14e2c:	d106      	bne.n	14e3c <processOnDTMF+0x54>
			subDTMF();
   14e2e:	4b61      	ldr	r3, [pc, #388]	; (14fb4 <processOnDTMF+0x1cc>)
   14e30:	4798      	blx	r3
			startMotor(true,false);
   14e32:	2100      	movs	r1, #0
   14e34:	2001      	movs	r0, #1
   14e36:	4b60      	ldr	r3, [pc, #384]	; (14fb8 <processOnDTMF+0x1d0>)
   14e38:	4798      	blx	r3
}
   14e3a:	e0af      	b.n	14f9c <processOnDTMF+0x1b4>
		else if (dtmf == '2') //Motor Off
   14e3c:	230f      	movs	r3, #15
   14e3e:	18fb      	adds	r3, r7, r3
   14e40:	781b      	ldrb	r3, [r3, #0]
   14e42:	2b32      	cmp	r3, #50	; 0x32
   14e44:	d107      	bne.n	14e56 <processOnDTMF+0x6e>
			subDTMF();
   14e46:	4b5b      	ldr	r3, [pc, #364]	; (14fb4 <processOnDTMF+0x1cc>)
   14e48:	4798      	blx	r3
			stopMotor(true,false,false);
   14e4a:	2200      	movs	r2, #0
   14e4c:	2100      	movs	r1, #0
   14e4e:	2001      	movs	r0, #1
   14e50:	4b5a      	ldr	r3, [pc, #360]	; (14fbc <processOnDTMF+0x1d4>)
   14e52:	4798      	blx	r3
}
   14e54:	e0a2      	b.n	14f9c <processOnDTMF+0x1b4>
		else if (dtmf == '3') //Status
   14e56:	230f      	movs	r3, #15
   14e58:	18fb      	adds	r3, r7, r3
   14e5a:	781b      	ldrb	r3, [r3, #0]
   14e5c:	2b33      	cmp	r3, #51	; 0x33
   14e5e:	d104      	bne.n	14e6a <processOnDTMF+0x82>
			subDTMF();
   14e60:	4b54      	ldr	r3, [pc, #336]	; (14fb4 <processOnDTMF+0x1cc>)
   14e62:	4798      	blx	r3
			statusOnCall();
   14e64:	4b56      	ldr	r3, [pc, #344]	; (14fc0 <processOnDTMF+0x1d8>)
   14e66:	4798      	blx	r3
}
   14e68:	e098      	b.n	14f9c <processOnDTMF+0x1b4>
		else if (dtmf == '4') //underground status
   14e6a:	230f      	movs	r3, #15
   14e6c:	18fb      	adds	r3, r7, r3
   14e6e:	781b      	ldrb	r3, [r3, #0]
   14e70:	2b34      	cmp	r3, #52	; 0x34
   14e72:	d10a      	bne.n	14e8a <processOnDTMF+0xa2>
			if (factory_settings_parameter_struct.ENABLE_WATER)
   14e74:	4b4b      	ldr	r3, [pc, #300]	; (14fa4 <processOnDTMF+0x1bc>)
   14e76:	795b      	ldrb	r3, [r3, #5]
   14e78:	2b00      	cmp	r3, #0
   14e7a:	d100      	bne.n	14e7e <processOnDTMF+0x96>
   14e7c:	e08e      	b.n	14f9c <processOnDTMF+0x1b4>
				subDTMF();
   14e7e:	4b4d      	ldr	r3, [pc, #308]	; (14fb4 <processOnDTMF+0x1cc>)
   14e80:	4798      	blx	r3
				waterStatusOnCall(false);
   14e82:	2000      	movs	r0, #0
   14e84:	4b4f      	ldr	r3, [pc, #316]	; (14fc4 <processOnDTMF+0x1dc>)
   14e86:	4798      	blx	r3
}
   14e88:	e088      	b.n	14f9c <processOnDTMF+0x1b4>
		else if (dtmf == '5') //overHead Status
   14e8a:	230f      	movs	r3, #15
   14e8c:	18fb      	adds	r3, r7, r3
   14e8e:	781b      	ldrb	r3, [r3, #0]
   14e90:	2b35      	cmp	r3, #53	; 0x35
   14e92:	d10a      	bne.n	14eaa <processOnDTMF+0xc2>
			if (factory_settings_parameter_struct.ENABLE_GP)
   14e94:	4b43      	ldr	r3, [pc, #268]	; (14fa4 <processOnDTMF+0x1bc>)
   14e96:	791b      	ldrb	r3, [r3, #4]
   14e98:	2b00      	cmp	r3, #0
   14e9a:	d100      	bne.n	14e9e <processOnDTMF+0xb6>
   14e9c:	e07e      	b.n	14f9c <processOnDTMF+0x1b4>
				subDTMF();
   14e9e:	4b45      	ldr	r3, [pc, #276]	; (14fb4 <processOnDTMF+0x1cc>)
   14ea0:	4798      	blx	r3
				overHeadWaterStatusOnCall(false);
   14ea2:	2000      	movs	r0, #0
   14ea4:	4b48      	ldr	r3, [pc, #288]	; (14fc8 <processOnDTMF+0x1e0>)
   14ea6:	4798      	blx	r3
}
   14ea8:	e078      	b.n	14f9c <processOnDTMF+0x1b4>
		else if(dtmf == '0')
   14eaa:	230f      	movs	r3, #15
   14eac:	18fb      	adds	r3, r7, r3
   14eae:	781b      	ldrb	r3, [r3, #0]
   14eb0:	2b30      	cmp	r3, #48	; 0x30
   14eb2:	d114      	bne.n	14ede <processOnDTMF+0xf6>
			if (factory_settings_parameter_struct.ENABLE_CURRENT)
   14eb4:	4b3b      	ldr	r3, [pc, #236]	; (14fa4 <processOnDTMF+0x1bc>)
   14eb6:	785b      	ldrb	r3, [r3, #1]
   14eb8:	2b00      	cmp	r3, #0
   14eba:	d100      	bne.n	14ebe <processOnDTMF+0xd6>
   14ebc:	e06e      	b.n	14f9c <processOnDTMF+0x1b4>
				if(zeroPressed)
   14ebe:	4b43      	ldr	r3, [pc, #268]	; (14fcc <processOnDTMF+0x1e4>)
   14ec0:	781b      	ldrb	r3, [r3, #0]
   14ec2:	2b00      	cmp	r3, #0
   14ec4:	d007      	beq.n	14ed6 <processOnDTMF+0xee>
					autoSetCurrent();   //to enable or disable current detection
   14ec6:	4b42      	ldr	r3, [pc, #264]	; (14fd0 <processOnDTMF+0x1e8>)
   14ec8:	4798      	blx	r3
					subDTMF();
   14eca:	4b3a      	ldr	r3, [pc, #232]	; (14fb4 <processOnDTMF+0x1cc>)
   14ecc:	4798      	blx	r3
					zeroPressed=false;
   14ece:	4b3f      	ldr	r3, [pc, #252]	; (14fcc <processOnDTMF+0x1e4>)
   14ed0:	2200      	movs	r2, #0
   14ed2:	701a      	strb	r2, [r3, #0]
}
   14ed4:	e062      	b.n	14f9c <processOnDTMF+0x1b4>
					zeroPressed=true;
   14ed6:	4b3d      	ldr	r3, [pc, #244]	; (14fcc <processOnDTMF+0x1e4>)
   14ed8:	2201      	movs	r2, #1
   14eda:	701a      	strb	r2, [r3, #0]
}
   14edc:	e05e      	b.n	14f9c <processOnDTMF+0x1b4>
		else if (dtmf == '7') //Speak Current Ampere On Call
   14ede:	230f      	movs	r3, #15
   14ee0:	18fb      	adds	r3, r7, r3
   14ee2:	781b      	ldrb	r3, [r3, #0]
   14ee4:	2b37      	cmp	r3, #55	; 0x37
   14ee6:	d108      	bne.n	14efa <processOnDTMF+0x112>
			if (factory_settings_parameter_struct.AMPERE_SPEAK)
   14ee8:	4b2e      	ldr	r3, [pc, #184]	; (14fa4 <processOnDTMF+0x1bc>)
   14eea:	789b      	ldrb	r3, [r3, #2]
   14eec:	2b00      	cmp	r3, #0
   14eee:	d055      	beq.n	14f9c <processOnDTMF+0x1b4>
				subDTMF();
   14ef0:	4b30      	ldr	r3, [pc, #192]	; (14fb4 <processOnDTMF+0x1cc>)
   14ef2:	4798      	blx	r3
				speakAmpere();
   14ef4:	4b37      	ldr	r3, [pc, #220]	; (14fd4 <processOnDTMF+0x1ec>)
   14ef6:	4798      	blx	r3
}
   14ef8:	e050      	b.n	14f9c <processOnDTMF+0x1b4>
		else if(dtmf=='D')
   14efa:	230f      	movs	r3, #15
   14efc:	18fb      	adds	r3, r7, r3
   14efe:	781b      	ldrb	r3, [r3, #0]
   14f00:	2b44      	cmp	r3, #68	; 0x44
   14f02:	d10d      	bne.n	14f20 <processOnDTMF+0x138>
			saveAutoStartSettings(true);  //set AutoStart to True in EEPROM
   14f04:	2001      	movs	r0, #1
   14f06:	4b34      	ldr	r3, [pc, #208]	; (14fd8 <processOnDTMF+0x1f0>)
   14f08:	4798      	blx	r3
			resetAutoStart(true);
   14f0a:	2001      	movs	r0, #1
   14f0c:	4b33      	ldr	r3, [pc, #204]	; (14fdc <processOnDTMF+0x1f4>)
   14f0e:	4798      	blx	r3
			startMotor(false,false);
   14f10:	2100      	movs	r1, #0
   14f12:	2000      	movs	r0, #0
   14f14:	4b28      	ldr	r3, [pc, #160]	; (14fb8 <processOnDTMF+0x1d0>)
   14f16:	4798      	blx	r3
			sendDTMFTone(0xFF);
   14f18:	20ff      	movs	r0, #255	; 0xff
   14f1a:	4b31      	ldr	r3, [pc, #196]	; (14fe0 <processOnDTMF+0x1f8>)
   14f1c:	4798      	blx	r3
}
   14f1e:	e03d      	b.n	14f9c <processOnDTMF+0x1b4>
		else if(dtmf=='C')
   14f20:	230f      	movs	r3, #15
   14f22:	18fb      	adds	r3, r7, r3
   14f24:	781b      	ldrb	r3, [r3, #0]
   14f26:	2b43      	cmp	r3, #67	; 0x43
   14f28:	d10b      	bne.n	14f42 <processOnDTMF+0x15a>
			saveAutoStartSettings(false);  //set AutoStart to false in EEPROM
   14f2a:	2000      	movs	r0, #0
   14f2c:	4b2a      	ldr	r3, [pc, #168]	; (14fd8 <processOnDTMF+0x1f0>)
   14f2e:	4798      	blx	r3
			stopMotor(false,false,true);
   14f30:	2201      	movs	r2, #1
   14f32:	2100      	movs	r1, #0
   14f34:	2000      	movs	r0, #0
   14f36:	4b21      	ldr	r3, [pc, #132]	; (14fbc <processOnDTMF+0x1d4>)
   14f38:	4798      	blx	r3
			sendDTMFTone(0xFF);
   14f3a:	20ff      	movs	r0, #255	; 0xff
   14f3c:	4b28      	ldr	r3, [pc, #160]	; (14fe0 <processOnDTMF+0x1f8>)
   14f3e:	4798      	blx	r3
}
   14f40:	e02c      	b.n	14f9c <processOnDTMF+0x1b4>
		else if (dtmf == '8') //Set AUTOTIMER ON
   14f42:	230f      	movs	r3, #15
   14f44:	18fb      	adds	r3, r7, r3
   14f46:	781b      	ldrb	r3, [r3, #0]
   14f48:	2b38      	cmp	r3, #56	; 0x38
   14f4a:	d10c      	bne.n	14f66 <processOnDTMF+0x17e>
			subDTMF();
   14f4c:	4b19      	ldr	r3, [pc, #100]	; (14fb4 <processOnDTMF+0x1cc>)
   14f4e:	4798      	blx	r3
			saveAutoStartSettings(true);  //set AutoStart to True in EEPROM
   14f50:	2001      	movs	r0, #1
   14f52:	4b21      	ldr	r3, [pc, #132]	; (14fd8 <processOnDTMF+0x1f0>)
   14f54:	4798      	blx	r3
			resetAutoStart(true);
   14f56:	2001      	movs	r0, #1
   14f58:	4b20      	ldr	r3, [pc, #128]	; (14fdc <processOnDTMF+0x1f4>)
   14f5a:	4798      	blx	r3
			playSound(')',true);     // playFile AutoStart is On
   14f5c:	2101      	movs	r1, #1
   14f5e:	2029      	movs	r0, #41	; 0x29
   14f60:	4b20      	ldr	r3, [pc, #128]	; (14fe4 <processOnDTMF+0x1fc>)
   14f62:	4798      	blx	r3
}
   14f64:	e01a      	b.n	14f9c <processOnDTMF+0x1b4>
		else if (dtmf == '9') //Set AUTOTIMER OFF
   14f66:	230f      	movs	r3, #15
   14f68:	18fb      	adds	r3, r7, r3
   14f6a:	781b      	ldrb	r3, [r3, #0]
   14f6c:	2b39      	cmp	r3, #57	; 0x39
   14f6e:	d10c      	bne.n	14f8a <processOnDTMF+0x1a2>
			subDTMF();
   14f70:	4b10      	ldr	r3, [pc, #64]	; (14fb4 <processOnDTMF+0x1cc>)
   14f72:	4798      	blx	r3
			saveAutoStartSettings(false);  //set AUtoStart to False in EEPROM
   14f74:	2000      	movs	r0, #0
   14f76:	4b18      	ldr	r3, [pc, #96]	; (14fd8 <processOnDTMF+0x1f0>)
   14f78:	4798      	blx	r3
			resetAutoStart(true);
   14f7a:	2001      	movs	r0, #1
   14f7c:	4b17      	ldr	r3, [pc, #92]	; (14fdc <processOnDTMF+0x1f4>)
   14f7e:	4798      	blx	r3
			playSound('[',true); //playFile autoStart is turned oFF
   14f80:	2101      	movs	r1, #1
   14f82:	205b      	movs	r0, #91	; 0x5b
   14f84:	4b17      	ldr	r3, [pc, #92]	; (14fe4 <processOnDTMF+0x1fc>)
   14f86:	4798      	blx	r3
}
   14f88:	e008      	b.n	14f9c <processOnDTMF+0x1b4>
		else if(dtmf == '*')
   14f8a:	230f      	movs	r3, #15
   14f8c:	18fb      	adds	r3, r7, r3
   14f8e:	781b      	ldrb	r3, [r3, #0]
   14f90:	2b2a      	cmp	r3, #42	; 0x2a
   14f92:	d103      	bne.n	14f9c <processOnDTMF+0x1b4>
			subDTMF();
   14f94:	4b07      	ldr	r3, [pc, #28]	; (14fb4 <processOnDTMF+0x1cc>)
   14f96:	4798      	blx	r3
			voltageOnCall();
   14f98:	4b13      	ldr	r3, [pc, #76]	; (14fe8 <processOnDTMF+0x200>)
   14f9a:	4798      	blx	r3
}
   14f9c:	46c0      	nop			; (mov r8, r8)
   14f9e:	46bd      	mov	sp, r7
   14fa0:	b004      	add	sp, #16
   14fa2:	bd80      	pop	{r7, pc}
   14fa4:	2000082c 	.word	0x2000082c
   14fa8:	20000943 	.word	0x20000943
   14fac:	2000092c 	.word	0x2000092c
   14fb0:	000130a1 	.word	0x000130a1
   14fb4:	00014dc5 	.word	0x00014dc5
   14fb8:	0001b73d 	.word	0x0001b73d
   14fbc:	0001b925 	.word	0x0001b925
   14fc0:	0001bd71 	.word	0x0001bd71
   14fc4:	00019959 	.word	0x00019959
   14fc8:	00019811 	.word	0x00019811
   14fcc:	20000a0b 	.word	0x20000a0b
   14fd0:	0001a37d 	.word	0x0001a37d
   14fd4:	0001a475 	.word	0x0001a475
   14fd8:	000112a9 	.word	0x000112a9
   14fdc:	0001b329 	.word	0x0001b329
   14fe0:	00017671 	.word	0x00017671
   14fe4:	00014855 	.word	0x00014855
   14fe8:	0001be81 	.word	0x0001be81

00014fec <processOnSMS>:

void processOnSMS(char *received_command, bool admin,bool response_sms_processed_cmd,bool alterNumber, char *phone_number)
{
   14fec:	b5f0      	push	{r4, r5, r6, r7, lr}
   14fee:	46c6      	mov	lr, r8
   14ff0:	b500      	push	{lr}
   14ff2:	b0d4      	sub	sp, #336	; 0x150
   14ff4:	af06      	add	r7, sp, #24
   14ff6:	60f8      	str	r0, [r7, #12]
   14ff8:	000c      	movs	r4, r1
   14ffa:	0010      	movs	r0, r2
   14ffc:	0019      	movs	r1, r3
   14ffe:	4be1      	ldr	r3, [pc, #900]	; (15384 <processOnSMS+0x398>)
   15000:	2298      	movs	r2, #152	; 0x98
   15002:	0052      	lsls	r2, r2, #1
   15004:	4694      	mov	ip, r2
   15006:	2208      	movs	r2, #8
   15008:	4690      	mov	r8, r2
   1500a:	44b8      	add	r8, r7
   1500c:	44c4      	add	ip, r8
   1500e:	4463      	add	r3, ip
   15010:	1c22      	adds	r2, r4, #0
   15012:	701a      	strb	r2, [r3, #0]
   15014:	4bdc      	ldr	r3, [pc, #880]	; (15388 <processOnSMS+0x39c>)
   15016:	2298      	movs	r2, #152	; 0x98
   15018:	0052      	lsls	r2, r2, #1
   1501a:	4694      	mov	ip, r2
   1501c:	2208      	movs	r2, #8
   1501e:	4690      	mov	r8, r2
   15020:	44b8      	add	r8, r7
   15022:	44c4      	add	ip, r8
   15024:	4463      	add	r3, ip
   15026:	1c02      	adds	r2, r0, #0
   15028:	701a      	strb	r2, [r3, #0]
   1502a:	4bd8      	ldr	r3, [pc, #864]	; (1538c <processOnSMS+0x3a0>)
   1502c:	2298      	movs	r2, #152	; 0x98
   1502e:	0052      	lsls	r2, r2, #1
   15030:	4694      	mov	ip, r2
   15032:	2208      	movs	r2, #8
   15034:	4690      	mov	r8, r2
   15036:	44b8      	add	r8, r7
   15038:	44c4      	add	ip, r8
   1503a:	4463      	add	r3, ip
   1503c:	1c0a      	adds	r2, r1, #0
   1503e:	701a      	strb	r2, [r3, #0]
	char *copy_received_command;
	char resep_msg[250];
	bool incomingSMSProcessed=false;
   15040:	2330      	movs	r3, #48	; 0x30
   15042:	33ff      	adds	r3, #255	; 0xff
   15044:	2208      	movs	r2, #8
   15046:	4694      	mov	ip, r2
   15048:	44bc      	add	ip, r7
   1504a:	4463      	add	r3, ip
   1504c:	2200      	movs	r2, #0
   1504e:	701a      	strb	r2, [r3, #0]

	copy_received_command = received_command;
   15050:	68fb      	ldr	r3, [r7, #12]
   15052:	228c      	movs	r2, #140	; 0x8c
   15054:	0052      	lsls	r2, r2, #1
   15056:	2108      	movs	r1, #8
   15058:	468c      	mov	ip, r1
   1505a:	44bc      	add	ip, r7
   1505c:	4462      	add	r2, ip
   1505e:	6013      	str	r3, [r2, #0]
	
	if(alterNumber)
   15060:	4bca      	ldr	r3, [pc, #808]	; (1538c <processOnSMS+0x3a0>)
   15062:	2298      	movs	r2, #152	; 0x98
   15064:	0052      	lsls	r2, r2, #1
   15066:	4694      	mov	ip, r2
   15068:	2208      	movs	r2, #8
   1506a:	4690      	mov	r8, r2
   1506c:	44b8      	add	r8, r7
   1506e:	44c4      	add	ip, r8
   15070:	4463      	add	r3, ip
   15072:	781b      	ldrb	r3, [r3, #0]
   15074:	2b00      	cmp	r3, #0
   15076:	d00e      	beq.n	15096 <processOnSMS+0xaa>
	{
		if(!StringstartsWith(received_command,"AMON"))
   15078:	4ac5      	ldr	r2, [pc, #788]	; (15390 <processOnSMS+0x3a4>)
   1507a:	68fb      	ldr	r3, [r7, #12]
   1507c:	0011      	movs	r1, r2
   1507e:	0018      	movs	r0, r3
   15080:	4bc4      	ldr	r3, [pc, #784]	; (15394 <processOnSMS+0x3a8>)
   15082:	4798      	blx	r3
   15084:	0003      	movs	r3, r0
   15086:	001a      	movs	r2, r3
   15088:	2301      	movs	r3, #1
   1508a:	4053      	eors	r3, r2
   1508c:	b2db      	uxtb	r3, r3
   1508e:	2b00      	cmp	r3, #0
   15090:	d001      	beq.n	15096 <processOnSMS+0xaa>
   15092:	f002 f8cf 	bl	17234 <processOnSMS+0x2248>
		return;
	}
	
	if (StringstartsWith(received_command,"PRGUPD"))
   15096:	4ac0      	ldr	r2, [pc, #768]	; (15398 <processOnSMS+0x3ac>)
   15098:	68fb      	ldr	r3, [r7, #12]
   1509a:	0011      	movs	r1, r2
   1509c:	0018      	movs	r0, r3
   1509e:	4bbd      	ldr	r3, [pc, #756]	; (15394 <processOnSMS+0x3a8>)
   150a0:	4798      	blx	r3
   150a2:	1e03      	subs	r3, r0, #0
   150a4:	d029      	beq.n	150fa <processOnSMS+0x10e>
	{
		//if (admin)
		{
			bootloader_parameter.firmware_download_pending = true;
   150a6:	4bbd      	ldr	r3, [pc, #756]	; (1539c <processOnSMS+0x3b0>)
   150a8:	2201      	movs	r2, #1
   150aa:	715a      	strb	r2, [r3, #5]
			memset(bootloader_parameter.firmware_updater_mobile_no, '\0', sizeof(bootloader_parameter.firmware_updater_mobile_no));
   150ac:	4bbc      	ldr	r3, [pc, #752]	; (153a0 <processOnSMS+0x3b4>)
   150ae:	2210      	movs	r2, #16
   150b0:	2100      	movs	r1, #0
   150b2:	0018      	movs	r0, r3
   150b4:	4bbb      	ldr	r3, [pc, #748]	; (153a4 <processOnSMS+0x3b8>)
   150b6:	4798      	blx	r3
			strcpy(bootloader_parameter.firmware_updater_mobile_no,phone_number);
   150b8:	23a4      	movs	r3, #164	; 0xa4
   150ba:	005b      	lsls	r3, r3, #1
   150bc:	2208      	movs	r2, #8
   150be:	4694      	mov	ip, r2
   150c0:	44bc      	add	ip, r7
   150c2:	4463      	add	r3, ip
   150c4:	681a      	ldr	r2, [r3, #0]
   150c6:	4bb6      	ldr	r3, [pc, #728]	; (153a0 <processOnSMS+0x3b4>)
   150c8:	0011      	movs	r1, r2
   150ca:	0018      	movs	r0, r3
   150cc:	4bb6      	ldr	r3, [pc, #728]	; (153a8 <processOnSMS+0x3bc>)
   150ce:	4798      	blx	r3
			gsm_module_exit_sleep(false);
   150d0:	2000      	movs	r0, #0
   150d2:	4bb6      	ldr	r3, [pc, #728]	; (153ac <processOnSMS+0x3c0>)
   150d4:	4798      	blx	r3

			memcpy(page_data,&bootloader_parameter,sizeof(bootloader_parameter));
   150d6:	49b1      	ldr	r1, [pc, #708]	; (1539c <processOnSMS+0x3b0>)
   150d8:	4bb5      	ldr	r3, [pc, #724]	; (153b0 <processOnSMS+0x3c4>)
   150da:	221c      	movs	r2, #28
   150dc:	0018      	movs	r0, r3
   150de:	4bb5      	ldr	r3, [pc, #724]	; (153b4 <processOnSMS+0x3c8>)
   150e0:	4798      	blx	r3
			eeprom_emulator_write_page(BOOTLOADER_PARAMETER_PAGE, page_data);
   150e2:	4bb3      	ldr	r3, [pc, #716]	; (153b0 <processOnSMS+0x3c4>)
   150e4:	0019      	movs	r1, r3
   150e6:	2000      	movs	r0, #0
   150e8:	4bb3      	ldr	r3, [pc, #716]	; (153b8 <processOnSMS+0x3cc>)
   150ea:	4798      	blx	r3
			eeprom_emulator_commit_page_buffer();
   150ec:	4bb3      	ldr	r3, [pc, #716]	; (153bc <processOnSMS+0x3d0>)
   150ee:	4798      	blx	r3
			vTaskDelay(100);
   150f0:	2064      	movs	r0, #100	; 0x64
   150f2:	4bb3      	ldr	r3, [pc, #716]	; (153c0 <processOnSMS+0x3d4>)
   150f4:	4798      	blx	r3
			system_reset();
   150f6:	4bb3      	ldr	r3, [pc, #716]	; (153c4 <processOnSMS+0x3d8>)
   150f8:	4798      	blx	r3
		}
	}
	
	if (StringstartsWith(received_command,"WAIT"))
   150fa:	4ab3      	ldr	r2, [pc, #716]	; (153c8 <processOnSMS+0x3dc>)
   150fc:	68fb      	ldr	r3, [r7, #12]
   150fe:	0011      	movs	r1, r2
   15100:	0018      	movs	r0, r3
   15102:	4ba4      	ldr	r3, [pc, #656]	; (15394 <processOnSMS+0x3a8>)
   15104:	4798      	blx	r3
   15106:	1e03      	subs	r3, r0, #0
   15108:	d047      	beq.n	1519a <processOnSMS+0x1ae>
	{
		enum gsm_error err = gsm_disable_call_waiting();
   1510a:	2318      	movs	r3, #24
   1510c:	33ff      	adds	r3, #255	; 0xff
   1510e:	2208      	movs	r2, #8
   15110:	18ba      	adds	r2, r7, r2
   15112:	18d4      	adds	r4, r2, r3
   15114:	4bad      	ldr	r3, [pc, #692]	; (153cc <processOnSMS+0x3e0>)
   15116:	4798      	blx	r3
   15118:	0003      	movs	r3, r0
   1511a:	7023      	strb	r3, [r4, #0]
		incomingSMSProcessed=true;
   1511c:	2330      	movs	r3, #48	; 0x30
   1511e:	33ff      	adds	r3, #255	; 0xff
   15120:	2208      	movs	r2, #8
   15122:	4694      	mov	ip, r2
   15124:	44bc      	add	ip, r7
   15126:	4463      	add	r3, ip
   15128:	2201      	movs	r2, #1
   1512a:	701a      	strb	r2, [r3, #0]
		if (response_sms_processed_cmd == true)
   1512c:	4b96      	ldr	r3, [pc, #600]	; (15388 <processOnSMS+0x39c>)
   1512e:	2298      	movs	r2, #152	; 0x98
   15130:	0052      	lsls	r2, r2, #1
   15132:	4694      	mov	ip, r2
   15134:	2208      	movs	r2, #8
   15136:	4690      	mov	r8, r2
   15138:	44b8      	add	r8, r7
   1513a:	44c4      	add	ip, r8
   1513c:	4463      	add	r3, ip
   1513e:	781b      	ldrb	r3, [r3, #0]
   15140:	2b00      	cmp	r3, #0
   15142:	d101      	bne.n	15148 <processOnSMS+0x15c>
   15144:	f002 f830 	bl	171a8 <processOnSMS+0x21bc>
		{
			if (err == GSM_ERROR_NONE)
   15148:	2318      	movs	r3, #24
   1514a:	33ff      	adds	r3, #255	; 0xff
   1514c:	2208      	movs	r2, #8
   1514e:	4694      	mov	ip, r2
   15150:	44bc      	add	ip, r7
   15152:	4463      	add	r3, ip
   15154:	781b      	ldrb	r3, [r3, #0]
   15156:	2b00      	cmp	r3, #0
   15158:	d10d      	bne.n	15176 <processOnSMS+0x18a>
			{
				strcpy(resep_msg,"GSM CALL WAITTING DISABLE : SUCCESS");
   1515a:	230c      	movs	r3, #12
   1515c:	2208      	movs	r2, #8
   1515e:	4694      	mov	ip, r2
   15160:	44bc      	add	ip, r7
   15162:	4463      	add	r3, ip
   15164:	4a9a      	ldr	r2, [pc, #616]	; (153d0 <processOnSMS+0x3e4>)
   15166:	ca13      	ldmia	r2!, {r0, r1, r4}
   15168:	c313      	stmia	r3!, {r0, r1, r4}
   1516a:	ca13      	ldmia	r2!, {r0, r1, r4}
   1516c:	c313      	stmia	r3!, {r0, r1, r4}
   1516e:	ca13      	ldmia	r2!, {r0, r1, r4}
   15170:	c313      	stmia	r3!, {r0, r1, r4}
   15172:	f002 f819 	bl	171a8 <processOnSMS+0x21bc>
			}
			else
			{
				strcpy(resep_msg,"GSM CALL WAITTING DISABLE : FAILED");
   15176:	230c      	movs	r3, #12
   15178:	2208      	movs	r2, #8
   1517a:	4694      	mov	ip, r2
   1517c:	44bc      	add	ip, r7
   1517e:	4463      	add	r3, ip
   15180:	4a94      	ldr	r2, [pc, #592]	; (153d4 <processOnSMS+0x3e8>)
   15182:	ca13      	ldmia	r2!, {r0, r1, r4}
   15184:	c313      	stmia	r3!, {r0, r1, r4}
   15186:	ca13      	ldmia	r2!, {r0, r1, r4}
   15188:	c313      	stmia	r3!, {r0, r1, r4}
   1518a:	ca03      	ldmia	r2!, {r0, r1}
   1518c:	c303      	stmia	r3!, {r0, r1}
   1518e:	8811      	ldrh	r1, [r2, #0]
   15190:	8019      	strh	r1, [r3, #0]
   15192:	7892      	ldrb	r2, [r2, #2]
   15194:	709a      	strb	r2, [r3, #2]
   15196:	f002 f807 	bl	171a8 <processOnSMS+0x21bc>
			}
		}
	}
	else if (StringstartsWith(received_command,"CLEARALL"))
   1519a:	4a8f      	ldr	r2, [pc, #572]	; (153d8 <processOnSMS+0x3ec>)
   1519c:	68fb      	ldr	r3, [r7, #12]
   1519e:	0011      	movs	r1, r2
   151a0:	0018      	movs	r0, r3
   151a2:	4b7c      	ldr	r3, [pc, #496]	; (15394 <processOnSMS+0x3a8>)
   151a4:	4798      	blx	r3
   151a6:	1e03      	subs	r3, r0, #0
   151a8:	d030      	beq.n	1520c <processOnSMS+0x220>
	{
		clearNumbers(admin);
   151aa:	4b76      	ldr	r3, [pc, #472]	; (15384 <processOnSMS+0x398>)
   151ac:	2298      	movs	r2, #152	; 0x98
   151ae:	0052      	lsls	r2, r2, #1
   151b0:	4694      	mov	ip, r2
   151b2:	2208      	movs	r2, #8
   151b4:	4690      	mov	r8, r2
   151b6:	44b8      	add	r8, r7
   151b8:	44c4      	add	ip, r8
   151ba:	4463      	add	r3, ip
   151bc:	781b      	ldrb	r3, [r3, #0]
   151be:	0018      	movs	r0, r3
   151c0:	4b86      	ldr	r3, [pc, #536]	; (153dc <processOnSMS+0x3f0>)
   151c2:	4798      	blx	r3
		incomingSMSProcessed=true;
   151c4:	2330      	movs	r3, #48	; 0x30
   151c6:	33ff      	adds	r3, #255	; 0xff
   151c8:	2208      	movs	r2, #8
   151ca:	4694      	mov	ip, r2
   151cc:	44bc      	add	ip, r7
   151ce:	4463      	add	r3, ip
   151d0:	2201      	movs	r2, #1
   151d2:	701a      	strb	r2, [r3, #0]
		if (response_sms_processed_cmd == true)
   151d4:	4b6c      	ldr	r3, [pc, #432]	; (15388 <processOnSMS+0x39c>)
   151d6:	2298      	movs	r2, #152	; 0x98
   151d8:	0052      	lsls	r2, r2, #1
   151da:	4694      	mov	ip, r2
   151dc:	2208      	movs	r2, #8
   151de:	4690      	mov	r8, r2
   151e0:	44b8      	add	r8, r7
   151e2:	44c4      	add	ip, r8
   151e4:	4463      	add	r3, ip
   151e6:	781b      	ldrb	r3, [r3, #0]
   151e8:	2b00      	cmp	r3, #0
   151ea:	d101      	bne.n	151f0 <processOnSMS+0x204>
   151ec:	f001 ffdc 	bl	171a8 <processOnSMS+0x21bc>
		{
			strcpy(resep_msg,"ALL USER NUMBERS CLEARED");
   151f0:	230c      	movs	r3, #12
   151f2:	2208      	movs	r2, #8
   151f4:	4694      	mov	ip, r2
   151f6:	44bc      	add	ip, r7
   151f8:	4463      	add	r3, ip
   151fa:	4a79      	ldr	r2, [pc, #484]	; (153e0 <processOnSMS+0x3f4>)
   151fc:	ca13      	ldmia	r2!, {r0, r1, r4}
   151fe:	c313      	stmia	r3!, {r0, r1, r4}
   15200:	ca13      	ldmia	r2!, {r0, r1, r4}
   15202:	c313      	stmia	r3!, {r0, r1, r4}
   15204:	7812      	ldrb	r2, [r2, #0]
   15206:	701a      	strb	r2, [r3, #0]
   15208:	f001 ffce 	bl	171a8 <processOnSMS+0x21bc>
		}
	}
	else if (StringstartsWith(received_command,"DEFAULT"))
   1520c:	4a75      	ldr	r2, [pc, #468]	; (153e4 <processOnSMS+0x3f8>)
   1520e:	68fb      	ldr	r3, [r7, #12]
   15210:	0011      	movs	r1, r2
   15212:	0018      	movs	r0, r3
   15214:	4b5f      	ldr	r3, [pc, #380]	; (15394 <processOnSMS+0x3a8>)
   15216:	4798      	blx	r3
   15218:	1e03      	subs	r3, r0, #0
   1521a:	d065      	beq.n	152e8 <processOnSMS+0x2fc>
	{
		saveAutoStartSettings(false);
   1521c:	2000      	movs	r0, #0
   1521e:	4b72      	ldr	r3, [pc, #456]	; (153e8 <processOnSMS+0x3fc>)
   15220:	4798      	blx	r3
		if (factory_settings_parameter_struct.ENABLE_WATER)
   15222:	4b72      	ldr	r3, [pc, #456]	; (153ec <processOnSMS+0x400>)
   15224:	795b      	ldrb	r3, [r3, #5]
   15226:	2b00      	cmp	r3, #0
   15228:	d00d      	beq.n	15246 <processOnSMS+0x25a>
		{
			saveWaterBypassSettings(false);
   1522a:	2000      	movs	r0, #0
   1522c:	4b70      	ldr	r3, [pc, #448]	; (153f0 <processOnSMS+0x404>)
   1522e:	4798      	blx	r3
			if (factory_settings_parameter_struct.ENABLE_M2M)
   15230:	4b6e      	ldr	r3, [pc, #440]	; (153ec <processOnSMS+0x400>)
   15232:	78db      	ldrb	r3, [r3, #3]
   15234:	2b00      	cmp	r3, #0
   15236:	d003      	beq.n	15240 <processOnSMS+0x254>
			{
				saveM2MSettings(false);
   15238:	2000      	movs	r0, #0
   1523a:	4b6e      	ldr	r3, [pc, #440]	; (153f4 <processOnSMS+0x408>)
   1523c:	4798      	blx	r3
   1523e:	e002      	b.n	15246 <processOnSMS+0x25a>
			}
			else
			{
				savePreventOverFlowSettings(false);
   15240:	2000      	movs	r0, #0
   15242:	4b6d      	ldr	r3, [pc, #436]	; (153f8 <processOnSMS+0x40c>)
   15244:	4798      	blx	r3
			}
		}
		if (factory_settings_parameter_struct.ENABLE_CURRENT)
   15246:	4b69      	ldr	r3, [pc, #420]	; (153ec <processOnSMS+0x400>)
   15248:	785b      	ldrb	r3, [r3, #1]
   1524a:	2b00      	cmp	r3, #0
   1524c:	d008      	beq.n	15260 <processOnSMS+0x274>
		{
			setOverloadPer(120);
   1524e:	2078      	movs	r0, #120	; 0x78
   15250:	4b6a      	ldr	r3, [pc, #424]	; (153fc <processOnSMS+0x410>)
   15252:	4798      	blx	r3
			setUnderloadPer(85);
   15254:	2055      	movs	r0, #85	; 0x55
   15256:	4b6a      	ldr	r3, [pc, #424]	; (15400 <processOnSMS+0x414>)
   15258:	4798      	blx	r3
			setCurrentDetection(false);
   1525a:	2000      	movs	r0, #0
   1525c:	4b69      	ldr	r3, [pc, #420]	; (15404 <processOnSMS+0x418>)
   1525e:	4798      	blx	r3
		}
		saveEventStageSettings(0);
   15260:	2000      	movs	r0, #0
   15262:	4b69      	ldr	r3, [pc, #420]	; (15408 <processOnSMS+0x41c>)
   15264:	4798      	blx	r3
		//saveBypassSettings(false);
		saveDNDSettings(false);
   15266:	2000      	movs	r0, #0
   15268:	4b68      	ldr	r3, [pc, #416]	; (1540c <processOnSMS+0x420>)
   1526a:	4798      	blx	r3
		saveResponseSettings('C');
   1526c:	2043      	movs	r0, #67	; 0x43
   1526e:	4b68      	ldr	r3, [pc, #416]	; (15410 <processOnSMS+0x424>)
   15270:	4798      	blx	r3
		saveAutoStartTimeSettings(50);
   15272:	2032      	movs	r0, #50	; 0x32
   15274:	4b67      	ldr	r3, [pc, #412]	; (15414 <processOnSMS+0x428>)
   15276:	4798      	blx	r3
		saveStarDeltaTimer(2);
   15278:	2002      	movs	r0, #2
   1527a:	4b67      	ldr	r3, [pc, #412]	; (15418 <processOnSMS+0x42c>)
   1527c:	4798      	blx	r3
		
		saveSinglePhasingSettings(true);
   1527e:	2001      	movs	r0, #1
   15280:	4b66      	ldr	r3, [pc, #408]	; (1541c <processOnSMS+0x430>)
   15282:	4798      	blx	r3
		saveSinglePhasingVoltage(80);
   15284:	2050      	movs	r0, #80	; 0x50
   15286:	4b66      	ldr	r3, [pc, #408]	; (15420 <processOnSMS+0x434>)
   15288:	4798      	blx	r3
		savePhaseSequenceProtectionSettings(true);
   1528a:	2001      	movs	r0, #1
   1528c:	4b65      	ldr	r3, [pc, #404]	; (15424 <processOnSMS+0x438>)
   1528e:	4798      	blx	r3
		setPrimaryNumberIndex(0);
   15290:	2000      	movs	r0, #0
   15292:	4b65      	ldr	r3, [pc, #404]	; (15428 <processOnSMS+0x43c>)
   15294:	4798      	blx	r3
		setSecondaryNumberIndex(1);
   15296:	2001      	movs	r0, #1
   15298:	4b64      	ldr	r3, [pc, #400]	; (1542c <processOnSMS+0x440>)
   1529a:	4798      	blx	r3
		
		incomingSMSProcessed=true;
   1529c:	2330      	movs	r3, #48	; 0x30
   1529e:	33ff      	adds	r3, #255	; 0xff
   152a0:	2208      	movs	r2, #8
   152a2:	4694      	mov	ip, r2
   152a4:	44bc      	add	ip, r7
   152a6:	4463      	add	r3, ip
   152a8:	2201      	movs	r2, #1
   152aa:	701a      	strb	r2, [r3, #0]
		
		if (response_sms_processed_cmd == true)
   152ac:	4b36      	ldr	r3, [pc, #216]	; (15388 <processOnSMS+0x39c>)
   152ae:	2298      	movs	r2, #152	; 0x98
   152b0:	0052      	lsls	r2, r2, #1
   152b2:	4694      	mov	ip, r2
   152b4:	2208      	movs	r2, #8
   152b6:	4690      	mov	r8, r2
   152b8:	44b8      	add	r8, r7
   152ba:	44c4      	add	ip, r8
   152bc:	4463      	add	r3, ip
   152be:	781b      	ldrb	r3, [r3, #0]
   152c0:	2b00      	cmp	r3, #0
   152c2:	d101      	bne.n	152c8 <processOnSMS+0x2dc>
   152c4:	f001 ff70 	bl	171a8 <processOnSMS+0x21bc>
		{
			strcpy(resep_msg,"ALL SETTINGS ARE NOW FACTORY DEFAULT");
   152c8:	230c      	movs	r3, #12
   152ca:	2208      	movs	r2, #8
   152cc:	4694      	mov	ip, r2
   152ce:	44bc      	add	ip, r7
   152d0:	4463      	add	r3, ip
   152d2:	4a57      	ldr	r2, [pc, #348]	; (15430 <processOnSMS+0x444>)
   152d4:	ca13      	ldmia	r2!, {r0, r1, r4}
   152d6:	c313      	stmia	r3!, {r0, r1, r4}
   152d8:	ca13      	ldmia	r2!, {r0, r1, r4}
   152da:	c313      	stmia	r3!, {r0, r1, r4}
   152dc:	ca13      	ldmia	r2!, {r0, r1, r4}
   152de:	c313      	stmia	r3!, {r0, r1, r4}
   152e0:	7812      	ldrb	r2, [r2, #0]
   152e2:	701a      	strb	r2, [r3, #0]
   152e4:	f001 ff60 	bl	171a8 <processOnSMS+0x21bc>
		}
	}
	else if (StringstartsWith(received_command,"NUM"))
   152e8:	4a52      	ldr	r2, [pc, #328]	; (15434 <processOnSMS+0x448>)
   152ea:	68fb      	ldr	r3, [r7, #12]
   152ec:	0011      	movs	r1, r2
   152ee:	0018      	movs	r0, r3
   152f0:	4b28      	ldr	r3, [pc, #160]	; (15394 <processOnSMS+0x3a8>)
   152f2:	4798      	blx	r3
   152f4:	1e03      	subs	r3, r0, #0
   152f6:	d038      	beq.n	1536a <processOnSMS+0x37e>
	{
		response_sms_processed_cmd = true;
   152f8:	4b23      	ldr	r3, [pc, #140]	; (15388 <processOnSMS+0x39c>)
   152fa:	2298      	movs	r2, #152	; 0x98
   152fc:	0052      	lsls	r2, r2, #1
   152fe:	4694      	mov	ip, r2
   15300:	2208      	movs	r2, #8
   15302:	4690      	mov	r8, r2
   15304:	44b8      	add	r8, r7
   15306:	44c4      	add	ip, r8
   15308:	4463      	add	r3, ip
   1530a:	2201      	movs	r2, #1
   1530c:	701a      	strb	r2, [r3, #0]
		incomingSMSProcessed=true;
   1530e:	2330      	movs	r3, #48	; 0x30
   15310:	33ff      	adds	r3, #255	; 0xff
   15312:	2208      	movs	r2, #8
   15314:	4694      	mov	ip, r2
   15316:	44bc      	add	ip, r7
   15318:	4463      	add	r3, ip
   1531a:	2201      	movs	r2, #1
   1531c:	701a      	strb	r2, [r3, #0]
		
		memset(resep_msg, '\0', sizeof(resep_msg));
   1531e:	230c      	movs	r3, #12
   15320:	2208      	movs	r2, #8
   15322:	4694      	mov	ip, r2
   15324:	44bc      	add	ip, r7
   15326:	4463      	add	r3, ip
   15328:	22fa      	movs	r2, #250	; 0xfa
   1532a:	2100      	movs	r1, #0
   1532c:	0018      	movs	r0, r3
   1532e:	4b1d      	ldr	r3, [pc, #116]	; (153a4 <processOnSMS+0x3b8>)
   15330:	4798      	blx	r3
		if (user_count_struct.current_user_no_count==0)
   15332:	4b41      	ldr	r3, [pc, #260]	; (15438 <processOnSMS+0x44c>)
   15334:	789b      	ldrb	r3, [r3, #2]
   15336:	2b00      	cmp	r3, #0
   15338:	d10d      	bne.n	15356 <processOnSMS+0x36a>
		{
			strcpy(resep_msg,"No Numbers Exists");
   1533a:	230c      	movs	r3, #12
   1533c:	2208      	movs	r2, #8
   1533e:	4694      	mov	ip, r2
   15340:	44bc      	add	ip, r7
   15342:	4463      	add	r3, ip
   15344:	4a3d      	ldr	r2, [pc, #244]	; (1543c <processOnSMS+0x450>)
   15346:	ca13      	ldmia	r2!, {r0, r1, r4}
   15348:	c313      	stmia	r3!, {r0, r1, r4}
   1534a:	6811      	ldr	r1, [r2, #0]
   1534c:	6019      	str	r1, [r3, #0]
   1534e:	8892      	ldrh	r2, [r2, #4]
   15350:	809a      	strh	r2, [r3, #4]
   15352:	f001 ff29 	bl	171a8 <processOnSMS+0x21bc>
		}
		else
		{
			getNumbers(resep_msg);
   15356:	230c      	movs	r3, #12
   15358:	2208      	movs	r2, #8
   1535a:	4694      	mov	ip, r2
   1535c:	44bc      	add	ip, r7
   1535e:	4463      	add	r3, ip
   15360:	0018      	movs	r0, r3
   15362:	4b37      	ldr	r3, [pc, #220]	; (15440 <processOnSMS+0x454>)
   15364:	4798      	blx	r3
   15366:	f001 ff1f 	bl	171a8 <processOnSMS+0x21bc>
		}
	}
	else if (StringstartsWith(received_command,"RESET"))
   1536a:	4a36      	ldr	r2, [pc, #216]	; (15444 <processOnSMS+0x458>)
   1536c:	68fb      	ldr	r3, [r7, #12]
   1536e:	0011      	movs	r1, r2
   15370:	0018      	movs	r0, r3
   15372:	4b08      	ldr	r3, [pc, #32]	; (15394 <processOnSMS+0x3a8>)
   15374:	4798      	blx	r3
   15376:	1e03      	subs	r3, r0, #0
   15378:	d066      	beq.n	15448 <processOnSMS+0x45c>
	{
		system_reset();
   1537a:	4b12      	ldr	r3, [pc, #72]	; (153c4 <processOnSMS+0x3d8>)
   1537c:	4798      	blx	r3
   1537e:	f001 ff13 	bl	171a8 <processOnSMS+0x21bc>
   15382:	46c0      	nop			; (mov r8, r8)
   15384:	fffffed3 	.word	0xfffffed3
   15388:	fffffed2 	.word	0xfffffed2
   1538c:	fffffed1 	.word	0xfffffed1
   15390:	00029dcc 	.word	0x00029dcc
   15394:	00014201 	.word	0x00014201
   15398:	00029dd4 	.word	0x00029dd4
   1539c:	200007f8 	.word	0x200007f8
   153a0:	20000804 	.word	0x20000804
   153a4:	00028b57 	.word	0x00028b57
   153a8:	00028dd7 	.word	0x00028dd7
   153ac:	00012319 	.word	0x00012319
   153b0:	20000784 	.word	0x20000784
   153b4:	00028b21 	.word	0x00028b21
   153b8:	00023751 	.word	0x00023751
   153bc:	000238f9 	.word	0x000238f9
   153c0:	0001fe69 	.word	0x0001fe69
   153c4:	000142d5 	.word	0x000142d5
   153c8:	00029ddc 	.word	0x00029ddc
   153cc:	000130d1 	.word	0x000130d1
   153d0:	00029de4 	.word	0x00029de4
   153d4:	00029e08 	.word	0x00029e08
   153d8:	00029e2c 	.word	0x00029e2c
   153dc:	0001110d 	.word	0x0001110d
   153e0:	00029e38 	.word	0x00029e38
   153e4:	00029e54 	.word	0x00029e54
   153e8:	000112a9 	.word	0x000112a9
   153ec:	2000082c 	.word	0x2000082c
   153f0:	00011469 	.word	0x00011469
   153f4:	00010be5 	.word	0x00010be5
   153f8:	000114b5 	.word	0x000114b5
   153fc:	00011501 	.word	0x00011501
   15400:	0001156d 	.word	0x0001156d
   15404:	00011995 	.word	0x00011995
   15408:	00011a2d 	.word	0x00011a2d
   1540c:	00011341 	.word	0x00011341
   15410:	0001138d 	.word	0x0001138d
   15414:	000112f5 	.word	0x000112f5
   15418:	000119e1 	.word	0x000119e1
   1541c:	000115e1 	.word	0x000115e1
   15420:	0001162d 	.word	0x0001162d
   15424:	00011679 	.word	0x00011679
   15428:	00011b0d 	.word	0x00011b0d
   1542c:	00011b5d 	.word	0x00011b5d
   15430:	00029e5c 	.word	0x00029e5c
   15434:	00029e84 	.word	0x00029e84
   15438:	20000814 	.word	0x20000814
   1543c:	00029e88 	.word	0x00029e88
   15440:	000107f9 	.word	0x000107f9
   15444:	00029e9c 	.word	0x00029e9c
	}
	else if (StringstartsWith(received_command,"DID"))
   15448:	4ade      	ldr	r2, [pc, #888]	; (157c4 <processOnSMS+0x7d8>)
   1544a:	68fb      	ldr	r3, [r7, #12]
   1544c:	0011      	movs	r1, r2
   1544e:	0018      	movs	r0, r3
   15450:	4bdd      	ldr	r3, [pc, #884]	; (157c8 <processOnSMS+0x7dc>)
   15452:	4798      	blx	r3
   15454:	1e03      	subs	r3, r0, #0
   15456:	d01f      	beq.n	15498 <processOnSMS+0x4ac>
	{
		response_sms_processed_cmd=true;
   15458:	4bdc      	ldr	r3, [pc, #880]	; (157cc <processOnSMS+0x7e0>)
   1545a:	2298      	movs	r2, #152	; 0x98
   1545c:	0052      	lsls	r2, r2, #1
   1545e:	4694      	mov	ip, r2
   15460:	2208      	movs	r2, #8
   15462:	4690      	mov	r8, r2
   15464:	44b8      	add	r8, r7
   15466:	44c4      	add	ip, r8
   15468:	4463      	add	r3, ip
   1546a:	2201      	movs	r2, #1
   1546c:	701a      	strb	r2, [r3, #0]
		incomingSMSProcessed=true;
   1546e:	2330      	movs	r3, #48	; 0x30
   15470:	33ff      	adds	r3, #255	; 0xff
   15472:	2208      	movs	r2, #8
   15474:	4694      	mov	ip, r2
   15476:	44bc      	add	ip, r7
   15478:	4463      	add	r3, ip
   1547a:	2201      	movs	r2, #1
   1547c:	701a      	strb	r2, [r3, #0]
		sprintf(resep_msg,"%lu %s",factory_settings_parameter_struct.DeviceId_ee,VERSION_NO);
   1547e:	4bd4      	ldr	r3, [pc, #848]	; (157d0 <processOnSMS+0x7e4>)
   15480:	689a      	ldr	r2, [r3, #8]
   15482:	4bd4      	ldr	r3, [pc, #848]	; (157d4 <processOnSMS+0x7e8>)
   15484:	49d4      	ldr	r1, [pc, #848]	; (157d8 <processOnSMS+0x7ec>)
   15486:	200c      	movs	r0, #12
   15488:	2408      	movs	r4, #8
   1548a:	46a4      	mov	ip, r4
   1548c:	44bc      	add	ip, r7
   1548e:	4460      	add	r0, ip
   15490:	4cd2      	ldr	r4, [pc, #840]	; (157dc <processOnSMS+0x7f0>)
   15492:	47a0      	blx	r4
   15494:	f001 fe88 	bl	171a8 <processOnSMS+0x21bc>
		//sprintf(resep_msg,"Software:%s\nModel:%d\nDeviceId:%lu\nHW:%d",
		//SOFTWARE_VER,factory_parameter_struct.u16tmodelNo,factory_parameter_struct.u32deviceId,
		//factory_parameter_struct.u16thardwareVer);

	}
	else if (StringstartsWith(received_command,"AUTOON"))
   15498:	4ad1      	ldr	r2, [pc, #836]	; (157e0 <processOnSMS+0x7f4>)
   1549a:	68fb      	ldr	r3, [r7, #12]
   1549c:	0011      	movs	r1, r2
   1549e:	0018      	movs	r0, r3
   154a0:	4bc9      	ldr	r3, [pc, #804]	; (157c8 <processOnSMS+0x7dc>)
   154a2:	4798      	blx	r3
   154a4:	1e03      	subs	r3, r0, #0
   154a6:	d027      	beq.n	154f8 <processOnSMS+0x50c>
	{
		saveAutoStartSettings(true);
   154a8:	2001      	movs	r0, #1
   154aa:	4bce      	ldr	r3, [pc, #824]	; (157e4 <processOnSMS+0x7f8>)
   154ac:	4798      	blx	r3
		resetAutoStart(true);
   154ae:	2001      	movs	r0, #1
   154b0:	4bcd      	ldr	r3, [pc, #820]	; (157e8 <processOnSMS+0x7fc>)
   154b2:	4798      	blx	r3
		
		incomingSMSProcessed=true;
   154b4:	2330      	movs	r3, #48	; 0x30
   154b6:	33ff      	adds	r3, #255	; 0xff
   154b8:	2208      	movs	r2, #8
   154ba:	4694      	mov	ip, r2
   154bc:	44bc      	add	ip, r7
   154be:	4463      	add	r3, ip
   154c0:	2201      	movs	r2, #1
   154c2:	701a      	strb	r2, [r3, #0]
		
		if (response_sms_processed_cmd == true)
   154c4:	4bc1      	ldr	r3, [pc, #772]	; (157cc <processOnSMS+0x7e0>)
   154c6:	2298      	movs	r2, #152	; 0x98
   154c8:	0052      	lsls	r2, r2, #1
   154ca:	4694      	mov	ip, r2
   154cc:	2208      	movs	r2, #8
   154ce:	4690      	mov	r8, r2
   154d0:	44b8      	add	r8, r7
   154d2:	44c4      	add	ip, r8
   154d4:	4463      	add	r3, ip
   154d6:	781b      	ldrb	r3, [r3, #0]
   154d8:	2b00      	cmp	r3, #0
   154da:	d101      	bne.n	154e0 <processOnSMS+0x4f4>
   154dc:	f001 fe64 	bl	171a8 <processOnSMS+0x21bc>
		{
			strcpy(resep_msg,"MOTOR AUTOON ON");
   154e0:	230c      	movs	r3, #12
   154e2:	2208      	movs	r2, #8
   154e4:	4694      	mov	ip, r2
   154e6:	44bc      	add	ip, r7
   154e8:	4463      	add	r3, ip
   154ea:	4ac0      	ldr	r2, [pc, #768]	; (157ec <processOnSMS+0x800>)
   154ec:	ca13      	ldmia	r2!, {r0, r1, r4}
   154ee:	c313      	stmia	r3!, {r0, r1, r4}
   154f0:	6812      	ldr	r2, [r2, #0]
   154f2:	601a      	str	r2, [r3, #0]
   154f4:	f001 fe58 	bl	171a8 <processOnSMS+0x21bc>
		}
	}
	else if (StringstartsWith(received_command,"AUTOOFF"))
   154f8:	4abd      	ldr	r2, [pc, #756]	; (157f0 <processOnSMS+0x804>)
   154fa:	68fb      	ldr	r3, [r7, #12]
   154fc:	0011      	movs	r1, r2
   154fe:	0018      	movs	r0, r3
   15500:	4bb1      	ldr	r3, [pc, #708]	; (157c8 <processOnSMS+0x7dc>)
   15502:	4798      	blx	r3
   15504:	1e03      	subs	r3, r0, #0
   15506:	d029      	beq.n	1555c <processOnSMS+0x570>
	{
		saveAutoStartSettings(false);
   15508:	2000      	movs	r0, #0
   1550a:	4bb6      	ldr	r3, [pc, #728]	; (157e4 <processOnSMS+0x7f8>)
   1550c:	4798      	blx	r3
		resetAutoStart(true);
   1550e:	2001      	movs	r0, #1
   15510:	4bb5      	ldr	r3, [pc, #724]	; (157e8 <processOnSMS+0x7fc>)
   15512:	4798      	blx	r3
		
		incomingSMSProcessed=true;
   15514:	2330      	movs	r3, #48	; 0x30
   15516:	33ff      	adds	r3, #255	; 0xff
   15518:	2208      	movs	r2, #8
   1551a:	4694      	mov	ip, r2
   1551c:	44bc      	add	ip, r7
   1551e:	4463      	add	r3, ip
   15520:	2201      	movs	r2, #1
   15522:	701a      	strb	r2, [r3, #0]
		
		if (response_sms_processed_cmd == true)
   15524:	4ba9      	ldr	r3, [pc, #676]	; (157cc <processOnSMS+0x7e0>)
   15526:	2298      	movs	r2, #152	; 0x98
   15528:	0052      	lsls	r2, r2, #1
   1552a:	4694      	mov	ip, r2
   1552c:	2208      	movs	r2, #8
   1552e:	4690      	mov	r8, r2
   15530:	44b8      	add	r8, r7
   15532:	44c4      	add	ip, r8
   15534:	4463      	add	r3, ip
   15536:	781b      	ldrb	r3, [r3, #0]
   15538:	2b00      	cmp	r3, #0
   1553a:	d101      	bne.n	15540 <processOnSMS+0x554>
   1553c:	f001 fe34 	bl	171a8 <processOnSMS+0x21bc>
		{
			strcpy(resep_msg,"MOTOR AUTOON OFF");
   15540:	230c      	movs	r3, #12
   15542:	2208      	movs	r2, #8
   15544:	4694      	mov	ip, r2
   15546:	44bc      	add	ip, r7
   15548:	4463      	add	r3, ip
   1554a:	4aaa      	ldr	r2, [pc, #680]	; (157f4 <processOnSMS+0x808>)
   1554c:	ca13      	ldmia	r2!, {r0, r1, r4}
   1554e:	c313      	stmia	r3!, {r0, r1, r4}
   15550:	6811      	ldr	r1, [r2, #0]
   15552:	6019      	str	r1, [r3, #0]
   15554:	7912      	ldrb	r2, [r2, #4]
   15556:	711a      	strb	r2, [r3, #4]
   15558:	f001 fe26 	bl	171a8 <processOnSMS+0x21bc>
		}
	}
	else if (StringstartsWith(received_command,"WBYPON"))
   1555c:	4aa6      	ldr	r2, [pc, #664]	; (157f8 <processOnSMS+0x80c>)
   1555e:	68fb      	ldr	r3, [r7, #12]
   15560:	0011      	movs	r1, r2
   15562:	0018      	movs	r0, r3
   15564:	4b98      	ldr	r3, [pc, #608]	; (157c8 <processOnSMS+0x7dc>)
   15566:	4798      	blx	r3
   15568:	1e03      	subs	r3, r0, #0
   1556a:	d02a      	beq.n	155c2 <processOnSMS+0x5d6>
	{
		
		if (factory_settings_parameter_struct.ENABLE_WATER)
   1556c:	4b98      	ldr	r3, [pc, #608]	; (157d0 <processOnSMS+0x7e4>)
   1556e:	795b      	ldrb	r3, [r3, #5]
   15570:	2b00      	cmp	r3, #0
   15572:	d101      	bne.n	15578 <processOnSMS+0x58c>
   15574:	f001 fe18 	bl	171a8 <processOnSMS+0x21bc>
		{
			incomingSMSProcessed=true;
   15578:	2330      	movs	r3, #48	; 0x30
   1557a:	33ff      	adds	r3, #255	; 0xff
   1557c:	2208      	movs	r2, #8
   1557e:	4694      	mov	ip, r2
   15580:	44bc      	add	ip, r7
   15582:	4463      	add	r3, ip
   15584:	2201      	movs	r2, #1
   15586:	701a      	strb	r2, [r3, #0]
			saveWaterBypassSettings(true);
   15588:	2001      	movs	r0, #1
   1558a:	4b9c      	ldr	r3, [pc, #624]	; (157fc <processOnSMS+0x810>)
   1558c:	4798      	blx	r3
			if (response_sms_processed_cmd == true)
   1558e:	4b8f      	ldr	r3, [pc, #572]	; (157cc <processOnSMS+0x7e0>)
   15590:	2298      	movs	r2, #152	; 0x98
   15592:	0052      	lsls	r2, r2, #1
   15594:	4694      	mov	ip, r2
   15596:	2208      	movs	r2, #8
   15598:	4690      	mov	r8, r2
   1559a:	44b8      	add	r8, r7
   1559c:	44c4      	add	ip, r8
   1559e:	4463      	add	r3, ip
   155a0:	781b      	ldrb	r3, [r3, #0]
   155a2:	2b00      	cmp	r3, #0
   155a4:	d101      	bne.n	155aa <processOnSMS+0x5be>
   155a6:	f001 fdff 	bl	171a8 <processOnSMS+0x21bc>
			{
				strcpy(resep_msg,"WATER BYPASS ON");
   155aa:	230c      	movs	r3, #12
   155ac:	2208      	movs	r2, #8
   155ae:	4694      	mov	ip, r2
   155b0:	44bc      	add	ip, r7
   155b2:	4463      	add	r3, ip
   155b4:	4a92      	ldr	r2, [pc, #584]	; (15800 <processOnSMS+0x814>)
   155b6:	ca13      	ldmia	r2!, {r0, r1, r4}
   155b8:	c313      	stmia	r3!, {r0, r1, r4}
   155ba:	6812      	ldr	r2, [r2, #0]
   155bc:	601a      	str	r2, [r3, #0]
   155be:	f001 fdf3 	bl	171a8 <processOnSMS+0x21bc>
			}
		}
	}
	else if (StringstartsWith(received_command,"WBYPOFF"))
   155c2:	4a90      	ldr	r2, [pc, #576]	; (15804 <processOnSMS+0x818>)
   155c4:	68fb      	ldr	r3, [r7, #12]
   155c6:	0011      	movs	r1, r2
   155c8:	0018      	movs	r0, r3
   155ca:	4b7f      	ldr	r3, [pc, #508]	; (157c8 <processOnSMS+0x7dc>)
   155cc:	4798      	blx	r3
   155ce:	1e03      	subs	r3, r0, #0
   155d0:	d02c      	beq.n	1562c <processOnSMS+0x640>
	{
		if (factory_settings_parameter_struct.ENABLE_WATER)
   155d2:	4b7f      	ldr	r3, [pc, #508]	; (157d0 <processOnSMS+0x7e4>)
   155d4:	795b      	ldrb	r3, [r3, #5]
   155d6:	2b00      	cmp	r3, #0
   155d8:	d101      	bne.n	155de <processOnSMS+0x5f2>
   155da:	f001 fde5 	bl	171a8 <processOnSMS+0x21bc>
		{
			incomingSMSProcessed=true;
   155de:	2330      	movs	r3, #48	; 0x30
   155e0:	33ff      	adds	r3, #255	; 0xff
   155e2:	2208      	movs	r2, #8
   155e4:	4694      	mov	ip, r2
   155e6:	44bc      	add	ip, r7
   155e8:	4463      	add	r3, ip
   155ea:	2201      	movs	r2, #1
   155ec:	701a      	strb	r2, [r3, #0]
			saveWaterBypassSettings(false);
   155ee:	2000      	movs	r0, #0
   155f0:	4b82      	ldr	r3, [pc, #520]	; (157fc <processOnSMS+0x810>)
   155f2:	4798      	blx	r3
			if (response_sms_processed_cmd == true)
   155f4:	4b75      	ldr	r3, [pc, #468]	; (157cc <processOnSMS+0x7e0>)
   155f6:	2298      	movs	r2, #152	; 0x98
   155f8:	0052      	lsls	r2, r2, #1
   155fa:	4694      	mov	ip, r2
   155fc:	2208      	movs	r2, #8
   155fe:	4690      	mov	r8, r2
   15600:	44b8      	add	r8, r7
   15602:	44c4      	add	ip, r8
   15604:	4463      	add	r3, ip
   15606:	781b      	ldrb	r3, [r3, #0]
   15608:	2b00      	cmp	r3, #0
   1560a:	d101      	bne.n	15610 <processOnSMS+0x624>
   1560c:	f001 fdcc 	bl	171a8 <processOnSMS+0x21bc>
			{
				strcpy(resep_msg,"WATER BYPASS OFF");
   15610:	230c      	movs	r3, #12
   15612:	2208      	movs	r2, #8
   15614:	4694      	mov	ip, r2
   15616:	44bc      	add	ip, r7
   15618:	4463      	add	r3, ip
   1561a:	4a7b      	ldr	r2, [pc, #492]	; (15808 <processOnSMS+0x81c>)
   1561c:	ca13      	ldmia	r2!, {r0, r1, r4}
   1561e:	c313      	stmia	r3!, {r0, r1, r4}
   15620:	6811      	ldr	r1, [r2, #0]
   15622:	6019      	str	r1, [r3, #0]
   15624:	7912      	ldrb	r2, [r2, #4]
   15626:	711a      	strb	r2, [r3, #4]
   15628:	f001 fdbe 	bl	171a8 <processOnSMS+0x21bc>
			}
		}
	}
	else if (StringstartsWith(received_command,"SPPON"))
   1562c:	4a77      	ldr	r2, [pc, #476]	; (1580c <processOnSMS+0x820>)
   1562e:	68fb      	ldr	r3, [r7, #12]
   15630:	0011      	movs	r1, r2
   15632:	0018      	movs	r0, r3
   15634:	4b64      	ldr	r3, [pc, #400]	; (157c8 <processOnSMS+0x7dc>)
   15636:	4798      	blx	r3
   15638:	1e03      	subs	r3, r0, #0
   1563a:	d026      	beq.n	1568a <processOnSMS+0x69e>
	{
		saveSinglePhasingSettings(true);
   1563c:	2001      	movs	r0, #1
   1563e:	4b74      	ldr	r3, [pc, #464]	; (15810 <processOnSMS+0x824>)
   15640:	4798      	blx	r3
		incomingSMSProcessed=true;
   15642:	2330      	movs	r3, #48	; 0x30
   15644:	33ff      	adds	r3, #255	; 0xff
   15646:	2208      	movs	r2, #8
   15648:	4694      	mov	ip, r2
   1564a:	44bc      	add	ip, r7
   1564c:	4463      	add	r3, ip
   1564e:	2201      	movs	r2, #1
   15650:	701a      	strb	r2, [r3, #0]

		if (response_sms_processed_cmd == true)
   15652:	4b5e      	ldr	r3, [pc, #376]	; (157cc <processOnSMS+0x7e0>)
   15654:	2298      	movs	r2, #152	; 0x98
   15656:	0052      	lsls	r2, r2, #1
   15658:	4694      	mov	ip, r2
   1565a:	2208      	movs	r2, #8
   1565c:	4690      	mov	r8, r2
   1565e:	44b8      	add	r8, r7
   15660:	44c4      	add	ip, r8
   15662:	4463      	add	r3, ip
   15664:	781b      	ldrb	r3, [r3, #0]
   15666:	2b00      	cmp	r3, #0
   15668:	d101      	bne.n	1566e <processOnSMS+0x682>
   1566a:	f001 fd9d 	bl	171a8 <processOnSMS+0x21bc>
		{
			strcpy(resep_msg,"SPP ON");
   1566e:	230c      	movs	r3, #12
   15670:	2208      	movs	r2, #8
   15672:	4694      	mov	ip, r2
   15674:	44bc      	add	ip, r7
   15676:	4463      	add	r3, ip
   15678:	4a66      	ldr	r2, [pc, #408]	; (15814 <processOnSMS+0x828>)
   1567a:	6811      	ldr	r1, [r2, #0]
   1567c:	6019      	str	r1, [r3, #0]
   1567e:	8891      	ldrh	r1, [r2, #4]
   15680:	8099      	strh	r1, [r3, #4]
   15682:	7992      	ldrb	r2, [r2, #6]
   15684:	719a      	strb	r2, [r3, #6]
   15686:	f001 fd8f 	bl	171a8 <processOnSMS+0x21bc>
		}
	}
	else if (StringstartsWith(received_command,"SPPOFF"))
   1568a:	4a63      	ldr	r2, [pc, #396]	; (15818 <processOnSMS+0x82c>)
   1568c:	68fb      	ldr	r3, [r7, #12]
   1568e:	0011      	movs	r1, r2
   15690:	0018      	movs	r0, r3
   15692:	4b4d      	ldr	r3, [pc, #308]	; (157c8 <processOnSMS+0x7dc>)
   15694:	4798      	blx	r3
   15696:	1e03      	subs	r3, r0, #0
   15698:	d022      	beq.n	156e0 <processOnSMS+0x6f4>
	{
		saveSinglePhasingSettings(false);
   1569a:	2000      	movs	r0, #0
   1569c:	4b5c      	ldr	r3, [pc, #368]	; (15810 <processOnSMS+0x824>)
   1569e:	4798      	blx	r3
		incomingSMSProcessed=true;
   156a0:	2330      	movs	r3, #48	; 0x30
   156a2:	33ff      	adds	r3, #255	; 0xff
   156a4:	2208      	movs	r2, #8
   156a6:	4694      	mov	ip, r2
   156a8:	44bc      	add	ip, r7
   156aa:	4463      	add	r3, ip
   156ac:	2201      	movs	r2, #1
   156ae:	701a      	strb	r2, [r3, #0]

		if (response_sms_processed_cmd == true)
   156b0:	4b46      	ldr	r3, [pc, #280]	; (157cc <processOnSMS+0x7e0>)
   156b2:	2298      	movs	r2, #152	; 0x98
   156b4:	0052      	lsls	r2, r2, #1
   156b6:	4694      	mov	ip, r2
   156b8:	2208      	movs	r2, #8
   156ba:	4690      	mov	r8, r2
   156bc:	44b8      	add	r8, r7
   156be:	44c4      	add	ip, r8
   156c0:	4463      	add	r3, ip
   156c2:	781b      	ldrb	r3, [r3, #0]
   156c4:	2b00      	cmp	r3, #0
   156c6:	d101      	bne.n	156cc <processOnSMS+0x6e0>
   156c8:	f001 fd6e 	bl	171a8 <processOnSMS+0x21bc>
		{
			strcpy(resep_msg,"SPP OFF");
   156cc:	230c      	movs	r3, #12
   156ce:	2208      	movs	r2, #8
   156d0:	4694      	mov	ip, r2
   156d2:	44bc      	add	ip, r7
   156d4:	4463      	add	r3, ip
   156d6:	4a51      	ldr	r2, [pc, #324]	; (1581c <processOnSMS+0x830>)
   156d8:	ca03      	ldmia	r2!, {r0, r1}
   156da:	c303      	stmia	r3!, {r0, r1}
   156dc:	f001 fd64 	bl	171a8 <processOnSMS+0x21bc>
		}
	}
	else if(StringstartsWith(received_command,"SPPV"))
   156e0:	4a4f      	ldr	r2, [pc, #316]	; (15820 <processOnSMS+0x834>)
   156e2:	68fb      	ldr	r3, [r7, #12]
   156e4:	0011      	movs	r1, r2
   156e6:	0018      	movs	r0, r3
   156e8:	4b37      	ldr	r3, [pc, #220]	; (157c8 <processOnSMS+0x7dc>)
   156ea:	4798      	blx	r3
   156ec:	1e03      	subs	r3, r0, #0
   156ee:	d100      	bne.n	156f2 <processOnSMS+0x706>
   156f0:	e0a2      	b.n	15838 <processOnSMS+0x84c>
	{
		memmove(received_command,received_command+4,strlen(received_command));
   156f2:	68fb      	ldr	r3, [r7, #12]
   156f4:	1d1c      	adds	r4, r3, #4
   156f6:	68fb      	ldr	r3, [r7, #12]
   156f8:	0018      	movs	r0, r3
   156fa:	4b4a      	ldr	r3, [pc, #296]	; (15824 <processOnSMS+0x838>)
   156fc:	4798      	blx	r3
   156fe:	0002      	movs	r2, r0
   15700:	68fb      	ldr	r3, [r7, #12]
   15702:	0021      	movs	r1, r4
   15704:	0018      	movs	r0, r3
   15706:	4b48      	ldr	r3, [pc, #288]	; (15828 <processOnSMS+0x83c>)
   15708:	4798      	blx	r3
		uint16_t sppVoltage = atoi(received_command);
   1570a:	68fb      	ldr	r3, [r7, #12]
   1570c:	0018      	movs	r0, r3
   1570e:	4b47      	ldr	r3, [pc, #284]	; (1582c <processOnSMS+0x840>)
   15710:	4798      	blx	r3
   15712:	0002      	movs	r2, r0
   15714:	2396      	movs	r3, #150	; 0x96
   15716:	005b      	lsls	r3, r3, #1
   15718:	2108      	movs	r1, #8
   1571a:	468c      	mov	ip, r1
   1571c:	44bc      	add	ip, r7
   1571e:	4463      	add	r3, ip
   15720:	801a      	strh	r2, [r3, #0]
		if(sppVoltage<20) sppVoltage=20;
   15722:	2396      	movs	r3, #150	; 0x96
   15724:	005b      	lsls	r3, r3, #1
   15726:	2208      	movs	r2, #8
   15728:	4694      	mov	ip, r2
   1572a:	44bc      	add	ip, r7
   1572c:	4463      	add	r3, ip
   1572e:	881b      	ldrh	r3, [r3, #0]
   15730:	2b13      	cmp	r3, #19
   15732:	d807      	bhi.n	15744 <processOnSMS+0x758>
   15734:	2396      	movs	r3, #150	; 0x96
   15736:	005b      	lsls	r3, r3, #1
   15738:	2208      	movs	r2, #8
   1573a:	4694      	mov	ip, r2
   1573c:	44bc      	add	ip, r7
   1573e:	4463      	add	r3, ip
   15740:	2214      	movs	r2, #20
   15742:	801a      	strh	r2, [r3, #0]
		if(sppVoltage>440) sppVoltage=440;
   15744:	2396      	movs	r3, #150	; 0x96
   15746:	005b      	lsls	r3, r3, #1
   15748:	2208      	movs	r2, #8
   1574a:	4694      	mov	ip, r2
   1574c:	44bc      	add	ip, r7
   1574e:	4463      	add	r3, ip
   15750:	881a      	ldrh	r2, [r3, #0]
   15752:	23dc      	movs	r3, #220	; 0xdc
   15754:	005b      	lsls	r3, r3, #1
   15756:	429a      	cmp	r2, r3
   15758:	d908      	bls.n	1576c <processOnSMS+0x780>
   1575a:	2396      	movs	r3, #150	; 0x96
   1575c:	005b      	lsls	r3, r3, #1
   1575e:	2208      	movs	r2, #8
   15760:	4694      	mov	ip, r2
   15762:	44bc      	add	ip, r7
   15764:	4463      	add	r3, ip
   15766:	22dc      	movs	r2, #220	; 0xdc
   15768:	0052      	lsls	r2, r2, #1
   1576a:	801a      	strh	r2, [r3, #0]
		saveSinglePhasingVoltage(sppVoltage);
   1576c:	2396      	movs	r3, #150	; 0x96
   1576e:	005b      	lsls	r3, r3, #1
   15770:	2208      	movs	r2, #8
   15772:	4694      	mov	ip, r2
   15774:	44bc      	add	ip, r7
   15776:	4463      	add	r3, ip
   15778:	881b      	ldrh	r3, [r3, #0]
   1577a:	0018      	movs	r0, r3
   1577c:	4b2c      	ldr	r3, [pc, #176]	; (15830 <processOnSMS+0x844>)
   1577e:	4798      	blx	r3
		
		incomingSMSProcessed=true;
   15780:	2330      	movs	r3, #48	; 0x30
   15782:	33ff      	adds	r3, #255	; 0xff
   15784:	2208      	movs	r2, #8
   15786:	4694      	mov	ip, r2
   15788:	44bc      	add	ip, r7
   1578a:	4463      	add	r3, ip
   1578c:	2201      	movs	r2, #1
   1578e:	701a      	strb	r2, [r3, #0]
		
		
		if (response_sms_processed_cmd == true)
   15790:	4b0e      	ldr	r3, [pc, #56]	; (157cc <processOnSMS+0x7e0>)
   15792:	2298      	movs	r2, #152	; 0x98
   15794:	0052      	lsls	r2, r2, #1
   15796:	4694      	mov	ip, r2
   15798:	2208      	movs	r2, #8
   1579a:	4690      	mov	r8, r2
   1579c:	44b8      	add	r8, r7
   1579e:	44c4      	add	ip, r8
   157a0:	4463      	add	r3, ip
   157a2:	781b      	ldrb	r3, [r3, #0]
   157a4:	2b00      	cmp	r3, #0
   157a6:	d101      	bne.n	157ac <processOnSMS+0x7c0>
   157a8:	f001 fcfe 	bl	171a8 <processOnSMS+0x21bc>
		{
			strcpy(resep_msg,"SPP VOLT SET");
   157ac:	230c      	movs	r3, #12
   157ae:	2208      	movs	r2, #8
   157b0:	4694      	mov	ip, r2
   157b2:	44bc      	add	ip, r7
   157b4:	4463      	add	r3, ip
   157b6:	4a1f      	ldr	r2, [pc, #124]	; (15834 <processOnSMS+0x848>)
   157b8:	ca13      	ldmia	r2!, {r0, r1, r4}
   157ba:	c313      	stmia	r3!, {r0, r1, r4}
   157bc:	7812      	ldrb	r2, [r2, #0]
   157be:	701a      	strb	r2, [r3, #0]
   157c0:	f001 fcf2 	bl	171a8 <processOnSMS+0x21bc>
   157c4:	00029ea4 	.word	0x00029ea4
   157c8:	00014201 	.word	0x00014201
   157cc:	fffffed2 	.word	0xfffffed2
   157d0:	2000082c 	.word	0x2000082c
   157d4:	00029ea8 	.word	0x00029ea8
   157d8:	00029ebc 	.word	0x00029ebc
   157dc:	00028d5d 	.word	0x00028d5d
   157e0:	00029ec4 	.word	0x00029ec4
   157e4:	000112a9 	.word	0x000112a9
   157e8:	0001b329 	.word	0x0001b329
   157ec:	00029ecc 	.word	0x00029ecc
   157f0:	00029edc 	.word	0x00029edc
   157f4:	00029ee4 	.word	0x00029ee4
   157f8:	00029ef8 	.word	0x00029ef8
   157fc:	00011469 	.word	0x00011469
   15800:	00029f00 	.word	0x00029f00
   15804:	00029f10 	.word	0x00029f10
   15808:	00029f18 	.word	0x00029f18
   1580c:	00029f2c 	.word	0x00029f2c
   15810:	000115e1 	.word	0x000115e1
   15814:	00029f34 	.word	0x00029f34
   15818:	00029f3c 	.word	0x00029f3c
   1581c:	00029f44 	.word	0x00029f44
   15820:	00029f4c 	.word	0x00029f4c
   15824:	00028de7 	.word	0x00028de7
   15828:	00028b33 	.word	0x00028b33
   1582c:	00028a3d 	.word	0x00028a3d
   15830:	0001162d 	.word	0x0001162d
   15834:	00029f54 	.word	0x00029f54
		}
	}
	else if(StringstartsWith(received_command,"SEQON"))
   15838:	4ac0      	ldr	r2, [pc, #768]	; (15b3c <processOnSMS+0xb50>)
   1583a:	68fb      	ldr	r3, [r7, #12]
   1583c:	0011      	movs	r1, r2
   1583e:	0018      	movs	r0, r3
   15840:	4bbf      	ldr	r3, [pc, #764]	; (15b40 <processOnSMS+0xb54>)
   15842:	4798      	blx	r3
   15844:	1e03      	subs	r3, r0, #0
   15846:	d022      	beq.n	1588e <processOnSMS+0x8a2>
	{
		savePhaseSequenceProtectionSettings(true);
   15848:	2001      	movs	r0, #1
   1584a:	4bbe      	ldr	r3, [pc, #760]	; (15b44 <processOnSMS+0xb58>)
   1584c:	4798      	blx	r3
		
		incomingSMSProcessed=true;
   1584e:	2330      	movs	r3, #48	; 0x30
   15850:	33ff      	adds	r3, #255	; 0xff
   15852:	2208      	movs	r2, #8
   15854:	4694      	mov	ip, r2
   15856:	44bc      	add	ip, r7
   15858:	4463      	add	r3, ip
   1585a:	2201      	movs	r2, #1
   1585c:	701a      	strb	r2, [r3, #0]
		
		if (response_sms_processed_cmd == true)
   1585e:	4bba      	ldr	r3, [pc, #744]	; (15b48 <processOnSMS+0xb5c>)
   15860:	2298      	movs	r2, #152	; 0x98
   15862:	0052      	lsls	r2, r2, #1
   15864:	4694      	mov	ip, r2
   15866:	2208      	movs	r2, #8
   15868:	4690      	mov	r8, r2
   1586a:	44b8      	add	r8, r7
   1586c:	44c4      	add	ip, r8
   1586e:	4463      	add	r3, ip
   15870:	781b      	ldrb	r3, [r3, #0]
   15872:	2b00      	cmp	r3, #0
   15874:	d101      	bne.n	1587a <processOnSMS+0x88e>
   15876:	f001 fc97 	bl	171a8 <processOnSMS+0x21bc>
		{
			strcpy(resep_msg,"SEQP ON");
   1587a:	230c      	movs	r3, #12
   1587c:	2208      	movs	r2, #8
   1587e:	4694      	mov	ip, r2
   15880:	44bc      	add	ip, r7
   15882:	4463      	add	r3, ip
   15884:	4ab1      	ldr	r2, [pc, #708]	; (15b4c <processOnSMS+0xb60>)
   15886:	ca03      	ldmia	r2!, {r0, r1}
   15888:	c303      	stmia	r3!, {r0, r1}
   1588a:	f001 fc8d 	bl	171a8 <processOnSMS+0x21bc>
		}
	}
	else if(StringstartsWith(received_command,"SEQOFF"))
   1588e:	4ab0      	ldr	r2, [pc, #704]	; (15b50 <processOnSMS+0xb64>)
   15890:	68fb      	ldr	r3, [r7, #12]
   15892:	0011      	movs	r1, r2
   15894:	0018      	movs	r0, r3
   15896:	4baa      	ldr	r3, [pc, #680]	; (15b40 <processOnSMS+0xb54>)
   15898:	4798      	blx	r3
   1589a:	1e03      	subs	r3, r0, #0
   1589c:	d024      	beq.n	158e8 <processOnSMS+0x8fc>
	{
		savePhaseSequenceProtectionSettings(false);
   1589e:	2000      	movs	r0, #0
   158a0:	4ba8      	ldr	r3, [pc, #672]	; (15b44 <processOnSMS+0xb58>)
   158a2:	4798      	blx	r3

		incomingSMSProcessed=true;
   158a4:	2330      	movs	r3, #48	; 0x30
   158a6:	33ff      	adds	r3, #255	; 0xff
   158a8:	2208      	movs	r2, #8
   158aa:	4694      	mov	ip, r2
   158ac:	44bc      	add	ip, r7
   158ae:	4463      	add	r3, ip
   158b0:	2201      	movs	r2, #1
   158b2:	701a      	strb	r2, [r3, #0]

		if (response_sms_processed_cmd == true)
   158b4:	4ba4      	ldr	r3, [pc, #656]	; (15b48 <processOnSMS+0xb5c>)
   158b6:	2298      	movs	r2, #152	; 0x98
   158b8:	0052      	lsls	r2, r2, #1
   158ba:	4694      	mov	ip, r2
   158bc:	2208      	movs	r2, #8
   158be:	4690      	mov	r8, r2
   158c0:	44b8      	add	r8, r7
   158c2:	44c4      	add	ip, r8
   158c4:	4463      	add	r3, ip
   158c6:	781b      	ldrb	r3, [r3, #0]
   158c8:	2b00      	cmp	r3, #0
   158ca:	d101      	bne.n	158d0 <processOnSMS+0x8e4>
   158cc:	f001 fc6c 	bl	171a8 <processOnSMS+0x21bc>
		{
			strcpy(resep_msg,"SEQP OFF");
   158d0:	230c      	movs	r3, #12
   158d2:	2208      	movs	r2, #8
   158d4:	4694      	mov	ip, r2
   158d6:	44bc      	add	ip, r7
   158d8:	4463      	add	r3, ip
   158da:	4a9e      	ldr	r2, [pc, #632]	; (15b54 <processOnSMS+0xb68>)
   158dc:	ca03      	ldmia	r2!, {r0, r1}
   158de:	c303      	stmia	r3!, {r0, r1}
   158e0:	7812      	ldrb	r2, [r2, #0]
   158e2:	701a      	strb	r2, [r3, #0]
   158e4:	f001 fc60 	bl	171a8 <processOnSMS+0x21bc>
		}
	}
	else if (StringstartsWith(received_command,"DND"))
   158e8:	4a9b      	ldr	r2, [pc, #620]	; (15b58 <processOnSMS+0xb6c>)
   158ea:	68fb      	ldr	r3, [r7, #12]
   158ec:	0011      	movs	r1, r2
   158ee:	0018      	movs	r0, r3
   158f0:	4b93      	ldr	r3, [pc, #588]	; (15b40 <processOnSMS+0xb54>)
   158f2:	4798      	blx	r3
   158f4:	1e03      	subs	r3, r0, #0
   158f6:	d06c      	beq.n	159d2 <processOnSMS+0x9e6>
	{
		if (strlen(received_command)>3)
   158f8:	68fb      	ldr	r3, [r7, #12]
   158fa:	0018      	movs	r0, r3
   158fc:	4b97      	ldr	r3, [pc, #604]	; (15b5c <processOnSMS+0xb70>)
   158fe:	4798      	blx	r3
   15900:	0003      	movs	r3, r0
   15902:	2b03      	cmp	r3, #3
   15904:	d801      	bhi.n	1590a <processOnSMS+0x91e>
   15906:	f001 fc4f 	bl	171a8 <processOnSMS+0x21bc>
		{
			memmove(received_command,received_command+3,strlen(received_command));
   1590a:	68fb      	ldr	r3, [r7, #12]
   1590c:	1cdc      	adds	r4, r3, #3
   1590e:	68fb      	ldr	r3, [r7, #12]
   15910:	0018      	movs	r0, r3
   15912:	4b92      	ldr	r3, [pc, #584]	; (15b5c <processOnSMS+0xb70>)
   15914:	4798      	blx	r3
   15916:	0002      	movs	r2, r0
   15918:	68fb      	ldr	r3, [r7, #12]
   1591a:	0021      	movs	r1, r4
   1591c:	0018      	movs	r0, r3
   1591e:	4b90      	ldr	r3, [pc, #576]	; (15b60 <processOnSMS+0xb74>)
   15920:	4798      	blx	r3
			if(received_command[0]=='L' || received_command[0]=='S' || received_command[0]=='O')
   15922:	68fb      	ldr	r3, [r7, #12]
   15924:	781b      	ldrb	r3, [r3, #0]
   15926:	2b4c      	cmp	r3, #76	; 0x4c
   15928:	d009      	beq.n	1593e <processOnSMS+0x952>
   1592a:	68fb      	ldr	r3, [r7, #12]
   1592c:	781b      	ldrb	r3, [r3, #0]
   1592e:	2b53      	cmp	r3, #83	; 0x53
   15930:	d005      	beq.n	1593e <processOnSMS+0x952>
   15932:	68fb      	ldr	r3, [r7, #12]
   15934:	781b      	ldrb	r3, [r3, #0]
   15936:	2b4f      	cmp	r3, #79	; 0x4f
   15938:	d001      	beq.n	1593e <processOnSMS+0x952>
   1593a:	f001 fc35 	bl	171a8 <processOnSMS+0x21bc>
			{
				saveDNDSettings((char)received_command[0]);  //save specific RESPONSE settings
   1593e:	68fb      	ldr	r3, [r7, #12]
   15940:	781b      	ldrb	r3, [r3, #0]
   15942:	0018      	movs	r0, r3
   15944:	4b87      	ldr	r3, [pc, #540]	; (15b64 <processOnSMS+0xb78>)
   15946:	4798      	blx	r3
				
				incomingSMSProcessed=true;
   15948:	2330      	movs	r3, #48	; 0x30
   1594a:	33ff      	adds	r3, #255	; 0xff
   1594c:	2208      	movs	r2, #8
   1594e:	4694      	mov	ip, r2
   15950:	44bc      	add	ip, r7
   15952:	4463      	add	r3, ip
   15954:	2201      	movs	r2, #1
   15956:	701a      	strb	r2, [r3, #0]
				
				if (response_sms_processed_cmd == true)
   15958:	4b7b      	ldr	r3, [pc, #492]	; (15b48 <processOnSMS+0xb5c>)
   1595a:	2298      	movs	r2, #152	; 0x98
   1595c:	0052      	lsls	r2, r2, #1
   1595e:	4694      	mov	ip, r2
   15960:	2208      	movs	r2, #8
   15962:	4690      	mov	r8, r2
   15964:	44b8      	add	r8, r7
   15966:	44c4      	add	ip, r8
   15968:	4463      	add	r3, ip
   1596a:	781b      	ldrb	r3, [r3, #0]
   1596c:	2b00      	cmp	r3, #0
   1596e:	d101      	bne.n	15974 <processOnSMS+0x988>
   15970:	f001 fc1a 	bl	171a8 <processOnSMS+0x21bc>
				{
					strcpy(resep_msg,"DND : ");
   15974:	230c      	movs	r3, #12
   15976:	2208      	movs	r2, #8
   15978:	4694      	mov	ip, r2
   1597a:	44bc      	add	ip, r7
   1597c:	4463      	add	r3, ip
   1597e:	4a7a      	ldr	r2, [pc, #488]	; (15b68 <processOnSMS+0xb7c>)
   15980:	6811      	ldr	r1, [r2, #0]
   15982:	6019      	str	r1, [r3, #0]
   15984:	8891      	ldrh	r1, [r2, #4]
   15986:	8099      	strh	r1, [r3, #4]
   15988:	7992      	ldrb	r2, [r2, #6]
   1598a:	719a      	strb	r2, [r3, #6]
					strcat(resep_msg,received_command);
   1598c:	68fa      	ldr	r2, [r7, #12]
   1598e:	230c      	movs	r3, #12
   15990:	2108      	movs	r1, #8
   15992:	468c      	mov	ip, r1
   15994:	44bc      	add	ip, r7
   15996:	4463      	add	r3, ip
   15998:	0011      	movs	r1, r2
   1599a:	0018      	movs	r0, r3
   1599c:	4b73      	ldr	r3, [pc, #460]	; (15b6c <processOnSMS+0xb80>)
   1599e:	4798      	blx	r3
					strcat(resep_msg," OK");
   159a0:	230c      	movs	r3, #12
   159a2:	2208      	movs	r2, #8
   159a4:	4694      	mov	ip, r2
   159a6:	44bc      	add	ip, r7
   159a8:	4463      	add	r3, ip
   159aa:	0018      	movs	r0, r3
   159ac:	4b6b      	ldr	r3, [pc, #428]	; (15b5c <processOnSMS+0xb70>)
   159ae:	4798      	blx	r3
   159b0:	0003      	movs	r3, r0
   159b2:	001a      	movs	r2, r3
   159b4:	230c      	movs	r3, #12
   159b6:	2108      	movs	r1, #8
   159b8:	468c      	mov	ip, r1
   159ba:	44bc      	add	ip, r7
   159bc:	4463      	add	r3, ip
   159be:	189a      	adds	r2, r3, r2
   159c0:	4b6b      	ldr	r3, [pc, #428]	; (15b70 <processOnSMS+0xb84>)
   159c2:	0010      	movs	r0, r2
   159c4:	0019      	movs	r1, r3
   159c6:	2304      	movs	r3, #4
   159c8:	001a      	movs	r2, r3
   159ca:	4b6a      	ldr	r3, [pc, #424]	; (15b74 <processOnSMS+0xb88>)
   159cc:	4798      	blx	r3
   159ce:	f001 fbeb 	bl	171a8 <processOnSMS+0x21bc>
				}
			}
		}
	}
	else if (StringstartsWith(received_command,"FDBK"))
   159d2:	4a69      	ldr	r2, [pc, #420]	; (15b78 <processOnSMS+0xb8c>)
   159d4:	68fb      	ldr	r3, [r7, #12]
   159d6:	0011      	movs	r1, r2
   159d8:	0018      	movs	r0, r3
   159da:	4b59      	ldr	r3, [pc, #356]	; (15b40 <processOnSMS+0xb54>)
   159dc:	4798      	blx	r3
   159de:	1e03      	subs	r3, r0, #0
   159e0:	d072      	beq.n	15ac8 <processOnSMS+0xadc>
	{
		if (strlen(received_command)>4)
   159e2:	68fb      	ldr	r3, [r7, #12]
   159e4:	0018      	movs	r0, r3
   159e6:	4b5d      	ldr	r3, [pc, #372]	; (15b5c <processOnSMS+0xb70>)
   159e8:	4798      	blx	r3
   159ea:	0003      	movs	r3, r0
   159ec:	2b04      	cmp	r3, #4
   159ee:	d801      	bhi.n	159f4 <processOnSMS+0xa08>
   159f0:	f001 fbda 	bl	171a8 <processOnSMS+0x21bc>
		{
			memmove(received_command,received_command+4,strlen(received_command));
   159f4:	68fb      	ldr	r3, [r7, #12]
   159f6:	1d1c      	adds	r4, r3, #4
   159f8:	68fb      	ldr	r3, [r7, #12]
   159fa:	0018      	movs	r0, r3
   159fc:	4b57      	ldr	r3, [pc, #348]	; (15b5c <processOnSMS+0xb70>)
   159fe:	4798      	blx	r3
   15a00:	0002      	movs	r2, r0
   15a02:	68fb      	ldr	r3, [r7, #12]
   15a04:	0021      	movs	r1, r4
   15a06:	0018      	movs	r0, r3
   15a08:	4b55      	ldr	r3, [pc, #340]	; (15b60 <processOnSMS+0xb74>)
   15a0a:	4798      	blx	r3
			uint8_t fdbkValue = atoi(received_command);
   15a0c:	68fb      	ldr	r3, [r7, #12]
   15a0e:	0018      	movs	r0, r3
   15a10:	4b5a      	ldr	r3, [pc, #360]	; (15b7c <processOnSMS+0xb90>)
   15a12:	4798      	blx	r3
   15a14:	0002      	movs	r2, r0
   15a16:	232c      	movs	r3, #44	; 0x2c
   15a18:	33ff      	adds	r3, #255	; 0xff
   15a1a:	2108      	movs	r1, #8
   15a1c:	468c      	mov	ip, r1
   15a1e:	44bc      	add	ip, r7
   15a20:	4463      	add	r3, ip
   15a22:	701a      	strb	r2, [r3, #0]
			if (fdbkValue <= MOTORFEEDBACK_DETECTION_ON)
   15a24:	232c      	movs	r3, #44	; 0x2c
   15a26:	33ff      	adds	r3, #255	; 0xff
   15a28:	2208      	movs	r2, #8
   15a2a:	4694      	mov	ip, r2
   15a2c:	44bc      	add	ip, r7
   15a2e:	4463      	add	r3, ip
   15a30:	781b      	ldrb	r3, [r3, #0]
   15a32:	2b02      	cmp	r3, #2
   15a34:	d901      	bls.n	15a3a <processOnSMS+0xa4e>
   15a36:	f001 fbb7 	bl	171a8 <processOnSMS+0x21bc>
			{
				if (fdbkValue == MOTORFEEDBACK_DETECTION_CURRENT)
   15a3a:	232c      	movs	r3, #44	; 0x2c
   15a3c:	33ff      	adds	r3, #255	; 0xff
   15a3e:	2208      	movs	r2, #8
   15a40:	4694      	mov	ip, r2
   15a42:	44bc      	add	ip, r7
   15a44:	4463      	add	r3, ip
   15a46:	781b      	ldrb	r3, [r3, #0]
   15a48:	2b01      	cmp	r3, #1
   15a4a:	d10b      	bne.n	15a64 <processOnSMS+0xa78>
				{
					if (!factory_settings_parameter_struct.ENABLE_CURRENT)
   15a4c:	4b4c      	ldr	r3, [pc, #304]	; (15b80 <processOnSMS+0xb94>)
   15a4e:	785b      	ldrb	r3, [r3, #1]
   15a50:	2b00      	cmp	r3, #0
   15a52:	d107      	bne.n	15a64 <processOnSMS+0xa78>
					{
						fdbkValue=MOTORFEEDBACK_DETECTION_OFF;
   15a54:	232c      	movs	r3, #44	; 0x2c
   15a56:	33ff      	adds	r3, #255	; 0xff
   15a58:	2208      	movs	r2, #8
   15a5a:	4694      	mov	ip, r2
   15a5c:	44bc      	add	ip, r7
   15a5e:	4463      	add	r3, ip
   15a60:	2200      	movs	r2, #0
   15a62:	701a      	strb	r2, [r3, #0]
					}
				}
				saveMotorFeedbackDetectionSettings(fdbkValue);
   15a64:	232c      	movs	r3, #44	; 0x2c
   15a66:	33ff      	adds	r3, #255	; 0xff
   15a68:	2208      	movs	r2, #8
   15a6a:	4694      	mov	ip, r2
   15a6c:	44bc      	add	ip, r7
   15a6e:	4463      	add	r3, ip
   15a70:	781b      	ldrb	r3, [r3, #0]
   15a72:	0018      	movs	r0, r3
   15a74:	4b43      	ldr	r3, [pc, #268]	; (15b84 <processOnSMS+0xb98>)
   15a76:	4798      	blx	r3
				incomingSMSProcessed=true;
   15a78:	2330      	movs	r3, #48	; 0x30
   15a7a:	33ff      	adds	r3, #255	; 0xff
   15a7c:	2208      	movs	r2, #8
   15a7e:	4694      	mov	ip, r2
   15a80:	44bc      	add	ip, r7
   15a82:	4463      	add	r3, ip
   15a84:	2201      	movs	r2, #1
   15a86:	701a      	strb	r2, [r3, #0]
				
				if (response_sms_processed_cmd == true)
   15a88:	4b2f      	ldr	r3, [pc, #188]	; (15b48 <processOnSMS+0xb5c>)
   15a8a:	2298      	movs	r2, #152	; 0x98
   15a8c:	0052      	lsls	r2, r2, #1
   15a8e:	4694      	mov	ip, r2
   15a90:	2208      	movs	r2, #8
   15a92:	4690      	mov	r8, r2
   15a94:	44b8      	add	r8, r7
   15a96:	44c4      	add	ip, r8
   15a98:	4463      	add	r3, ip
   15a9a:	781b      	ldrb	r3, [r3, #0]
   15a9c:	2b00      	cmp	r3, #0
   15a9e:	d101      	bne.n	15aa4 <processOnSMS+0xab8>
   15aa0:	f001 fb82 	bl	171a8 <processOnSMS+0x21bc>
				{
					sprintf(resep_msg,"FDBK : %d", fdbkValue);
   15aa4:	232c      	movs	r3, #44	; 0x2c
   15aa6:	33ff      	adds	r3, #255	; 0xff
   15aa8:	2208      	movs	r2, #8
   15aaa:	4694      	mov	ip, r2
   15aac:	44bc      	add	ip, r7
   15aae:	4463      	add	r3, ip
   15ab0:	781a      	ldrb	r2, [r3, #0]
   15ab2:	4935      	ldr	r1, [pc, #212]	; (15b88 <processOnSMS+0xb9c>)
   15ab4:	230c      	movs	r3, #12
   15ab6:	2008      	movs	r0, #8
   15ab8:	4684      	mov	ip, r0
   15aba:	44bc      	add	ip, r7
   15abc:	4463      	add	r3, ip
   15abe:	0018      	movs	r0, r3
   15ac0:	4b32      	ldr	r3, [pc, #200]	; (15b8c <processOnSMS+0xba0>)
   15ac2:	4798      	blx	r3
   15ac4:	f001 fb70 	bl	171a8 <processOnSMS+0x21bc>
				}
			}
		}
	}
	else if (StringstartsWith(received_command,"UOMETHOD"))
   15ac8:	4a31      	ldr	r2, [pc, #196]	; (15b90 <processOnSMS+0xba4>)
   15aca:	68fb      	ldr	r3, [r7, #12]
   15acc:	0011      	movs	r1, r2
   15ace:	0018      	movs	r0, r3
   15ad0:	4b1b      	ldr	r3, [pc, #108]	; (15b40 <processOnSMS+0xb54>)
   15ad2:	4798      	blx	r3
   15ad4:	1e03      	subs	r3, r0, #0
   15ad6:	d100      	bne.n	15ada <processOnSMS+0xaee>
   15ad8:	e0be      	b.n	15c58 <processOnSMS+0xc6c>
	{
		if (strlen(received_command)>8)
   15ada:	68fb      	ldr	r3, [r7, #12]
   15adc:	0018      	movs	r0, r3
   15ade:	4b1f      	ldr	r3, [pc, #124]	; (15b5c <processOnSMS+0xb70>)
   15ae0:	4798      	blx	r3
   15ae2:	0003      	movs	r3, r0
   15ae4:	2b08      	cmp	r3, #8
   15ae6:	d801      	bhi.n	15aec <processOnSMS+0xb00>
   15ae8:	f001 fb5e 	bl	171a8 <processOnSMS+0x21bc>
		{
			memmove(received_command,received_command+8,strlen(received_command));
   15aec:	68fb      	ldr	r3, [r7, #12]
   15aee:	3308      	adds	r3, #8
   15af0:	001c      	movs	r4, r3
   15af2:	68fb      	ldr	r3, [r7, #12]
   15af4:	0018      	movs	r0, r3
   15af6:	4b19      	ldr	r3, [pc, #100]	; (15b5c <processOnSMS+0xb70>)
   15af8:	4798      	blx	r3
   15afa:	0002      	movs	r2, r0
   15afc:	68fb      	ldr	r3, [r7, #12]
   15afe:	0021      	movs	r1, r4
   15b00:	0018      	movs	r0, r3
   15b02:	4b17      	ldr	r3, [pc, #92]	; (15b60 <processOnSMS+0xb74>)
   15b04:	4798      	blx	r3
			
			if(factory_settings_parameter_struct.ENABLE_CURRENT)
   15b06:	4b1e      	ldr	r3, [pc, #120]	; (15b80 <processOnSMS+0xb94>)
   15b08:	785b      	ldrb	r3, [r3, #1]
   15b0a:	2b00      	cmp	r3, #0
   15b0c:	d101      	bne.n	15b12 <processOnSMS+0xb26>
   15b0e:	f001 fb4b 	bl	171a8 <processOnSMS+0x21bc>
			{
				uint8_t detectionMethod=0;
   15b12:	2395      	movs	r3, #149	; 0x95
   15b14:	005b      	lsls	r3, r3, #1
   15b16:	2208      	movs	r2, #8
   15b18:	4694      	mov	ip, r2
   15b1a:	44bc      	add	ip, r7
   15b1c:	4463      	add	r3, ip
   15b1e:	2200      	movs	r2, #0
   15b20:	701a      	strb	r2, [r3, #0]
				if(received_command[0]=='C')
   15b22:	68fb      	ldr	r3, [r7, #12]
   15b24:	781b      	ldrb	r3, [r3, #0]
   15b26:	2b43      	cmp	r3, #67	; 0x43
   15b28:	d134      	bne.n	15b94 <processOnSMS+0xba8>
				{
					detectionMethod=MOTOR_UNDEROVER_DETECTION_CURRENT;
   15b2a:	2395      	movs	r3, #149	; 0x95
   15b2c:	005b      	lsls	r3, r3, #1
   15b2e:	2208      	movs	r2, #8
   15b30:	4694      	mov	ip, r2
   15b32:	44bc      	add	ip, r7
   15b34:	4463      	add	r3, ip
   15b36:	2202      	movs	r2, #2
   15b38:	701a      	strb	r2, [r3, #0]
   15b3a:	e037      	b.n	15bac <processOnSMS+0xbc0>
   15b3c:	00029f64 	.word	0x00029f64
   15b40:	00014201 	.word	0x00014201
   15b44:	00011679 	.word	0x00011679
   15b48:	fffffed2 	.word	0xfffffed2
   15b4c:	00029f6c 	.word	0x00029f6c
   15b50:	00029f74 	.word	0x00029f74
   15b54:	00029f7c 	.word	0x00029f7c
   15b58:	00029f88 	.word	0x00029f88
   15b5c:	00028de7 	.word	0x00028de7
   15b60:	00028b33 	.word	0x00028b33
   15b64:	00011341 	.word	0x00011341
   15b68:	00029f8c 	.word	0x00029f8c
   15b6c:	00028da1 	.word	0x00028da1
   15b70:	00029f94 	.word	0x00029f94
   15b74:	00028b21 	.word	0x00028b21
   15b78:	00029f98 	.word	0x00029f98
   15b7c:	00028a3d 	.word	0x00028a3d
   15b80:	2000082c 	.word	0x2000082c
   15b84:	000117a1 	.word	0x000117a1
   15b88:	00029fa0 	.word	0x00029fa0
   15b8c:	00028d5d 	.word	0x00028d5d
   15b90:	00029fac 	.word	0x00029fac
				}
				else if(received_command[0]=='P')
   15b94:	68fb      	ldr	r3, [r7, #12]
   15b96:	781b      	ldrb	r3, [r3, #0]
   15b98:	2b50      	cmp	r3, #80	; 0x50
   15b9a:	d107      	bne.n	15bac <processOnSMS+0xbc0>
				{
					detectionMethod=MOTOR_UNDEROVER_DETECTION_POWER;
   15b9c:	2395      	movs	r3, #149	; 0x95
   15b9e:	005b      	lsls	r3, r3, #1
   15ba0:	2208      	movs	r2, #8
   15ba2:	4694      	mov	ip, r2
   15ba4:	44bc      	add	ip, r7
   15ba6:	4463      	add	r3, ip
   15ba8:	2201      	movs	r2, #1
   15baa:	701a      	strb	r2, [r3, #0]
				}
				
				if(detectionMethod!=0)
   15bac:	2395      	movs	r3, #149	; 0x95
   15bae:	005b      	lsls	r3, r3, #1
   15bb0:	2208      	movs	r2, #8
   15bb2:	4694      	mov	ip, r2
   15bb4:	44bc      	add	ip, r7
   15bb6:	4463      	add	r3, ip
   15bb8:	781b      	ldrb	r3, [r3, #0]
   15bba:	2b00      	cmp	r3, #0
   15bbc:	d101      	bne.n	15bc2 <processOnSMS+0xbd6>
   15bbe:	f001 faf3 	bl	171a8 <processOnSMS+0x21bc>
				{
					saveUnderOverDetectionMethodSettings(detectionMethod);
   15bc2:	2395      	movs	r3, #149	; 0x95
   15bc4:	005b      	lsls	r3, r3, #1
   15bc6:	2208      	movs	r2, #8
   15bc8:	4694      	mov	ip, r2
   15bca:	44bc      	add	ip, r7
   15bcc:	4463      	add	r3, ip
   15bce:	781b      	ldrb	r3, [r3, #0]
   15bd0:	0018      	movs	r0, r3
   15bd2:	4bcf      	ldr	r3, [pc, #828]	; (15f10 <processOnSMS+0xf24>)
   15bd4:	4798      	blx	r3
					incomingSMSProcessed=true;
   15bd6:	2330      	movs	r3, #48	; 0x30
   15bd8:	33ff      	adds	r3, #255	; 0xff
   15bda:	2208      	movs	r2, #8
   15bdc:	4694      	mov	ip, r2
   15bde:	44bc      	add	ip, r7
   15be0:	4463      	add	r3, ip
   15be2:	2201      	movs	r2, #1
   15be4:	701a      	strb	r2, [r3, #0]
					if (response_sms_processed_cmd == true)
   15be6:	4bcb      	ldr	r3, [pc, #812]	; (15f14 <processOnSMS+0xf28>)
   15be8:	2298      	movs	r2, #152	; 0x98
   15bea:	0052      	lsls	r2, r2, #1
   15bec:	4694      	mov	ip, r2
   15bee:	2208      	movs	r2, #8
   15bf0:	4690      	mov	r8, r2
   15bf2:	44b8      	add	r8, r7
   15bf4:	44c4      	add	ip, r8
   15bf6:	4463      	add	r3, ip
   15bf8:	781b      	ldrb	r3, [r3, #0]
   15bfa:	2b00      	cmp	r3, #0
   15bfc:	d101      	bne.n	15c02 <processOnSMS+0xc16>
   15bfe:	f001 fad3 	bl	171a8 <processOnSMS+0x21bc>
					{
						strcpy(resep_msg,"UOMETHOD : ");
   15c02:	230c      	movs	r3, #12
   15c04:	2208      	movs	r2, #8
   15c06:	4694      	mov	ip, r2
   15c08:	44bc      	add	ip, r7
   15c0a:	4463      	add	r3, ip
   15c0c:	4ac2      	ldr	r2, [pc, #776]	; (15f18 <processOnSMS+0xf2c>)
   15c0e:	ca13      	ldmia	r2!, {r0, r1, r4}
   15c10:	c313      	stmia	r3!, {r0, r1, r4}
						strcat(resep_msg,received_command);
   15c12:	68fa      	ldr	r2, [r7, #12]
   15c14:	230c      	movs	r3, #12
   15c16:	2108      	movs	r1, #8
   15c18:	468c      	mov	ip, r1
   15c1a:	44bc      	add	ip, r7
   15c1c:	4463      	add	r3, ip
   15c1e:	0011      	movs	r1, r2
   15c20:	0018      	movs	r0, r3
   15c22:	4bbe      	ldr	r3, [pc, #760]	; (15f1c <processOnSMS+0xf30>)
   15c24:	4798      	blx	r3
						strcat(resep_msg," OK");
   15c26:	230c      	movs	r3, #12
   15c28:	2208      	movs	r2, #8
   15c2a:	4694      	mov	ip, r2
   15c2c:	44bc      	add	ip, r7
   15c2e:	4463      	add	r3, ip
   15c30:	0018      	movs	r0, r3
   15c32:	4bbb      	ldr	r3, [pc, #748]	; (15f20 <processOnSMS+0xf34>)
   15c34:	4798      	blx	r3
   15c36:	0003      	movs	r3, r0
   15c38:	001a      	movs	r2, r3
   15c3a:	230c      	movs	r3, #12
   15c3c:	2108      	movs	r1, #8
   15c3e:	468c      	mov	ip, r1
   15c40:	44bc      	add	ip, r7
   15c42:	4463      	add	r3, ip
   15c44:	189a      	adds	r2, r3, r2
   15c46:	4bb7      	ldr	r3, [pc, #732]	; (15f24 <processOnSMS+0xf38>)
   15c48:	0010      	movs	r0, r2
   15c4a:	0019      	movs	r1, r3
   15c4c:	2304      	movs	r3, #4
   15c4e:	001a      	movs	r2, r3
   15c50:	4bb5      	ldr	r3, [pc, #724]	; (15f28 <processOnSMS+0xf3c>)
   15c52:	4798      	blx	r3
   15c54:	f001 faa8 	bl	171a8 <processOnSMS+0x21bc>
					}
				}
			}
		}
	}
	else if(StringstartsWith(received_command,"MVBYPON"))
   15c58:	4ab4      	ldr	r2, [pc, #720]	; (15f2c <processOnSMS+0xf40>)
   15c5a:	68fb      	ldr	r3, [r7, #12]
   15c5c:	0011      	movs	r1, r2
   15c5e:	0018      	movs	r0, r3
   15c60:	4bb3      	ldr	r3, [pc, #716]	; (15f30 <processOnSMS+0xf44>)
   15c62:	4798      	blx	r3
   15c64:	1e03      	subs	r3, r0, #0
   15c66:	d024      	beq.n	15cb2 <processOnSMS+0xcc6>
	{
		saveMotorVoltageBypassSettings(true);
   15c68:	2001      	movs	r0, #1
   15c6a:	4bb2      	ldr	r3, [pc, #712]	; (15f34 <processOnSMS+0xf48>)
   15c6c:	4798      	blx	r3
		incomingSMSProcessed=true;
   15c6e:	2330      	movs	r3, #48	; 0x30
   15c70:	33ff      	adds	r3, #255	; 0xff
   15c72:	2208      	movs	r2, #8
   15c74:	4694      	mov	ip, r2
   15c76:	44bc      	add	ip, r7
   15c78:	4463      	add	r3, ip
   15c7a:	2201      	movs	r2, #1
   15c7c:	701a      	strb	r2, [r3, #0]
		
		if (response_sms_processed_cmd == true)
   15c7e:	4ba5      	ldr	r3, [pc, #660]	; (15f14 <processOnSMS+0xf28>)
   15c80:	2298      	movs	r2, #152	; 0x98
   15c82:	0052      	lsls	r2, r2, #1
   15c84:	4694      	mov	ip, r2
   15c86:	2208      	movs	r2, #8
   15c88:	4690      	mov	r8, r2
   15c8a:	44b8      	add	r8, r7
   15c8c:	44c4      	add	ip, r8
   15c8e:	4463      	add	r3, ip
   15c90:	781b      	ldrb	r3, [r3, #0]
   15c92:	2b00      	cmp	r3, #0
   15c94:	d101      	bne.n	15c9a <processOnSMS+0xcae>
   15c96:	f001 fa87 	bl	171a8 <processOnSMS+0x21bc>
		{
			strcpy(resep_msg,"MOTOR VOLTAGE BYPASS ON");
   15c9a:	230c      	movs	r3, #12
   15c9c:	2208      	movs	r2, #8
   15c9e:	4694      	mov	ip, r2
   15ca0:	44bc      	add	ip, r7
   15ca2:	4463      	add	r3, ip
   15ca4:	4aa4      	ldr	r2, [pc, #656]	; (15f38 <processOnSMS+0xf4c>)
   15ca6:	ca13      	ldmia	r2!, {r0, r1, r4}
   15ca8:	c313      	stmia	r3!, {r0, r1, r4}
   15caa:	ca13      	ldmia	r2!, {r0, r1, r4}
   15cac:	c313      	stmia	r3!, {r0, r1, r4}
   15cae:	f001 fa7b 	bl	171a8 <processOnSMS+0x21bc>
		}
	}
	else if(StringstartsWith(received_command,"MVBYPOFF"))
   15cb2:	4aa2      	ldr	r2, [pc, #648]	; (15f3c <processOnSMS+0xf50>)
   15cb4:	68fb      	ldr	r3, [r7, #12]
   15cb6:	0011      	movs	r1, r2
   15cb8:	0018      	movs	r0, r3
   15cba:	4b9d      	ldr	r3, [pc, #628]	; (15f30 <processOnSMS+0xf44>)
   15cbc:	4798      	blx	r3
   15cbe:	1e03      	subs	r3, r0, #0
   15cc0:	d026      	beq.n	15d10 <processOnSMS+0xd24>
	{
		saveMotorVoltageBypassSettings(false);
   15cc2:	2000      	movs	r0, #0
   15cc4:	4b9b      	ldr	r3, [pc, #620]	; (15f34 <processOnSMS+0xf48>)
   15cc6:	4798      	blx	r3
		incomingSMSProcessed=true;
   15cc8:	2330      	movs	r3, #48	; 0x30
   15cca:	33ff      	adds	r3, #255	; 0xff
   15ccc:	2208      	movs	r2, #8
   15cce:	4694      	mov	ip, r2
   15cd0:	44bc      	add	ip, r7
   15cd2:	4463      	add	r3, ip
   15cd4:	2201      	movs	r2, #1
   15cd6:	701a      	strb	r2, [r3, #0]
		
		if (response_sms_processed_cmd == true)
   15cd8:	4b8e      	ldr	r3, [pc, #568]	; (15f14 <processOnSMS+0xf28>)
   15cda:	2298      	movs	r2, #152	; 0x98
   15cdc:	0052      	lsls	r2, r2, #1
   15cde:	4694      	mov	ip, r2
   15ce0:	2208      	movs	r2, #8
   15ce2:	4690      	mov	r8, r2
   15ce4:	44b8      	add	r8, r7
   15ce6:	44c4      	add	ip, r8
   15ce8:	4463      	add	r3, ip
   15cea:	781b      	ldrb	r3, [r3, #0]
   15cec:	2b00      	cmp	r3, #0
   15cee:	d101      	bne.n	15cf4 <processOnSMS+0xd08>
   15cf0:	f001 fa5a 	bl	171a8 <processOnSMS+0x21bc>
		{
			strcpy(resep_msg,"MOTOR VOLTAGE BYPASS OFF");
   15cf4:	230c      	movs	r3, #12
   15cf6:	2208      	movs	r2, #8
   15cf8:	4694      	mov	ip, r2
   15cfa:	44bc      	add	ip, r7
   15cfc:	4463      	add	r3, ip
   15cfe:	4a90      	ldr	r2, [pc, #576]	; (15f40 <processOnSMS+0xf54>)
   15d00:	ca13      	ldmia	r2!, {r0, r1, r4}
   15d02:	c313      	stmia	r3!, {r0, r1, r4}
   15d04:	ca13      	ldmia	r2!, {r0, r1, r4}
   15d06:	c313      	stmia	r3!, {r0, r1, r4}
   15d08:	7812      	ldrb	r2, [r2, #0]
   15d0a:	701a      	strb	r2, [r3, #0]
   15d0c:	f001 fa4c 	bl	171a8 <processOnSMS+0x21bc>
		}
	}
	else if(StringstartsWith(received_command,"MVBYPT"))
   15d10:	4a8c      	ldr	r2, [pc, #560]	; (15f44 <processOnSMS+0xf58>)
   15d12:	68fb      	ldr	r3, [r7, #12]
   15d14:	0011      	movs	r1, r2
   15d16:	0018      	movs	r0, r3
   15d18:	4b85      	ldr	r3, [pc, #532]	; (15f30 <processOnSMS+0xf44>)
   15d1a:	4798      	blx	r3
   15d1c:	1e03      	subs	r3, r0, #0
   15d1e:	d100      	bne.n	15d22 <processOnSMS+0xd36>
   15d20:	e07f      	b.n	15e22 <processOnSMS+0xe36>
	{
		memmove(received_command,received_command+6,strlen(received_command));
   15d22:	68fb      	ldr	r3, [r7, #12]
   15d24:	1d9c      	adds	r4, r3, #6
   15d26:	68fb      	ldr	r3, [r7, #12]
   15d28:	0018      	movs	r0, r3
   15d2a:	4b7d      	ldr	r3, [pc, #500]	; (15f20 <processOnSMS+0xf34>)
   15d2c:	4798      	blx	r3
   15d2e:	0002      	movs	r2, r0
   15d30:	68fb      	ldr	r3, [r7, #12]
   15d32:	0021      	movs	r1, r4
   15d34:	0018      	movs	r0, r3
   15d36:	4b84      	ldr	r3, [pc, #528]	; (15f48 <processOnSMS+0xf5c>)
   15d38:	4798      	blx	r3
		uint32_t voltageBypTime = atoi(received_command);
   15d3a:	68fb      	ldr	r3, [r7, #12]
   15d3c:	0018      	movs	r0, r3
   15d3e:	4b83      	ldr	r3, [pc, #524]	; (15f4c <processOnSMS+0xf60>)
   15d40:	4798      	blx	r3
   15d42:	0003      	movs	r3, r0
   15d44:	2292      	movs	r2, #146	; 0x92
   15d46:	0052      	lsls	r2, r2, #1
   15d48:	2108      	movs	r1, #8
   15d4a:	468c      	mov	ip, r1
   15d4c:	44bc      	add	ip, r7
   15d4e:	4462      	add	r2, ip
   15d50:	6013      	str	r3, [r2, #0]
		if (voltageBypTime<10) voltageBypTime = 10;
   15d52:	2392      	movs	r3, #146	; 0x92
   15d54:	005b      	lsls	r3, r3, #1
   15d56:	2208      	movs	r2, #8
   15d58:	4694      	mov	ip, r2
   15d5a:	44bc      	add	ip, r7
   15d5c:	4463      	add	r3, ip
   15d5e:	681b      	ldr	r3, [r3, #0]
   15d60:	2b09      	cmp	r3, #9
   15d62:	d807      	bhi.n	15d74 <processOnSMS+0xd88>
   15d64:	230a      	movs	r3, #10
   15d66:	2292      	movs	r2, #146	; 0x92
   15d68:	0052      	lsls	r2, r2, #1
   15d6a:	2108      	movs	r1, #8
   15d6c:	468c      	mov	ip, r1
   15d6e:	44bc      	add	ip, r7
   15d70:	4462      	add	r2, ip
   15d72:	6013      	str	r3, [r2, #0]
		if (voltageBypTime>3600L) voltageBypTime=3600L;
   15d74:	2392      	movs	r3, #146	; 0x92
   15d76:	005b      	lsls	r3, r3, #1
   15d78:	2208      	movs	r2, #8
   15d7a:	4694      	mov	ip, r2
   15d7c:	44bc      	add	ip, r7
   15d7e:	4463      	add	r3, ip
   15d80:	681a      	ldr	r2, [r3, #0]
   15d82:	23e1      	movs	r3, #225	; 0xe1
   15d84:	011b      	lsls	r3, r3, #4
   15d86:	429a      	cmp	r2, r3
   15d88:	d908      	bls.n	15d9c <processOnSMS+0xdb0>
   15d8a:	23e1      	movs	r3, #225	; 0xe1
   15d8c:	011b      	lsls	r3, r3, #4
   15d8e:	2292      	movs	r2, #146	; 0x92
   15d90:	0052      	lsls	r2, r2, #1
   15d92:	2108      	movs	r1, #8
   15d94:	468c      	mov	ip, r1
   15d96:	44bc      	add	ip, r7
   15d98:	4462      	add	r2, ip
   15d9a:	6013      	str	r3, [r2, #0]
		
		voltageBypTime=voltageBypTime*1000L;
   15d9c:	2392      	movs	r3, #146	; 0x92
   15d9e:	005b      	lsls	r3, r3, #1
   15da0:	2208      	movs	r2, #8
   15da2:	4694      	mov	ip, r2
   15da4:	44bc      	add	ip, r7
   15da6:	4463      	add	r3, ip
   15da8:	681b      	ldr	r3, [r3, #0]
   15daa:	22fa      	movs	r2, #250	; 0xfa
   15dac:	0092      	lsls	r2, r2, #2
   15dae:	4353      	muls	r3, r2
   15db0:	2292      	movs	r2, #146	; 0x92
   15db2:	0052      	lsls	r2, r2, #1
   15db4:	2108      	movs	r1, #8
   15db6:	468c      	mov	ip, r1
   15db8:	44bc      	add	ip, r7
   15dba:	4462      	add	r2, ip
   15dbc:	6013      	str	r3, [r2, #0]
		
		saveMotorVoltageBypasssTimeSettings(voltageBypTime);
   15dbe:	2392      	movs	r3, #146	; 0x92
   15dc0:	005b      	lsls	r3, r3, #1
   15dc2:	2208      	movs	r2, #8
   15dc4:	4694      	mov	ip, r2
   15dc6:	44bc      	add	ip, r7
   15dc8:	4463      	add	r3, ip
   15dca:	681b      	ldr	r3, [r3, #0]
   15dcc:	0018      	movs	r0, r3
   15dce:	4b60      	ldr	r3, [pc, #384]	; (15f50 <processOnSMS+0xf64>)
   15dd0:	4798      	blx	r3
		incomingSMSProcessed=true;
   15dd2:	2330      	movs	r3, #48	; 0x30
   15dd4:	33ff      	adds	r3, #255	; 0xff
   15dd6:	2208      	movs	r2, #8
   15dd8:	4694      	mov	ip, r2
   15dda:	44bc      	add	ip, r7
   15ddc:	4463      	add	r3, ip
   15dde:	2201      	movs	r2, #1
   15de0:	701a      	strb	r2, [r3, #0]
		
		if (response_sms_processed_cmd == true)
   15de2:	4b4c      	ldr	r3, [pc, #304]	; (15f14 <processOnSMS+0xf28>)
   15de4:	2298      	movs	r2, #152	; 0x98
   15de6:	0052      	lsls	r2, r2, #1
   15de8:	4694      	mov	ip, r2
   15dea:	2208      	movs	r2, #8
   15dec:	4690      	mov	r8, r2
   15dee:	44b8      	add	r8, r7
   15df0:	44c4      	add	ip, r8
   15df2:	4463      	add	r3, ip
   15df4:	781b      	ldrb	r3, [r3, #0]
   15df6:	2b00      	cmp	r3, #0
   15df8:	d101      	bne.n	15dfe <processOnSMS+0xe12>
   15dfa:	f001 f9d5 	bl	171a8 <processOnSMS+0x21bc>
		{
			sprintf(resep_msg,"Motor Voltage Bypass Time Set to %d",voltageBypTime);
   15dfe:	2392      	movs	r3, #146	; 0x92
   15e00:	005b      	lsls	r3, r3, #1
   15e02:	2208      	movs	r2, #8
   15e04:	4694      	mov	ip, r2
   15e06:	44bc      	add	ip, r7
   15e08:	4463      	add	r3, ip
   15e0a:	681a      	ldr	r2, [r3, #0]
   15e0c:	4951      	ldr	r1, [pc, #324]	; (15f54 <processOnSMS+0xf68>)
   15e0e:	230c      	movs	r3, #12
   15e10:	2008      	movs	r0, #8
   15e12:	4684      	mov	ip, r0
   15e14:	44bc      	add	ip, r7
   15e16:	4463      	add	r3, ip
   15e18:	0018      	movs	r0, r3
   15e1a:	4b4f      	ldr	r3, [pc, #316]	; (15f58 <processOnSMS+0xf6c>)
   15e1c:	4798      	blx	r3
   15e1e:	f001 f9c3 	bl	171a8 <processOnSMS+0x21bc>
		}
	}
	else if (StringstartsWith(received_command,"RESP"))
   15e22:	4a4e      	ldr	r2, [pc, #312]	; (15f5c <processOnSMS+0xf70>)
   15e24:	68fb      	ldr	r3, [r7, #12]
   15e26:	0011      	movs	r1, r2
   15e28:	0018      	movs	r0, r3
   15e2a:	4b41      	ldr	r3, [pc, #260]	; (15f30 <processOnSMS+0xf44>)
   15e2c:	4798      	blx	r3
   15e2e:	1e03      	subs	r3, r0, #0
   15e30:	d100      	bne.n	15e34 <processOnSMS+0xe48>
   15e32:	e099      	b.n	15f68 <processOnSMS+0xf7c>
	{
		if (strlen(received_command)>4)
   15e34:	68fb      	ldr	r3, [r7, #12]
   15e36:	0018      	movs	r0, r3
   15e38:	4b39      	ldr	r3, [pc, #228]	; (15f20 <processOnSMS+0xf34>)
   15e3a:	4798      	blx	r3
   15e3c:	0003      	movs	r3, r0
   15e3e:	2b04      	cmp	r3, #4
   15e40:	d801      	bhi.n	15e46 <processOnSMS+0xe5a>
   15e42:	f001 f9b1 	bl	171a8 <processOnSMS+0x21bc>
		{
			memmove(received_command,received_command+4,strlen(received_command));
   15e46:	68fb      	ldr	r3, [r7, #12]
   15e48:	1d1c      	adds	r4, r3, #4
   15e4a:	68fb      	ldr	r3, [r7, #12]
   15e4c:	0018      	movs	r0, r3
   15e4e:	4b34      	ldr	r3, [pc, #208]	; (15f20 <processOnSMS+0xf34>)
   15e50:	4798      	blx	r3
   15e52:	0002      	movs	r2, r0
   15e54:	68fb      	ldr	r3, [r7, #12]
   15e56:	0021      	movs	r1, r4
   15e58:	0018      	movs	r0, r3
   15e5a:	4b3b      	ldr	r3, [pc, #236]	; (15f48 <processOnSMS+0xf5c>)
   15e5c:	4798      	blx	r3
			if(received_command[0]=='C' || received_command[0]=='A' || received_command[0]=='T' || received_command[0]=='N')
   15e5e:	68fb      	ldr	r3, [r7, #12]
   15e60:	781b      	ldrb	r3, [r3, #0]
   15e62:	2b43      	cmp	r3, #67	; 0x43
   15e64:	d00d      	beq.n	15e82 <processOnSMS+0xe96>
   15e66:	68fb      	ldr	r3, [r7, #12]
   15e68:	781b      	ldrb	r3, [r3, #0]
   15e6a:	2b41      	cmp	r3, #65	; 0x41
   15e6c:	d009      	beq.n	15e82 <processOnSMS+0xe96>
   15e6e:	68fb      	ldr	r3, [r7, #12]
   15e70:	781b      	ldrb	r3, [r3, #0]
   15e72:	2b54      	cmp	r3, #84	; 0x54
   15e74:	d005      	beq.n	15e82 <processOnSMS+0xe96>
   15e76:	68fb      	ldr	r3, [r7, #12]
   15e78:	781b      	ldrb	r3, [r3, #0]
   15e7a:	2b4e      	cmp	r3, #78	; 0x4e
   15e7c:	d001      	beq.n	15e82 <processOnSMS+0xe96>
   15e7e:	f001 f993 	bl	171a8 <processOnSMS+0x21bc>
			{
				saveResponseSettings((char)received_command[0]);  //save specific RESPONSE settings
   15e82:	68fb      	ldr	r3, [r7, #12]
   15e84:	781b      	ldrb	r3, [r3, #0]
   15e86:	0018      	movs	r0, r3
   15e88:	4b35      	ldr	r3, [pc, #212]	; (15f60 <processOnSMS+0xf74>)
   15e8a:	4798      	blx	r3
				
				incomingSMSProcessed=true;
   15e8c:	2330      	movs	r3, #48	; 0x30
   15e8e:	33ff      	adds	r3, #255	; 0xff
   15e90:	2208      	movs	r2, #8
   15e92:	4694      	mov	ip, r2
   15e94:	44bc      	add	ip, r7
   15e96:	4463      	add	r3, ip
   15e98:	2201      	movs	r2, #1
   15e9a:	701a      	strb	r2, [r3, #0]
				
				if (response_sms_processed_cmd == true)
   15e9c:	4b1d      	ldr	r3, [pc, #116]	; (15f14 <processOnSMS+0xf28>)
   15e9e:	2298      	movs	r2, #152	; 0x98
   15ea0:	0052      	lsls	r2, r2, #1
   15ea2:	4694      	mov	ip, r2
   15ea4:	2208      	movs	r2, #8
   15ea6:	4690      	mov	r8, r2
   15ea8:	44b8      	add	r8, r7
   15eaa:	44c4      	add	ip, r8
   15eac:	4463      	add	r3, ip
   15eae:	781b      	ldrb	r3, [r3, #0]
   15eb0:	2b00      	cmp	r3, #0
   15eb2:	d101      	bne.n	15eb8 <processOnSMS+0xecc>
   15eb4:	f001 f978 	bl	171a8 <processOnSMS+0x21bc>
				{
					strcpy(resep_msg,"RESP : ");
   15eb8:	230c      	movs	r3, #12
   15eba:	2208      	movs	r2, #8
   15ebc:	4694      	mov	ip, r2
   15ebe:	44bc      	add	ip, r7
   15ec0:	4463      	add	r3, ip
   15ec2:	4a28      	ldr	r2, [pc, #160]	; (15f64 <processOnSMS+0xf78>)
   15ec4:	ca03      	ldmia	r2!, {r0, r1}
   15ec6:	c303      	stmia	r3!, {r0, r1}
					strcat(resep_msg,received_command);
   15ec8:	68fa      	ldr	r2, [r7, #12]
   15eca:	230c      	movs	r3, #12
   15ecc:	2108      	movs	r1, #8
   15ece:	468c      	mov	ip, r1
   15ed0:	44bc      	add	ip, r7
   15ed2:	4463      	add	r3, ip
   15ed4:	0011      	movs	r1, r2
   15ed6:	0018      	movs	r0, r3
   15ed8:	4b10      	ldr	r3, [pc, #64]	; (15f1c <processOnSMS+0xf30>)
   15eda:	4798      	blx	r3
					strcat(resep_msg," OK");
   15edc:	230c      	movs	r3, #12
   15ede:	2208      	movs	r2, #8
   15ee0:	4694      	mov	ip, r2
   15ee2:	44bc      	add	ip, r7
   15ee4:	4463      	add	r3, ip
   15ee6:	0018      	movs	r0, r3
   15ee8:	4b0d      	ldr	r3, [pc, #52]	; (15f20 <processOnSMS+0xf34>)
   15eea:	4798      	blx	r3
   15eec:	0003      	movs	r3, r0
   15eee:	001a      	movs	r2, r3
   15ef0:	230c      	movs	r3, #12
   15ef2:	2108      	movs	r1, #8
   15ef4:	468c      	mov	ip, r1
   15ef6:	44bc      	add	ip, r7
   15ef8:	4463      	add	r3, ip
   15efa:	189a      	adds	r2, r3, r2
   15efc:	4b09      	ldr	r3, [pc, #36]	; (15f24 <processOnSMS+0xf38>)
   15efe:	0010      	movs	r0, r2
   15f00:	0019      	movs	r1, r3
   15f02:	2304      	movs	r3, #4
   15f04:	001a      	movs	r2, r3
   15f06:	4b08      	ldr	r3, [pc, #32]	; (15f28 <processOnSMS+0xf3c>)
   15f08:	4798      	blx	r3
   15f0a:	f001 f94d 	bl	171a8 <processOnSMS+0x21bc>
   15f0e:	46c0      	nop			; (mov r8, r8)
   15f10:	000116c5 	.word	0x000116c5
   15f14:	fffffed2 	.word	0xfffffed2
   15f18:	00029fb8 	.word	0x00029fb8
   15f1c:	00028da1 	.word	0x00028da1
   15f20:	00028de7 	.word	0x00028de7
   15f24:	00029f94 	.word	0x00029f94
   15f28:	00028b21 	.word	0x00028b21
   15f2c:	00029fc4 	.word	0x00029fc4
   15f30:	00014201 	.word	0x00014201
   15f34:	00011711 	.word	0x00011711
   15f38:	00029fcc 	.word	0x00029fcc
   15f3c:	00029fe4 	.word	0x00029fe4
   15f40:	00029ff0 	.word	0x00029ff0
   15f44:	0002a00c 	.word	0x0002a00c
   15f48:	00028b33 	.word	0x00028b33
   15f4c:	00028a3d 	.word	0x00028a3d
   15f50:	0001175d 	.word	0x0001175d
   15f54:	0002a014 	.word	0x0002a014
   15f58:	00028d5d 	.word	0x00028d5d
   15f5c:	0002a038 	.word	0x0002a038
   15f60:	0001138d 	.word	0x0001138d
   15f64:	0002a040 	.word	0x0002a040
				}
			}
		}
	}
	else if (StringstartsWith(received_command,"OVR"))
   15f68:	4af0      	ldr	r2, [pc, #960]	; (1632c <processOnSMS+0x1340>)
   15f6a:	68fb      	ldr	r3, [r7, #12]
   15f6c:	0011      	movs	r1, r2
   15f6e:	0018      	movs	r0, r3
   15f70:	4bef      	ldr	r3, [pc, #956]	; (16330 <processOnSMS+0x1344>)
   15f72:	4798      	blx	r3
   15f74:	1e03      	subs	r3, r0, #0
   15f76:	d050      	beq.n	1601a <processOnSMS+0x102e>
	{
		memmove(received_command,received_command+3,strlen(received_command));
   15f78:	68fb      	ldr	r3, [r7, #12]
   15f7a:	1cdc      	adds	r4, r3, #3
   15f7c:	68fb      	ldr	r3, [r7, #12]
   15f7e:	0018      	movs	r0, r3
   15f80:	4bec      	ldr	r3, [pc, #944]	; (16334 <processOnSMS+0x1348>)
   15f82:	4798      	blx	r3
   15f84:	0002      	movs	r2, r0
   15f86:	68fb      	ldr	r3, [r7, #12]
   15f88:	0021      	movs	r1, r4
   15f8a:	0018      	movs	r0, r3
   15f8c:	4bea      	ldr	r3, [pc, #936]	; (16338 <processOnSMS+0x134c>)
   15f8e:	4798      	blx	r3
		uint8_t ovr_per = atoi(received_command);
   15f90:	68fb      	ldr	r3, [r7, #12]
   15f92:	0018      	movs	r0, r3
   15f94:	4be9      	ldr	r3, [pc, #932]	; (1633c <processOnSMS+0x1350>)
   15f96:	4798      	blx	r3
   15f98:	0002      	movs	r2, r0
   15f9a:	238b      	movs	r3, #139	; 0x8b
   15f9c:	005b      	lsls	r3, r3, #1
   15f9e:	2108      	movs	r1, #8
   15fa0:	468c      	mov	ip, r1
   15fa2:	44bc      	add	ip, r7
   15fa4:	4463      	add	r3, ip
   15fa6:	701a      	strb	r2, [r3, #0]
		if(ovr_per>104)
   15fa8:	238b      	movs	r3, #139	; 0x8b
   15faa:	005b      	lsls	r3, r3, #1
   15fac:	2208      	movs	r2, #8
   15fae:	4694      	mov	ip, r2
   15fb0:	44bc      	add	ip, r7
   15fb2:	4463      	add	r3, ip
   15fb4:	781b      	ldrb	r3, [r3, #0]
   15fb6:	2b68      	cmp	r3, #104	; 0x68
   15fb8:	d801      	bhi.n	15fbe <processOnSMS+0xfd2>
   15fba:	f001 f8f5 	bl	171a8 <processOnSMS+0x21bc>
		{
			setOverloadPer(ovr_per);
   15fbe:	238b      	movs	r3, #139	; 0x8b
   15fc0:	005b      	lsls	r3, r3, #1
   15fc2:	2208      	movs	r2, #8
   15fc4:	4694      	mov	ip, r2
   15fc6:	44bc      	add	ip, r7
   15fc8:	4463      	add	r3, ip
   15fca:	781b      	ldrb	r3, [r3, #0]
   15fcc:	0018      	movs	r0, r3
   15fce:	4bdc      	ldr	r3, [pc, #880]	; (16340 <processOnSMS+0x1354>)
   15fd0:	4798      	blx	r3
			incomingSMSProcessed=true;
   15fd2:	2330      	movs	r3, #48	; 0x30
   15fd4:	33ff      	adds	r3, #255	; 0xff
   15fd6:	2208      	movs	r2, #8
   15fd8:	4694      	mov	ip, r2
   15fda:	44bc      	add	ip, r7
   15fdc:	4463      	add	r3, ip
   15fde:	2201      	movs	r2, #1
   15fe0:	701a      	strb	r2, [r3, #0]
			
			if (response_sms_processed_cmd == true)
   15fe2:	4bd8      	ldr	r3, [pc, #864]	; (16344 <processOnSMS+0x1358>)
   15fe4:	2298      	movs	r2, #152	; 0x98
   15fe6:	0052      	lsls	r2, r2, #1
   15fe8:	4694      	mov	ip, r2
   15fea:	2208      	movs	r2, #8
   15fec:	4690      	mov	r8, r2
   15fee:	44b8      	add	r8, r7
   15ff0:	44c4      	add	ip, r8
   15ff2:	4463      	add	r3, ip
   15ff4:	781b      	ldrb	r3, [r3, #0]
   15ff6:	2b00      	cmp	r3, #0
   15ff8:	d101      	bne.n	15ffe <processOnSMS+0x1012>
   15ffa:	f001 f8d5 	bl	171a8 <processOnSMS+0x21bc>
			{
				strcpy(resep_msg,"OVR SET OK");
   15ffe:	230c      	movs	r3, #12
   16000:	2208      	movs	r2, #8
   16002:	4694      	mov	ip, r2
   16004:	44bc      	add	ip, r7
   16006:	4463      	add	r3, ip
   16008:	4acf      	ldr	r2, [pc, #828]	; (16348 <processOnSMS+0x135c>)
   1600a:	ca03      	ldmia	r2!, {r0, r1}
   1600c:	c303      	stmia	r3!, {r0, r1}
   1600e:	8811      	ldrh	r1, [r2, #0]
   16010:	8019      	strh	r1, [r3, #0]
   16012:	7892      	ldrb	r2, [r2, #2]
   16014:	709a      	strb	r2, [r3, #2]
   16016:	f001 f8c7 	bl	171a8 <processOnSMS+0x21bc>
			}
		}
	}
	else if (StringstartsWith(received_command,"UNDR"))
   1601a:	4acc      	ldr	r2, [pc, #816]	; (1634c <processOnSMS+0x1360>)
   1601c:	68fb      	ldr	r3, [r7, #12]
   1601e:	0011      	movs	r1, r2
   16020:	0018      	movs	r0, r3
   16022:	4bc3      	ldr	r3, [pc, #780]	; (16330 <processOnSMS+0x1344>)
   16024:	4798      	blx	r3
   16026:	1e03      	subs	r3, r0, #0
   16028:	d057      	beq.n	160da <processOnSMS+0x10ee>
	{
		memmove(received_command,received_command+4,strlen(received_command));
   1602a:	68fb      	ldr	r3, [r7, #12]
   1602c:	1d1c      	adds	r4, r3, #4
   1602e:	68fb      	ldr	r3, [r7, #12]
   16030:	0018      	movs	r0, r3
   16032:	4bc0      	ldr	r3, [pc, #768]	; (16334 <processOnSMS+0x1348>)
   16034:	4798      	blx	r3
   16036:	0002      	movs	r2, r0
   16038:	68fb      	ldr	r3, [r7, #12]
   1603a:	0021      	movs	r1, r4
   1603c:	0018      	movs	r0, r3
   1603e:	4bbe      	ldr	r3, [pc, #760]	; (16338 <processOnSMS+0x134c>)
   16040:	4798      	blx	r3
		uint8_t undr_per = atoi(received_command);
   16042:	68fb      	ldr	r3, [r7, #12]
   16044:	0018      	movs	r0, r3
   16046:	4bbd      	ldr	r3, [pc, #756]	; (1633c <processOnSMS+0x1350>)
   16048:	4798      	blx	r3
   1604a:	0002      	movs	r2, r0
   1604c:	2316      	movs	r3, #22
   1604e:	33ff      	adds	r3, #255	; 0xff
   16050:	2108      	movs	r1, #8
   16052:	468c      	mov	ip, r1
   16054:	44bc      	add	ip, r7
   16056:	4463      	add	r3, ip
   16058:	701a      	strb	r2, [r3, #0]
		if(undr_per<98 && undr_per>0)
   1605a:	2316      	movs	r3, #22
   1605c:	33ff      	adds	r3, #255	; 0xff
   1605e:	2208      	movs	r2, #8
   16060:	4694      	mov	ip, r2
   16062:	44bc      	add	ip, r7
   16064:	4463      	add	r3, ip
   16066:	781b      	ldrb	r3, [r3, #0]
   16068:	2b61      	cmp	r3, #97	; 0x61
   1606a:	d901      	bls.n	16070 <processOnSMS+0x1084>
   1606c:	f001 f89c 	bl	171a8 <processOnSMS+0x21bc>
   16070:	2316      	movs	r3, #22
   16072:	33ff      	adds	r3, #255	; 0xff
   16074:	2208      	movs	r2, #8
   16076:	4694      	mov	ip, r2
   16078:	44bc      	add	ip, r7
   1607a:	4463      	add	r3, ip
   1607c:	781b      	ldrb	r3, [r3, #0]
   1607e:	2b00      	cmp	r3, #0
   16080:	d101      	bne.n	16086 <processOnSMS+0x109a>
   16082:	f001 f891 	bl	171a8 <processOnSMS+0x21bc>
		{

			setUnderloadPer(undr_per);
   16086:	2316      	movs	r3, #22
   16088:	33ff      	adds	r3, #255	; 0xff
   1608a:	2208      	movs	r2, #8
   1608c:	4694      	mov	ip, r2
   1608e:	44bc      	add	ip, r7
   16090:	4463      	add	r3, ip
   16092:	781b      	ldrb	r3, [r3, #0]
   16094:	0018      	movs	r0, r3
   16096:	4bae      	ldr	r3, [pc, #696]	; (16350 <processOnSMS+0x1364>)
   16098:	4798      	blx	r3

			incomingSMSProcessed=true;
   1609a:	2330      	movs	r3, #48	; 0x30
   1609c:	33ff      	adds	r3, #255	; 0xff
   1609e:	2208      	movs	r2, #8
   160a0:	4694      	mov	ip, r2
   160a2:	44bc      	add	ip, r7
   160a4:	4463      	add	r3, ip
   160a6:	2201      	movs	r2, #1
   160a8:	701a      	strb	r2, [r3, #0]

			if (response_sms_processed_cmd == true)
   160aa:	4ba6      	ldr	r3, [pc, #664]	; (16344 <processOnSMS+0x1358>)
   160ac:	2298      	movs	r2, #152	; 0x98
   160ae:	0052      	lsls	r2, r2, #1
   160b0:	4694      	mov	ip, r2
   160b2:	2208      	movs	r2, #8
   160b4:	4690      	mov	r8, r2
   160b6:	44b8      	add	r8, r7
   160b8:	44c4      	add	ip, r8
   160ba:	4463      	add	r3, ip
   160bc:	781b      	ldrb	r3, [r3, #0]
   160be:	2b00      	cmp	r3, #0
   160c0:	d101      	bne.n	160c6 <processOnSMS+0x10da>
   160c2:	f001 f871 	bl	171a8 <processOnSMS+0x21bc>
			{
				strcpy(resep_msg,"UNDR SET OK");
   160c6:	230c      	movs	r3, #12
   160c8:	2208      	movs	r2, #8
   160ca:	4694      	mov	ip, r2
   160cc:	44bc      	add	ip, r7
   160ce:	4463      	add	r3, ip
   160d0:	4aa0      	ldr	r2, [pc, #640]	; (16354 <processOnSMS+0x1368>)
   160d2:	ca13      	ldmia	r2!, {r0, r1, r4}
   160d4:	c313      	stmia	r3!, {r0, r1, r4}
   160d6:	f001 f867 	bl	171a8 <processOnSMS+0x21bc>
			}
		}
	}
	else if (StringstartsWith(received_command,"ASTAT"))
   160da:	4a9f      	ldr	r2, [pc, #636]	; (16358 <processOnSMS+0x136c>)
   160dc:	68fb      	ldr	r3, [r7, #12]
   160de:	0011      	movs	r1, r2
   160e0:	0018      	movs	r0, r3
   160e2:	4b93      	ldr	r3, [pc, #588]	; (16330 <processOnSMS+0x1344>)
   160e4:	4798      	blx	r3
   160e6:	1e03      	subs	r3, r0, #0
   160e8:	d042      	beq.n	16170 <processOnSMS+0x1184>
	{
		if(factory_settings_parameter_struct.ENABLE_CURRENT)
   160ea:	4b9c      	ldr	r3, [pc, #624]	; (1635c <processOnSMS+0x1370>)
   160ec:	785b      	ldrb	r3, [r3, #1]
   160ee:	2b00      	cmp	r3, #0
   160f0:	d101      	bne.n	160f6 <processOnSMS+0x110a>
   160f2:	f001 f859 	bl	171a8 <processOnSMS+0x21bc>
		{
			sprintf(resep_msg,"C:%u.%u\nN:%u\nO:%u\nU:%u\nOP:%u\nUP:%u",
			Analog_Parameter_Struct.Motor_Current_IntPart,
   160f6:	4b9a      	ldr	r3, [pc, #616]	; (16360 <processOnSMS+0x1374>)
   160f8:	8a9b      	ldrh	r3, [r3, #20]
   160fa:	b29b      	uxth	r3, r3
			sprintf(resep_msg,"C:%u.%u\nN:%u\nO:%u\nU:%u\nOP:%u\nUP:%u",
   160fc:	607b      	str	r3, [r7, #4]
			Analog_Parameter_Struct.Motor_Current_DecPart,
   160fe:	4b98      	ldr	r3, [pc, #608]	; (16360 <processOnSMS+0x1374>)
   16100:	8adb      	ldrh	r3, [r3, #22]
   16102:	b29b      	uxth	r3, r3
			sprintf(resep_msg,"C:%u.%u\nN:%u\nO:%u\nU:%u\nOP:%u\nUP:%u",
   16104:	603b      	str	r3, [r7, #0]
   16106:	4b97      	ldr	r3, [pc, #604]	; (16364 <processOnSMS+0x1378>)
   16108:	691a      	ldr	r2, [r3, #16]
   1610a:	4b96      	ldr	r3, [pc, #600]	; (16364 <processOnSMS+0x1378>)
   1610c:	6959      	ldr	r1, [r3, #20]
   1610e:	4b95      	ldr	r3, [pc, #596]	; (16364 <processOnSMS+0x1378>)
   16110:	699b      	ldr	r3, [r3, #24]
   16112:	4698      	mov	r8, r3
			user_settings_parameter_struct.normalLoadAddress,
			user_settings_parameter_struct.overloadAddress,
			user_settings_parameter_struct.underloadAddress,
			user_settings_parameter_struct.overloadPerAddress,
   16114:	4893      	ldr	r0, [pc, #588]	; (16364 <processOnSMS+0x1378>)
   16116:	7f40      	ldrb	r0, [r0, #29]
   16118:	b2c0      	uxtb	r0, r0
			sprintf(resep_msg,"C:%u.%u\nN:%u\nO:%u\nU:%u\nOP:%u\nUP:%u",
   1611a:	0005      	movs	r5, r0
			user_settings_parameter_struct.underloadPerAddress);
   1611c:	4891      	ldr	r0, [pc, #580]	; (16364 <processOnSMS+0x1378>)
   1611e:	7f00      	ldrb	r0, [r0, #28]
   16120:	b2c0      	uxtb	r0, r0
			sprintf(resep_msg,"C:%u.%u\nN:%u\nO:%u\nU:%u\nOP:%u\nUP:%u",
   16122:	0006      	movs	r6, r0
   16124:	4c90      	ldr	r4, [pc, #576]	; (16368 <processOnSMS+0x137c>)
   16126:	200c      	movs	r0, #12
   16128:	2308      	movs	r3, #8
   1612a:	469c      	mov	ip, r3
   1612c:	44bc      	add	ip, r7
   1612e:	4460      	add	r0, ip
   16130:	9604      	str	r6, [sp, #16]
   16132:	9503      	str	r5, [sp, #12]
   16134:	4643      	mov	r3, r8
   16136:	9302      	str	r3, [sp, #8]
   16138:	9101      	str	r1, [sp, #4]
   1613a:	9200      	str	r2, [sp, #0]
   1613c:	683b      	ldr	r3, [r7, #0]
   1613e:	687a      	ldr	r2, [r7, #4]
   16140:	0021      	movs	r1, r4
   16142:	4c8a      	ldr	r4, [pc, #552]	; (1636c <processOnSMS+0x1380>)
   16144:	47a0      	blx	r4
			response_sms_processed_cmd = true;
   16146:	4b7f      	ldr	r3, [pc, #508]	; (16344 <processOnSMS+0x1358>)
   16148:	2298      	movs	r2, #152	; 0x98
   1614a:	0052      	lsls	r2, r2, #1
   1614c:	4694      	mov	ip, r2
   1614e:	2208      	movs	r2, #8
   16150:	4690      	mov	r8, r2
   16152:	44b8      	add	r8, r7
   16154:	44c4      	add	ip, r8
   16156:	4463      	add	r3, ip
   16158:	2201      	movs	r2, #1
   1615a:	701a      	strb	r2, [r3, #0]
			incomingSMSProcessed=true;
   1615c:	2330      	movs	r3, #48	; 0x30
   1615e:	33ff      	adds	r3, #255	; 0xff
   16160:	2208      	movs	r2, #8
   16162:	4694      	mov	ip, r2
   16164:	44bc      	add	ip, r7
   16166:	4463      	add	r3, ip
   16168:	2201      	movs	r2, #1
   1616a:	701a      	strb	r2, [r3, #0]
   1616c:	f001 f81c 	bl	171a8 <processOnSMS+0x21bc>
		}

	}
	else if (StringstartsWith(received_command,"OVFON"))
   16170:	4a7f      	ldr	r2, [pc, #508]	; (16370 <processOnSMS+0x1384>)
   16172:	68fb      	ldr	r3, [r7, #12]
   16174:	0011      	movs	r1, r2
   16176:	0018      	movs	r0, r3
   16178:	4b6d      	ldr	r3, [pc, #436]	; (16330 <processOnSMS+0x1344>)
   1617a:	4798      	blx	r3
   1617c:	1e03      	subs	r3, r0, #0
   1617e:	d032      	beq.n	161e6 <processOnSMS+0x11fa>
	{
		if (factory_settings_parameter_struct.ENABLE_WATER && !(factory_settings_parameter_struct.ENABLE_M2M))
   16180:	4b76      	ldr	r3, [pc, #472]	; (1635c <processOnSMS+0x1370>)
   16182:	795b      	ldrb	r3, [r3, #5]
   16184:	2b00      	cmp	r3, #0
   16186:	d101      	bne.n	1618c <processOnSMS+0x11a0>
   16188:	f001 f80e 	bl	171a8 <processOnSMS+0x21bc>
   1618c:	4b73      	ldr	r3, [pc, #460]	; (1635c <processOnSMS+0x1370>)
   1618e:	78db      	ldrb	r3, [r3, #3]
   16190:	2b00      	cmp	r3, #0
   16192:	d001      	beq.n	16198 <processOnSMS+0x11ac>
   16194:	f001 f808 	bl	171a8 <processOnSMS+0x21bc>
		{
			savePreventOverFlowSettings(true);  //set DND to False in EEPROM
   16198:	2001      	movs	r0, #1
   1619a:	4b76      	ldr	r3, [pc, #472]	; (16374 <processOnSMS+0x1388>)
   1619c:	4798      	blx	r3
			
			incomingSMSProcessed=true;
   1619e:	2330      	movs	r3, #48	; 0x30
   161a0:	33ff      	adds	r3, #255	; 0xff
   161a2:	2208      	movs	r2, #8
   161a4:	4694      	mov	ip, r2
   161a6:	44bc      	add	ip, r7
   161a8:	4463      	add	r3, ip
   161aa:	2201      	movs	r2, #1
   161ac:	701a      	strb	r2, [r3, #0]
			
			if(response_sms_processed_cmd == true)
   161ae:	4b65      	ldr	r3, [pc, #404]	; (16344 <processOnSMS+0x1358>)
   161b0:	2298      	movs	r2, #152	; 0x98
   161b2:	0052      	lsls	r2, r2, #1
   161b4:	4694      	mov	ip, r2
   161b6:	2208      	movs	r2, #8
   161b8:	4690      	mov	r8, r2
   161ba:	44b8      	add	r8, r7
   161bc:	44c4      	add	ip, r8
   161be:	4463      	add	r3, ip
   161c0:	781b      	ldrb	r3, [r3, #0]
   161c2:	2b00      	cmp	r3, #0
   161c4:	d101      	bne.n	161ca <processOnSMS+0x11de>
   161c6:	f000 ffef 	bl	171a8 <processOnSMS+0x21bc>
			{
				strcpy(resep_msg,"PREVENT OVERFLOW SETTING ON");
   161ca:	230c      	movs	r3, #12
   161cc:	2208      	movs	r2, #8
   161ce:	4694      	mov	ip, r2
   161d0:	44bc      	add	ip, r7
   161d2:	4463      	add	r3, ip
   161d4:	4a68      	ldr	r2, [pc, #416]	; (16378 <processOnSMS+0x138c>)
   161d6:	ca13      	ldmia	r2!, {r0, r1, r4}
   161d8:	c313      	stmia	r3!, {r0, r1, r4}
   161da:	ca13      	ldmia	r2!, {r0, r1, r4}
   161dc:	c313      	stmia	r3!, {r0, r1, r4}
   161de:	6812      	ldr	r2, [r2, #0]
   161e0:	601a      	str	r2, [r3, #0]
   161e2:	f000 ffe1 	bl	171a8 <processOnSMS+0x21bc>
			}
		}
	}
	else if (StringstartsWith(received_command,"OVFOFF"))
   161e6:	4a65      	ldr	r2, [pc, #404]	; (1637c <processOnSMS+0x1390>)
   161e8:	68fb      	ldr	r3, [r7, #12]
   161ea:	0011      	movs	r1, r2
   161ec:	0018      	movs	r0, r3
   161ee:	4b50      	ldr	r3, [pc, #320]	; (16330 <processOnSMS+0x1344>)
   161f0:	4798      	blx	r3
   161f2:	1e03      	subs	r3, r0, #0
   161f4:	d034      	beq.n	16260 <processOnSMS+0x1274>
	{
		if (factory_settings_parameter_struct.ENABLE_WATER && !(factory_settings_parameter_struct.ENABLE_M2M))
   161f6:	4b59      	ldr	r3, [pc, #356]	; (1635c <processOnSMS+0x1370>)
   161f8:	795b      	ldrb	r3, [r3, #5]
   161fa:	2b00      	cmp	r3, #0
   161fc:	d101      	bne.n	16202 <processOnSMS+0x1216>
   161fe:	f000 ffd3 	bl	171a8 <processOnSMS+0x21bc>
   16202:	4b56      	ldr	r3, [pc, #344]	; (1635c <processOnSMS+0x1370>)
   16204:	78db      	ldrb	r3, [r3, #3]
   16206:	2b00      	cmp	r3, #0
   16208:	d001      	beq.n	1620e <processOnSMS+0x1222>
   1620a:	f000 ffcd 	bl	171a8 <processOnSMS+0x21bc>
		{
			savePreventOverFlowSettings(false);  //set DND to False in EEPROM
   1620e:	2000      	movs	r0, #0
   16210:	4b58      	ldr	r3, [pc, #352]	; (16374 <processOnSMS+0x1388>)
   16212:	4798      	blx	r3

			incomingSMSProcessed=true;
   16214:	2330      	movs	r3, #48	; 0x30
   16216:	33ff      	adds	r3, #255	; 0xff
   16218:	2208      	movs	r2, #8
   1621a:	4694      	mov	ip, r2
   1621c:	44bc      	add	ip, r7
   1621e:	4463      	add	r3, ip
   16220:	2201      	movs	r2, #1
   16222:	701a      	strb	r2, [r3, #0]

			if(response_sms_processed_cmd == true)
   16224:	4b47      	ldr	r3, [pc, #284]	; (16344 <processOnSMS+0x1358>)
   16226:	2298      	movs	r2, #152	; 0x98
   16228:	0052      	lsls	r2, r2, #1
   1622a:	4694      	mov	ip, r2
   1622c:	2208      	movs	r2, #8
   1622e:	4690      	mov	r8, r2
   16230:	44b8      	add	r8, r7
   16232:	44c4      	add	ip, r8
   16234:	4463      	add	r3, ip
   16236:	781b      	ldrb	r3, [r3, #0]
   16238:	2b00      	cmp	r3, #0
   1623a:	d101      	bne.n	16240 <processOnSMS+0x1254>
   1623c:	f000 ffb4 	bl	171a8 <processOnSMS+0x21bc>
			{
				strcpy(resep_msg,"PREVENT OVERFLOW SETTING OFF");
   16240:	230c      	movs	r3, #12
   16242:	2208      	movs	r2, #8
   16244:	4694      	mov	ip, r2
   16246:	44bc      	add	ip, r7
   16248:	4463      	add	r3, ip
   1624a:	4a4d      	ldr	r2, [pc, #308]	; (16380 <processOnSMS+0x1394>)
   1624c:	ca13      	ldmia	r2!, {r0, r1, r4}
   1624e:	c313      	stmia	r3!, {r0, r1, r4}
   16250:	ca13      	ldmia	r2!, {r0, r1, r4}
   16252:	c313      	stmia	r3!, {r0, r1, r4}
   16254:	6811      	ldr	r1, [r2, #0]
   16256:	6019      	str	r1, [r3, #0]
   16258:	7912      	ldrb	r2, [r2, #4]
   1625a:	711a      	strb	r2, [r3, #4]
   1625c:	f000 ffa4 	bl	171a8 <processOnSMS+0x21bc>
			}
		}
	}
	else if (StringstartsWith(received_command,"M2MON"))
   16260:	4a48      	ldr	r2, [pc, #288]	; (16384 <processOnSMS+0x1398>)
   16262:	68fb      	ldr	r3, [r7, #12]
   16264:	0011      	movs	r1, r2
   16266:	0018      	movs	r0, r3
   16268:	4b31      	ldr	r3, [pc, #196]	; (16330 <processOnSMS+0x1344>)
   1626a:	4798      	blx	r3
   1626c:	1e03      	subs	r3, r0, #0
   1626e:	d100      	bne.n	16272 <processOnSMS+0x1286>
   16270:	e092      	b.n	16398 <processOnSMS+0x13ac>
	{
		if (factory_settings_parameter_struct.ENABLE_M2M)
   16272:	4b3a      	ldr	r3, [pc, #232]	; (1635c <processOnSMS+0x1370>)
   16274:	78db      	ldrb	r3, [r3, #3]
   16276:	2b00      	cmp	r3, #0
   16278:	d101      	bne.n	1627e <processOnSMS+0x1292>
   1627a:	f000 ff95 	bl	171a8 <processOnSMS+0x21bc>
		{
			incomingSMSProcessed=true;
   1627e:	2330      	movs	r3, #48	; 0x30
   16280:	33ff      	adds	r3, #255	; 0xff
   16282:	2208      	movs	r2, #8
   16284:	4694      	mov	ip, r2
   16286:	44bc      	add	ip, r7
   16288:	4463      	add	r3, ip
   1628a:	2201      	movs	r2, #1
   1628c:	701a      	strb	r2, [r3, #0]
			
			if(m2m_Numbers_struct.m2mRemotePresent)
   1628e:	4b3e      	ldr	r3, [pc, #248]	; (16388 <processOnSMS+0x139c>)
   16290:	78db      	ldrb	r3, [r3, #3]
   16292:	2b00      	cmp	r3, #0
   16294:	d02f      	beq.n	162f6 <processOnSMS+0x130a>
			{
				if(!m2m_Numbers_struct.m2mRemoteVerified)
   16296:	4b3c      	ldr	r3, [pc, #240]	; (16388 <processOnSMS+0x139c>)
   16298:	791b      	ldrb	r3, [r3, #4]
   1629a:	2b00      	cmp	r3, #0
   1629c:	d10e      	bne.n	162bc <processOnSMS+0x12d0>
				{
					response_sms_processed_cmd = false;
   1629e:	4b29      	ldr	r3, [pc, #164]	; (16344 <processOnSMS+0x1358>)
   162a0:	2298      	movs	r2, #152	; 0x98
   162a2:	0052      	lsls	r2, r2, #1
   162a4:	4694      	mov	ip, r2
   162a6:	2208      	movs	r2, #8
   162a8:	4690      	mov	r8, r2
   162aa:	44b8      	add	r8, r7
   162ac:	44c4      	add	ip, r8
   162ae:	4463      	add	r3, ip
   162b0:	2200      	movs	r2, #0
   162b2:	701a      	strb	r2, [r3, #0]
					verifyRemoteNumber();
   162b4:	4b35      	ldr	r3, [pc, #212]	; (1638c <processOnSMS+0x13a0>)
   162b6:	4798      	blx	r3
   162b8:	f000 ff76 	bl	171a8 <processOnSMS+0x21bc>
				}
				else
				{
					response_sms_processed_cmd = true;
   162bc:	4b21      	ldr	r3, [pc, #132]	; (16344 <processOnSMS+0x1358>)
   162be:	2298      	movs	r2, #152	; 0x98
   162c0:	0052      	lsls	r2, r2, #1
   162c2:	4694      	mov	ip, r2
   162c4:	2208      	movs	r2, #8
   162c6:	4690      	mov	r8, r2
   162c8:	44b8      	add	r8, r7
   162ca:	44c4      	add	ip, r8
   162cc:	4463      	add	r3, ip
   162ce:	2201      	movs	r2, #1
   162d0:	701a      	strb	r2, [r3, #0]
					strcpy(resep_msg,"M2M Turned On, Remote Number Already Verified");
   162d2:	230c      	movs	r3, #12
   162d4:	2208      	movs	r2, #8
   162d6:	4694      	mov	ip, r2
   162d8:	44bc      	add	ip, r7
   162da:	4463      	add	r3, ip
   162dc:	4a2c      	ldr	r2, [pc, #176]	; (16390 <processOnSMS+0x13a4>)
   162de:	ca13      	ldmia	r2!, {r0, r1, r4}
   162e0:	c313      	stmia	r3!, {r0, r1, r4}
   162e2:	ca13      	ldmia	r2!, {r0, r1, r4}
   162e4:	c313      	stmia	r3!, {r0, r1, r4}
   162e6:	ca13      	ldmia	r2!, {r0, r1, r4}
   162e8:	c313      	stmia	r3!, {r0, r1, r4}
   162ea:	ca03      	ldmia	r2!, {r0, r1}
   162ec:	c303      	stmia	r3!, {r0, r1}
   162ee:	8812      	ldrh	r2, [r2, #0]
   162f0:	801a      	strh	r2, [r3, #0]
   162f2:	f000 ff59 	bl	171a8 <processOnSMS+0x21bc>
				}
			}
			else
			{
				response_sms_processed_cmd=true;
   162f6:	4b13      	ldr	r3, [pc, #76]	; (16344 <processOnSMS+0x1358>)
   162f8:	2298      	movs	r2, #152	; 0x98
   162fa:	0052      	lsls	r2, r2, #1
   162fc:	4694      	mov	ip, r2
   162fe:	2208      	movs	r2, #8
   16300:	4690      	mov	r8, r2
   16302:	44b8      	add	r8, r7
   16304:	44c4      	add	ip, r8
   16306:	4463      	add	r3, ip
   16308:	2201      	movs	r2, #1
   1630a:	701a      	strb	r2, [r3, #0]
				strcpy(resep_msg,"Error: M2M Remote Number Not Present");
   1630c:	230c      	movs	r3, #12
   1630e:	2208      	movs	r2, #8
   16310:	4694      	mov	ip, r2
   16312:	44bc      	add	ip, r7
   16314:	4463      	add	r3, ip
   16316:	4a1f      	ldr	r2, [pc, #124]	; (16394 <processOnSMS+0x13a8>)
   16318:	ca13      	ldmia	r2!, {r0, r1, r4}
   1631a:	c313      	stmia	r3!, {r0, r1, r4}
   1631c:	ca13      	ldmia	r2!, {r0, r1, r4}
   1631e:	c313      	stmia	r3!, {r0, r1, r4}
   16320:	ca13      	ldmia	r2!, {r0, r1, r4}
   16322:	c313      	stmia	r3!, {r0, r1, r4}
   16324:	7812      	ldrb	r2, [r2, #0]
   16326:	701a      	strb	r2, [r3, #0]
   16328:	f000 ff3e 	bl	171a8 <processOnSMS+0x21bc>
   1632c:	0002a048 	.word	0x0002a048
   16330:	00014201 	.word	0x00014201
   16334:	00028de7 	.word	0x00028de7
   16338:	00028b33 	.word	0x00028b33
   1633c:	00028a3d 	.word	0x00028a3d
   16340:	00011501 	.word	0x00011501
   16344:	fffffed2 	.word	0xfffffed2
   16348:	0002a04c 	.word	0x0002a04c
   1634c:	0002a058 	.word	0x0002a058
   16350:	0001156d 	.word	0x0001156d
   16354:	0002a060 	.word	0x0002a060
   16358:	0002a06c 	.word	0x0002a06c
   1635c:	2000082c 	.word	0x2000082c
   16360:	200008e8 	.word	0x200008e8
   16364:	20000854 	.word	0x20000854
   16368:	0002a074 	.word	0x0002a074
   1636c:	00028d5d 	.word	0x00028d5d
   16370:	0002a098 	.word	0x0002a098
   16374:	000114b5 	.word	0x000114b5
   16378:	0002a0a0 	.word	0x0002a0a0
   1637c:	0002a0bc 	.word	0x0002a0bc
   16380:	0002a0c4 	.word	0x0002a0c4
   16384:	0002a0e4 	.word	0x0002a0e4
   16388:	20000754 	.word	0x20000754
   1638c:	00017495 	.word	0x00017495
   16390:	0002a0ec 	.word	0x0002a0ec
   16394:	0002a11c 	.word	0x0002a11c
			}
		}
	}
	else if (StringstartsWith(received_command,"M2MOFF"))
   16398:	4ab3      	ldr	r2, [pc, #716]	; (16668 <processOnSMS+0x167c>)
   1639a:	68fb      	ldr	r3, [r7, #12]
   1639c:	0011      	movs	r1, r2
   1639e:	0018      	movs	r0, r3
   163a0:	4bb2      	ldr	r3, [pc, #712]	; (1666c <processOnSMS+0x1680>)
   163a2:	4798      	blx	r3
   163a4:	1e03      	subs	r3, r0, #0
   163a6:	d02a      	beq.n	163fe <processOnSMS+0x1412>
	{
		if (factory_settings_parameter_struct.ENABLE_M2M)
   163a8:	4bb1      	ldr	r3, [pc, #708]	; (16670 <processOnSMS+0x1684>)
   163aa:	78db      	ldrb	r3, [r3, #3]
   163ac:	2b00      	cmp	r3, #0
   163ae:	d101      	bne.n	163b4 <processOnSMS+0x13c8>
   163b0:	f000 fefa 	bl	171a8 <processOnSMS+0x21bc>
		{
			incomingSMSProcessed=true;
   163b4:	2330      	movs	r3, #48	; 0x30
   163b6:	33ff      	adds	r3, #255	; 0xff
   163b8:	2208      	movs	r2, #8
   163ba:	4694      	mov	ip, r2
   163bc:	44bc      	add	ip, r7
   163be:	4463      	add	r3, ip
   163c0:	2201      	movs	r2, #1
   163c2:	701a      	strb	r2, [r3, #0]
			
			saveM2MSettings(false);
   163c4:	2000      	movs	r0, #0
   163c6:	4bab      	ldr	r3, [pc, #684]	; (16674 <processOnSMS+0x1688>)
   163c8:	4798      	blx	r3
			if(response_sms_processed_cmd == true)
   163ca:	4bab      	ldr	r3, [pc, #684]	; (16678 <processOnSMS+0x168c>)
   163cc:	2298      	movs	r2, #152	; 0x98
   163ce:	0052      	lsls	r2, r2, #1
   163d0:	4694      	mov	ip, r2
   163d2:	2208      	movs	r2, #8
   163d4:	4690      	mov	r8, r2
   163d6:	44b8      	add	r8, r7
   163d8:	44c4      	add	ip, r8
   163da:	4463      	add	r3, ip
   163dc:	781b      	ldrb	r3, [r3, #0]
   163de:	2b00      	cmp	r3, #0
   163e0:	d101      	bne.n	163e6 <processOnSMS+0x13fa>
   163e2:	f000 fee1 	bl	171a8 <processOnSMS+0x21bc>
			{
				strcpy(resep_msg,"M2M SETTING OFF");
   163e6:	230c      	movs	r3, #12
   163e8:	2208      	movs	r2, #8
   163ea:	4694      	mov	ip, r2
   163ec:	44bc      	add	ip, r7
   163ee:	4463      	add	r3, ip
   163f0:	4aa2      	ldr	r2, [pc, #648]	; (1667c <processOnSMS+0x1690>)
   163f2:	ca13      	ldmia	r2!, {r0, r1, r4}
   163f4:	c313      	stmia	r3!, {r0, r1, r4}
   163f6:	6812      	ldr	r2, [r2, #0]
   163f8:	601a      	str	r2, [r3, #0]
   163fa:	f000 fed5 	bl	171a8 <processOnSMS+0x21bc>
			}
		}
	}
	else if (StringstartsWith(received_command,"STATUS"))
   163fe:	4aa0      	ldr	r2, [pc, #640]	; (16680 <processOnSMS+0x1694>)
   16400:	68fb      	ldr	r3, [r7, #12]
   16402:	0011      	movs	r1, r2
   16404:	0018      	movs	r0, r3
   16406:	4b99      	ldr	r3, [pc, #612]	; (1666c <processOnSMS+0x1680>)
   16408:	4798      	blx	r3
   1640a:	1e03      	subs	r3, r0, #0
   1640c:	d01c      	beq.n	16448 <processOnSMS+0x145c>
	{
		incomingSMSProcessed=true;
   1640e:	2330      	movs	r3, #48	; 0x30
   16410:	33ff      	adds	r3, #255	; 0xff
   16412:	2208      	movs	r2, #8
   16414:	4694      	mov	ip, r2
   16416:	44bc      	add	ip, r7
   16418:	4463      	add	r3, ip
   1641a:	2201      	movs	r2, #1
   1641c:	701a      	strb	r2, [r3, #0]
		response_sms_processed_cmd=true;
   1641e:	4b96      	ldr	r3, [pc, #600]	; (16678 <processOnSMS+0x168c>)
   16420:	2298      	movs	r2, #152	; 0x98
   16422:	0052      	lsls	r2, r2, #1
   16424:	4694      	mov	ip, r2
   16426:	2208      	movs	r2, #8
   16428:	4690      	mov	r8, r2
   1642a:	44b8      	add	r8, r7
   1642c:	44c4      	add	ip, r8
   1642e:	4463      	add	r3, ip
   16430:	2201      	movs	r2, #1
   16432:	701a      	strb	r2, [r3, #0]
		
		buildStatusMessage(resep_msg);
   16434:	230c      	movs	r3, #12
   16436:	2208      	movs	r2, #8
   16438:	4694      	mov	ip, r2
   1643a:	44bc      	add	ip, r7
   1643c:	4463      	add	r3, ip
   1643e:	0018      	movs	r0, r3
   16440:	4b90      	ldr	r3, [pc, #576]	; (16684 <processOnSMS+0x1698>)
   16442:	4798      	blx	r3
   16444:	f000 feb0 	bl	171a8 <processOnSMS+0x21bc>
	}
	else if (StringstartsWith(received_command,"AMON") && (admin || alterNumber))
   16448:	4a8f      	ldr	r2, [pc, #572]	; (16688 <processOnSMS+0x169c>)
   1644a:	68fb      	ldr	r3, [r7, #12]
   1644c:	0011      	movs	r1, r2
   1644e:	0018      	movs	r0, r3
   16450:	4b86      	ldr	r3, [pc, #536]	; (1666c <processOnSMS+0x1680>)
   16452:	4798      	blx	r3
   16454:	1e03      	subs	r3, r0, #0
   16456:	d05e      	beq.n	16516 <processOnSMS+0x152a>
   16458:	4b8c      	ldr	r3, [pc, #560]	; (1668c <processOnSMS+0x16a0>)
   1645a:	2298      	movs	r2, #152	; 0x98
   1645c:	0052      	lsls	r2, r2, #1
   1645e:	4694      	mov	ip, r2
   16460:	2208      	movs	r2, #8
   16462:	4690      	mov	r8, r2
   16464:	44b8      	add	r8, r7
   16466:	44c4      	add	ip, r8
   16468:	4463      	add	r3, ip
   1646a:	781b      	ldrb	r3, [r3, #0]
   1646c:	2b00      	cmp	r3, #0
   1646e:	d10b      	bne.n	16488 <processOnSMS+0x149c>
   16470:	4b87      	ldr	r3, [pc, #540]	; (16690 <processOnSMS+0x16a4>)
   16472:	2298      	movs	r2, #152	; 0x98
   16474:	0052      	lsls	r2, r2, #1
   16476:	4694      	mov	ip, r2
   16478:	2208      	movs	r2, #8
   1647a:	4690      	mov	r8, r2
   1647c:	44b8      	add	r8, r7
   1647e:	44c4      	add	ip, r8
   16480:	4463      	add	r3, ip
   16482:	781b      	ldrb	r3, [r3, #0]
   16484:	2b00      	cmp	r3, #0
   16486:	d046      	beq.n	16516 <processOnSMS+0x152a>
	{
		incomingSMSProcessed=true;
   16488:	2330      	movs	r3, #48	; 0x30
   1648a:	33ff      	adds	r3, #255	; 0xff
   1648c:	2208      	movs	r2, #8
   1648e:	4694      	mov	ip, r2
   16490:	44bc      	add	ip, r7
   16492:	4463      	add	r3, ip
   16494:	2201      	movs	r2, #1
   16496:	701a      	strb	r2, [r3, #0]
		
		if (alternateNumber_struct.alterNumberPresent)
   16498:	4b7e      	ldr	r3, [pc, #504]	; (16694 <processOnSMS+0x16a8>)
   1649a:	789b      	ldrb	r3, [r3, #2]
   1649c:	2b00      	cmp	r3, #0
   1649e:	d01c      	beq.n	164da <processOnSMS+0x14ee>
		{
			saveAlterNumberSetting(true);
   164a0:	2001      	movs	r0, #1
   164a2:	4b7d      	ldr	r3, [pc, #500]	; (16698 <processOnSMS+0x16ac>)
   164a4:	4798      	blx	r3
			if(response_sms_processed_cmd == true)
   164a6:	4b74      	ldr	r3, [pc, #464]	; (16678 <processOnSMS+0x168c>)
   164a8:	2298      	movs	r2, #152	; 0x98
   164aa:	0052      	lsls	r2, r2, #1
   164ac:	4694      	mov	ip, r2
   164ae:	2208      	movs	r2, #8
   164b0:	4690      	mov	r8, r2
   164b2:	44b8      	add	r8, r7
   164b4:	44c4      	add	ip, r8
   164b6:	4463      	add	r3, ip
   164b8:	781b      	ldrb	r3, [r3, #0]
   164ba:	2b00      	cmp	r3, #0
   164bc:	d101      	bne.n	164c2 <processOnSMS+0x14d6>
   164be:	f000 fe72 	bl	171a6 <processOnSMS+0x21ba>
			{
				strcpy(resep_msg,"ALTERNATE NUMBER ON");
   164c2:	230c      	movs	r3, #12
   164c4:	2208      	movs	r2, #8
   164c6:	4694      	mov	ip, r2
   164c8:	44bc      	add	ip, r7
   164ca:	4463      	add	r3, ip
   164cc:	4a73      	ldr	r2, [pc, #460]	; (1669c <processOnSMS+0x16b0>)
   164ce:	ca13      	ldmia	r2!, {r0, r1, r4}
   164d0:	c313      	stmia	r3!, {r0, r1, r4}
   164d2:	ca03      	ldmia	r2!, {r0, r1}
   164d4:	c303      	stmia	r3!, {r0, r1}
		if (alternateNumber_struct.alterNumberPresent)
   164d6:	f000 fe66 	bl	171a6 <processOnSMS+0x21ba>
			}
		}
		else
		{
			if(response_sms_processed_cmd == true)
   164da:	4b67      	ldr	r3, [pc, #412]	; (16678 <processOnSMS+0x168c>)
   164dc:	2298      	movs	r2, #152	; 0x98
   164de:	0052      	lsls	r2, r2, #1
   164e0:	4694      	mov	ip, r2
   164e2:	2208      	movs	r2, #8
   164e4:	4690      	mov	r8, r2
   164e6:	44b8      	add	r8, r7
   164e8:	44c4      	add	ip, r8
   164ea:	4463      	add	r3, ip
   164ec:	781b      	ldrb	r3, [r3, #0]
   164ee:	2b00      	cmp	r3, #0
   164f0:	d101      	bne.n	164f6 <processOnSMS+0x150a>
   164f2:	f000 fe58 	bl	171a6 <processOnSMS+0x21ba>
			{
				strcpy(resep_msg,"ALTERNATE NUMBER NOT PRESENT");
   164f6:	230c      	movs	r3, #12
   164f8:	2208      	movs	r2, #8
   164fa:	4694      	mov	ip, r2
   164fc:	44bc      	add	ip, r7
   164fe:	4463      	add	r3, ip
   16500:	4a67      	ldr	r2, [pc, #412]	; (166a0 <processOnSMS+0x16b4>)
   16502:	ca13      	ldmia	r2!, {r0, r1, r4}
   16504:	c313      	stmia	r3!, {r0, r1, r4}
   16506:	ca13      	ldmia	r2!, {r0, r1, r4}
   16508:	c313      	stmia	r3!, {r0, r1, r4}
   1650a:	6811      	ldr	r1, [r2, #0]
   1650c:	6019      	str	r1, [r3, #0]
   1650e:	7912      	ldrb	r2, [r2, #4]
   16510:	711a      	strb	r2, [r3, #4]
		if (alternateNumber_struct.alterNumberPresent)
   16512:	f000 fe48 	bl	171a6 <processOnSMS+0x21ba>
			}
		}
	}
	else if (StringstartsWith(received_command,"AMOFF"))
   16516:	4a63      	ldr	r2, [pc, #396]	; (166a4 <processOnSMS+0x16b8>)
   16518:	68fb      	ldr	r3, [r7, #12]
   1651a:	0011      	movs	r1, r2
   1651c:	0018      	movs	r0, r3
   1651e:	4b53      	ldr	r3, [pc, #332]	; (1666c <processOnSMS+0x1680>)
   16520:	4798      	blx	r3
   16522:	1e03      	subs	r3, r0, #0
   16524:	d026      	beq.n	16574 <processOnSMS+0x1588>
	{
		saveAlterNumberSetting(false);
   16526:	2000      	movs	r0, #0
   16528:	4b5b      	ldr	r3, [pc, #364]	; (16698 <processOnSMS+0x16ac>)
   1652a:	4798      	blx	r3
		incomingSMSProcessed=true;
   1652c:	2330      	movs	r3, #48	; 0x30
   1652e:	33ff      	adds	r3, #255	; 0xff
   16530:	2208      	movs	r2, #8
   16532:	4694      	mov	ip, r2
   16534:	44bc      	add	ip, r7
   16536:	4463      	add	r3, ip
   16538:	2201      	movs	r2, #1
   1653a:	701a      	strb	r2, [r3, #0]
		
		if (response_sms_processed_cmd == true)
   1653c:	4b4e      	ldr	r3, [pc, #312]	; (16678 <processOnSMS+0x168c>)
   1653e:	2298      	movs	r2, #152	; 0x98
   16540:	0052      	lsls	r2, r2, #1
   16542:	4694      	mov	ip, r2
   16544:	2208      	movs	r2, #8
   16546:	4690      	mov	r8, r2
   16548:	44b8      	add	r8, r7
   1654a:	44c4      	add	ip, r8
   1654c:	4463      	add	r3, ip
   1654e:	781b      	ldrb	r3, [r3, #0]
   16550:	2b00      	cmp	r3, #0
   16552:	d101      	bne.n	16558 <processOnSMS+0x156c>
   16554:	f000 fe28 	bl	171a8 <processOnSMS+0x21bc>
		{
			strcpy(resep_msg,"ALTERNATE MOBILE NUMBER OFF");
   16558:	230c      	movs	r3, #12
   1655a:	2208      	movs	r2, #8
   1655c:	4694      	mov	ip, r2
   1655e:	44bc      	add	ip, r7
   16560:	4463      	add	r3, ip
   16562:	4a51      	ldr	r2, [pc, #324]	; (166a8 <processOnSMS+0x16bc>)
   16564:	ca13      	ldmia	r2!, {r0, r1, r4}
   16566:	c313      	stmia	r3!, {r0, r1, r4}
   16568:	ca13      	ldmia	r2!, {r0, r1, r4}
   1656a:	c313      	stmia	r3!, {r0, r1, r4}
   1656c:	6812      	ldr	r2, [r2, #0]
   1656e:	601a      	str	r2, [r3, #0]
   16570:	f000 fe1a 	bl	171a8 <processOnSMS+0x21bc>
		}
	}
	else if (StringstartsWith(received_command,"NCOFF"))
   16574:	4a4d      	ldr	r2, [pc, #308]	; (166ac <processOnSMS+0x16c0>)
   16576:	68fb      	ldr	r3, [r7, #12]
   16578:	0011      	movs	r1, r2
   1657a:	0018      	movs	r0, r3
   1657c:	4b3b      	ldr	r3, [pc, #236]	; (1666c <processOnSMS+0x1680>)
   1657e:	4798      	blx	r3
   16580:	1e03      	subs	r3, r0, #0
   16582:	d029      	beq.n	165d8 <processOnSMS+0x15ec>
	{
		saveNoCallSettings(false,0,0,0,0);
   16584:	2300      	movs	r3, #0
   16586:	9300      	str	r3, [sp, #0]
   16588:	2300      	movs	r3, #0
   1658a:	2200      	movs	r2, #0
   1658c:	2100      	movs	r1, #0
   1658e:	2000      	movs	r0, #0
   16590:	4c47      	ldr	r4, [pc, #284]	; (166b0 <processOnSMS+0x16c4>)
   16592:	47a0      	blx	r4
		incomingSMSProcessed=true;
   16594:	2330      	movs	r3, #48	; 0x30
   16596:	33ff      	adds	r3, #255	; 0xff
   16598:	2208      	movs	r2, #8
   1659a:	4694      	mov	ip, r2
   1659c:	44bc      	add	ip, r7
   1659e:	4463      	add	r3, ip
   165a0:	2201      	movs	r2, #1
   165a2:	701a      	strb	r2, [r3, #0]

		if (response_sms_processed_cmd == true)
   165a4:	4b34      	ldr	r3, [pc, #208]	; (16678 <processOnSMS+0x168c>)
   165a6:	2298      	movs	r2, #152	; 0x98
   165a8:	0052      	lsls	r2, r2, #1
   165aa:	4694      	mov	ip, r2
   165ac:	2208      	movs	r2, #8
   165ae:	4690      	mov	r8, r2
   165b0:	44b8      	add	r8, r7
   165b2:	44c4      	add	ip, r8
   165b4:	4463      	add	r3, ip
   165b6:	781b      	ldrb	r3, [r3, #0]
   165b8:	2b00      	cmp	r3, #0
   165ba:	d101      	bne.n	165c0 <processOnSMS+0x15d4>
   165bc:	f000 fdf4 	bl	171a8 <processOnSMS+0x21bc>
		{
			strcpy(resep_msg,"NO CALL SETTING OFF");
   165c0:	230c      	movs	r3, #12
   165c2:	2208      	movs	r2, #8
   165c4:	4694      	mov	ip, r2
   165c6:	44bc      	add	ip, r7
   165c8:	4463      	add	r3, ip
   165ca:	4a3a      	ldr	r2, [pc, #232]	; (166b4 <processOnSMS+0x16c8>)
   165cc:	ca13      	ldmia	r2!, {r0, r1, r4}
   165ce:	c313      	stmia	r3!, {r0, r1, r4}
   165d0:	ca03      	ldmia	r2!, {r0, r1}
   165d2:	c303      	stmia	r3!, {r0, r1}
   165d4:	f000 fde8 	bl	171a8 <processOnSMS+0x21bc>
		}
	}
	else if (StringstartsWith(received_command,"GETTIME"))
   165d8:	4a37      	ldr	r2, [pc, #220]	; (166b8 <processOnSMS+0x16cc>)
   165da:	68fb      	ldr	r3, [r7, #12]
   165dc:	0011      	movs	r1, r2
   165de:	0018      	movs	r0, r3
   165e0:	4b22      	ldr	r3, [pc, #136]	; (1666c <processOnSMS+0x1680>)
   165e2:	4798      	blx	r3
   165e4:	1e03      	subs	r3, r0, #0
   165e6:	d073      	beq.n	166d0 <processOnSMS+0x16e4>
	{
		uint8_t globalHours,globalMinutes;
		getSystemTime(&globalHours,&globalMinutes);
   165e8:	230a      	movs	r3, #10
   165ea:	2208      	movs	r2, #8
   165ec:	18ba      	adds	r2, r7, r2
   165ee:	18d2      	adds	r2, r2, r3
   165f0:	230b      	movs	r3, #11
   165f2:	2108      	movs	r1, #8
   165f4:	468c      	mov	ip, r1
   165f6:	44bc      	add	ip, r7
   165f8:	4463      	add	r3, ip
   165fa:	0011      	movs	r1, r2
   165fc:	0018      	movs	r0, r3
   165fe:	4b2f      	ldr	r3, [pc, #188]	; (166bc <processOnSMS+0x16d0>)
   16600:	4798      	blx	r3
		
		sprintf(resep_msg,"TIME : %u:%u",
   16602:	4b2f      	ldr	r3, [pc, #188]	; (166c0 <processOnSMS+0x16d4>)
   16604:	2298      	movs	r2, #152	; 0x98
   16606:	0052      	lsls	r2, r2, #1
   16608:	4694      	mov	ip, r2
   1660a:	2208      	movs	r2, #8
   1660c:	4690      	mov	r8, r2
   1660e:	44b8      	add	r8, r7
   16610:	44c4      	add	ip, r8
   16612:	4463      	add	r3, ip
   16614:	781b      	ldrb	r3, [r3, #0]
   16616:	001a      	movs	r2, r3
   16618:	4b2a      	ldr	r3, [pc, #168]	; (166c4 <processOnSMS+0x16d8>)
   1661a:	2198      	movs	r1, #152	; 0x98
   1661c:	0049      	lsls	r1, r1, #1
   1661e:	468c      	mov	ip, r1
   16620:	2108      	movs	r1, #8
   16622:	4688      	mov	r8, r1
   16624:	44b8      	add	r8, r7
   16626:	44c4      	add	ip, r8
   16628:	4463      	add	r3, ip
   1662a:	781b      	ldrb	r3, [r3, #0]
   1662c:	4926      	ldr	r1, [pc, #152]	; (166c8 <processOnSMS+0x16dc>)
   1662e:	200c      	movs	r0, #12
   16630:	2408      	movs	r4, #8
   16632:	46a4      	mov	ip, r4
   16634:	44bc      	add	ip, r7
   16636:	4460      	add	r0, ip
   16638:	4c24      	ldr	r4, [pc, #144]	; (166cc <processOnSMS+0x16e0>)
   1663a:	47a0      	blx	r4
		globalHours,globalMinutes);

		incomingSMSProcessed=true;
   1663c:	2330      	movs	r3, #48	; 0x30
   1663e:	33ff      	adds	r3, #255	; 0xff
   16640:	2208      	movs	r2, #8
   16642:	4694      	mov	ip, r2
   16644:	44bc      	add	ip, r7
   16646:	4463      	add	r3, ip
   16648:	2201      	movs	r2, #1
   1664a:	701a      	strb	r2, [r3, #0]

		response_sms_processed_cmd = true;
   1664c:	4b0a      	ldr	r3, [pc, #40]	; (16678 <processOnSMS+0x168c>)
   1664e:	2298      	movs	r2, #152	; 0x98
   16650:	0052      	lsls	r2, r2, #1
   16652:	4694      	mov	ip, r2
   16654:	2208      	movs	r2, #8
   16656:	4690      	mov	r8, r2
   16658:	44b8      	add	r8, r7
   1665a:	44c4      	add	ip, r8
   1665c:	4463      	add	r3, ip
   1665e:	2201      	movs	r2, #1
   16660:	701a      	strb	r2, [r3, #0]
   16662:	f000 fda1 	bl	171a8 <processOnSMS+0x21bc>
   16666:	46c0      	nop			; (mov r8, r8)
   16668:	0002a144 	.word	0x0002a144
   1666c:	00014201 	.word	0x00014201
   16670:	2000082c 	.word	0x2000082c
   16674:	00010be5 	.word	0x00010be5
   16678:	fffffed2 	.word	0xfffffed2
   1667c:	0002a14c 	.word	0x0002a14c
   16680:	0002a15c 	.word	0x0002a15c
   16684:	00017271 	.word	0x00017271
   16688:	00029dcc 	.word	0x00029dcc
   1668c:	fffffed3 	.word	0xfffffed3
   16690:	fffffed1 	.word	0xfffffed1
   16694:	2000083c 	.word	0x2000083c
   16698:	000111e9 	.word	0x000111e9
   1669c:	0002a164 	.word	0x0002a164
   166a0:	0002a178 	.word	0x0002a178
   166a4:	0002a198 	.word	0x0002a198
   166a8:	0002a1a0 	.word	0x0002a1a0
   166ac:	0002a1bc 	.word	0x0002a1bc
   166b0:	000113d9 	.word	0x000113d9
   166b4:	0002a1c4 	.word	0x0002a1c4
   166b8:	0002a1d8 	.word	0x0002a1d8
   166bc:	000176cd 	.word	0x000176cd
   166c0:	fffffedb 	.word	0xfffffedb
   166c4:	fffffeda 	.word	0xfffffeda
   166c8:	0002a1e0 	.word	0x0002a1e0
   166cc:	00028d5d 	.word	0x00028d5d
	}
	else if (StringstartsWith(received_command,"SETTIME"))
   166d0:	4ada      	ldr	r2, [pc, #872]	; (16a3c <processOnSMS+0x1a50>)
   166d2:	68fb      	ldr	r3, [r7, #12]
   166d4:	0011      	movs	r1, r2
   166d6:	0018      	movs	r0, r3
   166d8:	4bd9      	ldr	r3, [pc, #868]	; (16a40 <processOnSMS+0x1a54>)
   166da:	4798      	blx	r3
   166dc:	1e03      	subs	r3, r0, #0
   166de:	d001      	beq.n	166e4 <processOnSMS+0x16f8>
   166e0:	f000 fd62 	bl	171a8 <processOnSMS+0x21bc>
		//todo: implement
		//set internal RTC of Either MCU or SIM800 to check no call time
		

	}
	else if (StringstartsWith(received_command,"NCTIME"))
   166e4:	4ad7      	ldr	r2, [pc, #860]	; (16a44 <processOnSMS+0x1a58>)
   166e6:	68fb      	ldr	r3, [r7, #12]
   166e8:	0011      	movs	r1, r2
   166ea:	0018      	movs	r0, r3
   166ec:	4bd4      	ldr	r3, [pc, #848]	; (16a40 <processOnSMS+0x1a54>)
   166ee:	4798      	blx	r3
   166f0:	1e03      	subs	r3, r0, #0
   166f2:	d100      	bne.n	166f6 <processOnSMS+0x170a>
   166f4:	e13c      	b.n	16970 <processOnSMS+0x1984>
	{
		char *ptrclcc;
		uint8_t startHH, startMM, stopHH, stopMM;

		ptrclcc = strtok(received_command,"-");
   166f6:	4ad4      	ldr	r2, [pc, #848]	; (16a48 <processOnSMS+0x1a5c>)
   166f8:	68fb      	ldr	r3, [r7, #12]
   166fa:	0011      	movs	r1, r2
   166fc:	0018      	movs	r0, r3
   166fe:	4bd3      	ldr	r3, [pc, #844]	; (16a4c <processOnSMS+0x1a60>)
   16700:	4798      	blx	r3
   16702:	0003      	movs	r3, r0
   16704:	2288      	movs	r2, #136	; 0x88
   16706:	0052      	lsls	r2, r2, #1
   16708:	2108      	movs	r1, #8
   1670a:	468c      	mov	ip, r1
   1670c:	44bc      	add	ip, r7
   1670e:	4462      	add	r2, ip
   16710:	6013      	str	r3, [r2, #0]
		ptrclcc = strtok(NULL,":");
   16712:	4bcf      	ldr	r3, [pc, #828]	; (16a50 <processOnSMS+0x1a64>)
   16714:	0019      	movs	r1, r3
   16716:	2000      	movs	r0, #0
   16718:	4bcc      	ldr	r3, [pc, #816]	; (16a4c <processOnSMS+0x1a60>)
   1671a:	4798      	blx	r3
   1671c:	0003      	movs	r3, r0
   1671e:	2288      	movs	r2, #136	; 0x88
   16720:	0052      	lsls	r2, r2, #1
   16722:	2108      	movs	r1, #8
   16724:	468c      	mov	ip, r1
   16726:	44bc      	add	ip, r7
   16728:	4462      	add	r2, ip
   1672a:	6013      	str	r3, [r2, #0]
		startHH=atoi(*ptrclcc);
   1672c:	2388      	movs	r3, #136	; 0x88
   1672e:	005b      	lsls	r3, r3, #1
   16730:	2208      	movs	r2, #8
   16732:	4694      	mov	ip, r2
   16734:	44bc      	add	ip, r7
   16736:	4463      	add	r3, ip
   16738:	681b      	ldr	r3, [r3, #0]
   1673a:	781b      	ldrb	r3, [r3, #0]
   1673c:	0018      	movs	r0, r3
   1673e:	4bc5      	ldr	r3, [pc, #788]	; (16a54 <processOnSMS+0x1a68>)
   16740:	4798      	blx	r3
   16742:	0002      	movs	r2, r0
   16744:	2310      	movs	r3, #16
   16746:	33ff      	adds	r3, #255	; 0xff
   16748:	2108      	movs	r1, #8
   1674a:	468c      	mov	ip, r1
   1674c:	44bc      	add	ip, r7
   1674e:	4463      	add	r3, ip
   16750:	701a      	strb	r2, [r3, #0]
		ptrclcc = strtok(NULL,"-");
   16752:	4bbd      	ldr	r3, [pc, #756]	; (16a48 <processOnSMS+0x1a5c>)
   16754:	0019      	movs	r1, r3
   16756:	2000      	movs	r0, #0
   16758:	4bbc      	ldr	r3, [pc, #752]	; (16a4c <processOnSMS+0x1a60>)
   1675a:	4798      	blx	r3
   1675c:	0003      	movs	r3, r0
   1675e:	2288      	movs	r2, #136	; 0x88
   16760:	0052      	lsls	r2, r2, #1
   16762:	2108      	movs	r1, #8
   16764:	468c      	mov	ip, r1
   16766:	44bc      	add	ip, r7
   16768:	4462      	add	r2, ip
   1676a:	6013      	str	r3, [r2, #0]
		startMM=atoi(*ptrclcc);
   1676c:	2388      	movs	r3, #136	; 0x88
   1676e:	005b      	lsls	r3, r3, #1
   16770:	2208      	movs	r2, #8
   16772:	4694      	mov	ip, r2
   16774:	44bc      	add	ip, r7
   16776:	4463      	add	r3, ip
   16778:	681b      	ldr	r3, [r3, #0]
   1677a:	781b      	ldrb	r3, [r3, #0]
   1677c:	0018      	movs	r0, r3
   1677e:	4bb5      	ldr	r3, [pc, #724]	; (16a54 <processOnSMS+0x1a68>)
   16780:	4798      	blx	r3
   16782:	0002      	movs	r2, r0
   16784:	2387      	movs	r3, #135	; 0x87
   16786:	005b      	lsls	r3, r3, #1
   16788:	2108      	movs	r1, #8
   1678a:	468c      	mov	ip, r1
   1678c:	44bc      	add	ip, r7
   1678e:	4463      	add	r3, ip
   16790:	701a      	strb	r2, [r3, #0]
		ptrclcc = strtok(NULL,":");
   16792:	4baf      	ldr	r3, [pc, #700]	; (16a50 <processOnSMS+0x1a64>)
   16794:	0019      	movs	r1, r3
   16796:	2000      	movs	r0, #0
   16798:	4bac      	ldr	r3, [pc, #688]	; (16a4c <processOnSMS+0x1a60>)
   1679a:	4798      	blx	r3
   1679c:	0003      	movs	r3, r0
   1679e:	2288      	movs	r2, #136	; 0x88
   167a0:	0052      	lsls	r2, r2, #1
   167a2:	2108      	movs	r1, #8
   167a4:	468c      	mov	ip, r1
   167a6:	44bc      	add	ip, r7
   167a8:	4462      	add	r2, ip
   167aa:	6013      	str	r3, [r2, #0]
		stopHH=atoi(*ptrclcc);
   167ac:	2388      	movs	r3, #136	; 0x88
   167ae:	005b      	lsls	r3, r3, #1
   167b0:	2208      	movs	r2, #8
   167b2:	4694      	mov	ip, r2
   167b4:	44bc      	add	ip, r7
   167b6:	4463      	add	r3, ip
   167b8:	681b      	ldr	r3, [r3, #0]
   167ba:	781b      	ldrb	r3, [r3, #0]
   167bc:	0018      	movs	r0, r3
   167be:	4ba5      	ldr	r3, [pc, #660]	; (16a54 <processOnSMS+0x1a68>)
   167c0:	4798      	blx	r3
   167c2:	0002      	movs	r2, r0
   167c4:	230e      	movs	r3, #14
   167c6:	33ff      	adds	r3, #255	; 0xff
   167c8:	2108      	movs	r1, #8
   167ca:	468c      	mov	ip, r1
   167cc:	44bc      	add	ip, r7
   167ce:	4463      	add	r3, ip
   167d0:	701a      	strb	r2, [r3, #0]
		ptrclcc = strtok(NULL,":");
   167d2:	4b9f      	ldr	r3, [pc, #636]	; (16a50 <processOnSMS+0x1a64>)
   167d4:	0019      	movs	r1, r3
   167d6:	2000      	movs	r0, #0
   167d8:	4b9c      	ldr	r3, [pc, #624]	; (16a4c <processOnSMS+0x1a60>)
   167da:	4798      	blx	r3
   167dc:	0003      	movs	r3, r0
   167de:	2288      	movs	r2, #136	; 0x88
   167e0:	0052      	lsls	r2, r2, #1
   167e2:	2108      	movs	r1, #8
   167e4:	468c      	mov	ip, r1
   167e6:	44bc      	add	ip, r7
   167e8:	4462      	add	r2, ip
   167ea:	6013      	str	r3, [r2, #0]
		stopMM=atoi(*ptrclcc);
   167ec:	2388      	movs	r3, #136	; 0x88
   167ee:	005b      	lsls	r3, r3, #1
   167f0:	2208      	movs	r2, #8
   167f2:	4694      	mov	ip, r2
   167f4:	44bc      	add	ip, r7
   167f6:	4463      	add	r3, ip
   167f8:	681b      	ldr	r3, [r3, #0]
   167fa:	781b      	ldrb	r3, [r3, #0]
   167fc:	0018      	movs	r0, r3
   167fe:	4b95      	ldr	r3, [pc, #596]	; (16a54 <processOnSMS+0x1a68>)
   16800:	4798      	blx	r3
   16802:	0002      	movs	r2, r0
   16804:	2386      	movs	r3, #134	; 0x86
   16806:	005b      	lsls	r3, r3, #1
   16808:	2108      	movs	r1, #8
   1680a:	468c      	mov	ip, r1
   1680c:	44bc      	add	ip, r7
   1680e:	4463      	add	r3, ip
   16810:	701a      	strb	r2, [r3, #0]

		if(startHH>=0 && startHH<24 && startMM>=0 && startMM<60)
   16812:	2310      	movs	r3, #16
   16814:	33ff      	adds	r3, #255	; 0xff
   16816:	2208      	movs	r2, #8
   16818:	4694      	mov	ip, r2
   1681a:	44bc      	add	ip, r7
   1681c:	4463      	add	r3, ip
   1681e:	781b      	ldrb	r3, [r3, #0]
   16820:	2b17      	cmp	r3, #23
   16822:	d901      	bls.n	16828 <processOnSMS+0x183c>
   16824:	f000 fcc0 	bl	171a8 <processOnSMS+0x21bc>
   16828:	2387      	movs	r3, #135	; 0x87
   1682a:	005b      	lsls	r3, r3, #1
   1682c:	2208      	movs	r2, #8
   1682e:	4694      	mov	ip, r2
   16830:	44bc      	add	ip, r7
   16832:	4463      	add	r3, ip
   16834:	781b      	ldrb	r3, [r3, #0]
   16836:	2b3b      	cmp	r3, #59	; 0x3b
   16838:	d901      	bls.n	1683e <processOnSMS+0x1852>
   1683a:	f000 fcb5 	bl	171a8 <processOnSMS+0x21bc>
		{
			if(stopHH>=0 && stopHH<24 && stopMM>=0 && stopMM<60)
   1683e:	230e      	movs	r3, #14
   16840:	33ff      	adds	r3, #255	; 0xff
   16842:	2208      	movs	r2, #8
   16844:	4694      	mov	ip, r2
   16846:	44bc      	add	ip, r7
   16848:	4463      	add	r3, ip
   1684a:	781b      	ldrb	r3, [r3, #0]
   1684c:	2b17      	cmp	r3, #23
   1684e:	d901      	bls.n	16854 <processOnSMS+0x1868>
   16850:	f000 fcaa 	bl	171a8 <processOnSMS+0x21bc>
   16854:	2386      	movs	r3, #134	; 0x86
   16856:	005b      	lsls	r3, r3, #1
   16858:	2208      	movs	r2, #8
   1685a:	4694      	mov	ip, r2
   1685c:	44bc      	add	ip, r7
   1685e:	4463      	add	r3, ip
   16860:	781b      	ldrb	r3, [r3, #0]
   16862:	2b3b      	cmp	r3, #59	; 0x3b
   16864:	d901      	bls.n	1686a <processOnSMS+0x187e>
   16866:	f000 fc9f 	bl	171a8 <processOnSMS+0x21bc>
			{
				incomingSMSProcessed=true;
   1686a:	2330      	movs	r3, #48	; 0x30
   1686c:	33ff      	adds	r3, #255	; 0xff
   1686e:	2208      	movs	r2, #8
   16870:	4694      	mov	ip, r2
   16872:	44bc      	add	ip, r7
   16874:	4463      	add	r3, ip
   16876:	2201      	movs	r2, #1
   16878:	701a      	strb	r2, [r3, #0]
				
				if(startHH==stopHH && startMM==stopMM)
   1687a:	2310      	movs	r3, #16
   1687c:	33ff      	adds	r3, #255	; 0xff
   1687e:	2208      	movs	r2, #8
   16880:	18ba      	adds	r2, r7, r2
   16882:	18d2      	adds	r2, r2, r3
   16884:	230e      	movs	r3, #14
   16886:	33ff      	adds	r3, #255	; 0xff
   16888:	2108      	movs	r1, #8
   1688a:	468c      	mov	ip, r1
   1688c:	44bc      	add	ip, r7
   1688e:	4463      	add	r3, ip
   16890:	7812      	ldrb	r2, [r2, #0]
   16892:	781b      	ldrb	r3, [r3, #0]
   16894:	429a      	cmp	r2, r3
   16896:	d130      	bne.n	168fa <processOnSMS+0x190e>
   16898:	2387      	movs	r3, #135	; 0x87
   1689a:	005b      	lsls	r3, r3, #1
   1689c:	2208      	movs	r2, #8
   1689e:	18ba      	adds	r2, r7, r2
   168a0:	18d2      	adds	r2, r2, r3
   168a2:	2386      	movs	r3, #134	; 0x86
   168a4:	005b      	lsls	r3, r3, #1
   168a6:	2108      	movs	r1, #8
   168a8:	468c      	mov	ip, r1
   168aa:	44bc      	add	ip, r7
   168ac:	4463      	add	r3, ip
   168ae:	7812      	ldrb	r2, [r2, #0]
   168b0:	781b      	ldrb	r3, [r3, #0]
   168b2:	429a      	cmp	r2, r3
   168b4:	d121      	bne.n	168fa <processOnSMS+0x190e>
				{
					saveNoCallSettings(false,0,0,0,0);
   168b6:	2300      	movs	r3, #0
   168b8:	9300      	str	r3, [sp, #0]
   168ba:	2300      	movs	r3, #0
   168bc:	2200      	movs	r2, #0
   168be:	2100      	movs	r1, #0
   168c0:	2000      	movs	r0, #0
   168c2:	4c65      	ldr	r4, [pc, #404]	; (16a58 <processOnSMS+0x1a6c>)
   168c4:	47a0      	blx	r4
					if(response_sms_processed_cmd)
   168c6:	4b65      	ldr	r3, [pc, #404]	; (16a5c <processOnSMS+0x1a70>)
   168c8:	2298      	movs	r2, #152	; 0x98
   168ca:	0052      	lsls	r2, r2, #1
   168cc:	4694      	mov	ip, r2
   168ce:	2208      	movs	r2, #8
   168d0:	4690      	mov	r8, r2
   168d2:	44b8      	add	r8, r7
   168d4:	44c4      	add	ip, r8
   168d6:	4463      	add	r3, ip
   168d8:	781b      	ldrb	r3, [r3, #0]
   168da:	2b00      	cmp	r3, #0
   168dc:	d101      	bne.n	168e2 <processOnSMS+0x18f6>
   168de:	f000 fc63 	bl	171a8 <processOnSMS+0x21bc>
					{
						strcpy(resep_msg,"NO CALL SETTING OFF");
   168e2:	230c      	movs	r3, #12
   168e4:	2208      	movs	r2, #8
   168e6:	4694      	mov	ip, r2
   168e8:	44bc      	add	ip, r7
   168ea:	4463      	add	r3, ip
   168ec:	4a5c      	ldr	r2, [pc, #368]	; (16a60 <processOnSMS+0x1a74>)
   168ee:	ca13      	ldmia	r2!, {r0, r1, r4}
   168f0:	c313      	stmia	r3!, {r0, r1, r4}
   168f2:	ca03      	ldmia	r2!, {r0, r1}
   168f4:	c303      	stmia	r3!, {r0, r1}
					if(response_sms_processed_cmd)
   168f6:	f000 fc57 	bl	171a8 <processOnSMS+0x21bc>
					}
				}
				else
				{
					saveNoCallSettings(true,startHH,startMM,stopHH,stopMM);
   168fa:	230e      	movs	r3, #14
   168fc:	33ff      	adds	r3, #255	; 0xff
   168fe:	2208      	movs	r2, #8
   16900:	4694      	mov	ip, r2
   16902:	44bc      	add	ip, r7
   16904:	4463      	add	r3, ip
   16906:	7818      	ldrb	r0, [r3, #0]
   16908:	2387      	movs	r3, #135	; 0x87
   1690a:	005b      	lsls	r3, r3, #1
   1690c:	2208      	movs	r2, #8
   1690e:	4694      	mov	ip, r2
   16910:	44bc      	add	ip, r7
   16912:	4463      	add	r3, ip
   16914:	781a      	ldrb	r2, [r3, #0]
   16916:	2310      	movs	r3, #16
   16918:	33ff      	adds	r3, #255	; 0xff
   1691a:	2108      	movs	r1, #8
   1691c:	468c      	mov	ip, r1
   1691e:	44bc      	add	ip, r7
   16920:	4463      	add	r3, ip
   16922:	7819      	ldrb	r1, [r3, #0]
   16924:	2386      	movs	r3, #134	; 0x86
   16926:	005b      	lsls	r3, r3, #1
   16928:	2408      	movs	r4, #8
   1692a:	46a4      	mov	ip, r4
   1692c:	44bc      	add	ip, r7
   1692e:	4463      	add	r3, ip
   16930:	781b      	ldrb	r3, [r3, #0]
   16932:	9300      	str	r3, [sp, #0]
   16934:	0003      	movs	r3, r0
   16936:	2001      	movs	r0, #1
   16938:	4c47      	ldr	r4, [pc, #284]	; (16a58 <processOnSMS+0x1a6c>)
   1693a:	47a0      	blx	r4
					if(response_sms_processed_cmd)
   1693c:	4b47      	ldr	r3, [pc, #284]	; (16a5c <processOnSMS+0x1a70>)
   1693e:	2298      	movs	r2, #152	; 0x98
   16940:	0052      	lsls	r2, r2, #1
   16942:	4694      	mov	ip, r2
   16944:	2208      	movs	r2, #8
   16946:	4690      	mov	r8, r2
   16948:	44b8      	add	r8, r7
   1694a:	44c4      	add	ip, r8
   1694c:	4463      	add	r3, ip
   1694e:	781b      	ldrb	r3, [r3, #0]
   16950:	2b00      	cmp	r3, #0
   16952:	d101      	bne.n	16958 <processOnSMS+0x196c>
   16954:	f000 fc28 	bl	171a8 <processOnSMS+0x21bc>
					{
						strcpy(resep_msg,"NO CALL TIMINGS SET");
   16958:	230c      	movs	r3, #12
   1695a:	2208      	movs	r2, #8
   1695c:	4694      	mov	ip, r2
   1695e:	44bc      	add	ip, r7
   16960:	4463      	add	r3, ip
   16962:	4a40      	ldr	r2, [pc, #256]	; (16a64 <processOnSMS+0x1a78>)
   16964:	ca13      	ldmia	r2!, {r0, r1, r4}
   16966:	c313      	stmia	r3!, {r0, r1, r4}
   16968:	ca03      	ldmia	r2!, {r0, r1}
   1696a:	c303      	stmia	r3!, {r0, r1}
   1696c:	f000 fc1c 	bl	171a8 <processOnSMS+0x21bc>
					}
				}
			}
		}
	}
	else if (StringstartsWith(received_command,"STAGE"))
   16970:	4a3d      	ldr	r2, [pc, #244]	; (16a68 <processOnSMS+0x1a7c>)
   16972:	68fb      	ldr	r3, [r7, #12]
   16974:	0011      	movs	r1, r2
   16976:	0018      	movs	r0, r3
   16978:	4b31      	ldr	r3, [pc, #196]	; (16a40 <processOnSMS+0x1a54>)
   1697a:	4798      	blx	r3
   1697c:	1e03      	subs	r3, r0, #0
   1697e:	d100      	bne.n	16982 <processOnSMS+0x1996>
   16980:	e07e      	b.n	16a80 <processOnSMS+0x1a94>
	{
		memmove(received_command,received_command+5,strlen(received_command));
   16982:	68fb      	ldr	r3, [r7, #12]
   16984:	1d5c      	adds	r4, r3, #5
   16986:	68fb      	ldr	r3, [r7, #12]
   16988:	0018      	movs	r0, r3
   1698a:	4b38      	ldr	r3, [pc, #224]	; (16a6c <processOnSMS+0x1a80>)
   1698c:	4798      	blx	r3
   1698e:	0002      	movs	r2, r0
   16990:	68fb      	ldr	r3, [r7, #12]
   16992:	0021      	movs	r1, r4
   16994:	0018      	movs	r0, r3
   16996:	4b36      	ldr	r3, [pc, #216]	; (16a70 <processOnSMS+0x1a84>)
   16998:	4798      	blx	r3
		uint16_t stageLevel = atoi(received_command);
   1699a:	68fb      	ldr	r3, [r7, #12]
   1699c:	0018      	movs	r0, r3
   1699e:	4b2d      	ldr	r3, [pc, #180]	; (16a54 <processOnSMS+0x1a68>)
   169a0:	4798      	blx	r3
   169a2:	0002      	movs	r2, r0
   169a4:	2391      	movs	r3, #145	; 0x91
   169a6:	005b      	lsls	r3, r3, #1
   169a8:	2108      	movs	r1, #8
   169aa:	468c      	mov	ip, r1
   169ac:	44bc      	add	ip, r7
   169ae:	4463      	add	r3, ip
   169b0:	801a      	strh	r2, [r3, #0]
		if (stageLevel < 0) stageLevel = 0;
		if (stageLevel > 5) stageLevel = 5;
   169b2:	2391      	movs	r3, #145	; 0x91
   169b4:	005b      	lsls	r3, r3, #1
   169b6:	2208      	movs	r2, #8
   169b8:	4694      	mov	ip, r2
   169ba:	44bc      	add	ip, r7
   169bc:	4463      	add	r3, ip
   169be:	881b      	ldrh	r3, [r3, #0]
   169c0:	2b05      	cmp	r3, #5
   169c2:	d907      	bls.n	169d4 <processOnSMS+0x19e8>
   169c4:	2391      	movs	r3, #145	; 0x91
   169c6:	005b      	lsls	r3, r3, #1
   169c8:	2208      	movs	r2, #8
   169ca:	4694      	mov	ip, r2
   169cc:	44bc      	add	ip, r7
   169ce:	4463      	add	r3, ip
   169d0:	2205      	movs	r2, #5
   169d2:	801a      	strh	r2, [r3, #0]
		saveEventStageSettings(stageLevel);  //Store in EEPROM the EVENT STAGE
   169d4:	2391      	movs	r3, #145	; 0x91
   169d6:	005b      	lsls	r3, r3, #1
   169d8:	2208      	movs	r2, #8
   169da:	4694      	mov	ip, r2
   169dc:	44bc      	add	ip, r7
   169de:	4463      	add	r3, ip
   169e0:	881b      	ldrh	r3, [r3, #0]
   169e2:	b2db      	uxtb	r3, r3
   169e4:	0018      	movs	r0, r3
   169e6:	4b23      	ldr	r3, [pc, #140]	; (16a74 <processOnSMS+0x1a88>)
   169e8:	4798      	blx	r3
		
		incomingSMSProcessed=true;
   169ea:	2330      	movs	r3, #48	; 0x30
   169ec:	33ff      	adds	r3, #255	; 0xff
   169ee:	2208      	movs	r2, #8
   169f0:	4694      	mov	ip, r2
   169f2:	44bc      	add	ip, r7
   169f4:	4463      	add	r3, ip
   169f6:	2201      	movs	r2, #1
   169f8:	701a      	strb	r2, [r3, #0]
		
		if(response_sms_processed_cmd)
   169fa:	4b18      	ldr	r3, [pc, #96]	; (16a5c <processOnSMS+0x1a70>)
   169fc:	2298      	movs	r2, #152	; 0x98
   169fe:	0052      	lsls	r2, r2, #1
   16a00:	4694      	mov	ip, r2
   16a02:	2208      	movs	r2, #8
   16a04:	4690      	mov	r8, r2
   16a06:	44b8      	add	r8, r7
   16a08:	44c4      	add	ip, r8
   16a0a:	4463      	add	r3, ip
   16a0c:	781b      	ldrb	r3, [r3, #0]
   16a0e:	2b00      	cmp	r3, #0
   16a10:	d101      	bne.n	16a16 <processOnSMS+0x1a2a>
   16a12:	f000 fbc9 	bl	171a8 <processOnSMS+0x21bc>
		{
			sprintf(resep_msg,"CALL STAGE SET TO : %d", stageLevel);
   16a16:	2391      	movs	r3, #145	; 0x91
   16a18:	005b      	lsls	r3, r3, #1
   16a1a:	2208      	movs	r2, #8
   16a1c:	4694      	mov	ip, r2
   16a1e:	44bc      	add	ip, r7
   16a20:	4463      	add	r3, ip
   16a22:	881a      	ldrh	r2, [r3, #0]
   16a24:	4914      	ldr	r1, [pc, #80]	; (16a78 <processOnSMS+0x1a8c>)
   16a26:	230c      	movs	r3, #12
   16a28:	2008      	movs	r0, #8
   16a2a:	4684      	mov	ip, r0
   16a2c:	44bc      	add	ip, r7
   16a2e:	4463      	add	r3, ip
   16a30:	0018      	movs	r0, r3
   16a32:	4b12      	ldr	r3, [pc, #72]	; (16a7c <processOnSMS+0x1a90>)
   16a34:	4798      	blx	r3
   16a36:	f000 fbb7 	bl	171a8 <processOnSMS+0x21bc>
   16a3a:	46c0      	nop			; (mov r8, r8)
   16a3c:	0002a1f0 	.word	0x0002a1f0
   16a40:	00014201 	.word	0x00014201
   16a44:	0002a1f8 	.word	0x0002a1f8
   16a48:	0002a200 	.word	0x0002a200
   16a4c:	00028e49 	.word	0x00028e49
   16a50:	0002a204 	.word	0x0002a204
   16a54:	00028a3d 	.word	0x00028a3d
   16a58:	000113d9 	.word	0x000113d9
   16a5c:	fffffed2 	.word	0xfffffed2
   16a60:	0002a1c4 	.word	0x0002a1c4
   16a64:	0002a208 	.word	0x0002a208
   16a68:	0002a21c 	.word	0x0002a21c
   16a6c:	00028de7 	.word	0x00028de7
   16a70:	00028b33 	.word	0x00028b33
   16a74:	00011a2d 	.word	0x00011a2d
   16a78:	0002a224 	.word	0x0002a224
   16a7c:	00028d5d 	.word	0x00028d5d
		}
	}
	else if (StringstartsWith(received_command,"STARTIME"))
   16a80:	4aa5      	ldr	r2, [pc, #660]	; (16d18 <processOnSMS+0x1d2c>)
   16a82:	68fb      	ldr	r3, [r7, #12]
   16a84:	0011      	movs	r1, r2
   16a86:	0018      	movs	r0, r3
   16a88:	4ba4      	ldr	r3, [pc, #656]	; (16d1c <processOnSMS+0x1d30>)
   16a8a:	4798      	blx	r3
   16a8c:	1e03      	subs	r3, r0, #0
   16a8e:	d06b      	beq.n	16b68 <processOnSMS+0x1b7c>
	{
		memmove(received_command,received_command+8,strlen(received_command));
   16a90:	68fb      	ldr	r3, [r7, #12]
   16a92:	3308      	adds	r3, #8
   16a94:	001c      	movs	r4, r3
   16a96:	68fb      	ldr	r3, [r7, #12]
   16a98:	0018      	movs	r0, r3
   16a9a:	4ba1      	ldr	r3, [pc, #644]	; (16d20 <processOnSMS+0x1d34>)
   16a9c:	4798      	blx	r3
   16a9e:	0002      	movs	r2, r0
   16aa0:	68fb      	ldr	r3, [r7, #12]
   16aa2:	0021      	movs	r1, r4
   16aa4:	0018      	movs	r0, r3
   16aa6:	4b9f      	ldr	r3, [pc, #636]	; (16d24 <processOnSMS+0x1d38>)
   16aa8:	4798      	blx	r3
		uint16_t STARTIME = atoi(received_command);
   16aaa:	68fb      	ldr	r3, [r7, #12]
   16aac:	0018      	movs	r0, r3
   16aae:	4b9e      	ldr	r3, [pc, #632]	; (16d28 <processOnSMS+0x1d3c>)
   16ab0:	4798      	blx	r3
   16ab2:	0002      	movs	r2, r0
   16ab4:	2390      	movs	r3, #144	; 0x90
   16ab6:	005b      	lsls	r3, r3, #1
   16ab8:	2108      	movs	r1, #8
   16aba:	468c      	mov	ip, r1
   16abc:	44bc      	add	ip, r7
   16abe:	4463      	add	r3, ip
   16ac0:	801a      	strh	r2, [r3, #0]
		if (STARTIME < 2)
   16ac2:	2390      	movs	r3, #144	; 0x90
   16ac4:	005b      	lsls	r3, r3, #1
   16ac6:	2208      	movs	r2, #8
   16ac8:	4694      	mov	ip, r2
   16aca:	44bc      	add	ip, r7
   16acc:	4463      	add	r3, ip
   16ace:	881b      	ldrh	r3, [r3, #0]
   16ad0:	2b01      	cmp	r3, #1
   16ad2:	d807      	bhi.n	16ae4 <processOnSMS+0x1af8>
		{
			STARTIME = 2;
   16ad4:	2390      	movs	r3, #144	; 0x90
   16ad6:	005b      	lsls	r3, r3, #1
   16ad8:	2208      	movs	r2, #8
   16ada:	4694      	mov	ip, r2
   16adc:	44bc      	add	ip, r7
   16ade:	4463      	add	r3, ip
   16ae0:	2202      	movs	r2, #2
   16ae2:	801a      	strh	r2, [r3, #0]
		}
		if (STARTIME > 65000L)
   16ae4:	2390      	movs	r3, #144	; 0x90
   16ae6:	005b      	lsls	r3, r3, #1
   16ae8:	2208      	movs	r2, #8
   16aea:	4694      	mov	ip, r2
   16aec:	44bc      	add	ip, r7
   16aee:	4463      	add	r3, ip
   16af0:	881b      	ldrh	r3, [r3, #0]
   16af2:	4a8e      	ldr	r2, [pc, #568]	; (16d2c <processOnSMS+0x1d40>)
   16af4:	4293      	cmp	r3, r2
   16af6:	d907      	bls.n	16b08 <processOnSMS+0x1b1c>
		{
			STARTIME = 65000L;
   16af8:	2390      	movs	r3, #144	; 0x90
   16afa:	005b      	lsls	r3, r3, #1
   16afc:	2208      	movs	r2, #8
   16afe:	4694      	mov	ip, r2
   16b00:	44bc      	add	ip, r7
   16b02:	4463      	add	r3, ip
   16b04:	4a8a      	ldr	r2, [pc, #552]	; (16d30 <processOnSMS+0x1d44>)
   16b06:	801a      	strh	r2, [r3, #0]
		}
		saveStarDeltaTimer(STARTIME);
   16b08:	2390      	movs	r3, #144	; 0x90
   16b0a:	005b      	lsls	r3, r3, #1
   16b0c:	2208      	movs	r2, #8
   16b0e:	4694      	mov	ip, r2
   16b10:	44bc      	add	ip, r7
   16b12:	4463      	add	r3, ip
   16b14:	881b      	ldrh	r3, [r3, #0]
   16b16:	0018      	movs	r0, r3
   16b18:	4b86      	ldr	r3, [pc, #536]	; (16d34 <processOnSMS+0x1d48>)
   16b1a:	4798      	blx	r3
		
		incomingSMSProcessed=true;
   16b1c:	2330      	movs	r3, #48	; 0x30
   16b1e:	33ff      	adds	r3, #255	; 0xff
   16b20:	2208      	movs	r2, #8
   16b22:	4694      	mov	ip, r2
   16b24:	44bc      	add	ip, r7
   16b26:	4463      	add	r3, ip
   16b28:	2201      	movs	r2, #1
   16b2a:	701a      	strb	r2, [r3, #0]
		
		if (response_sms_processed_cmd == true)
   16b2c:	4b82      	ldr	r3, [pc, #520]	; (16d38 <processOnSMS+0x1d4c>)
   16b2e:	2298      	movs	r2, #152	; 0x98
   16b30:	0052      	lsls	r2, r2, #1
   16b32:	4694      	mov	ip, r2
   16b34:	2208      	movs	r2, #8
   16b36:	4690      	mov	r8, r2
   16b38:	44b8      	add	r8, r7
   16b3a:	44c4      	add	ip, r8
   16b3c:	4463      	add	r3, ip
   16b3e:	781b      	ldrb	r3, [r3, #0]
   16b40:	2b00      	cmp	r3, #0
   16b42:	d100      	bne.n	16b46 <processOnSMS+0x1b5a>
   16b44:	e330      	b.n	171a8 <processOnSMS+0x21bc>
		{
			sprintf(resep_msg," STARTIME SET TO : %d",STARTIME);
   16b46:	2390      	movs	r3, #144	; 0x90
   16b48:	005b      	lsls	r3, r3, #1
   16b4a:	2208      	movs	r2, #8
   16b4c:	4694      	mov	ip, r2
   16b4e:	44bc      	add	ip, r7
   16b50:	4463      	add	r3, ip
   16b52:	881a      	ldrh	r2, [r3, #0]
   16b54:	4979      	ldr	r1, [pc, #484]	; (16d3c <processOnSMS+0x1d50>)
   16b56:	230c      	movs	r3, #12
   16b58:	2008      	movs	r0, #8
   16b5a:	4684      	mov	ip, r0
   16b5c:	44bc      	add	ip, r7
   16b5e:	4463      	add	r3, ip
   16b60:	0018      	movs	r0, r3
   16b62:	4b77      	ldr	r3, [pc, #476]	; (16d40 <processOnSMS+0x1d54>)
   16b64:	4798      	blx	r3
   16b66:	e31f      	b.n	171a8 <processOnSMS+0x21bc>
		}
	}
	else if (StringstartsWith(received_command,"AUTOTIME"))
   16b68:	4a76      	ldr	r2, [pc, #472]	; (16d44 <processOnSMS+0x1d58>)
   16b6a:	68fb      	ldr	r3, [r7, #12]
   16b6c:	0011      	movs	r1, r2
   16b6e:	0018      	movs	r0, r3
   16b70:	4b6a      	ldr	r3, [pc, #424]	; (16d1c <processOnSMS+0x1d30>)
   16b72:	4798      	blx	r3
   16b74:	1e03      	subs	r3, r0, #0
   16b76:	d06d      	beq.n	16c54 <processOnSMS+0x1c68>
	{
		memmove(received_command,received_command+8,strlen(received_command));
   16b78:	68fb      	ldr	r3, [r7, #12]
   16b7a:	3308      	adds	r3, #8
   16b7c:	001c      	movs	r4, r3
   16b7e:	68fb      	ldr	r3, [r7, #12]
   16b80:	0018      	movs	r0, r3
   16b82:	4b67      	ldr	r3, [pc, #412]	; (16d20 <processOnSMS+0x1d34>)
   16b84:	4798      	blx	r3
   16b86:	0002      	movs	r2, r0
   16b88:	68fb      	ldr	r3, [r7, #12]
   16b8a:	0021      	movs	r1, r4
   16b8c:	0018      	movs	r0, r3
   16b8e:	4b65      	ldr	r3, [pc, #404]	; (16d24 <processOnSMS+0x1d38>)
   16b90:	4798      	blx	r3
		uint16_t AUTOTIME = atoi(received_command);
   16b92:	68fb      	ldr	r3, [r7, #12]
   16b94:	0018      	movs	r0, r3
   16b96:	4b64      	ldr	r3, [pc, #400]	; (16d28 <processOnSMS+0x1d3c>)
   16b98:	4798      	blx	r3
   16b9a:	0002      	movs	r2, r0
   16b9c:	238f      	movs	r3, #143	; 0x8f
   16b9e:	005b      	lsls	r3, r3, #1
   16ba0:	2108      	movs	r1, #8
   16ba2:	468c      	mov	ip, r1
   16ba4:	44bc      	add	ip, r7
   16ba6:	4463      	add	r3, ip
   16ba8:	801a      	strh	r2, [r3, #0]
		if (AUTOTIME < 50)
   16baa:	238f      	movs	r3, #143	; 0x8f
   16bac:	005b      	lsls	r3, r3, #1
   16bae:	2208      	movs	r2, #8
   16bb0:	4694      	mov	ip, r2
   16bb2:	44bc      	add	ip, r7
   16bb4:	4463      	add	r3, ip
   16bb6:	881b      	ldrh	r3, [r3, #0]
   16bb8:	2b31      	cmp	r3, #49	; 0x31
   16bba:	d807      	bhi.n	16bcc <processOnSMS+0x1be0>
		{
			AUTOTIME = 50;
   16bbc:	238f      	movs	r3, #143	; 0x8f
   16bbe:	005b      	lsls	r3, r3, #1
   16bc0:	2208      	movs	r2, #8
   16bc2:	4694      	mov	ip, r2
   16bc4:	44bc      	add	ip, r7
   16bc6:	4463      	add	r3, ip
   16bc8:	2232      	movs	r2, #50	; 0x32
   16bca:	801a      	strh	r2, [r3, #0]
		}
		if (AUTOTIME > 28800)
   16bcc:	238f      	movs	r3, #143	; 0x8f
   16bce:	005b      	lsls	r3, r3, #1
   16bd0:	2208      	movs	r2, #8
   16bd2:	4694      	mov	ip, r2
   16bd4:	44bc      	add	ip, r7
   16bd6:	4463      	add	r3, ip
   16bd8:	881a      	ldrh	r2, [r3, #0]
   16bda:	23e1      	movs	r3, #225	; 0xe1
   16bdc:	01db      	lsls	r3, r3, #7
   16bde:	429a      	cmp	r2, r3
   16be0:	d908      	bls.n	16bf4 <processOnSMS+0x1c08>
		{
			AUTOTIME = 28800;
   16be2:	238f      	movs	r3, #143	; 0x8f
   16be4:	005b      	lsls	r3, r3, #1
   16be6:	2208      	movs	r2, #8
   16be8:	4694      	mov	ip, r2
   16bea:	44bc      	add	ip, r7
   16bec:	4463      	add	r3, ip
   16bee:	22e1      	movs	r2, #225	; 0xe1
   16bf0:	01d2      	lsls	r2, r2, #7
   16bf2:	801a      	strh	r2, [r3, #0]
		}
		saveAutoStartTimeSettings(AUTOTIME);
   16bf4:	238f      	movs	r3, #143	; 0x8f
   16bf6:	005b      	lsls	r3, r3, #1
   16bf8:	2208      	movs	r2, #8
   16bfa:	4694      	mov	ip, r2
   16bfc:	44bc      	add	ip, r7
   16bfe:	4463      	add	r3, ip
   16c00:	881b      	ldrh	r3, [r3, #0]
   16c02:	0018      	movs	r0, r3
   16c04:	4b50      	ldr	r3, [pc, #320]	; (16d48 <processOnSMS+0x1d5c>)
   16c06:	4798      	blx	r3
		incomingSMSProcessed=true;
   16c08:	2330      	movs	r3, #48	; 0x30
   16c0a:	33ff      	adds	r3, #255	; 0xff
   16c0c:	2208      	movs	r2, #8
   16c0e:	4694      	mov	ip, r2
   16c10:	44bc      	add	ip, r7
   16c12:	4463      	add	r3, ip
   16c14:	2201      	movs	r2, #1
   16c16:	701a      	strb	r2, [r3, #0]
		
		if (response_sms_processed_cmd == true)
   16c18:	4b47      	ldr	r3, [pc, #284]	; (16d38 <processOnSMS+0x1d4c>)
   16c1a:	2298      	movs	r2, #152	; 0x98
   16c1c:	0052      	lsls	r2, r2, #1
   16c1e:	4694      	mov	ip, r2
   16c20:	2208      	movs	r2, #8
   16c22:	4690      	mov	r8, r2
   16c24:	44b8      	add	r8, r7
   16c26:	44c4      	add	ip, r8
   16c28:	4463      	add	r3, ip
   16c2a:	781b      	ldrb	r3, [r3, #0]
   16c2c:	2b00      	cmp	r3, #0
   16c2e:	d100      	bne.n	16c32 <processOnSMS+0x1c46>
   16c30:	e2ba      	b.n	171a8 <processOnSMS+0x21bc>
		{
			sprintf(resep_msg," AUTOTIME SET TO : %d",AUTOTIME);
   16c32:	238f      	movs	r3, #143	; 0x8f
   16c34:	005b      	lsls	r3, r3, #1
   16c36:	2208      	movs	r2, #8
   16c38:	4694      	mov	ip, r2
   16c3a:	44bc      	add	ip, r7
   16c3c:	4463      	add	r3, ip
   16c3e:	881a      	ldrh	r2, [r3, #0]
   16c40:	4942      	ldr	r1, [pc, #264]	; (16d4c <processOnSMS+0x1d60>)
   16c42:	230c      	movs	r3, #12
   16c44:	2008      	movs	r0, #8
   16c46:	4684      	mov	ip, r0
   16c48:	44bc      	add	ip, r7
   16c4a:	4463      	add	r3, ip
   16c4c:	0018      	movs	r0, r3
   16c4e:	4b3c      	ldr	r3, [pc, #240]	; (16d40 <processOnSMS+0x1d54>)
   16c50:	4798      	blx	r3
   16c52:	e2a9      	b.n	171a8 <processOnSMS+0x21bc>
		}
	}
	else if (StringstartsWith(received_command,"BAL"))
   16c54:	4a3e      	ldr	r2, [pc, #248]	; (16d50 <processOnSMS+0x1d64>)
   16c56:	68fb      	ldr	r3, [r7, #12]
   16c58:	0011      	movs	r1, r2
   16c5a:	0018      	movs	r0, r3
   16c5c:	4b2f      	ldr	r3, [pc, #188]	; (16d1c <processOnSMS+0x1d30>)
   16c5e:	4798      	blx	r3
   16c60:	1e03      	subs	r3, r0, #0
   16c62:	d000      	beq.n	16c66 <processOnSMS+0x1c7a>
   16c64:	e2a0      	b.n	171a8 <processOnSMS+0x21bc>
		// The received sms will be like BAL*141# for vodafone
		// We need to extract the URC number and check the balance, and send it to user
		//todo: implement mechanism to check current balance of sim card
		
	}
	else if(StringstartsWith(received_command,"MP+"))
   16c66:	4a3b      	ldr	r2, [pc, #236]	; (16d54 <processOnSMS+0x1d68>)
   16c68:	68fb      	ldr	r3, [r7, #12]
   16c6a:	0011      	movs	r1, r2
   16c6c:	0018      	movs	r0, r3
   16c6e:	4b2b      	ldr	r3, [pc, #172]	; (16d1c <processOnSMS+0x1d30>)
   16c70:	4798      	blx	r3
   16c72:	1e03      	subs	r3, r0, #0
   16c74:	d023      	beq.n	16cbe <processOnSMS+0x1cd2>
	{
		memmove(received_command,received_command+3,strlen(received_command));
   16c76:	68fb      	ldr	r3, [r7, #12]
   16c78:	1cdc      	adds	r4, r3, #3
   16c7a:	68fb      	ldr	r3, [r7, #12]
   16c7c:	0018      	movs	r0, r3
   16c7e:	4b28      	ldr	r3, [pc, #160]	; (16d20 <processOnSMS+0x1d34>)
   16c80:	4798      	blx	r3
   16c82:	0002      	movs	r2, r0
   16c84:	68fb      	ldr	r3, [r7, #12]
   16c86:	0021      	movs	r1, r4
   16c88:	0018      	movs	r0, r3
   16c8a:	4b26      	ldr	r3, [pc, #152]	; (16d24 <processOnSMS+0x1d38>)
   16c8c:	4798      	blx	r3
		if(addPrimaryIndexedNumber(received_command))
   16c8e:	68fb      	ldr	r3, [r7, #12]
   16c90:	0018      	movs	r0, r3
   16c92:	4b31      	ldr	r3, [pc, #196]	; (16d58 <processOnSMS+0x1d6c>)
   16c94:	4798      	blx	r3
   16c96:	1e03      	subs	r3, r0, #0
   16c98:	d100      	bne.n	16c9c <processOnSMS+0x1cb0>
   16c9a:	e285      	b.n	171a8 <processOnSMS+0x21bc>
		{
			incomingSMSProcessed=true;
   16c9c:	2330      	movs	r3, #48	; 0x30
   16c9e:	33ff      	adds	r3, #255	; 0xff
   16ca0:	2208      	movs	r2, #8
   16ca2:	4694      	mov	ip, r2
   16ca4:	44bc      	add	ip, r7
   16ca6:	4463      	add	r3, ip
   16ca8:	2201      	movs	r2, #1
   16caa:	701a      	strb	r2, [r3, #0]
			strcpy(resep_msg,"P NO ADDDED");
   16cac:	230c      	movs	r3, #12
   16cae:	2208      	movs	r2, #8
   16cb0:	4694      	mov	ip, r2
   16cb2:	44bc      	add	ip, r7
   16cb4:	4463      	add	r3, ip
   16cb6:	4a29      	ldr	r2, [pc, #164]	; (16d5c <processOnSMS+0x1d70>)
   16cb8:	ca13      	ldmia	r2!, {r0, r1, r4}
   16cba:	c313      	stmia	r3!, {r0, r1, r4}
   16cbc:	e274      	b.n	171a8 <processOnSMS+0x21bc>
		}
	}
	else if(StringstartsWith(received_command,"MS+"))
   16cbe:	4a28      	ldr	r2, [pc, #160]	; (16d60 <processOnSMS+0x1d74>)
   16cc0:	68fb      	ldr	r3, [r7, #12]
   16cc2:	0011      	movs	r1, r2
   16cc4:	0018      	movs	r0, r3
   16cc6:	4b15      	ldr	r3, [pc, #84]	; (16d1c <processOnSMS+0x1d30>)
   16cc8:	4798      	blx	r3
   16cca:	1e03      	subs	r3, r0, #0
   16ccc:	d04e      	beq.n	16d6c <processOnSMS+0x1d80>
	{
		memmove(received_command,received_command+3,strlen(received_command));
   16cce:	68fb      	ldr	r3, [r7, #12]
   16cd0:	1cdc      	adds	r4, r3, #3
   16cd2:	68fb      	ldr	r3, [r7, #12]
   16cd4:	0018      	movs	r0, r3
   16cd6:	4b12      	ldr	r3, [pc, #72]	; (16d20 <processOnSMS+0x1d34>)
   16cd8:	4798      	blx	r3
   16cda:	0002      	movs	r2, r0
   16cdc:	68fb      	ldr	r3, [r7, #12]
   16cde:	0021      	movs	r1, r4
   16ce0:	0018      	movs	r0, r3
   16ce2:	4b10      	ldr	r3, [pc, #64]	; (16d24 <processOnSMS+0x1d38>)
   16ce4:	4798      	blx	r3
		if(addSecondaryIndexedNumber(received_command))
   16ce6:	68fb      	ldr	r3, [r7, #12]
   16ce8:	0018      	movs	r0, r3
   16cea:	4b1e      	ldr	r3, [pc, #120]	; (16d64 <processOnSMS+0x1d78>)
   16cec:	4798      	blx	r3
   16cee:	1e03      	subs	r3, r0, #0
   16cf0:	d100      	bne.n	16cf4 <processOnSMS+0x1d08>
   16cf2:	e259      	b.n	171a8 <processOnSMS+0x21bc>
		{
			incomingSMSProcessed=true;
   16cf4:	2330      	movs	r3, #48	; 0x30
   16cf6:	33ff      	adds	r3, #255	; 0xff
   16cf8:	2208      	movs	r2, #8
   16cfa:	4694      	mov	ip, r2
   16cfc:	44bc      	add	ip, r7
   16cfe:	4463      	add	r3, ip
   16d00:	2201      	movs	r2, #1
   16d02:	701a      	strb	r2, [r3, #0]
			strcpy(resep_msg,"S NO ADDDED");
   16d04:	230c      	movs	r3, #12
   16d06:	2208      	movs	r2, #8
   16d08:	4694      	mov	ip, r2
   16d0a:	44bc      	add	ip, r7
   16d0c:	4463      	add	r3, ip
   16d0e:	4a16      	ldr	r2, [pc, #88]	; (16d68 <processOnSMS+0x1d7c>)
   16d10:	ca13      	ldmia	r2!, {r0, r1, r4}
   16d12:	c313      	stmia	r3!, {r0, r1, r4}
   16d14:	e248      	b.n	171a8 <processOnSMS+0x21bc>
   16d16:	46c0      	nop			; (mov r8, r8)
   16d18:	0002a23c 	.word	0x0002a23c
   16d1c:	00014201 	.word	0x00014201
   16d20:	00028de7 	.word	0x00028de7
   16d24:	00028b33 	.word	0x00028b33
   16d28:	00028a3d 	.word	0x00028a3d
   16d2c:	0000fde8 	.word	0x0000fde8
   16d30:	fffffde8 	.word	0xfffffde8
   16d34:	000119e1 	.word	0x000119e1
   16d38:	fffffed2 	.word	0xfffffed2
   16d3c:	0002a248 	.word	0x0002a248
   16d40:	00028d5d 	.word	0x00028d5d
   16d44:	0002a260 	.word	0x0002a260
   16d48:	000112f5 	.word	0x000112f5
   16d4c:	0002a26c 	.word	0x0002a26c
   16d50:	0002a284 	.word	0x0002a284
   16d54:	0002a288 	.word	0x0002a288
   16d58:	00011bad 	.word	0x00011bad
   16d5c:	0002a28c 	.word	0x0002a28c
   16d60:	0002a298 	.word	0x0002a298
   16d64:	00011c59 	.word	0x00011c59
   16d68:	0002a29c 	.word	0x0002a29c
		}
	}
	else if (StringstartsWith(received_command,"M+"))
   16d6c:	4adb      	ldr	r2, [pc, #876]	; (170dc <processOnSMS+0x20f0>)
   16d6e:	68fb      	ldr	r3, [r7, #12]
   16d70:	0011      	movs	r1, r2
   16d72:	0018      	movs	r0, r3
   16d74:	4bda      	ldr	r3, [pc, #872]	; (170e0 <processOnSMS+0x20f4>)
   16d76:	4798      	blx	r3
   16d78:	1e03      	subs	r3, r0, #0
   16d7a:	d100      	bne.n	16d7e <processOnSMS+0x1d92>
   16d7c:	e091      	b.n	16ea2 <processOnSMS+0x1eb6>
	{
		memmove(received_command,received_command+2,strlen(received_command));
   16d7e:	68fb      	ldr	r3, [r7, #12]
   16d80:	1c9c      	adds	r4, r3, #2
   16d82:	68fb      	ldr	r3, [r7, #12]
   16d84:	0018      	movs	r0, r3
   16d86:	4bd7      	ldr	r3, [pc, #860]	; (170e4 <processOnSMS+0x20f8>)
   16d88:	4798      	blx	r3
   16d8a:	0002      	movs	r2, r0
   16d8c:	68fb      	ldr	r3, [r7, #12]
   16d8e:	0021      	movs	r1, r4
   16d90:	0018      	movs	r0, r3
   16d92:	4bd5      	ldr	r3, [pc, #852]	; (170e8 <processOnSMS+0x20fc>)
   16d94:	4798      	blx	r3
		bool result = addNumber(received_command);
   16d96:	230c      	movs	r3, #12
   16d98:	33ff      	adds	r3, #255	; 0xff
   16d9a:	2208      	movs	r2, #8
   16d9c:	18ba      	adds	r2, r7, r2
   16d9e:	18d4      	adds	r4, r2, r3
   16da0:	68fb      	ldr	r3, [r7, #12]
   16da2:	0018      	movs	r0, r3
   16da4:	4bd1      	ldr	r3, [pc, #836]	; (170ec <processOnSMS+0x2100>)
   16da6:	4798      	blx	r3
   16da8:	0003      	movs	r3, r0
   16daa:	7023      	strb	r3, [r4, #0]
		if(result)
   16dac:	230c      	movs	r3, #12
   16dae:	33ff      	adds	r3, #255	; 0xff
   16db0:	2208      	movs	r2, #8
   16db2:	4694      	mov	ip, r2
   16db4:	44bc      	add	ip, r7
   16db6:	4463      	add	r3, ip
   16db8:	781b      	ldrb	r3, [r3, #0]
   16dba:	2b00      	cmp	r3, #0
   16dbc:	d100      	bne.n	16dc0 <processOnSMS+0x1dd4>
   16dbe:	e1f3      	b.n	171a8 <processOnSMS+0x21bc>
		{
			incomingSMSProcessed=true;
   16dc0:	2330      	movs	r3, #48	; 0x30
   16dc2:	33ff      	adds	r3, #255	; 0xff
   16dc4:	2208      	movs	r2, #8
   16dc6:	4694      	mov	ip, r2
   16dc8:	44bc      	add	ip, r7
   16dca:	4463      	add	r3, ip
   16dcc:	2201      	movs	r2, #1
   16dce:	701a      	strb	r2, [r3, #0]
			if (response_sms_processed_cmd == true)
   16dd0:	4bc7      	ldr	r3, [pc, #796]	; (170f0 <processOnSMS+0x2104>)
   16dd2:	2298      	movs	r2, #152	; 0x98
   16dd4:	0052      	lsls	r2, r2, #1
   16dd6:	4694      	mov	ip, r2
   16dd8:	2208      	movs	r2, #8
   16dda:	4690      	mov	r8, r2
   16ddc:	44b8      	add	r8, r7
   16dde:	44c4      	add	ip, r8
   16de0:	4463      	add	r3, ip
   16de2:	781b      	ldrb	r3, [r3, #0]
   16de4:	2b00      	cmp	r3, #0
   16de6:	d100      	bne.n	16dea <processOnSMS+0x1dfe>
   16de8:	e1de      	b.n	171a8 <processOnSMS+0x21bc>
			{
				strcpy(resep_msg,"MOBILE NO:");
   16dea:	230c      	movs	r3, #12
   16dec:	2208      	movs	r2, #8
   16dee:	4694      	mov	ip, r2
   16df0:	44bc      	add	ip, r7
   16df2:	4463      	add	r3, ip
   16df4:	4abf      	ldr	r2, [pc, #764]	; (170f4 <processOnSMS+0x2108>)
   16df6:	ca03      	ldmia	r2!, {r0, r1}
   16df8:	c303      	stmia	r3!, {r0, r1}
   16dfa:	8811      	ldrh	r1, [r2, #0]
   16dfc:	8019      	strh	r1, [r3, #0]
   16dfe:	7892      	ldrb	r2, [r2, #2]
   16e00:	709a      	strb	r2, [r3, #2]
				strcat(resep_msg,"\n");
   16e02:	230c      	movs	r3, #12
   16e04:	2208      	movs	r2, #8
   16e06:	4694      	mov	ip, r2
   16e08:	44bc      	add	ip, r7
   16e0a:	4463      	add	r3, ip
   16e0c:	0018      	movs	r0, r3
   16e0e:	4bb5      	ldr	r3, [pc, #724]	; (170e4 <processOnSMS+0x20f8>)
   16e10:	4798      	blx	r3
   16e12:	0003      	movs	r3, r0
   16e14:	001a      	movs	r2, r3
   16e16:	230c      	movs	r3, #12
   16e18:	2108      	movs	r1, #8
   16e1a:	468c      	mov	ip, r1
   16e1c:	44bc      	add	ip, r7
   16e1e:	4463      	add	r3, ip
   16e20:	189a      	adds	r2, r3, r2
   16e22:	4bb5      	ldr	r3, [pc, #724]	; (170f8 <processOnSMS+0x210c>)
   16e24:	0010      	movs	r0, r2
   16e26:	0019      	movs	r1, r3
   16e28:	2302      	movs	r3, #2
   16e2a:	001a      	movs	r2, r3
   16e2c:	4bb3      	ldr	r3, [pc, #716]	; (170fc <processOnSMS+0x2110>)
   16e2e:	4798      	blx	r3
				strcat(resep_msg,received_command);
   16e30:	68fa      	ldr	r2, [r7, #12]
   16e32:	230c      	movs	r3, #12
   16e34:	2108      	movs	r1, #8
   16e36:	468c      	mov	ip, r1
   16e38:	44bc      	add	ip, r7
   16e3a:	4463      	add	r3, ip
   16e3c:	0011      	movs	r1, r2
   16e3e:	0018      	movs	r0, r3
   16e40:	4baf      	ldr	r3, [pc, #700]	; (17100 <processOnSMS+0x2114>)
   16e42:	4798      	blx	r3
				strcat(resep_msg,"\n");
   16e44:	230c      	movs	r3, #12
   16e46:	2208      	movs	r2, #8
   16e48:	4694      	mov	ip, r2
   16e4a:	44bc      	add	ip, r7
   16e4c:	4463      	add	r3, ip
   16e4e:	0018      	movs	r0, r3
   16e50:	4ba4      	ldr	r3, [pc, #656]	; (170e4 <processOnSMS+0x20f8>)
   16e52:	4798      	blx	r3
   16e54:	0003      	movs	r3, r0
   16e56:	001a      	movs	r2, r3
   16e58:	230c      	movs	r3, #12
   16e5a:	2108      	movs	r1, #8
   16e5c:	468c      	mov	ip, r1
   16e5e:	44bc      	add	ip, r7
   16e60:	4463      	add	r3, ip
   16e62:	189a      	adds	r2, r3, r2
   16e64:	4ba4      	ldr	r3, [pc, #656]	; (170f8 <processOnSMS+0x210c>)
   16e66:	0010      	movs	r0, r2
   16e68:	0019      	movs	r1, r3
   16e6a:	2302      	movs	r3, #2
   16e6c:	001a      	movs	r2, r3
   16e6e:	4ba3      	ldr	r3, [pc, #652]	; (170fc <processOnSMS+0x2110>)
   16e70:	4798      	blx	r3
				strcat(resep_msg,"ADDED SUCCESSFULLY");
   16e72:	230c      	movs	r3, #12
   16e74:	2208      	movs	r2, #8
   16e76:	4694      	mov	ip, r2
   16e78:	44bc      	add	ip, r7
   16e7a:	4463      	add	r3, ip
   16e7c:	0018      	movs	r0, r3
   16e7e:	4b99      	ldr	r3, [pc, #612]	; (170e4 <processOnSMS+0x20f8>)
   16e80:	4798      	blx	r3
   16e82:	0003      	movs	r3, r0
   16e84:	001a      	movs	r2, r3
   16e86:	230c      	movs	r3, #12
   16e88:	2108      	movs	r1, #8
   16e8a:	468c      	mov	ip, r1
   16e8c:	44bc      	add	ip, r7
   16e8e:	4463      	add	r3, ip
   16e90:	189a      	adds	r2, r3, r2
   16e92:	4b9c      	ldr	r3, [pc, #624]	; (17104 <processOnSMS+0x2118>)
   16e94:	0010      	movs	r0, r2
   16e96:	0019      	movs	r1, r3
   16e98:	2313      	movs	r3, #19
   16e9a:	001a      	movs	r2, r3
   16e9c:	4b97      	ldr	r3, [pc, #604]	; (170fc <processOnSMS+0x2110>)
   16e9e:	4798      	blx	r3
   16ea0:	e182      	b.n	171a8 <processOnSMS+0x21bc>
			}
		}
	}
	else if (StringstartsWith(received_command,"M-"))
   16ea2:	4a99      	ldr	r2, [pc, #612]	; (17108 <processOnSMS+0x211c>)
   16ea4:	68fb      	ldr	r3, [r7, #12]
   16ea6:	0011      	movs	r1, r2
   16ea8:	0018      	movs	r0, r3
   16eaa:	4b8d      	ldr	r3, [pc, #564]	; (170e0 <processOnSMS+0x20f4>)
   16eac:	4798      	blx	r3
   16eae:	1e03      	subs	r3, r0, #0
   16eb0:	d100      	bne.n	16eb4 <processOnSMS+0x1ec8>
   16eb2:	e091      	b.n	16fd8 <processOnSMS+0x1fec>
	{
		memmove(received_command,received_command+2,strlen(received_command));
   16eb4:	68fb      	ldr	r3, [r7, #12]
   16eb6:	1c9c      	adds	r4, r3, #2
   16eb8:	68fb      	ldr	r3, [r7, #12]
   16eba:	0018      	movs	r0, r3
   16ebc:	4b89      	ldr	r3, [pc, #548]	; (170e4 <processOnSMS+0x20f8>)
   16ebe:	4798      	blx	r3
   16ec0:	0002      	movs	r2, r0
   16ec2:	68fb      	ldr	r3, [r7, #12]
   16ec4:	0021      	movs	r1, r4
   16ec6:	0018      	movs	r0, r3
   16ec8:	4b87      	ldr	r3, [pc, #540]	; (170e8 <processOnSMS+0x20fc>)
   16eca:	4798      	blx	r3
		bool result = removeNumber(received_command);
   16ecc:	2385      	movs	r3, #133	; 0x85
   16ece:	005b      	lsls	r3, r3, #1
   16ed0:	2208      	movs	r2, #8
   16ed2:	18ba      	adds	r2, r7, r2
   16ed4:	18d4      	adds	r4, r2, r3
   16ed6:	68fb      	ldr	r3, [r7, #12]
   16ed8:	0018      	movs	r0, r3
   16eda:	4b8c      	ldr	r3, [pc, #560]	; (1710c <processOnSMS+0x2120>)
   16edc:	4798      	blx	r3
   16ede:	0003      	movs	r3, r0
   16ee0:	7023      	strb	r3, [r4, #0]
		if(result)
   16ee2:	2385      	movs	r3, #133	; 0x85
   16ee4:	005b      	lsls	r3, r3, #1
   16ee6:	2208      	movs	r2, #8
   16ee8:	4694      	mov	ip, r2
   16eea:	44bc      	add	ip, r7
   16eec:	4463      	add	r3, ip
   16eee:	781b      	ldrb	r3, [r3, #0]
   16ef0:	2b00      	cmp	r3, #0
   16ef2:	d100      	bne.n	16ef6 <processOnSMS+0x1f0a>
   16ef4:	e158      	b.n	171a8 <processOnSMS+0x21bc>
		{
			incomingSMSProcessed=true;
   16ef6:	2330      	movs	r3, #48	; 0x30
   16ef8:	33ff      	adds	r3, #255	; 0xff
   16efa:	2208      	movs	r2, #8
   16efc:	4694      	mov	ip, r2
   16efe:	44bc      	add	ip, r7
   16f00:	4463      	add	r3, ip
   16f02:	2201      	movs	r2, #1
   16f04:	701a      	strb	r2, [r3, #0]
			
			if (response_sms_processed_cmd == true)
   16f06:	4b7a      	ldr	r3, [pc, #488]	; (170f0 <processOnSMS+0x2104>)
   16f08:	2298      	movs	r2, #152	; 0x98
   16f0a:	0052      	lsls	r2, r2, #1
   16f0c:	4694      	mov	ip, r2
   16f0e:	2208      	movs	r2, #8
   16f10:	4690      	mov	r8, r2
   16f12:	44b8      	add	r8, r7
   16f14:	44c4      	add	ip, r8
   16f16:	4463      	add	r3, ip
   16f18:	781b      	ldrb	r3, [r3, #0]
   16f1a:	2b00      	cmp	r3, #0
   16f1c:	d100      	bne.n	16f20 <processOnSMS+0x1f34>
   16f1e:	e143      	b.n	171a8 <processOnSMS+0x21bc>
			{
				strcpy(resep_msg,"MOBILE NO:");
   16f20:	230c      	movs	r3, #12
   16f22:	2208      	movs	r2, #8
   16f24:	4694      	mov	ip, r2
   16f26:	44bc      	add	ip, r7
   16f28:	4463      	add	r3, ip
   16f2a:	4a72      	ldr	r2, [pc, #456]	; (170f4 <processOnSMS+0x2108>)
   16f2c:	ca03      	ldmia	r2!, {r0, r1}
   16f2e:	c303      	stmia	r3!, {r0, r1}
   16f30:	8811      	ldrh	r1, [r2, #0]
   16f32:	8019      	strh	r1, [r3, #0]
   16f34:	7892      	ldrb	r2, [r2, #2]
   16f36:	709a      	strb	r2, [r3, #2]
				strcat(resep_msg,"\n");
   16f38:	230c      	movs	r3, #12
   16f3a:	2208      	movs	r2, #8
   16f3c:	4694      	mov	ip, r2
   16f3e:	44bc      	add	ip, r7
   16f40:	4463      	add	r3, ip
   16f42:	0018      	movs	r0, r3
   16f44:	4b67      	ldr	r3, [pc, #412]	; (170e4 <processOnSMS+0x20f8>)
   16f46:	4798      	blx	r3
   16f48:	0003      	movs	r3, r0
   16f4a:	001a      	movs	r2, r3
   16f4c:	230c      	movs	r3, #12
   16f4e:	2108      	movs	r1, #8
   16f50:	468c      	mov	ip, r1
   16f52:	44bc      	add	ip, r7
   16f54:	4463      	add	r3, ip
   16f56:	189a      	adds	r2, r3, r2
   16f58:	4b67      	ldr	r3, [pc, #412]	; (170f8 <processOnSMS+0x210c>)
   16f5a:	0010      	movs	r0, r2
   16f5c:	0019      	movs	r1, r3
   16f5e:	2302      	movs	r3, #2
   16f60:	001a      	movs	r2, r3
   16f62:	4b66      	ldr	r3, [pc, #408]	; (170fc <processOnSMS+0x2110>)
   16f64:	4798      	blx	r3
				strcat(resep_msg,received_command);
   16f66:	68fa      	ldr	r2, [r7, #12]
   16f68:	230c      	movs	r3, #12
   16f6a:	2108      	movs	r1, #8
   16f6c:	468c      	mov	ip, r1
   16f6e:	44bc      	add	ip, r7
   16f70:	4463      	add	r3, ip
   16f72:	0011      	movs	r1, r2
   16f74:	0018      	movs	r0, r3
   16f76:	4b62      	ldr	r3, [pc, #392]	; (17100 <processOnSMS+0x2114>)
   16f78:	4798      	blx	r3
				strcat(resep_msg,"\n");
   16f7a:	230c      	movs	r3, #12
   16f7c:	2208      	movs	r2, #8
   16f7e:	4694      	mov	ip, r2
   16f80:	44bc      	add	ip, r7
   16f82:	4463      	add	r3, ip
   16f84:	0018      	movs	r0, r3
   16f86:	4b57      	ldr	r3, [pc, #348]	; (170e4 <processOnSMS+0x20f8>)
   16f88:	4798      	blx	r3
   16f8a:	0003      	movs	r3, r0
   16f8c:	001a      	movs	r2, r3
   16f8e:	230c      	movs	r3, #12
   16f90:	2108      	movs	r1, #8
   16f92:	468c      	mov	ip, r1
   16f94:	44bc      	add	ip, r7
   16f96:	4463      	add	r3, ip
   16f98:	189a      	adds	r2, r3, r2
   16f9a:	4b57      	ldr	r3, [pc, #348]	; (170f8 <processOnSMS+0x210c>)
   16f9c:	0010      	movs	r0, r2
   16f9e:	0019      	movs	r1, r3
   16fa0:	2302      	movs	r3, #2
   16fa2:	001a      	movs	r2, r3
   16fa4:	4b55      	ldr	r3, [pc, #340]	; (170fc <processOnSMS+0x2110>)
   16fa6:	4798      	blx	r3
				strcat(resep_msg,"REMOVED SUCCESSFULLY");
   16fa8:	230c      	movs	r3, #12
   16faa:	2208      	movs	r2, #8
   16fac:	4694      	mov	ip, r2
   16fae:	44bc      	add	ip, r7
   16fb0:	4463      	add	r3, ip
   16fb2:	0018      	movs	r0, r3
   16fb4:	4b4b      	ldr	r3, [pc, #300]	; (170e4 <processOnSMS+0x20f8>)
   16fb6:	4798      	blx	r3
   16fb8:	0003      	movs	r3, r0
   16fba:	001a      	movs	r2, r3
   16fbc:	230c      	movs	r3, #12
   16fbe:	2108      	movs	r1, #8
   16fc0:	468c      	mov	ip, r1
   16fc2:	44bc      	add	ip, r7
   16fc4:	4463      	add	r3, ip
   16fc6:	189a      	adds	r2, r3, r2
   16fc8:	4b51      	ldr	r3, [pc, #324]	; (17110 <processOnSMS+0x2124>)
   16fca:	0010      	movs	r0, r2
   16fcc:	0019      	movs	r1, r3
   16fce:	2315      	movs	r3, #21
   16fd0:	001a      	movs	r2, r3
   16fd2:	4b4a      	ldr	r3, [pc, #296]	; (170fc <processOnSMS+0x2110>)
   16fd4:	4798      	blx	r3
   16fd6:	e0e7      	b.n	171a8 <processOnSMS+0x21bc>
			}
		}
	}
	else if (StringstartsWith(received_command,"AM+"))
   16fd8:	4a4e      	ldr	r2, [pc, #312]	; (17114 <processOnSMS+0x2128>)
   16fda:	68fb      	ldr	r3, [r7, #12]
   16fdc:	0011      	movs	r1, r2
   16fde:	0018      	movs	r0, r3
   16fe0:	4b3f      	ldr	r3, [pc, #252]	; (170e0 <processOnSMS+0x20f4>)
   16fe2:	4798      	blx	r3
   16fe4:	1e03      	subs	r3, r0, #0
   16fe6:	d042      	beq.n	1706e <processOnSMS+0x2082>
	{
		//if (isNumeric(str))
		{
			memmove(received_command,received_command+3,strlen(received_command));
   16fe8:	68fb      	ldr	r3, [r7, #12]
   16fea:	1cdc      	adds	r4, r3, #3
   16fec:	68fb      	ldr	r3, [r7, #12]
   16fee:	0018      	movs	r0, r3
   16ff0:	4b3c      	ldr	r3, [pc, #240]	; (170e4 <processOnSMS+0x20f8>)
   16ff2:	4798      	blx	r3
   16ff4:	0002      	movs	r2, r0
   16ff6:	68fb      	ldr	r3, [r7, #12]
   16ff8:	0021      	movs	r1, r4
   16ffa:	0018      	movs	r0, r3
   16ffc:	4b3a      	ldr	r3, [pc, #232]	; (170e8 <processOnSMS+0x20fc>)
   16ffe:	4798      	blx	r3
			bool result  = addAlternateNumber(received_command);
   17000:	230a      	movs	r3, #10
   17002:	33ff      	adds	r3, #255	; 0xff
   17004:	2208      	movs	r2, #8
   17006:	18ba      	adds	r2, r7, r2
   17008:	18d4      	adds	r4, r2, r3
   1700a:	68fb      	ldr	r3, [r7, #12]
   1700c:	0018      	movs	r0, r3
   1700e:	4b42      	ldr	r3, [pc, #264]	; (17118 <processOnSMS+0x212c>)
   17010:	4798      	blx	r3
   17012:	0003      	movs	r3, r0
   17014:	7023      	strb	r3, [r4, #0]
			incomingSMSProcessed=true;
   17016:	2330      	movs	r3, #48	; 0x30
   17018:	33ff      	adds	r3, #255	; 0xff
   1701a:	2208      	movs	r2, #8
   1701c:	4694      	mov	ip, r2
   1701e:	44bc      	add	ip, r7
   17020:	4463      	add	r3, ip
   17022:	2201      	movs	r2, #1
   17024:	701a      	strb	r2, [r3, #0]
			if(result)
   17026:	230a      	movs	r3, #10
   17028:	33ff      	adds	r3, #255	; 0xff
   1702a:	2208      	movs	r2, #8
   1702c:	4694      	mov	ip, r2
   1702e:	44bc      	add	ip, r7
   17030:	4463      	add	r3, ip
   17032:	781b      	ldrb	r3, [r3, #0]
   17034:	2b00      	cmp	r3, #0
   17036:	d100      	bne.n	1703a <processOnSMS+0x204e>
   17038:	e0b6      	b.n	171a8 <processOnSMS+0x21bc>
			{
				if (response_sms_processed_cmd == true)
   1703a:	4b2d      	ldr	r3, [pc, #180]	; (170f0 <processOnSMS+0x2104>)
   1703c:	2298      	movs	r2, #152	; 0x98
   1703e:	0052      	lsls	r2, r2, #1
   17040:	4694      	mov	ip, r2
   17042:	2208      	movs	r2, #8
   17044:	4690      	mov	r8, r2
   17046:	44b8      	add	r8, r7
   17048:	44c4      	add	ip, r8
   1704a:	4463      	add	r3, ip
   1704c:	781b      	ldrb	r3, [r3, #0]
   1704e:	2b00      	cmp	r3, #0
   17050:	d100      	bne.n	17054 <processOnSMS+0x2068>
   17052:	e0a9      	b.n	171a8 <processOnSMS+0x21bc>
				{
					strcpy(resep_msg,"ALTERNATE MOBILE NO ADD SUCCESS");
   17054:	230c      	movs	r3, #12
   17056:	2208      	movs	r2, #8
   17058:	4694      	mov	ip, r2
   1705a:	44bc      	add	ip, r7
   1705c:	4463      	add	r3, ip
   1705e:	4a2f      	ldr	r2, [pc, #188]	; (1711c <processOnSMS+0x2130>)
   17060:	ca13      	ldmia	r2!, {r0, r1, r4}
   17062:	c313      	stmia	r3!, {r0, r1, r4}
   17064:	ca13      	ldmia	r2!, {r0, r1, r4}
   17066:	c313      	stmia	r3!, {r0, r1, r4}
   17068:	ca03      	ldmia	r2!, {r0, r1}
   1706a:	c303      	stmia	r3!, {r0, r1}
   1706c:	e09c      	b.n	171a8 <processOnSMS+0x21bc>
				}
			}
		}
	}
	else if (StringstartsWith(received_command,"MM+"))
   1706e:	4a2c      	ldr	r2, [pc, #176]	; (17120 <processOnSMS+0x2134>)
   17070:	68fb      	ldr	r3, [r7, #12]
   17072:	0011      	movs	r1, r2
   17074:	0018      	movs	r0, r3
   17076:	4b1a      	ldr	r3, [pc, #104]	; (170e0 <processOnSMS+0x20f4>)
   17078:	4798      	blx	r3
   1707a:	1e03      	subs	r3, r0, #0
   1707c:	d056      	beq.n	1712c <processOnSMS+0x2140>
	{
		//if (isNumeric(str))
		{
			memmove(received_command,received_command+3,strlen(received_command));
   1707e:	68fb      	ldr	r3, [r7, #12]
   17080:	1cdc      	adds	r4, r3, #3
   17082:	68fb      	ldr	r3, [r7, #12]
   17084:	0018      	movs	r0, r3
   17086:	4b17      	ldr	r3, [pc, #92]	; (170e4 <processOnSMS+0x20f8>)
   17088:	4798      	blx	r3
   1708a:	0002      	movs	r2, r0
   1708c:	68fb      	ldr	r3, [r7, #12]
   1708e:	0021      	movs	r1, r4
   17090:	0018      	movs	r0, r3
   17092:	4b15      	ldr	r3, [pc, #84]	; (170e8 <processOnSMS+0x20fc>)
   17094:	4798      	blx	r3
			addM2MNumber(received_command);
   17096:	68fb      	ldr	r3, [r7, #12]
   17098:	0018      	movs	r0, r3
   1709a:	4b22      	ldr	r3, [pc, #136]	; (17124 <processOnSMS+0x2138>)
   1709c:	4798      	blx	r3
			incomingSMSProcessed=true;
   1709e:	2330      	movs	r3, #48	; 0x30
   170a0:	33ff      	adds	r3, #255	; 0xff
   170a2:	2208      	movs	r2, #8
   170a4:	4694      	mov	ip, r2
   170a6:	44bc      	add	ip, r7
   170a8:	4463      	add	r3, ip
   170aa:	2201      	movs	r2, #1
   170ac:	701a      	strb	r2, [r3, #0]

			if (response_sms_processed_cmd == true)
   170ae:	4b10      	ldr	r3, [pc, #64]	; (170f0 <processOnSMS+0x2104>)
   170b0:	2298      	movs	r2, #152	; 0x98
   170b2:	0052      	lsls	r2, r2, #1
   170b4:	4694      	mov	ip, r2
   170b6:	2208      	movs	r2, #8
   170b8:	4690      	mov	r8, r2
   170ba:	44b8      	add	r8, r7
   170bc:	44c4      	add	ip, r8
   170be:	4463      	add	r3, ip
   170c0:	781b      	ldrb	r3, [r3, #0]
   170c2:	2b00      	cmp	r3, #0
   170c4:	d070      	beq.n	171a8 <processOnSMS+0x21bc>
			{
				strcpy(resep_msg,"M2M NO. ADDED");
   170c6:	230c      	movs	r3, #12
   170c8:	2208      	movs	r2, #8
   170ca:	4694      	mov	ip, r2
   170cc:	44bc      	add	ip, r7
   170ce:	4463      	add	r3, ip
   170d0:	4a15      	ldr	r2, [pc, #84]	; (17128 <processOnSMS+0x213c>)
   170d2:	ca13      	ldmia	r2!, {r0, r1, r4}
   170d4:	c313      	stmia	r3!, {r0, r1, r4}
   170d6:	8812      	ldrh	r2, [r2, #0]
   170d8:	801a      	strh	r2, [r3, #0]
   170da:	e065      	b.n	171a8 <processOnSMS+0x21bc>
   170dc:	0002a2a8 	.word	0x0002a2a8
   170e0:	00014201 	.word	0x00014201
   170e4:	00028de7 	.word	0x00028de7
   170e8:	00028b33 	.word	0x00028b33
   170ec:	00010ef1 	.word	0x00010ef1
   170f0:	fffffed2 	.word	0xfffffed2
   170f4:	0002a2ac 	.word	0x0002a2ac
   170f8:	0002a2b8 	.word	0x0002a2b8
   170fc:	00028b21 	.word	0x00028b21
   17100:	00028da1 	.word	0x00028da1
   17104:	0002a2bc 	.word	0x0002a2bc
   17108:	0002a2d0 	.word	0x0002a2d0
   1710c:	00010fed 	.word	0x00010fed
   17110:	0002a2d4 	.word	0x0002a2d4
   17114:	0002a2ec 	.word	0x0002a2ec
   17118:	00011239 	.word	0x00011239
   1711c:	0002a2f0 	.word	0x0002a2f0
   17120:	0002a310 	.word	0x0002a310
   17124:	00010c49 	.word	0x00010c49
   17128:	0002a314 	.word	0x0002a314
			}
		}
	}
	
	else if (StringstartsWith(received_command,"MR+"))
   1712c:	4a44      	ldr	r2, [pc, #272]	; (17240 <processOnSMS+0x2254>)
   1712e:	68fb      	ldr	r3, [r7, #12]
   17130:	0011      	movs	r1, r2
   17132:	0018      	movs	r0, r3
   17134:	4b43      	ldr	r3, [pc, #268]	; (17244 <processOnSMS+0x2258>)
   17136:	4798      	blx	r3
   17138:	1e03      	subs	r3, r0, #0
   1713a:	d035      	beq.n	171a8 <processOnSMS+0x21bc>
	{
		//if (isNumeric(str))
		if(factory_settings_parameter_struct.ENABLE_M2M)
   1713c:	4b42      	ldr	r3, [pc, #264]	; (17248 <processOnSMS+0x225c>)
   1713e:	78db      	ldrb	r3, [r3, #3]
   17140:	2b00      	cmp	r3, #0
   17142:	d031      	beq.n	171a8 <processOnSMS+0x21bc>
		{
			memmove(received_command,received_command+3,strlen(received_command));
   17144:	68fb      	ldr	r3, [r7, #12]
   17146:	1cdc      	adds	r4, r3, #3
   17148:	68fb      	ldr	r3, [r7, #12]
   1714a:	0018      	movs	r0, r3
   1714c:	4b3f      	ldr	r3, [pc, #252]	; (1724c <processOnSMS+0x2260>)
   1714e:	4798      	blx	r3
   17150:	0002      	movs	r2, r0
   17152:	68fb      	ldr	r3, [r7, #12]
   17154:	0021      	movs	r1, r4
   17156:	0018      	movs	r0, r3
   17158:	4b3d      	ldr	r3, [pc, #244]	; (17250 <processOnSMS+0x2264>)
   1715a:	4798      	blx	r3
			incomingSMSProcessed=true;
   1715c:	2330      	movs	r3, #48	; 0x30
   1715e:	33ff      	adds	r3, #255	; 0xff
   17160:	2208      	movs	r2, #8
   17162:	4694      	mov	ip, r2
   17164:	44bc      	add	ip, r7
   17166:	4463      	add	r3, ip
   17168:	2201      	movs	r2, #1
   1716a:	701a      	strb	r2, [r3, #0]
			
			addM2MRemoteNumber(received_command);
   1716c:	68fb      	ldr	r3, [r7, #12]
   1716e:	0018      	movs	r0, r3
   17170:	4b38      	ldr	r3, [pc, #224]	; (17254 <processOnSMS+0x2268>)
   17172:	4798      	blx	r3
			if (response_sms_processed_cmd == true)
   17174:	4b38      	ldr	r3, [pc, #224]	; (17258 <processOnSMS+0x226c>)
   17176:	2298      	movs	r2, #152	; 0x98
   17178:	0052      	lsls	r2, r2, #1
   1717a:	4694      	mov	ip, r2
   1717c:	2208      	movs	r2, #8
   1717e:	4690      	mov	r8, r2
   17180:	44b8      	add	r8, r7
   17182:	44c4      	add	ip, r8
   17184:	4463      	add	r3, ip
   17186:	781b      	ldrb	r3, [r3, #0]
   17188:	2b00      	cmp	r3, #0
   1718a:	d00d      	beq.n	171a8 <processOnSMS+0x21bc>
			{
				strcpy(resep_msg,"M2M REMOTE NO. ADDED");
   1718c:	230c      	movs	r3, #12
   1718e:	2208      	movs	r2, #8
   17190:	4694      	mov	ip, r2
   17192:	44bc      	add	ip, r7
   17194:	4463      	add	r3, ip
   17196:	4a31      	ldr	r2, [pc, #196]	; (1725c <processOnSMS+0x2270>)
   17198:	ca13      	ldmia	r2!, {r0, r1, r4}
   1719a:	c313      	stmia	r3!, {r0, r1, r4}
   1719c:	ca03      	ldmia	r2!, {r0, r1}
   1719e:	c303      	stmia	r3!, {r0, r1}
   171a0:	7812      	ldrb	r2, [r2, #0]
   171a2:	701a      	strb	r2, [r3, #0]
   171a4:	e000      	b.n	171a8 <processOnSMS+0x21bc>
		if (alternateNumber_struct.alterNumberPresent)
   171a6:	46c0      	nop			; (mov r8, r8)
			}
		}
	}
	
	if (response_sms_processed_cmd == true)
   171a8:	4b2b      	ldr	r3, [pc, #172]	; (17258 <processOnSMS+0x226c>)
   171aa:	2298      	movs	r2, #152	; 0x98
   171ac:	0052      	lsls	r2, r2, #1
   171ae:	4694      	mov	ip, r2
   171b0:	2208      	movs	r2, #8
   171b2:	4690      	mov	r8, r2
   171b4:	44b8      	add	r8, r7
   171b6:	44c4      	add	ip, r8
   171b8:	4463      	add	r3, ip
   171ba:	781b      	ldrb	r3, [r3, #0]
   171bc:	2b00      	cmp	r3, #0
   171be:	d03a      	beq.n	17236 <processOnSMS+0x224a>
	{
		if(!incomingSMSProcessed)
   171c0:	2330      	movs	r3, #48	; 0x30
   171c2:	33ff      	adds	r3, #255	; 0xff
   171c4:	2208      	movs	r2, #8
   171c6:	4694      	mov	ip, r2
   171c8:	44bc      	add	ip, r7
   171ca:	4463      	add	r3, ip
   171cc:	781b      	ldrb	r3, [r3, #0]
   171ce:	2201      	movs	r2, #1
   171d0:	4053      	eors	r3, r2
   171d2:	b2db      	uxtb	r3, r3
   171d4:	2b00      	cmp	r3, #0
   171d6:	d011      	beq.n	171fc <processOnSMS+0x2210>
		{
			sprintf(resep_msg,"ERROR : %s",*copy_received_command);
   171d8:	238c      	movs	r3, #140	; 0x8c
   171da:	005b      	lsls	r3, r3, #1
   171dc:	2208      	movs	r2, #8
   171de:	4694      	mov	ip, r2
   171e0:	44bc      	add	ip, r7
   171e2:	4463      	add	r3, ip
   171e4:	681b      	ldr	r3, [r3, #0]
   171e6:	781b      	ldrb	r3, [r3, #0]
   171e8:	001a      	movs	r2, r3
   171ea:	491d      	ldr	r1, [pc, #116]	; (17260 <processOnSMS+0x2274>)
   171ec:	230c      	movs	r3, #12
   171ee:	2008      	movs	r0, #8
   171f0:	4684      	mov	ip, r0
   171f2:	44bc      	add	ip, r7
   171f4:	4463      	add	r3, ip
   171f6:	0018      	movs	r0, r3
   171f8:	4b1a      	ldr	r3, [pc, #104]	; (17264 <processOnSMS+0x2278>)
   171fa:	4798      	blx	r3
		}
		setCallStateOnLCD(LCDCALLSTATE_OUTGOINGSMS,phone_number,false);
   171fc:	23a4      	movs	r3, #164	; 0xa4
   171fe:	005b      	lsls	r3, r3, #1
   17200:	2208      	movs	r2, #8
   17202:	4694      	mov	ip, r2
   17204:	44bc      	add	ip, r7
   17206:	4463      	add	r3, ip
   17208:	681b      	ldr	r3, [r3, #0]
   1720a:	2200      	movs	r2, #0
   1720c:	0019      	movs	r1, r3
   1720e:	2005      	movs	r0, #5
   17210:	4b15      	ldr	r3, [pc, #84]	; (17268 <processOnSMS+0x227c>)
   17212:	4798      	blx	r3
		gsm_send_sms(phone_number,resep_msg);
   17214:	230c      	movs	r3, #12
   17216:	2208      	movs	r2, #8
   17218:	18ba      	adds	r2, r7, r2
   1721a:	18d2      	adds	r2, r2, r3
   1721c:	23a4      	movs	r3, #164	; 0xa4
   1721e:	005b      	lsls	r3, r3, #1
   17220:	2108      	movs	r1, #8
   17222:	468c      	mov	ip, r1
   17224:	44bc      	add	ip, r7
   17226:	4463      	add	r3, ip
   17228:	681b      	ldr	r3, [r3, #0]
   1722a:	0011      	movs	r1, r2
   1722c:	0018      	movs	r0, r3
   1722e:	4b0f      	ldr	r3, [pc, #60]	; (1726c <processOnSMS+0x2280>)
   17230:	4798      	blx	r3
   17232:	e000      	b.n	17236 <processOnSMS+0x224a>
		return;
   17234:	46c0      	nop			; (mov r8, r8)
	}
}
   17236:	46bd      	mov	sp, r7
   17238:	b04e      	add	sp, #312	; 0x138
   1723a:	bc04      	pop	{r2}
   1723c:	4690      	mov	r8, r2
   1723e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   17240:	0002a324 	.word	0x0002a324
   17244:	00014201 	.word	0x00014201
   17248:	2000082c 	.word	0x2000082c
   1724c:	00028de7 	.word	0x00028de7
   17250:	00028b33 	.word	0x00028b33
   17254:	00010cb1 	.word	0x00010cb1
   17258:	fffffed2 	.word	0xfffffed2
   1725c:	0002a328 	.word	0x0002a328
   17260:	0002a340 	.word	0x0002a340
   17264:	00028d5d 	.word	0x00028d5d
   17268:	0001cf2d 	.word	0x0001cf2d
   1726c:	00012b91 	.word	0x00012b91

00017270 <buildStatusMessage>:

void buildStatusMessage(char *resep_msg)
{
   17270:	b5f0      	push	{r4, r5, r6, r7, lr}
   17272:	b091      	sub	sp, #68	; 0x44
   17274:	af06      	add	r7, sp, #24
   17276:	6078      	str	r0, [r7, #4]
	uint8_t network= gsm_getsignalstrength();
   17278:	2327      	movs	r3, #39	; 0x27
   1727a:	18fc      	adds	r4, r7, r3
   1727c:	4b32      	ldr	r3, [pc, #200]	; (17348 <buildStatusMessage+0xd8>)
   1727e:	4798      	blx	r3
   17280:	0003      	movs	r3, r0
   17282:	7023      	strb	r3, [r4, #0]
	char strACState[10],strSeq[7],strMotor[5];
	switch(structThreePhase_state.u8t_phase_ac_state)
   17284:	4b31      	ldr	r3, [pc, #196]	; (1734c <buildStatusMessage+0xdc>)
   17286:	785b      	ldrb	r3, [r3, #1]
   17288:	b2db      	uxtb	r3, r3
   1728a:	2b02      	cmp	r3, #2
   1728c:	d009      	beq.n	172a2 <buildStatusMessage+0x32>
   1728e:	2b03      	cmp	r3, #3
   17290:	d10d      	bne.n	172ae <buildStatusMessage+0x3e>
	{
		case AC_3PH:
		sprintf(strACState,(const uint8_t*)("ON"));
   17292:	231c      	movs	r3, #28
   17294:	18fb      	adds	r3, r7, r3
   17296:	4a2e      	ldr	r2, [pc, #184]	; (17350 <buildStatusMessage+0xe0>)
   17298:	8811      	ldrh	r1, [r2, #0]
   1729a:	8019      	strh	r1, [r3, #0]
   1729c:	7892      	ldrb	r2, [r2, #2]
   1729e:	709a      	strb	r2, [r3, #2]
		break;
   172a0:	e00a      	b.n	172b8 <buildStatusMessage+0x48>
		case AC_2PH:
		sprintf(strACState,(const uint8_t*)("2 PHASE"));
   172a2:	231c      	movs	r3, #28
   172a4:	18fb      	adds	r3, r7, r3
   172a6:	4a2b      	ldr	r2, [pc, #172]	; (17354 <buildStatusMessage+0xe4>)
   172a8:	ca03      	ldmia	r2!, {r0, r1}
   172aa:	c303      	stmia	r3!, {r0, r1}
		break;
   172ac:	e004      	b.n	172b8 <buildStatusMessage+0x48>
		default:
		sprintf(strACState,(const uint8_t*)("OFF"));
   172ae:	231c      	movs	r3, #28
   172b0:	18fb      	adds	r3, r7, r3
   172b2:	4a29      	ldr	r2, [pc, #164]	; (17358 <buildStatusMessage+0xe8>)
   172b4:	601a      	str	r2, [r3, #0]
		break;
   172b6:	46c0      	nop			; (mov r8, r8)
	}
	
	if(structThreePhase_state.u8t_phase_sequence_flag == THREEPHASE_OK)
   172b8:	4b24      	ldr	r3, [pc, #144]	; (1734c <buildStatusMessage+0xdc>)
   172ba:	781b      	ldrb	r3, [r3, #0]
   172bc:	b2db      	uxtb	r3, r3
   172be:	2b02      	cmp	r3, #2
   172c0:	d107      	bne.n	172d2 <buildStatusMessage+0x62>
	{
		sprintf(strSeq,(const uint8_t*)("OK"));
   172c2:	2314      	movs	r3, #20
   172c4:	18fb      	adds	r3, r7, r3
   172c6:	4a25      	ldr	r2, [pc, #148]	; (1735c <buildStatusMessage+0xec>)
   172c8:	8811      	ldrh	r1, [r2, #0]
   172ca:	8019      	strh	r1, [r3, #0]
   172cc:	7892      	ldrb	r2, [r2, #2]
   172ce:	709a      	strb	r2, [r3, #2]
   172d0:	e006      	b.n	172e0 <buildStatusMessage+0x70>
	}
	else
	{
		sprintf(strSeq,(const uint8_t*)("ERROR"));
   172d2:	2314      	movs	r3, #20
   172d4:	18fb      	adds	r3, r7, r3
   172d6:	4a22      	ldr	r2, [pc, #136]	; (17360 <buildStatusMessage+0xf0>)
   172d8:	6811      	ldr	r1, [r2, #0]
   172da:	6019      	str	r1, [r3, #0]
   172dc:	8892      	ldrh	r2, [r2, #4]
   172de:	809a      	strh	r2, [r3, #4]
	}
	
	if(getMotorState())
   172e0:	4b20      	ldr	r3, [pc, #128]	; (17364 <buildStatusMessage+0xf4>)
   172e2:	4798      	blx	r3
   172e4:	1e03      	subs	r3, r0, #0
   172e6:	d007      	beq.n	172f8 <buildStatusMessage+0x88>
	{
		sprintf(strMotor,(const uint8_t*)("ON"));
   172e8:	230c      	movs	r3, #12
   172ea:	18fb      	adds	r3, r7, r3
   172ec:	4a18      	ldr	r2, [pc, #96]	; (17350 <buildStatusMessage+0xe0>)
   172ee:	8811      	ldrh	r1, [r2, #0]
   172f0:	8019      	strh	r1, [r3, #0]
   172f2:	7892      	ldrb	r2, [r2, #2]
   172f4:	709a      	strb	r2, [r3, #2]
   172f6:	e003      	b.n	17300 <buildStatusMessage+0x90>
	}
	else
	{
		sprintf(strMotor,(const uint8_t*)("OFF"));
   172f8:	230c      	movs	r3, #12
   172fa:	18fb      	adds	r3, r7, r3
   172fc:	4a16      	ldr	r2, [pc, #88]	; (17358 <buildStatusMessage+0xe8>)
   172fe:	601a      	str	r2, [r3, #0]
	}
	
	sprintf(resep_msg,"RY: %d YB: %d BR: %d\nAC: %s\nSequence: %s\nMotor: %s\nCurrent: %dA\nNetwork: %d",
   17300:	4b19      	ldr	r3, [pc, #100]	; (17368 <buildStatusMessage+0xf8>)
   17302:	681c      	ldr	r4, [r3, #0]
   17304:	4b18      	ldr	r3, [pc, #96]	; (17368 <buildStatusMessage+0xf8>)
   17306:	685d      	ldr	r5, [r3, #4]
   17308:	4b17      	ldr	r3, [pc, #92]	; (17368 <buildStatusMessage+0xf8>)
   1730a:	689b      	ldr	r3, [r3, #8]
	Analog_Parameter_Struct.PhaseRY_Voltage,Analog_Parameter_Struct.PhaseYB_Voltage,Analog_Parameter_Struct.PhaseBR_Voltage,
	strACState,strSeq,strMotor,Analog_Parameter_Struct.Motor_Current_IntPart,network);
   1730c:	4a16      	ldr	r2, [pc, #88]	; (17368 <buildStatusMessage+0xf8>)
   1730e:	8a92      	ldrh	r2, [r2, #20]
   17310:	b292      	uxth	r2, r2
	sprintf(resep_msg,"RY: %d YB: %d BR: %d\nAC: %s\nSequence: %s\nMotor: %s\nCurrent: %dA\nNetwork: %d",
   17312:	0016      	movs	r6, r2
   17314:	2227      	movs	r2, #39	; 0x27
   17316:	18ba      	adds	r2, r7, r2
   17318:	7812      	ldrb	r2, [r2, #0]
   1731a:	4914      	ldr	r1, [pc, #80]	; (1736c <buildStatusMessage+0xfc>)
   1731c:	6878      	ldr	r0, [r7, #4]
   1731e:	9205      	str	r2, [sp, #20]
   17320:	9604      	str	r6, [sp, #16]
   17322:	220c      	movs	r2, #12
   17324:	18ba      	adds	r2, r7, r2
   17326:	9203      	str	r2, [sp, #12]
   17328:	2214      	movs	r2, #20
   1732a:	18ba      	adds	r2, r7, r2
   1732c:	9202      	str	r2, [sp, #8]
   1732e:	221c      	movs	r2, #28
   17330:	18ba      	adds	r2, r7, r2
   17332:	9201      	str	r2, [sp, #4]
   17334:	9300      	str	r3, [sp, #0]
   17336:	002b      	movs	r3, r5
   17338:	0022      	movs	r2, r4
   1733a:	4c0d      	ldr	r4, [pc, #52]	; (17370 <buildStatusMessage+0x100>)
   1733c:	47a0      	blx	r4
}
   1733e:	46c0      	nop			; (mov r8, r8)
   17340:	46bd      	mov	sp, r7
   17342:	b00b      	add	sp, #44	; 0x2c
   17344:	bdf0      	pop	{r4, r5, r6, r7, pc}
   17346:	46c0      	nop			; (mov r8, r8)
   17348:	000128e1 	.word	0x000128e1
   1734c:	20000948 	.word	0x20000948
   17350:	0002a34c 	.word	0x0002a34c
   17354:	0002a350 	.word	0x0002a350
   17358:	0046464f 	.word	0x0046464f
   1735c:	0002a358 	.word	0x0002a358
   17360:	0002a35c 	.word	0x0002a35c
   17364:	0001b021 	.word	0x0001b021
   17368:	200008e8 	.word	0x200008e8
   1736c:	0002a364 	.word	0x0002a364
   17370:	00028d5d 	.word	0x00028d5d

00017374 <checkNumber>:


bool checkNumber(char *number)
{
   17374:	b580      	push	{r7, lr}
   17376:	b082      	sub	sp, #8
   17378:	af00      	add	r7, sp, #0
   1737a:	6078      	str	r0, [r7, #4]
	if ((isAdmin(number)) || (checkExists(number)<user_count_struct.total_user_no_count))
   1737c:	687b      	ldr	r3, [r7, #4]
   1737e:	0018      	movs	r0, r3
   17380:	4b0a      	ldr	r3, [pc, #40]	; (173ac <checkNumber+0x38>)
   17382:	4798      	blx	r3
   17384:	1e03      	subs	r3, r0, #0
   17386:	d109      	bne.n	1739c <checkNumber+0x28>
   17388:	687b      	ldr	r3, [r7, #4]
   1738a:	0018      	movs	r0, r3
   1738c:	4b08      	ldr	r3, [pc, #32]	; (173b0 <checkNumber+0x3c>)
   1738e:	4798      	blx	r3
   17390:	0003      	movs	r3, r0
   17392:	001a      	movs	r2, r3
   17394:	4b07      	ldr	r3, [pc, #28]	; (173b4 <checkNumber+0x40>)
   17396:	785b      	ldrb	r3, [r3, #1]
   17398:	429a      	cmp	r2, r3
   1739a:	d201      	bcs.n	173a0 <checkNumber+0x2c>
	{
		return true;
   1739c:	2301      	movs	r3, #1
   1739e:	e000      	b.n	173a2 <checkNumber+0x2e>
	}
	else
	{
		return false;
   173a0:	2300      	movs	r3, #0
	}
}
   173a2:	0018      	movs	r0, r3
   173a4:	46bd      	mov	sp, r7
   173a6:	b002      	add	sp, #8
   173a8:	bd80      	pop	{r7, pc}
   173aa:	46c0      	nop			; (mov r8, r8)
   173ac:	00011a79 	.word	0x00011a79
   173b0:	00010ded 	.word	0x00010ded
   173b4:	20000814 	.word	0x20000814

000173b8 <checkNoCallTime>:

bool checkNoCallTime(void)
{
   173b8:	b580      	push	{r7, lr}
   173ba:	b082      	sub	sp, #8
   173bc:	af00      	add	r7, sp, #0
	uint8_t globalHours, globalMinutes;
	getSystemTime(&globalHours,&globalMinutes);
   173be:	1dba      	adds	r2, r7, #6
   173c0:	1dfb      	adds	r3, r7, #7
   173c2:	0011      	movs	r1, r2
   173c4:	0018      	movs	r0, r3
   173c6:	4b31      	ldr	r3, [pc, #196]	; (1748c <checkNoCallTime+0xd4>)
   173c8:	4798      	blx	r3
	if(globalHours >= (user_settings_parameter_struct.noCallStartTimeHourAddress) && globalHours <=(user_settings_parameter_struct.noCallStopTimeHourAddress))
   173ca:	4b31      	ldr	r3, [pc, #196]	; (17490 <checkNoCallTime+0xd8>)
   173cc:	7a9b      	ldrb	r3, [r3, #10]
   173ce:	b2da      	uxtb	r2, r3
   173d0:	1dfb      	adds	r3, r7, #7
   173d2:	781b      	ldrb	r3, [r3, #0]
   173d4:	429a      	cmp	r2, r3
   173d6:	d854      	bhi.n	17482 <checkNoCallTime+0xca>
   173d8:	4b2d      	ldr	r3, [pc, #180]	; (17490 <checkNoCallTime+0xd8>)
   173da:	7b1b      	ldrb	r3, [r3, #12]
   173dc:	b2da      	uxtb	r2, r3
   173de:	1dfb      	adds	r3, r7, #7
   173e0:	781b      	ldrb	r3, [r3, #0]
   173e2:	429a      	cmp	r2, r3
   173e4:	d34d      	bcc.n	17482 <checkNoCallTime+0xca>
	{
		if(user_settings_parameter_struct.noCallStartTimeHourAddress==user_settings_parameter_struct.noCallStopTimeHourAddress)
   173e6:	4b2a      	ldr	r3, [pc, #168]	; (17490 <checkNoCallTime+0xd8>)
   173e8:	7a9b      	ldrb	r3, [r3, #10]
   173ea:	b2da      	uxtb	r2, r3
   173ec:	4b28      	ldr	r3, [pc, #160]	; (17490 <checkNoCallTime+0xd8>)
   173ee:	7b1b      	ldrb	r3, [r3, #12]
   173f0:	b2db      	uxtb	r3, r3
   173f2:	429a      	cmp	r2, r3
   173f4:	d111      	bne.n	1741a <checkNoCallTime+0x62>
		{
			if(globalMinutes>=(user_settings_parameter_struct.noCallStartTimeMinuteAddress) && globalMinutes<=(user_settings_parameter_struct.noCallStopTimeMinuteAddress))
   173f6:	4b26      	ldr	r3, [pc, #152]	; (17490 <checkNoCallTime+0xd8>)
   173f8:	7adb      	ldrb	r3, [r3, #11]
   173fa:	b2da      	uxtb	r2, r3
   173fc:	1dbb      	adds	r3, r7, #6
   173fe:	781b      	ldrb	r3, [r3, #0]
   17400:	429a      	cmp	r2, r3
   17402:	d808      	bhi.n	17416 <checkNoCallTime+0x5e>
   17404:	4b22      	ldr	r3, [pc, #136]	; (17490 <checkNoCallTime+0xd8>)
   17406:	7b5b      	ldrb	r3, [r3, #13]
   17408:	b2da      	uxtb	r2, r3
   1740a:	1dbb      	adds	r3, r7, #6
   1740c:	781b      	ldrb	r3, [r3, #0]
   1740e:	429a      	cmp	r2, r3
   17410:	d301      	bcc.n	17416 <checkNoCallTime+0x5e>
			return true;
   17412:	2301      	movs	r3, #1
   17414:	e036      	b.n	17484 <checkNoCallTime+0xcc>
			else
			return false;
   17416:	2300      	movs	r3, #0
   17418:	e034      	b.n	17484 <checkNoCallTime+0xcc>
		}
		if(globalHours==user_settings_parameter_struct.noCallStartTimeHourAddress)
   1741a:	4b1d      	ldr	r3, [pc, #116]	; (17490 <checkNoCallTime+0xd8>)
   1741c:	7a9b      	ldrb	r3, [r3, #10]
   1741e:	b2da      	uxtb	r2, r3
   17420:	1dfb      	adds	r3, r7, #7
   17422:	781b      	ldrb	r3, [r3, #0]
   17424:	429a      	cmp	r2, r3
   17426:	d10a      	bne.n	1743e <checkNoCallTime+0x86>
		{
			if(globalMinutes>=user_settings_parameter_struct.noCallStartTimeMinuteAddress)
   17428:	4b19      	ldr	r3, [pc, #100]	; (17490 <checkNoCallTime+0xd8>)
   1742a:	7adb      	ldrb	r3, [r3, #11]
   1742c:	b2da      	uxtb	r2, r3
   1742e:	1dbb      	adds	r3, r7, #6
   17430:	781b      	ldrb	r3, [r3, #0]
   17432:	429a      	cmp	r2, r3
   17434:	d801      	bhi.n	1743a <checkNoCallTime+0x82>
			return true;
   17436:	2301      	movs	r3, #1
   17438:	e024      	b.n	17484 <checkNoCallTime+0xcc>
			else
			return false;
   1743a:	2300      	movs	r3, #0
   1743c:	e022      	b.n	17484 <checkNoCallTime+0xcc>
		}
		if(globalHours==user_settings_parameter_struct.noCallStopTimeHourAddress)
   1743e:	4b14      	ldr	r3, [pc, #80]	; (17490 <checkNoCallTime+0xd8>)
   17440:	7b1b      	ldrb	r3, [r3, #12]
   17442:	b2da      	uxtb	r2, r3
   17444:	1dfb      	adds	r3, r7, #7
   17446:	781b      	ldrb	r3, [r3, #0]
   17448:	429a      	cmp	r2, r3
   1744a:	d10a      	bne.n	17462 <checkNoCallTime+0xaa>
		{
			if(globalMinutes<=(user_settings_parameter_struct.noCallStopTimeMinuteAddress))
   1744c:	4b10      	ldr	r3, [pc, #64]	; (17490 <checkNoCallTime+0xd8>)
   1744e:	7b5b      	ldrb	r3, [r3, #13]
   17450:	b2da      	uxtb	r2, r3
   17452:	1dbb      	adds	r3, r7, #6
   17454:	781b      	ldrb	r3, [r3, #0]
   17456:	429a      	cmp	r2, r3
   17458:	d301      	bcc.n	1745e <checkNoCallTime+0xa6>
			return true;
   1745a:	2301      	movs	r3, #1
   1745c:	e012      	b.n	17484 <checkNoCallTime+0xcc>
			else
			return false;
   1745e:	2300      	movs	r3, #0
   17460:	e010      	b.n	17484 <checkNoCallTime+0xcc>
		}
		if(globalHours > (user_settings_parameter_struct.noCallStartTimeHourAddress) && globalHours < (user_settings_parameter_struct.noCallStopTimeHourAddress))
   17462:	4b0b      	ldr	r3, [pc, #44]	; (17490 <checkNoCallTime+0xd8>)
   17464:	7a9b      	ldrb	r3, [r3, #10]
   17466:	b2da      	uxtb	r2, r3
   17468:	1dfb      	adds	r3, r7, #7
   1746a:	781b      	ldrb	r3, [r3, #0]
   1746c:	429a      	cmp	r2, r3
   1746e:	d208      	bcs.n	17482 <checkNoCallTime+0xca>
   17470:	4b07      	ldr	r3, [pc, #28]	; (17490 <checkNoCallTime+0xd8>)
   17472:	7b1b      	ldrb	r3, [r3, #12]
   17474:	b2da      	uxtb	r2, r3
   17476:	1dfb      	adds	r3, r7, #7
   17478:	781b      	ldrb	r3, [r3, #0]
   1747a:	429a      	cmp	r2, r3
   1747c:	d901      	bls.n	17482 <checkNoCallTime+0xca>
		return true;
   1747e:	2301      	movs	r3, #1
   17480:	e000      	b.n	17484 <checkNoCallTime+0xcc>
	}
	return false;
   17482:	2300      	movs	r3, #0
}
   17484:	0018      	movs	r0, r3
   17486:	46bd      	mov	sp, r7
   17488:	b002      	add	sp, #8
   1748a:	bd80      	pop	{r7, pc}
   1748c:	000176cd 	.word	0x000176cd
   17490:	20000854 	.word	0x20000854

00017494 <verifyRemoteNumber>:

void verifyRemoteNumber(void)
{
   17494:	b580      	push	{r7, lr}
   17496:	af00      	add	r7, sp, #0
	sendSMS(("VMM01"),true,SEND_TO_M2M_REMOTE);
   17498:	4b04      	ldr	r3, [pc, #16]	; (174ac <verifyRemoteNumber+0x18>)
   1749a:	2201      	movs	r2, #1
   1749c:	2101      	movs	r1, #1
   1749e:	0018      	movs	r0, r3
   174a0:	4b03      	ldr	r3, [pc, #12]	; (174b0 <verifyRemoteNumber+0x1c>)
   174a2:	4798      	blx	r3
}
   174a4:	46c0      	nop			; (mov r8, r8)
   174a6:	46bd      	mov	sp, r7
   174a8:	bd80      	pop	{r7, pc}
   174aa:	46c0      	nop			; (mov r8, r8)
   174ac:	0002a3b0 	.word	0x0002a3b0
   174b0:	000174b5 	.word	0x000174b5

000174b4 <sendSMS>:

void sendSMS(char *msg, bool predefMsg, uint8_t isM2M)  ////void sendSMS(char *msg, bool predefMsg = false, uint8_t isM2M);
{
   174b4:	b580      	push	{r7, lr}
   174b6:	b08e      	sub	sp, #56	; 0x38
   174b8:	af00      	add	r7, sp, #0
   174ba:	6078      	str	r0, [r7, #4]
   174bc:	0008      	movs	r0, r1
   174be:	0011      	movs	r1, r2
   174c0:	1cfb      	adds	r3, r7, #3
   174c2:	1c02      	adds	r2, r0, #0
   174c4:	701a      	strb	r2, [r3, #0]
   174c6:	1cbb      	adds	r3, r7, #2
   174c8:	1c0a      	adds	r2, r1, #0
   174ca:	701a      	strb	r2, [r3, #0]
	inCall=true;
   174cc:	4b55      	ldr	r3, [pc, #340]	; (17624 <sendSMS+0x170>)
   174ce:	2201      	movs	r2, #1
   174d0:	701a      	strb	r2, [r3, #0]
	if (!predefMsg)
   174d2:	1cfb      	adds	r3, r7, #3
   174d4:	781b      	ldrb	r3, [r3, #0]
   174d6:	2201      	movs	r2, #1
   174d8:	4053      	eors	r3, r2
   174da:	b2db      	uxtb	r3, r3
   174dc:	2b00      	cmp	r3, #0
   174de:	d048      	beq.n	17572 <sendSMS+0xbe>
	{
		switch(actionType)
   174e0:	4b51      	ldr	r3, [pc, #324]	; (17628 <sendSMS+0x174>)
   174e2:	781b      	ldrb	r3, [r3, #0]
   174e4:	3b43      	subs	r3, #67	; 0x43
   174e6:	2b12      	cmp	r3, #18
   174e8:	d900      	bls.n	174ec <sendSMS+0x38>
   174ea:	e096      	b.n	1761a <sendSMS+0x166>
   174ec:	009a      	lsls	r2, r3, #2
   174ee:	4b4f      	ldr	r3, [pc, #316]	; (1762c <sendSMS+0x178>)
   174f0:	18d3      	adds	r3, r2, r3
   174f2:	681b      	ldr	r3, [r3, #0]
   174f4:	469f      	mov	pc, r3
		{
			case 'S':
			strcat(msg,STR_MOTOR);
   174f6:	687b      	ldr	r3, [r7, #4]
   174f8:	0018      	movs	r0, r3
   174fa:	4b4d      	ldr	r3, [pc, #308]	; (17630 <sendSMS+0x17c>)
   174fc:	4798      	blx	r3
   174fe:	0003      	movs	r3, r0
   17500:	001a      	movs	r2, r3
   17502:	687b      	ldr	r3, [r7, #4]
   17504:	189a      	adds	r2, r3, r2
   17506:	4b4b      	ldr	r3, [pc, #300]	; (17634 <sendSMS+0x180>)
   17508:	0010      	movs	r0, r2
   1750a:	0019      	movs	r1, r3
   1750c:	2307      	movs	r3, #7
   1750e:	001a      	movs	r2, r3
   17510:	4b49      	ldr	r3, [pc, #292]	; (17638 <sendSMS+0x184>)
   17512:	4798      	blx	r3
			strcat(msg,STR_ON);
   17514:	687b      	ldr	r3, [r7, #4]
   17516:	0018      	movs	r0, r3
   17518:	4b45      	ldr	r3, [pc, #276]	; (17630 <sendSMS+0x17c>)
   1751a:	4798      	blx	r3
   1751c:	0003      	movs	r3, r0
   1751e:	001a      	movs	r2, r3
   17520:	687b      	ldr	r3, [r7, #4]
   17522:	189a      	adds	r2, r3, r2
   17524:	4b45      	ldr	r3, [pc, #276]	; (1763c <sendSMS+0x188>)
   17526:	0010      	movs	r0, r2
   17528:	0019      	movs	r1, r3
   1752a:	2303      	movs	r3, #3
   1752c:	001a      	movs	r2, r3
   1752e:	4b42      	ldr	r3, [pc, #264]	; (17638 <sendSMS+0x184>)
   17530:	4798      	blx	r3
			break;
   17532:	e01e      	b.n	17572 <sendSMS+0xbe>
			case 'O':
			case 'U':
			case 'C':
			case 'F':
			strcat(msg,STR_MOTOR);
   17534:	687b      	ldr	r3, [r7, #4]
   17536:	0018      	movs	r0, r3
   17538:	4b3d      	ldr	r3, [pc, #244]	; (17630 <sendSMS+0x17c>)
   1753a:	4798      	blx	r3
   1753c:	0003      	movs	r3, r0
   1753e:	001a      	movs	r2, r3
   17540:	687b      	ldr	r3, [r7, #4]
   17542:	189a      	adds	r2, r3, r2
   17544:	4b3b      	ldr	r3, [pc, #236]	; (17634 <sendSMS+0x180>)
   17546:	0010      	movs	r0, r2
   17548:	0019      	movs	r1, r3
   1754a:	2307      	movs	r3, #7
   1754c:	001a      	movs	r2, r3
   1754e:	4b3a      	ldr	r3, [pc, #232]	; (17638 <sendSMS+0x184>)
   17550:	4798      	blx	r3
			strcat(msg,STR_OFF);
   17552:	687b      	ldr	r3, [r7, #4]
   17554:	0018      	movs	r0, r3
   17556:	4b36      	ldr	r3, [pc, #216]	; (17630 <sendSMS+0x17c>)
   17558:	4798      	blx	r3
   1755a:	0003      	movs	r3, r0
   1755c:	001a      	movs	r2, r3
   1755e:	687b      	ldr	r3, [r7, #4]
   17560:	189a      	adds	r2, r3, r2
   17562:	4b37      	ldr	r3, [pc, #220]	; (17640 <sendSMS+0x18c>)
   17564:	0010      	movs	r0, r2
   17566:	0019      	movs	r1, r3
   17568:	2304      	movs	r3, #4
   1756a:	001a      	movs	r2, r3
   1756c:	4b32      	ldr	r3, [pc, #200]	; (17638 <sendSMS+0x184>)
   1756e:	4798      	blx	r3
			break;
   17570:	46c0      	nop			; (mov r8, r8)
		}
	}
	
	char phone_number[20];
	
	if(isM2M==SEND_TO_M2M_MASTER)
   17572:	1cbb      	adds	r3, r7, #2
   17574:	781b      	ldrb	r3, [r3, #0]
   17576:	2b02      	cmp	r3, #2
   17578:	d105      	bne.n	17586 <sendSMS+0xd2>
	{
		getM2MNumber(phone_number);
   1757a:	2324      	movs	r3, #36	; 0x24
   1757c:	18fb      	adds	r3, r7, r3
   1757e:	0018      	movs	r0, r3
   17580:	4b30      	ldr	r3, [pc, #192]	; (17644 <sendSMS+0x190>)
   17582:	4798      	blx	r3
   17584:	e034      	b.n	175f0 <sendSMS+0x13c>
	}
	else if (isM2M==SEND_TO_M2M_REMOTE)
   17586:	1cbb      	adds	r3, r7, #2
   17588:	781b      	ldrb	r3, [r3, #0]
   1758a:	2b01      	cmp	r3, #1
   1758c:	d109      	bne.n	175a2 <sendSMS+0xee>
	{
		if (factory_settings_parameter_struct.ENABLE_M2M)
   1758e:	4b2e      	ldr	r3, [pc, #184]	; (17648 <sendSMS+0x194>)
   17590:	78db      	ldrb	r3, [r3, #3]
   17592:	2b00      	cmp	r3, #0
   17594:	d02c      	beq.n	175f0 <sendSMS+0x13c>
		{
			getM2MRemoteNumber(phone_number);
   17596:	2324      	movs	r3, #36	; 0x24
   17598:	18fb      	adds	r3, r7, r3
   1759a:	0018      	movs	r0, r3
   1759c:	4b2b      	ldr	r3, [pc, #172]	; (1764c <sendSMS+0x198>)
   1759e:	4798      	blx	r3
   175a0:	e026      	b.n	175f0 <sendSMS+0x13c>
		}
	}
	else
	{
		if (isMsgFromAdmin)
   175a2:	4b2b      	ldr	r3, [pc, #172]	; (17650 <sendSMS+0x19c>)
   175a4:	781b      	ldrb	r3, [r3, #0]
   175a6:	2b00      	cmp	r3, #0
   175a8:	d01d      	beq.n	175e6 <sendSMS+0x132>
		{
			struct mobile_no_struct mobile_no;
			memset(page_data, '\0', sizeof(page_data));
   175aa:	4b2a      	ldr	r3, [pc, #168]	; (17654 <sendSMS+0x1a0>)
   175ac:	223c      	movs	r2, #60	; 0x3c
   175ae:	2100      	movs	r1, #0
   175b0:	0018      	movs	r0, r3
   175b2:	4b29      	ldr	r3, [pc, #164]	; (17658 <sendSMS+0x1a4>)
   175b4:	4798      	blx	r3
			eeprom_emulator_read_page(ADMIN_1_MOBILE_NUMBER_PAGE, page_data);
   175b6:	4b27      	ldr	r3, [pc, #156]	; (17654 <sendSMS+0x1a0>)
   175b8:	0019      	movs	r1, r3
   175ba:	2003      	movs	r0, #3
   175bc:	4b27      	ldr	r3, [pc, #156]	; (1765c <sendSMS+0x1a8>)
   175be:	4798      	blx	r3
			memcpy(&mobile_no,page_data,sizeof(mobile_no));
   175c0:	230c      	movs	r3, #12
   175c2:	18fa      	adds	r2, r7, r3
   175c4:	4b23      	ldr	r3, [pc, #140]	; (17654 <sendSMS+0x1a0>)
   175c6:	0010      	movs	r0, r2
   175c8:	0019      	movs	r1, r3
   175ca:	2318      	movs	r3, #24
   175cc:	001a      	movs	r2, r3
   175ce:	4b1a      	ldr	r3, [pc, #104]	; (17638 <sendSMS+0x184>)
   175d0:	4798      	blx	r3
			strcpy(phone_number,mobile_no.mobile_no_ee);
   175d2:	230c      	movs	r3, #12
   175d4:	18fb      	adds	r3, r7, r3
   175d6:	1d1a      	adds	r2, r3, #4
   175d8:	2324      	movs	r3, #36	; 0x24
   175da:	18fb      	adds	r3, r7, r3
   175dc:	0011      	movs	r1, r2
   175de:	0018      	movs	r0, r3
   175e0:	4b1f      	ldr	r3, [pc, #124]	; (17660 <sendSMS+0x1ac>)
   175e2:	4798      	blx	r3
   175e4:	e004      	b.n	175f0 <sendSMS+0x13c>
		}
		else
		{
			getActiveNumber(phone_number);
   175e6:	2324      	movs	r3, #36	; 0x24
   175e8:	18fb      	adds	r3, r7, r3
   175ea:	0018      	movs	r0, r3
   175ec:	4b1d      	ldr	r3, [pc, #116]	; (17664 <sendSMS+0x1b0>)
   175ee:	4798      	blx	r3
		}
	}
	setCallStateOnLCD(LCDCALLSTATE_OUTGOINGSMS,phone_number,false);
   175f0:	2324      	movs	r3, #36	; 0x24
   175f2:	18fb      	adds	r3, r7, r3
   175f4:	2200      	movs	r2, #0
   175f6:	0019      	movs	r1, r3
   175f8:	2005      	movs	r0, #5
   175fa:	4b1b      	ldr	r3, [pc, #108]	; (17668 <sendSMS+0x1b4>)
   175fc:	4798      	blx	r3
	gsm_send_sms(phone_number,msg);
   175fe:	687a      	ldr	r2, [r7, #4]
   17600:	2324      	movs	r3, #36	; 0x24
   17602:	18fb      	adds	r3, r7, r3
   17604:	0011      	movs	r1, r2
   17606:	0018      	movs	r0, r3
   17608:	4b18      	ldr	r3, [pc, #96]	; (1766c <sendSMS+0x1b8>)
   1760a:	4798      	blx	r3
	isMsgFromAdmin = false;
   1760c:	4b10      	ldr	r3, [pc, #64]	; (17650 <sendSMS+0x19c>)
   1760e:	2200      	movs	r2, #0
   17610:	701a      	strb	r2, [r3, #0]
	inCall=false;
   17612:	4b04      	ldr	r3, [pc, #16]	; (17624 <sendSMS+0x170>)
   17614:	2200      	movs	r2, #0
   17616:	701a      	strb	r2, [r3, #0]
   17618:	e000      	b.n	1761c <sendSMS+0x168>
			return;
   1761a:	46c0      	nop			; (mov r8, r8)
}
   1761c:	46bd      	mov	sp, r7
   1761e:	b00e      	add	sp, #56	; 0x38
   17620:	bd80      	pop	{r7, pc}
   17622:	46c0      	nop			; (mov r8, r8)
   17624:	2000099c 	.word	0x2000099c
   17628:	20000963 	.word	0x20000963
   1762c:	0002a42c 	.word	0x0002a42c
   17630:	00028de7 	.word	0x00028de7
   17634:	0002a3b8 	.word	0x0002a3b8
   17638:	00028b21 	.word	0x00028b21
   1763c:	0002a34c 	.word	0x0002a34c
   17640:	0002a3c0 	.word	0x0002a3c0
   17644:	00010acd 	.word	0x00010acd
   17648:	2000082c 	.word	0x2000082c
   1764c:	00010b09 	.word	0x00010b09
   17650:	20000977 	.word	0x20000977
   17654:	20000784 	.word	0x20000784
   17658:	00028b57 	.word	0x00028b57
   1765c:	0002385d 	.word	0x0002385d
   17660:	00028dd7 	.word	0x00028dd7
   17664:	00010d21 	.word	0x00010d21
   17668:	0001cf2d 	.word	0x0001cf2d
   1766c:	00012b91 	.word	0x00012b91

00017670 <sendDTMFTone>:

void sendDTMFTone(uint8_t eventNo)
{
   17670:	b580      	push	{r7, lr}
   17672:	b082      	sub	sp, #8
   17674:	af00      	add	r7, sp, #0
   17676:	0002      	movs	r2, r0
   17678:	1dfb      	adds	r3, r7, #7
   1767a:	701a      	strb	r2, [r3, #0]
	if(eventNo==0xFF)
   1767c:	1dfb      	adds	r3, r7, #7
   1767e:	781b      	ldrb	r3, [r3, #0]
   17680:	2bff      	cmp	r3, #255	; 0xff
   17682:	d103      	bne.n	1768c <sendDTMFTone+0x1c>
	{
		gsm_send_DTMF_Tone('A');
   17684:	2041      	movs	r0, #65	; 0x41
   17686:	4b0f      	ldr	r3, [pc, #60]	; (176c4 <sendDTMFTone+0x54>)
   17688:	4798      	blx	r3
	}
	else if (eventNo==1 && factory_settings_parameter_struct.ENABLE_M2M)
	{
		gsm_send_DTMF_Tone('C');
	}
}
   1768a:	e016      	b.n	176ba <sendDTMFTone+0x4a>
	else if (eventNo==0 && factory_settings_parameter_struct.ENABLE_M2M)
   1768c:	1dfb      	adds	r3, r7, #7
   1768e:	781b      	ldrb	r3, [r3, #0]
   17690:	2b00      	cmp	r3, #0
   17692:	d107      	bne.n	176a4 <sendDTMFTone+0x34>
   17694:	4b0c      	ldr	r3, [pc, #48]	; (176c8 <sendDTMFTone+0x58>)
   17696:	78db      	ldrb	r3, [r3, #3]
   17698:	2b00      	cmp	r3, #0
   1769a:	d003      	beq.n	176a4 <sendDTMFTone+0x34>
		gsm_send_DTMF_Tone('D');
   1769c:	2044      	movs	r0, #68	; 0x44
   1769e:	4b09      	ldr	r3, [pc, #36]	; (176c4 <sendDTMFTone+0x54>)
   176a0:	4798      	blx	r3
}
   176a2:	e00a      	b.n	176ba <sendDTMFTone+0x4a>
	else if (eventNo==1 && factory_settings_parameter_struct.ENABLE_M2M)
   176a4:	1dfb      	adds	r3, r7, #7
   176a6:	781b      	ldrb	r3, [r3, #0]
   176a8:	2b01      	cmp	r3, #1
   176aa:	d106      	bne.n	176ba <sendDTMFTone+0x4a>
   176ac:	4b06      	ldr	r3, [pc, #24]	; (176c8 <sendDTMFTone+0x58>)
   176ae:	78db      	ldrb	r3, [r3, #3]
   176b0:	2b00      	cmp	r3, #0
   176b2:	d002      	beq.n	176ba <sendDTMFTone+0x4a>
		gsm_send_DTMF_Tone('C');
   176b4:	2043      	movs	r0, #67	; 0x43
   176b6:	4b03      	ldr	r3, [pc, #12]	; (176c4 <sendDTMFTone+0x54>)
   176b8:	4798      	blx	r3
}
   176ba:	46c0      	nop			; (mov r8, r8)
   176bc:	46bd      	mov	sp, r7
   176be:	b002      	add	sp, #8
   176c0:	bd80      	pop	{r7, pc}
   176c2:	46c0      	nop			; (mov r8, r8)
   176c4:	00013005 	.word	0x00013005
   176c8:	2000082c 	.word	0x2000082c

000176cc <getSystemTime>:

void getSystemTime(uint8_t *Hours, uint8_t *Minutes)
{
   176cc:	b580      	push	{r7, lr}
   176ce:	b082      	sub	sp, #8
   176d0:	af00      	add	r7, sp, #0
   176d2:	6078      	str	r0, [r7, #4]
   176d4:	6039      	str	r1, [r7, #0]
	if (gsm_get_internal_rtc_time() == GSM_ERROR_NONE)
   176d6:	4b09      	ldr	r3, [pc, #36]	; (176fc <getSystemTime+0x30>)
   176d8:	4798      	blx	r3
   176da:	1e03      	subs	r3, r0, #0
   176dc:	d109      	bne.n	176f2 <getSystemTime+0x26>
	{
		*Hours = struct_internal_rtc.Network_hour;
   176de:	4b08      	ldr	r3, [pc, #32]	; (17700 <getSystemTime+0x34>)
   176e0:	78db      	ldrb	r3, [r3, #3]
   176e2:	b2da      	uxtb	r2, r3
   176e4:	687b      	ldr	r3, [r7, #4]
   176e6:	701a      	strb	r2, [r3, #0]
		*Minutes = struct_internal_rtc.Network_minute;
   176e8:	4b05      	ldr	r3, [pc, #20]	; (17700 <getSystemTime+0x34>)
   176ea:	791b      	ldrb	r3, [r3, #4]
   176ec:	b2da      	uxtb	r2, r3
   176ee:	683b      	ldr	r3, [r7, #0]
   176f0:	701a      	strb	r2, [r3, #0]
	}
}
   176f2:	46c0      	nop			; (mov r8, r8)
   176f4:	46bd      	mov	sp, r7
   176f6:	b002      	add	sp, #8
   176f8:	bd80      	pop	{r7, pc}
   176fa:	46c0      	nop			; (mov r8, r8)
   176fc:	000131e5 	.word	0x000131e5
   17700:	20000888 	.word	0x20000888

00017704 <checkSMSForPassCode>:


bool checkSMSForPassCode(char *receivedSMS)
{
   17704:	b590      	push	{r4, r7, lr}
   17706:	b087      	sub	sp, #28
   17708:	af00      	add	r7, sp, #0
   1770a:	6078      	str	r0, [r7, #4]
	char passCode[10]={0};
   1770c:	2308      	movs	r3, #8
   1770e:	18fb      	adds	r3, r7, r3
   17710:	0018      	movs	r0, r3
   17712:	230a      	movs	r3, #10
   17714:	001a      	movs	r2, r3
   17716:	2100      	movs	r1, #0
   17718:	4b1f      	ldr	r3, [pc, #124]	; (17798 <checkSMSForPassCode+0x94>)
   1771a:	4798      	blx	r3
	uint32_t pCodeint = factory_settings_parameter_struct.DeviceId_ee + (factory_settings_parameter_struct.dateCode<<1);
   1771c:	4b1f      	ldr	r3, [pc, #124]	; (1779c <checkSMSForPassCode+0x98>)
   1771e:	689a      	ldr	r2, [r3, #8]
   17720:	4b1e      	ldr	r3, [pc, #120]	; (1779c <checkSMSForPassCode+0x98>)
   17722:	68db      	ldr	r3, [r3, #12]
   17724:	005b      	lsls	r3, r3, #1
   17726:	18d3      	adds	r3, r2, r3
   17728:	617b      	str	r3, [r7, #20]
	pCodeint = pCodeint >> 4;
   1772a:	697b      	ldr	r3, [r7, #20]
   1772c:	091b      	lsrs	r3, r3, #4
   1772e:	617b      	str	r3, [r7, #20]
	pCodeint = pCodeint << 4;
   17730:	697b      	ldr	r3, [r7, #20]
   17732:	011b      	lsls	r3, r3, #4
   17734:	617b      	str	r3, [r7, #20]
	pCodeint = pCodeint % 1000000L;
   17736:	697a      	ldr	r2, [r7, #20]
   17738:	4b19      	ldr	r3, [pc, #100]	; (177a0 <checkSMSForPassCode+0x9c>)
   1773a:	491a      	ldr	r1, [pc, #104]	; (177a4 <checkSMSForPassCode+0xa0>)
   1773c:	0010      	movs	r0, r2
   1773e:	4798      	blx	r3
   17740:	000b      	movs	r3, r1
   17742:	617b      	str	r3, [r7, #20]
	
	sprintf(passCode, "~%u~",pCodeint);
   17744:	697a      	ldr	r2, [r7, #20]
   17746:	4918      	ldr	r1, [pc, #96]	; (177a8 <checkSMSForPassCode+0xa4>)
   17748:	2308      	movs	r3, #8
   1774a:	18fb      	adds	r3, r7, r3
   1774c:	0018      	movs	r0, r3
   1774e:	4b17      	ldr	r3, [pc, #92]	; (177ac <checkSMSForPassCode+0xa8>)
   17750:	4798      	blx	r3
	
	if(strstr(receivedSMS,passCode))							//check passCode exists
   17752:	2308      	movs	r3, #8
   17754:	18fa      	adds	r2, r7, r3
   17756:	687b      	ldr	r3, [r7, #4]
   17758:	0011      	movs	r1, r2
   1775a:	0018      	movs	r0, r3
   1775c:	4b14      	ldr	r3, [pc, #80]	; (177b0 <checkSMSForPassCode+0xac>)
   1775e:	4798      	blx	r3
   17760:	1e03      	subs	r3, r0, #0
   17762:	d013      	beq.n	1778c <checkSMSForPassCode+0x88>
	{
		memmove(receivedSMS,receivedSMS+strlen(passCode),strlen(receivedSMS));		//discard passPhrase
   17764:	2308      	movs	r3, #8
   17766:	18fb      	adds	r3, r7, r3
   17768:	0018      	movs	r0, r3
   1776a:	4b12      	ldr	r3, [pc, #72]	; (177b4 <checkSMSForPassCode+0xb0>)
   1776c:	4798      	blx	r3
   1776e:	0002      	movs	r2, r0
   17770:	687b      	ldr	r3, [r7, #4]
   17772:	189c      	adds	r4, r3, r2
   17774:	687b      	ldr	r3, [r7, #4]
   17776:	0018      	movs	r0, r3
   17778:	4b0e      	ldr	r3, [pc, #56]	; (177b4 <checkSMSForPassCode+0xb0>)
   1777a:	4798      	blx	r3
   1777c:	0002      	movs	r2, r0
   1777e:	687b      	ldr	r3, [r7, #4]
   17780:	0021      	movs	r1, r4
   17782:	0018      	movs	r0, r3
   17784:	4b0c      	ldr	r3, [pc, #48]	; (177b8 <checkSMSForPassCode+0xb4>)
   17786:	4798      	blx	r3
		return true;
   17788:	2301      	movs	r3, #1
   1778a:	e000      	b.n	1778e <checkSMSForPassCode+0x8a>
	}

	return false;
   1778c:	2300      	movs	r3, #0
}
   1778e:	0018      	movs	r0, r3
   17790:	46bd      	mov	sp, r7
   17792:	b007      	add	sp, #28
   17794:	bd90      	pop	{r4, r7, pc}
   17796:	46c0      	nop			; (mov r8, r8)
   17798:	00028b57 	.word	0x00028b57
   1779c:	2000082c 	.word	0x2000082c
   177a0:	000263ed 	.word	0x000263ed
   177a4:	000f4240 	.word	0x000f4240
   177a8:	0002a3c4 	.word	0x0002a3c4
   177ac:	00028d5d 	.word	0x00028d5d
   177b0:	00028e17 	.word	0x00028e17
   177b4:	00028de7 	.word	0x00028de7
   177b8:	00028b33 	.word	0x00028b33

000177bc <sendFWUpdateSMS>:

void sendFWUpdateSMS(void)
{
   177bc:	b590      	push	{r4, r7, lr}
   177be:	b08f      	sub	sp, #60	; 0x3c
   177c0:	af00      	add	r7, sp, #0
	if(bootloader_parameter.firmware_update_process_completed)
   177c2:	4b3c      	ldr	r3, [pc, #240]	; (178b4 <sendFWUpdateSMS+0xf8>)
   177c4:	799b      	ldrb	r3, [r3, #6]
   177c6:	2b00      	cmp	r3, #0
   177c8:	d06f      	beq.n	178aa <sendFWUpdateSMS+0xee>
	{
		char uResp_SMS[25]={0};
   177ca:	231c      	movs	r3, #28
   177cc:	18fb      	adds	r3, r7, r3
   177ce:	0018      	movs	r0, r3
   177d0:	2319      	movs	r3, #25
   177d2:	001a      	movs	r2, r3
   177d4:	2100      	movs	r1, #0
   177d6:	4b38      	ldr	r3, [pc, #224]	; (178b8 <sendFWUpdateSMS+0xfc>)
   177d8:	4798      	blx	r3
		
		/*Firmware update Completed Successfully*/
		if(bootloader_parameter.firmware_update_error_code==0)
   177da:	4b36      	ldr	r3, [pc, #216]	; (178b4 <sendFWUpdateSMS+0xf8>)
   177dc:	79db      	ldrb	r3, [r3, #7]
   177de:	2b00      	cmp	r3, #0
   177e0:	d109      	bne.n	177f6 <sendFWUpdateSMS+0x3a>
		{
			strcpy(uResp_SMS,"F/W Update Completed");
   177e2:	231c      	movs	r3, #28
   177e4:	18fb      	adds	r3, r7, r3
   177e6:	4a35      	ldr	r2, [pc, #212]	; (178bc <sendFWUpdateSMS+0x100>)
   177e8:	ca13      	ldmia	r2!, {r0, r1, r4}
   177ea:	c313      	stmia	r3!, {r0, r1, r4}
   177ec:	ca03      	ldmia	r2!, {r0, r1}
   177ee:	c303      	stmia	r3!, {r0, r1}
   177f0:	7812      	ldrb	r2, [r2, #0]
   177f2:	701a      	strb	r2, [r3, #0]
   177f4:	e008      	b.n	17808 <sendFWUpdateSMS+0x4c>
		}
		/*Error in Firmware update*/
		else
		{
			strcpy(uResp_SMS,"F/W Update Error");
   177f6:	231c      	movs	r3, #28
   177f8:	18fb      	adds	r3, r7, r3
   177fa:	4a31      	ldr	r2, [pc, #196]	; (178c0 <sendFWUpdateSMS+0x104>)
   177fc:	ca13      	ldmia	r2!, {r0, r1, r4}
   177fe:	c313      	stmia	r3!, {r0, r1, r4}
   17800:	6811      	ldr	r1, [r2, #0]
   17802:	6019      	str	r1, [r3, #0]
   17804:	7912      	ldrb	r2, [r2, #4]
   17806:	711a      	strb	r2, [r3, #4]
		}
		
		if(bootloader_parameter.firmware_updater_mobile_no[0]!='0')
   17808:	4b2a      	ldr	r3, [pc, #168]	; (178b4 <sendFWUpdateSMS+0xf8>)
   1780a:	7b1b      	ldrb	r3, [r3, #12]
   1780c:	2b30      	cmp	r3, #48	; 0x30
   1780e:	d007      	beq.n	17820 <sendFWUpdateSMS+0x64>
		{
			gsm_send_sms(bootloader_parameter.firmware_updater_mobile_no,uResp_SMS);
   17810:	231c      	movs	r3, #28
   17812:	18fa      	adds	r2, r7, r3
   17814:	4b2b      	ldr	r3, [pc, #172]	; (178c4 <sendFWUpdateSMS+0x108>)
   17816:	0011      	movs	r1, r2
   17818:	0018      	movs	r0, r3
   1781a:	4b2b      	ldr	r3, [pc, #172]	; (178c8 <sendFWUpdateSMS+0x10c>)
   1781c:	4798      	blx	r3
   1781e:	e01a      	b.n	17856 <sendFWUpdateSMS+0x9a>
		}
		else
		{
			struct mobile_no_struct mobile_no;
			memset(page_data, '\0', sizeof(page_data));
   17820:	4b2a      	ldr	r3, [pc, #168]	; (178cc <sendFWUpdateSMS+0x110>)
   17822:	223c      	movs	r2, #60	; 0x3c
   17824:	2100      	movs	r1, #0
   17826:	0018      	movs	r0, r3
   17828:	4b23      	ldr	r3, [pc, #140]	; (178b8 <sendFWUpdateSMS+0xfc>)
   1782a:	4798      	blx	r3
			eeprom_emulator_read_page(ADMIN_1_MOBILE_NUMBER_PAGE, page_data);
   1782c:	4b27      	ldr	r3, [pc, #156]	; (178cc <sendFWUpdateSMS+0x110>)
   1782e:	0019      	movs	r1, r3
   17830:	2003      	movs	r0, #3
   17832:	4b27      	ldr	r3, [pc, #156]	; (178d0 <sendFWUpdateSMS+0x114>)
   17834:	4798      	blx	r3
			memcpy(&mobile_no,page_data,sizeof(mobile_no));
   17836:	1d3a      	adds	r2, r7, #4
   17838:	4b24      	ldr	r3, [pc, #144]	; (178cc <sendFWUpdateSMS+0x110>)
   1783a:	0010      	movs	r0, r2
   1783c:	0019      	movs	r1, r3
   1783e:	2318      	movs	r3, #24
   17840:	001a      	movs	r2, r3
   17842:	4b24      	ldr	r3, [pc, #144]	; (178d4 <sendFWUpdateSMS+0x118>)
   17844:	4798      	blx	r3

			gsm_send_sms(mobile_no.mobile_no_ee,uResp_SMS);
   17846:	231c      	movs	r3, #28
   17848:	18fa      	adds	r2, r7, r3
   1784a:	1d3b      	adds	r3, r7, #4
   1784c:	3304      	adds	r3, #4
   1784e:	0011      	movs	r1, r2
   17850:	0018      	movs	r0, r3
   17852:	4b1d      	ldr	r3, [pc, #116]	; (178c8 <sendFWUpdateSMS+0x10c>)
   17854:	4798      	blx	r3
		}
		
		bootloader_parameter.ulongintDiscard = 0;
   17856:	4b17      	ldr	r3, [pc, #92]	; (178b4 <sendFWUpdateSMS+0xf8>)
   17858:	2200      	movs	r2, #0
   1785a:	601a      	str	r2, [r3, #0]
		bootloader_parameter.firmware_download_pending = false;
   1785c:	4b15      	ldr	r3, [pc, #84]	; (178b4 <sendFWUpdateSMS+0xf8>)
   1785e:	2200      	movs	r2, #0
   17860:	715a      	strb	r2, [r3, #5]
		bootloader_parameter.firmware_update_process_completed = false;
   17862:	4b14      	ldr	r3, [pc, #80]	; (178b4 <sendFWUpdateSMS+0xf8>)
   17864:	2200      	movs	r2, #0
   17866:	719a      	strb	r2, [r3, #6]
		bootloader_parameter.firmware_update_error_code = 0;
   17868:	4b12      	ldr	r3, [pc, #72]	; (178b4 <sendFWUpdateSMS+0xf8>)
   1786a:	2200      	movs	r2, #0
   1786c:	71da      	strb	r2, [r3, #7]
		bootloader_parameter.retries = 0;
   1786e:	4b11      	ldr	r3, [pc, #68]	; (178b4 <sendFWUpdateSMS+0xf8>)
   17870:	2200      	movs	r2, #0
   17872:	721a      	strb	r2, [r3, #8]
		
		memset(bootloader_parameter.firmware_updater_mobile_no, '\0', sizeof(bootloader_parameter.firmware_updater_mobile_no));
   17874:	4b13      	ldr	r3, [pc, #76]	; (178c4 <sendFWUpdateSMS+0x108>)
   17876:	2210      	movs	r2, #16
   17878:	2100      	movs	r1, #0
   1787a:	0018      	movs	r0, r3
   1787c:	4b0e      	ldr	r3, [pc, #56]	; (178b8 <sendFWUpdateSMS+0xfc>)
   1787e:	4798      	blx	r3
		strcpy(bootloader_parameter.firmware_updater_mobile_no,"0000000000");
   17880:	4b10      	ldr	r3, [pc, #64]	; (178c4 <sendFWUpdateSMS+0x108>)
   17882:	4a15      	ldr	r2, [pc, #84]	; (178d8 <sendFWUpdateSMS+0x11c>)
   17884:	ca03      	ldmia	r2!, {r0, r1}
   17886:	c303      	stmia	r3!, {r0, r1}
   17888:	8811      	ldrh	r1, [r2, #0]
   1788a:	8019      	strh	r1, [r3, #0]
   1788c:	7892      	ldrb	r2, [r2, #2]
   1788e:	709a      	strb	r2, [r3, #2]
		
		memcpy(page_data,&bootloader_parameter,sizeof(bootloader_parameter));
   17890:	4908      	ldr	r1, [pc, #32]	; (178b4 <sendFWUpdateSMS+0xf8>)
   17892:	4b0e      	ldr	r3, [pc, #56]	; (178cc <sendFWUpdateSMS+0x110>)
   17894:	221c      	movs	r2, #28
   17896:	0018      	movs	r0, r3
   17898:	4b0e      	ldr	r3, [pc, #56]	; (178d4 <sendFWUpdateSMS+0x118>)
   1789a:	4798      	blx	r3
		eeprom_emulator_write_page(BOOTLOADER_PARAMETER_PAGE, page_data);
   1789c:	4b0b      	ldr	r3, [pc, #44]	; (178cc <sendFWUpdateSMS+0x110>)
   1789e:	0019      	movs	r1, r3
   178a0:	2000      	movs	r0, #0
   178a2:	4b0e      	ldr	r3, [pc, #56]	; (178dc <sendFWUpdateSMS+0x120>)
   178a4:	4798      	blx	r3
		eeprom_emulator_commit_page_buffer();
   178a6:	4b0e      	ldr	r3, [pc, #56]	; (178e0 <sendFWUpdateSMS+0x124>)
   178a8:	4798      	blx	r3
	}
}
   178aa:	46c0      	nop			; (mov r8, r8)
   178ac:	46bd      	mov	sp, r7
   178ae:	b00f      	add	sp, #60	; 0x3c
   178b0:	bd90      	pop	{r4, r7, pc}
   178b2:	46c0      	nop			; (mov r8, r8)
   178b4:	200007f8 	.word	0x200007f8
   178b8:	00028b57 	.word	0x00028b57
   178bc:	0002a3cc 	.word	0x0002a3cc
   178c0:	0002a3e4 	.word	0x0002a3e4
   178c4:	20000804 	.word	0x20000804
   178c8:	00012b91 	.word	0x00012b91
   178cc:	20000784 	.word	0x20000784
   178d0:	0002385d 	.word	0x0002385d
   178d4:	00028b21 	.word	0x00028b21
   178d8:	0002a3f8 	.word	0x0002a3f8
   178dc:	00023751 	.word	0x00023751
   178e0:	000238f9 	.word	0x000238f9

000178e4 <vTask_GSM_service>:
#define GSM_PWR_AS_OP	GSM_PWR_DDR|=GSM_PWR_POS
#define GSM_PWR_ON		GSM_PWR_PORT|=GSM_PWR_POS
#define GSM_PWR_OFF		GSM_PWR_PORT&=~(GSM_PWR_POS)
//////////////////////////////////////////////////////////////////////////
static void vTask_GSM_service(void *params)
{
   178e4:	b590      	push	{r4, r7, lr}
   178e6:	b0cf      	sub	sp, #316	; 0x13c
   178e8:	af02      	add	r7, sp, #8
   178ea:	6078      	str	r0, [r7, #4]
	
	uint32_t network_update_time = 0;
   178ec:	2300      	movs	r3, #0
   178ee:	2296      	movs	r2, #150	; 0x96
   178f0:	0052      	lsls	r2, r2, #1
   178f2:	18ba      	adds	r2, r7, r2
   178f4:	6013      	str	r3, [r2, #0]
	GSM_PWR_AS_OP;
   178f6:	4bcc      	ldr	r3, [pc, #816]	; (17c28 <vTask_GSM_service+0x344>)
   178f8:	4acb      	ldr	r2, [pc, #812]	; (17c28 <vTask_GSM_service+0x344>)
   178fa:	6812      	ldr	r2, [r2, #0]
   178fc:	2180      	movs	r1, #128	; 0x80
   178fe:	0249      	lsls	r1, r1, #9
   17900:	430a      	orrs	r2, r1
   17902:	601a      	str	r2, [r3, #0]
	
	struct port_config pin_conf_gsm_status;
	port_get_config_defaults(&pin_conf_gsm_status);
   17904:	2388      	movs	r3, #136	; 0x88
   17906:	005b      	lsls	r3, r3, #1
   17908:	18fb      	adds	r3, r7, r3
   1790a:	0018      	movs	r0, r3
   1790c:	4bc7      	ldr	r3, [pc, #796]	; (17c2c <vTask_GSM_service+0x348>)
   1790e:	4798      	blx	r3
	pin_conf_gsm_status.direction  = PORT_PIN_DIR_INPUT;
   17910:	2388      	movs	r3, #136	; 0x88
   17912:	005b      	lsls	r3, r3, #1
   17914:	18fb      	adds	r3, r7, r3
   17916:	2200      	movs	r2, #0
   17918:	701a      	strb	r2, [r3, #0]
	pin_conf_gsm_status.input_pull = PORT_PIN_PULL_NONE;
   1791a:	2388      	movs	r3, #136	; 0x88
   1791c:	005b      	lsls	r3, r3, #1
   1791e:	18fb      	adds	r3, r7, r3
   17920:	2200      	movs	r2, #0
   17922:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(GSM_STATUS_POSITION, &pin_conf_gsm_status);
   17924:	2388      	movs	r3, #136	; 0x88
   17926:	005b      	lsls	r3, r3, #1
   17928:	18fb      	adds	r3, r7, r3
   1792a:	0019      	movs	r1, r3
   1792c:	201b      	movs	r0, #27
   1792e:	4bc0      	ldr	r3, [pc, #768]	; (17c30 <vTask_GSM_service+0x34c>)
   17930:	4798      	blx	r3
	
	gsm_init();
   17932:	4bc0      	ldr	r3, [pc, #768]	; (17c34 <vTask_GSM_service+0x350>)
   17934:	4798      	blx	r3
	
	initialized = false;
   17936:	4bc0      	ldr	r3, [pc, #768]	; (17c38 <vTask_GSM_service+0x354>)
   17938:	2200      	movs	r2, #0
   1793a:	701a      	strb	r2, [r3, #0]
	
	
	inCall=false;
   1793c:	4bbf      	ldr	r3, [pc, #764]	; (17c3c <vTask_GSM_service+0x358>)
   1793e:	2200      	movs	r2, #0
   17940:	701a      	strb	r2, [r3, #0]
	simReInit=false;
   17942:	4bbf      	ldr	r3, [pc, #764]	; (17c40 <vTask_GSM_service+0x35c>)
   17944:	2200      	movs	r2, #0
   17946:	701a      	strb	r2, [r3, #0]
	
	isRinging = false;
   17948:	4bbe      	ldr	r3, [pc, #760]	; (17c44 <vTask_GSM_service+0x360>)
   1794a:	2200      	movs	r2, #0
   1794c:	701a      	strb	r2, [r3, #0]
	
	boolGsm_config_flag			=false;
   1794e:	4bbe      	ldr	r3, [pc, #760]	; (17c48 <vTask_GSM_service+0x364>)
   17950:	2200      	movs	r2, #0
   17952:	701a      	strb	r2, [r3, #0]
	boolOne_Time_Msg_Delete_Flag   =false;
   17954:	4bbd      	ldr	r3, [pc, #756]	; (17c4c <vTask_GSM_service+0x368>)
   17956:	2200      	movs	r2, #0
   17958:	701a      	strb	r2, [r3, #0]
	
	lastRingStateChangeTime=0;
   1795a:	4bbd      	ldr	r3, [pc, #756]	; (17c50 <vTask_GSM_service+0x36c>)
   1795c:	2200      	movs	r2, #0
   1795e:	601a      	str	r2, [r3, #0]
	
	Signal_Strength = 0;
   17960:	4bbc      	ldr	r3, [pc, #752]	; (17c54 <vTask_GSM_service+0x370>)
   17962:	2200      	movs	r2, #0
   17964:	701a      	strb	r2, [r3, #0]
	
	soundWaitTime = 5;
   17966:	4bbc      	ldr	r3, [pc, #752]	; (17c58 <vTask_GSM_service+0x374>)
   17968:	2205      	movs	r2, #5
   1796a:	701a      	strb	r2, [r3, #0]
	bplaySound = false;
   1796c:	4bbb      	ldr	r3, [pc, #748]	; (17c5c <vTask_GSM_service+0x378>)
   1796e:	2200      	movs	r2, #0
   17970:	701a      	strb	r2, [r3, #0]
	
	//actionType = 'N';
	callCutWaitTime = 580;
   17972:	4bbb      	ldr	r3, [pc, #748]	; (17c60 <vTask_GSM_service+0x37c>)
   17974:	2291      	movs	r2, #145	; 0x91
   17976:	0092      	lsls	r2, r2, #2
   17978:	801a      	strh	r2, [r3, #0]
	nr = 0;
   1797a:	4bba      	ldr	r3, [pc, #744]	; (17c64 <vTask_GSM_service+0x380>)
   1797c:	2200      	movs	r2, #0
   1797e:	701a      	strb	r2, [r3, #0]
	currentStatus = 'N';
   17980:	4bb9      	ldr	r3, [pc, #740]	; (17c68 <vTask_GSM_service+0x384>)
   17982:	224e      	movs	r2, #78	; 0x4e
   17984:	701a      	strb	r2, [r3, #0]
	currentCallStatus = 'N';
   17986:	4bb9      	ldr	r3, [pc, #740]	; (17c6c <vTask_GSM_service+0x388>)
   17988:	224e      	movs	r2, #78	; 0x4e
   1798a:	701a      	strb	r2, [r3, #0]
	callAccepted = false;
   1798c:	4bb8      	ldr	r3, [pc, #736]	; (17c70 <vTask_GSM_service+0x38c>)
   1798e:	2200      	movs	r2, #0
   17990:	701a      	strb	r2, [r3, #0]
	freezeIncomingCalls = false;
   17992:	4bb8      	ldr	r3, [pc, #736]	; (17c74 <vTask_GSM_service+0x390>)
   17994:	2200      	movs	r2, #0
   17996:	701a      	strb	r2, [r3, #0]
	obtainNewEvent = true;
   17998:	4bb7      	ldr	r3, [pc, #732]	; (17c78 <vTask_GSM_service+0x394>)
   1799a:	2201      	movs	r2, #1
   1799c:	701a      	strb	r2, [r3, #0]
	isMsgFromAdmin = false;
   1799e:	4bb7      	ldr	r3, [pc, #732]	; (17c7c <vTask_GSM_service+0x398>)
   179a0:	2200      	movs	r2, #0
   179a2:	701a      	strb	r2, [r3, #0]
	eventStaged=false;
   179a4:	4bb6      	ldr	r3, [pc, #728]	; (17c80 <vTask_GSM_service+0x39c>)
   179a6:	2200      	movs	r2, #0
   179a8:	701a      	strb	r2, [r3, #0]
	stagedEventType = 'N';
   179aa:	4bb6      	ldr	r3, [pc, #728]	; (17c84 <vTask_GSM_service+0x3a0>)
   179ac:	224e      	movs	r2, #78	; 0x4e
   179ae:	701a      	strb	r2, [r3, #0]
	isRegisteredNumber=false;
   179b0:	4bb5      	ldr	r3, [pc, #724]	; (17c88 <vTask_GSM_service+0x3a4>)
   179b2:	2200      	movs	r2, #0
   179b4:	701a      	strb	r2, [r3, #0]
	retries=0;
   179b6:	4bb5      	ldr	r3, [pc, #724]	; (17c8c <vTask_GSM_service+0x3a8>)
   179b8:	2200      	movs	r2, #0
   179ba:	701a      	strb	r2, [r3, #0]
	autoNetworkDetection=false;
   179bc:	4bb4      	ldr	r3, [pc, #720]	; (17c90 <vTask_GSM_service+0x3ac>)
   179be:	2200      	movs	r2, #0
   179c0:	701a      	strb	r2, [r3, #0]
	mcuWakeUpFromSleep=false;
   179c2:	4bb4      	ldr	r3, [pc, #720]	; (17c94 <vTask_GSM_service+0x3b0>)
   179c4:	2200      	movs	r2, #0
   179c6:	701a      	strb	r2, [r3, #0]
	
	
	if (factory_settings_parameter_struct.ENABLE_CURRENT)
   179c8:	4bb3      	ldr	r3, [pc, #716]	; (17c98 <vTask_GSM_service+0x3b4>)
   179ca:	785b      	ldrb	r3, [r3, #1]
   179cc:	2b00      	cmp	r3, #0
   179ce:	d002      	beq.n	179d6 <vTask_GSM_service+0xf2>
	{
		zeroPressed=false;
   179d0:	4bb2      	ldr	r3, [pc, #712]	; (17c9c <vTask_GSM_service+0x3b8>)
   179d2:	2200      	movs	r2, #0
   179d4:	701a      	strb	r2, [r3, #0]
	}
	if (factory_settings_parameter_struct.ENABLE_M2M)
   179d6:	4bb0      	ldr	r3, [pc, #704]	; (17c98 <vTask_GSM_service+0x3b4>)
   179d8:	78db      	ldrb	r3, [r3, #3]
   179da:	2b00      	cmp	r3, #0
   179dc:	d012      	beq.n	17a04 <vTask_GSM_service+0x120>
	{
		m2mAck=false;
   179de:	4bb0      	ldr	r3, [pc, #704]	; (17ca0 <vTask_GSM_service+0x3bc>)
   179e0:	2200      	movs	r2, #0
   179e2:	701a      	strb	r2, [r3, #0]
		m2mEventCalls=m2mEventNo=0;
   179e4:	4baf      	ldr	r3, [pc, #700]	; (17ca4 <vTask_GSM_service+0x3c0>)
   179e6:	2200      	movs	r2, #0
   179e8:	701a      	strb	r2, [r3, #0]
   179ea:	4bae      	ldr	r3, [pc, #696]	; (17ca4 <vTask_GSM_service+0x3c0>)
   179ec:	781a      	ldrb	r2, [r3, #0]
   179ee:	4bae      	ldr	r3, [pc, #696]	; (17ca8 <vTask_GSM_service+0x3c4>)
   179f0:	701a      	strb	r2, [r3, #0]
		m2mEventStaged=false;
   179f2:	4bae      	ldr	r3, [pc, #696]	; (17cac <vTask_GSM_service+0x3c8>)
   179f4:	2200      	movs	r2, #0
   179f6:	701a      	strb	r2, [r3, #0]
		m2mEvent=false;
   179f8:	4bad      	ldr	r3, [pc, #692]	; (17cb0 <vTask_GSM_service+0x3cc>)
   179fa:	2200      	movs	r2, #0
   179fc:	701a      	strb	r2, [r3, #0]
		keyPressed=false;
   179fe:	4bad      	ldr	r3, [pc, #692]	; (17cb4 <vTask_GSM_service+0x3d0>)
   17a00:	2200      	movs	r2, #0
   17a02:	701a      	strb	r2, [r3, #0]
	}
	
	if(GSM_STATUS_OK)
   17a04:	201b      	movs	r0, #27
   17a06:	4bac      	ldr	r3, [pc, #688]	; (17cb8 <vTask_GSM_service+0x3d4>)
   17a08:	4798      	blx	r3
   17a0a:	1e03      	subs	r3, r0, #0
   17a0c:	d01a      	beq.n	17a44 <vTask_GSM_service+0x160>
	{
		boolGsm_config_flag			=false;
   17a0e:	4b8e      	ldr	r3, [pc, #568]	; (17c48 <vTask_GSM_service+0x364>)
   17a10:	2200      	movs	r2, #0
   17a12:	701a      	strb	r2, [r3, #0]
		boolOne_Time_Msg_Delete_Flag   =false;
   17a14:	4b8d      	ldr	r3, [pc, #564]	; (17c4c <vTask_GSM_service+0x368>)
   17a16:	2200      	movs	r2, #0
   17a18:	701a      	strb	r2, [r3, #0]
		
		GSM_PWR_ON;
   17a1a:	4ba8      	ldr	r3, [pc, #672]	; (17cbc <vTask_GSM_service+0x3d8>)
   17a1c:	4aa7      	ldr	r2, [pc, #668]	; (17cbc <vTask_GSM_service+0x3d8>)
   17a1e:	6812      	ldr	r2, [r2, #0]
   17a20:	2180      	movs	r1, #128	; 0x80
   17a22:	0249      	lsls	r1, r1, #9
   17a24:	430a      	orrs	r2, r1
   17a26:	601a      	str	r2, [r3, #0]
		vTaskDelay(3000);
   17a28:	4ba5      	ldr	r3, [pc, #660]	; (17cc0 <vTask_GSM_service+0x3dc>)
   17a2a:	0018      	movs	r0, r3
   17a2c:	4ba5      	ldr	r3, [pc, #660]	; (17cc4 <vTask_GSM_service+0x3e0>)
   17a2e:	4798      	blx	r3
		GSM_PWR_OFF;
   17a30:	4ba2      	ldr	r3, [pc, #648]	; (17cbc <vTask_GSM_service+0x3d8>)
   17a32:	4aa2      	ldr	r2, [pc, #648]	; (17cbc <vTask_GSM_service+0x3d8>)
   17a34:	6812      	ldr	r2, [r2, #0]
   17a36:	49a4      	ldr	r1, [pc, #656]	; (17cc8 <vTask_GSM_service+0x3e4>)
   17a38:	400a      	ands	r2, r1
   17a3a:	601a      	str	r2, [r3, #0]
		vTaskDelay(5000);
   17a3c:	4ba3      	ldr	r3, [pc, #652]	; (17ccc <vTask_GSM_service+0x3e8>)
   17a3e:	0018      	movs	r0, r3
   17a40:	4ba0      	ldr	r3, [pc, #640]	; (17cc4 <vTask_GSM_service+0x3e0>)
   17a42:	4798      	blx	r3
	}
	
	isGSMModuleAwake=false;
   17a44:	4ba2      	ldr	r3, [pc, #648]	; (17cd0 <vTask_GSM_service+0x3ec>)
   17a46:	2200      	movs	r2, #0
   17a48:	701a      	strb	r2, [r3, #0]
	port_pin_set_output_level(GSM_DTR_PIN, GSM_DTR_PIN_ACTIVE);
   17a4a:	2101      	movs	r1, #1
   17a4c:	2014      	movs	r0, #20
   17a4e:	4ba1      	ldr	r3, [pc, #644]	; (17cd4 <vTask_GSM_service+0x3f0>)
   17a50:	4798      	blx	r3
	lastGSMCommunicationTime=0;
   17a52:	4ba1      	ldr	r3, [pc, #644]	; (17cd8 <vTask_GSM_service+0x3f4>)
   17a54:	2200      	movs	r2, #0
   17a56:	601a      	str	r2, [r3, #0]
	lastToLastGSMCommunicationTime=0;
   17a58:	4ba0      	ldr	r3, [pc, #640]	; (17cdc <vTask_GSM_service+0x3f8>)
   17a5a:	2200      	movs	r2, #0
   17a5c:	601a      	str	r2, [r3, #0]
	gsm_module_exit_sleep(false);				//to switch DTR pin so that sim remains active
   17a5e:	2000      	movs	r0, #0
   17a60:	4b9f      	ldr	r3, [pc, #636]	; (17ce0 <vTask_GSM_service+0x3fc>)
   17a62:	4798      	blx	r3
	{

		/************************************************************************/
		/*  Check for Call Timer Expire in case GSM Status is not OK            */
		/************************************************************************/
		if (currentStatus == 'I' || currentStatus == 'R')
   17a64:	4b80      	ldr	r3, [pc, #512]	; (17c68 <vTask_GSM_service+0x384>)
   17a66:	781b      	ldrb	r3, [r3, #0]
   17a68:	b2db      	uxtb	r3, r3
   17a6a:	2b49      	cmp	r3, #73	; 0x49
   17a6c:	d004      	beq.n	17a78 <vTask_GSM_service+0x194>
   17a6e:	4b7e      	ldr	r3, [pc, #504]	; (17c68 <vTask_GSM_service+0x384>)
   17a70:	781b      	ldrb	r3, [r3, #0]
   17a72:	b2db      	uxtb	r3, r3
   17a74:	2b52      	cmp	r3, #82	; 0x52
   17a76:	d112      	bne.n	17a9e <vTask_GSM_service+0x1ba>
		{
			if (callTimerExpire())
   17a78:	4b9a      	ldr	r3, [pc, #616]	; (17ce4 <vTask_GSM_service+0x400>)
   17a7a:	4798      	blx	r3
   17a7c:	1e03      	subs	r3, r0, #0
   17a7e:	d00e      	beq.n	17a9e <vTask_GSM_service+0x1ba>
			{
				char t1 = actionType;
   17a80:	2328      	movs	r3, #40	; 0x28
   17a82:	33ff      	adds	r3, #255	; 0xff
   17a84:	18fb      	adds	r3, r7, r3
   17a86:	4a98      	ldr	r2, [pc, #608]	; (17ce8 <vTask_GSM_service+0x404>)
   17a88:	7812      	ldrb	r2, [r2, #0]
   17a8a:	701a      	strb	r2, [r3, #0]
				endCall();
   17a8c:	4b97      	ldr	r3, [pc, #604]	; (17cec <vTask_GSM_service+0x408>)
   17a8e:	4798      	blx	r3
				checkRespSMS(t1);
   17a90:	2328      	movs	r3, #40	; 0x28
   17a92:	33ff      	adds	r3, #255	; 0xff
   17a94:	18fb      	adds	r3, r7, r3
   17a96:	781b      	ldrb	r3, [r3, #0]
   17a98:	0018      	movs	r0, r3
   17a9a:	4b95      	ldr	r3, [pc, #596]	; (17cf0 <vTask_GSM_service+0x40c>)
   17a9c:	4798      	blx	r3
			}
		}
		/************************************************************************/
		
		if (GSM_STATUS_OK)
   17a9e:	201b      	movs	r0, #27
   17aa0:	4b85      	ldr	r3, [pc, #532]	; (17cb8 <vTask_GSM_service+0x3d4>)
   17aa2:	4798      	blx	r3
   17aa4:	1e03      	subs	r3, r0, #0
   17aa6:	d101      	bne.n	17aac <vTask_GSM_service+0x1c8>
   17aa8:	f000 fd12 	bl	184d0 <vTask_GSM_service+0xbec>
		{
			if (boolGsm_config_flag == false)
   17aac:	4b66      	ldr	r3, [pc, #408]	; (17c48 <vTask_GSM_service+0x364>)
   17aae:	781b      	ldrb	r3, [r3, #0]
   17ab0:	b2db      	uxtb	r3, r3
   17ab2:	2201      	movs	r2, #1
   17ab4:	4053      	eors	r3, r2
   17ab6:	b2db      	uxtb	r3, r3
   17ab8:	2b00      	cmp	r3, #0
   17aba:	d02d      	beq.n	17b18 <vTask_GSM_service+0x234>
			{
				
				if (gsm_is_network_registered() == GSM_NETWORK_REGISTERED)
   17abc:	4b8d      	ldr	r3, [pc, #564]	; (17cf4 <vTask_GSM_service+0x410>)
   17abe:	4798      	blx	r3
   17ac0:	0003      	movs	r3, r0
   17ac2:	2b09      	cmp	r3, #9
   17ac4:	d122      	bne.n	17b0c <vTask_GSM_service+0x228>
				{
					if(gsm_config_module()==GSM_ERROR_NONE)
   17ac6:	4b8c      	ldr	r3, [pc, #560]	; (17cf8 <vTask_GSM_service+0x414>)
   17ac8:	4798      	blx	r3
   17aca:	1e03      	subs	r3, r0, #0
   17acc:	d11a      	bne.n	17b04 <vTask_GSM_service+0x220>
					{
						if(gsm_enable_csqn_urc()==GSM_ERROR_NONE)
   17ace:	4b8b      	ldr	r3, [pc, #556]	; (17cfc <vTask_GSM_service+0x418>)
   17ad0:	4798      	blx	r3
   17ad2:	1e03      	subs	r3, r0, #0
   17ad4:	d102      	bne.n	17adc <vTask_GSM_service+0x1f8>
						{
							autoNetworkDetection = true;
   17ad6:	4b6e      	ldr	r3, [pc, #440]	; (17c90 <vTask_GSM_service+0x3ac>)
   17ad8:	2201      	movs	r2, #1
   17ada:	701a      	strb	r2, [r3, #0]
						}
						
						Signal_Strength = gsm_getsignalstrength();
   17adc:	4b88      	ldr	r3, [pc, #544]	; (17d00 <vTask_GSM_service+0x41c>)
   17ade:	4798      	blx	r3
   17ae0:	0003      	movs	r3, r0
   17ae2:	001a      	movs	r2, r3
   17ae4:	4b5b      	ldr	r3, [pc, #364]	; (17c54 <vTask_GSM_service+0x370>)
   17ae6:	701a      	strb	r2, [r3, #0]
						network_update_time = xTaskGetTickCount();
   17ae8:	4b86      	ldr	r3, [pc, #536]	; (17d04 <vTask_GSM_service+0x420>)
   17aea:	4798      	blx	r3
   17aec:	0003      	movs	r3, r0
   17aee:	2296      	movs	r2, #150	; 0x96
   17af0:	0052      	lsls	r2, r2, #1
   17af2:	18ba      	adds	r2, r7, r2
   17af4:	6013      	str	r3, [r2, #0]
							
						boolGsm_config_flag = true;
   17af6:	4b54      	ldr	r3, [pc, #336]	; (17c48 <vTask_GSM_service+0x364>)
   17af8:	2201      	movs	r2, #1
   17afa:	701a      	strb	r2, [r3, #0]
						gsmStatusChange=true;
   17afc:	4b82      	ldr	r3, [pc, #520]	; (17d08 <vTask_GSM_service+0x424>)
   17afe:	2201      	movs	r2, #1
   17b00:	701a      	strb	r2, [r3, #0]
   17b02:	e7af      	b.n	17a64 <vTask_GSM_service+0x180>
					}
					else
					{
						boolGsm_config_flag = false;
   17b04:	4b50      	ldr	r3, [pc, #320]	; (17c48 <vTask_GSM_service+0x364>)
   17b06:	2200      	movs	r2, #0
   17b08:	701a      	strb	r2, [r3, #0]
   17b0a:	e7ab      	b.n	17a64 <vTask_GSM_service+0x180>
					}
				}
				else
				{
					vTaskDelay(2000/portTICK_PERIOD_MS);
   17b0c:	23fa      	movs	r3, #250	; 0xfa
   17b0e:	00db      	lsls	r3, r3, #3
   17b10:	0018      	movs	r0, r3
   17b12:	4b6c      	ldr	r3, [pc, #432]	; (17cc4 <vTask_GSM_service+0x3e0>)
   17b14:	4798      	blx	r3
   17b16:	e7a5      	b.n	17a64 <vTask_GSM_service+0x180>
				}
			}
			else
			{
				if(mcuWakeUpFromSleep)
   17b18:	4b5e      	ldr	r3, [pc, #376]	; (17c94 <vTask_GSM_service+0x3b0>)
   17b1a:	781b      	ldrb	r3, [r3, #0]
   17b1c:	b2db      	uxtb	r3, r3
   17b1e:	2b00      	cmp	r3, #0
   17b20:	d00c      	beq.n	17b3c <vTask_GSM_service+0x258>
				{
					mcuWakeUpFromSleep=false;
   17b22:	4b5c      	ldr	r3, [pc, #368]	; (17c94 <vTask_GSM_service+0x3b0>)
   17b24:	2200      	movs	r2, #0
   17b26:	701a      	strb	r2, [r3, #0]
					gsm_module_exit_sleep(false);
   17b28:	2000      	movs	r0, #0
   17b2a:	4b6d      	ldr	r3, [pc, #436]	; (17ce0 <vTask_GSM_service+0x3fc>)
   17b2c:	4798      	blx	r3
					if(gsm_enable_csqn_urc()==GSM_ERROR_NONE)
   17b2e:	4b73      	ldr	r3, [pc, #460]	; (17cfc <vTask_GSM_service+0x418>)
   17b30:	4798      	blx	r3
   17b32:	1e03      	subs	r3, r0, #0
   17b34:	d102      	bne.n	17b3c <vTask_GSM_service+0x258>
					{
						autoNetworkDetection = true;
   17b36:	4b56      	ldr	r3, [pc, #344]	; (17c90 <vTask_GSM_service+0x3ac>)
   17b38:	2201      	movs	r2, #1
   17b3a:	701a      	strb	r2, [r3, #0]
				
				
				/************************************************************************/
				/* Firmware Update Status SMS                                           */
				/************************************************************************/
				if(bootloader_parameter.firmware_update_process_completed)
   17b3c:	4b73      	ldr	r3, [pc, #460]	; (17d0c <vTask_GSM_service+0x428>)
   17b3e:	799b      	ldrb	r3, [r3, #6]
   17b40:	2b00      	cmp	r3, #0
   17b42:	d001      	beq.n	17b48 <vTask_GSM_service+0x264>
				{
					sendFWUpdateSMS();
   17b44:	4b72      	ldr	r3, [pc, #456]	; (17d10 <vTask_GSM_service+0x42c>)
   17b46:	4798      	blx	r3
				}
				
				if ((boolOne_Time_Msg_Delete_Flag == false) && (boolGsm_config_flag == true))
   17b48:	4b40      	ldr	r3, [pc, #256]	; (17c4c <vTask_GSM_service+0x368>)
   17b4a:	781b      	ldrb	r3, [r3, #0]
   17b4c:	b2db      	uxtb	r3, r3
   17b4e:	2201      	movs	r2, #1
   17b50:	4053      	eors	r3, r2
   17b52:	b2db      	uxtb	r3, r3
   17b54:	2b00      	cmp	r3, #0
   17b56:	d015      	beq.n	17b84 <vTask_GSM_service+0x2a0>
   17b58:	4b3b      	ldr	r3, [pc, #236]	; (17c48 <vTask_GSM_service+0x364>)
   17b5a:	781b      	ldrb	r3, [r3, #0]
   17b5c:	b2db      	uxtb	r3, r3
   17b5e:	2b00      	cmp	r3, #0
   17b60:	d010      	beq.n	17b84 <vTask_GSM_service+0x2a0>
				{
					if (gsm_delete_all_sms() == GSM_ERROR_NONE)
   17b62:	4b6c      	ldr	r3, [pc, #432]	; (17d14 <vTask_GSM_service+0x430>)
   17b64:	4798      	blx	r3
   17b66:	1e03      	subs	r3, r0, #0
   17b68:	d107      	bne.n	17b7a <vTask_GSM_service+0x296>
					{
						boolOne_Time_Msg_Delete_Flag = true;
   17b6a:	4b38      	ldr	r3, [pc, #224]	; (17c4c <vTask_GSM_service+0x368>)
   17b6c:	2201      	movs	r2, #1
   17b6e:	701a      	strb	r2, [r3, #0]
						initialized = true;
   17b70:	4b31      	ldr	r3, [pc, #196]	; (17c38 <vTask_GSM_service+0x354>)
   17b72:	2201      	movs	r2, #1
   17b74:	701a      	strb	r2, [r3, #0]
					if (gsm_delete_all_sms() == GSM_ERROR_NONE)
   17b76:	f000 fccc 	bl	18512 <vTask_GSM_service+0xc2e>
					}
					else
					{
						boolOne_Time_Msg_Delete_Flag = false;
   17b7a:	4b34      	ldr	r3, [pc, #208]	; (17c4c <vTask_GSM_service+0x368>)
   17b7c:	2200      	movs	r2, #0
   17b7e:	701a      	strb	r2, [r3, #0]
					if (gsm_delete_all_sms() == GSM_ERROR_NONE)
   17b80:	f000 fcc7 	bl	18512 <vTask_GSM_service+0xc2e>
					}
				}
				else
				{
					
					if (currentStatus == 'N' && currentCallStatus == 'N')
   17b84:	4b38      	ldr	r3, [pc, #224]	; (17c68 <vTask_GSM_service+0x384>)
   17b86:	781b      	ldrb	r3, [r3, #0]
   17b88:	b2db      	uxtb	r3, r3
   17b8a:	2b4e      	cmp	r3, #78	; 0x4e
   17b8c:	d000      	beq.n	17b90 <vTask_GSM_service+0x2ac>
   17b8e:	e0d3      	b.n	17d38 <vTask_GSM_service+0x454>
   17b90:	4b36      	ldr	r3, [pc, #216]	; (17c6c <vTask_GSM_service+0x388>)
   17b92:	781b      	ldrb	r3, [r3, #0]
   17b94:	b2db      	uxtb	r3, r3
   17b96:	2b4e      	cmp	r3, #78	; 0x4e
   17b98:	d000      	beq.n	17b9c <vTask_GSM_service+0x2b8>
   17b9a:	e0cd      	b.n	17d38 <vTask_GSM_service+0x454>
					{
						if(getAllPhaseState()==AC_OFF &&  isGSMModuleAwake && gsm_module_sleep_elligible())
   17b9c:	4b5e      	ldr	r3, [pc, #376]	; (17d18 <vTask_GSM_service+0x434>)
   17b9e:	4798      	blx	r3
   17ba0:	1e03      	subs	r3, r0, #0
   17ba2:	d115      	bne.n	17bd0 <vTask_GSM_service+0x2ec>
   17ba4:	4b4a      	ldr	r3, [pc, #296]	; (17cd0 <vTask_GSM_service+0x3ec>)
   17ba6:	781b      	ldrb	r3, [r3, #0]
   17ba8:	b2db      	uxtb	r3, r3
   17baa:	2b00      	cmp	r3, #0
   17bac:	d010      	beq.n	17bd0 <vTask_GSM_service+0x2ec>
   17bae:	4b5b      	ldr	r3, [pc, #364]	; (17d1c <vTask_GSM_service+0x438>)
   17bb0:	4798      	blx	r3
   17bb2:	1e03      	subs	r3, r0, #0
   17bb4:	d00c      	beq.n	17bd0 <vTask_GSM_service+0x2ec>
						{
							if(motor_checkSleepElligible())
   17bb6:	4b5a      	ldr	r3, [pc, #360]	; (17d20 <vTask_GSM_service+0x43c>)
   17bb8:	4798      	blx	r3
   17bba:	1e03      	subs	r3, r0, #0
   17bbc:	d008      	beq.n	17bd0 <vTask_GSM_service+0x2ec>
							{
								if(gsm_disable_csqn_urc()==GSM_ERROR_NONE)
   17bbe:	4b59      	ldr	r3, [pc, #356]	; (17d24 <vTask_GSM_service+0x440>)
   17bc0:	4798      	blx	r3
   17bc2:	1e03      	subs	r3, r0, #0
   17bc4:	d102      	bne.n	17bcc <vTask_GSM_service+0x2e8>
								{
									autoNetworkDetection=false;
   17bc6:	4b32      	ldr	r3, [pc, #200]	; (17c90 <vTask_GSM_service+0x3ac>)
   17bc8:	2200      	movs	r2, #0
   17bca:	701a      	strb	r2, [r3, #0]
								}
								gsm_module_enter_sleep();				//this statement goes after sending AT command, to ignore the wakeup of the module done by sending AT Command.
   17bcc:	4b56      	ldr	r3, [pc, #344]	; (17d28 <vTask_GSM_service+0x444>)
   17bce:	4798      	blx	r3
							}
						}

						if(isGSMModuleAwake)
   17bd0:	4b3f      	ldr	r3, [pc, #252]	; (17cd0 <vTask_GSM_service+0x3ec>)
   17bd2:	781b      	ldrb	r3, [r3, #0]
   17bd4:	b2db      	uxtb	r3, r3
   17bd6:	2b00      	cmp	r3, #0
   17bd8:	d017      	beq.n	17c0a <vTask_GSM_service+0x326>
						{
							////Update network
							if (((xTaskGetTickCount() - network_update_time)>= (1*60*1000)))
   17bda:	4b4a      	ldr	r3, [pc, #296]	; (17d04 <vTask_GSM_service+0x420>)
   17bdc:	4798      	blx	r3
   17bde:	0002      	movs	r2, r0
   17be0:	2396      	movs	r3, #150	; 0x96
   17be2:	005b      	lsls	r3, r3, #1
   17be4:	18fb      	adds	r3, r7, r3
   17be6:	681b      	ldr	r3, [r3, #0]
   17be8:	1ad3      	subs	r3, r2, r3
   17bea:	4a50      	ldr	r2, [pc, #320]	; (17d2c <vTask_GSM_service+0x448>)
   17bec:	4293      	cmp	r3, r2
   17bee:	d90c      	bls.n	17c0a <vTask_GSM_service+0x326>
							{
								network_update_time = xTaskGetTickCount();
   17bf0:	4b44      	ldr	r3, [pc, #272]	; (17d04 <vTask_GSM_service+0x420>)
   17bf2:	4798      	blx	r3
   17bf4:	0003      	movs	r3, r0
   17bf6:	2296      	movs	r2, #150	; 0x96
   17bf8:	0052      	lsls	r2, r2, #1
   17bfa:	18ba      	adds	r2, r7, r2
   17bfc:	6013      	str	r3, [r2, #0]
								Signal_Strength = gsm_getsignalstrength();
   17bfe:	4b40      	ldr	r3, [pc, #256]	; (17d00 <vTask_GSM_service+0x41c>)
   17c00:	4798      	blx	r3
   17c02:	0003      	movs	r3, r0
   17c04:	001a      	movs	r2, r3
   17c06:	4b13      	ldr	r3, [pc, #76]	; (17c54 <vTask_GSM_service+0x370>)
   17c08:	701a      	strb	r2, [r3, #0]
							}
						}
						
						setObtainEvent();
   17c0a:	4b49      	ldr	r3, [pc, #292]	; (17d30 <vTask_GSM_service+0x44c>)
   17c0c:	4798      	blx	r3
						if (eventStaged || m2mEventStaged)
   17c0e:	4b1c      	ldr	r3, [pc, #112]	; (17c80 <vTask_GSM_service+0x39c>)
   17c10:	781b      	ldrb	r3, [r3, #0]
   17c12:	2b00      	cmp	r3, #0
   17c14:	d104      	bne.n	17c20 <vTask_GSM_service+0x33c>
   17c16:	4b25      	ldr	r3, [pc, #148]	; (17cac <vTask_GSM_service+0x3c8>)
   17c18:	781b      	ldrb	r3, [r3, #0]
   17c1a:	2b00      	cmp	r3, #0
   17c1c:	d100      	bne.n	17c20 <vTask_GSM_service+0x33c>
   17c1e:	e0d4      	b.n	17dca <vTask_GSM_service+0x4e6>
						{
							operateOnStagedEvent();
   17c20:	4b44      	ldr	r3, [pc, #272]	; (17d34 <vTask_GSM_service+0x450>)
   17c22:	4798      	blx	r3
						if (eventStaged || m2mEventStaged)
   17c24:	e0d1      	b.n	17dca <vTask_GSM_service+0x4e6>
   17c26:	46c0      	nop			; (mov r8, r8)
   17c28:	41004480 	.word	0x41004480
   17c2c:	0001430d 	.word	0x0001430d
   17c30:	00022cd1 	.word	0x00022cd1
   17c34:	00012165 	.word	0x00012165
   17c38:	2000099d 	.word	0x2000099d
   17c3c:	2000099c 	.word	0x2000099c
   17c40:	2000097f 	.word	0x2000097f
   17c44:	2000088e 	.word	0x2000088e
   17c48:	200009c4 	.word	0x200009c4
   17c4c:	200009d1 	.word	0x200009d1
   17c50:	200008cc 	.word	0x200008cc
   17c54:	20000989 	.word	0x20000989
   17c58:	200009d6 	.word	0x200009d6
   17c5c:	20000a62 	.word	0x20000a62
   17c60:	20000964 	.word	0x20000964
   17c64:	200008e4 	.word	0x200008e4
   17c68:	200009dc 	.word	0x200009dc
   17c6c:	2000098f 	.word	0x2000098f
   17c70:	2000099e 	.word	0x2000099e
   17c74:	20000944 	.word	0x20000944
   17c78:	20000972 	.word	0x20000972
   17c7c:	20000977 	.word	0x20000977
   17c80:	200009d3 	.word	0x200009d3
   17c84:	20000975 	.word	0x20000975
   17c88:	20000998 	.word	0x20000998
   17c8c:	200008e5 	.word	0x200008e5
   17c90:	20000a61 	.word	0x20000a61
   17c94:	20000a40 	.word	0x20000a40
   17c98:	2000082c 	.word	0x2000082c
   17c9c:	20000a0b 	.word	0x20000a0b
   17ca0:	2000092c 	.word	0x2000092c
   17ca4:	2000092d 	.word	0x2000092d
   17ca8:	200009d4 	.word	0x200009d4
   17cac:	2000098e 	.word	0x2000098e
   17cb0:	20000943 	.word	0x20000943
   17cb4:	200009d0 	.word	0x200009d0
   17cb8:	00014331 	.word	0x00014331
   17cbc:	41004490 	.word	0x41004490
   17cc0:	00000bb8 	.word	0x00000bb8
   17cc4:	0001fe69 	.word	0x0001fe69
   17cc8:	fffeffff 	.word	0xfffeffff
   17ccc:	00001388 	.word	0x00001388
   17cd0:	20000884 	.word	0x20000884
   17cd4:	00014375 	.word	0x00014375
   17cd8:	20000894 	.word	0x20000894
   17cdc:	20000890 	.word	0x20000890
   17ce0:	00012319 	.word	0x00012319
   17ce4:	00014a7d 	.word	0x00014a7d
   17ce8:	20000963 	.word	0x20000963
   17cec:	00014515 	.word	0x00014515
   17cf0:	00014d71 	.word	0x00014d71
   17cf4:	00012615 	.word	0x00012615
   17cf8:	00013399 	.word	0x00013399
   17cfc:	00012b31 	.word	0x00012b31
   17d00:	000128e1 	.word	0x000128e1
   17d04:	000201cd 	.word	0x000201cd
   17d08:	200008de 	.word	0x200008de
   17d0c:	200007f8 	.word	0x200007f8
   17d10:	000177bd 	.word	0x000177bd
   17d14:	00012701 	.word	0x00012701
   17d18:	0001afb9 	.word	0x0001afb9
   17d1c:	0001239d 	.word	0x0001239d
   17d20:	0001ca51 	.word	0x0001ca51
   17d24:	00012b61 	.word	0x00012b61
   17d28:	00012389 	.word	0x00012389
   17d2c:	0000ea5f 	.word	0x0000ea5f
   17d30:	000143c9 	.word	0x000143c9
   17d34:	00014409 	.word	0x00014409
						}
					}
					else if (currentStatus == 'I' || currentStatus == 'R')
   17d38:	4bbf      	ldr	r3, [pc, #764]	; (18038 <vTask_GSM_service+0x754>)
   17d3a:	781b      	ldrb	r3, [r3, #0]
   17d3c:	b2db      	uxtb	r3, r3
   17d3e:	2b49      	cmp	r3, #73	; 0x49
   17d40:	d004      	beq.n	17d4c <vTask_GSM_service+0x468>
   17d42:	4bbd      	ldr	r3, [pc, #756]	; (18038 <vTask_GSM_service+0x754>)
   17d44:	781b      	ldrb	r3, [r3, #0]
   17d46:	b2db      	uxtb	r3, r3
   17d48:	2b52      	cmp	r3, #82	; 0x52
   17d4a:	d13f      	bne.n	17dcc <vTask_GSM_service+0x4e8>
					{
						if (callTimerExpire())
   17d4c:	4bbb      	ldr	r3, [pc, #748]	; (1803c <vTask_GSM_service+0x758>)
   17d4e:	4798      	blx	r3
   17d50:	1e03      	subs	r3, r0, #0
   17d52:	d00e      	beq.n	17d72 <vTask_GSM_service+0x48e>
						{
							char t1 = actionType;
   17d54:	2393      	movs	r3, #147	; 0x93
   17d56:	005b      	lsls	r3, r3, #1
   17d58:	18fb      	adds	r3, r7, r3
   17d5a:	4ab9      	ldr	r2, [pc, #740]	; (18040 <vTask_GSM_service+0x75c>)
   17d5c:	7812      	ldrb	r2, [r2, #0]
   17d5e:	701a      	strb	r2, [r3, #0]
							endCall();
   17d60:	4bb8      	ldr	r3, [pc, #736]	; (18044 <vTask_GSM_service+0x760>)
   17d62:	4798      	blx	r3
							checkRespSMS(t1);
   17d64:	2393      	movs	r3, #147	; 0x93
   17d66:	005b      	lsls	r3, r3, #1
   17d68:	18fb      	adds	r3, r7, r3
   17d6a:	781b      	ldrb	r3, [r3, #0]
   17d6c:	0018      	movs	r0, r3
   17d6e:	4bb6      	ldr	r3, [pc, #728]	; (18048 <vTask_GSM_service+0x764>)
   17d70:	4798      	blx	r3
						}
						if (factory_settings_parameter_struct.ENABLE_M2M)
   17d72:	4bb6      	ldr	r3, [pc, #728]	; (1804c <vTask_GSM_service+0x768>)
   17d74:	78db      	ldrb	r3, [r3, #3]
   17d76:	2b00      	cmp	r3, #0
   17d78:	d020      	beq.n	17dbc <vTask_GSM_service+0x4d8>
						{
							if(m2mEvent && callAccepted)
   17d7a:	4bb5      	ldr	r3, [pc, #724]	; (18050 <vTask_GSM_service+0x76c>)
   17d7c:	781b      	ldrb	r3, [r3, #0]
   17d7e:	2b00      	cmp	r3, #0
   17d80:	d01c      	beq.n	17dbc <vTask_GSM_service+0x4d8>
   17d82:	4bb4      	ldr	r3, [pc, #720]	; (18054 <vTask_GSM_service+0x770>)
   17d84:	781b      	ldrb	r3, [r3, #0]
   17d86:	2b00      	cmp	r3, #0
   17d88:	d018      	beq.n	17dbc <vTask_GSM_service+0x4d8>
							{
								if(!keyPressed &&  xTaskGetTickCount() - callCutWait > 2000)
   17d8a:	4bb3      	ldr	r3, [pc, #716]	; (18058 <vTask_GSM_service+0x774>)
   17d8c:	781b      	ldrb	r3, [r3, #0]
   17d8e:	2201      	movs	r2, #1
   17d90:	4053      	eors	r3, r2
   17d92:	b2db      	uxtb	r3, r3
   17d94:	2b00      	cmp	r3, #0
   17d96:	d011      	beq.n	17dbc <vTask_GSM_service+0x4d8>
   17d98:	4bb0      	ldr	r3, [pc, #704]	; (1805c <vTask_GSM_service+0x778>)
   17d9a:	4798      	blx	r3
   17d9c:	0002      	movs	r2, r0
   17d9e:	4bb0      	ldr	r3, [pc, #704]	; (18060 <vTask_GSM_service+0x77c>)
   17da0:	681b      	ldr	r3, [r3, #0]
   17da2:	1ad2      	subs	r2, r2, r3
   17da4:	23fa      	movs	r3, #250	; 0xfa
   17da6:	00db      	lsls	r3, r3, #3
   17da8:	429a      	cmp	r2, r3
   17daa:	d907      	bls.n	17dbc <vTask_GSM_service+0x4d8>
								{
									keyPressed=true;
   17dac:	4baa      	ldr	r3, [pc, #680]	; (18058 <vTask_GSM_service+0x774>)
   17dae:	2201      	movs	r2, #1
   17db0:	701a      	strb	r2, [r3, #0]
									sendDTMFTone(m2mEventNo);
   17db2:	4bac      	ldr	r3, [pc, #688]	; (18064 <vTask_GSM_service+0x780>)
   17db4:	781b      	ldrb	r3, [r3, #0]
   17db6:	0018      	movs	r0, r3
   17db8:	4bab      	ldr	r3, [pc, #684]	; (18068 <vTask_GSM_service+0x784>)
   17dba:	4798      	blx	r3
								}
							}
						}
						if (playSoundElligible())
   17dbc:	4bab      	ldr	r3, [pc, #684]	; (1806c <vTask_GSM_service+0x788>)
   17dbe:	4798      	blx	r3
   17dc0:	1e03      	subs	r3, r0, #0
   17dc2:	d003      	beq.n	17dcc <vTask_GSM_service+0x4e8>
						{
							triggerPlaySound();
   17dc4:	4baa      	ldr	r3, [pc, #680]	; (18070 <vTask_GSM_service+0x78c>)
   17dc6:	4798      	blx	r3
   17dc8:	e000      	b.n	17dcc <vTask_GSM_service+0x4e8>
						if (eventStaged || m2mEventStaged)
   17dca:	46c0      	nop			; (mov r8, r8)
						}
					}
					//////////////////////////////////////////////////////////////////////////
					char response[64] = {0};
   17dcc:	4ba9      	ldr	r3, [pc, #676]	; (18074 <vTask_GSM_service+0x790>)
   17dce:	2298      	movs	r2, #152	; 0x98
   17dd0:	0052      	lsls	r2, r2, #1
   17dd2:	4694      	mov	ip, r2
   17dd4:	44bc      	add	ip, r7
   17dd6:	4463      	add	r3, ip
   17dd8:	0018      	movs	r0, r3
   17dda:	2340      	movs	r3, #64	; 0x40
   17ddc:	001a      	movs	r2, r3
   17dde:	2100      	movs	r1, #0
   17de0:	4ba5      	ldr	r3, [pc, #660]	; (18078 <vTask_GSM_service+0x794>)
   17de2:	4798      	blx	r3
					if (gsm_read_response_line(response,sizeof(response)))
   17de4:	230c      	movs	r3, #12
   17de6:	18fb      	adds	r3, r7, r3
   17de8:	2140      	movs	r1, #64	; 0x40
   17dea:	0018      	movs	r0, r3
   17dec:	4ba3      	ldr	r3, [pc, #652]	; (1807c <vTask_GSM_service+0x798>)
   17dee:	4798      	blx	r3
   17df0:	1e03      	subs	r3, r0, #0
   17df2:	d100      	bne.n	17df6 <vTask_GSM_service+0x512>
   17df4:	e636      	b.n	17a64 <vTask_GSM_service+0x180>
					{
						uint8_t sms_index;
						sms_index = gsm_responseLine_isNew_SMS_Received(response);
   17df6:	2326      	movs	r3, #38	; 0x26
   17df8:	33ff      	adds	r3, #255	; 0xff
   17dfa:	18fc      	adds	r4, r7, r3
   17dfc:	230c      	movs	r3, #12
   17dfe:	18fb      	adds	r3, r7, r3
   17e00:	0018      	movs	r0, r3
   17e02:	4b9f      	ldr	r3, [pc, #636]	; (18080 <vTask_GSM_service+0x79c>)
   17e04:	4798      	blx	r3
   17e06:	0003      	movs	r3, r0
   17e08:	7023      	strb	r3, [r4, #0]
						if (sms_index>0)
   17e0a:	2326      	movs	r3, #38	; 0x26
   17e0c:	33ff      	adds	r3, #255	; 0xff
   17e0e:	18fb      	adds	r3, r7, r3
   17e10:	781b      	ldrb	r3, [r3, #0]
   17e12:	2b00      	cmp	r3, #0
   17e14:	d100      	bne.n	17e18 <vTask_GSM_service+0x534>
   17e16:	e0f6      	b.n	18006 <vTask_GSM_service+0x722>
						{
							char phone_number[15];
							char Received_SMS[160];
							gsm_read_sms(sms_index,phone_number,15,Received_SMS,160);
   17e18:	234c      	movs	r3, #76	; 0x4c
   17e1a:	18fa      	adds	r2, r7, r3
   17e1c:	1c79      	adds	r1, r7, #1
   17e1e:	31ff      	adds	r1, #255	; 0xff
   17e20:	2326      	movs	r3, #38	; 0x26
   17e22:	33ff      	adds	r3, #255	; 0xff
   17e24:	18fb      	adds	r3, r7, r3
   17e26:	7818      	ldrb	r0, [r3, #0]
   17e28:	23a0      	movs	r3, #160	; 0xa0
   17e2a:	9300      	str	r3, [sp, #0]
   17e2c:	0013      	movs	r3, r2
   17e2e:	220f      	movs	r2, #15
   17e30:	4c94      	ldr	r4, [pc, #592]	; (18084 <vTask_GSM_service+0x7a0>)
   17e32:	47a0      	blx	r4
							bool admin = isAdmin(phone_number);
   17e34:	232c      	movs	r3, #44	; 0x2c
   17e36:	33ff      	adds	r3, #255	; 0xff
   17e38:	18fc      	adds	r4, r7, r3
   17e3a:	1c7b      	adds	r3, r7, #1
   17e3c:	33ff      	adds	r3, #255	; 0xff
   17e3e:	0018      	movs	r0, r3
   17e40:	4b91      	ldr	r3, [pc, #580]	; (18088 <vTask_GSM_service+0x7a4>)
   17e42:	4798      	blx	r3
   17e44:	0003      	movs	r3, r0
   17e46:	7023      	strb	r3, [r4, #0]
							bool primaryUser = isPrimaryNumber(phone_number);
   17e48:	2392      	movs	r3, #146	; 0x92
   17e4a:	005b      	lsls	r3, r3, #1
   17e4c:	18fc      	adds	r4, r7, r3
   17e4e:	1c7b      	adds	r3, r7, #1
   17e50:	33ff      	adds	r3, #255	; 0xff
   17e52:	0018      	movs	r0, r3
   17e54:	4b8d      	ldr	r3, [pc, #564]	; (1808c <vTask_GSM_service+0x7a8>)
   17e56:	4798      	blx	r3
   17e58:	0003      	movs	r3, r0
   17e5a:	7023      	strb	r3, [r4, #0]
							bool alterUsr = isAlterNumber(phone_number);
   17e5c:	2324      	movs	r3, #36	; 0x24
   17e5e:	33ff      	adds	r3, #255	; 0xff
   17e60:	18fc      	adds	r4, r7, r3
   17e62:	1c7b      	adds	r3, r7, #1
   17e64:	33ff      	adds	r3, #255	; 0xff
   17e66:	0018      	movs	r0, r3
   17e68:	4b89      	ldr	r3, [pc, #548]	; (18090 <vTask_GSM_service+0x7ac>)
   17e6a:	4798      	blx	r3
   17e6c:	0003      	movs	r3, r0
   17e6e:	7023      	strb	r3, [r4, #0]
							bool response_sms_processed_cmd = true;
   17e70:	2395      	movs	r3, #149	; 0x95
   17e72:	005b      	lsls	r3, r3, #1
   17e74:	18fb      	adds	r3, r7, r3
   17e76:	2201      	movs	r2, #1
   17e78:	701a      	strb	r2, [r3, #0]
							
							if(admin)
   17e7a:	232c      	movs	r3, #44	; 0x2c
   17e7c:	33ff      	adds	r3, #255	; 0xff
   17e7e:	18fb      	adds	r3, r7, r3
   17e80:	781b      	ldrb	r3, [r3, #0]
   17e82:	2b00      	cmp	r3, #0
   17e84:	d006      	beq.n	17e94 <vTask_GSM_service+0x5b0>
							{
								setCallStateOnLCD(LCDCALLSTATE_INCOMINGSMS,"ADMIN",false);
   17e86:	4b83      	ldr	r3, [pc, #524]	; (18094 <vTask_GSM_service+0x7b0>)
   17e88:	2200      	movs	r2, #0
   17e8a:	0019      	movs	r1, r3
   17e8c:	2004      	movs	r0, #4
   17e8e:	4b82      	ldr	r3, [pc, #520]	; (18098 <vTask_GSM_service+0x7b4>)
   17e90:	4798      	blx	r3
   17e92:	e006      	b.n	17ea2 <vTask_GSM_service+0x5be>
							}
							else
							{
								setCallStateOnLCD(LCDCALLSTATE_INCOMINGSMS,phone_number,false);
   17e94:	1c7b      	adds	r3, r7, #1
   17e96:	33ff      	adds	r3, #255	; 0xff
   17e98:	2200      	movs	r2, #0
   17e9a:	0019      	movs	r1, r3
   17e9c:	2004      	movs	r0, #4
   17e9e:	4b7e      	ldr	r3, [pc, #504]	; (18098 <vTask_GSM_service+0x7b4>)
   17ea0:	4798      	blx	r3
							}
							
							StringtoUpperCase(Received_SMS);
   17ea2:	234c      	movs	r3, #76	; 0x4c
   17ea4:	18fb      	adds	r3, r7, r3
   17ea6:	0018      	movs	r0, r3
   17ea8:	4b7c      	ldr	r3, [pc, #496]	; (1809c <vTask_GSM_service+0x7b8>)
   17eaa:	4798      	blx	r3
							
							if(!admin)
   17eac:	232c      	movs	r3, #44	; 0x2c
   17eae:	33ff      	adds	r3, #255	; 0xff
   17eb0:	18fb      	adds	r3, r7, r3
   17eb2:	781b      	ldrb	r3, [r3, #0]
   17eb4:	2201      	movs	r2, #1
   17eb6:	4053      	eors	r3, r2
   17eb8:	b2db      	uxtb	r3, r3
   17eba:	2b00      	cmp	r3, #0
   17ebc:	d009      	beq.n	17ed2 <vTask_GSM_service+0x5ee>
							{
								admin = checkSMSForPassCode(Received_SMS);
   17ebe:	232c      	movs	r3, #44	; 0x2c
   17ec0:	33ff      	adds	r3, #255	; 0xff
   17ec2:	18fc      	adds	r4, r7, r3
   17ec4:	234c      	movs	r3, #76	; 0x4c
   17ec6:	18fb      	adds	r3, r7, r3
   17ec8:	0018      	movs	r0, r3
   17eca:	4b75      	ldr	r3, [pc, #468]	; (180a0 <vTask_GSM_service+0x7bc>)
   17ecc:	4798      	blx	r3
   17ece:	0003      	movs	r3, r0
   17ed0:	7023      	strb	r3, [r4, #0]
							}

							if (admin || primaryUser || alterUsr)
   17ed2:	232c      	movs	r3, #44	; 0x2c
   17ed4:	33ff      	adds	r3, #255	; 0xff
   17ed6:	18fb      	adds	r3, r7, r3
   17ed8:	781b      	ldrb	r3, [r3, #0]
   17eda:	2b00      	cmp	r3, #0
   17edc:	d10b      	bne.n	17ef6 <vTask_GSM_service+0x612>
   17ede:	2392      	movs	r3, #146	; 0x92
   17ee0:	005b      	lsls	r3, r3, #1
   17ee2:	18fb      	adds	r3, r7, r3
   17ee4:	781b      	ldrb	r3, [r3, #0]
   17ee6:	2b00      	cmp	r3, #0
   17ee8:	d105      	bne.n	17ef6 <vTask_GSM_service+0x612>
   17eea:	2324      	movs	r3, #36	; 0x24
   17eec:	33ff      	adds	r3, #255	; 0xff
   17eee:	18fb      	adds	r3, r7, r3
   17ef0:	781b      	ldrb	r3, [r3, #0]
   17ef2:	2b00      	cmp	r3, #0
   17ef4:	d031      	beq.n	17f5a <vTask_GSM_service+0x676>
							{
								if(StringstartsWith(Received_SMS,"#"))
   17ef6:	4a6b      	ldr	r2, [pc, #428]	; (180a4 <vTask_GSM_service+0x7c0>)
   17ef8:	234c      	movs	r3, #76	; 0x4c
   17efa:	18fb      	adds	r3, r7, r3
   17efc:	0011      	movs	r1, r2
   17efe:	0018      	movs	r0, r3
   17f00:	4b69      	ldr	r3, [pc, #420]	; (180a8 <vTask_GSM_service+0x7c4>)
   17f02:	4798      	blx	r3
   17f04:	1e03      	subs	r3, r0, #0
   17f06:	d013      	beq.n	17f30 <vTask_GSM_service+0x64c>
								{
									memmove(Received_SMS, Received_SMS+1, strlen(Received_SMS));  //this will remove '#'
   17f08:	234c      	movs	r3, #76	; 0x4c
   17f0a:	18fc      	adds	r4, r7, r3
   17f0c:	3401      	adds	r4, #1
   17f0e:	234c      	movs	r3, #76	; 0x4c
   17f10:	18fb      	adds	r3, r7, r3
   17f12:	0018      	movs	r0, r3
   17f14:	4b65      	ldr	r3, [pc, #404]	; (180ac <vTask_GSM_service+0x7c8>)
   17f16:	4798      	blx	r3
   17f18:	0002      	movs	r2, r0
   17f1a:	234c      	movs	r3, #76	; 0x4c
   17f1c:	18fb      	adds	r3, r7, r3
   17f1e:	0021      	movs	r1, r4
   17f20:	0018      	movs	r0, r3
   17f22:	4b63      	ldr	r3, [pc, #396]	; (180b0 <vTask_GSM_service+0x7cc>)
   17f24:	4798      	blx	r3
									response_sms_processed_cmd=false;
   17f26:	2395      	movs	r3, #149	; 0x95
   17f28:	005b      	lsls	r3, r3, #1
   17f2a:	18fb      	adds	r3, r7, r3
   17f2c:	2200      	movs	r2, #0
   17f2e:	701a      	strb	r2, [r3, #0]
								}
								processOnSMS(Received_SMS,admin,response_sms_processed_cmd,alterUsr,phone_number);
   17f30:	2324      	movs	r3, #36	; 0x24
   17f32:	33ff      	adds	r3, #255	; 0xff
   17f34:	18fb      	adds	r3, r7, r3
   17f36:	781c      	ldrb	r4, [r3, #0]
   17f38:	2395      	movs	r3, #149	; 0x95
   17f3a:	005b      	lsls	r3, r3, #1
   17f3c:	18fb      	adds	r3, r7, r3
   17f3e:	781a      	ldrb	r2, [r3, #0]
   17f40:	232c      	movs	r3, #44	; 0x2c
   17f42:	33ff      	adds	r3, #255	; 0xff
   17f44:	18fb      	adds	r3, r7, r3
   17f46:	7819      	ldrb	r1, [r3, #0]
   17f48:	234c      	movs	r3, #76	; 0x4c
   17f4a:	18f8      	adds	r0, r7, r3
   17f4c:	1c7b      	adds	r3, r7, #1
   17f4e:	33ff      	adds	r3, #255	; 0xff
   17f50:	9300      	str	r3, [sp, #0]
   17f52:	0023      	movs	r3, r4
   17f54:	4c57      	ldr	r4, [pc, #348]	; (180b4 <vTask_GSM_service+0x7d0>)
   17f56:	47a0      	blx	r4
   17f58:	e053      	b.n	18002 <vTask_GSM_service+0x71e>
							}
							else if(isM2MNumber(phone_number))
   17f5a:	1c7b      	adds	r3, r7, #1
   17f5c:	33ff      	adds	r3, #255	; 0xff
   17f5e:	0018      	movs	r0, r3
   17f60:	4b55      	ldr	r3, [pc, #340]	; (180b8 <vTask_GSM_service+0x7d4>)
   17f62:	4798      	blx	r3
   17f64:	1e03      	subs	r3, r0, #0
   17f66:	d01f      	beq.n	17fa8 <vTask_GSM_service+0x6c4>
							{
								if(StringstartsWith(Received_SMS,"VMM01"))
   17f68:	4a54      	ldr	r2, [pc, #336]	; (180bc <vTask_GSM_service+0x7d8>)
   17f6a:	234c      	movs	r3, #76	; 0x4c
   17f6c:	18fb      	adds	r3, r7, r3
   17f6e:	0011      	movs	r1, r2
   17f70:	0018      	movs	r0, r3
   17f72:	4b4d      	ldr	r3, [pc, #308]	; (180a8 <vTask_GSM_service+0x7c4>)
   17f74:	4798      	blx	r3
   17f76:	1e03      	subs	r3, r0, #0
   17f78:	d043      	beq.n	18002 <vTask_GSM_service+0x71e>
								{
									setM2MVerify(true);
   17f7a:	2001      	movs	r0, #1
   17f7c:	4b50      	ldr	r3, [pc, #320]	; (180c0 <vTask_GSM_service+0x7dc>)
   17f7e:	4798      	blx	r3
									getM2MNumber(phone_number);
   17f80:	1c7b      	adds	r3, r7, #1
   17f82:	33ff      	adds	r3, #255	; 0xff
   17f84:	0018      	movs	r0, r3
   17f86:	4b4f      	ldr	r3, [pc, #316]	; (180c4 <vTask_GSM_service+0x7e0>)
   17f88:	4798      	blx	r3
									setCallStateOnLCD(LCDCALLSTATE_OUTGOINGSMS,phone_number,false);
   17f8a:	1c7b      	adds	r3, r7, #1
   17f8c:	33ff      	adds	r3, #255	; 0xff
   17f8e:	2200      	movs	r2, #0
   17f90:	0019      	movs	r1, r3
   17f92:	2005      	movs	r0, #5
   17f94:	4b40      	ldr	r3, [pc, #256]	; (18098 <vTask_GSM_service+0x7b4>)
   17f96:	4798      	blx	r3
									gsm_send_sms(phone_number,"VMR02");
   17f98:	4a4b      	ldr	r2, [pc, #300]	; (180c8 <vTask_GSM_service+0x7e4>)
   17f9a:	1c7b      	adds	r3, r7, #1
   17f9c:	33ff      	adds	r3, #255	; 0xff
   17f9e:	0011      	movs	r1, r2
   17fa0:	0018      	movs	r0, r3
   17fa2:	4b4a      	ldr	r3, [pc, #296]	; (180cc <vTask_GSM_service+0x7e8>)
   17fa4:	4798      	blx	r3
   17fa6:	e02c      	b.n	18002 <vTask_GSM_service+0x71e>
								}
							}
							else if(factory_settings_parameter_struct.ENABLE_M2M && isM2MRemoteNumber(phone_number))
   17fa8:	4b28      	ldr	r3, [pc, #160]	; (1804c <vTask_GSM_service+0x768>)
   17faa:	78db      	ldrb	r3, [r3, #3]
   17fac:	2b00      	cmp	r3, #0
   17fae:	d028      	beq.n	18002 <vTask_GSM_service+0x71e>
   17fb0:	1c7b      	adds	r3, r7, #1
   17fb2:	33ff      	adds	r3, #255	; 0xff
   17fb4:	0018      	movs	r0, r3
   17fb6:	4b46      	ldr	r3, [pc, #280]	; (180d0 <vTask_GSM_service+0x7ec>)
   17fb8:	4798      	blx	r3
   17fba:	1e03      	subs	r3, r0, #0
   17fbc:	d021      	beq.n	18002 <vTask_GSM_service+0x71e>
							{
								if(StringstartsWith(Received_SMS,"VMR02"))
   17fbe:	4a42      	ldr	r2, [pc, #264]	; (180c8 <vTask_GSM_service+0x7e4>)
   17fc0:	234c      	movs	r3, #76	; 0x4c
   17fc2:	18fb      	adds	r3, r7, r3
   17fc4:	0011      	movs	r1, r2
   17fc6:	0018      	movs	r0, r3
   17fc8:	4b37      	ldr	r3, [pc, #220]	; (180a8 <vTask_GSM_service+0x7c4>)
   17fca:	4798      	blx	r3
   17fcc:	1e03      	subs	r3, r0, #0
   17fce:	d018      	beq.n	18002 <vTask_GSM_service+0x71e>
								{
									setM2MRemoteVerified(true);
   17fd0:	2001      	movs	r0, #1
   17fd2:	4b40      	ldr	r3, [pc, #256]	; (180d4 <vTask_GSM_service+0x7f0>)
   17fd4:	4798      	blx	r3
									saveM2MSettings(true);
   17fd6:	2001      	movs	r0, #1
   17fd8:	4b3f      	ldr	r3, [pc, #252]	; (180d8 <vTask_GSM_service+0x7f4>)
   17fda:	4798      	blx	r3
									getActiveNumber(phone_number);
   17fdc:	1c7b      	adds	r3, r7, #1
   17fde:	33ff      	adds	r3, #255	; 0xff
   17fe0:	0018      	movs	r0, r3
   17fe2:	4b3e      	ldr	r3, [pc, #248]	; (180dc <vTask_GSM_service+0x7f8>)
   17fe4:	4798      	blx	r3
									setCallStateOnLCD(LCDCALLSTATE_OUTGOINGSMS,phone_number,false);
   17fe6:	1c7b      	adds	r3, r7, #1
   17fe8:	33ff      	adds	r3, #255	; 0xff
   17fea:	2200      	movs	r2, #0
   17fec:	0019      	movs	r1, r3
   17fee:	2005      	movs	r0, #5
   17ff0:	4b29      	ldr	r3, [pc, #164]	; (18098 <vTask_GSM_service+0x7b4>)
   17ff2:	4798      	blx	r3
									gsm_send_sms(phone_number,"M2M TURNED ON");
   17ff4:	4a3a      	ldr	r2, [pc, #232]	; (180e0 <vTask_GSM_service+0x7fc>)
   17ff6:	1c7b      	adds	r3, r7, #1
   17ff8:	33ff      	adds	r3, #255	; 0xff
   17ffa:	0011      	movs	r1, r2
   17ffc:	0018      	movs	r0, r3
   17ffe:	4b33      	ldr	r3, [pc, #204]	; (180cc <vTask_GSM_service+0x7e8>)
   18000:	4798      	blx	r3
								}
							}
							gsm_delete_all_sms();
   18002:	4b38      	ldr	r3, [pc, #224]	; (180e4 <vTask_GSM_service+0x800>)
   18004:	4798      	blx	r3


						/************************************************************************/
						/* Automatic Detection of Network Using CSQN URC, and continue to next loop*/
						/************************************************************************/
						if(autoNetworkDetection && gsm_responseLine_isCSQN(response,&Signal_Strength))
   18006:	4b38      	ldr	r3, [pc, #224]	; (180e8 <vTask_GSM_service+0x804>)
   18008:	781b      	ldrb	r3, [r3, #0]
   1800a:	2b00      	cmp	r3, #0
   1800c:	d076      	beq.n	180fc <vTask_GSM_service+0x818>
   1800e:	4a37      	ldr	r2, [pc, #220]	; (180ec <vTask_GSM_service+0x808>)
   18010:	230c      	movs	r3, #12
   18012:	18fb      	adds	r3, r7, r3
   18014:	0011      	movs	r1, r2
   18016:	0018      	movs	r0, r3
   18018:	4b35      	ldr	r3, [pc, #212]	; (180f0 <vTask_GSM_service+0x80c>)
   1801a:	4798      	blx	r3
   1801c:	1e03      	subs	r3, r0, #0
   1801e:	d06d      	beq.n	180fc <vTask_GSM_service+0x818>
						{
							lastGSMCommunicationTime=lastToLastGSMCommunicationTime;
   18020:	4b34      	ldr	r3, [pc, #208]	; (180f4 <vTask_GSM_service+0x810>)
   18022:	681a      	ldr	r2, [r3, #0]
   18024:	4b34      	ldr	r3, [pc, #208]	; (180f8 <vTask_GSM_service+0x814>)
   18026:	601a      	str	r2, [r3, #0]
							network_update_time = xTaskGetTickCount();
   18028:	4b0c      	ldr	r3, [pc, #48]	; (1805c <vTask_GSM_service+0x778>)
   1802a:	4798      	blx	r3
   1802c:	0003      	movs	r3, r0
   1802e:	2296      	movs	r2, #150	; 0x96
   18030:	0052      	lsls	r2, r2, #1
   18032:	18ba      	adds	r2, r7, r2
   18034:	6013      	str	r3, [r2, #0]
   18036:	e515      	b.n	17a64 <vTask_GSM_service+0x180>
   18038:	200009dc 	.word	0x200009dc
   1803c:	00014a7d 	.word	0x00014a7d
   18040:	20000963 	.word	0x20000963
   18044:	00014515 	.word	0x00014515
   18048:	00014d71 	.word	0x00014d71
   1804c:	2000082c 	.word	0x2000082c
   18050:	20000943 	.word	0x20000943
   18054:	2000099e 	.word	0x2000099e
   18058:	200009d0 	.word	0x200009d0
   1805c:	000201cd 	.word	0x000201cd
   18060:	20000a14 	.word	0x20000a14
   18064:	2000092d 	.word	0x2000092d
   18068:	00017671 	.word	0x00017671
   1806c:	000148d5 	.word	0x000148d5
   18070:	00014921 	.word	0x00014921
   18074:	fffffedc 	.word	0xfffffedc
   18078:	00028b57 	.word	0x00028b57
   1807c:	000134b1 	.word	0x000134b1
   18080:	00013555 	.word	0x00013555
   18084:	00012cbd 	.word	0x00012cbd
   18088:	00011a79 	.word	0x00011a79
   1808c:	0001099d 	.word	0x0001099d
   18090:	00010a0d 	.word	0x00010a0d
   18094:	0002a404 	.word	0x0002a404
   18098:	0001cf2d 	.word	0x0001cf2d
   1809c:	00014195 	.word	0x00014195
   180a0:	00017705 	.word	0x00017705
   180a4:	0002a40c 	.word	0x0002a40c
   180a8:	00014201 	.word	0x00014201
   180ac:	00028de7 	.word	0x00028de7
   180b0:	00028b33 	.word	0x00028b33
   180b4:	00014fed 	.word	0x00014fed
   180b8:	00010a55 	.word	0x00010a55
   180bc:	0002a3b0 	.word	0x0002a3b0
   180c0:	00010b45 	.word	0x00010b45
   180c4:	00010acd 	.word	0x00010acd
   180c8:	0002a410 	.word	0x0002a410
   180cc:	00012b91 	.word	0x00012b91
   180d0:	00010a91 	.word	0x00010a91
   180d4:	00010b95 	.word	0x00010b95
   180d8:	00010be5 	.word	0x00010be5
   180dc:	00010d21 	.word	0x00010d21
   180e0:	0002a418 	.word	0x0002a418
   180e4:	00012701 	.word	0x00012701
   180e8:	20000a61 	.word	0x20000a61
   180ec:	20000989 	.word	0x20000989
   180f0:	00013601 	.word	0x00013601
   180f4:	20000890 	.word	0x20000890
   180f8:	20000894 	.word	0x20000894
							continue;
						}


						if (!freezeIncomingCalls &&  (currentStatus == 'N' || currentStatus == 'R') && (currentCallStatus == 'N' || currentCallStatus == 'I')) //Ringing Incoming Call
   180fc:	4bd8      	ldr	r3, [pc, #864]	; (18460 <vTask_GSM_service+0xb7c>)
   180fe:	781b      	ldrb	r3, [r3, #0]
   18100:	2201      	movs	r2, #1
   18102:	4053      	eors	r3, r2
   18104:	b2db      	uxtb	r3, r3
   18106:	2b00      	cmp	r3, #0
   18108:	d100      	bne.n	1810c <vTask_GSM_service+0x828>
   1810a:	e099      	b.n	18240 <vTask_GSM_service+0x95c>
   1810c:	4bd5      	ldr	r3, [pc, #852]	; (18464 <vTask_GSM_service+0xb80>)
   1810e:	781b      	ldrb	r3, [r3, #0]
   18110:	b2db      	uxtb	r3, r3
   18112:	2b4e      	cmp	r3, #78	; 0x4e
   18114:	d005      	beq.n	18122 <vTask_GSM_service+0x83e>
   18116:	4bd3      	ldr	r3, [pc, #844]	; (18464 <vTask_GSM_service+0xb80>)
   18118:	781b      	ldrb	r3, [r3, #0]
   1811a:	b2db      	uxtb	r3, r3
   1811c:	2b52      	cmp	r3, #82	; 0x52
   1811e:	d000      	beq.n	18122 <vTask_GSM_service+0x83e>
   18120:	e08e      	b.n	18240 <vTask_GSM_service+0x95c>
   18122:	4bd1      	ldr	r3, [pc, #836]	; (18468 <vTask_GSM_service+0xb84>)
   18124:	781b      	ldrb	r3, [r3, #0]
   18126:	b2db      	uxtb	r3, r3
   18128:	2b4e      	cmp	r3, #78	; 0x4e
   1812a:	d005      	beq.n	18138 <vTask_GSM_service+0x854>
   1812c:	4bce      	ldr	r3, [pc, #824]	; (18468 <vTask_GSM_service+0xb84>)
   1812e:	781b      	ldrb	r3, [r3, #0]
   18130:	b2db      	uxtb	r3, r3
   18132:	2b49      	cmp	r3, #73	; 0x49
   18134:	d000      	beq.n	18138 <vTask_GSM_service+0x854>
   18136:	e083      	b.n	18240 <vTask_GSM_service+0x95c>
						{
							if (gsm_responseLine_isRinging(response))
   18138:	230c      	movs	r3, #12
   1813a:	18fb      	adds	r3, r7, r3
   1813c:	0018      	movs	r0, r3
   1813e:	4bcb      	ldr	r3, [pc, #812]	; (1846c <vTask_GSM_service+0xb88>)
   18140:	4798      	blx	r3
   18142:	1e03      	subs	r3, r0, #0
   18144:	d071      	beq.n	1822a <vTask_GSM_service+0x946>
							{
								currentStatus = 'R';
   18146:	4bc7      	ldr	r3, [pc, #796]	; (18464 <vTask_GSM_service+0xb80>)
   18148:	2252      	movs	r2, #82	; 0x52
   1814a:	701a      	strb	r2, [r3, #0]
								currentCallStatus = 'I';
   1814c:	4bc6      	ldr	r3, [pc, #792]	; (18468 <vTask_GSM_service+0xb84>)
   1814e:	2249      	movs	r2, #73	; 0x49
   18150:	701a      	strb	r2, [r3, #0]
								char incoming_caller[20]={0};
   18152:	23ec      	movs	r3, #236	; 0xec
   18154:	18fb      	adds	r3, r7, r3
   18156:	0018      	movs	r0, r3
   18158:	2314      	movs	r3, #20
   1815a:	001a      	movs	r2, r3
   1815c:	2100      	movs	r1, #0
   1815e:	4bc4      	ldr	r3, [pc, #784]	; (18470 <vTask_GSM_service+0xb8c>)
   18160:	4798      	blx	r3
								inCall = true;
   18162:	4bc4      	ldr	r3, [pc, #784]	; (18474 <vTask_GSM_service+0xb90>)
   18164:	2201      	movs	r2, #1
   18166:	701a      	strb	r2, [r3, #0]
								
								bool new_call = false;
   18168:	232a      	movs	r3, #42	; 0x2a
   1816a:	33ff      	adds	r3, #255	; 0xff
   1816c:	18fb      	adds	r3, r7, r3
   1816e:	2200      	movs	r2, #0
   18170:	701a      	strb	r2, [r3, #0]
								for (uint8_t i=0;i<4;i++)
   18172:	2394      	movs	r3, #148	; 0x94
   18174:	005b      	lsls	r3, r3, #1
   18176:	18fb      	adds	r3, r7, r3
   18178:	2200      	movs	r2, #0
   1817a:	701a      	strb	r2, [r3, #0]
   1817c:	e02f      	b.n	181de <vTask_GSM_service+0x8fa>
								{
									vTaskDelay(500/portTICK_PERIOD_MS);
   1817e:	23fa      	movs	r3, #250	; 0xfa
   18180:	005b      	lsls	r3, r3, #1
   18182:	0018      	movs	r0, r3
   18184:	4bbc      	ldr	r3, [pc, #752]	; (18478 <vTask_GSM_service+0xb94>)
   18186:	4798      	blx	r3
									gsm_read_response_line(response,sizeof(response));
   18188:	230c      	movs	r3, #12
   1818a:	18fb      	adds	r3, r7, r3
   1818c:	2140      	movs	r1, #64	; 0x40
   1818e:	0018      	movs	r0, r3
   18190:	4bba      	ldr	r3, [pc, #744]	; (1847c <vTask_GSM_service+0xb98>)
   18192:	4798      	blx	r3
									if (gsm_responseLine_get_IncommingCallNo(response,incoming_caller))
   18194:	23ec      	movs	r3, #236	; 0xec
   18196:	18fa      	adds	r2, r7, r3
   18198:	230c      	movs	r3, #12
   1819a:	18fb      	adds	r3, r7, r3
   1819c:	0011      	movs	r1, r2
   1819e:	0018      	movs	r0, r3
   181a0:	4bb7      	ldr	r3, [pc, #732]	; (18480 <vTask_GSM_service+0xb9c>)
   181a2:	4798      	blx	r3
   181a4:	1e03      	subs	r3, r0, #0
   181a6:	d011      	beq.n	181cc <vTask_GSM_service+0x8e8>
									{
										setCallStateOnLCD(LCDCALLSTATE_RINGING,incoming_caller,false);
   181a8:	23ec      	movs	r3, #236	; 0xec
   181aa:	18fb      	adds	r3, r7, r3
   181ac:	2200      	movs	r2, #0
   181ae:	0019      	movs	r1, r3
   181b0:	2001      	movs	r0, #1
   181b2:	4bb4      	ldr	r3, [pc, #720]	; (18484 <vTask_GSM_service+0xba0>)
   181b4:	4798      	blx	r3
										new_call = true;
   181b6:	232a      	movs	r3, #42	; 0x2a
   181b8:	33ff      	adds	r3, #255	; 0xff
   181ba:	18fb      	adds	r3, r7, r3
   181bc:	2201      	movs	r2, #1
   181be:	701a      	strb	r2, [r3, #0]
										callCutWait = xTaskGetTickCount();
   181c0:	4bb1      	ldr	r3, [pc, #708]	; (18488 <vTask_GSM_service+0xba4>)
   181c2:	4798      	blx	r3
   181c4:	0002      	movs	r2, r0
   181c6:	4bb1      	ldr	r3, [pc, #708]	; (1848c <vTask_GSM_service+0xba8>)
   181c8:	601a      	str	r2, [r3, #0]
										break;
   181ca:	e00e      	b.n	181ea <vTask_GSM_service+0x906>
								for (uint8_t i=0;i<4;i++)
   181cc:	2394      	movs	r3, #148	; 0x94
   181ce:	005b      	lsls	r3, r3, #1
   181d0:	18fb      	adds	r3, r7, r3
   181d2:	781a      	ldrb	r2, [r3, #0]
   181d4:	2394      	movs	r3, #148	; 0x94
   181d6:	005b      	lsls	r3, r3, #1
   181d8:	18fb      	adds	r3, r7, r3
   181da:	3201      	adds	r2, #1
   181dc:	701a      	strb	r2, [r3, #0]
   181de:	2394      	movs	r3, #148	; 0x94
   181e0:	005b      	lsls	r3, r3, #1
   181e2:	18fb      	adds	r3, r7, r3
   181e4:	781b      	ldrb	r3, [r3, #0]
   181e6:	2b03      	cmp	r3, #3
   181e8:	d9c9      	bls.n	1817e <vTask_GSM_service+0x89a>
									}
								}
								if (new_call)
   181ea:	232a      	movs	r3, #42	; 0x2a
   181ec:	33ff      	adds	r3, #255	; 0xff
   181ee:	18fb      	adds	r3, r7, r3
   181f0:	781b      	ldrb	r3, [r3, #0]
   181f2:	2b00      	cmp	r3, #0
   181f4:	d100      	bne.n	181f8 <vTask_GSM_service+0x914>
   181f6:	e188      	b.n	1850a <vTask_GSM_service+0xc26>
								{
									new_call = false;
   181f8:	232a      	movs	r3, #42	; 0x2a
   181fa:	33ff      	adds	r3, #255	; 0xff
   181fc:	18fb      	adds	r3, r7, r3
   181fe:	2200      	movs	r2, #0
   18200:	701a      	strb	r2, [r3, #0]
									if (checkNumber(incoming_caller))
   18202:	23ec      	movs	r3, #236	; 0xec
   18204:	18fb      	adds	r3, r7, r3
   18206:	0018      	movs	r0, r3
   18208:	4ba1      	ldr	r3, [pc, #644]	; (18490 <vTask_GSM_service+0xbac>)
   1820a:	4798      	blx	r3
   1820c:	1e03      	subs	r3, r0, #0
   1820e:	d009      	beq.n	18224 <vTask_GSM_service+0x940>
									{
										acceptCall();
   18210:	4ba0      	ldr	r3, [pc, #640]	; (18494 <vTask_GSM_service+0xbb0>)
   18212:	4798      	blx	r3
										setCallStateOnLCD(LCDCALLSTATE_INCALL,incoming_caller,false);
   18214:	23ec      	movs	r3, #236	; 0xec
   18216:	18fb      	adds	r3, r7, r3
   18218:	2200      	movs	r2, #0
   1821a:	0019      	movs	r1, r3
   1821c:	2002      	movs	r0, #2
   1821e:	4b99      	ldr	r3, [pc, #612]	; (18484 <vTask_GSM_service+0xba0>)
   18220:	4798      	blx	r3
							if (gsm_responseLine_isRinging(response))
   18222:	e172      	b.n	1850a <vTask_GSM_service+0xc26>
									}
									else
									{
										endCall();
   18224:	4b9c      	ldr	r3, [pc, #624]	; (18498 <vTask_GSM_service+0xbb4>)
   18226:	4798      	blx	r3
							if (gsm_responseLine_isRinging(response))
   18228:	e16f      	b.n	1850a <vTask_GSM_service+0xc26>
									}
								}
							}
							else if (gsm_responseLine_isCallCut(response))
   1822a:	230c      	movs	r3, #12
   1822c:	18fb      	adds	r3, r7, r3
   1822e:	0018      	movs	r0, r3
   18230:	4b9a      	ldr	r3, [pc, #616]	; (1849c <vTask_GSM_service+0xbb8>)
   18232:	4798      	blx	r3
   18234:	1e03      	subs	r3, r0, #0
   18236:	d100      	bne.n	1823a <vTask_GSM_service+0x956>
   18238:	e167      	b.n	1850a <vTask_GSM_service+0xc26>
							{
								endCall();
   1823a:	4b97      	ldr	r3, [pc, #604]	; (18498 <vTask_GSM_service+0xbb4>)
   1823c:	4798      	blx	r3
							if (gsm_responseLine_isRinging(response))
   1823e:	e164      	b.n	1850a <vTask_GSM_service+0xc26>
							}
						}
						else if (!freezeIncomingCalls && currentStatus == 'I' && currentCallStatus == 'I') //IN CALL INCOMING CALL
   18240:	4b87      	ldr	r3, [pc, #540]	; (18460 <vTask_GSM_service+0xb7c>)
   18242:	781b      	ldrb	r3, [r3, #0]
   18244:	2201      	movs	r2, #1
   18246:	4053      	eors	r3, r2
   18248:	b2db      	uxtb	r3, r3
   1824a:	2b00      	cmp	r3, #0
   1824c:	d045      	beq.n	182da <vTask_GSM_service+0x9f6>
   1824e:	4b85      	ldr	r3, [pc, #532]	; (18464 <vTask_GSM_service+0xb80>)
   18250:	781b      	ldrb	r3, [r3, #0]
   18252:	b2db      	uxtb	r3, r3
   18254:	2b49      	cmp	r3, #73	; 0x49
   18256:	d140      	bne.n	182da <vTask_GSM_service+0x9f6>
   18258:	4b83      	ldr	r3, [pc, #524]	; (18468 <vTask_GSM_service+0xb84>)
   1825a:	781b      	ldrb	r3, [r3, #0]
   1825c:	b2db      	uxtb	r3, r3
   1825e:	2b49      	cmp	r3, #73	; 0x49
   18260:	d13b      	bne.n	182da <vTask_GSM_service+0x9f6>
						{
							if (gsm_responseLine_isCallCut(response))
   18262:	230c      	movs	r3, #12
   18264:	18fb      	adds	r3, r7, r3
   18266:	0018      	movs	r0, r3
   18268:	4b8c      	ldr	r3, [pc, #560]	; (1849c <vTask_GSM_service+0xbb8>)
   1826a:	4798      	blx	r3
   1826c:	1e03      	subs	r3, r0, #0
   1826e:	d002      	beq.n	18276 <vTask_GSM_service+0x992>
							{
								endCall();
   18270:	4b89      	ldr	r3, [pc, #548]	; (18498 <vTask_GSM_service+0xbb4>)
   18272:	4798      	blx	r3
							if (gsm_responseLine_isCallCut(response))
   18274:	e14d      	b.n	18512 <vTask_GSM_service+0xc2e>
							}
							else if(gsm_responseLine_isNew_DTMF_Command_Received(response))
   18276:	230c      	movs	r3, #12
   18278:	18fb      	adds	r3, r7, r3
   1827a:	0018      	movs	r0, r3
   1827c:	4b88      	ldr	r3, [pc, #544]	; (184a0 <vTask_GSM_service+0xbbc>)
   1827e:	4798      	blx	r3
   18280:	1e03      	subs	r3, r0, #0
   18282:	d024      	beq.n	182ce <vTask_GSM_service+0x9ea>
							{
								char *dtmf_tocken;
								dtmf_tocken = strtok(response,": ");
   18284:	4a87      	ldr	r2, [pc, #540]	; (184a4 <vTask_GSM_service+0xbc0>)
   18286:	230c      	movs	r3, #12
   18288:	18fb      	adds	r3, r7, r3
   1828a:	0011      	movs	r1, r2
   1828c:	0018      	movs	r0, r3
   1828e:	4b86      	ldr	r3, [pc, #536]	; (184a8 <vTask_GSM_service+0xbc4>)
   18290:	4798      	blx	r3
   18292:	0003      	movs	r3, r0
   18294:	228e      	movs	r2, #142	; 0x8e
   18296:	0052      	lsls	r2, r2, #1
   18298:	18ba      	adds	r2, r7, r2
   1829a:	6013      	str	r3, [r2, #0]
								dtmf_tocken = strtok(NULL,": ");
   1829c:	4b81      	ldr	r3, [pc, #516]	; (184a4 <vTask_GSM_service+0xbc0>)
   1829e:	0019      	movs	r1, r3
   182a0:	2000      	movs	r0, #0
   182a2:	4b81      	ldr	r3, [pc, #516]	; (184a8 <vTask_GSM_service+0xbc4>)
   182a4:	4798      	blx	r3
   182a6:	0003      	movs	r3, r0
   182a8:	228e      	movs	r2, #142	; 0x8e
   182aa:	0052      	lsls	r2, r2, #1
   182ac:	18ba      	adds	r2, r7, r2
   182ae:	6013      	str	r3, [r2, #0]
								RemoveSpaces(dtmf_tocken);
   182b0:	238e      	movs	r3, #142	; 0x8e
   182b2:	005b      	lsls	r3, r3, #1
   182b4:	18fb      	adds	r3, r7, r3
   182b6:	681b      	ldr	r3, [r3, #0]
   182b8:	0018      	movs	r0, r3
   182ba:	4b7c      	ldr	r3, [pc, #496]	; (184ac <vTask_GSM_service+0xbc8>)
   182bc:	4798      	blx	r3
								processOnDTMF(dtmf_tocken);
   182be:	238e      	movs	r3, #142	; 0x8e
   182c0:	005b      	lsls	r3, r3, #1
   182c2:	18fb      	adds	r3, r7, r3
   182c4:	681b      	ldr	r3, [r3, #0]
   182c6:	0018      	movs	r0, r3
   182c8:	4b79      	ldr	r3, [pc, #484]	; (184b0 <vTask_GSM_service+0xbcc>)
   182ca:	4798      	blx	r3
							if (gsm_responseLine_isCallCut(response))
   182cc:	e121      	b.n	18512 <vTask_GSM_service+0xc2e>
							}
							else
							{
								playSoundAgain(response);
   182ce:	230c      	movs	r3, #12
   182d0:	18fb      	adds	r3, r7, r3
   182d2:	0018      	movs	r0, r3
   182d4:	4b77      	ldr	r3, [pc, #476]	; (184b4 <vTask_GSM_service+0xbd0>)
   182d6:	4798      	blx	r3
							if (gsm_responseLine_isCallCut(response))
   182d8:	e11b      	b.n	18512 <vTask_GSM_service+0xc2e>
							}
						}
						else if ((currentStatus == 'N' || currentStatus == 'R') && currentCallStatus == 'O') // OUTGOING CALL
   182da:	4b62      	ldr	r3, [pc, #392]	; (18464 <vTask_GSM_service+0xb80>)
   182dc:	781b      	ldrb	r3, [r3, #0]
   182de:	b2db      	uxtb	r3, r3
   182e0:	2b4e      	cmp	r3, #78	; 0x4e
   182e2:	d004      	beq.n	182ee <vTask_GSM_service+0xa0a>
   182e4:	4b5f      	ldr	r3, [pc, #380]	; (18464 <vTask_GSM_service+0xb80>)
   182e6:	781b      	ldrb	r3, [r3, #0]
   182e8:	b2db      	uxtb	r3, r3
   182ea:	2b52      	cmp	r3, #82	; 0x52
   182ec:	d163      	bne.n	183b6 <vTask_GSM_service+0xad2>
   182ee:	4b5e      	ldr	r3, [pc, #376]	; (18468 <vTask_GSM_service+0xb84>)
   182f0:	781b      	ldrb	r3, [r3, #0]
   182f2:	b2db      	uxtb	r3, r3
   182f4:	2b4f      	cmp	r3, #79	; 0x4f
   182f6:	d15e      	bne.n	183b6 <vTask_GSM_service+0xad2>
						{
							if (OutGoingcallState(response) == 'R')
   182f8:	230c      	movs	r3, #12
   182fa:	18fb      	adds	r3, r7, r3
   182fc:	0018      	movs	r0, r3
   182fe:	4b6e      	ldr	r3, [pc, #440]	; (184b8 <vTask_GSM_service+0xbd4>)
   18300:	4798      	blx	r3
   18302:	0003      	movs	r3, r0
   18304:	2b52      	cmp	r3, #82	; 0x52
   18306:	d10b      	bne.n	18320 <vTask_GSM_service+0xa3c>
							{
								callCutWait = xTaskGetTickCount();
   18308:	4b5f      	ldr	r3, [pc, #380]	; (18488 <vTask_GSM_service+0xba4>)
   1830a:	4798      	blx	r3
   1830c:	0002      	movs	r2, r0
   1830e:	4b5f      	ldr	r3, [pc, #380]	; (1848c <vTask_GSM_service+0xba8>)
   18310:	601a      	str	r2, [r3, #0]
								currentStatus = 'R';
   18312:	4b54      	ldr	r3, [pc, #336]	; (18464 <vTask_GSM_service+0xb80>)
   18314:	2252      	movs	r2, #82	; 0x52
   18316:	701a      	strb	r2, [r3, #0]
								currentCallStatus = 'O';
   18318:	4b53      	ldr	r3, [pc, #332]	; (18468 <vTask_GSM_service+0xb84>)
   1831a:	224f      	movs	r2, #79	; 0x4f
   1831c:	701a      	strb	r2, [r3, #0]
							if (OutGoingcallState(response) == 'R')
   1831e:	e0f7      	b.n	18510 <vTask_GSM_service+0xc2c>
							}
							else if (gsm_responseLine_isCallCut(response) || OutGoingcallState(response) == 'E') //
   18320:	230c      	movs	r3, #12
   18322:	18fb      	adds	r3, r7, r3
   18324:	0018      	movs	r0, r3
   18326:	4b5d      	ldr	r3, [pc, #372]	; (1849c <vTask_GSM_service+0xbb8>)
   18328:	4798      	blx	r3
   1832a:	1e03      	subs	r3, r0, #0
   1832c:	d107      	bne.n	1833e <vTask_GSM_service+0xa5a>
   1832e:	230c      	movs	r3, #12
   18330:	18fb      	adds	r3, r7, r3
   18332:	0018      	movs	r0, r3
   18334:	4b60      	ldr	r3, [pc, #384]	; (184b8 <vTask_GSM_service+0xbd4>)
   18336:	4798      	blx	r3
   18338:	0003      	movs	r3, r0
   1833a:	2b45      	cmp	r3, #69	; 0x45
   1833c:	d110      	bne.n	18360 <vTask_GSM_service+0xa7c>
							{
								char t1 = actionType;
   1833e:	231c      	movs	r3, #28
   18340:	33ff      	adds	r3, #255	; 0xff
   18342:	18fb      	adds	r3, r7, r3
   18344:	4a5d      	ldr	r2, [pc, #372]	; (184bc <vTask_GSM_service+0xbd8>)
   18346:	7812      	ldrb	r2, [r2, #0]
   18348:	701a      	strb	r2, [r3, #0]
								endCall();
   1834a:	4b53      	ldr	r3, [pc, #332]	; (18498 <vTask_GSM_service+0xbb4>)
   1834c:	4798      	blx	r3
								checkRespSMS(t1);
   1834e:	231c      	movs	r3, #28
   18350:	33ff      	adds	r3, #255	; 0xff
   18352:	18fb      	adds	r3, r7, r3
   18354:	781b      	ldrb	r3, [r3, #0]
   18356:	0018      	movs	r0, r3
   18358:	4b59      	ldr	r3, [pc, #356]	; (184c0 <vTask_GSM_service+0xbdc>)
   1835a:	4798      	blx	r3
							{
   1835c:	46c0      	nop			; (mov r8, r8)
							if (OutGoingcallState(response) == 'R')
   1835e:	e0d7      	b.n	18510 <vTask_GSM_service+0xc2c>
							}
							else if (OutGoingcallState(response) == 'I')
   18360:	230c      	movs	r3, #12
   18362:	18fb      	adds	r3, r7, r3
   18364:	0018      	movs	r0, r3
   18366:	4b54      	ldr	r3, [pc, #336]	; (184b8 <vTask_GSM_service+0xbd4>)
   18368:	4798      	blx	r3
   1836a:	0003      	movs	r3, r0
   1836c:	2b49      	cmp	r3, #73	; 0x49
   1836e:	d000      	beq.n	18372 <vTask_GSM_service+0xa8e>
   18370:	e0ce      	b.n	18510 <vTask_GSM_service+0xc2c>
							{
								callCutWait = xTaskGetTickCount();
   18372:	4b45      	ldr	r3, [pc, #276]	; (18488 <vTask_GSM_service+0xba4>)
   18374:	4798      	blx	r3
   18376:	0002      	movs	r2, r0
   18378:	4b44      	ldr	r3, [pc, #272]	; (1848c <vTask_GSM_service+0xba8>)
   1837a:	601a      	str	r2, [r3, #0]
								currentStatus = 'I';
   1837c:	4b39      	ldr	r3, [pc, #228]	; (18464 <vTask_GSM_service+0xb80>)
   1837e:	2249      	movs	r2, #73	; 0x49
   18380:	701a      	strb	r2, [r3, #0]
								currentCallStatus = 'O';
   18382:	4b39      	ldr	r3, [pc, #228]	; (18468 <vTask_GSM_service+0xb84>)
   18384:	224f      	movs	r2, #79	; 0x4f
   18386:	701a      	strb	r2, [r3, #0]
								callAccepted = true;
   18388:	4b4e      	ldr	r3, [pc, #312]	; (184c4 <vTask_GSM_service+0xbe0>)
   1838a:	2201      	movs	r2, #1
   1838c:	701a      	strb	r2, [r3, #0]
								setCallStateOnLCD(LCDCALLSTATE_INCALL,NULL,true);
   1838e:	2201      	movs	r2, #1
   18390:	2100      	movs	r1, #0
   18392:	2002      	movs	r0, #2
   18394:	4b3b      	ldr	r3, [pc, #236]	; (18484 <vTask_GSM_service+0xba0>)
   18396:	4798      	blx	r3
								if (!m2mEvent)
   18398:	4b4b      	ldr	r3, [pc, #300]	; (184c8 <vTask_GSM_service+0xbe4>)
   1839a:	781b      	ldrb	r3, [r3, #0]
   1839c:	2201      	movs	r2, #1
   1839e:	4053      	eors	r3, r2
   183a0:	b2db      	uxtb	r3, r3
   183a2:	2b00      	cmp	r3, #0
   183a4:	d100      	bne.n	183a8 <vTask_GSM_service+0xac4>
   183a6:	e0b3      	b.n	18510 <vTask_GSM_service+0xc2c>
								{
									playSound(actionType,true);
   183a8:	4b44      	ldr	r3, [pc, #272]	; (184bc <vTask_GSM_service+0xbd8>)
   183aa:	781b      	ldrb	r3, [r3, #0]
   183ac:	2101      	movs	r1, #1
   183ae:	0018      	movs	r0, r3
   183b0:	4b46      	ldr	r3, [pc, #280]	; (184cc <vTask_GSM_service+0xbe8>)
   183b2:	4798      	blx	r3
							if (OutGoingcallState(response) == 'R')
   183b4:	e0ac      	b.n	18510 <vTask_GSM_service+0xc2c>
								}
							}
						}
						else if (currentStatus == 'I' && currentCallStatus == 'O') //IN CALL OUTGOING CALL
   183b6:	4b2b      	ldr	r3, [pc, #172]	; (18464 <vTask_GSM_service+0xb80>)
   183b8:	781b      	ldrb	r3, [r3, #0]
   183ba:	b2db      	uxtb	r3, r3
   183bc:	2b49      	cmp	r3, #73	; 0x49
   183be:	d001      	beq.n	183c4 <vTask_GSM_service+0xae0>
   183c0:	f7ff fb50 	bl	17a64 <vTask_GSM_service+0x180>
   183c4:	4b28      	ldr	r3, [pc, #160]	; (18468 <vTask_GSM_service+0xb84>)
   183c6:	781b      	ldrb	r3, [r3, #0]
   183c8:	b2db      	uxtb	r3, r3
   183ca:	2b4f      	cmp	r3, #79	; 0x4f
   183cc:	d001      	beq.n	183d2 <vTask_GSM_service+0xaee>
   183ce:	f7ff fb49 	bl	17a64 <vTask_GSM_service+0x180>
						{
							if (gsm_responseLine_isCallCut(response) || OutGoingcallState(response) == 'E')
   183d2:	230c      	movs	r3, #12
   183d4:	18fb      	adds	r3, r7, r3
   183d6:	0018      	movs	r0, r3
   183d8:	4b30      	ldr	r3, [pc, #192]	; (1849c <vTask_GSM_service+0xbb8>)
   183da:	4798      	blx	r3
   183dc:	1e03      	subs	r3, r0, #0
   183de:	d107      	bne.n	183f0 <vTask_GSM_service+0xb0c>
   183e0:	230c      	movs	r3, #12
   183e2:	18fb      	adds	r3, r7, r3
   183e4:	0018      	movs	r0, r3
   183e6:	4b34      	ldr	r3, [pc, #208]	; (184b8 <vTask_GSM_service+0xbd4>)
   183e8:	4798      	blx	r3
   183ea:	0003      	movs	r3, r0
   183ec:	2b45      	cmp	r3, #69	; 0x45
   183ee:	d102      	bne.n	183f6 <vTask_GSM_service+0xb12>
							{
								endCall();
   183f0:	4b29      	ldr	r3, [pc, #164]	; (18498 <vTask_GSM_service+0xbb4>)
   183f2:	4798      	blx	r3
   183f4:	e08d      	b.n	18512 <vTask_GSM_service+0xc2e>
							}
							else if (gsm_responseLine_isNew_DTMF_Command_Received(response))
   183f6:	230c      	movs	r3, #12
   183f8:	18fb      	adds	r3, r7, r3
   183fa:	0018      	movs	r0, r3
   183fc:	4b28      	ldr	r3, [pc, #160]	; (184a0 <vTask_GSM_service+0xbbc>)
   183fe:	4798      	blx	r3
   18400:	1e03      	subs	r3, r0, #0
   18402:	d025      	beq.n	18450 <vTask_GSM_service+0xb6c>
							{
								char *dtmf_tocken;
								dtmf_tocken = strtok(response,": ");
   18404:	4a27      	ldr	r2, [pc, #156]	; (184a4 <vTask_GSM_service+0xbc0>)
   18406:	230c      	movs	r3, #12
   18408:	18fb      	adds	r3, r7, r3
   1840a:	0011      	movs	r1, r2
   1840c:	0018      	movs	r0, r3
   1840e:	4b26      	ldr	r3, [pc, #152]	; (184a8 <vTask_GSM_service+0xbc4>)
   18410:	4798      	blx	r3
   18412:	0003      	movs	r3, r0
   18414:	228a      	movs	r2, #138	; 0x8a
   18416:	0052      	lsls	r2, r2, #1
   18418:	18ba      	adds	r2, r7, r2
   1841a:	6013      	str	r3, [r2, #0]
								dtmf_tocken = strtok(NULL,": ");
   1841c:	4b21      	ldr	r3, [pc, #132]	; (184a4 <vTask_GSM_service+0xbc0>)
   1841e:	0019      	movs	r1, r3
   18420:	2000      	movs	r0, #0
   18422:	4b21      	ldr	r3, [pc, #132]	; (184a8 <vTask_GSM_service+0xbc4>)
   18424:	4798      	blx	r3
   18426:	0003      	movs	r3, r0
   18428:	228a      	movs	r2, #138	; 0x8a
   1842a:	0052      	lsls	r2, r2, #1
   1842c:	18ba      	adds	r2, r7, r2
   1842e:	6013      	str	r3, [r2, #0]
								RemoveSpaces(dtmf_tocken);
   18430:	238a      	movs	r3, #138	; 0x8a
   18432:	005b      	lsls	r3, r3, #1
   18434:	18fb      	adds	r3, r7, r3
   18436:	681b      	ldr	r3, [r3, #0]
   18438:	0018      	movs	r0, r3
   1843a:	4b1c      	ldr	r3, [pc, #112]	; (184ac <vTask_GSM_service+0xbc8>)
   1843c:	4798      	blx	r3
								processOnDTMF(dtmf_tocken);
   1843e:	238a      	movs	r3, #138	; 0x8a
   18440:	005b      	lsls	r3, r3, #1
   18442:	18fb      	adds	r3, r7, r3
   18444:	681b      	ldr	r3, [r3, #0]
   18446:	0018      	movs	r0, r3
   18448:	4b19      	ldr	r3, [pc, #100]	; (184b0 <vTask_GSM_service+0xbcc>)
   1844a:	4798      	blx	r3
   1844c:	f7ff fb0a 	bl	17a64 <vTask_GSM_service+0x180>
							}
							else
							{
								playSoundAgain(response);
   18450:	230c      	movs	r3, #12
   18452:	18fb      	adds	r3, r7, r3
   18454:	0018      	movs	r0, r3
   18456:	4b17      	ldr	r3, [pc, #92]	; (184b4 <vTask_GSM_service+0xbd0>)
   18458:	4798      	blx	r3
   1845a:	f7ff fb03 	bl	17a64 <vTask_GSM_service+0x180>
   1845e:	46c0      	nop			; (mov r8, r8)
   18460:	20000944 	.word	0x20000944
   18464:	200009dc 	.word	0x200009dc
   18468:	2000098f 	.word	0x2000098f
   1846c:	000135d1 	.word	0x000135d1
   18470:	00028b57 	.word	0x00028b57
   18474:	2000099c 	.word	0x2000099c
   18478:	0001fe69 	.word	0x0001fe69
   1847c:	000134b1 	.word	0x000134b1
   18480:	00013759 	.word	0x00013759
   18484:	0001cf2d 	.word	0x0001cf2d
   18488:	000201cd 	.word	0x000201cd
   1848c:	20000a14 	.word	0x20000a14
   18490:	00017375 	.word	0x00017375
   18494:	0001480d 	.word	0x0001480d
   18498:	00014515 	.word	0x00014515
   1849c:	000137fd 	.word	0x000137fd
   184a0:	00013875 	.word	0x00013875
   184a4:	0002a428 	.word	0x0002a428
   184a8:	00028e49 	.word	0x00028e49
   184ac:	00012abd 	.word	0x00012abd
   184b0:	00014de9 	.word	0x00014de9
   184b4:	00014965 	.word	0x00014965
   184b8:	00014ae5 	.word	0x00014ae5
   184bc:	20000963 	.word	0x20000963
   184c0:	00014d71 	.word	0x00014d71
   184c4:	2000099e 	.word	0x2000099e
   184c8:	20000943 	.word	0x20000943
   184cc:	00014855 	.word	0x00014855
				}
			}
		}
		else
		{
			boolGsm_config_flag			=false;
   184d0:	4b11      	ldr	r3, [pc, #68]	; (18518 <vTask_GSM_service+0xc34>)
   184d2:	2200      	movs	r2, #0
   184d4:	701a      	strb	r2, [r3, #0]
			boolOne_Time_Msg_Delete_Flag   =false;
   184d6:	4b11      	ldr	r3, [pc, #68]	; (1851c <vTask_GSM_service+0xc38>)
   184d8:	2200      	movs	r2, #0
   184da:	701a      	strb	r2, [r3, #0]
			
			GSM_PWR_ON;
   184dc:	4b10      	ldr	r3, [pc, #64]	; (18520 <vTask_GSM_service+0xc3c>)
   184de:	4a10      	ldr	r2, [pc, #64]	; (18520 <vTask_GSM_service+0xc3c>)
   184e0:	6812      	ldr	r2, [r2, #0]
   184e2:	2180      	movs	r1, #128	; 0x80
   184e4:	0249      	lsls	r1, r1, #9
   184e6:	430a      	orrs	r2, r1
   184e8:	601a      	str	r2, [r3, #0]
			vTaskDelay(3000);
   184ea:	4b0e      	ldr	r3, [pc, #56]	; (18524 <vTask_GSM_service+0xc40>)
   184ec:	0018      	movs	r0, r3
   184ee:	4b0e      	ldr	r3, [pc, #56]	; (18528 <vTask_GSM_service+0xc44>)
   184f0:	4798      	blx	r3
			GSM_PWR_OFF;
   184f2:	4b0b      	ldr	r3, [pc, #44]	; (18520 <vTask_GSM_service+0xc3c>)
   184f4:	4a0a      	ldr	r2, [pc, #40]	; (18520 <vTask_GSM_service+0xc3c>)
   184f6:	6812      	ldr	r2, [r2, #0]
   184f8:	490c      	ldr	r1, [pc, #48]	; (1852c <vTask_GSM_service+0xc48>)
   184fa:	400a      	ands	r2, r1
   184fc:	601a      	str	r2, [r3, #0]
			vTaskDelay(5000);
   184fe:	4b0c      	ldr	r3, [pc, #48]	; (18530 <vTask_GSM_service+0xc4c>)
   18500:	0018      	movs	r0, r3
   18502:	4b09      	ldr	r3, [pc, #36]	; (18528 <vTask_GSM_service+0xc44>)
   18504:	4798      	blx	r3
   18506:	f7ff faad 	bl	17a64 <vTask_GSM_service+0x180>
							if (gsm_responseLine_isRinging(response))
   1850a:	46c0      	nop			; (mov r8, r8)
   1850c:	f7ff faaa 	bl	17a64 <vTask_GSM_service+0x180>
							if (OutGoingcallState(response) == 'R')
   18510:	46c0      	nop			; (mov r8, r8)
		if (currentStatus == 'I' || currentStatus == 'R')
   18512:	f7ff faa7 	bl	17a64 <vTask_GSM_service+0x180>
   18516:	46c0      	nop			; (mov r8, r8)
   18518:	200009c4 	.word	0x200009c4
   1851c:	200009d1 	.word	0x200009d1
   18520:	41004490 	.word	0x41004490
   18524:	00000bb8 	.word	0x00000bb8
   18528:	0001fe69 	.word	0x0001fe69
   1852c:	fffeffff 	.word	0xfffeffff
   18530:	00001388 	.word	0x00001388

00018534 <start_gsm_service>:
		}
	}
}
void start_gsm_service(void)
{
   18534:	b590      	push	{r4, r7, lr}
   18536:	b083      	sub	sp, #12
   18538:	af02      	add	r7, sp, #8
	xTaskCreate(vTask_GSM_service,NULL,(uint16_t)1100,NULL,1,NULL);
   1853a:	4a07      	ldr	r2, [pc, #28]	; (18558 <start_gsm_service+0x24>)
   1853c:	4807      	ldr	r0, [pc, #28]	; (1855c <start_gsm_service+0x28>)
   1853e:	2300      	movs	r3, #0
   18540:	9301      	str	r3, [sp, #4]
   18542:	2301      	movs	r3, #1
   18544:	9300      	str	r3, [sp, #0]
   18546:	2300      	movs	r3, #0
   18548:	2100      	movs	r1, #0
   1854a:	4c05      	ldr	r4, [pc, #20]	; (18560 <start_gsm_service+0x2c>)
   1854c:	47a0      	blx	r4
}
   1854e:	46c0      	nop			; (mov r8, r8)
   18550:	46bd      	mov	sp, r7
   18552:	b001      	add	sp, #4
   18554:	bd90      	pop	{r4, r7, pc}
   18556:	46c0      	nop			; (mov r8, r8)
   18558:	0000044c 	.word	0x0000044c
   1855c:	000178e5 	.word	0x000178e5
   18560:	0001fb29 	.word	0x0001fb29

00018564 <busy>:

bool busy(void)
{
   18564:	b580      	push	{r7, lr}
   18566:	af00      	add	r7, sp, #0
	return (inCall || isRinging  /*|| inInterrupt*/);
   18568:	4b09      	ldr	r3, [pc, #36]	; (18590 <busy+0x2c>)
   1856a:	781b      	ldrb	r3, [r3, #0]
   1856c:	2b00      	cmp	r3, #0
   1856e:	d104      	bne.n	1857a <busy+0x16>
   18570:	4b08      	ldr	r3, [pc, #32]	; (18594 <busy+0x30>)
   18572:	781b      	ldrb	r3, [r3, #0]
   18574:	b2db      	uxtb	r3, r3
   18576:	2b00      	cmp	r3, #0
   18578:	d001      	beq.n	1857e <busy+0x1a>
   1857a:	2301      	movs	r3, #1
   1857c:	e000      	b.n	18580 <busy+0x1c>
   1857e:	2300      	movs	r3, #0
   18580:	1c1a      	adds	r2, r3, #0
   18582:	2301      	movs	r3, #1
   18584:	4013      	ands	r3, r2
   18586:	b2db      	uxtb	r3, r3
}
   18588:	0018      	movs	r0, r3
   1858a:	46bd      	mov	sp, r7
   1858c:	bd80      	pop	{r7, pc}
   1858e:	46c0      	nop			; (mov r8, r8)
   18590:	2000099c 	.word	0x2000099c
   18594:	2000088e 	.word	0x2000088e

00018598 <checkNotInCall>:

bool checkNotInCall(void)
{
   18598:	b580      	push	{r7, lr}
   1859a:	af00      	add	r7, sp, #0
	return ( /*!sendCUSDResponse     &&*/  currentStatus=='N'
   1859c:	4b13      	ldr	r3, [pc, #76]	; (185ec <checkNotInCall+0x54>)
   1859e:	781b      	ldrb	r3, [r3, #0]
   185a0:	b2db      	uxtb	r3, r3
	&&  currentCallStatus=='N'  &&  obtainNewEvent
	&&  !freezeIncomingCalls && !busy());
   185a2:	2b4e      	cmp	r3, #78	; 0x4e
   185a4:	d11a      	bne.n	185dc <checkNotInCall+0x44>
	&&  currentCallStatus=='N'  &&  obtainNewEvent
   185a6:	4b12      	ldr	r3, [pc, #72]	; (185f0 <checkNotInCall+0x58>)
   185a8:	781b      	ldrb	r3, [r3, #0]
   185aa:	b2db      	uxtb	r3, r3
   185ac:	2b4e      	cmp	r3, #78	; 0x4e
   185ae:	d115      	bne.n	185dc <checkNotInCall+0x44>
   185b0:	4b10      	ldr	r3, [pc, #64]	; (185f4 <checkNotInCall+0x5c>)
   185b2:	781b      	ldrb	r3, [r3, #0]
   185b4:	2b00      	cmp	r3, #0
   185b6:	d011      	beq.n	185dc <checkNotInCall+0x44>
	&&  !freezeIncomingCalls && !busy());
   185b8:	4b0f      	ldr	r3, [pc, #60]	; (185f8 <checkNotInCall+0x60>)
   185ba:	781b      	ldrb	r3, [r3, #0]
   185bc:	2201      	movs	r2, #1
   185be:	4053      	eors	r3, r2
   185c0:	b2db      	uxtb	r3, r3
   185c2:	2b00      	cmp	r3, #0
   185c4:	d00a      	beq.n	185dc <checkNotInCall+0x44>
   185c6:	4b0d      	ldr	r3, [pc, #52]	; (185fc <checkNotInCall+0x64>)
   185c8:	4798      	blx	r3
   185ca:	0003      	movs	r3, r0
   185cc:	001a      	movs	r2, r3
   185ce:	2301      	movs	r3, #1
   185d0:	4053      	eors	r3, r2
   185d2:	b2db      	uxtb	r3, r3
   185d4:	2b00      	cmp	r3, #0
   185d6:	d001      	beq.n	185dc <checkNotInCall+0x44>
   185d8:	2301      	movs	r3, #1
   185da:	e000      	b.n	185de <checkNotInCall+0x46>
   185dc:	2300      	movs	r3, #0
   185de:	1c1a      	adds	r2, r3, #0
   185e0:	2301      	movs	r3, #1
   185e2:	4013      	ands	r3, r2
   185e4:	b2db      	uxtb	r3, r3
}
   185e6:	0018      	movs	r0, r3
   185e8:	46bd      	mov	sp, r7
   185ea:	bd80      	pop	{r7, pc}
   185ec:	200009dc 	.word	0x200009dc
   185f0:	2000098f 	.word	0x2000098f
   185f4:	20000972 	.word	0x20000972
   185f8:	20000944 	.word	0x20000944
   185fc:	00018565 	.word	0x00018565

00018600 <gsm_checkSleepElligible>:

bool gsm_checkSleepElligible(void)
{
   18600:	b580      	push	{r7, lr}
   18602:	af00      	add	r7, sp, #0
	if (factory_settings_parameter_struct.ENABLE_M2M)
   18604:	4b21      	ldr	r3, [pc, #132]	; (1868c <gsm_checkSleepElligible+0x8c>)
   18606:	78db      	ldrb	r3, [r3, #3]
   18608:	2b00      	cmp	r3, #0
   1860a:	d021      	beq.n	18650 <gsm_checkSleepElligible+0x50>
	{
		return(!isGSMModuleAwake  && checkNotInCall() && !m2mEventStaged && !eventStaged);
   1860c:	4b20      	ldr	r3, [pc, #128]	; (18690 <gsm_checkSleepElligible+0x90>)
   1860e:	781b      	ldrb	r3, [r3, #0]
   18610:	b2db      	uxtb	r3, r3
   18612:	2201      	movs	r2, #1
   18614:	4053      	eors	r3, r2
   18616:	b2db      	uxtb	r3, r3
   18618:	2b00      	cmp	r3, #0
   1861a:	d013      	beq.n	18644 <gsm_checkSleepElligible+0x44>
   1861c:	4b1d      	ldr	r3, [pc, #116]	; (18694 <gsm_checkSleepElligible+0x94>)
   1861e:	4798      	blx	r3
   18620:	1e03      	subs	r3, r0, #0
   18622:	d00f      	beq.n	18644 <gsm_checkSleepElligible+0x44>
   18624:	4b1c      	ldr	r3, [pc, #112]	; (18698 <gsm_checkSleepElligible+0x98>)
   18626:	781b      	ldrb	r3, [r3, #0]
   18628:	2201      	movs	r2, #1
   1862a:	4053      	eors	r3, r2
   1862c:	b2db      	uxtb	r3, r3
   1862e:	2b00      	cmp	r3, #0
   18630:	d008      	beq.n	18644 <gsm_checkSleepElligible+0x44>
   18632:	4b1a      	ldr	r3, [pc, #104]	; (1869c <gsm_checkSleepElligible+0x9c>)
   18634:	781b      	ldrb	r3, [r3, #0]
   18636:	2201      	movs	r2, #1
   18638:	4053      	eors	r3, r2
   1863a:	b2db      	uxtb	r3, r3
   1863c:	2b00      	cmp	r3, #0
   1863e:	d001      	beq.n	18644 <gsm_checkSleepElligible+0x44>
   18640:	2301      	movs	r3, #1
   18642:	e000      	b.n	18646 <gsm_checkSleepElligible+0x46>
   18644:	2300      	movs	r3, #0
   18646:	1c1a      	adds	r2, r3, #0
   18648:	2301      	movs	r3, #1
   1864a:	4013      	ands	r3, r2
   1864c:	b2db      	uxtb	r3, r3
   1864e:	e019      	b.n	18684 <gsm_checkSleepElligible+0x84>
	}
	else
	{
		return(!isGSMModuleAwake  && checkNotInCall() && !eventStaged);
   18650:	4b0f      	ldr	r3, [pc, #60]	; (18690 <gsm_checkSleepElligible+0x90>)
   18652:	781b      	ldrb	r3, [r3, #0]
   18654:	b2db      	uxtb	r3, r3
   18656:	2201      	movs	r2, #1
   18658:	4053      	eors	r3, r2
   1865a:	b2db      	uxtb	r3, r3
   1865c:	2b00      	cmp	r3, #0
   1865e:	d00c      	beq.n	1867a <gsm_checkSleepElligible+0x7a>
   18660:	4b0c      	ldr	r3, [pc, #48]	; (18694 <gsm_checkSleepElligible+0x94>)
   18662:	4798      	blx	r3
   18664:	1e03      	subs	r3, r0, #0
   18666:	d008      	beq.n	1867a <gsm_checkSleepElligible+0x7a>
   18668:	4b0c      	ldr	r3, [pc, #48]	; (1869c <gsm_checkSleepElligible+0x9c>)
   1866a:	781b      	ldrb	r3, [r3, #0]
   1866c:	2201      	movs	r2, #1
   1866e:	4053      	eors	r3, r2
   18670:	b2db      	uxtb	r3, r3
   18672:	2b00      	cmp	r3, #0
   18674:	d001      	beq.n	1867a <gsm_checkSleepElligible+0x7a>
   18676:	2301      	movs	r3, #1
   18678:	e000      	b.n	1867c <gsm_checkSleepElligible+0x7c>
   1867a:	2300      	movs	r3, #0
   1867c:	1c1a      	adds	r2, r3, #0
   1867e:	2301      	movs	r3, #1
   18680:	4013      	ands	r3, r2
   18682:	b2db      	uxtb	r3, r3
	}
   18684:	0018      	movs	r0, r3
   18686:	46bd      	mov	sp, r7
   18688:	bd80      	pop	{r7, pc}
   1868a:	46c0      	nop			; (mov r8, r8)
   1868c:	2000082c 	.word	0x2000082c
   18690:	20000884 	.word	0x20000884
   18694:	00018599 	.word	0x00018599
   18698:	2000098e 	.word	0x2000098e
   1869c:	200009d3 	.word	0x200009d3

000186a0 <lcd_displaying_task>:
static QueueHandle_t xfour_Second_Queue;
static TimerHandle_t four_Second_timeout_timer=NULL;
static void four_second_timer_callback(TimerHandle_t timer);

static void lcd_displaying_task(void *params)
{
   186a0:	b590      	push	{r4, r7, lr}
   186a2:	b093      	sub	sp, #76	; 0x4c
   186a4:	af02      	add	r7, sp, #8
   186a6:	6078      	str	r0, [r7, #4]
	UNUSED(params);
	
	gsmStatusChange=true;
   186a8:	4be5      	ldr	r3, [pc, #916]	; (18a40 <lcd_displaying_task+0x3a0>)
   186aa:	2201      	movs	r2, #1
   186ac:	701a      	strb	r2, [r3, #0]
	lcd_in_sleep =false;
   186ae:	4be5      	ldr	r3, [pc, #916]	; (18a44 <lcd_displaying_task+0x3a4>)
   186b0:	2200      	movs	r2, #0
   186b2:	701a      	strb	r2, [r3, #0]
	setNetworkCharacter=true;
   186b4:	4be4      	ldr	r3, [pc, #912]	; (18a48 <lcd_displaying_task+0x3a8>)
   186b6:	2201      	movs	r2, #1
   186b8:	701a      	strb	r2, [r3, #0]
	LCD_PWR_CONFIG();
   186ba:	4be4      	ldr	r3, [pc, #912]	; (18a4c <lcd_displaying_task+0x3ac>)
   186bc:	4798      	blx	r3
	LCD_PWR_EN();
   186be:	4be4      	ldr	r3, [pc, #912]	; (18a50 <lcd_displaying_task+0x3b0>)
   186c0:	4798      	blx	r3
	vTaskDelay(500);
   186c2:	23fa      	movs	r3, #250	; 0xfa
   186c4:	005b      	lsls	r3, r3, #1
   186c6:	0018      	movs	r0, r3
   186c8:	4be2      	ldr	r3, [pc, #904]	; (18a54 <lcd_displaying_task+0x3b4>)
   186ca:	4798      	blx	r3
	
	LCD_init();
   186cc:	4be2      	ldr	r3, [pc, #904]	; (18a58 <lcd_displaying_task+0x3b8>)
   186ce:	4798      	blx	r3
	
	uint8_t screen=1;
   186d0:	233f      	movs	r3, #63	; 0x3f
   186d2:	18fb      	adds	r3, r7, r3
   186d4:	2201      	movs	r2, #1
   186d6:	701a      	strb	r2, [r3, #0]
	//bool four_sec_timer_is_active = true;
	//bool two_sec_timer_is_active = false;
	
	uint8_t time=0;
   186d8:	233c      	movs	r3, #60	; 0x3c
   186da:	18fb      	adds	r3, r7, r3
   186dc:	2200      	movs	r2, #0
   186de:	701a      	strb	r2, [r3, #0]
	
	
	
	
	LCD_clear();
   186e0:	4bde      	ldr	r3, [pc, #888]	; (18a5c <lcd_displaying_task+0x3bc>)
   186e2:	4798      	blx	r3
	LCD_setCursor(0,0);
   186e4:	2100      	movs	r1, #0
   186e6:	2000      	movs	r0, #0
   186e8:	4bdd      	ldr	r3, [pc, #884]	; (18a60 <lcd_displaying_task+0x3c0>)
   186ea:	4798      	blx	r3
	lcd_printf(" KRISHNA  SMART ");
   186ec:	4bdd      	ldr	r3, [pc, #884]	; (18a64 <lcd_displaying_task+0x3c4>)
   186ee:	0018      	movs	r0, r3
   186f0:	4bdd      	ldr	r3, [pc, #884]	; (18a68 <lcd_displaying_task+0x3c8>)
   186f2:	4798      	blx	r3
	LCD_setCursor(0,1);
   186f4:	2101      	movs	r1, #1
   186f6:	2000      	movs	r0, #0
   186f8:	4bd9      	ldr	r3, [pc, #868]	; (18a60 <lcd_displaying_task+0x3c0>)
   186fa:	4798      	blx	r3
	lcd_printf("   TECHNOLOGY   ");
   186fc:	4bdb      	ldr	r3, [pc, #876]	; (18a6c <lcd_displaying_task+0x3cc>)
   186fe:	0018      	movs	r0, r3
   18700:	4bd9      	ldr	r3, [pc, #868]	; (18a68 <lcd_displaying_task+0x3c8>)
   18702:	4798      	blx	r3
	vTaskDelay(3000);
   18704:	4bda      	ldr	r3, [pc, #872]	; (18a70 <lcd_displaying_task+0x3d0>)
   18706:	0018      	movs	r0, r3
   18708:	4bd2      	ldr	r3, [pc, #840]	; (18a54 <lcd_displaying_task+0x3b4>)
   1870a:	4798      	blx	r3
	
	LCD_clear();
   1870c:	4bd3      	ldr	r3, [pc, #844]	; (18a5c <lcd_displaying_task+0x3bc>)
   1870e:	4798      	blx	r3
	LCD_setCursor(0,0);
   18710:	2100      	movs	r1, #0
   18712:	2000      	movs	r0, #0
   18714:	4bd2      	ldr	r3, [pc, #840]	; (18a60 <lcd_displaying_task+0x3c0>)
   18716:	4798      	blx	r3
	lcd_printf("  SOFTWARE VER  ");
   18718:	4bd6      	ldr	r3, [pc, #856]	; (18a74 <lcd_displaying_task+0x3d4>)
   1871a:	0018      	movs	r0, r3
   1871c:	4bd2      	ldr	r3, [pc, #840]	; (18a68 <lcd_displaying_task+0x3c8>)
   1871e:	4798      	blx	r3
	LCD_setCursor(0,1);
   18720:	2101      	movs	r1, #1
   18722:	2000      	movs	r0, #0
   18724:	4bce      	ldr	r3, [pc, #824]	; (18a60 <lcd_displaying_task+0x3c0>)
   18726:	4798      	blx	r3
	lcd_printf("%s",VERSION_NO);
   18728:	4ad3      	ldr	r2, [pc, #844]	; (18a78 <lcd_displaying_task+0x3d8>)
   1872a:	4bd4      	ldr	r3, [pc, #848]	; (18a7c <lcd_displaying_task+0x3dc>)
   1872c:	0011      	movs	r1, r2
   1872e:	0018      	movs	r0, r3
   18730:	4bcd      	ldr	r3, [pc, #820]	; (18a68 <lcd_displaying_task+0x3c8>)
   18732:	4798      	blx	r3
	vTaskDelay(2000);
   18734:	23fa      	movs	r3, #250	; 0xfa
   18736:	00db      	lsls	r3, r3, #3
   18738:	0018      	movs	r0, r3
   1873a:	4bc6      	ldr	r3, [pc, #792]	; (18a54 <lcd_displaying_task+0x3b4>)
   1873c:	4798      	blx	r3
	
	four_Second_timeout_timer = xTimerCreate(NULL,(1 * 4000 / portTICK_PERIOD_MS), pdTRUE, NULL, four_second_timer_callback);
   1873e:	23fa      	movs	r3, #250	; 0xfa
   18740:	0119      	lsls	r1, r3, #4
   18742:	4bcf      	ldr	r3, [pc, #828]	; (18a80 <lcd_displaying_task+0x3e0>)
   18744:	9300      	str	r3, [sp, #0]
   18746:	2300      	movs	r3, #0
   18748:	2201      	movs	r2, #1
   1874a:	2000      	movs	r0, #0
   1874c:	4ccd      	ldr	r4, [pc, #820]	; (18a84 <lcd_displaying_task+0x3e4>)
   1874e:	47a0      	blx	r4
   18750:	0002      	movs	r2, r0
   18752:	4bcd      	ldr	r3, [pc, #820]	; (18a88 <lcd_displaying_task+0x3e8>)
   18754:	601a      	str	r2, [r3, #0]
	xTimerStart( four_Second_timeout_timer, 0 );
   18756:	4bcc      	ldr	r3, [pc, #816]	; (18a88 <lcd_displaying_task+0x3e8>)
   18758:	681c      	ldr	r4, [r3, #0]
   1875a:	4bcc      	ldr	r3, [pc, #816]	; (18a8c <lcd_displaying_task+0x3ec>)
   1875c:	4798      	blx	r3
   1875e:	0002      	movs	r2, r0
   18760:	2300      	movs	r3, #0
   18762:	9300      	str	r3, [sp, #0]
   18764:	2300      	movs	r3, #0
   18766:	2101      	movs	r1, #1
   18768:	0020      	movs	r0, r4
   1876a:	4cc9      	ldr	r4, [pc, #804]	; (18a90 <lcd_displaying_task+0x3f0>)
   1876c:	47a0      	blx	r4
	
	
	for (;;)
	{
		if (lcd_in_sleep)
   1876e:	4bb5      	ldr	r3, [pc, #724]	; (18a44 <lcd_displaying_task+0x3a4>)
   18770:	781b      	ldrb	r3, [r3, #0]
   18772:	b2db      	uxtb	r3, r3
   18774:	2b00      	cmp	r3, #0
   18776:	d009      	beq.n	1878c <lcd_displaying_task+0xec>
		{
			lcd_in_sleep = false;
   18778:	4bb2      	ldr	r3, [pc, #712]	; (18a44 <lcd_displaying_task+0x3a4>)
   1877a:	2200      	movs	r2, #0
   1877c:	701a      	strb	r2, [r3, #0]
			LCD_PWR_EN();
   1877e:	4bb4      	ldr	r3, [pc, #720]	; (18a50 <lcd_displaying_task+0x3b0>)
   18780:	4798      	blx	r3
			vTaskDelay(100);
   18782:	2064      	movs	r0, #100	; 0x64
   18784:	4bb3      	ldr	r3, [pc, #716]	; (18a54 <lcd_displaying_task+0x3b4>)
   18786:	4798      	blx	r3
			LCD_init();
   18788:	4bb3      	ldr	r3, [pc, #716]	; (18a58 <lcd_displaying_task+0x3b8>)
   1878a:	4798      	blx	r3
		}
		
		if(setNetworkCharacter)
   1878c:	4bae      	ldr	r3, [pc, #696]	; (18a48 <lcd_displaying_task+0x3a8>)
   1878e:	781b      	ldrb	r3, [r3, #0]
   18790:	b2db      	uxtb	r3, r3
   18792:	2b00      	cmp	r3, #0
   18794:	d047      	beq.n	18826 <lcd_displaying_task+0x186>
		{
			setNetworkCharacter=false;
   18796:	4bac      	ldr	r3, [pc, #688]	; (18a48 <lcd_displaying_task+0x3a8>)
   18798:	2200      	movs	r2, #0
   1879a:	701a      	strb	r2, [r3, #0]
			byte Network_0[8]={
   1879c:	2334      	movs	r3, #52	; 0x34
   1879e:	18fb      	adds	r3, r7, r3
   187a0:	0018      	movs	r0, r3
   187a2:	2308      	movs	r3, #8
   187a4:	001a      	movs	r2, r3
   187a6:	2100      	movs	r1, #0
   187a8:	4bba      	ldr	r3, [pc, #744]	; (18a94 <lcd_displaying_task+0x3f4>)
   187aa:	4798      	blx	r3
				0B00000,
				0B00000,
				0B00000
			};
			
			byte Network_1[8]={
   187ac:	232c      	movs	r3, #44	; 0x2c
   187ae:	18fb      	adds	r3, r7, r3
   187b0:	4ab9      	ldr	r2, [pc, #740]	; (18a98 <lcd_displaying_task+0x3f8>)
   187b2:	ca03      	ldmia	r2!, {r0, r1}
   187b4:	c303      	stmia	r3!, {r0, r1}
				0B00000,
				0B00000,
				0B11111,
				0B11111
			};
			byte Network_2[8]={
   187b6:	2324      	movs	r3, #36	; 0x24
   187b8:	18fb      	adds	r3, r7, r3
   187ba:	4ab8      	ldr	r2, [pc, #736]	; (18a9c <lcd_displaying_task+0x3fc>)
   187bc:	ca03      	ldmia	r2!, {r0, r1}
   187be:	c303      	stmia	r3!, {r0, r1}
				0B00000,
				0B11111,
				0B11111,
				0B11111
			};
			byte Network_3[8]={
   187c0:	231c      	movs	r3, #28
   187c2:	18fb      	adds	r3, r7, r3
   187c4:	4ab6      	ldr	r2, [pc, #728]	; (18aa0 <lcd_displaying_task+0x400>)
   187c6:	ca03      	ldmia	r2!, {r0, r1}
   187c8:	c303      	stmia	r3!, {r0, r1}
				0B11111,
				0B11111,
				0B11111,
				0B11111
			};
			byte Network_4[8]={
   187ca:	2314      	movs	r3, #20
   187cc:	18fb      	adds	r3, r7, r3
   187ce:	4ab5      	ldr	r2, [pc, #724]	; (18aa4 <lcd_displaying_task+0x404>)
   187d0:	ca03      	ldmia	r2!, {r0, r1}
   187d2:	c303      	stmia	r3!, {r0, r1}
				0B11111,
				0B11111,
				0B11111
			};

			byte Network_5[8]={
   187d4:	230c      	movs	r3, #12
   187d6:	18fb      	adds	r3, r7, r3
   187d8:	4ab3      	ldr	r2, [pc, #716]	; (18aa8 <lcd_displaying_task+0x408>)
   187da:	ca03      	ldmia	r2!, {r0, r1}
   187dc:	c303      	stmia	r3!, {r0, r1}
				0B11111,
				0B11111,
				0B11111
			};
			
			LCD_Create_Custom_createChar(0,Network_0);
   187de:	2334      	movs	r3, #52	; 0x34
   187e0:	18fb      	adds	r3, r7, r3
   187e2:	0019      	movs	r1, r3
   187e4:	2000      	movs	r0, #0
   187e6:	4bb1      	ldr	r3, [pc, #708]	; (18aac <lcd_displaying_task+0x40c>)
   187e8:	4798      	blx	r3
			LCD_Create_Custom_createChar(1,Network_1);
   187ea:	232c      	movs	r3, #44	; 0x2c
   187ec:	18fb      	adds	r3, r7, r3
   187ee:	0019      	movs	r1, r3
   187f0:	2001      	movs	r0, #1
   187f2:	4bae      	ldr	r3, [pc, #696]	; (18aac <lcd_displaying_task+0x40c>)
   187f4:	4798      	blx	r3
			LCD_Create_Custom_createChar(2,Network_2);
   187f6:	2324      	movs	r3, #36	; 0x24
   187f8:	18fb      	adds	r3, r7, r3
   187fa:	0019      	movs	r1, r3
   187fc:	2002      	movs	r0, #2
   187fe:	4bab      	ldr	r3, [pc, #684]	; (18aac <lcd_displaying_task+0x40c>)
   18800:	4798      	blx	r3
			LCD_Create_Custom_createChar(3,Network_3);
   18802:	231c      	movs	r3, #28
   18804:	18fb      	adds	r3, r7, r3
   18806:	0019      	movs	r1, r3
   18808:	2003      	movs	r0, #3
   1880a:	4ba8      	ldr	r3, [pc, #672]	; (18aac <lcd_displaying_task+0x40c>)
   1880c:	4798      	blx	r3
			LCD_Create_Custom_createChar(4,Network_4);
   1880e:	2314      	movs	r3, #20
   18810:	18fb      	adds	r3, r7, r3
   18812:	0019      	movs	r1, r3
   18814:	2004      	movs	r0, #4
   18816:	4ba5      	ldr	r3, [pc, #660]	; (18aac <lcd_displaying_task+0x40c>)
   18818:	4798      	blx	r3
			LCD_Create_Custom_createChar(5,Network_5);
   1881a:	230c      	movs	r3, #12
   1881c:	18fb      	adds	r3, r7, r3
   1881e:	0019      	movs	r1, r3
   18820:	2005      	movs	r0, #5
   18822:	4ba2      	ldr	r3, [pc, #648]	; (18aac <lcd_displaying_task+0x40c>)
   18824:	4798      	blx	r3
		}
		
		
		if(firstEvent)
   18826:	4ba2      	ldr	r3, [pc, #648]	; (18ab0 <lcd_displaying_task+0x410>)
   18828:	781b      	ldrb	r3, [r3, #0]
   1882a:	b2db      	uxtb	r3, r3
   1882c:	2b00      	cmp	r3, #0
   1882e:	d014      	beq.n	1885a <lcd_displaying_task+0x1ba>
		{
			LCD_setCursor(0,0);
   18830:	2100      	movs	r1, #0
   18832:	2000      	movs	r0, #0
   18834:	4b8a      	ldr	r3, [pc, #552]	; (18a60 <lcd_displaying_task+0x3c0>)
   18836:	4798      	blx	r3
			lcd_printf("Initializing... ");
   18838:	4b9e      	ldr	r3, [pc, #632]	; (18ab4 <lcd_displaying_task+0x414>)
   1883a:	0018      	movs	r0, r3
   1883c:	4b8a      	ldr	r3, [pc, #552]	; (18a68 <lcd_displaying_task+0x3c8>)
   1883e:	4798      	blx	r3
			LCD_setCursor(0,1);
   18840:	2101      	movs	r1, #1
   18842:	2000      	movs	r0, #0
   18844:	4b86      	ldr	r3, [pc, #536]	; (18a60 <lcd_displaying_task+0x3c0>)
   18846:	4798      	blx	r3
			lcd_printf("COMMANDER v2    ");
   18848:	4b9b      	ldr	r3, [pc, #620]	; (18ab8 <lcd_displaying_task+0x418>)
   1884a:	0018      	movs	r0, r3
   1884c:	4b86      	ldr	r3, [pc, #536]	; (18a68 <lcd_displaying_task+0x3c8>)
   1884e:	4798      	blx	r3
			screen=1;
   18850:	233f      	movs	r3, #63	; 0x3f
   18852:	18fb      	adds	r3, r7, r3
   18854:	2201      	movs	r2, #1
   18856:	701a      	strb	r2, [r3, #0]
   18858:	e283      	b.n	18d62 <lcd_displaying_task+0x6c2>
		}
		else
		{
			if(gsmStatusChange)
   1885a:	4b79      	ldr	r3, [pc, #484]	; (18a40 <lcd_displaying_task+0x3a0>)
   1885c:	781b      	ldrb	r3, [r3, #0]
   1885e:	b2db      	uxtb	r3, r3
   18860:	2b00      	cmp	r3, #0
   18862:	d025      	beq.n	188b0 <lcd_displaying_task+0x210>
			{
				LCD_setCursor(0,0);
   18864:	2100      	movs	r1, #0
   18866:	2000      	movs	r0, #0
   18868:	4b7d      	ldr	r3, [pc, #500]	; (18a60 <lcd_displaying_task+0x3c0>)
   1886a:	4798      	blx	r3
				lcd_printf("PHONE STATUS    ");
   1886c:	4b93      	ldr	r3, [pc, #588]	; (18abc <lcd_displaying_task+0x41c>)
   1886e:	0018      	movs	r0, r3
   18870:	4b7d      	ldr	r3, [pc, #500]	; (18a68 <lcd_displaying_task+0x3c8>)
   18872:	4798      	blx	r3
				if(boolGsm_config_flag)
   18874:	4b92      	ldr	r3, [pc, #584]	; (18ac0 <lcd_displaying_task+0x420>)
   18876:	781b      	ldrb	r3, [r3, #0]
   18878:	b2db      	uxtb	r3, r3
   1887a:	2b00      	cmp	r3, #0
   1887c:	d008      	beq.n	18890 <lcd_displaying_task+0x1f0>
				{
					LCD_setCursor(0,1);
   1887e:	2101      	movs	r1, #1
   18880:	2000      	movs	r0, #0
   18882:	4b77      	ldr	r3, [pc, #476]	; (18a60 <lcd_displaying_task+0x3c0>)
   18884:	4798      	blx	r3
					lcd_printf("ON              ");
   18886:	4b8f      	ldr	r3, [pc, #572]	; (18ac4 <lcd_displaying_task+0x424>)
   18888:	0018      	movs	r0, r3
   1888a:	4b77      	ldr	r3, [pc, #476]	; (18a68 <lcd_displaying_task+0x3c8>)
   1888c:	4798      	blx	r3
   1888e:	e007      	b.n	188a0 <lcd_displaying_task+0x200>
				}	
				else
				{
					LCD_setCursor(0,1);
   18890:	2101      	movs	r1, #1
   18892:	2000      	movs	r0, #0
   18894:	4b72      	ldr	r3, [pc, #456]	; (18a60 <lcd_displaying_task+0x3c0>)
   18896:	4798      	blx	r3
					lcd_printf("OFF             ");
   18898:	4b8b      	ldr	r3, [pc, #556]	; (18ac8 <lcd_displaying_task+0x428>)
   1889a:	0018      	movs	r0, r3
   1889c:	4b72      	ldr	r3, [pc, #456]	; (18a68 <lcd_displaying_task+0x3c8>)
   1889e:	4798      	blx	r3
				}
				gsmStatusChange = false;
   188a0:	4b67      	ldr	r3, [pc, #412]	; (18a40 <lcd_displaying_task+0x3a0>)
   188a2:	2200      	movs	r2, #0
   188a4:	701a      	strb	r2, [r3, #0]
				vTaskDelay(2000/portTICK_PERIOD_MS);
   188a6:	23fa      	movs	r3, #250	; 0xfa
   188a8:	00db      	lsls	r3, r3, #3
   188aa:	0018      	movs	r0, r3
   188ac:	4b69      	ldr	r3, [pc, #420]	; (18a54 <lcd_displaying_task+0x3b4>)
   188ae:	4798      	blx	r3
			}
			
			switch(screen)
   188b0:	233f      	movs	r3, #63	; 0x3f
   188b2:	18fb      	adds	r3, r7, r3
   188b4:	781b      	ldrb	r3, [r3, #0]
   188b6:	2b09      	cmp	r3, #9
   188b8:	d900      	bls.n	188bc <lcd_displaying_task+0x21c>
   188ba:	e252      	b.n	18d62 <lcd_displaying_task+0x6c2>
   188bc:	009a      	lsls	r2, r3, #2
   188be:	4b83      	ldr	r3, [pc, #524]	; (18acc <lcd_displaying_task+0x42c>)
   188c0:	18d3      	adds	r3, r2, r3
   188c2:	681b      	ldr	r3, [r3, #0]
   188c4:	469f      	mov	pc, r3
			{
				case  1:
				{
					LCD_setCursor(0,0);
   188c6:	2100      	movs	r1, #0
   188c8:	2000      	movs	r0, #0
   188ca:	4b65      	ldr	r3, [pc, #404]	; (18a60 <lcd_displaying_task+0x3c0>)
   188cc:	4798      	blx	r3
					lcd_printf("VRY   VYB   VBR ");
   188ce:	4b80      	ldr	r3, [pc, #512]	; (18ad0 <lcd_displaying_task+0x430>)
   188d0:	0018      	movs	r0, r3
   188d2:	4b65      	ldr	r3, [pc, #404]	; (18a68 <lcd_displaying_task+0x3c8>)
   188d4:	4798      	blx	r3
					LCD_setCursor(0,1);
   188d6:	2101      	movs	r1, #1
   188d8:	2000      	movs	r0, #0
   188da:	4b61      	ldr	r3, [pc, #388]	; (18a60 <lcd_displaying_task+0x3c0>)
   188dc:	4798      	blx	r3
					lcd_printf("%03lu   ",(Analog_Parameter_Struct.PhaseRY_Voltage));
   188de:	4b7d      	ldr	r3, [pc, #500]	; (18ad4 <lcd_displaying_task+0x434>)
   188e0:	681a      	ldr	r2, [r3, #0]
   188e2:	4b7d      	ldr	r3, [pc, #500]	; (18ad8 <lcd_displaying_task+0x438>)
   188e4:	0011      	movs	r1, r2
   188e6:	0018      	movs	r0, r3
   188e8:	4b5f      	ldr	r3, [pc, #380]	; (18a68 <lcd_displaying_task+0x3c8>)
   188ea:	4798      	blx	r3
					lcd_printf("%03lu   ",(Analog_Parameter_Struct.PhaseYB_Voltage));
   188ec:	4b79      	ldr	r3, [pc, #484]	; (18ad4 <lcd_displaying_task+0x434>)
   188ee:	685a      	ldr	r2, [r3, #4]
   188f0:	4b79      	ldr	r3, [pc, #484]	; (18ad8 <lcd_displaying_task+0x438>)
   188f2:	0011      	movs	r1, r2
   188f4:	0018      	movs	r0, r3
   188f6:	4b5c      	ldr	r3, [pc, #368]	; (18a68 <lcd_displaying_task+0x3c8>)
   188f8:	4798      	blx	r3
					lcd_printf("%03lu ",(Analog_Parameter_Struct.PhaseBR_Voltage));
   188fa:	4b76      	ldr	r3, [pc, #472]	; (18ad4 <lcd_displaying_task+0x434>)
   188fc:	689a      	ldr	r2, [r3, #8]
   188fe:	4b77      	ldr	r3, [pc, #476]	; (18adc <lcd_displaying_task+0x43c>)
   18900:	0011      	movs	r1, r2
   18902:	0018      	movs	r0, r3
   18904:	4b58      	ldr	r3, [pc, #352]	; (18a68 <lcd_displaying_task+0x3c8>)
   18906:	4798      	blx	r3
					break;
   18908:	e22b      	b.n	18d62 <lcd_displaying_task+0x6c2>
				}
				case  2:
				{
					LCD_setCursor(0,0);
   1890a:	2100      	movs	r1, #0
   1890c:	2000      	movs	r0, #0
   1890e:	4b54      	ldr	r3, [pc, #336]	; (18a60 <lcd_displaying_task+0x3c0>)
   18910:	4798      	blx	r3
					if(!getMotorState())
   18912:	4b73      	ldr	r3, [pc, #460]	; (18ae0 <lcd_displaying_task+0x440>)
   18914:	4798      	blx	r3
   18916:	0003      	movs	r3, r0
   18918:	001a      	movs	r2, r3
   1891a:	2301      	movs	r3, #1
   1891c:	4053      	eors	r3, r2
   1891e:	b2db      	uxtb	r3, r3
   18920:	2b00      	cmp	r3, #0
   18922:	d004      	beq.n	1892e <lcd_displaying_task+0x28e>
					{
						lcd_printf("MOTOR :  OFF    ");
   18924:	4b6f      	ldr	r3, [pc, #444]	; (18ae4 <lcd_displaying_task+0x444>)
   18926:	0018      	movs	r0, r3
   18928:	4b4f      	ldr	r3, [pc, #316]	; (18a68 <lcd_displaying_task+0x3c8>)
   1892a:	4798      	blx	r3
   1892c:	e003      	b.n	18936 <lcd_displaying_task+0x296>
					}
					else
					{
						lcd_printf("MOTOR :  ON     ");
   1892e:	4b6e      	ldr	r3, [pc, #440]	; (18ae8 <lcd_displaying_task+0x448>)
   18930:	0018      	movs	r0, r3
   18932:	4b4d      	ldr	r3, [pc, #308]	; (18a68 <lcd_displaying_task+0x3c8>)
   18934:	4798      	blx	r3
					}
					
					LCD_setCursor(0,1);
   18936:	2101      	movs	r1, #1
   18938:	2000      	movs	r0, #0
   1893a:	4b49      	ldr	r3, [pc, #292]	; (18a60 <lcd_displaying_task+0x3c0>)
   1893c:	4798      	blx	r3
					lcd_printf("                ");
   1893e:	4b6b      	ldr	r3, [pc, #428]	; (18aec <lcd_displaying_task+0x44c>)
   18940:	0018      	movs	r0, r3
   18942:	4b49      	ldr	r3, [pc, #292]	; (18a68 <lcd_displaying_task+0x3c8>)
   18944:	4798      	blx	r3
					if(user_settings_parameter_struct.autoStartAddress)
   18946:	4b6a      	ldr	r3, [pc, #424]	; (18af0 <lcd_displaying_task+0x450>)
   18948:	785b      	ldrb	r3, [r3, #1]
   1894a:	b2db      	uxtb	r3, r3
   1894c:	2b00      	cmp	r3, #0
   1894e:	d004      	beq.n	1895a <lcd_displaying_task+0x2ba>
					{
						lcd_printf("AUTO  :  ON     ");
   18950:	4b68      	ldr	r3, [pc, #416]	; (18af4 <lcd_displaying_task+0x454>)
   18952:	0018      	movs	r0, r3
   18954:	4b44      	ldr	r3, [pc, #272]	; (18a68 <lcd_displaying_task+0x3c8>)
   18956:	4798      	blx	r3
					//LCD_setCursor(0,0);
					//lcd_printf("MOTOR WATTAGE:  ");
					//LCD_setCursor(0,1);
					//lcd_printf("%03lu.%02lu kW         ",(Analog_Parameter_Struct.Motor_Power_IntPart),(Analog_Parameter_Struct.Motor_Power_DecPart));
					//}
					break;
   18958:	e203      	b.n	18d62 <lcd_displaying_task+0x6c2>
						lcd_printf("AUTO  :  OFF    ");
   1895a:	4b67      	ldr	r3, [pc, #412]	; (18af8 <lcd_displaying_task+0x458>)
   1895c:	0018      	movs	r0, r3
   1895e:	4b42      	ldr	r3, [pc, #264]	; (18a68 <lcd_displaying_task+0x3c8>)
   18960:	4798      	blx	r3
					break;
   18962:	e1fe      	b.n	18d62 <lcd_displaying_task+0x6c2>
				}
				case  3:
				{
					LCD_setCursor(0,0);
   18964:	2100      	movs	r1, #0
   18966:	2000      	movs	r0, #0
   18968:	4b3d      	ldr	r3, [pc, #244]	; (18a60 <lcd_displaying_task+0x3c0>)
   1896a:	4798      	blx	r3
					lcd_printf("MOTOR CURRENT:  ");
   1896c:	4b63      	ldr	r3, [pc, #396]	; (18afc <lcd_displaying_task+0x45c>)
   1896e:	0018      	movs	r0, r3
   18970:	4b3d      	ldr	r3, [pc, #244]	; (18a68 <lcd_displaying_task+0x3c8>)
   18972:	4798      	blx	r3
					LCD_setCursor(0,1);
   18974:	2101      	movs	r1, #1
   18976:	2000      	movs	r0, #0
   18978:	4b39      	ldr	r3, [pc, #228]	; (18a60 <lcd_displaying_task+0x3c0>)
   1897a:	4798      	blx	r3
					lcd_printf("%03lu.%02lu            ",(Analog_Parameter_Struct.Motor_Current_IntPart),(Analog_Parameter_Struct.Motor_Current_DecPart));
   1897c:	4b55      	ldr	r3, [pc, #340]	; (18ad4 <lcd_displaying_task+0x434>)
   1897e:	8a9b      	ldrh	r3, [r3, #20]
   18980:	b29b      	uxth	r3, r3
   18982:	0019      	movs	r1, r3
   18984:	4b53      	ldr	r3, [pc, #332]	; (18ad4 <lcd_displaying_task+0x434>)
   18986:	8adb      	ldrh	r3, [r3, #22]
   18988:	b29b      	uxth	r3, r3
   1898a:	001a      	movs	r2, r3
   1898c:	4b5c      	ldr	r3, [pc, #368]	; (18b00 <lcd_displaying_task+0x460>)
   1898e:	0018      	movs	r0, r3
   18990:	4b35      	ldr	r3, [pc, #212]	; (18a68 <lcd_displaying_task+0x3c8>)
   18992:	4798      	blx	r3
					break;
   18994:	e1e5      	b.n	18d62 <lcd_displaying_task+0x6c2>
				}
				case 4:
				{
					LCD_setCursor(0,0);
   18996:	2100      	movs	r1, #0
   18998:	2000      	movs	r0, #0
   1899a:	4b31      	ldr	r3, [pc, #196]	; (18a60 <lcd_displaying_task+0x3c0>)
   1899c:	4798      	blx	r3
					lcd_printf("3 PHASE SEQ:");
   1899e:	4b59      	ldr	r3, [pc, #356]	; (18b04 <lcd_displaying_task+0x464>)
   189a0:	0018      	movs	r0, r3
   189a2:	4b31      	ldr	r3, [pc, #196]	; (18a68 <lcd_displaying_task+0x3c8>)
   189a4:	4798      	blx	r3
					if (structThreePhase_state.u8t_phase_sequence_flag == THREEPHASE_OK)
   189a6:	4b58      	ldr	r3, [pc, #352]	; (18b08 <lcd_displaying_task+0x468>)
   189a8:	781b      	ldrb	r3, [r3, #0]
   189aa:	b2db      	uxtb	r3, r3
   189ac:	2b02      	cmp	r3, #2
   189ae:	d104      	bne.n	189ba <lcd_displaying_task+0x31a>
					{
						lcd_printf(" OK ");
   189b0:	4b56      	ldr	r3, [pc, #344]	; (18b0c <lcd_displaying_task+0x46c>)
   189b2:	0018      	movs	r0, r3
   189b4:	4b2c      	ldr	r3, [pc, #176]	; (18a68 <lcd_displaying_task+0x3c8>)
   189b6:	4798      	blx	r3
   189b8:	e003      	b.n	189c2 <lcd_displaying_task+0x322>
					}
					else
					{
						lcd_printf(" ERR");
   189ba:	4b55      	ldr	r3, [pc, #340]	; (18b10 <lcd_displaying_task+0x470>)
   189bc:	0018      	movs	r0, r3
   189be:	4b2a      	ldr	r3, [pc, #168]	; (18a68 <lcd_displaying_task+0x3c8>)
   189c0:	4798      	blx	r3
					}
					LCD_setCursor(0,1);
   189c2:	2101      	movs	r1, #1
   189c4:	2000      	movs	r0, #0
   189c6:	4b26      	ldr	r3, [pc, #152]	; (18a60 <lcd_displaying_task+0x3c0>)
   189c8:	4798      	blx	r3
					lcd_printf("PHASE STATE:");
   189ca:	4b52      	ldr	r3, [pc, #328]	; (18b14 <lcd_displaying_task+0x474>)
   189cc:	0018      	movs	r0, r3
   189ce:	4b26      	ldr	r3, [pc, #152]	; (18a68 <lcd_displaying_task+0x3c8>)
   189d0:	4798      	blx	r3
					if (structThreePhase_state.u8t_phase_ac_state == AC_3PH)
   189d2:	4b4d      	ldr	r3, [pc, #308]	; (18b08 <lcd_displaying_task+0x468>)
   189d4:	785b      	ldrb	r3, [r3, #1]
   189d6:	b2db      	uxtb	r3, r3
   189d8:	2b03      	cmp	r3, #3
   189da:	d104      	bne.n	189e6 <lcd_displaying_task+0x346>
					{
						lcd_printf(" 3PH ");
   189dc:	4b4e      	ldr	r3, [pc, #312]	; (18b18 <lcd_displaying_task+0x478>)
   189de:	0018      	movs	r0, r3
   189e0:	4b21      	ldr	r3, [pc, #132]	; (18a68 <lcd_displaying_task+0x3c8>)
   189e2:	4798      	blx	r3
					}
					else
					{
						lcd_printf(" OFF");
					}
					break;
   189e4:	e1bd      	b.n	18d62 <lcd_displaying_task+0x6c2>
					else if(structThreePhase_state.u8t_phase_ac_state == AC_2PH)
   189e6:	4b48      	ldr	r3, [pc, #288]	; (18b08 <lcd_displaying_task+0x468>)
   189e8:	785b      	ldrb	r3, [r3, #1]
   189ea:	b2db      	uxtb	r3, r3
   189ec:	2b02      	cmp	r3, #2
   189ee:	d104      	bne.n	189fa <lcd_displaying_task+0x35a>
						lcd_printf(" 2PH ");
   189f0:	4b4a      	ldr	r3, [pc, #296]	; (18b1c <lcd_displaying_task+0x47c>)
   189f2:	0018      	movs	r0, r3
   189f4:	4b1c      	ldr	r3, [pc, #112]	; (18a68 <lcd_displaying_task+0x3c8>)
   189f6:	4798      	blx	r3
					break;
   189f8:	e1b3      	b.n	18d62 <lcd_displaying_task+0x6c2>
						lcd_printf(" OFF");
   189fa:	4b49      	ldr	r3, [pc, #292]	; (18b20 <lcd_displaying_task+0x480>)
   189fc:	0018      	movs	r0, r3
   189fe:	4b1a      	ldr	r3, [pc, #104]	; (18a68 <lcd_displaying_task+0x3c8>)
   18a00:	4798      	blx	r3
					break;
   18a02:	e1ae      	b.n	18d62 <lcd_displaying_task+0x6c2>
				}
				case 5:
				{
					LCD_setCursor(0,0);
   18a04:	2100      	movs	r1, #0
   18a06:	2000      	movs	r0, #0
   18a08:	4b15      	ldr	r3, [pc, #84]	; (18a60 <lcd_displaying_task+0x3c0>)
   18a0a:	4798      	blx	r3
					lcd_printf("O-LEVEL : ");
   18a0c:	4b45      	ldr	r3, [pc, #276]	; (18b24 <lcd_displaying_task+0x484>)
   18a0e:	0018      	movs	r0, r3
   18a10:	4b15      	ldr	r3, [pc, #84]	; (18a68 <lcd_displaying_task+0x3c8>)
   18a12:	4798      	blx	r3
					if (overheadLevel == OVERHEADHIGHLEVEL)
   18a14:	4b44      	ldr	r3, [pc, #272]	; (18b28 <lcd_displaying_task+0x488>)
   18a16:	781b      	ldrb	r3, [r3, #0]
   18a18:	b2db      	uxtb	r3, r3
   18a1a:	2b02      	cmp	r3, #2
   18a1c:	d104      	bne.n	18a28 <lcd_displaying_task+0x388>
					{
						lcd_printf("HIGH  ");
   18a1e:	4b43      	ldr	r3, [pc, #268]	; (18b2c <lcd_displaying_task+0x48c>)
   18a20:	0018      	movs	r0, r3
   18a22:	4b11      	ldr	r3, [pc, #68]	; (18a68 <lcd_displaying_task+0x3c8>)
   18a24:	4798      	blx	r3
   18a26:	e08e      	b.n	18b46 <lcd_displaying_task+0x4a6>
					}
					else if (overheadLevel == OVERHEADMIDLEVEL)
   18a28:	4b3f      	ldr	r3, [pc, #252]	; (18b28 <lcd_displaying_task+0x488>)
   18a2a:	781b      	ldrb	r3, [r3, #0]
   18a2c:	b2db      	uxtb	r3, r3
   18a2e:	2b01      	cmp	r3, #1
   18a30:	d000      	beq.n	18a34 <lcd_displaying_task+0x394>
   18a32:	e07f      	b.n	18b34 <lcd_displaying_task+0x494>
					{
						lcd_printf("MID   ");
   18a34:	4b3e      	ldr	r3, [pc, #248]	; (18b30 <lcd_displaying_task+0x490>)
   18a36:	0018      	movs	r0, r3
   18a38:	4b0b      	ldr	r3, [pc, #44]	; (18a68 <lcd_displaying_task+0x3c8>)
   18a3a:	4798      	blx	r3
   18a3c:	e083      	b.n	18b46 <lcd_displaying_task+0x4a6>
   18a3e:	46c0      	nop			; (mov r8, r8)
   18a40:	200008de 	.word	0x200008de
   18a44:	20000a64 	.word	0x20000a64
   18a48:	20000a65 	.word	0x20000a65
   18a4c:	00013c95 	.word	0x00013c95
   18a50:	00013cc9 	.word	0x00013cc9
   18a54:	0001fe69 	.word	0x0001fe69
   18a58:	000139d1 	.word	0x000139d1
   18a5c:	00013f61 	.word	0x00013f61
   18a60:	00014031 	.word	0x00014031
   18a64:	0002a478 	.word	0x0002a478
   18a68:	0001412d 	.word	0x0001412d
   18a6c:	0002a48c 	.word	0x0002a48c
   18a70:	00000bb8 	.word	0x00000bb8
   18a74:	0002a4a0 	.word	0x0002a4a0
   18a78:	0002a4b4 	.word	0x0002a4b4
   18a7c:	0002a4c8 	.word	0x0002a4c8
   18a80:	00018f4d 	.word	0x00018f4d
   18a84:	00020d89 	.word	0x00020d89
   18a88:	2000042c 	.word	0x2000042c
   18a8c:	000201cd 	.word	0x000201cd
   18a90:	00020e2d 	.word	0x00020e2d
   18a94:	00028b57 	.word	0x00028b57
   18a98:	0002a724 	.word	0x0002a724
   18a9c:	0002a72c 	.word	0x0002a72c
   18aa0:	0002a734 	.word	0x0002a734
   18aa4:	0002a73c 	.word	0x0002a73c
   18aa8:	0002a744 	.word	0x0002a744
   18aac:	00013fd1 	.word	0x00013fd1
   18ab0:	20000976 	.word	0x20000976
   18ab4:	0002a4cc 	.word	0x0002a4cc
   18ab8:	0002a4e0 	.word	0x0002a4e0
   18abc:	0002a4f4 	.word	0x0002a4f4
   18ac0:	200009c4 	.word	0x200009c4
   18ac4:	0002a508 	.word	0x0002a508
   18ac8:	0002a51c 	.word	0x0002a51c
   18acc:	0002a74c 	.word	0x0002a74c
   18ad0:	0002a530 	.word	0x0002a530
   18ad4:	200008e8 	.word	0x200008e8
   18ad8:	0002a544 	.word	0x0002a544
   18adc:	0002a550 	.word	0x0002a550
   18ae0:	0001b021 	.word	0x0001b021
   18ae4:	0002a558 	.word	0x0002a558
   18ae8:	0002a56c 	.word	0x0002a56c
   18aec:	0002a580 	.word	0x0002a580
   18af0:	20000854 	.word	0x20000854
   18af4:	0002a594 	.word	0x0002a594
   18af8:	0002a5a8 	.word	0x0002a5a8
   18afc:	0002a5bc 	.word	0x0002a5bc
   18b00:	0002a5d0 	.word	0x0002a5d0
   18b04:	0002a5e8 	.word	0x0002a5e8
   18b08:	20000948 	.word	0x20000948
   18b0c:	0002a5f8 	.word	0x0002a5f8
   18b10:	0002a600 	.word	0x0002a600
   18b14:	0002a608 	.word	0x0002a608
   18b18:	0002a618 	.word	0x0002a618
   18b1c:	0002a620 	.word	0x0002a620
   18b20:	0002a628 	.word	0x0002a628
   18b24:	0002a630 	.word	0x0002a630
   18b28:	20000990 	.word	0x20000990
   18b2c:	0002a63c 	.word	0x0002a63c
   18b30:	0002a644 	.word	0x0002a644
					}
					else if (overheadLevel == OVERHEADCRITICALLEVEL)
   18b34:	4bca      	ldr	r3, [pc, #808]	; (18e60 <lcd_displaying_task+0x7c0>)
   18b36:	781b      	ldrb	r3, [r3, #0]
   18b38:	b2db      	uxtb	r3, r3
   18b3a:	2b00      	cmp	r3, #0
   18b3c:	d103      	bne.n	18b46 <lcd_displaying_task+0x4a6>
					{
						lcd_printf("LOW   ");
   18b3e:	4bc9      	ldr	r3, [pc, #804]	; (18e64 <lcd_displaying_task+0x7c4>)
   18b40:	0018      	movs	r0, r3
   18b42:	4bc9      	ldr	r3, [pc, #804]	; (18e68 <lcd_displaying_task+0x7c8>)
   18b44:	4798      	blx	r3
					}
					LCD_setCursor(0,1);
   18b46:	2101      	movs	r1, #1
   18b48:	2000      	movs	r0, #0
   18b4a:	4bc8      	ldr	r3, [pc, #800]	; (18e6c <lcd_displaying_task+0x7cc>)
   18b4c:	4798      	blx	r3
					lcd_printf("U-LEVEL : ");
   18b4e:	4bc8      	ldr	r3, [pc, #800]	; (18e70 <lcd_displaying_task+0x7d0>)
   18b50:	0018      	movs	r0, r3
   18b52:	4bc5      	ldr	r3, [pc, #788]	; (18e68 <lcd_displaying_task+0x7c8>)
   18b54:	4798      	blx	r3
					if (undergroundLevel == CRITICALLEVEL)
   18b56:	4bc7      	ldr	r3, [pc, #796]	; (18e74 <lcd_displaying_task+0x7d4>)
   18b58:	781b      	ldrb	r3, [r3, #0]
   18b5a:	2b00      	cmp	r3, #0
   18b5c:	d104      	bne.n	18b68 <lcd_displaying_task+0x4c8>
					{
						lcd_printf("CRTCL ");
   18b5e:	4bc6      	ldr	r3, [pc, #792]	; (18e78 <lcd_displaying_task+0x7d8>)
   18b60:	0018      	movs	r0, r3
   18b62:	4bc1      	ldr	r3, [pc, #772]	; (18e68 <lcd_displaying_task+0x7c8>)
   18b64:	4798      	blx	r3
					}
					else if (undergroundLevel == HIGHLEVEL)
					{
						lcd_printf("HIGH  ");
					}
					break;
   18b66:	e0f9      	b.n	18d5c <lcd_displaying_task+0x6bc>
					else if (undergroundLevel == LOWLEVEL)
   18b68:	4bc2      	ldr	r3, [pc, #776]	; (18e74 <lcd_displaying_task+0x7d4>)
   18b6a:	781b      	ldrb	r3, [r3, #0]
   18b6c:	2b01      	cmp	r3, #1
   18b6e:	d104      	bne.n	18b7a <lcd_displaying_task+0x4da>
						lcd_printf("LOW   ");
   18b70:	4bbc      	ldr	r3, [pc, #752]	; (18e64 <lcd_displaying_task+0x7c4>)
   18b72:	0018      	movs	r0, r3
   18b74:	4bbc      	ldr	r3, [pc, #752]	; (18e68 <lcd_displaying_task+0x7c8>)
   18b76:	4798      	blx	r3
					break;
   18b78:	e0f0      	b.n	18d5c <lcd_displaying_task+0x6bc>
					else if (undergroundLevel == MIDLEVEL)
   18b7a:	4bbe      	ldr	r3, [pc, #760]	; (18e74 <lcd_displaying_task+0x7d4>)
   18b7c:	781b      	ldrb	r3, [r3, #0]
   18b7e:	2b02      	cmp	r3, #2
   18b80:	d104      	bne.n	18b8c <lcd_displaying_task+0x4ec>
						lcd_printf("MID   ");
   18b82:	4bbe      	ldr	r3, [pc, #760]	; (18e7c <lcd_displaying_task+0x7dc>)
   18b84:	0018      	movs	r0, r3
   18b86:	4bb8      	ldr	r3, [pc, #736]	; (18e68 <lcd_displaying_task+0x7c8>)
   18b88:	4798      	blx	r3
					break;
   18b8a:	e0e7      	b.n	18d5c <lcd_displaying_task+0x6bc>
					else if (undergroundLevel == HIGHLEVEL)
   18b8c:	4bb9      	ldr	r3, [pc, #740]	; (18e74 <lcd_displaying_task+0x7d4>)
   18b8e:	781b      	ldrb	r3, [r3, #0]
   18b90:	2b03      	cmp	r3, #3
   18b92:	d000      	beq.n	18b96 <lcd_displaying_task+0x4f6>
   18b94:	e0e2      	b.n	18d5c <lcd_displaying_task+0x6bc>
						lcd_printf("HIGH  ");
   18b96:	4bba      	ldr	r3, [pc, #744]	; (18e80 <lcd_displaying_task+0x7e0>)
   18b98:	0018      	movs	r0, r3
   18b9a:	4bb3      	ldr	r3, [pc, #716]	; (18e68 <lcd_displaying_task+0x7c8>)
   18b9c:	4798      	blx	r3
					break;
   18b9e:	e0dd      	b.n	18d5c <lcd_displaying_task+0x6bc>
				}
				case 6:
				{
					LCD_setCursor(0,0);
   18ba0:	2100      	movs	r1, #0
   18ba2:	2000      	movs	r0, #0
   18ba4:	4bb1      	ldr	r3, [pc, #708]	; (18e6c <lcd_displaying_task+0x7cc>)
   18ba6:	4798      	blx	r3
					lcd_printf("BatteryPer: %u%% ",Analog_Parameter_Struct.Battery_percentage);
   18ba8:	4bb6      	ldr	r3, [pc, #728]	; (18e84 <lcd_displaying_task+0x7e4>)
   18baa:	7f1b      	ldrb	r3, [r3, #28]
   18bac:	b2db      	uxtb	r3, r3
   18bae:	001a      	movs	r2, r3
   18bb0:	4bb5      	ldr	r3, [pc, #724]	; (18e88 <lcd_displaying_task+0x7e8>)
   18bb2:	0011      	movs	r1, r2
   18bb4:	0018      	movs	r0, r3
   18bb6:	4bac      	ldr	r3, [pc, #688]	; (18e68 <lcd_displaying_task+0x7c8>)
   18bb8:	4798      	blx	r3
					LCD_setCursor(0,1);
   18bba:	2101      	movs	r1, #1
   18bbc:	2000      	movs	r0, #0
   18bbe:	4bab      	ldr	r3, [pc, #684]	; (18e6c <lcd_displaying_task+0x7cc>)
   18bc0:	4798      	blx	r3
					lcd_printf("SIGNAL : ");
   18bc2:	4bb2      	ldr	r3, [pc, #712]	; (18e8c <lcd_displaying_task+0x7ec>)
   18bc4:	0018      	movs	r0, r3
   18bc6:	4ba8      	ldr	r3, [pc, #672]	; (18e68 <lcd_displaying_task+0x7c8>)
   18bc8:	4798      	blx	r3
					LCD_setCursor(9,1);
   18bca:	2101      	movs	r1, #1
   18bcc:	2009      	movs	r0, #9
   18bce:	4ba7      	ldr	r3, [pc, #668]	; (18e6c <lcd_displaying_task+0x7cc>)
   18bd0:	4798      	blx	r3
					lcd_printf("       ");
   18bd2:	4baf      	ldr	r3, [pc, #700]	; (18e90 <lcd_displaying_task+0x7f0>)
   18bd4:	0018      	movs	r0, r3
   18bd6:	4ba4      	ldr	r3, [pc, #656]	; (18e68 <lcd_displaying_task+0x7c8>)
   18bd8:	4798      	blx	r3
					LCD_setCursor(9,1);
   18bda:	2101      	movs	r1, #1
   18bdc:	2009      	movs	r0, #9
   18bde:	4ba3      	ldr	r3, [pc, #652]	; (18e6c <lcd_displaying_task+0x7cc>)
   18be0:	4798      	blx	r3
					
					uint8_t tempSignal = Signal_Strength;
   18be2:	233d      	movs	r3, #61	; 0x3d
   18be4:	18fb      	adds	r3, r7, r3
   18be6:	4aab      	ldr	r2, [pc, #684]	; (18e94 <lcd_displaying_task+0x7f4>)
   18be8:	7812      	ldrb	r2, [r2, #0]
   18bea:	701a      	strb	r2, [r3, #0]
					for (uint8_t i=0;i<=tempSignal;i++)
   18bec:	233e      	movs	r3, #62	; 0x3e
   18bee:	18fb      	adds	r3, r7, r3
   18bf0:	2200      	movs	r2, #0
   18bf2:	701a      	strb	r2, [r3, #0]
   18bf4:	e00c      	b.n	18c10 <lcd_displaying_task+0x570>
					{
						LCD_write(i);
   18bf6:	233e      	movs	r3, #62	; 0x3e
   18bf8:	18fb      	adds	r3, r7, r3
   18bfa:	781b      	ldrb	r3, [r3, #0]
   18bfc:	0018      	movs	r0, r3
   18bfe:	4ba6      	ldr	r3, [pc, #664]	; (18e98 <lcd_displaying_task+0x7f8>)
   18c00:	4798      	blx	r3
					for (uint8_t i=0;i<=tempSignal;i++)
   18c02:	233e      	movs	r3, #62	; 0x3e
   18c04:	18fb      	adds	r3, r7, r3
   18c06:	781a      	ldrb	r2, [r3, #0]
   18c08:	233e      	movs	r3, #62	; 0x3e
   18c0a:	18fb      	adds	r3, r7, r3
   18c0c:	3201      	adds	r2, #1
   18c0e:	701a      	strb	r2, [r3, #0]
   18c10:	233e      	movs	r3, #62	; 0x3e
   18c12:	18fa      	adds	r2, r7, r3
   18c14:	233d      	movs	r3, #61	; 0x3d
   18c16:	18fb      	adds	r3, r7, r3
   18c18:	7812      	ldrb	r2, [r2, #0]
   18c1a:	781b      	ldrb	r3, [r3, #0]
   18c1c:	429a      	cmp	r2, r3
   18c1e:	d9ea      	bls.n	18bf6 <lcd_displaying_task+0x556>
					}

					break;
   18c20:	e09f      	b.n	18d62 <lcd_displaying_task+0x6c2>
				}
				case 7:
				{
					LCD_setCursor(0,0);
   18c22:	2100      	movs	r1, #0
   18c24:	2000      	movs	r0, #0
   18c26:	4b91      	ldr	r3, [pc, #580]	; (18e6c <lcd_displaying_task+0x7cc>)
   18c28:	4798      	blx	r3
					switch(callStateOnLCD)
   18c2a:	4b9c      	ldr	r3, [pc, #624]	; (18e9c <lcd_displaying_task+0x7fc>)
   18c2c:	781b      	ldrb	r3, [r3, #0]
   18c2e:	b2db      	uxtb	r3, r3
   18c30:	2b05      	cmp	r3, #5
   18c32:	d900      	bls.n	18c36 <lcd_displaying_task+0x596>
   18c34:	e094      	b.n	18d60 <lcd_displaying_task+0x6c0>
   18c36:	009a      	lsls	r2, r3, #2
   18c38:	4b99      	ldr	r3, [pc, #612]	; (18ea0 <lcd_displaying_task+0x800>)
   18c3a:	18d3      	adds	r3, r2, r3
   18c3c:	681b      	ldr	r3, [r3, #0]
   18c3e:	469f      	mov	pc, r3
					{
						case LCDCALLSTATE_RINGING:
						{
							lcd_printf("INCOMING CALL.. ");
   18c40:	4b98      	ldr	r3, [pc, #608]	; (18ea4 <lcd_displaying_task+0x804>)
   18c42:	0018      	movs	r0, r3
   18c44:	4b88      	ldr	r3, [pc, #544]	; (18e68 <lcd_displaying_task+0x7c8>)
   18c46:	4798      	blx	r3
							LCD_setCursor(0,1);
   18c48:	2101      	movs	r1, #1
   18c4a:	2000      	movs	r0, #0
   18c4c:	4b87      	ldr	r3, [pc, #540]	; (18e6c <lcd_displaying_task+0x7cc>)
   18c4e:	4798      	blx	r3
							lcd_printf("%-16s",numberOnLCD);
   18c50:	4a95      	ldr	r2, [pc, #596]	; (18ea8 <lcd_displaying_task+0x808>)
   18c52:	4b96      	ldr	r3, [pc, #600]	; (18eac <lcd_displaying_task+0x80c>)
   18c54:	0011      	movs	r1, r2
   18c56:	0018      	movs	r0, r3
   18c58:	4b83      	ldr	r3, [pc, #524]	; (18e68 <lcd_displaying_task+0x7c8>)
   18c5a:	4798      	blx	r3
							break;
   18c5c:	e045      	b.n	18cea <lcd_displaying_task+0x64a>
						}
						case LCDCALLSTATE_INCALL:
						{
							lcd_printf("IN CALL...      ");
   18c5e:	4b94      	ldr	r3, [pc, #592]	; (18eb0 <lcd_displaying_task+0x810>)
   18c60:	0018      	movs	r0, r3
   18c62:	4b81      	ldr	r3, [pc, #516]	; (18e68 <lcd_displaying_task+0x7c8>)
   18c64:	4798      	blx	r3
							LCD_setCursor(0,1);
   18c66:	2101      	movs	r1, #1
   18c68:	2000      	movs	r0, #0
   18c6a:	4b80      	ldr	r3, [pc, #512]	; (18e6c <lcd_displaying_task+0x7cc>)
   18c6c:	4798      	blx	r3
							lcd_printf("%-16s",numberOnLCD);
   18c6e:	4a8e      	ldr	r2, [pc, #568]	; (18ea8 <lcd_displaying_task+0x808>)
   18c70:	4b8e      	ldr	r3, [pc, #568]	; (18eac <lcd_displaying_task+0x80c>)
   18c72:	0011      	movs	r1, r2
   18c74:	0018      	movs	r0, r3
   18c76:	4b7c      	ldr	r3, [pc, #496]	; (18e68 <lcd_displaying_task+0x7c8>)
   18c78:	4798      	blx	r3
							break;
   18c7a:	e036      	b.n	18cea <lcd_displaying_task+0x64a>
						}
						case LCDCALLSTATE_OUTGOING:
						{
							lcd_printf("DIALING...      ");
   18c7c:	4b8d      	ldr	r3, [pc, #564]	; (18eb4 <lcd_displaying_task+0x814>)
   18c7e:	0018      	movs	r0, r3
   18c80:	4b79      	ldr	r3, [pc, #484]	; (18e68 <lcd_displaying_task+0x7c8>)
   18c82:	4798      	blx	r3
							LCD_setCursor(0,1);
   18c84:	2101      	movs	r1, #1
   18c86:	2000      	movs	r0, #0
   18c88:	4b78      	ldr	r3, [pc, #480]	; (18e6c <lcd_displaying_task+0x7cc>)
   18c8a:	4798      	blx	r3
							lcd_printf("%-16s",numberOnLCD);
   18c8c:	4a86      	ldr	r2, [pc, #536]	; (18ea8 <lcd_displaying_task+0x808>)
   18c8e:	4b87      	ldr	r3, [pc, #540]	; (18eac <lcd_displaying_task+0x80c>)
   18c90:	0011      	movs	r1, r2
   18c92:	0018      	movs	r0, r3
   18c94:	4b74      	ldr	r3, [pc, #464]	; (18e68 <lcd_displaying_task+0x7c8>)
   18c96:	4798      	blx	r3
							break;
   18c98:	e027      	b.n	18cea <lcd_displaying_task+0x64a>
						}
						case LCDCALLSTATE_INCOMINGSMS:
						{
							lcd_printf("INCOMING SMS... ");
   18c9a:	4b87      	ldr	r3, [pc, #540]	; (18eb8 <lcd_displaying_task+0x818>)
   18c9c:	0018      	movs	r0, r3
   18c9e:	4b72      	ldr	r3, [pc, #456]	; (18e68 <lcd_displaying_task+0x7c8>)
   18ca0:	4798      	blx	r3
							LCD_setCursor(0,1);
   18ca2:	2101      	movs	r1, #1
   18ca4:	2000      	movs	r0, #0
   18ca6:	4b71      	ldr	r3, [pc, #452]	; (18e6c <lcd_displaying_task+0x7cc>)
   18ca8:	4798      	blx	r3
							lcd_printf("%-16s",numberOnLCD);
   18caa:	4a7f      	ldr	r2, [pc, #508]	; (18ea8 <lcd_displaying_task+0x808>)
   18cac:	4b7f      	ldr	r3, [pc, #508]	; (18eac <lcd_displaying_task+0x80c>)
   18cae:	0011      	movs	r1, r2
   18cb0:	0018      	movs	r0, r3
   18cb2:	4b6d      	ldr	r3, [pc, #436]	; (18e68 <lcd_displaying_task+0x7c8>)
   18cb4:	4798      	blx	r3
							setCallStateOnLCD(LCDCALLSTATE_IDLE,NULL,false);
   18cb6:	2200      	movs	r2, #0
   18cb8:	2100      	movs	r1, #0
   18cba:	2000      	movs	r0, #0
   18cbc:	4b7f      	ldr	r3, [pc, #508]	; (18ebc <lcd_displaying_task+0x81c>)
   18cbe:	4798      	blx	r3
							break;
   18cc0:	e013      	b.n	18cea <lcd_displaying_task+0x64a>
						}
						case LCDCALLSTATE_OUTGOINGSMS:
						{
							lcd_printf("OUTGOING SMS... ");
   18cc2:	4b7f      	ldr	r3, [pc, #508]	; (18ec0 <lcd_displaying_task+0x820>)
   18cc4:	0018      	movs	r0, r3
   18cc6:	4b68      	ldr	r3, [pc, #416]	; (18e68 <lcd_displaying_task+0x7c8>)
   18cc8:	4798      	blx	r3
							LCD_setCursor(0,1);
   18cca:	2101      	movs	r1, #1
   18ccc:	2000      	movs	r0, #0
   18cce:	4b67      	ldr	r3, [pc, #412]	; (18e6c <lcd_displaying_task+0x7cc>)
   18cd0:	4798      	blx	r3
							lcd_printf("%-16s",numberOnLCD);
   18cd2:	4a75      	ldr	r2, [pc, #468]	; (18ea8 <lcd_displaying_task+0x808>)
   18cd4:	4b75      	ldr	r3, [pc, #468]	; (18eac <lcd_displaying_task+0x80c>)
   18cd6:	0011      	movs	r1, r2
   18cd8:	0018      	movs	r0, r3
   18cda:	4b63      	ldr	r3, [pc, #396]	; (18e68 <lcd_displaying_task+0x7c8>)
   18cdc:	4798      	blx	r3
							setCallStateOnLCD(LCDCALLSTATE_IDLE,NULL,false);
   18cde:	2200      	movs	r2, #0
   18ce0:	2100      	movs	r1, #0
   18ce2:	2000      	movs	r0, #0
   18ce4:	4b75      	ldr	r3, [pc, #468]	; (18ebc <lcd_displaying_task+0x81c>)
   18ce6:	4798      	blx	r3
							break;
   18ce8:	46c0      	nop			; (mov r8, r8)
						}
					}
					break;
   18cea:	e039      	b.n	18d60 <lcd_displaying_task+0x6c0>
				}
				case 8:
				{
					if(Analog_Parameter_Struct.Battery_percentage<35)
   18cec:	4b65      	ldr	r3, [pc, #404]	; (18e84 <lcd_displaying_task+0x7e4>)
   18cee:	7f1b      	ldrb	r3, [r3, #28]
   18cf0:	b2db      	uxtb	r3, r3
   18cf2:	2b22      	cmp	r3, #34	; 0x22
   18cf4:	d810      	bhi.n	18d18 <lcd_displaying_task+0x678>
					{
						LCD_setCursor(0,0);
   18cf6:	2100      	movs	r1, #0
   18cf8:	2000      	movs	r0, #0
   18cfa:	4b5c      	ldr	r3, [pc, #368]	; (18e6c <lcd_displaying_task+0x7cc>)
   18cfc:	4798      	blx	r3
						lcd_printf("LOW BATTERY     ");
   18cfe:	4b71      	ldr	r3, [pc, #452]	; (18ec4 <lcd_displaying_task+0x824>)
   18d00:	0018      	movs	r0, r3
   18d02:	4b59      	ldr	r3, [pc, #356]	; (18e68 <lcd_displaying_task+0x7c8>)
   18d04:	4798      	blx	r3
						LCD_setCursor(0,1);
   18d06:	2101      	movs	r1, #1
   18d08:	2000      	movs	r0, #0
   18d0a:	4b58      	ldr	r3, [pc, #352]	; (18e6c <lcd_displaying_task+0x7cc>)
   18d0c:	4798      	blx	r3
						lcd_printf("                ");
   18d0e:	4b6e      	ldr	r3, [pc, #440]	; (18ec8 <lcd_displaying_task+0x828>)
   18d10:	0018      	movs	r0, r3
   18d12:	4b55      	ldr	r3, [pc, #340]	; (18e68 <lcd_displaying_task+0x7c8>)
   18d14:	4798      	blx	r3
						break;
   18d16:	e024      	b.n	18d62 <lcd_displaying_task+0x6c2>
					}
					else
					{
						screen++;
   18d18:	233f      	movs	r3, #63	; 0x3f
   18d1a:	18fb      	adds	r3, r7, r3
   18d1c:	781a      	ldrb	r2, [r3, #0]
   18d1e:	233f      	movs	r3, #63	; 0x3f
   18d20:	18fb      	adds	r3, r7, r3
   18d22:	3201      	adds	r2, #1
   18d24:	701a      	strb	r2, [r3, #0]
					}
				}
				case 9:
				{
					LCD_setCursor(0,0);
   18d26:	2100      	movs	r1, #0
   18d28:	2000      	movs	r0, #0
   18d2a:	4b50      	ldr	r3, [pc, #320]	; (18e6c <lcd_displaying_task+0x7cc>)
   18d2c:	4798      	blx	r3
					lcd_printf("CURRENT SETTING ");
   18d2e:	4b67      	ldr	r3, [pc, #412]	; (18ecc <lcd_displaying_task+0x82c>)
   18d30:	0018      	movs	r0, r3
   18d32:	4b4d      	ldr	r3, [pc, #308]	; (18e68 <lcd_displaying_task+0x7c8>)
   18d34:	4798      	blx	r3
					LCD_setCursor(0,1);
   18d36:	2101      	movs	r1, #1
   18d38:	2000      	movs	r0, #0
   18d3a:	4b4c      	ldr	r3, [pc, #304]	; (18e6c <lcd_displaying_task+0x7cc>)
   18d3c:	4798      	blx	r3
					if(user_settings_parameter_struct.currentDetectionAddress)
   18d3e:	4b64      	ldr	r3, [pc, #400]	; (18ed0 <lcd_displaying_task+0x830>)
   18d40:	7bdb      	ldrb	r3, [r3, #15]
   18d42:	b2db      	uxtb	r3, r3
   18d44:	2b00      	cmp	r3, #0
   18d46:	d004      	beq.n	18d52 <lcd_displaying_task+0x6b2>
					{
						lcd_printf("ON              ");
   18d48:	4b62      	ldr	r3, [pc, #392]	; (18ed4 <lcd_displaying_task+0x834>)
   18d4a:	0018      	movs	r0, r3
   18d4c:	4b46      	ldr	r3, [pc, #280]	; (18e68 <lcd_displaying_task+0x7c8>)
   18d4e:	4798      	blx	r3
					}
					else
					{
						lcd_printf("OFF             ");
					}
					break;
   18d50:	e007      	b.n	18d62 <lcd_displaying_task+0x6c2>
						lcd_printf("OFF             ");
   18d52:	4b61      	ldr	r3, [pc, #388]	; (18ed8 <lcd_displaying_task+0x838>)
   18d54:	0018      	movs	r0, r3
   18d56:	4b44      	ldr	r3, [pc, #272]	; (18e68 <lcd_displaying_task+0x7c8>)
   18d58:	4798      	blx	r3
					break;
   18d5a:	e002      	b.n	18d62 <lcd_displaying_task+0x6c2>
					break;
   18d5c:	46c0      	nop			; (mov r8, r8)
   18d5e:	e000      	b.n	18d62 <lcd_displaying_task+0x6c2>
					break;
   18d60:	46c0      	nop			; (mov r8, r8)
				//break;
				//}
			}
		}
		
		if (xQueueReceive(xfour_Second_Queue,&time,0))
   18d62:	4b5e      	ldr	r3, [pc, #376]	; (18edc <lcd_displaying_task+0x83c>)
   18d64:	681b      	ldr	r3, [r3, #0]
   18d66:	223c      	movs	r2, #60	; 0x3c
   18d68:	18b9      	adds	r1, r7, r2
   18d6a:	2200      	movs	r2, #0
   18d6c:	0018      	movs	r0, r3
   18d6e:	4b5c      	ldr	r3, [pc, #368]	; (18ee0 <lcd_displaying_task+0x840>)
   18d70:	4798      	blx	r3
   18d72:	1e03      	subs	r3, r0, #0
   18d74:	d059      	beq.n	18e2a <lcd_displaying_task+0x78a>
		{
			xTimerChangePeriod( four_Second_timeout_timer, 4000/portTICK_PERIOD_MS, portMAX_DELAY);
   18d76:	4b5b      	ldr	r3, [pc, #364]	; (18ee4 <lcd_displaying_task+0x844>)
   18d78:	6818      	ldr	r0, [r3, #0]
   18d7a:	23fa      	movs	r3, #250	; 0xfa
   18d7c:	011a      	lsls	r2, r3, #4
   18d7e:	2301      	movs	r3, #1
   18d80:	425b      	negs	r3, r3
   18d82:	9300      	str	r3, [sp, #0]
   18d84:	2300      	movs	r3, #0
   18d86:	2104      	movs	r1, #4
   18d88:	4c57      	ldr	r4, [pc, #348]	; (18ee8 <lcd_displaying_task+0x848>)
   18d8a:	47a0      	blx	r4
			if(varPauseDisplay==false)
   18d8c:	4b57      	ldr	r3, [pc, #348]	; (18eec <lcd_displaying_task+0x84c>)
   18d8e:	781b      	ldrb	r3, [r3, #0]
   18d90:	b2db      	uxtb	r3, r3
   18d92:	2201      	movs	r2, #1
   18d94:	4053      	eors	r3, r2
   18d96:	b2db      	uxtb	r3, r3
   18d98:	2b00      	cmp	r3, #0
   18d9a:	d046      	beq.n	18e2a <lcd_displaying_task+0x78a>
			{
				screen++;
   18d9c:	233f      	movs	r3, #63	; 0x3f
   18d9e:	18fb      	adds	r3, r7, r3
   18da0:	781a      	ldrb	r2, [r3, #0]
   18da2:	233f      	movs	r3, #63	; 0x3f
   18da4:	18fb      	adds	r3, r7, r3
   18da6:	3201      	adds	r2, #1
   18da8:	701a      	strb	r2, [r3, #0]
				if(!getMotorState() && screen==3)
   18daa:	4b51      	ldr	r3, [pc, #324]	; (18ef0 <lcd_displaying_task+0x850>)
   18dac:	4798      	blx	r3
   18dae:	0003      	movs	r3, r0
   18db0:	001a      	movs	r2, r3
   18db2:	2301      	movs	r3, #1
   18db4:	4053      	eors	r3, r2
   18db6:	b2db      	uxtb	r3, r3
   18db8:	2b00      	cmp	r3, #0
   18dba:	d00b      	beq.n	18dd4 <lcd_displaying_task+0x734>
   18dbc:	233f      	movs	r3, #63	; 0x3f
   18dbe:	18fb      	adds	r3, r7, r3
   18dc0:	781b      	ldrb	r3, [r3, #0]
   18dc2:	2b03      	cmp	r3, #3
   18dc4:	d106      	bne.n	18dd4 <lcd_displaying_task+0x734>
				{
					screen++;
   18dc6:	233f      	movs	r3, #63	; 0x3f
   18dc8:	18fb      	adds	r3, r7, r3
   18dca:	781a      	ldrb	r2, [r3, #0]
   18dcc:	233f      	movs	r3, #63	; 0x3f
   18dce:	18fb      	adds	r3, r7, r3
   18dd0:	3201      	adds	r2, #1
   18dd2:	701a      	strb	r2, [r3, #0]
				}
				
				if(!factory_settings_parameter_struct.ENABLE_WATER && screen==5)
   18dd4:	4b47      	ldr	r3, [pc, #284]	; (18ef4 <lcd_displaying_task+0x854>)
   18dd6:	795b      	ldrb	r3, [r3, #5]
   18dd8:	2b00      	cmp	r3, #0
   18dda:	d10b      	bne.n	18df4 <lcd_displaying_task+0x754>
   18ddc:	233f      	movs	r3, #63	; 0x3f
   18dde:	18fb      	adds	r3, r7, r3
   18de0:	781b      	ldrb	r3, [r3, #0]
   18de2:	2b05      	cmp	r3, #5
   18de4:	d106      	bne.n	18df4 <lcd_displaying_task+0x754>
				{
					screen++;
   18de6:	233f      	movs	r3, #63	; 0x3f
   18de8:	18fb      	adds	r3, r7, r3
   18dea:	781a      	ldrb	r2, [r3, #0]
   18dec:	233f      	movs	r3, #63	; 0x3f
   18dee:	18fb      	adds	r3, r7, r3
   18df0:	3201      	adds	r2, #1
   18df2:	701a      	strb	r2, [r3, #0]
				}
				
				{
					if(callStateOnLCD==LCDCALLSTATE_IDLE && screen==7)
   18df4:	4b29      	ldr	r3, [pc, #164]	; (18e9c <lcd_displaying_task+0x7fc>)
   18df6:	781b      	ldrb	r3, [r3, #0]
   18df8:	b2db      	uxtb	r3, r3
   18dfa:	2b00      	cmp	r3, #0
   18dfc:	d10c      	bne.n	18e18 <lcd_displaying_task+0x778>
   18dfe:	233f      	movs	r3, #63	; 0x3f
   18e00:	18fb      	adds	r3, r7, r3
   18e02:	781b      	ldrb	r3, [r3, #0]
   18e04:	2b07      	cmp	r3, #7
   18e06:	d107      	bne.n	18e18 <lcd_displaying_task+0x778>
					{
						screen++;
   18e08:	233f      	movs	r3, #63	; 0x3f
   18e0a:	18fb      	adds	r3, r7, r3
   18e0c:	781a      	ldrb	r2, [r3, #0]
   18e0e:	233f      	movs	r3, #63	; 0x3f
   18e10:	18fb      	adds	r3, r7, r3
   18e12:	3201      	adds	r2, #1
   18e14:	701a      	strb	r2, [r3, #0]
   18e16:	e008      	b.n	18e2a <lcd_displaying_task+0x78a>
					}
					else if(callStateOnLCD!=LCDCALLSTATE_IDLE)
   18e18:	4b20      	ldr	r3, [pc, #128]	; (18e9c <lcd_displaying_task+0x7fc>)
   18e1a:	781b      	ldrb	r3, [r3, #0]
   18e1c:	b2db      	uxtb	r3, r3
   18e1e:	2b00      	cmp	r3, #0
   18e20:	d003      	beq.n	18e2a <lcd_displaying_task+0x78a>
					{
						screen=7;
   18e22:	233f      	movs	r3, #63	; 0x3f
   18e24:	18fb      	adds	r3, r7, r3
   18e26:	2207      	movs	r2, #7
   18e28:	701a      	strb	r2, [r3, #0]
				}
			}
		}
		
		//screen = 8;
		vTaskDelay(500);
   18e2a:	23fa      	movs	r3, #250	; 0xfa
   18e2c:	005b      	lsls	r3, r3, #1
   18e2e:	0018      	movs	r0, r3
   18e30:	4b31      	ldr	r3, [pc, #196]	; (18ef8 <lcd_displaying_task+0x858>)
   18e32:	4798      	blx	r3

		if (screen>9)
   18e34:	233f      	movs	r3, #63	; 0x3f
   18e36:	18fb      	adds	r3, r7, r3
   18e38:	781b      	ldrb	r3, [r3, #0]
   18e3a:	2b09      	cmp	r3, #9
   18e3c:	d800      	bhi.n	18e40 <lcd_displaying_task+0x7a0>
   18e3e:	e496      	b.n	1876e <lcd_displaying_task+0xce>
		{
			screen=1;
   18e40:	233f      	movs	r3, #63	; 0x3f
   18e42:	18fb      	adds	r3, r7, r3
   18e44:	2201      	movs	r2, #1
   18e46:	701a      	strb	r2, [r3, #0]
			
			LCD_PWR_DIS();
   18e48:	4b2c      	ldr	r3, [pc, #176]	; (18efc <lcd_displaying_task+0x85c>)
   18e4a:	4798      	blx	r3
			lcd_in_sleep = true;
   18e4c:	4b2c      	ldr	r3, [pc, #176]	; (18f00 <lcd_displaying_task+0x860>)
   18e4e:	2201      	movs	r2, #1
   18e50:	701a      	strb	r2, [r3, #0]
			setNetworkCharacter=true;
   18e52:	4b2c      	ldr	r3, [pc, #176]	; (18f04 <lcd_displaying_task+0x864>)
   18e54:	2201      	movs	r2, #1
   18e56:	701a      	strb	r2, [r3, #0]
			vTaskDelay(100/portTICK_PERIOD_MS);
   18e58:	2064      	movs	r0, #100	; 0x64
   18e5a:	4b27      	ldr	r3, [pc, #156]	; (18ef8 <lcd_displaying_task+0x858>)
   18e5c:	4798      	blx	r3
		if (lcd_in_sleep)
   18e5e:	e486      	b.n	1876e <lcd_displaying_task+0xce>
   18e60:	20000990 	.word	0x20000990
   18e64:	0002a64c 	.word	0x0002a64c
   18e68:	0001412d 	.word	0x0001412d
   18e6c:	00014031 	.word	0x00014031
   18e70:	0002a654 	.word	0x0002a654
   18e74:	20000a58 	.word	0x20000a58
   18e78:	0002a660 	.word	0x0002a660
   18e7c:	0002a644 	.word	0x0002a644
   18e80:	0002a63c 	.word	0x0002a63c
   18e84:	200008e8 	.word	0x200008e8
   18e88:	0002a668 	.word	0x0002a668
   18e8c:	0002a67c 	.word	0x0002a67c
   18e90:	0002a688 	.word	0x0002a688
   18e94:	20000989 	.word	0x20000989
   18e98:	00013ee5 	.word	0x00013ee5
   18e9c:	200009d2 	.word	0x200009d2
   18ea0:	0002a774 	.word	0x0002a774
   18ea4:	0002a690 	.word	0x0002a690
   18ea8:	20000a44 	.word	0x20000a44
   18eac:	0002a6a4 	.word	0x0002a6a4
   18eb0:	0002a6ac 	.word	0x0002a6ac
   18eb4:	0002a6c0 	.word	0x0002a6c0
   18eb8:	0002a6d4 	.word	0x0002a6d4
   18ebc:	0001cf2d 	.word	0x0001cf2d
   18ec0:	0002a6e8 	.word	0x0002a6e8
   18ec4:	0002a6fc 	.word	0x0002a6fc
   18ec8:	0002a580 	.word	0x0002a580
   18ecc:	0002a710 	.word	0x0002a710
   18ed0:	20000854 	.word	0x20000854
   18ed4:	0002a508 	.word	0x0002a508
   18ed8:	0002a51c 	.word	0x0002a51c
   18edc:	20000428 	.word	0x20000428
   18ee0:	0001f3c1 	.word	0x0001f3c1
   18ee4:	2000042c 	.word	0x2000042c
   18ee8:	00020e2d 	.word	0x00020e2d
   18eec:	200009ac 	.word	0x200009ac
   18ef0:	0001b021 	.word	0x0001b021
   18ef4:	2000082c 	.word	0x2000082c
   18ef8:	0001fe69 	.word	0x0001fe69
   18efc:	00013ce1 	.word	0x00013ce1
   18f00:	20000a64 	.word	0x20000a64
   18f04:	20000a65 	.word	0x20000a65

00018f08 <start_lcd_service>:
	}
}


void start_lcd_service(void)
{
   18f08:	b590      	push	{r4, r7, lr}
   18f0a:	b083      	sub	sp, #12
   18f0c:	af02      	add	r7, sp, #8
	xfour_Second_Queue=xQueueCreate(1,sizeof(uint8_t));
   18f0e:	2200      	movs	r2, #0
   18f10:	2101      	movs	r1, #1
   18f12:	2001      	movs	r0, #1
   18f14:	4b09      	ldr	r3, [pc, #36]	; (18f3c <start_lcd_service+0x34>)
   18f16:	4798      	blx	r3
   18f18:	0002      	movs	r2, r0
   18f1a:	4b09      	ldr	r3, [pc, #36]	; (18f40 <start_lcd_service+0x38>)
   18f1c:	601a      	str	r2, [r3, #0]
	xTaskCreate(lcd_displaying_task,NULL,(uint16_t)500,NULL,1,NULL);
   18f1e:	23fa      	movs	r3, #250	; 0xfa
   18f20:	005a      	lsls	r2, r3, #1
   18f22:	4808      	ldr	r0, [pc, #32]	; (18f44 <start_lcd_service+0x3c>)
   18f24:	2300      	movs	r3, #0
   18f26:	9301      	str	r3, [sp, #4]
   18f28:	2301      	movs	r3, #1
   18f2a:	9300      	str	r3, [sp, #0]
   18f2c:	2300      	movs	r3, #0
   18f2e:	2100      	movs	r1, #0
   18f30:	4c05      	ldr	r4, [pc, #20]	; (18f48 <start_lcd_service+0x40>)
   18f32:	47a0      	blx	r4
	
}
   18f34:	46c0      	nop			; (mov r8, r8)
   18f36:	46bd      	mov	sp, r7
   18f38:	b001      	add	sp, #4
   18f3a:	bd90      	pop	{r4, r7, pc}
   18f3c:	0001f005 	.word	0x0001f005
   18f40:	20000428 	.word	0x20000428
   18f44:	000186a1 	.word	0x000186a1
   18f48:	0001fb29 	.word	0x0001fb29

00018f4c <four_second_timer_callback>:

static void four_second_timer_callback(TimerHandle_t timer)
{
   18f4c:	b590      	push	{r4, r7, lr}
   18f4e:	b085      	sub	sp, #20
   18f50:	af00      	add	r7, sp, #0
   18f52:	6078      	str	r0, [r7, #4]
	uint8_t ucharfour_Second=1;
   18f54:	230f      	movs	r3, #15
   18f56:	18fb      	adds	r3, r7, r3
   18f58:	2201      	movs	r2, #1
   18f5a:	701a      	strb	r2, [r3, #0]
	xQueueSendFromISR(xfour_Second_Queue,&ucharfour_Second,0);
   18f5c:	4b05      	ldr	r3, [pc, #20]	; (18f74 <four_second_timer_callback+0x28>)
   18f5e:	6818      	ldr	r0, [r3, #0]
   18f60:	230f      	movs	r3, #15
   18f62:	18f9      	adds	r1, r7, r3
   18f64:	2300      	movs	r3, #0
   18f66:	2200      	movs	r2, #0
   18f68:	4c03      	ldr	r4, [pc, #12]	; (18f78 <four_second_timer_callback+0x2c>)
   18f6a:	47a0      	blx	r4
}
   18f6c:	46c0      	nop			; (mov r8, r8)
   18f6e:	46bd      	mov	sp, r7
   18f70:	b005      	add	sp, #20
   18f72:	bd90      	pop	{r4, r7, pc}
   18f74:	20000428 	.word	0x20000428
   18f78:	0001f2a1 	.word	0x0001f2a1

00018f7c <ac_is_syncing>:
 * \retval false If the module has completed synchronization
 * \retval ture If the module synchronization is ongoing
 */
static inline bool ac_is_syncing(
        struct ac_module *const module_inst)
{
   18f7c:	b580      	push	{r7, lr}
   18f7e:	b084      	sub	sp, #16
   18f80:	af00      	add	r7, sp, #0
   18f82:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);

	Ac *const ac_module = module_inst->hw;
   18f84:	687b      	ldr	r3, [r7, #4]
   18f86:	681b      	ldr	r3, [r3, #0]
   18f88:	60fb      	str	r3, [r7, #12]
		return true;
	}

	return false;
#else
	if (ac_module->STATUSB.reg & AC_STATUSB_SYNCBUSY) {
   18f8a:	68fb      	ldr	r3, [r7, #12]
   18f8c:	7a5b      	ldrb	r3, [r3, #9]
   18f8e:	b2db      	uxtb	r3, r3
   18f90:	b25b      	sxtb	r3, r3
   18f92:	2b00      	cmp	r3, #0
   18f94:	da01      	bge.n	18f9a <ac_is_syncing+0x1e>
		return true;
   18f96:	2301      	movs	r3, #1
   18f98:	e000      	b.n	18f9c <ac_is_syncing+0x20>
	}

	return false;
   18f9a:	2300      	movs	r3, #0
#endif
}
   18f9c:	0018      	movs	r0, r3
   18f9e:	46bd      	mov	sp, r7
   18fa0:	b004      	add	sp, #16
   18fa2:	bd80      	pop	{r7, pc}

00018fa4 <ac_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void ac_get_config_defaults(
		struct ac_config *const config)
{
   18fa4:	b580      	push	{r7, lr}
   18fa6:	b084      	sub	sp, #16
   18fa8:	af00      	add	r7, sp, #0
   18faa:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);
#ifdef FEATURE_AC_RUN_IN_STANDY_PAIR_COMPARATOR
	/* Default configuration values */
	for (uint32_t i = 0; i < AC_PAIRS; i++) {
   18fac:	2300      	movs	r3, #0
   18fae:	60fb      	str	r3, [r7, #12]
   18fb0:	e007      	b.n	18fc2 <ac_get_config_defaults+0x1e>
		config->run_in_standby[i] = false;
   18fb2:	687a      	ldr	r2, [r7, #4]
   18fb4:	68fb      	ldr	r3, [r7, #12]
   18fb6:	18d3      	adds	r3, r2, r3
   18fb8:	2200      	movs	r2, #0
   18fba:	701a      	strb	r2, [r3, #0]
	for (uint32_t i = 0; i < AC_PAIRS; i++) {
   18fbc:	68fb      	ldr	r3, [r7, #12]
   18fbe:	3301      	adds	r3, #1
   18fc0:	60fb      	str	r3, [r7, #12]
   18fc2:	68fb      	ldr	r3, [r7, #12]
   18fc4:	2b00      	cmp	r3, #0
   18fc6:	d0f4      	beq.n	18fb2 <ac_get_config_defaults+0xe>
	}
#endif
#if (SAMD) || (SAMHA1) || (SAMHA0) || (SAMR21)
	config->dig_source_generator = GCLK_GENERATOR_0;
   18fc8:	687b      	ldr	r3, [r7, #4]
   18fca:	2200      	movs	r2, #0
   18fcc:	705a      	strb	r2, [r3, #1]
	config->ana_source_generator = GCLK_GENERATOR_3;
   18fce:	687b      	ldr	r3, [r7, #4]
   18fd0:	2203      	movs	r2, #3
   18fd2:	709a      	strb	r2, [r3, #2]
#else
	config->source_generator = GCLK_GENERATOR_0;
#endif
}
   18fd4:	46c0      	nop			; (mov r8, r8)
   18fd6:	46bd      	mov	sp, r7
   18fd8:	b004      	add	sp, #16
   18fda:	bd80      	pop	{r7, pc}

00018fdc <ac_enable>:
 *
 * \param[in] module_inst  Software instance for the Analog Comparator peripheral
 */
static inline void ac_enable(
		struct ac_module *const module_inst)
{
   18fdc:	b580      	push	{r7, lr}
   18fde:	b084      	sub	sp, #16
   18fe0:	af00      	add	r7, sp, #0
   18fe2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Ac *const ac_module = module_inst->hw;
   18fe4:	687b      	ldr	r3, [r7, #4]
   18fe6:	681b      	ldr	r3, [r3, #0]
   18fe8:	60fb      	str	r3, [r7, #12]

	while (ac_is_syncing(module_inst)) {
   18fea:	46c0      	nop			; (mov r8, r8)
   18fec:	687b      	ldr	r3, [r7, #4]
   18fee:	0018      	movs	r0, r3
   18ff0:	4b07      	ldr	r3, [pc, #28]	; (19010 <ac_enable+0x34>)
   18ff2:	4798      	blx	r3
   18ff4:	1e03      	subs	r3, r0, #0
   18ff6:	d1f9      	bne.n	18fec <ac_enable+0x10>
		/* Wait until synchronization is complete */
	}

	/* Write the new comparator module control configuration */
	ac_module->CTRLA.reg |= AC_CTRLA_ENABLE;
   18ff8:	68fb      	ldr	r3, [r7, #12]
   18ffa:	781b      	ldrb	r3, [r3, #0]
   18ffc:	b2db      	uxtb	r3, r3
   18ffe:	2202      	movs	r2, #2
   19000:	4313      	orrs	r3, r2
   19002:	b2da      	uxtb	r2, r3
   19004:	68fb      	ldr	r3, [r7, #12]
   19006:	701a      	strb	r2, [r3, #0]
}
   19008:	46c0      	nop			; (mov r8, r8)
   1900a:	46bd      	mov	sp, r7
   1900c:	b004      	add	sp, #16
   1900e:	bd80      	pop	{r7, pc}
   19010:	00018f7d 	.word	0x00018f7d

00019014 <ac_enable_events>:
 *  \param[in] events       Struct containing flags of events to enable
 */
static inline void ac_enable_events(
		struct ac_module *const module_inst,
		struct ac_events *const events)
{
   19014:	b580      	push	{r7, lr}
   19016:	b086      	sub	sp, #24
   19018:	af00      	add	r7, sp, #0
   1901a:	6078      	str	r0, [r7, #4]
   1901c:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(events);

	Ac *const ac_module = module_inst->hw;
   1901e:	687b      	ldr	r3, [r7, #4]
   19020:	681b      	ldr	r3, [r3, #0]
   19022:	60fb      	str	r3, [r7, #12]

	uint32_t event_mask = 0;
   19024:	2300      	movs	r3, #0
   19026:	617b      	str	r3, [r7, #20]

	/* Configure window output events for each comparator pair */
	for (uint8_t i = 0; i < AC_PAIRS; i++) {
   19028:	2313      	movs	r3, #19
   1902a:	18fb      	adds	r3, r7, r3
   1902c:	2200      	movs	r2, #0
   1902e:	701a      	strb	r2, [r3, #0]
   19030:	e017      	b.n	19062 <ac_enable_events+0x4e>
		if (events->generate_event_on_window[i] == true) {
   19032:	2313      	movs	r3, #19
   19034:	18fb      	adds	r3, r7, r3
   19036:	781b      	ldrb	r3, [r3, #0]
   19038:	683a      	ldr	r2, [r7, #0]
   1903a:	5cd3      	ldrb	r3, [r2, r3]
   1903c:	2b00      	cmp	r3, #0
   1903e:	d009      	beq.n	19054 <ac_enable_events+0x40>
			event_mask |= (AC_EVCTRL_WINEO0 << i);
   19040:	2313      	movs	r3, #19
   19042:	18fb      	adds	r3, r7, r3
   19044:	781b      	ldrb	r3, [r3, #0]
   19046:	2210      	movs	r2, #16
   19048:	409a      	lsls	r2, r3
   1904a:	0013      	movs	r3, r2
   1904c:	001a      	movs	r2, r3
   1904e:	697b      	ldr	r3, [r7, #20]
   19050:	4313      	orrs	r3, r2
   19052:	617b      	str	r3, [r7, #20]
	for (uint8_t i = 0; i < AC_PAIRS; i++) {
   19054:	2313      	movs	r3, #19
   19056:	18fb      	adds	r3, r7, r3
   19058:	781a      	ldrb	r2, [r3, #0]
   1905a:	2313      	movs	r3, #19
   1905c:	18fb      	adds	r3, r7, r3
   1905e:	3201      	adds	r2, #1
   19060:	701a      	strb	r2, [r3, #0]
   19062:	2313      	movs	r3, #19
   19064:	18fb      	adds	r3, r7, r3
   19066:	781b      	ldrb	r3, [r3, #0]
   19068:	2b00      	cmp	r3, #0
   1906a:	d0e2      	beq.n	19032 <ac_enable_events+0x1e>
		}
	}

	/* Configure sample input/output events for each comparator */
	for (uint8_t i = 0; i < AC_NUM_CMP; i++) {
   1906c:	2312      	movs	r3, #18
   1906e:	18fb      	adds	r3, r7, r3
   19070:	2200      	movs	r2, #0
   19072:	701a      	strb	r2, [r3, #0]
   19074:	e02b      	b.n	190ce <ac_enable_events+0xba>
		if (events->on_event_sample[i] == true) {
   19076:	2312      	movs	r3, #18
   19078:	18fb      	adds	r3, r7, r3
   1907a:	781b      	ldrb	r3, [r3, #0]
   1907c:	683a      	ldr	r2, [r7, #0]
   1907e:	18d3      	adds	r3, r2, r3
   19080:	78db      	ldrb	r3, [r3, #3]
   19082:	2b00      	cmp	r3, #0
   19084:	d00a      	beq.n	1909c <ac_enable_events+0x88>
			event_mask |= (AC_EVCTRL_COMPEI0 << i);
   19086:	2312      	movs	r3, #18
   19088:	18fb      	adds	r3, r7, r3
   1908a:	781b      	ldrb	r3, [r3, #0]
   1908c:	2280      	movs	r2, #128	; 0x80
   1908e:	0052      	lsls	r2, r2, #1
   19090:	409a      	lsls	r2, r3
   19092:	0013      	movs	r3, r2
   19094:	001a      	movs	r2, r3
   19096:	697b      	ldr	r3, [r7, #20]
   19098:	4313      	orrs	r3, r2
   1909a:	617b      	str	r3, [r7, #20]
		}

		if (events->generate_event_on_state[i] == true) {
   1909c:	2312      	movs	r3, #18
   1909e:	18fb      	adds	r3, r7, r3
   190a0:	781b      	ldrb	r3, [r3, #0]
   190a2:	683a      	ldr	r2, [r7, #0]
   190a4:	18d3      	adds	r3, r2, r3
   190a6:	785b      	ldrb	r3, [r3, #1]
   190a8:	2b00      	cmp	r3, #0
   190aa:	d009      	beq.n	190c0 <ac_enable_events+0xac>
			event_mask |= (AC_EVCTRL_COMPEO0 << i);
   190ac:	2312      	movs	r3, #18
   190ae:	18fb      	adds	r3, r7, r3
   190b0:	781b      	ldrb	r3, [r3, #0]
   190b2:	2201      	movs	r2, #1
   190b4:	409a      	lsls	r2, r3
   190b6:	0013      	movs	r3, r2
   190b8:	001a      	movs	r2, r3
   190ba:	697b      	ldr	r3, [r7, #20]
   190bc:	4313      	orrs	r3, r2
   190be:	617b      	str	r3, [r7, #20]
	for (uint8_t i = 0; i < AC_NUM_CMP; i++) {
   190c0:	2312      	movs	r3, #18
   190c2:	18fb      	adds	r3, r7, r3
   190c4:	781a      	ldrb	r2, [r3, #0]
   190c6:	2312      	movs	r3, #18
   190c8:	18fb      	adds	r3, r7, r3
   190ca:	3201      	adds	r2, #1
   190cc:	701a      	strb	r2, [r3, #0]
   190ce:	2312      	movs	r3, #18
   190d0:	18fb      	adds	r3, r7, r3
   190d2:	781b      	ldrb	r3, [r3, #0]
   190d4:	2b01      	cmp	r3, #1
   190d6:	d9ce      	bls.n	19076 <ac_enable_events+0x62>
		}
	}

	ac_module->EVCTRL.reg |= event_mask;
   190d8:	68fb      	ldr	r3, [r7, #12]
   190da:	885b      	ldrh	r3, [r3, #2]
   190dc:	b29a      	uxth	r2, r3
   190de:	697b      	ldr	r3, [r7, #20]
   190e0:	b29b      	uxth	r3, r3
   190e2:	4313      	orrs	r3, r2
   190e4:	b29a      	uxth	r2, r3
   190e6:	68fb      	ldr	r3, [r7, #12]
   190e8:	805a      	strh	r2, [r3, #2]
}
   190ea:	46c0      	nop			; (mov r8, r8)
   190ec:	46bd      	mov	sp, r7
   190ee:	b006      	add	sp, #24
   190f0:	bd80      	pop	{r7, pc}
	...

000190f4 <ac_chan_enable>:
 *  \param[in] channel      Comparator channel to enable
 */
static inline void ac_chan_enable(
		struct ac_module *const module_inst,
		const enum ac_chan_channel channel)
{
   190f4:	b580      	push	{r7, lr}
   190f6:	b084      	sub	sp, #16
   190f8:	af00      	add	r7, sp, #0
   190fa:	6078      	str	r0, [r7, #4]
   190fc:	000a      	movs	r2, r1
   190fe:	1cfb      	adds	r3, r7, #3
   19100:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Ac *const ac_module = module_inst->hw;
   19102:	687b      	ldr	r3, [r7, #4]
   19104:	681b      	ldr	r3, [r3, #0]
   19106:	60fb      	str	r3, [r7, #12]

	while (ac_is_syncing(module_inst)) {
   19108:	46c0      	nop			; (mov r8, r8)
   1910a:	687b      	ldr	r3, [r7, #4]
   1910c:	0018      	movs	r0, r3
   1910e:	4b0b      	ldr	r3, [pc, #44]	; (1913c <ac_chan_enable+0x48>)
   19110:	4798      	blx	r3
   19112:	1e03      	subs	r3, r0, #0
   19114:	d1f9      	bne.n	1910a <ac_chan_enable+0x16>
		/* Wait until synchronization is complete */
	}

	/* Write the new comparator module control configuration */
	ac_module->COMPCTRL[(uint8_t)channel].reg |= AC_COMPCTRL_ENABLE;
   19116:	1cfb      	adds	r3, r7, #3
   19118:	781a      	ldrb	r2, [r3, #0]
   1911a:	1cfb      	adds	r3, r7, #3
   1911c:	7819      	ldrb	r1, [r3, #0]
   1911e:	68fb      	ldr	r3, [r7, #12]
   19120:	3104      	adds	r1, #4
   19122:	0089      	lsls	r1, r1, #2
   19124:	58cb      	ldr	r3, [r1, r3]
   19126:	2101      	movs	r1, #1
   19128:	4319      	orrs	r1, r3
   1912a:	68fb      	ldr	r3, [r7, #12]
   1912c:	3204      	adds	r2, #4
   1912e:	0092      	lsls	r2, r2, #2
   19130:	50d1      	str	r1, [r2, r3]
}
   19132:	46c0      	nop			; (mov r8, r8)
   19134:	46bd      	mov	sp, r7
   19136:	b004      	add	sp, #16
   19138:	bd80      	pop	{r7, pc}
   1913a:	46c0      	nop			; (mov r8, r8)
   1913c:	00018f7d 	.word	0x00018f7d

00019140 <ac_chan_is_ready>:
 *  \return Comparator channel readiness state.
 */
static inline bool ac_chan_is_ready(
		struct ac_module *const module_inst,
		const enum ac_chan_channel channel)
{
   19140:	b580      	push	{r7, lr}
   19142:	b084      	sub	sp, #16
   19144:	af00      	add	r7, sp, #0
   19146:	6078      	str	r0, [r7, #4]
   19148:	000a      	movs	r2, r1
   1914a:	1cfb      	adds	r3, r7, #3
   1914c:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Ac *const ac_module = module_inst->hw;
   1914e:	687b      	ldr	r3, [r7, #4]
   19150:	681b      	ldr	r3, [r3, #0]
   19152:	60fb      	str	r3, [r7, #12]

	return (ac_module->STATUSB.reg & (AC_STATUSB_READY0 << (uint8_t)channel));
   19154:	68fb      	ldr	r3, [r7, #12]
   19156:	7a5b      	ldrb	r3, [r3, #9]
   19158:	b2db      	uxtb	r3, r3
   1915a:	0019      	movs	r1, r3
   1915c:	1cfb      	adds	r3, r7, #3
   1915e:	781b      	ldrb	r3, [r3, #0]
   19160:	2201      	movs	r2, #1
   19162:	409a      	lsls	r2, r3
   19164:	0013      	movs	r3, r2
   19166:	400b      	ands	r3, r1
   19168:	1e5a      	subs	r2, r3, #1
   1916a:	4193      	sbcs	r3, r2
   1916c:	b2db      	uxtb	r3, r3
}
   1916e:	0018      	movs	r0, r3
   19170:	46bd      	mov	sp, r7
   19172:	b004      	add	sp, #16
   19174:	bd80      	pop	{r7, pc}
	...

00019178 <ac_chan_get_status>:
 *  \return Bit mask of comparator channel status flags.
 */
static inline uint8_t ac_chan_get_status(
		struct ac_module *const module_inst,
		const enum ac_chan_channel channel)
{
   19178:	b580      	push	{r7, lr}
   1917a:	b084      	sub	sp, #16
   1917c:	af00      	add	r7, sp, #0
   1917e:	6078      	str	r0, [r7, #4]
   19180:	000a      	movs	r2, r1
   19182:	1cfb      	adds	r3, r7, #3
   19184:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Ac *const ac_module = module_inst->hw;
   19186:	687b      	ldr	r3, [r7, #4]
   19188:	681b      	ldr	r3, [r3, #0]
   1918a:	60bb      	str	r3, [r7, #8]

	uint8_t status_mask = 0;
   1918c:	230f      	movs	r3, #15
   1918e:	18fb      	adds	r3, r7, r3
   19190:	2200      	movs	r2, #0
   19192:	701a      	strb	r2, [r3, #0]

	if (ac_module->INTFLAG.reg & (1 << channel)) {
   19194:	68bb      	ldr	r3, [r7, #8]
   19196:	799b      	ldrb	r3, [r3, #6]
   19198:	b2db      	uxtb	r3, r3
   1919a:	001a      	movs	r2, r3
   1919c:	1cfb      	adds	r3, r7, #3
   1919e:	781b      	ldrb	r3, [r3, #0]
   191a0:	411a      	asrs	r2, r3
   191a2:	0013      	movs	r3, r2
   191a4:	2201      	movs	r2, #1
   191a6:	4013      	ands	r3, r2
   191a8:	d003      	beq.n	191b2 <ac_chan_get_status+0x3a>
		status_mask = AC_CHAN_STATUS_INTERRUPT_SET;
   191aa:	230f      	movs	r3, #15
   191ac:	18fb      	adds	r3, r7, r3
   191ae:	2208      	movs	r2, #8
   191b0:	701a      	strb	r2, [r3, #0]
	}

	if (ac_chan_is_ready(module_inst, channel) == false) {
   191b2:	1cfb      	adds	r3, r7, #3
   191b4:	781a      	ldrb	r2, [r3, #0]
   191b6:	687b      	ldr	r3, [r7, #4]
   191b8:	0011      	movs	r1, r2
   191ba:	0018      	movs	r0, r3
   191bc:	4b1b      	ldr	r3, [pc, #108]	; (1922c <ac_chan_get_status+0xb4>)
   191be:	4798      	blx	r3
   191c0:	0003      	movs	r3, r0
   191c2:	001a      	movs	r2, r3
   191c4:	2301      	movs	r3, #1
   191c6:	4053      	eors	r3, r2
   191c8:	b2db      	uxtb	r3, r3
   191ca:	2b00      	cmp	r3, #0
   191cc:	d00b      	beq.n	191e6 <ac_chan_get_status+0x6e>
		status_mask |= AC_CHAN_STATUS_UNKNOWN;
   191ce:	230f      	movs	r3, #15
   191d0:	18fb      	adds	r3, r7, r3
   191d2:	220f      	movs	r2, #15
   191d4:	18ba      	adds	r2, r7, r2
   191d6:	7812      	ldrb	r2, [r2, #0]
   191d8:	2101      	movs	r1, #1
   191da:	430a      	orrs	r2, r1
   191dc:	701a      	strb	r2, [r3, #0]
		return status_mask;
   191de:	230f      	movs	r3, #15
   191e0:	18fb      	adds	r3, r7, r3
   191e2:	781b      	ldrb	r3, [r3, #0]
   191e4:	e01e      	b.n	19224 <ac_chan_get_status+0xac>
	}

	if (ac_module->STATUSA.reg & (AC_STATUSA_STATE0 << (uint8_t)channel)) {
   191e6:	68bb      	ldr	r3, [r7, #8]
   191e8:	7a1b      	ldrb	r3, [r3, #8]
   191ea:	b2db      	uxtb	r3, r3
   191ec:	001a      	movs	r2, r3
   191ee:	1cfb      	adds	r3, r7, #3
   191f0:	781b      	ldrb	r3, [r3, #0]
   191f2:	411a      	asrs	r2, r3
   191f4:	0013      	movs	r3, r2
   191f6:	2201      	movs	r2, #1
   191f8:	4013      	ands	r3, r2
   191fa:	d008      	beq.n	1920e <ac_chan_get_status+0x96>
		status_mask |= AC_CHAN_STATUS_POS_ABOVE_NEG;
   191fc:	230f      	movs	r3, #15
   191fe:	18fb      	adds	r3, r7, r3
   19200:	220f      	movs	r2, #15
   19202:	18ba      	adds	r2, r7, r2
   19204:	7812      	ldrb	r2, [r2, #0]
   19206:	2104      	movs	r1, #4
   19208:	430a      	orrs	r2, r1
   1920a:	701a      	strb	r2, [r3, #0]
   1920c:	e007      	b.n	1921e <ac_chan_get_status+0xa6>
	} else {
		status_mask |= AC_CHAN_STATUS_NEG_ABOVE_POS;
   1920e:	230f      	movs	r3, #15
   19210:	18fb      	adds	r3, r7, r3
   19212:	220f      	movs	r2, #15
   19214:	18ba      	adds	r2, r7, r2
   19216:	7812      	ldrb	r2, [r2, #0]
   19218:	2102      	movs	r1, #2
   1921a:	430a      	orrs	r2, r1
   1921c:	701a      	strb	r2, [r3, #0]
	}
	return status_mask;
   1921e:	230f      	movs	r3, #15
   19220:	18fb      	adds	r3, r7, r3
   19222:	781b      	ldrb	r3, [r3, #0]
}
   19224:	0018      	movs	r0, r3
   19226:	46bd      	mov	sp, r7
   19228:	b004      	add	sp, #16
   1922a:	bd80      	pop	{r7, pc}
   1922c:	00019141 	.word	0x00019141

00019230 <system_interrupt_enable>:
{
   19230:	b580      	push	{r7, lr}
   19232:	b082      	sub	sp, #8
   19234:	af00      	add	r7, sp, #0
   19236:	0002      	movs	r2, r0
   19238:	1dfb      	adds	r3, r7, #7
   1923a:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   1923c:	4b06      	ldr	r3, [pc, #24]	; (19258 <system_interrupt_enable+0x28>)
   1923e:	1dfa      	adds	r2, r7, #7
   19240:	7812      	ldrb	r2, [r2, #0]
   19242:	0011      	movs	r1, r2
   19244:	221f      	movs	r2, #31
   19246:	400a      	ands	r2, r1
   19248:	2101      	movs	r1, #1
   1924a:	4091      	lsls	r1, r2
   1924c:	000a      	movs	r2, r1
   1924e:	601a      	str	r2, [r3, #0]
}
   19250:	46c0      	nop			; (mov r8, r8)
   19252:	46bd      	mov	sp, r7
   19254:	b002      	add	sp, #8
   19256:	bd80      	pop	{r7, pc}
   19258:	e000e100 	.word	0xe000e100

0001925c <ac_enable_callback>:
 * \param[in]     callback_type Callback type given by an enum
 */
static inline void ac_enable_callback(
		struct ac_module *const module,
		const enum ac_callback callback_type)
{
   1925c:	b580      	push	{r7, lr}
   1925e:	b084      	sub	sp, #16
   19260:	af00      	add	r7, sp, #0
   19262:	6078      	str	r0, [r7, #4]
   19264:	000a      	movs	r2, r1
   19266:	1cfb      	adds	r3, r7, #3
   19268:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

	/* Set software flag for the callback */
	module->enable_callback_mask |= (1 << callback_type);
   1926a:	687b      	ldr	r3, [r7, #4]
   1926c:	7e5b      	ldrb	r3, [r3, #25]
   1926e:	b25a      	sxtb	r2, r3
   19270:	1cfb      	adds	r3, r7, #3
   19272:	781b      	ldrb	r3, [r3, #0]
   19274:	2101      	movs	r1, #1
   19276:	4099      	lsls	r1, r3
   19278:	000b      	movs	r3, r1
   1927a:	b25b      	sxtb	r3, r3
   1927c:	4313      	orrs	r3, r2
   1927e:	b25b      	sxtb	r3, r3
   19280:	b2da      	uxtb	r2, r3
   19282:	687b      	ldr	r3, [r7, #4]
   19284:	765a      	strb	r2, [r3, #25]

	uint32_t inenset_temp = 0;
   19286:	2300      	movs	r3, #0
   19288:	60fb      	str	r3, [r7, #12]

	switch (callback_type)
   1928a:	1cfb      	adds	r3, r7, #3
   1928c:	781b      	ldrb	r3, [r3, #0]
   1928e:	2b01      	cmp	r3, #1
   19290:	d009      	beq.n	192a6 <ac_enable_callback+0x4a>
   19292:	2b04      	cmp	r3, #4
   19294:	d00c      	beq.n	192b0 <ac_enable_callback+0x54>
   19296:	2b00      	cmp	r3, #0
   19298:	d000      	beq.n	1929c <ac_enable_callback+0x40>
			inenset_temp |= AC_INTFLAG_WIN1;
			break;
#  endif
#endif
		default:
			break;
   1929a:	e00e      	b.n	192ba <ac_enable_callback+0x5e>
			inenset_temp |= AC_INTFLAG_COMP0;
   1929c:	68fb      	ldr	r3, [r7, #12]
   1929e:	2201      	movs	r2, #1
   192a0:	4313      	orrs	r3, r2
   192a2:	60fb      	str	r3, [r7, #12]
			break;
   192a4:	e009      	b.n	192ba <ac_enable_callback+0x5e>
			inenset_temp |= AC_INTFLAG_COMP1;
   192a6:	68fb      	ldr	r3, [r7, #12]
   192a8:	2202      	movs	r2, #2
   192aa:	4313      	orrs	r3, r2
   192ac:	60fb      	str	r3, [r7, #12]
			break;
   192ae:	e004      	b.n	192ba <ac_enable_callback+0x5e>
			inenset_temp |= AC_INTFLAG_WIN0;
   192b0:	68fb      	ldr	r3, [r7, #12]
   192b2:	2210      	movs	r2, #16
   192b4:	4313      	orrs	r3, r2
   192b6:	60fb      	str	r3, [r7, #12]
			break;
   192b8:	46c0      	nop			; (mov r8, r8)
	}

	/* Enable the interrupt for the callback */
	module->hw->INTENSET.reg = inenset_temp;
   192ba:	687b      	ldr	r3, [r7, #4]
   192bc:	681b      	ldr	r3, [r3, #0]
   192be:	68fa      	ldr	r2, [r7, #12]
   192c0:	b2d2      	uxtb	r2, r2
   192c2:	715a      	strb	r2, [r3, #5]

#if (AC_INST_NUM == 1)
	/* Enable interrupts for AC module */
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_AC);
   192c4:	2018      	movs	r0, #24
   192c6:	4b03      	ldr	r3, [pc, #12]	; (192d4 <ac_enable_callback+0x78>)
   192c8:	4798      	blx	r3
#elif (AC_INST_NUM > 1)
	system_interrupt_enable(_ac_interrupt_get_interrupt_vector(_ac_get_inst_index(module->hw)));
#endif /* (AC_INST_NUM > 1) */
}
   192ca:	46c0      	nop			; (mov r8, r8)
   192cc:	46bd      	mov	sp, r7
   192ce:	b004      	add	sp, #16
   192d0:	bd80      	pop	{r7, pc}
   192d2:	46c0      	nop			; (mov r8, r8)
   192d4:	00019231 	.word	0x00019231

000192d8 <system_pinmux_get_group_from_gpio_pin>:
{
   192d8:	b580      	push	{r7, lr}
   192da:	b084      	sub	sp, #16
   192dc:	af00      	add	r7, sp, #0
   192de:	0002      	movs	r2, r0
   192e0:	1dfb      	adds	r3, r7, #7
   192e2:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   192e4:	230f      	movs	r3, #15
   192e6:	18fb      	adds	r3, r7, r3
   192e8:	1dfa      	adds	r2, r7, #7
   192ea:	7812      	ldrb	r2, [r2, #0]
   192ec:	09d2      	lsrs	r2, r2, #7
   192ee:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   192f0:	230e      	movs	r3, #14
   192f2:	18fb      	adds	r3, r7, r3
   192f4:	1dfa      	adds	r2, r7, #7
   192f6:	7812      	ldrb	r2, [r2, #0]
   192f8:	0952      	lsrs	r2, r2, #5
   192fa:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   192fc:	4b0d      	ldr	r3, [pc, #52]	; (19334 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   192fe:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   19300:	230f      	movs	r3, #15
   19302:	18fb      	adds	r3, r7, r3
   19304:	781b      	ldrb	r3, [r3, #0]
   19306:	2b00      	cmp	r3, #0
   19308:	d10f      	bne.n	1932a <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   1930a:	230f      	movs	r3, #15
   1930c:	18fb      	adds	r3, r7, r3
   1930e:	781b      	ldrb	r3, [r3, #0]
   19310:	009b      	lsls	r3, r3, #2
   19312:	2210      	movs	r2, #16
   19314:	4694      	mov	ip, r2
   19316:	44bc      	add	ip, r7
   19318:	4463      	add	r3, ip
   1931a:	3b08      	subs	r3, #8
   1931c:	681a      	ldr	r2, [r3, #0]
   1931e:	230e      	movs	r3, #14
   19320:	18fb      	adds	r3, r7, r3
   19322:	781b      	ldrb	r3, [r3, #0]
   19324:	01db      	lsls	r3, r3, #7
   19326:	18d3      	adds	r3, r2, r3
   19328:	e000      	b.n	1932c <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   1932a:	2300      	movs	r3, #0
}
   1932c:	0018      	movs	r0, r3
   1932e:	46bd      	mov	sp, r7
   19330:	b004      	add	sp, #16
   19332:	bd80      	pop	{r7, pc}
   19334:	41004400 	.word	0x41004400

00019338 <adc_is_syncing>:
 * \retval true if the module synchronization is ongoing
 * \retval false if the module has completed synchronization
 */
static inline bool adc_is_syncing(
	struct adc_module *const module_inst)
{
   19338:	b580      	push	{r7, lr}
   1933a:	b084      	sub	sp, #16
   1933c:	af00      	add	r7, sp, #0
   1933e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
   19340:	687b      	ldr	r3, [r7, #4]
   19342:	681b      	ldr	r3, [r3, #0]
   19344:	60fb      	str	r3, [r7, #12]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
   19346:	68fb      	ldr	r3, [r7, #12]
   19348:	7e5b      	ldrb	r3, [r3, #25]
   1934a:	b2db      	uxtb	r3, r3
   1934c:	b25b      	sxtb	r3, r3
   1934e:	2b00      	cmp	r3, #0
   19350:	da01      	bge.n	19356 <adc_is_syncing+0x1e>
		return true;
   19352:	2301      	movs	r3, #1
   19354:	e000      	b.n	19358 <adc_is_syncing+0x20>
	}

	return false;
   19356:	2300      	movs	r3, #0
}
   19358:	0018      	movs	r0, r3
   1935a:	46bd      	mov	sp, r7
   1935c:	b004      	add	sp, #16
   1935e:	bd80      	pop	{r7, pc}

00019360 <adc_get_status>:
 *                                  window range
 * \retval ADC_STATUS_OVERRUN       ADC result has overrun
 */
static inline uint32_t adc_get_status(
		struct adc_module *const module_inst)
{
   19360:	b580      	push	{r7, lr}
   19362:	b086      	sub	sp, #24
   19364:	af00      	add	r7, sp, #0
   19366:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
   19368:	687b      	ldr	r3, [r7, #4]
   1936a:	681b      	ldr	r3, [r3, #0]
   1936c:	613b      	str	r3, [r7, #16]

	uint32_t int_flags = adc_module->INTFLAG.reg;
   1936e:	693b      	ldr	r3, [r7, #16]
   19370:	7e1b      	ldrb	r3, [r3, #24]
   19372:	b2db      	uxtb	r3, r3
   19374:	60fb      	str	r3, [r7, #12]

	uint32_t status_flags = 0;
   19376:	2300      	movs	r3, #0
   19378:	617b      	str	r3, [r7, #20]

	/* Check for ADC Result Ready */
	if (int_flags & ADC_INTFLAG_RESRDY) {
   1937a:	68fb      	ldr	r3, [r7, #12]
   1937c:	2201      	movs	r2, #1
   1937e:	4013      	ands	r3, r2
   19380:	d003      	beq.n	1938a <adc_get_status+0x2a>
		status_flags |= ADC_STATUS_RESULT_READY;
   19382:	697b      	ldr	r3, [r7, #20]
   19384:	2201      	movs	r2, #1
   19386:	4313      	orrs	r3, r2
   19388:	617b      	str	r3, [r7, #20]
	}

	/* Check for ADC Window Match */
	if (int_flags & ADC_INTFLAG_WINMON) {
   1938a:	68fb      	ldr	r3, [r7, #12]
   1938c:	2204      	movs	r2, #4
   1938e:	4013      	ands	r3, r2
   19390:	d003      	beq.n	1939a <adc_get_status+0x3a>
		status_flags |= ADC_STATUS_WINDOW;
   19392:	697b      	ldr	r3, [r7, #20]
   19394:	2202      	movs	r2, #2
   19396:	4313      	orrs	r3, r2
   19398:	617b      	str	r3, [r7, #20]
	}

	/* Check for ADC Overrun */
	if (int_flags & ADC_INTFLAG_OVERRUN) {
   1939a:	68fb      	ldr	r3, [r7, #12]
   1939c:	2202      	movs	r2, #2
   1939e:	4013      	ands	r3, r2
   193a0:	d003      	beq.n	193aa <adc_get_status+0x4a>
		status_flags |= ADC_STATUS_OVERRUN;
   193a2:	697b      	ldr	r3, [r7, #20]
   193a4:	2204      	movs	r2, #4
   193a6:	4313      	orrs	r3, r2
   193a8:	617b      	str	r3, [r7, #20]
	}

	return status_flags;
   193aa:	697b      	ldr	r3, [r7, #20]
}
   193ac:	0018      	movs	r0, r3
   193ae:	46bd      	mov	sp, r7
   193b0:	b006      	add	sp, #24
   193b2:	bd80      	pop	{r7, pc}

000193b4 <adc_clear_status>:
 * \param[in] status_flags  Bitmask of \c ADC_STATUS_* flags to clear
 */
static inline void adc_clear_status(
		struct adc_module *const module_inst,
		const uint32_t status_flags)
{
   193b4:	b580      	push	{r7, lr}
   193b6:	b084      	sub	sp, #16
   193b8:	af00      	add	r7, sp, #0
   193ba:	6078      	str	r0, [r7, #4]
   193bc:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
   193be:	687b      	ldr	r3, [r7, #4]
   193c0:	681b      	ldr	r3, [r3, #0]
   193c2:	60bb      	str	r3, [r7, #8]

	uint32_t int_flags = 0;
   193c4:	2300      	movs	r3, #0
   193c6:	60fb      	str	r3, [r7, #12]

	/* Check for ADC Result Ready */
	if (status_flags & ADC_STATUS_RESULT_READY) {
   193c8:	683b      	ldr	r3, [r7, #0]
   193ca:	2201      	movs	r2, #1
   193cc:	4013      	ands	r3, r2
   193ce:	d003      	beq.n	193d8 <adc_clear_status+0x24>
		int_flags |= ADC_INTFLAG_RESRDY;
   193d0:	68fb      	ldr	r3, [r7, #12]
   193d2:	2201      	movs	r2, #1
   193d4:	4313      	orrs	r3, r2
   193d6:	60fb      	str	r3, [r7, #12]
	}

	/* Check for ADC Window Match */
	if (status_flags & ADC_STATUS_WINDOW) {
   193d8:	683b      	ldr	r3, [r7, #0]
   193da:	2202      	movs	r2, #2
   193dc:	4013      	ands	r3, r2
   193de:	d003      	beq.n	193e8 <adc_clear_status+0x34>
		int_flags |= ADC_INTFLAG_WINMON;
   193e0:	68fb      	ldr	r3, [r7, #12]
   193e2:	2204      	movs	r2, #4
   193e4:	4313      	orrs	r3, r2
   193e6:	60fb      	str	r3, [r7, #12]
	}

	/* Check for ADC Overrun */
	if (status_flags & ADC_STATUS_OVERRUN) {
   193e8:	683b      	ldr	r3, [r7, #0]
   193ea:	2204      	movs	r2, #4
   193ec:	4013      	ands	r3, r2
   193ee:	d003      	beq.n	193f8 <adc_clear_status+0x44>
		int_flags |= ADC_INTFLAG_OVERRUN;
   193f0:	68fb      	ldr	r3, [r7, #12]
   193f2:	2202      	movs	r2, #2
   193f4:	4313      	orrs	r3, r2
   193f6:	60fb      	str	r3, [r7, #12]
	}

	/* Clear interrupt flag */
	adc_module->INTFLAG.reg = int_flags;
   193f8:	68fb      	ldr	r3, [r7, #12]
   193fa:	b2da      	uxtb	r2, r3
   193fc:	68bb      	ldr	r3, [r7, #8]
   193fe:	761a      	strb	r2, [r3, #24]
}
   19400:	46c0      	nop			; (mov r8, r8)
   19402:	46bd      	mov	sp, r7
   19404:	b004      	add	sp, #16
   19406:	bd80      	pop	{r7, pc}

00019408 <adc_enable>:
 *
 * \param[in] module_inst  Pointer to the ADC software instance struct
 */
static inline enum status_code adc_enable(
		struct adc_module *const module_inst)
{
   19408:	b580      	push	{r7, lr}
   1940a:	b084      	sub	sp, #16
   1940c:	af00      	add	r7, sp, #0
   1940e:	6078      	str	r0, [r7, #4]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
   19410:	687b      	ldr	r3, [r7, #4]
   19412:	681b      	ldr	r3, [r3, #0]
   19414:	60fb      	str	r3, [r7, #12]

	while (adc_is_syncing(module_inst)) {
   19416:	46c0      	nop			; (mov r8, r8)
   19418:	687b      	ldr	r3, [r7, #4]
   1941a:	0018      	movs	r0, r3
   1941c:	4b10      	ldr	r3, [pc, #64]	; (19460 <adc_enable+0x58>)
   1941e:	4798      	blx	r3
   19420:	1e03      	subs	r3, r0, #0
   19422:	d1f9      	bne.n	19418 <adc_enable+0x10>
	system_interrupt_enable(_adc_interrupt_get_interrupt_vector(
			_adc_get_inst_index(adc_module)));
#   elif (SAMC20)
		system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_ADC0);
#	else
		system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_ADC);
   19424:	2017      	movs	r0, #23
   19426:	4b0f      	ldr	r3, [pc, #60]	; (19464 <adc_enable+0x5c>)
   19428:	4798      	blx	r3
#   endif
#endif

	/* Disbale interrupt */
	adc_module->INTENCLR.reg = ADC_INTENCLR_MASK;
   1942a:	68fb      	ldr	r3, [r7, #12]
   1942c:	220f      	movs	r2, #15
   1942e:	759a      	strb	r2, [r3, #22]
	/* Clear interrupt flag */
	adc_module->INTFLAG.reg = ADC_INTFLAG_MASK;
   19430:	68fb      	ldr	r3, [r7, #12]
   19432:	220f      	movs	r2, #15
   19434:	761a      	strb	r2, [r3, #24]

	adc_module->CTRLA.reg |= ADC_CTRLA_ENABLE;
   19436:	68fb      	ldr	r3, [r7, #12]
   19438:	781b      	ldrb	r3, [r3, #0]
   1943a:	b2db      	uxtb	r3, r3
   1943c:	2202      	movs	r2, #2
   1943e:	4313      	orrs	r3, r2
   19440:	b2da      	uxtb	r2, r3
   19442:	68fb      	ldr	r3, [r7, #12]
   19444:	701a      	strb	r2, [r3, #0]

	while (adc_is_syncing(module_inst)) {
   19446:	46c0      	nop			; (mov r8, r8)
   19448:	687b      	ldr	r3, [r7, #4]
   1944a:	0018      	movs	r0, r3
   1944c:	4b04      	ldr	r3, [pc, #16]	; (19460 <adc_enable+0x58>)
   1944e:	4798      	blx	r3
   19450:	1e03      	subs	r3, r0, #0
   19452:	d1f9      	bne.n	19448 <adc_enable+0x40>
		/* Wait for synchronization */
	}
	return STATUS_OK;
   19454:	2300      	movs	r3, #0
}
   19456:	0018      	movs	r0, r3
   19458:	46bd      	mov	sp, r7
   1945a:	b004      	add	sp, #16
   1945c:	bd80      	pop	{r7, pc}
   1945e:	46c0      	nop			; (mov r8, r8)
   19460:	00019339 	.word	0x00019339
   19464:	00019231 	.word	0x00019231

00019468 <adc_start_conversion>:
 *
 * \param[in] module_inst  Pointer to the ADC software instance struct
 */
static inline void adc_start_conversion(
		struct adc_module *const module_inst)
{
   19468:	b580      	push	{r7, lr}
   1946a:	b084      	sub	sp, #16
   1946c:	af00      	add	r7, sp, #0
   1946e:	6078      	str	r0, [r7, #4]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
   19470:	687b      	ldr	r3, [r7, #4]
   19472:	681b      	ldr	r3, [r3, #0]
   19474:	60fb      	str	r3, [r7, #12]

	while (adc_is_syncing(module_inst)) {
   19476:	46c0      	nop			; (mov r8, r8)
   19478:	687b      	ldr	r3, [r7, #4]
   1947a:	0018      	movs	r0, r3
   1947c:	4b0b      	ldr	r3, [pc, #44]	; (194ac <adc_start_conversion+0x44>)
   1947e:	4798      	blx	r3
   19480:	1e03      	subs	r3, r0, #0
   19482:	d1f9      	bne.n	19478 <adc_start_conversion+0x10>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
   19484:	68fb      	ldr	r3, [r7, #12]
   19486:	7b1b      	ldrb	r3, [r3, #12]
   19488:	b2db      	uxtb	r3, r3
   1948a:	2202      	movs	r2, #2
   1948c:	4313      	orrs	r3, r2
   1948e:	b2da      	uxtb	r2, r3
   19490:	68fb      	ldr	r3, [r7, #12]
   19492:	731a      	strb	r2, [r3, #12]

	while (adc_is_syncing(module_inst)) {
   19494:	46c0      	nop			; (mov r8, r8)
   19496:	687b      	ldr	r3, [r7, #4]
   19498:	0018      	movs	r0, r3
   1949a:	4b04      	ldr	r3, [pc, #16]	; (194ac <adc_start_conversion+0x44>)
   1949c:	4798      	blx	r3
   1949e:	1e03      	subs	r3, r0, #0
   194a0:	d1f9      	bne.n	19496 <adc_start_conversion+0x2e>
		/* Wait for synchronization */
	}
}
   194a2:	46c0      	nop			; (mov r8, r8)
   194a4:	46bd      	mov	sp, r7
   194a6:	b004      	add	sp, #16
   194a8:	bd80      	pop	{r7, pc}
   194aa:	46c0      	nop			; (mov r8, r8)
   194ac:	00019339 	.word	0x00019339

000194b0 <adc_read>:
 *                             ADC module before the result was read by the software
 */
static inline enum status_code adc_read(
		struct adc_module *const module_inst,
		uint16_t *result)
{
   194b0:	b580      	push	{r7, lr}
   194b2:	b084      	sub	sp, #16
   194b4:	af00      	add	r7, sp, #0
   194b6:	6078      	str	r0, [r7, #4]
   194b8:	6039      	str	r1, [r7, #0]
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(result);

	if (!(adc_get_status(module_inst) & ADC_STATUS_RESULT_READY)) {
   194ba:	687b      	ldr	r3, [r7, #4]
   194bc:	0018      	movs	r0, r3
   194be:	4b18      	ldr	r3, [pc, #96]	; (19520 <adc_read+0x70>)
   194c0:	4798      	blx	r3
   194c2:	0002      	movs	r2, r0
   194c4:	2301      	movs	r3, #1
   194c6:	4013      	ands	r3, r2
   194c8:	d101      	bne.n	194ce <adc_read+0x1e>
		/* Result not ready */
		return STATUS_BUSY;
   194ca:	2305      	movs	r3, #5
   194cc:	e023      	b.n	19516 <adc_read+0x66>
	}

	Adc *const adc_module = module_inst->hw;
   194ce:	687b      	ldr	r3, [r7, #4]
   194d0:	681b      	ldr	r3, [r3, #0]
   194d2:	60fb      	str	r3, [r7, #12]

#if (SAMD) || (SAMHA1) || (SAMHA0) || (SAMR21)
	while (adc_is_syncing(module_inst)) {
   194d4:	46c0      	nop			; (mov r8, r8)
   194d6:	687b      	ldr	r3, [r7, #4]
   194d8:	0018      	movs	r0, r3
   194da:	4b12      	ldr	r3, [pc, #72]	; (19524 <adc_read+0x74>)
   194dc:	4798      	blx	r3
   194de:	1e03      	subs	r3, r0, #0
   194e0:	d1f9      	bne.n	194d6 <adc_read+0x26>
		/* Wait for synchronization */
	}
#endif

	/* Get ADC result */
	*result = adc_module->RESULT.reg;
   194e2:	68fb      	ldr	r3, [r7, #12]
   194e4:	8b5b      	ldrh	r3, [r3, #26]
   194e6:	b29a      	uxth	r2, r3
   194e8:	683b      	ldr	r3, [r7, #0]
   194ea:	801a      	strh	r2, [r3, #0]

	/* Reset ready flag */
	adc_clear_status(module_inst, ADC_STATUS_RESULT_READY);
   194ec:	687b      	ldr	r3, [r7, #4]
   194ee:	2101      	movs	r1, #1
   194f0:	0018      	movs	r0, r3
   194f2:	4b0d      	ldr	r3, [pc, #52]	; (19528 <adc_read+0x78>)
   194f4:	4798      	blx	r3

	if (adc_get_status(module_inst) & ADC_STATUS_OVERRUN) {
   194f6:	687b      	ldr	r3, [r7, #4]
   194f8:	0018      	movs	r0, r3
   194fa:	4b09      	ldr	r3, [pc, #36]	; (19520 <adc_read+0x70>)
   194fc:	4798      	blx	r3
   194fe:	0002      	movs	r2, r0
   19500:	2304      	movs	r3, #4
   19502:	4013      	ands	r3, r2
   19504:	d006      	beq.n	19514 <adc_read+0x64>
		adc_clear_status(module_inst, ADC_STATUS_OVERRUN);
   19506:	687b      	ldr	r3, [r7, #4]
   19508:	2104      	movs	r1, #4
   1950a:	0018      	movs	r0, r3
   1950c:	4b06      	ldr	r3, [pc, #24]	; (19528 <adc_read+0x78>)
   1950e:	4798      	blx	r3
		return STATUS_ERR_OVERFLOW;
   19510:	231e      	movs	r3, #30
   19512:	e000      	b.n	19516 <adc_read+0x66>
	}

	return STATUS_OK;
   19514:	2300      	movs	r3, #0
}
   19516:	0018      	movs	r0, r3
   19518:	46bd      	mov	sp, r7
   1951a:	b004      	add	sp, #16
   1951c:	bd80      	pop	{r7, pc}
   1951e:	46c0      	nop			; (mov r8, r8)
   19520:	00019361 	.word	0x00019361
   19524:	00019339 	.word	0x00019339
   19528:	000193b5 	.word	0x000193b5

0001952c <adc_set_positive_input>:
 * \param[in] positive_input  Positive input pin
 */
static inline void adc_set_positive_input(
		struct adc_module *const module_inst,
		const enum adc_positive_input positive_input)
{
   1952c:	b580      	push	{r7, lr}
   1952e:	b084      	sub	sp, #16
   19530:	af00      	add	r7, sp, #0
   19532:	6078      	str	r0, [r7, #4]
   19534:	000a      	movs	r2, r1
   19536:	1cfb      	adds	r3, r7, #3
   19538:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
   1953a:	687b      	ldr	r3, [r7, #4]
   1953c:	681b      	ldr	r3, [r3, #0]
   1953e:	60fb      	str	r3, [r7, #12]

	while (adc_is_syncing(module_inst)) {
   19540:	46c0      	nop			; (mov r8, r8)
   19542:	687b      	ldr	r3, [r7, #4]
   19544:	0018      	movs	r0, r3
   19546:	4b0c      	ldr	r3, [pc, #48]	; (19578 <adc_set_positive_input+0x4c>)
   19548:	4798      	blx	r3
   1954a:	1e03      	subs	r3, r0, #0
   1954c:	d1f9      	bne.n	19542 <adc_set_positive_input+0x16>
		/* Wait for synchronization */
	}

	/* Set positive input pin */
	adc_module->INPUTCTRL.reg =
			(adc_module->INPUTCTRL.reg & ~ADC_INPUTCTRL_MUXPOS_Msk) |
   1954e:	68fb      	ldr	r3, [r7, #12]
   19550:	691b      	ldr	r3, [r3, #16]
   19552:	221f      	movs	r2, #31
   19554:	4393      	bics	r3, r2
   19556:	001a      	movs	r2, r3
   19558:	1cfb      	adds	r3, r7, #3
   1955a:	781b      	ldrb	r3, [r3, #0]
   1955c:	431a      	orrs	r2, r3
	adc_module->INPUTCTRL.reg =
   1955e:	68fb      	ldr	r3, [r7, #12]
   19560:	611a      	str	r2, [r3, #16]
			(positive_input);

	while (adc_is_syncing(module_inst)) {
   19562:	46c0      	nop			; (mov r8, r8)
   19564:	687b      	ldr	r3, [r7, #4]
   19566:	0018      	movs	r0, r3
   19568:	4b03      	ldr	r3, [pc, #12]	; (19578 <adc_set_positive_input+0x4c>)
   1956a:	4798      	blx	r3
   1956c:	1e03      	subs	r3, r0, #0
   1956e:	d1f9      	bne.n	19564 <adc_set_positive_input+0x38>
		/* Wait for synchronization */
	}
}
   19570:	46c0      	nop			; (mov r8, r8)
   19572:	46bd      	mov	sp, r7
   19574:	b004      	add	sp, #16
   19576:	bd80      	pop	{r7, pc}
   19578:	00019339 	.word	0x00019339

0001957c <adc_enable_interrupt>:
 * \param[in] module_inst Pointer to the ADC software instance struct
 * \param[in] interrupt Interrupt to enable
 */
static inline void adc_enable_interrupt(struct adc_module *const module_inst,
		enum adc_interrupt_flag interrupt)
{
   1957c:	b580      	push	{r7, lr}
   1957e:	b084      	sub	sp, #16
   19580:	af00      	add	r7, sp, #0
   19582:	6078      	str	r0, [r7, #4]
   19584:	000a      	movs	r2, r1
   19586:	1cfb      	adds	r3, r7, #3
   19588:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
   1958a:	687b      	ldr	r3, [r7, #4]
   1958c:	681b      	ldr	r3, [r3, #0]
   1958e:	60fb      	str	r3, [r7, #12]
	/* Enable interrupt */
	adc_module->INTENSET.reg = interrupt;
   19590:	68fb      	ldr	r3, [r7, #12]
   19592:	1cfa      	adds	r2, r7, #3
   19594:	7812      	ldrb	r2, [r2, #0]
   19596:	75da      	strb	r2, [r3, #23]
}
   19598:	46c0      	nop			; (mov r8, r8)
   1959a:	46bd      	mov	sp, r7
   1959c:	b004      	add	sp, #16
   1959e:	bd80      	pop	{r7, pc}

000195a0 <adc_enable_callback>:
 *
 */
static inline void adc_enable_callback(
		struct adc_module *const module,
		enum adc_callback callback_type)
{
   195a0:	b580      	push	{r7, lr}
   195a2:	b082      	sub	sp, #8
   195a4:	af00      	add	r7, sp, #0
   195a6:	6078      	str	r0, [r7, #4]
   195a8:	000a      	movs	r2, r1
   195aa:	1cfb      	adds	r3, r7, #3
   195ac:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->enabled_callback_mask |= (1 << callback_type);
   195ae:	687b      	ldr	r3, [r7, #4]
   195b0:	7edb      	ldrb	r3, [r3, #27]
   195b2:	b25a      	sxtb	r2, r3
   195b4:	1cfb      	adds	r3, r7, #3
   195b6:	781b      	ldrb	r3, [r3, #0]
   195b8:	2101      	movs	r1, #1
   195ba:	4099      	lsls	r1, r3
   195bc:	000b      	movs	r3, r1
   195be:	b25b      	sxtb	r3, r3
   195c0:	4313      	orrs	r3, r2
   195c2:	b25b      	sxtb	r3, r3
   195c4:	b2da      	uxtb	r2, r3
   195c6:	687b      	ldr	r3, [r7, #4]
   195c8:	76da      	strb	r2, [r3, #27]

	/* Enable window interrupt if this is a window callback */
	if (callback_type == ADC_CALLBACK_WINDOW) {
   195ca:	1cfb      	adds	r3, r7, #3
   195cc:	781b      	ldrb	r3, [r3, #0]
   195ce:	2b01      	cmp	r3, #1
   195d0:	d104      	bne.n	195dc <adc_enable_callback+0x3c>
		adc_enable_interrupt(module, ADC_INTERRUPT_WINDOW);
   195d2:	687b      	ldr	r3, [r7, #4]
   195d4:	2104      	movs	r1, #4
   195d6:	0018      	movs	r0, r3
   195d8:	4b07      	ldr	r3, [pc, #28]	; (195f8 <adc_enable_callback+0x58>)
   195da:	4798      	blx	r3
	}
	/* Enable overrun interrupt if error callback is registered */
	if (callback_type == ADC_CALLBACK_ERROR) {
   195dc:	1cfb      	adds	r3, r7, #3
   195de:	781b      	ldrb	r3, [r3, #0]
   195e0:	2b02      	cmp	r3, #2
   195e2:	d104      	bne.n	195ee <adc_enable_callback+0x4e>
		adc_enable_interrupt(module, ADC_INTERRUPT_OVERRUN);
   195e4:	687b      	ldr	r3, [r7, #4]
   195e6:	2102      	movs	r1, #2
   195e8:	0018      	movs	r0, r3
   195ea:	4b03      	ldr	r3, [pc, #12]	; (195f8 <adc_enable_callback+0x58>)
   195ec:	4798      	blx	r3
	}
}
   195ee:	46c0      	nop			; (mov r8, r8)
   195f0:	46bd      	mov	sp, r7
   195f2:	b002      	add	sp, #8
   195f4:	bd80      	pop	{r7, pc}
   195f6:	46c0      	nop			; (mov r8, r8)
   195f8:	0001957d 	.word	0x0001957d

000195fc <port_get_group_from_gpio_pin>:
{
   195fc:	b580      	push	{r7, lr}
   195fe:	b082      	sub	sp, #8
   19600:	af00      	add	r7, sp, #0
   19602:	0002      	movs	r2, r0
   19604:	1dfb      	adds	r3, r7, #7
   19606:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   19608:	1dfb      	adds	r3, r7, #7
   1960a:	781b      	ldrb	r3, [r3, #0]
   1960c:	0018      	movs	r0, r3
   1960e:	4b03      	ldr	r3, [pc, #12]	; (1961c <port_get_group_from_gpio_pin+0x20>)
   19610:	4798      	blx	r3
   19612:	0003      	movs	r3, r0
}
   19614:	0018      	movs	r0, r3
   19616:	46bd      	mov	sp, r7
   19618:	b002      	add	sp, #8
   1961a:	bd80      	pop	{r7, pc}
   1961c:	000192d9 	.word	0x000192d9

00019620 <port_get_config_defaults>:
{
   19620:	b580      	push	{r7, lr}
   19622:	b082      	sub	sp, #8
   19624:	af00      	add	r7, sp, #0
   19626:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
   19628:	687b      	ldr	r3, [r7, #4]
   1962a:	2200      	movs	r2, #0
   1962c:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   1962e:	687b      	ldr	r3, [r7, #4]
   19630:	2201      	movs	r2, #1
   19632:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
   19634:	687b      	ldr	r3, [r7, #4]
   19636:	2200      	movs	r2, #0
   19638:	709a      	strb	r2, [r3, #2]
}
   1963a:	46c0      	nop			; (mov r8, r8)
   1963c:	46bd      	mov	sp, r7
   1963e:	b002      	add	sp, #8
   19640:	bd80      	pop	{r7, pc}
	...

00019644 <port_pin_get_input_level>:
{
   19644:	b580      	push	{r7, lr}
   19646:	b084      	sub	sp, #16
   19648:	af00      	add	r7, sp, #0
   1964a:	0002      	movs	r2, r0
   1964c:	1dfb      	adds	r3, r7, #7
   1964e:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   19650:	1dfb      	adds	r3, r7, #7
   19652:	781b      	ldrb	r3, [r3, #0]
   19654:	0018      	movs	r0, r3
   19656:	4b0b      	ldr	r3, [pc, #44]	; (19684 <port_pin_get_input_level+0x40>)
   19658:	4798      	blx	r3
   1965a:	0003      	movs	r3, r0
   1965c:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   1965e:	1dfb      	adds	r3, r7, #7
   19660:	781b      	ldrb	r3, [r3, #0]
   19662:	221f      	movs	r2, #31
   19664:	4013      	ands	r3, r2
   19666:	2201      	movs	r2, #1
   19668:	409a      	lsls	r2, r3
   1966a:	0013      	movs	r3, r2
   1966c:	60bb      	str	r3, [r7, #8]
	return (port_base->IN.reg & pin_mask);
   1966e:	68fb      	ldr	r3, [r7, #12]
   19670:	6a1b      	ldr	r3, [r3, #32]
   19672:	68ba      	ldr	r2, [r7, #8]
   19674:	4013      	ands	r3, r2
   19676:	1e5a      	subs	r2, r3, #1
   19678:	4193      	sbcs	r3, r2
   1967a:	b2db      	uxtb	r3, r3
}
   1967c:	0018      	movs	r0, r3
   1967e:	46bd      	mov	sp, r7
   19680:	b004      	add	sp, #16
   19682:	bd80      	pop	{r7, pc}
   19684:	000195fd 	.word	0x000195fd

00019688 <port_pin_set_output_level>:
{
   19688:	b580      	push	{r7, lr}
   1968a:	b084      	sub	sp, #16
   1968c:	af00      	add	r7, sp, #0
   1968e:	0002      	movs	r2, r0
   19690:	1dfb      	adds	r3, r7, #7
   19692:	701a      	strb	r2, [r3, #0]
   19694:	1dbb      	adds	r3, r7, #6
   19696:	1c0a      	adds	r2, r1, #0
   19698:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   1969a:	1dfb      	adds	r3, r7, #7
   1969c:	781b      	ldrb	r3, [r3, #0]
   1969e:	0018      	movs	r0, r3
   196a0:	4b0d      	ldr	r3, [pc, #52]	; (196d8 <port_pin_set_output_level+0x50>)
   196a2:	4798      	blx	r3
   196a4:	0003      	movs	r3, r0
   196a6:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   196a8:	1dfb      	adds	r3, r7, #7
   196aa:	781b      	ldrb	r3, [r3, #0]
   196ac:	221f      	movs	r2, #31
   196ae:	4013      	ands	r3, r2
   196b0:	2201      	movs	r2, #1
   196b2:	409a      	lsls	r2, r3
   196b4:	0013      	movs	r3, r2
   196b6:	60bb      	str	r3, [r7, #8]
	if (level) {
   196b8:	1dbb      	adds	r3, r7, #6
   196ba:	781b      	ldrb	r3, [r3, #0]
   196bc:	2b00      	cmp	r3, #0
   196be:	d003      	beq.n	196c8 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   196c0:	68fb      	ldr	r3, [r7, #12]
   196c2:	68ba      	ldr	r2, [r7, #8]
   196c4:	619a      	str	r2, [r3, #24]
}
   196c6:	e002      	b.n	196ce <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   196c8:	68fb      	ldr	r3, [r7, #12]
   196ca:	68ba      	ldr	r2, [r7, #8]
   196cc:	615a      	str	r2, [r3, #20]
}
   196ce:	46c0      	nop			; (mov r8, r8)
   196d0:	46bd      	mov	sp, r7
   196d2:	b004      	add	sp, #16
   196d4:	bd80      	pop	{r7, pc}
   196d6:	46c0      	nop			; (mov r8, r8)
   196d8:	000195fd 	.word	0x000195fd

000196dc <_extint_get_eic_from_channel>:
 *
 * \return Base address of the associated EIC module.
 */
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
   196dc:	b580      	push	{r7, lr}
   196de:	b084      	sub	sp, #16
   196e0:	af00      	add	r7, sp, #0
   196e2:	0002      	movs	r2, r0
   196e4:	1dfb      	adds	r3, r7, #7
   196e6:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
   196e8:	230f      	movs	r3, #15
   196ea:	18fb      	adds	r3, r7, r3
   196ec:	1dfa      	adds	r2, r7, #7
   196ee:	7812      	ldrb	r2, [r2, #0]
   196f0:	0952      	lsrs	r2, r2, #5
   196f2:	701a      	strb	r2, [r3, #0]

	if (eic_index < EIC_INST_NUM) {
   196f4:	230f      	movs	r3, #15
   196f6:	18fb      	adds	r3, r7, r3
   196f8:	781b      	ldrb	r3, [r3, #0]
   196fa:	2b00      	cmp	r3, #0
   196fc:	d10c      	bne.n	19718 <_extint_get_eic_from_channel+0x3c>
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   196fe:	4b09      	ldr	r3, [pc, #36]	; (19724 <_extint_get_eic_from_channel+0x48>)
   19700:	60bb      	str	r3, [r7, #8]

		return eics[eic_index];
   19702:	230f      	movs	r3, #15
   19704:	18fb      	adds	r3, r7, r3
   19706:	781b      	ldrb	r3, [r3, #0]
   19708:	009b      	lsls	r3, r3, #2
   1970a:	2210      	movs	r2, #16
   1970c:	4694      	mov	ip, r2
   1970e:	44bc      	add	ip, r7
   19710:	4463      	add	r3, ip
   19712:	3b08      	subs	r3, #8
   19714:	681b      	ldr	r3, [r3, #0]
   19716:	e000      	b.n	1971a <_extint_get_eic_from_channel+0x3e>
	} else {
		Assert(false);
		return NULL;
   19718:	2300      	movs	r3, #0
	}
}
   1971a:	0018      	movs	r0, r3
   1971c:	46bd      	mov	sp, r7
   1971e:	b004      	add	sp, #16
   19720:	bd80      	pop	{r7, pc}
   19722:	46c0      	nop			; (mov r8, r8)
   19724:	40001800 	.word	0x40001800

00019728 <extint_chan_clear_detected>:
 *
 *  \param[in] channel  External Interrupt channel index to check
 */
static inline void extint_chan_clear_detected(
		const uint8_t channel)
{
   19728:	b580      	push	{r7, lr}
   1972a:	b084      	sub	sp, #16
   1972c:	af00      	add	r7, sp, #0
   1972e:	0002      	movs	r2, r0
   19730:	1dfb      	adds	r3, r7, #7
   19732:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
   19734:	1dfb      	adds	r3, r7, #7
   19736:	781b      	ldrb	r3, [r3, #0]
   19738:	0018      	movs	r0, r3
   1973a:	4b09      	ldr	r3, [pc, #36]	; (19760 <extint_chan_clear_detected+0x38>)
   1973c:	4798      	blx	r3
   1973e:	0003      	movs	r3, r0
   19740:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
   19742:	1dfb      	adds	r3, r7, #7
   19744:	781b      	ldrb	r3, [r3, #0]
   19746:	221f      	movs	r2, #31
   19748:	4013      	ands	r3, r2
   1974a:	2201      	movs	r2, #1
   1974c:	409a      	lsls	r2, r3
   1974e:	0013      	movs	r3, r2
   19750:	60bb      	str	r3, [r7, #8]

	eic_module->INTFLAG.reg = eic_mask;
   19752:	68fb      	ldr	r3, [r7, #12]
   19754:	68ba      	ldr	r2, [r7, #8]
   19756:	611a      	str	r2, [r3, #16]
}
   19758:	46c0      	nop			; (mov r8, r8)
   1975a:	46bd      	mov	sp, r7
   1975c:	b004      	add	sp, #16
   1975e:	bd80      	pop	{r7, pc}
   19760:	000196dd 	.word	0x000196dd

00019764 <readOverHeadWaterSensorState>:
simEventTemp[9]		: lost AC power in 1 phase						A
*/


void readOverHeadWaterSensorState(bool *olow,bool *ohigh)
{
   19764:	b580      	push	{r7, lr}
   19766:	b082      	sub	sp, #8
   19768:	af00      	add	r7, sp, #0
   1976a:	6078      	str	r0, [r7, #4]
   1976c:	6039      	str	r1, [r7, #0]
	*olow = port_pin_get_input_level(OVERHEAD_TANK_LL_PIN);
   1976e:	200d      	movs	r0, #13
   19770:	4b08      	ldr	r3, [pc, #32]	; (19794 <readOverHeadWaterSensorState+0x30>)
   19772:	4798      	blx	r3
   19774:	0003      	movs	r3, r0
   19776:	001a      	movs	r2, r3
   19778:	687b      	ldr	r3, [r7, #4]
   1977a:	701a      	strb	r2, [r3, #0]
	//*omid = port_pin_get_input_level(OVERHEAD_TANK_ML_PIN);
	*ohigh = port_pin_get_input_level(OVERHEAD_TANK_HL_PIN);
   1977c:	202f      	movs	r0, #47	; 0x2f
   1977e:	4b05      	ldr	r3, [pc, #20]	; (19794 <readOverHeadWaterSensorState+0x30>)
   19780:	4798      	blx	r3
   19782:	0003      	movs	r3, r0
   19784:	001a      	movs	r2, r3
   19786:	683b      	ldr	r3, [r7, #0]
   19788:	701a      	strb	r2, [r3, #0]
}
   1978a:	46c0      	nop			; (mov r8, r8)
   1978c:	46bd      	mov	sp, r7
   1978e:	b002      	add	sp, #8
   19790:	bd80      	pop	{r7, pc}
   19792:	46c0      	nop			; (mov r8, r8)
   19794:	00019645 	.word	0x00019645

00019798 <updateOverheadLevel>:

void updateOverheadLevel(uint8_t level)
{
   19798:	b580      	push	{r7, lr}
   1979a:	b082      	sub	sp, #8
   1979c:	af00      	add	r7, sp, #0
   1979e:	0002      	movs	r2, r0
   197a0:	1dfb      	adds	r3, r7, #7
   197a2:	701a      	strb	r2, [r3, #0]
	overheadLevel=level;
   197a4:	4b03      	ldr	r3, [pc, #12]	; (197b4 <updateOverheadLevel+0x1c>)
   197a6:	1dfa      	adds	r2, r7, #7
   197a8:	7812      	ldrb	r2, [r2, #0]
   197aa:	701a      	strb	r2, [r3, #0]
}
   197ac:	46c0      	nop			; (mov r8, r8)
   197ae:	46bd      	mov	sp, r7
   197b0:	b002      	add	sp, #8
   197b2:	bd80      	pop	{r7, pc}
   197b4:	20000990 	.word	0x20000990

000197b8 <getOverHeadWaterSensorState>:

uint8_t getOverHeadWaterSensorState(void)
{
   197b8:	b580      	push	{r7, lr}
   197ba:	b082      	sub	sp, #8
   197bc:	af00      	add	r7, sp, #0
	bool olow,omid,ohigh;
	readOverHeadWaterSensorState(&olow,&ohigh);
   197be:	1d7a      	adds	r2, r7, #5
   197c0:	1dbb      	adds	r3, r7, #6
   197c2:	0011      	movs	r1, r2
   197c4:	0018      	movs	r0, r3
   197c6:	4b11      	ldr	r3, [pc, #68]	; (1980c <getOverHeadWaterSensorState+0x54>)
   197c8:	4798      	blx	r3
	uint8_t ans=0;
   197ca:	1dfb      	adds	r3, r7, #7
   197cc:	2200      	movs	r2, #0
   197ce:	701a      	strb	r2, [r3, #0]
	if(!olow)
   197d0:	1dbb      	adds	r3, r7, #6
   197d2:	781b      	ldrb	r3, [r3, #0]
   197d4:	2201      	movs	r2, #1
   197d6:	4053      	eors	r3, r2
   197d8:	b2db      	uxtb	r3, r3
   197da:	2b00      	cmp	r3, #0
   197dc:	d010      	beq.n	19800 <getOverHeadWaterSensorState+0x48>
	{
		ans++;
   197de:	1dfb      	adds	r3, r7, #7
   197e0:	781a      	ldrb	r2, [r3, #0]
   197e2:	1dfb      	adds	r3, r7, #7
   197e4:	3201      	adds	r2, #1
   197e6:	701a      	strb	r2, [r3, #0]
		//if(!omid)
		{
			//ans++;
			if (!ohigh)
   197e8:	1d7b      	adds	r3, r7, #5
   197ea:	781b      	ldrb	r3, [r3, #0]
   197ec:	2201      	movs	r2, #1
   197ee:	4053      	eors	r3, r2
   197f0:	b2db      	uxtb	r3, r3
   197f2:	2b00      	cmp	r3, #0
   197f4:	d004      	beq.n	19800 <getOverHeadWaterSensorState+0x48>
			{
				ans++;
   197f6:	1dfb      	adds	r3, r7, #7
   197f8:	781a      	ldrb	r2, [r3, #0]
   197fa:	1dfb      	adds	r3, r7, #7
   197fc:	3201      	adds	r2, #1
   197fe:	701a      	strb	r2, [r3, #0]
			}
		}
	}
	return ans;
   19800:	1dfb      	adds	r3, r7, #7
   19802:	781b      	ldrb	r3, [r3, #0]
}
   19804:	0018      	movs	r0, r3
   19806:	46bd      	mov	sp, r7
   19808:	b002      	add	sp, #8
   1980a:	bd80      	pop	{r7, pc}
   1980c:	00019765 	.word	0x00019765

00019810 <overHeadWaterStatusOnCall>:

void overHeadWaterStatusOnCall(bool current)
{
   19810:	b590      	push	{r4, r7, lr}
   19812:	b085      	sub	sp, #20
   19814:	af00      	add	r7, sp, #0
   19816:	0002      	movs	r2, r0
   19818:	1dfb      	adds	r3, r7, #7
   1981a:	701a      	strb	r2, [r3, #0]
	uint8_t temp = getOverHeadWaterSensorState();
   1981c:	230f      	movs	r3, #15
   1981e:	18fc      	adds	r4, r7, r3
   19820:	4b15      	ldr	r3, [pc, #84]	; (19878 <overHeadWaterStatusOnCall+0x68>)
   19822:	4798      	blx	r3
   19824:	0003      	movs	r3, r0
   19826:	7023      	strb	r3, [r4, #0]
	if(current)
   19828:	1dfb      	adds	r3, r7, #7
   1982a:	781b      	ldrb	r3, [r3, #0]
   1982c:	2b00      	cmp	r3, #0
   1982e:	d004      	beq.n	1983a <overHeadWaterStatusOnCall+0x2a>
	temp = overheadLevel;
   19830:	230f      	movs	r3, #15
   19832:	18fb      	adds	r3, r7, r3
   19834:	4a11      	ldr	r2, [pc, #68]	; (1987c <overHeadWaterStatusOnCall+0x6c>)
   19836:	7812      	ldrb	r2, [r2, #0]
   19838:	701a      	strb	r2, [r3, #0]
	if(temp == OVERHEADHIGHLEVEL)
   1983a:	230f      	movs	r3, #15
   1983c:	18fb      	adds	r3, r7, r3
   1983e:	781b      	ldrb	r3, [r3, #0]
   19840:	2b02      	cmp	r3, #2
   19842:	d103      	bne.n	1984c <overHeadWaterStatusOnCall+0x3c>
	{
		setMotorMGRResponse('V');
   19844:	2056      	movs	r0, #86	; 0x56
   19846:	4b0e      	ldr	r3, [pc, #56]	; (19880 <overHeadWaterStatusOnCall+0x70>)
   19848:	4798      	blx	r3
	}
	else if (temp == OVERHEADCRITICALLEVEL)
	{
		setMotorMGRResponse('W');
	}
}
   1984a:	e010      	b.n	1986e <overHeadWaterStatusOnCall+0x5e>
	else if(temp == OVERHEADMIDLEVEL)
   1984c:	230f      	movs	r3, #15
   1984e:	18fb      	adds	r3, r7, r3
   19850:	781b      	ldrb	r3, [r3, #0]
   19852:	2b01      	cmp	r3, #1
   19854:	d103      	bne.n	1985e <overHeadWaterStatusOnCall+0x4e>
		setMotorMGRResponse('X');
   19856:	2058      	movs	r0, #88	; 0x58
   19858:	4b09      	ldr	r3, [pc, #36]	; (19880 <overHeadWaterStatusOnCall+0x70>)
   1985a:	4798      	blx	r3
}
   1985c:	e007      	b.n	1986e <overHeadWaterStatusOnCall+0x5e>
	else if (temp == OVERHEADCRITICALLEVEL)
   1985e:	230f      	movs	r3, #15
   19860:	18fb      	adds	r3, r7, r3
   19862:	781b      	ldrb	r3, [r3, #0]
   19864:	2b00      	cmp	r3, #0
   19866:	d102      	bne.n	1986e <overHeadWaterStatusOnCall+0x5e>
		setMotorMGRResponse('W');
   19868:	2057      	movs	r0, #87	; 0x57
   1986a:	4b05      	ldr	r3, [pc, #20]	; (19880 <overHeadWaterStatusOnCall+0x70>)
   1986c:	4798      	blx	r3
}
   1986e:	46c0      	nop			; (mov r8, r8)
   19870:	46bd      	mov	sp, r7
   19872:	b005      	add	sp, #20
   19874:	bd90      	pop	{r4, r7, pc}
   19876:	46c0      	nop			; (mov r8, r8)
   19878:	000197b9 	.word	0x000197b9
   1987c:	20000990 	.word	0x20000990
   19880:	00014d3d 	.word	0x00014d3d

00019884 <readWaterSensorState>:

void readWaterSensorState(bool *low,bool *mid,bool *high)
{
   19884:	b580      	push	{r7, lr}
   19886:	b084      	sub	sp, #16
   19888:	af00      	add	r7, sp, #0
   1988a:	60f8      	str	r0, [r7, #12]
   1988c:	60b9      	str	r1, [r7, #8]
   1988e:	607a      	str	r2, [r7, #4]
	*low = port_pin_get_input_level(UNDERGRUND_TANK_LL_PIN);
   19890:	2037      	movs	r0, #55	; 0x37
   19892:	4b0c      	ldr	r3, [pc, #48]	; (198c4 <readWaterSensorState+0x40>)
   19894:	4798      	blx	r3
   19896:	0003      	movs	r3, r0
   19898:	001a      	movs	r2, r3
   1989a:	68fb      	ldr	r3, [r7, #12]
   1989c:	701a      	strb	r2, [r3, #0]
	*mid = port_pin_get_input_level(UNDERGRUND_TANK_ML_PIN);
   1989e:	200f      	movs	r0, #15
   198a0:	4b08      	ldr	r3, [pc, #32]	; (198c4 <readWaterSensorState+0x40>)
   198a2:	4798      	blx	r3
   198a4:	0003      	movs	r3, r0
   198a6:	001a      	movs	r2, r3
   198a8:	68bb      	ldr	r3, [r7, #8]
   198aa:	701a      	strb	r2, [r3, #0]
	*high = port_pin_get_input_level(UNDERGRUND_TANK_HL_PIN);
   198ac:	200e      	movs	r0, #14
   198ae:	4b05      	ldr	r3, [pc, #20]	; (198c4 <readWaterSensorState+0x40>)
   198b0:	4798      	blx	r3
   198b2:	0003      	movs	r3, r0
   198b4:	001a      	movs	r2, r3
   198b6:	687b      	ldr	r3, [r7, #4]
   198b8:	701a      	strb	r2, [r3, #0]
}
   198ba:	46c0      	nop			; (mov r8, r8)
   198bc:	46bd      	mov	sp, r7
   198be:	b004      	add	sp, #16
   198c0:	bd80      	pop	{r7, pc}
   198c2:	46c0      	nop			; (mov r8, r8)
   198c4:	00019645 	.word	0x00019645

000198c8 <updateUndergroundLevel>:

void updateUndergroundLevel(uint8_t level)
{
   198c8:	b580      	push	{r7, lr}
   198ca:	b082      	sub	sp, #8
   198cc:	af00      	add	r7, sp, #0
   198ce:	0002      	movs	r2, r0
   198d0:	1dfb      	adds	r3, r7, #7
   198d2:	701a      	strb	r2, [r3, #0]
	undergroundLevel=level;
   198d4:	4b03      	ldr	r3, [pc, #12]	; (198e4 <updateUndergroundLevel+0x1c>)
   198d6:	1dfa      	adds	r2, r7, #7
   198d8:	7812      	ldrb	r2, [r2, #0]
   198da:	701a      	strb	r2, [r3, #0]
}
   198dc:	46c0      	nop			; (mov r8, r8)
   198de:	46bd      	mov	sp, r7
   198e0:	b002      	add	sp, #8
   198e2:	bd80      	pop	{r7, pc}
   198e4:	20000a58 	.word	0x20000a58

000198e8 <getWaterSensorState>:

uint8_t getWaterSensorState(void)
{
   198e8:	b580      	push	{r7, lr}
   198ea:	b082      	sub	sp, #8
   198ec:	af00      	add	r7, sp, #0
	bool l,m,h;
	readWaterSensorState(&l,&m,&h);
   198ee:	1d3a      	adds	r2, r7, #4
   198f0:	1d79      	adds	r1, r7, #5
   198f2:	1dbb      	adds	r3, r7, #6
   198f4:	0018      	movs	r0, r3
   198f6:	4b17      	ldr	r3, [pc, #92]	; (19954 <getWaterSensorState+0x6c>)
   198f8:	4798      	blx	r3
	uint8_t ans=0;
   198fa:	1dfb      	adds	r3, r7, #7
   198fc:	2200      	movs	r2, #0
   198fe:	701a      	strb	r2, [r3, #0]

	if(!l)
   19900:	1dbb      	adds	r3, r7, #6
   19902:	781b      	ldrb	r3, [r3, #0]
   19904:	2201      	movs	r2, #1
   19906:	4053      	eors	r3, r2
   19908:	b2db      	uxtb	r3, r3
   1990a:	2b00      	cmp	r3, #0
   1990c:	d01c      	beq.n	19948 <getWaterSensorState+0x60>
	{
		ans++;
   1990e:	1dfb      	adds	r3, r7, #7
   19910:	781a      	ldrb	r2, [r3, #0]
   19912:	1dfb      	adds	r3, r7, #7
   19914:	3201      	adds	r2, #1
   19916:	701a      	strb	r2, [r3, #0]
		if(!m)
   19918:	1d7b      	adds	r3, r7, #5
   1991a:	781b      	ldrb	r3, [r3, #0]
   1991c:	2201      	movs	r2, #1
   1991e:	4053      	eors	r3, r2
   19920:	b2db      	uxtb	r3, r3
   19922:	2b00      	cmp	r3, #0
   19924:	d010      	beq.n	19948 <getWaterSensorState+0x60>
		{
			ans++;
   19926:	1dfb      	adds	r3, r7, #7
   19928:	781a      	ldrb	r2, [r3, #0]
   1992a:	1dfb      	adds	r3, r7, #7
   1992c:	3201      	adds	r2, #1
   1992e:	701a      	strb	r2, [r3, #0]
			if(!h)
   19930:	1d3b      	adds	r3, r7, #4
   19932:	781b      	ldrb	r3, [r3, #0]
   19934:	2201      	movs	r2, #1
   19936:	4053      	eors	r3, r2
   19938:	b2db      	uxtb	r3, r3
   1993a:	2b00      	cmp	r3, #0
   1993c:	d004      	beq.n	19948 <getWaterSensorState+0x60>
			{
				ans++;
   1993e:	1dfb      	adds	r3, r7, #7
   19940:	781a      	ldrb	r2, [r3, #0]
   19942:	1dfb      	adds	r3, r7, #7
   19944:	3201      	adds	r2, #1
   19946:	701a      	strb	r2, [r3, #0]
			}
		}
	}
	return ans;
   19948:	1dfb      	adds	r3, r7, #7
   1994a:	781b      	ldrb	r3, [r3, #0]
}
   1994c:	0018      	movs	r0, r3
   1994e:	46bd      	mov	sp, r7
   19950:	b002      	add	sp, #8
   19952:	bd80      	pop	{r7, pc}
   19954:	00019885 	.word	0x00019885

00019958 <waterStatusOnCall>:

void waterStatusOnCall(bool current)
{
   19958:	b590      	push	{r4, r7, lr}
   1995a:	b085      	sub	sp, #20
   1995c:	af00      	add	r7, sp, #0
   1995e:	0002      	movs	r2, r0
   19960:	1dfb      	adds	r3, r7, #7
   19962:	701a      	strb	r2, [r3, #0]
	uint8_t temp = getWaterSensorState();
   19964:	230f      	movs	r3, #15
   19966:	18fc      	adds	r4, r7, r3
   19968:	4b19      	ldr	r3, [pc, #100]	; (199d0 <waterStatusOnCall+0x78>)
   1996a:	4798      	blx	r3
   1996c:	0003      	movs	r3, r0
   1996e:	7023      	strb	r3, [r4, #0]
	if(current)
   19970:	1dfb      	adds	r3, r7, #7
   19972:	781b      	ldrb	r3, [r3, #0]
   19974:	2b00      	cmp	r3, #0
   19976:	d004      	beq.n	19982 <waterStatusOnCall+0x2a>
	temp = undergroundLevel;
   19978:	230f      	movs	r3, #15
   1997a:	18fb      	adds	r3, r7, r3
   1997c:	4a15      	ldr	r2, [pc, #84]	; (199d4 <waterStatusOnCall+0x7c>)
   1997e:	7812      	ldrb	r2, [r2, #0]
   19980:	701a      	strb	r2, [r3, #0]

	if(temp==CRITICALLEVEL)
   19982:	230f      	movs	r3, #15
   19984:	18fb      	adds	r3, r7, r3
   19986:	781b      	ldrb	r3, [r3, #0]
   19988:	2b00      	cmp	r3, #0
   1998a:	d103      	bne.n	19994 <waterStatusOnCall+0x3c>
	{
		setMotorMGRResponse('T');	//water level insufficient
   1998c:	2054      	movs	r0, #84	; 0x54
   1998e:	4b12      	ldr	r3, [pc, #72]	; (199d8 <waterStatusOnCall+0x80>)
   19990:	4798      	blx	r3
	}
	else if(temp==HIGHLEVEL)
	{
		setMotorMGRResponse('E');	//well is full
	}
}
   19992:	e019      	b.n	199c8 <waterStatusOnCall+0x70>
	else if(temp==LOWLEVEL)
   19994:	230f      	movs	r3, #15
   19996:	18fb      	adds	r3, r7, r3
   19998:	781b      	ldrb	r3, [r3, #0]
   1999a:	2b01      	cmp	r3, #1
   1999c:	d103      	bne.n	199a6 <waterStatusOnCall+0x4e>
		setMotorMGRResponse('Q');	//water below 2nd sensor
   1999e:	2051      	movs	r0, #81	; 0x51
   199a0:	4b0d      	ldr	r3, [pc, #52]	; (199d8 <waterStatusOnCall+0x80>)
   199a2:	4798      	blx	r3
}
   199a4:	e010      	b.n	199c8 <waterStatusOnCall+0x70>
	else if(temp==MIDLEVEL)
   199a6:	230f      	movs	r3, #15
   199a8:	18fb      	adds	r3, r7, r3
   199aa:	781b      	ldrb	r3, [r3, #0]
   199ac:	2b02      	cmp	r3, #2
   199ae:	d103      	bne.n	199b8 <waterStatusOnCall+0x60>
		setMotorMGRResponse('R');	//water below 1st sensor
   199b0:	2052      	movs	r0, #82	; 0x52
   199b2:	4b09      	ldr	r3, [pc, #36]	; (199d8 <waterStatusOnCall+0x80>)
   199b4:	4798      	blx	r3
}
   199b6:	e007      	b.n	199c8 <waterStatusOnCall+0x70>
	else if(temp==HIGHLEVEL)
   199b8:	230f      	movs	r3, #15
   199ba:	18fb      	adds	r3, r7, r3
   199bc:	781b      	ldrb	r3, [r3, #0]
   199be:	2b03      	cmp	r3, #3
   199c0:	d102      	bne.n	199c8 <waterStatusOnCall+0x70>
		setMotorMGRResponse('E');	//well is full
   199c2:	2045      	movs	r0, #69	; 0x45
   199c4:	4b04      	ldr	r3, [pc, #16]	; (199d8 <waterStatusOnCall+0x80>)
   199c6:	4798      	blx	r3
}
   199c8:	46c0      	nop			; (mov r8, r8)
   199ca:	46bd      	mov	sp, r7
   199cc:	b005      	add	sp, #20
   199ce:	bd90      	pop	{r4, r7, pc}
   199d0:	000198e9 	.word	0x000198e9
   199d4:	20000a58 	.word	0x20000a58
   199d8:	00014d3d 	.word	0x00014d3d

000199dc <Water_Level_Task>:

static void Water_Level_Task(void *params)
{
   199dc:	b590      	push	{r4, r7, lr}
   199de:	b085      	sub	sp, #20
   199e0:	af00      	add	r7, sp, #0
   199e2:	6078      	str	r0, [r7, #4]
	UNUSED(params);
	
	struct port_config water_level_sensor_pin_config;
	port_get_config_defaults(&water_level_sensor_pin_config);
   199e4:	2308      	movs	r3, #8
   199e6:	18fb      	adds	r3, r7, r3
   199e8:	0018      	movs	r0, r3
   199ea:	4b8b      	ldr	r3, [pc, #556]	; (19c18 <Water_Level_Task+0x23c>)
   199ec:	4798      	blx	r3
	
	water_level_sensor_pin_config.direction = PORT_PIN_DIR_INPUT;
   199ee:	2308      	movs	r3, #8
   199f0:	18fb      	adds	r3, r7, r3
   199f2:	2200      	movs	r2, #0
   199f4:	701a      	strb	r2, [r3, #0]
	water_level_sensor_pin_config.input_pull = PORT_PIN_PULL_UP;
   199f6:	2308      	movs	r3, #8
   199f8:	18fb      	adds	r3, r7, r3
   199fa:	2201      	movs	r2, #1
   199fc:	705a      	strb	r2, [r3, #1]
	
	port_pin_set_config(OVERHEAD_TANK_HL_PIN,	&water_level_sensor_pin_config);
   199fe:	2308      	movs	r3, #8
   19a00:	18fb      	adds	r3, r7, r3
   19a02:	0019      	movs	r1, r3
   19a04:	202f      	movs	r0, #47	; 0x2f
   19a06:	4b85      	ldr	r3, [pc, #532]	; (19c1c <Water_Level_Task+0x240>)
   19a08:	4798      	blx	r3
	port_pin_set_config(OVERHEAD_TANK_ML_PIN,	&water_level_sensor_pin_config);
   19a0a:	2308      	movs	r3, #8
   19a0c:	18fb      	adds	r3, r7, r3
   19a0e:	0019      	movs	r1, r3
   19a10:	200c      	movs	r0, #12
   19a12:	4b82      	ldr	r3, [pc, #520]	; (19c1c <Water_Level_Task+0x240>)
   19a14:	4798      	blx	r3
	port_pin_set_config(OVERHEAD_TANK_LL_PIN,	&water_level_sensor_pin_config);
   19a16:	2308      	movs	r3, #8
   19a18:	18fb      	adds	r3, r7, r3
   19a1a:	0019      	movs	r1, r3
   19a1c:	200d      	movs	r0, #13
   19a1e:	4b7f      	ldr	r3, [pc, #508]	; (19c1c <Water_Level_Task+0x240>)
   19a20:	4798      	blx	r3
	port_pin_set_config(UNDERGRUND_TANK_HL_PIN, &water_level_sensor_pin_config);
   19a22:	2308      	movs	r3, #8
   19a24:	18fb      	adds	r3, r7, r3
   19a26:	0019      	movs	r1, r3
   19a28:	200e      	movs	r0, #14
   19a2a:	4b7c      	ldr	r3, [pc, #496]	; (19c1c <Water_Level_Task+0x240>)
   19a2c:	4798      	blx	r3
	port_pin_set_config(UNDERGRUND_TANK_ML_PIN, &water_level_sensor_pin_config);
   19a2e:	2308      	movs	r3, #8
   19a30:	18fb      	adds	r3, r7, r3
   19a32:	0019      	movs	r1, r3
   19a34:	200f      	movs	r0, #15
   19a36:	4b79      	ldr	r3, [pc, #484]	; (19c1c <Water_Level_Task+0x240>)
   19a38:	4798      	blx	r3
	port_pin_set_config(UNDERGRUND_TANK_LL_PIN, &water_level_sensor_pin_config);
   19a3a:	2308      	movs	r3, #8
   19a3c:	18fb      	adds	r3, r7, r3
   19a3e:	0019      	movs	r1, r3
   19a40:	2037      	movs	r0, #55	; 0x37
   19a42:	4b76      	ldr	r3, [pc, #472]	; (19c1c <Water_Level_Task+0x240>)
   19a44:	4798      	blx	r3
	
	undergroundLevel = MIDLEVEL;
   19a46:	4b76      	ldr	r3, [pc, #472]	; (19c20 <Water_Level_Task+0x244>)
   19a48:	2202      	movs	r2, #2
   19a4a:	701a      	strb	r2, [r3, #0]
	tempUndergroundLevel = MIDLEVEL;
   19a4c:	4b75      	ldr	r3, [pc, #468]	; (19c24 <Water_Level_Task+0x248>)
   19a4e:	2202      	movs	r2, #2
   19a50:	701a      	strb	r2, [r3, #0]
	
	overheadLevel = OVERHEADMIDLEVEL;
   19a52:	4b75      	ldr	r3, [pc, #468]	; (19c28 <Water_Level_Task+0x24c>)
   19a54:	2201      	movs	r2, #1
   19a56:	701a      	strb	r2, [r3, #0]
	tempOverheadLevel = OVERHEADMIDLEVEL;
   19a58:	4b74      	ldr	r3, [pc, #464]	; (19c2c <Water_Level_Task+0x250>)
   19a5a:	2201      	movs	r2, #1
   19a5c:	701a      	strb	r2, [r3, #0]
	tempWaterEventCount = 0;
   19a5e:	4b74      	ldr	r3, [pc, #464]	; (19c30 <Water_Level_Task+0x254>)
   19a60:	2200      	movs	r2, #0
   19a62:	701a      	strb	r2, [r3, #0]
	
	uint8_t j = 0;
   19a64:	230f      	movs	r3, #15
   19a66:	18fb      	adds	r3, r7, r3
   19a68:	2200      	movs	r2, #0
   19a6a:	701a      	strb	r2, [r3, #0]
	if (factory_settings_parameter_struct.ENABLE_GP)
   19a6c:	4b71      	ldr	r3, [pc, #452]	; (19c34 <Water_Level_Task+0x258>)
   19a6e:	791b      	ldrb	r3, [r3, #4]
   19a70:	2b00      	cmp	r3, #0
   19a72:	d004      	beq.n	19a7e <Water_Level_Task+0xa2>
	{
		j = 19;
   19a74:	230f      	movs	r3, #15
   19a76:	18fb      	adds	r3, r7, r3
   19a78:	2213      	movs	r2, #19
   19a7a:	701a      	strb	r2, [r3, #0]
   19a7c:	e003      	b.n	19a86 <Water_Level_Task+0xaa>
	}
	else
	{
		j= 17;
   19a7e:	230f      	movs	r3, #15
   19a80:	18fb      	adds	r3, r7, r3
   19a82:	2211      	movs	r2, #17
   19a84:	701a      	strb	r2, [r3, #0]
	}
	for (uint8_t i=12;i<j;i++)
   19a86:	230e      	movs	r3, #14
   19a88:	18fb      	adds	r3, r7, r3
   19a8a:	220c      	movs	r2, #12
   19a8c:	701a      	strb	r2, [r3, #0]
   19a8e:	e00c      	b.n	19aaa <Water_Level_Task+0xce>
	{
		simEventTemp[i] = true;
   19a90:	230e      	movs	r3, #14
   19a92:	18fb      	adds	r3, r7, r3
   19a94:	781b      	ldrb	r3, [r3, #0]
   19a96:	4a68      	ldr	r2, [pc, #416]	; (19c38 <Water_Level_Task+0x25c>)
   19a98:	2101      	movs	r1, #1
   19a9a:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i=12;i<j;i++)
   19a9c:	230e      	movs	r3, #14
   19a9e:	18fb      	adds	r3, r7, r3
   19aa0:	781a      	ldrb	r2, [r3, #0]
   19aa2:	230e      	movs	r3, #14
   19aa4:	18fb      	adds	r3, r7, r3
   19aa6:	3201      	adds	r2, #1
   19aa8:	701a      	strb	r2, [r3, #0]
   19aaa:	230e      	movs	r3, #14
   19aac:	18fa      	adds	r2, r7, r3
   19aae:	230f      	movs	r3, #15
   19ab0:	18fb      	adds	r3, r7, r3
   19ab2:	7812      	ldrb	r2, [r2, #0]
   19ab4:	781b      	ldrb	r3, [r3, #0]
   19ab6:	429a      	cmp	r2, r3
   19ab8:	d3ea      	bcc.n	19a90 <Water_Level_Task+0xb4>
	}
	simEvent[12] = 'I';
   19aba:	4b60      	ldr	r3, [pc, #384]	; (19c3c <Water_Level_Task+0x260>)
   19abc:	2249      	movs	r2, #73	; 0x49
   19abe:	731a      	strb	r2, [r3, #12]
	simEvent[13] = 'D';
   19ac0:	4b5e      	ldr	r3, [pc, #376]	; (19c3c <Water_Level_Task+0x260>)
   19ac2:	2244      	movs	r2, #68	; 0x44
   19ac4:	735a      	strb	r2, [r3, #13]
	simEvent[14] = 'H';
   19ac6:	4b5d      	ldr	r3, [pc, #372]	; (19c3c <Water_Level_Task+0x260>)
   19ac8:	2248      	movs	r2, #72	; 0x48
   19aca:	739a      	strb	r2, [r3, #14]
	simEvent[15] = 'E';
   19acc:	4b5b      	ldr	r3, [pc, #364]	; (19c3c <Water_Level_Task+0x260>)
   19ace:	2245      	movs	r2, #69	; 0x45
   19ad0:	73da      	strb	r2, [r3, #15]
	simEvent[16] = 'Z';
   19ad2:	4b5a      	ldr	r3, [pc, #360]	; (19c3c <Water_Level_Task+0x260>)
   19ad4:	225a      	movs	r2, #90	; 0x5a
   19ad6:	741a      	strb	r2, [r3, #16]
	if (factory_settings_parameter_struct.ENABLE_GP)
   19ad8:	4b56      	ldr	r3, [pc, #344]	; (19c34 <Water_Level_Task+0x258>)
   19ada:	791b      	ldrb	r3, [r3, #4]
   19adc:	2b00      	cmp	r3, #0
   19ade:	d005      	beq.n	19aec <Water_Level_Task+0x110>
	{
		simEvent[17] = 'V';
   19ae0:	4b56      	ldr	r3, [pc, #344]	; (19c3c <Water_Level_Task+0x260>)
   19ae2:	2256      	movs	r2, #86	; 0x56
   19ae4:	745a      	strb	r2, [r3, #17]
		simEvent[18] = 'W';
   19ae6:	4b55      	ldr	r3, [pc, #340]	; (19c3c <Water_Level_Task+0x260>)
   19ae8:	2257      	movs	r2, #87	; 0x57
   19aea:	749a      	strb	r2, [r3, #18]
	}
	if (factory_settings_parameter_struct.ENABLE_M2M)
   19aec:	4b51      	ldr	r3, [pc, #324]	; (19c34 <Water_Level_Task+0x258>)
   19aee:	78db      	ldrb	r3, [r3, #3]
   19af0:	2b00      	cmp	r3, #0
   19af2:	d00b      	beq.n	19b0c <Water_Level_Task+0x130>
	{
		m2mEvent_arr[0] = ME_CLEARED;
   19af4:	4b52      	ldr	r3, [pc, #328]	; (19c40 <Water_Level_Task+0x264>)
   19af6:	2200      	movs	r2, #0
   19af8:	701a      	strb	r2, [r3, #0]
		m2mEvent_arr[1] = ME_CLEARED;
   19afa:	4b51      	ldr	r3, [pc, #324]	; (19c40 <Water_Level_Task+0x264>)
   19afc:	2200      	movs	r2, #0
   19afe:	705a      	strb	r2, [r3, #1]
		
		mapTable[0] = 13;
   19b00:	4b50      	ldr	r3, [pc, #320]	; (19c44 <Water_Level_Task+0x268>)
   19b02:	220d      	movs	r2, #13
   19b04:	701a      	strb	r2, [r3, #0]
		mapTable[1] = 15;
   19b06:	4b4f      	ldr	r3, [pc, #316]	; (19c44 <Water_Level_Task+0x268>)
   19b08:	220f      	movs	r2, #15
   19b0a:	705a      	strb	r2, [r3, #1]
	}
	
	
	for (;;)
	{
		bool result=false;
   19b0c:	230c      	movs	r3, #12
   19b0e:	18fb      	adds	r3, r7, r3
   19b10:	2200      	movs	r2, #0
   19b12:	701a      	strb	r2, [r3, #0]
		
		if (!(user_settings_parameter_struct.waterBypassAddress))
   19b14:	4b4c      	ldr	r3, [pc, #304]	; (19c48 <Water_Level_Task+0x26c>)
   19b16:	7fdb      	ldrb	r3, [r3, #31]
   19b18:	b2db      	uxtb	r3, r3
   19b1a:	2b00      	cmp	r3, #0
   19b1c:	d000      	beq.n	19b20 <Water_Level_Task+0x144>
   19b1e:	e073      	b.n	19c08 <Water_Level_Task+0x22c>
		{
			uint8_t uLevel;
			uint8_t oLevel;
			uLevel = getWaterSensorState();
   19b20:	230b      	movs	r3, #11
   19b22:	18fc      	adds	r4, r7, r3
   19b24:	4b49      	ldr	r3, [pc, #292]	; (19c4c <Water_Level_Task+0x270>)
   19b26:	4798      	blx	r3
   19b28:	0003      	movs	r3, r0
   19b2a:	7023      	strb	r3, [r4, #0]
			
			if (factory_settings_parameter_struct.ENABLE_GP)
   19b2c:	4b41      	ldr	r3, [pc, #260]	; (19c34 <Water_Level_Task+0x258>)
   19b2e:	791b      	ldrb	r3, [r3, #4]
   19b30:	2b00      	cmp	r3, #0
   19b32:	d005      	beq.n	19b40 <Water_Level_Task+0x164>
			{
				oLevel =getOverHeadWaterSensorState();
   19b34:	230d      	movs	r3, #13
   19b36:	18fc      	adds	r4, r7, r3
   19b38:	4b45      	ldr	r3, [pc, #276]	; (19c50 <Water_Level_Task+0x274>)
   19b3a:	4798      	blx	r3
   19b3c:	0003      	movs	r3, r0
   19b3e:	7023      	strb	r3, [r4, #0]
			}
			
			if ((factory_settings_parameter_struct.ENABLE_GP == true)?
   19b40:	4b3c      	ldr	r3, [pc, #240]	; (19c34 <Water_Level_Task+0x258>)
   19b42:	791b      	ldrb	r3, [r3, #4]
   19b44:	2b01      	cmp	r3, #1
   19b46:	d125      	bne.n	19b94 <Water_Level_Task+0x1b8>
			((uLevel!=undergroundLevel && uLevel==tempUndergroundLevel) ||(oLevel!=overheadLevel && oLevel==tempOverheadLevel)):
   19b48:	4b35      	ldr	r3, [pc, #212]	; (19c20 <Water_Level_Task+0x244>)
   19b4a:	781b      	ldrb	r3, [r3, #0]
   19b4c:	220b      	movs	r2, #11
   19b4e:	18ba      	adds	r2, r7, r2
   19b50:	7812      	ldrb	r2, [r2, #0]
   19b52:	429a      	cmp	r2, r3
   19b54:	d006      	beq.n	19b64 <Water_Level_Task+0x188>
   19b56:	4b33      	ldr	r3, [pc, #204]	; (19c24 <Water_Level_Task+0x248>)
   19b58:	781b      	ldrb	r3, [r3, #0]
   19b5a:	220b      	movs	r2, #11
   19b5c:	18ba      	adds	r2, r7, r2
   19b5e:	7812      	ldrb	r2, [r2, #0]
   19b60:	429a      	cmp	r2, r3
   19b62:	d00f      	beq.n	19b84 <Water_Level_Task+0x1a8>
   19b64:	4b30      	ldr	r3, [pc, #192]	; (19c28 <Water_Level_Task+0x24c>)
   19b66:	781b      	ldrb	r3, [r3, #0]
   19b68:	b2db      	uxtb	r3, r3
   19b6a:	220d      	movs	r2, #13
   19b6c:	18ba      	adds	r2, r7, r2
   19b6e:	7812      	ldrb	r2, [r2, #0]
   19b70:	429a      	cmp	r2, r3
   19b72:	d009      	beq.n	19b88 <Water_Level_Task+0x1ac>
   19b74:	4b2d      	ldr	r3, [pc, #180]	; (19c2c <Water_Level_Task+0x250>)
   19b76:	781b      	ldrb	r3, [r3, #0]
   19b78:	b2db      	uxtb	r3, r3
   19b7a:	220d      	movs	r2, #13
   19b7c:	18ba      	adds	r2, r7, r2
   19b7e:	7812      	ldrb	r2, [r2, #0]
   19b80:	429a      	cmp	r2, r3
   19b82:	d101      	bne.n	19b88 <Water_Level_Task+0x1ac>
   19b84:	2301      	movs	r3, #1
   19b86:	e000      	b.n	19b8a <Water_Level_Task+0x1ae>
   19b88:	2300      	movs	r3, #0
			if ((factory_settings_parameter_struct.ENABLE_GP == true)?
   19b8a:	1c1a      	adds	r2, r3, #0
   19b8c:	2301      	movs	r3, #1
   19b8e:	4013      	ands	r3, r2
   19b90:	b2db      	uxtb	r3, r3
   19b92:	e014      	b.n	19bbe <Water_Level_Task+0x1e2>
			((uLevel!=undergroundLevel && uLevel==tempUndergroundLevel))
   19b94:	4b22      	ldr	r3, [pc, #136]	; (19c20 <Water_Level_Task+0x244>)
   19b96:	781b      	ldrb	r3, [r3, #0]
   19b98:	220b      	movs	r2, #11
   19b9a:	18ba      	adds	r2, r7, r2
   19b9c:	7812      	ldrb	r2, [r2, #0]
   19b9e:	429a      	cmp	r2, r3
   19ba0:	d008      	beq.n	19bb4 <Water_Level_Task+0x1d8>
   19ba2:	4b20      	ldr	r3, [pc, #128]	; (19c24 <Water_Level_Task+0x248>)
   19ba4:	781b      	ldrb	r3, [r3, #0]
   19ba6:	220b      	movs	r2, #11
   19ba8:	18ba      	adds	r2, r7, r2
   19baa:	7812      	ldrb	r2, [r2, #0]
   19bac:	429a      	cmp	r2, r3
   19bae:	d101      	bne.n	19bb4 <Water_Level_Task+0x1d8>
   19bb0:	2301      	movs	r3, #1
   19bb2:	e000      	b.n	19bb6 <Water_Level_Task+0x1da>
   19bb4:	2300      	movs	r3, #0
			if ((factory_settings_parameter_struct.ENABLE_GP == true)?
   19bb6:	1c1a      	adds	r2, r3, #0
   19bb8:	2301      	movs	r3, #1
   19bba:	4013      	ands	r3, r2
   19bbc:	b2db      	uxtb	r3, r3
   19bbe:	2b00      	cmp	r3, #0
   19bc0:	d010      	beq.n	19be4 <Water_Level_Task+0x208>
			)
			{
				tempWaterEventCount++;
   19bc2:	4b1b      	ldr	r3, [pc, #108]	; (19c30 <Water_Level_Task+0x254>)
   19bc4:	781b      	ldrb	r3, [r3, #0]
   19bc6:	3301      	adds	r3, #1
   19bc8:	b2da      	uxtb	r2, r3
   19bca:	4b19      	ldr	r3, [pc, #100]	; (19c30 <Water_Level_Task+0x254>)
   19bcc:	701a      	strb	r2, [r3, #0]
				if(tempWaterEventCount>9)
   19bce:	4b18      	ldr	r3, [pc, #96]	; (19c30 <Water_Level_Task+0x254>)
   19bd0:	781b      	ldrb	r3, [r3, #0]
   19bd2:	2b09      	cmp	r3, #9
   19bd4:	d909      	bls.n	19bea <Water_Level_Task+0x20e>
				{
					operateOnWaterEvent();
   19bd6:	4b1f      	ldr	r3, [pc, #124]	; (19c54 <Water_Level_Task+0x278>)
   19bd8:	4798      	blx	r3
					result=true;
   19bda:	230c      	movs	r3, #12
   19bdc:	18fb      	adds	r3, r7, r3
   19bde:	2201      	movs	r2, #1
   19be0:	701a      	strb	r2, [r3, #0]
   19be2:	e002      	b.n	19bea <Water_Level_Task+0x20e>
				}
			}
			else
			{
				tempWaterEventCount=0;
   19be4:	4b12      	ldr	r3, [pc, #72]	; (19c30 <Water_Level_Task+0x254>)
   19be6:	2200      	movs	r2, #0
   19be8:	701a      	strb	r2, [r3, #0]
			}
			tempUndergroundLevel=uLevel;
   19bea:	4b0e      	ldr	r3, [pc, #56]	; (19c24 <Water_Level_Task+0x248>)
   19bec:	220b      	movs	r2, #11
   19bee:	18ba      	adds	r2, r7, r2
   19bf0:	7812      	ldrb	r2, [r2, #0]
   19bf2:	701a      	strb	r2, [r3, #0]
			if (factory_settings_parameter_struct.ENABLE_GP)
   19bf4:	4b0f      	ldr	r3, [pc, #60]	; (19c34 <Water_Level_Task+0x258>)
   19bf6:	791b      	ldrb	r3, [r3, #4]
   19bf8:	2b00      	cmp	r3, #0
   19bfa:	d009      	beq.n	19c10 <Water_Level_Task+0x234>
			{
				tempOverheadLevel=oLevel;
   19bfc:	4b0b      	ldr	r3, [pc, #44]	; (19c2c <Water_Level_Task+0x250>)
   19bfe:	220d      	movs	r2, #13
   19c00:	18ba      	adds	r2, r7, r2
   19c02:	7812      	ldrb	r2, [r2, #0]
   19c04:	701a      	strb	r2, [r3, #0]
   19c06:	e003      	b.n	19c10 <Water_Level_Task+0x234>
			}
		}
		else
		{
			vTaskDelay(5000/portTICK_PERIOD_MS);
   19c08:	4b13      	ldr	r3, [pc, #76]	; (19c58 <Water_Level_Task+0x27c>)
   19c0a:	0018      	movs	r0, r3
   19c0c:	4b13      	ldr	r3, [pc, #76]	; (19c5c <Water_Level_Task+0x280>)
   19c0e:	4798      	blx	r3
		}
		vTaskDelay(100/portTICK_PERIOD_MS);
   19c10:	2064      	movs	r0, #100	; 0x64
   19c12:	4b12      	ldr	r3, [pc, #72]	; (19c5c <Water_Level_Task+0x280>)
   19c14:	4798      	blx	r3
	{
   19c16:	e779      	b.n	19b0c <Water_Level_Task+0x130>
   19c18:	00019621 	.word	0x00019621
   19c1c:	00022cd1 	.word	0x00022cd1
   19c20:	20000a58 	.word	0x20000a58
   19c24:	20000971 	.word	0x20000971
   19c28:	20000990 	.word	0x20000990
   19c2c:	20000962 	.word	0x20000962
   19c30:	2000098c 	.word	0x2000098c
   19c34:	2000082c 	.word	0x2000082c
   19c38:	20000918 	.word	0x20000918
   19c3c:	200009f8 	.word	0x200009f8
   19c40:	200009c0 	.word	0x200009c0
   19c44:	20000940 	.word	0x20000940
   19c48:	20000854 	.word	0x20000854
   19c4c:	000198e9 	.word	0x000198e9
   19c50:	000197b9 	.word	0x000197b9
   19c54:	00019c61 	.word	0x00019c61
   19c58:	00001388 	.word	0x00001388
   19c5c:	0001fe69 	.word	0x0001fe69

00019c60 <operateOnWaterEvent>:
	}
}

void operateOnWaterEvent(void)
{
   19c60:	b580      	push	{r7, lr}
   19c62:	b082      	sub	sp, #8
   19c64:	af00      	add	r7, sp, #0
	uint8_t uLevel = tempUndergroundLevel;
   19c66:	1dfb      	adds	r3, r7, #7
   19c68:	4abd      	ldr	r2, [pc, #756]	; (19f60 <operateOnWaterEvent+0x300>)
   19c6a:	7812      	ldrb	r2, [r2, #0]
   19c6c:	701a      	strb	r2, [r3, #0]
	uint8_t oLevel = tempOverheadLevel;
   19c6e:	1dbb      	adds	r3, r7, #6
   19c70:	4abc      	ldr	r2, [pc, #752]	; (19f64 <operateOnWaterEvent+0x304>)
   19c72:	7812      	ldrb	r2, [r2, #0]
   19c74:	701a      	strb	r2, [r3, #0]
	if(uLevel == undergroundLevel)
   19c76:	4bbc      	ldr	r3, [pc, #752]	; (19f68 <operateOnWaterEvent+0x308>)
   19c78:	781b      	ldrb	r3, [r3, #0]
   19c7a:	1dfa      	adds	r2, r7, #7
   19c7c:	7812      	ldrb	r2, [r2, #0]
   19c7e:	429a      	cmp	r2, r3
   19c80:	d10c      	bne.n	19c9c <operateOnWaterEvent+0x3c>
	{
		if (factory_settings_parameter_struct.ENABLE_GP)
   19c82:	4bba      	ldr	r3, [pc, #744]	; (19f6c <operateOnWaterEvent+0x30c>)
   19c84:	791b      	ldrb	r3, [r3, #4]
   19c86:	2b00      	cmp	r3, #0
   19c88:	d000      	beq.n	19c8c <operateOnWaterEvent+0x2c>
   19c8a:	e162      	b.n	19f52 <operateOnWaterEvent+0x2f2>
		{
			return;
		}
		else
		{
			if(oLevel==overheadLevel)
   19c8c:	4bb8      	ldr	r3, [pc, #736]	; (19f70 <operateOnWaterEvent+0x310>)
   19c8e:	781b      	ldrb	r3, [r3, #0]
   19c90:	b2db      	uxtb	r3, r3
   19c92:	1dba      	adds	r2, r7, #6
   19c94:	7812      	ldrb	r2, [r2, #0]
   19c96:	429a      	cmp	r2, r3
   19c98:	d100      	bne.n	19c9c <operateOnWaterEvent+0x3c>
   19c9a:	e15c      	b.n	19f56 <operateOnWaterEvent+0x2f6>
			{
				return;
			}
		}
	}
	if (getMotorState())
   19c9c:	4bb5      	ldr	r3, [pc, #724]	; (19f74 <operateOnWaterEvent+0x314>)
   19c9e:	4798      	blx	r3
   19ca0:	1e03      	subs	r3, r0, #0
   19ca2:	d100      	bne.n	19ca6 <operateOnWaterEvent+0x46>
   19ca4:	e0c4      	b.n	19e30 <operateOnWaterEvent+0x1d0>
	{
		if ((uLevel == CRITICALLEVEL) && (undergroundLevel>CRITICALLEVEL))	//no water in well
   19ca6:	1dfb      	adds	r3, r7, #7
   19ca8:	781b      	ldrb	r3, [r3, #0]
   19caa:	2b00      	cmp	r3, #0
   19cac:	d122      	bne.n	19cf4 <operateOnWaterEvent+0x94>
   19cae:	4bae      	ldr	r3, [pc, #696]	; (19f68 <operateOnWaterEvent+0x308>)
   19cb0:	781b      	ldrb	r3, [r3, #0]
   19cb2:	2b00      	cmp	r3, #0
   19cb4:	d01e      	beq.n	19cf4 <operateOnWaterEvent+0x94>
		{
			stopMotor(false,true,false);
   19cb6:	2200      	movs	r2, #0
   19cb8:	2101      	movs	r1, #1
   19cba:	2000      	movs	r0, #0
   19cbc:	4bae      	ldr	r3, [pc, #696]	; (19f78 <operateOnWaterEvent+0x318>)
   19cbe:	4798      	blx	r3
			simEventTemp[12] = registerEvent('I');	//report To SIM Motor Off due to insufficient water level
   19cc0:	2049      	movs	r0, #73	; 0x49
   19cc2:	4bae      	ldr	r3, [pc, #696]	; (19f7c <operateOnWaterEvent+0x31c>)
   19cc4:	4798      	blx	r3
   19cc6:	0003      	movs	r3, r0
   19cc8:	001a      	movs	r2, r3
   19cca:	4bad      	ldr	r3, [pc, #692]	; (19f80 <operateOnWaterEvent+0x320>)
   19ccc:	731a      	strb	r2, [r3, #12]
			if (factory_settings_parameter_struct.ENABLE_M2M)
   19cce:	4ba7      	ldr	r3, [pc, #668]	; (19f6c <operateOnWaterEvent+0x30c>)
   19cd0:	78db      	ldrb	r3, [r3, #3]
   19cd2:	2b00      	cmp	r3, #0
   19cd4:	d100      	bne.n	19cd8 <operateOnWaterEvent+0x78>
   19cd6:	e072      	b.n	19dbe <operateOnWaterEvent+0x15e>
			{
				if ((m2m_Numbers_struct.m2mSetting) && (undergroundLevel>LOWLEVEL))
   19cd8:	4baa      	ldr	r3, [pc, #680]	; (19f84 <operateOnWaterEvent+0x324>)
   19cda:	795b      	ldrb	r3, [r3, #5]
   19cdc:	2b00      	cmp	r3, #0
   19cde:	d100      	bne.n	19ce2 <operateOnWaterEvent+0x82>
   19ce0:	e06d      	b.n	19dbe <operateOnWaterEvent+0x15e>
   19ce2:	4ba1      	ldr	r3, [pc, #644]	; (19f68 <operateOnWaterEvent+0x308>)
   19ce4:	781b      	ldrb	r3, [r3, #0]
   19ce6:	2b01      	cmp	r3, #1
   19ce8:	d800      	bhi.n	19cec <operateOnWaterEvent+0x8c>
   19cea:	e068      	b.n	19dbe <operateOnWaterEvent+0x15e>
				{
					m2mEvent_arr[0] = ME_WAITREGISTER;
   19cec:	4ba6      	ldr	r3, [pc, #664]	; (19f88 <operateOnWaterEvent+0x328>)
   19cee:	2201      	movs	r2, #1
   19cf0:	701a      	strb	r2, [r3, #0]
			if (factory_settings_parameter_struct.ENABLE_M2M)
   19cf2:	e064      	b.n	19dbe <operateOnWaterEvent+0x15e>
				}
			}
		}
		else if (uLevel==HIGHLEVEL && undergroundLevel<HIGHLEVEL)
   19cf4:	1dfb      	adds	r3, r7, #7
   19cf6:	781b      	ldrb	r3, [r3, #0]
   19cf8:	2b03      	cmp	r3, #3
   19cfa:	d130      	bne.n	19d5e <operateOnWaterEvent+0xfe>
   19cfc:	4b9a      	ldr	r3, [pc, #616]	; (19f68 <operateOnWaterEvent+0x308>)
   19cfe:	781b      	ldrb	r3, [r3, #0]
   19d00:	2b02      	cmp	r3, #2
   19d02:	d82c      	bhi.n	19d5e <operateOnWaterEvent+0xfe>
		{
			if (factory_settings_parameter_struct.ENABLE_M2M)
   19d04:	4b99      	ldr	r3, [pc, #612]	; (19f6c <operateOnWaterEvent+0x30c>)
   19d06:	78db      	ldrb	r3, [r3, #3]
   19d08:	2b00      	cmp	r3, #0
   19d0a:	d05b      	beq.n	19dc4 <operateOnWaterEvent+0x164>
			{
				if (m2m_Numbers_struct.m2mSetting)
   19d0c:	4b9d      	ldr	r3, [pc, #628]	; (19f84 <operateOnWaterEvent+0x324>)
   19d0e:	795b      	ldrb	r3, [r3, #5]
   19d10:	2b00      	cmp	r3, #0
   19d12:	d003      	beq.n	19d1c <operateOnWaterEvent+0xbc>
				{
					m2mEvent_arr[1] = ME_WAITREGISTER;
   19d14:	4b9c      	ldr	r3, [pc, #624]	; (19f88 <operateOnWaterEvent+0x328>)
   19d16:	2201      	movs	r2, #1
   19d18:	705a      	strb	r2, [r3, #1]
   19d1a:	e006      	b.n	19d2a <operateOnWaterEvent+0xca>
				}
				else
				{
					simEventTemp[15] = registerEvent('E');	//report To SIM well is full.
   19d1c:	2045      	movs	r0, #69	; 0x45
   19d1e:	4b97      	ldr	r3, [pc, #604]	; (19f7c <operateOnWaterEvent+0x31c>)
   19d20:	4798      	blx	r3
   19d22:	0003      	movs	r3, r0
   19d24:	001a      	movs	r2, r3
   19d26:	4b96      	ldr	r3, [pc, #600]	; (19f80 <operateOnWaterEvent+0x320>)
   19d28:	73da      	strb	r2, [r3, #15]
				}
				if (user_settings_parameter_struct.preventOverFlowAddress)
   19d2a:	4b98      	ldr	r3, [pc, #608]	; (19f8c <operateOnWaterEvent+0x32c>)
   19d2c:	7f9b      	ldrb	r3, [r3, #30]
   19d2e:	b2db      	uxtb	r3, r3
   19d30:	2b00      	cmp	r3, #0
   19d32:	d00c      	beq.n	19d4e <operateOnWaterEvent+0xee>
				{
					stopMotor(false,true,false);
   19d34:	2200      	movs	r2, #0
   19d36:	2101      	movs	r1, #1
   19d38:	2000      	movs	r0, #0
   19d3a:	4b8f      	ldr	r3, [pc, #572]	; (19f78 <operateOnWaterEvent+0x318>)
   19d3c:	4798      	blx	r3
					simEventTemp[14] = registerEvent('H'); //report To SIM well is full, so stopped motor
   19d3e:	2048      	movs	r0, #72	; 0x48
   19d40:	4b8e      	ldr	r3, [pc, #568]	; (19f7c <operateOnWaterEvent+0x31c>)
   19d42:	4798      	blx	r3
   19d44:	0003      	movs	r3, r0
   19d46:	001a      	movs	r2, r3
   19d48:	4b8d      	ldr	r3, [pc, #564]	; (19f80 <operateOnWaterEvent+0x320>)
   19d4a:	739a      	strb	r2, [r3, #14]
			if (factory_settings_parameter_struct.ENABLE_M2M)
   19d4c:	e03a      	b.n	19dc4 <operateOnWaterEvent+0x164>
				}
				else
				{
					simEventTemp[15] = registerEvent('E'); //report To SIM well is full.
   19d4e:	2045      	movs	r0, #69	; 0x45
   19d50:	4b8a      	ldr	r3, [pc, #552]	; (19f7c <operateOnWaterEvent+0x31c>)
   19d52:	4798      	blx	r3
   19d54:	0003      	movs	r3, r0
   19d56:	001a      	movs	r2, r3
   19d58:	4b89      	ldr	r3, [pc, #548]	; (19f80 <operateOnWaterEvent+0x320>)
   19d5a:	73da      	strb	r2, [r3, #15]
			if (factory_settings_parameter_struct.ENABLE_M2M)
   19d5c:	e032      	b.n	19dc4 <operateOnWaterEvent+0x164>
				}
			}
		}
		else if ((uLevel==LOWLEVEL) && (undergroundLevel>LOWLEVEL))		// decrease in water level
   19d5e:	1dfb      	adds	r3, r7, #7
   19d60:	781b      	ldrb	r3, [r3, #0]
   19d62:	2b01      	cmp	r3, #1
   19d64:	d11b      	bne.n	19d9e <operateOnWaterEvent+0x13e>
   19d66:	4b80      	ldr	r3, [pc, #512]	; (19f68 <operateOnWaterEvent+0x308>)
   19d68:	781b      	ldrb	r3, [r3, #0]
   19d6a:	2b01      	cmp	r3, #1
   19d6c:	d917      	bls.n	19d9e <operateOnWaterEvent+0x13e>
		{
			if (factory_settings_parameter_struct.ENABLE_M2M)
   19d6e:	4b7f      	ldr	r3, [pc, #508]	; (19f6c <operateOnWaterEvent+0x30c>)
   19d70:	78db      	ldrb	r3, [r3, #3]
   19d72:	2b00      	cmp	r3, #0
   19d74:	d007      	beq.n	19d86 <operateOnWaterEvent+0x126>
			{
				if (m2m_Numbers_struct.m2mSetting)
   19d76:	4b83      	ldr	r3, [pc, #524]	; (19f84 <operateOnWaterEvent+0x324>)
   19d78:	795b      	ldrb	r3, [r3, #5]
   19d7a:	2b00      	cmp	r3, #0
   19d7c:	d021      	beq.n	19dc2 <operateOnWaterEvent+0x162>
				{
					m2mEvent_arr[0] = ME_WAITREGISTER;
   19d7e:	4b82      	ldr	r3, [pc, #520]	; (19f88 <operateOnWaterEvent+0x328>)
   19d80:	2201      	movs	r2, #1
   19d82:	701a      	strb	r2, [r3, #0]
			if (factory_settings_parameter_struct.ENABLE_M2M)
   19d84:	e01d      	b.n	19dc2 <operateOnWaterEvent+0x162>
				}
			}
			else
			{
				if (factory_settings_parameter_struct.NOLEVELCHANGECALL)
   19d86:	4b79      	ldr	r3, [pc, #484]	; (19f6c <operateOnWaterEvent+0x30c>)
   19d88:	79db      	ldrb	r3, [r3, #7]
   19d8a:	2b00      	cmp	r3, #0
   19d8c:	d019      	beq.n	19dc2 <operateOnWaterEvent+0x162>
				{
					simEventTemp[13] = registerEvent('D'); //report To SIM water level is decrease..
   19d8e:	2044      	movs	r0, #68	; 0x44
   19d90:	4b7a      	ldr	r3, [pc, #488]	; (19f7c <operateOnWaterEvent+0x31c>)
   19d92:	4798      	blx	r3
   19d94:	0003      	movs	r3, r0
   19d96:	001a      	movs	r2, r3
   19d98:	4b79      	ldr	r3, [pc, #484]	; (19f80 <operateOnWaterEvent+0x320>)
   19d9a:	735a      	strb	r2, [r3, #13]
			if (factory_settings_parameter_struct.ENABLE_M2M)
   19d9c:	e011      	b.n	19dc2 <operateOnWaterEvent+0x162>
				}
			}
		}
		else if (uLevel==MIDLEVEL && undergroundLevel<MIDLEVEL)		// increase in water level
   19d9e:	1dfb      	adds	r3, r7, #7
   19da0:	781b      	ldrb	r3, [r3, #0]
   19da2:	2b02      	cmp	r3, #2
   19da4:	d10e      	bne.n	19dc4 <operateOnWaterEvent+0x164>
   19da6:	4b70      	ldr	r3, [pc, #448]	; (19f68 <operateOnWaterEvent+0x308>)
   19da8:	781b      	ldrb	r3, [r3, #0]
   19daa:	2b01      	cmp	r3, #1
   19dac:	d80a      	bhi.n	19dc4 <operateOnWaterEvent+0x164>
		{
			simEventTemp[16] = registerEvent('Z'); //report To SIM water level is increasing..
   19dae:	205a      	movs	r0, #90	; 0x5a
   19db0:	4b72      	ldr	r3, [pc, #456]	; (19f7c <operateOnWaterEvent+0x31c>)
   19db2:	4798      	blx	r3
   19db4:	0003      	movs	r3, r0
   19db6:	001a      	movs	r2, r3
   19db8:	4b71      	ldr	r3, [pc, #452]	; (19f80 <operateOnWaterEvent+0x320>)
   19dba:	741a      	strb	r2, [r3, #16]
   19dbc:	e002      	b.n	19dc4 <operateOnWaterEvent+0x164>
			if (factory_settings_parameter_struct.ENABLE_M2M)
   19dbe:	46c0      	nop			; (mov r8, r8)
   19dc0:	e000      	b.n	19dc4 <operateOnWaterEvent+0x164>
			if (factory_settings_parameter_struct.ENABLE_M2M)
   19dc2:	46c0      	nop			; (mov r8, r8)
		}
		if (factory_settings_parameter_struct.ENABLE_GP)
   19dc4:	4b69      	ldr	r3, [pc, #420]	; (19f6c <operateOnWaterEvent+0x30c>)
   19dc6:	791b      	ldrb	r3, [r3, #4]
   19dc8:	2b00      	cmp	r3, #0
   19dca:	d100      	bne.n	19dce <operateOnWaterEvent+0x16e>
   19dcc:	e0b2      	b.n	19f34 <operateOnWaterEvent+0x2d4>
		{
			if(oLevel!=overheadLevel)
   19dce:	4b68      	ldr	r3, [pc, #416]	; (19f70 <operateOnWaterEvent+0x310>)
   19dd0:	781b      	ldrb	r3, [r3, #0]
   19dd2:	b2db      	uxtb	r3, r3
   19dd4:	1dba      	adds	r2, r7, #6
   19dd6:	7812      	ldrb	r2, [r2, #0]
   19dd8:	429a      	cmp	r2, r3
   19dda:	d100      	bne.n	19dde <operateOnWaterEvent+0x17e>
   19ddc:	e0aa      	b.n	19f34 <operateOnWaterEvent+0x2d4>
			{
				if(oLevel==OVERHEADHIGHLEVEL && overheadLevel<OVERHEADHIGHLEVEL)		////overhead tank is full
   19dde:	1dbb      	adds	r3, r7, #6
   19de0:	781b      	ldrb	r3, [r3, #0]
   19de2:	2b02      	cmp	r3, #2
   19de4:	d111      	bne.n	19e0a <operateOnWaterEvent+0x1aa>
   19de6:	4b62      	ldr	r3, [pc, #392]	; (19f70 <operateOnWaterEvent+0x310>)
   19de8:	781b      	ldrb	r3, [r3, #0]
   19dea:	b2db      	uxtb	r3, r3
   19dec:	2b01      	cmp	r3, #1
   19dee:	d80c      	bhi.n	19e0a <operateOnWaterEvent+0x1aa>
				{
					stopMotor(false,true,false);
   19df0:	2200      	movs	r2, #0
   19df2:	2101      	movs	r1, #1
   19df4:	2000      	movs	r0, #0
   19df6:	4b60      	ldr	r3, [pc, #384]	; (19f78 <operateOnWaterEvent+0x318>)
   19df8:	4798      	blx	r3
					simEventTemp[17] = registerEvent('V'); //report To SIM Motor Off due to overhead tank full
   19dfa:	2056      	movs	r0, #86	; 0x56
   19dfc:	4b5f      	ldr	r3, [pc, #380]	; (19f7c <operateOnWaterEvent+0x31c>)
   19dfe:	4798      	blx	r3
   19e00:	0003      	movs	r3, r0
   19e02:	001a      	movs	r2, r3
   19e04:	4b5e      	ldr	r3, [pc, #376]	; (19f80 <operateOnWaterEvent+0x320>)
   19e06:	745a      	strb	r2, [r3, #17]
   19e08:	e094      	b.n	19f34 <operateOnWaterEvent+0x2d4>
				}
				else if (oLevel==OVERHEADCRITICALLEVEL && overheadLevel>OVERHEADCRITICALLEVEL)	// overhead tank empty.
   19e0a:	1dbb      	adds	r3, r7, #6
   19e0c:	781b      	ldrb	r3, [r3, #0]
   19e0e:	2b00      	cmp	r3, #0
   19e10:	d000      	beq.n	19e14 <operateOnWaterEvent+0x1b4>
   19e12:	e08f      	b.n	19f34 <operateOnWaterEvent+0x2d4>
   19e14:	4b56      	ldr	r3, [pc, #344]	; (19f70 <operateOnWaterEvent+0x310>)
   19e16:	781b      	ldrb	r3, [r3, #0]
   19e18:	b2db      	uxtb	r3, r3
   19e1a:	2b00      	cmp	r3, #0
   19e1c:	d100      	bne.n	19e20 <operateOnWaterEvent+0x1c0>
   19e1e:	e089      	b.n	19f34 <operateOnWaterEvent+0x2d4>
				{
					simEventTemp[18] = registerEvent('W'); //report To SIM , overhead tank empty.
   19e20:	2057      	movs	r0, #87	; 0x57
   19e22:	4b56      	ldr	r3, [pc, #344]	; (19f7c <operateOnWaterEvent+0x31c>)
   19e24:	4798      	blx	r3
   19e26:	0003      	movs	r3, r0
   19e28:	001a      	movs	r2, r3
   19e2a:	4b55      	ldr	r3, [pc, #340]	; (19f80 <operateOnWaterEvent+0x320>)
   19e2c:	749a      	strb	r2, [r3, #18]
   19e2e:	e081      	b.n	19f34 <operateOnWaterEvent+0x2d4>
			}
		}
	}
	else
	{
		if (factory_settings_parameter_struct.ENABLE_M2M)
   19e30:	4b4e      	ldr	r3, [pc, #312]	; (19f6c <operateOnWaterEvent+0x30c>)
   19e32:	78db      	ldrb	r3, [r3, #3]
   19e34:	2b00      	cmp	r3, #0
   19e36:	d027      	beq.n	19e88 <operateOnWaterEvent+0x228>
		{
			if(m2m_Numbers_struct.m2mSetting && uLevel<MIDLEVEL && undergroundLevel>=MIDLEVEL)	//level is decreased
   19e38:	4b52      	ldr	r3, [pc, #328]	; (19f84 <operateOnWaterEvent+0x324>)
   19e3a:	795b      	ldrb	r3, [r3, #5]
   19e3c:	2b00      	cmp	r3, #0
   19e3e:	d00b      	beq.n	19e58 <operateOnWaterEvent+0x1f8>
   19e40:	1dfb      	adds	r3, r7, #7
   19e42:	781b      	ldrb	r3, [r3, #0]
   19e44:	2b01      	cmp	r3, #1
   19e46:	d807      	bhi.n	19e58 <operateOnWaterEvent+0x1f8>
   19e48:	4b47      	ldr	r3, [pc, #284]	; (19f68 <operateOnWaterEvent+0x308>)
   19e4a:	781b      	ldrb	r3, [r3, #0]
   19e4c:	2b01      	cmp	r3, #1
   19e4e:	d903      	bls.n	19e58 <operateOnWaterEvent+0x1f8>
			{
				m2mEvent_arr[0] = ME_WAITREGISTER;
   19e50:	4b4d      	ldr	r3, [pc, #308]	; (19f88 <operateOnWaterEvent+0x328>)
   19e52:	2201      	movs	r2, #1
   19e54:	701a      	strb	r2, [r3, #0]
   19e56:	e04d      	b.n	19ef4 <operateOnWaterEvent+0x294>
			}
			else if (uLevel==HIGHLEVEL && undergroundLevel<HIGHLEVEL)			//well is full
   19e58:	1dfb      	adds	r3, r7, #7
   19e5a:	781b      	ldrb	r3, [r3, #0]
   19e5c:	2b03      	cmp	r3, #3
   19e5e:	d149      	bne.n	19ef4 <operateOnWaterEvent+0x294>
   19e60:	4b41      	ldr	r3, [pc, #260]	; (19f68 <operateOnWaterEvent+0x308>)
   19e62:	781b      	ldrb	r3, [r3, #0]
   19e64:	2b02      	cmp	r3, #2
   19e66:	d845      	bhi.n	19ef4 <operateOnWaterEvent+0x294>
			{
				if(m2m_Numbers_struct.m2mSetting)
   19e68:	4b46      	ldr	r3, [pc, #280]	; (19f84 <operateOnWaterEvent+0x324>)
   19e6a:	795b      	ldrb	r3, [r3, #5]
   19e6c:	2b00      	cmp	r3, #0
   19e6e:	d003      	beq.n	19e78 <operateOnWaterEvent+0x218>
				{
					m2mEvent_arr[1] = ME_WAITREGISTER;
   19e70:	4b45      	ldr	r3, [pc, #276]	; (19f88 <operateOnWaterEvent+0x328>)
   19e72:	2201      	movs	r2, #1
   19e74:	705a      	strb	r2, [r3, #1]
   19e76:	e03d      	b.n	19ef4 <operateOnWaterEvent+0x294>
				}
				else
				{
					simEventTemp[15] = registerEvent('E'); //report To SIM well is full.
   19e78:	2045      	movs	r0, #69	; 0x45
   19e7a:	4b40      	ldr	r3, [pc, #256]	; (19f7c <operateOnWaterEvent+0x31c>)
   19e7c:	4798      	blx	r3
   19e7e:	0003      	movs	r3, r0
   19e80:	001a      	movs	r2, r3
   19e82:	4b3f      	ldr	r3, [pc, #252]	; (19f80 <operateOnWaterEvent+0x320>)
   19e84:	73da      	strb	r2, [r3, #15]
   19e86:	e035      	b.n	19ef4 <operateOnWaterEvent+0x294>
				}
			}
		}
		else if(uLevel==HIGHLEVEL && undergroundLevel<HIGHLEVEL)		//well is full
   19e88:	1dfb      	adds	r3, r7, #7
   19e8a:	781b      	ldrb	r3, [r3, #0]
   19e8c:	2b03      	cmp	r3, #3
   19e8e:	d10b      	bne.n	19ea8 <operateOnWaterEvent+0x248>
   19e90:	4b35      	ldr	r3, [pc, #212]	; (19f68 <operateOnWaterEvent+0x308>)
   19e92:	781b      	ldrb	r3, [r3, #0]
   19e94:	2b02      	cmp	r3, #2
   19e96:	d807      	bhi.n	19ea8 <operateOnWaterEvent+0x248>
		{
			simEventTemp[15] = registerEvent('E'); //report To SIM well is full.
   19e98:	2045      	movs	r0, #69	; 0x45
   19e9a:	4b38      	ldr	r3, [pc, #224]	; (19f7c <operateOnWaterEvent+0x31c>)
   19e9c:	4798      	blx	r3
   19e9e:	0003      	movs	r3, r0
   19ea0:	001a      	movs	r2, r3
   19ea2:	4b37      	ldr	r3, [pc, #220]	; (19f80 <operateOnWaterEvent+0x320>)
   19ea4:	73da      	strb	r2, [r3, #15]
   19ea6:	e025      	b.n	19ef4 <operateOnWaterEvent+0x294>
		}
		else if (uLevel==MIDLEVEL && undergroundLevel<MIDLEVEL)		// underground level is increasing
   19ea8:	1dfb      	adds	r3, r7, #7
   19eaa:	781b      	ldrb	r3, [r3, #0]
   19eac:	2b02      	cmp	r3, #2
   19eae:	d121      	bne.n	19ef4 <operateOnWaterEvent+0x294>
   19eb0:	4b2d      	ldr	r3, [pc, #180]	; (19f68 <operateOnWaterEvent+0x308>)
   19eb2:	781b      	ldrb	r3, [r3, #0]
   19eb4:	2b01      	cmp	r3, #1
   19eb6:	d81d      	bhi.n	19ef4 <operateOnWaterEvent+0x294>
		{
			if (factory_settings_parameter_struct.ENABLE_GP)
   19eb8:	4b2c      	ldr	r3, [pc, #176]	; (19f6c <operateOnWaterEvent+0x30c>)
   19eba:	791b      	ldrb	r3, [r3, #4]
   19ebc:	2b00      	cmp	r3, #0
   19ebe:	d00e      	beq.n	19ede <operateOnWaterEvent+0x27e>
			{
				if (factory_settings_parameter_struct.DUAL_LEVEL)
   19ec0:	4b2a      	ldr	r3, [pc, #168]	; (19f6c <operateOnWaterEvent+0x30c>)
   19ec2:	799b      	ldrb	r3, [r3, #6]
   19ec4:	2b00      	cmp	r3, #0
   19ec6:	d00a      	beq.n	19ede <operateOnWaterEvent+0x27e>
				{
					if(oLevel<OVERHEADHIGHLEVEL)
   19ec8:	1dbb      	adds	r3, r7, #6
   19eca:	781b      	ldrb	r3, [r3, #0]
   19ecc:	2b01      	cmp	r3, #1
   19ece:	d806      	bhi.n	19ede <operateOnWaterEvent+0x27e>
					{
						if(user_settings_parameter_struct.autoStartAddress)			//autoStart is ON
   19ed0:	4b2e      	ldr	r3, [pc, #184]	; (19f8c <operateOnWaterEvent+0x32c>)
   19ed2:	785b      	ldrb	r3, [r3, #1]
   19ed4:	b2db      	uxtb	r3, r3
   19ed6:	2b00      	cmp	r3, #0
   19ed8:	d001      	beq.n	19ede <operateOnWaterEvent+0x27e>
						{
							triggerAutoStart();
   19eda:	4b2d      	ldr	r3, [pc, #180]	; (19f90 <operateOnWaterEvent+0x330>)
   19edc:	4798      	blx	r3
						}
					}
				}
			}
			if (factory_settings_parameter_struct.DUAL_LEVEL)
   19ede:	4b23      	ldr	r3, [pc, #140]	; (19f6c <operateOnWaterEvent+0x30c>)
   19ee0:	799b      	ldrb	r3, [r3, #6]
   19ee2:	2b00      	cmp	r3, #0
   19ee4:	d006      	beq.n	19ef4 <operateOnWaterEvent+0x294>
			{
				if(user_settings_parameter_struct.autoStartAddress)			//autoStart is ON
   19ee6:	4b29      	ldr	r3, [pc, #164]	; (19f8c <operateOnWaterEvent+0x32c>)
   19ee8:	785b      	ldrb	r3, [r3, #1]
   19eea:	b2db      	uxtb	r3, r3
   19eec:	2b00      	cmp	r3, #0
   19eee:	d001      	beq.n	19ef4 <operateOnWaterEvent+0x294>
				{
					triggerAutoStart();
   19ef0:	4b27      	ldr	r3, [pc, #156]	; (19f90 <operateOnWaterEvent+0x330>)
   19ef2:	4798      	blx	r3
				}
			}
		}
		if (factory_settings_parameter_struct.ENABLE_GP)
   19ef4:	4b1d      	ldr	r3, [pc, #116]	; (19f6c <operateOnWaterEvent+0x30c>)
   19ef6:	791b      	ldrb	r3, [r3, #4]
   19ef8:	2b00      	cmp	r3, #0
   19efa:	d01b      	beq.n	19f34 <operateOnWaterEvent+0x2d4>
		{
			if (oLevel==OVERHEADCRITICALLEVEL && overheadLevel>OVERHEADCRITICALLEVEL && uLevel>CRITICALLEVEL) // overhead tank is empty, and underground not low
   19efc:	1dbb      	adds	r3, r7, #6
   19efe:	781b      	ldrb	r3, [r3, #0]
   19f00:	2b00      	cmp	r3, #0
   19f02:	d117      	bne.n	19f34 <operateOnWaterEvent+0x2d4>
   19f04:	4b1a      	ldr	r3, [pc, #104]	; (19f70 <operateOnWaterEvent+0x310>)
   19f06:	781b      	ldrb	r3, [r3, #0]
   19f08:	b2db      	uxtb	r3, r3
   19f0a:	2b00      	cmp	r3, #0
   19f0c:	d012      	beq.n	19f34 <operateOnWaterEvent+0x2d4>
   19f0e:	1dfb      	adds	r3, r7, #7
   19f10:	781b      	ldrb	r3, [r3, #0]
   19f12:	2b00      	cmp	r3, #0
   19f14:	d00e      	beq.n	19f34 <operateOnWaterEvent+0x2d4>
			{
				if(user_settings_parameter_struct.autoStartAddress)		//autoStart is ON
   19f16:	4b1d      	ldr	r3, [pc, #116]	; (19f8c <operateOnWaterEvent+0x32c>)
   19f18:	785b      	ldrb	r3, [r3, #1]
   19f1a:	b2db      	uxtb	r3, r3
   19f1c:	2b00      	cmp	r3, #0
   19f1e:	d002      	beq.n	19f26 <operateOnWaterEvent+0x2c6>
				{
					triggerAutoStart();
   19f20:	4b1b      	ldr	r3, [pc, #108]	; (19f90 <operateOnWaterEvent+0x330>)
   19f22:	4798      	blx	r3
   19f24:	e006      	b.n	19f34 <operateOnWaterEvent+0x2d4>
				}
				else
				{
					simEventTemp[18] = registerEvent('W'); //report To SIM overhead tank is empty.
   19f26:	2057      	movs	r0, #87	; 0x57
   19f28:	4b14      	ldr	r3, [pc, #80]	; (19f7c <operateOnWaterEvent+0x31c>)
   19f2a:	4798      	blx	r3
   19f2c:	0003      	movs	r3, r0
   19f2e:	001a      	movs	r2, r3
   19f30:	4b13      	ldr	r3, [pc, #76]	; (19f80 <operateOnWaterEvent+0x320>)
   19f32:	749a      	strb	r2, [r3, #18]
				}
			}
		}
	}
	if (factory_settings_parameter_struct.ENABLE_GP)
   19f34:	4b0d      	ldr	r3, [pc, #52]	; (19f6c <operateOnWaterEvent+0x30c>)
   19f36:	791b      	ldrb	r3, [r3, #4]
   19f38:	2b00      	cmp	r3, #0
   19f3a:	d004      	beq.n	19f46 <operateOnWaterEvent+0x2e6>
	{
		updateOverheadLevel(oLevel);
   19f3c:	1dbb      	adds	r3, r7, #6
   19f3e:	781b      	ldrb	r3, [r3, #0]
   19f40:	0018      	movs	r0, r3
   19f42:	4b14      	ldr	r3, [pc, #80]	; (19f94 <operateOnWaterEvent+0x334>)
   19f44:	4798      	blx	r3
	}
	updateUndergroundLevel(uLevel);
   19f46:	1dfb      	adds	r3, r7, #7
   19f48:	781b      	ldrb	r3, [r3, #0]
   19f4a:	0018      	movs	r0, r3
   19f4c:	4b12      	ldr	r3, [pc, #72]	; (19f98 <operateOnWaterEvent+0x338>)
   19f4e:	4798      	blx	r3
   19f50:	e002      	b.n	19f58 <operateOnWaterEvent+0x2f8>
			return;
   19f52:	46c0      	nop			; (mov r8, r8)
   19f54:	e000      	b.n	19f58 <operateOnWaterEvent+0x2f8>
				return;
   19f56:	46c0      	nop			; (mov r8, r8)
}
   19f58:	46bd      	mov	sp, r7
   19f5a:	b002      	add	sp, #8
   19f5c:	bd80      	pop	{r7, pc}
   19f5e:	46c0      	nop			; (mov r8, r8)
   19f60:	20000971 	.word	0x20000971
   19f64:	20000962 	.word	0x20000962
   19f68:	20000a58 	.word	0x20000a58
   19f6c:	2000082c 	.word	0x2000082c
   19f70:	20000990 	.word	0x20000990
   19f74:	0001b021 	.word	0x0001b021
   19f78:	0001b925 	.word	0x0001b925
   19f7c:	00014b5d 	.word	0x00014b5d
   19f80:	20000918 	.word	0x20000918
   19f84:	20000754 	.word	0x20000754
   19f88:	200009c0 	.word	0x200009c0
   19f8c:	20000854 	.word	0x20000854
   19f90:	0001b385 	.word	0x0001b385
   19f94:	00019799 	.word	0x00019799
   19f98:	000198c9 	.word	0x000198c9

00019f9c <Configure_ADC0>:

void Configure_ADC0(void)
{
   19f9c:	b580      	push	{r7, lr}
   19f9e:	b08c      	sub	sp, #48	; 0x30
   19fa0:	af00      	add	r7, sp, #0
	struct adc_config config;
	adc_get_config_defaults(&config);
   19fa2:	003b      	movs	r3, r7
   19fa4:	0018      	movs	r0, r3
   19fa6:	4b1a      	ldr	r3, [pc, #104]	; (1a010 <Configure_ADC0+0x74>)
   19fa8:	4798      	blx	r3
	config.positive_input = ADC_POSITIVE_INPUT_PIN19;
   19faa:	003b      	movs	r3, r7
   19fac:	2213      	movs	r2, #19
   19fae:	731a      	strb	r2, [r3, #12]
	config.negative_input = ADC_NEGATIVE_INPUT_GND;
   19fb0:	003b      	movs	r3, r7
   19fb2:	22c0      	movs	r2, #192	; 0xc0
   19fb4:	0152      	lsls	r2, r2, #5
   19fb6:	81da      	strh	r2, [r3, #14]
	config.reference      = ADC_REFERENCE_AREFA;//ADC_REFERENCE_INT1V;
   19fb8:	003b      	movs	r3, r7
   19fba:	2203      	movs	r2, #3
   19fbc:	705a      	strb	r2, [r3, #1]
	config.clock_source   = GCLK_GENERATOR_3;
   19fbe:	003b      	movs	r3, r7
   19fc0:	2203      	movs	r2, #3
   19fc2:	701a      	strb	r2, [r3, #0]
	config.gain_factor    = ADC_GAIN_FACTOR_1X;
   19fc4:	003b      	movs	r3, r7
   19fc6:	2200      	movs	r2, #0
   19fc8:	609a      	str	r2, [r3, #8]
	config.resolution	= ADC_RESOLUTION_12BIT;
   19fca:	003b      	movs	r3, r7
   19fcc:	2200      	movs	r2, #0
   19fce:	711a      	strb	r2, [r3, #4]
	
	config.clock_prescaler = ADC_CLOCK_PRESCALER_DIV64; //125kHz adc clock (8MHz/64)
   19fd0:	003b      	movs	r3, r7
   19fd2:	2280      	movs	r2, #128	; 0x80
   19fd4:	00d2      	lsls	r2, r2, #3
   19fd6:	805a      	strh	r2, [r3, #2]
	
	config.run_in_standby = true;
   19fd8:	003b      	movs	r3, r7
   19fda:	2201      	movs	r2, #1
   19fdc:	755a      	strb	r2, [r3, #21]
	
	adc_init(&adc_inst, ADC, &config);// Initialize the ADC
   19fde:	003a      	movs	r2, r7
   19fe0:	490c      	ldr	r1, [pc, #48]	; (1a014 <Configure_ADC0+0x78>)
   19fe2:	4b0d      	ldr	r3, [pc, #52]	; (1a018 <Configure_ADC0+0x7c>)
   19fe4:	0018      	movs	r0, r3
   19fe6:	4b0d      	ldr	r3, [pc, #52]	; (1a01c <Configure_ADC0+0x80>)
   19fe8:	4798      	blx	r3
	
	/************************************************************************/
	/*ADC Callback Setup                                                    */
	adc_register_callback(&adc_inst, adc_buffer_complete_callback, ADC_CALLBACK_READ_BUFFER);
   19fea:	490d      	ldr	r1, [pc, #52]	; (1a020 <Configure_ADC0+0x84>)
   19fec:	4b0a      	ldr	r3, [pc, #40]	; (1a018 <Configure_ADC0+0x7c>)
   19fee:	2200      	movs	r2, #0
   19ff0:	0018      	movs	r0, r3
   19ff2:	4b0c      	ldr	r3, [pc, #48]	; (1a024 <Configure_ADC0+0x88>)
   19ff4:	4798      	blx	r3
	adc_enable_callback(&adc_inst, ADC_CALLBACK_READ_BUFFER);
   19ff6:	4b08      	ldr	r3, [pc, #32]	; (1a018 <Configure_ADC0+0x7c>)
   19ff8:	2100      	movs	r1, #0
   19ffa:	0018      	movs	r0, r3
   19ffc:	4b0a      	ldr	r3, [pc, #40]	; (1a028 <Configure_ADC0+0x8c>)
   19ffe:	4798      	blx	r3
	/************************************************************************/
	
	adc_enable(&adc_inst);
   1a000:	4b05      	ldr	r3, [pc, #20]	; (1a018 <Configure_ADC0+0x7c>)
   1a002:	0018      	movs	r0, r3
   1a004:	4b09      	ldr	r3, [pc, #36]	; (1a02c <Configure_ADC0+0x90>)
   1a006:	4798      	blx	r3
}
   1a008:	46c0      	nop			; (mov r8, r8)
   1a00a:	46bd      	mov	sp, r7
   1a00c:	b00c      	add	sp, #48	; 0x30
   1a00e:	bd80      	pop	{r7, pc}
   1a010:	0001d3c1 	.word	0x0001d3c1
   1a014:	42004000 	.word	0x42004000
   1a018:	20000a1c 	.word	0x20000a1c
   1a01c:	0001da11 	.word	0x0001da11
   1a020:	0001a031 	.word	0x0001a031
   1a024:	0001dd11 	.word	0x0001dd11
   1a028:	000195a1 	.word	0x000195a1
   1a02c:	00019409 	.word	0x00019409

0001a030 <adc_buffer_complete_callback>:

void adc_buffer_complete_callback(const struct adc_module *const module)
{
   1a030:	b580      	push	{r7, lr}
   1a032:	b082      	sub	sp, #8
   1a034:	af00      	add	r7, sp, #0
   1a036:	6078      	str	r0, [r7, #4]
	adc_read_buffer_done = true;
   1a038:	4b06      	ldr	r3, [pc, #24]	; (1a054 <adc_buffer_complete_callback+0x24>)
   1a03a:	2201      	movs	r2, #1
   1a03c:	701a      	strb	r2, [r3, #0]
	vTaskNotifyGiveFromISR(motorTask,NULL);
   1a03e:	4b06      	ldr	r3, [pc, #24]	; (1a058 <adc_buffer_complete_callback+0x28>)
   1a040:	681b      	ldr	r3, [r3, #0]
   1a042:	2100      	movs	r1, #0
   1a044:	0018      	movs	r0, r3
   1a046:	4b05      	ldr	r3, [pc, #20]	; (1a05c <adc_buffer_complete_callback+0x2c>)
   1a048:	4798      	blx	r3
}
   1a04a:	46c0      	nop			; (mov r8, r8)
   1a04c:	46bd      	mov	sp, r7
   1a04e:	b002      	add	sp, #8
   1a050:	bd80      	pop	{r7, pc}
   1a052:	46c0      	nop			; (mov r8, r8)
   1a054:	20000945 	.word	0x20000945
   1a058:	20000438 	.word	0x20000438
   1a05c:	00020b75 	.word	0x00020b75

0001a060 <Read_ADC0>:

uint32_t Read_ADC0(uint32_t adc_pin,uint16_t samples)
{
   1a060:	b580      	push	{r7, lr}
   1a062:	b084      	sub	sp, #16
   1a064:	af00      	add	r7, sp, #0
   1a066:	6078      	str	r0, [r7, #4]
   1a068:	000a      	movs	r2, r1
   1a06a:	1cbb      	adds	r3, r7, #2
   1a06c:	801a      	strh	r2, [r3, #0]
	adc_set_positive_input(&adc_inst, adc_pin);
   1a06e:	687b      	ldr	r3, [r7, #4]
   1a070:	b2da      	uxtb	r2, r3
   1a072:	4b24      	ldr	r3, [pc, #144]	; (1a104 <Read_ADC0+0xa4>)
   1a074:	0011      	movs	r1, r2
   1a076:	0018      	movs	r0, r3
   1a078:	4b23      	ldr	r3, [pc, #140]	; (1a108 <Read_ADC0+0xa8>)
   1a07a:	4798      	blx	r3
	uint16_t current_value = 0;
   1a07c:	2308      	movs	r3, #8
   1a07e:	18fb      	adds	r3, r7, r3
   1a080:	2200      	movs	r2, #0
   1a082:	801a      	strh	r2, [r3, #0]
	uint32_t total_value = 0;
   1a084:	2300      	movs	r3, #0
   1a086:	60fb      	str	r3, [r7, #12]
	for (uint16_t uintLoop=0;uintLoop<samples;uintLoop++)
   1a088:	230a      	movs	r3, #10
   1a08a:	18fb      	adds	r3, r7, r3
   1a08c:	2200      	movs	r2, #0
   1a08e:	801a      	strh	r2, [r3, #0]
   1a090:	e026      	b.n	1a0e0 <Read_ADC0+0x80>
	{
		current_value = 0;
   1a092:	2308      	movs	r3, #8
   1a094:	18fb      	adds	r3, r7, r3
   1a096:	2200      	movs	r2, #0
   1a098:	801a      	strh	r2, [r3, #0]
		adc_start_conversion(&adc_inst);
   1a09a:	4b1a      	ldr	r3, [pc, #104]	; (1a104 <Read_ADC0+0xa4>)
   1a09c:	0018      	movs	r0, r3
   1a09e:	4b1b      	ldr	r3, [pc, #108]	; (1a10c <Read_ADC0+0xac>)
   1a0a0:	4798      	blx	r3
		while((adc_get_status(&adc_inst) & ADC_STATUS_RESULT_READY) != 1);
   1a0a2:	46c0      	nop			; (mov r8, r8)
   1a0a4:	4b17      	ldr	r3, [pc, #92]	; (1a104 <Read_ADC0+0xa4>)
   1a0a6:	0018      	movs	r0, r3
   1a0a8:	4b19      	ldr	r3, [pc, #100]	; (1a110 <Read_ADC0+0xb0>)
   1a0aa:	4798      	blx	r3
   1a0ac:	0002      	movs	r2, r0
   1a0ae:	2301      	movs	r3, #1
   1a0b0:	4013      	ands	r3, r2
   1a0b2:	2b01      	cmp	r3, #1
   1a0b4:	d1f6      	bne.n	1a0a4 <Read_ADC0+0x44>
		adc_read(&adc_inst, &current_value);
   1a0b6:	2308      	movs	r3, #8
   1a0b8:	18fa      	adds	r2, r7, r3
   1a0ba:	4b12      	ldr	r3, [pc, #72]	; (1a104 <Read_ADC0+0xa4>)
   1a0bc:	0011      	movs	r1, r2
   1a0be:	0018      	movs	r0, r3
   1a0c0:	4b14      	ldr	r3, [pc, #80]	; (1a114 <Read_ADC0+0xb4>)
   1a0c2:	4798      	blx	r3
		total_value+=current_value;
   1a0c4:	2308      	movs	r3, #8
   1a0c6:	18fb      	adds	r3, r7, r3
   1a0c8:	881b      	ldrh	r3, [r3, #0]
   1a0ca:	001a      	movs	r2, r3
   1a0cc:	68fb      	ldr	r3, [r7, #12]
   1a0ce:	189b      	adds	r3, r3, r2
   1a0d0:	60fb      	str	r3, [r7, #12]
	for (uint16_t uintLoop=0;uintLoop<samples;uintLoop++)
   1a0d2:	230a      	movs	r3, #10
   1a0d4:	18fb      	adds	r3, r7, r3
   1a0d6:	881a      	ldrh	r2, [r3, #0]
   1a0d8:	230a      	movs	r3, #10
   1a0da:	18fb      	adds	r3, r7, r3
   1a0dc:	3201      	adds	r2, #1
   1a0de:	801a      	strh	r2, [r3, #0]
   1a0e0:	230a      	movs	r3, #10
   1a0e2:	18fa      	adds	r2, r7, r3
   1a0e4:	1cbb      	adds	r3, r7, #2
   1a0e6:	8812      	ldrh	r2, [r2, #0]
   1a0e8:	881b      	ldrh	r3, [r3, #0]
   1a0ea:	429a      	cmp	r2, r3
   1a0ec:	d3d1      	bcc.n	1a092 <Read_ADC0+0x32>
	}
	
	return (total_value/samples);
   1a0ee:	1cbb      	adds	r3, r7, #2
   1a0f0:	881a      	ldrh	r2, [r3, #0]
   1a0f2:	4b09      	ldr	r3, [pc, #36]	; (1a118 <Read_ADC0+0xb8>)
   1a0f4:	0011      	movs	r1, r2
   1a0f6:	68f8      	ldr	r0, [r7, #12]
   1a0f8:	4798      	blx	r3
   1a0fa:	0003      	movs	r3, r0
}
   1a0fc:	0018      	movs	r0, r3
   1a0fe:	46bd      	mov	sp, r7
   1a100:	b004      	add	sp, #16
   1a102:	bd80      	pop	{r7, pc}
   1a104:	20000a1c 	.word	0x20000a1c
   1a108:	0001952d 	.word	0x0001952d
   1a10c:	00019469 	.word	0x00019469
   1a110:	00019361 	.word	0x00019361
   1a114:	000194b1 	.word	0x000194b1
   1a118:	000262e1 	.word	0x000262e1

0001a11c <Read_Voltage_ADC0>:


uint32_t Read_Voltage_ADC0(uint32_t adc_pin)
{
   1a11c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a11e:	b095      	sub	sp, #84	; 0x54
   1a120:	af00      	add	r7, sp, #0
   1a122:	62f8      	str	r0, [r7, #44]	; 0x2c
   1a124:	466b      	mov	r3, sp
   1a126:	62bb      	str	r3, [r7, #40]	; 0x28
	delay_ms(5);
   1a128:	2000      	movs	r0, #0
   1a12a:	4b82      	ldr	r3, [pc, #520]	; (1a334 <Read_Voltage_ADC0+0x218>)
   1a12c:	4798      	blx	r3
   1a12e:	0003      	movs	r3, r0
   1a130:	613b      	str	r3, [r7, #16]
   1a132:	2300      	movs	r3, #0
   1a134:	617b      	str	r3, [r7, #20]
   1a136:	6938      	ldr	r0, [r7, #16]
   1a138:	6979      	ldr	r1, [r7, #20]
   1a13a:	0003      	movs	r3, r0
   1a13c:	000c      	movs	r4, r1
   1a13e:	0f9a      	lsrs	r2, r3, #30
   1a140:	00a6      	lsls	r6, r4, #2
   1a142:	4316      	orrs	r6, r2
   1a144:	009d      	lsls	r5, r3, #2
   1a146:	0003      	movs	r3, r0
   1a148:	000c      	movs	r4, r1
   1a14a:	195b      	adds	r3, r3, r5
   1a14c:	4174      	adcs	r4, r6
   1a14e:	497a      	ldr	r1, [pc, #488]	; (1a338 <Read_Voltage_ADC0+0x21c>)
   1a150:	2200      	movs	r2, #0
   1a152:	185b      	adds	r3, r3, r1
   1a154:	4154      	adcs	r4, r2
   1a156:	0018      	movs	r0, r3
   1a158:	0021      	movs	r1, r4
   1a15a:	4c78      	ldr	r4, [pc, #480]	; (1a33c <Read_Voltage_ADC0+0x220>)
   1a15c:	4a78      	ldr	r2, [pc, #480]	; (1a340 <Read_Voltage_ADC0+0x224>)
   1a15e:	2300      	movs	r3, #0
   1a160:	47a0      	blx	r4
   1a162:	0003      	movs	r3, r0
   1a164:	000c      	movs	r4, r1
   1a166:	0018      	movs	r0, r3
   1a168:	4b76      	ldr	r3, [pc, #472]	; (1a344 <Read_Voltage_ADC0+0x228>)
   1a16a:	4798      	blx	r3
	
	adc_set_positive_input(&adc_inst, adc_pin);
   1a16c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1a16e:	b2da      	uxtb	r2, r3
   1a170:	4b75      	ldr	r3, [pc, #468]	; (1a348 <Read_Voltage_ADC0+0x22c>)
   1a172:	0011      	movs	r1, r2
   1a174:	0018      	movs	r0, r3
   1a176:	4b75      	ldr	r3, [pc, #468]	; (1a34c <Read_Voltage_ADC0+0x230>)
   1a178:	4798      	blx	r3
	//read 500 samples
	
	uint16_t no_of_samples = 544;  //272 samples contain one full cycle
   1a17a:	2320      	movs	r3, #32
   1a17c:	2228      	movs	r2, #40	; 0x28
   1a17e:	4694      	mov	ip, r2
   1a180:	44bc      	add	ip, r7
   1a182:	4463      	add	r3, ip
   1a184:	2288      	movs	r2, #136	; 0x88
   1a186:	0092      	lsls	r2, r2, #2
   1a188:	801a      	strh	r2, [r3, #0]
	uint16_t samples_buffer[no_of_samples];
   1a18a:	2320      	movs	r3, #32
   1a18c:	2228      	movs	r2, #40	; 0x28
   1a18e:	4694      	mov	ip, r2
   1a190:	44bc      	add	ip, r7
   1a192:	4463      	add	r3, ip
   1a194:	881b      	ldrh	r3, [r3, #0]
   1a196:	001a      	movs	r2, r3
   1a198:	3a01      	subs	r2, #1
   1a19a:	647a      	str	r2, [r7, #68]	; 0x44
   1a19c:	60bb      	str	r3, [r7, #8]
   1a19e:	2200      	movs	r2, #0
   1a1a0:	60fa      	str	r2, [r7, #12]
   1a1a2:	68b8      	ldr	r0, [r7, #8]
   1a1a4:	68f9      	ldr	r1, [r7, #12]
   1a1a6:	0002      	movs	r2, r0
   1a1a8:	0f12      	lsrs	r2, r2, #28
   1a1aa:	000c      	movs	r4, r1
   1a1ac:	0124      	lsls	r4, r4, #4
   1a1ae:	627c      	str	r4, [r7, #36]	; 0x24
   1a1b0:	6a7c      	ldr	r4, [r7, #36]	; 0x24
   1a1b2:	4314      	orrs	r4, r2
   1a1b4:	627c      	str	r4, [r7, #36]	; 0x24
   1a1b6:	0002      	movs	r2, r0
   1a1b8:	0112      	lsls	r2, r2, #4
   1a1ba:	623a      	str	r2, [r7, #32]
   1a1bc:	603b      	str	r3, [r7, #0]
   1a1be:	2200      	movs	r2, #0
   1a1c0:	607a      	str	r2, [r7, #4]
   1a1c2:	6838      	ldr	r0, [r7, #0]
   1a1c4:	6879      	ldr	r1, [r7, #4]
   1a1c6:	0002      	movs	r2, r0
   1a1c8:	0f12      	lsrs	r2, r2, #28
   1a1ca:	000c      	movs	r4, r1
   1a1cc:	0124      	lsls	r4, r4, #4
   1a1ce:	61fc      	str	r4, [r7, #28]
   1a1d0:	69fc      	ldr	r4, [r7, #28]
   1a1d2:	4314      	orrs	r4, r2
   1a1d4:	61fc      	str	r4, [r7, #28]
   1a1d6:	0002      	movs	r2, r0
   1a1d8:	0112      	lsls	r2, r2, #4
   1a1da:	61ba      	str	r2, [r7, #24]
   1a1dc:	005b      	lsls	r3, r3, #1
   1a1de:	3301      	adds	r3, #1
   1a1e0:	3307      	adds	r3, #7
   1a1e2:	08db      	lsrs	r3, r3, #3
   1a1e4:	00db      	lsls	r3, r3, #3
   1a1e6:	466a      	mov	r2, sp
   1a1e8:	1ad3      	subs	r3, r2, r3
   1a1ea:	469d      	mov	sp, r3
   1a1ec:	466b      	mov	r3, sp
   1a1ee:	3301      	adds	r3, #1
   1a1f0:	085b      	lsrs	r3, r3, #1
   1a1f2:	005b      	lsls	r3, r3, #1
   1a1f4:	643b      	str	r3, [r7, #64]	; 0x40
	
	/************************************************************************/
	/*Using Buffered ADC to take Readings                                   */
	/************************************************************************/
	adc_read_buffer_done = false;
   1a1f6:	4b56      	ldr	r3, [pc, #344]	; (1a350 <Read_Voltage_ADC0+0x234>)
   1a1f8:	2200      	movs	r2, #0
   1a1fa:	701a      	strb	r2, [r3, #0]
	//uint32_t temp = xTaskGetTickCount();
	while(adc_read_buffer_job(&adc_inst, samples_buffer, no_of_samples)!=STATUS_OK)
   1a1fc:	46c0      	nop			; (mov r8, r8)
   1a1fe:	6c39      	ldr	r1, [r7, #64]	; 0x40
   1a200:	2320      	movs	r3, #32
   1a202:	2228      	movs	r2, #40	; 0x28
   1a204:	4694      	mov	ip, r2
   1a206:	44bc      	add	ip, r7
   1a208:	4463      	add	r3, ip
   1a20a:	881a      	ldrh	r2, [r3, #0]
   1a20c:	4b4e      	ldr	r3, [pc, #312]	; (1a348 <Read_Voltage_ADC0+0x22c>)
   1a20e:	0018      	movs	r0, r3
   1a210:	4b50      	ldr	r3, [pc, #320]	; (1a354 <Read_Voltage_ADC0+0x238>)
   1a212:	4798      	blx	r3
   1a214:	1e03      	subs	r3, r0, #0
   1a216:	d1f2      	bne.n	1a1fe <Read_Voltage_ADC0+0xe2>
	{}
	ulTaskNotifyTake(pdTRUE,100/portTICK_PERIOD_MS);
   1a218:	2164      	movs	r1, #100	; 0x64
   1a21a:	2001      	movs	r0, #1
   1a21c:	4b4e      	ldr	r3, [pc, #312]	; (1a358 <Read_Voltage_ADC0+0x23c>)
   1a21e:	4798      	blx	r3
	//while (adc_read(&adc_inst, &samples_buffer[i]) != STATUS_OK) {
	//}
	//}

	
	if(adc_read_buffer_done)
   1a220:	4b4b      	ldr	r3, [pc, #300]	; (1a350 <Read_Voltage_ADC0+0x234>)
   1a222:	781b      	ldrb	r3, [r3, #0]
   1a224:	2b00      	cmp	r3, #0
   1a226:	d100      	bne.n	1a22a <Read_Voltage_ADC0+0x10e>
   1a228:	e07c      	b.n	1a324 <Read_Voltage_ADC0+0x208>
	{
		uint32_t square = 0;
   1a22a:	2300      	movs	r3, #0
   1a22c:	64fb      	str	r3, [r7, #76]	; 0x4c
		double  mean = 0.0;
   1a22e:	2300      	movs	r3, #0
   1a230:	2400      	movs	r4, #0
   1a232:	63bb      	str	r3, [r7, #56]	; 0x38
   1a234:	63fc      	str	r4, [r7, #60]	; 0x3c
		double  root = 0.0;
   1a236:	2300      	movs	r3, #0
   1a238:	2400      	movs	r4, #0
   1a23a:	633b      	str	r3, [r7, #48]	; 0x30
   1a23c:	637c      	str	r4, [r7, #52]	; 0x34
		
		for (uint16_t i = 0; i < no_of_samples; i++)
   1a23e:	2322      	movs	r3, #34	; 0x22
   1a240:	2228      	movs	r2, #40	; 0x28
   1a242:	4694      	mov	ip, r2
   1a244:	44bc      	add	ip, r7
   1a246:	4463      	add	r3, ip
   1a248:	2200      	movs	r2, #0
   1a24a:	801a      	strh	r2, [r3, #0]
   1a24c:	e032      	b.n	1a2b4 <Read_Voltage_ADC0+0x198>
		{
			square += pow(samples_buffer[i], 2);
   1a24e:	2322      	movs	r3, #34	; 0x22
   1a250:	2228      	movs	r2, #40	; 0x28
   1a252:	4694      	mov	ip, r2
   1a254:	44bc      	add	ip, r7
   1a256:	4463      	add	r3, ip
   1a258:	881a      	ldrh	r2, [r3, #0]
   1a25a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1a25c:	0052      	lsls	r2, r2, #1
   1a25e:	5ad2      	ldrh	r2, [r2, r3]
   1a260:	4b3e      	ldr	r3, [pc, #248]	; (1a35c <Read_Voltage_ADC0+0x240>)
   1a262:	0010      	movs	r0, r2
   1a264:	4798      	blx	r3
   1a266:	2300      	movs	r3, #0
   1a268:	2480      	movs	r4, #128	; 0x80
   1a26a:	05e4      	lsls	r4, r4, #23
   1a26c:	001a      	movs	r2, r3
   1a26e:	0023      	movs	r3, r4
   1a270:	4c3b      	ldr	r4, [pc, #236]	; (1a360 <Read_Voltage_ADC0+0x244>)
   1a272:	47a0      	blx	r4
   1a274:	0005      	movs	r5, r0
   1a276:	000e      	movs	r6, r1
   1a278:	4b38      	ldr	r3, [pc, #224]	; (1a35c <Read_Voltage_ADC0+0x240>)
   1a27a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
   1a27c:	4798      	blx	r3
   1a27e:	4c39      	ldr	r4, [pc, #228]	; (1a364 <Read_Voltage_ADC0+0x248>)
   1a280:	002a      	movs	r2, r5
   1a282:	0033      	movs	r3, r6
   1a284:	47a0      	blx	r4
   1a286:	0003      	movs	r3, r0
   1a288:	000c      	movs	r4, r1
   1a28a:	0019      	movs	r1, r3
   1a28c:	0022      	movs	r2, r4
   1a28e:	4b36      	ldr	r3, [pc, #216]	; (1a368 <Read_Voltage_ADC0+0x24c>)
   1a290:	0008      	movs	r0, r1
   1a292:	0011      	movs	r1, r2
   1a294:	4798      	blx	r3
   1a296:	0003      	movs	r3, r0
   1a298:	64fb      	str	r3, [r7, #76]	; 0x4c
		for (uint16_t i = 0; i < no_of_samples; i++)
   1a29a:	2322      	movs	r3, #34	; 0x22
   1a29c:	2228      	movs	r2, #40	; 0x28
   1a29e:	4694      	mov	ip, r2
   1a2a0:	44bc      	add	ip, r7
   1a2a2:	4463      	add	r3, ip
   1a2a4:	881a      	ldrh	r2, [r3, #0]
   1a2a6:	2322      	movs	r3, #34	; 0x22
   1a2a8:	2128      	movs	r1, #40	; 0x28
   1a2aa:	468c      	mov	ip, r1
   1a2ac:	44bc      	add	ip, r7
   1a2ae:	4463      	add	r3, ip
   1a2b0:	3201      	adds	r2, #1
   1a2b2:	801a      	strh	r2, [r3, #0]
   1a2b4:	2322      	movs	r3, #34	; 0x22
   1a2b6:	2228      	movs	r2, #40	; 0x28
   1a2b8:	18ba      	adds	r2, r7, r2
   1a2ba:	18d2      	adds	r2, r2, r3
   1a2bc:	2320      	movs	r3, #32
   1a2be:	2128      	movs	r1, #40	; 0x28
   1a2c0:	468c      	mov	ip, r1
   1a2c2:	44bc      	add	ip, r7
   1a2c4:	4463      	add	r3, ip
   1a2c6:	8812      	ldrh	r2, [r2, #0]
   1a2c8:	881b      	ldrh	r3, [r3, #0]
   1a2ca:	429a      	cmp	r2, r3
   1a2cc:	d3bf      	bcc.n	1a24e <Read_Voltage_ADC0+0x132>
		}
		
		mean = (square / (float)(no_of_samples));
   1a2ce:	4b27      	ldr	r3, [pc, #156]	; (1a36c <Read_Voltage_ADC0+0x250>)
   1a2d0:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
   1a2d2:	4798      	blx	r3
   1a2d4:	1c04      	adds	r4, r0, #0
   1a2d6:	2320      	movs	r3, #32
   1a2d8:	2228      	movs	r2, #40	; 0x28
   1a2da:	4694      	mov	ip, r2
   1a2dc:	44bc      	add	ip, r7
   1a2de:	4463      	add	r3, ip
   1a2e0:	881a      	ldrh	r2, [r3, #0]
   1a2e2:	4b22      	ldr	r3, [pc, #136]	; (1a36c <Read_Voltage_ADC0+0x250>)
   1a2e4:	0010      	movs	r0, r2
   1a2e6:	4798      	blx	r3
   1a2e8:	1c02      	adds	r2, r0, #0
   1a2ea:	4b21      	ldr	r3, [pc, #132]	; (1a370 <Read_Voltage_ADC0+0x254>)
   1a2ec:	1c11      	adds	r1, r2, #0
   1a2ee:	1c20      	adds	r0, r4, #0
   1a2f0:	4798      	blx	r3
   1a2f2:	1c03      	adds	r3, r0, #0
   1a2f4:	1c1a      	adds	r2, r3, #0
   1a2f6:	4b1f      	ldr	r3, [pc, #124]	; (1a374 <Read_Voltage_ADC0+0x258>)
   1a2f8:	1c10      	adds	r0, r2, #0
   1a2fa:	4798      	blx	r3
   1a2fc:	0003      	movs	r3, r0
   1a2fe:	000c      	movs	r4, r1
   1a300:	63bb      	str	r3, [r7, #56]	; 0x38
   1a302:	63fc      	str	r4, [r7, #60]	; 0x3c
		// Calculate Root.
		root = sqrt(mean);
   1a304:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1a306:	6bfc      	ldr	r4, [r7, #60]	; 0x3c
   1a308:	0018      	movs	r0, r3
   1a30a:	0021      	movs	r1, r4
   1a30c:	4b1a      	ldr	r3, [pc, #104]	; (1a378 <Read_Voltage_ADC0+0x25c>)
   1a30e:	4798      	blx	r3
   1a310:	0003      	movs	r3, r0
   1a312:	000c      	movs	r4, r1
   1a314:	633b      	str	r3, [r7, #48]	; 0x30
   1a316:	637c      	str	r4, [r7, #52]	; 0x34
		//{
			//delay_us(1);
		//}
		////
		
		return (uint32_t)root;
   1a318:	4b13      	ldr	r3, [pc, #76]	; (1a368 <Read_Voltage_ADC0+0x24c>)
   1a31a:	6b38      	ldr	r0, [r7, #48]	; 0x30
   1a31c:	6b79      	ldr	r1, [r7, #52]	; 0x34
   1a31e:	4798      	blx	r3
   1a320:	0003      	movs	r3, r0
   1a322:	e000      	b.n	1a326 <Read_Voltage_ADC0+0x20a>
	}
	else
	{
		return 0;
   1a324:	2300      	movs	r3, #0
   1a326:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1a328:	4695      	mov	sp, r2
	//}
	//}
	//}
	//
	//return samples_buffer[5]; //0,1,2,3,4 are considered as voltage spikes
}
   1a32a:	0018      	movs	r0, r3
   1a32c:	46bd      	mov	sp, r7
   1a32e:	b015      	add	sp, #84	; 0x54
   1a330:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1a332:	46c0      	nop			; (mov r8, r8)
   1a334:	0002463d 	.word	0x0002463d
   1a338:	00001b57 	.word	0x00001b57
   1a33c:	00026649 	.word	0x00026649
   1a340:	00001b58 	.word	0x00001b58
   1a344:	20000001 	.word	0x20000001
   1a348:	20000a1c 	.word	0x20000a1c
   1a34c:	0001952d 	.word	0x0001952d
   1a350:	20000945 	.word	0x20000945
   1a354:	0001dd51 	.word	0x0001dd51
   1a358:	00020ae1 	.word	0x00020ae1
   1a35c:	000288d5 	.word	0x000288d5
   1a360:	0002504d 	.word	0x0002504d
   1a364:	00026df5 	.word	0x00026df5
   1a368:	000266dd 	.word	0x000266dd
   1a36c:	00026d69 	.word	0x00026d69
   1a370:	00026899 	.word	0x00026899
   1a374:	00028945 	.word	0x00028945
   1a378:	000253a5 	.word	0x000253a5

0001a37c <autoSetCurrent>:

void autoSetCurrent(void)
{
   1a37c:	b580      	push	{r7, lr}
   1a37e:	b084      	sub	sp, #16
   1a380:	af00      	add	r7, sp, #0
	if(getMotorState() && !startSequenceOn && !starDeltaTimerOn && !stopSequenceOn && getAllPhaseState())
   1a382:	4b2f      	ldr	r3, [pc, #188]	; (1a440 <autoSetCurrent+0xc4>)
   1a384:	4798      	blx	r3
   1a386:	1e03      	subs	r3, r0, #0
   1a388:	d050      	beq.n	1a42c <autoSetCurrent+0xb0>
   1a38a:	4b2e      	ldr	r3, [pc, #184]	; (1a444 <autoSetCurrent+0xc8>)
   1a38c:	781b      	ldrb	r3, [r3, #0]
   1a38e:	2201      	movs	r2, #1
   1a390:	4053      	eors	r3, r2
   1a392:	b2db      	uxtb	r3, r3
   1a394:	2b00      	cmp	r3, #0
   1a396:	d049      	beq.n	1a42c <autoSetCurrent+0xb0>
   1a398:	4b2b      	ldr	r3, [pc, #172]	; (1a448 <autoSetCurrent+0xcc>)
   1a39a:	781b      	ldrb	r3, [r3, #0]
   1a39c:	2201      	movs	r2, #1
   1a39e:	4053      	eors	r3, r2
   1a3a0:	b2db      	uxtb	r3, r3
   1a3a2:	2b00      	cmp	r3, #0
   1a3a4:	d042      	beq.n	1a42c <autoSetCurrent+0xb0>
   1a3a6:	4b29      	ldr	r3, [pc, #164]	; (1a44c <autoSetCurrent+0xd0>)
   1a3a8:	781b      	ldrb	r3, [r3, #0]
   1a3aa:	2201      	movs	r2, #1
   1a3ac:	4053      	eors	r3, r2
   1a3ae:	b2db      	uxtb	r3, r3
   1a3b0:	2b00      	cmp	r3, #0
   1a3b2:	d03b      	beq.n	1a42c <autoSetCurrent+0xb0>
   1a3b4:	4b26      	ldr	r3, [pc, #152]	; (1a450 <autoSetCurrent+0xd4>)
   1a3b6:	4798      	blx	r3
   1a3b8:	1e03      	subs	r3, r0, #0
   1a3ba:	d037      	beq.n	1a42c <autoSetCurrent+0xb0>
	{
		uint32_t ADCcurrent = Analog_Parameter_Struct.Motor_Current;
   1a3bc:	4b25      	ldr	r3, [pc, #148]	; (1a454 <autoSetCurrent+0xd8>)
   1a3be:	691b      	ldr	r3, [r3, #16]
   1a3c0:	60fb      	str	r3, [r7, #12]
		//ADCcurrent = Read_ADC0(ADC_POSITIVE_INPUT_PIN16,200);
		//xSemaphoreGive(xADC_Semaphore);
		//}
		
		
		if(ADCcurrent<250)     //ADC VALUE FOR 2.5A
   1a3c2:	68fb      	ldr	r3, [r7, #12]
   1a3c4:	2bf9      	cmp	r3, #249	; 0xf9
   1a3c6:	d806      	bhi.n	1a3d6 <autoSetCurrent+0x5a>
		{
			setCurrentDetection(false);
   1a3c8:	2000      	movs	r0, #0
   1a3ca:	4b23      	ldr	r3, [pc, #140]	; (1a458 <autoSetCurrent+0xdc>)
   1a3cc:	4798      	blx	r3
			setMotorMGRResponse('Y');		//ampere cleared
   1a3ce:	2059      	movs	r0, #89	; 0x59
   1a3d0:	4b22      	ldr	r3, [pc, #136]	; (1a45c <autoSetCurrent+0xe0>)
   1a3d2:	4798      	blx	r3
			return;
   1a3d4:	e030      	b.n	1a438 <autoSetCurrent+0xbc>
		}
		
		uint32_t tempUnder = ADCcurrent  * user_settings_parameter_struct.underloadPerAddress / 100;
   1a3d6:	4b22      	ldr	r3, [pc, #136]	; (1a460 <autoSetCurrent+0xe4>)
   1a3d8:	7f1b      	ldrb	r3, [r3, #28]
   1a3da:	b2db      	uxtb	r3, r3
   1a3dc:	001a      	movs	r2, r3
   1a3de:	68fb      	ldr	r3, [r7, #12]
   1a3e0:	435a      	muls	r2, r3
   1a3e2:	4b20      	ldr	r3, [pc, #128]	; (1a464 <autoSetCurrent+0xe8>)
   1a3e4:	2164      	movs	r1, #100	; 0x64
   1a3e6:	0010      	movs	r0, r2
   1a3e8:	4798      	blx	r3
   1a3ea:	0003      	movs	r3, r0
   1a3ec:	60bb      	str	r3, [r7, #8]
		uint32_t tempOver = ADCcurrent  * user_settings_parameter_struct.overloadPerAddress / 100;
   1a3ee:	4b1c      	ldr	r3, [pc, #112]	; (1a460 <autoSetCurrent+0xe4>)
   1a3f0:	7f5b      	ldrb	r3, [r3, #29]
   1a3f2:	b2db      	uxtb	r3, r3
   1a3f4:	001a      	movs	r2, r3
   1a3f6:	68fb      	ldr	r3, [r7, #12]
   1a3f8:	435a      	muls	r2, r3
   1a3fa:	4b1a      	ldr	r3, [pc, #104]	; (1a464 <autoSetCurrent+0xe8>)
   1a3fc:	2164      	movs	r1, #100	; 0x64
   1a3fe:	0010      	movs	r0, r2
   1a400:	4798      	blx	r3
   1a402:	0003      	movs	r3, r0
   1a404:	607b      	str	r3, [r7, #4]

		setNormalLoadValue(ADCcurrent);
   1a406:	68fb      	ldr	r3, [r7, #12]
   1a408:	0018      	movs	r0, r3
   1a40a:	4b17      	ldr	r3, [pc, #92]	; (1a468 <autoSetCurrent+0xec>)
   1a40c:	4798      	blx	r3
		setUnderloadValue(tempUnder);
   1a40e:	68bb      	ldr	r3, [r7, #8]
   1a410:	0018      	movs	r0, r3
   1a412:	4b16      	ldr	r3, [pc, #88]	; (1a46c <autoSetCurrent+0xf0>)
   1a414:	4798      	blx	r3
		setOverloadValue(tempOver);
   1a416:	687b      	ldr	r3, [r7, #4]
   1a418:	0018      	movs	r0, r3
   1a41a:	4b15      	ldr	r3, [pc, #84]	; (1a470 <autoSetCurrent+0xf4>)
   1a41c:	4798      	blx	r3
		setCurrentDetection(true);
   1a41e:	2001      	movs	r0, #1
   1a420:	4b0d      	ldr	r3, [pc, #52]	; (1a458 <autoSetCurrent+0xdc>)
   1a422:	4798      	blx	r3
		setMotorMGRResponse('K');		//ampere settings complete
   1a424:	204b      	movs	r0, #75	; 0x4b
   1a426:	4b0d      	ldr	r3, [pc, #52]	; (1a45c <autoSetCurrent+0xe0>)
   1a428:	4798      	blx	r3
	{
   1a42a:	e005      	b.n	1a438 <autoSetCurrent+0xbc>
	}
	else
	{
		setCurrentDetection(false);
   1a42c:	2000      	movs	r0, #0
   1a42e:	4b0a      	ldr	r3, [pc, #40]	; (1a458 <autoSetCurrent+0xdc>)
   1a430:	4798      	blx	r3
		setMotorMGRResponse('Y');		//ampere cleared
   1a432:	2059      	movs	r0, #89	; 0x59
   1a434:	4b09      	ldr	r3, [pc, #36]	; (1a45c <autoSetCurrent+0xe0>)
   1a436:	4798      	blx	r3
	}
}
   1a438:	46bd      	mov	sp, r7
   1a43a:	b004      	add	sp, #16
   1a43c:	bd80      	pop	{r7, pc}
   1a43e:	46c0      	nop			; (mov r8, r8)
   1a440:	0001b021 	.word	0x0001b021
   1a444:	20000999 	.word	0x20000999
   1a448:	2000099b 	.word	0x2000099b
   1a44c:	20000988 	.word	0x20000988
   1a450:	0001afb9 	.word	0x0001afb9
   1a454:	200008e8 	.word	0x200008e8
   1a458:	00011995 	.word	0x00011995
   1a45c:	00014d3d 	.word	0x00014d3d
   1a460:	20000854 	.word	0x20000854
   1a464:	000262e1 	.word	0x000262e1
   1a468:	00011951 	.word	0x00011951
   1a46c:	000118c9 	.word	0x000118c9
   1a470:	0001190d 	.word	0x0001190d

0001a474 <speakAmpere>:

void speakAmpere(void)
{
   1a474:	b580      	push	{r7, lr}
   1a476:	b084      	sub	sp, #16
   1a478:	af00      	add	r7, sp, #0
	if(getMotorState())
   1a47a:	4b0d      	ldr	r3, [pc, #52]	; (1a4b0 <speakAmpere+0x3c>)
   1a47c:	4798      	blx	r3
   1a47e:	1e03      	subs	r3, r0, #0
   1a480:	d00f      	beq.n	1a4a2 <speakAmpere+0x2e>
	{
		char cTemp[8];
		
		uint32_t ADCcurrent = Analog_Parameter_Struct.Motor_Current_IntPart;
   1a482:	4b0c      	ldr	r3, [pc, #48]	; (1a4b4 <speakAmpere+0x40>)
   1a484:	8a9b      	ldrh	r3, [r3, #20]
   1a486:	b29b      	uxth	r3, r3
   1a488:	60fb      	str	r3, [r7, #12]
		//xSemaphoreGive(xADC_Semaphore);
		//ADCcurrent = (ADCcurrent*7225)/100000;
		//xSemaphoreGive(xADC_Semaphore);
		//}
		
		utoa(ADCcurrent, cTemp, 10);
   1a48a:	1d39      	adds	r1, r7, #4
   1a48c:	68fb      	ldr	r3, [r7, #12]
   1a48e:	220a      	movs	r2, #10
   1a490:	0018      	movs	r0, r3
   1a492:	4b09      	ldr	r3, [pc, #36]	; (1a4b8 <speakAmpere+0x44>)
   1a494:	4798      	blx	r3
		playRepeatedFiles(cTemp);
   1a496:	1d3b      	adds	r3, r7, #4
   1a498:	0018      	movs	r0, r3
   1a49a:	4b08      	ldr	r3, [pc, #32]	; (1a4bc <speakAmpere+0x48>)
   1a49c:	4798      	blx	r3
		return;
   1a49e:	46c0      	nop			; (mov r8, r8)
   1a4a0:	e002      	b.n	1a4a8 <speakAmpere+0x34>
	}
	setMotorMGRResponse('-');
   1a4a2:	202d      	movs	r0, #45	; 0x2d
   1a4a4:	4b06      	ldr	r3, [pc, #24]	; (1a4c0 <speakAmpere+0x4c>)
   1a4a6:	4798      	blx	r3
}
   1a4a8:	46bd      	mov	sp, r7
   1a4aa:	b004      	add	sp, #16
   1a4ac:	bd80      	pop	{r7, pc}
   1a4ae:	46c0      	nop			; (mov r8, r8)
   1a4b0:	0001b021 	.word	0x0001b021
   1a4b4:	200008e8 	.word	0x200008e8
   1a4b8:	0002909d 	.word	0x0002909d
   1a4bc:	000149f9 	.word	0x000149f9
   1a4c0:	00014d3d 	.word	0x00014d3d

0001a4c4 <PR2_ISR>:

void PR2_ISR(void)
{
   1a4c4:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a4c6:	b08b      	sub	sp, #44	; 0x2c
   1a4c8:	af00      	add	r7, sp, #0
	if (ucharPhase_Seq_Check_Flag==1)
   1a4ca:	4b77      	ldr	r3, [pc, #476]	; (1a6a8 <PR2_ISR+0x1e4>)
   1a4cc:	781b      	ldrb	r3, [r3, #0]
   1a4ce:	b2db      	uxtb	r3, r3
   1a4d0:	2b01      	cmp	r3, #1
   1a4d2:	d000      	beq.n	1a4d6 <PR2_ISR+0x12>
   1a4d4:	e0e3      	b.n	1a69e <PR2_ISR+0x1da>
	{
		ucharPhase_1_Timer_Counter=0;
   1a4d6:	4b75      	ldr	r3, [pc, #468]	; (1a6ac <PR2_ISR+0x1e8>)
   1a4d8:	2200      	movs	r2, #0
   1a4da:	701a      	strb	r2, [r3, #0]
		delay_ms(5);
   1a4dc:	2000      	movs	r0, #0
   1a4de:	4b74      	ldr	r3, [pc, #464]	; (1a6b0 <PR2_ISR+0x1ec>)
   1a4e0:	4798      	blx	r3
   1a4e2:	0003      	movs	r3, r0
   1a4e4:	60bb      	str	r3, [r7, #8]
   1a4e6:	2300      	movs	r3, #0
   1a4e8:	60fb      	str	r3, [r7, #12]
   1a4ea:	68bb      	ldr	r3, [r7, #8]
   1a4ec:	68fc      	ldr	r4, [r7, #12]
   1a4ee:	0f9a      	lsrs	r2, r3, #30
   1a4f0:	00a0      	lsls	r0, r4, #2
   1a4f2:	61f8      	str	r0, [r7, #28]
   1a4f4:	69f8      	ldr	r0, [r7, #28]
   1a4f6:	4310      	orrs	r0, r2
   1a4f8:	61f8      	str	r0, [r7, #28]
   1a4fa:	009b      	lsls	r3, r3, #2
   1a4fc:	61bb      	str	r3, [r7, #24]
   1a4fe:	69bb      	ldr	r3, [r7, #24]
   1a500:	69fc      	ldr	r4, [r7, #28]
   1a502:	68b9      	ldr	r1, [r7, #8]
   1a504:	68fa      	ldr	r2, [r7, #12]
   1a506:	185b      	adds	r3, r3, r1
   1a508:	4154      	adcs	r4, r2
   1a50a:	496a      	ldr	r1, [pc, #424]	; (1a6b4 <PR2_ISR+0x1f0>)
   1a50c:	2200      	movs	r2, #0
   1a50e:	185b      	adds	r3, r3, r1
   1a510:	4154      	adcs	r4, r2
   1a512:	0018      	movs	r0, r3
   1a514:	0021      	movs	r1, r4
   1a516:	4c68      	ldr	r4, [pc, #416]	; (1a6b8 <PR2_ISR+0x1f4>)
   1a518:	4a68      	ldr	r2, [pc, #416]	; (1a6bc <PR2_ISR+0x1f8>)
   1a51a:	2300      	movs	r3, #0
   1a51c:	47a0      	blx	r4
   1a51e:	0003      	movs	r3, r0
   1a520:	000c      	movs	r4, r1
   1a522:	0018      	movs	r0, r3
   1a524:	4b66      	ldr	r3, [pc, #408]	; (1a6c0 <PR2_ISR+0x1fc>)
   1a526:	4798      	blx	r3
		volatile unsigned char ucharHigh_Flag=0,ucharLow_Flag=0,ucharHigh_To_Low_Flag=0,ucharLow_To_High_Flag=0;
   1a528:	2323      	movs	r3, #35	; 0x23
   1a52a:	18fb      	adds	r3, r7, r3
   1a52c:	2200      	movs	r2, #0
   1a52e:	701a      	strb	r2, [r3, #0]
   1a530:	2322      	movs	r3, #34	; 0x22
   1a532:	18fb      	adds	r3, r7, r3
   1a534:	2200      	movs	r2, #0
   1a536:	701a      	strb	r2, [r3, #0]
   1a538:	2321      	movs	r3, #33	; 0x21
   1a53a:	18fb      	adds	r3, r7, r3
   1a53c:	2200      	movs	r2, #0
   1a53e:	701a      	strb	r2, [r3, #0]
   1a540:	2320      	movs	r3, #32
   1a542:	18fb      	adds	r3, r7, r3
   1a544:	2200      	movs	r2, #0
   1a546:	701a      	strb	r2, [r3, #0]
		if (port_pin_get_input_level(PR2_PIN)==HIGH)
   1a548:	202b      	movs	r0, #43	; 0x2b
   1a54a:	4b5e      	ldr	r3, [pc, #376]	; (1a6c4 <PR2_ISR+0x200>)
   1a54c:	4798      	blx	r3
   1a54e:	1e03      	subs	r3, r0, #0
   1a550:	d100      	bne.n	1a554 <PR2_ISR+0x90>
   1a552:	e08e      	b.n	1a672 <PR2_ISR+0x1ae>
		{
			for (unsigned int uintLoop=0;uintLoop<120;uintLoop++)
   1a554:	2300      	movs	r3, #0
   1a556:	627b      	str	r3, [r7, #36]	; 0x24
   1a558:	e085      	b.n	1a666 <PR2_ISR+0x1a2>
			{
				delay_us(25);
   1a55a:	2000      	movs	r0, #0
   1a55c:	4b54      	ldr	r3, [pc, #336]	; (1a6b0 <PR2_ISR+0x1ec>)
   1a55e:	4798      	blx	r3
   1a560:	0003      	movs	r3, r0
   1a562:	603b      	str	r3, [r7, #0]
   1a564:	2300      	movs	r3, #0
   1a566:	607b      	str	r3, [r7, #4]
   1a568:	6838      	ldr	r0, [r7, #0]
   1a56a:	6879      	ldr	r1, [r7, #4]
   1a56c:	0003      	movs	r3, r0
   1a56e:	000c      	movs	r4, r1
   1a570:	0f9a      	lsrs	r2, r3, #30
   1a572:	00a6      	lsls	r6, r4, #2
   1a574:	4316      	orrs	r6, r2
   1a576:	009d      	lsls	r5, r3, #2
   1a578:	0003      	movs	r3, r0
   1a57a:	000c      	movs	r4, r1
   1a57c:	195b      	adds	r3, r3, r5
   1a57e:	4174      	adcs	r4, r6
   1a580:	0f9a      	lsrs	r2, r3, #30
   1a582:	00a1      	lsls	r1, r4, #2
   1a584:	6179      	str	r1, [r7, #20]
   1a586:	6979      	ldr	r1, [r7, #20]
   1a588:	4311      	orrs	r1, r2
   1a58a:	6179      	str	r1, [r7, #20]
   1a58c:	009a      	lsls	r2, r3, #2
   1a58e:	613a      	str	r2, [r7, #16]
   1a590:	6939      	ldr	r1, [r7, #16]
   1a592:	697a      	ldr	r2, [r7, #20]
   1a594:	185b      	adds	r3, r3, r1
   1a596:	4154      	adcs	r4, r2
   1a598:	494b      	ldr	r1, [pc, #300]	; (1a6c8 <PR2_ISR+0x204>)
   1a59a:	2200      	movs	r2, #0
   1a59c:	185b      	adds	r3, r3, r1
   1a59e:	4154      	adcs	r4, r2
   1a5a0:	0018      	movs	r0, r3
   1a5a2:	0021      	movs	r1, r4
   1a5a4:	4c44      	ldr	r4, [pc, #272]	; (1a6b8 <PR2_ISR+0x1f4>)
   1a5a6:	4a49      	ldr	r2, [pc, #292]	; (1a6cc <PR2_ISR+0x208>)
   1a5a8:	2300      	movs	r3, #0
   1a5aa:	47a0      	blx	r4
   1a5ac:	0003      	movs	r3, r0
   1a5ae:	000c      	movs	r4, r1
   1a5b0:	0018      	movs	r0, r3
   1a5b2:	4b43      	ldr	r3, [pc, #268]	; (1a6c0 <PR2_ISR+0x1fc>)
   1a5b4:	4798      	blx	r3
				if ((port_pin_get_input_level(PR1_PIN)==HIGH)&&(ucharHigh_Flag==0))
   1a5b6:	202a      	movs	r0, #42	; 0x2a
   1a5b8:	4b42      	ldr	r3, [pc, #264]	; (1a6c4 <PR2_ISR+0x200>)
   1a5ba:	4798      	blx	r3
   1a5bc:	1e03      	subs	r3, r0, #0
   1a5be:	d014      	beq.n	1a5ea <PR2_ISR+0x126>
   1a5c0:	2323      	movs	r3, #35	; 0x23
   1a5c2:	18fb      	adds	r3, r7, r3
   1a5c4:	781b      	ldrb	r3, [r3, #0]
   1a5c6:	b2db      	uxtb	r3, r3
   1a5c8:	2b00      	cmp	r3, #0
   1a5ca:	d10e      	bne.n	1a5ea <PR2_ISR+0x126>
				{
					ucharHigh_Flag=1;
   1a5cc:	2323      	movs	r3, #35	; 0x23
   1a5ce:	18fb      	adds	r3, r7, r3
   1a5d0:	2201      	movs	r2, #1
   1a5d2:	701a      	strb	r2, [r3, #0]
					if (ucharLow_Flag==1)
   1a5d4:	2322      	movs	r3, #34	; 0x22
   1a5d6:	18fb      	adds	r3, r7, r3
   1a5d8:	781b      	ldrb	r3, [r3, #0]
   1a5da:	b2db      	uxtb	r3, r3
   1a5dc:	2b01      	cmp	r3, #1
   1a5de:	d104      	bne.n	1a5ea <PR2_ISR+0x126>
					{
						ucharLow_To_High_Flag=1;
   1a5e0:	2320      	movs	r3, #32
   1a5e2:	18fb      	adds	r3, r7, r3
   1a5e4:	2201      	movs	r2, #1
   1a5e6:	701a      	strb	r2, [r3, #0]
						break;
   1a5e8:	e043      	b.n	1a672 <PR2_ISR+0x1ae>
					}
				}
				if ((port_pin_get_input_level(PR1_PIN)==LOW)&&(ucharLow_Flag==0))
   1a5ea:	202a      	movs	r0, #42	; 0x2a
   1a5ec:	4b35      	ldr	r3, [pc, #212]	; (1a6c4 <PR2_ISR+0x200>)
   1a5ee:	4798      	blx	r3
   1a5f0:	0003      	movs	r3, r0
   1a5f2:	001a      	movs	r2, r3
   1a5f4:	2301      	movs	r3, #1
   1a5f6:	4053      	eors	r3, r2
   1a5f8:	b2db      	uxtb	r3, r3
   1a5fa:	2b00      	cmp	r3, #0
   1a5fc:	d013      	beq.n	1a626 <PR2_ISR+0x162>
   1a5fe:	2322      	movs	r3, #34	; 0x22
   1a600:	18fb      	adds	r3, r7, r3
   1a602:	781b      	ldrb	r3, [r3, #0]
   1a604:	b2db      	uxtb	r3, r3
   1a606:	2b00      	cmp	r3, #0
   1a608:	d10d      	bne.n	1a626 <PR2_ISR+0x162>
				{
					ucharLow_Flag=1;
   1a60a:	2322      	movs	r3, #34	; 0x22
   1a60c:	18fb      	adds	r3, r7, r3
   1a60e:	2201      	movs	r2, #1
   1a610:	701a      	strb	r2, [r3, #0]
					if (ucharHigh_Flag==1)
   1a612:	2323      	movs	r3, #35	; 0x23
   1a614:	18fb      	adds	r3, r7, r3
   1a616:	781b      	ldrb	r3, [r3, #0]
   1a618:	b2db      	uxtb	r3, r3
   1a61a:	2b01      	cmp	r3, #1
   1a61c:	d103      	bne.n	1a626 <PR2_ISR+0x162>
					{
						ucharHigh_To_Low_Flag=1;
   1a61e:	2321      	movs	r3, #33	; 0x21
   1a620:	18fb      	adds	r3, r7, r3
   1a622:	2201      	movs	r2, #1
   1a624:	701a      	strb	r2, [r3, #0]
					}
				}
				if (ucharHigh_To_Low_Flag==1)
   1a626:	2321      	movs	r3, #33	; 0x21
   1a628:	18fb      	adds	r3, r7, r3
   1a62a:	781b      	ldrb	r3, [r3, #0]
   1a62c:	b2db      	uxtb	r3, r3
   1a62e:	2b01      	cmp	r3, #1
   1a630:	d10c      	bne.n	1a64c <PR2_ISR+0x188>
				{
					// LCD takes data from structThreePhase_state, which should have latest sequence data.
					structThreePhase_state.u8t_phase_sequence_flag = THREEPHASE_OK;
   1a632:	4b27      	ldr	r3, [pc, #156]	; (1a6d0 <PR2_ISR+0x20c>)
   1a634:	2202      	movs	r2, #2
   1a636:	701a      	strb	r2, [r3, #0]
					ucharPhase_Seq_Err_Flag=2;//0=undefined, 1=error, 2=ok
   1a638:	4b26      	ldr	r3, [pc, #152]	; (1a6d4 <PR2_ISR+0x210>)
   1a63a:	2202      	movs	r2, #2
   1a63c:	701a      	strb	r2, [r3, #0]
					ucharPhase_Seq_Err_Counter=0;
   1a63e:	4b26      	ldr	r3, [pc, #152]	; (1a6d8 <PR2_ISR+0x214>)
   1a640:	2200      	movs	r2, #0
   1a642:	701a      	strb	r2, [r3, #0]
					ucharPhase_Seq_Check_Flag=0;
   1a644:	4b18      	ldr	r3, [pc, #96]	; (1a6a8 <PR2_ISR+0x1e4>)
   1a646:	2200      	movs	r2, #0
   1a648:	701a      	strb	r2, [r3, #0]
					break;
   1a64a:	e012      	b.n	1a672 <PR2_ISR+0x1ae>
				}
				if ((port_pin_get_input_level(PR2_PIN)==LOW))
   1a64c:	202b      	movs	r0, #43	; 0x2b
   1a64e:	4b1d      	ldr	r3, [pc, #116]	; (1a6c4 <PR2_ISR+0x200>)
   1a650:	4798      	blx	r3
   1a652:	0003      	movs	r3, r0
   1a654:	001a      	movs	r2, r3
   1a656:	2301      	movs	r3, #1
   1a658:	4053      	eors	r3, r2
   1a65a:	b2db      	uxtb	r3, r3
   1a65c:	2b00      	cmp	r3, #0
   1a65e:	d107      	bne.n	1a670 <PR2_ISR+0x1ac>
			for (unsigned int uintLoop=0;uintLoop<120;uintLoop++)
   1a660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1a662:	3301      	adds	r3, #1
   1a664:	627b      	str	r3, [r7, #36]	; 0x24
   1a666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1a668:	2b77      	cmp	r3, #119	; 0x77
   1a66a:	d800      	bhi.n	1a66e <PR2_ISR+0x1aa>
   1a66c:	e775      	b.n	1a55a <PR2_ISR+0x96>
   1a66e:	e000      	b.n	1a672 <PR2_ISR+0x1ae>
				{
					break;
   1a670:	46c0      	nop			; (mov r8, r8)
				}
			}
		}
		if (++ucharPhase_Seq_Err_Counter>2)
   1a672:	4b19      	ldr	r3, [pc, #100]	; (1a6d8 <PR2_ISR+0x214>)
   1a674:	781b      	ldrb	r3, [r3, #0]
   1a676:	b2db      	uxtb	r3, r3
   1a678:	3301      	adds	r3, #1
   1a67a:	b2db      	uxtb	r3, r3
   1a67c:	4a16      	ldr	r2, [pc, #88]	; (1a6d8 <PR2_ISR+0x214>)
   1a67e:	1c19      	adds	r1, r3, #0
   1a680:	7011      	strb	r1, [r2, #0]
   1a682:	2b02      	cmp	r3, #2
   1a684:	d90b      	bls.n	1a69e <PR2_ISR+0x1da>
		{
			ucharPhase_Seq_Err_Counter=0;
   1a686:	4b14      	ldr	r3, [pc, #80]	; (1a6d8 <PR2_ISR+0x214>)
   1a688:	2200      	movs	r2, #0
   1a68a:	701a      	strb	r2, [r3, #0]
			structThreePhase_state.u8t_phase_sequence_flag = THREEPHASE_ERROR;
   1a68c:	4b10      	ldr	r3, [pc, #64]	; (1a6d0 <PR2_ISR+0x20c>)
   1a68e:	2201      	movs	r2, #1
   1a690:	701a      	strb	r2, [r3, #0]
			ucharPhase_Seq_Err_Flag=1;//0=undefined, 1=error, 2=ok
   1a692:	4b10      	ldr	r3, [pc, #64]	; (1a6d4 <PR2_ISR+0x210>)
   1a694:	2201      	movs	r2, #1
   1a696:	701a      	strb	r2, [r3, #0]
			ucharPhase_Seq_Check_Flag=0;
   1a698:	4b03      	ldr	r3, [pc, #12]	; (1a6a8 <PR2_ISR+0x1e4>)
   1a69a:	2200      	movs	r2, #0
   1a69c:	701a      	strb	r2, [r3, #0]
		}
	}
}
   1a69e:	46c0      	nop			; (mov r8, r8)
   1a6a0:	46bd      	mov	sp, r7
   1a6a2:	b00b      	add	sp, #44	; 0x2c
   1a6a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1a6a6:	46c0      	nop			; (mov r8, r8)
   1a6a8:	2000000c 	.word	0x2000000c
   1a6ac:	20000444 	.word	0x20000444
   1a6b0:	0002463d 	.word	0x0002463d
   1a6b4:	00001b57 	.word	0x00001b57
   1a6b8:	00026649 	.word	0x00026649
   1a6bc:	00001b58 	.word	0x00001b58
   1a6c0:	20000001 	.word	0x20000001
   1a6c4:	00019645 	.word	0x00019645
   1a6c8:	006acfbf 	.word	0x006acfbf
   1a6cc:	006acfc0 	.word	0x006acfc0
   1a6d0:	20000948 	.word	0x20000948
   1a6d4:	20000440 	.word	0x20000440
   1a6d8:	20000441 	.word	0x20000441

0001a6dc <vTask_10ms_Timer>:

static void vTask_10ms_Timer(void *params)
{
   1a6dc:	b580      	push	{r7, lr}
   1a6de:	b084      	sub	sp, #16
   1a6e0:	af00      	add	r7, sp, #0
   1a6e2:	6078      	str	r0, [r7, #4]
	TickType_t xLastExecutionGsm_Send_Time;
	xLastExecutionGsm_Send_Time = xTaskGetTickCount();
   1a6e4:	4b12      	ldr	r3, [pc, #72]	; (1a730 <vTask_10ms_Timer+0x54>)
   1a6e6:	4798      	blx	r3
   1a6e8:	0003      	movs	r3, r0
   1a6ea:	60fb      	str	r3, [r7, #12]
	//--------------------------------
	for( ;; )
	{
		vTaskDelayUntil(&xLastExecutionGsm_Send_Time, (10/portTICK_PERIOD_MS));
   1a6ec:	230c      	movs	r3, #12
   1a6ee:	18fb      	adds	r3, r7, r3
   1a6f0:	210a      	movs	r1, #10
   1a6f2:	0018      	movs	r0, r3
   1a6f4:	4b0f      	ldr	r3, [pc, #60]	; (1a734 <vTask_10ms_Timer+0x58>)
   1a6f6:	4798      	blx	r3
		if(ucharPhase_Seq_Check_Flag==1)
   1a6f8:	4b0f      	ldr	r3, [pc, #60]	; (1a738 <vTask_10ms_Timer+0x5c>)
   1a6fa:	781b      	ldrb	r3, [r3, #0]
   1a6fc:	b2db      	uxtb	r3, r3
   1a6fe:	2b01      	cmp	r3, #1
   1a700:	d1f4      	bne.n	1a6ec <vTask_10ms_Timer+0x10>
		{
			if(++ucharPhase_1_Timer_Counter>=20)
   1a702:	4b0e      	ldr	r3, [pc, #56]	; (1a73c <vTask_10ms_Timer+0x60>)
   1a704:	781b      	ldrb	r3, [r3, #0]
   1a706:	b2db      	uxtb	r3, r3
   1a708:	3301      	adds	r3, #1
   1a70a:	b2db      	uxtb	r3, r3
   1a70c:	4a0b      	ldr	r2, [pc, #44]	; (1a73c <vTask_10ms_Timer+0x60>)
   1a70e:	1c19      	adds	r1, r3, #0
   1a710:	7011      	strb	r1, [r2, #0]
   1a712:	2b13      	cmp	r3, #19
   1a714:	d9ea      	bls.n	1a6ec <vTask_10ms_Timer+0x10>
			{
				ucharPhase_1_Timer_Counter=0;
   1a716:	4b09      	ldr	r3, [pc, #36]	; (1a73c <vTask_10ms_Timer+0x60>)
   1a718:	2200      	movs	r2, #0
   1a71a:	701a      	strb	r2, [r3, #0]
				structThreePhase_state.u8t_phase_sequence_flag = THREEPHASE_ERROR;
   1a71c:	4b08      	ldr	r3, [pc, #32]	; (1a740 <vTask_10ms_Timer+0x64>)
   1a71e:	2201      	movs	r2, #1
   1a720:	701a      	strb	r2, [r3, #0]
				ucharPhase_Seq_Err_Flag=1;//0=undefined, 1=error, 2=ok
   1a722:	4b08      	ldr	r3, [pc, #32]	; (1a744 <vTask_10ms_Timer+0x68>)
   1a724:	2201      	movs	r2, #1
   1a726:	701a      	strb	r2, [r3, #0]
				ucharPhase_Seq_Check_Flag=0;
   1a728:	4b03      	ldr	r3, [pc, #12]	; (1a738 <vTask_10ms_Timer+0x5c>)
   1a72a:	2200      	movs	r2, #0
   1a72c:	701a      	strb	r2, [r3, #0]
		vTaskDelayUntil(&xLastExecutionGsm_Send_Time, (10/portTICK_PERIOD_MS));
   1a72e:	e7dd      	b.n	1a6ec <vTask_10ms_Timer+0x10>
   1a730:	000201cd 	.word	0x000201cd
   1a734:	0001fda1 	.word	0x0001fda1
   1a738:	2000000c 	.word	0x2000000c
   1a73c:	20000444 	.word	0x20000444
   1a740:	20000948 	.word	0x20000948
   1a744:	20000440 	.word	0x20000440

0001a748 <vTask_100ms_Timer>:
		}
	}
}

static void vTask_100ms_Timer(void *params)
{
   1a748:	b580      	push	{r7, lr}
   1a74a:	b084      	sub	sp, #16
   1a74c:	af00      	add	r7, sp, #0
   1a74e:	6078      	str	r0, [r7, #4]
	TickType_t xLastExecutionGsm_Send_Time;
	xLastExecutionGsm_Send_Time = xTaskGetTickCount();
   1a750:	4b17      	ldr	r3, [pc, #92]	; (1a7b0 <vTask_100ms_Timer+0x68>)
   1a752:	4798      	blx	r3
   1a754:	0003      	movs	r3, r0
   1a756:	60fb      	str	r3, [r7, #12]
	//--------------------------------
	for( ;; )
	{
		vTaskDelayUntil(&xLastExecutionGsm_Send_Time, (100/portTICK_PERIOD_MS));
   1a758:	230c      	movs	r3, #12
   1a75a:	18fb      	adds	r3, r7, r3
   1a75c:	2164      	movs	r1, #100	; 0x64
   1a75e:	0018      	movs	r0, r3
   1a760:	4b14      	ldr	r3, [pc, #80]	; (1a7b4 <vTask_100ms_Timer+0x6c>)
   1a762:	4798      	blx	r3
		
		////////
		//Voltaqe Detect Timer Counter, Reset every 500ms to 0, which triggers the New Voltage Reading Acquisition from ADC.
		if(ucharVoltage_Detect_Timer_Counter++>4)
   1a764:	4b14      	ldr	r3, [pc, #80]	; (1a7b8 <vTask_100ms_Timer+0x70>)
   1a766:	781b      	ldrb	r3, [r3, #0]
   1a768:	b2db      	uxtb	r3, r3
   1a76a:	1c5a      	adds	r2, r3, #1
   1a76c:	b2d1      	uxtb	r1, r2
   1a76e:	4a12      	ldr	r2, [pc, #72]	; (1a7b8 <vTask_100ms_Timer+0x70>)
   1a770:	7011      	strb	r1, [r2, #0]
   1a772:	2b04      	cmp	r3, #4
   1a774:	d905      	bls.n	1a782 <vTask_100ms_Timer+0x3a>
		{
			ucharVoltage_Detect_Timer_Counter=0;
   1a776:	4b10      	ldr	r3, [pc, #64]	; (1a7b8 <vTask_100ms_Timer+0x70>)
   1a778:	2200      	movs	r2, #0
   1a77a:	701a      	strb	r2, [r3, #0]
			//Add Flag to enable detection of current, as the Voltage Detect Timer Counter won't be 0, as voltage reading takes 100ms Time.
			ucharCurrent_Detect_Flag=1;
   1a77c:	4b0f      	ldr	r3, [pc, #60]	; (1a7bc <vTask_100ms_Timer+0x74>)
   1a77e:	2201      	movs	r2, #1
   1a780:	701a      	strb	r2, [r3, #0]
			
		}
		/////////
		if (ucharPhase_Seq_Timer_Counter++>4)
   1a782:	4b0f      	ldr	r3, [pc, #60]	; (1a7c0 <vTask_100ms_Timer+0x78>)
   1a784:	781b      	ldrb	r3, [r3, #0]
   1a786:	b2db      	uxtb	r3, r3
   1a788:	1c5a      	adds	r2, r3, #1
   1a78a:	b2d1      	uxtb	r1, r2
   1a78c:	4a0c      	ldr	r2, [pc, #48]	; (1a7c0 <vTask_100ms_Timer+0x78>)
   1a78e:	7011      	strb	r1, [r2, #0]
   1a790:	2b04      	cmp	r3, #4
   1a792:	d9e1      	bls.n	1a758 <vTask_100ms_Timer+0x10>
		{
			ucharPhase_Seq_Timer_Counter=0;
   1a794:	4b0a      	ldr	r3, [pc, #40]	; (1a7c0 <vTask_100ms_Timer+0x78>)
   1a796:	2200      	movs	r2, #0
   1a798:	701a      	strb	r2, [r3, #0]
			ucharPhase_Seq_Check_Flag=1;//0=not check, 1=Check
   1a79a:	4b0a      	ldr	r3, [pc, #40]	; (1a7c4 <vTask_100ms_Timer+0x7c>)
   1a79c:	2201      	movs	r2, #1
   1a79e:	701a      	strb	r2, [r3, #0]
			ucharPhase_1_Timer_Counter=0;
   1a7a0:	4b09      	ldr	r3, [pc, #36]	; (1a7c8 <vTask_100ms_Timer+0x80>)
   1a7a2:	2200      	movs	r2, #0
   1a7a4:	701a      	strb	r2, [r3, #0]
			extint_chan_clear_detected(11);
   1a7a6:	200b      	movs	r0, #11
   1a7a8:	4b08      	ldr	r3, [pc, #32]	; (1a7cc <vTask_100ms_Timer+0x84>)
   1a7aa:	4798      	blx	r3
		vTaskDelayUntil(&xLastExecutionGsm_Send_Time, (100/portTICK_PERIOD_MS));
   1a7ac:	e7d4      	b.n	1a758 <vTask_100ms_Timer+0x10>
   1a7ae:	46c0      	nop			; (mov r8, r8)
   1a7b0:	000201cd 	.word	0x000201cd
   1a7b4:	0001fda1 	.word	0x0001fda1
   1a7b8:	2000000d 	.word	0x2000000d
   1a7bc:	20000443 	.word	0x20000443
   1a7c0:	20000442 	.word	0x20000442
   1a7c4:	2000000c 	.word	0x2000000c
   1a7c8:	20000444 	.word	0x20000444
   1a7cc:	00019729 	.word	0x00019729

0001a7d0 <should_Detect_New_Voltage>:
		}
	}
}

//Function to check if new Voltage reading should be acquired from the ADC, by checking the timer Variable for reading Voltage with 0.
bool should_Detect_New_Voltage(void) {
   1a7d0:	b580      	push	{r7, lr}
   1a7d2:	af00      	add	r7, sp, #0
	return (ucharVoltage_Detect_Timer_Counter == 0);
   1a7d4:	4b04      	ldr	r3, [pc, #16]	; (1a7e8 <should_Detect_New_Voltage+0x18>)
   1a7d6:	781b      	ldrb	r3, [r3, #0]
   1a7d8:	b2db      	uxtb	r3, r3
   1a7da:	425a      	negs	r2, r3
   1a7dc:	4153      	adcs	r3, r2
   1a7de:	b2db      	uxtb	r3, r3
}
   1a7e0:	0018      	movs	r0, r3
   1a7e2:	46bd      	mov	sp, r7
   1a7e4:	bd80      	pop	{r7, pc}
   1a7e6:	46c0      	nop			; (mov r8, r8)
   1a7e8:	2000000d 	.word	0x2000000d

0001a7ec <detect_battery_voltage_and_percentage>:

void detect_battery_voltage_and_percentage(void)
{
   1a7ec:	b590      	push	{r4, r7, lr}
   1a7ee:	b083      	sub	sp, #12
   1a7f0:	af00      	add	r7, sp, #0
	if(xSemaphoreTake(xADC_Semaphore,portMAX_DELAY)== pdTRUE)
   1a7f2:	4b25      	ldr	r3, [pc, #148]	; (1a888 <detect_battery_voltage_and_percentage+0x9c>)
   1a7f4:	681a      	ldr	r2, [r3, #0]
   1a7f6:	2301      	movs	r3, #1
   1a7f8:	425b      	negs	r3, r3
   1a7fa:	0019      	movs	r1, r3
   1a7fc:	0010      	movs	r0, r2
   1a7fe:	4b23      	ldr	r3, [pc, #140]	; (1a88c <detect_battery_voltage_and_percentage+0xa0>)
   1a800:	4798      	blx	r3
   1a802:	0003      	movs	r3, r0
   1a804:	2b01      	cmp	r3, #1
   1a806:	d13b      	bne.n	1a880 <detect_battery_voltage_and_percentage+0x94>
	{
		uint32_t bat_v = Read_ADC0(ADC_POSITIVE_INPUT_PIN7,200);
   1a808:	21c8      	movs	r1, #200	; 0xc8
   1a80a:	2007      	movs	r0, #7
   1a80c:	4b20      	ldr	r3, [pc, #128]	; (1a890 <detect_battery_voltage_and_percentage+0xa4>)
   1a80e:	4798      	blx	r3
   1a810:	0003      	movs	r3, r0
   1a812:	603b      	str	r3, [r7, #0]
		Analog_Parameter_Struct.Battery_Voltage = (bat_v * 1457)/1000;
   1a814:	683b      	ldr	r3, [r7, #0]
   1a816:	4a1f      	ldr	r2, [pc, #124]	; (1a894 <detect_battery_voltage_and_percentage+0xa8>)
   1a818:	435a      	muls	r2, r3
   1a81a:	0010      	movs	r0, r2
   1a81c:	4b1e      	ldr	r3, [pc, #120]	; (1a898 <detect_battery_voltage_and_percentage+0xac>)
   1a81e:	22fa      	movs	r2, #250	; 0xfa
   1a820:	0091      	lsls	r1, r2, #2
   1a822:	4798      	blx	r3
   1a824:	0003      	movs	r3, r0
   1a826:	001a      	movs	r2, r3
   1a828:	4b1c      	ldr	r3, [pc, #112]	; (1a89c <detect_battery_voltage_and_percentage+0xb0>)
   1a82a:	619a      	str	r2, [r3, #24]
		uint8_t bat_per = 0;
   1a82c:	1dfb      	adds	r3, r7, #7
   1a82e:	2200      	movs	r2, #0
   1a830:	701a      	strb	r2, [r3, #0]
		
		if (Analog_Parameter_Struct.Battery_Voltage <= 3300)
   1a832:	4b1a      	ldr	r3, [pc, #104]	; (1a89c <detect_battery_voltage_and_percentage+0xb0>)
   1a834:	699b      	ldr	r3, [r3, #24]
   1a836:	4a1a      	ldr	r2, [pc, #104]	; (1a8a0 <detect_battery_voltage_and_percentage+0xb4>)
   1a838:	4293      	cmp	r3, r2
   1a83a:	d803      	bhi.n	1a844 <detect_battery_voltage_and_percentage+0x58>
		{
			bat_per = 0;
   1a83c:	1dfb      	adds	r3, r7, #7
   1a83e:	2200      	movs	r2, #0
   1a840:	701a      	strb	r2, [r3, #0]
   1a842:	e012      	b.n	1a86a <detect_battery_voltage_and_percentage+0x7e>
		}
		else
		{
			//bat_per = ((((float)Analog_Parameter_Struct.Battery_Voltage/1000)-3.3)*100)/0.9;
			bat_per = (Analog_Parameter_Struct.Battery_Voltage-3300)/9;
   1a844:	4b15      	ldr	r3, [pc, #84]	; (1a89c <detect_battery_voltage_and_percentage+0xb0>)
   1a846:	699b      	ldr	r3, [r3, #24]
   1a848:	4a16      	ldr	r2, [pc, #88]	; (1a8a4 <detect_battery_voltage_and_percentage+0xb8>)
   1a84a:	189a      	adds	r2, r3, r2
   1a84c:	4b12      	ldr	r3, [pc, #72]	; (1a898 <detect_battery_voltage_and_percentage+0xac>)
   1a84e:	2109      	movs	r1, #9
   1a850:	0010      	movs	r0, r2
   1a852:	4798      	blx	r3
   1a854:	0003      	movs	r3, r0
   1a856:	001a      	movs	r2, r3
   1a858:	1dfb      	adds	r3, r7, #7
   1a85a:	701a      	strb	r2, [r3, #0]
			if (bat_per>100) bat_per=100;
   1a85c:	1dfb      	adds	r3, r7, #7
   1a85e:	781b      	ldrb	r3, [r3, #0]
   1a860:	2b64      	cmp	r3, #100	; 0x64
   1a862:	d902      	bls.n	1a86a <detect_battery_voltage_and_percentage+0x7e>
   1a864:	1dfb      	adds	r3, r7, #7
   1a866:	2264      	movs	r2, #100	; 0x64
   1a868:	701a      	strb	r2, [r3, #0]
		}
		
		Analog_Parameter_Struct.Battery_percentage = bat_per;
   1a86a:	4b0c      	ldr	r3, [pc, #48]	; (1a89c <detect_battery_voltage_and_percentage+0xb0>)
   1a86c:	1dfa      	adds	r2, r7, #7
   1a86e:	7812      	ldrb	r2, [r2, #0]
   1a870:	771a      	strb	r2, [r3, #28]
		
		xSemaphoreGive(xADC_Semaphore);
   1a872:	4b05      	ldr	r3, [pc, #20]	; (1a888 <detect_battery_voltage_and_percentage+0x9c>)
   1a874:	6818      	ldr	r0, [r3, #0]
   1a876:	2300      	movs	r3, #0
   1a878:	2200      	movs	r2, #0
   1a87a:	2100      	movs	r1, #0
   1a87c:	4c0a      	ldr	r4, [pc, #40]	; (1a8a8 <detect_battery_voltage_and_percentage+0xbc>)
   1a87e:	47a0      	blx	r4
	}
}
   1a880:	46c0      	nop			; (mov r8, r8)
   1a882:	46bd      	mov	sp, r7
   1a884:	b003      	add	sp, #12
   1a886:	bd90      	pop	{r4, r7, pc}
   1a888:	20000430 	.word	0x20000430
   1a88c:	0001f561 	.word	0x0001f561
   1a890:	0001a061 	.word	0x0001a061
   1a894:	000005b1 	.word	0x000005b1
   1a898:	000262e1 	.word	0x000262e1
   1a89c:	200008e8 	.word	0x200008e8
   1a8a0:	00000ce4 	.word	0x00000ce4
   1a8a4:	fffff31c 	.word	0xfffff31c
   1a8a8:	0001f0c1 	.word	0x0001f0c1

0001a8ac <initPhaseRMStruct>:

void initPhaseRMStruct(struct rmsVoltage *phaseRMSStruct)
{
   1a8ac:	b580      	push	{r7, lr}
   1a8ae:	b084      	sub	sp, #16
   1a8b0:	af00      	add	r7, sp, #0
   1a8b2:	6078      	str	r0, [r7, #4]
	phaseRMSStruct->hasZeroReading = true;
   1a8b4:	687b      	ldr	r3, [r7, #4]
   1a8b6:	2201      	movs	r2, #1
   1a8b8:	735a      	strb	r2, [r3, #13]
	phaseRMSStruct->index=0;
   1a8ba:	687b      	ldr	r3, [r7, #4]
   1a8bc:	2200      	movs	r2, #0
   1a8be:	731a      	strb	r2, [r3, #12]
	phaseRMSStruct->rmsVoltage=0;
   1a8c0:	687b      	ldr	r3, [r7, #4]
   1a8c2:	2200      	movs	r2, #0
   1a8c4:	815a      	strh	r2, [r3, #10]
	for (uint8_t cnt =0;cnt< NO_RMS_VOLTAGE_READINGS;cnt++)
   1a8c6:	230f      	movs	r3, #15
   1a8c8:	18fb      	adds	r3, r7, r3
   1a8ca:	2200      	movs	r2, #0
   1a8cc:	701a      	strb	r2, [r3, #0]
   1a8ce:	e00d      	b.n	1a8ec <initPhaseRMStruct+0x40>
	{
		phaseRMSStruct->voltRange[cnt]=0;
   1a8d0:	230f      	movs	r3, #15
   1a8d2:	18fb      	adds	r3, r7, r3
   1a8d4:	781a      	ldrb	r2, [r3, #0]
   1a8d6:	687b      	ldr	r3, [r7, #4]
   1a8d8:	0052      	lsls	r2, r2, #1
   1a8da:	2100      	movs	r1, #0
   1a8dc:	52d1      	strh	r1, [r2, r3]
	for (uint8_t cnt =0;cnt< NO_RMS_VOLTAGE_READINGS;cnt++)
   1a8de:	230f      	movs	r3, #15
   1a8e0:	18fb      	adds	r3, r7, r3
   1a8e2:	781a      	ldrb	r2, [r3, #0]
   1a8e4:	230f      	movs	r3, #15
   1a8e6:	18fb      	adds	r3, r7, r3
   1a8e8:	3201      	adds	r2, #1
   1a8ea:	701a      	strb	r2, [r3, #0]
   1a8ec:	230f      	movs	r3, #15
   1a8ee:	18fb      	adds	r3, r7, r3
   1a8f0:	781b      	ldrb	r3, [r3, #0]
   1a8f2:	2b04      	cmp	r3, #4
   1a8f4:	d9ec      	bls.n	1a8d0 <initPhaseRMStruct+0x24>
	}
}
   1a8f6:	46c0      	nop			; (mov r8, r8)
   1a8f8:	46bd      	mov	sp, r7
   1a8fa:	b004      	add	sp, #16
   1a8fc:	bd80      	pop	{r7, pc}
	...

0001a900 <updateRMSValues>:

void updateRMSValues(struct rmsVoltage *phaseRMSStruct)
{
   1a900:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a902:	b089      	sub	sp, #36	; 0x24
   1a904:	af00      	add	r7, sp, #0
   1a906:	6078      	str	r0, [r7, #4]
	uint8_t cnt;
	uint32_t result=0;
   1a908:	2300      	movs	r3, #0
   1a90a:	61bb      	str	r3, [r7, #24]
	double mean = 0.0;
   1a90c:	2300      	movs	r3, #0
   1a90e:	2400      	movs	r4, #0
   1a910:	613b      	str	r3, [r7, #16]
   1a912:	617c      	str	r4, [r7, #20]
	double root = 0.0;
   1a914:	2300      	movs	r3, #0
   1a916:	2400      	movs	r4, #0
   1a918:	60bb      	str	r3, [r7, #8]
   1a91a:	60fc      	str	r4, [r7, #12]
	phaseRMSStruct->hasZeroReading=false;
   1a91c:	687b      	ldr	r3, [r7, #4]
   1a91e:	2200      	movs	r2, #0
   1a920:	735a      	strb	r2, [r3, #13]
	for(cnt=0;cnt<NO_RMS_VOLTAGE_READINGS;cnt++)
   1a922:	231f      	movs	r3, #31
   1a924:	18fb      	adds	r3, r7, r3
   1a926:	2200      	movs	r2, #0
   1a928:	701a      	strb	r2, [r3, #0]
   1a92a:	e036      	b.n	1a99a <updateRMSValues+0x9a>
	{
		if(phaseRMSStruct->voltRange[cnt]==0)
   1a92c:	231f      	movs	r3, #31
   1a92e:	18fb      	adds	r3, r7, r3
   1a930:	781a      	ldrb	r2, [r3, #0]
   1a932:	687b      	ldr	r3, [r7, #4]
   1a934:	0052      	lsls	r2, r2, #1
   1a936:	5ad3      	ldrh	r3, [r2, r3]
   1a938:	2b00      	cmp	r3, #0
   1a93a:	d102      	bne.n	1a942 <updateRMSValues+0x42>
		{
			phaseRMSStruct->hasZeroReading=true;
   1a93c:	687b      	ldr	r3, [r7, #4]
   1a93e:	2201      	movs	r2, #1
   1a940:	735a      	strb	r2, [r3, #13]
		}
		result= result + pow(phaseRMSStruct->voltRange[cnt],2);
   1a942:	4b31      	ldr	r3, [pc, #196]	; (1aa08 <updateRMSValues+0x108>)
   1a944:	69b8      	ldr	r0, [r7, #24]
   1a946:	4798      	blx	r3
   1a948:	0005      	movs	r5, r0
   1a94a:	000e      	movs	r6, r1
   1a94c:	231f      	movs	r3, #31
   1a94e:	18fb      	adds	r3, r7, r3
   1a950:	781a      	ldrb	r2, [r3, #0]
   1a952:	687b      	ldr	r3, [r7, #4]
   1a954:	0052      	lsls	r2, r2, #1
   1a956:	5ad2      	ldrh	r2, [r2, r3]
   1a958:	4b2b      	ldr	r3, [pc, #172]	; (1aa08 <updateRMSValues+0x108>)
   1a95a:	0010      	movs	r0, r2
   1a95c:	4798      	blx	r3
   1a95e:	2300      	movs	r3, #0
   1a960:	2480      	movs	r4, #128	; 0x80
   1a962:	05e4      	lsls	r4, r4, #23
   1a964:	001a      	movs	r2, r3
   1a966:	0023      	movs	r3, r4
   1a968:	4c28      	ldr	r4, [pc, #160]	; (1aa0c <updateRMSValues+0x10c>)
   1a96a:	47a0      	blx	r4
   1a96c:	0002      	movs	r2, r0
   1a96e:	000b      	movs	r3, r1
   1a970:	4c27      	ldr	r4, [pc, #156]	; (1aa10 <updateRMSValues+0x110>)
   1a972:	0028      	movs	r0, r5
   1a974:	0031      	movs	r1, r6
   1a976:	47a0      	blx	r4
   1a978:	0003      	movs	r3, r0
   1a97a:	000c      	movs	r4, r1
   1a97c:	0019      	movs	r1, r3
   1a97e:	0022      	movs	r2, r4
   1a980:	4b24      	ldr	r3, [pc, #144]	; (1aa14 <updateRMSValues+0x114>)
   1a982:	0008      	movs	r0, r1
   1a984:	0011      	movs	r1, r2
   1a986:	4798      	blx	r3
   1a988:	0003      	movs	r3, r0
   1a98a:	61bb      	str	r3, [r7, #24]
	for(cnt=0;cnt<NO_RMS_VOLTAGE_READINGS;cnt++)
   1a98c:	231f      	movs	r3, #31
   1a98e:	18fb      	adds	r3, r7, r3
   1a990:	781a      	ldrb	r2, [r3, #0]
   1a992:	231f      	movs	r3, #31
   1a994:	18fb      	adds	r3, r7, r3
   1a996:	3201      	adds	r2, #1
   1a998:	701a      	strb	r2, [r3, #0]
   1a99a:	231f      	movs	r3, #31
   1a99c:	18fb      	adds	r3, r7, r3
   1a99e:	781b      	ldrb	r3, [r3, #0]
   1a9a0:	2b04      	cmp	r3, #4
   1a9a2:	d9c3      	bls.n	1a92c <updateRMSValues+0x2c>
	}
	mean= result / (float)NO_RMS_VOLTAGE_READINGS;
   1a9a4:	4b1c      	ldr	r3, [pc, #112]	; (1aa18 <updateRMSValues+0x118>)
   1a9a6:	69b8      	ldr	r0, [r7, #24]
   1a9a8:	4798      	blx	r3
   1a9aa:	1c02      	adds	r2, r0, #0
   1a9ac:	4b1b      	ldr	r3, [pc, #108]	; (1aa1c <updateRMSValues+0x11c>)
   1a9ae:	491c      	ldr	r1, [pc, #112]	; (1aa20 <updateRMSValues+0x120>)
   1a9b0:	1c10      	adds	r0, r2, #0
   1a9b2:	4798      	blx	r3
   1a9b4:	1c03      	adds	r3, r0, #0
   1a9b6:	1c1a      	adds	r2, r3, #0
   1a9b8:	4b1a      	ldr	r3, [pc, #104]	; (1aa24 <updateRMSValues+0x124>)
   1a9ba:	1c10      	adds	r0, r2, #0
   1a9bc:	4798      	blx	r3
   1a9be:	0003      	movs	r3, r0
   1a9c0:	000c      	movs	r4, r1
   1a9c2:	613b      	str	r3, [r7, #16]
   1a9c4:	617c      	str	r4, [r7, #20]
	root = (uint32_t) (sqrt(mean));
   1a9c6:	693b      	ldr	r3, [r7, #16]
   1a9c8:	697c      	ldr	r4, [r7, #20]
   1a9ca:	0018      	movs	r0, r3
   1a9cc:	0021      	movs	r1, r4
   1a9ce:	4b16      	ldr	r3, [pc, #88]	; (1aa28 <updateRMSValues+0x128>)
   1a9d0:	4798      	blx	r3
   1a9d2:	000a      	movs	r2, r1
   1a9d4:	0001      	movs	r1, r0
   1a9d6:	4b0f      	ldr	r3, [pc, #60]	; (1aa14 <updateRMSValues+0x114>)
   1a9d8:	0008      	movs	r0, r1
   1a9da:	0011      	movs	r1, r2
   1a9dc:	4798      	blx	r3
   1a9de:	0002      	movs	r2, r0
   1a9e0:	4b09      	ldr	r3, [pc, #36]	; (1aa08 <updateRMSValues+0x108>)
   1a9e2:	0010      	movs	r0, r2
   1a9e4:	4798      	blx	r3
   1a9e6:	0003      	movs	r3, r0
   1a9e8:	000c      	movs	r4, r1
   1a9ea:	60bb      	str	r3, [r7, #8]
   1a9ec:	60fc      	str	r4, [r7, #12]
	
	phaseRMSStruct->rmsVoltage = (uint16_t) root;
   1a9ee:	4b09      	ldr	r3, [pc, #36]	; (1aa14 <updateRMSValues+0x114>)
   1a9f0:	68b8      	ldr	r0, [r7, #8]
   1a9f2:	68f9      	ldr	r1, [r7, #12]
   1a9f4:	4798      	blx	r3
   1a9f6:	0003      	movs	r3, r0
   1a9f8:	b29a      	uxth	r2, r3
   1a9fa:	687b      	ldr	r3, [r7, #4]
   1a9fc:	815a      	strh	r2, [r3, #10]
}
   1a9fe:	46c0      	nop			; (mov r8, r8)
   1aa00:	46bd      	mov	sp, r7
   1aa02:	b009      	add	sp, #36	; 0x24
   1aa04:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1aa06:	46c0      	nop			; (mov r8, r8)
   1aa08:	000288d5 	.word	0x000288d5
   1aa0c:	0002504d 	.word	0x0002504d
   1aa10:	00026df5 	.word	0x00026df5
   1aa14:	000266dd 	.word	0x000266dd
   1aa18:	00026d69 	.word	0x00026d69
   1aa1c:	00026899 	.word	0x00026899
   1aa20:	40a00000 	.word	0x40a00000
   1aa24:	00028945 	.word	0x00028945
   1aa28:	000253a5 	.word	0x000253a5

0001aa2c <filterVoltage>:

uint16_t filterVoltage(enum phaseReading phase,uint16_t voltReading)
{
   1aa2c:	b590      	push	{r4, r7, lr}
   1aa2e:	b085      	sub	sp, #20
   1aa30:	af00      	add	r7, sp, #0
   1aa32:	0002      	movs	r2, r0
   1aa34:	1dfb      	adds	r3, r7, #7
   1aa36:	701a      	strb	r2, [r3, #0]
   1aa38:	1d3b      	adds	r3, r7, #4
   1aa3a:	1c0a      	adds	r2, r1, #0
   1aa3c:	801a      	strh	r2, [r3, #0]
	struct rmsVoltage *p1;
	if(phase==PHASE_RY)
   1aa3e:	1dfb      	adds	r3, r7, #7
   1aa40:	781b      	ldrb	r3, [r3, #0]
   1aa42:	2b00      	cmp	r3, #0
   1aa44:	d102      	bne.n	1aa4c <filterVoltage+0x20>
	{
		p1 = &struct_rmsRY;
   1aa46:	4b29      	ldr	r3, [pc, #164]	; (1aaec <filterVoltage+0xc0>)
   1aa48:	60fb      	str	r3, [r7, #12]
   1aa4a:	e00c      	b.n	1aa66 <filterVoltage+0x3a>
	}
	else if(phase==PHASE_YB)
   1aa4c:	1dfb      	adds	r3, r7, #7
   1aa4e:	781b      	ldrb	r3, [r3, #0]
   1aa50:	2b01      	cmp	r3, #1
   1aa52:	d102      	bne.n	1aa5a <filterVoltage+0x2e>
	{
		p1 = &struct_rmsYB;
   1aa54:	4b26      	ldr	r3, [pc, #152]	; (1aaf0 <filterVoltage+0xc4>)
   1aa56:	60fb      	str	r3, [r7, #12]
   1aa58:	e005      	b.n	1aa66 <filterVoltage+0x3a>
	}
	else if(phase==PHASE_BR)
   1aa5a:	1dfb      	adds	r3, r7, #7
   1aa5c:	781b      	ldrb	r3, [r3, #0]
   1aa5e:	2b02      	cmp	r3, #2
   1aa60:	d101      	bne.n	1aa66 <filterVoltage+0x3a>
	{
		p1 = &struct_rmsBR;
   1aa62:	4b24      	ldr	r3, [pc, #144]	; (1aaf4 <filterVoltage+0xc8>)
   1aa64:	60fb      	str	r3, [r7, #12]
	}
	
	p1->voltRange[p1->index%NO_RMS_VOLTAGE_READINGS]=voltReading;
   1aa66:	68fb      	ldr	r3, [r7, #12]
   1aa68:	7b1a      	ldrb	r2, [r3, #12]
   1aa6a:	4b23      	ldr	r3, [pc, #140]	; (1aaf8 <filterVoltage+0xcc>)
   1aa6c:	2105      	movs	r1, #5
   1aa6e:	0010      	movs	r0, r2
   1aa70:	4798      	blx	r3
   1aa72:	000b      	movs	r3, r1
   1aa74:	b2db      	uxtb	r3, r3
   1aa76:	001a      	movs	r2, r3
   1aa78:	68fb      	ldr	r3, [r7, #12]
   1aa7a:	0052      	lsls	r2, r2, #1
   1aa7c:	1d39      	adds	r1, r7, #4
   1aa7e:	8809      	ldrh	r1, [r1, #0]
   1aa80:	52d1      	strh	r1, [r2, r3]
	p1->index = ((p1->index) + 1 )%NO_RMS_VOLTAGE_READINGS;
   1aa82:	68fb      	ldr	r3, [r7, #12]
   1aa84:	7b1b      	ldrb	r3, [r3, #12]
   1aa86:	1c5a      	adds	r2, r3, #1
   1aa88:	4b1c      	ldr	r3, [pc, #112]	; (1aafc <filterVoltage+0xd0>)
   1aa8a:	2105      	movs	r1, #5
   1aa8c:	0010      	movs	r0, r2
   1aa8e:	4798      	blx	r3
   1aa90:	000b      	movs	r3, r1
   1aa92:	b2da      	uxtb	r2, r3
   1aa94:	68fb      	ldr	r3, [r7, #12]
   1aa96:	731a      	strb	r2, [r3, #12]
	
	updateRMSValues(p1);
   1aa98:	68fb      	ldr	r3, [r7, #12]
   1aa9a:	0018      	movs	r0, r3
   1aa9c:	4b18      	ldr	r3, [pc, #96]	; (1ab00 <filterVoltage+0xd4>)
   1aa9e:	4798      	blx	r3
	
	//if(voltReading > p1->rmsVoltage)
	{
		if(p1->hasZeroReading)
   1aaa0:	68fb      	ldr	r3, [r7, #12]
   1aaa2:	7b5b      	ldrb	r3, [r3, #13]
   1aaa4:	2b00      	cmp	r3, #0
   1aaa6:	d002      	beq.n	1aaae <filterVoltage+0x82>
		{
			return voltReading;
   1aaa8:	1d3b      	adds	r3, r7, #4
   1aaaa:	881b      	ldrh	r3, [r3, #0]
   1aaac:	e019      	b.n	1aae2 <filterVoltage+0xb6>
		
		//if ((voltReading - p1->rmsVoltage)>(p1->rmsVoltage * 6/100))
		//{
		//return p1->rmsVoltage;
		//}
		if((p1->rmsVoltage - voltReading)<(p1->rmsVoltage * 40/100))
   1aaae:	68fb      	ldr	r3, [r7, #12]
   1aab0:	895b      	ldrh	r3, [r3, #10]
   1aab2:	001a      	movs	r2, r3
   1aab4:	1d3b      	adds	r3, r7, #4
   1aab6:	881b      	ldrh	r3, [r3, #0]
   1aab8:	1ad4      	subs	r4, r2, r3
   1aaba:	68fb      	ldr	r3, [r7, #12]
   1aabc:	895b      	ldrh	r3, [r3, #10]
   1aabe:	001a      	movs	r2, r3
   1aac0:	0013      	movs	r3, r2
   1aac2:	009b      	lsls	r3, r3, #2
   1aac4:	189b      	adds	r3, r3, r2
   1aac6:	00db      	lsls	r3, r3, #3
   1aac8:	001a      	movs	r2, r3
   1aaca:	4b0e      	ldr	r3, [pc, #56]	; (1ab04 <filterVoltage+0xd8>)
   1aacc:	2164      	movs	r1, #100	; 0x64
   1aace:	0010      	movs	r0, r2
   1aad0:	4798      	blx	r3
   1aad2:	0003      	movs	r3, r0
   1aad4:	429c      	cmp	r4, r3
   1aad6:	da02      	bge.n	1aade <filterVoltage+0xb2>
		{
			return p1->rmsVoltage;
   1aad8:	68fb      	ldr	r3, [r7, #12]
   1aada:	895b      	ldrh	r3, [r3, #10]
   1aadc:	e001      	b.n	1aae2 <filterVoltage+0xb6>
		}
		else
		{
			return voltReading;
   1aade:	1d3b      	adds	r3, r7, #4
   1aae0:	881b      	ldrh	r3, [r3, #0]
		}
	}
	
	return voltReading;
}
   1aae2:	0018      	movs	r0, r3
   1aae4:	46bd      	mov	sp, r7
   1aae6:	b005      	add	sp, #20
   1aae8:	bd90      	pop	{r4, r7, pc}
   1aaea:	46c0      	nop			; (mov r8, r8)
   1aaec:	200009b0 	.word	0x200009b0
   1aaf0:	20000930 	.word	0x20000930
   1aaf4:	200009e0 	.word	0x200009e0
   1aaf8:	000263ed 	.word	0x000263ed
   1aafc:	000265c1 	.word	0x000265c1
   1ab00:	0001a901 	.word	0x0001a901
   1ab04:	000263f5 	.word	0x000263f5

0001ab08 <detect_Three_Phase_Voltage>:

//Function to save the 3 phase voltage from ADC in to the structure, ADC values are filtered, and multiplied by factor here.
void detect_Three_Phase_Voltage(void) {
   1ab08:	b590      	push	{r4, r7, lr}
   1ab0a:	b085      	sub	sp, #20
   1ab0c:	af00      	add	r7, sp, #0
	
	
	
	if(xSemaphoreTake(xADC_Semaphore,portMAX_DELAY)== pdTRUE)
   1ab0e:	4b49      	ldr	r3, [pc, #292]	; (1ac34 <detect_Three_Phase_Voltage+0x12c>)
   1ab10:	681a      	ldr	r2, [r3, #0]
   1ab12:	2301      	movs	r3, #1
   1ab14:	425b      	negs	r3, r3
   1ab16:	0019      	movs	r1, r3
   1ab18:	0010      	movs	r0, r2
   1ab1a:	4b47      	ldr	r3, [pc, #284]	; (1ac38 <detect_Three_Phase_Voltage+0x130>)
   1ab1c:	4798      	blx	r3
   1ab1e:	0003      	movs	r3, r0
   1ab20:	2b01      	cmp	r3, #1
   1ab22:	d000      	beq.n	1ab26 <detect_Three_Phase_Voltage+0x1e>
   1ab24:	e082      	b.n	1ac2c <detect_Three_Phase_Voltage+0x124>
	{
		//int32_t adcRY = Read_ADC0(ADC_POSITIVE_INPUT_PIN19,2000);
		int32_t adcRY = Read_Voltage_ADC0(ADC_POSITIVE_INPUT_PIN19);
   1ab26:	2013      	movs	r0, #19
   1ab28:	4b44      	ldr	r3, [pc, #272]	; (1ac3c <detect_Three_Phase_Voltage+0x134>)
   1ab2a:	4798      	blx	r3
   1ab2c:	0003      	movs	r3, r0
   1ab2e:	60fb      	str	r3, [r7, #12]
		adcRY = (adcRY-10);
   1ab30:	68fb      	ldr	r3, [r7, #12]
   1ab32:	3b0a      	subs	r3, #10
   1ab34:	60fb      	str	r3, [r7, #12]
		if (adcRY<0)
   1ab36:	68fb      	ldr	r3, [r7, #12]
   1ab38:	2b00      	cmp	r3, #0
   1ab3a:	da02      	bge.n	1ab42 <detect_Three_Phase_Voltage+0x3a>
		{
			adcRY = 0;
   1ab3c:	2300      	movs	r3, #0
   1ab3e:	60fb      	str	r3, [r7, #12]
   1ab40:	e010      	b.n	1ab64 <detect_Three_Phase_Voltage+0x5c>
		}
		else
		{
			adcRY = (((adcRY-10)*660)/1000);
   1ab42:	68fb      	ldr	r3, [r7, #12]
   1ab44:	3b0a      	subs	r3, #10
   1ab46:	22a5      	movs	r2, #165	; 0xa5
   1ab48:	0092      	lsls	r2, r2, #2
   1ab4a:	435a      	muls	r2, r3
   1ab4c:	0010      	movs	r0, r2
   1ab4e:	4b3c      	ldr	r3, [pc, #240]	; (1ac40 <detect_Three_Phase_Voltage+0x138>)
   1ab50:	22fa      	movs	r2, #250	; 0xfa
   1ab52:	0091      	lsls	r1, r2, #2
   1ab54:	4798      	blx	r3
   1ab56:	0003      	movs	r3, r0
   1ab58:	60fb      	str	r3, [r7, #12]
			if (adcRY<0)
   1ab5a:	68fb      	ldr	r3, [r7, #12]
   1ab5c:	2b00      	cmp	r3, #0
   1ab5e:	da01      	bge.n	1ab64 <detect_Three_Phase_Voltage+0x5c>
			{
				adcRY = 0;
   1ab60:	2300      	movs	r3, #0
   1ab62:	60fb      	str	r3, [r7, #12]
			}
		}
		//int32_t adcYB = Read_ADC0(ADC_POSITIVE_INPUT_PIN18,2000);
		int32_t adcYB = Read_Voltage_ADC0(ADC_POSITIVE_INPUT_PIN18);
   1ab64:	2012      	movs	r0, #18
   1ab66:	4b35      	ldr	r3, [pc, #212]	; (1ac3c <detect_Three_Phase_Voltage+0x134>)
   1ab68:	4798      	blx	r3
   1ab6a:	0003      	movs	r3, r0
   1ab6c:	60bb      	str	r3, [r7, #8]
		adcYB = (adcYB-10);
   1ab6e:	68bb      	ldr	r3, [r7, #8]
   1ab70:	3b0a      	subs	r3, #10
   1ab72:	60bb      	str	r3, [r7, #8]
		if (adcYB<0)
   1ab74:	68bb      	ldr	r3, [r7, #8]
   1ab76:	2b00      	cmp	r3, #0
   1ab78:	da02      	bge.n	1ab80 <detect_Three_Phase_Voltage+0x78>
		{
			adcYB = 0;
   1ab7a:	2300      	movs	r3, #0
   1ab7c:	60bb      	str	r3, [r7, #8]
   1ab7e:	e010      	b.n	1aba2 <detect_Three_Phase_Voltage+0x9a>
		}
		else
		{
			adcYB = (((adcYB-10)*660)/1000);
   1ab80:	68bb      	ldr	r3, [r7, #8]
   1ab82:	3b0a      	subs	r3, #10
   1ab84:	22a5      	movs	r2, #165	; 0xa5
   1ab86:	0092      	lsls	r2, r2, #2
   1ab88:	435a      	muls	r2, r3
   1ab8a:	0010      	movs	r0, r2
   1ab8c:	4b2c      	ldr	r3, [pc, #176]	; (1ac40 <detect_Three_Phase_Voltage+0x138>)
   1ab8e:	22fa      	movs	r2, #250	; 0xfa
   1ab90:	0091      	lsls	r1, r2, #2
   1ab92:	4798      	blx	r3
   1ab94:	0003      	movs	r3, r0
   1ab96:	60bb      	str	r3, [r7, #8]
			if (adcYB<0)
   1ab98:	68bb      	ldr	r3, [r7, #8]
   1ab9a:	2b00      	cmp	r3, #0
   1ab9c:	da01      	bge.n	1aba2 <detect_Three_Phase_Voltage+0x9a>
			{
				adcYB = 0;
   1ab9e:	2300      	movs	r3, #0
   1aba0:	60bb      	str	r3, [r7, #8]
			}
		}

		//int32_t adcBR =  Read_ADC0(ADC_POSITIVE_INPUT_PIN17,2000);
		int32_t adcBR = Read_Voltage_ADC0(ADC_POSITIVE_INPUT_PIN17);
   1aba2:	2011      	movs	r0, #17
   1aba4:	4b25      	ldr	r3, [pc, #148]	; (1ac3c <detect_Three_Phase_Voltage+0x134>)
   1aba6:	4798      	blx	r3
   1aba8:	0003      	movs	r3, r0
   1abaa:	607b      	str	r3, [r7, #4]
		adcBR = (adcBR-12);
   1abac:	687b      	ldr	r3, [r7, #4]
   1abae:	3b0c      	subs	r3, #12
   1abb0:	607b      	str	r3, [r7, #4]
		if (adcBR<0)
   1abb2:	687b      	ldr	r3, [r7, #4]
   1abb4:	2b00      	cmp	r3, #0
   1abb6:	da02      	bge.n	1abbe <detect_Three_Phase_Voltage+0xb6>
		{
			adcBR = 0;
   1abb8:	2300      	movs	r3, #0
   1abba:	607b      	str	r3, [r7, #4]
   1abbc:	e00f      	b.n	1abde <detect_Three_Phase_Voltage+0xd6>
		}
		else
		{
			adcBR = (((adcBR-12)*670)/1000);
   1abbe:	687b      	ldr	r3, [r7, #4]
   1abc0:	3b0c      	subs	r3, #12
   1abc2:	4a20      	ldr	r2, [pc, #128]	; (1ac44 <detect_Three_Phase_Voltage+0x13c>)
   1abc4:	435a      	muls	r2, r3
   1abc6:	0010      	movs	r0, r2
   1abc8:	4b1d      	ldr	r3, [pc, #116]	; (1ac40 <detect_Three_Phase_Voltage+0x138>)
   1abca:	22fa      	movs	r2, #250	; 0xfa
   1abcc:	0091      	lsls	r1, r2, #2
   1abce:	4798      	blx	r3
   1abd0:	0003      	movs	r3, r0
   1abd2:	607b      	str	r3, [r7, #4]
			if (adcBR<0)
   1abd4:	687b      	ldr	r3, [r7, #4]
   1abd6:	2b00      	cmp	r3, #0
   1abd8:	da01      	bge.n	1abde <detect_Three_Phase_Voltage+0xd6>
			{
				adcBR = 0;
   1abda:	2300      	movs	r3, #0
   1abdc:	607b      	str	r3, [r7, #4]
			}
		}
		
		Analog_Parameter_Struct.PhaseRY_Voltage = filterVoltage(PHASE_RY,adcRY);
   1abde:	68fb      	ldr	r3, [r7, #12]
   1abe0:	b29b      	uxth	r3, r3
   1abe2:	0019      	movs	r1, r3
   1abe4:	2000      	movs	r0, #0
   1abe6:	4b18      	ldr	r3, [pc, #96]	; (1ac48 <detect_Three_Phase_Voltage+0x140>)
   1abe8:	4798      	blx	r3
   1abea:	0003      	movs	r3, r0
   1abec:	001a      	movs	r2, r3
   1abee:	4b17      	ldr	r3, [pc, #92]	; (1ac4c <detect_Three_Phase_Voltage+0x144>)
   1abf0:	601a      	str	r2, [r3, #0]
		Analog_Parameter_Struct.PhaseYB_Voltage = filterVoltage(PHASE_YB,adcYB);
   1abf2:	68bb      	ldr	r3, [r7, #8]
   1abf4:	b29b      	uxth	r3, r3
   1abf6:	0019      	movs	r1, r3
   1abf8:	2001      	movs	r0, #1
   1abfa:	4b13      	ldr	r3, [pc, #76]	; (1ac48 <detect_Three_Phase_Voltage+0x140>)
   1abfc:	4798      	blx	r3
   1abfe:	0003      	movs	r3, r0
   1ac00:	001a      	movs	r2, r3
   1ac02:	4b12      	ldr	r3, [pc, #72]	; (1ac4c <detect_Three_Phase_Voltage+0x144>)
   1ac04:	605a      	str	r2, [r3, #4]
		Analog_Parameter_Struct.PhaseBR_Voltage = filterVoltage(PHASE_BR,adcBR);
   1ac06:	687b      	ldr	r3, [r7, #4]
   1ac08:	b29b      	uxth	r3, r3
   1ac0a:	0019      	movs	r1, r3
   1ac0c:	2002      	movs	r0, #2
   1ac0e:	4b0e      	ldr	r3, [pc, #56]	; (1ac48 <detect_Three_Phase_Voltage+0x140>)
   1ac10:	4798      	blx	r3
   1ac12:	0003      	movs	r3, r0
   1ac14:	001a      	movs	r2, r3
   1ac16:	4b0d      	ldr	r3, [pc, #52]	; (1ac4c <detect_Three_Phase_Voltage+0x144>)
   1ac18:	609a      	str	r2, [r3, #8]
		
		//Analog_Parameter_Struct.PhaseRY_Voltage = adcRY;
		//Analog_Parameter_Struct.PhaseYB_Voltage = adcYB;
		//Analog_Parameter_Struct.PhaseBR_Voltage = adcBR;
		
		set_Three_Phase_State_From_Voltage();
   1ac1a:	4b0d      	ldr	r3, [pc, #52]	; (1ac50 <detect_Three_Phase_Voltage+0x148>)
   1ac1c:	4798      	blx	r3
		xSemaphoreGive(xADC_Semaphore);
   1ac1e:	4b05      	ldr	r3, [pc, #20]	; (1ac34 <detect_Three_Phase_Voltage+0x12c>)
   1ac20:	6818      	ldr	r0, [r3, #0]
   1ac22:	2300      	movs	r3, #0
   1ac24:	2200      	movs	r2, #0
   1ac26:	2100      	movs	r1, #0
   1ac28:	4c0a      	ldr	r4, [pc, #40]	; (1ac54 <detect_Three_Phase_Voltage+0x14c>)
   1ac2a:	47a0      	blx	r4
	}
}
   1ac2c:	46c0      	nop			; (mov r8, r8)
   1ac2e:	46bd      	mov	sp, r7
   1ac30:	b005      	add	sp, #20
   1ac32:	bd90      	pop	{r4, r7, pc}
   1ac34:	20000430 	.word	0x20000430
   1ac38:	0001f561 	.word	0x0001f561
   1ac3c:	0001a11d 	.word	0x0001a11d
   1ac40:	000263f5 	.word	0x000263f5
   1ac44:	0000029e 	.word	0x0000029e
   1ac48:	0001aa2d 	.word	0x0001aa2d
   1ac4c:	200008e8 	.word	0x200008e8
   1ac50:	0001ac59 	.word	0x0001ac59
   1ac54:	0001f0c1 	.word	0x0001f0c1

0001ac58 <set_Three_Phase_State_From_Voltage>:

//Function to set the Three Phase State from acquired voltage
void set_Three_Phase_State_From_Voltage(void) {
   1ac58:	b580      	push	{r7, lr}
   1ac5a:	b082      	sub	sp, #8
   1ac5c:	af00      	add	r7, sp, #0
	
	if(startSequenceOn)
   1ac5e:	4b33      	ldr	r3, [pc, #204]	; (1ad2c <set_Three_Phase_State_From_Voltage+0xd4>)
   1ac60:	781b      	ldrb	r3, [r3, #0]
   1ac62:	2b00      	cmp	r3, #0
   1ac64:	d15d      	bne.n	1ad22 <set_Three_Phase_State_From_Voltage+0xca>
	{
		return;
	}
	
	uint8_t temp_phase_state = structThreePhase_state.u8t_phase_ac_state;		//save last AC Phase State, in case AC Phase State is going to change
   1ac66:	1dfb      	adds	r3, r7, #7
   1ac68:	4a31      	ldr	r2, [pc, #196]	; (1ad30 <set_Three_Phase_State_From_Voltage+0xd8>)
   1ac6a:	7852      	ldrb	r2, [r2, #1]
   1ac6c:	701a      	strb	r2, [r3, #0]
	
	
	if ((Analog_Parameter_Struct.PhaseRY_Voltage < 80) &&
   1ac6e:	4b31      	ldr	r3, [pc, #196]	; (1ad34 <set_Three_Phase_State_From_Voltage+0xdc>)
   1ac70:	681b      	ldr	r3, [r3, #0]
   1ac72:	2b4f      	cmp	r3, #79	; 0x4f
   1ac74:	d80b      	bhi.n	1ac8e <set_Three_Phase_State_From_Voltage+0x36>
	(Analog_Parameter_Struct.PhaseYB_Voltage < 80) &&
   1ac76:	4b2f      	ldr	r3, [pc, #188]	; (1ad34 <set_Three_Phase_State_From_Voltage+0xdc>)
   1ac78:	685b      	ldr	r3, [r3, #4]
	if ((Analog_Parameter_Struct.PhaseRY_Voltage < 80) &&
   1ac7a:	2b4f      	cmp	r3, #79	; 0x4f
   1ac7c:	d807      	bhi.n	1ac8e <set_Three_Phase_State_From_Voltage+0x36>
	(Analog_Parameter_Struct.PhaseBR_Voltage < 80))				// if All phase volt, less than 40
   1ac7e:	4b2d      	ldr	r3, [pc, #180]	; (1ad34 <set_Three_Phase_State_From_Voltage+0xdc>)
   1ac80:	689b      	ldr	r3, [r3, #8]
	(Analog_Parameter_Struct.PhaseYB_Voltage < 80) &&
   1ac82:	2b4f      	cmp	r3, #79	; 0x4f
   1ac84:	d803      	bhi.n	1ac8e <set_Three_Phase_State_From_Voltage+0x36>
	{
		structThreePhase_state.u8t_phase_ac_state = AC_OFF; //no phase is present, light is cut off
   1ac86:	4b2a      	ldr	r3, [pc, #168]	; (1ad30 <set_Three_Phase_State_From_Voltage+0xd8>)
   1ac88:	2200      	movs	r2, #0
   1ac8a:	705a      	strb	r2, [r3, #1]
   1ac8c:	e02d      	b.n	1acea <set_Three_Phase_State_From_Voltage+0x92>
	}
	else if((abs(Analog_Parameter_Struct.PhaseRY_Voltage-Analog_Parameter_Struct.PhaseYB_Voltage)>user_settings_parameter_struct.singlePhasingVoltage) ||
   1ac8e:	4b29      	ldr	r3, [pc, #164]	; (1ad34 <set_Three_Phase_State_From_Voltage+0xdc>)
   1ac90:	681a      	ldr	r2, [r3, #0]
   1ac92:	4b28      	ldr	r3, [pc, #160]	; (1ad34 <set_Three_Phase_State_From_Voltage+0xdc>)
   1ac94:	685b      	ldr	r3, [r3, #4]
   1ac96:	1ad3      	subs	r3, r2, r3
   1ac98:	17da      	asrs	r2, r3, #31
   1ac9a:	189b      	adds	r3, r3, r2
   1ac9c:	4053      	eors	r3, r2
   1ac9e:	4a26      	ldr	r2, [pc, #152]	; (1ad38 <set_Three_Phase_State_From_Voltage+0xe0>)
   1aca0:	8c52      	ldrh	r2, [r2, #34]	; 0x22
   1aca2:	b292      	uxth	r2, r2
   1aca4:	4293      	cmp	r3, r2
   1aca6:	dc19      	bgt.n	1acdc <set_Three_Phase_State_From_Voltage+0x84>
	(abs(Analog_Parameter_Struct.PhaseYB_Voltage-Analog_Parameter_Struct.PhaseBR_Voltage)>user_settings_parameter_struct.singlePhasingVoltage) ||
   1aca8:	4b22      	ldr	r3, [pc, #136]	; (1ad34 <set_Three_Phase_State_From_Voltage+0xdc>)
   1acaa:	685a      	ldr	r2, [r3, #4]
   1acac:	4b21      	ldr	r3, [pc, #132]	; (1ad34 <set_Three_Phase_State_From_Voltage+0xdc>)
   1acae:	689b      	ldr	r3, [r3, #8]
   1acb0:	1ad3      	subs	r3, r2, r3
   1acb2:	17da      	asrs	r2, r3, #31
   1acb4:	189b      	adds	r3, r3, r2
   1acb6:	4053      	eors	r3, r2
   1acb8:	4a1f      	ldr	r2, [pc, #124]	; (1ad38 <set_Three_Phase_State_From_Voltage+0xe0>)
   1acba:	8c52      	ldrh	r2, [r2, #34]	; 0x22
   1acbc:	b292      	uxth	r2, r2
	else if((abs(Analog_Parameter_Struct.PhaseRY_Voltage-Analog_Parameter_Struct.PhaseYB_Voltage)>user_settings_parameter_struct.singlePhasingVoltage) ||
   1acbe:	4293      	cmp	r3, r2
   1acc0:	dc0c      	bgt.n	1acdc <set_Three_Phase_State_From_Voltage+0x84>
	(abs(Analog_Parameter_Struct.PhaseBR_Voltage-Analog_Parameter_Struct.PhaseRY_Voltage)>user_settings_parameter_struct.singlePhasingVoltage))  // if diff betweeen any 2 phases > 80
   1acc2:	4b1c      	ldr	r3, [pc, #112]	; (1ad34 <set_Three_Phase_State_From_Voltage+0xdc>)
   1acc4:	689a      	ldr	r2, [r3, #8]
   1acc6:	4b1b      	ldr	r3, [pc, #108]	; (1ad34 <set_Three_Phase_State_From_Voltage+0xdc>)
   1acc8:	681b      	ldr	r3, [r3, #0]
   1acca:	1ad3      	subs	r3, r2, r3
   1accc:	17da      	asrs	r2, r3, #31
   1acce:	189b      	adds	r3, r3, r2
   1acd0:	4053      	eors	r3, r2
   1acd2:	4a19      	ldr	r2, [pc, #100]	; (1ad38 <set_Three_Phase_State_From_Voltage+0xe0>)
   1acd4:	8c52      	ldrh	r2, [r2, #34]	; 0x22
   1acd6:	b292      	uxth	r2, r2
	(abs(Analog_Parameter_Struct.PhaseYB_Voltage-Analog_Parameter_Struct.PhaseBR_Voltage)>user_settings_parameter_struct.singlePhasingVoltage) ||
   1acd8:	4293      	cmp	r3, r2
   1acda:	dd03      	ble.n	1ace4 <set_Three_Phase_State_From_Voltage+0x8c>
	{
			//if((Analog_Parameter_Struct.PhaseRY_Voltage>100 && Analog_Parameter_Struct.PhaseYB_Voltage>100) ||
			//(Analog_Parameter_Struct.PhaseYB_Voltage>100 && Analog_Parameter_Struct.PhaseBR_Voltage>100) ||
			//(Analog_Parameter_Struct.PhaseBR_Voltage>100 && Analog_Parameter_Struct.PhaseRY_Voltage>100))
			//{
				structThreePhase_state.u8t_phase_ac_state = AC_2PH;//Single phasing Occured
   1acdc:	4b14      	ldr	r3, [pc, #80]	; (1ad30 <set_Three_Phase_State_From_Voltage+0xd8>)
   1acde:	2202      	movs	r2, #2
   1ace0:	705a      	strb	r2, [r3, #1]
   1ace2:	e002      	b.n	1acea <set_Three_Phase_State_From_Voltage+0x92>
				//structThreePhase_state.u8t_phase_ac_state = AC_OFF; //no phase is present, light is cut off
			//}
	}
	else  //all Phase are present
	{
		structThreePhase_state.u8t_phase_ac_state = AC_3PH;
   1ace4:	4b12      	ldr	r3, [pc, #72]	; (1ad30 <set_Three_Phase_State_From_Voltage+0xd8>)
   1ace6:	2203      	movs	r2, #3
   1ace8:	705a      	strb	r2, [r3, #1]
	}
	
	if (current_three_phase_state != structThreePhase_state.u8t_phase_ac_state)
   1acea:	4b11      	ldr	r3, [pc, #68]	; (1ad30 <set_Three_Phase_State_From_Voltage+0xd8>)
   1acec:	785b      	ldrb	r3, [r3, #1]
   1acee:	b2da      	uxtb	r2, r3
   1acf0:	4b12      	ldr	r3, [pc, #72]	; (1ad3c <set_Three_Phase_State_From_Voltage+0xe4>)
   1acf2:	781b      	ldrb	r3, [r3, #0]
   1acf4:	b2db      	uxtb	r3, r3
   1acf6:	429a      	cmp	r2, r3
   1acf8:	d014      	beq.n	1ad24 <set_Three_Phase_State_From_Voltage+0xcc>
	{
		if(!motorRelatedVoltageBypassOn)
   1acfa:	4b11      	ldr	r3, [pc, #68]	; (1ad40 <set_Three_Phase_State_From_Voltage+0xe8>)
   1acfc:	781b      	ldrb	r3, [r3, #0]
   1acfe:	2201      	movs	r2, #1
   1ad00:	4053      	eors	r3, r2
   1ad02:	b2db      	uxtb	r3, r3
   1ad04:	2b00      	cmp	r3, #0
   1ad06:	d00d      	beq.n	1ad24 <set_Three_Phase_State_From_Voltage+0xcc>
		{
			last_three_phase_state  = 	temp_phase_state;								//assign saved temp AC Phase State to last_three_phase_state
   1ad08:	4b0e      	ldr	r3, [pc, #56]	; (1ad44 <set_Three_Phase_State_From_Voltage+0xec>)
   1ad0a:	1dfa      	adds	r2, r7, #7
   1ad0c:	7812      	ldrb	r2, [r2, #0]
   1ad0e:	701a      	strb	r2, [r3, #0]
			current_three_phase_state = structThreePhase_state.u8t_phase_ac_state;
   1ad10:	4b07      	ldr	r3, [pc, #28]	; (1ad30 <set_Three_Phase_State_From_Voltage+0xd8>)
   1ad12:	785b      	ldrb	r3, [r3, #1]
   1ad14:	b2da      	uxtb	r2, r3
   1ad16:	4b09      	ldr	r3, [pc, #36]	; (1ad3c <set_Three_Phase_State_From_Voltage+0xe4>)
   1ad18:	701a      	strb	r2, [r3, #0]
			eventOccured = true;
   1ad1a:	4b0b      	ldr	r3, [pc, #44]	; (1ad48 <set_Three_Phase_State_From_Voltage+0xf0>)
   1ad1c:	2201      	movs	r2, #1
   1ad1e:	701a      	strb	r2, [r3, #0]
   1ad20:	e000      	b.n	1ad24 <set_Three_Phase_State_From_Voltage+0xcc>
		return;
   1ad22:	46c0      	nop			; (mov r8, r8)
		}
	}
}
   1ad24:	46bd      	mov	sp, r7
   1ad26:	b002      	add	sp, #8
   1ad28:	bd80      	pop	{r7, pc}
   1ad2a:	46c0      	nop			; (mov r8, r8)
   1ad2c:	20000999 	.word	0x20000999
   1ad30:	20000948 	.word	0x20000948
   1ad34:	200008e8 	.word	0x200008e8
   1ad38:	20000854 	.word	0x20000854
   1ad3c:	20000a41 	.word	0x20000a41
   1ad40:	20000973 	.word	0x20000973
   1ad44:	2000092b 	.word	0x2000092b
   1ad48:	2000092e 	.word	0x2000092e

0001ad4c <detect_Motor_Current>:

//Function to detect the Motor Current, From ADC, Average it (using ADC_0) , and store it in the Analog_Parameter_Struct
void detect_Motor_Current(void){
   1ad4c:	b590      	push	{r4, r7, lr}
   1ad4e:	b083      	sub	sp, #12
   1ad50:	af00      	add	r7, sp, #0
	if(xSemaphoreTake(xADC_Semaphore,portMAX_DELAY)== pdTRUE)
   1ad52:	4b32      	ldr	r3, [pc, #200]	; (1ae1c <detect_Motor_Current+0xd0>)
   1ad54:	681a      	ldr	r2, [r3, #0]
   1ad56:	2301      	movs	r3, #1
   1ad58:	425b      	negs	r3, r3
   1ad5a:	0019      	movs	r1, r3
   1ad5c:	0010      	movs	r0, r2
   1ad5e:	4b30      	ldr	r3, [pc, #192]	; (1ae20 <detect_Motor_Current+0xd4>)
   1ad60:	4798      	blx	r3
   1ad62:	0003      	movs	r3, r0
   1ad64:	2b01      	cmp	r3, #1
   1ad66:	d154      	bne.n	1ae12 <detect_Motor_Current+0xc6>
	{
		uint32_t ADCcurrent = Read_ADC0(ADC_POSITIVE_INPUT_PIN16,200);
   1ad68:	21c8      	movs	r1, #200	; 0xc8
   1ad6a:	2010      	movs	r0, #16
   1ad6c:	4b2d      	ldr	r3, [pc, #180]	; (1ae24 <detect_Motor_Current+0xd8>)
   1ad6e:	4798      	blx	r3
   1ad70:	0003      	movs	r3, r0
   1ad72:	607b      	str	r3, [r7, #4]
		
		
		if(ADCcurrent>15)
   1ad74:	687b      	ldr	r3, [r7, #4]
   1ad76:	2b0f      	cmp	r3, #15
   1ad78:	d903      	bls.n	1ad82 <detect_Motor_Current+0x36>
		{
			ADCcurrent = ADCcurrent - 15;
   1ad7a:	687b      	ldr	r3, [r7, #4]
   1ad7c:	3b0f      	subs	r3, #15
   1ad7e:	607b      	str	r3, [r7, #4]
   1ad80:	e004      	b.n	1ad8c <detect_Motor_Current+0x40>
		}
		else if(ADCcurrent <= 15)
   1ad82:	687b      	ldr	r3, [r7, #4]
   1ad84:	2b0f      	cmp	r3, #15
   1ad86:	d801      	bhi.n	1ad8c <detect_Motor_Current+0x40>
		{
			ADCcurrent = 0;
   1ad88:	2300      	movs	r3, #0
   1ad8a:	607b      	str	r3, [r7, #4]
		}
		
		Analog_Parameter_Struct.Motor_Current_ADC_Value = ADCcurrent;				// does ADCcurrent here have ADC Value of Current ?
   1ad8c:	4b26      	ldr	r3, [pc, #152]	; (1ae28 <detect_Motor_Current+0xdc>)
   1ad8e:	687a      	ldr	r2, [r7, #4]
   1ad90:	60da      	str	r2, [r3, #12]
		//ADCcurrent = (ADCcurrent*7225)/1000;
		ADCcurrent = (ADCcurrent*3425)/1000;
   1ad92:	687b      	ldr	r3, [r7, #4]
   1ad94:	4a25      	ldr	r2, [pc, #148]	; (1ae2c <detect_Motor_Current+0xe0>)
   1ad96:	435a      	muls	r2, r3
   1ad98:	0010      	movs	r0, r2
   1ad9a:	4b25      	ldr	r3, [pc, #148]	; (1ae30 <detect_Motor_Current+0xe4>)
   1ad9c:	22fa      	movs	r2, #250	; 0xfa
   1ad9e:	0091      	lsls	r1, r2, #2
   1ada0:	4798      	blx	r3
   1ada2:	0003      	movs	r3, r0
   1ada4:	607b      	str	r3, [r7, #4]
		if(ADCcurrent<1200 && ADCcurrent!=0)
   1ada6:	687b      	ldr	r3, [r7, #4]
   1ada8:	4a22      	ldr	r2, [pc, #136]	; (1ae34 <detect_Motor_Current+0xe8>)
   1adaa:	4293      	cmp	r3, r2
   1adac:	d810      	bhi.n	1add0 <detect_Motor_Current+0x84>
   1adae:	687b      	ldr	r3, [r7, #4]
   1adb0:	2b00      	cmp	r3, #0
   1adb2:	d00d      	beq.n	1add0 <detect_Motor_Current+0x84>
		{
			ADCcurrent = ADCcurrent + (((1200-ADCcurrent)*272)/1000);
   1adb4:	687b      	ldr	r3, [r7, #4]
   1adb6:	4a20      	ldr	r2, [pc, #128]	; (1ae38 <detect_Motor_Current+0xec>)
   1adb8:	4353      	muls	r3, r2
   1adba:	4a20      	ldr	r2, [pc, #128]	; (1ae3c <detect_Motor_Current+0xf0>)
   1adbc:	1898      	adds	r0, r3, r2
   1adbe:	4b1c      	ldr	r3, [pc, #112]	; (1ae30 <detect_Motor_Current+0xe4>)
   1adc0:	22fa      	movs	r2, #250	; 0xfa
   1adc2:	0091      	lsls	r1, r2, #2
   1adc4:	4798      	blx	r3
   1adc6:	0003      	movs	r3, r0
   1adc8:	001a      	movs	r2, r3
   1adca:	687b      	ldr	r3, [r7, #4]
   1adcc:	189b      	adds	r3, r3, r2
   1adce:	607b      	str	r3, [r7, #4]
		}
		Analog_Parameter_Struct.Motor_Current = ADCcurrent;
   1add0:	4b15      	ldr	r3, [pc, #84]	; (1ae28 <detect_Motor_Current+0xdc>)
   1add2:	687a      	ldr	r2, [r7, #4]
   1add4:	611a      	str	r2, [r3, #16]
		Analog_Parameter_Struct.Motor_Current_IntPart = ADCcurrent/100;
   1add6:	687a      	ldr	r2, [r7, #4]
   1add8:	4b15      	ldr	r3, [pc, #84]	; (1ae30 <detect_Motor_Current+0xe4>)
   1adda:	2164      	movs	r1, #100	; 0x64
   1addc:	0010      	movs	r0, r2
   1adde:	4798      	blx	r3
   1ade0:	0003      	movs	r3, r0
   1ade2:	b29a      	uxth	r2, r3
   1ade4:	4b10      	ldr	r3, [pc, #64]	; (1ae28 <detect_Motor_Current+0xdc>)
   1ade6:	829a      	strh	r2, [r3, #20]
		Analog_Parameter_Struct.Motor_Current_DecPart = ADCcurrent%100;
   1ade8:	687a      	ldr	r2, [r7, #4]
   1adea:	4b15      	ldr	r3, [pc, #84]	; (1ae40 <detect_Motor_Current+0xf4>)
   1adec:	2164      	movs	r1, #100	; 0x64
   1adee:	0010      	movs	r0, r2
   1adf0:	4798      	blx	r3
   1adf2:	000b      	movs	r3, r1
   1adf4:	b29a      	uxth	r2, r3
   1adf6:	4b0c      	ldr	r3, [pc, #48]	; (1ae28 <detect_Motor_Current+0xdc>)
   1adf8:	82da      	strh	r2, [r3, #22]
		ucharCurrent_Detect_Flag = 0;												//reset the flag, to disable current reading for next 500ms
   1adfa:	4b12      	ldr	r3, [pc, #72]	; (1ae44 <detect_Motor_Current+0xf8>)
   1adfc:	2200      	movs	r2, #0
   1adfe:	701a      	strb	r2, [r3, #0]
		calcPowerConsumption();
   1ae00:	4b11      	ldr	r3, [pc, #68]	; (1ae48 <detect_Motor_Current+0xfc>)
   1ae02:	4798      	blx	r3
		
		xSemaphoreGive(xADC_Semaphore);
   1ae04:	4b05      	ldr	r3, [pc, #20]	; (1ae1c <detect_Motor_Current+0xd0>)
   1ae06:	6818      	ldr	r0, [r3, #0]
   1ae08:	2300      	movs	r3, #0
   1ae0a:	2200      	movs	r2, #0
   1ae0c:	2100      	movs	r1, #0
   1ae0e:	4c0f      	ldr	r4, [pc, #60]	; (1ae4c <detect_Motor_Current+0x100>)
   1ae10:	47a0      	blx	r4
	}
}
   1ae12:	46c0      	nop			; (mov r8, r8)
   1ae14:	46bd      	mov	sp, r7
   1ae16:	b003      	add	sp, #12
   1ae18:	bd90      	pop	{r4, r7, pc}
   1ae1a:	46c0      	nop			; (mov r8, r8)
   1ae1c:	20000430 	.word	0x20000430
   1ae20:	0001f561 	.word	0x0001f561
   1ae24:	0001a061 	.word	0x0001a061
   1ae28:	200008e8 	.word	0x200008e8
   1ae2c:	00000d61 	.word	0x00000d61
   1ae30:	000262e1 	.word	0x000262e1
   1ae34:	000004af 	.word	0x000004af
   1ae38:	fffffef0 	.word	0xfffffef0
   1ae3c:	0004fb00 	.word	0x0004fb00
   1ae40:	000263ed 	.word	0x000263ed
   1ae44:	20000443 	.word	0x20000443
   1ae48:	0001ae51 	.word	0x0001ae51
   1ae4c:	0001f0c1 	.word	0x0001f0c1

0001ae50 <calcPowerConsumption>:

/************************************************************************/
/* To Calculate Power Consumption of Motor                              */
/************************************************************************/
void calcPowerConsumption(void)
{
   1ae50:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ae52:	b085      	sub	sp, #20
   1ae54:	af00      	add	r7, sp, #0
	uint16_t avgVotlage = Analog_Parameter_Struct.PhaseRY_Voltage + Analog_Parameter_Struct.PhaseYB_Voltage + Analog_Parameter_Struct.PhaseBR_Voltage;
   1ae56:	4b37      	ldr	r3, [pc, #220]	; (1af34 <calcPowerConsumption+0xe4>)
   1ae58:	681b      	ldr	r3, [r3, #0]
   1ae5a:	b29a      	uxth	r2, r3
   1ae5c:	4b35      	ldr	r3, [pc, #212]	; (1af34 <calcPowerConsumption+0xe4>)
   1ae5e:	685b      	ldr	r3, [r3, #4]
   1ae60:	b29b      	uxth	r3, r3
   1ae62:	18d3      	adds	r3, r2, r3
   1ae64:	b299      	uxth	r1, r3
   1ae66:	4b33      	ldr	r3, [pc, #204]	; (1af34 <calcPowerConsumption+0xe4>)
   1ae68:	689b      	ldr	r3, [r3, #8]
   1ae6a:	b29a      	uxth	r2, r3
   1ae6c:	230e      	movs	r3, #14
   1ae6e:	18fb      	adds	r3, r7, r3
   1ae70:	188a      	adds	r2, r1, r2
   1ae72:	801a      	strh	r2, [r3, #0]
	
	double result = (avgVotlage/3.0) * (Analog_Parameter_Struct.Motor_Current/100.0);
   1ae74:	230e      	movs	r3, #14
   1ae76:	18fb      	adds	r3, r7, r3
   1ae78:	881a      	ldrh	r2, [r3, #0]
   1ae7a:	4b2f      	ldr	r3, [pc, #188]	; (1af38 <calcPowerConsumption+0xe8>)
   1ae7c:	0010      	movs	r0, r2
   1ae7e:	4798      	blx	r3
   1ae80:	4c2e      	ldr	r4, [pc, #184]	; (1af3c <calcPowerConsumption+0xec>)
   1ae82:	2200      	movs	r2, #0
   1ae84:	4b2e      	ldr	r3, [pc, #184]	; (1af40 <calcPowerConsumption+0xf0>)
   1ae86:	47a0      	blx	r4
   1ae88:	0003      	movs	r3, r0
   1ae8a:	000c      	movs	r4, r1
   1ae8c:	001d      	movs	r5, r3
   1ae8e:	0026      	movs	r6, r4
   1ae90:	4b28      	ldr	r3, [pc, #160]	; (1af34 <calcPowerConsumption+0xe4>)
   1ae92:	691a      	ldr	r2, [r3, #16]
   1ae94:	4b2b      	ldr	r3, [pc, #172]	; (1af44 <calcPowerConsumption+0xf4>)
   1ae96:	0010      	movs	r0, r2
   1ae98:	4798      	blx	r3
   1ae9a:	4c28      	ldr	r4, [pc, #160]	; (1af3c <calcPowerConsumption+0xec>)
   1ae9c:	2200      	movs	r2, #0
   1ae9e:	4b2a      	ldr	r3, [pc, #168]	; (1af48 <calcPowerConsumption+0xf8>)
   1aea0:	47a0      	blx	r4
   1aea2:	0003      	movs	r3, r0
   1aea4:	000c      	movs	r4, r1
   1aea6:	001a      	movs	r2, r3
   1aea8:	0023      	movs	r3, r4
   1aeaa:	4c28      	ldr	r4, [pc, #160]	; (1af4c <calcPowerConsumption+0xfc>)
   1aeac:	0028      	movs	r0, r5
   1aeae:	0031      	movs	r1, r6
   1aeb0:	47a0      	blx	r4
   1aeb2:	0003      	movs	r3, r0
   1aeb4:	000c      	movs	r4, r1
   1aeb6:	603b      	str	r3, [r7, #0]
   1aeb8:	607c      	str	r4, [r7, #4]
	result = sqrt(3) * result * 85.0 / 100.0;
   1aeba:	4c24      	ldr	r4, [pc, #144]	; (1af4c <calcPowerConsumption+0xfc>)
   1aebc:	4a24      	ldr	r2, [pc, #144]	; (1af50 <calcPowerConsumption+0x100>)
   1aebe:	4b25      	ldr	r3, [pc, #148]	; (1af54 <calcPowerConsumption+0x104>)
   1aec0:	6838      	ldr	r0, [r7, #0]
   1aec2:	6879      	ldr	r1, [r7, #4]
   1aec4:	47a0      	blx	r4
   1aec6:	0003      	movs	r3, r0
   1aec8:	000c      	movs	r4, r1
   1aeca:	0018      	movs	r0, r3
   1aecc:	0021      	movs	r1, r4
   1aece:	4c1f      	ldr	r4, [pc, #124]	; (1af4c <calcPowerConsumption+0xfc>)
   1aed0:	2200      	movs	r2, #0
   1aed2:	4b21      	ldr	r3, [pc, #132]	; (1af58 <calcPowerConsumption+0x108>)
   1aed4:	47a0      	blx	r4
   1aed6:	0003      	movs	r3, r0
   1aed8:	000c      	movs	r4, r1
   1aeda:	0018      	movs	r0, r3
   1aedc:	0021      	movs	r1, r4
   1aede:	4c17      	ldr	r4, [pc, #92]	; (1af3c <calcPowerConsumption+0xec>)
   1aee0:	2200      	movs	r2, #0
   1aee2:	4b19      	ldr	r3, [pc, #100]	; (1af48 <calcPowerConsumption+0xf8>)
   1aee4:	47a0      	blx	r4
   1aee6:	0003      	movs	r3, r0
   1aee8:	000c      	movs	r4, r1
   1aeea:	603b      	str	r3, [r7, #0]
   1aeec:	607c      	str	r4, [r7, #4]

	Analog_Parameter_Struct.Motor_Power = (uint32_t) result;
   1aeee:	4b1b      	ldr	r3, [pc, #108]	; (1af5c <calcPowerConsumption+0x10c>)
   1aef0:	6838      	ldr	r0, [r7, #0]
   1aef2:	6879      	ldr	r1, [r7, #4]
   1aef4:	4798      	blx	r3
   1aef6:	0002      	movs	r2, r0
   1aef8:	4b0e      	ldr	r3, [pc, #56]	; (1af34 <calcPowerConsumption+0xe4>)
   1aefa:	621a      	str	r2, [r3, #32]
	Analog_Parameter_Struct.Motor_Power_IntPart = (uint32_t) result / 1000;
   1aefc:	4b17      	ldr	r3, [pc, #92]	; (1af5c <calcPowerConsumption+0x10c>)
   1aefe:	6838      	ldr	r0, [r7, #0]
   1af00:	6879      	ldr	r1, [r7, #4]
   1af02:	4798      	blx	r3
   1af04:	4b16      	ldr	r3, [pc, #88]	; (1af60 <calcPowerConsumption+0x110>)
   1af06:	22fa      	movs	r2, #250	; 0xfa
   1af08:	0091      	lsls	r1, r2, #2
   1af0a:	4798      	blx	r3
   1af0c:	0003      	movs	r3, r0
   1af0e:	b29a      	uxth	r2, r3
   1af10:	4b08      	ldr	r3, [pc, #32]	; (1af34 <calcPowerConsumption+0xe4>)
   1af12:	849a      	strh	r2, [r3, #36]	; 0x24
	Analog_Parameter_Struct.Motor_Power_DecPart =  (uint32_t) result % 1000;
   1af14:	4b11      	ldr	r3, [pc, #68]	; (1af5c <calcPowerConsumption+0x10c>)
   1af16:	6838      	ldr	r0, [r7, #0]
   1af18:	6879      	ldr	r1, [r7, #4]
   1af1a:	4798      	blx	r3
   1af1c:	4b11      	ldr	r3, [pc, #68]	; (1af64 <calcPowerConsumption+0x114>)
   1af1e:	22fa      	movs	r2, #250	; 0xfa
   1af20:	0091      	lsls	r1, r2, #2
   1af22:	4798      	blx	r3
   1af24:	000b      	movs	r3, r1
   1af26:	001a      	movs	r2, r3
   1af28:	4b02      	ldr	r3, [pc, #8]	; (1af34 <calcPowerConsumption+0xe4>)
   1af2a:	629a      	str	r2, [r3, #40]	; 0x28
}
   1af2c:	46c0      	nop			; (mov r8, r8)
   1af2e:	46bd      	mov	sp, r7
   1af30:	b005      	add	sp, #20
   1af32:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1af34:	200008e8 	.word	0x200008e8
   1af38:	00028851 	.word	0x00028851
   1af3c:	00027415 	.word	0x00027415
   1af40:	40080000 	.word	0x40080000
   1af44:	000288d5 	.word	0x000288d5
   1af48:	40590000 	.word	0x40590000
   1af4c:	00027c7d 	.word	0x00027c7d
   1af50:	e8584caa 	.word	0xe8584caa
   1af54:	3ffbb67a 	.word	0x3ffbb67a
   1af58:	40554000 	.word	0x40554000
   1af5c:	000266dd 	.word	0x000266dd
   1af60:	000262e1 	.word	0x000262e1
   1af64:	000263ed 	.word	0x000263ed

0001af68 <should_Detect_New_Current>:

//Function to check if the New Current Reading should be read
bool should_Detect_New_Current(void){
   1af68:	b580      	push	{r7, lr}
   1af6a:	af00      	add	r7, sp, #0
	
	//todo : add all the conditions checks i.e. motor ON, current consumption ON etc. , and should get new reading every 500ms
	
	return (ucharCurrent_Detect_Flag == 1);
   1af6c:	4b04      	ldr	r3, [pc, #16]	; (1af80 <should_Detect_New_Current+0x18>)
   1af6e:	781b      	ldrb	r3, [r3, #0]
   1af70:	b2db      	uxtb	r3, r3
   1af72:	3b01      	subs	r3, #1
   1af74:	425a      	negs	r2, r3
   1af76:	4153      	adcs	r3, r2
   1af78:	b2db      	uxtb	r3, r3
	
	//return (should_Detect_New_Voltage());
}
   1af7a:	0018      	movs	r0, r3
   1af7c:	46bd      	mov	sp, r7
   1af7e:	bd80      	pop	{r7, pc}
   1af80:	20000443 	.word	0x20000443

0001af84 <getACPowerState>:

bool getACPowerState(void)
{
   1af84:	b580      	push	{r7, lr}
   1af86:	af00      	add	r7, sp, #0
	//return false;
	return phaseAC;
   1af88:	4b02      	ldr	r3, [pc, #8]	; (1af94 <getACPowerState+0x10>)
   1af8a:	781b      	ldrb	r3, [r3, #0]
   1af8c:	b2db      	uxtb	r3, r3
}
   1af8e:	0018      	movs	r0, r3
   1af90:	46bd      	mov	sp, r7
   1af92:	bd80      	pop	{r7, pc}
   1af94:	200009c2 	.word	0x200009c2

0001af98 <setACPowerState>:

void setACPowerState(bool state)
{
   1af98:	b580      	push	{r7, lr}
   1af9a:	b082      	sub	sp, #8
   1af9c:	af00      	add	r7, sp, #0
   1af9e:	0002      	movs	r2, r0
   1afa0:	1dfb      	adds	r3, r7, #7
   1afa2:	701a      	strb	r2, [r3, #0]
	phaseAC = state;
   1afa4:	4b03      	ldr	r3, [pc, #12]	; (1afb4 <setACPowerState+0x1c>)
   1afa6:	1dfa      	adds	r2, r7, #7
   1afa8:	7812      	ldrb	r2, [r2, #0]
   1afaa:	701a      	strb	r2, [r3, #0]
}
   1afac:	46c0      	nop			; (mov r8, r8)
   1afae:	46bd      	mov	sp, r7
   1afb0:	b002      	add	sp, #8
   1afb2:	bd80      	pop	{r7, pc}
   1afb4:	200009c2 	.word	0x200009c2

0001afb8 <getAllPhaseState>:

uint8_t getAllPhaseState(void)
{
   1afb8:	b580      	push	{r7, lr}
   1afba:	af00      	add	r7, sp, #0
	return allPhase;
   1afbc:	4b02      	ldr	r3, [pc, #8]	; (1afc8 <getAllPhaseState+0x10>)
   1afbe:	781b      	ldrb	r3, [r3, #0]
   1afc0:	b2db      	uxtb	r3, r3
	//}
	//else
	//{
	//return allPhase;
	//}
}
   1afc2:	0018      	movs	r0, r3
   1afc4:	46bd      	mov	sp, r7
   1afc6:	bd80      	pop	{r7, pc}
   1afc8:	20000961 	.word	0x20000961

0001afcc <setAllPhaseState>:

void setAllPhaseState(uint8_t state)
{
   1afcc:	b580      	push	{r7, lr}
   1afce:	b082      	sub	sp, #8
   1afd0:	af00      	add	r7, sp, #0
   1afd2:	0002      	movs	r2, r0
   1afd4:	1dfb      	adds	r3, r7, #7
   1afd6:	701a      	strb	r2, [r3, #0]
	allPhase = state;
   1afd8:	4b03      	ldr	r3, [pc, #12]	; (1afe8 <setAllPhaseState+0x1c>)
   1afda:	1dfa      	adds	r2, r7, #7
   1afdc:	7812      	ldrb	r2, [r2, #0]
   1afde:	701a      	strb	r2, [r3, #0]
}
   1afe0:	46c0      	nop			; (mov r8, r8)
   1afe2:	46bd      	mov	sp, r7
   1afe4:	b002      	add	sp, #8
   1afe6:	bd80      	pop	{r7, pc}
   1afe8:	20000961 	.word	0x20000961

0001afec <getPhaseSequence>:

bool getPhaseSequence()
{
   1afec:	b580      	push	{r7, lr}
   1afee:	af00      	add	r7, sp, #0
	return vBoolPhaseSeq;
   1aff0:	4b02      	ldr	r3, [pc, #8]	; (1affc <getPhaseSequence+0x10>)
   1aff2:	781b      	ldrb	r3, [r3, #0]
   1aff4:	b2db      	uxtb	r3, r3
}
   1aff6:	0018      	movs	r0, r3
   1aff8:	46bd      	mov	sp, r7
   1affa:	bd80      	pop	{r7, pc}
   1affc:	20000974 	.word	0x20000974

0001b000 <setPhaseSequence>:

void setPhaseSequence(bool phaseSequence)
{
   1b000:	b580      	push	{r7, lr}
   1b002:	b082      	sub	sp, #8
   1b004:	af00      	add	r7, sp, #0
   1b006:	0002      	movs	r2, r0
   1b008:	1dfb      	adds	r3, r7, #7
   1b00a:	701a      	strb	r2, [r3, #0]
	vBoolPhaseSeq=phaseSequence;
   1b00c:	4b03      	ldr	r3, [pc, #12]	; (1b01c <setPhaseSequence+0x1c>)
   1b00e:	1dfa      	adds	r2, r7, #7
   1b010:	7812      	ldrb	r2, [r2, #0]
   1b012:	701a      	strb	r2, [r3, #0]
}
   1b014:	46c0      	nop			; (mov r8, r8)
   1b016:	46bd      	mov	sp, r7
   1b018:	b002      	add	sp, #8
   1b01a:	bd80      	pop	{r7, pc}
   1b01c:	20000974 	.word	0x20000974

0001b020 <getMotorState>:


bool getMotorState(void)
{
   1b020:	b580      	push	{r7, lr}
   1b022:	af00      	add	r7, sp, #0
	return mFeedback;
   1b024:	4b02      	ldr	r3, [pc, #8]	; (1b030 <getMotorState+0x10>)
   1b026:	781b      	ldrb	r3, [r3, #0]
   1b028:	b2db      	uxtb	r3, r3
}
   1b02a:	0018      	movs	r0, r3
   1b02c:	46bd      	mov	sp, r7
   1b02e:	bd80      	pop	{r7, pc}
   1b030:	20000942 	.word	0x20000942

0001b034 <setMotorState>:

void setMotorState(bool state)
{
   1b034:	b580      	push	{r7, lr}
   1b036:	b082      	sub	sp, #8
   1b038:	af00      	add	r7, sp, #0
   1b03a:	0002      	movs	r2, r0
   1b03c:	1dfb      	adds	r3, r7, #7
   1b03e:	701a      	strb	r2, [r3, #0]
	mFeedback = state;
   1b040:	4b0a      	ldr	r3, [pc, #40]	; (1b06c <setMotorState+0x38>)
   1b042:	1dfa      	adds	r2, r7, #7
   1b044:	7812      	ldrb	r2, [r2, #0]
   1b046:	701a      	strb	r2, [r3, #0]
	if (state)
   1b048:	1dfb      	adds	r3, r7, #7
   1b04a:	781b      	ldrb	r3, [r3, #0]
   1b04c:	2b00      	cmp	r3, #0
   1b04e:	d004      	beq.n	1b05a <setMotorState+0x26>
	{
		MOTOR_ON_LED_ON;
   1b050:	2100      	movs	r1, #0
   1b052:	2005      	movs	r0, #5
   1b054:	4b06      	ldr	r3, [pc, #24]	; (1b070 <setMotorState+0x3c>)
   1b056:	4798      	blx	r3
	}
	else
	{
		MOTOR_ON_LED_OFF;
	}
}
   1b058:	e003      	b.n	1b062 <setMotorState+0x2e>
		MOTOR_ON_LED_OFF;
   1b05a:	2101      	movs	r1, #1
   1b05c:	2005      	movs	r0, #5
   1b05e:	4b04      	ldr	r3, [pc, #16]	; (1b070 <setMotorState+0x3c>)
   1b060:	4798      	blx	r3
}
   1b062:	46c0      	nop			; (mov r8, r8)
   1b064:	46bd      	mov	sp, r7
   1b066:	b002      	add	sp, #8
   1b068:	bd80      	pop	{r7, pc}
   1b06a:	46c0      	nop			; (mov r8, r8)
   1b06c:	20000942 	.word	0x20000942
   1b070:	00019689 	.word	0x00019689

0001b074 <getMotorState_from_pin>:

bool getMotorState_from_pin(void)
{
   1b074:	b590      	push	{r4, r7, lr}
   1b076:	b083      	sub	sp, #12
   1b078:	af00      	add	r7, sp, #0
	uint8_t p1;
	bool p2, p3, p4;
	readSensorState(&p1, &p2, &p3, &p4);
   1b07a:	1d3b      	adds	r3, r7, #4
   1b07c:	1d7a      	adds	r2, r7, #5
   1b07e:	1db9      	adds	r1, r7, #6
   1b080:	1df8      	adds	r0, r7, #7
   1b082:	4c06      	ldr	r4, [pc, #24]	; (1b09c <getMotorState_from_pin+0x28>)
   1b084:	47a0      	blx	r4
	setMotorState(p3);
   1b086:	1d7b      	adds	r3, r7, #5
   1b088:	781b      	ldrb	r3, [r3, #0]
   1b08a:	0018      	movs	r0, r3
   1b08c:	4b04      	ldr	r3, [pc, #16]	; (1b0a0 <getMotorState_from_pin+0x2c>)
   1b08e:	4798      	blx	r3
	return p3;
   1b090:	1d7b      	adds	r3, r7, #5
   1b092:	781b      	ldrb	r3, [r3, #0]
}
   1b094:	0018      	movs	r0, r3
   1b096:	46bd      	mov	sp, r7
   1b098:	b003      	add	sp, #12
   1b09a:	bd90      	pop	{r4, r7, pc}
   1b09c:	0001b0a5 	.word	0x0001b0a5
   1b0a0:	0001b035 	.word	0x0001b035

0001b0a4 <readSensorState>:



void readSensorState(uint8_t *localallPhase, bool *phaseSeq,bool *motor, bool *acPhase)
{
   1b0a4:	b590      	push	{r4, r7, lr}
   1b0a6:	b087      	sub	sp, #28
   1b0a8:	af00      	add	r7, sp, #0
   1b0aa:	60f8      	str	r0, [r7, #12]
   1b0ac:	60b9      	str	r1, [r7, #8]
   1b0ae:	607a      	str	r2, [r7, #4]
   1b0b0:	603b      	str	r3, [r7, #0]
	*localallPhase = structThreePhase_state.u8t_phase_ac_state;
   1b0b2:	4b39      	ldr	r3, [pc, #228]	; (1b198 <readSensorState+0xf4>)
   1b0b4:	785b      	ldrb	r3, [r3, #1]
   1b0b6:	b2da      	uxtb	r2, r3
   1b0b8:	68fb      	ldr	r3, [r7, #12]
   1b0ba:	701a      	strb	r2, [r3, #0]
	//*phaseSeq = structThreePhase_state.u8t_phase_sequence_flag;
	if(structThreePhase_state.u8t_phase_sequence_flag == THREEPHASE_OK)
   1b0bc:	4b36      	ldr	r3, [pc, #216]	; (1b198 <readSensorState+0xf4>)
   1b0be:	781b      	ldrb	r3, [r3, #0]
   1b0c0:	b2db      	uxtb	r3, r3
   1b0c2:	2b02      	cmp	r3, #2
   1b0c4:	d103      	bne.n	1b0ce <readSensorState+0x2a>
	{
		*phaseSeq=true;
   1b0c6:	68bb      	ldr	r3, [r7, #8]
   1b0c8:	2201      	movs	r2, #1
   1b0ca:	701a      	strb	r2, [r3, #0]
   1b0cc:	e002      	b.n	1b0d4 <readSensorState+0x30>
	}
	else
	{
		*phaseSeq = false;
   1b0ce:	68bb      	ldr	r3, [r7, #8]
   1b0d0:	2200      	movs	r2, #0
   1b0d2:	701a      	strb	r2, [r3, #0]
	//{
	//*p1 = false;
	//}

	// If MotorFeedback Detection is disabled
	if (user_settings_parameter_struct.detectMotorFeedback == MOTORFEEDBACK_DETECTION_OFF)
   1b0d4:	4b31      	ldr	r3, [pc, #196]	; (1b19c <readSensorState+0xf8>)
   1b0d6:	2225      	movs	r2, #37	; 0x25
   1b0d8:	5c9b      	ldrb	r3, [r3, r2]
   1b0da:	b2db      	uxtb	r3, r3
   1b0dc:	2b00      	cmp	r3, #0
   1b0de:	d106      	bne.n	1b0ee <readSensorState+0x4a>
	{
		*motor  = getMotorState();
   1b0e0:	4b2f      	ldr	r3, [pc, #188]	; (1b1a0 <readSensorState+0xfc>)
   1b0e2:	4798      	blx	r3
   1b0e4:	0003      	movs	r3, r0
   1b0e6:	001a      	movs	r2, r3
   1b0e8:	687b      	ldr	r3, [r7, #4]
   1b0ea:	701a      	strb	r2, [r3, #0]
   1b0ec:	e022      	b.n	1b134 <readSensorState+0x90>
	}
	// If Motor Feedback is to be detected using Current
	else if(user_settings_parameter_struct.detectMotorFeedback == MOTORFEEDBACK_DETECTION_CURRENT)
   1b0ee:	4b2b      	ldr	r3, [pc, #172]	; (1b19c <readSensorState+0xf8>)
   1b0f0:	2225      	movs	r2, #37	; 0x25
   1b0f2:	5c9b      	ldrb	r3, [r3, r2]
   1b0f4:	b2db      	uxtb	r3, r3
   1b0f6:	2b01      	cmp	r3, #1
   1b0f8:	d106      	bne.n	1b108 <readSensorState+0x64>
	{
		*motor = checkMotorStatusUsingCurrent();
   1b0fa:	4b2a      	ldr	r3, [pc, #168]	; (1b1a4 <readSensorState+0x100>)
   1b0fc:	4798      	blx	r3
   1b0fe:	0003      	movs	r3, r0
   1b100:	001a      	movs	r2, r3
   1b102:	687b      	ldr	r3, [r7, #4]
   1b104:	701a      	strb	r2, [r3, #0]
   1b106:	e015      	b.n	1b134 <readSensorState+0x90>
		
	}
	// if Motor Feedback is to be detected using HW Feedback Circuit
	else if(user_settings_parameter_struct.detectMotorFeedback == MOTORFEEDBACK_DETECTION_ON)
   1b108:	4b24      	ldr	r3, [pc, #144]	; (1b19c <readSensorState+0xf8>)
   1b10a:	2225      	movs	r2, #37	; 0x25
   1b10c:	5c9b      	ldrb	r3, [r3, r2]
   1b10e:	b2db      	uxtb	r3, r3
   1b110:	2b02      	cmp	r3, #2
   1b112:	d10f      	bne.n	1b134 <readSensorState+0x90>
	{
		*motor  = !(port_pin_get_input_level(PIN_MOTOR_FEEDBACK));
   1b114:	202e      	movs	r0, #46	; 0x2e
   1b116:	4b24      	ldr	r3, [pc, #144]	; (1b1a8 <readSensorState+0x104>)
   1b118:	4798      	blx	r3
   1b11a:	0003      	movs	r3, r0
   1b11c:	1e5a      	subs	r2, r3, #1
   1b11e:	4193      	sbcs	r3, r2
   1b120:	b2db      	uxtb	r3, r3
   1b122:	2201      	movs	r2, #1
   1b124:	4053      	eors	r3, r2
   1b126:	b2db      	uxtb	r3, r3
   1b128:	1c1a      	adds	r2, r3, #0
   1b12a:	2301      	movs	r3, #1
   1b12c:	4013      	ands	r3, r2
   1b12e:	b2da      	uxtb	r2, r3
   1b130:	687b      	ldr	r3, [r7, #4]
   1b132:	701a      	strb	r2, [r3, #0]
	}


	
	uint8_t last_comparison = AC_CHAN_STATUS_UNKNOWN;
   1b134:	2317      	movs	r3, #23
   1b136:	18fb      	adds	r3, r7, r3
   1b138:	2201      	movs	r2, #1
   1b13a:	701a      	strb	r2, [r3, #0]
	
	last_comparison = ac_chan_get_status(&ac_instance,AC_CHAN_CHANNEL_0);
   1b13c:	2317      	movs	r3, #23
   1b13e:	18fc      	adds	r4, r7, r3
   1b140:	4b1a      	ldr	r3, [pc, #104]	; (1b1ac <readSensorState+0x108>)
   1b142:	2100      	movs	r1, #0
   1b144:	0018      	movs	r0, r3
   1b146:	4b1a      	ldr	r3, [pc, #104]	; (1b1b0 <readSensorState+0x10c>)
   1b148:	4798      	blx	r3
   1b14a:	0003      	movs	r3, r0
   1b14c:	7023      	strb	r3, [r4, #0]
	vTaskDelay(500/portTICK_PERIOD_MS);
   1b14e:	23fa      	movs	r3, #250	; 0xfa
   1b150:	005b      	lsls	r3, r3, #1
   1b152:	0018      	movs	r0, r3
   1b154:	4b17      	ldr	r3, [pc, #92]	; (1b1b4 <readSensorState+0x110>)
   1b156:	4798      	blx	r3
	last_comparison = ac_chan_get_status(&ac_instance,AC_CHAN_CHANNEL_0); //read again
   1b158:	2317      	movs	r3, #23
   1b15a:	18fc      	adds	r4, r7, r3
   1b15c:	4b13      	ldr	r3, [pc, #76]	; (1b1ac <readSensorState+0x108>)
   1b15e:	2100      	movs	r1, #0
   1b160:	0018      	movs	r0, r3
   1b162:	4b13      	ldr	r3, [pc, #76]	; (1b1b0 <readSensorState+0x10c>)
   1b164:	4798      	blx	r3
   1b166:	0003      	movs	r3, r0
   1b168:	7023      	strb	r3, [r4, #0]
	
	if (last_comparison & AC_CHAN_STATUS_POS_ABOVE_NEG)
   1b16a:	2317      	movs	r3, #23
   1b16c:	18fb      	adds	r3, r7, r3
   1b16e:	781b      	ldrb	r3, [r3, #0]
   1b170:	2204      	movs	r2, #4
   1b172:	4013      	ands	r3, r2
   1b174:	d003      	beq.n	1b17e <readSensorState+0xda>
	{
		isACpowerAvailable = true;
   1b176:	4b10      	ldr	r3, [pc, #64]	; (1b1b8 <readSensorState+0x114>)
   1b178:	2201      	movs	r2, #1
   1b17a:	701a      	strb	r2, [r3, #0]
   1b17c:	e002      	b.n	1b184 <readSensorState+0xe0>
	}
	else
	{
		isACpowerAvailable = false;
   1b17e:	4b0e      	ldr	r3, [pc, #56]	; (1b1b8 <readSensorState+0x114>)
   1b180:	2200      	movs	r2, #0
   1b182:	701a      	strb	r2, [r3, #0]
	}
	
	*acPhase =  isACpowerAvailable;
   1b184:	4b0c      	ldr	r3, [pc, #48]	; (1b1b8 <readSensorState+0x114>)
   1b186:	781b      	ldrb	r3, [r3, #0]
   1b188:	b2da      	uxtb	r2, r3
   1b18a:	683b      	ldr	r3, [r7, #0]
   1b18c:	701a      	strb	r2, [r3, #0]
}
   1b18e:	46c0      	nop			; (mov r8, r8)
   1b190:	46bd      	mov	sp, r7
   1b192:	b007      	add	sp, #28
   1b194:	bd90      	pop	{r4, r7, pc}
   1b196:	46c0      	nop			; (mov r8, r8)
   1b198:	20000948 	.word	0x20000948
   1b19c:	20000854 	.word	0x20000854
   1b1a0:	0001b021 	.word	0x0001b021
   1b1a4:	0001b1bd 	.word	0x0001b1bd
   1b1a8:	00019645 	.word	0x00019645
   1b1ac:	20000a8c 	.word	0x20000a8c
   1b1b0:	00019179 	.word	0x00019179
   1b1b4:	0001fe69 	.word	0x0001fe69
   1b1b8:	2000098d 	.word	0x2000098d

0001b1bc <checkMotorStatusUsingCurrent>:

bool checkMotorStatusUsingCurrent(void)
{
   1b1bc:	b580      	push	{r7, lr}
   1b1be:	af00      	add	r7, sp, #0
	if(stopMotorCommandGiven)
   1b1c0:	4b0e      	ldr	r3, [pc, #56]	; (1b1fc <checkMotorStatusUsingCurrent+0x40>)
   1b1c2:	781b      	ldrb	r3, [r3, #0]
   1b1c4:	2b00      	cmp	r3, #0
   1b1c6:	d00d      	beq.n	1b1e4 <checkMotorStatusUsingCurrent+0x28>
	{
		if(Analog_Parameter_Struct.Motor_Current_IntPart <= (fdbkRefCurrent/2))
   1b1c8:	4b0d      	ldr	r3, [pc, #52]	; (1b200 <checkMotorStatusUsingCurrent+0x44>)
   1b1ca:	8a9b      	ldrh	r3, [r3, #20]
   1b1cc:	b29a      	uxth	r2, r3
   1b1ce:	4b0d      	ldr	r3, [pc, #52]	; (1b204 <checkMotorStatusUsingCurrent+0x48>)
   1b1d0:	781b      	ldrb	r3, [r3, #0]
   1b1d2:	085b      	lsrs	r3, r3, #1
   1b1d4:	b2db      	uxtb	r3, r3
   1b1d6:	b29b      	uxth	r3, r3
   1b1d8:	429a      	cmp	r2, r3
   1b1da:	d801      	bhi.n	1b1e0 <checkMotorStatusUsingCurrent+0x24>
		{
			return false;
   1b1dc:	2300      	movs	r3, #0
   1b1de:	e009      	b.n	1b1f4 <checkMotorStatusUsingCurrent+0x38>
		}
		else
		{
			return true;
   1b1e0:	2301      	movs	r3, #1
   1b1e2:	e007      	b.n	1b1f4 <checkMotorStatusUsingCurrent+0x38>
		}
	}
	else
	{
		if (Analog_Parameter_Struct.Motor_Current_IntPart > 4)
   1b1e4:	4b06      	ldr	r3, [pc, #24]	; (1b200 <checkMotorStatusUsingCurrent+0x44>)
   1b1e6:	8a9b      	ldrh	r3, [r3, #20]
   1b1e8:	b29b      	uxth	r3, r3
   1b1ea:	2b04      	cmp	r3, #4
   1b1ec:	d901      	bls.n	1b1f2 <checkMotorStatusUsingCurrent+0x36>
		{
			return true;
   1b1ee:	2301      	movs	r3, #1
   1b1f0:	e000      	b.n	1b1f4 <checkMotorStatusUsingCurrent+0x38>
		}
		else
		{
			return false;
   1b1f2:	2300      	movs	r3, #0
		}
	}
}
   1b1f4:	0018      	movs	r0, r3
   1b1f6:	46bd      	mov	sp, r7
   1b1f8:	bd80      	pop	{r7, pc}
   1b1fa:	46c0      	nop			; (mov r8, r8)
   1b1fc:	20000a60 	.word	0x20000a60
   1b200:	200008e8 	.word	0x200008e8
   1b204:	200009f4 	.word	0x200009f4

0001b208 <detectMotorStateChangeUsingCurrent>:

bool detectMotorStateChangeUsingCurrent(void)
{
   1b208:	b5b0      	push	{r4, r5, r7, lr}
   1b20a:	af00      	add	r7, sp, #0
	if (getMotorState() != checkMotorStatusUsingCurrent())
   1b20c:	4b07      	ldr	r3, [pc, #28]	; (1b22c <detectMotorStateChangeUsingCurrent+0x24>)
   1b20e:	4798      	blx	r3
   1b210:	0003      	movs	r3, r0
   1b212:	001c      	movs	r4, r3
   1b214:	4b06      	ldr	r3, [pc, #24]	; (1b230 <detectMotorStateChangeUsingCurrent+0x28>)
   1b216:	4798      	blx	r3
   1b218:	0003      	movs	r3, r0
   1b21a:	429c      	cmp	r4, r3
   1b21c:	d001      	beq.n	1b222 <detectMotorStateChangeUsingCurrent+0x1a>
	{
		return true;
   1b21e:	2301      	movs	r3, #1
   1b220:	e000      	b.n	1b224 <detectMotorStateChangeUsingCurrent+0x1c>
	}
	else
	{
		return false;
   1b222:	2300      	movs	r3, #0
	}
}
   1b224:	0018      	movs	r0, r3
   1b226:	46bd      	mov	sp, r7
   1b228:	bdb0      	pop	{r4, r5, r7, pc}
   1b22a:	46c0      	nop			; (mov r8, r8)
   1b22c:	0001b021 	.word	0x0001b021
   1b230:	0001b1bd 	.word	0x0001b1bd

0001b234 <updateSensorState>:


void updateSensorState(uint8_t var3PhaseState, bool var3PhaseSeq, bool motorState, bool acPhaseState)
{
   1b234:	b5b0      	push	{r4, r5, r7, lr}
   1b236:	b084      	sub	sp, #16
   1b238:	af00      	add	r7, sp, #0
   1b23a:	0005      	movs	r5, r0
   1b23c:	000c      	movs	r4, r1
   1b23e:	0010      	movs	r0, r2
   1b240:	0019      	movs	r1, r3
   1b242:	1dfb      	adds	r3, r7, #7
   1b244:	1c2a      	adds	r2, r5, #0
   1b246:	701a      	strb	r2, [r3, #0]
   1b248:	1dbb      	adds	r3, r7, #6
   1b24a:	1c22      	adds	r2, r4, #0
   1b24c:	701a      	strb	r2, [r3, #0]
   1b24e:	1d7b      	adds	r3, r7, #5
   1b250:	1c02      	adds	r2, r0, #0
   1b252:	701a      	strb	r2, [r3, #0]
   1b254:	1d3b      	adds	r3, r7, #4
   1b256:	1c0a      	adds	r2, r1, #0
   1b258:	701a      	strb	r2, [r3, #0]
	setAllPhaseState(var3PhaseState); // allPhase = p1;
   1b25a:	1dfb      	adds	r3, r7, #7
   1b25c:	781b      	ldrb	r3, [r3, #0]
   1b25e:	0018      	movs	r0, r3
   1b260:	4b28      	ldr	r3, [pc, #160]	; (1b304 <updateSensorState+0xd0>)
   1b262:	4798      	blx	r3
	setPhaseSequence(var3PhaseSeq);
   1b264:	1dbb      	adds	r3, r7, #6
   1b266:	781b      	ldrb	r3, [r3, #0]
   1b268:	0018      	movs	r0, r3
   1b26a:	4b27      	ldr	r3, [pc, #156]	; (1b308 <updateSensorState+0xd4>)
   1b26c:	4798      	blx	r3
	setMotorState(motorState); // mFeedback = p2;
   1b26e:	1d7b      	adds	r3, r7, #5
   1b270:	781b      	ldrb	r3, [r3, #0]
   1b272:	0018      	movs	r0, r3
   1b274:	4b25      	ldr	r3, [pc, #148]	; (1b30c <updateSensorState+0xd8>)
   1b276:	4798      	blx	r3
	setACPowerState(acPhaseState); // phaseAC = p4;
   1b278:	1d3b      	adds	r3, r7, #4
   1b27a:	781b      	ldrb	r3, [r3, #0]
   1b27c:	0018      	movs	r0, r3
   1b27e:	4b24      	ldr	r3, [pc, #144]	; (1b310 <updateSensorState+0xdc>)
   1b280:	4798      	blx	r3
	
	//if(getAllPhaseState()==AC_3PH && getACPowerState())
	if(getAllPhaseState()==AC_3PH)
   1b282:	4b24      	ldr	r3, [pc, #144]	; (1b314 <updateSensorState+0xe0>)
   1b284:	4798      	blx	r3
   1b286:	0003      	movs	r3, r0
   1b288:	2b03      	cmp	r3, #3
   1b28a:	d12c      	bne.n	1b2e6 <updateSensorState+0xb2>
	{
		bool tempPhaseSequence = true;									// init temp variable with default value as correct sequence
   1b28c:	230f      	movs	r3, #15
   1b28e:	18fb      	adds	r3, r7, r3
   1b290:	2201      	movs	r2, #1
   1b292:	701a      	strb	r2, [r3, #0]

		if(user_settings_parameter_struct.detectPhaseSequence)			// if detection of Phase Sequence is enabled
   1b294:	4b20      	ldr	r3, [pc, #128]	; (1b318 <updateSensorState+0xe4>)
   1b296:	2224      	movs	r2, #36	; 0x24
   1b298:	5c9b      	ldrb	r3, [r3, r2]
   1b29a:	b2db      	uxtb	r3, r3
   1b29c:	2b00      	cmp	r3, #0
   1b29e:	d005      	beq.n	1b2ac <updateSensorState+0x78>
		{
			tempPhaseSequence = getPhaseSequence();						// save the current phase sequence  in temp varialbe for further use
   1b2a0:	230f      	movs	r3, #15
   1b2a2:	18fc      	adds	r4, r7, r3
   1b2a4:	4b1d      	ldr	r3, [pc, #116]	; (1b31c <updateSensorState+0xe8>)
   1b2a6:	4798      	blx	r3
   1b2a8:	0003      	movs	r3, r0
   1b2aa:	7023      	strb	r3, [r4, #0]
		}

		if(tempPhaseSequence)											// check if sequence is correct
   1b2ac:	230f      	movs	r3, #15
   1b2ae:	18fb      	adds	r3, r7, r3
   1b2b0:	781b      	ldrb	r3, [r3, #0]
   1b2b2:	2b00      	cmp	r3, #0
   1b2b4:	d004      	beq.n	1b2c0 <updateSensorState+0x8c>
		{
			THREEPHASE_OK_LED_ON;
   1b2b6:	2100      	movs	r1, #0
   1b2b8:	2027      	movs	r0, #39	; 0x27
   1b2ba:	4b19      	ldr	r3, [pc, #100]	; (1b320 <updateSensorState+0xec>)
   1b2bc:	4798      	blx	r3
   1b2be:	e003      	b.n	1b2c8 <updateSensorState+0x94>
		}
		else
		{
			THREEPHASE_OK_LED_OFF;
   1b2c0:	2101      	movs	r1, #1
   1b2c2:	2027      	movs	r0, #39	; 0x27
   1b2c4:	4b16      	ldr	r3, [pc, #88]	; (1b320 <updateSensorState+0xec>)
   1b2c6:	4798      	blx	r3
		}
		
		if((bool)user_settings_parameter_struct.autoStartAddress)
   1b2c8:	4b13      	ldr	r3, [pc, #76]	; (1b318 <updateSensorState+0xe4>)
   1b2ca:	785b      	ldrb	r3, [r3, #1]
   1b2cc:	b2db      	uxtb	r3, r3
   1b2ce:	2b00      	cmp	r3, #0
   1b2d0:	d004      	beq.n	1b2dc <updateSensorState+0xa8>
		{
			AUTO_ON_LED_ON;
   1b2d2:	2100      	movs	r1, #0
   1b2d4:	2028      	movs	r0, #40	; 0x28
   1b2d6:	4b12      	ldr	r3, [pc, #72]	; (1b320 <updateSensorState+0xec>)
   1b2d8:	4798      	blx	r3
	//
	//if (!getACPowerState() || !getAllPhaseState())
	//{
	//startTimerOn = false;
	//}
}
   1b2da:	e00f      	b.n	1b2fc <updateSensorState+0xc8>
			AUTO_ON_LED_OFF;
   1b2dc:	2101      	movs	r1, #1
   1b2de:	2028      	movs	r0, #40	; 0x28
   1b2e0:	4b0f      	ldr	r3, [pc, #60]	; (1b320 <updateSensorState+0xec>)
   1b2e2:	4798      	blx	r3
}
   1b2e4:	e00a      	b.n	1b2fc <updateSensorState+0xc8>
		THREEPHASE_OK_LED_OFF;
   1b2e6:	2101      	movs	r1, #1
   1b2e8:	2027      	movs	r0, #39	; 0x27
   1b2ea:	4b0d      	ldr	r3, [pc, #52]	; (1b320 <updateSensorState+0xec>)
   1b2ec:	4798      	blx	r3
		AUTO_ON_LED_OFF;
   1b2ee:	2101      	movs	r1, #1
   1b2f0:	2028      	movs	r0, #40	; 0x28
   1b2f2:	4b0b      	ldr	r3, [pc, #44]	; (1b320 <updateSensorState+0xec>)
   1b2f4:	4798      	blx	r3
		startTimerOn=false;
   1b2f6:	4b0b      	ldr	r3, [pc, #44]	; (1b324 <updateSensorState+0xf0>)
   1b2f8:	2200      	movs	r2, #0
   1b2fa:	701a      	strb	r2, [r3, #0]
}
   1b2fc:	46c0      	nop			; (mov r8, r8)
   1b2fe:	46bd      	mov	sp, r7
   1b300:	b004      	add	sp, #16
   1b302:	bdb0      	pop	{r4, r5, r7, pc}
   1b304:	0001afcd 	.word	0x0001afcd
   1b308:	0001b001 	.word	0x0001b001
   1b30c:	0001b035 	.word	0x0001b035
   1b310:	0001af99 	.word	0x0001af99
   1b314:	0001afb9 	.word	0x0001afb9
   1b318:	20000854 	.word	0x20000854
   1b31c:	0001afed 	.word	0x0001afed
   1b320:	00019689 	.word	0x00019689
   1b324:	2000099a 	.word	0x2000099a

0001b328 <resetAutoStart>:

void resetAutoStart(bool setChange)
{
   1b328:	b580      	push	{r7, lr}
   1b32a:	b082      	sub	sp, #8
   1b32c:	af00      	add	r7, sp, #0
   1b32e:	0002      	movs	r2, r0
   1b330:	1dfb      	adds	r3, r7, #7
   1b332:	701a      	strb	r2, [r3, #0]
	if (!(bool)user_settings_parameter_struct.autoStartAddress)
   1b334:	4b0f      	ldr	r3, [pc, #60]	; (1b374 <resetAutoStart+0x4c>)
   1b336:	785b      	ldrb	r3, [r3, #1]
   1b338:	b2db      	uxtb	r3, r3
   1b33a:	2b00      	cmp	r3, #0
   1b33c:	d107      	bne.n	1b34e <resetAutoStart+0x26>
	{
		startTimerOn=false;
   1b33e:	4b0e      	ldr	r3, [pc, #56]	; (1b378 <resetAutoStart+0x50>)
   1b340:	2200      	movs	r2, #0
   1b342:	701a      	strb	r2, [r3, #0]
		AUTO_ON_LED_OFF;
   1b344:	2101      	movs	r1, #1
   1b346:	2028      	movs	r0, #40	; 0x28
   1b348:	4b0c      	ldr	r3, [pc, #48]	; (1b37c <resetAutoStart+0x54>)
   1b34a:	4798      	blx	r3
		if (setChange)
		{
			triggerAutoStart();
		}
	}
}
   1b34c:	e00e      	b.n	1b36c <resetAutoStart+0x44>
	else if ((bool)user_settings_parameter_struct.autoStartAddress)
   1b34e:	4b09      	ldr	r3, [pc, #36]	; (1b374 <resetAutoStart+0x4c>)
   1b350:	785b      	ldrb	r3, [r3, #1]
   1b352:	b2db      	uxtb	r3, r3
   1b354:	2b00      	cmp	r3, #0
   1b356:	d009      	beq.n	1b36c <resetAutoStart+0x44>
		AUTO_ON_LED_ON;
   1b358:	2100      	movs	r1, #0
   1b35a:	2028      	movs	r0, #40	; 0x28
   1b35c:	4b07      	ldr	r3, [pc, #28]	; (1b37c <resetAutoStart+0x54>)
   1b35e:	4798      	blx	r3
		if (setChange)
   1b360:	1dfb      	adds	r3, r7, #7
   1b362:	781b      	ldrb	r3, [r3, #0]
   1b364:	2b00      	cmp	r3, #0
   1b366:	d001      	beq.n	1b36c <resetAutoStart+0x44>
			triggerAutoStart();
   1b368:	4b05      	ldr	r3, [pc, #20]	; (1b380 <resetAutoStart+0x58>)
   1b36a:	4798      	blx	r3
}
   1b36c:	46c0      	nop			; (mov r8, r8)
   1b36e:	46bd      	mov	sp, r7
   1b370:	b002      	add	sp, #8
   1b372:	bd80      	pop	{r7, pc}
   1b374:	20000854 	.word	0x20000854
   1b378:	2000099a 	.word	0x2000099a
   1b37c:	00019689 	.word	0x00019689
   1b380:	0001b385 	.word	0x0001b385

0001b384 <triggerAutoStart>:

void triggerAutoStart(void)
{
   1b384:	b580      	push	{r7, lr}
   1b386:	af00      	add	r7, sp, #0
	if (!getMotorState())
   1b388:	4b0b      	ldr	r3, [pc, #44]	; (1b3b8 <triggerAutoStart+0x34>)
   1b38a:	4798      	blx	r3
   1b38c:	0003      	movs	r3, r0
   1b38e:	001a      	movs	r2, r3
   1b390:	2301      	movs	r3, #1
   1b392:	4053      	eors	r3, r2
   1b394:	b2db      	uxtb	r3, r3
   1b396:	2b00      	cmp	r3, #0
   1b398:	d00b      	beq.n	1b3b2 <triggerAutoStart+0x2e>
	{
		//if (getAllPhaseState() && getACPowerState())
		if (getAllPhaseState())
   1b39a:	4b08      	ldr	r3, [pc, #32]	; (1b3bc <triggerAutoStart+0x38>)
   1b39c:	4798      	blx	r3
   1b39e:	1e03      	subs	r3, r0, #0
   1b3a0:	d007      	beq.n	1b3b2 <triggerAutoStart+0x2e>
		{
			startTimerOn = true;
   1b3a2:	4b07      	ldr	r3, [pc, #28]	; (1b3c0 <triggerAutoStart+0x3c>)
   1b3a4:	2201      	movs	r2, #1
   1b3a6:	701a      	strb	r2, [r3, #0]
			tempStartTimer = xTaskGetTickCount();
   1b3a8:	4b06      	ldr	r3, [pc, #24]	; (1b3c4 <triggerAutoStart+0x40>)
   1b3aa:	4798      	blx	r3
   1b3ac:	0002      	movs	r2, r0
   1b3ae:	4b06      	ldr	r3, [pc, #24]	; (1b3c8 <triggerAutoStart+0x44>)
   1b3b0:	601a      	str	r2, [r3, #0]
		}
	}
}
   1b3b2:	46c0      	nop			; (mov r8, r8)
   1b3b4:	46bd      	mov	sp, r7
   1b3b6:	bd80      	pop	{r7, pc}
   1b3b8:	0001b021 	.word	0x0001b021
   1b3bc:	0001afb9 	.word	0x0001afb9
   1b3c0:	2000099a 	.word	0x2000099a
   1b3c4:	000201cd 	.word	0x000201cd
   1b3c8:	200009a0 	.word	0x200009a0

0001b3cc <operateOnEvent>:

void operateOnEvent(void)
{
   1b3cc:	b590      	push	{r4, r7, lr}
   1b3ce:	b083      	sub	sp, #12
   1b3d0:	af00      	add	r7, sp, #0
	uint8_t t3Phase;
	//bool t3Phase, tMotor, tacPhase;
	bool tPhaseSeq, tMotor, tacPhase;
	readSensorState(&t3Phase, &tPhaseSeq, &tMotor, &tacPhase);
   1b3d2:	1d3b      	adds	r3, r7, #4
   1b3d4:	1d7a      	adds	r2, r7, #5
   1b3d6:	1db9      	adds	r1, r7, #6
   1b3d8:	1df8      	adds	r0, r7, #7
   1b3da:	4c5e      	ldr	r4, [pc, #376]	; (1b554 <operateOnEvent+0x188>)
   1b3dc:	47a0      	blx	r4
	eventOccured = false;
   1b3de:	4b5e      	ldr	r3, [pc, #376]	; (1b558 <operateOnEvent+0x18c>)
   1b3e0:	2200      	movs	r2, #0
   1b3e2:	701a      	strb	r2, [r3, #0]
	
	//todo: add current phase Sequence and previous phase sequence is equals check here
	//if ((t3Phase == getAllPhaseState()) && (tMotor == getMotorState()) && (tacPhase == getACPowerState()))
	if ((t3Phase == getAllPhaseState()) && (tMotor == getMotorState()))
   1b3e4:	4b5d      	ldr	r3, [pc, #372]	; (1b55c <operateOnEvent+0x190>)
   1b3e6:	4798      	blx	r3
   1b3e8:	0003      	movs	r3, r0
   1b3ea:	001a      	movs	r2, r3
   1b3ec:	1dfb      	adds	r3, r7, #7
   1b3ee:	781b      	ldrb	r3, [r3, #0]
   1b3f0:	429a      	cmp	r2, r3
   1b3f2:	d108      	bne.n	1b406 <operateOnEvent+0x3a>
   1b3f4:	4b5a      	ldr	r3, [pc, #360]	; (1b560 <operateOnEvent+0x194>)
   1b3f6:	4798      	blx	r3
   1b3f8:	0003      	movs	r3, r0
   1b3fa:	001a      	movs	r2, r3
   1b3fc:	1d7b      	adds	r3, r7, #5
   1b3fe:	781b      	ldrb	r3, [r3, #0]
   1b400:	429a      	cmp	r2, r3
   1b402:	d100      	bne.n	1b406 <operateOnEvent+0x3a>
   1b404:	e0a1      	b.n	1b54a <operateOnEvent+0x17e>
	{
		return;
	}
	if (getMotorState())	//motorOn
   1b406:	4b56      	ldr	r3, [pc, #344]	; (1b560 <operateOnEvent+0x194>)
   1b408:	4798      	blx	r3
   1b40a:	1e03      	subs	r3, r0, #0
   1b40c:	d05d      	beq.n	1b4ca <operateOnEvent+0xfe>
	{
		if (t3Phase==AC_OFF && !tMotor && !tacPhase)	//acPower Cut Off
   1b40e:	1dfb      	adds	r3, r7, #7
   1b410:	781b      	ldrb	r3, [r3, #0]
   1b412:	2b00      	cmp	r3, #0
   1b414:	d11e      	bne.n	1b454 <operateOnEvent+0x88>
   1b416:	1d7b      	adds	r3, r7, #5
   1b418:	781b      	ldrb	r3, [r3, #0]
   1b41a:	2201      	movs	r2, #1
   1b41c:	4053      	eors	r3, r2
   1b41e:	b2db      	uxtb	r3, r3
   1b420:	2b00      	cmp	r3, #0
   1b422:	d017      	beq.n	1b454 <operateOnEvent+0x88>
   1b424:	1d3b      	adds	r3, r7, #4
   1b426:	781b      	ldrb	r3, [r3, #0]
   1b428:	2201      	movs	r2, #1
   1b42a:	4053      	eors	r3, r2
   1b42c:	b2db      	uxtb	r3, r3
   1b42e:	2b00      	cmp	r3, #0
   1b430:	d010      	beq.n	1b454 <operateOnEvent+0x88>
		{
			stopMotor(false,true,false);
   1b432:	2200      	movs	r2, #0
   1b434:	2101      	movs	r1, #1
   1b436:	2000      	movs	r0, #0
   1b438:	4b4a      	ldr	r3, [pc, #296]	; (1b564 <operateOnEvent+0x198>)
   1b43a:	4798      	blx	r3
			THREEPHASE_OK_LED_OFF;
   1b43c:	2101      	movs	r1, #1
   1b43e:	2027      	movs	r0, #39	; 0x27
   1b440:	4b49      	ldr	r3, [pc, #292]	; (1b568 <operateOnEvent+0x19c>)
   1b442:	4798      	blx	r3
			simEventTemp[6] = registerEvent('C'); //report To SIM Motor Off due to POWER CUT OFF
   1b444:	2043      	movs	r0, #67	; 0x43
   1b446:	4b49      	ldr	r3, [pc, #292]	; (1b56c <operateOnEvent+0x1a0>)
   1b448:	4798      	blx	r3
   1b44a:	0003      	movs	r3, r0
   1b44c:	001a      	movs	r2, r3
   1b44e:	4b48      	ldr	r3, [pc, #288]	; (1b570 <operateOnEvent+0x1a4>)
   1b450:	719a      	strb	r2, [r3, #6]
   1b452:	e06f      	b.n	1b534 <operateOnEvent+0x168>
		}
		////////////////////////////////////////Unknown Motor Off Check ////////////////////////////////////////
		
		//else if ((tacPhase && getACPowerState()) &&																										//AC PHASE PRESENT
		else if (((user_settings_parameter_struct.detectSinglePhasing && t3Phase==AC_3PH && getAllPhaseState()==AC_3PH) ||								//IF SPP ON, 3 phase old and current is present
   1b454:	4b47      	ldr	r3, [pc, #284]	; (1b574 <operateOnEvent+0x1a8>)
   1b456:	2220      	movs	r2, #32
   1b458:	5c9b      	ldrb	r3, [r3, r2]
   1b45a:	b2db      	uxtb	r3, r3
   1b45c:	2b00      	cmp	r3, #0
   1b45e:	d008      	beq.n	1b472 <operateOnEvent+0xa6>
   1b460:	1dfb      	adds	r3, r7, #7
   1b462:	781b      	ldrb	r3, [r3, #0]
   1b464:	2b03      	cmp	r3, #3
   1b466:	d104      	bne.n	1b472 <operateOnEvent+0xa6>
   1b468:	4b3c      	ldr	r3, [pc, #240]	; (1b55c <operateOnEvent+0x190>)
   1b46a:	4798      	blx	r3
   1b46c:	0003      	movs	r3, r0
   1b46e:	2b03      	cmp	r3, #3
   1b470:	d00e      	beq.n	1b490 <operateOnEvent+0xc4>
		(!user_settings_parameter_struct.detectSinglePhasing) && t3Phase>=AC_2PH && getAllPhaseState()>=AC_2PH) &&							//IF SPP OFF, 3 phase old and current is >= 2 phase
   1b472:	4b40      	ldr	r3, [pc, #256]	; (1b574 <operateOnEvent+0x1a8>)
   1b474:	2220      	movs	r2, #32
   1b476:	5c9b      	ldrb	r3, [r3, r2]
   1b478:	b2db      	uxtb	r3, r3
		else if (((user_settings_parameter_struct.detectSinglePhasing && t3Phase==AC_3PH && getAllPhaseState()==AC_3PH) ||								//IF SPP ON, 3 phase old and current is present
   1b47a:	2b00      	cmp	r3, #0
   1b47c:	d112      	bne.n	1b4a4 <operateOnEvent+0xd8>
		(!user_settings_parameter_struct.detectSinglePhasing) && t3Phase>=AC_2PH && getAllPhaseState()>=AC_2PH) &&							//IF SPP OFF, 3 phase old and current is >= 2 phase
   1b47e:	1dfb      	adds	r3, r7, #7
   1b480:	781b      	ldrb	r3, [r3, #0]
   1b482:	2b01      	cmp	r3, #1
   1b484:	d90e      	bls.n	1b4a4 <operateOnEvent+0xd8>
   1b486:	4b35      	ldr	r3, [pc, #212]	; (1b55c <operateOnEvent+0x190>)
   1b488:	4798      	blx	r3
   1b48a:	0003      	movs	r3, r0
   1b48c:	2b01      	cmp	r3, #1
   1b48e:	d909      	bls.n	1b4a4 <operateOnEvent+0xd8>
		(!tMotor))																																// AND MOTOR HAS TURNED OFF
   1b490:	1d7b      	adds	r3, r7, #5
   1b492:	781b      	ldrb	r3, [r3, #0]
   1b494:	2201      	movs	r2, #1
   1b496:	4053      	eors	r3, r2
   1b498:	b2db      	uxtb	r3, r3
		(!user_settings_parameter_struct.detectSinglePhasing) && t3Phase>=AC_2PH && getAllPhaseState()>=AC_2PH) &&							//IF SPP OFF, 3 phase old and current is >= 2 phase
   1b49a:	2b00      	cmp	r3, #0
   1b49c:	d002      	beq.n	1b4a4 <operateOnEvent+0xd8>
		{
			unknownMotorOff();
   1b49e:	4b36      	ldr	r3, [pc, #216]	; (1b578 <operateOnEvent+0x1ac>)
   1b4a0:	4798      	blx	r3
   1b4a2:	e047      	b.n	1b534 <operateOnEvent+0x168>
		}
		///////////////////////// SINGLE PHASING CHECK /////////////////////////
		else if (user_settings_parameter_struct.detectSinglePhasing &&																						//SPP IS ON
   1b4a4:	4b33      	ldr	r3, [pc, #204]	; (1b574 <operateOnEvent+0x1a8>)
   1b4a6:	2220      	movs	r2, #32
   1b4a8:	5c9b      	ldrb	r3, [r3, r2]
   1b4aa:	b2db      	uxtb	r3, r3
   1b4ac:	2b00      	cmp	r3, #0
   1b4ae:	d041      	beq.n	1b534 <operateOnEvent+0x168>
		t3Phase==AC_2PH) /*&&																														// Only 2 Phase Present
   1b4b0:	1dfb      	adds	r3, r7, #7
   1b4b2:	781b      	ldrb	r3, [r3, #0]
		else if (user_settings_parameter_struct.detectSinglePhasing &&																						//SPP IS ON
   1b4b4:	2b02      	cmp	r3, #2
   1b4b6:	d13d      	bne.n	1b534 <operateOnEvent+0x168>
		tacPhase)*/ ////single phasing occured																									// AC Phase is Present
		{
			tempSinglePhasingTimer = xTaskGetTickCount();
   1b4b8:	4b30      	ldr	r3, [pc, #192]	; (1b57c <operateOnEvent+0x1b0>)
   1b4ba:	4798      	blx	r3
   1b4bc:	0002      	movs	r2, r0
   1b4be:	4b30      	ldr	r3, [pc, #192]	; (1b580 <operateOnEvent+0x1b4>)
   1b4c0:	601a      	str	r2, [r3, #0]
			singlePhasingTimerOn = true;
   1b4c2:	4b30      	ldr	r3, [pc, #192]	; (1b584 <operateOnEvent+0x1b8>)
   1b4c4:	2201      	movs	r2, #1
   1b4c6:	701a      	strb	r2, [r3, #0]
   1b4c8:	e034      	b.n	1b534 <operateOnEvent+0x168>
		}
	}
	else
	{
		if (tMotor)		// motor turn on manually
   1b4ca:	1d7b      	adds	r3, r7, #5
   1b4cc:	781b      	ldrb	r3, [r3, #0]
   1b4ce:	2b00      	cmp	r3, #0
   1b4d0:	d028      	beq.n	1b524 <operateOnEvent+0x158>
		{
			if (t3Phase==AC_3PH && tPhaseSeq && tacPhase)
   1b4d2:	1dfb      	adds	r3, r7, #7
   1b4d4:	781b      	ldrb	r3, [r3, #0]
   1b4d6:	2b03      	cmp	r3, #3
   1b4d8:	d11e      	bne.n	1b518 <operateOnEvent+0x14c>
   1b4da:	1dbb      	adds	r3, r7, #6
   1b4dc:	781b      	ldrb	r3, [r3, #0]
   1b4de:	2b00      	cmp	r3, #0
   1b4e0:	d01a      	beq.n	1b518 <operateOnEvent+0x14c>
   1b4e2:	1d3b      	adds	r3, r7, #4
   1b4e4:	781b      	ldrb	r3, [r3, #0]
   1b4e6:	2b00      	cmp	r3, #0
   1b4e8:	d016      	beq.n	1b518 <operateOnEvent+0x14c>
			{
				if (startTimerOn)
   1b4ea:	4b27      	ldr	r3, [pc, #156]	; (1b588 <operateOnEvent+0x1bc>)
   1b4ec:	781b      	ldrb	r3, [r3, #0]
   1b4ee:	2b00      	cmp	r3, #0
   1b4f0:	d002      	beq.n	1b4f8 <operateOnEvent+0x12c>
				{
					startTimerOn = false;
   1b4f2:	4b25      	ldr	r3, [pc, #148]	; (1b588 <operateOnEvent+0x1bc>)
   1b4f4:	2200      	movs	r2, #0
   1b4f6:	701a      	strb	r2, [r3, #0]
				}
				THREEPHASE_OK_LED_ON;
   1b4f8:	2100      	movs	r1, #0
   1b4fa:	2027      	movs	r0, #39	; 0x27
   1b4fc:	4b1a      	ldr	r3, [pc, #104]	; (1b568 <operateOnEvent+0x19c>)
   1b4fe:	4798      	blx	r3
				simEventTemp[7] = registerEvent('S');	//register To SIM Motor has started
   1b500:	2053      	movs	r0, #83	; 0x53
   1b502:	4b1a      	ldr	r3, [pc, #104]	; (1b56c <operateOnEvent+0x1a0>)
   1b504:	4798      	blx	r3
   1b506:	0003      	movs	r3, r0
   1b508:	001a      	movs	r2, r3
   1b50a:	4b19      	ldr	r3, [pc, #100]	; (1b570 <operateOnEvent+0x1a4>)
   1b50c:	71da      	strb	r2, [r3, #7]
				startMotor(true,true);
   1b50e:	2101      	movs	r1, #1
   1b510:	2001      	movs	r0, #1
   1b512:	4b1e      	ldr	r3, [pc, #120]	; (1b58c <operateOnEvent+0x1c0>)
   1b514:	4798      	blx	r3
   1b516:	e00d      	b.n	1b534 <operateOnEvent+0x168>
			}
			else
			{
				stopMotor(false,true,false);
   1b518:	2200      	movs	r2, #0
   1b51a:	2101      	movs	r1, #1
   1b51c:	2000      	movs	r0, #0
   1b51e:	4b11      	ldr	r3, [pc, #68]	; (1b564 <operateOnEvent+0x198>)
   1b520:	4798      	blx	r3
   1b522:	e007      	b.n	1b534 <operateOnEvent+0x168>
			}
		}
		else
		{
			waitStableLineOn = true;
   1b524:	4b1a      	ldr	r3, [pc, #104]	; (1b590 <operateOnEvent+0x1c4>)
   1b526:	2201      	movs	r2, #1
   1b528:	701a      	strb	r2, [r3, #0]
			waitStableLineTimer = xTaskGetTickCount();
   1b52a:	4b14      	ldr	r3, [pc, #80]	; (1b57c <operateOnEvent+0x1b0>)
   1b52c:	4798      	blx	r3
   1b52e:	0002      	movs	r2, r0
   1b530:	4b18      	ldr	r3, [pc, #96]	; (1b594 <operateOnEvent+0x1c8>)
   1b532:	601a      	str	r2, [r3, #0]
		}
	}
	updateSensorState(t3Phase,tPhaseSeq, tMotor,tacPhase);
   1b534:	1dfb      	adds	r3, r7, #7
   1b536:	7818      	ldrb	r0, [r3, #0]
   1b538:	1dbb      	adds	r3, r7, #6
   1b53a:	7819      	ldrb	r1, [r3, #0]
   1b53c:	1d7b      	adds	r3, r7, #5
   1b53e:	781a      	ldrb	r2, [r3, #0]
   1b540:	1d3b      	adds	r3, r7, #4
   1b542:	781b      	ldrb	r3, [r3, #0]
   1b544:	4c14      	ldr	r4, [pc, #80]	; (1b598 <operateOnEvent+0x1cc>)
   1b546:	47a0      	blx	r4
   1b548:	e000      	b.n	1b54c <operateOnEvent+0x180>
		return;
   1b54a:	46c0      	nop			; (mov r8, r8)
}
   1b54c:	46bd      	mov	sp, r7
   1b54e:	b003      	add	sp, #12
   1b550:	bd90      	pop	{r4, r7, pc}
   1b552:	46c0      	nop			; (mov r8, r8)
   1b554:	0001b0a5 	.word	0x0001b0a5
   1b558:	2000092e 	.word	0x2000092e
   1b55c:	0001afb9 	.word	0x0001afb9
   1b560:	0001b021 	.word	0x0001b021
   1b564:	0001b925 	.word	0x0001b925
   1b568:	00019689 	.word	0x00019689
   1b56c:	00014b5d 	.word	0x00014b5d
   1b570:	20000918 	.word	0x20000918
   1b574:	20000854 	.word	0x20000854
   1b578:	0001ba51 	.word	0x0001ba51
   1b57c:	000201cd 	.word	0x000201cd
   1b580:	20000978 	.word	0x20000978
   1b584:	20000991 	.word	0x20000991
   1b588:	2000099a 	.word	0x2000099a
   1b58c:	0001b73d 	.word	0x0001b73d
   1b590:	20000a0d 	.word	0x20000a0d
   1b594:	200009cc 	.word	0x200009cc
   1b598:	0001b235 	.word	0x0001b235

0001b59c <checkLineSensors>:

uint8_t checkLineSensors(void)
{
   1b59c:	b580      	push	{r7, lr}
   1b59e:	af00      	add	r7, sp, #0
	return structThreePhase_state.u8t_phase_ac_state;
   1b5a0:	4b02      	ldr	r3, [pc, #8]	; (1b5ac <checkLineSensors+0x10>)
   1b5a2:	785b      	ldrb	r3, [r3, #1]
   1b5a4:	b2db      	uxtb	r3, r3
}
   1b5a6:	0018      	movs	r0, r3
   1b5a8:	46bd      	mov	sp, r7
   1b5aa:	bd80      	pop	{r7, pc}
   1b5ac:	20000948 	.word	0x20000948

0001b5b0 <operateOnStableLine>:

void operateOnStableLine(void)
{
   1b5b0:	b590      	push	{r4, r7, lr}
   1b5b2:	b083      	sub	sp, #12
   1b5b4:	af00      	add	r7, sp, #0
	waitStableLineOn = false;
   1b5b6:	4b45      	ldr	r3, [pc, #276]	; (1b6cc <operateOnStableLine+0x11c>)
   1b5b8:	2200      	movs	r2, #0
   1b5ba:	701a      	strb	r2, [r3, #0]
	uint8_t temp = checkLineSensors();
   1b5bc:	1dbc      	adds	r4, r7, #6
   1b5be:	4b44      	ldr	r3, [pc, #272]	; (1b6d0 <operateOnStableLine+0x120>)
   1b5c0:	4798      	blx	r3
   1b5c2:	0003      	movs	r3, r0
   1b5c4:	7023      	strb	r3, [r4, #0]
	if (temp == AC_3PH)
   1b5c6:	1dbb      	adds	r3, r7, #6
   1b5c8:	781b      	ldrb	r3, [r3, #0]
   1b5ca:	2b03      	cmp	r3, #3
   1b5cc:	d136      	bne.n	1b63c <operateOnStableLine+0x8c>
	{
		bool tempPhaseSeq = true;													//Set Temp Phase Seq to True
   1b5ce:	1dfb      	adds	r3, r7, #7
   1b5d0:	2201      	movs	r2, #1
   1b5d2:	701a      	strb	r2, [r3, #0]
		if(user_settings_parameter_struct.detectPhaseSequence)						// if Sequence Detection is needed
   1b5d4:	4b3f      	ldr	r3, [pc, #252]	; (1b6d4 <operateOnStableLine+0x124>)
   1b5d6:	2224      	movs	r2, #36	; 0x24
   1b5d8:	5c9b      	ldrb	r3, [r3, r2]
   1b5da:	b2db      	uxtb	r3, r3
   1b5dc:	2b00      	cmp	r3, #0
   1b5de:	d004      	beq.n	1b5ea <operateOnStableLine+0x3a>
		{
			tempPhaseSeq = getPhaseSequence();										// set current phase seq to the temp variable
   1b5e0:	1dfc      	adds	r4, r7, #7
   1b5e2:	4b3d      	ldr	r3, [pc, #244]	; (1b6d8 <operateOnStableLine+0x128>)
   1b5e4:	4798      	blx	r3
   1b5e6:	0003      	movs	r3, r0
   1b5e8:	7023      	strb	r3, [r4, #0]
		}
		
		if(tempPhaseSeq)															// if correct phase seq than
   1b5ea:	1dfb      	adds	r3, r7, #7
   1b5ec:	781b      	ldrb	r3, [r3, #0]
   1b5ee:	2b00      	cmp	r3, #0
   1b5f0:	d018      	beq.n	1b624 <operateOnStableLine+0x74>
		{
			THREEPHASE_OK_LED_ON;
   1b5f2:	2100      	movs	r1, #0
   1b5f4:	2027      	movs	r0, #39	; 0x27
   1b5f6:	4b39      	ldr	r3, [pc, #228]	; (1b6dc <operateOnStableLine+0x12c>)
   1b5f8:	4798      	blx	r3
			if (user_settings_parameter_struct.autoStartAddress)
   1b5fa:	4b36      	ldr	r3, [pc, #216]	; (1b6d4 <operateOnStableLine+0x124>)
   1b5fc:	785b      	ldrb	r3, [r3, #1]
   1b5fe:	b2db      	uxtb	r3, r3
   1b600:	2b00      	cmp	r3, #0
   1b602:	d002      	beq.n	1b60a <operateOnStableLine+0x5a>
			{
				triggerAutoStart();
   1b604:	4b36      	ldr	r3, [pc, #216]	; (1b6e0 <operateOnStableLine+0x130>)
   1b606:	4798      	blx	r3
		(last_three_phase_state == AC_3PH && user_settings_parameter_struct.dndAddress != DND_LIGHT))			//PREVIOSULY 3 PHASE, and NOT ON FOR ALL EVENTS
		{
			simEventTemp[5] = registerEvent('L'); //register To SIM AC Power OFF
		}
	}
}
   1b608:	e05b      	b.n	1b6c2 <operateOnStableLine+0x112>
				if (user_settings_parameter_struct.dndAddress!=DND_LIGHT)			//DND IS OFF FOR ALL 3 PHASE LIGHT EVENTS, DND IS ON FOR SINGLE PHASING EVENTS
   1b60a:	4b32      	ldr	r3, [pc, #200]	; (1b6d4 <operateOnStableLine+0x124>)
   1b60c:	791b      	ldrb	r3, [r3, #4]
   1b60e:	b2db      	uxtb	r3, r3
   1b610:	2b4c      	cmp	r3, #76	; 0x4c
   1b612:	d056      	beq.n	1b6c2 <operateOnStableLine+0x112>
					simEventTemp[4] = registerEvent('G');							//register TO SIM AC power ON
   1b614:	2047      	movs	r0, #71	; 0x47
   1b616:	4b33      	ldr	r3, [pc, #204]	; (1b6e4 <operateOnStableLine+0x134>)
   1b618:	4798      	blx	r3
   1b61a:	0003      	movs	r3, r0
   1b61c:	001a      	movs	r2, r3
   1b61e:	4b32      	ldr	r3, [pc, #200]	; (1b6e8 <operateOnStableLine+0x138>)
   1b620:	711a      	strb	r2, [r3, #4]
}
   1b622:	e04e      	b.n	1b6c2 <operateOnStableLine+0x112>
			THREEPHASE_OK_LED_OFF;
   1b624:	2101      	movs	r1, #1
   1b626:	2027      	movs	r0, #39	; 0x27
   1b628:	4b2c      	ldr	r3, [pc, #176]	; (1b6dc <operateOnStableLine+0x12c>)
   1b62a:	4798      	blx	r3
			simEventTemp[9] = registerEvent('A');								//incorrect sequence
   1b62c:	2041      	movs	r0, #65	; 0x41
   1b62e:	4b2d      	ldr	r3, [pc, #180]	; (1b6e4 <operateOnStableLine+0x134>)
   1b630:	4798      	blx	r3
   1b632:	0003      	movs	r3, r0
   1b634:	001a      	movs	r2, r3
   1b636:	4b2c      	ldr	r3, [pc, #176]	; (1b6e8 <operateOnStableLine+0x138>)
   1b638:	725a      	strb	r2, [r3, #9]
}
   1b63a:	e042      	b.n	1b6c2 <operateOnStableLine+0x112>
	else if (temp == AC_2PH) //Got Power in 2 phase
   1b63c:	1dbb      	adds	r3, r7, #6
   1b63e:	781b      	ldrb	r3, [r3, #0]
   1b640:	2b02      	cmp	r3, #2
   1b642:	d116      	bne.n	1b672 <operateOnStableLine+0xc2>
		THREEPHASE_OK_LED_OFF;
   1b644:	2101      	movs	r1, #1
   1b646:	2027      	movs	r0, #39	; 0x27
   1b648:	4b24      	ldr	r3, [pc, #144]	; (1b6dc <operateOnStableLine+0x12c>)
   1b64a:	4798      	blx	r3
		if (user_settings_parameter_struct.dndAddress == DND_OFF &&					//DND IS OFF FOR ALL KIND OF EVENTS
   1b64c:	4b21      	ldr	r3, [pc, #132]	; (1b6d4 <operateOnStableLine+0x124>)
   1b64e:	791b      	ldrb	r3, [r3, #4]
   1b650:	b2db      	uxtb	r3, r3
   1b652:	2b4f      	cmp	r3, #79	; 0x4f
   1b654:	d135      	bne.n	1b6c2 <operateOnStableLine+0x112>
		user_settings_parameter_struct.detectSinglePhasing)					//SINGLE PHASING PROTECTION IS ON
   1b656:	4b1f      	ldr	r3, [pc, #124]	; (1b6d4 <operateOnStableLine+0x124>)
   1b658:	2220      	movs	r2, #32
   1b65a:	5c9b      	ldrb	r3, [r3, r2]
   1b65c:	b2db      	uxtb	r3, r3
		if (user_settings_parameter_struct.dndAddress == DND_OFF &&					//DND IS OFF FOR ALL KIND OF EVENTS
   1b65e:	2b00      	cmp	r3, #0
   1b660:	d02f      	beq.n	1b6c2 <operateOnStableLine+0x112>
			simEventTemp[9] = registerEvent('A'); //register TO SIM 2 phase power ON
   1b662:	2041      	movs	r0, #65	; 0x41
   1b664:	4b1f      	ldr	r3, [pc, #124]	; (1b6e4 <operateOnStableLine+0x134>)
   1b666:	4798      	blx	r3
   1b668:	0003      	movs	r3, r0
   1b66a:	001a      	movs	r2, r3
   1b66c:	4b1e      	ldr	r3, [pc, #120]	; (1b6e8 <operateOnStableLine+0x138>)
   1b66e:	725a      	strb	r2, [r3, #9]
}
   1b670:	e027      	b.n	1b6c2 <operateOnStableLine+0x112>
	else if (temp == AC_OFF)	//Lost Power in All Phase
   1b672:	1dbb      	adds	r3, r7, #6
   1b674:	781b      	ldrb	r3, [r3, #0]
   1b676:	2b00      	cmp	r3, #0
   1b678:	d123      	bne.n	1b6c2 <operateOnStableLine+0x112>
		THREEPHASE_OK_LED_OFF;
   1b67a:	2101      	movs	r1, #1
   1b67c:	2027      	movs	r0, #39	; 0x27
   1b67e:	4b17      	ldr	r3, [pc, #92]	; (1b6dc <operateOnStableLine+0x12c>)
   1b680:	4798      	blx	r3
		if ((user_settings_parameter_struct.dndAddress == DND_OFF) ||												//DND IS OFF FOR ALL EVENTS
   1b682:	4b14      	ldr	r3, [pc, #80]	; (1b6d4 <operateOnStableLine+0x124>)
   1b684:	791b      	ldrb	r3, [r3, #4]
   1b686:	b2db      	uxtb	r3, r3
   1b688:	2b4f      	cmp	r3, #79	; 0x4f
   1b68a:	d013      	beq.n	1b6b4 <operateOnStableLine+0x104>
		(last_three_phase_state == AC_2PH && user_settings_parameter_struct.dndAddress == DND_OFF) ||			//PREVIOUSLY SINGLE PHASING , and DND OFF FOR ALL EVENTS
   1b68c:	4b17      	ldr	r3, [pc, #92]	; (1b6ec <operateOnStableLine+0x13c>)
   1b68e:	781b      	ldrb	r3, [r3, #0]
   1b690:	b2db      	uxtb	r3, r3
		if ((user_settings_parameter_struct.dndAddress == DND_OFF) ||												//DND IS OFF FOR ALL EVENTS
   1b692:	2b02      	cmp	r3, #2
   1b694:	d104      	bne.n	1b6a0 <operateOnStableLine+0xf0>
		(last_three_phase_state == AC_2PH && user_settings_parameter_struct.dndAddress == DND_OFF) ||			//PREVIOUSLY SINGLE PHASING , and DND OFF FOR ALL EVENTS
   1b696:	4b0f      	ldr	r3, [pc, #60]	; (1b6d4 <operateOnStableLine+0x124>)
   1b698:	791b      	ldrb	r3, [r3, #4]
   1b69a:	b2db      	uxtb	r3, r3
   1b69c:	2b4f      	cmp	r3, #79	; 0x4f
   1b69e:	d009      	beq.n	1b6b4 <operateOnStableLine+0x104>
		(last_three_phase_state == AC_3PH && user_settings_parameter_struct.dndAddress != DND_LIGHT))			//PREVIOSULY 3 PHASE, and NOT ON FOR ALL EVENTS
   1b6a0:	4b12      	ldr	r3, [pc, #72]	; (1b6ec <operateOnStableLine+0x13c>)
   1b6a2:	781b      	ldrb	r3, [r3, #0]
   1b6a4:	b2db      	uxtb	r3, r3
		(last_three_phase_state == AC_2PH && user_settings_parameter_struct.dndAddress == DND_OFF) ||			//PREVIOUSLY SINGLE PHASING , and DND OFF FOR ALL EVENTS
   1b6a6:	2b03      	cmp	r3, #3
   1b6a8:	d10b      	bne.n	1b6c2 <operateOnStableLine+0x112>
		(last_three_phase_state == AC_3PH && user_settings_parameter_struct.dndAddress != DND_LIGHT))			//PREVIOSULY 3 PHASE, and NOT ON FOR ALL EVENTS
   1b6aa:	4b0a      	ldr	r3, [pc, #40]	; (1b6d4 <operateOnStableLine+0x124>)
   1b6ac:	791b      	ldrb	r3, [r3, #4]
   1b6ae:	b2db      	uxtb	r3, r3
   1b6b0:	2b4c      	cmp	r3, #76	; 0x4c
   1b6b2:	d006      	beq.n	1b6c2 <operateOnStableLine+0x112>
			simEventTemp[5] = registerEvent('L'); //register To SIM AC Power OFF
   1b6b4:	204c      	movs	r0, #76	; 0x4c
   1b6b6:	4b0b      	ldr	r3, [pc, #44]	; (1b6e4 <operateOnStableLine+0x134>)
   1b6b8:	4798      	blx	r3
   1b6ba:	0003      	movs	r3, r0
   1b6bc:	001a      	movs	r2, r3
   1b6be:	4b0a      	ldr	r3, [pc, #40]	; (1b6e8 <operateOnStableLine+0x138>)
   1b6c0:	715a      	strb	r2, [r3, #5]
}
   1b6c2:	46c0      	nop			; (mov r8, r8)
   1b6c4:	46bd      	mov	sp, r7
   1b6c6:	b003      	add	sp, #12
   1b6c8:	bd90      	pop	{r4, r7, pc}
   1b6ca:	46c0      	nop			; (mov r8, r8)
   1b6cc:	20000a0d 	.word	0x20000a0d
   1b6d0:	0001b59d 	.word	0x0001b59d
   1b6d4:	20000854 	.word	0x20000854
   1b6d8:	0001afed 	.word	0x0001afed
   1b6dc:	00019689 	.word	0x00019689
   1b6e0:	0001b385 	.word	0x0001b385
   1b6e4:	00014b5d 	.word	0x00014b5d
   1b6e8:	20000918 	.word	0x20000918
   1b6ec:	2000092b 	.word	0x2000092b

0001b6f0 <waitStableLineOver>:

bool waitStableLineOver(void)
{
   1b6f0:	b580      	push	{r7, lr}
   1b6f2:	af00      	add	r7, sp, #0
	return (waitStableLineOn && xTaskGetTickCount() - waitStableLineTimer >= (waitStableLineTime * 100));
   1b6f4:	4b0d      	ldr	r3, [pc, #52]	; (1b72c <waitStableLineOver+0x3c>)
   1b6f6:	781b      	ldrb	r3, [r3, #0]
   1b6f8:	2b00      	cmp	r3, #0
   1b6fa:	d00e      	beq.n	1b71a <waitStableLineOver+0x2a>
   1b6fc:	4b0c      	ldr	r3, [pc, #48]	; (1b730 <waitStableLineOver+0x40>)
   1b6fe:	4798      	blx	r3
   1b700:	0002      	movs	r2, r0
   1b702:	4b0c      	ldr	r3, [pc, #48]	; (1b734 <waitStableLineOver+0x44>)
   1b704:	681b      	ldr	r3, [r3, #0]
   1b706:	1ad3      	subs	r3, r2, r3
   1b708:	4a0b      	ldr	r2, [pc, #44]	; (1b738 <waitStableLineOver+0x48>)
   1b70a:	7812      	ldrb	r2, [r2, #0]
   1b70c:	0011      	movs	r1, r2
   1b70e:	2264      	movs	r2, #100	; 0x64
   1b710:	434a      	muls	r2, r1
   1b712:	4293      	cmp	r3, r2
   1b714:	d301      	bcc.n	1b71a <waitStableLineOver+0x2a>
   1b716:	2301      	movs	r3, #1
   1b718:	e000      	b.n	1b71c <waitStableLineOver+0x2c>
   1b71a:	2300      	movs	r3, #0
   1b71c:	1c1a      	adds	r2, r3, #0
   1b71e:	2301      	movs	r3, #1
   1b720:	4013      	ands	r3, r2
   1b722:	b2db      	uxtb	r3, r3
}
   1b724:	0018      	movs	r0, r3
   1b726:	46bd      	mov	sp, r7
   1b728:	bd80      	pop	{r7, pc}
   1b72a:	46c0      	nop			; (mov r8, r8)
   1b72c:	20000a0d 	.word	0x20000a0d
   1b730:	000201cd 	.word	0x000201cd
   1b734:	200009cc 	.word	0x200009cc
   1b738:	200009dd 	.word	0x200009dd

0001b73c <startMotor>:


void startMotor(bool commanded, bool forcedStart)
{
   1b73c:	b580      	push	{r7, lr}
   1b73e:	b082      	sub	sp, #8
   1b740:	af00      	add	r7, sp, #0
   1b742:	0002      	movs	r2, r0
   1b744:	1dfb      	adds	r3, r7, #7
   1b746:	701a      	strb	r2, [r3, #0]
   1b748:	1dbb      	adds	r3, r7, #6
   1b74a:	1c0a      	adds	r2, r1, #0
   1b74c:	701a      	strb	r2, [r3, #0]
	startTimerOn = false;
   1b74e:	4b5f      	ldr	r3, [pc, #380]	; (1b8cc <startMotor+0x190>)
   1b750:	2200      	movs	r2, #0
   1b752:	701a      	strb	r2, [r3, #0]

	//if (forcedStart || (getACPowerState() &&																														//AC Phase is Presnet
	//((getAllPhaseState()==AC_3PH) || (getAllPhaseState()==AC_2PH && !user_settings_parameter_struct.detectSinglePhasing)) &&				//3 phase is present, or SPP is OFF and 2 phase is present
	//((user_settings_parameter_struct.detectPhaseSequence && getPhaseSequence()) || (!user_settings_parameter_struct.detectPhaseSequence))))	//Phase Sequnce Protection is ON and correct phase seq, or Phase Seq Protection is off
	
	if (forcedStart || 																														//AC Phase is Presnet
   1b754:	1dbb      	adds	r3, r7, #6
   1b756:	781b      	ldrb	r3, [r3, #0]
   1b758:	2b00      	cmp	r3, #0
   1b75a:	d122      	bne.n	1b7a2 <startMotor+0x66>
	(((getAllPhaseState()==AC_3PH) || (getAllPhaseState()==AC_2PH && !user_settings_parameter_struct.detectSinglePhasing)) &&				//3 phase is present, or SPP is OFF and 2 phase is present
   1b75c:	4b5c      	ldr	r3, [pc, #368]	; (1b8d0 <startMotor+0x194>)
   1b75e:	4798      	blx	r3
   1b760:	0003      	movs	r3, r0
	if (forcedStart || 																														//AC Phase is Presnet
   1b762:	2b03      	cmp	r3, #3
   1b764:	d00c      	beq.n	1b780 <startMotor+0x44>
	(((getAllPhaseState()==AC_3PH) || (getAllPhaseState()==AC_2PH && !user_settings_parameter_struct.detectSinglePhasing)) &&				//3 phase is present, or SPP is OFF and 2 phase is present
   1b766:	4b5a      	ldr	r3, [pc, #360]	; (1b8d0 <startMotor+0x194>)
   1b768:	4798      	blx	r3
   1b76a:	0003      	movs	r3, r0
   1b76c:	2b02      	cmp	r3, #2
   1b76e:	d000      	beq.n	1b772 <startMotor+0x36>
   1b770:	e097      	b.n	1b8a2 <startMotor+0x166>
   1b772:	4b58      	ldr	r3, [pc, #352]	; (1b8d4 <startMotor+0x198>)
   1b774:	2220      	movs	r2, #32
   1b776:	5c9b      	ldrb	r3, [r3, r2]
   1b778:	b2db      	uxtb	r3, r3
   1b77a:	2b00      	cmp	r3, #0
   1b77c:	d000      	beq.n	1b780 <startMotor+0x44>
   1b77e:	e090      	b.n	1b8a2 <startMotor+0x166>
	((user_settings_parameter_struct.detectPhaseSequence && getPhaseSequence()) || (!user_settings_parameter_struct.detectPhaseSequence))))	//Phase Sequnce Protection is ON and correct phase seq, or Phase Seq Protection is off
   1b780:	4b54      	ldr	r3, [pc, #336]	; (1b8d4 <startMotor+0x198>)
   1b782:	2224      	movs	r2, #36	; 0x24
   1b784:	5c9b      	ldrb	r3, [r3, r2]
   1b786:	b2db      	uxtb	r3, r3
	(((getAllPhaseState()==AC_3PH) || (getAllPhaseState()==AC_2PH && !user_settings_parameter_struct.detectSinglePhasing)) &&				//3 phase is present, or SPP is OFF and 2 phase is present
   1b788:	2b00      	cmp	r3, #0
   1b78a:	d003      	beq.n	1b794 <startMotor+0x58>
	((user_settings_parameter_struct.detectPhaseSequence && getPhaseSequence()) || (!user_settings_parameter_struct.detectPhaseSequence))))	//Phase Sequnce Protection is ON and correct phase seq, or Phase Seq Protection is off
   1b78c:	4b52      	ldr	r3, [pc, #328]	; (1b8d8 <startMotor+0x19c>)
   1b78e:	4798      	blx	r3
   1b790:	1e03      	subs	r3, r0, #0
   1b792:	d106      	bne.n	1b7a2 <startMotor+0x66>
   1b794:	4b4f      	ldr	r3, [pc, #316]	; (1b8d4 <startMotor+0x198>)
   1b796:	2224      	movs	r2, #36	; 0x24
   1b798:	5c9b      	ldrb	r3, [r3, r2]
   1b79a:	b2db      	uxtb	r3, r3
   1b79c:	2b00      	cmp	r3, #0
   1b79e:	d000      	beq.n	1b7a2 <startMotor+0x66>
   1b7a0:	e07f      	b.n	1b8a2 <startMotor+0x166>
	{
		if (!getMotorState())
   1b7a2:	4b4e      	ldr	r3, [pc, #312]	; (1b8dc <startMotor+0x1a0>)
   1b7a4:	4798      	blx	r3
   1b7a6:	0003      	movs	r3, r0
   1b7a8:	001a      	movs	r2, r3
   1b7aa:	2301      	movs	r3, #1
   1b7ac:	4053      	eors	r3, r2
   1b7ae:	b2db      	uxtb	r3, r3
   1b7b0:	2b00      	cmp	r3, #0
   1b7b2:	d100      	bne.n	1b7b6 <startMotor+0x7a>
   1b7b4:	e06d      	b.n	1b892 <startMotor+0x156>
		{
			if (factory_settings_parameter_struct.ENABLE_WATER)
   1b7b6:	4b4a      	ldr	r3, [pc, #296]	; (1b8e0 <startMotor+0x1a4>)
   1b7b8:	795b      	ldrb	r3, [r3, #5]
   1b7ba:	2b00      	cmp	r3, #0
   1b7bc:	d036      	beq.n	1b82c <startMotor+0xf0>
			{
				if(!(user_settings_parameter_struct.waterBypassAddress) && getWaterSensorState()==CRITICALLEVEL)
   1b7be:	4b45      	ldr	r3, [pc, #276]	; (1b8d4 <startMotor+0x198>)
   1b7c0:	7fdb      	ldrb	r3, [r3, #31]
   1b7c2:	b2db      	uxtb	r3, r3
   1b7c4:	2b00      	cmp	r3, #0
   1b7c6:	d113      	bne.n	1b7f0 <startMotor+0xb4>
   1b7c8:	4b46      	ldr	r3, [pc, #280]	; (1b8e4 <startMotor+0x1a8>)
   1b7ca:	4798      	blx	r3
   1b7cc:	1e03      	subs	r3, r0, #0
   1b7ce:	d10f      	bne.n	1b7f0 <startMotor+0xb4>
				{
					if (commanded)
   1b7d0:	1dfb      	adds	r3, r7, #7
   1b7d2:	781b      	ldrb	r3, [r3, #0]
   1b7d4:	2b00      	cmp	r3, #0
   1b7d6:	d003      	beq.n	1b7e0 <startMotor+0xa4>
					{
						setMotorMGRResponse('T');	//cannot start motor due to some problem
   1b7d8:	2054      	movs	r0, #84	; 0x54
   1b7da:	4b43      	ldr	r3, [pc, #268]	; (1b8e8 <startMotor+0x1ac>)
   1b7dc:	4798      	blx	r3
					}
					else
					{
						simEventTemp[0] = registerEvent('N');//register To SIM motor not started due to ANY REASON
					}
					return;
   1b7de:	e071      	b.n	1b8c4 <startMotor+0x188>
						simEventTemp[0] = registerEvent('N');//register To SIM motor not started due to ANY REASON
   1b7e0:	204e      	movs	r0, #78	; 0x4e
   1b7e2:	4b42      	ldr	r3, [pc, #264]	; (1b8ec <startMotor+0x1b0>)
   1b7e4:	4798      	blx	r3
   1b7e6:	0003      	movs	r3, r0
   1b7e8:	001a      	movs	r2, r3
   1b7ea:	4b41      	ldr	r3, [pc, #260]	; (1b8f0 <startMotor+0x1b4>)
   1b7ec:	701a      	strb	r2, [r3, #0]
					return;
   1b7ee:	e069      	b.n	1b8c4 <startMotor+0x188>
				}
				
				if (factory_settings_parameter_struct.ENABLE_GP)
   1b7f0:	4b3b      	ldr	r3, [pc, #236]	; (1b8e0 <startMotor+0x1a4>)
   1b7f2:	791b      	ldrb	r3, [r3, #4]
   1b7f4:	2b00      	cmp	r3, #0
   1b7f6:	d019      	beq.n	1b82c <startMotor+0xf0>
				{
					if(!(user_settings_parameter_struct.waterBypassAddress) && getOverHeadWaterSensorState()==OVERHEADHIGHLEVEL)
   1b7f8:	4b36      	ldr	r3, [pc, #216]	; (1b8d4 <startMotor+0x198>)
   1b7fa:	7fdb      	ldrb	r3, [r3, #31]
   1b7fc:	b2db      	uxtb	r3, r3
   1b7fe:	2b00      	cmp	r3, #0
   1b800:	d114      	bne.n	1b82c <startMotor+0xf0>
   1b802:	4b3c      	ldr	r3, [pc, #240]	; (1b8f4 <startMotor+0x1b8>)
   1b804:	4798      	blx	r3
   1b806:	0003      	movs	r3, r0
   1b808:	2b02      	cmp	r3, #2
   1b80a:	d10f      	bne.n	1b82c <startMotor+0xf0>
					{
						if(commanded)
   1b80c:	1dfb      	adds	r3, r7, #7
   1b80e:	781b      	ldrb	r3, [r3, #0]
   1b810:	2b00      	cmp	r3, #0
   1b812:	d003      	beq.n	1b81c <startMotor+0xe0>
						{
							setMotorMGRResponse('V');	//cannot start motor as OverHead Tank Full.
   1b814:	2056      	movs	r0, #86	; 0x56
   1b816:	4b34      	ldr	r3, [pc, #208]	; (1b8e8 <startMotor+0x1ac>)
   1b818:	4798      	blx	r3
						}
						else
						{
							simEventTemp[17] = registerEvent('V');//register To SIM motor not started due to ANY REASON
						}
						return;
   1b81a:	e053      	b.n	1b8c4 <startMotor+0x188>
							simEventTemp[17] = registerEvent('V');//register To SIM motor not started due to ANY REASON
   1b81c:	2056      	movs	r0, #86	; 0x56
   1b81e:	4b33      	ldr	r3, [pc, #204]	; (1b8ec <startMotor+0x1b0>)
   1b820:	4798      	blx	r3
   1b822:	0003      	movs	r3, r0
   1b824:	001a      	movs	r2, r3
   1b826:	4b32      	ldr	r3, [pc, #200]	; (1b8f0 <startMotor+0x1b4>)
   1b828:	745a      	strb	r2, [r3, #17]
						return;
   1b82a:	e04b      	b.n	1b8c4 <startMotor+0x188>
					}
				}
			}

			STOP_RELAY_ON;
   1b82c:	2101      	movs	r1, #1
   1b82e:	202c      	movs	r0, #44	; 0x2c
   1b830:	4b31      	ldr	r3, [pc, #196]	; (1b8f8 <startMotor+0x1bc>)
   1b832:	4798      	blx	r3
			START_RELAY_ON;
   1b834:	2101      	movs	r1, #1
   1b836:	202d      	movs	r0, #45	; 0x2d
   1b838:	4b2f      	ldr	r3, [pc, #188]	; (1b8f8 <startMotor+0x1bc>)
   1b83a:	4798      	blx	r3
			stopMotorCommandGiven=false;
   1b83c:	4b2f      	ldr	r3, [pc, #188]	; (1b8fc <startMotor+0x1c0>)
   1b83e:	2200      	movs	r2, #0
   1b840:	701a      	strb	r2, [r3, #0]
			//MOTOR_ON_LED_ON;
			tempStartSequenceTimer = xTaskGetTickCount();
   1b842:	4b2f      	ldr	r3, [pc, #188]	; (1b900 <startMotor+0x1c4>)
   1b844:	4798      	blx	r3
   1b846:	0002      	movs	r2, r0
   1b848:	4b2e      	ldr	r3, [pc, #184]	; (1b904 <startMotor+0x1c8>)
   1b84a:	601a      	str	r2, [r3, #0]
			startSequenceOn = true;
   1b84c:	4b2e      	ldr	r3, [pc, #184]	; (1b908 <startMotor+0x1cc>)
   1b84e:	2201      	movs	r2, #1
   1b850:	701a      	strb	r2, [r3, #0]

			if(user_settings_parameter_struct.motorVoltageBypass==MOTOR_VOLTAGE_BYPASS_ON)
   1b852:	4b20      	ldr	r3, [pc, #128]	; (1b8d4 <startMotor+0x198>)
   1b854:	2227      	movs	r2, #39	; 0x27
   1b856:	5c9b      	ldrb	r3, [r3, r2]
   1b858:	b2db      	uxtb	r3, r3
   1b85a:	2b01      	cmp	r3, #1
   1b85c:	d107      	bne.n	1b86e <startMotor+0x132>
			{
				motorRelatedVoltageBypassOn=true;
   1b85e:	4b2b      	ldr	r3, [pc, #172]	; (1b90c <startMotor+0x1d0>)
   1b860:	2201      	movs	r2, #1
   1b862:	701a      	strb	r2, [r3, #0]
				motorVoltageBypassTimerTime=xTaskGetTickCount();
   1b864:	4b26      	ldr	r3, [pc, #152]	; (1b900 <startMotor+0x1c4>)
   1b866:	4798      	blx	r3
   1b868:	0002      	movs	r2, r0
   1b86a:	4b29      	ldr	r3, [pc, #164]	; (1b910 <startMotor+0x1d4>)
   1b86c:	601a      	str	r2, [r3, #0]
			}

			setMotorState(true);
   1b86e:	2001      	movs	r0, #1
   1b870:	4b28      	ldr	r3, [pc, #160]	; (1b914 <startMotor+0x1d8>)
   1b872:	4798      	blx	r3

			if (factory_settings_parameter_struct.ENABLE_CURRENT)
   1b874:	4b1a      	ldr	r3, [pc, #104]	; (1b8e0 <startMotor+0x1a4>)
   1b876:	785b      	ldrb	r3, [r3, #1]
   1b878:	2b00      	cmp	r3, #0
   1b87a:	d005      	beq.n	1b888 <startMotor+0x14c>
			{
				enableCurrentBuffer=false;
   1b87c:	4b26      	ldr	r3, [pc, #152]	; (1b918 <startMotor+0x1dc>)
   1b87e:	2200      	movs	r2, #0
   1b880:	701a      	strb	r2, [r3, #0]
				lastCurrentReading=CR_NORMAL;
   1b882:	4b26      	ldr	r3, [pc, #152]	; (1b91c <startMotor+0x1e0>)
   1b884:	2200      	movs	r2, #0
   1b886:	701a      	strb	r2, [r3, #0]
			}
			gotOnCommand = commanded;
   1b888:	4b25      	ldr	r3, [pc, #148]	; (1b920 <startMotor+0x1e4>)
   1b88a:	1dfa      	adds	r2, r7, #7
   1b88c:	7812      	ldrb	r2, [r2, #0]
   1b88e:	701a      	strb	r2, [r3, #0]
		if (!getMotorState())
   1b890:	e017      	b.n	1b8c2 <startMotor+0x186>
		}
		else
		{
			if (commanded)
   1b892:	1dfb      	adds	r3, r7, #7
   1b894:	781b      	ldrb	r3, [r3, #0]
   1b896:	2b00      	cmp	r3, #0
   1b898:	d013      	beq.n	1b8c2 <startMotor+0x186>
			{
				setMotorMGRResponse('+');		//motor is already on
   1b89a:	202b      	movs	r0, #43	; 0x2b
   1b89c:	4b12      	ldr	r3, [pc, #72]	; (1b8e8 <startMotor+0x1ac>)
   1b89e:	4798      	blx	r3
		if (!getMotorState())
   1b8a0:	e00f      	b.n	1b8c2 <startMotor+0x186>
			}
		}
	}
	else
	{
		if (commanded)
   1b8a2:	1dfb      	adds	r3, r7, #7
   1b8a4:	781b      	ldrb	r3, [r3, #0]
   1b8a6:	2b00      	cmp	r3, #0
   1b8a8:	d003      	beq.n	1b8b2 <startMotor+0x176>
		{
			setMotorMGRResponse('N');	//cannot start motor due to some problem
   1b8aa:	204e      	movs	r0, #78	; 0x4e
   1b8ac:	4b0e      	ldr	r3, [pc, #56]	; (1b8e8 <startMotor+0x1ac>)
   1b8ae:	4798      	blx	r3
   1b8b0:	e008      	b.n	1b8c4 <startMotor+0x188>
		}
		else
		{
			simEventTemp[0] = registerEvent('N');//register To SIM motor not started due to ANY REASON
   1b8b2:	204e      	movs	r0, #78	; 0x4e
   1b8b4:	4b0d      	ldr	r3, [pc, #52]	; (1b8ec <startMotor+0x1b0>)
   1b8b6:	4798      	blx	r3
   1b8b8:	0003      	movs	r3, r0
   1b8ba:	001a      	movs	r2, r3
   1b8bc:	4b0c      	ldr	r3, [pc, #48]	; (1b8f0 <startMotor+0x1b4>)
   1b8be:	701a      	strb	r2, [r3, #0]
   1b8c0:	e000      	b.n	1b8c4 <startMotor+0x188>
		if (!getMotorState())
   1b8c2:	46c0      	nop			; (mov r8, r8)
		}
	}
}
   1b8c4:	46bd      	mov	sp, r7
   1b8c6:	b002      	add	sp, #8
   1b8c8:	bd80      	pop	{r7, pc}
   1b8ca:	46c0      	nop			; (mov r8, r8)
   1b8cc:	2000099a 	.word	0x2000099a
   1b8d0:	0001afb9 	.word	0x0001afb9
   1b8d4:	20000854 	.word	0x20000854
   1b8d8:	0001afed 	.word	0x0001afed
   1b8dc:	0001b021 	.word	0x0001b021
   1b8e0:	2000082c 	.word	0x2000082c
   1b8e4:	000198e9 	.word	0x000198e9
   1b8e8:	00014d3d 	.word	0x00014d3d
   1b8ec:	00014b5d 	.word	0x00014b5d
   1b8f0:	20000918 	.word	0x20000918
   1b8f4:	000197b9 	.word	0x000197b9
   1b8f8:	00019689 	.word	0x00019689
   1b8fc:	20000a60 	.word	0x20000a60
   1b900:	000201cd 	.word	0x000201cd
   1b904:	20000994 	.word	0x20000994
   1b908:	20000999 	.word	0x20000999
   1b90c:	20000973 	.word	0x20000973
   1b910:	20000984 	.word	0x20000984
   1b914:	0001b035 	.word	0x0001b035
   1b918:	20000960 	.word	0x20000960
   1b91c:	2000097e 	.word	0x2000097e
   1b920:	20000914 	.word	0x20000914

0001b924 <stopMotor>:

void stopMotor(bool commanded, bool forceStop,bool offButton)
{
   1b924:	b590      	push	{r4, r7, lr}
   1b926:	b083      	sub	sp, #12
   1b928:	af00      	add	r7, sp, #0
   1b92a:	0004      	movs	r4, r0
   1b92c:	0008      	movs	r0, r1
   1b92e:	0011      	movs	r1, r2
   1b930:	1dfb      	adds	r3, r7, #7
   1b932:	1c22      	adds	r2, r4, #0
   1b934:	701a      	strb	r2, [r3, #0]
   1b936:	1dbb      	adds	r3, r7, #6
   1b938:	1c02      	adds	r2, r0, #0
   1b93a:	701a      	strb	r2, [r3, #0]
   1b93c:	1d7b      	adds	r3, r7, #5
   1b93e:	1c0a      	adds	r2, r1, #0
   1b940:	701a      	strb	r2, [r3, #0]
	if (forceStop || getMotorState())
   1b942:	1dbb      	adds	r3, r7, #6
   1b944:	781b      	ldrb	r3, [r3, #0]
   1b946:	2b00      	cmp	r3, #0
   1b948:	d103      	bne.n	1b952 <stopMotor+0x2e>
   1b94a:	4b22      	ldr	r3, [pc, #136]	; (1b9d4 <stopMotor+0xb0>)
   1b94c:	4798      	blx	r3
   1b94e:	1e03      	subs	r3, r0, #0
   1b950:	d033      	beq.n	1b9ba <stopMotor+0x96>
	{
		singlePhasingTimerOn = false;
   1b952:	4b21      	ldr	r3, [pc, #132]	; (1b9d8 <stopMotor+0xb4>)
   1b954:	2200      	movs	r2, #0
   1b956:	701a      	strb	r2, [r3, #0]
		if (user_settings_parameter_struct.detectMotorFeedback == MOTORFEEDBACK_DETECTION_CURRENT)
   1b958:	4b20      	ldr	r3, [pc, #128]	; (1b9dc <stopMotor+0xb8>)
   1b95a:	2225      	movs	r2, #37	; 0x25
   1b95c:	5c9b      	ldrb	r3, [r3, r2]
   1b95e:	b2db      	uxtb	r3, r3
   1b960:	2b01      	cmp	r3, #1
   1b962:	d105      	bne.n	1b970 <stopMotor+0x4c>
		{
			fdbkRefCurrent = Analog_Parameter_Struct.Motor_Current_IntPart;
   1b964:	4b1e      	ldr	r3, [pc, #120]	; (1b9e0 <stopMotor+0xbc>)
   1b966:	8a9b      	ldrh	r3, [r3, #20]
   1b968:	b29b      	uxth	r3, r3
   1b96a:	b2da      	uxtb	r2, r3
   1b96c:	4b1d      	ldr	r3, [pc, #116]	; (1b9e4 <stopMotor+0xc0>)
   1b96e:	701a      	strb	r2, [r3, #0]
		}
		motorRelatedVoltageBypassOn=false;
   1b970:	4b1d      	ldr	r3, [pc, #116]	; (1b9e8 <stopMotor+0xc4>)
   1b972:	2200      	movs	r2, #0
   1b974:	701a      	strb	r2, [r3, #0]
		STOP_RELAY_OFF;
   1b976:	2100      	movs	r1, #0
   1b978:	202c      	movs	r0, #44	; 0x2c
   1b97a:	4b1c      	ldr	r3, [pc, #112]	; (1b9ec <stopMotor+0xc8>)
   1b97c:	4798      	blx	r3
		stopMotorCommandGiven=true;
   1b97e:	4b1c      	ldr	r3, [pc, #112]	; (1b9f0 <stopMotor+0xcc>)
   1b980:	2201      	movs	r2, #1
   1b982:	701a      	strb	r2, [r3, #0]
		tempStopSequenceTimer = xTaskGetTickCount();
   1b984:	4b1b      	ldr	r3, [pc, #108]	; (1b9f4 <stopMotor+0xd0>)
   1b986:	4798      	blx	r3
   1b988:	0002      	movs	r2, r0
   1b98a:	4b1b      	ldr	r3, [pc, #108]	; (1b9f8 <stopMotor+0xd4>)
   1b98c:	601a      	str	r2, [r3, #0]
		stopSequenceOn = true;
   1b98e:	4b1b      	ldr	r3, [pc, #108]	; (1b9fc <stopMotor+0xd8>)
   1b990:	2201      	movs	r2, #1
   1b992:	701a      	strb	r2, [r3, #0]
		setMotorState(false);
   1b994:	2000      	movs	r0, #0
   1b996:	4b1a      	ldr	r3, [pc, #104]	; (1ba00 <stopMotor+0xdc>)
   1b998:	4798      	blx	r3
		gotOffCommand = commanded;
   1b99a:	4b1a      	ldr	r3, [pc, #104]	; (1ba04 <stopMotor+0xe0>)
   1b99c:	1dfa      	adds	r2, r7, #7
   1b99e:	7812      	ldrb	r2, [r2, #0]
   1b9a0:	701a      	strb	r2, [r3, #0]
		offButtonPressed=offButton;
   1b9a2:	4b19      	ldr	r3, [pc, #100]	; (1ba08 <stopMotor+0xe4>)
   1b9a4:	1d7a      	adds	r2, r7, #5
   1b9a6:	7812      	ldrb	r2, [r2, #0]
   1b9a8:	701a      	strb	r2, [r3, #0]
		if (factory_settings_parameter_struct.ENABLE_CURRENT)
   1b9aa:	4b18      	ldr	r3, [pc, #96]	; (1ba0c <stopMotor+0xe8>)
   1b9ac:	785b      	ldrb	r3, [r3, #1]
   1b9ae:	2b00      	cmp	r3, #0
   1b9b0:	d00b      	beq.n	1b9ca <stopMotor+0xa6>
		{
			lastCurrentReading=CR_NORMAL;			//to make the current readings normal
   1b9b2:	4b17      	ldr	r3, [pc, #92]	; (1ba10 <stopMotor+0xec>)
   1b9b4:	2200      	movs	r2, #0
   1b9b6:	701a      	strb	r2, [r3, #0]
		if (factory_settings_parameter_struct.ENABLE_CURRENT)
   1b9b8:	e007      	b.n	1b9ca <stopMotor+0xa6>
		}
	}
	else
	{
		if (commanded)
   1b9ba:	1dfb      	adds	r3, r7, #7
   1b9bc:	781b      	ldrb	r3, [r3, #0]
   1b9be:	2b00      	cmp	r3, #0
   1b9c0:	d003      	beq.n	1b9ca <stopMotor+0xa6>
		{
			setMotorMGRResponse('-');	//motor is already off
   1b9c2:	202d      	movs	r0, #45	; 0x2d
   1b9c4:	4b13      	ldr	r3, [pc, #76]	; (1ba14 <stopMotor+0xf0>)
   1b9c6:	4798      	blx	r3
		}
	}
}
   1b9c8:	e7ff      	b.n	1b9ca <stopMotor+0xa6>
   1b9ca:	46c0      	nop			; (mov r8, r8)
   1b9cc:	46bd      	mov	sp, r7
   1b9ce:	b003      	add	sp, #12
   1b9d0:	bd90      	pop	{r4, r7, pc}
   1b9d2:	46c0      	nop			; (mov r8, r8)
   1b9d4:	0001b021 	.word	0x0001b021
   1b9d8:	20000991 	.word	0x20000991
   1b9dc:	20000854 	.word	0x20000854
   1b9e0:	200008e8 	.word	0x200008e8
   1b9e4:	200009f4 	.word	0x200009f4
   1b9e8:	20000973 	.word	0x20000973
   1b9ec:	00019689 	.word	0x00019689
   1b9f0:	20000a60 	.word	0x20000a60
   1b9f4:	000201cd 	.word	0x000201cd
   1b9f8:	200009a8 	.word	0x200009a8
   1b9fc:	20000988 	.word	0x20000988
   1ba00:	0001b035 	.word	0x0001b035
   1ba04:	20000a0c 	.word	0x20000a0c
   1ba08:	200009a4 	.word	0x200009a4
   1ba0c:	2000082c 	.word	0x2000082c
   1ba10:	2000097e 	.word	0x2000097e
   1ba14:	00014d3d 	.word	0x00014d3d

0001ba18 <startMotorTimerOver>:

bool startMotorTimerOver(void)
{
   1ba18:	b580      	push	{r7, lr}
   1ba1a:	af00      	add	r7, sp, #0
	return ((xTaskGetTickCount() - tempStartTimer) >= ((uint32_t)user_settings_parameter_struct.autoStartTimeAddress * 1000L));
   1ba1c:	4b09      	ldr	r3, [pc, #36]	; (1ba44 <startMotorTimerOver+0x2c>)
   1ba1e:	4798      	blx	r3
   1ba20:	0002      	movs	r2, r0
   1ba22:	4b09      	ldr	r3, [pc, #36]	; (1ba48 <startMotorTimerOver+0x30>)
   1ba24:	681b      	ldr	r3, [r3, #0]
   1ba26:	1ad1      	subs	r1, r2, r3
   1ba28:	4b08      	ldr	r3, [pc, #32]	; (1ba4c <startMotorTimerOver+0x34>)
   1ba2a:	885b      	ldrh	r3, [r3, #2]
   1ba2c:	b29b      	uxth	r3, r3
   1ba2e:	001a      	movs	r2, r3
   1ba30:	23fa      	movs	r3, #250	; 0xfa
   1ba32:	009b      	lsls	r3, r3, #2
   1ba34:	435a      	muls	r2, r3
   1ba36:	2300      	movs	r3, #0
   1ba38:	4291      	cmp	r1, r2
   1ba3a:	415b      	adcs	r3, r3
   1ba3c:	b2db      	uxtb	r3, r3
}
   1ba3e:	0018      	movs	r0, r3
   1ba40:	46bd      	mov	sp, r7
   1ba42:	bd80      	pop	{r7, pc}
   1ba44:	000201cd 	.word	0x000201cd
   1ba48:	200009a0 	.word	0x200009a0
   1ba4c:	20000854 	.word	0x20000854

0001ba50 <unknownMotorOff>:

void unknownMotorOff(void)
{
   1ba50:	b580      	push	{r7, lr}
   1ba52:	af00      	add	r7, sp, #0
	// waitCheckACTimerOn = false;
	//report to SIM Motor Off due to Unknown Reason
	stopMotor(false,true,false);
   1ba54:	2200      	movs	r2, #0
   1ba56:	2101      	movs	r1, #1
   1ba58:	2000      	movs	r0, #0
   1ba5a:	4b06      	ldr	r3, [pc, #24]	; (1ba74 <unknownMotorOff+0x24>)
   1ba5c:	4798      	blx	r3
	simEventTemp[2] = registerEvent('_');
   1ba5e:	205f      	movs	r0, #95	; 0x5f
   1ba60:	4b05      	ldr	r3, [pc, #20]	; (1ba78 <unknownMotorOff+0x28>)
   1ba62:	4798      	blx	r3
   1ba64:	0003      	movs	r3, r0
   1ba66:	001a      	movs	r2, r3
   1ba68:	4b04      	ldr	r3, [pc, #16]	; (1ba7c <unknownMotorOff+0x2c>)
   1ba6a:	709a      	strb	r2, [r3, #2]
}
   1ba6c:	46c0      	nop			; (mov r8, r8)
   1ba6e:	46bd      	mov	sp, r7
   1ba70:	bd80      	pop	{r7, pc}
   1ba72:	46c0      	nop			; (mov r8, r8)
   1ba74:	0001b925 	.word	0x0001b925
   1ba78:	00014b5d 	.word	0x00014b5d
   1ba7c:	20000918 	.word	0x20000918

0001ba80 <singlePhasingTimerOver>:

bool singlePhasingTimerOver(void)
{
   1ba80:	b580      	push	{r7, lr}
   1ba82:	af00      	add	r7, sp, #0
	return (singlePhasingTimerOn && xTaskGetTickCount() - tempSinglePhasingTimer > (((uint16_t)singlePhasingTime) * 100));
   1ba84:	4b0d      	ldr	r3, [pc, #52]	; (1babc <singlePhasingTimerOver+0x3c>)
   1ba86:	781b      	ldrb	r3, [r3, #0]
   1ba88:	2b00      	cmp	r3, #0
   1ba8a:	d00e      	beq.n	1baaa <singlePhasingTimerOver+0x2a>
   1ba8c:	4b0c      	ldr	r3, [pc, #48]	; (1bac0 <singlePhasingTimerOver+0x40>)
   1ba8e:	4798      	blx	r3
   1ba90:	0002      	movs	r2, r0
   1ba92:	4b0c      	ldr	r3, [pc, #48]	; (1bac4 <singlePhasingTimerOver+0x44>)
   1ba94:	681b      	ldr	r3, [r3, #0]
   1ba96:	1ad3      	subs	r3, r2, r3
   1ba98:	4a0b      	ldr	r2, [pc, #44]	; (1bac8 <singlePhasingTimerOver+0x48>)
   1ba9a:	7812      	ldrb	r2, [r2, #0]
   1ba9c:	0011      	movs	r1, r2
   1ba9e:	2264      	movs	r2, #100	; 0x64
   1baa0:	434a      	muls	r2, r1
   1baa2:	4293      	cmp	r3, r2
   1baa4:	d901      	bls.n	1baaa <singlePhasingTimerOver+0x2a>
   1baa6:	2301      	movs	r3, #1
   1baa8:	e000      	b.n	1baac <singlePhasingTimerOver+0x2c>
   1baaa:	2300      	movs	r3, #0
   1baac:	1c1a      	adds	r2, r3, #0
   1baae:	2301      	movs	r3, #1
   1bab0:	4013      	ands	r3, r2
   1bab2:	b2db      	uxtb	r3, r3
}
   1bab4:	0018      	movs	r0, r3
   1bab6:	46bd      	mov	sp, r7
   1bab8:	bd80      	pop	{r7, pc}
   1baba:	46c0      	nop			; (mov r8, r8)
   1babc:	20000991 	.word	0x20000991
   1bac0:	000201cd 	.word	0x000201cd
   1bac4:	20000978 	.word	0x20000978
   1bac8:	20000970 	.word	0x20000970

0001bacc <operateOnSinglePhasing>:

void operateOnSinglePhasing(void)
{
   1bacc:	b580      	push	{r7, lr}
   1bace:	af00      	add	r7, sp, #0
	THREEPHASE_OK_LED_OFF;
   1bad0:	2101      	movs	r1, #1
   1bad2:	2027      	movs	r0, #39	; 0x27
   1bad4:	4b08      	ldr	r3, [pc, #32]	; (1baf8 <operateOnSinglePhasing+0x2c>)
   1bad6:	4798      	blx	r3
	stopMotor(false,true,false);
   1bad8:	2200      	movs	r2, #0
   1bada:	2101      	movs	r1, #1
   1badc:	2000      	movs	r0, #0
   1bade:	4b07      	ldr	r3, [pc, #28]	; (1bafc <operateOnSinglePhasing+0x30>)
   1bae0:	4798      	blx	r3
	simEventTemp[3] = registerEvent('F');
   1bae2:	2046      	movs	r0, #70	; 0x46
   1bae4:	4b06      	ldr	r3, [pc, #24]	; (1bb00 <operateOnSinglePhasing+0x34>)
   1bae6:	4798      	blx	r3
   1bae8:	0003      	movs	r3, r0
   1baea:	001a      	movs	r2, r3
   1baec:	4b05      	ldr	r3, [pc, #20]	; (1bb04 <operateOnSinglePhasing+0x38>)
   1baee:	70da      	strb	r2, [r3, #3]
}
   1baf0:	46c0      	nop			; (mov r8, r8)
   1baf2:	46bd      	mov	sp, r7
   1baf4:	bd80      	pop	{r7, pc}
   1baf6:	46c0      	nop			; (mov r8, r8)
   1baf8:	00019689 	.word	0x00019689
   1bafc:	0001b925 	.word	0x0001b925
   1bb00:	00014b5d 	.word	0x00014b5d
   1bb04:	20000918 	.word	0x20000918

0001bb08 <terminateStopRelay>:

void terminateStopRelay(void)
{
   1bb08:	b580      	push	{r7, lr}
   1bb0a:	af00      	add	r7, sp, #0
	if (stopSequenceOn && xTaskGetTickCount() - tempStopSequenceTimer > (stopSequenceTimerTime * 100))
   1bb0c:	4b28      	ldr	r3, [pc, #160]	; (1bbb0 <terminateStopRelay+0xa8>)
   1bb0e:	781b      	ldrb	r3, [r3, #0]
   1bb10:	2b00      	cmp	r3, #0
   1bb12:	d04a      	beq.n	1bbaa <terminateStopRelay+0xa2>
   1bb14:	4b27      	ldr	r3, [pc, #156]	; (1bbb4 <terminateStopRelay+0xac>)
   1bb16:	4798      	blx	r3
   1bb18:	0002      	movs	r2, r0
   1bb1a:	4b27      	ldr	r3, [pc, #156]	; (1bbb8 <terminateStopRelay+0xb0>)
   1bb1c:	681b      	ldr	r3, [r3, #0]
   1bb1e:	1ad3      	subs	r3, r2, r3
   1bb20:	4a26      	ldr	r2, [pc, #152]	; (1bbbc <terminateStopRelay+0xb4>)
   1bb22:	7812      	ldrb	r2, [r2, #0]
   1bb24:	0011      	movs	r1, r2
   1bb26:	2264      	movs	r2, #100	; 0x64
   1bb28:	434a      	muls	r2, r1
   1bb2a:	4293      	cmp	r3, r2
   1bb2c:	d93d      	bls.n	1bbaa <terminateStopRelay+0xa2>
	{
		//if ((bool)(user_settings_parameter_struct.autoStartAddress) && getACPowerState())
		//{
		//STOP_RELAY_ON;
		//}
		stopSequenceOn = false;
   1bb2e:	4b20      	ldr	r3, [pc, #128]	; (1bbb0 <terminateStopRelay+0xa8>)
   1bb30:	2200      	movs	r2, #0
   1bb32:	701a      	strb	r2, [r3, #0]
		stopMotorCommandGiven=true;
   1bb34:	4b22      	ldr	r3, [pc, #136]	; (1bbc0 <terminateStopRelay+0xb8>)
   1bb36:	2201      	movs	r2, #1
   1bb38:	701a      	strb	r2, [r3, #0]
		if(!getMotorState_from_pin())															//motor has turned off OR NOT
   1bb3a:	4b22      	ldr	r3, [pc, #136]	; (1bbc4 <terminateStopRelay+0xbc>)
   1bb3c:	4798      	blx	r3
   1bb3e:	0003      	movs	r3, r0
   1bb40:	001a      	movs	r2, r3
   1bb42:	2301      	movs	r3, #1
   1bb44:	4053      	eors	r3, r2
   1bb46:	b2db      	uxtb	r3, r3
   1bb48:	2b00      	cmp	r3, #0
   1bb4a:	d019      	beq.n	1bb80 <terminateStopRelay+0x78>
		{
			if (gotOffCommand)
   1bb4c:	4b1e      	ldr	r3, [pc, #120]	; (1bbc8 <terminateStopRelay+0xc0>)
   1bb4e:	781b      	ldrb	r3, [r3, #0]
   1bb50:	2b00      	cmp	r3, #0
   1bb52:	d006      	beq.n	1bb62 <terminateStopRelay+0x5a>
			{
				gotOffCommand = false;
   1bb54:	4b1c      	ldr	r3, [pc, #112]	; (1bbc8 <terminateStopRelay+0xc0>)
   1bb56:	2200      	movs	r2, #0
   1bb58:	701a      	strb	r2, [r3, #0]
				setMotorMGRResponse('O');		//motor has stopped
   1bb5a:	204f      	movs	r0, #79	; 0x4f
   1bb5c:	4b1b      	ldr	r3, [pc, #108]	; (1bbcc <terminateStopRelay+0xc4>)
   1bb5e:	4798      	blx	r3
   1bb60:	e020      	b.n	1bba4 <terminateStopRelay+0x9c>
			}
			else if(offButtonPressed)
   1bb62:	4b1b      	ldr	r3, [pc, #108]	; (1bbd0 <terminateStopRelay+0xc8>)
   1bb64:	781b      	ldrb	r3, [r3, #0]
   1bb66:	2b00      	cmp	r3, #0
   1bb68:	d01c      	beq.n	1bba4 <terminateStopRelay+0x9c>
			{
				offButtonPressed=false;
   1bb6a:	4b19      	ldr	r3, [pc, #100]	; (1bbd0 <terminateStopRelay+0xc8>)
   1bb6c:	2200      	movs	r2, #0
   1bb6e:	701a      	strb	r2, [r3, #0]
				simEventTemp[8] = registerEvent('O'); //register TO SIM motor has turned off
   1bb70:	204f      	movs	r0, #79	; 0x4f
   1bb72:	4b18      	ldr	r3, [pc, #96]	; (1bbd4 <terminateStopRelay+0xcc>)
   1bb74:	4798      	blx	r3
   1bb76:	0003      	movs	r3, r0
   1bb78:	001a      	movs	r2, r3
   1bb7a:	4b17      	ldr	r3, [pc, #92]	; (1bbd8 <terminateStopRelay+0xd0>)
   1bb7c:	721a      	strb	r2, [r3, #8]
   1bb7e:	e011      	b.n	1bba4 <terminateStopRelay+0x9c>
			}
		}
		else
		{
			if (gotOffCommand)
   1bb80:	4b11      	ldr	r3, [pc, #68]	; (1bbc8 <terminateStopRelay+0xc0>)
   1bb82:	781b      	ldrb	r3, [r3, #0]
   1bb84:	2b00      	cmp	r3, #0
   1bb86:	d006      	beq.n	1bb96 <terminateStopRelay+0x8e>
			{
				gotOffCommand = false;
   1bb88:	4b0f      	ldr	r3, [pc, #60]	; (1bbc8 <terminateStopRelay+0xc0>)
   1bb8a:	2200      	movs	r2, #0
   1bb8c:	701a      	strb	r2, [r3, #0]
				setMotorMGRResponse('P');		//cannot turn off motor
   1bb8e:	2050      	movs	r0, #80	; 0x50
   1bb90:	4b0e      	ldr	r3, [pc, #56]	; (1bbcc <terminateStopRelay+0xc4>)
   1bb92:	4798      	blx	r3
   1bb94:	e006      	b.n	1bba4 <terminateStopRelay+0x9c>
			}
			else
			{
				simEventTemp[1] = registerEvent('P');
   1bb96:	2050      	movs	r0, #80	; 0x50
   1bb98:	4b0e      	ldr	r3, [pc, #56]	; (1bbd4 <terminateStopRelay+0xcc>)
   1bb9a:	4798      	blx	r3
   1bb9c:	0003      	movs	r3, r0
   1bb9e:	001a      	movs	r2, r3
   1bba0:	4b0d      	ldr	r3, [pc, #52]	; (1bbd8 <terminateStopRelay+0xd0>)
   1bba2:	705a      	strb	r2, [r3, #1]
			}
		}
		offButtonPressed=false;
   1bba4:	4b0a      	ldr	r3, [pc, #40]	; (1bbd0 <terminateStopRelay+0xc8>)
   1bba6:	2200      	movs	r2, #0
   1bba8:	701a      	strb	r2, [r3, #0]
	}
}
   1bbaa:	46c0      	nop			; (mov r8, r8)
   1bbac:	46bd      	mov	sp, r7
   1bbae:	bd80      	pop	{r7, pc}
   1bbb0:	20000988 	.word	0x20000988
   1bbb4:	000201cd 	.word	0x000201cd
   1bbb8:	200009a8 	.word	0x200009a8
   1bbbc:	20000a63 	.word	0x20000a63
   1bbc0:	20000a60 	.word	0x20000a60
   1bbc4:	0001b075 	.word	0x0001b075
   1bbc8:	20000a0c 	.word	0x20000a0c
   1bbcc:	00014d3d 	.word	0x00014d3d
   1bbd0:	200009a4 	.word	0x200009a4
   1bbd4:	00014b5d 	.word	0x00014b5d
   1bbd8:	20000918 	.word	0x20000918

0001bbdc <terminateStarDeltaTimer>:

void terminateStarDeltaTimer(void)
{
   1bbdc:	b580      	push	{r7, lr}
   1bbde:	af00      	add	r7, sp, #0
	if(starDeltaTimerOn && xTaskGetTickCount() - tempStartSequenceTimer > ((unsigned long int)(user_settings_parameter_struct.starDeltaTimerAddress) *1000L))
   1bbe0:	4b14      	ldr	r3, [pc, #80]	; (1bc34 <terminateStarDeltaTimer+0x58>)
   1bbe2:	781b      	ldrb	r3, [r3, #0]
   1bbe4:	2b00      	cmp	r3, #0
   1bbe6:	d021      	beq.n	1bc2c <terminateStarDeltaTimer+0x50>
   1bbe8:	4b13      	ldr	r3, [pc, #76]	; (1bc38 <terminateStarDeltaTimer+0x5c>)
   1bbea:	4798      	blx	r3
   1bbec:	0002      	movs	r2, r0
   1bbee:	4b13      	ldr	r3, [pc, #76]	; (1bc3c <terminateStarDeltaTimer+0x60>)
   1bbf0:	681b      	ldr	r3, [r3, #0]
   1bbf2:	1ad2      	subs	r2, r2, r3
   1bbf4:	4b12      	ldr	r3, [pc, #72]	; (1bc40 <terminateStarDeltaTimer+0x64>)
   1bbf6:	88db      	ldrh	r3, [r3, #6]
   1bbf8:	b29b      	uxth	r3, r3
   1bbfa:	0019      	movs	r1, r3
   1bbfc:	23fa      	movs	r3, #250	; 0xfa
   1bbfe:	009b      	lsls	r3, r3, #2
   1bc00:	434b      	muls	r3, r1
   1bc02:	429a      	cmp	r2, r3
   1bc04:	d912      	bls.n	1bc2c <terminateStarDeltaTimer+0x50>
	{
		START_RELAY_OFF;
   1bc06:	2100      	movs	r1, #0
   1bc08:	202d      	movs	r0, #45	; 0x2d
   1bc0a:	4b0e      	ldr	r3, [pc, #56]	; (1bc44 <terminateStarDeltaTimer+0x68>)
   1bc0c:	4798      	blx	r3
		starDeltaTimerOn=false;
   1bc0e:	4b09      	ldr	r3, [pc, #36]	; (1bc34 <terminateStarDeltaTimer+0x58>)
   1bc10:	2200      	movs	r2, #0
   1bc12:	701a      	strb	r2, [r3, #0]
		if (factory_settings_parameter_struct.ENABLE_CURRENT)
   1bc14:	4b0c      	ldr	r3, [pc, #48]	; (1bc48 <terminateStarDeltaTimer+0x6c>)
   1bc16:	785b      	ldrb	r3, [r3, #1]
   1bc18:	2b00      	cmp	r3, #0
   1bc1a:	d007      	beq.n	1bc2c <terminateStarDeltaTimer+0x50>
		{
			enableCurrentBuffer=true;
   1bc1c:	4b0b      	ldr	r3, [pc, #44]	; (1bc4c <terminateStarDeltaTimer+0x70>)
   1bc1e:	2201      	movs	r2, #1
   1bc20:	701a      	strb	r2, [r3, #0]
			tempStartSequenceTimer=xTaskGetTickCount();
   1bc22:	4b05      	ldr	r3, [pc, #20]	; (1bc38 <terminateStarDeltaTimer+0x5c>)
   1bc24:	4798      	blx	r3
   1bc26:	0002      	movs	r2, r0
   1bc28:	4b04      	ldr	r3, [pc, #16]	; (1bc3c <terminateStarDeltaTimer+0x60>)
   1bc2a:	601a      	str	r2, [r3, #0]
		}
	}
}
   1bc2c:	46c0      	nop			; (mov r8, r8)
   1bc2e:	46bd      	mov	sp, r7
   1bc30:	bd80      	pop	{r7, pc}
   1bc32:	46c0      	nop			; (mov r8, r8)
   1bc34:	2000099b 	.word	0x2000099b
   1bc38:	000201cd 	.word	0x000201cd
   1bc3c:	20000994 	.word	0x20000994
   1bc40:	20000854 	.word	0x20000854
   1bc44:	00019689 	.word	0x00019689
   1bc48:	2000082c 	.word	0x2000082c
   1bc4c:	20000960 	.word	0x20000960

0001bc50 <terminateStartRelay>:

void terminateStartRelay(void)
{
   1bc50:	b590      	push	{r4, r7, lr}
   1bc52:	b083      	sub	sp, #12
   1bc54:	af00      	add	r7, sp, #0
	if (startSequenceOn &&  xTaskGetTickCount() - tempStartSequenceTimer > (startSequenceTimerTime * 100))
   1bc56:	4b37      	ldr	r3, [pc, #220]	; (1bd34 <terminateStartRelay+0xe4>)
   1bc58:	781b      	ldrb	r3, [r3, #0]
   1bc5a:	2b00      	cmp	r3, #0
   1bc5c:	d066      	beq.n	1bd2c <terminateStartRelay+0xdc>
   1bc5e:	4b36      	ldr	r3, [pc, #216]	; (1bd38 <terminateStartRelay+0xe8>)
   1bc60:	4798      	blx	r3
   1bc62:	0002      	movs	r2, r0
   1bc64:	4b35      	ldr	r3, [pc, #212]	; (1bd3c <terminateStartRelay+0xec>)
   1bc66:	681b      	ldr	r3, [r3, #0]
   1bc68:	1ad3      	subs	r3, r2, r3
   1bc6a:	4a35      	ldr	r2, [pc, #212]	; (1bd40 <terminateStartRelay+0xf0>)
   1bc6c:	7812      	ldrb	r2, [r2, #0]
   1bc6e:	0011      	movs	r1, r2
   1bc70:	2264      	movs	r2, #100	; 0x64
   1bc72:	434a      	muls	r2, r1
   1bc74:	4293      	cmp	r3, r2
   1bc76:	d959      	bls.n	1bd2c <terminateStartRelay+0xdc>
	{
		if((((uint32_t)user_settings_parameter_struct.starDeltaTimerAddress) * 1000L) <= (((uint32_t)startSequenceTimerTime)*100))
   1bc78:	4b32      	ldr	r3, [pc, #200]	; (1bd44 <terminateStartRelay+0xf4>)
   1bc7a:	88db      	ldrh	r3, [r3, #6]
   1bc7c:	b29b      	uxth	r3, r3
   1bc7e:	001a      	movs	r2, r3
   1bc80:	23fa      	movs	r3, #250	; 0xfa
   1bc82:	009b      	lsls	r3, r3, #2
   1bc84:	435a      	muls	r2, r3
   1bc86:	4b2e      	ldr	r3, [pc, #184]	; (1bd40 <terminateStartRelay+0xf0>)
   1bc88:	781b      	ldrb	r3, [r3, #0]
   1bc8a:	0019      	movs	r1, r3
   1bc8c:	2364      	movs	r3, #100	; 0x64
   1bc8e:	434b      	muls	r3, r1
   1bc90:	429a      	cmp	r2, r3
   1bc92:	d810      	bhi.n	1bcb6 <terminateStartRelay+0x66>
		{
			START_RELAY_OFF;
   1bc94:	2100      	movs	r1, #0
   1bc96:	202d      	movs	r0, #45	; 0x2d
   1bc98:	4b2b      	ldr	r3, [pc, #172]	; (1bd48 <terminateStartRelay+0xf8>)
   1bc9a:	4798      	blx	r3
			tempStartSequenceTimer=xTaskGetTickCount();
   1bc9c:	4b26      	ldr	r3, [pc, #152]	; (1bd38 <terminateStartRelay+0xe8>)
   1bc9e:	4798      	blx	r3
   1bca0:	0002      	movs	r2, r0
   1bca2:	4b26      	ldr	r3, [pc, #152]	; (1bd3c <terminateStartRelay+0xec>)
   1bca4:	601a      	str	r2, [r3, #0]
			if (factory_settings_parameter_struct.ENABLE_CURRENT)
   1bca6:	4b29      	ldr	r3, [pc, #164]	; (1bd4c <terminateStartRelay+0xfc>)
   1bca8:	785b      	ldrb	r3, [r3, #1]
   1bcaa:	2b00      	cmp	r3, #0
   1bcac:	d006      	beq.n	1bcbc <terminateStartRelay+0x6c>
			{
				enableCurrentBuffer=true;
   1bcae:	4b28      	ldr	r3, [pc, #160]	; (1bd50 <terminateStartRelay+0x100>)
   1bcb0:	2201      	movs	r2, #1
   1bcb2:	701a      	strb	r2, [r3, #0]
   1bcb4:	e002      	b.n	1bcbc <terminateStartRelay+0x6c>
			}
		}
		else
		{
			starDeltaTimerOn=true;
   1bcb6:	4b27      	ldr	r3, [pc, #156]	; (1bd54 <terminateStartRelay+0x104>)
   1bcb8:	2201      	movs	r2, #1
   1bcba:	701a      	strb	r2, [r3, #0]
		}
		startSequenceOn = false;
   1bcbc:	4b1d      	ldr	r3, [pc, #116]	; (1bd34 <terminateStartRelay+0xe4>)
   1bcbe:	2200      	movs	r2, #0
   1bcc0:	701a      	strb	r2, [r3, #0]
		bool motor = getMotorState_from_pin();
   1bcc2:	1dfc      	adds	r4, r7, #7
   1bcc4:	4b24      	ldr	r3, [pc, #144]	; (1bd58 <terminateStartRelay+0x108>)
   1bcc6:	4798      	blx	r3
   1bcc8:	0003      	movs	r3, r0
   1bcca:	7023      	strb	r3, [r4, #0]
		if (gotOnCommand)
   1bccc:	4b23      	ldr	r3, [pc, #140]	; (1bd5c <terminateStartRelay+0x10c>)
   1bcce:	781b      	ldrb	r3, [r3, #0]
   1bcd0:	2b00      	cmp	r3, #0
   1bcd2:	d013      	beq.n	1bcfc <terminateStartRelay+0xac>
		{
			gotOnCommand = false;
   1bcd4:	4b21      	ldr	r3, [pc, #132]	; (1bd5c <terminateStartRelay+0x10c>)
   1bcd6:	2200      	movs	r2, #0
   1bcd8:	701a      	strb	r2, [r3, #0]
			if (motor)
   1bcda:	1dfb      	adds	r3, r7, #7
   1bcdc:	781b      	ldrb	r3, [r3, #0]
   1bcde:	2b00      	cmp	r3, #0
   1bce0:	d003      	beq.n	1bcea <terminateStartRelay+0x9a>
			{
				setMotorMGRResponse('S'); // motor has started
   1bce2:	2053      	movs	r0, #83	; 0x53
   1bce4:	4b1e      	ldr	r3, [pc, #120]	; (1bd60 <terminateStartRelay+0x110>)
   1bce6:	4798      	blx	r3
				stopMotor(false,true,false);
				simEventTemp[0] = registerEvent('N');//register To SIM motor not started due to ANY REASON
			}
		}
	}
}
   1bce8:	e020      	b.n	1bd2c <terminateStartRelay+0xdc>
				stopMotor(false,true,false);
   1bcea:	2200      	movs	r2, #0
   1bcec:	2101      	movs	r1, #1
   1bcee:	2000      	movs	r0, #0
   1bcf0:	4b1c      	ldr	r3, [pc, #112]	; (1bd64 <terminateStartRelay+0x114>)
   1bcf2:	4798      	blx	r3
				setMotorMGRResponse('N');	//cannot start motor due to some problem
   1bcf4:	204e      	movs	r0, #78	; 0x4e
   1bcf6:	4b1a      	ldr	r3, [pc, #104]	; (1bd60 <terminateStartRelay+0x110>)
   1bcf8:	4798      	blx	r3
}
   1bcfa:	e017      	b.n	1bd2c <terminateStartRelay+0xdc>
			if (motor)
   1bcfc:	1dfb      	adds	r3, r7, #7
   1bcfe:	781b      	ldrb	r3, [r3, #0]
   1bd00:	2b00      	cmp	r3, #0
   1bd02:	d007      	beq.n	1bd14 <terminateStartRelay+0xc4>
				simEventTemp[7] = registerEvent('S');// ;//register To SIM Motor has started
   1bd04:	2053      	movs	r0, #83	; 0x53
   1bd06:	4b18      	ldr	r3, [pc, #96]	; (1bd68 <terminateStartRelay+0x118>)
   1bd08:	4798      	blx	r3
   1bd0a:	0003      	movs	r3, r0
   1bd0c:	001a      	movs	r2, r3
   1bd0e:	4b17      	ldr	r3, [pc, #92]	; (1bd6c <terminateStartRelay+0x11c>)
   1bd10:	71da      	strb	r2, [r3, #7]
}
   1bd12:	e00b      	b.n	1bd2c <terminateStartRelay+0xdc>
				stopMotor(false,true,false);
   1bd14:	2200      	movs	r2, #0
   1bd16:	2101      	movs	r1, #1
   1bd18:	2000      	movs	r0, #0
   1bd1a:	4b12      	ldr	r3, [pc, #72]	; (1bd64 <terminateStartRelay+0x114>)
   1bd1c:	4798      	blx	r3
				simEventTemp[0] = registerEvent('N');//register To SIM motor not started due to ANY REASON
   1bd1e:	204e      	movs	r0, #78	; 0x4e
   1bd20:	4b11      	ldr	r3, [pc, #68]	; (1bd68 <terminateStartRelay+0x118>)
   1bd22:	4798      	blx	r3
   1bd24:	0003      	movs	r3, r0
   1bd26:	001a      	movs	r2, r3
   1bd28:	4b10      	ldr	r3, [pc, #64]	; (1bd6c <terminateStartRelay+0x11c>)
   1bd2a:	701a      	strb	r2, [r3, #0]
}
   1bd2c:	46c0      	nop			; (mov r8, r8)
   1bd2e:	46bd      	mov	sp, r7
   1bd30:	b003      	add	sp, #12
   1bd32:	bd90      	pop	{r4, r7, pc}
   1bd34:	20000999 	.word	0x20000999
   1bd38:	000201cd 	.word	0x000201cd
   1bd3c:	20000994 	.word	0x20000994
   1bd40:	20000a18 	.word	0x20000a18
   1bd44:	20000854 	.word	0x20000854
   1bd48:	00019689 	.word	0x00019689
   1bd4c:	2000082c 	.word	0x2000082c
   1bd50:	20000960 	.word	0x20000960
   1bd54:	2000099b 	.word	0x2000099b
   1bd58:	0001b075 	.word	0x0001b075
   1bd5c:	20000914 	.word	0x20000914
   1bd60:	00014d3d 	.word	0x00014d3d
   1bd64:	0001b925 	.word	0x0001b925
   1bd68:	00014b5d 	.word	0x00014b5d
   1bd6c:	20000918 	.word	0x20000918

0001bd70 <statusOnCall>:

void statusOnCall(void)
{
   1bd70:	b590      	push	{r4, r7, lr}
   1bd72:	b083      	sub	sp, #12
   1bd74:	af00      	add	r7, sp, #0
	char status[5];
	uint8_t index=0;
   1bd76:	1dfb      	adds	r3, r7, #7
   1bd78:	2200      	movs	r2, #0
   1bd7a:	701a      	strb	r2, [r3, #0]
	uint8_t b = checkLineSensors();
   1bd7c:	1dbc      	adds	r4, r7, #6
   1bd7e:	4b3b      	ldr	r3, [pc, #236]	; (1be6c <statusOnCall+0xfc>)
   1bd80:	4798      	blx	r3
   1bd82:	0003      	movs	r3, r0
   1bd84:	7023      	strb	r3, [r4, #0]
	if (b == AC_OFF)
   1bd86:	1dbb      	adds	r3, r7, #6
   1bd88:	781b      	ldrb	r3, [r3, #0]
   1bd8a:	2b00      	cmp	r3, #0
   1bd8c:	d109      	bne.n	1bda2 <statusOnCall+0x32>
	{
		status[index++]='L';
   1bd8e:	1dfb      	adds	r3, r7, #7
   1bd90:	781b      	ldrb	r3, [r3, #0]
   1bd92:	1dfa      	adds	r2, r7, #7
   1bd94:	1c59      	adds	r1, r3, #1
   1bd96:	7011      	strb	r1, [r2, #0]
   1bd98:	001a      	movs	r2, r3
   1bd9a:	003b      	movs	r3, r7
   1bd9c:	214c      	movs	r1, #76	; 0x4c
   1bd9e:	5499      	strb	r1, [r3, r2]
   1bda0:	e03b      	b.n	1be1a <statusOnCall+0xaa>
		// sim1->setMotorMGRResponse('L');	//motor off, no light
	}
	else if (b == AC_2PH)	//power only in 2 phase
   1bda2:	1dbb      	adds	r3, r7, #6
   1bda4:	781b      	ldrb	r3, [r3, #0]
   1bda6:	2b02      	cmp	r3, #2
   1bda8:	d109      	bne.n	1bdbe <statusOnCall+0x4e>
	{
		status[index++]='A';
   1bdaa:	1dfb      	adds	r3, r7, #7
   1bdac:	781b      	ldrb	r3, [r3, #0]
   1bdae:	1dfa      	adds	r2, r7, #7
   1bdb0:	1c59      	adds	r1, r3, #1
   1bdb2:	7011      	strb	r1, [r2, #0]
   1bdb4:	001a      	movs	r2, r3
   1bdb6:	003b      	movs	r3, r7
   1bdb8:	2141      	movs	r1, #65	; 0x41
   1bdba:	5499      	strb	r1, [r3, r2]
   1bdbc:	e02d      	b.n	1be1a <statusOnCall+0xaa>
		// sim1->setMotorMGRResponse('A');
	}
	else if (b == AC_3PH)
   1bdbe:	1dbb      	adds	r3, r7, #6
   1bdc0:	781b      	ldrb	r3, [r3, #0]
   1bdc2:	2b03      	cmp	r3, #3
   1bdc4:	d129      	bne.n	1be1a <statusOnCall+0xaa>
	{
		bool temp = getMotorState_from_pin();
   1bdc6:	1d7c      	adds	r4, r7, #5
   1bdc8:	4b29      	ldr	r3, [pc, #164]	; (1be70 <statusOnCall+0x100>)
   1bdca:	4798      	blx	r3
   1bdcc:	0003      	movs	r3, r0
   1bdce:	7023      	strb	r3, [r4, #0]
		if (temp)
   1bdd0:	1d7b      	adds	r3, r7, #5
   1bdd2:	781b      	ldrb	r3, [r3, #0]
   1bdd4:	2b00      	cmp	r3, #0
   1bdd6:	d009      	beq.n	1bdec <statusOnCall+0x7c>
		{
			status[index++]='+';
   1bdd8:	1dfb      	adds	r3, r7, #7
   1bdda:	781b      	ldrb	r3, [r3, #0]
   1bddc:	1dfa      	adds	r2, r7, #7
   1bdde:	1c59      	adds	r1, r3, #1
   1bde0:	7011      	strb	r1, [r2, #0]
   1bde2:	001a      	movs	r2, r3
   1bde4:	003b      	movs	r3, r7
   1bde6:	212b      	movs	r1, #43	; 0x2b
   1bde8:	5499      	strb	r1, [r3, r2]
   1bdea:	e016      	b.n	1be1a <statusOnCall+0xaa>
			// sim1->setMotorMGRResponse('+');	//motor is on
		}
		else
		{
			status[index++]='_';
   1bdec:	1dfb      	adds	r3, r7, #7
   1bdee:	781b      	ldrb	r3, [r3, #0]
   1bdf0:	1dfa      	adds	r2, r7, #7
   1bdf2:	1c59      	adds	r1, r3, #1
   1bdf4:	7011      	strb	r1, [r2, #0]
   1bdf6:	001a      	movs	r2, r3
   1bdf8:	003b      	movs	r3, r7
   1bdfa:	215f      	movs	r1, #95	; 0x5f
   1bdfc:	5499      	strb	r1, [r3, r2]
			
			//Play File for Wrong Phase Sequence if phase seq is wrong
			if(structThreePhase_state.u8t_phase_sequence_flag !=THREEPHASE_OK)					//3 phase sequence is incorrect
   1bdfe:	4b1d      	ldr	r3, [pc, #116]	; (1be74 <statusOnCall+0x104>)
   1be00:	781b      	ldrb	r3, [r3, #0]
   1be02:	b2db      	uxtb	r3, r3
   1be04:	2b02      	cmp	r3, #2
   1be06:	d008      	beq.n	1be1a <statusOnCall+0xaa>
			{
				//todo: replace A(single Phasing) in below statement with Character for Wrong Phase Sequence Event
				status[index++]='A';
   1be08:	1dfb      	adds	r3, r7, #7
   1be0a:	781b      	ldrb	r3, [r3, #0]
   1be0c:	1dfa      	adds	r2, r7, #7
   1be0e:	1c59      	adds	r1, r3, #1
   1be10:	7011      	strb	r1, [r2, #0]
   1be12:	001a      	movs	r2, r3
   1be14:	003b      	movs	r3, r7
   1be16:	2141      	movs	r1, #65	; 0x41
   1be18:	5499      	strb	r1, [r3, r2]

			// sim1->setMotorMGRResponse('_');	//motor off, light on
		}
	}

	if(user_settings_parameter_struct.autoStartAddress)
   1be1a:	4b17      	ldr	r3, [pc, #92]	; (1be78 <statusOnCall+0x108>)
   1be1c:	785b      	ldrb	r3, [r3, #1]
   1be1e:	b2db      	uxtb	r3, r3
   1be20:	2b00      	cmp	r3, #0
   1be22:	d009      	beq.n	1be38 <statusOnCall+0xc8>
	{
		status[index++]=')';
   1be24:	1dfb      	adds	r3, r7, #7
   1be26:	781b      	ldrb	r3, [r3, #0]
   1be28:	1dfa      	adds	r2, r7, #7
   1be2a:	1c59      	adds	r1, r3, #1
   1be2c:	7011      	strb	r1, [r2, #0]
   1be2e:	001a      	movs	r2, r3
   1be30:	003b      	movs	r3, r7
   1be32:	2129      	movs	r1, #41	; 0x29
   1be34:	5499      	strb	r1, [r3, r2]
   1be36:	e008      	b.n	1be4a <statusOnCall+0xda>
	}
	else
	{
		status[index++]='[';
   1be38:	1dfb      	adds	r3, r7, #7
   1be3a:	781b      	ldrb	r3, [r3, #0]
   1be3c:	1dfa      	adds	r2, r7, #7
   1be3e:	1c59      	adds	r1, r3, #1
   1be40:	7011      	strb	r1, [r2, #0]
   1be42:	001a      	movs	r2, r3
   1be44:	003b      	movs	r3, r7
   1be46:	215b      	movs	r1, #91	; 0x5b
   1be48:	5499      	strb	r1, [r3, r2]
	}
	
	status[index++]='\0';
   1be4a:	1dfb      	adds	r3, r7, #7
   1be4c:	781b      	ldrb	r3, [r3, #0]
   1be4e:	1dfa      	adds	r2, r7, #7
   1be50:	1c59      	adds	r1, r3, #1
   1be52:	7011      	strb	r1, [r2, #0]
   1be54:	001a      	movs	r2, r3
   1be56:	003b      	movs	r3, r7
   1be58:	2100      	movs	r1, #0
   1be5a:	5499      	strb	r1, [r3, r2]

	playRepeatedFiles(status);
   1be5c:	003b      	movs	r3, r7
   1be5e:	0018      	movs	r0, r3
   1be60:	4b06      	ldr	r3, [pc, #24]	; (1be7c <statusOnCall+0x10c>)
   1be62:	4798      	blx	r3
}
   1be64:	46c0      	nop			; (mov r8, r8)
   1be66:	46bd      	mov	sp, r7
   1be68:	b003      	add	sp, #12
   1be6a:	bd90      	pop	{r4, r7, pc}
   1be6c:	0001b59d 	.word	0x0001b59d
   1be70:	0001b075 	.word	0x0001b075
   1be74:	20000948 	.word	0x20000948
   1be78:	20000854 	.word	0x20000854
   1be7c:	000149f9 	.word	0x000149f9

0001be80 <voltageOnCall>:

void voltageOnCall(void)
{
   1be80:	b590      	push	{r4, r7, lr}
   1be82:	b087      	sub	sp, #28
   1be84:	af02      	add	r7, sp, #8
	char voltFiles[13];
	//change the below string seq to speak R Y B instead of 0
	sprintf(voltFiles,"]%lu{%lu}%lu",Analog_Parameter_Struct.PhaseRY_Voltage,Analog_Parameter_Struct.PhaseYB_Voltage,Analog_Parameter_Struct.PhaseBR_Voltage);
   1be86:	4b0a      	ldr	r3, [pc, #40]	; (1beb0 <voltageOnCall+0x30>)
   1be88:	681a      	ldr	r2, [r3, #0]
   1be8a:	4b09      	ldr	r3, [pc, #36]	; (1beb0 <voltageOnCall+0x30>)
   1be8c:	685c      	ldr	r4, [r3, #4]
   1be8e:	4b08      	ldr	r3, [pc, #32]	; (1beb0 <voltageOnCall+0x30>)
   1be90:	689b      	ldr	r3, [r3, #8]
   1be92:	4908      	ldr	r1, [pc, #32]	; (1beb4 <voltageOnCall+0x34>)
   1be94:	0038      	movs	r0, r7
   1be96:	9300      	str	r3, [sp, #0]
   1be98:	0023      	movs	r3, r4
   1be9a:	4c07      	ldr	r4, [pc, #28]	; (1beb8 <voltageOnCall+0x38>)
   1be9c:	47a0      	blx	r4
	playRepeatedFiles(voltFiles);
   1be9e:	003b      	movs	r3, r7
   1bea0:	0018      	movs	r0, r3
   1bea2:	4b06      	ldr	r3, [pc, #24]	; (1bebc <voltageOnCall+0x3c>)
   1bea4:	4798      	blx	r3
}
   1bea6:	46c0      	nop			; (mov r8, r8)
   1bea8:	46bd      	mov	sp, r7
   1beaa:	b005      	add	sp, #20
   1beac:	bd90      	pop	{r4, r7, pc}
   1beae:	46c0      	nop			; (mov r8, r8)
   1beb0:	200008e8 	.word	0x200008e8
   1beb4:	0002a78c 	.word	0x0002a78c
   1beb8:	00028d5d 	.word	0x00028d5d
   1bebc:	000149f9 	.word	0x000149f9

0001bec0 <setM2MEventState>:

void setM2MEventState(uint8_t eventNo, uint8_t state)
{
   1bec0:	b580      	push	{r7, lr}
   1bec2:	b082      	sub	sp, #8
   1bec4:	af00      	add	r7, sp, #0
   1bec6:	0002      	movs	r2, r0
   1bec8:	1dfb      	adds	r3, r7, #7
   1beca:	701a      	strb	r2, [r3, #0]
   1becc:	1dbb      	adds	r3, r7, #6
   1bece:	1c0a      	adds	r2, r1, #0
   1bed0:	701a      	strb	r2, [r3, #0]
	if(m2mEvent_arr[eventNo]==ME_SERVICING)
   1bed2:	1dfb      	adds	r3, r7, #7
   1bed4:	781b      	ldrb	r3, [r3, #0]
   1bed6:	4a0e      	ldr	r2, [pc, #56]	; (1bf10 <setM2MEventState+0x50>)
   1bed8:	5cd3      	ldrb	r3, [r2, r3]
   1beda:	2b02      	cmp	r3, #2
   1bedc:	d10e      	bne.n	1befc <setM2MEventState+0x3c>
	{
		if(state==ME_NOTAVAILABLE)
   1bede:	1dbb      	adds	r3, r7, #6
   1bee0:	781b      	ldrb	r3, [r3, #0]
   1bee2:	2b03      	cmp	r3, #3
   1bee4:	d10a      	bne.n	1befc <setM2MEventState+0x3c>
		{
			state=ME_CLEARED;
   1bee6:	1dbb      	adds	r3, r7, #6
   1bee8:	2200      	movs	r2, #0
   1beea:	701a      	strb	r2, [r3, #0]
			simEventTemp[mapTable[eventNo]]=false;	//regsiter relevant Normal Event
   1beec:	1dfb      	adds	r3, r7, #7
   1beee:	781b      	ldrb	r3, [r3, #0]
   1bef0:	4a08      	ldr	r2, [pc, #32]	; (1bf14 <setM2MEventState+0x54>)
   1bef2:	5cd3      	ldrb	r3, [r2, r3]
   1bef4:	001a      	movs	r2, r3
   1bef6:	4b08      	ldr	r3, [pc, #32]	; (1bf18 <setM2MEventState+0x58>)
   1bef8:	2100      	movs	r1, #0
   1befa:	5499      	strb	r1, [r3, r2]
		}
	}
	m2mEvent_arr[eventNo]=state;
   1befc:	1dfb      	adds	r3, r7, #7
   1befe:	781b      	ldrb	r3, [r3, #0]
   1bf00:	4a03      	ldr	r2, [pc, #12]	; (1bf10 <setM2MEventState+0x50>)
   1bf02:	1db9      	adds	r1, r7, #6
   1bf04:	7809      	ldrb	r1, [r1, #0]
   1bf06:	54d1      	strb	r1, [r2, r3]
}
   1bf08:	46c0      	nop			; (mov r8, r8)
   1bf0a:	46bd      	mov	sp, r7
   1bf0c:	b002      	add	sp, #8
   1bf0e:	bd80      	pop	{r7, pc}
   1bf10:	200009c0 	.word	0x200009c0
   1bf14:	20000940 	.word	0x20000940
   1bf18:	20000918 	.word	0x20000918

0001bf1c <M2MEventManager>:

void M2MEventManager(void)
{
   1bf1c:	b580      	push	{r7, lr}
   1bf1e:	b082      	sub	sp, #8
   1bf20:	af00      	add	r7, sp, #0
	uint8_t j=2;
   1bf22:	1dfb      	adds	r3, r7, #7
   1bf24:	2202      	movs	r2, #2
   1bf26:	701a      	strb	r2, [r3, #0]
	while(j--)
   1bf28:	e00a      	b.n	1bf40 <M2MEventManager+0x24>
	{
		if(m2mEvent_arr[j]==ME_WAITREGISTER)
   1bf2a:	1dfb      	adds	r3, r7, #7
   1bf2c:	781b      	ldrb	r3, [r3, #0]
   1bf2e:	4a0a      	ldr	r2, [pc, #40]	; (1bf58 <M2MEventManager+0x3c>)
   1bf30:	5cd3      	ldrb	r3, [r2, r3]
   1bf32:	2b01      	cmp	r3, #1
   1bf34:	d104      	bne.n	1bf40 <M2MEventManager+0x24>
		{
			registerM2MEvent(j);
   1bf36:	1dfb      	adds	r3, r7, #7
   1bf38:	781b      	ldrb	r3, [r3, #0]
   1bf3a:	0018      	movs	r0, r3
   1bf3c:	4b07      	ldr	r3, [pc, #28]	; (1bf5c <M2MEventManager+0x40>)
   1bf3e:	4798      	blx	r3
	while(j--)
   1bf40:	1dfb      	adds	r3, r7, #7
   1bf42:	781b      	ldrb	r3, [r3, #0]
   1bf44:	1dfa      	adds	r2, r7, #7
   1bf46:	1e59      	subs	r1, r3, #1
   1bf48:	7011      	strb	r1, [r2, #0]
   1bf4a:	2b00      	cmp	r3, #0
   1bf4c:	d1ed      	bne.n	1bf2a <M2MEventManager+0xe>
		}
	}
}
   1bf4e:	46c0      	nop			; (mov r8, r8)
   1bf50:	46bd      	mov	sp, r7
   1bf52:	b002      	add	sp, #8
   1bf54:	bd80      	pop	{r7, pc}
   1bf56:	46c0      	nop			; (mov r8, r8)
   1bf58:	200009c0 	.word	0x200009c0
   1bf5c:	00014c81 	.word	0x00014c81

0001bf60 <SIMEventManager>:

void SIMEventManager(void)
{
   1bf60:	b590      	push	{r4, r7, lr}
   1bf62:	b083      	sub	sp, #12
   1bf64:	af00      	add	r7, sp, #0
	uint8_t i = 0;
   1bf66:	1dfb      	adds	r3, r7, #7
   1bf68:	2200      	movs	r2, #0
   1bf6a:	701a      	strb	r2, [r3, #0]
	if (factory_settings_parameter_struct.ENABLE_WATER)
   1bf6c:	4b1e      	ldr	r3, [pc, #120]	; (1bfe8 <SIMEventManager+0x88>)
   1bf6e:	795b      	ldrb	r3, [r3, #5]
   1bf70:	2b00      	cmp	r3, #0
   1bf72:	d00b      	beq.n	1bf8c <SIMEventManager+0x2c>
	{
		if (factory_settings_parameter_struct.ENABLE_GP)
   1bf74:	4b1c      	ldr	r3, [pc, #112]	; (1bfe8 <SIMEventManager+0x88>)
   1bf76:	791b      	ldrb	r3, [r3, #4]
   1bf78:	2b00      	cmp	r3, #0
   1bf7a:	d003      	beq.n	1bf84 <SIMEventManager+0x24>
		{
			i = 19;
   1bf7c:	1dfb      	adds	r3, r7, #7
   1bf7e:	2213      	movs	r2, #19
   1bf80:	701a      	strb	r2, [r3, #0]
   1bf82:	e025      	b.n	1bfd0 <SIMEventManager+0x70>
		}
		else
		{
			i = 17;
   1bf84:	1dfb      	adds	r3, r7, #7
   1bf86:	2211      	movs	r2, #17
   1bf88:	701a      	strb	r2, [r3, #0]
   1bf8a:	e021      	b.n	1bfd0 <SIMEventManager+0x70>
		}
	}
	else
	{
		if (factory_settings_parameter_struct.ENABLE_CURRENT)
   1bf8c:	4b16      	ldr	r3, [pc, #88]	; (1bfe8 <SIMEventManager+0x88>)
   1bf8e:	785b      	ldrb	r3, [r3, #1]
   1bf90:	2b00      	cmp	r3, #0
   1bf92:	d003      	beq.n	1bf9c <SIMEventManager+0x3c>
		{
			i = 14;
   1bf94:	1dfb      	adds	r3, r7, #7
   1bf96:	220e      	movs	r2, #14
   1bf98:	701a      	strb	r2, [r3, #0]
   1bf9a:	e019      	b.n	1bfd0 <SIMEventManager+0x70>
		}
		else
		{
			i = 12;
   1bf9c:	1dfb      	adds	r3, r7, #7
   1bf9e:	220c      	movs	r2, #12
   1bfa0:	701a      	strb	r2, [r3, #0]
		}
	}
	
	while(i--)
   1bfa2:	e015      	b.n	1bfd0 <SIMEventManager+0x70>
	{
		if (!simEventTemp[i])
   1bfa4:	1dfb      	adds	r3, r7, #7
   1bfa6:	781b      	ldrb	r3, [r3, #0]
   1bfa8:	4a10      	ldr	r2, [pc, #64]	; (1bfec <SIMEventManager+0x8c>)
   1bfaa:	5cd3      	ldrb	r3, [r2, r3]
   1bfac:	2201      	movs	r2, #1
   1bfae:	4053      	eors	r3, r2
   1bfb0:	b2db      	uxtb	r3, r3
   1bfb2:	2b00      	cmp	r3, #0
   1bfb4:	d00c      	beq.n	1bfd0 <SIMEventManager+0x70>
		simEventTemp[i] = registerEvent(simEvent[i]);
   1bfb6:	1dfb      	adds	r3, r7, #7
   1bfb8:	781c      	ldrb	r4, [r3, #0]
   1bfba:	1dfb      	adds	r3, r7, #7
   1bfbc:	781b      	ldrb	r3, [r3, #0]
   1bfbe:	4a0c      	ldr	r2, [pc, #48]	; (1bff0 <SIMEventManager+0x90>)
   1bfc0:	5cd3      	ldrb	r3, [r2, r3]
   1bfc2:	0018      	movs	r0, r3
   1bfc4:	4b0b      	ldr	r3, [pc, #44]	; (1bff4 <SIMEventManager+0x94>)
   1bfc6:	4798      	blx	r3
   1bfc8:	0003      	movs	r3, r0
   1bfca:	001a      	movs	r2, r3
   1bfcc:	4b07      	ldr	r3, [pc, #28]	; (1bfec <SIMEventManager+0x8c>)
   1bfce:	551a      	strb	r2, [r3, r4]
	while(i--)
   1bfd0:	1dfb      	adds	r3, r7, #7
   1bfd2:	781b      	ldrb	r3, [r3, #0]
   1bfd4:	1dfa      	adds	r2, r7, #7
   1bfd6:	1e59      	subs	r1, r3, #1
   1bfd8:	7011      	strb	r1, [r2, #0]
   1bfda:	2b00      	cmp	r3, #0
   1bfdc:	d1e2      	bne.n	1bfa4 <SIMEventManager+0x44>
	}
}
   1bfde:	46c0      	nop			; (mov r8, r8)
   1bfe0:	46bd      	mov	sp, r7
   1bfe2:	b003      	add	sp, #12
   1bfe4:	bd90      	pop	{r4, r7, pc}
   1bfe6:	46c0      	nop			; (mov r8, r8)
   1bfe8:	2000082c 	.word	0x2000082c
   1bfec:	20000918 	.word	0x20000918
   1bff0:	200009f8 	.word	0x200009f8
   1bff4:	00014b5d 	.word	0x00014b5d

0001bff8 <MotorVoltageBypassTimerOver>:

bool MotorVoltageBypassTimerOver(void)
{
   1bff8:	b580      	push	{r7, lr}
   1bffa:	af00      	add	r7, sp, #0
	return ((xTaskGetTickCount()-motorVoltageBypassTimerTime) > user_settings_parameter_struct.motorVoltageBypassTime);
   1bffc:	4b07      	ldr	r3, [pc, #28]	; (1c01c <MotorVoltageBypassTimerOver+0x24>)
   1bffe:	4798      	blx	r3
   1c000:	0002      	movs	r2, r0
   1c002:	4b07      	ldr	r3, [pc, #28]	; (1c020 <MotorVoltageBypassTimerOver+0x28>)
   1c004:	681b      	ldr	r3, [r3, #0]
   1c006:	1ad2      	subs	r2, r2, r3
   1c008:	4b06      	ldr	r3, [pc, #24]	; (1c024 <MotorVoltageBypassTimerOver+0x2c>)
   1c00a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1c00c:	4293      	cmp	r3, r2
   1c00e:	419b      	sbcs	r3, r3
   1c010:	425b      	negs	r3, r3
   1c012:	b2db      	uxtb	r3, r3
}
   1c014:	0018      	movs	r0, r3
   1c016:	46bd      	mov	sp, r7
   1c018:	bd80      	pop	{r7, pc}
   1c01a:	46c0      	nop			; (mov r8, r8)
   1c01c:	000201cd 	.word	0x000201cd
   1c020:	20000984 	.word	0x20000984
   1c024:	20000854 	.word	0x20000854

0001c028 <checkCurrentConsumption>:


void checkCurrentConsumption(void)
{
   1c028:	b580      	push	{r7, lr}
   1c02a:	b084      	sub	sp, #16
   1c02c:	af00      	add	r7, sp, #0
	if(startSequenceOn || stopSequenceOn || !getMotorState() || !(user_settings_parameter_struct.currentDetectionAddress) || starDeltaTimerOn)
   1c02e:	4b70      	ldr	r3, [pc, #448]	; (1c1f0 <checkCurrentConsumption+0x1c8>)
   1c030:	781b      	ldrb	r3, [r3, #0]
   1c032:	2b00      	cmp	r3, #0
   1c034:	d000      	beq.n	1c038 <checkCurrentConsumption+0x10>
   1c036:	e0d6      	b.n	1c1e6 <checkCurrentConsumption+0x1be>
   1c038:	4b6e      	ldr	r3, [pc, #440]	; (1c1f4 <checkCurrentConsumption+0x1cc>)
   1c03a:	781b      	ldrb	r3, [r3, #0]
   1c03c:	2b00      	cmp	r3, #0
   1c03e:	d000      	beq.n	1c042 <checkCurrentConsumption+0x1a>
   1c040:	e0d1      	b.n	1c1e6 <checkCurrentConsumption+0x1be>
   1c042:	4b6d      	ldr	r3, [pc, #436]	; (1c1f8 <checkCurrentConsumption+0x1d0>)
   1c044:	4798      	blx	r3
   1c046:	0003      	movs	r3, r0
   1c048:	001a      	movs	r2, r3
   1c04a:	2301      	movs	r3, #1
   1c04c:	4053      	eors	r3, r2
   1c04e:	b2db      	uxtb	r3, r3
   1c050:	2b00      	cmp	r3, #0
   1c052:	d000      	beq.n	1c056 <checkCurrentConsumption+0x2e>
   1c054:	e0c7      	b.n	1c1e6 <checkCurrentConsumption+0x1be>
   1c056:	4b69      	ldr	r3, [pc, #420]	; (1c1fc <checkCurrentConsumption+0x1d4>)
   1c058:	7bdb      	ldrb	r3, [r3, #15]
   1c05a:	b2db      	uxtb	r3, r3
   1c05c:	2b00      	cmp	r3, #0
   1c05e:	d100      	bne.n	1c062 <checkCurrentConsumption+0x3a>
   1c060:	e0c1      	b.n	1c1e6 <checkCurrentConsumption+0x1be>
   1c062:	4b67      	ldr	r3, [pc, #412]	; (1c200 <checkCurrentConsumption+0x1d8>)
   1c064:	781b      	ldrb	r3, [r3, #0]
   1c066:	2b00      	cmp	r3, #0
   1c068:	d000      	beq.n	1c06c <checkCurrentConsumption+0x44>
   1c06a:	e0bc      	b.n	1c1e6 <checkCurrentConsumption+0x1be>
	{
		return;
	}
	//|| ((xTaskGetTickCount()-lastCurrentReadingTime)<500))
	
	if(enableCurrentBuffer && xTaskGetTickCount()-tempStartSequenceTimer>30000)
   1c06c:	4b65      	ldr	r3, [pc, #404]	; (1c204 <checkCurrentConsumption+0x1dc>)
   1c06e:	781b      	ldrb	r3, [r3, #0]
   1c070:	2b00      	cmp	r3, #0
   1c072:	d00b      	beq.n	1c08c <checkCurrentConsumption+0x64>
   1c074:	4b64      	ldr	r3, [pc, #400]	; (1c208 <checkCurrentConsumption+0x1e0>)
   1c076:	4798      	blx	r3
   1c078:	0002      	movs	r2, r0
   1c07a:	4b64      	ldr	r3, [pc, #400]	; (1c20c <checkCurrentConsumption+0x1e4>)
   1c07c:	681b      	ldr	r3, [r3, #0]
   1c07e:	1ad3      	subs	r3, r2, r3
   1c080:	4a63      	ldr	r2, [pc, #396]	; (1c210 <checkCurrentConsumption+0x1e8>)
   1c082:	4293      	cmp	r3, r2
   1c084:	d902      	bls.n	1c08c <checkCurrentConsumption+0x64>
	{
		enableCurrentBuffer=false;
   1c086:	4b5f      	ldr	r3, [pc, #380]	; (1c204 <checkCurrentConsumption+0x1dc>)
   1c088:	2200      	movs	r2, #0
   1c08a:	701a      	strb	r2, [r3, #0]
	//{
	//ADCcurrent = Read_ADC0(ADC_POSITIVE_INPUT_PIN16,200);
	//xSemaphoreGive(xADC_Semaphore);
	//}
	
	uint32_t temp=0;
   1c08c:	2300      	movs	r3, #0
   1c08e:	60fb      	str	r3, [r7, #12]
	if(user_settings_parameter_struct.over_under_DetectionMethod== MOTOR_UNDEROVER_DETECTION_POWER)
   1c090:	4b5a      	ldr	r3, [pc, #360]	; (1c1fc <checkCurrentConsumption+0x1d4>)
   1c092:	2226      	movs	r2, #38	; 0x26
   1c094:	5c9b      	ldrb	r3, [r3, r2]
   1c096:	b2db      	uxtb	r3, r3
   1c098:	2b01      	cmp	r3, #1
   1c09a:	d103      	bne.n	1c0a4 <checkCurrentConsumption+0x7c>
	{
		temp = Analog_Parameter_Struct.Motor_Power;
   1c09c:	4b5d      	ldr	r3, [pc, #372]	; (1c214 <checkCurrentConsumption+0x1ec>)
   1c09e:	6a1b      	ldr	r3, [r3, #32]
   1c0a0:	60fb      	str	r3, [r7, #12]
   1c0a2:	e002      	b.n	1c0aa <checkCurrentConsumption+0x82>
	}
	else
	{
		temp = Analog_Parameter_Struct.Motor_Current;
   1c0a4:	4b5b      	ldr	r3, [pc, #364]	; (1c214 <checkCurrentConsumption+0x1ec>)
   1c0a6:	691b      	ldr	r3, [r3, #16]
   1c0a8:	60fb      	str	r3, [r7, #12]
	}
	
	uint32_t overLoadDetectValue=12000;
   1c0aa:	4b5b      	ldr	r3, [pc, #364]	; (1c218 <checkCurrentConsumption+0x1f0>)
   1c0ac:	60bb      	str	r3, [r7, #8]
	
	uint8_t temp2;
	
	if(enableCurrentBuffer && temp>(user_settings_parameter_struct.normalLoadAddress<<1))    //more than double  <<1 gives mulile of 2 value (double the orignal value)
   1c0ae:	4b55      	ldr	r3, [pc, #340]	; (1c204 <checkCurrentConsumption+0x1dc>)
   1c0b0:	781b      	ldrb	r3, [r3, #0]
   1c0b2:	2b00      	cmp	r3, #0
   1c0b4:	d00b      	beq.n	1c0ce <checkCurrentConsumption+0xa6>
   1c0b6:	4b51      	ldr	r3, [pc, #324]	; (1c1fc <checkCurrentConsumption+0x1d4>)
   1c0b8:	691b      	ldr	r3, [r3, #16]
   1c0ba:	005a      	lsls	r2, r3, #1
   1c0bc:	68fb      	ldr	r3, [r7, #12]
   1c0be:	429a      	cmp	r2, r3
   1c0c0:	d205      	bcs.n	1c0ce <checkCurrentConsumption+0xa6>
	{
		temp2 = CR_OVER2;
   1c0c2:	1dfb      	adds	r3, r7, #7
   1c0c4:	2202      	movs	r2, #2
   1c0c6:	701a      	strb	r2, [r3, #0]
		overLoadDetectValue=18000;
   1c0c8:	4b54      	ldr	r3, [pc, #336]	; (1c21c <checkCurrentConsumption+0x1f4>)
   1c0ca:	60bb      	str	r3, [r7, #8]
   1c0cc:	e050      	b.n	1c170 <checkCurrentConsumption+0x148>
	}
	else if(!enableCurrentBuffer && temp>(user_settings_parameter_struct.normalLoadAddress<<1))			//more than double
   1c0ce:	4b4d      	ldr	r3, [pc, #308]	; (1c204 <checkCurrentConsumption+0x1dc>)
   1c0d0:	781b      	ldrb	r3, [r3, #0]
   1c0d2:	2201      	movs	r2, #1
   1c0d4:	4053      	eors	r3, r2
   1c0d6:	b2db      	uxtb	r3, r3
   1c0d8:	2b00      	cmp	r3, #0
   1c0da:	d00c      	beq.n	1c0f6 <checkCurrentConsumption+0xce>
   1c0dc:	4b47      	ldr	r3, [pc, #284]	; (1c1fc <checkCurrentConsumption+0x1d4>)
   1c0de:	691b      	ldr	r3, [r3, #16]
   1c0e0:	005a      	lsls	r2, r3, #1
   1c0e2:	68fb      	ldr	r3, [r7, #12]
   1c0e4:	429a      	cmp	r2, r3
   1c0e6:	d206      	bcs.n	1c0f6 <checkCurrentConsumption+0xce>
	{
		temp2 = CR_OVER;
   1c0e8:	1dfb      	adds	r3, r7, #7
   1c0ea:	2201      	movs	r2, #1
   1c0ec:	701a      	strb	r2, [r3, #0]
		overLoadDetectValue=overLoadDetectValue>>2;
   1c0ee:	68bb      	ldr	r3, [r7, #8]
   1c0f0:	089b      	lsrs	r3, r3, #2
   1c0f2:	60bb      	str	r3, [r7, #8]
   1c0f4:	e03c      	b.n	1c170 <checkCurrentConsumption+0x148>
	}
	else if(!enableCurrentBuffer && temp> (user_settings_parameter_struct.normalLoadAddress+(user_settings_parameter_struct.normalLoadAddress>>1))) // more than 1.5
   1c0f6:	4b43      	ldr	r3, [pc, #268]	; (1c204 <checkCurrentConsumption+0x1dc>)
   1c0f8:	781b      	ldrb	r3, [r3, #0]
   1c0fa:	2201      	movs	r2, #1
   1c0fc:	4053      	eors	r3, r2
   1c0fe:	b2db      	uxtb	r3, r3
   1c100:	2b00      	cmp	r3, #0
   1c102:	d00f      	beq.n	1c124 <checkCurrentConsumption+0xfc>
   1c104:	4b3d      	ldr	r3, [pc, #244]	; (1c1fc <checkCurrentConsumption+0x1d4>)
   1c106:	691a      	ldr	r2, [r3, #16]
   1c108:	4b3c      	ldr	r3, [pc, #240]	; (1c1fc <checkCurrentConsumption+0x1d4>)
   1c10a:	691b      	ldr	r3, [r3, #16]
   1c10c:	085b      	lsrs	r3, r3, #1
   1c10e:	18d2      	adds	r2, r2, r3
   1c110:	68fb      	ldr	r3, [r7, #12]
   1c112:	429a      	cmp	r2, r3
   1c114:	d206      	bcs.n	1c124 <checkCurrentConsumption+0xfc>
	{
		temp2 = CR_OVER;
   1c116:	1dfb      	adds	r3, r7, #7
   1c118:	2201      	movs	r2, #1
   1c11a:	701a      	strb	r2, [r3, #0]
		overLoadDetectValue=overLoadDetectValue>>1;
   1c11c:	68bb      	ldr	r3, [r7, #8]
   1c11e:	085b      	lsrs	r3, r3, #1
   1c120:	60bb      	str	r3, [r7, #8]
   1c122:	e025      	b.n	1c170 <checkCurrentConsumption+0x148>
	}
	else if (!enableCurrentBuffer && temp>user_settings_parameter_struct.overloadAddress)		// more than 1.25 to 1.5
   1c124:	4b37      	ldr	r3, [pc, #220]	; (1c204 <checkCurrentConsumption+0x1dc>)
   1c126:	781b      	ldrb	r3, [r3, #0]
   1c128:	2201      	movs	r2, #1
   1c12a:	4053      	eors	r3, r2
   1c12c:	b2db      	uxtb	r3, r3
   1c12e:	2b00      	cmp	r3, #0
   1c130:	d008      	beq.n	1c144 <checkCurrentConsumption+0x11c>
   1c132:	4b32      	ldr	r3, [pc, #200]	; (1c1fc <checkCurrentConsumption+0x1d4>)
   1c134:	695a      	ldr	r2, [r3, #20]
   1c136:	68fb      	ldr	r3, [r7, #12]
   1c138:	429a      	cmp	r2, r3
   1c13a:	d203      	bcs.n	1c144 <checkCurrentConsumption+0x11c>
	{
		temp2 = CR_OVER;
   1c13c:	1dfb      	adds	r3, r7, #7
   1c13e:	2201      	movs	r2, #1
   1c140:	701a      	strb	r2, [r3, #0]
   1c142:	e015      	b.n	1c170 <checkCurrentConsumption+0x148>
	}
	else if(!enableCurrentBuffer && temp < user_settings_parameter_struct.underloadAddress)		// only consider noLoad after 30 secs
   1c144:	4b2f      	ldr	r3, [pc, #188]	; (1c204 <checkCurrentConsumption+0x1dc>)
   1c146:	781b      	ldrb	r3, [r3, #0]
   1c148:	2201      	movs	r2, #1
   1c14a:	4053      	eors	r3, r2
   1c14c:	b2db      	uxtb	r3, r3
   1c14e:	2b00      	cmp	r3, #0
   1c150:	d00b      	beq.n	1c16a <checkCurrentConsumption+0x142>
   1c152:	4b2a      	ldr	r3, [pc, #168]	; (1c1fc <checkCurrentConsumption+0x1d4>)
   1c154:	699a      	ldr	r2, [r3, #24]
   1c156:	68fb      	ldr	r3, [r7, #12]
   1c158:	429a      	cmp	r2, r3
   1c15a:	d906      	bls.n	1c16a <checkCurrentConsumption+0x142>
	{
		temp2 = CR_UNDER;
   1c15c:	1dfb      	adds	r3, r7, #7
   1c15e:	2202      	movs	r2, #2
   1c160:	701a      	strb	r2, [r3, #0]
		overLoadDetectValue=overLoadDetectValue>>2;
   1c162:	68bb      	ldr	r3, [r7, #8]
   1c164:	089b      	lsrs	r3, r3, #2
   1c166:	60bb      	str	r3, [r7, #8]
   1c168:	e002      	b.n	1c170 <checkCurrentConsumption+0x148>
	//temp2 = CR_UNDER;
	//overLoadDetectValue=overLoadDetectValue>>2;
	//}
	else
	{
		temp2= CR_NORMAL;
   1c16a:	1dfb      	adds	r3, r7, #7
   1c16c:	2200      	movs	r2, #0
   1c16e:	701a      	strb	r2, [r3, #0]
	}
	if(lastCurrentReading == temp2)
   1c170:	4b2b      	ldr	r3, [pc, #172]	; (1c220 <checkCurrentConsumption+0x1f8>)
   1c172:	781b      	ldrb	r3, [r3, #0]
   1c174:	1dfa      	adds	r2, r7, #7
   1c176:	7812      	ldrb	r2, [r2, #0]
   1c178:	429a      	cmp	r2, r3
   1c17a:	d12a      	bne.n	1c1d2 <checkCurrentConsumption+0x1aa>
	{
		if(xTaskGetTickCount()-currentEventFilterTempTime>overLoadDetectValue)
   1c17c:	4b22      	ldr	r3, [pc, #136]	; (1c208 <checkCurrentConsumption+0x1e0>)
   1c17e:	4798      	blx	r3
   1c180:	0002      	movs	r2, r0
   1c182:	4b28      	ldr	r3, [pc, #160]	; (1c224 <checkCurrentConsumption+0x1fc>)
   1c184:	681b      	ldr	r3, [r3, #0]
   1c186:	1ad2      	subs	r2, r2, r3
   1c188:	68bb      	ldr	r3, [r7, #8]
   1c18a:	429a      	cmp	r2, r3
   1c18c:	d92c      	bls.n	1c1e8 <checkCurrentConsumption+0x1c0>
		{
			if(temp2==CR_OVER)
   1c18e:	1dfb      	adds	r3, r7, #7
   1c190:	781b      	ldrb	r3, [r3, #0]
   1c192:	2b01      	cmp	r3, #1
   1c194:	d10c      	bne.n	1c1b0 <checkCurrentConsumption+0x188>
			{
				stopMotor(false,true,false);
   1c196:	2200      	movs	r2, #0
   1c198:	2101      	movs	r1, #1
   1c19a:	2000      	movs	r0, #0
   1c19c:	4b22      	ldr	r3, [pc, #136]	; (1c228 <checkCurrentConsumption+0x200>)
   1c19e:	4798      	blx	r3
				simEventTemp[12] = registerEvent('B');			//register overload Event
   1c1a0:	2042      	movs	r0, #66	; 0x42
   1c1a2:	4b22      	ldr	r3, [pc, #136]	; (1c22c <checkCurrentConsumption+0x204>)
   1c1a4:	4798      	blx	r3
   1c1a6:	0003      	movs	r3, r0
   1c1a8:	001a      	movs	r2, r3
   1c1aa:	4b21      	ldr	r3, [pc, #132]	; (1c230 <checkCurrentConsumption+0x208>)
   1c1ac:	731a      	strb	r2, [r3, #12]
   1c1ae:	e01b      	b.n	1c1e8 <checkCurrentConsumption+0x1c0>
			}
			else if(temp2==CR_UNDER)
   1c1b0:	1dfb      	adds	r3, r7, #7
   1c1b2:	781b      	ldrb	r3, [r3, #0]
   1c1b4:	2b02      	cmp	r3, #2
   1c1b6:	d117      	bne.n	1c1e8 <checkCurrentConsumption+0x1c0>
			{
				stopMotor(false,true,false);
   1c1b8:	2200      	movs	r2, #0
   1c1ba:	2101      	movs	r1, #1
   1c1bc:	2000      	movs	r0, #0
   1c1be:	4b1a      	ldr	r3, [pc, #104]	; (1c228 <checkCurrentConsumption+0x200>)
   1c1c0:	4798      	blx	r3
				simEventTemp[13] = registerEvent('J');			// register Underload Event
   1c1c2:	204a      	movs	r0, #74	; 0x4a
   1c1c4:	4b19      	ldr	r3, [pc, #100]	; (1c22c <checkCurrentConsumption+0x204>)
   1c1c6:	4798      	blx	r3
   1c1c8:	0003      	movs	r3, r0
   1c1ca:	001a      	movs	r2, r3
   1c1cc:	4b18      	ldr	r3, [pc, #96]	; (1c230 <checkCurrentConsumption+0x208>)
   1c1ce:	735a      	strb	r2, [r3, #13]
   1c1d0:	e00a      	b.n	1c1e8 <checkCurrentConsumption+0x1c0>
			}
		}
	}
	else
	{
		currentEventFilterTempTime = xTaskGetTickCount();
   1c1d2:	4b0d      	ldr	r3, [pc, #52]	; (1c208 <checkCurrentConsumption+0x1e0>)
   1c1d4:	4798      	blx	r3
   1c1d6:	0002      	movs	r2, r0
   1c1d8:	4b12      	ldr	r3, [pc, #72]	; (1c224 <checkCurrentConsumption+0x1fc>)
   1c1da:	601a      	str	r2, [r3, #0]
		lastCurrentReading=temp2;
   1c1dc:	4b10      	ldr	r3, [pc, #64]	; (1c220 <checkCurrentConsumption+0x1f8>)
   1c1de:	1dfa      	adds	r2, r7, #7
   1c1e0:	7812      	ldrb	r2, [r2, #0]
   1c1e2:	701a      	strb	r2, [r3, #0]
   1c1e4:	e000      	b.n	1c1e8 <checkCurrentConsumption+0x1c0>
		return;
   1c1e6:	46c0      	nop			; (mov r8, r8)
	}
}
   1c1e8:	46bd      	mov	sp, r7
   1c1ea:	b004      	add	sp, #16
   1c1ec:	bd80      	pop	{r7, pc}
   1c1ee:	46c0      	nop			; (mov r8, r8)
   1c1f0:	20000999 	.word	0x20000999
   1c1f4:	20000988 	.word	0x20000988
   1c1f8:	0001b021 	.word	0x0001b021
   1c1fc:	20000854 	.word	0x20000854
   1c200:	2000099b 	.word	0x2000099b
   1c204:	20000960 	.word	0x20000960
   1c208:	000201cd 	.word	0x000201cd
   1c20c:	20000994 	.word	0x20000994
   1c210:	00007530 	.word	0x00007530
   1c214:	200008e8 	.word	0x200008e8
   1c218:	00002ee0 	.word	0x00002ee0
   1c21c:	00004650 	.word	0x00004650
   1c220:	2000097e 	.word	0x2000097e
   1c224:	2000096c 	.word	0x2000096c
   1c228:	0001b925 	.word	0x0001b925
   1c22c:	00014b5d 	.word	0x00014b5d
   1c230:	20000918 	.word	0x20000918

0001c234 <button_detect_pin_callback>:

static void button_detect_pin_callback(void)
{
   1c234:	b580      	push	{r7, lr}
   1c236:	af00      	add	r7, sp, #0
	buttonEventOccured = true;
   1c238:	4b02      	ldr	r3, [pc, #8]	; (1c244 <button_detect_pin_callback+0x10>)
   1c23a:	2201      	movs	r2, #1
   1c23c:	701a      	strb	r2, [r3, #0]
	//	xTaskNotifyGive(fiftymsTask);
}
   1c23e:	46c0      	nop			; (mov r8, r8)
   1c240:	46bd      	mov	sp, r7
   1c242:	bd80      	pop	{r7, pc}
   1c244:	2000099f 	.word	0x2000099f

0001c248 <vTask_MOTORCONTROL>:

static void vTask_MOTORCONTROL(void *params)
{
   1c248:	b590      	push	{r4, r7, lr}
   1c24a:	b087      	sub	sp, #28
   1c24c:	af00      	add	r7, sp, #0
   1c24e:	6078      	str	r0, [r7, #4]
	UNUSED(params);
	
	Configure_ADC0();
   1c250:	4bd2      	ldr	r3, [pc, #840]	; (1c59c <vTask_MOTORCONTROL+0x354>)
   1c252:	4798      	blx	r3
	
	configure_ac();
   1c254:	4bd2      	ldr	r3, [pc, #840]	; (1c5a0 <vTask_MOTORCONTROL+0x358>)
   1c256:	4798      	blx	r3
	//configure_rtc();
	//configure_event();
	
	//////////////////////////////////////////////////////////////////////////
	gotOffCommand = false;
   1c258:	4bd2      	ldr	r3, [pc, #840]	; (1c5a4 <vTask_MOTORCONTROL+0x35c>)
   1c25a:	2200      	movs	r2, #0
   1c25c:	701a      	strb	r2, [r3, #0]
	gotOnCommand = false;
   1c25e:	4bd2      	ldr	r3, [pc, #840]	; (1c5a8 <vTask_MOTORCONTROL+0x360>)
   1c260:	2200      	movs	r2, #0
   1c262:	701a      	strb	r2, [r3, #0]

	//////////////////////////////////////////////////////////////////////////
	eventOccured = false;
   1c264:	4bd1      	ldr	r3, [pc, #836]	; (1c5ac <vTask_MOTORCONTROL+0x364>)
   1c266:	2200      	movs	r2, #0
   1c268:	701a      	strb	r2, [r3, #0]
	
	uint8_t last_comparison = AC_CHAN_STATUS_UNKNOWN;
   1c26a:	2315      	movs	r3, #21
   1c26c:	18fb      	adds	r3, r7, r3
   1c26e:	2201      	movs	r2, #1
   1c270:	701a      	strb	r2, [r3, #0]
	
	//sets the variable to store current ticks, so that we can delay first event operation
	uint32_t delayForFirstEvent = xTaskGetTickCount();
   1c272:	4bcf      	ldr	r3, [pc, #828]	; (1c5b0 <vTask_MOTORCONTROL+0x368>)
   1c274:	4798      	blx	r3
   1c276:	0003      	movs	r3, r0
   1c278:	613b      	str	r3, [r7, #16]
	firstEvent = true;
   1c27a:	4bce      	ldr	r3, [pc, #824]	; (1c5b4 <vTask_MOTORCONTROL+0x36c>)
   1c27c:	2201      	movs	r2, #1
   1c27e:	701a      	strb	r2, [r3, #0]
	
	last_comparison = ac_chan_get_status(&ac_instance,AC_CHAN_CHANNEL_0);
   1c280:	2315      	movs	r3, #21
   1c282:	18fc      	adds	r4, r7, r3
   1c284:	4bcc      	ldr	r3, [pc, #816]	; (1c5b8 <vTask_MOTORCONTROL+0x370>)
   1c286:	2100      	movs	r1, #0
   1c288:	0018      	movs	r0, r3
   1c28a:	4bcc      	ldr	r3, [pc, #816]	; (1c5bc <vTask_MOTORCONTROL+0x374>)
   1c28c:	4798      	blx	r3
   1c28e:	0003      	movs	r3, r0
   1c290:	7023      	strb	r3, [r4, #0]
	vTaskDelay(500/portTICK_PERIOD_MS);
   1c292:	23fa      	movs	r3, #250	; 0xfa
   1c294:	005b      	lsls	r3, r3, #1
   1c296:	0018      	movs	r0, r3
   1c298:	4bc9      	ldr	r3, [pc, #804]	; (1c5c0 <vTask_MOTORCONTROL+0x378>)
   1c29a:	4798      	blx	r3
	last_comparison = ac_chan_get_status(&ac_instance,AC_CHAN_CHANNEL_0); //read again
   1c29c:	2315      	movs	r3, #21
   1c29e:	18fc      	adds	r4, r7, r3
   1c2a0:	4bc5      	ldr	r3, [pc, #788]	; (1c5b8 <vTask_MOTORCONTROL+0x370>)
   1c2a2:	2100      	movs	r1, #0
   1c2a4:	0018      	movs	r0, r3
   1c2a6:	4bc5      	ldr	r3, [pc, #788]	; (1c5bc <vTask_MOTORCONTROL+0x374>)
   1c2a8:	4798      	blx	r3
   1c2aa:	0003      	movs	r3, r0
   1c2ac:	7023      	strb	r3, [r4, #0]
	
	if (last_comparison & AC_CHAN_STATUS_POS_ABOVE_NEG)
   1c2ae:	2315      	movs	r3, #21
   1c2b0:	18fb      	adds	r3, r7, r3
   1c2b2:	781b      	ldrb	r3, [r3, #0]
   1c2b4:	2204      	movs	r2, #4
   1c2b6:	4013      	ands	r3, r2
   1c2b8:	d003      	beq.n	1c2c2 <vTask_MOTORCONTROL+0x7a>
	{
		isACpowerAvailable = true;
   1c2ba:	4bc2      	ldr	r3, [pc, #776]	; (1c5c4 <vTask_MOTORCONTROL+0x37c>)
   1c2bc:	2201      	movs	r2, #1
   1c2be:	701a      	strb	r2, [r3, #0]
   1c2c0:	e002      	b.n	1c2c8 <vTask_MOTORCONTROL+0x80>
	}
	else
	{
		isACpowerAvailable = false;
   1c2c2:	4bc0      	ldr	r3, [pc, #768]	; (1c5c4 <vTask_MOTORCONTROL+0x37c>)
   1c2c4:	2200      	movs	r2, #0
   1c2c6:	701a      	strb	r2, [r3, #0]
	}
	
	current_three_phase_state = AC_OFF;
   1c2c8:	4bbf      	ldr	r3, [pc, #764]	; (1c5c8 <vTask_MOTORCONTROL+0x380>)
   1c2ca:	2200      	movs	r2, #0
   1c2cc:	701a      	strb	r2, [r3, #0]
	//////////////////////////////////////////////////////////////////////////
	
	stopMotorCommandGiven=false;
   1c2ce:	4bbf      	ldr	r3, [pc, #764]	; (1c5cc <vTask_MOTORCONTROL+0x384>)
   1c2d0:	2200      	movs	r2, #0
   1c2d2:	701a      	strb	r2, [r3, #0]
	motorFeedbackEvent = false;
   1c2d4:	4bbe      	ldr	r3, [pc, #760]	; (1c5d0 <vTask_MOTORCONTROL+0x388>)
   1c2d6:	2200      	movs	r2, #0
   1c2d8:	701a      	strb	r2, [r3, #0]
	
	startTimerOn = false;
   1c2da:	4bbe      	ldr	r3, [pc, #760]	; (1c5d4 <vTask_MOTORCONTROL+0x38c>)
   1c2dc:	2200      	movs	r2, #0
   1c2de:	701a      	strb	r2, [r3, #0]

	waitStableLineTime = 50;
   1c2e0:	4bbd      	ldr	r3, [pc, #756]	; (1c5d8 <vTask_MOTORCONTROL+0x390>)
   1c2e2:	2232      	movs	r2, #50	; 0x32
   1c2e4:	701a      	strb	r2, [r3, #0]
	waitStableLineOn = false;
   1c2e6:	4bbd      	ldr	r3, [pc, #756]	; (1c5dc <vTask_MOTORCONTROL+0x394>)
   1c2e8:	2200      	movs	r2, #0
   1c2ea:	701a      	strb	r2, [r3, #0]
	
	singlePhasingTime = 6;
   1c2ec:	4bbc      	ldr	r3, [pc, #752]	; (1c5e0 <vTask_MOTORCONTROL+0x398>)
   1c2ee:	2206      	movs	r2, #6
   1c2f0:	701a      	strb	r2, [r3, #0]
	singlePhasingTimerOn = false;
   1c2f2:	4bbc      	ldr	r3, [pc, #752]	; (1c5e4 <vTask_MOTORCONTROL+0x39c>)
   1c2f4:	2200      	movs	r2, #0
   1c2f6:	701a      	strb	r2, [r3, #0]

	startSequenceTimerTime = 20;
   1c2f8:	4bbb      	ldr	r3, [pc, #748]	; (1c5e8 <vTask_MOTORCONTROL+0x3a0>)
   1c2fa:	2214      	movs	r2, #20
   1c2fc:	701a      	strb	r2, [r3, #0]
	starDeltaTimerOn=false;
   1c2fe:	4bbb      	ldr	r3, [pc, #748]	; (1c5ec <vTask_MOTORCONTROL+0x3a4>)
   1c300:	2200      	movs	r2, #0
   1c302:	701a      	strb	r2, [r3, #0]
	startSequenceOn = false;
   1c304:	4bba      	ldr	r3, [pc, #744]	; (1c5f0 <vTask_MOTORCONTROL+0x3a8>)
   1c306:	2200      	movs	r2, #0
   1c308:	701a      	strb	r2, [r3, #0]

	stopSequenceTimerTime = 20;
   1c30a:	4bba      	ldr	r3, [pc, #744]	; (1c5f4 <vTask_MOTORCONTROL+0x3ac>)
   1c30c:	2214      	movs	r2, #20
   1c30e:	701a      	strb	r2, [r3, #0]
	stopSequenceOn = false;
   1c310:	4bb9      	ldr	r3, [pc, #740]	; (1c5f8 <vTask_MOTORCONTROL+0x3b0>)
   1c312:	2200      	movs	r2, #0
   1c314:	701a      	strb	r2, [r3, #0]
	
	setAllPhaseState(false); // allPhase = false;
   1c316:	2000      	movs	r0, #0
   1c318:	4bb8      	ldr	r3, [pc, #736]	; (1c5fc <vTask_MOTORCONTROL+0x3b4>)
   1c31a:	4798      	blx	r3
	setMotorState(false);// mFeedback = false;
   1c31c:	2000      	movs	r0, #0
   1c31e:	4bb8      	ldr	r3, [pc, #736]	; (1c600 <vTask_MOTORCONTROL+0x3b8>)
   1c320:	4798      	blx	r3
	setACPowerState(false);//  phaseAC = false;
   1c322:	2000      	movs	r0, #0
   1c324:	4bb7      	ldr	r3, [pc, #732]	; (1c604 <vTask_MOTORCONTROL+0x3bc>)
   1c326:	4798      	blx	r3

	initPhaseRMStruct(&struct_rmsRY);
   1c328:	4bb7      	ldr	r3, [pc, #732]	; (1c608 <vTask_MOTORCONTROL+0x3c0>)
   1c32a:	0018      	movs	r0, r3
   1c32c:	4bb7      	ldr	r3, [pc, #732]	; (1c60c <vTask_MOTORCONTROL+0x3c4>)
   1c32e:	4798      	blx	r3
	initPhaseRMStruct(&struct_rmsYB);
   1c330:	4bb7      	ldr	r3, [pc, #732]	; (1c610 <vTask_MOTORCONTROL+0x3c8>)
   1c332:	0018      	movs	r0, r3
   1c334:	4bb5      	ldr	r3, [pc, #724]	; (1c60c <vTask_MOTORCONTROL+0x3c4>)
   1c336:	4798      	blx	r3
	initPhaseRMStruct(&struct_rmsBR);
   1c338:	4bb6      	ldr	r3, [pc, #728]	; (1c614 <vTask_MOTORCONTROL+0x3cc>)
   1c33a:	0018      	movs	r0, r3
   1c33c:	4bb3      	ldr	r3, [pc, #716]	; (1c60c <vTask_MOTORCONTROL+0x3c4>)
   1c33e:	4798      	blx	r3
	
	lastPressTime=0;
   1c340:	4bb5      	ldr	r3, [pc, #724]	; (1c618 <vTask_MOTORCONTROL+0x3d0>)
   1c342:	2200      	movs	r2, #0
   1c344:	601a      	str	r2, [r3, #0]
	lastButtonEvent=0;
   1c346:	4bb5      	ldr	r3, [pc, #724]	; (1c61c <vTask_MOTORCONTROL+0x3d4>)
   1c348:	2200      	movs	r2, #0
   1c34a:	701a      	strb	r2, [r3, #0]

	motorRelatedVoltageBypassOn=false;
   1c34c:	4bb4      	ldr	r3, [pc, #720]	; (1c620 <vTask_MOTORCONTROL+0x3d8>)
   1c34e:	2200      	movs	r2, #0
   1c350:	701a      	strb	r2, [r3, #0]
	motorVoltageBypassTimerTime= 0;
   1c352:	4bb4      	ldr	r3, [pc, #720]	; (1c624 <vTask_MOTORCONTROL+0x3dc>)
   1c354:	2200      	movs	r2, #0
   1c356:	601a      	str	r2, [r3, #0]
	
	uint8_t i= 0;
   1c358:	2317      	movs	r3, #23
   1c35a:	18fb      	adds	r3, r7, r3
   1c35c:	2200      	movs	r2, #0
   1c35e:	701a      	strb	r2, [r3, #0]
	if (factory_settings_parameter_struct.ENABLE_CURRENT)
   1c360:	4bb1      	ldr	r3, [pc, #708]	; (1c628 <vTask_MOTORCONTROL+0x3e0>)
   1c362:	785b      	ldrb	r3, [r3, #1]
   1c364:	2b00      	cmp	r3, #0
   1c366:	d004      	beq.n	1c372 <vTask_MOTORCONTROL+0x12a>
	{
		i=14;
   1c368:	2317      	movs	r3, #23
   1c36a:	18fb      	adds	r3, r7, r3
   1c36c:	220e      	movs	r2, #14
   1c36e:	701a      	strb	r2, [r3, #0]
   1c370:	e00a      	b.n	1c388 <vTask_MOTORCONTROL+0x140>
	}
	else
	{
		i = 12;
   1c372:	2317      	movs	r3, #23
   1c374:	18fb      	adds	r3, r7, r3
   1c376:	220c      	movs	r2, #12
   1c378:	701a      	strb	r2, [r3, #0]
	}
	while(i--)
   1c37a:	e005      	b.n	1c388 <vTask_MOTORCONTROL+0x140>
	{
		simEventTemp[i] = true;
   1c37c:	2317      	movs	r3, #23
   1c37e:	18fb      	adds	r3, r7, r3
   1c380:	781b      	ldrb	r3, [r3, #0]
   1c382:	4aaa      	ldr	r2, [pc, #680]	; (1c62c <vTask_MOTORCONTROL+0x3e4>)
   1c384:	2101      	movs	r1, #1
   1c386:	54d1      	strb	r1, [r2, r3]
	while(i--)
   1c388:	2317      	movs	r3, #23
   1c38a:	18fb      	adds	r3, r7, r3
   1c38c:	781b      	ldrb	r3, [r3, #0]
   1c38e:	2217      	movs	r2, #23
   1c390:	18ba      	adds	r2, r7, r2
   1c392:	1e59      	subs	r1, r3, #1
   1c394:	7011      	strb	r1, [r2, #0]
   1c396:	2b00      	cmp	r3, #0
   1c398:	d1f0      	bne.n	1c37c <vTask_MOTORCONTROL+0x134>
	}
	simEvent[0] = 'N';
   1c39a:	4ba5      	ldr	r3, [pc, #660]	; (1c630 <vTask_MOTORCONTROL+0x3e8>)
   1c39c:	224e      	movs	r2, #78	; 0x4e
   1c39e:	701a      	strb	r2, [r3, #0]
	simEvent[1] = 'P';
   1c3a0:	4ba3      	ldr	r3, [pc, #652]	; (1c630 <vTask_MOTORCONTROL+0x3e8>)
   1c3a2:	2250      	movs	r2, #80	; 0x50
   1c3a4:	705a      	strb	r2, [r3, #1]
	simEvent[2] = '_';					//chnage the recording when playing from flash, as sim800c does not have enough space right now.
   1c3a6:	4ba2      	ldr	r3, [pc, #648]	; (1c630 <vTask_MOTORCONTROL+0x3e8>)
   1c3a8:	225f      	movs	r2, #95	; 0x5f
   1c3aa:	709a      	strb	r2, [r3, #2]
	simEvent[3] = 'F';
   1c3ac:	4ba0      	ldr	r3, [pc, #640]	; (1c630 <vTask_MOTORCONTROL+0x3e8>)
   1c3ae:	2246      	movs	r2, #70	; 0x46
   1c3b0:	70da      	strb	r2, [r3, #3]
	simEvent[4] = 'G';
   1c3b2:	4b9f      	ldr	r3, [pc, #636]	; (1c630 <vTask_MOTORCONTROL+0x3e8>)
   1c3b4:	2247      	movs	r2, #71	; 0x47
   1c3b6:	711a      	strb	r2, [r3, #4]
	simEvent[5] = 'L';
   1c3b8:	4b9d      	ldr	r3, [pc, #628]	; (1c630 <vTask_MOTORCONTROL+0x3e8>)
   1c3ba:	224c      	movs	r2, #76	; 0x4c
   1c3bc:	715a      	strb	r2, [r3, #5]
	simEvent[6] = 'C';
   1c3be:	4b9c      	ldr	r3, [pc, #624]	; (1c630 <vTask_MOTORCONTROL+0x3e8>)
   1c3c0:	2243      	movs	r2, #67	; 0x43
   1c3c2:	719a      	strb	r2, [r3, #6]
	simEvent[7] = 'S';
   1c3c4:	4b9a      	ldr	r3, [pc, #616]	; (1c630 <vTask_MOTORCONTROL+0x3e8>)
   1c3c6:	2253      	movs	r2, #83	; 0x53
   1c3c8:	71da      	strb	r2, [r3, #7]
	simEvent[8] = 'O';
   1c3ca:	4b99      	ldr	r3, [pc, #612]	; (1c630 <vTask_MOTORCONTROL+0x3e8>)
   1c3cc:	224f      	movs	r2, #79	; 0x4f
   1c3ce:	721a      	strb	r2, [r3, #8]
	simEvent[9] = 'A';
   1c3d0:	4b97      	ldr	r3, [pc, #604]	; (1c630 <vTask_MOTORCONTROL+0x3e8>)
   1c3d2:	2241      	movs	r2, #65	; 0x41
   1c3d4:	725a      	strb	r2, [r3, #9]

	simEvent[10] = ')';		//AUTO ON EVENT
   1c3d6:	4b96      	ldr	r3, [pc, #600]	; (1c630 <vTask_MOTORCONTROL+0x3e8>)
   1c3d8:	2229      	movs	r2, #41	; 0x29
   1c3da:	729a      	strb	r2, [r3, #10]
	simEvent[11] = '[';		//AUTO OFF EVENT
   1c3dc:	4b94      	ldr	r3, [pc, #592]	; (1c630 <vTask_MOTORCONTROL+0x3e8>)
   1c3de:	225b      	movs	r2, #91	; 0x5b
   1c3e0:	72da      	strb	r2, [r3, #11]
	
	if (factory_settings_parameter_struct.ENABLE_CURRENT)
   1c3e2:	4b91      	ldr	r3, [pc, #580]	; (1c628 <vTask_MOTORCONTROL+0x3e0>)
   1c3e4:	785b      	ldrb	r3, [r3, #1]
   1c3e6:	2b00      	cmp	r3, #0
   1c3e8:	d005      	beq.n	1c3f6 <vTask_MOTORCONTROL+0x1ae>
	{
		simEvent[12] = 'B';		//Overload Event
   1c3ea:	4b91      	ldr	r3, [pc, #580]	; (1c630 <vTask_MOTORCONTROL+0x3e8>)
   1c3ec:	2242      	movs	r2, #66	; 0x42
   1c3ee:	731a      	strb	r2, [r3, #12]
		simEvent[13] = 'J';		//Underload EVENT
   1c3f0:	4b8f      	ldr	r3, [pc, #572]	; (1c630 <vTask_MOTORCONTROL+0x3e8>)
   1c3f2:	224a      	movs	r2, #74	; 0x4a
   1c3f4:	735a      	strb	r2, [r3, #13]
	}
	//////////////////////////////////////////////////////////////////////////
	
	resetAutoStart(true);
   1c3f6:	2001      	movs	r0, #1
   1c3f8:	4b8e      	ldr	r3, [pc, #568]	; (1c634 <vTask_MOTORCONTROL+0x3ec>)
   1c3fa:	4798      	blx	r3
	eventOccured=true;
   1c3fc:	4b6b      	ldr	r3, [pc, #428]	; (1c5ac <vTask_MOTORCONTROL+0x364>)
   1c3fe:	2201      	movs	r2, #1
   1c400:	701a      	strb	r2, [r3, #0]
	//port_pin_set_config(PIN_PA10, &adc_pin_config);
	//port_pin_set_config(PIN_PA11, &adc_pin_config);
	
	for (;;)
	{
		xSemaphoreTake(xButton_Semaphore, portMAX_DELAY);
   1c402:	4b8d      	ldr	r3, [pc, #564]	; (1c638 <vTask_MOTORCONTROL+0x3f0>)
   1c404:	681a      	ldr	r2, [r3, #0]
   1c406:	2301      	movs	r3, #1
   1c408:	425b      	negs	r3, r3
   1c40a:	0019      	movs	r1, r3
   1c40c:	0010      	movs	r0, r2
   1c40e:	4b8b      	ldr	r3, [pc, #556]	; (1c63c <vTask_MOTORCONTROL+0x3f4>)
   1c410:	4798      	blx	r3
		if(taskPSet)
   1c412:	4b8b      	ldr	r3, [pc, #556]	; (1c640 <vTask_MOTORCONTROL+0x3f8>)
   1c414:	781b      	ldrb	r3, [r3, #0]
   1c416:	b2db      	uxtb	r3, r3
   1c418:	2b00      	cmp	r3, #0
   1c41a:	d006      	beq.n	1c42a <vTask_MOTORCONTROL+0x1e2>
		{
			vTaskPrioritySet(NULL,1);
   1c41c:	2101      	movs	r1, #1
   1c41e:	2000      	movs	r0, #0
   1c420:	4b88      	ldr	r3, [pc, #544]	; (1c644 <vTask_MOTORCONTROL+0x3fc>)
   1c422:	4798      	blx	r3
			taskPSet=false;
   1c424:	4b86      	ldr	r3, [pc, #536]	; (1c640 <vTask_MOTORCONTROL+0x3f8>)
   1c426:	2200      	movs	r2, #0
   1c428:	701a      	strb	r2, [r3, #0]
		}
		xSemaphoreGive(xButton_Semaphore);
   1c42a:	4b83      	ldr	r3, [pc, #524]	; (1c638 <vTask_MOTORCONTROL+0x3f0>)
   1c42c:	6818      	ldr	r0, [r3, #0]
   1c42e:	2300      	movs	r3, #0
   1c430:	2200      	movs	r2, #0
   1c432:	2100      	movs	r1, #0
   1c434:	4c84      	ldr	r4, [pc, #528]	; (1c648 <vTask_MOTORCONTROL+0x400>)
   1c436:	47a0      	blx	r4
		
		if(!startSequenceOn && !stopSequenceOn)
   1c438:	4b6d      	ldr	r3, [pc, #436]	; (1c5f0 <vTask_MOTORCONTROL+0x3a8>)
   1c43a:	781b      	ldrb	r3, [r3, #0]
   1c43c:	2201      	movs	r2, #1
   1c43e:	4053      	eors	r3, r2
   1c440:	b2db      	uxtb	r3, r3
   1c442:	2b00      	cmp	r3, #0
   1c444:	d045      	beq.n	1c4d2 <vTask_MOTORCONTROL+0x28a>
   1c446:	4b6c      	ldr	r3, [pc, #432]	; (1c5f8 <vTask_MOTORCONTROL+0x3b0>)
   1c448:	781b      	ldrb	r3, [r3, #0]
   1c44a:	2201      	movs	r2, #1
   1c44c:	4053      	eors	r3, r2
   1c44e:	b2db      	uxtb	r3, r3
   1c450:	2b00      	cmp	r3, #0
   1c452:	d03e      	beq.n	1c4d2 <vTask_MOTORCONTROL+0x28a>
		{
			uint8_t tempEventOccured=eventOccured;
   1c454:	4b55      	ldr	r3, [pc, #340]	; (1c5ac <vTask_MOTORCONTROL+0x364>)
   1c456:	781b      	ldrb	r3, [r3, #0]
   1c458:	b2da      	uxtb	r2, r3
   1c45a:	230f      	movs	r3, #15
   1c45c:	18fb      	adds	r3, r7, r3
   1c45e:	701a      	strb	r2, [r3, #0]
			//uint8_t tempButtonEventOccured=buttonEventOccured;
			
			
			if(tempEventOccured)
   1c460:	230f      	movs	r3, #15
   1c462:	18fb      	adds	r3, r7, r3
   1c464:	781b      	ldrb	r3, [r3, #0]
   1c466:	2b00      	cmp	r3, #0
   1c468:	d02c      	beq.n	1c4c4 <vTask_MOTORCONTROL+0x27c>
			{
				if(firstEvent)
   1c46a:	4b52      	ldr	r3, [pc, #328]	; (1c5b4 <vTask_MOTORCONTROL+0x36c>)
   1c46c:	781b      	ldrb	r3, [r3, #0]
   1c46e:	b2db      	uxtb	r3, r3
   1c470:	2b00      	cmp	r3, #0
   1c472:	d010      	beq.n	1c496 <vTask_MOTORCONTROL+0x24e>
				{
					if((xTaskGetTickCount()-delayForFirstEvent>35000L) || boolGsm_config_flag)
   1c474:	4b4e      	ldr	r3, [pc, #312]	; (1c5b0 <vTask_MOTORCONTROL+0x368>)
   1c476:	4798      	blx	r3
   1c478:	0002      	movs	r2, r0
   1c47a:	693b      	ldr	r3, [r7, #16]
   1c47c:	1ad3      	subs	r3, r2, r3
   1c47e:	4a73      	ldr	r2, [pc, #460]	; (1c64c <vTask_MOTORCONTROL+0x404>)
   1c480:	4293      	cmp	r3, r2
   1c482:	d804      	bhi.n	1c48e <vTask_MOTORCONTROL+0x246>
   1c484:	4b72      	ldr	r3, [pc, #456]	; (1c650 <vTask_MOTORCONTROL+0x408>)
   1c486:	781b      	ldrb	r3, [r3, #0]
   1c488:	b2db      	uxtb	r3, r3
   1c48a:	2b00      	cmp	r3, #0
   1c48c:	d01a      	beq.n	1c4c4 <vTask_MOTORCONTROL+0x27c>
					{
						firstEvent = false;
   1c48e:	4b49      	ldr	r3, [pc, #292]	; (1c5b4 <vTask_MOTORCONTROL+0x36c>)
   1c490:	2200      	movs	r2, #0
   1c492:	701a      	strb	r2, [r3, #0]
   1c494:	e016      	b.n	1c4c4 <vTask_MOTORCONTROL+0x27c>
					}
				}
				else
				{
					
					if(motorFeedbackEvent)
   1c496:	4b4e      	ldr	r3, [pc, #312]	; (1c5d0 <vTask_MOTORCONTROL+0x388>)
   1c498:	781b      	ldrb	r3, [r3, #0]
   1c49a:	b2db      	uxtb	r3, r3
   1c49c:	2b00      	cmp	r3, #0
   1c49e:	d00f      	beq.n	1c4c0 <vTask_MOTORCONTROL+0x278>
					{
						if((xTaskGetTickCount()-motorFeedbackEventTime>1800))
   1c4a0:	4b43      	ldr	r3, [pc, #268]	; (1c5b0 <vTask_MOTORCONTROL+0x368>)
   1c4a2:	4798      	blx	r3
   1c4a4:	0002      	movs	r2, r0
   1c4a6:	4b6b      	ldr	r3, [pc, #428]	; (1c654 <vTask_MOTORCONTROL+0x40c>)
   1c4a8:	681b      	ldr	r3, [r3, #0]
   1c4aa:	1ad2      	subs	r2, r2, r3
   1c4ac:	23e1      	movs	r3, #225	; 0xe1
   1c4ae:	00db      	lsls	r3, r3, #3
   1c4b0:	429a      	cmp	r2, r3
   1c4b2:	d907      	bls.n	1c4c4 <vTask_MOTORCONTROL+0x27c>
						{
							motorFeedbackEvent=false;
   1c4b4:	4b46      	ldr	r3, [pc, #280]	; (1c5d0 <vTask_MOTORCONTROL+0x388>)
   1c4b6:	2200      	movs	r2, #0
   1c4b8:	701a      	strb	r2, [r3, #0]
							operateOnEvent();
   1c4ba:	4b67      	ldr	r3, [pc, #412]	; (1c658 <vTask_MOTORCONTROL+0x410>)
   1c4bc:	4798      	blx	r3
   1c4be:	e001      	b.n	1c4c4 <vTask_MOTORCONTROL+0x27c>
						}
					}
					else
					{
						operateOnEvent();
   1c4c0:	4b65      	ldr	r3, [pc, #404]	; (1c658 <vTask_MOTORCONTROL+0x410>)
   1c4c2:	4798      	blx	r3
			//if(tempButtonEventOccured)
			//{
			//operateOnButtonEvent();
			//}
			
			if(lastButtonEvent)
   1c4c4:	4b55      	ldr	r3, [pc, #340]	; (1c61c <vTask_MOTORCONTROL+0x3d4>)
   1c4c6:	781b      	ldrb	r3, [r3, #0]
   1c4c8:	b2db      	uxtb	r3, r3
   1c4ca:	2b00      	cmp	r3, #0
   1c4cc:	d001      	beq.n	1c4d2 <vTask_MOTORCONTROL+0x28a>
			{
				buttonFilter();
   1c4ce:	4b63      	ldr	r3, [pc, #396]	; (1c65c <vTask_MOTORCONTROL+0x414>)
   1c4d0:	4798      	blx	r3
			}
		}
		//// check if it is the time for new Voltage reading and if so than get new Voltage Reading.
		if(should_Detect_New_Voltage()) {
   1c4d2:	4b63      	ldr	r3, [pc, #396]	; (1c660 <vTask_MOTORCONTROL+0x418>)
   1c4d4:	4798      	blx	r3
   1c4d6:	1e03      	subs	r3, r0, #0
   1c4d8:	d003      	beq.n	1c4e2 <vTask_MOTORCONTROL+0x29a>
					detect_battery_voltage_and_percentage();
   1c4da:	4b62      	ldr	r3, [pc, #392]	; (1c664 <vTask_MOTORCONTROL+0x41c>)
   1c4dc:	4798      	blx	r3
					detect_Three_Phase_Voltage();
   1c4de:	4b62      	ldr	r3, [pc, #392]	; (1c668 <vTask_MOTORCONTROL+0x420>)
   1c4e0:	4798      	blx	r3
		}
		////////
		
		// To check if new reading of motor current is needed, and get new reading, and update in Analog_Parameter_Struct
		
		if (factory_settings_parameter_struct.ENABLE_CURRENT)
   1c4e2:	4b51      	ldr	r3, [pc, #324]	; (1c628 <vTask_MOTORCONTROL+0x3e0>)
   1c4e4:	785b      	ldrb	r3, [r3, #1]
   1c4e6:	2b00      	cmp	r3, #0
   1c4e8:	d014      	beq.n	1c514 <vTask_MOTORCONTROL+0x2cc>
		{
			if(should_Detect_New_Current()) {
   1c4ea:	4b60      	ldr	r3, [pc, #384]	; (1c66c <vTask_MOTORCONTROL+0x424>)
   1c4ec:	4798      	blx	r3
   1c4ee:	1e03      	subs	r3, r0, #0
   1c4f0:	d010      	beq.n	1c514 <vTask_MOTORCONTROL+0x2cc>
				detect_Motor_Current();
   1c4f2:	4b5f      	ldr	r3, [pc, #380]	; (1c670 <vTask_MOTORCONTROL+0x428>)
   1c4f4:	4798      	blx	r3
				if (user_settings_parameter_struct.detectMotorFeedback== MOTORFEEDBACK_DETECTION_CURRENT)
   1c4f6:	4b5f      	ldr	r3, [pc, #380]	; (1c674 <vTask_MOTORCONTROL+0x42c>)
   1c4f8:	2225      	movs	r2, #37	; 0x25
   1c4fa:	5c9b      	ldrb	r3, [r3, r2]
   1c4fc:	b2db      	uxtb	r3, r3
   1c4fe:	2b01      	cmp	r3, #1
   1c500:	d106      	bne.n	1c510 <vTask_MOTORCONTROL+0x2c8>
				{
					if(detectMotorStateChangeUsingCurrent())
   1c502:	4b5d      	ldr	r3, [pc, #372]	; (1c678 <vTask_MOTORCONTROL+0x430>)
   1c504:	4798      	blx	r3
   1c506:	1e03      	subs	r3, r0, #0
   1c508:	d002      	beq.n	1c510 <vTask_MOTORCONTROL+0x2c8>
					{
						eventOccured=true;
   1c50a:	4b28      	ldr	r3, [pc, #160]	; (1c5ac <vTask_MOTORCONTROL+0x364>)
   1c50c:	2201      	movs	r2, #1
   1c50e:	701a      	strb	r2, [r3, #0]
					}
				}
				
				checkCurrentConsumption();
   1c510:	4b5a      	ldr	r3, [pc, #360]	; (1c67c <vTask_MOTORCONTROL+0x434>)
   1c512:	4798      	blx	r3
			}
		}
		///////
		if (waitStableLineOn && waitStableLineOver())
   1c514:	4b31      	ldr	r3, [pc, #196]	; (1c5dc <vTask_MOTORCONTROL+0x394>)
   1c516:	781b      	ldrb	r3, [r3, #0]
   1c518:	2b00      	cmp	r3, #0
   1c51a:	d005      	beq.n	1c528 <vTask_MOTORCONTROL+0x2e0>
   1c51c:	4b58      	ldr	r3, [pc, #352]	; (1c680 <vTask_MOTORCONTROL+0x438>)
   1c51e:	4798      	blx	r3
   1c520:	1e03      	subs	r3, r0, #0
   1c522:	d001      	beq.n	1c528 <vTask_MOTORCONTROL+0x2e0>
		{
			operateOnStableLine();
   1c524:	4b57      	ldr	r3, [pc, #348]	; (1c684 <vTask_MOTORCONTROL+0x43c>)
   1c526:	4798      	blx	r3
		}
		
		if(stopMotorCommandGiven && xTaskGetTickCount()-tempStopSequenceTimer>5000L)
   1c528:	4b28      	ldr	r3, [pc, #160]	; (1c5cc <vTask_MOTORCONTROL+0x384>)
   1c52a:	781b      	ldrb	r3, [r3, #0]
   1c52c:	2b00      	cmp	r3, #0
   1c52e:	d00b      	beq.n	1c548 <vTask_MOTORCONTROL+0x300>
   1c530:	4b1f      	ldr	r3, [pc, #124]	; (1c5b0 <vTask_MOTORCONTROL+0x368>)
   1c532:	4798      	blx	r3
   1c534:	0002      	movs	r2, r0
   1c536:	4b54      	ldr	r3, [pc, #336]	; (1c688 <vTask_MOTORCONTROL+0x440>)
   1c538:	681b      	ldr	r3, [r3, #0]
   1c53a:	1ad3      	subs	r3, r2, r3
   1c53c:	4a53      	ldr	r2, [pc, #332]	; (1c68c <vTask_MOTORCONTROL+0x444>)
   1c53e:	4293      	cmp	r3, r2
   1c540:	d902      	bls.n	1c548 <vTask_MOTORCONTROL+0x300>
		{
			stopMotorCommandGiven=false;
   1c542:	4b22      	ldr	r3, [pc, #136]	; (1c5cc <vTask_MOTORCONTROL+0x384>)
   1c544:	2200      	movs	r2, #0
   1c546:	701a      	strb	r2, [r3, #0]
		}
		
		if(motorRelatedVoltageBypassOn)
   1c548:	4b35      	ldr	r3, [pc, #212]	; (1c620 <vTask_MOTORCONTROL+0x3d8>)
   1c54a:	781b      	ldrb	r3, [r3, #0]
   1c54c:	2b00      	cmp	r3, #0
   1c54e:	d006      	beq.n	1c55e <vTask_MOTORCONTROL+0x316>
		{
			if(MotorVoltageBypassTimerOver())
   1c550:	4b4f      	ldr	r3, [pc, #316]	; (1c690 <vTask_MOTORCONTROL+0x448>)
   1c552:	4798      	blx	r3
   1c554:	1e03      	subs	r3, r0, #0
   1c556:	d002      	beq.n	1c55e <vTask_MOTORCONTROL+0x316>
			{
				motorRelatedVoltageBypassOn=false;
   1c558:	4b31      	ldr	r3, [pc, #196]	; (1c620 <vTask_MOTORCONTROL+0x3d8>)
   1c55a:	2200      	movs	r2, #0
   1c55c:	701a      	strb	r2, [r3, #0]
			}
		}
		
		if(singlePhasingTimerOn)
   1c55e:	4b21      	ldr	r3, [pc, #132]	; (1c5e4 <vTask_MOTORCONTROL+0x39c>)
   1c560:	781b      	ldrb	r3, [r3, #0]
   1c562:	2b00      	cmp	r3, #0
   1c564:	d100      	bne.n	1c568 <vTask_MOTORCONTROL+0x320>
   1c566:	e09e      	b.n	1c6a6 <vTask_MOTORCONTROL+0x45e>
		{
			bool b;
			if (structThreePhase_state.u8t_phase_ac_state != AC_3PH)
   1c568:	4b4a      	ldr	r3, [pc, #296]	; (1c694 <vTask_MOTORCONTROL+0x44c>)
   1c56a:	785b      	ldrb	r3, [r3, #1]
   1c56c:	b2db      	uxtb	r3, r3
   1c56e:	2b03      	cmp	r3, #3
   1c570:	d003      	beq.n	1c57a <vTask_MOTORCONTROL+0x332>
			{
				b = false;
   1c572:	2316      	movs	r3, #22
   1c574:	18fb      	adds	r3, r7, r3
   1c576:	2200      	movs	r2, #0
   1c578:	701a      	strb	r2, [r3, #0]
			}
			if(!b)		//3 phase pin is low
   1c57a:	2316      	movs	r3, #22
   1c57c:	18fb      	adds	r3, r7, r3
   1c57e:	781b      	ldrb	r3, [r3, #0]
   1c580:	2201      	movs	r2, #1
   1c582:	4053      	eors	r3, r2
   1c584:	b2db      	uxtb	r3, r3
   1c586:	2b00      	cmp	r3, #0
   1c588:	d100      	bne.n	1c58c <vTask_MOTORCONTROL+0x344>
   1c58a:	e089      	b.n	1c6a0 <vTask_MOTORCONTROL+0x458>
			{
				if(singlePhasingTimerOver())
   1c58c:	4b42      	ldr	r3, [pc, #264]	; (1c698 <vTask_MOTORCONTROL+0x450>)
   1c58e:	4798      	blx	r3
   1c590:	1e03      	subs	r3, r0, #0
   1c592:	d100      	bne.n	1c596 <vTask_MOTORCONTROL+0x34e>
   1c594:	e087      	b.n	1c6a6 <vTask_MOTORCONTROL+0x45e>
				{
					operateOnSinglePhasing();
   1c596:	4b41      	ldr	r3, [pc, #260]	; (1c69c <vTask_MOTORCONTROL+0x454>)
   1c598:	4798      	blx	r3
   1c59a:	e084      	b.n	1c6a6 <vTask_MOTORCONTROL+0x45e>
   1c59c:	00019f9d 	.word	0x00019f9d
   1c5a0:	0001cbc5 	.word	0x0001cbc5
   1c5a4:	20000a0c 	.word	0x20000a0c
   1c5a8:	20000914 	.word	0x20000914
   1c5ac:	2000092e 	.word	0x2000092e
   1c5b0:	000201cd 	.word	0x000201cd
   1c5b4:	20000976 	.word	0x20000976
   1c5b8:	20000a8c 	.word	0x20000a8c
   1c5bc:	00019179 	.word	0x00019179
   1c5c0:	0001fe69 	.word	0x0001fe69
   1c5c4:	2000098d 	.word	0x2000098d
   1c5c8:	20000a41 	.word	0x20000a41
   1c5cc:	20000a60 	.word	0x20000a60
   1c5d0:	2000098a 	.word	0x2000098a
   1c5d4:	2000099a 	.word	0x2000099a
   1c5d8:	200009dd 	.word	0x200009dd
   1c5dc:	20000a0d 	.word	0x20000a0d
   1c5e0:	20000970 	.word	0x20000970
   1c5e4:	20000991 	.word	0x20000991
   1c5e8:	20000a18 	.word	0x20000a18
   1c5ec:	2000099b 	.word	0x2000099b
   1c5f0:	20000999 	.word	0x20000999
   1c5f4:	20000a63 	.word	0x20000a63
   1c5f8:	20000988 	.word	0x20000988
   1c5fc:	0001afcd 	.word	0x0001afcd
   1c600:	0001b035 	.word	0x0001b035
   1c604:	0001af99 	.word	0x0001af99
   1c608:	200009b0 	.word	0x200009b0
   1c60c:	0001a8ad 	.word	0x0001a8ad
   1c610:	20000930 	.word	0x20000930
   1c614:	200009e0 	.word	0x200009e0
   1c618:	20000968 	.word	0x20000968
   1c61c:	20000980 	.word	0x20000980
   1c620:	20000973 	.word	0x20000973
   1c624:	20000984 	.word	0x20000984
   1c628:	2000082c 	.word	0x2000082c
   1c62c:	20000918 	.word	0x20000918
   1c630:	200009f8 	.word	0x200009f8
   1c634:	0001b329 	.word	0x0001b329
   1c638:	20000434 	.word	0x20000434
   1c63c:	0001f561 	.word	0x0001f561
   1c640:	20000a80 	.word	0x20000a80
   1c644:	0001fec5 	.word	0x0001fec5
   1c648:	0001f0c1 	.word	0x0001f0c1
   1c64c:	000088b8 	.word	0x000088b8
   1c650:	200009c4 	.word	0x200009c4
   1c654:	20000a5c 	.word	0x20000a5c
   1c658:	0001b3cd 	.word	0x0001b3cd
   1c65c:	0001cdb9 	.word	0x0001cdb9
   1c660:	0001a7d1 	.word	0x0001a7d1
   1c664:	0001a7ed 	.word	0x0001a7ed
   1c668:	0001ab09 	.word	0x0001ab09
   1c66c:	0001af69 	.word	0x0001af69
   1c670:	0001ad4d 	.word	0x0001ad4d
   1c674:	20000854 	.word	0x20000854
   1c678:	0001b209 	.word	0x0001b209
   1c67c:	0001c029 	.word	0x0001c029
   1c680:	0001b6f1 	.word	0x0001b6f1
   1c684:	0001b5b1 	.word	0x0001b5b1
   1c688:	200009a8 	.word	0x200009a8
   1c68c:	00001388 	.word	0x00001388
   1c690:	0001bff9 	.word	0x0001bff9
   1c694:	20000948 	.word	0x20000948
   1c698:	0001ba81 	.word	0x0001ba81
   1c69c:	0001bacd 	.word	0x0001bacd
				}
			}
			else
			{
				singlePhasingTimerOn=false;
   1c6a0:	4b15      	ldr	r3, [pc, #84]	; (1c6f8 <vTask_MOTORCONTROL+0x4b0>)
   1c6a2:	2200      	movs	r2, #0
   1c6a4:	701a      	strb	r2, [r3, #0]
			}
		}
		if (startTimerOn)
   1c6a6:	4b15      	ldr	r3, [pc, #84]	; (1c6fc <vTask_MOTORCONTROL+0x4b4>)
   1c6a8:	781b      	ldrb	r3, [r3, #0]
   1c6aa:	2b00      	cmp	r3, #0
   1c6ac:	d007      	beq.n	1c6be <vTask_MOTORCONTROL+0x476>
		{
			if (startMotorTimerOver())
   1c6ae:	4b14      	ldr	r3, [pc, #80]	; (1c700 <vTask_MOTORCONTROL+0x4b8>)
   1c6b0:	4798      	blx	r3
   1c6b2:	1e03      	subs	r3, r0, #0
   1c6b4:	d003      	beq.n	1c6be <vTask_MOTORCONTROL+0x476>
			{
				startMotor(false,false);
   1c6b6:	2100      	movs	r1, #0
   1c6b8:	2000      	movs	r0, #0
   1c6ba:	4b12      	ldr	r3, [pc, #72]	; (1c704 <vTask_MOTORCONTROL+0x4bc>)
   1c6bc:	4798      	blx	r3
			}
		}
		if (startSequenceOn)
   1c6be:	4b12      	ldr	r3, [pc, #72]	; (1c708 <vTask_MOTORCONTROL+0x4c0>)
   1c6c0:	781b      	ldrb	r3, [r3, #0]
   1c6c2:	2b00      	cmp	r3, #0
   1c6c4:	d001      	beq.n	1c6ca <vTask_MOTORCONTROL+0x482>
		{
			terminateStartRelay();
   1c6c6:	4b11      	ldr	r3, [pc, #68]	; (1c70c <vTask_MOTORCONTROL+0x4c4>)
   1c6c8:	4798      	blx	r3
		}
		if(starDeltaTimerOn)
   1c6ca:	4b11      	ldr	r3, [pc, #68]	; (1c710 <vTask_MOTORCONTROL+0x4c8>)
   1c6cc:	781b      	ldrb	r3, [r3, #0]
   1c6ce:	2b00      	cmp	r3, #0
   1c6d0:	d001      	beq.n	1c6d6 <vTask_MOTORCONTROL+0x48e>
		{
			terminateStarDeltaTimer();
   1c6d2:	4b10      	ldr	r3, [pc, #64]	; (1c714 <vTask_MOTORCONTROL+0x4cc>)
   1c6d4:	4798      	blx	r3
		}
		if(stopSequenceOn)
   1c6d6:	4b10      	ldr	r3, [pc, #64]	; (1c718 <vTask_MOTORCONTROL+0x4d0>)
   1c6d8:	781b      	ldrb	r3, [r3, #0]
   1c6da:	2b00      	cmp	r3, #0
   1c6dc:	d001      	beq.n	1c6e2 <vTask_MOTORCONTROL+0x49a>
		{
			terminateStopRelay();
   1c6de:	4b0f      	ldr	r3, [pc, #60]	; (1c71c <vTask_MOTORCONTROL+0x4d4>)
   1c6e0:	4798      	blx	r3
		}
		
		SIMEventManager();
   1c6e2:	4b0f      	ldr	r3, [pc, #60]	; (1c720 <vTask_MOTORCONTROL+0x4d8>)
   1c6e4:	4798      	blx	r3
		if (factory_settings_parameter_struct.ENABLE_M2M)
   1c6e6:	4b0f      	ldr	r3, [pc, #60]	; (1c724 <vTask_MOTORCONTROL+0x4dc>)
   1c6e8:	78db      	ldrb	r3, [r3, #3]
   1c6ea:	2b00      	cmp	r3, #0
   1c6ec:	d100      	bne.n	1c6f0 <vTask_MOTORCONTROL+0x4a8>
   1c6ee:	e688      	b.n	1c402 <vTask_MOTORCONTROL+0x1ba>
		{
			M2MEventManager();
   1c6f0:	4b0d      	ldr	r3, [pc, #52]	; (1c728 <vTask_MOTORCONTROL+0x4e0>)
   1c6f2:	4798      	blx	r3
		xSemaphoreTake(xButton_Semaphore, portMAX_DELAY);
   1c6f4:	e685      	b.n	1c402 <vTask_MOTORCONTROL+0x1ba>
   1c6f6:	46c0      	nop			; (mov r8, r8)
   1c6f8:	20000991 	.word	0x20000991
   1c6fc:	2000099a 	.word	0x2000099a
   1c700:	0001ba19 	.word	0x0001ba19
   1c704:	0001b73d 	.word	0x0001b73d
   1c708:	20000999 	.word	0x20000999
   1c70c:	0001bc51 	.word	0x0001bc51
   1c710:	2000099b 	.word	0x2000099b
   1c714:	0001bbdd 	.word	0x0001bbdd
   1c718:	20000988 	.word	0x20000988
   1c71c:	0001bb09 	.word	0x0001bb09
   1c720:	0001bf61 	.word	0x0001bf61
   1c724:	2000082c 	.word	0x2000082c
   1c728:	0001bf1d 	.word	0x0001bf1d

0001c72c <start_motor_service>:
		}
	}
}

void start_motor_service(void)
{
   1c72c:	b590      	push	{r4, r7, lr}
   1c72e:	b08b      	sub	sp, #44	; 0x2c
   1c730:	af02      	add	r7, sp, #8
	struct extint_chan_conf config_extint_chan_isr;
	extint_chan_get_config_defaults(&config_extint_chan_isr);
   1c732:	2314      	movs	r3, #20
   1c734:	18fb      	adds	r3, r7, r3
   1c736:	0018      	movs	r0, r3
   1c738:	4bae      	ldr	r3, [pc, #696]	; (1c9f4 <start_motor_service+0x2c8>)
   1c73a:	4798      	blx	r3
	config_extint_chan_isr.gpio_pin           = PIN_PB11A_EIC_EXTINT11;
   1c73c:	2314      	movs	r3, #20
   1c73e:	18fb      	adds	r3, r7, r3
   1c740:	222b      	movs	r2, #43	; 0x2b
   1c742:	601a      	str	r2, [r3, #0]
	config_extint_chan_isr.gpio_pin_mux       = MUX_PB11A_EIC_EXTINT11;
   1c744:	2314      	movs	r3, #20
   1c746:	18fb      	adds	r3, r7, r3
   1c748:	2200      	movs	r2, #0
   1c74a:	605a      	str	r2, [r3, #4]
	config_extint_chan_isr.gpio_pin_pull      = EXTINT_PULL_UP;
   1c74c:	2314      	movs	r3, #20
   1c74e:	18fb      	adds	r3, r7, r3
   1c750:	2201      	movs	r2, #1
   1c752:	721a      	strb	r2, [r3, #8]
	config_extint_chan_isr.detection_criteria = EXTINT_DETECT_RISING;
   1c754:	2314      	movs	r3, #20
   1c756:	18fb      	adds	r3, r7, r3
   1c758:	2201      	movs	r2, #1
   1c75a:	72da      	strb	r2, [r3, #11]
	config_extint_chan_isr.wake_if_sleeping   = true;
   1c75c:	2314      	movs	r3, #20
   1c75e:	18fb      	adds	r3, r7, r3
   1c760:	2201      	movs	r2, #1
   1c762:	725a      	strb	r2, [r3, #9]
	extint_chan_set_config(11, &config_extint_chan_isr);
   1c764:	2314      	movs	r3, #20
   1c766:	18fb      	adds	r3, r7, r3
   1c768:	0019      	movs	r1, r3
   1c76a:	200b      	movs	r0, #11
   1c76c:	4ba2      	ldr	r3, [pc, #648]	; (1c9f8 <start_motor_service+0x2cc>)
   1c76e:	4798      	blx	r3
	
	extint_register_callback(PR2_ISR,11,EXTINT_CALLBACK_TYPE_DETECT);
   1c770:	4ba2      	ldr	r3, [pc, #648]	; (1c9fc <start_motor_service+0x2d0>)
   1c772:	2200      	movs	r2, #0
   1c774:	210b      	movs	r1, #11
   1c776:	0018      	movs	r0, r3
   1c778:	4ba1      	ldr	r3, [pc, #644]	; (1ca00 <start_motor_service+0x2d4>)
   1c77a:	4798      	blx	r3
	extint_chan_enable_callback(11,EXTINT_CALLBACK_TYPE_DETECT);
   1c77c:	2100      	movs	r1, #0
   1c77e:	200b      	movs	r0, #11
   1c780:	4ba0      	ldr	r3, [pc, #640]	; (1ca04 <start_motor_service+0x2d8>)
   1c782:	4798      	blx	r3
	
	struct port_config pin_confg;
	port_get_config_defaults(&pin_confg);
   1c784:	2310      	movs	r3, #16
   1c786:	18fb      	adds	r3, r7, r3
   1c788:	0018      	movs	r0, r3
   1c78a:	4b9f      	ldr	r3, [pc, #636]	; (1ca08 <start_motor_service+0x2dc>)
   1c78c:	4798      	blx	r3
	pin_confg.direction = PORT_PIN_DIR_INPUT;
   1c78e:	2310      	movs	r3, #16
   1c790:	18fb      	adds	r3, r7, r3
   1c792:	2200      	movs	r2, #0
   1c794:	701a      	strb	r2, [r3, #0]
	pin_confg.input_pull = PORT_PIN_PULL_UP;
   1c796:	2310      	movs	r3, #16
   1c798:	18fb      	adds	r3, r7, r3
   1c79a:	2201      	movs	r2, #1
   1c79c:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(PR1_PIN, &pin_confg);
   1c79e:	2310      	movs	r3, #16
   1c7a0:	18fb      	adds	r3, r7, r3
   1c7a2:	0019      	movs	r1, r3
   1c7a4:	202a      	movs	r0, #42	; 0x2a
   1c7a6:	4b99      	ldr	r3, [pc, #612]	; (1ca0c <start_motor_service+0x2e0>)
   1c7a8:	4798      	blx	r3
	
	//Transferring the below statement from LCD_SERVICE to here, as it solves the problem of the device hanging.
	// Whenever xSemaphoreTake is executed on xADC_Semaphore in task other than which xADC_Semaphore is defined in, than the MCU hangs.
	vSemaphoreCreateBinary(xADC_Semaphore);
   1c7aa:	2203      	movs	r2, #3
   1c7ac:	2100      	movs	r1, #0
   1c7ae:	2001      	movs	r0, #1
   1c7b0:	4b97      	ldr	r3, [pc, #604]	; (1ca10 <start_motor_service+0x2e4>)
   1c7b2:	4798      	blx	r3
   1c7b4:	0002      	movs	r2, r0
   1c7b6:	4b97      	ldr	r3, [pc, #604]	; (1ca14 <start_motor_service+0x2e8>)
   1c7b8:	601a      	str	r2, [r3, #0]
   1c7ba:	4b96      	ldr	r3, [pc, #600]	; (1ca14 <start_motor_service+0x2e8>)
   1c7bc:	681b      	ldr	r3, [r3, #0]
   1c7be:	2b00      	cmp	r3, #0
   1c7c0:	d006      	beq.n	1c7d0 <start_motor_service+0xa4>
   1c7c2:	4b94      	ldr	r3, [pc, #592]	; (1ca14 <start_motor_service+0x2e8>)
   1c7c4:	6818      	ldr	r0, [r3, #0]
   1c7c6:	2300      	movs	r3, #0
   1c7c8:	2200      	movs	r2, #0
   1c7ca:	2100      	movs	r1, #0
   1c7cc:	4c92      	ldr	r4, [pc, #584]	; (1ca18 <start_motor_service+0x2ec>)
   1c7ce:	47a0      	blx	r4
	
	vSemaphoreCreateBinary(xButton_Semaphore);
   1c7d0:	2203      	movs	r2, #3
   1c7d2:	2100      	movs	r1, #0
   1c7d4:	2001      	movs	r0, #1
   1c7d6:	4b8e      	ldr	r3, [pc, #568]	; (1ca10 <start_motor_service+0x2e4>)
   1c7d8:	4798      	blx	r3
   1c7da:	0002      	movs	r2, r0
   1c7dc:	4b8f      	ldr	r3, [pc, #572]	; (1ca1c <start_motor_service+0x2f0>)
   1c7de:	601a      	str	r2, [r3, #0]
   1c7e0:	4b8e      	ldr	r3, [pc, #568]	; (1ca1c <start_motor_service+0x2f0>)
   1c7e2:	681b      	ldr	r3, [r3, #0]
   1c7e4:	2b00      	cmp	r3, #0
   1c7e6:	d006      	beq.n	1c7f6 <start_motor_service+0xca>
   1c7e8:	4b8c      	ldr	r3, [pc, #560]	; (1ca1c <start_motor_service+0x2f0>)
   1c7ea:	6818      	ldr	r0, [r3, #0]
   1c7ec:	2300      	movs	r3, #0
   1c7ee:	2200      	movs	r2, #0
   1c7f0:	2100      	movs	r1, #0
   1c7f2:	4c89      	ldr	r4, [pc, #548]	; (1ca18 <start_motor_service+0x2ec>)
   1c7f4:	47a0      	blx	r4
	
	////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////
	struct port_config config_pins;
	port_get_config_defaults(&config_pins);
   1c7f6:	230c      	movs	r3, #12
   1c7f8:	18fb      	adds	r3, r7, r3
   1c7fa:	0018      	movs	r0, r3
   1c7fc:	4b82      	ldr	r3, [pc, #520]	; (1ca08 <start_motor_service+0x2dc>)
   1c7fe:	4798      	blx	r3
	
	config_pins.direction = PORT_PIN_DIR_OUTPUT;
   1c800:	230c      	movs	r3, #12
   1c802:	18fb      	adds	r3, r7, r3
   1c804:	2201      	movs	r2, #1
   1c806:	701a      	strb	r2, [r3, #0]
	config_pins.input_pull = PORT_PIN_PULL_NONE;
   1c808:	230c      	movs	r3, #12
   1c80a:	18fb      	adds	r3, r7, r3
   1c80c:	2200      	movs	r2, #0
   1c80e:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(START_RELAY_PIN,&config_pins);
   1c810:	230c      	movs	r3, #12
   1c812:	18fb      	adds	r3, r7, r3
   1c814:	0019      	movs	r1, r3
   1c816:	202d      	movs	r0, #45	; 0x2d
   1c818:	4b7c      	ldr	r3, [pc, #496]	; (1ca0c <start_motor_service+0x2e0>)
   1c81a:	4798      	blx	r3
	port_pin_set_config(STOP_RELAY_PIN,&config_pins);
   1c81c:	230c      	movs	r3, #12
   1c81e:	18fb      	adds	r3, r7, r3
   1c820:	0019      	movs	r1, r3
   1c822:	202c      	movs	r0, #44	; 0x2c
   1c824:	4b79      	ldr	r3, [pc, #484]	; (1ca0c <start_motor_service+0x2e0>)
   1c826:	4798      	blx	r3
	port_pin_set_config(AUTO_ON_LED_PIN,&config_pins);
   1c828:	230c      	movs	r3, #12
   1c82a:	18fb      	adds	r3, r7, r3
   1c82c:	0019      	movs	r1, r3
   1c82e:	2028      	movs	r0, #40	; 0x28
   1c830:	4b76      	ldr	r3, [pc, #472]	; (1ca0c <start_motor_service+0x2e0>)
   1c832:	4798      	blx	r3
	port_pin_set_config(THREEPHASE_OK_LED_PIN,&config_pins);
   1c834:	230c      	movs	r3, #12
   1c836:	18fb      	adds	r3, r7, r3
   1c838:	0019      	movs	r1, r3
   1c83a:	2027      	movs	r0, #39	; 0x27
   1c83c:	4b73      	ldr	r3, [pc, #460]	; (1ca0c <start_motor_service+0x2e0>)
   1c83e:	4798      	blx	r3
	port_pin_set_config(MOTOR_ON_LED_PIN,&config_pins);
   1c840:	230c      	movs	r3, #12
   1c842:	18fb      	adds	r3, r7, r3
   1c844:	0019      	movs	r1, r3
   1c846:	2005      	movs	r0, #5
   1c848:	4b70      	ldr	r3, [pc, #448]	; (1ca0c <start_motor_service+0x2e0>)
   1c84a:	4798      	blx	r3
	
	AUTO_ON_LED_OFF;
   1c84c:	2101      	movs	r1, #1
   1c84e:	2028      	movs	r0, #40	; 0x28
   1c850:	4b73      	ldr	r3, [pc, #460]	; (1ca20 <start_motor_service+0x2f4>)
   1c852:	4798      	blx	r3
	MOTOR_ON_LED_OFF;
   1c854:	2101      	movs	r1, #1
   1c856:	2005      	movs	r0, #5
   1c858:	4b71      	ldr	r3, [pc, #452]	; (1ca20 <start_motor_service+0x2f4>)
   1c85a:	4798      	blx	r3
	THREEPHASE_OK_LED_OFF;
   1c85c:	2101      	movs	r1, #1
   1c85e:	2027      	movs	r0, #39	; 0x27
   1c860:	4b6f      	ldr	r3, [pc, #444]	; (1ca20 <start_motor_service+0x2f4>)
   1c862:	4798      	blx	r3
	//port_pin_set_config(PIN_MOTOR_FEEDBACK,&config_pins);
	
	
	
	struct extint_chan_conf config_extint_chan;
	extint_chan_get_config_defaults(&config_extint_chan);
   1c864:	003b      	movs	r3, r7
   1c866:	0018      	movs	r0, r3
   1c868:	4b62      	ldr	r3, [pc, #392]	; (1c9f4 <start_motor_service+0x2c8>)
   1c86a:	4798      	blx	r3
	
	config_extint_chan.gpio_pin = MOTOR_FEEDBACK_EIC_PIN;
   1c86c:	003b      	movs	r3, r7
   1c86e:	222e      	movs	r2, #46	; 0x2e
   1c870:	601a      	str	r2, [r3, #0]
	config_extint_chan.gpio_pin_mux = MOTOR_FEEDBACK_EIC_MUX;
   1c872:	003b      	movs	r3, r7
   1c874:	2200      	movs	r2, #0
   1c876:	605a      	str	r2, [r3, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_NONE;
   1c878:	003b      	movs	r3, r7
   1c87a:	2200      	movs	r2, #0
   1c87c:	721a      	strb	r2, [r3, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_BOTH;
   1c87e:	003b      	movs	r3, r7
   1c880:	2203      	movs	r2, #3
   1c882:	72da      	strb	r2, [r3, #11]
	extint_chan_set_config(MOTOR_FEEDBACK_EIC_LINE, &config_extint_chan);
   1c884:	003b      	movs	r3, r7
   1c886:	0019      	movs	r1, r3
   1c888:	200e      	movs	r0, #14
   1c88a:	4b5b      	ldr	r3, [pc, #364]	; (1c9f8 <start_motor_service+0x2cc>)
   1c88c:	4798      	blx	r3
	
	extint_chan_enable_callback(MOTOR_FEEDBACK_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
   1c88e:	2100      	movs	r1, #0
   1c890:	200e      	movs	r0, #14
   1c892:	4b5c      	ldr	r3, [pc, #368]	; (1ca04 <start_motor_service+0x2d8>)
   1c894:	4798      	blx	r3
	extint_register_callback(motor_feedback_callback,MOTOR_FEEDBACK_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
   1c896:	4b63      	ldr	r3, [pc, #396]	; (1ca24 <start_motor_service+0x2f8>)
   1c898:	2200      	movs	r2, #0
   1c89a:	210e      	movs	r1, #14
   1c89c:	0018      	movs	r0, r3
   1c89e:	4b58      	ldr	r3, [pc, #352]	; (1ca00 <start_motor_service+0x2d4>)
   1c8a0:	4798      	blx	r3
	
	//////////////////////////////////////////////////////////////////////////
	
	config_extint_chan.gpio_pin = START_BUTTON_EIC_PIN;
   1c8a2:	003b      	movs	r3, r7
   1c8a4:	2226      	movs	r2, #38	; 0x26
   1c8a6:	601a      	str	r2, [r3, #0]
	config_extint_chan.gpio_pin_mux = START_BUTTON_EIC_MUX;
   1c8a8:	003b      	movs	r3, r7
   1c8aa:	2200      	movs	r2, #0
   1c8ac:	605a      	str	r2, [r3, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
   1c8ae:	003b      	movs	r3, r7
   1c8b0:	2201      	movs	r2, #1
   1c8b2:	721a      	strb	r2, [r3, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
   1c8b4:	003b      	movs	r3, r7
   1c8b6:	2202      	movs	r2, #2
   1c8b8:	72da      	strb	r2, [r3, #11]
	extint_chan_set_config(START_BUTTON_EIC_LINE, &config_extint_chan);
   1c8ba:	003b      	movs	r3, r7
   1c8bc:	0019      	movs	r1, r3
   1c8be:	2006      	movs	r0, #6
   1c8c0:	4b4d      	ldr	r3, [pc, #308]	; (1c9f8 <start_motor_service+0x2cc>)
   1c8c2:	4798      	blx	r3
	
	extint_chan_enable_callback(START_BUTTON_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
   1c8c4:	2100      	movs	r1, #0
   1c8c6:	2006      	movs	r0, #6
   1c8c8:	4b4e      	ldr	r3, [pc, #312]	; (1ca04 <start_motor_service+0x2d8>)
   1c8ca:	4798      	blx	r3
	extint_register_callback(button_detect_pin_callback,START_BUTTON_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
   1c8cc:	4b56      	ldr	r3, [pc, #344]	; (1ca28 <start_motor_service+0x2fc>)
   1c8ce:	2200      	movs	r2, #0
   1c8d0:	2106      	movs	r1, #6
   1c8d2:	0018      	movs	r0, r3
   1c8d4:	4b4a      	ldr	r3, [pc, #296]	; (1ca00 <start_motor_service+0x2d4>)
   1c8d6:	4798      	blx	r3
	//////////////////////////////////////////////////////////////////////////
	config_extint_chan.gpio_pin = STOP_BUTTON_EIC_PIN;
   1c8d8:	003b      	movs	r3, r7
   1c8da:	2225      	movs	r2, #37	; 0x25
   1c8dc:	601a      	str	r2, [r3, #0]
	config_extint_chan.gpio_pin_mux = STOP_BUTTON_EIC_MUX;
   1c8de:	003b      	movs	r3, r7
   1c8e0:	2200      	movs	r2, #0
   1c8e2:	605a      	str	r2, [r3, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
   1c8e4:	003b      	movs	r3, r7
   1c8e6:	2201      	movs	r2, #1
   1c8e8:	721a      	strb	r2, [r3, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
   1c8ea:	003b      	movs	r3, r7
   1c8ec:	2202      	movs	r2, #2
   1c8ee:	72da      	strb	r2, [r3, #11]
	extint_chan_set_config(STOP_BUTTON_EIC_LINE, &config_extint_chan);
   1c8f0:	003b      	movs	r3, r7
   1c8f2:	0019      	movs	r1, r3
   1c8f4:	2005      	movs	r0, #5
   1c8f6:	4b40      	ldr	r3, [pc, #256]	; (1c9f8 <start_motor_service+0x2cc>)
   1c8f8:	4798      	blx	r3
	extint_chan_enable_callback(STOP_BUTTON_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
   1c8fa:	2100      	movs	r1, #0
   1c8fc:	2005      	movs	r0, #5
   1c8fe:	4b41      	ldr	r3, [pc, #260]	; (1ca04 <start_motor_service+0x2d8>)
   1c900:	4798      	blx	r3
	extint_register_callback(button_detect_pin_callback,STOP_BUTTON_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
   1c902:	4b49      	ldr	r3, [pc, #292]	; (1ca28 <start_motor_service+0x2fc>)
   1c904:	2200      	movs	r2, #0
   1c906:	2105      	movs	r1, #5
   1c908:	0018      	movs	r0, r3
   1c90a:	4b3d      	ldr	r3, [pc, #244]	; (1ca00 <start_motor_service+0x2d4>)
   1c90c:	4798      	blx	r3
	//////////////////////////////////////////////////////////////////////////
	config_extint_chan.gpio_pin = AUTO_BUTTON_EIC_PIN;
   1c90e:	003b      	movs	r3, r7
   1c910:	221c      	movs	r2, #28
   1c912:	601a      	str	r2, [r3, #0]
	config_extint_chan.gpio_pin_mux = AUTO_BUTTON_EIC_MUX;
   1c914:	003b      	movs	r3, r7
   1c916:	2200      	movs	r2, #0
   1c918:	605a      	str	r2, [r3, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
   1c91a:	003b      	movs	r3, r7
   1c91c:	2201      	movs	r2, #1
   1c91e:	721a      	strb	r2, [r3, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
   1c920:	003b      	movs	r3, r7
   1c922:	2202      	movs	r2, #2
   1c924:	72da      	strb	r2, [r3, #11]
	extint_chan_set_config(AUTO_BUTTON_EIC_LINE, &config_extint_chan);
   1c926:	003b      	movs	r3, r7
   1c928:	0019      	movs	r1, r3
   1c92a:	2008      	movs	r0, #8
   1c92c:	4b32      	ldr	r3, [pc, #200]	; (1c9f8 <start_motor_service+0x2cc>)
   1c92e:	4798      	blx	r3
	extint_chan_enable_callback(AUTO_BUTTON_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
   1c930:	2100      	movs	r1, #0
   1c932:	2008      	movs	r0, #8
   1c934:	4b33      	ldr	r3, [pc, #204]	; (1ca04 <start_motor_service+0x2d8>)
   1c936:	4798      	blx	r3
	extint_register_callback(button_detect_pin_callback,AUTO_BUTTON_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
   1c938:	4b3b      	ldr	r3, [pc, #236]	; (1ca28 <start_motor_service+0x2fc>)
   1c93a:	2200      	movs	r2, #0
   1c93c:	2108      	movs	r1, #8
   1c93e:	0018      	movs	r0, r3
   1c940:	4b2f      	ldr	r3, [pc, #188]	; (1ca00 <start_motor_service+0x2d4>)
   1c942:	4798      	blx	r3
	//////////////////////////////////////////////////////////////////////////
	config_extint_chan.gpio_pin = LCD_SHOW_BUTTON_EIC_PIN;
   1c944:	003b      	movs	r3, r7
   1c946:	2229      	movs	r2, #41	; 0x29
   1c948:	601a      	str	r2, [r3, #0]
	config_extint_chan.gpio_pin_mux = LCD_SHOW_BUTTON_EIC_MUX;
   1c94a:	003b      	movs	r3, r7
   1c94c:	2200      	movs	r2, #0
   1c94e:	605a      	str	r2, [r3, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
   1c950:	003b      	movs	r3, r7
   1c952:	2201      	movs	r2, #1
   1c954:	721a      	strb	r2, [r3, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
   1c956:	003b      	movs	r3, r7
   1c958:	2202      	movs	r2, #2
   1c95a:	72da      	strb	r2, [r3, #11]
	extint_chan_set_config(LCD_SHOW_BUTTON_EIC_LINE, &config_extint_chan);
   1c95c:	003b      	movs	r3, r7
   1c95e:	0019      	movs	r1, r3
   1c960:	2009      	movs	r0, #9
   1c962:	4b25      	ldr	r3, [pc, #148]	; (1c9f8 <start_motor_service+0x2cc>)
   1c964:	4798      	blx	r3
	extint_chan_enable_callback(LCD_SHOW_BUTTON_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
   1c966:	2100      	movs	r1, #0
   1c968:	2009      	movs	r0, #9
   1c96a:	4b26      	ldr	r3, [pc, #152]	; (1ca04 <start_motor_service+0x2d8>)
   1c96c:	4798      	blx	r3
	extint_register_callback(button_detect_pin_callback,LCD_SHOW_BUTTON_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
   1c96e:	4b2e      	ldr	r3, [pc, #184]	; (1ca28 <start_motor_service+0x2fc>)
   1c970:	2200      	movs	r2, #0
   1c972:	2109      	movs	r1, #9
   1c974:	0018      	movs	r0, r3
   1c976:	4b22      	ldr	r3, [pc, #136]	; (1ca00 <start_motor_service+0x2d4>)
   1c978:	4798      	blx	r3
	////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////
	
	xTaskCreate(vTask_10ms_Timer,NULL,configMINIMAL_STACK_SIZE, NULL,1,NULL);
   1c97a:	482c      	ldr	r0, [pc, #176]	; (1ca2c <start_motor_service+0x300>)
   1c97c:	2300      	movs	r3, #0
   1c97e:	9301      	str	r3, [sp, #4]
   1c980:	2301      	movs	r3, #1
   1c982:	9300      	str	r3, [sp, #0]
   1c984:	2300      	movs	r3, #0
   1c986:	2282      	movs	r2, #130	; 0x82
   1c988:	2100      	movs	r1, #0
   1c98a:	4c29      	ldr	r4, [pc, #164]	; (1ca30 <start_motor_service+0x304>)
   1c98c:	47a0      	blx	r4
	xTaskCreate(vTask_100ms_Timer,NULL,configMINIMAL_STACK_SIZE, NULL,1,NULL);
   1c98e:	4829      	ldr	r0, [pc, #164]	; (1ca34 <start_motor_service+0x308>)
   1c990:	2300      	movs	r3, #0
   1c992:	9301      	str	r3, [sp, #4]
   1c994:	2301      	movs	r3, #1
   1c996:	9300      	str	r3, [sp, #0]
   1c998:	2300      	movs	r3, #0
   1c99a:	2282      	movs	r2, #130	; 0x82
   1c99c:	2100      	movs	r1, #0
   1c99e:	4c24      	ldr	r4, [pc, #144]	; (1ca30 <start_motor_service+0x304>)
   1c9a0:	47a0      	blx	r4
	xTaskCreate(vTask_50ms_Timer,NULL,configMINIMAL_STACK_SIZE, NULL,1,&fiftymsTask);
   1c9a2:	4825      	ldr	r0, [pc, #148]	; (1ca38 <start_motor_service+0x30c>)
   1c9a4:	4b25      	ldr	r3, [pc, #148]	; (1ca3c <start_motor_service+0x310>)
   1c9a6:	9301      	str	r3, [sp, #4]
   1c9a8:	2301      	movs	r3, #1
   1c9aa:	9300      	str	r3, [sp, #0]
   1c9ac:	2300      	movs	r3, #0
   1c9ae:	2282      	movs	r2, #130	; 0x82
   1c9b0:	2100      	movs	r1, #0
   1c9b2:	4c1f      	ldr	r4, [pc, #124]	; (1ca30 <start_motor_service+0x304>)
   1c9b4:	47a0      	blx	r4
	
	if(factory_settings_parameter_struct.ENABLE_WATER)
   1c9b6:	4b22      	ldr	r3, [pc, #136]	; (1ca40 <start_motor_service+0x314>)
   1c9b8:	795b      	ldrb	r3, [r3, #5]
   1c9ba:	2b00      	cmp	r3, #0
   1c9bc:	d00a      	beq.n	1c9d4 <start_motor_service+0x2a8>
	{
		xTaskCreate(Water_Level_Task,NULL,(uint16_t)700,NULL,1,NULL);
   1c9be:	23af      	movs	r3, #175	; 0xaf
   1c9c0:	009a      	lsls	r2, r3, #2
   1c9c2:	4820      	ldr	r0, [pc, #128]	; (1ca44 <start_motor_service+0x318>)
   1c9c4:	2300      	movs	r3, #0
   1c9c6:	9301      	str	r3, [sp, #4]
   1c9c8:	2301      	movs	r3, #1
   1c9ca:	9300      	str	r3, [sp, #0]
   1c9cc:	2300      	movs	r3, #0
   1c9ce:	2100      	movs	r1, #0
   1c9d0:	4c17      	ldr	r4, [pc, #92]	; (1ca30 <start_motor_service+0x304>)
   1c9d2:	47a0      	blx	r4
	}
	
	xTaskCreate(vTask_MOTORCONTROL,NULL,(uint16_t)900,NULL,1, &motorTask);
   1c9d4:	23e1      	movs	r3, #225	; 0xe1
   1c9d6:	009a      	lsls	r2, r3, #2
   1c9d8:	481b      	ldr	r0, [pc, #108]	; (1ca48 <start_motor_service+0x31c>)
   1c9da:	4b1c      	ldr	r3, [pc, #112]	; (1ca4c <start_motor_service+0x320>)
   1c9dc:	9301      	str	r3, [sp, #4]
   1c9de:	2301      	movs	r3, #1
   1c9e0:	9300      	str	r3, [sp, #0]
   1c9e2:	2300      	movs	r3, #0
   1c9e4:	2100      	movs	r1, #0
   1c9e6:	4c12      	ldr	r4, [pc, #72]	; (1ca30 <start_motor_service+0x304>)
   1c9e8:	47a0      	blx	r4

}
   1c9ea:	46c0      	nop			; (mov r8, r8)
   1c9ec:	46bd      	mov	sp, r7
   1c9ee:	b009      	add	sp, #36	; 0x24
   1c9f0:	bd90      	pop	{r4, r7, pc}
   1c9f2:	46c0      	nop			; (mov r8, r8)
   1c9f4:	0001e301 	.word	0x0001e301
   1c9f8:	0001e335 	.word	0x0001e335
   1c9fc:	0001a4c5 	.word	0x0001a4c5
   1ca00:	0002237d 	.word	0x0002237d
   1ca04:	000223e1 	.word	0x000223e1
   1ca08:	00019621 	.word	0x00019621
   1ca0c:	00022cd1 	.word	0x00022cd1
   1ca10:	0001f005 	.word	0x0001f005
   1ca14:	20000430 	.word	0x20000430
   1ca18:	0001f0c1 	.word	0x0001f0c1
   1ca1c:	20000434 	.word	0x20000434
   1ca20:	00019689 	.word	0x00019689
   1ca24:	0001cccd 	.word	0x0001cccd
   1ca28:	0001c235 	.word	0x0001c235
   1ca2c:	0001a6dd 	.word	0x0001a6dd
   1ca30:	0001fb29 	.word	0x0001fb29
   1ca34:	0001a749 	.word	0x0001a749
   1ca38:	0001cf95 	.word	0x0001cf95
   1ca3c:	2000043c 	.word	0x2000043c
   1ca40:	2000082c 	.word	0x2000082c
   1ca44:	000199dd 	.word	0x000199dd
   1ca48:	0001c249 	.word	0x0001c249
   1ca4c:	20000438 	.word	0x20000438

0001ca50 <motor_checkSleepElligible>:

bool motor_checkSleepElligible(void)
{
   1ca50:	b580      	push	{r7, lr}
   1ca52:	b082      	sub	sp, #8
   1ca54:	af00      	add	r7, sp, #0
	uint8_t j = 0;
   1ca56:	1dfb      	adds	r3, r7, #7
   1ca58:	2200      	movs	r2, #0
   1ca5a:	701a      	strb	r2, [r3, #0]
	if (factory_settings_parameter_struct.ENABLE_WATER)
   1ca5c:	4b4c      	ldr	r3, [pc, #304]	; (1cb90 <motor_checkSleepElligible+0x140>)
   1ca5e:	795b      	ldrb	r3, [r3, #5]
   1ca60:	2b00      	cmp	r3, #0
   1ca62:	d00b      	beq.n	1ca7c <motor_checkSleepElligible+0x2c>
	{
		if (factory_settings_parameter_struct.ENABLE_GP)
   1ca64:	4b4a      	ldr	r3, [pc, #296]	; (1cb90 <motor_checkSleepElligible+0x140>)
   1ca66:	791b      	ldrb	r3, [r3, #4]
   1ca68:	2b00      	cmp	r3, #0
   1ca6a:	d003      	beq.n	1ca74 <motor_checkSleepElligible+0x24>
		{
			j = 19;
   1ca6c:	1dfb      	adds	r3, r7, #7
   1ca6e:	2213      	movs	r2, #19
   1ca70:	701a      	strb	r2, [r3, #0]
   1ca72:	e00e      	b.n	1ca92 <motor_checkSleepElligible+0x42>
		}
		else
		{
			j = 17;
   1ca74:	1dfb      	adds	r3, r7, #7
   1ca76:	2211      	movs	r2, #17
   1ca78:	701a      	strb	r2, [r3, #0]
   1ca7a:	e00a      	b.n	1ca92 <motor_checkSleepElligible+0x42>
		}
	}
	else
	{
		if (factory_settings_parameter_struct.ENABLE_CURRENT)
   1ca7c:	4b44      	ldr	r3, [pc, #272]	; (1cb90 <motor_checkSleepElligible+0x140>)
   1ca7e:	785b      	ldrb	r3, [r3, #1]
   1ca80:	2b00      	cmp	r3, #0
   1ca82:	d003      	beq.n	1ca8c <motor_checkSleepElligible+0x3c>
		{
			j = 14;
   1ca84:	1dfb      	adds	r3, r7, #7
   1ca86:	220e      	movs	r2, #14
   1ca88:	701a      	strb	r2, [r3, #0]
   1ca8a:	e002      	b.n	1ca92 <motor_checkSleepElligible+0x42>
		}
		else
		{
			j = 12;
   1ca8c:	1dfb      	adds	r3, r7, #7
   1ca8e:	220c      	movs	r2, #12
   1ca90:	701a      	strb	r2, [r3, #0]
		}
	}
	
	bool event=true;
   1ca92:	1dbb      	adds	r3, r7, #6
   1ca94:	2201      	movs	r2, #1
   1ca96:	701a      	strb	r2, [r3, #0]
	while(j--)
   1ca98:	e00c      	b.n	1cab4 <motor_checkSleepElligible+0x64>
	{
		if(!simEventTemp[j])
   1ca9a:	1dfb      	adds	r3, r7, #7
   1ca9c:	781b      	ldrb	r3, [r3, #0]
   1ca9e:	4a3d      	ldr	r2, [pc, #244]	; (1cb94 <motor_checkSleepElligible+0x144>)
   1caa0:	5cd3      	ldrb	r3, [r2, r3]
   1caa2:	2201      	movs	r2, #1
   1caa4:	4053      	eors	r3, r2
   1caa6:	b2db      	uxtb	r3, r3
   1caa8:	2b00      	cmp	r3, #0
   1caaa:	d003      	beq.n	1cab4 <motor_checkSleepElligible+0x64>
		{
			event=false;
   1caac:	1dbb      	adds	r3, r7, #6
   1caae:	2200      	movs	r2, #0
   1cab0:	701a      	strb	r2, [r3, #0]
			break;
   1cab2:	e006      	b.n	1cac2 <motor_checkSleepElligible+0x72>
	while(j--)
   1cab4:	1dfb      	adds	r3, r7, #7
   1cab6:	781b      	ldrb	r3, [r3, #0]
   1cab8:	1dfa      	adds	r2, r7, #7
   1caba:	1e59      	subs	r1, r3, #1
   1cabc:	7011      	strb	r1, [r2, #0]
   1cabe:	2b00      	cmp	r3, #0
   1cac0:	d1eb      	bne.n	1ca9a <motor_checkSleepElligible+0x4a>
		}
	}
	if (factory_settings_parameter_struct.ENABLE_M2M)
   1cac2:	4b33      	ldr	r3, [pc, #204]	; (1cb90 <motor_checkSleepElligible+0x140>)
   1cac4:	78db      	ldrb	r3, [r3, #3]
   1cac6:	2b00      	cmp	r3, #0
   1cac8:	d00e      	beq.n	1cae8 <motor_checkSleepElligible+0x98>
	{
		if(event && m2mEvent_arr[0] == ME_WAITREGISTER || m2mEvent_arr[1]==ME_WAITREGISTER)
   1caca:	1dbb      	adds	r3, r7, #6
   1cacc:	781b      	ldrb	r3, [r3, #0]
   1cace:	2b00      	cmp	r3, #0
   1cad0:	d003      	beq.n	1cada <motor_checkSleepElligible+0x8a>
   1cad2:	4b31      	ldr	r3, [pc, #196]	; (1cb98 <motor_checkSleepElligible+0x148>)
   1cad4:	781b      	ldrb	r3, [r3, #0]
   1cad6:	2b01      	cmp	r3, #1
   1cad8:	d003      	beq.n	1cae2 <motor_checkSleepElligible+0x92>
   1cada:	4b2f      	ldr	r3, [pc, #188]	; (1cb98 <motor_checkSleepElligible+0x148>)
   1cadc:	785b      	ldrb	r3, [r3, #1]
   1cade:	2b01      	cmp	r3, #1
   1cae0:	d102      	bne.n	1cae8 <motor_checkSleepElligible+0x98>
		{
			event = false;
   1cae2:	1dbb      	adds	r3, r7, #6
   1cae4:	2200      	movs	r2, #0
   1cae6:	701a      	strb	r2, [r3, #0]
		}
	}
	
	return ((getAllPhaseState()==AC_OFF) && !eventOccured && event && !waitStableLineOn && !singlePhasingTimerOn
   1cae8:	4b2c      	ldr	r3, [pc, #176]	; (1cb9c <motor_checkSleepElligible+0x14c>)
   1caea:	4798      	blx	r3
   1caec:	1e03      	subs	r3, r0, #0
	&& !startTimerOn && !startSequenceOn && !stopSequenceOn && !firstEvent && !buttonEventOccured && (lastButtonEvent==0));
   1caee:	d145      	bne.n	1cb7c <motor_checkSleepElligible+0x12c>
	return ((getAllPhaseState()==AC_OFF) && !eventOccured && event && !waitStableLineOn && !singlePhasingTimerOn
   1caf0:	4b2b      	ldr	r3, [pc, #172]	; (1cba0 <motor_checkSleepElligible+0x150>)
   1caf2:	781b      	ldrb	r3, [r3, #0]
   1caf4:	b2db      	uxtb	r3, r3
   1caf6:	2201      	movs	r2, #1
   1caf8:	4053      	eors	r3, r2
   1cafa:	b2db      	uxtb	r3, r3
   1cafc:	2b00      	cmp	r3, #0
   1cafe:	d03d      	beq.n	1cb7c <motor_checkSleepElligible+0x12c>
   1cb00:	1dbb      	adds	r3, r7, #6
   1cb02:	781b      	ldrb	r3, [r3, #0]
   1cb04:	2b00      	cmp	r3, #0
   1cb06:	d039      	beq.n	1cb7c <motor_checkSleepElligible+0x12c>
   1cb08:	4b26      	ldr	r3, [pc, #152]	; (1cba4 <motor_checkSleepElligible+0x154>)
   1cb0a:	781b      	ldrb	r3, [r3, #0]
   1cb0c:	2201      	movs	r2, #1
   1cb0e:	4053      	eors	r3, r2
   1cb10:	b2db      	uxtb	r3, r3
   1cb12:	2b00      	cmp	r3, #0
   1cb14:	d032      	beq.n	1cb7c <motor_checkSleepElligible+0x12c>
   1cb16:	4b24      	ldr	r3, [pc, #144]	; (1cba8 <motor_checkSleepElligible+0x158>)
   1cb18:	781b      	ldrb	r3, [r3, #0]
   1cb1a:	2201      	movs	r2, #1
   1cb1c:	4053      	eors	r3, r2
   1cb1e:	b2db      	uxtb	r3, r3
   1cb20:	2b00      	cmp	r3, #0
   1cb22:	d02b      	beq.n	1cb7c <motor_checkSleepElligible+0x12c>
	&& !startTimerOn && !startSequenceOn && !stopSequenceOn && !firstEvent && !buttonEventOccured && (lastButtonEvent==0));
   1cb24:	4b21      	ldr	r3, [pc, #132]	; (1cbac <motor_checkSleepElligible+0x15c>)
   1cb26:	781b      	ldrb	r3, [r3, #0]
   1cb28:	2201      	movs	r2, #1
   1cb2a:	4053      	eors	r3, r2
   1cb2c:	b2db      	uxtb	r3, r3
   1cb2e:	2b00      	cmp	r3, #0
   1cb30:	d024      	beq.n	1cb7c <motor_checkSleepElligible+0x12c>
   1cb32:	4b1f      	ldr	r3, [pc, #124]	; (1cbb0 <motor_checkSleepElligible+0x160>)
   1cb34:	781b      	ldrb	r3, [r3, #0]
   1cb36:	2201      	movs	r2, #1
   1cb38:	4053      	eors	r3, r2
   1cb3a:	b2db      	uxtb	r3, r3
   1cb3c:	2b00      	cmp	r3, #0
   1cb3e:	d01d      	beq.n	1cb7c <motor_checkSleepElligible+0x12c>
   1cb40:	4b1c      	ldr	r3, [pc, #112]	; (1cbb4 <motor_checkSleepElligible+0x164>)
   1cb42:	781b      	ldrb	r3, [r3, #0]
   1cb44:	2201      	movs	r2, #1
   1cb46:	4053      	eors	r3, r2
   1cb48:	b2db      	uxtb	r3, r3
   1cb4a:	2b00      	cmp	r3, #0
   1cb4c:	d016      	beq.n	1cb7c <motor_checkSleepElligible+0x12c>
   1cb4e:	4b1a      	ldr	r3, [pc, #104]	; (1cbb8 <motor_checkSleepElligible+0x168>)
   1cb50:	781b      	ldrb	r3, [r3, #0]
   1cb52:	b2db      	uxtb	r3, r3
   1cb54:	2201      	movs	r2, #1
   1cb56:	4053      	eors	r3, r2
   1cb58:	b2db      	uxtb	r3, r3
   1cb5a:	2b00      	cmp	r3, #0
   1cb5c:	d00e      	beq.n	1cb7c <motor_checkSleepElligible+0x12c>
   1cb5e:	4b17      	ldr	r3, [pc, #92]	; (1cbbc <motor_checkSleepElligible+0x16c>)
   1cb60:	781b      	ldrb	r3, [r3, #0]
   1cb62:	b2db      	uxtb	r3, r3
   1cb64:	2201      	movs	r2, #1
   1cb66:	4053      	eors	r3, r2
   1cb68:	b2db      	uxtb	r3, r3
   1cb6a:	2b00      	cmp	r3, #0
   1cb6c:	d006      	beq.n	1cb7c <motor_checkSleepElligible+0x12c>
   1cb6e:	4b14      	ldr	r3, [pc, #80]	; (1cbc0 <motor_checkSleepElligible+0x170>)
   1cb70:	781b      	ldrb	r3, [r3, #0]
   1cb72:	b2db      	uxtb	r3, r3
   1cb74:	2b00      	cmp	r3, #0
   1cb76:	d101      	bne.n	1cb7c <motor_checkSleepElligible+0x12c>
   1cb78:	2301      	movs	r3, #1
   1cb7a:	e000      	b.n	1cb7e <motor_checkSleepElligible+0x12e>
   1cb7c:	2300      	movs	r3, #0
   1cb7e:	1c1a      	adds	r2, r3, #0
   1cb80:	2301      	movs	r3, #1
   1cb82:	4013      	ands	r3, r2
   1cb84:	b2db      	uxtb	r3, r3
	
}
   1cb86:	0018      	movs	r0, r3
   1cb88:	46bd      	mov	sp, r7
   1cb8a:	b002      	add	sp, #8
   1cb8c:	bd80      	pop	{r7, pc}
   1cb8e:	46c0      	nop			; (mov r8, r8)
   1cb90:	2000082c 	.word	0x2000082c
   1cb94:	20000918 	.word	0x20000918
   1cb98:	200009c0 	.word	0x200009c0
   1cb9c:	0001afb9 	.word	0x0001afb9
   1cba0:	2000092e 	.word	0x2000092e
   1cba4:	20000a0d 	.word	0x20000a0d
   1cba8:	20000991 	.word	0x20000991
   1cbac:	2000099a 	.word	0x2000099a
   1cbb0:	20000999 	.word	0x20000999
   1cbb4:	20000988 	.word	0x20000988
   1cbb8:	20000976 	.word	0x20000976
   1cbbc:	2000099f 	.word	0x2000099f
   1cbc0:	20000980 	.word	0x20000980

0001cbc4 <configure_ac>:


void configure_ac(void)
{
   1cbc4:	b580      	push	{r7, lr}
   1cbc6:	b08a      	sub	sp, #40	; 0x28
   1cbc8:	af00      	add	r7, sp, #0
	struct ac_config conf_ac;
	struct ac_events conf_ac_events = {{0}};
   1cbca:	231c      	movs	r3, #28
   1cbcc:	18fb      	adds	r3, r7, r3
   1cbce:	0018      	movs	r0, r3
   1cbd0:	2305      	movs	r3, #5
   1cbd2:	001a      	movs	r2, r3
   1cbd4:	2100      	movs	r1, #0
   1cbd6:	4b2c      	ldr	r3, [pc, #176]	; (1cc88 <configure_ac+0xc4>)
   1cbd8:	4798      	blx	r3
	
	struct ac_chan_config conf_ac_channel;
	//struct port_config pin_conf;
	
	ac_get_config_defaults(&conf_ac);
   1cbda:	2324      	movs	r3, #36	; 0x24
   1cbdc:	18fb      	adds	r3, r7, r3
   1cbde:	0018      	movs	r0, r3
   1cbe0:	4b2a      	ldr	r3, [pc, #168]	; (1cc8c <configure_ac+0xc8>)
   1cbe2:	4798      	blx	r3
	conf_ac.run_in_standby[0] = true;
   1cbe4:	2324      	movs	r3, #36	; 0x24
   1cbe6:	18fb      	adds	r3, r7, r3
   1cbe8:	2201      	movs	r2, #1
   1cbea:	701a      	strb	r2, [r3, #0]
	conf_ac.dig_source_generator = GCLK_GENERATOR_6;
   1cbec:	2324      	movs	r3, #36	; 0x24
   1cbee:	18fb      	adds	r3, r7, r3
   1cbf0:	2206      	movs	r2, #6
   1cbf2:	705a      	strb	r2, [r3, #1]
	ac_init(&ac_instance, AC, &conf_ac);
   1cbf4:	2324      	movs	r3, #36	; 0x24
   1cbf6:	18fa      	adds	r2, r7, r3
   1cbf8:	4925      	ldr	r1, [pc, #148]	; (1cc90 <configure_ac+0xcc>)
   1cbfa:	4b26      	ldr	r3, [pc, #152]	; (1cc94 <configure_ac+0xd0>)
   1cbfc:	0018      	movs	r0, r3
   1cbfe:	4b26      	ldr	r3, [pc, #152]	; (1cc98 <configure_ac+0xd4>)
   1cc00:	4798      	blx	r3
	
	conf_ac_channel.sample_mode = AC_CHAN_MODE_CONTINUOUS;
   1cc02:	1d3b      	adds	r3, r7, #4
   1cc04:	2200      	movs	r2, #0
   1cc06:	701a      	strb	r2, [r3, #0]
	conf_ac_channel.filter = AC_CHAN_FILTER_NONE;
   1cc08:	1d3b      	adds	r3, r7, #4
   1cc0a:	2200      	movs	r2, #0
   1cc0c:	605a      	str	r2, [r3, #4]
	conf_ac_channel.enable_hysteresis = false;
   1cc0e:	1d3b      	adds	r3, r7, #4
   1cc10:	2200      	movs	r2, #0
   1cc12:	721a      	strb	r2, [r3, #8]
	conf_ac_channel.output_mode = AC_CHAN_OUTPUT_INTERNAL;
   1cc14:	1d3b      	adds	r3, r7, #4
   1cc16:	2200      	movs	r2, #0
   1cc18:	60da      	str	r2, [r3, #12]
	conf_ac_channel.positive_input = AC_CHAN_POS_MUX_PIN0;
   1cc1a:	1d3b      	adds	r3, r7, #4
   1cc1c:	2200      	movs	r2, #0
   1cc1e:	821a      	strh	r2, [r3, #16]
	conf_ac_channel.negative_input = AC_CHAN_NEG_MUX_SCALED_VCC;
   1cc20:	1d3b      	adds	r3, r7, #4
   1cc22:	22a0      	movs	r2, #160	; 0xa0
   1cc24:	00d2      	lsls	r2, r2, #3
   1cc26:	825a      	strh	r2, [r3, #18]
	/* Detect threshold 0.515625V */
	conf_ac_channel.vcc_scale_factor = 45;
   1cc28:	1d3b      	adds	r3, r7, #4
   1cc2a:	222d      	movs	r2, #45	; 0x2d
   1cc2c:	751a      	strb	r2, [r3, #20]
	conf_ac_channel.interrupt_selection = AC_CHAN_INTERRUPT_SELECTION_TOGGLE;
   1cc2e:	1d3b      	adds	r3, r7, #4
   1cc30:	2200      	movs	r2, #0
   1cc32:	755a      	strb	r2, [r3, #21]
	ac_chan_set_config(&ac_instance, AC_CHAN_CHANNEL_0, &conf_ac_channel);
   1cc34:	1d3a      	adds	r2, r7, #4
   1cc36:	4b17      	ldr	r3, [pc, #92]	; (1cc94 <configure_ac+0xd0>)
   1cc38:	2100      	movs	r1, #0
   1cc3a:	0018      	movs	r0, r3
   1cc3c:	4b17      	ldr	r3, [pc, #92]	; (1cc9c <configure_ac+0xd8>)
   1cc3e:	4798      	blx	r3
	ac_chan_enable(&ac_instance, AC_CHAN_CHANNEL_0);
   1cc40:	4b14      	ldr	r3, [pc, #80]	; (1cc94 <configure_ac+0xd0>)
   1cc42:	2100      	movs	r1, #0
   1cc44:	0018      	movs	r0, r3
   1cc46:	4b16      	ldr	r3, [pc, #88]	; (1cca0 <configure_ac+0xdc>)
   1cc48:	4798      	blx	r3
	
	conf_ac_events.on_event_sample[0] = true;
   1cc4a:	231c      	movs	r3, #28
   1cc4c:	18fb      	adds	r3, r7, r3
   1cc4e:	2201      	movs	r2, #1
   1cc50:	70da      	strb	r2, [r3, #3]
	ac_enable_events(&ac_instance ,&conf_ac_events);
   1cc52:	231c      	movs	r3, #28
   1cc54:	18fa      	adds	r2, r7, r3
   1cc56:	4b0f      	ldr	r3, [pc, #60]	; (1cc94 <configure_ac+0xd0>)
   1cc58:	0011      	movs	r1, r2
   1cc5a:	0018      	movs	r0, r3
   1cc5c:	4b11      	ldr	r3, [pc, #68]	; (1cca4 <configure_ac+0xe0>)
   1cc5e:	4798      	blx	r3
	
	ac_enable(&ac_instance);
   1cc60:	4b0c      	ldr	r3, [pc, #48]	; (1cc94 <configure_ac+0xd0>)
   1cc62:	0018      	movs	r0, r3
   1cc64:	4b10      	ldr	r3, [pc, #64]	; (1cca8 <configure_ac+0xe4>)
   1cc66:	4798      	blx	r3
	
	ac_register_callback(&ac_instance, ac_detect_callback,AC_CALLBACK_COMPARATOR_0);
   1cc68:	4910      	ldr	r1, [pc, #64]	; (1ccac <configure_ac+0xe8>)
   1cc6a:	4b0a      	ldr	r3, [pc, #40]	; (1cc94 <configure_ac+0xd0>)
   1cc6c:	2200      	movs	r2, #0
   1cc6e:	0018      	movs	r0, r3
   1cc70:	4b0f      	ldr	r3, [pc, #60]	; (1ccb0 <configure_ac+0xec>)
   1cc72:	4798      	blx	r3
	ac_enable_callback(&ac_instance, AC_CALLBACK_COMPARATOR_0);
   1cc74:	4b07      	ldr	r3, [pc, #28]	; (1cc94 <configure_ac+0xd0>)
   1cc76:	2100      	movs	r1, #0
   1cc78:	0018      	movs	r0, r3
   1cc7a:	4b0e      	ldr	r3, [pc, #56]	; (1ccb4 <configure_ac+0xf0>)
   1cc7c:	4798      	blx	r3
}
   1cc7e:	46c0      	nop			; (mov r8, r8)
   1cc80:	46bd      	mov	sp, r7
   1cc82:	b00a      	add	sp, #40	; 0x28
   1cc84:	bd80      	pop	{r7, pc}
   1cc86:	46c0      	nop			; (mov r8, r8)
   1cc88:	00028b57 	.word	0x00028b57
   1cc8c:	00018fa5 	.word	0x00018fa5
   1cc90:	42004400 	.word	0x42004400
   1cc94:	20000a8c 	.word	0x20000a8c
   1cc98:	0001d129 	.word	0x0001d129
   1cc9c:	0001d209 	.word	0x0001d209
   1cca0:	000190f5 	.word	0x000190f5
   1cca4:	00019015 	.word	0x00019015
   1cca8:	00018fdd 	.word	0x00018fdd
   1ccac:	0001ccb9 	.word	0x0001ccb9
   1ccb0:	00022589 	.word	0x00022589
   1ccb4:	0001925d 	.word	0x0001925d

0001ccb8 <ac_detect_callback>:
	rtc_count_enable_events(&rtc_instance, &conf_rtc_events);
	rtc_count_enable(&rtc_instance);
}

void ac_detect_callback(struct ac_module *const module_inst)
{
   1ccb8:	b580      	push	{r7, lr}
   1ccba:	b082      	sub	sp, #8
   1ccbc:	af00      	add	r7, sp, #0
   1ccbe:	6078      	str	r0, [r7, #4]
	asm("NOP");
   1ccc0:	46c0      	nop			; (mov r8, r8)
	;
	//eventOccured = true;
}
   1ccc2:	46c0      	nop			; (mov r8, r8)
   1ccc4:	46bd      	mov	sp, r7
   1ccc6:	b002      	add	sp, #8
   1ccc8:	bd80      	pop	{r7, pc}
	...

0001cccc <motor_feedback_callback>:

static void motor_feedback_callback(void)
{
   1cccc:	b580      	push	{r7, lr}
   1ccce:	af00      	add	r7, sp, #0
	eventOccured = true;
   1ccd0:	4b06      	ldr	r3, [pc, #24]	; (1ccec <motor_feedback_callback+0x20>)
   1ccd2:	2201      	movs	r2, #1
   1ccd4:	701a      	strb	r2, [r3, #0]
	motorFeedbackEvent=true;
   1ccd6:	4b06      	ldr	r3, [pc, #24]	; (1ccf0 <motor_feedback_callback+0x24>)
   1ccd8:	2201      	movs	r2, #1
   1ccda:	701a      	strb	r2, [r3, #0]
	motorFeedbackEventTime=xTaskGetTickCountFromISR();
   1ccdc:	4b05      	ldr	r3, [pc, #20]	; (1ccf4 <motor_feedback_callback+0x28>)
   1ccde:	4798      	blx	r3
   1cce0:	0002      	movs	r2, r0
   1cce2:	4b05      	ldr	r3, [pc, #20]	; (1ccf8 <motor_feedback_callback+0x2c>)
   1cce4:	601a      	str	r2, [r3, #0]
}
   1cce6:	46c0      	nop			; (mov r8, r8)
   1cce8:	46bd      	mov	sp, r7
   1ccea:	bd80      	pop	{r7, pc}
   1ccec:	2000092e 	.word	0x2000092e
   1ccf0:	2000098a 	.word	0x2000098a
   1ccf4:	000201e9 	.word	0x000201e9
   1ccf8:	20000a5c 	.word	0x20000a5c

0001ccfc <operateOnButtonEvent>:
	events_allocate(&resource, &conf_event);
	events_attach_user(&resource, EVSYS_ID_USER_AC_SOC_0);
}

void operateOnButtonEvent(void)
{
   1ccfc:	b580      	push	{r7, lr}
   1ccfe:	af00      	add	r7, sp, #0
	buttonEventOccured=false;
   1cd00:	4b28      	ldr	r3, [pc, #160]	; (1cda4 <operateOnButtonEvent+0xa8>)
   1cd02:	2200      	movs	r2, #0
   1cd04:	701a      	strb	r2, [r3, #0]
	if (START_BUTTON_INPUT_COMES)
   1cd06:	2026      	movs	r0, #38	; 0x26
   1cd08:	4b27      	ldr	r3, [pc, #156]	; (1cda8 <operateOnButtonEvent+0xac>)
   1cd0a:	4798      	blx	r3
   1cd0c:	0003      	movs	r3, r0
   1cd0e:	001a      	movs	r2, r3
   1cd10:	2301      	movs	r3, #1
   1cd12:	4053      	eors	r3, r2
   1cd14:	b2db      	uxtb	r3, r3
   1cd16:	2b00      	cmp	r3, #0
   1cd18:	d008      	beq.n	1cd2c <operateOnButtonEvent+0x30>
	{
		lastPressTime=xTaskGetTickCount();
   1cd1a:	4b24      	ldr	r3, [pc, #144]	; (1cdac <operateOnButtonEvent+0xb0>)
   1cd1c:	4798      	blx	r3
   1cd1e:	0002      	movs	r2, r0
   1cd20:	4b23      	ldr	r3, [pc, #140]	; (1cdb0 <operateOnButtonEvent+0xb4>)
   1cd22:	601a      	str	r2, [r3, #0]
		lastButtonEvent=BTNEVENTSTART;
   1cd24:	4b23      	ldr	r3, [pc, #140]	; (1cdb4 <operateOnButtonEvent+0xb8>)
   1cd26:	2201      	movs	r2, #1
   1cd28:	701a      	strb	r2, [r3, #0]
	else if(LCDSHOW_BUTTON_INPUT_COMES)
	{
		lastPressTime= xTaskGetTickCount();
		lastButtonEvent=BTNEVENTLCDSHOW;
	}
}
   1cd2a:	e037      	b.n	1cd9c <operateOnButtonEvent+0xa0>
	else if (STOP_BUTTON_INPUT_COMES)
   1cd2c:	2025      	movs	r0, #37	; 0x25
   1cd2e:	4b1e      	ldr	r3, [pc, #120]	; (1cda8 <operateOnButtonEvent+0xac>)
   1cd30:	4798      	blx	r3
   1cd32:	0003      	movs	r3, r0
   1cd34:	001a      	movs	r2, r3
   1cd36:	2301      	movs	r3, #1
   1cd38:	4053      	eors	r3, r2
   1cd3a:	b2db      	uxtb	r3, r3
   1cd3c:	2b00      	cmp	r3, #0
   1cd3e:	d008      	beq.n	1cd52 <operateOnButtonEvent+0x56>
		lastPressTime=xTaskGetTickCount();
   1cd40:	4b1a      	ldr	r3, [pc, #104]	; (1cdac <operateOnButtonEvent+0xb0>)
   1cd42:	4798      	blx	r3
   1cd44:	0002      	movs	r2, r0
   1cd46:	4b1a      	ldr	r3, [pc, #104]	; (1cdb0 <operateOnButtonEvent+0xb4>)
   1cd48:	601a      	str	r2, [r3, #0]
		lastButtonEvent=BTNEVENTSTOP;
   1cd4a:	4b1a      	ldr	r3, [pc, #104]	; (1cdb4 <operateOnButtonEvent+0xb8>)
   1cd4c:	2202      	movs	r2, #2
   1cd4e:	701a      	strb	r2, [r3, #0]
}
   1cd50:	e024      	b.n	1cd9c <operateOnButtonEvent+0xa0>
	else if (AUTO_BUTTON_INPUT_COMES)
   1cd52:	201c      	movs	r0, #28
   1cd54:	4b14      	ldr	r3, [pc, #80]	; (1cda8 <operateOnButtonEvent+0xac>)
   1cd56:	4798      	blx	r3
   1cd58:	0003      	movs	r3, r0
   1cd5a:	001a      	movs	r2, r3
   1cd5c:	2301      	movs	r3, #1
   1cd5e:	4053      	eors	r3, r2
   1cd60:	b2db      	uxtb	r3, r3
   1cd62:	2b00      	cmp	r3, #0
   1cd64:	d008      	beq.n	1cd78 <operateOnButtonEvent+0x7c>
		lastPressTime=xTaskGetTickCount();
   1cd66:	4b11      	ldr	r3, [pc, #68]	; (1cdac <operateOnButtonEvent+0xb0>)
   1cd68:	4798      	blx	r3
   1cd6a:	0002      	movs	r2, r0
   1cd6c:	4b10      	ldr	r3, [pc, #64]	; (1cdb0 <operateOnButtonEvent+0xb4>)
   1cd6e:	601a      	str	r2, [r3, #0]
		lastButtonEvent=BTNEVENTAUTO;
   1cd70:	4b10      	ldr	r3, [pc, #64]	; (1cdb4 <operateOnButtonEvent+0xb8>)
   1cd72:	2203      	movs	r2, #3
   1cd74:	701a      	strb	r2, [r3, #0]
}
   1cd76:	e011      	b.n	1cd9c <operateOnButtonEvent+0xa0>
	else if(LCDSHOW_BUTTON_INPUT_COMES)
   1cd78:	2029      	movs	r0, #41	; 0x29
   1cd7a:	4b0b      	ldr	r3, [pc, #44]	; (1cda8 <operateOnButtonEvent+0xac>)
   1cd7c:	4798      	blx	r3
   1cd7e:	0003      	movs	r3, r0
   1cd80:	001a      	movs	r2, r3
   1cd82:	2301      	movs	r3, #1
   1cd84:	4053      	eors	r3, r2
   1cd86:	b2db      	uxtb	r3, r3
   1cd88:	2b00      	cmp	r3, #0
   1cd8a:	d007      	beq.n	1cd9c <operateOnButtonEvent+0xa0>
		lastPressTime= xTaskGetTickCount();
   1cd8c:	4b07      	ldr	r3, [pc, #28]	; (1cdac <operateOnButtonEvent+0xb0>)
   1cd8e:	4798      	blx	r3
   1cd90:	0002      	movs	r2, r0
   1cd92:	4b07      	ldr	r3, [pc, #28]	; (1cdb0 <operateOnButtonEvent+0xb4>)
   1cd94:	601a      	str	r2, [r3, #0]
		lastButtonEvent=BTNEVENTLCDSHOW;
   1cd96:	4b07      	ldr	r3, [pc, #28]	; (1cdb4 <operateOnButtonEvent+0xb8>)
   1cd98:	2204      	movs	r2, #4
   1cd9a:	701a      	strb	r2, [r3, #0]
}
   1cd9c:	46c0      	nop			; (mov r8, r8)
   1cd9e:	46bd      	mov	sp, r7
   1cda0:	bd80      	pop	{r7, pc}
   1cda2:	46c0      	nop			; (mov r8, r8)
   1cda4:	2000099f 	.word	0x2000099f
   1cda8:	00019645 	.word	0x00019645
   1cdac:	000201cd 	.word	0x000201cd
   1cdb0:	20000968 	.word	0x20000968
   1cdb4:	20000980 	.word	0x20000980

0001cdb8 <buttonFilter>:

void buttonFilter(void)
{
   1cdb8:	b580      	push	{r7, lr}
   1cdba:	af00      	add	r7, sp, #0
	//&& xTaskGetTickCount() - lastPressTime > 30
	if(lastButtonEvent>0)
   1cdbc:	4b48      	ldr	r3, [pc, #288]	; (1cee0 <buttonFilter+0x128>)
   1cdbe:	781b      	ldrb	r3, [r3, #0]
   1cdc0:	b2db      	uxtb	r3, r3
   1cdc2:	2b00      	cmp	r3, #0
   1cdc4:	d100      	bne.n	1cdc8 <buttonFilter+0x10>
   1cdc6:	e088      	b.n	1ceda <buttonFilter+0x122>
	{
		if(lastButtonEvent==BTNEVENTSTART && START_BUTTON_INPUT_COMES)
   1cdc8:	4b45      	ldr	r3, [pc, #276]	; (1cee0 <buttonFilter+0x128>)
   1cdca:	781b      	ldrb	r3, [r3, #0]
   1cdcc:	b2db      	uxtb	r3, r3
   1cdce:	2b01      	cmp	r3, #1
   1cdd0:	d111      	bne.n	1cdf6 <buttonFilter+0x3e>
   1cdd2:	2026      	movs	r0, #38	; 0x26
   1cdd4:	4b43      	ldr	r3, [pc, #268]	; (1cee4 <buttonFilter+0x12c>)
   1cdd6:	4798      	blx	r3
   1cdd8:	0003      	movs	r3, r0
   1cdda:	001a      	movs	r2, r3
   1cddc:	2301      	movs	r3, #1
   1cdde:	4053      	eors	r3, r2
   1cde0:	b2db      	uxtb	r3, r3
   1cde2:	2b00      	cmp	r3, #0
   1cde4:	d007      	beq.n	1cdf6 <buttonFilter+0x3e>
		{
			lastButtonEvent=0;
   1cde6:	4b3e      	ldr	r3, [pc, #248]	; (1cee0 <buttonFilter+0x128>)
   1cde8:	2200      	movs	r2, #0
   1cdea:	701a      	strb	r2, [r3, #0]
			startMotor(false,false);
   1cdec:	2100      	movs	r1, #0
   1cdee:	2000      	movs	r0, #0
   1cdf0:	4b3d      	ldr	r3, [pc, #244]	; (1cee8 <buttonFilter+0x130>)
   1cdf2:	4798      	blx	r3
   1cdf4:	e071      	b.n	1ceda <buttonFilter+0x122>
		}
		else if(lastButtonEvent==BTNEVENTSTOP && STOP_BUTTON_INPUT_COMES)
   1cdf6:	4b3a      	ldr	r3, [pc, #232]	; (1cee0 <buttonFilter+0x128>)
   1cdf8:	781b      	ldrb	r3, [r3, #0]
   1cdfa:	b2db      	uxtb	r3, r3
   1cdfc:	2b02      	cmp	r3, #2
   1cdfe:	d112      	bne.n	1ce26 <buttonFilter+0x6e>
   1ce00:	2025      	movs	r0, #37	; 0x25
   1ce02:	4b38      	ldr	r3, [pc, #224]	; (1cee4 <buttonFilter+0x12c>)
   1ce04:	4798      	blx	r3
   1ce06:	0003      	movs	r3, r0
   1ce08:	001a      	movs	r2, r3
   1ce0a:	2301      	movs	r3, #1
   1ce0c:	4053      	eors	r3, r2
   1ce0e:	b2db      	uxtb	r3, r3
   1ce10:	2b00      	cmp	r3, #0
   1ce12:	d008      	beq.n	1ce26 <buttonFilter+0x6e>
		{
			lastButtonEvent=0;
   1ce14:	4b32      	ldr	r3, [pc, #200]	; (1cee0 <buttonFilter+0x128>)
   1ce16:	2200      	movs	r2, #0
   1ce18:	701a      	strb	r2, [r3, #0]
			stopMotor(false,false,true);
   1ce1a:	2201      	movs	r2, #1
   1ce1c:	2100      	movs	r1, #0
   1ce1e:	2000      	movs	r0, #0
   1ce20:	4b32      	ldr	r3, [pc, #200]	; (1ceec <buttonFilter+0x134>)
   1ce22:	4798      	blx	r3
   1ce24:	e059      	b.n	1ceda <buttonFilter+0x122>
		}
		else if(lastButtonEvent==BTNEVENTAUTO && AUTO_BUTTON_INPUT_COMES)
   1ce26:	4b2e      	ldr	r3, [pc, #184]	; (1cee0 <buttonFilter+0x128>)
   1ce28:	781b      	ldrb	r3, [r3, #0]
   1ce2a:	b2db      	uxtb	r3, r3
   1ce2c:	2b03      	cmp	r3, #3
   1ce2e:	d12d      	bne.n	1ce8c <buttonFilter+0xd4>
   1ce30:	201c      	movs	r0, #28
   1ce32:	4b2c      	ldr	r3, [pc, #176]	; (1cee4 <buttonFilter+0x12c>)
   1ce34:	4798      	blx	r3
   1ce36:	0003      	movs	r3, r0
   1ce38:	001a      	movs	r2, r3
   1ce3a:	2301      	movs	r3, #1
   1ce3c:	4053      	eors	r3, r2
   1ce3e:	b2db      	uxtb	r3, r3
   1ce40:	2b00      	cmp	r3, #0
   1ce42:	d023      	beq.n	1ce8c <buttonFilter+0xd4>
		{
			lastButtonEvent=0;
   1ce44:	4b26      	ldr	r3, [pc, #152]	; (1cee0 <buttonFilter+0x128>)
   1ce46:	2200      	movs	r2, #0
   1ce48:	701a      	strb	r2, [r3, #0]
			saveAutoStartSettings(!((bool)user_settings_parameter_struct.autoStartAddress));  //set AutoStart to True in EEPROM
   1ce4a:	4b29      	ldr	r3, [pc, #164]	; (1cef0 <buttonFilter+0x138>)
   1ce4c:	785b      	ldrb	r3, [r3, #1]
   1ce4e:	b2db      	uxtb	r3, r3
   1ce50:	425a      	negs	r2, r3
   1ce52:	4153      	adcs	r3, r2
   1ce54:	b2db      	uxtb	r3, r3
   1ce56:	0018      	movs	r0, r3
   1ce58:	4b26      	ldr	r3, [pc, #152]	; (1cef4 <buttonFilter+0x13c>)
   1ce5a:	4798      	blx	r3
			resetAutoStart(true);
   1ce5c:	2001      	movs	r0, #1
   1ce5e:	4b26      	ldr	r3, [pc, #152]	; (1cef8 <buttonFilter+0x140>)
   1ce60:	4798      	blx	r3
			if(user_settings_parameter_struct.autoStartAddress)
   1ce62:	4b23      	ldr	r3, [pc, #140]	; (1cef0 <buttonFilter+0x138>)
   1ce64:	785b      	ldrb	r3, [r3, #1]
   1ce66:	b2db      	uxtb	r3, r3
   1ce68:	2b00      	cmp	r3, #0
   1ce6a:	d007      	beq.n	1ce7c <buttonFilter+0xc4>
			{
				simEventTemp[10] = registerEvent(')');
   1ce6c:	2029      	movs	r0, #41	; 0x29
   1ce6e:	4b23      	ldr	r3, [pc, #140]	; (1cefc <buttonFilter+0x144>)
   1ce70:	4798      	blx	r3
   1ce72:	0003      	movs	r3, r0
   1ce74:	001a      	movs	r2, r3
   1ce76:	4b22      	ldr	r3, [pc, #136]	; (1cf00 <buttonFilter+0x148>)
   1ce78:	729a      	strb	r2, [r3, #10]
			if(user_settings_parameter_struct.autoStartAddress)
   1ce7a:	e02e      	b.n	1ceda <buttonFilter+0x122>
			}
			else
			{
				simEventTemp[11] = registerEvent('[');
   1ce7c:	205b      	movs	r0, #91	; 0x5b
   1ce7e:	4b1f      	ldr	r3, [pc, #124]	; (1cefc <buttonFilter+0x144>)
   1ce80:	4798      	blx	r3
   1ce82:	0003      	movs	r3, r0
   1ce84:	001a      	movs	r2, r3
   1ce86:	4b1e      	ldr	r3, [pc, #120]	; (1cf00 <buttonFilter+0x148>)
   1ce88:	72da      	strb	r2, [r3, #11]
			if(user_settings_parameter_struct.autoStartAddress)
   1ce8a:	e026      	b.n	1ceda <buttonFilter+0x122>
			}
		}
		else if(lastButtonEvent==BTNEVENTLCDSHOW && LCDSHOW_BUTTON_INPUT_COMES)
   1ce8c:	4b14      	ldr	r3, [pc, #80]	; (1cee0 <buttonFilter+0x128>)
   1ce8e:	781b      	ldrb	r3, [r3, #0]
   1ce90:	b2db      	uxtb	r3, r3
   1ce92:	2b04      	cmp	r3, #4
   1ce94:	d11d      	bne.n	1ced2 <buttonFilter+0x11a>
   1ce96:	2029      	movs	r0, #41	; 0x29
   1ce98:	4b12      	ldr	r3, [pc, #72]	; (1cee4 <buttonFilter+0x12c>)
   1ce9a:	4798      	blx	r3
   1ce9c:	0003      	movs	r3, r0
   1ce9e:	001a      	movs	r2, r3
   1cea0:	2301      	movs	r3, #1
   1cea2:	4053      	eors	r3, r2
   1cea4:	b2db      	uxtb	r3, r3
   1cea6:	2b00      	cmp	r3, #0
   1cea8:	d013      	beq.n	1ced2 <buttonFilter+0x11a>
		{
			lastButtonEvent=0;
   1ceaa:	4b0d      	ldr	r3, [pc, #52]	; (1cee0 <buttonFilter+0x128>)
   1ceac:	2200      	movs	r2, #0
   1ceae:	701a      	strb	r2, [r3, #0]
			setDisplayPause(!varPauseDisplay);
   1ceb0:	4b14      	ldr	r3, [pc, #80]	; (1cf04 <buttonFilter+0x14c>)
   1ceb2:	781b      	ldrb	r3, [r3, #0]
   1ceb4:	b2db      	uxtb	r3, r3
   1ceb6:	1e5a      	subs	r2, r3, #1
   1ceb8:	4193      	sbcs	r3, r2
   1ceba:	b2db      	uxtb	r3, r3
   1cebc:	2201      	movs	r2, #1
   1cebe:	4053      	eors	r3, r2
   1cec0:	b2db      	uxtb	r3, r3
   1cec2:	1c1a      	adds	r2, r3, #0
   1cec4:	2301      	movs	r3, #1
   1cec6:	4013      	ands	r3, r2
   1cec8:	b2db      	uxtb	r3, r3
   1ceca:	0018      	movs	r0, r3
   1cecc:	4b0e      	ldr	r3, [pc, #56]	; (1cf08 <buttonFilter+0x150>)
   1cece:	4798      	blx	r3
   1ced0:	e003      	b.n	1ceda <buttonFilter+0x122>
		}
		else
		{
			lastButtonEvent=0;
   1ced2:	4b03      	ldr	r3, [pc, #12]	; (1cee0 <buttonFilter+0x128>)
   1ced4:	2200      	movs	r2, #0
   1ced6:	701a      	strb	r2, [r3, #0]
		}
	}
}
   1ced8:	e7ff      	b.n	1ceda <buttonFilter+0x122>
   1ceda:	46c0      	nop			; (mov r8, r8)
   1cedc:	46bd      	mov	sp, r7
   1cede:	bd80      	pop	{r7, pc}
   1cee0:	20000980 	.word	0x20000980
   1cee4:	00019645 	.word	0x00019645
   1cee8:	0001b73d 	.word	0x0001b73d
   1ceec:	0001b925 	.word	0x0001b925
   1cef0:	20000854 	.word	0x20000854
   1cef4:	000112a9 	.word	0x000112a9
   1cef8:	0001b329 	.word	0x0001b329
   1cefc:	00014b5d 	.word	0x00014b5d
   1cf00:	20000918 	.word	0x20000918
   1cf04:	200009ac 	.word	0x200009ac
   1cf08:	0001cf0d 	.word	0x0001cf0d

0001cf0c <setDisplayPause>:
//}
//}


void setDisplayPause(bool value)
{
   1cf0c:	b580      	push	{r7, lr}
   1cf0e:	b082      	sub	sp, #8
   1cf10:	af00      	add	r7, sp, #0
   1cf12:	0002      	movs	r2, r0
   1cf14:	1dfb      	adds	r3, r7, #7
   1cf16:	701a      	strb	r2, [r3, #0]
	varPauseDisplay=value;
   1cf18:	4b03      	ldr	r3, [pc, #12]	; (1cf28 <setDisplayPause+0x1c>)
   1cf1a:	1dfa      	adds	r2, r7, #7
   1cf1c:	7812      	ldrb	r2, [r2, #0]
   1cf1e:	701a      	strb	r2, [r3, #0]
}
   1cf20:	46c0      	nop			; (mov r8, r8)
   1cf22:	46bd      	mov	sp, r7
   1cf24:	b002      	add	sp, #8
   1cf26:	bd80      	pop	{r7, pc}
   1cf28:	200009ac 	.word	0x200009ac

0001cf2c <setCallStateOnLCD>:

void setCallStateOnLCD(uint8_t callState,char* number,bool usePrevious)
{
   1cf2c:	b580      	push	{r7, lr}
   1cf2e:	b082      	sub	sp, #8
   1cf30:	af00      	add	r7, sp, #0
   1cf32:	6039      	str	r1, [r7, #0]
   1cf34:	0011      	movs	r1, r2
   1cf36:	1dfb      	adds	r3, r7, #7
   1cf38:	1c02      	adds	r2, r0, #0
   1cf3a:	701a      	strb	r2, [r3, #0]
   1cf3c:	1dbb      	adds	r3, r7, #6
   1cf3e:	1c0a      	adds	r2, r1, #0
   1cf40:	701a      	strb	r2, [r3, #0]
	callStateOnLCD = callState;
   1cf42:	4b10      	ldr	r3, [pc, #64]	; (1cf84 <setCallStateOnLCD+0x58>)
   1cf44:	1dfa      	adds	r2, r7, #7
   1cf46:	7812      	ldrb	r2, [r2, #0]
   1cf48:	701a      	strb	r2, [r3, #0]

	if(!usePrevious)
   1cf4a:	1dbb      	adds	r3, r7, #6
   1cf4c:	781b      	ldrb	r3, [r3, #0]
   1cf4e:	2201      	movs	r2, #1
   1cf50:	4053      	eors	r3, r2
   1cf52:	b2db      	uxtb	r3, r3
   1cf54:	2b00      	cmp	r3, #0
   1cf56:	d010      	beq.n	1cf7a <setCallStateOnLCD+0x4e>
	{
		memset(numberOnLCD, '\0', sizeof(numberOnLCD));
   1cf58:	4b0b      	ldr	r3, [pc, #44]	; (1cf88 <setCallStateOnLCD+0x5c>)
   1cf5a:	2214      	movs	r2, #20
   1cf5c:	2100      	movs	r1, #0
   1cf5e:	0018      	movs	r0, r3
   1cf60:	4b0a      	ldr	r3, [pc, #40]	; (1cf8c <setCallStateOnLCD+0x60>)
   1cf62:	4798      	blx	r3
		if(callStateOnLCD!=LCDCALLSTATE_IDLE)
   1cf64:	4b07      	ldr	r3, [pc, #28]	; (1cf84 <setCallStateOnLCD+0x58>)
   1cf66:	781b      	ldrb	r3, [r3, #0]
   1cf68:	b2db      	uxtb	r3, r3
   1cf6a:	2b00      	cmp	r3, #0
   1cf6c:	d005      	beq.n	1cf7a <setCallStateOnLCD+0x4e>
		{
			strcpy(numberOnLCD,number);
   1cf6e:	683a      	ldr	r2, [r7, #0]
   1cf70:	4b05      	ldr	r3, [pc, #20]	; (1cf88 <setCallStateOnLCD+0x5c>)
   1cf72:	0011      	movs	r1, r2
   1cf74:	0018      	movs	r0, r3
   1cf76:	4b06      	ldr	r3, [pc, #24]	; (1cf90 <setCallStateOnLCD+0x64>)
   1cf78:	4798      	blx	r3
			//sprintf(numberOnLCD,"%s",number);
		}
	}
}
   1cf7a:	46c0      	nop			; (mov r8, r8)
   1cf7c:	46bd      	mov	sp, r7
   1cf7e:	b002      	add	sp, #8
   1cf80:	bd80      	pop	{r7, pc}
   1cf82:	46c0      	nop			; (mov r8, r8)
   1cf84:	200009d2 	.word	0x200009d2
   1cf88:	20000a44 	.word	0x20000a44
   1cf8c:	00028b57 	.word	0x00028b57
   1cf90:	00028dd7 	.word	0x00028dd7

0001cf94 <vTask_50ms_Timer>:

static void vTask_50ms_Timer(void *params)
{
   1cf94:	b590      	push	{r4, r7, lr}
   1cf96:	b085      	sub	sp, #20
   1cf98:	af00      	add	r7, sp, #0
   1cf9a:	6078      	str	r0, [r7, #4]
	TickType_t xLastExecutionGsm_Send_Time;
	xLastExecutionGsm_Send_Time = xTaskGetTickCount();
   1cf9c:	4b17      	ldr	r3, [pc, #92]	; (1cffc <vTask_50ms_Timer+0x68>)
   1cf9e:	4798      	blx	r3
   1cfa0:	0003      	movs	r3, r0
   1cfa2:	60fb      	str	r3, [r7, #12]
	//--------------------------------
	for( ;; )
	{
		vTaskDelayUntil(&xLastExecutionGsm_Send_Time, (25/portTICK_PERIOD_MS));
   1cfa4:	230c      	movs	r3, #12
   1cfa6:	18fb      	adds	r3, r7, r3
   1cfa8:	2119      	movs	r1, #25
   1cfaa:	0018      	movs	r0, r3
   1cfac:	4b14      	ldr	r3, [pc, #80]	; (1d000 <vTask_50ms_Timer+0x6c>)
   1cfae:	4798      	blx	r3
		if(buttonEventOccured)
   1cfb0:	4b14      	ldr	r3, [pc, #80]	; (1d004 <vTask_50ms_Timer+0x70>)
   1cfb2:	781b      	ldrb	r3, [r3, #0]
   1cfb4:	b2db      	uxtb	r3, r3
   1cfb6:	2b00      	cmp	r3, #0
   1cfb8:	d001      	beq.n	1cfbe <vTask_50ms_Timer+0x2a>
		{
			operateOnButtonEvent();
   1cfba:	4b13      	ldr	r3, [pc, #76]	; (1d008 <vTask_50ms_Timer+0x74>)
   1cfbc:	4798      	blx	r3
		}

		xSemaphoreTake(xButton_Semaphore,portMAX_DELAY);
   1cfbe:	4b13      	ldr	r3, [pc, #76]	; (1d00c <vTask_50ms_Timer+0x78>)
   1cfc0:	681a      	ldr	r2, [r3, #0]
   1cfc2:	2301      	movs	r3, #1
   1cfc4:	425b      	negs	r3, r3
   1cfc6:	0019      	movs	r1, r3
   1cfc8:	0010      	movs	r0, r2
   1cfca:	4b11      	ldr	r3, [pc, #68]	; (1d010 <vTask_50ms_Timer+0x7c>)
   1cfcc:	4798      	blx	r3
		if(lastButtonEvent>0)
   1cfce:	4b11      	ldr	r3, [pc, #68]	; (1d014 <vTask_50ms_Timer+0x80>)
   1cfd0:	781b      	ldrb	r3, [r3, #0]
   1cfd2:	b2db      	uxtb	r3, r3
   1cfd4:	2b00      	cmp	r3, #0
   1cfd6:	d008      	beq.n	1cfea <vTask_50ms_Timer+0x56>
		{
			taskPSet=true;
   1cfd8:	4b0f      	ldr	r3, [pc, #60]	; (1d018 <vTask_50ms_Timer+0x84>)
   1cfda:	2201      	movs	r2, #1
   1cfdc:	701a      	strb	r2, [r3, #0]
			vTaskPrioritySet(motorTask,2);
   1cfde:	4b0f      	ldr	r3, [pc, #60]	; (1d01c <vTask_50ms_Timer+0x88>)
   1cfe0:	681b      	ldr	r3, [r3, #0]
   1cfe2:	2102      	movs	r1, #2
   1cfe4:	0018      	movs	r0, r3
   1cfe6:	4b0e      	ldr	r3, [pc, #56]	; (1d020 <vTask_50ms_Timer+0x8c>)
   1cfe8:	4798      	blx	r3
		}
		xSemaphoreGive(xButton_Semaphore);
   1cfea:	4b08      	ldr	r3, [pc, #32]	; (1d00c <vTask_50ms_Timer+0x78>)
   1cfec:	6818      	ldr	r0, [r3, #0]
   1cfee:	2300      	movs	r3, #0
   1cff0:	2200      	movs	r2, #0
   1cff2:	2100      	movs	r1, #0
   1cff4:	4c0b      	ldr	r4, [pc, #44]	; (1d024 <vTask_50ms_Timer+0x90>)
   1cff6:	47a0      	blx	r4
		vTaskDelayUntil(&xLastExecutionGsm_Send_Time, (25/portTICK_PERIOD_MS));
   1cff8:	e7d4      	b.n	1cfa4 <vTask_50ms_Timer+0x10>
   1cffa:	46c0      	nop			; (mov r8, r8)
   1cffc:	000201cd 	.word	0x000201cd
   1d000:	0001fda1 	.word	0x0001fda1
   1d004:	2000099f 	.word	0x2000099f
   1d008:	0001ccfd 	.word	0x0001ccfd
   1d00c:	20000434 	.word	0x20000434
   1d010:	0001f561 	.word	0x0001f561
   1d014:	20000980 	.word	0x20000980
   1d018:	20000a80 	.word	0x20000a80
   1d01c:	20000438 	.word	0x20000438
   1d020:	0001fec5 	.word	0x0001fec5
   1d024:	0001f0c1 	.word	0x0001f0c1

0001d028 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
   1d028:	b580      	push	{r7, lr}
   1d02a:	b082      	sub	sp, #8
   1d02c:	af00      	add	r7, sp, #0
   1d02e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
   1d030:	687b      	ldr	r3, [r7, #4]
   1d032:	2200      	movs	r2, #0
   1d034:	701a      	strb	r2, [r3, #0]
}
   1d036:	46c0      	nop			; (mov r8, r8)
   1d038:	46bd      	mov	sp, r7
   1d03a:	b002      	add	sp, #8
   1d03c:	bd80      	pop	{r7, pc}
	...

0001d040 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
   1d040:	b580      	push	{r7, lr}
   1d042:	b082      	sub	sp, #8
   1d044:	af00      	add	r7, sp, #0
   1d046:	0002      	movs	r2, r0
   1d048:	6039      	str	r1, [r7, #0]
   1d04a:	1dfb      	adds	r3, r7, #7
   1d04c:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   1d04e:	1dfb      	adds	r3, r7, #7
   1d050:	781b      	ldrb	r3, [r3, #0]
   1d052:	2b01      	cmp	r3, #1
   1d054:	d00a      	beq.n	1d06c <system_apb_clock_set_mask+0x2c>
   1d056:	2b02      	cmp	r3, #2
   1d058:	d00f      	beq.n	1d07a <system_apb_clock_set_mask+0x3a>
   1d05a:	2b00      	cmp	r3, #0
   1d05c:	d114      	bne.n	1d088 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
   1d05e:	4b0e      	ldr	r3, [pc, #56]	; (1d098 <system_apb_clock_set_mask+0x58>)
   1d060:	4a0d      	ldr	r2, [pc, #52]	; (1d098 <system_apb_clock_set_mask+0x58>)
   1d062:	6991      	ldr	r1, [r2, #24]
   1d064:	683a      	ldr	r2, [r7, #0]
   1d066:	430a      	orrs	r2, r1
   1d068:	619a      	str	r2, [r3, #24]
			break;
   1d06a:	e00f      	b.n	1d08c <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
   1d06c:	4b0a      	ldr	r3, [pc, #40]	; (1d098 <system_apb_clock_set_mask+0x58>)
   1d06e:	4a0a      	ldr	r2, [pc, #40]	; (1d098 <system_apb_clock_set_mask+0x58>)
   1d070:	69d1      	ldr	r1, [r2, #28]
   1d072:	683a      	ldr	r2, [r7, #0]
   1d074:	430a      	orrs	r2, r1
   1d076:	61da      	str	r2, [r3, #28]
			break;
   1d078:	e008      	b.n	1d08c <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
   1d07a:	4b07      	ldr	r3, [pc, #28]	; (1d098 <system_apb_clock_set_mask+0x58>)
   1d07c:	4a06      	ldr	r2, [pc, #24]	; (1d098 <system_apb_clock_set_mask+0x58>)
   1d07e:	6a11      	ldr	r1, [r2, #32]
   1d080:	683a      	ldr	r2, [r7, #0]
   1d082:	430a      	orrs	r2, r1
   1d084:	621a      	str	r2, [r3, #32]
			break;
   1d086:	e001      	b.n	1d08c <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
   1d088:	2317      	movs	r3, #23
   1d08a:	e000      	b.n	1d08e <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
   1d08c:	2300      	movs	r3, #0
}
   1d08e:	0018      	movs	r0, r3
   1d090:	46bd      	mov	sp, r7
   1d092:	b002      	add	sp, #8
   1d094:	bd80      	pop	{r7, pc}
   1d096:	46c0      	nop			; (mov r8, r8)
   1d098:	40000400 	.word	0x40000400

0001d09c <ac_is_syncing>:
{
   1d09c:	b580      	push	{r7, lr}
   1d09e:	b084      	sub	sp, #16
   1d0a0:	af00      	add	r7, sp, #0
   1d0a2:	6078      	str	r0, [r7, #4]
	Ac *const ac_module = module_inst->hw;
   1d0a4:	687b      	ldr	r3, [r7, #4]
   1d0a6:	681b      	ldr	r3, [r3, #0]
   1d0a8:	60fb      	str	r3, [r7, #12]
	if (ac_module->STATUSB.reg & AC_STATUSB_SYNCBUSY) {
   1d0aa:	68fb      	ldr	r3, [r7, #12]
   1d0ac:	7a5b      	ldrb	r3, [r3, #9]
   1d0ae:	b2db      	uxtb	r3, r3
   1d0b0:	b25b      	sxtb	r3, r3
   1d0b2:	2b00      	cmp	r3, #0
   1d0b4:	da01      	bge.n	1d0ba <ac_is_syncing+0x1e>
		return true;
   1d0b6:	2301      	movs	r3, #1
   1d0b8:	e000      	b.n	1d0bc <ac_is_syncing+0x20>
	return false;
   1d0ba:	2300      	movs	r3, #0
}
   1d0bc:	0018      	movs	r0, r3
   1d0be:	46bd      	mov	sp, r7
   1d0c0:	b004      	add	sp, #16
   1d0c2:	bd80      	pop	{r7, pc}

0001d0c4 <_ac_set_config>:
#include "ac.h"

static enum status_code _ac_set_config(
		struct ac_module *const module_inst,
		struct ac_config *const config)
{
   1d0c4:	b580      	push	{r7, lr}
   1d0c6:	b086      	sub	sp, #24
   1d0c8:	af00      	add	r7, sp, #0
   1d0ca:	6078      	str	r0, [r7, #4]
   1d0cc:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(config);

	Ac *const ac_module = module_inst->hw;
   1d0ce:	687b      	ldr	r3, [r7, #4]
   1d0d0:	681b      	ldr	r3, [r3, #0]
   1d0d2:	60fb      	str	r3, [r7, #12]

	/* Use a temporary register for computing the control bits */
	uint32_t ctrla_temp = 0;
   1d0d4:	2300      	movs	r3, #0
   1d0d6:	617b      	str	r3, [r7, #20]

	/* Check if the comparators should be enabled during sleep */
	for (uint32_t i = 0; i < AC_PAIRS; i++) {
   1d0d8:	2300      	movs	r3, #0
   1d0da:	613b      	str	r3, [r7, #16]
   1d0dc:	e00f      	b.n	1d0fe <_ac_set_config+0x3a>
		if (config->run_in_standby[i] == true) {
   1d0de:	683a      	ldr	r2, [r7, #0]
   1d0e0:	693b      	ldr	r3, [r7, #16]
   1d0e2:	18d3      	adds	r3, r2, r3
   1d0e4:	781b      	ldrb	r3, [r3, #0]
   1d0e6:	2b00      	cmp	r3, #0
   1d0e8:	d006      	beq.n	1d0f8 <_ac_set_config+0x34>
			ctrla_temp |= (AC_CTRLA_RUNSTDBY_Msk << i);
   1d0ea:	2204      	movs	r2, #4
   1d0ec:	693b      	ldr	r3, [r7, #16]
   1d0ee:	409a      	lsls	r2, r3
   1d0f0:	0013      	movs	r3, r2
   1d0f2:	697a      	ldr	r2, [r7, #20]
   1d0f4:	4313      	orrs	r3, r2
   1d0f6:	617b      	str	r3, [r7, #20]
	for (uint32_t i = 0; i < AC_PAIRS; i++) {
   1d0f8:	693b      	ldr	r3, [r7, #16]
   1d0fa:	3301      	adds	r3, #1
   1d0fc:	613b      	str	r3, [r7, #16]
   1d0fe:	693b      	ldr	r3, [r7, #16]
   1d100:	2b00      	cmp	r3, #0
   1d102:	d0ec      	beq.n	1d0de <_ac_set_config+0x1a>
		}
	}

	while (ac_is_syncing(module_inst)) {
   1d104:	46c0      	nop			; (mov r8, r8)
   1d106:	687b      	ldr	r3, [r7, #4]
   1d108:	0018      	movs	r0, r3
   1d10a:	4b06      	ldr	r3, [pc, #24]	; (1d124 <_ac_set_config+0x60>)
   1d10c:	4798      	blx	r3
   1d10e:	1e03      	subs	r3, r0, #0
   1d110:	d1f9      	bne.n	1d106 <_ac_set_config+0x42>
		/* Wait until synchronization is complete */
	}

	/* Write the new comparator module control configuration */
	ac_module->CTRLA.reg = ctrla_temp;
   1d112:	697b      	ldr	r3, [r7, #20]
   1d114:	b2da      	uxtb	r2, r3
   1d116:	68fb      	ldr	r3, [r7, #12]
   1d118:	701a      	strb	r2, [r3, #0]

	return STATUS_OK;
   1d11a:	2300      	movs	r3, #0
}
   1d11c:	0018      	movs	r0, r3
   1d11e:	46bd      	mov	sp, r7
   1d120:	b006      	add	sp, #24
   1d122:	bd80      	pop	{r7, pc}
   1d124:	0001d09d 	.word	0x0001d09d

0001d128 <ac_init>:
 */
enum status_code ac_init(
		struct ac_module *const module_inst,
		Ac *const hw,
		struct ac_config *const config)
{
   1d128:	b580      	push	{r7, lr}
   1d12a:	b086      	sub	sp, #24
   1d12c:	af00      	add	r7, sp, #0
   1d12e:	60f8      	str	r0, [r7, #12]
   1d130:	60b9      	str	r1, [r7, #8]
   1d132:	607a      	str	r2, [r7, #4]
	Assert(module_inst);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module_inst->hw = hw;
   1d134:	68fb      	ldr	r3, [r7, #12]
   1d136:	68ba      	ldr	r2, [r7, #8]
   1d138:	601a      	str	r2, [r3, #0]

	/* Turn on the digital interface clock and GCLK */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   1d13a:	2314      	movs	r3, #20
   1d13c:	18fb      	adds	r3, r7, r3
   1d13e:	0018      	movs	r0, r3
   1d140:	4b2a      	ldr	r3, [pc, #168]	; (1d1ec <ac_init+0xc4>)
   1d142:	4798      	blx	r3

	if (hw == AC) {
   1d144:	68bb      	ldr	r3, [r7, #8]
   1d146:	4a2a      	ldr	r2, [pc, #168]	; (1d1f0 <ac_init+0xc8>)
   1d148:	4293      	cmp	r3, r2
   1d14a:	d121      	bne.n	1d190 <ac_init+0x68>
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_AC);
   1d14c:	2380      	movs	r3, #128	; 0x80
   1d14e:	029b      	lsls	r3, r3, #10
   1d150:	0019      	movs	r1, r3
   1d152:	2002      	movs	r0, #2
   1d154:	4b27      	ldr	r3, [pc, #156]	; (1d1f4 <ac_init+0xcc>)
   1d156:	4798      	blx	r3
		gclk_chan_conf.source_generator = config->dig_source_generator;
   1d158:	687b      	ldr	r3, [r7, #4]
   1d15a:	785a      	ldrb	r2, [r3, #1]
   1d15c:	2314      	movs	r3, #20
   1d15e:	18fb      	adds	r3, r7, r3
   1d160:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(AC_GCLK_ID_DIG, &gclk_chan_conf);
   1d162:	2314      	movs	r3, #20
   1d164:	18fb      	adds	r3, r7, r3
   1d166:	0019      	movs	r1, r3
   1d168:	201f      	movs	r0, #31
   1d16a:	4b23      	ldr	r3, [pc, #140]	; (1d1f8 <ac_init+0xd0>)
   1d16c:	4798      	blx	r3
		system_gclk_chan_enable(AC_GCLK_ID_DIG);
   1d16e:	201f      	movs	r0, #31
   1d170:	4b22      	ldr	r3, [pc, #136]	; (1d1fc <ac_init+0xd4>)
   1d172:	4798      	blx	r3
		gclk_chan_conf.source_generator = config->ana_source_generator;
   1d174:	687b      	ldr	r3, [r7, #4]
   1d176:	789a      	ldrb	r2, [r3, #2]
   1d178:	2314      	movs	r3, #20
   1d17a:	18fb      	adds	r3, r7, r3
   1d17c:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(AC_GCLK_ID_ANA, &gclk_chan_conf);
   1d17e:	2314      	movs	r3, #20
   1d180:	18fb      	adds	r3, r7, r3
   1d182:	0019      	movs	r1, r3
   1d184:	2020      	movs	r0, #32
   1d186:	4b1c      	ldr	r3, [pc, #112]	; (1d1f8 <ac_init+0xd0>)
   1d188:	4798      	blx	r3
		system_gclk_chan_enable(AC_GCLK_ID_ANA);
   1d18a:	2020      	movs	r0, #32
   1d18c:	4b1b      	ldr	r3, [pc, #108]	; (1d1fc <ac_init+0xd4>)
   1d18e:	4798      	blx	r3
#  error This driver is not support more than three AC instances.
#endif

#if AC_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint8_t i = 0; i < AC_CALLBACK_N; i++) {
   1d190:	2317      	movs	r3, #23
   1d192:	18fb      	adds	r3, r7, r3
   1d194:	2200      	movs	r2, #0
   1d196:	701a      	strb	r2, [r3, #0]
   1d198:	e00f      	b.n	1d1ba <ac_init+0x92>
		module_inst->callback[i]        = NULL;
   1d19a:	2317      	movs	r3, #23
   1d19c:	18fb      	adds	r3, r7, r3
   1d19e:	781b      	ldrb	r3, [r3, #0]
   1d1a0:	68fa      	ldr	r2, [r7, #12]
   1d1a2:	009b      	lsls	r3, r3, #2
   1d1a4:	18d3      	adds	r3, r2, r3
   1d1a6:	3304      	adds	r3, #4
   1d1a8:	2200      	movs	r2, #0
   1d1aa:	601a      	str	r2, [r3, #0]
	for (uint8_t i = 0; i < AC_CALLBACK_N; i++) {
   1d1ac:	2317      	movs	r3, #23
   1d1ae:	18fb      	adds	r3, r7, r3
   1d1b0:	781a      	ldrb	r2, [r3, #0]
   1d1b2:	2317      	movs	r3, #23
   1d1b4:	18fb      	adds	r3, r7, r3
   1d1b6:	3201      	adds	r2, #1
   1d1b8:	701a      	strb	r2, [r3, #0]
   1d1ba:	2317      	movs	r3, #23
   1d1bc:	18fb      	adds	r3, r7, r3
   1d1be:	781b      	ldrb	r3, [r3, #0]
   1d1c0:	2b04      	cmp	r3, #4
   1d1c2:	d9ea      	bls.n	1d19a <ac_init+0x72>
	}

	/* Initialize software flags*/
	module_inst->register_callback_mask = 0x00;
   1d1c4:	68fb      	ldr	r3, [r7, #12]
   1d1c6:	2200      	movs	r2, #0
   1d1c8:	761a      	strb	r2, [r3, #24]
	module_inst->enable_callback_mask   = 0x00;
   1d1ca:	68fb      	ldr	r3, [r7, #12]
   1d1cc:	2200      	movs	r2, #0
   1d1ce:	765a      	strb	r2, [r3, #25]

#  if (AC_INST_NUM == 1)
	_ac_instance[0] = module_inst;
   1d1d0:	4b0b      	ldr	r3, [pc, #44]	; (1d200 <ac_init+0xd8>)
   1d1d2:	68fa      	ldr	r2, [r7, #12]
   1d1d4:	601a      	str	r2, [r3, #0]
	_ac_instance[_ac_get_inst_index(hw)] = module_inst;
#  endif
#endif

	/* Write configuration to module */
	return _ac_set_config(module_inst, config);
   1d1d6:	687a      	ldr	r2, [r7, #4]
   1d1d8:	68fb      	ldr	r3, [r7, #12]
   1d1da:	0011      	movs	r1, r2
   1d1dc:	0018      	movs	r0, r3
   1d1de:	4b09      	ldr	r3, [pc, #36]	; (1d204 <ac_init+0xdc>)
   1d1e0:	4798      	blx	r3
   1d1e2:	0003      	movs	r3, r0
}
   1d1e4:	0018      	movs	r0, r3
   1d1e6:	46bd      	mov	sp, r7
   1d1e8:	b006      	add	sp, #24
   1d1ea:	bd80      	pop	{r7, pc}
   1d1ec:	0001d029 	.word	0x0001d029
   1d1f0:	42004400 	.word	0x42004400
   1d1f4:	0001d041 	.word	0x0001d041
   1d1f8:	00024715 	.word	0x00024715
   1d1fc:	00024759 	.word	0x00024759
   1d200:	20000b84 	.word	0x20000b84
   1d204:	0001d0c5 	.word	0x0001d0c5

0001d208 <ac_chan_set_config>:
 */
enum status_code ac_chan_set_config(
		struct ac_module *const module_inst,
		const enum ac_chan_channel channel,
		struct ac_chan_config *const config)
{
   1d208:	b580      	push	{r7, lr}
   1d20a:	b086      	sub	sp, #24
   1d20c:	af00      	add	r7, sp, #0
   1d20e:	60f8      	str	r0, [r7, #12]
   1d210:	607a      	str	r2, [r7, #4]
   1d212:	230b      	movs	r3, #11
   1d214:	18fb      	adds	r3, r7, r3
   1d216:	1c0a      	adds	r2, r1, #0
   1d218:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(config);

	Ac *const ac_module = module_inst->hw;
   1d21a:	68fb      	ldr	r3, [r7, #12]
   1d21c:	681b      	ldr	r3, [r3, #0]
   1d21e:	613b      	str	r3, [r7, #16]

	/* Use a temporary variable to compute the comparator configuration */
	uint32_t compctrl_temp = 0;
   1d220:	2300      	movs	r3, #0
   1d222:	617b      	str	r3, [r7, #20]

	/* Enable output filter mode */
	compctrl_temp |= config->filter;
   1d224:	687b      	ldr	r3, [r7, #4]
   1d226:	685b      	ldr	r3, [r3, #4]
   1d228:	697a      	ldr	r2, [r7, #20]
   1d22a:	4313      	orrs	r3, r2
   1d22c:	617b      	str	r3, [r7, #20]

	/* Enable output hysteresis if required */
	if (config->enable_hysteresis == true) {
   1d22e:	687b      	ldr	r3, [r7, #4]
   1d230:	7a1b      	ldrb	r3, [r3, #8]
   1d232:	2b00      	cmp	r3, #0
   1d234:	d004      	beq.n	1d240 <ac_chan_set_config+0x38>
		compctrl_temp |= AC_COMPCTRL_HYST;
   1d236:	697b      	ldr	r3, [r7, #20]
   1d238:	2280      	movs	r2, #128	; 0x80
   1d23a:	0312      	lsls	r2, r2, #12
   1d23c:	4313      	orrs	r3, r2
   1d23e:	617b      	str	r3, [r7, #20]
	}

	/* Set output signal routing mode */
	compctrl_temp |= config->output_mode;
   1d240:	687b      	ldr	r3, [r7, #4]
   1d242:	68db      	ldr	r3, [r3, #12]
   1d244:	697a      	ldr	r2, [r7, #20]
   1d246:	4313      	orrs	r3, r2
   1d248:	617b      	str	r3, [r7, #20]

	/* Configure comparator positive and negative pin MUX configurations */
	compctrl_temp |=
			(uint32_t)config->positive_input |
   1d24a:	687b      	ldr	r3, [r7, #4]
   1d24c:	8a1a      	ldrh	r2, [r3, #16]
			(uint32_t)config->negative_input;
   1d24e:	687b      	ldr	r3, [r7, #4]
   1d250:	8a5b      	ldrh	r3, [r3, #18]
			(uint32_t)config->positive_input |
   1d252:	4313      	orrs	r3, r2
   1d254:	b29b      	uxth	r3, r3
   1d256:	001a      	movs	r2, r3
	compctrl_temp |=
   1d258:	697b      	ldr	r3, [r7, #20]
   1d25a:	4313      	orrs	r3, r2
   1d25c:	617b      	str	r3, [r7, #20]

	/* Set sampling mode (single shot or continuous) */
	compctrl_temp |= config->sample_mode;
   1d25e:	687b      	ldr	r3, [r7, #4]
   1d260:	781b      	ldrb	r3, [r3, #0]
   1d262:	001a      	movs	r2, r3
   1d264:	697b      	ldr	r3, [r7, #20]
   1d266:	4313      	orrs	r3, r2
   1d268:	617b      	str	r3, [r7, #20]

	/* Set channel interrupt selection */
	compctrl_temp |= config->interrupt_selection;
   1d26a:	687b      	ldr	r3, [r7, #4]
   1d26c:	7d5b      	ldrb	r3, [r3, #21]
   1d26e:	001a      	movs	r2, r3
   1d270:	697b      	ldr	r3, [r7, #20]
   1d272:	4313      	orrs	r3, r2
   1d274:	617b      	str	r3, [r7, #20]

	while (ac_is_syncing(module_inst)) {
   1d276:	46c0      	nop			; (mov r8, r8)
   1d278:	68fb      	ldr	r3, [r7, #12]
   1d27a:	0018      	movs	r0, r3
   1d27c:	4b0e      	ldr	r3, [pc, #56]	; (1d2b8 <ac_chan_set_config+0xb0>)
   1d27e:	4798      	blx	r3
   1d280:	1e03      	subs	r3, r0, #0
   1d282:	d1f9      	bne.n	1d278 <ac_chan_set_config+0x70>
		/* Wait until synchronization is complete */
	}

	/* Write the final configuration to the module's control register */
	ac_module->COMPCTRL[(uint8_t)channel].reg = compctrl_temp;
   1d284:	230b      	movs	r3, #11
   1d286:	18fb      	adds	r3, r7, r3
   1d288:	781a      	ldrb	r2, [r3, #0]
   1d28a:	693b      	ldr	r3, [r7, #16]
   1d28c:	3204      	adds	r2, #4
   1d28e:	0092      	lsls	r2, r2, #2
   1d290:	6979      	ldr	r1, [r7, #20]
   1d292:	50d1      	str	r1, [r2, r3]

	/* Configure VCC voltage scaling for the comparator */
	ac_module->SCALER[(uint8_t)channel].reg   = config->vcc_scale_factor - 1;
   1d294:	230b      	movs	r3, #11
   1d296:	18fb      	adds	r3, r7, r3
   1d298:	781b      	ldrb	r3, [r3, #0]
   1d29a:	687a      	ldr	r2, [r7, #4]
   1d29c:	7d12      	ldrb	r2, [r2, #20]
   1d29e:	3a01      	subs	r2, #1
   1d2a0:	b2d0      	uxtb	r0, r2
   1d2a2:	693a      	ldr	r2, [r7, #16]
   1d2a4:	2120      	movs	r1, #32
   1d2a6:	18d3      	adds	r3, r2, r3
   1d2a8:	185b      	adds	r3, r3, r1
   1d2aa:	1c02      	adds	r2, r0, #0
   1d2ac:	701a      	strb	r2, [r3, #0]

	return STATUS_OK;
   1d2ae:	2300      	movs	r3, #0
}
   1d2b0:	0018      	movs	r0, r3
   1d2b2:	46bd      	mov	sp, r7
   1d2b4:	b006      	add	sp, #24
   1d2b6:	bd80      	pop	{r7, pc}
   1d2b8:	0001d09d 	.word	0x0001d09d

0001d2bc <system_gclk_chan_get_config_defaults>:
{
   1d2bc:	b580      	push	{r7, lr}
   1d2be:	b082      	sub	sp, #8
   1d2c0:	af00      	add	r7, sp, #0
   1d2c2:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   1d2c4:	687b      	ldr	r3, [r7, #4]
   1d2c6:	2200      	movs	r2, #0
   1d2c8:	701a      	strb	r2, [r3, #0]
}
   1d2ca:	46c0      	nop			; (mov r8, r8)
   1d2cc:	46bd      	mov	sp, r7
   1d2ce:	b002      	add	sp, #8
   1d2d0:	bd80      	pop	{r7, pc}
	...

0001d2d4 <system_apb_clock_set_mask>:
{
   1d2d4:	b580      	push	{r7, lr}
   1d2d6:	b082      	sub	sp, #8
   1d2d8:	af00      	add	r7, sp, #0
   1d2da:	0002      	movs	r2, r0
   1d2dc:	6039      	str	r1, [r7, #0]
   1d2de:	1dfb      	adds	r3, r7, #7
   1d2e0:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   1d2e2:	1dfb      	adds	r3, r7, #7
   1d2e4:	781b      	ldrb	r3, [r3, #0]
   1d2e6:	2b01      	cmp	r3, #1
   1d2e8:	d00a      	beq.n	1d300 <system_apb_clock_set_mask+0x2c>
   1d2ea:	2b02      	cmp	r3, #2
   1d2ec:	d00f      	beq.n	1d30e <system_apb_clock_set_mask+0x3a>
   1d2ee:	2b00      	cmp	r3, #0
   1d2f0:	d114      	bne.n	1d31c <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   1d2f2:	4b0e      	ldr	r3, [pc, #56]	; (1d32c <system_apb_clock_set_mask+0x58>)
   1d2f4:	4a0d      	ldr	r2, [pc, #52]	; (1d32c <system_apb_clock_set_mask+0x58>)
   1d2f6:	6991      	ldr	r1, [r2, #24]
   1d2f8:	683a      	ldr	r2, [r7, #0]
   1d2fa:	430a      	orrs	r2, r1
   1d2fc:	619a      	str	r2, [r3, #24]
			break;
   1d2fe:	e00f      	b.n	1d320 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   1d300:	4b0a      	ldr	r3, [pc, #40]	; (1d32c <system_apb_clock_set_mask+0x58>)
   1d302:	4a0a      	ldr	r2, [pc, #40]	; (1d32c <system_apb_clock_set_mask+0x58>)
   1d304:	69d1      	ldr	r1, [r2, #28]
   1d306:	683a      	ldr	r2, [r7, #0]
   1d308:	430a      	orrs	r2, r1
   1d30a:	61da      	str	r2, [r3, #28]
			break;
   1d30c:	e008      	b.n	1d320 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   1d30e:	4b07      	ldr	r3, [pc, #28]	; (1d32c <system_apb_clock_set_mask+0x58>)
   1d310:	4a06      	ldr	r2, [pc, #24]	; (1d32c <system_apb_clock_set_mask+0x58>)
   1d312:	6a11      	ldr	r1, [r2, #32]
   1d314:	683a      	ldr	r2, [r7, #0]
   1d316:	430a      	orrs	r2, r1
   1d318:	621a      	str	r2, [r3, #32]
			break;
   1d31a:	e001      	b.n	1d320 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   1d31c:	2317      	movs	r3, #23
   1d31e:	e000      	b.n	1d322 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   1d320:	2300      	movs	r3, #0
}
   1d322:	0018      	movs	r0, r3
   1d324:	46bd      	mov	sp, r7
   1d326:	b002      	add	sp, #8
   1d328:	bd80      	pop	{r7, pc}
   1d32a:	46c0      	nop			; (mov r8, r8)
   1d32c:	40000400 	.word	0x40000400

0001d330 <system_pinmux_get_config_defaults>:
{
   1d330:	b580      	push	{r7, lr}
   1d332:	b082      	sub	sp, #8
   1d334:	af00      	add	r7, sp, #0
   1d336:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   1d338:	687b      	ldr	r3, [r7, #4]
   1d33a:	2280      	movs	r2, #128	; 0x80
   1d33c:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   1d33e:	687b      	ldr	r3, [r7, #4]
   1d340:	2200      	movs	r2, #0
   1d342:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   1d344:	687b      	ldr	r3, [r7, #4]
   1d346:	2201      	movs	r2, #1
   1d348:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   1d34a:	687b      	ldr	r3, [r7, #4]
   1d34c:	2200      	movs	r2, #0
   1d34e:	70da      	strb	r2, [r3, #3]
}
   1d350:	46c0      	nop			; (mov r8, r8)
   1d352:	46bd      	mov	sp, r7
   1d354:	b002      	add	sp, #8
   1d356:	bd80      	pop	{r7, pc}

0001d358 <system_voltage_reference_enable>:
 *
 * \param[in] vref  Voltage reference to enable
 */
static inline void system_voltage_reference_enable(
		const enum system_voltage_reference vref)
{
   1d358:	b580      	push	{r7, lr}
   1d35a:	b082      	sub	sp, #8
   1d35c:	af00      	add	r7, sp, #0
   1d35e:	0002      	movs	r2, r0
   1d360:	1dfb      	adds	r3, r7, #7
   1d362:	701a      	strb	r2, [r3, #0]
	switch (vref) {
   1d364:	1dfb      	adds	r3, r7, #7
   1d366:	781b      	ldrb	r3, [r3, #0]
   1d368:	2b00      	cmp	r3, #0
   1d36a:	d002      	beq.n	1d372 <system_voltage_reference_enable+0x1a>
   1d36c:	2b01      	cmp	r3, #1
   1d36e:	d007      	beq.n	1d380 <system_voltage_reference_enable+0x28>
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_BGOUTEN;
			break;

		default:
			Assert(false);
			return;
   1d370:	e00d      	b.n	1d38e <system_voltage_reference_enable+0x36>
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_TSEN;
   1d372:	4b08      	ldr	r3, [pc, #32]	; (1d394 <system_voltage_reference_enable+0x3c>)
   1d374:	4a07      	ldr	r2, [pc, #28]	; (1d394 <system_voltage_reference_enable+0x3c>)
   1d376:	6c12      	ldr	r2, [r2, #64]	; 0x40
   1d378:	2102      	movs	r1, #2
   1d37a:	430a      	orrs	r2, r1
   1d37c:	641a      	str	r2, [r3, #64]	; 0x40
			break;
   1d37e:	e006      	b.n	1d38e <system_voltage_reference_enable+0x36>
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_BGOUTEN;
   1d380:	4b04      	ldr	r3, [pc, #16]	; (1d394 <system_voltage_reference_enable+0x3c>)
   1d382:	4a04      	ldr	r2, [pc, #16]	; (1d394 <system_voltage_reference_enable+0x3c>)
   1d384:	6c12      	ldr	r2, [r2, #64]	; 0x40
   1d386:	2104      	movs	r1, #4
   1d388:	430a      	orrs	r2, r1
   1d38a:	641a      	str	r2, [r3, #64]	; 0x40
			break;
   1d38c:	46c0      	nop			; (mov r8, r8)
	}
}
   1d38e:	46bd      	mov	sp, r7
   1d390:	b002      	add	sp, #8
   1d392:	bd80      	pop	{r7, pc}
   1d394:	40000800 	.word	0x40000800

0001d398 <adc_is_syncing>:
{
   1d398:	b580      	push	{r7, lr}
   1d39a:	b084      	sub	sp, #16
   1d39c:	af00      	add	r7, sp, #0
   1d39e:	6078      	str	r0, [r7, #4]
	Adc *const adc_module = module_inst->hw;
   1d3a0:	687b      	ldr	r3, [r7, #4]
   1d3a2:	681b      	ldr	r3, [r3, #0]
   1d3a4:	60fb      	str	r3, [r7, #12]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
   1d3a6:	68fb      	ldr	r3, [r7, #12]
   1d3a8:	7e5b      	ldrb	r3, [r3, #25]
   1d3aa:	b2db      	uxtb	r3, r3
   1d3ac:	b25b      	sxtb	r3, r3
   1d3ae:	2b00      	cmp	r3, #0
   1d3b0:	da01      	bge.n	1d3b6 <adc_is_syncing+0x1e>
		return true;
   1d3b2:	2301      	movs	r3, #1
   1d3b4:	e000      	b.n	1d3b8 <adc_is_syncing+0x20>
	return false;
   1d3b6:	2300      	movs	r3, #0
}
   1d3b8:	0018      	movs	r0, r3
   1d3ba:	46bd      	mov	sp, r7
   1d3bc:	b004      	add	sp, #16
   1d3be:	bd80      	pop	{r7, pc}

0001d3c0 <adc_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration struct to initialize to
 *                     default values
 */
void adc_get_config_defaults(struct adc_config *const config)
{
   1d3c0:	b580      	push	{r7, lr}
   1d3c2:	b082      	sub	sp, #8
   1d3c4:	af00      	add	r7, sp, #0
   1d3c6:	6078      	str	r0, [r7, #4]
	Assert(config);
	config->clock_source                  = GCLK_GENERATOR_0;
   1d3c8:	687b      	ldr	r3, [r7, #4]
   1d3ca:	2200      	movs	r2, #0
   1d3cc:	701a      	strb	r2, [r3, #0]
	config->reference                     = ADC_REFERENCE_INT1V;
   1d3ce:	687b      	ldr	r3, [r7, #4]
   1d3d0:	2200      	movs	r2, #0
   1d3d2:	705a      	strb	r2, [r3, #1]
	config->clock_prescaler               = ADC_CLOCK_PRESCALER_DIV4;
   1d3d4:	687b      	ldr	r3, [r7, #4]
   1d3d6:	2200      	movs	r2, #0
   1d3d8:	805a      	strh	r2, [r3, #2]
	config->resolution                    = ADC_RESOLUTION_12BIT;
   1d3da:	687b      	ldr	r3, [r7, #4]
   1d3dc:	2200      	movs	r2, #0
   1d3de:	711a      	strb	r2, [r3, #4]
	config->window.window_mode            = ADC_WINDOW_MODE_DISABLE;
   1d3e0:	687b      	ldr	r3, [r7, #4]
   1d3e2:	2200      	movs	r2, #0
   1d3e4:	761a      	strb	r2, [r3, #24]
	config->window.window_upper_value     = 0;
   1d3e6:	687b      	ldr	r3, [r7, #4]
   1d3e8:	2200      	movs	r2, #0
   1d3ea:	621a      	str	r2, [r3, #32]
	config->window.window_lower_value     = 0;
   1d3ec:	687b      	ldr	r3, [r7, #4]
   1d3ee:	2200      	movs	r2, #0
   1d3f0:	61da      	str	r2, [r3, #28]
	config->gain_factor                   = ADC_GAIN_FACTOR_1X;
   1d3f2:	687b      	ldr	r3, [r7, #4]
   1d3f4:	2200      	movs	r2, #0
   1d3f6:	609a      	str	r2, [r3, #8]
#if SAMR21
	config->positive_input                = ADC_POSITIVE_INPUT_PIN6 ;
#else
 	config->positive_input                = ADC_POSITIVE_INPUT_PIN0 ;
   1d3f8:	687b      	ldr	r3, [r7, #4]
   1d3fa:	2200      	movs	r2, #0
   1d3fc:	731a      	strb	r2, [r3, #12]
#endif
	config->negative_input                = ADC_NEGATIVE_INPUT_GND ;
   1d3fe:	687b      	ldr	r3, [r7, #4]
   1d400:	22c0      	movs	r2, #192	; 0xc0
   1d402:	0152      	lsls	r2, r2, #5
   1d404:	81da      	strh	r2, [r3, #14]
	config->accumulate_samples            = ADC_ACCUMULATE_DISABLE;
   1d406:	687b      	ldr	r3, [r7, #4]
   1d408:	2200      	movs	r2, #0
   1d40a:	741a      	strb	r2, [r3, #16]
	config->divide_result                 = ADC_DIVIDE_RESULT_DISABLE;
   1d40c:	687b      	ldr	r3, [r7, #4]
   1d40e:	2200      	movs	r2, #0
   1d410:	745a      	strb	r2, [r3, #17]
	config->left_adjust                   = false;
   1d412:	687b      	ldr	r3, [r7, #4]
   1d414:	2200      	movs	r2, #0
   1d416:	749a      	strb	r2, [r3, #18]
	config->differential_mode             = false;
   1d418:	687b      	ldr	r3, [r7, #4]
   1d41a:	2200      	movs	r2, #0
   1d41c:	74da      	strb	r2, [r3, #19]
	config->freerunning                   = false;
   1d41e:	687b      	ldr	r3, [r7, #4]
   1d420:	2200      	movs	r2, #0
   1d422:	751a      	strb	r2, [r3, #20]
	config->event_action                  = ADC_EVENT_ACTION_DISABLED;
   1d424:	687b      	ldr	r3, [r7, #4]
   1d426:	222a      	movs	r2, #42	; 0x2a
   1d428:	2100      	movs	r1, #0
   1d42a:	5499      	strb	r1, [r3, r2]
	config->run_in_standby                = false;
   1d42c:	687b      	ldr	r3, [r7, #4]
   1d42e:	2200      	movs	r2, #0
   1d430:	755a      	strb	r2, [r3, #21]
	config->reference_compensation_enable = false;
   1d432:	687b      	ldr	r3, [r7, #4]
   1d434:	2200      	movs	r2, #0
   1d436:	759a      	strb	r2, [r3, #22]
	config->correction.correction_enable  = false;
   1d438:	687b      	ldr	r3, [r7, #4]
   1d43a:	2224      	movs	r2, #36	; 0x24
   1d43c:	2100      	movs	r1, #0
   1d43e:	5499      	strb	r1, [r3, r2]
	config->correction.gain_correction    = ADC_GAINCORR_RESETVALUE;
   1d440:	687b      	ldr	r3, [r7, #4]
   1d442:	2200      	movs	r2, #0
   1d444:	84da      	strh	r2, [r3, #38]	; 0x26
	config->correction.offset_correction  = ADC_OFFSETCORR_RESETVALUE;
   1d446:	687b      	ldr	r3, [r7, #4]
   1d448:	2200      	movs	r2, #0
   1d44a:	851a      	strh	r2, [r3, #40]	; 0x28
	config->sample_length                 = 0;
   1d44c:	687b      	ldr	r3, [r7, #4]
   1d44e:	2200      	movs	r2, #0
   1d450:	75da      	strb	r2, [r3, #23]
	config->pin_scan.offset_start_scan    = 0;
   1d452:	687b      	ldr	r3, [r7, #4]
   1d454:	222b      	movs	r2, #43	; 0x2b
   1d456:	2100      	movs	r1, #0
   1d458:	5499      	strb	r1, [r3, r2]
	config->pin_scan.inputs_to_scan       = 0;
   1d45a:	687b      	ldr	r3, [r7, #4]
   1d45c:	222c      	movs	r2, #44	; 0x2c
   1d45e:	2100      	movs	r1, #0
   1d460:	5499      	strb	r1, [r3, r2]
}
   1d462:	46c0      	nop			; (mov r8, r8)
   1d464:	46bd      	mov	sp, r7
   1d466:	b002      	add	sp, #8
   1d468:	bd80      	pop	{r7, pc}
	...

0001d46c <_adc_configure_ain_pin>:
* the ADC access to the analog signal
*
* \param [in] pin AINxx pin to configure
*/
static inline void _adc_configure_ain_pin(uint32_t pin)
{
   1d46c:	b580      	push	{r7, lr}
   1d46e:	b098      	sub	sp, #96	; 0x60
   1d470:	af00      	add	r7, sp, #0
   1d472:	6078      	str	r0, [r7, #4]
#define PIN_INVALID_ADC_AIN    0xFFFFUL

	/* Pinmapping table for AINxx -> GPIO pin number */
	const uint32_t pinmapping[] = {
   1d474:	230c      	movs	r3, #12
   1d476:	18fa      	adds	r2, r7, r3
   1d478:	4b15      	ldr	r3, [pc, #84]	; (1d4d0 <_adc_configure_ain_pin+0x64>)
   1d47a:	0010      	movs	r0, r2
   1d47c:	0019      	movs	r1, r3
   1d47e:	2350      	movs	r3, #80	; 0x50
   1d480:	001a      	movs	r2, r3
   1d482:	4b14      	ldr	r3, [pc, #80]	; (1d4d4 <_adc_configure_ain_pin+0x68>)
   1d484:	4798      	blx	r3
#else
#  error ADC pin mappings are not defined for this device.
#endif
		};

	uint32_t pin_map_result = PIN_INVALID_ADC_AIN;
   1d486:	4b14      	ldr	r3, [pc, #80]	; (1d4d8 <_adc_configure_ain_pin+0x6c>)
   1d488:	65fb      	str	r3, [r7, #92]	; 0x5c

	if (pin <= ADC_EXTCHANNEL_MSB) {
   1d48a:	687b      	ldr	r3, [r7, #4]
   1d48c:	2b13      	cmp	r3, #19
   1d48e:	d81a      	bhi.n	1d4c6 <_adc_configure_ain_pin+0x5a>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
   1d490:	230c      	movs	r3, #12
   1d492:	18fb      	adds	r3, r7, r3
   1d494:	687a      	ldr	r2, [r7, #4]
   1d496:	0092      	lsls	r2, r2, #2
   1d498:	58d3      	ldr	r3, [r2, r3]
   1d49a:	65fb      	str	r3, [r7, #92]	; 0x5c

		Assert(pin_map_result != PIN_INVALID_ADC_AIN);

		struct system_pinmux_config config;
		system_pinmux_get_config_defaults(&config);
   1d49c:	2308      	movs	r3, #8
   1d49e:	18fb      	adds	r3, r7, r3
   1d4a0:	0018      	movs	r0, r3
   1d4a2:	4b0e      	ldr	r3, [pc, #56]	; (1d4dc <_adc_configure_ain_pin+0x70>)
   1d4a4:	4798      	blx	r3

		/* Analog functions are all on MUX setting B */
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
   1d4a6:	2308      	movs	r3, #8
   1d4a8:	18fb      	adds	r3, r7, r3
   1d4aa:	2200      	movs	r2, #0
   1d4ac:	709a      	strb	r2, [r3, #2]
		config.mux_position = 1;
   1d4ae:	2308      	movs	r3, #8
   1d4b0:	18fb      	adds	r3, r7, r3
   1d4b2:	2201      	movs	r2, #1
   1d4b4:	701a      	strb	r2, [r3, #0]

		system_pinmux_pin_set_config(pin_map_result, &config);
   1d4b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   1d4b8:	b2db      	uxtb	r3, r3
   1d4ba:	2208      	movs	r2, #8
   1d4bc:	18ba      	adds	r2, r7, r2
   1d4be:	0011      	movs	r1, r2
   1d4c0:	0018      	movs	r0, r3
   1d4c2:	4b07      	ldr	r3, [pc, #28]	; (1d4e0 <_adc_configure_ain_pin+0x74>)
   1d4c4:	4798      	blx	r3
	}
}
   1d4c6:	46c0      	nop			; (mov r8, r8)
   1d4c8:	46bd      	mov	sp, r7
   1d4ca:	b018      	add	sp, #96	; 0x60
   1d4cc:	bd80      	pop	{r7, pc}
   1d4ce:	46c0      	nop			; (mov r8, r8)
   1d4d0:	0002a79c 	.word	0x0002a79c
   1d4d4:	00028b21 	.word	0x00028b21
   1d4d8:	0000ffff 	.word	0x0000ffff
   1d4dc:	0001d331 	.word	0x0001d331
   1d4e0:	00024a01 	.word	0x00024a01

0001d4e4 <_adc_set_config>:
 * \retval STATUS_ERR_INVALID_ARG  Invalid argument(s) were provided
 */
static enum status_code _adc_set_config(
		struct adc_module *const module_inst,
		struct adc_config *const config)
{
   1d4e4:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d4e6:	b089      	sub	sp, #36	; 0x24
   1d4e8:	af00      	add	r7, sp, #0
   1d4ea:	6078      	str	r0, [r7, #4]
   1d4ec:	6039      	str	r1, [r7, #0]
	uint8_t adjres = 0;
   1d4ee:	231f      	movs	r3, #31
   1d4f0:	18fb      	adds	r3, r7, r3
   1d4f2:	2200      	movs	r2, #0
   1d4f4:	701a      	strb	r2, [r3, #0]
	uint32_t resolution = ADC_RESOLUTION_16BIT;
   1d4f6:	2310      	movs	r3, #16
   1d4f8:	61bb      	str	r3, [r7, #24]
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
   1d4fa:	2317      	movs	r3, #23
   1d4fc:	18fb      	adds	r3, r7, r3
   1d4fe:	2200      	movs	r2, #0
   1d500:	701a      	strb	r2, [r3, #0]
#if SAMD20
	uint8_t revision_num = ((REG_DSU_DID & DSU_DID_REVISION_Msk) >> DSU_DID_REVISION_Pos);
#endif

	/* Get the hardware module pointer */
	Adc *const adc_module = module_inst->hw;
   1d502:	687b      	ldr	r3, [r7, #4]
   1d504:	681b      	ldr	r3, [r3, #0]
   1d506:	613b      	str	r3, [r7, #16]

	/* Configure GCLK channel and enable clock */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   1d508:	230c      	movs	r3, #12
   1d50a:	18fb      	adds	r3, r7, r3
   1d50c:	0018      	movs	r0, r3
   1d50e:	4bce      	ldr	r3, [pc, #824]	; (1d848 <_adc_set_config+0x364>)
   1d510:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->clock_source;
   1d512:	683b      	ldr	r3, [r7, #0]
   1d514:	781a      	ldrb	r2, [r3, #0]
   1d516:	230c      	movs	r3, #12
   1d518:	18fb      	adds	r3, r7, r3
   1d51a:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(ADC_GCLK_ID, &gclk_chan_conf);
   1d51c:	230c      	movs	r3, #12
   1d51e:	18fb      	adds	r3, r7, r3
   1d520:	0019      	movs	r1, r3
   1d522:	201e      	movs	r0, #30
   1d524:	4bc9      	ldr	r3, [pc, #804]	; (1d84c <_adc_set_config+0x368>)
   1d526:	4798      	blx	r3
	system_gclk_chan_enable(ADC_GCLK_ID);
   1d528:	201e      	movs	r0, #30
   1d52a:	4bc9      	ldr	r3, [pc, #804]	; (1d850 <_adc_set_config+0x36c>)
   1d52c:	4798      	blx	r3

	/* Setup pinmuxing for analog inputs */
	if (config->pin_scan.inputs_to_scan != 0) {
   1d52e:	683b      	ldr	r3, [r7, #0]
   1d530:	222c      	movs	r2, #44	; 0x2c
   1d532:	5c9b      	ldrb	r3, [r3, r2]
   1d534:	2b00      	cmp	r3, #0
   1d536:	d040      	beq.n	1d5ba <_adc_set_config+0xd6>
		uint8_t offset = config->pin_scan.offset_start_scan;
   1d538:	2316      	movs	r3, #22
   1d53a:	18fb      	adds	r3, r7, r3
   1d53c:	683a      	ldr	r2, [r7, #0]
   1d53e:	212b      	movs	r1, #43	; 0x2b
   1d540:	5c52      	ldrb	r2, [r2, r1]
   1d542:	701a      	strb	r2, [r3, #0]
		uint8_t start_pin =
				offset +(uint8_t)config->positive_input;
   1d544:	683b      	ldr	r3, [r7, #0]
   1d546:	7b19      	ldrb	r1, [r3, #12]
		uint8_t start_pin =
   1d548:	2315      	movs	r3, #21
   1d54a:	18fb      	adds	r3, r7, r3
   1d54c:	2216      	movs	r2, #22
   1d54e:	18ba      	adds	r2, r7, r2
   1d550:	7812      	ldrb	r2, [r2, #0]
   1d552:	188a      	adds	r2, r1, r2
   1d554:	701a      	strb	r2, [r3, #0]
		uint8_t end_pin =
				start_pin + config->pin_scan.inputs_to_scan;
   1d556:	683b      	ldr	r3, [r7, #0]
   1d558:	222c      	movs	r2, #44	; 0x2c
   1d55a:	5c99      	ldrb	r1, [r3, r2]
		uint8_t end_pin =
   1d55c:	230f      	movs	r3, #15
   1d55e:	18fb      	adds	r3, r7, r3
   1d560:	2215      	movs	r2, #21
   1d562:	18ba      	adds	r2, r7, r2
   1d564:	7812      	ldrb	r2, [r2, #0]
   1d566:	188a      	adds	r2, r1, r2
   1d568:	701a      	strb	r2, [r3, #0]

		while (start_pin < end_pin) {
   1d56a:	e018      	b.n	1d59e <_adc_set_config+0xba>
			_adc_configure_ain_pin((offset % 16)+(uint8_t)config->positive_input);
   1d56c:	2316      	movs	r3, #22
   1d56e:	18fb      	adds	r3, r7, r3
   1d570:	781b      	ldrb	r3, [r3, #0]
   1d572:	220f      	movs	r2, #15
   1d574:	4013      	ands	r3, r2
   1d576:	683a      	ldr	r2, [r7, #0]
   1d578:	7b12      	ldrb	r2, [r2, #12]
   1d57a:	189b      	adds	r3, r3, r2
   1d57c:	0018      	movs	r0, r3
   1d57e:	4bb5      	ldr	r3, [pc, #724]	; (1d854 <_adc_set_config+0x370>)
   1d580:	4798      	blx	r3
			start_pin++;
   1d582:	2315      	movs	r3, #21
   1d584:	18fb      	adds	r3, r7, r3
   1d586:	781a      	ldrb	r2, [r3, #0]
   1d588:	2315      	movs	r3, #21
   1d58a:	18fb      	adds	r3, r7, r3
   1d58c:	3201      	adds	r2, #1
   1d58e:	701a      	strb	r2, [r3, #0]
			offset++;
   1d590:	2316      	movs	r3, #22
   1d592:	18fb      	adds	r3, r7, r3
   1d594:	781a      	ldrb	r2, [r3, #0]
   1d596:	2316      	movs	r3, #22
   1d598:	18fb      	adds	r3, r7, r3
   1d59a:	3201      	adds	r2, #1
   1d59c:	701a      	strb	r2, [r3, #0]
		while (start_pin < end_pin) {
   1d59e:	2315      	movs	r3, #21
   1d5a0:	18fa      	adds	r2, r7, r3
   1d5a2:	230f      	movs	r3, #15
   1d5a4:	18fb      	adds	r3, r7, r3
   1d5a6:	7812      	ldrb	r2, [r2, #0]
   1d5a8:	781b      	ldrb	r3, [r3, #0]
   1d5aa:	429a      	cmp	r2, r3
   1d5ac:	d3de      	bcc.n	1d56c <_adc_set_config+0x88>
		}
		_adc_configure_ain_pin(config->negative_input);
   1d5ae:	683b      	ldr	r3, [r7, #0]
   1d5b0:	89db      	ldrh	r3, [r3, #14]
   1d5b2:	0018      	movs	r0, r3
   1d5b4:	4ba7      	ldr	r3, [pc, #668]	; (1d854 <_adc_set_config+0x370>)
   1d5b6:	4798      	blx	r3
   1d5b8:	e009      	b.n	1d5ce <_adc_set_config+0xea>
	} else {
		_adc_configure_ain_pin(config->positive_input);
   1d5ba:	683b      	ldr	r3, [r7, #0]
   1d5bc:	7b1b      	ldrb	r3, [r3, #12]
   1d5be:	0018      	movs	r0, r3
   1d5c0:	4ba4      	ldr	r3, [pc, #656]	; (1d854 <_adc_set_config+0x370>)
   1d5c2:	4798      	blx	r3
		_adc_configure_ain_pin(config->negative_input);
   1d5c4:	683b      	ldr	r3, [r7, #0]
   1d5c6:	89db      	ldrh	r3, [r3, #14]
   1d5c8:	0018      	movs	r0, r3
   1d5ca:	4ba2      	ldr	r3, [pc, #648]	; (1d854 <_adc_set_config+0x370>)
   1d5cc:	4798      	blx	r3
	}

	/* Configure run in standby */
	adc_module->CTRLA.reg = (config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos);
   1d5ce:	683b      	ldr	r3, [r7, #0]
   1d5d0:	7d5b      	ldrb	r3, [r3, #21]
   1d5d2:	009b      	lsls	r3, r3, #2
   1d5d4:	b2da      	uxtb	r2, r3
   1d5d6:	693b      	ldr	r3, [r7, #16]
   1d5d8:	701a      	strb	r2, [r3, #0]

	/* Configure reference */
	adc_module->REFCTRL.reg =
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
   1d5da:	683b      	ldr	r3, [r7, #0]
   1d5dc:	7d9b      	ldrb	r3, [r3, #22]
   1d5de:	01db      	lsls	r3, r3, #7
   1d5e0:	b25a      	sxtb	r2, r3
			(config->reference);
   1d5e2:	683b      	ldr	r3, [r7, #0]
   1d5e4:	785b      	ldrb	r3, [r3, #1]
   1d5e6:	b25b      	sxtb	r3, r3
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
   1d5e8:	4313      	orrs	r3, r2
   1d5ea:	b25b      	sxtb	r3, r3
   1d5ec:	b2da      	uxtb	r2, r3
	adc_module->REFCTRL.reg =
   1d5ee:	693b      	ldr	r3, [r7, #16]
   1d5f0:	705a      	strb	r2, [r3, #1]

	/* Set adjusting result and number of samples */
	switch (config->resolution) {
   1d5f2:	683b      	ldr	r3, [r7, #0]
   1d5f4:	791b      	ldrb	r3, [r3, #4]
   1d5f6:	2b34      	cmp	r3, #52	; 0x34
   1d5f8:	d846      	bhi.n	1d688 <_adc_set_config+0x1a4>
   1d5fa:	009a      	lsls	r2, r3, #2
   1d5fc:	4b96      	ldr	r3, [pc, #600]	; (1d858 <_adc_set_config+0x374>)
   1d5fe:	18d3      	adds	r3, r2, r3
   1d600:	681b      	ldr	r3, [r3, #0]
   1d602:	469f      	mov	pc, r3

	case ADC_RESOLUTION_CUSTOM:
		adjres = config->divide_result;
   1d604:	231f      	movs	r3, #31
   1d606:	18fb      	adds	r3, r7, r3
   1d608:	683a      	ldr	r2, [r7, #0]
   1d60a:	7c52      	ldrb	r2, [r2, #17]
   1d60c:	701a      	strb	r2, [r3, #0]
		accumulate = config->accumulate_samples;
   1d60e:	2317      	movs	r3, #23
   1d610:	18fb      	adds	r3, r7, r3
   1d612:	683a      	ldr	r2, [r7, #0]
   1d614:	7c12      	ldrb	r2, [r2, #16]
   1d616:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
   1d618:	2310      	movs	r3, #16
   1d61a:	61bb      	str	r3, [r7, #24]
		break;
   1d61c:	e036      	b.n	1d68c <_adc_set_config+0x1a8>

	case ADC_RESOLUTION_13BIT:
		/* Increase resolution by 1 bit */
		adjres = ADC_DIVIDE_RESULT_2;
   1d61e:	231f      	movs	r3, #31
   1d620:	18fb      	adds	r3, r7, r3
   1d622:	2201      	movs	r2, #1
   1d624:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_4;
   1d626:	2317      	movs	r3, #23
   1d628:	18fb      	adds	r3, r7, r3
   1d62a:	2202      	movs	r2, #2
   1d62c:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
   1d62e:	2310      	movs	r3, #16
   1d630:	61bb      	str	r3, [r7, #24]
		break;
   1d632:	e02b      	b.n	1d68c <_adc_set_config+0x1a8>

	case ADC_RESOLUTION_14BIT:
		/* Increase resolution by 2 bit */
		adjres = ADC_DIVIDE_RESULT_4;
   1d634:	231f      	movs	r3, #31
   1d636:	18fb      	adds	r3, r7, r3
   1d638:	2202      	movs	r2, #2
   1d63a:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_16;
   1d63c:	2317      	movs	r3, #23
   1d63e:	18fb      	adds	r3, r7, r3
   1d640:	2204      	movs	r2, #4
   1d642:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
   1d644:	2310      	movs	r3, #16
   1d646:	61bb      	str	r3, [r7, #24]
		break;
   1d648:	e020      	b.n	1d68c <_adc_set_config+0x1a8>
		resolution = ADC_RESOLUTION_16BIT;
		break;
#else
	case ADC_RESOLUTION_15BIT:
		/* Increase resolution by 3 bit */
		adjres = ADC_DIVIDE_RESULT_2;
   1d64a:	231f      	movs	r3, #31
   1d64c:	18fb      	adds	r3, r7, r3
   1d64e:	2201      	movs	r2, #1
   1d650:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_64;
   1d652:	2317      	movs	r3, #23
   1d654:	18fb      	adds	r3, r7, r3
   1d656:	2206      	movs	r2, #6
   1d658:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
   1d65a:	2310      	movs	r3, #16
   1d65c:	61bb      	str	r3, [r7, #24]
		break;
   1d65e:	e015      	b.n	1d68c <_adc_set_config+0x1a8>

	case ADC_RESOLUTION_16BIT:
		/* Increase resolution by 4 bit */
		adjres = ADC_DIVIDE_RESULT_DISABLE;
   1d660:	231f      	movs	r3, #31
   1d662:	18fb      	adds	r3, r7, r3
   1d664:	2200      	movs	r2, #0
   1d666:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_256;
   1d668:	2317      	movs	r3, #23
   1d66a:	18fb      	adds	r3, r7, r3
   1d66c:	2208      	movs	r2, #8
   1d66e:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
   1d670:	2310      	movs	r3, #16
   1d672:	61bb      	str	r3, [r7, #24]
		break;
   1d674:	e00a      	b.n	1d68c <_adc_set_config+0x1a8>
#endif
	case ADC_RESOLUTION_8BIT:
		/* 8-bit result register */
		resolution = ADC_RESOLUTION_8BIT;
   1d676:	2330      	movs	r3, #48	; 0x30
   1d678:	61bb      	str	r3, [r7, #24]
		break;
   1d67a:	e007      	b.n	1d68c <_adc_set_config+0x1a8>
	case ADC_RESOLUTION_10BIT:
		/* 10-bit result register */
		resolution = ADC_RESOLUTION_10BIT;
   1d67c:	2320      	movs	r3, #32
   1d67e:	61bb      	str	r3, [r7, #24]
		break;
   1d680:	e004      	b.n	1d68c <_adc_set_config+0x1a8>
	case ADC_RESOLUTION_12BIT:
		/* 12-bit result register */
		resolution = ADC_RESOLUTION_12BIT;
   1d682:	2300      	movs	r3, #0
   1d684:	61bb      	str	r3, [r7, #24]
		break;
   1d686:	e001      	b.n	1d68c <_adc_set_config+0x1a8>

	default:
		/* Unknown. Abort. */
		return STATUS_ERR_INVALID_ARG;
   1d688:	2317      	movs	r3, #23
   1d68a:	e1ae      	b.n	1d9ea <_adc_set_config+0x506>
	}

	adc_module->AVGCTRL.reg = ADC_AVGCTRL_ADJRES(adjres) | accumulate;
   1d68c:	231f      	movs	r3, #31
   1d68e:	18fb      	adds	r3, r7, r3
   1d690:	781b      	ldrb	r3, [r3, #0]
   1d692:	011b      	lsls	r3, r3, #4
   1d694:	b2db      	uxtb	r3, r3
   1d696:	2270      	movs	r2, #112	; 0x70
   1d698:	4013      	ands	r3, r2
   1d69a:	b2da      	uxtb	r2, r3
   1d69c:	2317      	movs	r3, #23
   1d69e:	18fb      	adds	r3, r7, r3
   1d6a0:	781b      	ldrb	r3, [r3, #0]
   1d6a2:	4313      	orrs	r3, r2
   1d6a4:	b2da      	uxtb	r2, r3
   1d6a6:	693b      	ldr	r3, [r7, #16]
   1d6a8:	709a      	strb	r2, [r3, #2]

	/* Check validity of sample length value */
	if (config->sample_length > 63) {
   1d6aa:	683b      	ldr	r3, [r7, #0]
   1d6ac:	7ddb      	ldrb	r3, [r3, #23]
   1d6ae:	2b3f      	cmp	r3, #63	; 0x3f
   1d6b0:	d901      	bls.n	1d6b6 <_adc_set_config+0x1d2>
		return STATUS_ERR_INVALID_ARG;
   1d6b2:	2317      	movs	r3, #23
   1d6b4:	e199      	b.n	1d9ea <_adc_set_config+0x506>
	} else {
		/* Configure sample length */
		adc_module->SAMPCTRL.reg =
				(config->sample_length << ADC_SAMPCTRL_SAMPLEN_Pos);
   1d6b6:	683b      	ldr	r3, [r7, #0]
   1d6b8:	7dda      	ldrb	r2, [r3, #23]
		adc_module->SAMPCTRL.reg =
   1d6ba:	693b      	ldr	r3, [r7, #16]
   1d6bc:	70da      	strb	r2, [r3, #3]
	}

	while (adc_is_syncing(module_inst)) {
   1d6be:	46c0      	nop			; (mov r8, r8)
   1d6c0:	687b      	ldr	r3, [r7, #4]
   1d6c2:	0018      	movs	r0, r3
   1d6c4:	4b65      	ldr	r3, [pc, #404]	; (1d85c <_adc_set_config+0x378>)
   1d6c6:	4798      	blx	r3
   1d6c8:	1e03      	subs	r3, r0, #0
   1d6ca:	d1f9      	bne.n	1d6c0 <_adc_set_config+0x1dc>
		/* Wait for synchronization */
	}

	/* Configure CTRLB */
	adc_module->CTRLB.reg =
			config->clock_prescaler |
   1d6cc:	683b      	ldr	r3, [r7, #0]
   1d6ce:	885a      	ldrh	r2, [r3, #2]
   1d6d0:	69bb      	ldr	r3, [r7, #24]
   1d6d2:	b29b      	uxth	r3, r3
   1d6d4:	4313      	orrs	r3, r2
   1d6d6:	b29a      	uxth	r2, r3
			resolution |
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
   1d6d8:	683b      	ldr	r3, [r7, #0]
   1d6da:	2124      	movs	r1, #36	; 0x24
   1d6dc:	5c5b      	ldrb	r3, [r3, r1]
   1d6de:	b29b      	uxth	r3, r3
   1d6e0:	00db      	lsls	r3, r3, #3
   1d6e2:	b29b      	uxth	r3, r3
			resolution |
   1d6e4:	4313      	orrs	r3, r2
   1d6e6:	b29a      	uxth	r2, r3
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
   1d6e8:	683b      	ldr	r3, [r7, #0]
   1d6ea:	7d1b      	ldrb	r3, [r3, #20]
   1d6ec:	b29b      	uxth	r3, r3
   1d6ee:	009b      	lsls	r3, r3, #2
   1d6f0:	b29b      	uxth	r3, r3
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
   1d6f2:	4313      	orrs	r3, r2
   1d6f4:	b29a      	uxth	r2, r3
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
   1d6f6:	683b      	ldr	r3, [r7, #0]
   1d6f8:	7c9b      	ldrb	r3, [r3, #18]
   1d6fa:	b29b      	uxth	r3, r3
   1d6fc:	18db      	adds	r3, r3, r3
   1d6fe:	b29b      	uxth	r3, r3
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
   1d700:	4313      	orrs	r3, r2
   1d702:	b29a      	uxth	r2, r3
			(config->differential_mode << ADC_CTRLB_DIFFMODE_Pos);
   1d704:	683b      	ldr	r3, [r7, #0]
   1d706:	7cdb      	ldrb	r3, [r3, #19]
   1d708:	b29b      	uxth	r3, r3
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
   1d70a:	4313      	orrs	r3, r2
   1d70c:	b29a      	uxth	r2, r3
	adc_module->CTRLB.reg =
   1d70e:	693b      	ldr	r3, [r7, #16]
   1d710:	809a      	strh	r2, [r3, #4]

	/* Check validity of window thresholds */
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
   1d712:	683b      	ldr	r3, [r7, #0]
   1d714:	7e1b      	ldrb	r3, [r3, #24]
   1d716:	2b00      	cmp	r3, #0
   1d718:	d100      	bne.n	1d71c <_adc_set_config+0x238>
   1d71a:	e0c4      	b.n	1d8a6 <_adc_set_config+0x3c2>
		switch (resolution) {
   1d71c:	69bb      	ldr	r3, [r7, #24]
   1d71e:	2b10      	cmp	r3, #16
   1d720:	d100      	bne.n	1d724 <_adc_set_config+0x240>
   1d722:	e076      	b.n	1d812 <_adc_set_config+0x32e>
   1d724:	d802      	bhi.n	1d72c <_adc_set_config+0x248>
   1d726:	2b00      	cmp	r3, #0
   1d728:	d04d      	beq.n	1d7c6 <_adc_set_config+0x2e2>
   1d72a:	e0bc      	b.n	1d8a6 <_adc_set_config+0x3c2>
   1d72c:	2b20      	cmp	r3, #32
   1d72e:	d023      	beq.n	1d778 <_adc_set_config+0x294>
   1d730:	2b30      	cmp	r3, #48	; 0x30
   1d732:	d000      	beq.n	1d736 <_adc_set_config+0x252>
   1d734:	e0b7      	b.n	1d8a6 <_adc_set_config+0x3c2>
		case ADC_RESOLUTION_8BIT:
			if (config->differential_mode &&
   1d736:	683b      	ldr	r3, [r7, #0]
   1d738:	7cdb      	ldrb	r3, [r3, #19]
   1d73a:	2b00      	cmp	r3, #0
   1d73c:	d011      	beq.n	1d762 <_adc_set_config+0x27e>
					(config->window.window_lower_value > 127 ||
   1d73e:	683b      	ldr	r3, [r7, #0]
   1d740:	69db      	ldr	r3, [r3, #28]
			if (config->differential_mode &&
   1d742:	2b7f      	cmp	r3, #127	; 0x7f
   1d744:	dc0b      	bgt.n	1d75e <_adc_set_config+0x27a>
					config->window.window_lower_value < -128 ||
   1d746:	683b      	ldr	r3, [r7, #0]
   1d748:	69db      	ldr	r3, [r3, #28]
					(config->window.window_lower_value > 127 ||
   1d74a:	3380      	adds	r3, #128	; 0x80
   1d74c:	db07      	blt.n	1d75e <_adc_set_config+0x27a>
					config->window.window_upper_value > 127 ||
   1d74e:	683b      	ldr	r3, [r7, #0]
   1d750:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_lower_value < -128 ||
   1d752:	2b7f      	cmp	r3, #127	; 0x7f
   1d754:	dc03      	bgt.n	1d75e <_adc_set_config+0x27a>
					config->window.window_upper_value < -128)) {
   1d756:	683b      	ldr	r3, [r7, #0]
   1d758:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_upper_value > 127 ||
   1d75a:	3380      	adds	r3, #128	; 0x80
   1d75c:	da01      	bge.n	1d762 <_adc_set_config+0x27e>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
   1d75e:	2317      	movs	r3, #23
   1d760:	e143      	b.n	1d9ea <_adc_set_config+0x506>
			} else if (config->window.window_lower_value > 255 ||
   1d762:	683b      	ldr	r3, [r7, #0]
   1d764:	69db      	ldr	r3, [r3, #28]
   1d766:	2bff      	cmp	r3, #255	; 0xff
   1d768:	dc04      	bgt.n	1d774 <_adc_set_config+0x290>
					config->window.window_upper_value > 255){
   1d76a:	683b      	ldr	r3, [r7, #0]
   1d76c:	6a1b      	ldr	r3, [r3, #32]
			} else if (config->window.window_lower_value > 255 ||
   1d76e:	2bff      	cmp	r3, #255	; 0xff
   1d770:	dc00      	bgt.n	1d774 <_adc_set_config+0x290>
   1d772:	e091      	b.n	1d898 <_adc_set_config+0x3b4>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
   1d774:	2317      	movs	r3, #23
   1d776:	e138      	b.n	1d9ea <_adc_set_config+0x506>
			}
			break;
		case ADC_RESOLUTION_10BIT:
			if (config->differential_mode &&
   1d778:	683b      	ldr	r3, [r7, #0]
   1d77a:	7cdb      	ldrb	r3, [r3, #19]
   1d77c:	2b00      	cmp	r3, #0
   1d77e:	d015      	beq.n	1d7ac <_adc_set_config+0x2c8>
					(config->window.window_lower_value > 511 ||
   1d780:	683b      	ldr	r3, [r7, #0]
   1d782:	69db      	ldr	r3, [r3, #28]
			if (config->differential_mode &&
   1d784:	4a36      	ldr	r2, [pc, #216]	; (1d860 <_adc_set_config+0x37c>)
   1d786:	4293      	cmp	r3, r2
   1d788:	dc0e      	bgt.n	1d7a8 <_adc_set_config+0x2c4>
					config->window.window_lower_value < -512 ||
   1d78a:	683b      	ldr	r3, [r7, #0]
   1d78c:	69db      	ldr	r3, [r3, #28]
					(config->window.window_lower_value > 511 ||
   1d78e:	4a35      	ldr	r2, [pc, #212]	; (1d864 <_adc_set_config+0x380>)
   1d790:	4293      	cmp	r3, r2
   1d792:	db09      	blt.n	1d7a8 <_adc_set_config+0x2c4>
					config->window.window_upper_value > 511 ||
   1d794:	683b      	ldr	r3, [r7, #0]
   1d796:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_lower_value < -512 ||
   1d798:	4a31      	ldr	r2, [pc, #196]	; (1d860 <_adc_set_config+0x37c>)
   1d79a:	4293      	cmp	r3, r2
   1d79c:	dc04      	bgt.n	1d7a8 <_adc_set_config+0x2c4>
					config->window.window_upper_value < -512)) {
   1d79e:	683b      	ldr	r3, [r7, #0]
   1d7a0:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_upper_value > 511 ||
   1d7a2:	4a30      	ldr	r2, [pc, #192]	; (1d864 <_adc_set_config+0x380>)
   1d7a4:	4293      	cmp	r3, r2
   1d7a6:	da01      	bge.n	1d7ac <_adc_set_config+0x2c8>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
   1d7a8:	2317      	movs	r3, #23
   1d7aa:	e11e      	b.n	1d9ea <_adc_set_config+0x506>
			} else if (config->window.window_lower_value > 1023 ||
   1d7ac:	683b      	ldr	r3, [r7, #0]
   1d7ae:	69db      	ldr	r3, [r3, #28]
   1d7b0:	4a2d      	ldr	r2, [pc, #180]	; (1d868 <_adc_set_config+0x384>)
   1d7b2:	4293      	cmp	r3, r2
   1d7b4:	dc05      	bgt.n	1d7c2 <_adc_set_config+0x2de>
					config->window.window_upper_value > 1023){
   1d7b6:	683b      	ldr	r3, [r7, #0]
   1d7b8:	6a1b      	ldr	r3, [r3, #32]
			} else if (config->window.window_lower_value > 1023 ||
   1d7ba:	4a2b      	ldr	r2, [pc, #172]	; (1d868 <_adc_set_config+0x384>)
   1d7bc:	4293      	cmp	r3, r2
   1d7be:	dc00      	bgt.n	1d7c2 <_adc_set_config+0x2de>
   1d7c0:	e06c      	b.n	1d89c <_adc_set_config+0x3b8>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
   1d7c2:	2317      	movs	r3, #23
   1d7c4:	e111      	b.n	1d9ea <_adc_set_config+0x506>
			}
			break;
		case ADC_RESOLUTION_12BIT:
			if (config->differential_mode &&
   1d7c6:	683b      	ldr	r3, [r7, #0]
   1d7c8:	7cdb      	ldrb	r3, [r3, #19]
   1d7ca:	2b00      	cmp	r3, #0
   1d7cc:	d015      	beq.n	1d7fa <_adc_set_config+0x316>
					(config->window.window_lower_value > 2047 ||
   1d7ce:	683b      	ldr	r3, [r7, #0]
   1d7d0:	69db      	ldr	r3, [r3, #28]
			if (config->differential_mode &&
   1d7d2:	4a26      	ldr	r2, [pc, #152]	; (1d86c <_adc_set_config+0x388>)
   1d7d4:	4293      	cmp	r3, r2
   1d7d6:	dc0e      	bgt.n	1d7f6 <_adc_set_config+0x312>
					config->window.window_lower_value < -2048 ||
   1d7d8:	683b      	ldr	r3, [r7, #0]
   1d7da:	69db      	ldr	r3, [r3, #28]
					(config->window.window_lower_value > 2047 ||
   1d7dc:	4a24      	ldr	r2, [pc, #144]	; (1d870 <_adc_set_config+0x38c>)
   1d7de:	4293      	cmp	r3, r2
   1d7e0:	db09      	blt.n	1d7f6 <_adc_set_config+0x312>
					config->window.window_upper_value > 2047 ||
   1d7e2:	683b      	ldr	r3, [r7, #0]
   1d7e4:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_lower_value < -2048 ||
   1d7e6:	4a21      	ldr	r2, [pc, #132]	; (1d86c <_adc_set_config+0x388>)
   1d7e8:	4293      	cmp	r3, r2
   1d7ea:	dc04      	bgt.n	1d7f6 <_adc_set_config+0x312>
					config->window.window_upper_value < -2048)) {
   1d7ec:	683b      	ldr	r3, [r7, #0]
   1d7ee:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_upper_value > 2047 ||
   1d7f0:	4a1f      	ldr	r2, [pc, #124]	; (1d870 <_adc_set_config+0x38c>)
   1d7f2:	4293      	cmp	r3, r2
   1d7f4:	da01      	bge.n	1d7fa <_adc_set_config+0x316>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
   1d7f6:	2317      	movs	r3, #23
   1d7f8:	e0f7      	b.n	1d9ea <_adc_set_config+0x506>
			} else if (config->window.window_lower_value > 4095 ||
   1d7fa:	683b      	ldr	r3, [r7, #0]
   1d7fc:	69db      	ldr	r3, [r3, #28]
   1d7fe:	4a1d      	ldr	r2, [pc, #116]	; (1d874 <_adc_set_config+0x390>)
   1d800:	4293      	cmp	r3, r2
   1d802:	dc04      	bgt.n	1d80e <_adc_set_config+0x32a>
					config->window.window_upper_value > 4095){
   1d804:	683b      	ldr	r3, [r7, #0]
   1d806:	6a1b      	ldr	r3, [r3, #32]
			} else if (config->window.window_lower_value > 4095 ||
   1d808:	4a1a      	ldr	r2, [pc, #104]	; (1d874 <_adc_set_config+0x390>)
   1d80a:	4293      	cmp	r3, r2
   1d80c:	dd48      	ble.n	1d8a0 <_adc_set_config+0x3bc>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
   1d80e:	2317      	movs	r3, #23
   1d810:	e0eb      	b.n	1d9ea <_adc_set_config+0x506>
			}
			break;
		case ADC_RESOLUTION_16BIT:
			if (config->differential_mode &&
   1d812:	683b      	ldr	r3, [r7, #0]
   1d814:	7cdb      	ldrb	r3, [r3, #19]
   1d816:	2b00      	cmp	r3, #0
   1d818:	d032      	beq.n	1d880 <_adc_set_config+0x39c>
					(config->window.window_lower_value > 32767 ||
   1d81a:	683b      	ldr	r3, [r7, #0]
   1d81c:	69db      	ldr	r3, [r3, #28]
			if (config->differential_mode &&
   1d81e:	4a16      	ldr	r2, [pc, #88]	; (1d878 <_adc_set_config+0x394>)
   1d820:	4293      	cmp	r3, r2
   1d822:	dc0e      	bgt.n	1d842 <_adc_set_config+0x35e>
					config->window.window_lower_value < -32768 ||
   1d824:	683b      	ldr	r3, [r7, #0]
   1d826:	69db      	ldr	r3, [r3, #28]
					(config->window.window_lower_value > 32767 ||
   1d828:	4a14      	ldr	r2, [pc, #80]	; (1d87c <_adc_set_config+0x398>)
   1d82a:	4293      	cmp	r3, r2
   1d82c:	db09      	blt.n	1d842 <_adc_set_config+0x35e>
					config->window.window_upper_value > 32767 ||
   1d82e:	683b      	ldr	r3, [r7, #0]
   1d830:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_lower_value < -32768 ||
   1d832:	4a11      	ldr	r2, [pc, #68]	; (1d878 <_adc_set_config+0x394>)
   1d834:	4293      	cmp	r3, r2
   1d836:	dc04      	bgt.n	1d842 <_adc_set_config+0x35e>
					config->window.window_upper_value < -32768)) {
   1d838:	683b      	ldr	r3, [r7, #0]
   1d83a:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_upper_value > 32767 ||
   1d83c:	4a0f      	ldr	r2, [pc, #60]	; (1d87c <_adc_set_config+0x398>)
   1d83e:	4293      	cmp	r3, r2
   1d840:	da1e      	bge.n	1d880 <_adc_set_config+0x39c>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
   1d842:	2317      	movs	r3, #23
   1d844:	e0d1      	b.n	1d9ea <_adc_set_config+0x506>
   1d846:	46c0      	nop			; (mov r8, r8)
   1d848:	0001d2bd 	.word	0x0001d2bd
   1d84c:	00024715 	.word	0x00024715
   1d850:	00024759 	.word	0x00024759
   1d854:	0001d46d 	.word	0x0001d46d
   1d858:	0002a7ec 	.word	0x0002a7ec
   1d85c:	0001d399 	.word	0x0001d399
   1d860:	000001ff 	.word	0x000001ff
   1d864:	fffffe00 	.word	0xfffffe00
   1d868:	000003ff 	.word	0x000003ff
   1d86c:	000007ff 	.word	0x000007ff
   1d870:	fffff800 	.word	0xfffff800
   1d874:	00000fff 	.word	0x00000fff
   1d878:	00007fff 	.word	0x00007fff
   1d87c:	ffff8000 	.word	0xffff8000
			} else if (config->window.window_lower_value > 65535 ||
   1d880:	683b      	ldr	r3, [r7, #0]
   1d882:	69db      	ldr	r3, [r3, #28]
   1d884:	4a5b      	ldr	r2, [pc, #364]	; (1d9f4 <_adc_set_config+0x510>)
   1d886:	4293      	cmp	r3, r2
   1d888:	dc04      	bgt.n	1d894 <_adc_set_config+0x3b0>
					config->window.window_upper_value > 65535){
   1d88a:	683b      	ldr	r3, [r7, #0]
   1d88c:	6a1b      	ldr	r3, [r3, #32]
			} else if (config->window.window_lower_value > 65535 ||
   1d88e:	4a59      	ldr	r2, [pc, #356]	; (1d9f4 <_adc_set_config+0x510>)
   1d890:	4293      	cmp	r3, r2
   1d892:	dd07      	ble.n	1d8a4 <_adc_set_config+0x3c0>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
   1d894:	2317      	movs	r3, #23
   1d896:	e0a8      	b.n	1d9ea <_adc_set_config+0x506>
			break;
   1d898:	46c0      	nop			; (mov r8, r8)
   1d89a:	e004      	b.n	1d8a6 <_adc_set_config+0x3c2>
			break;
   1d89c:	46c0      	nop			; (mov r8, r8)
   1d89e:	e002      	b.n	1d8a6 <_adc_set_config+0x3c2>
			break;
   1d8a0:	46c0      	nop			; (mov r8, r8)
   1d8a2:	e000      	b.n	1d8a6 <_adc_set_config+0x3c2>
			}
			break;
   1d8a4:	46c0      	nop			; (mov r8, r8)
		}
	}

	while (adc_is_syncing(module_inst)) {
   1d8a6:	46c0      	nop			; (mov r8, r8)
   1d8a8:	687b      	ldr	r3, [r7, #4]
   1d8aa:	0018      	movs	r0, r3
   1d8ac:	4b52      	ldr	r3, [pc, #328]	; (1d9f8 <_adc_set_config+0x514>)
   1d8ae:	4798      	blx	r3
   1d8b0:	1e03      	subs	r3, r0, #0
   1d8b2:	d1f9      	bne.n	1d8a8 <_adc_set_config+0x3c4>
		/* Wait for synchronization */
	}

	/* Configure window mode */
	adc_module->WINCTRL.reg = config->window.window_mode;
   1d8b4:	683b      	ldr	r3, [r7, #0]
   1d8b6:	7e1a      	ldrb	r2, [r3, #24]
   1d8b8:	693b      	ldr	r3, [r7, #16]
   1d8ba:	721a      	strb	r2, [r3, #8]

	while (adc_is_syncing(module_inst)) {
   1d8bc:	46c0      	nop			; (mov r8, r8)
   1d8be:	687b      	ldr	r3, [r7, #4]
   1d8c0:	0018      	movs	r0, r3
   1d8c2:	4b4d      	ldr	r3, [pc, #308]	; (1d9f8 <_adc_set_config+0x514>)
   1d8c4:	4798      	blx	r3
   1d8c6:	1e03      	subs	r3, r0, #0
   1d8c8:	d1f9      	bne.n	1d8be <_adc_set_config+0x3da>
		/* Wait for synchronization */
	}

	/* Configure lower threshold */
	adc_module->WINLT.reg =
			config->window.window_lower_value << ADC_WINLT_WINLT_Pos;
   1d8ca:	683b      	ldr	r3, [r7, #0]
   1d8cc:	69db      	ldr	r3, [r3, #28]
	adc_module->WINLT.reg =
   1d8ce:	b29a      	uxth	r2, r3
   1d8d0:	693b      	ldr	r3, [r7, #16]
   1d8d2:	839a      	strh	r2, [r3, #28]

	while (adc_is_syncing(module_inst)) {
   1d8d4:	46c0      	nop			; (mov r8, r8)
   1d8d6:	687b      	ldr	r3, [r7, #4]
   1d8d8:	0018      	movs	r0, r3
   1d8da:	4b47      	ldr	r3, [pc, #284]	; (1d9f8 <_adc_set_config+0x514>)
   1d8dc:	4798      	blx	r3
   1d8de:	1e03      	subs	r3, r0, #0
   1d8e0:	d1f9      	bne.n	1d8d6 <_adc_set_config+0x3f2>
		/* Wait for synchronization */
	}

	/* Configure lower threshold */
	adc_module->WINUT.reg = config->window.window_upper_value <<
   1d8e2:	683b      	ldr	r3, [r7, #0]
   1d8e4:	6a1b      	ldr	r3, [r3, #32]
   1d8e6:	b29a      	uxth	r2, r3
   1d8e8:	693b      	ldr	r3, [r7, #16]
   1d8ea:	841a      	strh	r2, [r3, #32]
			ADC_WINUT_WINUT_Pos;

	uint8_t inputs_to_scan = config->pin_scan.inputs_to_scan;
   1d8ec:	2314      	movs	r3, #20
   1d8ee:	18fb      	adds	r3, r7, r3
   1d8f0:	683a      	ldr	r2, [r7, #0]
   1d8f2:	212c      	movs	r1, #44	; 0x2c
   1d8f4:	5c52      	ldrb	r2, [r2, r1]
   1d8f6:	701a      	strb	r2, [r3, #0]
	if (inputs_to_scan > 0) {
   1d8f8:	2314      	movs	r3, #20
   1d8fa:	18fb      	adds	r3, r7, r3
   1d8fc:	781b      	ldrb	r3, [r3, #0]
   1d8fe:	2b00      	cmp	r3, #0
   1d900:	d006      	beq.n	1d910 <_adc_set_config+0x42c>
		/*
		* Number of input sources included is the value written to INPUTSCAN
		* plus 1.
		*/
		inputs_to_scan--;
   1d902:	2314      	movs	r3, #20
   1d904:	18fb      	adds	r3, r7, r3
   1d906:	781a      	ldrb	r2, [r3, #0]
   1d908:	2314      	movs	r3, #20
   1d90a:	18fb      	adds	r3, r7, r3
   1d90c:	3a01      	subs	r2, #1
   1d90e:	701a      	strb	r2, [r3, #0]
	}

	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
   1d910:	2314      	movs	r3, #20
   1d912:	18fb      	adds	r3, r7, r3
   1d914:	781b      	ldrb	r3, [r3, #0]
   1d916:	2b0f      	cmp	r3, #15
   1d918:	d804      	bhi.n	1d924 <_adc_set_config+0x440>
			config->pin_scan.offset_start_scan > (ADC_INPUTCTRL_INPUTOFFSET_Msk >> ADC_INPUTCTRL_INPUTOFFSET_Pos)) {
   1d91a:	683b      	ldr	r3, [r7, #0]
   1d91c:	222b      	movs	r2, #43	; 0x2b
   1d91e:	5c9b      	ldrb	r3, [r3, r2]
	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
   1d920:	2b0f      	cmp	r3, #15
   1d922:	d901      	bls.n	1d928 <_adc_set_config+0x444>
		/* Invalid number of input pins or input offset */
		return STATUS_ERR_INVALID_ARG;
   1d924:	2317      	movs	r3, #23
   1d926:	e060      	b.n	1d9ea <_adc_set_config+0x506>
	}

	while (adc_is_syncing(module_inst)) {
   1d928:	46c0      	nop			; (mov r8, r8)
   1d92a:	687b      	ldr	r3, [r7, #4]
   1d92c:	0018      	movs	r0, r3
   1d92e:	4b32      	ldr	r3, [pc, #200]	; (1d9f8 <_adc_set_config+0x514>)
   1d930:	4798      	blx	r3
   1d932:	1e03      	subs	r3, r0, #0
   1d934:	d1f9      	bne.n	1d92a <_adc_set_config+0x446>
		/* Wait for synchronization */
	}

	/* Configure pin scan mode and positive and negative input pins */
	adc_module->INPUTCTRL.reg =
			config->gain_factor |
   1d936:	683b      	ldr	r3, [r7, #0]
   1d938:	689b      	ldr	r3, [r3, #8]
			(config->pin_scan.offset_start_scan <<
   1d93a:	683a      	ldr	r2, [r7, #0]
   1d93c:	212b      	movs	r1, #43	; 0x2b
   1d93e:	5c52      	ldrb	r2, [r2, r1]
   1d940:	0512      	lsls	r2, r2, #20
			config->gain_factor |
   1d942:	4313      	orrs	r3, r2
			ADC_INPUTCTRL_INPUTOFFSET_Pos) |
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
   1d944:	2214      	movs	r2, #20
   1d946:	18ba      	adds	r2, r7, r2
   1d948:	7812      	ldrb	r2, [r2, #0]
   1d94a:	0412      	lsls	r2, r2, #16
			ADC_INPUTCTRL_INPUTOFFSET_Pos) |
   1d94c:	4313      	orrs	r3, r2
			config->negative_input |
   1d94e:	683a      	ldr	r2, [r7, #0]
   1d950:	89d2      	ldrh	r2, [r2, #14]
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
   1d952:	4313      	orrs	r3, r2
			config->positive_input;
   1d954:	683a      	ldr	r2, [r7, #0]
   1d956:	7b12      	ldrb	r2, [r2, #12]
			config->negative_input |
   1d958:	431a      	orrs	r2, r3
	adc_module->INPUTCTRL.reg =
   1d95a:	693b      	ldr	r3, [r7, #16]
   1d95c:	611a      	str	r2, [r3, #16]

	/* Configure events */
	adc_module->EVCTRL.reg = config->event_action;
   1d95e:	683b      	ldr	r3, [r7, #0]
   1d960:	222a      	movs	r2, #42	; 0x2a
   1d962:	5c9a      	ldrb	r2, [r3, r2]
   1d964:	693b      	ldr	r3, [r7, #16]
   1d966:	751a      	strb	r2, [r3, #20]

	/* Disable all interrupts */
	adc_module->INTENCLR.reg =
   1d968:	693b      	ldr	r3, [r7, #16]
   1d96a:	220f      	movs	r2, #15
   1d96c:	759a      	strb	r2, [r3, #22]
			(1 << ADC_INTENCLR_SYNCRDY_Pos) | (1 << ADC_INTENCLR_WINMON_Pos) |
			(1 << ADC_INTENCLR_OVERRUN_Pos) | (1 << ADC_INTENCLR_RESRDY_Pos);

	if (config->correction.correction_enable){
   1d96e:	683b      	ldr	r3, [r7, #0]
   1d970:	2224      	movs	r2, #36	; 0x24
   1d972:	5c9b      	ldrb	r3, [r3, r2]
   1d974:	2b00      	cmp	r3, #0
   1d976:	d01e      	beq.n	1d9b6 <_adc_set_config+0x4d2>
		/* Make sure gain_correction value is valid */
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
   1d978:	683b      	ldr	r3, [r7, #0]
   1d97a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
   1d97c:	4a1f      	ldr	r2, [pc, #124]	; (1d9fc <_adc_set_config+0x518>)
   1d97e:	4293      	cmp	r3, r2
   1d980:	d901      	bls.n	1d986 <_adc_set_config+0x4a2>
			return STATUS_ERR_INVALID_ARG;
   1d982:	2317      	movs	r3, #23
   1d984:	e031      	b.n	1d9ea <_adc_set_config+0x506>
		} else {
			/* Set gain correction value */
			adc_module->GAINCORR.reg = config->correction.gain_correction <<
   1d986:	683b      	ldr	r3, [r7, #0]
   1d988:	8cda      	ldrh	r2, [r3, #38]	; 0x26
   1d98a:	693b      	ldr	r3, [r7, #16]
   1d98c:	849a      	strh	r2, [r3, #36]	; 0x24
					ADC_GAINCORR_GAINCORR_Pos;
		}

		/* Make sure offset correction value is valid */
		if (config->correction.offset_correction > 2047 ||
   1d98e:	683b      	ldr	r3, [r7, #0]
   1d990:	2228      	movs	r2, #40	; 0x28
   1d992:	5e9b      	ldrsh	r3, [r3, r2]
   1d994:	4a1a      	ldr	r2, [pc, #104]	; (1da00 <_adc_set_config+0x51c>)
   1d996:	4293      	cmp	r3, r2
   1d998:	dc05      	bgt.n	1d9a6 <_adc_set_config+0x4c2>
				config->correction.offset_correction < -2048) {
   1d99a:	683b      	ldr	r3, [r7, #0]
   1d99c:	2228      	movs	r2, #40	; 0x28
   1d99e:	5e9b      	ldrsh	r3, [r3, r2]
		if (config->correction.offset_correction > 2047 ||
   1d9a0:	4a18      	ldr	r2, [pc, #96]	; (1da04 <_adc_set_config+0x520>)
   1d9a2:	4293      	cmp	r3, r2
   1d9a4:	da01      	bge.n	1d9aa <_adc_set_config+0x4c6>
			return STATUS_ERR_INVALID_ARG;
   1d9a6:	2317      	movs	r3, #23
   1d9a8:	e01f      	b.n	1d9ea <_adc_set_config+0x506>
		} else {
			/* Set offset correction value */
			adc_module->OFFSETCORR.reg = config->correction.offset_correction <<
   1d9aa:	683b      	ldr	r3, [r7, #0]
   1d9ac:	2228      	movs	r2, #40	; 0x28
   1d9ae:	5e9b      	ldrsh	r3, [r3, r2]
   1d9b0:	b29a      	uxth	r2, r3
   1d9b2:	693b      	ldr	r3, [r7, #16]
   1d9b4:	84da      	strh	r2, [r3, #38]	; 0x26
		}
	}

	/* Load in the fixed device ADC calibration constants */
	adc_module->CALIB.reg =
			ADC_CALIB_BIAS_CAL(
   1d9b6:	4b14      	ldr	r3, [pc, #80]	; (1da08 <_adc_set_config+0x524>)
   1d9b8:	681b      	ldr	r3, [r3, #0]
   1d9ba:	08db      	lsrs	r3, r3, #3
   1d9bc:	b29b      	uxth	r3, r3
   1d9be:	021b      	lsls	r3, r3, #8
   1d9c0:	b29a      	uxth	r2, r3
   1d9c2:	23e0      	movs	r3, #224	; 0xe0
   1d9c4:	00db      	lsls	r3, r3, #3
   1d9c6:	4013      	ands	r3, r2
   1d9c8:	b29a      	uxth	r2, r3
				(*(uint32_t *)ADC_FUSES_BIASCAL_ADDR >> ADC_FUSES_BIASCAL_Pos)
			) |
			ADC_CALIB_LINEARITY_CAL(
   1d9ca:	4b10      	ldr	r3, [pc, #64]	; (1da0c <_adc_set_config+0x528>)
   1d9cc:	685c      	ldr	r4, [r3, #4]
   1d9ce:	681b      	ldr	r3, [r3, #0]
   1d9d0:	0161      	lsls	r1, r4, #5
   1d9d2:	0edd      	lsrs	r5, r3, #27
   1d9d4:	430d      	orrs	r5, r1
   1d9d6:	0ee6      	lsrs	r6, r4, #27
   1d9d8:	b2ab      	uxth	r3, r5
   1d9da:	21ff      	movs	r1, #255	; 0xff
   1d9dc:	400b      	ands	r3, r1
   1d9de:	b29b      	uxth	r3, r3
			) |
   1d9e0:	4313      	orrs	r3, r2
   1d9e2:	b29a      	uxth	r2, r3
	adc_module->CALIB.reg =
   1d9e4:	693b      	ldr	r3, [r7, #16]
   1d9e6:	851a      	strh	r2, [r3, #40]	; 0x28
				(*(uint64_t *)ADC_FUSES_LINEARITY_0_ADDR >> ADC_FUSES_LINEARITY_0_Pos)
			);

	return STATUS_OK;
   1d9e8:	2300      	movs	r3, #0
}
   1d9ea:	0018      	movs	r0, r3
   1d9ec:	46bd      	mov	sp, r7
   1d9ee:	b009      	add	sp, #36	; 0x24
   1d9f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1d9f2:	46c0      	nop			; (mov r8, r8)
   1d9f4:	0000ffff 	.word	0x0000ffff
   1d9f8:	0001d399 	.word	0x0001d399
   1d9fc:	00000fff 	.word	0x00000fff
   1da00:	000007ff 	.word	0x000007ff
   1da04:	fffff800 	.word	0xfffff800
   1da08:	00806024 	.word	0x00806024
   1da0c:	00806020 	.word	0x00806020

0001da10 <adc_init>:
 */
enum status_code adc_init(
		struct adc_module *const module_inst,
		Adc *hw,
		struct adc_config *config)
{
   1da10:	b580      	push	{r7, lr}
   1da12:	b086      	sub	sp, #24
   1da14:	af00      	add	r7, sp, #0
   1da16:	60f8      	str	r0, [r7, #12]
   1da18:	60b9      	str	r1, [r7, #8]
   1da1a:	607a      	str	r2, [r7, #4]
	Assert(module_inst);
	Assert(hw);
	Assert(config);

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
   1da1c:	68fb      	ldr	r3, [r7, #12]
   1da1e:	68ba      	ldr	r2, [r7, #8]
   1da20:	601a      	str	r2, [r3, #0]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_ADC);
   1da22:	2380      	movs	r3, #128	; 0x80
   1da24:	025b      	lsls	r3, r3, #9
   1da26:	0019      	movs	r1, r3
   1da28:	2002      	movs	r0, #2
   1da2a:	4b32      	ldr	r3, [pc, #200]	; (1daf4 <adc_init+0xe4>)
   1da2c:	4798      	blx	r3

	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
   1da2e:	68bb      	ldr	r3, [r7, #8]
   1da30:	781b      	ldrb	r3, [r3, #0]
   1da32:	b2db      	uxtb	r3, r3
   1da34:	001a      	movs	r2, r3
   1da36:	2301      	movs	r3, #1
   1da38:	4013      	ands	r3, r2
   1da3a:	d001      	beq.n	1da40 <adc_init+0x30>
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
   1da3c:	2305      	movs	r3, #5
   1da3e:	e055      	b.n	1daec <adc_init+0xdc>
	}

	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
   1da40:	68bb      	ldr	r3, [r7, #8]
   1da42:	781b      	ldrb	r3, [r3, #0]
   1da44:	b2db      	uxtb	r3, r3
   1da46:	001a      	movs	r2, r3
   1da48:	2302      	movs	r3, #2
   1da4a:	4013      	ands	r3, r2
   1da4c:	d001      	beq.n	1da52 <adc_init+0x42>
		/* Module must be disabled before initialization. Abort. */
		return STATUS_ERR_DENIED;
   1da4e:	231c      	movs	r3, #28
   1da50:	e04c      	b.n	1daec <adc_init+0xdc>
	}

	/* Store the selected reference for later use */
	module_inst->reference = config->reference;
   1da52:	687b      	ldr	r3, [r7, #4]
   1da54:	785a      	ldrb	r2, [r3, #1]
   1da56:	68fb      	ldr	r3, [r7, #12]
   1da58:	711a      	strb	r2, [r3, #4]

	/* Make sure bandgap is enabled if requested by the config */
	if (module_inst->reference == ADC_REFERENCE_INT1V) {
   1da5a:	68fb      	ldr	r3, [r7, #12]
   1da5c:	791b      	ldrb	r3, [r3, #4]
   1da5e:	2b00      	cmp	r3, #0
   1da60:	d102      	bne.n	1da68 <adc_init+0x58>
		system_voltage_reference_enable(SYSTEM_VOLTAGE_REFERENCE_BANDGAP);
   1da62:	2001      	movs	r0, #1
   1da64:	4b24      	ldr	r3, [pc, #144]	; (1daf8 <adc_init+0xe8>)
   1da66:	4798      	blx	r3
	}

#if ADC_CALLBACK_MODE == true
	for (uint8_t i = 0; i < ADC_CALLBACK_N; i++) {
   1da68:	2317      	movs	r3, #23
   1da6a:	18fb      	adds	r3, r7, r3
   1da6c:	2200      	movs	r2, #0
   1da6e:	701a      	strb	r2, [r3, #0]
   1da70:	e00e      	b.n	1da90 <adc_init+0x80>
		module_inst->callback[i] = NULL;
   1da72:	2317      	movs	r3, #23
   1da74:	18fb      	adds	r3, r7, r3
   1da76:	781a      	ldrb	r2, [r3, #0]
   1da78:	68fb      	ldr	r3, [r7, #12]
   1da7a:	3202      	adds	r2, #2
   1da7c:	0092      	lsls	r2, r2, #2
   1da7e:	2100      	movs	r1, #0
   1da80:	50d1      	str	r1, [r2, r3]
	for (uint8_t i = 0; i < ADC_CALLBACK_N; i++) {
   1da82:	2317      	movs	r3, #23
   1da84:	18fb      	adds	r3, r7, r3
   1da86:	781a      	ldrb	r2, [r3, #0]
   1da88:	2317      	movs	r3, #23
   1da8a:	18fb      	adds	r3, r7, r3
   1da8c:	3201      	adds	r2, #1
   1da8e:	701a      	strb	r2, [r3, #0]
   1da90:	2317      	movs	r3, #23
   1da92:	18fb      	adds	r3, r7, r3
   1da94:	781b      	ldrb	r3, [r3, #0]
   1da96:	2b02      	cmp	r3, #2
   1da98:	d9eb      	bls.n	1da72 <adc_init+0x62>
	};

	module_inst->registered_callback_mask = 0;
   1da9a:	68fb      	ldr	r3, [r7, #12]
   1da9c:	2200      	movs	r2, #0
   1da9e:	769a      	strb	r2, [r3, #26]
	module_inst->enabled_callback_mask = 0;
   1daa0:	68fb      	ldr	r3, [r7, #12]
   1daa2:	2200      	movs	r2, #0
   1daa4:	76da      	strb	r2, [r3, #27]
	module_inst->remaining_conversions = 0;
   1daa6:	68fb      	ldr	r3, [r7, #12]
   1daa8:	2200      	movs	r2, #0
   1daaa:	831a      	strh	r2, [r3, #24]
	module_inst->job_status = STATUS_OK;
   1daac:	68fb      	ldr	r3, [r7, #12]
   1daae:	2200      	movs	r2, #0
   1dab0:	771a      	strb	r2, [r3, #28]

	_adc_instances[0] = module_inst;
   1dab2:	4b12      	ldr	r3, [pc, #72]	; (1dafc <adc_init+0xec>)
   1dab4:	68fa      	ldr	r2, [r7, #12]
   1dab6:	601a      	str	r2, [r3, #0]

	if (config->event_action == ADC_EVENT_ACTION_DISABLED &&
   1dab8:	687b      	ldr	r3, [r7, #4]
   1daba:	222a      	movs	r2, #42	; 0x2a
   1dabc:	5c9b      	ldrb	r3, [r3, r2]
   1dabe:	2b00      	cmp	r3, #0
   1dac0:	d10a      	bne.n	1dad8 <adc_init+0xc8>
			!config->freerunning) {
   1dac2:	687b      	ldr	r3, [r7, #4]
   1dac4:	7d1b      	ldrb	r3, [r3, #20]
   1dac6:	2201      	movs	r2, #1
   1dac8:	4053      	eors	r3, r2
   1daca:	b2db      	uxtb	r3, r3
	if (config->event_action == ADC_EVENT_ACTION_DISABLED &&
   1dacc:	2b00      	cmp	r3, #0
   1dace:	d003      	beq.n	1dad8 <adc_init+0xc8>
		module_inst->software_trigger = true;
   1dad0:	68fb      	ldr	r3, [r7, #12]
   1dad2:	2201      	movs	r2, #1
   1dad4:	775a      	strb	r2, [r3, #29]
   1dad6:	e002      	b.n	1dade <adc_init+0xce>
	} else {
		module_inst->software_trigger = false;
   1dad8:	68fb      	ldr	r3, [r7, #12]
   1dada:	2200      	movs	r2, #0
   1dadc:	775a      	strb	r2, [r3, #29]
	}
#endif

	/* Write configuration to module */
	return _adc_set_config(module_inst, config);
   1dade:	687a      	ldr	r2, [r7, #4]
   1dae0:	68fb      	ldr	r3, [r7, #12]
   1dae2:	0011      	movs	r1, r2
   1dae4:	0018      	movs	r0, r3
   1dae6:	4b06      	ldr	r3, [pc, #24]	; (1db00 <adc_init+0xf0>)
   1dae8:	4798      	blx	r3
   1daea:	0003      	movs	r3, r0
}
   1daec:	0018      	movs	r0, r3
   1daee:	46bd      	mov	sp, r7
   1daf0:	b006      	add	sp, #24
   1daf2:	bd80      	pop	{r7, pc}
   1daf4:	0001d2d5 	.word	0x0001d2d5
   1daf8:	0001d359 	.word	0x0001d359
   1dafc:	20000aa8 	.word	0x20000aa8
   1db00:	0001d4e5 	.word	0x0001d4e5

0001db04 <adc_is_syncing>:
{
   1db04:	b580      	push	{r7, lr}
   1db06:	b084      	sub	sp, #16
   1db08:	af00      	add	r7, sp, #0
   1db0a:	6078      	str	r0, [r7, #4]
	Adc *const adc_module = module_inst->hw;
   1db0c:	687b      	ldr	r3, [r7, #4]
   1db0e:	681b      	ldr	r3, [r3, #0]
   1db10:	60fb      	str	r3, [r7, #12]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
   1db12:	68fb      	ldr	r3, [r7, #12]
   1db14:	7e5b      	ldrb	r3, [r3, #25]
   1db16:	b2db      	uxtb	r3, r3
   1db18:	b25b      	sxtb	r3, r3
   1db1a:	2b00      	cmp	r3, #0
   1db1c:	da01      	bge.n	1db22 <adc_is_syncing+0x1e>
		return true;
   1db1e:	2301      	movs	r3, #1
   1db20:	e000      	b.n	1db24 <adc_is_syncing+0x20>
	return false;
   1db22:	2300      	movs	r3, #0
}
   1db24:	0018      	movs	r0, r3
   1db26:	46bd      	mov	sp, r7
   1db28:	b004      	add	sp, #16
   1db2a:	bd80      	pop	{r7, pc}

0001db2c <adc_start_conversion>:
{
   1db2c:	b580      	push	{r7, lr}
   1db2e:	b084      	sub	sp, #16
   1db30:	af00      	add	r7, sp, #0
   1db32:	6078      	str	r0, [r7, #4]
	Adc *const adc_module = module_inst->hw;
   1db34:	687b      	ldr	r3, [r7, #4]
   1db36:	681b      	ldr	r3, [r3, #0]
   1db38:	60fb      	str	r3, [r7, #12]
	while (adc_is_syncing(module_inst)) {
   1db3a:	46c0      	nop			; (mov r8, r8)
   1db3c:	687b      	ldr	r3, [r7, #4]
   1db3e:	0018      	movs	r0, r3
   1db40:	4b0b      	ldr	r3, [pc, #44]	; (1db70 <adc_start_conversion+0x44>)
   1db42:	4798      	blx	r3
   1db44:	1e03      	subs	r3, r0, #0
   1db46:	d1f9      	bne.n	1db3c <adc_start_conversion+0x10>
	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
   1db48:	68fb      	ldr	r3, [r7, #12]
   1db4a:	7b1b      	ldrb	r3, [r3, #12]
   1db4c:	b2db      	uxtb	r3, r3
   1db4e:	2202      	movs	r2, #2
   1db50:	4313      	orrs	r3, r2
   1db52:	b2da      	uxtb	r2, r3
   1db54:	68fb      	ldr	r3, [r7, #12]
   1db56:	731a      	strb	r2, [r3, #12]
	while (adc_is_syncing(module_inst)) {
   1db58:	46c0      	nop			; (mov r8, r8)
   1db5a:	687b      	ldr	r3, [r7, #4]
   1db5c:	0018      	movs	r0, r3
   1db5e:	4b04      	ldr	r3, [pc, #16]	; (1db70 <adc_start_conversion+0x44>)
   1db60:	4798      	blx	r3
   1db62:	1e03      	subs	r3, r0, #0
   1db64:	d1f9      	bne.n	1db5a <adc_start_conversion+0x2e>
}
   1db66:	46c0      	nop			; (mov r8, r8)
   1db68:	46bd      	mov	sp, r7
   1db6a:	b004      	add	sp, #16
   1db6c:	bd80      	pop	{r7, pc}
   1db6e:	46c0      	nop			; (mov r8, r8)
   1db70:	0001db05 	.word	0x0001db05

0001db74 <adc_enable_interrupt>:
{
   1db74:	b580      	push	{r7, lr}
   1db76:	b084      	sub	sp, #16
   1db78:	af00      	add	r7, sp, #0
   1db7a:	6078      	str	r0, [r7, #4]
   1db7c:	000a      	movs	r2, r1
   1db7e:	1cfb      	adds	r3, r7, #3
   1db80:	701a      	strb	r2, [r3, #0]
	Adc *const adc_module = module_inst->hw;
   1db82:	687b      	ldr	r3, [r7, #4]
   1db84:	681b      	ldr	r3, [r3, #0]
   1db86:	60fb      	str	r3, [r7, #12]
	adc_module->INTENSET.reg = interrupt;
   1db88:	68fb      	ldr	r3, [r7, #12]
   1db8a:	1cfa      	adds	r2, r7, #3
   1db8c:	7812      	ldrb	r2, [r2, #0]
   1db8e:	75da      	strb	r2, [r3, #23]
}
   1db90:	46c0      	nop			; (mov r8, r8)
   1db92:	46bd      	mov	sp, r7
   1db94:	b004      	add	sp, #16
   1db96:	bd80      	pop	{r7, pc}

0001db98 <adc_disable_interrupt>:
 * \param[in] module_inst Pointer to the ADC software instance struct
 * \param[in] interrupt Interrupt to disable
 */
static inline void adc_disable_interrupt(struct adc_module *const module_inst,
		enum adc_interrupt_flag interrupt)
{
   1db98:	b580      	push	{r7, lr}
   1db9a:	b084      	sub	sp, #16
   1db9c:	af00      	add	r7, sp, #0
   1db9e:	6078      	str	r0, [r7, #4]
   1dba0:	000a      	movs	r2, r1
   1dba2:	1cfb      	adds	r3, r7, #3
   1dba4:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
   1dba6:	687b      	ldr	r3, [r7, #4]
   1dba8:	681b      	ldr	r3, [r3, #0]
   1dbaa:	60fb      	str	r3, [r7, #12]
	/* Enable interrupt */
	adc_module->INTENCLR.reg = interrupt;
   1dbac:	68fb      	ldr	r3, [r7, #12]
   1dbae:	1cfa      	adds	r2, r7, #3
   1dbb0:	7812      	ldrb	r2, [r2, #0]
   1dbb2:	759a      	strb	r2, [r3, #22]
}
   1dbb4:	46c0      	nop			; (mov r8, r8)
   1dbb6:	46bd      	mov	sp, r7
   1dbb8:	b004      	add	sp, #16
   1dbba:	bd80      	pop	{r7, pc}

0001dbbc <_adc_interrupt_handler>:
#include "adc_callback.h"

struct adc_module *_adc_instances[ADC_INST_NUM];

static void _adc_interrupt_handler(const uint8_t instance)
{
   1dbbc:	b580      	push	{r7, lr}
   1dbbe:	b084      	sub	sp, #16
   1dbc0:	af00      	add	r7, sp, #0
   1dbc2:	0002      	movs	r2, r0
   1dbc4:	1dfb      	adds	r3, r7, #7
   1dbc6:	701a      	strb	r2, [r3, #0]
	struct adc_module *module = _adc_instances[instance];
   1dbc8:	1dfb      	adds	r3, r7, #7
   1dbca:	781a      	ldrb	r2, [r3, #0]
   1dbcc:	4b47      	ldr	r3, [pc, #284]	; (1dcec <_adc_interrupt_handler+0x130>)
   1dbce:	0092      	lsls	r2, r2, #2
   1dbd0:	58d3      	ldr	r3, [r2, r3]
   1dbd2:	60fb      	str	r3, [r7, #12]

	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->INTFLAG.reg & module->hw->INTENSET.reg;
   1dbd4:	68fb      	ldr	r3, [r7, #12]
   1dbd6:	681b      	ldr	r3, [r3, #0]
   1dbd8:	7e1b      	ldrb	r3, [r3, #24]
   1dbda:	b2da      	uxtb	r2, r3
   1dbdc:	68fb      	ldr	r3, [r7, #12]
   1dbde:	681b      	ldr	r3, [r3, #0]
   1dbe0:	7ddb      	ldrb	r3, [r3, #23]
   1dbe2:	b2db      	uxtb	r3, r3
   1dbe4:	4013      	ands	r3, r2
   1dbe6:	b2db      	uxtb	r3, r3
   1dbe8:	60bb      	str	r3, [r7, #8]

	if (flags & ADC_INTFLAG_RESRDY) {
   1dbea:	68bb      	ldr	r3, [r7, #8]
   1dbec:	2201      	movs	r2, #1
   1dbee:	4013      	ands	r3, r2
   1dbf0:	d045      	beq.n	1dc7e <_adc_interrupt_handler+0xc2>
		/* clear interrupt flag */
		module->hw->INTFLAG.reg = ADC_INTFLAG_RESRDY;
   1dbf2:	68fb      	ldr	r3, [r7, #12]
   1dbf4:	681b      	ldr	r3, [r3, #0]
   1dbf6:	2201      	movs	r2, #1
   1dbf8:	761a      	strb	r2, [r3, #24]

		while (adc_is_syncing(module)) {
   1dbfa:	46c0      	nop			; (mov r8, r8)
   1dbfc:	68fb      	ldr	r3, [r7, #12]
   1dbfe:	0018      	movs	r0, r3
   1dc00:	4b3b      	ldr	r3, [pc, #236]	; (1dcf0 <_adc_interrupt_handler+0x134>)
   1dc02:	4798      	blx	r3
   1dc04:	1e03      	subs	r3, r0, #0
   1dc06:	d1f9      	bne.n	1dbfc <_adc_interrupt_handler+0x40>
			/* Wait for synchronization */
		}

		/* store ADC result in job buffer */
		*(module->job_buffer++) = module->hw->RESULT.reg;
   1dc08:	68fb      	ldr	r3, [r7, #12]
   1dc0a:	695b      	ldr	r3, [r3, #20]
   1dc0c:	1c99      	adds	r1, r3, #2
   1dc0e:	68fa      	ldr	r2, [r7, #12]
   1dc10:	6151      	str	r1, [r2, #20]
   1dc12:	68fa      	ldr	r2, [r7, #12]
   1dc14:	6812      	ldr	r2, [r2, #0]
   1dc16:	8b52      	ldrh	r2, [r2, #26]
   1dc18:	b292      	uxth	r2, r2
   1dc1a:	801a      	strh	r2, [r3, #0]

		if (--module->remaining_conversions > 0) {
   1dc1c:	68fb      	ldr	r3, [r7, #12]
   1dc1e:	8b1b      	ldrh	r3, [r3, #24]
   1dc20:	b29b      	uxth	r3, r3
   1dc22:	3b01      	subs	r3, #1
   1dc24:	b29b      	uxth	r3, r3
   1dc26:	68fa      	ldr	r2, [r7, #12]
   1dc28:	1c19      	adds	r1, r3, #0
   1dc2a:	8311      	strh	r1, [r2, #24]
   1dc2c:	2b00      	cmp	r3, #0
   1dc2e:	d008      	beq.n	1dc42 <_adc_interrupt_handler+0x86>
			if (module->software_trigger == true) {
   1dc30:	68fb      	ldr	r3, [r7, #12]
   1dc32:	7f5b      	ldrb	r3, [r3, #29]
   1dc34:	2b00      	cmp	r3, #0
   1dc36:	d022      	beq.n	1dc7e <_adc_interrupt_handler+0xc2>
				adc_start_conversion(module);
   1dc38:	68fb      	ldr	r3, [r7, #12]
   1dc3a:	0018      	movs	r0, r3
   1dc3c:	4b2d      	ldr	r3, [pc, #180]	; (1dcf4 <_adc_interrupt_handler+0x138>)
   1dc3e:	4798      	blx	r3
   1dc40:	e01d      	b.n	1dc7e <_adc_interrupt_handler+0xc2>
			}
		} else {
			adc_disable_interrupt(module, ADC_INTERRUPT_RESULT_READY);
   1dc42:	68fb      	ldr	r3, [r7, #12]
   1dc44:	2101      	movs	r1, #1
   1dc46:	0018      	movs	r0, r3
   1dc48:	4b2b      	ldr	r3, [pc, #172]	; (1dcf8 <_adc_interrupt_handler+0x13c>)
   1dc4a:	4798      	blx	r3
			if (module->job_status == STATUS_BUSY) {
   1dc4c:	68fb      	ldr	r3, [r7, #12]
   1dc4e:	7f1b      	ldrb	r3, [r3, #28]
   1dc50:	b2db      	uxtb	r3, r3
   1dc52:	2b05      	cmp	r3, #5
   1dc54:	d113      	bne.n	1dc7e <_adc_interrupt_handler+0xc2>
				/* job is complete. update status,disable interrupt
					*and call callback */
				module->job_status = STATUS_OK;
   1dc56:	68fb      	ldr	r3, [r7, #12]
   1dc58:	2200      	movs	r2, #0
   1dc5a:	771a      	strb	r2, [r3, #28]

				if ((module->enabled_callback_mask &
   1dc5c:	68fb      	ldr	r3, [r7, #12]
   1dc5e:	7edb      	ldrb	r3, [r3, #27]
   1dc60:	001a      	movs	r2, r3
   1dc62:	2301      	movs	r3, #1
   1dc64:	4013      	ands	r3, r2
   1dc66:	d00a      	beq.n	1dc7e <_adc_interrupt_handler+0xc2>
						(1 << ADC_CALLBACK_READ_BUFFER)) &&
					(module->registered_callback_mask &
   1dc68:	68fb      	ldr	r3, [r7, #12]
   1dc6a:	7e9b      	ldrb	r3, [r3, #26]
   1dc6c:	001a      	movs	r2, r3
   1dc6e:	2301      	movs	r3, #1
   1dc70:	4013      	ands	r3, r2
						(1 << ADC_CALLBACK_READ_BUFFER)) &&
   1dc72:	d004      	beq.n	1dc7e <_adc_interrupt_handler+0xc2>
						(1 << ADC_CALLBACK_READ_BUFFER))) {
					(module->callback[ADC_CALLBACK_READ_BUFFER])(module);
   1dc74:	68fb      	ldr	r3, [r7, #12]
   1dc76:	689b      	ldr	r3, [r3, #8]
   1dc78:	68fa      	ldr	r2, [r7, #12]
   1dc7a:	0010      	movs	r0, r2
   1dc7c:	4798      	blx	r3
				}
			}
		}
	}

	if (flags & ADC_INTFLAG_WINMON) {
   1dc7e:	68bb      	ldr	r3, [r7, #8]
   1dc80:	2204      	movs	r2, #4
   1dc82:	4013      	ands	r3, r2
   1dc84:	d014      	beq.n	1dcb0 <_adc_interrupt_handler+0xf4>
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
   1dc86:	68fb      	ldr	r3, [r7, #12]
   1dc88:	681b      	ldr	r3, [r3, #0]
   1dc8a:	2204      	movs	r2, #4
   1dc8c:	761a      	strb	r2, [r3, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
   1dc8e:	68fb      	ldr	r3, [r7, #12]
   1dc90:	7edb      	ldrb	r3, [r3, #27]
   1dc92:	001a      	movs	r2, r3
   1dc94:	2302      	movs	r3, #2
   1dc96:	4013      	ands	r3, r2
   1dc98:	d00a      	beq.n	1dcb0 <_adc_interrupt_handler+0xf4>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_WINDOW))) {
   1dc9a:	68fb      	ldr	r3, [r7, #12]
   1dc9c:	7e9b      	ldrb	r3, [r3, #26]
   1dc9e:	001a      	movs	r2, r3
   1dca0:	2302      	movs	r3, #2
   1dca2:	4013      	ands	r3, r2
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
   1dca4:	d004      	beq.n	1dcb0 <_adc_interrupt_handler+0xf4>
			(module->callback[ADC_CALLBACK_WINDOW])(module);
   1dca6:	68fb      	ldr	r3, [r7, #12]
   1dca8:	68db      	ldr	r3, [r3, #12]
   1dcaa:	68fa      	ldr	r2, [r7, #12]
   1dcac:	0010      	movs	r0, r2
   1dcae:	4798      	blx	r3
		}

	}

	if (flags & ADC_INTFLAG_OVERRUN) {
   1dcb0:	68bb      	ldr	r3, [r7, #8]
   1dcb2:	2202      	movs	r2, #2
   1dcb4:	4013      	ands	r3, r2
   1dcb6:	d014      	beq.n	1dce2 <_adc_interrupt_handler+0x126>
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
   1dcb8:	68fb      	ldr	r3, [r7, #12]
   1dcba:	681b      	ldr	r3, [r3, #0]
   1dcbc:	2202      	movs	r2, #2
   1dcbe:	761a      	strb	r2, [r3, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
   1dcc0:	68fb      	ldr	r3, [r7, #12]
   1dcc2:	7edb      	ldrb	r3, [r3, #27]
   1dcc4:	001a      	movs	r2, r3
   1dcc6:	2304      	movs	r3, #4
   1dcc8:	4013      	ands	r3, r2
   1dcca:	d00a      	beq.n	1dce2 <_adc_interrupt_handler+0x126>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_ERROR))) {
   1dccc:	68fb      	ldr	r3, [r7, #12]
   1dcce:	7e9b      	ldrb	r3, [r3, #26]
   1dcd0:	001a      	movs	r2, r3
   1dcd2:	2304      	movs	r3, #4
   1dcd4:	4013      	ands	r3, r2
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
   1dcd6:	d004      	beq.n	1dce2 <_adc_interrupt_handler+0x126>
			(module->callback[ADC_CALLBACK_ERROR])(module);
   1dcd8:	68fb      	ldr	r3, [r7, #12]
   1dcda:	691b      	ldr	r3, [r3, #16]
   1dcdc:	68fa      	ldr	r2, [r7, #12]
   1dcde:	0010      	movs	r0, r2
   1dce0:	4798      	blx	r3
		}
	}
}
   1dce2:	46c0      	nop			; (mov r8, r8)
   1dce4:	46bd      	mov	sp, r7
   1dce6:	b004      	add	sp, #16
   1dce8:	bd80      	pop	{r7, pc}
   1dcea:	46c0      	nop			; (mov r8, r8)
   1dcec:	20000aa8 	.word	0x20000aa8
   1dcf0:	0001db05 	.word	0x0001db05
   1dcf4:	0001db2d 	.word	0x0001db2d
   1dcf8:	0001db99 	.word	0x0001db99

0001dcfc <ADC_Handler>:

/** Interrupt handler for the ADC module. */
void ADC_Handler(void)
{
   1dcfc:	b580      	push	{r7, lr}
   1dcfe:	af00      	add	r7, sp, #0
	_adc_interrupt_handler(0);
   1dd00:	2000      	movs	r0, #0
   1dd02:	4b02      	ldr	r3, [pc, #8]	; (1dd0c <ADC_Handler+0x10>)
   1dd04:	4798      	blx	r3
}
   1dd06:	46c0      	nop			; (mov r8, r8)
   1dd08:	46bd      	mov	sp, r7
   1dd0a:	bd80      	pop	{r7, pc}
   1dd0c:	0001dbbd 	.word	0x0001dbbd

0001dd10 <adc_register_callback>:
 */
void adc_register_callback(
		struct adc_module *const module,
		adc_callback_t callback_func,
		enum adc_callback callback_type)
{
   1dd10:	b580      	push	{r7, lr}
   1dd12:	b084      	sub	sp, #16
   1dd14:	af00      	add	r7, sp, #0
   1dd16:	60f8      	str	r0, [r7, #12]
   1dd18:	60b9      	str	r1, [r7, #8]
   1dd1a:	1dfb      	adds	r3, r7, #7
   1dd1c:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
   1dd1e:	1dfb      	adds	r3, r7, #7
   1dd20:	781a      	ldrb	r2, [r3, #0]
   1dd22:	68fb      	ldr	r3, [r7, #12]
   1dd24:	3202      	adds	r2, #2
   1dd26:	0092      	lsls	r2, r2, #2
   1dd28:	68b9      	ldr	r1, [r7, #8]
   1dd2a:	50d1      	str	r1, [r2, r3]

	/* Set the bit corresponding to the callback_type */
	module->registered_callback_mask |= (1 << callback_type);
   1dd2c:	68fb      	ldr	r3, [r7, #12]
   1dd2e:	7e9b      	ldrb	r3, [r3, #26]
   1dd30:	b25a      	sxtb	r2, r3
   1dd32:	1dfb      	adds	r3, r7, #7
   1dd34:	781b      	ldrb	r3, [r3, #0]
   1dd36:	2101      	movs	r1, #1
   1dd38:	4099      	lsls	r1, r3
   1dd3a:	000b      	movs	r3, r1
   1dd3c:	b25b      	sxtb	r3, r3
   1dd3e:	4313      	orrs	r3, r2
   1dd40:	b25b      	sxtb	r3, r3
   1dd42:	b2da      	uxtb	r2, r3
   1dd44:	68fb      	ldr	r3, [r7, #12]
   1dd46:	769a      	strb	r2, [r3, #26]
}
   1dd48:	46c0      	nop			; (mov r8, r8)
   1dd4a:	46bd      	mov	sp, r7
   1dd4c:	b004      	add	sp, #16
   1dd4e:	bd80      	pop	{r7, pc}

0001dd50 <adc_read_buffer_job>:
 */
enum status_code adc_read_buffer_job(
		struct adc_module *const module_inst,
		uint16_t *buffer,
		uint16_t samples)
{
   1dd50:	b580      	push	{r7, lr}
   1dd52:	b084      	sub	sp, #16
   1dd54:	af00      	add	r7, sp, #0
   1dd56:	60f8      	str	r0, [r7, #12]
   1dd58:	60b9      	str	r1, [r7, #8]
   1dd5a:	1dbb      	adds	r3, r7, #6
   1dd5c:	801a      	strh	r2, [r3, #0]
	Assert(module_inst);
	Assert(samples);
	Assert(buffer);

	if(module_inst->remaining_conversions != 0 ||
   1dd5e:	68fb      	ldr	r3, [r7, #12]
   1dd60:	8b1b      	ldrh	r3, [r3, #24]
   1dd62:	b29b      	uxth	r3, r3
   1dd64:	2b00      	cmp	r3, #0
   1dd66:	d104      	bne.n	1dd72 <adc_read_buffer_job+0x22>
			module_inst->job_status == STATUS_BUSY){
   1dd68:	68fb      	ldr	r3, [r7, #12]
   1dd6a:	7f1b      	ldrb	r3, [r3, #28]
   1dd6c:	b2db      	uxtb	r3, r3
	if(module_inst->remaining_conversions != 0 ||
   1dd6e:	2b05      	cmp	r3, #5
   1dd70:	d101      	bne.n	1dd76 <adc_read_buffer_job+0x26>
		return STATUS_BUSY;
   1dd72:	2305      	movs	r3, #5
   1dd74:	e017      	b.n	1dda6 <adc_read_buffer_job+0x56>
	}

	module_inst->job_status = STATUS_BUSY;
   1dd76:	68fb      	ldr	r3, [r7, #12]
   1dd78:	2205      	movs	r2, #5
   1dd7a:	771a      	strb	r2, [r3, #28]
	module_inst->remaining_conversions = samples;
   1dd7c:	68fb      	ldr	r3, [r7, #12]
   1dd7e:	1dba      	adds	r2, r7, #6
   1dd80:	8812      	ldrh	r2, [r2, #0]
   1dd82:	831a      	strh	r2, [r3, #24]
	module_inst->job_buffer = buffer;
   1dd84:	68fb      	ldr	r3, [r7, #12]
   1dd86:	68ba      	ldr	r2, [r7, #8]
   1dd88:	615a      	str	r2, [r3, #20]

	adc_enable_interrupt(module_inst, ADC_INTERRUPT_RESULT_READY);
   1dd8a:	68fb      	ldr	r3, [r7, #12]
   1dd8c:	2101      	movs	r1, #1
   1dd8e:	0018      	movs	r0, r3
   1dd90:	4b07      	ldr	r3, [pc, #28]	; (1ddb0 <adc_read_buffer_job+0x60>)
   1dd92:	4798      	blx	r3

	if(module_inst->software_trigger == true) {
   1dd94:	68fb      	ldr	r3, [r7, #12]
   1dd96:	7f5b      	ldrb	r3, [r3, #29]
   1dd98:	2b00      	cmp	r3, #0
   1dd9a:	d003      	beq.n	1dda4 <adc_read_buffer_job+0x54>
		adc_start_conversion(module_inst);
   1dd9c:	68fb      	ldr	r3, [r7, #12]
   1dd9e:	0018      	movs	r0, r3
   1dda0:	4b04      	ldr	r3, [pc, #16]	; (1ddb4 <adc_read_buffer_job+0x64>)
   1dda2:	4798      	blx	r3
	}

	return STATUS_OK;
   1dda4:	2300      	movs	r3, #0
}
   1dda6:	0018      	movs	r0, r3
   1dda8:	46bd      	mov	sp, r7
   1ddaa:	b004      	add	sp, #16
   1ddac:	bd80      	pop	{r7, pc}
   1ddae:	46c0      	nop			; (mov r8, r8)
   1ddb0:	0001db75 	.word	0x0001db75
   1ddb4:	0001db2d 	.word	0x0001db2d

0001ddb8 <system_interrupt_disable>:
{
   1ddb8:	b580      	push	{r7, lr}
   1ddba:	b082      	sub	sp, #8
   1ddbc:	af00      	add	r7, sp, #0
   1ddbe:	0002      	movs	r2, r0
   1ddc0:	1dfb      	adds	r3, r7, #7
   1ddc2:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   1ddc4:	4a07      	ldr	r2, [pc, #28]	; (1dde4 <system_interrupt_disable+0x2c>)
   1ddc6:	1dfb      	adds	r3, r7, #7
   1ddc8:	781b      	ldrb	r3, [r3, #0]
   1ddca:	0019      	movs	r1, r3
   1ddcc:	231f      	movs	r3, #31
   1ddce:	400b      	ands	r3, r1
   1ddd0:	2101      	movs	r1, #1
   1ddd2:	4099      	lsls	r1, r3
   1ddd4:	000b      	movs	r3, r1
   1ddd6:	0019      	movs	r1, r3
   1ddd8:	2380      	movs	r3, #128	; 0x80
   1ddda:	50d1      	str	r1, [r2, r3]
}
   1dddc:	46c0      	nop			; (mov r8, r8)
   1ddde:	46bd      	mov	sp, r7
   1dde0:	b002      	add	sp, #8
   1dde2:	bd80      	pop	{r7, pc}
   1dde4:	e000e100 	.word	0xe000e100

0001dde8 <_dac_interrupt_handler>:
 *  Internal handler for DAC module interrupts.
 *
 * \param[in] instance  DAC instance number
 */
static void _dac_interrupt_handler(const uint8_t instance)
{
   1dde8:	b580      	push	{r7, lr}
   1ddea:	b084      	sub	sp, #16
   1ddec:	af00      	add	r7, sp, #0
   1ddee:	0002      	movs	r2, r0
   1ddf0:	1dfb      	adds	r3, r7, #7
   1ddf2:	701a      	strb	r2, [r3, #0]
	struct dac_module *module = _dac_instances[instance];
   1ddf4:	1dfb      	adds	r3, r7, #7
   1ddf6:	781a      	ldrb	r2, [r3, #0]
   1ddf8:	4b37      	ldr	r3, [pc, #220]	; (1ded8 <_dac_interrupt_handler+0xf0>)
   1ddfa:	0092      	lsls	r2, r2, #2
   1ddfc:	58d3      	ldr	r3, [r2, r3]
   1ddfe:	60fb      	str	r3, [r7, #12]
	Dac *const dac_hw = module->hw;
   1de00:	68fb      	ldr	r3, [r7, #12]
   1de02:	681b      	ldr	r3, [r3, #0]
   1de04:	60bb      	str	r3, [r7, #8]

	if (dac_hw->INTFLAG.reg & DAC_INTFLAG_UNDERRUN) {
   1de06:	68bb      	ldr	r3, [r7, #8]
   1de08:	799b      	ldrb	r3, [r3, #6]
   1de0a:	b2db      	uxtb	r3, r3
   1de0c:	001a      	movs	r2, r3
   1de0e:	2301      	movs	r3, #1
   1de10:	4013      	ands	r3, r2
   1de12:	d00e      	beq.n	1de32 <_dac_interrupt_handler+0x4a>
		dac_hw->INTFLAG.reg = DAC_INTFLAG_UNDERRUN;
   1de14:	68bb      	ldr	r3, [r7, #8]
   1de16:	2201      	movs	r2, #1
   1de18:	719a      	strb	r2, [r3, #6]

		if ((module->callback) &&
   1de1a:	68fb      	ldr	r3, [r7, #12]
   1de1c:	3314      	adds	r3, #20
   1de1e:	2b00      	cmp	r3, #0
   1de20:	d007      	beq.n	1de32 <_dac_interrupt_handler+0x4a>
			 (module->callback_enable[DAC_CALLBACK_DATA_UNDERRUN])){
   1de22:	68fb      	ldr	r3, [r7, #12]
   1de24:	7c5b      	ldrb	r3, [r3, #17]
		if ((module->callback) &&
   1de26:	2b00      	cmp	r3, #0
   1de28:	d003      	beq.n	1de32 <_dac_interrupt_handler+0x4a>
			module->callback[DAC_CALLBACK_DATA_UNDERRUN](0);
   1de2a:	68fb      	ldr	r3, [r7, #12]
   1de2c:	699b      	ldr	r3, [r3, #24]
   1de2e:	2000      	movs	r0, #0
   1de30:	4798      	blx	r3
		}
	}

	if (dac_hw->INTFLAG.reg & DAC_INTFLAG_EMPTY) {
   1de32:	68bb      	ldr	r3, [r7, #8]
   1de34:	799b      	ldrb	r3, [r3, #6]
   1de36:	b2db      	uxtb	r3, r3
   1de38:	001a      	movs	r2, r3
   1de3a:	2302      	movs	r3, #2
   1de3c:	4013      	ands	r3, r2
   1de3e:	d047      	beq.n	1ded0 <_dac_interrupt_handler+0xe8>
		dac_hw->INTFLAG.reg = DAC_INTFLAG_EMPTY;
   1de40:	68bb      	ldr	r3, [r7, #8]
   1de42:	2202      	movs	r2, #2
   1de44:	719a      	strb	r2, [r3, #6]

		/* If in a write buffer job */
		if (module->remaining_conversions) {
   1de46:	68fb      	ldr	r3, [r7, #12]
   1de48:	899b      	ldrh	r3, [r3, #12]
   1de4a:	b29b      	uxth	r3, r3
   1de4c:	2b00      	cmp	r3, #0
   1de4e:	d033      	beq.n	1deb8 <_dac_interrupt_handler+0xd0>

			/* Fill the data buffer with next data in write buffer */
			dac_hw->DATABUF.reg =
				module->job_buffer[module->transferred_conversions++];
   1de50:	68fb      	ldr	r3, [r7, #12]
   1de52:	689a      	ldr	r2, [r3, #8]
   1de54:	68fb      	ldr	r3, [r7, #12]
   1de56:	89db      	ldrh	r3, [r3, #14]
   1de58:	b29b      	uxth	r3, r3
   1de5a:	1c59      	adds	r1, r3, #1
   1de5c:	b288      	uxth	r0, r1
   1de5e:	68f9      	ldr	r1, [r7, #12]
   1de60:	81c8      	strh	r0, [r1, #14]
   1de62:	005b      	lsls	r3, r3, #1
   1de64:	18d3      	adds	r3, r2, r3
   1de66:	881b      	ldrh	r3, [r3, #0]
   1de68:	b29a      	uxth	r2, r3
			dac_hw->DATABUF.reg =
   1de6a:	68bb      	ldr	r3, [r7, #8]
   1de6c:	819a      	strh	r2, [r3, #12]

			/* Write buffer size decrement */
			module->remaining_conversions --;
   1de6e:	68fb      	ldr	r3, [r7, #12]
   1de70:	899b      	ldrh	r3, [r3, #12]
   1de72:	b29b      	uxth	r3, r3
   1de74:	3b01      	subs	r3, #1
   1de76:	b29a      	uxth	r2, r3
   1de78:	68fb      	ldr	r3, [r7, #12]
   1de7a:	819a      	strh	r2, [r3, #12]

			/* If in a write buffer job and all the data are converted */
			if (module->remaining_conversions == 0) {
   1de7c:	68fb      	ldr	r3, [r7, #12]
   1de7e:	899b      	ldrh	r3, [r3, #12]
   1de80:	b29b      	uxth	r3, r3
   1de82:	2b00      	cmp	r3, #0
   1de84:	d118      	bne.n	1deb8 <_dac_interrupt_handler+0xd0>
				module->job_status = STATUS_OK;
   1de86:	68fb      	ldr	r3, [r7, #12]
   1de88:	2220      	movs	r2, #32
   1de8a:	2100      	movs	r1, #0
   1de8c:	5499      	strb	r1, [r3, r2]

				/* Disable interrupt */
				dac_hw->INTENCLR.reg = DAC_INTENCLR_EMPTY;
   1de8e:	68bb      	ldr	r3, [r7, #8]
   1de90:	2202      	movs	r2, #2
   1de92:	711a      	strb	r2, [r3, #4]
				dac_hw->INTFLAG.reg = DAC_INTFLAG_EMPTY;
   1de94:	68bb      	ldr	r3, [r7, #8]
   1de96:	2202      	movs	r2, #2
   1de98:	719a      	strb	r2, [r3, #6]
				system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_DAC);
   1de9a:	2019      	movs	r0, #25
   1de9c:	4b0f      	ldr	r3, [pc, #60]	; (1dedc <_dac_interrupt_handler+0xf4>)
   1de9e:	4798      	blx	r3

				if ((module->callback) &&
   1dea0:	68fb      	ldr	r3, [r7, #12]
   1dea2:	3314      	adds	r3, #20
   1dea4:	2b00      	cmp	r3, #0
   1dea6:	d007      	beq.n	1deb8 <_dac_interrupt_handler+0xd0>
					 (module->callback_enable[DAC_CALLBACK_TRANSFER_COMPLETE])) {
   1dea8:	68fb      	ldr	r3, [r7, #12]
   1deaa:	7c9b      	ldrb	r3, [r3, #18]
				if ((module->callback) &&
   1deac:	2b00      	cmp	r3, #0
   1deae:	d003      	beq.n	1deb8 <_dac_interrupt_handler+0xd0>
					module->callback[DAC_CALLBACK_TRANSFER_COMPLETE](0);
   1deb0:	68fb      	ldr	r3, [r7, #12]
   1deb2:	69db      	ldr	r3, [r3, #28]
   1deb4:	2000      	movs	r0, #0
   1deb6:	4798      	blx	r3
				}
			}
		}

		if ((module->callback) &&
   1deb8:	68fb      	ldr	r3, [r7, #12]
   1deba:	3314      	adds	r3, #20
   1debc:	2b00      	cmp	r3, #0
   1debe:	d007      	beq.n	1ded0 <_dac_interrupt_handler+0xe8>
			 (module->callback_enable[DAC_CALLBACK_DATA_EMPTY])) {
   1dec0:	68fb      	ldr	r3, [r7, #12]
   1dec2:	7c1b      	ldrb	r3, [r3, #16]
		if ((module->callback) &&
   1dec4:	2b00      	cmp	r3, #0
   1dec6:	d003      	beq.n	1ded0 <_dac_interrupt_handler+0xe8>
			module->callback[DAC_CALLBACK_DATA_EMPTY](0);
   1dec8:	68fb      	ldr	r3, [r7, #12]
   1deca:	695b      	ldr	r3, [r3, #20]
   1decc:	2000      	movs	r0, #0
   1dece:	4798      	blx	r3
		}
	}
}
   1ded0:	46c0      	nop			; (mov r8, r8)
   1ded2:	46bd      	mov	sp, r7
   1ded4:	b004      	add	sp, #16
   1ded6:	bd80      	pop	{r7, pc}
   1ded8:	20000aac 	.word	0x20000aac
   1dedc:	0001ddb9 	.word	0x0001ddb9

0001dee0 <DAC_Handler>:

/** Handler for the DAC hardware module interrupt. */
void DAC_Handler(void)
{
   1dee0:	b580      	push	{r7, lr}
   1dee2:	af00      	add	r7, sp, #0
	_dac_interrupt_handler(0);
   1dee4:	2000      	movs	r0, #0
   1dee6:	4b02      	ldr	r3, [pc, #8]	; (1def0 <DAC_Handler+0x10>)
   1dee8:	4798      	blx	r3
}
   1deea:	46c0      	nop			; (mov r8, r8)
   1deec:	46bd      	mov	sp, r7
   1deee:	bd80      	pop	{r7, pc}
   1def0:	0001dde9 	.word	0x0001dde9

0001def4 <system_interrupt_enter_critical_section>:
{
   1def4:	b580      	push	{r7, lr}
   1def6:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
   1def8:	4b02      	ldr	r3, [pc, #8]	; (1df04 <system_interrupt_enter_critical_section+0x10>)
   1defa:	4798      	blx	r3
}
   1defc:	46c0      	nop			; (mov r8, r8)
   1defe:	46bd      	mov	sp, r7
   1df00:	bd80      	pop	{r7, pc}
   1df02:	46c0      	nop			; (mov r8, r8)
   1df04:	0002395d 	.word	0x0002395d

0001df08 <system_interrupt_leave_critical_section>:
{
   1df08:	b580      	push	{r7, lr}
   1df0a:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
   1df0c:	4b02      	ldr	r3, [pc, #8]	; (1df18 <system_interrupt_leave_critical_section+0x10>)
   1df0e:	4798      	blx	r3
}
   1df10:	46c0      	nop			; (mov r8, r8)
   1df12:	46bd      	mov	sp, r7
   1df14:	bd80      	pop	{r7, pc}
   1df16:	46c0      	nop			; (mov r8, r8)
   1df18:	000239b1 	.word	0x000239b1

0001df1c <DMAC_Handler>:
/**
 * \brief DMA interrupt service routine.
 *
 */
void DMAC_Handler( void )
{
   1df1c:	b580      	push	{r7, lr}
   1df1e:	b086      	sub	sp, #24
   1df20:	af00      	add	r7, sp, #0
	struct dma_resource *resource;
	uint8_t isr;
	uint32_t write_size;
	uint32_t total_size;

	system_interrupt_enter_critical_section();
   1df22:	4b49      	ldr	r3, [pc, #292]	; (1e048 <DMAC_Handler+0x12c>)
   1df24:	4798      	blx	r3

	/* Get Pending channel */
	active_channel =  DMAC->INTPEND.reg & DMAC_INTPEND_ID_Msk;
   1df26:	4b49      	ldr	r3, [pc, #292]	; (1e04c <DMAC_Handler+0x130>)
   1df28:	8c1b      	ldrh	r3, [r3, #32]
   1df2a:	b29b      	uxth	r3, r3
   1df2c:	b2da      	uxtb	r2, r3
   1df2e:	2317      	movs	r3, #23
   1df30:	18fb      	adds	r3, r7, r3
   1df32:	210f      	movs	r1, #15
   1df34:	400a      	ands	r2, r1
   1df36:	701a      	strb	r2, [r3, #0]

	Assert(_dma_active_resource[active_channel]);

	/* Get active DMA resource based on channel */
	resource = _dma_active_resource[active_channel];
   1df38:	2317      	movs	r3, #23
   1df3a:	18fb      	adds	r3, r7, r3
   1df3c:	781a      	ldrb	r2, [r3, #0]
   1df3e:	4b44      	ldr	r3, [pc, #272]	; (1e050 <DMAC_Handler+0x134>)
   1df40:	0092      	lsls	r2, r2, #2
   1df42:	58d3      	ldr	r3, [r2, r3]
   1df44:	613b      	str	r3, [r7, #16]

	/* Select the active channel */
	DMAC->CHID.reg = DMAC_CHID_ID(resource->channel_id);
   1df46:	4a41      	ldr	r2, [pc, #260]	; (1e04c <DMAC_Handler+0x130>)
   1df48:	693b      	ldr	r3, [r7, #16]
   1df4a:	781b      	ldrb	r3, [r3, #0]
   1df4c:	210f      	movs	r1, #15
   1df4e:	400b      	ands	r3, r1
   1df50:	b2d9      	uxtb	r1, r3
   1df52:	233f      	movs	r3, #63	; 0x3f
   1df54:	54d1      	strb	r1, [r2, r3]
	isr = DMAC->CHINTFLAG.reg;
   1df56:	493d      	ldr	r1, [pc, #244]	; (1e04c <DMAC_Handler+0x130>)
   1df58:	230f      	movs	r3, #15
   1df5a:	18fb      	adds	r3, r7, r3
   1df5c:	224e      	movs	r2, #78	; 0x4e
   1df5e:	5c8a      	ldrb	r2, [r1, r2]
   1df60:	701a      	strb	r2, [r3, #0]

	/* Calculate block transfer size of the DMA transfer */
	total_size = descriptor_section[resource->channel_id].BTCNT.reg;
   1df62:	693b      	ldr	r3, [r7, #16]
   1df64:	781b      	ldrb	r3, [r3, #0]
   1df66:	4a3b      	ldr	r2, [pc, #236]	; (1e054 <DMAC_Handler+0x138>)
   1df68:	011b      	lsls	r3, r3, #4
   1df6a:	18d3      	adds	r3, r2, r3
   1df6c:	3302      	adds	r3, #2
   1df6e:	881b      	ldrh	r3, [r3, #0]
   1df70:	b29b      	uxth	r3, r3
   1df72:	60bb      	str	r3, [r7, #8]
	write_size = _write_back_section[resource->channel_id].BTCNT.reg;
   1df74:	693b      	ldr	r3, [r7, #16]
   1df76:	781b      	ldrb	r3, [r3, #0]
   1df78:	4a37      	ldr	r2, [pc, #220]	; (1e058 <DMAC_Handler+0x13c>)
   1df7a:	011b      	lsls	r3, r3, #4
   1df7c:	18d3      	adds	r3, r2, r3
   1df7e:	3302      	adds	r3, #2
   1df80:	881b      	ldrh	r3, [r3, #0]
   1df82:	b29b      	uxth	r3, r3
   1df84:	607b      	str	r3, [r7, #4]
	resource->transfered_size = total_size - write_size;
   1df86:	68ba      	ldr	r2, [r7, #8]
   1df88:	687b      	ldr	r3, [r7, #4]
   1df8a:	1ad2      	subs	r2, r2, r3
   1df8c:	693b      	ldr	r3, [r7, #16]
   1df8e:	615a      	str	r2, [r3, #20]

	/* DMA channel interrupt handler */
	if (isr & DMAC_CHINTENCLR_TERR) {
   1df90:	230f      	movs	r3, #15
   1df92:	18fb      	adds	r3, r7, r3
   1df94:	781b      	ldrb	r3, [r3, #0]
   1df96:	2201      	movs	r2, #1
   1df98:	4013      	ands	r3, r2
   1df9a:	d016      	beq.n	1dfca <DMAC_Handler+0xae>
		/* Clear transfer error flag */
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_TERR;
   1df9c:	4a2b      	ldr	r2, [pc, #172]	; (1e04c <DMAC_Handler+0x130>)
   1df9e:	234e      	movs	r3, #78	; 0x4e
   1dfa0:	2101      	movs	r1, #1
   1dfa2:	54d1      	strb	r1, [r2, r3]

		/* Set I/O ERROR status */
		resource->job_status = STATUS_ERR_IO;
   1dfa4:	693b      	ldr	r3, [r7, #16]
   1dfa6:	2210      	movs	r2, #16
   1dfa8:	745a      	strb	r2, [r3, #17]

		/* Execute the callback function */
		if ((resource->callback_enable & (1<<DMA_CALLBACK_TRANSFER_ERROR)) &&
   1dfaa:	693b      	ldr	r3, [r7, #16]
   1dfac:	7c1b      	ldrb	r3, [r3, #16]
   1dfae:	001a      	movs	r2, r3
   1dfb0:	2301      	movs	r3, #1
   1dfb2:	4013      	ands	r3, r2
   1dfb4:	d042      	beq.n	1e03c <DMAC_Handler+0x120>
				(resource->callback[DMA_CALLBACK_TRANSFER_ERROR])) {
   1dfb6:	693b      	ldr	r3, [r7, #16]
   1dfb8:	685b      	ldr	r3, [r3, #4]
		if ((resource->callback_enable & (1<<DMA_CALLBACK_TRANSFER_ERROR)) &&
   1dfba:	2b00      	cmp	r3, #0
   1dfbc:	d03e      	beq.n	1e03c <DMAC_Handler+0x120>
			resource->callback[DMA_CALLBACK_TRANSFER_ERROR](resource);
   1dfbe:	693b      	ldr	r3, [r7, #16]
   1dfc0:	685b      	ldr	r3, [r3, #4]
   1dfc2:	693a      	ldr	r2, [r7, #16]
   1dfc4:	0010      	movs	r0, r2
   1dfc6:	4798      	blx	r3
   1dfc8:	e038      	b.n	1e03c <DMAC_Handler+0x120>
		}
	} else if (isr & DMAC_CHINTENCLR_TCMPL) {
   1dfca:	230f      	movs	r3, #15
   1dfcc:	18fb      	adds	r3, r7, r3
   1dfce:	781b      	ldrb	r3, [r3, #0]
   1dfd0:	2202      	movs	r2, #2
   1dfd2:	4013      	ands	r3, r2
   1dfd4:	d016      	beq.n	1e004 <DMAC_Handler+0xe8>
		/* Clear the transfer complete flag */
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_TCMPL;
   1dfd6:	4a1d      	ldr	r2, [pc, #116]	; (1e04c <DMAC_Handler+0x130>)
   1dfd8:	234e      	movs	r3, #78	; 0x4e
   1dfda:	2102      	movs	r1, #2
   1dfdc:	54d1      	strb	r1, [r2, r3]

		/* Set job status */
		resource->job_status = STATUS_OK;
   1dfde:	693b      	ldr	r3, [r7, #16]
   1dfe0:	2200      	movs	r2, #0
   1dfe2:	745a      	strb	r2, [r3, #17]

		/* Execute the callback function */
		if ((resource->callback_enable & (1 << DMA_CALLBACK_TRANSFER_DONE)) &&
   1dfe4:	693b      	ldr	r3, [r7, #16]
   1dfe6:	7c1b      	ldrb	r3, [r3, #16]
   1dfe8:	001a      	movs	r2, r3
   1dfea:	2302      	movs	r3, #2
   1dfec:	4013      	ands	r3, r2
   1dfee:	d025      	beq.n	1e03c <DMAC_Handler+0x120>
				(resource->callback[DMA_CALLBACK_TRANSFER_DONE])) {
   1dff0:	693b      	ldr	r3, [r7, #16]
   1dff2:	689b      	ldr	r3, [r3, #8]
		if ((resource->callback_enable & (1 << DMA_CALLBACK_TRANSFER_DONE)) &&
   1dff4:	2b00      	cmp	r3, #0
   1dff6:	d021      	beq.n	1e03c <DMAC_Handler+0x120>
			resource->callback[DMA_CALLBACK_TRANSFER_DONE](resource);
   1dff8:	693b      	ldr	r3, [r7, #16]
   1dffa:	689b      	ldr	r3, [r3, #8]
   1dffc:	693a      	ldr	r2, [r7, #16]
   1dffe:	0010      	movs	r0, r2
   1e000:	4798      	blx	r3
   1e002:	e01b      	b.n	1e03c <DMAC_Handler+0x120>
		}
	} else if (isr & DMAC_CHINTENCLR_SUSP) {
   1e004:	230f      	movs	r3, #15
   1e006:	18fb      	adds	r3, r7, r3
   1e008:	781b      	ldrb	r3, [r3, #0]
   1e00a:	2204      	movs	r2, #4
   1e00c:	4013      	ands	r3, r2
   1e00e:	d015      	beq.n	1e03c <DMAC_Handler+0x120>
		/* Clear channel suspend flag */
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_SUSP;
   1e010:	4a0e      	ldr	r2, [pc, #56]	; (1e04c <DMAC_Handler+0x130>)
   1e012:	234e      	movs	r3, #78	; 0x4e
   1e014:	2104      	movs	r1, #4
   1e016:	54d1      	strb	r1, [r2, r3]

		/* Set job status */
		resource->job_status = STATUS_SUSPEND;
   1e018:	693b      	ldr	r3, [r7, #16]
   1e01a:	2206      	movs	r2, #6
   1e01c:	745a      	strb	r2, [r3, #17]

		/* Execute the callback function */
		if ((resource->callback_enable & (1 << DMA_CALLBACK_CHANNEL_SUSPEND)) &&
   1e01e:	693b      	ldr	r3, [r7, #16]
   1e020:	7c1b      	ldrb	r3, [r3, #16]
   1e022:	001a      	movs	r2, r3
   1e024:	2304      	movs	r3, #4
   1e026:	4013      	ands	r3, r2
   1e028:	d008      	beq.n	1e03c <DMAC_Handler+0x120>
			(resource->callback[DMA_CALLBACK_CHANNEL_SUSPEND])){
   1e02a:	693b      	ldr	r3, [r7, #16]
   1e02c:	68db      	ldr	r3, [r3, #12]
		if ((resource->callback_enable & (1 << DMA_CALLBACK_CHANNEL_SUSPEND)) &&
   1e02e:	2b00      	cmp	r3, #0
   1e030:	d004      	beq.n	1e03c <DMAC_Handler+0x120>
			resource->callback[DMA_CALLBACK_CHANNEL_SUSPEND](resource);
   1e032:	693b      	ldr	r3, [r7, #16]
   1e034:	68db      	ldr	r3, [r3, #12]
   1e036:	693a      	ldr	r2, [r7, #16]
   1e038:	0010      	movs	r0, r2
   1e03a:	4798      	blx	r3
		}
	}

	system_interrupt_leave_critical_section();
   1e03c:	4b07      	ldr	r3, [pc, #28]	; (1e05c <DMAC_Handler+0x140>)
   1e03e:	4798      	blx	r3
}
   1e040:	46c0      	nop			; (mov r8, r8)
   1e042:	46bd      	mov	sp, r7
   1e044:	b006      	add	sp, #24
   1e046:	bd80      	pop	{r7, pc}
   1e048:	0001def5 	.word	0x0001def5
   1e04c:	41004800 	.word	0x41004800
   1e050:	200004a0 	.word	0x200004a0
   1e054:	20000ab0 	.word	0x20000ab0
   1e058:	20000450 	.word	0x20000450
   1e05c:	0001df09 	.word	0x0001df09

0001e060 <system_gclk_chan_get_config_defaults>:
{
   1e060:	b580      	push	{r7, lr}
   1e062:	b082      	sub	sp, #8
   1e064:	af00      	add	r7, sp, #0
   1e066:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   1e068:	687b      	ldr	r3, [r7, #4]
   1e06a:	2200      	movs	r2, #0
   1e06c:	701a      	strb	r2, [r3, #0]
}
   1e06e:	46c0      	nop			; (mov r8, r8)
   1e070:	46bd      	mov	sp, r7
   1e072:	b002      	add	sp, #8
   1e074:	bd80      	pop	{r7, pc}
	...

0001e078 <system_apb_clock_set_mask>:
{
   1e078:	b580      	push	{r7, lr}
   1e07a:	b082      	sub	sp, #8
   1e07c:	af00      	add	r7, sp, #0
   1e07e:	0002      	movs	r2, r0
   1e080:	6039      	str	r1, [r7, #0]
   1e082:	1dfb      	adds	r3, r7, #7
   1e084:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   1e086:	1dfb      	adds	r3, r7, #7
   1e088:	781b      	ldrb	r3, [r3, #0]
   1e08a:	2b01      	cmp	r3, #1
   1e08c:	d00a      	beq.n	1e0a4 <system_apb_clock_set_mask+0x2c>
   1e08e:	2b02      	cmp	r3, #2
   1e090:	d00f      	beq.n	1e0b2 <system_apb_clock_set_mask+0x3a>
   1e092:	2b00      	cmp	r3, #0
   1e094:	d114      	bne.n	1e0c0 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   1e096:	4b0e      	ldr	r3, [pc, #56]	; (1e0d0 <system_apb_clock_set_mask+0x58>)
   1e098:	4a0d      	ldr	r2, [pc, #52]	; (1e0d0 <system_apb_clock_set_mask+0x58>)
   1e09a:	6991      	ldr	r1, [r2, #24]
   1e09c:	683a      	ldr	r2, [r7, #0]
   1e09e:	430a      	orrs	r2, r1
   1e0a0:	619a      	str	r2, [r3, #24]
			break;
   1e0a2:	e00f      	b.n	1e0c4 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   1e0a4:	4b0a      	ldr	r3, [pc, #40]	; (1e0d0 <system_apb_clock_set_mask+0x58>)
   1e0a6:	4a0a      	ldr	r2, [pc, #40]	; (1e0d0 <system_apb_clock_set_mask+0x58>)
   1e0a8:	69d1      	ldr	r1, [r2, #28]
   1e0aa:	683a      	ldr	r2, [r7, #0]
   1e0ac:	430a      	orrs	r2, r1
   1e0ae:	61da      	str	r2, [r3, #28]
			break;
   1e0b0:	e008      	b.n	1e0c4 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   1e0b2:	4b07      	ldr	r3, [pc, #28]	; (1e0d0 <system_apb_clock_set_mask+0x58>)
   1e0b4:	4a06      	ldr	r2, [pc, #24]	; (1e0d0 <system_apb_clock_set_mask+0x58>)
   1e0b6:	6a11      	ldr	r1, [r2, #32]
   1e0b8:	683a      	ldr	r2, [r7, #0]
   1e0ba:	430a      	orrs	r2, r1
   1e0bc:	621a      	str	r2, [r3, #32]
			break;
   1e0be:	e001      	b.n	1e0c4 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   1e0c0:	2317      	movs	r3, #23
   1e0c2:	e000      	b.n	1e0c6 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   1e0c4:	2300      	movs	r3, #0
}
   1e0c6:	0018      	movs	r0, r3
   1e0c8:	46bd      	mov	sp, r7
   1e0ca:	b002      	add	sp, #8
   1e0cc:	bd80      	pop	{r7, pc}
   1e0ce:	46c0      	nop			; (mov r8, r8)
   1e0d0:	40000400 	.word	0x40000400

0001e0d4 <system_pinmux_get_config_defaults>:
{
   1e0d4:	b580      	push	{r7, lr}
   1e0d6:	b082      	sub	sp, #8
   1e0d8:	af00      	add	r7, sp, #0
   1e0da:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   1e0dc:	687b      	ldr	r3, [r7, #4]
   1e0de:	2280      	movs	r2, #128	; 0x80
   1e0e0:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   1e0e2:	687b      	ldr	r3, [r7, #4]
   1e0e4:	2200      	movs	r2, #0
   1e0e6:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   1e0e8:	687b      	ldr	r3, [r7, #4]
   1e0ea:	2201      	movs	r2, #1
   1e0ec:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   1e0ee:	687b      	ldr	r3, [r7, #4]
   1e0f0:	2200      	movs	r2, #0
   1e0f2:	70da      	strb	r2, [r3, #3]
}
   1e0f4:	46c0      	nop			; (mov r8, r8)
   1e0f6:	46bd      	mov	sp, r7
   1e0f8:	b002      	add	sp, #8
   1e0fa:	bd80      	pop	{r7, pc}

0001e0fc <system_interrupt_enable>:
{
   1e0fc:	b580      	push	{r7, lr}
   1e0fe:	b082      	sub	sp, #8
   1e100:	af00      	add	r7, sp, #0
   1e102:	0002      	movs	r2, r0
   1e104:	1dfb      	adds	r3, r7, #7
   1e106:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   1e108:	4b06      	ldr	r3, [pc, #24]	; (1e124 <system_interrupt_enable+0x28>)
   1e10a:	1dfa      	adds	r2, r7, #7
   1e10c:	7812      	ldrb	r2, [r2, #0]
   1e10e:	0011      	movs	r1, r2
   1e110:	221f      	movs	r2, #31
   1e112:	400a      	ands	r2, r1
   1e114:	2101      	movs	r1, #1
   1e116:	4091      	lsls	r1, r2
   1e118:	000a      	movs	r2, r1
   1e11a:	601a      	str	r2, [r3, #0]
}
   1e11c:	46c0      	nop			; (mov r8, r8)
   1e11e:	46bd      	mov	sp, r7
   1e120:	b002      	add	sp, #8
   1e122:	bd80      	pop	{r7, pc}
   1e124:	e000e100 	.word	0xe000e100

0001e128 <_extint_get_eic_from_channel>:
{
   1e128:	b580      	push	{r7, lr}
   1e12a:	b084      	sub	sp, #16
   1e12c:	af00      	add	r7, sp, #0
   1e12e:	0002      	movs	r2, r0
   1e130:	1dfb      	adds	r3, r7, #7
   1e132:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
   1e134:	230f      	movs	r3, #15
   1e136:	18fb      	adds	r3, r7, r3
   1e138:	1dfa      	adds	r2, r7, #7
   1e13a:	7812      	ldrb	r2, [r2, #0]
   1e13c:	0952      	lsrs	r2, r2, #5
   1e13e:	701a      	strb	r2, [r3, #0]
	if (eic_index < EIC_INST_NUM) {
   1e140:	230f      	movs	r3, #15
   1e142:	18fb      	adds	r3, r7, r3
   1e144:	781b      	ldrb	r3, [r3, #0]
   1e146:	2b00      	cmp	r3, #0
   1e148:	d10c      	bne.n	1e164 <_extint_get_eic_from_channel+0x3c>
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   1e14a:	4b09      	ldr	r3, [pc, #36]	; (1e170 <_extint_get_eic_from_channel+0x48>)
   1e14c:	60bb      	str	r3, [r7, #8]
		return eics[eic_index];
   1e14e:	230f      	movs	r3, #15
   1e150:	18fb      	adds	r3, r7, r3
   1e152:	781b      	ldrb	r3, [r3, #0]
   1e154:	009b      	lsls	r3, r3, #2
   1e156:	2210      	movs	r2, #16
   1e158:	4694      	mov	ip, r2
   1e15a:	44bc      	add	ip, r7
   1e15c:	4463      	add	r3, ip
   1e15e:	3b08      	subs	r3, #8
   1e160:	681b      	ldr	r3, [r3, #0]
   1e162:	e000      	b.n	1e166 <_extint_get_eic_from_channel+0x3e>
		return NULL;
   1e164:	2300      	movs	r3, #0
}
   1e166:	0018      	movs	r0, r3
   1e168:	46bd      	mov	sp, r7
   1e16a:	b004      	add	sp, #16
   1e16c:	bd80      	pop	{r7, pc}
   1e16e:	46c0      	nop			; (mov r8, r8)
   1e170:	40001800 	.word	0x40001800

0001e174 <extint_is_syncing>:
 *
 * \retval true  If the module synchronization is ongoing
 * \retval false If the module has completed synchronization
 */
static inline bool extint_is_syncing(void)
{
   1e174:	b580      	push	{r7, lr}
   1e176:	b082      	sub	sp, #8
   1e178:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   1e17a:	4b0f      	ldr	r3, [pc, #60]	; (1e1b8 <extint_is_syncing+0x44>)
   1e17c:	603b      	str	r3, [r7, #0]

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   1e17e:	2300      	movs	r3, #0
   1e180:	607b      	str	r3, [r7, #4]
   1e182:	e011      	b.n	1e1a8 <extint_is_syncing+0x34>
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
   1e184:	687b      	ldr	r3, [r7, #4]
   1e186:	009b      	lsls	r3, r3, #2
   1e188:	2208      	movs	r2, #8
   1e18a:	4694      	mov	ip, r2
   1e18c:	44bc      	add	ip, r7
   1e18e:	4463      	add	r3, ip
   1e190:	3b08      	subs	r3, #8
   1e192:	681b      	ldr	r3, [r3, #0]
   1e194:	785b      	ldrb	r3, [r3, #1]
   1e196:	b2db      	uxtb	r3, r3
   1e198:	b25b      	sxtb	r3, r3
   1e19a:	2b00      	cmp	r3, #0
   1e19c:	da01      	bge.n	1e1a2 <extint_is_syncing+0x2e>
			return true;
   1e19e:	2301      	movs	r3, #1
   1e1a0:	e006      	b.n	1e1b0 <extint_is_syncing+0x3c>
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   1e1a2:	687b      	ldr	r3, [r7, #4]
   1e1a4:	3301      	adds	r3, #1
   1e1a6:	607b      	str	r3, [r7, #4]
   1e1a8:	687b      	ldr	r3, [r7, #4]
   1e1aa:	2b00      	cmp	r3, #0
   1e1ac:	d0ea      	beq.n	1e184 <extint_is_syncing+0x10>
		}
	}
	return false;
   1e1ae:	2300      	movs	r3, #0
}
   1e1b0:	0018      	movs	r0, r3
   1e1b2:	46bd      	mov	sp, r7
   1e1b4:	b002      	add	sp, #8
   1e1b6:	bd80      	pop	{r7, pc}
   1e1b8:	40001800 	.word	0x40001800

0001e1bc <_system_extint_init>:
 * \note When SYSTEM module is used, this function will be invoked by
 * \ref system_init() automatically if the module is included.
 */
void _system_extint_init(void);
void _system_extint_init(void)
{
   1e1bc:	b580      	push	{r7, lr}
   1e1be:	b084      	sub	sp, #16
   1e1c0:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   1e1c2:	4b2d      	ldr	r3, [pc, #180]	; (1e278 <_system_extint_init+0xbc>)
   1e1c4:	607b      	str	r3, [r7, #4]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_EIC);
   1e1c6:	2140      	movs	r1, #64	; 0x40
   1e1c8:	2000      	movs	r0, #0
   1e1ca:	4b2c      	ldr	r3, [pc, #176]	; (1e27c <_system_extint_init+0xc0>)
   1e1cc:	4798      	blx	r3

	/* Configure the generic clock for the module and enable it */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   1e1ce:	003b      	movs	r3, r7
   1e1d0:	0018      	movs	r0, r3
   1e1d2:	4b2b      	ldr	r3, [pc, #172]	; (1e280 <_system_extint_init+0xc4>)
   1e1d4:	4798      	blx	r3
	gclk_chan_conf.source_generator = EXTINT_CLOCK_SOURCE;
   1e1d6:	003b      	movs	r3, r7
   1e1d8:	2206      	movs	r2, #6
   1e1da:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
   1e1dc:	003b      	movs	r3, r7
   1e1de:	0019      	movs	r1, r3
   1e1e0:	2005      	movs	r0, #5
   1e1e2:	4b28      	ldr	r3, [pc, #160]	; (1e284 <_system_extint_init+0xc8>)
   1e1e4:	4798      	blx	r3

	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);
   1e1e6:	2005      	movs	r0, #5
   1e1e8:	4b27      	ldr	r3, [pc, #156]	; (1e288 <_system_extint_init+0xcc>)
   1e1ea:	4798      	blx	r3

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   1e1ec:	2300      	movs	r3, #0
   1e1ee:	60fb      	str	r3, [r7, #12]
   1e1f0:	e018      	b.n	1e224 <_system_extint_init+0x68>
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
   1e1f2:	68fb      	ldr	r3, [r7, #12]
   1e1f4:	009b      	lsls	r3, r3, #2
   1e1f6:	2210      	movs	r2, #16
   1e1f8:	4694      	mov	ip, r2
   1e1fa:	44bc      	add	ip, r7
   1e1fc:	4463      	add	r3, ip
   1e1fe:	3b0c      	subs	r3, #12
   1e200:	681a      	ldr	r2, [r3, #0]
   1e202:	68fb      	ldr	r3, [r7, #12]
   1e204:	009b      	lsls	r3, r3, #2
   1e206:	2110      	movs	r1, #16
   1e208:	468c      	mov	ip, r1
   1e20a:	44bc      	add	ip, r7
   1e20c:	4463      	add	r3, ip
   1e20e:	3b0c      	subs	r3, #12
   1e210:	681b      	ldr	r3, [r3, #0]
   1e212:	781b      	ldrb	r3, [r3, #0]
   1e214:	b2db      	uxtb	r3, r3
   1e216:	2101      	movs	r1, #1
   1e218:	430b      	orrs	r3, r1
   1e21a:	b2db      	uxtb	r3, r3
   1e21c:	7013      	strb	r3, [r2, #0]
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   1e21e:	68fb      	ldr	r3, [r7, #12]
   1e220:	3301      	adds	r3, #1
   1e222:	60fb      	str	r3, [r7, #12]
   1e224:	68fb      	ldr	r3, [r7, #12]
   1e226:	2b00      	cmp	r3, #0
   1e228:	d0e3      	beq.n	1e1f2 <_system_extint_init+0x36>
	}

	while (extint_is_syncing()) {
   1e22a:	46c0      	nop			; (mov r8, r8)
   1e22c:	4b17      	ldr	r3, [pc, #92]	; (1e28c <_system_extint_init+0xd0>)
   1e22e:	4798      	blx	r3
   1e230:	1e03      	subs	r3, r0, #0
   1e232:	d1fb      	bne.n	1e22c <_system_extint_init+0x70>
	}

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
   1e234:	230b      	movs	r3, #11
   1e236:	18fb      	adds	r3, r7, r3
   1e238:	2200      	movs	r2, #0
   1e23a:	701a      	strb	r2, [r3, #0]
   1e23c:	e00d      	b.n	1e25a <_system_extint_init+0x9e>
		_extint_dev.callbacks[j] = NULL;
   1e23e:	230b      	movs	r3, #11
   1e240:	18fb      	adds	r3, r7, r3
   1e242:	781a      	ldrb	r2, [r3, #0]
   1e244:	4b12      	ldr	r3, [pc, #72]	; (1e290 <_system_extint_init+0xd4>)
   1e246:	0092      	lsls	r2, r2, #2
   1e248:	2100      	movs	r1, #0
   1e24a:	50d1      	str	r1, [r2, r3]
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
   1e24c:	230b      	movs	r3, #11
   1e24e:	18fb      	adds	r3, r7, r3
   1e250:	781a      	ldrb	r2, [r3, #0]
   1e252:	230b      	movs	r3, #11
   1e254:	18fb      	adds	r3, r7, r3
   1e256:	3201      	adds	r2, #1
   1e258:	701a      	strb	r2, [r3, #0]
   1e25a:	230b      	movs	r3, #11
   1e25c:	18fb      	adds	r3, r7, r3
   1e25e:	781b      	ldrb	r3, [r3, #0]
   1e260:	2b0f      	cmp	r3, #15
   1e262:	d9ec      	bls.n	1e23e <_system_extint_init+0x82>
	}
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EIC);
   1e264:	2004      	movs	r0, #4
   1e266:	4b0b      	ldr	r3, [pc, #44]	; (1e294 <_system_extint_init+0xd8>)
   1e268:	4798      	blx	r3
#endif

	/* Enables the driver for further use */
	_extint_enable();
   1e26a:	4b0b      	ldr	r3, [pc, #44]	; (1e298 <_system_extint_init+0xdc>)
   1e26c:	4798      	blx	r3
}
   1e26e:	46c0      	nop			; (mov r8, r8)
   1e270:	46bd      	mov	sp, r7
   1e272:	b004      	add	sp, #16
   1e274:	bd80      	pop	{r7, pc}
   1e276:	46c0      	nop			; (mov r8, r8)
   1e278:	40001800 	.word	0x40001800
   1e27c:	0001e079 	.word	0x0001e079
   1e280:	0001e061 	.word	0x0001e061
   1e284:	00024715 	.word	0x00024715
   1e288:	00024759 	.word	0x00024759
   1e28c:	0001e175 	.word	0x0001e175
   1e290:	20000b00 	.word	0x20000b00
   1e294:	0001e0fd 	.word	0x0001e0fd
   1e298:	0001e29d 	.word	0x0001e29d

0001e29c <_extint_enable>:
 *
 * Enables EIC modules.
 * Registered callback list will not be affected if callback mode is used.
 */
void _extint_enable(void)
{
   1e29c:	b580      	push	{r7, lr}
   1e29e:	b082      	sub	sp, #8
   1e2a0:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   1e2a2:	4b15      	ldr	r3, [pc, #84]	; (1e2f8 <_extint_enable+0x5c>)
   1e2a4:	603b      	str	r3, [r7, #0]

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   1e2a6:	2300      	movs	r3, #0
   1e2a8:	607b      	str	r3, [r7, #4]
   1e2aa:	e018      	b.n	1e2de <_extint_enable+0x42>
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
   1e2ac:	687b      	ldr	r3, [r7, #4]
   1e2ae:	009b      	lsls	r3, r3, #2
   1e2b0:	2208      	movs	r2, #8
   1e2b2:	4694      	mov	ip, r2
   1e2b4:	44bc      	add	ip, r7
   1e2b6:	4463      	add	r3, ip
   1e2b8:	3b08      	subs	r3, #8
   1e2ba:	681a      	ldr	r2, [r3, #0]
   1e2bc:	687b      	ldr	r3, [r7, #4]
   1e2be:	009b      	lsls	r3, r3, #2
   1e2c0:	2108      	movs	r1, #8
   1e2c2:	468c      	mov	ip, r1
   1e2c4:	44bc      	add	ip, r7
   1e2c6:	4463      	add	r3, ip
   1e2c8:	3b08      	subs	r3, #8
   1e2ca:	681b      	ldr	r3, [r3, #0]
   1e2cc:	781b      	ldrb	r3, [r3, #0]
   1e2ce:	b2db      	uxtb	r3, r3
   1e2d0:	2102      	movs	r1, #2
   1e2d2:	430b      	orrs	r3, r1
   1e2d4:	b2db      	uxtb	r3, r3
   1e2d6:	7013      	strb	r3, [r2, #0]
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   1e2d8:	687b      	ldr	r3, [r7, #4]
   1e2da:	3301      	adds	r3, #1
   1e2dc:	607b      	str	r3, [r7, #4]
   1e2de:	687b      	ldr	r3, [r7, #4]
   1e2e0:	2b00      	cmp	r3, #0
   1e2e2:	d0e3      	beq.n	1e2ac <_extint_enable+0x10>
	}

	while (extint_is_syncing()) {
   1e2e4:	46c0      	nop			; (mov r8, r8)
   1e2e6:	4b05      	ldr	r3, [pc, #20]	; (1e2fc <_extint_enable+0x60>)
   1e2e8:	4798      	blx	r3
   1e2ea:	1e03      	subs	r3, r0, #0
   1e2ec:	d1fb      	bne.n	1e2e6 <_extint_enable+0x4a>
		/* Wait for all hardware modules to complete synchronization */
	}
}
   1e2ee:	46c0      	nop			; (mov r8, r8)
   1e2f0:	46bd      	mov	sp, r7
   1e2f2:	b002      	add	sp, #8
   1e2f4:	bd80      	pop	{r7, pc}
   1e2f6:	46c0      	nop			; (mov r8, r8)
   1e2f8:	40001800 	.word	0x40001800
   1e2fc:	0001e175 	.word	0x0001e175

0001e300 <extint_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
void extint_chan_get_config_defaults(
		struct extint_chan_conf *const config)
{
   1e300:	b580      	push	{r7, lr}
   1e302:	b082      	sub	sp, #8
   1e304:	af00      	add	r7, sp, #0
   1e306:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
   1e308:	687b      	ldr	r3, [r7, #4]
   1e30a:	2200      	movs	r2, #0
   1e30c:	601a      	str	r2, [r3, #0]
	config->gpio_pin_mux        = 0;
   1e30e:	687b      	ldr	r3, [r7, #4]
   1e310:	2200      	movs	r2, #0
   1e312:	605a      	str	r2, [r3, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
   1e314:	687b      	ldr	r3, [r7, #4]
   1e316:	2201      	movs	r2, #1
   1e318:	721a      	strb	r2, [r3, #8]
	config->wake_if_sleeping    = true;
   1e31a:	687b      	ldr	r3, [r7, #4]
   1e31c:	2201      	movs	r2, #1
   1e31e:	725a      	strb	r2, [r3, #9]
	config->filter_input_signal = false;
   1e320:	687b      	ldr	r3, [r7, #4]
   1e322:	2200      	movs	r2, #0
   1e324:	729a      	strb	r2, [r3, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
   1e326:	687b      	ldr	r3, [r7, #4]
   1e328:	2202      	movs	r2, #2
   1e32a:	72da      	strb	r2, [r3, #11]
}
   1e32c:	46c0      	nop			; (mov r8, r8)
   1e32e:	46bd      	mov	sp, r7
   1e330:	b002      	add	sp, #8
   1e332:	bd80      	pop	{r7, pc}

0001e334 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
   1e334:	b580      	push	{r7, lr}
   1e336:	b086      	sub	sp, #24
   1e338:	af00      	add	r7, sp, #0
   1e33a:	0002      	movs	r2, r0
   1e33c:	6039      	str	r1, [r7, #0]
   1e33e:	1dfb      	adds	r3, r7, #7
   1e340:	701a      	strb	r2, [r3, #0]
	Assert(!(!system_gclk_gen_is_enabled(EXTINT_CLOCK_SOURCE) &&
		_extint_is_gclk_required(config->filter_input_signal,
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
   1e342:	2308      	movs	r3, #8
   1e344:	18fb      	adds	r3, r7, r3
   1e346:	0018      	movs	r0, r3
   1e348:	4b36      	ldr	r3, [pc, #216]	; (1e424 <extint_chan_set_config+0xf0>)
   1e34a:	4798      	blx	r3

	pinmux_config.mux_position = config->gpio_pin_mux;
   1e34c:	683b      	ldr	r3, [r7, #0]
   1e34e:	685b      	ldr	r3, [r3, #4]
   1e350:	b2da      	uxtb	r2, r3
   1e352:	2308      	movs	r3, #8
   1e354:	18fb      	adds	r3, r7, r3
   1e356:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   1e358:	2308      	movs	r3, #8
   1e35a:	18fb      	adds	r3, r7, r3
   1e35c:	2200      	movs	r2, #0
   1e35e:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
   1e360:	683b      	ldr	r3, [r7, #0]
   1e362:	7a1a      	ldrb	r2, [r3, #8]
   1e364:	2308      	movs	r3, #8
   1e366:	18fb      	adds	r3, r7, r3
   1e368:	709a      	strb	r2, [r3, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
   1e36a:	683b      	ldr	r3, [r7, #0]
   1e36c:	681b      	ldr	r3, [r3, #0]
   1e36e:	b2db      	uxtb	r3, r3
   1e370:	2208      	movs	r2, #8
   1e372:	18ba      	adds	r2, r7, r2
   1e374:	0011      	movs	r1, r2
   1e376:	0018      	movs	r0, r3
   1e378:	4b2b      	ldr	r3, [pc, #172]	; (1e428 <extint_chan_set_config+0xf4>)
   1e37a:	4798      	blx	r3

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);
   1e37c:	1dfb      	adds	r3, r7, #7
   1e37e:	781b      	ldrb	r3, [r3, #0]
   1e380:	0018      	movs	r0, r3
   1e382:	4b2a      	ldr	r3, [pc, #168]	; (1e42c <extint_chan_set_config+0xf8>)
   1e384:	4798      	blx	r3
   1e386:	0003      	movs	r3, r0
   1e388:	613b      	str	r3, [r7, #16]

	uint32_t config_pos = (4 * (channel % 8));
   1e38a:	1dfb      	adds	r3, r7, #7
   1e38c:	781b      	ldrb	r3, [r3, #0]
   1e38e:	2207      	movs	r2, #7
   1e390:	4013      	ands	r3, r2
   1e392:	009b      	lsls	r3, r3, #2
   1e394:	60fb      	str	r3, [r7, #12]
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
   1e396:	683b      	ldr	r3, [r7, #0]
   1e398:	7adb      	ldrb	r3, [r3, #11]
   1e39a:	617b      	str	r3, [r7, #20]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
   1e39c:	683b      	ldr	r3, [r7, #0]
   1e39e:	7a9b      	ldrb	r3, [r3, #10]
   1e3a0:	2b00      	cmp	r3, #0
   1e3a2:	d003      	beq.n	1e3ac <extint_chan_set_config+0x78>
		new_config |= EIC_CONFIG_FILTEN0;
   1e3a4:	697b      	ldr	r3, [r7, #20]
   1e3a6:	2208      	movs	r2, #8
   1e3a8:	4313      	orrs	r3, r2
   1e3aa:	617b      	str	r3, [r7, #20]
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
   1e3ac:	1dfb      	adds	r3, r7, #7
   1e3ae:	781b      	ldrb	r3, [r3, #0]
   1e3b0:	08db      	lsrs	r3, r3, #3
   1e3b2:	b2db      	uxtb	r3, r3
   1e3b4:	0018      	movs	r0, r3
		= (EIC_module->CONFIG[channel / 8].reg &
   1e3b6:	1dfb      	adds	r3, r7, #7
   1e3b8:	781b      	ldrb	r3, [r3, #0]
   1e3ba:	08db      	lsrs	r3, r3, #3
   1e3bc:	b2db      	uxtb	r3, r3
   1e3be:	001a      	movs	r2, r3
   1e3c0:	693b      	ldr	r3, [r7, #16]
   1e3c2:	3206      	adds	r2, #6
   1e3c4:	0092      	lsls	r2, r2, #2
   1e3c6:	58d3      	ldr	r3, [r2, r3]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
   1e3c8:	210f      	movs	r1, #15
   1e3ca:	68fa      	ldr	r2, [r7, #12]
   1e3cc:	4091      	lsls	r1, r2
   1e3ce:	000a      	movs	r2, r1
   1e3d0:	43d2      	mvns	r2, r2
		= (EIC_module->CONFIG[channel / 8].reg &
   1e3d2:	401a      	ands	r2, r3
			(new_config << config_pos);
   1e3d4:	6979      	ldr	r1, [r7, #20]
   1e3d6:	68fb      	ldr	r3, [r7, #12]
   1e3d8:	4099      	lsls	r1, r3
   1e3da:	000b      	movs	r3, r1
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
   1e3dc:	431a      	orrs	r2, r3
   1e3de:	0011      	movs	r1, r2
		= (EIC_module->CONFIG[channel / 8].reg &
   1e3e0:	693b      	ldr	r3, [r7, #16]
   1e3e2:	1d82      	adds	r2, r0, #6
   1e3e4:	0092      	lsls	r2, r2, #2
   1e3e6:	50d1      	str	r1, [r2, r3]

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
   1e3e8:	683b      	ldr	r3, [r7, #0]
   1e3ea:	7a5b      	ldrb	r3, [r3, #9]
   1e3ec:	2b00      	cmp	r3, #0
   1e3ee:	d00a      	beq.n	1e406 <extint_chan_set_config+0xd2>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
   1e3f0:	693b      	ldr	r3, [r7, #16]
   1e3f2:	695a      	ldr	r2, [r3, #20]
   1e3f4:	1dfb      	adds	r3, r7, #7
   1e3f6:	781b      	ldrb	r3, [r3, #0]
   1e3f8:	2101      	movs	r1, #1
   1e3fa:	4099      	lsls	r1, r3
   1e3fc:	000b      	movs	r3, r1
   1e3fe:	431a      	orrs	r2, r3
   1e400:	693b      	ldr	r3, [r7, #16]
   1e402:	615a      	str	r2, [r3, #20]
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
	}
}
   1e404:	e00a      	b.n	1e41c <extint_chan_set_config+0xe8>
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
   1e406:	693b      	ldr	r3, [r7, #16]
   1e408:	695b      	ldr	r3, [r3, #20]
   1e40a:	1dfa      	adds	r2, r7, #7
   1e40c:	7812      	ldrb	r2, [r2, #0]
   1e40e:	2101      	movs	r1, #1
   1e410:	4091      	lsls	r1, r2
   1e412:	000a      	movs	r2, r1
   1e414:	43d2      	mvns	r2, r2
   1e416:	401a      	ands	r2, r3
   1e418:	693b      	ldr	r3, [r7, #16]
   1e41a:	615a      	str	r2, [r3, #20]
}
   1e41c:	46c0      	nop			; (mov r8, r8)
   1e41e:	46bd      	mov	sp, r7
   1e420:	b006      	add	sp, #24
   1e422:	bd80      	pop	{r7, pc}
   1e424:	0001e0d5 	.word	0x0001e0d5
   1e428:	00024a01 	.word	0x00024a01
   1e42c:	0001e129 	.word	0x0001e129

0001e430 <_rtc_interrupt_handler>:
 * \internal Interrupt handler for RTC
 *
 * \param [in] instance_index  Default value 0
 */
static void _rtc_interrupt_handler(const uint32_t instance_index)
{
   1e430:	b580      	push	{r7, lr}
   1e432:	b086      	sub	sp, #24
   1e434:	af00      	add	r7, sp, #0
   1e436:	6078      	str	r0, [r7, #4]
	struct rtc_module *module = _rtc_instance[instance_index];
   1e438:	4b31      	ldr	r3, [pc, #196]	; (1e500 <_rtc_interrupt_handler+0xd0>)
   1e43a:	687a      	ldr	r2, [r7, #4]
   1e43c:	0092      	lsls	r2, r2, #2
   1e43e:	58d3      	ldr	r3, [r2, r3]
   1e440:	617b      	str	r3, [r7, #20]

	Rtc *const rtc_module = module->hw;
   1e442:	697b      	ldr	r3, [r7, #20]
   1e444:	681b      	ldr	r3, [r3, #0]
   1e446:	613b      	str	r3, [r7, #16]

	/* Combine callback registered and enabled masks */
	uint16_t callback_mask = module->enabled_callback;
   1e448:	230e      	movs	r3, #14
   1e44a:	18fb      	adds	r3, r7, r3
   1e44c:	697a      	ldr	r2, [r7, #20]
   1e44e:	8ad2      	ldrh	r2, [r2, #22]
   1e450:	801a      	strh	r2, [r3, #0]
	callback_mask &= module->registered_callback;
   1e452:	697b      	ldr	r3, [r7, #20]
   1e454:	8a9b      	ldrh	r3, [r3, #20]
   1e456:	b29a      	uxth	r2, r3
   1e458:	230e      	movs	r3, #14
   1e45a:	18fb      	adds	r3, r7, r3
   1e45c:	210e      	movs	r1, #14
   1e45e:	1879      	adds	r1, r7, r1
   1e460:	8809      	ldrh	r1, [r1, #0]
   1e462:	400a      	ands	r2, r1
   1e464:	801a      	strh	r2, [r3, #0]

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = rtc_module->MODE0.INTFLAG.reg;
   1e466:	693b      	ldr	r3, [r7, #16]
   1e468:	7a1b      	ldrb	r3, [r3, #8]
   1e46a:	b2da      	uxtb	r2, r3
   1e46c:	230c      	movs	r3, #12
   1e46e:	18fb      	adds	r3, r7, r3
   1e470:	801a      	strh	r2, [r3, #0]
	interrupt_status &= rtc_module->MODE0.INTENSET.reg;
   1e472:	693b      	ldr	r3, [r7, #16]
   1e474:	79db      	ldrb	r3, [r3, #7]
   1e476:	b2db      	uxtb	r3, r3
   1e478:	b29a      	uxth	r2, r3
   1e47a:	230c      	movs	r3, #12
   1e47c:	18fb      	adds	r3, r7, r3
   1e47e:	210c      	movs	r1, #12
   1e480:	1879      	adds	r1, r7, r1
   1e482:	8809      	ldrh	r1, [r1, #0]
   1e484:	400a      	ands	r2, r1
   1e486:	801a      	strh	r2, [r3, #0]

	if (interrupt_status & RTC_MODE0_INTFLAG_OVF) {
   1e488:	230c      	movs	r3, #12
   1e48a:	18fb      	adds	r3, r7, r3
   1e48c:	881b      	ldrh	r3, [r3, #0]
   1e48e:	2280      	movs	r2, #128	; 0x80
   1e490:	4013      	ands	r3, r2
   1e492:	d00c      	beq.n	1e4ae <_rtc_interrupt_handler+0x7e>
		/* Overflow interrupt */
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_OVERFLOW)) {
   1e494:	230e      	movs	r3, #14
   1e496:	18fb      	adds	r3, r7, r3
   1e498:	881b      	ldrh	r3, [r3, #0]
   1e49a:	2204      	movs	r2, #4
   1e49c:	4013      	ands	r3, r2
   1e49e:	d002      	beq.n	1e4a6 <_rtc_interrupt_handler+0x76>
			module->callbacks[RTC_COUNT_CALLBACK_OVERFLOW]();
   1e4a0:	697b      	ldr	r3, [r7, #20]
   1e4a2:	691b      	ldr	r3, [r3, #16]
   1e4a4:	4798      	blx	r3
		}

		/* Clear interrupt flag */
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_OVF;
   1e4a6:	693b      	ldr	r3, [r7, #16]
   1e4a8:	2280      	movs	r2, #128	; 0x80
   1e4aa:	721a      	strb	r2, [r3, #8]
		}
		/* Clear interrupt flag */
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_CMP(1 << 5);
		#endif
	}
}
   1e4ac:	e024      	b.n	1e4f8 <_rtc_interrupt_handler+0xc8>
	} else if (interrupt_status & RTC_MODE1_INTFLAG_CMP(1 << 0)) {
   1e4ae:	230c      	movs	r3, #12
   1e4b0:	18fb      	adds	r3, r7, r3
   1e4b2:	881b      	ldrh	r3, [r3, #0]
   1e4b4:	2201      	movs	r2, #1
   1e4b6:	4013      	ands	r3, r2
   1e4b8:	d00c      	beq.n	1e4d4 <_rtc_interrupt_handler+0xa4>
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_COMPARE_0)) {
   1e4ba:	230e      	movs	r3, #14
   1e4bc:	18fb      	adds	r3, r7, r3
   1e4be:	881b      	ldrh	r3, [r3, #0]
   1e4c0:	2201      	movs	r2, #1
   1e4c2:	4013      	ands	r3, r2
   1e4c4:	d002      	beq.n	1e4cc <_rtc_interrupt_handler+0x9c>
			module->callbacks[RTC_COUNT_CALLBACK_COMPARE_0]();
   1e4c6:	697b      	ldr	r3, [r7, #20]
   1e4c8:	689b      	ldr	r3, [r3, #8]
   1e4ca:	4798      	blx	r3
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_CMP(1 << 0);
   1e4cc:	693b      	ldr	r3, [r7, #16]
   1e4ce:	2201      	movs	r2, #1
   1e4d0:	721a      	strb	r2, [r3, #8]
}
   1e4d2:	e011      	b.n	1e4f8 <_rtc_interrupt_handler+0xc8>
	} else if (interrupt_status & RTC_MODE1_INTFLAG_CMP(1 << 1)) {
   1e4d4:	230c      	movs	r3, #12
   1e4d6:	18fb      	adds	r3, r7, r3
   1e4d8:	881b      	ldrh	r3, [r3, #0]
   1e4da:	2202      	movs	r2, #2
   1e4dc:	4013      	ands	r3, r2
   1e4de:	d00b      	beq.n	1e4f8 <_rtc_interrupt_handler+0xc8>
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_COMPARE_1)) {
   1e4e0:	230e      	movs	r3, #14
   1e4e2:	18fb      	adds	r3, r7, r3
   1e4e4:	881b      	ldrh	r3, [r3, #0]
   1e4e6:	2202      	movs	r2, #2
   1e4e8:	4013      	ands	r3, r2
   1e4ea:	d002      	beq.n	1e4f2 <_rtc_interrupt_handler+0xc2>
			module->callbacks[RTC_COUNT_CALLBACK_COMPARE_1]();
   1e4ec:	697b      	ldr	r3, [r7, #20]
   1e4ee:	68db      	ldr	r3, [r3, #12]
   1e4f0:	4798      	blx	r3
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_CMP(1 << 1);
   1e4f2:	693b      	ldr	r3, [r7, #16]
   1e4f4:	2202      	movs	r2, #2
   1e4f6:	721a      	strb	r2, [r3, #8]
}
   1e4f8:	46c0      	nop			; (mov r8, r8)
   1e4fa:	46bd      	mov	sp, r7
   1e4fc:	b006      	add	sp, #24
   1e4fe:	bd80      	pop	{r7, pc}
   1e500:	20000b40 	.word	0x20000b40

0001e504 <RTC_Handler>:
/**
 * \internal ISR handler for RTC
 */
#if (RTC_INST_NUM == 1)
void RTC_Handler(void)
{
   1e504:	b580      	push	{r7, lr}
   1e506:	af00      	add	r7, sp, #0
	_rtc_interrupt_handler(0);
   1e508:	2000      	movs	r0, #0
   1e50a:	4b02      	ldr	r3, [pc, #8]	; (1e514 <RTC_Handler+0x10>)
   1e50c:	4798      	blx	r3
}
   1e50e:	46c0      	nop			; (mov r8, r8)
   1e510:	46bd      	mov	sp, r7
   1e512:	bd80      	pop	{r7, pc}
   1e514:	0001e431 	.word	0x0001e431

0001e518 <system_gclk_chan_get_config_defaults>:
{
   1e518:	b580      	push	{r7, lr}
   1e51a:	b082      	sub	sp, #8
   1e51c:	af00      	add	r7, sp, #0
   1e51e:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   1e520:	687b      	ldr	r3, [r7, #4]
   1e522:	2200      	movs	r2, #0
   1e524:	701a      	strb	r2, [r3, #0]
}
   1e526:	46c0      	nop			; (mov r8, r8)
   1e528:	46bd      	mov	sp, r7
   1e52a:	b002      	add	sp, #8
   1e52c:	bd80      	pop	{r7, pc}

0001e52e <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
   1e52e:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e530:	b08d      	sub	sp, #52	; 0x34
   1e532:	af00      	add	r7, sp, #0
   1e534:	60b8      	str	r0, [r7, #8]
   1e536:	60f9      	str	r1, [r7, #12]
   1e538:	603a      	str	r2, [r7, #0]
   1e53a:	607b      	str	r3, [r7, #4]
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
   1e53c:	2300      	movs	r3, #0
   1e53e:	2400      	movs	r4, #0
   1e540:	623b      	str	r3, [r7, #32]
   1e542:	627c      	str	r4, [r7, #36]	; 0x24
   1e544:	2300      	movs	r3, #0
   1e546:	2400      	movs	r4, #0
   1e548:	61bb      	str	r3, [r7, #24]
   1e54a:	61fc      	str	r4, [r7, #28]
	for (i = 63; i >= 0; i--) {
   1e54c:	233f      	movs	r3, #63	; 0x3f
   1e54e:	62fb      	str	r3, [r7, #44]	; 0x2c
   1e550:	e053      	b.n	1e5fa <long_division+0xcc>
		bit_shift = (uint64_t)1 << i;
   1e552:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1e554:	3b20      	subs	r3, #32
   1e556:	2b00      	cmp	r3, #0
   1e558:	db04      	blt.n	1e564 <long_division+0x36>
   1e55a:	2201      	movs	r2, #1
   1e55c:	409a      	lsls	r2, r3
   1e55e:	0013      	movs	r3, r2
   1e560:	617b      	str	r3, [r7, #20]
   1e562:	e00b      	b.n	1e57c <long_division+0x4e>
   1e564:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1e566:	2220      	movs	r2, #32
   1e568:	1ad3      	subs	r3, r2, r3
   1e56a:	2201      	movs	r2, #1
   1e56c:	40da      	lsrs	r2, r3
   1e56e:	0013      	movs	r3, r2
   1e570:	2100      	movs	r1, #0
   1e572:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   1e574:	4091      	lsls	r1, r2
   1e576:	000a      	movs	r2, r1
   1e578:	4313      	orrs	r3, r2
   1e57a:	617b      	str	r3, [r7, #20]
   1e57c:	2201      	movs	r2, #1
   1e57e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1e580:	409a      	lsls	r2, r3
   1e582:	0013      	movs	r3, r2
   1e584:	613b      	str	r3, [r7, #16]

		r = r << 1;
   1e586:	69bb      	ldr	r3, [r7, #24]
   1e588:	69fc      	ldr	r4, [r7, #28]
   1e58a:	18db      	adds	r3, r3, r3
   1e58c:	4164      	adcs	r4, r4
   1e58e:	61bb      	str	r3, [r7, #24]
   1e590:	61fc      	str	r4, [r7, #28]

		if (n & bit_shift) {
   1e592:	68bb      	ldr	r3, [r7, #8]
   1e594:	693a      	ldr	r2, [r7, #16]
   1e596:	401a      	ands	r2, r3
   1e598:	0015      	movs	r5, r2
   1e59a:	68fb      	ldr	r3, [r7, #12]
   1e59c:	697a      	ldr	r2, [r7, #20]
   1e59e:	401a      	ands	r2, r3
   1e5a0:	0016      	movs	r6, r2
   1e5a2:	002b      	movs	r3, r5
   1e5a4:	4333      	orrs	r3, r6
   1e5a6:	d007      	beq.n	1e5b8 <long_division+0x8a>
			r |= 0x01;
   1e5a8:	69bb      	ldr	r3, [r7, #24]
   1e5aa:	2201      	movs	r2, #1
   1e5ac:	4313      	orrs	r3, r2
   1e5ae:	61bb      	str	r3, [r7, #24]
   1e5b0:	69fb      	ldr	r3, [r7, #28]
   1e5b2:	2200      	movs	r2, #0
   1e5b4:	4313      	orrs	r3, r2
   1e5b6:	61fb      	str	r3, [r7, #28]
		}

		if (r >= d) {
   1e5b8:	687a      	ldr	r2, [r7, #4]
   1e5ba:	69fb      	ldr	r3, [r7, #28]
   1e5bc:	429a      	cmp	r2, r3
   1e5be:	d819      	bhi.n	1e5f4 <long_division+0xc6>
   1e5c0:	687a      	ldr	r2, [r7, #4]
   1e5c2:	69fb      	ldr	r3, [r7, #28]
   1e5c4:	429a      	cmp	r2, r3
   1e5c6:	d103      	bne.n	1e5d0 <long_division+0xa2>
   1e5c8:	683a      	ldr	r2, [r7, #0]
   1e5ca:	69bb      	ldr	r3, [r7, #24]
   1e5cc:	429a      	cmp	r2, r3
   1e5ce:	d811      	bhi.n	1e5f4 <long_division+0xc6>
			r = r - d;
   1e5d0:	69b9      	ldr	r1, [r7, #24]
   1e5d2:	69fa      	ldr	r2, [r7, #28]
   1e5d4:	683b      	ldr	r3, [r7, #0]
   1e5d6:	687c      	ldr	r4, [r7, #4]
   1e5d8:	1ac9      	subs	r1, r1, r3
   1e5da:	41a2      	sbcs	r2, r4
   1e5dc:	000b      	movs	r3, r1
   1e5de:	0014      	movs	r4, r2
   1e5e0:	61bb      	str	r3, [r7, #24]
   1e5e2:	61fc      	str	r4, [r7, #28]
			q |= bit_shift;
   1e5e4:	6a3a      	ldr	r2, [r7, #32]
   1e5e6:	693b      	ldr	r3, [r7, #16]
   1e5e8:	4313      	orrs	r3, r2
   1e5ea:	623b      	str	r3, [r7, #32]
   1e5ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1e5ee:	697b      	ldr	r3, [r7, #20]
   1e5f0:	4313      	orrs	r3, r2
   1e5f2:	627b      	str	r3, [r7, #36]	; 0x24
	for (i = 63; i >= 0; i--) {
   1e5f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1e5f6:	3b01      	subs	r3, #1
   1e5f8:	62fb      	str	r3, [r7, #44]	; 0x2c
   1e5fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1e5fc:	2b00      	cmp	r3, #0
   1e5fe:	daa8      	bge.n	1e552 <long_division+0x24>
		}
	}

	return q;
   1e600:	6a3b      	ldr	r3, [r7, #32]
   1e602:	6a7c      	ldr	r4, [r7, #36]	; 0x24
}
   1e604:	0018      	movs	r0, r3
   1e606:	0021      	movs	r1, r4
   1e608:	46bd      	mov	sp, r7
   1e60a:	b00d      	add	sp, #52	; 0x34
   1e60c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001e60e <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
   1e60e:	b580      	push	{r7, lr}
   1e610:	b086      	sub	sp, #24
   1e612:	af00      	add	r7, sp, #0
   1e614:	60f8      	str	r0, [r7, #12]
   1e616:	60b9      	str	r1, [r7, #8]
   1e618:	607a      	str	r2, [r7, #4]
	/* Baud value variable */
	uint16_t baud_calculated = 0;
   1e61a:	2316      	movs	r3, #22
   1e61c:	18fb      	adds	r3, r7, r3
   1e61e:	2200      	movs	r2, #0
   1e620:	801a      	strh	r2, [r3, #0]
	uint32_t clock_value = external_clock;
   1e622:	68bb      	ldr	r3, [r7, #8]
   1e624:	613b      	str	r3, [r7, #16]


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
   1e626:	68bb      	ldr	r3, [r7, #8]
   1e628:	085a      	lsrs	r2, r3, #1
   1e62a:	68fb      	ldr	r3, [r7, #12]
   1e62c:	429a      	cmp	r2, r3
   1e62e:	d201      	bcs.n	1e634 <_sercom_get_sync_baud_val+0x26>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   1e630:	2340      	movs	r3, #64	; 0x40
   1e632:	e026      	b.n	1e682 <_sercom_get_sync_baud_val+0x74>
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
   1e634:	68bb      	ldr	r3, [r7, #8]
   1e636:	085b      	lsrs	r3, r3, #1
   1e638:	613b      	str	r3, [r7, #16]
	while (clock_value >= baudrate) {
   1e63a:	e00a      	b.n	1e652 <_sercom_get_sync_baud_val+0x44>
		clock_value = clock_value - baudrate;
   1e63c:	693a      	ldr	r2, [r7, #16]
   1e63e:	68fb      	ldr	r3, [r7, #12]
   1e640:	1ad3      	subs	r3, r2, r3
   1e642:	613b      	str	r3, [r7, #16]
		baud_calculated++;
   1e644:	2316      	movs	r3, #22
   1e646:	18fb      	adds	r3, r7, r3
   1e648:	881a      	ldrh	r2, [r3, #0]
   1e64a:	2316      	movs	r3, #22
   1e64c:	18fb      	adds	r3, r7, r3
   1e64e:	3201      	adds	r2, #1
   1e650:	801a      	strh	r2, [r3, #0]
	while (clock_value >= baudrate) {
   1e652:	693a      	ldr	r2, [r7, #16]
   1e654:	68fb      	ldr	r3, [r7, #12]
   1e656:	429a      	cmp	r2, r3
   1e658:	d2f0      	bcs.n	1e63c <_sercom_get_sync_baud_val+0x2e>
	}
	baud_calculated = baud_calculated - 1;
   1e65a:	2316      	movs	r3, #22
   1e65c:	18fb      	adds	r3, r7, r3
   1e65e:	2216      	movs	r2, #22
   1e660:	18ba      	adds	r2, r7, r2
   1e662:	8812      	ldrh	r2, [r2, #0]
   1e664:	3a01      	subs	r2, #1
   1e666:	801a      	strh	r2, [r3, #0]

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
   1e668:	2316      	movs	r3, #22
   1e66a:	18fb      	adds	r3, r7, r3
   1e66c:	881b      	ldrh	r3, [r3, #0]
   1e66e:	2bff      	cmp	r3, #255	; 0xff
   1e670:	d901      	bls.n	1e676 <_sercom_get_sync_baud_val+0x68>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   1e672:	2340      	movs	r3, #64	; 0x40
   1e674:	e005      	b.n	1e682 <_sercom_get_sync_baud_val+0x74>
	} else {
		*baudvalue = baud_calculated;
   1e676:	687b      	ldr	r3, [r7, #4]
   1e678:	2216      	movs	r2, #22
   1e67a:	18ba      	adds	r2, r7, r2
   1e67c:	8812      	ldrh	r2, [r2, #0]
   1e67e:	801a      	strh	r2, [r3, #0]
		return STATUS_OK;
   1e680:	2300      	movs	r3, #0
	}
}
   1e682:	0018      	movs	r0, r3
   1e684:	46bd      	mov	sp, r7
   1e686:	b006      	add	sp, #24
   1e688:	bd80      	pop	{r7, pc}
	...

0001e68c <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
   1e68c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e68e:	b0a1      	sub	sp, #132	; 0x84
   1e690:	af00      	add	r7, sp, #0
   1e692:	64f8      	str	r0, [r7, #76]	; 0x4c
   1e694:	64b9      	str	r1, [r7, #72]	; 0x48
   1e696:	647a      	str	r2, [r7, #68]	; 0x44
   1e698:	2243      	movs	r2, #67	; 0x43
   1e69a:	18ba      	adds	r2, r7, r2
   1e69c:	7013      	strb	r3, [r2, #0]
	/* Temporary variables  */
	uint64_t ratio = 0;
   1e69e:	2300      	movs	r3, #0
   1e6a0:	2400      	movs	r4, #0
   1e6a2:	673b      	str	r3, [r7, #112]	; 0x70
   1e6a4:	677c      	str	r4, [r7, #116]	; 0x74
	uint64_t scale = 0;
   1e6a6:	2300      	movs	r3, #0
   1e6a8:	2400      	movs	r4, #0
   1e6aa:	66bb      	str	r3, [r7, #104]	; 0x68
   1e6ac:	66fc      	str	r4, [r7, #108]	; 0x6c
	uint64_t baud_calculated = 0;
   1e6ae:	2300      	movs	r3, #0
   1e6b0:	2400      	movs	r4, #0
   1e6b2:	67bb      	str	r3, [r7, #120]	; 0x78
   1e6b4:	67fc      	str	r4, [r7, #124]	; 0x7c
	uint8_t baud_fp;
	uint32_t baud_int = 0;
   1e6b6:	2300      	movs	r3, #0
   1e6b8:	667b      	str	r3, [r7, #100]	; 0x64
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
   1e6ba:	2358      	movs	r3, #88	; 0x58
   1e6bc:	2240      	movs	r2, #64	; 0x40
   1e6be:	4694      	mov	ip, r2
   1e6c0:	44bc      	add	ip, r7
   1e6c2:	4463      	add	r3, ip
   1e6c4:	781a      	ldrb	r2, [r3, #0]
   1e6c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1e6c8:	435a      	muls	r2, r3
   1e6ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1e6cc:	429a      	cmp	r2, r3
   1e6ce:	d901      	bls.n	1e6d4 <_sercom_get_async_baud_val+0x48>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   1e6d0:	2340      	movs	r3, #64	; 0x40
   1e6d2:	e0b3      	b.n	1e83c <_sercom_get_async_baud_val+0x1b0>
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
   1e6d4:	2343      	movs	r3, #67	; 0x43
   1e6d6:	18fb      	adds	r3, r7, r3
   1e6d8:	781b      	ldrb	r3, [r3, #0]
   1e6da:	2b00      	cmp	r3, #0
   1e6dc:	d13d      	bne.n	1e75a <_sercom_get_async_baud_val+0xce>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
   1e6de:	2358      	movs	r3, #88	; 0x58
   1e6e0:	2240      	movs	r2, #64	; 0x40
   1e6e2:	4694      	mov	ip, r2
   1e6e4:	44bc      	add	ip, r7
   1e6e6:	4463      	add	r3, ip
   1e6e8:	781b      	ldrb	r3, [r3, #0]
   1e6ea:	b2db      	uxtb	r3, r3
   1e6ec:	613b      	str	r3, [r7, #16]
   1e6ee:	2300      	movs	r3, #0
   1e6f0:	617b      	str	r3, [r7, #20]
   1e6f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1e6f4:	60bb      	str	r3, [r7, #8]
   1e6f6:	2300      	movs	r3, #0
   1e6f8:	60fb      	str	r3, [r7, #12]
   1e6fa:	4c52      	ldr	r4, [pc, #328]	; (1e844 <_sercom_get_async_baud_val+0x1b8>)
   1e6fc:	68ba      	ldr	r2, [r7, #8]
   1e6fe:	68fb      	ldr	r3, [r7, #12]
   1e700:	6938      	ldr	r0, [r7, #16]
   1e702:	6979      	ldr	r1, [r7, #20]
   1e704:	47a0      	blx	r4
   1e706:	0003      	movs	r3, r0
   1e708:	000c      	movs	r4, r1
   1e70a:	001b      	movs	r3, r3
   1e70c:	65fb      	str	r3, [r7, #92]	; 0x5c
   1e70e:	2300      	movs	r3, #0
   1e710:	65bb      	str	r3, [r7, #88]	; 0x58
		ratio = long_division(temp1, peripheral_clock);
   1e712:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1e714:	603b      	str	r3, [r7, #0]
   1e716:	2300      	movs	r3, #0
   1e718:	607b      	str	r3, [r7, #4]
   1e71a:	6db8      	ldr	r0, [r7, #88]	; 0x58
   1e71c:	6df9      	ldr	r1, [r7, #92]	; 0x5c
   1e71e:	683a      	ldr	r2, [r7, #0]
   1e720:	687b      	ldr	r3, [r7, #4]
   1e722:	4c49      	ldr	r4, [pc, #292]	; (1e848 <_sercom_get_async_baud_val+0x1bc>)
   1e724:	47a0      	blx	r4
   1e726:	0003      	movs	r3, r0
   1e728:	000c      	movs	r4, r1
   1e72a:	673b      	str	r3, [r7, #112]	; 0x70
   1e72c:	677c      	str	r4, [r7, #116]	; 0x74
		scale = ((uint64_t)1 << SHIFT) - ratio;
   1e72e:	2100      	movs	r1, #0
   1e730:	2201      	movs	r2, #1
   1e732:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   1e734:	6f7c      	ldr	r4, [r7, #116]	; 0x74
   1e736:	1ac9      	subs	r1, r1, r3
   1e738:	41a2      	sbcs	r2, r4
   1e73a:	000b      	movs	r3, r1
   1e73c:	0014      	movs	r4, r2
   1e73e:	66bb      	str	r3, [r7, #104]	; 0x68
   1e740:	66fc      	str	r4, [r7, #108]	; 0x6c
		baud_calculated = (65536 * scale) >> SHIFT;
   1e742:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   1e744:	0c1b      	lsrs	r3, r3, #16
   1e746:	6efa      	ldr	r2, [r7, #108]	; 0x6c
   1e748:	0416      	lsls	r6, r2, #16
   1e74a:	431e      	orrs	r6, r3
   1e74c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   1e74e:	041d      	lsls	r5, r3, #16
   1e750:	0033      	movs	r3, r6
   1e752:	67bb      	str	r3, [r7, #120]	; 0x78
   1e754:	2300      	movs	r3, #0
   1e756:	67fb      	str	r3, [r7, #124]	; 0x7c
   1e758:	e06a      	b.n	1e830 <_sercom_get_async_baud_val+0x1a4>
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
   1e75a:	2343      	movs	r3, #67	; 0x43
   1e75c:	18fb      	adds	r3, r7, r3
   1e75e:	781b      	ldrb	r3, [r3, #0]
   1e760:	2b01      	cmp	r3, #1
   1e762:	d165      	bne.n	1e830 <_sercom_get_async_baud_val+0x1a4>
		temp1 = ((uint64_t)baudrate * sample_num);
   1e764:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1e766:	633b      	str	r3, [r7, #48]	; 0x30
   1e768:	2300      	movs	r3, #0
   1e76a:	637b      	str	r3, [r7, #52]	; 0x34
   1e76c:	2358      	movs	r3, #88	; 0x58
   1e76e:	2240      	movs	r2, #64	; 0x40
   1e770:	4694      	mov	ip, r2
   1e772:	44bc      	add	ip, r7
   1e774:	4463      	add	r3, ip
   1e776:	781b      	ldrb	r3, [r3, #0]
   1e778:	b2db      	uxtb	r3, r3
   1e77a:	62bb      	str	r3, [r7, #40]	; 0x28
   1e77c:	2300      	movs	r3, #0
   1e77e:	62fb      	str	r3, [r7, #44]	; 0x2c
   1e780:	4c30      	ldr	r4, [pc, #192]	; (1e844 <_sercom_get_async_baud_val+0x1b8>)
   1e782:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1e784:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1e786:	6b38      	ldr	r0, [r7, #48]	; 0x30
   1e788:	6b79      	ldr	r1, [r7, #52]	; 0x34
   1e78a:	47a0      	blx	r4
   1e78c:	0003      	movs	r3, r0
   1e78e:	000c      	movs	r4, r1
   1e790:	65bb      	str	r3, [r7, #88]	; 0x58
   1e792:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_int = long_division( peripheral_clock, temp1);
   1e794:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1e796:	623b      	str	r3, [r7, #32]
   1e798:	2300      	movs	r3, #0
   1e79a:	627b      	str	r3, [r7, #36]	; 0x24
   1e79c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   1e79e:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
   1e7a0:	001a      	movs	r2, r3
   1e7a2:	0023      	movs	r3, r4
   1e7a4:	6a38      	ldr	r0, [r7, #32]
   1e7a6:	6a79      	ldr	r1, [r7, #36]	; 0x24
   1e7a8:	4c27      	ldr	r4, [pc, #156]	; (1e848 <_sercom_get_async_baud_val+0x1bc>)
   1e7aa:	47a0      	blx	r4
   1e7ac:	0003      	movs	r3, r0
   1e7ae:	000c      	movs	r4, r1
   1e7b0:	667b      	str	r3, [r7, #100]	; 0x64
		if(baud_int > BAUD_INT_MAX) {
   1e7b2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
   1e7b4:	2380      	movs	r3, #128	; 0x80
   1e7b6:	019b      	lsls	r3, r3, #6
   1e7b8:	429a      	cmp	r2, r3
   1e7ba:	d901      	bls.n	1e7c0 <_sercom_get_async_baud_val+0x134>
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   1e7bc:	2340      	movs	r3, #64	; 0x40
   1e7be:	e03d      	b.n	1e83c <_sercom_get_async_baud_val+0x1b0>
		}
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
   1e7c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1e7c2:	61bb      	str	r3, [r7, #24]
   1e7c4:	2300      	movs	r3, #0
   1e7c6:	61fb      	str	r3, [r7, #28]
   1e7c8:	69b9      	ldr	r1, [r7, #24]
   1e7ca:	69fa      	ldr	r2, [r7, #28]
   1e7cc:	000b      	movs	r3, r1
   1e7ce:	0f5b      	lsrs	r3, r3, #29
   1e7d0:	0010      	movs	r0, r2
   1e7d2:	00c0      	lsls	r0, r0, #3
   1e7d4:	63f8      	str	r0, [r7, #60]	; 0x3c
   1e7d6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   1e7d8:	4318      	orrs	r0, r3
   1e7da:	63f8      	str	r0, [r7, #60]	; 0x3c
   1e7dc:	000b      	movs	r3, r1
   1e7de:	00db      	lsls	r3, r3, #3
   1e7e0:	63bb      	str	r3, [r7, #56]	; 0x38
   1e7e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   1e7e4:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
   1e7e6:	001a      	movs	r2, r3
   1e7e8:	0023      	movs	r3, r4
   1e7ea:	6bb8      	ldr	r0, [r7, #56]	; 0x38
   1e7ec:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   1e7ee:	4c16      	ldr	r4, [pc, #88]	; (1e848 <_sercom_get_async_baud_val+0x1bc>)
   1e7f0:	47a0      	blx	r4
   1e7f2:	0003      	movs	r3, r0
   1e7f4:	000c      	movs	r4, r1
   1e7f6:	65bb      	str	r3, [r7, #88]	; 0x58
   1e7f8:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_fp = temp1 - 8 * baud_int;
   1e7fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   1e7fc:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
   1e7fe:	b2d9      	uxtb	r1, r3
   1e800:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   1e802:	b2db      	uxtb	r3, r3
   1e804:	00db      	lsls	r3, r3, #3
   1e806:	b2da      	uxtb	r2, r3
   1e808:	2317      	movs	r3, #23
   1e80a:	2040      	movs	r0, #64	; 0x40
   1e80c:	4684      	mov	ip, r0
   1e80e:	44bc      	add	ip, r7
   1e810:	4463      	add	r3, ip
   1e812:	1a8a      	subs	r2, r1, r2
   1e814:	701a      	strb	r2, [r3, #0]
		baud_calculated = baud_int | (baud_fp << 13);
   1e816:	2317      	movs	r3, #23
   1e818:	2240      	movs	r2, #64	; 0x40
   1e81a:	4694      	mov	ip, r2
   1e81c:	44bc      	add	ip, r7
   1e81e:	4463      	add	r3, ip
   1e820:	781b      	ldrb	r3, [r3, #0]
   1e822:	035b      	lsls	r3, r3, #13
   1e824:	001a      	movs	r2, r3
   1e826:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   1e828:	4313      	orrs	r3, r2
   1e82a:	67bb      	str	r3, [r7, #120]	; 0x78
   1e82c:	2300      	movs	r3, #0
   1e82e:	67fb      	str	r3, [r7, #124]	; 0x7c
	}

	*baudval = baud_calculated;
   1e830:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   1e832:	6ffc      	ldr	r4, [r7, #124]	; 0x7c
   1e834:	b29a      	uxth	r2, r3
   1e836:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1e838:	801a      	strh	r2, [r3, #0]
	return STATUS_OK;
   1e83a:	2300      	movs	r3, #0
}
   1e83c:	0018      	movs	r0, r3
   1e83e:	46bd      	mov	sp, r7
   1e840:	b021      	add	sp, #132	; 0x84
   1e842:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1e844:	00026689 	.word	0x00026689
   1e848:	0001e52f 	.word	0x0001e52f

0001e84c <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
   1e84c:	b580      	push	{r7, lr}
   1e84e:	b084      	sub	sp, #16
   1e850:	af00      	add	r7, sp, #0
   1e852:	0002      	movs	r2, r0
   1e854:	1dfb      	adds	r3, r7, #7
   1e856:	701a      	strb	r2, [r3, #0]
   1e858:	1dbb      	adds	r3, r7, #6
   1e85a:	1c0a      	adds	r2, r1, #0
   1e85c:	701a      	strb	r2, [r3, #0]
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
   1e85e:	4b1a      	ldr	r3, [pc, #104]	; (1e8c8 <sercom_set_gclk_generator+0x7c>)
   1e860:	781b      	ldrb	r3, [r3, #0]
   1e862:	2201      	movs	r2, #1
   1e864:	4053      	eors	r3, r2
   1e866:	b2db      	uxtb	r3, r3
   1e868:	2b00      	cmp	r3, #0
   1e86a:	d103      	bne.n	1e874 <sercom_set_gclk_generator+0x28>
   1e86c:	1dbb      	adds	r3, r7, #6
   1e86e:	781b      	ldrb	r3, [r3, #0]
   1e870:	2b00      	cmp	r3, #0
   1e872:	d01b      	beq.n	1e8ac <sercom_set_gclk_generator+0x60>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   1e874:	230c      	movs	r3, #12
   1e876:	18fb      	adds	r3, r7, r3
   1e878:	0018      	movs	r0, r3
   1e87a:	4b14      	ldr	r3, [pc, #80]	; (1e8cc <sercom_set_gclk_generator+0x80>)
   1e87c:	4798      	blx	r3
		gclk_chan_conf.source_generator = generator_source;
   1e87e:	230c      	movs	r3, #12
   1e880:	18fb      	adds	r3, r7, r3
   1e882:	1dfa      	adds	r2, r7, #7
   1e884:	7812      	ldrb	r2, [r2, #0]
   1e886:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
   1e888:	230c      	movs	r3, #12
   1e88a:	18fb      	adds	r3, r7, r3
   1e88c:	0019      	movs	r1, r3
   1e88e:	2013      	movs	r0, #19
   1e890:	4b0f      	ldr	r3, [pc, #60]	; (1e8d0 <sercom_set_gclk_generator+0x84>)
   1e892:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
   1e894:	2013      	movs	r0, #19
   1e896:	4b0f      	ldr	r3, [pc, #60]	; (1e8d4 <sercom_set_gclk_generator+0x88>)
   1e898:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
   1e89a:	4b0b      	ldr	r3, [pc, #44]	; (1e8c8 <sercom_set_gclk_generator+0x7c>)
   1e89c:	1dfa      	adds	r2, r7, #7
   1e89e:	7812      	ldrb	r2, [r2, #0]
   1e8a0:	705a      	strb	r2, [r3, #1]
		_sercom_config.generator_is_set = true;
   1e8a2:	4b09      	ldr	r3, [pc, #36]	; (1e8c8 <sercom_set_gclk_generator+0x7c>)
   1e8a4:	2201      	movs	r2, #1
   1e8a6:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
   1e8a8:	2300      	movs	r3, #0
   1e8aa:	e008      	b.n	1e8be <sercom_set_gclk_generator+0x72>
	} else if (generator_source == _sercom_config.generator_source) {
   1e8ac:	4b06      	ldr	r3, [pc, #24]	; (1e8c8 <sercom_set_gclk_generator+0x7c>)
   1e8ae:	785b      	ldrb	r3, [r3, #1]
   1e8b0:	1dfa      	adds	r2, r7, #7
   1e8b2:	7812      	ldrb	r2, [r2, #0]
   1e8b4:	429a      	cmp	r2, r3
   1e8b6:	d101      	bne.n	1e8bc <sercom_set_gclk_generator+0x70>
		/* Return status OK if same config */
		return STATUS_OK;
   1e8b8:	2300      	movs	r3, #0
   1e8ba:	e000      	b.n	1e8be <sercom_set_gclk_generator+0x72>
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
   1e8bc:	231d      	movs	r3, #29
}
   1e8be:	0018      	movs	r0, r3
   1e8c0:	46bd      	mov	sp, r7
   1e8c2:	b004      	add	sp, #16
   1e8c4:	bd80      	pop	{r7, pc}
   1e8c6:	46c0      	nop			; (mov r8, r8)
   1e8c8:	200004b4 	.word	0x200004b4
   1e8cc:	0001e519 	.word	0x0001e519
   1e8d0:	00024715 	.word	0x00024715
   1e8d4:	00024759 	.word	0x00024759

0001e8d8 <_sercom_get_default_pad>:
 *
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
   1e8d8:	b580      	push	{r7, lr}
   1e8da:	b082      	sub	sp, #8
   1e8dc:	af00      	add	r7, sp, #0
   1e8de:	6078      	str	r0, [r7, #4]
   1e8e0:	000a      	movs	r2, r1
   1e8e2:	1cfb      	adds	r3, r7, #3
   1e8e4:	701a      	strb	r2, [r3, #0]
	switch ((uintptr_t)sercom_module) {
   1e8e6:	687b      	ldr	r3, [r7, #4]
   1e8e8:	4a4d      	ldr	r2, [pc, #308]	; (1ea20 <_sercom_get_default_pad+0x148>)
   1e8ea:	4293      	cmp	r3, r2
   1e8ec:	d03f      	beq.n	1e96e <_sercom_get_default_pad+0x96>
   1e8ee:	4a4c      	ldr	r2, [pc, #304]	; (1ea20 <_sercom_get_default_pad+0x148>)
   1e8f0:	4293      	cmp	r3, r2
   1e8f2:	d806      	bhi.n	1e902 <_sercom_get_default_pad+0x2a>
   1e8f4:	4a4b      	ldr	r2, [pc, #300]	; (1ea24 <_sercom_get_default_pad+0x14c>)
   1e8f6:	4293      	cmp	r3, r2
   1e8f8:	d00f      	beq.n	1e91a <_sercom_get_default_pad+0x42>
   1e8fa:	4a4b      	ldr	r2, [pc, #300]	; (1ea28 <_sercom_get_default_pad+0x150>)
   1e8fc:	4293      	cmp	r3, r2
   1e8fe:	d021      	beq.n	1e944 <_sercom_get_default_pad+0x6c>
   1e900:	e089      	b.n	1ea16 <_sercom_get_default_pad+0x13e>
   1e902:	4a4a      	ldr	r2, [pc, #296]	; (1ea2c <_sercom_get_default_pad+0x154>)
   1e904:	4293      	cmp	r3, r2
   1e906:	d100      	bne.n	1e90a <_sercom_get_default_pad+0x32>
   1e908:	e05b      	b.n	1e9c2 <_sercom_get_default_pad+0xea>
   1e90a:	4a49      	ldr	r2, [pc, #292]	; (1ea30 <_sercom_get_default_pad+0x158>)
   1e90c:	4293      	cmp	r3, r2
   1e90e:	d100      	bne.n	1e912 <_sercom_get_default_pad+0x3a>
   1e910:	e06c      	b.n	1e9ec <_sercom_get_default_pad+0x114>
   1e912:	4a48      	ldr	r2, [pc, #288]	; (1ea34 <_sercom_get_default_pad+0x15c>)
   1e914:	4293      	cmp	r3, r2
   1e916:	d03f      	beq.n	1e998 <_sercom_get_default_pad+0xc0>
   1e918:	e07d      	b.n	1ea16 <_sercom_get_default_pad+0x13e>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
   1e91a:	1cfb      	adds	r3, r7, #3
   1e91c:	781b      	ldrb	r3, [r3, #0]
   1e91e:	2b01      	cmp	r3, #1
   1e920:	d00a      	beq.n	1e938 <_sercom_get_default_pad+0x60>
   1e922:	dc02      	bgt.n	1e92a <_sercom_get_default_pad+0x52>
   1e924:	2b00      	cmp	r3, #0
   1e926:	d005      	beq.n	1e934 <_sercom_get_default_pad+0x5c>
   1e928:	e075      	b.n	1ea16 <_sercom_get_default_pad+0x13e>
   1e92a:	2b02      	cmp	r3, #2
   1e92c:	d006      	beq.n	1e93c <_sercom_get_default_pad+0x64>
   1e92e:	2b03      	cmp	r3, #3
   1e930:	d006      	beq.n	1e940 <_sercom_get_default_pad+0x68>
   1e932:	e070      	b.n	1ea16 <_sercom_get_default_pad+0x13e>
   1e934:	4b40      	ldr	r3, [pc, #256]	; (1ea38 <_sercom_get_default_pad+0x160>)
   1e936:	e06f      	b.n	1ea18 <_sercom_get_default_pad+0x140>
   1e938:	4b40      	ldr	r3, [pc, #256]	; (1ea3c <_sercom_get_default_pad+0x164>)
   1e93a:	e06d      	b.n	1ea18 <_sercom_get_default_pad+0x140>
   1e93c:	4b40      	ldr	r3, [pc, #256]	; (1ea40 <_sercom_get_default_pad+0x168>)
   1e93e:	e06b      	b.n	1ea18 <_sercom_get_default_pad+0x140>
   1e940:	4b40      	ldr	r3, [pc, #256]	; (1ea44 <_sercom_get_default_pad+0x16c>)
   1e942:	e069      	b.n	1ea18 <_sercom_get_default_pad+0x140>
   1e944:	1cfb      	adds	r3, r7, #3
   1e946:	781b      	ldrb	r3, [r3, #0]
   1e948:	2b01      	cmp	r3, #1
   1e94a:	d00a      	beq.n	1e962 <_sercom_get_default_pad+0x8a>
   1e94c:	dc02      	bgt.n	1e954 <_sercom_get_default_pad+0x7c>
   1e94e:	2b00      	cmp	r3, #0
   1e950:	d005      	beq.n	1e95e <_sercom_get_default_pad+0x86>
   1e952:	e060      	b.n	1ea16 <_sercom_get_default_pad+0x13e>
   1e954:	2b02      	cmp	r3, #2
   1e956:	d006      	beq.n	1e966 <_sercom_get_default_pad+0x8e>
   1e958:	2b03      	cmp	r3, #3
   1e95a:	d006      	beq.n	1e96a <_sercom_get_default_pad+0x92>
   1e95c:	e05b      	b.n	1ea16 <_sercom_get_default_pad+0x13e>
   1e95e:	2303      	movs	r3, #3
   1e960:	e05a      	b.n	1ea18 <_sercom_get_default_pad+0x140>
   1e962:	4b39      	ldr	r3, [pc, #228]	; (1ea48 <_sercom_get_default_pad+0x170>)
   1e964:	e058      	b.n	1ea18 <_sercom_get_default_pad+0x140>
   1e966:	4b39      	ldr	r3, [pc, #228]	; (1ea4c <_sercom_get_default_pad+0x174>)
   1e968:	e056      	b.n	1ea18 <_sercom_get_default_pad+0x140>
   1e96a:	4b39      	ldr	r3, [pc, #228]	; (1ea50 <_sercom_get_default_pad+0x178>)
   1e96c:	e054      	b.n	1ea18 <_sercom_get_default_pad+0x140>
   1e96e:	1cfb      	adds	r3, r7, #3
   1e970:	781b      	ldrb	r3, [r3, #0]
   1e972:	2b01      	cmp	r3, #1
   1e974:	d00a      	beq.n	1e98c <_sercom_get_default_pad+0xb4>
   1e976:	dc02      	bgt.n	1e97e <_sercom_get_default_pad+0xa6>
   1e978:	2b00      	cmp	r3, #0
   1e97a:	d005      	beq.n	1e988 <_sercom_get_default_pad+0xb0>
   1e97c:	e04b      	b.n	1ea16 <_sercom_get_default_pad+0x13e>
   1e97e:	2b02      	cmp	r3, #2
   1e980:	d006      	beq.n	1e990 <_sercom_get_default_pad+0xb8>
   1e982:	2b03      	cmp	r3, #3
   1e984:	d006      	beq.n	1e994 <_sercom_get_default_pad+0xbc>
   1e986:	e046      	b.n	1ea16 <_sercom_get_default_pad+0x13e>
   1e988:	4b32      	ldr	r3, [pc, #200]	; (1ea54 <_sercom_get_default_pad+0x17c>)
   1e98a:	e045      	b.n	1ea18 <_sercom_get_default_pad+0x140>
   1e98c:	4b32      	ldr	r3, [pc, #200]	; (1ea58 <_sercom_get_default_pad+0x180>)
   1e98e:	e043      	b.n	1ea18 <_sercom_get_default_pad+0x140>
   1e990:	4b32      	ldr	r3, [pc, #200]	; (1ea5c <_sercom_get_default_pad+0x184>)
   1e992:	e041      	b.n	1ea18 <_sercom_get_default_pad+0x140>
   1e994:	4b32      	ldr	r3, [pc, #200]	; (1ea60 <_sercom_get_default_pad+0x188>)
   1e996:	e03f      	b.n	1ea18 <_sercom_get_default_pad+0x140>
   1e998:	1cfb      	adds	r3, r7, #3
   1e99a:	781b      	ldrb	r3, [r3, #0]
   1e99c:	2b01      	cmp	r3, #1
   1e99e:	d00a      	beq.n	1e9b6 <_sercom_get_default_pad+0xde>
   1e9a0:	dc02      	bgt.n	1e9a8 <_sercom_get_default_pad+0xd0>
   1e9a2:	2b00      	cmp	r3, #0
   1e9a4:	d005      	beq.n	1e9b2 <_sercom_get_default_pad+0xda>
   1e9a6:	e036      	b.n	1ea16 <_sercom_get_default_pad+0x13e>
   1e9a8:	2b02      	cmp	r3, #2
   1e9aa:	d006      	beq.n	1e9ba <_sercom_get_default_pad+0xe2>
   1e9ac:	2b03      	cmp	r3, #3
   1e9ae:	d006      	beq.n	1e9be <_sercom_get_default_pad+0xe6>
   1e9b0:	e031      	b.n	1ea16 <_sercom_get_default_pad+0x13e>
   1e9b2:	4b2c      	ldr	r3, [pc, #176]	; (1ea64 <_sercom_get_default_pad+0x18c>)
   1e9b4:	e030      	b.n	1ea18 <_sercom_get_default_pad+0x140>
   1e9b6:	4b2c      	ldr	r3, [pc, #176]	; (1ea68 <_sercom_get_default_pad+0x190>)
   1e9b8:	e02e      	b.n	1ea18 <_sercom_get_default_pad+0x140>
   1e9ba:	4b2c      	ldr	r3, [pc, #176]	; (1ea6c <_sercom_get_default_pad+0x194>)
   1e9bc:	e02c      	b.n	1ea18 <_sercom_get_default_pad+0x140>
   1e9be:	4b2c      	ldr	r3, [pc, #176]	; (1ea70 <_sercom_get_default_pad+0x198>)
   1e9c0:	e02a      	b.n	1ea18 <_sercom_get_default_pad+0x140>
   1e9c2:	1cfb      	adds	r3, r7, #3
   1e9c4:	781b      	ldrb	r3, [r3, #0]
   1e9c6:	2b01      	cmp	r3, #1
   1e9c8:	d00a      	beq.n	1e9e0 <_sercom_get_default_pad+0x108>
   1e9ca:	dc02      	bgt.n	1e9d2 <_sercom_get_default_pad+0xfa>
   1e9cc:	2b00      	cmp	r3, #0
   1e9ce:	d005      	beq.n	1e9dc <_sercom_get_default_pad+0x104>
   1e9d0:	e021      	b.n	1ea16 <_sercom_get_default_pad+0x13e>
   1e9d2:	2b02      	cmp	r3, #2
   1e9d4:	d006      	beq.n	1e9e4 <_sercom_get_default_pad+0x10c>
   1e9d6:	2b03      	cmp	r3, #3
   1e9d8:	d006      	beq.n	1e9e8 <_sercom_get_default_pad+0x110>
   1e9da:	e01c      	b.n	1ea16 <_sercom_get_default_pad+0x13e>
   1e9dc:	4b25      	ldr	r3, [pc, #148]	; (1ea74 <_sercom_get_default_pad+0x19c>)
   1e9de:	e01b      	b.n	1ea18 <_sercom_get_default_pad+0x140>
   1e9e0:	4b25      	ldr	r3, [pc, #148]	; (1ea78 <_sercom_get_default_pad+0x1a0>)
   1e9e2:	e019      	b.n	1ea18 <_sercom_get_default_pad+0x140>
   1e9e4:	4b25      	ldr	r3, [pc, #148]	; (1ea7c <_sercom_get_default_pad+0x1a4>)
   1e9e6:	e017      	b.n	1ea18 <_sercom_get_default_pad+0x140>
   1e9e8:	4b25      	ldr	r3, [pc, #148]	; (1ea80 <_sercom_get_default_pad+0x1a8>)
   1e9ea:	e015      	b.n	1ea18 <_sercom_get_default_pad+0x140>
   1e9ec:	1cfb      	adds	r3, r7, #3
   1e9ee:	781b      	ldrb	r3, [r3, #0]
   1e9f0:	2b01      	cmp	r3, #1
   1e9f2:	d00a      	beq.n	1ea0a <_sercom_get_default_pad+0x132>
   1e9f4:	dc02      	bgt.n	1e9fc <_sercom_get_default_pad+0x124>
   1e9f6:	2b00      	cmp	r3, #0
   1e9f8:	d005      	beq.n	1ea06 <_sercom_get_default_pad+0x12e>
   1e9fa:	e00c      	b.n	1ea16 <_sercom_get_default_pad+0x13e>
   1e9fc:	2b02      	cmp	r3, #2
   1e9fe:	d006      	beq.n	1ea0e <_sercom_get_default_pad+0x136>
   1ea00:	2b03      	cmp	r3, #3
   1ea02:	d006      	beq.n	1ea12 <_sercom_get_default_pad+0x13a>
   1ea04:	e007      	b.n	1ea16 <_sercom_get_default_pad+0x13e>
   1ea06:	4b1f      	ldr	r3, [pc, #124]	; (1ea84 <_sercom_get_default_pad+0x1ac>)
   1ea08:	e006      	b.n	1ea18 <_sercom_get_default_pad+0x140>
   1ea0a:	4b1f      	ldr	r3, [pc, #124]	; (1ea88 <_sercom_get_default_pad+0x1b0>)
   1ea0c:	e004      	b.n	1ea18 <_sercom_get_default_pad+0x140>
   1ea0e:	4b1f      	ldr	r3, [pc, #124]	; (1ea8c <_sercom_get_default_pad+0x1b4>)
   1ea10:	e002      	b.n	1ea18 <_sercom_get_default_pad+0x140>
   1ea12:	4b1f      	ldr	r3, [pc, #124]	; (1ea90 <_sercom_get_default_pad+0x1b8>)
   1ea14:	e000      	b.n	1ea18 <_sercom_get_default_pad+0x140>
	}

	Assert(false);
	return 0;
   1ea16:	2300      	movs	r3, #0
}
   1ea18:	0018      	movs	r0, r3
   1ea1a:	46bd      	mov	sp, r7
   1ea1c:	b002      	add	sp, #8
   1ea1e:	bd80      	pop	{r7, pc}
   1ea20:	42001000 	.word	0x42001000
   1ea24:	42000800 	.word	0x42000800
   1ea28:	42000c00 	.word	0x42000c00
   1ea2c:	42001800 	.word	0x42001800
   1ea30:	42001c00 	.word	0x42001c00
   1ea34:	42001400 	.word	0x42001400
   1ea38:	00040003 	.word	0x00040003
   1ea3c:	00050003 	.word	0x00050003
   1ea40:	00060003 	.word	0x00060003
   1ea44:	00070003 	.word	0x00070003
   1ea48:	00010003 	.word	0x00010003
   1ea4c:	001e0003 	.word	0x001e0003
   1ea50:	001f0003 	.word	0x001f0003
   1ea54:	00080003 	.word	0x00080003
   1ea58:	00090003 	.word	0x00090003
   1ea5c:	000a0003 	.word	0x000a0003
   1ea60:	000b0003 	.word	0x000b0003
   1ea64:	00100003 	.word	0x00100003
   1ea68:	00110003 	.word	0x00110003
   1ea6c:	00120003 	.word	0x00120003
   1ea70:	00130003 	.word	0x00130003
   1ea74:	000c0003 	.word	0x000c0003
   1ea78:	000d0003 	.word	0x000d0003
   1ea7c:	000e0003 	.word	0x000e0003
   1ea80:	000f0003 	.word	0x000f0003
   1ea84:	00160003 	.word	0x00160003
   1ea88:	00170003 	.word	0x00170003
   1ea8c:	00180003 	.word	0x00180003
   1ea90:	00190003 	.word	0x00190003

0001ea94 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
   1ea94:	b590      	push	{r4, r7, lr}
   1ea96:	b08b      	sub	sp, #44	; 0x2c
   1ea98:	af00      	add	r7, sp, #0
   1ea9a:	6078      	str	r0, [r7, #4]
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
   1ea9c:	230c      	movs	r3, #12
   1ea9e:	18fb      	adds	r3, r7, r3
   1eaa0:	4a0f      	ldr	r2, [pc, #60]	; (1eae0 <_sercom_get_sercom_inst_index+0x4c>)
   1eaa2:	ca13      	ldmia	r2!, {r0, r1, r4}
   1eaa4:	c313      	stmia	r3!, {r0, r1, r4}
   1eaa6:	ca13      	ldmia	r2!, {r0, r1, r4}
   1eaa8:	c313      	stmia	r3!, {r0, r1, r4}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   1eaaa:	2300      	movs	r3, #0
   1eaac:	627b      	str	r3, [r7, #36]	; 0x24
   1eaae:	e00e      	b.n	1eace <_sercom_get_sercom_inst_index+0x3a>
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
   1eab0:	230c      	movs	r3, #12
   1eab2:	18fb      	adds	r3, r7, r3
   1eab4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1eab6:	0092      	lsls	r2, r2, #2
   1eab8:	58d3      	ldr	r3, [r2, r3]
   1eaba:	001a      	movs	r2, r3
   1eabc:	687b      	ldr	r3, [r7, #4]
   1eabe:	429a      	cmp	r2, r3
   1eac0:	d102      	bne.n	1eac8 <_sercom_get_sercom_inst_index+0x34>
			return i;
   1eac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1eac4:	b2db      	uxtb	r3, r3
   1eac6:	e006      	b.n	1ead6 <_sercom_get_sercom_inst_index+0x42>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   1eac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1eaca:	3301      	adds	r3, #1
   1eacc:	627b      	str	r3, [r7, #36]	; 0x24
   1eace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1ead0:	2b05      	cmp	r3, #5
   1ead2:	d9ed      	bls.n	1eab0 <_sercom_get_sercom_inst_index+0x1c>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
   1ead4:	2300      	movs	r3, #0
}
   1ead6:	0018      	movs	r0, r3
   1ead8:	46bd      	mov	sp, r7
   1eada:	b00b      	add	sp, #44	; 0x2c
   1eadc:	bd90      	pop	{r4, r7, pc}
   1eade:	46c0      	nop			; (mov r8, r8)
   1eae0:	0002a8c0 	.word	0x0002a8c0

0001eae4 <system_cpu_clock_get_hz>:
{
   1eae4:	b580      	push	{r7, lr}
   1eae6:	af00      	add	r7, sp, #0
	return (system_gclk_gen_get_hz(GCLK_GENERATOR_0) >> PM->CPUSEL.reg);
   1eae8:	2000      	movs	r0, #0
   1eaea:	4b05      	ldr	r3, [pc, #20]	; (1eb00 <system_cpu_clock_get_hz+0x1c>)
   1eaec:	4798      	blx	r3
   1eaee:	0002      	movs	r2, r0
   1eaf0:	4b04      	ldr	r3, [pc, #16]	; (1eb04 <system_cpu_clock_get_hz+0x20>)
   1eaf2:	7a1b      	ldrb	r3, [r3, #8]
   1eaf4:	b2db      	uxtb	r3, r3
   1eaf6:	40da      	lsrs	r2, r3
   1eaf8:	0013      	movs	r3, r2
}
   1eafa:	0018      	movs	r0, r3
   1eafc:	46bd      	mov	sp, r7
   1eafe:	bd80      	pop	{r7, pc}
   1eb00:	0002463d 	.word	0x0002463d
   1eb04:	40000400 	.word	0x40000400

0001eb08 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
   1eb08:	b580      	push	{r7, lr}
   1eb0a:	b084      	sub	sp, #16
   1eb0c:	af00      	add	r7, sp, #0
   1eb0e:	60f8      	str	r0, [r7, #12]
   1eb10:	60b9      	str	r1, [r7, #8]
   1eb12:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
   1eb14:	68fb      	ldr	r3, [r7, #12]
   1eb16:	3b04      	subs	r3, #4
   1eb18:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
   1eb1a:	68fb      	ldr	r3, [r7, #12]
   1eb1c:	2280      	movs	r2, #128	; 0x80
   1eb1e:	0452      	lsls	r2, r2, #17
   1eb20:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
   1eb22:	68fb      	ldr	r3, [r7, #12]
   1eb24:	3b04      	subs	r3, #4
   1eb26:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
   1eb28:	68ba      	ldr	r2, [r7, #8]
   1eb2a:	68fb      	ldr	r3, [r7, #12]
   1eb2c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
   1eb2e:	68fb      	ldr	r3, [r7, #12]
   1eb30:	3b04      	subs	r3, #4
   1eb32:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
   1eb34:	4a08      	ldr	r2, [pc, #32]	; (1eb58 <pxPortInitialiseStack+0x50>)
   1eb36:	68fb      	ldr	r3, [r7, #12]
   1eb38:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
   1eb3a:	68fb      	ldr	r3, [r7, #12]
   1eb3c:	3b14      	subs	r3, #20
   1eb3e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
   1eb40:	687a      	ldr	r2, [r7, #4]
   1eb42:	68fb      	ldr	r3, [r7, #12]
   1eb44:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
   1eb46:	68fb      	ldr	r3, [r7, #12]
   1eb48:	3b20      	subs	r3, #32
   1eb4a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
   1eb4c:	68fb      	ldr	r3, [r7, #12]
}
   1eb4e:	0018      	movs	r0, r3
   1eb50:	46bd      	mov	sp, r7
   1eb52:	b004      	add	sp, #16
   1eb54:	bd80      	pop	{r7, pc}
   1eb56:	46c0      	nop			; (mov r8, r8)
   1eb58:	0001eb5d 	.word	0x0001eb5d

0001eb5c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
   1eb5c:	b580      	push	{r7, lr}
   1eb5e:	b082      	sub	sp, #8
   1eb60:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
   1eb62:	2300      	movs	r3, #0
   1eb64:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
   1eb66:	4b07      	ldr	r3, [pc, #28]	; (1eb84 <prvTaskExitError+0x28>)
   1eb68:	681b      	ldr	r3, [r3, #0]
   1eb6a:	3301      	adds	r3, #1
   1eb6c:	d001      	beq.n	1eb72 <prvTaskExitError+0x16>
   1eb6e:	b672      	cpsid	i
   1eb70:	e7fe      	b.n	1eb70 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
   1eb72:	b672      	cpsid	i
	while( ulDummy == 0 )
   1eb74:	46c0      	nop			; (mov r8, r8)
   1eb76:	687b      	ldr	r3, [r7, #4]
   1eb78:	2b00      	cmp	r3, #0
   1eb7a:	d0fc      	beq.n	1eb76 <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
   1eb7c:	46c0      	nop			; (mov r8, r8)
   1eb7e:	46bd      	mov	sp, r7
   1eb80:	b002      	add	sp, #8
   1eb82:	bd80      	pop	{r7, pc}
   1eb84:	20000010 	.word	0x20000010

0001eb88 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
   1eb88:	b580      	push	{r7, lr}
   1eb8a:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
   1eb8c:	46c0      	nop			; (mov r8, r8)
   1eb8e:	46bd      	mov	sp, r7
   1eb90:	bd80      	pop	{r7, pc}
	...

0001eba0 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
   1eba0:	4a0b      	ldr	r2, [pc, #44]	; (1ebd0 <pxCurrentTCBConst2>)
   1eba2:	6813      	ldr	r3, [r2, #0]
   1eba4:	6818      	ldr	r0, [r3, #0]
   1eba6:	3020      	adds	r0, #32
   1eba8:	f380 8809 	msr	PSP, r0
   1ebac:	2002      	movs	r0, #2
   1ebae:	f380 8814 	msr	CONTROL, r0
   1ebb2:	f3bf 8f6f 	isb	sy
   1ebb6:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
   1ebb8:	46ae      	mov	lr, r5
   1ebba:	bc08      	pop	{r3}
   1ebbc:	bc04      	pop	{r2}
   1ebbe:	b662      	cpsie	i
   1ebc0:	4718      	bx	r3
   1ebc2:	46c0      	nop			; (mov r8, r8)
   1ebc4:	46c0      	nop			; (mov r8, r8)
   1ebc6:	46c0      	nop			; (mov r8, r8)
   1ebc8:	46c0      	nop			; (mov r8, r8)
   1ebca:	46c0      	nop			; (mov r8, r8)
   1ebcc:	46c0      	nop			; (mov r8, r8)
   1ebce:	46c0      	nop			; (mov r8, r8)

0001ebd0 <pxCurrentTCBConst2>:
   1ebd0:	200004b8 	.word	0x200004b8
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
   1ebd4:	46c0      	nop			; (mov r8, r8)
   1ebd6:	46c0      	nop			; (mov r8, r8)

0001ebd8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
   1ebd8:	b580      	push	{r7, lr}
   1ebda:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
   1ebdc:	4b0e      	ldr	r3, [pc, #56]	; (1ec18 <xPortStartScheduler+0x40>)
   1ebde:	4a0e      	ldr	r2, [pc, #56]	; (1ec18 <xPortStartScheduler+0x40>)
   1ebe0:	6812      	ldr	r2, [r2, #0]
   1ebe2:	21ff      	movs	r1, #255	; 0xff
   1ebe4:	0409      	lsls	r1, r1, #16
   1ebe6:	430a      	orrs	r2, r1
   1ebe8:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
   1ebea:	4b0b      	ldr	r3, [pc, #44]	; (1ec18 <xPortStartScheduler+0x40>)
   1ebec:	4a0a      	ldr	r2, [pc, #40]	; (1ec18 <xPortStartScheduler+0x40>)
   1ebee:	6812      	ldr	r2, [r2, #0]
   1ebf0:	21ff      	movs	r1, #255	; 0xff
   1ebf2:	0609      	lsls	r1, r1, #24
   1ebf4:	430a      	orrs	r2, r1
   1ebf6:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
   1ebf8:	4b08      	ldr	r3, [pc, #32]	; (1ec1c <xPortStartScheduler+0x44>)
   1ebfa:	4798      	blx	r3

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
   1ebfc:	4b08      	ldr	r3, [pc, #32]	; (1ec20 <xPortStartScheduler+0x48>)
   1ebfe:	2200      	movs	r2, #0
   1ec00:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
   1ec02:	4b08      	ldr	r3, [pc, #32]	; (1ec24 <xPortStartScheduler+0x4c>)
   1ec04:	4798      	blx	r3
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
   1ec06:	4b08      	ldr	r3, [pc, #32]	; (1ec28 <xPortStartScheduler+0x50>)
   1ec08:	4798      	blx	r3
	prvTaskExitError();
   1ec0a:	4b08      	ldr	r3, [pc, #32]	; (1ec2c <xPortStartScheduler+0x54>)
   1ec0c:	4798      	blx	r3

	/* Should not get here! */
	return 0;
   1ec0e:	2300      	movs	r3, #0
}
   1ec10:	0018      	movs	r0, r3
   1ec12:	46bd      	mov	sp, r7
   1ec14:	bd80      	pop	{r7, pc}
   1ec16:	46c0      	nop			; (mov r8, r8)
   1ec18:	e000ed20 	.word	0xe000ed20
   1ec1c:	0001ed49 	.word	0x0001ed49
   1ec20:	20000010 	.word	0x20000010
   1ec24:	0001eba1 	.word	0x0001eba1
   1ec28:	0002037d 	.word	0x0002037d
   1ec2c:	0001eb5d 	.word	0x0001eb5d

0001ec30 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
   1ec30:	b580      	push	{r7, lr}
   1ec32:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
   1ec34:	4b05      	ldr	r3, [pc, #20]	; (1ec4c <vPortYield+0x1c>)
   1ec36:	2280      	movs	r2, #128	; 0x80
   1ec38:	0552      	lsls	r2, r2, #21
   1ec3a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
   1ec3c:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
   1ec40:	f3bf 8f6f 	isb	sy
}
   1ec44:	46c0      	nop			; (mov r8, r8)
   1ec46:	46bd      	mov	sp, r7
   1ec48:	bd80      	pop	{r7, pc}
   1ec4a:	46c0      	nop			; (mov r8, r8)
   1ec4c:	e000ed04 	.word	0xe000ed04

0001ec50 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
   1ec50:	b580      	push	{r7, lr}
   1ec52:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
   1ec54:	b672      	cpsid	i
    uxCriticalNesting++;
   1ec56:	4b06      	ldr	r3, [pc, #24]	; (1ec70 <vPortEnterCritical+0x20>)
   1ec58:	681b      	ldr	r3, [r3, #0]
   1ec5a:	1c5a      	adds	r2, r3, #1
   1ec5c:	4b04      	ldr	r3, [pc, #16]	; (1ec70 <vPortEnterCritical+0x20>)
   1ec5e:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
   1ec60:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
   1ec64:	f3bf 8f6f 	isb	sy
}
   1ec68:	46c0      	nop			; (mov r8, r8)
   1ec6a:	46bd      	mov	sp, r7
   1ec6c:	bd80      	pop	{r7, pc}
   1ec6e:	46c0      	nop			; (mov r8, r8)
   1ec70:	20000010 	.word	0x20000010

0001ec74 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
   1ec74:	b580      	push	{r7, lr}
   1ec76:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
   1ec78:	4b09      	ldr	r3, [pc, #36]	; (1eca0 <vPortExitCritical+0x2c>)
   1ec7a:	681b      	ldr	r3, [r3, #0]
   1ec7c:	2b00      	cmp	r3, #0
   1ec7e:	d101      	bne.n	1ec84 <vPortExitCritical+0x10>
   1ec80:	b672      	cpsid	i
   1ec82:	e7fe      	b.n	1ec82 <vPortExitCritical+0xe>
    uxCriticalNesting--;
   1ec84:	4b06      	ldr	r3, [pc, #24]	; (1eca0 <vPortExitCritical+0x2c>)
   1ec86:	681b      	ldr	r3, [r3, #0]
   1ec88:	1e5a      	subs	r2, r3, #1
   1ec8a:	4b05      	ldr	r3, [pc, #20]	; (1eca0 <vPortExitCritical+0x2c>)
   1ec8c:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
   1ec8e:	4b04      	ldr	r3, [pc, #16]	; (1eca0 <vPortExitCritical+0x2c>)
   1ec90:	681b      	ldr	r3, [r3, #0]
   1ec92:	2b00      	cmp	r3, #0
   1ec94:	d100      	bne.n	1ec98 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
   1ec96:	b662      	cpsie	i
    }
}
   1ec98:	46c0      	nop			; (mov r8, r8)
   1ec9a:	46bd      	mov	sp, r7
   1ec9c:	bd80      	pop	{r7, pc}
   1ec9e:	46c0      	nop			; (mov r8, r8)
   1eca0:	20000010 	.word	0x20000010

0001eca4 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
   1eca4:	f3ef 8010 	mrs	r0, PRIMASK
   1eca8:	b672      	cpsid	i
   1ecaa:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
   1ecac:	46c0      	nop			; (mov r8, r8)
   1ecae:	0018      	movs	r0, r3

0001ecb0 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
   1ecb0:	f380 8810 	msr	PRIMASK, r0
   1ecb4:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
   1ecb6:	46c0      	nop			; (mov r8, r8)
	...

0001ecc0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
   1ecc0:	f3ef 8009 	mrs	r0, PSP
   1ecc4:	4b0e      	ldr	r3, [pc, #56]	; (1ed00 <pxCurrentTCBConst>)
   1ecc6:	681a      	ldr	r2, [r3, #0]
   1ecc8:	3820      	subs	r0, #32
   1ecca:	6010      	str	r0, [r2, #0]
   1eccc:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
   1ecce:	4644      	mov	r4, r8
   1ecd0:	464d      	mov	r5, r9
   1ecd2:	4656      	mov	r6, sl
   1ecd4:	465f      	mov	r7, fp
   1ecd6:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
   1ecd8:	b508      	push	{r3, lr}
   1ecda:	b672      	cpsid	i
   1ecdc:	f001 fb4e 	bl	2037c <vTaskSwitchContext>
   1ece0:	b662      	cpsie	i
   1ece2:	bc0c      	pop	{r2, r3}
   1ece4:	6811      	ldr	r1, [r2, #0]
   1ece6:	6808      	ldr	r0, [r1, #0]
   1ece8:	3010      	adds	r0, #16
   1ecea:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
   1ecec:	46a0      	mov	r8, r4
   1ecee:	46a9      	mov	r9, r5
   1ecf0:	46b2      	mov	sl, r6
   1ecf2:	46bb      	mov	fp, r7
   1ecf4:	f380 8809 	msr	PSP, r0
   1ecf8:	3820      	subs	r0, #32
   1ecfa:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
   1ecfc:	4718      	bx	r3
   1ecfe:	46c0      	nop			; (mov r8, r8)

0001ed00 <pxCurrentTCBConst>:
   1ed00:	200004b8 	.word	0x200004b8
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
   1ed04:	46c0      	nop			; (mov r8, r8)
   1ed06:	46c0      	nop			; (mov r8, r8)

0001ed08 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
   1ed08:	b580      	push	{r7, lr}
   1ed0a:	b082      	sub	sp, #8
   1ed0c:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
   1ed0e:	4b0a      	ldr	r3, [pc, #40]	; (1ed38 <SysTick_Handler+0x30>)
   1ed10:	4798      	blx	r3
   1ed12:	0003      	movs	r3, r0
   1ed14:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
   1ed16:	4b09      	ldr	r3, [pc, #36]	; (1ed3c <SysTick_Handler+0x34>)
   1ed18:	4798      	blx	r3
   1ed1a:	1e03      	subs	r3, r0, #0
   1ed1c:	d003      	beq.n	1ed26 <SysTick_Handler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
   1ed1e:	4b08      	ldr	r3, [pc, #32]	; (1ed40 <SysTick_Handler+0x38>)
   1ed20:	2280      	movs	r2, #128	; 0x80
   1ed22:	0552      	lsls	r2, r2, #21
   1ed24:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
   1ed26:	687b      	ldr	r3, [r7, #4]
   1ed28:	0018      	movs	r0, r3
   1ed2a:	4b06      	ldr	r3, [pc, #24]	; (1ed44 <SysTick_Handler+0x3c>)
   1ed2c:	4798      	blx	r3
}
   1ed2e:	46c0      	nop			; (mov r8, r8)
   1ed30:	46bd      	mov	sp, r7
   1ed32:	b002      	add	sp, #8
   1ed34:	bd80      	pop	{r7, pc}
   1ed36:	46c0      	nop			; (mov r8, r8)
   1ed38:	0001eca5 	.word	0x0001eca5
   1ed3c:	00020209 	.word	0x00020209
   1ed40:	e000ed04 	.word	0xe000ed04
   1ed44:	0001ecb1 	.word	0x0001ecb1

0001ed48 <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
   1ed48:	b5b0      	push	{r4, r5, r7, lr}
   1ed4a:	af00      	add	r7, sp, #0
	/* Stop and reset the SysTick. */
	*(portNVIC_SYSTICK_CTRL) = 0UL;
   1ed4c:	4b0a      	ldr	r3, [pc, #40]	; (1ed78 <prvSetupTimerInterrupt+0x30>)
   1ed4e:	2200      	movs	r2, #0
   1ed50:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSTICK_CURRENT_VALUE) = 0UL;
   1ed52:	4b0a      	ldr	r3, [pc, #40]	; (1ed7c <prvSetupTimerInterrupt+0x34>)
   1ed54:	2200      	movs	r2, #0
   1ed56:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
   1ed58:	4c09      	ldr	r4, [pc, #36]	; (1ed80 <prvSetupTimerInterrupt+0x38>)
   1ed5a:	4b0a      	ldr	r3, [pc, #40]	; (1ed84 <prvSetupTimerInterrupt+0x3c>)
   1ed5c:	4798      	blx	r3
   1ed5e:	4b0a      	ldr	r3, [pc, #40]	; (1ed88 <prvSetupTimerInterrupt+0x40>)
   1ed60:	22fa      	movs	r2, #250	; 0xfa
   1ed62:	0091      	lsls	r1, r2, #2
   1ed64:	4798      	blx	r3
   1ed66:	0003      	movs	r3, r0
   1ed68:	3b01      	subs	r3, #1
   1ed6a:	6023      	str	r3, [r4, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
   1ed6c:	4b02      	ldr	r3, [pc, #8]	; (1ed78 <prvSetupTimerInterrupt+0x30>)
   1ed6e:	2207      	movs	r2, #7
   1ed70:	601a      	str	r2, [r3, #0]
}
   1ed72:	46c0      	nop			; (mov r8, r8)
   1ed74:	46bd      	mov	sp, r7
   1ed76:	bdb0      	pop	{r4, r5, r7, pc}
   1ed78:	e000e010 	.word	0xe000e010
   1ed7c:	e000e018 	.word	0xe000e018
   1ed80:	e000e014 	.word	0xe000e014
   1ed84:	0001eae5 	.word	0x0001eae5
   1ed88:	000262e1 	.word	0x000262e1

0001ed8c <pvPortMalloc>:
#endif

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
   1ed8c:	b580      	push	{r7, lr}
   1ed8e:	b084      	sub	sp, #16
   1ed90:	af00      	add	r7, sp, #0
   1ed92:	6078      	str	r0, [r7, #4]
void *pvReturn;

	vTaskSuspendAll();
   1ed94:	4b07      	ldr	r3, [pc, #28]	; (1edb4 <pvPortMalloc+0x28>)
   1ed96:	4798      	blx	r3
	{
		pvReturn = malloc( xWantedSize );
   1ed98:	687b      	ldr	r3, [r7, #4]
   1ed9a:	0018      	movs	r0, r3
   1ed9c:	4b06      	ldr	r3, [pc, #24]	; (1edb8 <pvPortMalloc+0x2c>)
   1ed9e:	4798      	blx	r3
   1eda0:	0003      	movs	r3, r0
   1eda2:	60fb      	str	r3, [r7, #12]
		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
   1eda4:	4b05      	ldr	r3, [pc, #20]	; (1edbc <pvPortMalloc+0x30>)
   1eda6:	4798      	blx	r3
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
   1eda8:	68fb      	ldr	r3, [r7, #12]
}
   1edaa:	0018      	movs	r0, r3
   1edac:	46bd      	mov	sp, r7
   1edae:	b004      	add	sp, #16
   1edb0:	bd80      	pop	{r7, pc}
   1edb2:	46c0      	nop			; (mov r8, r8)
   1edb4:	00020081 	.word	0x00020081
   1edb8:	00028ad5 	.word	0x00028ad5
   1edbc:	00020099 	.word	0x00020099

0001edc0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
   1edc0:	b580      	push	{r7, lr}
   1edc2:	b082      	sub	sp, #8
   1edc4:	af00      	add	r7, sp, #0
   1edc6:	6078      	str	r0, [r7, #4]
	if( pv )
   1edc8:	687b      	ldr	r3, [r7, #4]
   1edca:	2b00      	cmp	r3, #0
   1edcc:	d007      	beq.n	1edde <vPortFree+0x1e>
	{
		vTaskSuspendAll();
   1edce:	4b06      	ldr	r3, [pc, #24]	; (1ede8 <vPortFree+0x28>)
   1edd0:	4798      	blx	r3
		{
			free( pv );
   1edd2:	687b      	ldr	r3, [r7, #4]
   1edd4:	0018      	movs	r0, r3
   1edd6:	4b05      	ldr	r3, [pc, #20]	; (1edec <vPortFree+0x2c>)
   1edd8:	4798      	blx	r3
			traceFREE( pv, 0 );
		}
		( void ) xTaskResumeAll();
   1edda:	4b05      	ldr	r3, [pc, #20]	; (1edf0 <vPortFree+0x30>)
   1eddc:	4798      	blx	r3
	}
}
   1edde:	46c0      	nop			; (mov r8, r8)
   1ede0:	46bd      	mov	sp, r7
   1ede2:	b002      	add	sp, #8
   1ede4:	bd80      	pop	{r7, pc}
   1ede6:	46c0      	nop			; (mov r8, r8)
   1ede8:	00020081 	.word	0x00020081
   1edec:	00028ae9 	.word	0x00028ae9
   1edf0:	00020099 	.word	0x00020099

0001edf4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
   1edf4:	b580      	push	{r7, lr}
   1edf6:	b082      	sub	sp, #8
   1edf8:	af00      	add	r7, sp, #0
   1edfa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   1edfc:	687b      	ldr	r3, [r7, #4]
   1edfe:	3308      	adds	r3, #8
   1ee00:	001a      	movs	r2, r3
   1ee02:	687b      	ldr	r3, [r7, #4]
   1ee04:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
   1ee06:	687b      	ldr	r3, [r7, #4]
   1ee08:	2201      	movs	r2, #1
   1ee0a:	4252      	negs	r2, r2
   1ee0c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   1ee0e:	687b      	ldr	r3, [r7, #4]
   1ee10:	3308      	adds	r3, #8
   1ee12:	001a      	movs	r2, r3
   1ee14:	687b      	ldr	r3, [r7, #4]
   1ee16:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   1ee18:	687b      	ldr	r3, [r7, #4]
   1ee1a:	3308      	adds	r3, #8
   1ee1c:	001a      	movs	r2, r3
   1ee1e:	687b      	ldr	r3, [r7, #4]
   1ee20:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
   1ee22:	687b      	ldr	r3, [r7, #4]
   1ee24:	2200      	movs	r2, #0
   1ee26:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
   1ee28:	46c0      	nop			; (mov r8, r8)
   1ee2a:	46bd      	mov	sp, r7
   1ee2c:	b002      	add	sp, #8
   1ee2e:	bd80      	pop	{r7, pc}

0001ee30 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
   1ee30:	b580      	push	{r7, lr}
   1ee32:	b082      	sub	sp, #8
   1ee34:	af00      	add	r7, sp, #0
   1ee36:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
   1ee38:	687b      	ldr	r3, [r7, #4]
   1ee3a:	2200      	movs	r2, #0
   1ee3c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
   1ee3e:	46c0      	nop			; (mov r8, r8)
   1ee40:	46bd      	mov	sp, r7
   1ee42:	b002      	add	sp, #8
   1ee44:	bd80      	pop	{r7, pc}

0001ee46 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
   1ee46:	b580      	push	{r7, lr}
   1ee48:	b084      	sub	sp, #16
   1ee4a:	af00      	add	r7, sp, #0
   1ee4c:	6078      	str	r0, [r7, #4]
   1ee4e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
   1ee50:	687b      	ldr	r3, [r7, #4]
   1ee52:	685b      	ldr	r3, [r3, #4]
   1ee54:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
   1ee56:	683b      	ldr	r3, [r7, #0]
   1ee58:	68fa      	ldr	r2, [r7, #12]
   1ee5a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
   1ee5c:	68fb      	ldr	r3, [r7, #12]
   1ee5e:	689a      	ldr	r2, [r3, #8]
   1ee60:	683b      	ldr	r3, [r7, #0]
   1ee62:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
   1ee64:	68fb      	ldr	r3, [r7, #12]
   1ee66:	689b      	ldr	r3, [r3, #8]
   1ee68:	683a      	ldr	r2, [r7, #0]
   1ee6a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
   1ee6c:	68fb      	ldr	r3, [r7, #12]
   1ee6e:	683a      	ldr	r2, [r7, #0]
   1ee70:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   1ee72:	683b      	ldr	r3, [r7, #0]
   1ee74:	687a      	ldr	r2, [r7, #4]
   1ee76:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
   1ee78:	687b      	ldr	r3, [r7, #4]
   1ee7a:	681b      	ldr	r3, [r3, #0]
   1ee7c:	1c5a      	adds	r2, r3, #1
   1ee7e:	687b      	ldr	r3, [r7, #4]
   1ee80:	601a      	str	r2, [r3, #0]
}
   1ee82:	46c0      	nop			; (mov r8, r8)
   1ee84:	46bd      	mov	sp, r7
   1ee86:	b004      	add	sp, #16
   1ee88:	bd80      	pop	{r7, pc}

0001ee8a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
   1ee8a:	b580      	push	{r7, lr}
   1ee8c:	b084      	sub	sp, #16
   1ee8e:	af00      	add	r7, sp, #0
   1ee90:	6078      	str	r0, [r7, #4]
   1ee92:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
   1ee94:	683b      	ldr	r3, [r7, #0]
   1ee96:	681b      	ldr	r3, [r3, #0]
   1ee98:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
   1ee9a:	68bb      	ldr	r3, [r7, #8]
   1ee9c:	3301      	adds	r3, #1
   1ee9e:	d103      	bne.n	1eea8 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
   1eea0:	687b      	ldr	r3, [r7, #4]
   1eea2:	691b      	ldr	r3, [r3, #16]
   1eea4:	60fb      	str	r3, [r7, #12]
   1eea6:	e00c      	b.n	1eec2 <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   1eea8:	687b      	ldr	r3, [r7, #4]
   1eeaa:	3308      	adds	r3, #8
   1eeac:	60fb      	str	r3, [r7, #12]
   1eeae:	e002      	b.n	1eeb6 <vListInsert+0x2c>
   1eeb0:	68fb      	ldr	r3, [r7, #12]
   1eeb2:	685b      	ldr	r3, [r3, #4]
   1eeb4:	60fb      	str	r3, [r7, #12]
   1eeb6:	68fb      	ldr	r3, [r7, #12]
   1eeb8:	685b      	ldr	r3, [r3, #4]
   1eeba:	681a      	ldr	r2, [r3, #0]
   1eebc:	68bb      	ldr	r3, [r7, #8]
   1eebe:	429a      	cmp	r2, r3
   1eec0:	d9f6      	bls.n	1eeb0 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
   1eec2:	68fb      	ldr	r3, [r7, #12]
   1eec4:	685a      	ldr	r2, [r3, #4]
   1eec6:	683b      	ldr	r3, [r7, #0]
   1eec8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
   1eeca:	683b      	ldr	r3, [r7, #0]
   1eecc:	685b      	ldr	r3, [r3, #4]
   1eece:	683a      	ldr	r2, [r7, #0]
   1eed0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
   1eed2:	683b      	ldr	r3, [r7, #0]
   1eed4:	68fa      	ldr	r2, [r7, #12]
   1eed6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
   1eed8:	68fb      	ldr	r3, [r7, #12]
   1eeda:	683a      	ldr	r2, [r7, #0]
   1eedc:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   1eede:	683b      	ldr	r3, [r7, #0]
   1eee0:	687a      	ldr	r2, [r7, #4]
   1eee2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
   1eee4:	687b      	ldr	r3, [r7, #4]
   1eee6:	681b      	ldr	r3, [r3, #0]
   1eee8:	1c5a      	adds	r2, r3, #1
   1eeea:	687b      	ldr	r3, [r7, #4]
   1eeec:	601a      	str	r2, [r3, #0]
}
   1eeee:	46c0      	nop			; (mov r8, r8)
   1eef0:	46bd      	mov	sp, r7
   1eef2:	b004      	add	sp, #16
   1eef4:	bd80      	pop	{r7, pc}

0001eef6 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
   1eef6:	b580      	push	{r7, lr}
   1eef8:	b084      	sub	sp, #16
   1eefa:	af00      	add	r7, sp, #0
   1eefc:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
   1eefe:	687b      	ldr	r3, [r7, #4]
   1ef00:	691b      	ldr	r3, [r3, #16]
   1ef02:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
   1ef04:	687b      	ldr	r3, [r7, #4]
   1ef06:	685b      	ldr	r3, [r3, #4]
   1ef08:	687a      	ldr	r2, [r7, #4]
   1ef0a:	6892      	ldr	r2, [r2, #8]
   1ef0c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
   1ef0e:	687b      	ldr	r3, [r7, #4]
   1ef10:	689b      	ldr	r3, [r3, #8]
   1ef12:	687a      	ldr	r2, [r7, #4]
   1ef14:	6852      	ldr	r2, [r2, #4]
   1ef16:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
   1ef18:	68fb      	ldr	r3, [r7, #12]
   1ef1a:	685a      	ldr	r2, [r3, #4]
   1ef1c:	687b      	ldr	r3, [r7, #4]
   1ef1e:	429a      	cmp	r2, r3
   1ef20:	d103      	bne.n	1ef2a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
   1ef22:	687b      	ldr	r3, [r7, #4]
   1ef24:	689a      	ldr	r2, [r3, #8]
   1ef26:	68fb      	ldr	r3, [r7, #12]
   1ef28:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
   1ef2a:	687b      	ldr	r3, [r7, #4]
   1ef2c:	2200      	movs	r2, #0
   1ef2e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
   1ef30:	68fb      	ldr	r3, [r7, #12]
   1ef32:	681b      	ldr	r3, [r3, #0]
   1ef34:	1e5a      	subs	r2, r3, #1
   1ef36:	68fb      	ldr	r3, [r7, #12]
   1ef38:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
   1ef3a:	68fb      	ldr	r3, [r7, #12]
   1ef3c:	681b      	ldr	r3, [r3, #0]
}
   1ef3e:	0018      	movs	r0, r3
   1ef40:	46bd      	mov	sp, r7
   1ef42:	b004      	add	sp, #16
   1ef44:	bd80      	pop	{r7, pc}
	...

0001ef48 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
   1ef48:	b580      	push	{r7, lr}
   1ef4a:	b084      	sub	sp, #16
   1ef4c:	af00      	add	r7, sp, #0
   1ef4e:	6078      	str	r0, [r7, #4]
   1ef50:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1ef52:	687b      	ldr	r3, [r7, #4]
   1ef54:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
   1ef56:	68fb      	ldr	r3, [r7, #12]
   1ef58:	2b00      	cmp	r3, #0
   1ef5a:	d101      	bne.n	1ef60 <xQueueGenericReset+0x18>
   1ef5c:	b672      	cpsid	i
   1ef5e:	e7fe      	b.n	1ef5e <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
   1ef60:	4b23      	ldr	r3, [pc, #140]	; (1eff0 <xQueueGenericReset+0xa8>)
   1ef62:	4798      	blx	r3
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
   1ef64:	68fb      	ldr	r3, [r7, #12]
   1ef66:	681a      	ldr	r2, [r3, #0]
   1ef68:	68fb      	ldr	r3, [r7, #12]
   1ef6a:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
   1ef6c:	68fb      	ldr	r3, [r7, #12]
   1ef6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1ef70:	434b      	muls	r3, r1
   1ef72:	18d2      	adds	r2, r2, r3
   1ef74:	68fb      	ldr	r3, [r7, #12]
   1ef76:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
   1ef78:	68fb      	ldr	r3, [r7, #12]
   1ef7a:	2200      	movs	r2, #0
   1ef7c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
   1ef7e:	68fb      	ldr	r3, [r7, #12]
   1ef80:	681a      	ldr	r2, [r3, #0]
   1ef82:	68fb      	ldr	r3, [r7, #12]
   1ef84:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
   1ef86:	68fb      	ldr	r3, [r7, #12]
   1ef88:	681a      	ldr	r2, [r3, #0]
   1ef8a:	68fb      	ldr	r3, [r7, #12]
   1ef8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1ef8e:	1e59      	subs	r1, r3, #1
   1ef90:	68fb      	ldr	r3, [r7, #12]
   1ef92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1ef94:	434b      	muls	r3, r1
   1ef96:	18d2      	adds	r2, r2, r3
   1ef98:	68fb      	ldr	r3, [r7, #12]
   1ef9a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
   1ef9c:	68fb      	ldr	r3, [r7, #12]
   1ef9e:	2244      	movs	r2, #68	; 0x44
   1efa0:	21ff      	movs	r1, #255	; 0xff
   1efa2:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
   1efa4:	68fb      	ldr	r3, [r7, #12]
   1efa6:	2245      	movs	r2, #69	; 0x45
   1efa8:	21ff      	movs	r1, #255	; 0xff
   1efaa:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
   1efac:	683b      	ldr	r3, [r7, #0]
   1efae:	2b00      	cmp	r3, #0
   1efb0:	d10d      	bne.n	1efce <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   1efb2:	68fb      	ldr	r3, [r7, #12]
   1efb4:	691b      	ldr	r3, [r3, #16]
   1efb6:	2b00      	cmp	r3, #0
   1efb8:	d013      	beq.n	1efe2 <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1efba:	68fb      	ldr	r3, [r7, #12]
   1efbc:	3310      	adds	r3, #16
   1efbe:	0018      	movs	r0, r3
   1efc0:	4b0c      	ldr	r3, [pc, #48]	; (1eff4 <xQueueGenericReset+0xac>)
   1efc2:	4798      	blx	r3
   1efc4:	1e03      	subs	r3, r0, #0
   1efc6:	d00c      	beq.n	1efe2 <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
   1efc8:	4b0b      	ldr	r3, [pc, #44]	; (1eff8 <xQueueGenericReset+0xb0>)
   1efca:	4798      	blx	r3
   1efcc:	e009      	b.n	1efe2 <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
   1efce:	68fb      	ldr	r3, [r7, #12]
   1efd0:	3310      	adds	r3, #16
   1efd2:	0018      	movs	r0, r3
   1efd4:	4b09      	ldr	r3, [pc, #36]	; (1effc <xQueueGenericReset+0xb4>)
   1efd6:	4798      	blx	r3
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
   1efd8:	68fb      	ldr	r3, [r7, #12]
   1efda:	3324      	adds	r3, #36	; 0x24
   1efdc:	0018      	movs	r0, r3
   1efde:	4b07      	ldr	r3, [pc, #28]	; (1effc <xQueueGenericReset+0xb4>)
   1efe0:	4798      	blx	r3
		}
	}
	taskEXIT_CRITICAL();
   1efe2:	4b07      	ldr	r3, [pc, #28]	; (1f000 <xQueueGenericReset+0xb8>)
   1efe4:	4798      	blx	r3

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
   1efe6:	2301      	movs	r3, #1
}
   1efe8:	0018      	movs	r0, r3
   1efea:	46bd      	mov	sp, r7
   1efec:	b004      	add	sp, #16
   1efee:	bd80      	pop	{r7, pc}
   1eff0:	0001ec51 	.word	0x0001ec51
   1eff4:	000204b9 	.word	0x000204b9
   1eff8:	0001ec31 	.word	0x0001ec31
   1effc:	0001edf5 	.word	0x0001edf5
   1f000:	0001ec75 	.word	0x0001ec75

0001f004 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
   1f004:	b590      	push	{r4, r7, lr}
   1f006:	b08b      	sub	sp, #44	; 0x2c
   1f008:	af02      	add	r7, sp, #8
   1f00a:	60f8      	str	r0, [r7, #12]
   1f00c:	60b9      	str	r1, [r7, #8]
   1f00e:	1dfb      	adds	r3, r7, #7
   1f010:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
   1f012:	68fb      	ldr	r3, [r7, #12]
   1f014:	2b00      	cmp	r3, #0
   1f016:	d101      	bne.n	1f01c <xQueueGenericCreate+0x18>
   1f018:	b672      	cpsid	i
   1f01a:	e7fe      	b.n	1f01a <xQueueGenericCreate+0x16>

		if( uxItemSize == ( UBaseType_t ) 0 )
   1f01c:	68bb      	ldr	r3, [r7, #8]
   1f01e:	2b00      	cmp	r3, #0
   1f020:	d102      	bne.n	1f028 <xQueueGenericCreate+0x24>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
   1f022:	2300      	movs	r3, #0
   1f024:	61fb      	str	r3, [r7, #28]
   1f026:	e003      	b.n	1f030 <xQueueGenericCreate+0x2c>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1f028:	68fb      	ldr	r3, [r7, #12]
   1f02a:	68ba      	ldr	r2, [r7, #8]
   1f02c:	4353      	muls	r3, r2
   1f02e:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
   1f030:	69fb      	ldr	r3, [r7, #28]
   1f032:	334c      	adds	r3, #76	; 0x4c
   1f034:	0018      	movs	r0, r3
   1f036:	4b0c      	ldr	r3, [pc, #48]	; (1f068 <xQueueGenericCreate+0x64>)
   1f038:	4798      	blx	r3
   1f03a:	0003      	movs	r3, r0
   1f03c:	61bb      	str	r3, [r7, #24]

		if( pxNewQueue != NULL )
   1f03e:	69bb      	ldr	r3, [r7, #24]
   1f040:	2b00      	cmp	r3, #0
   1f042:	d00c      	beq.n	1f05e <xQueueGenericCreate+0x5a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
   1f044:	69bb      	ldr	r3, [r7, #24]
   1f046:	334c      	adds	r3, #76	; 0x4c
   1f048:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
   1f04a:	1dfb      	adds	r3, r7, #7
   1f04c:	781c      	ldrb	r4, [r3, #0]
   1f04e:	697a      	ldr	r2, [r7, #20]
   1f050:	68b9      	ldr	r1, [r7, #8]
   1f052:	68f8      	ldr	r0, [r7, #12]
   1f054:	69bb      	ldr	r3, [r7, #24]
   1f056:	9300      	str	r3, [sp, #0]
   1f058:	0023      	movs	r3, r4
   1f05a:	4c04      	ldr	r4, [pc, #16]	; (1f06c <xQueueGenericCreate+0x68>)
   1f05c:	47a0      	blx	r4
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
   1f05e:	69bb      	ldr	r3, [r7, #24]
	}
   1f060:	0018      	movs	r0, r3
   1f062:	46bd      	mov	sp, r7
   1f064:	b009      	add	sp, #36	; 0x24
   1f066:	bd90      	pop	{r4, r7, pc}
   1f068:	0001ed8d 	.word	0x0001ed8d
   1f06c:	0001f071 	.word	0x0001f071

0001f070 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
   1f070:	b580      	push	{r7, lr}
   1f072:	b084      	sub	sp, #16
   1f074:	af00      	add	r7, sp, #0
   1f076:	60f8      	str	r0, [r7, #12]
   1f078:	60b9      	str	r1, [r7, #8]
   1f07a:	607a      	str	r2, [r7, #4]
   1f07c:	001a      	movs	r2, r3
   1f07e:	1cfb      	adds	r3, r7, #3
   1f080:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
   1f082:	68bb      	ldr	r3, [r7, #8]
   1f084:	2b00      	cmp	r3, #0
   1f086:	d103      	bne.n	1f090 <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
   1f088:	69bb      	ldr	r3, [r7, #24]
   1f08a:	69ba      	ldr	r2, [r7, #24]
   1f08c:	601a      	str	r2, [r3, #0]
   1f08e:	e002      	b.n	1f096 <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
   1f090:	69bb      	ldr	r3, [r7, #24]
   1f092:	687a      	ldr	r2, [r7, #4]
   1f094:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
   1f096:	69bb      	ldr	r3, [r7, #24]
   1f098:	68fa      	ldr	r2, [r7, #12]
   1f09a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
   1f09c:	69bb      	ldr	r3, [r7, #24]
   1f09e:	68ba      	ldr	r2, [r7, #8]
   1f0a0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
   1f0a2:	69bb      	ldr	r3, [r7, #24]
   1f0a4:	2101      	movs	r1, #1
   1f0a6:	0018      	movs	r0, r3
   1f0a8:	4b04      	ldr	r3, [pc, #16]	; (1f0bc <prvInitialiseNewQueue+0x4c>)
   1f0aa:	4798      	blx	r3
	}
	#endif /* configUSE_TRACE_FACILITY */

	#if( configUSE_QUEUE_SETS == 1 )
	{
		pxNewQueue->pxQueueSetContainer = NULL;
   1f0ac:	69bb      	ldr	r3, [r7, #24]
   1f0ae:	2200      	movs	r2, #0
   1f0b0:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
   1f0b2:	46c0      	nop			; (mov r8, r8)
   1f0b4:	46bd      	mov	sp, r7
   1f0b6:	b004      	add	sp, #16
   1f0b8:	bd80      	pop	{r7, pc}
   1f0ba:	46c0      	nop			; (mov r8, r8)
   1f0bc:	0001ef49 	.word	0x0001ef49

0001f0c0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
   1f0c0:	b580      	push	{r7, lr}
   1f0c2:	b08a      	sub	sp, #40	; 0x28
   1f0c4:	af00      	add	r7, sp, #0
   1f0c6:	60f8      	str	r0, [r7, #12]
   1f0c8:	60b9      	str	r1, [r7, #8]
   1f0ca:	607a      	str	r2, [r7, #4]
   1f0cc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
   1f0ce:	2300      	movs	r3, #0
   1f0d0:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1f0d2:	68fb      	ldr	r3, [r7, #12]
   1f0d4:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
   1f0d6:	6a3b      	ldr	r3, [r7, #32]
   1f0d8:	2b00      	cmp	r3, #0
   1f0da:	d101      	bne.n	1f0e0 <xQueueGenericSend+0x20>
   1f0dc:	b672      	cpsid	i
   1f0de:	e7fe      	b.n	1f0de <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   1f0e0:	68bb      	ldr	r3, [r7, #8]
   1f0e2:	2b00      	cmp	r3, #0
   1f0e4:	d103      	bne.n	1f0ee <xQueueGenericSend+0x2e>
   1f0e6:	6a3b      	ldr	r3, [r7, #32]
   1f0e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1f0ea:	2b00      	cmp	r3, #0
   1f0ec:	d101      	bne.n	1f0f2 <xQueueGenericSend+0x32>
   1f0ee:	2301      	movs	r3, #1
   1f0f0:	e000      	b.n	1f0f4 <xQueueGenericSend+0x34>
   1f0f2:	2300      	movs	r3, #0
   1f0f4:	2b00      	cmp	r3, #0
   1f0f6:	d101      	bne.n	1f0fc <xQueueGenericSend+0x3c>
   1f0f8:	b672      	cpsid	i
   1f0fa:	e7fe      	b.n	1f0fa <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
   1f0fc:	683b      	ldr	r3, [r7, #0]
   1f0fe:	2b02      	cmp	r3, #2
   1f100:	d103      	bne.n	1f10a <xQueueGenericSend+0x4a>
   1f102:	6a3b      	ldr	r3, [r7, #32]
   1f104:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1f106:	2b01      	cmp	r3, #1
   1f108:	d101      	bne.n	1f10e <xQueueGenericSend+0x4e>
   1f10a:	2301      	movs	r3, #1
   1f10c:	e000      	b.n	1f110 <xQueueGenericSend+0x50>
   1f10e:	2300      	movs	r3, #0
   1f110:	2b00      	cmp	r3, #0
   1f112:	d101      	bne.n	1f118 <xQueueGenericSend+0x58>
   1f114:	b672      	cpsid	i
   1f116:	e7fe      	b.n	1f116 <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   1f118:	4b53      	ldr	r3, [pc, #332]	; (1f268 <xQueueGenericSend+0x1a8>)
   1f11a:	4798      	blx	r3
   1f11c:	1e03      	subs	r3, r0, #0
   1f11e:	d102      	bne.n	1f126 <xQueueGenericSend+0x66>
   1f120:	687b      	ldr	r3, [r7, #4]
   1f122:	2b00      	cmp	r3, #0
   1f124:	d101      	bne.n	1f12a <xQueueGenericSend+0x6a>
   1f126:	2301      	movs	r3, #1
   1f128:	e000      	b.n	1f12c <xQueueGenericSend+0x6c>
   1f12a:	2300      	movs	r3, #0
   1f12c:	2b00      	cmp	r3, #0
   1f12e:	d101      	bne.n	1f134 <xQueueGenericSend+0x74>
   1f130:	b672      	cpsid	i
   1f132:	e7fe      	b.n	1f132 <xQueueGenericSend+0x72>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
   1f134:	4b4d      	ldr	r3, [pc, #308]	; (1f26c <xQueueGenericSend+0x1ac>)
   1f136:	4798      	blx	r3
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
   1f138:	6a3b      	ldr	r3, [r7, #32]
   1f13a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1f13c:	6a3b      	ldr	r3, [r7, #32]
   1f13e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1f140:	429a      	cmp	r2, r3
   1f142:	d302      	bcc.n	1f14a <xQueueGenericSend+0x8a>
   1f144:	683b      	ldr	r3, [r7, #0]
   1f146:	2b02      	cmp	r3, #2
   1f148:	d12d      	bne.n	1f1a6 <xQueueGenericSend+0xe6>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   1f14a:	683a      	ldr	r2, [r7, #0]
   1f14c:	68b9      	ldr	r1, [r7, #8]
   1f14e:	6a3b      	ldr	r3, [r7, #32]
   1f150:	0018      	movs	r0, r3
   1f152:	4b47      	ldr	r3, [pc, #284]	; (1f270 <xQueueGenericSend+0x1b0>)
   1f154:	4798      	blx	r3
   1f156:	0003      	movs	r3, r0
   1f158:	61fb      	str	r3, [r7, #28]

				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
   1f15a:	6a3b      	ldr	r3, [r7, #32]
   1f15c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1f15e:	2b00      	cmp	r3, #0
   1f160:	d00a      	beq.n	1f178 <xQueueGenericSend+0xb8>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
   1f162:	683a      	ldr	r2, [r7, #0]
   1f164:	6a3b      	ldr	r3, [r7, #32]
   1f166:	0011      	movs	r1, r2
   1f168:	0018      	movs	r0, r3
   1f16a:	4b42      	ldr	r3, [pc, #264]	; (1f274 <xQueueGenericSend+0x1b4>)
   1f16c:	4798      	blx	r3
   1f16e:	1e03      	subs	r3, r0, #0
   1f170:	d015      	beq.n	1f19e <xQueueGenericSend+0xde>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock. A context switch is required. */
							queueYIELD_IF_USING_PREEMPTION();
   1f172:	4b41      	ldr	r3, [pc, #260]	; (1f278 <xQueueGenericSend+0x1b8>)
   1f174:	4798      	blx	r3
   1f176:	e012      	b.n	1f19e <xQueueGenericSend+0xde>
					}
					else
					{
						/* If there was a task waiting for data to arrive on the
						queue then unblock it now. */
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   1f178:	6a3b      	ldr	r3, [r7, #32]
   1f17a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1f17c:	2b00      	cmp	r3, #0
   1f17e:	d009      	beq.n	1f194 <xQueueGenericSend+0xd4>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1f180:	6a3b      	ldr	r3, [r7, #32]
   1f182:	3324      	adds	r3, #36	; 0x24
   1f184:	0018      	movs	r0, r3
   1f186:	4b3d      	ldr	r3, [pc, #244]	; (1f27c <xQueueGenericSend+0x1bc>)
   1f188:	4798      	blx	r3
   1f18a:	1e03      	subs	r3, r0, #0
   1f18c:	d007      	beq.n	1f19e <xQueueGenericSend+0xde>
							{
								/* The unblocked task has a priority higher than
								our own so yield immediately.  Yes it is ok to
								do this from within the critical section - the
								kernel takes care of that. */
								queueYIELD_IF_USING_PREEMPTION();
   1f18e:	4b3a      	ldr	r3, [pc, #232]	; (1f278 <xQueueGenericSend+0x1b8>)
   1f190:	4798      	blx	r3
   1f192:	e004      	b.n	1f19e <xQueueGenericSend+0xde>
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
						}
						else if( xYieldRequired != pdFALSE )
   1f194:	69fb      	ldr	r3, [r7, #28]
   1f196:	2b00      	cmp	r3, #0
   1f198:	d001      	beq.n	1f19e <xQueueGenericSend+0xde>
						{
							/* This path is a special case that will only get
							executed if the task was holding multiple mutexes
							and the mutexes were given back in an order that is
							different to that in which they were taken. */
							queueYIELD_IF_USING_PREEMPTION();
   1f19a:	4b37      	ldr	r3, [pc, #220]	; (1f278 <xQueueGenericSend+0x1b8>)
   1f19c:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
   1f19e:	4b38      	ldr	r3, [pc, #224]	; (1f280 <xQueueGenericSend+0x1c0>)
   1f1a0:	4798      	blx	r3
				return pdPASS;
   1f1a2:	2301      	movs	r3, #1
   1f1a4:	e05c      	b.n	1f260 <xQueueGenericSend+0x1a0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
   1f1a6:	687b      	ldr	r3, [r7, #4]
   1f1a8:	2b00      	cmp	r3, #0
   1f1aa:	d103      	bne.n	1f1b4 <xQueueGenericSend+0xf4>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   1f1ac:	4b34      	ldr	r3, [pc, #208]	; (1f280 <xQueueGenericSend+0x1c0>)
   1f1ae:	4798      	blx	r3

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
   1f1b0:	2300      	movs	r3, #0
   1f1b2:	e055      	b.n	1f260 <xQueueGenericSend+0x1a0>
				}
				else if( xEntryTimeSet == pdFALSE )
   1f1b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1f1b6:	2b00      	cmp	r3, #0
   1f1b8:	d106      	bne.n	1f1c8 <xQueueGenericSend+0x108>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
   1f1ba:	2314      	movs	r3, #20
   1f1bc:	18fb      	adds	r3, r7, r3
   1f1be:	0018      	movs	r0, r3
   1f1c0:	4b30      	ldr	r3, [pc, #192]	; (1f284 <xQueueGenericSend+0x1c4>)
   1f1c2:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
   1f1c4:	2301      	movs	r3, #1
   1f1c6:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
   1f1c8:	4b2d      	ldr	r3, [pc, #180]	; (1f280 <xQueueGenericSend+0x1c0>)
   1f1ca:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   1f1cc:	4b2e      	ldr	r3, [pc, #184]	; (1f288 <xQueueGenericSend+0x1c8>)
   1f1ce:	4798      	blx	r3
		prvLockQueue( pxQueue );
   1f1d0:	4b26      	ldr	r3, [pc, #152]	; (1f26c <xQueueGenericSend+0x1ac>)
   1f1d2:	4798      	blx	r3
   1f1d4:	6a3b      	ldr	r3, [r7, #32]
   1f1d6:	2244      	movs	r2, #68	; 0x44
   1f1d8:	5c9b      	ldrb	r3, [r3, r2]
   1f1da:	b25b      	sxtb	r3, r3
   1f1dc:	3301      	adds	r3, #1
   1f1de:	d103      	bne.n	1f1e8 <xQueueGenericSend+0x128>
   1f1e0:	6a3b      	ldr	r3, [r7, #32]
   1f1e2:	2244      	movs	r2, #68	; 0x44
   1f1e4:	2100      	movs	r1, #0
   1f1e6:	5499      	strb	r1, [r3, r2]
   1f1e8:	6a3b      	ldr	r3, [r7, #32]
   1f1ea:	2245      	movs	r2, #69	; 0x45
   1f1ec:	5c9b      	ldrb	r3, [r3, r2]
   1f1ee:	b25b      	sxtb	r3, r3
   1f1f0:	3301      	adds	r3, #1
   1f1f2:	d103      	bne.n	1f1fc <xQueueGenericSend+0x13c>
   1f1f4:	6a3b      	ldr	r3, [r7, #32]
   1f1f6:	2245      	movs	r2, #69	; 0x45
   1f1f8:	2100      	movs	r1, #0
   1f1fa:	5499      	strb	r1, [r3, r2]
   1f1fc:	4b20      	ldr	r3, [pc, #128]	; (1f280 <xQueueGenericSend+0x1c0>)
   1f1fe:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   1f200:	1d3a      	adds	r2, r7, #4
   1f202:	2314      	movs	r3, #20
   1f204:	18fb      	adds	r3, r7, r3
   1f206:	0011      	movs	r1, r2
   1f208:	0018      	movs	r0, r3
   1f20a:	4b20      	ldr	r3, [pc, #128]	; (1f28c <xQueueGenericSend+0x1cc>)
   1f20c:	4798      	blx	r3
   1f20e:	1e03      	subs	r3, r0, #0
   1f210:	d11f      	bne.n	1f252 <xQueueGenericSend+0x192>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
   1f212:	6a3b      	ldr	r3, [r7, #32]
   1f214:	0018      	movs	r0, r3
   1f216:	4b1e      	ldr	r3, [pc, #120]	; (1f290 <xQueueGenericSend+0x1d0>)
   1f218:	4798      	blx	r3
   1f21a:	1e03      	subs	r3, r0, #0
   1f21c:	d012      	beq.n	1f244 <xQueueGenericSend+0x184>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
   1f21e:	6a3b      	ldr	r3, [r7, #32]
   1f220:	3310      	adds	r3, #16
   1f222:	687a      	ldr	r2, [r7, #4]
   1f224:	0011      	movs	r1, r2
   1f226:	0018      	movs	r0, r3
   1f228:	4b1a      	ldr	r3, [pc, #104]	; (1f294 <xQueueGenericSend+0x1d4>)
   1f22a:	4798      	blx	r3
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
   1f22c:	6a3b      	ldr	r3, [r7, #32]
   1f22e:	0018      	movs	r0, r3
   1f230:	4b19      	ldr	r3, [pc, #100]	; (1f298 <xQueueGenericSend+0x1d8>)
   1f232:	4798      	blx	r3
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
   1f234:	4b19      	ldr	r3, [pc, #100]	; (1f29c <xQueueGenericSend+0x1dc>)
   1f236:	4798      	blx	r3
   1f238:	1e03      	subs	r3, r0, #0
   1f23a:	d000      	beq.n	1f23e <xQueueGenericSend+0x17e>
   1f23c:	e77a      	b.n	1f134 <xQueueGenericSend+0x74>
				{
					portYIELD_WITHIN_API();
   1f23e:	4b0e      	ldr	r3, [pc, #56]	; (1f278 <xQueueGenericSend+0x1b8>)
   1f240:	4798      	blx	r3
   1f242:	e777      	b.n	1f134 <xQueueGenericSend+0x74>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
   1f244:	6a3b      	ldr	r3, [r7, #32]
   1f246:	0018      	movs	r0, r3
   1f248:	4b13      	ldr	r3, [pc, #76]	; (1f298 <xQueueGenericSend+0x1d8>)
   1f24a:	4798      	blx	r3
				( void ) xTaskResumeAll();
   1f24c:	4b13      	ldr	r3, [pc, #76]	; (1f29c <xQueueGenericSend+0x1dc>)
   1f24e:	4798      	blx	r3
   1f250:	e770      	b.n	1f134 <xQueueGenericSend+0x74>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
   1f252:	6a3b      	ldr	r3, [r7, #32]
   1f254:	0018      	movs	r0, r3
   1f256:	4b10      	ldr	r3, [pc, #64]	; (1f298 <xQueueGenericSend+0x1d8>)
   1f258:	4798      	blx	r3
			( void ) xTaskResumeAll();
   1f25a:	4b10      	ldr	r3, [pc, #64]	; (1f29c <xQueueGenericSend+0x1dc>)
   1f25c:	4798      	blx	r3

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
   1f25e:	2300      	movs	r3, #0
		}
	}
}
   1f260:	0018      	movs	r0, r3
   1f262:	46bd      	mov	sp, r7
   1f264:	b00a      	add	sp, #40	; 0x28
   1f266:	bd80      	pop	{r7, pc}
   1f268:	000207f1 	.word	0x000207f1
   1f26c:	0001ec51 	.word	0x0001ec51
   1f270:	0001f781 	.word	0x0001f781
   1f274:	0001fa85 	.word	0x0001fa85
   1f278:	0001ec31 	.word	0x0001ec31
   1f27c:	000204b9 	.word	0x000204b9
   1f280:	0001ec75 	.word	0x0001ec75
   1f284:	00020579 	.word	0x00020579
   1f288:	00020081 	.word	0x00020081
   1f28c:	000205a1 	.word	0x000205a1
   1f290:	0001f9d5 	.word	0x0001f9d5
   1f294:	00020421 	.word	0x00020421
   1f298:	0001f8b1 	.word	0x0001f8b1
   1f29c:	00020099 	.word	0x00020099

0001f2a0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
   1f2a0:	b580      	push	{r7, lr}
   1f2a2:	b088      	sub	sp, #32
   1f2a4:	af00      	add	r7, sp, #0
   1f2a6:	60f8      	str	r0, [r7, #12]
   1f2a8:	60b9      	str	r1, [r7, #8]
   1f2aa:	607a      	str	r2, [r7, #4]
   1f2ac:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1f2ae:	68fb      	ldr	r3, [r7, #12]
   1f2b0:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
   1f2b2:	69bb      	ldr	r3, [r7, #24]
   1f2b4:	2b00      	cmp	r3, #0
   1f2b6:	d101      	bne.n	1f2bc <xQueueGenericSendFromISR+0x1c>
   1f2b8:	b672      	cpsid	i
   1f2ba:	e7fe      	b.n	1f2ba <xQueueGenericSendFromISR+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   1f2bc:	68bb      	ldr	r3, [r7, #8]
   1f2be:	2b00      	cmp	r3, #0
   1f2c0:	d103      	bne.n	1f2ca <xQueueGenericSendFromISR+0x2a>
   1f2c2:	69bb      	ldr	r3, [r7, #24]
   1f2c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1f2c6:	2b00      	cmp	r3, #0
   1f2c8:	d101      	bne.n	1f2ce <xQueueGenericSendFromISR+0x2e>
   1f2ca:	2301      	movs	r3, #1
   1f2cc:	e000      	b.n	1f2d0 <xQueueGenericSendFromISR+0x30>
   1f2ce:	2300      	movs	r3, #0
   1f2d0:	2b00      	cmp	r3, #0
   1f2d2:	d101      	bne.n	1f2d8 <xQueueGenericSendFromISR+0x38>
   1f2d4:	b672      	cpsid	i
   1f2d6:	e7fe      	b.n	1f2d6 <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
   1f2d8:	683b      	ldr	r3, [r7, #0]
   1f2da:	2b02      	cmp	r3, #2
   1f2dc:	d103      	bne.n	1f2e6 <xQueueGenericSendFromISR+0x46>
   1f2de:	69bb      	ldr	r3, [r7, #24]
   1f2e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1f2e2:	2b01      	cmp	r3, #1
   1f2e4:	d101      	bne.n	1f2ea <xQueueGenericSendFromISR+0x4a>
   1f2e6:	2301      	movs	r3, #1
   1f2e8:	e000      	b.n	1f2ec <xQueueGenericSendFromISR+0x4c>
   1f2ea:	2300      	movs	r3, #0
   1f2ec:	2b00      	cmp	r3, #0
   1f2ee:	d101      	bne.n	1f2f4 <xQueueGenericSendFromISR+0x54>
   1f2f0:	b672      	cpsid	i
   1f2f2:	e7fe      	b.n	1f2f2 <xQueueGenericSendFromISR+0x52>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   1f2f4:	4b2d      	ldr	r3, [pc, #180]	; (1f3ac <xQueueGenericSendFromISR+0x10c>)
   1f2f6:	4798      	blx	r3
   1f2f8:	0003      	movs	r3, r0
   1f2fa:	617b      	str	r3, [r7, #20]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
   1f2fc:	69bb      	ldr	r3, [r7, #24]
   1f2fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1f300:	69bb      	ldr	r3, [r7, #24]
   1f302:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1f304:	429a      	cmp	r2, r3
   1f306:	d302      	bcc.n	1f30e <xQueueGenericSendFromISR+0x6e>
   1f308:	683b      	ldr	r3, [r7, #0]
   1f30a:	2b02      	cmp	r3, #2
   1f30c:	d142      	bne.n	1f394 <xQueueGenericSendFromISR+0xf4>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
   1f30e:	2313      	movs	r3, #19
   1f310:	18fb      	adds	r3, r7, r3
   1f312:	69ba      	ldr	r2, [r7, #24]
   1f314:	2145      	movs	r1, #69	; 0x45
   1f316:	5c52      	ldrb	r2, [r2, r1]
   1f318:	701a      	strb	r2, [r3, #0]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   1f31a:	683a      	ldr	r2, [r7, #0]
   1f31c:	68b9      	ldr	r1, [r7, #8]
   1f31e:	69bb      	ldr	r3, [r7, #24]
   1f320:	0018      	movs	r0, r3
   1f322:	4b23      	ldr	r3, [pc, #140]	; (1f3b0 <xQueueGenericSendFromISR+0x110>)
   1f324:	4798      	blx	r3

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
   1f326:	2313      	movs	r3, #19
   1f328:	18fb      	adds	r3, r7, r3
   1f32a:	781b      	ldrb	r3, [r3, #0]
   1f32c:	b25b      	sxtb	r3, r3
   1f32e:	3301      	adds	r3, #1
   1f330:	d124      	bne.n	1f37c <xQueueGenericSendFromISR+0xdc>
			{
				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
   1f332:	69bb      	ldr	r3, [r7, #24]
   1f334:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1f336:	2b00      	cmp	r3, #0
   1f338:	d00e      	beq.n	1f358 <xQueueGenericSendFromISR+0xb8>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
   1f33a:	683a      	ldr	r2, [r7, #0]
   1f33c:	69bb      	ldr	r3, [r7, #24]
   1f33e:	0011      	movs	r1, r2
   1f340:	0018      	movs	r0, r3
   1f342:	4b1c      	ldr	r3, [pc, #112]	; (1f3b4 <xQueueGenericSendFromISR+0x114>)
   1f344:	4798      	blx	r3
   1f346:	1e03      	subs	r3, r0, #0
   1f348:	d021      	beq.n	1f38e <xQueueGenericSendFromISR+0xee>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock.  A context switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
   1f34a:	687b      	ldr	r3, [r7, #4]
   1f34c:	2b00      	cmp	r3, #0
   1f34e:	d01e      	beq.n	1f38e <xQueueGenericSendFromISR+0xee>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
   1f350:	687b      	ldr	r3, [r7, #4]
   1f352:	2201      	movs	r2, #1
   1f354:	601a      	str	r2, [r3, #0]
   1f356:	e01a      	b.n	1f38e <xQueueGenericSendFromISR+0xee>
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   1f358:	69bb      	ldr	r3, [r7, #24]
   1f35a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1f35c:	2b00      	cmp	r3, #0
   1f35e:	d016      	beq.n	1f38e <xQueueGenericSendFromISR+0xee>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1f360:	69bb      	ldr	r3, [r7, #24]
   1f362:	3324      	adds	r3, #36	; 0x24
   1f364:	0018      	movs	r0, r3
   1f366:	4b14      	ldr	r3, [pc, #80]	; (1f3b8 <xQueueGenericSendFromISR+0x118>)
   1f368:	4798      	blx	r3
   1f36a:	1e03      	subs	r3, r0, #0
   1f36c:	d00f      	beq.n	1f38e <xQueueGenericSendFromISR+0xee>
							{
								/* The task waiting has a higher priority so
								record that a context switch is required. */
								if( pxHigherPriorityTaskWoken != NULL )
   1f36e:	687b      	ldr	r3, [r7, #4]
   1f370:	2b00      	cmp	r3, #0
   1f372:	d00c      	beq.n	1f38e <xQueueGenericSendFromISR+0xee>
								{
									*pxHigherPriorityTaskWoken = pdTRUE;
   1f374:	687b      	ldr	r3, [r7, #4]
   1f376:	2201      	movs	r2, #1
   1f378:	601a      	str	r2, [r3, #0]
   1f37a:	e008      	b.n	1f38e <xQueueGenericSendFromISR+0xee>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
   1f37c:	2313      	movs	r3, #19
   1f37e:	18fb      	adds	r3, r7, r3
   1f380:	781b      	ldrb	r3, [r3, #0]
   1f382:	3301      	adds	r3, #1
   1f384:	b2db      	uxtb	r3, r3
   1f386:	b259      	sxtb	r1, r3
   1f388:	69bb      	ldr	r3, [r7, #24]
   1f38a:	2245      	movs	r2, #69	; 0x45
   1f38c:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
   1f38e:	2301      	movs	r3, #1
   1f390:	61fb      	str	r3, [r7, #28]
		{
   1f392:	e001      	b.n	1f398 <xQueueGenericSendFromISR+0xf8>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
   1f394:	2300      	movs	r3, #0
   1f396:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
   1f398:	697b      	ldr	r3, [r7, #20]
   1f39a:	0018      	movs	r0, r3
   1f39c:	4b07      	ldr	r3, [pc, #28]	; (1f3bc <xQueueGenericSendFromISR+0x11c>)
   1f39e:	4798      	blx	r3

	return xReturn;
   1f3a0:	69fb      	ldr	r3, [r7, #28]
}
   1f3a2:	0018      	movs	r0, r3
   1f3a4:	46bd      	mov	sp, r7
   1f3a6:	b008      	add	sp, #32
   1f3a8:	bd80      	pop	{r7, pc}
   1f3aa:	46c0      	nop			; (mov r8, r8)
   1f3ac:	0001eca5 	.word	0x0001eca5
   1f3b0:	0001f781 	.word	0x0001f781
   1f3b4:	0001fa85 	.word	0x0001fa85
   1f3b8:	000204b9 	.word	0x000204b9
   1f3bc:	0001ecb1 	.word	0x0001ecb1

0001f3c0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
   1f3c0:	b580      	push	{r7, lr}
   1f3c2:	b08a      	sub	sp, #40	; 0x28
   1f3c4:	af00      	add	r7, sp, #0
   1f3c6:	60f8      	str	r0, [r7, #12]
   1f3c8:	60b9      	str	r1, [r7, #8]
   1f3ca:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
   1f3cc:	2300      	movs	r3, #0
   1f3ce:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1f3d0:	68fb      	ldr	r3, [r7, #12]
   1f3d2:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
   1f3d4:	6a3b      	ldr	r3, [r7, #32]
   1f3d6:	2b00      	cmp	r3, #0
   1f3d8:	d101      	bne.n	1f3de <xQueueReceive+0x1e>
   1f3da:	b672      	cpsid	i
   1f3dc:	e7fe      	b.n	1f3dc <xQueueReceive+0x1c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
   1f3de:	68bb      	ldr	r3, [r7, #8]
   1f3e0:	2b00      	cmp	r3, #0
   1f3e2:	d103      	bne.n	1f3ec <xQueueReceive+0x2c>
   1f3e4:	6a3b      	ldr	r3, [r7, #32]
   1f3e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1f3e8:	2b00      	cmp	r3, #0
   1f3ea:	d101      	bne.n	1f3f0 <xQueueReceive+0x30>
   1f3ec:	2301      	movs	r3, #1
   1f3ee:	e000      	b.n	1f3f2 <xQueueReceive+0x32>
   1f3f0:	2300      	movs	r3, #0
   1f3f2:	2b00      	cmp	r3, #0
   1f3f4:	d101      	bne.n	1f3fa <xQueueReceive+0x3a>
   1f3f6:	b672      	cpsid	i
   1f3f8:	e7fe      	b.n	1f3f8 <xQueueReceive+0x38>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   1f3fa:	4b4c      	ldr	r3, [pc, #304]	; (1f52c <xQueueReceive+0x16c>)
   1f3fc:	4798      	blx	r3
   1f3fe:	1e03      	subs	r3, r0, #0
   1f400:	d102      	bne.n	1f408 <xQueueReceive+0x48>
   1f402:	687b      	ldr	r3, [r7, #4]
   1f404:	2b00      	cmp	r3, #0
   1f406:	d101      	bne.n	1f40c <xQueueReceive+0x4c>
   1f408:	2301      	movs	r3, #1
   1f40a:	e000      	b.n	1f40e <xQueueReceive+0x4e>
   1f40c:	2300      	movs	r3, #0
   1f40e:	2b00      	cmp	r3, #0
   1f410:	d101      	bne.n	1f416 <xQueueReceive+0x56>
   1f412:	b672      	cpsid	i
   1f414:	e7fe      	b.n	1f414 <xQueueReceive+0x54>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
   1f416:	4b46      	ldr	r3, [pc, #280]	; (1f530 <xQueueReceive+0x170>)
   1f418:	4798      	blx	r3
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
   1f41a:	6a3b      	ldr	r3, [r7, #32]
   1f41c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1f41e:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
   1f420:	69fb      	ldr	r3, [r7, #28]
   1f422:	2b00      	cmp	r3, #0
   1f424:	d01a      	beq.n	1f45c <xQueueReceive+0x9c>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
   1f426:	68ba      	ldr	r2, [r7, #8]
   1f428:	6a3b      	ldr	r3, [r7, #32]
   1f42a:	0011      	movs	r1, r2
   1f42c:	0018      	movs	r0, r3
   1f42e:	4b41      	ldr	r3, [pc, #260]	; (1f534 <xQueueReceive+0x174>)
   1f430:	4798      	blx	r3
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
   1f432:	69fb      	ldr	r3, [r7, #28]
   1f434:	1e5a      	subs	r2, r3, #1
   1f436:	6a3b      	ldr	r3, [r7, #32]
   1f438:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   1f43a:	6a3b      	ldr	r3, [r7, #32]
   1f43c:	691b      	ldr	r3, [r3, #16]
   1f43e:	2b00      	cmp	r3, #0
   1f440:	d008      	beq.n	1f454 <xQueueReceive+0x94>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1f442:	6a3b      	ldr	r3, [r7, #32]
   1f444:	3310      	adds	r3, #16
   1f446:	0018      	movs	r0, r3
   1f448:	4b3b      	ldr	r3, [pc, #236]	; (1f538 <xQueueReceive+0x178>)
   1f44a:	4798      	blx	r3
   1f44c:	1e03      	subs	r3, r0, #0
   1f44e:	d001      	beq.n	1f454 <xQueueReceive+0x94>
					{
						queueYIELD_IF_USING_PREEMPTION();
   1f450:	4b3a      	ldr	r3, [pc, #232]	; (1f53c <xQueueReceive+0x17c>)
   1f452:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
   1f454:	4b3a      	ldr	r3, [pc, #232]	; (1f540 <xQueueReceive+0x180>)
   1f456:	4798      	blx	r3
				return pdPASS;
   1f458:	2301      	movs	r3, #1
   1f45a:	e062      	b.n	1f522 <xQueueReceive+0x162>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
   1f45c:	687b      	ldr	r3, [r7, #4]
   1f45e:	2b00      	cmp	r3, #0
   1f460:	d103      	bne.n	1f46a <xQueueReceive+0xaa>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   1f462:	4b37      	ldr	r3, [pc, #220]	; (1f540 <xQueueReceive+0x180>)
   1f464:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
   1f466:	2300      	movs	r3, #0
   1f468:	e05b      	b.n	1f522 <xQueueReceive+0x162>
				}
				else if( xEntryTimeSet == pdFALSE )
   1f46a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1f46c:	2b00      	cmp	r3, #0
   1f46e:	d106      	bne.n	1f47e <xQueueReceive+0xbe>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
   1f470:	2314      	movs	r3, #20
   1f472:	18fb      	adds	r3, r7, r3
   1f474:	0018      	movs	r0, r3
   1f476:	4b33      	ldr	r3, [pc, #204]	; (1f544 <xQueueReceive+0x184>)
   1f478:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
   1f47a:	2301      	movs	r3, #1
   1f47c:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
   1f47e:	4b30      	ldr	r3, [pc, #192]	; (1f540 <xQueueReceive+0x180>)
   1f480:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   1f482:	4b31      	ldr	r3, [pc, #196]	; (1f548 <xQueueReceive+0x188>)
   1f484:	4798      	blx	r3
		prvLockQueue( pxQueue );
   1f486:	4b2a      	ldr	r3, [pc, #168]	; (1f530 <xQueueReceive+0x170>)
   1f488:	4798      	blx	r3
   1f48a:	6a3b      	ldr	r3, [r7, #32]
   1f48c:	2244      	movs	r2, #68	; 0x44
   1f48e:	5c9b      	ldrb	r3, [r3, r2]
   1f490:	b25b      	sxtb	r3, r3
   1f492:	3301      	adds	r3, #1
   1f494:	d103      	bne.n	1f49e <xQueueReceive+0xde>
   1f496:	6a3b      	ldr	r3, [r7, #32]
   1f498:	2244      	movs	r2, #68	; 0x44
   1f49a:	2100      	movs	r1, #0
   1f49c:	5499      	strb	r1, [r3, r2]
   1f49e:	6a3b      	ldr	r3, [r7, #32]
   1f4a0:	2245      	movs	r2, #69	; 0x45
   1f4a2:	5c9b      	ldrb	r3, [r3, r2]
   1f4a4:	b25b      	sxtb	r3, r3
   1f4a6:	3301      	adds	r3, #1
   1f4a8:	d103      	bne.n	1f4b2 <xQueueReceive+0xf2>
   1f4aa:	6a3b      	ldr	r3, [r7, #32]
   1f4ac:	2245      	movs	r2, #69	; 0x45
   1f4ae:	2100      	movs	r1, #0
   1f4b0:	5499      	strb	r1, [r3, r2]
   1f4b2:	4b23      	ldr	r3, [pc, #140]	; (1f540 <xQueueReceive+0x180>)
   1f4b4:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   1f4b6:	1d3a      	adds	r2, r7, #4
   1f4b8:	2314      	movs	r3, #20
   1f4ba:	18fb      	adds	r3, r7, r3
   1f4bc:	0011      	movs	r1, r2
   1f4be:	0018      	movs	r0, r3
   1f4c0:	4b22      	ldr	r3, [pc, #136]	; (1f54c <xQueueReceive+0x18c>)
   1f4c2:	4798      	blx	r3
   1f4c4:	1e03      	subs	r3, r0, #0
   1f4c6:	d11e      	bne.n	1f506 <xQueueReceive+0x146>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   1f4c8:	6a3b      	ldr	r3, [r7, #32]
   1f4ca:	0018      	movs	r0, r3
   1f4cc:	4b20      	ldr	r3, [pc, #128]	; (1f550 <xQueueReceive+0x190>)
   1f4ce:	4798      	blx	r3
   1f4d0:	1e03      	subs	r3, r0, #0
   1f4d2:	d011      	beq.n	1f4f8 <xQueueReceive+0x138>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   1f4d4:	6a3b      	ldr	r3, [r7, #32]
   1f4d6:	3324      	adds	r3, #36	; 0x24
   1f4d8:	687a      	ldr	r2, [r7, #4]
   1f4da:	0011      	movs	r1, r2
   1f4dc:	0018      	movs	r0, r3
   1f4de:	4b1d      	ldr	r3, [pc, #116]	; (1f554 <xQueueReceive+0x194>)
   1f4e0:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
   1f4e2:	6a3b      	ldr	r3, [r7, #32]
   1f4e4:	0018      	movs	r0, r3
   1f4e6:	4b1c      	ldr	r3, [pc, #112]	; (1f558 <xQueueReceive+0x198>)
   1f4e8:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   1f4ea:	4b1c      	ldr	r3, [pc, #112]	; (1f55c <xQueueReceive+0x19c>)
   1f4ec:	4798      	blx	r3
   1f4ee:	1e03      	subs	r3, r0, #0
   1f4f0:	d191      	bne.n	1f416 <xQueueReceive+0x56>
				{
					portYIELD_WITHIN_API();
   1f4f2:	4b12      	ldr	r3, [pc, #72]	; (1f53c <xQueueReceive+0x17c>)
   1f4f4:	4798      	blx	r3
   1f4f6:	e78e      	b.n	1f416 <xQueueReceive+0x56>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
   1f4f8:	6a3b      	ldr	r3, [r7, #32]
   1f4fa:	0018      	movs	r0, r3
   1f4fc:	4b16      	ldr	r3, [pc, #88]	; (1f558 <xQueueReceive+0x198>)
   1f4fe:	4798      	blx	r3
				( void ) xTaskResumeAll();
   1f500:	4b16      	ldr	r3, [pc, #88]	; (1f55c <xQueueReceive+0x19c>)
   1f502:	4798      	blx	r3
   1f504:	e787      	b.n	1f416 <xQueueReceive+0x56>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
   1f506:	6a3b      	ldr	r3, [r7, #32]
   1f508:	0018      	movs	r0, r3
   1f50a:	4b13      	ldr	r3, [pc, #76]	; (1f558 <xQueueReceive+0x198>)
   1f50c:	4798      	blx	r3
			( void ) xTaskResumeAll();
   1f50e:	4b13      	ldr	r3, [pc, #76]	; (1f55c <xQueueReceive+0x19c>)
   1f510:	4798      	blx	r3

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   1f512:	6a3b      	ldr	r3, [r7, #32]
   1f514:	0018      	movs	r0, r3
   1f516:	4b0e      	ldr	r3, [pc, #56]	; (1f550 <xQueueReceive+0x190>)
   1f518:	4798      	blx	r3
   1f51a:	1e03      	subs	r3, r0, #0
   1f51c:	d100      	bne.n	1f520 <xQueueReceive+0x160>
   1f51e:	e77a      	b.n	1f416 <xQueueReceive+0x56>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
   1f520:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
   1f522:	0018      	movs	r0, r3
   1f524:	46bd      	mov	sp, r7
   1f526:	b00a      	add	sp, #40	; 0x28
   1f528:	bd80      	pop	{r7, pc}
   1f52a:	46c0      	nop			; (mov r8, r8)
   1f52c:	000207f1 	.word	0x000207f1
   1f530:	0001ec51 	.word	0x0001ec51
   1f534:	0001f861 	.word	0x0001f861
   1f538:	000204b9 	.word	0x000204b9
   1f53c:	0001ec31 	.word	0x0001ec31
   1f540:	0001ec75 	.word	0x0001ec75
   1f544:	00020579 	.word	0x00020579
   1f548:	00020081 	.word	0x00020081
   1f54c:	000205a1 	.word	0x000205a1
   1f550:	0001f9a1 	.word	0x0001f9a1
   1f554:	00020421 	.word	0x00020421
   1f558:	0001f8b1 	.word	0x0001f8b1
   1f55c:	00020099 	.word	0x00020099

0001f560 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
   1f560:	b580      	push	{r7, lr}
   1f562:	b08a      	sub	sp, #40	; 0x28
   1f564:	af00      	add	r7, sp, #0
   1f566:	6078      	str	r0, [r7, #4]
   1f568:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
   1f56a:	2300      	movs	r3, #0
   1f56c:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1f56e:	687b      	ldr	r3, [r7, #4]
   1f570:	61fb      	str	r3, [r7, #28]

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
   1f572:	2300      	movs	r3, #0
   1f574:	623b      	str	r3, [r7, #32]
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
   1f576:	69fb      	ldr	r3, [r7, #28]
   1f578:	2b00      	cmp	r3, #0
   1f57a:	d101      	bne.n	1f580 <xQueueSemaphoreTake+0x20>
   1f57c:	b672      	cpsid	i
   1f57e:	e7fe      	b.n	1f57e <xQueueSemaphoreTake+0x1e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
   1f580:	69fb      	ldr	r3, [r7, #28]
   1f582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1f584:	2b00      	cmp	r3, #0
   1f586:	d001      	beq.n	1f58c <xQueueSemaphoreTake+0x2c>
   1f588:	b672      	cpsid	i
   1f58a:	e7fe      	b.n	1f58a <xQueueSemaphoreTake+0x2a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   1f58c:	4b61      	ldr	r3, [pc, #388]	; (1f714 <xQueueSemaphoreTake+0x1b4>)
   1f58e:	4798      	blx	r3
   1f590:	1e03      	subs	r3, r0, #0
   1f592:	d102      	bne.n	1f59a <xQueueSemaphoreTake+0x3a>
   1f594:	683b      	ldr	r3, [r7, #0]
   1f596:	2b00      	cmp	r3, #0
   1f598:	d101      	bne.n	1f59e <xQueueSemaphoreTake+0x3e>
   1f59a:	2301      	movs	r3, #1
   1f59c:	e000      	b.n	1f5a0 <xQueueSemaphoreTake+0x40>
   1f59e:	2300      	movs	r3, #0
   1f5a0:	2b00      	cmp	r3, #0
   1f5a2:	d101      	bne.n	1f5a8 <xQueueSemaphoreTake+0x48>
   1f5a4:	b672      	cpsid	i
   1f5a6:	e7fe      	b.n	1f5a6 <xQueueSemaphoreTake+0x46>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
   1f5a8:	4b5b      	ldr	r3, [pc, #364]	; (1f718 <xQueueSemaphoreTake+0x1b8>)
   1f5aa:	4798      	blx	r3
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
   1f5ac:	69fb      	ldr	r3, [r7, #28]
   1f5ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1f5b0:	61bb      	str	r3, [r7, #24]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
   1f5b2:	69bb      	ldr	r3, [r7, #24]
   1f5b4:	2b00      	cmp	r3, #0
   1f5b6:	d01d      	beq.n	1f5f4 <xQueueSemaphoreTake+0x94>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
   1f5b8:	69bb      	ldr	r3, [r7, #24]
   1f5ba:	1e5a      	subs	r2, r3, #1
   1f5bc:	69fb      	ldr	r3, [r7, #28]
   1f5be:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   1f5c0:	69fb      	ldr	r3, [r7, #28]
   1f5c2:	681b      	ldr	r3, [r3, #0]
   1f5c4:	2b00      	cmp	r3, #0
   1f5c6:	d104      	bne.n	1f5d2 <xQueueSemaphoreTake+0x72>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
   1f5c8:	4b54      	ldr	r3, [pc, #336]	; (1f71c <xQueueSemaphoreTake+0x1bc>)
   1f5ca:	4798      	blx	r3
   1f5cc:	0002      	movs	r2, r0
   1f5ce:	69fb      	ldr	r3, [r7, #28]
   1f5d0:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   1f5d2:	69fb      	ldr	r3, [r7, #28]
   1f5d4:	691b      	ldr	r3, [r3, #16]
   1f5d6:	2b00      	cmp	r3, #0
   1f5d8:	d008      	beq.n	1f5ec <xQueueSemaphoreTake+0x8c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1f5da:	69fb      	ldr	r3, [r7, #28]
   1f5dc:	3310      	adds	r3, #16
   1f5de:	0018      	movs	r0, r3
   1f5e0:	4b4f      	ldr	r3, [pc, #316]	; (1f720 <xQueueSemaphoreTake+0x1c0>)
   1f5e2:	4798      	blx	r3
   1f5e4:	1e03      	subs	r3, r0, #0
   1f5e6:	d001      	beq.n	1f5ec <xQueueSemaphoreTake+0x8c>
					{
						queueYIELD_IF_USING_PREEMPTION();
   1f5e8:	4b4e      	ldr	r3, [pc, #312]	; (1f724 <xQueueSemaphoreTake+0x1c4>)
   1f5ea:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
   1f5ec:	4b4e      	ldr	r3, [pc, #312]	; (1f728 <xQueueSemaphoreTake+0x1c8>)
   1f5ee:	4798      	blx	r3
				return pdPASS;
   1f5f0:	2301      	movs	r3, #1
   1f5f2:	e08b      	b.n	1f70c <xQueueSemaphoreTake+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
   1f5f4:	683b      	ldr	r3, [r7, #0]
   1f5f6:	2b00      	cmp	r3, #0
   1f5f8:	d108      	bne.n	1f60c <xQueueSemaphoreTake+0xac>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
   1f5fa:	6a3b      	ldr	r3, [r7, #32]
   1f5fc:	2b00      	cmp	r3, #0
   1f5fe:	d001      	beq.n	1f604 <xQueueSemaphoreTake+0xa4>
   1f600:	b672      	cpsid	i
   1f602:	e7fe      	b.n	1f602 <xQueueSemaphoreTake+0xa2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
   1f604:	4b48      	ldr	r3, [pc, #288]	; (1f728 <xQueueSemaphoreTake+0x1c8>)
   1f606:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
   1f608:	2300      	movs	r3, #0
   1f60a:	e07f      	b.n	1f70c <xQueueSemaphoreTake+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
   1f60c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1f60e:	2b00      	cmp	r3, #0
   1f610:	d106      	bne.n	1f620 <xQueueSemaphoreTake+0xc0>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
   1f612:	230c      	movs	r3, #12
   1f614:	18fb      	adds	r3, r7, r3
   1f616:	0018      	movs	r0, r3
   1f618:	4b44      	ldr	r3, [pc, #272]	; (1f72c <xQueueSemaphoreTake+0x1cc>)
   1f61a:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
   1f61c:	2301      	movs	r3, #1
   1f61e:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
   1f620:	4b41      	ldr	r3, [pc, #260]	; (1f728 <xQueueSemaphoreTake+0x1c8>)
   1f622:	4798      	blx	r3

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
   1f624:	4b42      	ldr	r3, [pc, #264]	; (1f730 <xQueueSemaphoreTake+0x1d0>)
   1f626:	4798      	blx	r3
		prvLockQueue( pxQueue );
   1f628:	4b3b      	ldr	r3, [pc, #236]	; (1f718 <xQueueSemaphoreTake+0x1b8>)
   1f62a:	4798      	blx	r3
   1f62c:	69fb      	ldr	r3, [r7, #28]
   1f62e:	2244      	movs	r2, #68	; 0x44
   1f630:	5c9b      	ldrb	r3, [r3, r2]
   1f632:	b25b      	sxtb	r3, r3
   1f634:	3301      	adds	r3, #1
   1f636:	d103      	bne.n	1f640 <xQueueSemaphoreTake+0xe0>
   1f638:	69fb      	ldr	r3, [r7, #28]
   1f63a:	2244      	movs	r2, #68	; 0x44
   1f63c:	2100      	movs	r1, #0
   1f63e:	5499      	strb	r1, [r3, r2]
   1f640:	69fb      	ldr	r3, [r7, #28]
   1f642:	2245      	movs	r2, #69	; 0x45
   1f644:	5c9b      	ldrb	r3, [r3, r2]
   1f646:	b25b      	sxtb	r3, r3
   1f648:	3301      	adds	r3, #1
   1f64a:	d103      	bne.n	1f654 <xQueueSemaphoreTake+0xf4>
   1f64c:	69fb      	ldr	r3, [r7, #28]
   1f64e:	2245      	movs	r2, #69	; 0x45
   1f650:	2100      	movs	r1, #0
   1f652:	5499      	strb	r1, [r3, r2]
   1f654:	4b34      	ldr	r3, [pc, #208]	; (1f728 <xQueueSemaphoreTake+0x1c8>)
   1f656:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   1f658:	003a      	movs	r2, r7
   1f65a:	230c      	movs	r3, #12
   1f65c:	18fb      	adds	r3, r7, r3
   1f65e:	0011      	movs	r1, r2
   1f660:	0018      	movs	r0, r3
   1f662:	4b34      	ldr	r3, [pc, #208]	; (1f734 <xQueueSemaphoreTake+0x1d4>)
   1f664:	4798      	blx	r3
   1f666:	1e03      	subs	r3, r0, #0
   1f668:	d12e      	bne.n	1f6c8 <xQueueSemaphoreTake+0x168>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   1f66a:	69fb      	ldr	r3, [r7, #28]
   1f66c:	0018      	movs	r0, r3
   1f66e:	4b32      	ldr	r3, [pc, #200]	; (1f738 <xQueueSemaphoreTake+0x1d8>)
   1f670:	4798      	blx	r3
   1f672:	1e03      	subs	r3, r0, #0
   1f674:	d021      	beq.n	1f6ba <xQueueSemaphoreTake+0x15a>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   1f676:	69fb      	ldr	r3, [r7, #28]
   1f678:	681b      	ldr	r3, [r3, #0]
   1f67a:	2b00      	cmp	r3, #0
   1f67c:	d10a      	bne.n	1f694 <xQueueSemaphoreTake+0x134>
					{
						taskENTER_CRITICAL();
   1f67e:	4b26      	ldr	r3, [pc, #152]	; (1f718 <xQueueSemaphoreTake+0x1b8>)
   1f680:	4798      	blx	r3
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
   1f682:	69fb      	ldr	r3, [r7, #28]
   1f684:	685b      	ldr	r3, [r3, #4]
   1f686:	0018      	movs	r0, r3
   1f688:	4b2c      	ldr	r3, [pc, #176]	; (1f73c <xQueueSemaphoreTake+0x1dc>)
   1f68a:	4798      	blx	r3
   1f68c:	0003      	movs	r3, r0
   1f68e:	623b      	str	r3, [r7, #32]
						}
						taskEXIT_CRITICAL();
   1f690:	4b25      	ldr	r3, [pc, #148]	; (1f728 <xQueueSemaphoreTake+0x1c8>)
   1f692:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   1f694:	69fb      	ldr	r3, [r7, #28]
   1f696:	3324      	adds	r3, #36	; 0x24
   1f698:	683a      	ldr	r2, [r7, #0]
   1f69a:	0011      	movs	r1, r2
   1f69c:	0018      	movs	r0, r3
   1f69e:	4b28      	ldr	r3, [pc, #160]	; (1f740 <xQueueSemaphoreTake+0x1e0>)
   1f6a0:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
   1f6a2:	69fb      	ldr	r3, [r7, #28]
   1f6a4:	0018      	movs	r0, r3
   1f6a6:	4b27      	ldr	r3, [pc, #156]	; (1f744 <xQueueSemaphoreTake+0x1e4>)
   1f6a8:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   1f6aa:	4b27      	ldr	r3, [pc, #156]	; (1f748 <xQueueSemaphoreTake+0x1e8>)
   1f6ac:	4798      	blx	r3
   1f6ae:	1e03      	subs	r3, r0, #0
   1f6b0:	d000      	beq.n	1f6b4 <xQueueSemaphoreTake+0x154>
   1f6b2:	e779      	b.n	1f5a8 <xQueueSemaphoreTake+0x48>
				{
					portYIELD_WITHIN_API();
   1f6b4:	4b1b      	ldr	r3, [pc, #108]	; (1f724 <xQueueSemaphoreTake+0x1c4>)
   1f6b6:	4798      	blx	r3
   1f6b8:	e776      	b.n	1f5a8 <xQueueSemaphoreTake+0x48>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
   1f6ba:	69fb      	ldr	r3, [r7, #28]
   1f6bc:	0018      	movs	r0, r3
   1f6be:	4b21      	ldr	r3, [pc, #132]	; (1f744 <xQueueSemaphoreTake+0x1e4>)
   1f6c0:	4798      	blx	r3
				( void ) xTaskResumeAll();
   1f6c2:	4b21      	ldr	r3, [pc, #132]	; (1f748 <xQueueSemaphoreTake+0x1e8>)
   1f6c4:	4798      	blx	r3
   1f6c6:	e76f      	b.n	1f5a8 <xQueueSemaphoreTake+0x48>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
   1f6c8:	69fb      	ldr	r3, [r7, #28]
   1f6ca:	0018      	movs	r0, r3
   1f6cc:	4b1d      	ldr	r3, [pc, #116]	; (1f744 <xQueueSemaphoreTake+0x1e4>)
   1f6ce:	4798      	blx	r3
			( void ) xTaskResumeAll();
   1f6d0:	4b1d      	ldr	r3, [pc, #116]	; (1f748 <xQueueSemaphoreTake+0x1e8>)
   1f6d2:	4798      	blx	r3

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   1f6d4:	69fb      	ldr	r3, [r7, #28]
   1f6d6:	0018      	movs	r0, r3
   1f6d8:	4b17      	ldr	r3, [pc, #92]	; (1f738 <xQueueSemaphoreTake+0x1d8>)
   1f6da:	4798      	blx	r3
   1f6dc:	1e03      	subs	r3, r0, #0
   1f6de:	d100      	bne.n	1f6e2 <xQueueSemaphoreTake+0x182>
   1f6e0:	e762      	b.n	1f5a8 <xQueueSemaphoreTake+0x48>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
   1f6e2:	6a3b      	ldr	r3, [r7, #32]
   1f6e4:	2b00      	cmp	r3, #0
   1f6e6:	d010      	beq.n	1f70a <xQueueSemaphoreTake+0x1aa>
					{
						taskENTER_CRITICAL();
   1f6e8:	4b0b      	ldr	r3, [pc, #44]	; (1f718 <xQueueSemaphoreTake+0x1b8>)
   1f6ea:	4798      	blx	r3
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
   1f6ec:	69fb      	ldr	r3, [r7, #28]
   1f6ee:	0018      	movs	r0, r3
   1f6f0:	4b16      	ldr	r3, [pc, #88]	; (1f74c <xQueueSemaphoreTake+0x1ec>)
   1f6f2:	4798      	blx	r3
   1f6f4:	0003      	movs	r3, r0
   1f6f6:	617b      	str	r3, [r7, #20]
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
   1f6f8:	69fb      	ldr	r3, [r7, #28]
   1f6fa:	685b      	ldr	r3, [r3, #4]
   1f6fc:	697a      	ldr	r2, [r7, #20]
   1f6fe:	0011      	movs	r1, r2
   1f700:	0018      	movs	r0, r3
   1f702:	4b13      	ldr	r3, [pc, #76]	; (1f750 <xQueueSemaphoreTake+0x1f0>)
   1f704:	4798      	blx	r3
						}
						taskEXIT_CRITICAL();
   1f706:	4b08      	ldr	r3, [pc, #32]	; (1f728 <xQueueSemaphoreTake+0x1c8>)
   1f708:	4798      	blx	r3
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
   1f70a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
   1f70c:	0018      	movs	r0, r3
   1f70e:	46bd      	mov	sp, r7
   1f710:	b00a      	add	sp, #40	; 0x28
   1f712:	bd80      	pop	{r7, pc}
   1f714:	000207f1 	.word	0x000207f1
   1f718:	0001ec51 	.word	0x0001ec51
   1f71c:	00020abd 	.word	0x00020abd
   1f720:	000204b9 	.word	0x000204b9
   1f724:	0001ec31 	.word	0x0001ec31
   1f728:	0001ec75 	.word	0x0001ec75
   1f72c:	00020579 	.word	0x00020579
   1f730:	00020081 	.word	0x00020081
   1f734:	000205a1 	.word	0x000205a1
   1f738:	0001f9a1 	.word	0x0001f9a1
   1f73c:	00020829 	.word	0x00020829
   1f740:	00020421 	.word	0x00020421
   1f744:	0001f8b1 	.word	0x0001f8b1
   1f748:	00020099 	.word	0x00020099
   1f74c:	0001f755 	.word	0x0001f755
   1f750:	000209cd 	.word	0x000209cd

0001f754 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
   1f754:	b580      	push	{r7, lr}
   1f756:	b084      	sub	sp, #16
   1f758:	af00      	add	r7, sp, #0
   1f75a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
   1f75c:	687b      	ldr	r3, [r7, #4]
   1f75e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1f760:	2b00      	cmp	r3, #0
   1f762:	d006      	beq.n	1f772 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
   1f764:	687b      	ldr	r3, [r7, #4]
   1f766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1f768:	681b      	ldr	r3, [r3, #0]
   1f76a:	2205      	movs	r2, #5
   1f76c:	1ad3      	subs	r3, r2, r3
   1f76e:	60fb      	str	r3, [r7, #12]
   1f770:	e001      	b.n	1f776 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
   1f772:	2300      	movs	r3, #0
   1f774:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
   1f776:	68fb      	ldr	r3, [r7, #12]
	}
   1f778:	0018      	movs	r0, r3
   1f77a:	46bd      	mov	sp, r7
   1f77c:	b004      	add	sp, #16
   1f77e:	bd80      	pop	{r7, pc}

0001f780 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
   1f780:	b580      	push	{r7, lr}
   1f782:	b086      	sub	sp, #24
   1f784:	af00      	add	r7, sp, #0
   1f786:	60f8      	str	r0, [r7, #12]
   1f788:	60b9      	str	r1, [r7, #8]
   1f78a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
   1f78c:	2300      	movs	r3, #0
   1f78e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
   1f790:	68fb      	ldr	r3, [r7, #12]
   1f792:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1f794:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
   1f796:	68fb      	ldr	r3, [r7, #12]
   1f798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1f79a:	2b00      	cmp	r3, #0
   1f79c:	d10e      	bne.n	1f7bc <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   1f79e:	68fb      	ldr	r3, [r7, #12]
   1f7a0:	681b      	ldr	r3, [r3, #0]
   1f7a2:	2b00      	cmp	r3, #0
   1f7a4:	d14e      	bne.n	1f844 <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
   1f7a6:	68fb      	ldr	r3, [r7, #12]
   1f7a8:	685b      	ldr	r3, [r3, #4]
   1f7aa:	0018      	movs	r0, r3
   1f7ac:	4b2a      	ldr	r3, [pc, #168]	; (1f858 <prvCopyDataToQueue+0xd8>)
   1f7ae:	4798      	blx	r3
   1f7b0:	0003      	movs	r3, r0
   1f7b2:	617b      	str	r3, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
   1f7b4:	68fb      	ldr	r3, [r7, #12]
   1f7b6:	2200      	movs	r2, #0
   1f7b8:	605a      	str	r2, [r3, #4]
   1f7ba:	e043      	b.n	1f844 <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
   1f7bc:	687b      	ldr	r3, [r7, #4]
   1f7be:	2b00      	cmp	r3, #0
   1f7c0:	d119      	bne.n	1f7f6 <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
   1f7c2:	68fb      	ldr	r3, [r7, #12]
   1f7c4:	6898      	ldr	r0, [r3, #8]
   1f7c6:	68fb      	ldr	r3, [r7, #12]
   1f7c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   1f7ca:	68bb      	ldr	r3, [r7, #8]
   1f7cc:	0019      	movs	r1, r3
   1f7ce:	4b23      	ldr	r3, [pc, #140]	; (1f85c <prvCopyDataToQueue+0xdc>)
   1f7d0:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
   1f7d2:	68fb      	ldr	r3, [r7, #12]
   1f7d4:	689a      	ldr	r2, [r3, #8]
   1f7d6:	68fb      	ldr	r3, [r7, #12]
   1f7d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1f7da:	18d2      	adds	r2, r2, r3
   1f7dc:	68fb      	ldr	r3, [r7, #12]
   1f7de:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   1f7e0:	68fb      	ldr	r3, [r7, #12]
   1f7e2:	689a      	ldr	r2, [r3, #8]
   1f7e4:	68fb      	ldr	r3, [r7, #12]
   1f7e6:	685b      	ldr	r3, [r3, #4]
   1f7e8:	429a      	cmp	r2, r3
   1f7ea:	d32b      	bcc.n	1f844 <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
   1f7ec:	68fb      	ldr	r3, [r7, #12]
   1f7ee:	681a      	ldr	r2, [r3, #0]
   1f7f0:	68fb      	ldr	r3, [r7, #12]
   1f7f2:	609a      	str	r2, [r3, #8]
   1f7f4:	e026      	b.n	1f844 <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1f7f6:	68fb      	ldr	r3, [r7, #12]
   1f7f8:	68d8      	ldr	r0, [r3, #12]
   1f7fa:	68fb      	ldr	r3, [r7, #12]
   1f7fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   1f7fe:	68bb      	ldr	r3, [r7, #8]
   1f800:	0019      	movs	r1, r3
   1f802:	4b16      	ldr	r3, [pc, #88]	; (1f85c <prvCopyDataToQueue+0xdc>)
   1f804:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
   1f806:	68fb      	ldr	r3, [r7, #12]
   1f808:	68da      	ldr	r2, [r3, #12]
   1f80a:	68fb      	ldr	r3, [r7, #12]
   1f80c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1f80e:	425b      	negs	r3, r3
   1f810:	18d2      	adds	r2, r2, r3
   1f812:	68fb      	ldr	r3, [r7, #12]
   1f814:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   1f816:	68fb      	ldr	r3, [r7, #12]
   1f818:	68da      	ldr	r2, [r3, #12]
   1f81a:	68fb      	ldr	r3, [r7, #12]
   1f81c:	681b      	ldr	r3, [r3, #0]
   1f81e:	429a      	cmp	r2, r3
   1f820:	d207      	bcs.n	1f832 <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
   1f822:	68fb      	ldr	r3, [r7, #12]
   1f824:	685a      	ldr	r2, [r3, #4]
   1f826:	68fb      	ldr	r3, [r7, #12]
   1f828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1f82a:	425b      	negs	r3, r3
   1f82c:	18d2      	adds	r2, r2, r3
   1f82e:	68fb      	ldr	r3, [r7, #12]
   1f830:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
   1f832:	687b      	ldr	r3, [r7, #4]
   1f834:	2b02      	cmp	r3, #2
   1f836:	d105      	bne.n	1f844 <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
   1f838:	693b      	ldr	r3, [r7, #16]
   1f83a:	2b00      	cmp	r3, #0
   1f83c:	d002      	beq.n	1f844 <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
   1f83e:	693b      	ldr	r3, [r7, #16]
   1f840:	3b01      	subs	r3, #1
   1f842:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
   1f844:	693b      	ldr	r3, [r7, #16]
   1f846:	1c5a      	adds	r2, r3, #1
   1f848:	68fb      	ldr	r3, [r7, #12]
   1f84a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
   1f84c:	697b      	ldr	r3, [r7, #20]
}
   1f84e:	0018      	movs	r0, r3
   1f850:	46bd      	mov	sp, r7
   1f852:	b006      	add	sp, #24
   1f854:	bd80      	pop	{r7, pc}
   1f856:	46c0      	nop			; (mov r8, r8)
   1f858:	0002090d 	.word	0x0002090d
   1f85c:	00028b21 	.word	0x00028b21

0001f860 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
   1f860:	b580      	push	{r7, lr}
   1f862:	b082      	sub	sp, #8
   1f864:	af00      	add	r7, sp, #0
   1f866:	6078      	str	r0, [r7, #4]
   1f868:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
   1f86a:	687b      	ldr	r3, [r7, #4]
   1f86c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1f86e:	2b00      	cmp	r3, #0
   1f870:	d018      	beq.n	1f8a4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
   1f872:	687b      	ldr	r3, [r7, #4]
   1f874:	68da      	ldr	r2, [r3, #12]
   1f876:	687b      	ldr	r3, [r7, #4]
   1f878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1f87a:	18d2      	adds	r2, r2, r3
   1f87c:	687b      	ldr	r3, [r7, #4]
   1f87e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
   1f880:	687b      	ldr	r3, [r7, #4]
   1f882:	68da      	ldr	r2, [r3, #12]
   1f884:	687b      	ldr	r3, [r7, #4]
   1f886:	685b      	ldr	r3, [r3, #4]
   1f888:	429a      	cmp	r2, r3
   1f88a:	d303      	bcc.n	1f894 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
   1f88c:	687b      	ldr	r3, [r7, #4]
   1f88e:	681a      	ldr	r2, [r3, #0]
   1f890:	687b      	ldr	r3, [r7, #4]
   1f892:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
   1f894:	687b      	ldr	r3, [r7, #4]
   1f896:	68d9      	ldr	r1, [r3, #12]
   1f898:	687b      	ldr	r3, [r7, #4]
   1f89a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   1f89c:	683b      	ldr	r3, [r7, #0]
   1f89e:	0018      	movs	r0, r3
   1f8a0:	4b02      	ldr	r3, [pc, #8]	; (1f8ac <prvCopyDataFromQueue+0x4c>)
   1f8a2:	4798      	blx	r3
	}
}
   1f8a4:	46c0      	nop			; (mov r8, r8)
   1f8a6:	46bd      	mov	sp, r7
   1f8a8:	b002      	add	sp, #8
   1f8aa:	bd80      	pop	{r7, pc}
   1f8ac:	00028b21 	.word	0x00028b21

0001f8b0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
   1f8b0:	b580      	push	{r7, lr}
   1f8b2:	b084      	sub	sp, #16
   1f8b4:	af00      	add	r7, sp, #0
   1f8b6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
   1f8b8:	4b34      	ldr	r3, [pc, #208]	; (1f98c <prvUnlockQueue+0xdc>)
   1f8ba:	4798      	blx	r3
	{
		int8_t cTxLock = pxQueue->cTxLock;
   1f8bc:	230f      	movs	r3, #15
   1f8be:	18fb      	adds	r3, r7, r3
   1f8c0:	687a      	ldr	r2, [r7, #4]
   1f8c2:	2145      	movs	r1, #69	; 0x45
   1f8c4:	5c52      	ldrb	r2, [r2, r1]
   1f8c6:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
   1f8c8:	e022      	b.n	1f910 <prvUnlockQueue+0x60>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			#if ( configUSE_QUEUE_SETS == 1 )
			{
				if( pxQueue->pxQueueSetContainer != NULL )
   1f8ca:	687b      	ldr	r3, [r7, #4]
   1f8cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1f8ce:	2b00      	cmp	r3, #0
   1f8d0:	d009      	beq.n	1f8e6 <prvUnlockQueue+0x36>
				{
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
   1f8d2:	687b      	ldr	r3, [r7, #4]
   1f8d4:	2100      	movs	r1, #0
   1f8d6:	0018      	movs	r0, r3
   1f8d8:	4b2d      	ldr	r3, [pc, #180]	; (1f990 <prvUnlockQueue+0xe0>)
   1f8da:	4798      	blx	r3
   1f8dc:	1e03      	subs	r3, r0, #0
   1f8de:	d00f      	beq.n	1f900 <prvUnlockQueue+0x50>
					{
						/* The queue is a member of a queue set, and posting to
						the queue set caused a higher priority task to unblock.
						A context switch is required. */
						vTaskMissedYield();
   1f8e0:	4b2c      	ldr	r3, [pc, #176]	; (1f994 <prvUnlockQueue+0xe4>)
   1f8e2:	4798      	blx	r3
   1f8e4:	e00c      	b.n	1f900 <prvUnlockQueue+0x50>
				else
				{
					/* Tasks that are removed from the event list will get
					added to the pending ready list as the scheduler is still
					suspended. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   1f8e6:	687b      	ldr	r3, [r7, #4]
   1f8e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1f8ea:	2b00      	cmp	r3, #0
   1f8ec:	d017      	beq.n	1f91e <prvUnlockQueue+0x6e>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1f8ee:	687b      	ldr	r3, [r7, #4]
   1f8f0:	3324      	adds	r3, #36	; 0x24
   1f8f2:	0018      	movs	r0, r3
   1f8f4:	4b28      	ldr	r3, [pc, #160]	; (1f998 <prvUnlockQueue+0xe8>)
   1f8f6:	4798      	blx	r3
   1f8f8:	1e03      	subs	r3, r0, #0
   1f8fa:	d001      	beq.n	1f900 <prvUnlockQueue+0x50>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							vTaskMissedYield();
   1f8fc:	4b25      	ldr	r3, [pc, #148]	; (1f994 <prvUnlockQueue+0xe4>)
   1f8fe:	4798      	blx	r3
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
   1f900:	230f      	movs	r3, #15
   1f902:	18fb      	adds	r3, r7, r3
   1f904:	781b      	ldrb	r3, [r3, #0]
   1f906:	3b01      	subs	r3, #1
   1f908:	b2da      	uxtb	r2, r3
   1f90a:	230f      	movs	r3, #15
   1f90c:	18fb      	adds	r3, r7, r3
   1f90e:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
   1f910:	230f      	movs	r3, #15
   1f912:	18fb      	adds	r3, r7, r3
   1f914:	781b      	ldrb	r3, [r3, #0]
   1f916:	b25b      	sxtb	r3, r3
   1f918:	2b00      	cmp	r3, #0
   1f91a:	dcd6      	bgt.n	1f8ca <prvUnlockQueue+0x1a>
   1f91c:	e000      	b.n	1f920 <prvUnlockQueue+0x70>
						break;
   1f91e:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
   1f920:	687b      	ldr	r3, [r7, #4]
   1f922:	2245      	movs	r2, #69	; 0x45
   1f924:	21ff      	movs	r1, #255	; 0xff
   1f926:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
   1f928:	4b1c      	ldr	r3, [pc, #112]	; (1f99c <prvUnlockQueue+0xec>)
   1f92a:	4798      	blx	r3

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
   1f92c:	4b17      	ldr	r3, [pc, #92]	; (1f98c <prvUnlockQueue+0xdc>)
   1f92e:	4798      	blx	r3
	{
		int8_t cRxLock = pxQueue->cRxLock;
   1f930:	230e      	movs	r3, #14
   1f932:	18fb      	adds	r3, r7, r3
   1f934:	687a      	ldr	r2, [r7, #4]
   1f936:	2144      	movs	r1, #68	; 0x44
   1f938:	5c52      	ldrb	r2, [r2, r1]
   1f93a:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
   1f93c:	e014      	b.n	1f968 <prvUnlockQueue+0xb8>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   1f93e:	687b      	ldr	r3, [r7, #4]
   1f940:	691b      	ldr	r3, [r3, #16]
   1f942:	2b00      	cmp	r3, #0
   1f944:	d017      	beq.n	1f976 <prvUnlockQueue+0xc6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1f946:	687b      	ldr	r3, [r7, #4]
   1f948:	3310      	adds	r3, #16
   1f94a:	0018      	movs	r0, r3
   1f94c:	4b12      	ldr	r3, [pc, #72]	; (1f998 <prvUnlockQueue+0xe8>)
   1f94e:	4798      	blx	r3
   1f950:	1e03      	subs	r3, r0, #0
   1f952:	d001      	beq.n	1f958 <prvUnlockQueue+0xa8>
				{
					vTaskMissedYield();
   1f954:	4b0f      	ldr	r3, [pc, #60]	; (1f994 <prvUnlockQueue+0xe4>)
   1f956:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
   1f958:	230e      	movs	r3, #14
   1f95a:	18fb      	adds	r3, r7, r3
   1f95c:	781b      	ldrb	r3, [r3, #0]
   1f95e:	3b01      	subs	r3, #1
   1f960:	b2da      	uxtb	r2, r3
   1f962:	230e      	movs	r3, #14
   1f964:	18fb      	adds	r3, r7, r3
   1f966:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
   1f968:	230e      	movs	r3, #14
   1f96a:	18fb      	adds	r3, r7, r3
   1f96c:	781b      	ldrb	r3, [r3, #0]
   1f96e:	b25b      	sxtb	r3, r3
   1f970:	2b00      	cmp	r3, #0
   1f972:	dce4      	bgt.n	1f93e <prvUnlockQueue+0x8e>
   1f974:	e000      	b.n	1f978 <prvUnlockQueue+0xc8>
			}
			else
			{
				break;
   1f976:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
   1f978:	687b      	ldr	r3, [r7, #4]
   1f97a:	2244      	movs	r2, #68	; 0x44
   1f97c:	21ff      	movs	r1, #255	; 0xff
   1f97e:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
   1f980:	4b06      	ldr	r3, [pc, #24]	; (1f99c <prvUnlockQueue+0xec>)
   1f982:	4798      	blx	r3
}
   1f984:	46c0      	nop			; (mov r8, r8)
   1f986:	46bd      	mov	sp, r7
   1f988:	b004      	add	sp, #16
   1f98a:	bd80      	pop	{r7, pc}
   1f98c:	0001ec51 	.word	0x0001ec51
   1f990:	0001fa85 	.word	0x0001fa85
   1f994:	0002064d 	.word	0x0002064d
   1f998:	000204b9 	.word	0x000204b9
   1f99c:	0001ec75 	.word	0x0001ec75

0001f9a0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
   1f9a0:	b580      	push	{r7, lr}
   1f9a2:	b084      	sub	sp, #16
   1f9a4:	af00      	add	r7, sp, #0
   1f9a6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
   1f9a8:	4b08      	ldr	r3, [pc, #32]	; (1f9cc <prvIsQueueEmpty+0x2c>)
   1f9aa:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
   1f9ac:	687b      	ldr	r3, [r7, #4]
   1f9ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1f9b0:	2b00      	cmp	r3, #0
   1f9b2:	d102      	bne.n	1f9ba <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
   1f9b4:	2301      	movs	r3, #1
   1f9b6:	60fb      	str	r3, [r7, #12]
   1f9b8:	e001      	b.n	1f9be <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
   1f9ba:	2300      	movs	r3, #0
   1f9bc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
   1f9be:	4b04      	ldr	r3, [pc, #16]	; (1f9d0 <prvIsQueueEmpty+0x30>)
   1f9c0:	4798      	blx	r3

	return xReturn;
   1f9c2:	68fb      	ldr	r3, [r7, #12]
}
   1f9c4:	0018      	movs	r0, r3
   1f9c6:	46bd      	mov	sp, r7
   1f9c8:	b004      	add	sp, #16
   1f9ca:	bd80      	pop	{r7, pc}
   1f9cc:	0001ec51 	.word	0x0001ec51
   1f9d0:	0001ec75 	.word	0x0001ec75

0001f9d4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
   1f9d4:	b580      	push	{r7, lr}
   1f9d6:	b084      	sub	sp, #16
   1f9d8:	af00      	add	r7, sp, #0
   1f9da:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
   1f9dc:	4b09      	ldr	r3, [pc, #36]	; (1fa04 <prvIsQueueFull+0x30>)
   1f9de:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
   1f9e0:	687b      	ldr	r3, [r7, #4]
   1f9e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1f9e4:	687b      	ldr	r3, [r7, #4]
   1f9e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1f9e8:	429a      	cmp	r2, r3
   1f9ea:	d102      	bne.n	1f9f2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
   1f9ec:	2301      	movs	r3, #1
   1f9ee:	60fb      	str	r3, [r7, #12]
   1f9f0:	e001      	b.n	1f9f6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
   1f9f2:	2300      	movs	r3, #0
   1f9f4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
   1f9f6:	4b04      	ldr	r3, [pc, #16]	; (1fa08 <prvIsQueueFull+0x34>)
   1f9f8:	4798      	blx	r3

	return xReturn;
   1f9fa:	68fb      	ldr	r3, [r7, #12]
}
   1f9fc:	0018      	movs	r0, r3
   1f9fe:	46bd      	mov	sp, r7
   1fa00:	b004      	add	sp, #16
   1fa02:	bd80      	pop	{r7, pc}
   1fa04:	0001ec51 	.word	0x0001ec51
   1fa08:	0001ec75 	.word	0x0001ec75

0001fa0c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
   1fa0c:	b580      	push	{r7, lr}
   1fa0e:	b086      	sub	sp, #24
   1fa10:	af00      	add	r7, sp, #0
   1fa12:	60f8      	str	r0, [r7, #12]
   1fa14:	60b9      	str	r1, [r7, #8]
   1fa16:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1fa18:	68fb      	ldr	r3, [r7, #12]
   1fa1a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
   1fa1c:	4b15      	ldr	r3, [pc, #84]	; (1fa74 <vQueueWaitForMessageRestricted+0x68>)
   1fa1e:	4798      	blx	r3
   1fa20:	697b      	ldr	r3, [r7, #20]
   1fa22:	2244      	movs	r2, #68	; 0x44
   1fa24:	5c9b      	ldrb	r3, [r3, r2]
   1fa26:	b25b      	sxtb	r3, r3
   1fa28:	3301      	adds	r3, #1
   1fa2a:	d103      	bne.n	1fa34 <vQueueWaitForMessageRestricted+0x28>
   1fa2c:	697b      	ldr	r3, [r7, #20]
   1fa2e:	2244      	movs	r2, #68	; 0x44
   1fa30:	2100      	movs	r1, #0
   1fa32:	5499      	strb	r1, [r3, r2]
   1fa34:	697b      	ldr	r3, [r7, #20]
   1fa36:	2245      	movs	r2, #69	; 0x45
   1fa38:	5c9b      	ldrb	r3, [r3, r2]
   1fa3a:	b25b      	sxtb	r3, r3
   1fa3c:	3301      	adds	r3, #1
   1fa3e:	d103      	bne.n	1fa48 <vQueueWaitForMessageRestricted+0x3c>
   1fa40:	697b      	ldr	r3, [r7, #20]
   1fa42:	2245      	movs	r2, #69	; 0x45
   1fa44:	2100      	movs	r1, #0
   1fa46:	5499      	strb	r1, [r3, r2]
   1fa48:	4b0b      	ldr	r3, [pc, #44]	; (1fa78 <vQueueWaitForMessageRestricted+0x6c>)
   1fa4a:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
   1fa4c:	697b      	ldr	r3, [r7, #20]
   1fa4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1fa50:	2b00      	cmp	r3, #0
   1fa52:	d106      	bne.n	1fa62 <vQueueWaitForMessageRestricted+0x56>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
   1fa54:	697b      	ldr	r3, [r7, #20]
   1fa56:	3324      	adds	r3, #36	; 0x24
   1fa58:	687a      	ldr	r2, [r7, #4]
   1fa5a:	68b9      	ldr	r1, [r7, #8]
   1fa5c:	0018      	movs	r0, r3
   1fa5e:	4b07      	ldr	r3, [pc, #28]	; (1fa7c <vQueueWaitForMessageRestricted+0x70>)
   1fa60:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
   1fa62:	697b      	ldr	r3, [r7, #20]
   1fa64:	0018      	movs	r0, r3
   1fa66:	4b06      	ldr	r3, [pc, #24]	; (1fa80 <vQueueWaitForMessageRestricted+0x74>)
   1fa68:	4798      	blx	r3
	}
   1fa6a:	46c0      	nop			; (mov r8, r8)
   1fa6c:	46bd      	mov	sp, r7
   1fa6e:	b006      	add	sp, #24
   1fa70:	bd80      	pop	{r7, pc}
   1fa72:	46c0      	nop			; (mov r8, r8)
   1fa74:	0001ec51 	.word	0x0001ec51
   1fa78:	0001ec75 	.word	0x0001ec75
   1fa7c:	00020465 	.word	0x00020465
   1fa80:	0001f8b1 	.word	0x0001f8b1

0001fa84 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
   1fa84:	b580      	push	{r7, lr}
   1fa86:	b086      	sub	sp, #24
   1fa88:	af00      	add	r7, sp, #0
   1fa8a:	6078      	str	r0, [r7, #4]
   1fa8c:	6039      	str	r1, [r7, #0]
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
   1fa8e:	687b      	ldr	r3, [r7, #4]
   1fa90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1fa92:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
   1fa94:	2300      	movs	r3, #0
   1fa96:	617b      	str	r3, [r7, #20]

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
   1fa98:	693b      	ldr	r3, [r7, #16]
   1fa9a:	2b00      	cmp	r3, #0
   1fa9c:	d101      	bne.n	1faa2 <prvNotifyQueueSetContainer+0x1e>
   1fa9e:	b672      	cpsid	i
   1faa0:	e7fe      	b.n	1faa0 <prvNotifyQueueSetContainer+0x1c>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
   1faa2:	693b      	ldr	r3, [r7, #16]
   1faa4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1faa6:	693b      	ldr	r3, [r7, #16]
   1faa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1faaa:	429a      	cmp	r2, r3
   1faac:	d301      	bcc.n	1fab2 <prvNotifyQueueSetContainer+0x2e>
   1faae:	b672      	cpsid	i
   1fab0:	e7fe      	b.n	1fab0 <prvNotifyQueueSetContainer+0x2c>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
   1fab2:	693b      	ldr	r3, [r7, #16]
   1fab4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1fab6:	693b      	ldr	r3, [r7, #16]
   1fab8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1faba:	429a      	cmp	r2, r3
   1fabc:	d22a      	bcs.n	1fb14 <prvNotifyQueueSetContainer+0x90>
		{
			const int8_t cTxLock = pxQueueSetContainer->cTxLock;
   1fabe:	230f      	movs	r3, #15
   1fac0:	18fb      	adds	r3, r7, r3
   1fac2:	693a      	ldr	r2, [r7, #16]
   1fac4:	2145      	movs	r1, #69	; 0x45
   1fac6:	5c52      	ldrb	r2, [r2, r1]
   1fac8:	701a      	strb	r2, [r3, #0]

			traceQUEUE_SEND( pxQueueSetContainer );

			/* The data copied is the handle of the queue that contains data. */
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
   1faca:	683a      	ldr	r2, [r7, #0]
   1facc:	1d39      	adds	r1, r7, #4
   1face:	693b      	ldr	r3, [r7, #16]
   1fad0:	0018      	movs	r0, r3
   1fad2:	4b13      	ldr	r3, [pc, #76]	; (1fb20 <prvNotifyQueueSetContainer+0x9c>)
   1fad4:	4798      	blx	r3
   1fad6:	0003      	movs	r3, r0
   1fad8:	617b      	str	r3, [r7, #20]

			if( cTxLock == queueUNLOCKED )
   1fada:	230f      	movs	r3, #15
   1fadc:	18fb      	adds	r3, r7, r3
   1fade:	781b      	ldrb	r3, [r3, #0]
   1fae0:	b25b      	sxtb	r3, r3
   1fae2:	3301      	adds	r3, #1
   1fae4:	d10d      	bne.n	1fb02 <prvNotifyQueueSetContainer+0x7e>
			{
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
   1fae6:	693b      	ldr	r3, [r7, #16]
   1fae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1faea:	2b00      	cmp	r3, #0
   1faec:	d012      	beq.n	1fb14 <prvNotifyQueueSetContainer+0x90>
				{
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
   1faee:	693b      	ldr	r3, [r7, #16]
   1faf0:	3324      	adds	r3, #36	; 0x24
   1faf2:	0018      	movs	r0, r3
   1faf4:	4b0b      	ldr	r3, [pc, #44]	; (1fb24 <prvNotifyQueueSetContainer+0xa0>)
   1faf6:	4798      	blx	r3
   1faf8:	1e03      	subs	r3, r0, #0
   1fafa:	d00b      	beq.n	1fb14 <prvNotifyQueueSetContainer+0x90>
					{
						/* The task waiting has a higher priority. */
						xReturn = pdTRUE;
   1fafc:	2301      	movs	r3, #1
   1fafe:	617b      	str	r3, [r7, #20]
   1fb00:	e008      	b.n	1fb14 <prvNotifyQueueSetContainer+0x90>
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else
			{
				pxQueueSetContainer->cTxLock = ( int8_t ) ( cTxLock + 1 );
   1fb02:	230f      	movs	r3, #15
   1fb04:	18fb      	adds	r3, r7, r3
   1fb06:	781b      	ldrb	r3, [r3, #0]
   1fb08:	3301      	adds	r3, #1
   1fb0a:	b2db      	uxtb	r3, r3
   1fb0c:	b259      	sxtb	r1, r3
   1fb0e:	693b      	ldr	r3, [r7, #16]
   1fb10:	2245      	movs	r2, #69	; 0x45
   1fb12:	5499      	strb	r1, [r3, r2]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
   1fb14:	697b      	ldr	r3, [r7, #20]
	}
   1fb16:	0018      	movs	r0, r3
   1fb18:	46bd      	mov	sp, r7
   1fb1a:	b006      	add	sp, #24
   1fb1c:	bd80      	pop	{r7, pc}
   1fb1e:	46c0      	nop			; (mov r8, r8)
   1fb20:	0001f781 	.word	0x0001f781
   1fb24:	000204b9 	.word	0x000204b9

0001fb28 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
   1fb28:	b590      	push	{r4, r7, lr}
   1fb2a:	b08d      	sub	sp, #52	; 0x34
   1fb2c:	af04      	add	r7, sp, #16
   1fb2e:	60f8      	str	r0, [r7, #12]
   1fb30:	60b9      	str	r1, [r7, #8]
   1fb32:	603b      	str	r3, [r7, #0]
   1fb34:	1dbb      	adds	r3, r7, #6
   1fb36:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1fb38:	1dbb      	adds	r3, r7, #6
   1fb3a:	881b      	ldrh	r3, [r3, #0]
   1fb3c:	009b      	lsls	r3, r3, #2
   1fb3e:	0018      	movs	r0, r3
   1fb40:	4b1d      	ldr	r3, [pc, #116]	; (1fbb8 <xTaskCreate+0x90>)
   1fb42:	4798      	blx	r3
   1fb44:	0003      	movs	r3, r0
   1fb46:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
   1fb48:	697b      	ldr	r3, [r7, #20]
   1fb4a:	2b00      	cmp	r3, #0
   1fb4c:	d010      	beq.n	1fb70 <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
   1fb4e:	2050      	movs	r0, #80	; 0x50
   1fb50:	4b19      	ldr	r3, [pc, #100]	; (1fbb8 <xTaskCreate+0x90>)
   1fb52:	4798      	blx	r3
   1fb54:	0003      	movs	r3, r0
   1fb56:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
   1fb58:	69fb      	ldr	r3, [r7, #28]
   1fb5a:	2b00      	cmp	r3, #0
   1fb5c:	d003      	beq.n	1fb66 <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
   1fb5e:	69fb      	ldr	r3, [r7, #28]
   1fb60:	697a      	ldr	r2, [r7, #20]
   1fb62:	631a      	str	r2, [r3, #48]	; 0x30
   1fb64:	e006      	b.n	1fb74 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
   1fb66:	697b      	ldr	r3, [r7, #20]
   1fb68:	0018      	movs	r0, r3
   1fb6a:	4b14      	ldr	r3, [pc, #80]	; (1fbbc <xTaskCreate+0x94>)
   1fb6c:	4798      	blx	r3
   1fb6e:	e001      	b.n	1fb74 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
   1fb70:	2300      	movs	r3, #0
   1fb72:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
   1fb74:	69fb      	ldr	r3, [r7, #28]
   1fb76:	2b00      	cmp	r3, #0
   1fb78:	d016      	beq.n	1fba8 <xTaskCreate+0x80>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
   1fb7a:	1dbb      	adds	r3, r7, #6
   1fb7c:	881a      	ldrh	r2, [r3, #0]
   1fb7e:	683c      	ldr	r4, [r7, #0]
   1fb80:	68b9      	ldr	r1, [r7, #8]
   1fb82:	68f8      	ldr	r0, [r7, #12]
   1fb84:	2300      	movs	r3, #0
   1fb86:	9303      	str	r3, [sp, #12]
   1fb88:	69fb      	ldr	r3, [r7, #28]
   1fb8a:	9302      	str	r3, [sp, #8]
   1fb8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1fb8e:	9301      	str	r3, [sp, #4]
   1fb90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1fb92:	9300      	str	r3, [sp, #0]
   1fb94:	0023      	movs	r3, r4
   1fb96:	4c0a      	ldr	r4, [pc, #40]	; (1fbc0 <xTaskCreate+0x98>)
   1fb98:	47a0      	blx	r4
			prvAddNewTaskToReadyList( pxNewTCB );
   1fb9a:	69fb      	ldr	r3, [r7, #28]
   1fb9c:	0018      	movs	r0, r3
   1fb9e:	4b09      	ldr	r3, [pc, #36]	; (1fbc4 <xTaskCreate+0x9c>)
   1fba0:	4798      	blx	r3
			xReturn = pdPASS;
   1fba2:	2301      	movs	r3, #1
   1fba4:	61bb      	str	r3, [r7, #24]
   1fba6:	e002      	b.n	1fbae <xTaskCreate+0x86>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
   1fba8:	2301      	movs	r3, #1
   1fbaa:	425b      	negs	r3, r3
   1fbac:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
   1fbae:	69bb      	ldr	r3, [r7, #24]
	}
   1fbb0:	0018      	movs	r0, r3
   1fbb2:	46bd      	mov	sp, r7
   1fbb4:	b009      	add	sp, #36	; 0x24
   1fbb6:	bd90      	pop	{r4, r7, pc}
   1fbb8:	0001ed8d 	.word	0x0001ed8d
   1fbbc:	0001edc1 	.word	0x0001edc1
   1fbc0:	0001fbc9 	.word	0x0001fbc9
   1fbc4:	0001fcc5 	.word	0x0001fcc5

0001fbc8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
   1fbc8:	b580      	push	{r7, lr}
   1fbca:	b086      	sub	sp, #24
   1fbcc:	af00      	add	r7, sp, #0
   1fbce:	60f8      	str	r0, [r7, #12]
   1fbd0:	60b9      	str	r1, [r7, #8]
   1fbd2:	607a      	str	r2, [r7, #4]
   1fbd4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
   1fbd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1fbd8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   1fbda:	687b      	ldr	r3, [r7, #4]
   1fbdc:	4936      	ldr	r1, [pc, #216]	; (1fcb8 <prvInitialiseNewTask+0xf0>)
   1fbde:	468c      	mov	ip, r1
   1fbe0:	4463      	add	r3, ip
   1fbe2:	009b      	lsls	r3, r3, #2
   1fbe4:	18d3      	adds	r3, r2, r3
   1fbe6:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
   1fbe8:	693b      	ldr	r3, [r7, #16]
   1fbea:	2207      	movs	r2, #7
   1fbec:	4393      	bics	r3, r2
   1fbee:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
   1fbf0:	693b      	ldr	r3, [r7, #16]
   1fbf2:	2207      	movs	r2, #7
   1fbf4:	4013      	ands	r3, r2
   1fbf6:	d001      	beq.n	1fbfc <prvInitialiseNewTask+0x34>
   1fbf8:	b672      	cpsid	i
   1fbfa:	e7fe      	b.n	1fbfa <prvInitialiseNewTask+0x32>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
   1fbfc:	2300      	movs	r3, #0
   1fbfe:	617b      	str	r3, [r7, #20]
   1fc00:	e013      	b.n	1fc2a <prvInitialiseNewTask+0x62>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
   1fc02:	68ba      	ldr	r2, [r7, #8]
   1fc04:	697b      	ldr	r3, [r7, #20]
   1fc06:	18d3      	adds	r3, r2, r3
   1fc08:	7818      	ldrb	r0, [r3, #0]
   1fc0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1fc0c:	2134      	movs	r1, #52	; 0x34
   1fc0e:	697b      	ldr	r3, [r7, #20]
   1fc10:	18d3      	adds	r3, r2, r3
   1fc12:	185b      	adds	r3, r3, r1
   1fc14:	1c02      	adds	r2, r0, #0
   1fc16:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
   1fc18:	68ba      	ldr	r2, [r7, #8]
   1fc1a:	697b      	ldr	r3, [r7, #20]
   1fc1c:	18d3      	adds	r3, r2, r3
   1fc1e:	781b      	ldrb	r3, [r3, #0]
   1fc20:	2b00      	cmp	r3, #0
   1fc22:	d006      	beq.n	1fc32 <prvInitialiseNewTask+0x6a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
   1fc24:	697b      	ldr	r3, [r7, #20]
   1fc26:	3301      	adds	r3, #1
   1fc28:	617b      	str	r3, [r7, #20]
   1fc2a:	697b      	ldr	r3, [r7, #20]
   1fc2c:	2b09      	cmp	r3, #9
   1fc2e:	d9e8      	bls.n	1fc02 <prvInitialiseNewTask+0x3a>
   1fc30:	e000      	b.n	1fc34 <prvInitialiseNewTask+0x6c>
		{
			break;
   1fc32:	46c0      	nop			; (mov r8, r8)
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
   1fc34:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1fc36:	223d      	movs	r2, #61	; 0x3d
   1fc38:	2100      	movs	r1, #0
   1fc3a:	5499      	strb	r1, [r3, r2]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
   1fc3c:	6a3b      	ldr	r3, [r7, #32]
   1fc3e:	2b04      	cmp	r3, #4
   1fc40:	d901      	bls.n	1fc46 <prvInitialiseNewTask+0x7e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
   1fc42:	2304      	movs	r3, #4
   1fc44:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
   1fc46:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1fc48:	6a3a      	ldr	r2, [r7, #32]
   1fc4a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
   1fc4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1fc4e:	6a3a      	ldr	r2, [r7, #32]
   1fc50:	641a      	str	r2, [r3, #64]	; 0x40
		pxNewTCB->uxMutexesHeld = 0;
   1fc52:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1fc54:	2200      	movs	r2, #0
   1fc56:	645a      	str	r2, [r3, #68]	; 0x44
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
   1fc58:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1fc5a:	3304      	adds	r3, #4
   1fc5c:	0018      	movs	r0, r3
   1fc5e:	4b17      	ldr	r3, [pc, #92]	; (1fcbc <prvInitialiseNewTask+0xf4>)
   1fc60:	4798      	blx	r3
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
   1fc62:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1fc64:	3318      	adds	r3, #24
   1fc66:	0018      	movs	r0, r3
   1fc68:	4b14      	ldr	r3, [pc, #80]	; (1fcbc <prvInitialiseNewTask+0xf4>)
   1fc6a:	4798      	blx	r3

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
   1fc6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1fc6e:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1fc70:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1fc72:	6a3b      	ldr	r3, [r7, #32]
   1fc74:	2205      	movs	r2, #5
   1fc76:	1ad2      	subs	r2, r2, r3
   1fc78:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1fc7a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
   1fc7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1fc7e:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1fc80:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
   1fc82:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1fc84:	2200      	movs	r2, #0
   1fc86:	649a      	str	r2, [r3, #72]	; 0x48
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
   1fc88:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1fc8a:	224c      	movs	r2, #76	; 0x4c
   1fc8c:	2100      	movs	r1, #0
   1fc8e:	5499      	strb	r1, [r3, r2]
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
   1fc90:	683a      	ldr	r2, [r7, #0]
   1fc92:	68f9      	ldr	r1, [r7, #12]
   1fc94:	693b      	ldr	r3, [r7, #16]
   1fc96:	0018      	movs	r0, r3
   1fc98:	4b09      	ldr	r3, [pc, #36]	; (1fcc0 <prvInitialiseNewTask+0xf8>)
   1fc9a:	4798      	blx	r3
   1fc9c:	0002      	movs	r2, r0
   1fc9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1fca0:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
   1fca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1fca4:	2b00      	cmp	r3, #0
   1fca6:	d002      	beq.n	1fcae <prvInitialiseNewTask+0xe6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
   1fca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1fcaa:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1fcac:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
   1fcae:	46c0      	nop			; (mov r8, r8)
   1fcb0:	46bd      	mov	sp, r7
   1fcb2:	b006      	add	sp, #24
   1fcb4:	bd80      	pop	{r7, pc}
   1fcb6:	46c0      	nop			; (mov r8, r8)
   1fcb8:	3fffffff 	.word	0x3fffffff
   1fcbc:	0001ee31 	.word	0x0001ee31
   1fcc0:	0001eb09 	.word	0x0001eb09

0001fcc4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
   1fcc4:	b580      	push	{r7, lr}
   1fcc6:	b082      	sub	sp, #8
   1fcc8:	af00      	add	r7, sp, #0
   1fcca:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
   1fccc:	4b29      	ldr	r3, [pc, #164]	; (1fd74 <prvAddNewTaskToReadyList+0xb0>)
   1fcce:	4798      	blx	r3
	{
		uxCurrentNumberOfTasks++;
   1fcd0:	4b29      	ldr	r3, [pc, #164]	; (1fd78 <prvAddNewTaskToReadyList+0xb4>)
   1fcd2:	681b      	ldr	r3, [r3, #0]
   1fcd4:	1c5a      	adds	r2, r3, #1
   1fcd6:	4b28      	ldr	r3, [pc, #160]	; (1fd78 <prvAddNewTaskToReadyList+0xb4>)
   1fcd8:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
   1fcda:	4b28      	ldr	r3, [pc, #160]	; (1fd7c <prvAddNewTaskToReadyList+0xb8>)
   1fcdc:	681b      	ldr	r3, [r3, #0]
   1fcde:	2b00      	cmp	r3, #0
   1fce0:	d109      	bne.n	1fcf6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
   1fce2:	4b26      	ldr	r3, [pc, #152]	; (1fd7c <prvAddNewTaskToReadyList+0xb8>)
   1fce4:	687a      	ldr	r2, [r7, #4]
   1fce6:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
   1fce8:	4b23      	ldr	r3, [pc, #140]	; (1fd78 <prvAddNewTaskToReadyList+0xb4>)
   1fcea:	681b      	ldr	r3, [r3, #0]
   1fcec:	2b01      	cmp	r3, #1
   1fcee:	d110      	bne.n	1fd12 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
   1fcf0:	4b23      	ldr	r3, [pc, #140]	; (1fd80 <prvAddNewTaskToReadyList+0xbc>)
   1fcf2:	4798      	blx	r3
   1fcf4:	e00d      	b.n	1fd12 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
   1fcf6:	4b23      	ldr	r3, [pc, #140]	; (1fd84 <prvAddNewTaskToReadyList+0xc0>)
   1fcf8:	681b      	ldr	r3, [r3, #0]
   1fcfa:	2b00      	cmp	r3, #0
   1fcfc:	d109      	bne.n	1fd12 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
   1fcfe:	4b1f      	ldr	r3, [pc, #124]	; (1fd7c <prvAddNewTaskToReadyList+0xb8>)
   1fd00:	681b      	ldr	r3, [r3, #0]
   1fd02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1fd04:	687b      	ldr	r3, [r7, #4]
   1fd06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1fd08:	429a      	cmp	r2, r3
   1fd0a:	d802      	bhi.n	1fd12 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
   1fd0c:	4b1b      	ldr	r3, [pc, #108]	; (1fd7c <prvAddNewTaskToReadyList+0xb8>)
   1fd0e:	687a      	ldr	r2, [r7, #4]
   1fd10:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
   1fd12:	4b1d      	ldr	r3, [pc, #116]	; (1fd88 <prvAddNewTaskToReadyList+0xc4>)
   1fd14:	681b      	ldr	r3, [r3, #0]
   1fd16:	1c5a      	adds	r2, r3, #1
   1fd18:	4b1b      	ldr	r3, [pc, #108]	; (1fd88 <prvAddNewTaskToReadyList+0xc4>)
   1fd1a:	601a      	str	r2, [r3, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
   1fd1c:	687b      	ldr	r3, [r7, #4]
   1fd1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1fd20:	4b1a      	ldr	r3, [pc, #104]	; (1fd8c <prvAddNewTaskToReadyList+0xc8>)
   1fd22:	681b      	ldr	r3, [r3, #0]
   1fd24:	429a      	cmp	r2, r3
   1fd26:	d903      	bls.n	1fd30 <prvAddNewTaskToReadyList+0x6c>
   1fd28:	687b      	ldr	r3, [r7, #4]
   1fd2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1fd2c:	4b17      	ldr	r3, [pc, #92]	; (1fd8c <prvAddNewTaskToReadyList+0xc8>)
   1fd2e:	601a      	str	r2, [r3, #0]
   1fd30:	687b      	ldr	r3, [r7, #4]
   1fd32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1fd34:	0013      	movs	r3, r2
   1fd36:	009b      	lsls	r3, r3, #2
   1fd38:	189b      	adds	r3, r3, r2
   1fd3a:	009b      	lsls	r3, r3, #2
   1fd3c:	4a14      	ldr	r2, [pc, #80]	; (1fd90 <prvAddNewTaskToReadyList+0xcc>)
   1fd3e:	189a      	adds	r2, r3, r2
   1fd40:	687b      	ldr	r3, [r7, #4]
   1fd42:	3304      	adds	r3, #4
   1fd44:	0019      	movs	r1, r3
   1fd46:	0010      	movs	r0, r2
   1fd48:	4b12      	ldr	r3, [pc, #72]	; (1fd94 <prvAddNewTaskToReadyList+0xd0>)
   1fd4a:	4798      	blx	r3

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
   1fd4c:	4b12      	ldr	r3, [pc, #72]	; (1fd98 <prvAddNewTaskToReadyList+0xd4>)
   1fd4e:	4798      	blx	r3

	if( xSchedulerRunning != pdFALSE )
   1fd50:	4b0c      	ldr	r3, [pc, #48]	; (1fd84 <prvAddNewTaskToReadyList+0xc0>)
   1fd52:	681b      	ldr	r3, [r3, #0]
   1fd54:	2b00      	cmp	r3, #0
   1fd56:	d008      	beq.n	1fd6a <prvAddNewTaskToReadyList+0xa6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
   1fd58:	4b08      	ldr	r3, [pc, #32]	; (1fd7c <prvAddNewTaskToReadyList+0xb8>)
   1fd5a:	681b      	ldr	r3, [r3, #0]
   1fd5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1fd5e:	687b      	ldr	r3, [r7, #4]
   1fd60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1fd62:	429a      	cmp	r2, r3
   1fd64:	d201      	bcs.n	1fd6a <prvAddNewTaskToReadyList+0xa6>
		{
			taskYIELD_IF_USING_PREEMPTION();
   1fd66:	4b0d      	ldr	r3, [pc, #52]	; (1fd9c <prvAddNewTaskToReadyList+0xd8>)
   1fd68:	4798      	blx	r3
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
   1fd6a:	46c0      	nop			; (mov r8, r8)
   1fd6c:	46bd      	mov	sp, r7
   1fd6e:	b002      	add	sp, #8
   1fd70:	bd80      	pop	{r7, pc}
   1fd72:	46c0      	nop			; (mov r8, r8)
   1fd74:	0001ec51 	.word	0x0001ec51
   1fd78:	20000590 	.word	0x20000590
   1fd7c:	200004b8 	.word	0x200004b8
   1fd80:	00020689 	.word	0x00020689
   1fd84:	2000059c 	.word	0x2000059c
   1fd88:	200005ac 	.word	0x200005ac
   1fd8c:	20000598 	.word	0x20000598
   1fd90:	200004bc 	.word	0x200004bc
   1fd94:	0001ee47 	.word	0x0001ee47
   1fd98:	0001ec75 	.word	0x0001ec75
   1fd9c:	0001ec31 	.word	0x0001ec31

0001fda0 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
   1fda0:	b580      	push	{r7, lr}
   1fda2:	b086      	sub	sp, #24
   1fda4:	af00      	add	r7, sp, #0
   1fda6:	6078      	str	r0, [r7, #4]
   1fda8:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
   1fdaa:	2300      	movs	r3, #0
   1fdac:	617b      	str	r3, [r7, #20]

		configASSERT( pxPreviousWakeTime );
   1fdae:	687b      	ldr	r3, [r7, #4]
   1fdb0:	2b00      	cmp	r3, #0
   1fdb2:	d101      	bne.n	1fdb8 <vTaskDelayUntil+0x18>
   1fdb4:	b672      	cpsid	i
   1fdb6:	e7fe      	b.n	1fdb6 <vTaskDelayUntil+0x16>
		configASSERT( ( xTimeIncrement > 0U ) );
   1fdb8:	683b      	ldr	r3, [r7, #0]
   1fdba:	2b00      	cmp	r3, #0
   1fdbc:	d101      	bne.n	1fdc2 <vTaskDelayUntil+0x22>
   1fdbe:	b672      	cpsid	i
   1fdc0:	e7fe      	b.n	1fdc0 <vTaskDelayUntil+0x20>
		configASSERT( uxSchedulerSuspended == 0 );
   1fdc2:	4b23      	ldr	r3, [pc, #140]	; (1fe50 <vTaskDelayUntil+0xb0>)
   1fdc4:	681b      	ldr	r3, [r3, #0]
   1fdc6:	2b00      	cmp	r3, #0
   1fdc8:	d001      	beq.n	1fdce <vTaskDelayUntil+0x2e>
   1fdca:	b672      	cpsid	i
   1fdcc:	e7fe      	b.n	1fdcc <vTaskDelayUntil+0x2c>

		vTaskSuspendAll();
   1fdce:	4b21      	ldr	r3, [pc, #132]	; (1fe54 <vTaskDelayUntil+0xb4>)
   1fdd0:	4798      	blx	r3
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
   1fdd2:	4b21      	ldr	r3, [pc, #132]	; (1fe58 <vTaskDelayUntil+0xb8>)
   1fdd4:	681b      	ldr	r3, [r3, #0]
   1fdd6:	613b      	str	r3, [r7, #16]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
   1fdd8:	687b      	ldr	r3, [r7, #4]
   1fdda:	681a      	ldr	r2, [r3, #0]
   1fddc:	683b      	ldr	r3, [r7, #0]
   1fdde:	18d3      	adds	r3, r2, r3
   1fde0:	60fb      	str	r3, [r7, #12]

			if( xConstTickCount < *pxPreviousWakeTime )
   1fde2:	687b      	ldr	r3, [r7, #4]
   1fde4:	681a      	ldr	r2, [r3, #0]
   1fde6:	693b      	ldr	r3, [r7, #16]
   1fde8:	429a      	cmp	r2, r3
   1fdea:	d90b      	bls.n	1fe04 <vTaskDelayUntil+0x64>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
   1fdec:	687b      	ldr	r3, [r7, #4]
   1fdee:	681a      	ldr	r2, [r3, #0]
   1fdf0:	68fb      	ldr	r3, [r7, #12]
   1fdf2:	429a      	cmp	r2, r3
   1fdf4:	d911      	bls.n	1fe1a <vTaskDelayUntil+0x7a>
   1fdf6:	68fa      	ldr	r2, [r7, #12]
   1fdf8:	693b      	ldr	r3, [r7, #16]
   1fdfa:	429a      	cmp	r2, r3
   1fdfc:	d90d      	bls.n	1fe1a <vTaskDelayUntil+0x7a>
				{
					xShouldDelay = pdTRUE;
   1fdfe:	2301      	movs	r3, #1
   1fe00:	617b      	str	r3, [r7, #20]
   1fe02:	e00a      	b.n	1fe1a <vTaskDelayUntil+0x7a>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
   1fe04:	687b      	ldr	r3, [r7, #4]
   1fe06:	681a      	ldr	r2, [r3, #0]
   1fe08:	68fb      	ldr	r3, [r7, #12]
   1fe0a:	429a      	cmp	r2, r3
   1fe0c:	d803      	bhi.n	1fe16 <vTaskDelayUntil+0x76>
   1fe0e:	68fa      	ldr	r2, [r7, #12]
   1fe10:	693b      	ldr	r3, [r7, #16]
   1fe12:	429a      	cmp	r2, r3
   1fe14:	d901      	bls.n	1fe1a <vTaskDelayUntil+0x7a>
				{
					xShouldDelay = pdTRUE;
   1fe16:	2301      	movs	r3, #1
   1fe18:	617b      	str	r3, [r7, #20]
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
   1fe1a:	687b      	ldr	r3, [r7, #4]
   1fe1c:	68fa      	ldr	r2, [r7, #12]
   1fe1e:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
   1fe20:	697b      	ldr	r3, [r7, #20]
   1fe22:	2b00      	cmp	r3, #0
   1fe24:	d006      	beq.n	1fe34 <vTaskDelayUntil+0x94>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
   1fe26:	68fa      	ldr	r2, [r7, #12]
   1fe28:	693b      	ldr	r3, [r7, #16]
   1fe2a:	1ad3      	subs	r3, r2, r3
   1fe2c:	2100      	movs	r1, #0
   1fe2e:	0018      	movs	r0, r3
   1fe30:	4b0a      	ldr	r3, [pc, #40]	; (1fe5c <vTaskDelayUntil+0xbc>)
   1fe32:	4798      	blx	r3
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
   1fe34:	4b0a      	ldr	r3, [pc, #40]	; (1fe60 <vTaskDelayUntil+0xc0>)
   1fe36:	4798      	blx	r3
   1fe38:	0003      	movs	r3, r0
   1fe3a:	60bb      	str	r3, [r7, #8]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
   1fe3c:	68bb      	ldr	r3, [r7, #8]
   1fe3e:	2b00      	cmp	r3, #0
   1fe40:	d101      	bne.n	1fe46 <vTaskDelayUntil+0xa6>
		{
			portYIELD_WITHIN_API();
   1fe42:	4b08      	ldr	r3, [pc, #32]	; (1fe64 <vTaskDelayUntil+0xc4>)
   1fe44:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
   1fe46:	46c0      	nop			; (mov r8, r8)
   1fe48:	46bd      	mov	sp, r7
   1fe4a:	b006      	add	sp, #24
   1fe4c:	bd80      	pop	{r7, pc}
   1fe4e:	46c0      	nop			; (mov r8, r8)
   1fe50:	200005b8 	.word	0x200005b8
   1fe54:	00020081 	.word	0x00020081
   1fe58:	20000594 	.word	0x20000594
   1fe5c:	00020c79 	.word	0x00020c79
   1fe60:	00020099 	.word	0x00020099
   1fe64:	0001ec31 	.word	0x0001ec31

0001fe68 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
   1fe68:	b580      	push	{r7, lr}
   1fe6a:	b084      	sub	sp, #16
   1fe6c:	af00      	add	r7, sp, #0
   1fe6e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
   1fe70:	2300      	movs	r3, #0
   1fe72:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
   1fe74:	687b      	ldr	r3, [r7, #4]
   1fe76:	2b00      	cmp	r3, #0
   1fe78:	d010      	beq.n	1fe9c <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
   1fe7a:	4b0d      	ldr	r3, [pc, #52]	; (1feb0 <vTaskDelay+0x48>)
   1fe7c:	681b      	ldr	r3, [r3, #0]
   1fe7e:	2b00      	cmp	r3, #0
   1fe80:	d001      	beq.n	1fe86 <vTaskDelay+0x1e>
   1fe82:	b672      	cpsid	i
   1fe84:	e7fe      	b.n	1fe84 <vTaskDelay+0x1c>
			vTaskSuspendAll();
   1fe86:	4b0b      	ldr	r3, [pc, #44]	; (1feb4 <vTaskDelay+0x4c>)
   1fe88:	4798      	blx	r3
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
   1fe8a:	687b      	ldr	r3, [r7, #4]
   1fe8c:	2100      	movs	r1, #0
   1fe8e:	0018      	movs	r0, r3
   1fe90:	4b09      	ldr	r3, [pc, #36]	; (1feb8 <vTaskDelay+0x50>)
   1fe92:	4798      	blx	r3
			}
			xAlreadyYielded = xTaskResumeAll();
   1fe94:	4b09      	ldr	r3, [pc, #36]	; (1febc <vTaskDelay+0x54>)
   1fe96:	4798      	blx	r3
   1fe98:	0003      	movs	r3, r0
   1fe9a:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
   1fe9c:	68fb      	ldr	r3, [r7, #12]
   1fe9e:	2b00      	cmp	r3, #0
   1fea0:	d101      	bne.n	1fea6 <vTaskDelay+0x3e>
		{
			portYIELD_WITHIN_API();
   1fea2:	4b07      	ldr	r3, [pc, #28]	; (1fec0 <vTaskDelay+0x58>)
   1fea4:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
   1fea6:	46c0      	nop			; (mov r8, r8)
   1fea8:	46bd      	mov	sp, r7
   1feaa:	b004      	add	sp, #16
   1feac:	bd80      	pop	{r7, pc}
   1feae:	46c0      	nop			; (mov r8, r8)
   1feb0:	200005b8 	.word	0x200005b8
   1feb4:	00020081 	.word	0x00020081
   1feb8:	00020c79 	.word	0x00020c79
   1febc:	00020099 	.word	0x00020099
   1fec0:	0001ec31 	.word	0x0001ec31

0001fec4 <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
	{
   1fec4:	b580      	push	{r7, lr}
   1fec6:	b086      	sub	sp, #24
   1fec8:	af00      	add	r7, sp, #0
   1feca:	6078      	str	r0, [r7, #4]
   1fecc:	6039      	str	r1, [r7, #0]
	TCB_t *pxTCB;
	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
	BaseType_t xYieldRequired = pdFALSE;
   1fece:	2300      	movs	r3, #0
   1fed0:	617b      	str	r3, [r7, #20]

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
   1fed2:	683b      	ldr	r3, [r7, #0]
   1fed4:	2b04      	cmp	r3, #4
   1fed6:	d901      	bls.n	1fedc <vTaskPrioritySet+0x18>
   1fed8:	b672      	cpsid	i
   1feda:	e7fe      	b.n	1feda <vTaskPrioritySet+0x16>

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
   1fedc:	683b      	ldr	r3, [r7, #0]
   1fede:	2b04      	cmp	r3, #4
   1fee0:	d901      	bls.n	1fee6 <vTaskPrioritySet+0x22>
		{
			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
   1fee2:	2304      	movs	r3, #4
   1fee4:	603b      	str	r3, [r7, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		taskENTER_CRITICAL();
   1fee6:	4b3d      	ldr	r3, [pc, #244]	; (1ffdc <vTaskPrioritySet+0x118>)
   1fee8:	4798      	blx	r3
		{
			/* If null is passed in here then it is the priority of the calling
			task that is being changed. */
			pxTCB = prvGetTCBFromHandle( xTask );
   1feea:	687b      	ldr	r3, [r7, #4]
   1feec:	2b00      	cmp	r3, #0
   1feee:	d102      	bne.n	1fef6 <vTaskPrioritySet+0x32>
   1fef0:	4b3b      	ldr	r3, [pc, #236]	; (1ffe0 <vTaskPrioritySet+0x11c>)
   1fef2:	681b      	ldr	r3, [r3, #0]
   1fef4:	e000      	b.n	1fef8 <vTaskPrioritySet+0x34>
   1fef6:	687b      	ldr	r3, [r7, #4]
   1fef8:	613b      	str	r3, [r7, #16]

			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentBasePriority = pxTCB->uxBasePriority;
   1fefa:	693b      	ldr	r3, [r7, #16]
   1fefc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1fefe:	60fb      	str	r3, [r7, #12]
			{
				uxCurrentBasePriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentBasePriority != uxNewPriority )
   1ff00:	68fa      	ldr	r2, [r7, #12]
   1ff02:	683b      	ldr	r3, [r7, #0]
   1ff04:	429a      	cmp	r2, r3
   1ff06:	d062      	beq.n	1ffce <vTaskPrioritySet+0x10a>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentBasePriority )
   1ff08:	683a      	ldr	r2, [r7, #0]
   1ff0a:	68fb      	ldr	r3, [r7, #12]
   1ff0c:	429a      	cmp	r2, r3
   1ff0e:	d90d      	bls.n	1ff2c <vTaskPrioritySet+0x68>
				{
					if( pxTCB != pxCurrentTCB )
   1ff10:	4b33      	ldr	r3, [pc, #204]	; (1ffe0 <vTaskPrioritySet+0x11c>)
   1ff12:	681b      	ldr	r3, [r3, #0]
   1ff14:	693a      	ldr	r2, [r7, #16]
   1ff16:	429a      	cmp	r2, r3
   1ff18:	d00f      	beq.n	1ff3a <vTaskPrioritySet+0x76>
					{
						/* The priority of a task other than the currently
						running task is being raised.  Is the priority being
						raised above that of the running task? */
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
   1ff1a:	4b31      	ldr	r3, [pc, #196]	; (1ffe0 <vTaskPrioritySet+0x11c>)
   1ff1c:	681b      	ldr	r3, [r3, #0]
   1ff1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1ff20:	683b      	ldr	r3, [r7, #0]
   1ff22:	429a      	cmp	r2, r3
   1ff24:	d809      	bhi.n	1ff3a <vTaskPrioritySet+0x76>
						{
							xYieldRequired = pdTRUE;
   1ff26:	2301      	movs	r3, #1
   1ff28:	617b      	str	r3, [r7, #20]
   1ff2a:	e006      	b.n	1ff3a <vTaskPrioritySet+0x76>
						/* The priority of the running task is being raised,
						but the running task must already be the highest
						priority task able to run so no yield is required. */
					}
				}
				else if( pxTCB == pxCurrentTCB )
   1ff2c:	4b2c      	ldr	r3, [pc, #176]	; (1ffe0 <vTaskPrioritySet+0x11c>)
   1ff2e:	681b      	ldr	r3, [r3, #0]
   1ff30:	693a      	ldr	r2, [r7, #16]
   1ff32:	429a      	cmp	r2, r3
   1ff34:	d101      	bne.n	1ff3a <vTaskPrioritySet+0x76>
				{
					/* Setting the priority of the running task down means
					there may now be another task of higher priority that
					is ready to execute. */
					xYieldRequired = pdTRUE;
   1ff36:	2301      	movs	r3, #1
   1ff38:	617b      	str	r3, [r7, #20]
				}

				/* Remember the ready list the task might be referenced from
				before its uxPriority member is changed so the
				taskRESET_READY_PRIORITY() macro can function correctly. */
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
   1ff3a:	693b      	ldr	r3, [r7, #16]
   1ff3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1ff3e:	60bb      	str	r3, [r7, #8]

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
   1ff40:	693b      	ldr	r3, [r7, #16]
   1ff42:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   1ff44:	693b      	ldr	r3, [r7, #16]
   1ff46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1ff48:	429a      	cmp	r2, r3
   1ff4a:	d102      	bne.n	1ff52 <vTaskPrioritySet+0x8e>
					{
						pxTCB->uxPriority = uxNewPriority;
   1ff4c:	693b      	ldr	r3, [r7, #16]
   1ff4e:	683a      	ldr	r2, [r7, #0]
   1ff50:	62da      	str	r2, [r3, #44]	; 0x2c
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
   1ff52:	693b      	ldr	r3, [r7, #16]
   1ff54:	683a      	ldr	r2, [r7, #0]
   1ff56:	641a      	str	r2, [r3, #64]	; 0x40
				}
				#endif

				/* Only reset the event list item value if the value is not
				being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
   1ff58:	693b      	ldr	r3, [r7, #16]
   1ff5a:	699b      	ldr	r3, [r3, #24]
   1ff5c:	2b00      	cmp	r3, #0
   1ff5e:	db04      	blt.n	1ff6a <vTaskPrioritySet+0xa6>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1ff60:	683b      	ldr	r3, [r7, #0]
   1ff62:	2205      	movs	r2, #5
   1ff64:	1ad2      	subs	r2, r2, r3
   1ff66:	693b      	ldr	r3, [r7, #16]
   1ff68:	619a      	str	r2, [r3, #24]

				/* If the task is in the blocked or suspended list we need do
				nothing more than change its priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the list appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
   1ff6a:	693b      	ldr	r3, [r7, #16]
   1ff6c:	6959      	ldr	r1, [r3, #20]
   1ff6e:	68ba      	ldr	r2, [r7, #8]
   1ff70:	0013      	movs	r3, r2
   1ff72:	009b      	lsls	r3, r3, #2
   1ff74:	189b      	adds	r3, r3, r2
   1ff76:	009b      	lsls	r3, r3, #2
   1ff78:	4a1a      	ldr	r2, [pc, #104]	; (1ffe4 <vTaskPrioritySet+0x120>)
   1ff7a:	189b      	adds	r3, r3, r2
   1ff7c:	4299      	cmp	r1, r3
   1ff7e:	d101      	bne.n	1ff84 <vTaskPrioritySet+0xc0>
   1ff80:	2301      	movs	r3, #1
   1ff82:	e000      	b.n	1ff86 <vTaskPrioritySet+0xc2>
   1ff84:	2300      	movs	r3, #0
   1ff86:	2b00      	cmp	r3, #0
   1ff88:	d01c      	beq.n	1ffc4 <vTaskPrioritySet+0x100>
				{
					/* The task is currently in its ready list - remove before
					adding it to it's new ready list.  As we are in a critical
					section we can do this even if the scheduler is suspended. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   1ff8a:	693b      	ldr	r3, [r7, #16]
   1ff8c:	3304      	adds	r3, #4
   1ff8e:	0018      	movs	r0, r3
   1ff90:	4b15      	ldr	r3, [pc, #84]	; (1ffe8 <vTaskPrioritySet+0x124>)
   1ff92:	4798      	blx	r3
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					prvAddTaskToReadyList( pxTCB );
   1ff94:	693b      	ldr	r3, [r7, #16]
   1ff96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1ff98:	4b14      	ldr	r3, [pc, #80]	; (1ffec <vTaskPrioritySet+0x128>)
   1ff9a:	681b      	ldr	r3, [r3, #0]
   1ff9c:	429a      	cmp	r2, r3
   1ff9e:	d903      	bls.n	1ffa8 <vTaskPrioritySet+0xe4>
   1ffa0:	693b      	ldr	r3, [r7, #16]
   1ffa2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1ffa4:	4b11      	ldr	r3, [pc, #68]	; (1ffec <vTaskPrioritySet+0x128>)
   1ffa6:	601a      	str	r2, [r3, #0]
   1ffa8:	693b      	ldr	r3, [r7, #16]
   1ffaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1ffac:	0013      	movs	r3, r2
   1ffae:	009b      	lsls	r3, r3, #2
   1ffb0:	189b      	adds	r3, r3, r2
   1ffb2:	009b      	lsls	r3, r3, #2
   1ffb4:	4a0b      	ldr	r2, [pc, #44]	; (1ffe4 <vTaskPrioritySet+0x120>)
   1ffb6:	189a      	adds	r2, r3, r2
   1ffb8:	693b      	ldr	r3, [r7, #16]
   1ffba:	3304      	adds	r3, #4
   1ffbc:	0019      	movs	r1, r3
   1ffbe:	0010      	movs	r0, r2
   1ffc0:	4b0b      	ldr	r3, [pc, #44]	; (1fff0 <vTaskPrioritySet+0x12c>)
   1ffc2:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldRequired != pdFALSE )
   1ffc4:	697b      	ldr	r3, [r7, #20]
   1ffc6:	2b00      	cmp	r3, #0
   1ffc8:	d001      	beq.n	1ffce <vTaskPrioritySet+0x10a>
				{
					taskYIELD_IF_USING_PREEMPTION();
   1ffca:	4b0a      	ldr	r3, [pc, #40]	; (1fff4 <vTaskPrioritySet+0x130>)
   1ffcc:	4798      	blx	r3
				/* Remove compiler warning about unused variables when the port
				optimised task selection is not being used. */
				( void ) uxPriorityUsedOnEntry;
			}
		}
		taskEXIT_CRITICAL();
   1ffce:	4b0a      	ldr	r3, [pc, #40]	; (1fff8 <vTaskPrioritySet+0x134>)
   1ffd0:	4798      	blx	r3
	}
   1ffd2:	46c0      	nop			; (mov r8, r8)
   1ffd4:	46bd      	mov	sp, r7
   1ffd6:	b006      	add	sp, #24
   1ffd8:	bd80      	pop	{r7, pc}
   1ffda:	46c0      	nop			; (mov r8, r8)
   1ffdc:	0001ec51 	.word	0x0001ec51
   1ffe0:	200004b8 	.word	0x200004b8
   1ffe4:	200004bc 	.word	0x200004bc
   1ffe8:	0001eef7 	.word	0x0001eef7
   1ffec:	20000598 	.word	0x20000598
   1fff0:	0001ee47 	.word	0x0001ee47
   1fff4:	0001ec31 	.word	0x0001ec31
   1fff8:	0001ec75 	.word	0x0001ec75

0001fffc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
   1fffc:	b590      	push	{r4, r7, lr}
   1fffe:	b085      	sub	sp, #20
   20000:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
   20002:	4916      	ldr	r1, [pc, #88]	; (2005c <vTaskStartScheduler+0x60>)
   20004:	4816      	ldr	r0, [pc, #88]	; (20060 <vTaskStartScheduler+0x64>)
   20006:	4b17      	ldr	r3, [pc, #92]	; (20064 <vTaskStartScheduler+0x68>)
   20008:	9301      	str	r3, [sp, #4]
   2000a:	2300      	movs	r3, #0
   2000c:	9300      	str	r3, [sp, #0]
   2000e:	2300      	movs	r3, #0
   20010:	2282      	movs	r2, #130	; 0x82
   20012:	4c15      	ldr	r4, [pc, #84]	; (20068 <vTaskStartScheduler+0x6c>)
   20014:	47a0      	blx	r4
   20016:	0003      	movs	r3, r0
   20018:	607b      	str	r3, [r7, #4]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
   2001a:	687b      	ldr	r3, [r7, #4]
   2001c:	2b01      	cmp	r3, #1
   2001e:	d103      	bne.n	20028 <vTaskStartScheduler+0x2c>
		{
			xReturn = xTimerCreateTimerTask();
   20020:	4b12      	ldr	r3, [pc, #72]	; (2006c <vTaskStartScheduler+0x70>)
   20022:	4798      	blx	r3
   20024:	0003      	movs	r3, r0
   20026:	607b      	str	r3, [r7, #4]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
   20028:	687b      	ldr	r3, [r7, #4]
   2002a:	2b01      	cmp	r3, #1
   2002c:	d10d      	bne.n	2004a <vTaskStartScheduler+0x4e>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
   2002e:	b672      	cpsid	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
   20030:	4b0f      	ldr	r3, [pc, #60]	; (20070 <vTaskStartScheduler+0x74>)
   20032:	2201      	movs	r2, #1
   20034:	4252      	negs	r2, r2
   20036:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
   20038:	4b0e      	ldr	r3, [pc, #56]	; (20074 <vTaskStartScheduler+0x78>)
   2003a:	2201      	movs	r2, #1
   2003c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
   2003e:	4b0e      	ldr	r3, [pc, #56]	; (20078 <vTaskStartScheduler+0x7c>)
   20040:	2200      	movs	r2, #0
   20042:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
   20044:	4b0d      	ldr	r3, [pc, #52]	; (2007c <vTaskStartScheduler+0x80>)
   20046:	4798      	blx	r3
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
   20048:	e004      	b.n	20054 <vTaskStartScheduler+0x58>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
   2004a:	687b      	ldr	r3, [r7, #4]
   2004c:	3301      	adds	r3, #1
   2004e:	d101      	bne.n	20054 <vTaskStartScheduler+0x58>
   20050:	b672      	cpsid	i
   20052:	e7fe      	b.n	20052 <vTaskStartScheduler+0x56>
}
   20054:	46c0      	nop			; (mov r8, r8)
   20056:	46bd      	mov	sp, r7
   20058:	b003      	add	sp, #12
   2005a:	bd90      	pop	{r4, r7, pc}
   2005c:	0002a8d8 	.word	0x0002a8d8
   20060:	00020661 	.word	0x00020661
   20064:	200005b4 	.word	0x200005b4
   20068:	0001fb29 	.word	0x0001fb29
   2006c:	00020d2d 	.word	0x00020d2d
   20070:	200005b0 	.word	0x200005b0
   20074:	2000059c 	.word	0x2000059c
   20078:	20000594 	.word	0x20000594
   2007c:	0001ebd9 	.word	0x0001ebd9

00020080 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
   20080:	b580      	push	{r7, lr}
   20082:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
   20084:	4b03      	ldr	r3, [pc, #12]	; (20094 <vTaskSuspendAll+0x14>)
   20086:	681b      	ldr	r3, [r3, #0]
   20088:	1c5a      	adds	r2, r3, #1
   2008a:	4b02      	ldr	r3, [pc, #8]	; (20094 <vTaskSuspendAll+0x14>)
   2008c:	601a      	str	r2, [r3, #0]
}
   2008e:	46c0      	nop			; (mov r8, r8)
   20090:	46bd      	mov	sp, r7
   20092:	bd80      	pop	{r7, pc}
   20094:	200005b8 	.word	0x200005b8

00020098 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
   20098:	b580      	push	{r7, lr}
   2009a:	b084      	sub	sp, #16
   2009c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
   2009e:	2300      	movs	r3, #0
   200a0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
   200a2:	2300      	movs	r3, #0
   200a4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
   200a6:	4b3a      	ldr	r3, [pc, #232]	; (20190 <xTaskResumeAll+0xf8>)
   200a8:	681b      	ldr	r3, [r3, #0]
   200aa:	2b00      	cmp	r3, #0
   200ac:	d101      	bne.n	200b2 <xTaskResumeAll+0x1a>
   200ae:	b672      	cpsid	i
   200b0:	e7fe      	b.n	200b0 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
   200b2:	4b38      	ldr	r3, [pc, #224]	; (20194 <xTaskResumeAll+0xfc>)
   200b4:	4798      	blx	r3
	{
		--uxSchedulerSuspended;
   200b6:	4b36      	ldr	r3, [pc, #216]	; (20190 <xTaskResumeAll+0xf8>)
   200b8:	681b      	ldr	r3, [r3, #0]
   200ba:	1e5a      	subs	r2, r3, #1
   200bc:	4b34      	ldr	r3, [pc, #208]	; (20190 <xTaskResumeAll+0xf8>)
   200be:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   200c0:	4b33      	ldr	r3, [pc, #204]	; (20190 <xTaskResumeAll+0xf8>)
   200c2:	681b      	ldr	r3, [r3, #0]
   200c4:	2b00      	cmp	r3, #0
   200c6:	d15b      	bne.n	20180 <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
   200c8:	4b33      	ldr	r3, [pc, #204]	; (20198 <xTaskResumeAll+0x100>)
   200ca:	681b      	ldr	r3, [r3, #0]
   200cc:	2b00      	cmp	r3, #0
   200ce:	d057      	beq.n	20180 <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
   200d0:	e02f      	b.n	20132 <xTaskResumeAll+0x9a>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
   200d2:	4b32      	ldr	r3, [pc, #200]	; (2019c <xTaskResumeAll+0x104>)
   200d4:	68db      	ldr	r3, [r3, #12]
   200d6:	68db      	ldr	r3, [r3, #12]
   200d8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   200da:	68fb      	ldr	r3, [r7, #12]
   200dc:	3318      	adds	r3, #24
   200de:	0018      	movs	r0, r3
   200e0:	4b2f      	ldr	r3, [pc, #188]	; (201a0 <xTaskResumeAll+0x108>)
   200e2:	4798      	blx	r3
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   200e4:	68fb      	ldr	r3, [r7, #12]
   200e6:	3304      	adds	r3, #4
   200e8:	0018      	movs	r0, r3
   200ea:	4b2d      	ldr	r3, [pc, #180]	; (201a0 <xTaskResumeAll+0x108>)
   200ec:	4798      	blx	r3
					prvAddTaskToReadyList( pxTCB );
   200ee:	68fb      	ldr	r3, [r7, #12]
   200f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   200f2:	4b2c      	ldr	r3, [pc, #176]	; (201a4 <xTaskResumeAll+0x10c>)
   200f4:	681b      	ldr	r3, [r3, #0]
   200f6:	429a      	cmp	r2, r3
   200f8:	d903      	bls.n	20102 <xTaskResumeAll+0x6a>
   200fa:	68fb      	ldr	r3, [r7, #12]
   200fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   200fe:	4b29      	ldr	r3, [pc, #164]	; (201a4 <xTaskResumeAll+0x10c>)
   20100:	601a      	str	r2, [r3, #0]
   20102:	68fb      	ldr	r3, [r7, #12]
   20104:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   20106:	0013      	movs	r3, r2
   20108:	009b      	lsls	r3, r3, #2
   2010a:	189b      	adds	r3, r3, r2
   2010c:	009b      	lsls	r3, r3, #2
   2010e:	4a26      	ldr	r2, [pc, #152]	; (201a8 <xTaskResumeAll+0x110>)
   20110:	189a      	adds	r2, r3, r2
   20112:	68fb      	ldr	r3, [r7, #12]
   20114:	3304      	adds	r3, #4
   20116:	0019      	movs	r1, r3
   20118:	0010      	movs	r0, r2
   2011a:	4b24      	ldr	r3, [pc, #144]	; (201ac <xTaskResumeAll+0x114>)
   2011c:	4798      	blx	r3

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   2011e:	68fb      	ldr	r3, [r7, #12]
   20120:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   20122:	4b23      	ldr	r3, [pc, #140]	; (201b0 <xTaskResumeAll+0x118>)
   20124:	681b      	ldr	r3, [r3, #0]
   20126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   20128:	429a      	cmp	r2, r3
   2012a:	d302      	bcc.n	20132 <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
   2012c:	4b21      	ldr	r3, [pc, #132]	; (201b4 <xTaskResumeAll+0x11c>)
   2012e:	2201      	movs	r2, #1
   20130:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
   20132:	4b1a      	ldr	r3, [pc, #104]	; (2019c <xTaskResumeAll+0x104>)
   20134:	681b      	ldr	r3, [r3, #0]
   20136:	2b00      	cmp	r3, #0
   20138:	d1cb      	bne.n	200d2 <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
   2013a:	68fb      	ldr	r3, [r7, #12]
   2013c:	2b00      	cmp	r3, #0
   2013e:	d001      	beq.n	20144 <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
   20140:	4b1d      	ldr	r3, [pc, #116]	; (201b8 <xTaskResumeAll+0x120>)
   20142:	4798      	blx	r3
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
   20144:	4b1d      	ldr	r3, [pc, #116]	; (201bc <xTaskResumeAll+0x124>)
   20146:	681b      	ldr	r3, [r3, #0]
   20148:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
   2014a:	687b      	ldr	r3, [r7, #4]
   2014c:	2b00      	cmp	r3, #0
   2014e:	d00f      	beq.n	20170 <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
   20150:	4b1b      	ldr	r3, [pc, #108]	; (201c0 <xTaskResumeAll+0x128>)
   20152:	4798      	blx	r3
   20154:	1e03      	subs	r3, r0, #0
   20156:	d002      	beq.n	2015e <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
   20158:	4b16      	ldr	r3, [pc, #88]	; (201b4 <xTaskResumeAll+0x11c>)
   2015a:	2201      	movs	r2, #1
   2015c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
   2015e:	687b      	ldr	r3, [r7, #4]
   20160:	3b01      	subs	r3, #1
   20162:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
   20164:	687b      	ldr	r3, [r7, #4]
   20166:	2b00      	cmp	r3, #0
   20168:	d1f2      	bne.n	20150 <xTaskResumeAll+0xb8>

						uxPendedTicks = 0;
   2016a:	4b14      	ldr	r3, [pc, #80]	; (201bc <xTaskResumeAll+0x124>)
   2016c:	2200      	movs	r2, #0
   2016e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
   20170:	4b10      	ldr	r3, [pc, #64]	; (201b4 <xTaskResumeAll+0x11c>)
   20172:	681b      	ldr	r3, [r3, #0]
   20174:	2b00      	cmp	r3, #0
   20176:	d003      	beq.n	20180 <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
   20178:	2301      	movs	r3, #1
   2017a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
   2017c:	4b11      	ldr	r3, [pc, #68]	; (201c4 <xTaskResumeAll+0x12c>)
   2017e:	4798      	blx	r3
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
   20180:	4b11      	ldr	r3, [pc, #68]	; (201c8 <xTaskResumeAll+0x130>)
   20182:	4798      	blx	r3

	return xAlreadyYielded;
   20184:	68bb      	ldr	r3, [r7, #8]
}
   20186:	0018      	movs	r0, r3
   20188:	46bd      	mov	sp, r7
   2018a:	b004      	add	sp, #16
   2018c:	bd80      	pop	{r7, pc}
   2018e:	46c0      	nop			; (mov r8, r8)
   20190:	200005b8 	.word	0x200005b8
   20194:	0001ec51 	.word	0x0001ec51
   20198:	20000590 	.word	0x20000590
   2019c:	20000550 	.word	0x20000550
   201a0:	0001eef7 	.word	0x0001eef7
   201a4:	20000598 	.word	0x20000598
   201a8:	200004bc 	.word	0x200004bc
   201ac:	0001ee47 	.word	0x0001ee47
   201b0:	200004b8 	.word	0x200004b8
   201b4:	200005a4 	.word	0x200005a4
   201b8:	000207a9 	.word	0x000207a9
   201bc:	200005a0 	.word	0x200005a0
   201c0:	00020209 	.word	0x00020209
   201c4:	0001ec31 	.word	0x0001ec31
   201c8:	0001ec75 	.word	0x0001ec75

000201cc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
   201cc:	b580      	push	{r7, lr}
   201ce:	b082      	sub	sp, #8
   201d0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
   201d2:	4b04      	ldr	r3, [pc, #16]	; (201e4 <xTaskGetTickCount+0x18>)
   201d4:	681b      	ldr	r3, [r3, #0]
   201d6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
   201d8:	687b      	ldr	r3, [r7, #4]
}
   201da:	0018      	movs	r0, r3
   201dc:	46bd      	mov	sp, r7
   201de:	b002      	add	sp, #8
   201e0:	bd80      	pop	{r7, pc}
   201e2:	46c0      	nop			; (mov r8, r8)
   201e4:	20000594 	.word	0x20000594

000201e8 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
   201e8:	b580      	push	{r7, lr}
   201ea:	b082      	sub	sp, #8
   201ec:	af00      	add	r7, sp, #0
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
   201ee:	2300      	movs	r3, #0
   201f0:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
   201f2:	4b04      	ldr	r3, [pc, #16]	; (20204 <xTaskGetTickCountFromISR+0x1c>)
   201f4:	681b      	ldr	r3, [r3, #0]
   201f6:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
   201f8:	683b      	ldr	r3, [r7, #0]
}
   201fa:	0018      	movs	r0, r3
   201fc:	46bd      	mov	sp, r7
   201fe:	b002      	add	sp, #8
   20200:	bd80      	pop	{r7, pc}
   20202:	46c0      	nop			; (mov r8, r8)
   20204:	20000594 	.word	0x20000594

00020208 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
   20208:	b580      	push	{r7, lr}
   2020a:	b086      	sub	sp, #24
   2020c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
   2020e:	2300      	movs	r3, #0
   20210:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   20212:	4b4c      	ldr	r3, [pc, #304]	; (20344 <xTaskIncrementTick+0x13c>)
   20214:	681b      	ldr	r3, [r3, #0]
   20216:	2b00      	cmp	r3, #0
   20218:	d000      	beq.n	2021c <xTaskIncrementTick+0x14>
   2021a:	e083      	b.n	20324 <xTaskIncrementTick+0x11c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
   2021c:	4b4a      	ldr	r3, [pc, #296]	; (20348 <xTaskIncrementTick+0x140>)
   2021e:	681b      	ldr	r3, [r3, #0]
   20220:	3301      	adds	r3, #1
   20222:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
   20224:	4b48      	ldr	r3, [pc, #288]	; (20348 <xTaskIncrementTick+0x140>)
   20226:	693a      	ldr	r2, [r7, #16]
   20228:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
   2022a:	693b      	ldr	r3, [r7, #16]
   2022c:	2b00      	cmp	r3, #0
   2022e:	d117      	bne.n	20260 <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
   20230:	4b46      	ldr	r3, [pc, #280]	; (2034c <xTaskIncrementTick+0x144>)
   20232:	681b      	ldr	r3, [r3, #0]
   20234:	681b      	ldr	r3, [r3, #0]
   20236:	2b00      	cmp	r3, #0
   20238:	d001      	beq.n	2023e <xTaskIncrementTick+0x36>
   2023a:	b672      	cpsid	i
   2023c:	e7fe      	b.n	2023c <xTaskIncrementTick+0x34>
   2023e:	4b43      	ldr	r3, [pc, #268]	; (2034c <xTaskIncrementTick+0x144>)
   20240:	681b      	ldr	r3, [r3, #0]
   20242:	60fb      	str	r3, [r7, #12]
   20244:	4b42      	ldr	r3, [pc, #264]	; (20350 <xTaskIncrementTick+0x148>)
   20246:	681a      	ldr	r2, [r3, #0]
   20248:	4b40      	ldr	r3, [pc, #256]	; (2034c <xTaskIncrementTick+0x144>)
   2024a:	601a      	str	r2, [r3, #0]
   2024c:	4b40      	ldr	r3, [pc, #256]	; (20350 <xTaskIncrementTick+0x148>)
   2024e:	68fa      	ldr	r2, [r7, #12]
   20250:	601a      	str	r2, [r3, #0]
   20252:	4b40      	ldr	r3, [pc, #256]	; (20354 <xTaskIncrementTick+0x14c>)
   20254:	681b      	ldr	r3, [r3, #0]
   20256:	1c5a      	adds	r2, r3, #1
   20258:	4b3e      	ldr	r3, [pc, #248]	; (20354 <xTaskIncrementTick+0x14c>)
   2025a:	601a      	str	r2, [r3, #0]
   2025c:	4b3e      	ldr	r3, [pc, #248]	; (20358 <xTaskIncrementTick+0x150>)
   2025e:	4798      	blx	r3

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
   20260:	4b3e      	ldr	r3, [pc, #248]	; (2035c <xTaskIncrementTick+0x154>)
   20262:	681b      	ldr	r3, [r3, #0]
   20264:	693a      	ldr	r2, [r7, #16]
   20266:	429a      	cmp	r2, r3
   20268:	d34e      	bcc.n	20308 <xTaskIncrementTick+0x100>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   2026a:	4b38      	ldr	r3, [pc, #224]	; (2034c <xTaskIncrementTick+0x144>)
   2026c:	681b      	ldr	r3, [r3, #0]
   2026e:	681b      	ldr	r3, [r3, #0]
   20270:	2b00      	cmp	r3, #0
   20272:	d101      	bne.n	20278 <xTaskIncrementTick+0x70>
   20274:	2301      	movs	r3, #1
   20276:	e000      	b.n	2027a <xTaskIncrementTick+0x72>
   20278:	2300      	movs	r3, #0
   2027a:	2b00      	cmp	r3, #0
   2027c:	d004      	beq.n	20288 <xTaskIncrementTick+0x80>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   2027e:	4b37      	ldr	r3, [pc, #220]	; (2035c <xTaskIncrementTick+0x154>)
   20280:	2201      	movs	r2, #1
   20282:	4252      	negs	r2, r2
   20284:	601a      	str	r2, [r3, #0]
					break;
   20286:	e03f      	b.n	20308 <xTaskIncrementTick+0x100>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   20288:	4b30      	ldr	r3, [pc, #192]	; (2034c <xTaskIncrementTick+0x144>)
   2028a:	681b      	ldr	r3, [r3, #0]
   2028c:	68db      	ldr	r3, [r3, #12]
   2028e:	68db      	ldr	r3, [r3, #12]
   20290:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
   20292:	68bb      	ldr	r3, [r7, #8]
   20294:	685b      	ldr	r3, [r3, #4]
   20296:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
   20298:	693a      	ldr	r2, [r7, #16]
   2029a:	687b      	ldr	r3, [r7, #4]
   2029c:	429a      	cmp	r2, r3
   2029e:	d203      	bcs.n	202a8 <xTaskIncrementTick+0xa0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
   202a0:	4b2e      	ldr	r3, [pc, #184]	; (2035c <xTaskIncrementTick+0x154>)
   202a2:	687a      	ldr	r2, [r7, #4]
   202a4:	601a      	str	r2, [r3, #0]
						break;
   202a6:	e02f      	b.n	20308 <xTaskIncrementTick+0x100>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   202a8:	68bb      	ldr	r3, [r7, #8]
   202aa:	3304      	adds	r3, #4
   202ac:	0018      	movs	r0, r3
   202ae:	4b2c      	ldr	r3, [pc, #176]	; (20360 <xTaskIncrementTick+0x158>)
   202b0:	4798      	blx	r3

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
   202b2:	68bb      	ldr	r3, [r7, #8]
   202b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   202b6:	2b00      	cmp	r3, #0
   202b8:	d004      	beq.n	202c4 <xTaskIncrementTick+0xbc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   202ba:	68bb      	ldr	r3, [r7, #8]
   202bc:	3318      	adds	r3, #24
   202be:	0018      	movs	r0, r3
   202c0:	4b27      	ldr	r3, [pc, #156]	; (20360 <xTaskIncrementTick+0x158>)
   202c2:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
   202c4:	68bb      	ldr	r3, [r7, #8]
   202c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   202c8:	4b26      	ldr	r3, [pc, #152]	; (20364 <xTaskIncrementTick+0x15c>)
   202ca:	681b      	ldr	r3, [r3, #0]
   202cc:	429a      	cmp	r2, r3
   202ce:	d903      	bls.n	202d8 <xTaskIncrementTick+0xd0>
   202d0:	68bb      	ldr	r3, [r7, #8]
   202d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   202d4:	4b23      	ldr	r3, [pc, #140]	; (20364 <xTaskIncrementTick+0x15c>)
   202d6:	601a      	str	r2, [r3, #0]
   202d8:	68bb      	ldr	r3, [r7, #8]
   202da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   202dc:	0013      	movs	r3, r2
   202de:	009b      	lsls	r3, r3, #2
   202e0:	189b      	adds	r3, r3, r2
   202e2:	009b      	lsls	r3, r3, #2
   202e4:	4a20      	ldr	r2, [pc, #128]	; (20368 <xTaskIncrementTick+0x160>)
   202e6:	189a      	adds	r2, r3, r2
   202e8:	68bb      	ldr	r3, [r7, #8]
   202ea:	3304      	adds	r3, #4
   202ec:	0019      	movs	r1, r3
   202ee:	0010      	movs	r0, r2
   202f0:	4b1e      	ldr	r3, [pc, #120]	; (2036c <xTaskIncrementTick+0x164>)
   202f2:	4798      	blx	r3
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   202f4:	68bb      	ldr	r3, [r7, #8]
   202f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   202f8:	4b1d      	ldr	r3, [pc, #116]	; (20370 <xTaskIncrementTick+0x168>)
   202fa:	681b      	ldr	r3, [r3, #0]
   202fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   202fe:	429a      	cmp	r2, r3
   20300:	d3b3      	bcc.n	2026a <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
   20302:	2301      	movs	r3, #1
   20304:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   20306:	e7b0      	b.n	2026a <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
   20308:	4b19      	ldr	r3, [pc, #100]	; (20370 <xTaskIncrementTick+0x168>)
   2030a:	681b      	ldr	r3, [r3, #0]
   2030c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2030e:	4916      	ldr	r1, [pc, #88]	; (20368 <xTaskIncrementTick+0x160>)
   20310:	0013      	movs	r3, r2
   20312:	009b      	lsls	r3, r3, #2
   20314:	189b      	adds	r3, r3, r2
   20316:	009b      	lsls	r3, r3, #2
   20318:	585b      	ldr	r3, [r3, r1]
   2031a:	2b01      	cmp	r3, #1
   2031c:	d907      	bls.n	2032e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
   2031e:	2301      	movs	r3, #1
   20320:	617b      	str	r3, [r7, #20]
   20322:	e004      	b.n	2032e <xTaskIncrementTick+0x126>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
   20324:	4b13      	ldr	r3, [pc, #76]	; (20374 <xTaskIncrementTick+0x16c>)
   20326:	681b      	ldr	r3, [r3, #0]
   20328:	1c5a      	adds	r2, r3, #1
   2032a:	4b12      	ldr	r3, [pc, #72]	; (20374 <xTaskIncrementTick+0x16c>)
   2032c:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
   2032e:	4b12      	ldr	r3, [pc, #72]	; (20378 <xTaskIncrementTick+0x170>)
   20330:	681b      	ldr	r3, [r3, #0]
   20332:	2b00      	cmp	r3, #0
   20334:	d001      	beq.n	2033a <xTaskIncrementTick+0x132>
		{
			xSwitchRequired = pdTRUE;
   20336:	2301      	movs	r3, #1
   20338:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
   2033a:	697b      	ldr	r3, [r7, #20]
}
   2033c:	0018      	movs	r0, r3
   2033e:	46bd      	mov	sp, r7
   20340:	b006      	add	sp, #24
   20342:	bd80      	pop	{r7, pc}
   20344:	200005b8 	.word	0x200005b8
   20348:	20000594 	.word	0x20000594
   2034c:	20000548 	.word	0x20000548
   20350:	2000054c 	.word	0x2000054c
   20354:	200005a8 	.word	0x200005a8
   20358:	000207a9 	.word	0x000207a9
   2035c:	200005b0 	.word	0x200005b0
   20360:	0001eef7 	.word	0x0001eef7
   20364:	20000598 	.word	0x20000598
   20368:	200004bc 	.word	0x200004bc
   2036c:	0001ee47 	.word	0x0001ee47
   20370:	200004b8 	.word	0x200004b8
   20374:	200005a0 	.word	0x200005a0
   20378:	200005a4 	.word	0x200005a4

0002037c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
   2037c:	b580      	push	{r7, lr}
   2037e:	b082      	sub	sp, #8
   20380:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
   20382:	4b22      	ldr	r3, [pc, #136]	; (2040c <vTaskSwitchContext+0x90>)
   20384:	681b      	ldr	r3, [r3, #0]
   20386:	2b00      	cmp	r3, #0
   20388:	d003      	beq.n	20392 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
   2038a:	4b21      	ldr	r3, [pc, #132]	; (20410 <vTaskSwitchContext+0x94>)
   2038c:	2201      	movs	r2, #1
   2038e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
   20390:	e037      	b.n	20402 <vTaskSwitchContext+0x86>
		xYieldPending = pdFALSE;
   20392:	4b1f      	ldr	r3, [pc, #124]	; (20410 <vTaskSwitchContext+0x94>)
   20394:	2200      	movs	r2, #0
   20396:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
   20398:	4b1e      	ldr	r3, [pc, #120]	; (20414 <vTaskSwitchContext+0x98>)
   2039a:	681b      	ldr	r3, [r3, #0]
   2039c:	607b      	str	r3, [r7, #4]
   2039e:	e007      	b.n	203b0 <vTaskSwitchContext+0x34>
   203a0:	687b      	ldr	r3, [r7, #4]
   203a2:	2b00      	cmp	r3, #0
   203a4:	d101      	bne.n	203aa <vTaskSwitchContext+0x2e>
   203a6:	b672      	cpsid	i
   203a8:	e7fe      	b.n	203a8 <vTaskSwitchContext+0x2c>
   203aa:	687b      	ldr	r3, [r7, #4]
   203ac:	3b01      	subs	r3, #1
   203ae:	607b      	str	r3, [r7, #4]
   203b0:	4919      	ldr	r1, [pc, #100]	; (20418 <vTaskSwitchContext+0x9c>)
   203b2:	687a      	ldr	r2, [r7, #4]
   203b4:	0013      	movs	r3, r2
   203b6:	009b      	lsls	r3, r3, #2
   203b8:	189b      	adds	r3, r3, r2
   203ba:	009b      	lsls	r3, r3, #2
   203bc:	585b      	ldr	r3, [r3, r1]
   203be:	2b00      	cmp	r3, #0
   203c0:	d0ee      	beq.n	203a0 <vTaskSwitchContext+0x24>
   203c2:	687a      	ldr	r2, [r7, #4]
   203c4:	0013      	movs	r3, r2
   203c6:	009b      	lsls	r3, r3, #2
   203c8:	189b      	adds	r3, r3, r2
   203ca:	009b      	lsls	r3, r3, #2
   203cc:	4a12      	ldr	r2, [pc, #72]	; (20418 <vTaskSwitchContext+0x9c>)
   203ce:	189b      	adds	r3, r3, r2
   203d0:	603b      	str	r3, [r7, #0]
   203d2:	683b      	ldr	r3, [r7, #0]
   203d4:	685b      	ldr	r3, [r3, #4]
   203d6:	685a      	ldr	r2, [r3, #4]
   203d8:	683b      	ldr	r3, [r7, #0]
   203da:	605a      	str	r2, [r3, #4]
   203dc:	683b      	ldr	r3, [r7, #0]
   203de:	685a      	ldr	r2, [r3, #4]
   203e0:	683b      	ldr	r3, [r7, #0]
   203e2:	3308      	adds	r3, #8
   203e4:	429a      	cmp	r2, r3
   203e6:	d104      	bne.n	203f2 <vTaskSwitchContext+0x76>
   203e8:	683b      	ldr	r3, [r7, #0]
   203ea:	685b      	ldr	r3, [r3, #4]
   203ec:	685a      	ldr	r2, [r3, #4]
   203ee:	683b      	ldr	r3, [r7, #0]
   203f0:	605a      	str	r2, [r3, #4]
   203f2:	683b      	ldr	r3, [r7, #0]
   203f4:	685b      	ldr	r3, [r3, #4]
   203f6:	68da      	ldr	r2, [r3, #12]
   203f8:	4b08      	ldr	r3, [pc, #32]	; (2041c <vTaskSwitchContext+0xa0>)
   203fa:	601a      	str	r2, [r3, #0]
   203fc:	4b05      	ldr	r3, [pc, #20]	; (20414 <vTaskSwitchContext+0x98>)
   203fe:	687a      	ldr	r2, [r7, #4]
   20400:	601a      	str	r2, [r3, #0]
}
   20402:	46c0      	nop			; (mov r8, r8)
   20404:	46bd      	mov	sp, r7
   20406:	b002      	add	sp, #8
   20408:	bd80      	pop	{r7, pc}
   2040a:	46c0      	nop			; (mov r8, r8)
   2040c:	200005b8 	.word	0x200005b8
   20410:	200005a4 	.word	0x200005a4
   20414:	20000598 	.word	0x20000598
   20418:	200004bc 	.word	0x200004bc
   2041c:	200004b8 	.word	0x200004b8

00020420 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
   20420:	b580      	push	{r7, lr}
   20422:	b082      	sub	sp, #8
   20424:	af00      	add	r7, sp, #0
   20426:	6078      	str	r0, [r7, #4]
   20428:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
   2042a:	687b      	ldr	r3, [r7, #4]
   2042c:	2b00      	cmp	r3, #0
   2042e:	d101      	bne.n	20434 <vTaskPlaceOnEventList+0x14>
   20430:	b672      	cpsid	i
   20432:	e7fe      	b.n	20432 <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
   20434:	4b08      	ldr	r3, [pc, #32]	; (20458 <vTaskPlaceOnEventList+0x38>)
   20436:	681b      	ldr	r3, [r3, #0]
   20438:	3318      	adds	r3, #24
   2043a:	001a      	movs	r2, r3
   2043c:	687b      	ldr	r3, [r7, #4]
   2043e:	0011      	movs	r1, r2
   20440:	0018      	movs	r0, r3
   20442:	4b06      	ldr	r3, [pc, #24]	; (2045c <vTaskPlaceOnEventList+0x3c>)
   20444:	4798      	blx	r3

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
   20446:	683b      	ldr	r3, [r7, #0]
   20448:	2101      	movs	r1, #1
   2044a:	0018      	movs	r0, r3
   2044c:	4b04      	ldr	r3, [pc, #16]	; (20460 <vTaskPlaceOnEventList+0x40>)
   2044e:	4798      	blx	r3
}
   20450:	46c0      	nop			; (mov r8, r8)
   20452:	46bd      	mov	sp, r7
   20454:	b002      	add	sp, #8
   20456:	bd80      	pop	{r7, pc}
   20458:	200004b8 	.word	0x200004b8
   2045c:	0001ee8b 	.word	0x0001ee8b
   20460:	00020c79 	.word	0x00020c79

00020464 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
   20464:	b580      	push	{r7, lr}
   20466:	b084      	sub	sp, #16
   20468:	af00      	add	r7, sp, #0
   2046a:	60f8      	str	r0, [r7, #12]
   2046c:	60b9      	str	r1, [r7, #8]
   2046e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
   20470:	68fb      	ldr	r3, [r7, #12]
   20472:	2b00      	cmp	r3, #0
   20474:	d101      	bne.n	2047a <vTaskPlaceOnEventListRestricted+0x16>
   20476:	b672      	cpsid	i
   20478:	e7fe      	b.n	20478 <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
   2047a:	4b0c      	ldr	r3, [pc, #48]	; (204ac <vTaskPlaceOnEventListRestricted+0x48>)
   2047c:	681b      	ldr	r3, [r3, #0]
   2047e:	3318      	adds	r3, #24
   20480:	001a      	movs	r2, r3
   20482:	68fb      	ldr	r3, [r7, #12]
   20484:	0011      	movs	r1, r2
   20486:	0018      	movs	r0, r3
   20488:	4b09      	ldr	r3, [pc, #36]	; (204b0 <vTaskPlaceOnEventListRestricted+0x4c>)
   2048a:	4798      	blx	r3

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
   2048c:	687b      	ldr	r3, [r7, #4]
   2048e:	2b00      	cmp	r3, #0
   20490:	d002      	beq.n	20498 <vTaskPlaceOnEventListRestricted+0x34>
		{
			xTicksToWait = portMAX_DELAY;
   20492:	2301      	movs	r3, #1
   20494:	425b      	negs	r3, r3
   20496:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
   20498:	687a      	ldr	r2, [r7, #4]
   2049a:	68bb      	ldr	r3, [r7, #8]
   2049c:	0011      	movs	r1, r2
   2049e:	0018      	movs	r0, r3
   204a0:	4b04      	ldr	r3, [pc, #16]	; (204b4 <vTaskPlaceOnEventListRestricted+0x50>)
   204a2:	4798      	blx	r3
	}
   204a4:	46c0      	nop			; (mov r8, r8)
   204a6:	46bd      	mov	sp, r7
   204a8:	b004      	add	sp, #16
   204aa:	bd80      	pop	{r7, pc}
   204ac:	200004b8 	.word	0x200004b8
   204b0:	0001ee47 	.word	0x0001ee47
   204b4:	00020c79 	.word	0x00020c79

000204b8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
   204b8:	b580      	push	{r7, lr}
   204ba:	b084      	sub	sp, #16
   204bc:	af00      	add	r7, sp, #0
   204be:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
   204c0:	687b      	ldr	r3, [r7, #4]
   204c2:	68db      	ldr	r3, [r3, #12]
   204c4:	68db      	ldr	r3, [r3, #12]
   204c6:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
   204c8:	68bb      	ldr	r3, [r7, #8]
   204ca:	2b00      	cmp	r3, #0
   204cc:	d101      	bne.n	204d2 <xTaskRemoveFromEventList+0x1a>
   204ce:	b672      	cpsid	i
   204d0:	e7fe      	b.n	204d0 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
   204d2:	68bb      	ldr	r3, [r7, #8]
   204d4:	3318      	adds	r3, #24
   204d6:	0018      	movs	r0, r3
   204d8:	4b1f      	ldr	r3, [pc, #124]	; (20558 <xTaskRemoveFromEventList+0xa0>)
   204da:	4798      	blx	r3

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   204dc:	4b1f      	ldr	r3, [pc, #124]	; (2055c <xTaskRemoveFromEventList+0xa4>)
   204de:	681b      	ldr	r3, [r3, #0]
   204e0:	2b00      	cmp	r3, #0
   204e2:	d11d      	bne.n	20520 <xTaskRemoveFromEventList+0x68>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
   204e4:	68bb      	ldr	r3, [r7, #8]
   204e6:	3304      	adds	r3, #4
   204e8:	0018      	movs	r0, r3
   204ea:	4b1b      	ldr	r3, [pc, #108]	; (20558 <xTaskRemoveFromEventList+0xa0>)
   204ec:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
   204ee:	68bb      	ldr	r3, [r7, #8]
   204f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   204f2:	4b1b      	ldr	r3, [pc, #108]	; (20560 <xTaskRemoveFromEventList+0xa8>)
   204f4:	681b      	ldr	r3, [r3, #0]
   204f6:	429a      	cmp	r2, r3
   204f8:	d903      	bls.n	20502 <xTaskRemoveFromEventList+0x4a>
   204fa:	68bb      	ldr	r3, [r7, #8]
   204fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   204fe:	4b18      	ldr	r3, [pc, #96]	; (20560 <xTaskRemoveFromEventList+0xa8>)
   20500:	601a      	str	r2, [r3, #0]
   20502:	68bb      	ldr	r3, [r7, #8]
   20504:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   20506:	0013      	movs	r3, r2
   20508:	009b      	lsls	r3, r3, #2
   2050a:	189b      	adds	r3, r3, r2
   2050c:	009b      	lsls	r3, r3, #2
   2050e:	4a15      	ldr	r2, [pc, #84]	; (20564 <xTaskRemoveFromEventList+0xac>)
   20510:	189a      	adds	r2, r3, r2
   20512:	68bb      	ldr	r3, [r7, #8]
   20514:	3304      	adds	r3, #4
   20516:	0019      	movs	r1, r3
   20518:	0010      	movs	r0, r2
   2051a:	4b13      	ldr	r3, [pc, #76]	; (20568 <xTaskRemoveFromEventList+0xb0>)
   2051c:	4798      	blx	r3
   2051e:	e007      	b.n	20530 <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
   20520:	68bb      	ldr	r3, [r7, #8]
   20522:	3318      	adds	r3, #24
   20524:	001a      	movs	r2, r3
   20526:	4b11      	ldr	r3, [pc, #68]	; (2056c <xTaskRemoveFromEventList+0xb4>)
   20528:	0011      	movs	r1, r2
   2052a:	0018      	movs	r0, r3
   2052c:	4b0e      	ldr	r3, [pc, #56]	; (20568 <xTaskRemoveFromEventList+0xb0>)
   2052e:	4798      	blx	r3
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
   20530:	68bb      	ldr	r3, [r7, #8]
   20532:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   20534:	4b0e      	ldr	r3, [pc, #56]	; (20570 <xTaskRemoveFromEventList+0xb8>)
   20536:	681b      	ldr	r3, [r3, #0]
   20538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   2053a:	429a      	cmp	r2, r3
   2053c:	d905      	bls.n	2054a <xTaskRemoveFromEventList+0x92>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
   2053e:	2301      	movs	r3, #1
   20540:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
   20542:	4b0c      	ldr	r3, [pc, #48]	; (20574 <xTaskRemoveFromEventList+0xbc>)
   20544:	2201      	movs	r2, #1
   20546:	601a      	str	r2, [r3, #0]
   20548:	e001      	b.n	2054e <xTaskRemoveFromEventList+0x96>
	}
	else
	{
		xReturn = pdFALSE;
   2054a:	2300      	movs	r3, #0
   2054c:	60fb      	str	r3, [r7, #12]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
   2054e:	68fb      	ldr	r3, [r7, #12]
}
   20550:	0018      	movs	r0, r3
   20552:	46bd      	mov	sp, r7
   20554:	b004      	add	sp, #16
   20556:	bd80      	pop	{r7, pc}
   20558:	0001eef7 	.word	0x0001eef7
   2055c:	200005b8 	.word	0x200005b8
   20560:	20000598 	.word	0x20000598
   20564:	200004bc 	.word	0x200004bc
   20568:	0001ee47 	.word	0x0001ee47
   2056c:	20000550 	.word	0x20000550
   20570:	200004b8 	.word	0x200004b8
   20574:	200005a4 	.word	0x200005a4

00020578 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
   20578:	b580      	push	{r7, lr}
   2057a:	b082      	sub	sp, #8
   2057c:	af00      	add	r7, sp, #0
   2057e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
   20580:	4b05      	ldr	r3, [pc, #20]	; (20598 <vTaskInternalSetTimeOutState+0x20>)
   20582:	681a      	ldr	r2, [r3, #0]
   20584:	687b      	ldr	r3, [r7, #4]
   20586:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
   20588:	4b04      	ldr	r3, [pc, #16]	; (2059c <vTaskInternalSetTimeOutState+0x24>)
   2058a:	681a      	ldr	r2, [r3, #0]
   2058c:	687b      	ldr	r3, [r7, #4]
   2058e:	605a      	str	r2, [r3, #4]
}
   20590:	46c0      	nop			; (mov r8, r8)
   20592:	46bd      	mov	sp, r7
   20594:	b002      	add	sp, #8
   20596:	bd80      	pop	{r7, pc}
   20598:	200005a8 	.word	0x200005a8
   2059c:	20000594 	.word	0x20000594

000205a0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
   205a0:	b580      	push	{r7, lr}
   205a2:	b086      	sub	sp, #24
   205a4:	af00      	add	r7, sp, #0
   205a6:	6078      	str	r0, [r7, #4]
   205a8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
   205aa:	687b      	ldr	r3, [r7, #4]
   205ac:	2b00      	cmp	r3, #0
   205ae:	d101      	bne.n	205b4 <xTaskCheckForTimeOut+0x14>
   205b0:	b672      	cpsid	i
   205b2:	e7fe      	b.n	205b2 <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
   205b4:	683b      	ldr	r3, [r7, #0]
   205b6:	2b00      	cmp	r3, #0
   205b8:	d101      	bne.n	205be <xTaskCheckForTimeOut+0x1e>
   205ba:	b672      	cpsid	i
   205bc:	e7fe      	b.n	205bc <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
   205be:	4b1e      	ldr	r3, [pc, #120]	; (20638 <xTaskCheckForTimeOut+0x98>)
   205c0:	4798      	blx	r3
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
   205c2:	4b1e      	ldr	r3, [pc, #120]	; (2063c <xTaskCheckForTimeOut+0x9c>)
   205c4:	681b      	ldr	r3, [r3, #0]
   205c6:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
   205c8:	687b      	ldr	r3, [r7, #4]
   205ca:	685b      	ldr	r3, [r3, #4]
   205cc:	693a      	ldr	r2, [r7, #16]
   205ce:	1ad3      	subs	r3, r2, r3
   205d0:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
   205d2:	683b      	ldr	r3, [r7, #0]
   205d4:	681b      	ldr	r3, [r3, #0]
   205d6:	3301      	adds	r3, #1
   205d8:	d102      	bne.n	205e0 <xTaskCheckForTimeOut+0x40>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
   205da:	2300      	movs	r3, #0
   205dc:	617b      	str	r3, [r7, #20]
   205de:	e024      	b.n	2062a <xTaskCheckForTimeOut+0x8a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
   205e0:	687b      	ldr	r3, [r7, #4]
   205e2:	681a      	ldr	r2, [r3, #0]
   205e4:	4b16      	ldr	r3, [pc, #88]	; (20640 <xTaskCheckForTimeOut+0xa0>)
   205e6:	681b      	ldr	r3, [r3, #0]
   205e8:	429a      	cmp	r2, r3
   205ea:	d007      	beq.n	205fc <xTaskCheckForTimeOut+0x5c>
   205ec:	687b      	ldr	r3, [r7, #4]
   205ee:	685a      	ldr	r2, [r3, #4]
   205f0:	693b      	ldr	r3, [r7, #16]
   205f2:	429a      	cmp	r2, r3
   205f4:	d802      	bhi.n	205fc <xTaskCheckForTimeOut+0x5c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
   205f6:	2301      	movs	r3, #1
   205f8:	617b      	str	r3, [r7, #20]
   205fa:	e016      	b.n	2062a <xTaskCheckForTimeOut+0x8a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
   205fc:	683b      	ldr	r3, [r7, #0]
   205fe:	681a      	ldr	r2, [r3, #0]
   20600:	68fb      	ldr	r3, [r7, #12]
   20602:	429a      	cmp	r2, r3
   20604:	d90c      	bls.n	20620 <xTaskCheckForTimeOut+0x80>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
   20606:	683b      	ldr	r3, [r7, #0]
   20608:	681a      	ldr	r2, [r3, #0]
   2060a:	68fb      	ldr	r3, [r7, #12]
   2060c:	1ad2      	subs	r2, r2, r3
   2060e:	683b      	ldr	r3, [r7, #0]
   20610:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
   20612:	687b      	ldr	r3, [r7, #4]
   20614:	0018      	movs	r0, r3
   20616:	4b0b      	ldr	r3, [pc, #44]	; (20644 <xTaskCheckForTimeOut+0xa4>)
   20618:	4798      	blx	r3
			xReturn = pdFALSE;
   2061a:	2300      	movs	r3, #0
   2061c:	617b      	str	r3, [r7, #20]
   2061e:	e004      	b.n	2062a <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			*pxTicksToWait = 0;
   20620:	683b      	ldr	r3, [r7, #0]
   20622:	2200      	movs	r2, #0
   20624:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
   20626:	2301      	movs	r3, #1
   20628:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
   2062a:	4b07      	ldr	r3, [pc, #28]	; (20648 <xTaskCheckForTimeOut+0xa8>)
   2062c:	4798      	blx	r3

	return xReturn;
   2062e:	697b      	ldr	r3, [r7, #20]
}
   20630:	0018      	movs	r0, r3
   20632:	46bd      	mov	sp, r7
   20634:	b006      	add	sp, #24
   20636:	bd80      	pop	{r7, pc}
   20638:	0001ec51 	.word	0x0001ec51
   2063c:	20000594 	.word	0x20000594
   20640:	200005a8 	.word	0x200005a8
   20644:	00020579 	.word	0x00020579
   20648:	0001ec75 	.word	0x0001ec75

0002064c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
   2064c:	b580      	push	{r7, lr}
   2064e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
   20650:	4b02      	ldr	r3, [pc, #8]	; (2065c <vTaskMissedYield+0x10>)
   20652:	2201      	movs	r2, #1
   20654:	601a      	str	r2, [r3, #0]
}
   20656:	46c0      	nop			; (mov r8, r8)
   20658:	46bd      	mov	sp, r7
   2065a:	bd80      	pop	{r7, pc}
   2065c:	200005a4 	.word	0x200005a4

00020660 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
   20660:	b580      	push	{r7, lr}
   20662:	b082      	sub	sp, #8
   20664:	af00      	add	r7, sp, #0
   20666:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
   20668:	4b04      	ldr	r3, [pc, #16]	; (2067c <prvIdleTask+0x1c>)
   2066a:	4798      	blx	r3

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
   2066c:	4b04      	ldr	r3, [pc, #16]	; (20680 <prvIdleTask+0x20>)
   2066e:	681b      	ldr	r3, [r3, #0]
   20670:	2b01      	cmp	r3, #1
   20672:	d9f9      	bls.n	20668 <prvIdleTask+0x8>
			{
				taskYIELD();
   20674:	4b03      	ldr	r3, [pc, #12]	; (20684 <prvIdleTask+0x24>)
   20676:	4798      	blx	r3
		prvCheckTasksWaitingTermination();
   20678:	e7f6      	b.n	20668 <prvIdleTask+0x8>
   2067a:	46c0      	nop			; (mov r8, r8)
   2067c:	00020715 	.word	0x00020715
   20680:	200004bc 	.word	0x200004bc
   20684:	0001ec31 	.word	0x0001ec31

00020688 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
   20688:	b580      	push	{r7, lr}
   2068a:	b082      	sub	sp, #8
   2068c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
   2068e:	2300      	movs	r3, #0
   20690:	607b      	str	r3, [r7, #4]
   20692:	e00c      	b.n	206ae <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
   20694:	687a      	ldr	r2, [r7, #4]
   20696:	0013      	movs	r3, r2
   20698:	009b      	lsls	r3, r3, #2
   2069a:	189b      	adds	r3, r3, r2
   2069c:	009b      	lsls	r3, r3, #2
   2069e:	4a14      	ldr	r2, [pc, #80]	; (206f0 <prvInitialiseTaskLists+0x68>)
   206a0:	189b      	adds	r3, r3, r2
   206a2:	0018      	movs	r0, r3
   206a4:	4b13      	ldr	r3, [pc, #76]	; (206f4 <prvInitialiseTaskLists+0x6c>)
   206a6:	4798      	blx	r3
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
   206a8:	687b      	ldr	r3, [r7, #4]
   206aa:	3301      	adds	r3, #1
   206ac:	607b      	str	r3, [r7, #4]
   206ae:	687b      	ldr	r3, [r7, #4]
   206b0:	2b04      	cmp	r3, #4
   206b2:	d9ef      	bls.n	20694 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
   206b4:	4b10      	ldr	r3, [pc, #64]	; (206f8 <prvInitialiseTaskLists+0x70>)
   206b6:	0018      	movs	r0, r3
   206b8:	4b0e      	ldr	r3, [pc, #56]	; (206f4 <prvInitialiseTaskLists+0x6c>)
   206ba:	4798      	blx	r3
	vListInitialise( &xDelayedTaskList2 );
   206bc:	4b0f      	ldr	r3, [pc, #60]	; (206fc <prvInitialiseTaskLists+0x74>)
   206be:	0018      	movs	r0, r3
   206c0:	4b0c      	ldr	r3, [pc, #48]	; (206f4 <prvInitialiseTaskLists+0x6c>)
   206c2:	4798      	blx	r3
	vListInitialise( &xPendingReadyList );
   206c4:	4b0e      	ldr	r3, [pc, #56]	; (20700 <prvInitialiseTaskLists+0x78>)
   206c6:	0018      	movs	r0, r3
   206c8:	4b0a      	ldr	r3, [pc, #40]	; (206f4 <prvInitialiseTaskLists+0x6c>)
   206ca:	4798      	blx	r3

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
   206cc:	4b0d      	ldr	r3, [pc, #52]	; (20704 <prvInitialiseTaskLists+0x7c>)
   206ce:	0018      	movs	r0, r3
   206d0:	4b08      	ldr	r3, [pc, #32]	; (206f4 <prvInitialiseTaskLists+0x6c>)
   206d2:	4798      	blx	r3
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
   206d4:	4b0c      	ldr	r3, [pc, #48]	; (20708 <prvInitialiseTaskLists+0x80>)
   206d6:	0018      	movs	r0, r3
   206d8:	4b06      	ldr	r3, [pc, #24]	; (206f4 <prvInitialiseTaskLists+0x6c>)
   206da:	4798      	blx	r3
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
   206dc:	4b0b      	ldr	r3, [pc, #44]	; (2070c <prvInitialiseTaskLists+0x84>)
   206de:	4a06      	ldr	r2, [pc, #24]	; (206f8 <prvInitialiseTaskLists+0x70>)
   206e0:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
   206e2:	4b0b      	ldr	r3, [pc, #44]	; (20710 <prvInitialiseTaskLists+0x88>)
   206e4:	4a05      	ldr	r2, [pc, #20]	; (206fc <prvInitialiseTaskLists+0x74>)
   206e6:	601a      	str	r2, [r3, #0]
}
   206e8:	46c0      	nop			; (mov r8, r8)
   206ea:	46bd      	mov	sp, r7
   206ec:	b002      	add	sp, #8
   206ee:	bd80      	pop	{r7, pc}
   206f0:	200004bc 	.word	0x200004bc
   206f4:	0001edf5 	.word	0x0001edf5
   206f8:	20000520 	.word	0x20000520
   206fc:	20000534 	.word	0x20000534
   20700:	20000550 	.word	0x20000550
   20704:	20000564 	.word	0x20000564
   20708:	2000057c 	.word	0x2000057c
   2070c:	20000548 	.word	0x20000548
   20710:	2000054c 	.word	0x2000054c

00020714 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
   20714:	b580      	push	{r7, lr}
   20716:	b082      	sub	sp, #8
   20718:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
   2071a:	e01a      	b.n	20752 <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
   2071c:	4b11      	ldr	r3, [pc, #68]	; (20764 <prvCheckTasksWaitingTermination+0x50>)
   2071e:	4798      	blx	r3
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
   20720:	4b11      	ldr	r3, [pc, #68]	; (20768 <prvCheckTasksWaitingTermination+0x54>)
   20722:	68db      	ldr	r3, [r3, #12]
   20724:	68db      	ldr	r3, [r3, #12]
   20726:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   20728:	687b      	ldr	r3, [r7, #4]
   2072a:	3304      	adds	r3, #4
   2072c:	0018      	movs	r0, r3
   2072e:	4b0f      	ldr	r3, [pc, #60]	; (2076c <prvCheckTasksWaitingTermination+0x58>)
   20730:	4798      	blx	r3
				--uxCurrentNumberOfTasks;
   20732:	4b0f      	ldr	r3, [pc, #60]	; (20770 <prvCheckTasksWaitingTermination+0x5c>)
   20734:	681b      	ldr	r3, [r3, #0]
   20736:	1e5a      	subs	r2, r3, #1
   20738:	4b0d      	ldr	r3, [pc, #52]	; (20770 <prvCheckTasksWaitingTermination+0x5c>)
   2073a:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
   2073c:	4b0d      	ldr	r3, [pc, #52]	; (20774 <prvCheckTasksWaitingTermination+0x60>)
   2073e:	681b      	ldr	r3, [r3, #0]
   20740:	1e5a      	subs	r2, r3, #1
   20742:	4b0c      	ldr	r3, [pc, #48]	; (20774 <prvCheckTasksWaitingTermination+0x60>)
   20744:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
   20746:	4b0c      	ldr	r3, [pc, #48]	; (20778 <prvCheckTasksWaitingTermination+0x64>)
   20748:	4798      	blx	r3

			prvDeleteTCB( pxTCB );
   2074a:	687b      	ldr	r3, [r7, #4]
   2074c:	0018      	movs	r0, r3
   2074e:	4b0b      	ldr	r3, [pc, #44]	; (2077c <prvCheckTasksWaitingTermination+0x68>)
   20750:	4798      	blx	r3
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
   20752:	4b08      	ldr	r3, [pc, #32]	; (20774 <prvCheckTasksWaitingTermination+0x60>)
   20754:	681b      	ldr	r3, [r3, #0]
   20756:	2b00      	cmp	r3, #0
   20758:	d1e0      	bne.n	2071c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
   2075a:	46c0      	nop			; (mov r8, r8)
   2075c:	46bd      	mov	sp, r7
   2075e:	b002      	add	sp, #8
   20760:	bd80      	pop	{r7, pc}
   20762:	46c0      	nop			; (mov r8, r8)
   20764:	0001ec51 	.word	0x0001ec51
   20768:	20000564 	.word	0x20000564
   2076c:	0001eef7 	.word	0x0001eef7
   20770:	20000590 	.word	0x20000590
   20774:	20000578 	.word	0x20000578
   20778:	0001ec75 	.word	0x0001ec75
   2077c:	00020781 	.word	0x00020781

00020780 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
   20780:	b580      	push	{r7, lr}
   20782:	b082      	sub	sp, #8
   20784:	af00      	add	r7, sp, #0
   20786:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
   20788:	687b      	ldr	r3, [r7, #4]
   2078a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   2078c:	0018      	movs	r0, r3
   2078e:	4b05      	ldr	r3, [pc, #20]	; (207a4 <prvDeleteTCB+0x24>)
   20790:	4798      	blx	r3
			vPortFree( pxTCB );
   20792:	687b      	ldr	r3, [r7, #4]
   20794:	0018      	movs	r0, r3
   20796:	4b03      	ldr	r3, [pc, #12]	; (207a4 <prvDeleteTCB+0x24>)
   20798:	4798      	blx	r3
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
   2079a:	46c0      	nop			; (mov r8, r8)
   2079c:	46bd      	mov	sp, r7
   2079e:	b002      	add	sp, #8
   207a0:	bd80      	pop	{r7, pc}
   207a2:	46c0      	nop			; (mov r8, r8)
   207a4:	0001edc1 	.word	0x0001edc1

000207a8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
   207a8:	b580      	push	{r7, lr}
   207aa:	b082      	sub	sp, #8
   207ac:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   207ae:	4b0e      	ldr	r3, [pc, #56]	; (207e8 <prvResetNextTaskUnblockTime+0x40>)
   207b0:	681b      	ldr	r3, [r3, #0]
   207b2:	681b      	ldr	r3, [r3, #0]
   207b4:	2b00      	cmp	r3, #0
   207b6:	d101      	bne.n	207bc <prvResetNextTaskUnblockTime+0x14>
   207b8:	2301      	movs	r3, #1
   207ba:	e000      	b.n	207be <prvResetNextTaskUnblockTime+0x16>
   207bc:	2300      	movs	r3, #0
   207be:	2b00      	cmp	r3, #0
   207c0:	d004      	beq.n	207cc <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
   207c2:	4b0a      	ldr	r3, [pc, #40]	; (207ec <prvResetNextTaskUnblockTime+0x44>)
   207c4:	2201      	movs	r2, #1
   207c6:	4252      	negs	r2, r2
   207c8:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
   207ca:	e008      	b.n	207de <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   207cc:	4b06      	ldr	r3, [pc, #24]	; (207e8 <prvResetNextTaskUnblockTime+0x40>)
   207ce:	681b      	ldr	r3, [r3, #0]
   207d0:	68db      	ldr	r3, [r3, #12]
   207d2:	68db      	ldr	r3, [r3, #12]
   207d4:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
   207d6:	687b      	ldr	r3, [r7, #4]
   207d8:	685a      	ldr	r2, [r3, #4]
   207da:	4b04      	ldr	r3, [pc, #16]	; (207ec <prvResetNextTaskUnblockTime+0x44>)
   207dc:	601a      	str	r2, [r3, #0]
}
   207de:	46c0      	nop			; (mov r8, r8)
   207e0:	46bd      	mov	sp, r7
   207e2:	b002      	add	sp, #8
   207e4:	bd80      	pop	{r7, pc}
   207e6:	46c0      	nop			; (mov r8, r8)
   207e8:	20000548 	.word	0x20000548
   207ec:	200005b0 	.word	0x200005b0

000207f0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
   207f0:	b580      	push	{r7, lr}
   207f2:	b082      	sub	sp, #8
   207f4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
   207f6:	4b0a      	ldr	r3, [pc, #40]	; (20820 <xTaskGetSchedulerState+0x30>)
   207f8:	681b      	ldr	r3, [r3, #0]
   207fa:	2b00      	cmp	r3, #0
   207fc:	d102      	bne.n	20804 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
   207fe:	2301      	movs	r3, #1
   20800:	607b      	str	r3, [r7, #4]
   20802:	e008      	b.n	20816 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   20804:	4b07      	ldr	r3, [pc, #28]	; (20824 <xTaskGetSchedulerState+0x34>)
   20806:	681b      	ldr	r3, [r3, #0]
   20808:	2b00      	cmp	r3, #0
   2080a:	d102      	bne.n	20812 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
   2080c:	2302      	movs	r3, #2
   2080e:	607b      	str	r3, [r7, #4]
   20810:	e001      	b.n	20816 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
   20812:	2300      	movs	r3, #0
   20814:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
   20816:	687b      	ldr	r3, [r7, #4]
	}
   20818:	0018      	movs	r0, r3
   2081a:	46bd      	mov	sp, r7
   2081c:	b002      	add	sp, #8
   2081e:	bd80      	pop	{r7, pc}
   20820:	2000059c 	.word	0x2000059c
   20824:	200005b8 	.word	0x200005b8

00020828 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
   20828:	b580      	push	{r7, lr}
   2082a:	b084      	sub	sp, #16
   2082c:	af00      	add	r7, sp, #0
   2082e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
   20830:	687b      	ldr	r3, [r7, #4]
   20832:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
   20834:	2300      	movs	r3, #0
   20836:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
   20838:	687b      	ldr	r3, [r7, #4]
   2083a:	2b00      	cmp	r3, #0
   2083c:	d056      	beq.n	208ec <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
   2083e:	68bb      	ldr	r3, [r7, #8]
   20840:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   20842:	4b2d      	ldr	r3, [pc, #180]	; (208f8 <xTaskPriorityInherit+0xd0>)
   20844:	681b      	ldr	r3, [r3, #0]
   20846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   20848:	429a      	cmp	r2, r3
   2084a:	d246      	bcs.n	208da <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
   2084c:	68bb      	ldr	r3, [r7, #8]
   2084e:	699b      	ldr	r3, [r3, #24]
   20850:	2b00      	cmp	r3, #0
   20852:	db06      	blt.n	20862 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   20854:	4b28      	ldr	r3, [pc, #160]	; (208f8 <xTaskPriorityInherit+0xd0>)
   20856:	681b      	ldr	r3, [r3, #0]
   20858:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   2085a:	2205      	movs	r2, #5
   2085c:	1ad2      	subs	r2, r2, r3
   2085e:	68bb      	ldr	r3, [r7, #8]
   20860:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
   20862:	68bb      	ldr	r3, [r7, #8]
   20864:	6959      	ldr	r1, [r3, #20]
   20866:	68bb      	ldr	r3, [r7, #8]
   20868:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2086a:	0013      	movs	r3, r2
   2086c:	009b      	lsls	r3, r3, #2
   2086e:	189b      	adds	r3, r3, r2
   20870:	009b      	lsls	r3, r3, #2
   20872:	4a22      	ldr	r2, [pc, #136]	; (208fc <xTaskPriorityInherit+0xd4>)
   20874:	189b      	adds	r3, r3, r2
   20876:	4299      	cmp	r1, r3
   20878:	d101      	bne.n	2087e <xTaskPriorityInherit+0x56>
   2087a:	2301      	movs	r3, #1
   2087c:	e000      	b.n	20880 <xTaskPriorityInherit+0x58>
   2087e:	2300      	movs	r3, #0
   20880:	2b00      	cmp	r3, #0
   20882:	d022      	beq.n	208ca <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   20884:	68bb      	ldr	r3, [r7, #8]
   20886:	3304      	adds	r3, #4
   20888:	0018      	movs	r0, r3
   2088a:	4b1d      	ldr	r3, [pc, #116]	; (20900 <xTaskPriorityInherit+0xd8>)
   2088c:	4798      	blx	r3
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
   2088e:	4b1a      	ldr	r3, [pc, #104]	; (208f8 <xTaskPriorityInherit+0xd0>)
   20890:	681b      	ldr	r3, [r3, #0]
   20892:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   20894:	68bb      	ldr	r3, [r7, #8]
   20896:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
   20898:	68bb      	ldr	r3, [r7, #8]
   2089a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2089c:	4b19      	ldr	r3, [pc, #100]	; (20904 <xTaskPriorityInherit+0xdc>)
   2089e:	681b      	ldr	r3, [r3, #0]
   208a0:	429a      	cmp	r2, r3
   208a2:	d903      	bls.n	208ac <xTaskPriorityInherit+0x84>
   208a4:	68bb      	ldr	r3, [r7, #8]
   208a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   208a8:	4b16      	ldr	r3, [pc, #88]	; (20904 <xTaskPriorityInherit+0xdc>)
   208aa:	601a      	str	r2, [r3, #0]
   208ac:	68bb      	ldr	r3, [r7, #8]
   208ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   208b0:	0013      	movs	r3, r2
   208b2:	009b      	lsls	r3, r3, #2
   208b4:	189b      	adds	r3, r3, r2
   208b6:	009b      	lsls	r3, r3, #2
   208b8:	4a10      	ldr	r2, [pc, #64]	; (208fc <xTaskPriorityInherit+0xd4>)
   208ba:	189a      	adds	r2, r3, r2
   208bc:	68bb      	ldr	r3, [r7, #8]
   208be:	3304      	adds	r3, #4
   208c0:	0019      	movs	r1, r3
   208c2:	0010      	movs	r0, r2
   208c4:	4b10      	ldr	r3, [pc, #64]	; (20908 <xTaskPriorityInherit+0xe0>)
   208c6:	4798      	blx	r3
   208c8:	e004      	b.n	208d4 <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
   208ca:	4b0b      	ldr	r3, [pc, #44]	; (208f8 <xTaskPriorityInherit+0xd0>)
   208cc:	681b      	ldr	r3, [r3, #0]
   208ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   208d0:	68bb      	ldr	r3, [r7, #8]
   208d2:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
   208d4:	2301      	movs	r3, #1
   208d6:	60fb      	str	r3, [r7, #12]
   208d8:	e008      	b.n	208ec <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
   208da:	68bb      	ldr	r3, [r7, #8]
   208dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   208de:	4b06      	ldr	r3, [pc, #24]	; (208f8 <xTaskPriorityInherit+0xd0>)
   208e0:	681b      	ldr	r3, [r3, #0]
   208e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   208e4:	429a      	cmp	r2, r3
   208e6:	d201      	bcs.n	208ec <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
   208e8:	2301      	movs	r3, #1
   208ea:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
   208ec:	68fb      	ldr	r3, [r7, #12]
	}
   208ee:	0018      	movs	r0, r3
   208f0:	46bd      	mov	sp, r7
   208f2:	b004      	add	sp, #16
   208f4:	bd80      	pop	{r7, pc}
   208f6:	46c0      	nop			; (mov r8, r8)
   208f8:	200004b8 	.word	0x200004b8
   208fc:	200004bc 	.word	0x200004bc
   20900:	0001eef7 	.word	0x0001eef7
   20904:	20000598 	.word	0x20000598
   20908:	0001ee47 	.word	0x0001ee47

0002090c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
   2090c:	b580      	push	{r7, lr}
   2090e:	b084      	sub	sp, #16
   20910:	af00      	add	r7, sp, #0
   20912:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
   20914:	687b      	ldr	r3, [r7, #4]
   20916:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
   20918:	2300      	movs	r3, #0
   2091a:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
   2091c:	687b      	ldr	r3, [r7, #4]
   2091e:	2b00      	cmp	r3, #0
   20920:	d044      	beq.n	209ac <xTaskPriorityDisinherit+0xa0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
   20922:	4b25      	ldr	r3, [pc, #148]	; (209b8 <xTaskPriorityDisinherit+0xac>)
   20924:	681b      	ldr	r3, [r3, #0]
   20926:	68ba      	ldr	r2, [r7, #8]
   20928:	429a      	cmp	r2, r3
   2092a:	d001      	beq.n	20930 <xTaskPriorityDisinherit+0x24>
   2092c:	b672      	cpsid	i
   2092e:	e7fe      	b.n	2092e <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
   20930:	68bb      	ldr	r3, [r7, #8]
   20932:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   20934:	2b00      	cmp	r3, #0
   20936:	d101      	bne.n	2093c <xTaskPriorityDisinherit+0x30>
   20938:	b672      	cpsid	i
   2093a:	e7fe      	b.n	2093a <xTaskPriorityDisinherit+0x2e>
			( pxTCB->uxMutexesHeld )--;
   2093c:	68bb      	ldr	r3, [r7, #8]
   2093e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   20940:	1e5a      	subs	r2, r3, #1
   20942:	68bb      	ldr	r3, [r7, #8]
   20944:	645a      	str	r2, [r3, #68]	; 0x44

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
   20946:	68bb      	ldr	r3, [r7, #8]
   20948:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2094a:	68bb      	ldr	r3, [r7, #8]
   2094c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   2094e:	429a      	cmp	r2, r3
   20950:	d02c      	beq.n	209ac <xTaskPriorityDisinherit+0xa0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
   20952:	68bb      	ldr	r3, [r7, #8]
   20954:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   20956:	2b00      	cmp	r3, #0
   20958:	d128      	bne.n	209ac <xTaskPriorityDisinherit+0xa0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   2095a:	68bb      	ldr	r3, [r7, #8]
   2095c:	3304      	adds	r3, #4
   2095e:	0018      	movs	r0, r3
   20960:	4b16      	ldr	r3, [pc, #88]	; (209bc <xTaskPriorityDisinherit+0xb0>)
   20962:	4798      	blx	r3
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
   20964:	68bb      	ldr	r3, [r7, #8]
   20966:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   20968:	68bb      	ldr	r3, [r7, #8]
   2096a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   2096c:	68bb      	ldr	r3, [r7, #8]
   2096e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   20970:	2205      	movs	r2, #5
   20972:	1ad2      	subs	r2, r2, r3
   20974:	68bb      	ldr	r3, [r7, #8]
   20976:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
   20978:	68bb      	ldr	r3, [r7, #8]
   2097a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2097c:	4b10      	ldr	r3, [pc, #64]	; (209c0 <xTaskPriorityDisinherit+0xb4>)
   2097e:	681b      	ldr	r3, [r3, #0]
   20980:	429a      	cmp	r2, r3
   20982:	d903      	bls.n	2098c <xTaskPriorityDisinherit+0x80>
   20984:	68bb      	ldr	r3, [r7, #8]
   20986:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   20988:	4b0d      	ldr	r3, [pc, #52]	; (209c0 <xTaskPriorityDisinherit+0xb4>)
   2098a:	601a      	str	r2, [r3, #0]
   2098c:	68bb      	ldr	r3, [r7, #8]
   2098e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   20990:	0013      	movs	r3, r2
   20992:	009b      	lsls	r3, r3, #2
   20994:	189b      	adds	r3, r3, r2
   20996:	009b      	lsls	r3, r3, #2
   20998:	4a0a      	ldr	r2, [pc, #40]	; (209c4 <xTaskPriorityDisinherit+0xb8>)
   2099a:	189a      	adds	r2, r3, r2
   2099c:	68bb      	ldr	r3, [r7, #8]
   2099e:	3304      	adds	r3, #4
   209a0:	0019      	movs	r1, r3
   209a2:	0010      	movs	r0, r2
   209a4:	4b08      	ldr	r3, [pc, #32]	; (209c8 <xTaskPriorityDisinherit+0xbc>)
   209a6:	4798      	blx	r3
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
   209a8:	2301      	movs	r3, #1
   209aa:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
   209ac:	68fb      	ldr	r3, [r7, #12]
	}
   209ae:	0018      	movs	r0, r3
   209b0:	46bd      	mov	sp, r7
   209b2:	b004      	add	sp, #16
   209b4:	bd80      	pop	{r7, pc}
   209b6:	46c0      	nop			; (mov r8, r8)
   209b8:	200004b8 	.word	0x200004b8
   209bc:	0001eef7 	.word	0x0001eef7
   209c0:	20000598 	.word	0x20000598
   209c4:	200004bc 	.word	0x200004bc
   209c8:	0001ee47 	.word	0x0001ee47

000209cc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
   209cc:	b580      	push	{r7, lr}
   209ce:	b086      	sub	sp, #24
   209d0:	af00      	add	r7, sp, #0
   209d2:	6078      	str	r0, [r7, #4]
   209d4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
   209d6:	687b      	ldr	r3, [r7, #4]
   209d8:	613b      	str	r3, [r7, #16]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
   209da:	2301      	movs	r3, #1
   209dc:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
   209de:	687b      	ldr	r3, [r7, #4]
   209e0:	2b00      	cmp	r3, #0
   209e2:	d05d      	beq.n	20aa0 <vTaskPriorityDisinheritAfterTimeout+0xd4>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
   209e4:	693b      	ldr	r3, [r7, #16]
   209e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   209e8:	2b00      	cmp	r3, #0
   209ea:	d101      	bne.n	209f0 <vTaskPriorityDisinheritAfterTimeout+0x24>
   209ec:	b672      	cpsid	i
   209ee:	e7fe      	b.n	209ee <vTaskPriorityDisinheritAfterTimeout+0x22>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
   209f0:	693b      	ldr	r3, [r7, #16]
   209f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   209f4:	683b      	ldr	r3, [r7, #0]
   209f6:	429a      	cmp	r2, r3
   209f8:	d202      	bcs.n	20a00 <vTaskPriorityDisinheritAfterTimeout+0x34>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
   209fa:	683b      	ldr	r3, [r7, #0]
   209fc:	617b      	str	r3, [r7, #20]
   209fe:	e002      	b.n	20a06 <vTaskPriorityDisinheritAfterTimeout+0x3a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
   20a00:	693b      	ldr	r3, [r7, #16]
   20a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   20a04:	617b      	str	r3, [r7, #20]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
   20a06:	693b      	ldr	r3, [r7, #16]
   20a08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   20a0a:	697b      	ldr	r3, [r7, #20]
   20a0c:	429a      	cmp	r2, r3
   20a0e:	d047      	beq.n	20aa0 <vTaskPriorityDisinheritAfterTimeout+0xd4>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
   20a10:	693b      	ldr	r3, [r7, #16]
   20a12:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   20a14:	68fb      	ldr	r3, [r7, #12]
   20a16:	429a      	cmp	r2, r3
   20a18:	d142      	bne.n	20aa0 <vTaskPriorityDisinheritAfterTimeout+0xd4>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
   20a1a:	4b23      	ldr	r3, [pc, #140]	; (20aa8 <vTaskPriorityDisinheritAfterTimeout+0xdc>)
   20a1c:	681b      	ldr	r3, [r3, #0]
   20a1e:	693a      	ldr	r2, [r7, #16]
   20a20:	429a      	cmp	r2, r3
   20a22:	d101      	bne.n	20a28 <vTaskPriorityDisinheritAfterTimeout+0x5c>
   20a24:	b672      	cpsid	i
   20a26:	e7fe      	b.n	20a26 <vTaskPriorityDisinheritAfterTimeout+0x5a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
   20a28:	693b      	ldr	r3, [r7, #16]
   20a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   20a2c:	60bb      	str	r3, [r7, #8]
					pxTCB->uxPriority = uxPriorityToUse;
   20a2e:	693b      	ldr	r3, [r7, #16]
   20a30:	697a      	ldr	r2, [r7, #20]
   20a32:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
   20a34:	693b      	ldr	r3, [r7, #16]
   20a36:	699b      	ldr	r3, [r3, #24]
   20a38:	2b00      	cmp	r3, #0
   20a3a:	db04      	blt.n	20a46 <vTaskPriorityDisinheritAfterTimeout+0x7a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   20a3c:	697b      	ldr	r3, [r7, #20]
   20a3e:	2205      	movs	r2, #5
   20a40:	1ad2      	subs	r2, r2, r3
   20a42:	693b      	ldr	r3, [r7, #16]
   20a44:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
   20a46:	693b      	ldr	r3, [r7, #16]
   20a48:	6959      	ldr	r1, [r3, #20]
   20a4a:	68ba      	ldr	r2, [r7, #8]
   20a4c:	0013      	movs	r3, r2
   20a4e:	009b      	lsls	r3, r3, #2
   20a50:	189b      	adds	r3, r3, r2
   20a52:	009b      	lsls	r3, r3, #2
   20a54:	4a15      	ldr	r2, [pc, #84]	; (20aac <vTaskPriorityDisinheritAfterTimeout+0xe0>)
   20a56:	189b      	adds	r3, r3, r2
   20a58:	4299      	cmp	r1, r3
   20a5a:	d101      	bne.n	20a60 <vTaskPriorityDisinheritAfterTimeout+0x94>
   20a5c:	2301      	movs	r3, #1
   20a5e:	e000      	b.n	20a62 <vTaskPriorityDisinheritAfterTimeout+0x96>
   20a60:	2300      	movs	r3, #0
   20a62:	2b00      	cmp	r3, #0
   20a64:	d01c      	beq.n	20aa0 <vTaskPriorityDisinheritAfterTimeout+0xd4>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   20a66:	693b      	ldr	r3, [r7, #16]
   20a68:	3304      	adds	r3, #4
   20a6a:	0018      	movs	r0, r3
   20a6c:	4b10      	ldr	r3, [pc, #64]	; (20ab0 <vTaskPriorityDisinheritAfterTimeout+0xe4>)
   20a6e:	4798      	blx	r3
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
   20a70:	693b      	ldr	r3, [r7, #16]
   20a72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   20a74:	4b0f      	ldr	r3, [pc, #60]	; (20ab4 <vTaskPriorityDisinheritAfterTimeout+0xe8>)
   20a76:	681b      	ldr	r3, [r3, #0]
   20a78:	429a      	cmp	r2, r3
   20a7a:	d903      	bls.n	20a84 <vTaskPriorityDisinheritAfterTimeout+0xb8>
   20a7c:	693b      	ldr	r3, [r7, #16]
   20a7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   20a80:	4b0c      	ldr	r3, [pc, #48]	; (20ab4 <vTaskPriorityDisinheritAfterTimeout+0xe8>)
   20a82:	601a      	str	r2, [r3, #0]
   20a84:	693b      	ldr	r3, [r7, #16]
   20a86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   20a88:	0013      	movs	r3, r2
   20a8a:	009b      	lsls	r3, r3, #2
   20a8c:	189b      	adds	r3, r3, r2
   20a8e:	009b      	lsls	r3, r3, #2
   20a90:	4a06      	ldr	r2, [pc, #24]	; (20aac <vTaskPriorityDisinheritAfterTimeout+0xe0>)
   20a92:	189a      	adds	r2, r3, r2
   20a94:	693b      	ldr	r3, [r7, #16]
   20a96:	3304      	adds	r3, #4
   20a98:	0019      	movs	r1, r3
   20a9a:	0010      	movs	r0, r2
   20a9c:	4b06      	ldr	r3, [pc, #24]	; (20ab8 <vTaskPriorityDisinheritAfterTimeout+0xec>)
   20a9e:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
   20aa0:	46c0      	nop			; (mov r8, r8)
   20aa2:	46bd      	mov	sp, r7
   20aa4:	b006      	add	sp, #24
   20aa6:	bd80      	pop	{r7, pc}
   20aa8:	200004b8 	.word	0x200004b8
   20aac:	200004bc 	.word	0x200004bc
   20ab0:	0001eef7 	.word	0x0001eef7
   20ab4:	20000598 	.word	0x20000598
   20ab8:	0001ee47 	.word	0x0001ee47

00020abc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
   20abc:	b580      	push	{r7, lr}
   20abe:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
   20ac0:	4b06      	ldr	r3, [pc, #24]	; (20adc <pvTaskIncrementMutexHeldCount+0x20>)
   20ac2:	681b      	ldr	r3, [r3, #0]
   20ac4:	2b00      	cmp	r3, #0
   20ac6:	d004      	beq.n	20ad2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
   20ac8:	4b04      	ldr	r3, [pc, #16]	; (20adc <pvTaskIncrementMutexHeldCount+0x20>)
   20aca:	681b      	ldr	r3, [r3, #0]
   20acc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   20ace:	3201      	adds	r2, #1
   20ad0:	645a      	str	r2, [r3, #68]	; 0x44
		}

		return pxCurrentTCB;
   20ad2:	4b02      	ldr	r3, [pc, #8]	; (20adc <pvTaskIncrementMutexHeldCount+0x20>)
   20ad4:	681b      	ldr	r3, [r3, #0]
	}
   20ad6:	0018      	movs	r0, r3
   20ad8:	46bd      	mov	sp, r7
   20ada:	bd80      	pop	{r7, pc}
   20adc:	200004b8 	.word	0x200004b8

00020ae0 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
   20ae0:	b580      	push	{r7, lr}
   20ae2:	b084      	sub	sp, #16
   20ae4:	af00      	add	r7, sp, #0
   20ae6:	6078      	str	r0, [r7, #4]
   20ae8:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
   20aea:	4b1d      	ldr	r3, [pc, #116]	; (20b60 <ulTaskNotifyTake+0x80>)
   20aec:	4798      	blx	r3
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
   20aee:	4b1d      	ldr	r3, [pc, #116]	; (20b64 <ulTaskNotifyTake+0x84>)
   20af0:	681b      	ldr	r3, [r3, #0]
   20af2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   20af4:	2b00      	cmp	r3, #0
   20af6:	d10e      	bne.n	20b16 <ulTaskNotifyTake+0x36>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
   20af8:	4b1a      	ldr	r3, [pc, #104]	; (20b64 <ulTaskNotifyTake+0x84>)
   20afa:	681b      	ldr	r3, [r3, #0]
   20afc:	224c      	movs	r2, #76	; 0x4c
   20afe:	2101      	movs	r1, #1
   20b00:	5499      	strb	r1, [r3, r2]

				if( xTicksToWait > ( TickType_t ) 0 )
   20b02:	683b      	ldr	r3, [r7, #0]
   20b04:	2b00      	cmp	r3, #0
   20b06:	d006      	beq.n	20b16 <ulTaskNotifyTake+0x36>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
   20b08:	683b      	ldr	r3, [r7, #0]
   20b0a:	2101      	movs	r1, #1
   20b0c:	0018      	movs	r0, r3
   20b0e:	4b16      	ldr	r3, [pc, #88]	; (20b68 <ulTaskNotifyTake+0x88>)
   20b10:	4798      	blx	r3

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
   20b12:	4b16      	ldr	r3, [pc, #88]	; (20b6c <ulTaskNotifyTake+0x8c>)
   20b14:	4798      	blx	r3
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
   20b16:	4b16      	ldr	r3, [pc, #88]	; (20b70 <ulTaskNotifyTake+0x90>)
   20b18:	4798      	blx	r3

		taskENTER_CRITICAL();
   20b1a:	4b11      	ldr	r3, [pc, #68]	; (20b60 <ulTaskNotifyTake+0x80>)
   20b1c:	4798      	blx	r3
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
   20b1e:	4b11      	ldr	r3, [pc, #68]	; (20b64 <ulTaskNotifyTake+0x84>)
   20b20:	681b      	ldr	r3, [r3, #0]
   20b22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   20b24:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
   20b26:	68fb      	ldr	r3, [r7, #12]
   20b28:	2b00      	cmp	r3, #0
   20b2a:	d00c      	beq.n	20b46 <ulTaskNotifyTake+0x66>
			{
				if( xClearCountOnExit != pdFALSE )
   20b2c:	687b      	ldr	r3, [r7, #4]
   20b2e:	2b00      	cmp	r3, #0
   20b30:	d004      	beq.n	20b3c <ulTaskNotifyTake+0x5c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
   20b32:	4b0c      	ldr	r3, [pc, #48]	; (20b64 <ulTaskNotifyTake+0x84>)
   20b34:	681b      	ldr	r3, [r3, #0]
   20b36:	2200      	movs	r2, #0
   20b38:	649a      	str	r2, [r3, #72]	; 0x48
   20b3a:	e004      	b.n	20b46 <ulTaskNotifyTake+0x66>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
   20b3c:	4b09      	ldr	r3, [pc, #36]	; (20b64 <ulTaskNotifyTake+0x84>)
   20b3e:	681b      	ldr	r3, [r3, #0]
   20b40:	68fa      	ldr	r2, [r7, #12]
   20b42:	3a01      	subs	r2, #1
   20b44:	649a      	str	r2, [r3, #72]	; 0x48
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
   20b46:	4b07      	ldr	r3, [pc, #28]	; (20b64 <ulTaskNotifyTake+0x84>)
   20b48:	681b      	ldr	r3, [r3, #0]
   20b4a:	224c      	movs	r2, #76	; 0x4c
   20b4c:	2100      	movs	r1, #0
   20b4e:	5499      	strb	r1, [r3, r2]
		}
		taskEXIT_CRITICAL();
   20b50:	4b07      	ldr	r3, [pc, #28]	; (20b70 <ulTaskNotifyTake+0x90>)
   20b52:	4798      	blx	r3

		return ulReturn;
   20b54:	68fb      	ldr	r3, [r7, #12]
	}
   20b56:	0018      	movs	r0, r3
   20b58:	46bd      	mov	sp, r7
   20b5a:	b004      	add	sp, #16
   20b5c:	bd80      	pop	{r7, pc}
   20b5e:	46c0      	nop			; (mov r8, r8)
   20b60:	0001ec51 	.word	0x0001ec51
   20b64:	200004b8 	.word	0x200004b8
   20b68:	00020c79 	.word	0x00020c79
   20b6c:	0001ec31 	.word	0x0001ec31
   20b70:	0001ec75 	.word	0x0001ec75

00020b74 <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
   20b74:	b580      	push	{r7, lr}
   20b76:	b086      	sub	sp, #24
   20b78:	af00      	add	r7, sp, #0
   20b7a:	6078      	str	r0, [r7, #4]
   20b7c:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
   20b7e:	687b      	ldr	r3, [r7, #4]
   20b80:	2b00      	cmp	r3, #0
   20b82:	d101      	bne.n	20b88 <vTaskNotifyGiveFromISR+0x14>
   20b84:	b672      	cpsid	i
   20b86:	e7fe      	b.n	20b86 <vTaskNotifyGiveFromISR+0x12>
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		pxTCB = ( TCB_t * ) xTaskToNotify;
   20b88:	687b      	ldr	r3, [r7, #4]
   20b8a:	617b      	str	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   20b8c:	4b30      	ldr	r3, [pc, #192]	; (20c50 <vTaskNotifyGiveFromISR+0xdc>)
   20b8e:	4798      	blx	r3
   20b90:	0003      	movs	r3, r0
   20b92:	613b      	str	r3, [r7, #16]
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
   20b94:	230f      	movs	r3, #15
   20b96:	18fb      	adds	r3, r7, r3
   20b98:	697a      	ldr	r2, [r7, #20]
   20b9a:	214c      	movs	r1, #76	; 0x4c
   20b9c:	5c52      	ldrb	r2, [r2, r1]
   20b9e:	701a      	strb	r2, [r3, #0]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
   20ba0:	697b      	ldr	r3, [r7, #20]
   20ba2:	224c      	movs	r2, #76	; 0x4c
   20ba4:	2102      	movs	r1, #2
   20ba6:	5499      	strb	r1, [r3, r2]

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
   20ba8:	697b      	ldr	r3, [r7, #20]
   20baa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   20bac:	1c5a      	adds	r2, r3, #1
   20bae:	697b      	ldr	r3, [r7, #20]
   20bb0:	649a      	str	r2, [r3, #72]	; 0x48

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
   20bb2:	230f      	movs	r3, #15
   20bb4:	18fb      	adds	r3, r7, r3
   20bb6:	781b      	ldrb	r3, [r3, #0]
   20bb8:	2b01      	cmp	r3, #1
   20bba:	d140      	bne.n	20c3e <vTaskNotifyGiveFromISR+0xca>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
   20bbc:	697b      	ldr	r3, [r7, #20]
   20bbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   20bc0:	2b00      	cmp	r3, #0
   20bc2:	d001      	beq.n	20bc8 <vTaskNotifyGiveFromISR+0x54>
   20bc4:	b672      	cpsid	i
   20bc6:	e7fe      	b.n	20bc6 <vTaskNotifyGiveFromISR+0x52>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   20bc8:	4b22      	ldr	r3, [pc, #136]	; (20c54 <vTaskNotifyGiveFromISR+0xe0>)
   20bca:	681b      	ldr	r3, [r3, #0]
   20bcc:	2b00      	cmp	r3, #0
   20bce:	d11d      	bne.n	20c0c <vTaskNotifyGiveFromISR+0x98>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   20bd0:	697b      	ldr	r3, [r7, #20]
   20bd2:	3304      	adds	r3, #4
   20bd4:	0018      	movs	r0, r3
   20bd6:	4b20      	ldr	r3, [pc, #128]	; (20c58 <vTaskNotifyGiveFromISR+0xe4>)
   20bd8:	4798      	blx	r3
					prvAddTaskToReadyList( pxTCB );
   20bda:	697b      	ldr	r3, [r7, #20]
   20bdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   20bde:	4b1f      	ldr	r3, [pc, #124]	; (20c5c <vTaskNotifyGiveFromISR+0xe8>)
   20be0:	681b      	ldr	r3, [r3, #0]
   20be2:	429a      	cmp	r2, r3
   20be4:	d903      	bls.n	20bee <vTaskNotifyGiveFromISR+0x7a>
   20be6:	697b      	ldr	r3, [r7, #20]
   20be8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   20bea:	4b1c      	ldr	r3, [pc, #112]	; (20c5c <vTaskNotifyGiveFromISR+0xe8>)
   20bec:	601a      	str	r2, [r3, #0]
   20bee:	697b      	ldr	r3, [r7, #20]
   20bf0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   20bf2:	0013      	movs	r3, r2
   20bf4:	009b      	lsls	r3, r3, #2
   20bf6:	189b      	adds	r3, r3, r2
   20bf8:	009b      	lsls	r3, r3, #2
   20bfa:	4a19      	ldr	r2, [pc, #100]	; (20c60 <vTaskNotifyGiveFromISR+0xec>)
   20bfc:	189a      	adds	r2, r3, r2
   20bfe:	697b      	ldr	r3, [r7, #20]
   20c00:	3304      	adds	r3, #4
   20c02:	0019      	movs	r1, r3
   20c04:	0010      	movs	r0, r2
   20c06:	4b17      	ldr	r3, [pc, #92]	; (20c64 <vTaskNotifyGiveFromISR+0xf0>)
   20c08:	4798      	blx	r3
   20c0a:	e007      	b.n	20c1c <vTaskNotifyGiveFromISR+0xa8>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
   20c0c:	697b      	ldr	r3, [r7, #20]
   20c0e:	3318      	adds	r3, #24
   20c10:	001a      	movs	r2, r3
   20c12:	4b15      	ldr	r3, [pc, #84]	; (20c68 <vTaskNotifyGiveFromISR+0xf4>)
   20c14:	0011      	movs	r1, r2
   20c16:	0018      	movs	r0, r3
   20c18:	4b12      	ldr	r3, [pc, #72]	; (20c64 <vTaskNotifyGiveFromISR+0xf0>)
   20c1a:	4798      	blx	r3
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
   20c1c:	697b      	ldr	r3, [r7, #20]
   20c1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   20c20:	4b12      	ldr	r3, [pc, #72]	; (20c6c <vTaskNotifyGiveFromISR+0xf8>)
   20c22:	681b      	ldr	r3, [r3, #0]
   20c24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   20c26:	429a      	cmp	r2, r3
   20c28:	d909      	bls.n	20c3e <vTaskNotifyGiveFromISR+0xca>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
   20c2a:	683b      	ldr	r3, [r7, #0]
   20c2c:	2b00      	cmp	r3, #0
   20c2e:	d003      	beq.n	20c38 <vTaskNotifyGiveFromISR+0xc4>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
   20c30:	683b      	ldr	r3, [r7, #0]
   20c32:	2201      	movs	r2, #1
   20c34:	601a      	str	r2, [r3, #0]
   20c36:	e002      	b.n	20c3e <vTaskNotifyGiveFromISR+0xca>
					else
					{
						/* Mark that a yield is pending in case the user is not
						using the "xHigherPriorityTaskWoken" parameter in an ISR
						safe FreeRTOS function. */
						xYieldPending = pdTRUE;
   20c38:	4b0d      	ldr	r3, [pc, #52]	; (20c70 <vTaskNotifyGiveFromISR+0xfc>)
   20c3a:	2201      	movs	r2, #1
   20c3c:	601a      	str	r2, [r3, #0]
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
   20c3e:	693b      	ldr	r3, [r7, #16]
   20c40:	0018      	movs	r0, r3
   20c42:	4b0c      	ldr	r3, [pc, #48]	; (20c74 <vTaskNotifyGiveFromISR+0x100>)
   20c44:	4798      	blx	r3
	}
   20c46:	46c0      	nop			; (mov r8, r8)
   20c48:	46bd      	mov	sp, r7
   20c4a:	b006      	add	sp, #24
   20c4c:	bd80      	pop	{r7, pc}
   20c4e:	46c0      	nop			; (mov r8, r8)
   20c50:	0001eca5 	.word	0x0001eca5
   20c54:	200005b8 	.word	0x200005b8
   20c58:	0001eef7 	.word	0x0001eef7
   20c5c:	20000598 	.word	0x20000598
   20c60:	200004bc 	.word	0x200004bc
   20c64:	0001ee47 	.word	0x0001ee47
   20c68:	20000550 	.word	0x20000550
   20c6c:	200004b8 	.word	0x200004b8
   20c70:	200005a4 	.word	0x200005a4
   20c74:	0001ecb1 	.word	0x0001ecb1

00020c78 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
   20c78:	b580      	push	{r7, lr}
   20c7a:	b084      	sub	sp, #16
   20c7c:	af00      	add	r7, sp, #0
   20c7e:	6078      	str	r0, [r7, #4]
   20c80:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
   20c82:	4b21      	ldr	r3, [pc, #132]	; (20d08 <prvAddCurrentTaskToDelayedList+0x90>)
   20c84:	681b      	ldr	r3, [r3, #0]
   20c86:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   20c88:	4b20      	ldr	r3, [pc, #128]	; (20d0c <prvAddCurrentTaskToDelayedList+0x94>)
   20c8a:	681b      	ldr	r3, [r3, #0]
   20c8c:	3304      	adds	r3, #4
   20c8e:	0018      	movs	r0, r3
   20c90:	4b1f      	ldr	r3, [pc, #124]	; (20d10 <prvAddCurrentTaskToDelayedList+0x98>)
   20c92:	4798      	blx	r3
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
   20c94:	687b      	ldr	r3, [r7, #4]
   20c96:	3301      	adds	r3, #1
   20c98:	d10b      	bne.n	20cb2 <prvAddCurrentTaskToDelayedList+0x3a>
   20c9a:	683b      	ldr	r3, [r7, #0]
   20c9c:	2b00      	cmp	r3, #0
   20c9e:	d008      	beq.n	20cb2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
   20ca0:	4b1a      	ldr	r3, [pc, #104]	; (20d0c <prvAddCurrentTaskToDelayedList+0x94>)
   20ca2:	681b      	ldr	r3, [r3, #0]
   20ca4:	1d1a      	adds	r2, r3, #4
   20ca6:	4b1b      	ldr	r3, [pc, #108]	; (20d14 <prvAddCurrentTaskToDelayedList+0x9c>)
   20ca8:	0011      	movs	r1, r2
   20caa:	0018      	movs	r0, r3
   20cac:	4b1a      	ldr	r3, [pc, #104]	; (20d18 <prvAddCurrentTaskToDelayedList+0xa0>)
   20cae:	4798      	blx	r3

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
   20cb0:	e026      	b.n	20d00 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
   20cb2:	68fa      	ldr	r2, [r7, #12]
   20cb4:	687b      	ldr	r3, [r7, #4]
   20cb6:	18d3      	adds	r3, r2, r3
   20cb8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
   20cba:	4b14      	ldr	r3, [pc, #80]	; (20d0c <prvAddCurrentTaskToDelayedList+0x94>)
   20cbc:	681b      	ldr	r3, [r3, #0]
   20cbe:	68ba      	ldr	r2, [r7, #8]
   20cc0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
   20cc2:	68ba      	ldr	r2, [r7, #8]
   20cc4:	68fb      	ldr	r3, [r7, #12]
   20cc6:	429a      	cmp	r2, r3
   20cc8:	d209      	bcs.n	20cde <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
   20cca:	4b14      	ldr	r3, [pc, #80]	; (20d1c <prvAddCurrentTaskToDelayedList+0xa4>)
   20ccc:	681a      	ldr	r2, [r3, #0]
   20cce:	4b0f      	ldr	r3, [pc, #60]	; (20d0c <prvAddCurrentTaskToDelayedList+0x94>)
   20cd0:	681b      	ldr	r3, [r3, #0]
   20cd2:	3304      	adds	r3, #4
   20cd4:	0019      	movs	r1, r3
   20cd6:	0010      	movs	r0, r2
   20cd8:	4b11      	ldr	r3, [pc, #68]	; (20d20 <prvAddCurrentTaskToDelayedList+0xa8>)
   20cda:	4798      	blx	r3
}
   20cdc:	e010      	b.n	20d00 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
   20cde:	4b11      	ldr	r3, [pc, #68]	; (20d24 <prvAddCurrentTaskToDelayedList+0xac>)
   20ce0:	681a      	ldr	r2, [r3, #0]
   20ce2:	4b0a      	ldr	r3, [pc, #40]	; (20d0c <prvAddCurrentTaskToDelayedList+0x94>)
   20ce4:	681b      	ldr	r3, [r3, #0]
   20ce6:	3304      	adds	r3, #4
   20ce8:	0019      	movs	r1, r3
   20cea:	0010      	movs	r0, r2
   20cec:	4b0c      	ldr	r3, [pc, #48]	; (20d20 <prvAddCurrentTaskToDelayedList+0xa8>)
   20cee:	4798      	blx	r3
				if( xTimeToWake < xNextTaskUnblockTime )
   20cf0:	4b0d      	ldr	r3, [pc, #52]	; (20d28 <prvAddCurrentTaskToDelayedList+0xb0>)
   20cf2:	681b      	ldr	r3, [r3, #0]
   20cf4:	68ba      	ldr	r2, [r7, #8]
   20cf6:	429a      	cmp	r2, r3
   20cf8:	d202      	bcs.n	20d00 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
   20cfa:	4b0b      	ldr	r3, [pc, #44]	; (20d28 <prvAddCurrentTaskToDelayedList+0xb0>)
   20cfc:	68ba      	ldr	r2, [r7, #8]
   20cfe:	601a      	str	r2, [r3, #0]
}
   20d00:	46c0      	nop			; (mov r8, r8)
   20d02:	46bd      	mov	sp, r7
   20d04:	b004      	add	sp, #16
   20d06:	bd80      	pop	{r7, pc}
   20d08:	20000594 	.word	0x20000594
   20d0c:	200004b8 	.word	0x200004b8
   20d10:	0001eef7 	.word	0x0001eef7
   20d14:	2000057c 	.word	0x2000057c
   20d18:	0001ee47 	.word	0x0001ee47
   20d1c:	2000054c 	.word	0x2000054c
   20d20:	0001ee8b 	.word	0x0001ee8b
   20d24:	20000548 	.word	0x20000548
   20d28:	200005b0 	.word	0x200005b0

00020d2c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
   20d2c:	b590      	push	{r4, r7, lr}
   20d2e:	b085      	sub	sp, #20
   20d30:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
   20d32:	2300      	movs	r3, #0
   20d34:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
   20d36:	4b0e      	ldr	r3, [pc, #56]	; (20d70 <xTimerCreateTimerTask+0x44>)
   20d38:	4798      	blx	r3

	if( xTimerQueue != NULL )
   20d3a:	4b0e      	ldr	r3, [pc, #56]	; (20d74 <xTimerCreateTimerTask+0x48>)
   20d3c:	681b      	ldr	r3, [r3, #0]
   20d3e:	2b00      	cmp	r3, #0
   20d40:	d00c      	beq.n	20d5c <xTimerCreateTimerTask+0x30>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
   20d42:	2382      	movs	r3, #130	; 0x82
   20d44:	005a      	lsls	r2, r3, #1
   20d46:	490c      	ldr	r1, [pc, #48]	; (20d78 <xTimerCreateTimerTask+0x4c>)
   20d48:	480c      	ldr	r0, [pc, #48]	; (20d7c <xTimerCreateTimerTask+0x50>)
   20d4a:	4b0d      	ldr	r3, [pc, #52]	; (20d80 <xTimerCreateTimerTask+0x54>)
   20d4c:	9301      	str	r3, [sp, #4]
   20d4e:	2304      	movs	r3, #4
   20d50:	9300      	str	r3, [sp, #0]
   20d52:	2300      	movs	r3, #0
   20d54:	4c0b      	ldr	r4, [pc, #44]	; (20d84 <xTimerCreateTimerTask+0x58>)
   20d56:	47a0      	blx	r4
   20d58:	0003      	movs	r3, r0
   20d5a:	607b      	str	r3, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
   20d5c:	687b      	ldr	r3, [r7, #4]
   20d5e:	2b00      	cmp	r3, #0
   20d60:	d101      	bne.n	20d66 <xTimerCreateTimerTask+0x3a>
   20d62:	b672      	cpsid	i
   20d64:	e7fe      	b.n	20d64 <xTimerCreateTimerTask+0x38>
	return xReturn;
   20d66:	687b      	ldr	r3, [r7, #4]
}
   20d68:	0018      	movs	r0, r3
   20d6a:	46bd      	mov	sp, r7
   20d6c:	b003      	add	sp, #12
   20d6e:	bd90      	pop	{r4, r7, pc}
   20d70:	0002133d 	.word	0x0002133d
   20d74:	200005ec 	.word	0x200005ec
   20d78:	0002a8e0 	.word	0x0002a8e0
   20d7c:	00020f51 	.word	0x00020f51
   20d80:	200005f0 	.word	0x200005f0
   20d84:	0001fb29 	.word	0x0001fb29

00020d88 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
   20d88:	b590      	push	{r4, r7, lr}
   20d8a:	b089      	sub	sp, #36	; 0x24
   20d8c:	af02      	add	r7, sp, #8
   20d8e:	60f8      	str	r0, [r7, #12]
   20d90:	60b9      	str	r1, [r7, #8]
   20d92:	607a      	str	r2, [r7, #4]
   20d94:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
   20d96:	2028      	movs	r0, #40	; 0x28
   20d98:	4b0b      	ldr	r3, [pc, #44]	; (20dc8 <xTimerCreate+0x40>)
   20d9a:	4798      	blx	r3
   20d9c:	0003      	movs	r3, r0
   20d9e:	617b      	str	r3, [r7, #20]

		if( pxNewTimer != NULL )
   20da0:	697b      	ldr	r3, [r7, #20]
   20da2:	2b00      	cmp	r3, #0
   20da4:	d00a      	beq.n	20dbc <xTimerCreate+0x34>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
   20da6:	683c      	ldr	r4, [r7, #0]
   20da8:	687a      	ldr	r2, [r7, #4]
   20daa:	68b9      	ldr	r1, [r7, #8]
   20dac:	68f8      	ldr	r0, [r7, #12]
   20dae:	697b      	ldr	r3, [r7, #20]
   20db0:	9301      	str	r3, [sp, #4]
   20db2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   20db4:	9300      	str	r3, [sp, #0]
   20db6:	0023      	movs	r3, r4
   20db8:	4c04      	ldr	r4, [pc, #16]	; (20dcc <xTimerCreate+0x44>)
   20dba:	47a0      	blx	r4
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */
		}

		return pxNewTimer;
   20dbc:	697b      	ldr	r3, [r7, #20]
	}
   20dbe:	0018      	movs	r0, r3
   20dc0:	46bd      	mov	sp, r7
   20dc2:	b007      	add	sp, #28
   20dc4:	bd90      	pop	{r4, r7, pc}
   20dc6:	46c0      	nop			; (mov r8, r8)
   20dc8:	0001ed8d 	.word	0x0001ed8d
   20dcc:	00020dd1 	.word	0x00020dd1

00020dd0 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
   20dd0:	b580      	push	{r7, lr}
   20dd2:	b084      	sub	sp, #16
   20dd4:	af00      	add	r7, sp, #0
   20dd6:	60f8      	str	r0, [r7, #12]
   20dd8:	60b9      	str	r1, [r7, #8]
   20dda:	607a      	str	r2, [r7, #4]
   20ddc:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
   20dde:	68bb      	ldr	r3, [r7, #8]
   20de0:	2b00      	cmp	r3, #0
   20de2:	d101      	bne.n	20de8 <prvInitialiseNewTimer+0x18>
   20de4:	b672      	cpsid	i
   20de6:	e7fe      	b.n	20de6 <prvInitialiseNewTimer+0x16>

	if( pxNewTimer != NULL )
   20de8:	69fb      	ldr	r3, [r7, #28]
   20dea:	2b00      	cmp	r3, #0
   20dec:	d015      	beq.n	20e1a <prvInitialiseNewTimer+0x4a>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
   20dee:	4b0d      	ldr	r3, [pc, #52]	; (20e24 <prvInitialiseNewTimer+0x54>)
   20df0:	4798      	blx	r3

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
   20df2:	69fb      	ldr	r3, [r7, #28]
   20df4:	68fa      	ldr	r2, [r7, #12]
   20df6:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
   20df8:	69fb      	ldr	r3, [r7, #28]
   20dfa:	68ba      	ldr	r2, [r7, #8]
   20dfc:	619a      	str	r2, [r3, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
   20dfe:	69fb      	ldr	r3, [r7, #28]
   20e00:	687a      	ldr	r2, [r7, #4]
   20e02:	61da      	str	r2, [r3, #28]
		pxNewTimer->pvTimerID = pvTimerID;
   20e04:	69fb      	ldr	r3, [r7, #28]
   20e06:	683a      	ldr	r2, [r7, #0]
   20e08:	621a      	str	r2, [r3, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
   20e0a:	69fb      	ldr	r3, [r7, #28]
   20e0c:	69ba      	ldr	r2, [r7, #24]
   20e0e:	625a      	str	r2, [r3, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
   20e10:	69fb      	ldr	r3, [r7, #28]
   20e12:	3304      	adds	r3, #4
   20e14:	0018      	movs	r0, r3
   20e16:	4b04      	ldr	r3, [pc, #16]	; (20e28 <prvInitialiseNewTimer+0x58>)
   20e18:	4798      	blx	r3
		traceTIMER_CREATE( pxNewTimer );
	}
}
   20e1a:	46c0      	nop			; (mov r8, r8)
   20e1c:	46bd      	mov	sp, r7
   20e1e:	b004      	add	sp, #16
   20e20:	bd80      	pop	{r7, pc}
   20e22:	46c0      	nop			; (mov r8, r8)
   20e24:	0002133d 	.word	0x0002133d
   20e28:	0001ee31 	.word	0x0001ee31

00020e2c <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
   20e2c:	b590      	push	{r4, r7, lr}
   20e2e:	b08b      	sub	sp, #44	; 0x2c
   20e30:	af00      	add	r7, sp, #0
   20e32:	60f8      	str	r0, [r7, #12]
   20e34:	60b9      	str	r1, [r7, #8]
   20e36:	607a      	str	r2, [r7, #4]
   20e38:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
   20e3a:	2300      	movs	r3, #0
   20e3c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
   20e3e:	68fb      	ldr	r3, [r7, #12]
   20e40:	2b00      	cmp	r3, #0
   20e42:	d101      	bne.n	20e48 <xTimerGenericCommand+0x1c>
   20e44:	b672      	cpsid	i
   20e46:	e7fe      	b.n	20e46 <xTimerGenericCommand+0x1a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
   20e48:	4b1e      	ldr	r3, [pc, #120]	; (20ec4 <xTimerGenericCommand+0x98>)
   20e4a:	681b      	ldr	r3, [r3, #0]
   20e4c:	2b00      	cmp	r3, #0
   20e4e:	d033      	beq.n	20eb8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
   20e50:	2314      	movs	r3, #20
   20e52:	18fb      	adds	r3, r7, r3
   20e54:	68ba      	ldr	r2, [r7, #8]
   20e56:	601a      	str	r2, [r3, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
   20e58:	2314      	movs	r3, #20
   20e5a:	18fb      	adds	r3, r7, r3
   20e5c:	687a      	ldr	r2, [r7, #4]
   20e5e:	605a      	str	r2, [r3, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
   20e60:	2314      	movs	r3, #20
   20e62:	18fb      	adds	r3, r7, r3
   20e64:	68fa      	ldr	r2, [r7, #12]
   20e66:	609a      	str	r2, [r3, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
   20e68:	68bb      	ldr	r3, [r7, #8]
   20e6a:	2b05      	cmp	r3, #5
   20e6c:	dc1a      	bgt.n	20ea4 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
   20e6e:	4b16      	ldr	r3, [pc, #88]	; (20ec8 <xTimerGenericCommand+0x9c>)
   20e70:	4798      	blx	r3
   20e72:	0003      	movs	r3, r0
   20e74:	2b02      	cmp	r3, #2
   20e76:	d10a      	bne.n	20e8e <xTimerGenericCommand+0x62>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
   20e78:	4b12      	ldr	r3, [pc, #72]	; (20ec4 <xTimerGenericCommand+0x98>)
   20e7a:	6818      	ldr	r0, [r3, #0]
   20e7c:	6bba      	ldr	r2, [r7, #56]	; 0x38
   20e7e:	2314      	movs	r3, #20
   20e80:	18f9      	adds	r1, r7, r3
   20e82:	2300      	movs	r3, #0
   20e84:	4c11      	ldr	r4, [pc, #68]	; (20ecc <xTimerGenericCommand+0xa0>)
   20e86:	47a0      	blx	r4
   20e88:	0003      	movs	r3, r0
   20e8a:	627b      	str	r3, [r7, #36]	; 0x24
   20e8c:	e014      	b.n	20eb8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
   20e8e:	4b0d      	ldr	r3, [pc, #52]	; (20ec4 <xTimerGenericCommand+0x98>)
   20e90:	6818      	ldr	r0, [r3, #0]
   20e92:	2314      	movs	r3, #20
   20e94:	18f9      	adds	r1, r7, r3
   20e96:	2300      	movs	r3, #0
   20e98:	2200      	movs	r2, #0
   20e9a:	4c0c      	ldr	r4, [pc, #48]	; (20ecc <xTimerGenericCommand+0xa0>)
   20e9c:	47a0      	blx	r4
   20e9e:	0003      	movs	r3, r0
   20ea0:	627b      	str	r3, [r7, #36]	; 0x24
   20ea2:	e009      	b.n	20eb8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
   20ea4:	4b07      	ldr	r3, [pc, #28]	; (20ec4 <xTimerGenericCommand+0x98>)
   20ea6:	6818      	ldr	r0, [r3, #0]
   20ea8:	683a      	ldr	r2, [r7, #0]
   20eaa:	2314      	movs	r3, #20
   20eac:	18f9      	adds	r1, r7, r3
   20eae:	2300      	movs	r3, #0
   20eb0:	4c07      	ldr	r4, [pc, #28]	; (20ed0 <xTimerGenericCommand+0xa4>)
   20eb2:	47a0      	blx	r4
   20eb4:	0003      	movs	r3, r0
   20eb6:	627b      	str	r3, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
   20eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   20eba:	0018      	movs	r0, r3
   20ebc:	46bd      	mov	sp, r7
   20ebe:	b00b      	add	sp, #44	; 0x2c
   20ec0:	bd90      	pop	{r4, r7, pc}
   20ec2:	46c0      	nop			; (mov r8, r8)
   20ec4:	200005ec 	.word	0x200005ec
   20ec8:	000207f1 	.word	0x000207f1
   20ecc:	0001f0c1 	.word	0x0001f0c1
   20ed0:	0001f2a1 	.word	0x0001f2a1

00020ed4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
   20ed4:	b590      	push	{r4, r7, lr}
   20ed6:	b087      	sub	sp, #28
   20ed8:	af02      	add	r7, sp, #8
   20eda:	6078      	str	r0, [r7, #4]
   20edc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   20ede:	4b18      	ldr	r3, [pc, #96]	; (20f40 <prvProcessExpiredTimer+0x6c>)
   20ee0:	681b      	ldr	r3, [r3, #0]
   20ee2:	68db      	ldr	r3, [r3, #12]
   20ee4:	68db      	ldr	r3, [r3, #12]
   20ee6:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   20ee8:	68fb      	ldr	r3, [r7, #12]
   20eea:	3304      	adds	r3, #4
   20eec:	0018      	movs	r0, r3
   20eee:	4b15      	ldr	r3, [pc, #84]	; (20f44 <prvProcessExpiredTimer+0x70>)
   20ef0:	4798      	blx	r3
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   20ef2:	68fb      	ldr	r3, [r7, #12]
   20ef4:	69db      	ldr	r3, [r3, #28]
   20ef6:	2b01      	cmp	r3, #1
   20ef8:	d119      	bne.n	20f2e <prvProcessExpiredTimer+0x5a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
   20efa:	68fb      	ldr	r3, [r7, #12]
   20efc:	699a      	ldr	r2, [r3, #24]
   20efe:	687b      	ldr	r3, [r7, #4]
   20f00:	18d1      	adds	r1, r2, r3
   20f02:	687b      	ldr	r3, [r7, #4]
   20f04:	683a      	ldr	r2, [r7, #0]
   20f06:	68f8      	ldr	r0, [r7, #12]
   20f08:	4c0f      	ldr	r4, [pc, #60]	; (20f48 <prvProcessExpiredTimer+0x74>)
   20f0a:	47a0      	blx	r4
   20f0c:	1e03      	subs	r3, r0, #0
   20f0e:	d00e      	beq.n	20f2e <prvProcessExpiredTimer+0x5a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
   20f10:	687a      	ldr	r2, [r7, #4]
   20f12:	68f8      	ldr	r0, [r7, #12]
   20f14:	2300      	movs	r3, #0
   20f16:	9300      	str	r3, [sp, #0]
   20f18:	2300      	movs	r3, #0
   20f1a:	2100      	movs	r1, #0
   20f1c:	4c0b      	ldr	r4, [pc, #44]	; (20f4c <prvProcessExpiredTimer+0x78>)
   20f1e:	47a0      	blx	r4
   20f20:	0003      	movs	r3, r0
   20f22:	60bb      	str	r3, [r7, #8]
			configASSERT( xResult );
   20f24:	68bb      	ldr	r3, [r7, #8]
   20f26:	2b00      	cmp	r3, #0
   20f28:	d101      	bne.n	20f2e <prvProcessExpiredTimer+0x5a>
   20f2a:	b672      	cpsid	i
   20f2c:	e7fe      	b.n	20f2c <prvProcessExpiredTimer+0x58>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   20f2e:	68fb      	ldr	r3, [r7, #12]
   20f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   20f32:	68fa      	ldr	r2, [r7, #12]
   20f34:	0010      	movs	r0, r2
   20f36:	4798      	blx	r3
}
   20f38:	46c0      	nop			; (mov r8, r8)
   20f3a:	46bd      	mov	sp, r7
   20f3c:	b005      	add	sp, #20
   20f3e:	bd90      	pop	{r4, r7, pc}
   20f40:	200005e4 	.word	0x200005e4
   20f44:	0001eef7 	.word	0x0001eef7
   20f48:	000210b1 	.word	0x000210b1
   20f4c:	00020e2d 	.word	0x00020e2d

00020f50 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
   20f50:	b580      	push	{r7, lr}
   20f52:	b084      	sub	sp, #16
   20f54:	af00      	add	r7, sp, #0
   20f56:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
   20f58:	2308      	movs	r3, #8
   20f5a:	18fb      	adds	r3, r7, r3
   20f5c:	0018      	movs	r0, r3
   20f5e:	4b06      	ldr	r3, [pc, #24]	; (20f78 <prvTimerTask+0x28>)
   20f60:	4798      	blx	r3
   20f62:	0003      	movs	r3, r0
   20f64:	60fb      	str	r3, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
   20f66:	68ba      	ldr	r2, [r7, #8]
   20f68:	68fb      	ldr	r3, [r7, #12]
   20f6a:	0011      	movs	r1, r2
   20f6c:	0018      	movs	r0, r3
   20f6e:	4b03      	ldr	r3, [pc, #12]	; (20f7c <prvTimerTask+0x2c>)
   20f70:	4798      	blx	r3

		/* Empty the command queue. */
		prvProcessReceivedCommands();
   20f72:	4b03      	ldr	r3, [pc, #12]	; (20f80 <prvTimerTask+0x30>)
   20f74:	4798      	blx	r3
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
   20f76:	e7ef      	b.n	20f58 <prvTimerTask+0x8>
   20f78:	00021029 	.word	0x00021029
   20f7c:	00020f85 	.word	0x00020f85
   20f80:	00021139 	.word	0x00021139

00020f84 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
   20f84:	b580      	push	{r7, lr}
   20f86:	b084      	sub	sp, #16
   20f88:	af00      	add	r7, sp, #0
   20f8a:	6078      	str	r0, [r7, #4]
   20f8c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
   20f8e:	4b1e      	ldr	r3, [pc, #120]	; (21008 <prvProcessTimerOrBlockTask+0x84>)
   20f90:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   20f92:	2308      	movs	r3, #8
   20f94:	18fb      	adds	r3, r7, r3
   20f96:	0018      	movs	r0, r3
   20f98:	4b1c      	ldr	r3, [pc, #112]	; (2100c <prvProcessTimerOrBlockTask+0x88>)
   20f9a:	4798      	blx	r3
   20f9c:	0003      	movs	r3, r0
   20f9e:	60fb      	str	r3, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
   20fa0:	68bb      	ldr	r3, [r7, #8]
   20fa2:	2b00      	cmp	r3, #0
   20fa4:	d129      	bne.n	20ffa <prvProcessTimerOrBlockTask+0x76>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
   20fa6:	683b      	ldr	r3, [r7, #0]
   20fa8:	2b00      	cmp	r3, #0
   20faa:	d10c      	bne.n	20fc6 <prvProcessTimerOrBlockTask+0x42>
   20fac:	687a      	ldr	r2, [r7, #4]
   20fae:	68fb      	ldr	r3, [r7, #12]
   20fb0:	429a      	cmp	r2, r3
   20fb2:	d808      	bhi.n	20fc6 <prvProcessTimerOrBlockTask+0x42>
			{
				( void ) xTaskResumeAll();
   20fb4:	4b16      	ldr	r3, [pc, #88]	; (21010 <prvProcessTimerOrBlockTask+0x8c>)
   20fb6:	4798      	blx	r3
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
   20fb8:	68fa      	ldr	r2, [r7, #12]
   20fba:	687b      	ldr	r3, [r7, #4]
   20fbc:	0011      	movs	r1, r2
   20fbe:	0018      	movs	r0, r3
   20fc0:	4b14      	ldr	r3, [pc, #80]	; (21014 <prvProcessTimerOrBlockTask+0x90>)
   20fc2:	4798      	blx	r3
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
   20fc4:	e01b      	b.n	20ffe <prvProcessTimerOrBlockTask+0x7a>
				if( xListWasEmpty != pdFALSE )
   20fc6:	683b      	ldr	r3, [r7, #0]
   20fc8:	2b00      	cmp	r3, #0
   20fca:	d006      	beq.n	20fda <prvProcessTimerOrBlockTask+0x56>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
   20fcc:	4b12      	ldr	r3, [pc, #72]	; (21018 <prvProcessTimerOrBlockTask+0x94>)
   20fce:	681b      	ldr	r3, [r3, #0]
   20fd0:	681b      	ldr	r3, [r3, #0]
   20fd2:	425a      	negs	r2, r3
   20fd4:	4153      	adcs	r3, r2
   20fd6:	b2db      	uxtb	r3, r3
   20fd8:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
   20fda:	4b10      	ldr	r3, [pc, #64]	; (2101c <prvProcessTimerOrBlockTask+0x98>)
   20fdc:	6818      	ldr	r0, [r3, #0]
   20fde:	687a      	ldr	r2, [r7, #4]
   20fe0:	68fb      	ldr	r3, [r7, #12]
   20fe2:	1ad3      	subs	r3, r2, r3
   20fe4:	683a      	ldr	r2, [r7, #0]
   20fe6:	0019      	movs	r1, r3
   20fe8:	4b0d      	ldr	r3, [pc, #52]	; (21020 <prvProcessTimerOrBlockTask+0x9c>)
   20fea:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   20fec:	4b08      	ldr	r3, [pc, #32]	; (21010 <prvProcessTimerOrBlockTask+0x8c>)
   20fee:	4798      	blx	r3
   20ff0:	1e03      	subs	r3, r0, #0
   20ff2:	d104      	bne.n	20ffe <prvProcessTimerOrBlockTask+0x7a>
					portYIELD_WITHIN_API();
   20ff4:	4b0b      	ldr	r3, [pc, #44]	; (21024 <prvProcessTimerOrBlockTask+0xa0>)
   20ff6:	4798      	blx	r3
}
   20ff8:	e001      	b.n	20ffe <prvProcessTimerOrBlockTask+0x7a>
			( void ) xTaskResumeAll();
   20ffa:	4b05      	ldr	r3, [pc, #20]	; (21010 <prvProcessTimerOrBlockTask+0x8c>)
   20ffc:	4798      	blx	r3
}
   20ffe:	46c0      	nop			; (mov r8, r8)
   21000:	46bd      	mov	sp, r7
   21002:	b004      	add	sp, #16
   21004:	bd80      	pop	{r7, pc}
   21006:	46c0      	nop			; (mov r8, r8)
   21008:	00020081 	.word	0x00020081
   2100c:	00021069 	.word	0x00021069
   21010:	00020099 	.word	0x00020099
   21014:	00020ed5 	.word	0x00020ed5
   21018:	200005e8 	.word	0x200005e8
   2101c:	200005ec 	.word	0x200005ec
   21020:	0001fa0d 	.word	0x0001fa0d
   21024:	0001ec31 	.word	0x0001ec31

00021028 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
   21028:	b580      	push	{r7, lr}
   2102a:	b084      	sub	sp, #16
   2102c:	af00      	add	r7, sp, #0
   2102e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
   21030:	4b0c      	ldr	r3, [pc, #48]	; (21064 <prvGetNextExpireTime+0x3c>)
   21032:	681b      	ldr	r3, [r3, #0]
   21034:	681b      	ldr	r3, [r3, #0]
   21036:	425a      	negs	r2, r3
   21038:	4153      	adcs	r3, r2
   2103a:	b2db      	uxtb	r3, r3
   2103c:	001a      	movs	r2, r3
   2103e:	687b      	ldr	r3, [r7, #4]
   21040:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
   21042:	687b      	ldr	r3, [r7, #4]
   21044:	681b      	ldr	r3, [r3, #0]
   21046:	2b00      	cmp	r3, #0
   21048:	d105      	bne.n	21056 <prvGetNextExpireTime+0x2e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   2104a:	4b06      	ldr	r3, [pc, #24]	; (21064 <prvGetNextExpireTime+0x3c>)
   2104c:	681b      	ldr	r3, [r3, #0]
   2104e:	68db      	ldr	r3, [r3, #12]
   21050:	681b      	ldr	r3, [r3, #0]
   21052:	60fb      	str	r3, [r7, #12]
   21054:	e001      	b.n	2105a <prvGetNextExpireTime+0x32>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
   21056:	2300      	movs	r3, #0
   21058:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
   2105a:	68fb      	ldr	r3, [r7, #12]
}
   2105c:	0018      	movs	r0, r3
   2105e:	46bd      	mov	sp, r7
   21060:	b004      	add	sp, #16
   21062:	bd80      	pop	{r7, pc}
   21064:	200005e4 	.word	0x200005e4

00021068 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
   21068:	b580      	push	{r7, lr}
   2106a:	b084      	sub	sp, #16
   2106c:	af00      	add	r7, sp, #0
   2106e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
   21070:	4b0c      	ldr	r3, [pc, #48]	; (210a4 <prvSampleTimeNow+0x3c>)
   21072:	4798      	blx	r3
   21074:	0003      	movs	r3, r0
   21076:	60fb      	str	r3, [r7, #12]

	if( xTimeNow < xLastTime )
   21078:	4b0b      	ldr	r3, [pc, #44]	; (210a8 <prvSampleTimeNow+0x40>)
   2107a:	681b      	ldr	r3, [r3, #0]
   2107c:	68fa      	ldr	r2, [r7, #12]
   2107e:	429a      	cmp	r2, r3
   21080:	d205      	bcs.n	2108e <prvSampleTimeNow+0x26>
	{
		prvSwitchTimerLists();
   21082:	4b0a      	ldr	r3, [pc, #40]	; (210ac <prvSampleTimeNow+0x44>)
   21084:	4798      	blx	r3
		*pxTimerListsWereSwitched = pdTRUE;
   21086:	687b      	ldr	r3, [r7, #4]
   21088:	2201      	movs	r2, #1
   2108a:	601a      	str	r2, [r3, #0]
   2108c:	e002      	b.n	21094 <prvSampleTimeNow+0x2c>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
   2108e:	687b      	ldr	r3, [r7, #4]
   21090:	2200      	movs	r2, #0
   21092:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
   21094:	4b04      	ldr	r3, [pc, #16]	; (210a8 <prvSampleTimeNow+0x40>)
   21096:	68fa      	ldr	r2, [r7, #12]
   21098:	601a      	str	r2, [r3, #0]

	return xTimeNow;
   2109a:	68fb      	ldr	r3, [r7, #12]
}
   2109c:	0018      	movs	r0, r3
   2109e:	46bd      	mov	sp, r7
   210a0:	b004      	add	sp, #16
   210a2:	bd80      	pop	{r7, pc}
   210a4:	000201cd 	.word	0x000201cd
   210a8:	200005f4 	.word	0x200005f4
   210ac:	0002127d 	.word	0x0002127d

000210b0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
   210b0:	b580      	push	{r7, lr}
   210b2:	b086      	sub	sp, #24
   210b4:	af00      	add	r7, sp, #0
   210b6:	60f8      	str	r0, [r7, #12]
   210b8:	60b9      	str	r1, [r7, #8]
   210ba:	607a      	str	r2, [r7, #4]
   210bc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
   210be:	2300      	movs	r3, #0
   210c0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
   210c2:	68fb      	ldr	r3, [r7, #12]
   210c4:	68ba      	ldr	r2, [r7, #8]
   210c6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   210c8:	68fb      	ldr	r3, [r7, #12]
   210ca:	68fa      	ldr	r2, [r7, #12]
   210cc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
   210ce:	68ba      	ldr	r2, [r7, #8]
   210d0:	687b      	ldr	r3, [r7, #4]
   210d2:	429a      	cmp	r2, r3
   210d4:	d812      	bhi.n	210fc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   210d6:	687a      	ldr	r2, [r7, #4]
   210d8:	683b      	ldr	r3, [r7, #0]
   210da:	1ad2      	subs	r2, r2, r3
   210dc:	68fb      	ldr	r3, [r7, #12]
   210de:	699b      	ldr	r3, [r3, #24]
   210e0:	429a      	cmp	r2, r3
   210e2:	d302      	bcc.n	210ea <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
   210e4:	2301      	movs	r3, #1
   210e6:	617b      	str	r3, [r7, #20]
   210e8:	e01b      	b.n	21122 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
   210ea:	4b10      	ldr	r3, [pc, #64]	; (2112c <prvInsertTimerInActiveList+0x7c>)
   210ec:	681a      	ldr	r2, [r3, #0]
   210ee:	68fb      	ldr	r3, [r7, #12]
   210f0:	3304      	adds	r3, #4
   210f2:	0019      	movs	r1, r3
   210f4:	0010      	movs	r0, r2
   210f6:	4b0e      	ldr	r3, [pc, #56]	; (21130 <prvInsertTimerInActiveList+0x80>)
   210f8:	4798      	blx	r3
   210fa:	e012      	b.n	21122 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
   210fc:	687a      	ldr	r2, [r7, #4]
   210fe:	683b      	ldr	r3, [r7, #0]
   21100:	429a      	cmp	r2, r3
   21102:	d206      	bcs.n	21112 <prvInsertTimerInActiveList+0x62>
   21104:	68ba      	ldr	r2, [r7, #8]
   21106:	683b      	ldr	r3, [r7, #0]
   21108:	429a      	cmp	r2, r3
   2110a:	d302      	bcc.n	21112 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
   2110c:	2301      	movs	r3, #1
   2110e:	617b      	str	r3, [r7, #20]
   21110:	e007      	b.n	21122 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   21112:	4b08      	ldr	r3, [pc, #32]	; (21134 <prvInsertTimerInActiveList+0x84>)
   21114:	681a      	ldr	r2, [r3, #0]
   21116:	68fb      	ldr	r3, [r7, #12]
   21118:	3304      	adds	r3, #4
   2111a:	0019      	movs	r1, r3
   2111c:	0010      	movs	r0, r2
   2111e:	4b04      	ldr	r3, [pc, #16]	; (21130 <prvInsertTimerInActiveList+0x80>)
   21120:	4798      	blx	r3
		}
	}

	return xProcessTimerNow;
   21122:	697b      	ldr	r3, [r7, #20]
}
   21124:	0018      	movs	r0, r3
   21126:	46bd      	mov	sp, r7
   21128:	b006      	add	sp, #24
   2112a:	bd80      	pop	{r7, pc}
   2112c:	200005e8 	.word	0x200005e8
   21130:	0001ee8b 	.word	0x0001ee8b
   21134:	200005e4 	.word	0x200005e4

00021138 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
   21138:	b590      	push	{r4, r7, lr}
   2113a:	b08d      	sub	sp, #52	; 0x34
   2113c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
   2113e:	e07e      	b.n	2123e <prvProcessReceivedCommands+0x106>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
   21140:	2308      	movs	r3, #8
   21142:	18fb      	adds	r3, r7, r3
   21144:	681b      	ldr	r3, [r3, #0]
   21146:	2b00      	cmp	r3, #0
   21148:	da10      	bge.n	2116c <prvProcessReceivedCommands+0x34>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
   2114a:	2308      	movs	r3, #8
   2114c:	18fb      	adds	r3, r7, r3
   2114e:	3304      	adds	r3, #4
   21150:	627b      	str	r3, [r7, #36]	; 0x24

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
   21152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   21154:	2b00      	cmp	r3, #0
   21156:	d101      	bne.n	2115c <prvProcessReceivedCommands+0x24>
   21158:	b672      	cpsid	i
   2115a:	e7fe      	b.n	2115a <prvProcessReceivedCommands+0x22>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
   2115c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2115e:	681a      	ldr	r2, [r3, #0]
   21160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   21162:	6858      	ldr	r0, [r3, #4]
   21164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   21166:	689b      	ldr	r3, [r3, #8]
   21168:	0019      	movs	r1, r3
   2116a:	4790      	blx	r2
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
   2116c:	2308      	movs	r3, #8
   2116e:	18fb      	adds	r3, r7, r3
   21170:	681b      	ldr	r3, [r3, #0]
   21172:	2b00      	cmp	r3, #0
   21174:	db63      	blt.n	2123e <prvProcessReceivedCommands+0x106>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
   21176:	2308      	movs	r3, #8
   21178:	18fb      	adds	r3, r7, r3
   2117a:	689b      	ldr	r3, [r3, #8]
   2117c:	623b      	str	r3, [r7, #32]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
   2117e:	6a3b      	ldr	r3, [r7, #32]
   21180:	695b      	ldr	r3, [r3, #20]
   21182:	2b00      	cmp	r3, #0
   21184:	d004      	beq.n	21190 <prvProcessReceivedCommands+0x58>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   21186:	6a3b      	ldr	r3, [r7, #32]
   21188:	3304      	adds	r3, #4
   2118a:	0018      	movs	r0, r3
   2118c:	4b33      	ldr	r3, [pc, #204]	; (2125c <prvProcessReceivedCommands+0x124>)
   2118e:	4798      	blx	r3
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   21190:	1d3b      	adds	r3, r7, #4
   21192:	0018      	movs	r0, r3
   21194:	4b32      	ldr	r3, [pc, #200]	; (21260 <prvProcessReceivedCommands+0x128>)
   21196:	4798      	blx	r3
   21198:	0003      	movs	r3, r0
   2119a:	61fb      	str	r3, [r7, #28]

			switch( xMessage.xMessageID )
   2119c:	2308      	movs	r3, #8
   2119e:	18fb      	adds	r3, r7, r3
   211a0:	681b      	ldr	r3, [r3, #0]
   211a2:	2b09      	cmp	r3, #9
   211a4:	d84a      	bhi.n	2123c <prvProcessReceivedCommands+0x104>
   211a6:	009a      	lsls	r2, r3, #2
   211a8:	4b2e      	ldr	r3, [pc, #184]	; (21264 <prvProcessReceivedCommands+0x12c>)
   211aa:	18d3      	adds	r3, r2, r3
   211ac:	681b      	ldr	r3, [r3, #0]
   211ae:	469f      	mov	pc, r3
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
   211b0:	2308      	movs	r3, #8
   211b2:	18fb      	adds	r3, r7, r3
   211b4:	685a      	ldr	r2, [r3, #4]
   211b6:	6a3b      	ldr	r3, [r7, #32]
   211b8:	699b      	ldr	r3, [r3, #24]
   211ba:	18d1      	adds	r1, r2, r3
   211bc:	2308      	movs	r3, #8
   211be:	18fb      	adds	r3, r7, r3
   211c0:	685b      	ldr	r3, [r3, #4]
   211c2:	69fa      	ldr	r2, [r7, #28]
   211c4:	6a38      	ldr	r0, [r7, #32]
   211c6:	4c28      	ldr	r4, [pc, #160]	; (21268 <prvProcessReceivedCommands+0x130>)
   211c8:	47a0      	blx	r4
   211ca:	1e03      	subs	r3, r0, #0
   211cc:	d037      	beq.n	2123e <prvProcessReceivedCommands+0x106>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   211ce:	6a3b      	ldr	r3, [r7, #32]
   211d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   211d2:	6a3a      	ldr	r2, [r7, #32]
   211d4:	0010      	movs	r0, r2
   211d6:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   211d8:	6a3b      	ldr	r3, [r7, #32]
   211da:	69db      	ldr	r3, [r3, #28]
   211dc:	2b01      	cmp	r3, #1
   211de:	d12e      	bne.n	2123e <prvProcessReceivedCommands+0x106>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
   211e0:	2308      	movs	r3, #8
   211e2:	18fb      	adds	r3, r7, r3
   211e4:	685a      	ldr	r2, [r3, #4]
   211e6:	6a3b      	ldr	r3, [r7, #32]
   211e8:	699b      	ldr	r3, [r3, #24]
   211ea:	18d2      	adds	r2, r2, r3
   211ec:	6a38      	ldr	r0, [r7, #32]
   211ee:	2300      	movs	r3, #0
   211f0:	9300      	str	r3, [sp, #0]
   211f2:	2300      	movs	r3, #0
   211f4:	2100      	movs	r1, #0
   211f6:	4c1d      	ldr	r4, [pc, #116]	; (2126c <prvProcessReceivedCommands+0x134>)
   211f8:	47a0      	blx	r4
   211fa:	0003      	movs	r3, r0
   211fc:	61bb      	str	r3, [r7, #24]
							configASSERT( xResult );
   211fe:	69bb      	ldr	r3, [r7, #24]
   21200:	2b00      	cmp	r3, #0
   21202:	d11c      	bne.n	2123e <prvProcessReceivedCommands+0x106>
   21204:	b672      	cpsid	i
   21206:	e7fe      	b.n	21206 <prvProcessReceivedCommands+0xce>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
   21208:	2308      	movs	r3, #8
   2120a:	18fb      	adds	r3, r7, r3
   2120c:	685a      	ldr	r2, [r3, #4]
   2120e:	6a3b      	ldr	r3, [r7, #32]
   21210:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
   21212:	6a3b      	ldr	r3, [r7, #32]
   21214:	699b      	ldr	r3, [r3, #24]
   21216:	2b00      	cmp	r3, #0
   21218:	d101      	bne.n	2121e <prvProcessReceivedCommands+0xe6>
   2121a:	b672      	cpsid	i
   2121c:	e7fe      	b.n	2121c <prvProcessReceivedCommands+0xe4>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
   2121e:	6a3b      	ldr	r3, [r7, #32]
   21220:	699a      	ldr	r2, [r3, #24]
   21222:	69fb      	ldr	r3, [r7, #28]
   21224:	18d1      	adds	r1, r2, r3
   21226:	69fb      	ldr	r3, [r7, #28]
   21228:	69fa      	ldr	r2, [r7, #28]
   2122a:	6a38      	ldr	r0, [r7, #32]
   2122c:	4c0e      	ldr	r4, [pc, #56]	; (21268 <prvProcessReceivedCommands+0x130>)
   2122e:	47a0      	blx	r4
					break;
   21230:	e005      	b.n	2123e <prvProcessReceivedCommands+0x106>
					allocated. */
					#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
					{
						/* The timer can only have been allocated dynamically -
						free it again. */
						vPortFree( pxTimer );
   21232:	6a3b      	ldr	r3, [r7, #32]
   21234:	0018      	movs	r0, r3
   21236:	4b0e      	ldr	r3, [pc, #56]	; (21270 <prvProcessReceivedCommands+0x138>)
   21238:	4798      	blx	r3
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
   2123a:	e000      	b.n	2123e <prvProcessReceivedCommands+0x106>

				default	:
					/* Don't expect to get here. */
					break;
   2123c:	46c0      	nop			; (mov r8, r8)
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
   2123e:	4b0d      	ldr	r3, [pc, #52]	; (21274 <prvProcessReceivedCommands+0x13c>)
   21240:	681b      	ldr	r3, [r3, #0]
   21242:	2208      	movs	r2, #8
   21244:	18b9      	adds	r1, r7, r2
   21246:	2200      	movs	r2, #0
   21248:	0018      	movs	r0, r3
   2124a:	4b0b      	ldr	r3, [pc, #44]	; (21278 <prvProcessReceivedCommands+0x140>)
   2124c:	4798      	blx	r3
   2124e:	1e03      	subs	r3, r0, #0
   21250:	d000      	beq.n	21254 <prvProcessReceivedCommands+0x11c>
   21252:	e775      	b.n	21140 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
   21254:	46c0      	nop			; (mov r8, r8)
   21256:	46bd      	mov	sp, r7
   21258:	b00b      	add	sp, #44	; 0x2c
   2125a:	bd90      	pop	{r4, r7, pc}
   2125c:	0001eef7 	.word	0x0001eef7
   21260:	00021069 	.word	0x00021069
   21264:	0002a8e8 	.word	0x0002a8e8
   21268:	000210b1 	.word	0x000210b1
   2126c:	00020e2d 	.word	0x00020e2d
   21270:	0001edc1 	.word	0x0001edc1
   21274:	200005ec 	.word	0x200005ec
   21278:	0001f3c1 	.word	0x0001f3c1

0002127c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
   2127c:	b590      	push	{r4, r7, lr}
   2127e:	b089      	sub	sp, #36	; 0x24
   21280:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   21282:	e03e      	b.n	21302 <prvSwitchTimerLists+0x86>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   21284:	4b28      	ldr	r3, [pc, #160]	; (21328 <prvSwitchTimerLists+0xac>)
   21286:	681b      	ldr	r3, [r3, #0]
   21288:	68db      	ldr	r3, [r3, #12]
   2128a:	681b      	ldr	r3, [r3, #0]
   2128c:	617b      	str	r3, [r7, #20]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   2128e:	4b26      	ldr	r3, [pc, #152]	; (21328 <prvSwitchTimerLists+0xac>)
   21290:	681b      	ldr	r3, [r3, #0]
   21292:	68db      	ldr	r3, [r3, #12]
   21294:	68db      	ldr	r3, [r3, #12]
   21296:	613b      	str	r3, [r7, #16]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   21298:	693b      	ldr	r3, [r7, #16]
   2129a:	3304      	adds	r3, #4
   2129c:	0018      	movs	r0, r3
   2129e:	4b23      	ldr	r3, [pc, #140]	; (2132c <prvSwitchTimerLists+0xb0>)
   212a0:	4798      	blx	r3
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   212a2:	693b      	ldr	r3, [r7, #16]
   212a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   212a6:	693a      	ldr	r2, [r7, #16]
   212a8:	0010      	movs	r0, r2
   212aa:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   212ac:	693b      	ldr	r3, [r7, #16]
   212ae:	69db      	ldr	r3, [r3, #28]
   212b0:	2b01      	cmp	r3, #1
   212b2:	d126      	bne.n	21302 <prvSwitchTimerLists+0x86>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
   212b4:	693b      	ldr	r3, [r7, #16]
   212b6:	699a      	ldr	r2, [r3, #24]
   212b8:	697b      	ldr	r3, [r7, #20]
   212ba:	18d3      	adds	r3, r2, r3
   212bc:	60fb      	str	r3, [r7, #12]
			if( xReloadTime > xNextExpireTime )
   212be:	68fa      	ldr	r2, [r7, #12]
   212c0:	697b      	ldr	r3, [r7, #20]
   212c2:	429a      	cmp	r2, r3
   212c4:	d90e      	bls.n	212e4 <prvSwitchTimerLists+0x68>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
   212c6:	693b      	ldr	r3, [r7, #16]
   212c8:	68fa      	ldr	r2, [r7, #12]
   212ca:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   212cc:	693b      	ldr	r3, [r7, #16]
   212ce:	693a      	ldr	r2, [r7, #16]
   212d0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   212d2:	4b15      	ldr	r3, [pc, #84]	; (21328 <prvSwitchTimerLists+0xac>)
   212d4:	681a      	ldr	r2, [r3, #0]
   212d6:	693b      	ldr	r3, [r7, #16]
   212d8:	3304      	adds	r3, #4
   212da:	0019      	movs	r1, r3
   212dc:	0010      	movs	r0, r2
   212de:	4b14      	ldr	r3, [pc, #80]	; (21330 <prvSwitchTimerLists+0xb4>)
   212e0:	4798      	blx	r3
   212e2:	e00e      	b.n	21302 <prvSwitchTimerLists+0x86>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
   212e4:	697a      	ldr	r2, [r7, #20]
   212e6:	6938      	ldr	r0, [r7, #16]
   212e8:	2300      	movs	r3, #0
   212ea:	9300      	str	r3, [sp, #0]
   212ec:	2300      	movs	r3, #0
   212ee:	2100      	movs	r1, #0
   212f0:	4c10      	ldr	r4, [pc, #64]	; (21334 <prvSwitchTimerLists+0xb8>)
   212f2:	47a0      	blx	r4
   212f4:	0003      	movs	r3, r0
   212f6:	60bb      	str	r3, [r7, #8]
				configASSERT( xResult );
   212f8:	68bb      	ldr	r3, [r7, #8]
   212fa:	2b00      	cmp	r3, #0
   212fc:	d101      	bne.n	21302 <prvSwitchTimerLists+0x86>
   212fe:	b672      	cpsid	i
   21300:	e7fe      	b.n	21300 <prvSwitchTimerLists+0x84>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   21302:	4b09      	ldr	r3, [pc, #36]	; (21328 <prvSwitchTimerLists+0xac>)
   21304:	681b      	ldr	r3, [r3, #0]
   21306:	681b      	ldr	r3, [r3, #0]
   21308:	2b00      	cmp	r3, #0
   2130a:	d1bb      	bne.n	21284 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
   2130c:	4b06      	ldr	r3, [pc, #24]	; (21328 <prvSwitchTimerLists+0xac>)
   2130e:	681b      	ldr	r3, [r3, #0]
   21310:	607b      	str	r3, [r7, #4]
	pxCurrentTimerList = pxOverflowTimerList;
   21312:	4b09      	ldr	r3, [pc, #36]	; (21338 <prvSwitchTimerLists+0xbc>)
   21314:	681a      	ldr	r2, [r3, #0]
   21316:	4b04      	ldr	r3, [pc, #16]	; (21328 <prvSwitchTimerLists+0xac>)
   21318:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
   2131a:	4b07      	ldr	r3, [pc, #28]	; (21338 <prvSwitchTimerLists+0xbc>)
   2131c:	687a      	ldr	r2, [r7, #4]
   2131e:	601a      	str	r2, [r3, #0]
}
   21320:	46c0      	nop			; (mov r8, r8)
   21322:	46bd      	mov	sp, r7
   21324:	b007      	add	sp, #28
   21326:	bd90      	pop	{r4, r7, pc}
   21328:	200005e4 	.word	0x200005e4
   2132c:	0001eef7 	.word	0x0001eef7
   21330:	0001ee8b 	.word	0x0001ee8b
   21334:	00020e2d 	.word	0x00020e2d
   21338:	200005e8 	.word	0x200005e8

0002133c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
   2133c:	b580      	push	{r7, lr}
   2133e:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
   21340:	4b10      	ldr	r3, [pc, #64]	; (21384 <prvCheckForValidListAndQueue+0x48>)
   21342:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
   21344:	4b10      	ldr	r3, [pc, #64]	; (21388 <prvCheckForValidListAndQueue+0x4c>)
   21346:	681b      	ldr	r3, [r3, #0]
   21348:	2b00      	cmp	r3, #0
   2134a:	d115      	bne.n	21378 <prvCheckForValidListAndQueue+0x3c>
		{
			vListInitialise( &xActiveTimerList1 );
   2134c:	4b0f      	ldr	r3, [pc, #60]	; (2138c <prvCheckForValidListAndQueue+0x50>)
   2134e:	0018      	movs	r0, r3
   21350:	4b0f      	ldr	r3, [pc, #60]	; (21390 <prvCheckForValidListAndQueue+0x54>)
   21352:	4798      	blx	r3
			vListInitialise( &xActiveTimerList2 );
   21354:	4b0f      	ldr	r3, [pc, #60]	; (21394 <prvCheckForValidListAndQueue+0x58>)
   21356:	0018      	movs	r0, r3
   21358:	4b0d      	ldr	r3, [pc, #52]	; (21390 <prvCheckForValidListAndQueue+0x54>)
   2135a:	4798      	blx	r3
			pxCurrentTimerList = &xActiveTimerList1;
   2135c:	4b0e      	ldr	r3, [pc, #56]	; (21398 <prvCheckForValidListAndQueue+0x5c>)
   2135e:	4a0b      	ldr	r2, [pc, #44]	; (2138c <prvCheckForValidListAndQueue+0x50>)
   21360:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
   21362:	4b0e      	ldr	r3, [pc, #56]	; (2139c <prvCheckForValidListAndQueue+0x60>)
   21364:	4a0b      	ldr	r2, [pc, #44]	; (21394 <prvCheckForValidListAndQueue+0x58>)
   21366:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
   21368:	2200      	movs	r2, #0
   2136a:	2110      	movs	r1, #16
   2136c:	2005      	movs	r0, #5
   2136e:	4b0c      	ldr	r3, [pc, #48]	; (213a0 <prvCheckForValidListAndQueue+0x64>)
   21370:	4798      	blx	r3
   21372:	0002      	movs	r2, r0
   21374:	4b04      	ldr	r3, [pc, #16]	; (21388 <prvCheckForValidListAndQueue+0x4c>)
   21376:	601a      	str	r2, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
   21378:	4b0a      	ldr	r3, [pc, #40]	; (213a4 <prvCheckForValidListAndQueue+0x68>)
   2137a:	4798      	blx	r3
}
   2137c:	46c0      	nop			; (mov r8, r8)
   2137e:	46bd      	mov	sp, r7
   21380:	bd80      	pop	{r7, pc}
   21382:	46c0      	nop			; (mov r8, r8)
   21384:	0001ec51 	.word	0x0001ec51
   21388:	200005ec 	.word	0x200005ec
   2138c:	200005bc 	.word	0x200005bc
   21390:	0001edf5 	.word	0x0001edf5
   21394:	200005d0 	.word	0x200005d0
   21398:	200005e4 	.word	0x200005e4
   2139c:	200005e8 	.word	0x200005e8
   213a0:	0001f005 	.word	0x0001f005
   213a4:	0001ec75 	.word	0x0001ec75

000213a8 <xTimerIsTimerActive>:
/*-----------------------------------------------------------*/

BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )
{
   213a8:	b580      	push	{r7, lr}
   213aa:	b084      	sub	sp, #16
   213ac:	af00      	add	r7, sp, #0
   213ae:	6078      	str	r0, [r7, #4]
BaseType_t xTimerIsInActiveList;
Timer_t *pxTimer = ( Timer_t * ) xTimer;
   213b0:	687b      	ldr	r3, [r7, #4]
   213b2:	60fb      	str	r3, [r7, #12]

	configASSERT( xTimer );
   213b4:	687b      	ldr	r3, [r7, #4]
   213b6:	2b00      	cmp	r3, #0
   213b8:	d101      	bne.n	213be <xTimerIsTimerActive+0x16>
   213ba:	b672      	cpsid	i
   213bc:	e7fe      	b.n	213bc <xTimerIsTimerActive+0x14>

	/* Is the timer in the list of active timers? */
	taskENTER_CRITICAL();
   213be:	4b07      	ldr	r3, [pc, #28]	; (213dc <xTimerIsTimerActive+0x34>)
   213c0:	4798      	blx	r3
	{
		/* Checking to see if it is in the NULL list in effect checks to see if
		it is referenced from either the current or the overflow timer lists in
		one go, but the logic has to be reversed, hence the '!'. */
		xTimerIsInActiveList = ( BaseType_t ) !( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) ); /*lint !e961. Cast is only redundant when NULL is passed into the macro. */
   213c2:	68fb      	ldr	r3, [r7, #12]
   213c4:	695b      	ldr	r3, [r3, #20]
   213c6:	1e5a      	subs	r2, r3, #1
   213c8:	4193      	sbcs	r3, r2
   213ca:	b2db      	uxtb	r3, r3
   213cc:	60bb      	str	r3, [r7, #8]
	}
	taskEXIT_CRITICAL();
   213ce:	4b04      	ldr	r3, [pc, #16]	; (213e0 <xTimerIsTimerActive+0x38>)
   213d0:	4798      	blx	r3

	return xTimerIsInActiveList;
   213d2:	68bb      	ldr	r3, [r7, #8]
} /*lint !e818 Can't be pointer to const due to the typedef. */
   213d4:	0018      	movs	r0, r3
   213d6:	46bd      	mov	sp, r7
   213d8:	b004      	add	sp, #16
   213da:	bd80      	pop	{r7, pc}
   213dc:	0001ec51 	.word	0x0001ec51
   213e0:	0001ec75 	.word	0x0001ec75

000213e4 <wdt_clear_early_warning>:
 *
 *  Clears the Watchdog timer early warning period elapsed flag, so that a new
 *  early warning period can be detected.
 */
static inline void wdt_clear_early_warning(void)
{
   213e4:	b580      	push	{r7, lr}
   213e6:	b082      	sub	sp, #8
   213e8:	af00      	add	r7, sp, #0
	Wdt *const WDT_module = WDT;
   213ea:	4b04      	ldr	r3, [pc, #16]	; (213fc <wdt_clear_early_warning+0x18>)
   213ec:	607b      	str	r3, [r7, #4]

	WDT_module->INTFLAG.reg = WDT_INTFLAG_EW;
   213ee:	687b      	ldr	r3, [r7, #4]
   213f0:	2201      	movs	r2, #1
   213f2:	719a      	strb	r2, [r3, #6]
}
   213f4:	46c0      	nop			; (mov r8, r8)
   213f6:	46bd      	mov	sp, r7
   213f8:	b002      	add	sp, #8
   213fa:	bd80      	pop	{r7, pc}
   213fc:	40001000 	.word	0x40001000

00021400 <WDT_Handler>:
	}
}

/** Handler for the WDT hardware module interrupt. */
void WDT_Handler(void)
{
   21400:	b580      	push	{r7, lr}
   21402:	af00      	add	r7, sp, #0
	wdt_clear_early_warning();
   21404:	4b05      	ldr	r3, [pc, #20]	; (2141c <WDT_Handler+0x1c>)
   21406:	4798      	blx	r3

	if (wdt_early_warning_callback) {
   21408:	4b05      	ldr	r3, [pc, #20]	; (21420 <WDT_Handler+0x20>)
   2140a:	681b      	ldr	r3, [r3, #0]
   2140c:	2b00      	cmp	r3, #0
   2140e:	d002      	beq.n	21416 <WDT_Handler+0x16>
		wdt_early_warning_callback();
   21410:	4b03      	ldr	r3, [pc, #12]	; (21420 <WDT_Handler+0x20>)
   21412:	681b      	ldr	r3, [r3, #0]
   21414:	4798      	blx	r3
	}
}
   21416:	46c0      	nop			; (mov r8, r8)
   21418:	46bd      	mov	sp, r7
   2141a:	bd80      	pop	{r7, pc}
   2141c:	000213e5 	.word	0x000213e5
   21420:	20000b44 	.word	0x20000b44

00021424 <TCC0_Handler>:
		void TCC##n##_Handler(void) \
		{ \
			_tcc_interrupt_handler(n); \
		}

MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
   21424:	b580      	push	{r7, lr}
   21426:	af00      	add	r7, sp, #0
   21428:	2000      	movs	r0, #0
   2142a:	4b02      	ldr	r3, [pc, #8]	; (21434 <TCC0_Handler+0x10>)
   2142c:	4798      	blx	r3
   2142e:	46c0      	nop			; (mov r8, r8)
   21430:	46bd      	mov	sp, r7
   21432:	bd80      	pop	{r7, pc}
   21434:	00021461 	.word	0x00021461

00021438 <TCC1_Handler>:
   21438:	b580      	push	{r7, lr}
   2143a:	af00      	add	r7, sp, #0
   2143c:	2001      	movs	r0, #1
   2143e:	4b02      	ldr	r3, [pc, #8]	; (21448 <TCC1_Handler+0x10>)
   21440:	4798      	blx	r3
   21442:	46c0      	nop			; (mov r8, r8)
   21444:	46bd      	mov	sp, r7
   21446:	bd80      	pop	{r7, pc}
   21448:	00021461 	.word	0x00021461

0002144c <TCC2_Handler>:
   2144c:	b580      	push	{r7, lr}
   2144e:	af00      	add	r7, sp, #0
   21450:	2002      	movs	r0, #2
   21452:	4b02      	ldr	r3, [pc, #8]	; (2145c <TCC2_Handler+0x10>)
   21454:	4798      	blx	r3
   21456:	46c0      	nop			; (mov r8, r8)
   21458:	46bd      	mov	sp, r7
   2145a:	bd80      	pop	{r7, pc}
   2145c:	00021461 	.word	0x00021461

00021460 <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
   21460:	b580      	push	{r7, lr}
   21462:	b086      	sub	sp, #24
   21464:	af00      	add	r7, sp, #0
   21466:	0002      	movs	r2, r0
   21468:	1dfb      	adds	r3, r7, #7
   2146a:	701a      	strb	r2, [r3, #0]
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
			(struct tcc_module *)_tcc_instances[module_index];
   2146c:	1dfb      	adds	r3, r7, #7
   2146e:	781a      	ldrb	r2, [r3, #0]
	struct tcc_module *module =
   21470:	4b18      	ldr	r3, [pc, #96]	; (214d4 <_tcc_interrupt_handler+0x74>)
   21472:	0092      	lsls	r2, r2, #2
   21474:	58d3      	ldr	r3, [r2, r3]
   21476:	613b      	str	r3, [r7, #16]

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
   21478:	693b      	ldr	r3, [r7, #16]
   2147a:	681b      	ldr	r3, [r3, #0]
   2147c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
			module->register_callback_mask &
   2147e:	693b      	ldr	r3, [r7, #16]
   21480:	6b5b      	ldr	r3, [r3, #52]	; 0x34
	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
   21482:	401a      	ands	r2, r3
			module->enable_callback_mask);
   21484:	693b      	ldr	r3, [r7, #16]
   21486:	6b9b      	ldr	r3, [r3, #56]	; 0x38
	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
   21488:	4013      	ands	r3, r2
   2148a:	60fb      	str	r3, [r7, #12]

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
   2148c:	2300      	movs	r3, #0
   2148e:	617b      	str	r3, [r7, #20]
   21490:	e019      	b.n	214c6 <_tcc_interrupt_handler+0x66>
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
   21492:	4b11      	ldr	r3, [pc, #68]	; (214d8 <_tcc_interrupt_handler+0x78>)
   21494:	697a      	ldr	r2, [r7, #20]
   21496:	0092      	lsls	r2, r2, #2
   21498:	58d3      	ldr	r3, [r2, r3]
   2149a:	68fa      	ldr	r2, [r7, #12]
   2149c:	4013      	ands	r3, r2
   2149e:	d00f      	beq.n	214c0 <_tcc_interrupt_handler+0x60>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
   214a0:	693a      	ldr	r2, [r7, #16]
   214a2:	697b      	ldr	r3, [r7, #20]
   214a4:	009b      	lsls	r3, r3, #2
   214a6:	18d3      	adds	r3, r2, r3
   214a8:	3304      	adds	r3, #4
   214aa:	681b      	ldr	r3, [r3, #0]
   214ac:	693a      	ldr	r2, [r7, #16]
   214ae:	0010      	movs	r0, r2
   214b0:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
   214b2:	693b      	ldr	r3, [r7, #16]
   214b4:	681b      	ldr	r3, [r3, #0]
   214b6:	4a08      	ldr	r2, [pc, #32]	; (214d8 <_tcc_interrupt_handler+0x78>)
   214b8:	6979      	ldr	r1, [r7, #20]
   214ba:	0089      	lsls	r1, r1, #2
   214bc:	588a      	ldr	r2, [r1, r2]
   214be:	62da      	str	r2, [r3, #44]	; 0x2c
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
   214c0:	697b      	ldr	r3, [r7, #20]
   214c2:	3301      	adds	r3, #1
   214c4:	617b      	str	r3, [r7, #20]
   214c6:	697b      	ldr	r3, [r7, #20]
   214c8:	2b0b      	cmp	r3, #11
   214ca:	dde2      	ble.n	21492 <_tcc_interrupt_handler+0x32>
		}
	}
}
   214cc:	46c0      	nop			; (mov r8, r8)
   214ce:	46bd      	mov	sp, r7
   214d0:	b006      	add	sp, #24
   214d2:	bd80      	pop	{r7, pc}
   214d4:	20000b48 	.word	0x20000b48
   214d8:	0002a910 	.word	0x0002a910

000214dc <TC3_Handler>:
#if (SAML21E) || (SAML21G) || (SAMR30E) || (SAMR30G)
	_TC_INTERRUPT_HANDLER(0,0)
	_TC_INTERRUPT_HANDLER(1,1)
	_TC_INTERRUPT_HANDLER(4,2)
#else
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
   214dc:	b580      	push	{r7, lr}
   214de:	af00      	add	r7, sp, #0
   214e0:	2000      	movs	r0, #0
   214e2:	4b02      	ldr	r3, [pc, #8]	; (214ec <TC3_Handler+0x10>)
   214e4:	4798      	blx	r3
   214e6:	46c0      	nop			; (mov r8, r8)
   214e8:	46bd      	mov	sp, r7
   214ea:	bd80      	pop	{r7, pc}
   214ec:	00021541 	.word	0x00021541

000214f0 <TC4_Handler>:
   214f0:	b580      	push	{r7, lr}
   214f2:	af00      	add	r7, sp, #0
   214f4:	2001      	movs	r0, #1
   214f6:	4b02      	ldr	r3, [pc, #8]	; (21500 <TC4_Handler+0x10>)
   214f8:	4798      	blx	r3
   214fa:	46c0      	nop			; (mov r8, r8)
   214fc:	46bd      	mov	sp, r7
   214fe:	bd80      	pop	{r7, pc}
   21500:	00021541 	.word	0x00021541

00021504 <TC5_Handler>:
   21504:	b580      	push	{r7, lr}
   21506:	af00      	add	r7, sp, #0
   21508:	2002      	movs	r0, #2
   2150a:	4b02      	ldr	r3, [pc, #8]	; (21514 <TC5_Handler+0x10>)
   2150c:	4798      	blx	r3
   2150e:	46c0      	nop			; (mov r8, r8)
   21510:	46bd      	mov	sp, r7
   21512:	bd80      	pop	{r7, pc}
   21514:	00021541 	.word	0x00021541

00021518 <TC6_Handler>:
   21518:	b580      	push	{r7, lr}
   2151a:	af00      	add	r7, sp, #0
   2151c:	2003      	movs	r0, #3
   2151e:	4b02      	ldr	r3, [pc, #8]	; (21528 <TC6_Handler+0x10>)
   21520:	4798      	blx	r3
   21522:	46c0      	nop			; (mov r8, r8)
   21524:	46bd      	mov	sp, r7
   21526:	bd80      	pop	{r7, pc}
   21528:	00021541 	.word	0x00021541

0002152c <TC7_Handler>:
   2152c:	b580      	push	{r7, lr}
   2152e:	af00      	add	r7, sp, #0
   21530:	2004      	movs	r0, #4
   21532:	4b02      	ldr	r3, [pc, #8]	; (2153c <TC7_Handler+0x10>)
   21534:	4798      	blx	r3
   21536:	46c0      	nop			; (mov r8, r8)
   21538:	46bd      	mov	sp, r7
   2153a:	bd80      	pop	{r7, pc}
   2153c:	00021541 	.word	0x00021541

00021540 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
   21540:	b580      	push	{r7, lr}
   21542:	b084      	sub	sp, #16
   21544:	af00      	add	r7, sp, #0
   21546:	0002      	movs	r2, r0
   21548:	1dfb      	adds	r3, r7, #7
   2154a:	701a      	strb	r2, [r3, #0]
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
			= (struct tc_module *)_tc_instances[instance];
   2154c:	1dfb      	adds	r3, r7, #7
   2154e:	781a      	ldrb	r2, [r3, #0]
	struct tc_module *module
   21550:	4b28      	ldr	r3, [pc, #160]	; (215f4 <_tc_interrupt_handler+0xb4>)
   21552:	0092      	lsls	r2, r2, #2
   21554:	58d3      	ldr	r3, [r2, r3]
   21556:	60fb      	str	r3, [r7, #12]

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
   21558:	68fb      	ldr	r3, [r7, #12]
   2155a:	681b      	ldr	r3, [r3, #0]
   2155c:	7b9b      	ldrb	r3, [r3, #14]
   2155e:	b2db      	uxtb	r3, r3
			module->register_callback_mask &
   21560:	68fa      	ldr	r2, [r7, #12]
   21562:	7e12      	ldrb	r2, [r2, #24]
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
   21564:	4013      	ands	r3, r2
   21566:	b2da      	uxtb	r2, r3
			module->enable_callback_mask;
   21568:	68fb      	ldr	r3, [r7, #12]
   2156a:	7e59      	ldrb	r1, [r3, #25]
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
   2156c:	230b      	movs	r3, #11
   2156e:	18fb      	adds	r3, r7, r3
   21570:	400a      	ands	r2, r1
   21572:	701a      	strb	r2, [r3, #0]

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
   21574:	230b      	movs	r3, #11
   21576:	18fb      	adds	r3, r7, r3
   21578:	781b      	ldrb	r3, [r3, #0]
   2157a:	2201      	movs	r2, #1
   2157c:	4013      	ands	r3, r2
   2157e:	d008      	beq.n	21592 <_tc_interrupt_handler+0x52>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
   21580:	68fb      	ldr	r3, [r7, #12]
   21582:	689b      	ldr	r3, [r3, #8]
   21584:	68fa      	ldr	r2, [r7, #12]
   21586:	0010      	movs	r0, r2
   21588:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
   2158a:	68fb      	ldr	r3, [r7, #12]
   2158c:	681b      	ldr	r3, [r3, #0]
   2158e:	2201      	movs	r2, #1
   21590:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
   21592:	230b      	movs	r3, #11
   21594:	18fb      	adds	r3, r7, r3
   21596:	781b      	ldrb	r3, [r3, #0]
   21598:	2202      	movs	r2, #2
   2159a:	4013      	ands	r3, r2
   2159c:	d008      	beq.n	215b0 <_tc_interrupt_handler+0x70>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_ERROR])(module);
   2159e:	68fb      	ldr	r3, [r7, #12]
   215a0:	68db      	ldr	r3, [r3, #12]
   215a2:	68fa      	ldr	r2, [r7, #12]
   215a4:	0010      	movs	r0, r2
   215a6:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
   215a8:	68fb      	ldr	r3, [r7, #12]
   215aa:	681b      	ldr	r3, [r3, #0]
   215ac:	2202      	movs	r2, #2
   215ae:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
   215b0:	230b      	movs	r3, #11
   215b2:	18fb      	adds	r3, r7, r3
   215b4:	781b      	ldrb	r3, [r3, #0]
   215b6:	2210      	movs	r2, #16
   215b8:	4013      	ands	r3, r2
   215ba:	d008      	beq.n	215ce <_tc_interrupt_handler+0x8e>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
   215bc:	68fb      	ldr	r3, [r7, #12]
   215be:	691b      	ldr	r3, [r3, #16]
   215c0:	68fa      	ldr	r2, [r7, #12]
   215c2:	0010      	movs	r0, r2
   215c4:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
   215c6:	68fb      	ldr	r3, [r7, #12]
   215c8:	681b      	ldr	r3, [r3, #0]
   215ca:	2210      	movs	r2, #16
   215cc:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
   215ce:	230b      	movs	r3, #11
   215d0:	18fb      	adds	r3, r7, r3
   215d2:	781b      	ldrb	r3, [r3, #0]
   215d4:	2220      	movs	r2, #32
   215d6:	4013      	ands	r3, r2
   215d8:	d008      	beq.n	215ec <_tc_interrupt_handler+0xac>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
   215da:	68fb      	ldr	r3, [r7, #12]
   215dc:	695b      	ldr	r3, [r3, #20]
   215de:	68fa      	ldr	r2, [r7, #12]
   215e0:	0010      	movs	r0, r2
   215e2:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
   215e4:	68fb      	ldr	r3, [r7, #12]
   215e6:	681b      	ldr	r3, [r3, #0]
   215e8:	2220      	movs	r2, #32
   215ea:	739a      	strb	r2, [r3, #14]
	}
}
   215ec:	46c0      	nop			; (mov r8, r8)
   215ee:	46bd      	mov	sp, r7
   215f0:	b004      	add	sp, #16
   215f2:	bd80      	pop	{r7, pc}
   215f4:	20000b54 	.word	0x20000b54

000215f8 <system_gclk_chan_get_config_defaults>:
{
   215f8:	b580      	push	{r7, lr}
   215fa:	b082      	sub	sp, #8
   215fc:	af00      	add	r7, sp, #0
   215fe:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   21600:	687b      	ldr	r3, [r7, #4]
   21602:	2200      	movs	r2, #0
   21604:	701a      	strb	r2, [r3, #0]
}
   21606:	46c0      	nop			; (mov r8, r8)
   21608:	46bd      	mov	sp, r7
   2160a:	b002      	add	sp, #8
   2160c:	bd80      	pop	{r7, pc}
	...

00021610 <system_apb_clock_set_mask>:
{
   21610:	b580      	push	{r7, lr}
   21612:	b082      	sub	sp, #8
   21614:	af00      	add	r7, sp, #0
   21616:	0002      	movs	r2, r0
   21618:	6039      	str	r1, [r7, #0]
   2161a:	1dfb      	adds	r3, r7, #7
   2161c:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   2161e:	1dfb      	adds	r3, r7, #7
   21620:	781b      	ldrb	r3, [r3, #0]
   21622:	2b01      	cmp	r3, #1
   21624:	d00a      	beq.n	2163c <system_apb_clock_set_mask+0x2c>
   21626:	2b02      	cmp	r3, #2
   21628:	d00f      	beq.n	2164a <system_apb_clock_set_mask+0x3a>
   2162a:	2b00      	cmp	r3, #0
   2162c:	d114      	bne.n	21658 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   2162e:	4b0e      	ldr	r3, [pc, #56]	; (21668 <system_apb_clock_set_mask+0x58>)
   21630:	4a0d      	ldr	r2, [pc, #52]	; (21668 <system_apb_clock_set_mask+0x58>)
   21632:	6991      	ldr	r1, [r2, #24]
   21634:	683a      	ldr	r2, [r7, #0]
   21636:	430a      	orrs	r2, r1
   21638:	619a      	str	r2, [r3, #24]
			break;
   2163a:	e00f      	b.n	2165c <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   2163c:	4b0a      	ldr	r3, [pc, #40]	; (21668 <system_apb_clock_set_mask+0x58>)
   2163e:	4a0a      	ldr	r2, [pc, #40]	; (21668 <system_apb_clock_set_mask+0x58>)
   21640:	69d1      	ldr	r1, [r2, #28]
   21642:	683a      	ldr	r2, [r7, #0]
   21644:	430a      	orrs	r2, r1
   21646:	61da      	str	r2, [r3, #28]
			break;
   21648:	e008      	b.n	2165c <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   2164a:	4b07      	ldr	r3, [pc, #28]	; (21668 <system_apb_clock_set_mask+0x58>)
   2164c:	4a06      	ldr	r2, [pc, #24]	; (21668 <system_apb_clock_set_mask+0x58>)
   2164e:	6a11      	ldr	r1, [r2, #32]
   21650:	683a      	ldr	r2, [r7, #0]
   21652:	430a      	orrs	r2, r1
   21654:	621a      	str	r2, [r3, #32]
			break;
   21656:	e001      	b.n	2165c <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   21658:	2317      	movs	r3, #23
   2165a:	e000      	b.n	2165e <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   2165c:	2300      	movs	r3, #0
}
   2165e:	0018      	movs	r0, r3
   21660:	46bd      	mov	sp, r7
   21662:	b002      	add	sp, #8
   21664:	bd80      	pop	{r7, pc}
   21666:	46c0      	nop			; (mov r8, r8)
   21668:	40000400 	.word	0x40000400

0002166c <system_pinmux_get_config_defaults>:
{
   2166c:	b580      	push	{r7, lr}
   2166e:	b082      	sub	sp, #8
   21670:	af00      	add	r7, sp, #0
   21672:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   21674:	687b      	ldr	r3, [r7, #4]
   21676:	2280      	movs	r2, #128	; 0x80
   21678:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   2167a:	687b      	ldr	r3, [r7, #4]
   2167c:	2200      	movs	r2, #0
   2167e:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   21680:	687b      	ldr	r3, [r7, #4]
   21682:	2201      	movs	r2, #1
   21684:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   21686:	687b      	ldr	r3, [r7, #4]
   21688:	2200      	movs	r2, #0
   2168a:	70da      	strb	r2, [r3, #3]
}
   2168c:	46c0      	nop			; (mov r8, r8)
   2168e:	46bd      	mov	sp, r7
   21690:	b002      	add	sp, #8
   21692:	bd80      	pop	{r7, pc}

00021694 <system_is_debugger_present>:
 * \retval true  Debugger is connected to the system
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
   21694:	b580      	push	{r7, lr}
   21696:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
   21698:	4b05      	ldr	r3, [pc, #20]	; (216b0 <system_is_debugger_present+0x1c>)
   2169a:	789b      	ldrb	r3, [r3, #2]
   2169c:	b2db      	uxtb	r3, r3
   2169e:	001a      	movs	r2, r3
   216a0:	2302      	movs	r3, #2
   216a2:	4013      	ands	r3, r2
   216a4:	1e5a      	subs	r2, r3, #1
   216a6:	4193      	sbcs	r3, r2
   216a8:	b2db      	uxtb	r3, r3
}
   216aa:	0018      	movs	r0, r3
   216ac:	46bd      	mov	sp, r7
   216ae:	bd80      	pop	{r7, pc}
   216b0:	41002000 	.word	0x41002000

000216b4 <usart_is_syncing>:
{
   216b4:	b580      	push	{r7, lr}
   216b6:	b084      	sub	sp, #16
   216b8:	af00      	add	r7, sp, #0
   216ba:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
   216bc:	687b      	ldr	r3, [r7, #4]
   216be:	681b      	ldr	r3, [r3, #0]
   216c0:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
   216c2:	68fb      	ldr	r3, [r7, #12]
   216c4:	69db      	ldr	r3, [r3, #28]
   216c6:	1e5a      	subs	r2, r3, #1
   216c8:	4193      	sbcs	r3, r2
   216ca:	b2db      	uxtb	r3, r3
}
   216cc:	0018      	movs	r0, r3
   216ce:	46bd      	mov	sp, r7
   216d0:	b004      	add	sp, #16
   216d2:	bd80      	pop	{r7, pc}

000216d4 <_usart_wait_for_sync>:
{
   216d4:	b580      	push	{r7, lr}
   216d6:	b082      	sub	sp, #8
   216d8:	af00      	add	r7, sp, #0
   216da:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
   216dc:	46c0      	nop			; (mov r8, r8)
   216de:	687b      	ldr	r3, [r7, #4]
   216e0:	0018      	movs	r0, r3
   216e2:	4b04      	ldr	r3, [pc, #16]	; (216f4 <_usart_wait_for_sync+0x20>)
   216e4:	4798      	blx	r3
   216e6:	1e03      	subs	r3, r0, #0
   216e8:	d1f9      	bne.n	216de <_usart_wait_for_sync+0xa>
}
   216ea:	46c0      	nop			; (mov r8, r8)
   216ec:	46bd      	mov	sp, r7
   216ee:	b002      	add	sp, #8
   216f0:	bd80      	pop	{r7, pc}
   216f2:	46c0      	nop			; (mov r8, r8)
   216f4:	000216b5 	.word	0x000216b5

000216f8 <_usart_set_config>:
 * Set Configuration of the USART module
 */
static enum status_code _usart_set_config(
		struct usart_module *const module,
		const struct usart_config *const config)
{
   216f8:	b5b0      	push	{r4, r5, r7, lr}
   216fa:	b08c      	sub	sp, #48	; 0x30
   216fc:	af02      	add	r7, sp, #8
   216fe:	6078      	str	r0, [r7, #4]
   21700:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   21702:	687b      	ldr	r3, [r7, #4]
   21704:	681b      	ldr	r3, [r3, #0]
   21706:	61bb      	str	r3, [r7, #24]

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   21708:	687b      	ldr	r3, [r7, #4]
   2170a:	681b      	ldr	r3, [r3, #0]
   2170c:	0018      	movs	r0, r3
   2170e:	4bab      	ldr	r3, [pc, #684]	; (219bc <_usart_set_config+0x2c4>)
   21710:	4798      	blx	r3
   21712:	0003      	movs	r3, r0
   21714:	617b      	str	r3, [r7, #20]
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#else
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   21716:	697b      	ldr	r3, [r7, #20]
   21718:	3314      	adds	r3, #20
   2171a:	613b      	str	r3, [r7, #16]
#endif

	/* Cache new register values to minimize the number of register writes */
	uint32_t ctrla = 0;
   2171c:	2300      	movs	r3, #0
   2171e:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t ctrlb = 0;
   21720:	2300      	movs	r3, #0
   21722:	623b      	str	r3, [r7, #32]
#ifdef FEATURE_USART_ISO7816
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
   21724:	230a      	movs	r3, #10
   21726:	18fb      	adds	r3, r7, r3
   21728:	2200      	movs	r2, #0
   2172a:	801a      	strh	r2, [r3, #0]
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   2172c:	231f      	movs	r3, #31
   2172e:	18fb      	adds	r3, r7, r3
   21730:	2200      	movs	r2, #0
   21732:	701a      	strb	r2, [r3, #0]
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
   21734:	231e      	movs	r3, #30
   21736:	18fb      	adds	r3, r7, r3
   21738:	2210      	movs	r2, #16
   2173a:	701a      	strb	r2, [r3, #0]

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
   2173c:	683b      	ldr	r3, [r7, #0]
   2173e:	8a1b      	ldrh	r3, [r3, #16]
   21740:	2280      	movs	r2, #128	; 0x80
   21742:	01d2      	lsls	r2, r2, #7
   21744:	4293      	cmp	r3, r2
   21746:	d01c      	beq.n	21782 <_usart_set_config+0x8a>
   21748:	2280      	movs	r2, #128	; 0x80
   2174a:	01d2      	lsls	r2, r2, #7
   2174c:	4293      	cmp	r3, r2
   2174e:	dc06      	bgt.n	2175e <_usart_set_config+0x66>
   21750:	2b00      	cmp	r3, #0
   21752:	d00d      	beq.n	21770 <_usart_set_config+0x78>
   21754:	2280      	movs	r2, #128	; 0x80
   21756:	0192      	lsls	r2, r2, #6
   21758:	4293      	cmp	r3, r2
   2175a:	d024      	beq.n	217a6 <_usart_set_config+0xae>
   2175c:	e035      	b.n	217ca <_usart_set_config+0xd2>
   2175e:	22c0      	movs	r2, #192	; 0xc0
   21760:	01d2      	lsls	r2, r2, #7
   21762:	4293      	cmp	r3, r2
   21764:	d028      	beq.n	217b8 <_usart_set_config+0xc0>
   21766:	2280      	movs	r2, #128	; 0x80
   21768:	0212      	lsls	r2, r2, #8
   2176a:	4293      	cmp	r3, r2
   2176c:	d012      	beq.n	21794 <_usart_set_config+0x9c>
   2176e:	e02c      	b.n	217ca <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   21770:	231f      	movs	r3, #31
   21772:	18fb      	adds	r3, r7, r3
   21774:	2200      	movs	r2, #0
   21776:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
   21778:	231e      	movs	r3, #30
   2177a:	18fb      	adds	r3, r7, r3
   2177c:	2210      	movs	r2, #16
   2177e:	701a      	strb	r2, [r3, #0]
			break;
   21780:	e023      	b.n	217ca <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   21782:	231f      	movs	r3, #31
   21784:	18fb      	adds	r3, r7, r3
   21786:	2200      	movs	r2, #0
   21788:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
   2178a:	231e      	movs	r3, #30
   2178c:	18fb      	adds	r3, r7, r3
   2178e:	2208      	movs	r2, #8
   21790:	701a      	strb	r2, [r3, #0]
			break;
   21792:	e01a      	b.n	217ca <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   21794:	231f      	movs	r3, #31
   21796:	18fb      	adds	r3, r7, r3
   21798:	2200      	movs	r2, #0
   2179a:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
   2179c:	231e      	movs	r3, #30
   2179e:	18fb      	adds	r3, r7, r3
   217a0:	2203      	movs	r2, #3
   217a2:	701a      	strb	r2, [r3, #0]
			break;
   217a4:	e011      	b.n	217ca <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
   217a6:	231f      	movs	r3, #31
   217a8:	18fb      	adds	r3, r7, r3
   217aa:	2201      	movs	r2, #1
   217ac:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
   217ae:	231e      	movs	r3, #30
   217b0:	18fb      	adds	r3, r7, r3
   217b2:	2210      	movs	r2, #16
   217b4:	701a      	strb	r2, [r3, #0]
			break;
   217b6:	e008      	b.n	217ca <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
   217b8:	231f      	movs	r3, #31
   217ba:	18fb      	adds	r3, r7, r3
   217bc:	2201      	movs	r2, #1
   217be:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
   217c0:	231e      	movs	r3, #30
   217c2:	18fb      	adds	r3, r7, r3
   217c4:	2208      	movs	r2, #8
   217c6:	701a      	strb	r2, [r3, #0]
			break;
   217c8:	46c0      	nop			; (mov r8, r8)
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
   217ca:	683b      	ldr	r3, [r7, #0]
   217cc:	681a      	ldr	r2, [r3, #0]
		(uint32_t)config->mux_setting |
   217ce:	683b      	ldr	r3, [r7, #0]
   217d0:	68db      	ldr	r3, [r3, #12]
	ctrla = (uint32_t)config->data_order |
   217d2:	431a      	orrs	r2, r3
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
   217d4:	683b      	ldr	r3, [r7, #0]
   217d6:	695b      	ldr	r3, [r3, #20]
		(uint32_t)config->mux_setting |
   217d8:	4313      	orrs	r3, r2
		config->sample_rate |
   217da:	683a      	ldr	r2, [r7, #0]
   217dc:	8a12      	ldrh	r2, [r2, #16]
		config->sample_adjustment |
   217de:	4313      	orrs	r3, r2
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
   217e0:	683a      	ldr	r2, [r7, #0]
   217e2:	7e12      	ldrb	r2, [r2, #24]
   217e4:	0212      	lsls	r2, r2, #8
		config->sample_rate |
   217e6:	4313      	orrs	r3, r2
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
   217e8:	683a      	ldr	r2, [r7, #0]
   217ea:	2126      	movs	r1, #38	; 0x26
   217ec:	5c52      	ldrb	r2, [r2, r1]
   217ee:	0752      	lsls	r2, r2, #29
	ctrla = (uint32_t)config->data_order |
   217f0:	4313      	orrs	r3, r2
   217f2:	627b      	str	r3, [r7, #36]	; 0x24

	enum status_code status_code = STATUS_OK;
   217f4:	231d      	movs	r3, #29
   217f6:	18fb      	adds	r3, r7, r3
   217f8:	2200      	movs	r2, #0
   217fa:	701a      	strb	r2, [r3, #0]

	transfer_mode = (uint32_t)config->transfer_mode;
   217fc:	683b      	ldr	r3, [r7, #0]
   217fe:	685b      	ldr	r3, [r3, #4]
   21800:	60fb      	str	r3, [r7, #12]
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
   21802:	68fb      	ldr	r3, [r7, #12]
   21804:	2b00      	cmp	r3, #0
   21806:	d01e      	beq.n	21846 <_usart_set_config+0x14e>
   21808:	2280      	movs	r2, #128	; 0x80
   2180a:	0552      	lsls	r2, r2, #21
   2180c:	4293      	cmp	r3, r2
   2180e:	d14f      	bne.n	218b0 <_usart_set_config+0x1b8>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
   21810:	683b      	ldr	r3, [r7, #0]
   21812:	2227      	movs	r2, #39	; 0x27
   21814:	5c9b      	ldrb	r3, [r3, r2]
   21816:	2201      	movs	r2, #1
   21818:	4053      	eors	r3, r2
   2181a:	b2db      	uxtb	r3, r3
   2181c:	2b00      	cmp	r3, #0
   2181e:	d046      	beq.n	218ae <_usart_set_config+0x1b6>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
   21820:	683b      	ldr	r3, [r7, #0]
   21822:	6a1d      	ldr	r5, [r3, #32]
   21824:	693b      	ldr	r3, [r7, #16]
   21826:	b2db      	uxtb	r3, r3
   21828:	0018      	movs	r0, r3
   2182a:	4b65      	ldr	r3, [pc, #404]	; (219c0 <_usart_set_config+0x2c8>)
   2182c:	4798      	blx	r3
   2182e:	0001      	movs	r1, r0
   21830:	231d      	movs	r3, #29
   21832:	18fc      	adds	r4, r7, r3
   21834:	230a      	movs	r3, #10
   21836:	18fb      	adds	r3, r7, r3
   21838:	001a      	movs	r2, r3
   2183a:	0028      	movs	r0, r5
   2183c:	4b61      	ldr	r3, [pc, #388]	; (219c4 <_usart_set_config+0x2cc>)
   2183e:	4798      	blx	r3
   21840:	0003      	movs	r3, r0
   21842:	7023      	strb	r3, [r4, #0]
						system_gclk_chan_get_hz(gclk_index), &baud);
			}

			break;
   21844:	e033      	b.n	218ae <_usart_set_config+0x1b6>

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
   21846:	683b      	ldr	r3, [r7, #0]
   21848:	2227      	movs	r2, #39	; 0x27
   2184a:	5c9b      	ldrb	r3, [r3, r2]
   2184c:	2b00      	cmp	r3, #0
   2184e:	d014      	beq.n	2187a <_usart_set_config+0x182>
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
   21850:	683b      	ldr	r3, [r7, #0]
   21852:	6a18      	ldr	r0, [r3, #32]
   21854:	683b      	ldr	r3, [r7, #0]
   21856:	6a99      	ldr	r1, [r3, #40]	; 0x28
				status_code =
   21858:	231d      	movs	r3, #29
   2185a:	18fc      	adds	r4, r7, r3
   2185c:	231f      	movs	r3, #31
   2185e:	18fb      	adds	r3, r7, r3
   21860:	781d      	ldrb	r5, [r3, #0]
   21862:	230a      	movs	r3, #10
   21864:	18fa      	adds	r2, r7, r3
   21866:	231e      	movs	r3, #30
   21868:	18fb      	adds	r3, r7, r3
   2186a:	781b      	ldrb	r3, [r3, #0]
   2186c:	9300      	str	r3, [sp, #0]
   2186e:	002b      	movs	r3, r5
   21870:	4d55      	ldr	r5, [pc, #340]	; (219c8 <_usart_set_config+0x2d0>)
   21872:	47a8      	blx	r5
   21874:	0003      	movs	r3, r0
   21876:	7023      	strb	r3, [r4, #0]
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							system_gclk_chan_get_hz(gclk_index), &baud, mode, sample_num);
			}

			break;
   21878:	e01a      	b.n	218b0 <_usart_set_config+0x1b8>
						_sercom_get_async_baud_val(config->baudrate,
   2187a:	683b      	ldr	r3, [r7, #0]
   2187c:	6a1d      	ldr	r5, [r3, #32]
   2187e:	693b      	ldr	r3, [r7, #16]
   21880:	b2db      	uxtb	r3, r3
   21882:	0018      	movs	r0, r3
   21884:	4b4e      	ldr	r3, [pc, #312]	; (219c0 <_usart_set_config+0x2c8>)
   21886:	4798      	blx	r3
				status_code =
   21888:	231d      	movs	r3, #29
   2188a:	18fc      	adds	r4, r7, r3
   2188c:	231f      	movs	r3, #31
   2188e:	18fb      	adds	r3, r7, r3
   21890:	7819      	ldrb	r1, [r3, #0]
   21892:	230a      	movs	r3, #10
   21894:	18fa      	adds	r2, r7, r3
   21896:	231e      	movs	r3, #30
   21898:	18fb      	adds	r3, r7, r3
   2189a:	781b      	ldrb	r3, [r3, #0]
   2189c:	9300      	str	r3, [sp, #0]
   2189e:	000b      	movs	r3, r1
   218a0:	0001      	movs	r1, r0
   218a2:	0028      	movs	r0, r5
   218a4:	4d48      	ldr	r5, [pc, #288]	; (219c8 <_usart_set_config+0x2d0>)
   218a6:	47a8      	blx	r5
   218a8:	0003      	movs	r3, r0
   218aa:	7023      	strb	r3, [r4, #0]
			break;
   218ac:	e000      	b.n	218b0 <_usart_set_config+0x1b8>
			break;
   218ae:	46c0      	nop			; (mov r8, r8)
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
   218b0:	231d      	movs	r3, #29
   218b2:	18fb      	adds	r3, r7, r3
   218b4:	781b      	ldrb	r3, [r3, #0]
   218b6:	2b00      	cmp	r3, #0
   218b8:	d003      	beq.n	218c2 <_usart_set_config+0x1ca>
		/* Abort */
		return status_code;
   218ba:	231d      	movs	r3, #29
   218bc:	18fb      	adds	r3, r7, r3
   218be:	781b      	ldrb	r3, [r3, #0]
   218c0:	e077      	b.n	219b2 <_usart_set_config+0x2ba>
#ifdef FEATURE_USART_ISO7816
	}
#endif

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
   218c2:	683b      	ldr	r3, [r7, #0]
   218c4:	7e5b      	ldrb	r3, [r3, #25]
   218c6:	2b00      	cmp	r3, #0
   218c8:	d003      	beq.n	218d2 <_usart_set_config+0x1da>
		usart_hw->RXPL.reg = config->receive_pulse_length;
   218ca:	683b      	ldr	r3, [r7, #0]
   218cc:	7e9a      	ldrb	r2, [r3, #26]
   218ce:	69bb      	ldr	r3, [r7, #24]
   218d0:	739a      	strb	r2, [r3, #14]
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   218d2:	687b      	ldr	r3, [r7, #4]
   218d4:	0018      	movs	r0, r3
   218d6:	4b3d      	ldr	r3, [pc, #244]	; (219cc <_usart_set_config+0x2d4>)
   218d8:	4798      	blx	r3

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
   218da:	230a      	movs	r3, #10
   218dc:	18fb      	adds	r3, r7, r3
   218de:	881a      	ldrh	r2, [r3, #0]
   218e0:	69bb      	ldr	r3, [r7, #24]
   218e2:	819a      	strh	r2, [r3, #12]

	/* Set sample mode */
	ctrla |= transfer_mode;
   218e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   218e6:	68fb      	ldr	r3, [r7, #12]
   218e8:	4313      	orrs	r3, r2
   218ea:	627b      	str	r3, [r7, #36]	; 0x24

	if (config->use_external_clock == false) {
   218ec:	683b      	ldr	r3, [r7, #0]
   218ee:	2227      	movs	r2, #39	; 0x27
   218f0:	5c9b      	ldrb	r3, [r3, r2]
   218f2:	2201      	movs	r2, #1
   218f4:	4053      	eors	r3, r2
   218f6:	b2db      	uxtb	r3, r3
   218f8:	2b00      	cmp	r3, #0
   218fa:	d003      	beq.n	21904 <_usart_set_config+0x20c>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
   218fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   218fe:	2204      	movs	r2, #4
   21900:	4313      	orrs	r3, r2
   21902:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
   21904:	683b      	ldr	r3, [r7, #0]
   21906:	7e5b      	ldrb	r3, [r3, #25]
   21908:	029a      	lsls	r2, r3, #10
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
   2190a:	683b      	ldr	r3, [r7, #0]
   2190c:	7f1b      	ldrb	r3, [r3, #28]
   2190e:	025b      	lsls	r3, r3, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
   21910:	431a      	orrs	r2, r3
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
   21912:	683b      	ldr	r3, [r7, #0]
   21914:	7f5b      	ldrb	r3, [r3, #29]
   21916:	021b      	lsls	r3, r3, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
   21918:	431a      	orrs	r2, r3
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
   2191a:	683b      	ldr	r3, [r7, #0]
   2191c:	2124      	movs	r1, #36	; 0x24
   2191e:	5c5b      	ldrb	r3, [r3, r1]
   21920:	045b      	lsls	r3, r3, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
   21922:	431a      	orrs	r2, r3
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
   21924:	683b      	ldr	r3, [r7, #0]
   21926:	2125      	movs	r1, #37	; 0x25
   21928:	5c5b      	ldrb	r3, [r3, r1]
   2192a:	041b      	lsls	r3, r3, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
   2192c:	4313      	orrs	r3, r2
	ctrlb =  
   2192e:	623b      	str	r3, [r7, #32]
				ctrlb |= USART_STOPBITS_1;
				break;		
		}
	} else {
#endif
	ctrlb |= (uint32_t)config->stopbits;
   21930:	683b      	ldr	r3, [r7, #0]
   21932:	7a9b      	ldrb	r3, [r3, #10]
   21934:	001a      	movs	r2, r3
   21936:	6a3b      	ldr	r3, [r7, #32]
   21938:	4313      	orrs	r3, r2
   2193a:	623b      	str	r3, [r7, #32]
	ctrlb |= (uint32_t)config->character_size;
   2193c:	683b      	ldr	r3, [r7, #0]
   2193e:	7adb      	ldrb	r3, [r3, #11]
   21940:	001a      	movs	r2, r3
   21942:	6a3b      	ldr	r3, [r7, #32]
   21944:	4313      	orrs	r3, r2
   21946:	623b      	str	r3, [r7, #32]
	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
   21948:	683b      	ldr	r3, [r7, #0]
   2194a:	891b      	ldrh	r3, [r3, #8]
   2194c:	2bff      	cmp	r3, #255	; 0xff
   2194e:	d00b      	beq.n	21968 <_usart_set_config+0x270>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
   21950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   21952:	2280      	movs	r2, #128	; 0x80
   21954:	0452      	lsls	r2, r2, #17
   21956:	4313      	orrs	r3, r2
   21958:	627b      	str	r3, [r7, #36]	; 0x24
		ctrlb |= config->parity;
   2195a:	683b      	ldr	r3, [r7, #0]
   2195c:	891b      	ldrh	r3, [r3, #8]
   2195e:	001a      	movs	r2, r3
   21960:	6a3b      	ldr	r3, [r7, #32]
   21962:	4313      	orrs	r3, r2
   21964:	623b      	str	r3, [r7, #32]
   21966:	e008      	b.n	2197a <_usart_set_config+0x282>
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
   21968:	683b      	ldr	r3, [r7, #0]
   2196a:	7edb      	ldrb	r3, [r3, #27]
   2196c:	2b00      	cmp	r3, #0
   2196e:	d004      	beq.n	2197a <_usart_set_config+0x282>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
   21970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   21972:	2280      	movs	r2, #128	; 0x80
   21974:	04d2      	lsls	r2, r2, #19
   21976:	4313      	orrs	r3, r2
   21978:	627b      	str	r3, [r7, #36]	; 0x24
		ctrla |= config->lin_node;
	}
#endif

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
   2197a:	683b      	ldr	r3, [r7, #0]
   2197c:	222c      	movs	r2, #44	; 0x2c
   2197e:	5c9b      	ldrb	r3, [r3, r2]
   21980:	2b00      	cmp	r3, #0
   21982:	d103      	bne.n	2198c <_usart_set_config+0x294>
   21984:	4b12      	ldr	r3, [pc, #72]	; (219d0 <_usart_set_config+0x2d8>)
   21986:	4798      	blx	r3
   21988:	1e03      	subs	r3, r0, #0
   2198a:	d003      	beq.n	21994 <_usart_set_config+0x29c>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
   2198c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2198e:	2280      	movs	r2, #128	; 0x80
   21990:	4313      	orrs	r3, r2
   21992:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   21994:	687b      	ldr	r3, [r7, #4]
   21996:	0018      	movs	r0, r3
   21998:	4b0c      	ldr	r3, [pc, #48]	; (219cc <_usart_set_config+0x2d4>)
   2199a:	4798      	blx	r3

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
   2199c:	69bb      	ldr	r3, [r7, #24]
   2199e:	6a3a      	ldr	r2, [r7, #32]
   219a0:	605a      	str	r2, [r3, #4]

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   219a2:	687b      	ldr	r3, [r7, #4]
   219a4:	0018      	movs	r0, r3
   219a6:	4b09      	ldr	r3, [pc, #36]	; (219cc <_usart_set_config+0x2d4>)
   219a8:	4798      	blx	r3

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
   219aa:	69bb      	ldr	r3, [r7, #24]
   219ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   219ae:	601a      	str	r2, [r3, #0]
		_usart_wait_for_sync(module);
		usart_hw->CTRLC.reg = ctrlc;
	}
#endif

	return STATUS_OK;
   219b0:	2300      	movs	r3, #0
}
   219b2:	0018      	movs	r0, r3
   219b4:	46bd      	mov	sp, r7
   219b6:	b00a      	add	sp, #40	; 0x28
   219b8:	bdb0      	pop	{r4, r5, r7, pc}
   219ba:	46c0      	nop			; (mov r8, r8)
   219bc:	0001ea95 	.word	0x0001ea95
   219c0:	00024839 	.word	0x00024839
   219c4:	0001e60f 	.word	0x0001e60f
   219c8:	0001e68d 	.word	0x0001e68d
   219cc:	000216d5 	.word	0x000216d5
   219d0:	00021695 	.word	0x00021695

000219d4 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
   219d4:	b590      	push	{r4, r7, lr}
   219d6:	b093      	sub	sp, #76	; 0x4c
   219d8:	af00      	add	r7, sp, #0
   219da:	60f8      	str	r0, [r7, #12]
   219dc:	60b9      	str	r1, [r7, #8]
   219de:	607a      	str	r2, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(hw);
	Assert(config);

	enum status_code status_code = STATUS_OK;
   219e0:	233b      	movs	r3, #59	; 0x3b
   219e2:	18fb      	adds	r3, r7, r3
   219e4:	2200      	movs	r2, #0
   219e6:	701a      	strb	r2, [r3, #0]

	/* Assign module pointer to software instance struct */
	module->hw = hw;
   219e8:	68fb      	ldr	r3, [r7, #12]
   219ea:	68ba      	ldr	r2, [r7, #8]
   219ec:	601a      	str	r2, [r3, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   219ee:	68fb      	ldr	r3, [r7, #12]
   219f0:	681b      	ldr	r3, [r3, #0]
   219f2:	637b      	str	r3, [r7, #52]	; 0x34

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   219f4:	68fb      	ldr	r3, [r7, #12]
   219f6:	681b      	ldr	r3, [r3, #0]
   219f8:	0018      	movs	r0, r3
   219fa:	4b86      	ldr	r3, [pc, #536]	; (21c14 <usart_init+0x240>)
   219fc:	4798      	blx	r3
   219fe:	0003      	movs	r3, r0
   21a00:	633b      	str	r3, [r7, #48]	; 0x30
		gclk_index	= SERCOM5_GCLK_ID_CORE;
    } else {
    	gclk_index	= sercom_index + SERCOM0_GCLK_ID_CORE;
    }
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
   21a02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   21a04:	3302      	adds	r3, #2
   21a06:	62fb      	str	r3, [r7, #44]	; 0x2c
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   21a08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   21a0a:	3314      	adds	r3, #20
   21a0c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
   21a0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   21a10:	681b      	ldr	r3, [r3, #0]
   21a12:	2201      	movs	r2, #1
   21a14:	4013      	ands	r3, r2
   21a16:	d001      	beq.n	21a1c <usart_init+0x48>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
   21a18:	2305      	movs	r3, #5
   21a1a:	e0f6      	b.n	21c0a <usart_init+0x236>
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
   21a1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   21a1e:	681b      	ldr	r3, [r3, #0]
   21a20:	2202      	movs	r2, #2
   21a22:	4013      	ands	r3, r2
   21a24:	d001      	beq.n	21a2a <usart_init+0x56>
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
   21a26:	231c      	movs	r3, #28
   21a28:	e0ef      	b.n	21c0a <usart_init+0x236>
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
   21a2a:	2201      	movs	r2, #1
   21a2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   21a2e:	409a      	lsls	r2, r3
   21a30:	0013      	movs	r3, r2
   21a32:	0019      	movs	r1, r3
   21a34:	2002      	movs	r0, #2
   21a36:	4b78      	ldr	r3, [pc, #480]	; (21c18 <usart_init+0x244>)
   21a38:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   21a3a:	2324      	movs	r3, #36	; 0x24
   21a3c:	18fb      	adds	r3, r7, r3
   21a3e:	0018      	movs	r0, r3
   21a40:	4b76      	ldr	r3, [pc, #472]	; (21c1c <usart_init+0x248>)
   21a42:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
   21a44:	687b      	ldr	r3, [r7, #4]
   21a46:	222d      	movs	r2, #45	; 0x2d
   21a48:	5c9a      	ldrb	r2, [r3, r2]
   21a4a:	2324      	movs	r3, #36	; 0x24
   21a4c:	18fb      	adds	r3, r7, r3
   21a4e:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
   21a50:	6abb      	ldr	r3, [r7, #40]	; 0x28
   21a52:	b2db      	uxtb	r3, r3
   21a54:	2224      	movs	r2, #36	; 0x24
   21a56:	18ba      	adds	r2, r7, r2
   21a58:	0011      	movs	r1, r2
   21a5a:	0018      	movs	r0, r3
   21a5c:	4b70      	ldr	r3, [pc, #448]	; (21c20 <usart_init+0x24c>)
   21a5e:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
   21a60:	6abb      	ldr	r3, [r7, #40]	; 0x28
   21a62:	b2db      	uxtb	r3, r3
   21a64:	0018      	movs	r0, r3
   21a66:	4b6f      	ldr	r3, [pc, #444]	; (21c24 <usart_init+0x250>)
   21a68:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
   21a6a:	687b      	ldr	r3, [r7, #4]
   21a6c:	222d      	movs	r2, #45	; 0x2d
   21a6e:	5c9b      	ldrb	r3, [r3, r2]
   21a70:	2100      	movs	r1, #0
   21a72:	0018      	movs	r0, r3
   21a74:	4b6c      	ldr	r3, [pc, #432]	; (21c28 <usart_init+0x254>)
   21a76:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
   21a78:	687b      	ldr	r3, [r7, #4]
   21a7a:	7ada      	ldrb	r2, [r3, #11]
   21a7c:	68fb      	ldr	r3, [r7, #12]
   21a7e:	715a      	strb	r2, [r3, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
   21a80:	687b      	ldr	r3, [r7, #4]
   21a82:	2224      	movs	r2, #36	; 0x24
   21a84:	5c9a      	ldrb	r2, [r3, r2]
   21a86:	68fb      	ldr	r3, [r7, #12]
   21a88:	719a      	strb	r2, [r3, #6]
	module->transmitter_enabled = config->transmitter_enable;
   21a8a:	687b      	ldr	r3, [r7, #4]
   21a8c:	2225      	movs	r2, #37	; 0x25
   21a8e:	5c9a      	ldrb	r2, [r3, r2]
   21a90:	68fb      	ldr	r3, [r7, #12]
   21a92:	71da      	strb	r2, [r3, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
   21a94:	687b      	ldr	r3, [r7, #4]
   21a96:	7eda      	ldrb	r2, [r3, #27]
   21a98:	68fb      	ldr	r3, [r7, #12]
   21a9a:	721a      	strb	r2, [r3, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
   21a9c:	687b      	ldr	r3, [r7, #4]
   21a9e:	7f1a      	ldrb	r2, [r3, #28]
   21aa0:	68fb      	ldr	r3, [r7, #12]
   21aa2:	725a      	strb	r2, [r3, #9]
#endif
#ifdef FEATURE_USART_ISO7816
	module->iso7816_mode_enabled = config->iso7816_config.enabled;
#endif
	/* Set configuration according to the config struct */
	status_code = _usart_set_config(module, config);
   21aa4:	233b      	movs	r3, #59	; 0x3b
   21aa6:	18fc      	adds	r4, r7, r3
   21aa8:	687a      	ldr	r2, [r7, #4]
   21aaa:	68fb      	ldr	r3, [r7, #12]
   21aac:	0011      	movs	r1, r2
   21aae:	0018      	movs	r0, r3
   21ab0:	4b5e      	ldr	r3, [pc, #376]	; (21c2c <usart_init+0x258>)
   21ab2:	4798      	blx	r3
   21ab4:	0003      	movs	r3, r0
   21ab6:	7023      	strb	r3, [r4, #0]
	if(status_code != STATUS_OK) {
   21ab8:	233b      	movs	r3, #59	; 0x3b
   21aba:	18fb      	adds	r3, r7, r3
   21abc:	781b      	ldrb	r3, [r3, #0]
   21abe:	2b00      	cmp	r3, #0
   21ac0:	d003      	beq.n	21aca <usart_init+0xf6>
		return status_code;
   21ac2:	233b      	movs	r3, #59	; 0x3b
   21ac4:	18fb      	adds	r3, r7, r3
   21ac6:	781b      	ldrb	r3, [r3, #0]
   21ac8:	e09f      	b.n	21c0a <usart_init+0x236>
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
   21aca:	2320      	movs	r3, #32
   21acc:	18fb      	adds	r3, r7, r3
   21ace:	0018      	movs	r0, r3
   21ad0:	4b57      	ldr	r3, [pc, #348]	; (21c30 <usart_init+0x25c>)
   21ad2:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
   21ad4:	2320      	movs	r3, #32
   21ad6:	18fb      	adds	r3, r7, r3
   21ad8:	2200      	movs	r2, #0
   21ada:	705a      	strb	r2, [r3, #1]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
   21adc:	2320      	movs	r3, #32
   21ade:	18fb      	adds	r3, r7, r3
   21ae0:	2200      	movs	r2, #0
   21ae2:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
   21ae4:	687b      	ldr	r3, [r7, #4]
   21ae6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
   21ae8:	2310      	movs	r3, #16
   21aea:	18fb      	adds	r3, r7, r3
   21aec:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
   21aee:	687b      	ldr	r3, [r7, #4]
   21af0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	uint32_t pad_pinmuxes[] = {
   21af2:	2310      	movs	r3, #16
   21af4:	18fb      	adds	r3, r7, r3
   21af6:	605a      	str	r2, [r3, #4]
			config->pinmux_pad2, config->pinmux_pad3
   21af8:	687b      	ldr	r3, [r7, #4]
   21afa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
	uint32_t pad_pinmuxes[] = {
   21afc:	2310      	movs	r3, #16
   21afe:	18fb      	adds	r3, r7, r3
   21b00:	609a      	str	r2, [r3, #8]
			config->pinmux_pad2, config->pinmux_pad3
   21b02:	687b      	ldr	r3, [r7, #4]
   21b04:	6bda      	ldr	r2, [r3, #60]	; 0x3c
	uint32_t pad_pinmuxes[] = {
   21b06:	2310      	movs	r3, #16
   21b08:	18fb      	adds	r3, r7, r3
   21b0a:	60da      	str	r2, [r3, #12]
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
   21b0c:	2347      	movs	r3, #71	; 0x47
   21b0e:	18fb      	adds	r3, r7, r3
   21b10:	2200      	movs	r2, #0
   21b12:	701a      	strb	r2, [r3, #0]
   21b14:	e02c      	b.n	21b70 <usart_init+0x19c>
		uint32_t current_pinmux = pad_pinmuxes[pad];
   21b16:	2347      	movs	r3, #71	; 0x47
   21b18:	18fb      	adds	r3, r7, r3
   21b1a:	781a      	ldrb	r2, [r3, #0]
   21b1c:	2310      	movs	r3, #16
   21b1e:	18fb      	adds	r3, r7, r3
   21b20:	0092      	lsls	r2, r2, #2
   21b22:	58d3      	ldr	r3, [r2, r3]
   21b24:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
   21b26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   21b28:	2b00      	cmp	r3, #0
   21b2a:	d109      	bne.n	21b40 <usart_init+0x16c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
   21b2c:	2347      	movs	r3, #71	; 0x47
   21b2e:	18fb      	adds	r3, r7, r3
   21b30:	781a      	ldrb	r2, [r3, #0]
   21b32:	68bb      	ldr	r3, [r7, #8]
   21b34:	0011      	movs	r1, r2
   21b36:	0018      	movs	r0, r3
   21b38:	4b3e      	ldr	r3, [pc, #248]	; (21c34 <usart_init+0x260>)
   21b3a:	4798      	blx	r3
   21b3c:	0003      	movs	r3, r0
   21b3e:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
   21b40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   21b42:	3301      	adds	r3, #1
   21b44:	d00d      	beq.n	21b62 <usart_init+0x18e>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
   21b46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   21b48:	b2da      	uxtb	r2, r3
   21b4a:	2320      	movs	r3, #32
   21b4c:	18fb      	adds	r3, r7, r3
   21b4e:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
   21b50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   21b52:	0c1b      	lsrs	r3, r3, #16
   21b54:	b2db      	uxtb	r3, r3
   21b56:	2220      	movs	r2, #32
   21b58:	18ba      	adds	r2, r7, r2
   21b5a:	0011      	movs	r1, r2
   21b5c:	0018      	movs	r0, r3
   21b5e:	4b36      	ldr	r3, [pc, #216]	; (21c38 <usart_init+0x264>)
   21b60:	4798      	blx	r3
	for (uint8_t pad = 0; pad < 4; pad++) {
   21b62:	2347      	movs	r3, #71	; 0x47
   21b64:	18fb      	adds	r3, r7, r3
   21b66:	781a      	ldrb	r2, [r3, #0]
   21b68:	2347      	movs	r3, #71	; 0x47
   21b6a:	18fb      	adds	r3, r7, r3
   21b6c:	3201      	adds	r2, #1
   21b6e:	701a      	strb	r2, [r3, #0]
   21b70:	2347      	movs	r3, #71	; 0x47
   21b72:	18fb      	adds	r3, r7, r3
   21b74:	781b      	ldrb	r3, [r3, #0]
   21b76:	2b03      	cmp	r3, #3
   21b78:	d9cd      	bls.n	21b16 <usart_init+0x142>
		}
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
   21b7a:	2300      	movs	r3, #0
   21b7c:	63fb      	str	r3, [r7, #60]	; 0x3c
   21b7e:	e00a      	b.n	21b96 <usart_init+0x1c2>
		module->callback[i]            = NULL;
   21b80:	68fa      	ldr	r2, [r7, #12]
   21b82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   21b84:	3302      	adds	r3, #2
   21b86:	009b      	lsls	r3, r3, #2
   21b88:	18d3      	adds	r3, r2, r3
   21b8a:	3304      	adds	r3, #4
   21b8c:	2200      	movs	r2, #0
   21b8e:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
   21b90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   21b92:	3301      	adds	r3, #1
   21b94:	63fb      	str	r3, [r7, #60]	; 0x3c
   21b96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   21b98:	2b05      	cmp	r3, #5
   21b9a:	d9f1      	bls.n	21b80 <usart_init+0x1ac>
	}

	module->tx_buffer_ptr              = NULL;
   21b9c:	68fb      	ldr	r3, [r7, #12]
   21b9e:	2200      	movs	r2, #0
   21ba0:	629a      	str	r2, [r3, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
   21ba2:	68fb      	ldr	r3, [r7, #12]
   21ba4:	2200      	movs	r2, #0
   21ba6:	625a      	str	r2, [r3, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
   21ba8:	68fb      	ldr	r3, [r7, #12]
   21baa:	2200      	movs	r2, #0
   21bac:	85da      	strh	r2, [r3, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
   21bae:	68fb      	ldr	r3, [r7, #12]
   21bb0:	2200      	movs	r2, #0
   21bb2:	859a      	strh	r2, [r3, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
   21bb4:	68fb      	ldr	r3, [r7, #12]
   21bb6:	2230      	movs	r2, #48	; 0x30
   21bb8:	2100      	movs	r1, #0
   21bba:	5499      	strb	r1, [r3, r2]
	module->callback_enable_mask       = 0x00;
   21bbc:	68fb      	ldr	r3, [r7, #12]
   21bbe:	2231      	movs	r2, #49	; 0x31
   21bc0:	2100      	movs	r1, #0
   21bc2:	5499      	strb	r1, [r3, r2]
	module->rx_status                  = STATUS_OK;
   21bc4:	68fb      	ldr	r3, [r7, #12]
   21bc6:	2232      	movs	r2, #50	; 0x32
   21bc8:	2100      	movs	r1, #0
   21bca:	5499      	strb	r1, [r3, r2]
	module->tx_status                  = STATUS_OK;
   21bcc:	68fb      	ldr	r3, [r7, #12]
   21bce:	2233      	movs	r2, #51	; 0x33
   21bd0:	2100      	movs	r1, #0
   21bd2:	5499      	strb	r1, [r3, r2]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
   21bd4:	68fb      	ldr	r3, [r7, #12]
   21bd6:	681b      	ldr	r3, [r3, #0]
   21bd8:	2227      	movs	r2, #39	; 0x27
   21bda:	18bc      	adds	r4, r7, r2
   21bdc:	0018      	movs	r0, r3
   21bde:	4b0d      	ldr	r3, [pc, #52]	; (21c14 <usart_init+0x240>)
   21be0:	4798      	blx	r3
   21be2:	0003      	movs	r3, r0
   21be4:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
   21be6:	4a15      	ldr	r2, [pc, #84]	; (21c3c <usart_init+0x268>)
   21be8:	2327      	movs	r3, #39	; 0x27
   21bea:	18fb      	adds	r3, r7, r3
   21bec:	781b      	ldrb	r3, [r3, #0]
   21bee:	0011      	movs	r1, r2
   21bf0:	0018      	movs	r0, r3
   21bf2:	4b13      	ldr	r3, [pc, #76]	; (21c40 <usart_init+0x26c>)
   21bf4:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
   21bf6:	2327      	movs	r3, #39	; 0x27
   21bf8:	18fb      	adds	r3, r7, r3
   21bfa:	781a      	ldrb	r2, [r3, #0]
   21bfc:	4b11      	ldr	r3, [pc, #68]	; (21c44 <usart_init+0x270>)
   21bfe:	0092      	lsls	r2, r2, #2
   21c00:	68f9      	ldr	r1, [r7, #12]
   21c02:	50d1      	str	r1, [r2, r3]
#endif

	return status_code;
   21c04:	233b      	movs	r3, #59	; 0x3b
   21c06:	18fb      	adds	r3, r7, r3
   21c08:	781b      	ldrb	r3, [r3, #0]
}
   21c0a:	0018      	movs	r0, r3
   21c0c:	46bd      	mov	sp, r7
   21c0e:	b013      	add	sp, #76	; 0x4c
   21c10:	bd90      	pop	{r4, r7, pc}
   21c12:	46c0      	nop			; (mov r8, r8)
   21c14:	0001ea95 	.word	0x0001ea95
   21c18:	00021611 	.word	0x00021611
   21c1c:	000215f9 	.word	0x000215f9
   21c20:	00024715 	.word	0x00024715
   21c24:	00024759 	.word	0x00024759
   21c28:	0001e84d 	.word	0x0001e84d
   21c2c:	000216f9 	.word	0x000216f9
   21c30:	0002166d 	.word	0x0002166d
   21c34:	0001e8d9 	.word	0x0001e8d9
   21c38:	00024a01 	.word	0x00024a01
   21c3c:	00021e1d 	.word	0x00021e1d
   21c40:	00022171 	.word	0x00022171
   21c44:	20000b68 	.word	0x20000b68

00021c48 <usart_write_wait>:
 * \retval STATUS_ERR_DENIED If the transmitter is not enabled
 */
enum status_code usart_write_wait(
		struct usart_module *const module,
		const uint16_t tx_data)
{
   21c48:	b580      	push	{r7, lr}
   21c4a:	b084      	sub	sp, #16
   21c4c:	af00      	add	r7, sp, #0
   21c4e:	6078      	str	r0, [r7, #4]
   21c50:	000a      	movs	r2, r1
   21c52:	1cbb      	adds	r3, r7, #2
   21c54:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   21c56:	687b      	ldr	r3, [r7, #4]
   21c58:	681b      	ldr	r3, [r3, #0]
   21c5a:	60fb      	str	r3, [r7, #12]

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
   21c5c:	687b      	ldr	r3, [r7, #4]
   21c5e:	79db      	ldrb	r3, [r3, #7]
   21c60:	2201      	movs	r2, #1
   21c62:	4053      	eors	r3, r2
   21c64:	b2db      	uxtb	r3, r3
   21c66:	2b00      	cmp	r3, #0
   21c68:	d001      	beq.n	21c6e <usart_write_wait+0x26>
		return STATUS_ERR_DENIED;
   21c6a:	231c      	movs	r3, #28
   21c6c:	e017      	b.n	21c9e <usart_write_wait+0x56>
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
   21c6e:	687b      	ldr	r3, [r7, #4]
   21c70:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
   21c72:	b29b      	uxth	r3, r3
   21c74:	2b00      	cmp	r3, #0
   21c76:	d001      	beq.n	21c7c <usart_write_wait+0x34>
		return STATUS_BUSY;
   21c78:	2305      	movs	r3, #5
   21c7a:	e010      	b.n	21c9e <usart_write_wait+0x56>
		return STATUS_BUSY;
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   21c7c:	687b      	ldr	r3, [r7, #4]
   21c7e:	0018      	movs	r0, r3
   21c80:	4b09      	ldr	r3, [pc, #36]	; (21ca8 <usart_write_wait+0x60>)
   21c82:	4798      	blx	r3

	/* Write data to USART module */
	usart_hw->DATA.reg = tx_data;
   21c84:	68fb      	ldr	r3, [r7, #12]
   21c86:	1cba      	adds	r2, r7, #2
   21c88:	8812      	ldrh	r2, [r2, #0]
   21c8a:	851a      	strh	r2, [r3, #40]	; 0x28

	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
   21c8c:	46c0      	nop			; (mov r8, r8)
   21c8e:	68fb      	ldr	r3, [r7, #12]
   21c90:	7e1b      	ldrb	r3, [r3, #24]
   21c92:	b2db      	uxtb	r3, r3
   21c94:	001a      	movs	r2, r3
   21c96:	2302      	movs	r3, #2
   21c98:	4013      	ands	r3, r2
   21c9a:	d0f8      	beq.n	21c8e <usart_write_wait+0x46>
		/* Wait until data is sent */
	}

	return STATUS_OK;
   21c9c:	2300      	movs	r3, #0
}
   21c9e:	0018      	movs	r0, r3
   21ca0:	46bd      	mov	sp, r7
   21ca2:	b004      	add	sp, #16
   21ca4:	bd80      	pop	{r7, pc}
   21ca6:	46c0      	nop			; (mov r8, r8)
   21ca8:	000216d5 	.word	0x000216d5

00021cac <usart_write_buffer_wait>:
 */
enum status_code usart_write_buffer_wait(
		struct usart_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
   21cac:	b580      	push	{r7, lr}
   21cae:	b08a      	sub	sp, #40	; 0x28
   21cb0:	af00      	add	r7, sp, #0
   21cb2:	60f8      	str	r0, [r7, #12]
   21cb4:	60b9      	str	r1, [r7, #8]
   21cb6:	1dbb      	adds	r3, r7, #6
   21cb8:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
   21cba:	1dbb      	adds	r3, r7, #6
   21cbc:	881b      	ldrh	r3, [r3, #0]
   21cbe:	2b00      	cmp	r3, #0
   21cc0:	d101      	bne.n	21cc6 <usart_write_buffer_wait+0x1a>
		return STATUS_ERR_INVALID_ARG;
   21cc2:	2317      	movs	r3, #23
   21cc4:	e07e      	b.n	21dc4 <usart_write_buffer_wait+0x118>
	}

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
   21cc6:	68fb      	ldr	r3, [r7, #12]
   21cc8:	79db      	ldrb	r3, [r3, #7]
   21cca:	2201      	movs	r2, #1
   21ccc:	4053      	eors	r3, r2
   21cce:	b2db      	uxtb	r3, r3
   21cd0:	2b00      	cmp	r3, #0
   21cd2:	d001      	beq.n	21cd8 <usart_write_buffer_wait+0x2c>
		return STATUS_ERR_DENIED;
   21cd4:	231c      	movs	r3, #28
   21cd6:	e075      	b.n	21dc4 <usart_write_buffer_wait+0x118>
	}

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   21cd8:	68fb      	ldr	r3, [r7, #12]
   21cda:	681b      	ldr	r3, [r3, #0]
   21cdc:	617b      	str	r3, [r7, #20]

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   21cde:	68fb      	ldr	r3, [r7, #12]
   21ce0:	0018      	movs	r0, r3
   21ce2:	4b3a      	ldr	r3, [pc, #232]	; (21dcc <usart_write_buffer_wait+0x120>)
   21ce4:	4798      	blx	r3

	uint16_t tx_pos = 0;
   21ce6:	2326      	movs	r3, #38	; 0x26
   21ce8:	18fb      	adds	r3, r7, r3
   21cea:	2200      	movs	r2, #0
   21cec:	801a      	strh	r2, [r3, #0]

	/* Blocks while buffer is being transferred */
	while (length--) {
   21cee:	e048      	b.n	21d82 <usart_write_buffer_wait+0xd6>
		/* Wait for the USART to be ready for new data and abort
		* operation if it doesn't get ready within the timeout*/
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
   21cf0:	2300      	movs	r3, #0
   21cf2:	623b      	str	r3, [r7, #32]
   21cf4:	e00f      	b.n	21d16 <usart_write_buffer_wait+0x6a>
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
   21cf6:	697b      	ldr	r3, [r7, #20]
   21cf8:	7e1b      	ldrb	r3, [r3, #24]
   21cfa:	b2db      	uxtb	r3, r3
   21cfc:	001a      	movs	r2, r3
   21cfe:	2301      	movs	r3, #1
   21d00:	4013      	ands	r3, r2
   21d02:	d10d      	bne.n	21d20 <usart_write_buffer_wait+0x74>
				break;
			} else if (i == USART_TIMEOUT) {
   21d04:	6a3b      	ldr	r3, [r7, #32]
   21d06:	4a32      	ldr	r2, [pc, #200]	; (21dd0 <usart_write_buffer_wait+0x124>)
   21d08:	4293      	cmp	r3, r2
   21d0a:	d101      	bne.n	21d10 <usart_write_buffer_wait+0x64>
				return STATUS_ERR_TIMEOUT;
   21d0c:	2312      	movs	r3, #18
   21d0e:	e059      	b.n	21dc4 <usart_write_buffer_wait+0x118>
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
   21d10:	6a3b      	ldr	r3, [r7, #32]
   21d12:	3301      	adds	r3, #1
   21d14:	623b      	str	r3, [r7, #32]
   21d16:	6a3b      	ldr	r3, [r7, #32]
   21d18:	4a2d      	ldr	r2, [pc, #180]	; (21dd0 <usart_write_buffer_wait+0x124>)
   21d1a:	4293      	cmp	r3, r2
   21d1c:	d9eb      	bls.n	21cf6 <usart_write_buffer_wait+0x4a>
   21d1e:	e000      	b.n	21d22 <usart_write_buffer_wait+0x76>
				break;
   21d20:	46c0      	nop			; (mov r8, r8)
			}
		}

		/* Data to send is at least 8 bits long */
		uint16_t data_to_send = tx_data[tx_pos++];
   21d22:	2326      	movs	r3, #38	; 0x26
   21d24:	18fb      	adds	r3, r7, r3
   21d26:	881b      	ldrh	r3, [r3, #0]
   21d28:	2226      	movs	r2, #38	; 0x26
   21d2a:	18ba      	adds	r2, r7, r2
   21d2c:	1c59      	adds	r1, r3, #1
   21d2e:	8011      	strh	r1, [r2, #0]
   21d30:	001a      	movs	r2, r3
   21d32:	68bb      	ldr	r3, [r7, #8]
   21d34:	189b      	adds	r3, r3, r2
   21d36:	781a      	ldrb	r2, [r3, #0]
   21d38:	231e      	movs	r3, #30
   21d3a:	18fb      	adds	r3, r7, r3
   21d3c:	801a      	strh	r2, [r3, #0]

		/* Check if the character size exceeds 8 bit */
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
   21d3e:	68fb      	ldr	r3, [r7, #12]
   21d40:	795b      	ldrb	r3, [r3, #5]
   21d42:	2b01      	cmp	r3, #1
   21d44:	d115      	bne.n	21d72 <usart_write_buffer_wait+0xc6>
			data_to_send |= (tx_data[tx_pos++] << 8);
   21d46:	2326      	movs	r3, #38	; 0x26
   21d48:	18fb      	adds	r3, r7, r3
   21d4a:	881b      	ldrh	r3, [r3, #0]
   21d4c:	2226      	movs	r2, #38	; 0x26
   21d4e:	18ba      	adds	r2, r7, r2
   21d50:	1c59      	adds	r1, r3, #1
   21d52:	8011      	strh	r1, [r2, #0]
   21d54:	001a      	movs	r2, r3
   21d56:	68bb      	ldr	r3, [r7, #8]
   21d58:	189b      	adds	r3, r3, r2
   21d5a:	781b      	ldrb	r3, [r3, #0]
   21d5c:	021b      	lsls	r3, r3, #8
   21d5e:	b21a      	sxth	r2, r3
   21d60:	231e      	movs	r3, #30
   21d62:	18fb      	adds	r3, r7, r3
   21d64:	2100      	movs	r1, #0
   21d66:	5e5b      	ldrsh	r3, [r3, r1]
   21d68:	4313      	orrs	r3, r2
   21d6a:	b21a      	sxth	r2, r3
   21d6c:	231e      	movs	r3, #30
   21d6e:	18fb      	adds	r3, r7, r3
   21d70:	801a      	strh	r2, [r3, #0]
		}

		/* Send the data through the USART module */
		usart_write_wait(module, data_to_send);
   21d72:	231e      	movs	r3, #30
   21d74:	18fb      	adds	r3, r7, r3
   21d76:	881a      	ldrh	r2, [r3, #0]
   21d78:	68fb      	ldr	r3, [r7, #12]
   21d7a:	0011      	movs	r1, r2
   21d7c:	0018      	movs	r0, r3
   21d7e:	4b15      	ldr	r3, [pc, #84]	; (21dd4 <usart_write_buffer_wait+0x128>)
   21d80:	4798      	blx	r3
	while (length--) {
   21d82:	1dbb      	adds	r3, r7, #6
   21d84:	881b      	ldrh	r3, [r3, #0]
   21d86:	1dba      	adds	r2, r7, #6
   21d88:	1e59      	subs	r1, r3, #1
   21d8a:	8011      	strh	r1, [r2, #0]
   21d8c:	2b00      	cmp	r3, #0
   21d8e:	d1af      	bne.n	21cf0 <usart_write_buffer_wait+0x44>
	}

	/* Wait until Transmit is complete or timeout */
	for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
   21d90:	2300      	movs	r3, #0
   21d92:	61bb      	str	r3, [r7, #24]
   21d94:	e00f      	b.n	21db6 <usart_write_buffer_wait+0x10a>
		if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) {
   21d96:	697b      	ldr	r3, [r7, #20]
   21d98:	7e1b      	ldrb	r3, [r3, #24]
   21d9a:	b2db      	uxtb	r3, r3
   21d9c:	001a      	movs	r2, r3
   21d9e:	2302      	movs	r3, #2
   21da0:	4013      	ands	r3, r2
   21da2:	d10d      	bne.n	21dc0 <usart_write_buffer_wait+0x114>
			break;
		} else if (i == USART_TIMEOUT) {
   21da4:	69bb      	ldr	r3, [r7, #24]
   21da6:	4a0a      	ldr	r2, [pc, #40]	; (21dd0 <usart_write_buffer_wait+0x124>)
   21da8:	4293      	cmp	r3, r2
   21daa:	d101      	bne.n	21db0 <usart_write_buffer_wait+0x104>
			return STATUS_ERR_TIMEOUT;
   21dac:	2312      	movs	r3, #18
   21dae:	e009      	b.n	21dc4 <usart_write_buffer_wait+0x118>
	for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
   21db0:	69bb      	ldr	r3, [r7, #24]
   21db2:	3301      	adds	r3, #1
   21db4:	61bb      	str	r3, [r7, #24]
   21db6:	69bb      	ldr	r3, [r7, #24]
   21db8:	4a05      	ldr	r2, [pc, #20]	; (21dd0 <usart_write_buffer_wait+0x124>)
   21dba:	4293      	cmp	r3, r2
   21dbc:	d9eb      	bls.n	21d96 <usart_write_buffer_wait+0xea>
   21dbe:	e000      	b.n	21dc2 <usart_write_buffer_wait+0x116>
			break;
   21dc0:	46c0      	nop			; (mov r8, r8)
		}
	}

	return STATUS_OK;
   21dc2:	2300      	movs	r3, #0
}
   21dc4:	0018      	movs	r0, r3
   21dc6:	46bd      	mov	sp, r7
   21dc8:	b00a      	add	sp, #40	; 0x28
   21dca:	bd80      	pop	{r7, pc}
   21dcc:	000216d5 	.word	0x000216d5
   21dd0:	0000ffff 	.word	0x0000ffff
   21dd4:	00021c49 	.word	0x00021c49

00021dd8 <usart_is_syncing>:
{
   21dd8:	b580      	push	{r7, lr}
   21dda:	b084      	sub	sp, #16
   21ddc:	af00      	add	r7, sp, #0
   21dde:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
   21de0:	687b      	ldr	r3, [r7, #4]
   21de2:	681b      	ldr	r3, [r3, #0]
   21de4:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
   21de6:	68fb      	ldr	r3, [r7, #12]
   21de8:	69db      	ldr	r3, [r3, #28]
   21dea:	1e5a      	subs	r2, r3, #1
   21dec:	4193      	sbcs	r3, r2
   21dee:	b2db      	uxtb	r3, r3
}
   21df0:	0018      	movs	r0, r3
   21df2:	46bd      	mov	sp, r7
   21df4:	b004      	add	sp, #16
   21df6:	bd80      	pop	{r7, pc}

00021df8 <_usart_wait_for_sync>:
{
   21df8:	b580      	push	{r7, lr}
   21dfa:	b082      	sub	sp, #8
   21dfc:	af00      	add	r7, sp, #0
   21dfe:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
   21e00:	46c0      	nop			; (mov r8, r8)
   21e02:	687b      	ldr	r3, [r7, #4]
   21e04:	0018      	movs	r0, r3
   21e06:	4b04      	ldr	r3, [pc, #16]	; (21e18 <_usart_wait_for_sync+0x20>)
   21e08:	4798      	blx	r3
   21e0a:	1e03      	subs	r3, r0, #0
   21e0c:	d1f9      	bne.n	21e02 <_usart_wait_for_sync+0xa>
}
   21e0e:	46c0      	nop			; (mov r8, r8)
   21e10:	46bd      	mov	sp, r7
   21e12:	b002      	add	sp, #8
   21e14:	bd80      	pop	{r7, pc}
   21e16:	46c0      	nop			; (mov r8, r8)
   21e18:	00021dd9 	.word	0x00021dd9

00021e1c <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
   21e1c:	b580      	push	{r7, lr}
   21e1e:	b088      	sub	sp, #32
   21e20:	af00      	add	r7, sp, #0
   21e22:	0002      	movs	r2, r0
   21e24:	1dfb      	adds	r3, r7, #7
   21e26:	701a      	strb	r2, [r3, #0]
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
		= (struct usart_module *)_sercom_instances[instance];
   21e28:	1dfb      	adds	r3, r7, #7
   21e2a:	781a      	ldrb	r2, [r3, #0]
	struct usart_module *module
   21e2c:	4ba3      	ldr	r3, [pc, #652]	; (220bc <_usart_interrupt_handler+0x2a0>)
   21e2e:	0092      	lsls	r2, r2, #2
   21e30:	58d3      	ldr	r3, [r2, r3]
   21e32:	61bb      	str	r3, [r7, #24]

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
   21e34:	69bb      	ldr	r3, [r7, #24]
   21e36:	681b      	ldr	r3, [r3, #0]
	SercomUsart *const usart_hw
   21e38:	617b      	str	r3, [r7, #20]

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);
   21e3a:	69bb      	ldr	r3, [r7, #24]
   21e3c:	0018      	movs	r0, r3
   21e3e:	4ba0      	ldr	r3, [pc, #640]	; (220c0 <_usart_interrupt_handler+0x2a4>)
   21e40:	4798      	blx	r3

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
   21e42:	697b      	ldr	r3, [r7, #20]
   21e44:	7e1b      	ldrb	r3, [r3, #24]
   21e46:	b2da      	uxtb	r2, r3
   21e48:	2312      	movs	r3, #18
   21e4a:	18fb      	adds	r3, r7, r3
   21e4c:	801a      	strh	r2, [r3, #0]
	interrupt_status &= usart_hw->INTENSET.reg;
   21e4e:	697b      	ldr	r3, [r7, #20]
   21e50:	7d9b      	ldrb	r3, [r3, #22]
   21e52:	b2db      	uxtb	r3, r3
   21e54:	b29a      	uxth	r2, r3
   21e56:	2312      	movs	r3, #18
   21e58:	18fb      	adds	r3, r7, r3
   21e5a:	2112      	movs	r1, #18
   21e5c:	1879      	adds	r1, r7, r1
   21e5e:	8809      	ldrh	r1, [r1, #0]
   21e60:	400a      	ands	r2, r1
   21e62:	801a      	strh	r2, [r3, #0]
	callback_status = module->callback_reg_mask &
   21e64:	69bb      	ldr	r3, [r7, #24]
   21e66:	2230      	movs	r2, #48	; 0x30
   21e68:	5c9b      	ldrb	r3, [r3, r2]
			module->callback_enable_mask;
   21e6a:	69ba      	ldr	r2, [r7, #24]
   21e6c:	2131      	movs	r1, #49	; 0x31
   21e6e:	5c52      	ldrb	r2, [r2, r1]
	callback_status = module->callback_reg_mask &
   21e70:	4013      	ands	r3, r2
   21e72:	b2da      	uxtb	r2, r3
   21e74:	2310      	movs	r3, #16
   21e76:	18fb      	adds	r3, r7, r3
   21e78:	801a      	strh	r2, [r3, #0]

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
   21e7a:	2312      	movs	r3, #18
   21e7c:	18fb      	adds	r3, r7, r3
   21e7e:	881b      	ldrh	r3, [r3, #0]
   21e80:	2201      	movs	r2, #1
   21e82:	4013      	ands	r3, r2
   21e84:	d044      	beq.n	21f10 <_usart_interrupt_handler+0xf4>
		if (module->remaining_tx_buffer_length) {
   21e86:	69bb      	ldr	r3, [r7, #24]
   21e88:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
   21e8a:	b29b      	uxth	r3, r3
   21e8c:	2b00      	cmp	r3, #0
   21e8e:	d03c      	beq.n	21f0a <_usart_interrupt_handler+0xee>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
   21e90:	69bb      	ldr	r3, [r7, #24]
   21e92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   21e94:	781b      	ldrb	r3, [r3, #0]
   21e96:	b2da      	uxtb	r2, r3
   21e98:	231c      	movs	r3, #28
   21e9a:	18fb      	adds	r3, r7, r3
   21e9c:	801a      	strh	r2, [r3, #0]
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
   21e9e:	69bb      	ldr	r3, [r7, #24]
   21ea0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   21ea2:	1c5a      	adds	r2, r3, #1
   21ea4:	69bb      	ldr	r3, [r7, #24]
   21ea6:	629a      	str	r2, [r3, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
   21ea8:	69bb      	ldr	r3, [r7, #24]
   21eaa:	795b      	ldrb	r3, [r3, #5]
   21eac:	2b01      	cmp	r3, #1
   21eae:	d113      	bne.n	21ed8 <_usart_interrupt_handler+0xbc>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
   21eb0:	69bb      	ldr	r3, [r7, #24]
   21eb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   21eb4:	781b      	ldrb	r3, [r3, #0]
   21eb6:	b2db      	uxtb	r3, r3
   21eb8:	021b      	lsls	r3, r3, #8
   21eba:	b21a      	sxth	r2, r3
   21ebc:	231c      	movs	r3, #28
   21ebe:	18fb      	adds	r3, r7, r3
   21ec0:	2100      	movs	r1, #0
   21ec2:	5e5b      	ldrsh	r3, [r3, r1]
   21ec4:	4313      	orrs	r3, r2
   21ec6:	b21a      	sxth	r2, r3
   21ec8:	231c      	movs	r3, #28
   21eca:	18fb      	adds	r3, r7, r3
   21ecc:	801a      	strh	r2, [r3, #0]
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
   21ece:	69bb      	ldr	r3, [r7, #24]
   21ed0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   21ed2:	1c5a      	adds	r2, r3, #1
   21ed4:	69bb      	ldr	r3, [r7, #24]
   21ed6:	629a      	str	r2, [r3, #40]	; 0x28
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
   21ed8:	231c      	movs	r3, #28
   21eda:	18fb      	adds	r3, r7, r3
   21edc:	881b      	ldrh	r3, [r3, #0]
   21ede:	05db      	lsls	r3, r3, #23
   21ee0:	0ddb      	lsrs	r3, r3, #23
   21ee2:	b29a      	uxth	r2, r3
   21ee4:	697b      	ldr	r3, [r7, #20]
   21ee6:	851a      	strh	r2, [r3, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
   21ee8:	69bb      	ldr	r3, [r7, #24]
   21eea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
   21eec:	b29b      	uxth	r3, r3
   21eee:	3b01      	subs	r3, #1
   21ef0:	b29b      	uxth	r3, r3
   21ef2:	69ba      	ldr	r2, [r7, #24]
   21ef4:	1c19      	adds	r1, r3, #0
   21ef6:	85d1      	strh	r1, [r2, #46]	; 0x2e
   21ef8:	2b00      	cmp	r3, #0
   21efa:	d109      	bne.n	21f10 <_usart_interrupt_handler+0xf4>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
   21efc:	697b      	ldr	r3, [r7, #20]
   21efe:	2201      	movs	r2, #1
   21f00:	751a      	strb	r2, [r3, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
   21f02:	697b      	ldr	r3, [r7, #20]
   21f04:	2202      	movs	r2, #2
   21f06:	759a      	strb	r2, [r3, #22]
   21f08:	e002      	b.n	21f10 <_usart_interrupt_handler+0xf4>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
   21f0a:	697b      	ldr	r3, [r7, #20]
   21f0c:	2201      	movs	r2, #1
   21f0e:	751a      	strb	r2, [r3, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
   21f10:	2312      	movs	r3, #18
   21f12:	18fb      	adds	r3, r7, r3
   21f14:	881b      	ldrh	r3, [r3, #0]
   21f16:	2202      	movs	r2, #2
   21f18:	4013      	ands	r3, r2
   21f1a:	d011      	beq.n	21f40 <_usart_interrupt_handler+0x124>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
   21f1c:	697b      	ldr	r3, [r7, #20]
   21f1e:	2202      	movs	r2, #2
   21f20:	751a      	strb	r2, [r3, #20]
		module->tx_status = STATUS_OK;
   21f22:	69bb      	ldr	r3, [r7, #24]
   21f24:	2233      	movs	r2, #51	; 0x33
   21f26:	2100      	movs	r1, #0
   21f28:	5499      	strb	r1, [r3, r2]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
   21f2a:	2310      	movs	r3, #16
   21f2c:	18fb      	adds	r3, r7, r3
   21f2e:	881b      	ldrh	r3, [r3, #0]
   21f30:	2201      	movs	r2, #1
   21f32:	4013      	ands	r3, r2
   21f34:	d004      	beq.n	21f40 <_usart_interrupt_handler+0x124>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
   21f36:	69bb      	ldr	r3, [r7, #24]
   21f38:	68db      	ldr	r3, [r3, #12]
   21f3a:	69ba      	ldr	r2, [r7, #24]
   21f3c:	0010      	movs	r0, r2
   21f3e:	4798      	blx	r3
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
   21f40:	2312      	movs	r3, #18
   21f42:	18fb      	adds	r3, r7, r3
   21f44:	881b      	ldrh	r3, [r3, #0]
   21f46:	2204      	movs	r2, #4
   21f48:	4013      	ands	r3, r2
   21f4a:	d100      	bne.n	21f4e <_usart_interrupt_handler+0x132>
   21f4c:	e0bd      	b.n	220ca <_usart_interrupt_handler+0x2ae>

		if (module->remaining_rx_buffer_length) {
   21f4e:	69bb      	ldr	r3, [r7, #24]
   21f50:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
   21f52:	b29b      	uxth	r3, r3
   21f54:	2b00      	cmp	r3, #0
   21f56:	d100      	bne.n	21f5a <_usart_interrupt_handler+0x13e>
   21f58:	e0b4      	b.n	220c4 <_usart_interrupt_handler+0x2a8>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
   21f5a:	697b      	ldr	r3, [r7, #20]
   21f5c:	8b5b      	ldrh	r3, [r3, #26]
   21f5e:	b29b      	uxth	r3, r3
   21f60:	b2da      	uxtb	r2, r3
   21f62:	231f      	movs	r3, #31
   21f64:	18fb      	adds	r3, r7, r3
   21f66:	213f      	movs	r1, #63	; 0x3f
   21f68:	400a      	ands	r2, r1
   21f6a:	701a      	strb	r2, [r3, #0]
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
   21f6c:	231f      	movs	r3, #31
   21f6e:	18fb      	adds	r3, r7, r3
   21f70:	781b      	ldrb	r3, [r3, #0]
   21f72:	2208      	movs	r2, #8
   21f74:	4013      	ands	r3, r2
   21f76:	d007      	beq.n	21f88 <_usart_interrupt_handler+0x16c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
   21f78:	231f      	movs	r3, #31
   21f7a:	18fb      	adds	r3, r7, r3
   21f7c:	221f      	movs	r2, #31
   21f7e:	18ba      	adds	r2, r7, r2
   21f80:	7812      	ldrb	r2, [r2, #0]
   21f82:	2108      	movs	r1, #8
   21f84:	438a      	bics	r2, r1
   21f86:	701a      	strb	r2, [r3, #0]
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
   21f88:	231f      	movs	r3, #31
   21f8a:	18fb      	adds	r3, r7, r3
   21f8c:	781b      	ldrb	r3, [r3, #0]
   21f8e:	2b00      	cmp	r3, #0
   21f90:	d050      	beq.n	22034 <_usart_interrupt_handler+0x218>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
   21f92:	231f      	movs	r3, #31
   21f94:	18fb      	adds	r3, r7, r3
   21f96:	781b      	ldrb	r3, [r3, #0]
   21f98:	2202      	movs	r2, #2
   21f9a:	4013      	ands	r3, r2
   21f9c:	d007      	beq.n	21fae <_usart_interrupt_handler+0x192>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
   21f9e:	69bb      	ldr	r3, [r7, #24]
   21fa0:	2232      	movs	r2, #50	; 0x32
   21fa2:	211a      	movs	r1, #26
   21fa4:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
   21fa6:	697b      	ldr	r3, [r7, #20]
   21fa8:	2202      	movs	r2, #2
   21faa:	835a      	strh	r2, [r3, #26]
   21fac:	e036      	b.n	2201c <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
   21fae:	231f      	movs	r3, #31
   21fb0:	18fb      	adds	r3, r7, r3
   21fb2:	781b      	ldrb	r3, [r3, #0]
   21fb4:	2204      	movs	r2, #4
   21fb6:	4013      	ands	r3, r2
   21fb8:	d007      	beq.n	21fca <_usart_interrupt_handler+0x1ae>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
   21fba:	69bb      	ldr	r3, [r7, #24]
   21fbc:	2232      	movs	r2, #50	; 0x32
   21fbe:	211e      	movs	r1, #30
   21fc0:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
   21fc2:	697b      	ldr	r3, [r7, #20]
   21fc4:	2204      	movs	r2, #4
   21fc6:	835a      	strh	r2, [r3, #26]
   21fc8:	e028      	b.n	2201c <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
   21fca:	231f      	movs	r3, #31
   21fcc:	18fb      	adds	r3, r7, r3
   21fce:	781b      	ldrb	r3, [r3, #0]
   21fd0:	2201      	movs	r2, #1
   21fd2:	4013      	ands	r3, r2
   21fd4:	d007      	beq.n	21fe6 <_usart_interrupt_handler+0x1ca>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
   21fd6:	69bb      	ldr	r3, [r7, #24]
   21fd8:	2232      	movs	r2, #50	; 0x32
   21fda:	2113      	movs	r1, #19
   21fdc:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
   21fde:	697b      	ldr	r3, [r7, #20]
   21fe0:	2201      	movs	r2, #1
   21fe2:	835a      	strh	r2, [r3, #26]
   21fe4:	e01a      	b.n	2201c <_usart_interrupt_handler+0x200>
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) {
   21fe6:	231f      	movs	r3, #31
   21fe8:	18fb      	adds	r3, r7, r3
   21fea:	781b      	ldrb	r3, [r3, #0]
   21fec:	2210      	movs	r2, #16
   21fee:	4013      	ands	r3, r2
   21ff0:	d007      	beq.n	22002 <_usart_interrupt_handler+0x1e6>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
   21ff2:	69bb      	ldr	r3, [r7, #24]
   21ff4:	2232      	movs	r2, #50	; 0x32
   21ff6:	2142      	movs	r1, #66	; 0x42
   21ff8:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
   21ffa:	697b      	ldr	r3, [r7, #20]
   21ffc:	2210      	movs	r2, #16
   21ffe:	835a      	strh	r2, [r3, #26]
   22000:	e00c      	b.n	2201c <_usart_interrupt_handler+0x200>
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) {
   22002:	231f      	movs	r3, #31
   22004:	18fb      	adds	r3, r7, r3
   22006:	781b      	ldrb	r3, [r3, #0]
   22008:	2220      	movs	r2, #32
   2200a:	4013      	ands	r3, r2
   2200c:	d006      	beq.n	2201c <_usart_interrupt_handler+0x200>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
   2200e:	69bb      	ldr	r3, [r7, #24]
   22010:	2232      	movs	r2, #50	; 0x32
   22012:	2141      	movs	r1, #65	; 0x41
   22014:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
   22016:	697b      	ldr	r3, [r7, #20]
   22018:	2220      	movs	r2, #32
   2201a:	835a      	strh	r2, [r3, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
						& (1 << USART_CALLBACK_ERROR)) {
   2201c:	2310      	movs	r3, #16
   2201e:	18fb      	adds	r3, r7, r3
   22020:	881b      	ldrh	r3, [r3, #0]
   22022:	2204      	movs	r2, #4
   22024:	4013      	ands	r3, r2
				if (callback_status
   22026:	d050      	beq.n	220ca <_usart_interrupt_handler+0x2ae>
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
   22028:	69bb      	ldr	r3, [r7, #24]
   2202a:	695b      	ldr	r3, [r3, #20]
   2202c:	69ba      	ldr	r2, [r7, #24]
   2202e:	0010      	movs	r0, r2
   22030:	4798      	blx	r3
   22032:	e04a      	b.n	220ca <_usart_interrupt_handler+0x2ae>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
   22034:	697b      	ldr	r3, [r7, #20]
   22036:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
   22038:	b29a      	uxth	r2, r3
   2203a:	230e      	movs	r3, #14
   2203c:	18fb      	adds	r3, r7, r3
   2203e:	05d2      	lsls	r2, r2, #23
   22040:	0dd2      	lsrs	r2, r2, #23
   22042:	801a      	strh	r2, [r3, #0]

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
   22044:	69bb      	ldr	r3, [r7, #24]
   22046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   22048:	220e      	movs	r2, #14
   2204a:	18ba      	adds	r2, r7, r2
   2204c:	8812      	ldrh	r2, [r2, #0]
   2204e:	b2d2      	uxtb	r2, r2
   22050:	701a      	strb	r2, [r3, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
   22052:	69bb      	ldr	r3, [r7, #24]
   22054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   22056:	1c5a      	adds	r2, r3, #1
   22058:	69bb      	ldr	r3, [r7, #24]
   2205a:	625a      	str	r2, [r3, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
   2205c:	69bb      	ldr	r3, [r7, #24]
   2205e:	795b      	ldrb	r3, [r3, #5]
   22060:	2b01      	cmp	r3, #1
   22062:	d10d      	bne.n	22080 <_usart_interrupt_handler+0x264>
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
   22064:	69bb      	ldr	r3, [r7, #24]
   22066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   22068:	220e      	movs	r2, #14
   2206a:	18ba      	adds	r2, r7, r2
   2206c:	8812      	ldrh	r2, [r2, #0]
   2206e:	0a12      	lsrs	r2, r2, #8
   22070:	b292      	uxth	r2, r2
   22072:	b2d2      	uxtb	r2, r2
   22074:	701a      	strb	r2, [r3, #0]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
   22076:	69bb      	ldr	r3, [r7, #24]
   22078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   2207a:	1c5a      	adds	r2, r3, #1
   2207c:	69bb      	ldr	r3, [r7, #24]
   2207e:	625a      	str	r2, [r3, #36]	; 0x24
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
   22080:	69bb      	ldr	r3, [r7, #24]
   22082:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
   22084:	b29b      	uxth	r3, r3
   22086:	3b01      	subs	r3, #1
   22088:	b29b      	uxth	r3, r3
   2208a:	69ba      	ldr	r2, [r7, #24]
   2208c:	1c19      	adds	r1, r3, #0
   2208e:	8591      	strh	r1, [r2, #44]	; 0x2c
   22090:	2b00      	cmp	r3, #0
   22092:	d11a      	bne.n	220ca <_usart_interrupt_handler+0x2ae>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
   22094:	697b      	ldr	r3, [r7, #20]
   22096:	2204      	movs	r2, #4
   22098:	751a      	strb	r2, [r3, #20]
					module->rx_status = STATUS_OK;
   2209a:	69bb      	ldr	r3, [r7, #24]
   2209c:	2232      	movs	r2, #50	; 0x32
   2209e:	2100      	movs	r1, #0
   220a0:	5499      	strb	r1, [r3, r2]

					/* Run callback if registered and enabled */
					if (callback_status
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
   220a2:	2310      	movs	r3, #16
   220a4:	18fb      	adds	r3, r7, r3
   220a6:	881b      	ldrh	r3, [r3, #0]
   220a8:	2202      	movs	r2, #2
   220aa:	4013      	ands	r3, r2
					if (callback_status
   220ac:	d00d      	beq.n	220ca <_usart_interrupt_handler+0x2ae>
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
   220ae:	69bb      	ldr	r3, [r7, #24]
   220b0:	691b      	ldr	r3, [r3, #16]
   220b2:	69ba      	ldr	r2, [r7, #24]
   220b4:	0010      	movs	r0, r2
   220b6:	4798      	blx	r3
   220b8:	e007      	b.n	220ca <_usart_interrupt_handler+0x2ae>
   220ba:	46c0      	nop			; (mov r8, r8)
   220bc:	20000b68 	.word	0x20000b68
   220c0:	00021df9 	.word	0x00021df9
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
   220c4:	697b      	ldr	r3, [r7, #20]
   220c6:	2204      	movs	r2, #4
   220c8:	751a      	strb	r2, [r3, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
   220ca:	2312      	movs	r3, #18
   220cc:	18fb      	adds	r3, r7, r3
   220ce:	881b      	ldrh	r3, [r3, #0]
   220d0:	2210      	movs	r2, #16
   220d2:	4013      	ands	r3, r2
   220d4:	d010      	beq.n	220f8 <_usart_interrupt_handler+0x2dc>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
   220d6:	697b      	ldr	r3, [r7, #20]
   220d8:	2210      	movs	r2, #16
   220da:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
   220dc:	697b      	ldr	r3, [r7, #20]
   220de:	2210      	movs	r2, #16
   220e0:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
   220e2:	2310      	movs	r3, #16
   220e4:	18fb      	adds	r3, r7, r3
   220e6:	881b      	ldrh	r3, [r3, #0]
   220e8:	2210      	movs	r2, #16
   220ea:	4013      	ands	r3, r2
   220ec:	d004      	beq.n	220f8 <_usart_interrupt_handler+0x2dc>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
   220ee:	69bb      	ldr	r3, [r7, #24]
   220f0:	69db      	ldr	r3, [r3, #28]
   220f2:	69ba      	ldr	r2, [r7, #24]
   220f4:	0010      	movs	r0, r2
   220f6:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
   220f8:	2312      	movs	r3, #18
   220fa:	18fb      	adds	r3, r7, r3
   220fc:	881b      	ldrh	r3, [r3, #0]
   220fe:	2220      	movs	r2, #32
   22100:	4013      	ands	r3, r2
   22102:	d010      	beq.n	22126 <_usart_interrupt_handler+0x30a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
   22104:	697b      	ldr	r3, [r7, #20]
   22106:	2220      	movs	r2, #32
   22108:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
   2210a:	697b      	ldr	r3, [r7, #20]
   2210c:	2220      	movs	r2, #32
   2210e:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
   22110:	2310      	movs	r3, #16
   22112:	18fb      	adds	r3, r7, r3
   22114:	881b      	ldrh	r3, [r3, #0]
   22116:	2208      	movs	r2, #8
   22118:	4013      	ands	r3, r2
   2211a:	d004      	beq.n	22126 <_usart_interrupt_handler+0x30a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
   2211c:	69bb      	ldr	r3, [r7, #24]
   2211e:	699b      	ldr	r3, [r3, #24]
   22120:	69ba      	ldr	r2, [r7, #24]
   22122:	0010      	movs	r0, r2
   22124:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
   22126:	2312      	movs	r3, #18
   22128:	18fb      	adds	r3, r7, r3
   2212a:	881b      	ldrh	r3, [r3, #0]
   2212c:	2208      	movs	r2, #8
   2212e:	4013      	ands	r3, r2
   22130:	d010      	beq.n	22154 <_usart_interrupt_handler+0x338>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
   22132:	697b      	ldr	r3, [r7, #20]
   22134:	2208      	movs	r2, #8
   22136:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
   22138:	697b      	ldr	r3, [r7, #20]
   2213a:	2208      	movs	r2, #8
   2213c:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
   2213e:	2310      	movs	r3, #16
   22140:	18fb      	adds	r3, r7, r3
   22142:	881b      	ldrh	r3, [r3, #0]
   22144:	2220      	movs	r2, #32
   22146:	4013      	ands	r3, r2
   22148:	d004      	beq.n	22154 <_usart_interrupt_handler+0x338>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
   2214a:	69bb      	ldr	r3, [r7, #24]
   2214c:	6a1b      	ldr	r3, [r3, #32]
   2214e:	69ba      	ldr	r2, [r7, #24]
   22150:	0010      	movs	r0, r2
   22152:	4798      	blx	r3
		}
	}
#endif
}
   22154:	46c0      	nop			; (mov r8, r8)
   22156:	46bd      	mov	sp, r7
   22158:	b008      	add	sp, #32
   2215a:	bd80      	pop	{r7, pc}

0002215c <_sercom_default_handler>:
 *
 * \param[in] instance SERCOM instance used.
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
   2215c:	b580      	push	{r7, lr}
   2215e:	b082      	sub	sp, #8
   22160:	af00      	add	r7, sp, #0
   22162:	0002      	movs	r2, r0
   22164:	1dfb      	adds	r3, r7, #7
   22166:	701a      	strb	r2, [r3, #0]
	Assert(false);
}
   22168:	46c0      	nop			; (mov r8, r8)
   2216a:	46bd      	mov	sp, r7
   2216c:	b002      	add	sp, #8
   2216e:	bd80      	pop	{r7, pc}

00022170 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
   22170:	b580      	push	{r7, lr}
   22172:	b084      	sub	sp, #16
   22174:	af00      	add	r7, sp, #0
   22176:	0002      	movs	r2, r0
   22178:	6039      	str	r1, [r7, #0]
   2217a:	1dfb      	adds	r3, r7, #7
   2217c:	701a      	strb	r2, [r3, #0]
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
   2217e:	4b13      	ldr	r3, [pc, #76]	; (221cc <_sercom_set_handler+0x5c>)
   22180:	781b      	ldrb	r3, [r3, #0]
   22182:	2201      	movs	r2, #1
   22184:	4053      	eors	r3, r2
   22186:	b2db      	uxtb	r3, r3
   22188:	2b00      	cmp	r3, #0
   2218a:	d015      	beq.n	221b8 <_sercom_set_handler+0x48>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   2218c:	2300      	movs	r3, #0
   2218e:	60fb      	str	r3, [r7, #12]
   22190:	e00c      	b.n	221ac <_sercom_set_handler+0x3c>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
   22192:	4b0f      	ldr	r3, [pc, #60]	; (221d0 <_sercom_set_handler+0x60>)
   22194:	68fa      	ldr	r2, [r7, #12]
   22196:	0092      	lsls	r2, r2, #2
   22198:	490e      	ldr	r1, [pc, #56]	; (221d4 <_sercom_set_handler+0x64>)
   2219a:	50d1      	str	r1, [r2, r3]
			_sercom_instances[i] = NULL;
   2219c:	4b0e      	ldr	r3, [pc, #56]	; (221d8 <_sercom_set_handler+0x68>)
   2219e:	68fa      	ldr	r2, [r7, #12]
   221a0:	0092      	lsls	r2, r2, #2
   221a2:	2100      	movs	r1, #0
   221a4:	50d1      	str	r1, [r2, r3]
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   221a6:	68fb      	ldr	r3, [r7, #12]
   221a8:	3301      	adds	r3, #1
   221aa:	60fb      	str	r3, [r7, #12]
   221ac:	68fb      	ldr	r3, [r7, #12]
   221ae:	2b05      	cmp	r3, #5
   221b0:	d9ef      	bls.n	22192 <_sercom_set_handler+0x22>
		}

		_handler_table_initialized = true;
   221b2:	4b06      	ldr	r3, [pc, #24]	; (221cc <_sercom_set_handler+0x5c>)
   221b4:	2201      	movs	r2, #1
   221b6:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
   221b8:	1dfb      	adds	r3, r7, #7
   221ba:	781a      	ldrb	r2, [r3, #0]
   221bc:	4b04      	ldr	r3, [pc, #16]	; (221d0 <_sercom_set_handler+0x60>)
   221be:	0092      	lsls	r2, r2, #2
   221c0:	6839      	ldr	r1, [r7, #0]
   221c2:	50d1      	str	r1, [r2, r3]
}
   221c4:	46c0      	nop			; (mov r8, r8)
   221c6:	46bd      	mov	sp, r7
   221c8:	b004      	add	sp, #16
   221ca:	bd80      	pop	{r7, pc}
   221cc:	200005f8 	.word	0x200005f8
   221d0:	200005fc 	.word	0x200005fc
   221d4:	0002215d 	.word	0x0002215d
   221d8:	20000b68 	.word	0x20000b68

000221dc <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
   221dc:	b590      	push	{r4, r7, lr}
   221de:	b085      	sub	sp, #20
   221e0:	af00      	add	r7, sp, #0
   221e2:	6078      	str	r0, [r7, #4]
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
   221e4:	2308      	movs	r3, #8
   221e6:	18fb      	adds	r3, r7, r3
   221e8:	4a0b      	ldr	r2, [pc, #44]	; (22218 <_sercom_get_interrupt_vector+0x3c>)
   221ea:	6811      	ldr	r1, [r2, #0]
   221ec:	6019      	str	r1, [r3, #0]
   221ee:	8892      	ldrh	r2, [r2, #4]
   221f0:	809a      	strh	r2, [r3, #4]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
   221f2:	230f      	movs	r3, #15
   221f4:	18fc      	adds	r4, r7, r3
   221f6:	687b      	ldr	r3, [r7, #4]
   221f8:	0018      	movs	r0, r3
   221fa:	4b08      	ldr	r3, [pc, #32]	; (2221c <_sercom_get_interrupt_vector+0x40>)
   221fc:	4798      	blx	r3
   221fe:	0003      	movs	r3, r0
   22200:	7023      	strb	r3, [r4, #0]

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
   22202:	230f      	movs	r3, #15
   22204:	18fb      	adds	r3, r7, r3
   22206:	781b      	ldrb	r3, [r3, #0]
   22208:	2208      	movs	r2, #8
   2220a:	18ba      	adds	r2, r7, r2
   2220c:	5cd3      	ldrb	r3, [r2, r3]
   2220e:	b25b      	sxtb	r3, r3
}
   22210:	0018      	movs	r0, r3
   22212:	46bd      	mov	sp, r7
   22214:	b005      	add	sp, #20
   22216:	bd90      	pop	{r4, r7, pc}
   22218:	0002a940 	.word	0x0002a940
   2221c:	0001ea95 	.word	0x0001ea95

00022220 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
   22220:	b580      	push	{r7, lr}
   22222:	af00      	add	r7, sp, #0
   22224:	4b03      	ldr	r3, [pc, #12]	; (22234 <SERCOM0_Handler+0x14>)
   22226:	681b      	ldr	r3, [r3, #0]
   22228:	2000      	movs	r0, #0
   2222a:	4798      	blx	r3
   2222c:	46c0      	nop			; (mov r8, r8)
   2222e:	46bd      	mov	sp, r7
   22230:	bd80      	pop	{r7, pc}
   22232:	46c0      	nop			; (mov r8, r8)
   22234:	200005fc 	.word	0x200005fc

00022238 <SERCOM1_Handler>:
   22238:	b580      	push	{r7, lr}
   2223a:	af00      	add	r7, sp, #0
   2223c:	4b03      	ldr	r3, [pc, #12]	; (2224c <SERCOM1_Handler+0x14>)
   2223e:	685b      	ldr	r3, [r3, #4]
   22240:	2001      	movs	r0, #1
   22242:	4798      	blx	r3
   22244:	46c0      	nop			; (mov r8, r8)
   22246:	46bd      	mov	sp, r7
   22248:	bd80      	pop	{r7, pc}
   2224a:	46c0      	nop			; (mov r8, r8)
   2224c:	200005fc 	.word	0x200005fc

00022250 <SERCOM2_Handler>:
   22250:	b580      	push	{r7, lr}
   22252:	af00      	add	r7, sp, #0
   22254:	4b03      	ldr	r3, [pc, #12]	; (22264 <SERCOM2_Handler+0x14>)
   22256:	689b      	ldr	r3, [r3, #8]
   22258:	2002      	movs	r0, #2
   2225a:	4798      	blx	r3
   2225c:	46c0      	nop			; (mov r8, r8)
   2225e:	46bd      	mov	sp, r7
   22260:	bd80      	pop	{r7, pc}
   22262:	46c0      	nop			; (mov r8, r8)
   22264:	200005fc 	.word	0x200005fc

00022268 <SERCOM3_Handler>:
   22268:	b580      	push	{r7, lr}
   2226a:	af00      	add	r7, sp, #0
   2226c:	4b03      	ldr	r3, [pc, #12]	; (2227c <SERCOM3_Handler+0x14>)
   2226e:	68db      	ldr	r3, [r3, #12]
   22270:	2003      	movs	r0, #3
   22272:	4798      	blx	r3
   22274:	46c0      	nop			; (mov r8, r8)
   22276:	46bd      	mov	sp, r7
   22278:	bd80      	pop	{r7, pc}
   2227a:	46c0      	nop			; (mov r8, r8)
   2227c:	200005fc 	.word	0x200005fc

00022280 <SERCOM4_Handler>:
   22280:	b580      	push	{r7, lr}
   22282:	af00      	add	r7, sp, #0
   22284:	4b03      	ldr	r3, [pc, #12]	; (22294 <SERCOM4_Handler+0x14>)
   22286:	691b      	ldr	r3, [r3, #16]
   22288:	2004      	movs	r0, #4
   2228a:	4798      	blx	r3
   2228c:	46c0      	nop			; (mov r8, r8)
   2228e:	46bd      	mov	sp, r7
   22290:	bd80      	pop	{r7, pc}
   22292:	46c0      	nop			; (mov r8, r8)
   22294:	200005fc 	.word	0x200005fc

00022298 <SERCOM5_Handler>:
   22298:	b580      	push	{r7, lr}
   2229a:	af00      	add	r7, sp, #0
   2229c:	4b03      	ldr	r3, [pc, #12]	; (222ac <SERCOM5_Handler+0x14>)
   2229e:	695b      	ldr	r3, [r3, #20]
   222a0:	2005      	movs	r0, #5
   222a2:	4798      	blx	r3
   222a4:	46c0      	nop			; (mov r8, r8)
   222a6:	46bd      	mov	sp, r7
   222a8:	bd80      	pop	{r7, pc}
   222aa:	46c0      	nop			; (mov r8, r8)
   222ac:	200005fc 	.word	0x200005fc

000222b0 <_extint_get_eic_from_channel>:
{
   222b0:	b580      	push	{r7, lr}
   222b2:	b084      	sub	sp, #16
   222b4:	af00      	add	r7, sp, #0
   222b6:	0002      	movs	r2, r0
   222b8:	1dfb      	adds	r3, r7, #7
   222ba:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
   222bc:	230f      	movs	r3, #15
   222be:	18fb      	adds	r3, r7, r3
   222c0:	1dfa      	adds	r2, r7, #7
   222c2:	7812      	ldrb	r2, [r2, #0]
   222c4:	0952      	lsrs	r2, r2, #5
   222c6:	701a      	strb	r2, [r3, #0]
	if (eic_index < EIC_INST_NUM) {
   222c8:	230f      	movs	r3, #15
   222ca:	18fb      	adds	r3, r7, r3
   222cc:	781b      	ldrb	r3, [r3, #0]
   222ce:	2b00      	cmp	r3, #0
   222d0:	d10c      	bne.n	222ec <_extint_get_eic_from_channel+0x3c>
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   222d2:	4b09      	ldr	r3, [pc, #36]	; (222f8 <_extint_get_eic_from_channel+0x48>)
   222d4:	60bb      	str	r3, [r7, #8]
		return eics[eic_index];
   222d6:	230f      	movs	r3, #15
   222d8:	18fb      	adds	r3, r7, r3
   222da:	781b      	ldrb	r3, [r3, #0]
   222dc:	009b      	lsls	r3, r3, #2
   222de:	2210      	movs	r2, #16
   222e0:	4694      	mov	ip, r2
   222e2:	44bc      	add	ip, r7
   222e4:	4463      	add	r3, ip
   222e6:	3b08      	subs	r3, #8
   222e8:	681b      	ldr	r3, [r3, #0]
   222ea:	e000      	b.n	222ee <_extint_get_eic_from_channel+0x3e>
		return NULL;
   222ec:	2300      	movs	r3, #0
}
   222ee:	0018      	movs	r0, r3
   222f0:	46bd      	mov	sp, r7
   222f2:	b004      	add	sp, #16
   222f4:	bd80      	pop	{r7, pc}
   222f6:	46c0      	nop			; (mov r8, r8)
   222f8:	40001800 	.word	0x40001800

000222fc <extint_chan_is_detected>:
{
   222fc:	b580      	push	{r7, lr}
   222fe:	b084      	sub	sp, #16
   22300:	af00      	add	r7, sp, #0
   22302:	0002      	movs	r2, r0
   22304:	1dfb      	adds	r3, r7, #7
   22306:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
   22308:	1dfb      	adds	r3, r7, #7
   2230a:	781b      	ldrb	r3, [r3, #0]
   2230c:	0018      	movs	r0, r3
   2230e:	4b0b      	ldr	r3, [pc, #44]	; (2233c <extint_chan_is_detected+0x40>)
   22310:	4798      	blx	r3
   22312:	0003      	movs	r3, r0
   22314:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
   22316:	1dfb      	adds	r3, r7, #7
   22318:	781b      	ldrb	r3, [r3, #0]
   2231a:	221f      	movs	r2, #31
   2231c:	4013      	ands	r3, r2
   2231e:	2201      	movs	r2, #1
   22320:	409a      	lsls	r2, r3
   22322:	0013      	movs	r3, r2
   22324:	60bb      	str	r3, [r7, #8]
	return (eic_module->INTFLAG.reg & eic_mask);
   22326:	68fb      	ldr	r3, [r7, #12]
   22328:	691b      	ldr	r3, [r3, #16]
   2232a:	68ba      	ldr	r2, [r7, #8]
   2232c:	4013      	ands	r3, r2
   2232e:	1e5a      	subs	r2, r3, #1
   22330:	4193      	sbcs	r3, r2
   22332:	b2db      	uxtb	r3, r3
}
   22334:	0018      	movs	r0, r3
   22336:	46bd      	mov	sp, r7
   22338:	b004      	add	sp, #16
   2233a:	bd80      	pop	{r7, pc}
   2233c:	000222b1 	.word	0x000222b1

00022340 <extint_chan_clear_detected>:
{
   22340:	b580      	push	{r7, lr}
   22342:	b084      	sub	sp, #16
   22344:	af00      	add	r7, sp, #0
   22346:	0002      	movs	r2, r0
   22348:	1dfb      	adds	r3, r7, #7
   2234a:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
   2234c:	1dfb      	adds	r3, r7, #7
   2234e:	781b      	ldrb	r3, [r3, #0]
   22350:	0018      	movs	r0, r3
   22352:	4b09      	ldr	r3, [pc, #36]	; (22378 <extint_chan_clear_detected+0x38>)
   22354:	4798      	blx	r3
   22356:	0003      	movs	r3, r0
   22358:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
   2235a:	1dfb      	adds	r3, r7, #7
   2235c:	781b      	ldrb	r3, [r3, #0]
   2235e:	221f      	movs	r2, #31
   22360:	4013      	ands	r3, r2
   22362:	2201      	movs	r2, #1
   22364:	409a      	lsls	r2, r3
   22366:	0013      	movs	r3, r2
   22368:	60bb      	str	r3, [r7, #8]
	eic_module->INTFLAG.reg = eic_mask;
   2236a:	68fb      	ldr	r3, [r7, #12]
   2236c:	68ba      	ldr	r2, [r7, #8]
   2236e:	611a      	str	r2, [r3, #16]
}
   22370:	46c0      	nop			; (mov r8, r8)
   22372:	46bd      	mov	sp, r7
   22374:	b004      	add	sp, #16
   22376:	bd80      	pop	{r7, pc}
   22378:	000222b1 	.word	0x000222b1

0002237c <extint_register_callback>:
 */
enum status_code extint_register_callback(
	const extint_callback_t callback,
	const uint8_t channel,
	const enum extint_callback_type type)
{
   2237c:	b580      	push	{r7, lr}
   2237e:	b082      	sub	sp, #8
   22380:	af00      	add	r7, sp, #0
   22382:	6078      	str	r0, [r7, #4]
   22384:	0008      	movs	r0, r1
   22386:	0011      	movs	r1, r2
   22388:	1cfb      	adds	r3, r7, #3
   2238a:	1c02      	adds	r2, r0, #0
   2238c:	701a      	strb	r2, [r3, #0]
   2238e:	1cbb      	adds	r3, r7, #2
   22390:	1c0a      	adds	r2, r1, #0
   22392:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
   22394:	1cbb      	adds	r3, r7, #2
   22396:	781b      	ldrb	r3, [r3, #0]
   22398:	2b00      	cmp	r3, #0
   2239a:	d001      	beq.n	223a0 <extint_register_callback+0x24>
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
   2239c:	2317      	movs	r3, #23
   2239e:	e019      	b.n	223d4 <extint_register_callback+0x58>
	}

	if (_extint_dev.callbacks[channel] == NULL) {
   223a0:	1cfb      	adds	r3, r7, #3
   223a2:	781a      	ldrb	r2, [r3, #0]
   223a4:	4b0d      	ldr	r3, [pc, #52]	; (223dc <extint_register_callback+0x60>)
   223a6:	0092      	lsls	r2, r2, #2
   223a8:	58d3      	ldr	r3, [r2, r3]
   223aa:	2b00      	cmp	r3, #0
   223ac:	d107      	bne.n	223be <extint_register_callback+0x42>
		_extint_dev.callbacks[channel] = callback;
   223ae:	1cfb      	adds	r3, r7, #3
   223b0:	781a      	ldrb	r2, [r3, #0]
   223b2:	4b0a      	ldr	r3, [pc, #40]	; (223dc <extint_register_callback+0x60>)
   223b4:	0092      	lsls	r2, r2, #2
   223b6:	6879      	ldr	r1, [r7, #4]
   223b8:	50d1      	str	r1, [r2, r3]
		return STATUS_OK;
   223ba:	2300      	movs	r3, #0
   223bc:	e00a      	b.n	223d4 <extint_register_callback+0x58>
	} else if (_extint_dev.callbacks[channel] == callback) {
   223be:	1cfb      	adds	r3, r7, #3
   223c0:	781a      	ldrb	r2, [r3, #0]
   223c2:	4b06      	ldr	r3, [pc, #24]	; (223dc <extint_register_callback+0x60>)
   223c4:	0092      	lsls	r2, r2, #2
   223c6:	58d2      	ldr	r2, [r2, r3]
   223c8:	687b      	ldr	r3, [r7, #4]
   223ca:	429a      	cmp	r2, r3
   223cc:	d101      	bne.n	223d2 <extint_register_callback+0x56>
		return STATUS_OK;
   223ce:	2300      	movs	r3, #0
   223d0:	e000      	b.n	223d4 <extint_register_callback+0x58>
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
   223d2:	231d      	movs	r3, #29
}
   223d4:	0018      	movs	r0, r3
   223d6:	46bd      	mov	sp, r7
   223d8:	b002      	add	sp, #8
   223da:	bd80      	pop	{r7, pc}
   223dc:	20000b00 	.word	0x20000b00

000223e0 <extint_chan_enable_callback>:
 * \retval STATUS_ERR_INVALID_ARG  If an invalid callback type was supplied
 */
enum status_code extint_chan_enable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
   223e0:	b580      	push	{r7, lr}
   223e2:	b084      	sub	sp, #16
   223e4:	af00      	add	r7, sp, #0
   223e6:	0002      	movs	r2, r0
   223e8:	1dfb      	adds	r3, r7, #7
   223ea:	701a      	strb	r2, [r3, #0]
   223ec:	1dbb      	adds	r3, r7, #6
   223ee:	1c0a      	adds	r2, r1, #0
   223f0:	701a      	strb	r2, [r3, #0]
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
   223f2:	1dbb      	adds	r3, r7, #6
   223f4:	781b      	ldrb	r3, [r3, #0]
   223f6:	2b00      	cmp	r3, #0
   223f8:	d10e      	bne.n	22418 <extint_chan_enable_callback+0x38>
		Eic *const eic = _extint_get_eic_from_channel(channel);
   223fa:	1dfb      	adds	r3, r7, #7
   223fc:	781b      	ldrb	r3, [r3, #0]
   223fe:	0018      	movs	r0, r3
   22400:	4b08      	ldr	r3, [pc, #32]	; (22424 <extint_chan_enable_callback+0x44>)
   22402:	4798      	blx	r3
   22404:	0003      	movs	r3, r0
   22406:	60fb      	str	r3, [r7, #12]

		eic->INTENSET.reg = (1UL << channel);
   22408:	1dfb      	adds	r3, r7, #7
   2240a:	781b      	ldrb	r3, [r3, #0]
   2240c:	2201      	movs	r2, #1
   2240e:	409a      	lsls	r2, r3
   22410:	68fb      	ldr	r3, [r7, #12]
   22412:	60da      	str	r2, [r3, #12]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
   22414:	2300      	movs	r3, #0
   22416:	e000      	b.n	2241a <extint_chan_enable_callback+0x3a>
		return STATUS_ERR_INVALID_ARG;
   22418:	2317      	movs	r3, #23
}
   2241a:	0018      	movs	r0, r3
   2241c:	46bd      	mov	sp, r7
   2241e:	b004      	add	sp, #16
   22420:	bd80      	pop	{r7, pc}
   22422:	46c0      	nop			; (mov r8, r8)
   22424:	000222b1 	.word	0x000222b1

00022428 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
   22428:	b580      	push	{r7, lr}
   2242a:	af00      	add	r7, sp, #0
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
   2242c:	4b15      	ldr	r3, [pc, #84]	; (22484 <EIC_Handler+0x5c>)
   2242e:	2200      	movs	r2, #0
   22430:	701a      	strb	r2, [r3, #0]
   22432:	e020      	b.n	22476 <EIC_Handler+0x4e>
		if (extint_chan_is_detected(_current_channel)) {
   22434:	4b13      	ldr	r3, [pc, #76]	; (22484 <EIC_Handler+0x5c>)
   22436:	781b      	ldrb	r3, [r3, #0]
   22438:	0018      	movs	r0, r3
   2243a:	4b13      	ldr	r3, [pc, #76]	; (22488 <EIC_Handler+0x60>)
   2243c:	4798      	blx	r3
   2243e:	1e03      	subs	r3, r0, #0
   22440:	d013      	beq.n	2246a <EIC_Handler+0x42>
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
   22442:	4b10      	ldr	r3, [pc, #64]	; (22484 <EIC_Handler+0x5c>)
   22444:	781b      	ldrb	r3, [r3, #0]
   22446:	0018      	movs	r0, r3
   22448:	4b10      	ldr	r3, [pc, #64]	; (2248c <EIC_Handler+0x64>)
   2244a:	4798      	blx	r3
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
   2244c:	4b0d      	ldr	r3, [pc, #52]	; (22484 <EIC_Handler+0x5c>)
   2244e:	781b      	ldrb	r3, [r3, #0]
   22450:	001a      	movs	r2, r3
   22452:	4b0f      	ldr	r3, [pc, #60]	; (22490 <EIC_Handler+0x68>)
   22454:	0092      	lsls	r2, r2, #2
   22456:	58d3      	ldr	r3, [r2, r3]
   22458:	2b00      	cmp	r3, #0
   2245a:	d006      	beq.n	2246a <EIC_Handler+0x42>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
   2245c:	4b09      	ldr	r3, [pc, #36]	; (22484 <EIC_Handler+0x5c>)
   2245e:	781b      	ldrb	r3, [r3, #0]
   22460:	001a      	movs	r2, r3
   22462:	4b0b      	ldr	r3, [pc, #44]	; (22490 <EIC_Handler+0x68>)
   22464:	0092      	lsls	r2, r2, #2
   22466:	58d3      	ldr	r3, [r2, r3]
   22468:	4798      	blx	r3
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
   2246a:	4b06      	ldr	r3, [pc, #24]	; (22484 <EIC_Handler+0x5c>)
   2246c:	781b      	ldrb	r3, [r3, #0]
   2246e:	3301      	adds	r3, #1
   22470:	b2da      	uxtb	r2, r3
   22472:	4b04      	ldr	r3, [pc, #16]	; (22484 <EIC_Handler+0x5c>)
   22474:	701a      	strb	r2, [r3, #0]
   22476:	4b03      	ldr	r3, [pc, #12]	; (22484 <EIC_Handler+0x5c>)
   22478:	781b      	ldrb	r3, [r3, #0]
   2247a:	2b0f      	cmp	r3, #15
   2247c:	d9da      	bls.n	22434 <EIC_Handler+0xc>
			}
		}
	}
}
   2247e:	46c0      	nop			; (mov r8, r8)
   22480:	46bd      	mov	sp, r7
   22482:	bd80      	pop	{r7, pc}
   22484:	20000b80 	.word	0x20000b80
   22488:	000222fd 	.word	0x000222fd
   2248c:	00022341 	.word	0x00022341
   22490:	20000b00 	.word	0x20000b00

00022494 <EVSYS_Handler>:

	return STATUS_OK;
}

void EVSYS_Handler(void)
{
   22494:	b580      	push	{r7, lr}
   22496:	b082      	sub	sp, #8
   22498:	af00      	add	r7, sp, #0
	struct events_hook *current_hook = _events_inst.hook_list;
   2249a:	4b15      	ldr	r3, [pc, #84]	; (224f0 <EVSYS_Handler+0x5c>)
   2249c:	691b      	ldr	r3, [r3, #16]
   2249e:	607b      	str	r3, [r7, #4]
	uint32_t flag;

	/* Synch the interrupt flag buffer with the hardware register */
	flag = EVSYS->INTFLAG.reg;
   224a0:	4b14      	ldr	r3, [pc, #80]	; (224f4 <EVSYS_Handler+0x60>)
   224a2:	699b      	ldr	r3, [r3, #24]
   224a4:	603b      	str	r3, [r7, #0]
	_events_inst.interrupt_flag_buffer |= flag;
   224a6:	4b12      	ldr	r3, [pc, #72]	; (224f0 <EVSYS_Handler+0x5c>)
   224a8:	689a      	ldr	r2, [r3, #8]
   224aa:	683b      	ldr	r3, [r7, #0]
   224ac:	431a      	orrs	r2, r3
   224ae:	4b10      	ldr	r3, [pc, #64]	; (224f0 <EVSYS_Handler+0x5c>)
   224b0:	609a      	str	r2, [r3, #8]
	/* Clear all hardware interrupt flags */
	EVSYS->INTFLAG.reg = _EVENTS_INTFLAGS_MASK;
   224b2:	4b10      	ldr	r3, [pc, #64]	; (224f4 <EVSYS_Handler+0x60>)
   224b4:	4a10      	ldr	r2, [pc, #64]	; (224f8 <EVSYS_Handler+0x64>)
   224b6:	619a      	str	r2, [r3, #24]

	/* Traverse the linked list */
	while (current_hook != NULL) {
   224b8:	e008      	b.n	224cc <EVSYS_Handler+0x38>
		current_hook->hook_func(current_hook->resource);
   224ba:	687b      	ldr	r3, [r7, #4]
   224bc:	685a      	ldr	r2, [r3, #4]
   224be:	687b      	ldr	r3, [r7, #4]
   224c0:	681b      	ldr	r3, [r3, #0]
   224c2:	0018      	movs	r0, r3
   224c4:	4790      	blx	r2
		current_hook = current_hook->next;
   224c6:	687b      	ldr	r3, [r7, #4]
   224c8:	689b      	ldr	r3, [r3, #8]
   224ca:	607b      	str	r3, [r7, #4]
	while (current_hook != NULL) {
   224cc:	687b      	ldr	r3, [r7, #4]
   224ce:	2b00      	cmp	r3, #0
   224d0:	d1f3      	bne.n	224ba <EVSYS_Handler+0x26>
	}

	/* Clear acknowledged interrupt sources from the interrupt flag buffer */
	flag = _events_inst.interrupt_flag_ack_buffer;
   224d2:	4b07      	ldr	r3, [pc, #28]	; (224f0 <EVSYS_Handler+0x5c>)
   224d4:	68db      	ldr	r3, [r3, #12]
   224d6:	603b      	str	r3, [r7, #0]
	_events_inst.interrupt_flag_buffer &= ~flag;
   224d8:	4b05      	ldr	r3, [pc, #20]	; (224f0 <EVSYS_Handler+0x5c>)
   224da:	689b      	ldr	r3, [r3, #8]
   224dc:	683a      	ldr	r2, [r7, #0]
   224de:	43d2      	mvns	r2, r2
   224e0:	401a      	ands	r2, r3
   224e2:	4b03      	ldr	r3, [pc, #12]	; (224f0 <EVSYS_Handler+0x5c>)
   224e4:	609a      	str	r2, [r3, #8]
}
   224e6:	46c0      	nop			; (mov r8, r8)
   224e8:	46bd      	mov	sp, r7
   224ea:	b002      	add	sp, #8
   224ec:	bd80      	pop	{r7, pc}
   224ee:	46c0      	nop			; (mov r8, r8)
   224f0:	20000014 	.word	0x20000014
   224f4:	42000400 	.word	0x42000400
   224f8:	0f0fffff 	.word	0x0f0fffff

000224fc <system_apb_clock_set_mask>:
{
   224fc:	b580      	push	{r7, lr}
   224fe:	b082      	sub	sp, #8
   22500:	af00      	add	r7, sp, #0
   22502:	0002      	movs	r2, r0
   22504:	6039      	str	r1, [r7, #0]
   22506:	1dfb      	adds	r3, r7, #7
   22508:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   2250a:	1dfb      	adds	r3, r7, #7
   2250c:	781b      	ldrb	r3, [r3, #0]
   2250e:	2b01      	cmp	r3, #1
   22510:	d00a      	beq.n	22528 <system_apb_clock_set_mask+0x2c>
   22512:	2b02      	cmp	r3, #2
   22514:	d00f      	beq.n	22536 <system_apb_clock_set_mask+0x3a>
   22516:	2b00      	cmp	r3, #0
   22518:	d114      	bne.n	22544 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   2251a:	4b0e      	ldr	r3, [pc, #56]	; (22554 <system_apb_clock_set_mask+0x58>)
   2251c:	4a0d      	ldr	r2, [pc, #52]	; (22554 <system_apb_clock_set_mask+0x58>)
   2251e:	6991      	ldr	r1, [r2, #24]
   22520:	683a      	ldr	r2, [r7, #0]
   22522:	430a      	orrs	r2, r1
   22524:	619a      	str	r2, [r3, #24]
			break;
   22526:	e00f      	b.n	22548 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   22528:	4b0a      	ldr	r3, [pc, #40]	; (22554 <system_apb_clock_set_mask+0x58>)
   2252a:	4a0a      	ldr	r2, [pc, #40]	; (22554 <system_apb_clock_set_mask+0x58>)
   2252c:	69d1      	ldr	r1, [r2, #28]
   2252e:	683a      	ldr	r2, [r7, #0]
   22530:	430a      	orrs	r2, r1
   22532:	61da      	str	r2, [r3, #28]
			break;
   22534:	e008      	b.n	22548 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   22536:	4b07      	ldr	r3, [pc, #28]	; (22554 <system_apb_clock_set_mask+0x58>)
   22538:	4a06      	ldr	r2, [pc, #24]	; (22554 <system_apb_clock_set_mask+0x58>)
   2253a:	6a11      	ldr	r1, [r2, #32]
   2253c:	683a      	ldr	r2, [r7, #0]
   2253e:	430a      	orrs	r2, r1
   22540:	621a      	str	r2, [r3, #32]
			break;
   22542:	e001      	b.n	22548 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   22544:	2317      	movs	r3, #23
   22546:	e000      	b.n	2254a <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   22548:	2300      	movs	r3, #0
}
   2254a:	0018      	movs	r0, r3
   2254c:	46bd      	mov	sp, r7
   2254e:	b002      	add	sp, #8
   22550:	bd80      	pop	{r7, pc}
   22552:	46c0      	nop			; (mov r8, r8)
   22554:	40000400 	.word	0x40000400

00022558 <_system_events_init>:
#if defined(__GNUC__)
#  pragma GCC diagnostic push
#  pragma GCC diagnostic ignored "-Wmissing-prototypes"
#endif
void _system_events_init(void)
{
   22558:	b580      	push	{r7, lr}
   2255a:	af00      	add	r7, sp, #0
	/* Enable EVSYS register interface */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_EVSYS);
   2255c:	2102      	movs	r1, #2
   2255e:	2002      	movs	r0, #2
   22560:	4b07      	ldr	r3, [pc, #28]	; (22580 <_system_events_init+0x28>)
   22562:	4798      	blx	r3

	/* Make sure the EVSYS module is properly reset */
	EVSYS->CTRL.reg = EVSYS_CTRL_SWRST;
   22564:	4b07      	ldr	r3, [pc, #28]	; (22584 <_system_events_init+0x2c>)
   22566:	2201      	movs	r2, #1
   22568:	701a      	strb	r2, [r3, #0]

	while (EVSYS->CTRL.reg & EVSYS_CTRL_SWRST) {
   2256a:	46c0      	nop			; (mov r8, r8)
   2256c:	4b05      	ldr	r3, [pc, #20]	; (22584 <_system_events_init+0x2c>)
   2256e:	781b      	ldrb	r3, [r3, #0]
   22570:	b2db      	uxtb	r3, r3
   22572:	001a      	movs	r2, r3
   22574:	2301      	movs	r3, #1
   22576:	4013      	ands	r3, r2
   22578:	d1f8      	bne.n	2256c <_system_events_init+0x14>
	}
}
   2257a:	46c0      	nop			; (mov r8, r8)
   2257c:	46bd      	mov	sp, r7
   2257e:	bd80      	pop	{r7, pc}
   22580:	000224fd 	.word	0x000224fd
   22584:	42000400 	.word	0x42000400

00022588 <ac_register_callback>:
 */
enum status_code ac_register_callback(
		struct ac_module *const module,
		ac_callback_t callback_func,
		const enum ac_callback callback_type)
{
   22588:	b580      	push	{r7, lr}
   2258a:	b084      	sub	sp, #16
   2258c:	af00      	add	r7, sp, #0
   2258e:	60f8      	str	r0, [r7, #12]
   22590:	60b9      	str	r1, [r7, #8]
   22592:	1dfb      	adds	r3, r7, #7
   22594:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
   22596:	1dfb      	adds	r3, r7, #7
   22598:	781b      	ldrb	r3, [r3, #0]
   2259a:	68fa      	ldr	r2, [r7, #12]
   2259c:	009b      	lsls	r3, r3, #2
   2259e:	18d3      	adds	r3, r2, r3
   225a0:	3304      	adds	r3, #4
   225a2:	68ba      	ldr	r2, [r7, #8]
   225a4:	601a      	str	r2, [r3, #0]

	/* Set software flag for callback */
	module->register_callback_mask |= (1 << callback_type);
   225a6:	68fb      	ldr	r3, [r7, #12]
   225a8:	7e1b      	ldrb	r3, [r3, #24]
   225aa:	b25a      	sxtb	r2, r3
   225ac:	1dfb      	adds	r3, r7, #7
   225ae:	781b      	ldrb	r3, [r3, #0]
   225b0:	2101      	movs	r1, #1
   225b2:	4099      	lsls	r1, r3
   225b4:	000b      	movs	r3, r1
   225b6:	b25b      	sxtb	r3, r3
   225b8:	4313      	orrs	r3, r2
   225ba:	b25b      	sxtb	r3, r3
   225bc:	b2da      	uxtb	r2, r3
   225be:	68fb      	ldr	r3, [r7, #12]
   225c0:	761a      	strb	r2, [r3, #24]

	return STATUS_OK;
   225c2:	2300      	movs	r3, #0
}
   225c4:	0018      	movs	r0, r3
   225c6:	46bd      	mov	sp, r7
   225c8:	b004      	add	sp, #16
   225ca:	bd80      	pop	{r7, pc}

000225cc <AC_Handler>:
/**
 * \internal ISR handler for AC
 */
#if (AC_INST_NUM == 1)
void AC_Handler(void)
{
   225cc:	b580      	push	{r7, lr}
   225ce:	af00      	add	r7, sp, #0
	_ac_interrupt_handler(0);
   225d0:	2000      	movs	r0, #0
   225d2:	4b02      	ldr	r3, [pc, #8]	; (225dc <AC_Handler+0x10>)
   225d4:	4798      	blx	r3
}
   225d6:	46c0      	nop			; (mov r8, r8)
   225d8:	46bd      	mov	sp, r7
   225da:	bd80      	pop	{r7, pc}
   225dc:	000225e1 	.word	0x000225e1

000225e0 <_ac_interrupt_handler>:
 * that are registered and enabled.
 *
 * \param [in] instance_index  Default value 0
 */
void _ac_interrupt_handler(const uint32_t instance_index)
{
   225e0:	b580      	push	{r7, lr}
   225e2:	b084      	sub	sp, #16
   225e4:	af00      	add	r7, sp, #0
   225e6:	6078      	str	r0, [r7, #4]
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */

	struct ac_module *module = _ac_instance[instance_index];
   225e8:	4b23      	ldr	r3, [pc, #140]	; (22678 <_ac_interrupt_handler+0x98>)
   225ea:	687a      	ldr	r2, [r7, #4]
   225ec:	0092      	lsls	r2, r2, #2
   225ee:	58d3      	ldr	r3, [r2, r3]
   225f0:	60fb      	str	r3, [r7, #12]

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask =
			_ac_instance[instance_index]->hw->INTFLAG.reg &
   225f2:	4b21      	ldr	r3, [pc, #132]	; (22678 <_ac_interrupt_handler+0x98>)
   225f4:	687a      	ldr	r2, [r7, #4]
   225f6:	0092      	lsls	r2, r2, #2
   225f8:	58d3      	ldr	r3, [r2, r3]
   225fa:	681b      	ldr	r3, [r3, #0]
   225fc:	799b      	ldrb	r3, [r3, #6]
   225fe:	b2da      	uxtb	r2, r3
			(module->register_callback_mask & module->enable_callback_mask);
   22600:	68fb      	ldr	r3, [r7, #12]
   22602:	7e1b      	ldrb	r3, [r3, #24]
   22604:	68f9      	ldr	r1, [r7, #12]
   22606:	7e49      	ldrb	r1, [r1, #25]
	interrupt_and_callback_status_mask =
   22608:	400b      	ands	r3, r1
   2260a:	b2d9      	uxtb	r1, r3
   2260c:	230b      	movs	r3, #11
   2260e:	18fb      	adds	r3, r7, r3
   22610:	400a      	ands	r2, r1
   22612:	701a      	strb	r2, [r3, #0]

	/* Check if comparator channel 0 needs to be serviced */
	if (interrupt_and_callback_status_mask & AC_INTFLAG_COMP0) {
   22614:	230b      	movs	r3, #11
   22616:	18fb      	adds	r3, r7, r3
   22618:	781b      	ldrb	r3, [r3, #0]
   2261a:	2201      	movs	r2, #1
   2261c:	4013      	ands	r3, r2
   2261e:	d008      	beq.n	22632 <_ac_interrupt_handler+0x52>
		/* Invoke registered and enabled callback function */
		(module->callback[AC_CALLBACK_COMPARATOR_0])(module);
   22620:	68fb      	ldr	r3, [r7, #12]
   22622:	685b      	ldr	r3, [r3, #4]
   22624:	68fa      	ldr	r2, [r7, #12]
   22626:	0010      	movs	r0, r2
   22628:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->INTFLAG.reg = AC_INTFLAG_COMP0;
   2262a:	68fb      	ldr	r3, [r7, #12]
   2262c:	681b      	ldr	r3, [r3, #0]
   2262e:	2201      	movs	r2, #1
   22630:	719a      	strb	r2, [r3, #6]
	}

	/* Check if comparator channel 1 needs to be serviced */
	if (interrupt_and_callback_status_mask & AC_INTFLAG_COMP1) {
   22632:	230b      	movs	r3, #11
   22634:	18fb      	adds	r3, r7, r3
   22636:	781b      	ldrb	r3, [r3, #0]
   22638:	2202      	movs	r2, #2
   2263a:	4013      	ands	r3, r2
   2263c:	d008      	beq.n	22650 <_ac_interrupt_handler+0x70>
		/* Invoke registered and enabled callback function */
		(module->callback[AC_CALLBACK_COMPARATOR_1])(module);
   2263e:	68fb      	ldr	r3, [r7, #12]
   22640:	689b      	ldr	r3, [r3, #8]
   22642:	68fa      	ldr	r2, [r7, #12]
   22644:	0010      	movs	r0, r2
   22646:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->INTFLAG.reg = AC_INTFLAG_COMP1;
   22648:	68fb      	ldr	r3, [r7, #12]
   2264a:	681b      	ldr	r3, [r3, #0]
   2264c:	2202      	movs	r2, #2
   2264e:	719a      	strb	r2, [r3, #6]
	}

	/* Check if window 0 needs to be serviced */
	if (interrupt_and_callback_status_mask & AC_INTFLAG_WIN0) {
   22650:	230b      	movs	r3, #11
   22652:	18fb      	adds	r3, r7, r3
   22654:	781b      	ldrb	r3, [r3, #0]
   22656:	2210      	movs	r2, #16
   22658:	4013      	ands	r3, r2
   2265a:	d008      	beq.n	2266e <_ac_interrupt_handler+0x8e>
		/* Invoke registered and enabled callback function */
		(module->callback[AC_CALLBACK_WINDOW_0])(module);
   2265c:	68fb      	ldr	r3, [r7, #12]
   2265e:	695b      	ldr	r3, [r3, #20]
   22660:	68fa      	ldr	r2, [r7, #12]
   22662:	0010      	movs	r0, r2
   22664:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->INTFLAG.reg = AC_INTFLAG_WIN0;
   22666:	68fb      	ldr	r3, [r7, #12]
   22668:	681b      	ldr	r3, [r3, #0]
   2266a:	2210      	movs	r2, #16
   2266c:	719a      	strb	r2, [r3, #6]
		/* Clear interrupt flag */
		module->hw->INTFLAG.reg = AC_INTFLAG_WIN1;
	}
#  endif
#endif /* (AC_NUM_CMP > 2) */
}
   2266e:	46c0      	nop			; (mov r8, r8)
   22670:	46bd      	mov	sp, r7
   22672:	b004      	add	sp, #16
   22674:	bd80      	pop	{r7, pc}
   22676:	46c0      	nop			; (mov r8, r8)
   22678:	20000b84 	.word	0x20000b84

0002267c <delay_init>:
 * \brief Initialize the delay driver.
 *
 * Not used in cycle mode.
 */
void delay_init(void)
{
   2267c:	b580      	push	{r7, lr}
   2267e:	af00      	add	r7, sp, #0
}
   22680:	46c0      	nop			; (mov r8, r8)
   22682:	46bd      	mov	sp, r7
   22684:	bd80      	pop	{r7, pc}
	...

00022688 <nvm_is_ready>:
 * \retval true   If the hardware module is ready for a new command
 * \retval false  If the hardware module is busy executing a command
 *
 */
static inline bool nvm_is_ready(void)
{
   22688:	b580      	push	{r7, lr}
   2268a:	b082      	sub	sp, #8
   2268c:	af00      	add	r7, sp, #0
	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
   2268e:	4b07      	ldr	r3, [pc, #28]	; (226ac <nvm_is_ready+0x24>)
   22690:	607b      	str	r3, [r7, #4]

	return nvm_module->INTFLAG.reg & NVMCTRL_INTFLAG_READY;
   22692:	687b      	ldr	r3, [r7, #4]
   22694:	7d1b      	ldrb	r3, [r3, #20]
   22696:	b2db      	uxtb	r3, r3
   22698:	001a      	movs	r2, r3
   2269a:	2301      	movs	r3, #1
   2269c:	4013      	ands	r3, r2
   2269e:	1e5a      	subs	r2, r3, #1
   226a0:	4193      	sbcs	r3, r2
   226a2:	b2db      	uxtb	r3, r3
}
   226a4:	0018      	movs	r0, r3
   226a6:	46bd      	mov	sp, r7
   226a8:	b002      	add	sp, #8
   226aa:	bd80      	pop	{r7, pc}
   226ac:	41004000 	.word	0x41004000

000226b0 <system_apb_clock_set_mask>:
{
   226b0:	b580      	push	{r7, lr}
   226b2:	b082      	sub	sp, #8
   226b4:	af00      	add	r7, sp, #0
   226b6:	0002      	movs	r2, r0
   226b8:	6039      	str	r1, [r7, #0]
   226ba:	1dfb      	adds	r3, r7, #7
   226bc:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   226be:	1dfb      	adds	r3, r7, #7
   226c0:	781b      	ldrb	r3, [r3, #0]
   226c2:	2b01      	cmp	r3, #1
   226c4:	d00a      	beq.n	226dc <system_apb_clock_set_mask+0x2c>
   226c6:	2b02      	cmp	r3, #2
   226c8:	d00f      	beq.n	226ea <system_apb_clock_set_mask+0x3a>
   226ca:	2b00      	cmp	r3, #0
   226cc:	d114      	bne.n	226f8 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   226ce:	4b0e      	ldr	r3, [pc, #56]	; (22708 <system_apb_clock_set_mask+0x58>)
   226d0:	4a0d      	ldr	r2, [pc, #52]	; (22708 <system_apb_clock_set_mask+0x58>)
   226d2:	6991      	ldr	r1, [r2, #24]
   226d4:	683a      	ldr	r2, [r7, #0]
   226d6:	430a      	orrs	r2, r1
   226d8:	619a      	str	r2, [r3, #24]
			break;
   226da:	e00f      	b.n	226fc <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   226dc:	4b0a      	ldr	r3, [pc, #40]	; (22708 <system_apb_clock_set_mask+0x58>)
   226de:	4a0a      	ldr	r2, [pc, #40]	; (22708 <system_apb_clock_set_mask+0x58>)
   226e0:	69d1      	ldr	r1, [r2, #28]
   226e2:	683a      	ldr	r2, [r7, #0]
   226e4:	430a      	orrs	r2, r1
   226e6:	61da      	str	r2, [r3, #28]
			break;
   226e8:	e008      	b.n	226fc <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   226ea:	4b07      	ldr	r3, [pc, #28]	; (22708 <system_apb_clock_set_mask+0x58>)
   226ec:	4a06      	ldr	r2, [pc, #24]	; (22708 <system_apb_clock_set_mask+0x58>)
   226ee:	6a11      	ldr	r1, [r2, #32]
   226f0:	683a      	ldr	r2, [r7, #0]
   226f2:	430a      	orrs	r2, r1
   226f4:	621a      	str	r2, [r3, #32]
			break;
   226f6:	e001      	b.n	226fc <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   226f8:	2317      	movs	r3, #23
   226fa:	e000      	b.n	226fe <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   226fc:	2300      	movs	r3, #0
}
   226fe:	0018      	movs	r0, r3
   22700:	46bd      	mov	sp, r7
   22702:	b002      	add	sp, #8
   22704:	bd80      	pop	{r7, pc}
   22706:	46c0      	nop			; (mov r8, r8)
   22708:	40000400 	.word	0x40000400

0002270c <nvm_set_config>:
 *                        EEPROM and/or auxiliary space configuration from being
 *                        altered
 */
enum status_code nvm_set_config(
		const struct nvm_config *const config)
{
   2270c:	b580      	push	{r7, lr}
   2270e:	b084      	sub	sp, #16
   22710:	af00      	add	r7, sp, #0
   22712:	6078      	str	r0, [r7, #4]
	/* Sanity check argument */
	Assert(config);

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
   22714:	4b2f      	ldr	r3, [pc, #188]	; (227d4 <nvm_set_config+0xc8>)
   22716:	60fb      	str	r3, [r7, #12]
#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30) || (SAMR34) || (SAMR35)
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, MCLK_APBBMASK_NVMCTRL);
#else
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, PM_APBBMASK_NVMCTRL);
   22718:	2104      	movs	r1, #4
   2271a:	2001      	movs	r0, #1
   2271c:	4b2e      	ldr	r3, [pc, #184]	; (227d8 <nvm_set_config+0xcc>)
   2271e:	4798      	blx	r3
#endif

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
   22720:	68fb      	ldr	r3, [r7, #12]
   22722:	2220      	movs	r2, #32
   22724:	32ff      	adds	r2, #255	; 0xff
   22726:	831a      	strh	r2, [r3, #24]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
   22728:	4b2c      	ldr	r3, [pc, #176]	; (227dc <nvm_set_config+0xd0>)
   2272a:	4798      	blx	r3
   2272c:	0003      	movs	r3, r0
   2272e:	001a      	movs	r2, r3
   22730:	2301      	movs	r3, #1
   22732:	4053      	eors	r3, r2
   22734:	b2db      	uxtb	r3, r3
   22736:	2b00      	cmp	r3, #0
   22738:	d001      	beq.n	2273e <nvm_set_config+0x32>
		return STATUS_BUSY;
   2273a:	2305      	movs	r3, #5
   2273c:	e045      	b.n	227ca <nvm_set_config+0xbe>
	}

#if (!SAMC20) && (!SAMC21)
	/* Writing configuration to the CTRLB register */
	nvm_module->CTRLB.reg =
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
   2273e:	687b      	ldr	r3, [r7, #4]
   22740:	781b      	ldrb	r3, [r3, #0]
   22742:	021b      	lsls	r3, r3, #8
   22744:	001a      	movs	r2, r3
   22746:	23c0      	movs	r3, #192	; 0xc0
   22748:	009b      	lsls	r3, r3, #2
   2274a:	401a      	ands	r2, r3
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
   2274c:	687b      	ldr	r3, [r7, #4]
   2274e:	785b      	ldrb	r3, [r3, #1]
   22750:	01db      	lsls	r3, r3, #7
   22752:	0019      	movs	r1, r3
   22754:	23ff      	movs	r3, #255	; 0xff
   22756:	400b      	ands	r3, r1
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
   22758:	431a      	orrs	r2, r3
			NVMCTRL_CTRLB_RWS(config->wait_states) |
   2275a:	687b      	ldr	r3, [r7, #4]
   2275c:	789b      	ldrb	r3, [r3, #2]
   2275e:	005b      	lsls	r3, r3, #1
   22760:	0019      	movs	r1, r3
   22762:	231e      	movs	r3, #30
   22764:	400b      	ands	r3, r1
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
   22766:	431a      	orrs	r2, r3
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
   22768:	687b      	ldr	r3, [r7, #4]
   2276a:	78db      	ldrb	r3, [r3, #3]
   2276c:	049b      	lsls	r3, r3, #18
   2276e:	0019      	movs	r1, r3
   22770:	2380      	movs	r3, #128	; 0x80
   22772:	02db      	lsls	r3, r3, #11
   22774:	400b      	ands	r3, r1
			NVMCTRL_CTRLB_RWS(config->wait_states) |
   22776:	431a      	orrs	r2, r3
			NVMCTRL_CTRLB_READMODE(config->cache_readmode);
   22778:	687b      	ldr	r3, [r7, #4]
   2277a:	791b      	ldrb	r3, [r3, #4]
   2277c:	041b      	lsls	r3, r3, #16
   2277e:	0019      	movs	r1, r3
   22780:	23c0      	movs	r3, #192	; 0xc0
   22782:	029b      	lsls	r3, r3, #10
   22784:	400b      	ands	r3, r1
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
   22786:	431a      	orrs	r2, r3
	nvm_module->CTRLB.reg =
   22788:	68fb      	ldr	r3, [r7, #12]
   2278a:	605a      	str	r2, [r3, #4]
			(cache_disable_value << NVMCTRL_CTRLB_CACHEDIS_Pos) |
			NVMCTRL_CTRLB_READMODE(config->cache_readmode);
#endif

	/* Initialize the internal device struct */
	_nvm_dev.page_size         = (8 << nvm_module->PARAM.bit.PSZ);
   2278c:	68fb      	ldr	r3, [r7, #12]
   2278e:	689b      	ldr	r3, [r3, #8]
   22790:	035b      	lsls	r3, r3, #13
   22792:	0f5b      	lsrs	r3, r3, #29
   22794:	b2db      	uxtb	r3, r3
   22796:	001a      	movs	r2, r3
   22798:	2308      	movs	r3, #8
   2279a:	4093      	lsls	r3, r2
   2279c:	b29a      	uxth	r2, r3
   2279e:	4b10      	ldr	r3, [pc, #64]	; (227e0 <nvm_set_config+0xd4>)
   227a0:	801a      	strh	r2, [r3, #0]
	_nvm_dev.number_of_pages   = nvm_module->PARAM.bit.NVMP;
   227a2:	68fb      	ldr	r3, [r7, #12]
   227a4:	689b      	ldr	r3, [r3, #8]
   227a6:	b29a      	uxth	r2, r3
   227a8:	4b0d      	ldr	r3, [pc, #52]	; (227e0 <nvm_set_config+0xd4>)
   227aa:	805a      	strh	r2, [r3, #2]
	_nvm_dev.manual_page_write = config->manual_page_write;
   227ac:	687b      	ldr	r3, [r7, #4]
   227ae:	785a      	ldrb	r2, [r3, #1]
   227b0:	4b0b      	ldr	r3, [pc, #44]	; (227e0 <nvm_set_config+0xd4>)
   227b2:	711a      	strb	r2, [r3, #4]

	/* If the security bit is set, the auxiliary space cannot be written */
	if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
   227b4:	68fb      	ldr	r3, [r7, #12]
   227b6:	8b1b      	ldrh	r3, [r3, #24]
   227b8:	b29b      	uxth	r3, r3
   227ba:	001a      	movs	r2, r3
   227bc:	2380      	movs	r3, #128	; 0x80
   227be:	005b      	lsls	r3, r3, #1
   227c0:	4013      	ands	r3, r2
   227c2:	d001      	beq.n	227c8 <nvm_set_config+0xbc>
		return STATUS_ERR_IO;
   227c4:	2310      	movs	r3, #16
   227c6:	e000      	b.n	227ca <nvm_set_config+0xbe>
	}

	return STATUS_OK;
   227c8:	2300      	movs	r3, #0
}
   227ca:	0018      	movs	r0, r3
   227cc:	46bd      	mov	sp, r7
   227ce:	b004      	add	sp, #16
   227d0:	bd80      	pop	{r7, pc}
   227d2:	46c0      	nop			; (mov r8, r8)
   227d4:	41004000 	.word	0x41004000
   227d8:	000226b1 	.word	0x000226b1
   227dc:	00022689 	.word	0x00022689
   227e0:	20000614 	.word	0x20000614

000227e4 <nvm_execute_command>:
 */
enum status_code nvm_execute_command(
		const enum nvm_command command,
		const uint32_t address,
		const uint32_t parameter)
{
   227e4:	b580      	push	{r7, lr}
   227e6:	b086      	sub	sp, #24
   227e8:	af00      	add	r7, sp, #0
   227ea:	60b9      	str	r1, [r7, #8]
   227ec:	607a      	str	r2, [r7, #4]
   227ee:	230f      	movs	r3, #15
   227f0:	18fb      	adds	r3, r7, r3
   227f2:	1c02      	adds	r2, r0, #0
   227f4:	701a      	strb	r2, [r3, #0]
	uint32_t ctrlb_bak;

	/* Check that the address given is valid  */
	if (address > ((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)
   227f6:	4b3a      	ldr	r3, [pc, #232]	; (228e0 <nvm_execute_command+0xfc>)
   227f8:	881b      	ldrh	r3, [r3, #0]
   227fa:	001a      	movs	r2, r3
   227fc:	4b38      	ldr	r3, [pc, #224]	; (228e0 <nvm_execute_command+0xfc>)
   227fe:	885b      	ldrh	r3, [r3, #2]
   22800:	435a      	muls	r2, r3
   22802:	68bb      	ldr	r3, [r7, #8]
   22804:	429a      	cmp	r2, r3
   22806:	d209      	bcs.n	2281c <nvm_execute_command+0x38>
		&& !(address >= NVMCTRL_AUX0_ADDRESS && address <= NVMCTRL_AUX1_ADDRESS )){
   22808:	68bb      	ldr	r3, [r7, #8]
   2280a:	4a36      	ldr	r2, [pc, #216]	; (228e4 <nvm_execute_command+0x100>)
   2280c:	4293      	cmp	r3, r2
   2280e:	d903      	bls.n	22818 <nvm_execute_command+0x34>
   22810:	68bb      	ldr	r3, [r7, #8]
   22812:	4a35      	ldr	r2, [pc, #212]	; (228e8 <nvm_execute_command+0x104>)
   22814:	4293      	cmp	r3, r2
   22816:	d901      	bls.n	2281c <nvm_execute_command+0x38>
		if (address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
			|| address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
#else
		return STATUS_ERR_BAD_ADDRESS;
   22818:	2318      	movs	r3, #24
   2281a:	e05c      	b.n	228d6 <nvm_execute_command+0xf2>
#endif
	}

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
   2281c:	4b33      	ldr	r3, [pc, #204]	; (228ec <nvm_execute_command+0x108>)
   2281e:	617b      	str	r3, [r7, #20]

	/* Turn off cache before issuing flash commands */
	ctrlb_bak = nvm_module->CTRLB.reg;
   22820:	697b      	ldr	r3, [r7, #20]
   22822:	685b      	ldr	r3, [r3, #4]
   22824:	613b      	str	r3, [r7, #16]
#if (SAMC20) || (SAMC21)
	nvm_module->CTRLB.reg = ((ctrlb_bak &(~(NVMCTRL_CTRLB_CACHEDIS(0x2))))
							| NVMCTRL_CTRLB_CACHEDIS(0x1));
#else
	nvm_module->CTRLB.reg = ctrlb_bak | NVMCTRL_CTRLB_CACHEDIS;
   22826:	693b      	ldr	r3, [r7, #16]
   22828:	2280      	movs	r2, #128	; 0x80
   2282a:	02d2      	lsls	r2, r2, #11
   2282c:	431a      	orrs	r2, r3
   2282e:	697b      	ldr	r3, [r7, #20]
   22830:	605a      	str	r2, [r3, #4]
#endif

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
   22832:	697b      	ldr	r3, [r7, #20]
   22834:	2220      	movs	r2, #32
   22836:	32ff      	adds	r2, #255	; 0xff
   22838:	831a      	strh	r2, [r3, #24]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
   2283a:	4b2d      	ldr	r3, [pc, #180]	; (228f0 <nvm_execute_command+0x10c>)
   2283c:	4798      	blx	r3
   2283e:	0003      	movs	r3, r0
   22840:	001a      	movs	r2, r3
   22842:	2301      	movs	r3, #1
   22844:	4053      	eors	r3, r2
   22846:	b2db      	uxtb	r3, r3
   22848:	2b00      	cmp	r3, #0
   2284a:	d004      	beq.n	22856 <nvm_execute_command+0x72>
		/* Restore the setting */
		nvm_module->CTRLB.reg = ctrlb_bak;
   2284c:	697b      	ldr	r3, [r7, #20]
   2284e:	693a      	ldr	r2, [r7, #16]
   22850:	605a      	str	r2, [r3, #4]
		return STATUS_BUSY;
   22852:	2305      	movs	r3, #5
   22854:	e03f      	b.n	228d6 <nvm_execute_command+0xf2>
	}

	switch (command) {
   22856:	230f      	movs	r3, #15
   22858:	18fb      	adds	r3, r7, r3
   2285a:	781b      	ldrb	r3, [r3, #0]
   2285c:	2b45      	cmp	r3, #69	; 0x45
   2285e:	d81d      	bhi.n	2289c <nvm_execute_command+0xb8>
   22860:	009a      	lsls	r2, r3, #2
   22862:	4b24      	ldr	r3, [pc, #144]	; (228f4 <nvm_execute_command+0x110>)
   22864:	18d3      	adds	r3, r2, r3
   22866:	681b      	ldr	r3, [r3, #0]
   22868:	469f      	mov	pc, r3
		/* Commands requiring address (protected) */
		case NVM_COMMAND_ERASE_AUX_ROW:
		case NVM_COMMAND_WRITE_AUX_ROW:

			/* Auxiliary space cannot be accessed if the security bit is set */
			if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
   2286a:	697b      	ldr	r3, [r7, #20]
   2286c:	8b1b      	ldrh	r3, [r3, #24]
   2286e:	b29b      	uxth	r3, r3
   22870:	001a      	movs	r2, r3
   22872:	2380      	movs	r3, #128	; 0x80
   22874:	005b      	lsls	r3, r3, #1
   22876:	4013      	ands	r3, r2
   22878:	d004      	beq.n	22884 <nvm_execute_command+0xa0>
				/* Restore the setting */
				nvm_module->CTRLB.reg = ctrlb_bak;
   2287a:	697b      	ldr	r3, [r7, #20]
   2287c:	693a      	ldr	r2, [r7, #16]
   2287e:	605a      	str	r2, [r3, #4]
				return STATUS_ERR_IO;
   22880:	2310      	movs	r3, #16
   22882:	e028      	b.n	228d6 <nvm_execute_command+0xf2>
			}

			/* Set address, command will be issued elsewhere */
			nvm_module->ADDR.reg = (uintptr_t)&NVM_MEMORY[address / 4];
   22884:	68bb      	ldr	r3, [r7, #8]
   22886:	089b      	lsrs	r3, r3, #2
   22888:	005a      	lsls	r2, r3, #1
   2288a:	697b      	ldr	r3, [r7, #20]
   2288c:	61da      	str	r2, [r3, #28]
			break;
   2288e:	e00b      	b.n	228a8 <nvm_execute_command+0xc4>
		case NVM_COMMAND_RWWEE_ERASE_ROW:
		case NVM_COMMAND_RWWEE_WRITE_PAGE:
#endif

			/* Set address, command will be issued elsewhere */
			nvm_module->ADDR.reg = (uintptr_t)&NVM_MEMORY[address / 4];
   22890:	68bb      	ldr	r3, [r7, #8]
   22892:	089b      	lsrs	r3, r3, #2
   22894:	005a      	lsls	r2, r3, #1
   22896:	697b      	ldr	r3, [r7, #20]
   22898:	61da      	str	r2, [r3, #28]
			break;
   2289a:	e005      	b.n	228a8 <nvm_execute_command+0xc4>
		case NVM_COMMAND_EXIT_LOW_POWER_MODE:
			break;

		default:
			/* Restore the setting */
			nvm_module->CTRLB.reg = ctrlb_bak;
   2289c:	697b      	ldr	r3, [r7, #20]
   2289e:	693a      	ldr	r2, [r7, #16]
   228a0:	605a      	str	r2, [r3, #4]
			return STATUS_ERR_INVALID_ARG;
   228a2:	2317      	movs	r3, #23
   228a4:	e017      	b.n	228d6 <nvm_execute_command+0xf2>
			break;
   228a6:	46c0      	nop			; (mov r8, r8)
	}

	/* Set command */
	nvm_module->CTRLA.reg = command | NVMCTRL_CTRLA_CMDEX_KEY;
   228a8:	230f      	movs	r3, #15
   228aa:	18fb      	adds	r3, r7, r3
   228ac:	781b      	ldrb	r3, [r3, #0]
   228ae:	b29b      	uxth	r3, r3
   228b0:	4a11      	ldr	r2, [pc, #68]	; (228f8 <nvm_execute_command+0x114>)
   228b2:	4313      	orrs	r3, r2
   228b4:	b29a      	uxth	r2, r3
   228b6:	697b      	ldr	r3, [r7, #20]
   228b8:	801a      	strh	r2, [r3, #0]

	/* Wait for the NVM controller to become ready */
	while (!nvm_is_ready()) {
   228ba:	46c0      	nop			; (mov r8, r8)
   228bc:	4b0c      	ldr	r3, [pc, #48]	; (228f0 <nvm_execute_command+0x10c>)
   228be:	4798      	blx	r3
   228c0:	0003      	movs	r3, r0
   228c2:	001a      	movs	r2, r3
   228c4:	2301      	movs	r3, #1
   228c6:	4053      	eors	r3, r2
   228c8:	b2db      	uxtb	r3, r3
   228ca:	2b00      	cmp	r3, #0
   228cc:	d1f6      	bne.n	228bc <nvm_execute_command+0xd8>
	}

	/* Restore the setting */
	nvm_module->CTRLB.reg = ctrlb_bak;
   228ce:	697b      	ldr	r3, [r7, #20]
   228d0:	693a      	ldr	r2, [r7, #16]
   228d2:	605a      	str	r2, [r3, #4]

	return STATUS_OK;
   228d4:	2300      	movs	r3, #0
}
   228d6:	0018      	movs	r0, r3
   228d8:	46bd      	mov	sp, r7
   228da:	b006      	add	sp, #24
   228dc:	bd80      	pop	{r7, pc}
   228de:	46c0      	nop			; (mov r8, r8)
   228e0:	20000614 	.word	0x20000614
   228e4:	00803fff 	.word	0x00803fff
   228e8:	00806000 	.word	0x00806000
   228ec:	41004000 	.word	0x41004000
   228f0:	00022689 	.word	0x00022689
   228f4:	0002a948 	.word	0x0002a948
   228f8:	ffffa500 	.word	0xffffa500

000228fc <nvm_write_buffer>:
 */
enum status_code nvm_write_buffer(
		const uint32_t destination_address,
		const uint8_t *buffer,
		uint16_t length)
{
   228fc:	b580      	push	{r7, lr}
   228fe:	b088      	sub	sp, #32
   22900:	af00      	add	r7, sp, #0
   22902:	60f8      	str	r0, [r7, #12]
   22904:	60b9      	str	r1, [r7, #8]
   22906:	1dbb      	adds	r3, r7, #6
   22908:	801a      	strh	r2, [r3, #0]
	bool is_rww_eeprom = false;
#endif

	/* Check if the destination address is valid */
	if (destination_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
   2290a:	4b4a      	ldr	r3, [pc, #296]	; (22a34 <nvm_write_buffer+0x138>)
   2290c:	881b      	ldrh	r3, [r3, #0]
   2290e:	001a      	movs	r2, r3
   22910:	4b48      	ldr	r3, [pc, #288]	; (22a34 <nvm_write_buffer+0x138>)
   22912:	885b      	ldrh	r3, [r3, #2]
   22914:	435a      	muls	r2, r3
	if (destination_address >
   22916:	68fb      	ldr	r3, [r7, #12]
   22918:	429a      	cmp	r2, r3
   2291a:	d201      	bcs.n	22920 <nvm_write_buffer+0x24>
			|| destination_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
		is_rww_eeprom = true;
#else
		return STATUS_ERR_BAD_ADDRESS;
   2291c:	2318      	movs	r3, #24
   2291e:	e084      	b.n	22a2a <nvm_write_buffer+0x12e>
#endif
	}

	/* Check if the write address not aligned to the start of a page */
	if (destination_address & (_nvm_dev.page_size - 1)) {
   22920:	4b44      	ldr	r3, [pc, #272]	; (22a34 <nvm_write_buffer+0x138>)
   22922:	881b      	ldrh	r3, [r3, #0]
   22924:	3b01      	subs	r3, #1
   22926:	001a      	movs	r2, r3
   22928:	68fb      	ldr	r3, [r7, #12]
   2292a:	4013      	ands	r3, r2
   2292c:	d001      	beq.n	22932 <nvm_write_buffer+0x36>
		return STATUS_ERR_BAD_ADDRESS;
   2292e:	2318      	movs	r3, #24
   22930:	e07b      	b.n	22a2a <nvm_write_buffer+0x12e>
	}

	/* Check if the write length is longer than an NVM page */
	if (length > _nvm_dev.page_size) {
   22932:	4b40      	ldr	r3, [pc, #256]	; (22a34 <nvm_write_buffer+0x138>)
   22934:	881b      	ldrh	r3, [r3, #0]
   22936:	1dba      	adds	r2, r7, #6
   22938:	8812      	ldrh	r2, [r2, #0]
   2293a:	429a      	cmp	r2, r3
   2293c:	d901      	bls.n	22942 <nvm_write_buffer+0x46>
		return STATUS_ERR_INVALID_ARG;
   2293e:	2317      	movs	r3, #23
   22940:	e073      	b.n	22a2a <nvm_write_buffer+0x12e>
	}

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
   22942:	4b3d      	ldr	r3, [pc, #244]	; (22a38 <nvm_write_buffer+0x13c>)
   22944:	617b      	str	r3, [r7, #20]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
   22946:	4b3d      	ldr	r3, [pc, #244]	; (22a3c <nvm_write_buffer+0x140>)
   22948:	4798      	blx	r3
   2294a:	0003      	movs	r3, r0
   2294c:	001a      	movs	r2, r3
   2294e:	2301      	movs	r3, #1
   22950:	4053      	eors	r3, r2
   22952:	b2db      	uxtb	r3, r3
   22954:	2b00      	cmp	r3, #0
   22956:	d001      	beq.n	2295c <nvm_write_buffer+0x60>
		return STATUS_BUSY;
   22958:	2305      	movs	r3, #5
   2295a:	e066      	b.n	22a2a <nvm_write_buffer+0x12e>
	}

	/* Erase the page buffer before buffering new data */
	nvm_module->CTRLA.reg = NVM_COMMAND_PAGE_BUFFER_CLEAR | NVMCTRL_CTRLA_CMDEX_KEY;
   2295c:	697b      	ldr	r3, [r7, #20]
   2295e:	4a38      	ldr	r2, [pc, #224]	; (22a40 <nvm_write_buffer+0x144>)
   22960:	801a      	strh	r2, [r3, #0]

	/* Check if the module is busy */
	while (!nvm_is_ready()) {
   22962:	46c0      	nop			; (mov r8, r8)
   22964:	4b35      	ldr	r3, [pc, #212]	; (22a3c <nvm_write_buffer+0x140>)
   22966:	4798      	blx	r3
   22968:	0003      	movs	r3, r0
   2296a:	001a      	movs	r2, r3
   2296c:	2301      	movs	r3, #1
   2296e:	4053      	eors	r3, r2
   22970:	b2db      	uxtb	r3, r3
   22972:	2b00      	cmp	r3, #0
   22974:	d1f6      	bne.n	22964 <nvm_write_buffer+0x68>
		/* Force-wait for the buffer clear to complete */
	}

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
   22976:	697b      	ldr	r3, [r7, #20]
   22978:	2220      	movs	r2, #32
   2297a:	32ff      	adds	r2, #255	; 0xff
   2297c:	831a      	strh	r2, [r3, #24]

	uint32_t nvm_address = destination_address / 2;
   2297e:	68fb      	ldr	r3, [r7, #12]
   22980:	085b      	lsrs	r3, r3, #1
   22982:	61fb      	str	r3, [r7, #28]

	/* NVM _must_ be accessed as a series of 16-bit words, perform manual copy
	 * to ensure alignment */
	for (uint16_t i = 0; i < length; i += 2) {
   22984:	231a      	movs	r3, #26
   22986:	18fb      	adds	r3, r7, r3
   22988:	2200      	movs	r2, #0
   2298a:	801a      	strh	r2, [r3, #0]
   2298c:	e032      	b.n	229f4 <nvm_write_buffer+0xf8>
		uint16_t data;

		/* Copy first byte of the 16-bit chunk to the temporary buffer */
		data = buffer[i];
   2298e:	231a      	movs	r3, #26
   22990:	18fb      	adds	r3, r7, r3
   22992:	881b      	ldrh	r3, [r3, #0]
   22994:	68ba      	ldr	r2, [r7, #8]
   22996:	18d3      	adds	r3, r2, r3
   22998:	781a      	ldrb	r2, [r3, #0]
   2299a:	2318      	movs	r3, #24
   2299c:	18fb      	adds	r3, r7, r3
   2299e:	801a      	strh	r2, [r3, #0]

		/* If we are not at the end of a write request with an odd byte count,
		 * store the next byte of data as well */
		if (i < (length - 1)) {
   229a0:	231a      	movs	r3, #26
   229a2:	18fb      	adds	r3, r7, r3
   229a4:	881a      	ldrh	r2, [r3, #0]
   229a6:	1dbb      	adds	r3, r7, #6
   229a8:	881b      	ldrh	r3, [r3, #0]
   229aa:	3b01      	subs	r3, #1
   229ac:	429a      	cmp	r2, r3
   229ae:	da11      	bge.n	229d4 <nvm_write_buffer+0xd8>
			data |= (buffer[i + 1] << 8);
   229b0:	231a      	movs	r3, #26
   229b2:	18fb      	adds	r3, r7, r3
   229b4:	881b      	ldrh	r3, [r3, #0]
   229b6:	3301      	adds	r3, #1
   229b8:	68ba      	ldr	r2, [r7, #8]
   229ba:	18d3      	adds	r3, r2, r3
   229bc:	781b      	ldrb	r3, [r3, #0]
   229be:	021b      	lsls	r3, r3, #8
   229c0:	b21a      	sxth	r2, r3
   229c2:	2318      	movs	r3, #24
   229c4:	18fb      	adds	r3, r7, r3
   229c6:	2100      	movs	r1, #0
   229c8:	5e5b      	ldrsh	r3, [r3, r1]
   229ca:	4313      	orrs	r3, r2
   229cc:	b21a      	sxth	r2, r3
   229ce:	2318      	movs	r3, #24
   229d0:	18fb      	adds	r3, r7, r3
   229d2:	801a      	strh	r2, [r3, #0]
		}

		/* Store next 16-bit chunk to the NVM memory space */
		NVM_MEMORY[nvm_address++] = data;
   229d4:	69fb      	ldr	r3, [r7, #28]
   229d6:	1c5a      	adds	r2, r3, #1
   229d8:	61fa      	str	r2, [r7, #28]
   229da:	005b      	lsls	r3, r3, #1
   229dc:	001a      	movs	r2, r3
   229de:	2318      	movs	r3, #24
   229e0:	18fb      	adds	r3, r7, r3
   229e2:	881b      	ldrh	r3, [r3, #0]
   229e4:	8013      	strh	r3, [r2, #0]
	for (uint16_t i = 0; i < length; i += 2) {
   229e6:	231a      	movs	r3, #26
   229e8:	18fb      	adds	r3, r7, r3
   229ea:	221a      	movs	r2, #26
   229ec:	18ba      	adds	r2, r7, r2
   229ee:	8812      	ldrh	r2, [r2, #0]
   229f0:	3202      	adds	r2, #2
   229f2:	801a      	strh	r2, [r3, #0]
   229f4:	231a      	movs	r3, #26
   229f6:	18fa      	adds	r2, r7, r3
   229f8:	1dbb      	adds	r3, r7, #6
   229fa:	8812      	ldrh	r2, [r2, #0]
   229fc:	881b      	ldrh	r3, [r3, #0]
   229fe:	429a      	cmp	r2, r3
   22a00:	d3c5      	bcc.n	2298e <nvm_write_buffer+0x92>
	}

	/* If automatic page write mode is enable, then perform a manual NVM
	 * write when the length of data to be programmed is less than page size
	 */
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
   22a02:	4b0c      	ldr	r3, [pc, #48]	; (22a34 <nvm_write_buffer+0x138>)
   22a04:	791b      	ldrb	r3, [r3, #4]
   22a06:	2201      	movs	r2, #1
   22a08:	4053      	eors	r3, r2
   22a0a:	b2db      	uxtb	r3, r3
   22a0c:	2b00      	cmp	r3, #0
   22a0e:	d00b      	beq.n	22a28 <nvm_write_buffer+0x12c>
   22a10:	1dbb      	adds	r3, r7, #6
   22a12:	881b      	ldrh	r3, [r3, #0]
   22a14:	2b3f      	cmp	r3, #63	; 0x3f
   22a16:	d807      	bhi.n	22a28 <nvm_write_buffer+0x12c>
#ifdef FEATURE_NVM_RWWEE
	 return ((is_rww_eeprom) ?
				(nvm_execute_command(NVM_COMMAND_RWWEE_WRITE_PAGE,destination_address, 0)):
	 			(nvm_execute_command(NVM_COMMAND_WRITE_PAGE,destination_address, 0)));
#else
		return nvm_execute_command(NVM_COMMAND_WRITE_PAGE,
   22a18:	68fb      	ldr	r3, [r7, #12]
   22a1a:	2200      	movs	r2, #0
   22a1c:	0019      	movs	r1, r3
   22a1e:	2004      	movs	r0, #4
   22a20:	4b08      	ldr	r3, [pc, #32]	; (22a44 <nvm_write_buffer+0x148>)
   22a22:	4798      	blx	r3
   22a24:	0003      	movs	r3, r0
   22a26:	e000      	b.n	22a2a <nvm_write_buffer+0x12e>
				destination_address, 0);
#endif
	}

	return STATUS_OK;
   22a28:	2300      	movs	r3, #0
}
   22a2a:	0018      	movs	r0, r3
   22a2c:	46bd      	mov	sp, r7
   22a2e:	b008      	add	sp, #32
   22a30:	bd80      	pop	{r7, pc}
   22a32:	46c0      	nop			; (mov r8, r8)
   22a34:	20000614 	.word	0x20000614
   22a38:	41004000 	.word	0x41004000
   22a3c:	00022689 	.word	0x00022689
   22a40:	ffffa544 	.word	0xffffa544
   22a44:	000227e5 	.word	0x000227e5

00022a48 <nvm_read_buffer>:
 */
enum status_code nvm_read_buffer(
		const uint32_t source_address,
		uint8_t *const buffer,
		uint16_t length)
{
   22a48:	b580      	push	{r7, lr}
   22a4a:	b088      	sub	sp, #32
   22a4c:	af00      	add	r7, sp, #0
   22a4e:	60f8      	str	r0, [r7, #12]
   22a50:	60b9      	str	r1, [r7, #8]
   22a52:	1dbb      	adds	r3, r7, #6
   22a54:	801a      	strh	r2, [r3, #0]
	/* Check if the source address is valid */
	if (source_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
   22a56:	4b38      	ldr	r3, [pc, #224]	; (22b38 <nvm_read_buffer+0xf0>)
   22a58:	881b      	ldrh	r3, [r3, #0]
   22a5a:	001a      	movs	r2, r3
   22a5c:	4b36      	ldr	r3, [pc, #216]	; (22b38 <nvm_read_buffer+0xf0>)
   22a5e:	885b      	ldrh	r3, [r3, #2]
   22a60:	435a      	muls	r2, r3
	if (source_address >
   22a62:	68fb      	ldr	r3, [r7, #12]
   22a64:	429a      	cmp	r2, r3
   22a66:	d201      	bcs.n	22a6c <nvm_read_buffer+0x24>
		if (source_address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
			|| source_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
#else
		return STATUS_ERR_BAD_ADDRESS;
   22a68:	2318      	movs	r3, #24
   22a6a:	e060      	b.n	22b2e <nvm_read_buffer+0xe6>
#endif
	}

	/* Check if the read address is not aligned to the start of a page */
	if (source_address & (_nvm_dev.page_size - 1)) {
   22a6c:	4b32      	ldr	r3, [pc, #200]	; (22b38 <nvm_read_buffer+0xf0>)
   22a6e:	881b      	ldrh	r3, [r3, #0]
   22a70:	3b01      	subs	r3, #1
   22a72:	001a      	movs	r2, r3
   22a74:	68fb      	ldr	r3, [r7, #12]
   22a76:	4013      	ands	r3, r2
   22a78:	d001      	beq.n	22a7e <nvm_read_buffer+0x36>
		return STATUS_ERR_BAD_ADDRESS;
   22a7a:	2318      	movs	r3, #24
   22a7c:	e057      	b.n	22b2e <nvm_read_buffer+0xe6>
	}

	/* Check if the write length is longer than an NVM page */
	if (length > _nvm_dev.page_size) {
   22a7e:	4b2e      	ldr	r3, [pc, #184]	; (22b38 <nvm_read_buffer+0xf0>)
   22a80:	881b      	ldrh	r3, [r3, #0]
   22a82:	1dba      	adds	r2, r7, #6
   22a84:	8812      	ldrh	r2, [r2, #0]
   22a86:	429a      	cmp	r2, r3
   22a88:	d901      	bls.n	22a8e <nvm_read_buffer+0x46>
		return STATUS_ERR_INVALID_ARG;
   22a8a:	2317      	movs	r3, #23
   22a8c:	e04f      	b.n	22b2e <nvm_read_buffer+0xe6>
	}

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
   22a8e:	4b2b      	ldr	r3, [pc, #172]	; (22b3c <nvm_read_buffer+0xf4>)
   22a90:	617b      	str	r3, [r7, #20]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
   22a92:	4b2b      	ldr	r3, [pc, #172]	; (22b40 <nvm_read_buffer+0xf8>)
   22a94:	4798      	blx	r3
   22a96:	0003      	movs	r3, r0
   22a98:	001a      	movs	r2, r3
   22a9a:	2301      	movs	r3, #1
   22a9c:	4053      	eors	r3, r2
   22a9e:	b2db      	uxtb	r3, r3
   22aa0:	2b00      	cmp	r3, #0
   22aa2:	d001      	beq.n	22aa8 <nvm_read_buffer+0x60>
		return STATUS_BUSY;
   22aa4:	2305      	movs	r3, #5
   22aa6:	e042      	b.n	22b2e <nvm_read_buffer+0xe6>
	}

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
   22aa8:	697b      	ldr	r3, [r7, #20]
   22aaa:	2220      	movs	r2, #32
   22aac:	32ff      	adds	r2, #255	; 0xff
   22aae:	831a      	strh	r2, [r3, #24]

	uint32_t page_address = source_address / 2;
   22ab0:	68fb      	ldr	r3, [r7, #12]
   22ab2:	085b      	lsrs	r3, r3, #1
   22ab4:	61fb      	str	r3, [r7, #28]

	/* NVM _must_ be accessed as a series of 16-bit words, perform manual copy
	 * to ensure alignment */
	for (uint16_t i = 0; i < length; i += 2) {
   22ab6:	231a      	movs	r3, #26
   22ab8:	18fb      	adds	r3, r7, r3
   22aba:	2200      	movs	r2, #0
   22abc:	801a      	strh	r2, [r3, #0]
   22abe:	e02e      	b.n	22b1e <nvm_read_buffer+0xd6>
		/* Fetch next 16-bit chunk from the NVM memory space */
		uint16_t data = NVM_MEMORY[page_address++];
   22ac0:	69fb      	ldr	r3, [r7, #28]
   22ac2:	1c5a      	adds	r2, r3, #1
   22ac4:	61fa      	str	r2, [r7, #28]
   22ac6:	005b      	lsls	r3, r3, #1
   22ac8:	001a      	movs	r2, r3
   22aca:	2312      	movs	r3, #18
   22acc:	18fb      	adds	r3, r7, r3
   22ace:	8812      	ldrh	r2, [r2, #0]
   22ad0:	801a      	strh	r2, [r3, #0]

		/* Copy first byte of the 16-bit chunk to the destination buffer */
		buffer[i] = (data & 0xFF);
   22ad2:	231a      	movs	r3, #26
   22ad4:	18fb      	adds	r3, r7, r3
   22ad6:	881b      	ldrh	r3, [r3, #0]
   22ad8:	68ba      	ldr	r2, [r7, #8]
   22ada:	18d3      	adds	r3, r2, r3
   22adc:	2212      	movs	r2, #18
   22ade:	18ba      	adds	r2, r7, r2
   22ae0:	8812      	ldrh	r2, [r2, #0]
   22ae2:	b2d2      	uxtb	r2, r2
   22ae4:	701a      	strb	r2, [r3, #0]

		/* If we are not at the end of a read request with an odd byte count,
		 * store the next byte of data as well */
		if (i < (length - 1)) {
   22ae6:	231a      	movs	r3, #26
   22ae8:	18fb      	adds	r3, r7, r3
   22aea:	881a      	ldrh	r2, [r3, #0]
   22aec:	1dbb      	adds	r3, r7, #6
   22aee:	881b      	ldrh	r3, [r3, #0]
   22af0:	3b01      	subs	r3, #1
   22af2:	429a      	cmp	r2, r3
   22af4:	da0c      	bge.n	22b10 <nvm_read_buffer+0xc8>
			buffer[i + 1] = (data >> 8);
   22af6:	231a      	movs	r3, #26
   22af8:	18fb      	adds	r3, r7, r3
   22afa:	881b      	ldrh	r3, [r3, #0]
   22afc:	3301      	adds	r3, #1
   22afe:	68ba      	ldr	r2, [r7, #8]
   22b00:	18d3      	adds	r3, r2, r3
   22b02:	2212      	movs	r2, #18
   22b04:	18ba      	adds	r2, r7, r2
   22b06:	8812      	ldrh	r2, [r2, #0]
   22b08:	0a12      	lsrs	r2, r2, #8
   22b0a:	b292      	uxth	r2, r2
   22b0c:	b2d2      	uxtb	r2, r2
   22b0e:	701a      	strb	r2, [r3, #0]
	for (uint16_t i = 0; i < length; i += 2) {
   22b10:	231a      	movs	r3, #26
   22b12:	18fb      	adds	r3, r7, r3
   22b14:	221a      	movs	r2, #26
   22b16:	18ba      	adds	r2, r7, r2
   22b18:	8812      	ldrh	r2, [r2, #0]
   22b1a:	3202      	adds	r2, #2
   22b1c:	801a      	strh	r2, [r3, #0]
   22b1e:	231a      	movs	r3, #26
   22b20:	18fa      	adds	r2, r7, r3
   22b22:	1dbb      	adds	r3, r7, #6
   22b24:	8812      	ldrh	r2, [r2, #0]
   22b26:	881b      	ldrh	r3, [r3, #0]
   22b28:	429a      	cmp	r2, r3
   22b2a:	d3c9      	bcc.n	22ac0 <nvm_read_buffer+0x78>
		}
	}

	return STATUS_OK;
   22b2c:	2300      	movs	r3, #0
}
   22b2e:	0018      	movs	r0, r3
   22b30:	46bd      	mov	sp, r7
   22b32:	b008      	add	sp, #32
   22b34:	bd80      	pop	{r7, pc}
   22b36:	46c0      	nop			; (mov r8, r8)
   22b38:	20000614 	.word	0x20000614
   22b3c:	41004000 	.word	0x41004000
   22b40:	00022689 	.word	0x00022689

00022b44 <nvm_erase_row>:
 *                                 not aligned to the start of a row
 * \retval STATUS_ABORTED          NVM erased error
 */
enum status_code nvm_erase_row(
		const uint32_t row_address)
{
   22b44:	b580      	push	{r7, lr}
   22b46:	b084      	sub	sp, #16
   22b48:	af00      	add	r7, sp, #0
   22b4a:	6078      	str	r0, [r7, #4]
		bool is_rww_eeprom = false;
#endif

	/* Check if the row address is valid */
	if (row_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
   22b4c:	4b23      	ldr	r3, [pc, #140]	; (22bdc <nvm_erase_row+0x98>)
   22b4e:	881b      	ldrh	r3, [r3, #0]
   22b50:	001a      	movs	r2, r3
   22b52:	4b22      	ldr	r3, [pc, #136]	; (22bdc <nvm_erase_row+0x98>)
   22b54:	885b      	ldrh	r3, [r3, #2]
   22b56:	435a      	muls	r2, r3
	if (row_address >
   22b58:	687b      	ldr	r3, [r7, #4]
   22b5a:	429a      	cmp	r2, r3
   22b5c:	d201      	bcs.n	22b62 <nvm_erase_row+0x1e>
			|| row_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
		is_rww_eeprom = true;
#else
		return STATUS_ERR_BAD_ADDRESS;
   22b5e:	2318      	movs	r3, #24
   22b60:	e037      	b.n	22bd2 <nvm_erase_row+0x8e>
#endif
	}

	/* Check if the address to erase is not aligned to the start of a row */
	if (row_address & ((_nvm_dev.page_size * NVMCTRL_ROW_PAGES) - 1)) {
   22b62:	4b1e      	ldr	r3, [pc, #120]	; (22bdc <nvm_erase_row+0x98>)
   22b64:	881b      	ldrh	r3, [r3, #0]
   22b66:	009b      	lsls	r3, r3, #2
   22b68:	3b01      	subs	r3, #1
   22b6a:	001a      	movs	r2, r3
   22b6c:	687b      	ldr	r3, [r7, #4]
   22b6e:	4013      	ands	r3, r2
   22b70:	d001      	beq.n	22b76 <nvm_erase_row+0x32>
		return STATUS_ERR_BAD_ADDRESS;
   22b72:	2318      	movs	r3, #24
   22b74:	e02d      	b.n	22bd2 <nvm_erase_row+0x8e>
	}

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
   22b76:	4b1a      	ldr	r3, [pc, #104]	; (22be0 <nvm_erase_row+0x9c>)
   22b78:	60fb      	str	r3, [r7, #12]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
   22b7a:	4b1a      	ldr	r3, [pc, #104]	; (22be4 <nvm_erase_row+0xa0>)
   22b7c:	4798      	blx	r3
   22b7e:	0003      	movs	r3, r0
   22b80:	001a      	movs	r2, r3
   22b82:	2301      	movs	r3, #1
   22b84:	4053      	eors	r3, r2
   22b86:	b2db      	uxtb	r3, r3
   22b88:	2b00      	cmp	r3, #0
   22b8a:	d001      	beq.n	22b90 <nvm_erase_row+0x4c>
		return STATUS_BUSY;
   22b8c:	2305      	movs	r3, #5
   22b8e:	e020      	b.n	22bd2 <nvm_erase_row+0x8e>
	}

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
   22b90:	68fb      	ldr	r3, [r7, #12]
   22b92:	2220      	movs	r2, #32
   22b94:	32ff      	adds	r2, #255	; 0xff
   22b96:	831a      	strh	r2, [r3, #24]

	/* Set address and command */
	nvm_module->ADDR.reg  = (uintptr_t)&NVM_MEMORY[row_address / 4];
   22b98:	687b      	ldr	r3, [r7, #4]
   22b9a:	089b      	lsrs	r3, r3, #2
   22b9c:	005a      	lsls	r2, r3, #1
   22b9e:	68fb      	ldr	r3, [r7, #12]
   22ba0:	61da      	str	r2, [r3, #28]
#ifdef FEATURE_NVM_RWWEE
	nvm_module->CTRLA.reg = ((is_rww_eeprom) ?
								(NVM_COMMAND_RWWEE_ERASE_ROW | NVMCTRL_CTRLA_CMDEX_KEY):
								(NVM_COMMAND_ERASE_ROW | NVMCTRL_CTRLA_CMDEX_KEY));
#else
	nvm_module->CTRLA.reg = NVM_COMMAND_ERASE_ROW | NVMCTRL_CTRLA_CMDEX_KEY;
   22ba2:	68fb      	ldr	r3, [r7, #12]
   22ba4:	4a10      	ldr	r2, [pc, #64]	; (22be8 <nvm_erase_row+0xa4>)
   22ba6:	801a      	strh	r2, [r3, #0]
#endif

	while (!nvm_is_ready()) {
   22ba8:	46c0      	nop			; (mov r8, r8)
   22baa:	4b0e      	ldr	r3, [pc, #56]	; (22be4 <nvm_erase_row+0xa0>)
   22bac:	4798      	blx	r3
   22bae:	0003      	movs	r3, r0
   22bb0:	001a      	movs	r2, r3
   22bb2:	2301      	movs	r3, #1
   22bb4:	4053      	eors	r3, r2
   22bb6:	b2db      	uxtb	r3, r3
   22bb8:	2b00      	cmp	r3, #0
   22bba:	d1f6      	bne.n	22baa <nvm_erase_row+0x66>
	}

	/* There existed error in NVM erase operation */
	if ((enum nvm_error)(nvm_module->STATUS.reg & NVM_ERRORS_MASK) != NVM_ERROR_NONE) {
   22bbc:	68fb      	ldr	r3, [r7, #12]
   22bbe:	8b1b      	ldrh	r3, [r3, #24]
   22bc0:	b29b      	uxth	r3, r3
   22bc2:	b2db      	uxtb	r3, r3
   22bc4:	001a      	movs	r2, r3
   22bc6:	231c      	movs	r3, #28
   22bc8:	4013      	ands	r3, r2
   22bca:	d001      	beq.n	22bd0 <nvm_erase_row+0x8c>
		return STATUS_ABORTED;
   22bcc:	2304      	movs	r3, #4
   22bce:	e000      	b.n	22bd2 <nvm_erase_row+0x8e>
	}

	return STATUS_OK;
   22bd0:	2300      	movs	r3, #0
}
   22bd2:	0018      	movs	r0, r3
   22bd4:	46bd      	mov	sp, r7
   22bd6:	b004      	add	sp, #16
   22bd8:	bd80      	pop	{r7, pc}
   22bda:	46c0      	nop			; (mov r8, r8)
   22bdc:	20000614 	.word	0x20000614
   22be0:	41004000 	.word	0x41004000
   22be4:	00022689 	.word	0x00022689
   22be8:	ffffa502 	.word	0xffffa502

00022bec <nvm_get_parameters>:
 * \param[out] parameters    Parameter structure, which holds page size and
 *                           number of pages in the NVM memory
 */
void nvm_get_parameters(
		struct nvm_parameters *const parameters)
{
   22bec:	b580      	push	{r7, lr}
   22bee:	b086      	sub	sp, #24
   22bf0:	af00      	add	r7, sp, #0
   22bf2:	6078      	str	r0, [r7, #4]
	/* Sanity check parameters */
	Assert(parameters);

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
   22bf4:	4b2a      	ldr	r3, [pc, #168]	; (22ca0 <nvm_get_parameters+0xb4>)
   22bf6:	617b      	str	r3, [r7, #20]

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
   22bf8:	697b      	ldr	r3, [r7, #20]
   22bfa:	2220      	movs	r2, #32
   22bfc:	32ff      	adds	r2, #255	; 0xff
   22bfe:	831a      	strh	r2, [r3, #24]

	/* Read out from the PARAM register */
	uint32_t param_reg = nvm_module->PARAM.reg;
   22c00:	697b      	ldr	r3, [r7, #20]
   22c02:	689b      	ldr	r3, [r3, #8]
   22c04:	613b      	str	r3, [r7, #16]

	/* Mask out page size exponent and convert to a number of bytes */
	parameters->page_size =
			8 << ((param_reg & NVMCTRL_PARAM_PSZ_Msk) >> NVMCTRL_PARAM_PSZ_Pos);
   22c06:	693b      	ldr	r3, [r7, #16]
   22c08:	0c1b      	lsrs	r3, r3, #16
   22c0a:	2207      	movs	r2, #7
   22c0c:	4013      	ands	r3, r2
   22c0e:	2208      	movs	r2, #8
   22c10:	409a      	lsls	r2, r3
   22c12:	0013      	movs	r3, r2
	parameters->page_size =
   22c14:	b2da      	uxtb	r2, r3
   22c16:	687b      	ldr	r3, [r7, #4]
   22c18:	701a      	strb	r2, [r3, #0]

	/* Mask out number of pages count */
	parameters->nvm_number_of_pages =
   22c1a:	693b      	ldr	r3, [r7, #16]
   22c1c:	b29a      	uxth	r2, r3
   22c1e:	687b      	ldr	r3, [r7, #4]
   22c20:	805a      	strh	r2, [r3, #2]
			(param_reg & NVMCTRL_PARAM_RWWEEP_Msk) >> NVMCTRL_PARAM_RWWEEP_Pos;
#endif

	/* Read the current EEPROM fuse value from the USER row */
	uint16_t eeprom_fuse_value =
			(NVM_USER_MEMORY[NVMCTRL_FUSES_EEPROM_SIZE_Pos / 16] &
   22c22:	4b20      	ldr	r3, [pc, #128]	; (22ca4 <nvm_get_parameters+0xb8>)
   22c24:	881b      	ldrh	r3, [r3, #0]
   22c26:	b29b      	uxth	r3, r3
			NVMCTRL_FUSES_EEPROM_SIZE_Msk) >> NVMCTRL_FUSES_EEPROM_SIZE_Pos;
   22c28:	091b      	lsrs	r3, r3, #4
   22c2a:	b29a      	uxth	r2, r3
	uint16_t eeprom_fuse_value =
   22c2c:	230e      	movs	r3, #14
   22c2e:	18fb      	adds	r3, r7, r3
   22c30:	2107      	movs	r1, #7
   22c32:	400a      	ands	r2, r1
   22c34:	801a      	strh	r2, [r3, #0]

	/* Translate the EEPROM fuse byte value to a number of NVM pages */
	if (eeprom_fuse_value == 7) {
   22c36:	230e      	movs	r3, #14
   22c38:	18fb      	adds	r3, r7, r3
   22c3a:	881b      	ldrh	r3, [r3, #0]
   22c3c:	2b07      	cmp	r3, #7
   22c3e:	d103      	bne.n	22c48 <nvm_get_parameters+0x5c>
		parameters->eeprom_number_of_pages = 0;
   22c40:	687b      	ldr	r3, [r7, #4]
   22c42:	2200      	movs	r2, #0
   22c44:	605a      	str	r2, [r3, #4]
   22c46:	e00a      	b.n	22c5e <nvm_get_parameters+0x72>
	}
	else {
		parameters->eeprom_number_of_pages =
				NVMCTRL_ROW_PAGES << (6 - eeprom_fuse_value);
   22c48:	230e      	movs	r3, #14
   22c4a:	18fb      	adds	r3, r7, r3
   22c4c:	881b      	ldrh	r3, [r3, #0]
   22c4e:	2206      	movs	r2, #6
   22c50:	1ad3      	subs	r3, r2, r3
   22c52:	2204      	movs	r2, #4
   22c54:	409a      	lsls	r2, r3
   22c56:	0013      	movs	r3, r2
   22c58:	001a      	movs	r2, r3
		parameters->eeprom_number_of_pages =
   22c5a:	687b      	ldr	r3, [r7, #4]
   22c5c:	605a      	str	r2, [r3, #4]
	}

	/* Read the current BOOTSZ fuse value from the USER row */
	uint16_t boot_fuse_value =
			(NVM_USER_MEMORY[NVMCTRL_FUSES_BOOTPROT_Pos / 16] &
   22c5e:	4b11      	ldr	r3, [pc, #68]	; (22ca4 <nvm_get_parameters+0xb8>)
   22c60:	881b      	ldrh	r3, [r3, #0]
   22c62:	b29a      	uxth	r2, r3
	uint16_t boot_fuse_value =
   22c64:	230c      	movs	r3, #12
   22c66:	18fb      	adds	r3, r7, r3
   22c68:	2107      	movs	r1, #7
   22c6a:	400a      	ands	r2, r1
   22c6c:	801a      	strh	r2, [r3, #0]
			NVMCTRL_FUSES_BOOTPROT_Msk) >> NVMCTRL_FUSES_BOOTPROT_Pos;

	/* Translate the BOOTSZ fuse byte value to a number of NVM pages */
	if (boot_fuse_value == 7) {
   22c6e:	230c      	movs	r3, #12
   22c70:	18fb      	adds	r3, r7, r3
   22c72:	881b      	ldrh	r3, [r3, #0]
   22c74:	2b07      	cmp	r3, #7
   22c76:	d103      	bne.n	22c80 <nvm_get_parameters+0x94>
		parameters->bootloader_number_of_pages = 0;
   22c78:	687b      	ldr	r3, [r7, #4]
   22c7a:	2200      	movs	r2, #0
   22c7c:	609a      	str	r2, [r3, #8]
	}
	else {
		parameters->bootloader_number_of_pages =
				NVMCTRL_ROW_PAGES << (7 - boot_fuse_value);
	}
}
   22c7e:	e00a      	b.n	22c96 <nvm_get_parameters+0xaa>
				NVMCTRL_ROW_PAGES << (7 - boot_fuse_value);
   22c80:	230c      	movs	r3, #12
   22c82:	18fb      	adds	r3, r7, r3
   22c84:	881b      	ldrh	r3, [r3, #0]
   22c86:	2207      	movs	r2, #7
   22c88:	1ad3      	subs	r3, r2, r3
   22c8a:	2204      	movs	r2, #4
   22c8c:	409a      	lsls	r2, r3
   22c8e:	0013      	movs	r3, r2
   22c90:	001a      	movs	r2, r3
		parameters->bootloader_number_of_pages =
   22c92:	687b      	ldr	r3, [r7, #4]
   22c94:	609a      	str	r2, [r3, #8]
}
   22c96:	46c0      	nop			; (mov r8, r8)
   22c98:	46bd      	mov	sp, r7
   22c9a:	b006      	add	sp, #24
   22c9c:	bd80      	pop	{r7, pc}
   22c9e:	46c0      	nop			; (mov r8, r8)
   22ca0:	41004000 	.word	0x41004000
   22ca4:	00804000 	.word	0x00804000

00022ca8 <system_pinmux_get_config_defaults>:
{
   22ca8:	b580      	push	{r7, lr}
   22caa:	b082      	sub	sp, #8
   22cac:	af00      	add	r7, sp, #0
   22cae:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   22cb0:	687b      	ldr	r3, [r7, #4]
   22cb2:	2280      	movs	r2, #128	; 0x80
   22cb4:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   22cb6:	687b      	ldr	r3, [r7, #4]
   22cb8:	2200      	movs	r2, #0
   22cba:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   22cbc:	687b      	ldr	r3, [r7, #4]
   22cbe:	2201      	movs	r2, #1
   22cc0:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   22cc2:	687b      	ldr	r3, [r7, #4]
   22cc4:	2200      	movs	r2, #0
   22cc6:	70da      	strb	r2, [r3, #3]
}
   22cc8:	46c0      	nop			; (mov r8, r8)
   22cca:	46bd      	mov	sp, r7
   22ccc:	b002      	add	sp, #8
   22cce:	bd80      	pop	{r7, pc}

00022cd0 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
   22cd0:	b580      	push	{r7, lr}
   22cd2:	b084      	sub	sp, #16
   22cd4:	af00      	add	r7, sp, #0
   22cd6:	0002      	movs	r2, r0
   22cd8:	6039      	str	r1, [r7, #0]
   22cda:	1dfb      	adds	r3, r7, #7
   22cdc:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
   22cde:	230c      	movs	r3, #12
   22ce0:	18fb      	adds	r3, r7, r3
   22ce2:	0018      	movs	r0, r3
   22ce4:	4b10      	ldr	r3, [pc, #64]	; (22d28 <port_pin_set_config+0x58>)
   22ce6:	4798      	blx	r3

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
   22ce8:	230c      	movs	r3, #12
   22cea:	18fb      	adds	r3, r7, r3
   22cec:	2280      	movs	r2, #128	; 0x80
   22cee:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
   22cf0:	683b      	ldr	r3, [r7, #0]
   22cf2:	781a      	ldrb	r2, [r3, #0]
   22cf4:	230c      	movs	r3, #12
   22cf6:	18fb      	adds	r3, r7, r3
   22cf8:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
   22cfa:	683b      	ldr	r3, [r7, #0]
   22cfc:	785a      	ldrb	r2, [r3, #1]
   22cfe:	230c      	movs	r3, #12
   22d00:	18fb      	adds	r3, r7, r3
   22d02:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
   22d04:	683b      	ldr	r3, [r7, #0]
   22d06:	789a      	ldrb	r2, [r3, #2]
   22d08:	230c      	movs	r3, #12
   22d0a:	18fb      	adds	r3, r7, r3
   22d0c:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
   22d0e:	230c      	movs	r3, #12
   22d10:	18fa      	adds	r2, r7, r3
   22d12:	1dfb      	adds	r3, r7, #7
   22d14:	781b      	ldrb	r3, [r3, #0]
   22d16:	0011      	movs	r1, r2
   22d18:	0018      	movs	r0, r3
   22d1a:	4b04      	ldr	r3, [pc, #16]	; (22d2c <port_pin_set_config+0x5c>)
   22d1c:	4798      	blx	r3
}
   22d1e:	46c0      	nop			; (mov r8, r8)
   22d20:	46bd      	mov	sp, r7
   22d22:	b004      	add	sp, #16
   22d24:	bd80      	pop	{r7, pc}
   22d26:	46c0      	nop			; (mov r8, r8)
   22d28:	00022ca9 	.word	0x00022ca9
   22d2c:	00024a01 	.word	0x00024a01

00022d30 <nvm_get_config_defaults>:
{
   22d30:	b580      	push	{r7, lr}
   22d32:	b082      	sub	sp, #8
   22d34:	af00      	add	r7, sp, #0
   22d36:	6078      	str	r0, [r7, #4]
	config->sleep_power_mode  = NVM_SLEEP_POWER_MODE_WAKEONACCESS;
   22d38:	687b      	ldr	r3, [r7, #4]
   22d3a:	2200      	movs	r2, #0
   22d3c:	701a      	strb	r2, [r3, #0]
	config->manual_page_write = true;
   22d3e:	687b      	ldr	r3, [r7, #4]
   22d40:	2201      	movs	r2, #1
   22d42:	705a      	strb	r2, [r3, #1]
	config->wait_states       = NVMCTRL->CTRLB.bit.RWS;
   22d44:	4b08      	ldr	r3, [pc, #32]	; (22d68 <nvm_get_config_defaults+0x38>)
   22d46:	685b      	ldr	r3, [r3, #4]
   22d48:	06db      	lsls	r3, r3, #27
   22d4a:	0f1b      	lsrs	r3, r3, #28
   22d4c:	b2db      	uxtb	r3, r3
   22d4e:	001a      	movs	r2, r3
   22d50:	687b      	ldr	r3, [r7, #4]
   22d52:	709a      	strb	r2, [r3, #2]
	config->disable_cache     = false;
   22d54:	687b      	ldr	r3, [r7, #4]
   22d56:	2200      	movs	r2, #0
   22d58:	70da      	strb	r2, [r3, #3]
	config->cache_readmode    = NVM_CACHE_READMODE_NO_MISS_PENALTY;
   22d5a:	687b      	ldr	r3, [r7, #4]
   22d5c:	2200      	movs	r2, #0
   22d5e:	711a      	strb	r2, [r3, #4]
}
   22d60:	46c0      	nop			; (mov r8, r8)
   22d62:	46bd      	mov	sp, r7
   22d64:	b002      	add	sp, #8
   22d66:	bd80      	pop	{r7, pc}
   22d68:	41004000 	.word	0x41004000

00022d6c <_eeprom_emulator_nvm_erase_row>:
 *
 *  \param[in] row  Physical row in EEPROM space to erase
 */
static void _eeprom_emulator_nvm_erase_row(
		const uint8_t row)
{
   22d6c:	b590      	push	{r4, r7, lr}
   22d6e:	b085      	sub	sp, #20
   22d70:	af00      	add	r7, sp, #0
   22d72:	0002      	movs	r2, r0
   22d74:	1dfb      	adds	r3, r7, #7
   22d76:	701a      	strb	r2, [r3, #0]
	enum status_code error_code = STATUS_OK;
   22d78:	230f      	movs	r3, #15
   22d7a:	18fb      	adds	r3, r7, r3
   22d7c:	2200      	movs	r2, #0
   22d7e:	701a      	strb	r2, [r3, #0]

	do {
		error_code = nvm_erase_row(
				(uint32_t)&_eeprom_instance.flash[row * NVMCTRL_ROW_PAGES]);
   22d80:	4b0a      	ldr	r3, [pc, #40]	; (22dac <_eeprom_emulator_nvm_erase_row+0x40>)
   22d82:	685b      	ldr	r3, [r3, #4]
   22d84:	1dfa      	adds	r2, r7, #7
   22d86:	7812      	ldrb	r2, [r2, #0]
   22d88:	0212      	lsls	r2, r2, #8
   22d8a:	189b      	adds	r3, r3, r2
		error_code = nvm_erase_row(
   22d8c:	220f      	movs	r2, #15
   22d8e:	18bc      	adds	r4, r7, r2
   22d90:	0018      	movs	r0, r3
   22d92:	4b07      	ldr	r3, [pc, #28]	; (22db0 <_eeprom_emulator_nvm_erase_row+0x44>)
   22d94:	4798      	blx	r3
   22d96:	0003      	movs	r3, r0
   22d98:	7023      	strb	r3, [r4, #0]
	} while (error_code == STATUS_BUSY);
   22d9a:	230f      	movs	r3, #15
   22d9c:	18fb      	adds	r3, r7, r3
   22d9e:	781b      	ldrb	r3, [r3, #0]
   22da0:	2b05      	cmp	r3, #5
   22da2:	d0ed      	beq.n	22d80 <_eeprom_emulator_nvm_erase_row+0x14>
}
   22da4:	46c0      	nop			; (mov r8, r8)
   22da6:	46bd      	mov	sp, r7
   22da8:	b005      	add	sp, #20
   22daa:	bd90      	pop	{r4, r7, pc}
   22dac:	2000061c 	.word	0x2000061c
   22db0:	00022b45 	.word	0x00022b45

00022db4 <_eeprom_emulator_nvm_fill_cache>:
 *  \param[in] data           Data to write to the physical memory page
 */
static void _eeprom_emulator_nvm_fill_cache(
		const uint16_t physical_page,
		const void* const data)
{
   22db4:	b590      	push	{r4, r7, lr}
   22db6:	b085      	sub	sp, #20
   22db8:	af00      	add	r7, sp, #0
   22dba:	0002      	movs	r2, r0
   22dbc:	6039      	str	r1, [r7, #0]
   22dbe:	1dbb      	adds	r3, r7, #6
   22dc0:	801a      	strh	r2, [r3, #0]
	enum status_code error_code = STATUS_OK;
   22dc2:	230f      	movs	r3, #15
   22dc4:	18fb      	adds	r3, r7, r3
   22dc6:	2200      	movs	r2, #0
   22dc8:	701a      	strb	r2, [r3, #0]

	do {
		error_code = nvm_write_buffer(
				(uint32_t)&_eeprom_instance.flash[physical_page],
   22dca:	4b0c      	ldr	r3, [pc, #48]	; (22dfc <_eeprom_emulator_nvm_fill_cache+0x48>)
   22dcc:	685a      	ldr	r2, [r3, #4]
   22dce:	1dbb      	adds	r3, r7, #6
   22dd0:	881b      	ldrh	r3, [r3, #0]
   22dd2:	019b      	lsls	r3, r3, #6
   22dd4:	18d3      	adds	r3, r2, r3
		error_code = nvm_write_buffer(
   22dd6:	0018      	movs	r0, r3
   22dd8:	230f      	movs	r3, #15
   22dda:	18fc      	adds	r4, r7, r3
   22ddc:	683b      	ldr	r3, [r7, #0]
   22dde:	2240      	movs	r2, #64	; 0x40
   22de0:	0019      	movs	r1, r3
   22de2:	4b07      	ldr	r3, [pc, #28]	; (22e00 <_eeprom_emulator_nvm_fill_cache+0x4c>)
   22de4:	4798      	blx	r3
   22de6:	0003      	movs	r3, r0
   22de8:	7023      	strb	r3, [r4, #0]
				(uint8_t*)data,
				NVMCTRL_PAGE_SIZE);
	} while (error_code == STATUS_BUSY);
   22dea:	230f      	movs	r3, #15
   22dec:	18fb      	adds	r3, r7, r3
   22dee:	781b      	ldrb	r3, [r3, #0]
   22df0:	2b05      	cmp	r3, #5
   22df2:	d0ea      	beq.n	22dca <_eeprom_emulator_nvm_fill_cache+0x16>
}
   22df4:	46c0      	nop			; (mov r8, r8)
   22df6:	46bd      	mov	sp, r7
   22df8:	b005      	add	sp, #20
   22dfa:	bd90      	pop	{r4, r7, pc}
   22dfc:	2000061c 	.word	0x2000061c
   22e00:	000228fd 	.word	0x000228fd

00022e04 <_eeprom_emulator_nvm_commit_cache>:
 *
 *  \param[in] physical_page  Physical page in EEPROM space to commit
 */
static void _eeprom_emulator_nvm_commit_cache(
		const uint16_t physical_page)
{
   22e04:	b590      	push	{r4, r7, lr}
   22e06:	b085      	sub	sp, #20
   22e08:	af00      	add	r7, sp, #0
   22e0a:	0002      	movs	r2, r0
   22e0c:	1dbb      	adds	r3, r7, #6
   22e0e:	801a      	strh	r2, [r3, #0]
	enum status_code error_code = STATUS_OK;
   22e10:	230f      	movs	r3, #15
   22e12:	18fb      	adds	r3, r7, r3
   22e14:	2200      	movs	r2, #0
   22e16:	701a      	strb	r2, [r3, #0]

	do {
		error_code = nvm_execute_command(
				NVM_COMMAND_WRITE_PAGE,
				(uint32_t)&_eeprom_instance.flash[physical_page], 0);
   22e18:	4b0b      	ldr	r3, [pc, #44]	; (22e48 <_eeprom_emulator_nvm_commit_cache+0x44>)
   22e1a:	685a      	ldr	r2, [r3, #4]
   22e1c:	1dbb      	adds	r3, r7, #6
   22e1e:	881b      	ldrh	r3, [r3, #0]
   22e20:	019b      	lsls	r3, r3, #6
   22e22:	18d3      	adds	r3, r2, r3
		error_code = nvm_execute_command(
   22e24:	220f      	movs	r2, #15
   22e26:	18bc      	adds	r4, r7, r2
   22e28:	2200      	movs	r2, #0
   22e2a:	0019      	movs	r1, r3
   22e2c:	2004      	movs	r0, #4
   22e2e:	4b07      	ldr	r3, [pc, #28]	; (22e4c <_eeprom_emulator_nvm_commit_cache+0x48>)
   22e30:	4798      	blx	r3
   22e32:	0003      	movs	r3, r0
   22e34:	7023      	strb	r3, [r4, #0]
	} while (error_code == STATUS_BUSY);
   22e36:	230f      	movs	r3, #15
   22e38:	18fb      	adds	r3, r7, r3
   22e3a:	781b      	ldrb	r3, [r3, #0]
   22e3c:	2b05      	cmp	r3, #5
   22e3e:	d0eb      	beq.n	22e18 <_eeprom_emulator_nvm_commit_cache+0x14>
}
   22e40:	46c0      	nop			; (mov r8, r8)
   22e42:	46bd      	mov	sp, r7
   22e44:	b005      	add	sp, #20
   22e46:	bd90      	pop	{r4, r7, pc}
   22e48:	2000061c 	.word	0x2000061c
   22e4c:	000227e5 	.word	0x000227e5

00022e50 <_eeprom_emulator_nvm_read_page>:
 *  \param[out] data           Destination buffer to fill with the read data
 */
static void _eeprom_emulator_nvm_read_page(
		const uint16_t physical_page,
		void* const data)
{
   22e50:	b590      	push	{r4, r7, lr}
   22e52:	b085      	sub	sp, #20
   22e54:	af00      	add	r7, sp, #0
   22e56:	0002      	movs	r2, r0
   22e58:	6039      	str	r1, [r7, #0]
   22e5a:	1dbb      	adds	r3, r7, #6
   22e5c:	801a      	strh	r2, [r3, #0]
	enum status_code error_code = STATUS_OK;
   22e5e:	230f      	movs	r3, #15
   22e60:	18fb      	adds	r3, r7, r3
   22e62:	2200      	movs	r2, #0
   22e64:	701a      	strb	r2, [r3, #0]

	do {
		error_code = nvm_read_buffer(
				(uint32_t)&_eeprom_instance.flash[physical_page],
   22e66:	4b0c      	ldr	r3, [pc, #48]	; (22e98 <_eeprom_emulator_nvm_read_page+0x48>)
   22e68:	685a      	ldr	r2, [r3, #4]
   22e6a:	1dbb      	adds	r3, r7, #6
   22e6c:	881b      	ldrh	r3, [r3, #0]
   22e6e:	019b      	lsls	r3, r3, #6
   22e70:	18d3      	adds	r3, r2, r3
		error_code = nvm_read_buffer(
   22e72:	0018      	movs	r0, r3
   22e74:	230f      	movs	r3, #15
   22e76:	18fc      	adds	r4, r7, r3
   22e78:	683b      	ldr	r3, [r7, #0]
   22e7a:	2240      	movs	r2, #64	; 0x40
   22e7c:	0019      	movs	r1, r3
   22e7e:	4b07      	ldr	r3, [pc, #28]	; (22e9c <_eeprom_emulator_nvm_read_page+0x4c>)
   22e80:	4798      	blx	r3
   22e82:	0003      	movs	r3, r0
   22e84:	7023      	strb	r3, [r4, #0]
				(uint8_t*)data,
				NVMCTRL_PAGE_SIZE);
	} while (error_code == STATUS_BUSY);
   22e86:	230f      	movs	r3, #15
   22e88:	18fb      	adds	r3, r7, r3
   22e8a:	781b      	ldrb	r3, [r3, #0]
   22e8c:	2b05      	cmp	r3, #5
   22e8e:	d0ea      	beq.n	22e66 <_eeprom_emulator_nvm_read_page+0x16>
}
   22e90:	46c0      	nop			; (mov r8, r8)
   22e92:	46bd      	mov	sp, r7
   22e94:	b005      	add	sp, #20
   22e96:	bd90      	pop	{r4, r7, pc}
   22e98:	2000061c 	.word	0x2000061c
   22e9c:	00022a49 	.word	0x00022a49

00022ea0 <_eeprom_emulator_format_memory>:

/**
 * \brief Initializes the emulated EEPROM memory, destroying the current contents.
 */
static void _eeprom_emulator_format_memory(void)
{
   22ea0:	b580      	push	{r7, lr}
   22ea2:	b092      	sub	sp, #72	; 0x48
   22ea4:	af00      	add	r7, sp, #0
	uint16_t logical_page = 0;
   22ea6:	2346      	movs	r3, #70	; 0x46
   22ea8:	18fb      	adds	r3, r7, r3
   22eaa:	2200      	movs	r2, #0
   22eac:	801a      	strh	r2, [r3, #0]

	/* Set row 0 as the spare row */
	_eeprom_instance.spare_row = 0;
   22eae:	4b32      	ldr	r3, [pc, #200]	; (22f78 <_eeprom_emulator_format_memory+0xd8>)
   22eb0:	2287      	movs	r2, #135	; 0x87
   22eb2:	2100      	movs	r1, #0
   22eb4:	5499      	strb	r1, [r3, r2]
	_eeprom_emulator_nvm_erase_row(_eeprom_instance.spare_row);
   22eb6:	4b30      	ldr	r3, [pc, #192]	; (22f78 <_eeprom_emulator_format_memory+0xd8>)
   22eb8:	2287      	movs	r2, #135	; 0x87
   22eba:	5c9b      	ldrb	r3, [r3, r2]
   22ebc:	0018      	movs	r0, r3
   22ebe:	4b2f      	ldr	r3, [pc, #188]	; (22f7c <_eeprom_emulator_format_memory+0xdc>)
   22ec0:	4798      	blx	r3

	for (uint16_t physical_page = NVMCTRL_ROW_PAGES;
   22ec2:	2344      	movs	r3, #68	; 0x44
   22ec4:	18fb      	adds	r3, r7, r3
   22ec6:	2204      	movs	r2, #4
   22ec8:	801a      	strh	r2, [r3, #0]
   22eca:	e04a      	b.n	22f62 <_eeprom_emulator_format_memory+0xc2>
			physical_page < _eeprom_instance.physical_pages; physical_page++) {

		if (physical_page == EEPROM_MASTER_PAGE_NUMBER) {
   22ecc:	2344      	movs	r3, #68	; 0x44
   22ece:	18fb      	adds	r3, r7, r3
   22ed0:	881a      	ldrh	r2, [r3, #0]
   22ed2:	4b29      	ldr	r3, [pc, #164]	; (22f78 <_eeprom_emulator_format_memory+0xd8>)
   22ed4:	891b      	ldrh	r3, [r3, #8]
   22ed6:	3b01      	subs	r3, #1
   22ed8:	429a      	cmp	r2, r3
   22eda:	d03a      	beq.n	22f52 <_eeprom_emulator_format_memory+0xb2>
			continue;
		}

		/* If we are at the first page in a new row, erase the entire row */
		if ((physical_page % NVMCTRL_ROW_PAGES) == 0) {
   22edc:	2344      	movs	r3, #68	; 0x44
   22ede:	18fb      	adds	r3, r7, r3
   22ee0:	881b      	ldrh	r3, [r3, #0]
   22ee2:	2203      	movs	r2, #3
   22ee4:	4013      	ands	r3, r2
   22ee6:	b29b      	uxth	r3, r3
   22ee8:	2b00      	cmp	r3, #0
   22eea:	d108      	bne.n	22efe <_eeprom_emulator_format_memory+0x5e>
			_eeprom_emulator_nvm_erase_row(physical_page / NVMCTRL_ROW_PAGES);
   22eec:	2344      	movs	r3, #68	; 0x44
   22eee:	18fb      	adds	r3, r7, r3
   22ef0:	881b      	ldrh	r3, [r3, #0]
   22ef2:	089b      	lsrs	r3, r3, #2
   22ef4:	b29b      	uxth	r3, r3
   22ef6:	b2db      	uxtb	r3, r3
   22ef8:	0018      	movs	r0, r3
   22efa:	4b20      	ldr	r3, [pc, #128]	; (22f7c <_eeprom_emulator_format_memory+0xdc>)
   22efc:	4798      	blx	r3
		}

		/* Two logical pages are stored in each physical row; program in a
		 * pair of initialized but blank set of emulated EEPROM pages */
		if ((physical_page % NVMCTRL_ROW_PAGES) < 2) {
   22efe:	2344      	movs	r3, #68	; 0x44
   22f00:	18fb      	adds	r3, r7, r3
   22f02:	881b      	ldrh	r3, [r3, #0]
   22f04:	2203      	movs	r2, #3
   22f06:	4013      	ands	r3, r2
   22f08:	b29b      	uxth	r3, r3
   22f0a:	2b01      	cmp	r3, #1
   22f0c:	d822      	bhi.n	22f54 <_eeprom_emulator_format_memory+0xb4>
			/* Make a buffer to hold the initialized EEPROM page */
			struct _eeprom_page data;
			memset(&data, 0xFF, sizeof(data));
   22f0e:	1d3b      	adds	r3, r7, #4
   22f10:	2240      	movs	r2, #64	; 0x40
   22f12:	21ff      	movs	r1, #255	; 0xff
   22f14:	0018      	movs	r0, r3
   22f16:	4b1a      	ldr	r3, [pc, #104]	; (22f80 <_eeprom_emulator_format_memory+0xe0>)
   22f18:	4798      	blx	r3

			/* Set up the new EEPROM row's header */
			data.header.logical_page = logical_page;
   22f1a:	2346      	movs	r3, #70	; 0x46
   22f1c:	18fb      	adds	r3, r7, r3
   22f1e:	881b      	ldrh	r3, [r3, #0]
   22f20:	b2da      	uxtb	r2, r3
   22f22:	1d3b      	adds	r3, r7, #4
   22f24:	701a      	strb	r2, [r3, #0]

			/* Write the page out to physical memory */
			_eeprom_emulator_nvm_fill_cache(physical_page, &data);
   22f26:	1d3a      	adds	r2, r7, #4
   22f28:	2344      	movs	r3, #68	; 0x44
   22f2a:	18fb      	adds	r3, r7, r3
   22f2c:	881b      	ldrh	r3, [r3, #0]
   22f2e:	0011      	movs	r1, r2
   22f30:	0018      	movs	r0, r3
   22f32:	4b14      	ldr	r3, [pc, #80]	; (22f84 <_eeprom_emulator_format_memory+0xe4>)
   22f34:	4798      	blx	r3
			_eeprom_emulator_nvm_commit_cache(physical_page);
   22f36:	2344      	movs	r3, #68	; 0x44
   22f38:	18fb      	adds	r3, r7, r3
   22f3a:	881b      	ldrh	r3, [r3, #0]
   22f3c:	0018      	movs	r0, r3
   22f3e:	4b12      	ldr	r3, [pc, #72]	; (22f88 <_eeprom_emulator_format_memory+0xe8>)
   22f40:	4798      	blx	r3

			/* Increment the logical EEPROM page address now that the current
			 * address' page has been initialized */
			logical_page++;
   22f42:	2346      	movs	r3, #70	; 0x46
   22f44:	18fb      	adds	r3, r7, r3
   22f46:	881a      	ldrh	r2, [r3, #0]
   22f48:	2346      	movs	r3, #70	; 0x46
   22f4a:	18fb      	adds	r3, r7, r3
   22f4c:	3201      	adds	r2, #1
   22f4e:	801a      	strh	r2, [r3, #0]
   22f50:	e000      	b.n	22f54 <_eeprom_emulator_format_memory+0xb4>
			continue;
   22f52:	46c0      	nop			; (mov r8, r8)
			physical_page < _eeprom_instance.physical_pages; physical_page++) {
   22f54:	2344      	movs	r3, #68	; 0x44
   22f56:	18fb      	adds	r3, r7, r3
   22f58:	881a      	ldrh	r2, [r3, #0]
   22f5a:	2344      	movs	r3, #68	; 0x44
   22f5c:	18fb      	adds	r3, r7, r3
   22f5e:	3201      	adds	r2, #1
   22f60:	801a      	strh	r2, [r3, #0]
   22f62:	4b05      	ldr	r3, [pc, #20]	; (22f78 <_eeprom_emulator_format_memory+0xd8>)
   22f64:	891b      	ldrh	r3, [r3, #8]
	for (uint16_t physical_page = NVMCTRL_ROW_PAGES;
   22f66:	2244      	movs	r2, #68	; 0x44
   22f68:	18ba      	adds	r2, r7, r2
   22f6a:	8812      	ldrh	r2, [r2, #0]
   22f6c:	429a      	cmp	r2, r3
   22f6e:	d3ad      	bcc.n	22ecc <_eeprom_emulator_format_memory+0x2c>
		}
	}
}
   22f70:	46c0      	nop			; (mov r8, r8)
   22f72:	46bd      	mov	sp, r7
   22f74:	b012      	add	sp, #72	; 0x48
   22f76:	bd80      	pop	{r7, pc}
   22f78:	2000061c 	.word	0x2000061c
   22f7c:	00022d6d 	.word	0x00022d6d
   22f80:	00028b57 	.word	0x00028b57
   22f84:	00022db5 	.word	0x00022db5
   22f88:	00022e05 	.word	0x00022e05

00022f8c <_eeprom_emulator_is_full_row>:
 *  it is the full row.
 *
 *  \param[in]  phy_page  Physical page that in a row
 */
static bool _eeprom_emulator_is_full_row(uint16_t phy_page)
{
   22f8c:	b580      	push	{r7, lr}
   22f8e:	b082      	sub	sp, #8
   22f90:	af00      	add	r7, sp, #0
   22f92:	0002      	movs	r2, r0
   22f94:	1dbb      	adds	r3, r7, #6
   22f96:	801a      	strh	r2, [r3, #0]
	if((_eeprom_instance.flash[phy_page].header.logical_page
   22f98:	4b14      	ldr	r3, [pc, #80]	; (22fec <_eeprom_emulator_is_full_row+0x60>)
   22f9a:	685a      	ldr	r2, [r3, #4]
   22f9c:	1dbb      	adds	r3, r7, #6
   22f9e:	881b      	ldrh	r3, [r3, #0]
   22fa0:	019b      	lsls	r3, r3, #6
   22fa2:	18d3      	adds	r3, r2, r3
   22fa4:	781a      	ldrb	r2, [r3, #0]
		== _eeprom_instance.flash[phy_page+2].header.logical_page)
   22fa6:	4b11      	ldr	r3, [pc, #68]	; (22fec <_eeprom_emulator_is_full_row+0x60>)
   22fa8:	6859      	ldr	r1, [r3, #4]
   22faa:	1dbb      	adds	r3, r7, #6
   22fac:	881b      	ldrh	r3, [r3, #0]
   22fae:	3302      	adds	r3, #2
   22fb0:	019b      	lsls	r3, r3, #6
   22fb2:	18cb      	adds	r3, r1, r3
   22fb4:	781b      	ldrb	r3, [r3, #0]
	if((_eeprom_instance.flash[phy_page].header.logical_page
   22fb6:	429a      	cmp	r2, r3
   22fb8:	d011      	beq.n	22fde <_eeprom_emulator_is_full_row+0x52>
		|| (_eeprom_instance.flash[phy_page+1].header.logical_page
   22fba:	4b0c      	ldr	r3, [pc, #48]	; (22fec <_eeprom_emulator_is_full_row+0x60>)
   22fbc:	685a      	ldr	r2, [r3, #4]
   22fbe:	1dbb      	adds	r3, r7, #6
   22fc0:	881b      	ldrh	r3, [r3, #0]
   22fc2:	3301      	adds	r3, #1
   22fc4:	019b      	lsls	r3, r3, #6
   22fc6:	18d3      	adds	r3, r2, r3
   22fc8:	781a      	ldrb	r2, [r3, #0]
		== _eeprom_instance.flash[phy_page+2].header.logical_page )) {
   22fca:	4b08      	ldr	r3, [pc, #32]	; (22fec <_eeprom_emulator_is_full_row+0x60>)
   22fcc:	6859      	ldr	r1, [r3, #4]
   22fce:	1dbb      	adds	r3, r7, #6
   22fd0:	881b      	ldrh	r3, [r3, #0]
   22fd2:	3302      	adds	r3, #2
   22fd4:	019b      	lsls	r3, r3, #6
   22fd6:	18cb      	adds	r3, r1, r3
   22fd8:	781b      	ldrb	r3, [r3, #0]
		|| (_eeprom_instance.flash[phy_page+1].header.logical_page
   22fda:	429a      	cmp	r2, r3
   22fdc:	d101      	bne.n	22fe2 <_eeprom_emulator_is_full_row+0x56>
		return true;
   22fde:	2301      	movs	r3, #1
   22fe0:	e000      	b.n	22fe4 <_eeprom_emulator_is_full_row+0x58>
	} else {
		return false;
   22fe2:	2300      	movs	r3, #0
	}
}
   22fe4:	0018      	movs	r0, r3
   22fe6:	46bd      	mov	sp, r7
   22fe8:	b002      	add	sp, #8
   22fea:	bd80      	pop	{r7, pc}
   22fec:	2000061c 	.word	0x2000061c

00022ff0 <_eeprom_emulator_erase_invalid_page>:
 *
 *  \param[in]  pre_phy_page  One physical invalid page
 *  \param[in]  next_phy_page Another physical invalid page
 */
static void _eeprom_emulator_erase_invalid_page(uint16_t pre_phy_page,uint16_t next_phy_page)
{
   22ff0:	b580      	push	{r7, lr}
   22ff2:	b082      	sub	sp, #8
   22ff4:	af00      	add	r7, sp, #0
   22ff6:	0002      	movs	r2, r0
   22ff8:	1dbb      	adds	r3, r7, #6
   22ffa:	801a      	strh	r2, [r3, #0]
   22ffc:	1d3b      	adds	r3, r7, #4
   22ffe:	1c0a      	adds	r2, r1, #0
   23000:	801a      	strh	r2, [r3, #0]
 	/* Erase the old/full row*/
	if(_eeprom_emulator_is_full_row(pre_phy_page)) {
   23002:	1dbb      	adds	r3, r7, #6
   23004:	881b      	ldrh	r3, [r3, #0]
   23006:	0018      	movs	r0, r3
   23008:	4b0c      	ldr	r3, [pc, #48]	; (2303c <_eeprom_emulator_erase_invalid_page+0x4c>)
   2300a:	4798      	blx	r3
   2300c:	1e03      	subs	r3, r0, #0
   2300e:	d008      	beq.n	23022 <_eeprom_emulator_erase_invalid_page+0x32>
		 _eeprom_emulator_nvm_erase_row(pre_phy_page/4);
   23010:	1dbb      	adds	r3, r7, #6
   23012:	881b      	ldrh	r3, [r3, #0]
   23014:	089b      	lsrs	r3, r3, #2
   23016:	b29b      	uxth	r3, r3
   23018:	b2db      	uxtb	r3, r3
   2301a:	0018      	movs	r0, r3
   2301c:	4b08      	ldr	r3, [pc, #32]	; (23040 <_eeprom_emulator_erase_invalid_page+0x50>)
   2301e:	4798      	blx	r3
	} else {
		_eeprom_emulator_nvm_erase_row(next_phy_page/4);
	}
}
   23020:	e007      	b.n	23032 <_eeprom_emulator_erase_invalid_page+0x42>
		_eeprom_emulator_nvm_erase_row(next_phy_page/4);
   23022:	1d3b      	adds	r3, r7, #4
   23024:	881b      	ldrh	r3, [r3, #0]
   23026:	089b      	lsrs	r3, r3, #2
   23028:	b29b      	uxth	r3, r3
   2302a:	b2db      	uxtb	r3, r3
   2302c:	0018      	movs	r0, r3
   2302e:	4b04      	ldr	r3, [pc, #16]	; (23040 <_eeprom_emulator_erase_invalid_page+0x50>)
   23030:	4798      	blx	r3
}
   23032:	46c0      	nop			; (mov r8, r8)
   23034:	46bd      	mov	sp, r7
   23036:	b002      	add	sp, #8
   23038:	bd80      	pop	{r7, pc}
   2303a:	46c0      	nop			; (mov r8, r8)
   2303c:	00022f8d 	.word	0x00022f8d
   23040:	00022d6d 	.word	0x00022d6d

00023044 <_eeprom_emulator_check_logical_page>:
 * \brief Check if there exist rows with same logical pages due to power drop
 *  when writing or erasing page.
 *  when existed same logical page, the old(full) row will be erased.
 */
static void _eeprom_emulator_check_logical_page(void)
{
   23044:	b580      	push	{r7, lr}
   23046:	b082      	sub	sp, #8
   23048:	af00      	add	r7, sp, #0
	uint16_t i = 0, j = 0;
   2304a:	1dbb      	adds	r3, r7, #6
   2304c:	2200      	movs	r2, #0
   2304e:	801a      	strh	r2, [r3, #0]
   23050:	1d3b      	adds	r3, r7, #4
   23052:	2200      	movs	r2, #0
   23054:	801a      	strh	r2, [r3, #0]
	for (i = 0; i < _eeprom_instance.physical_pages; i=i+4) {
   23056:	1dbb      	adds	r3, r7, #6
   23058:	2200      	movs	r2, #0
   2305a:	801a      	strh	r2, [r3, #0]
   2305c:	e04a      	b.n	230f4 <_eeprom_emulator_check_logical_page+0xb0>

		uint16_t pre_logical_page = _eeprom_instance.flash[i].header.logical_page;
   2305e:	4b2a      	ldr	r3, [pc, #168]	; (23108 <_eeprom_emulator_check_logical_page+0xc4>)
   23060:	685a      	ldr	r2, [r3, #4]
   23062:	1dbb      	adds	r3, r7, #6
   23064:	881b      	ldrh	r3, [r3, #0]
   23066:	019b      	lsls	r3, r3, #6
   23068:	18d3      	adds	r3, r2, r3
   2306a:	781a      	ldrb	r2, [r3, #0]
   2306c:	1cbb      	adds	r3, r7, #2
   2306e:	801a      	strh	r2, [r3, #0]
		if( pre_logical_page == EEPROM_INVALID_PAGE_NUMBER) {
   23070:	1cbb      	adds	r3, r7, #2
   23072:	881b      	ldrh	r3, [r3, #0]
   23074:	2bff      	cmp	r3, #255	; 0xff
   23076:	d037      	beq.n	230e8 <_eeprom_emulator_check_logical_page+0xa4>
			continue;
		}

		for (j = NVMCTRL_ROW_PAGES+i; j < _eeprom_instance.physical_pages; j=j+4) {
   23078:	1d3b      	adds	r3, r7, #4
   2307a:	1dba      	adds	r2, r7, #6
   2307c:	8812      	ldrh	r2, [r2, #0]
   2307e:	3204      	adds	r2, #4
   23080:	801a      	strh	r2, [r3, #0]
   23082:	e02a      	b.n	230da <_eeprom_emulator_check_logical_page+0x96>

			if (j == EEPROM_MASTER_PAGE_NUMBER) {
   23084:	1d3b      	adds	r3, r7, #4
   23086:	881a      	ldrh	r2, [r3, #0]
   23088:	4b1f      	ldr	r3, [pc, #124]	; (23108 <_eeprom_emulator_check_logical_page+0xc4>)
   2308a:	891b      	ldrh	r3, [r3, #8]
   2308c:	3b01      	subs	r3, #1
   2308e:	429a      	cmp	r2, r3
   23090:	d01b      	beq.n	230ca <_eeprom_emulator_check_logical_page+0x86>
				continue;
			}
			uint16_t next_logical_page = _eeprom_instance.flash[j].header.logical_page;
   23092:	4b1d      	ldr	r3, [pc, #116]	; (23108 <_eeprom_emulator_check_logical_page+0xc4>)
   23094:	685a      	ldr	r2, [r3, #4]
   23096:	1d3b      	adds	r3, r7, #4
   23098:	881b      	ldrh	r3, [r3, #0]
   2309a:	019b      	lsls	r3, r3, #6
   2309c:	18d3      	adds	r3, r2, r3
   2309e:	781a      	ldrb	r2, [r3, #0]
   230a0:	003b      	movs	r3, r7
   230a2:	801a      	strh	r2, [r3, #0]
			if( next_logical_page == EEPROM_INVALID_PAGE_NUMBER) {
   230a4:	003b      	movs	r3, r7
   230a6:	881b      	ldrh	r3, [r3, #0]
   230a8:	2bff      	cmp	r3, #255	; 0xff
   230aa:	d010      	beq.n	230ce <_eeprom_emulator_check_logical_page+0x8a>
				continue;
			}

			if(pre_logical_page == next_logical_page) {
   230ac:	1cba      	adds	r2, r7, #2
   230ae:	003b      	movs	r3, r7
   230b0:	8812      	ldrh	r2, [r2, #0]
   230b2:	881b      	ldrh	r3, [r3, #0]
   230b4:	429a      	cmp	r2, r3
   230b6:	d10b      	bne.n	230d0 <_eeprom_emulator_check_logical_page+0x8c>
				/* Found invalid logical page and erase it */
				_eeprom_emulator_erase_invalid_page(i,j);
   230b8:	1d3b      	adds	r3, r7, #4
   230ba:	881a      	ldrh	r2, [r3, #0]
   230bc:	1dbb      	adds	r3, r7, #6
   230be:	881b      	ldrh	r3, [r3, #0]
   230c0:	0011      	movs	r1, r2
   230c2:	0018      	movs	r0, r3
   230c4:	4b11      	ldr	r3, [pc, #68]	; (2310c <_eeprom_emulator_check_logical_page+0xc8>)
   230c6:	4798      	blx	r3
   230c8:	e002      	b.n	230d0 <_eeprom_emulator_check_logical_page+0x8c>
				continue;
   230ca:	46c0      	nop			; (mov r8, r8)
   230cc:	e000      	b.n	230d0 <_eeprom_emulator_check_logical_page+0x8c>
				continue;
   230ce:	46c0      	nop			; (mov r8, r8)
		for (j = NVMCTRL_ROW_PAGES+i; j < _eeprom_instance.physical_pages; j=j+4) {
   230d0:	1d3b      	adds	r3, r7, #4
   230d2:	1d3a      	adds	r2, r7, #4
   230d4:	8812      	ldrh	r2, [r2, #0]
   230d6:	3204      	adds	r2, #4
   230d8:	801a      	strh	r2, [r3, #0]
   230da:	4b0b      	ldr	r3, [pc, #44]	; (23108 <_eeprom_emulator_check_logical_page+0xc4>)
   230dc:	891b      	ldrh	r3, [r3, #8]
   230de:	1d3a      	adds	r2, r7, #4
   230e0:	8812      	ldrh	r2, [r2, #0]
   230e2:	429a      	cmp	r2, r3
   230e4:	d3ce      	bcc.n	23084 <_eeprom_emulator_check_logical_page+0x40>
   230e6:	e000      	b.n	230ea <_eeprom_emulator_check_logical_page+0xa6>
			continue;
   230e8:	46c0      	nop			; (mov r8, r8)
	for (i = 0; i < _eeprom_instance.physical_pages; i=i+4) {
   230ea:	1dbb      	adds	r3, r7, #6
   230ec:	1dba      	adds	r2, r7, #6
   230ee:	8812      	ldrh	r2, [r2, #0]
   230f0:	3204      	adds	r2, #4
   230f2:	801a      	strh	r2, [r3, #0]
   230f4:	4b04      	ldr	r3, [pc, #16]	; (23108 <_eeprom_emulator_check_logical_page+0xc4>)
   230f6:	891b      	ldrh	r3, [r3, #8]
   230f8:	1dba      	adds	r2, r7, #6
   230fa:	8812      	ldrh	r2, [r2, #0]
   230fc:	429a      	cmp	r2, r3
   230fe:	d3ae      	bcc.n	2305e <_eeprom_emulator_check_logical_page+0x1a>
			}
		}
	}
}
   23100:	46c0      	nop			; (mov r8, r8)
   23102:	46bd      	mov	sp, r7
   23104:	b002      	add	sp, #8
   23106:	bd80      	pop	{r7, pc}
   23108:	2000061c 	.word	0x2000061c
   2310c:	00022ff1 	.word	0x00022ff1

00023110 <_eeprom_emulator_update_page_mapping>:

/**
 * \brief Creates a map in SRAM to translate logical EEPROM pages to physical FLASH pages.
 */
static void _eeprom_emulator_update_page_mapping(void)
{
   23110:	b580      	push	{r7, lr}
   23112:	b084      	sub	sp, #16
   23114:	af00      	add	r7, sp, #0
	/* Check if exists invalid logical page */
	_eeprom_emulator_check_logical_page();
   23116:	4b51      	ldr	r3, [pc, #324]	; (2325c <_eeprom_emulator_update_page_mapping+0x14c>)
   23118:	4798      	blx	r3

	/* Scan through all physical pages, to map physical and logical pages */
	for (uint16_t c = 0; c < _eeprom_instance.physical_pages; c++) {
   2311a:	230e      	movs	r3, #14
   2311c:	18fb      	adds	r3, r7, r3
   2311e:	2200      	movs	r2, #0
   23120:	801a      	strh	r2, [r3, #0]
   23122:	e033      	b.n	2318c <_eeprom_emulator_update_page_mapping+0x7c>
		if (c == EEPROM_MASTER_PAGE_NUMBER) {
   23124:	230e      	movs	r3, #14
   23126:	18fb      	adds	r3, r7, r3
   23128:	881a      	ldrh	r2, [r3, #0]
   2312a:	4b4d      	ldr	r3, [pc, #308]	; (23260 <_eeprom_emulator_update_page_mapping+0x150>)
   2312c:	891b      	ldrh	r3, [r3, #8]
   2312e:	3b01      	subs	r3, #1
   23130:	429a      	cmp	r2, r3
   23132:	d023      	beq.n	2317c <_eeprom_emulator_update_page_mapping+0x6c>
			continue;
		}

		/* Read in the logical page stored in the current physical page */
		uint16_t logical_page = _eeprom_instance.flash[c].header.logical_page;
   23134:	4b4a      	ldr	r3, [pc, #296]	; (23260 <_eeprom_emulator_update_page_mapping+0x150>)
   23136:	685a      	ldr	r2, [r3, #4]
   23138:	230e      	movs	r3, #14
   2313a:	18fb      	adds	r3, r7, r3
   2313c:	881b      	ldrh	r3, [r3, #0]
   2313e:	019b      	lsls	r3, r3, #6
   23140:	18d3      	adds	r3, r2, r3
   23142:	781a      	ldrb	r2, [r3, #0]
   23144:	2308      	movs	r3, #8
   23146:	18fb      	adds	r3, r7, r3
   23148:	801a      	strh	r2, [r3, #0]

		/* If the logical page number is valid, add it to the mapping */
		if ((logical_page != EEPROM_INVALID_PAGE_NUMBER) &&
   2314a:	2308      	movs	r3, #8
   2314c:	18fb      	adds	r3, r7, r3
   2314e:	881b      	ldrh	r3, [r3, #0]
   23150:	2bff      	cmp	r3, #255	; 0xff
   23152:	d014      	beq.n	2317e <_eeprom_emulator_update_page_mapping+0x6e>
				(logical_page < _eeprom_instance.logical_pages)) {
   23154:	4b42      	ldr	r3, [pc, #264]	; (23260 <_eeprom_emulator_update_page_mapping+0x150>)
   23156:	7a9b      	ldrb	r3, [r3, #10]
   23158:	b29b      	uxth	r3, r3
		if ((logical_page != EEPROM_INVALID_PAGE_NUMBER) &&
   2315a:	2208      	movs	r2, #8
   2315c:	18ba      	adds	r2, r7, r2
   2315e:	8812      	ldrh	r2, [r2, #0]
   23160:	429a      	cmp	r2, r3
   23162:	d20c      	bcs.n	2317e <_eeprom_emulator_update_page_mapping+0x6e>
			_eeprom_instance.page_map[logical_page] = c;
   23164:	2308      	movs	r3, #8
   23166:	18fb      	adds	r3, r7, r3
   23168:	881b      	ldrh	r3, [r3, #0]
   2316a:	220e      	movs	r2, #14
   2316c:	18ba      	adds	r2, r7, r2
   2316e:	8812      	ldrh	r2, [r2, #0]
   23170:	b2d1      	uxtb	r1, r2
   23172:	4a3b      	ldr	r2, [pc, #236]	; (23260 <_eeprom_emulator_update_page_mapping+0x150>)
   23174:	18d3      	adds	r3, r2, r3
   23176:	1c0a      	adds	r2, r1, #0
   23178:	72da      	strb	r2, [r3, #11]
   2317a:	e000      	b.n	2317e <_eeprom_emulator_update_page_mapping+0x6e>
			continue;
   2317c:	46c0      	nop			; (mov r8, r8)
	for (uint16_t c = 0; c < _eeprom_instance.physical_pages; c++) {
   2317e:	230e      	movs	r3, #14
   23180:	18fb      	adds	r3, r7, r3
   23182:	881a      	ldrh	r2, [r3, #0]
   23184:	230e      	movs	r3, #14
   23186:	18fb      	adds	r3, r7, r3
   23188:	3201      	adds	r2, #1
   2318a:	801a      	strh	r2, [r3, #0]
   2318c:	4b34      	ldr	r3, [pc, #208]	; (23260 <_eeprom_emulator_update_page_mapping+0x150>)
   2318e:	891b      	ldrh	r3, [r3, #8]
   23190:	220e      	movs	r2, #14
   23192:	18ba      	adds	r2, r7, r2
   23194:	8812      	ldrh	r2, [r2, #0]
   23196:	429a      	cmp	r2, r3
   23198:	d3c4      	bcc.n	23124 <_eeprom_emulator_update_page_mapping+0x14>
		}
	}

	/* Use an invalid page number as the spare row until a valid one has been
	 * found */
	_eeprom_instance.spare_row = EEPROM_INVALID_ROW_NUMBER;
   2319a:	4b31      	ldr	r3, [pc, #196]	; (23260 <_eeprom_emulator_update_page_mapping+0x150>)
   2319c:	2287      	movs	r2, #135	; 0x87
   2319e:	213f      	movs	r1, #63	; 0x3f
   231a0:	5499      	strb	r1, [r3, r2]

	/* Scan through all physical rows, to find an erased row to use as the
	 * spare */
	for (uint16_t c = 0; c < (_eeprom_instance.physical_pages / NVMCTRL_ROW_PAGES); c++) {
   231a2:	230c      	movs	r3, #12
   231a4:	18fb      	adds	r3, r7, r3
   231a6:	2200      	movs	r2, #0
   231a8:	801a      	strh	r2, [r3, #0]
   231aa:	e04a      	b.n	23242 <_eeprom_emulator_update_page_mapping+0x132>
		bool spare_row_found = true;
   231ac:	230b      	movs	r3, #11
   231ae:	18fb      	adds	r3, r7, r3
   231b0:	2201      	movs	r2, #1
   231b2:	701a      	strb	r2, [r3, #0]

		/* Look through pages within the row to see if they are all erased */
		for (uint8_t c2 = 0; c2 < NVMCTRL_ROW_PAGES; c2++) {
   231b4:	230a      	movs	r3, #10
   231b6:	18fb      	adds	r3, r7, r3
   231b8:	2200      	movs	r2, #0
   231ba:	701a      	strb	r2, [r3, #0]
   231bc:	e028      	b.n	23210 <_eeprom_emulator_update_page_mapping+0x100>
			uint16_t physical_page = (c * NVMCTRL_ROW_PAGES) + c2;
   231be:	230c      	movs	r3, #12
   231c0:	18fb      	adds	r3, r7, r3
   231c2:	881b      	ldrh	r3, [r3, #0]
   231c4:	009b      	lsls	r3, r3, #2
   231c6:	b299      	uxth	r1, r3
   231c8:	230a      	movs	r3, #10
   231ca:	18fb      	adds	r3, r7, r3
   231cc:	781b      	ldrb	r3, [r3, #0]
   231ce:	b29a      	uxth	r2, r3
   231d0:	1dbb      	adds	r3, r7, #6
   231d2:	188a      	adds	r2, r1, r2
   231d4:	801a      	strh	r2, [r3, #0]

			if (physical_page == EEPROM_MASTER_PAGE_NUMBER) {
   231d6:	1dbb      	adds	r3, r7, #6
   231d8:	881a      	ldrh	r2, [r3, #0]
   231da:	4b21      	ldr	r3, [pc, #132]	; (23260 <_eeprom_emulator_update_page_mapping+0x150>)
   231dc:	891b      	ldrh	r3, [r3, #8]
   231de:	3b01      	subs	r3, #1
   231e0:	429a      	cmp	r2, r3
   231e2:	d00d      	beq.n	23200 <_eeprom_emulator_update_page_mapping+0xf0>
				continue;
			}

			if (_eeprom_instance.flash[physical_page].header.logical_page !=
   231e4:	4b1e      	ldr	r3, [pc, #120]	; (23260 <_eeprom_emulator_update_page_mapping+0x150>)
   231e6:	685a      	ldr	r2, [r3, #4]
   231e8:	1dbb      	adds	r3, r7, #6
   231ea:	881b      	ldrh	r3, [r3, #0]
   231ec:	019b      	lsls	r3, r3, #6
   231ee:	18d3      	adds	r3, r2, r3
   231f0:	781b      	ldrb	r3, [r3, #0]
   231f2:	2bff      	cmp	r3, #255	; 0xff
   231f4:	d005      	beq.n	23202 <_eeprom_emulator_update_page_mapping+0xf2>
					EEPROM_INVALID_PAGE_NUMBER) {
				spare_row_found = false;
   231f6:	230b      	movs	r3, #11
   231f8:	18fb      	adds	r3, r7, r3
   231fa:	2200      	movs	r2, #0
   231fc:	701a      	strb	r2, [r3, #0]
   231fe:	e000      	b.n	23202 <_eeprom_emulator_update_page_mapping+0xf2>
				continue;
   23200:	46c0      	nop			; (mov r8, r8)
		for (uint8_t c2 = 0; c2 < NVMCTRL_ROW_PAGES; c2++) {
   23202:	230a      	movs	r3, #10
   23204:	18fb      	adds	r3, r7, r3
   23206:	781a      	ldrb	r2, [r3, #0]
   23208:	230a      	movs	r3, #10
   2320a:	18fb      	adds	r3, r7, r3
   2320c:	3201      	adds	r2, #1
   2320e:	701a      	strb	r2, [r3, #0]
   23210:	230a      	movs	r3, #10
   23212:	18fb      	adds	r3, r7, r3
   23214:	781b      	ldrb	r3, [r3, #0]
   23216:	2b03      	cmp	r3, #3
   23218:	d9d1      	bls.n	231be <_eeprom_emulator_update_page_mapping+0xae>
			}
		}

		/* If we've now found the spare row, store it and abort the search */
		if (spare_row_found == true) {
   2321a:	230b      	movs	r3, #11
   2321c:	18fb      	adds	r3, r7, r3
   2321e:	781b      	ldrb	r3, [r3, #0]
   23220:	2b00      	cmp	r3, #0
   23222:	d007      	beq.n	23234 <_eeprom_emulator_update_page_mapping+0x124>
			_eeprom_instance.spare_row = c;
   23224:	230c      	movs	r3, #12
   23226:	18fb      	adds	r3, r7, r3
   23228:	881b      	ldrh	r3, [r3, #0]
   2322a:	b2d9      	uxtb	r1, r3
   2322c:	4b0c      	ldr	r3, [pc, #48]	; (23260 <_eeprom_emulator_update_page_mapping+0x150>)
   2322e:	2287      	movs	r2, #135	; 0x87
   23230:	5499      	strb	r1, [r3, r2]
			break;
   23232:	e00f      	b.n	23254 <_eeprom_emulator_update_page_mapping+0x144>
	for (uint16_t c = 0; c < (_eeprom_instance.physical_pages / NVMCTRL_ROW_PAGES); c++) {
   23234:	230c      	movs	r3, #12
   23236:	18fb      	adds	r3, r7, r3
   23238:	881a      	ldrh	r2, [r3, #0]
   2323a:	230c      	movs	r3, #12
   2323c:	18fb      	adds	r3, r7, r3
   2323e:	3201      	adds	r2, #1
   23240:	801a      	strh	r2, [r3, #0]
   23242:	4b07      	ldr	r3, [pc, #28]	; (23260 <_eeprom_emulator_update_page_mapping+0x150>)
   23244:	891b      	ldrh	r3, [r3, #8]
   23246:	089b      	lsrs	r3, r3, #2
   23248:	b29b      	uxth	r3, r3
   2324a:	220c      	movs	r2, #12
   2324c:	18ba      	adds	r2, r7, r2
   2324e:	8812      	ldrh	r2, [r2, #0]
   23250:	429a      	cmp	r2, r3
   23252:	d3ab      	bcc.n	231ac <_eeprom_emulator_update_page_mapping+0x9c>
		}
	}
}
   23254:	46c0      	nop			; (mov r8, r8)
   23256:	46bd      	mov	sp, r7
   23258:	b004      	add	sp, #16
   2325a:	bd80      	pop	{r7, pc}
   2325c:	00023045 	.word	0x00023045
   23260:	2000061c 	.word	0x2000061c

00023264 <_eeprom_emulator_is_page_free_on_row>:
 * \retval \c false  If the specified row was full and needs an erase
 */
static bool _eeprom_emulator_is_page_free_on_row(
		const uint8_t start_physical_page,
		uint8_t *const free_physical_page)
{
   23264:	b580      	push	{r7, lr}
   23266:	b084      	sub	sp, #16
   23268:	af00      	add	r7, sp, #0
   2326a:	0002      	movs	r2, r0
   2326c:	6039      	str	r1, [r7, #0]
   2326e:	1dfb      	adds	r3, r7, #7
   23270:	701a      	strb	r2, [r3, #0]
	/* Convert physical page number to a FLASH row and page within the row */
	uint8_t row         = (start_physical_page / NVMCTRL_ROW_PAGES);
   23272:	230e      	movs	r3, #14
   23274:	18fb      	adds	r3, r7, r3
   23276:	1dfa      	adds	r2, r7, #7
   23278:	7812      	ldrb	r2, [r2, #0]
   2327a:	0892      	lsrs	r2, r2, #2
   2327c:	701a      	strb	r2, [r3, #0]
	uint8_t page_in_row = (start_physical_page % NVMCTRL_ROW_PAGES);
   2327e:	230d      	movs	r3, #13
   23280:	18fb      	adds	r3, r7, r3
   23282:	1dfa      	adds	r2, r7, #7
   23284:	7812      	ldrb	r2, [r2, #0]
   23286:	2103      	movs	r1, #3
   23288:	400a      	ands	r2, r1
   2328a:	701a      	strb	r2, [r3, #0]

	/* Look in the current row for a page that isn't currently used */
	for (uint8_t c = page_in_row; c < NVMCTRL_ROW_PAGES; c++) {
   2328c:	230f      	movs	r3, #15
   2328e:	18fb      	adds	r3, r7, r3
   23290:	220d      	movs	r2, #13
   23292:	18ba      	adds	r2, r7, r2
   23294:	7812      	ldrb	r2, [r2, #0]
   23296:	701a      	strb	r2, [r3, #0]
   23298:	e023      	b.n	232e2 <_eeprom_emulator_is_page_free_on_row+0x7e>
		/* Calculate the page number for the current page being examined */
		uint8_t page = (row * NVMCTRL_ROW_PAGES) + c;
   2329a:	230e      	movs	r3, #14
   2329c:	18fb      	adds	r3, r7, r3
   2329e:	781b      	ldrb	r3, [r3, #0]
   232a0:	009b      	lsls	r3, r3, #2
   232a2:	b2d9      	uxtb	r1, r3
   232a4:	230c      	movs	r3, #12
   232a6:	18fb      	adds	r3, r7, r3
   232a8:	220f      	movs	r2, #15
   232aa:	18ba      	adds	r2, r7, r2
   232ac:	7812      	ldrb	r2, [r2, #0]
   232ae:	188a      	adds	r2, r1, r2
   232b0:	701a      	strb	r2, [r3, #0]

		/* If the page is free, pass it to the caller and exit */
		if (_eeprom_instance.flash[page].header.logical_page ==
   232b2:	4b11      	ldr	r3, [pc, #68]	; (232f8 <_eeprom_emulator_is_page_free_on_row+0x94>)
   232b4:	685a      	ldr	r2, [r3, #4]
   232b6:	230c      	movs	r3, #12
   232b8:	18fb      	adds	r3, r7, r3
   232ba:	781b      	ldrb	r3, [r3, #0]
   232bc:	019b      	lsls	r3, r3, #6
   232be:	18d3      	adds	r3, r2, r3
   232c0:	781b      	ldrb	r3, [r3, #0]
   232c2:	2bff      	cmp	r3, #255	; 0xff
   232c4:	d106      	bne.n	232d4 <_eeprom_emulator_is_page_free_on_row+0x70>
				EEPROM_INVALID_PAGE_NUMBER) {
			*free_physical_page = page;
   232c6:	683b      	ldr	r3, [r7, #0]
   232c8:	220c      	movs	r2, #12
   232ca:	18ba      	adds	r2, r7, r2
   232cc:	7812      	ldrb	r2, [r2, #0]
   232ce:	701a      	strb	r2, [r3, #0]
			return true;
   232d0:	2301      	movs	r3, #1
   232d2:	e00c      	b.n	232ee <_eeprom_emulator_is_page_free_on_row+0x8a>
	for (uint8_t c = page_in_row; c < NVMCTRL_ROW_PAGES; c++) {
   232d4:	230f      	movs	r3, #15
   232d6:	18fb      	adds	r3, r7, r3
   232d8:	781a      	ldrb	r2, [r3, #0]
   232da:	230f      	movs	r3, #15
   232dc:	18fb      	adds	r3, r7, r3
   232de:	3201      	adds	r2, #1
   232e0:	701a      	strb	r2, [r3, #0]
   232e2:	230f      	movs	r3, #15
   232e4:	18fb      	adds	r3, r7, r3
   232e6:	781b      	ldrb	r3, [r3, #0]
   232e8:	2b03      	cmp	r3, #3
   232ea:	d9d6      	bls.n	2329a <_eeprom_emulator_is_page_free_on_row+0x36>
		}
	}

	/* No free page in the current row was found */
	return false;
   232ec:	2300      	movs	r3, #0
}
   232ee:	0018      	movs	r0, r3
   232f0:	46bd      	mov	sp, r7
   232f2:	b004      	add	sp, #16
   232f4:	bd80      	pop	{r7, pc}
   232f6:	46c0      	nop			; (mov r8, r8)
   232f8:	2000061c 	.word	0x2000061c

000232fc <_eeprom_emulator_move_data_to_spare>:
 */
static enum status_code _eeprom_emulator_move_data_to_spare(
		const uint8_t row_number,
		const uint8_t logical_page,
		const uint8_t *const data)
{
   232fc:	b580      	push	{r7, lr}
   232fe:	b086      	sub	sp, #24
   23300:	af00      	add	r7, sp, #0
   23302:	603a      	str	r2, [r7, #0]
   23304:	1dfb      	adds	r3, r7, #7
   23306:	1c02      	adds	r2, r0, #0
   23308:	701a      	strb	r2, [r3, #0]
   2330a:	1dbb      	adds	r3, r7, #6
   2330c:	1c0a      	adds	r2, r1, #0
   2330e:	701a      	strb	r2, [r3, #0]
	enum status_code error_code = STATUS_OK;
   23310:	2314      	movs	r3, #20
   23312:	18fb      	adds	r3, r7, r3
   23314:	2200      	movs	r2, #0
   23316:	701a      	strb	r2, [r3, #0]
		uint8_t logical_page;
		uint8_t physical_page;
	} page_trans[2];

	const struct _eeprom_page *row_data =
			(struct _eeprom_page *)&_eeprom_instance.flash[row_number * NVMCTRL_ROW_PAGES];
   23318:	4b69      	ldr	r3, [pc, #420]	; (234c0 <_eeprom_emulator_move_data_to_spare+0x1c4>)
   2331a:	685b      	ldr	r3, [r3, #4]
   2331c:	1dfa      	adds	r2, r7, #7
   2331e:	7812      	ldrb	r2, [r2, #0]
   23320:	0212      	lsls	r2, r2, #8
	const struct _eeprom_page *row_data =
   23322:	189b      	adds	r3, r3, r2
   23324:	613b      	str	r3, [r7, #16]

	/* There should be two logical pages of data in each row, possibly with
	 * multiple revisions (right-most version is the newest). Start by assuming
	 * the left-most two pages contain the newest page revisions. */
	page_trans[0].logical_page  = row_data[0].header.logical_page;
   23326:	693b      	ldr	r3, [r7, #16]
   23328:	781a      	ldrb	r2, [r3, #0]
   2332a:	2308      	movs	r3, #8
   2332c:	18fb      	adds	r3, r7, r3
   2332e:	701a      	strb	r2, [r3, #0]
	page_trans[0].physical_page = (row_number * NVMCTRL_ROW_PAGES);
   23330:	1dfb      	adds	r3, r7, #7
   23332:	781b      	ldrb	r3, [r3, #0]
   23334:	009b      	lsls	r3, r3, #2
   23336:	b2da      	uxtb	r2, r3
   23338:	2308      	movs	r3, #8
   2333a:	18fb      	adds	r3, r7, r3
   2333c:	705a      	strb	r2, [r3, #1]

	page_trans[1].logical_page  = row_data[1].header.logical_page;
   2333e:	693b      	ldr	r3, [r7, #16]
   23340:	3340      	adds	r3, #64	; 0x40
   23342:	781a      	ldrb	r2, [r3, #0]
   23344:	2308      	movs	r3, #8
   23346:	18fb      	adds	r3, r7, r3
   23348:	709a      	strb	r2, [r3, #2]
	page_trans[1].physical_page = (row_number * NVMCTRL_ROW_PAGES) + 1;
   2334a:	1dfb      	adds	r3, r7, #7
   2334c:	781b      	ldrb	r3, [r3, #0]
   2334e:	009b      	lsls	r3, r3, #2
   23350:	b2db      	uxtb	r3, r3
   23352:	3301      	adds	r3, #1
   23354:	b2da      	uxtb	r2, r3
   23356:	2308      	movs	r3, #8
   23358:	18fb      	adds	r3, r7, r3
   2335a:	70da      	strb	r2, [r3, #3]

	/* Look for newer revisions of the two logical pages stored in the row */
	for (uint8_t c = 0; c < 2; c++) {
   2335c:	2317      	movs	r3, #23
   2335e:	18fb      	adds	r3, r7, r3
   23360:	2200      	movs	r2, #0
   23362:	701a      	strb	r2, [r3, #0]
   23364:	e03a      	b.n	233dc <_eeprom_emulator_move_data_to_spare+0xe0>
		/* Look through the remaining pages in the row for any newer revisions */
		for (uint8_t c2 = 2; c2 < NVMCTRL_ROW_PAGES; c2++) {
   23366:	2316      	movs	r3, #22
   23368:	18fb      	adds	r3, r7, r3
   2336a:	2202      	movs	r2, #2
   2336c:	701a      	strb	r2, [r3, #0]
   2336e:	e029      	b.n	233c4 <_eeprom_emulator_move_data_to_spare+0xc8>
			if (page_trans[c].logical_page == row_data[c2].header.logical_page) {
   23370:	2317      	movs	r3, #23
   23372:	18fb      	adds	r3, r7, r3
   23374:	781a      	ldrb	r2, [r3, #0]
   23376:	2308      	movs	r3, #8
   23378:	18fb      	adds	r3, r7, r3
   2337a:	0052      	lsls	r2, r2, #1
   2337c:	5cd2      	ldrb	r2, [r2, r3]
   2337e:	2316      	movs	r3, #22
   23380:	18fb      	adds	r3, r7, r3
   23382:	781b      	ldrb	r3, [r3, #0]
   23384:	019b      	lsls	r3, r3, #6
   23386:	6939      	ldr	r1, [r7, #16]
   23388:	18cb      	adds	r3, r1, r3
   2338a:	781b      	ldrb	r3, [r3, #0]
   2338c:	429a      	cmp	r2, r3
   2338e:	d112      	bne.n	233b6 <_eeprom_emulator_move_data_to_spare+0xba>
				page_trans[c].physical_page =
   23390:	2317      	movs	r3, #23
   23392:	18fb      	adds	r3, r7, r3
   23394:	781b      	ldrb	r3, [r3, #0]
						(row_number * NVMCTRL_ROW_PAGES) + c2;
   23396:	1dfa      	adds	r2, r7, #7
   23398:	7812      	ldrb	r2, [r2, #0]
   2339a:	0092      	lsls	r2, r2, #2
   2339c:	b2d1      	uxtb	r1, r2
   2339e:	2216      	movs	r2, #22
   233a0:	18ba      	adds	r2, r7, r2
   233a2:	7812      	ldrb	r2, [r2, #0]
   233a4:	188a      	adds	r2, r1, r2
   233a6:	b2d1      	uxtb	r1, r2
				page_trans[c].physical_page =
   233a8:	2208      	movs	r2, #8
   233aa:	18ba      	adds	r2, r7, r2
   233ac:	005b      	lsls	r3, r3, #1
   233ae:	18d3      	adds	r3, r2, r3
   233b0:	3301      	adds	r3, #1
   233b2:	1c0a      	adds	r2, r1, #0
   233b4:	701a      	strb	r2, [r3, #0]
		for (uint8_t c2 = 2; c2 < NVMCTRL_ROW_PAGES; c2++) {
   233b6:	2316      	movs	r3, #22
   233b8:	18fb      	adds	r3, r7, r3
   233ba:	781a      	ldrb	r2, [r3, #0]
   233bc:	2316      	movs	r3, #22
   233be:	18fb      	adds	r3, r7, r3
   233c0:	3201      	adds	r2, #1
   233c2:	701a      	strb	r2, [r3, #0]
   233c4:	2316      	movs	r3, #22
   233c6:	18fb      	adds	r3, r7, r3
   233c8:	781b      	ldrb	r3, [r3, #0]
   233ca:	2b03      	cmp	r3, #3
   233cc:	d9d0      	bls.n	23370 <_eeprom_emulator_move_data_to_spare+0x74>
	for (uint8_t c = 0; c < 2; c++) {
   233ce:	2317      	movs	r3, #23
   233d0:	18fb      	adds	r3, r7, r3
   233d2:	781a      	ldrb	r2, [r3, #0]
   233d4:	2317      	movs	r3, #23
   233d6:	18fb      	adds	r3, r7, r3
   233d8:	3201      	adds	r2, #1
   233da:	701a      	strb	r2, [r3, #0]
   233dc:	2317      	movs	r3, #23
   233de:	18fb      	adds	r3, r7, r3
   233e0:	781b      	ldrb	r3, [r3, #0]
   233e2:	2b01      	cmp	r3, #1
   233e4:	d9bf      	bls.n	23366 <_eeprom_emulator_move_data_to_spare+0x6a>
			}
		}
	}

	/* Need to move both saved logical pages stored in the same row */
	for (uint8_t c = 0; c < 2; c++) {
   233e6:	2315      	movs	r3, #21
   233e8:	18fb      	adds	r3, r7, r3
   233ea:	2200      	movs	r2, #0
   233ec:	701a      	strb	r2, [r3, #0]
   233ee:	e051      	b.n	23494 <_eeprom_emulator_move_data_to_spare+0x198>
		/* Find the physical page index for the new spare row pages */
		uint32_t new_page =
				((_eeprom_instance.spare_row * NVMCTRL_ROW_PAGES) + c);
   233f0:	4b33      	ldr	r3, [pc, #204]	; (234c0 <_eeprom_emulator_move_data_to_spare+0x1c4>)
   233f2:	2287      	movs	r2, #135	; 0x87
   233f4:	5c9b      	ldrb	r3, [r3, r2]
   233f6:	009a      	lsls	r2, r3, #2
   233f8:	2315      	movs	r3, #21
   233fa:	18fb      	adds	r3, r7, r3
   233fc:	781b      	ldrb	r3, [r3, #0]
   233fe:	18d3      	adds	r3, r2, r3
		uint32_t new_page =
   23400:	60fb      	str	r3, [r7, #12]

		/* Commit any cached data to physical non-volatile memory */
		eeprom_emulator_commit_page_buffer();
   23402:	4b30      	ldr	r3, [pc, #192]	; (234c4 <_eeprom_emulator_move_data_to_spare+0x1c8>)
   23404:	4798      	blx	r3

		/* Check if we we are looking at the page the calling function wishes
		 * to change during the move operation */
		if (logical_page == page_trans[c].logical_page) {
   23406:	2315      	movs	r3, #21
   23408:	18fb      	adds	r3, r7, r3
   2340a:	781a      	ldrb	r2, [r3, #0]
   2340c:	2308      	movs	r3, #8
   2340e:	18fb      	adds	r3, r7, r3
   23410:	0052      	lsls	r2, r2, #1
   23412:	5cd3      	ldrb	r3, [r2, r3]
   23414:	1dba      	adds	r2, r7, #6
   23416:	7812      	ldrb	r2, [r2, #0]
   23418:	429a      	cmp	r2, r3
   2341a:	d10d      	bne.n	23438 <_eeprom_emulator_move_data_to_spare+0x13c>
			/* Fill out new (updated) logical page's header in the cache */
			_eeprom_instance.cache.header.logical_page = logical_page;
   2341c:	4b28      	ldr	r3, [pc, #160]	; (234c0 <_eeprom_emulator_move_data_to_spare+0x1c4>)
   2341e:	1dba      	adds	r2, r7, #6
   23420:	2188      	movs	r1, #136	; 0x88
   23422:	7812      	ldrb	r2, [r2, #0]
   23424:	545a      	strb	r2, [r3, r1]

			/* Write data to SRAM cache */
			memcpy(_eeprom_instance.cache.data, data, EEPROM_PAGE_SIZE);
   23426:	4b26      	ldr	r3, [pc, #152]	; (234c0 <_eeprom_emulator_move_data_to_spare+0x1c4>)
   23428:	228c      	movs	r2, #140	; 0x8c
   2342a:	6839      	ldr	r1, [r7, #0]
   2342c:	189b      	adds	r3, r3, r2
   2342e:	223c      	movs	r2, #60	; 0x3c
   23430:	0018      	movs	r0, r3
   23432:	4b25      	ldr	r3, [pc, #148]	; (234c8 <_eeprom_emulator_move_data_to_spare+0x1cc>)
   23434:	4798      	blx	r3
   23436:	e00e      	b.n	23456 <_eeprom_emulator_move_data_to_spare+0x15a>
		} else {
			/* Copy existing EEPROM page to cache buffer wholesale */
			_eeprom_emulator_nvm_read_page(
					page_trans[c].physical_page, &_eeprom_instance.cache);
   23438:	2315      	movs	r3, #21
   2343a:	18fb      	adds	r3, r7, r3
   2343c:	781b      	ldrb	r3, [r3, #0]
   2343e:	2208      	movs	r2, #8
   23440:	18ba      	adds	r2, r7, r2
   23442:	005b      	lsls	r3, r3, #1
   23444:	18d3      	adds	r3, r2, r3
   23446:	3301      	adds	r3, #1
   23448:	781b      	ldrb	r3, [r3, #0]
			_eeprom_emulator_nvm_read_page(
   2344a:	b29b      	uxth	r3, r3
   2344c:	4a1f      	ldr	r2, [pc, #124]	; (234cc <_eeprom_emulator_move_data_to_spare+0x1d0>)
   2344e:	0011      	movs	r1, r2
   23450:	0018      	movs	r0, r3
   23452:	4b1f      	ldr	r3, [pc, #124]	; (234d0 <_eeprom_emulator_move_data_to_spare+0x1d4>)
   23454:	4798      	blx	r3
		}

		/* Fill the physical NVM buffer with the new data so that it can be
		 * quickly committed in the future if needed due to a low power
		 * condition */
		_eeprom_emulator_nvm_fill_cache(new_page, &_eeprom_instance.cache);
   23456:	68fb      	ldr	r3, [r7, #12]
   23458:	b29b      	uxth	r3, r3
   2345a:	4a1c      	ldr	r2, [pc, #112]	; (234cc <_eeprom_emulator_move_data_to_spare+0x1d0>)
   2345c:	0011      	movs	r1, r2
   2345e:	0018      	movs	r0, r3
   23460:	4b1c      	ldr	r3, [pc, #112]	; (234d4 <_eeprom_emulator_move_data_to_spare+0x1d8>)
   23462:	4798      	blx	r3

		/* Update the page map with the new page location and indicate that
		 * the cache now holds new data */
		_eeprom_instance.page_map[page_trans[c].logical_page] = new_page;
   23464:	2315      	movs	r3, #21
   23466:	18fb      	adds	r3, r7, r3
   23468:	781a      	ldrb	r2, [r3, #0]
   2346a:	2308      	movs	r3, #8
   2346c:	18fb      	adds	r3, r7, r3
   2346e:	0052      	lsls	r2, r2, #1
   23470:	5cd3      	ldrb	r3, [r2, r3]
   23472:	0019      	movs	r1, r3
   23474:	68fb      	ldr	r3, [r7, #12]
   23476:	b2da      	uxtb	r2, r3
   23478:	4b11      	ldr	r3, [pc, #68]	; (234c0 <_eeprom_emulator_move_data_to_spare+0x1c4>)
   2347a:	185b      	adds	r3, r3, r1
   2347c:	72da      	strb	r2, [r3, #11]
		_eeprom_instance.cache_active = true;
   2347e:	4b10      	ldr	r3, [pc, #64]	; (234c0 <_eeprom_emulator_move_data_to_spare+0x1c4>)
   23480:	22c8      	movs	r2, #200	; 0xc8
   23482:	2101      	movs	r1, #1
   23484:	5499      	strb	r1, [r3, r2]
	for (uint8_t c = 0; c < 2; c++) {
   23486:	2315      	movs	r3, #21
   23488:	18fb      	adds	r3, r7, r3
   2348a:	781a      	ldrb	r2, [r3, #0]
   2348c:	2315      	movs	r3, #21
   2348e:	18fb      	adds	r3, r7, r3
   23490:	3201      	adds	r2, #1
   23492:	701a      	strb	r2, [r3, #0]
   23494:	2315      	movs	r3, #21
   23496:	18fb      	adds	r3, r7, r3
   23498:	781b      	ldrb	r3, [r3, #0]
   2349a:	2b01      	cmp	r3, #1
   2349c:	d9a8      	bls.n	233f0 <_eeprom_emulator_move_data_to_spare+0xf4>
	}

	/* Erase the row that was moved and set it as the new spare row */
	_eeprom_emulator_nvm_erase_row(row_number);
   2349e:	1dfb      	adds	r3, r7, #7
   234a0:	781b      	ldrb	r3, [r3, #0]
   234a2:	0018      	movs	r0, r3
   234a4:	4b0c      	ldr	r3, [pc, #48]	; (234d8 <_eeprom_emulator_move_data_to_spare+0x1dc>)
   234a6:	4798      	blx	r3

	/* Keep the index of the new spare row */
	_eeprom_instance.spare_row = row_number;
   234a8:	4b05      	ldr	r3, [pc, #20]	; (234c0 <_eeprom_emulator_move_data_to_spare+0x1c4>)
   234aa:	1dfa      	adds	r2, r7, #7
   234ac:	2187      	movs	r1, #135	; 0x87
   234ae:	7812      	ldrb	r2, [r2, #0]
   234b0:	545a      	strb	r2, [r3, r1]

	return error_code;
   234b2:	2314      	movs	r3, #20
   234b4:	18fb      	adds	r3, r7, r3
   234b6:	781b      	ldrb	r3, [r3, #0]
}
   234b8:	0018      	movs	r0, r3
   234ba:	46bd      	mov	sp, r7
   234bc:	b006      	add	sp, #24
   234be:	bd80      	pop	{r7, pc}
   234c0:	2000061c 	.word	0x2000061c
   234c4:	000238f9 	.word	0x000238f9
   234c8:	00028b21 	.word	0x00028b21
   234cc:	200006a4 	.word	0x200006a4
   234d0:	00022e51 	.word	0x00022e51
   234d4:	00022db5 	.word	0x00022db5
   234d8:	00022d6d 	.word	0x00022d6d

000234dc <_eeprom_emulator_create_master_page>:
 *
 * Creates a new master page in emulated EEPROM, giving information on the
 * emulator used to store the EEPROM data.
 */
static void _eeprom_emulator_create_master_page(void)
{
   234dc:	b590      	push	{r4, r7, lr}
   234de:	b095      	sub	sp, #84	; 0x54
   234e0:	af00      	add	r7, sp, #0
	const uint32_t magic_key[] = EEPROM_MAGIC_KEY;
   234e2:	2340      	movs	r3, #64	; 0x40
   234e4:	18fb      	adds	r3, r7, r3
   234e6:	4a29      	ldr	r2, [pc, #164]	; (2358c <_eeprom_emulator_create_master_page+0xb0>)
   234e8:	ca13      	ldmia	r2!, {r0, r1, r4}
   234ea:	c313      	stmia	r3!, {r0, r1, r4}

	struct _eeprom_master_page master_page;
	memset(&master_page, 0xFF, sizeof(master_page));
   234ec:	003b      	movs	r3, r7
   234ee:	2240      	movs	r2, #64	; 0x40
   234f0:	21ff      	movs	r1, #255	; 0xff
   234f2:	0018      	movs	r0, r3
   234f4:	4b26      	ldr	r3, [pc, #152]	; (23590 <_eeprom_emulator_create_master_page+0xb4>)
   234f6:	4798      	blx	r3

	/* Fill out the magic key header to indicate an initialized master page */
	for (uint8_t c = 0; c < EEPROM_MAGIC_KEY_COUNT; c++) {
   234f8:	234f      	movs	r3, #79	; 0x4f
   234fa:	18fb      	adds	r3, r7, r3
   234fc:	2200      	movs	r2, #0
   234fe:	701a      	strb	r2, [r3, #0]
   23500:	e013      	b.n	2352a <_eeprom_emulator_create_master_page+0x4e>
		master_page.magic_key[c] = magic_key[c];
   23502:	234f      	movs	r3, #79	; 0x4f
   23504:	18fb      	adds	r3, r7, r3
   23506:	781a      	ldrb	r2, [r3, #0]
   23508:	234f      	movs	r3, #79	; 0x4f
   2350a:	18fb      	adds	r3, r7, r3
   2350c:	7819      	ldrb	r1, [r3, #0]
   2350e:	2340      	movs	r3, #64	; 0x40
   23510:	18fb      	adds	r3, r7, r3
   23512:	0089      	lsls	r1, r1, #2
   23514:	58c9      	ldr	r1, [r1, r3]
   23516:	003b      	movs	r3, r7
   23518:	0092      	lsls	r2, r2, #2
   2351a:	50d1      	str	r1, [r2, r3]
	for (uint8_t c = 0; c < EEPROM_MAGIC_KEY_COUNT; c++) {
   2351c:	234f      	movs	r3, #79	; 0x4f
   2351e:	18fb      	adds	r3, r7, r3
   23520:	781a      	ldrb	r2, [r3, #0]
   23522:	234f      	movs	r3, #79	; 0x4f
   23524:	18fb      	adds	r3, r7, r3
   23526:	3201      	adds	r2, #1
   23528:	701a      	strb	r2, [r3, #0]
   2352a:	234f      	movs	r3, #79	; 0x4f
   2352c:	18fb      	adds	r3, r7, r3
   2352e:	781b      	ldrb	r3, [r3, #0]
   23530:	2b02      	cmp	r3, #2
   23532:	d9e6      	bls.n	23502 <_eeprom_emulator_create_master_page+0x26>
	}

	/* Update master header with version information of this emulator */
	master_page.emulator_id   = EEPROM_EMULATOR_ID;
   23534:	003b      	movs	r3, r7
   23536:	2201      	movs	r2, #1
   23538:	73da      	strb	r2, [r3, #15]
	master_page.major_version = EEPROM_MAJOR_VERSION;
   2353a:	003b      	movs	r3, r7
   2353c:	2201      	movs	r2, #1
   2353e:	731a      	strb	r2, [r3, #12]
	master_page.minor_version = EEPROM_MINOR_VERSION;
   23540:	003b      	movs	r3, r7
   23542:	2200      	movs	r2, #0
   23544:	735a      	strb	r2, [r3, #13]
	master_page.revision      = EEPROM_REVISION;
   23546:	003b      	movs	r3, r7
   23548:	2200      	movs	r2, #0
   2354a:	739a      	strb	r2, [r3, #14]

	_eeprom_emulator_nvm_erase_row(
			EEPROM_MASTER_PAGE_NUMBER / NVMCTRL_ROW_PAGES);
   2354c:	4b11      	ldr	r3, [pc, #68]	; (23594 <_eeprom_emulator_create_master_page+0xb8>)
   2354e:	891b      	ldrh	r3, [r3, #8]
   23550:	3b01      	subs	r3, #1
   23552:	2b00      	cmp	r3, #0
   23554:	da00      	bge.n	23558 <_eeprom_emulator_create_master_page+0x7c>
   23556:	3303      	adds	r3, #3
   23558:	109b      	asrs	r3, r3, #2
	_eeprom_emulator_nvm_erase_row(
   2355a:	b2db      	uxtb	r3, r3
   2355c:	0018      	movs	r0, r3
   2355e:	4b0e      	ldr	r3, [pc, #56]	; (23598 <_eeprom_emulator_create_master_page+0xbc>)
   23560:	4798      	blx	r3

	/* Write the new master page data to physical memory */
	_eeprom_emulator_nvm_fill_cache(EEPROM_MASTER_PAGE_NUMBER, &master_page);
   23562:	4b0c      	ldr	r3, [pc, #48]	; (23594 <_eeprom_emulator_create_master_page+0xb8>)
   23564:	891b      	ldrh	r3, [r3, #8]
   23566:	3b01      	subs	r3, #1
   23568:	b29b      	uxth	r3, r3
   2356a:	003a      	movs	r2, r7
   2356c:	0011      	movs	r1, r2
   2356e:	0018      	movs	r0, r3
   23570:	4b0a      	ldr	r3, [pc, #40]	; (2359c <_eeprom_emulator_create_master_page+0xc0>)
   23572:	4798      	blx	r3
	_eeprom_emulator_nvm_commit_cache(EEPROM_MASTER_PAGE_NUMBER);
   23574:	4b07      	ldr	r3, [pc, #28]	; (23594 <_eeprom_emulator_create_master_page+0xb8>)
   23576:	891b      	ldrh	r3, [r3, #8]
   23578:	3b01      	subs	r3, #1
   2357a:	b29b      	uxth	r3, r3
   2357c:	0018      	movs	r0, r3
   2357e:	4b08      	ldr	r3, [pc, #32]	; (235a0 <_eeprom_emulator_create_master_page+0xc4>)
   23580:	4798      	blx	r3
}
   23582:	46c0      	nop			; (mov r8, r8)
   23584:	46bd      	mov	sp, r7
   23586:	b015      	add	sp, #84	; 0x54
   23588:	bd90      	pop	{r4, r7, pc}
   2358a:	46c0      	nop			; (mov r8, r8)
   2358c:	0002aa60 	.word	0x0002aa60
   23590:	00028b57 	.word	0x00028b57
   23594:	2000061c 	.word	0x2000061c
   23598:	00022d6d 	.word	0x00022d6d
   2359c:	00022db5 	.word	0x00022db5
   235a0:	00022e05 	.word	0x00022e05

000235a4 <_eeprom_emulator_verify_master_page>:
 * \retval STATUS_ERR_BAD_FORMAT  Master page contents was invalid
 * \retval STATUS_ERR_IO          Master page indicates the data is incompatible
 *                                with this version of the EEPROM emulator
 */
static enum status_code _eeprom_emulator_verify_master_page(void)
{
   235a4:	b590      	push	{r4, r7, lr}
   235a6:	b095      	sub	sp, #84	; 0x54
   235a8:	af00      	add	r7, sp, #0
	const uint32_t magic_key[] = EEPROM_MAGIC_KEY;
   235aa:	2340      	movs	r3, #64	; 0x40
   235ac:	18fb      	adds	r3, r7, r3
   235ae:	4a22      	ldr	r2, [pc, #136]	; (23638 <_eeprom_emulator_verify_master_page+0x94>)
   235b0:	ca13      	ldmia	r2!, {r0, r1, r4}
   235b2:	c313      	stmia	r3!, {r0, r1, r4}
	struct _eeprom_master_page master_page;

	/* Copy the master page to the RAM buffer so that it can be inspected */
	_eeprom_emulator_nvm_read_page(EEPROM_MASTER_PAGE_NUMBER, &master_page);
   235b4:	4b21      	ldr	r3, [pc, #132]	; (2363c <_eeprom_emulator_verify_master_page+0x98>)
   235b6:	891b      	ldrh	r3, [r3, #8]
   235b8:	3b01      	subs	r3, #1
   235ba:	b29b      	uxth	r3, r3
   235bc:	003a      	movs	r2, r7
   235be:	0011      	movs	r1, r2
   235c0:	0018      	movs	r0, r3
   235c2:	4b1f      	ldr	r3, [pc, #124]	; (23640 <_eeprom_emulator_verify_master_page+0x9c>)
   235c4:	4798      	blx	r3

	/* Verify magic key is correct in the master page header */
	for (uint8_t c = 0; c < EEPROM_MAGIC_KEY_COUNT; c++) {
   235c6:	234f      	movs	r3, #79	; 0x4f
   235c8:	18fb      	adds	r3, r7, r3
   235ca:	2200      	movs	r2, #0
   235cc:	701a      	strb	r2, [r3, #0]
   235ce:	e017      	b.n	23600 <_eeprom_emulator_verify_master_page+0x5c>
		if (master_page.magic_key[c] != magic_key[c]) {
   235d0:	234f      	movs	r3, #79	; 0x4f
   235d2:	18fb      	adds	r3, r7, r3
   235d4:	781a      	ldrb	r2, [r3, #0]
   235d6:	003b      	movs	r3, r7
   235d8:	0092      	lsls	r2, r2, #2
   235da:	58d2      	ldr	r2, [r2, r3]
   235dc:	234f      	movs	r3, #79	; 0x4f
   235de:	18fb      	adds	r3, r7, r3
   235e0:	7819      	ldrb	r1, [r3, #0]
   235e2:	2340      	movs	r3, #64	; 0x40
   235e4:	18fb      	adds	r3, r7, r3
   235e6:	0089      	lsls	r1, r1, #2
   235e8:	58cb      	ldr	r3, [r1, r3]
   235ea:	429a      	cmp	r2, r3
   235ec:	d001      	beq.n	235f2 <_eeprom_emulator_verify_master_page+0x4e>
			return STATUS_ERR_BAD_FORMAT;
   235ee:	231a      	movs	r3, #26
   235f0:	e01e      	b.n	23630 <_eeprom_emulator_verify_master_page+0x8c>
	for (uint8_t c = 0; c < EEPROM_MAGIC_KEY_COUNT; c++) {
   235f2:	234f      	movs	r3, #79	; 0x4f
   235f4:	18fb      	adds	r3, r7, r3
   235f6:	781a      	ldrb	r2, [r3, #0]
   235f8:	234f      	movs	r3, #79	; 0x4f
   235fa:	18fb      	adds	r3, r7, r3
   235fc:	3201      	adds	r2, #1
   235fe:	701a      	strb	r2, [r3, #0]
   23600:	234f      	movs	r3, #79	; 0x4f
   23602:	18fb      	adds	r3, r7, r3
   23604:	781b      	ldrb	r3, [r3, #0]
   23606:	2b02      	cmp	r3, #2
   23608:	d9e2      	bls.n	235d0 <_eeprom_emulator_verify_master_page+0x2c>
		}
	}

	/* Verify emulator ID in header to ensure the same scheme is used */
	if (master_page.emulator_id   != EEPROM_EMULATOR_ID) {
   2360a:	003b      	movs	r3, r7
   2360c:	7bdb      	ldrb	r3, [r3, #15]
   2360e:	2b01      	cmp	r3, #1
   23610:	d001      	beq.n	23616 <_eeprom_emulator_verify_master_page+0x72>
		return STATUS_ERR_IO;
   23612:	2310      	movs	r3, #16
   23614:	e00c      	b.n	23630 <_eeprom_emulator_verify_master_page+0x8c>
	}

	/* Verify major version in header to ensure the same version is used */
	if (master_page.major_version != EEPROM_MAJOR_VERSION) {
   23616:	003b      	movs	r3, r7
   23618:	7b1b      	ldrb	r3, [r3, #12]
   2361a:	2b01      	cmp	r3, #1
   2361c:	d001      	beq.n	23622 <_eeprom_emulator_verify_master_page+0x7e>
		return STATUS_ERR_IO;
   2361e:	2310      	movs	r3, #16
   23620:	e006      	b.n	23630 <_eeprom_emulator_verify_master_page+0x8c>
	}

	/* Verify minor version in header to ensure the same version is used */
	if (master_page.minor_version != EEPROM_MINOR_VERSION) {
   23622:	003b      	movs	r3, r7
   23624:	7b5b      	ldrb	r3, [r3, #13]
   23626:	2b00      	cmp	r3, #0
   23628:	d001      	beq.n	2362e <_eeprom_emulator_verify_master_page+0x8a>
		return STATUS_ERR_IO;
   2362a:	2310      	movs	r3, #16
   2362c:	e000      	b.n	23630 <_eeprom_emulator_verify_master_page+0x8c>
	}

	/* Don't verify revision number - same major/minor is considered enough
	 * to ensure the stored data is compatible. */

	return STATUS_OK;
   2362e:	2300      	movs	r3, #0
}
   23630:	0018      	movs	r0, r3
   23632:	46bd      	mov	sp, r7
   23634:	b015      	add	sp, #84	; 0x54
   23636:	bd90      	pop	{r4, r7, pc}
   23638:	0002aa60 	.word	0x0002aa60
   2363c:	2000061c 	.word	0x2000061c
   23640:	00022e51 	.word	0x00022e51

00023644 <eeprom_emulator_init>:
 *                                formatted
 * \retval STATUS_ERR_IO          EEPROM data is incompatible with this version
 *                                or scheme of the EEPROM emulator
 */
enum status_code eeprom_emulator_init(void)
{
   23644:	b590      	push	{r4, r7, lr}
   23646:	b087      	sub	sp, #28
   23648:	af00      	add	r7, sp, #0
	enum status_code error_code = STATUS_OK;
   2364a:	2317      	movs	r3, #23
   2364c:	18fb      	adds	r3, r7, r3
   2364e:	2200      	movs	r2, #0
   23650:	701a      	strb	r2, [r3, #0]
	struct nvm_parameters parameters;

	/* Retrieve the NVM controller configuration - enable manual page writing
	 * mode so that the emulator has exclusive control over page writes to
	 * allow for caching */
	nvm_get_config_defaults(&config);
   23652:	2310      	movs	r3, #16
   23654:	18fb      	adds	r3, r7, r3
   23656:	0018      	movs	r0, r3
   23658:	4b2e      	ldr	r3, [pc, #184]	; (23714 <eeprom_emulator_init+0xd0>)
   2365a:	4798      	blx	r3
	config.manual_page_write = true;
   2365c:	2310      	movs	r3, #16
   2365e:	18fb      	adds	r3, r7, r3
   23660:	2201      	movs	r2, #1
   23662:	705a      	strb	r2, [r3, #1]

	/* Apply new NVM configuration */
	do {
		error_code = nvm_set_config(&config);
   23664:	2317      	movs	r3, #23
   23666:	18fc      	adds	r4, r7, r3
   23668:	2310      	movs	r3, #16
   2366a:	18fb      	adds	r3, r7, r3
   2366c:	0018      	movs	r0, r3
   2366e:	4b2a      	ldr	r3, [pc, #168]	; (23718 <eeprom_emulator_init+0xd4>)
   23670:	4798      	blx	r3
   23672:	0003      	movs	r3, r0
   23674:	7023      	strb	r3, [r4, #0]
	} while (error_code == STATUS_BUSY);
   23676:	2317      	movs	r3, #23
   23678:	18fb      	adds	r3, r7, r3
   2367a:	781b      	ldrb	r3, [r3, #0]
   2367c:	2b05      	cmp	r3, #5
   2367e:	d0f1      	beq.n	23664 <eeprom_emulator_init+0x20>

	/* Get the NVM controller configuration parameters */
	nvm_get_parameters(&parameters);
   23680:	1d3b      	adds	r3, r7, #4
   23682:	0018      	movs	r0, r3
   23684:	4b25      	ldr	r3, [pc, #148]	; (2371c <eeprom_emulator_init+0xd8>)
   23686:	4798      	blx	r3

	/* Ensure the device fuses are configured for at least one master page row,
	 * one user EEPROM data row and one spare row */
	if (parameters.eeprom_number_of_pages < (3 * NVMCTRL_ROW_PAGES)) {
   23688:	1d3b      	adds	r3, r7, #4
   2368a:	685b      	ldr	r3, [r3, #4]
   2368c:	2b0b      	cmp	r3, #11
   2368e:	d801      	bhi.n	23694 <eeprom_emulator_init+0x50>
		return STATUS_ERR_NO_MEMORY;
   23690:	2316      	movs	r3, #22
   23692:	e03b      	b.n	2370c <eeprom_emulator_init+0xc8>
	 *  - One row is reserved for the master page
	 *  - One row is reserved for the spare row
	 *  - Two logical pages can be stored in one physical row
	 */
	_eeprom_instance.physical_pages =
			parameters.eeprom_number_of_pages;
   23694:	1d3b      	adds	r3, r7, #4
   23696:	685b      	ldr	r3, [r3, #4]
	_eeprom_instance.physical_pages =
   23698:	b29a      	uxth	r2, r3
   2369a:	4b21      	ldr	r3, [pc, #132]	; (23720 <eeprom_emulator_init+0xdc>)
   2369c:	811a      	strh	r2, [r3, #8]
	_eeprom_instance.logical_pages  =
			(parameters.eeprom_number_of_pages - (2 * NVMCTRL_ROW_PAGES)) / 2;
   2369e:	1d3b      	adds	r3, r7, #4
   236a0:	685b      	ldr	r3, [r3, #4]
   236a2:	3b08      	subs	r3, #8
   236a4:	085b      	lsrs	r3, r3, #1
	_eeprom_instance.logical_pages  =
   236a6:	b2da      	uxtb	r2, r3
   236a8:	4b1d      	ldr	r3, [pc, #116]	; (23720 <eeprom_emulator_init+0xdc>)
   236aa:	729a      	strb	r2, [r3, #10]

	/* Configure the EEPROM instance starting physical address in FLASH and
	 * pre-compute the index of the first page in FLASH used for EEPROM */
	_eeprom_instance.flash =
			(void*)(FLASH_SIZE -
			((uint32_t)_eeprom_instance.physical_pages * NVMCTRL_PAGE_SIZE));
   236ac:	4b1c      	ldr	r3, [pc, #112]	; (23720 <eeprom_emulator_init+0xdc>)
   236ae:	891b      	ldrh	r3, [r3, #8]
   236b0:	001a      	movs	r2, r3
			(void*)(FLASH_SIZE -
   236b2:	0013      	movs	r3, r2
   236b4:	069b      	lsls	r3, r3, #26
   236b6:	1a9b      	subs	r3, r3, r2
   236b8:	019b      	lsls	r3, r3, #6
   236ba:	2280      	movs	r2, #128	; 0x80
   236bc:	02d2      	lsls	r2, r2, #11
   236be:	4694      	mov	ip, r2
   236c0:	4463      	add	r3, ip
   236c2:	001a      	movs	r2, r3
	_eeprom_instance.flash =
   236c4:	4b16      	ldr	r3, [pc, #88]	; (23720 <eeprom_emulator_init+0xdc>)
   236c6:	605a      	str	r2, [r3, #4]

	/* Clear EEPROM page write cache on initialization */
	_eeprom_instance.cache_active = false;
   236c8:	4b15      	ldr	r3, [pc, #84]	; (23720 <eeprom_emulator_init+0xdc>)
   236ca:	22c8      	movs	r2, #200	; 0xc8
   236cc:	2100      	movs	r1, #0
   236ce:	5499      	strb	r1, [r3, r2]

	/* Scan physical memory and re-create logical to physical page mapping
	 * table to locate logical pages of EEPROM data in physical FLASH */
	_eeprom_emulator_update_page_mapping();
   236d0:	4b14      	ldr	r3, [pc, #80]	; (23724 <eeprom_emulator_init+0xe0>)
   236d2:	4798      	blx	r3

	/* Could not find spare row - abort as the memory appears to be corrupt */
	if (_eeprom_instance.spare_row == EEPROM_INVALID_ROW_NUMBER) {
   236d4:	4b12      	ldr	r3, [pc, #72]	; (23720 <eeprom_emulator_init+0xdc>)
   236d6:	2287      	movs	r2, #135	; 0x87
   236d8:	5c9b      	ldrb	r3, [r3, r2]
   236da:	2b3f      	cmp	r3, #63	; 0x3f
   236dc:	d101      	bne.n	236e2 <eeprom_emulator_init+0x9e>
		return STATUS_ERR_BAD_FORMAT;
   236de:	231a      	movs	r3, #26
   236e0:	e014      	b.n	2370c <eeprom_emulator_init+0xc8>
	}

	/* Verify that the master page contains valid data for this service */
	error_code = _eeprom_emulator_verify_master_page();
   236e2:	2317      	movs	r3, #23
   236e4:	18fc      	adds	r4, r7, r3
   236e6:	4b10      	ldr	r3, [pc, #64]	; (23728 <eeprom_emulator_init+0xe4>)
   236e8:	4798      	blx	r3
   236ea:	0003      	movs	r3, r0
   236ec:	7023      	strb	r3, [r4, #0]
	if (error_code != STATUS_OK) {
   236ee:	2317      	movs	r3, #23
   236f0:	18fb      	adds	r3, r7, r3
   236f2:	781b      	ldrb	r3, [r3, #0]
   236f4:	2b00      	cmp	r3, #0
   236f6:	d003      	beq.n	23700 <eeprom_emulator_init+0xbc>
		return error_code;
   236f8:	2317      	movs	r3, #23
   236fa:	18fb      	adds	r3, r7, r3
   236fc:	781b      	ldrb	r3, [r3, #0]
   236fe:	e005      	b.n	2370c <eeprom_emulator_init+0xc8>
	}

	/* Mark initialization as complete */
	_eeprom_instance.initialized = true;
   23700:	4b07      	ldr	r3, [pc, #28]	; (23720 <eeprom_emulator_init+0xdc>)
   23702:	2201      	movs	r2, #1
   23704:	701a      	strb	r2, [r3, #0]

	return error_code;
   23706:	2317      	movs	r3, #23
   23708:	18fb      	adds	r3, r7, r3
   2370a:	781b      	ldrb	r3, [r3, #0]
}
   2370c:	0018      	movs	r0, r3
   2370e:	46bd      	mov	sp, r7
   23710:	b007      	add	sp, #28
   23712:	bd90      	pop	{r4, r7, pc}
   23714:	00022d31 	.word	0x00022d31
   23718:	0002270d 	.word	0x0002270d
   2371c:	00022bed 	.word	0x00022bed
   23720:	2000061c 	.word	0x2000061c
   23724:	00023111 	.word	0x00023111
   23728:	000235a5 	.word	0x000235a5

0002372c <eeprom_emulator_erase_memory>:
 *
 * Erases and re-initializes the emulated EEPROM memory space, destroying any
 * existing data.
 */
void eeprom_emulator_erase_memory(void)
{
   2372c:	b580      	push	{r7, lr}
   2372e:	af00      	add	r7, sp, #0
	/* Create new EEPROM memory block in EEPROM emulation section */
	_eeprom_emulator_format_memory();
   23730:	4b04      	ldr	r3, [pc, #16]	; (23744 <eeprom_emulator_erase_memory+0x18>)
   23732:	4798      	blx	r3

	/* Write EEPROM emulation master block */
	_eeprom_emulator_create_master_page();
   23734:	4b04      	ldr	r3, [pc, #16]	; (23748 <eeprom_emulator_erase_memory+0x1c>)
   23736:	4798      	blx	r3

	/* Map the newly created EEPROM memory block */
	_eeprom_emulator_update_page_mapping();
   23738:	4b04      	ldr	r3, [pc, #16]	; (2374c <eeprom_emulator_erase_memory+0x20>)
   2373a:	4798      	blx	r3
}
   2373c:	46c0      	nop			; (mov r8, r8)
   2373e:	46bd      	mov	sp, r7
   23740:	bd80      	pop	{r7, pc}
   23742:	46c0      	nop			; (mov r8, r8)
   23744:	00022ea1 	.word	0x00022ea1
   23748:	000234dd 	.word	0x000234dd
   2374c:	00023111 	.word	0x00023111

00023750 <eeprom_emulator_write_page>:
 *                                      EEPROM memory space was supplied
 */
enum status_code eeprom_emulator_write_page(
		const uint8_t logical_page,
		const uint8_t *const data)
{
   23750:	b590      	push	{r4, r7, lr}
   23752:	b085      	sub	sp, #20
   23754:	af00      	add	r7, sp, #0
   23756:	0002      	movs	r2, r0
   23758:	6039      	str	r1, [r7, #0]
   2375a:	1dfb      	adds	r3, r7, #7
   2375c:	701a      	strb	r2, [r3, #0]
	/* Ensure the emulated EEPROM has been initialized first */
	if (_eeprom_instance.initialized == false) {
   2375e:	4b38      	ldr	r3, [pc, #224]	; (23840 <eeprom_emulator_write_page+0xf0>)
   23760:	781b      	ldrb	r3, [r3, #0]
   23762:	2201      	movs	r2, #1
   23764:	4053      	eors	r3, r2
   23766:	b2db      	uxtb	r3, r3
   23768:	2b00      	cmp	r3, #0
   2376a:	d001      	beq.n	23770 <eeprom_emulator_write_page+0x20>
		return STATUS_ERR_NOT_INITIALIZED;
   2376c:	231f      	movs	r3, #31
   2376e:	e063      	b.n	23838 <eeprom_emulator_write_page+0xe8>
	}

	/* Make sure the write address is within the allowable address space */
	if (logical_page >= _eeprom_instance.logical_pages) {
   23770:	4b33      	ldr	r3, [pc, #204]	; (23840 <eeprom_emulator_write_page+0xf0>)
   23772:	7a9b      	ldrb	r3, [r3, #10]
   23774:	1dfa      	adds	r2, r7, #7
   23776:	7812      	ldrb	r2, [r2, #0]
   23778:	429a      	cmp	r2, r3
   2377a:	d301      	bcc.n	23780 <eeprom_emulator_write_page+0x30>
		return STATUS_ERR_BAD_ADDRESS;
   2377c:	2318      	movs	r3, #24
   2377e:	e05b      	b.n	23838 <eeprom_emulator_write_page+0xe8>
	}

	/* Check if the cache is active and the currently cached page is not the
	 * page that is being written (if not, we need to commit and cache the new
	 * page) */
	if ((_eeprom_instance.cache_active == true) &&
   23780:	4b2f      	ldr	r3, [pc, #188]	; (23840 <eeprom_emulator_write_page+0xf0>)
   23782:	22c8      	movs	r2, #200	; 0xc8
   23784:	5c9b      	ldrb	r3, [r3, r2]
   23786:	2b00      	cmp	r3, #0
   23788:	d008      	beq.n	2379c <eeprom_emulator_write_page+0x4c>
			(_eeprom_instance.cache.header.logical_page != logical_page)) {
   2378a:	4b2d      	ldr	r3, [pc, #180]	; (23840 <eeprom_emulator_write_page+0xf0>)
   2378c:	2288      	movs	r2, #136	; 0x88
   2378e:	5c9b      	ldrb	r3, [r3, r2]
	if ((_eeprom_instance.cache_active == true) &&
   23790:	1dfa      	adds	r2, r7, #7
   23792:	7812      	ldrb	r2, [r2, #0]
   23794:	429a      	cmp	r2, r3
   23796:	d001      	beq.n	2379c <eeprom_emulator_write_page+0x4c>
		/* Commit the currently cached data buffer to non-volatile memory */
		eeprom_emulator_commit_page_buffer();
   23798:	4b2a      	ldr	r3, [pc, #168]	; (23844 <eeprom_emulator_write_page+0xf4>)
   2379a:	4798      	blx	r3
	}

	/* Check if we have space in the current page location's physical row for
	 * a new version, and if so get the new page index */
	uint8_t new_page = 0;
   2379c:	230e      	movs	r3, #14
   2379e:	18fb      	adds	r3, r7, r3
   237a0:	2200      	movs	r2, #0
   237a2:	701a      	strb	r2, [r3, #0]
	bool page_spare  = _eeprom_emulator_is_page_free_on_row(
   237a4:	1dfb      	adds	r3, r7, #7
   237a6:	781b      	ldrb	r3, [r3, #0]
   237a8:	4a25      	ldr	r2, [pc, #148]	; (23840 <eeprom_emulator_write_page+0xf0>)
   237aa:	18d3      	adds	r3, r2, r3
   237ac:	7adb      	ldrb	r3, [r3, #11]
   237ae:	220f      	movs	r2, #15
   237b0:	18bc      	adds	r4, r7, r2
   237b2:	220e      	movs	r2, #14
   237b4:	18ba      	adds	r2, r7, r2
   237b6:	0011      	movs	r1, r2
   237b8:	0018      	movs	r0, r3
   237ba:	4b23      	ldr	r3, [pc, #140]	; (23848 <eeprom_emulator_write_page+0xf8>)
   237bc:	4798      	blx	r3
   237be:	0003      	movs	r3, r0
   237c0:	7023      	strb	r3, [r4, #0]
			_eeprom_instance.page_map[logical_page], &new_page);

	/* Check if the current row is full, and we need to swap it out with a
	 * spare row */
	if (page_spare == false) {
   237c2:	230f      	movs	r3, #15
   237c4:	18fb      	adds	r3, r7, r3
   237c6:	781b      	ldrb	r3, [r3, #0]
   237c8:	2201      	movs	r2, #1
   237ca:	4053      	eors	r3, r2
   237cc:	b2db      	uxtb	r3, r3
   237ce:	2b00      	cmp	r3, #0
   237d0:	d00e      	beq.n	237f0 <eeprom_emulator_write_page+0xa0>
		/* Move the other page we aren't writing that is stored in the same
		 * page to the new row, and replace the old current page with the
		 * new page contents (cache is updated to match) */
		_eeprom_emulator_move_data_to_spare(
				_eeprom_instance.page_map[logical_page] / NVMCTRL_ROW_PAGES,
   237d2:	1dfb      	adds	r3, r7, #7
   237d4:	781b      	ldrb	r3, [r3, #0]
   237d6:	4a1a      	ldr	r2, [pc, #104]	; (23840 <eeprom_emulator_write_page+0xf0>)
   237d8:	18d3      	adds	r3, r2, r3
   237da:	7adb      	ldrb	r3, [r3, #11]
		_eeprom_emulator_move_data_to_spare(
   237dc:	089b      	lsrs	r3, r3, #2
   237de:	b2d8      	uxtb	r0, r3
   237e0:	683a      	ldr	r2, [r7, #0]
   237e2:	1dfb      	adds	r3, r7, #7
   237e4:	781b      	ldrb	r3, [r3, #0]
   237e6:	0019      	movs	r1, r3
   237e8:	4b18      	ldr	r3, [pc, #96]	; (2384c <eeprom_emulator_write_page+0xfc>)
   237ea:	4798      	blx	r3
				logical_page,
				data);

		/* New data is now written and the cache is updated, exit */
		return STATUS_OK;
   237ec:	2300      	movs	r3, #0
   237ee:	e023      	b.n	23838 <eeprom_emulator_write_page+0xe8>
	}

	/* Update the page cache header section with the new page header */
	_eeprom_instance.cache.header.logical_page = logical_page;
   237f0:	4b13      	ldr	r3, [pc, #76]	; (23840 <eeprom_emulator_write_page+0xf0>)
   237f2:	1dfa      	adds	r2, r7, #7
   237f4:	2188      	movs	r1, #136	; 0x88
   237f6:	7812      	ldrb	r2, [r2, #0]
   237f8:	545a      	strb	r2, [r3, r1]

	/* Update the page cache contents with the new data */
	memcpy(&_eeprom_instance.cache.data,
   237fa:	4b11      	ldr	r3, [pc, #68]	; (23840 <eeprom_emulator_write_page+0xf0>)
   237fc:	228c      	movs	r2, #140	; 0x8c
   237fe:	6839      	ldr	r1, [r7, #0]
   23800:	189b      	adds	r3, r3, r2
   23802:	223c      	movs	r2, #60	; 0x3c
   23804:	0018      	movs	r0, r3
   23806:	4b12      	ldr	r3, [pc, #72]	; (23850 <eeprom_emulator_write_page+0x100>)
   23808:	4798      	blx	r3
			data,
			EEPROM_PAGE_SIZE);

	/* Fill the physical NVM buffer with the new data so that it can be quickly
	 * committed in the future if needed due to a low power condition */
	_eeprom_emulator_nvm_fill_cache(new_page, &_eeprom_instance.cache);
   2380a:	230e      	movs	r3, #14
   2380c:	18fb      	adds	r3, r7, r3
   2380e:	781b      	ldrb	r3, [r3, #0]
   23810:	b29b      	uxth	r3, r3
   23812:	4a10      	ldr	r2, [pc, #64]	; (23854 <eeprom_emulator_write_page+0x104>)
   23814:	0011      	movs	r1, r2
   23816:	0018      	movs	r0, r3
   23818:	4b0f      	ldr	r3, [pc, #60]	; (23858 <eeprom_emulator_write_page+0x108>)
   2381a:	4798      	blx	r3

	/* Update the cache parameters and mark the cache as active */
	_eeprom_instance.page_map[logical_page] = new_page;
   2381c:	1dfb      	adds	r3, r7, #7
   2381e:	781b      	ldrb	r3, [r3, #0]
   23820:	220e      	movs	r2, #14
   23822:	18ba      	adds	r2, r7, r2
   23824:	7811      	ldrb	r1, [r2, #0]
   23826:	4a06      	ldr	r2, [pc, #24]	; (23840 <eeprom_emulator_write_page+0xf0>)
   23828:	18d3      	adds	r3, r2, r3
   2382a:	1c0a      	adds	r2, r1, #0
   2382c:	72da      	strb	r2, [r3, #11]
	barrier(); // Enforce ordering to prevent incorrect cache state
	_eeprom_instance.cache_active           = true;
   2382e:	4b04      	ldr	r3, [pc, #16]	; (23840 <eeprom_emulator_write_page+0xf0>)
   23830:	22c8      	movs	r2, #200	; 0xc8
   23832:	2101      	movs	r1, #1
   23834:	5499      	strb	r1, [r3, r2]

	return STATUS_OK;
   23836:	2300      	movs	r3, #0
}
   23838:	0018      	movs	r0, r3
   2383a:	46bd      	mov	sp, r7
   2383c:	b005      	add	sp, #20
   2383e:	bd90      	pop	{r4, r7, pc}
   23840:	2000061c 	.word	0x2000061c
   23844:	000238f9 	.word	0x000238f9
   23848:	00023265 	.word	0x00023265
   2384c:	000232fd 	.word	0x000232fd
   23850:	00028b21 	.word	0x00028b21
   23854:	200006a4 	.word	0x200006a4
   23858:	00022db5 	.word	0x00022db5

0002385c <eeprom_emulator_read_page>:
 *                                      EEPROM memory space was supplied
 */
enum status_code eeprom_emulator_read_page(
		const uint8_t logical_page,
		uint8_t *const data)
{
   2385c:	b580      	push	{r7, lr}
   2385e:	b092      	sub	sp, #72	; 0x48
   23860:	af00      	add	r7, sp, #0
   23862:	0002      	movs	r2, r0
   23864:	6039      	str	r1, [r7, #0]
   23866:	1dfb      	adds	r3, r7, #7
   23868:	701a      	strb	r2, [r3, #0]
	/* Ensure the emulated EEPROM has been initialized first */
	if (_eeprom_instance.initialized == false) {
   2386a:	4b20      	ldr	r3, [pc, #128]	; (238ec <eeprom_emulator_read_page+0x90>)
   2386c:	781b      	ldrb	r3, [r3, #0]
   2386e:	2201      	movs	r2, #1
   23870:	4053      	eors	r3, r2
   23872:	b2db      	uxtb	r3, r3
   23874:	2b00      	cmp	r3, #0
   23876:	d001      	beq.n	2387c <eeprom_emulator_read_page+0x20>
		return STATUS_ERR_NOT_INITIALIZED;
   23878:	231f      	movs	r3, #31
   2387a:	e033      	b.n	238e4 <eeprom_emulator_read_page+0x88>
	}

	/* Make sure the read address is within the allowable address space */
	if (logical_page >= _eeprom_instance.logical_pages) {
   2387c:	4b1b      	ldr	r3, [pc, #108]	; (238ec <eeprom_emulator_read_page+0x90>)
   2387e:	7a9b      	ldrb	r3, [r3, #10]
   23880:	1dfa      	adds	r2, r7, #7
   23882:	7812      	ldrb	r2, [r2, #0]
   23884:	429a      	cmp	r2, r3
   23886:	d301      	bcc.n	2388c <eeprom_emulator_read_page+0x30>
		return STATUS_ERR_BAD_ADDRESS;
   23888:	2318      	movs	r3, #24
   2388a:	e02b      	b.n	238e4 <eeprom_emulator_read_page+0x88>
	}

	/* Check if the page to read is currently cached (and potentially out of
	 * sync/newer than the physical memory) */
	if ((_eeprom_instance.cache_active == true) &&
   2388c:	4b17      	ldr	r3, [pc, #92]	; (238ec <eeprom_emulator_read_page+0x90>)
   2388e:	22c8      	movs	r2, #200	; 0xc8
   23890:	5c9b      	ldrb	r3, [r3, r2]
   23892:	2b00      	cmp	r3, #0
   23894:	d010      	beq.n	238b8 <eeprom_emulator_read_page+0x5c>
		 (_eeprom_instance.cache.header.logical_page == logical_page)) {
   23896:	4b15      	ldr	r3, [pc, #84]	; (238ec <eeprom_emulator_read_page+0x90>)
   23898:	2288      	movs	r2, #136	; 0x88
   2389a:	5c9b      	ldrb	r3, [r3, r2]
	if ((_eeprom_instance.cache_active == true) &&
   2389c:	1dfa      	adds	r2, r7, #7
   2389e:	7812      	ldrb	r2, [r2, #0]
   238a0:	429a      	cmp	r2, r3
   238a2:	d109      	bne.n	238b8 <eeprom_emulator_read_page+0x5c>
		/* Copy the potentially newer cached data into the user buffer */
		memcpy(data, _eeprom_instance.cache.data, EEPROM_PAGE_SIZE);
   238a4:	6839      	ldr	r1, [r7, #0]
   238a6:	4b11      	ldr	r3, [pc, #68]	; (238ec <eeprom_emulator_read_page+0x90>)
   238a8:	228c      	movs	r2, #140	; 0x8c
   238aa:	0008      	movs	r0, r1
   238ac:	189b      	adds	r3, r3, r2
   238ae:	223c      	movs	r2, #60	; 0x3c
   238b0:	0019      	movs	r1, r3
   238b2:	4b0f      	ldr	r3, [pc, #60]	; (238f0 <eeprom_emulator_read_page+0x94>)
   238b4:	4798      	blx	r3
   238b6:	e014      	b.n	238e2 <eeprom_emulator_read_page+0x86>
	} else {
		struct _eeprom_page temp;

		/* Copy the data from non-volatile memory into the temporary buffer */
		_eeprom_emulator_nvm_read_page(
				_eeprom_instance.page_map[logical_page], &temp);
   238b8:	1dfb      	adds	r3, r7, #7
   238ba:	781b      	ldrb	r3, [r3, #0]
   238bc:	4a0b      	ldr	r2, [pc, #44]	; (238ec <eeprom_emulator_read_page+0x90>)
   238be:	18d3      	adds	r3, r2, r3
   238c0:	7adb      	ldrb	r3, [r3, #11]
		_eeprom_emulator_nvm_read_page(
   238c2:	b29b      	uxth	r3, r3
   238c4:	2208      	movs	r2, #8
   238c6:	18ba      	adds	r2, r7, r2
   238c8:	0011      	movs	r1, r2
   238ca:	0018      	movs	r0, r3
   238cc:	4b09      	ldr	r3, [pc, #36]	; (238f4 <eeprom_emulator_read_page+0x98>)
   238ce:	4798      	blx	r3

		/* Copy the data portion of the read page to the user's buffer */
		memcpy(data, temp.data, EEPROM_PAGE_SIZE);
   238d0:	683a      	ldr	r2, [r7, #0]
   238d2:	2308      	movs	r3, #8
   238d4:	18fb      	adds	r3, r7, r3
   238d6:	0010      	movs	r0, r2
   238d8:	3304      	adds	r3, #4
   238da:	223c      	movs	r2, #60	; 0x3c
   238dc:	0019      	movs	r1, r3
   238de:	4b04      	ldr	r3, [pc, #16]	; (238f0 <eeprom_emulator_read_page+0x94>)
   238e0:	4798      	blx	r3
	}

	return STATUS_OK;
   238e2:	2300      	movs	r3, #0
}
   238e4:	0018      	movs	r0, r3
   238e6:	46bd      	mov	sp, r7
   238e8:	b012      	add	sp, #72	; 0x48
   238ea:	bd80      	pop	{r7, pc}
   238ec:	2000061c 	.word	0x2000061c
   238f0:	00028b21 	.word	0x00028b21
   238f4:	00022e51 	.word	0x00022e51

000238f8 <eeprom_emulator_commit_page_buffer>:
 *       data loss.
 *
 * \return Status code indicating the status of the operation.
 */
enum status_code eeprom_emulator_commit_page_buffer(void)
{
   238f8:	b580      	push	{r7, lr}
   238fa:	b082      	sub	sp, #8
   238fc:	af00      	add	r7, sp, #0
	enum status_code error_code = STATUS_OK;
   238fe:	1dfb      	adds	r3, r7, #7
   23900:	2200      	movs	r2, #0
   23902:	701a      	strb	r2, [r3, #0]

	/* If cache is inactive, no need to commit anything to physical memory */
	if (_eeprom_instance.cache_active == false) {
   23904:	4b10      	ldr	r3, [pc, #64]	; (23948 <eeprom_emulator_commit_page_buffer+0x50>)
   23906:	22c8      	movs	r2, #200	; 0xc8
   23908:	5c9b      	ldrb	r3, [r3, r2]
   2390a:	2201      	movs	r2, #1
   2390c:	4053      	eors	r3, r2
   2390e:	b2db      	uxtb	r3, r3
   23910:	2b00      	cmp	r3, #0
   23912:	d001      	beq.n	23918 <eeprom_emulator_commit_page_buffer+0x20>
		return STATUS_OK;
   23914:	2300      	movs	r3, #0
   23916:	e013      	b.n	23940 <eeprom_emulator_commit_page_buffer+0x48>
	}

	uint8_t cached_logical_page = _eeprom_instance.cache.header.logical_page;
   23918:	1dbb      	adds	r3, r7, #6
   2391a:	4a0b      	ldr	r2, [pc, #44]	; (23948 <eeprom_emulator_commit_page_buffer+0x50>)
   2391c:	2188      	movs	r1, #136	; 0x88
   2391e:	5c52      	ldrb	r2, [r2, r1]
   23920:	701a      	strb	r2, [r3, #0]

	/* Perform the page write to commit the NVM page buffer to FLASH */
	_eeprom_emulator_nvm_commit_cache(
			_eeprom_instance.page_map[cached_logical_page]);
   23922:	1dbb      	adds	r3, r7, #6
   23924:	781b      	ldrb	r3, [r3, #0]
   23926:	4a08      	ldr	r2, [pc, #32]	; (23948 <eeprom_emulator_commit_page_buffer+0x50>)
   23928:	18d3      	adds	r3, r2, r3
   2392a:	7adb      	ldrb	r3, [r3, #11]
	_eeprom_emulator_nvm_commit_cache(
   2392c:	b29b      	uxth	r3, r3
   2392e:	0018      	movs	r0, r3
   23930:	4b06      	ldr	r3, [pc, #24]	; (2394c <eeprom_emulator_commit_page_buffer+0x54>)
   23932:	4798      	blx	r3

	barrier(); // Enforce ordering to prevent incorrect cache state
	_eeprom_instance.cache_active = false;
   23934:	4b04      	ldr	r3, [pc, #16]	; (23948 <eeprom_emulator_commit_page_buffer+0x50>)
   23936:	22c8      	movs	r2, #200	; 0xc8
   23938:	2100      	movs	r1, #0
   2393a:	5499      	strb	r1, [r3, r2]

	return error_code;
   2393c:	1dfb      	adds	r3, r7, #7
   2393e:	781b      	ldrb	r3, [r3, #0]
}
   23940:	0018      	movs	r0, r3
   23942:	46bd      	mov	sp, r7
   23944:	b002      	add	sp, #8
   23946:	bd80      	pop	{r7, pc}
   23948:	2000061c 	.word	0x2000061c
   2394c:	00022e05 	.word	0x00022e05

00023950 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
   23950:	b580      	push	{r7, lr}
   23952:	af00      	add	r7, sp, #0
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
   23954:	46c0      	nop			; (mov r8, r8)
   23956:	46bd      	mov	sp, r7
   23958:	bd80      	pop	{r7, pc}
	...

0002395c <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
   2395c:	b580      	push	{r7, lr}
   2395e:	b082      	sub	sp, #8
   23960:	af00      	add	r7, sp, #0
	if (cpu_irq_critical_section_counter == 0) {
   23962:	4b10      	ldr	r3, [pc, #64]	; (239a4 <cpu_irq_enter_critical+0x48>)
   23964:	681b      	ldr	r3, [r3, #0]
   23966:	2b00      	cmp	r3, #0
   23968:	d112      	bne.n	23990 <cpu_irq_enter_critical+0x34>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   2396a:	f3ef 8310 	mrs	r3, PRIMASK
   2396e:	607b      	str	r3, [r7, #4]
  return(result);
   23970:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
   23972:	2b00      	cmp	r3, #0
   23974:	d109      	bne.n	2398a <cpu_irq_enter_critical+0x2e>
  __ASM volatile ("cpsid i" : : : "memory");
   23976:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
   23978:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
   2397c:	4b0a      	ldr	r3, [pc, #40]	; (239a8 <cpu_irq_enter_critical+0x4c>)
   2397e:	2200      	movs	r2, #0
   23980:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
   23982:	4b0a      	ldr	r3, [pc, #40]	; (239ac <cpu_irq_enter_critical+0x50>)
   23984:	2201      	movs	r2, #1
   23986:	701a      	strb	r2, [r3, #0]
   23988:	e002      	b.n	23990 <cpu_irq_enter_critical+0x34>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
   2398a:	4b08      	ldr	r3, [pc, #32]	; (239ac <cpu_irq_enter_critical+0x50>)
   2398c:	2200      	movs	r2, #0
   2398e:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
   23990:	4b04      	ldr	r3, [pc, #16]	; (239a4 <cpu_irq_enter_critical+0x48>)
   23992:	681b      	ldr	r3, [r3, #0]
   23994:	1c5a      	adds	r2, r3, #1
   23996:	4b03      	ldr	r3, [pc, #12]	; (239a4 <cpu_irq_enter_critical+0x48>)
   23998:	601a      	str	r2, [r3, #0]
}
   2399a:	46c0      	nop			; (mov r8, r8)
   2399c:	46bd      	mov	sp, r7
   2399e:	b002      	add	sp, #8
   239a0:	bd80      	pop	{r7, pc}
   239a2:	46c0      	nop			; (mov r8, r8)
   239a4:	200006e8 	.word	0x200006e8
   239a8:	20000028 	.word	0x20000028
   239ac:	200006ec 	.word	0x200006ec

000239b0 <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
   239b0:	b580      	push	{r7, lr}
   239b2:	af00      	add	r7, sp, #0
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
   239b4:	4b0b      	ldr	r3, [pc, #44]	; (239e4 <cpu_irq_leave_critical+0x34>)
   239b6:	681b      	ldr	r3, [r3, #0]
   239b8:	1e5a      	subs	r2, r3, #1
   239ba:	4b0a      	ldr	r3, [pc, #40]	; (239e4 <cpu_irq_leave_critical+0x34>)
   239bc:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
   239be:	4b09      	ldr	r3, [pc, #36]	; (239e4 <cpu_irq_leave_critical+0x34>)
   239c0:	681b      	ldr	r3, [r3, #0]
   239c2:	2b00      	cmp	r3, #0
   239c4:	d10a      	bne.n	239dc <cpu_irq_leave_critical+0x2c>
   239c6:	4b08      	ldr	r3, [pc, #32]	; (239e8 <cpu_irq_leave_critical+0x38>)
   239c8:	781b      	ldrb	r3, [r3, #0]
   239ca:	b2db      	uxtb	r3, r3
   239cc:	2b00      	cmp	r3, #0
   239ce:	d005      	beq.n	239dc <cpu_irq_leave_critical+0x2c>
		cpu_irq_enable();
   239d0:	4b06      	ldr	r3, [pc, #24]	; (239ec <cpu_irq_leave_critical+0x3c>)
   239d2:	2201      	movs	r2, #1
   239d4:	701a      	strb	r2, [r3, #0]
   239d6:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   239da:	b662      	cpsie	i
	}
}
   239dc:	46c0      	nop			; (mov r8, r8)
   239de:	46bd      	mov	sp, r7
   239e0:	bd80      	pop	{r7, pc}
   239e2:	46c0      	nop			; (mov r8, r8)
   239e4:	200006e8 	.word	0x200006e8
   239e8:	200006ec 	.word	0x200006ec
   239ec:	20000028 	.word	0x20000028

000239f0 <system_gclk_gen_get_config_defaults>:
{
   239f0:	b580      	push	{r7, lr}
   239f2:	b082      	sub	sp, #8
   239f4:	af00      	add	r7, sp, #0
   239f6:	6078      	str	r0, [r7, #4]
	config->division_factor    = 1;
   239f8:	687b      	ldr	r3, [r7, #4]
   239fa:	2201      	movs	r2, #1
   239fc:	605a      	str	r2, [r3, #4]
	config->high_when_disabled = false;
   239fe:	687b      	ldr	r3, [r7, #4]
   23a00:	2200      	movs	r2, #0
   23a02:	705a      	strb	r2, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
   23a04:	687b      	ldr	r3, [r7, #4]
   23a06:	2206      	movs	r2, #6
   23a08:	701a      	strb	r2, [r3, #0]
	config->run_in_standby     = false;
   23a0a:	687b      	ldr	r3, [r7, #4]
   23a0c:	2200      	movs	r2, #0
   23a0e:	721a      	strb	r2, [r3, #8]
	config->output_enable      = false;
   23a10:	687b      	ldr	r3, [r7, #4]
   23a12:	2200      	movs	r2, #0
   23a14:	725a      	strb	r2, [r3, #9]
}
   23a16:	46c0      	nop			; (mov r8, r8)
   23a18:	46bd      	mov	sp, r7
   23a1a:	b002      	add	sp, #8
   23a1c:	bd80      	pop	{r7, pc}

00023a1e <system_gclk_chan_get_config_defaults>:
{
   23a1e:	b580      	push	{r7, lr}
   23a20:	b082      	sub	sp, #8
   23a22:	af00      	add	r7, sp, #0
   23a24:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   23a26:	687b      	ldr	r3, [r7, #4]
   23a28:	2200      	movs	r2, #0
   23a2a:	701a      	strb	r2, [r3, #0]
}
   23a2c:	46c0      	nop			; (mov r8, r8)
   23a2e:	46bd      	mov	sp, r7
   23a30:	b002      	add	sp, #8
   23a32:	bd80      	pop	{r7, pc}

00023a34 <system_clock_source_xosc32k_get_config_defaults>:
{
   23a34:	b580      	push	{r7, lr}
   23a36:	b082      	sub	sp, #8
   23a38:	af00      	add	r7, sp, #0
   23a3a:	6078      	str	r0, [r7, #4]
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
   23a3c:	687b      	ldr	r3, [r7, #4]
   23a3e:	2200      	movs	r2, #0
   23a40:	701a      	strb	r2, [r3, #0]
	config->startup_time        = SYSTEM_XOSC32K_STARTUP_16384;
   23a42:	687b      	ldr	r3, [r7, #4]
   23a44:	2204      	movs	r2, #4
   23a46:	705a      	strb	r2, [r3, #1]
	config->auto_gain_control   = false;
   23a48:	687b      	ldr	r3, [r7, #4]
   23a4a:	2200      	movs	r2, #0
   23a4c:	709a      	strb	r2, [r3, #2]
	config->frequency           = 32768UL;
   23a4e:	687b      	ldr	r3, [r7, #4]
   23a50:	2280      	movs	r2, #128	; 0x80
   23a52:	0212      	lsls	r2, r2, #8
   23a54:	609a      	str	r2, [r3, #8]
	config->enable_1khz_output  = false;
   23a56:	687b      	ldr	r3, [r7, #4]
   23a58:	2200      	movs	r2, #0
   23a5a:	70da      	strb	r2, [r3, #3]
	config->enable_32khz_output = true;
   23a5c:	687b      	ldr	r3, [r7, #4]
   23a5e:	2201      	movs	r2, #1
   23a60:	711a      	strb	r2, [r3, #4]
	config->run_in_standby      = false;
   23a62:	687b      	ldr	r3, [r7, #4]
   23a64:	2200      	movs	r2, #0
   23a66:	731a      	strb	r2, [r3, #12]
	config->on_demand           = true;
   23a68:	687b      	ldr	r3, [r7, #4]
   23a6a:	2201      	movs	r2, #1
   23a6c:	735a      	strb	r2, [r3, #13]
	config->write_once          = false;
   23a6e:	687b      	ldr	r3, [r7, #4]
   23a70:	2200      	movs	r2, #0
   23a72:	739a      	strb	r2, [r3, #14]
}
   23a74:	46c0      	nop			; (mov r8, r8)
   23a76:	46bd      	mov	sp, r7
   23a78:	b002      	add	sp, #8
   23a7a:	bd80      	pop	{r7, pc}

00023a7c <system_clock_source_osc8m_get_config_defaults>:
{
   23a7c:	b580      	push	{r7, lr}
   23a7e:	b082      	sub	sp, #8
   23a80:	af00      	add	r7, sp, #0
   23a82:	6078      	str	r0, [r7, #4]
	config->prescaler       = SYSTEM_OSC8M_DIV_8;
   23a84:	687b      	ldr	r3, [r7, #4]
   23a86:	2203      	movs	r2, #3
   23a88:	701a      	strb	r2, [r3, #0]
	config->run_in_standby  = false;
   23a8a:	687b      	ldr	r3, [r7, #4]
   23a8c:	2200      	movs	r2, #0
   23a8e:	705a      	strb	r2, [r3, #1]
	config->on_demand       = true;
   23a90:	687b      	ldr	r3, [r7, #4]
   23a92:	2201      	movs	r2, #1
   23a94:	709a      	strb	r2, [r3, #2]
}
   23a96:	46c0      	nop			; (mov r8, r8)
   23a98:	46bd      	mov	sp, r7
   23a9a:	b002      	add	sp, #8
   23a9c:	bd80      	pop	{r7, pc}

00023a9e <system_clock_source_dfll_get_config_defaults>:
{
   23a9e:	b580      	push	{r7, lr}
   23aa0:	b082      	sub	sp, #8
   23aa2:	af00      	add	r7, sp, #0
   23aa4:	6078      	str	r0, [r7, #4]
	config->loop_mode       = SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN;
   23aa6:	687b      	ldr	r3, [r7, #4]
   23aa8:	2200      	movs	r2, #0
   23aaa:	701a      	strb	r2, [r3, #0]
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
   23aac:	687b      	ldr	r3, [r7, #4]
   23aae:	2200      	movs	r2, #0
   23ab0:	805a      	strh	r2, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
   23ab2:	687b      	ldr	r3, [r7, #4]
   23ab4:	2200      	movs	r2, #0
   23ab6:	809a      	strh	r2, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
   23ab8:	687b      	ldr	r3, [r7, #4]
   23aba:	2200      	movs	r2, #0
   23abc:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
   23abe:	687b      	ldr	r3, [r7, #4]
   23ac0:	2200      	movs	r2, #0
   23ac2:	71da      	strb	r2, [r3, #7]
	config->on_demand       = true;
   23ac4:	687b      	ldr	r3, [r7, #4]
   23ac6:	2201      	movs	r2, #1
   23ac8:	705a      	strb	r2, [r3, #1]
	config->coarse_value    = 0x1f / 4; /* Midpoint */
   23aca:	687b      	ldr	r3, [r7, #4]
   23acc:	2207      	movs	r2, #7
   23ace:	721a      	strb	r2, [r3, #8]
	config->fine_value      = 0xff / 4; /* Midpoint */
   23ad0:	687b      	ldr	r3, [r7, #4]
   23ad2:	223f      	movs	r2, #63	; 0x3f
   23ad4:	815a      	strh	r2, [r3, #10]
	config->coarse_max_step = 1;
   23ad6:	687b      	ldr	r3, [r7, #4]
   23ad8:	2201      	movs	r2, #1
   23ada:	731a      	strb	r2, [r3, #12]
	config->fine_max_step   = 1;
   23adc:	687b      	ldr	r3, [r7, #4]
   23ade:	2201      	movs	r2, #1
   23ae0:	81da      	strh	r2, [r3, #14]
	config->multiply_factor = 6; /* Multiply 8MHz by 6 to get 48MHz */
   23ae2:	687b      	ldr	r3, [r7, #4]
   23ae4:	2206      	movs	r2, #6
   23ae6:	821a      	strh	r2, [r3, #16]
}
   23ae8:	46c0      	nop			; (mov r8, r8)
   23aea:	46bd      	mov	sp, r7
   23aec:	b002      	add	sp, #8
   23aee:	bd80      	pop	{r7, pc}

00023af0 <system_cpu_clock_set_divider>:
{
   23af0:	b580      	push	{r7, lr}
   23af2:	b082      	sub	sp, #8
   23af4:	af00      	add	r7, sp, #0
   23af6:	0002      	movs	r2, r0
   23af8:	1dfb      	adds	r3, r7, #7
   23afa:	701a      	strb	r2, [r3, #0]
	PM->CPUSEL.reg = (uint32_t)divider;
   23afc:	4a03      	ldr	r2, [pc, #12]	; (23b0c <system_cpu_clock_set_divider+0x1c>)
   23afe:	1dfb      	adds	r3, r7, #7
   23b00:	781b      	ldrb	r3, [r3, #0]
   23b02:	7213      	strb	r3, [r2, #8]
}
   23b04:	46c0      	nop			; (mov r8, r8)
   23b06:	46bd      	mov	sp, r7
   23b08:	b002      	add	sp, #8
   23b0a:	bd80      	pop	{r7, pc}
   23b0c:	40000400 	.word	0x40000400

00023b10 <system_apb_clock_set_divider>:
{
   23b10:	b580      	push	{r7, lr}
   23b12:	b082      	sub	sp, #8
   23b14:	af00      	add	r7, sp, #0
   23b16:	0002      	movs	r2, r0
   23b18:	1dfb      	adds	r3, r7, #7
   23b1a:	701a      	strb	r2, [r3, #0]
   23b1c:	1dbb      	adds	r3, r7, #6
   23b1e:	1c0a      	adds	r2, r1, #0
   23b20:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   23b22:	1dfb      	adds	r3, r7, #7
   23b24:	781b      	ldrb	r3, [r3, #0]
   23b26:	2b01      	cmp	r3, #1
   23b28:	d008      	beq.n	23b3c <system_apb_clock_set_divider+0x2c>
   23b2a:	2b02      	cmp	r3, #2
   23b2c:	d00b      	beq.n	23b46 <system_apb_clock_set_divider+0x36>
   23b2e:	2b00      	cmp	r3, #0
   23b30:	d10e      	bne.n	23b50 <system_apb_clock_set_divider+0x40>
			PM->APBASEL.reg = (uint32_t)divider;
   23b32:	4a0b      	ldr	r2, [pc, #44]	; (23b60 <system_apb_clock_set_divider+0x50>)
   23b34:	1dbb      	adds	r3, r7, #6
   23b36:	781b      	ldrb	r3, [r3, #0]
   23b38:	7253      	strb	r3, [r2, #9]
			break;
   23b3a:	e00b      	b.n	23b54 <system_apb_clock_set_divider+0x44>
			PM->APBBSEL.reg = (uint32_t)divider;
   23b3c:	4a08      	ldr	r2, [pc, #32]	; (23b60 <system_apb_clock_set_divider+0x50>)
   23b3e:	1dbb      	adds	r3, r7, #6
   23b40:	781b      	ldrb	r3, [r3, #0]
   23b42:	7293      	strb	r3, [r2, #10]
			break;
   23b44:	e006      	b.n	23b54 <system_apb_clock_set_divider+0x44>
			PM->APBCSEL.reg = (uint32_t)divider;
   23b46:	4a06      	ldr	r2, [pc, #24]	; (23b60 <system_apb_clock_set_divider+0x50>)
   23b48:	1dbb      	adds	r3, r7, #6
   23b4a:	781b      	ldrb	r3, [r3, #0]
   23b4c:	72d3      	strb	r3, [r2, #11]
			break;
   23b4e:	e001      	b.n	23b54 <system_apb_clock_set_divider+0x44>
			return STATUS_ERR_INVALID_ARG;
   23b50:	2317      	movs	r3, #23
   23b52:	e000      	b.n	23b56 <system_apb_clock_set_divider+0x46>
	return STATUS_OK;
   23b54:	2300      	movs	r3, #0
}
   23b56:	0018      	movs	r0, r3
   23b58:	46bd      	mov	sp, r7
   23b5a:	b002      	add	sp, #8
   23b5c:	bd80      	pop	{r7, pc}
   23b5e:	46c0      	nop			; (mov r8, r8)
   23b60:	40000400 	.word	0x40000400

00023b64 <system_flash_set_waitstates>:
 * can be found in the electrical characteristics of the device.
 *
 * \param[in] wait_states Number of wait states to use for internal flash
 */
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
   23b64:	b580      	push	{r7, lr}
   23b66:	b082      	sub	sp, #8
   23b68:	af00      	add	r7, sp, #0
   23b6a:	0002      	movs	r2, r0
   23b6c:	1dfb      	adds	r3, r7, #7
   23b6e:	701a      	strb	r2, [r3, #0]
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
   23b70:	4a08      	ldr	r2, [pc, #32]	; (23b94 <system_flash_set_waitstates+0x30>)
   23b72:	1dfb      	adds	r3, r7, #7
   23b74:	781b      	ldrb	r3, [r3, #0]
   23b76:	210f      	movs	r1, #15
   23b78:	400b      	ands	r3, r1
   23b7a:	b2d9      	uxtb	r1, r3
   23b7c:	6853      	ldr	r3, [r2, #4]
   23b7e:	200f      	movs	r0, #15
   23b80:	4001      	ands	r1, r0
   23b82:	0049      	lsls	r1, r1, #1
   23b84:	201e      	movs	r0, #30
   23b86:	4383      	bics	r3, r0
   23b88:	430b      	orrs	r3, r1
   23b8a:	6053      	str	r3, [r2, #4]
}
   23b8c:	46c0      	nop			; (mov r8, r8)
   23b8e:	46bd      	mov	sp, r7
   23b90:	b002      	add	sp, #8
   23b92:	bd80      	pop	{r7, pc}
   23b94:	41004000 	.word	0x41004000

00023b98 <_system_dfll_wait_for_sync>:
/**
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
   23b98:	b580      	push	{r7, lr}
   23b9a:	af00      	add	r7, sp, #0
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
   23b9c:	46c0      	nop			; (mov r8, r8)
   23b9e:	4b04      	ldr	r3, [pc, #16]	; (23bb0 <_system_dfll_wait_for_sync+0x18>)
   23ba0:	68db      	ldr	r3, [r3, #12]
   23ba2:	2210      	movs	r2, #16
   23ba4:	4013      	ands	r3, r2
   23ba6:	d0fa      	beq.n	23b9e <_system_dfll_wait_for_sync+0x6>
		/* Wait for DFLL sync */
	}
}
   23ba8:	46c0      	nop			; (mov r8, r8)
   23baa:	46bd      	mov	sp, r7
   23bac:	bd80      	pop	{r7, pc}
   23bae:	46c0      	nop			; (mov r8, r8)
   23bb0:	40000800 	.word	0x40000800

00023bb4 <_system_clock_source_dfll_set_config_errata_9905>:
		/* Wait for OSC32K sync */
	}
}

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{
   23bb4:	b580      	push	{r7, lr}
   23bb6:	af00      	add	r7, sp, #0

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
   23bb8:	4b0c      	ldr	r3, [pc, #48]	; (23bec <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   23bba:	2202      	movs	r2, #2
   23bbc:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
   23bbe:	4b0c      	ldr	r3, [pc, #48]	; (23bf0 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
   23bc0:	4798      	blx	r3

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
   23bc2:	4a0a      	ldr	r2, [pc, #40]	; (23bec <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   23bc4:	4b0b      	ldr	r3, [pc, #44]	; (23bf4 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
   23bc6:	689b      	ldr	r3, [r3, #8]
   23bc8:	62d3      	str	r3, [r2, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
   23bca:	4a08      	ldr	r2, [pc, #32]	; (23bec <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   23bcc:	4b09      	ldr	r3, [pc, #36]	; (23bf4 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
   23bce:	685b      	ldr	r3, [r3, #4]
   23bd0:	6293      	str	r3, [r2, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
   23bd2:	4b06      	ldr	r3, [pc, #24]	; (23bec <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   23bd4:	2200      	movs	r2, #0
   23bd6:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
   23bd8:	4b05      	ldr	r3, [pc, #20]	; (23bf0 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
   23bda:	4798      	blx	r3
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
   23bdc:	4a03      	ldr	r2, [pc, #12]	; (23bec <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   23bde:	4b05      	ldr	r3, [pc, #20]	; (23bf4 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
   23be0:	681b      	ldr	r3, [r3, #0]
   23be2:	b29b      	uxth	r3, r3
   23be4:	8493      	strh	r3, [r2, #36]	; 0x24
}
   23be6:	46c0      	nop			; (mov r8, r8)
   23be8:	46bd      	mov	sp, r7
   23bea:	bd80      	pop	{r7, pc}
   23bec:	40000800 	.word	0x40000800
   23bf0:	00023b99 	.word	0x00023b99
   23bf4:	200006f0 	.word	0x200006f0

00023bf8 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
   23bf8:	b580      	push	{r7, lr}
   23bfa:	b082      	sub	sp, #8
   23bfc:	af00      	add	r7, sp, #0
   23bfe:	0002      	movs	r2, r0
   23c00:	1dfb      	adds	r3, r7, #7
   23c02:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
   23c04:	1dfb      	adds	r3, r7, #7
   23c06:	781b      	ldrb	r3, [r3, #0]
   23c08:	2b08      	cmp	r3, #8
   23c0a:	d841      	bhi.n	23c90 <system_clock_source_get_hz+0x98>
   23c0c:	009a      	lsls	r2, r3, #2
   23c0e:	4b23      	ldr	r3, [pc, #140]	; (23c9c <system_clock_source_get_hz+0xa4>)
   23c10:	18d3      	adds	r3, r2, r3
   23c12:	681b      	ldr	r3, [r3, #0]
   23c14:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
   23c16:	4b22      	ldr	r3, [pc, #136]	; (23ca0 <system_clock_source_get_hz+0xa8>)
   23c18:	691b      	ldr	r3, [r3, #16]
   23c1a:	e03a      	b.n	23c92 <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
   23c1c:	4b21      	ldr	r3, [pc, #132]	; (23ca4 <system_clock_source_get_hz+0xac>)
   23c1e:	6a1b      	ldr	r3, [r3, #32]
   23c20:	059b      	lsls	r3, r3, #22
   23c22:	0f9b      	lsrs	r3, r3, #30
   23c24:	b2db      	uxtb	r3, r3
   23c26:	001a      	movs	r2, r3
   23c28:	4b1f      	ldr	r3, [pc, #124]	; (23ca8 <system_clock_source_get_hz+0xb0>)
   23c2a:	40d3      	lsrs	r3, r2
   23c2c:	e031      	b.n	23c92 <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
   23c2e:	2380      	movs	r3, #128	; 0x80
   23c30:	021b      	lsls	r3, r3, #8
   23c32:	e02e      	b.n	23c92 <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;
   23c34:	2380      	movs	r3, #128	; 0x80
   23c36:	021b      	lsls	r3, r3, #8
   23c38:	e02b      	b.n	23c92 <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
   23c3a:	4b19      	ldr	r3, [pc, #100]	; (23ca0 <system_clock_source_get_hz+0xa8>)
   23c3c:	695b      	ldr	r3, [r3, #20]
   23c3e:	e028      	b.n	23c92 <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
   23c40:	4b17      	ldr	r3, [pc, #92]	; (23ca0 <system_clock_source_get_hz+0xa8>)
   23c42:	681b      	ldr	r3, [r3, #0]
   23c44:	2202      	movs	r2, #2
   23c46:	4013      	ands	r3, r2
   23c48:	d101      	bne.n	23c4e <system_clock_source_get_hz+0x56>
			return 0;
   23c4a:	2300      	movs	r3, #0
   23c4c:	e021      	b.n	23c92 <system_clock_source_get_hz+0x9a>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();
   23c4e:	4b17      	ldr	r3, [pc, #92]	; (23cac <system_clock_source_get_hz+0xb4>)
   23c50:	4798      	blx	r3

		/* Check if operating in closed loop (USB) mode */
		switch(_system_clock_inst.dfll.control &
   23c52:	4b13      	ldr	r3, [pc, #76]	; (23ca0 <system_clock_source_get_hz+0xa8>)
   23c54:	681b      	ldr	r3, [r3, #0]
   23c56:	2224      	movs	r2, #36	; 0x24
   23c58:	4013      	ands	r3, r2
   23c5a:	2b04      	cmp	r3, #4
   23c5c:	d109      	bne.n	23c72 <system_clock_source_get_hz+0x7a>
				(SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_USBCRM)) {
		case SYSCTRL_DFLLCTRL_MODE:
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
   23c5e:	2000      	movs	r0, #0
   23c60:	4b13      	ldr	r3, [pc, #76]	; (23cb0 <system_clock_source_get_hz+0xb8>)
   23c62:	4798      	blx	r3
   23c64:	0002      	movs	r2, r0
					(_system_clock_inst.dfll.mul & 0xffff);
   23c66:	4b0e      	ldr	r3, [pc, #56]	; (23ca0 <system_clock_source_get_hz+0xa8>)
   23c68:	689b      	ldr	r3, [r3, #8]
   23c6a:	041b      	lsls	r3, r3, #16
   23c6c:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
   23c6e:	4353      	muls	r3, r2
   23c70:	e00f      	b.n	23c92 <system_clock_source_get_hz+0x9a>
		default:
			return 48000000UL;
   23c72:	4b10      	ldr	r3, [pc, #64]	; (23cb4 <system_clock_source_get_hz+0xbc>)
   23c74:	e00d      	b.n	23c92 <system_clock_source_get_hz+0x9a>
		}

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
   23c76:	4a0b      	ldr	r2, [pc, #44]	; (23ca4 <system_clock_source_get_hz+0xac>)
   23c78:	2350      	movs	r3, #80	; 0x50
   23c7a:	5cd3      	ldrb	r3, [r2, r3]
   23c7c:	b2db      	uxtb	r3, r3
   23c7e:	001a      	movs	r2, r3
   23c80:	2304      	movs	r3, #4
   23c82:	4013      	ands	r3, r2
   23c84:	d101      	bne.n	23c8a <system_clock_source_get_hz+0x92>
			return 0;
   23c86:	2300      	movs	r3, #0
   23c88:	e003      	b.n	23c92 <system_clock_source_get_hz+0x9a>
		}

		return _system_clock_inst.dpll.frequency;
   23c8a:	4b05      	ldr	r3, [pc, #20]	; (23ca0 <system_clock_source_get_hz+0xa8>)
   23c8c:	68db      	ldr	r3, [r3, #12]
   23c8e:	e000      	b.n	23c92 <system_clock_source_get_hz+0x9a>
#endif

	default:
		return 0;
   23c90:	2300      	movs	r3, #0
	}
}
   23c92:	0018      	movs	r0, r3
   23c94:	46bd      	mov	sp, r7
   23c96:	b002      	add	sp, #8
   23c98:	bd80      	pop	{r7, pc}
   23c9a:	46c0      	nop			; (mov r8, r8)
   23c9c:	0002aa6c 	.word	0x0002aa6c
   23ca0:	200006f0 	.word	0x200006f0
   23ca4:	40000800 	.word	0x40000800
   23ca8:	007a1200 	.word	0x007a1200
   23cac:	00023b99 	.word	0x00023b99
   23cb0:	00024839 	.word	0x00024839
   23cb4:	02dc6c00 	.word	0x02dc6c00

00023cb8 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
   23cb8:	b580      	push	{r7, lr}
   23cba:	b084      	sub	sp, #16
   23cbc:	af00      	add	r7, sp, #0
   23cbe:	6078      	str	r0, [r7, #4]
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
   23cc0:	4b1a      	ldr	r3, [pc, #104]	; (23d2c <system_clock_source_osc8m_set_config+0x74>)
   23cc2:	6a1b      	ldr	r3, [r3, #32]
   23cc4:	60fb      	str	r3, [r7, #12]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
   23cc6:	687b      	ldr	r3, [r7, #4]
   23cc8:	781b      	ldrb	r3, [r3, #0]
   23cca:	1c1a      	adds	r2, r3, #0
   23ccc:	2303      	movs	r3, #3
   23cce:	4013      	ands	r3, r2
   23cd0:	b2da      	uxtb	r2, r3
   23cd2:	230d      	movs	r3, #13
   23cd4:	18fb      	adds	r3, r7, r3
   23cd6:	2103      	movs	r1, #3
   23cd8:	400a      	ands	r2, r1
   23cda:	0010      	movs	r0, r2
   23cdc:	781a      	ldrb	r2, [r3, #0]
   23cde:	2103      	movs	r1, #3
   23ce0:	438a      	bics	r2, r1
   23ce2:	1c11      	adds	r1, r2, #0
   23ce4:	1c02      	adds	r2, r0, #0
   23ce6:	430a      	orrs	r2, r1
   23ce8:	701a      	strb	r2, [r3, #0]
	temp.bit.ONDEMAND = config->on_demand;
   23cea:	687b      	ldr	r3, [r7, #4]
   23cec:	789a      	ldrb	r2, [r3, #2]
   23cee:	230c      	movs	r3, #12
   23cf0:	18fb      	adds	r3, r7, r3
   23cf2:	01d0      	lsls	r0, r2, #7
   23cf4:	781a      	ldrb	r2, [r3, #0]
   23cf6:	217f      	movs	r1, #127	; 0x7f
   23cf8:	400a      	ands	r2, r1
   23cfa:	1c11      	adds	r1, r2, #0
   23cfc:	1c02      	adds	r2, r0, #0
   23cfe:	430a      	orrs	r2, r1
   23d00:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
   23d02:	687b      	ldr	r3, [r7, #4]
   23d04:	785a      	ldrb	r2, [r3, #1]
   23d06:	230c      	movs	r3, #12
   23d08:	18fb      	adds	r3, r7, r3
   23d0a:	2101      	movs	r1, #1
   23d0c:	400a      	ands	r2, r1
   23d0e:	0190      	lsls	r0, r2, #6
   23d10:	781a      	ldrb	r2, [r3, #0]
   23d12:	2140      	movs	r1, #64	; 0x40
   23d14:	438a      	bics	r2, r1
   23d16:	1c11      	adds	r1, r2, #0
   23d18:	1c02      	adds	r2, r0, #0
   23d1a:	430a      	orrs	r2, r1
   23d1c:	701a      	strb	r2, [r3, #0]

	SYSCTRL->OSC8M = temp;
   23d1e:	4b03      	ldr	r3, [pc, #12]	; (23d2c <system_clock_source_osc8m_set_config+0x74>)
   23d20:	68fa      	ldr	r2, [r7, #12]
   23d22:	621a      	str	r2, [r3, #32]
}
   23d24:	46c0      	nop			; (mov r8, r8)
   23d26:	46bd      	mov	sp, r7
   23d28:	b004      	add	sp, #16
   23d2a:	bd80      	pop	{r7, pc}
   23d2c:	40000800 	.word	0x40000800

00023d30 <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
   23d30:	b580      	push	{r7, lr}
   23d32:	b084      	sub	sp, #16
   23d34:	af00      	add	r7, sp, #0
   23d36:	6078      	str	r0, [r7, #4]
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
   23d38:	4a43      	ldr	r2, [pc, #268]	; (23e48 <system_clock_source_xosc32k_set_config+0x118>)
   23d3a:	230c      	movs	r3, #12
   23d3c:	18fb      	adds	r3, r7, r3
   23d3e:	8a92      	ldrh	r2, [r2, #20]
   23d40:	801a      	strh	r2, [r3, #0]

	temp.bit.STARTUP = config->startup_time;
   23d42:	687b      	ldr	r3, [r7, #4]
   23d44:	785b      	ldrb	r3, [r3, #1]
   23d46:	1c1a      	adds	r2, r3, #0
   23d48:	2307      	movs	r3, #7
   23d4a:	4013      	ands	r3, r2
   23d4c:	b2da      	uxtb	r2, r3
   23d4e:	230c      	movs	r3, #12
   23d50:	18fb      	adds	r3, r7, r3
   23d52:	2107      	movs	r1, #7
   23d54:	400a      	ands	r2, r1
   23d56:	0010      	movs	r0, r2
   23d58:	785a      	ldrb	r2, [r3, #1]
   23d5a:	2107      	movs	r1, #7
   23d5c:	438a      	bics	r2, r1
   23d5e:	1c11      	adds	r1, r2, #0
   23d60:	1c02      	adds	r2, r0, #0
   23d62:	430a      	orrs	r2, r1
   23d64:	705a      	strb	r2, [r3, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
   23d66:	687b      	ldr	r3, [r7, #4]
   23d68:	781b      	ldrb	r3, [r3, #0]
   23d6a:	2b00      	cmp	r3, #0
   23d6c:	d106      	bne.n	23d7c <system_clock_source_xosc32k_set_config+0x4c>
		temp.bit.XTALEN = 1;
   23d6e:	230c      	movs	r3, #12
   23d70:	18fb      	adds	r3, r7, r3
   23d72:	781a      	ldrb	r2, [r3, #0]
   23d74:	2104      	movs	r1, #4
   23d76:	430a      	orrs	r2, r1
   23d78:	701a      	strb	r2, [r3, #0]
   23d7a:	e005      	b.n	23d88 <system_clock_source_xosc32k_set_config+0x58>
	} else {
		temp.bit.XTALEN = 0;
   23d7c:	230c      	movs	r3, #12
   23d7e:	18fb      	adds	r3, r7, r3
   23d80:	781a      	ldrb	r2, [r3, #0]
   23d82:	2104      	movs	r1, #4
   23d84:	438a      	bics	r2, r1
   23d86:	701a      	strb	r2, [r3, #0]
	}

	temp.bit.AAMPEN = config->auto_gain_control;
   23d88:	687b      	ldr	r3, [r7, #4]
   23d8a:	789a      	ldrb	r2, [r3, #2]
   23d8c:	230c      	movs	r3, #12
   23d8e:	18fb      	adds	r3, r7, r3
   23d90:	2101      	movs	r1, #1
   23d92:	400a      	ands	r2, r1
   23d94:	0150      	lsls	r0, r2, #5
   23d96:	781a      	ldrb	r2, [r3, #0]
   23d98:	2120      	movs	r1, #32
   23d9a:	438a      	bics	r2, r1
   23d9c:	1c11      	adds	r1, r2, #0
   23d9e:	1c02      	adds	r2, r0, #0
   23da0:	430a      	orrs	r2, r1
   23da2:	701a      	strb	r2, [r3, #0]
	temp.bit.EN1K = config->enable_1khz_output;
   23da4:	687b      	ldr	r3, [r7, #4]
   23da6:	78da      	ldrb	r2, [r3, #3]
   23da8:	230c      	movs	r3, #12
   23daa:	18fb      	adds	r3, r7, r3
   23dac:	2101      	movs	r1, #1
   23dae:	400a      	ands	r2, r1
   23db0:	0110      	lsls	r0, r2, #4
   23db2:	781a      	ldrb	r2, [r3, #0]
   23db4:	2110      	movs	r1, #16
   23db6:	438a      	bics	r2, r1
   23db8:	1c11      	adds	r1, r2, #0
   23dba:	1c02      	adds	r2, r0, #0
   23dbc:	430a      	orrs	r2, r1
   23dbe:	701a      	strb	r2, [r3, #0]
	temp.bit.EN32K = config->enable_32khz_output;
   23dc0:	687b      	ldr	r3, [r7, #4]
   23dc2:	791a      	ldrb	r2, [r3, #4]
   23dc4:	230c      	movs	r3, #12
   23dc6:	18fb      	adds	r3, r7, r3
   23dc8:	2101      	movs	r1, #1
   23dca:	400a      	ands	r2, r1
   23dcc:	00d0      	lsls	r0, r2, #3
   23dce:	781a      	ldrb	r2, [r3, #0]
   23dd0:	2108      	movs	r1, #8
   23dd2:	438a      	bics	r2, r1
   23dd4:	1c11      	adds	r1, r2, #0
   23dd6:	1c02      	adds	r2, r0, #0
   23dd8:	430a      	orrs	r2, r1
   23dda:	701a      	strb	r2, [r3, #0]

	temp.bit.ONDEMAND = config->on_demand;
   23ddc:	687b      	ldr	r3, [r7, #4]
   23dde:	7b5a      	ldrb	r2, [r3, #13]
   23de0:	230c      	movs	r3, #12
   23de2:	18fb      	adds	r3, r7, r3
   23de4:	01d0      	lsls	r0, r2, #7
   23de6:	781a      	ldrb	r2, [r3, #0]
   23de8:	217f      	movs	r1, #127	; 0x7f
   23dea:	400a      	ands	r2, r1
   23dec:	1c11      	adds	r1, r2, #0
   23dee:	1c02      	adds	r2, r0, #0
   23df0:	430a      	orrs	r2, r1
   23df2:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
   23df4:	687b      	ldr	r3, [r7, #4]
   23df6:	7b1a      	ldrb	r2, [r3, #12]
   23df8:	230c      	movs	r3, #12
   23dfa:	18fb      	adds	r3, r7, r3
   23dfc:	2101      	movs	r1, #1
   23dfe:	400a      	ands	r2, r1
   23e00:	0190      	lsls	r0, r2, #6
   23e02:	781a      	ldrb	r2, [r3, #0]
   23e04:	2140      	movs	r1, #64	; 0x40
   23e06:	438a      	bics	r2, r1
   23e08:	1c11      	adds	r1, r2, #0
   23e0a:	1c02      	adds	r2, r0, #0
   23e0c:	430a      	orrs	r2, r1
   23e0e:	701a      	strb	r2, [r3, #0]
	temp.bit.WRTLOCK  = config->write_once;
   23e10:	687b      	ldr	r3, [r7, #4]
   23e12:	7b9a      	ldrb	r2, [r3, #14]
   23e14:	230c      	movs	r3, #12
   23e16:	18fb      	adds	r3, r7, r3
   23e18:	2101      	movs	r1, #1
   23e1a:	400a      	ands	r2, r1
   23e1c:	0110      	lsls	r0, r2, #4
   23e1e:	785a      	ldrb	r2, [r3, #1]
   23e20:	2110      	movs	r1, #16
   23e22:	438a      	bics	r2, r1
   23e24:	1c11      	adds	r1, r2, #0
   23e26:	1c02      	adds	r2, r0, #0
   23e28:	430a      	orrs	r2, r1
   23e2a:	705a      	strb	r2, [r3, #1]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
   23e2c:	687b      	ldr	r3, [r7, #4]
   23e2e:	689a      	ldr	r2, [r3, #8]
   23e30:	4b06      	ldr	r3, [pc, #24]	; (23e4c <system_clock_source_xosc32k_set_config+0x11c>)
   23e32:	615a      	str	r2, [r3, #20]

	SYSCTRL->XOSC32K = temp;
   23e34:	4a04      	ldr	r2, [pc, #16]	; (23e48 <system_clock_source_xosc32k_set_config+0x118>)
   23e36:	230c      	movs	r3, #12
   23e38:	18fb      	adds	r3, r7, r3
   23e3a:	881b      	ldrh	r3, [r3, #0]
   23e3c:	8293      	strh	r3, [r2, #20]
}
   23e3e:	46c0      	nop			; (mov r8, r8)
   23e40:	46bd      	mov	sp, r7
   23e42:	b004      	add	sp, #16
   23e44:	bd80      	pop	{r7, pc}
   23e46:	46c0      	nop			; (mov r8, r8)
   23e48:	40000800 	.word	0x40000800
   23e4c:	200006f0 	.word	0x200006f0

00023e50 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
   23e50:	b580      	push	{r7, lr}
   23e52:	b082      	sub	sp, #8
   23e54:	af00      	add	r7, sp, #0
   23e56:	6078      	str	r0, [r7, #4]
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
   23e58:	687b      	ldr	r3, [r7, #4]
   23e5a:	7a1b      	ldrb	r3, [r3, #8]
   23e5c:	029b      	lsls	r3, r3, #10
   23e5e:	041b      	lsls	r3, r3, #16
   23e60:	0c1a      	lsrs	r2, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
   23e62:	687b      	ldr	r3, [r7, #4]
   23e64:	895b      	ldrh	r3, [r3, #10]
   23e66:	059b      	lsls	r3, r3, #22
   23e68:	0d9b      	lsrs	r3, r3, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
   23e6a:	431a      	orrs	r2, r3
	_system_clock_inst.dfll.val =
   23e6c:	4b2a      	ldr	r3, [pc, #168]	; (23f18 <system_clock_source_dfll_set_config+0xc8>)
   23e6e:	605a      	str	r2, [r3, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
   23e70:	687b      	ldr	r3, [r7, #4]
   23e72:	799a      	ldrb	r2, [r3, #6]
			(uint32_t)config->stable_tracking |
   23e74:	687b      	ldr	r3, [r7, #4]
   23e76:	79db      	ldrb	r3, [r3, #7]
			(uint32_t)config->wakeup_lock     |
   23e78:	4313      	orrs	r3, r2
   23e7a:	b2db      	uxtb	r3, r3
   23e7c:	001a      	movs	r2, r3
			(uint32_t)config->quick_lock      |
   23e7e:	687b      	ldr	r3, [r7, #4]
   23e80:	885b      	ldrh	r3, [r3, #2]
			(uint32_t)config->stable_tracking |
   23e82:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
   23e84:	687a      	ldr	r2, [r7, #4]
   23e86:	8892      	ldrh	r2, [r2, #4]
			(uint32_t)config->quick_lock      |
   23e88:	431a      	orrs	r2, r3
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
   23e8a:	687b      	ldr	r3, [r7, #4]
   23e8c:	785b      	ldrb	r3, [r3, #1]
   23e8e:	01db      	lsls	r3, r3, #7
			(uint32_t)config->chill_cycle     |
   23e90:	431a      	orrs	r2, r3
	_system_clock_inst.dfll.control =
   23e92:	4b21      	ldr	r3, [pc, #132]	; (23f18 <system_clock_source_dfll_set_config+0xc8>)
   23e94:	601a      	str	r2, [r3, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
   23e96:	687b      	ldr	r3, [r7, #4]
   23e98:	781b      	ldrb	r3, [r3, #0]
   23e9a:	2b04      	cmp	r3, #4
   23e9c:	d116      	bne.n	23ecc <system_clock_source_dfll_set_config+0x7c>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
   23e9e:	687b      	ldr	r3, [r7, #4]
   23ea0:	7b1b      	ldrb	r3, [r3, #12]
   23ea2:	069b      	lsls	r3, r3, #26
   23ea4:	001a      	movs	r2, r3
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
   23ea6:	687b      	ldr	r3, [r7, #4]
   23ea8:	89db      	ldrh	r3, [r3, #14]
   23eaa:	041b      	lsls	r3, r3, #16
   23eac:	0019      	movs	r1, r3
   23eae:	4b1b      	ldr	r3, [pc, #108]	; (23f1c <system_clock_source_dfll_set_config+0xcc>)
   23eb0:	400b      	ands	r3, r1
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
   23eb2:	4313      	orrs	r3, r2
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
   23eb4:	687a      	ldr	r2, [r7, #4]
   23eb6:	8a12      	ldrh	r2, [r2, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
   23eb8:	431a      	orrs	r2, r3
		_system_clock_inst.dfll.mul =
   23eba:	4b17      	ldr	r3, [pc, #92]	; (23f18 <system_clock_source_dfll_set_config+0xc8>)
   23ebc:	609a      	str	r2, [r3, #8]

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
   23ebe:	4b16      	ldr	r3, [pc, #88]	; (23f18 <system_clock_source_dfll_set_config+0xc8>)
   23ec0:	681b      	ldr	r3, [r3, #0]
   23ec2:	687a      	ldr	r2, [r7, #4]
   23ec4:	7812      	ldrb	r2, [r2, #0]
   23ec6:	431a      	orrs	r2, r3
   23ec8:	4b13      	ldr	r3, [pc, #76]	; (23f18 <system_clock_source_dfll_set_config+0xc8>)
   23eca:	601a      	str	r2, [r3, #0]
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
   23ecc:	687b      	ldr	r3, [r7, #4]
   23ece:	781b      	ldrb	r3, [r3, #0]
   23ed0:	2b20      	cmp	r3, #32
   23ed2:	d11c      	bne.n	23f0e <system_clock_source_dfll_set_config+0xbe>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
   23ed4:	687b      	ldr	r3, [r7, #4]
   23ed6:	7b1b      	ldrb	r3, [r3, #12]
   23ed8:	069b      	lsls	r3, r3, #26
   23eda:	001a      	movs	r2, r3
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
   23edc:	687b      	ldr	r3, [r7, #4]
   23ede:	89db      	ldrh	r3, [r3, #14]
   23ee0:	041b      	lsls	r3, r3, #16
   23ee2:	0019      	movs	r1, r3
   23ee4:	4b0d      	ldr	r3, [pc, #52]	; (23f1c <system_clock_source_dfll_set_config+0xcc>)
   23ee6:	400b      	ands	r3, r1
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
   23ee8:	4313      	orrs	r3, r2
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
   23eea:	687a      	ldr	r2, [r7, #4]
   23eec:	8a12      	ldrh	r2, [r2, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
   23eee:	431a      	orrs	r2, r3
		_system_clock_inst.dfll.mul =
   23ef0:	4b09      	ldr	r3, [pc, #36]	; (23f18 <system_clock_source_dfll_set_config+0xc8>)
   23ef2:	609a      	str	r2, [r3, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
   23ef4:	4b08      	ldr	r3, [pc, #32]	; (23f18 <system_clock_source_dfll_set_config+0xc8>)
   23ef6:	681b      	ldr	r3, [r3, #0]
   23ef8:	687a      	ldr	r2, [r7, #4]
   23efa:	7812      	ldrb	r2, [r2, #0]
   23efc:	2104      	movs	r1, #4
   23efe:	430a      	orrs	r2, r1
   23f00:	b2d2      	uxtb	r2, r2
   23f02:	4313      	orrs	r3, r2
   23f04:	2280      	movs	r2, #128	; 0x80
   23f06:	00d2      	lsls	r2, r2, #3
   23f08:	431a      	orrs	r2, r3
   23f0a:	4b03      	ldr	r3, [pc, #12]	; (23f18 <system_clock_source_dfll_set_config+0xc8>)
   23f0c:	601a      	str	r2, [r3, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
   23f0e:	46c0      	nop			; (mov r8, r8)
   23f10:	46bd      	mov	sp, r7
   23f12:	b002      	add	sp, #8
   23f14:	bd80      	pop	{r7, pc}
   23f16:	46c0      	nop			; (mov r8, r8)
   23f18:	200006f0 	.word	0x200006f0
   23f1c:	03ff0000 	.word	0x03ff0000

00023f20 <system_clock_source_enable>:
 * \retval STATUS_ERR_INVALID_ARG  The clock source is not available on this
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
   23f20:	b580      	push	{r7, lr}
   23f22:	b082      	sub	sp, #8
   23f24:	af00      	add	r7, sp, #0
   23f26:	0002      	movs	r2, r0
   23f28:	1dfb      	adds	r3, r7, #7
   23f2a:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
   23f2c:	1dfb      	adds	r3, r7, #7
   23f2e:	781b      	ldrb	r3, [r3, #0]
   23f30:	2b08      	cmp	r3, #8
   23f32:	d83b      	bhi.n	23fac <system_clock_source_enable+0x8c>
   23f34:	009a      	lsls	r2, r3, #2
   23f36:	4b21      	ldr	r3, [pc, #132]	; (23fbc <system_clock_source_enable+0x9c>)
   23f38:	18d3      	adds	r3, r2, r3
   23f3a:	681b      	ldr	r3, [r3, #0]
   23f3c:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
   23f3e:	4b20      	ldr	r3, [pc, #128]	; (23fc0 <system_clock_source_enable+0xa0>)
   23f40:	4a1f      	ldr	r2, [pc, #124]	; (23fc0 <system_clock_source_enable+0xa0>)
   23f42:	6a12      	ldr	r2, [r2, #32]
   23f44:	2102      	movs	r1, #2
   23f46:	430a      	orrs	r2, r1
   23f48:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
   23f4a:	2300      	movs	r3, #0
   23f4c:	e031      	b.n	23fb2 <system_clock_source_enable+0x92>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
   23f4e:	4b1c      	ldr	r3, [pc, #112]	; (23fc0 <system_clock_source_enable+0xa0>)
   23f50:	4a1b      	ldr	r2, [pc, #108]	; (23fc0 <system_clock_source_enable+0xa0>)
   23f52:	6992      	ldr	r2, [r2, #24]
   23f54:	2102      	movs	r1, #2
   23f56:	430a      	orrs	r2, r1
   23f58:	619a      	str	r2, [r3, #24]
		break;
   23f5a:	e029      	b.n	23fb0 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
   23f5c:	4a18      	ldr	r2, [pc, #96]	; (23fc0 <system_clock_source_enable+0xa0>)
   23f5e:	4b18      	ldr	r3, [pc, #96]	; (23fc0 <system_clock_source_enable+0xa0>)
   23f60:	8a1b      	ldrh	r3, [r3, #16]
   23f62:	b29b      	uxth	r3, r3
   23f64:	2102      	movs	r1, #2
   23f66:	430b      	orrs	r3, r1
   23f68:	b29b      	uxth	r3, r3
   23f6a:	8213      	strh	r3, [r2, #16]
		break;
   23f6c:	e020      	b.n	23fb0 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
   23f6e:	4a14      	ldr	r2, [pc, #80]	; (23fc0 <system_clock_source_enable+0xa0>)
   23f70:	4b13      	ldr	r3, [pc, #76]	; (23fc0 <system_clock_source_enable+0xa0>)
   23f72:	8a9b      	ldrh	r3, [r3, #20]
   23f74:	b29b      	uxth	r3, r3
   23f76:	2102      	movs	r1, #2
   23f78:	430b      	orrs	r3, r1
   23f7a:	b29b      	uxth	r3, r3
   23f7c:	8293      	strh	r3, [r2, #20]
		break;
   23f7e:	e017      	b.n	23fb0 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
   23f80:	4b10      	ldr	r3, [pc, #64]	; (23fc4 <system_clock_source_enable+0xa4>)
   23f82:	681b      	ldr	r3, [r3, #0]
   23f84:	2202      	movs	r2, #2
   23f86:	431a      	orrs	r2, r3
   23f88:	4b0e      	ldr	r3, [pc, #56]	; (23fc4 <system_clock_source_enable+0xa4>)
   23f8a:	601a      	str	r2, [r3, #0]
		_system_clock_source_dfll_set_config_errata_9905();
   23f8c:	4b0e      	ldr	r3, [pc, #56]	; (23fc8 <system_clock_source_enable+0xa8>)
   23f8e:	4798      	blx	r3
		break;
   23f90:	e00e      	b.n	23fb0 <system_clock_source_enable+0x90>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
   23f92:	4a0b      	ldr	r2, [pc, #44]	; (23fc0 <system_clock_source_enable+0xa0>)
   23f94:	490a      	ldr	r1, [pc, #40]	; (23fc0 <system_clock_source_enable+0xa0>)
   23f96:	2344      	movs	r3, #68	; 0x44
   23f98:	5ccb      	ldrb	r3, [r1, r3]
   23f9a:	b2db      	uxtb	r3, r3
   23f9c:	2102      	movs	r1, #2
   23f9e:	430b      	orrs	r3, r1
   23fa0:	b2d9      	uxtb	r1, r3
   23fa2:	2344      	movs	r3, #68	; 0x44
   23fa4:	54d1      	strb	r1, [r2, r3]
		break;
   23fa6:	e003      	b.n	23fb0 <system_clock_source_enable+0x90>
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
   23fa8:	2300      	movs	r3, #0
   23faa:	e002      	b.n	23fb2 <system_clock_source_enable+0x92>

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
   23fac:	2317      	movs	r3, #23
   23fae:	e000      	b.n	23fb2 <system_clock_source_enable+0x92>
	}

	return STATUS_OK;
   23fb0:	2300      	movs	r3, #0
}
   23fb2:	0018      	movs	r0, r3
   23fb4:	46bd      	mov	sp, r7
   23fb6:	b002      	add	sp, #8
   23fb8:	bd80      	pop	{r7, pc}
   23fba:	46c0      	nop			; (mov r8, r8)
   23fbc:	0002aa90 	.word	0x0002aa90
   23fc0:	40000800 	.word	0x40000800
   23fc4:	200006f0 	.word	0x200006f0
   23fc8:	00023bb5 	.word	0x00023bb5

00023fcc <system_clock_source_is_ready>:
 * \retval true   Clock source is enabled and ready
 * \retval false  Clock source is disabled or not yet ready
 */
bool system_clock_source_is_ready(
		const enum system_clock_source clock_source)
{
   23fcc:	b580      	push	{r7, lr}
   23fce:	b084      	sub	sp, #16
   23fd0:	af00      	add	r7, sp, #0
   23fd2:	0002      	movs	r2, r0
   23fd4:	1dfb      	adds	r3, r7, #7
   23fd6:	701a      	strb	r2, [r3, #0]
	uint32_t mask = 0;
   23fd8:	2300      	movs	r3, #0
   23fda:	60fb      	str	r3, [r7, #12]

	switch (clock_source) {
   23fdc:	1dfb      	adds	r3, r7, #7
   23fde:	781b      	ldrb	r3, [r3, #0]
   23fe0:	2b08      	cmp	r3, #8
   23fe2:	d821      	bhi.n	24028 <system_clock_source_is_ready+0x5c>
   23fe4:	009a      	lsls	r2, r3, #2
   23fe6:	4b18      	ldr	r3, [pc, #96]	; (24048 <system_clock_source_is_ready+0x7c>)
   23fe8:	18d3      	adds	r3, r2, r3
   23fea:	681b      	ldr	r3, [r3, #0]
   23fec:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		mask = SYSCTRL_PCLKSR_OSC8MRDY;
   23fee:	2308      	movs	r3, #8
   23ff0:	60fb      	str	r3, [r7, #12]
		break;
   23ff2:	e01b      	b.n	2402c <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		mask = SYSCTRL_PCLKSR_OSC32KRDY;
   23ff4:	2304      	movs	r3, #4
   23ff6:	60fb      	str	r3, [r7, #12]
		break;
   23ff8:	e018      	b.n	2402c <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		mask = SYSCTRL_PCLKSR_XOSCRDY;
   23ffa:	2301      	movs	r3, #1
   23ffc:	60fb      	str	r3, [r7, #12]
		break;
   23ffe:	e015      	b.n	2402c <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		mask = SYSCTRL_PCLKSR_XOSC32KRDY;
   24000:	2302      	movs	r3, #2
   24002:	60fb      	str	r3, [r7, #12]
		break;
   24004:	e012      	b.n	2402c <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
			mask = (SYSCTRL_PCLKSR_DFLLRDY |
   24006:	23d0      	movs	r3, #208	; 0xd0
   24008:	60fb      	str	r3, [r7, #12]
			        SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC);
		} else {
			mask = SYSCTRL_PCLKSR_DFLLRDY;
		}
		break;
   2400a:	e00f      	b.n	2402c <system_clock_source_is_ready+0x60>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		return ((SYSCTRL->DPLLSTATUS.reg &
   2400c:	4a0f      	ldr	r2, [pc, #60]	; (2404c <system_clock_source_is_ready+0x80>)
   2400e:	2350      	movs	r3, #80	; 0x50
   24010:	5cd3      	ldrb	r3, [r2, r3]
   24012:	b2db      	uxtb	r3, r3
   24014:	001a      	movs	r2, r3
   24016:	2303      	movs	r3, #3
   24018:	4013      	ands	r3, r2
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK)) ==
   2401a:	3b03      	subs	r3, #3
   2401c:	425a      	negs	r2, r3
   2401e:	4153      	adcs	r3, r2
   24020:	b2db      	uxtb	r3, r3
   24022:	e00c      	b.n	2403e <system_clock_source_is_ready+0x72>
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK));
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Not possible to disable */
		return true;
   24024:	2301      	movs	r3, #1
   24026:	e00a      	b.n	2403e <system_clock_source_is_ready+0x72>

	default:
		return false;
   24028:	2300      	movs	r3, #0
   2402a:	e008      	b.n	2403e <system_clock_source_is_ready+0x72>
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
   2402c:	4b07      	ldr	r3, [pc, #28]	; (2404c <system_clock_source_is_ready+0x80>)
   2402e:	68db      	ldr	r3, [r3, #12]
   24030:	68fa      	ldr	r2, [r7, #12]
   24032:	401a      	ands	r2, r3
   24034:	68fb      	ldr	r3, [r7, #12]
   24036:	1ad3      	subs	r3, r2, r3
   24038:	425a      	negs	r2, r3
   2403a:	4153      	adcs	r3, r2
   2403c:	b2db      	uxtb	r3, r3
}
   2403e:	0018      	movs	r0, r3
   24040:	46bd      	mov	sp, r7
   24042:	b004      	add	sp, #16
   24044:	bd80      	pop	{r7, pc}
   24046:	46c0      	nop			; (mov r8, r8)
   24048:	0002aab4 	.word	0x0002aab4
   2404c:	40000800 	.word	0x40000800

00024050 <_switch_peripheral_gclk>:
 *
 * Switch all peripheral clock to a not enabled general clock
 * to save power.
 */
static void _switch_peripheral_gclk(void)
{
   24050:	b580      	push	{r7, lr}
   24052:	b082      	sub	sp, #8
   24054:	af00      	add	r7, sp, #0
	struct system_gclk_chan_config gclk_conf;

#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
#elif CONF_CLOCK_GCLK_2_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_2;
   24056:	003b      	movs	r3, r7
   24058:	2202      	movs	r2, #2
   2405a:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
   2405c:	2300      	movs	r3, #0
   2405e:	607b      	str	r3, [r7, #4]
   24060:	e009      	b.n	24076 <_switch_peripheral_gclk+0x26>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
   24062:	687b      	ldr	r3, [r7, #4]
   24064:	b2db      	uxtb	r3, r3
   24066:	003a      	movs	r2, r7
   24068:	0011      	movs	r1, r2
   2406a:	0018      	movs	r0, r3
   2406c:	4b05      	ldr	r3, [pc, #20]	; (24084 <_switch_peripheral_gclk+0x34>)
   2406e:	4798      	blx	r3
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
   24070:	687b      	ldr	r3, [r7, #4]
   24072:	3301      	adds	r3, #1
   24074:	607b      	str	r3, [r7, #4]
   24076:	687b      	ldr	r3, [r7, #4]
   24078:	2b24      	cmp	r3, #36	; 0x24
   2407a:	d9f2      	bls.n	24062 <_switch_peripheral_gclk+0x12>
	}
}
   2407c:	46c0      	nop			; (mov r8, r8)
   2407e:	46bd      	mov	sp, r7
   24080:	b002      	add	sp, #8
   24082:	bd80      	pop	{r7, pc}
   24084:	00024715 	.word	0x00024715

00024088 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
   24088:	b580      	push	{r7, lr}
   2408a:	b0aa      	sub	sp, #168	; 0xa8
   2408c:	af00      	add	r7, sp, #0
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
   2408e:	4bc1      	ldr	r3, [pc, #772]	; (24394 <system_clock_init+0x30c>)
   24090:	22c2      	movs	r2, #194	; 0xc2
   24092:	00d2      	lsls	r2, r2, #3
   24094:	609a      	str	r2, [r3, #8]
			SYSCTRL_INTFLAG_DFLLRDY;

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);
   24096:	2002      	movs	r0, #2
   24098:	4bbf      	ldr	r3, [pc, #764]	; (24398 <system_clock_init+0x310>)
   2409a:	4798      	blx	r3

	/* Switch all peripheral clock to a not enabled general clock to save power. */
	_switch_peripheral_gclk();
   2409c:	4bbf      	ldr	r3, [pc, #764]	; (2439c <system_clock_init+0x314>)
   2409e:	4798      	blx	r3


	/* XOSC32K */
#if CONF_CLOCK_XOSC32K_ENABLE == true
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);
   240a0:	2394      	movs	r3, #148	; 0x94
   240a2:	18fb      	adds	r3, r7, r3
   240a4:	0018      	movs	r0, r3
   240a6:	4bbe      	ldr	r3, [pc, #760]	; (243a0 <system_clock_init+0x318>)
   240a8:	4798      	blx	r3

	xosc32k_conf.frequency           = 32768UL;
   240aa:	2394      	movs	r3, #148	; 0x94
   240ac:	18fb      	adds	r3, r7, r3
   240ae:	2280      	movs	r2, #128	; 0x80
   240b0:	0212      	lsls	r2, r2, #8
   240b2:	609a      	str	r2, [r3, #8]
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
   240b4:	2394      	movs	r3, #148	; 0x94
   240b6:	18fb      	adds	r3, r7, r3
   240b8:	2200      	movs	r2, #0
   240ba:	701a      	strb	r2, [r3, #0]
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
   240bc:	2394      	movs	r3, #148	; 0x94
   240be:	18fb      	adds	r3, r7, r3
   240c0:	2206      	movs	r2, #6
   240c2:	705a      	strb	r2, [r3, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
   240c4:	2394      	movs	r3, #148	; 0x94
   240c6:	18fb      	adds	r3, r7, r3
   240c8:	2200      	movs	r2, #0
   240ca:	709a      	strb	r2, [r3, #2]
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
   240cc:	2394      	movs	r3, #148	; 0x94
   240ce:	18fb      	adds	r3, r7, r3
   240d0:	2200      	movs	r2, #0
   240d2:	70da      	strb	r2, [r3, #3]
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
   240d4:	2394      	movs	r3, #148	; 0x94
   240d6:	18fb      	adds	r3, r7, r3
   240d8:	2201      	movs	r2, #1
   240da:	711a      	strb	r2, [r3, #4]
	xosc32k_conf.on_demand           = false;
   240dc:	2394      	movs	r3, #148	; 0x94
   240de:	18fb      	adds	r3, r7, r3
   240e0:	2200      	movs	r2, #0
   240e2:	735a      	strb	r2, [r3, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;
   240e4:	2394      	movs	r3, #148	; 0x94
   240e6:	18fb      	adds	r3, r7, r3
   240e8:	2201      	movs	r2, #1
   240ea:	731a      	strb	r2, [r3, #12]

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
   240ec:	2394      	movs	r3, #148	; 0x94
   240ee:	18fb      	adds	r3, r7, r3
   240f0:	0018      	movs	r0, r3
   240f2:	4bac      	ldr	r3, [pc, #688]	; (243a4 <system_clock_init+0x31c>)
   240f4:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
   240f6:	2005      	movs	r0, #5
   240f8:	4bab      	ldr	r3, [pc, #684]	; (243a8 <system_clock_init+0x320>)
   240fa:	4798      	blx	r3
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
   240fc:	46c0      	nop			; (mov r8, r8)
   240fe:	2005      	movs	r0, #5
   24100:	4baa      	ldr	r3, [pc, #680]	; (243ac <system_clock_init+0x324>)
   24102:	4798      	blx	r3
   24104:	0003      	movs	r3, r0
   24106:	001a      	movs	r2, r3
   24108:	2301      	movs	r3, #1
   2410a:	4053      	eors	r3, r2
   2410c:	b2db      	uxtb	r3, r3
   2410e:	2b00      	cmp	r3, #0
   24110:	d1f5      	bne.n	240fe <system_clock_init+0x76>


	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);
   24112:	2380      	movs	r3, #128	; 0x80
   24114:	18fb      	adds	r3, r7, r3
   24116:	0018      	movs	r0, r3
   24118:	4ba5      	ldr	r3, [pc, #660]	; (243b0 <system_clock_init+0x328>)
   2411a:	4798      	blx	r3

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
   2411c:	2380      	movs	r3, #128	; 0x80
   2411e:	18fb      	adds	r3, r7, r3
   24120:	2204      	movs	r2, #4
   24122:	701a      	strb	r2, [r3, #0]
	dfll_conf.on_demand      = false;
   24124:	2380      	movs	r3, #128	; 0x80
   24126:	18fb      	adds	r3, r7, r3
   24128:	2200      	movs	r2, #0
   2412a:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
   2412c:	4ba1      	ldr	r3, [pc, #644]	; (243b4 <system_clock_init+0x32c>)
   2412e:	681b      	ldr	r3, [r3, #0]
   24130:	0e9b      	lsrs	r3, r3, #26
   24132:	22a4      	movs	r2, #164	; 0xa4
   24134:	18ba      	adds	r2, r7, r2
   24136:	6013      	str	r3, [r2, #0]
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
   24138:	23a4      	movs	r3, #164	; 0xa4
   2413a:	18fb      	adds	r3, r7, r3
   2413c:	681b      	ldr	r3, [r3, #0]
   2413e:	2b3f      	cmp	r3, #63	; 0x3f
   24140:	d103      	bne.n	2414a <system_clock_init+0xc2>
		coarse = 0x1f;
   24142:	231f      	movs	r3, #31
   24144:	22a4      	movs	r2, #164	; 0xa4
   24146:	18ba      	adds	r2, r7, r2
   24148:	6013      	str	r3, [r2, #0]
	}
	dfll_conf.coarse_value = coarse;
   2414a:	23a4      	movs	r3, #164	; 0xa4
   2414c:	18fb      	adds	r3, r7, r3
   2414e:	681b      	ldr	r3, [r3, #0]
   24150:	b2da      	uxtb	r2, r3
   24152:	2380      	movs	r3, #128	; 0x80
   24154:	18fb      	adds	r3, r7, r3
   24156:	721a      	strb	r2, [r3, #8]
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN) {
		dfll_conf.fine_value   = CONF_CLOCK_DFLL_FINE_VALUE;
	}

#  if CONF_CLOCK_DFLL_QUICK_LOCK == true
	dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
   24158:	2380      	movs	r3, #128	; 0x80
   2415a:	18fb      	adds	r3, r7, r3
   2415c:	2200      	movs	r2, #0
   2415e:	805a      	strh	r2, [r3, #2]
#  else
	dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_DISABLE;
#  endif

#  if CONF_CLOCK_DFLL_TRACK_AFTER_FINE_LOCK == true
	dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
   24160:	2380      	movs	r3, #128	; 0x80
   24162:	18fb      	adds	r3, r7, r3
   24164:	2200      	movs	r2, #0
   24166:	71da      	strb	r2, [r3, #7]
#  else
	dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_FIX_AFTER_LOCK;
#  endif

#  if CONF_CLOCK_DFLL_KEEP_LOCK_ON_WAKEUP == true
	dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
   24168:	2380      	movs	r3, #128	; 0x80
   2416a:	18fb      	adds	r3, r7, r3
   2416c:	2200      	movs	r2, #0
   2416e:	719a      	strb	r2, [r3, #6]
#  else
	dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_LOSE;
#  endif

#  if CONF_CLOCK_DFLL_ENABLE_CHILL_CYCLE == true
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
   24170:	2380      	movs	r3, #128	; 0x80
   24172:	18fb      	adds	r3, r7, r3
   24174:	2200      	movs	r2, #0
   24176:	809a      	strh	r2, [r3, #4]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
   24178:	2380      	movs	r3, #128	; 0x80
   2417a:	18fb      	adds	r3, r7, r3
   2417c:	22b7      	movs	r2, #183	; 0xb7
   2417e:	00d2      	lsls	r2, r2, #3
   24180:	821a      	strh	r2, [r3, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
   24182:	2380      	movs	r3, #128	; 0x80
   24184:	18fb      	adds	r3, r7, r3
   24186:	2203      	movs	r2, #3
   24188:	731a      	strb	r2, [r3, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
   2418a:	2380      	movs	r3, #128	; 0x80
   2418c:	18fb      	adds	r3, r7, r3
   2418e:	221f      	movs	r2, #31
   24190:	81da      	strh	r2, [r3, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
   24192:	2380      	movs	r3, #128	; 0x80
   24194:	18fb      	adds	r3, r7, r3
   24196:	0018      	movs	r0, r3
   24198:	4b87      	ldr	r3, [pc, #540]	; (243b8 <system_clock_init+0x330>)
   2419a:	4798      	blx	r3
#endif


	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);
   2419c:	237c      	movs	r3, #124	; 0x7c
   2419e:	18fb      	adds	r3, r7, r3
   241a0:	0018      	movs	r0, r3
   241a2:	4b86      	ldr	r3, [pc, #536]	; (243bc <system_clock_init+0x334>)
   241a4:	4798      	blx	r3

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
   241a6:	237c      	movs	r3, #124	; 0x7c
   241a8:	18fb      	adds	r3, r7, r3
   241aa:	2200      	movs	r2, #0
   241ac:	701a      	strb	r2, [r3, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
   241ae:	237c      	movs	r3, #124	; 0x7c
   241b0:	18fb      	adds	r3, r7, r3
   241b2:	2201      	movs	r2, #1
   241b4:	709a      	strb	r2, [r3, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;
   241b6:	237c      	movs	r3, #124	; 0x7c
   241b8:	18fb      	adds	r3, r7, r3
   241ba:	2201      	movs	r2, #1
   241bc:	705a      	strb	r2, [r3, #1]

	system_clock_source_osc8m_set_config(&osc8m_conf);
   241be:	237c      	movs	r3, #124	; 0x7c
   241c0:	18fb      	adds	r3, r7, r3
   241c2:	0018      	movs	r0, r3
   241c4:	4b7e      	ldr	r3, [pc, #504]	; (243c0 <system_clock_init+0x338>)
   241c6:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
   241c8:	2006      	movs	r0, #6
   241ca:	4b77      	ldr	r3, [pc, #476]	; (243a8 <system_clock_init+0x320>)
   241cc:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
   241ce:	4b7d      	ldr	r3, [pc, #500]	; (243c4 <system_clock_init+0x33c>)
   241d0:	4798      	blx	r3

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
   241d2:	2364      	movs	r3, #100	; 0x64
   241d4:	18fb      	adds	r3, r7, r3
   241d6:	0018      	movs	r0, r3
   241d8:	4b7b      	ldr	r3, [pc, #492]	; (243c8 <system_clock_init+0x340>)
   241da:	4798      	blx	r3
   241dc:	2364      	movs	r3, #100	; 0x64
   241de:	18fb      	adds	r3, r7, r3
   241e0:	2205      	movs	r2, #5
   241e2:	701a      	strb	r2, [r3, #0]
   241e4:	2364      	movs	r3, #100	; 0x64
   241e6:	18fb      	adds	r3, r7, r3
   241e8:	2201      	movs	r2, #1
   241ea:	605a      	str	r2, [r3, #4]
   241ec:	2364      	movs	r3, #100	; 0x64
   241ee:	18fb      	adds	r3, r7, r3
   241f0:	2200      	movs	r2, #0
   241f2:	721a      	strb	r2, [r3, #8]
   241f4:	2364      	movs	r3, #100	; 0x64
   241f6:	18fb      	adds	r3, r7, r3
   241f8:	2200      	movs	r2, #0
   241fa:	725a      	strb	r2, [r3, #9]
   241fc:	2364      	movs	r3, #100	; 0x64
   241fe:	18fb      	adds	r3, r7, r3
   24200:	0019      	movs	r1, r3
   24202:	2001      	movs	r0, #1
   24204:	4b71      	ldr	r3, [pc, #452]	; (243cc <system_clock_init+0x344>)
   24206:	4798      	blx	r3
   24208:	2001      	movs	r0, #1
   2420a:	4b71      	ldr	r3, [pc, #452]	; (243d0 <system_clock_init+0x348>)
   2420c:	4798      	blx	r3
   2420e:	234c      	movs	r3, #76	; 0x4c
   24210:	18fb      	adds	r3, r7, r3
   24212:	0018      	movs	r0, r3
   24214:	4b6c      	ldr	r3, [pc, #432]	; (243c8 <system_clock_init+0x340>)
   24216:	4798      	blx	r3
   24218:	234c      	movs	r3, #76	; 0x4c
   2421a:	18fb      	adds	r3, r7, r3
   2421c:	2206      	movs	r2, #6
   2421e:	701a      	strb	r2, [r3, #0]
   24220:	234c      	movs	r3, #76	; 0x4c
   24222:	18fb      	adds	r3, r7, r3
   24224:	2201      	movs	r2, #1
   24226:	605a      	str	r2, [r3, #4]
   24228:	234c      	movs	r3, #76	; 0x4c
   2422a:	18fb      	adds	r3, r7, r3
   2422c:	2201      	movs	r2, #1
   2422e:	721a      	strb	r2, [r3, #8]
   24230:	234c      	movs	r3, #76	; 0x4c
   24232:	18fb      	adds	r3, r7, r3
   24234:	2200      	movs	r2, #0
   24236:	725a      	strb	r2, [r3, #9]
   24238:	234c      	movs	r3, #76	; 0x4c
   2423a:	18fb      	adds	r3, r7, r3
   2423c:	0019      	movs	r1, r3
   2423e:	2003      	movs	r0, #3
   24240:	4b62      	ldr	r3, [pc, #392]	; (243cc <system_clock_init+0x344>)
   24242:	4798      	blx	r3
   24244:	2003      	movs	r0, #3
   24246:	4b62      	ldr	r3, [pc, #392]	; (243d0 <system_clock_init+0x348>)
   24248:	4798      	blx	r3
   2424a:	2340      	movs	r3, #64	; 0x40
   2424c:	18fb      	adds	r3, r7, r3
   2424e:	0018      	movs	r0, r3
   24250:	4b5d      	ldr	r3, [pc, #372]	; (243c8 <system_clock_init+0x340>)
   24252:	4798      	blx	r3
   24254:	2340      	movs	r3, #64	; 0x40
   24256:	18fb      	adds	r3, r7, r3
   24258:	2203      	movs	r2, #3
   2425a:	701a      	strb	r2, [r3, #0]
   2425c:	2340      	movs	r3, #64	; 0x40
   2425e:	18fb      	adds	r3, r7, r3
   24260:	2220      	movs	r2, #32
   24262:	605a      	str	r2, [r3, #4]
   24264:	2340      	movs	r3, #64	; 0x40
   24266:	18fb      	adds	r3, r7, r3
   24268:	2200      	movs	r2, #0
   2426a:	721a      	strb	r2, [r3, #8]
   2426c:	2340      	movs	r3, #64	; 0x40
   2426e:	18fb      	adds	r3, r7, r3
   24270:	2200      	movs	r2, #0
   24272:	725a      	strb	r2, [r3, #9]
   24274:	2340      	movs	r3, #64	; 0x40
   24276:	18fb      	adds	r3, r7, r3
   24278:	0019      	movs	r1, r3
   2427a:	2004      	movs	r0, #4
   2427c:	4b53      	ldr	r3, [pc, #332]	; (243cc <system_clock_init+0x344>)
   2427e:	4798      	blx	r3
   24280:	2004      	movs	r0, #4
   24282:	4b53      	ldr	r3, [pc, #332]	; (243d0 <system_clock_init+0x348>)
   24284:	4798      	blx	r3
   24286:	2334      	movs	r3, #52	; 0x34
   24288:	18fb      	adds	r3, r7, r3
   2428a:	0018      	movs	r0, r3
   2428c:	4b4e      	ldr	r3, [pc, #312]	; (243c8 <system_clock_init+0x340>)
   2428e:	4798      	blx	r3
   24290:	2334      	movs	r3, #52	; 0x34
   24292:	18fb      	adds	r3, r7, r3
   24294:	2207      	movs	r2, #7
   24296:	701a      	strb	r2, [r3, #0]
   24298:	2334      	movs	r3, #52	; 0x34
   2429a:	18fb      	adds	r3, r7, r3
   2429c:	2201      	movs	r2, #1
   2429e:	605a      	str	r2, [r3, #4]
   242a0:	2334      	movs	r3, #52	; 0x34
   242a2:	18fb      	adds	r3, r7, r3
   242a4:	2200      	movs	r2, #0
   242a6:	721a      	strb	r2, [r3, #8]
   242a8:	2334      	movs	r3, #52	; 0x34
   242aa:	18fb      	adds	r3, r7, r3
   242ac:	2200      	movs	r2, #0
   242ae:	725a      	strb	r2, [r3, #9]
   242b0:	2334      	movs	r3, #52	; 0x34
   242b2:	18fb      	adds	r3, r7, r3
   242b4:	0019      	movs	r1, r3
   242b6:	2005      	movs	r0, #5
   242b8:	4b44      	ldr	r3, [pc, #272]	; (243cc <system_clock_init+0x344>)
   242ba:	4798      	blx	r3
   242bc:	2005      	movs	r0, #5
   242be:	4b44      	ldr	r3, [pc, #272]	; (243d0 <system_clock_init+0x348>)
   242c0:	4798      	blx	r3
   242c2:	2328      	movs	r3, #40	; 0x28
   242c4:	18fb      	adds	r3, r7, r3
   242c6:	0018      	movs	r0, r3
   242c8:	4b3f      	ldr	r3, [pc, #252]	; (243c8 <system_clock_init+0x340>)
   242ca:	4798      	blx	r3
   242cc:	2328      	movs	r3, #40	; 0x28
   242ce:	18fb      	adds	r3, r7, r3
   242d0:	2206      	movs	r2, #6
   242d2:	701a      	strb	r2, [r3, #0]
   242d4:	2328      	movs	r3, #40	; 0x28
   242d6:	18fb      	adds	r3, r7, r3
   242d8:	2201      	movs	r2, #1
   242da:	605a      	str	r2, [r3, #4]
   242dc:	2328      	movs	r3, #40	; 0x28
   242de:	18fb      	adds	r3, r7, r3
   242e0:	2201      	movs	r2, #1
   242e2:	721a      	strb	r2, [r3, #8]
   242e4:	2328      	movs	r3, #40	; 0x28
   242e6:	18fb      	adds	r3, r7, r3
   242e8:	2200      	movs	r2, #0
   242ea:	725a      	strb	r2, [r3, #9]
   242ec:	2328      	movs	r3, #40	; 0x28
   242ee:	18fb      	adds	r3, r7, r3
   242f0:	0019      	movs	r1, r3
   242f2:	2006      	movs	r0, #6
   242f4:	4b35      	ldr	r3, [pc, #212]	; (243cc <system_clock_init+0x344>)
   242f6:	4798      	blx	r3
   242f8:	2006      	movs	r0, #6
   242fa:	4b35      	ldr	r3, [pc, #212]	; (243d0 <system_clock_init+0x348>)
   242fc:	4798      	blx	r3
#  if CONF_CLOCK_DFLL_ENABLE == true
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
   242fe:	230c      	movs	r3, #12
   24300:	18fb      	adds	r3, r7, r3
   24302:	0018      	movs	r0, r3
   24304:	4b33      	ldr	r3, [pc, #204]	; (243d4 <system_clock_init+0x34c>)
   24306:	4798      	blx	r3
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
   24308:	230c      	movs	r3, #12
   2430a:	18fb      	adds	r3, r7, r3
   2430c:	2201      	movs	r2, #1
   2430e:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
   24310:	230c      	movs	r3, #12
   24312:	18fb      	adds	r3, r7, r3
   24314:	0019      	movs	r1, r3
   24316:	2000      	movs	r0, #0
   24318:	4b2f      	ldr	r3, [pc, #188]	; (243d8 <system_clock_init+0x350>)
   2431a:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
   2431c:	2000      	movs	r0, #0
   2431e:	4b2f      	ldr	r3, [pc, #188]	; (243dc <system_clock_init+0x354>)
   24320:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
   24322:	2007      	movs	r0, #7
   24324:	4b20      	ldr	r3, [pc, #128]	; (243a8 <system_clock_init+0x320>)
   24326:	4798      	blx	r3
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
   24328:	46c0      	nop			; (mov r8, r8)
   2432a:	2007      	movs	r0, #7
   2432c:	4b1f      	ldr	r3, [pc, #124]	; (243ac <system_clock_init+0x324>)
   2432e:	4798      	blx	r3
   24330:	0003      	movs	r3, r0
   24332:	001a      	movs	r2, r3
   24334:	2301      	movs	r3, #1
   24336:	4053      	eors	r3, r2
   24338:	b2db      	uxtb	r3, r3
   2433a:	2b00      	cmp	r3, #0
   2433c:	d1f5      	bne.n	2432a <system_clock_init+0x2a2>

#  endif
#endif

	/* CPU and BUS clocks */
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);
   2433e:	2000      	movs	r0, #0
   24340:	4b27      	ldr	r3, [pc, #156]	; (243e0 <system_clock_init+0x358>)
   24342:	4798      	blx	r3

	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBA, CONF_CLOCK_APBA_DIVIDER);
   24344:	2100      	movs	r1, #0
   24346:	2000      	movs	r0, #0
   24348:	4b26      	ldr	r3, [pc, #152]	; (243e4 <system_clock_init+0x35c>)
   2434a:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);
   2434c:	2100      	movs	r1, #0
   2434e:	2001      	movs	r0, #1
   24350:	4b24      	ldr	r3, [pc, #144]	; (243e4 <system_clock_init+0x35c>)
   24352:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);
   24354:	2100      	movs	r1, #0
   24356:	2002      	movs	r0, #2
   24358:	4b22      	ldr	r3, [pc, #136]	; (243e4 <system_clock_init+0x35c>)
   2435a:	4798      	blx	r3

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
   2435c:	003b      	movs	r3, r7
   2435e:	0018      	movs	r0, r3
   24360:	4b19      	ldr	r3, [pc, #100]	; (243c8 <system_clock_init+0x340>)
   24362:	4798      	blx	r3
   24364:	003b      	movs	r3, r7
   24366:	2207      	movs	r2, #7
   24368:	701a      	strb	r2, [r3, #0]
   2436a:	003b      	movs	r3, r7
   2436c:	2201      	movs	r2, #1
   2436e:	605a      	str	r2, [r3, #4]
   24370:	003b      	movs	r3, r7
   24372:	2200      	movs	r2, #0
   24374:	721a      	strb	r2, [r3, #8]
   24376:	003b      	movs	r3, r7
   24378:	2200      	movs	r2, #0
   2437a:	725a      	strb	r2, [r3, #9]
   2437c:	003b      	movs	r3, r7
   2437e:	0019      	movs	r1, r3
   24380:	2000      	movs	r0, #0
   24382:	4b12      	ldr	r3, [pc, #72]	; (243cc <system_clock_init+0x344>)
   24384:	4798      	blx	r3
   24386:	2000      	movs	r0, #0
   24388:	4b11      	ldr	r3, [pc, #68]	; (243d0 <system_clock_init+0x348>)
   2438a:	4798      	blx	r3
#endif
}
   2438c:	46c0      	nop			; (mov r8, r8)
   2438e:	46bd      	mov	sp, r7
   24390:	b02a      	add	sp, #168	; 0xa8
   24392:	bd80      	pop	{r7, pc}
   24394:	40000800 	.word	0x40000800
   24398:	00023b65 	.word	0x00023b65
   2439c:	00024051 	.word	0x00024051
   243a0:	00023a35 	.word	0x00023a35
   243a4:	00023d31 	.word	0x00023d31
   243a8:	00023f21 	.word	0x00023f21
   243ac:	00023fcd 	.word	0x00023fcd
   243b0:	00023a9f 	.word	0x00023a9f
   243b4:	00806024 	.word	0x00806024
   243b8:	00023e51 	.word	0x00023e51
   243bc:	00023a7d 	.word	0x00023a7d
   243c0:	00023cb9 	.word	0x00023cb9
   243c4:	0002448d 	.word	0x0002448d
   243c8:	000239f1 	.word	0x000239f1
   243cc:	000244bd 	.word	0x000244bd
   243d0:	000245e1 	.word	0x000245e1
   243d4:	00023a1f 	.word	0x00023a1f
   243d8:	00024715 	.word	0x00024715
   243dc:	00024759 	.word	0x00024759
   243e0:	00023af1 	.word	0x00023af1
   243e4:	00023b11 	.word	0x00023b11

000243e8 <system_apb_clock_set_mask>:
{
   243e8:	b580      	push	{r7, lr}
   243ea:	b082      	sub	sp, #8
   243ec:	af00      	add	r7, sp, #0
   243ee:	0002      	movs	r2, r0
   243f0:	6039      	str	r1, [r7, #0]
   243f2:	1dfb      	adds	r3, r7, #7
   243f4:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   243f6:	1dfb      	adds	r3, r7, #7
   243f8:	781b      	ldrb	r3, [r3, #0]
   243fa:	2b01      	cmp	r3, #1
   243fc:	d00a      	beq.n	24414 <system_apb_clock_set_mask+0x2c>
   243fe:	2b02      	cmp	r3, #2
   24400:	d00f      	beq.n	24422 <system_apb_clock_set_mask+0x3a>
   24402:	2b00      	cmp	r3, #0
   24404:	d114      	bne.n	24430 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   24406:	4b0e      	ldr	r3, [pc, #56]	; (24440 <system_apb_clock_set_mask+0x58>)
   24408:	4a0d      	ldr	r2, [pc, #52]	; (24440 <system_apb_clock_set_mask+0x58>)
   2440a:	6991      	ldr	r1, [r2, #24]
   2440c:	683a      	ldr	r2, [r7, #0]
   2440e:	430a      	orrs	r2, r1
   24410:	619a      	str	r2, [r3, #24]
			break;
   24412:	e00f      	b.n	24434 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   24414:	4b0a      	ldr	r3, [pc, #40]	; (24440 <system_apb_clock_set_mask+0x58>)
   24416:	4a0a      	ldr	r2, [pc, #40]	; (24440 <system_apb_clock_set_mask+0x58>)
   24418:	69d1      	ldr	r1, [r2, #28]
   2441a:	683a      	ldr	r2, [r7, #0]
   2441c:	430a      	orrs	r2, r1
   2441e:	61da      	str	r2, [r3, #28]
			break;
   24420:	e008      	b.n	24434 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   24422:	4b07      	ldr	r3, [pc, #28]	; (24440 <system_apb_clock_set_mask+0x58>)
   24424:	4a06      	ldr	r2, [pc, #24]	; (24440 <system_apb_clock_set_mask+0x58>)
   24426:	6a11      	ldr	r1, [r2, #32]
   24428:	683a      	ldr	r2, [r7, #0]
   2442a:	430a      	orrs	r2, r1
   2442c:	621a      	str	r2, [r3, #32]
			break;
   2442e:	e001      	b.n	24434 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   24430:	2317      	movs	r3, #23
   24432:	e000      	b.n	24436 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   24434:	2300      	movs	r3, #0
}
   24436:	0018      	movs	r0, r3
   24438:	46bd      	mov	sp, r7
   2443a:	b002      	add	sp, #8
   2443c:	bd80      	pop	{r7, pc}
   2443e:	46c0      	nop			; (mov r8, r8)
   24440:	40000400 	.word	0x40000400

00024444 <system_interrupt_enter_critical_section>:
{
   24444:	b580      	push	{r7, lr}
   24446:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
   24448:	4b02      	ldr	r3, [pc, #8]	; (24454 <system_interrupt_enter_critical_section+0x10>)
   2444a:	4798      	blx	r3
}
   2444c:	46c0      	nop			; (mov r8, r8)
   2444e:	46bd      	mov	sp, r7
   24450:	bd80      	pop	{r7, pc}
   24452:	46c0      	nop			; (mov r8, r8)
   24454:	0002395d 	.word	0x0002395d

00024458 <system_interrupt_leave_critical_section>:
{
   24458:	b580      	push	{r7, lr}
   2445a:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
   2445c:	4b02      	ldr	r3, [pc, #8]	; (24468 <system_interrupt_leave_critical_section+0x10>)
   2445e:	4798      	blx	r3
}
   24460:	46c0      	nop			; (mov r8, r8)
   24462:	46bd      	mov	sp, r7
   24464:	bd80      	pop	{r7, pc}
   24466:	46c0      	nop			; (mov r8, r8)
   24468:	000239b1 	.word	0x000239b1

0002446c <system_gclk_is_syncing>:
 *
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
   2446c:	b580      	push	{r7, lr}
   2446e:	af00      	add	r7, sp, #0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
   24470:	4b05      	ldr	r3, [pc, #20]	; (24488 <system_gclk_is_syncing+0x1c>)
   24472:	785b      	ldrb	r3, [r3, #1]
   24474:	b2db      	uxtb	r3, r3
   24476:	b25b      	sxtb	r3, r3
   24478:	2b00      	cmp	r3, #0
   2447a:	da01      	bge.n	24480 <system_gclk_is_syncing+0x14>
		return true;
   2447c:	2301      	movs	r3, #1
   2447e:	e000      	b.n	24482 <system_gclk_is_syncing+0x16>
	}

	return false;
   24480:	2300      	movs	r3, #0
}
   24482:	0018      	movs	r0, r3
   24484:	46bd      	mov	sp, r7
   24486:	bd80      	pop	{r7, pc}
   24488:	40000c00 	.word	0x40000c00

0002448c <system_gclk_init>:
 *
 * Initializes the Generic Clock module, disabling and resetting all active
 * Generic Clock Generators and Channels to their power-on default values.
 */
void system_gclk_init(void)
{
   2448c:	b580      	push	{r7, lr}
   2448e:	af00      	add	r7, sp, #0
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);
   24490:	2108      	movs	r1, #8
   24492:	2000      	movs	r0, #0
   24494:	4b07      	ldr	r3, [pc, #28]	; (244b4 <system_gclk_init+0x28>)
   24496:	4798      	blx	r3

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
   24498:	4b07      	ldr	r3, [pc, #28]	; (244b8 <system_gclk_init+0x2c>)
   2449a:	2201      	movs	r2, #1
   2449c:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
   2449e:	46c0      	nop			; (mov r8, r8)
   244a0:	4b05      	ldr	r3, [pc, #20]	; (244b8 <system_gclk_init+0x2c>)
   244a2:	781b      	ldrb	r3, [r3, #0]
   244a4:	b2db      	uxtb	r3, r3
   244a6:	001a      	movs	r2, r3
   244a8:	2301      	movs	r3, #1
   244aa:	4013      	ands	r3, r2
   244ac:	d1f8      	bne.n	244a0 <system_gclk_init+0x14>
		/* Wait for reset to complete */
	}
}
   244ae:	46c0      	nop			; (mov r8, r8)
   244b0:	46bd      	mov	sp, r7
   244b2:	bd80      	pop	{r7, pc}
   244b4:	000243e9 	.word	0x000243e9
   244b8:	40000c00 	.word	0x40000c00

000244bc <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
   244bc:	b580      	push	{r7, lr}
   244be:	b086      	sub	sp, #24
   244c0:	af00      	add	r7, sp, #0
   244c2:	0002      	movs	r2, r0
   244c4:	6039      	str	r1, [r7, #0]
   244c6:	1dfb      	adds	r3, r7, #7
   244c8:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
   244ca:	1dfb      	adds	r3, r7, #7
   244cc:	781b      	ldrb	r3, [r3, #0]
   244ce:	617b      	str	r3, [r7, #20]
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);
   244d0:	1dfb      	adds	r3, r7, #7
   244d2:	781b      	ldrb	r3, [r3, #0]
   244d4:	613b      	str	r3, [r7, #16]

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
   244d6:	683b      	ldr	r3, [r7, #0]
   244d8:	781b      	ldrb	r3, [r3, #0]
   244da:	021b      	lsls	r3, r3, #8
   244dc:	001a      	movs	r2, r3
   244de:	697b      	ldr	r3, [r7, #20]
   244e0:	4313      	orrs	r3, r2
   244e2:	617b      	str	r3, [r7, #20]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
   244e4:	683b      	ldr	r3, [r7, #0]
   244e6:	785b      	ldrb	r3, [r3, #1]
   244e8:	2b00      	cmp	r3, #0
   244ea:	d004      	beq.n	244f6 <system_gclk_gen_set_config+0x3a>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
   244ec:	697b      	ldr	r3, [r7, #20]
   244ee:	2280      	movs	r2, #128	; 0x80
   244f0:	02d2      	lsls	r2, r2, #11
   244f2:	4313      	orrs	r3, r2
   244f4:	617b      	str	r3, [r7, #20]
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
   244f6:	683b      	ldr	r3, [r7, #0]
   244f8:	7a5b      	ldrb	r3, [r3, #9]
   244fa:	2b00      	cmp	r3, #0
   244fc:	d004      	beq.n	24508 <system_gclk_gen_set_config+0x4c>
		new_genctrl_config |= GCLK_GENCTRL_OE;
   244fe:	697b      	ldr	r3, [r7, #20]
   24500:	2280      	movs	r2, #128	; 0x80
   24502:	0312      	lsls	r2, r2, #12
   24504:	4313      	orrs	r3, r2
   24506:	617b      	str	r3, [r7, #20]
	}

	/* Set division factor */
	if (config->division_factor > 1) {
   24508:	683b      	ldr	r3, [r7, #0]
   2450a:	685b      	ldr	r3, [r3, #4]
   2450c:	2b01      	cmp	r3, #1
   2450e:	d92c      	bls.n	2456a <system_gclk_gen_set_config+0xae>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
   24510:	683b      	ldr	r3, [r7, #0]
   24512:	685a      	ldr	r2, [r3, #4]
   24514:	683b      	ldr	r3, [r7, #0]
   24516:	685b      	ldr	r3, [r3, #4]
   24518:	3b01      	subs	r3, #1
   2451a:	4013      	ands	r3, r2
   2451c:	d11a      	bne.n	24554 <system_gclk_gen_set_config+0x98>
			/* Determine the index of the highest bit set to get the
			 * division factor that must be loaded into the division
			 * register */

			uint32_t div2_count = 0;
   2451e:	2300      	movs	r3, #0
   24520:	60fb      	str	r3, [r7, #12]

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
   24522:	2302      	movs	r3, #2
   24524:	60bb      	str	r3, [r7, #8]
   24526:	e005      	b.n	24534 <system_gclk_gen_set_config+0x78>
						mask <<= 1) {
				div2_count++;
   24528:	68fb      	ldr	r3, [r7, #12]
   2452a:	3301      	adds	r3, #1
   2452c:	60fb      	str	r3, [r7, #12]
						mask <<= 1) {
   2452e:	68bb      	ldr	r3, [r7, #8]
   24530:	005b      	lsls	r3, r3, #1
   24532:	60bb      	str	r3, [r7, #8]
			for (mask = (1UL << 1); mask < config->division_factor;
   24534:	683b      	ldr	r3, [r7, #0]
   24536:	685a      	ldr	r2, [r3, #4]
   24538:	68bb      	ldr	r3, [r7, #8]
   2453a:	429a      	cmp	r2, r3
   2453c:	d8f4      	bhi.n	24528 <system_gclk_gen_set_config+0x6c>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
   2453e:	68fb      	ldr	r3, [r7, #12]
   24540:	021b      	lsls	r3, r3, #8
   24542:	693a      	ldr	r2, [r7, #16]
   24544:	4313      	orrs	r3, r2
   24546:	613b      	str	r3, [r7, #16]
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
   24548:	697b      	ldr	r3, [r7, #20]
   2454a:	2280      	movs	r2, #128	; 0x80
   2454c:	0352      	lsls	r2, r2, #13
   2454e:	4313      	orrs	r3, r2
   24550:	617b      	str	r3, [r7, #20]
   24552:	e00a      	b.n	2456a <system_gclk_gen_set_config+0xae>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
   24554:	683b      	ldr	r3, [r7, #0]
   24556:	685b      	ldr	r3, [r3, #4]
   24558:	021b      	lsls	r3, r3, #8
			new_gendiv_config  |=
   2455a:	693a      	ldr	r2, [r7, #16]
   2455c:	4313      	orrs	r3, r2
   2455e:	613b      	str	r3, [r7, #16]

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
   24560:	697b      	ldr	r3, [r7, #20]
   24562:	2280      	movs	r2, #128	; 0x80
   24564:	0292      	lsls	r2, r2, #10
   24566:	4313      	orrs	r3, r2
   24568:	617b      	str	r3, [r7, #20]
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
   2456a:	683b      	ldr	r3, [r7, #0]
   2456c:	7a1b      	ldrb	r3, [r3, #8]
   2456e:	2b00      	cmp	r3, #0
   24570:	d004      	beq.n	2457c <system_gclk_gen_set_config+0xc0>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
   24572:	697b      	ldr	r3, [r7, #20]
   24574:	2280      	movs	r2, #128	; 0x80
   24576:	0392      	lsls	r2, r2, #14
   24578:	4313      	orrs	r3, r2
   2457a:	617b      	str	r3, [r7, #20]
	}

	while (system_gclk_is_syncing()) {
   2457c:	46c0      	nop			; (mov r8, r8)
   2457e:	4b13      	ldr	r3, [pc, #76]	; (245cc <system_gclk_gen_set_config+0x110>)
   24580:	4798      	blx	r3
   24582:	1e03      	subs	r3, r0, #0
   24584:	d1fb      	bne.n	2457e <system_gclk_gen_set_config+0xc2>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
   24586:	4b12      	ldr	r3, [pc, #72]	; (245d0 <system_gclk_gen_set_config+0x114>)
   24588:	4798      	blx	r3

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
   2458a:	4a12      	ldr	r2, [pc, #72]	; (245d4 <system_gclk_gen_set_config+0x118>)
   2458c:	1dfb      	adds	r3, r7, #7
   2458e:	781b      	ldrb	r3, [r3, #0]
   24590:	7013      	strb	r3, [r2, #0]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
   24592:	46c0      	nop			; (mov r8, r8)
   24594:	4b0d      	ldr	r3, [pc, #52]	; (245cc <system_gclk_gen_set_config+0x110>)
   24596:	4798      	blx	r3
   24598:	1e03      	subs	r3, r0, #0
   2459a:	d1fb      	bne.n	24594 <system_gclk_gen_set_config+0xd8>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
   2459c:	4b0e      	ldr	r3, [pc, #56]	; (245d8 <system_gclk_gen_set_config+0x11c>)
   2459e:	693a      	ldr	r2, [r7, #16]
   245a0:	609a      	str	r2, [r3, #8]

	while (system_gclk_is_syncing()) {
   245a2:	46c0      	nop			; (mov r8, r8)
   245a4:	4b09      	ldr	r3, [pc, #36]	; (245cc <system_gclk_gen_set_config+0x110>)
   245a6:	4798      	blx	r3
   245a8:	1e03      	subs	r3, r0, #0
   245aa:	d1fb      	bne.n	245a4 <system_gclk_gen_set_config+0xe8>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
   245ac:	4b0a      	ldr	r3, [pc, #40]	; (245d8 <system_gclk_gen_set_config+0x11c>)
   245ae:	4a0a      	ldr	r2, [pc, #40]	; (245d8 <system_gclk_gen_set_config+0x11c>)
   245b0:	6851      	ldr	r1, [r2, #4]
   245b2:	2280      	movs	r2, #128	; 0x80
   245b4:	0252      	lsls	r2, r2, #9
   245b6:	4011      	ands	r1, r2
   245b8:	697a      	ldr	r2, [r7, #20]
   245ba:	430a      	orrs	r2, r1
   245bc:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
   245be:	4b07      	ldr	r3, [pc, #28]	; (245dc <system_gclk_gen_set_config+0x120>)
   245c0:	4798      	blx	r3
}
   245c2:	46c0      	nop			; (mov r8, r8)
   245c4:	46bd      	mov	sp, r7
   245c6:	b006      	add	sp, #24
   245c8:	bd80      	pop	{r7, pc}
   245ca:	46c0      	nop			; (mov r8, r8)
   245cc:	0002446d 	.word	0x0002446d
   245d0:	00024445 	.word	0x00024445
   245d4:	40000c08 	.word	0x40000c08
   245d8:	40000c00 	.word	0x40000c00
   245dc:	00024459 	.word	0x00024459

000245e0 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
   245e0:	b580      	push	{r7, lr}
   245e2:	b082      	sub	sp, #8
   245e4:	af00      	add	r7, sp, #0
   245e6:	0002      	movs	r2, r0
   245e8:	1dfb      	adds	r3, r7, #7
   245ea:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
   245ec:	46c0      	nop			; (mov r8, r8)
   245ee:	4b0e      	ldr	r3, [pc, #56]	; (24628 <system_gclk_gen_enable+0x48>)
   245f0:	4798      	blx	r3
   245f2:	1e03      	subs	r3, r0, #0
   245f4:	d1fb      	bne.n	245ee <system_gclk_gen_enable+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
   245f6:	4b0d      	ldr	r3, [pc, #52]	; (2462c <system_gclk_gen_enable+0x4c>)
   245f8:	4798      	blx	r3

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   245fa:	4a0d      	ldr	r2, [pc, #52]	; (24630 <system_gclk_gen_enable+0x50>)
   245fc:	1dfb      	adds	r3, r7, #7
   245fe:	781b      	ldrb	r3, [r3, #0]
   24600:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
   24602:	46c0      	nop			; (mov r8, r8)
   24604:	4b08      	ldr	r3, [pc, #32]	; (24628 <system_gclk_gen_enable+0x48>)
   24606:	4798      	blx	r3
   24608:	1e03      	subs	r3, r0, #0
   2460a:	d1fb      	bne.n	24604 <system_gclk_gen_enable+0x24>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
   2460c:	4b09      	ldr	r3, [pc, #36]	; (24634 <system_gclk_gen_enable+0x54>)
   2460e:	4a09      	ldr	r2, [pc, #36]	; (24634 <system_gclk_gen_enable+0x54>)
   24610:	6852      	ldr	r2, [r2, #4]
   24612:	2180      	movs	r1, #128	; 0x80
   24614:	0249      	lsls	r1, r1, #9
   24616:	430a      	orrs	r2, r1
   24618:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
   2461a:	4b07      	ldr	r3, [pc, #28]	; (24638 <system_gclk_gen_enable+0x58>)
   2461c:	4798      	blx	r3
}
   2461e:	46c0      	nop			; (mov r8, r8)
   24620:	46bd      	mov	sp, r7
   24622:	b002      	add	sp, #8
   24624:	bd80      	pop	{r7, pc}
   24626:	46c0      	nop			; (mov r8, r8)
   24628:	0002446d 	.word	0x0002446d
   2462c:	00024445 	.word	0x00024445
   24630:	40000c04 	.word	0x40000c04
   24634:	40000c00 	.word	0x40000c00
   24638:	00024459 	.word	0x00024459

0002463c <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
   2463c:	b580      	push	{r7, lr}
   2463e:	b086      	sub	sp, #24
   24640:	af00      	add	r7, sp, #0
   24642:	0002      	movs	r2, r0
   24644:	1dfb      	adds	r3, r7, #7
   24646:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
   24648:	46c0      	nop			; (mov r8, r8)
   2464a:	4b2a      	ldr	r3, [pc, #168]	; (246f4 <system_gclk_gen_get_hz+0xb8>)
   2464c:	4798      	blx	r3
   2464e:	1e03      	subs	r3, r0, #0
   24650:	d1fb      	bne.n	2464a <system_gclk_gen_get_hz+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
   24652:	4b29      	ldr	r3, [pc, #164]	; (246f8 <system_gclk_gen_get_hz+0xbc>)
   24654:	4798      	blx	r3

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   24656:	4a29      	ldr	r2, [pc, #164]	; (246fc <system_gclk_gen_get_hz+0xc0>)
   24658:	1dfb      	adds	r3, r7, #7
   2465a:	781b      	ldrb	r3, [r3, #0]
   2465c:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
   2465e:	46c0      	nop			; (mov r8, r8)
   24660:	4b24      	ldr	r3, [pc, #144]	; (246f4 <system_gclk_gen_get_hz+0xb8>)
   24662:	4798      	blx	r3
   24664:	1e03      	subs	r3, r0, #0
   24666:	d1fb      	bne.n	24660 <system_gclk_gen_get_hz+0x24>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
   24668:	4b25      	ldr	r3, [pc, #148]	; (24700 <system_gclk_gen_get_hz+0xc4>)
   2466a:	685b      	ldr	r3, [r3, #4]
   2466c:	04db      	lsls	r3, r3, #19
   2466e:	0edb      	lsrs	r3, r3, #27
   24670:	b2db      	uxtb	r3, r3
	uint32_t gen_input_hz = system_clock_source_get_hz(
   24672:	0018      	movs	r0, r3
   24674:	4b23      	ldr	r3, [pc, #140]	; (24704 <system_gclk_gen_get_hz+0xc8>)
   24676:	4798      	blx	r3
   24678:	0003      	movs	r3, r0
   2467a:	617b      	str	r3, [r7, #20]

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   2467c:	4a1f      	ldr	r2, [pc, #124]	; (246fc <system_gclk_gen_get_hz+0xc0>)
   2467e:	1dfb      	adds	r3, r7, #7
   24680:	781b      	ldrb	r3, [r3, #0]
   24682:	7013      	strb	r3, [r2, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
   24684:	4b1e      	ldr	r3, [pc, #120]	; (24700 <system_gclk_gen_get_hz+0xc4>)
   24686:	685b      	ldr	r3, [r3, #4]
   24688:	02db      	lsls	r3, r3, #11
   2468a:	0fdb      	lsrs	r3, r3, #31
   2468c:	b2da      	uxtb	r2, r3
   2468e:	2313      	movs	r3, #19
   24690:	18fb      	adds	r3, r7, r3
   24692:	701a      	strb	r2, [r3, #0]

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
   24694:	4a1c      	ldr	r2, [pc, #112]	; (24708 <system_gclk_gen_get_hz+0xcc>)
   24696:	1dfb      	adds	r3, r7, #7
   24698:	781b      	ldrb	r3, [r3, #0]
   2469a:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
   2469c:	46c0      	nop			; (mov r8, r8)
   2469e:	4b15      	ldr	r3, [pc, #84]	; (246f4 <system_gclk_gen_get_hz+0xb8>)
   246a0:	4798      	blx	r3
   246a2:	1e03      	subs	r3, r0, #0
   246a4:	d1fb      	bne.n	2469e <system_gclk_gen_get_hz+0x62>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
   246a6:	4b16      	ldr	r3, [pc, #88]	; (24700 <system_gclk_gen_get_hz+0xc4>)
   246a8:	689b      	ldr	r3, [r3, #8]
   246aa:	021b      	lsls	r3, r3, #8
   246ac:	0c1b      	lsrs	r3, r3, #16
   246ae:	b29b      	uxth	r3, r3
   246b0:	60fb      	str	r3, [r7, #12]

	system_interrupt_leave_critical_section();
   246b2:	4b16      	ldr	r3, [pc, #88]	; (2470c <system_gclk_gen_get_hz+0xd0>)
   246b4:	4798      	blx	r3

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
   246b6:	2313      	movs	r3, #19
   246b8:	18fb      	adds	r3, r7, r3
   246ba:	781b      	ldrb	r3, [r3, #0]
   246bc:	2b00      	cmp	r3, #0
   246be:	d109      	bne.n	246d4 <system_gclk_gen_get_hz+0x98>
   246c0:	68fb      	ldr	r3, [r7, #12]
   246c2:	2b01      	cmp	r3, #1
   246c4:	d906      	bls.n	246d4 <system_gclk_gen_get_hz+0x98>
		gen_input_hz /= divider;
   246c6:	4b12      	ldr	r3, [pc, #72]	; (24710 <system_gclk_gen_get_hz+0xd4>)
   246c8:	68f9      	ldr	r1, [r7, #12]
   246ca:	6978      	ldr	r0, [r7, #20]
   246cc:	4798      	blx	r3
   246ce:	0003      	movs	r3, r0
   246d0:	617b      	str	r3, [r7, #20]
   246d2:	e00a      	b.n	246ea <system_gclk_gen_get_hz+0xae>
	} else if (divsel) {
   246d4:	2313      	movs	r3, #19
   246d6:	18fb      	adds	r3, r7, r3
   246d8:	781b      	ldrb	r3, [r3, #0]
   246da:	2b00      	cmp	r3, #0
   246dc:	d005      	beq.n	246ea <system_gclk_gen_get_hz+0xae>
		gen_input_hz >>= (divider+1);
   246de:	68fb      	ldr	r3, [r7, #12]
   246e0:	3301      	adds	r3, #1
   246e2:	697a      	ldr	r2, [r7, #20]
   246e4:	40da      	lsrs	r2, r3
   246e6:	0013      	movs	r3, r2
   246e8:	617b      	str	r3, [r7, #20]
	}

	return gen_input_hz;
   246ea:	697b      	ldr	r3, [r7, #20]
}
   246ec:	0018      	movs	r0, r3
   246ee:	46bd      	mov	sp, r7
   246f0:	b006      	add	sp, #24
   246f2:	bd80      	pop	{r7, pc}
   246f4:	0002446d 	.word	0x0002446d
   246f8:	00024445 	.word	0x00024445
   246fc:	40000c04 	.word	0x40000c04
   24700:	40000c00 	.word	0x40000c00
   24704:	00023bf9 	.word	0x00023bf9
   24708:	40000c08 	.word	0x40000c08
   2470c:	00024459 	.word	0x00024459
   24710:	000262e1 	.word	0x000262e1

00024714 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
   24714:	b580      	push	{r7, lr}
   24716:	b084      	sub	sp, #16
   24718:	af00      	add	r7, sp, #0
   2471a:	0002      	movs	r2, r0
   2471c:	6039      	str	r1, [r7, #0]
   2471e:	1dfb      	adds	r3, r7, #7
   24720:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);
   24722:	1dfb      	adds	r3, r7, #7
   24724:	781b      	ldrb	r3, [r3, #0]
   24726:	60fb      	str	r3, [r7, #12]

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
   24728:	683b      	ldr	r3, [r7, #0]
   2472a:	781b      	ldrb	r3, [r3, #0]
   2472c:	021b      	lsls	r3, r3, #8
   2472e:	001a      	movs	r2, r3
   24730:	68fb      	ldr	r3, [r7, #12]
   24732:	4313      	orrs	r3, r2
   24734:	60fb      	str	r3, [r7, #12]

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
   24736:	1dfb      	adds	r3, r7, #7
   24738:	781b      	ldrb	r3, [r3, #0]
   2473a:	0018      	movs	r0, r3
   2473c:	4b04      	ldr	r3, [pc, #16]	; (24750 <system_gclk_chan_set_config+0x3c>)
   2473e:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
   24740:	4b04      	ldr	r3, [pc, #16]	; (24754 <system_gclk_chan_set_config+0x40>)
   24742:	68fa      	ldr	r2, [r7, #12]
   24744:	b292      	uxth	r2, r2
   24746:	805a      	strh	r2, [r3, #2]
}
   24748:	46c0      	nop			; (mov r8, r8)
   2474a:	46bd      	mov	sp, r7
   2474c:	b004      	add	sp, #16
   2474e:	bd80      	pop	{r7, pc}
   24750:	000247a1 	.word	0x000247a1
   24754:	40000c00 	.word	0x40000c00

00024758 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
   24758:	b580      	push	{r7, lr}
   2475a:	b082      	sub	sp, #8
   2475c:	af00      	add	r7, sp, #0
   2475e:	0002      	movs	r2, r0
   24760:	1dfb      	adds	r3, r7, #7
   24762:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
   24764:	4b0a      	ldr	r3, [pc, #40]	; (24790 <system_gclk_chan_enable+0x38>)
   24766:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   24768:	4a0a      	ldr	r2, [pc, #40]	; (24794 <system_gclk_chan_enable+0x3c>)
   2476a:	1dfb      	adds	r3, r7, #7
   2476c:	781b      	ldrb	r3, [r3, #0]
   2476e:	7013      	strb	r3, [r2, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
   24770:	4909      	ldr	r1, [pc, #36]	; (24798 <system_gclk_chan_enable+0x40>)
   24772:	4b09      	ldr	r3, [pc, #36]	; (24798 <system_gclk_chan_enable+0x40>)
   24774:	885b      	ldrh	r3, [r3, #2]
   24776:	b29b      	uxth	r3, r3
   24778:	2280      	movs	r2, #128	; 0x80
   2477a:	01d2      	lsls	r2, r2, #7
   2477c:	4313      	orrs	r3, r2
   2477e:	b29b      	uxth	r3, r3
   24780:	804b      	strh	r3, [r1, #2]

	system_interrupt_leave_critical_section();
   24782:	4b06      	ldr	r3, [pc, #24]	; (2479c <system_gclk_chan_enable+0x44>)
   24784:	4798      	blx	r3
}
   24786:	46c0      	nop			; (mov r8, r8)
   24788:	46bd      	mov	sp, r7
   2478a:	b002      	add	sp, #8
   2478c:	bd80      	pop	{r7, pc}
   2478e:	46c0      	nop			; (mov r8, r8)
   24790:	00024445 	.word	0x00024445
   24794:	40000c02 	.word	0x40000c02
   24798:	40000c00 	.word	0x40000c00
   2479c:	00024459 	.word	0x00024459

000247a0 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
   247a0:	b580      	push	{r7, lr}
   247a2:	b084      	sub	sp, #16
   247a4:	af00      	add	r7, sp, #0
   247a6:	0002      	movs	r2, r0
   247a8:	1dfb      	adds	r3, r7, #7
   247aa:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
   247ac:	4b1c      	ldr	r3, [pc, #112]	; (24820 <system_gclk_chan_disable+0x80>)
   247ae:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   247b0:	4a1c      	ldr	r2, [pc, #112]	; (24824 <system_gclk_chan_disable+0x84>)
   247b2:	1dfb      	adds	r3, r7, #7
   247b4:	781b      	ldrb	r3, [r3, #0]
   247b6:	7013      	strb	r3, [r2, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
   247b8:	4b1b      	ldr	r3, [pc, #108]	; (24828 <system_gclk_chan_disable+0x88>)
   247ba:	885b      	ldrh	r3, [r3, #2]
   247bc:	051b      	lsls	r3, r3, #20
   247be:	0f1b      	lsrs	r3, r3, #28
   247c0:	b2db      	uxtb	r3, r3
   247c2:	60fb      	str	r3, [r7, #12]
	GCLK->CLKCTRL.bit.GEN = 0;
   247c4:	4a18      	ldr	r2, [pc, #96]	; (24828 <system_gclk_chan_disable+0x88>)
   247c6:	8853      	ldrh	r3, [r2, #2]
   247c8:	4918      	ldr	r1, [pc, #96]	; (2482c <system_gclk_chan_disable+0x8c>)
   247ca:	400b      	ands	r3, r1
   247cc:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
   247ce:	4a16      	ldr	r2, [pc, #88]	; (24828 <system_gclk_chan_disable+0x88>)
   247d0:	4b15      	ldr	r3, [pc, #84]	; (24828 <system_gclk_chan_disable+0x88>)
   247d2:	885b      	ldrh	r3, [r3, #2]
   247d4:	b29b      	uxth	r3, r3
   247d6:	4916      	ldr	r1, [pc, #88]	; (24830 <system_gclk_chan_disable+0x90>)
   247d8:	400b      	ands	r3, r1
   247da:	b29b      	uxth	r3, r3
   247dc:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
   247de:	46c0      	nop			; (mov r8, r8)
   247e0:	4b11      	ldr	r3, [pc, #68]	; (24828 <system_gclk_chan_disable+0x88>)
   247e2:	885b      	ldrh	r3, [r3, #2]
   247e4:	b29b      	uxth	r3, r3
   247e6:	001a      	movs	r2, r3
   247e8:	2380      	movs	r3, #128	; 0x80
   247ea:	01db      	lsls	r3, r3, #7
   247ec:	4013      	ands	r3, r2
   247ee:	d1f7      	bne.n	247e0 <system_gclk_chan_disable+0x40>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
   247f0:	4a0d      	ldr	r2, [pc, #52]	; (24828 <system_gclk_chan_disable+0x88>)
   247f2:	68fb      	ldr	r3, [r7, #12]
   247f4:	b2db      	uxtb	r3, r3
   247f6:	1c19      	adds	r1, r3, #0
   247f8:	230f      	movs	r3, #15
   247fa:	400b      	ands	r3, r1
   247fc:	b2d9      	uxtb	r1, r3
   247fe:	8853      	ldrh	r3, [r2, #2]
   24800:	1c08      	adds	r0, r1, #0
   24802:	210f      	movs	r1, #15
   24804:	4001      	ands	r1, r0
   24806:	0208      	lsls	r0, r1, #8
   24808:	4908      	ldr	r1, [pc, #32]	; (2482c <system_gclk_chan_disable+0x8c>)
   2480a:	400b      	ands	r3, r1
   2480c:	1c19      	adds	r1, r3, #0
   2480e:	1c03      	adds	r3, r0, #0
   24810:	430b      	orrs	r3, r1
   24812:	8053      	strh	r3, [r2, #2]

	system_interrupt_leave_critical_section();
   24814:	4b07      	ldr	r3, [pc, #28]	; (24834 <system_gclk_chan_disable+0x94>)
   24816:	4798      	blx	r3
}
   24818:	46c0      	nop			; (mov r8, r8)
   2481a:	46bd      	mov	sp, r7
   2481c:	b004      	add	sp, #16
   2481e:	bd80      	pop	{r7, pc}
   24820:	00024445 	.word	0x00024445
   24824:	40000c02 	.word	0x40000c02
   24828:	40000c00 	.word	0x40000c00
   2482c:	fffff0ff 	.word	0xfffff0ff
   24830:	ffffbfff 	.word	0xffffbfff
   24834:	00024459 	.word	0x00024459

00024838 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
   24838:	b580      	push	{r7, lr}
   2483a:	b084      	sub	sp, #16
   2483c:	af00      	add	r7, sp, #0
   2483e:	0002      	movs	r2, r0
   24840:	1dfb      	adds	r3, r7, #7
   24842:	701a      	strb	r2, [r3, #0]
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
   24844:	4b0d      	ldr	r3, [pc, #52]	; (2487c <system_gclk_chan_get_hz+0x44>)
   24846:	4798      	blx	r3

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   24848:	4a0d      	ldr	r2, [pc, #52]	; (24880 <system_gclk_chan_get_hz+0x48>)
   2484a:	1dfb      	adds	r3, r7, #7
   2484c:	781b      	ldrb	r3, [r3, #0]
   2484e:	7013      	strb	r3, [r2, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
   24850:	4b0c      	ldr	r3, [pc, #48]	; (24884 <system_gclk_chan_get_hz+0x4c>)
   24852:	885b      	ldrh	r3, [r3, #2]
   24854:	051b      	lsls	r3, r3, #20
   24856:	0f1b      	lsrs	r3, r3, #28
   24858:	b2da      	uxtb	r2, r3
   2485a:	230f      	movs	r3, #15
   2485c:	18fb      	adds	r3, r7, r3
   2485e:	701a      	strb	r2, [r3, #0]

	system_interrupt_leave_critical_section();
   24860:	4b09      	ldr	r3, [pc, #36]	; (24888 <system_gclk_chan_get_hz+0x50>)
   24862:	4798      	blx	r3

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
   24864:	230f      	movs	r3, #15
   24866:	18fb      	adds	r3, r7, r3
   24868:	781b      	ldrb	r3, [r3, #0]
   2486a:	0018      	movs	r0, r3
   2486c:	4b07      	ldr	r3, [pc, #28]	; (2488c <system_gclk_chan_get_hz+0x54>)
   2486e:	4798      	blx	r3
   24870:	0003      	movs	r3, r0
}
   24872:	0018      	movs	r0, r3
   24874:	46bd      	mov	sp, r7
   24876:	b004      	add	sp, #16
   24878:	bd80      	pop	{r7, pc}
   2487a:	46c0      	nop			; (mov r8, r8)
   2487c:	00024445 	.word	0x00024445
   24880:	40000c02 	.word	0x40000c02
   24884:	40000c00 	.word	0x40000c00
   24888:	00024459 	.word	0x00024459
   2488c:	0002463d 	.word	0x0002463d

00024890 <system_pinmux_get_group_from_gpio_pin>:
{
   24890:	b580      	push	{r7, lr}
   24892:	b084      	sub	sp, #16
   24894:	af00      	add	r7, sp, #0
   24896:	0002      	movs	r2, r0
   24898:	1dfb      	adds	r3, r7, #7
   2489a:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   2489c:	230f      	movs	r3, #15
   2489e:	18fb      	adds	r3, r7, r3
   248a0:	1dfa      	adds	r2, r7, #7
   248a2:	7812      	ldrb	r2, [r2, #0]
   248a4:	09d2      	lsrs	r2, r2, #7
   248a6:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   248a8:	230e      	movs	r3, #14
   248aa:	18fb      	adds	r3, r7, r3
   248ac:	1dfa      	adds	r2, r7, #7
   248ae:	7812      	ldrb	r2, [r2, #0]
   248b0:	0952      	lsrs	r2, r2, #5
   248b2:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   248b4:	4b0d      	ldr	r3, [pc, #52]	; (248ec <system_pinmux_get_group_from_gpio_pin+0x5c>)
   248b6:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   248b8:	230f      	movs	r3, #15
   248ba:	18fb      	adds	r3, r7, r3
   248bc:	781b      	ldrb	r3, [r3, #0]
   248be:	2b00      	cmp	r3, #0
   248c0:	d10f      	bne.n	248e2 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   248c2:	230f      	movs	r3, #15
   248c4:	18fb      	adds	r3, r7, r3
   248c6:	781b      	ldrb	r3, [r3, #0]
   248c8:	009b      	lsls	r3, r3, #2
   248ca:	2210      	movs	r2, #16
   248cc:	4694      	mov	ip, r2
   248ce:	44bc      	add	ip, r7
   248d0:	4463      	add	r3, ip
   248d2:	3b08      	subs	r3, #8
   248d4:	681a      	ldr	r2, [r3, #0]
   248d6:	230e      	movs	r3, #14
   248d8:	18fb      	adds	r3, r7, r3
   248da:	781b      	ldrb	r3, [r3, #0]
   248dc:	01db      	lsls	r3, r3, #7
   248de:	18d3      	adds	r3, r2, r3
   248e0:	e000      	b.n	248e4 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   248e2:	2300      	movs	r3, #0
}
   248e4:	0018      	movs	r0, r3
   248e6:	46bd      	mov	sp, r7
   248e8:	b004      	add	sp, #16
   248ea:	bd80      	pop	{r7, pc}
   248ec:	41004400 	.word	0x41004400

000248f0 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
   248f0:	b580      	push	{r7, lr}
   248f2:	b088      	sub	sp, #32
   248f4:	af00      	add	r7, sp, #0
   248f6:	60f8      	str	r0, [r7, #12]
   248f8:	60b9      	str	r1, [r7, #8]
   248fa:	607a      	str	r2, [r7, #4]
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
   248fc:	2300      	movs	r3, #0
   248fe:	61fb      	str	r3, [r7, #28]

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
   24900:	687b      	ldr	r3, [r7, #4]
   24902:	78db      	ldrb	r3, [r3, #3]
   24904:	2201      	movs	r2, #1
   24906:	4053      	eors	r3, r2
   24908:	b2db      	uxtb	r3, r3
   2490a:	2b00      	cmp	r3, #0
   2490c:	d035      	beq.n	2497a <_system_pinmux_config+0x8a>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
   2490e:	687b      	ldr	r3, [r7, #4]
   24910:	781b      	ldrb	r3, [r3, #0]
   24912:	2b80      	cmp	r3, #128	; 0x80
   24914:	d00b      	beq.n	2492e <_system_pinmux_config+0x3e>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
   24916:	69fb      	ldr	r3, [r7, #28]
   24918:	2280      	movs	r2, #128	; 0x80
   2491a:	0252      	lsls	r2, r2, #9
   2491c:	4313      	orrs	r3, r2
   2491e:	61fb      	str	r3, [r7, #28]
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
   24920:	687b      	ldr	r3, [r7, #4]
   24922:	781b      	ldrb	r3, [r3, #0]
   24924:	061b      	lsls	r3, r3, #24
   24926:	001a      	movs	r2, r3
   24928:	69fb      	ldr	r3, [r7, #28]
   2492a:	4313      	orrs	r3, r2
   2492c:	61fb      	str	r3, [r7, #28]
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
   2492e:	687b      	ldr	r3, [r7, #4]
   24930:	785b      	ldrb	r3, [r3, #1]
   24932:	2b00      	cmp	r3, #0
   24934:	d003      	beq.n	2493e <_system_pinmux_config+0x4e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
   24936:	687b      	ldr	r3, [r7, #4]
   24938:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
   2493a:	2b02      	cmp	r3, #2
   2493c:	d110      	bne.n	24960 <_system_pinmux_config+0x70>
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
   2493e:	69fb      	ldr	r3, [r7, #28]
   24940:	2280      	movs	r2, #128	; 0x80
   24942:	0292      	lsls	r2, r2, #10
   24944:	4313      	orrs	r3, r2
   24946:	61fb      	str	r3, [r7, #28]

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
   24948:	687b      	ldr	r3, [r7, #4]
   2494a:	789b      	ldrb	r3, [r3, #2]
   2494c:	2b00      	cmp	r3, #0
   2494e:	d004      	beq.n	2495a <_system_pinmux_config+0x6a>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
   24950:	69fb      	ldr	r3, [r7, #28]
   24952:	2280      	movs	r2, #128	; 0x80
   24954:	02d2      	lsls	r2, r2, #11
   24956:	4313      	orrs	r3, r2
   24958:	61fb      	str	r3, [r7, #28]
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
   2495a:	68fb      	ldr	r3, [r7, #12]
   2495c:	68ba      	ldr	r2, [r7, #8]
   2495e:	605a      	str	r2, [r3, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   24960:	687b      	ldr	r3, [r7, #4]
   24962:	785b      	ldrb	r3, [r3, #1]
   24964:	2b01      	cmp	r3, #1
   24966:	d003      	beq.n	24970 <_system_pinmux_config+0x80>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
   24968:	687b      	ldr	r3, [r7, #4]
   2496a:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   2496c:	2b02      	cmp	r3, #2
   2496e:	d107      	bne.n	24980 <_system_pinmux_config+0x90>
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
   24970:	69fb      	ldr	r3, [r7, #28]
   24972:	4a22      	ldr	r2, [pc, #136]	; (249fc <_system_pinmux_config+0x10c>)
   24974:	4013      	ands	r3, r2
   24976:	61fb      	str	r3, [r7, #28]
   24978:	e002      	b.n	24980 <_system_pinmux_config+0x90>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
   2497a:	68fb      	ldr	r3, [r7, #12]
   2497c:	68ba      	ldr	r2, [r7, #8]
   2497e:	605a      	str	r2, [r3, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
   24980:	68bb      	ldr	r3, [r7, #8]
   24982:	041b      	lsls	r3, r3, #16
   24984:	0c1b      	lsrs	r3, r3, #16
   24986:	61bb      	str	r3, [r7, #24]
	uint32_t upper_pin_mask = (pin_mask >> 16);
   24988:	68bb      	ldr	r3, [r7, #8]
   2498a:	0c1b      	lsrs	r3, r3, #16
   2498c:	617b      	str	r3, [r7, #20]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   2498e:	69ba      	ldr	r2, [r7, #24]
   24990:	69fb      	ldr	r3, [r7, #28]
   24992:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
   24994:	22a0      	movs	r2, #160	; 0xa0
   24996:	05d2      	lsls	r2, r2, #23
   24998:	431a      	orrs	r2, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   2499a:	68fb      	ldr	r3, [r7, #12]
   2499c:	629a      	str	r2, [r3, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   2499e:	697a      	ldr	r2, [r7, #20]
   249a0:	69fb      	ldr	r3, [r7, #28]
   249a2:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
   249a4:	22d0      	movs	r2, #208	; 0xd0
   249a6:	0612      	lsls	r2, r2, #24
   249a8:	431a      	orrs	r2, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   249aa:	68fb      	ldr	r3, [r7, #12]
   249ac:	629a      	str	r2, [r3, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
   249ae:	687b      	ldr	r3, [r7, #4]
   249b0:	78db      	ldrb	r3, [r3, #3]
   249b2:	2201      	movs	r2, #1
   249b4:	4053      	eors	r3, r2
   249b6:	b2db      	uxtb	r3, r3
   249b8:	2b00      	cmp	r3, #0
   249ba:	d01a      	beq.n	249f2 <_system_pinmux_config+0x102>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
   249bc:	69fa      	ldr	r2, [r7, #28]
   249be:	2380      	movs	r3, #128	; 0x80
   249c0:	02db      	lsls	r3, r3, #11
   249c2:	4013      	ands	r3, r2
   249c4:	d00a      	beq.n	249dc <_system_pinmux_config+0xec>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
   249c6:	687b      	ldr	r3, [r7, #4]
   249c8:	789b      	ldrb	r3, [r3, #2]
   249ca:	2b01      	cmp	r3, #1
   249cc:	d103      	bne.n	249d6 <_system_pinmux_config+0xe6>
				port->OUTSET.reg = pin_mask;
   249ce:	68fb      	ldr	r3, [r7, #12]
   249d0:	68ba      	ldr	r2, [r7, #8]
   249d2:	619a      	str	r2, [r3, #24]
   249d4:	e002      	b.n	249dc <_system_pinmux_config+0xec>
			} else {
				port->OUTCLR.reg = pin_mask;
   249d6:	68fb      	ldr	r3, [r7, #12]
   249d8:	68ba      	ldr	r2, [r7, #8]
   249da:	615a      	str	r2, [r3, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   249dc:	687b      	ldr	r3, [r7, #4]
   249de:	785b      	ldrb	r3, [r3, #1]
   249e0:	2b01      	cmp	r3, #1
   249e2:	d003      	beq.n	249ec <_system_pinmux_config+0xfc>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
   249e4:	687b      	ldr	r3, [r7, #4]
   249e6:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   249e8:	2b02      	cmp	r3, #2
   249ea:	d102      	bne.n	249f2 <_system_pinmux_config+0x102>
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
   249ec:	68fb      	ldr	r3, [r7, #12]
   249ee:	68ba      	ldr	r2, [r7, #8]
   249f0:	609a      	str	r2, [r3, #8]
		}
	}
}
   249f2:	46c0      	nop			; (mov r8, r8)
   249f4:	46bd      	mov	sp, r7
   249f6:	b008      	add	sp, #32
   249f8:	bd80      	pop	{r7, pc}
   249fa:	46c0      	nop			; (mov r8, r8)
   249fc:	fffbffff 	.word	0xfffbffff

00024a00 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
   24a00:	b580      	push	{r7, lr}
   24a02:	b084      	sub	sp, #16
   24a04:	af00      	add	r7, sp, #0
   24a06:	0002      	movs	r2, r0
   24a08:	6039      	str	r1, [r7, #0]
   24a0a:	1dfb      	adds	r3, r7, #7
   24a0c:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
   24a0e:	1dfb      	adds	r3, r7, #7
   24a10:	781b      	ldrb	r3, [r3, #0]
   24a12:	0018      	movs	r0, r3
   24a14:	4b0a      	ldr	r3, [pc, #40]	; (24a40 <system_pinmux_pin_set_config+0x40>)
   24a16:	4798      	blx	r3
   24a18:	0003      	movs	r3, r0
   24a1a:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
   24a1c:	1dfb      	adds	r3, r7, #7
   24a1e:	781b      	ldrb	r3, [r3, #0]
   24a20:	221f      	movs	r2, #31
   24a22:	4013      	ands	r3, r2
   24a24:	2201      	movs	r2, #1
   24a26:	409a      	lsls	r2, r3
   24a28:	0013      	movs	r3, r2
   24a2a:	60bb      	str	r3, [r7, #8]

	_system_pinmux_config(port, pin_mask, config);
   24a2c:	683a      	ldr	r2, [r7, #0]
   24a2e:	68b9      	ldr	r1, [r7, #8]
   24a30:	68fb      	ldr	r3, [r7, #12]
   24a32:	0018      	movs	r0, r3
   24a34:	4b03      	ldr	r3, [pc, #12]	; (24a44 <system_pinmux_pin_set_config+0x44>)
   24a36:	4798      	blx	r3
}
   24a38:	46c0      	nop			; (mov r8, r8)
   24a3a:	46bd      	mov	sp, r7
   24a3c:	b004      	add	sp, #16
   24a3e:	bd80      	pop	{r7, pc}
   24a40:	00024891 	.word	0x00024891
   24a44:	000248f1 	.word	0x000248f1

00024a48 <_system_dummy_init>:
 * Dummy initialization function, used as a weak alias target for the various
 * init functions called by \ref system_init().
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
   24a48:	b580      	push	{r7, lr}
   24a4a:	af00      	add	r7, sp, #0
	return;
   24a4c:	46c0      	nop			; (mov r8, r8)
}
   24a4e:	46bd      	mov	sp, r7
   24a50:	bd80      	pop	{r7, pc}
	...

00024a54 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
   24a54:	b580      	push	{r7, lr}
   24a56:	af00      	add	r7, sp, #0
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
   24a58:	4b06      	ldr	r3, [pc, #24]	; (24a74 <system_init+0x20>)
   24a5a:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
   24a5c:	4b06      	ldr	r3, [pc, #24]	; (24a78 <system_init+0x24>)
   24a5e:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
   24a60:	4b06      	ldr	r3, [pc, #24]	; (24a7c <system_init+0x28>)
   24a62:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
   24a64:	4b06      	ldr	r3, [pc, #24]	; (24a80 <system_init+0x2c>)
   24a66:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
   24a68:	4b06      	ldr	r3, [pc, #24]	; (24a84 <system_init+0x30>)
   24a6a:	4798      	blx	r3
}
   24a6c:	46c0      	nop			; (mov r8, r8)
   24a6e:	46bd      	mov	sp, r7
   24a70:	bd80      	pop	{r7, pc}
   24a72:	46c0      	nop			; (mov r8, r8)
   24a74:	00024089 	.word	0x00024089
   24a78:	00023951 	.word	0x00023951
   24a7c:	00022559 	.word	0x00022559
   24a80:	0001e1bd 	.word	0x0001e1bd
   24a84:	00024a49 	.word	0x00024a49

00024a88 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   24a88:	b580      	push	{r7, lr}
   24a8a:	b082      	sub	sp, #8
   24a8c:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
   24a8e:	4b2f      	ldr	r3, [pc, #188]	; (24b4c <Reset_Handler+0xc4>)
   24a90:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
   24a92:	4b2f      	ldr	r3, [pc, #188]	; (24b50 <Reset_Handler+0xc8>)
   24a94:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
   24a96:	687a      	ldr	r2, [r7, #4]
   24a98:	683b      	ldr	r3, [r7, #0]
   24a9a:	429a      	cmp	r2, r3
   24a9c:	d00c      	beq.n	24ab8 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
   24a9e:	e007      	b.n	24ab0 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
   24aa0:	683b      	ldr	r3, [r7, #0]
   24aa2:	1d1a      	adds	r2, r3, #4
   24aa4:	603a      	str	r2, [r7, #0]
   24aa6:	687a      	ldr	r2, [r7, #4]
   24aa8:	1d11      	adds	r1, r2, #4
   24aaa:	6079      	str	r1, [r7, #4]
   24aac:	6812      	ldr	r2, [r2, #0]
   24aae:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
   24ab0:	683a      	ldr	r2, [r7, #0]
   24ab2:	4b28      	ldr	r3, [pc, #160]	; (24b54 <Reset_Handler+0xcc>)
   24ab4:	429a      	cmp	r2, r3
   24ab6:	d3f3      	bcc.n	24aa0 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
   24ab8:	4b27      	ldr	r3, [pc, #156]	; (24b58 <Reset_Handler+0xd0>)
   24aba:	603b      	str	r3, [r7, #0]
   24abc:	e004      	b.n	24ac8 <Reset_Handler+0x40>
                *pDest++ = 0;
   24abe:	683b      	ldr	r3, [r7, #0]
   24ac0:	1d1a      	adds	r2, r3, #4
   24ac2:	603a      	str	r2, [r7, #0]
   24ac4:	2200      	movs	r2, #0
   24ac6:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
   24ac8:	683a      	ldr	r2, [r7, #0]
   24aca:	4b24      	ldr	r3, [pc, #144]	; (24b5c <Reset_Handler+0xd4>)
   24acc:	429a      	cmp	r2, r3
   24ace:	d3f6      	bcc.n	24abe <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
   24ad0:	4b23      	ldr	r3, [pc, #140]	; (24b60 <Reset_Handler+0xd8>)
   24ad2:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   24ad4:	4b23      	ldr	r3, [pc, #140]	; (24b64 <Reset_Handler+0xdc>)
   24ad6:	687a      	ldr	r2, [r7, #4]
   24ad8:	21ff      	movs	r1, #255	; 0xff
   24ada:	438a      	bics	r2, r1
   24adc:	609a      	str	r2, [r3, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
   24ade:	4a22      	ldr	r2, [pc, #136]	; (24b68 <Reset_Handler+0xe0>)
   24ae0:	2390      	movs	r3, #144	; 0x90
   24ae2:	005b      	lsls	r3, r3, #1
   24ae4:	2102      	movs	r1, #2
   24ae6:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
   24ae8:	4a20      	ldr	r2, [pc, #128]	; (24b6c <Reset_Handler+0xe4>)
   24aea:	78d3      	ldrb	r3, [r2, #3]
   24aec:	2103      	movs	r1, #3
   24aee:	438b      	bics	r3, r1
   24af0:	1c19      	adds	r1, r3, #0
   24af2:	2302      	movs	r3, #2
   24af4:	430b      	orrs	r3, r1
   24af6:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
   24af8:	4a1c      	ldr	r2, [pc, #112]	; (24b6c <Reset_Handler+0xe4>)
   24afa:	78d3      	ldrb	r3, [r2, #3]
   24afc:	210c      	movs	r1, #12
   24afe:	438b      	bics	r3, r1
   24b00:	1c19      	adds	r1, r3, #0
   24b02:	2308      	movs	r3, #8
   24b04:	430b      	orrs	r3, r1
   24b06:	70d3      	strb	r3, [r2, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
   24b08:	4a19      	ldr	r2, [pc, #100]	; (24b70 <Reset_Handler+0xe8>)
   24b0a:	7b93      	ldrb	r3, [r2, #14]
   24b0c:	2130      	movs	r1, #48	; 0x30
   24b0e:	438b      	bics	r3, r1
   24b10:	1c19      	adds	r1, r3, #0
   24b12:	2320      	movs	r3, #32
   24b14:	430b      	orrs	r3, r1
   24b16:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
   24b18:	4a15      	ldr	r2, [pc, #84]	; (24b70 <Reset_Handler+0xe8>)
   24b1a:	7b93      	ldrb	r3, [r2, #14]
   24b1c:	210c      	movs	r1, #12
   24b1e:	438b      	bics	r3, r1
   24b20:	1c19      	adds	r1, r3, #0
   24b22:	2308      	movs	r3, #8
   24b24:	430b      	orrs	r3, r1
   24b26:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
   24b28:	4a11      	ldr	r2, [pc, #68]	; (24b70 <Reset_Handler+0xe8>)
   24b2a:	7b93      	ldrb	r3, [r2, #14]
   24b2c:	2103      	movs	r1, #3
   24b2e:	438b      	bics	r3, r1
   24b30:	1c19      	adds	r1, r3, #0
   24b32:	2302      	movs	r3, #2
   24b34:	430b      	orrs	r3, r1
   24b36:	7393      	strb	r3, [r2, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
   24b38:	4a0e      	ldr	r2, [pc, #56]	; (24b74 <Reset_Handler+0xec>)
   24b3a:	6853      	ldr	r3, [r2, #4]
   24b3c:	2180      	movs	r1, #128	; 0x80
   24b3e:	430b      	orrs	r3, r1
   24b40:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
   24b42:	4b0d      	ldr	r3, [pc, #52]	; (24b78 <Reset_Handler+0xf0>)
   24b44:	4798      	blx	r3

        /* Branch to main function */
        main();
   24b46:	4b0d      	ldr	r3, [pc, #52]	; (24b7c <Reset_Handler+0xf4>)
   24b48:	4798      	blx	r3

        /* Infinite loop */
        while (1);
   24b4a:	e7fe      	b.n	24b4a <Reset_Handler+0xc2>
   24b4c:	0002adc4 	.word	0x0002adc4
   24b50:	20000000 	.word	0x20000000
   24b54:	20000204 	.word	0x20000204
   24b58:	20000400 	.word	0x20000400
   24b5c:	20001004 	.word	0x20001004
   24b60:	00010000 	.word	0x00010000
   24b64:	e000ed00 	.word	0xe000ed00
   24b68:	41007000 	.word	0x41007000
   24b6c:	41005000 	.word	0x41005000
   24b70:	41004800 	.word	0x41004800
   24b74:	41004000 	.word	0x41004000
   24b78:	00028a69 	.word	0x00028a69
   24b7c:	00024e2d 	.word	0x00024e2d

00024b80 <Dummy_Handler>:
/**
 * \brief Default interrupt handler for unused IRQs.
 */
uint32_t phantomISR;
void Dummy_Handler(void)
{
   24b80:	b580      	push	{r7, lr}
   24b82:	b082      	sub	sp, #8
   24b84:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   24b86:	f3ef 8305 	mrs	r3, IPSR
   24b8a:	607b      	str	r3, [r7, #4]
  return(result);
   24b8c:	687a      	ldr	r2, [r7, #4]
	phantomISR = __get_IPSR();
   24b8e:	4b01      	ldr	r3, [pc, #4]	; (24b94 <Dummy_Handler+0x14>)
   24b90:	601a      	str	r2, [r3, #0]
        while (1) {
   24b92:	e7fe      	b.n	24b92 <Dummy_Handler+0x12>
   24b94:	20000b88 	.word	0x20000b88

00024b98 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
   24b98:	b580      	push	{r7, lr}
   24b9a:	b084      	sub	sp, #16
   24b9c:	af00      	add	r7, sp, #0
   24b9e:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
   24ba0:	4b0a      	ldr	r3, [pc, #40]	; (24bcc <_sbrk+0x34>)
   24ba2:	681b      	ldr	r3, [r3, #0]
   24ba4:	2b00      	cmp	r3, #0
   24ba6:	d102      	bne.n	24bae <_sbrk+0x16>
		heap = (unsigned char *)&_end;
   24ba8:	4b08      	ldr	r3, [pc, #32]	; (24bcc <_sbrk+0x34>)
   24baa:	4a09      	ldr	r2, [pc, #36]	; (24bd0 <_sbrk+0x38>)
   24bac:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
   24bae:	4b07      	ldr	r3, [pc, #28]	; (24bcc <_sbrk+0x34>)
   24bb0:	681b      	ldr	r3, [r3, #0]
   24bb2:	60fb      	str	r3, [r7, #12]

	heap += incr;
   24bb4:	4b05      	ldr	r3, [pc, #20]	; (24bcc <_sbrk+0x34>)
   24bb6:	681a      	ldr	r2, [r3, #0]
   24bb8:	687b      	ldr	r3, [r7, #4]
   24bba:	18d2      	adds	r2, r2, r3
   24bbc:	4b03      	ldr	r3, [pc, #12]	; (24bcc <_sbrk+0x34>)
   24bbe:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap;
   24bc0:	68fb      	ldr	r3, [r7, #12]
}
   24bc2:	0018      	movs	r0, r3
   24bc4:	46bd      	mov	sp, r7
   24bc6:	b004      	add	sp, #16
   24bc8:	bd80      	pop	{r7, pc}
   24bca:	46c0      	nop			; (mov r8, r8)
   24bcc:	20000708 	.word	0x20000708
   24bd0:	20003008 	.word	0x20003008

00024bd4 <system_apb_clock_clear_mask>:
{
   24bd4:	b580      	push	{r7, lr}
   24bd6:	b082      	sub	sp, #8
   24bd8:	af00      	add	r7, sp, #0
   24bda:	0002      	movs	r2, r0
   24bdc:	6039      	str	r1, [r7, #0]
   24bde:	1dfb      	adds	r3, r7, #7
   24be0:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   24be2:	1dfb      	adds	r3, r7, #7
   24be4:	781b      	ldrb	r3, [r3, #0]
   24be6:	2b01      	cmp	r3, #1
   24be8:	d00b      	beq.n	24c02 <system_apb_clock_clear_mask+0x2e>
   24bea:	2b02      	cmp	r3, #2
   24bec:	d011      	beq.n	24c12 <system_apb_clock_clear_mask+0x3e>
   24bee:	2b00      	cmp	r3, #0
   24bf0:	d117      	bne.n	24c22 <system_apb_clock_clear_mask+0x4e>
			PM->APBAMASK.reg &= ~mask;
   24bf2:	4b0f      	ldr	r3, [pc, #60]	; (24c30 <system_apb_clock_clear_mask+0x5c>)
   24bf4:	4a0e      	ldr	r2, [pc, #56]	; (24c30 <system_apb_clock_clear_mask+0x5c>)
   24bf6:	6992      	ldr	r2, [r2, #24]
   24bf8:	6839      	ldr	r1, [r7, #0]
   24bfa:	43c9      	mvns	r1, r1
   24bfc:	400a      	ands	r2, r1
   24bfe:	619a      	str	r2, [r3, #24]
			break;
   24c00:	e011      	b.n	24c26 <system_apb_clock_clear_mask+0x52>
			PM->APBBMASK.reg &= ~mask;
   24c02:	4b0b      	ldr	r3, [pc, #44]	; (24c30 <system_apb_clock_clear_mask+0x5c>)
   24c04:	4a0a      	ldr	r2, [pc, #40]	; (24c30 <system_apb_clock_clear_mask+0x5c>)
   24c06:	69d2      	ldr	r2, [r2, #28]
   24c08:	6839      	ldr	r1, [r7, #0]
   24c0a:	43c9      	mvns	r1, r1
   24c0c:	400a      	ands	r2, r1
   24c0e:	61da      	str	r2, [r3, #28]
			break;
   24c10:	e009      	b.n	24c26 <system_apb_clock_clear_mask+0x52>
			PM->APBCMASK.reg &= ~mask;
   24c12:	4b07      	ldr	r3, [pc, #28]	; (24c30 <system_apb_clock_clear_mask+0x5c>)
   24c14:	4a06      	ldr	r2, [pc, #24]	; (24c30 <system_apb_clock_clear_mask+0x5c>)
   24c16:	6a12      	ldr	r2, [r2, #32]
   24c18:	6839      	ldr	r1, [r7, #0]
   24c1a:	43c9      	mvns	r1, r1
   24c1c:	400a      	ands	r2, r1
   24c1e:	621a      	str	r2, [r3, #32]
			break;
   24c20:	e001      	b.n	24c26 <system_apb_clock_clear_mask+0x52>
			return STATUS_ERR_INVALID_ARG;
   24c22:	2317      	movs	r3, #23
   24c24:	e000      	b.n	24c28 <system_apb_clock_clear_mask+0x54>
	return STATUS_OK;
   24c26:	2300      	movs	r3, #0
}
   24c28:	0018      	movs	r0, r3
   24c2a:	46bd      	mov	sp, r7
   24c2c:	b002      	add	sp, #8
   24c2e:	bd80      	pop	{r7, pc}
   24c30:	40000400 	.word	0x40000400

00024c34 <system_interrupt_enable_global>:
{
   24c34:	b580      	push	{r7, lr}
   24c36:	af00      	add	r7, sp, #0
	cpu_irq_enable();
   24c38:	4b04      	ldr	r3, [pc, #16]	; (24c4c <system_interrupt_enable_global+0x18>)
   24c3a:	2201      	movs	r2, #1
   24c3c:	701a      	strb	r2, [r3, #0]
   24c3e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   24c42:	b662      	cpsie	i
}
   24c44:	46c0      	nop			; (mov r8, r8)
   24c46:	46bd      	mov	sp, r7
   24c48:	bd80      	pop	{r7, pc}
   24c4a:	46c0      	nop			; (mov r8, r8)
   24c4c:	20000028 	.word	0x20000028

00024c50 <system_pinmux_get_group_from_gpio_pin>:
{
   24c50:	b580      	push	{r7, lr}
   24c52:	b084      	sub	sp, #16
   24c54:	af00      	add	r7, sp, #0
   24c56:	0002      	movs	r2, r0
   24c58:	1dfb      	adds	r3, r7, #7
   24c5a:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   24c5c:	230f      	movs	r3, #15
   24c5e:	18fb      	adds	r3, r7, r3
   24c60:	1dfa      	adds	r2, r7, #7
   24c62:	7812      	ldrb	r2, [r2, #0]
   24c64:	09d2      	lsrs	r2, r2, #7
   24c66:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   24c68:	230e      	movs	r3, #14
   24c6a:	18fb      	adds	r3, r7, r3
   24c6c:	1dfa      	adds	r2, r7, #7
   24c6e:	7812      	ldrb	r2, [r2, #0]
   24c70:	0952      	lsrs	r2, r2, #5
   24c72:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   24c74:	4b0d      	ldr	r3, [pc, #52]	; (24cac <system_pinmux_get_group_from_gpio_pin+0x5c>)
   24c76:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   24c78:	230f      	movs	r3, #15
   24c7a:	18fb      	adds	r3, r7, r3
   24c7c:	781b      	ldrb	r3, [r3, #0]
   24c7e:	2b00      	cmp	r3, #0
   24c80:	d10f      	bne.n	24ca2 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   24c82:	230f      	movs	r3, #15
   24c84:	18fb      	adds	r3, r7, r3
   24c86:	781b      	ldrb	r3, [r3, #0]
   24c88:	009b      	lsls	r3, r3, #2
   24c8a:	2210      	movs	r2, #16
   24c8c:	4694      	mov	ip, r2
   24c8e:	44bc      	add	ip, r7
   24c90:	4463      	add	r3, ip
   24c92:	3b08      	subs	r3, #8
   24c94:	681a      	ldr	r2, [r3, #0]
   24c96:	230e      	movs	r3, #14
   24c98:	18fb      	adds	r3, r7, r3
   24c9a:	781b      	ldrb	r3, [r3, #0]
   24c9c:	01db      	lsls	r3, r3, #7
   24c9e:	18d3      	adds	r3, r2, r3
   24ca0:	e000      	b.n	24ca4 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   24ca2:	2300      	movs	r3, #0
}
   24ca4:	0018      	movs	r0, r3
   24ca6:	46bd      	mov	sp, r7
   24ca8:	b004      	add	sp, #16
   24caa:	bd80      	pop	{r7, pc}
   24cac:	41004400 	.word	0x41004400

00024cb0 <system_set_sleepmode>:
 * \retval STATUS_ERR_INVALID_ARG  The requested sleep mode was invalid or not
 *                                 available
 */
static inline enum status_code system_set_sleepmode(
	const enum system_sleepmode sleep_mode)
{
   24cb0:	b580      	push	{r7, lr}
   24cb2:	b084      	sub	sp, #16
   24cb4:	af00      	add	r7, sp, #0
   24cb6:	0002      	movs	r2, r0
   24cb8:	1dfb      	adds	r3, r7, #7
   24cba:	701a      	strb	r2, [r3, #0]

#if (SAMD20 || SAMD21 || SAMR21)

	/* Get MCU revision */
	uint32_t rev = DSU->DID.reg;
   24cbc:	4b1a      	ldr	r3, [pc, #104]	; (24d28 <system_set_sleepmode+0x78>)
   24cbe:	699b      	ldr	r3, [r3, #24]
   24cc0:	60fb      	str	r3, [r7, #12]

	rev &= DSU_DID_REVISION_Msk;
   24cc2:	68fa      	ldr	r2, [r7, #12]
   24cc4:	23f0      	movs	r3, #240	; 0xf0
   24cc6:	011b      	lsls	r3, r3, #4
   24cc8:	4013      	ands	r3, r2
   24cca:	60fb      	str	r3, [r7, #12]
	rev = rev >> DSU_DID_REVISION_Pos;
   24ccc:	68fb      	ldr	r3, [r7, #12]
   24cce:	0a1b      	lsrs	r3, r3, #8
   24cd0:	60fb      	str	r3, [r7, #12]
		NVMCTRL->CTRLB.bit.SLEEPPRM = NVMCTRL_CTRLB_SLEEPPRM_DISABLED_Val;
	}
#endif

#if (SAMD21 || SAMR21)
	if (rev < _SYSTEM_MCU_REVISION_D) {
   24cd2:	68fb      	ldr	r3, [r7, #12]
   24cd4:	2b02      	cmp	r3, #2
   24cd6:	d805      	bhi.n	24ce4 <system_set_sleepmode+0x34>
		/* Errata 13140: Make sure that the Flash does not power all the way down
		 * when in sleep mode. */
		NVMCTRL->CTRLB.bit.SLEEPPRM = NVMCTRL_CTRLB_SLEEPPRM_DISABLED_Val;
   24cd8:	4a14      	ldr	r2, [pc, #80]	; (24d2c <system_set_sleepmode+0x7c>)
   24cda:	6853      	ldr	r3, [r2, #4]
   24cdc:	21c0      	movs	r1, #192	; 0xc0
   24cde:	0089      	lsls	r1, r1, #2
   24ce0:	430b      	orrs	r3, r1
   24ce2:	6053      	str	r3, [r2, #4]
	}
#endif

#endif

	switch (sleep_mode) {
   24ce4:	1dfb      	adds	r3, r7, #7
   24ce6:	781b      	ldrb	r3, [r3, #0]
   24ce8:	2b00      	cmp	r3, #0
   24cea:	db16      	blt.n	24d1a <system_set_sleepmode+0x6a>
   24cec:	2b02      	cmp	r3, #2
   24cee:	dd02      	ble.n	24cf6 <system_set_sleepmode+0x46>
   24cf0:	2b03      	cmp	r3, #3
   24cf2:	d00b      	beq.n	24d0c <system_set_sleepmode+0x5c>
   24cf4:	e011      	b.n	24d1a <system_set_sleepmode+0x6a>
		case SYSTEM_SLEEPMODE_IDLE_0:
		case SYSTEM_SLEEPMODE_IDLE_1:
		case SYSTEM_SLEEPMODE_IDLE_2:
			SCB->SCR &= ~SCB_SCR_SLEEPDEEP_Msk;
   24cf6:	4b0e      	ldr	r3, [pc, #56]	; (24d30 <system_set_sleepmode+0x80>)
   24cf8:	4a0d      	ldr	r2, [pc, #52]	; (24d30 <system_set_sleepmode+0x80>)
   24cfa:	6912      	ldr	r2, [r2, #16]
   24cfc:	2104      	movs	r1, #4
   24cfe:	438a      	bics	r2, r1
   24d00:	611a      	str	r2, [r3, #16]
			PM->SLEEP.reg = sleep_mode;
   24d02:	4a0c      	ldr	r2, [pc, #48]	; (24d34 <system_set_sleepmode+0x84>)
   24d04:	1dfb      	adds	r3, r7, #7
   24d06:	781b      	ldrb	r3, [r3, #0]
   24d08:	7053      	strb	r3, [r2, #1]
			break;
   24d0a:	e008      	b.n	24d1e <system_set_sleepmode+0x6e>

		case SYSTEM_SLEEPMODE_STANDBY:
			SCB->SCR |=  SCB_SCR_SLEEPDEEP_Msk;
   24d0c:	4b08      	ldr	r3, [pc, #32]	; (24d30 <system_set_sleepmode+0x80>)
   24d0e:	4a08      	ldr	r2, [pc, #32]	; (24d30 <system_set_sleepmode+0x80>)
   24d10:	6912      	ldr	r2, [r2, #16]
   24d12:	2104      	movs	r1, #4
   24d14:	430a      	orrs	r2, r1
   24d16:	611a      	str	r2, [r3, #16]
			break;
   24d18:	e001      	b.n	24d1e <system_set_sleepmode+0x6e>

		default:
			return STATUS_ERR_INVALID_ARG;
   24d1a:	2317      	movs	r3, #23
   24d1c:	e000      	b.n	24d20 <system_set_sleepmode+0x70>
	}

	return STATUS_OK;
   24d1e:	2300      	movs	r3, #0
}
   24d20:	0018      	movs	r0, r3
   24d22:	46bd      	mov	sp, r7
   24d24:	b004      	add	sp, #16
   24d26:	bd80      	pop	{r7, pc}
   24d28:	41002000 	.word	0x41002000
   24d2c:	41004000 	.word	0x41004000
   24d30:	e000ed00 	.word	0xe000ed00
   24d34:	40000400 	.word	0x40000400

00024d38 <system_sleep>:
 * all ongoing memory accesses have completed, then a WFI (Wait For Interrupt)
 * instruction to place the device into the sleep mode specified by
 * \ref system_set_sleepmode until woken by an interrupt.
 */
static inline void system_sleep(void)
{
   24d38:	b580      	push	{r7, lr}
   24d3a:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb");
   24d3c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("wfi");
   24d40:	bf30      	wfi
	__DSB();
	__WFI();
}
   24d42:	46c0      	nop			; (mov r8, r8)
   24d44:	46bd      	mov	sp, r7
   24d46:	bd80      	pop	{r7, pc}

00024d48 <port_get_group_from_gpio_pin>:
{
   24d48:	b580      	push	{r7, lr}
   24d4a:	b082      	sub	sp, #8
   24d4c:	af00      	add	r7, sp, #0
   24d4e:	0002      	movs	r2, r0
   24d50:	1dfb      	adds	r3, r7, #7
   24d52:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   24d54:	1dfb      	adds	r3, r7, #7
   24d56:	781b      	ldrb	r3, [r3, #0]
   24d58:	0018      	movs	r0, r3
   24d5a:	4b03      	ldr	r3, [pc, #12]	; (24d68 <port_get_group_from_gpio_pin+0x20>)
   24d5c:	4798      	blx	r3
   24d5e:	0003      	movs	r3, r0
}
   24d60:	0018      	movs	r0, r3
   24d62:	46bd      	mov	sp, r7
   24d64:	b002      	add	sp, #8
   24d66:	bd80      	pop	{r7, pc}
   24d68:	00024c51 	.word	0x00024c51

00024d6c <port_pin_set_output_level>:
{
   24d6c:	b580      	push	{r7, lr}
   24d6e:	b084      	sub	sp, #16
   24d70:	af00      	add	r7, sp, #0
   24d72:	0002      	movs	r2, r0
   24d74:	1dfb      	adds	r3, r7, #7
   24d76:	701a      	strb	r2, [r3, #0]
   24d78:	1dbb      	adds	r3, r7, #6
   24d7a:	1c0a      	adds	r2, r1, #0
   24d7c:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   24d7e:	1dfb      	adds	r3, r7, #7
   24d80:	781b      	ldrb	r3, [r3, #0]
   24d82:	0018      	movs	r0, r3
   24d84:	4b0d      	ldr	r3, [pc, #52]	; (24dbc <port_pin_set_output_level+0x50>)
   24d86:	4798      	blx	r3
   24d88:	0003      	movs	r3, r0
   24d8a:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   24d8c:	1dfb      	adds	r3, r7, #7
   24d8e:	781b      	ldrb	r3, [r3, #0]
   24d90:	221f      	movs	r2, #31
   24d92:	4013      	ands	r3, r2
   24d94:	2201      	movs	r2, #1
   24d96:	409a      	lsls	r2, r3
   24d98:	0013      	movs	r3, r2
   24d9a:	60bb      	str	r3, [r7, #8]
	if (level) {
   24d9c:	1dbb      	adds	r3, r7, #6
   24d9e:	781b      	ldrb	r3, [r3, #0]
   24da0:	2b00      	cmp	r3, #0
   24da2:	d003      	beq.n	24dac <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   24da4:	68fb      	ldr	r3, [r7, #12]
   24da6:	68ba      	ldr	r2, [r7, #8]
   24da8:	619a      	str	r2, [r3, #24]
}
   24daa:	e002      	b.n	24db2 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   24dac:	68fb      	ldr	r3, [r7, #12]
   24dae:	68ba      	ldr	r2, [r7, #8]
   24db0:	615a      	str	r2, [r3, #20]
}
   24db2:	46c0      	nop			; (mov r8, r8)
   24db4:	46bd      	mov	sp, r7
   24db6:	b004      	add	sp, #16
   24db8:	bd80      	pop	{r7, pc}
   24dba:	46c0      	nop			; (mov r8, r8)
   24dbc:	00024d49 	.word	0x00024d49

00024dc0 <InitTraceBuffer>:

__attribute__((aligned(1024)))
volatile char __tracebuffer__[1024];
volatile int __tracebuffersize__ = sizeof(__tracebuffer__);
void InitTraceBuffer()
{
   24dc0:	b580      	push	{r7, lr}
   24dc2:	b082      	sub	sp, #8
   24dc4:	af00      	add	r7, sp, #0
    int index = 0;
   24dc6:	2300      	movs	r3, #0
   24dc8:	607b      	str	r3, [r7, #4]
    uint32_t mtbEnabled = IS_MTB_ENABLED;
   24dca:	4b14      	ldr	r3, [pc, #80]	; (24e1c <InitTraceBuffer+0x5c>)
   24dcc:	681b      	ldr	r3, [r3, #0]
   24dce:	0fdb      	lsrs	r3, r3, #31
   24dd0:	07db      	lsls	r3, r3, #31
   24dd2:	603b      	str	r3, [r7, #0]
    DISABLE_MTB;
   24dd4:	4b11      	ldr	r3, [pc, #68]	; (24e1c <InitTraceBuffer+0x5c>)
   24dd6:	4a11      	ldr	r2, [pc, #68]	; (24e1c <InitTraceBuffer+0x5c>)
   24dd8:	6812      	ldr	r2, [r2, #0]
   24dda:	0052      	lsls	r2, r2, #1
   24ddc:	0852      	lsrs	r2, r2, #1
   24dde:	601a      	str	r2, [r3, #0]
    for(index =0; index<1024; index++)
   24de0:	2300      	movs	r3, #0
   24de2:	607b      	str	r3, [r7, #4]
   24de4:	e008      	b.n	24df8 <InitTraceBuffer+0x38>
    {
        __tracebuffer__[index];
   24de6:	4a0e      	ldr	r2, [pc, #56]	; (24e20 <InitTraceBuffer+0x60>)
   24de8:	687b      	ldr	r3, [r7, #4]
   24dea:	18d3      	adds	r3, r2, r3
   24dec:	781b      	ldrb	r3, [r3, #0]
        __tracebuffersize__;
   24dee:	4b0d      	ldr	r3, [pc, #52]	; (24e24 <InitTraceBuffer+0x64>)
   24df0:	681b      	ldr	r3, [r3, #0]
    for(index =0; index<1024; index++)
   24df2:	687b      	ldr	r3, [r7, #4]
   24df4:	3301      	adds	r3, #1
   24df6:	607b      	str	r3, [r7, #4]
   24df8:	687b      	ldr	r3, [r7, #4]
   24dfa:	4a0b      	ldr	r2, [pc, #44]	; (24e28 <InitTraceBuffer+0x68>)
   24dfc:	4293      	cmp	r3, r2
   24dfe:	ddf2      	ble.n	24de6 <InitTraceBuffer+0x26>
    }
    if(mtbEnabled)
   24e00:	683b      	ldr	r3, [r7, #0]
   24e02:	2b00      	cmp	r3, #0
   24e04:	d006      	beq.n	24e14 <InitTraceBuffer+0x54>
        ENABLE_MTB;
   24e06:	4b05      	ldr	r3, [pc, #20]	; (24e1c <InitTraceBuffer+0x5c>)
   24e08:	4a04      	ldr	r2, [pc, #16]	; (24e1c <InitTraceBuffer+0x5c>)
   24e0a:	6812      	ldr	r2, [r2, #0]
   24e0c:	2180      	movs	r1, #128	; 0x80
   24e0e:	0609      	lsls	r1, r1, #24
   24e10:	430a      	orrs	r2, r1
   24e12:	601a      	str	r2, [r3, #0]
}
   24e14:	46c0      	nop			; (mov r8, r8)
   24e16:	46bd      	mov	sp, r7
   24e18:	b002      	add	sp, #8
   24e1a:	bd80      	pop	{r7, pc}
   24e1c:	41006004 	.word	0x41006004
   24e20:	20000c00 	.word	0x20000c00
   24e24:	2000002c 	.word	0x2000002c
   24e28:	000003ff 	.word	0x000003ff

00024e2c <main>:

int main (void)
{
   24e2c:	b590      	push	{r4, r7, lr}
   24e2e:	b083      	sub	sp, #12
   24e30:	af02      	add	r7, sp, #8
	system_init();
   24e32:	4b19      	ldr	r3, [pc, #100]	; (24e98 <main+0x6c>)
   24e34:	4798      	blx	r3
	
	/* Disable digital interfaces to unused peripherals */
	system_apb_clock_clear_mask(SYSTEM_CLOCK_APB_APBA,
   24e36:	2111      	movs	r1, #17
   24e38:	2000      	movs	r0, #0
   24e3a:	4b18      	ldr	r3, [pc, #96]	; (24e9c <main+0x70>)
   24e3c:	4798      	blx	r3
	PM_APBAMASK_PAC0 | PM_APBAMASK_WDT);
	system_apb_clock_clear_mask(SYSTEM_CLOCK_APB_APBB,
   24e3e:	2103      	movs	r1, #3
   24e40:	2001      	movs	r0, #1
   24e42:	4b16      	ldr	r3, [pc, #88]	; (24e9c <main+0x70>)
   24e44:	4798      	blx	r3
	PM_APBBMASK_PAC1 | PM_APBBMASK_DSU);
	system_apb_clock_clear_mask(SYSTEM_CLOCK_APB_APBC,
   24e46:	4b16      	ldr	r3, [pc, #88]	; (24ea0 <main+0x74>)
   24e48:	0019      	movs	r1, r3
   24e4a:	2002      	movs	r0, #2
   24e4c:	4b13      	ldr	r3, [pc, #76]	; (24e9c <main+0x70>)
   24e4e:	4798      	blx	r3
	PM_APBCMASK_PAC2 | PM_APBCMASK_AC | PM_APBCMASK_DAC);
	
	/* Disable NVM low power mode during sleep due to lockups (device errata) */
	NVMCTRL->CTRLB.bit.SLEEPPRM = NVMCTRL_CTRLB_SLEEPPRM_DISABLED_Val;
   24e50:	4a14      	ldr	r2, [pc, #80]	; (24ea4 <main+0x78>)
   24e52:	6853      	ldr	r3, [r2, #4]
   24e54:	21c0      	movs	r1, #192	; 0xc0
   24e56:	0089      	lsls	r1, r1, #2
   24e58:	430b      	orrs	r3, r1
   24e5a:	6053      	str	r3, [r2, #4]
	
	system_set_sleepmode(SYSTEM_SLEEPMODE_STANDBY);
   24e5c:	2003      	movs	r0, #3
   24e5e:	4b12      	ldr	r3, [pc, #72]	; (24ea8 <main+0x7c>)
   24e60:	4798      	blx	r3
	
	system_interrupt_enable_global();
   24e62:	4b12      	ldr	r3, [pc, #72]	; (24eac <main+0x80>)
   24e64:	4798      	blx	r3
	
	//irq_initialize_vectors();
	//cpu_irq_enable();
	InitTraceBuffer();
   24e66:	4b12      	ldr	r3, [pc, #72]	; (24eb0 <main+0x84>)
   24e68:	4798      	blx	r3
	delay_init();
   24e6a:	4b12      	ldr	r3, [pc, #72]	; (24eb4 <main+0x88>)
   24e6c:	4798      	blx	r3
	init_eeprom();
   24e6e:	4b12      	ldr	r3, [pc, #72]	; (24eb8 <main+0x8c>)
   24e70:	4798      	blx	r3
	
	
	
	start_lcd_service();
   24e72:	4b12      	ldr	r3, [pc, #72]	; (24ebc <main+0x90>)
   24e74:	4798      	blx	r3
	start_gsm_service();
   24e76:	4b12      	ldr	r3, [pc, #72]	; (24ec0 <main+0x94>)
   24e78:	4798      	blx	r3
	start_motor_service();
   24e7a:	4b12      	ldr	r3, [pc, #72]	; (24ec4 <main+0x98>)
   24e7c:	4798      	blx	r3
	
	xTaskCreate(vTask_sleep_manager,NULL,(uint16_t)100,NULL,1,NULL);
   24e7e:	4812      	ldr	r0, [pc, #72]	; (24ec8 <main+0x9c>)
   24e80:	2300      	movs	r3, #0
   24e82:	9301      	str	r3, [sp, #4]
   24e84:	2301      	movs	r3, #1
   24e86:	9300      	str	r3, [sp, #0]
   24e88:	2300      	movs	r3, #0
   24e8a:	2264      	movs	r2, #100	; 0x64
   24e8c:	2100      	movs	r1, #0
   24e8e:	4c0f      	ldr	r4, [pc, #60]	; (24ecc <main+0xa0>)
   24e90:	47a0      	blx	r4
	
	vTaskStartScheduler();
   24e92:	4b0f      	ldr	r3, [pc, #60]	; (24ed0 <main+0xa4>)
   24e94:	4798      	blx	r3
	
	for (;;)
   24e96:	e7fe      	b.n	24e96 <main+0x6a>
   24e98:	00024a55 	.word	0x00024a55
   24e9c:	00024bd5 	.word	0x00024bd5
   24ea0:	00060001 	.word	0x00060001
   24ea4:	41004000 	.word	0x41004000
   24ea8:	00024cb1 	.word	0x00024cb1
   24eac:	00024c35 	.word	0x00024c35
   24eb0:	00024dc1 	.word	0x00024dc1
   24eb4:	0002267d 	.word	0x0002267d
   24eb8:	00010151 	.word	0x00010151
   24ebc:	00018f09 	.word	0x00018f09
   24ec0:	00018535 	.word	0x00018535
   24ec4:	0001c72d 	.word	0x0001c72d
   24ec8:	00024f1d 	.word	0x00024f1d
   24ecc:	0001fb29 	.word	0x0001fb29
   24ed0:	0001fffd 	.word	0x0001fffd

00024ed4 <checkSleepElligible>:
	}
}


bool checkSleepElligible(void)
{
   24ed4:	b580      	push	{r7, lr}
   24ed6:	af00      	add	r7, sp, #0
	return (/*!turnOffTimerOn && */!getACPowerState() && motor_checkSleepElligible() && gsm_checkSleepElligible());
   24ed8:	4b0d      	ldr	r3, [pc, #52]	; (24f10 <checkSleepElligible+0x3c>)
   24eda:	4798      	blx	r3
   24edc:	0003      	movs	r3, r0
   24ede:	001a      	movs	r2, r3
   24ee0:	2301      	movs	r3, #1
   24ee2:	4053      	eors	r3, r2
   24ee4:	b2db      	uxtb	r3, r3
   24ee6:	2b00      	cmp	r3, #0
   24ee8:	d009      	beq.n	24efe <checkSleepElligible+0x2a>
   24eea:	4b0a      	ldr	r3, [pc, #40]	; (24f14 <checkSleepElligible+0x40>)
   24eec:	4798      	blx	r3
   24eee:	1e03      	subs	r3, r0, #0
   24ef0:	d005      	beq.n	24efe <checkSleepElligible+0x2a>
   24ef2:	4b09      	ldr	r3, [pc, #36]	; (24f18 <checkSleepElligible+0x44>)
   24ef4:	4798      	blx	r3
   24ef6:	1e03      	subs	r3, r0, #0
   24ef8:	d001      	beq.n	24efe <checkSleepElligible+0x2a>
   24efa:	2301      	movs	r3, #1
   24efc:	e000      	b.n	24f00 <checkSleepElligible+0x2c>
   24efe:	2300      	movs	r3, #0
   24f00:	1c1a      	adds	r2, r3, #0
   24f02:	2301      	movs	r3, #1
   24f04:	4013      	ands	r3, r2
   24f06:	b2db      	uxtb	r3, r3
}
   24f08:	0018      	movs	r0, r3
   24f0a:	46bd      	mov	sp, r7
   24f0c:	bd80      	pop	{r7, pc}
   24f0e:	46c0      	nop			; (mov r8, r8)
   24f10:	0001af85 	.word	0x0001af85
   24f14:	0001ca51 	.word	0x0001ca51
   24f18:	00018601 	.word	0x00018601

00024f1c <vTask_sleep_manager>:

static void vTask_sleep_manager(void *params)
{
   24f1c:	b580      	push	{r7, lr}
   24f1e:	b084      	sub	sp, #16
   24f20:	af00      	add	r7, sp, #0
   24f22:	6078      	str	r0, [r7, #4]
	UNUSED(params);
	for (;;)
	{
		if (checkSleepElligible())
   24f24:	4b34      	ldr	r3, [pc, #208]	; (24ff8 <vTask_sleep_manager+0xdc>)
   24f26:	4798      	blx	r3
   24f28:	1e03      	subs	r3, r0, #0
   24f2a:	d060      	beq.n	24fee <vTask_sleep_manager+0xd2>
		{
			if(!initSleepSeqeunce)
   24f2c:	4b33      	ldr	r3, [pc, #204]	; (24ffc <vTask_sleep_manager+0xe0>)
   24f2e:	781b      	ldrb	r3, [r3, #0]
   24f30:	2201      	movs	r2, #1
   24f32:	4053      	eors	r3, r2
   24f34:	b2db      	uxtb	r3, r3
   24f36:	2b00      	cmp	r3, #0
   24f38:	d008      	beq.n	24f4c <vTask_sleep_manager+0x30>
			{
				tempSleepWait=xTaskGetTickCount();
   24f3a:	4b31      	ldr	r3, [pc, #196]	; (25000 <vTask_sleep_manager+0xe4>)
   24f3c:	4798      	blx	r3
   24f3e:	0002      	movs	r2, r0
   24f40:	4b30      	ldr	r3, [pc, #192]	; (25004 <vTask_sleep_manager+0xe8>)
   24f42:	601a      	str	r2, [r3, #0]
				initSleepSeqeunce=true;
   24f44:	4b2d      	ldr	r3, [pc, #180]	; (24ffc <vTask_sleep_manager+0xe0>)
   24f46:	2201      	movs	r2, #1
   24f48:	701a      	strb	r2, [r3, #0]
   24f4a:	e7eb      	b.n	24f24 <vTask_sleep_manager+0x8>
			}
			else if(initSleepSeqeunce && xTaskGetTickCount()-tempSleepWait>sleepWaitTime)
   24f4c:	4b2b      	ldr	r3, [pc, #172]	; (24ffc <vTask_sleep_manager+0xe0>)
   24f4e:	781b      	ldrb	r3, [r3, #0]
   24f50:	2b00      	cmp	r3, #0
   24f52:	d0e7      	beq.n	24f24 <vTask_sleep_manager+0x8>
   24f54:	4b2a      	ldr	r3, [pc, #168]	; (25000 <vTask_sleep_manager+0xe4>)
   24f56:	4798      	blx	r3
   24f58:	0002      	movs	r2, r0
   24f5a:	4b2a      	ldr	r3, [pc, #168]	; (25004 <vTask_sleep_manager+0xe8>)
   24f5c:	681b      	ldr	r3, [r3, #0]
   24f5e:	1ad3      	subs	r3, r2, r3
   24f60:	4a29      	ldr	r2, [pc, #164]	; (25008 <vTask_sleep_manager+0xec>)
   24f62:	4293      	cmp	r3, r2
   24f64:	d9de      	bls.n	24f24 <vTask_sleep_manager+0x8>
			{
				uint8_t cnt=10;
   24f66:	230f      	movs	r3, #15
   24f68:	18fb      	adds	r3, r7, r3
   24f6a:	220a      	movs	r2, #10
   24f6c:	701a      	strb	r2, [r3, #0]
				bool led=false;
   24f6e:	230e      	movs	r3, #14
   24f70:	18fb      	adds	r3, r7, r3
   24f72:	2200      	movs	r2, #0
   24f74:	701a      	strb	r2, [r3, #0]
				do
				{
					led=!led;
   24f76:	230e      	movs	r3, #14
   24f78:	18fb      	adds	r3, r7, r3
   24f7a:	781b      	ldrb	r3, [r3, #0]
   24f7c:	1e5a      	subs	r2, r3, #1
   24f7e:	4193      	sbcs	r3, r2
   24f80:	b2db      	uxtb	r3, r3
   24f82:	2201      	movs	r2, #1
   24f84:	4053      	eors	r3, r2
   24f86:	b2db      	uxtb	r3, r3
   24f88:	001a      	movs	r2, r3
   24f8a:	230e      	movs	r3, #14
   24f8c:	18fb      	adds	r3, r7, r3
   24f8e:	701a      	strb	r2, [r3, #0]
   24f90:	781a      	ldrb	r2, [r3, #0]
   24f92:	2101      	movs	r1, #1
   24f94:	400a      	ands	r2, r1
   24f96:	701a      	strb	r2, [r3, #0]
					if(led)
   24f98:	230e      	movs	r3, #14
   24f9a:	18fb      	adds	r3, r7, r3
   24f9c:	781b      	ldrb	r3, [r3, #0]
   24f9e:	2b00      	cmp	r3, #0
   24fa0:	d004      	beq.n	24fac <vTask_sleep_manager+0x90>
					THREEPHASE_OK_LED_ON;
   24fa2:	2100      	movs	r1, #0
   24fa4:	2027      	movs	r0, #39	; 0x27
   24fa6:	4b19      	ldr	r3, [pc, #100]	; (2500c <vTask_sleep_manager+0xf0>)
   24fa8:	4798      	blx	r3
   24faa:	e003      	b.n	24fb4 <vTask_sleep_manager+0x98>
					else
					THREEPHASE_OK_LED_OFF;
   24fac:	2101      	movs	r1, #1
   24fae:	2027      	movs	r0, #39	; 0x27
   24fb0:	4b16      	ldr	r3, [pc, #88]	; (2500c <vTask_sleep_manager+0xf0>)
   24fb2:	4798      	blx	r3

					tempSleepWait=xTaskGetTickCount();
   24fb4:	4b12      	ldr	r3, [pc, #72]	; (25000 <vTask_sleep_manager+0xe4>)
   24fb6:	4798      	blx	r3
   24fb8:	0002      	movs	r2, r0
   24fba:	4b12      	ldr	r3, [pc, #72]	; (25004 <vTask_sleep_manager+0xe8>)
   24fbc:	601a      	str	r2, [r3, #0]
					while(xTaskGetTickCount()-tempSleepWait<200)
   24fbe:	46c0      	nop			; (mov r8, r8)
   24fc0:	4b0f      	ldr	r3, [pc, #60]	; (25000 <vTask_sleep_manager+0xe4>)
   24fc2:	4798      	blx	r3
   24fc4:	0002      	movs	r2, r0
   24fc6:	4b0f      	ldr	r3, [pc, #60]	; (25004 <vTask_sleep_manager+0xe8>)
   24fc8:	681b      	ldr	r3, [r3, #0]
   24fca:	1ad3      	subs	r3, r2, r3
   24fcc:	2bc7      	cmp	r3, #199	; 0xc7
   24fce:	d9f7      	bls.n	24fc0 <vTask_sleep_manager+0xa4>
					{}
				}while(--cnt);
   24fd0:	230f      	movs	r3, #15
   24fd2:	18fb      	adds	r3, r7, r3
   24fd4:	220f      	movs	r2, #15
   24fd6:	18ba      	adds	r2, r7, r2
   24fd8:	7812      	ldrb	r2, [r2, #0]
   24fda:	3a01      	subs	r2, #1
   24fdc:	701a      	strb	r2, [r3, #0]
   24fde:	230f      	movs	r3, #15
   24fe0:	18fb      	adds	r3, r7, r3
   24fe2:	781b      	ldrb	r3, [r3, #0]
   24fe4:	2b00      	cmp	r3, #0
   24fe6:	d1c6      	bne.n	24f76 <vTask_sleep_manager+0x5a>
				
				gotoSleep();
   24fe8:	4b09      	ldr	r3, [pc, #36]	; (25010 <vTask_sleep_manager+0xf4>)
   24fea:	4798      	blx	r3
   24fec:	e79a      	b.n	24f24 <vTask_sleep_manager+0x8>
			}
		}
		else
		{
			initSleepSeqeunce=false;
   24fee:	4b03      	ldr	r3, [pc, #12]	; (24ffc <vTask_sleep_manager+0xe0>)
   24ff0:	2200      	movs	r2, #0
   24ff2:	701a      	strb	r2, [r3, #0]
		if (checkSleepElligible())
   24ff4:	e796      	b.n	24f24 <vTask_sleep_manager+0x8>
   24ff6:	46c0      	nop			; (mov r8, r8)
   24ff8:	00024ed5 	.word	0x00024ed5
   24ffc:	2000070c 	.word	0x2000070c
   25000:	000201cd 	.word	0x000201cd
   25004:	20000710 	.word	0x20000710
   25008:	00004650 	.word	0x00004650
   2500c:	00024d6d 	.word	0x00024d6d
   25010:	00025015 	.word	0x00025015

00025014 <gotoSleep>:
		}
	}
}

void gotoSleep(void)
{
   25014:	b580      	push	{r7, lr}
   25016:	af00      	add	r7, sp, #0
	LCD_PWR_DIS();
   25018:	4b07      	ldr	r3, [pc, #28]	; (25038 <gotoSleep+0x24>)
   2501a:	4798      	blx	r3
	
	lcd_in_sleep = true;
   2501c:	4b07      	ldr	r3, [pc, #28]	; (2503c <gotoSleep+0x28>)
   2501e:	2201      	movs	r2, #1
   25020:	701a      	strb	r2, [r3, #0]
	setNetworkCharacter=true;
   25022:	4b07      	ldr	r3, [pc, #28]	; (25040 <gotoSleep+0x2c>)
   25024:	2201      	movs	r2, #1
   25026:	701a      	strb	r2, [r3, #0]
	system_sleep();
   25028:	4b06      	ldr	r3, [pc, #24]	; (25044 <gotoSleep+0x30>)
   2502a:	4798      	blx	r3
	mcuWakeUpFromSleep=true;
   2502c:	4b06      	ldr	r3, [pc, #24]	; (25048 <gotoSleep+0x34>)
   2502e:	2201      	movs	r2, #1
   25030:	701a      	strb	r2, [r3, #0]
   25032:	46c0      	nop			; (mov r8, r8)
   25034:	46bd      	mov	sp, r7
   25036:	bd80      	pop	{r7, pc}
   25038:	00013ce1 	.word	0x00013ce1
   2503c:	20000a64 	.word	0x20000a64
   25040:	20000a65 	.word	0x20000a65
   25044:	00024d39 	.word	0x00024d39
   25048:	20000a40 	.word	0x20000a40

0002504c <pow>:
   2504c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2504e:	4657      	mov	r7, sl
   25050:	464e      	mov	r6, r9
   25052:	46de      	mov	lr, fp
   25054:	4645      	mov	r5, r8
   25056:	b5e0      	push	{r5, r6, r7, lr}
   25058:	b08f      	sub	sp, #60	; 0x3c
   2505a:	001d      	movs	r5, r3
   2505c:	0006      	movs	r6, r0
   2505e:	000f      	movs	r7, r1
   25060:	0014      	movs	r4, r2
   25062:	f000 f9ff 	bl	25464 <__ieee754_pow>
   25066:	4bc7      	ldr	r3, [pc, #796]	; (25384 <pow+0x338>)
   25068:	9000      	str	r0, [sp, #0]
   2506a:	9101      	str	r1, [sp, #4]
   2506c:	469a      	mov	sl, r3
   2506e:	781b      	ldrb	r3, [r3, #0]
   25070:	b25b      	sxtb	r3, r3
   25072:	4699      	mov	r9, r3
   25074:	3301      	adds	r3, #1
   25076:	d03e      	beq.n	250f6 <pow+0xaa>
   25078:	0022      	movs	r2, r4
   2507a:	002b      	movs	r3, r5
   2507c:	0020      	movs	r0, r4
   2507e:	0029      	movs	r1, r5
   25080:	f003 fb92 	bl	287a8 <__aeabi_dcmpun>
   25084:	4683      	mov	fp, r0
   25086:	2800      	cmp	r0, #0
   25088:	d135      	bne.n	250f6 <pow+0xaa>
   2508a:	0032      	movs	r2, r6
   2508c:	003b      	movs	r3, r7
   2508e:	0030      	movs	r0, r6
   25090:	0039      	movs	r1, r7
   25092:	f003 fb89 	bl	287a8 <__aeabi_dcmpun>
   25096:	2200      	movs	r2, #0
   25098:	9003      	str	r0, [sp, #12]
   2509a:	2800      	cmp	r0, #0
   2509c:	d000      	beq.n	250a0 <pow+0x54>
   2509e:	e0b6      	b.n	2520e <pow+0x1c2>
   250a0:	2300      	movs	r3, #0
   250a2:	0030      	movs	r0, r6
   250a4:	0039      	movs	r1, r7
   250a6:	f001 faa1 	bl	265ec <__aeabi_dcmpeq>
   250aa:	2800      	cmp	r0, #0
   250ac:	d02c      	beq.n	25108 <pow+0xbc>
   250ae:	2200      	movs	r2, #0
   250b0:	2300      	movs	r3, #0
   250b2:	0020      	movs	r0, r4
   250b4:	0029      	movs	r1, r5
   250b6:	f001 fa99 	bl	265ec <__aeabi_dcmpeq>
   250ba:	4683      	mov	fp, r0
   250bc:	2800      	cmp	r0, #0
   250be:	d100      	bne.n	250c2 <pow+0x76>
   250c0:	e077      	b.n	251b2 <pow+0x166>
   250c2:	ab04      	add	r3, sp, #16
   250c4:	4698      	mov	r8, r3
   250c6:	2301      	movs	r3, #1
   250c8:	4642      	mov	r2, r8
   250ca:	9304      	str	r3, [sp, #16]
   250cc:	4bae      	ldr	r3, [pc, #696]	; (25388 <pow+0x33c>)
   250ce:	6053      	str	r3, [r2, #4]
   250d0:	4643      	mov	r3, r8
   250d2:	9a03      	ldr	r2, [sp, #12]
   250d4:	611c      	str	r4, [r3, #16]
   250d6:	615d      	str	r5, [r3, #20]
   250d8:	621a      	str	r2, [r3, #32]
   250da:	609e      	str	r6, [r3, #8]
   250dc:	60df      	str	r7, [r3, #12]
   250de:	4642      	mov	r2, r8
   250e0:	2300      	movs	r3, #0
   250e2:	2400      	movs	r4, #0
   250e4:	6193      	str	r3, [r2, #24]
   250e6:	61d4      	str	r4, [r2, #28]
   250e8:	464b      	mov	r3, r9
   250ea:	2b00      	cmp	r3, #0
   250ec:	d04d      	beq.n	2518a <pow+0x13e>
   250ee:	2300      	movs	r3, #0
   250f0:	4ca6      	ldr	r4, [pc, #664]	; (2538c <pow+0x340>)
   250f2:	9300      	str	r3, [sp, #0]
   250f4:	9401      	str	r4, [sp, #4]
   250f6:	9800      	ldr	r0, [sp, #0]
   250f8:	9901      	ldr	r1, [sp, #4]
   250fa:	b00f      	add	sp, #60	; 0x3c
   250fc:	bc3c      	pop	{r2, r3, r4, r5}
   250fe:	4690      	mov	r8, r2
   25100:	4699      	mov	r9, r3
   25102:	46a2      	mov	sl, r4
   25104:	46ab      	mov	fp, r5
   25106:	bdf0      	pop	{r4, r5, r6, r7, pc}
   25108:	9800      	ldr	r0, [sp, #0]
   2510a:	9901      	ldr	r1, [sp, #4]
   2510c:	f000 ffc4 	bl	26098 <finite>
   25110:	4681      	mov	r9, r0
   25112:	2800      	cmp	r0, #0
   25114:	d100      	bne.n	25118 <pow+0xcc>
   25116:	e09b      	b.n	25250 <pow+0x204>
   25118:	9800      	ldr	r0, [sp, #0]
   2511a:	9901      	ldr	r1, [sp, #4]
   2511c:	2200      	movs	r2, #0
   2511e:	2300      	movs	r3, #0
   25120:	f001 fa64 	bl	265ec <__aeabi_dcmpeq>
   25124:	2800      	cmp	r0, #0
   25126:	d0e6      	beq.n	250f6 <pow+0xaa>
   25128:	0030      	movs	r0, r6
   2512a:	0039      	movs	r1, r7
   2512c:	f000 ffb4 	bl	26098 <finite>
   25130:	2800      	cmp	r0, #0
   25132:	d0e0      	beq.n	250f6 <pow+0xaa>
   25134:	0020      	movs	r0, r4
   25136:	0029      	movs	r1, r5
   25138:	f000 ffae 	bl	26098 <finite>
   2513c:	2800      	cmp	r0, #0
   2513e:	d0da      	beq.n	250f6 <pow+0xaa>
   25140:	ab04      	add	r3, sp, #16
   25142:	4698      	mov	r8, r3
   25144:	2304      	movs	r3, #4
   25146:	4642      	mov	r2, r8
   25148:	9304      	str	r3, [sp, #16]
   2514a:	4b8f      	ldr	r3, [pc, #572]	; (25388 <pow+0x33c>)
   2514c:	6114      	str	r4, [r2, #16]
   2514e:	6155      	str	r5, [r2, #20]
   25150:	6053      	str	r3, [r2, #4]
   25152:	2300      	movs	r3, #0
   25154:	2400      	movs	r4, #0
   25156:	6213      	str	r3, [r2, #32]
   25158:	2300      	movs	r3, #0
   2515a:	6193      	str	r3, [r2, #24]
   2515c:	61d4      	str	r4, [r2, #28]
   2515e:	4653      	mov	r3, sl
   25160:	781b      	ldrb	r3, [r3, #0]
   25162:	6096      	str	r6, [r2, #8]
   25164:	60d7      	str	r7, [r2, #12]
   25166:	b25b      	sxtb	r3, r3
   25168:	2b02      	cmp	r3, #2
   2516a:	d004      	beq.n	25176 <pow+0x12a>
   2516c:	4640      	mov	r0, r8
   2516e:	f000 ff9d 	bl	260ac <matherr>
   25172:	2800      	cmp	r0, #0
   25174:	d10e      	bne.n	25194 <pow+0x148>
   25176:	f003 fc71 	bl	28a5c <__errno>
   2517a:	2322      	movs	r3, #34	; 0x22
   2517c:	6003      	str	r3, [r0, #0]
   2517e:	e009      	b.n	25194 <pow+0x148>
   25180:	4642      	mov	r2, r8
   25182:	2300      	movs	r3, #0
   25184:	2400      	movs	r4, #0
   25186:	6193      	str	r3, [r2, #24]
   25188:	61d4      	str	r4, [r2, #28]
   2518a:	4640      	mov	r0, r8
   2518c:	f000 ff8e 	bl	260ac <matherr>
   25190:	2800      	cmp	r0, #0
   25192:	d037      	beq.n	25204 <pow+0x1b8>
   25194:	4643      	mov	r3, r8
   25196:	6a1b      	ldr	r3, [r3, #32]
   25198:	2b00      	cmp	r3, #0
   2519a:	d004      	beq.n	251a6 <pow+0x15a>
   2519c:	f003 fc5e 	bl	28a5c <__errno>
   251a0:	4643      	mov	r3, r8
   251a2:	6a1b      	ldr	r3, [r3, #32]
   251a4:	6003      	str	r3, [r0, #0]
   251a6:	4643      	mov	r3, r8
   251a8:	69dc      	ldr	r4, [r3, #28]
   251aa:	699b      	ldr	r3, [r3, #24]
   251ac:	9300      	str	r3, [sp, #0]
   251ae:	9401      	str	r4, [sp, #4]
   251b0:	e7a1      	b.n	250f6 <pow+0xaa>
   251b2:	0020      	movs	r0, r4
   251b4:	0029      	movs	r1, r5
   251b6:	f000 ff6f 	bl	26098 <finite>
   251ba:	2800      	cmp	r0, #0
   251bc:	d09b      	beq.n	250f6 <pow+0xaa>
   251be:	2200      	movs	r2, #0
   251c0:	2300      	movs	r3, #0
   251c2:	0020      	movs	r0, r4
   251c4:	0029      	movs	r1, r5
   251c6:	f001 fa17 	bl	265f8 <__aeabi_dcmplt>
   251ca:	2800      	cmp	r0, #0
   251cc:	d100      	bne.n	251d0 <pow+0x184>
   251ce:	e792      	b.n	250f6 <pow+0xaa>
   251d0:	ab04      	add	r3, sp, #16
   251d2:	4698      	mov	r8, r3
   251d4:	2301      	movs	r3, #1
   251d6:	4642      	mov	r2, r8
   251d8:	9304      	str	r3, [sp, #16]
   251da:	4b6b      	ldr	r3, [pc, #428]	; (25388 <pow+0x33c>)
   251dc:	6053      	str	r3, [r2, #4]
   251de:	4643      	mov	r3, r8
   251e0:	465a      	mov	r2, fp
   251e2:	609e      	str	r6, [r3, #8]
   251e4:	60df      	str	r7, [r3, #12]
   251e6:	621a      	str	r2, [r3, #32]
   251e8:	611c      	str	r4, [r3, #16]
   251ea:	615d      	str	r5, [r3, #20]
   251ec:	4653      	mov	r3, sl
   251ee:	781b      	ldrb	r3, [r3, #0]
   251f0:	b25b      	sxtb	r3, r3
   251f2:	2b00      	cmp	r3, #0
   251f4:	d0c4      	beq.n	25180 <pow+0x134>
   251f6:	2000      	movs	r0, #0
   251f8:	4642      	mov	r2, r8
   251fa:	4965      	ldr	r1, [pc, #404]	; (25390 <pow+0x344>)
   251fc:	6190      	str	r0, [r2, #24]
   251fe:	61d1      	str	r1, [r2, #28]
   25200:	2b02      	cmp	r3, #2
   25202:	d1c2      	bne.n	2518a <pow+0x13e>
   25204:	f003 fc2a 	bl	28a5c <__errno>
   25208:	2321      	movs	r3, #33	; 0x21
   2520a:	6003      	str	r3, [r0, #0]
   2520c:	e7c2      	b.n	25194 <pow+0x148>
   2520e:	2300      	movs	r3, #0
   25210:	0020      	movs	r0, r4
   25212:	0029      	movs	r1, r5
   25214:	f001 f9ea 	bl	265ec <__aeabi_dcmpeq>
   25218:	2800      	cmp	r0, #0
   2521a:	d100      	bne.n	2521e <pow+0x1d2>
   2521c:	e76b      	b.n	250f6 <pow+0xaa>
   2521e:	ab04      	add	r3, sp, #16
   25220:	4698      	mov	r8, r3
   25222:	2301      	movs	r3, #1
   25224:	4642      	mov	r2, r8
   25226:	9304      	str	r3, [sp, #16]
   25228:	4b57      	ldr	r3, [pc, #348]	; (25388 <pow+0x33c>)
   2522a:	4641      	mov	r1, r8
   2522c:	6053      	str	r3, [r2, #4]
   2522e:	4643      	mov	r3, r8
   25230:	465a      	mov	r2, fp
   25232:	621a      	str	r2, [r3, #32]
   25234:	2200      	movs	r2, #0
   25236:	609e      	str	r6, [r3, #8]
   25238:	60df      	str	r7, [r3, #12]
   2523a:	611c      	str	r4, [r3, #16]
   2523c:	615d      	str	r5, [r3, #20]
   2523e:	4b53      	ldr	r3, [pc, #332]	; (2538c <pow+0x340>)
   25240:	618a      	str	r2, [r1, #24]
   25242:	61cb      	str	r3, [r1, #28]
   25244:	9200      	str	r2, [sp, #0]
   25246:	9301      	str	r3, [sp, #4]
   25248:	464b      	mov	r3, r9
   2524a:	2b02      	cmp	r3, #2
   2524c:	d19d      	bne.n	2518a <pow+0x13e>
   2524e:	e752      	b.n	250f6 <pow+0xaa>
   25250:	0030      	movs	r0, r6
   25252:	0039      	movs	r1, r7
   25254:	f000 ff20 	bl	26098 <finite>
   25258:	2800      	cmp	r0, #0
   2525a:	d100      	bne.n	2525e <pow+0x212>
   2525c:	e75c      	b.n	25118 <pow+0xcc>
   2525e:	0020      	movs	r0, r4
   25260:	0029      	movs	r1, r5
   25262:	f000 ff19 	bl	26098 <finite>
   25266:	2800      	cmp	r0, #0
   25268:	d100      	bne.n	2526c <pow+0x220>
   2526a:	e755      	b.n	25118 <pow+0xcc>
   2526c:	9800      	ldr	r0, [sp, #0]
   2526e:	9901      	ldr	r1, [sp, #4]
   25270:	000b      	movs	r3, r1
   25272:	0002      	movs	r2, r0
   25274:	f003 fa98 	bl	287a8 <__aeabi_dcmpun>
   25278:	ab04      	add	r3, sp, #16
   2527a:	4698      	mov	r8, r3
   2527c:	2800      	cmp	r0, #0
   2527e:	d161      	bne.n	25344 <pow+0x2f8>
   25280:	2303      	movs	r3, #3
   25282:	4642      	mov	r2, r8
   25284:	9304      	str	r3, [sp, #16]
   25286:	4b40      	ldr	r3, [pc, #256]	; (25388 <pow+0x33c>)
   25288:	6210      	str	r0, [r2, #32]
   2528a:	6053      	str	r3, [r2, #4]
   2528c:	4653      	mov	r3, sl
   2528e:	781b      	ldrb	r3, [r3, #0]
   25290:	6096      	str	r6, [r2, #8]
   25292:	60d7      	str	r7, [r2, #12]
   25294:	b25b      	sxtb	r3, r3
   25296:	6114      	str	r4, [r2, #16]
   25298:	6155      	str	r5, [r2, #20]
   2529a:	4699      	mov	r9, r3
   2529c:	2b00      	cmp	r3, #0
   2529e:	d12f      	bne.n	25300 <pow+0x2b4>
   252a0:	22e0      	movs	r2, #224	; 0xe0
   252a2:	4641      	mov	r1, r8
   252a4:	4b3b      	ldr	r3, [pc, #236]	; (25394 <pow+0x348>)
   252a6:	0612      	lsls	r2, r2, #24
   252a8:	618a      	str	r2, [r1, #24]
   252aa:	61cb      	str	r3, [r1, #28]
   252ac:	0030      	movs	r0, r6
   252ae:	2200      	movs	r2, #0
   252b0:	2300      	movs	r3, #0
   252b2:	0039      	movs	r1, r7
   252b4:	f001 f9a0 	bl	265f8 <__aeabi_dcmplt>
   252b8:	2800      	cmp	r0, #0
   252ba:	d100      	bne.n	252be <pow+0x272>
   252bc:	e756      	b.n	2516c <pow+0x120>
   252be:	2200      	movs	r2, #0
   252c0:	4b35      	ldr	r3, [pc, #212]	; (25398 <pow+0x34c>)
   252c2:	0020      	movs	r0, r4
   252c4:	0029      	movs	r1, r5
   252c6:	f002 fcd9 	bl	27c7c <__aeabi_dmul>
   252ca:	0004      	movs	r4, r0
   252cc:	000d      	movs	r5, r1
   252ce:	f000 fef5 	bl	260bc <rint>
   252d2:	0002      	movs	r2, r0
   252d4:	000b      	movs	r3, r1
   252d6:	0020      	movs	r0, r4
   252d8:	0029      	movs	r1, r5
   252da:	f001 f987 	bl	265ec <__aeabi_dcmpeq>
   252de:	2800      	cmp	r0, #0
   252e0:	d105      	bne.n	252ee <pow+0x2a2>
   252e2:	22e0      	movs	r2, #224	; 0xe0
   252e4:	4b2d      	ldr	r3, [pc, #180]	; (2539c <pow+0x350>)
   252e6:	0612      	lsls	r2, r2, #24
   252e8:	4641      	mov	r1, r8
   252ea:	618a      	str	r2, [r1, #24]
   252ec:	61cb      	str	r3, [r1, #28]
   252ee:	4653      	mov	r3, sl
   252f0:	781b      	ldrb	r3, [r3, #0]
   252f2:	b25b      	sxtb	r3, r3
   252f4:	4699      	mov	r9, r3
   252f6:	464b      	mov	r3, r9
   252f8:	2b02      	cmp	r3, #2
   252fa:	d000      	beq.n	252fe <pow+0x2b2>
   252fc:	e736      	b.n	2516c <pow+0x120>
   252fe:	e73a      	b.n	25176 <pow+0x12a>
   25300:	2200      	movs	r2, #0
   25302:	4641      	mov	r1, r8
   25304:	4b26      	ldr	r3, [pc, #152]	; (253a0 <pow+0x354>)
   25306:	0030      	movs	r0, r6
   25308:	618a      	str	r2, [r1, #24]
   2530a:	61cb      	str	r3, [r1, #28]
   2530c:	2200      	movs	r2, #0
   2530e:	2300      	movs	r3, #0
   25310:	0039      	movs	r1, r7
   25312:	f001 f971 	bl	265f8 <__aeabi_dcmplt>
   25316:	2800      	cmp	r0, #0
   25318:	d0ed      	beq.n	252f6 <pow+0x2aa>
   2531a:	2200      	movs	r2, #0
   2531c:	4b1e      	ldr	r3, [pc, #120]	; (25398 <pow+0x34c>)
   2531e:	0020      	movs	r0, r4
   25320:	0029      	movs	r1, r5
   25322:	f002 fcab 	bl	27c7c <__aeabi_dmul>
   25326:	0004      	movs	r4, r0
   25328:	000d      	movs	r5, r1
   2532a:	f000 fec7 	bl	260bc <rint>
   2532e:	0002      	movs	r2, r0
   25330:	000b      	movs	r3, r1
   25332:	0020      	movs	r0, r4
   25334:	0029      	movs	r1, r5
   25336:	f001 f959 	bl	265ec <__aeabi_dcmpeq>
   2533a:	2800      	cmp	r0, #0
   2533c:	d1d7      	bne.n	252ee <pow+0x2a2>
   2533e:	2200      	movs	r2, #0
   25340:	4b13      	ldr	r3, [pc, #76]	; (25390 <pow+0x344>)
   25342:	e7d1      	b.n	252e8 <pow+0x29c>
   25344:	2301      	movs	r3, #1
   25346:	4642      	mov	r2, r8
   25348:	9304      	str	r3, [sp, #16]
   2534a:	4b0f      	ldr	r3, [pc, #60]	; (25388 <pow+0x33c>)
   2534c:	6053      	str	r3, [r2, #4]
   2534e:	4643      	mov	r3, r8
   25350:	464a      	mov	r2, r9
   25352:	611c      	str	r4, [r3, #16]
   25354:	615d      	str	r5, [r3, #20]
   25356:	621a      	str	r2, [r3, #32]
   25358:	609e      	str	r6, [r3, #8]
   2535a:	60df      	str	r7, [r3, #12]
   2535c:	2400      	movs	r4, #0
   2535e:	4653      	mov	r3, sl
   25360:	571c      	ldrsb	r4, [r3, r4]
   25362:	2c00      	cmp	r4, #0
   25364:	d100      	bne.n	25368 <pow+0x31c>
   25366:	e70b      	b.n	25180 <pow+0x134>
   25368:	2300      	movs	r3, #0
   2536a:	2200      	movs	r2, #0
   2536c:	0019      	movs	r1, r3
   2536e:	0010      	movs	r0, r2
   25370:	f002 f850 	bl	27414 <__aeabi_ddiv>
   25374:	4643      	mov	r3, r8
   25376:	6198      	str	r0, [r3, #24]
   25378:	61d9      	str	r1, [r3, #28]
   2537a:	2c02      	cmp	r4, #2
   2537c:	d100      	bne.n	25380 <pow+0x334>
   2537e:	e741      	b.n	25204 <pow+0x1b8>
   25380:	e703      	b.n	2518a <pow+0x13e>
   25382:	46c0      	nop			; (mov r8, r8)
   25384:	20000030 	.word	0x20000030
   25388:	0002aad8 	.word	0x0002aad8
   2538c:	3ff00000 	.word	0x3ff00000
   25390:	fff00000 	.word	0xfff00000
   25394:	47efffff 	.word	0x47efffff
   25398:	3fe00000 	.word	0x3fe00000
   2539c:	c7efffff 	.word	0xc7efffff
   253a0:	7ff00000 	.word	0x7ff00000

000253a4 <sqrt>:
   253a4:	b5f0      	push	{r4, r5, r6, r7, lr}
   253a6:	4647      	mov	r7, r8
   253a8:	46ce      	mov	lr, r9
   253aa:	b580      	push	{r7, lr}
   253ac:	b08d      	sub	sp, #52	; 0x34
   253ae:	0004      	movs	r4, r0
   253b0:	000d      	movs	r5, r1
   253b2:	f000 fd8d 	bl	25ed0 <__ieee754_sqrt>
   253b6:	4b29      	ldr	r3, [pc, #164]	; (2545c <sqrt+0xb8>)
   253b8:	0006      	movs	r6, r0
   253ba:	781b      	ldrb	r3, [r3, #0]
   253bc:	000f      	movs	r7, r1
   253be:	b25b      	sxtb	r3, r3
   253c0:	4698      	mov	r8, r3
   253c2:	3301      	adds	r3, #1
   253c4:	d010      	beq.n	253e8 <sqrt+0x44>
   253c6:	0022      	movs	r2, r4
   253c8:	002b      	movs	r3, r5
   253ca:	0020      	movs	r0, r4
   253cc:	0029      	movs	r1, r5
   253ce:	f003 f9eb 	bl	287a8 <__aeabi_dcmpun>
   253d2:	4681      	mov	r9, r0
   253d4:	2800      	cmp	r0, #0
   253d6:	d107      	bne.n	253e8 <sqrt+0x44>
   253d8:	2200      	movs	r2, #0
   253da:	2300      	movs	r3, #0
   253dc:	0020      	movs	r0, r4
   253de:	0029      	movs	r1, r5
   253e0:	f001 f90a 	bl	265f8 <__aeabi_dcmplt>
   253e4:	2800      	cmp	r0, #0
   253e6:	d106      	bne.n	253f6 <sqrt+0x52>
   253e8:	0030      	movs	r0, r6
   253ea:	0039      	movs	r1, r7
   253ec:	b00d      	add	sp, #52	; 0x34
   253ee:	bc0c      	pop	{r2, r3}
   253f0:	4690      	mov	r8, r2
   253f2:	4699      	mov	r9, r3
   253f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   253f6:	2301      	movs	r3, #1
   253f8:	9302      	str	r3, [sp, #8]
   253fa:	4b19      	ldr	r3, [pc, #100]	; (25460 <sqrt+0xbc>)
   253fc:	9406      	str	r4, [sp, #24]
   253fe:	9507      	str	r5, [sp, #28]
   25400:	9303      	str	r3, [sp, #12]
   25402:	464b      	mov	r3, r9
   25404:	930a      	str	r3, [sp, #40]	; 0x28
   25406:	4643      	mov	r3, r8
   25408:	9404      	str	r4, [sp, #16]
   2540a:	9505      	str	r5, [sp, #20]
   2540c:	2b00      	cmp	r3, #0
   2540e:	d015      	beq.n	2543c <sqrt+0x98>
   25410:	2300      	movs	r3, #0
   25412:	2200      	movs	r2, #0
   25414:	0019      	movs	r1, r3
   25416:	0010      	movs	r0, r2
   25418:	f001 fffc 	bl	27414 <__aeabi_ddiv>
   2541c:	4643      	mov	r3, r8
   2541e:	9008      	str	r0, [sp, #32]
   25420:	9109      	str	r1, [sp, #36]	; 0x24
   25422:	2b02      	cmp	r3, #2
   25424:	d10e      	bne.n	25444 <sqrt+0xa0>
   25426:	f003 fb19 	bl	28a5c <__errno>
   2542a:	2321      	movs	r3, #33	; 0x21
   2542c:	6003      	str	r3, [r0, #0]
   2542e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   25430:	9301      	str	r3, [sp, #4]
   25432:	2b00      	cmp	r3, #0
   25434:	d10c      	bne.n	25450 <sqrt+0xac>
   25436:	9e08      	ldr	r6, [sp, #32]
   25438:	9f09      	ldr	r7, [sp, #36]	; 0x24
   2543a:	e7d5      	b.n	253e8 <sqrt+0x44>
   2543c:	2300      	movs	r3, #0
   2543e:	2400      	movs	r4, #0
   25440:	9308      	str	r3, [sp, #32]
   25442:	9409      	str	r4, [sp, #36]	; 0x24
   25444:	a802      	add	r0, sp, #8
   25446:	f000 fe31 	bl	260ac <matherr>
   2544a:	2800      	cmp	r0, #0
   2544c:	d1ef      	bne.n	2542e <sqrt+0x8a>
   2544e:	e7ea      	b.n	25426 <sqrt+0x82>
   25450:	f003 fb04 	bl	28a5c <__errno>
   25454:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   25456:	9301      	str	r3, [sp, #4]
   25458:	6003      	str	r3, [r0, #0]
   2545a:	e7ec      	b.n	25436 <sqrt+0x92>
   2545c:	20000030 	.word	0x20000030
   25460:	0002aadc 	.word	0x0002aadc

00025464 <__ieee754_pow>:
   25464:	b5f0      	push	{r4, r5, r6, r7, lr}
   25466:	4657      	mov	r7, sl
   25468:	464e      	mov	r6, r9
   2546a:	4645      	mov	r5, r8
   2546c:	46de      	mov	lr, fp
   2546e:	001c      	movs	r4, r3
   25470:	0013      	movs	r3, r2
   25472:	b5e0      	push	{r5, r6, r7, lr}
   25474:	0065      	lsls	r5, r4, #1
   25476:	b091      	sub	sp, #68	; 0x44
   25478:	086d      	lsrs	r5, r5, #1
   2547a:	9300      	str	r3, [sp, #0]
   2547c:	9401      	str	r4, [sp, #4]
   2547e:	0007      	movs	r7, r0
   25480:	000e      	movs	r6, r1
   25482:	4680      	mov	r8, r0
   25484:	4689      	mov	r9, r1
   25486:	46a2      	mov	sl, r4
   25488:	432b      	orrs	r3, r5
   2548a:	d031      	beq.n	254f0 <__ieee754_pow+0x8c>
   2548c:	4b67      	ldr	r3, [pc, #412]	; (2562c <__ieee754_pow+0x1c8>)
   2548e:	0074      	lsls	r4, r6, #1
   25490:	0864      	lsrs	r4, r4, #1
   25492:	429c      	cmp	r4, r3
   25494:	dc27      	bgt.n	254e6 <__ieee754_pow+0x82>
   25496:	d024      	beq.n	254e2 <__ieee754_pow+0x7e>
   25498:	429d      	cmp	r5, r3
   2549a:	dc24      	bgt.n	254e6 <__ieee754_pow+0x82>
   2549c:	4b63      	ldr	r3, [pc, #396]	; (2562c <__ieee754_pow+0x1c8>)
   2549e:	429d      	cmp	r5, r3
   254a0:	d100      	bne.n	254a4 <__ieee754_pow+0x40>
   254a2:	e081      	b.n	255a8 <__ieee754_pow+0x144>
   254a4:	2300      	movs	r3, #0
   254a6:	469b      	mov	fp, r3
   254a8:	464b      	mov	r3, r9
   254aa:	2b00      	cmp	r3, #0
   254ac:	da00      	bge.n	254b0 <__ieee754_pow+0x4c>
   254ae:	e07f      	b.n	255b0 <__ieee754_pow+0x14c>
   254b0:	2a00      	cmp	r2, #0
   254b2:	d12c      	bne.n	2550e <__ieee754_pow+0xaa>
   254b4:	4b5d      	ldr	r3, [pc, #372]	; (2562c <__ieee754_pow+0x1c8>)
   254b6:	429d      	cmp	r5, r3
   254b8:	d100      	bne.n	254bc <__ieee754_pow+0x58>
   254ba:	e097      	b.n	255ec <__ieee754_pow+0x188>
   254bc:	4b5c      	ldr	r3, [pc, #368]	; (25630 <__ieee754_pow+0x1cc>)
   254be:	429d      	cmp	r5, r3
   254c0:	d066      	beq.n	25590 <__ieee754_pow+0x12c>
   254c2:	2380      	movs	r3, #128	; 0x80
   254c4:	05db      	lsls	r3, r3, #23
   254c6:	459a      	cmp	sl, r3
   254c8:	d100      	bne.n	254cc <__ieee754_pow+0x68>
   254ca:	e3b9      	b.n	25c40 <__ieee754_pow+0x7dc>
   254cc:	4b59      	ldr	r3, [pc, #356]	; (25634 <__ieee754_pow+0x1d0>)
   254ce:	459a      	cmp	sl, r3
   254d0:	d11d      	bne.n	2550e <__ieee754_pow+0xaa>
   254d2:	464b      	mov	r3, r9
   254d4:	2b00      	cmp	r3, #0
   254d6:	db1a      	blt.n	2550e <__ieee754_pow+0xaa>
   254d8:	0038      	movs	r0, r7
   254da:	0031      	movs	r1, r6
   254dc:	f000 fcf8 	bl	25ed0 <__ieee754_sqrt>
   254e0:	e008      	b.n	254f4 <__ieee754_pow+0x90>
   254e2:	2800      	cmp	r0, #0
   254e4:	d00d      	beq.n	25502 <__ieee754_pow+0x9e>
   254e6:	4b54      	ldr	r3, [pc, #336]	; (25638 <__ieee754_pow+0x1d4>)
   254e8:	469c      	mov	ip, r3
   254ea:	4464      	add	r4, ip
   254ec:	4327      	orrs	r7, r4
   254ee:	d10a      	bne.n	25506 <__ieee754_pow+0xa2>
   254f0:	2000      	movs	r0, #0
   254f2:	494f      	ldr	r1, [pc, #316]	; (25630 <__ieee754_pow+0x1cc>)
   254f4:	b011      	add	sp, #68	; 0x44
   254f6:	bc3c      	pop	{r2, r3, r4, r5}
   254f8:	4690      	mov	r8, r2
   254fa:	4699      	mov	r9, r3
   254fc:	46a2      	mov	sl, r4
   254fe:	46ab      	mov	fp, r5
   25500:	bdf0      	pop	{r4, r5, r6, r7, pc}
   25502:	42a5      	cmp	r5, r4
   25504:	ddca      	ble.n	2549c <__ieee754_pow+0x38>
   25506:	484d      	ldr	r0, [pc, #308]	; (2563c <__ieee754_pow+0x1d8>)
   25508:	f000 fdd2 	bl	260b0 <nan>
   2550c:	e7f2      	b.n	254f4 <__ieee754_pow+0x90>
   2550e:	0038      	movs	r0, r7
   25510:	0031      	movs	r1, r6
   25512:	f000 fdbd 	bl	26090 <fabs>
   25516:	4643      	mov	r3, r8
   25518:	2b00      	cmp	r3, #0
   2551a:	d11d      	bne.n	25558 <__ieee754_pow+0xf4>
   2551c:	2c00      	cmp	r4, #0
   2551e:	d004      	beq.n	2552a <__ieee754_pow+0xc6>
   25520:	4a43      	ldr	r2, [pc, #268]	; (25630 <__ieee754_pow+0x1cc>)
   25522:	00b3      	lsls	r3, r6, #2
   25524:	089b      	lsrs	r3, r3, #2
   25526:	4293      	cmp	r3, r2
   25528:	d116      	bne.n	25558 <__ieee754_pow+0xf4>
   2552a:	4653      	mov	r3, sl
   2552c:	2b00      	cmp	r3, #0
   2552e:	da00      	bge.n	25532 <__ieee754_pow+0xce>
   25530:	e3c5      	b.n	25cbe <__ieee754_pow+0x85a>
   25532:	464b      	mov	r3, r9
   25534:	2b00      	cmp	r3, #0
   25536:	dadd      	bge.n	254f4 <__ieee754_pow+0x90>
   25538:	4b3f      	ldr	r3, [pc, #252]	; (25638 <__ieee754_pow+0x1d4>)
   2553a:	469c      	mov	ip, r3
   2553c:	465b      	mov	r3, fp
   2553e:	4464      	add	r4, ip
   25540:	431c      	orrs	r4, r3
   25542:	d101      	bne.n	25548 <__ieee754_pow+0xe4>
   25544:	f000 fc53 	bl	25dee <__ieee754_pow+0x98a>
   25548:	465b      	mov	r3, fp
   2554a:	2b01      	cmp	r3, #1
   2554c:	d1d2      	bne.n	254f4 <__ieee754_pow+0x90>
   2554e:	2480      	movs	r4, #128	; 0x80
   25550:	0624      	lsls	r4, r4, #24
   25552:	190b      	adds	r3, r1, r4
   25554:	0019      	movs	r1, r3
   25556:	e7cd      	b.n	254f4 <__ieee754_pow+0x90>
   25558:	0ff3      	lsrs	r3, r6, #31
   2555a:	3b01      	subs	r3, #1
   2555c:	4698      	mov	r8, r3
   2555e:	465b      	mov	r3, fp
   25560:	4642      	mov	r2, r8
   25562:	4313      	orrs	r3, r2
   25564:	d057      	beq.n	25616 <__ieee754_pow+0x1b2>
   25566:	4b36      	ldr	r3, [pc, #216]	; (25640 <__ieee754_pow+0x1dc>)
   25568:	429d      	cmp	r5, r3
   2556a:	dd77      	ble.n	2565c <__ieee754_pow+0x1f8>
   2556c:	4b35      	ldr	r3, [pc, #212]	; (25644 <__ieee754_pow+0x1e0>)
   2556e:	429d      	cmp	r5, r3
   25570:	dc00      	bgt.n	25574 <__ieee754_pow+0x110>
   25572:	e3b1      	b.n	25cd8 <__ieee754_pow+0x874>
   25574:	4b34      	ldr	r3, [pc, #208]	; (25648 <__ieee754_pow+0x1e4>)
   25576:	429c      	cmp	r4, r3
   25578:	dc00      	bgt.n	2557c <__ieee754_pow+0x118>
   2557a:	e3a8      	b.n	25cce <__ieee754_pow+0x86a>
   2557c:	4653      	mov	r3, sl
   2557e:	2b00      	cmp	r3, #0
   25580:	dd43      	ble.n	2560a <__ieee754_pow+0x1a6>
   25582:	4a32      	ldr	r2, [pc, #200]	; (2564c <__ieee754_pow+0x1e8>)
   25584:	4b32      	ldr	r3, [pc, #200]	; (25650 <__ieee754_pow+0x1ec>)
   25586:	0010      	movs	r0, r2
   25588:	0019      	movs	r1, r3
   2558a:	f002 fb77 	bl	27c7c <__aeabi_dmul>
   2558e:	e7b1      	b.n	254f4 <__ieee754_pow+0x90>
   25590:	4653      	mov	r3, sl
   25592:	0038      	movs	r0, r7
   25594:	0031      	movs	r1, r6
   25596:	2b00      	cmp	r3, #0
   25598:	daac      	bge.n	254f4 <__ieee754_pow+0x90>
   2559a:	003a      	movs	r2, r7
   2559c:	0033      	movs	r3, r6
   2559e:	2000      	movs	r0, #0
   255a0:	4923      	ldr	r1, [pc, #140]	; (25630 <__ieee754_pow+0x1cc>)
   255a2:	f001 ff37 	bl	27414 <__aeabi_ddiv>
   255a6:	e7a5      	b.n	254f4 <__ieee754_pow+0x90>
   255a8:	2a00      	cmp	r2, #0
   255aa:	d100      	bne.n	255ae <__ieee754_pow+0x14a>
   255ac:	e77a      	b.n	254a4 <__ieee754_pow+0x40>
   255ae:	e79a      	b.n	254e6 <__ieee754_pow+0x82>
   255b0:	4b28      	ldr	r3, [pc, #160]	; (25654 <__ieee754_pow+0x1f0>)
   255b2:	429d      	cmp	r5, r3
   255b4:	dc2c      	bgt.n	25610 <__ieee754_pow+0x1ac>
   255b6:	4b24      	ldr	r3, [pc, #144]	; (25648 <__ieee754_pow+0x1e4>)
   255b8:	429d      	cmp	r5, r3
   255ba:	dc00      	bgt.n	255be <__ieee754_pow+0x15a>
   255bc:	e778      	b.n	254b0 <__ieee754_pow+0x4c>
   255be:	4926      	ldr	r1, [pc, #152]	; (25658 <__ieee754_pow+0x1f4>)
   255c0:	152b      	asrs	r3, r5, #20
   255c2:	468c      	mov	ip, r1
   255c4:	4463      	add	r3, ip
   255c6:	2b14      	cmp	r3, #20
   255c8:	dc01      	bgt.n	255ce <__ieee754_pow+0x16a>
   255ca:	f000 fbf3 	bl	25db4 <__ieee754_pow+0x950>
   255ce:	2134      	movs	r1, #52	; 0x34
   255d0:	1acb      	subs	r3, r1, r3
   255d2:	9900      	ldr	r1, [sp, #0]
   255d4:	40d9      	lsrs	r1, r3
   255d6:	0008      	movs	r0, r1
   255d8:	4098      	lsls	r0, r3
   255da:	4282      	cmp	r2, r0
   255dc:	d000      	beq.n	255e0 <__ieee754_pow+0x17c>
   255de:	e767      	b.n	254b0 <__ieee754_pow+0x4c>
   255e0:	2301      	movs	r3, #1
   255e2:	4019      	ands	r1, r3
   255e4:	3301      	adds	r3, #1
   255e6:	1a5b      	subs	r3, r3, r1
   255e8:	469b      	mov	fp, r3
   255ea:	e761      	b.n	254b0 <__ieee754_pow+0x4c>
   255ec:	4b12      	ldr	r3, [pc, #72]	; (25638 <__ieee754_pow+0x1d4>)
   255ee:	18e3      	adds	r3, r4, r3
   255f0:	431f      	orrs	r7, r3
   255f2:	d100      	bne.n	255f6 <__ieee754_pow+0x192>
   255f4:	e77c      	b.n	254f0 <__ieee754_pow+0x8c>
   255f6:	4b14      	ldr	r3, [pc, #80]	; (25648 <__ieee754_pow+0x1e4>)
   255f8:	429c      	cmp	r4, r3
   255fa:	dc00      	bgt.n	255fe <__ieee754_pow+0x19a>
   255fc:	e327      	b.n	25c4e <__ieee754_pow+0x7ea>
   255fe:	9800      	ldr	r0, [sp, #0]
   25600:	9901      	ldr	r1, [sp, #4]
   25602:	4653      	mov	r3, sl
   25604:	2b00      	cmp	r3, #0
   25606:	db00      	blt.n	2560a <__ieee754_pow+0x1a6>
   25608:	e774      	b.n	254f4 <__ieee754_pow+0x90>
   2560a:	2000      	movs	r0, #0
   2560c:	2100      	movs	r1, #0
   2560e:	e771      	b.n	254f4 <__ieee754_pow+0x90>
   25610:	2302      	movs	r3, #2
   25612:	469b      	mov	fp, r3
   25614:	e74c      	b.n	254b0 <__ieee754_pow+0x4c>
   25616:	003a      	movs	r2, r7
   25618:	0033      	movs	r3, r6
   2561a:	0038      	movs	r0, r7
   2561c:	0031      	movs	r1, r6
   2561e:	f002 fdad 	bl	2817c <__aeabi_dsub>
   25622:	0002      	movs	r2, r0
   25624:	000b      	movs	r3, r1
   25626:	f001 fef5 	bl	27414 <__aeabi_ddiv>
   2562a:	e763      	b.n	254f4 <__ieee754_pow+0x90>
   2562c:	7ff00000 	.word	0x7ff00000
   25630:	3ff00000 	.word	0x3ff00000
   25634:	3fe00000 	.word	0x3fe00000
   25638:	c0100000 	.word	0xc0100000
   2563c:	0002aae0 	.word	0x0002aae0
   25640:	41e00000 	.word	0x41e00000
   25644:	43f00000 	.word	0x43f00000
   25648:	3fefffff 	.word	0x3fefffff
   2564c:	8800759c 	.word	0x8800759c
   25650:	7e37e43c 	.word	0x7e37e43c
   25654:	433fffff 	.word	0x433fffff
   25658:	fffffc01 	.word	0xfffffc01
   2565c:	4be9      	ldr	r3, [pc, #932]	; (25a04 <__ieee754_pow+0x5a0>)
   2565e:	2200      	movs	r2, #0
   25660:	429c      	cmp	r4, r3
   25662:	dc06      	bgt.n	25672 <__ieee754_pow+0x20e>
   25664:	2200      	movs	r2, #0
   25666:	4be8      	ldr	r3, [pc, #928]	; (25a08 <__ieee754_pow+0x5a4>)
   25668:	f002 fb08 	bl	27c7c <__aeabi_dmul>
   2566c:	2235      	movs	r2, #53	; 0x35
   2566e:	000c      	movs	r4, r1
   25670:	4252      	negs	r2, r2
   25672:	4de6      	ldr	r5, [pc, #920]	; (25a0c <__ieee754_pow+0x5a8>)
   25674:	1523      	asrs	r3, r4, #20
   25676:	46ac      	mov	ip, r5
   25678:	4463      	add	r3, ip
   2567a:	4699      	mov	r9, r3
   2567c:	0324      	lsls	r4, r4, #12
   2567e:	4de4      	ldr	r5, [pc, #912]	; (25a10 <__ieee754_pow+0x5ac>)
   25680:	4be4      	ldr	r3, [pc, #912]	; (25a14 <__ieee754_pow+0x5b0>)
   25682:	0b24      	lsrs	r4, r4, #12
   25684:	4491      	add	r9, r2
   25686:	4325      	orrs	r5, r4
   25688:	429c      	cmp	r4, r3
   2568a:	dd09      	ble.n	256a0 <__ieee754_pow+0x23c>
   2568c:	4be2      	ldr	r3, [pc, #904]	; (25a18 <__ieee754_pow+0x5b4>)
   2568e:	429c      	cmp	r4, r3
   25690:	dc00      	bgt.n	25694 <__ieee754_pow+0x230>
   25692:	e3b6      	b.n	25e02 <__ieee754_pow+0x99e>
   25694:	2301      	movs	r3, #1
   25696:	469c      	mov	ip, r3
   25698:	4be0      	ldr	r3, [pc, #896]	; (25a1c <__ieee754_pow+0x5b8>)
   2569a:	44e1      	add	r9, ip
   2569c:	469c      	mov	ip, r3
   2569e:	4465      	add	r5, ip
   256a0:	2300      	movs	r3, #0
   256a2:	2400      	movs	r4, #0
   256a4:	2200      	movs	r2, #0
   256a6:	9308      	str	r3, [sp, #32]
   256a8:	9409      	str	r4, [sp, #36]	; 0x24
   256aa:	930c      	str	r3, [sp, #48]	; 0x30
   256ac:	940d      	str	r4, [sp, #52]	; 0x34
   256ae:	2400      	movs	r4, #0
   256b0:	4bd7      	ldr	r3, [pc, #860]	; (25a10 <__ieee754_pow+0x5ac>)
   256b2:	9206      	str	r2, [sp, #24]
   256b4:	9307      	str	r3, [sp, #28]
   256b6:	9a06      	ldr	r2, [sp, #24]
   256b8:	9b07      	ldr	r3, [sp, #28]
   256ba:	0029      	movs	r1, r5
   256bc:	900a      	str	r0, [sp, #40]	; 0x28
   256be:	910b      	str	r1, [sp, #44]	; 0x2c
   256c0:	f002 fd5c 	bl	2817c <__aeabi_dsub>
   256c4:	9a06      	ldr	r2, [sp, #24]
   256c6:	9b07      	ldr	r3, [sp, #28]
   256c8:	0006      	movs	r6, r0
   256ca:	000f      	movs	r7, r1
   256cc:	980a      	ldr	r0, [sp, #40]	; 0x28
   256ce:	990b      	ldr	r1, [sp, #44]	; 0x2c
   256d0:	f001 fb90 	bl	26df4 <__aeabi_dadd>
   256d4:	0002      	movs	r2, r0
   256d6:	000b      	movs	r3, r1
   256d8:	2000      	movs	r0, #0
   256da:	49cd      	ldr	r1, [pc, #820]	; (25a10 <__ieee754_pow+0x5ac>)
   256dc:	f001 fe9a 	bl	27414 <__aeabi_ddiv>
   256e0:	000a      	movs	r2, r1
   256e2:	0001      	movs	r1, r0
   256e4:	0013      	movs	r3, r2
   256e6:	910e      	str	r1, [sp, #56]	; 0x38
   256e8:	920f      	str	r2, [sp, #60]	; 0x3c
   256ea:	0002      	movs	r2, r0
   256ec:	0039      	movs	r1, r7
   256ee:	0030      	movs	r0, r6
   256f0:	f002 fac4 	bl	27c7c <__aeabi_dmul>
   256f4:	000a      	movs	r2, r1
   256f6:	0001      	movs	r1, r0
   256f8:	2080      	movs	r0, #128	; 0x80
   256fa:	9104      	str	r1, [sp, #16]
   256fc:	9205      	str	r2, [sp, #20]
   256fe:	0013      	movs	r3, r2
   25700:	2200      	movs	r2, #0
   25702:	1069      	asrs	r1, r5, #1
   25704:	2580      	movs	r5, #128	; 0x80
   25706:	0300      	lsls	r0, r0, #12
   25708:	4684      	mov	ip, r0
   2570a:	9202      	str	r2, [sp, #8]
   2570c:	9303      	str	r3, [sp, #12]
   2570e:	2200      	movs	r2, #0
   25710:	05ad      	lsls	r5, r5, #22
   25712:	430d      	orrs	r5, r1
   25714:	4465      	add	r5, ip
   25716:	192b      	adds	r3, r5, r4
   25718:	9802      	ldr	r0, [sp, #8]
   2571a:	9903      	ldr	r1, [sp, #12]
   2571c:	0014      	movs	r4, r2
   2571e:	001d      	movs	r5, r3
   25720:	f002 faac 	bl	27c7c <__aeabi_dmul>
   25724:	0002      	movs	r2, r0
   25726:	000b      	movs	r3, r1
   25728:	0030      	movs	r0, r6
   2572a:	0039      	movs	r1, r7
   2572c:	f002 fd26 	bl	2817c <__aeabi_dsub>
   25730:	9a06      	ldr	r2, [sp, #24]
   25732:	9b07      	ldr	r3, [sp, #28]
   25734:	0006      	movs	r6, r0
   25736:	000f      	movs	r7, r1
   25738:	0020      	movs	r0, r4
   2573a:	0029      	movs	r1, r5
   2573c:	f002 fd1e 	bl	2817c <__aeabi_dsub>
   25740:	0002      	movs	r2, r0
   25742:	000b      	movs	r3, r1
   25744:	980a      	ldr	r0, [sp, #40]	; 0x28
   25746:	990b      	ldr	r1, [sp, #44]	; 0x2c
   25748:	f002 fd18 	bl	2817c <__aeabi_dsub>
   2574c:	9a02      	ldr	r2, [sp, #8]
   2574e:	9b03      	ldr	r3, [sp, #12]
   25750:	f002 fa94 	bl	27c7c <__aeabi_dmul>
   25754:	0002      	movs	r2, r0
   25756:	000b      	movs	r3, r1
   25758:	0030      	movs	r0, r6
   2575a:	0039      	movs	r1, r7
   2575c:	f002 fd0e 	bl	2817c <__aeabi_dsub>
   25760:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   25762:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   25764:	f002 fa8a 	bl	27c7c <__aeabi_dmul>
   25768:	9d04      	ldr	r5, [sp, #16]
   2576a:	9e05      	ldr	r6, [sp, #20]
   2576c:	9006      	str	r0, [sp, #24]
   2576e:	9107      	str	r1, [sp, #28]
   25770:	002a      	movs	r2, r5
   25772:	0033      	movs	r3, r6
   25774:	0028      	movs	r0, r5
   25776:	0031      	movs	r1, r6
   25778:	f002 fa80 	bl	27c7c <__aeabi_dmul>
   2577c:	0006      	movs	r6, r0
   2577e:	000f      	movs	r7, r1
   25780:	4aa7      	ldr	r2, [pc, #668]	; (25a20 <__ieee754_pow+0x5bc>)
   25782:	4ba8      	ldr	r3, [pc, #672]	; (25a24 <__ieee754_pow+0x5c0>)
   25784:	f002 fa7a 	bl	27c7c <__aeabi_dmul>
   25788:	4aa7      	ldr	r2, [pc, #668]	; (25a28 <__ieee754_pow+0x5c4>)
   2578a:	4ba8      	ldr	r3, [pc, #672]	; (25a2c <__ieee754_pow+0x5c8>)
   2578c:	f001 fb32 	bl	26df4 <__aeabi_dadd>
   25790:	0032      	movs	r2, r6
   25792:	003b      	movs	r3, r7
   25794:	f002 fa72 	bl	27c7c <__aeabi_dmul>
   25798:	4aa5      	ldr	r2, [pc, #660]	; (25a30 <__ieee754_pow+0x5cc>)
   2579a:	4ba6      	ldr	r3, [pc, #664]	; (25a34 <__ieee754_pow+0x5d0>)
   2579c:	f001 fb2a 	bl	26df4 <__aeabi_dadd>
   257a0:	0032      	movs	r2, r6
   257a2:	003b      	movs	r3, r7
   257a4:	f002 fa6a 	bl	27c7c <__aeabi_dmul>
   257a8:	4aa3      	ldr	r2, [pc, #652]	; (25a38 <__ieee754_pow+0x5d4>)
   257aa:	4ba4      	ldr	r3, [pc, #656]	; (25a3c <__ieee754_pow+0x5d8>)
   257ac:	f001 fb22 	bl	26df4 <__aeabi_dadd>
   257b0:	0032      	movs	r2, r6
   257b2:	003b      	movs	r3, r7
   257b4:	f002 fa62 	bl	27c7c <__aeabi_dmul>
   257b8:	4aa1      	ldr	r2, [pc, #644]	; (25a40 <__ieee754_pow+0x5dc>)
   257ba:	4ba2      	ldr	r3, [pc, #648]	; (25a44 <__ieee754_pow+0x5e0>)
   257bc:	f001 fb1a 	bl	26df4 <__aeabi_dadd>
   257c0:	0032      	movs	r2, r6
   257c2:	003b      	movs	r3, r7
   257c4:	f002 fa5a 	bl	27c7c <__aeabi_dmul>
   257c8:	4a9f      	ldr	r2, [pc, #636]	; (25a48 <__ieee754_pow+0x5e4>)
   257ca:	4ba0      	ldr	r3, [pc, #640]	; (25a4c <__ieee754_pow+0x5e8>)
   257cc:	f001 fb12 	bl	26df4 <__aeabi_dadd>
   257d0:	0032      	movs	r2, r6
   257d2:	0004      	movs	r4, r0
   257d4:	000d      	movs	r5, r1
   257d6:	003b      	movs	r3, r7
   257d8:	0030      	movs	r0, r6
   257da:	0039      	movs	r1, r7
   257dc:	f002 fa4e 	bl	27c7c <__aeabi_dmul>
   257e0:	0002      	movs	r2, r0
   257e2:	000b      	movs	r3, r1
   257e4:	0020      	movs	r0, r4
   257e6:	0029      	movs	r1, r5
   257e8:	f002 fa48 	bl	27c7c <__aeabi_dmul>
   257ec:	9e02      	ldr	r6, [sp, #8]
   257ee:	9f03      	ldr	r7, [sp, #12]
   257f0:	0004      	movs	r4, r0
   257f2:	000d      	movs	r5, r1
   257f4:	9804      	ldr	r0, [sp, #16]
   257f6:	9905      	ldr	r1, [sp, #20]
   257f8:	0032      	movs	r2, r6
   257fa:	003b      	movs	r3, r7
   257fc:	f001 fafa 	bl	26df4 <__aeabi_dadd>
   25800:	9a06      	ldr	r2, [sp, #24]
   25802:	9b07      	ldr	r3, [sp, #28]
   25804:	f002 fa3a 	bl	27c7c <__aeabi_dmul>
   25808:	0022      	movs	r2, r4
   2580a:	002b      	movs	r3, r5
   2580c:	f001 faf2 	bl	26df4 <__aeabi_dadd>
   25810:	0032      	movs	r2, r6
   25812:	900a      	str	r0, [sp, #40]	; 0x28
   25814:	910b      	str	r1, [sp, #44]	; 0x2c
   25816:	003b      	movs	r3, r7
   25818:	0030      	movs	r0, r6
   2581a:	0039      	movs	r1, r7
   2581c:	9602      	str	r6, [sp, #8]
   2581e:	9703      	str	r7, [sp, #12]
   25820:	f002 fa2c 	bl	27c7c <__aeabi_dmul>
   25824:	2200      	movs	r2, #0
   25826:	4b8a      	ldr	r3, [pc, #552]	; (25a50 <__ieee754_pow+0x5ec>)
   25828:	0004      	movs	r4, r0
   2582a:	000d      	movs	r5, r1
   2582c:	f001 fae2 	bl	26df4 <__aeabi_dadd>
   25830:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   25832:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   25834:	f001 fade 	bl	26df4 <__aeabi_dadd>
   25838:	2600      	movs	r6, #0
   2583a:	000f      	movs	r7, r1
   2583c:	0032      	movs	r2, r6
   2583e:	000b      	movs	r3, r1
   25840:	9802      	ldr	r0, [sp, #8]
   25842:	9903      	ldr	r1, [sp, #12]
   25844:	f002 fa1a 	bl	27c7c <__aeabi_dmul>
   25848:	2200      	movs	r2, #0
   2584a:	9002      	str	r0, [sp, #8]
   2584c:	9103      	str	r1, [sp, #12]
   2584e:	4b80      	ldr	r3, [pc, #512]	; (25a50 <__ieee754_pow+0x5ec>)
   25850:	0030      	movs	r0, r6
   25852:	0039      	movs	r1, r7
   25854:	f002 fc92 	bl	2817c <__aeabi_dsub>
   25858:	0022      	movs	r2, r4
   2585a:	002b      	movs	r3, r5
   2585c:	f002 fc8e 	bl	2817c <__aeabi_dsub>
   25860:	0002      	movs	r2, r0
   25862:	000b      	movs	r3, r1
   25864:	980a      	ldr	r0, [sp, #40]	; 0x28
   25866:	990b      	ldr	r1, [sp, #44]	; 0x2c
   25868:	f002 fc88 	bl	2817c <__aeabi_dsub>
   2586c:	9a04      	ldr	r2, [sp, #16]
   2586e:	9b05      	ldr	r3, [sp, #20]
   25870:	f002 fa04 	bl	27c7c <__aeabi_dmul>
   25874:	0032      	movs	r2, r6
   25876:	0004      	movs	r4, r0
   25878:	000d      	movs	r5, r1
   2587a:	9806      	ldr	r0, [sp, #24]
   2587c:	9907      	ldr	r1, [sp, #28]
   2587e:	003b      	movs	r3, r7
   25880:	f002 f9fc 	bl	27c7c <__aeabi_dmul>
   25884:	0002      	movs	r2, r0
   25886:	000b      	movs	r3, r1
   25888:	0020      	movs	r0, r4
   2588a:	0029      	movs	r1, r5
   2588c:	f001 fab2 	bl	26df4 <__aeabi_dadd>
   25890:	0004      	movs	r4, r0
   25892:	000d      	movs	r5, r1
   25894:	0002      	movs	r2, r0
   25896:	000b      	movs	r3, r1
   25898:	9802      	ldr	r0, [sp, #8]
   2589a:	9903      	ldr	r1, [sp, #12]
   2589c:	f001 faaa 	bl	26df4 <__aeabi_dadd>
   258a0:	2600      	movs	r6, #0
   258a2:	22e0      	movs	r2, #224	; 0xe0
   258a4:	4b6b      	ldr	r3, [pc, #428]	; (25a54 <__ieee754_pow+0x5f0>)
   258a6:	0612      	lsls	r2, r2, #24
   258a8:	0030      	movs	r0, r6
   258aa:	000f      	movs	r7, r1
   258ac:	f002 f9e6 	bl	27c7c <__aeabi_dmul>
   258b0:	9a02      	ldr	r2, [sp, #8]
   258b2:	9b03      	ldr	r3, [sp, #12]
   258b4:	9004      	str	r0, [sp, #16]
   258b6:	9105      	str	r1, [sp, #20]
   258b8:	0030      	movs	r0, r6
   258ba:	0039      	movs	r1, r7
   258bc:	f002 fc5e 	bl	2817c <__aeabi_dsub>
   258c0:	0002      	movs	r2, r0
   258c2:	000b      	movs	r3, r1
   258c4:	0020      	movs	r0, r4
   258c6:	0029      	movs	r1, r5
   258c8:	f002 fc58 	bl	2817c <__aeabi_dsub>
   258cc:	4a62      	ldr	r2, [pc, #392]	; (25a58 <__ieee754_pow+0x5f4>)
   258ce:	4b61      	ldr	r3, [pc, #388]	; (25a54 <__ieee754_pow+0x5f0>)
   258d0:	f002 f9d4 	bl	27c7c <__aeabi_dmul>
   258d4:	4a61      	ldr	r2, [pc, #388]	; (25a5c <__ieee754_pow+0x5f8>)
   258d6:	0004      	movs	r4, r0
   258d8:	000d      	movs	r5, r1
   258da:	4b61      	ldr	r3, [pc, #388]	; (25a60 <__ieee754_pow+0x5fc>)
   258dc:	0030      	movs	r0, r6
   258de:	0039      	movs	r1, r7
   258e0:	f002 f9cc 	bl	27c7c <__aeabi_dmul>
   258e4:	0002      	movs	r2, r0
   258e6:	000b      	movs	r3, r1
   258e8:	0020      	movs	r0, r4
   258ea:	0029      	movs	r1, r5
   258ec:	f001 fa82 	bl	26df4 <__aeabi_dadd>
   258f0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   258f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   258f4:	f001 fa7e 	bl	26df4 <__aeabi_dadd>
   258f8:	0006      	movs	r6, r0
   258fa:	4648      	mov	r0, r9
   258fc:	000f      	movs	r7, r1
   258fe:	f002 ffa7 	bl	28850 <__aeabi_i2d>
   25902:	0004      	movs	r4, r0
   25904:	000d      	movs	r5, r1
   25906:	9804      	ldr	r0, [sp, #16]
   25908:	9905      	ldr	r1, [sp, #20]
   2590a:	0032      	movs	r2, r6
   2590c:	003b      	movs	r3, r7
   2590e:	f001 fa71 	bl	26df4 <__aeabi_dadd>
   25912:	9a08      	ldr	r2, [sp, #32]
   25914:	9b09      	ldr	r3, [sp, #36]	; 0x24
   25916:	f001 fa6d 	bl	26df4 <__aeabi_dadd>
   2591a:	0022      	movs	r2, r4
   2591c:	002b      	movs	r3, r5
   2591e:	f001 fa69 	bl	26df4 <__aeabi_dadd>
   25922:	2000      	movs	r0, #0
   25924:	0022      	movs	r2, r4
   25926:	002b      	movs	r3, r5
   25928:	9002      	str	r0, [sp, #8]
   2592a:	9103      	str	r1, [sp, #12]
   2592c:	f002 fc26 	bl	2817c <__aeabi_dsub>
   25930:	9a08      	ldr	r2, [sp, #32]
   25932:	9b09      	ldr	r3, [sp, #36]	; 0x24
   25934:	f002 fc22 	bl	2817c <__aeabi_dsub>
   25938:	9a04      	ldr	r2, [sp, #16]
   2593a:	9b05      	ldr	r3, [sp, #20]
   2593c:	f002 fc1e 	bl	2817c <__aeabi_dsub>
   25940:	0002      	movs	r2, r0
   25942:	000b      	movs	r3, r1
   25944:	0030      	movs	r0, r6
   25946:	0039      	movs	r1, r7
   25948:	f002 fc18 	bl	2817c <__aeabi_dsub>
   2594c:	9004      	str	r0, [sp, #16]
   2594e:	9105      	str	r1, [sp, #20]
   25950:	465b      	mov	r3, fp
   25952:	4642      	mov	r2, r8
   25954:	3b01      	subs	r3, #1
   25956:	4313      	orrs	r3, r2
   25958:	d100      	bne.n	2595c <__ieee754_pow+0x4f8>
   2595a:	e1ab      	b.n	25cb4 <__ieee754_pow+0x850>
   2595c:	2300      	movs	r3, #0
   2595e:	4c2c      	ldr	r4, [pc, #176]	; (25a10 <__ieee754_pow+0x5ac>)
   25960:	9306      	str	r3, [sp, #24]
   25962:	9407      	str	r4, [sp, #28]
   25964:	9800      	ldr	r0, [sp, #0]
   25966:	9901      	ldr	r1, [sp, #4]
   25968:	2600      	movs	r6, #0
   2596a:	000b      	movs	r3, r1
   2596c:	0032      	movs	r2, r6
   2596e:	000f      	movs	r7, r1
   25970:	f002 fc04 	bl	2817c <__aeabi_dsub>
   25974:	9a02      	ldr	r2, [sp, #8]
   25976:	9b03      	ldr	r3, [sp, #12]
   25978:	f002 f980 	bl	27c7c <__aeabi_dmul>
   2597c:	9a00      	ldr	r2, [sp, #0]
   2597e:	9b01      	ldr	r3, [sp, #4]
   25980:	0004      	movs	r4, r0
   25982:	000d      	movs	r5, r1
   25984:	9804      	ldr	r0, [sp, #16]
   25986:	9905      	ldr	r1, [sp, #20]
   25988:	f002 f978 	bl	27c7c <__aeabi_dmul>
   2598c:	0002      	movs	r2, r0
   2598e:	000b      	movs	r3, r1
   25990:	0020      	movs	r0, r4
   25992:	0029      	movs	r1, r5
   25994:	f001 fa2e 	bl	26df4 <__aeabi_dadd>
   25998:	0004      	movs	r4, r0
   2599a:	000d      	movs	r5, r1
   2599c:	9802      	ldr	r0, [sp, #8]
   2599e:	9903      	ldr	r1, [sp, #12]
   259a0:	0032      	movs	r2, r6
   259a2:	003b      	movs	r3, r7
   259a4:	9400      	str	r4, [sp, #0]
   259a6:	9501      	str	r5, [sp, #4]
   259a8:	f002 f968 	bl	27c7c <__aeabi_dmul>
   259ac:	0002      	movs	r2, r0
   259ae:	000b      	movs	r3, r1
   259b0:	0006      	movs	r6, r0
   259b2:	000f      	movs	r7, r1
   259b4:	0020      	movs	r0, r4
   259b6:	0029      	movs	r1, r5
   259b8:	f001 fa1c 	bl	26df4 <__aeabi_dadd>
   259bc:	4b29      	ldr	r3, [pc, #164]	; (25a64 <__ieee754_pow+0x600>)
   259be:	0004      	movs	r4, r0
   259c0:	000d      	movs	r5, r1
   259c2:	0002      	movs	r2, r0
   259c4:	468b      	mov	fp, r1
   259c6:	4299      	cmp	r1, r3
   259c8:	dc00      	bgt.n	259cc <__ieee754_pow+0x568>
   259ca:	e14f      	b.n	25c6c <__ieee754_pow+0x808>
   259cc:	4b26      	ldr	r3, [pc, #152]	; (25a68 <__ieee754_pow+0x604>)
   259ce:	18cb      	adds	r3, r1, r3
   259d0:	4303      	orrs	r3, r0
   259d2:	d000      	beq.n	259d6 <__ieee754_pow+0x572>
   259d4:	e1e2      	b.n	25d9c <__ieee754_pow+0x938>
   259d6:	9800      	ldr	r0, [sp, #0]
   259d8:	9901      	ldr	r1, [sp, #4]
   259da:	4a24      	ldr	r2, [pc, #144]	; (25a6c <__ieee754_pow+0x608>)
   259dc:	4b24      	ldr	r3, [pc, #144]	; (25a70 <__ieee754_pow+0x60c>)
   259de:	f001 fa09 	bl	26df4 <__aeabi_dadd>
   259e2:	0032      	movs	r2, r6
   259e4:	9002      	str	r0, [sp, #8]
   259e6:	9103      	str	r1, [sp, #12]
   259e8:	003b      	movs	r3, r7
   259ea:	0020      	movs	r0, r4
   259ec:	0029      	movs	r1, r5
   259ee:	f002 fbc5 	bl	2817c <__aeabi_dsub>
   259f2:	0002      	movs	r2, r0
   259f4:	000b      	movs	r3, r1
   259f6:	9802      	ldr	r0, [sp, #8]
   259f8:	9903      	ldr	r1, [sp, #12]
   259fa:	f000 fe11 	bl	26620 <__aeabi_dcmpgt>
   259fe:	46aa      	mov	sl, r5
   25a00:	e038      	b.n	25a74 <__ieee754_pow+0x610>
   25a02:	46c0      	nop			; (mov r8, r8)
   25a04:	000fffff 	.word	0x000fffff
   25a08:	43400000 	.word	0x43400000
   25a0c:	fffffc01 	.word	0xfffffc01
   25a10:	3ff00000 	.word	0x3ff00000
   25a14:	0003988e 	.word	0x0003988e
   25a18:	000bb679 	.word	0x000bb679
   25a1c:	fff00000 	.word	0xfff00000
   25a20:	4a454eef 	.word	0x4a454eef
   25a24:	3fca7e28 	.word	0x3fca7e28
   25a28:	93c9db65 	.word	0x93c9db65
   25a2c:	3fcd864a 	.word	0x3fcd864a
   25a30:	a91d4101 	.word	0xa91d4101
   25a34:	3fd17460 	.word	0x3fd17460
   25a38:	518f264d 	.word	0x518f264d
   25a3c:	3fd55555 	.word	0x3fd55555
   25a40:	db6fabff 	.word	0xdb6fabff
   25a44:	3fdb6db6 	.word	0x3fdb6db6
   25a48:	33333303 	.word	0x33333303
   25a4c:	3fe33333 	.word	0x3fe33333
   25a50:	40080000 	.word	0x40080000
   25a54:	3feec709 	.word	0x3feec709
   25a58:	dc3a03fd 	.word	0xdc3a03fd
   25a5c:	145b01f5 	.word	0x145b01f5
   25a60:	be3e2fe0 	.word	0xbe3e2fe0
   25a64:	408fffff 	.word	0x408fffff
   25a68:	bf700000 	.word	0xbf700000
   25a6c:	652b82fe 	.word	0x652b82fe
   25a70:	3c971547 	.word	0x3c971547
   25a74:	2800      	cmp	r0, #0
   25a76:	d000      	beq.n	25a7a <__ieee754_pow+0x616>
   25a78:	e190      	b.n	25d9c <__ieee754_pow+0x938>
   25a7a:	4aec      	ldr	r2, [pc, #944]	; (25e2c <__ieee754_pow+0x9c8>)
   25a7c:	4653      	mov	r3, sl
   25a7e:	4694      	mov	ip, r2
   25a80:	2280      	movs	r2, #128	; 0x80
   25a82:	0352      	lsls	r2, r2, #13
   25a84:	0011      	movs	r1, r2
   25a86:	151b      	asrs	r3, r3, #20
   25a88:	4463      	add	r3, ip
   25a8a:	4119      	asrs	r1, r3
   25a8c:	000b      	movs	r3, r1
   25a8e:	4690      	mov	r8, r2
   25a90:	4ae7      	ldr	r2, [pc, #924]	; (25e30 <__ieee754_pow+0x9cc>)
   25a92:	445b      	add	r3, fp
   25a94:	4694      	mov	ip, r2
   25a96:	005c      	lsls	r4, r3, #1
   25a98:	0d64      	lsrs	r4, r4, #21
   25a9a:	4de6      	ldr	r5, [pc, #920]	; (25e34 <__ieee754_pow+0x9d0>)
   25a9c:	4464      	add	r4, ip
   25a9e:	4125      	asrs	r5, r4
   25aa0:	001a      	movs	r2, r3
   25aa2:	43aa      	bics	r2, r5
   25aa4:	0011      	movs	r1, r2
   25aa6:	4642      	mov	r2, r8
   25aa8:	031b      	lsls	r3, r3, #12
   25aaa:	0b1b      	lsrs	r3, r3, #12
   25aac:	4313      	orrs	r3, r2
   25aae:	2214      	movs	r2, #20
   25ab0:	1b14      	subs	r4, r2, r4
   25ab2:	4123      	asrs	r3, r4
   25ab4:	4699      	mov	r9, r3
   25ab6:	465b      	mov	r3, fp
   25ab8:	2000      	movs	r0, #0
   25aba:	2b00      	cmp	r3, #0
   25abc:	da00      	bge.n	25ac0 <__ieee754_pow+0x65c>
   25abe:	e1b0      	b.n	25e22 <__ieee754_pow+0x9be>
   25ac0:	0002      	movs	r2, r0
   25ac2:	000b      	movs	r3, r1
   25ac4:	0030      	movs	r0, r6
   25ac6:	0039      	movs	r1, r7
   25ac8:	f002 fb58 	bl	2817c <__aeabi_dsub>
   25acc:	000b      	movs	r3, r1
   25ace:	0002      	movs	r2, r0
   25ad0:	0006      	movs	r6, r0
   25ad2:	000f      	movs	r7, r1
   25ad4:	9800      	ldr	r0, [sp, #0]
   25ad6:	9901      	ldr	r1, [sp, #4]
   25ad8:	f001 f98c 	bl	26df4 <__aeabi_dadd>
   25adc:	464b      	mov	r3, r9
   25ade:	051b      	lsls	r3, r3, #20
   25ae0:	000d      	movs	r5, r1
   25ae2:	4698      	mov	r8, r3
   25ae4:	2400      	movs	r4, #0
   25ae6:	2200      	movs	r2, #0
   25ae8:	4bd3      	ldr	r3, [pc, #844]	; (25e38 <__ieee754_pow+0x9d4>)
   25aea:	0020      	movs	r0, r4
   25aec:	0029      	movs	r1, r5
   25aee:	f002 f8c5 	bl	27c7c <__aeabi_dmul>
   25af2:	0032      	movs	r2, r6
   25af4:	9002      	str	r0, [sp, #8]
   25af6:	9103      	str	r1, [sp, #12]
   25af8:	003b      	movs	r3, r7
   25afa:	0020      	movs	r0, r4
   25afc:	0029      	movs	r1, r5
   25afe:	f002 fb3d 	bl	2817c <__aeabi_dsub>
   25b02:	0002      	movs	r2, r0
   25b04:	000b      	movs	r3, r1
   25b06:	9800      	ldr	r0, [sp, #0]
   25b08:	9901      	ldr	r1, [sp, #4]
   25b0a:	f002 fb37 	bl	2817c <__aeabi_dsub>
   25b0e:	4acb      	ldr	r2, [pc, #812]	; (25e3c <__ieee754_pow+0x9d8>)
   25b10:	4bcb      	ldr	r3, [pc, #812]	; (25e40 <__ieee754_pow+0x9dc>)
   25b12:	f002 f8b3 	bl	27c7c <__aeabi_dmul>
   25b16:	4acb      	ldr	r2, [pc, #812]	; (25e44 <__ieee754_pow+0x9e0>)
   25b18:	0006      	movs	r6, r0
   25b1a:	000f      	movs	r7, r1
   25b1c:	4bca      	ldr	r3, [pc, #808]	; (25e48 <__ieee754_pow+0x9e4>)
   25b1e:	0020      	movs	r0, r4
   25b20:	0029      	movs	r1, r5
   25b22:	f002 f8ab 	bl	27c7c <__aeabi_dmul>
   25b26:	0002      	movs	r2, r0
   25b28:	000b      	movs	r3, r1
   25b2a:	0030      	movs	r0, r6
   25b2c:	0039      	movs	r1, r7
   25b2e:	f001 f961 	bl	26df4 <__aeabi_dadd>
   25b32:	0004      	movs	r4, r0
   25b34:	000d      	movs	r5, r1
   25b36:	0002      	movs	r2, r0
   25b38:	000b      	movs	r3, r1
   25b3a:	9802      	ldr	r0, [sp, #8]
   25b3c:	9903      	ldr	r1, [sp, #12]
   25b3e:	f001 f959 	bl	26df4 <__aeabi_dadd>
   25b42:	9a02      	ldr	r2, [sp, #8]
   25b44:	9b03      	ldr	r3, [sp, #12]
   25b46:	0006      	movs	r6, r0
   25b48:	000f      	movs	r7, r1
   25b4a:	f002 fb17 	bl	2817c <__aeabi_dsub>
   25b4e:	0002      	movs	r2, r0
   25b50:	000b      	movs	r3, r1
   25b52:	0020      	movs	r0, r4
   25b54:	0029      	movs	r1, r5
   25b56:	f002 fb11 	bl	2817c <__aeabi_dsub>
   25b5a:	0032      	movs	r2, r6
   25b5c:	9000      	str	r0, [sp, #0]
   25b5e:	9101      	str	r1, [sp, #4]
   25b60:	003b      	movs	r3, r7
   25b62:	0030      	movs	r0, r6
   25b64:	0039      	movs	r1, r7
   25b66:	f002 f889 	bl	27c7c <__aeabi_dmul>
   25b6a:	0004      	movs	r4, r0
   25b6c:	000d      	movs	r5, r1
   25b6e:	4ab7      	ldr	r2, [pc, #732]	; (25e4c <__ieee754_pow+0x9e8>)
   25b70:	4bb7      	ldr	r3, [pc, #732]	; (25e50 <__ieee754_pow+0x9ec>)
   25b72:	f002 f883 	bl	27c7c <__aeabi_dmul>
   25b76:	4ab7      	ldr	r2, [pc, #732]	; (25e54 <__ieee754_pow+0x9f0>)
   25b78:	4bb7      	ldr	r3, [pc, #732]	; (25e58 <__ieee754_pow+0x9f4>)
   25b7a:	f002 faff 	bl	2817c <__aeabi_dsub>
   25b7e:	0022      	movs	r2, r4
   25b80:	002b      	movs	r3, r5
   25b82:	f002 f87b 	bl	27c7c <__aeabi_dmul>
   25b86:	4ab5      	ldr	r2, [pc, #724]	; (25e5c <__ieee754_pow+0x9f8>)
   25b88:	4bb5      	ldr	r3, [pc, #724]	; (25e60 <__ieee754_pow+0x9fc>)
   25b8a:	f001 f933 	bl	26df4 <__aeabi_dadd>
   25b8e:	0022      	movs	r2, r4
   25b90:	002b      	movs	r3, r5
   25b92:	f002 f873 	bl	27c7c <__aeabi_dmul>
   25b96:	4ab3      	ldr	r2, [pc, #716]	; (25e64 <__ieee754_pow+0xa00>)
   25b98:	4bb3      	ldr	r3, [pc, #716]	; (25e68 <__ieee754_pow+0xa04>)
   25b9a:	f002 faef 	bl	2817c <__aeabi_dsub>
   25b9e:	0022      	movs	r2, r4
   25ba0:	002b      	movs	r3, r5
   25ba2:	f002 f86b 	bl	27c7c <__aeabi_dmul>
   25ba6:	4ab1      	ldr	r2, [pc, #708]	; (25e6c <__ieee754_pow+0xa08>)
   25ba8:	4bb1      	ldr	r3, [pc, #708]	; (25e70 <__ieee754_pow+0xa0c>)
   25baa:	f001 f923 	bl	26df4 <__aeabi_dadd>
   25bae:	0022      	movs	r2, r4
   25bb0:	002b      	movs	r3, r5
   25bb2:	f002 f863 	bl	27c7c <__aeabi_dmul>
   25bb6:	0002      	movs	r2, r0
   25bb8:	000b      	movs	r3, r1
   25bba:	0030      	movs	r0, r6
   25bbc:	0039      	movs	r1, r7
   25bbe:	f002 fadd 	bl	2817c <__aeabi_dsub>
   25bc2:	0004      	movs	r4, r0
   25bc4:	000d      	movs	r5, r1
   25bc6:	0002      	movs	r2, r0
   25bc8:	000b      	movs	r3, r1
   25bca:	0030      	movs	r0, r6
   25bcc:	0039      	movs	r1, r7
   25bce:	f002 f855 	bl	27c7c <__aeabi_dmul>
   25bd2:	2380      	movs	r3, #128	; 0x80
   25bd4:	9002      	str	r0, [sp, #8]
   25bd6:	9103      	str	r1, [sp, #12]
   25bd8:	2200      	movs	r2, #0
   25bda:	05db      	lsls	r3, r3, #23
   25bdc:	0020      	movs	r0, r4
   25bde:	0029      	movs	r1, r5
   25be0:	f002 facc 	bl	2817c <__aeabi_dsub>
   25be4:	0002      	movs	r2, r0
   25be6:	000b      	movs	r3, r1
   25be8:	9802      	ldr	r0, [sp, #8]
   25bea:	9903      	ldr	r1, [sp, #12]
   25bec:	f001 fc12 	bl	27414 <__aeabi_ddiv>
   25bf0:	9a00      	ldr	r2, [sp, #0]
   25bf2:	9b01      	ldr	r3, [sp, #4]
   25bf4:	0004      	movs	r4, r0
   25bf6:	000d      	movs	r5, r1
   25bf8:	0030      	movs	r0, r6
   25bfa:	0039      	movs	r1, r7
   25bfc:	f002 f83e 	bl	27c7c <__aeabi_dmul>
   25c00:	9a00      	ldr	r2, [sp, #0]
   25c02:	9b01      	ldr	r3, [sp, #4]
   25c04:	f001 f8f6 	bl	26df4 <__aeabi_dadd>
   25c08:	0002      	movs	r2, r0
   25c0a:	000b      	movs	r3, r1
   25c0c:	0020      	movs	r0, r4
   25c0e:	0029      	movs	r1, r5
   25c10:	f002 fab4 	bl	2817c <__aeabi_dsub>
   25c14:	0032      	movs	r2, r6
   25c16:	003b      	movs	r3, r7
   25c18:	f002 fab0 	bl	2817c <__aeabi_dsub>
   25c1c:	0002      	movs	r2, r0
   25c1e:	000b      	movs	r3, r1
   25c20:	2000      	movs	r0, #0
   25c22:	4994      	ldr	r1, [pc, #592]	; (25e74 <__ieee754_pow+0xa10>)
   25c24:	f002 faaa 	bl	2817c <__aeabi_dsub>
   25c28:	4643      	mov	r3, r8
   25c2a:	185b      	adds	r3, r3, r1
   25c2c:	151a      	asrs	r2, r3, #20
   25c2e:	2a00      	cmp	r2, #0
   25c30:	dc00      	bgt.n	25c34 <__ieee754_pow+0x7d0>
   25c32:	e149      	b.n	25ec8 <__ieee754_pow+0xa64>
   25c34:	0019      	movs	r1, r3
   25c36:	9a06      	ldr	r2, [sp, #24]
   25c38:	9b07      	ldr	r3, [sp, #28]
   25c3a:	f002 f81f 	bl	27c7c <__aeabi_dmul>
   25c3e:	e459      	b.n	254f4 <__ieee754_pow+0x90>
   25c40:	003a      	movs	r2, r7
   25c42:	0033      	movs	r3, r6
   25c44:	0038      	movs	r0, r7
   25c46:	0031      	movs	r1, r6
   25c48:	f002 f818 	bl	27c7c <__aeabi_dmul>
   25c4c:	e452      	b.n	254f4 <__ieee754_pow+0x90>
   25c4e:	4653      	mov	r3, sl
   25c50:	2b00      	cmp	r3, #0
   25c52:	db00      	blt.n	25c56 <__ieee754_pow+0x7f2>
   25c54:	e4d9      	b.n	2560a <__ieee754_pow+0x1a6>
   25c56:	9c00      	ldr	r4, [sp, #0]
   25c58:	9d01      	ldr	r5, [sp, #4]
   25c5a:	2280      	movs	r2, #128	; 0x80
   25c5c:	0612      	lsls	r2, r2, #24
   25c5e:	002b      	movs	r3, r5
   25c60:	4694      	mov	ip, r2
   25c62:	4463      	add	r3, ip
   25c64:	0020      	movs	r0, r4
   25c66:	0019      	movs	r1, r3
   25c68:	f7ff fc44 	bl	254f4 <__ieee754_pow+0x90>
   25c6c:	004b      	lsls	r3, r1, #1
   25c6e:	085b      	lsrs	r3, r3, #1
   25c70:	469a      	mov	sl, r3
   25c72:	4b81      	ldr	r3, [pc, #516]	; (25e78 <__ieee754_pow+0xa14>)
   25c74:	459a      	cmp	sl, r3
   25c76:	dc00      	bgt.n	25c7a <__ieee754_pow+0x816>
   25c78:	e0b1      	b.n	25dde <__ieee754_pow+0x97a>
   25c7a:	4b80      	ldr	r3, [pc, #512]	; (25e7c <__ieee754_pow+0xa18>)
   25c7c:	445b      	add	r3, fp
   25c7e:	431a      	orrs	r2, r3
   25c80:	d10c      	bne.n	25c9c <__ieee754_pow+0x838>
   25c82:	0032      	movs	r2, r6
   25c84:	003b      	movs	r3, r7
   25c86:	f002 fa79 	bl	2817c <__aeabi_dsub>
   25c8a:	0002      	movs	r2, r0
   25c8c:	000b      	movs	r3, r1
   25c8e:	9800      	ldr	r0, [sp, #0]
   25c90:	9901      	ldr	r1, [sp, #4]
   25c92:	f000 fcbb 	bl	2660c <__aeabi_dcmple>
   25c96:	2800      	cmp	r0, #0
   25c98:	d100      	bne.n	25c9c <__ieee754_pow+0x838>
   25c9a:	e6ee      	b.n	25a7a <__ieee754_pow+0x616>
   25c9c:	9806      	ldr	r0, [sp, #24]
   25c9e:	9907      	ldr	r1, [sp, #28]
   25ca0:	4a77      	ldr	r2, [pc, #476]	; (25e80 <__ieee754_pow+0xa1c>)
   25ca2:	4b78      	ldr	r3, [pc, #480]	; (25e84 <__ieee754_pow+0xa20>)
   25ca4:	f001 ffea 	bl	27c7c <__aeabi_dmul>
   25ca8:	4a75      	ldr	r2, [pc, #468]	; (25e80 <__ieee754_pow+0xa1c>)
   25caa:	4b76      	ldr	r3, [pc, #472]	; (25e84 <__ieee754_pow+0xa20>)
   25cac:	f001 ffe6 	bl	27c7c <__aeabi_dmul>
   25cb0:	f7ff fc20 	bl	254f4 <__ieee754_pow+0x90>
   25cb4:	2300      	movs	r3, #0
   25cb6:	4c74      	ldr	r4, [pc, #464]	; (25e88 <__ieee754_pow+0xa24>)
   25cb8:	9306      	str	r3, [sp, #24]
   25cba:	9407      	str	r4, [sp, #28]
   25cbc:	e652      	b.n	25964 <__ieee754_pow+0x500>
   25cbe:	0002      	movs	r2, r0
   25cc0:	000b      	movs	r3, r1
   25cc2:	2000      	movs	r0, #0
   25cc4:	496b      	ldr	r1, [pc, #428]	; (25e74 <__ieee754_pow+0xa10>)
   25cc6:	f001 fba5 	bl	27414 <__aeabi_ddiv>
   25cca:	f7ff fc32 	bl	25532 <__ieee754_pow+0xce>
   25cce:	4653      	mov	r3, sl
   25cd0:	2b00      	cmp	r3, #0
   25cd2:	db00      	blt.n	25cd6 <__ieee754_pow+0x872>
   25cd4:	e499      	b.n	2560a <__ieee754_pow+0x1a6>
   25cd6:	e454      	b.n	25582 <__ieee754_pow+0x11e>
   25cd8:	4b6c      	ldr	r3, [pc, #432]	; (25e8c <__ieee754_pow+0xa28>)
   25cda:	429c      	cmp	r4, r3
   25cdc:	ddf7      	ble.n	25cce <__ieee754_pow+0x86a>
   25cde:	4b65      	ldr	r3, [pc, #404]	; (25e74 <__ieee754_pow+0xa10>)
   25ce0:	429c      	cmp	r4, r3
   25ce2:	dd00      	ble.n	25ce6 <__ieee754_pow+0x882>
   25ce4:	e44a      	b.n	2557c <__ieee754_pow+0x118>
   25ce6:	2200      	movs	r2, #0
   25ce8:	4b62      	ldr	r3, [pc, #392]	; (25e74 <__ieee754_pow+0xa10>)
   25cea:	f002 fa47 	bl	2817c <__aeabi_dsub>
   25cee:	22c0      	movs	r2, #192	; 0xc0
   25cf0:	4b67      	ldr	r3, [pc, #412]	; (25e90 <__ieee754_pow+0xa2c>)
   25cf2:	05d2      	lsls	r2, r2, #23
   25cf4:	0004      	movs	r4, r0
   25cf6:	000d      	movs	r5, r1
   25cf8:	f001 ffc0 	bl	27c7c <__aeabi_dmul>
   25cfc:	4a65      	ldr	r2, [pc, #404]	; (25e94 <__ieee754_pow+0xa30>)
   25cfe:	0006      	movs	r6, r0
   25d00:	000f      	movs	r7, r1
   25d02:	4b65      	ldr	r3, [pc, #404]	; (25e98 <__ieee754_pow+0xa34>)
   25d04:	0020      	movs	r0, r4
   25d06:	0029      	movs	r1, r5
   25d08:	f001 ffb8 	bl	27c7c <__aeabi_dmul>
   25d0c:	2200      	movs	r2, #0
   25d0e:	9002      	str	r0, [sp, #8]
   25d10:	9103      	str	r1, [sp, #12]
   25d12:	4b62      	ldr	r3, [pc, #392]	; (25e9c <__ieee754_pow+0xa38>)
   25d14:	0020      	movs	r0, r4
   25d16:	0029      	movs	r1, r5
   25d18:	f001 ffb0 	bl	27c7c <__aeabi_dmul>
   25d1c:	0002      	movs	r2, r0
   25d1e:	000b      	movs	r3, r1
   25d20:	485f      	ldr	r0, [pc, #380]	; (25ea0 <__ieee754_pow+0xa3c>)
   25d22:	4960      	ldr	r1, [pc, #384]	; (25ea4 <__ieee754_pow+0xa40>)
   25d24:	f002 fa2a 	bl	2817c <__aeabi_dsub>
   25d28:	0022      	movs	r2, r4
   25d2a:	002b      	movs	r3, r5
   25d2c:	f001 ffa6 	bl	27c7c <__aeabi_dmul>
   25d30:	0002      	movs	r2, r0
   25d32:	000b      	movs	r3, r1
   25d34:	2000      	movs	r0, #0
   25d36:	495c      	ldr	r1, [pc, #368]	; (25ea8 <__ieee754_pow+0xa44>)
   25d38:	f002 fa20 	bl	2817c <__aeabi_dsub>
   25d3c:	0022      	movs	r2, r4
   25d3e:	9004      	str	r0, [sp, #16]
   25d40:	9105      	str	r1, [sp, #20]
   25d42:	002b      	movs	r3, r5
   25d44:	0020      	movs	r0, r4
   25d46:	0029      	movs	r1, r5
   25d48:	f001 ff98 	bl	27c7c <__aeabi_dmul>
   25d4c:	0002      	movs	r2, r0
   25d4e:	000b      	movs	r3, r1
   25d50:	9804      	ldr	r0, [sp, #16]
   25d52:	9905      	ldr	r1, [sp, #20]
   25d54:	f001 ff92 	bl	27c7c <__aeabi_dmul>
   25d58:	4a54      	ldr	r2, [pc, #336]	; (25eac <__ieee754_pow+0xa48>)
   25d5a:	4b4d      	ldr	r3, [pc, #308]	; (25e90 <__ieee754_pow+0xa2c>)
   25d5c:	f001 ff8e 	bl	27c7c <__aeabi_dmul>
   25d60:	0002      	movs	r2, r0
   25d62:	000b      	movs	r3, r1
   25d64:	9802      	ldr	r0, [sp, #8]
   25d66:	9903      	ldr	r1, [sp, #12]
   25d68:	f002 fa08 	bl	2817c <__aeabi_dsub>
   25d6c:	0002      	movs	r2, r0
   25d6e:	000b      	movs	r3, r1
   25d70:	0004      	movs	r4, r0
   25d72:	000d      	movs	r5, r1
   25d74:	0030      	movs	r0, r6
   25d76:	0039      	movs	r1, r7
   25d78:	f001 f83c 	bl	26df4 <__aeabi_dadd>
   25d7c:	2000      	movs	r0, #0
   25d7e:	0032      	movs	r2, r6
   25d80:	003b      	movs	r3, r7
   25d82:	9002      	str	r0, [sp, #8]
   25d84:	9103      	str	r1, [sp, #12]
   25d86:	f002 f9f9 	bl	2817c <__aeabi_dsub>
   25d8a:	0002      	movs	r2, r0
   25d8c:	000b      	movs	r3, r1
   25d8e:	0020      	movs	r0, r4
   25d90:	0029      	movs	r1, r5
   25d92:	f002 f9f3 	bl	2817c <__aeabi_dsub>
   25d96:	9004      	str	r0, [sp, #16]
   25d98:	9105      	str	r1, [sp, #20]
   25d9a:	e5d9      	b.n	25950 <__ieee754_pow+0x4ec>
   25d9c:	4a44      	ldr	r2, [pc, #272]	; (25eb0 <__ieee754_pow+0xa4c>)
   25d9e:	4b45      	ldr	r3, [pc, #276]	; (25eb4 <__ieee754_pow+0xa50>)
   25da0:	9806      	ldr	r0, [sp, #24]
   25da2:	9907      	ldr	r1, [sp, #28]
   25da4:	f001 ff6a 	bl	27c7c <__aeabi_dmul>
   25da8:	4a41      	ldr	r2, [pc, #260]	; (25eb0 <__ieee754_pow+0xa4c>)
   25daa:	4b42      	ldr	r3, [pc, #264]	; (25eb4 <__ieee754_pow+0xa50>)
   25dac:	f001 ff66 	bl	27c7c <__aeabi_dmul>
   25db0:	f7ff fba0 	bl	254f4 <__ieee754_pow+0x90>
   25db4:	2a00      	cmp	r2, #0
   25db6:	d001      	beq.n	25dbc <__ieee754_pow+0x958>
   25db8:	f7ff fba9 	bl	2550e <__ieee754_pow+0xaa>
   25dbc:	3214      	adds	r2, #20
   25dbe:	1ad3      	subs	r3, r2, r3
   25dc0:	002a      	movs	r2, r5
   25dc2:	411a      	asrs	r2, r3
   25dc4:	0011      	movs	r1, r2
   25dc6:	4099      	lsls	r1, r3
   25dc8:	428d      	cmp	r5, r1
   25dca:	d001      	beq.n	25dd0 <__ieee754_pow+0x96c>
   25dcc:	f7ff fb76 	bl	254bc <__ieee754_pow+0x58>
   25dd0:	2301      	movs	r3, #1
   25dd2:	401a      	ands	r2, r3
   25dd4:	18db      	adds	r3, r3, r3
   25dd6:	1a9b      	subs	r3, r3, r2
   25dd8:	469b      	mov	fp, r3
   25dda:	f7ff fb6f 	bl	254bc <__ieee754_pow+0x58>
   25dde:	2200      	movs	r2, #0
   25de0:	4b31      	ldr	r3, [pc, #196]	; (25ea8 <__ieee754_pow+0xa44>)
   25de2:	4690      	mov	r8, r2
   25de4:	4691      	mov	r9, r2
   25de6:	459a      	cmp	sl, r3
   25de8:	dc00      	bgt.n	25dec <__ieee754_pow+0x988>
   25dea:	e67b      	b.n	25ae4 <__ieee754_pow+0x680>
   25dec:	e645      	b.n	25a7a <__ieee754_pow+0x616>
   25dee:	0002      	movs	r2, r0
   25df0:	000b      	movs	r3, r1
   25df2:	f002 f9c3 	bl	2817c <__aeabi_dsub>
   25df6:	0002      	movs	r2, r0
   25df8:	000b      	movs	r3, r1
   25dfa:	f001 fb0b 	bl	27414 <__aeabi_ddiv>
   25dfe:	f7ff fb79 	bl	254f4 <__ieee754_pow+0x90>
   25e02:	2380      	movs	r3, #128	; 0x80
   25e04:	4c2c      	ldr	r4, [pc, #176]	; (25eb8 <__ieee754_pow+0xa54>)
   25e06:	05db      	lsls	r3, r3, #23
   25e08:	9308      	str	r3, [sp, #32]
   25e0a:	9409      	str	r4, [sp, #36]	; 0x24
   25e0c:	4b2b      	ldr	r3, [pc, #172]	; (25ebc <__ieee754_pow+0xa58>)
   25e0e:	4c2c      	ldr	r4, [pc, #176]	; (25ec0 <__ieee754_pow+0xa5c>)
   25e10:	2200      	movs	r2, #0
   25e12:	930c      	str	r3, [sp, #48]	; 0x30
   25e14:	940d      	str	r4, [sp, #52]	; 0x34
   25e16:	2480      	movs	r4, #128	; 0x80
   25e18:	4b2a      	ldr	r3, [pc, #168]	; (25ec4 <__ieee754_pow+0xa60>)
   25e1a:	02e4      	lsls	r4, r4, #11
   25e1c:	9206      	str	r2, [sp, #24]
   25e1e:	9307      	str	r3, [sp, #28]
   25e20:	e449      	b.n	256b6 <__ieee754_pow+0x252>
   25e22:	464b      	mov	r3, r9
   25e24:	425b      	negs	r3, r3
   25e26:	4699      	mov	r9, r3
   25e28:	e64a      	b.n	25ac0 <__ieee754_pow+0x65c>
   25e2a:	46c0      	nop			; (mov r8, r8)
   25e2c:	fffffc02 	.word	0xfffffc02
   25e30:	fffffc01 	.word	0xfffffc01
   25e34:	000fffff 	.word	0x000fffff
   25e38:	3fe62e43 	.word	0x3fe62e43
   25e3c:	fefa39ef 	.word	0xfefa39ef
   25e40:	3fe62e42 	.word	0x3fe62e42
   25e44:	0ca86c39 	.word	0x0ca86c39
   25e48:	be205c61 	.word	0xbe205c61
   25e4c:	72bea4d0 	.word	0x72bea4d0
   25e50:	3e663769 	.word	0x3e663769
   25e54:	c5d26bf1 	.word	0xc5d26bf1
   25e58:	3ebbbd41 	.word	0x3ebbbd41
   25e5c:	af25de2c 	.word	0xaf25de2c
   25e60:	3f11566a 	.word	0x3f11566a
   25e64:	16bebd93 	.word	0x16bebd93
   25e68:	3f66c16c 	.word	0x3f66c16c
   25e6c:	5555553e 	.word	0x5555553e
   25e70:	3fc55555 	.word	0x3fc55555
   25e74:	3ff00000 	.word	0x3ff00000
   25e78:	4090cbff 	.word	0x4090cbff
   25e7c:	3f6f3400 	.word	0x3f6f3400
   25e80:	c2f8f359 	.word	0xc2f8f359
   25e84:	01a56e1f 	.word	0x01a56e1f
   25e88:	bff00000 	.word	0xbff00000
   25e8c:	3feffffe 	.word	0x3feffffe
   25e90:	3ff71547 	.word	0x3ff71547
   25e94:	f85ddf44 	.word	0xf85ddf44
   25e98:	3e54ae0b 	.word	0x3e54ae0b
   25e9c:	3fd00000 	.word	0x3fd00000
   25ea0:	55555555 	.word	0x55555555
   25ea4:	3fd55555 	.word	0x3fd55555
   25ea8:	3fe00000 	.word	0x3fe00000
   25eac:	652b82fe 	.word	0x652b82fe
   25eb0:	8800759c 	.word	0x8800759c
   25eb4:	7e37e43c 	.word	0x7e37e43c
   25eb8:	3fe2b803 	.word	0x3fe2b803
   25ebc:	43cfd006 	.word	0x43cfd006
   25ec0:	3e4cfdeb 	.word	0x3e4cfdeb
   25ec4:	3ff80000 	.word	0x3ff80000
   25ec8:	464a      	mov	r2, r9
   25eca:	f000 f999 	bl	26200 <scalbn>
   25ece:	e6b2      	b.n	25c36 <__ieee754_pow+0x7d2>

00025ed0 <__ieee754_sqrt>:
   25ed0:	4b6c      	ldr	r3, [pc, #432]	; (26084 <__ieee754_sqrt+0x1b4>)
   25ed2:	b5f0      	push	{r4, r5, r6, r7, lr}
   25ed4:	000a      	movs	r2, r1
   25ed6:	4646      	mov	r6, r8
   25ed8:	000d      	movs	r5, r1
   25eda:	46d6      	mov	lr, sl
   25edc:	464f      	mov	r7, r9
   25ede:	0019      	movs	r1, r3
   25ee0:	b5c0      	push	{r6, r7, lr}
   25ee2:	0004      	movs	r4, r0
   25ee4:	0006      	movs	r6, r0
   25ee6:	4029      	ands	r1, r5
   25ee8:	4299      	cmp	r1, r3
   25eea:	d100      	bne.n	25eee <__ieee754_sqrt+0x1e>
   25eec:	e0a7      	b.n	2603e <__ieee754_sqrt+0x16e>
   25eee:	2d00      	cmp	r5, #0
   25ef0:	dc00      	bgt.n	25ef4 <__ieee754_sqrt+0x24>
   25ef2:	e081      	b.n	25ff8 <__ieee754_sqrt+0x128>
   25ef4:	152f      	asrs	r7, r5, #20
   25ef6:	d100      	bne.n	25efa <__ieee754_sqrt+0x2a>
   25ef8:	e08e      	b.n	26018 <__ieee754_sqrt+0x148>
   25efa:	4b63      	ldr	r3, [pc, #396]	; (26088 <__ieee754_sqrt+0x1b8>)
   25efc:	0312      	lsls	r2, r2, #12
   25efe:	469c      	mov	ip, r3
   25f00:	2380      	movs	r3, #128	; 0x80
   25f02:	0b12      	lsrs	r2, r2, #12
   25f04:	035b      	lsls	r3, r3, #13
   25f06:	4467      	add	r7, ip
   25f08:	431a      	orrs	r2, r3
   25f0a:	07fb      	lsls	r3, r7, #31
   25f0c:	d468      	bmi.n	25fe0 <__ieee754_sqrt+0x110>
   25f0e:	107b      	asrs	r3, r7, #1
   25f10:	469c      	mov	ip, r3
   25f12:	0fe3      	lsrs	r3, r4, #31
   25f14:	189b      	adds	r3, r3, r2
   25f16:	189b      	adds	r3, r3, r2
   25f18:	2280      	movs	r2, #128	; 0x80
   25f1a:	2116      	movs	r1, #22
   25f1c:	2600      	movs	r6, #0
   25f1e:	2500      	movs	r5, #0
   25f20:	0064      	lsls	r4, r4, #1
   25f22:	0392      	lsls	r2, r2, #14
   25f24:	18a8      	adds	r0, r5, r2
   25f26:	4298      	cmp	r0, r3
   25f28:	dc02      	bgt.n	25f30 <__ieee754_sqrt+0x60>
   25f2a:	1885      	adds	r5, r0, r2
   25f2c:	1a1b      	subs	r3, r3, r0
   25f2e:	18b6      	adds	r6, r6, r2
   25f30:	0fe0      	lsrs	r0, r4, #31
   25f32:	005b      	lsls	r3, r3, #1
   25f34:	3901      	subs	r1, #1
   25f36:	181b      	adds	r3, r3, r0
   25f38:	0064      	lsls	r4, r4, #1
   25f3a:	0852      	lsrs	r2, r2, #1
   25f3c:	2900      	cmp	r1, #0
   25f3e:	d1f1      	bne.n	25f24 <__ieee754_sqrt+0x54>
   25f40:	2200      	movs	r2, #0
   25f42:	4692      	mov	sl, r2
   25f44:	4690      	mov	r8, r2
   25f46:	2280      	movs	r2, #128	; 0x80
   25f48:	2020      	movs	r0, #32
   25f4a:	0612      	lsls	r2, r2, #24
   25f4c:	e009      	b.n	25f62 <__ieee754_sqrt+0x92>
   25f4e:	42ab      	cmp	r3, r5
   25f50:	d038      	beq.n	25fc4 <__ieee754_sqrt+0xf4>
   25f52:	0fe1      	lsrs	r1, r4, #31
   25f54:	18c9      	adds	r1, r1, r3
   25f56:	3801      	subs	r0, #1
   25f58:	18cb      	adds	r3, r1, r3
   25f5a:	0064      	lsls	r4, r4, #1
   25f5c:	0852      	lsrs	r2, r2, #1
   25f5e:	2800      	cmp	r0, #0
   25f60:	d018      	beq.n	25f94 <__ieee754_sqrt+0xc4>
   25f62:	4641      	mov	r1, r8
   25f64:	1851      	adds	r1, r2, r1
   25f66:	42ab      	cmp	r3, r5
   25f68:	ddf1      	ble.n	25f4e <__ieee754_sqrt+0x7e>
   25f6a:	188f      	adds	r7, r1, r2
   25f6c:	46b8      	mov	r8, r7
   25f6e:	46a9      	mov	r9, r5
   25f70:	2900      	cmp	r1, #0
   25f72:	db30      	blt.n	25fd6 <__ieee754_sqrt+0x106>
   25f74:	1b5b      	subs	r3, r3, r5
   25f76:	428c      	cmp	r4, r1
   25f78:	41ad      	sbcs	r5, r5
   25f7a:	426d      	negs	r5, r5
   25f7c:	1b5b      	subs	r3, r3, r5
   25f7e:	1a64      	subs	r4, r4, r1
   25f80:	0fe1      	lsrs	r1, r4, #31
   25f82:	18c9      	adds	r1, r1, r3
   25f84:	3801      	subs	r0, #1
   25f86:	4492      	add	sl, r2
   25f88:	464d      	mov	r5, r9
   25f8a:	18cb      	adds	r3, r1, r3
   25f8c:	0064      	lsls	r4, r4, #1
   25f8e:	0852      	lsrs	r2, r2, #1
   25f90:	2800      	cmp	r0, #0
   25f92:	d1e6      	bne.n	25f62 <__ieee754_sqrt+0x92>
   25f94:	4323      	orrs	r3, r4
   25f96:	d128      	bne.n	25fea <__ieee754_sqrt+0x11a>
   25f98:	4653      	mov	r3, sl
   25f9a:	085b      	lsrs	r3, r3, #1
   25f9c:	493b      	ldr	r1, [pc, #236]	; (2608c <__ieee754_sqrt+0x1bc>)
   25f9e:	1072      	asrs	r2, r6, #1
   25fa0:	4688      	mov	r8, r1
   25fa2:	4442      	add	r2, r8
   25fa4:	07f1      	lsls	r1, r6, #31
   25fa6:	d502      	bpl.n	25fae <__ieee754_sqrt+0xde>
   25fa8:	2180      	movs	r1, #128	; 0x80
   25faa:	0609      	lsls	r1, r1, #24
   25fac:	430b      	orrs	r3, r1
   25fae:	4661      	mov	r1, ip
   25fb0:	001e      	movs	r6, r3
   25fb2:	050f      	lsls	r7, r1, #20
   25fb4:	18bd      	adds	r5, r7, r2
   25fb6:	0030      	movs	r0, r6
   25fb8:	0029      	movs	r1, r5
   25fba:	bc1c      	pop	{r2, r3, r4}
   25fbc:	4690      	mov	r8, r2
   25fbe:	4699      	mov	r9, r3
   25fc0:	46a2      	mov	sl, r4
   25fc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   25fc4:	42a1      	cmp	r1, r4
   25fc6:	d8c4      	bhi.n	25f52 <__ieee754_sqrt+0x82>
   25fc8:	188f      	adds	r7, r1, r2
   25fca:	46b8      	mov	r8, r7
   25fcc:	2900      	cmp	r1, #0
   25fce:	db42      	blt.n	26056 <__ieee754_sqrt+0x186>
   25fd0:	4699      	mov	r9, r3
   25fd2:	2300      	movs	r3, #0
   25fd4:	e7d3      	b.n	25f7e <__ieee754_sqrt+0xae>
   25fd6:	2f00      	cmp	r7, #0
   25fd8:	db2f      	blt.n	2603a <__ieee754_sqrt+0x16a>
   25fda:	1c6f      	adds	r7, r5, #1
   25fdc:	46b9      	mov	r9, r7
   25fde:	e7c9      	b.n	25f74 <__ieee754_sqrt+0xa4>
   25fe0:	0fe1      	lsrs	r1, r4, #31
   25fe2:	0052      	lsls	r2, r2, #1
   25fe4:	188a      	adds	r2, r1, r2
   25fe6:	0064      	lsls	r4, r4, #1
   25fe8:	e791      	b.n	25f0e <__ieee754_sqrt+0x3e>
   25fea:	4653      	mov	r3, sl
   25fec:	3301      	adds	r3, #1
   25fee:	d035      	beq.n	2605c <__ieee754_sqrt+0x18c>
   25ff0:	4653      	mov	r3, sl
   25ff2:	3301      	adds	r3, #1
   25ff4:	085b      	lsrs	r3, r3, #1
   25ff6:	e7d1      	b.n	25f9c <__ieee754_sqrt+0xcc>
   25ff8:	006b      	lsls	r3, r5, #1
   25ffa:	085b      	lsrs	r3, r3, #1
   25ffc:	4303      	orrs	r3, r0
   25ffe:	d0da      	beq.n	25fb6 <__ieee754_sqrt+0xe6>
   26000:	2700      	movs	r7, #0
   26002:	2d00      	cmp	r5, #0
   26004:	d132      	bne.n	2606c <__ieee754_sqrt+0x19c>
   26006:	0ae2      	lsrs	r2, r4, #11
   26008:	3f15      	subs	r7, #21
   2600a:	0564      	lsls	r4, r4, #21
   2600c:	2a00      	cmp	r2, #0
   2600e:	d0fa      	beq.n	26006 <__ieee754_sqrt+0x136>
   26010:	2380      	movs	r3, #128	; 0x80
   26012:	035b      	lsls	r3, r3, #13
   26014:	421a      	tst	r2, r3
   26016:	d124      	bne.n	26062 <__ieee754_sqrt+0x192>
   26018:	2080      	movs	r0, #128	; 0x80
   2601a:	2300      	movs	r3, #0
   2601c:	0340      	lsls	r0, r0, #13
   2601e:	e000      	b.n	26022 <__ieee754_sqrt+0x152>
   26020:	000b      	movs	r3, r1
   26022:	0052      	lsls	r2, r2, #1
   26024:	1c59      	adds	r1, r3, #1
   26026:	4202      	tst	r2, r0
   26028:	d0fa      	beq.n	26020 <__ieee754_sqrt+0x150>
   2602a:	2020      	movs	r0, #32
   2602c:	1a40      	subs	r0, r0, r1
   2602e:	1aff      	subs	r7, r7, r3
   26030:	0023      	movs	r3, r4
   26032:	40c3      	lsrs	r3, r0
   26034:	408c      	lsls	r4, r1
   26036:	431a      	orrs	r2, r3
   26038:	e75f      	b.n	25efa <__ieee754_sqrt+0x2a>
   2603a:	46a9      	mov	r9, r5
   2603c:	e79a      	b.n	25f74 <__ieee754_sqrt+0xa4>
   2603e:	002b      	movs	r3, r5
   26040:	0002      	movs	r2, r0
   26042:	0029      	movs	r1, r5
   26044:	f001 fe1a 	bl	27c7c <__aeabi_dmul>
   26048:	0032      	movs	r2, r6
   2604a:	002b      	movs	r3, r5
   2604c:	f000 fed2 	bl	26df4 <__aeabi_dadd>
   26050:	0006      	movs	r6, r0
   26052:	000d      	movs	r5, r1
   26054:	e7af      	b.n	25fb6 <__ieee754_sqrt+0xe6>
   26056:	2f00      	cmp	r7, #0
   26058:	dabf      	bge.n	25fda <__ieee754_sqrt+0x10a>
   2605a:	e7b9      	b.n	25fd0 <__ieee754_sqrt+0x100>
   2605c:	3601      	adds	r6, #1
   2605e:	2300      	movs	r3, #0
   26060:	e79c      	b.n	25f9c <__ieee754_sqrt+0xcc>
   26062:	2301      	movs	r3, #1
   26064:	2100      	movs	r1, #0
   26066:	2020      	movs	r0, #32
   26068:	425b      	negs	r3, r3
   2606a:	e7e0      	b.n	2602e <__ieee754_sqrt+0x15e>
   2606c:	002b      	movs	r3, r5
   2606e:	0002      	movs	r2, r0
   26070:	0029      	movs	r1, r5
   26072:	f002 f883 	bl	2817c <__aeabi_dsub>
   26076:	0002      	movs	r2, r0
   26078:	000b      	movs	r3, r1
   2607a:	f001 f9cb 	bl	27414 <__aeabi_ddiv>
   2607e:	0006      	movs	r6, r0
   26080:	000d      	movs	r5, r1
   26082:	e798      	b.n	25fb6 <__ieee754_sqrt+0xe6>
   26084:	7ff00000 	.word	0x7ff00000
   26088:	fffffc01 	.word	0xfffffc01
   2608c:	3fe00000 	.word	0x3fe00000

00026090 <fabs>:
   26090:	0049      	lsls	r1, r1, #1
   26092:	084b      	lsrs	r3, r1, #1
   26094:	0019      	movs	r1, r3
   26096:	4770      	bx	lr

00026098 <finite>:
   26098:	4b03      	ldr	r3, [pc, #12]	; (260a8 <finite+0x10>)
   2609a:	0048      	lsls	r0, r1, #1
   2609c:	469c      	mov	ip, r3
   2609e:	0840      	lsrs	r0, r0, #1
   260a0:	4460      	add	r0, ip
   260a2:	0fc0      	lsrs	r0, r0, #31
   260a4:	4770      	bx	lr
   260a6:	46c0      	nop			; (mov r8, r8)
   260a8:	80100000 	.word	0x80100000

000260ac <matherr>:
   260ac:	2000      	movs	r0, #0
   260ae:	4770      	bx	lr

000260b0 <nan>:
   260b0:	2000      	movs	r0, #0
   260b2:	4901      	ldr	r1, [pc, #4]	; (260b8 <nan+0x8>)
   260b4:	4770      	bx	lr
   260b6:	46c0      	nop			; (mov r8, r8)
   260b8:	7ff80000 	.word	0x7ff80000

000260bc <rint>:
   260bc:	b5f0      	push	{r4, r5, r6, r7, lr}
   260be:	46c6      	mov	lr, r8
   260c0:	b500      	push	{lr}
   260c2:	0fcb      	lsrs	r3, r1, #31
   260c4:	4698      	mov	r8, r3
   260c6:	4c4a      	ldr	r4, [pc, #296]	; (261f0 <rint+0x134>)
   260c8:	004b      	lsls	r3, r1, #1
   260ca:	0d5b      	lsrs	r3, r3, #21
   260cc:	191e      	adds	r6, r3, r4
   260ce:	b082      	sub	sp, #8
   260d0:	0007      	movs	r7, r0
   260d2:	000a      	movs	r2, r1
   260d4:	2e13      	cmp	r6, #19
   260d6:	dc35      	bgt.n	26144 <rint+0x88>
   260d8:	2e00      	cmp	r6, #0
   260da:	db57      	blt.n	2618c <rint+0xd0>
   260dc:	4b45      	ldr	r3, [pc, #276]	; (261f4 <rint+0x138>)
   260de:	0004      	movs	r4, r0
   260e0:	4133      	asrs	r3, r6
   260e2:	001f      	movs	r7, r3
   260e4:	400f      	ands	r7, r1
   260e6:	4307      	orrs	r7, r0
   260e8:	000d      	movs	r5, r1
   260ea:	2f00      	cmp	r7, #0
   260ec:	d024      	beq.n	26138 <rint+0x7c>
   260ee:	085b      	lsrs	r3, r3, #1
   260f0:	001c      	movs	r4, r3
   260f2:	400c      	ands	r4, r1
   260f4:	4320      	orrs	r0, r4
   260f6:	2700      	movs	r7, #0
   260f8:	2800      	cmp	r0, #0
   260fa:	d007      	beq.n	2610c <rint+0x50>
   260fc:	2e13      	cmp	r6, #19
   260fe:	d100      	bne.n	26102 <rint+0x46>
   26100:	e073      	b.n	261ea <rint+0x12e>
   26102:	2280      	movs	r2, #128	; 0x80
   26104:	02d2      	lsls	r2, r2, #11
   26106:	4132      	asrs	r2, r6
   26108:	4399      	bics	r1, r3
   2610a:	430a      	orrs	r2, r1
   2610c:	4643      	mov	r3, r8
   2610e:	00de      	lsls	r6, r3, #3
   26110:	4b39      	ldr	r3, [pc, #228]	; (261f8 <rint+0x13c>)
   26112:	0011      	movs	r1, r2
   26114:	199e      	adds	r6, r3, r6
   26116:	6834      	ldr	r4, [r6, #0]
   26118:	6875      	ldr	r5, [r6, #4]
   2611a:	0038      	movs	r0, r7
   2611c:	0022      	movs	r2, r4
   2611e:	002b      	movs	r3, r5
   26120:	f000 fe68 	bl	26df4 <__aeabi_dadd>
   26124:	9000      	str	r0, [sp, #0]
   26126:	9101      	str	r1, [sp, #4]
   26128:	9800      	ldr	r0, [sp, #0]
   2612a:	9901      	ldr	r1, [sp, #4]
   2612c:	0022      	movs	r2, r4
   2612e:	002b      	movs	r3, r5
   26130:	f002 f824 	bl	2817c <__aeabi_dsub>
   26134:	0004      	movs	r4, r0
   26136:	000d      	movs	r5, r1
   26138:	0020      	movs	r0, r4
   2613a:	0029      	movs	r1, r5
   2613c:	b002      	add	sp, #8
   2613e:	bc04      	pop	{r2}
   26140:	4690      	mov	r8, r2
   26142:	bdf0      	pop	{r4, r5, r6, r7, pc}
   26144:	2e33      	cmp	r6, #51	; 0x33
   26146:	dd0c      	ble.n	26162 <rint+0xa6>
   26148:	2380      	movs	r3, #128	; 0x80
   2614a:	0004      	movs	r4, r0
   2614c:	00db      	lsls	r3, r3, #3
   2614e:	000d      	movs	r5, r1
   26150:	429e      	cmp	r6, r3
   26152:	d1f1      	bne.n	26138 <rint+0x7c>
   26154:	0002      	movs	r2, r0
   26156:	000b      	movs	r3, r1
   26158:	f000 fe4c 	bl	26df4 <__aeabi_dadd>
   2615c:	0004      	movs	r4, r0
   2615e:	000d      	movs	r5, r1
   26160:	e7ea      	b.n	26138 <rint+0x7c>
   26162:	4c26      	ldr	r4, [pc, #152]	; (261fc <rint+0x140>)
   26164:	000d      	movs	r5, r1
   26166:	46a4      	mov	ip, r4
   26168:	2401      	movs	r4, #1
   2616a:	4463      	add	r3, ip
   2616c:	4264      	negs	r4, r4
   2616e:	40dc      	lsrs	r4, r3
   26170:	46a4      	mov	ip, r4
   26172:	4661      	mov	r1, ip
   26174:	0004      	movs	r4, r0
   26176:	4201      	tst	r1, r0
   26178:	d0de      	beq.n	26138 <rint+0x7c>
   2617a:	0849      	lsrs	r1, r1, #1
   2617c:	4201      	tst	r1, r0
   2617e:	d0c5      	beq.n	2610c <rint+0x50>
   26180:	2780      	movs	r7, #128	; 0x80
   26182:	05ff      	lsls	r7, r7, #23
   26184:	411f      	asrs	r7, r3
   26186:	4388      	bics	r0, r1
   26188:	4307      	orrs	r7, r0
   2618a:	e7bf      	b.n	2610c <rint+0x50>
   2618c:	004b      	lsls	r3, r1, #1
   2618e:	085b      	lsrs	r3, r3, #1
   26190:	4303      	orrs	r3, r0
   26192:	0004      	movs	r4, r0
   26194:	000d      	movs	r5, r1
   26196:	2b00      	cmp	r3, #0
   26198:	d0ce      	beq.n	26138 <rint+0x7c>
   2619a:	030b      	lsls	r3, r1, #12
   2619c:	0b1b      	lsrs	r3, r3, #12
   2619e:	4303      	orrs	r3, r0
   261a0:	001a      	movs	r2, r3
   261a2:	425b      	negs	r3, r3
   261a4:	4313      	orrs	r3, r2
   261a6:	2280      	movs	r2, #128	; 0x80
   261a8:	0b1b      	lsrs	r3, r3, #12
   261aa:	0312      	lsls	r2, r2, #12
   261ac:	4013      	ands	r3, r2
   261ae:	0c4a      	lsrs	r2, r1, #17
   261b0:	0452      	lsls	r2, r2, #17
   261b2:	4313      	orrs	r3, r2
   261b4:	0019      	movs	r1, r3
   261b6:	4643      	mov	r3, r8
   261b8:	00da      	lsls	r2, r3, #3
   261ba:	4b0f      	ldr	r3, [pc, #60]	; (261f8 <rint+0x13c>)
   261bc:	189b      	adds	r3, r3, r2
   261be:	681c      	ldr	r4, [r3, #0]
   261c0:	685d      	ldr	r5, [r3, #4]
   261c2:	0022      	movs	r2, r4
   261c4:	002b      	movs	r3, r5
   261c6:	f000 fe15 	bl	26df4 <__aeabi_dadd>
   261ca:	9000      	str	r0, [sp, #0]
   261cc:	9101      	str	r1, [sp, #4]
   261ce:	9800      	ldr	r0, [sp, #0]
   261d0:	9901      	ldr	r1, [sp, #4]
   261d2:	0022      	movs	r2, r4
   261d4:	002b      	movs	r3, r5
   261d6:	f001 ffd1 	bl	2817c <__aeabi_dsub>
   261da:	4642      	mov	r2, r8
   261dc:	004b      	lsls	r3, r1, #1
   261de:	085b      	lsrs	r3, r3, #1
   261e0:	07d6      	lsls	r6, r2, #31
   261e2:	4333      	orrs	r3, r6
   261e4:	0004      	movs	r4, r0
   261e6:	001d      	movs	r5, r3
   261e8:	e7a6      	b.n	26138 <rint+0x7c>
   261ea:	2780      	movs	r7, #128	; 0x80
   261ec:	063f      	lsls	r7, r7, #24
   261ee:	e788      	b.n	26102 <rint+0x46>
   261f0:	fffffc01 	.word	0xfffffc01
   261f4:	000fffff 	.word	0x000fffff
   261f8:	0002aae8 	.word	0x0002aae8
   261fc:	fffffbed 	.word	0xfffffbed

00026200 <scalbn>:
   26200:	004b      	lsls	r3, r1, #1
   26202:	b570      	push	{r4, r5, r6, lr}
   26204:	0d5b      	lsrs	r3, r3, #21
   26206:	0014      	movs	r4, r2
   26208:	000a      	movs	r2, r1
   2620a:	2b00      	cmp	r3, #0
   2620c:	d11a      	bne.n	26244 <scalbn+0x44>
   2620e:	004b      	lsls	r3, r1, #1
   26210:	085b      	lsrs	r3, r3, #1
   26212:	4303      	orrs	r3, r0
   26214:	d015      	beq.n	26242 <scalbn+0x42>
   26216:	2200      	movs	r2, #0
   26218:	4b22      	ldr	r3, [pc, #136]	; (262a4 <scalbn+0xa4>)
   2621a:	f001 fd2f 	bl	27c7c <__aeabi_dmul>
   2621e:	4b22      	ldr	r3, [pc, #136]	; (262a8 <scalbn+0xa8>)
   26220:	000a      	movs	r2, r1
   26222:	429c      	cmp	r4, r3
   26224:	db22      	blt.n	2626c <scalbn+0x6c>
   26226:	004b      	lsls	r3, r1, #1
   26228:	0d5b      	lsrs	r3, r3, #21
   2622a:	3b36      	subs	r3, #54	; 0x36
   2622c:	4d1f      	ldr	r5, [pc, #124]	; (262ac <scalbn+0xac>)
   2622e:	18e3      	adds	r3, r4, r3
   26230:	42ab      	cmp	r3, r5
   26232:	dc20      	bgt.n	26276 <scalbn+0x76>
   26234:	2b00      	cmp	r3, #0
   26236:	dd0d      	ble.n	26254 <scalbn+0x54>
   26238:	4c1d      	ldr	r4, [pc, #116]	; (262b0 <scalbn+0xb0>)
   2623a:	051b      	lsls	r3, r3, #20
   2623c:	4022      	ands	r2, r4
   2623e:	431a      	orrs	r2, r3
   26240:	0011      	movs	r1, r2
   26242:	bd70      	pop	{r4, r5, r6, pc}
   26244:	4d1b      	ldr	r5, [pc, #108]	; (262b4 <scalbn+0xb4>)
   26246:	42ab      	cmp	r3, r5
   26248:	d1f0      	bne.n	2622c <scalbn+0x2c>
   2624a:	0002      	movs	r2, r0
   2624c:	000b      	movs	r3, r1
   2624e:	f000 fdd1 	bl	26df4 <__aeabi_dadd>
   26252:	e7f6      	b.n	26242 <scalbn+0x42>
   26254:	001d      	movs	r5, r3
   26256:	3535      	adds	r5, #53	; 0x35
   26258:	da18      	bge.n	2628c <scalbn+0x8c>
   2625a:	4b17      	ldr	r3, [pc, #92]	; (262b8 <scalbn+0xb8>)
   2625c:	0002      	movs	r2, r0
   2625e:	429c      	cmp	r4, r3
   26260:	dc0a      	bgt.n	26278 <scalbn+0x78>
   26262:	000b      	movs	r3, r1
   26264:	4815      	ldr	r0, [pc, #84]	; (262bc <scalbn+0xbc>)
   26266:	4916      	ldr	r1, [pc, #88]	; (262c0 <scalbn+0xc0>)
   26268:	f000 f832 	bl	262d0 <copysign>
   2626c:	4a13      	ldr	r2, [pc, #76]	; (262bc <scalbn+0xbc>)
   2626e:	4b14      	ldr	r3, [pc, #80]	; (262c0 <scalbn+0xc0>)
   26270:	f001 fd04 	bl	27c7c <__aeabi_dmul>
   26274:	e7e5      	b.n	26242 <scalbn+0x42>
   26276:	0002      	movs	r2, r0
   26278:	000b      	movs	r3, r1
   2627a:	4812      	ldr	r0, [pc, #72]	; (262c4 <scalbn+0xc4>)
   2627c:	4912      	ldr	r1, [pc, #72]	; (262c8 <scalbn+0xc8>)
   2627e:	f000 f827 	bl	262d0 <copysign>
   26282:	4a10      	ldr	r2, [pc, #64]	; (262c4 <scalbn+0xc4>)
   26284:	4b10      	ldr	r3, [pc, #64]	; (262c8 <scalbn+0xc8>)
   26286:	f001 fcf9 	bl	27c7c <__aeabi_dmul>
   2628a:	e7da      	b.n	26242 <scalbn+0x42>
   2628c:	4c08      	ldr	r4, [pc, #32]	; (262b0 <scalbn+0xb0>)
   2628e:	3336      	adds	r3, #54	; 0x36
   26290:	4022      	ands	r2, r4
   26292:	051b      	lsls	r3, r3, #20
   26294:	4313      	orrs	r3, r2
   26296:	0019      	movs	r1, r3
   26298:	2200      	movs	r2, #0
   2629a:	4b0c      	ldr	r3, [pc, #48]	; (262cc <scalbn+0xcc>)
   2629c:	f001 fcee 	bl	27c7c <__aeabi_dmul>
   262a0:	e7cf      	b.n	26242 <scalbn+0x42>
   262a2:	46c0      	nop			; (mov r8, r8)
   262a4:	43500000 	.word	0x43500000
   262a8:	ffff3cb0 	.word	0xffff3cb0
   262ac:	000007fe 	.word	0x000007fe
   262b0:	800fffff 	.word	0x800fffff
   262b4:	000007ff 	.word	0x000007ff
   262b8:	0000c350 	.word	0x0000c350
   262bc:	c2f8f359 	.word	0xc2f8f359
   262c0:	01a56e1f 	.word	0x01a56e1f
   262c4:	8800759c 	.word	0x8800759c
   262c8:	7e37e43c 	.word	0x7e37e43c
   262cc:	3c900000 	.word	0x3c900000

000262d0 <copysign>:
   262d0:	b530      	push	{r4, r5, lr}
   262d2:	004a      	lsls	r2, r1, #1
   262d4:	0fdb      	lsrs	r3, r3, #31
   262d6:	07db      	lsls	r3, r3, #31
   262d8:	0852      	lsrs	r2, r2, #1
   262da:	431a      	orrs	r2, r3
   262dc:	0011      	movs	r1, r2
   262de:	bd30      	pop	{r4, r5, pc}

000262e0 <__udivsi3>:
   262e0:	2200      	movs	r2, #0
   262e2:	0843      	lsrs	r3, r0, #1
   262e4:	428b      	cmp	r3, r1
   262e6:	d374      	bcc.n	263d2 <__udivsi3+0xf2>
   262e8:	0903      	lsrs	r3, r0, #4
   262ea:	428b      	cmp	r3, r1
   262ec:	d35f      	bcc.n	263ae <__udivsi3+0xce>
   262ee:	0a03      	lsrs	r3, r0, #8
   262f0:	428b      	cmp	r3, r1
   262f2:	d344      	bcc.n	2637e <__udivsi3+0x9e>
   262f4:	0b03      	lsrs	r3, r0, #12
   262f6:	428b      	cmp	r3, r1
   262f8:	d328      	bcc.n	2634c <__udivsi3+0x6c>
   262fa:	0c03      	lsrs	r3, r0, #16
   262fc:	428b      	cmp	r3, r1
   262fe:	d30d      	bcc.n	2631c <__udivsi3+0x3c>
   26300:	22ff      	movs	r2, #255	; 0xff
   26302:	0209      	lsls	r1, r1, #8
   26304:	ba12      	rev	r2, r2
   26306:	0c03      	lsrs	r3, r0, #16
   26308:	428b      	cmp	r3, r1
   2630a:	d302      	bcc.n	26312 <__udivsi3+0x32>
   2630c:	1212      	asrs	r2, r2, #8
   2630e:	0209      	lsls	r1, r1, #8
   26310:	d065      	beq.n	263de <__udivsi3+0xfe>
   26312:	0b03      	lsrs	r3, r0, #12
   26314:	428b      	cmp	r3, r1
   26316:	d319      	bcc.n	2634c <__udivsi3+0x6c>
   26318:	e000      	b.n	2631c <__udivsi3+0x3c>
   2631a:	0a09      	lsrs	r1, r1, #8
   2631c:	0bc3      	lsrs	r3, r0, #15
   2631e:	428b      	cmp	r3, r1
   26320:	d301      	bcc.n	26326 <__udivsi3+0x46>
   26322:	03cb      	lsls	r3, r1, #15
   26324:	1ac0      	subs	r0, r0, r3
   26326:	4152      	adcs	r2, r2
   26328:	0b83      	lsrs	r3, r0, #14
   2632a:	428b      	cmp	r3, r1
   2632c:	d301      	bcc.n	26332 <__udivsi3+0x52>
   2632e:	038b      	lsls	r3, r1, #14
   26330:	1ac0      	subs	r0, r0, r3
   26332:	4152      	adcs	r2, r2
   26334:	0b43      	lsrs	r3, r0, #13
   26336:	428b      	cmp	r3, r1
   26338:	d301      	bcc.n	2633e <__udivsi3+0x5e>
   2633a:	034b      	lsls	r3, r1, #13
   2633c:	1ac0      	subs	r0, r0, r3
   2633e:	4152      	adcs	r2, r2
   26340:	0b03      	lsrs	r3, r0, #12
   26342:	428b      	cmp	r3, r1
   26344:	d301      	bcc.n	2634a <__udivsi3+0x6a>
   26346:	030b      	lsls	r3, r1, #12
   26348:	1ac0      	subs	r0, r0, r3
   2634a:	4152      	adcs	r2, r2
   2634c:	0ac3      	lsrs	r3, r0, #11
   2634e:	428b      	cmp	r3, r1
   26350:	d301      	bcc.n	26356 <__udivsi3+0x76>
   26352:	02cb      	lsls	r3, r1, #11
   26354:	1ac0      	subs	r0, r0, r3
   26356:	4152      	adcs	r2, r2
   26358:	0a83      	lsrs	r3, r0, #10
   2635a:	428b      	cmp	r3, r1
   2635c:	d301      	bcc.n	26362 <__udivsi3+0x82>
   2635e:	028b      	lsls	r3, r1, #10
   26360:	1ac0      	subs	r0, r0, r3
   26362:	4152      	adcs	r2, r2
   26364:	0a43      	lsrs	r3, r0, #9
   26366:	428b      	cmp	r3, r1
   26368:	d301      	bcc.n	2636e <__udivsi3+0x8e>
   2636a:	024b      	lsls	r3, r1, #9
   2636c:	1ac0      	subs	r0, r0, r3
   2636e:	4152      	adcs	r2, r2
   26370:	0a03      	lsrs	r3, r0, #8
   26372:	428b      	cmp	r3, r1
   26374:	d301      	bcc.n	2637a <__udivsi3+0x9a>
   26376:	020b      	lsls	r3, r1, #8
   26378:	1ac0      	subs	r0, r0, r3
   2637a:	4152      	adcs	r2, r2
   2637c:	d2cd      	bcs.n	2631a <__udivsi3+0x3a>
   2637e:	09c3      	lsrs	r3, r0, #7
   26380:	428b      	cmp	r3, r1
   26382:	d301      	bcc.n	26388 <__udivsi3+0xa8>
   26384:	01cb      	lsls	r3, r1, #7
   26386:	1ac0      	subs	r0, r0, r3
   26388:	4152      	adcs	r2, r2
   2638a:	0983      	lsrs	r3, r0, #6
   2638c:	428b      	cmp	r3, r1
   2638e:	d301      	bcc.n	26394 <__udivsi3+0xb4>
   26390:	018b      	lsls	r3, r1, #6
   26392:	1ac0      	subs	r0, r0, r3
   26394:	4152      	adcs	r2, r2
   26396:	0943      	lsrs	r3, r0, #5
   26398:	428b      	cmp	r3, r1
   2639a:	d301      	bcc.n	263a0 <__udivsi3+0xc0>
   2639c:	014b      	lsls	r3, r1, #5
   2639e:	1ac0      	subs	r0, r0, r3
   263a0:	4152      	adcs	r2, r2
   263a2:	0903      	lsrs	r3, r0, #4
   263a4:	428b      	cmp	r3, r1
   263a6:	d301      	bcc.n	263ac <__udivsi3+0xcc>
   263a8:	010b      	lsls	r3, r1, #4
   263aa:	1ac0      	subs	r0, r0, r3
   263ac:	4152      	adcs	r2, r2
   263ae:	08c3      	lsrs	r3, r0, #3
   263b0:	428b      	cmp	r3, r1
   263b2:	d301      	bcc.n	263b8 <__udivsi3+0xd8>
   263b4:	00cb      	lsls	r3, r1, #3
   263b6:	1ac0      	subs	r0, r0, r3
   263b8:	4152      	adcs	r2, r2
   263ba:	0883      	lsrs	r3, r0, #2
   263bc:	428b      	cmp	r3, r1
   263be:	d301      	bcc.n	263c4 <__udivsi3+0xe4>
   263c0:	008b      	lsls	r3, r1, #2
   263c2:	1ac0      	subs	r0, r0, r3
   263c4:	4152      	adcs	r2, r2
   263c6:	0843      	lsrs	r3, r0, #1
   263c8:	428b      	cmp	r3, r1
   263ca:	d301      	bcc.n	263d0 <__udivsi3+0xf0>
   263cc:	004b      	lsls	r3, r1, #1
   263ce:	1ac0      	subs	r0, r0, r3
   263d0:	4152      	adcs	r2, r2
   263d2:	1a41      	subs	r1, r0, r1
   263d4:	d200      	bcs.n	263d8 <__udivsi3+0xf8>
   263d6:	4601      	mov	r1, r0
   263d8:	4152      	adcs	r2, r2
   263da:	4610      	mov	r0, r2
   263dc:	4770      	bx	lr
   263de:	e7ff      	b.n	263e0 <__udivsi3+0x100>
   263e0:	b501      	push	{r0, lr}
   263e2:	2000      	movs	r0, #0
   263e4:	f000 f8f0 	bl	265c8 <__aeabi_idiv0>
   263e8:	bd02      	pop	{r1, pc}
   263ea:	46c0      	nop			; (mov r8, r8)

000263ec <__aeabi_uidivmod>:
   263ec:	2900      	cmp	r1, #0
   263ee:	d0f7      	beq.n	263e0 <__udivsi3+0x100>
   263f0:	e776      	b.n	262e0 <__udivsi3>
   263f2:	4770      	bx	lr

000263f4 <__divsi3>:
   263f4:	4603      	mov	r3, r0
   263f6:	430b      	orrs	r3, r1
   263f8:	d47f      	bmi.n	264fa <__divsi3+0x106>
   263fa:	2200      	movs	r2, #0
   263fc:	0843      	lsrs	r3, r0, #1
   263fe:	428b      	cmp	r3, r1
   26400:	d374      	bcc.n	264ec <__divsi3+0xf8>
   26402:	0903      	lsrs	r3, r0, #4
   26404:	428b      	cmp	r3, r1
   26406:	d35f      	bcc.n	264c8 <__divsi3+0xd4>
   26408:	0a03      	lsrs	r3, r0, #8
   2640a:	428b      	cmp	r3, r1
   2640c:	d344      	bcc.n	26498 <__divsi3+0xa4>
   2640e:	0b03      	lsrs	r3, r0, #12
   26410:	428b      	cmp	r3, r1
   26412:	d328      	bcc.n	26466 <__divsi3+0x72>
   26414:	0c03      	lsrs	r3, r0, #16
   26416:	428b      	cmp	r3, r1
   26418:	d30d      	bcc.n	26436 <__divsi3+0x42>
   2641a:	22ff      	movs	r2, #255	; 0xff
   2641c:	0209      	lsls	r1, r1, #8
   2641e:	ba12      	rev	r2, r2
   26420:	0c03      	lsrs	r3, r0, #16
   26422:	428b      	cmp	r3, r1
   26424:	d302      	bcc.n	2642c <__divsi3+0x38>
   26426:	1212      	asrs	r2, r2, #8
   26428:	0209      	lsls	r1, r1, #8
   2642a:	d065      	beq.n	264f8 <__divsi3+0x104>
   2642c:	0b03      	lsrs	r3, r0, #12
   2642e:	428b      	cmp	r3, r1
   26430:	d319      	bcc.n	26466 <__divsi3+0x72>
   26432:	e000      	b.n	26436 <__divsi3+0x42>
   26434:	0a09      	lsrs	r1, r1, #8
   26436:	0bc3      	lsrs	r3, r0, #15
   26438:	428b      	cmp	r3, r1
   2643a:	d301      	bcc.n	26440 <__divsi3+0x4c>
   2643c:	03cb      	lsls	r3, r1, #15
   2643e:	1ac0      	subs	r0, r0, r3
   26440:	4152      	adcs	r2, r2
   26442:	0b83      	lsrs	r3, r0, #14
   26444:	428b      	cmp	r3, r1
   26446:	d301      	bcc.n	2644c <__divsi3+0x58>
   26448:	038b      	lsls	r3, r1, #14
   2644a:	1ac0      	subs	r0, r0, r3
   2644c:	4152      	adcs	r2, r2
   2644e:	0b43      	lsrs	r3, r0, #13
   26450:	428b      	cmp	r3, r1
   26452:	d301      	bcc.n	26458 <__divsi3+0x64>
   26454:	034b      	lsls	r3, r1, #13
   26456:	1ac0      	subs	r0, r0, r3
   26458:	4152      	adcs	r2, r2
   2645a:	0b03      	lsrs	r3, r0, #12
   2645c:	428b      	cmp	r3, r1
   2645e:	d301      	bcc.n	26464 <__divsi3+0x70>
   26460:	030b      	lsls	r3, r1, #12
   26462:	1ac0      	subs	r0, r0, r3
   26464:	4152      	adcs	r2, r2
   26466:	0ac3      	lsrs	r3, r0, #11
   26468:	428b      	cmp	r3, r1
   2646a:	d301      	bcc.n	26470 <__divsi3+0x7c>
   2646c:	02cb      	lsls	r3, r1, #11
   2646e:	1ac0      	subs	r0, r0, r3
   26470:	4152      	adcs	r2, r2
   26472:	0a83      	lsrs	r3, r0, #10
   26474:	428b      	cmp	r3, r1
   26476:	d301      	bcc.n	2647c <__divsi3+0x88>
   26478:	028b      	lsls	r3, r1, #10
   2647a:	1ac0      	subs	r0, r0, r3
   2647c:	4152      	adcs	r2, r2
   2647e:	0a43      	lsrs	r3, r0, #9
   26480:	428b      	cmp	r3, r1
   26482:	d301      	bcc.n	26488 <__divsi3+0x94>
   26484:	024b      	lsls	r3, r1, #9
   26486:	1ac0      	subs	r0, r0, r3
   26488:	4152      	adcs	r2, r2
   2648a:	0a03      	lsrs	r3, r0, #8
   2648c:	428b      	cmp	r3, r1
   2648e:	d301      	bcc.n	26494 <__divsi3+0xa0>
   26490:	020b      	lsls	r3, r1, #8
   26492:	1ac0      	subs	r0, r0, r3
   26494:	4152      	adcs	r2, r2
   26496:	d2cd      	bcs.n	26434 <__divsi3+0x40>
   26498:	09c3      	lsrs	r3, r0, #7
   2649a:	428b      	cmp	r3, r1
   2649c:	d301      	bcc.n	264a2 <__divsi3+0xae>
   2649e:	01cb      	lsls	r3, r1, #7
   264a0:	1ac0      	subs	r0, r0, r3
   264a2:	4152      	adcs	r2, r2
   264a4:	0983      	lsrs	r3, r0, #6
   264a6:	428b      	cmp	r3, r1
   264a8:	d301      	bcc.n	264ae <__divsi3+0xba>
   264aa:	018b      	lsls	r3, r1, #6
   264ac:	1ac0      	subs	r0, r0, r3
   264ae:	4152      	adcs	r2, r2
   264b0:	0943      	lsrs	r3, r0, #5
   264b2:	428b      	cmp	r3, r1
   264b4:	d301      	bcc.n	264ba <__divsi3+0xc6>
   264b6:	014b      	lsls	r3, r1, #5
   264b8:	1ac0      	subs	r0, r0, r3
   264ba:	4152      	adcs	r2, r2
   264bc:	0903      	lsrs	r3, r0, #4
   264be:	428b      	cmp	r3, r1
   264c0:	d301      	bcc.n	264c6 <__divsi3+0xd2>
   264c2:	010b      	lsls	r3, r1, #4
   264c4:	1ac0      	subs	r0, r0, r3
   264c6:	4152      	adcs	r2, r2
   264c8:	08c3      	lsrs	r3, r0, #3
   264ca:	428b      	cmp	r3, r1
   264cc:	d301      	bcc.n	264d2 <__divsi3+0xde>
   264ce:	00cb      	lsls	r3, r1, #3
   264d0:	1ac0      	subs	r0, r0, r3
   264d2:	4152      	adcs	r2, r2
   264d4:	0883      	lsrs	r3, r0, #2
   264d6:	428b      	cmp	r3, r1
   264d8:	d301      	bcc.n	264de <__divsi3+0xea>
   264da:	008b      	lsls	r3, r1, #2
   264dc:	1ac0      	subs	r0, r0, r3
   264de:	4152      	adcs	r2, r2
   264e0:	0843      	lsrs	r3, r0, #1
   264e2:	428b      	cmp	r3, r1
   264e4:	d301      	bcc.n	264ea <__divsi3+0xf6>
   264e6:	004b      	lsls	r3, r1, #1
   264e8:	1ac0      	subs	r0, r0, r3
   264ea:	4152      	adcs	r2, r2
   264ec:	1a41      	subs	r1, r0, r1
   264ee:	d200      	bcs.n	264f2 <__divsi3+0xfe>
   264f0:	4601      	mov	r1, r0
   264f2:	4152      	adcs	r2, r2
   264f4:	4610      	mov	r0, r2
   264f6:	4770      	bx	lr
   264f8:	e05d      	b.n	265b6 <__divsi3+0x1c2>
   264fa:	0fca      	lsrs	r2, r1, #31
   264fc:	d000      	beq.n	26500 <__divsi3+0x10c>
   264fe:	4249      	negs	r1, r1
   26500:	1003      	asrs	r3, r0, #32
   26502:	d300      	bcc.n	26506 <__divsi3+0x112>
   26504:	4240      	negs	r0, r0
   26506:	4053      	eors	r3, r2
   26508:	2200      	movs	r2, #0
   2650a:	469c      	mov	ip, r3
   2650c:	0903      	lsrs	r3, r0, #4
   2650e:	428b      	cmp	r3, r1
   26510:	d32d      	bcc.n	2656e <__divsi3+0x17a>
   26512:	0a03      	lsrs	r3, r0, #8
   26514:	428b      	cmp	r3, r1
   26516:	d312      	bcc.n	2653e <__divsi3+0x14a>
   26518:	22fc      	movs	r2, #252	; 0xfc
   2651a:	0189      	lsls	r1, r1, #6
   2651c:	ba12      	rev	r2, r2
   2651e:	0a03      	lsrs	r3, r0, #8
   26520:	428b      	cmp	r3, r1
   26522:	d30c      	bcc.n	2653e <__divsi3+0x14a>
   26524:	0189      	lsls	r1, r1, #6
   26526:	1192      	asrs	r2, r2, #6
   26528:	428b      	cmp	r3, r1
   2652a:	d308      	bcc.n	2653e <__divsi3+0x14a>
   2652c:	0189      	lsls	r1, r1, #6
   2652e:	1192      	asrs	r2, r2, #6
   26530:	428b      	cmp	r3, r1
   26532:	d304      	bcc.n	2653e <__divsi3+0x14a>
   26534:	0189      	lsls	r1, r1, #6
   26536:	d03a      	beq.n	265ae <__divsi3+0x1ba>
   26538:	1192      	asrs	r2, r2, #6
   2653a:	e000      	b.n	2653e <__divsi3+0x14a>
   2653c:	0989      	lsrs	r1, r1, #6
   2653e:	09c3      	lsrs	r3, r0, #7
   26540:	428b      	cmp	r3, r1
   26542:	d301      	bcc.n	26548 <__divsi3+0x154>
   26544:	01cb      	lsls	r3, r1, #7
   26546:	1ac0      	subs	r0, r0, r3
   26548:	4152      	adcs	r2, r2
   2654a:	0983      	lsrs	r3, r0, #6
   2654c:	428b      	cmp	r3, r1
   2654e:	d301      	bcc.n	26554 <__divsi3+0x160>
   26550:	018b      	lsls	r3, r1, #6
   26552:	1ac0      	subs	r0, r0, r3
   26554:	4152      	adcs	r2, r2
   26556:	0943      	lsrs	r3, r0, #5
   26558:	428b      	cmp	r3, r1
   2655a:	d301      	bcc.n	26560 <__divsi3+0x16c>
   2655c:	014b      	lsls	r3, r1, #5
   2655e:	1ac0      	subs	r0, r0, r3
   26560:	4152      	adcs	r2, r2
   26562:	0903      	lsrs	r3, r0, #4
   26564:	428b      	cmp	r3, r1
   26566:	d301      	bcc.n	2656c <__divsi3+0x178>
   26568:	010b      	lsls	r3, r1, #4
   2656a:	1ac0      	subs	r0, r0, r3
   2656c:	4152      	adcs	r2, r2
   2656e:	08c3      	lsrs	r3, r0, #3
   26570:	428b      	cmp	r3, r1
   26572:	d301      	bcc.n	26578 <__divsi3+0x184>
   26574:	00cb      	lsls	r3, r1, #3
   26576:	1ac0      	subs	r0, r0, r3
   26578:	4152      	adcs	r2, r2
   2657a:	0883      	lsrs	r3, r0, #2
   2657c:	428b      	cmp	r3, r1
   2657e:	d301      	bcc.n	26584 <__divsi3+0x190>
   26580:	008b      	lsls	r3, r1, #2
   26582:	1ac0      	subs	r0, r0, r3
   26584:	4152      	adcs	r2, r2
   26586:	d2d9      	bcs.n	2653c <__divsi3+0x148>
   26588:	0843      	lsrs	r3, r0, #1
   2658a:	428b      	cmp	r3, r1
   2658c:	d301      	bcc.n	26592 <__divsi3+0x19e>
   2658e:	004b      	lsls	r3, r1, #1
   26590:	1ac0      	subs	r0, r0, r3
   26592:	4152      	adcs	r2, r2
   26594:	1a41      	subs	r1, r0, r1
   26596:	d200      	bcs.n	2659a <__divsi3+0x1a6>
   26598:	4601      	mov	r1, r0
   2659a:	4663      	mov	r3, ip
   2659c:	4152      	adcs	r2, r2
   2659e:	105b      	asrs	r3, r3, #1
   265a0:	4610      	mov	r0, r2
   265a2:	d301      	bcc.n	265a8 <__divsi3+0x1b4>
   265a4:	4240      	negs	r0, r0
   265a6:	2b00      	cmp	r3, #0
   265a8:	d500      	bpl.n	265ac <__divsi3+0x1b8>
   265aa:	4249      	negs	r1, r1
   265ac:	4770      	bx	lr
   265ae:	4663      	mov	r3, ip
   265b0:	105b      	asrs	r3, r3, #1
   265b2:	d300      	bcc.n	265b6 <__divsi3+0x1c2>
   265b4:	4240      	negs	r0, r0
   265b6:	b501      	push	{r0, lr}
   265b8:	2000      	movs	r0, #0
   265ba:	f000 f805 	bl	265c8 <__aeabi_idiv0>
   265be:	bd02      	pop	{r1, pc}

000265c0 <__aeabi_idivmod>:
   265c0:	2900      	cmp	r1, #0
   265c2:	d0f8      	beq.n	265b6 <__divsi3+0x1c2>
   265c4:	e716      	b.n	263f4 <__divsi3>
   265c6:	4770      	bx	lr

000265c8 <__aeabi_idiv0>:
   265c8:	4770      	bx	lr
   265ca:	46c0      	nop			; (mov r8, r8)

000265cc <__aeabi_cdrcmple>:
   265cc:	4684      	mov	ip, r0
   265ce:	1c10      	adds	r0, r2, #0
   265d0:	4662      	mov	r2, ip
   265d2:	468c      	mov	ip, r1
   265d4:	1c19      	adds	r1, r3, #0
   265d6:	4663      	mov	r3, ip
   265d8:	e000      	b.n	265dc <__aeabi_cdcmpeq>
   265da:	46c0      	nop			; (mov r8, r8)

000265dc <__aeabi_cdcmpeq>:
   265dc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   265de:	f001 faeb 	bl	27bb8 <__ledf2>
   265e2:	2800      	cmp	r0, #0
   265e4:	d401      	bmi.n	265ea <__aeabi_cdcmpeq+0xe>
   265e6:	2100      	movs	r1, #0
   265e8:	42c8      	cmn	r0, r1
   265ea:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

000265ec <__aeabi_dcmpeq>:
   265ec:	b510      	push	{r4, lr}
   265ee:	f001 fa45 	bl	27a7c <__eqdf2>
   265f2:	4240      	negs	r0, r0
   265f4:	3001      	adds	r0, #1
   265f6:	bd10      	pop	{r4, pc}

000265f8 <__aeabi_dcmplt>:
   265f8:	b510      	push	{r4, lr}
   265fa:	f001 fadd 	bl	27bb8 <__ledf2>
   265fe:	2800      	cmp	r0, #0
   26600:	db01      	blt.n	26606 <__aeabi_dcmplt+0xe>
   26602:	2000      	movs	r0, #0
   26604:	bd10      	pop	{r4, pc}
   26606:	2001      	movs	r0, #1
   26608:	bd10      	pop	{r4, pc}
   2660a:	46c0      	nop			; (mov r8, r8)

0002660c <__aeabi_dcmple>:
   2660c:	b510      	push	{r4, lr}
   2660e:	f001 fad3 	bl	27bb8 <__ledf2>
   26612:	2800      	cmp	r0, #0
   26614:	dd01      	ble.n	2661a <__aeabi_dcmple+0xe>
   26616:	2000      	movs	r0, #0
   26618:	bd10      	pop	{r4, pc}
   2661a:	2001      	movs	r0, #1
   2661c:	bd10      	pop	{r4, pc}
   2661e:	46c0      	nop			; (mov r8, r8)

00026620 <__aeabi_dcmpgt>:
   26620:	b510      	push	{r4, lr}
   26622:	f001 fa65 	bl	27af0 <__gedf2>
   26626:	2800      	cmp	r0, #0
   26628:	dc01      	bgt.n	2662e <__aeabi_dcmpgt+0xe>
   2662a:	2000      	movs	r0, #0
   2662c:	bd10      	pop	{r4, pc}
   2662e:	2001      	movs	r0, #1
   26630:	bd10      	pop	{r4, pc}
   26632:	46c0      	nop			; (mov r8, r8)

00026634 <__aeabi_dcmpge>:
   26634:	b510      	push	{r4, lr}
   26636:	f001 fa5b 	bl	27af0 <__gedf2>
   2663a:	2800      	cmp	r0, #0
   2663c:	da01      	bge.n	26642 <__aeabi_dcmpge+0xe>
   2663e:	2000      	movs	r0, #0
   26640:	bd10      	pop	{r4, pc}
   26642:	2001      	movs	r0, #1
   26644:	bd10      	pop	{r4, pc}
   26646:	46c0      	nop			; (mov r8, r8)

00026648 <__aeabi_uldivmod>:
   26648:	2b00      	cmp	r3, #0
   2664a:	d111      	bne.n	26670 <__aeabi_uldivmod+0x28>
   2664c:	2a00      	cmp	r2, #0
   2664e:	d10f      	bne.n	26670 <__aeabi_uldivmod+0x28>
   26650:	2900      	cmp	r1, #0
   26652:	d100      	bne.n	26656 <__aeabi_uldivmod+0xe>
   26654:	2800      	cmp	r0, #0
   26656:	d002      	beq.n	2665e <__aeabi_uldivmod+0x16>
   26658:	2100      	movs	r1, #0
   2665a:	43c9      	mvns	r1, r1
   2665c:	1c08      	adds	r0, r1, #0
   2665e:	b407      	push	{r0, r1, r2}
   26660:	4802      	ldr	r0, [pc, #8]	; (2666c <__aeabi_uldivmod+0x24>)
   26662:	a102      	add	r1, pc, #8	; (adr r1, 2666c <__aeabi_uldivmod+0x24>)
   26664:	1840      	adds	r0, r0, r1
   26666:	9002      	str	r0, [sp, #8]
   26668:	bd03      	pop	{r0, r1, pc}
   2666a:	46c0      	nop			; (mov r8, r8)
   2666c:	ffffff5d 	.word	0xffffff5d
   26670:	b403      	push	{r0, r1}
   26672:	4668      	mov	r0, sp
   26674:	b501      	push	{r0, lr}
   26676:	9802      	ldr	r0, [sp, #8]
   26678:	f000 f84e 	bl	26718 <__udivmoddi4>
   2667c:	9b01      	ldr	r3, [sp, #4]
   2667e:	469e      	mov	lr, r3
   26680:	b002      	add	sp, #8
   26682:	bc0c      	pop	{r2, r3}
   26684:	4770      	bx	lr
   26686:	46c0      	nop			; (mov r8, r8)

00026688 <__aeabi_lmul>:
   26688:	b5f0      	push	{r4, r5, r6, r7, lr}
   2668a:	46ce      	mov	lr, r9
   2668c:	4647      	mov	r7, r8
   2668e:	0415      	lsls	r5, r2, #16
   26690:	0c2d      	lsrs	r5, r5, #16
   26692:	002e      	movs	r6, r5
   26694:	b580      	push	{r7, lr}
   26696:	0407      	lsls	r7, r0, #16
   26698:	0c14      	lsrs	r4, r2, #16
   2669a:	0c3f      	lsrs	r7, r7, #16
   2669c:	4699      	mov	r9, r3
   2669e:	0c03      	lsrs	r3, r0, #16
   266a0:	437e      	muls	r6, r7
   266a2:	435d      	muls	r5, r3
   266a4:	4367      	muls	r7, r4
   266a6:	4363      	muls	r3, r4
   266a8:	197f      	adds	r7, r7, r5
   266aa:	0c34      	lsrs	r4, r6, #16
   266ac:	19e4      	adds	r4, r4, r7
   266ae:	469c      	mov	ip, r3
   266b0:	42a5      	cmp	r5, r4
   266b2:	d903      	bls.n	266bc <__aeabi_lmul+0x34>
   266b4:	2380      	movs	r3, #128	; 0x80
   266b6:	025b      	lsls	r3, r3, #9
   266b8:	4698      	mov	r8, r3
   266ba:	44c4      	add	ip, r8
   266bc:	464b      	mov	r3, r9
   266be:	4351      	muls	r1, r2
   266c0:	4343      	muls	r3, r0
   266c2:	0436      	lsls	r6, r6, #16
   266c4:	0c36      	lsrs	r6, r6, #16
   266c6:	0c25      	lsrs	r5, r4, #16
   266c8:	0424      	lsls	r4, r4, #16
   266ca:	4465      	add	r5, ip
   266cc:	19a4      	adds	r4, r4, r6
   266ce:	1859      	adds	r1, r3, r1
   266d0:	1949      	adds	r1, r1, r5
   266d2:	0020      	movs	r0, r4
   266d4:	bc0c      	pop	{r2, r3}
   266d6:	4690      	mov	r8, r2
   266d8:	4699      	mov	r9, r3
   266da:	bdf0      	pop	{r4, r5, r6, r7, pc}

000266dc <__aeabi_d2uiz>:
   266dc:	b570      	push	{r4, r5, r6, lr}
   266de:	2200      	movs	r2, #0
   266e0:	4b0c      	ldr	r3, [pc, #48]	; (26714 <__aeabi_d2uiz+0x38>)
   266e2:	0004      	movs	r4, r0
   266e4:	000d      	movs	r5, r1
   266e6:	f7ff ffa5 	bl	26634 <__aeabi_dcmpge>
   266ea:	2800      	cmp	r0, #0
   266ec:	d104      	bne.n	266f8 <__aeabi_d2uiz+0x1c>
   266ee:	0020      	movs	r0, r4
   266f0:	0029      	movs	r1, r5
   266f2:	f002 f879 	bl	287e8 <__aeabi_d2iz>
   266f6:	bd70      	pop	{r4, r5, r6, pc}
   266f8:	4b06      	ldr	r3, [pc, #24]	; (26714 <__aeabi_d2uiz+0x38>)
   266fa:	2200      	movs	r2, #0
   266fc:	0020      	movs	r0, r4
   266fe:	0029      	movs	r1, r5
   26700:	f001 fd3c 	bl	2817c <__aeabi_dsub>
   26704:	f002 f870 	bl	287e8 <__aeabi_d2iz>
   26708:	2380      	movs	r3, #128	; 0x80
   2670a:	061b      	lsls	r3, r3, #24
   2670c:	469c      	mov	ip, r3
   2670e:	4460      	add	r0, ip
   26710:	e7f1      	b.n	266f6 <__aeabi_d2uiz+0x1a>
   26712:	46c0      	nop			; (mov r8, r8)
   26714:	41e00000 	.word	0x41e00000

00026718 <__udivmoddi4>:
   26718:	b5f0      	push	{r4, r5, r6, r7, lr}
   2671a:	4657      	mov	r7, sl
   2671c:	464e      	mov	r6, r9
   2671e:	4645      	mov	r5, r8
   26720:	46de      	mov	lr, fp
   26722:	b5e0      	push	{r5, r6, r7, lr}
   26724:	0004      	movs	r4, r0
   26726:	b083      	sub	sp, #12
   26728:	000d      	movs	r5, r1
   2672a:	4692      	mov	sl, r2
   2672c:	4699      	mov	r9, r3
   2672e:	428b      	cmp	r3, r1
   26730:	d82f      	bhi.n	26792 <__udivmoddi4+0x7a>
   26732:	d02c      	beq.n	2678e <__udivmoddi4+0x76>
   26734:	4649      	mov	r1, r9
   26736:	4650      	mov	r0, sl
   26738:	f002 f974 	bl	28a24 <__clzdi2>
   2673c:	0029      	movs	r1, r5
   2673e:	0006      	movs	r6, r0
   26740:	0020      	movs	r0, r4
   26742:	f002 f96f 	bl	28a24 <__clzdi2>
   26746:	1a33      	subs	r3, r6, r0
   26748:	4698      	mov	r8, r3
   2674a:	3b20      	subs	r3, #32
   2674c:	469b      	mov	fp, r3
   2674e:	d500      	bpl.n	26752 <__udivmoddi4+0x3a>
   26750:	e074      	b.n	2683c <__udivmoddi4+0x124>
   26752:	4653      	mov	r3, sl
   26754:	465a      	mov	r2, fp
   26756:	4093      	lsls	r3, r2
   26758:	001f      	movs	r7, r3
   2675a:	4653      	mov	r3, sl
   2675c:	4642      	mov	r2, r8
   2675e:	4093      	lsls	r3, r2
   26760:	001e      	movs	r6, r3
   26762:	42af      	cmp	r7, r5
   26764:	d829      	bhi.n	267ba <__udivmoddi4+0xa2>
   26766:	d026      	beq.n	267b6 <__udivmoddi4+0x9e>
   26768:	465b      	mov	r3, fp
   2676a:	1ba4      	subs	r4, r4, r6
   2676c:	41bd      	sbcs	r5, r7
   2676e:	2b00      	cmp	r3, #0
   26770:	da00      	bge.n	26774 <__udivmoddi4+0x5c>
   26772:	e079      	b.n	26868 <__udivmoddi4+0x150>
   26774:	2200      	movs	r2, #0
   26776:	2300      	movs	r3, #0
   26778:	9200      	str	r2, [sp, #0]
   2677a:	9301      	str	r3, [sp, #4]
   2677c:	2301      	movs	r3, #1
   2677e:	465a      	mov	r2, fp
   26780:	4093      	lsls	r3, r2
   26782:	9301      	str	r3, [sp, #4]
   26784:	2301      	movs	r3, #1
   26786:	4642      	mov	r2, r8
   26788:	4093      	lsls	r3, r2
   2678a:	9300      	str	r3, [sp, #0]
   2678c:	e019      	b.n	267c2 <__udivmoddi4+0xaa>
   2678e:	4282      	cmp	r2, r0
   26790:	d9d0      	bls.n	26734 <__udivmoddi4+0x1c>
   26792:	2200      	movs	r2, #0
   26794:	2300      	movs	r3, #0
   26796:	9200      	str	r2, [sp, #0]
   26798:	9301      	str	r3, [sp, #4]
   2679a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   2679c:	2b00      	cmp	r3, #0
   2679e:	d001      	beq.n	267a4 <__udivmoddi4+0x8c>
   267a0:	601c      	str	r4, [r3, #0]
   267a2:	605d      	str	r5, [r3, #4]
   267a4:	9800      	ldr	r0, [sp, #0]
   267a6:	9901      	ldr	r1, [sp, #4]
   267a8:	b003      	add	sp, #12
   267aa:	bc3c      	pop	{r2, r3, r4, r5}
   267ac:	4690      	mov	r8, r2
   267ae:	4699      	mov	r9, r3
   267b0:	46a2      	mov	sl, r4
   267b2:	46ab      	mov	fp, r5
   267b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   267b6:	42a3      	cmp	r3, r4
   267b8:	d9d6      	bls.n	26768 <__udivmoddi4+0x50>
   267ba:	2200      	movs	r2, #0
   267bc:	2300      	movs	r3, #0
   267be:	9200      	str	r2, [sp, #0]
   267c0:	9301      	str	r3, [sp, #4]
   267c2:	4643      	mov	r3, r8
   267c4:	2b00      	cmp	r3, #0
   267c6:	d0e8      	beq.n	2679a <__udivmoddi4+0x82>
   267c8:	07fb      	lsls	r3, r7, #31
   267ca:	0872      	lsrs	r2, r6, #1
   267cc:	431a      	orrs	r2, r3
   267ce:	4646      	mov	r6, r8
   267d0:	087b      	lsrs	r3, r7, #1
   267d2:	e00e      	b.n	267f2 <__udivmoddi4+0xda>
   267d4:	42ab      	cmp	r3, r5
   267d6:	d101      	bne.n	267dc <__udivmoddi4+0xc4>
   267d8:	42a2      	cmp	r2, r4
   267da:	d80c      	bhi.n	267f6 <__udivmoddi4+0xde>
   267dc:	1aa4      	subs	r4, r4, r2
   267de:	419d      	sbcs	r5, r3
   267e0:	2001      	movs	r0, #1
   267e2:	1924      	adds	r4, r4, r4
   267e4:	416d      	adcs	r5, r5
   267e6:	2100      	movs	r1, #0
   267e8:	3e01      	subs	r6, #1
   267ea:	1824      	adds	r4, r4, r0
   267ec:	414d      	adcs	r5, r1
   267ee:	2e00      	cmp	r6, #0
   267f0:	d006      	beq.n	26800 <__udivmoddi4+0xe8>
   267f2:	42ab      	cmp	r3, r5
   267f4:	d9ee      	bls.n	267d4 <__udivmoddi4+0xbc>
   267f6:	3e01      	subs	r6, #1
   267f8:	1924      	adds	r4, r4, r4
   267fa:	416d      	adcs	r5, r5
   267fc:	2e00      	cmp	r6, #0
   267fe:	d1f8      	bne.n	267f2 <__udivmoddi4+0xda>
   26800:	465b      	mov	r3, fp
   26802:	9800      	ldr	r0, [sp, #0]
   26804:	9901      	ldr	r1, [sp, #4]
   26806:	1900      	adds	r0, r0, r4
   26808:	4169      	adcs	r1, r5
   2680a:	2b00      	cmp	r3, #0
   2680c:	db22      	blt.n	26854 <__udivmoddi4+0x13c>
   2680e:	002b      	movs	r3, r5
   26810:	465a      	mov	r2, fp
   26812:	40d3      	lsrs	r3, r2
   26814:	002a      	movs	r2, r5
   26816:	4644      	mov	r4, r8
   26818:	40e2      	lsrs	r2, r4
   2681a:	001c      	movs	r4, r3
   2681c:	465b      	mov	r3, fp
   2681e:	0015      	movs	r5, r2
   26820:	2b00      	cmp	r3, #0
   26822:	db2c      	blt.n	2687e <__udivmoddi4+0x166>
   26824:	0026      	movs	r6, r4
   26826:	409e      	lsls	r6, r3
   26828:	0033      	movs	r3, r6
   2682a:	0026      	movs	r6, r4
   2682c:	4647      	mov	r7, r8
   2682e:	40be      	lsls	r6, r7
   26830:	0032      	movs	r2, r6
   26832:	1a80      	subs	r0, r0, r2
   26834:	4199      	sbcs	r1, r3
   26836:	9000      	str	r0, [sp, #0]
   26838:	9101      	str	r1, [sp, #4]
   2683a:	e7ae      	b.n	2679a <__udivmoddi4+0x82>
   2683c:	4642      	mov	r2, r8
   2683e:	2320      	movs	r3, #32
   26840:	1a9b      	subs	r3, r3, r2
   26842:	4652      	mov	r2, sl
   26844:	40da      	lsrs	r2, r3
   26846:	4641      	mov	r1, r8
   26848:	0013      	movs	r3, r2
   2684a:	464a      	mov	r2, r9
   2684c:	408a      	lsls	r2, r1
   2684e:	0017      	movs	r7, r2
   26850:	431f      	orrs	r7, r3
   26852:	e782      	b.n	2675a <__udivmoddi4+0x42>
   26854:	4642      	mov	r2, r8
   26856:	2320      	movs	r3, #32
   26858:	1a9b      	subs	r3, r3, r2
   2685a:	002a      	movs	r2, r5
   2685c:	4646      	mov	r6, r8
   2685e:	409a      	lsls	r2, r3
   26860:	0023      	movs	r3, r4
   26862:	40f3      	lsrs	r3, r6
   26864:	4313      	orrs	r3, r2
   26866:	e7d5      	b.n	26814 <__udivmoddi4+0xfc>
   26868:	4642      	mov	r2, r8
   2686a:	2320      	movs	r3, #32
   2686c:	2100      	movs	r1, #0
   2686e:	1a9b      	subs	r3, r3, r2
   26870:	2200      	movs	r2, #0
   26872:	9100      	str	r1, [sp, #0]
   26874:	9201      	str	r2, [sp, #4]
   26876:	2201      	movs	r2, #1
   26878:	40da      	lsrs	r2, r3
   2687a:	9201      	str	r2, [sp, #4]
   2687c:	e782      	b.n	26784 <__udivmoddi4+0x6c>
   2687e:	4642      	mov	r2, r8
   26880:	2320      	movs	r3, #32
   26882:	0026      	movs	r6, r4
   26884:	1a9b      	subs	r3, r3, r2
   26886:	40de      	lsrs	r6, r3
   26888:	002f      	movs	r7, r5
   2688a:	46b4      	mov	ip, r6
   2688c:	4097      	lsls	r7, r2
   2688e:	4666      	mov	r6, ip
   26890:	003b      	movs	r3, r7
   26892:	4333      	orrs	r3, r6
   26894:	e7c9      	b.n	2682a <__udivmoddi4+0x112>
   26896:	46c0      	nop			; (mov r8, r8)

00026898 <__aeabi_fdiv>:
   26898:	b5f0      	push	{r4, r5, r6, r7, lr}
   2689a:	4657      	mov	r7, sl
   2689c:	464e      	mov	r6, r9
   2689e:	46de      	mov	lr, fp
   268a0:	4645      	mov	r5, r8
   268a2:	b5e0      	push	{r5, r6, r7, lr}
   268a4:	0244      	lsls	r4, r0, #9
   268a6:	0043      	lsls	r3, r0, #1
   268a8:	0fc6      	lsrs	r6, r0, #31
   268aa:	b083      	sub	sp, #12
   268ac:	1c0f      	adds	r7, r1, #0
   268ae:	0a64      	lsrs	r4, r4, #9
   268b0:	0e1b      	lsrs	r3, r3, #24
   268b2:	46b2      	mov	sl, r6
   268b4:	d053      	beq.n	2695e <__aeabi_fdiv+0xc6>
   268b6:	2bff      	cmp	r3, #255	; 0xff
   268b8:	d027      	beq.n	2690a <__aeabi_fdiv+0x72>
   268ba:	2280      	movs	r2, #128	; 0x80
   268bc:	00e4      	lsls	r4, r4, #3
   268be:	04d2      	lsls	r2, r2, #19
   268c0:	4314      	orrs	r4, r2
   268c2:	227f      	movs	r2, #127	; 0x7f
   268c4:	4252      	negs	r2, r2
   268c6:	4690      	mov	r8, r2
   268c8:	4498      	add	r8, r3
   268ca:	2300      	movs	r3, #0
   268cc:	4699      	mov	r9, r3
   268ce:	469b      	mov	fp, r3
   268d0:	027d      	lsls	r5, r7, #9
   268d2:	0078      	lsls	r0, r7, #1
   268d4:	0ffb      	lsrs	r3, r7, #31
   268d6:	0a6d      	lsrs	r5, r5, #9
   268d8:	0e00      	lsrs	r0, r0, #24
   268da:	9300      	str	r3, [sp, #0]
   268dc:	d024      	beq.n	26928 <__aeabi_fdiv+0x90>
   268de:	28ff      	cmp	r0, #255	; 0xff
   268e0:	d046      	beq.n	26970 <__aeabi_fdiv+0xd8>
   268e2:	2380      	movs	r3, #128	; 0x80
   268e4:	2100      	movs	r1, #0
   268e6:	00ed      	lsls	r5, r5, #3
   268e8:	04db      	lsls	r3, r3, #19
   268ea:	431d      	orrs	r5, r3
   268ec:	387f      	subs	r0, #127	; 0x7f
   268ee:	4647      	mov	r7, r8
   268f0:	1a38      	subs	r0, r7, r0
   268f2:	464f      	mov	r7, r9
   268f4:	430f      	orrs	r7, r1
   268f6:	00bf      	lsls	r7, r7, #2
   268f8:	46b9      	mov	r9, r7
   268fa:	0033      	movs	r3, r6
   268fc:	9a00      	ldr	r2, [sp, #0]
   268fe:	4f87      	ldr	r7, [pc, #540]	; (26b1c <__aeabi_fdiv+0x284>)
   26900:	4053      	eors	r3, r2
   26902:	464a      	mov	r2, r9
   26904:	58ba      	ldr	r2, [r7, r2]
   26906:	9301      	str	r3, [sp, #4]
   26908:	4697      	mov	pc, r2
   2690a:	2c00      	cmp	r4, #0
   2690c:	d14e      	bne.n	269ac <__aeabi_fdiv+0x114>
   2690e:	2308      	movs	r3, #8
   26910:	4699      	mov	r9, r3
   26912:	33f7      	adds	r3, #247	; 0xf7
   26914:	4698      	mov	r8, r3
   26916:	3bfd      	subs	r3, #253	; 0xfd
   26918:	469b      	mov	fp, r3
   2691a:	027d      	lsls	r5, r7, #9
   2691c:	0078      	lsls	r0, r7, #1
   2691e:	0ffb      	lsrs	r3, r7, #31
   26920:	0a6d      	lsrs	r5, r5, #9
   26922:	0e00      	lsrs	r0, r0, #24
   26924:	9300      	str	r3, [sp, #0]
   26926:	d1da      	bne.n	268de <__aeabi_fdiv+0x46>
   26928:	2d00      	cmp	r5, #0
   2692a:	d126      	bne.n	2697a <__aeabi_fdiv+0xe2>
   2692c:	2000      	movs	r0, #0
   2692e:	2101      	movs	r1, #1
   26930:	0033      	movs	r3, r6
   26932:	9a00      	ldr	r2, [sp, #0]
   26934:	4f7a      	ldr	r7, [pc, #488]	; (26b20 <__aeabi_fdiv+0x288>)
   26936:	4053      	eors	r3, r2
   26938:	4642      	mov	r2, r8
   2693a:	1a10      	subs	r0, r2, r0
   2693c:	464a      	mov	r2, r9
   2693e:	430a      	orrs	r2, r1
   26940:	0092      	lsls	r2, r2, #2
   26942:	58ba      	ldr	r2, [r7, r2]
   26944:	001d      	movs	r5, r3
   26946:	4697      	mov	pc, r2
   26948:	9b00      	ldr	r3, [sp, #0]
   2694a:	002c      	movs	r4, r5
   2694c:	469a      	mov	sl, r3
   2694e:	468b      	mov	fp, r1
   26950:	465b      	mov	r3, fp
   26952:	2b02      	cmp	r3, #2
   26954:	d131      	bne.n	269ba <__aeabi_fdiv+0x122>
   26956:	4653      	mov	r3, sl
   26958:	21ff      	movs	r1, #255	; 0xff
   2695a:	2400      	movs	r4, #0
   2695c:	e038      	b.n	269d0 <__aeabi_fdiv+0x138>
   2695e:	2c00      	cmp	r4, #0
   26960:	d117      	bne.n	26992 <__aeabi_fdiv+0xfa>
   26962:	2304      	movs	r3, #4
   26964:	4699      	mov	r9, r3
   26966:	2300      	movs	r3, #0
   26968:	4698      	mov	r8, r3
   2696a:	3301      	adds	r3, #1
   2696c:	469b      	mov	fp, r3
   2696e:	e7af      	b.n	268d0 <__aeabi_fdiv+0x38>
   26970:	20ff      	movs	r0, #255	; 0xff
   26972:	2d00      	cmp	r5, #0
   26974:	d10b      	bne.n	2698e <__aeabi_fdiv+0xf6>
   26976:	2102      	movs	r1, #2
   26978:	e7da      	b.n	26930 <__aeabi_fdiv+0x98>
   2697a:	0028      	movs	r0, r5
   2697c:	f002 f834 	bl	289e8 <__clzsi2>
   26980:	1f43      	subs	r3, r0, #5
   26982:	409d      	lsls	r5, r3
   26984:	2376      	movs	r3, #118	; 0x76
   26986:	425b      	negs	r3, r3
   26988:	1a18      	subs	r0, r3, r0
   2698a:	2100      	movs	r1, #0
   2698c:	e7af      	b.n	268ee <__aeabi_fdiv+0x56>
   2698e:	2103      	movs	r1, #3
   26990:	e7ad      	b.n	268ee <__aeabi_fdiv+0x56>
   26992:	0020      	movs	r0, r4
   26994:	f002 f828 	bl	289e8 <__clzsi2>
   26998:	1f43      	subs	r3, r0, #5
   2699a:	409c      	lsls	r4, r3
   2699c:	2376      	movs	r3, #118	; 0x76
   2699e:	425b      	negs	r3, r3
   269a0:	1a1b      	subs	r3, r3, r0
   269a2:	4698      	mov	r8, r3
   269a4:	2300      	movs	r3, #0
   269a6:	4699      	mov	r9, r3
   269a8:	469b      	mov	fp, r3
   269aa:	e791      	b.n	268d0 <__aeabi_fdiv+0x38>
   269ac:	230c      	movs	r3, #12
   269ae:	4699      	mov	r9, r3
   269b0:	33f3      	adds	r3, #243	; 0xf3
   269b2:	4698      	mov	r8, r3
   269b4:	3bfc      	subs	r3, #252	; 0xfc
   269b6:	469b      	mov	fp, r3
   269b8:	e78a      	b.n	268d0 <__aeabi_fdiv+0x38>
   269ba:	2b03      	cmp	r3, #3
   269bc:	d100      	bne.n	269c0 <__aeabi_fdiv+0x128>
   269be:	e0a5      	b.n	26b0c <__aeabi_fdiv+0x274>
   269c0:	4655      	mov	r5, sl
   269c2:	2b01      	cmp	r3, #1
   269c4:	d000      	beq.n	269c8 <__aeabi_fdiv+0x130>
   269c6:	e081      	b.n	26acc <__aeabi_fdiv+0x234>
   269c8:	2301      	movs	r3, #1
   269ca:	2100      	movs	r1, #0
   269cc:	2400      	movs	r4, #0
   269ce:	402b      	ands	r3, r5
   269d0:	0264      	lsls	r4, r4, #9
   269d2:	05c9      	lsls	r1, r1, #23
   269d4:	0a60      	lsrs	r0, r4, #9
   269d6:	07db      	lsls	r3, r3, #31
   269d8:	4308      	orrs	r0, r1
   269da:	4318      	orrs	r0, r3
   269dc:	b003      	add	sp, #12
   269de:	bc3c      	pop	{r2, r3, r4, r5}
   269e0:	4690      	mov	r8, r2
   269e2:	4699      	mov	r9, r3
   269e4:	46a2      	mov	sl, r4
   269e6:	46ab      	mov	fp, r5
   269e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   269ea:	2480      	movs	r4, #128	; 0x80
   269ec:	2300      	movs	r3, #0
   269ee:	03e4      	lsls	r4, r4, #15
   269f0:	21ff      	movs	r1, #255	; 0xff
   269f2:	e7ed      	b.n	269d0 <__aeabi_fdiv+0x138>
   269f4:	21ff      	movs	r1, #255	; 0xff
   269f6:	2400      	movs	r4, #0
   269f8:	e7ea      	b.n	269d0 <__aeabi_fdiv+0x138>
   269fa:	2301      	movs	r3, #1
   269fc:	1a59      	subs	r1, r3, r1
   269fe:	291b      	cmp	r1, #27
   26a00:	dd66      	ble.n	26ad0 <__aeabi_fdiv+0x238>
   26a02:	9a01      	ldr	r2, [sp, #4]
   26a04:	4013      	ands	r3, r2
   26a06:	2100      	movs	r1, #0
   26a08:	2400      	movs	r4, #0
   26a0a:	e7e1      	b.n	269d0 <__aeabi_fdiv+0x138>
   26a0c:	2380      	movs	r3, #128	; 0x80
   26a0e:	03db      	lsls	r3, r3, #15
   26a10:	421c      	tst	r4, r3
   26a12:	d038      	beq.n	26a86 <__aeabi_fdiv+0x1ee>
   26a14:	421d      	tst	r5, r3
   26a16:	d051      	beq.n	26abc <__aeabi_fdiv+0x224>
   26a18:	431c      	orrs	r4, r3
   26a1a:	0264      	lsls	r4, r4, #9
   26a1c:	0a64      	lsrs	r4, r4, #9
   26a1e:	0033      	movs	r3, r6
   26a20:	21ff      	movs	r1, #255	; 0xff
   26a22:	e7d5      	b.n	269d0 <__aeabi_fdiv+0x138>
   26a24:	0163      	lsls	r3, r4, #5
   26a26:	016c      	lsls	r4, r5, #5
   26a28:	42a3      	cmp	r3, r4
   26a2a:	d23b      	bcs.n	26aa4 <__aeabi_fdiv+0x20c>
   26a2c:	261b      	movs	r6, #27
   26a2e:	2100      	movs	r1, #0
   26a30:	3801      	subs	r0, #1
   26a32:	2501      	movs	r5, #1
   26a34:	001f      	movs	r7, r3
   26a36:	0049      	lsls	r1, r1, #1
   26a38:	005b      	lsls	r3, r3, #1
   26a3a:	2f00      	cmp	r7, #0
   26a3c:	db01      	blt.n	26a42 <__aeabi_fdiv+0x1aa>
   26a3e:	429c      	cmp	r4, r3
   26a40:	d801      	bhi.n	26a46 <__aeabi_fdiv+0x1ae>
   26a42:	1b1b      	subs	r3, r3, r4
   26a44:	4329      	orrs	r1, r5
   26a46:	3e01      	subs	r6, #1
   26a48:	2e00      	cmp	r6, #0
   26a4a:	d1f3      	bne.n	26a34 <__aeabi_fdiv+0x19c>
   26a4c:	001c      	movs	r4, r3
   26a4e:	1e63      	subs	r3, r4, #1
   26a50:	419c      	sbcs	r4, r3
   26a52:	430c      	orrs	r4, r1
   26a54:	0001      	movs	r1, r0
   26a56:	317f      	adds	r1, #127	; 0x7f
   26a58:	2900      	cmp	r1, #0
   26a5a:	ddce      	ble.n	269fa <__aeabi_fdiv+0x162>
   26a5c:	0763      	lsls	r3, r4, #29
   26a5e:	d004      	beq.n	26a6a <__aeabi_fdiv+0x1d2>
   26a60:	230f      	movs	r3, #15
   26a62:	4023      	ands	r3, r4
   26a64:	2b04      	cmp	r3, #4
   26a66:	d000      	beq.n	26a6a <__aeabi_fdiv+0x1d2>
   26a68:	3404      	adds	r4, #4
   26a6a:	0123      	lsls	r3, r4, #4
   26a6c:	d503      	bpl.n	26a76 <__aeabi_fdiv+0x1de>
   26a6e:	0001      	movs	r1, r0
   26a70:	4b2c      	ldr	r3, [pc, #176]	; (26b24 <__aeabi_fdiv+0x28c>)
   26a72:	3180      	adds	r1, #128	; 0x80
   26a74:	401c      	ands	r4, r3
   26a76:	29fe      	cmp	r1, #254	; 0xfe
   26a78:	dd0d      	ble.n	26a96 <__aeabi_fdiv+0x1fe>
   26a7a:	2301      	movs	r3, #1
   26a7c:	9a01      	ldr	r2, [sp, #4]
   26a7e:	21ff      	movs	r1, #255	; 0xff
   26a80:	4013      	ands	r3, r2
   26a82:	2400      	movs	r4, #0
   26a84:	e7a4      	b.n	269d0 <__aeabi_fdiv+0x138>
   26a86:	2380      	movs	r3, #128	; 0x80
   26a88:	03db      	lsls	r3, r3, #15
   26a8a:	431c      	orrs	r4, r3
   26a8c:	0264      	lsls	r4, r4, #9
   26a8e:	0a64      	lsrs	r4, r4, #9
   26a90:	0033      	movs	r3, r6
   26a92:	21ff      	movs	r1, #255	; 0xff
   26a94:	e79c      	b.n	269d0 <__aeabi_fdiv+0x138>
   26a96:	2301      	movs	r3, #1
   26a98:	9a01      	ldr	r2, [sp, #4]
   26a9a:	01a4      	lsls	r4, r4, #6
   26a9c:	0a64      	lsrs	r4, r4, #9
   26a9e:	b2c9      	uxtb	r1, r1
   26aa0:	4013      	ands	r3, r2
   26aa2:	e795      	b.n	269d0 <__aeabi_fdiv+0x138>
   26aa4:	1b1b      	subs	r3, r3, r4
   26aa6:	261a      	movs	r6, #26
   26aa8:	2101      	movs	r1, #1
   26aaa:	e7c2      	b.n	26a32 <__aeabi_fdiv+0x19a>
   26aac:	9b00      	ldr	r3, [sp, #0]
   26aae:	468b      	mov	fp, r1
   26ab0:	469a      	mov	sl, r3
   26ab2:	2400      	movs	r4, #0
   26ab4:	e74c      	b.n	26950 <__aeabi_fdiv+0xb8>
   26ab6:	0263      	lsls	r3, r4, #9
   26ab8:	d5e5      	bpl.n	26a86 <__aeabi_fdiv+0x1ee>
   26aba:	2500      	movs	r5, #0
   26abc:	2480      	movs	r4, #128	; 0x80
   26abe:	03e4      	lsls	r4, r4, #15
   26ac0:	432c      	orrs	r4, r5
   26ac2:	0264      	lsls	r4, r4, #9
   26ac4:	0a64      	lsrs	r4, r4, #9
   26ac6:	9b00      	ldr	r3, [sp, #0]
   26ac8:	21ff      	movs	r1, #255	; 0xff
   26aca:	e781      	b.n	269d0 <__aeabi_fdiv+0x138>
   26acc:	9501      	str	r5, [sp, #4]
   26ace:	e7c1      	b.n	26a54 <__aeabi_fdiv+0x1bc>
   26ad0:	0023      	movs	r3, r4
   26ad2:	2020      	movs	r0, #32
   26ad4:	40cb      	lsrs	r3, r1
   26ad6:	1a41      	subs	r1, r0, r1
   26ad8:	408c      	lsls	r4, r1
   26ada:	1e61      	subs	r1, r4, #1
   26adc:	418c      	sbcs	r4, r1
   26ade:	431c      	orrs	r4, r3
   26ae0:	0763      	lsls	r3, r4, #29
   26ae2:	d004      	beq.n	26aee <__aeabi_fdiv+0x256>
   26ae4:	230f      	movs	r3, #15
   26ae6:	4023      	ands	r3, r4
   26ae8:	2b04      	cmp	r3, #4
   26aea:	d000      	beq.n	26aee <__aeabi_fdiv+0x256>
   26aec:	3404      	adds	r4, #4
   26aee:	0163      	lsls	r3, r4, #5
   26af0:	d505      	bpl.n	26afe <__aeabi_fdiv+0x266>
   26af2:	2301      	movs	r3, #1
   26af4:	9a01      	ldr	r2, [sp, #4]
   26af6:	2101      	movs	r1, #1
   26af8:	4013      	ands	r3, r2
   26afa:	2400      	movs	r4, #0
   26afc:	e768      	b.n	269d0 <__aeabi_fdiv+0x138>
   26afe:	2301      	movs	r3, #1
   26b00:	9a01      	ldr	r2, [sp, #4]
   26b02:	01a4      	lsls	r4, r4, #6
   26b04:	0a64      	lsrs	r4, r4, #9
   26b06:	4013      	ands	r3, r2
   26b08:	2100      	movs	r1, #0
   26b0a:	e761      	b.n	269d0 <__aeabi_fdiv+0x138>
   26b0c:	2380      	movs	r3, #128	; 0x80
   26b0e:	03db      	lsls	r3, r3, #15
   26b10:	431c      	orrs	r4, r3
   26b12:	0264      	lsls	r4, r4, #9
   26b14:	0a64      	lsrs	r4, r4, #9
   26b16:	4653      	mov	r3, sl
   26b18:	21ff      	movs	r1, #255	; 0xff
   26b1a:	e759      	b.n	269d0 <__aeabi_fdiv+0x138>
   26b1c:	0002aaf8 	.word	0x0002aaf8
   26b20:	0002ab38 	.word	0x0002ab38
   26b24:	f7ffffff 	.word	0xf7ffffff

00026b28 <__aeabi_fmul>:
   26b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   26b2a:	4657      	mov	r7, sl
   26b2c:	464e      	mov	r6, r9
   26b2e:	4645      	mov	r5, r8
   26b30:	46de      	mov	lr, fp
   26b32:	b5e0      	push	{r5, r6, r7, lr}
   26b34:	0247      	lsls	r7, r0, #9
   26b36:	0046      	lsls	r6, r0, #1
   26b38:	4688      	mov	r8, r1
   26b3a:	0a7f      	lsrs	r7, r7, #9
   26b3c:	0e36      	lsrs	r6, r6, #24
   26b3e:	0fc4      	lsrs	r4, r0, #31
   26b40:	2e00      	cmp	r6, #0
   26b42:	d047      	beq.n	26bd4 <__aeabi_fmul+0xac>
   26b44:	2eff      	cmp	r6, #255	; 0xff
   26b46:	d024      	beq.n	26b92 <__aeabi_fmul+0x6a>
   26b48:	00fb      	lsls	r3, r7, #3
   26b4a:	2780      	movs	r7, #128	; 0x80
   26b4c:	04ff      	lsls	r7, r7, #19
   26b4e:	431f      	orrs	r7, r3
   26b50:	2300      	movs	r3, #0
   26b52:	4699      	mov	r9, r3
   26b54:	469a      	mov	sl, r3
   26b56:	3e7f      	subs	r6, #127	; 0x7f
   26b58:	4643      	mov	r3, r8
   26b5a:	025d      	lsls	r5, r3, #9
   26b5c:	0058      	lsls	r0, r3, #1
   26b5e:	0fdb      	lsrs	r3, r3, #31
   26b60:	0a6d      	lsrs	r5, r5, #9
   26b62:	0e00      	lsrs	r0, r0, #24
   26b64:	4698      	mov	r8, r3
   26b66:	d043      	beq.n	26bf0 <__aeabi_fmul+0xc8>
   26b68:	28ff      	cmp	r0, #255	; 0xff
   26b6a:	d03b      	beq.n	26be4 <__aeabi_fmul+0xbc>
   26b6c:	00eb      	lsls	r3, r5, #3
   26b6e:	2580      	movs	r5, #128	; 0x80
   26b70:	2200      	movs	r2, #0
   26b72:	04ed      	lsls	r5, r5, #19
   26b74:	431d      	orrs	r5, r3
   26b76:	387f      	subs	r0, #127	; 0x7f
   26b78:	1836      	adds	r6, r6, r0
   26b7a:	1c73      	adds	r3, r6, #1
   26b7c:	4641      	mov	r1, r8
   26b7e:	469b      	mov	fp, r3
   26b80:	464b      	mov	r3, r9
   26b82:	4061      	eors	r1, r4
   26b84:	4313      	orrs	r3, r2
   26b86:	2b0f      	cmp	r3, #15
   26b88:	d864      	bhi.n	26c54 <__aeabi_fmul+0x12c>
   26b8a:	4875      	ldr	r0, [pc, #468]	; (26d60 <__aeabi_fmul+0x238>)
   26b8c:	009b      	lsls	r3, r3, #2
   26b8e:	58c3      	ldr	r3, [r0, r3]
   26b90:	469f      	mov	pc, r3
   26b92:	2f00      	cmp	r7, #0
   26b94:	d142      	bne.n	26c1c <__aeabi_fmul+0xf4>
   26b96:	2308      	movs	r3, #8
   26b98:	4699      	mov	r9, r3
   26b9a:	3b06      	subs	r3, #6
   26b9c:	26ff      	movs	r6, #255	; 0xff
   26b9e:	469a      	mov	sl, r3
   26ba0:	e7da      	b.n	26b58 <__aeabi_fmul+0x30>
   26ba2:	4641      	mov	r1, r8
   26ba4:	2a02      	cmp	r2, #2
   26ba6:	d028      	beq.n	26bfa <__aeabi_fmul+0xd2>
   26ba8:	2a03      	cmp	r2, #3
   26baa:	d100      	bne.n	26bae <__aeabi_fmul+0x86>
   26bac:	e0ce      	b.n	26d4c <__aeabi_fmul+0x224>
   26bae:	2a01      	cmp	r2, #1
   26bb0:	d000      	beq.n	26bb4 <__aeabi_fmul+0x8c>
   26bb2:	e0ac      	b.n	26d0e <__aeabi_fmul+0x1e6>
   26bb4:	4011      	ands	r1, r2
   26bb6:	2000      	movs	r0, #0
   26bb8:	2200      	movs	r2, #0
   26bba:	b2cc      	uxtb	r4, r1
   26bbc:	0240      	lsls	r0, r0, #9
   26bbe:	05d2      	lsls	r2, r2, #23
   26bc0:	0a40      	lsrs	r0, r0, #9
   26bc2:	07e4      	lsls	r4, r4, #31
   26bc4:	4310      	orrs	r0, r2
   26bc6:	4320      	orrs	r0, r4
   26bc8:	bc3c      	pop	{r2, r3, r4, r5}
   26bca:	4690      	mov	r8, r2
   26bcc:	4699      	mov	r9, r3
   26bce:	46a2      	mov	sl, r4
   26bd0:	46ab      	mov	fp, r5
   26bd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   26bd4:	2f00      	cmp	r7, #0
   26bd6:	d115      	bne.n	26c04 <__aeabi_fmul+0xdc>
   26bd8:	2304      	movs	r3, #4
   26bda:	4699      	mov	r9, r3
   26bdc:	3b03      	subs	r3, #3
   26bde:	2600      	movs	r6, #0
   26be0:	469a      	mov	sl, r3
   26be2:	e7b9      	b.n	26b58 <__aeabi_fmul+0x30>
   26be4:	20ff      	movs	r0, #255	; 0xff
   26be6:	2202      	movs	r2, #2
   26be8:	2d00      	cmp	r5, #0
   26bea:	d0c5      	beq.n	26b78 <__aeabi_fmul+0x50>
   26bec:	2203      	movs	r2, #3
   26bee:	e7c3      	b.n	26b78 <__aeabi_fmul+0x50>
   26bf0:	2d00      	cmp	r5, #0
   26bf2:	d119      	bne.n	26c28 <__aeabi_fmul+0x100>
   26bf4:	2000      	movs	r0, #0
   26bf6:	2201      	movs	r2, #1
   26bf8:	e7be      	b.n	26b78 <__aeabi_fmul+0x50>
   26bfa:	2401      	movs	r4, #1
   26bfc:	22ff      	movs	r2, #255	; 0xff
   26bfe:	400c      	ands	r4, r1
   26c00:	2000      	movs	r0, #0
   26c02:	e7db      	b.n	26bbc <__aeabi_fmul+0x94>
   26c04:	0038      	movs	r0, r7
   26c06:	f001 feef 	bl	289e8 <__clzsi2>
   26c0a:	2676      	movs	r6, #118	; 0x76
   26c0c:	1f43      	subs	r3, r0, #5
   26c0e:	409f      	lsls	r7, r3
   26c10:	2300      	movs	r3, #0
   26c12:	4276      	negs	r6, r6
   26c14:	1a36      	subs	r6, r6, r0
   26c16:	4699      	mov	r9, r3
   26c18:	469a      	mov	sl, r3
   26c1a:	e79d      	b.n	26b58 <__aeabi_fmul+0x30>
   26c1c:	230c      	movs	r3, #12
   26c1e:	4699      	mov	r9, r3
   26c20:	3b09      	subs	r3, #9
   26c22:	26ff      	movs	r6, #255	; 0xff
   26c24:	469a      	mov	sl, r3
   26c26:	e797      	b.n	26b58 <__aeabi_fmul+0x30>
   26c28:	0028      	movs	r0, r5
   26c2a:	f001 fedd 	bl	289e8 <__clzsi2>
   26c2e:	1f43      	subs	r3, r0, #5
   26c30:	409d      	lsls	r5, r3
   26c32:	2376      	movs	r3, #118	; 0x76
   26c34:	425b      	negs	r3, r3
   26c36:	1a18      	subs	r0, r3, r0
   26c38:	2200      	movs	r2, #0
   26c3a:	e79d      	b.n	26b78 <__aeabi_fmul+0x50>
   26c3c:	2080      	movs	r0, #128	; 0x80
   26c3e:	2400      	movs	r4, #0
   26c40:	03c0      	lsls	r0, r0, #15
   26c42:	22ff      	movs	r2, #255	; 0xff
   26c44:	e7ba      	b.n	26bbc <__aeabi_fmul+0x94>
   26c46:	003d      	movs	r5, r7
   26c48:	4652      	mov	r2, sl
   26c4a:	e7ab      	b.n	26ba4 <__aeabi_fmul+0x7c>
   26c4c:	003d      	movs	r5, r7
   26c4e:	0021      	movs	r1, r4
   26c50:	4652      	mov	r2, sl
   26c52:	e7a7      	b.n	26ba4 <__aeabi_fmul+0x7c>
   26c54:	0c3b      	lsrs	r3, r7, #16
   26c56:	469c      	mov	ip, r3
   26c58:	042a      	lsls	r2, r5, #16
   26c5a:	0c12      	lsrs	r2, r2, #16
   26c5c:	0c2b      	lsrs	r3, r5, #16
   26c5e:	0014      	movs	r4, r2
   26c60:	4660      	mov	r0, ip
   26c62:	4665      	mov	r5, ip
   26c64:	043f      	lsls	r7, r7, #16
   26c66:	0c3f      	lsrs	r7, r7, #16
   26c68:	437c      	muls	r4, r7
   26c6a:	4342      	muls	r2, r0
   26c6c:	435d      	muls	r5, r3
   26c6e:	437b      	muls	r3, r7
   26c70:	0c27      	lsrs	r7, r4, #16
   26c72:	189b      	adds	r3, r3, r2
   26c74:	18ff      	adds	r7, r7, r3
   26c76:	42ba      	cmp	r2, r7
   26c78:	d903      	bls.n	26c82 <__aeabi_fmul+0x15a>
   26c7a:	2380      	movs	r3, #128	; 0x80
   26c7c:	025b      	lsls	r3, r3, #9
   26c7e:	469c      	mov	ip, r3
   26c80:	4465      	add	r5, ip
   26c82:	0424      	lsls	r4, r4, #16
   26c84:	043a      	lsls	r2, r7, #16
   26c86:	0c24      	lsrs	r4, r4, #16
   26c88:	1912      	adds	r2, r2, r4
   26c8a:	0193      	lsls	r3, r2, #6
   26c8c:	1e5c      	subs	r4, r3, #1
   26c8e:	41a3      	sbcs	r3, r4
   26c90:	0c3f      	lsrs	r7, r7, #16
   26c92:	0e92      	lsrs	r2, r2, #26
   26c94:	197d      	adds	r5, r7, r5
   26c96:	431a      	orrs	r2, r3
   26c98:	01ad      	lsls	r5, r5, #6
   26c9a:	4315      	orrs	r5, r2
   26c9c:	012b      	lsls	r3, r5, #4
   26c9e:	d504      	bpl.n	26caa <__aeabi_fmul+0x182>
   26ca0:	2301      	movs	r3, #1
   26ca2:	465e      	mov	r6, fp
   26ca4:	086a      	lsrs	r2, r5, #1
   26ca6:	401d      	ands	r5, r3
   26ca8:	4315      	orrs	r5, r2
   26caa:	0032      	movs	r2, r6
   26cac:	327f      	adds	r2, #127	; 0x7f
   26cae:	2a00      	cmp	r2, #0
   26cb0:	dd25      	ble.n	26cfe <__aeabi_fmul+0x1d6>
   26cb2:	076b      	lsls	r3, r5, #29
   26cb4:	d004      	beq.n	26cc0 <__aeabi_fmul+0x198>
   26cb6:	230f      	movs	r3, #15
   26cb8:	402b      	ands	r3, r5
   26cba:	2b04      	cmp	r3, #4
   26cbc:	d000      	beq.n	26cc0 <__aeabi_fmul+0x198>
   26cbe:	3504      	adds	r5, #4
   26cc0:	012b      	lsls	r3, r5, #4
   26cc2:	d503      	bpl.n	26ccc <__aeabi_fmul+0x1a4>
   26cc4:	0032      	movs	r2, r6
   26cc6:	4b27      	ldr	r3, [pc, #156]	; (26d64 <__aeabi_fmul+0x23c>)
   26cc8:	3280      	adds	r2, #128	; 0x80
   26cca:	401d      	ands	r5, r3
   26ccc:	2afe      	cmp	r2, #254	; 0xfe
   26cce:	dc94      	bgt.n	26bfa <__aeabi_fmul+0xd2>
   26cd0:	2401      	movs	r4, #1
   26cd2:	01a8      	lsls	r0, r5, #6
   26cd4:	0a40      	lsrs	r0, r0, #9
   26cd6:	b2d2      	uxtb	r2, r2
   26cd8:	400c      	ands	r4, r1
   26cda:	e76f      	b.n	26bbc <__aeabi_fmul+0x94>
   26cdc:	2080      	movs	r0, #128	; 0x80
   26cde:	03c0      	lsls	r0, r0, #15
   26ce0:	4207      	tst	r7, r0
   26ce2:	d007      	beq.n	26cf4 <__aeabi_fmul+0x1cc>
   26ce4:	4205      	tst	r5, r0
   26ce6:	d105      	bne.n	26cf4 <__aeabi_fmul+0x1cc>
   26ce8:	4328      	orrs	r0, r5
   26cea:	0240      	lsls	r0, r0, #9
   26cec:	0a40      	lsrs	r0, r0, #9
   26cee:	4644      	mov	r4, r8
   26cf0:	22ff      	movs	r2, #255	; 0xff
   26cf2:	e763      	b.n	26bbc <__aeabi_fmul+0x94>
   26cf4:	4338      	orrs	r0, r7
   26cf6:	0240      	lsls	r0, r0, #9
   26cf8:	0a40      	lsrs	r0, r0, #9
   26cfa:	22ff      	movs	r2, #255	; 0xff
   26cfc:	e75e      	b.n	26bbc <__aeabi_fmul+0x94>
   26cfe:	2401      	movs	r4, #1
   26d00:	1aa3      	subs	r3, r4, r2
   26d02:	2b1b      	cmp	r3, #27
   26d04:	dd05      	ble.n	26d12 <__aeabi_fmul+0x1ea>
   26d06:	400c      	ands	r4, r1
   26d08:	2200      	movs	r2, #0
   26d0a:	2000      	movs	r0, #0
   26d0c:	e756      	b.n	26bbc <__aeabi_fmul+0x94>
   26d0e:	465e      	mov	r6, fp
   26d10:	e7cb      	b.n	26caa <__aeabi_fmul+0x182>
   26d12:	002a      	movs	r2, r5
   26d14:	2020      	movs	r0, #32
   26d16:	40da      	lsrs	r2, r3
   26d18:	1ac3      	subs	r3, r0, r3
   26d1a:	409d      	lsls	r5, r3
   26d1c:	002b      	movs	r3, r5
   26d1e:	1e5d      	subs	r5, r3, #1
   26d20:	41ab      	sbcs	r3, r5
   26d22:	4313      	orrs	r3, r2
   26d24:	075a      	lsls	r2, r3, #29
   26d26:	d004      	beq.n	26d32 <__aeabi_fmul+0x20a>
   26d28:	220f      	movs	r2, #15
   26d2a:	401a      	ands	r2, r3
   26d2c:	2a04      	cmp	r2, #4
   26d2e:	d000      	beq.n	26d32 <__aeabi_fmul+0x20a>
   26d30:	3304      	adds	r3, #4
   26d32:	015a      	lsls	r2, r3, #5
   26d34:	d504      	bpl.n	26d40 <__aeabi_fmul+0x218>
   26d36:	2401      	movs	r4, #1
   26d38:	2201      	movs	r2, #1
   26d3a:	400c      	ands	r4, r1
   26d3c:	2000      	movs	r0, #0
   26d3e:	e73d      	b.n	26bbc <__aeabi_fmul+0x94>
   26d40:	2401      	movs	r4, #1
   26d42:	019b      	lsls	r3, r3, #6
   26d44:	0a58      	lsrs	r0, r3, #9
   26d46:	400c      	ands	r4, r1
   26d48:	2200      	movs	r2, #0
   26d4a:	e737      	b.n	26bbc <__aeabi_fmul+0x94>
   26d4c:	2080      	movs	r0, #128	; 0x80
   26d4e:	2401      	movs	r4, #1
   26d50:	03c0      	lsls	r0, r0, #15
   26d52:	4328      	orrs	r0, r5
   26d54:	0240      	lsls	r0, r0, #9
   26d56:	0a40      	lsrs	r0, r0, #9
   26d58:	400c      	ands	r4, r1
   26d5a:	22ff      	movs	r2, #255	; 0xff
   26d5c:	e72e      	b.n	26bbc <__aeabi_fmul+0x94>
   26d5e:	46c0      	nop			; (mov r8, r8)
   26d60:	0002ab78 	.word	0x0002ab78
   26d64:	f7ffffff 	.word	0xf7ffffff

00026d68 <__aeabi_ui2f>:
   26d68:	b510      	push	{r4, lr}
   26d6a:	1e04      	subs	r4, r0, #0
   26d6c:	d027      	beq.n	26dbe <__aeabi_ui2f+0x56>
   26d6e:	f001 fe3b 	bl	289e8 <__clzsi2>
   26d72:	239e      	movs	r3, #158	; 0x9e
   26d74:	1a1b      	subs	r3, r3, r0
   26d76:	2b96      	cmp	r3, #150	; 0x96
   26d78:	dc0a      	bgt.n	26d90 <__aeabi_ui2f+0x28>
   26d7a:	2296      	movs	r2, #150	; 0x96
   26d7c:	1ad2      	subs	r2, r2, r3
   26d7e:	4094      	lsls	r4, r2
   26d80:	0264      	lsls	r4, r4, #9
   26d82:	0a64      	lsrs	r4, r4, #9
   26d84:	b2db      	uxtb	r3, r3
   26d86:	0264      	lsls	r4, r4, #9
   26d88:	05db      	lsls	r3, r3, #23
   26d8a:	0a60      	lsrs	r0, r4, #9
   26d8c:	4318      	orrs	r0, r3
   26d8e:	bd10      	pop	{r4, pc}
   26d90:	2b99      	cmp	r3, #153	; 0x99
   26d92:	dc17      	bgt.n	26dc4 <__aeabi_ui2f+0x5c>
   26d94:	2299      	movs	r2, #153	; 0x99
   26d96:	1ad2      	subs	r2, r2, r3
   26d98:	2a00      	cmp	r2, #0
   26d9a:	dd27      	ble.n	26dec <__aeabi_ui2f+0x84>
   26d9c:	4094      	lsls	r4, r2
   26d9e:	0022      	movs	r2, r4
   26da0:	4c13      	ldr	r4, [pc, #76]	; (26df0 <__aeabi_ui2f+0x88>)
   26da2:	4014      	ands	r4, r2
   26da4:	0751      	lsls	r1, r2, #29
   26da6:	d004      	beq.n	26db2 <__aeabi_ui2f+0x4a>
   26da8:	210f      	movs	r1, #15
   26daa:	400a      	ands	r2, r1
   26dac:	2a04      	cmp	r2, #4
   26dae:	d000      	beq.n	26db2 <__aeabi_ui2f+0x4a>
   26db0:	3404      	adds	r4, #4
   26db2:	0162      	lsls	r2, r4, #5
   26db4:	d412      	bmi.n	26ddc <__aeabi_ui2f+0x74>
   26db6:	01a4      	lsls	r4, r4, #6
   26db8:	0a64      	lsrs	r4, r4, #9
   26dba:	b2db      	uxtb	r3, r3
   26dbc:	e7e3      	b.n	26d86 <__aeabi_ui2f+0x1e>
   26dbe:	2300      	movs	r3, #0
   26dc0:	2400      	movs	r4, #0
   26dc2:	e7e0      	b.n	26d86 <__aeabi_ui2f+0x1e>
   26dc4:	22b9      	movs	r2, #185	; 0xb9
   26dc6:	0021      	movs	r1, r4
   26dc8:	1ad2      	subs	r2, r2, r3
   26dca:	4091      	lsls	r1, r2
   26dcc:	000a      	movs	r2, r1
   26dce:	1e51      	subs	r1, r2, #1
   26dd0:	418a      	sbcs	r2, r1
   26dd2:	2105      	movs	r1, #5
   26dd4:	1a09      	subs	r1, r1, r0
   26dd6:	40cc      	lsrs	r4, r1
   26dd8:	4314      	orrs	r4, r2
   26dda:	e7db      	b.n	26d94 <__aeabi_ui2f+0x2c>
   26ddc:	4b04      	ldr	r3, [pc, #16]	; (26df0 <__aeabi_ui2f+0x88>)
   26dde:	401c      	ands	r4, r3
   26de0:	239f      	movs	r3, #159	; 0x9f
   26de2:	01a4      	lsls	r4, r4, #6
   26de4:	1a1b      	subs	r3, r3, r0
   26de6:	0a64      	lsrs	r4, r4, #9
   26de8:	b2db      	uxtb	r3, r3
   26dea:	e7cc      	b.n	26d86 <__aeabi_ui2f+0x1e>
   26dec:	0022      	movs	r2, r4
   26dee:	e7d7      	b.n	26da0 <__aeabi_ui2f+0x38>
   26df0:	fbffffff 	.word	0xfbffffff

00026df4 <__aeabi_dadd>:
   26df4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   26df6:	4645      	mov	r5, r8
   26df8:	46de      	mov	lr, fp
   26dfa:	4657      	mov	r7, sl
   26dfc:	464e      	mov	r6, r9
   26dfe:	030c      	lsls	r4, r1, #12
   26e00:	b5e0      	push	{r5, r6, r7, lr}
   26e02:	004e      	lsls	r6, r1, #1
   26e04:	0fc9      	lsrs	r1, r1, #31
   26e06:	4688      	mov	r8, r1
   26e08:	000d      	movs	r5, r1
   26e0a:	0a61      	lsrs	r1, r4, #9
   26e0c:	0f44      	lsrs	r4, r0, #29
   26e0e:	430c      	orrs	r4, r1
   26e10:	00c7      	lsls	r7, r0, #3
   26e12:	0319      	lsls	r1, r3, #12
   26e14:	0058      	lsls	r0, r3, #1
   26e16:	0fdb      	lsrs	r3, r3, #31
   26e18:	469b      	mov	fp, r3
   26e1a:	0a4b      	lsrs	r3, r1, #9
   26e1c:	0f51      	lsrs	r1, r2, #29
   26e1e:	430b      	orrs	r3, r1
   26e20:	0d76      	lsrs	r6, r6, #21
   26e22:	0d40      	lsrs	r0, r0, #21
   26e24:	0019      	movs	r1, r3
   26e26:	00d2      	lsls	r2, r2, #3
   26e28:	45d8      	cmp	r8, fp
   26e2a:	d100      	bne.n	26e2e <__aeabi_dadd+0x3a>
   26e2c:	e0ae      	b.n	26f8c <__aeabi_dadd+0x198>
   26e2e:	1a35      	subs	r5, r6, r0
   26e30:	2d00      	cmp	r5, #0
   26e32:	dc00      	bgt.n	26e36 <__aeabi_dadd+0x42>
   26e34:	e0f6      	b.n	27024 <__aeabi_dadd+0x230>
   26e36:	2800      	cmp	r0, #0
   26e38:	d10f      	bne.n	26e5a <__aeabi_dadd+0x66>
   26e3a:	4313      	orrs	r3, r2
   26e3c:	d100      	bne.n	26e40 <__aeabi_dadd+0x4c>
   26e3e:	e0db      	b.n	26ff8 <__aeabi_dadd+0x204>
   26e40:	1e6b      	subs	r3, r5, #1
   26e42:	2b00      	cmp	r3, #0
   26e44:	d000      	beq.n	26e48 <__aeabi_dadd+0x54>
   26e46:	e137      	b.n	270b8 <__aeabi_dadd+0x2c4>
   26e48:	1aba      	subs	r2, r7, r2
   26e4a:	4297      	cmp	r7, r2
   26e4c:	41bf      	sbcs	r7, r7
   26e4e:	1a64      	subs	r4, r4, r1
   26e50:	427f      	negs	r7, r7
   26e52:	1be4      	subs	r4, r4, r7
   26e54:	2601      	movs	r6, #1
   26e56:	0017      	movs	r7, r2
   26e58:	e024      	b.n	26ea4 <__aeabi_dadd+0xb0>
   26e5a:	4bc6      	ldr	r3, [pc, #792]	; (27174 <__aeabi_dadd+0x380>)
   26e5c:	429e      	cmp	r6, r3
   26e5e:	d04d      	beq.n	26efc <__aeabi_dadd+0x108>
   26e60:	2380      	movs	r3, #128	; 0x80
   26e62:	041b      	lsls	r3, r3, #16
   26e64:	4319      	orrs	r1, r3
   26e66:	2d38      	cmp	r5, #56	; 0x38
   26e68:	dd00      	ble.n	26e6c <__aeabi_dadd+0x78>
   26e6a:	e107      	b.n	2707c <__aeabi_dadd+0x288>
   26e6c:	2d1f      	cmp	r5, #31
   26e6e:	dd00      	ble.n	26e72 <__aeabi_dadd+0x7e>
   26e70:	e138      	b.n	270e4 <__aeabi_dadd+0x2f0>
   26e72:	2020      	movs	r0, #32
   26e74:	1b43      	subs	r3, r0, r5
   26e76:	469a      	mov	sl, r3
   26e78:	000b      	movs	r3, r1
   26e7a:	4650      	mov	r0, sl
   26e7c:	4083      	lsls	r3, r0
   26e7e:	4699      	mov	r9, r3
   26e80:	0013      	movs	r3, r2
   26e82:	4648      	mov	r0, r9
   26e84:	40eb      	lsrs	r3, r5
   26e86:	4318      	orrs	r0, r3
   26e88:	0003      	movs	r3, r0
   26e8a:	4650      	mov	r0, sl
   26e8c:	4082      	lsls	r2, r0
   26e8e:	1e50      	subs	r0, r2, #1
   26e90:	4182      	sbcs	r2, r0
   26e92:	40e9      	lsrs	r1, r5
   26e94:	431a      	orrs	r2, r3
   26e96:	1aba      	subs	r2, r7, r2
   26e98:	1a61      	subs	r1, r4, r1
   26e9a:	4297      	cmp	r7, r2
   26e9c:	41a4      	sbcs	r4, r4
   26e9e:	0017      	movs	r7, r2
   26ea0:	4264      	negs	r4, r4
   26ea2:	1b0c      	subs	r4, r1, r4
   26ea4:	0223      	lsls	r3, r4, #8
   26ea6:	d562      	bpl.n	26f6e <__aeabi_dadd+0x17a>
   26ea8:	0264      	lsls	r4, r4, #9
   26eaa:	0a65      	lsrs	r5, r4, #9
   26eac:	2d00      	cmp	r5, #0
   26eae:	d100      	bne.n	26eb2 <__aeabi_dadd+0xbe>
   26eb0:	e0df      	b.n	27072 <__aeabi_dadd+0x27e>
   26eb2:	0028      	movs	r0, r5
   26eb4:	f001 fd98 	bl	289e8 <__clzsi2>
   26eb8:	0003      	movs	r3, r0
   26eba:	3b08      	subs	r3, #8
   26ebc:	2b1f      	cmp	r3, #31
   26ebe:	dd00      	ble.n	26ec2 <__aeabi_dadd+0xce>
   26ec0:	e0d2      	b.n	27068 <__aeabi_dadd+0x274>
   26ec2:	2220      	movs	r2, #32
   26ec4:	003c      	movs	r4, r7
   26ec6:	1ad2      	subs	r2, r2, r3
   26ec8:	409d      	lsls	r5, r3
   26eca:	40d4      	lsrs	r4, r2
   26ecc:	409f      	lsls	r7, r3
   26ece:	4325      	orrs	r5, r4
   26ed0:	429e      	cmp	r6, r3
   26ed2:	dd00      	ble.n	26ed6 <__aeabi_dadd+0xe2>
   26ed4:	e0c4      	b.n	27060 <__aeabi_dadd+0x26c>
   26ed6:	1b9e      	subs	r6, r3, r6
   26ed8:	1c73      	adds	r3, r6, #1
   26eda:	2b1f      	cmp	r3, #31
   26edc:	dd00      	ble.n	26ee0 <__aeabi_dadd+0xec>
   26ede:	e0f1      	b.n	270c4 <__aeabi_dadd+0x2d0>
   26ee0:	2220      	movs	r2, #32
   26ee2:	0038      	movs	r0, r7
   26ee4:	0029      	movs	r1, r5
   26ee6:	1ad2      	subs	r2, r2, r3
   26ee8:	40d8      	lsrs	r0, r3
   26eea:	4091      	lsls	r1, r2
   26eec:	4097      	lsls	r7, r2
   26eee:	002c      	movs	r4, r5
   26ef0:	4301      	orrs	r1, r0
   26ef2:	1e78      	subs	r0, r7, #1
   26ef4:	4187      	sbcs	r7, r0
   26ef6:	40dc      	lsrs	r4, r3
   26ef8:	2600      	movs	r6, #0
   26efa:	430f      	orrs	r7, r1
   26efc:	077b      	lsls	r3, r7, #29
   26efe:	d009      	beq.n	26f14 <__aeabi_dadd+0x120>
   26f00:	230f      	movs	r3, #15
   26f02:	403b      	ands	r3, r7
   26f04:	2b04      	cmp	r3, #4
   26f06:	d005      	beq.n	26f14 <__aeabi_dadd+0x120>
   26f08:	1d3b      	adds	r3, r7, #4
   26f0a:	42bb      	cmp	r3, r7
   26f0c:	41bf      	sbcs	r7, r7
   26f0e:	427f      	negs	r7, r7
   26f10:	19e4      	adds	r4, r4, r7
   26f12:	001f      	movs	r7, r3
   26f14:	0223      	lsls	r3, r4, #8
   26f16:	d52c      	bpl.n	26f72 <__aeabi_dadd+0x17e>
   26f18:	4b96      	ldr	r3, [pc, #600]	; (27174 <__aeabi_dadd+0x380>)
   26f1a:	3601      	adds	r6, #1
   26f1c:	429e      	cmp	r6, r3
   26f1e:	d100      	bne.n	26f22 <__aeabi_dadd+0x12e>
   26f20:	e09a      	b.n	27058 <__aeabi_dadd+0x264>
   26f22:	4645      	mov	r5, r8
   26f24:	4b94      	ldr	r3, [pc, #592]	; (27178 <__aeabi_dadd+0x384>)
   26f26:	08ff      	lsrs	r7, r7, #3
   26f28:	401c      	ands	r4, r3
   26f2a:	0760      	lsls	r0, r4, #29
   26f2c:	0576      	lsls	r6, r6, #21
   26f2e:	0264      	lsls	r4, r4, #9
   26f30:	4307      	orrs	r7, r0
   26f32:	0b24      	lsrs	r4, r4, #12
   26f34:	0d76      	lsrs	r6, r6, #21
   26f36:	2100      	movs	r1, #0
   26f38:	0324      	lsls	r4, r4, #12
   26f3a:	0b23      	lsrs	r3, r4, #12
   26f3c:	0d0c      	lsrs	r4, r1, #20
   26f3e:	4a8f      	ldr	r2, [pc, #572]	; (2717c <__aeabi_dadd+0x388>)
   26f40:	0524      	lsls	r4, r4, #20
   26f42:	431c      	orrs	r4, r3
   26f44:	4014      	ands	r4, r2
   26f46:	0533      	lsls	r3, r6, #20
   26f48:	4323      	orrs	r3, r4
   26f4a:	005b      	lsls	r3, r3, #1
   26f4c:	07ed      	lsls	r5, r5, #31
   26f4e:	085b      	lsrs	r3, r3, #1
   26f50:	432b      	orrs	r3, r5
   26f52:	0038      	movs	r0, r7
   26f54:	0019      	movs	r1, r3
   26f56:	bc3c      	pop	{r2, r3, r4, r5}
   26f58:	4690      	mov	r8, r2
   26f5a:	4699      	mov	r9, r3
   26f5c:	46a2      	mov	sl, r4
   26f5e:	46ab      	mov	fp, r5
   26f60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   26f62:	4664      	mov	r4, ip
   26f64:	4304      	orrs	r4, r0
   26f66:	d100      	bne.n	26f6a <__aeabi_dadd+0x176>
   26f68:	e211      	b.n	2738e <__aeabi_dadd+0x59a>
   26f6a:	0004      	movs	r4, r0
   26f6c:	4667      	mov	r7, ip
   26f6e:	077b      	lsls	r3, r7, #29
   26f70:	d1c6      	bne.n	26f00 <__aeabi_dadd+0x10c>
   26f72:	4645      	mov	r5, r8
   26f74:	0760      	lsls	r0, r4, #29
   26f76:	08ff      	lsrs	r7, r7, #3
   26f78:	4307      	orrs	r7, r0
   26f7a:	08e4      	lsrs	r4, r4, #3
   26f7c:	4b7d      	ldr	r3, [pc, #500]	; (27174 <__aeabi_dadd+0x380>)
   26f7e:	429e      	cmp	r6, r3
   26f80:	d030      	beq.n	26fe4 <__aeabi_dadd+0x1f0>
   26f82:	0324      	lsls	r4, r4, #12
   26f84:	0576      	lsls	r6, r6, #21
   26f86:	0b24      	lsrs	r4, r4, #12
   26f88:	0d76      	lsrs	r6, r6, #21
   26f8a:	e7d4      	b.n	26f36 <__aeabi_dadd+0x142>
   26f8c:	1a33      	subs	r3, r6, r0
   26f8e:	469a      	mov	sl, r3
   26f90:	2b00      	cmp	r3, #0
   26f92:	dd78      	ble.n	27086 <__aeabi_dadd+0x292>
   26f94:	2800      	cmp	r0, #0
   26f96:	d031      	beq.n	26ffc <__aeabi_dadd+0x208>
   26f98:	4876      	ldr	r0, [pc, #472]	; (27174 <__aeabi_dadd+0x380>)
   26f9a:	4286      	cmp	r6, r0
   26f9c:	d0ae      	beq.n	26efc <__aeabi_dadd+0x108>
   26f9e:	2080      	movs	r0, #128	; 0x80
   26fa0:	0400      	lsls	r0, r0, #16
   26fa2:	4301      	orrs	r1, r0
   26fa4:	4653      	mov	r3, sl
   26fa6:	2b38      	cmp	r3, #56	; 0x38
   26fa8:	dc00      	bgt.n	26fac <__aeabi_dadd+0x1b8>
   26faa:	e0e9      	b.n	27180 <__aeabi_dadd+0x38c>
   26fac:	430a      	orrs	r2, r1
   26fae:	1e51      	subs	r1, r2, #1
   26fb0:	418a      	sbcs	r2, r1
   26fb2:	2100      	movs	r1, #0
   26fb4:	19d2      	adds	r2, r2, r7
   26fb6:	42ba      	cmp	r2, r7
   26fb8:	41bf      	sbcs	r7, r7
   26fba:	1909      	adds	r1, r1, r4
   26fbc:	427c      	negs	r4, r7
   26fbe:	0017      	movs	r7, r2
   26fc0:	190c      	adds	r4, r1, r4
   26fc2:	0223      	lsls	r3, r4, #8
   26fc4:	d5d3      	bpl.n	26f6e <__aeabi_dadd+0x17a>
   26fc6:	4b6b      	ldr	r3, [pc, #428]	; (27174 <__aeabi_dadd+0x380>)
   26fc8:	3601      	adds	r6, #1
   26fca:	429e      	cmp	r6, r3
   26fcc:	d100      	bne.n	26fd0 <__aeabi_dadd+0x1dc>
   26fce:	e13a      	b.n	27246 <__aeabi_dadd+0x452>
   26fd0:	2001      	movs	r0, #1
   26fd2:	4b69      	ldr	r3, [pc, #420]	; (27178 <__aeabi_dadd+0x384>)
   26fd4:	401c      	ands	r4, r3
   26fd6:	087b      	lsrs	r3, r7, #1
   26fd8:	4007      	ands	r7, r0
   26fda:	431f      	orrs	r7, r3
   26fdc:	07e0      	lsls	r0, r4, #31
   26fde:	4307      	orrs	r7, r0
   26fe0:	0864      	lsrs	r4, r4, #1
   26fe2:	e78b      	b.n	26efc <__aeabi_dadd+0x108>
   26fe4:	0023      	movs	r3, r4
   26fe6:	433b      	orrs	r3, r7
   26fe8:	d100      	bne.n	26fec <__aeabi_dadd+0x1f8>
   26fea:	e1cb      	b.n	27384 <__aeabi_dadd+0x590>
   26fec:	2280      	movs	r2, #128	; 0x80
   26fee:	0312      	lsls	r2, r2, #12
   26ff0:	4314      	orrs	r4, r2
   26ff2:	0324      	lsls	r4, r4, #12
   26ff4:	0b24      	lsrs	r4, r4, #12
   26ff6:	e79e      	b.n	26f36 <__aeabi_dadd+0x142>
   26ff8:	002e      	movs	r6, r5
   26ffa:	e77f      	b.n	26efc <__aeabi_dadd+0x108>
   26ffc:	0008      	movs	r0, r1
   26ffe:	4310      	orrs	r0, r2
   27000:	d100      	bne.n	27004 <__aeabi_dadd+0x210>
   27002:	e0b4      	b.n	2716e <__aeabi_dadd+0x37a>
   27004:	1e58      	subs	r0, r3, #1
   27006:	2800      	cmp	r0, #0
   27008:	d000      	beq.n	2700c <__aeabi_dadd+0x218>
   2700a:	e0de      	b.n	271ca <__aeabi_dadd+0x3d6>
   2700c:	18ba      	adds	r2, r7, r2
   2700e:	42ba      	cmp	r2, r7
   27010:	419b      	sbcs	r3, r3
   27012:	1864      	adds	r4, r4, r1
   27014:	425b      	negs	r3, r3
   27016:	18e4      	adds	r4, r4, r3
   27018:	0017      	movs	r7, r2
   2701a:	2601      	movs	r6, #1
   2701c:	0223      	lsls	r3, r4, #8
   2701e:	d5a6      	bpl.n	26f6e <__aeabi_dadd+0x17a>
   27020:	2602      	movs	r6, #2
   27022:	e7d5      	b.n	26fd0 <__aeabi_dadd+0x1dc>
   27024:	2d00      	cmp	r5, #0
   27026:	d16e      	bne.n	27106 <__aeabi_dadd+0x312>
   27028:	1c70      	adds	r0, r6, #1
   2702a:	0540      	lsls	r0, r0, #21
   2702c:	0d40      	lsrs	r0, r0, #21
   2702e:	2801      	cmp	r0, #1
   27030:	dc00      	bgt.n	27034 <__aeabi_dadd+0x240>
   27032:	e0f9      	b.n	27228 <__aeabi_dadd+0x434>
   27034:	1ab8      	subs	r0, r7, r2
   27036:	4684      	mov	ip, r0
   27038:	4287      	cmp	r7, r0
   2703a:	4180      	sbcs	r0, r0
   2703c:	1ae5      	subs	r5, r4, r3
   2703e:	4240      	negs	r0, r0
   27040:	1a2d      	subs	r5, r5, r0
   27042:	0228      	lsls	r0, r5, #8
   27044:	d400      	bmi.n	27048 <__aeabi_dadd+0x254>
   27046:	e089      	b.n	2715c <__aeabi_dadd+0x368>
   27048:	1bd7      	subs	r7, r2, r7
   2704a:	42ba      	cmp	r2, r7
   2704c:	4192      	sbcs	r2, r2
   2704e:	1b1c      	subs	r4, r3, r4
   27050:	4252      	negs	r2, r2
   27052:	1aa5      	subs	r5, r4, r2
   27054:	46d8      	mov	r8, fp
   27056:	e729      	b.n	26eac <__aeabi_dadd+0xb8>
   27058:	4645      	mov	r5, r8
   2705a:	2400      	movs	r4, #0
   2705c:	2700      	movs	r7, #0
   2705e:	e76a      	b.n	26f36 <__aeabi_dadd+0x142>
   27060:	4c45      	ldr	r4, [pc, #276]	; (27178 <__aeabi_dadd+0x384>)
   27062:	1af6      	subs	r6, r6, r3
   27064:	402c      	ands	r4, r5
   27066:	e749      	b.n	26efc <__aeabi_dadd+0x108>
   27068:	003d      	movs	r5, r7
   2706a:	3828      	subs	r0, #40	; 0x28
   2706c:	4085      	lsls	r5, r0
   2706e:	2700      	movs	r7, #0
   27070:	e72e      	b.n	26ed0 <__aeabi_dadd+0xdc>
   27072:	0038      	movs	r0, r7
   27074:	f001 fcb8 	bl	289e8 <__clzsi2>
   27078:	3020      	adds	r0, #32
   2707a:	e71d      	b.n	26eb8 <__aeabi_dadd+0xc4>
   2707c:	430a      	orrs	r2, r1
   2707e:	1e51      	subs	r1, r2, #1
   27080:	418a      	sbcs	r2, r1
   27082:	2100      	movs	r1, #0
   27084:	e707      	b.n	26e96 <__aeabi_dadd+0xa2>
   27086:	2b00      	cmp	r3, #0
   27088:	d000      	beq.n	2708c <__aeabi_dadd+0x298>
   2708a:	e0f3      	b.n	27274 <__aeabi_dadd+0x480>
   2708c:	1c70      	adds	r0, r6, #1
   2708e:	0543      	lsls	r3, r0, #21
   27090:	0d5b      	lsrs	r3, r3, #21
   27092:	2b01      	cmp	r3, #1
   27094:	dc00      	bgt.n	27098 <__aeabi_dadd+0x2a4>
   27096:	e0ad      	b.n	271f4 <__aeabi_dadd+0x400>
   27098:	4b36      	ldr	r3, [pc, #216]	; (27174 <__aeabi_dadd+0x380>)
   2709a:	4298      	cmp	r0, r3
   2709c:	d100      	bne.n	270a0 <__aeabi_dadd+0x2ac>
   2709e:	e0d1      	b.n	27244 <__aeabi_dadd+0x450>
   270a0:	18ba      	adds	r2, r7, r2
   270a2:	42ba      	cmp	r2, r7
   270a4:	41bf      	sbcs	r7, r7
   270a6:	1864      	adds	r4, r4, r1
   270a8:	427f      	negs	r7, r7
   270aa:	19e4      	adds	r4, r4, r7
   270ac:	07e7      	lsls	r7, r4, #31
   270ae:	0852      	lsrs	r2, r2, #1
   270b0:	4317      	orrs	r7, r2
   270b2:	0864      	lsrs	r4, r4, #1
   270b4:	0006      	movs	r6, r0
   270b6:	e721      	b.n	26efc <__aeabi_dadd+0x108>
   270b8:	482e      	ldr	r0, [pc, #184]	; (27174 <__aeabi_dadd+0x380>)
   270ba:	4285      	cmp	r5, r0
   270bc:	d100      	bne.n	270c0 <__aeabi_dadd+0x2cc>
   270be:	e093      	b.n	271e8 <__aeabi_dadd+0x3f4>
   270c0:	001d      	movs	r5, r3
   270c2:	e6d0      	b.n	26e66 <__aeabi_dadd+0x72>
   270c4:	0029      	movs	r1, r5
   270c6:	3e1f      	subs	r6, #31
   270c8:	40f1      	lsrs	r1, r6
   270ca:	2b20      	cmp	r3, #32
   270cc:	d100      	bne.n	270d0 <__aeabi_dadd+0x2dc>
   270ce:	e08d      	b.n	271ec <__aeabi_dadd+0x3f8>
   270d0:	2240      	movs	r2, #64	; 0x40
   270d2:	1ad3      	subs	r3, r2, r3
   270d4:	409d      	lsls	r5, r3
   270d6:	432f      	orrs	r7, r5
   270d8:	1e7d      	subs	r5, r7, #1
   270da:	41af      	sbcs	r7, r5
   270dc:	2400      	movs	r4, #0
   270de:	430f      	orrs	r7, r1
   270e0:	2600      	movs	r6, #0
   270e2:	e744      	b.n	26f6e <__aeabi_dadd+0x17a>
   270e4:	002b      	movs	r3, r5
   270e6:	0008      	movs	r0, r1
   270e8:	3b20      	subs	r3, #32
   270ea:	40d8      	lsrs	r0, r3
   270ec:	0003      	movs	r3, r0
   270ee:	2d20      	cmp	r5, #32
   270f0:	d100      	bne.n	270f4 <__aeabi_dadd+0x300>
   270f2:	e07d      	b.n	271f0 <__aeabi_dadd+0x3fc>
   270f4:	2040      	movs	r0, #64	; 0x40
   270f6:	1b45      	subs	r5, r0, r5
   270f8:	40a9      	lsls	r1, r5
   270fa:	430a      	orrs	r2, r1
   270fc:	1e51      	subs	r1, r2, #1
   270fe:	418a      	sbcs	r2, r1
   27100:	2100      	movs	r1, #0
   27102:	431a      	orrs	r2, r3
   27104:	e6c7      	b.n	26e96 <__aeabi_dadd+0xa2>
   27106:	2e00      	cmp	r6, #0
   27108:	d050      	beq.n	271ac <__aeabi_dadd+0x3b8>
   2710a:	4e1a      	ldr	r6, [pc, #104]	; (27174 <__aeabi_dadd+0x380>)
   2710c:	42b0      	cmp	r0, r6
   2710e:	d057      	beq.n	271c0 <__aeabi_dadd+0x3cc>
   27110:	2680      	movs	r6, #128	; 0x80
   27112:	426b      	negs	r3, r5
   27114:	4699      	mov	r9, r3
   27116:	0436      	lsls	r6, r6, #16
   27118:	4334      	orrs	r4, r6
   2711a:	464b      	mov	r3, r9
   2711c:	2b38      	cmp	r3, #56	; 0x38
   2711e:	dd00      	ble.n	27122 <__aeabi_dadd+0x32e>
   27120:	e0d6      	b.n	272d0 <__aeabi_dadd+0x4dc>
   27122:	2b1f      	cmp	r3, #31
   27124:	dd00      	ble.n	27128 <__aeabi_dadd+0x334>
   27126:	e135      	b.n	27394 <__aeabi_dadd+0x5a0>
   27128:	2620      	movs	r6, #32
   2712a:	1af5      	subs	r5, r6, r3
   2712c:	0026      	movs	r6, r4
   2712e:	40ae      	lsls	r6, r5
   27130:	46b2      	mov	sl, r6
   27132:	003e      	movs	r6, r7
   27134:	40de      	lsrs	r6, r3
   27136:	46ac      	mov	ip, r5
   27138:	0035      	movs	r5, r6
   2713a:	4656      	mov	r6, sl
   2713c:	432e      	orrs	r6, r5
   2713e:	4665      	mov	r5, ip
   27140:	40af      	lsls	r7, r5
   27142:	1e7d      	subs	r5, r7, #1
   27144:	41af      	sbcs	r7, r5
   27146:	40dc      	lsrs	r4, r3
   27148:	4337      	orrs	r7, r6
   2714a:	1bd7      	subs	r7, r2, r7
   2714c:	42ba      	cmp	r2, r7
   2714e:	4192      	sbcs	r2, r2
   27150:	1b0c      	subs	r4, r1, r4
   27152:	4252      	negs	r2, r2
   27154:	1aa4      	subs	r4, r4, r2
   27156:	0006      	movs	r6, r0
   27158:	46d8      	mov	r8, fp
   2715a:	e6a3      	b.n	26ea4 <__aeabi_dadd+0xb0>
   2715c:	4664      	mov	r4, ip
   2715e:	4667      	mov	r7, ip
   27160:	432c      	orrs	r4, r5
   27162:	d000      	beq.n	27166 <__aeabi_dadd+0x372>
   27164:	e6a2      	b.n	26eac <__aeabi_dadd+0xb8>
   27166:	2500      	movs	r5, #0
   27168:	2600      	movs	r6, #0
   2716a:	2700      	movs	r7, #0
   2716c:	e706      	b.n	26f7c <__aeabi_dadd+0x188>
   2716e:	001e      	movs	r6, r3
   27170:	e6c4      	b.n	26efc <__aeabi_dadd+0x108>
   27172:	46c0      	nop			; (mov r8, r8)
   27174:	000007ff 	.word	0x000007ff
   27178:	ff7fffff 	.word	0xff7fffff
   2717c:	800fffff 	.word	0x800fffff
   27180:	2b1f      	cmp	r3, #31
   27182:	dc63      	bgt.n	2724c <__aeabi_dadd+0x458>
   27184:	2020      	movs	r0, #32
   27186:	1ac3      	subs	r3, r0, r3
   27188:	0008      	movs	r0, r1
   2718a:	4098      	lsls	r0, r3
   2718c:	469c      	mov	ip, r3
   2718e:	4683      	mov	fp, r0
   27190:	4653      	mov	r3, sl
   27192:	0010      	movs	r0, r2
   27194:	40d8      	lsrs	r0, r3
   27196:	0003      	movs	r3, r0
   27198:	4658      	mov	r0, fp
   2719a:	4318      	orrs	r0, r3
   2719c:	4663      	mov	r3, ip
   2719e:	409a      	lsls	r2, r3
   271a0:	1e53      	subs	r3, r2, #1
   271a2:	419a      	sbcs	r2, r3
   271a4:	4653      	mov	r3, sl
   271a6:	4302      	orrs	r2, r0
   271a8:	40d9      	lsrs	r1, r3
   271aa:	e703      	b.n	26fb4 <__aeabi_dadd+0x1c0>
   271ac:	0026      	movs	r6, r4
   271ae:	433e      	orrs	r6, r7
   271b0:	d006      	beq.n	271c0 <__aeabi_dadd+0x3cc>
   271b2:	43eb      	mvns	r3, r5
   271b4:	4699      	mov	r9, r3
   271b6:	2b00      	cmp	r3, #0
   271b8:	d0c7      	beq.n	2714a <__aeabi_dadd+0x356>
   271ba:	4e94      	ldr	r6, [pc, #592]	; (2740c <__aeabi_dadd+0x618>)
   271bc:	42b0      	cmp	r0, r6
   271be:	d1ac      	bne.n	2711a <__aeabi_dadd+0x326>
   271c0:	000c      	movs	r4, r1
   271c2:	0017      	movs	r7, r2
   271c4:	0006      	movs	r6, r0
   271c6:	46d8      	mov	r8, fp
   271c8:	e698      	b.n	26efc <__aeabi_dadd+0x108>
   271ca:	4b90      	ldr	r3, [pc, #576]	; (2740c <__aeabi_dadd+0x618>)
   271cc:	459a      	cmp	sl, r3
   271ce:	d00b      	beq.n	271e8 <__aeabi_dadd+0x3f4>
   271d0:	4682      	mov	sl, r0
   271d2:	e6e7      	b.n	26fa4 <__aeabi_dadd+0x1b0>
   271d4:	2800      	cmp	r0, #0
   271d6:	d000      	beq.n	271da <__aeabi_dadd+0x3e6>
   271d8:	e09e      	b.n	27318 <__aeabi_dadd+0x524>
   271da:	0018      	movs	r0, r3
   271dc:	4310      	orrs	r0, r2
   271de:	d100      	bne.n	271e2 <__aeabi_dadd+0x3ee>
   271e0:	e0e9      	b.n	273b6 <__aeabi_dadd+0x5c2>
   271e2:	001c      	movs	r4, r3
   271e4:	0017      	movs	r7, r2
   271e6:	46d8      	mov	r8, fp
   271e8:	4e88      	ldr	r6, [pc, #544]	; (2740c <__aeabi_dadd+0x618>)
   271ea:	e687      	b.n	26efc <__aeabi_dadd+0x108>
   271ec:	2500      	movs	r5, #0
   271ee:	e772      	b.n	270d6 <__aeabi_dadd+0x2e2>
   271f0:	2100      	movs	r1, #0
   271f2:	e782      	b.n	270fa <__aeabi_dadd+0x306>
   271f4:	0023      	movs	r3, r4
   271f6:	433b      	orrs	r3, r7
   271f8:	2e00      	cmp	r6, #0
   271fa:	d000      	beq.n	271fe <__aeabi_dadd+0x40a>
   271fc:	e0ab      	b.n	27356 <__aeabi_dadd+0x562>
   271fe:	2b00      	cmp	r3, #0
   27200:	d100      	bne.n	27204 <__aeabi_dadd+0x410>
   27202:	e0e7      	b.n	273d4 <__aeabi_dadd+0x5e0>
   27204:	000b      	movs	r3, r1
   27206:	4313      	orrs	r3, r2
   27208:	d100      	bne.n	2720c <__aeabi_dadd+0x418>
   2720a:	e677      	b.n	26efc <__aeabi_dadd+0x108>
   2720c:	18ba      	adds	r2, r7, r2
   2720e:	42ba      	cmp	r2, r7
   27210:	41bf      	sbcs	r7, r7
   27212:	1864      	adds	r4, r4, r1
   27214:	427f      	negs	r7, r7
   27216:	19e4      	adds	r4, r4, r7
   27218:	0223      	lsls	r3, r4, #8
   2721a:	d400      	bmi.n	2721e <__aeabi_dadd+0x42a>
   2721c:	e0f2      	b.n	27404 <__aeabi_dadd+0x610>
   2721e:	4b7c      	ldr	r3, [pc, #496]	; (27410 <__aeabi_dadd+0x61c>)
   27220:	0017      	movs	r7, r2
   27222:	401c      	ands	r4, r3
   27224:	0006      	movs	r6, r0
   27226:	e669      	b.n	26efc <__aeabi_dadd+0x108>
   27228:	0020      	movs	r0, r4
   2722a:	4338      	orrs	r0, r7
   2722c:	2e00      	cmp	r6, #0
   2722e:	d1d1      	bne.n	271d4 <__aeabi_dadd+0x3e0>
   27230:	2800      	cmp	r0, #0
   27232:	d15b      	bne.n	272ec <__aeabi_dadd+0x4f8>
   27234:	001c      	movs	r4, r3
   27236:	4314      	orrs	r4, r2
   27238:	d100      	bne.n	2723c <__aeabi_dadd+0x448>
   2723a:	e0a8      	b.n	2738e <__aeabi_dadd+0x59a>
   2723c:	001c      	movs	r4, r3
   2723e:	0017      	movs	r7, r2
   27240:	46d8      	mov	r8, fp
   27242:	e65b      	b.n	26efc <__aeabi_dadd+0x108>
   27244:	0006      	movs	r6, r0
   27246:	2400      	movs	r4, #0
   27248:	2700      	movs	r7, #0
   2724a:	e697      	b.n	26f7c <__aeabi_dadd+0x188>
   2724c:	4650      	mov	r0, sl
   2724e:	000b      	movs	r3, r1
   27250:	3820      	subs	r0, #32
   27252:	40c3      	lsrs	r3, r0
   27254:	4699      	mov	r9, r3
   27256:	4653      	mov	r3, sl
   27258:	2b20      	cmp	r3, #32
   2725a:	d100      	bne.n	2725e <__aeabi_dadd+0x46a>
   2725c:	e095      	b.n	2738a <__aeabi_dadd+0x596>
   2725e:	2340      	movs	r3, #64	; 0x40
   27260:	4650      	mov	r0, sl
   27262:	1a1b      	subs	r3, r3, r0
   27264:	4099      	lsls	r1, r3
   27266:	430a      	orrs	r2, r1
   27268:	1e51      	subs	r1, r2, #1
   2726a:	418a      	sbcs	r2, r1
   2726c:	464b      	mov	r3, r9
   2726e:	2100      	movs	r1, #0
   27270:	431a      	orrs	r2, r3
   27272:	e69f      	b.n	26fb4 <__aeabi_dadd+0x1c0>
   27274:	2e00      	cmp	r6, #0
   27276:	d130      	bne.n	272da <__aeabi_dadd+0x4e6>
   27278:	0026      	movs	r6, r4
   2727a:	433e      	orrs	r6, r7
   2727c:	d067      	beq.n	2734e <__aeabi_dadd+0x55a>
   2727e:	43db      	mvns	r3, r3
   27280:	469a      	mov	sl, r3
   27282:	2b00      	cmp	r3, #0
   27284:	d01c      	beq.n	272c0 <__aeabi_dadd+0x4cc>
   27286:	4e61      	ldr	r6, [pc, #388]	; (2740c <__aeabi_dadd+0x618>)
   27288:	42b0      	cmp	r0, r6
   2728a:	d060      	beq.n	2734e <__aeabi_dadd+0x55a>
   2728c:	4653      	mov	r3, sl
   2728e:	2b38      	cmp	r3, #56	; 0x38
   27290:	dd00      	ble.n	27294 <__aeabi_dadd+0x4a0>
   27292:	e096      	b.n	273c2 <__aeabi_dadd+0x5ce>
   27294:	2b1f      	cmp	r3, #31
   27296:	dd00      	ble.n	2729a <__aeabi_dadd+0x4a6>
   27298:	e09f      	b.n	273da <__aeabi_dadd+0x5e6>
   2729a:	2620      	movs	r6, #32
   2729c:	1af3      	subs	r3, r6, r3
   2729e:	0026      	movs	r6, r4
   272a0:	409e      	lsls	r6, r3
   272a2:	469c      	mov	ip, r3
   272a4:	46b3      	mov	fp, r6
   272a6:	4653      	mov	r3, sl
   272a8:	003e      	movs	r6, r7
   272aa:	40de      	lsrs	r6, r3
   272ac:	0033      	movs	r3, r6
   272ae:	465e      	mov	r6, fp
   272b0:	431e      	orrs	r6, r3
   272b2:	4663      	mov	r3, ip
   272b4:	409f      	lsls	r7, r3
   272b6:	1e7b      	subs	r3, r7, #1
   272b8:	419f      	sbcs	r7, r3
   272ba:	4653      	mov	r3, sl
   272bc:	40dc      	lsrs	r4, r3
   272be:	4337      	orrs	r7, r6
   272c0:	18bf      	adds	r7, r7, r2
   272c2:	4297      	cmp	r7, r2
   272c4:	4192      	sbcs	r2, r2
   272c6:	1864      	adds	r4, r4, r1
   272c8:	4252      	negs	r2, r2
   272ca:	18a4      	adds	r4, r4, r2
   272cc:	0006      	movs	r6, r0
   272ce:	e678      	b.n	26fc2 <__aeabi_dadd+0x1ce>
   272d0:	4327      	orrs	r7, r4
   272d2:	1e7c      	subs	r4, r7, #1
   272d4:	41a7      	sbcs	r7, r4
   272d6:	2400      	movs	r4, #0
   272d8:	e737      	b.n	2714a <__aeabi_dadd+0x356>
   272da:	4e4c      	ldr	r6, [pc, #304]	; (2740c <__aeabi_dadd+0x618>)
   272dc:	42b0      	cmp	r0, r6
   272de:	d036      	beq.n	2734e <__aeabi_dadd+0x55a>
   272e0:	2680      	movs	r6, #128	; 0x80
   272e2:	425b      	negs	r3, r3
   272e4:	0436      	lsls	r6, r6, #16
   272e6:	469a      	mov	sl, r3
   272e8:	4334      	orrs	r4, r6
   272ea:	e7cf      	b.n	2728c <__aeabi_dadd+0x498>
   272ec:	0018      	movs	r0, r3
   272ee:	4310      	orrs	r0, r2
   272f0:	d100      	bne.n	272f4 <__aeabi_dadd+0x500>
   272f2:	e603      	b.n	26efc <__aeabi_dadd+0x108>
   272f4:	1ab8      	subs	r0, r7, r2
   272f6:	4684      	mov	ip, r0
   272f8:	4567      	cmp	r7, ip
   272fa:	41ad      	sbcs	r5, r5
   272fc:	1ae0      	subs	r0, r4, r3
   272fe:	426d      	negs	r5, r5
   27300:	1b40      	subs	r0, r0, r5
   27302:	0205      	lsls	r5, r0, #8
   27304:	d400      	bmi.n	27308 <__aeabi_dadd+0x514>
   27306:	e62c      	b.n	26f62 <__aeabi_dadd+0x16e>
   27308:	1bd7      	subs	r7, r2, r7
   2730a:	42ba      	cmp	r2, r7
   2730c:	4192      	sbcs	r2, r2
   2730e:	1b1c      	subs	r4, r3, r4
   27310:	4252      	negs	r2, r2
   27312:	1aa4      	subs	r4, r4, r2
   27314:	46d8      	mov	r8, fp
   27316:	e5f1      	b.n	26efc <__aeabi_dadd+0x108>
   27318:	0018      	movs	r0, r3
   2731a:	4310      	orrs	r0, r2
   2731c:	d100      	bne.n	27320 <__aeabi_dadd+0x52c>
   2731e:	e763      	b.n	271e8 <__aeabi_dadd+0x3f4>
   27320:	08f8      	lsrs	r0, r7, #3
   27322:	0767      	lsls	r7, r4, #29
   27324:	4307      	orrs	r7, r0
   27326:	2080      	movs	r0, #128	; 0x80
   27328:	08e4      	lsrs	r4, r4, #3
   2732a:	0300      	lsls	r0, r0, #12
   2732c:	4204      	tst	r4, r0
   2732e:	d008      	beq.n	27342 <__aeabi_dadd+0x54e>
   27330:	08dd      	lsrs	r5, r3, #3
   27332:	4205      	tst	r5, r0
   27334:	d105      	bne.n	27342 <__aeabi_dadd+0x54e>
   27336:	08d2      	lsrs	r2, r2, #3
   27338:	0759      	lsls	r1, r3, #29
   2733a:	4311      	orrs	r1, r2
   2733c:	000f      	movs	r7, r1
   2733e:	002c      	movs	r4, r5
   27340:	46d8      	mov	r8, fp
   27342:	0f7b      	lsrs	r3, r7, #29
   27344:	00e4      	lsls	r4, r4, #3
   27346:	431c      	orrs	r4, r3
   27348:	00ff      	lsls	r7, r7, #3
   2734a:	4e30      	ldr	r6, [pc, #192]	; (2740c <__aeabi_dadd+0x618>)
   2734c:	e5d6      	b.n	26efc <__aeabi_dadd+0x108>
   2734e:	000c      	movs	r4, r1
   27350:	0017      	movs	r7, r2
   27352:	0006      	movs	r6, r0
   27354:	e5d2      	b.n	26efc <__aeabi_dadd+0x108>
   27356:	2b00      	cmp	r3, #0
   27358:	d038      	beq.n	273cc <__aeabi_dadd+0x5d8>
   2735a:	000b      	movs	r3, r1
   2735c:	4313      	orrs	r3, r2
   2735e:	d100      	bne.n	27362 <__aeabi_dadd+0x56e>
   27360:	e742      	b.n	271e8 <__aeabi_dadd+0x3f4>
   27362:	08f8      	lsrs	r0, r7, #3
   27364:	0767      	lsls	r7, r4, #29
   27366:	4307      	orrs	r7, r0
   27368:	2080      	movs	r0, #128	; 0x80
   2736a:	08e4      	lsrs	r4, r4, #3
   2736c:	0300      	lsls	r0, r0, #12
   2736e:	4204      	tst	r4, r0
   27370:	d0e7      	beq.n	27342 <__aeabi_dadd+0x54e>
   27372:	08cb      	lsrs	r3, r1, #3
   27374:	4203      	tst	r3, r0
   27376:	d1e4      	bne.n	27342 <__aeabi_dadd+0x54e>
   27378:	08d2      	lsrs	r2, r2, #3
   2737a:	0749      	lsls	r1, r1, #29
   2737c:	4311      	orrs	r1, r2
   2737e:	000f      	movs	r7, r1
   27380:	001c      	movs	r4, r3
   27382:	e7de      	b.n	27342 <__aeabi_dadd+0x54e>
   27384:	2700      	movs	r7, #0
   27386:	2400      	movs	r4, #0
   27388:	e5d5      	b.n	26f36 <__aeabi_dadd+0x142>
   2738a:	2100      	movs	r1, #0
   2738c:	e76b      	b.n	27266 <__aeabi_dadd+0x472>
   2738e:	2500      	movs	r5, #0
   27390:	2700      	movs	r7, #0
   27392:	e5f3      	b.n	26f7c <__aeabi_dadd+0x188>
   27394:	464e      	mov	r6, r9
   27396:	0025      	movs	r5, r4
   27398:	3e20      	subs	r6, #32
   2739a:	40f5      	lsrs	r5, r6
   2739c:	464b      	mov	r3, r9
   2739e:	002e      	movs	r6, r5
   273a0:	2b20      	cmp	r3, #32
   273a2:	d02d      	beq.n	27400 <__aeabi_dadd+0x60c>
   273a4:	2540      	movs	r5, #64	; 0x40
   273a6:	1aed      	subs	r5, r5, r3
   273a8:	40ac      	lsls	r4, r5
   273aa:	4327      	orrs	r7, r4
   273ac:	1e7c      	subs	r4, r7, #1
   273ae:	41a7      	sbcs	r7, r4
   273b0:	2400      	movs	r4, #0
   273b2:	4337      	orrs	r7, r6
   273b4:	e6c9      	b.n	2714a <__aeabi_dadd+0x356>
   273b6:	2480      	movs	r4, #128	; 0x80
   273b8:	2500      	movs	r5, #0
   273ba:	0324      	lsls	r4, r4, #12
   273bc:	4e13      	ldr	r6, [pc, #76]	; (2740c <__aeabi_dadd+0x618>)
   273be:	2700      	movs	r7, #0
   273c0:	e5dc      	b.n	26f7c <__aeabi_dadd+0x188>
   273c2:	4327      	orrs	r7, r4
   273c4:	1e7c      	subs	r4, r7, #1
   273c6:	41a7      	sbcs	r7, r4
   273c8:	2400      	movs	r4, #0
   273ca:	e779      	b.n	272c0 <__aeabi_dadd+0x4cc>
   273cc:	000c      	movs	r4, r1
   273ce:	0017      	movs	r7, r2
   273d0:	4e0e      	ldr	r6, [pc, #56]	; (2740c <__aeabi_dadd+0x618>)
   273d2:	e593      	b.n	26efc <__aeabi_dadd+0x108>
   273d4:	000c      	movs	r4, r1
   273d6:	0017      	movs	r7, r2
   273d8:	e590      	b.n	26efc <__aeabi_dadd+0x108>
   273da:	4656      	mov	r6, sl
   273dc:	0023      	movs	r3, r4
   273de:	3e20      	subs	r6, #32
   273e0:	40f3      	lsrs	r3, r6
   273e2:	4699      	mov	r9, r3
   273e4:	4653      	mov	r3, sl
   273e6:	2b20      	cmp	r3, #32
   273e8:	d00e      	beq.n	27408 <__aeabi_dadd+0x614>
   273ea:	2340      	movs	r3, #64	; 0x40
   273ec:	4656      	mov	r6, sl
   273ee:	1b9b      	subs	r3, r3, r6
   273f0:	409c      	lsls	r4, r3
   273f2:	4327      	orrs	r7, r4
   273f4:	1e7c      	subs	r4, r7, #1
   273f6:	41a7      	sbcs	r7, r4
   273f8:	464b      	mov	r3, r9
   273fa:	2400      	movs	r4, #0
   273fc:	431f      	orrs	r7, r3
   273fe:	e75f      	b.n	272c0 <__aeabi_dadd+0x4cc>
   27400:	2400      	movs	r4, #0
   27402:	e7d2      	b.n	273aa <__aeabi_dadd+0x5b6>
   27404:	0017      	movs	r7, r2
   27406:	e5b2      	b.n	26f6e <__aeabi_dadd+0x17a>
   27408:	2400      	movs	r4, #0
   2740a:	e7f2      	b.n	273f2 <__aeabi_dadd+0x5fe>
   2740c:	000007ff 	.word	0x000007ff
   27410:	ff7fffff 	.word	0xff7fffff

00027414 <__aeabi_ddiv>:
   27414:	b5f0      	push	{r4, r5, r6, r7, lr}
   27416:	4657      	mov	r7, sl
   27418:	4645      	mov	r5, r8
   2741a:	46de      	mov	lr, fp
   2741c:	464e      	mov	r6, r9
   2741e:	b5e0      	push	{r5, r6, r7, lr}
   27420:	004c      	lsls	r4, r1, #1
   27422:	030e      	lsls	r6, r1, #12
   27424:	b087      	sub	sp, #28
   27426:	4683      	mov	fp, r0
   27428:	4692      	mov	sl, r2
   2742a:	001d      	movs	r5, r3
   2742c:	4680      	mov	r8, r0
   2742e:	0b36      	lsrs	r6, r6, #12
   27430:	0d64      	lsrs	r4, r4, #21
   27432:	0fcf      	lsrs	r7, r1, #31
   27434:	2c00      	cmp	r4, #0
   27436:	d04f      	beq.n	274d8 <__aeabi_ddiv+0xc4>
   27438:	4b6f      	ldr	r3, [pc, #444]	; (275f8 <__aeabi_ddiv+0x1e4>)
   2743a:	429c      	cmp	r4, r3
   2743c:	d035      	beq.n	274aa <__aeabi_ddiv+0x96>
   2743e:	2380      	movs	r3, #128	; 0x80
   27440:	0f42      	lsrs	r2, r0, #29
   27442:	041b      	lsls	r3, r3, #16
   27444:	00f6      	lsls	r6, r6, #3
   27446:	4313      	orrs	r3, r2
   27448:	4333      	orrs	r3, r6
   2744a:	4699      	mov	r9, r3
   2744c:	00c3      	lsls	r3, r0, #3
   2744e:	4698      	mov	r8, r3
   27450:	4b6a      	ldr	r3, [pc, #424]	; (275fc <__aeabi_ddiv+0x1e8>)
   27452:	2600      	movs	r6, #0
   27454:	469c      	mov	ip, r3
   27456:	2300      	movs	r3, #0
   27458:	4464      	add	r4, ip
   2745a:	9303      	str	r3, [sp, #12]
   2745c:	032b      	lsls	r3, r5, #12
   2745e:	0b1b      	lsrs	r3, r3, #12
   27460:	469b      	mov	fp, r3
   27462:	006b      	lsls	r3, r5, #1
   27464:	0fed      	lsrs	r5, r5, #31
   27466:	4650      	mov	r0, sl
   27468:	0d5b      	lsrs	r3, r3, #21
   2746a:	9501      	str	r5, [sp, #4]
   2746c:	d05e      	beq.n	2752c <__aeabi_ddiv+0x118>
   2746e:	4a62      	ldr	r2, [pc, #392]	; (275f8 <__aeabi_ddiv+0x1e4>)
   27470:	4293      	cmp	r3, r2
   27472:	d053      	beq.n	2751c <__aeabi_ddiv+0x108>
   27474:	465a      	mov	r2, fp
   27476:	00d1      	lsls	r1, r2, #3
   27478:	2280      	movs	r2, #128	; 0x80
   2747a:	0f40      	lsrs	r0, r0, #29
   2747c:	0412      	lsls	r2, r2, #16
   2747e:	4302      	orrs	r2, r0
   27480:	430a      	orrs	r2, r1
   27482:	4693      	mov	fp, r2
   27484:	4652      	mov	r2, sl
   27486:	00d1      	lsls	r1, r2, #3
   27488:	4a5c      	ldr	r2, [pc, #368]	; (275fc <__aeabi_ddiv+0x1e8>)
   2748a:	4694      	mov	ip, r2
   2748c:	2200      	movs	r2, #0
   2748e:	4463      	add	r3, ip
   27490:	0038      	movs	r0, r7
   27492:	4068      	eors	r0, r5
   27494:	4684      	mov	ip, r0
   27496:	9002      	str	r0, [sp, #8]
   27498:	1ae4      	subs	r4, r4, r3
   2749a:	4316      	orrs	r6, r2
   2749c:	2e0f      	cmp	r6, #15
   2749e:	d900      	bls.n	274a2 <__aeabi_ddiv+0x8e>
   274a0:	e0b4      	b.n	2760c <__aeabi_ddiv+0x1f8>
   274a2:	4b57      	ldr	r3, [pc, #348]	; (27600 <__aeabi_ddiv+0x1ec>)
   274a4:	00b6      	lsls	r6, r6, #2
   274a6:	599b      	ldr	r3, [r3, r6]
   274a8:	469f      	mov	pc, r3
   274aa:	0003      	movs	r3, r0
   274ac:	4333      	orrs	r3, r6
   274ae:	4699      	mov	r9, r3
   274b0:	d16c      	bne.n	2758c <__aeabi_ddiv+0x178>
   274b2:	2300      	movs	r3, #0
   274b4:	4698      	mov	r8, r3
   274b6:	3302      	adds	r3, #2
   274b8:	2608      	movs	r6, #8
   274ba:	9303      	str	r3, [sp, #12]
   274bc:	e7ce      	b.n	2745c <__aeabi_ddiv+0x48>
   274be:	46cb      	mov	fp, r9
   274c0:	4641      	mov	r1, r8
   274c2:	9a03      	ldr	r2, [sp, #12]
   274c4:	9701      	str	r7, [sp, #4]
   274c6:	2a02      	cmp	r2, #2
   274c8:	d165      	bne.n	27596 <__aeabi_ddiv+0x182>
   274ca:	9b01      	ldr	r3, [sp, #4]
   274cc:	4c4a      	ldr	r4, [pc, #296]	; (275f8 <__aeabi_ddiv+0x1e4>)
   274ce:	469c      	mov	ip, r3
   274d0:	2300      	movs	r3, #0
   274d2:	2200      	movs	r2, #0
   274d4:	4698      	mov	r8, r3
   274d6:	e06b      	b.n	275b0 <__aeabi_ddiv+0x19c>
   274d8:	0003      	movs	r3, r0
   274da:	4333      	orrs	r3, r6
   274dc:	4699      	mov	r9, r3
   274de:	d04e      	beq.n	2757e <__aeabi_ddiv+0x16a>
   274e0:	2e00      	cmp	r6, #0
   274e2:	d100      	bne.n	274e6 <__aeabi_ddiv+0xd2>
   274e4:	e1bc      	b.n	27860 <__aeabi_ddiv+0x44c>
   274e6:	0030      	movs	r0, r6
   274e8:	f001 fa7e 	bl	289e8 <__clzsi2>
   274ec:	0003      	movs	r3, r0
   274ee:	3b0b      	subs	r3, #11
   274f0:	2b1c      	cmp	r3, #28
   274f2:	dd00      	ble.n	274f6 <__aeabi_ddiv+0xe2>
   274f4:	e1ac      	b.n	27850 <__aeabi_ddiv+0x43c>
   274f6:	221d      	movs	r2, #29
   274f8:	1ad3      	subs	r3, r2, r3
   274fa:	465a      	mov	r2, fp
   274fc:	0001      	movs	r1, r0
   274fe:	40da      	lsrs	r2, r3
   27500:	3908      	subs	r1, #8
   27502:	408e      	lsls	r6, r1
   27504:	0013      	movs	r3, r2
   27506:	4333      	orrs	r3, r6
   27508:	4699      	mov	r9, r3
   2750a:	465b      	mov	r3, fp
   2750c:	408b      	lsls	r3, r1
   2750e:	4698      	mov	r8, r3
   27510:	2300      	movs	r3, #0
   27512:	4c3c      	ldr	r4, [pc, #240]	; (27604 <__aeabi_ddiv+0x1f0>)
   27514:	2600      	movs	r6, #0
   27516:	1a24      	subs	r4, r4, r0
   27518:	9303      	str	r3, [sp, #12]
   2751a:	e79f      	b.n	2745c <__aeabi_ddiv+0x48>
   2751c:	4651      	mov	r1, sl
   2751e:	465a      	mov	r2, fp
   27520:	4311      	orrs	r1, r2
   27522:	d129      	bne.n	27578 <__aeabi_ddiv+0x164>
   27524:	2200      	movs	r2, #0
   27526:	4693      	mov	fp, r2
   27528:	3202      	adds	r2, #2
   2752a:	e7b1      	b.n	27490 <__aeabi_ddiv+0x7c>
   2752c:	4659      	mov	r1, fp
   2752e:	4301      	orrs	r1, r0
   27530:	d01e      	beq.n	27570 <__aeabi_ddiv+0x15c>
   27532:	465b      	mov	r3, fp
   27534:	2b00      	cmp	r3, #0
   27536:	d100      	bne.n	2753a <__aeabi_ddiv+0x126>
   27538:	e19e      	b.n	27878 <__aeabi_ddiv+0x464>
   2753a:	4658      	mov	r0, fp
   2753c:	f001 fa54 	bl	289e8 <__clzsi2>
   27540:	0003      	movs	r3, r0
   27542:	3b0b      	subs	r3, #11
   27544:	2b1c      	cmp	r3, #28
   27546:	dd00      	ble.n	2754a <__aeabi_ddiv+0x136>
   27548:	e18f      	b.n	2786a <__aeabi_ddiv+0x456>
   2754a:	0002      	movs	r2, r0
   2754c:	4659      	mov	r1, fp
   2754e:	3a08      	subs	r2, #8
   27550:	4091      	lsls	r1, r2
   27552:	468b      	mov	fp, r1
   27554:	211d      	movs	r1, #29
   27556:	1acb      	subs	r3, r1, r3
   27558:	4651      	mov	r1, sl
   2755a:	40d9      	lsrs	r1, r3
   2755c:	000b      	movs	r3, r1
   2755e:	4659      	mov	r1, fp
   27560:	430b      	orrs	r3, r1
   27562:	4651      	mov	r1, sl
   27564:	469b      	mov	fp, r3
   27566:	4091      	lsls	r1, r2
   27568:	4b26      	ldr	r3, [pc, #152]	; (27604 <__aeabi_ddiv+0x1f0>)
   2756a:	2200      	movs	r2, #0
   2756c:	1a1b      	subs	r3, r3, r0
   2756e:	e78f      	b.n	27490 <__aeabi_ddiv+0x7c>
   27570:	2300      	movs	r3, #0
   27572:	2201      	movs	r2, #1
   27574:	469b      	mov	fp, r3
   27576:	e78b      	b.n	27490 <__aeabi_ddiv+0x7c>
   27578:	4651      	mov	r1, sl
   2757a:	2203      	movs	r2, #3
   2757c:	e788      	b.n	27490 <__aeabi_ddiv+0x7c>
   2757e:	2300      	movs	r3, #0
   27580:	4698      	mov	r8, r3
   27582:	3301      	adds	r3, #1
   27584:	2604      	movs	r6, #4
   27586:	2400      	movs	r4, #0
   27588:	9303      	str	r3, [sp, #12]
   2758a:	e767      	b.n	2745c <__aeabi_ddiv+0x48>
   2758c:	2303      	movs	r3, #3
   2758e:	46b1      	mov	r9, r6
   27590:	9303      	str	r3, [sp, #12]
   27592:	260c      	movs	r6, #12
   27594:	e762      	b.n	2745c <__aeabi_ddiv+0x48>
   27596:	2a03      	cmp	r2, #3
   27598:	d100      	bne.n	2759c <__aeabi_ddiv+0x188>
   2759a:	e25c      	b.n	27a56 <__aeabi_ddiv+0x642>
   2759c:	9b01      	ldr	r3, [sp, #4]
   2759e:	2a01      	cmp	r2, #1
   275a0:	d000      	beq.n	275a4 <__aeabi_ddiv+0x190>
   275a2:	e1e4      	b.n	2796e <__aeabi_ddiv+0x55a>
   275a4:	4013      	ands	r3, r2
   275a6:	469c      	mov	ip, r3
   275a8:	2300      	movs	r3, #0
   275aa:	2400      	movs	r4, #0
   275ac:	2200      	movs	r2, #0
   275ae:	4698      	mov	r8, r3
   275b0:	2100      	movs	r1, #0
   275b2:	0312      	lsls	r2, r2, #12
   275b4:	0b13      	lsrs	r3, r2, #12
   275b6:	0d0a      	lsrs	r2, r1, #20
   275b8:	0512      	lsls	r2, r2, #20
   275ba:	431a      	orrs	r2, r3
   275bc:	0523      	lsls	r3, r4, #20
   275be:	4c12      	ldr	r4, [pc, #72]	; (27608 <__aeabi_ddiv+0x1f4>)
   275c0:	4640      	mov	r0, r8
   275c2:	4022      	ands	r2, r4
   275c4:	4313      	orrs	r3, r2
   275c6:	4662      	mov	r2, ip
   275c8:	005b      	lsls	r3, r3, #1
   275ca:	07d2      	lsls	r2, r2, #31
   275cc:	085b      	lsrs	r3, r3, #1
   275ce:	4313      	orrs	r3, r2
   275d0:	0019      	movs	r1, r3
   275d2:	b007      	add	sp, #28
   275d4:	bc3c      	pop	{r2, r3, r4, r5}
   275d6:	4690      	mov	r8, r2
   275d8:	4699      	mov	r9, r3
   275da:	46a2      	mov	sl, r4
   275dc:	46ab      	mov	fp, r5
   275de:	bdf0      	pop	{r4, r5, r6, r7, pc}
   275e0:	2300      	movs	r3, #0
   275e2:	2280      	movs	r2, #128	; 0x80
   275e4:	469c      	mov	ip, r3
   275e6:	0312      	lsls	r2, r2, #12
   275e8:	4698      	mov	r8, r3
   275ea:	4c03      	ldr	r4, [pc, #12]	; (275f8 <__aeabi_ddiv+0x1e4>)
   275ec:	e7e0      	b.n	275b0 <__aeabi_ddiv+0x19c>
   275ee:	2300      	movs	r3, #0
   275f0:	4c01      	ldr	r4, [pc, #4]	; (275f8 <__aeabi_ddiv+0x1e4>)
   275f2:	2200      	movs	r2, #0
   275f4:	4698      	mov	r8, r3
   275f6:	e7db      	b.n	275b0 <__aeabi_ddiv+0x19c>
   275f8:	000007ff 	.word	0x000007ff
   275fc:	fffffc01 	.word	0xfffffc01
   27600:	0002abb8 	.word	0x0002abb8
   27604:	fffffc0d 	.word	0xfffffc0d
   27608:	800fffff 	.word	0x800fffff
   2760c:	45d9      	cmp	r9, fp
   2760e:	d900      	bls.n	27612 <__aeabi_ddiv+0x1fe>
   27610:	e139      	b.n	27886 <__aeabi_ddiv+0x472>
   27612:	d100      	bne.n	27616 <__aeabi_ddiv+0x202>
   27614:	e134      	b.n	27880 <__aeabi_ddiv+0x46c>
   27616:	2300      	movs	r3, #0
   27618:	4646      	mov	r6, r8
   2761a:	464d      	mov	r5, r9
   2761c:	469a      	mov	sl, r3
   2761e:	3c01      	subs	r4, #1
   27620:	465b      	mov	r3, fp
   27622:	0e0a      	lsrs	r2, r1, #24
   27624:	021b      	lsls	r3, r3, #8
   27626:	431a      	orrs	r2, r3
   27628:	020b      	lsls	r3, r1, #8
   2762a:	0c17      	lsrs	r7, r2, #16
   2762c:	9303      	str	r3, [sp, #12]
   2762e:	0413      	lsls	r3, r2, #16
   27630:	0c1b      	lsrs	r3, r3, #16
   27632:	0039      	movs	r1, r7
   27634:	0028      	movs	r0, r5
   27636:	4690      	mov	r8, r2
   27638:	9301      	str	r3, [sp, #4]
   2763a:	f7fe fe51 	bl	262e0 <__udivsi3>
   2763e:	0002      	movs	r2, r0
   27640:	9b01      	ldr	r3, [sp, #4]
   27642:	4683      	mov	fp, r0
   27644:	435a      	muls	r2, r3
   27646:	0028      	movs	r0, r5
   27648:	0039      	movs	r1, r7
   2764a:	4691      	mov	r9, r2
   2764c:	f7fe fece 	bl	263ec <__aeabi_uidivmod>
   27650:	0c35      	lsrs	r5, r6, #16
   27652:	0409      	lsls	r1, r1, #16
   27654:	430d      	orrs	r5, r1
   27656:	45a9      	cmp	r9, r5
   27658:	d90d      	bls.n	27676 <__aeabi_ddiv+0x262>
   2765a:	465b      	mov	r3, fp
   2765c:	4445      	add	r5, r8
   2765e:	3b01      	subs	r3, #1
   27660:	45a8      	cmp	r8, r5
   27662:	d900      	bls.n	27666 <__aeabi_ddiv+0x252>
   27664:	e13a      	b.n	278dc <__aeabi_ddiv+0x4c8>
   27666:	45a9      	cmp	r9, r5
   27668:	d800      	bhi.n	2766c <__aeabi_ddiv+0x258>
   2766a:	e137      	b.n	278dc <__aeabi_ddiv+0x4c8>
   2766c:	2302      	movs	r3, #2
   2766e:	425b      	negs	r3, r3
   27670:	469c      	mov	ip, r3
   27672:	4445      	add	r5, r8
   27674:	44e3      	add	fp, ip
   27676:	464b      	mov	r3, r9
   27678:	1aeb      	subs	r3, r5, r3
   2767a:	0039      	movs	r1, r7
   2767c:	0018      	movs	r0, r3
   2767e:	9304      	str	r3, [sp, #16]
   27680:	f7fe fe2e 	bl	262e0 <__udivsi3>
   27684:	9b01      	ldr	r3, [sp, #4]
   27686:	0005      	movs	r5, r0
   27688:	4343      	muls	r3, r0
   2768a:	0039      	movs	r1, r7
   2768c:	9804      	ldr	r0, [sp, #16]
   2768e:	4699      	mov	r9, r3
   27690:	f7fe feac 	bl	263ec <__aeabi_uidivmod>
   27694:	0433      	lsls	r3, r6, #16
   27696:	0409      	lsls	r1, r1, #16
   27698:	0c1b      	lsrs	r3, r3, #16
   2769a:	430b      	orrs	r3, r1
   2769c:	4599      	cmp	r9, r3
   2769e:	d909      	bls.n	276b4 <__aeabi_ddiv+0x2a0>
   276a0:	4443      	add	r3, r8
   276a2:	1e6a      	subs	r2, r5, #1
   276a4:	4598      	cmp	r8, r3
   276a6:	d900      	bls.n	276aa <__aeabi_ddiv+0x296>
   276a8:	e11a      	b.n	278e0 <__aeabi_ddiv+0x4cc>
   276aa:	4599      	cmp	r9, r3
   276ac:	d800      	bhi.n	276b0 <__aeabi_ddiv+0x29c>
   276ae:	e117      	b.n	278e0 <__aeabi_ddiv+0x4cc>
   276b0:	3d02      	subs	r5, #2
   276b2:	4443      	add	r3, r8
   276b4:	464a      	mov	r2, r9
   276b6:	1a9b      	subs	r3, r3, r2
   276b8:	465a      	mov	r2, fp
   276ba:	0412      	lsls	r2, r2, #16
   276bc:	432a      	orrs	r2, r5
   276be:	9903      	ldr	r1, [sp, #12]
   276c0:	4693      	mov	fp, r2
   276c2:	0c10      	lsrs	r0, r2, #16
   276c4:	0c0a      	lsrs	r2, r1, #16
   276c6:	4691      	mov	r9, r2
   276c8:	0409      	lsls	r1, r1, #16
   276ca:	465a      	mov	r2, fp
   276cc:	0c09      	lsrs	r1, r1, #16
   276ce:	464e      	mov	r6, r9
   276d0:	000d      	movs	r5, r1
   276d2:	0412      	lsls	r2, r2, #16
   276d4:	0c12      	lsrs	r2, r2, #16
   276d6:	4345      	muls	r5, r0
   276d8:	9105      	str	r1, [sp, #20]
   276da:	4351      	muls	r1, r2
   276dc:	4372      	muls	r2, r6
   276de:	4370      	muls	r0, r6
   276e0:	1952      	adds	r2, r2, r5
   276e2:	0c0e      	lsrs	r6, r1, #16
   276e4:	18b2      	adds	r2, r6, r2
   276e6:	4295      	cmp	r5, r2
   276e8:	d903      	bls.n	276f2 <__aeabi_ddiv+0x2de>
   276ea:	2580      	movs	r5, #128	; 0x80
   276ec:	026d      	lsls	r5, r5, #9
   276ee:	46ac      	mov	ip, r5
   276f0:	4460      	add	r0, ip
   276f2:	0c15      	lsrs	r5, r2, #16
   276f4:	0409      	lsls	r1, r1, #16
   276f6:	0412      	lsls	r2, r2, #16
   276f8:	0c09      	lsrs	r1, r1, #16
   276fa:	1828      	adds	r0, r5, r0
   276fc:	1852      	adds	r2, r2, r1
   276fe:	4283      	cmp	r3, r0
   27700:	d200      	bcs.n	27704 <__aeabi_ddiv+0x2f0>
   27702:	e0ce      	b.n	278a2 <__aeabi_ddiv+0x48e>
   27704:	d100      	bne.n	27708 <__aeabi_ddiv+0x2f4>
   27706:	e0c8      	b.n	2789a <__aeabi_ddiv+0x486>
   27708:	1a1d      	subs	r5, r3, r0
   2770a:	4653      	mov	r3, sl
   2770c:	1a9e      	subs	r6, r3, r2
   2770e:	45b2      	cmp	sl, r6
   27710:	4192      	sbcs	r2, r2
   27712:	4252      	negs	r2, r2
   27714:	1aab      	subs	r3, r5, r2
   27716:	469a      	mov	sl, r3
   27718:	4598      	cmp	r8, r3
   2771a:	d100      	bne.n	2771e <__aeabi_ddiv+0x30a>
   2771c:	e117      	b.n	2794e <__aeabi_ddiv+0x53a>
   2771e:	0039      	movs	r1, r7
   27720:	0018      	movs	r0, r3
   27722:	f7fe fddd 	bl	262e0 <__udivsi3>
   27726:	9b01      	ldr	r3, [sp, #4]
   27728:	0005      	movs	r5, r0
   2772a:	4343      	muls	r3, r0
   2772c:	0039      	movs	r1, r7
   2772e:	4650      	mov	r0, sl
   27730:	9304      	str	r3, [sp, #16]
   27732:	f7fe fe5b 	bl	263ec <__aeabi_uidivmod>
   27736:	9804      	ldr	r0, [sp, #16]
   27738:	040b      	lsls	r3, r1, #16
   2773a:	0c31      	lsrs	r1, r6, #16
   2773c:	4319      	orrs	r1, r3
   2773e:	4288      	cmp	r0, r1
   27740:	d909      	bls.n	27756 <__aeabi_ddiv+0x342>
   27742:	4441      	add	r1, r8
   27744:	1e6b      	subs	r3, r5, #1
   27746:	4588      	cmp	r8, r1
   27748:	d900      	bls.n	2774c <__aeabi_ddiv+0x338>
   2774a:	e107      	b.n	2795c <__aeabi_ddiv+0x548>
   2774c:	4288      	cmp	r0, r1
   2774e:	d800      	bhi.n	27752 <__aeabi_ddiv+0x33e>
   27750:	e104      	b.n	2795c <__aeabi_ddiv+0x548>
   27752:	3d02      	subs	r5, #2
   27754:	4441      	add	r1, r8
   27756:	9b04      	ldr	r3, [sp, #16]
   27758:	1acb      	subs	r3, r1, r3
   2775a:	0018      	movs	r0, r3
   2775c:	0039      	movs	r1, r7
   2775e:	9304      	str	r3, [sp, #16]
   27760:	f7fe fdbe 	bl	262e0 <__udivsi3>
   27764:	9b01      	ldr	r3, [sp, #4]
   27766:	4682      	mov	sl, r0
   27768:	4343      	muls	r3, r0
   2776a:	0039      	movs	r1, r7
   2776c:	9804      	ldr	r0, [sp, #16]
   2776e:	9301      	str	r3, [sp, #4]
   27770:	f7fe fe3c 	bl	263ec <__aeabi_uidivmod>
   27774:	9801      	ldr	r0, [sp, #4]
   27776:	040b      	lsls	r3, r1, #16
   27778:	0431      	lsls	r1, r6, #16
   2777a:	0c09      	lsrs	r1, r1, #16
   2777c:	4319      	orrs	r1, r3
   2777e:	4288      	cmp	r0, r1
   27780:	d90d      	bls.n	2779e <__aeabi_ddiv+0x38a>
   27782:	4653      	mov	r3, sl
   27784:	4441      	add	r1, r8
   27786:	3b01      	subs	r3, #1
   27788:	4588      	cmp	r8, r1
   2778a:	d900      	bls.n	2778e <__aeabi_ddiv+0x37a>
   2778c:	e0e8      	b.n	27960 <__aeabi_ddiv+0x54c>
   2778e:	4288      	cmp	r0, r1
   27790:	d800      	bhi.n	27794 <__aeabi_ddiv+0x380>
   27792:	e0e5      	b.n	27960 <__aeabi_ddiv+0x54c>
   27794:	2302      	movs	r3, #2
   27796:	425b      	negs	r3, r3
   27798:	469c      	mov	ip, r3
   2779a:	4441      	add	r1, r8
   2779c:	44e2      	add	sl, ip
   2779e:	9b01      	ldr	r3, [sp, #4]
   277a0:	042d      	lsls	r5, r5, #16
   277a2:	1ace      	subs	r6, r1, r3
   277a4:	4651      	mov	r1, sl
   277a6:	4329      	orrs	r1, r5
   277a8:	9d05      	ldr	r5, [sp, #20]
   277aa:	464f      	mov	r7, r9
   277ac:	002a      	movs	r2, r5
   277ae:	040b      	lsls	r3, r1, #16
   277b0:	0c08      	lsrs	r0, r1, #16
   277b2:	0c1b      	lsrs	r3, r3, #16
   277b4:	435a      	muls	r2, r3
   277b6:	4345      	muls	r5, r0
   277b8:	437b      	muls	r3, r7
   277ba:	4378      	muls	r0, r7
   277bc:	195b      	adds	r3, r3, r5
   277be:	0c17      	lsrs	r7, r2, #16
   277c0:	18fb      	adds	r3, r7, r3
   277c2:	429d      	cmp	r5, r3
   277c4:	d903      	bls.n	277ce <__aeabi_ddiv+0x3ba>
   277c6:	2580      	movs	r5, #128	; 0x80
   277c8:	026d      	lsls	r5, r5, #9
   277ca:	46ac      	mov	ip, r5
   277cc:	4460      	add	r0, ip
   277ce:	0c1d      	lsrs	r5, r3, #16
   277d0:	0412      	lsls	r2, r2, #16
   277d2:	041b      	lsls	r3, r3, #16
   277d4:	0c12      	lsrs	r2, r2, #16
   277d6:	1828      	adds	r0, r5, r0
   277d8:	189b      	adds	r3, r3, r2
   277da:	4286      	cmp	r6, r0
   277dc:	d200      	bcs.n	277e0 <__aeabi_ddiv+0x3cc>
   277de:	e093      	b.n	27908 <__aeabi_ddiv+0x4f4>
   277e0:	d100      	bne.n	277e4 <__aeabi_ddiv+0x3d0>
   277e2:	e08e      	b.n	27902 <__aeabi_ddiv+0x4ee>
   277e4:	2301      	movs	r3, #1
   277e6:	4319      	orrs	r1, r3
   277e8:	4ba0      	ldr	r3, [pc, #640]	; (27a6c <__aeabi_ddiv+0x658>)
   277ea:	18e3      	adds	r3, r4, r3
   277ec:	2b00      	cmp	r3, #0
   277ee:	dc00      	bgt.n	277f2 <__aeabi_ddiv+0x3de>
   277f0:	e099      	b.n	27926 <__aeabi_ddiv+0x512>
   277f2:	074a      	lsls	r2, r1, #29
   277f4:	d000      	beq.n	277f8 <__aeabi_ddiv+0x3e4>
   277f6:	e09e      	b.n	27936 <__aeabi_ddiv+0x522>
   277f8:	465a      	mov	r2, fp
   277fa:	01d2      	lsls	r2, r2, #7
   277fc:	d506      	bpl.n	2780c <__aeabi_ddiv+0x3f8>
   277fe:	465a      	mov	r2, fp
   27800:	4b9b      	ldr	r3, [pc, #620]	; (27a70 <__aeabi_ddiv+0x65c>)
   27802:	401a      	ands	r2, r3
   27804:	2380      	movs	r3, #128	; 0x80
   27806:	4693      	mov	fp, r2
   27808:	00db      	lsls	r3, r3, #3
   2780a:	18e3      	adds	r3, r4, r3
   2780c:	4a99      	ldr	r2, [pc, #612]	; (27a74 <__aeabi_ddiv+0x660>)
   2780e:	4293      	cmp	r3, r2
   27810:	dd68      	ble.n	278e4 <__aeabi_ddiv+0x4d0>
   27812:	2301      	movs	r3, #1
   27814:	9a02      	ldr	r2, [sp, #8]
   27816:	4c98      	ldr	r4, [pc, #608]	; (27a78 <__aeabi_ddiv+0x664>)
   27818:	401a      	ands	r2, r3
   2781a:	2300      	movs	r3, #0
   2781c:	4694      	mov	ip, r2
   2781e:	4698      	mov	r8, r3
   27820:	2200      	movs	r2, #0
   27822:	e6c5      	b.n	275b0 <__aeabi_ddiv+0x19c>
   27824:	2280      	movs	r2, #128	; 0x80
   27826:	464b      	mov	r3, r9
   27828:	0312      	lsls	r2, r2, #12
   2782a:	4213      	tst	r3, r2
   2782c:	d00a      	beq.n	27844 <__aeabi_ddiv+0x430>
   2782e:	465b      	mov	r3, fp
   27830:	4213      	tst	r3, r2
   27832:	d106      	bne.n	27842 <__aeabi_ddiv+0x42e>
   27834:	431a      	orrs	r2, r3
   27836:	0312      	lsls	r2, r2, #12
   27838:	0b12      	lsrs	r2, r2, #12
   2783a:	46ac      	mov	ip, r5
   2783c:	4688      	mov	r8, r1
   2783e:	4c8e      	ldr	r4, [pc, #568]	; (27a78 <__aeabi_ddiv+0x664>)
   27840:	e6b6      	b.n	275b0 <__aeabi_ddiv+0x19c>
   27842:	464b      	mov	r3, r9
   27844:	431a      	orrs	r2, r3
   27846:	0312      	lsls	r2, r2, #12
   27848:	0b12      	lsrs	r2, r2, #12
   2784a:	46bc      	mov	ip, r7
   2784c:	4c8a      	ldr	r4, [pc, #552]	; (27a78 <__aeabi_ddiv+0x664>)
   2784e:	e6af      	b.n	275b0 <__aeabi_ddiv+0x19c>
   27850:	0003      	movs	r3, r0
   27852:	465a      	mov	r2, fp
   27854:	3b28      	subs	r3, #40	; 0x28
   27856:	409a      	lsls	r2, r3
   27858:	2300      	movs	r3, #0
   2785a:	4691      	mov	r9, r2
   2785c:	4698      	mov	r8, r3
   2785e:	e657      	b.n	27510 <__aeabi_ddiv+0xfc>
   27860:	4658      	mov	r0, fp
   27862:	f001 f8c1 	bl	289e8 <__clzsi2>
   27866:	3020      	adds	r0, #32
   27868:	e640      	b.n	274ec <__aeabi_ddiv+0xd8>
   2786a:	0003      	movs	r3, r0
   2786c:	4652      	mov	r2, sl
   2786e:	3b28      	subs	r3, #40	; 0x28
   27870:	409a      	lsls	r2, r3
   27872:	2100      	movs	r1, #0
   27874:	4693      	mov	fp, r2
   27876:	e677      	b.n	27568 <__aeabi_ddiv+0x154>
   27878:	f001 f8b6 	bl	289e8 <__clzsi2>
   2787c:	3020      	adds	r0, #32
   2787e:	e65f      	b.n	27540 <__aeabi_ddiv+0x12c>
   27880:	4588      	cmp	r8, r1
   27882:	d200      	bcs.n	27886 <__aeabi_ddiv+0x472>
   27884:	e6c7      	b.n	27616 <__aeabi_ddiv+0x202>
   27886:	464b      	mov	r3, r9
   27888:	07de      	lsls	r6, r3, #31
   2788a:	085d      	lsrs	r5, r3, #1
   2788c:	4643      	mov	r3, r8
   2788e:	085b      	lsrs	r3, r3, #1
   27890:	431e      	orrs	r6, r3
   27892:	4643      	mov	r3, r8
   27894:	07db      	lsls	r3, r3, #31
   27896:	469a      	mov	sl, r3
   27898:	e6c2      	b.n	27620 <__aeabi_ddiv+0x20c>
   2789a:	2500      	movs	r5, #0
   2789c:	4592      	cmp	sl, r2
   2789e:	d300      	bcc.n	278a2 <__aeabi_ddiv+0x48e>
   278a0:	e733      	b.n	2770a <__aeabi_ddiv+0x2f6>
   278a2:	9e03      	ldr	r6, [sp, #12]
   278a4:	4659      	mov	r1, fp
   278a6:	46b4      	mov	ip, r6
   278a8:	44e2      	add	sl, ip
   278aa:	45b2      	cmp	sl, r6
   278ac:	41ad      	sbcs	r5, r5
   278ae:	426d      	negs	r5, r5
   278b0:	4445      	add	r5, r8
   278b2:	18eb      	adds	r3, r5, r3
   278b4:	3901      	subs	r1, #1
   278b6:	4598      	cmp	r8, r3
   278b8:	d207      	bcs.n	278ca <__aeabi_ddiv+0x4b6>
   278ba:	4298      	cmp	r0, r3
   278bc:	d900      	bls.n	278c0 <__aeabi_ddiv+0x4ac>
   278be:	e07f      	b.n	279c0 <__aeabi_ddiv+0x5ac>
   278c0:	d100      	bne.n	278c4 <__aeabi_ddiv+0x4b0>
   278c2:	e0bc      	b.n	27a3e <__aeabi_ddiv+0x62a>
   278c4:	1a1d      	subs	r5, r3, r0
   278c6:	468b      	mov	fp, r1
   278c8:	e71f      	b.n	2770a <__aeabi_ddiv+0x2f6>
   278ca:	4598      	cmp	r8, r3
   278cc:	d1fa      	bne.n	278c4 <__aeabi_ddiv+0x4b0>
   278ce:	9d03      	ldr	r5, [sp, #12]
   278d0:	4555      	cmp	r5, sl
   278d2:	d9f2      	bls.n	278ba <__aeabi_ddiv+0x4a6>
   278d4:	4643      	mov	r3, r8
   278d6:	468b      	mov	fp, r1
   278d8:	1a1d      	subs	r5, r3, r0
   278da:	e716      	b.n	2770a <__aeabi_ddiv+0x2f6>
   278dc:	469b      	mov	fp, r3
   278de:	e6ca      	b.n	27676 <__aeabi_ddiv+0x262>
   278e0:	0015      	movs	r5, r2
   278e2:	e6e7      	b.n	276b4 <__aeabi_ddiv+0x2a0>
   278e4:	465a      	mov	r2, fp
   278e6:	08c9      	lsrs	r1, r1, #3
   278e8:	0752      	lsls	r2, r2, #29
   278ea:	430a      	orrs	r2, r1
   278ec:	055b      	lsls	r3, r3, #21
   278ee:	4690      	mov	r8, r2
   278f0:	0d5c      	lsrs	r4, r3, #21
   278f2:	465a      	mov	r2, fp
   278f4:	2301      	movs	r3, #1
   278f6:	9902      	ldr	r1, [sp, #8]
   278f8:	0252      	lsls	r2, r2, #9
   278fa:	4019      	ands	r1, r3
   278fc:	0b12      	lsrs	r2, r2, #12
   278fe:	468c      	mov	ip, r1
   27900:	e656      	b.n	275b0 <__aeabi_ddiv+0x19c>
   27902:	2b00      	cmp	r3, #0
   27904:	d100      	bne.n	27908 <__aeabi_ddiv+0x4f4>
   27906:	e76f      	b.n	277e8 <__aeabi_ddiv+0x3d4>
   27908:	4446      	add	r6, r8
   2790a:	1e4a      	subs	r2, r1, #1
   2790c:	45b0      	cmp	r8, r6
   2790e:	d929      	bls.n	27964 <__aeabi_ddiv+0x550>
   27910:	0011      	movs	r1, r2
   27912:	4286      	cmp	r6, r0
   27914:	d000      	beq.n	27918 <__aeabi_ddiv+0x504>
   27916:	e765      	b.n	277e4 <__aeabi_ddiv+0x3d0>
   27918:	9a03      	ldr	r2, [sp, #12]
   2791a:	4293      	cmp	r3, r2
   2791c:	d000      	beq.n	27920 <__aeabi_ddiv+0x50c>
   2791e:	e761      	b.n	277e4 <__aeabi_ddiv+0x3d0>
   27920:	e762      	b.n	277e8 <__aeabi_ddiv+0x3d4>
   27922:	2101      	movs	r1, #1
   27924:	4249      	negs	r1, r1
   27926:	2001      	movs	r0, #1
   27928:	1ac2      	subs	r2, r0, r3
   2792a:	2a38      	cmp	r2, #56	; 0x38
   2792c:	dd21      	ble.n	27972 <__aeabi_ddiv+0x55e>
   2792e:	9b02      	ldr	r3, [sp, #8]
   27930:	4003      	ands	r3, r0
   27932:	469c      	mov	ip, r3
   27934:	e638      	b.n	275a8 <__aeabi_ddiv+0x194>
   27936:	220f      	movs	r2, #15
   27938:	400a      	ands	r2, r1
   2793a:	2a04      	cmp	r2, #4
   2793c:	d100      	bne.n	27940 <__aeabi_ddiv+0x52c>
   2793e:	e75b      	b.n	277f8 <__aeabi_ddiv+0x3e4>
   27940:	000a      	movs	r2, r1
   27942:	1d11      	adds	r1, r2, #4
   27944:	4291      	cmp	r1, r2
   27946:	4192      	sbcs	r2, r2
   27948:	4252      	negs	r2, r2
   2794a:	4493      	add	fp, r2
   2794c:	e754      	b.n	277f8 <__aeabi_ddiv+0x3e4>
   2794e:	4b47      	ldr	r3, [pc, #284]	; (27a6c <__aeabi_ddiv+0x658>)
   27950:	18e3      	adds	r3, r4, r3
   27952:	2b00      	cmp	r3, #0
   27954:	dde5      	ble.n	27922 <__aeabi_ddiv+0x50e>
   27956:	2201      	movs	r2, #1
   27958:	4252      	negs	r2, r2
   2795a:	e7f2      	b.n	27942 <__aeabi_ddiv+0x52e>
   2795c:	001d      	movs	r5, r3
   2795e:	e6fa      	b.n	27756 <__aeabi_ddiv+0x342>
   27960:	469a      	mov	sl, r3
   27962:	e71c      	b.n	2779e <__aeabi_ddiv+0x38a>
   27964:	42b0      	cmp	r0, r6
   27966:	d839      	bhi.n	279dc <__aeabi_ddiv+0x5c8>
   27968:	d06e      	beq.n	27a48 <__aeabi_ddiv+0x634>
   2796a:	0011      	movs	r1, r2
   2796c:	e73a      	b.n	277e4 <__aeabi_ddiv+0x3d0>
   2796e:	9302      	str	r3, [sp, #8]
   27970:	e73a      	b.n	277e8 <__aeabi_ddiv+0x3d4>
   27972:	2a1f      	cmp	r2, #31
   27974:	dc3c      	bgt.n	279f0 <__aeabi_ddiv+0x5dc>
   27976:	2320      	movs	r3, #32
   27978:	1a9b      	subs	r3, r3, r2
   2797a:	000c      	movs	r4, r1
   2797c:	4658      	mov	r0, fp
   2797e:	4099      	lsls	r1, r3
   27980:	4098      	lsls	r0, r3
   27982:	1e4b      	subs	r3, r1, #1
   27984:	4199      	sbcs	r1, r3
   27986:	465b      	mov	r3, fp
   27988:	40d4      	lsrs	r4, r2
   2798a:	40d3      	lsrs	r3, r2
   2798c:	4320      	orrs	r0, r4
   2798e:	4308      	orrs	r0, r1
   27990:	001a      	movs	r2, r3
   27992:	0743      	lsls	r3, r0, #29
   27994:	d009      	beq.n	279aa <__aeabi_ddiv+0x596>
   27996:	230f      	movs	r3, #15
   27998:	4003      	ands	r3, r0
   2799a:	2b04      	cmp	r3, #4
   2799c:	d005      	beq.n	279aa <__aeabi_ddiv+0x596>
   2799e:	0001      	movs	r1, r0
   279a0:	1d08      	adds	r0, r1, #4
   279a2:	4288      	cmp	r0, r1
   279a4:	419b      	sbcs	r3, r3
   279a6:	425b      	negs	r3, r3
   279a8:	18d2      	adds	r2, r2, r3
   279aa:	0213      	lsls	r3, r2, #8
   279ac:	d53a      	bpl.n	27a24 <__aeabi_ddiv+0x610>
   279ae:	2301      	movs	r3, #1
   279b0:	9a02      	ldr	r2, [sp, #8]
   279b2:	2401      	movs	r4, #1
   279b4:	401a      	ands	r2, r3
   279b6:	2300      	movs	r3, #0
   279b8:	4694      	mov	ip, r2
   279ba:	4698      	mov	r8, r3
   279bc:	2200      	movs	r2, #0
   279be:	e5f7      	b.n	275b0 <__aeabi_ddiv+0x19c>
   279c0:	2102      	movs	r1, #2
   279c2:	4249      	negs	r1, r1
   279c4:	468c      	mov	ip, r1
   279c6:	9d03      	ldr	r5, [sp, #12]
   279c8:	44e3      	add	fp, ip
   279ca:	46ac      	mov	ip, r5
   279cc:	44e2      	add	sl, ip
   279ce:	45aa      	cmp	sl, r5
   279d0:	41ad      	sbcs	r5, r5
   279d2:	426d      	negs	r5, r5
   279d4:	4445      	add	r5, r8
   279d6:	18ed      	adds	r5, r5, r3
   279d8:	1a2d      	subs	r5, r5, r0
   279da:	e696      	b.n	2770a <__aeabi_ddiv+0x2f6>
   279dc:	1e8a      	subs	r2, r1, #2
   279de:	9903      	ldr	r1, [sp, #12]
   279e0:	004d      	lsls	r5, r1, #1
   279e2:	428d      	cmp	r5, r1
   279e4:	4189      	sbcs	r1, r1
   279e6:	4249      	negs	r1, r1
   279e8:	4441      	add	r1, r8
   279ea:	1876      	adds	r6, r6, r1
   279ec:	9503      	str	r5, [sp, #12]
   279ee:	e78f      	b.n	27910 <__aeabi_ddiv+0x4fc>
   279f0:	201f      	movs	r0, #31
   279f2:	4240      	negs	r0, r0
   279f4:	1ac3      	subs	r3, r0, r3
   279f6:	4658      	mov	r0, fp
   279f8:	40d8      	lsrs	r0, r3
   279fa:	0003      	movs	r3, r0
   279fc:	2a20      	cmp	r2, #32
   279fe:	d028      	beq.n	27a52 <__aeabi_ddiv+0x63e>
   27a00:	2040      	movs	r0, #64	; 0x40
   27a02:	465d      	mov	r5, fp
   27a04:	1a82      	subs	r2, r0, r2
   27a06:	4095      	lsls	r5, r2
   27a08:	4329      	orrs	r1, r5
   27a0a:	1e4a      	subs	r2, r1, #1
   27a0c:	4191      	sbcs	r1, r2
   27a0e:	4319      	orrs	r1, r3
   27a10:	2307      	movs	r3, #7
   27a12:	2200      	movs	r2, #0
   27a14:	400b      	ands	r3, r1
   27a16:	d009      	beq.n	27a2c <__aeabi_ddiv+0x618>
   27a18:	230f      	movs	r3, #15
   27a1a:	2200      	movs	r2, #0
   27a1c:	400b      	ands	r3, r1
   27a1e:	0008      	movs	r0, r1
   27a20:	2b04      	cmp	r3, #4
   27a22:	d1bd      	bne.n	279a0 <__aeabi_ddiv+0x58c>
   27a24:	0001      	movs	r1, r0
   27a26:	0753      	lsls	r3, r2, #29
   27a28:	0252      	lsls	r2, r2, #9
   27a2a:	0b12      	lsrs	r2, r2, #12
   27a2c:	08c9      	lsrs	r1, r1, #3
   27a2e:	4319      	orrs	r1, r3
   27a30:	2301      	movs	r3, #1
   27a32:	4688      	mov	r8, r1
   27a34:	9902      	ldr	r1, [sp, #8]
   27a36:	2400      	movs	r4, #0
   27a38:	4019      	ands	r1, r3
   27a3a:	468c      	mov	ip, r1
   27a3c:	e5b8      	b.n	275b0 <__aeabi_ddiv+0x19c>
   27a3e:	4552      	cmp	r2, sl
   27a40:	d8be      	bhi.n	279c0 <__aeabi_ddiv+0x5ac>
   27a42:	468b      	mov	fp, r1
   27a44:	2500      	movs	r5, #0
   27a46:	e660      	b.n	2770a <__aeabi_ddiv+0x2f6>
   27a48:	9d03      	ldr	r5, [sp, #12]
   27a4a:	429d      	cmp	r5, r3
   27a4c:	d3c6      	bcc.n	279dc <__aeabi_ddiv+0x5c8>
   27a4e:	0011      	movs	r1, r2
   27a50:	e762      	b.n	27918 <__aeabi_ddiv+0x504>
   27a52:	2500      	movs	r5, #0
   27a54:	e7d8      	b.n	27a08 <__aeabi_ddiv+0x5f4>
   27a56:	2280      	movs	r2, #128	; 0x80
   27a58:	465b      	mov	r3, fp
   27a5a:	0312      	lsls	r2, r2, #12
   27a5c:	431a      	orrs	r2, r3
   27a5e:	9b01      	ldr	r3, [sp, #4]
   27a60:	0312      	lsls	r2, r2, #12
   27a62:	0b12      	lsrs	r2, r2, #12
   27a64:	469c      	mov	ip, r3
   27a66:	4688      	mov	r8, r1
   27a68:	4c03      	ldr	r4, [pc, #12]	; (27a78 <__aeabi_ddiv+0x664>)
   27a6a:	e5a1      	b.n	275b0 <__aeabi_ddiv+0x19c>
   27a6c:	000003ff 	.word	0x000003ff
   27a70:	feffffff 	.word	0xfeffffff
   27a74:	000007fe 	.word	0x000007fe
   27a78:	000007ff 	.word	0x000007ff

00027a7c <__eqdf2>:
   27a7c:	b5f0      	push	{r4, r5, r6, r7, lr}
   27a7e:	464f      	mov	r7, r9
   27a80:	4646      	mov	r6, r8
   27a82:	46d6      	mov	lr, sl
   27a84:	005c      	lsls	r4, r3, #1
   27a86:	b5c0      	push	{r6, r7, lr}
   27a88:	031f      	lsls	r7, r3, #12
   27a8a:	0fdb      	lsrs	r3, r3, #31
   27a8c:	469a      	mov	sl, r3
   27a8e:	4b17      	ldr	r3, [pc, #92]	; (27aec <__eqdf2+0x70>)
   27a90:	030e      	lsls	r6, r1, #12
   27a92:	004d      	lsls	r5, r1, #1
   27a94:	4684      	mov	ip, r0
   27a96:	4680      	mov	r8, r0
   27a98:	0b36      	lsrs	r6, r6, #12
   27a9a:	0d6d      	lsrs	r5, r5, #21
   27a9c:	0fc9      	lsrs	r1, r1, #31
   27a9e:	4691      	mov	r9, r2
   27aa0:	0b3f      	lsrs	r7, r7, #12
   27aa2:	0d64      	lsrs	r4, r4, #21
   27aa4:	2001      	movs	r0, #1
   27aa6:	429d      	cmp	r5, r3
   27aa8:	d008      	beq.n	27abc <__eqdf2+0x40>
   27aaa:	429c      	cmp	r4, r3
   27aac:	d001      	beq.n	27ab2 <__eqdf2+0x36>
   27aae:	42a5      	cmp	r5, r4
   27ab0:	d00b      	beq.n	27aca <__eqdf2+0x4e>
   27ab2:	bc1c      	pop	{r2, r3, r4}
   27ab4:	4690      	mov	r8, r2
   27ab6:	4699      	mov	r9, r3
   27ab8:	46a2      	mov	sl, r4
   27aba:	bdf0      	pop	{r4, r5, r6, r7, pc}
   27abc:	4663      	mov	r3, ip
   27abe:	4333      	orrs	r3, r6
   27ac0:	d1f7      	bne.n	27ab2 <__eqdf2+0x36>
   27ac2:	42ac      	cmp	r4, r5
   27ac4:	d1f5      	bne.n	27ab2 <__eqdf2+0x36>
   27ac6:	433a      	orrs	r2, r7
   27ac8:	d1f3      	bne.n	27ab2 <__eqdf2+0x36>
   27aca:	2001      	movs	r0, #1
   27acc:	42be      	cmp	r6, r7
   27ace:	d1f0      	bne.n	27ab2 <__eqdf2+0x36>
   27ad0:	45c8      	cmp	r8, r9
   27ad2:	d1ee      	bne.n	27ab2 <__eqdf2+0x36>
   27ad4:	4551      	cmp	r1, sl
   27ad6:	d007      	beq.n	27ae8 <__eqdf2+0x6c>
   27ad8:	2d00      	cmp	r5, #0
   27ada:	d1ea      	bne.n	27ab2 <__eqdf2+0x36>
   27adc:	4663      	mov	r3, ip
   27ade:	431e      	orrs	r6, r3
   27ae0:	0030      	movs	r0, r6
   27ae2:	1e46      	subs	r6, r0, #1
   27ae4:	41b0      	sbcs	r0, r6
   27ae6:	e7e4      	b.n	27ab2 <__eqdf2+0x36>
   27ae8:	2000      	movs	r0, #0
   27aea:	e7e2      	b.n	27ab2 <__eqdf2+0x36>
   27aec:	000007ff 	.word	0x000007ff

00027af0 <__gedf2>:
   27af0:	b5f0      	push	{r4, r5, r6, r7, lr}
   27af2:	4645      	mov	r5, r8
   27af4:	46de      	mov	lr, fp
   27af6:	4657      	mov	r7, sl
   27af8:	464e      	mov	r6, r9
   27afa:	b5e0      	push	{r5, r6, r7, lr}
   27afc:	031f      	lsls	r7, r3, #12
   27afe:	0b3d      	lsrs	r5, r7, #12
   27b00:	4f2c      	ldr	r7, [pc, #176]	; (27bb4 <__gedf2+0xc4>)
   27b02:	030e      	lsls	r6, r1, #12
   27b04:	004c      	lsls	r4, r1, #1
   27b06:	46ab      	mov	fp, r5
   27b08:	005d      	lsls	r5, r3, #1
   27b0a:	4684      	mov	ip, r0
   27b0c:	0b36      	lsrs	r6, r6, #12
   27b0e:	0d64      	lsrs	r4, r4, #21
   27b10:	0fc9      	lsrs	r1, r1, #31
   27b12:	4690      	mov	r8, r2
   27b14:	0d6d      	lsrs	r5, r5, #21
   27b16:	0fdb      	lsrs	r3, r3, #31
   27b18:	42bc      	cmp	r4, r7
   27b1a:	d02a      	beq.n	27b72 <__gedf2+0x82>
   27b1c:	4f25      	ldr	r7, [pc, #148]	; (27bb4 <__gedf2+0xc4>)
   27b1e:	42bd      	cmp	r5, r7
   27b20:	d02d      	beq.n	27b7e <__gedf2+0x8e>
   27b22:	2c00      	cmp	r4, #0
   27b24:	d10f      	bne.n	27b46 <__gedf2+0x56>
   27b26:	4330      	orrs	r0, r6
   27b28:	0007      	movs	r7, r0
   27b2a:	4681      	mov	r9, r0
   27b2c:	4278      	negs	r0, r7
   27b2e:	4178      	adcs	r0, r7
   27b30:	b2c0      	uxtb	r0, r0
   27b32:	2d00      	cmp	r5, #0
   27b34:	d117      	bne.n	27b66 <__gedf2+0x76>
   27b36:	465f      	mov	r7, fp
   27b38:	433a      	orrs	r2, r7
   27b3a:	d114      	bne.n	27b66 <__gedf2+0x76>
   27b3c:	464b      	mov	r3, r9
   27b3e:	2000      	movs	r0, #0
   27b40:	2b00      	cmp	r3, #0
   27b42:	d00a      	beq.n	27b5a <__gedf2+0x6a>
   27b44:	e006      	b.n	27b54 <__gedf2+0x64>
   27b46:	2d00      	cmp	r5, #0
   27b48:	d102      	bne.n	27b50 <__gedf2+0x60>
   27b4a:	4658      	mov	r0, fp
   27b4c:	4302      	orrs	r2, r0
   27b4e:	d001      	beq.n	27b54 <__gedf2+0x64>
   27b50:	4299      	cmp	r1, r3
   27b52:	d018      	beq.n	27b86 <__gedf2+0x96>
   27b54:	4248      	negs	r0, r1
   27b56:	2101      	movs	r1, #1
   27b58:	4308      	orrs	r0, r1
   27b5a:	bc3c      	pop	{r2, r3, r4, r5}
   27b5c:	4690      	mov	r8, r2
   27b5e:	4699      	mov	r9, r3
   27b60:	46a2      	mov	sl, r4
   27b62:	46ab      	mov	fp, r5
   27b64:	bdf0      	pop	{r4, r5, r6, r7, pc}
   27b66:	2800      	cmp	r0, #0
   27b68:	d0f2      	beq.n	27b50 <__gedf2+0x60>
   27b6a:	2001      	movs	r0, #1
   27b6c:	3b01      	subs	r3, #1
   27b6e:	4318      	orrs	r0, r3
   27b70:	e7f3      	b.n	27b5a <__gedf2+0x6a>
   27b72:	0037      	movs	r7, r6
   27b74:	4307      	orrs	r7, r0
   27b76:	d0d1      	beq.n	27b1c <__gedf2+0x2c>
   27b78:	2002      	movs	r0, #2
   27b7a:	4240      	negs	r0, r0
   27b7c:	e7ed      	b.n	27b5a <__gedf2+0x6a>
   27b7e:	465f      	mov	r7, fp
   27b80:	4317      	orrs	r7, r2
   27b82:	d0ce      	beq.n	27b22 <__gedf2+0x32>
   27b84:	e7f8      	b.n	27b78 <__gedf2+0x88>
   27b86:	42ac      	cmp	r4, r5
   27b88:	dce4      	bgt.n	27b54 <__gedf2+0x64>
   27b8a:	da03      	bge.n	27b94 <__gedf2+0xa4>
   27b8c:	1e48      	subs	r0, r1, #1
   27b8e:	2101      	movs	r1, #1
   27b90:	4308      	orrs	r0, r1
   27b92:	e7e2      	b.n	27b5a <__gedf2+0x6a>
   27b94:	455e      	cmp	r6, fp
   27b96:	d8dd      	bhi.n	27b54 <__gedf2+0x64>
   27b98:	d006      	beq.n	27ba8 <__gedf2+0xb8>
   27b9a:	2000      	movs	r0, #0
   27b9c:	455e      	cmp	r6, fp
   27b9e:	d2dc      	bcs.n	27b5a <__gedf2+0x6a>
   27ba0:	2301      	movs	r3, #1
   27ba2:	1e48      	subs	r0, r1, #1
   27ba4:	4318      	orrs	r0, r3
   27ba6:	e7d8      	b.n	27b5a <__gedf2+0x6a>
   27ba8:	45c4      	cmp	ip, r8
   27baa:	d8d3      	bhi.n	27b54 <__gedf2+0x64>
   27bac:	2000      	movs	r0, #0
   27bae:	45c4      	cmp	ip, r8
   27bb0:	d3f6      	bcc.n	27ba0 <__gedf2+0xb0>
   27bb2:	e7d2      	b.n	27b5a <__gedf2+0x6a>
   27bb4:	000007ff 	.word	0x000007ff

00027bb8 <__ledf2>:
   27bb8:	b5f0      	push	{r4, r5, r6, r7, lr}
   27bba:	464e      	mov	r6, r9
   27bbc:	4645      	mov	r5, r8
   27bbe:	46de      	mov	lr, fp
   27bc0:	4657      	mov	r7, sl
   27bc2:	005c      	lsls	r4, r3, #1
   27bc4:	b5e0      	push	{r5, r6, r7, lr}
   27bc6:	031f      	lsls	r7, r3, #12
   27bc8:	0fdb      	lsrs	r3, r3, #31
   27bca:	4699      	mov	r9, r3
   27bcc:	4b2a      	ldr	r3, [pc, #168]	; (27c78 <__ledf2+0xc0>)
   27bce:	030e      	lsls	r6, r1, #12
   27bd0:	004d      	lsls	r5, r1, #1
   27bd2:	0fc9      	lsrs	r1, r1, #31
   27bd4:	4684      	mov	ip, r0
   27bd6:	0b36      	lsrs	r6, r6, #12
   27bd8:	0d6d      	lsrs	r5, r5, #21
   27bda:	468b      	mov	fp, r1
   27bdc:	4690      	mov	r8, r2
   27bde:	0b3f      	lsrs	r7, r7, #12
   27be0:	0d64      	lsrs	r4, r4, #21
   27be2:	429d      	cmp	r5, r3
   27be4:	d020      	beq.n	27c28 <__ledf2+0x70>
   27be6:	4b24      	ldr	r3, [pc, #144]	; (27c78 <__ledf2+0xc0>)
   27be8:	429c      	cmp	r4, r3
   27bea:	d022      	beq.n	27c32 <__ledf2+0x7a>
   27bec:	2d00      	cmp	r5, #0
   27bee:	d112      	bne.n	27c16 <__ledf2+0x5e>
   27bf0:	4330      	orrs	r0, r6
   27bf2:	4243      	negs	r3, r0
   27bf4:	4143      	adcs	r3, r0
   27bf6:	b2db      	uxtb	r3, r3
   27bf8:	2c00      	cmp	r4, #0
   27bfa:	d01f      	beq.n	27c3c <__ledf2+0x84>
   27bfc:	2b00      	cmp	r3, #0
   27bfe:	d00c      	beq.n	27c1a <__ledf2+0x62>
   27c00:	464b      	mov	r3, r9
   27c02:	2001      	movs	r0, #1
   27c04:	3b01      	subs	r3, #1
   27c06:	4303      	orrs	r3, r0
   27c08:	0018      	movs	r0, r3
   27c0a:	bc3c      	pop	{r2, r3, r4, r5}
   27c0c:	4690      	mov	r8, r2
   27c0e:	4699      	mov	r9, r3
   27c10:	46a2      	mov	sl, r4
   27c12:	46ab      	mov	fp, r5
   27c14:	bdf0      	pop	{r4, r5, r6, r7, pc}
   27c16:	2c00      	cmp	r4, #0
   27c18:	d016      	beq.n	27c48 <__ledf2+0x90>
   27c1a:	45cb      	cmp	fp, r9
   27c1c:	d017      	beq.n	27c4e <__ledf2+0x96>
   27c1e:	465b      	mov	r3, fp
   27c20:	4259      	negs	r1, r3
   27c22:	2301      	movs	r3, #1
   27c24:	430b      	orrs	r3, r1
   27c26:	e7ef      	b.n	27c08 <__ledf2+0x50>
   27c28:	0031      	movs	r1, r6
   27c2a:	2302      	movs	r3, #2
   27c2c:	4301      	orrs	r1, r0
   27c2e:	d1eb      	bne.n	27c08 <__ledf2+0x50>
   27c30:	e7d9      	b.n	27be6 <__ledf2+0x2e>
   27c32:	0039      	movs	r1, r7
   27c34:	2302      	movs	r3, #2
   27c36:	4311      	orrs	r1, r2
   27c38:	d1e6      	bne.n	27c08 <__ledf2+0x50>
   27c3a:	e7d7      	b.n	27bec <__ledf2+0x34>
   27c3c:	433a      	orrs	r2, r7
   27c3e:	d1dd      	bne.n	27bfc <__ledf2+0x44>
   27c40:	2300      	movs	r3, #0
   27c42:	2800      	cmp	r0, #0
   27c44:	d0e0      	beq.n	27c08 <__ledf2+0x50>
   27c46:	e7ea      	b.n	27c1e <__ledf2+0x66>
   27c48:	433a      	orrs	r2, r7
   27c4a:	d1e6      	bne.n	27c1a <__ledf2+0x62>
   27c4c:	e7e7      	b.n	27c1e <__ledf2+0x66>
   27c4e:	42a5      	cmp	r5, r4
   27c50:	dce5      	bgt.n	27c1e <__ledf2+0x66>
   27c52:	db05      	blt.n	27c60 <__ledf2+0xa8>
   27c54:	42be      	cmp	r6, r7
   27c56:	d8e2      	bhi.n	27c1e <__ledf2+0x66>
   27c58:	d007      	beq.n	27c6a <__ledf2+0xb2>
   27c5a:	2300      	movs	r3, #0
   27c5c:	42be      	cmp	r6, r7
   27c5e:	d2d3      	bcs.n	27c08 <__ledf2+0x50>
   27c60:	4659      	mov	r1, fp
   27c62:	2301      	movs	r3, #1
   27c64:	3901      	subs	r1, #1
   27c66:	430b      	orrs	r3, r1
   27c68:	e7ce      	b.n	27c08 <__ledf2+0x50>
   27c6a:	45c4      	cmp	ip, r8
   27c6c:	d8d7      	bhi.n	27c1e <__ledf2+0x66>
   27c6e:	2300      	movs	r3, #0
   27c70:	45c4      	cmp	ip, r8
   27c72:	d3f5      	bcc.n	27c60 <__ledf2+0xa8>
   27c74:	e7c8      	b.n	27c08 <__ledf2+0x50>
   27c76:	46c0      	nop			; (mov r8, r8)
   27c78:	000007ff 	.word	0x000007ff

00027c7c <__aeabi_dmul>:
   27c7c:	b5f0      	push	{r4, r5, r6, r7, lr}
   27c7e:	4657      	mov	r7, sl
   27c80:	4645      	mov	r5, r8
   27c82:	46de      	mov	lr, fp
   27c84:	464e      	mov	r6, r9
   27c86:	b5e0      	push	{r5, r6, r7, lr}
   27c88:	030c      	lsls	r4, r1, #12
   27c8a:	4698      	mov	r8, r3
   27c8c:	004e      	lsls	r6, r1, #1
   27c8e:	0b23      	lsrs	r3, r4, #12
   27c90:	b087      	sub	sp, #28
   27c92:	0007      	movs	r7, r0
   27c94:	4692      	mov	sl, r2
   27c96:	469b      	mov	fp, r3
   27c98:	0d76      	lsrs	r6, r6, #21
   27c9a:	0fcd      	lsrs	r5, r1, #31
   27c9c:	2e00      	cmp	r6, #0
   27c9e:	d06b      	beq.n	27d78 <__aeabi_dmul+0xfc>
   27ca0:	4b6d      	ldr	r3, [pc, #436]	; (27e58 <__aeabi_dmul+0x1dc>)
   27ca2:	429e      	cmp	r6, r3
   27ca4:	d035      	beq.n	27d12 <__aeabi_dmul+0x96>
   27ca6:	2480      	movs	r4, #128	; 0x80
   27ca8:	465b      	mov	r3, fp
   27caa:	0f42      	lsrs	r2, r0, #29
   27cac:	0424      	lsls	r4, r4, #16
   27cae:	00db      	lsls	r3, r3, #3
   27cb0:	4314      	orrs	r4, r2
   27cb2:	431c      	orrs	r4, r3
   27cb4:	00c3      	lsls	r3, r0, #3
   27cb6:	4699      	mov	r9, r3
   27cb8:	4b68      	ldr	r3, [pc, #416]	; (27e5c <__aeabi_dmul+0x1e0>)
   27cba:	46a3      	mov	fp, r4
   27cbc:	469c      	mov	ip, r3
   27cbe:	2300      	movs	r3, #0
   27cc0:	2700      	movs	r7, #0
   27cc2:	4466      	add	r6, ip
   27cc4:	9302      	str	r3, [sp, #8]
   27cc6:	4643      	mov	r3, r8
   27cc8:	031c      	lsls	r4, r3, #12
   27cca:	005a      	lsls	r2, r3, #1
   27ccc:	0fdb      	lsrs	r3, r3, #31
   27cce:	4650      	mov	r0, sl
   27cd0:	0b24      	lsrs	r4, r4, #12
   27cd2:	0d52      	lsrs	r2, r2, #21
   27cd4:	4698      	mov	r8, r3
   27cd6:	d100      	bne.n	27cda <__aeabi_dmul+0x5e>
   27cd8:	e076      	b.n	27dc8 <__aeabi_dmul+0x14c>
   27cda:	4b5f      	ldr	r3, [pc, #380]	; (27e58 <__aeabi_dmul+0x1dc>)
   27cdc:	429a      	cmp	r2, r3
   27cde:	d06d      	beq.n	27dbc <__aeabi_dmul+0x140>
   27ce0:	2380      	movs	r3, #128	; 0x80
   27ce2:	0f41      	lsrs	r1, r0, #29
   27ce4:	041b      	lsls	r3, r3, #16
   27ce6:	430b      	orrs	r3, r1
   27ce8:	495c      	ldr	r1, [pc, #368]	; (27e5c <__aeabi_dmul+0x1e0>)
   27cea:	00e4      	lsls	r4, r4, #3
   27cec:	468c      	mov	ip, r1
   27cee:	431c      	orrs	r4, r3
   27cf0:	00c3      	lsls	r3, r0, #3
   27cf2:	2000      	movs	r0, #0
   27cf4:	4462      	add	r2, ip
   27cf6:	4641      	mov	r1, r8
   27cf8:	18b6      	adds	r6, r6, r2
   27cfa:	4069      	eors	r1, r5
   27cfc:	1c72      	adds	r2, r6, #1
   27cfe:	9101      	str	r1, [sp, #4]
   27d00:	4694      	mov	ip, r2
   27d02:	4307      	orrs	r7, r0
   27d04:	2f0f      	cmp	r7, #15
   27d06:	d900      	bls.n	27d0a <__aeabi_dmul+0x8e>
   27d08:	e0b0      	b.n	27e6c <__aeabi_dmul+0x1f0>
   27d0a:	4a55      	ldr	r2, [pc, #340]	; (27e60 <__aeabi_dmul+0x1e4>)
   27d0c:	00bf      	lsls	r7, r7, #2
   27d0e:	59d2      	ldr	r2, [r2, r7]
   27d10:	4697      	mov	pc, r2
   27d12:	465b      	mov	r3, fp
   27d14:	4303      	orrs	r3, r0
   27d16:	4699      	mov	r9, r3
   27d18:	d000      	beq.n	27d1c <__aeabi_dmul+0xa0>
   27d1a:	e087      	b.n	27e2c <__aeabi_dmul+0x1b0>
   27d1c:	2300      	movs	r3, #0
   27d1e:	469b      	mov	fp, r3
   27d20:	3302      	adds	r3, #2
   27d22:	2708      	movs	r7, #8
   27d24:	9302      	str	r3, [sp, #8]
   27d26:	e7ce      	b.n	27cc6 <__aeabi_dmul+0x4a>
   27d28:	4642      	mov	r2, r8
   27d2a:	9201      	str	r2, [sp, #4]
   27d2c:	2802      	cmp	r0, #2
   27d2e:	d067      	beq.n	27e00 <__aeabi_dmul+0x184>
   27d30:	2803      	cmp	r0, #3
   27d32:	d100      	bne.n	27d36 <__aeabi_dmul+0xba>
   27d34:	e20e      	b.n	28154 <__aeabi_dmul+0x4d8>
   27d36:	2801      	cmp	r0, #1
   27d38:	d000      	beq.n	27d3c <__aeabi_dmul+0xc0>
   27d3a:	e162      	b.n	28002 <__aeabi_dmul+0x386>
   27d3c:	2300      	movs	r3, #0
   27d3e:	2400      	movs	r4, #0
   27d40:	2200      	movs	r2, #0
   27d42:	4699      	mov	r9, r3
   27d44:	9901      	ldr	r1, [sp, #4]
   27d46:	4001      	ands	r1, r0
   27d48:	b2cd      	uxtb	r5, r1
   27d4a:	2100      	movs	r1, #0
   27d4c:	0312      	lsls	r2, r2, #12
   27d4e:	0d0b      	lsrs	r3, r1, #20
   27d50:	0b12      	lsrs	r2, r2, #12
   27d52:	051b      	lsls	r3, r3, #20
   27d54:	4313      	orrs	r3, r2
   27d56:	4a43      	ldr	r2, [pc, #268]	; (27e64 <__aeabi_dmul+0x1e8>)
   27d58:	0524      	lsls	r4, r4, #20
   27d5a:	4013      	ands	r3, r2
   27d5c:	431c      	orrs	r4, r3
   27d5e:	0064      	lsls	r4, r4, #1
   27d60:	07ed      	lsls	r5, r5, #31
   27d62:	0864      	lsrs	r4, r4, #1
   27d64:	432c      	orrs	r4, r5
   27d66:	4648      	mov	r0, r9
   27d68:	0021      	movs	r1, r4
   27d6a:	b007      	add	sp, #28
   27d6c:	bc3c      	pop	{r2, r3, r4, r5}
   27d6e:	4690      	mov	r8, r2
   27d70:	4699      	mov	r9, r3
   27d72:	46a2      	mov	sl, r4
   27d74:	46ab      	mov	fp, r5
   27d76:	bdf0      	pop	{r4, r5, r6, r7, pc}
   27d78:	4303      	orrs	r3, r0
   27d7a:	4699      	mov	r9, r3
   27d7c:	d04f      	beq.n	27e1e <__aeabi_dmul+0x1a2>
   27d7e:	465b      	mov	r3, fp
   27d80:	2b00      	cmp	r3, #0
   27d82:	d100      	bne.n	27d86 <__aeabi_dmul+0x10a>
   27d84:	e189      	b.n	2809a <__aeabi_dmul+0x41e>
   27d86:	4658      	mov	r0, fp
   27d88:	f000 fe2e 	bl	289e8 <__clzsi2>
   27d8c:	0003      	movs	r3, r0
   27d8e:	3b0b      	subs	r3, #11
   27d90:	2b1c      	cmp	r3, #28
   27d92:	dd00      	ble.n	27d96 <__aeabi_dmul+0x11a>
   27d94:	e17a      	b.n	2808c <__aeabi_dmul+0x410>
   27d96:	221d      	movs	r2, #29
   27d98:	1ad3      	subs	r3, r2, r3
   27d9a:	003a      	movs	r2, r7
   27d9c:	0001      	movs	r1, r0
   27d9e:	465c      	mov	r4, fp
   27da0:	40da      	lsrs	r2, r3
   27da2:	3908      	subs	r1, #8
   27da4:	408c      	lsls	r4, r1
   27da6:	0013      	movs	r3, r2
   27da8:	408f      	lsls	r7, r1
   27daa:	4323      	orrs	r3, r4
   27dac:	469b      	mov	fp, r3
   27dae:	46b9      	mov	r9, r7
   27db0:	2300      	movs	r3, #0
   27db2:	4e2d      	ldr	r6, [pc, #180]	; (27e68 <__aeabi_dmul+0x1ec>)
   27db4:	2700      	movs	r7, #0
   27db6:	1a36      	subs	r6, r6, r0
   27db8:	9302      	str	r3, [sp, #8]
   27dba:	e784      	b.n	27cc6 <__aeabi_dmul+0x4a>
   27dbc:	4653      	mov	r3, sl
   27dbe:	4323      	orrs	r3, r4
   27dc0:	d12a      	bne.n	27e18 <__aeabi_dmul+0x19c>
   27dc2:	2400      	movs	r4, #0
   27dc4:	2002      	movs	r0, #2
   27dc6:	e796      	b.n	27cf6 <__aeabi_dmul+0x7a>
   27dc8:	4653      	mov	r3, sl
   27dca:	4323      	orrs	r3, r4
   27dcc:	d020      	beq.n	27e10 <__aeabi_dmul+0x194>
   27dce:	2c00      	cmp	r4, #0
   27dd0:	d100      	bne.n	27dd4 <__aeabi_dmul+0x158>
   27dd2:	e157      	b.n	28084 <__aeabi_dmul+0x408>
   27dd4:	0020      	movs	r0, r4
   27dd6:	f000 fe07 	bl	289e8 <__clzsi2>
   27dda:	0003      	movs	r3, r0
   27ddc:	3b0b      	subs	r3, #11
   27dde:	2b1c      	cmp	r3, #28
   27de0:	dd00      	ble.n	27de4 <__aeabi_dmul+0x168>
   27de2:	e149      	b.n	28078 <__aeabi_dmul+0x3fc>
   27de4:	211d      	movs	r1, #29
   27de6:	1acb      	subs	r3, r1, r3
   27de8:	4651      	mov	r1, sl
   27dea:	0002      	movs	r2, r0
   27dec:	40d9      	lsrs	r1, r3
   27dee:	4653      	mov	r3, sl
   27df0:	3a08      	subs	r2, #8
   27df2:	4094      	lsls	r4, r2
   27df4:	4093      	lsls	r3, r2
   27df6:	430c      	orrs	r4, r1
   27df8:	4a1b      	ldr	r2, [pc, #108]	; (27e68 <__aeabi_dmul+0x1ec>)
   27dfa:	1a12      	subs	r2, r2, r0
   27dfc:	2000      	movs	r0, #0
   27dfe:	e77a      	b.n	27cf6 <__aeabi_dmul+0x7a>
   27e00:	2501      	movs	r5, #1
   27e02:	9b01      	ldr	r3, [sp, #4]
   27e04:	4c14      	ldr	r4, [pc, #80]	; (27e58 <__aeabi_dmul+0x1dc>)
   27e06:	401d      	ands	r5, r3
   27e08:	2300      	movs	r3, #0
   27e0a:	2200      	movs	r2, #0
   27e0c:	4699      	mov	r9, r3
   27e0e:	e79c      	b.n	27d4a <__aeabi_dmul+0xce>
   27e10:	2400      	movs	r4, #0
   27e12:	2200      	movs	r2, #0
   27e14:	2001      	movs	r0, #1
   27e16:	e76e      	b.n	27cf6 <__aeabi_dmul+0x7a>
   27e18:	4653      	mov	r3, sl
   27e1a:	2003      	movs	r0, #3
   27e1c:	e76b      	b.n	27cf6 <__aeabi_dmul+0x7a>
   27e1e:	2300      	movs	r3, #0
   27e20:	469b      	mov	fp, r3
   27e22:	3301      	adds	r3, #1
   27e24:	2704      	movs	r7, #4
   27e26:	2600      	movs	r6, #0
   27e28:	9302      	str	r3, [sp, #8]
   27e2a:	e74c      	b.n	27cc6 <__aeabi_dmul+0x4a>
   27e2c:	2303      	movs	r3, #3
   27e2e:	4681      	mov	r9, r0
   27e30:	270c      	movs	r7, #12
   27e32:	9302      	str	r3, [sp, #8]
   27e34:	e747      	b.n	27cc6 <__aeabi_dmul+0x4a>
   27e36:	2280      	movs	r2, #128	; 0x80
   27e38:	2300      	movs	r3, #0
   27e3a:	2500      	movs	r5, #0
   27e3c:	0312      	lsls	r2, r2, #12
   27e3e:	4699      	mov	r9, r3
   27e40:	4c05      	ldr	r4, [pc, #20]	; (27e58 <__aeabi_dmul+0x1dc>)
   27e42:	e782      	b.n	27d4a <__aeabi_dmul+0xce>
   27e44:	465c      	mov	r4, fp
   27e46:	464b      	mov	r3, r9
   27e48:	9802      	ldr	r0, [sp, #8]
   27e4a:	e76f      	b.n	27d2c <__aeabi_dmul+0xb0>
   27e4c:	465c      	mov	r4, fp
   27e4e:	464b      	mov	r3, r9
   27e50:	9501      	str	r5, [sp, #4]
   27e52:	9802      	ldr	r0, [sp, #8]
   27e54:	e76a      	b.n	27d2c <__aeabi_dmul+0xb0>
   27e56:	46c0      	nop			; (mov r8, r8)
   27e58:	000007ff 	.word	0x000007ff
   27e5c:	fffffc01 	.word	0xfffffc01
   27e60:	0002abf8 	.word	0x0002abf8
   27e64:	800fffff 	.word	0x800fffff
   27e68:	fffffc0d 	.word	0xfffffc0d
   27e6c:	464a      	mov	r2, r9
   27e6e:	4649      	mov	r1, r9
   27e70:	0c17      	lsrs	r7, r2, #16
   27e72:	0c1a      	lsrs	r2, r3, #16
   27e74:	041b      	lsls	r3, r3, #16
   27e76:	0c1b      	lsrs	r3, r3, #16
   27e78:	0408      	lsls	r0, r1, #16
   27e7a:	0019      	movs	r1, r3
   27e7c:	0c00      	lsrs	r0, r0, #16
   27e7e:	4341      	muls	r1, r0
   27e80:	0015      	movs	r5, r2
   27e82:	4688      	mov	r8, r1
   27e84:	0019      	movs	r1, r3
   27e86:	437d      	muls	r5, r7
   27e88:	4379      	muls	r1, r7
   27e8a:	9503      	str	r5, [sp, #12]
   27e8c:	4689      	mov	r9, r1
   27e8e:	0029      	movs	r1, r5
   27e90:	0015      	movs	r5, r2
   27e92:	4345      	muls	r5, r0
   27e94:	444d      	add	r5, r9
   27e96:	9502      	str	r5, [sp, #8]
   27e98:	4645      	mov	r5, r8
   27e9a:	0c2d      	lsrs	r5, r5, #16
   27e9c:	46aa      	mov	sl, r5
   27e9e:	9d02      	ldr	r5, [sp, #8]
   27ea0:	4455      	add	r5, sl
   27ea2:	45a9      	cmp	r9, r5
   27ea4:	d906      	bls.n	27eb4 <__aeabi_dmul+0x238>
   27ea6:	468a      	mov	sl, r1
   27ea8:	2180      	movs	r1, #128	; 0x80
   27eaa:	0249      	lsls	r1, r1, #9
   27eac:	4689      	mov	r9, r1
   27eae:	44ca      	add	sl, r9
   27eb0:	4651      	mov	r1, sl
   27eb2:	9103      	str	r1, [sp, #12]
   27eb4:	0c29      	lsrs	r1, r5, #16
   27eb6:	9104      	str	r1, [sp, #16]
   27eb8:	4641      	mov	r1, r8
   27eba:	0409      	lsls	r1, r1, #16
   27ebc:	042d      	lsls	r5, r5, #16
   27ebe:	0c09      	lsrs	r1, r1, #16
   27ec0:	4688      	mov	r8, r1
   27ec2:	0029      	movs	r1, r5
   27ec4:	0c25      	lsrs	r5, r4, #16
   27ec6:	0424      	lsls	r4, r4, #16
   27ec8:	4441      	add	r1, r8
   27eca:	0c24      	lsrs	r4, r4, #16
   27ecc:	9105      	str	r1, [sp, #20]
   27ece:	0021      	movs	r1, r4
   27ed0:	4341      	muls	r1, r0
   27ed2:	4688      	mov	r8, r1
   27ed4:	0021      	movs	r1, r4
   27ed6:	4379      	muls	r1, r7
   27ed8:	468a      	mov	sl, r1
   27eda:	4368      	muls	r0, r5
   27edc:	4641      	mov	r1, r8
   27ede:	4450      	add	r0, sl
   27ee0:	4681      	mov	r9, r0
   27ee2:	0c08      	lsrs	r0, r1, #16
   27ee4:	4448      	add	r0, r9
   27ee6:	436f      	muls	r7, r5
   27ee8:	4582      	cmp	sl, r0
   27eea:	d903      	bls.n	27ef4 <__aeabi_dmul+0x278>
   27eec:	2180      	movs	r1, #128	; 0x80
   27eee:	0249      	lsls	r1, r1, #9
   27ef0:	4689      	mov	r9, r1
   27ef2:	444f      	add	r7, r9
   27ef4:	0c01      	lsrs	r1, r0, #16
   27ef6:	4689      	mov	r9, r1
   27ef8:	0039      	movs	r1, r7
   27efa:	4449      	add	r1, r9
   27efc:	9102      	str	r1, [sp, #8]
   27efe:	4641      	mov	r1, r8
   27f00:	040f      	lsls	r7, r1, #16
   27f02:	9904      	ldr	r1, [sp, #16]
   27f04:	0c3f      	lsrs	r7, r7, #16
   27f06:	4688      	mov	r8, r1
   27f08:	0400      	lsls	r0, r0, #16
   27f0a:	19c0      	adds	r0, r0, r7
   27f0c:	4480      	add	r8, r0
   27f0e:	4641      	mov	r1, r8
   27f10:	9104      	str	r1, [sp, #16]
   27f12:	4659      	mov	r1, fp
   27f14:	0c0f      	lsrs	r7, r1, #16
   27f16:	0409      	lsls	r1, r1, #16
   27f18:	0c09      	lsrs	r1, r1, #16
   27f1a:	4688      	mov	r8, r1
   27f1c:	4359      	muls	r1, r3
   27f1e:	468a      	mov	sl, r1
   27f20:	0039      	movs	r1, r7
   27f22:	4351      	muls	r1, r2
   27f24:	4689      	mov	r9, r1
   27f26:	4641      	mov	r1, r8
   27f28:	434a      	muls	r2, r1
   27f2a:	4651      	mov	r1, sl
   27f2c:	0c09      	lsrs	r1, r1, #16
   27f2e:	468b      	mov	fp, r1
   27f30:	437b      	muls	r3, r7
   27f32:	18d2      	adds	r2, r2, r3
   27f34:	445a      	add	r2, fp
   27f36:	4293      	cmp	r3, r2
   27f38:	d903      	bls.n	27f42 <__aeabi_dmul+0x2c6>
   27f3a:	2380      	movs	r3, #128	; 0x80
   27f3c:	025b      	lsls	r3, r3, #9
   27f3e:	469b      	mov	fp, r3
   27f40:	44d9      	add	r9, fp
   27f42:	4651      	mov	r1, sl
   27f44:	0409      	lsls	r1, r1, #16
   27f46:	0c09      	lsrs	r1, r1, #16
   27f48:	468a      	mov	sl, r1
   27f4a:	4641      	mov	r1, r8
   27f4c:	4361      	muls	r1, r4
   27f4e:	437c      	muls	r4, r7
   27f50:	0c13      	lsrs	r3, r2, #16
   27f52:	0412      	lsls	r2, r2, #16
   27f54:	444b      	add	r3, r9
   27f56:	4452      	add	r2, sl
   27f58:	46a1      	mov	r9, r4
   27f5a:	468a      	mov	sl, r1
   27f5c:	003c      	movs	r4, r7
   27f5e:	4641      	mov	r1, r8
   27f60:	436c      	muls	r4, r5
   27f62:	434d      	muls	r5, r1
   27f64:	4651      	mov	r1, sl
   27f66:	444d      	add	r5, r9
   27f68:	0c0f      	lsrs	r7, r1, #16
   27f6a:	197d      	adds	r5, r7, r5
   27f6c:	45a9      	cmp	r9, r5
   27f6e:	d903      	bls.n	27f78 <__aeabi_dmul+0x2fc>
   27f70:	2180      	movs	r1, #128	; 0x80
   27f72:	0249      	lsls	r1, r1, #9
   27f74:	4688      	mov	r8, r1
   27f76:	4444      	add	r4, r8
   27f78:	9f04      	ldr	r7, [sp, #16]
   27f7a:	9903      	ldr	r1, [sp, #12]
   27f7c:	46b8      	mov	r8, r7
   27f7e:	4441      	add	r1, r8
   27f80:	468b      	mov	fp, r1
   27f82:	4583      	cmp	fp, r0
   27f84:	4180      	sbcs	r0, r0
   27f86:	4241      	negs	r1, r0
   27f88:	4688      	mov	r8, r1
   27f8a:	4651      	mov	r1, sl
   27f8c:	0408      	lsls	r0, r1, #16
   27f8e:	042f      	lsls	r7, r5, #16
   27f90:	0c00      	lsrs	r0, r0, #16
   27f92:	183f      	adds	r7, r7, r0
   27f94:	4658      	mov	r0, fp
   27f96:	9902      	ldr	r1, [sp, #8]
   27f98:	1810      	adds	r0, r2, r0
   27f9a:	4689      	mov	r9, r1
   27f9c:	4290      	cmp	r0, r2
   27f9e:	4192      	sbcs	r2, r2
   27fa0:	444f      	add	r7, r9
   27fa2:	46ba      	mov	sl, r7
   27fa4:	4252      	negs	r2, r2
   27fa6:	4699      	mov	r9, r3
   27fa8:	4693      	mov	fp, r2
   27faa:	44c2      	add	sl, r8
   27fac:	44d1      	add	r9, sl
   27fae:	44cb      	add	fp, r9
   27fb0:	428f      	cmp	r7, r1
   27fb2:	41bf      	sbcs	r7, r7
   27fb4:	45c2      	cmp	sl, r8
   27fb6:	4189      	sbcs	r1, r1
   27fb8:	4599      	cmp	r9, r3
   27fba:	419b      	sbcs	r3, r3
   27fbc:	4593      	cmp	fp, r2
   27fbe:	4192      	sbcs	r2, r2
   27fc0:	427f      	negs	r7, r7
   27fc2:	4249      	negs	r1, r1
   27fc4:	0c2d      	lsrs	r5, r5, #16
   27fc6:	4252      	negs	r2, r2
   27fc8:	430f      	orrs	r7, r1
   27fca:	425b      	negs	r3, r3
   27fcc:	4313      	orrs	r3, r2
   27fce:	197f      	adds	r7, r7, r5
   27fd0:	18ff      	adds	r7, r7, r3
   27fd2:	465b      	mov	r3, fp
   27fd4:	193c      	adds	r4, r7, r4
   27fd6:	0ddb      	lsrs	r3, r3, #23
   27fd8:	9a05      	ldr	r2, [sp, #20]
   27fda:	0264      	lsls	r4, r4, #9
   27fdc:	431c      	orrs	r4, r3
   27fde:	0243      	lsls	r3, r0, #9
   27fe0:	4313      	orrs	r3, r2
   27fe2:	1e5d      	subs	r5, r3, #1
   27fe4:	41ab      	sbcs	r3, r5
   27fe6:	465a      	mov	r2, fp
   27fe8:	0dc0      	lsrs	r0, r0, #23
   27fea:	4303      	orrs	r3, r0
   27fec:	0252      	lsls	r2, r2, #9
   27fee:	4313      	orrs	r3, r2
   27ff0:	01e2      	lsls	r2, r4, #7
   27ff2:	d556      	bpl.n	280a2 <__aeabi_dmul+0x426>
   27ff4:	2001      	movs	r0, #1
   27ff6:	085a      	lsrs	r2, r3, #1
   27ff8:	4003      	ands	r3, r0
   27ffa:	4313      	orrs	r3, r2
   27ffc:	07e2      	lsls	r2, r4, #31
   27ffe:	4313      	orrs	r3, r2
   28000:	0864      	lsrs	r4, r4, #1
   28002:	485a      	ldr	r0, [pc, #360]	; (2816c <__aeabi_dmul+0x4f0>)
   28004:	4460      	add	r0, ip
   28006:	2800      	cmp	r0, #0
   28008:	dd4d      	ble.n	280a6 <__aeabi_dmul+0x42a>
   2800a:	075a      	lsls	r2, r3, #29
   2800c:	d009      	beq.n	28022 <__aeabi_dmul+0x3a6>
   2800e:	220f      	movs	r2, #15
   28010:	401a      	ands	r2, r3
   28012:	2a04      	cmp	r2, #4
   28014:	d005      	beq.n	28022 <__aeabi_dmul+0x3a6>
   28016:	1d1a      	adds	r2, r3, #4
   28018:	429a      	cmp	r2, r3
   2801a:	419b      	sbcs	r3, r3
   2801c:	425b      	negs	r3, r3
   2801e:	18e4      	adds	r4, r4, r3
   28020:	0013      	movs	r3, r2
   28022:	01e2      	lsls	r2, r4, #7
   28024:	d504      	bpl.n	28030 <__aeabi_dmul+0x3b4>
   28026:	2080      	movs	r0, #128	; 0x80
   28028:	4a51      	ldr	r2, [pc, #324]	; (28170 <__aeabi_dmul+0x4f4>)
   2802a:	00c0      	lsls	r0, r0, #3
   2802c:	4014      	ands	r4, r2
   2802e:	4460      	add	r0, ip
   28030:	4a50      	ldr	r2, [pc, #320]	; (28174 <__aeabi_dmul+0x4f8>)
   28032:	4290      	cmp	r0, r2
   28034:	dd00      	ble.n	28038 <__aeabi_dmul+0x3bc>
   28036:	e6e3      	b.n	27e00 <__aeabi_dmul+0x184>
   28038:	2501      	movs	r5, #1
   2803a:	08db      	lsrs	r3, r3, #3
   2803c:	0762      	lsls	r2, r4, #29
   2803e:	431a      	orrs	r2, r3
   28040:	0264      	lsls	r4, r4, #9
   28042:	9b01      	ldr	r3, [sp, #4]
   28044:	4691      	mov	r9, r2
   28046:	0b22      	lsrs	r2, r4, #12
   28048:	0544      	lsls	r4, r0, #21
   2804a:	0d64      	lsrs	r4, r4, #21
   2804c:	401d      	ands	r5, r3
   2804e:	e67c      	b.n	27d4a <__aeabi_dmul+0xce>
   28050:	2280      	movs	r2, #128	; 0x80
   28052:	4659      	mov	r1, fp
   28054:	0312      	lsls	r2, r2, #12
   28056:	4211      	tst	r1, r2
   28058:	d008      	beq.n	2806c <__aeabi_dmul+0x3f0>
   2805a:	4214      	tst	r4, r2
   2805c:	d106      	bne.n	2806c <__aeabi_dmul+0x3f0>
   2805e:	4322      	orrs	r2, r4
   28060:	0312      	lsls	r2, r2, #12
   28062:	0b12      	lsrs	r2, r2, #12
   28064:	4645      	mov	r5, r8
   28066:	4699      	mov	r9, r3
   28068:	4c43      	ldr	r4, [pc, #268]	; (28178 <__aeabi_dmul+0x4fc>)
   2806a:	e66e      	b.n	27d4a <__aeabi_dmul+0xce>
   2806c:	465b      	mov	r3, fp
   2806e:	431a      	orrs	r2, r3
   28070:	0312      	lsls	r2, r2, #12
   28072:	0b12      	lsrs	r2, r2, #12
   28074:	4c40      	ldr	r4, [pc, #256]	; (28178 <__aeabi_dmul+0x4fc>)
   28076:	e668      	b.n	27d4a <__aeabi_dmul+0xce>
   28078:	0003      	movs	r3, r0
   2807a:	4654      	mov	r4, sl
   2807c:	3b28      	subs	r3, #40	; 0x28
   2807e:	409c      	lsls	r4, r3
   28080:	2300      	movs	r3, #0
   28082:	e6b9      	b.n	27df8 <__aeabi_dmul+0x17c>
   28084:	f000 fcb0 	bl	289e8 <__clzsi2>
   28088:	3020      	adds	r0, #32
   2808a:	e6a6      	b.n	27dda <__aeabi_dmul+0x15e>
   2808c:	0003      	movs	r3, r0
   2808e:	3b28      	subs	r3, #40	; 0x28
   28090:	409f      	lsls	r7, r3
   28092:	2300      	movs	r3, #0
   28094:	46bb      	mov	fp, r7
   28096:	4699      	mov	r9, r3
   28098:	e68a      	b.n	27db0 <__aeabi_dmul+0x134>
   2809a:	f000 fca5 	bl	289e8 <__clzsi2>
   2809e:	3020      	adds	r0, #32
   280a0:	e674      	b.n	27d8c <__aeabi_dmul+0x110>
   280a2:	46b4      	mov	ip, r6
   280a4:	e7ad      	b.n	28002 <__aeabi_dmul+0x386>
   280a6:	2501      	movs	r5, #1
   280a8:	1a2a      	subs	r2, r5, r0
   280aa:	2a38      	cmp	r2, #56	; 0x38
   280ac:	dd06      	ble.n	280bc <__aeabi_dmul+0x440>
   280ae:	9b01      	ldr	r3, [sp, #4]
   280b0:	2400      	movs	r4, #0
   280b2:	401d      	ands	r5, r3
   280b4:	2300      	movs	r3, #0
   280b6:	2200      	movs	r2, #0
   280b8:	4699      	mov	r9, r3
   280ba:	e646      	b.n	27d4a <__aeabi_dmul+0xce>
   280bc:	2a1f      	cmp	r2, #31
   280be:	dc21      	bgt.n	28104 <__aeabi_dmul+0x488>
   280c0:	2520      	movs	r5, #32
   280c2:	0020      	movs	r0, r4
   280c4:	1aad      	subs	r5, r5, r2
   280c6:	001e      	movs	r6, r3
   280c8:	40ab      	lsls	r3, r5
   280ca:	40a8      	lsls	r0, r5
   280cc:	40d6      	lsrs	r6, r2
   280ce:	1e5d      	subs	r5, r3, #1
   280d0:	41ab      	sbcs	r3, r5
   280d2:	4330      	orrs	r0, r6
   280d4:	4318      	orrs	r0, r3
   280d6:	40d4      	lsrs	r4, r2
   280d8:	0743      	lsls	r3, r0, #29
   280da:	d009      	beq.n	280f0 <__aeabi_dmul+0x474>
   280dc:	230f      	movs	r3, #15
   280de:	4003      	ands	r3, r0
   280e0:	2b04      	cmp	r3, #4
   280e2:	d005      	beq.n	280f0 <__aeabi_dmul+0x474>
   280e4:	0003      	movs	r3, r0
   280e6:	1d18      	adds	r0, r3, #4
   280e8:	4298      	cmp	r0, r3
   280ea:	419b      	sbcs	r3, r3
   280ec:	425b      	negs	r3, r3
   280ee:	18e4      	adds	r4, r4, r3
   280f0:	0223      	lsls	r3, r4, #8
   280f2:	d521      	bpl.n	28138 <__aeabi_dmul+0x4bc>
   280f4:	2501      	movs	r5, #1
   280f6:	9b01      	ldr	r3, [sp, #4]
   280f8:	2401      	movs	r4, #1
   280fa:	401d      	ands	r5, r3
   280fc:	2300      	movs	r3, #0
   280fe:	2200      	movs	r2, #0
   28100:	4699      	mov	r9, r3
   28102:	e622      	b.n	27d4a <__aeabi_dmul+0xce>
   28104:	251f      	movs	r5, #31
   28106:	0021      	movs	r1, r4
   28108:	426d      	negs	r5, r5
   2810a:	1a28      	subs	r0, r5, r0
   2810c:	40c1      	lsrs	r1, r0
   2810e:	0008      	movs	r0, r1
   28110:	2a20      	cmp	r2, #32
   28112:	d01d      	beq.n	28150 <__aeabi_dmul+0x4d4>
   28114:	355f      	adds	r5, #95	; 0x5f
   28116:	1aaa      	subs	r2, r5, r2
   28118:	4094      	lsls	r4, r2
   2811a:	4323      	orrs	r3, r4
   2811c:	1e5c      	subs	r4, r3, #1
   2811e:	41a3      	sbcs	r3, r4
   28120:	2507      	movs	r5, #7
   28122:	4303      	orrs	r3, r0
   28124:	401d      	ands	r5, r3
   28126:	2200      	movs	r2, #0
   28128:	2d00      	cmp	r5, #0
   2812a:	d009      	beq.n	28140 <__aeabi_dmul+0x4c4>
   2812c:	220f      	movs	r2, #15
   2812e:	2400      	movs	r4, #0
   28130:	401a      	ands	r2, r3
   28132:	0018      	movs	r0, r3
   28134:	2a04      	cmp	r2, #4
   28136:	d1d6      	bne.n	280e6 <__aeabi_dmul+0x46a>
   28138:	0003      	movs	r3, r0
   2813a:	0765      	lsls	r5, r4, #29
   2813c:	0264      	lsls	r4, r4, #9
   2813e:	0b22      	lsrs	r2, r4, #12
   28140:	08db      	lsrs	r3, r3, #3
   28142:	432b      	orrs	r3, r5
   28144:	2501      	movs	r5, #1
   28146:	4699      	mov	r9, r3
   28148:	9b01      	ldr	r3, [sp, #4]
   2814a:	2400      	movs	r4, #0
   2814c:	401d      	ands	r5, r3
   2814e:	e5fc      	b.n	27d4a <__aeabi_dmul+0xce>
   28150:	2400      	movs	r4, #0
   28152:	e7e2      	b.n	2811a <__aeabi_dmul+0x49e>
   28154:	2280      	movs	r2, #128	; 0x80
   28156:	2501      	movs	r5, #1
   28158:	0312      	lsls	r2, r2, #12
   2815a:	4322      	orrs	r2, r4
   2815c:	9901      	ldr	r1, [sp, #4]
   2815e:	0312      	lsls	r2, r2, #12
   28160:	0b12      	lsrs	r2, r2, #12
   28162:	400d      	ands	r5, r1
   28164:	4699      	mov	r9, r3
   28166:	4c04      	ldr	r4, [pc, #16]	; (28178 <__aeabi_dmul+0x4fc>)
   28168:	e5ef      	b.n	27d4a <__aeabi_dmul+0xce>
   2816a:	46c0      	nop			; (mov r8, r8)
   2816c:	000003ff 	.word	0x000003ff
   28170:	feffffff 	.word	0xfeffffff
   28174:	000007fe 	.word	0x000007fe
   28178:	000007ff 	.word	0x000007ff

0002817c <__aeabi_dsub>:
   2817c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2817e:	4646      	mov	r6, r8
   28180:	46d6      	mov	lr, sl
   28182:	464f      	mov	r7, r9
   28184:	030c      	lsls	r4, r1, #12
   28186:	b5c0      	push	{r6, r7, lr}
   28188:	0fcd      	lsrs	r5, r1, #31
   2818a:	004e      	lsls	r6, r1, #1
   2818c:	0a61      	lsrs	r1, r4, #9
   2818e:	0f44      	lsrs	r4, r0, #29
   28190:	430c      	orrs	r4, r1
   28192:	00c1      	lsls	r1, r0, #3
   28194:	0058      	lsls	r0, r3, #1
   28196:	0d40      	lsrs	r0, r0, #21
   28198:	4684      	mov	ip, r0
   2819a:	468a      	mov	sl, r1
   2819c:	000f      	movs	r7, r1
   2819e:	0319      	lsls	r1, r3, #12
   281a0:	0f50      	lsrs	r0, r2, #29
   281a2:	0a49      	lsrs	r1, r1, #9
   281a4:	4301      	orrs	r1, r0
   281a6:	48c6      	ldr	r0, [pc, #792]	; (284c0 <__aeabi_dsub+0x344>)
   281a8:	0d76      	lsrs	r6, r6, #21
   281aa:	46a8      	mov	r8, r5
   281ac:	0fdb      	lsrs	r3, r3, #31
   281ae:	00d2      	lsls	r2, r2, #3
   281b0:	4584      	cmp	ip, r0
   281b2:	d100      	bne.n	281b6 <__aeabi_dsub+0x3a>
   281b4:	e0d8      	b.n	28368 <__aeabi_dsub+0x1ec>
   281b6:	2001      	movs	r0, #1
   281b8:	4043      	eors	r3, r0
   281ba:	42ab      	cmp	r3, r5
   281bc:	d100      	bne.n	281c0 <__aeabi_dsub+0x44>
   281be:	e0a6      	b.n	2830e <__aeabi_dsub+0x192>
   281c0:	4660      	mov	r0, ip
   281c2:	1a35      	subs	r5, r6, r0
   281c4:	2d00      	cmp	r5, #0
   281c6:	dc00      	bgt.n	281ca <__aeabi_dsub+0x4e>
   281c8:	e105      	b.n	283d6 <__aeabi_dsub+0x25a>
   281ca:	2800      	cmp	r0, #0
   281cc:	d110      	bne.n	281f0 <__aeabi_dsub+0x74>
   281ce:	000b      	movs	r3, r1
   281d0:	4313      	orrs	r3, r2
   281d2:	d100      	bne.n	281d6 <__aeabi_dsub+0x5a>
   281d4:	e0d7      	b.n	28386 <__aeabi_dsub+0x20a>
   281d6:	1e6b      	subs	r3, r5, #1
   281d8:	2b00      	cmp	r3, #0
   281da:	d000      	beq.n	281de <__aeabi_dsub+0x62>
   281dc:	e14b      	b.n	28476 <__aeabi_dsub+0x2fa>
   281de:	4653      	mov	r3, sl
   281e0:	1a9f      	subs	r7, r3, r2
   281e2:	45ba      	cmp	sl, r7
   281e4:	4180      	sbcs	r0, r0
   281e6:	1a64      	subs	r4, r4, r1
   281e8:	4240      	negs	r0, r0
   281ea:	1a24      	subs	r4, r4, r0
   281ec:	2601      	movs	r6, #1
   281ee:	e01e      	b.n	2822e <__aeabi_dsub+0xb2>
   281f0:	4bb3      	ldr	r3, [pc, #716]	; (284c0 <__aeabi_dsub+0x344>)
   281f2:	429e      	cmp	r6, r3
   281f4:	d048      	beq.n	28288 <__aeabi_dsub+0x10c>
   281f6:	2380      	movs	r3, #128	; 0x80
   281f8:	041b      	lsls	r3, r3, #16
   281fa:	4319      	orrs	r1, r3
   281fc:	2d38      	cmp	r5, #56	; 0x38
   281fe:	dd00      	ble.n	28202 <__aeabi_dsub+0x86>
   28200:	e119      	b.n	28436 <__aeabi_dsub+0x2ba>
   28202:	2d1f      	cmp	r5, #31
   28204:	dd00      	ble.n	28208 <__aeabi_dsub+0x8c>
   28206:	e14c      	b.n	284a2 <__aeabi_dsub+0x326>
   28208:	2320      	movs	r3, #32
   2820a:	000f      	movs	r7, r1
   2820c:	1b5b      	subs	r3, r3, r5
   2820e:	0010      	movs	r0, r2
   28210:	409a      	lsls	r2, r3
   28212:	409f      	lsls	r7, r3
   28214:	40e8      	lsrs	r0, r5
   28216:	1e53      	subs	r3, r2, #1
   28218:	419a      	sbcs	r2, r3
   2821a:	40e9      	lsrs	r1, r5
   2821c:	4307      	orrs	r7, r0
   2821e:	4317      	orrs	r7, r2
   28220:	4653      	mov	r3, sl
   28222:	1bdf      	subs	r7, r3, r7
   28224:	1a61      	subs	r1, r4, r1
   28226:	45ba      	cmp	sl, r7
   28228:	41a4      	sbcs	r4, r4
   2822a:	4264      	negs	r4, r4
   2822c:	1b0c      	subs	r4, r1, r4
   2822e:	0223      	lsls	r3, r4, #8
   28230:	d400      	bmi.n	28234 <__aeabi_dsub+0xb8>
   28232:	e0c5      	b.n	283c0 <__aeabi_dsub+0x244>
   28234:	0264      	lsls	r4, r4, #9
   28236:	0a65      	lsrs	r5, r4, #9
   28238:	2d00      	cmp	r5, #0
   2823a:	d100      	bne.n	2823e <__aeabi_dsub+0xc2>
   2823c:	e0f6      	b.n	2842c <__aeabi_dsub+0x2b0>
   2823e:	0028      	movs	r0, r5
   28240:	f000 fbd2 	bl	289e8 <__clzsi2>
   28244:	0003      	movs	r3, r0
   28246:	3b08      	subs	r3, #8
   28248:	2b1f      	cmp	r3, #31
   2824a:	dd00      	ble.n	2824e <__aeabi_dsub+0xd2>
   2824c:	e0e9      	b.n	28422 <__aeabi_dsub+0x2a6>
   2824e:	2220      	movs	r2, #32
   28250:	003c      	movs	r4, r7
   28252:	1ad2      	subs	r2, r2, r3
   28254:	409d      	lsls	r5, r3
   28256:	40d4      	lsrs	r4, r2
   28258:	409f      	lsls	r7, r3
   2825a:	4325      	orrs	r5, r4
   2825c:	429e      	cmp	r6, r3
   2825e:	dd00      	ble.n	28262 <__aeabi_dsub+0xe6>
   28260:	e0db      	b.n	2841a <__aeabi_dsub+0x29e>
   28262:	1b9e      	subs	r6, r3, r6
   28264:	1c73      	adds	r3, r6, #1
   28266:	2b1f      	cmp	r3, #31
   28268:	dd00      	ble.n	2826c <__aeabi_dsub+0xf0>
   2826a:	e10a      	b.n	28482 <__aeabi_dsub+0x306>
   2826c:	2220      	movs	r2, #32
   2826e:	0038      	movs	r0, r7
   28270:	1ad2      	subs	r2, r2, r3
   28272:	0029      	movs	r1, r5
   28274:	4097      	lsls	r7, r2
   28276:	002c      	movs	r4, r5
   28278:	4091      	lsls	r1, r2
   2827a:	40d8      	lsrs	r0, r3
   2827c:	1e7a      	subs	r2, r7, #1
   2827e:	4197      	sbcs	r7, r2
   28280:	40dc      	lsrs	r4, r3
   28282:	2600      	movs	r6, #0
   28284:	4301      	orrs	r1, r0
   28286:	430f      	orrs	r7, r1
   28288:	077b      	lsls	r3, r7, #29
   2828a:	d009      	beq.n	282a0 <__aeabi_dsub+0x124>
   2828c:	230f      	movs	r3, #15
   2828e:	403b      	ands	r3, r7
   28290:	2b04      	cmp	r3, #4
   28292:	d005      	beq.n	282a0 <__aeabi_dsub+0x124>
   28294:	1d3b      	adds	r3, r7, #4
   28296:	42bb      	cmp	r3, r7
   28298:	41bf      	sbcs	r7, r7
   2829a:	427f      	negs	r7, r7
   2829c:	19e4      	adds	r4, r4, r7
   2829e:	001f      	movs	r7, r3
   282a0:	0223      	lsls	r3, r4, #8
   282a2:	d525      	bpl.n	282f0 <__aeabi_dsub+0x174>
   282a4:	4b86      	ldr	r3, [pc, #536]	; (284c0 <__aeabi_dsub+0x344>)
   282a6:	3601      	adds	r6, #1
   282a8:	429e      	cmp	r6, r3
   282aa:	d100      	bne.n	282ae <__aeabi_dsub+0x132>
   282ac:	e0af      	b.n	2840e <__aeabi_dsub+0x292>
   282ae:	4b85      	ldr	r3, [pc, #532]	; (284c4 <__aeabi_dsub+0x348>)
   282b0:	2501      	movs	r5, #1
   282b2:	401c      	ands	r4, r3
   282b4:	4643      	mov	r3, r8
   282b6:	0762      	lsls	r2, r4, #29
   282b8:	08ff      	lsrs	r7, r7, #3
   282ba:	0264      	lsls	r4, r4, #9
   282bc:	0576      	lsls	r6, r6, #21
   282be:	4317      	orrs	r7, r2
   282c0:	0b24      	lsrs	r4, r4, #12
   282c2:	0d76      	lsrs	r6, r6, #21
   282c4:	401d      	ands	r5, r3
   282c6:	2100      	movs	r1, #0
   282c8:	0324      	lsls	r4, r4, #12
   282ca:	0b23      	lsrs	r3, r4, #12
   282cc:	0d0c      	lsrs	r4, r1, #20
   282ce:	4a7e      	ldr	r2, [pc, #504]	; (284c8 <__aeabi_dsub+0x34c>)
   282d0:	0524      	lsls	r4, r4, #20
   282d2:	431c      	orrs	r4, r3
   282d4:	4014      	ands	r4, r2
   282d6:	0533      	lsls	r3, r6, #20
   282d8:	4323      	orrs	r3, r4
   282da:	005b      	lsls	r3, r3, #1
   282dc:	07ed      	lsls	r5, r5, #31
   282de:	085b      	lsrs	r3, r3, #1
   282e0:	432b      	orrs	r3, r5
   282e2:	0038      	movs	r0, r7
   282e4:	0019      	movs	r1, r3
   282e6:	bc1c      	pop	{r2, r3, r4}
   282e8:	4690      	mov	r8, r2
   282ea:	4699      	mov	r9, r3
   282ec:	46a2      	mov	sl, r4
   282ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
   282f0:	2501      	movs	r5, #1
   282f2:	4643      	mov	r3, r8
   282f4:	0762      	lsls	r2, r4, #29
   282f6:	08ff      	lsrs	r7, r7, #3
   282f8:	4317      	orrs	r7, r2
   282fa:	08e4      	lsrs	r4, r4, #3
   282fc:	401d      	ands	r5, r3
   282fe:	4b70      	ldr	r3, [pc, #448]	; (284c0 <__aeabi_dsub+0x344>)
   28300:	429e      	cmp	r6, r3
   28302:	d036      	beq.n	28372 <__aeabi_dsub+0x1f6>
   28304:	0324      	lsls	r4, r4, #12
   28306:	0576      	lsls	r6, r6, #21
   28308:	0b24      	lsrs	r4, r4, #12
   2830a:	0d76      	lsrs	r6, r6, #21
   2830c:	e7db      	b.n	282c6 <__aeabi_dsub+0x14a>
   2830e:	4663      	mov	r3, ip
   28310:	1af3      	subs	r3, r6, r3
   28312:	2b00      	cmp	r3, #0
   28314:	dc00      	bgt.n	28318 <__aeabi_dsub+0x19c>
   28316:	e094      	b.n	28442 <__aeabi_dsub+0x2c6>
   28318:	4660      	mov	r0, ip
   2831a:	2800      	cmp	r0, #0
   2831c:	d035      	beq.n	2838a <__aeabi_dsub+0x20e>
   2831e:	4868      	ldr	r0, [pc, #416]	; (284c0 <__aeabi_dsub+0x344>)
   28320:	4286      	cmp	r6, r0
   28322:	d0b1      	beq.n	28288 <__aeabi_dsub+0x10c>
   28324:	2780      	movs	r7, #128	; 0x80
   28326:	043f      	lsls	r7, r7, #16
   28328:	4339      	orrs	r1, r7
   2832a:	2b38      	cmp	r3, #56	; 0x38
   2832c:	dc00      	bgt.n	28330 <__aeabi_dsub+0x1b4>
   2832e:	e0fd      	b.n	2852c <__aeabi_dsub+0x3b0>
   28330:	430a      	orrs	r2, r1
   28332:	0017      	movs	r7, r2
   28334:	2100      	movs	r1, #0
   28336:	1e7a      	subs	r2, r7, #1
   28338:	4197      	sbcs	r7, r2
   2833a:	4457      	add	r7, sl
   2833c:	4557      	cmp	r7, sl
   2833e:	4180      	sbcs	r0, r0
   28340:	1909      	adds	r1, r1, r4
   28342:	4244      	negs	r4, r0
   28344:	190c      	adds	r4, r1, r4
   28346:	0223      	lsls	r3, r4, #8
   28348:	d53a      	bpl.n	283c0 <__aeabi_dsub+0x244>
   2834a:	4b5d      	ldr	r3, [pc, #372]	; (284c0 <__aeabi_dsub+0x344>)
   2834c:	3601      	adds	r6, #1
   2834e:	429e      	cmp	r6, r3
   28350:	d100      	bne.n	28354 <__aeabi_dsub+0x1d8>
   28352:	e14b      	b.n	285ec <__aeabi_dsub+0x470>
   28354:	2201      	movs	r2, #1
   28356:	4b5b      	ldr	r3, [pc, #364]	; (284c4 <__aeabi_dsub+0x348>)
   28358:	401c      	ands	r4, r3
   2835a:	087b      	lsrs	r3, r7, #1
   2835c:	4017      	ands	r7, r2
   2835e:	431f      	orrs	r7, r3
   28360:	07e2      	lsls	r2, r4, #31
   28362:	4317      	orrs	r7, r2
   28364:	0864      	lsrs	r4, r4, #1
   28366:	e78f      	b.n	28288 <__aeabi_dsub+0x10c>
   28368:	0008      	movs	r0, r1
   2836a:	4310      	orrs	r0, r2
   2836c:	d000      	beq.n	28370 <__aeabi_dsub+0x1f4>
   2836e:	e724      	b.n	281ba <__aeabi_dsub+0x3e>
   28370:	e721      	b.n	281b6 <__aeabi_dsub+0x3a>
   28372:	0023      	movs	r3, r4
   28374:	433b      	orrs	r3, r7
   28376:	d100      	bne.n	2837a <__aeabi_dsub+0x1fe>
   28378:	e1b9      	b.n	286ee <__aeabi_dsub+0x572>
   2837a:	2280      	movs	r2, #128	; 0x80
   2837c:	0312      	lsls	r2, r2, #12
   2837e:	4314      	orrs	r4, r2
   28380:	0324      	lsls	r4, r4, #12
   28382:	0b24      	lsrs	r4, r4, #12
   28384:	e79f      	b.n	282c6 <__aeabi_dsub+0x14a>
   28386:	002e      	movs	r6, r5
   28388:	e77e      	b.n	28288 <__aeabi_dsub+0x10c>
   2838a:	0008      	movs	r0, r1
   2838c:	4310      	orrs	r0, r2
   2838e:	d100      	bne.n	28392 <__aeabi_dsub+0x216>
   28390:	e0ca      	b.n	28528 <__aeabi_dsub+0x3ac>
   28392:	1e58      	subs	r0, r3, #1
   28394:	4684      	mov	ip, r0
   28396:	2800      	cmp	r0, #0
   28398:	d000      	beq.n	2839c <__aeabi_dsub+0x220>
   2839a:	e0e7      	b.n	2856c <__aeabi_dsub+0x3f0>
   2839c:	4452      	add	r2, sl
   2839e:	4552      	cmp	r2, sl
   283a0:	4180      	sbcs	r0, r0
   283a2:	1864      	adds	r4, r4, r1
   283a4:	4240      	negs	r0, r0
   283a6:	1824      	adds	r4, r4, r0
   283a8:	0017      	movs	r7, r2
   283aa:	2601      	movs	r6, #1
   283ac:	0223      	lsls	r3, r4, #8
   283ae:	d507      	bpl.n	283c0 <__aeabi_dsub+0x244>
   283b0:	2602      	movs	r6, #2
   283b2:	e7cf      	b.n	28354 <__aeabi_dsub+0x1d8>
   283b4:	4664      	mov	r4, ip
   283b6:	432c      	orrs	r4, r5
   283b8:	d100      	bne.n	283bc <__aeabi_dsub+0x240>
   283ba:	e1b3      	b.n	28724 <__aeabi_dsub+0x5a8>
   283bc:	002c      	movs	r4, r5
   283be:	4667      	mov	r7, ip
   283c0:	077b      	lsls	r3, r7, #29
   283c2:	d000      	beq.n	283c6 <__aeabi_dsub+0x24a>
   283c4:	e762      	b.n	2828c <__aeabi_dsub+0x110>
   283c6:	0763      	lsls	r3, r4, #29
   283c8:	08ff      	lsrs	r7, r7, #3
   283ca:	431f      	orrs	r7, r3
   283cc:	2501      	movs	r5, #1
   283ce:	4643      	mov	r3, r8
   283d0:	08e4      	lsrs	r4, r4, #3
   283d2:	401d      	ands	r5, r3
   283d4:	e793      	b.n	282fe <__aeabi_dsub+0x182>
   283d6:	2d00      	cmp	r5, #0
   283d8:	d178      	bne.n	284cc <__aeabi_dsub+0x350>
   283da:	1c75      	adds	r5, r6, #1
   283dc:	056d      	lsls	r5, r5, #21
   283de:	0d6d      	lsrs	r5, r5, #21
   283e0:	2d01      	cmp	r5, #1
   283e2:	dc00      	bgt.n	283e6 <__aeabi_dsub+0x26a>
   283e4:	e0f2      	b.n	285cc <__aeabi_dsub+0x450>
   283e6:	4650      	mov	r0, sl
   283e8:	1a80      	subs	r0, r0, r2
   283ea:	4582      	cmp	sl, r0
   283ec:	41bf      	sbcs	r7, r7
   283ee:	1a65      	subs	r5, r4, r1
   283f0:	427f      	negs	r7, r7
   283f2:	1bed      	subs	r5, r5, r7
   283f4:	4684      	mov	ip, r0
   283f6:	0228      	lsls	r0, r5, #8
   283f8:	d400      	bmi.n	283fc <__aeabi_dsub+0x280>
   283fa:	e08c      	b.n	28516 <__aeabi_dsub+0x39a>
   283fc:	4650      	mov	r0, sl
   283fe:	1a17      	subs	r7, r2, r0
   28400:	42ba      	cmp	r2, r7
   28402:	4192      	sbcs	r2, r2
   28404:	1b0c      	subs	r4, r1, r4
   28406:	4255      	negs	r5, r2
   28408:	1b65      	subs	r5, r4, r5
   2840a:	4698      	mov	r8, r3
   2840c:	e714      	b.n	28238 <__aeabi_dsub+0xbc>
   2840e:	2501      	movs	r5, #1
   28410:	4643      	mov	r3, r8
   28412:	2400      	movs	r4, #0
   28414:	401d      	ands	r5, r3
   28416:	2700      	movs	r7, #0
   28418:	e755      	b.n	282c6 <__aeabi_dsub+0x14a>
   2841a:	4c2a      	ldr	r4, [pc, #168]	; (284c4 <__aeabi_dsub+0x348>)
   2841c:	1af6      	subs	r6, r6, r3
   2841e:	402c      	ands	r4, r5
   28420:	e732      	b.n	28288 <__aeabi_dsub+0x10c>
   28422:	003d      	movs	r5, r7
   28424:	3828      	subs	r0, #40	; 0x28
   28426:	4085      	lsls	r5, r0
   28428:	2700      	movs	r7, #0
   2842a:	e717      	b.n	2825c <__aeabi_dsub+0xe0>
   2842c:	0038      	movs	r0, r7
   2842e:	f000 fadb 	bl	289e8 <__clzsi2>
   28432:	3020      	adds	r0, #32
   28434:	e706      	b.n	28244 <__aeabi_dsub+0xc8>
   28436:	430a      	orrs	r2, r1
   28438:	0017      	movs	r7, r2
   2843a:	2100      	movs	r1, #0
   2843c:	1e7a      	subs	r2, r7, #1
   2843e:	4197      	sbcs	r7, r2
   28440:	e6ee      	b.n	28220 <__aeabi_dsub+0xa4>
   28442:	2b00      	cmp	r3, #0
   28444:	d000      	beq.n	28448 <__aeabi_dsub+0x2cc>
   28446:	e0e5      	b.n	28614 <__aeabi_dsub+0x498>
   28448:	1c73      	adds	r3, r6, #1
   2844a:	469c      	mov	ip, r3
   2844c:	055b      	lsls	r3, r3, #21
   2844e:	0d5b      	lsrs	r3, r3, #21
   28450:	2b01      	cmp	r3, #1
   28452:	dc00      	bgt.n	28456 <__aeabi_dsub+0x2da>
   28454:	e09f      	b.n	28596 <__aeabi_dsub+0x41a>
   28456:	4b1a      	ldr	r3, [pc, #104]	; (284c0 <__aeabi_dsub+0x344>)
   28458:	459c      	cmp	ip, r3
   2845a:	d100      	bne.n	2845e <__aeabi_dsub+0x2e2>
   2845c:	e0c5      	b.n	285ea <__aeabi_dsub+0x46e>
   2845e:	4452      	add	r2, sl
   28460:	4552      	cmp	r2, sl
   28462:	4180      	sbcs	r0, r0
   28464:	1864      	adds	r4, r4, r1
   28466:	4240      	negs	r0, r0
   28468:	1824      	adds	r4, r4, r0
   2846a:	07e7      	lsls	r7, r4, #31
   2846c:	0852      	lsrs	r2, r2, #1
   2846e:	4317      	orrs	r7, r2
   28470:	0864      	lsrs	r4, r4, #1
   28472:	4666      	mov	r6, ip
   28474:	e708      	b.n	28288 <__aeabi_dsub+0x10c>
   28476:	4812      	ldr	r0, [pc, #72]	; (284c0 <__aeabi_dsub+0x344>)
   28478:	4285      	cmp	r5, r0
   2847a:	d100      	bne.n	2847e <__aeabi_dsub+0x302>
   2847c:	e085      	b.n	2858a <__aeabi_dsub+0x40e>
   2847e:	001d      	movs	r5, r3
   28480:	e6bc      	b.n	281fc <__aeabi_dsub+0x80>
   28482:	0029      	movs	r1, r5
   28484:	3e1f      	subs	r6, #31
   28486:	40f1      	lsrs	r1, r6
   28488:	2b20      	cmp	r3, #32
   2848a:	d100      	bne.n	2848e <__aeabi_dsub+0x312>
   2848c:	e07f      	b.n	2858e <__aeabi_dsub+0x412>
   2848e:	2240      	movs	r2, #64	; 0x40
   28490:	1ad3      	subs	r3, r2, r3
   28492:	409d      	lsls	r5, r3
   28494:	432f      	orrs	r7, r5
   28496:	1e7d      	subs	r5, r7, #1
   28498:	41af      	sbcs	r7, r5
   2849a:	2400      	movs	r4, #0
   2849c:	430f      	orrs	r7, r1
   2849e:	2600      	movs	r6, #0
   284a0:	e78e      	b.n	283c0 <__aeabi_dsub+0x244>
   284a2:	002b      	movs	r3, r5
   284a4:	000f      	movs	r7, r1
   284a6:	3b20      	subs	r3, #32
   284a8:	40df      	lsrs	r7, r3
   284aa:	2d20      	cmp	r5, #32
   284ac:	d071      	beq.n	28592 <__aeabi_dsub+0x416>
   284ae:	2340      	movs	r3, #64	; 0x40
   284b0:	1b5d      	subs	r5, r3, r5
   284b2:	40a9      	lsls	r1, r5
   284b4:	430a      	orrs	r2, r1
   284b6:	1e51      	subs	r1, r2, #1
   284b8:	418a      	sbcs	r2, r1
   284ba:	2100      	movs	r1, #0
   284bc:	4317      	orrs	r7, r2
   284be:	e6af      	b.n	28220 <__aeabi_dsub+0xa4>
   284c0:	000007ff 	.word	0x000007ff
   284c4:	ff7fffff 	.word	0xff7fffff
   284c8:	800fffff 	.word	0x800fffff
   284cc:	2e00      	cmp	r6, #0
   284ce:	d03e      	beq.n	2854e <__aeabi_dsub+0x3d2>
   284d0:	4eb3      	ldr	r6, [pc, #716]	; (287a0 <__aeabi_dsub+0x624>)
   284d2:	45b4      	cmp	ip, r6
   284d4:	d045      	beq.n	28562 <__aeabi_dsub+0x3e6>
   284d6:	2680      	movs	r6, #128	; 0x80
   284d8:	0436      	lsls	r6, r6, #16
   284da:	426d      	negs	r5, r5
   284dc:	4334      	orrs	r4, r6
   284de:	2d38      	cmp	r5, #56	; 0x38
   284e0:	dd00      	ble.n	284e4 <__aeabi_dsub+0x368>
   284e2:	e0a8      	b.n	28636 <__aeabi_dsub+0x4ba>
   284e4:	2d1f      	cmp	r5, #31
   284e6:	dd00      	ble.n	284ea <__aeabi_dsub+0x36e>
   284e8:	e11f      	b.n	2872a <__aeabi_dsub+0x5ae>
   284ea:	2620      	movs	r6, #32
   284ec:	0027      	movs	r7, r4
   284ee:	4650      	mov	r0, sl
   284f0:	1b76      	subs	r6, r6, r5
   284f2:	40b7      	lsls	r7, r6
   284f4:	40e8      	lsrs	r0, r5
   284f6:	4307      	orrs	r7, r0
   284f8:	4650      	mov	r0, sl
   284fa:	40b0      	lsls	r0, r6
   284fc:	1e46      	subs	r6, r0, #1
   284fe:	41b0      	sbcs	r0, r6
   28500:	40ec      	lsrs	r4, r5
   28502:	4338      	orrs	r0, r7
   28504:	1a17      	subs	r7, r2, r0
   28506:	42ba      	cmp	r2, r7
   28508:	4192      	sbcs	r2, r2
   2850a:	1b0c      	subs	r4, r1, r4
   2850c:	4252      	negs	r2, r2
   2850e:	1aa4      	subs	r4, r4, r2
   28510:	4666      	mov	r6, ip
   28512:	4698      	mov	r8, r3
   28514:	e68b      	b.n	2822e <__aeabi_dsub+0xb2>
   28516:	4664      	mov	r4, ip
   28518:	4667      	mov	r7, ip
   2851a:	432c      	orrs	r4, r5
   2851c:	d000      	beq.n	28520 <__aeabi_dsub+0x3a4>
   2851e:	e68b      	b.n	28238 <__aeabi_dsub+0xbc>
   28520:	2500      	movs	r5, #0
   28522:	2600      	movs	r6, #0
   28524:	2700      	movs	r7, #0
   28526:	e6ea      	b.n	282fe <__aeabi_dsub+0x182>
   28528:	001e      	movs	r6, r3
   2852a:	e6ad      	b.n	28288 <__aeabi_dsub+0x10c>
   2852c:	2b1f      	cmp	r3, #31
   2852e:	dc60      	bgt.n	285f2 <__aeabi_dsub+0x476>
   28530:	2720      	movs	r7, #32
   28532:	1af8      	subs	r0, r7, r3
   28534:	000f      	movs	r7, r1
   28536:	4684      	mov	ip, r0
   28538:	4087      	lsls	r7, r0
   2853a:	0010      	movs	r0, r2
   2853c:	40d8      	lsrs	r0, r3
   2853e:	4307      	orrs	r7, r0
   28540:	4660      	mov	r0, ip
   28542:	4082      	lsls	r2, r0
   28544:	1e50      	subs	r0, r2, #1
   28546:	4182      	sbcs	r2, r0
   28548:	40d9      	lsrs	r1, r3
   2854a:	4317      	orrs	r7, r2
   2854c:	e6f5      	b.n	2833a <__aeabi_dsub+0x1be>
   2854e:	0026      	movs	r6, r4
   28550:	4650      	mov	r0, sl
   28552:	4306      	orrs	r6, r0
   28554:	d005      	beq.n	28562 <__aeabi_dsub+0x3e6>
   28556:	43ed      	mvns	r5, r5
   28558:	2d00      	cmp	r5, #0
   2855a:	d0d3      	beq.n	28504 <__aeabi_dsub+0x388>
   2855c:	4e90      	ldr	r6, [pc, #576]	; (287a0 <__aeabi_dsub+0x624>)
   2855e:	45b4      	cmp	ip, r6
   28560:	d1bd      	bne.n	284de <__aeabi_dsub+0x362>
   28562:	000c      	movs	r4, r1
   28564:	0017      	movs	r7, r2
   28566:	4666      	mov	r6, ip
   28568:	4698      	mov	r8, r3
   2856a:	e68d      	b.n	28288 <__aeabi_dsub+0x10c>
   2856c:	488c      	ldr	r0, [pc, #560]	; (287a0 <__aeabi_dsub+0x624>)
   2856e:	4283      	cmp	r3, r0
   28570:	d00b      	beq.n	2858a <__aeabi_dsub+0x40e>
   28572:	4663      	mov	r3, ip
   28574:	e6d9      	b.n	2832a <__aeabi_dsub+0x1ae>
   28576:	2d00      	cmp	r5, #0
   28578:	d000      	beq.n	2857c <__aeabi_dsub+0x400>
   2857a:	e096      	b.n	286aa <__aeabi_dsub+0x52e>
   2857c:	0008      	movs	r0, r1
   2857e:	4310      	orrs	r0, r2
   28580:	d100      	bne.n	28584 <__aeabi_dsub+0x408>
   28582:	e0e2      	b.n	2874a <__aeabi_dsub+0x5ce>
   28584:	000c      	movs	r4, r1
   28586:	0017      	movs	r7, r2
   28588:	4698      	mov	r8, r3
   2858a:	4e85      	ldr	r6, [pc, #532]	; (287a0 <__aeabi_dsub+0x624>)
   2858c:	e67c      	b.n	28288 <__aeabi_dsub+0x10c>
   2858e:	2500      	movs	r5, #0
   28590:	e780      	b.n	28494 <__aeabi_dsub+0x318>
   28592:	2100      	movs	r1, #0
   28594:	e78e      	b.n	284b4 <__aeabi_dsub+0x338>
   28596:	0023      	movs	r3, r4
   28598:	4650      	mov	r0, sl
   2859a:	4303      	orrs	r3, r0
   2859c:	2e00      	cmp	r6, #0
   2859e:	d000      	beq.n	285a2 <__aeabi_dsub+0x426>
   285a0:	e0a8      	b.n	286f4 <__aeabi_dsub+0x578>
   285a2:	2b00      	cmp	r3, #0
   285a4:	d100      	bne.n	285a8 <__aeabi_dsub+0x42c>
   285a6:	e0de      	b.n	28766 <__aeabi_dsub+0x5ea>
   285a8:	000b      	movs	r3, r1
   285aa:	4313      	orrs	r3, r2
   285ac:	d100      	bne.n	285b0 <__aeabi_dsub+0x434>
   285ae:	e66b      	b.n	28288 <__aeabi_dsub+0x10c>
   285b0:	4452      	add	r2, sl
   285b2:	4552      	cmp	r2, sl
   285b4:	4180      	sbcs	r0, r0
   285b6:	1864      	adds	r4, r4, r1
   285b8:	4240      	negs	r0, r0
   285ba:	1824      	adds	r4, r4, r0
   285bc:	0017      	movs	r7, r2
   285be:	0223      	lsls	r3, r4, #8
   285c0:	d400      	bmi.n	285c4 <__aeabi_dsub+0x448>
   285c2:	e6fd      	b.n	283c0 <__aeabi_dsub+0x244>
   285c4:	4b77      	ldr	r3, [pc, #476]	; (287a4 <__aeabi_dsub+0x628>)
   285c6:	4666      	mov	r6, ip
   285c8:	401c      	ands	r4, r3
   285ca:	e65d      	b.n	28288 <__aeabi_dsub+0x10c>
   285cc:	0025      	movs	r5, r4
   285ce:	4650      	mov	r0, sl
   285d0:	4305      	orrs	r5, r0
   285d2:	2e00      	cmp	r6, #0
   285d4:	d1cf      	bne.n	28576 <__aeabi_dsub+0x3fa>
   285d6:	2d00      	cmp	r5, #0
   285d8:	d14f      	bne.n	2867a <__aeabi_dsub+0x4fe>
   285da:	000c      	movs	r4, r1
   285dc:	4314      	orrs	r4, r2
   285de:	d100      	bne.n	285e2 <__aeabi_dsub+0x466>
   285e0:	e0a0      	b.n	28724 <__aeabi_dsub+0x5a8>
   285e2:	000c      	movs	r4, r1
   285e4:	0017      	movs	r7, r2
   285e6:	4698      	mov	r8, r3
   285e8:	e64e      	b.n	28288 <__aeabi_dsub+0x10c>
   285ea:	4666      	mov	r6, ip
   285ec:	2400      	movs	r4, #0
   285ee:	2700      	movs	r7, #0
   285f0:	e685      	b.n	282fe <__aeabi_dsub+0x182>
   285f2:	001f      	movs	r7, r3
   285f4:	0008      	movs	r0, r1
   285f6:	3f20      	subs	r7, #32
   285f8:	40f8      	lsrs	r0, r7
   285fa:	0007      	movs	r7, r0
   285fc:	2b20      	cmp	r3, #32
   285fe:	d100      	bne.n	28602 <__aeabi_dsub+0x486>
   28600:	e08e      	b.n	28720 <__aeabi_dsub+0x5a4>
   28602:	2040      	movs	r0, #64	; 0x40
   28604:	1ac3      	subs	r3, r0, r3
   28606:	4099      	lsls	r1, r3
   28608:	430a      	orrs	r2, r1
   2860a:	1e51      	subs	r1, r2, #1
   2860c:	418a      	sbcs	r2, r1
   2860e:	2100      	movs	r1, #0
   28610:	4317      	orrs	r7, r2
   28612:	e692      	b.n	2833a <__aeabi_dsub+0x1be>
   28614:	2e00      	cmp	r6, #0
   28616:	d114      	bne.n	28642 <__aeabi_dsub+0x4c6>
   28618:	0026      	movs	r6, r4
   2861a:	4650      	mov	r0, sl
   2861c:	4306      	orrs	r6, r0
   2861e:	d062      	beq.n	286e6 <__aeabi_dsub+0x56a>
   28620:	43db      	mvns	r3, r3
   28622:	2b00      	cmp	r3, #0
   28624:	d15c      	bne.n	286e0 <__aeabi_dsub+0x564>
   28626:	1887      	adds	r7, r0, r2
   28628:	4297      	cmp	r7, r2
   2862a:	4192      	sbcs	r2, r2
   2862c:	1864      	adds	r4, r4, r1
   2862e:	4252      	negs	r2, r2
   28630:	18a4      	adds	r4, r4, r2
   28632:	4666      	mov	r6, ip
   28634:	e687      	b.n	28346 <__aeabi_dsub+0x1ca>
   28636:	4650      	mov	r0, sl
   28638:	4320      	orrs	r0, r4
   2863a:	1e44      	subs	r4, r0, #1
   2863c:	41a0      	sbcs	r0, r4
   2863e:	2400      	movs	r4, #0
   28640:	e760      	b.n	28504 <__aeabi_dsub+0x388>
   28642:	4e57      	ldr	r6, [pc, #348]	; (287a0 <__aeabi_dsub+0x624>)
   28644:	45b4      	cmp	ip, r6
   28646:	d04e      	beq.n	286e6 <__aeabi_dsub+0x56a>
   28648:	2680      	movs	r6, #128	; 0x80
   2864a:	0436      	lsls	r6, r6, #16
   2864c:	425b      	negs	r3, r3
   2864e:	4334      	orrs	r4, r6
   28650:	2b38      	cmp	r3, #56	; 0x38
   28652:	dd00      	ble.n	28656 <__aeabi_dsub+0x4da>
   28654:	e07f      	b.n	28756 <__aeabi_dsub+0x5da>
   28656:	2b1f      	cmp	r3, #31
   28658:	dd00      	ble.n	2865c <__aeabi_dsub+0x4e0>
   2865a:	e08b      	b.n	28774 <__aeabi_dsub+0x5f8>
   2865c:	2620      	movs	r6, #32
   2865e:	0027      	movs	r7, r4
   28660:	4650      	mov	r0, sl
   28662:	1af6      	subs	r6, r6, r3
   28664:	40b7      	lsls	r7, r6
   28666:	40d8      	lsrs	r0, r3
   28668:	4307      	orrs	r7, r0
   2866a:	4650      	mov	r0, sl
   2866c:	40b0      	lsls	r0, r6
   2866e:	1e46      	subs	r6, r0, #1
   28670:	41b0      	sbcs	r0, r6
   28672:	4307      	orrs	r7, r0
   28674:	40dc      	lsrs	r4, r3
   28676:	18bf      	adds	r7, r7, r2
   28678:	e7d6      	b.n	28628 <__aeabi_dsub+0x4ac>
   2867a:	000d      	movs	r5, r1
   2867c:	4315      	orrs	r5, r2
   2867e:	d100      	bne.n	28682 <__aeabi_dsub+0x506>
   28680:	e602      	b.n	28288 <__aeabi_dsub+0x10c>
   28682:	4650      	mov	r0, sl
   28684:	1a80      	subs	r0, r0, r2
   28686:	4582      	cmp	sl, r0
   28688:	41bf      	sbcs	r7, r7
   2868a:	1a65      	subs	r5, r4, r1
   2868c:	427f      	negs	r7, r7
   2868e:	1bed      	subs	r5, r5, r7
   28690:	4684      	mov	ip, r0
   28692:	0228      	lsls	r0, r5, #8
   28694:	d400      	bmi.n	28698 <__aeabi_dsub+0x51c>
   28696:	e68d      	b.n	283b4 <__aeabi_dsub+0x238>
   28698:	4650      	mov	r0, sl
   2869a:	1a17      	subs	r7, r2, r0
   2869c:	42ba      	cmp	r2, r7
   2869e:	4192      	sbcs	r2, r2
   286a0:	1b0c      	subs	r4, r1, r4
   286a2:	4252      	negs	r2, r2
   286a4:	1aa4      	subs	r4, r4, r2
   286a6:	4698      	mov	r8, r3
   286a8:	e5ee      	b.n	28288 <__aeabi_dsub+0x10c>
   286aa:	000d      	movs	r5, r1
   286ac:	4315      	orrs	r5, r2
   286ae:	d100      	bne.n	286b2 <__aeabi_dsub+0x536>
   286b0:	e76b      	b.n	2858a <__aeabi_dsub+0x40e>
   286b2:	4650      	mov	r0, sl
   286b4:	0767      	lsls	r7, r4, #29
   286b6:	08c0      	lsrs	r0, r0, #3
   286b8:	4307      	orrs	r7, r0
   286ba:	2080      	movs	r0, #128	; 0x80
   286bc:	08e4      	lsrs	r4, r4, #3
   286be:	0300      	lsls	r0, r0, #12
   286c0:	4204      	tst	r4, r0
   286c2:	d007      	beq.n	286d4 <__aeabi_dsub+0x558>
   286c4:	08cd      	lsrs	r5, r1, #3
   286c6:	4205      	tst	r5, r0
   286c8:	d104      	bne.n	286d4 <__aeabi_dsub+0x558>
   286ca:	002c      	movs	r4, r5
   286cc:	4698      	mov	r8, r3
   286ce:	08d7      	lsrs	r7, r2, #3
   286d0:	0749      	lsls	r1, r1, #29
   286d2:	430f      	orrs	r7, r1
   286d4:	0f7b      	lsrs	r3, r7, #29
   286d6:	00e4      	lsls	r4, r4, #3
   286d8:	431c      	orrs	r4, r3
   286da:	00ff      	lsls	r7, r7, #3
   286dc:	4e30      	ldr	r6, [pc, #192]	; (287a0 <__aeabi_dsub+0x624>)
   286de:	e5d3      	b.n	28288 <__aeabi_dsub+0x10c>
   286e0:	4e2f      	ldr	r6, [pc, #188]	; (287a0 <__aeabi_dsub+0x624>)
   286e2:	45b4      	cmp	ip, r6
   286e4:	d1b4      	bne.n	28650 <__aeabi_dsub+0x4d4>
   286e6:	000c      	movs	r4, r1
   286e8:	0017      	movs	r7, r2
   286ea:	4666      	mov	r6, ip
   286ec:	e5cc      	b.n	28288 <__aeabi_dsub+0x10c>
   286ee:	2700      	movs	r7, #0
   286f0:	2400      	movs	r4, #0
   286f2:	e5e8      	b.n	282c6 <__aeabi_dsub+0x14a>
   286f4:	2b00      	cmp	r3, #0
   286f6:	d039      	beq.n	2876c <__aeabi_dsub+0x5f0>
   286f8:	000b      	movs	r3, r1
   286fa:	4313      	orrs	r3, r2
   286fc:	d100      	bne.n	28700 <__aeabi_dsub+0x584>
   286fe:	e744      	b.n	2858a <__aeabi_dsub+0x40e>
   28700:	08c0      	lsrs	r0, r0, #3
   28702:	0767      	lsls	r7, r4, #29
   28704:	4307      	orrs	r7, r0
   28706:	2080      	movs	r0, #128	; 0x80
   28708:	08e4      	lsrs	r4, r4, #3
   2870a:	0300      	lsls	r0, r0, #12
   2870c:	4204      	tst	r4, r0
   2870e:	d0e1      	beq.n	286d4 <__aeabi_dsub+0x558>
   28710:	08cb      	lsrs	r3, r1, #3
   28712:	4203      	tst	r3, r0
   28714:	d1de      	bne.n	286d4 <__aeabi_dsub+0x558>
   28716:	08d7      	lsrs	r7, r2, #3
   28718:	0749      	lsls	r1, r1, #29
   2871a:	430f      	orrs	r7, r1
   2871c:	001c      	movs	r4, r3
   2871e:	e7d9      	b.n	286d4 <__aeabi_dsub+0x558>
   28720:	2100      	movs	r1, #0
   28722:	e771      	b.n	28608 <__aeabi_dsub+0x48c>
   28724:	2500      	movs	r5, #0
   28726:	2700      	movs	r7, #0
   28728:	e5e9      	b.n	282fe <__aeabi_dsub+0x182>
   2872a:	002e      	movs	r6, r5
   2872c:	0027      	movs	r7, r4
   2872e:	3e20      	subs	r6, #32
   28730:	40f7      	lsrs	r7, r6
   28732:	2d20      	cmp	r5, #32
   28734:	d02f      	beq.n	28796 <__aeabi_dsub+0x61a>
   28736:	2640      	movs	r6, #64	; 0x40
   28738:	1b75      	subs	r5, r6, r5
   2873a:	40ac      	lsls	r4, r5
   2873c:	4650      	mov	r0, sl
   2873e:	4320      	orrs	r0, r4
   28740:	1e44      	subs	r4, r0, #1
   28742:	41a0      	sbcs	r0, r4
   28744:	2400      	movs	r4, #0
   28746:	4338      	orrs	r0, r7
   28748:	e6dc      	b.n	28504 <__aeabi_dsub+0x388>
   2874a:	2480      	movs	r4, #128	; 0x80
   2874c:	2500      	movs	r5, #0
   2874e:	0324      	lsls	r4, r4, #12
   28750:	4e13      	ldr	r6, [pc, #76]	; (287a0 <__aeabi_dsub+0x624>)
   28752:	2700      	movs	r7, #0
   28754:	e5d3      	b.n	282fe <__aeabi_dsub+0x182>
   28756:	4650      	mov	r0, sl
   28758:	4320      	orrs	r0, r4
   2875a:	0007      	movs	r7, r0
   2875c:	1e78      	subs	r0, r7, #1
   2875e:	4187      	sbcs	r7, r0
   28760:	2400      	movs	r4, #0
   28762:	18bf      	adds	r7, r7, r2
   28764:	e760      	b.n	28628 <__aeabi_dsub+0x4ac>
   28766:	000c      	movs	r4, r1
   28768:	0017      	movs	r7, r2
   2876a:	e58d      	b.n	28288 <__aeabi_dsub+0x10c>
   2876c:	000c      	movs	r4, r1
   2876e:	0017      	movs	r7, r2
   28770:	4e0b      	ldr	r6, [pc, #44]	; (287a0 <__aeabi_dsub+0x624>)
   28772:	e589      	b.n	28288 <__aeabi_dsub+0x10c>
   28774:	001e      	movs	r6, r3
   28776:	0027      	movs	r7, r4
   28778:	3e20      	subs	r6, #32
   2877a:	40f7      	lsrs	r7, r6
   2877c:	2b20      	cmp	r3, #32
   2877e:	d00c      	beq.n	2879a <__aeabi_dsub+0x61e>
   28780:	2640      	movs	r6, #64	; 0x40
   28782:	1af3      	subs	r3, r6, r3
   28784:	409c      	lsls	r4, r3
   28786:	4650      	mov	r0, sl
   28788:	4320      	orrs	r0, r4
   2878a:	1e44      	subs	r4, r0, #1
   2878c:	41a0      	sbcs	r0, r4
   2878e:	4307      	orrs	r7, r0
   28790:	2400      	movs	r4, #0
   28792:	18bf      	adds	r7, r7, r2
   28794:	e748      	b.n	28628 <__aeabi_dsub+0x4ac>
   28796:	2400      	movs	r4, #0
   28798:	e7d0      	b.n	2873c <__aeabi_dsub+0x5c0>
   2879a:	2400      	movs	r4, #0
   2879c:	e7f3      	b.n	28786 <__aeabi_dsub+0x60a>
   2879e:	46c0      	nop			; (mov r8, r8)
   287a0:	000007ff 	.word	0x000007ff
   287a4:	ff7fffff 	.word	0xff7fffff

000287a8 <__aeabi_dcmpun>:
   287a8:	b570      	push	{r4, r5, r6, lr}
   287aa:	4e0e      	ldr	r6, [pc, #56]	; (287e4 <__aeabi_dcmpun+0x3c>)
   287ac:	030d      	lsls	r5, r1, #12
   287ae:	031c      	lsls	r4, r3, #12
   287b0:	0049      	lsls	r1, r1, #1
   287b2:	005b      	lsls	r3, r3, #1
   287b4:	0b2d      	lsrs	r5, r5, #12
   287b6:	0d49      	lsrs	r1, r1, #21
   287b8:	0b24      	lsrs	r4, r4, #12
   287ba:	0d5b      	lsrs	r3, r3, #21
   287bc:	42b1      	cmp	r1, r6
   287be:	d004      	beq.n	287ca <__aeabi_dcmpun+0x22>
   287c0:	4908      	ldr	r1, [pc, #32]	; (287e4 <__aeabi_dcmpun+0x3c>)
   287c2:	2000      	movs	r0, #0
   287c4:	428b      	cmp	r3, r1
   287c6:	d008      	beq.n	287da <__aeabi_dcmpun+0x32>
   287c8:	bd70      	pop	{r4, r5, r6, pc}
   287ca:	4305      	orrs	r5, r0
   287cc:	2001      	movs	r0, #1
   287ce:	2d00      	cmp	r5, #0
   287d0:	d1fa      	bne.n	287c8 <__aeabi_dcmpun+0x20>
   287d2:	4904      	ldr	r1, [pc, #16]	; (287e4 <__aeabi_dcmpun+0x3c>)
   287d4:	2000      	movs	r0, #0
   287d6:	428b      	cmp	r3, r1
   287d8:	d1f6      	bne.n	287c8 <__aeabi_dcmpun+0x20>
   287da:	4314      	orrs	r4, r2
   287dc:	0020      	movs	r0, r4
   287de:	1e44      	subs	r4, r0, #1
   287e0:	41a0      	sbcs	r0, r4
   287e2:	e7f1      	b.n	287c8 <__aeabi_dcmpun+0x20>
   287e4:	000007ff 	.word	0x000007ff

000287e8 <__aeabi_d2iz>:
   287e8:	b530      	push	{r4, r5, lr}
   287ea:	4d13      	ldr	r5, [pc, #76]	; (28838 <__aeabi_d2iz+0x50>)
   287ec:	030a      	lsls	r2, r1, #12
   287ee:	004b      	lsls	r3, r1, #1
   287f0:	0b12      	lsrs	r2, r2, #12
   287f2:	0d5b      	lsrs	r3, r3, #21
   287f4:	0fc9      	lsrs	r1, r1, #31
   287f6:	2400      	movs	r4, #0
   287f8:	42ab      	cmp	r3, r5
   287fa:	dd10      	ble.n	2881e <__aeabi_d2iz+0x36>
   287fc:	4c0f      	ldr	r4, [pc, #60]	; (2883c <__aeabi_d2iz+0x54>)
   287fe:	42a3      	cmp	r3, r4
   28800:	dc0f      	bgt.n	28822 <__aeabi_d2iz+0x3a>
   28802:	2480      	movs	r4, #128	; 0x80
   28804:	4d0e      	ldr	r5, [pc, #56]	; (28840 <__aeabi_d2iz+0x58>)
   28806:	0364      	lsls	r4, r4, #13
   28808:	4322      	orrs	r2, r4
   2880a:	1aed      	subs	r5, r5, r3
   2880c:	2d1f      	cmp	r5, #31
   2880e:	dd0b      	ble.n	28828 <__aeabi_d2iz+0x40>
   28810:	480c      	ldr	r0, [pc, #48]	; (28844 <__aeabi_d2iz+0x5c>)
   28812:	1ac3      	subs	r3, r0, r3
   28814:	40da      	lsrs	r2, r3
   28816:	4254      	negs	r4, r2
   28818:	2900      	cmp	r1, #0
   2881a:	d100      	bne.n	2881e <__aeabi_d2iz+0x36>
   2881c:	0014      	movs	r4, r2
   2881e:	0020      	movs	r0, r4
   28820:	bd30      	pop	{r4, r5, pc}
   28822:	4b09      	ldr	r3, [pc, #36]	; (28848 <__aeabi_d2iz+0x60>)
   28824:	18cc      	adds	r4, r1, r3
   28826:	e7fa      	b.n	2881e <__aeabi_d2iz+0x36>
   28828:	4c08      	ldr	r4, [pc, #32]	; (2884c <__aeabi_d2iz+0x64>)
   2882a:	40e8      	lsrs	r0, r5
   2882c:	46a4      	mov	ip, r4
   2882e:	4463      	add	r3, ip
   28830:	409a      	lsls	r2, r3
   28832:	4302      	orrs	r2, r0
   28834:	e7ef      	b.n	28816 <__aeabi_d2iz+0x2e>
   28836:	46c0      	nop			; (mov r8, r8)
   28838:	000003fe 	.word	0x000003fe
   2883c:	0000041d 	.word	0x0000041d
   28840:	00000433 	.word	0x00000433
   28844:	00000413 	.word	0x00000413
   28848:	7fffffff 	.word	0x7fffffff
   2884c:	fffffbed 	.word	0xfffffbed

00028850 <__aeabi_i2d>:
   28850:	b570      	push	{r4, r5, r6, lr}
   28852:	2800      	cmp	r0, #0
   28854:	d030      	beq.n	288b8 <__aeabi_i2d+0x68>
   28856:	17c3      	asrs	r3, r0, #31
   28858:	18c4      	adds	r4, r0, r3
   2885a:	405c      	eors	r4, r3
   2885c:	0fc5      	lsrs	r5, r0, #31
   2885e:	0020      	movs	r0, r4
   28860:	f000 f8c2 	bl	289e8 <__clzsi2>
   28864:	4b17      	ldr	r3, [pc, #92]	; (288c4 <__aeabi_i2d+0x74>)
   28866:	4a18      	ldr	r2, [pc, #96]	; (288c8 <__aeabi_i2d+0x78>)
   28868:	1a1b      	subs	r3, r3, r0
   2886a:	1ad2      	subs	r2, r2, r3
   2886c:	2a1f      	cmp	r2, #31
   2886e:	dd18      	ble.n	288a2 <__aeabi_i2d+0x52>
   28870:	4a16      	ldr	r2, [pc, #88]	; (288cc <__aeabi_i2d+0x7c>)
   28872:	1ad2      	subs	r2, r2, r3
   28874:	4094      	lsls	r4, r2
   28876:	2200      	movs	r2, #0
   28878:	0324      	lsls	r4, r4, #12
   2887a:	055b      	lsls	r3, r3, #21
   2887c:	0b24      	lsrs	r4, r4, #12
   2887e:	0d5b      	lsrs	r3, r3, #21
   28880:	2100      	movs	r1, #0
   28882:	0010      	movs	r0, r2
   28884:	0324      	lsls	r4, r4, #12
   28886:	0d0a      	lsrs	r2, r1, #20
   28888:	0b24      	lsrs	r4, r4, #12
   2888a:	0512      	lsls	r2, r2, #20
   2888c:	4322      	orrs	r2, r4
   2888e:	4c10      	ldr	r4, [pc, #64]	; (288d0 <__aeabi_i2d+0x80>)
   28890:	051b      	lsls	r3, r3, #20
   28892:	4022      	ands	r2, r4
   28894:	4313      	orrs	r3, r2
   28896:	005b      	lsls	r3, r3, #1
   28898:	07ed      	lsls	r5, r5, #31
   2889a:	085b      	lsrs	r3, r3, #1
   2889c:	432b      	orrs	r3, r5
   2889e:	0019      	movs	r1, r3
   288a0:	bd70      	pop	{r4, r5, r6, pc}
   288a2:	0021      	movs	r1, r4
   288a4:	4091      	lsls	r1, r2
   288a6:	000a      	movs	r2, r1
   288a8:	210b      	movs	r1, #11
   288aa:	1a08      	subs	r0, r1, r0
   288ac:	40c4      	lsrs	r4, r0
   288ae:	055b      	lsls	r3, r3, #21
   288b0:	0324      	lsls	r4, r4, #12
   288b2:	0b24      	lsrs	r4, r4, #12
   288b4:	0d5b      	lsrs	r3, r3, #21
   288b6:	e7e3      	b.n	28880 <__aeabi_i2d+0x30>
   288b8:	2500      	movs	r5, #0
   288ba:	2300      	movs	r3, #0
   288bc:	2400      	movs	r4, #0
   288be:	2200      	movs	r2, #0
   288c0:	e7de      	b.n	28880 <__aeabi_i2d+0x30>
   288c2:	46c0      	nop			; (mov r8, r8)
   288c4:	0000041e 	.word	0x0000041e
   288c8:	00000433 	.word	0x00000433
   288cc:	00000413 	.word	0x00000413
   288d0:	800fffff 	.word	0x800fffff

000288d4 <__aeabi_ui2d>:
   288d4:	b510      	push	{r4, lr}
   288d6:	1e04      	subs	r4, r0, #0
   288d8:	d028      	beq.n	2892c <__aeabi_ui2d+0x58>
   288da:	f000 f885 	bl	289e8 <__clzsi2>
   288de:	4b15      	ldr	r3, [pc, #84]	; (28934 <__aeabi_ui2d+0x60>)
   288e0:	4a15      	ldr	r2, [pc, #84]	; (28938 <__aeabi_ui2d+0x64>)
   288e2:	1a1b      	subs	r3, r3, r0
   288e4:	1ad2      	subs	r2, r2, r3
   288e6:	2a1f      	cmp	r2, #31
   288e8:	dd15      	ble.n	28916 <__aeabi_ui2d+0x42>
   288ea:	4a14      	ldr	r2, [pc, #80]	; (2893c <__aeabi_ui2d+0x68>)
   288ec:	1ad2      	subs	r2, r2, r3
   288ee:	4094      	lsls	r4, r2
   288f0:	2200      	movs	r2, #0
   288f2:	0324      	lsls	r4, r4, #12
   288f4:	055b      	lsls	r3, r3, #21
   288f6:	0b24      	lsrs	r4, r4, #12
   288f8:	0d5b      	lsrs	r3, r3, #21
   288fa:	2100      	movs	r1, #0
   288fc:	0010      	movs	r0, r2
   288fe:	0324      	lsls	r4, r4, #12
   28900:	0d0a      	lsrs	r2, r1, #20
   28902:	0b24      	lsrs	r4, r4, #12
   28904:	0512      	lsls	r2, r2, #20
   28906:	4322      	orrs	r2, r4
   28908:	4c0d      	ldr	r4, [pc, #52]	; (28940 <__aeabi_ui2d+0x6c>)
   2890a:	051b      	lsls	r3, r3, #20
   2890c:	4022      	ands	r2, r4
   2890e:	4313      	orrs	r3, r2
   28910:	005b      	lsls	r3, r3, #1
   28912:	0859      	lsrs	r1, r3, #1
   28914:	bd10      	pop	{r4, pc}
   28916:	0021      	movs	r1, r4
   28918:	4091      	lsls	r1, r2
   2891a:	000a      	movs	r2, r1
   2891c:	210b      	movs	r1, #11
   2891e:	1a08      	subs	r0, r1, r0
   28920:	40c4      	lsrs	r4, r0
   28922:	055b      	lsls	r3, r3, #21
   28924:	0324      	lsls	r4, r4, #12
   28926:	0b24      	lsrs	r4, r4, #12
   28928:	0d5b      	lsrs	r3, r3, #21
   2892a:	e7e6      	b.n	288fa <__aeabi_ui2d+0x26>
   2892c:	2300      	movs	r3, #0
   2892e:	2400      	movs	r4, #0
   28930:	2200      	movs	r2, #0
   28932:	e7e2      	b.n	288fa <__aeabi_ui2d+0x26>
   28934:	0000041e 	.word	0x0000041e
   28938:	00000433 	.word	0x00000433
   2893c:	00000413 	.word	0x00000413
   28940:	800fffff 	.word	0x800fffff

00028944 <__aeabi_f2d>:
   28944:	0041      	lsls	r1, r0, #1
   28946:	0e09      	lsrs	r1, r1, #24
   28948:	1c4b      	adds	r3, r1, #1
   2894a:	b570      	push	{r4, r5, r6, lr}
   2894c:	b2db      	uxtb	r3, r3
   2894e:	0246      	lsls	r6, r0, #9
   28950:	0a75      	lsrs	r5, r6, #9
   28952:	0fc4      	lsrs	r4, r0, #31
   28954:	2b01      	cmp	r3, #1
   28956:	dd14      	ble.n	28982 <__aeabi_f2d+0x3e>
   28958:	23e0      	movs	r3, #224	; 0xe0
   2895a:	009b      	lsls	r3, r3, #2
   2895c:	076d      	lsls	r5, r5, #29
   2895e:	0b36      	lsrs	r6, r6, #12
   28960:	18cb      	adds	r3, r1, r3
   28962:	2100      	movs	r1, #0
   28964:	0d0a      	lsrs	r2, r1, #20
   28966:	0028      	movs	r0, r5
   28968:	0512      	lsls	r2, r2, #20
   2896a:	4d1c      	ldr	r5, [pc, #112]	; (289dc <__aeabi_f2d+0x98>)
   2896c:	4332      	orrs	r2, r6
   2896e:	055b      	lsls	r3, r3, #21
   28970:	402a      	ands	r2, r5
   28972:	085b      	lsrs	r3, r3, #1
   28974:	4313      	orrs	r3, r2
   28976:	005b      	lsls	r3, r3, #1
   28978:	07e4      	lsls	r4, r4, #31
   2897a:	085b      	lsrs	r3, r3, #1
   2897c:	4323      	orrs	r3, r4
   2897e:	0019      	movs	r1, r3
   28980:	bd70      	pop	{r4, r5, r6, pc}
   28982:	2900      	cmp	r1, #0
   28984:	d114      	bne.n	289b0 <__aeabi_f2d+0x6c>
   28986:	2d00      	cmp	r5, #0
   28988:	d01e      	beq.n	289c8 <__aeabi_f2d+0x84>
   2898a:	0028      	movs	r0, r5
   2898c:	f000 f82c 	bl	289e8 <__clzsi2>
   28990:	280a      	cmp	r0, #10
   28992:	dc1c      	bgt.n	289ce <__aeabi_f2d+0x8a>
   28994:	230b      	movs	r3, #11
   28996:	002a      	movs	r2, r5
   28998:	1a1b      	subs	r3, r3, r0
   2899a:	40da      	lsrs	r2, r3
   2899c:	0003      	movs	r3, r0
   2899e:	3315      	adds	r3, #21
   289a0:	409d      	lsls	r5, r3
   289a2:	4b0f      	ldr	r3, [pc, #60]	; (289e0 <__aeabi_f2d+0x9c>)
   289a4:	0312      	lsls	r2, r2, #12
   289a6:	1a1b      	subs	r3, r3, r0
   289a8:	055b      	lsls	r3, r3, #21
   289aa:	0b16      	lsrs	r6, r2, #12
   289ac:	0d5b      	lsrs	r3, r3, #21
   289ae:	e7d8      	b.n	28962 <__aeabi_f2d+0x1e>
   289b0:	2d00      	cmp	r5, #0
   289b2:	d006      	beq.n	289c2 <__aeabi_f2d+0x7e>
   289b4:	0b32      	lsrs	r2, r6, #12
   289b6:	2680      	movs	r6, #128	; 0x80
   289b8:	0336      	lsls	r6, r6, #12
   289ba:	076d      	lsls	r5, r5, #29
   289bc:	4316      	orrs	r6, r2
   289be:	4b09      	ldr	r3, [pc, #36]	; (289e4 <__aeabi_f2d+0xa0>)
   289c0:	e7cf      	b.n	28962 <__aeabi_f2d+0x1e>
   289c2:	4b08      	ldr	r3, [pc, #32]	; (289e4 <__aeabi_f2d+0xa0>)
   289c4:	2600      	movs	r6, #0
   289c6:	e7cc      	b.n	28962 <__aeabi_f2d+0x1e>
   289c8:	2300      	movs	r3, #0
   289ca:	2600      	movs	r6, #0
   289cc:	e7c9      	b.n	28962 <__aeabi_f2d+0x1e>
   289ce:	0003      	movs	r3, r0
   289d0:	002a      	movs	r2, r5
   289d2:	3b0b      	subs	r3, #11
   289d4:	409a      	lsls	r2, r3
   289d6:	2500      	movs	r5, #0
   289d8:	e7e3      	b.n	289a2 <__aeabi_f2d+0x5e>
   289da:	46c0      	nop			; (mov r8, r8)
   289dc:	800fffff 	.word	0x800fffff
   289e0:	00000389 	.word	0x00000389
   289e4:	000007ff 	.word	0x000007ff

000289e8 <__clzsi2>:
   289e8:	211c      	movs	r1, #28
   289ea:	2301      	movs	r3, #1
   289ec:	041b      	lsls	r3, r3, #16
   289ee:	4298      	cmp	r0, r3
   289f0:	d301      	bcc.n	289f6 <__clzsi2+0xe>
   289f2:	0c00      	lsrs	r0, r0, #16
   289f4:	3910      	subs	r1, #16
   289f6:	0a1b      	lsrs	r3, r3, #8
   289f8:	4298      	cmp	r0, r3
   289fa:	d301      	bcc.n	28a00 <__clzsi2+0x18>
   289fc:	0a00      	lsrs	r0, r0, #8
   289fe:	3908      	subs	r1, #8
   28a00:	091b      	lsrs	r3, r3, #4
   28a02:	4298      	cmp	r0, r3
   28a04:	d301      	bcc.n	28a0a <__clzsi2+0x22>
   28a06:	0900      	lsrs	r0, r0, #4
   28a08:	3904      	subs	r1, #4
   28a0a:	a202      	add	r2, pc, #8	; (adr r2, 28a14 <__clzsi2+0x2c>)
   28a0c:	5c10      	ldrb	r0, [r2, r0]
   28a0e:	1840      	adds	r0, r0, r1
   28a10:	4770      	bx	lr
   28a12:	46c0      	nop			; (mov r8, r8)
   28a14:	02020304 	.word	0x02020304
   28a18:	01010101 	.word	0x01010101
	...

00028a24 <__clzdi2>:
   28a24:	b510      	push	{r4, lr}
   28a26:	2900      	cmp	r1, #0
   28a28:	d103      	bne.n	28a32 <__clzdi2+0xe>
   28a2a:	f7ff ffdd 	bl	289e8 <__clzsi2>
   28a2e:	3020      	adds	r0, #32
   28a30:	e002      	b.n	28a38 <__clzdi2+0x14>
   28a32:	1c08      	adds	r0, r1, #0
   28a34:	f7ff ffd8 	bl	289e8 <__clzsi2>
   28a38:	bd10      	pop	{r4, pc}
   28a3a:	46c0      	nop			; (mov r8, r8)

00028a3c <atoi>:
   28a3c:	b510      	push	{r4, lr}
   28a3e:	220a      	movs	r2, #10
   28a40:	2100      	movs	r1, #0
   28a42:	f000 fadd 	bl	29000 <strtol>
   28a46:	bd10      	pop	{r4, pc}

00028a48 <calloc>:
   28a48:	b510      	push	{r4, lr}
   28a4a:	4b03      	ldr	r3, [pc, #12]	; (28a58 <calloc+0x10>)
   28a4c:	000a      	movs	r2, r1
   28a4e:	0001      	movs	r1, r0
   28a50:	6818      	ldr	r0, [r3, #0]
   28a52:	f000 f888 	bl	28b66 <_calloc_r>
   28a56:	bd10      	pop	{r4, pc}
   28a58:	20000034 	.word	0x20000034

00028a5c <__errno>:
   28a5c:	4b01      	ldr	r3, [pc, #4]	; (28a64 <__errno+0x8>)
   28a5e:	6818      	ldr	r0, [r3, #0]
   28a60:	4770      	bx	lr
   28a62:	46c0      	nop			; (mov r8, r8)
   28a64:	20000034 	.word	0x20000034

00028a68 <__libc_init_array>:
   28a68:	b570      	push	{r4, r5, r6, lr}
   28a6a:	2600      	movs	r6, #0
   28a6c:	4d0c      	ldr	r5, [pc, #48]	; (28aa0 <__libc_init_array+0x38>)
   28a6e:	4c0d      	ldr	r4, [pc, #52]	; (28aa4 <__libc_init_array+0x3c>)
   28a70:	1b64      	subs	r4, r4, r5
   28a72:	10a4      	asrs	r4, r4, #2
   28a74:	42a6      	cmp	r6, r4
   28a76:	d109      	bne.n	28a8c <__libc_init_array+0x24>
   28a78:	2600      	movs	r6, #0
   28a7a:	f002 f98f 	bl	2ad9c <_init>
   28a7e:	4d0a      	ldr	r5, [pc, #40]	; (28aa8 <__libc_init_array+0x40>)
   28a80:	4c0a      	ldr	r4, [pc, #40]	; (28aac <__libc_init_array+0x44>)
   28a82:	1b64      	subs	r4, r4, r5
   28a84:	10a4      	asrs	r4, r4, #2
   28a86:	42a6      	cmp	r6, r4
   28a88:	d105      	bne.n	28a96 <__libc_init_array+0x2e>
   28a8a:	bd70      	pop	{r4, r5, r6, pc}
   28a8c:	00b3      	lsls	r3, r6, #2
   28a8e:	58eb      	ldr	r3, [r5, r3]
   28a90:	4798      	blx	r3
   28a92:	3601      	adds	r6, #1
   28a94:	e7ee      	b.n	28a74 <__libc_init_array+0xc>
   28a96:	00b3      	lsls	r3, r6, #2
   28a98:	58eb      	ldr	r3, [r5, r3]
   28a9a:	4798      	blx	r3
   28a9c:	3601      	adds	r6, #1
   28a9e:	e7f2      	b.n	28a86 <__libc_init_array+0x1e>
   28aa0:	0002ada8 	.word	0x0002ada8
   28aa4:	0002ada8 	.word	0x0002ada8
   28aa8:	0002ada8 	.word	0x0002ada8
   28aac:	0002adac 	.word	0x0002adac

00028ab0 <__locale_ctype_ptr_l>:
   28ab0:	30ec      	adds	r0, #236	; 0xec
   28ab2:	6800      	ldr	r0, [r0, #0]
   28ab4:	4770      	bx	lr
	...

00028ab8 <__locale_ctype_ptr>:
   28ab8:	4b04      	ldr	r3, [pc, #16]	; (28acc <__locale_ctype_ptr+0x14>)
   28aba:	681b      	ldr	r3, [r3, #0]
   28abc:	6a1b      	ldr	r3, [r3, #32]
   28abe:	2b00      	cmp	r3, #0
   28ac0:	d100      	bne.n	28ac4 <__locale_ctype_ptr+0xc>
   28ac2:	4b03      	ldr	r3, [pc, #12]	; (28ad0 <__locale_ctype_ptr+0x18>)
   28ac4:	33ec      	adds	r3, #236	; 0xec
   28ac6:	6818      	ldr	r0, [r3, #0]
   28ac8:	4770      	bx	lr
   28aca:	46c0      	nop			; (mov r8, r8)
   28acc:	20000034 	.word	0x20000034
   28ad0:	20000098 	.word	0x20000098

00028ad4 <malloc>:
   28ad4:	b510      	push	{r4, lr}
   28ad6:	4b03      	ldr	r3, [pc, #12]	; (28ae4 <malloc+0x10>)
   28ad8:	0001      	movs	r1, r0
   28ada:	6818      	ldr	r0, [r3, #0]
   28adc:	f000 f89c 	bl	28c18 <_malloc_r>
   28ae0:	bd10      	pop	{r4, pc}
   28ae2:	46c0      	nop			; (mov r8, r8)
   28ae4:	20000034 	.word	0x20000034

00028ae8 <free>:
   28ae8:	b510      	push	{r4, lr}
   28aea:	4b03      	ldr	r3, [pc, #12]	; (28af8 <free+0x10>)
   28aec:	0001      	movs	r1, r0
   28aee:	6818      	ldr	r0, [r3, #0]
   28af0:	f000 f848 	bl	28b84 <_free_r>
   28af4:	bd10      	pop	{r4, pc}
   28af6:	46c0      	nop			; (mov r8, r8)
   28af8:	20000034 	.word	0x20000034

00028afc <__ascii_mbtowc>:
   28afc:	b082      	sub	sp, #8
   28afe:	2900      	cmp	r1, #0
   28b00:	d100      	bne.n	28b04 <__ascii_mbtowc+0x8>
   28b02:	a901      	add	r1, sp, #4
   28b04:	1e10      	subs	r0, r2, #0
   28b06:	d006      	beq.n	28b16 <__ascii_mbtowc+0x1a>
   28b08:	2b00      	cmp	r3, #0
   28b0a:	d006      	beq.n	28b1a <__ascii_mbtowc+0x1e>
   28b0c:	7813      	ldrb	r3, [r2, #0]
   28b0e:	600b      	str	r3, [r1, #0]
   28b10:	7810      	ldrb	r0, [r2, #0]
   28b12:	1e43      	subs	r3, r0, #1
   28b14:	4198      	sbcs	r0, r3
   28b16:	b002      	add	sp, #8
   28b18:	4770      	bx	lr
   28b1a:	2002      	movs	r0, #2
   28b1c:	4240      	negs	r0, r0
   28b1e:	e7fa      	b.n	28b16 <__ascii_mbtowc+0x1a>

00028b20 <memcpy>:
   28b20:	2300      	movs	r3, #0
   28b22:	b510      	push	{r4, lr}
   28b24:	429a      	cmp	r2, r3
   28b26:	d100      	bne.n	28b2a <memcpy+0xa>
   28b28:	bd10      	pop	{r4, pc}
   28b2a:	5ccc      	ldrb	r4, [r1, r3]
   28b2c:	54c4      	strb	r4, [r0, r3]
   28b2e:	3301      	adds	r3, #1
   28b30:	e7f8      	b.n	28b24 <memcpy+0x4>

00028b32 <memmove>:
   28b32:	b510      	push	{r4, lr}
   28b34:	4288      	cmp	r0, r1
   28b36:	d902      	bls.n	28b3e <memmove+0xc>
   28b38:	188b      	adds	r3, r1, r2
   28b3a:	4298      	cmp	r0, r3
   28b3c:	d308      	bcc.n	28b50 <memmove+0x1e>
   28b3e:	2300      	movs	r3, #0
   28b40:	429a      	cmp	r2, r3
   28b42:	d007      	beq.n	28b54 <memmove+0x22>
   28b44:	5ccc      	ldrb	r4, [r1, r3]
   28b46:	54c4      	strb	r4, [r0, r3]
   28b48:	3301      	adds	r3, #1
   28b4a:	e7f9      	b.n	28b40 <memmove+0xe>
   28b4c:	5c8b      	ldrb	r3, [r1, r2]
   28b4e:	5483      	strb	r3, [r0, r2]
   28b50:	3a01      	subs	r2, #1
   28b52:	d2fb      	bcs.n	28b4c <memmove+0x1a>
   28b54:	bd10      	pop	{r4, pc}

00028b56 <memset>:
   28b56:	0003      	movs	r3, r0
   28b58:	1882      	adds	r2, r0, r2
   28b5a:	4293      	cmp	r3, r2
   28b5c:	d100      	bne.n	28b60 <memset+0xa>
   28b5e:	4770      	bx	lr
   28b60:	7019      	strb	r1, [r3, #0]
   28b62:	3301      	adds	r3, #1
   28b64:	e7f9      	b.n	28b5a <memset+0x4>

00028b66 <_calloc_r>:
   28b66:	434a      	muls	r2, r1
   28b68:	b570      	push	{r4, r5, r6, lr}
   28b6a:	0011      	movs	r1, r2
   28b6c:	0014      	movs	r4, r2
   28b6e:	f000 f853 	bl	28c18 <_malloc_r>
   28b72:	1e05      	subs	r5, r0, #0
   28b74:	d003      	beq.n	28b7e <_calloc_r+0x18>
   28b76:	0022      	movs	r2, r4
   28b78:	2100      	movs	r1, #0
   28b7a:	f7ff ffec 	bl	28b56 <memset>
   28b7e:	0028      	movs	r0, r5
   28b80:	bd70      	pop	{r4, r5, r6, pc}
	...

00028b84 <_free_r>:
   28b84:	b570      	push	{r4, r5, r6, lr}
   28b86:	0005      	movs	r5, r0
   28b88:	2900      	cmp	r1, #0
   28b8a:	d010      	beq.n	28bae <_free_r+0x2a>
   28b8c:	1f0c      	subs	r4, r1, #4
   28b8e:	6823      	ldr	r3, [r4, #0]
   28b90:	2b00      	cmp	r3, #0
   28b92:	da00      	bge.n	28b96 <_free_r+0x12>
   28b94:	18e4      	adds	r4, r4, r3
   28b96:	0028      	movs	r0, r5
   28b98:	f000 fab4 	bl	29104 <__malloc_lock>
   28b9c:	4a1d      	ldr	r2, [pc, #116]	; (28c14 <_free_r+0x90>)
   28b9e:	6813      	ldr	r3, [r2, #0]
   28ba0:	2b00      	cmp	r3, #0
   28ba2:	d105      	bne.n	28bb0 <_free_r+0x2c>
   28ba4:	6063      	str	r3, [r4, #4]
   28ba6:	6014      	str	r4, [r2, #0]
   28ba8:	0028      	movs	r0, r5
   28baa:	f000 faac 	bl	29106 <__malloc_unlock>
   28bae:	bd70      	pop	{r4, r5, r6, pc}
   28bb0:	42a3      	cmp	r3, r4
   28bb2:	d909      	bls.n	28bc8 <_free_r+0x44>
   28bb4:	6821      	ldr	r1, [r4, #0]
   28bb6:	1860      	adds	r0, r4, r1
   28bb8:	4283      	cmp	r3, r0
   28bba:	d1f3      	bne.n	28ba4 <_free_r+0x20>
   28bbc:	6818      	ldr	r0, [r3, #0]
   28bbe:	685b      	ldr	r3, [r3, #4]
   28bc0:	1841      	adds	r1, r0, r1
   28bc2:	6021      	str	r1, [r4, #0]
   28bc4:	e7ee      	b.n	28ba4 <_free_r+0x20>
   28bc6:	0013      	movs	r3, r2
   28bc8:	685a      	ldr	r2, [r3, #4]
   28bca:	2a00      	cmp	r2, #0
   28bcc:	d001      	beq.n	28bd2 <_free_r+0x4e>
   28bce:	42a2      	cmp	r2, r4
   28bd0:	d9f9      	bls.n	28bc6 <_free_r+0x42>
   28bd2:	6819      	ldr	r1, [r3, #0]
   28bd4:	1858      	adds	r0, r3, r1
   28bd6:	42a0      	cmp	r0, r4
   28bd8:	d10b      	bne.n	28bf2 <_free_r+0x6e>
   28bda:	6820      	ldr	r0, [r4, #0]
   28bdc:	1809      	adds	r1, r1, r0
   28bde:	1858      	adds	r0, r3, r1
   28be0:	6019      	str	r1, [r3, #0]
   28be2:	4282      	cmp	r2, r0
   28be4:	d1e0      	bne.n	28ba8 <_free_r+0x24>
   28be6:	6810      	ldr	r0, [r2, #0]
   28be8:	6852      	ldr	r2, [r2, #4]
   28bea:	1841      	adds	r1, r0, r1
   28bec:	6019      	str	r1, [r3, #0]
   28bee:	605a      	str	r2, [r3, #4]
   28bf0:	e7da      	b.n	28ba8 <_free_r+0x24>
   28bf2:	42a0      	cmp	r0, r4
   28bf4:	d902      	bls.n	28bfc <_free_r+0x78>
   28bf6:	230c      	movs	r3, #12
   28bf8:	602b      	str	r3, [r5, #0]
   28bfa:	e7d5      	b.n	28ba8 <_free_r+0x24>
   28bfc:	6821      	ldr	r1, [r4, #0]
   28bfe:	1860      	adds	r0, r4, r1
   28c00:	4282      	cmp	r2, r0
   28c02:	d103      	bne.n	28c0c <_free_r+0x88>
   28c04:	6810      	ldr	r0, [r2, #0]
   28c06:	6852      	ldr	r2, [r2, #4]
   28c08:	1841      	adds	r1, r0, r1
   28c0a:	6021      	str	r1, [r4, #0]
   28c0c:	6062      	str	r2, [r4, #4]
   28c0e:	605c      	str	r4, [r3, #4]
   28c10:	e7ca      	b.n	28ba8 <_free_r+0x24>
   28c12:	46c0      	nop			; (mov r8, r8)
   28c14:	20000714 	.word	0x20000714

00028c18 <_malloc_r>:
   28c18:	2303      	movs	r3, #3
   28c1a:	b570      	push	{r4, r5, r6, lr}
   28c1c:	1ccd      	adds	r5, r1, #3
   28c1e:	439d      	bics	r5, r3
   28c20:	3508      	adds	r5, #8
   28c22:	0006      	movs	r6, r0
   28c24:	2d0c      	cmp	r5, #12
   28c26:	d21e      	bcs.n	28c66 <_malloc_r+0x4e>
   28c28:	250c      	movs	r5, #12
   28c2a:	42a9      	cmp	r1, r5
   28c2c:	d81d      	bhi.n	28c6a <_malloc_r+0x52>
   28c2e:	0030      	movs	r0, r6
   28c30:	f000 fa68 	bl	29104 <__malloc_lock>
   28c34:	4a25      	ldr	r2, [pc, #148]	; (28ccc <_malloc_r+0xb4>)
   28c36:	6814      	ldr	r4, [r2, #0]
   28c38:	0021      	movs	r1, r4
   28c3a:	2900      	cmp	r1, #0
   28c3c:	d119      	bne.n	28c72 <_malloc_r+0x5a>
   28c3e:	4c24      	ldr	r4, [pc, #144]	; (28cd0 <_malloc_r+0xb8>)
   28c40:	6823      	ldr	r3, [r4, #0]
   28c42:	2b00      	cmp	r3, #0
   28c44:	d103      	bne.n	28c4e <_malloc_r+0x36>
   28c46:	0030      	movs	r0, r6
   28c48:	f000 f844 	bl	28cd4 <_sbrk_r>
   28c4c:	6020      	str	r0, [r4, #0]
   28c4e:	0029      	movs	r1, r5
   28c50:	0030      	movs	r0, r6
   28c52:	f000 f83f 	bl	28cd4 <_sbrk_r>
   28c56:	1c43      	adds	r3, r0, #1
   28c58:	d12c      	bne.n	28cb4 <_malloc_r+0x9c>
   28c5a:	230c      	movs	r3, #12
   28c5c:	0030      	movs	r0, r6
   28c5e:	6033      	str	r3, [r6, #0]
   28c60:	f000 fa51 	bl	29106 <__malloc_unlock>
   28c64:	e003      	b.n	28c6e <_malloc_r+0x56>
   28c66:	2d00      	cmp	r5, #0
   28c68:	dadf      	bge.n	28c2a <_malloc_r+0x12>
   28c6a:	230c      	movs	r3, #12
   28c6c:	6033      	str	r3, [r6, #0]
   28c6e:	2000      	movs	r0, #0
   28c70:	bd70      	pop	{r4, r5, r6, pc}
   28c72:	680b      	ldr	r3, [r1, #0]
   28c74:	1b5b      	subs	r3, r3, r5
   28c76:	d41a      	bmi.n	28cae <_malloc_r+0x96>
   28c78:	2b0b      	cmp	r3, #11
   28c7a:	d903      	bls.n	28c84 <_malloc_r+0x6c>
   28c7c:	600b      	str	r3, [r1, #0]
   28c7e:	18cc      	adds	r4, r1, r3
   28c80:	6025      	str	r5, [r4, #0]
   28c82:	e003      	b.n	28c8c <_malloc_r+0x74>
   28c84:	428c      	cmp	r4, r1
   28c86:	d10e      	bne.n	28ca6 <_malloc_r+0x8e>
   28c88:	6863      	ldr	r3, [r4, #4]
   28c8a:	6013      	str	r3, [r2, #0]
   28c8c:	0030      	movs	r0, r6
   28c8e:	f000 fa3a 	bl	29106 <__malloc_unlock>
   28c92:	0020      	movs	r0, r4
   28c94:	2207      	movs	r2, #7
   28c96:	300b      	adds	r0, #11
   28c98:	1d23      	adds	r3, r4, #4
   28c9a:	4390      	bics	r0, r2
   28c9c:	1ac3      	subs	r3, r0, r3
   28c9e:	d0e7      	beq.n	28c70 <_malloc_r+0x58>
   28ca0:	425a      	negs	r2, r3
   28ca2:	50e2      	str	r2, [r4, r3]
   28ca4:	e7e4      	b.n	28c70 <_malloc_r+0x58>
   28ca6:	684b      	ldr	r3, [r1, #4]
   28ca8:	6063      	str	r3, [r4, #4]
   28caa:	000c      	movs	r4, r1
   28cac:	e7ee      	b.n	28c8c <_malloc_r+0x74>
   28cae:	000c      	movs	r4, r1
   28cb0:	6849      	ldr	r1, [r1, #4]
   28cb2:	e7c2      	b.n	28c3a <_malloc_r+0x22>
   28cb4:	2303      	movs	r3, #3
   28cb6:	1cc4      	adds	r4, r0, #3
   28cb8:	439c      	bics	r4, r3
   28cba:	42a0      	cmp	r0, r4
   28cbc:	d0e0      	beq.n	28c80 <_malloc_r+0x68>
   28cbe:	1a21      	subs	r1, r4, r0
   28cc0:	0030      	movs	r0, r6
   28cc2:	f000 f807 	bl	28cd4 <_sbrk_r>
   28cc6:	1c43      	adds	r3, r0, #1
   28cc8:	d1da      	bne.n	28c80 <_malloc_r+0x68>
   28cca:	e7c6      	b.n	28c5a <_malloc_r+0x42>
   28ccc:	20000714 	.word	0x20000714
   28cd0:	20000718 	.word	0x20000718

00028cd4 <_sbrk_r>:
   28cd4:	2300      	movs	r3, #0
   28cd6:	b570      	push	{r4, r5, r6, lr}
   28cd8:	4c06      	ldr	r4, [pc, #24]	; (28cf4 <_sbrk_r+0x20>)
   28cda:	0005      	movs	r5, r0
   28cdc:	0008      	movs	r0, r1
   28cde:	6023      	str	r3, [r4, #0]
   28ce0:	f7fb ff5a 	bl	24b98 <_sbrk>
   28ce4:	1c43      	adds	r3, r0, #1
   28ce6:	d103      	bne.n	28cf0 <_sbrk_r+0x1c>
   28ce8:	6823      	ldr	r3, [r4, #0]
   28cea:	2b00      	cmp	r3, #0
   28cec:	d000      	beq.n	28cf0 <_sbrk_r+0x1c>
   28cee:	602b      	str	r3, [r5, #0]
   28cf0:	bd70      	pop	{r4, r5, r6, pc}
   28cf2:	46c0      	nop			; (mov r8, r8)
   28cf4:	20001000 	.word	0x20001000

00028cf8 <sniprintf>:
   28cf8:	b40c      	push	{r2, r3}
   28cfa:	b530      	push	{r4, r5, lr}
   28cfc:	4b16      	ldr	r3, [pc, #88]	; (28d58 <sniprintf+0x60>)
   28cfe:	b09d      	sub	sp, #116	; 0x74
   28d00:	1e0c      	subs	r4, r1, #0
   28d02:	681d      	ldr	r5, [r3, #0]
   28d04:	da08      	bge.n	28d18 <sniprintf+0x20>
   28d06:	238b      	movs	r3, #139	; 0x8b
   28d08:	2001      	movs	r0, #1
   28d0a:	602b      	str	r3, [r5, #0]
   28d0c:	4240      	negs	r0, r0
   28d0e:	b01d      	add	sp, #116	; 0x74
   28d10:	bc30      	pop	{r4, r5}
   28d12:	bc08      	pop	{r3}
   28d14:	b002      	add	sp, #8
   28d16:	4718      	bx	r3
   28d18:	2382      	movs	r3, #130	; 0x82
   28d1a:	a902      	add	r1, sp, #8
   28d1c:	009b      	lsls	r3, r3, #2
   28d1e:	818b      	strh	r3, [r1, #12]
   28d20:	2300      	movs	r3, #0
   28d22:	9002      	str	r0, [sp, #8]
   28d24:	6108      	str	r0, [r1, #16]
   28d26:	429c      	cmp	r4, r3
   28d28:	d000      	beq.n	28d2c <sniprintf+0x34>
   28d2a:	1e63      	subs	r3, r4, #1
   28d2c:	608b      	str	r3, [r1, #8]
   28d2e:	614b      	str	r3, [r1, #20]
   28d30:	2301      	movs	r3, #1
   28d32:	425b      	negs	r3, r3
   28d34:	81cb      	strh	r3, [r1, #14]
   28d36:	9a20      	ldr	r2, [sp, #128]	; 0x80
   28d38:	ab21      	add	r3, sp, #132	; 0x84
   28d3a:	0028      	movs	r0, r5
   28d3c:	9301      	str	r3, [sp, #4]
   28d3e:	f000 fa45 	bl	291cc <_svfiprintf_r>
   28d42:	1c43      	adds	r3, r0, #1
   28d44:	da01      	bge.n	28d4a <sniprintf+0x52>
   28d46:	238b      	movs	r3, #139	; 0x8b
   28d48:	602b      	str	r3, [r5, #0]
   28d4a:	2c00      	cmp	r4, #0
   28d4c:	d0df      	beq.n	28d0e <sniprintf+0x16>
   28d4e:	2300      	movs	r3, #0
   28d50:	9a02      	ldr	r2, [sp, #8]
   28d52:	7013      	strb	r3, [r2, #0]
   28d54:	e7db      	b.n	28d0e <sniprintf+0x16>
   28d56:	46c0      	nop			; (mov r8, r8)
   28d58:	20000034 	.word	0x20000034

00028d5c <siprintf>:
   28d5c:	b40e      	push	{r1, r2, r3}
   28d5e:	b510      	push	{r4, lr}
   28d60:	b09d      	sub	sp, #116	; 0x74
   28d62:	a902      	add	r1, sp, #8
   28d64:	9002      	str	r0, [sp, #8]
   28d66:	6108      	str	r0, [r1, #16]
   28d68:	480b      	ldr	r0, [pc, #44]	; (28d98 <siprintf+0x3c>)
   28d6a:	2482      	movs	r4, #130	; 0x82
   28d6c:	6088      	str	r0, [r1, #8]
   28d6e:	6148      	str	r0, [r1, #20]
   28d70:	2001      	movs	r0, #1
   28d72:	4240      	negs	r0, r0
   28d74:	ab1f      	add	r3, sp, #124	; 0x7c
   28d76:	81c8      	strh	r0, [r1, #14]
   28d78:	4808      	ldr	r0, [pc, #32]	; (28d9c <siprintf+0x40>)
   28d7a:	cb04      	ldmia	r3!, {r2}
   28d7c:	00a4      	lsls	r4, r4, #2
   28d7e:	6800      	ldr	r0, [r0, #0]
   28d80:	9301      	str	r3, [sp, #4]
   28d82:	818c      	strh	r4, [r1, #12]
   28d84:	f000 fa22 	bl	291cc <_svfiprintf_r>
   28d88:	2300      	movs	r3, #0
   28d8a:	9a02      	ldr	r2, [sp, #8]
   28d8c:	7013      	strb	r3, [r2, #0]
   28d8e:	b01d      	add	sp, #116	; 0x74
   28d90:	bc10      	pop	{r4}
   28d92:	bc08      	pop	{r3}
   28d94:	b003      	add	sp, #12
   28d96:	4718      	bx	r3
   28d98:	7fffffff 	.word	0x7fffffff
   28d9c:	20000034 	.word	0x20000034

00028da0 <strcat>:
   28da0:	0002      	movs	r2, r0
   28da2:	b510      	push	{r4, lr}
   28da4:	7813      	ldrb	r3, [r2, #0]
   28da6:	2b00      	cmp	r3, #0
   28da8:	d105      	bne.n	28db6 <strcat+0x16>
   28daa:	5ccc      	ldrb	r4, [r1, r3]
   28dac:	54d4      	strb	r4, [r2, r3]
   28dae:	3301      	adds	r3, #1
   28db0:	2c00      	cmp	r4, #0
   28db2:	d1fa      	bne.n	28daa <strcat+0xa>
   28db4:	bd10      	pop	{r4, pc}
   28db6:	3201      	adds	r2, #1
   28db8:	e7f4      	b.n	28da4 <strcat+0x4>

00028dba <strchr>:
   28dba:	b2c9      	uxtb	r1, r1
   28dbc:	7803      	ldrb	r3, [r0, #0]
   28dbe:	2b00      	cmp	r3, #0
   28dc0:	d004      	beq.n	28dcc <strchr+0x12>
   28dc2:	4299      	cmp	r1, r3
   28dc4:	d100      	bne.n	28dc8 <strchr+0xe>
   28dc6:	4770      	bx	lr
   28dc8:	3001      	adds	r0, #1
   28dca:	e7f7      	b.n	28dbc <strchr+0x2>
   28dcc:	424b      	negs	r3, r1
   28dce:	4159      	adcs	r1, r3
   28dd0:	4249      	negs	r1, r1
   28dd2:	4008      	ands	r0, r1
   28dd4:	e7f7      	b.n	28dc6 <strchr+0xc>

00028dd6 <strcpy>:
   28dd6:	1c03      	adds	r3, r0, #0
   28dd8:	780a      	ldrb	r2, [r1, #0]
   28dda:	3101      	adds	r1, #1
   28ddc:	701a      	strb	r2, [r3, #0]
   28dde:	3301      	adds	r3, #1
   28de0:	2a00      	cmp	r2, #0
   28de2:	d1f9      	bne.n	28dd8 <strcpy+0x2>
   28de4:	4770      	bx	lr

00028de6 <strlen>:
   28de6:	2300      	movs	r3, #0
   28de8:	5cc2      	ldrb	r2, [r0, r3]
   28dea:	3301      	adds	r3, #1
   28dec:	2a00      	cmp	r2, #0
   28dee:	d1fb      	bne.n	28de8 <strlen+0x2>
   28df0:	1e58      	subs	r0, r3, #1
   28df2:	4770      	bx	lr

00028df4 <strncmp>:
   28df4:	2300      	movs	r3, #0
   28df6:	b530      	push	{r4, r5, lr}
   28df8:	429a      	cmp	r2, r3
   28dfa:	d00a      	beq.n	28e12 <strncmp+0x1e>
   28dfc:	3a01      	subs	r2, #1
   28dfe:	5cc4      	ldrb	r4, [r0, r3]
   28e00:	5ccd      	ldrb	r5, [r1, r3]
   28e02:	42ac      	cmp	r4, r5
   28e04:	d104      	bne.n	28e10 <strncmp+0x1c>
   28e06:	429a      	cmp	r2, r3
   28e08:	d002      	beq.n	28e10 <strncmp+0x1c>
   28e0a:	3301      	adds	r3, #1
   28e0c:	2c00      	cmp	r4, #0
   28e0e:	d1f6      	bne.n	28dfe <strncmp+0xa>
   28e10:	1b63      	subs	r3, r4, r5
   28e12:	0018      	movs	r0, r3
   28e14:	bd30      	pop	{r4, r5, pc}

00028e16 <strstr>:
   28e16:	b510      	push	{r4, lr}
   28e18:	0002      	movs	r2, r0
   28e1a:	7800      	ldrb	r0, [r0, #0]
   28e1c:	2800      	cmp	r0, #0
   28e1e:	d104      	bne.n	28e2a <strstr+0x14>
   28e20:	7809      	ldrb	r1, [r1, #0]
   28e22:	2900      	cmp	r1, #0
   28e24:	d00d      	beq.n	28e42 <strstr+0x2c>
   28e26:	bd10      	pop	{r4, pc}
   28e28:	3201      	adds	r2, #1
   28e2a:	7810      	ldrb	r0, [r2, #0]
   28e2c:	2800      	cmp	r0, #0
   28e2e:	d0fa      	beq.n	28e26 <strstr+0x10>
   28e30:	2300      	movs	r3, #0
   28e32:	5cc8      	ldrb	r0, [r1, r3]
   28e34:	2800      	cmp	r0, #0
   28e36:	d004      	beq.n	28e42 <strstr+0x2c>
   28e38:	5cd4      	ldrb	r4, [r2, r3]
   28e3a:	4284      	cmp	r4, r0
   28e3c:	d1f4      	bne.n	28e28 <strstr+0x12>
   28e3e:	3301      	adds	r3, #1
   28e40:	e7f7      	b.n	28e32 <strstr+0x1c>
   28e42:	0010      	movs	r0, r2
   28e44:	e7ef      	b.n	28e26 <strstr+0x10>
	...

00028e48 <strtok>:
   28e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   28e4a:	4b12      	ldr	r3, [pc, #72]	; (28e94 <strtok+0x4c>)
   28e4c:	0006      	movs	r6, r0
   28e4e:	681d      	ldr	r5, [r3, #0]
   28e50:	000f      	movs	r7, r1
   28e52:	6dac      	ldr	r4, [r5, #88]	; 0x58
   28e54:	2c00      	cmp	r4, #0
   28e56:	d116      	bne.n	28e86 <strtok+0x3e>
   28e58:	2050      	movs	r0, #80	; 0x50
   28e5a:	f7ff fe3b 	bl	28ad4 <malloc>
   28e5e:	65a8      	str	r0, [r5, #88]	; 0x58
   28e60:	6004      	str	r4, [r0, #0]
   28e62:	6044      	str	r4, [r0, #4]
   28e64:	6084      	str	r4, [r0, #8]
   28e66:	60c4      	str	r4, [r0, #12]
   28e68:	6104      	str	r4, [r0, #16]
   28e6a:	6144      	str	r4, [r0, #20]
   28e6c:	6184      	str	r4, [r0, #24]
   28e6e:	6284      	str	r4, [r0, #40]	; 0x28
   28e70:	62c4      	str	r4, [r0, #44]	; 0x2c
   28e72:	6304      	str	r4, [r0, #48]	; 0x30
   28e74:	6344      	str	r4, [r0, #52]	; 0x34
   28e76:	6384      	str	r4, [r0, #56]	; 0x38
   28e78:	63c4      	str	r4, [r0, #60]	; 0x3c
   28e7a:	6404      	str	r4, [r0, #64]	; 0x40
   28e7c:	6444      	str	r4, [r0, #68]	; 0x44
   28e7e:	6484      	str	r4, [r0, #72]	; 0x48
   28e80:	64c4      	str	r4, [r0, #76]	; 0x4c
   28e82:	7704      	strb	r4, [r0, #28]
   28e84:	6244      	str	r4, [r0, #36]	; 0x24
   28e86:	6daa      	ldr	r2, [r5, #88]	; 0x58
   28e88:	0039      	movs	r1, r7
   28e8a:	0030      	movs	r0, r6
   28e8c:	2301      	movs	r3, #1
   28e8e:	f000 f803 	bl	28e98 <__strtok_r>
   28e92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   28e94:	20000034 	.word	0x20000034

00028e98 <__strtok_r>:
   28e98:	b5f0      	push	{r4, r5, r6, r7, lr}
   28e9a:	2800      	cmp	r0, #0
   28e9c:	d104      	bne.n	28ea8 <__strtok_r+0x10>
   28e9e:	6810      	ldr	r0, [r2, #0]
   28ea0:	2800      	cmp	r0, #0
   28ea2:	d101      	bne.n	28ea8 <__strtok_r+0x10>
   28ea4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   28ea6:	0020      	movs	r0, r4
   28ea8:	000e      	movs	r6, r1
   28eaa:	7805      	ldrb	r5, [r0, #0]
   28eac:	1c44      	adds	r4, r0, #1
   28eae:	7837      	ldrb	r7, [r6, #0]
   28eb0:	2f00      	cmp	r7, #0
   28eb2:	d104      	bne.n	28ebe <__strtok_r+0x26>
   28eb4:	2d00      	cmp	r5, #0
   28eb6:	d110      	bne.n	28eda <__strtok_r+0x42>
   28eb8:	6015      	str	r5, [r2, #0]
   28eba:	0028      	movs	r0, r5
   28ebc:	e7f2      	b.n	28ea4 <__strtok_r+0xc>
   28ebe:	3601      	adds	r6, #1
   28ec0:	42bd      	cmp	r5, r7
   28ec2:	d1f4      	bne.n	28eae <__strtok_r+0x16>
   28ec4:	2b00      	cmp	r3, #0
   28ec6:	d1ee      	bne.n	28ea6 <__strtok_r+0xe>
   28ec8:	6014      	str	r4, [r2, #0]
   28eca:	7003      	strb	r3, [r0, #0]
   28ecc:	e7ea      	b.n	28ea4 <__strtok_r+0xc>
   28ece:	0033      	movs	r3, r6
   28ed0:	e00e      	b.n	28ef0 <__strtok_r+0x58>
   28ed2:	3501      	adds	r5, #1
   28ed4:	001c      	movs	r4, r3
   28ed6:	2f00      	cmp	r7, #0
   28ed8:	d102      	bne.n	28ee0 <__strtok_r+0x48>
   28eda:	000d      	movs	r5, r1
   28edc:	7826      	ldrb	r6, [r4, #0]
   28ede:	1c63      	adds	r3, r4, #1
   28ee0:	782f      	ldrb	r7, [r5, #0]
   28ee2:	42be      	cmp	r6, r7
   28ee4:	d1f5      	bne.n	28ed2 <__strtok_r+0x3a>
   28ee6:	2e00      	cmp	r6, #0
   28ee8:	d0f1      	beq.n	28ece <__strtok_r+0x36>
   28eea:	2400      	movs	r4, #0
   28eec:	1e59      	subs	r1, r3, #1
   28eee:	700c      	strb	r4, [r1, #0]
   28ef0:	6013      	str	r3, [r2, #0]
   28ef2:	e7d7      	b.n	28ea4 <__strtok_r+0xc>

00028ef4 <_strtol_l.isra.0>:
   28ef4:	b5f0      	push	{r4, r5, r6, r7, lr}
   28ef6:	001f      	movs	r7, r3
   28ef8:	000e      	movs	r6, r1
   28efa:	b087      	sub	sp, #28
   28efc:	9005      	str	r0, [sp, #20]
   28efe:	9103      	str	r1, [sp, #12]
   28f00:	9202      	str	r2, [sp, #8]
   28f02:	980c      	ldr	r0, [sp, #48]	; 0x30
   28f04:	7834      	ldrb	r4, [r6, #0]
   28f06:	f7ff fdd3 	bl	28ab0 <__locale_ctype_ptr_l>
   28f0a:	2208      	movs	r2, #8
   28f0c:	1900      	adds	r0, r0, r4
   28f0e:	7843      	ldrb	r3, [r0, #1]
   28f10:	1c75      	adds	r5, r6, #1
   28f12:	4013      	ands	r3, r2
   28f14:	d10c      	bne.n	28f30 <_strtol_l.isra.0+0x3c>
   28f16:	2c2d      	cmp	r4, #45	; 0x2d
   28f18:	d10c      	bne.n	28f34 <_strtol_l.isra.0+0x40>
   28f1a:	3301      	adds	r3, #1
   28f1c:	782c      	ldrb	r4, [r5, #0]
   28f1e:	9301      	str	r3, [sp, #4]
   28f20:	1cb5      	adds	r5, r6, #2
   28f22:	2f00      	cmp	r7, #0
   28f24:	d00c      	beq.n	28f40 <_strtol_l.isra.0+0x4c>
   28f26:	2f10      	cmp	r7, #16
   28f28:	d114      	bne.n	28f54 <_strtol_l.isra.0+0x60>
   28f2a:	2c30      	cmp	r4, #48	; 0x30
   28f2c:	d00a      	beq.n	28f44 <_strtol_l.isra.0+0x50>
   28f2e:	e011      	b.n	28f54 <_strtol_l.isra.0+0x60>
   28f30:	002e      	movs	r6, r5
   28f32:	e7e6      	b.n	28f02 <_strtol_l.isra.0+0xe>
   28f34:	9301      	str	r3, [sp, #4]
   28f36:	2c2b      	cmp	r4, #43	; 0x2b
   28f38:	d1f3      	bne.n	28f22 <_strtol_l.isra.0+0x2e>
   28f3a:	782c      	ldrb	r4, [r5, #0]
   28f3c:	1cb5      	adds	r5, r6, #2
   28f3e:	e7f0      	b.n	28f22 <_strtol_l.isra.0+0x2e>
   28f40:	2c30      	cmp	r4, #48	; 0x30
   28f42:	d12f      	bne.n	28fa4 <_strtol_l.isra.0+0xb0>
   28f44:	2220      	movs	r2, #32
   28f46:	782b      	ldrb	r3, [r5, #0]
   28f48:	4393      	bics	r3, r2
   28f4a:	2b58      	cmp	r3, #88	; 0x58
   28f4c:	d151      	bne.n	28ff2 <_strtol_l.isra.0+0xfe>
   28f4e:	2710      	movs	r7, #16
   28f50:	786c      	ldrb	r4, [r5, #1]
   28f52:	3502      	adds	r5, #2
   28f54:	9b01      	ldr	r3, [sp, #4]
   28f56:	4a29      	ldr	r2, [pc, #164]	; (28ffc <_strtol_l.isra.0+0x108>)
   28f58:	0039      	movs	r1, r7
   28f5a:	189e      	adds	r6, r3, r2
   28f5c:	0030      	movs	r0, r6
   28f5e:	f7fd fa45 	bl	263ec <__aeabi_uidivmod>
   28f62:	0030      	movs	r0, r6
   28f64:	9104      	str	r1, [sp, #16]
   28f66:	0039      	movs	r1, r7
   28f68:	f7fd f9ba 	bl	262e0 <__udivsi3>
   28f6c:	2101      	movs	r1, #1
   28f6e:	2300      	movs	r3, #0
   28f70:	4249      	negs	r1, r1
   28f72:	0002      	movs	r2, r0
   28f74:	468c      	mov	ip, r1
   28f76:	0018      	movs	r0, r3
   28f78:	0021      	movs	r1, r4
   28f7a:	3930      	subs	r1, #48	; 0x30
   28f7c:	2909      	cmp	r1, #9
   28f7e:	d813      	bhi.n	28fa8 <_strtol_l.isra.0+0xb4>
   28f80:	000c      	movs	r4, r1
   28f82:	42a7      	cmp	r7, r4
   28f84:	dd1c      	ble.n	28fc0 <_strtol_l.isra.0+0xcc>
   28f86:	1c59      	adds	r1, r3, #1
   28f88:	d009      	beq.n	28f9e <_strtol_l.isra.0+0xaa>
   28f8a:	4663      	mov	r3, ip
   28f8c:	4282      	cmp	r2, r0
   28f8e:	d306      	bcc.n	28f9e <_strtol_l.isra.0+0xaa>
   28f90:	d102      	bne.n	28f98 <_strtol_l.isra.0+0xa4>
   28f92:	9904      	ldr	r1, [sp, #16]
   28f94:	42a1      	cmp	r1, r4
   28f96:	db02      	blt.n	28f9e <_strtol_l.isra.0+0xaa>
   28f98:	2301      	movs	r3, #1
   28f9a:	4378      	muls	r0, r7
   28f9c:	1820      	adds	r0, r4, r0
   28f9e:	782c      	ldrb	r4, [r5, #0]
   28fa0:	3501      	adds	r5, #1
   28fa2:	e7e9      	b.n	28f78 <_strtol_l.isra.0+0x84>
   28fa4:	270a      	movs	r7, #10
   28fa6:	e7d5      	b.n	28f54 <_strtol_l.isra.0+0x60>
   28fa8:	0021      	movs	r1, r4
   28faa:	3941      	subs	r1, #65	; 0x41
   28fac:	2919      	cmp	r1, #25
   28fae:	d801      	bhi.n	28fb4 <_strtol_l.isra.0+0xc0>
   28fb0:	3c37      	subs	r4, #55	; 0x37
   28fb2:	e7e6      	b.n	28f82 <_strtol_l.isra.0+0x8e>
   28fb4:	0021      	movs	r1, r4
   28fb6:	3961      	subs	r1, #97	; 0x61
   28fb8:	2919      	cmp	r1, #25
   28fba:	d801      	bhi.n	28fc0 <_strtol_l.isra.0+0xcc>
   28fbc:	3c57      	subs	r4, #87	; 0x57
   28fbe:	e7e0      	b.n	28f82 <_strtol_l.isra.0+0x8e>
   28fc0:	1c5a      	adds	r2, r3, #1
   28fc2:	d108      	bne.n	28fd6 <_strtol_l.isra.0+0xe2>
   28fc4:	9a05      	ldr	r2, [sp, #20]
   28fc6:	3323      	adds	r3, #35	; 0x23
   28fc8:	6013      	str	r3, [r2, #0]
   28fca:	9b02      	ldr	r3, [sp, #8]
   28fcc:	0030      	movs	r0, r6
   28fce:	2b00      	cmp	r3, #0
   28fd0:	d10b      	bne.n	28fea <_strtol_l.isra.0+0xf6>
   28fd2:	b007      	add	sp, #28
   28fd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   28fd6:	9a01      	ldr	r2, [sp, #4]
   28fd8:	2a00      	cmp	r2, #0
   28fda:	d000      	beq.n	28fde <_strtol_l.isra.0+0xea>
   28fdc:	4240      	negs	r0, r0
   28fde:	9a02      	ldr	r2, [sp, #8]
   28fe0:	2a00      	cmp	r2, #0
   28fe2:	d0f6      	beq.n	28fd2 <_strtol_l.isra.0+0xde>
   28fe4:	9a03      	ldr	r2, [sp, #12]
   28fe6:	2b00      	cmp	r3, #0
   28fe8:	d000      	beq.n	28fec <_strtol_l.isra.0+0xf8>
   28fea:	1e6a      	subs	r2, r5, #1
   28fec:	9b02      	ldr	r3, [sp, #8]
   28fee:	601a      	str	r2, [r3, #0]
   28ff0:	e7ef      	b.n	28fd2 <_strtol_l.isra.0+0xde>
   28ff2:	2430      	movs	r4, #48	; 0x30
   28ff4:	2f00      	cmp	r7, #0
   28ff6:	d1ad      	bne.n	28f54 <_strtol_l.isra.0+0x60>
   28ff8:	3708      	adds	r7, #8
   28ffa:	e7ab      	b.n	28f54 <_strtol_l.isra.0+0x60>
   28ffc:	7fffffff 	.word	0x7fffffff

00029000 <strtol>:
   29000:	b537      	push	{r0, r1, r2, r4, r5, lr}
   29002:	0013      	movs	r3, r2
   29004:	4a06      	ldr	r2, [pc, #24]	; (29020 <strtol+0x20>)
   29006:	0005      	movs	r5, r0
   29008:	6810      	ldr	r0, [r2, #0]
   2900a:	6a04      	ldr	r4, [r0, #32]
   2900c:	2c00      	cmp	r4, #0
   2900e:	d100      	bne.n	29012 <strtol+0x12>
   29010:	4c04      	ldr	r4, [pc, #16]	; (29024 <strtol+0x24>)
   29012:	000a      	movs	r2, r1
   29014:	9400      	str	r4, [sp, #0]
   29016:	0029      	movs	r1, r5
   29018:	f7ff ff6c 	bl	28ef4 <_strtol_l.isra.0>
   2901c:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   2901e:	46c0      	nop			; (mov r8, r8)
   29020:	20000034 	.word	0x20000034
   29024:	20000098 	.word	0x20000098

00029028 <__utoa>:
   29028:	b5f0      	push	{r4, r5, r6, r7, lr}
   2902a:	0017      	movs	r7, r2
   2902c:	b08f      	sub	sp, #60	; 0x3c
   2902e:	2225      	movs	r2, #37	; 0x25
   29030:	0006      	movs	r6, r0
   29032:	000d      	movs	r5, r1
   29034:	a804      	add	r0, sp, #16
   29036:	4918      	ldr	r1, [pc, #96]	; (29098 <__utoa+0x70>)
   29038:	f7ff fd72 	bl	28b20 <memcpy>
   2903c:	aa04      	add	r2, sp, #16
   2903e:	1ebb      	subs	r3, r7, #2
   29040:	2400      	movs	r4, #0
   29042:	9203      	str	r2, [sp, #12]
   29044:	2b22      	cmp	r3, #34	; 0x22
   29046:	d905      	bls.n	29054 <__utoa+0x2c>
   29048:	702c      	strb	r4, [r5, #0]
   2904a:	0025      	movs	r5, r4
   2904c:	0028      	movs	r0, r5
   2904e:	b00f      	add	sp, #60	; 0x3c
   29050:	bdf0      	pop	{r4, r5, r6, r7, pc}
   29052:	9c01      	ldr	r4, [sp, #4]
   29054:	1c63      	adds	r3, r4, #1
   29056:	9301      	str	r3, [sp, #4]
   29058:	18eb      	adds	r3, r5, r3
   2905a:	9300      	str	r3, [sp, #0]
   2905c:	0030      	movs	r0, r6
   2905e:	3b01      	subs	r3, #1
   29060:	0039      	movs	r1, r7
   29062:	9302      	str	r3, [sp, #8]
   29064:	f7fd f9c2 	bl	263ec <__aeabi_uidivmod>
   29068:	9b03      	ldr	r3, [sp, #12]
   2906a:	9a02      	ldr	r2, [sp, #8]
   2906c:	5c5b      	ldrb	r3, [r3, r1]
   2906e:	0030      	movs	r0, r6
   29070:	7013      	strb	r3, [r2, #0]
   29072:	0039      	movs	r1, r7
   29074:	f7fd f934 	bl	262e0 <__udivsi3>
   29078:	1e06      	subs	r6, r0, #0
   2907a:	d1ea      	bne.n	29052 <__utoa+0x2a>
   2907c:	9b00      	ldr	r3, [sp, #0]
   2907e:	7018      	strb	r0, [r3, #0]
   29080:	002b      	movs	r3, r5
   29082:	1b5a      	subs	r2, r3, r5
   29084:	4294      	cmp	r4, r2
   29086:	dde1      	ble.n	2904c <__utoa+0x24>
   29088:	781a      	ldrb	r2, [r3, #0]
   2908a:	5d29      	ldrb	r1, [r5, r4]
   2908c:	7019      	strb	r1, [r3, #0]
   2908e:	552a      	strb	r2, [r5, r4]
   29090:	3301      	adds	r3, #1
   29092:	3c01      	subs	r4, #1
   29094:	e7f5      	b.n	29082 <__utoa+0x5a>
   29096:	46c0      	nop			; (mov r8, r8)
   29098:	0002ac42 	.word	0x0002ac42

0002909c <utoa>:
   2909c:	b510      	push	{r4, lr}
   2909e:	f7ff ffc3 	bl	29028 <__utoa>
   290a2:	bd10      	pop	{r4, pc}

000290a4 <_vsiprintf_r>:
   290a4:	b530      	push	{r4, r5, lr}
   290a6:	b09b      	sub	sp, #108	; 0x6c
   290a8:	9100      	str	r1, [sp, #0]
   290aa:	9104      	str	r1, [sp, #16]
   290ac:	4908      	ldr	r1, [pc, #32]	; (290d0 <_vsiprintf_r+0x2c>)
   290ae:	466d      	mov	r5, sp
   290b0:	9102      	str	r1, [sp, #8]
   290b2:	9105      	str	r1, [sp, #20]
   290b4:	2101      	movs	r1, #1
   290b6:	2482      	movs	r4, #130	; 0x82
   290b8:	4249      	negs	r1, r1
   290ba:	81e9      	strh	r1, [r5, #14]
   290bc:	00a4      	lsls	r4, r4, #2
   290be:	4669      	mov	r1, sp
   290c0:	81ac      	strh	r4, [r5, #12]
   290c2:	f000 f883 	bl	291cc <_svfiprintf_r>
   290c6:	2300      	movs	r3, #0
   290c8:	9a00      	ldr	r2, [sp, #0]
   290ca:	7013      	strb	r3, [r2, #0]
   290cc:	b01b      	add	sp, #108	; 0x6c
   290ce:	bd30      	pop	{r4, r5, pc}
   290d0:	7fffffff 	.word	0x7fffffff

000290d4 <vsiprintf>:
   290d4:	b510      	push	{r4, lr}
   290d6:	0013      	movs	r3, r2
   290d8:	000a      	movs	r2, r1
   290da:	0001      	movs	r1, r0
   290dc:	4802      	ldr	r0, [pc, #8]	; (290e8 <vsiprintf+0x14>)
   290de:	6800      	ldr	r0, [r0, #0]
   290e0:	f7ff ffe0 	bl	290a4 <_vsiprintf_r>
   290e4:	bd10      	pop	{r4, pc}
   290e6:	46c0      	nop			; (mov r8, r8)
   290e8:	20000034 	.word	0x20000034

000290ec <__ascii_wctomb>:
   290ec:	1e0b      	subs	r3, r1, #0
   290ee:	d004      	beq.n	290fa <__ascii_wctomb+0xe>
   290f0:	2aff      	cmp	r2, #255	; 0xff
   290f2:	d904      	bls.n	290fe <__ascii_wctomb+0x12>
   290f4:	238a      	movs	r3, #138	; 0x8a
   290f6:	6003      	str	r3, [r0, #0]
   290f8:	3b8b      	subs	r3, #139	; 0x8b
   290fa:	0018      	movs	r0, r3
   290fc:	4770      	bx	lr
   290fe:	700a      	strb	r2, [r1, #0]
   29100:	2301      	movs	r3, #1
   29102:	e7fa      	b.n	290fa <__ascii_wctomb+0xe>

00029104 <__malloc_lock>:
   29104:	4770      	bx	lr

00029106 <__malloc_unlock>:
   29106:	4770      	bx	lr

00029108 <__ssputs_r>:
   29108:	b5f0      	push	{r4, r5, r6, r7, lr}
   2910a:	688e      	ldr	r6, [r1, #8]
   2910c:	b085      	sub	sp, #20
   2910e:	0007      	movs	r7, r0
   29110:	000c      	movs	r4, r1
   29112:	9203      	str	r2, [sp, #12]
   29114:	9301      	str	r3, [sp, #4]
   29116:	429e      	cmp	r6, r3
   29118:	d839      	bhi.n	2918e <__ssputs_r+0x86>
   2911a:	2390      	movs	r3, #144	; 0x90
   2911c:	898a      	ldrh	r2, [r1, #12]
   2911e:	00db      	lsls	r3, r3, #3
   29120:	421a      	tst	r2, r3
   29122:	d034      	beq.n	2918e <__ssputs_r+0x86>
   29124:	2503      	movs	r5, #3
   29126:	6909      	ldr	r1, [r1, #16]
   29128:	6823      	ldr	r3, [r4, #0]
   2912a:	1a5b      	subs	r3, r3, r1
   2912c:	9302      	str	r3, [sp, #8]
   2912e:	6963      	ldr	r3, [r4, #20]
   29130:	9802      	ldr	r0, [sp, #8]
   29132:	435d      	muls	r5, r3
   29134:	0feb      	lsrs	r3, r5, #31
   29136:	195d      	adds	r5, r3, r5
   29138:	9b01      	ldr	r3, [sp, #4]
   2913a:	106d      	asrs	r5, r5, #1
   2913c:	3301      	adds	r3, #1
   2913e:	181b      	adds	r3, r3, r0
   29140:	42ab      	cmp	r3, r5
   29142:	d900      	bls.n	29146 <__ssputs_r+0x3e>
   29144:	001d      	movs	r5, r3
   29146:	0553      	lsls	r3, r2, #21
   29148:	d532      	bpl.n	291b0 <__ssputs_r+0xa8>
   2914a:	0029      	movs	r1, r5
   2914c:	0038      	movs	r0, r7
   2914e:	f7ff fd63 	bl	28c18 <_malloc_r>
   29152:	1e06      	subs	r6, r0, #0
   29154:	d109      	bne.n	2916a <__ssputs_r+0x62>
   29156:	230c      	movs	r3, #12
   29158:	603b      	str	r3, [r7, #0]
   2915a:	2340      	movs	r3, #64	; 0x40
   2915c:	2001      	movs	r0, #1
   2915e:	89a2      	ldrh	r2, [r4, #12]
   29160:	4240      	negs	r0, r0
   29162:	4313      	orrs	r3, r2
   29164:	81a3      	strh	r3, [r4, #12]
   29166:	b005      	add	sp, #20
   29168:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2916a:	9a02      	ldr	r2, [sp, #8]
   2916c:	6921      	ldr	r1, [r4, #16]
   2916e:	f7ff fcd7 	bl	28b20 <memcpy>
   29172:	89a3      	ldrh	r3, [r4, #12]
   29174:	4a14      	ldr	r2, [pc, #80]	; (291c8 <__ssputs_r+0xc0>)
   29176:	401a      	ands	r2, r3
   29178:	2380      	movs	r3, #128	; 0x80
   2917a:	4313      	orrs	r3, r2
   2917c:	81a3      	strh	r3, [r4, #12]
   2917e:	9b02      	ldr	r3, [sp, #8]
   29180:	6126      	str	r6, [r4, #16]
   29182:	18f6      	adds	r6, r6, r3
   29184:	6026      	str	r6, [r4, #0]
   29186:	6165      	str	r5, [r4, #20]
   29188:	9e01      	ldr	r6, [sp, #4]
   2918a:	1aed      	subs	r5, r5, r3
   2918c:	60a5      	str	r5, [r4, #8]
   2918e:	9b01      	ldr	r3, [sp, #4]
   29190:	42b3      	cmp	r3, r6
   29192:	d200      	bcs.n	29196 <__ssputs_r+0x8e>
   29194:	001e      	movs	r6, r3
   29196:	0032      	movs	r2, r6
   29198:	9903      	ldr	r1, [sp, #12]
   2919a:	6820      	ldr	r0, [r4, #0]
   2919c:	f7ff fcc9 	bl	28b32 <memmove>
   291a0:	68a3      	ldr	r3, [r4, #8]
   291a2:	2000      	movs	r0, #0
   291a4:	1b9b      	subs	r3, r3, r6
   291a6:	60a3      	str	r3, [r4, #8]
   291a8:	6823      	ldr	r3, [r4, #0]
   291aa:	199e      	adds	r6, r3, r6
   291ac:	6026      	str	r6, [r4, #0]
   291ae:	e7da      	b.n	29166 <__ssputs_r+0x5e>
   291b0:	002a      	movs	r2, r5
   291b2:	0038      	movs	r0, r7
   291b4:	f000 faa1 	bl	296fa <_realloc_r>
   291b8:	1e06      	subs	r6, r0, #0
   291ba:	d1e0      	bne.n	2917e <__ssputs_r+0x76>
   291bc:	6921      	ldr	r1, [r4, #16]
   291be:	0038      	movs	r0, r7
   291c0:	f7ff fce0 	bl	28b84 <_free_r>
   291c4:	e7c7      	b.n	29156 <__ssputs_r+0x4e>
   291c6:	46c0      	nop			; (mov r8, r8)
   291c8:	fffffb7f 	.word	0xfffffb7f

000291cc <_svfiprintf_r>:
   291cc:	b5f0      	push	{r4, r5, r6, r7, lr}
   291ce:	b09f      	sub	sp, #124	; 0x7c
   291d0:	9002      	str	r0, [sp, #8]
   291d2:	9305      	str	r3, [sp, #20]
   291d4:	898b      	ldrh	r3, [r1, #12]
   291d6:	000f      	movs	r7, r1
   291d8:	0016      	movs	r6, r2
   291da:	061b      	lsls	r3, r3, #24
   291dc:	d511      	bpl.n	29202 <_svfiprintf_r+0x36>
   291de:	690b      	ldr	r3, [r1, #16]
   291e0:	2b00      	cmp	r3, #0
   291e2:	d10e      	bne.n	29202 <_svfiprintf_r+0x36>
   291e4:	2140      	movs	r1, #64	; 0x40
   291e6:	f7ff fd17 	bl	28c18 <_malloc_r>
   291ea:	6038      	str	r0, [r7, #0]
   291ec:	6138      	str	r0, [r7, #16]
   291ee:	2800      	cmp	r0, #0
   291f0:	d105      	bne.n	291fe <_svfiprintf_r+0x32>
   291f2:	230c      	movs	r3, #12
   291f4:	9a02      	ldr	r2, [sp, #8]
   291f6:	3801      	subs	r0, #1
   291f8:	6013      	str	r3, [r2, #0]
   291fa:	b01f      	add	sp, #124	; 0x7c
   291fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   291fe:	2340      	movs	r3, #64	; 0x40
   29200:	617b      	str	r3, [r7, #20]
   29202:	2300      	movs	r3, #0
   29204:	ad06      	add	r5, sp, #24
   29206:	616b      	str	r3, [r5, #20]
   29208:	3320      	adds	r3, #32
   2920a:	766b      	strb	r3, [r5, #25]
   2920c:	3310      	adds	r3, #16
   2920e:	76ab      	strb	r3, [r5, #26]
   29210:	0034      	movs	r4, r6
   29212:	7823      	ldrb	r3, [r4, #0]
   29214:	2b00      	cmp	r3, #0
   29216:	d147      	bne.n	292a8 <_svfiprintf_r+0xdc>
   29218:	1ba3      	subs	r3, r4, r6
   2921a:	9304      	str	r3, [sp, #16]
   2921c:	d00d      	beq.n	2923a <_svfiprintf_r+0x6e>
   2921e:	1ba3      	subs	r3, r4, r6
   29220:	0032      	movs	r2, r6
   29222:	0039      	movs	r1, r7
   29224:	9802      	ldr	r0, [sp, #8]
   29226:	f7ff ff6f 	bl	29108 <__ssputs_r>
   2922a:	1c43      	adds	r3, r0, #1
   2922c:	d100      	bne.n	29230 <_svfiprintf_r+0x64>
   2922e:	e0b5      	b.n	2939c <_svfiprintf_r+0x1d0>
   29230:	696a      	ldr	r2, [r5, #20]
   29232:	9b04      	ldr	r3, [sp, #16]
   29234:	4694      	mov	ip, r2
   29236:	4463      	add	r3, ip
   29238:	616b      	str	r3, [r5, #20]
   2923a:	7823      	ldrb	r3, [r4, #0]
   2923c:	2b00      	cmp	r3, #0
   2923e:	d100      	bne.n	29242 <_svfiprintf_r+0x76>
   29240:	e0ac      	b.n	2939c <_svfiprintf_r+0x1d0>
   29242:	2201      	movs	r2, #1
   29244:	2300      	movs	r3, #0
   29246:	4252      	negs	r2, r2
   29248:	606a      	str	r2, [r5, #4]
   2924a:	a902      	add	r1, sp, #8
   2924c:	3254      	adds	r2, #84	; 0x54
   2924e:	1852      	adds	r2, r2, r1
   29250:	3401      	adds	r4, #1
   29252:	602b      	str	r3, [r5, #0]
   29254:	60eb      	str	r3, [r5, #12]
   29256:	60ab      	str	r3, [r5, #8]
   29258:	7013      	strb	r3, [r2, #0]
   2925a:	65ab      	str	r3, [r5, #88]	; 0x58
   2925c:	4e58      	ldr	r6, [pc, #352]	; (293c0 <_svfiprintf_r+0x1f4>)
   2925e:	2205      	movs	r2, #5
   29260:	7821      	ldrb	r1, [r4, #0]
   29262:	0030      	movs	r0, r6
   29264:	f000 fa3e 	bl	296e4 <memchr>
   29268:	1c62      	adds	r2, r4, #1
   2926a:	2800      	cmp	r0, #0
   2926c:	d120      	bne.n	292b0 <_svfiprintf_r+0xe4>
   2926e:	6829      	ldr	r1, [r5, #0]
   29270:	06cb      	lsls	r3, r1, #27
   29272:	d504      	bpl.n	2927e <_svfiprintf_r+0xb2>
   29274:	2353      	movs	r3, #83	; 0x53
   29276:	ae02      	add	r6, sp, #8
   29278:	3020      	adds	r0, #32
   2927a:	199b      	adds	r3, r3, r6
   2927c:	7018      	strb	r0, [r3, #0]
   2927e:	070b      	lsls	r3, r1, #28
   29280:	d504      	bpl.n	2928c <_svfiprintf_r+0xc0>
   29282:	2353      	movs	r3, #83	; 0x53
   29284:	202b      	movs	r0, #43	; 0x2b
   29286:	ae02      	add	r6, sp, #8
   29288:	199b      	adds	r3, r3, r6
   2928a:	7018      	strb	r0, [r3, #0]
   2928c:	7823      	ldrb	r3, [r4, #0]
   2928e:	2b2a      	cmp	r3, #42	; 0x2a
   29290:	d016      	beq.n	292c0 <_svfiprintf_r+0xf4>
   29292:	2000      	movs	r0, #0
   29294:	210a      	movs	r1, #10
   29296:	9b09      	ldr	r3, [sp, #36]	; 0x24
   29298:	7822      	ldrb	r2, [r4, #0]
   2929a:	3a30      	subs	r2, #48	; 0x30
   2929c:	2a09      	cmp	r2, #9
   2929e:	d955      	bls.n	2934c <_svfiprintf_r+0x180>
   292a0:	2800      	cmp	r0, #0
   292a2:	d015      	beq.n	292d0 <_svfiprintf_r+0x104>
   292a4:	9309      	str	r3, [sp, #36]	; 0x24
   292a6:	e013      	b.n	292d0 <_svfiprintf_r+0x104>
   292a8:	2b25      	cmp	r3, #37	; 0x25
   292aa:	d0b5      	beq.n	29218 <_svfiprintf_r+0x4c>
   292ac:	3401      	adds	r4, #1
   292ae:	e7b0      	b.n	29212 <_svfiprintf_r+0x46>
   292b0:	2301      	movs	r3, #1
   292b2:	1b80      	subs	r0, r0, r6
   292b4:	4083      	lsls	r3, r0
   292b6:	6829      	ldr	r1, [r5, #0]
   292b8:	0014      	movs	r4, r2
   292ba:	430b      	orrs	r3, r1
   292bc:	602b      	str	r3, [r5, #0]
   292be:	e7cd      	b.n	2925c <_svfiprintf_r+0x90>
   292c0:	9b05      	ldr	r3, [sp, #20]
   292c2:	1d18      	adds	r0, r3, #4
   292c4:	681b      	ldr	r3, [r3, #0]
   292c6:	9005      	str	r0, [sp, #20]
   292c8:	2b00      	cmp	r3, #0
   292ca:	db39      	blt.n	29340 <_svfiprintf_r+0x174>
   292cc:	9309      	str	r3, [sp, #36]	; 0x24
   292ce:	0014      	movs	r4, r2
   292d0:	7823      	ldrb	r3, [r4, #0]
   292d2:	2b2e      	cmp	r3, #46	; 0x2e
   292d4:	d10b      	bne.n	292ee <_svfiprintf_r+0x122>
   292d6:	7863      	ldrb	r3, [r4, #1]
   292d8:	1c62      	adds	r2, r4, #1
   292da:	2b2a      	cmp	r3, #42	; 0x2a
   292dc:	d13e      	bne.n	2935c <_svfiprintf_r+0x190>
   292de:	9b05      	ldr	r3, [sp, #20]
   292e0:	3402      	adds	r4, #2
   292e2:	1d1a      	adds	r2, r3, #4
   292e4:	681b      	ldr	r3, [r3, #0]
   292e6:	9205      	str	r2, [sp, #20]
   292e8:	2b00      	cmp	r3, #0
   292ea:	db34      	blt.n	29356 <_svfiprintf_r+0x18a>
   292ec:	9307      	str	r3, [sp, #28]
   292ee:	4e35      	ldr	r6, [pc, #212]	; (293c4 <_svfiprintf_r+0x1f8>)
   292f0:	7821      	ldrb	r1, [r4, #0]
   292f2:	2203      	movs	r2, #3
   292f4:	0030      	movs	r0, r6
   292f6:	f000 f9f5 	bl	296e4 <memchr>
   292fa:	2800      	cmp	r0, #0
   292fc:	d006      	beq.n	2930c <_svfiprintf_r+0x140>
   292fe:	2340      	movs	r3, #64	; 0x40
   29300:	1b80      	subs	r0, r0, r6
   29302:	4083      	lsls	r3, r0
   29304:	682a      	ldr	r2, [r5, #0]
   29306:	3401      	adds	r4, #1
   29308:	4313      	orrs	r3, r2
   2930a:	602b      	str	r3, [r5, #0]
   2930c:	7821      	ldrb	r1, [r4, #0]
   2930e:	2206      	movs	r2, #6
   29310:	482d      	ldr	r0, [pc, #180]	; (293c8 <_svfiprintf_r+0x1fc>)
   29312:	1c66      	adds	r6, r4, #1
   29314:	7629      	strb	r1, [r5, #24]
   29316:	f000 f9e5 	bl	296e4 <memchr>
   2931a:	2800      	cmp	r0, #0
   2931c:	d046      	beq.n	293ac <_svfiprintf_r+0x1e0>
   2931e:	4b2b      	ldr	r3, [pc, #172]	; (293cc <_svfiprintf_r+0x200>)
   29320:	2b00      	cmp	r3, #0
   29322:	d12f      	bne.n	29384 <_svfiprintf_r+0x1b8>
   29324:	6829      	ldr	r1, [r5, #0]
   29326:	9b05      	ldr	r3, [sp, #20]
   29328:	2207      	movs	r2, #7
   2932a:	05c9      	lsls	r1, r1, #23
   2932c:	d528      	bpl.n	29380 <_svfiprintf_r+0x1b4>
   2932e:	189b      	adds	r3, r3, r2
   29330:	4393      	bics	r3, r2
   29332:	3308      	adds	r3, #8
   29334:	9305      	str	r3, [sp, #20]
   29336:	696b      	ldr	r3, [r5, #20]
   29338:	9a03      	ldr	r2, [sp, #12]
   2933a:	189b      	adds	r3, r3, r2
   2933c:	616b      	str	r3, [r5, #20]
   2933e:	e767      	b.n	29210 <_svfiprintf_r+0x44>
   29340:	425b      	negs	r3, r3
   29342:	60eb      	str	r3, [r5, #12]
   29344:	2302      	movs	r3, #2
   29346:	430b      	orrs	r3, r1
   29348:	602b      	str	r3, [r5, #0]
   2934a:	e7c0      	b.n	292ce <_svfiprintf_r+0x102>
   2934c:	434b      	muls	r3, r1
   2934e:	3401      	adds	r4, #1
   29350:	189b      	adds	r3, r3, r2
   29352:	2001      	movs	r0, #1
   29354:	e7a0      	b.n	29298 <_svfiprintf_r+0xcc>
   29356:	2301      	movs	r3, #1
   29358:	425b      	negs	r3, r3
   2935a:	e7c7      	b.n	292ec <_svfiprintf_r+0x120>
   2935c:	2300      	movs	r3, #0
   2935e:	0014      	movs	r4, r2
   29360:	200a      	movs	r0, #10
   29362:	001a      	movs	r2, r3
   29364:	606b      	str	r3, [r5, #4]
   29366:	7821      	ldrb	r1, [r4, #0]
   29368:	3930      	subs	r1, #48	; 0x30
   2936a:	2909      	cmp	r1, #9
   2936c:	d903      	bls.n	29376 <_svfiprintf_r+0x1aa>
   2936e:	2b00      	cmp	r3, #0
   29370:	d0bd      	beq.n	292ee <_svfiprintf_r+0x122>
   29372:	9207      	str	r2, [sp, #28]
   29374:	e7bb      	b.n	292ee <_svfiprintf_r+0x122>
   29376:	4342      	muls	r2, r0
   29378:	3401      	adds	r4, #1
   2937a:	1852      	adds	r2, r2, r1
   2937c:	2301      	movs	r3, #1
   2937e:	e7f2      	b.n	29366 <_svfiprintf_r+0x19a>
   29380:	3307      	adds	r3, #7
   29382:	e7d5      	b.n	29330 <_svfiprintf_r+0x164>
   29384:	ab05      	add	r3, sp, #20
   29386:	9300      	str	r3, [sp, #0]
   29388:	003a      	movs	r2, r7
   2938a:	4b11      	ldr	r3, [pc, #68]	; (293d0 <_svfiprintf_r+0x204>)
   2938c:	0029      	movs	r1, r5
   2938e:	9802      	ldr	r0, [sp, #8]
   29390:	e000      	b.n	29394 <_svfiprintf_r+0x1c8>
   29392:	bf00      	nop
   29394:	9003      	str	r0, [sp, #12]
   29396:	9b03      	ldr	r3, [sp, #12]
   29398:	3301      	adds	r3, #1
   2939a:	d1cc      	bne.n	29336 <_svfiprintf_r+0x16a>
   2939c:	89bb      	ldrh	r3, [r7, #12]
   2939e:	980b      	ldr	r0, [sp, #44]	; 0x2c
   293a0:	065b      	lsls	r3, r3, #25
   293a2:	d400      	bmi.n	293a6 <_svfiprintf_r+0x1da>
   293a4:	e729      	b.n	291fa <_svfiprintf_r+0x2e>
   293a6:	2001      	movs	r0, #1
   293a8:	4240      	negs	r0, r0
   293aa:	e726      	b.n	291fa <_svfiprintf_r+0x2e>
   293ac:	ab05      	add	r3, sp, #20
   293ae:	9300      	str	r3, [sp, #0]
   293b0:	003a      	movs	r2, r7
   293b2:	4b07      	ldr	r3, [pc, #28]	; (293d0 <_svfiprintf_r+0x204>)
   293b4:	0029      	movs	r1, r5
   293b6:	9802      	ldr	r0, [sp, #8]
   293b8:	f000 f87a 	bl	294b0 <_printf_i>
   293bc:	e7ea      	b.n	29394 <_svfiprintf_r+0x1c8>
   293be:	46c0      	nop			; (mov r8, r8)
   293c0:	0002ad68 	.word	0x0002ad68
   293c4:	0002ad6e 	.word	0x0002ad6e
   293c8:	0002ad72 	.word	0x0002ad72
   293cc:	00000000 	.word	0x00000000
   293d0:	00029109 	.word	0x00029109

000293d4 <_printf_common>:
   293d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   293d6:	0015      	movs	r5, r2
   293d8:	9301      	str	r3, [sp, #4]
   293da:	688a      	ldr	r2, [r1, #8]
   293dc:	690b      	ldr	r3, [r1, #16]
   293de:	9000      	str	r0, [sp, #0]
   293e0:	000c      	movs	r4, r1
   293e2:	4293      	cmp	r3, r2
   293e4:	da00      	bge.n	293e8 <_printf_common+0x14>
   293e6:	0013      	movs	r3, r2
   293e8:	0022      	movs	r2, r4
   293ea:	602b      	str	r3, [r5, #0]
   293ec:	3243      	adds	r2, #67	; 0x43
   293ee:	7812      	ldrb	r2, [r2, #0]
   293f0:	2a00      	cmp	r2, #0
   293f2:	d001      	beq.n	293f8 <_printf_common+0x24>
   293f4:	3301      	adds	r3, #1
   293f6:	602b      	str	r3, [r5, #0]
   293f8:	6823      	ldr	r3, [r4, #0]
   293fa:	069b      	lsls	r3, r3, #26
   293fc:	d502      	bpl.n	29404 <_printf_common+0x30>
   293fe:	682b      	ldr	r3, [r5, #0]
   29400:	3302      	adds	r3, #2
   29402:	602b      	str	r3, [r5, #0]
   29404:	2706      	movs	r7, #6
   29406:	6823      	ldr	r3, [r4, #0]
   29408:	401f      	ands	r7, r3
   2940a:	d027      	beq.n	2945c <_printf_common+0x88>
   2940c:	0023      	movs	r3, r4
   2940e:	3343      	adds	r3, #67	; 0x43
   29410:	781b      	ldrb	r3, [r3, #0]
   29412:	1e5a      	subs	r2, r3, #1
   29414:	4193      	sbcs	r3, r2
   29416:	6822      	ldr	r2, [r4, #0]
   29418:	0692      	lsls	r2, r2, #26
   2941a:	d430      	bmi.n	2947e <_printf_common+0xaa>
   2941c:	0022      	movs	r2, r4
   2941e:	9901      	ldr	r1, [sp, #4]
   29420:	3243      	adds	r2, #67	; 0x43
   29422:	9800      	ldr	r0, [sp, #0]
   29424:	9e08      	ldr	r6, [sp, #32]
   29426:	47b0      	blx	r6
   29428:	1c43      	adds	r3, r0, #1
   2942a:	d025      	beq.n	29478 <_printf_common+0xa4>
   2942c:	2306      	movs	r3, #6
   2942e:	6820      	ldr	r0, [r4, #0]
   29430:	682a      	ldr	r2, [r5, #0]
   29432:	68e1      	ldr	r1, [r4, #12]
   29434:	4003      	ands	r3, r0
   29436:	2500      	movs	r5, #0
   29438:	2b04      	cmp	r3, #4
   2943a:	d103      	bne.n	29444 <_printf_common+0x70>
   2943c:	1a8d      	subs	r5, r1, r2
   2943e:	43eb      	mvns	r3, r5
   29440:	17db      	asrs	r3, r3, #31
   29442:	401d      	ands	r5, r3
   29444:	68a3      	ldr	r3, [r4, #8]
   29446:	6922      	ldr	r2, [r4, #16]
   29448:	4293      	cmp	r3, r2
   2944a:	dd01      	ble.n	29450 <_printf_common+0x7c>
   2944c:	1a9b      	subs	r3, r3, r2
   2944e:	18ed      	adds	r5, r5, r3
   29450:	2700      	movs	r7, #0
   29452:	42bd      	cmp	r5, r7
   29454:	d120      	bne.n	29498 <_printf_common+0xc4>
   29456:	2000      	movs	r0, #0
   29458:	e010      	b.n	2947c <_printf_common+0xa8>
   2945a:	3701      	adds	r7, #1
   2945c:	68e3      	ldr	r3, [r4, #12]
   2945e:	682a      	ldr	r2, [r5, #0]
   29460:	1a9b      	subs	r3, r3, r2
   29462:	429f      	cmp	r7, r3
   29464:	dad2      	bge.n	2940c <_printf_common+0x38>
   29466:	0022      	movs	r2, r4
   29468:	2301      	movs	r3, #1
   2946a:	3219      	adds	r2, #25
   2946c:	9901      	ldr	r1, [sp, #4]
   2946e:	9800      	ldr	r0, [sp, #0]
   29470:	9e08      	ldr	r6, [sp, #32]
   29472:	47b0      	blx	r6
   29474:	1c43      	adds	r3, r0, #1
   29476:	d1f0      	bne.n	2945a <_printf_common+0x86>
   29478:	2001      	movs	r0, #1
   2947a:	4240      	negs	r0, r0
   2947c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   2947e:	2030      	movs	r0, #48	; 0x30
   29480:	18e1      	adds	r1, r4, r3
   29482:	3143      	adds	r1, #67	; 0x43
   29484:	7008      	strb	r0, [r1, #0]
   29486:	0021      	movs	r1, r4
   29488:	1c5a      	adds	r2, r3, #1
   2948a:	3145      	adds	r1, #69	; 0x45
   2948c:	7809      	ldrb	r1, [r1, #0]
   2948e:	18a2      	adds	r2, r4, r2
   29490:	3243      	adds	r2, #67	; 0x43
   29492:	3302      	adds	r3, #2
   29494:	7011      	strb	r1, [r2, #0]
   29496:	e7c1      	b.n	2941c <_printf_common+0x48>
   29498:	0022      	movs	r2, r4
   2949a:	2301      	movs	r3, #1
   2949c:	321a      	adds	r2, #26
   2949e:	9901      	ldr	r1, [sp, #4]
   294a0:	9800      	ldr	r0, [sp, #0]
   294a2:	9e08      	ldr	r6, [sp, #32]
   294a4:	47b0      	blx	r6
   294a6:	1c43      	adds	r3, r0, #1
   294a8:	d0e6      	beq.n	29478 <_printf_common+0xa4>
   294aa:	3701      	adds	r7, #1
   294ac:	e7d1      	b.n	29452 <_printf_common+0x7e>
	...

000294b0 <_printf_i>:
   294b0:	b5f0      	push	{r4, r5, r6, r7, lr}
   294b2:	b08b      	sub	sp, #44	; 0x2c
   294b4:	9206      	str	r2, [sp, #24]
   294b6:	000a      	movs	r2, r1
   294b8:	3243      	adds	r2, #67	; 0x43
   294ba:	9307      	str	r3, [sp, #28]
   294bc:	9005      	str	r0, [sp, #20]
   294be:	9204      	str	r2, [sp, #16]
   294c0:	7e0a      	ldrb	r2, [r1, #24]
   294c2:	000c      	movs	r4, r1
   294c4:	9b10      	ldr	r3, [sp, #64]	; 0x40
   294c6:	2a6e      	cmp	r2, #110	; 0x6e
   294c8:	d100      	bne.n	294cc <_printf_i+0x1c>
   294ca:	e08f      	b.n	295ec <_printf_i+0x13c>
   294cc:	d817      	bhi.n	294fe <_printf_i+0x4e>
   294ce:	2a63      	cmp	r2, #99	; 0x63
   294d0:	d02c      	beq.n	2952c <_printf_i+0x7c>
   294d2:	d808      	bhi.n	294e6 <_printf_i+0x36>
   294d4:	2a00      	cmp	r2, #0
   294d6:	d100      	bne.n	294da <_printf_i+0x2a>
   294d8:	e099      	b.n	2960e <_printf_i+0x15e>
   294da:	2a58      	cmp	r2, #88	; 0x58
   294dc:	d054      	beq.n	29588 <_printf_i+0xd8>
   294de:	0026      	movs	r6, r4
   294e0:	3642      	adds	r6, #66	; 0x42
   294e2:	7032      	strb	r2, [r6, #0]
   294e4:	e029      	b.n	2953a <_printf_i+0x8a>
   294e6:	2a64      	cmp	r2, #100	; 0x64
   294e8:	d001      	beq.n	294ee <_printf_i+0x3e>
   294ea:	2a69      	cmp	r2, #105	; 0x69
   294ec:	d1f7      	bne.n	294de <_printf_i+0x2e>
   294ee:	6821      	ldr	r1, [r4, #0]
   294f0:	681a      	ldr	r2, [r3, #0]
   294f2:	0608      	lsls	r0, r1, #24
   294f4:	d523      	bpl.n	2953e <_printf_i+0x8e>
   294f6:	1d11      	adds	r1, r2, #4
   294f8:	6019      	str	r1, [r3, #0]
   294fa:	6815      	ldr	r5, [r2, #0]
   294fc:	e025      	b.n	2954a <_printf_i+0x9a>
   294fe:	2a73      	cmp	r2, #115	; 0x73
   29500:	d100      	bne.n	29504 <_printf_i+0x54>
   29502:	e088      	b.n	29616 <_printf_i+0x166>
   29504:	d808      	bhi.n	29518 <_printf_i+0x68>
   29506:	2a6f      	cmp	r2, #111	; 0x6f
   29508:	d029      	beq.n	2955e <_printf_i+0xae>
   2950a:	2a70      	cmp	r2, #112	; 0x70
   2950c:	d1e7      	bne.n	294de <_printf_i+0x2e>
   2950e:	2220      	movs	r2, #32
   29510:	6809      	ldr	r1, [r1, #0]
   29512:	430a      	orrs	r2, r1
   29514:	6022      	str	r2, [r4, #0]
   29516:	e003      	b.n	29520 <_printf_i+0x70>
   29518:	2a75      	cmp	r2, #117	; 0x75
   2951a:	d020      	beq.n	2955e <_printf_i+0xae>
   2951c:	2a78      	cmp	r2, #120	; 0x78
   2951e:	d1de      	bne.n	294de <_printf_i+0x2e>
   29520:	0022      	movs	r2, r4
   29522:	2178      	movs	r1, #120	; 0x78
   29524:	3245      	adds	r2, #69	; 0x45
   29526:	7011      	strb	r1, [r2, #0]
   29528:	4a6c      	ldr	r2, [pc, #432]	; (296dc <_printf_i+0x22c>)
   2952a:	e030      	b.n	2958e <_printf_i+0xde>
   2952c:	000e      	movs	r6, r1
   2952e:	681a      	ldr	r2, [r3, #0]
   29530:	3642      	adds	r6, #66	; 0x42
   29532:	1d11      	adds	r1, r2, #4
   29534:	6019      	str	r1, [r3, #0]
   29536:	6813      	ldr	r3, [r2, #0]
   29538:	7033      	strb	r3, [r6, #0]
   2953a:	2301      	movs	r3, #1
   2953c:	e079      	b.n	29632 <_printf_i+0x182>
   2953e:	0649      	lsls	r1, r1, #25
   29540:	d5d9      	bpl.n	294f6 <_printf_i+0x46>
   29542:	1d11      	adds	r1, r2, #4
   29544:	6019      	str	r1, [r3, #0]
   29546:	2300      	movs	r3, #0
   29548:	5ed5      	ldrsh	r5, [r2, r3]
   2954a:	2d00      	cmp	r5, #0
   2954c:	da03      	bge.n	29556 <_printf_i+0xa6>
   2954e:	232d      	movs	r3, #45	; 0x2d
   29550:	9a04      	ldr	r2, [sp, #16]
   29552:	426d      	negs	r5, r5
   29554:	7013      	strb	r3, [r2, #0]
   29556:	4b62      	ldr	r3, [pc, #392]	; (296e0 <_printf_i+0x230>)
   29558:	270a      	movs	r7, #10
   2955a:	9303      	str	r3, [sp, #12]
   2955c:	e02f      	b.n	295be <_printf_i+0x10e>
   2955e:	6820      	ldr	r0, [r4, #0]
   29560:	6819      	ldr	r1, [r3, #0]
   29562:	0605      	lsls	r5, r0, #24
   29564:	d503      	bpl.n	2956e <_printf_i+0xbe>
   29566:	1d08      	adds	r0, r1, #4
   29568:	6018      	str	r0, [r3, #0]
   2956a:	680d      	ldr	r5, [r1, #0]
   2956c:	e005      	b.n	2957a <_printf_i+0xca>
   2956e:	0640      	lsls	r0, r0, #25
   29570:	d5f9      	bpl.n	29566 <_printf_i+0xb6>
   29572:	680d      	ldr	r5, [r1, #0]
   29574:	1d08      	adds	r0, r1, #4
   29576:	6018      	str	r0, [r3, #0]
   29578:	b2ad      	uxth	r5, r5
   2957a:	4b59      	ldr	r3, [pc, #356]	; (296e0 <_printf_i+0x230>)
   2957c:	2708      	movs	r7, #8
   2957e:	9303      	str	r3, [sp, #12]
   29580:	2a6f      	cmp	r2, #111	; 0x6f
   29582:	d018      	beq.n	295b6 <_printf_i+0x106>
   29584:	270a      	movs	r7, #10
   29586:	e016      	b.n	295b6 <_printf_i+0x106>
   29588:	3145      	adds	r1, #69	; 0x45
   2958a:	700a      	strb	r2, [r1, #0]
   2958c:	4a54      	ldr	r2, [pc, #336]	; (296e0 <_printf_i+0x230>)
   2958e:	9203      	str	r2, [sp, #12]
   29590:	681a      	ldr	r2, [r3, #0]
   29592:	6821      	ldr	r1, [r4, #0]
   29594:	1d10      	adds	r0, r2, #4
   29596:	6018      	str	r0, [r3, #0]
   29598:	6815      	ldr	r5, [r2, #0]
   2959a:	0608      	lsls	r0, r1, #24
   2959c:	d522      	bpl.n	295e4 <_printf_i+0x134>
   2959e:	07cb      	lsls	r3, r1, #31
   295a0:	d502      	bpl.n	295a8 <_printf_i+0xf8>
   295a2:	2320      	movs	r3, #32
   295a4:	4319      	orrs	r1, r3
   295a6:	6021      	str	r1, [r4, #0]
   295a8:	2710      	movs	r7, #16
   295aa:	2d00      	cmp	r5, #0
   295ac:	d103      	bne.n	295b6 <_printf_i+0x106>
   295ae:	2320      	movs	r3, #32
   295b0:	6822      	ldr	r2, [r4, #0]
   295b2:	439a      	bics	r2, r3
   295b4:	6022      	str	r2, [r4, #0]
   295b6:	0023      	movs	r3, r4
   295b8:	2200      	movs	r2, #0
   295ba:	3343      	adds	r3, #67	; 0x43
   295bc:	701a      	strb	r2, [r3, #0]
   295be:	6863      	ldr	r3, [r4, #4]
   295c0:	60a3      	str	r3, [r4, #8]
   295c2:	2b00      	cmp	r3, #0
   295c4:	db5c      	blt.n	29680 <_printf_i+0x1d0>
   295c6:	2204      	movs	r2, #4
   295c8:	6821      	ldr	r1, [r4, #0]
   295ca:	4391      	bics	r1, r2
   295cc:	6021      	str	r1, [r4, #0]
   295ce:	2d00      	cmp	r5, #0
   295d0:	d158      	bne.n	29684 <_printf_i+0x1d4>
   295d2:	9e04      	ldr	r6, [sp, #16]
   295d4:	2b00      	cmp	r3, #0
   295d6:	d064      	beq.n	296a2 <_printf_i+0x1f2>
   295d8:	0026      	movs	r6, r4
   295da:	9b03      	ldr	r3, [sp, #12]
   295dc:	3642      	adds	r6, #66	; 0x42
   295de:	781b      	ldrb	r3, [r3, #0]
   295e0:	7033      	strb	r3, [r6, #0]
   295e2:	e05e      	b.n	296a2 <_printf_i+0x1f2>
   295e4:	0648      	lsls	r0, r1, #25
   295e6:	d5da      	bpl.n	2959e <_printf_i+0xee>
   295e8:	b2ad      	uxth	r5, r5
   295ea:	e7d8      	b.n	2959e <_printf_i+0xee>
   295ec:	6809      	ldr	r1, [r1, #0]
   295ee:	681a      	ldr	r2, [r3, #0]
   295f0:	0608      	lsls	r0, r1, #24
   295f2:	d505      	bpl.n	29600 <_printf_i+0x150>
   295f4:	1d11      	adds	r1, r2, #4
   295f6:	6019      	str	r1, [r3, #0]
   295f8:	6813      	ldr	r3, [r2, #0]
   295fa:	6962      	ldr	r2, [r4, #20]
   295fc:	601a      	str	r2, [r3, #0]
   295fe:	e006      	b.n	2960e <_printf_i+0x15e>
   29600:	0649      	lsls	r1, r1, #25
   29602:	d5f7      	bpl.n	295f4 <_printf_i+0x144>
   29604:	1d11      	adds	r1, r2, #4
   29606:	6019      	str	r1, [r3, #0]
   29608:	6813      	ldr	r3, [r2, #0]
   2960a:	8aa2      	ldrh	r2, [r4, #20]
   2960c:	801a      	strh	r2, [r3, #0]
   2960e:	2300      	movs	r3, #0
   29610:	9e04      	ldr	r6, [sp, #16]
   29612:	6123      	str	r3, [r4, #16]
   29614:	e054      	b.n	296c0 <_printf_i+0x210>
   29616:	681a      	ldr	r2, [r3, #0]
   29618:	1d11      	adds	r1, r2, #4
   2961a:	6019      	str	r1, [r3, #0]
   2961c:	6816      	ldr	r6, [r2, #0]
   2961e:	2100      	movs	r1, #0
   29620:	6862      	ldr	r2, [r4, #4]
   29622:	0030      	movs	r0, r6
   29624:	f000 f85e 	bl	296e4 <memchr>
   29628:	2800      	cmp	r0, #0
   2962a:	d001      	beq.n	29630 <_printf_i+0x180>
   2962c:	1b80      	subs	r0, r0, r6
   2962e:	6060      	str	r0, [r4, #4]
   29630:	6863      	ldr	r3, [r4, #4]
   29632:	6123      	str	r3, [r4, #16]
   29634:	2300      	movs	r3, #0
   29636:	9a04      	ldr	r2, [sp, #16]
   29638:	7013      	strb	r3, [r2, #0]
   2963a:	e041      	b.n	296c0 <_printf_i+0x210>
   2963c:	6923      	ldr	r3, [r4, #16]
   2963e:	0032      	movs	r2, r6
   29640:	9906      	ldr	r1, [sp, #24]
   29642:	9805      	ldr	r0, [sp, #20]
   29644:	9d07      	ldr	r5, [sp, #28]
   29646:	47a8      	blx	r5
   29648:	1c43      	adds	r3, r0, #1
   2964a:	d043      	beq.n	296d4 <_printf_i+0x224>
   2964c:	6823      	ldr	r3, [r4, #0]
   2964e:	2500      	movs	r5, #0
   29650:	079b      	lsls	r3, r3, #30
   29652:	d40f      	bmi.n	29674 <_printf_i+0x1c4>
   29654:	9b09      	ldr	r3, [sp, #36]	; 0x24
   29656:	68e0      	ldr	r0, [r4, #12]
   29658:	4298      	cmp	r0, r3
   2965a:	da3d      	bge.n	296d8 <_printf_i+0x228>
   2965c:	0018      	movs	r0, r3
   2965e:	e03b      	b.n	296d8 <_printf_i+0x228>
   29660:	0022      	movs	r2, r4
   29662:	2301      	movs	r3, #1
   29664:	3219      	adds	r2, #25
   29666:	9906      	ldr	r1, [sp, #24]
   29668:	9805      	ldr	r0, [sp, #20]
   2966a:	9e07      	ldr	r6, [sp, #28]
   2966c:	47b0      	blx	r6
   2966e:	1c43      	adds	r3, r0, #1
   29670:	d030      	beq.n	296d4 <_printf_i+0x224>
   29672:	3501      	adds	r5, #1
   29674:	68e3      	ldr	r3, [r4, #12]
   29676:	9a09      	ldr	r2, [sp, #36]	; 0x24
   29678:	1a9b      	subs	r3, r3, r2
   2967a:	429d      	cmp	r5, r3
   2967c:	dbf0      	blt.n	29660 <_printf_i+0x1b0>
   2967e:	e7e9      	b.n	29654 <_printf_i+0x1a4>
   29680:	2d00      	cmp	r5, #0
   29682:	d0a9      	beq.n	295d8 <_printf_i+0x128>
   29684:	9e04      	ldr	r6, [sp, #16]
   29686:	0028      	movs	r0, r5
   29688:	0039      	movs	r1, r7
   2968a:	f7fc feaf 	bl	263ec <__aeabi_uidivmod>
   2968e:	9b03      	ldr	r3, [sp, #12]
   29690:	3e01      	subs	r6, #1
   29692:	5c5b      	ldrb	r3, [r3, r1]
   29694:	0028      	movs	r0, r5
   29696:	7033      	strb	r3, [r6, #0]
   29698:	0039      	movs	r1, r7
   2969a:	f7fc fe21 	bl	262e0 <__udivsi3>
   2969e:	1e05      	subs	r5, r0, #0
   296a0:	d1f1      	bne.n	29686 <_printf_i+0x1d6>
   296a2:	2f08      	cmp	r7, #8
   296a4:	d109      	bne.n	296ba <_printf_i+0x20a>
   296a6:	6823      	ldr	r3, [r4, #0]
   296a8:	07db      	lsls	r3, r3, #31
   296aa:	d506      	bpl.n	296ba <_printf_i+0x20a>
   296ac:	6863      	ldr	r3, [r4, #4]
   296ae:	6922      	ldr	r2, [r4, #16]
   296b0:	4293      	cmp	r3, r2
   296b2:	dc02      	bgt.n	296ba <_printf_i+0x20a>
   296b4:	2330      	movs	r3, #48	; 0x30
   296b6:	3e01      	subs	r6, #1
   296b8:	7033      	strb	r3, [r6, #0]
   296ba:	9b04      	ldr	r3, [sp, #16]
   296bc:	1b9b      	subs	r3, r3, r6
   296be:	6123      	str	r3, [r4, #16]
   296c0:	9b07      	ldr	r3, [sp, #28]
   296c2:	aa09      	add	r2, sp, #36	; 0x24
   296c4:	9300      	str	r3, [sp, #0]
   296c6:	0021      	movs	r1, r4
   296c8:	9b06      	ldr	r3, [sp, #24]
   296ca:	9805      	ldr	r0, [sp, #20]
   296cc:	f7ff fe82 	bl	293d4 <_printf_common>
   296d0:	1c43      	adds	r3, r0, #1
   296d2:	d1b3      	bne.n	2963c <_printf_i+0x18c>
   296d4:	2001      	movs	r0, #1
   296d6:	4240      	negs	r0, r0
   296d8:	b00b      	add	sp, #44	; 0x2c
   296da:	bdf0      	pop	{r4, r5, r6, r7, pc}
   296dc:	0002ad8a 	.word	0x0002ad8a
   296e0:	0002ad79 	.word	0x0002ad79

000296e4 <memchr>:
   296e4:	b2c9      	uxtb	r1, r1
   296e6:	1882      	adds	r2, r0, r2
   296e8:	4290      	cmp	r0, r2
   296ea:	d101      	bne.n	296f0 <memchr+0xc>
   296ec:	2000      	movs	r0, #0
   296ee:	4770      	bx	lr
   296f0:	7803      	ldrb	r3, [r0, #0]
   296f2:	428b      	cmp	r3, r1
   296f4:	d0fb      	beq.n	296ee <memchr+0xa>
   296f6:	3001      	adds	r0, #1
   296f8:	e7f6      	b.n	296e8 <memchr+0x4>

000296fa <_realloc_r>:
   296fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   296fc:	0007      	movs	r7, r0
   296fe:	000d      	movs	r5, r1
   29700:	0016      	movs	r6, r2
   29702:	2900      	cmp	r1, #0
   29704:	d105      	bne.n	29712 <_realloc_r+0x18>
   29706:	0011      	movs	r1, r2
   29708:	f7ff fa86 	bl	28c18 <_malloc_r>
   2970c:	0004      	movs	r4, r0
   2970e:	0020      	movs	r0, r4
   29710:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   29712:	2a00      	cmp	r2, #0
   29714:	d103      	bne.n	2971e <_realloc_r+0x24>
   29716:	f7ff fa35 	bl	28b84 <_free_r>
   2971a:	0034      	movs	r4, r6
   2971c:	e7f7      	b.n	2970e <_realloc_r+0x14>
   2971e:	f000 f812 	bl	29746 <_malloc_usable_size_r>
   29722:	002c      	movs	r4, r5
   29724:	4286      	cmp	r6, r0
   29726:	d9f2      	bls.n	2970e <_realloc_r+0x14>
   29728:	0031      	movs	r1, r6
   2972a:	0038      	movs	r0, r7
   2972c:	f7ff fa74 	bl	28c18 <_malloc_r>
   29730:	1e04      	subs	r4, r0, #0
   29732:	d0ec      	beq.n	2970e <_realloc_r+0x14>
   29734:	0029      	movs	r1, r5
   29736:	0032      	movs	r2, r6
   29738:	f7ff f9f2 	bl	28b20 <memcpy>
   2973c:	0029      	movs	r1, r5
   2973e:	0038      	movs	r0, r7
   29740:	f7ff fa20 	bl	28b84 <_free_r>
   29744:	e7e3      	b.n	2970e <_realloc_r+0x14>

00029746 <_malloc_usable_size_r>:
   29746:	1f0b      	subs	r3, r1, #4
   29748:	681b      	ldr	r3, [r3, #0]
   2974a:	1f18      	subs	r0, r3, #4
   2974c:	2b00      	cmp	r3, #0
   2974e:	da01      	bge.n	29754 <_malloc_usable_size_r+0xe>
   29750:	580b      	ldr	r3, [r1, r0]
   29752:	18c0      	adds	r0, r0, r3
   29754:	4770      	bx	lr
   29756:	0000      	movs	r0, r0
   29758:	30303030 	.word	0x30303030
   2975c:	30303030 	.word	0x30303030
   29760:	00003030 	.word	0x00003030
   29764:	2e707466 	.word	0x2e707466
   29768:	76697264 	.word	0x76697264
   2976c:	2e716865 	.word	0x2e716865
   29770:	006d6f63 	.word	0x006d6f63
   29774:	7269662f 	.word	0x7269662f
   29778:	7261776d 	.word	0x7261776d
   2977c:	00002f65 	.word	0x00002f65
   29780:	75686172 	.word	0x75686172
   29784:	61726e6c 	.word	0x61726e6c
   29788:	646f6874 	.word	0x646f6874
   2978c:	006c636b 	.word	0x006c636b
   29790:	34333231 	.word	0x34333231
   29794:	38373635 	.word	0x38373635
   29798:	00000039 	.word	0x00000039
   2979c:	6d726966 	.word	0x6d726966
   297a0:	65726177 	.word	0x65726177
   297a4:	6e69622e 	.word	0x6e69622e
   297a8:	00000000 	.word	0x00000000
   297ac:	31343037 	.word	0x31343037
   297b0:	39363931 	.word	0x39363931
   297b4:	00003935 	.word	0x00003935
   297b8:	38393637 	.word	0x38393637
   297bc:	32393334 	.word	0x32393334
   297c0:	00003130 	.word	0x00003130
   297c4:	33383337 	.word	0x33383337
   297c8:	32343136 	.word	0x32343136
   297cc:	00003431 	.word	0x00003431
   297d0:	33383337 	.word	0x33383337
   297d4:	36323236 	.word	0x36323236
   297d8:	00003837 	.word	0x00003837
   297dc:	36383539 	.word	0x36383539
   297e0:	39353331 	.word	0x39353331
   297e4:	00003837 	.word	0x00003837
   297e8:	00003a50 	.word	0x00003a50
   297ec:	00003a53 	.word	0x00003a53
   297f0:	0000000a 	.word	0x0000000a
   297f4:	00006425 	.word	0x00006425
   297f8:	204d5347 	.word	0x204d5347
   297fc:	656d6954 	.word	0x656d6954
   29800:	0074756f 	.word	0x0074756f
   29804:	4f525245 	.word	0x4f525245
   29808:	00000052 	.word	0x00000052
   2980c:	00004b4f 	.word	0x00004b4f
   29810:	000d5441 	.word	0x000d5441
   29814:	492b5441 	.word	0x492b5441
   29818:	303d4346 	.word	0x303d4346
   2981c:	000d302c 	.word	0x000d302c
   29820:	4552432b 	.word	0x4552432b
   29824:	30203a47 	.word	0x30203a47
   29828:	0000312c 	.word	0x0000312c
   2982c:	432b5441 	.word	0x432b5441
   29830:	3f474552 	.word	0x3f474552
   29834:	0000000d 	.word	0x0000000d
   29838:	4552432b 	.word	0x4552432b
   2983c:	30203a47 	.word	0x30203a47
   29840:	0000352c 	.word	0x0000352c
   29844:	492b5441 	.word	0x492b5441
   29848:	253d5250 	.word	0x253d5250
   2984c:	00000d64 	.word	0x00000d64
   29850:	492b5441 	.word	0x492b5441
   29854:	303d5250 	.word	0x303d5250
   29858:	0000000d 	.word	0x0000000d
   2985c:	432b5441 	.word	0x432b5441
   29860:	3d474552 	.word	0x3d474552
   29864:	00000d31 	.word	0x00000d31
   29868:	432b5441 	.word	0x432b5441
   2986c:	3d4e5546 	.word	0x3d4e5546
   29870:	00000d31 	.word	0x00000d31
   29874:	5546432b 	.word	0x5546432b
   29878:	31203a4e 	.word	0x31203a4e
   2987c:	00000000 	.word	0x00000000
   29880:	432b5441 	.word	0x432b5441
   29884:	3f4e5546 	.word	0x3f4e5546
   29888:	0000000d 	.word	0x0000000d
   2988c:	432b5441 	.word	0x432b5441
   29890:	3d4e5546 	.word	0x3d4e5546
   29894:	00000d30 	.word	0x00000d30
   29898:	5546432b 	.word	0x5546432b
   2989c:	30203a4e 	.word	0x30203a4e
   298a0:	00000000 	.word	0x00000000
   298a4:	432b5441 	.word	0x432b5441
   298a8:	3d4e5546 	.word	0x3d4e5546
   298ac:	0d312c31 	.word	0x0d312c31
   298b0:	00000000 	.word	0x00000000
   298b4:	4950432b 	.word	0x4950432b
   298b8:	52203a4e 	.word	0x52203a4e
   298bc:	59444145 	.word	0x59444145
   298c0:	00000000 	.word	0x00000000
   298c4:	432b5441 	.word	0x432b5441
   298c8:	3f4e4950 	.word	0x3f4e4950
   298cc:	0000000d 	.word	0x0000000d
   298d0:	432b5441 	.word	0x432b5441
   298d4:	4144474d 	.word	0x4144474d
   298d8:	4544223d 	.word	0x4544223d
   298dc:	4c41204c 	.word	0x4c41204c
   298e0:	000d224c 	.word	0x000d224c
   298e4:	57265441 	.word	0x57265441
   298e8:	0000000d 	.word	0x0000000d
   298ec:	432b5441 	.word	0x432b5441
   298f0:	3d50494c 	.word	0x3d50494c
   298f4:	00000d31 	.word	0x00000d31
   298f8:	432b5441 	.word	0x432b5441
   298fc:	3d504c4f 	.word	0x3d504c4f
   29900:	00000d31 	.word	0x00000d31
   29904:	432b5441 	.word	0x432b5441
   29908:	4b4c4353 	.word	0x4b4c4353
   2990c:	000d313d 	.word	0x000d313d
   29910:	432b5441 	.word	0x432b5441
   29914:	3f504c4f 	.word	0x3f504c4f
   29918:	0000000d 	.word	0x0000000d
   2991c:	4c4f432b 	.word	0x4c4f432b
   29920:	00000050 	.word	0x00000050
   29924:	0000003a 	.word	0x0000003a
   29928:	0000002c 	.word	0x0000002c
   2992c:	432b5441 	.word	0x432b5441
   29930:	3d43434c 	.word	0x3d43434c
   29934:	00000d31 	.word	0x00000d31
   29938:	46265441 	.word	0x46265441
   2993c:	0000000d 	.word	0x0000000d
   29940:	30455441 	.word	0x30455441
   29944:	0000000d 	.word	0x0000000d
   29948:	432b5441 	.word	0x432b5441
   2994c:	3d46474d 	.word	0x3d46474d
   29950:	00000d31 	.word	0x00000d31
   29954:	432b5441 	.word	0x432b5441
   29958:	3d504d53 	.word	0x3d504d53
   2995c:	312c3731 	.word	0x312c3731
   29960:	302c3736 	.word	0x302c3736
   29964:	000d302c 	.word	0x000d302c
   29968:	432b5441 	.word	0x432b5441
   2996c:	3d534153 	.word	0x3d534153
   29970:	00000d30 	.word	0x00000d30
   29974:	432b5441 	.word	0x432b5441
   29978:	3d534153 	.word	0x3d534153
   2997c:	00000d31 	.word	0x00000d31
   29980:	432b5441 	.word	0x432b5441
   29984:	000d5153 	.word	0x000d5153
   29988:	5153432b 	.word	0x5153432b
   2998c:	0000003a 	.word	0x0000003a
   29990:	00003939 	.word	0x00003939
   29994:	432b5441 	.word	0x432b5441
   29998:	3d494d4e 	.word	0x3d494d4e
   2999c:	2c312c32 	.word	0x2c312c32
   299a0:	2c302c30 	.word	0x2c302c30
   299a4:	00000d30 	.word	0x00000d30
   299a8:	432b5441 	.word	0x432b5441
   299ac:	3d494d4e 	.word	0x3d494d4e
   299b0:	2c302c31 	.word	0x2c302c31
   299b4:	2c302c30 	.word	0x2c302c30
   299b8:	00000d30 	.word	0x00000d30
   299bc:	452b5441 	.word	0x452b5441
   299c0:	534e5558 	.word	0x534e5558
   299c4:	223d4c4f 	.word	0x223d4c4f
   299c8:	2c225153 	.word	0x2c225153
   299cc:	00000d31 	.word	0x00000d31
   299d0:	452b5441 	.word	0x452b5441
   299d4:	534e5558 	.word	0x534e5558
   299d8:	223d4c4f 	.word	0x223d4c4f
   299dc:	2c225153 	.word	0x2c225153
   299e0:	00000d30 	.word	0x00000d30
   299e4:	432b5441 	.word	0x432b5441
   299e8:	3d53474d 	.word	0x3d53474d
   299ec:	22732522 	.word	0x22732522
   299f0:	0000000d 	.word	0x0000000d
   299f4:	0000003e 	.word	0x0000003e
   299f8:	0d1a7325 	.word	0x0d1a7325
   299fc:	00000000 	.word	0x00000000
   29a00:	432b5441 	.word	0x432b5441
   29a04:	3d4c474d 	.word	0x3d4c474d
   29a08:	43455222 	.word	0x43455222
   29a0c:	524e5520 	.word	0x524e5520
   29a10:	22444145 	.word	0x22444145
   29a14:	0000000d 	.word	0x0000000d
   29a18:	432b5441 	.word	0x432b5441
   29a1c:	3d4c474d 	.word	0x3d4c474d
   29a20:	43455222 	.word	0x43455222
   29a24:	41455220 	.word	0x41455220
   29a28:	000d2244 	.word	0x000d2244
   29a2c:	432b5441 	.word	0x432b5441
   29a30:	3d4c474d 	.word	0x3d4c474d
   29a34:	4c4c4122 	.word	0x4c4c4122
   29a38:	00000d22 	.word	0x00000d22
   29a3c:	4c474d43 	.word	0x4c474d43
   29a40:	00000000 	.word	0x00000000
   29a44:	432b5441 	.word	0x432b5441
   29a48:	3d52474d 	.word	0x3d52474d
   29a4c:	000d6425 	.word	0x000d6425
   29a50:	474d432b 	.word	0x474d432b
   29a54:	00000052 	.word	0x00000052
   29a58:	25445441 	.word	0x25445441
   29a5c:	000d3b73 	.word	0x000d3b73
   29a60:	0d415441 	.word	0x0d415441
   29a64:	00000000 	.word	0x00000000
   29a68:	432b5441 	.word	0x432b5441
   29a6c:	3d53544c 	.word	0x3d53544c
   29a70:	00000d31 	.word	0x00000d31
   29a74:	432b5441 	.word	0x432b5441
   29a78:	3d53544c 	.word	0x3d53544c
   29a7c:	00000d30 	.word	0x00000d30
   29a80:	442b5441 	.word	0x442b5441
   29a84:	3d544544 	.word	0x3d544544
   29a88:	00000d31 	.word	0x00000d31
   29a8c:	562b5441 	.word	0x562b5441
   29a90:	223d5354 	.word	0x223d5354
   29a94:	0d227325 	.word	0x0d227325
   29a98:	00000000 	.word	0x00000000
   29a9c:	432b5441 	.word	0x432b5441
   29aa0:	0d505548 	.word	0x0d505548
   29aa4:	00000000 	.word	0x00000000
   29aa8:	432b5441 	.word	0x432b5441
   29aac:	3d415743 	.word	0x3d415743
   29ab0:	0d302c30 	.word	0x0d302c30
   29ab4:	00000000 	.word	0x00000000
   29ab8:	472b5441 	.word	0x472b5441
   29abc:	55424d53 	.word	0x55424d53
   29ac0:	313d5953 	.word	0x313d5953
   29ac4:	0000000d 	.word	0x0000000d
   29ac8:	472b5441 	.word	0x472b5441
   29acc:	55424d53 	.word	0x55424d53
   29ad0:	303d5953 	.word	0x303d5953
   29ad4:	0000000d 	.word	0x0000000d
   29ad8:	432b5441 	.word	0x432b5441
   29adc:	3d434552 	.word	0x3d434552
   29ae0:	00000d35 	.word	0x00000d35
   29ae4:	432b5441 	.word	0x432b5441
   29ae8:	3d434552 	.word	0x3d434552
   29aec:	43222c34 	.word	0x43222c34
   29af0:	73555c3a 	.word	0x73555c3a
   29af4:	255c7265 	.word	0x255c7265
   29af8:	6d612e63 	.word	0x6d612e63
   29afc:	302c2272 	.word	0x302c2272
   29b00:	2c30392c 	.word	0x2c30392c
   29b04:	000d7525 	.word	0x000d7525
   29b08:	432b5441 	.word	0x432b5441
   29b0c:	3f4b4c43 	.word	0x3f4b4c43
   29b10:	0000000d 	.word	0x0000000d
   29b14:	00000022 	.word	0x00000022
   29b18:	0000002f 	.word	0x0000002f
   29b1c:	0000002b 	.word	0x0000002b
   29b20:	544d432b 	.word	0x544d432b
   29b24:	00003a49 	.word	0x00003a49
   29b28:	474e4952 	.word	0x474e4952
   29b2c:	00000000 	.word	0x00000000
   29b30:	5153432b 	.word	0x5153432b
   29b34:	0000004e 	.word	0x0000004e
   29b38:	494c432b 	.word	0x494c432b
   29b3c:	00000050 	.word	0x00000050
   29b40:	43204f4e 	.word	0x43204f4e
   29b44:	49525241 	.word	0x49525241
   29b48:	00005245 	.word	0x00005245
   29b4c:	59535542 	.word	0x59535542
   29b50:	00000000 	.word	0x00000000
   29b54:	41204f4e 	.word	0x41204f4e
   29b58:	4557534e 	.word	0x4557534e
   29b5c:	00000052 	.word	0x00000052
   29b60:	4d54442b 	.word	0x4d54442b
   29b64:	00003a46 	.word	0x00003a46
   29b68:	4552432b 	.word	0x4552432b
   29b6c:	30203a43 	.word	0x30203a43
   29b70:	00000000 	.word	0x00000000
   29b74:	532b5441 	.word	0x532b5441
   29b78:	52425041 	.word	0x52425041
   29b7c:	312c333d 	.word	0x312c333d
   29b80:	4f43222c 	.word	0x4f43222c
   29b84:	5059544e 	.word	0x5059544e
   29b88:	222c2245 	.word	0x222c2245
   29b8c:	53525047 	.word	0x53525047
   29b90:	00000d22 	.word	0x00000d22
   29b94:	432b5441 	.word	0x432b5441
   29b98:	3f53504f 	.word	0x3f53504f
   29b9c:	0000000d 	.word	0x0000000d
   29ba0:	504f432b 	.word	0x504f432b
   29ba4:	00003a53 	.word	0x00003a53
   29ba8:	41454449 	.word	0x41454449
   29bac:	00000000 	.word	0x00000000
   29bb0:	532b5441 	.word	0x532b5441
   29bb4:	52425041 	.word	0x52425041
   29bb8:	312c333d 	.word	0x312c333d
   29bbc:	5041222c 	.word	0x5041222c
   29bc0:	222c224e 	.word	0x222c224e
   29bc4:	65746e69 	.word	0x65746e69
   29bc8:	74656e72 	.word	0x74656e72
   29bcc:	00000d22 	.word	0x00000d22
   29bd0:	41444f56 	.word	0x41444f56
   29bd4:	00000000 	.word	0x00000000
   29bd8:	532b5441 	.word	0x532b5441
   29bdc:	52425041 	.word	0x52425041
   29be0:	312c333d 	.word	0x312c333d
   29be4:	5041222c 	.word	0x5041222c
   29be8:	222c224e 	.word	0x222c224e
   29bec:	22777777 	.word	0x22777777
   29bf0:	0000000d 	.word	0x0000000d
   29bf4:	4c4e5342 	.word	0x4c4e5342
   29bf8:	00000000 	.word	0x00000000
   29bfc:	532b5441 	.word	0x532b5441
   29c00:	52425041 	.word	0x52425041
   29c04:	312c333d 	.word	0x312c333d
   29c08:	5041222c 	.word	0x5041222c
   29c0c:	222c224e 	.word	0x222c224e
   29c10:	6c6e7362 	.word	0x6c6e7362
   29c14:	2274656e 	.word	0x2274656e
   29c18:	0000000d 	.word	0x0000000d
   29c1c:	54524941 	.word	0x54524941
   29c20:	00004c45 	.word	0x00004c45
   29c24:	532b5441 	.word	0x532b5441
   29c28:	52425041 	.word	0x52425041
   29c2c:	312c333d 	.word	0x312c333d
   29c30:	5041222c 	.word	0x5041222c
   29c34:	222c224e 	.word	0x222c224e
   29c38:	74726961 	.word	0x74726961
   29c3c:	70676c65 	.word	0x70676c65
   29c40:	632e7372 	.word	0x632e7372
   29c44:	0d226d6f 	.word	0x0d226d6f
   29c48:	00000000 	.word	0x00000000
   29c4c:	532b5441 	.word	0x532b5441
   29c50:	52425041 	.word	0x52425041
   29c54:	312c333d 	.word	0x312c333d
   29c58:	5041222c 	.word	0x5041222c
   29c5c:	222c224e 	.word	0x222c224e
   29c60:	00000d22 	.word	0x00000d22
   29c64:	532b5441 	.word	0x532b5441
   29c68:	52425041 	.word	0x52425041
   29c6c:	312c323d 	.word	0x312c323d
   29c70:	0000000d 	.word	0x0000000d
   29c74:	5041532b 	.word	0x5041532b
   29c78:	203a5242 	.word	0x203a5242
   29c7c:	00302c31 	.word	0x00302c31
   29c80:	5041532b 	.word	0x5041532b
   29c84:	203a5242 	.word	0x203a5242
   29c88:	00312c31 	.word	0x00312c31
   29c8c:	5041532b 	.word	0x5041532b
   29c90:	203a5242 	.word	0x203a5242
   29c94:	00322c31 	.word	0x00322c31
   29c98:	5041532b 	.word	0x5041532b
   29c9c:	203a5242 	.word	0x203a5242
   29ca0:	00332c31 	.word	0x00332c31
   29ca4:	532b5441 	.word	0x532b5441
   29ca8:	52425041 	.word	0x52425041
   29cac:	312c313d 	.word	0x312c313d
   29cb0:	0000000d 	.word	0x0000000d
   29cb4:	532b5441 	.word	0x532b5441
   29cb8:	52425041 	.word	0x52425041
   29cbc:	312c303d 	.word	0x312c303d
   29cc0:	0000000d 	.word	0x0000000d
   29cc4:	462b5441 	.word	0x462b5441
   29cc8:	49435054 	.word	0x49435054
   29ccc:	0d313d44 	.word	0x0d313d44
   29cd0:	00000000 	.word	0x00000000
   29cd4:	462b5441 	.word	0x462b5441
   29cd8:	45535054 	.word	0x45535054
   29cdc:	223d5652 	.word	0x223d5652
   29ce0:	0d227325 	.word	0x0d227325
   29ce4:	00000000 	.word	0x00000000
   29ce8:	462b5441 	.word	0x462b5441
   29cec:	4e555054 	.word	0x4e555054
   29cf0:	7325223d 	.word	0x7325223d
   29cf4:	00000d22 	.word	0x00000d22
   29cf8:	462b5441 	.word	0x462b5441
   29cfc:	57505054 	.word	0x57505054
   29d00:	7325223d 	.word	0x7325223d
   29d04:	00000d22 	.word	0x00000d22
   29d08:	462b5441 	.word	0x462b5441
   29d0c:	45475054 	.word	0x45475054
   29d10:	4d414e54 	.word	0x4d414e54
   29d14:	25223d45 	.word	0x25223d45
   29d18:	000d2273 	.word	0x000d2273
   29d1c:	462b5441 	.word	0x462b5441
   29d20:	45475054 	.word	0x45475054
   29d24:	54415054 	.word	0x54415054
   29d28:	25223d48 	.word	0x25223d48
   29d2c:	000d2273 	.word	0x000d2273
   29d30:	5054462b 	.word	0x5054462b
   29d34:	455a4953 	.word	0x455a4953
   29d38:	2c31203a 	.word	0x2c31203a
   29d3c:	00000000 	.word	0x00000000
   29d40:	462b5441 	.word	0x462b5441
   29d44:	49535054 	.word	0x49535054
   29d48:	000d455a 	.word	0x000d455a
   29d4c:	5054462b 	.word	0x5054462b
   29d50:	3a544547 	.word	0x3a544547
   29d54:	312c3120 	.word	0x312c3120
   29d58:	00000000 	.word	0x00000000
   29d5c:	462b5441 	.word	0x462b5441
   29d60:	45475054 	.word	0x45475054
   29d64:	0d313d54 	.word	0x0d313d54
   29d68:	00000000 	.word	0x00000000
   29d6c:	462b5441 	.word	0x462b5441
   29d70:	45475054 	.word	0x45475054
   29d74:	2c323d54 	.word	0x2c323d54
   29d78:	000d6425 	.word	0x000d6425
   29d7c:	5054462b 	.word	0x5054462b
   29d80:	3a544547 	.word	0x3a544547
   29d84:	00000020 	.word	0x00000020
   29d88:	434c432b 	.word	0x434c432b
   29d8c:	31203a43 	.word	0x31203a43
   29d90:	322c302c 	.word	0x322c302c
   29d94:	00000000 	.word	0x00000000
   29d98:	434c432b 	.word	0x434c432b
   29d9c:	31203a43 	.word	0x31203a43
   29da0:	332c302c 	.word	0x332c302c
   29da4:	00000000 	.word	0x00000000
   29da8:	434c432b 	.word	0x434c432b
   29dac:	31203a43 	.word	0x31203a43
   29db0:	302c302c 	.word	0x302c302c
   29db4:	00000000 	.word	0x00000000
   29db8:	434c432b 	.word	0x434c432b
   29dbc:	31203a43 	.word	0x31203a43
   29dc0:	362c302c 	.word	0x362c302c
	...
   29dcc:	4e4f4d41 	.word	0x4e4f4d41
   29dd0:	00000000 	.word	0x00000000
   29dd4:	55475250 	.word	0x55475250
   29dd8:	00004450 	.word	0x00004450
   29ddc:	54494157 	.word	0x54494157
   29de0:	00000000 	.word	0x00000000
   29de4:	204d5347 	.word	0x204d5347
   29de8:	4c4c4143 	.word	0x4c4c4143
   29dec:	49415720 	.word	0x49415720
   29df0:	4e495454 	.word	0x4e495454
   29df4:	49442047 	.word	0x49442047
   29df8:	4c424153 	.word	0x4c424153
   29dfc:	203a2045 	.word	0x203a2045
   29e00:	43435553 	.word	0x43435553
   29e04:	00535345 	.word	0x00535345
   29e08:	204d5347 	.word	0x204d5347
   29e0c:	4c4c4143 	.word	0x4c4c4143
   29e10:	49415720 	.word	0x49415720
   29e14:	4e495454 	.word	0x4e495454
   29e18:	49442047 	.word	0x49442047
   29e1c:	4c424153 	.word	0x4c424153
   29e20:	203a2045 	.word	0x203a2045
   29e24:	4c494146 	.word	0x4c494146
   29e28:	00004445 	.word	0x00004445
   29e2c:	41454c43 	.word	0x41454c43
   29e30:	4c4c4152 	.word	0x4c4c4152
   29e34:	00000000 	.word	0x00000000
   29e38:	204c4c41 	.word	0x204c4c41
   29e3c:	52455355 	.word	0x52455355
   29e40:	4d554e20 	.word	0x4d554e20
   29e44:	53524542 	.word	0x53524542
   29e48:	454c4320 	.word	0x454c4320
   29e4c:	44455241 	.word	0x44455241
   29e50:	00000000 	.word	0x00000000
   29e54:	41464544 	.word	0x41464544
   29e58:	00544c55 	.word	0x00544c55
   29e5c:	204c4c41 	.word	0x204c4c41
   29e60:	54544553 	.word	0x54544553
   29e64:	53474e49 	.word	0x53474e49
   29e68:	45524120 	.word	0x45524120
   29e6c:	574f4e20 	.word	0x574f4e20
   29e70:	43414620 	.word	0x43414620
   29e74:	59524f54 	.word	0x59524f54
   29e78:	46454420 	.word	0x46454420
   29e7c:	544c5541 	.word	0x544c5541
   29e80:	00000000 	.word	0x00000000
   29e84:	004d554e 	.word	0x004d554e
   29e88:	4e206f4e 	.word	0x4e206f4e
   29e8c:	65626d75 	.word	0x65626d75
   29e90:	45207372 	.word	0x45207372
   29e94:	74736978 	.word	0x74736978
   29e98:	00000073 	.word	0x00000073
   29e9c:	45534552 	.word	0x45534552
   29ea0:	00000054 	.word	0x00000054
   29ea4:	00444944 	.word	0x00444944
   29ea8:	33422020 	.word	0x33422020
   29eac:	35322d30 	.word	0x35322d30
   29eb0:	2d39302d 	.word	0x2d39302d
   29eb4:	20203931 	.word	0x20203931
   29eb8:	00000000 	.word	0x00000000
   29ebc:	20756c25 	.word	0x20756c25
   29ec0:	00007325 	.word	0x00007325
   29ec4:	4f545541 	.word	0x4f545541
   29ec8:	00004e4f 	.word	0x00004e4f
   29ecc:	4f544f4d 	.word	0x4f544f4d
   29ed0:	55412052 	.word	0x55412052
   29ed4:	4e4f4f54 	.word	0x4e4f4f54
   29ed8:	004e4f20 	.word	0x004e4f20
   29edc:	4f545541 	.word	0x4f545541
   29ee0:	0046464f 	.word	0x0046464f
   29ee4:	4f544f4d 	.word	0x4f544f4d
   29ee8:	55412052 	.word	0x55412052
   29eec:	4e4f4f54 	.word	0x4e4f4f54
   29ef0:	46464f20 	.word	0x46464f20
   29ef4:	00000000 	.word	0x00000000
   29ef8:	50594257 	.word	0x50594257
   29efc:	00004e4f 	.word	0x00004e4f
   29f00:	45544157 	.word	0x45544157
   29f04:	59422052 	.word	0x59422052
   29f08:	53534150 	.word	0x53534150
   29f0c:	004e4f20 	.word	0x004e4f20
   29f10:	50594257 	.word	0x50594257
   29f14:	0046464f 	.word	0x0046464f
   29f18:	45544157 	.word	0x45544157
   29f1c:	59422052 	.word	0x59422052
   29f20:	53534150 	.word	0x53534150
   29f24:	46464f20 	.word	0x46464f20
   29f28:	00000000 	.word	0x00000000
   29f2c:	4f505053 	.word	0x4f505053
   29f30:	0000004e 	.word	0x0000004e
   29f34:	20505053 	.word	0x20505053
   29f38:	00004e4f 	.word	0x00004e4f
   29f3c:	4f505053 	.word	0x4f505053
   29f40:	00004646 	.word	0x00004646
   29f44:	20505053 	.word	0x20505053
   29f48:	0046464f 	.word	0x0046464f
   29f4c:	56505053 	.word	0x56505053
   29f50:	00000000 	.word	0x00000000
   29f54:	20505053 	.word	0x20505053
   29f58:	544c4f56 	.word	0x544c4f56
   29f5c:	54455320 	.word	0x54455320
   29f60:	00000000 	.word	0x00000000
   29f64:	4f514553 	.word	0x4f514553
   29f68:	0000004e 	.word	0x0000004e
   29f6c:	50514553 	.word	0x50514553
   29f70:	004e4f20 	.word	0x004e4f20
   29f74:	4f514553 	.word	0x4f514553
   29f78:	00004646 	.word	0x00004646
   29f7c:	50514553 	.word	0x50514553
   29f80:	46464f20 	.word	0x46464f20
   29f84:	00000000 	.word	0x00000000
   29f88:	00444e44 	.word	0x00444e44
   29f8c:	20444e44 	.word	0x20444e44
   29f90:	0000203a 	.word	0x0000203a
   29f94:	004b4f20 	.word	0x004b4f20
   29f98:	4b424446 	.word	0x4b424446
   29f9c:	00000000 	.word	0x00000000
   29fa0:	4b424446 	.word	0x4b424446
   29fa4:	25203a20 	.word	0x25203a20
   29fa8:	00000064 	.word	0x00000064
   29fac:	454d4f55 	.word	0x454d4f55
   29fb0:	444f4854 	.word	0x444f4854
   29fb4:	00000000 	.word	0x00000000
   29fb8:	454d4f55 	.word	0x454d4f55
   29fbc:	444f4854 	.word	0x444f4854
   29fc0:	00203a20 	.word	0x00203a20
   29fc4:	5942564d 	.word	0x5942564d
   29fc8:	004e4f50 	.word	0x004e4f50
   29fcc:	4f544f4d 	.word	0x4f544f4d
   29fd0:	4f562052 	.word	0x4f562052
   29fd4:	4741544c 	.word	0x4741544c
   29fd8:	59422045 	.word	0x59422045
   29fdc:	53534150 	.word	0x53534150
   29fe0:	004e4f20 	.word	0x004e4f20
   29fe4:	5942564d 	.word	0x5942564d
   29fe8:	46464f50 	.word	0x46464f50
   29fec:	00000000 	.word	0x00000000
   29ff0:	4f544f4d 	.word	0x4f544f4d
   29ff4:	4f562052 	.word	0x4f562052
   29ff8:	4741544c 	.word	0x4741544c
   29ffc:	59422045 	.word	0x59422045
   2a000:	53534150 	.word	0x53534150
   2a004:	46464f20 	.word	0x46464f20
   2a008:	00000000 	.word	0x00000000
   2a00c:	5942564d 	.word	0x5942564d
   2a010:	00005450 	.word	0x00005450
   2a014:	6f746f4d 	.word	0x6f746f4d
   2a018:	6f562072 	.word	0x6f562072
   2a01c:	6761746c 	.word	0x6761746c
   2a020:	79422065 	.word	0x79422065
   2a024:	73736170 	.word	0x73736170
   2a028:	6d695420 	.word	0x6d695420
   2a02c:	65532065 	.word	0x65532065
   2a030:	6f742074 	.word	0x6f742074
   2a034:	00642520 	.word	0x00642520
   2a038:	50534552 	.word	0x50534552
   2a03c:	00000000 	.word	0x00000000
   2a040:	50534552 	.word	0x50534552
   2a044:	00203a20 	.word	0x00203a20
   2a048:	0052564f 	.word	0x0052564f
   2a04c:	2052564f 	.word	0x2052564f
   2a050:	20544553 	.word	0x20544553
   2a054:	00004b4f 	.word	0x00004b4f
   2a058:	52444e55 	.word	0x52444e55
   2a05c:	00000000 	.word	0x00000000
   2a060:	52444e55 	.word	0x52444e55
   2a064:	54455320 	.word	0x54455320
   2a068:	004b4f20 	.word	0x004b4f20
   2a06c:	41545341 	.word	0x41545341
   2a070:	00000054 	.word	0x00000054
   2a074:	75253a43 	.word	0x75253a43
   2a078:	0a75252e 	.word	0x0a75252e
   2a07c:	75253a4e 	.word	0x75253a4e
   2a080:	253a4f0a 	.word	0x253a4f0a
   2a084:	3a550a75 	.word	0x3a550a75
   2a088:	4f0a7525 	.word	0x4f0a7525
   2a08c:	75253a50 	.word	0x75253a50
   2a090:	3a50550a 	.word	0x3a50550a
   2a094:	00007525 	.word	0x00007525
   2a098:	4f46564f 	.word	0x4f46564f
   2a09c:	0000004e 	.word	0x0000004e
   2a0a0:	56455250 	.word	0x56455250
   2a0a4:	20544e45 	.word	0x20544e45
   2a0a8:	5245564f 	.word	0x5245564f
   2a0ac:	574f4c46 	.word	0x574f4c46
   2a0b0:	54455320 	.word	0x54455320
   2a0b4:	474e4954 	.word	0x474e4954
   2a0b8:	004e4f20 	.word	0x004e4f20
   2a0bc:	4f46564f 	.word	0x4f46564f
   2a0c0:	00004646 	.word	0x00004646
   2a0c4:	56455250 	.word	0x56455250
   2a0c8:	20544e45 	.word	0x20544e45
   2a0cc:	5245564f 	.word	0x5245564f
   2a0d0:	574f4c46 	.word	0x574f4c46
   2a0d4:	54455320 	.word	0x54455320
   2a0d8:	474e4954 	.word	0x474e4954
   2a0dc:	46464f20 	.word	0x46464f20
   2a0e0:	00000000 	.word	0x00000000
   2a0e4:	4f4d324d 	.word	0x4f4d324d
   2a0e8:	0000004e 	.word	0x0000004e
   2a0ec:	204d324d 	.word	0x204d324d
   2a0f0:	6e727554 	.word	0x6e727554
   2a0f4:	4f206465 	.word	0x4f206465
   2a0f8:	52202c6e 	.word	0x52202c6e
   2a0fc:	746f6d65 	.word	0x746f6d65
   2a100:	754e2065 	.word	0x754e2065
   2a104:	7265626d 	.word	0x7265626d
   2a108:	726c4120 	.word	0x726c4120
   2a10c:	79646165 	.word	0x79646165
   2a110:	72655620 	.word	0x72655620
   2a114:	65696669 	.word	0x65696669
   2a118:	00000064 	.word	0x00000064
   2a11c:	6f727245 	.word	0x6f727245
   2a120:	4d203a72 	.word	0x4d203a72
   2a124:	52204d32 	.word	0x52204d32
   2a128:	746f6d65 	.word	0x746f6d65
   2a12c:	754e2065 	.word	0x754e2065
   2a130:	7265626d 	.word	0x7265626d
   2a134:	746f4e20 	.word	0x746f4e20
   2a138:	65725020 	.word	0x65725020
   2a13c:	746e6573 	.word	0x746e6573
   2a140:	00000000 	.word	0x00000000
   2a144:	4f4d324d 	.word	0x4f4d324d
   2a148:	00004646 	.word	0x00004646
   2a14c:	204d324d 	.word	0x204d324d
   2a150:	54544553 	.word	0x54544553
   2a154:	20474e49 	.word	0x20474e49
   2a158:	0046464f 	.word	0x0046464f
   2a15c:	54415453 	.word	0x54415453
   2a160:	00005355 	.word	0x00005355
   2a164:	45544c41 	.word	0x45544c41
   2a168:	54414e52 	.word	0x54414e52
   2a16c:	554e2045 	.word	0x554e2045
   2a170:	5245424d 	.word	0x5245424d
   2a174:	004e4f20 	.word	0x004e4f20
   2a178:	45544c41 	.word	0x45544c41
   2a17c:	54414e52 	.word	0x54414e52
   2a180:	554e2045 	.word	0x554e2045
   2a184:	5245424d 	.word	0x5245424d
   2a188:	544f4e20 	.word	0x544f4e20
   2a18c:	45525020 	.word	0x45525020
   2a190:	544e4553 	.word	0x544e4553
   2a194:	00000000 	.word	0x00000000
   2a198:	464f4d41 	.word	0x464f4d41
   2a19c:	00000046 	.word	0x00000046
   2a1a0:	45544c41 	.word	0x45544c41
   2a1a4:	54414e52 	.word	0x54414e52
   2a1a8:	4f4d2045 	.word	0x4f4d2045
   2a1ac:	454c4942 	.word	0x454c4942
   2a1b0:	4d554e20 	.word	0x4d554e20
   2a1b4:	20524542 	.word	0x20524542
   2a1b8:	0046464f 	.word	0x0046464f
   2a1bc:	464f434e 	.word	0x464f434e
   2a1c0:	00000046 	.word	0x00000046
   2a1c4:	43204f4e 	.word	0x43204f4e
   2a1c8:	204c4c41 	.word	0x204c4c41
   2a1cc:	54544553 	.word	0x54544553
   2a1d0:	20474e49 	.word	0x20474e49
   2a1d4:	0046464f 	.word	0x0046464f
   2a1d8:	54544547 	.word	0x54544547
   2a1dc:	00454d49 	.word	0x00454d49
   2a1e0:	454d4954 	.word	0x454d4954
   2a1e4:	25203a20 	.word	0x25203a20
   2a1e8:	75253a75 	.word	0x75253a75
   2a1ec:	00000000 	.word	0x00000000
   2a1f0:	54544553 	.word	0x54544553
   2a1f4:	00454d49 	.word	0x00454d49
   2a1f8:	4954434e 	.word	0x4954434e
   2a1fc:	0000454d 	.word	0x0000454d
   2a200:	0000002d 	.word	0x0000002d
   2a204:	0000003a 	.word	0x0000003a
   2a208:	43204f4e 	.word	0x43204f4e
   2a20c:	204c4c41 	.word	0x204c4c41
   2a210:	494d4954 	.word	0x494d4954
   2a214:	2053474e 	.word	0x2053474e
   2a218:	00544553 	.word	0x00544553
   2a21c:	47415453 	.word	0x47415453
   2a220:	00000045 	.word	0x00000045
   2a224:	4c4c4143 	.word	0x4c4c4143
   2a228:	41545320 	.word	0x41545320
   2a22c:	53204547 	.word	0x53204547
   2a230:	54205445 	.word	0x54205445
   2a234:	203a204f 	.word	0x203a204f
   2a238:	00006425 	.word	0x00006425
   2a23c:	52415453 	.word	0x52415453
   2a240:	454d4954 	.word	0x454d4954
   2a244:	00000000 	.word	0x00000000
   2a248:	41545320 	.word	0x41545320
   2a24c:	4d495452 	.word	0x4d495452
   2a250:	45532045 	.word	0x45532045
   2a254:	4f542054 	.word	0x4f542054
   2a258:	25203a20 	.word	0x25203a20
   2a25c:	00000064 	.word	0x00000064
   2a260:	4f545541 	.word	0x4f545541
   2a264:	454d4954 	.word	0x454d4954
   2a268:	00000000 	.word	0x00000000
   2a26c:	54554120 	.word	0x54554120
   2a270:	4d49544f 	.word	0x4d49544f
   2a274:	45532045 	.word	0x45532045
   2a278:	4f542054 	.word	0x4f542054
   2a27c:	25203a20 	.word	0x25203a20
   2a280:	00000064 	.word	0x00000064
   2a284:	004c4142 	.word	0x004c4142
   2a288:	002b504d 	.word	0x002b504d
   2a28c:	4f4e2050 	.word	0x4f4e2050
   2a290:	44444120 	.word	0x44444120
   2a294:	00444544 	.word	0x00444544
   2a298:	002b534d 	.word	0x002b534d
   2a29c:	4f4e2053 	.word	0x4f4e2053
   2a2a0:	44444120 	.word	0x44444120
   2a2a4:	00444544 	.word	0x00444544
   2a2a8:	00002b4d 	.word	0x00002b4d
   2a2ac:	49424f4d 	.word	0x49424f4d
   2a2b0:	4e20454c 	.word	0x4e20454c
   2a2b4:	00003a4f 	.word	0x00003a4f
   2a2b8:	0000000a 	.word	0x0000000a
   2a2bc:	45444441 	.word	0x45444441
   2a2c0:	55532044 	.word	0x55532044
   2a2c4:	53454343 	.word	0x53454343
   2a2c8:	4c554653 	.word	0x4c554653
   2a2cc:	0000594c 	.word	0x0000594c
   2a2d0:	00002d4d 	.word	0x00002d4d
   2a2d4:	4f4d4552 	.word	0x4f4d4552
   2a2d8:	20444556 	.word	0x20444556
   2a2dc:	43435553 	.word	0x43435553
   2a2e0:	46535345 	.word	0x46535345
   2a2e4:	594c4c55 	.word	0x594c4c55
   2a2e8:	00000000 	.word	0x00000000
   2a2ec:	002b4d41 	.word	0x002b4d41
   2a2f0:	45544c41 	.word	0x45544c41
   2a2f4:	54414e52 	.word	0x54414e52
   2a2f8:	4f4d2045 	.word	0x4f4d2045
   2a2fc:	454c4942 	.word	0x454c4942
   2a300:	204f4e20 	.word	0x204f4e20
   2a304:	20444441 	.word	0x20444441
   2a308:	43435553 	.word	0x43435553
   2a30c:	00535345 	.word	0x00535345
   2a310:	002b4d4d 	.word	0x002b4d4d
   2a314:	204d324d 	.word	0x204d324d
   2a318:	202e4f4e 	.word	0x202e4f4e
   2a31c:	45444441 	.word	0x45444441
   2a320:	00000044 	.word	0x00000044
   2a324:	002b524d 	.word	0x002b524d
   2a328:	204d324d 	.word	0x204d324d
   2a32c:	4f4d4552 	.word	0x4f4d4552
   2a330:	4e204554 	.word	0x4e204554
   2a334:	41202e4f 	.word	0x41202e4f
   2a338:	44454444 	.word	0x44454444
   2a33c:	00000000 	.word	0x00000000
   2a340:	4f525245 	.word	0x4f525245
   2a344:	203a2052 	.word	0x203a2052
   2a348:	00007325 	.word	0x00007325
   2a34c:	00004e4f 	.word	0x00004e4f
   2a350:	48502032 	.word	0x48502032
   2a354:	00455341 	.word	0x00455341
   2a358:	00004b4f 	.word	0x00004b4f
   2a35c:	4f525245 	.word	0x4f525245
   2a360:	00000052 	.word	0x00000052
   2a364:	203a5952 	.word	0x203a5952
   2a368:	59206425 	.word	0x59206425
   2a36c:	25203a42 	.word	0x25203a42
   2a370:	52422064 	.word	0x52422064
   2a374:	6425203a 	.word	0x6425203a
   2a378:	3a43410a 	.word	0x3a43410a
   2a37c:	0a732520 	.word	0x0a732520
   2a380:	75716553 	.word	0x75716553
   2a384:	65636e65 	.word	0x65636e65
   2a388:	7325203a 	.word	0x7325203a
   2a38c:	746f4d0a 	.word	0x746f4d0a
   2a390:	203a726f 	.word	0x203a726f
   2a394:	430a7325 	.word	0x430a7325
   2a398:	65727275 	.word	0x65727275
   2a39c:	203a746e 	.word	0x203a746e
   2a3a0:	0a416425 	.word	0x0a416425
   2a3a4:	7774654e 	.word	0x7774654e
   2a3a8:	3a6b726f 	.word	0x3a6b726f
   2a3ac:	00642520 	.word	0x00642520
   2a3b0:	304d4d56 	.word	0x304d4d56
   2a3b4:	00000031 	.word	0x00000031
   2a3b8:	4f544f4d 	.word	0x4f544f4d
   2a3bc:	00002052 	.word	0x00002052
   2a3c0:	0046464f 	.word	0x0046464f
   2a3c4:	7e75257e 	.word	0x7e75257e
   2a3c8:	00000000 	.word	0x00000000
   2a3cc:	20572f46 	.word	0x20572f46
   2a3d0:	61647055 	.word	0x61647055
   2a3d4:	43206574 	.word	0x43206574
   2a3d8:	6c706d6f 	.word	0x6c706d6f
   2a3dc:	64657465 	.word	0x64657465
   2a3e0:	00000000 	.word	0x00000000
   2a3e4:	20572f46 	.word	0x20572f46
   2a3e8:	61647055 	.word	0x61647055
   2a3ec:	45206574 	.word	0x45206574
   2a3f0:	726f7272 	.word	0x726f7272
   2a3f4:	00000000 	.word	0x00000000
   2a3f8:	30303030 	.word	0x30303030
   2a3fc:	30303030 	.word	0x30303030
   2a400:	00003030 	.word	0x00003030
   2a404:	494d4441 	.word	0x494d4441
   2a408:	0000004e 	.word	0x0000004e
   2a40c:	00000023 	.word	0x00000023
   2a410:	30524d56 	.word	0x30524d56
   2a414:	00000032 	.word	0x00000032
   2a418:	204d324d 	.word	0x204d324d
   2a41c:	4e525554 	.word	0x4e525554
   2a420:	4f204445 	.word	0x4f204445
   2a424:	0000004e 	.word	0x0000004e
   2a428:	0000203a 	.word	0x0000203a
   2a42c:	00017534 	.word	0x00017534
   2a430:	0001761a 	.word	0x0001761a
   2a434:	0001761a 	.word	0x0001761a
   2a438:	00017534 	.word	0x00017534
   2a43c:	0001761a 	.word	0x0001761a
   2a440:	0001761a 	.word	0x0001761a
   2a444:	0001761a 	.word	0x0001761a
   2a448:	0001761a 	.word	0x0001761a
   2a44c:	0001761a 	.word	0x0001761a
   2a450:	0001761a 	.word	0x0001761a
   2a454:	0001761a 	.word	0x0001761a
   2a458:	0001761a 	.word	0x0001761a
   2a45c:	00017534 	.word	0x00017534
   2a460:	0001761a 	.word	0x0001761a
   2a464:	0001761a 	.word	0x0001761a
   2a468:	0001761a 	.word	0x0001761a
   2a46c:	000174f6 	.word	0x000174f6
   2a470:	0001761a 	.word	0x0001761a
   2a474:	00017534 	.word	0x00017534
   2a478:	49524b20 	.word	0x49524b20
   2a47c:	414e4853 	.word	0x414e4853
   2a480:	4d532020 	.word	0x4d532020
   2a484:	20545241 	.word	0x20545241
   2a488:	00000000 	.word	0x00000000
   2a48c:	54202020 	.word	0x54202020
   2a490:	4e484345 	.word	0x4e484345
   2a494:	474f4c4f 	.word	0x474f4c4f
   2a498:	20202059 	.word	0x20202059
   2a49c:	00000000 	.word	0x00000000
   2a4a0:	4f532020 	.word	0x4f532020
   2a4a4:	41575446 	.word	0x41575446
   2a4a8:	56204552 	.word	0x56204552
   2a4ac:	20205245 	.word	0x20205245
   2a4b0:	00000000 	.word	0x00000000
   2a4b4:	33422020 	.word	0x33422020
   2a4b8:	35322d30 	.word	0x35322d30
   2a4bc:	2d39302d 	.word	0x2d39302d
   2a4c0:	20203931 	.word	0x20203931
   2a4c4:	00000000 	.word	0x00000000
   2a4c8:	00007325 	.word	0x00007325
   2a4cc:	74696e49 	.word	0x74696e49
   2a4d0:	696c6169 	.word	0x696c6169
   2a4d4:	676e697a 	.word	0x676e697a
   2a4d8:	202e2e2e 	.word	0x202e2e2e
   2a4dc:	00000000 	.word	0x00000000
   2a4e0:	4d4d4f43 	.word	0x4d4d4f43
   2a4e4:	45444e41 	.word	0x45444e41
   2a4e8:	32762052 	.word	0x32762052
   2a4ec:	20202020 	.word	0x20202020
   2a4f0:	00000000 	.word	0x00000000
   2a4f4:	4e4f4850 	.word	0x4e4f4850
   2a4f8:	54532045 	.word	0x54532045
   2a4fc:	53555441 	.word	0x53555441
   2a500:	20202020 	.word	0x20202020
   2a504:	00000000 	.word	0x00000000
   2a508:	20204e4f 	.word	0x20204e4f
   2a50c:	20202020 	.word	0x20202020
   2a510:	20202020 	.word	0x20202020
   2a514:	20202020 	.word	0x20202020
   2a518:	00000000 	.word	0x00000000
   2a51c:	2046464f 	.word	0x2046464f
   2a520:	20202020 	.word	0x20202020
   2a524:	20202020 	.word	0x20202020
   2a528:	20202020 	.word	0x20202020
   2a52c:	00000000 	.word	0x00000000
   2a530:	20595256 	.word	0x20595256
   2a534:	59562020 	.word	0x59562020
   2a538:	20202042 	.word	0x20202042
   2a53c:	20524256 	.word	0x20524256
   2a540:	00000000 	.word	0x00000000
   2a544:	6c333025 	.word	0x6c333025
   2a548:	20202075 	.word	0x20202075
   2a54c:	00000000 	.word	0x00000000
   2a550:	6c333025 	.word	0x6c333025
   2a554:	00002075 	.word	0x00002075
   2a558:	4f544f4d 	.word	0x4f544f4d
   2a55c:	203a2052 	.word	0x203a2052
   2a560:	46464f20 	.word	0x46464f20
   2a564:	20202020 	.word	0x20202020
   2a568:	00000000 	.word	0x00000000
   2a56c:	4f544f4d 	.word	0x4f544f4d
   2a570:	203a2052 	.word	0x203a2052
   2a574:	204e4f20 	.word	0x204e4f20
   2a578:	20202020 	.word	0x20202020
   2a57c:	00000000 	.word	0x00000000
   2a580:	20202020 	.word	0x20202020
   2a584:	20202020 	.word	0x20202020
   2a588:	20202020 	.word	0x20202020
   2a58c:	20202020 	.word	0x20202020
   2a590:	00000000 	.word	0x00000000
   2a594:	4f545541 	.word	0x4f545541
   2a598:	203a2020 	.word	0x203a2020
   2a59c:	204e4f20 	.word	0x204e4f20
   2a5a0:	20202020 	.word	0x20202020
   2a5a4:	00000000 	.word	0x00000000
   2a5a8:	4f545541 	.word	0x4f545541
   2a5ac:	203a2020 	.word	0x203a2020
   2a5b0:	46464f20 	.word	0x46464f20
   2a5b4:	20202020 	.word	0x20202020
   2a5b8:	00000000 	.word	0x00000000
   2a5bc:	4f544f4d 	.word	0x4f544f4d
   2a5c0:	55432052 	.word	0x55432052
   2a5c4:	4e455252 	.word	0x4e455252
   2a5c8:	20203a54 	.word	0x20203a54
   2a5cc:	00000000 	.word	0x00000000
   2a5d0:	6c333025 	.word	0x6c333025
   2a5d4:	30252e75 	.word	0x30252e75
   2a5d8:	20756c32 	.word	0x20756c32
   2a5dc:	20202020 	.word	0x20202020
   2a5e0:	20202020 	.word	0x20202020
   2a5e4:	00202020 	.word	0x00202020
   2a5e8:	48502033 	.word	0x48502033
   2a5ec:	20455341 	.word	0x20455341
   2a5f0:	3a514553 	.word	0x3a514553
   2a5f4:	00000000 	.word	0x00000000
   2a5f8:	204b4f20 	.word	0x204b4f20
   2a5fc:	00000000 	.word	0x00000000
   2a600:	52524520 	.word	0x52524520
   2a604:	00000000 	.word	0x00000000
   2a608:	53414850 	.word	0x53414850
   2a60c:	54532045 	.word	0x54532045
   2a610:	3a455441 	.word	0x3a455441
   2a614:	00000000 	.word	0x00000000
   2a618:	48503320 	.word	0x48503320
   2a61c:	00000020 	.word	0x00000020
   2a620:	48503220 	.word	0x48503220
   2a624:	00000020 	.word	0x00000020
   2a628:	46464f20 	.word	0x46464f20
   2a62c:	00000000 	.word	0x00000000
   2a630:	454c2d4f 	.word	0x454c2d4f
   2a634:	204c4556 	.word	0x204c4556
   2a638:	0000203a 	.word	0x0000203a
   2a63c:	48474948 	.word	0x48474948
   2a640:	00002020 	.word	0x00002020
   2a644:	2044494d 	.word	0x2044494d
   2a648:	00002020 	.word	0x00002020
   2a64c:	20574f4c 	.word	0x20574f4c
   2a650:	00002020 	.word	0x00002020
   2a654:	454c2d55 	.word	0x454c2d55
   2a658:	204c4556 	.word	0x204c4556
   2a65c:	0000203a 	.word	0x0000203a
   2a660:	43545243 	.word	0x43545243
   2a664:	0000204c 	.word	0x0000204c
   2a668:	74746142 	.word	0x74746142
   2a66c:	50797265 	.word	0x50797265
   2a670:	203a7265 	.word	0x203a7265
   2a674:	25257525 	.word	0x25257525
   2a678:	00000020 	.word	0x00000020
   2a67c:	4e474953 	.word	0x4e474953
   2a680:	3a204c41 	.word	0x3a204c41
   2a684:	00000020 	.word	0x00000020
   2a688:	20202020 	.word	0x20202020
   2a68c:	00202020 	.word	0x00202020
   2a690:	4f434e49 	.word	0x4f434e49
   2a694:	474e494d 	.word	0x474e494d
   2a698:	4c414320 	.word	0x4c414320
   2a69c:	202e2e4c 	.word	0x202e2e4c
   2a6a0:	00000000 	.word	0x00000000
   2a6a4:	36312d25 	.word	0x36312d25
   2a6a8:	00000073 	.word	0x00000073
   2a6ac:	43204e49 	.word	0x43204e49
   2a6b0:	2e4c4c41 	.word	0x2e4c4c41
   2a6b4:	20202e2e 	.word	0x20202e2e
   2a6b8:	20202020 	.word	0x20202020
   2a6bc:	00000000 	.word	0x00000000
   2a6c0:	4c414944 	.word	0x4c414944
   2a6c4:	2e474e49 	.word	0x2e474e49
   2a6c8:	20202e2e 	.word	0x20202e2e
   2a6cc:	20202020 	.word	0x20202020
   2a6d0:	00000000 	.word	0x00000000
   2a6d4:	4f434e49 	.word	0x4f434e49
   2a6d8:	474e494d 	.word	0x474e494d
   2a6dc:	534d5320 	.word	0x534d5320
   2a6e0:	202e2e2e 	.word	0x202e2e2e
   2a6e4:	00000000 	.word	0x00000000
   2a6e8:	4754554f 	.word	0x4754554f
   2a6ec:	474e494f 	.word	0x474e494f
   2a6f0:	534d5320 	.word	0x534d5320
   2a6f4:	202e2e2e 	.word	0x202e2e2e
   2a6f8:	00000000 	.word	0x00000000
   2a6fc:	20574f4c 	.word	0x20574f4c
   2a700:	54544142 	.word	0x54544142
   2a704:	20595245 	.word	0x20595245
   2a708:	20202020 	.word	0x20202020
   2a70c:	00000000 	.word	0x00000000
   2a710:	52525543 	.word	0x52525543
   2a714:	20544e45 	.word	0x20544e45
   2a718:	54544553 	.word	0x54544553
   2a71c:	20474e49 	.word	0x20474e49
	...
   2a728:	1f1f0000 	.word	0x1f1f0000
   2a72c:	00000000 	.word	0x00000000
   2a730:	1f1f1f00 	.word	0x1f1f1f00
   2a734:	00000000 	.word	0x00000000
   2a738:	1f1f1f1f 	.word	0x1f1f1f1f
   2a73c:	1f1f0000 	.word	0x1f1f0000
   2a740:	1f1f1f1f 	.word	0x1f1f1f1f
   2a744:	1f1f1f1f 	.word	0x1f1f1f1f
   2a748:	1f1f1f1f 	.word	0x1f1f1f1f
   2a74c:	00018d62 	.word	0x00018d62
   2a750:	000188c6 	.word	0x000188c6
   2a754:	0001890a 	.word	0x0001890a
   2a758:	00018964 	.word	0x00018964
   2a75c:	00018996 	.word	0x00018996
   2a760:	00018a04 	.word	0x00018a04
   2a764:	00018ba0 	.word	0x00018ba0
   2a768:	00018c22 	.word	0x00018c22
   2a76c:	00018cec 	.word	0x00018cec
   2a770:	00018d26 	.word	0x00018d26
   2a774:	00018d60 	.word	0x00018d60
   2a778:	00018c40 	.word	0x00018c40
   2a77c:	00018c5e 	.word	0x00018c5e
   2a780:	00018c7c 	.word	0x00018c7c
   2a784:	00018c9a 	.word	0x00018c9a
   2a788:	00018cc2 	.word	0x00018cc2
   2a78c:	756c255d 	.word	0x756c255d
   2a790:	756c257b 	.word	0x756c257b
   2a794:	756c257d 	.word	0x756c257d
   2a798:	00000000 	.word	0x00000000
   2a79c:	00000002 	.word	0x00000002
   2a7a0:	00000003 	.word	0x00000003
   2a7a4:	00000028 	.word	0x00000028
   2a7a8:	00000029 	.word	0x00000029
   2a7ac:	00000004 	.word	0x00000004
   2a7b0:	00000005 	.word	0x00000005
   2a7b4:	00000006 	.word	0x00000006
   2a7b8:	00000007 	.word	0x00000007
   2a7bc:	00000020 	.word	0x00000020
   2a7c0:	00000021 	.word	0x00000021
   2a7c4:	00000022 	.word	0x00000022
   2a7c8:	00000023 	.word	0x00000023
   2a7cc:	00000024 	.word	0x00000024
   2a7d0:	00000025 	.word	0x00000025
   2a7d4:	00000026 	.word	0x00000026
   2a7d8:	00000027 	.word	0x00000027
   2a7dc:	00000008 	.word	0x00000008
   2a7e0:	00000009 	.word	0x00000009
   2a7e4:	0000000a 	.word	0x0000000a
   2a7e8:	0000000b 	.word	0x0000000b
   2a7ec:	0001d682 	.word	0x0001d682
   2a7f0:	0001d688 	.word	0x0001d688
   2a7f4:	0001d688 	.word	0x0001d688
   2a7f8:	0001d688 	.word	0x0001d688
   2a7fc:	0001d688 	.word	0x0001d688
   2a800:	0001d688 	.word	0x0001d688
   2a804:	0001d688 	.word	0x0001d688
   2a808:	0001d688 	.word	0x0001d688
   2a80c:	0001d688 	.word	0x0001d688
   2a810:	0001d688 	.word	0x0001d688
   2a814:	0001d688 	.word	0x0001d688
   2a818:	0001d688 	.word	0x0001d688
   2a81c:	0001d688 	.word	0x0001d688
   2a820:	0001d688 	.word	0x0001d688
   2a824:	0001d688 	.word	0x0001d688
   2a828:	0001d688 	.word	0x0001d688
   2a82c:	0001d660 	.word	0x0001d660
   2a830:	0001d688 	.word	0x0001d688
   2a834:	0001d688 	.word	0x0001d688
   2a838:	0001d688 	.word	0x0001d688
   2a83c:	0001d688 	.word	0x0001d688
   2a840:	0001d688 	.word	0x0001d688
   2a844:	0001d688 	.word	0x0001d688
   2a848:	0001d688 	.word	0x0001d688
   2a84c:	0001d688 	.word	0x0001d688
   2a850:	0001d688 	.word	0x0001d688
   2a854:	0001d688 	.word	0x0001d688
   2a858:	0001d688 	.word	0x0001d688
   2a85c:	0001d688 	.word	0x0001d688
   2a860:	0001d688 	.word	0x0001d688
   2a864:	0001d688 	.word	0x0001d688
   2a868:	0001d688 	.word	0x0001d688
   2a86c:	0001d67c 	.word	0x0001d67c
   2a870:	0001d688 	.word	0x0001d688
   2a874:	0001d688 	.word	0x0001d688
   2a878:	0001d688 	.word	0x0001d688
   2a87c:	0001d688 	.word	0x0001d688
   2a880:	0001d688 	.word	0x0001d688
   2a884:	0001d688 	.word	0x0001d688
   2a888:	0001d688 	.word	0x0001d688
   2a88c:	0001d688 	.word	0x0001d688
   2a890:	0001d688 	.word	0x0001d688
   2a894:	0001d688 	.word	0x0001d688
   2a898:	0001d688 	.word	0x0001d688
   2a89c:	0001d688 	.word	0x0001d688
   2a8a0:	0001d688 	.word	0x0001d688
   2a8a4:	0001d688 	.word	0x0001d688
   2a8a8:	0001d688 	.word	0x0001d688
   2a8ac:	0001d676 	.word	0x0001d676
   2a8b0:	0001d61e 	.word	0x0001d61e
   2a8b4:	0001d634 	.word	0x0001d634
   2a8b8:	0001d64a 	.word	0x0001d64a
   2a8bc:	0001d604 	.word	0x0001d604
   2a8c0:	42000800 	.word	0x42000800
   2a8c4:	42000c00 	.word	0x42000c00
   2a8c8:	42001000 	.word	0x42001000
   2a8cc:	42001400 	.word	0x42001400
   2a8d0:	42001800 	.word	0x42001800
   2a8d4:	42001c00 	.word	0x42001c00
   2a8d8:	454c4449 	.word	0x454c4449
   2a8dc:	00000000 	.word	0x00000000
   2a8e0:	20726d54 	.word	0x20726d54
   2a8e4:	00637653 	.word	0x00637653
   2a8e8:	000211b0 	.word	0x000211b0
   2a8ec:	000211b0 	.word	0x000211b0
   2a8f0:	000211b0 	.word	0x000211b0
   2a8f4:	0002123e 	.word	0x0002123e
   2a8f8:	00021208 	.word	0x00021208
   2a8fc:	00021232 	.word	0x00021232
   2a900:	000211b0 	.word	0x000211b0
   2a904:	000211b0 	.word	0x000211b0
   2a908:	0002123e 	.word	0x0002123e
   2a90c:	00021208 	.word	0x00021208

0002a910 <_tcc_intflag>:
   2a910:	00000001 00000002 00000004 00000008     ................
   2a920:	00001000 00002000 00004000 00008000     ..... ...@......
   2a930:	00010000 00020000 00040000 00080000     ................
   2a940:	0c0b0a09 00000e0d 0002289c 0002289c     .........(...(..
   2a950:	00022890 0002289c 00022890 0002286a     .(...(...(..j(..
   2a960:	0002286a 0002289c 0002289c 0002289c     j(...(...(...(..
   2a970:	0002289c 0002289c 0002289c 0002289c     .(...(...(...(..
   2a980:	0002289c 0002289c 0002289c 0002289c     .(...(...(...(..
   2a990:	0002289c 0002289c 0002289c 0002289c     .(...(...(...(..
   2a9a0:	0002289c 0002289c 0002289c 0002289c     .(...(...(...(..
   2a9b0:	0002289c 0002289c 0002289c 0002289c     .(...(...(...(..
   2a9c0:	0002289c 0002289c 0002289c 0002289c     .(...(...(...(..
   2a9d0:	0002289c 0002289c 0002289c 0002289c     .(...(...(...(..
   2a9e0:	0002289c 0002289c 0002289c 0002289c     .(...(...(...(..
   2a9f0:	0002289c 0002289c 0002289c 0002289c     .(...(...(...(..
   2aa00:	0002289c 0002289c 0002289c 0002289c     .(...(...(...(..
   2aa10:	0002289c 0002289c 0002289c 0002289c     .(...(...(...(..
   2aa20:	0002289c 0002289c 0002289c 0002289c     .(...(...(...(..
   2aa30:	0002289c 0002289c 0002289c 0002289c     .(...(...(...(..
   2aa40:	0002289c 0002289c 00022890 00022890     .(...(...(...(..
   2aa50:	000228a6 000228a6 000228a6 000228a6     .(...(...(...(..
   2aa60:	41744545 50524f4d 456d752e 00023c16     EEtAMORP.umE.<..
   2aa70:	00023c90 00023c90 00023c34 00023c2e     .<...<..4<...<..
   2aa80:	00023c3a 00023c1c 00023c40 00023c76     :<...<..@<..v<..
   2aa90:	00023f5c 00023fac 00023fac 00023fa8     \?...?...?...?..
   2aaa0:	00023f4e 00023f6e 00023f3e 00023f80     N?..n?..>?...?..
   2aab0:	00023f92 00023ffa 00024028 00024028     .?...?..(@..(@..
   2aac0:	00024024 00023ff4 00024000 00023fee     $@...?...@...?..
   2aad0:	00024006 0002400c 00776f70 74727173     .@...@..pow.sqrt
	...

0002aae8 <TWO52>:
   2aae8:	00000000 43300000 00000000 c3300000     ......0C......0.
   2aaf8:	00026a24 000269f4 00026a06 00026948     $j...i...j..Hi..
   2ab08:	00026a06 000269ea 00026a06 00026948     .j...i...j..Hi..
   2ab18:	000269f4 000269f4 000269ea 00026948     .i...i...i..Hi..
   2ab28:	00026950 00026950 00026950 00026a0c     Pi..Pi..Pi...j..
   2ab38:	000269f4 000269f4 000269c8 00026aac     .i...i...i...j..
   2ab48:	000269c8 000269ea 000269c8 00026aac     .i...i...i...j..
   2ab58:	000269f4 000269f4 000269ea 00026aac     .i...i...i...j..
   2ab68:	00026950 00026950 00026950 00026ab6     Pi..Pi..Pi...j..
   2ab78:	00026c54 00026ba4 00026ba4 00026ba2     Tl...k...k...k..
   2ab88:	00026c46 00026c46 00026c3c 00026ba2     Fl..Fl..<l...k..
   2ab98:	00026c46 00026c3c 00026c46 00026ba2     Fl..<l..Fl...k..
   2aba8:	00026c4c 00026c4c 00026c4c 00026cdc     Ll..Ll..Ll...l..
   2abb8:	0002760c 000275ee 000275a8 000274c6     .v...u...u...t..
   2abc8:	000275a8 000275e0 000275a8 000274c6     .u...u...u...t..
   2abd8:	000275ee 000275ee 000275e0 000274c6     .u...u...u...t..
   2abe8:	000274be 000274be 000274be 00027824     .t...t...t..$x..
   2abf8:	00027e6c 00027d2c 00027d2c 00027d28     l~..,}..,}..(}..
   2ac08:	00027e44 00027e44 00027e36 00027d28     D~..D~..6~..(}..
   2ac18:	00027e44 00027e36 00027e44 00027d28     D~..6~..D~..(}..
   2ac28:	00027e4c 00027e4c 00027e4c 00028050     L~..L~..L~..P...
   2ac38:	4f500043 00584953 3130002e 35343332     C.POSIX...012345
   2ac48:	39383736 64636261 68676665 6c6b6a69     6789abcdefghijkl
   2ac58:	706f6e6d 74737271 78777675 00007a79              mnopqrstuvwxyz.

0002ac67 <_ctype_>:
   2ac67:	20202000 20202020 28282020 20282828     .         ((((( 
   2ac77:	20202020 20202020 20202020 20202020                     
   2ac87:	10108820 10101010 10101010 10101010      ...............
   2ac97:	04040410 04040404 10040404 10101010     ................
   2aca7:	41411010 41414141 01010101 01010101     ..AAAAAA........
   2acb7:	01010101 01010101 01010101 10101010     ................
   2acc7:	42421010 42424242 02020202 02020202     ..BBBBBB........
   2acd7:	02020202 02020202 02020202 10101010     ................
   2ace7:	00000020 00000000 00000000 00000000      ...............
	...
   2ad67:	302d2300 6800202b 65004c6c 46456766     .#-0+ .hlL.efgEF
   2ad77:	31300047 35343332 39383736 44434241     G.0123456789ABCD
   2ad87:	30004645 34333231 38373635 63626139     EF.0123456789abc
   2ad97:	00666564 c0b5f800                                def..

0002ad9c <_init>:
   2ad9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2ad9e:	46c0      	nop			; (mov r8, r8)
   2ada0:	bcf8      	pop	{r3, r4, r5, r6, r7}
   2ada2:	bc08      	pop	{r3}
   2ada4:	469e      	mov	lr, r3
   2ada6:	4770      	bx	lr

0002ada8 <__init_array_start>:
   2ada8:	000100dd 	.word	0x000100dd

0002adac <_fini>:
   2adac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2adae:	46c0      	nop			; (mov r8, r8)
   2adb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
   2adb2:	bc08      	pop	{r3}
   2adb4:	469e      	mov	lr, r3
   2adb6:	4770      	bx	lr

0002adb8 <__fini_array_start>:
   2adb8:	000100b5 	.word	0x000100b5

Disassembly of section .relocate:

20000000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000000:	f3bf 8f5f 	dmb	sy
20000004:	3801      	subs	r0, #1
20000006:	2800      	cmp	r0, #0
20000008:	d1fa      	bne.n	20000000 <portable_delay_cycles>
		"SUB r0, r0, #1 \n"
#endif
		"CMP r0, #0  \n"
		"BNE loop         "
	);
}
2000000a:	4770      	bx	lr

2000000c <ucharPhase_Seq_Check_Flag>:
2000000c:	0101                                             .

2000000d <ucharVoltage_Detect_Timer_Counter>:
2000000d:	0001 aa00                                        ...

20000010 <uxCriticalNesting>:
20000010:	aaaa aaaa                                   ....

20000014 <_events_inst>:
20000014:	0000 0000 000c 0000 0000 0000 0000 0000     ................
20000024:	0000 0000                                   ....

20000028 <g_interrupt_enabled>:
20000028:	0001 0000                                   ....

2000002c <__tracebuffersize__>:
2000002c:	0400 0000                                   ....

20000030 <__fdlib_version>:
20000030:	0001 0000                                   ....

20000034 <_impure_ptr>:
20000034:	0038 2000                                   8.. 

20000038 <impure_data>:
	...

20000098 <__global_locale>:
20000098:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
200000b8:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
200000d8:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
200000f8:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000118:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000138:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000158:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000178:	90ed 0002 8afd 0002 0000 0000 ac67 0002     ............g...
20000188:	ac40 0002 ad6d 0002 ad6d 0002 ad6d 0002     @...m...m...m...
20000198:	ad6d 0002 ad6d 0002 ad6d 0002 ad6d 0002     m...m...m...m...
200001a8:	ad6d 0002 ad6d 0002 ffff ffff ffff ffff     m...m...........
200001b8:	ffff ffff ffff 0000 0001 5341 4943 0049     ..........ASCII.
	...
200001e0:	0000 5341 4943 0049 0000 0000 0000 0000     ..ASCII.........
	...
